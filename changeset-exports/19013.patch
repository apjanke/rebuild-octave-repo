# HG changeset patch
# User Andreas Weber <andy.weber.aw@gmail.com>
# Date 1408222784 -7200
#      Sat Aug 16 22:59:44 2014 +0200
# Node ID 60e54be64f37bd1a507b9d9ee7535bb3fdb6f9c9
# Parent  7f73293d8423c3e40c4b839ec272be706d4f8cb9
Fix ginput for FLTK toolkit

* __init_fltk__.cc: Execute callback for base_properties::buttondownfcn
  and figure_properties::buttondownfcn. Now it is possible to
  have different callbacks for each axes in a subplot.

* __fltk_ginput__.m: Adapt to recent FLTK toolkit changes

diff --git a/libinterp/dldfcn/__init_fltk__.cc b/libinterp/dldfcn/__init_fltk__.cc
--- a/libinterp/dldfcn/__init_fltk__.cc
+++ b/libinterp/dldfcn/__init_fltk__.cc
@@ -1128,16 +1128,17 @@ private:
         status->value (cbuf.str ().c_str ());
       }
   }
 
   void set_currentpoint (int px, int py)
   {
     if (!fp.is_beingdeleted ())
       {
+        // FIXME: consider figures units property
         Matrix pos (1,2,0);
         pos(0) = px;
         pos(1) = h () - (py + status_h + menu_dy ());
         fp.set_currentpoint (pos);
         graphics_object robj = gh_manager::get_object (fp.get_parent ());
         root_figure::properties& rp =
           dynamic_cast<root_figure::properties&> (robj.get_properties ());
         rp.set_currentfigure (fp.get___myhandle__ ().value ());
@@ -1438,18 +1439,24 @@ private:
 
                 if (ndim == 3)
                   rotate->activate ();
                 else // ndim == 2
                   rotate->deactivate ();
 
                 fp.set_currentobject (ax_obj.get_handle ().value ());
 
+                base_properties& props = ax_obj.get_properties ();
+                if (props.get_buttondownfcn ().is_defined ())
+                  props.execute_buttondownfcn (Fl::event_button ());
+
                 return 1;
               }
+            else if (fp.get_buttondownfcn ().is_defined ())
+              fp.execute_buttondownfcn (Fl::event_button ());
 
             break;
 
           case FL_DRAG:
             if (fp.get_windowbuttonmotionfcn ().is_defined ())
               {
                 set_currentpoint (Fl::event_x (), Fl::event_y () - menu_dy ());
                 fp.execute_windowbuttonmotionfcn ();
diff --git a/scripts/plot/util/ginput.m b/scripts/plot/util/ginput.m
--- a/scripts/plot/util/ginput.m
+++ b/scripts/plot/util/ginput.m
@@ -34,26 +34,25 @@
 ## @end deftypefn
 
 function varargout = ginput (n)
 
   if (nargin > 1)
     print_usage ();
   endif
 
-  f = gcf ();
   a = gca ();  # Create an axis, if necessary
   drawnow ();
-  toolkit = get (f, "__graphics_toolkit__");
+  toolkit = get (gcf, "__graphics_toolkit__");
 
   varargout = cell (1, nargout);
   if (nargin == 0)
-    [varargout{:}] = feval (["__" toolkit "_ginput__"], f);
+    [varargout{:}] = feval (["__" toolkit "_ginput__"]);
   else
-    [varargout{:}] = feval (["__" toolkit "_ginput__"], f, n);
+    [varargout{:}] = feval (["__" toolkit "_ginput__"], n);
   endif
 
 endfunction
 
 
 ## Remove from test statistics.  No real tests possible.
 %!test
 %! assert (1);
diff --git a/scripts/plot/util/private/__fltk_ginput__.m b/scripts/plot/util/private/__fltk_ginput__.m
--- a/scripts/plot/util/private/__fltk_ginput__.m
+++ b/scripts/plot/util/private/__fltk_ginput__.m
@@ -12,51 +12,51 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {[@var{x}, @var{y}, @var{buttons}] =} __fltk_ginput__ (@var{f}, @var{n})
+## @deftypefn {Function File} {[@var{x}, @var{y}, @var{buttons}] =} __fltk_ginput__ (@var{n})
 ## Undocumented internal function.
 ## @end deftypefn
 
 ## This is ginput.m implementation for fltk.
 
-function [x, y, button] = __fltk_ginput__ (f, n = -1)
+function [x, y, button] = __fltk_ginput__ (n = -1)
 
-  if (isempty (get (f, "currentaxes")))
+  if (isempty (gca))
     error ("ginput: must have at least one axes");
   endif
 
   x = y = button = [];
   ginput_accumulator (0, 0, 0, 0);  # initialize accumulator
 
   unwind_protect
 
-    orig_windowbuttondownfcn = get (f, "windowbuttondownfcn");
-    set (f, "windowbuttondownfcn", @ginput_windowbuttondownfcn);
+    orig_buttondownfcn = get (gca, "buttondownfcn");
+    set (gca, "buttondownfcn", @ginput_buttondownfcn);
 
-    orig_ginput_keypressfcn = get (f, "keypressfcn");
-    set (f, "keypressfcn", @ginput_keypressfcn);
+    orig_ginput_keypressfcn = get (gcf, "keypressfcn");
+    set (gcf, "keypressfcn", @ginput_keypressfcn);
 
     do
       __fltk_check__ ();
 
       ## Release CPU.
       sleep (0.01);
 
       [x, y, n0, button] = ginput_accumulator (-1, 0, 0, 0);
     until (n0 == n || n0 < 0)
 
   unwind_protect_cleanup
-    set (f, "windowbuttondownfcn", orig_windowbuttondownfcn);
-    set (f, "keypressfcn", orig_ginput_keypressfcn);
+    set (gca, "buttondownfcn", orig_buttondownfcn);
+    set (gcf, "keypressfcn", orig_ginput_keypressfcn);
   end_unwind_protect
 
 endfunction
 
 function [x, y, n, button] = ginput_accumulator (mode, xn, yn, btn)
   persistent x y n button;
 
   if (mode == 0)
@@ -71,25 +71,24 @@ function [x, y, n, button] = ginput_accu
     n += 1;
   elseif (mode == 2)
     ## The end due to Enter.
     n = -1;
  endif
 
 endfunction
 
-function ginput_windowbuttondownfcn (src, data)
-  point = get (get (src,"currentaxes"), "currentpoint");
-  button = data;
+function ginput_buttondownfcn (src, button)
+  point = get (src, "currentpoint");
   ginput_accumulator (1, point(1,1), point(2,1), button);
 endfunction
 
 function ginput_keypressfcn (src, evt)
-  point = get (get (src, "currentaxes"), "currentpoint");
+  point = get (gca, "currentpoint");
   key = evt.Key;
-  if (key == 10)
+  if (key == "return")
     ## Enter key stops ginput.
     ginput_accumulator (2, NaN, NaN, NaN);
   else
-    ginput_accumulator (1, point(1,1), point(2,1), key);
+    ginput_accumulator (1, point(1,1), point(2,1), uint8 (key(1)));
   endif
 endfunction
 
