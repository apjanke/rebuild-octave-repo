# HG changeset patch
# User jwe
# Date 939695247 0
#      Tue Oct 12 02:27:27 1999 +0000
# Node ID eb27ea9b7ff82e97a806f8e82aa33489f0080319
# Parent  9e0c8e28955516326f8ff9fd971e112e2532bf59
[project @ 1999-10-12 02:22:25 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,20 @@
+Mon Sep 20 11:02:29 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* emacs/octave-inf.el, emacs/octave-mod.el: Update to match FSF
+	sources plus code that will make it work if Emacs doesn't have the
+	customize code.
+
+Tue Sep 14 07:57:06 1999  Kurt Hornik <hornik@ci.tuwien.ac.at>
+
+	* emacs/octave-inf.el (inferior-octave-startup): Always pass "-i"
+	and "--no-line-editing" to Octave subprocess.
+ 	(inferior-octave-startup-args): Default to nil.
+
 Mon Sep  6 10:50:10 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* emacs/octave-inf.el (inferior-octave-startup-args):
 	Add --no-line-editing to the list.
 
 Fri Jul  9 09:15:24 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* configure.in: Try to handle IEEE FP flags for g77 on Alphas.
diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -1,11 +1,29 @@
 Summary of changes for version 2.1.x:
 ------------------------------------
 
+  * If you are using GNU Emacs 19.34 or earlier, you will need to add
+    the following code to your ~/.emacs file in order to use Emacs
+    Octave mode:
+
+      ;; Set up the custom library.
+      ;; taken from http://www.dina.kvl.dk/~abraham/custom/
+      (eval-and-compile
+	(condition-case ()
+	    (require 'custom)
+	  (error nil))
+	(if (and (featurep 'custom) (fboundp 'custom-declare-variable))
+	    nil ;; We've got what we needed
+	  ;; We have the old custom-library, hack around it!
+	  (defmacro defgroup (&rest args)
+	    nil)
+	  (defmacro defcustom (var value doc &rest args) 
+	    (` (defvar (, var) (, value) (, doc))))))
+
   * When `format +' is in effect, Octave uses the following symbols to
     provide more information about the values in a matrix:
 
       +      postive real
       -      negative real
       i      pure imaginary
       c      complex
       blank  zero
diff --git a/README.mirrors b/README.mirrors
--- a/README.mirrors
+++ b/README.mirrors
@@ -1,24 +1,25 @@
 If you have trouble transferring Octave from this site, you might try
 one of those listed below.  They mirror the /pub/octave directory on
 ftp.che.wisc.edu.
 
-  site				directory
-  ----				---------
-  ftp.eos.hokudai.ac.jp		/pub/GNU/misc/octave
-  ftp.math.uni-hamburg.de	/pub/soft/math/octave
-  ftp.task.gda.pl		/pub/software/octave
+  site                          directory
+  ----                          ---------
+  ftp.eos.hokudai.ac.jp         /pub/GNU/misc/octave
+  ftp.math.uni-hamburg.de       /pub/soft/math/octave
+  ftp.task.gda.pl               /pub/software/octave
   ftp.u-aizu.ac.jp              /pub/SciEng/numanal/Octave
+  mirror.aarnet.edu.au          /pub/octave
 
 The latest Octave sources may also be found on the official Free
 Software Foundation ftp site, ftp://prep.ai.mit.edu/pub/gnu, which is
 also mirrored on many sites around the world.
 
 The web page http://ftpsearch.ntnu.no/ftpsearch is another useful
 resource for locating software that is available via anonymous ftp.
 
 John W. Eaton
 jwe@bevo.che.wisc.edu
 University of Wisconsin-Madison
 Department of Chemical Engineering
 
-Fri Aug 22 15:49:17 1997
+Thu Sep 23 15:44:27 1999
diff --git a/doc/interpreter/arith.texi b/doc/interpreter/arith.texi
--- a/doc/interpreter/arith.texi
+++ b/doc/interpreter/arith.texi
@@ -295,17 +295,27 @@ Return the imaginary part of @var{z} as 
 
 @deftypefn {Mapping Function} {} real (@var{z})
 Return the real part of @var{z}.
 @end deftypefn
 
 @node Trigonometry, Sums and Products, Complex Arithmetic, Arithmetic
 @section Trigonometry
 
-Octave provides the following trigonometric functions:
+Octave provides the following trigonometric functions.  Angles are
+specified in radians.  To convert from degrees to radians multipy by
+@iftex
+@tex
+$\pi/180$
+@end tex
+@end iftex
+@ifinfo
+@code{pi/180}
+@end ifinfo
+ (e.g. @code{sin (30 * pi/180)} returns the sine of 30 degrees).
 
 @deftypefn {Mapping Function} {} sin (@var{z})
 @deftypefnx {Mapping Function} {} cos (@var{z})
 @deftypefnx {Mapping Function} {} tan (@var{z})
 @deftypefnx {Mapping Function} {} sec (@var{z})
 @deftypefnx {Mapping Function} {} csc (@var{z})
 @deftypefnx {Mapping Function} {} cot (@var{z})
 The ordinary trigonometric functions.
diff --git a/libcruft/ChangeLog b/libcruft/ChangeLog
--- a/libcruft/ChangeLog
+++ b/libcruft/ChangeLog
@@ -1,8 +1,12 @@
+1999-10-01  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* dassl/dpotrf.f, dassl/dpotf2.f: Move to lapack subdirectory.
+
 Fri Mar 26 01:19:04 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Makerules.in (all): Don't try to use a special rule for making
 	the archive.  The default rules may be slower, but they are also
 	correct.
 
 Wed Nov 11 17:27:35 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,31 @@
+Wed Sep 22 22:12:03 1999 A. Scottedward Hodel <a.s.hodel@eng.auburn.edu>
+
+	* linear-algebra/krylov.m: Correctly handle case of V having full
+	rank when V has more columns than rows.
+
+Mon Sep 20 23:04:57 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* general/linspace.m, linear-algebra/pinv.m: Delete.
+
+	* statistics/tests/manova.m: Avoid problems if
+	whitespace_in_literal_matrix is set to "traditional".
+	* statistics/tests/t_test_regression.m: Likewise.
+	* statistics/tests/u_test.m: Likewise.
+	* statistics/tests/chisquare_test_homogeneity.m: Likewise.
+	* statistics/tests/anova.m: Likewise.
+	* statistics/tests/kruskal_wallis_test.m: Likewise.
+	* statistics/base/statistics.m: Likewise.
+	* image/saveimage.m: Likewise.
+	* signal/arch_fit.m: Likewise.
+	* signal/autoreg_matrix.m: Likewise.
+	* signal/triangle_lw.m: Likewise.
+	* strings/dec2hex.m: Likewise.
+
 Thu Sep  9 19:31:58 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* image/saveimage.m: Initialize scale.
 
 Sun Sep  5 22:13:47 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* general/reshape.m: Allow reshape (a, size (b)).
 
diff --git a/scripts/image/saveimage.m b/scripts/image/saveimage.m
--- a/scripts/image/saveimage.m
+++ b/scripts/image/saveimage.m
@@ -157,17 +157,17 @@ function saveimage (filename, img, img_f
       endif
 
       n_long = rem (img_nc, 8);
       tmp = zeros (ceil (img_nc/8), img_nr);
 
       for i = 1:img_nr
 	idx = (i-1)*img_nc+1:i*img_nc;
       	if (n_long > 0)
-	  img_row = [map(img(idx)); zeros (8-n_long, 1)];
+	  img_row = [map(img(idx)); (zeros (8-n_long, 1))];
 	else
       	  img_row = map(img(idx));
 	endif
 	img_row
 	tmp
 	if (img_nc < 8)
 	  for j = 1:8
 	    tmp(:,i) = tmp(:,i) + img_row (j) * 2^(8-j);
diff --git a/scripts/linear-algebra/krylov.m b/scripts/linear-algebra/krylov.m
--- a/scripts/linear-algebra/krylov.m
+++ b/scripts/linear-algebra/krylov.m
@@ -1,9 +1,9 @@
-# Copyright (C) 1993, 1998, 1999 A. Scottedward Hodel
+# Copyright (C) 1993, 1998, 1999 Auburn University.  All rights reserved.
 #
 # This file is part of Octave.
 #
 # Octave is free software; you can redistribute it and/or modify it
 # under the terms of the GNU General Public License as published by the
 # Free Software Foundation; either version 2, or (at your option) any
 # later version.
 #
@@ -14,116 +14,118 @@
 #
 # You should have received a copy of the GNU General Public License
 # along with Octave; see the file COPYING.  If not, write to the Free
 # Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 function [Uret,H,nu] = krylov(A,V,k,eps1,pflg);
   # function [U,H,nu] = krylov(A,V,k{,eps1,pflg});
   # construct orthogonal basis U of block Krylov subspace;
-  # 	[V AV A^2*V ... A^(k+1)*V];
+  #  [V AV A^2*V ... A^(k+1)*V];
   # method used: householder reflections to guard against loss of
   # orthogonality
   # eps1: threshhold for 0 (default: 1e-12)
   # pflg: flag to use row pivoting  (improves numerical behavior)
   #   0 [default]: no pivoting; prints a warning message if trivial
   #                null space is corrupted
   #   1          : pivoting performed
   #
   # outputs:
   #   Uret: orthogonal basis of block krylov subspace
-  #   H: Hessenberg matrix; if V is a vector then A U = U H 
+  #   H: Hessenberg matrix; if V is a vector then A U = U H
   #      otherwise H is meaningless
   # nu: dimension of span of krylov subspace (based on eps1)
-  # if B is a vector and k > m-1, krylov returns H = the Hessenberg 
+  # if B is a vector and k > m-1, krylov returns H = the Hessenberg
   # decompostion of A.
   #
-  # Reference: Hodel and Misra, "Partial Pivoting in the Computation of 
-  #     Krylov Subspaces", In preparation.
+  # Reference: Hodel and Misra, "Partial Pivoting in the Computation of
+  #     Krylov Subspaces", to be submitted to Linear Algebra and its
+  #     Applications
+  # written by A. Scottedward Hodel a.s.hodel@eng.auburn.edu
 
   defeps = 1e-12;
   if(nargin < 3 | nargin > 5)
     usage("[U,nu] = krylov(A,V,k{,eps1,pflg})")
   elseif(nargin < 5)
     pflg = 0;        # default permutation flag
   endif
   if(nargin < 4)
     eps1 = defeps;    # default tolerance parameter
   endif
   if(isempty(eps1)) eps1 = defeps; endif
-  
+
   na = is_square(A);
   if( !na ) error("A(%d x %d) must be square",rows(A),columns(A)); endif
- 
-  [m,kb] = size(V); 
+
+  [m,kb] = size(V);
   if(m != na);
     error("A(%d x %d), V(%d x %d): argument dimensions do not match", ...
       na,na,m,kb)
   endif
 
   if( !is_scalar(k) )
     error("krylov: third argument must be a scalar integer")
   endif
 
   Vnrm = norm(V,Inf);
-  
+
   # check for trivial solution
   if(Vnrm == 0)
     Uret = []; nu = 0;  return;
   endif
 
   # identify trivial null space
   abm = max(abs([A,V]'));  nzidx = find(abm != 0);  zidx = find(abm == 0);
 
   # set up vector of pivot points
   pivot_vec = 1:na;
 
   iter = 0;
-  alpha = [];  
+  alpha = [];
   nh = 0;
   while (length(alpha) < na) & (columns(V) > 0) & (iter < k)
     iter++;
 
     # get orthogonal basis of V
     jj = 1;
     while(jj <= columns(V) & length(alpha) < na)
       nu = length(alpha)+1;   # index of next Householder reflection
-     
+
       short_pv = pivot_vec(nu:na);
       q = V(:,jj);
       short_q = q(short_pv);
 
       if(norm(short_q) < eps1)
         # insignificant column; delete
         nv = columns(V);
-        if(jj != nv) 
-          [V(:,jj),V(:,nv)] = swap(V(:,jj),V(:,nv)); 
+        if(jj != nv)
+          [V(:,jj),V(:,nv)] = swap(V(:,jj),V(:,nv));
           # FIX ME: H columns should be swapped too.  Not done since
           # Block Hessenberg structure is lost anyway.
         endif
         V = V(:,1:(nv-1));
         nu = nu - 1;    # one less reflection
 
       else
         # new householder reflection
         if(pflg)
           # locate max magnitude element in short_q
           asq = abs(short_q);
 	  maxv = max(asq);
           maxidx = find(asq == maxv);
           pivot_idx = short_pv(maxidx(1));
-           
+
           # see if need to change the pivot list
           if(pivot_idx != pivot_vec(nu))
             swapidx = maxidx(1) + (nu-1);
             [pivot_vec(nu),pivot_vec(swapidx)] = ...
               swap(pivot_vec(nu),pivot_vec(swapidx));
           endif
         endif
-        
+
         # isolate portion of vector for reflection
         idx = pivot_vec(nu:na);
         jdx = pivot_vec(1:nu);
 
         [hv,av,z] = housh(q(idx),1,0);
         alpha(nu) = av;
         U(idx,nu) = hv;
 
@@ -134,23 +136,34 @@ function [Uret,H,nu] = krylov(A,V,k,eps1
           H(nu,nu-1) = V(pivot_vec(nu),jj);
         endif
 
         # advance to next column of V
         jj=jj+1;
       endif
     endwhile
 
+    # check for oversize V (due to full rank)
+    if( ( columns(V) > na ) & ( length(alpha) == na ) )
+      # trim to size
+      V = V(:,1:na);
+    elseif( columns(V) > na )
+      krylov_V = V
+      krylov_na = na
+      krylov_length_alpha = length(alpha)
+      error("This case should never happen; submit bug report.");
+    endif
+
     if(columns(V) > 0)
       # construct next Q and multiply
       Q = zeros(size(V));
       for kk=1:columns(Q)
         Q(pivot_vec(nu-columns(Q)+kk),kk) = 1;
       endfor
-      
+
       # apply Householder reflections
       for ii = nu:-1:1
         idx = pivot_vec(ii:na);
         hv = U(idx,ii);
         av = alpha(ii);
         Q(idx,:) = Q(idx,:) - av*hv*(hv'*Q(idx,:));
       endfor
     endif
@@ -173,16 +186,16 @@ function [Uret,H,nu] = krylov(A,V,k,eps1
   for i=j1:-1:1;
     idx = pivot_vec(i:na);
     hv = U(idx,i);
     av = alpha(i);
     U(:,i) = zeros(na,1);
     U(idx(1),i) = 1;
     U(idx,i:j1) = U(idx,i:j1)-av*hv*(hv'*U(idx,i:j1));
   endfor
-  
+
   nu = length(alpha);
   Uret = U;
   if( max(max( abs(Uret(zidx,:)) )) > 0)
     warning("krylov: trivial null space corrupted; set pflg=1 or eps1>%e",eps1);
   endif
 
 endfunction
diff --git a/scripts/signal/arch_fit.m b/scripts/signal/arch_fit.m
--- a/scripts/signal/arch_fit.m
+++ b/scripts/signal/arch_fit.m
@@ -62,17 +62,17 @@ function [a, b] = arch_fit (y, X, p, ITE
   [T, k] = size (X);
   
   if (nargin == 7)
     a   = a0;
     b   = b0;
     e   = y - X * b;
   else
     [b, v_b, e] = ols (y, X);
-    a   = [v_b, zeros (1,p)]';
+    a   = [v_b, (zeros (1, p))]';
     if (nargin < 5)
       gamma = 0.1;
       if (nargin < 4)
 	ITER = 50;
       endif
     endif
   endif
   
diff --git a/scripts/signal/autoreg_matrix.m b/scripts/signal/autoreg_matrix.m
--- a/scripts/signal/autoreg_matrix.m
+++ b/scripts/signal/autoreg_matrix.m
@@ -33,12 +33,12 @@ function X = autoreg_matrix (y, k)
   if !(is_vector (y))
     error ("autoreg_matrix:  y must be a vector");
   endif
   
   T = length (y);
   y = reshape (y, T, 1);
   X = ones (T, k+1);
   for j = 1 : k;
-    X(:, j+1) = [zeros (j, 1); y(1:T-j)];
+    X(:, j+1) = [(zeros (j, 1)); y(1:T-j)];
   endfor
   
 endfunction
diff --git a/scripts/signal/triangle_lw.m b/scripts/signal/triangle_lw.m
--- a/scripts/signal/triangle_lw.m
+++ b/scripts/signal/triangle_lw.m
@@ -20,12 +20,12 @@
 ## estimation.
   
 ## Author:  FL <Friedrich.Leisch@ci.tuwien.ac.at>
 ## Description:  Triangular lag window
   
 function retval = triangle_lw (n, b)
   
   retval = 1 - (0 : n-1)' * b;
-  retval = max ([retval'; zeros (1, n)])';
+  retval = max ([retval'; (zeros (1, n))])';
 
 endfunction
 
diff --git a/scripts/statistics/base/statistics.m b/scripts/statistics/base/statistics.m
--- a/scripts/statistics/base/statistics.m
+++ b/scripts/statistics/base/statistics.m
@@ -31,17 +31,21 @@ function S = statistics (X)
     usage ("S = statistics (X)");
   endif
 
   if (prod (size (X)) > 1)
     if (is_vector (X))
       X = reshape (X, length (X), 1);
     endif
     for k=1:columns(X)
-      S(:,k) = [min (X(:,k)); empirical_inv ([0.25;0.5;0.75], X(:,k));
-	 	max (X(:,k)); mean (X(:,k)); std (X(:,k));
-		skewness (X(:,k)); kurtosis (X(:,k))];
+      S(:,k) = [(min (X(:,k)));
+		(empirical_inv ([0.25;0.5;0.75], X(:,k)));
+	 	(max (X(:,k)));
+		(mean (X(:,k)));
+		(std (X(:,k)));
+		(skewness (X(:,k)));
+		(kurtosis (X(:,k)))];
     endfor 
   else
     error ("statistics:  invalid argument");
   endif
   
 endfunction
diff --git a/scripts/statistics/tests/anova.m b/scripts/statistics/tests/anova.m
--- a/scripts/statistics/tests/anova.m
+++ b/scripts/statistics/tests/anova.m
@@ -59,17 +59,17 @@ function [pval, f, df_b, df_w] = anova (
 		" of the same length y"]);
     endif
     s = sort (g);
     i = find (s (2 : n) > s(1 : (n-1)));
     k = length (i) + 1;
     if (k == 1)
       error ("anova:  there should be at least 2 groups");
     else
-      group_label = s ([1, reshape (i, 1, k-1) + 1]);
+      group_label = s ([1, (reshape (i, 1, k-1) + 1)]);
     endif
     for i = 1 : k;
       v = y (find (g == group_label (i)));
       group_count (i) = length (v);
       group_mean (i) = mean (v);
     endfor
     
   endif
diff --git a/scripts/statistics/tests/chisquare_test_homogeneity.m b/scripts/statistics/tests/chisquare_test_homogeneity.m
--- a/scripts/statistics/tests/chisquare_test_homogeneity.m
+++ b/scripts/statistics/tests/chisquare_test_homogeneity.m
@@ -41,17 +41,17 @@ function [pval, chisq, df] = chisquare_t
     error ("chisquare_test_homogeneity: x, y and c must be vectors");
   endif
   ## Now test c for strictly increasing entries
   df = length (c);
   if (any ( (c(2 : df) - c(1 : (df - 1))) <= 0))
     error ("chisquare_test_homogeneity:  c must be increasing");
   endif
   
-  c     = [reshape (c, 1, df), Inf];
+  c     = [(reshape (c, 1, df)), Inf];
   l_x   = length (x);
   x     = reshape (x, l_x, 1);
   n_x   = sum (x * ones (1, df+1) < ones (l_x, 1) * c);
   l_y   = length (y);
   y     = reshape (y, l_y, 1);
   n_y   = sum(y * ones (1, df+1) < ones (l_y, 1) * c);
   chisq = l_x * l_y * sum ((n_x/l_x - n_y/l_y).^2 ./ (n_x + n_y));
   pval  = 1 - chisquare_cdf (chisq, df);
diff --git a/scripts/statistics/tests/kruskal_wallis_test.m b/scripts/statistics/tests/kruskal_wallis_test.m
--- a/scripts/statistics/tests/kruskal_wallis_test.m
+++ b/scripts/statistics/tests/kruskal_wallis_test.m
@@ -43,17 +43,17 @@ function [pval, k, df] = kruskal_wallis_
   va_start;
   for i = 1 : m;
     x = va_arg ();
     if (! is_vector (x))
       error ("kruskal_wallis_test:  all arguments must be vectors");
     endif
     l = length (x);
     n = [n, l];
-    p = [p, reshape (x, 1, l)];
+    p = [p, (reshape (x, 1, l))];
   endfor
   
   r = ranks (p);
 
   k = 0;
   j = 0;
   for i = 1 : m;
     k = k + (sum (r ((j + 1) : (j + n(i))))) ^ 2 / n(i);
diff --git a/scripts/statistics/tests/manova.m b/scripts/statistics/tests/manova.m
--- a/scripts/statistics/tests/manova.m
+++ b/scripts/statistics/tests/manova.m
@@ -56,17 +56,17 @@ function manova (Y, g)
 
   s = sort (g);
   i = find (s (2:n) > s(1:(n-1)));
   k = length (i) + 1;
     
   if (k == 1)
     error ("manova:  there should be at least 2 groups");
   else
-    group_label = s ([1, reshape (i, 1, k - 1) + 1]);
+    group_label = s ([1, (reshape (i, 1, k - 1) + 1)]);
   endif
 
   Y = Y - ones (n, 1) * mean (Y);
   SST = Y' * Y;
 
   s = zeros (1, p);
   SSB = zeros (p, p);
   for i = 1 : k;
diff --git a/scripts/statistics/tests/t_test_regression.m b/scripts/statistics/tests/t_test_regression.m
--- a/scripts/statistics/tests/t_test_regression.m
+++ b/scripts/statistics/tests/t_test_regression.m
@@ -81,17 +81,16 @@ function [pval, t, df] = t_test_regressi
   
   if (strcmp (alt, "!=") || strcmp (alt, "<>"))
     pval = 2 * min (cdf, 1 - cdf);
   elseif strcmp (alt, ">")
     pval = 1 - cdf;
   elseif strcmp (alt, "<")
     pval = cdf;
   else
-    error (["t_test_regression:  ", ...
-	    sprintf ("the value %s for alt is not possible", alt)]);
+    error ("t_test_regression: the value `%s' for alt is not possible", alt);
   endif
   
   if (nargout == 0)
     printf ("pval:  %g\n", pval);
   endif
 
 endfunction
diff --git a/scripts/statistics/tests/u_test.m b/scripts/statistics/tests/u_test.m
--- a/scripts/statistics/tests/u_test.m
+++ b/scripts/statistics/tests/u_test.m
@@ -47,17 +47,17 @@ function [pval, z] = u_test (x, y, alt)
   endif
     
   if (! (is_vector (x) && is_vector (y)))
     error ("u_test:  both x and y must be vectors");
   endif
 
   n_x  = length (x);
   n_y  = length (y);
-  r    = ranks ([reshape (x, 1, n_x), reshape (y, 1, n_y)]);
+  r    = ranks ([(reshape (x, 1, n_x)), (reshape (y, 1, n_y))]);
   z    = (sum (r(1 : n_x)) - n_x * (n_x + n_y + 1) / 2) ...
            / sqrt (n_x * n_y * (n_x + n_y + 1) / 12);  
 
   cdf  = stdnormal_cdf (z);
   
   if (nargin == 2)
     alt  = "!=";
   endif
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+Thu Sep 23 19:49:36 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* toplev.cc (Fsystem): For async case, use execl instead of
+	system, avoiding the need to exit after executing the subprocess.
+
 Thu Sep  9 17:09:23 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* oct-stream.cc (get_size): Allow zero values.
 	(get_size): New arg, one_elt_size_spec.
 	(do_scanf_conv): New arg, `conv_count'.  Change instantiation
 	requests and all callers.
 	(octave_base_stream::do_scanf): Improve scanning of strings.
 	(octave_base_stream::do_oscanf): Remove size limit on %s conversions.
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -420,19 +420,22 @@ or\n\
 	  if (type == async)
 	    {
 	      pid_t pid = fork ();
 
 	      if (pid < 0) 
 		error ("system: fork failed -- can't create child process");
 	      else if (pid == 0)
 		{
-		  system (cmd_str.c_str ());
-		  exit (0);
-		  retval(0) = 0.0;
+		  // XXX FIXME XXX -- should probably replace this
+		  // call with something portable.
+
+		  execl ("/bin/sh", "sh", "-c", cmd_str.c_str (), 0);
+
+		  panic_impossible ();
 		}
 	      else
 		retval(0) = static_cast<double> (pid);
 	    }
 	  else if (return_output)
 	    retval = run_command_and_return_output (cmd_str);
 	  else
 	    {
diff --git a/src/version.h b/src/version.h
--- a/src/version.h
+++ b/src/version.h
@@ -18,17 +18,17 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 #if !defined (octave_version_h)
 #define octave_version_h 1
 
-#define OCTAVE_VERSION "2.1.14"
+#define OCTAVE_VERSION "2.1.15"
 
 #define OCTAVE_COPYRIGHT \
   "Copyright (C) 1996, 1997, 1998 John W. Eaton."
 
 #define OCTAVE_NAME_AND_VERSION \
   "GNU Octave, version " OCTAVE_VERSION " (" CANONICAL_HOST_TYPE ")"
 
 #define OCTAVE_NAME_VERSION_AND_COPYRIGHT \
