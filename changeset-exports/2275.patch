# HG changeset patch
# User jwe
# Date 832910932 0
#      Fri May 24 04:08:52 1996 +0000
# Node ID 38fea6d34dafcea524197ac5177d8e50a62b5bd4
# Parent  9750746d7da5e1859a2a9798cb4a85282a011600
[project @ 1996-05-24 04:06:52 by jwe]

diff --git a/scripts/strings/findstr.m b/scripts/strings/findstr.m
--- a/scripts/strings/findstr.m
+++ b/scripts/strings/findstr.m
@@ -11,56 +11,75 @@
 # ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 # FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 # for more details.
 # 
 # You should have received a copy of the GNU General Public License
 # along with Octave; see the file COPYING.  If not, write to the Free
 # Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
-function v = findstr (s, t)
+function v = findstr (s, t, overlap)
 
-# usage: findstr (s, t)
+# usage: findstr (s, t [, overlap])
 #
 # Returns the vector of all positions in the longer of the two strings
 # S and T where an occurence of the shorter of the two starts.
-  
+#
+# If the optional argument OVERLAP is nonzero, the returned vector
+# can include overlapping positions (this is the default).
+#
+# For example, 
+#
+#   findstr ("abababa", "aba")     =>  [1, 3, 5]
+#   findstr ("abababa", "aba", 0)  =>  [1, 5]
+
 # Original version by Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>.
 
-  if (nargin != 2)
-    usage ("findstr (s, t)");
+  if (nargin < 2 || nargin > 3)
+    usage ("findstr (s, t [, overlap])");
+  endif
+
+  if (nargin == 2)
+    overlap = 1;
   endif
 
   if (isstr (s) && isstr (t))
 
     # Make S be the longer string.
 
     if (length (s) < length (t))
       tmp = s;
       s = t;
       t = tmp;
     endif
 
     s = toascii (s);
     t = toascii (t);
 
-    ind = 1 : length (t);
-    limit = length (s) - length (t) + 1;
+    l_t = length (t);
+
+    ind = 1 : l_t;
+    limit = length (s) - l_t + 1;
     v  = zeros (1, limit);
     i = 0;
 
-    for k = 1 : limit
+    k = 1;
+    while (k <= limit)
       if (s (ind + k - 1) == t)
 	v (++i) = k;
+	if (! overlap)
+	  k = k + l_t - 1;
+	endif
       endif
-    endfor
+      k++;
+    endwhile
 
     if (i > 0)
       v = v (1:i);
     else
       v = [];
     endif
 
   else
-    error ("findstr: both arguments must be strings");
+    error ("findstr: expecting first two arguments to be strings");
   endif
 
 endfunction
diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -396,21 +396,21 @@ do_input_echo (const string& input_strin
 
 	  if (input_string[input_string.length () - 1] != '\n')
 	    octave_stdout << "\n";
 	}
     }
 }
 
 char *
-gnu_readline (const char *s)
+gnu_readline (const char *s, bool force_readline)
 {
   char *retval = 0;
 
-  if (using_readline)
+  if (using_readline || force_readline)
     {
       char *tmp = retval = ::readline (s);
 
       if (tmp && strlen (tmp) == 0)
 	{
 	  retval = (char *) malloc (2);
 	  retval[0] = '\n';
 	  retval[1] = '\0';
@@ -1005,17 +1005,17 @@ get_user_input (const octave_value_list&
 	 return retval;
        }
     }
 
  again:
 
   flush_octave_stdout ();
 
-  char *input_buf = gnu_readline (prompt.c_str ());
+  char *input_buf = gnu_readline (prompt.c_str (), true);
 
   if (input_buf)
     {
       if (! input_from_startup_file)
 	octave_command_history.add (input_buf);
 
       int len = strlen (input_buf);
 
diff --git a/src/input.h b/src/input.h
--- a/src/input.h
+++ b/src/input.h
@@ -62,17 +62,17 @@ extern int interactive;
 extern int forced_interactive;
 
 // Should we issue a prompt?
 extern int promptflag;
 
 // A line of input.
 extern string current_input_line;
 
-char *gnu_readline (const char *s);
+char *gnu_readline (const char *s, bool force_readline = false);
 
 extern string Vps4;
 
 extern void symbols_of_input (void);
 
 #endif
 
 /*
diff --git a/src/mappers.h b/src/mappers.h
--- a/src/mappers.h
+++ b/src/mappers.h
@@ -42,56 +42,65 @@ typedef Complex (*c_c_Mapper)(const Comp
 //
 // If can_return_complex_for_real_arg is 0, lower_limit and
 // upper_limit are ignored.
 
 struct builtin_mapper_function
 {
   builtin_mapper_function (ch_Mapper ch = 0, d_d_Mapper dd = 0,
 			   d_c_Mapper dc = 0, c_c_Mapper cc = 0,
-			   double l = 0.0, double u = 0.0, int cfr = 0,
+			   double l = 0.0, double u = 0.0, int f = 0,
 			   const string n = string (),
 			   const string& h = string ())
     : ch_mapper (ch), d_d_mapper (dd), d_c_mapper (dc), c_c_mapper (cc),
-      lower_limit (l), upper_limit (u), can_return_complex_for_real_arg (cfr),
+      lower_limit (l), upper_limit (u), flag (f),
       name (n), help_string (h) { }
 
   builtin_mapper_function (const builtin_mapper_function& mf)
     : ch_mapper (mf.ch_mapper), d_d_mapper (mf.d_d_mapper),
       d_c_mapper (mf.d_c_mapper), c_c_mapper (mf.c_c_mapper),
       lower_limit (mf.lower_limit), upper_limit (mf.upper_limit),
-      can_return_complex_for_real_arg (mf.can_return_complex_for_real_arg),
-      name (mf.name), help_string (mf.help_string) { }
+      flag (mf.flag), name (mf.name), help_string (mf.help_string) { }
 
   builtin_mapper_function& operator = (const builtin_mapper_function& mf)
     {
       if (&mf != this)
 	{
 	  ch_mapper = mf.ch_mapper;
 	  d_d_mapper = mf.d_d_mapper;
 	  d_c_mapper = mf.d_c_mapper;
 	  c_c_mapper = mf.c_c_mapper;
 	  lower_limit = mf.lower_limit;
 	  upper_limit = mf.upper_limit;
-	  can_return_complex_for_real_arg = mf.can_return_complex_for_real_arg;
+	  flag = mf.flag;
 	  name = mf.name;
 	  help_string = mf.help_string;
 	}
       return *this;
     }
 
   ~builtin_mapper_function (void) { }
 
   ch_Mapper ch_mapper;
   d_d_Mapper d_d_mapper;
   d_c_Mapper d_c_mapper;
   c_c_Mapper c_c_mapper;
   double lower_limit;
   double upper_limit;
-  int can_return_complex_for_real_arg;
+
+  // For ch_mapper:
+  //
+  //   0  =>  this function returns a matrix of ones and zeros
+  //   1  =>  this function returns a numeric matrix (any values)
+  //   2  =>  this function returns a string array
+  //
+  // For other mappers, nonzero means that this function can return a
+  // complex value for some real arguments.
+  int flag;
+
   string name;
   string help_string;
 };
 
 extern void install_mapper_functions (void);
 
 #endif
 
diff --git a/src/pt-const.cc b/src/pt-const.cc
--- a/src/pt-const.cc
+++ b/src/pt-const.cc
@@ -2944,17 +2944,26 @@ OCT_VAL_REP::do_index (const octave_valu
 	      retval = ComplexMatrix (complex_matrix->value ());
 	      break;
 
 	    case char_matrix_constant:
 	      retval = charMatrix (char_matrix->value ());
 	      break;
 
 	    case char_matrix_constant_str:
-	      retval = octave_value (charMatrix (char_matrix->value ()), 1);
+	      {
+		// Kluge to prevent s([]) from turning into a string
+		// with no rows...
+		charMatrix tmp (char_matrix->value ());
+
+		if (tmp.rows () == 0 && tmp.columns () == 0)
+		  tmp.resize (1, 0);
+
+		retval = octave_value (tmp, 1);
+	      }
 	      break;
 
 	    default:
 	      error ("can't index %s variables", type_as_string ());
 	      break;
 	    }
 
 	  // We may have converted this value from a scalar to a
