# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1235109625 18000
#      Fri Feb 20 01:00:25 2009 -0500
# Node ID 96d87674b818f72f34da798ca3e19ef569a9aadb
# Parent  8dee145c777d0e8009837e1ecec6560b0ce19cca
also stash directory name for subfunctions

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2009-02-20  John W. Eaton  <jwe@octave.org>
+
+	* symbtab.cc (symbol_table::stash_dir_name_for_subfunctions):
+	New function.
+	* symtab.h: Provide decl.
+	* parse.y (load_fcn_from_file): Call it after parsing a function.
+
 2009-02-19  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-cell.h (octave_cell::cellstr_cache): New field.
 	(octave_cell::clear_cellstr_cache, octave_cell::make_cellstr_cache,
 	octave_cell::assign, octave_cell::delete_elements,
 	octave_cell::mex_get_data): New methods.
 	(octave_cell::is_cellstr): Reuse cellstr cache if possible, create if
 	successful.
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -3372,17 +3372,26 @@ load_fcn_from_file (const std::string& f
 
       curr_fcn_file_name = nm;
       curr_fcn_file_full_name = file;
 
       retval = parse_fcn_file (file, dispatch_type, autoloading);
     }
 
   if (retval)
-    retval->stash_dir_name (dir_name);
+    {
+      retval->stash_dir_name (dir_name);
+
+      if (retval->is_user_function ())
+	{
+	  symbol_table::scope_id id = retval->scope ();
+
+	  symbol_table::stash_dir_name_for_subfunctions (id, dir_name);
+	}
+    }
 
   unwind_protect::run_frame ("load_fcn_from_file");
 
   return retval;
 }
 
 DEFUN (autoload, args, ,
   "-*- texinfo -*-\n\
diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -31,16 +31,17 @@ along with Octave; see the file COPYING.
 #include "file-stat.h"
 
 #include "defun.h"
 #include "dirfns.h"
 #include "input.h"
 #include "load-path.h"
 #include "symtab.h"
 #include "ov-fcn.h"
+#include "ov-usr-fcn.h"
 #include "pager.h"
 #include "parse.h"
 #include "pt-arg-list.h"
 #include "toplev.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "debug.h"
 
@@ -1073,16 +1074,44 @@ symbol_table::dump_functions (std::ostre
       for (fcn_table_const_iterator p = fcn_table.begin ();
 	   p != fcn_table.end (); p++)
 	p->second.dump (os, "  ");
 
       os << "\n";
     }
 }
 
+void
+symbol_table::stash_dir_name_for_subfunctions (scope_id scope,
+					       const std::string& dir_name)
+{
+  // FIXME -- is this the best way to do this?  Maybe it would be
+  // better if we had a map from scope to list of subfunctions
+  // stored with the function.  Do we?
+
+  for (fcn_table_const_iterator p = fcn_table.begin ();
+       p != fcn_table.end (); p++)
+    {
+      std::pair<std::string, octave_value> tmp
+	= p->second.subfunction_defined_in_scope (scope);
+
+      std::string nm = tmp.first;
+
+      if (! nm.empty ())
+	{
+	  octave_value& fcn = tmp.second;
+
+	  octave_user_function *f = fcn.user_function_value ();
+
+	  if (f)
+	    f->stash_dir_name (dir_name);
+	}
+    }
+}
+
 octave_value
 symbol_table::do_find (const std::string& name, tree_argument_list *args,
 		       const string_vector& arg_names,
 		       octave_value_list& evaluated_args,
 		       bool& args_evaluated, bool skip_variables)
 {
   octave_value retval;
 
diff --git a/src/symtab.h b/src/symtab.h
--- a/src/symtab.h
+++ b/src/symtab.h
@@ -1783,16 +1783,19 @@ public:
   static void free_scope (scope_id scope)
   {
     if (scope == xglobal_scope || scope == xtop_scope)
       error ("can't free global or top-level scopes!");
     else
       symbol_table::scope_id_cache::free (scope);
   }
 
+  static void stash_dir_name_for_subfunctions (scope_id scope,
+					       const std::string& dir_name);
+
 private:
 
   typedef std::map<std::string, symbol_record>::const_iterator table_const_iterator;
   typedef std::map<std::string, symbol_record>::iterator table_iterator;
 
   typedef std::map<std::string, octave_value>::const_iterator global_table_const_iterator;
   typedef std::map<std::string, octave_value>::iterator global_table_iterator;
 
