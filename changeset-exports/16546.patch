# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1366378582 14400
#      Fri Apr 19 09:36:22 2013 -0400
# Node ID c1e90c7cfd3082f9c27f037197a53e02a1a6c254
# Parent  cfa98328acc991ebbe77f73d006482ed96c60398
try harder to find editor tab widgets for files with multiple names

* file-editor.h, file-editor.cc (file_editor::editor_tab_map_iterator,
file_editor::editor_tab_map_const_iterator): New typedefs.
(file_editor::find_tab_widget): New function.
(file_editor::request_open_file, file_editor::check_conflict_save,
file_editor::handle_delete_debugger_pointer_request): Use it.

diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -34,16 +34,17 @@ along with Octave; see the file COPYING.
 #include <QFont>
 #include <QFileDialog>
 #include <QMessageBox>
 #include <QStyle>
 #include <QTextStream>
 #include <QProcess>
 
 #include "octave-link.h"
+#include "utils.h"
 
 file_editor::file_editor (QWidget *p)
   : file_editor_interface (p)
 {
   // Set current editing directory before construct because loaded
   // files will change ced accordingly.
   ced = QDir::currentPath ();
 
@@ -57,17 +58,17 @@ file_editor::~file_editor ()
   QSettings *settings = resource_manager::get_settings ();
   editor_tab_map.clear ();
   if (settings->value ("editor/restoreSession",true).toBool ())
     {
       // Have all file editor tabs signal what their file names are.
       emit fetab_file_name_query (0);
     }
   QStringList fetFileNames;
-  for (std::map<QString, QWidget *>::const_iterator p = editor_tab_map.begin ();
+  for (editor_tab_map_const_iterator p = editor_tab_map.begin ();
        p != editor_tab_map.end (); p++)
     fetFileNames.append (p->first);
 
   settings->setValue ("editor/savedSessionTabs", fetFileNames);
   settings->sync ();
 
   if (_mru_file_menu)
     delete _mru_file_menu;
@@ -162,16 +163,37 @@ file_editor::request_open_file ()
   fileDialog->setDirectory (ced);
   connect (fileDialog, SIGNAL (fileSelected (const QString&)),
            this, SLOT (request_open_file (const QString&)));
   fileDialog->setWindowModality (Qt::NonModal);
   fileDialog->setAttribute (Qt::WA_DeleteOnClose);
   fileDialog->show ();
 }
 
+// Check whether this file is already open in the editor.
+QWidget *
+file_editor::find_tab_widget (const QString& file) const
+{
+  QWidget *retval = 0;
+
+  for (editor_tab_map_const_iterator p = editor_tab_map.begin ();
+       p != editor_tab_map.end (); p++)
+    {
+      QString tab_file = p->first;
+
+      if (same_file (file.toStdString (), tab_file.toStdString ()))
+        {
+          retval = p->second;
+          break;
+        }
+    }
+
+  return retval;
+}    
+
 void
 file_editor::request_open_file (const QString& openFileName, int line,
                                 bool debug_pointer,
                                 bool breakpoint_marker, bool insert)
 {
   // Check if the user wants to use a custom file editor.
   QSettings *settings = resource_manager::get_settings ();
   if (settings->value ("useCustomFileEditor").toBool ())
@@ -192,33 +214,34 @@ file_editor::request_open_file (const QS
     }
   else
     {
       // Have all file editor tabs signal what their file names are.
       editor_tab_map.clear ();
       emit fetab_file_name_query (0);
 
       // Check whether this file is already open in the editor.
-      std::map<QString, QWidget *>::const_iterator p = editor_tab_map.find (openFileName);
-      if (p != editor_tab_map.end ())
+      QWidget *tab = find_tab_widget (openFileName);
+
+      if (tab)
         {
-          _tab_widget->setCurrentWidget (p->second);
+          _tab_widget->setCurrentWidget (tab);
 
           if (line > 0)
             {
-              emit fetab_goto_line (p->second, line);
+              emit fetab_goto_line (tab, line);
 
               if (debug_pointer)
-                emit fetab_insert_debugger_pointer (p->second, line-1);
+                emit fetab_insert_debugger_pointer (tab, line-1);
 
               if (breakpoint_marker)
-                emit fetab_do_breakpoint_marker (insert, p->second, line-1);
+                emit fetab_do_breakpoint_marker (insert, tab, line-1);
             }
 
-          emit fetab_set_focus (p->second);
+          emit fetab_set_focus (tab);
         }
       else
         {
           file_editor_tab *fileEditorTab = new file_editor_tab ();
           if (fileEditorTab)
             {
               QString result = fileEditorTab->load_file(openFileName);
               if (result == "")
@@ -276,18 +299,20 @@ file_editor::request_mru_open_file ()
 
 void
 file_editor::check_conflict_save (const QString& saveFileName, bool remove_on_success)
 {
   // Have all file editor tabs signal what their file names are.
   editor_tab_map.clear ();
   emit fetab_file_name_query (0);
 
-  std::map<QString, QWidget *>::const_iterator p = editor_tab_map.find (saveFileName);
-  if (p != editor_tab_map.end ())
+  // Check whether this file is already open in the editor.
+  QWidget *tab = find_tab_widget (saveFileName);
+
+  if (tab)
     {
       // Note: to overwrite the contents of some other file editor tab
       // with the same name requires identifying which file editor tab
       // that is (not too difficult) then close that tab.  Of course,
       // that could trigger another dialog box if the file editor tab
       // with the same name has modifications in it.  This could become
       // somewhat confusing to the user.  For now, opt to do nothing.
 
@@ -343,25 +368,26 @@ file_editor::handle_delete_debugger_poin
 {
   if (! file.isEmpty ())
     {
       // Have all file editor tabs signal what their file names are.
       editor_tab_map.clear ();
       emit fetab_file_name_query (0);
 
       // Check whether this file is already open in the editor.
-      std::map<QString, QWidget *>::const_iterator p = editor_tab_map.find (file);
-      if (p != editor_tab_map.end ())
+      QWidget *tab = find_tab_widget (file);
+
+      if (tab)
         {
-          _tab_widget->setCurrentWidget (p->second);
+          _tab_widget->setCurrentWidget (tab);
 
           if (line > 0)
-            emit fetab_delete_debugger_pointer (p->second, line-1);
+            emit fetab_delete_debugger_pointer (tab, line-1);
 
-          emit fetab_set_focus (p->second);
+          emit fetab_set_focus (tab);
         }
     }
 }
 
 void
 file_editor::handle_update_breakpoint_marker_request (bool insert,
                                                   const QString& file, int line)
 {
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -44,16 +44,19 @@ enum editor_markers
   };
 
 class file_editor : public file_editor_interface
 {
   Q_OBJECT
 
 public:
 
+  typedef std::map<QString, QWidget *>::iterator editor_tab_map_iterator;
+  typedef std::map<QString, QWidget *>::const_iterator editor_tab_map_const_iterator;
+
   file_editor (QWidget *p);
   ~file_editor ();
 
   void connect_visibility_changed (void);
 
   void loadFile (const QString& fileName);
 
   QMenu *           get_mru_menu ( ) { return _mru_file_menu; }
@@ -156,16 +159,18 @@ private slots:
                           bool breakpoint_marker = false, bool insert = true);
 
 private:
   void construct ();
   void add_file_editor_tab(file_editor_tab *f, const QString &fn);
   void save_file_as (QWidget *fetabID = 0);
   void mru_menu_update ();
 
+  QWidget *find_tab_widget (const QString& openFileName) const;
+
   std::map<QString, QWidget *> editor_tab_map;
 
   QString ced;
 
   QMenuBar *        _menu_bar;
   QToolBar *        _tool_bar;
   QMenu *           _debug_menu;
   QAction *         _copy_action;
