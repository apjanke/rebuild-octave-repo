# HG changeset patch
# User jwe
# Date 1114786606 0
#      Fri Apr 29 14:56:46 2005 +0000
# Node ID d2d11284528e10debaded1f337bcf961cb84edd7
# Parent  e5a68648db9ce229b9c77ae4ebcdda605d7cd53a
[project @ 2005-04-29 14:56:45 by jwe]

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,12 +1,12 @@
 2005-04-29  David Bateman  <dbateman@free.fr>
 
-	* interpreter/sparse.txi: Add matrix_type, spkron, and document changes
-	in solve code
+	* interpreter/sparse.txi: Add matrix_type, spkron, and document
+	changes in solve code.
 
 2005-03-14  David Bateman  <dbateman@free.fr>
 
 	* interpreter/sparse.txi: Add luinc function.
 
 2005-03-09  John W. Eaton  <jwe@octave.org>
 
 	* Makefile.in (bin-dist): Delete target.
diff --git a/doc/interpreter/sparse.txi b/doc/interpreter/sparse.txi
--- a/doc/interpreter/sparse.txi
+++ b/doc/interpreter/sparse.txi
@@ -68,17 +68,17 @@ within the matrix is implied by its posi
 However, this is not the case for sparse matrices, and so the positions
 of the non-zero elements of the matrix must equally be stored. 
 
 An obvious way to do this is by storing the elements of the matrix as
 triplets, with two elements being the of the position in the array 
 (rows and column) and the third being the data itself. This is conceptually
 easy to grasp, but requires more storage than is strictly needed.
 
-The storage technique used within @sc{Octave} is compressed column
+The storage technique used within Octave is compressed column
 format.  In this format the position of each element in a row and the
 data are stored as previously. However, if we assume that all elements
 in the same column are stored adjacent in the computers memory, then
 we only need to store information on the number of non-zero elements
 in each column, rather than their positions. Thus assuming that the
 matrix has more non-zero elements than there are columns in the
 matrix, we win in terms of the amount of memory used.
 
@@ -131,20 +131,20 @@ contents of these three vectors for the 
 Note that this is the representation of these elements with the first row
 and column assumed to start as zero. Thus the number of elements in the 
 @var{i}-th column is given by @code{@var{cidx} (@var{i} + 1) - 
 @var{cidx} (@var{i})}.
 
 It should be noted that compressed row formats are equally possible. However,
 in the context of mixed operations between mixed sparse and dense matrices,
 it makes sense that the elements of the sparse matrices are in the same
-order as the dense matrices. @sc{Octave} stores dense matrices in column
+order as the dense matrices. Octave stores dense matrices in column
 major ordering, and so sparse matrices are equally stored in this manner.
 
-A further constraint on the sparse matrix storage used by @sc{Octave} is that 
+A further constraint on the sparse matrix storage used by Octave is that 
 all elements in the rows are stored in increasing order of their row
 index. This makes certain operations, later be faster. However, it imposes
 the need to sort the elements on the creation of sparse matrices. Having
 dis-ordered elements is potentially an advantage in that it makes operations
 such as concatenating two sparse matrices together easier and faster, however
 it adds complexity and speed problems elsewhere.
 
 @node Creation, Operators and Functions, Storage, Basics
@@ -217,17 +217,17 @@ vector of the same size containing the d
     ci = [ci; j*ones(length(idx),1)]; 
     d = [d; dtmp(idx)];
  endfor
  s = sparse (ri, ci, d, r, c);
 @end example
 
 creates an @var{r}-by-@var{c} sparse matrix with a random distribution of
 2 elements per row. The elements of the vectors do not need to be sorted in
-any particular order as @sc{Octave} will store them prior to storing the
+any particular order as Octave will store them prior to storing the
 data. However, per sorting the data will make teh creation of the sparse
 matrix faster.
 
 The function @dfn{spconvert} takes a three or four column real matrix.
 The first two columns represent the row and column index respectively and
 the third and four columns, the real and imaginary parts of the sparse
 matrix. The matrix can contain zero elements and the elements can be 
 sorted in any order. Adding zero elements is a convenient way to define
@@ -248,17 +248,17 @@ k = 5;
 nz = r * k;
 s = spalloc (r, c, nz)
 for j = 1:c
   idx = randperm (r);
   s (:, j) = [zeros(r - k, 1); rand(k, 1)] (idx);
 endfor
 @end example
 
-It should be noted, that due to the way that the @sc{Octave}
+It should be noted, that due to the way that the Octave
 assignment functions are written that the assignment will reallocate
 the memory used by the sparse matrix at each iteration. Therefore the
 @dfn{spalloc} function ignores the @var{nz} argument and does not
 preassign the memory for the matrix. Therefore, it is vitally
 important that code using to above structure should be as vectorized
 as possible to minimize the number of assignments and reduce the
 number of memory allocations.
 
@@ -314,17 +314,17 @@ As all of the mixed operators and functi
 matrices exist, in general this does not cause any problems. However,
 one area where it does cause a problem is where a sparse matrix is
 promoted to a full matrix, where subsequent operations would resparsify
 the matrix. Such cases as rare, but can be artificially created, for
 example @code{(fliplr(speye(3)) + speye(3)) - speye(3)} gives a full
 matrix when it should give a sparse one. In general, where such cases 
 occur, they impose only a small memory penalty.
 
-There is however one known case where this behaviour of @sc{Octave}'s
+There is however one known case where this behaviour of Octave's
 sparse matrices will cause a problem. That is in the handling of the
 @dfn{diag} function. Whether @dfn{diag} returns a sparse or full matrix
 depending on the type of its input arguments. So 
 
 @example
  a = diag (sparse([1,2,3]), -1);
 @end example
 
@@ -408,17 +408,17 @@ WRITE ME
 
 Someone who knows more about this than me should write this...
 
 WRITE ME
 
 @node Sparse Linear Algebra, Iterative Techniques, Graph Theory, Sparse Matrices
 @section Linear Algebra on Sparse Matrices
 
-@sc{Octave} includes a poly-morphic solver for sparse matrices, where 
+Octave includes a poly-morphic solver for sparse matrices, where 
 the exact solver used to factorize the matrix, depends on the properties
 of the sparse matrix, itself. The cost of determining the matrix type
 is small relative to the cost of factorizing the matrix itself, but in any
 case the matrix type is cached once it is calculated, so that it is not
 re-determined each time it is used in a linear equation.
 
 The selection tree for how the linear equation is solve is
 
@@ -502,17 +502,17 @@ use dwith care.
 @node Iterative Techniques, Oct-Files, Sparse Linear Algebra, Sparse Matrices
 @section Iterative Techniques applied to sparse matrices
 
 WRITE ME
 
 @node Oct-Files, License, Iterative Techniques, Sparse Matrices
 @section Using Sparse Matrices in Oct-files
 
-An oct-file is a means of writing an @sc{Octave} function in a compilable
+An oct-file is a means of writing an Octave function in a compilable
 language like C++, rather than as a script file. This results in a
 significant acceleration in the code.  It is not the purpose of this
 section to discuss how to write an oct-file, or discuss what they
 are. There are already two @footnote{Paul Thomas "Dal Segno al Coda 
 - The octave dynamically linked function cookbook", 
 @url{http://perso.wanadoo.fr/prthomas/intro.html}, and Cristophe Spiel 
 "Del Coda Al Fine - Pushing Octave's Limits", 
 @url{http://octave.sourceforge.net/coda/coda.pdf}} very good
@@ -530,28 +530,28 @@ A double precision sparse matrix class
 @item SparseComplexMatrix
 A Complex sparse matrix class
 @item SparseBoolMatrix
 A boolen sparse matrix class
 @end table
 
 All of these classes inherit from the @code{Sparse<T>} template class,
 and so all have similar capabilities and usage. The @code{Sparse<T>}
-class was based on @sc{Octave} @code{Array<T>} class, and so users familar
-with @sc{Octave}'s Array classes will be comfortable with the use of
+class was based on Octave @code{Array<T>} class, and so users familar
+with Octave's Array classes will be comfortable with the use of
 the sparse classes.
 
 The sparse classes will not be entirely described in this section, due
 to their similar with the existing Array classes. However, there are a
 few differences due the different nature of sparse objects, and these
 will be described. Firstly, although it is fundamentally possible to
-have N-dimensional sparse objects, the @sc{Octave} sparse classes do
+have N-dimensional sparse objects, the Octave sparse classes do
 not allow them at this time. So all operations of the sparse classes
 must be 2-dimensional.  This means that in fact @code{SparseMatrix} is
-similar to @sc{Octave}'s @code{Matrix} class rather than its
+similar to Octave's @code{Matrix} class rather than its
 @code{NDArray} class.
 
 @menu
 * OctDifferences:: The Differences between the Array and Sparse Classes
 * OctCreation:: Creating Spare Matrices in Oct-Files
 * OctUse:: Using Sparse Matrices in Oct-Files
 @end menu
 
@@ -576,17 +576,17 @@ An example is @code{speye(1e6)} which wi
 rows and columns, but only a million non-zero elements. Therefore the
 number of rows by the number of columns in this case is more than two
 hundred times the maximum value that can be represented by an unsigned int.
 The use of @code{numel} should therefore be avoided useless it is known
 it won't overflow.
 
 Extreme care must be take with the elem method and the "()" operator,
 which perform basically the same function. The reason is that if a
-sparse object is non-const, then @sc{Octave} will assume that a
+sparse object is non-const, then Octave will assume that a
 request for a zero element in a sparse matrix is in fact a request 
 to create this element so it can be filled. Therefore a piece of
 code like
 
 @example
   SparseMatrix sm;
   @dots{}
   for (int j = 0; j < nc; j++)
@@ -614,17 +614,17 @@ is not a costly operation. For example, 
       std::cerr << " (" << i << "," << j << "): " << tmp(i,j) 
                 << std::endl;
 @end example
 
 Finally, as the sparse types aren't just represented as a contiguous
 block of memory, the @code{fortran_vec} method of the @code{Array<T>}
 is not available. It is however replaced by three seperate methods
 @code{ridx}, @code{cidx} and @code{data}, that access the raw compressed
-column format that the @sc{Octave} sparse matrices are stored in.
+column format that the Octave sparse matrices are stored in.
 Additionally, these methods can be used in a manner similar to @code{elem},
 to allow the matrix to be accessed or filled. However, in that case it is
 up to the user to repect the sparse matrix compressed column format
 discussed previous.
 
 @node OctCreation, OctUse, OctDifferences, Oct-Files
 @subsection Creating Spare Matrices in Oct-Files
 
@@ -810,17 +810,17 @@ a sparse matrix is expensive, as it invo
 parts of the matrix, though not its entirety, exist as the old and new copy
 at the same time, additional memory is needed. Therefore if possible this
 should be avoided.
 
 @node OctUse, , OctCreation, Oct-Files
 @subsection Using Sparse Matrices in Oct-Files
 
 Most of the same operators and functions on sparse matrices that are
-available from the @sc{Octave} are equally available with oct-files.
+available from the Octave are equally available with oct-files.
 The basic means of extracting a sparse matrix from an @code{octave_value}
 and returning them as an @code{octave_value}, can be seen in the
 following example
 
 @example
    octave_value_list retval;
 
    SparseMatrix sm = args(0).sparse_matrix_value ();
@@ -835,17 +835,17 @@ following example
 @end example
 
 The conversion to an octave-value is handled by the sparse
 @code{octave_value} constructors, and so no special care is needed.
 
 @node License, Function Reference, Oct-Files, Sparse Matrices
 @section Licensing of Third Party Software
 
-There are several third party software packages used by the @sc{Octave}
+There are several third party software packages used by the Octave
 sparse matrix.
 
 @table @asis
 @item COLAMD
 is used for the @dfn{colamd} and @dfn{symamd} functions.
 
 @table @asis
 @item Authors
diff --git a/src/DLD-FUNCTIONS/matrix_type.cc b/src/DLD-FUNCTIONS/matrix_type.cc
--- a/src/DLD-FUNCTIONS/matrix_type.cc
+++ b/src/DLD-FUNCTIONS/matrix_type.cc
@@ -82,17 +82,17 @@ with specialized code. In addition the m
 \n\
 @item 'singular'\n\
 The matrix is assumed to be singular and will be treated with a minimum norm solution\n\
 \n\
 @end table\n\
 \n\
 Note that the matrix type will be discovered automatically on the first attempt to\n\
 solve a linear equation involving @var{a}. Therefore @code{matrix_type} is only\n\
-useful to give @sc{Octave} hints of the matrix type. Incorrectly defining the\n\
+useful to give Octave hints of the matrix type. Incorrectly defining the\n\
 matrix type will result in incorrect results from solutions of linear equations,\n\
 and so it is entirely the responsibility of the user to correctly indentify the\n\
 matrix type.\n\
 @end deftypefn")
 {
   int nargin = args.length ();
   octave_value retval;
 
diff --git a/src/DLD-FUNCTIONS/sparse.cc b/src/DLD-FUNCTIONS/sparse.cc
--- a/src/DLD-FUNCTIONS/sparse.cc
+++ b/src/DLD-FUNCTIONS/sparse.cc
@@ -470,18 +470,18 @@ returns number of non zero elements in S
      gripe_wrong_type_arg ("nnz", args(0));
 
   return retval;
 }
 
 DEFUN_DLD (nzmax, args, ,
    "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{scalar} =} nzmax (@var{SM})\n\
-Returns the amount of storage allocated to the sparse matrix @var{SM}.\n\
-Note that @sc{Octave} tends to crop unused memory at the first oppurtunity\n\
+Return the amount of storage allocated to the sparse matrix @var{SM}.\n\
+Note that Octave tends to crop unused memory at the first oppurtunity\n\
 for sparse objects. There are some cases of user created sparse objects\n\
 where the value returned by @dfn{nzmaz} will not be the same as @dfn{nnz},\n\
 but in general they will give the same result.\n\
 @seealso{sparse, spalloc}\n\
 @end deftypefn")
 {
   octave_value retval;
 
