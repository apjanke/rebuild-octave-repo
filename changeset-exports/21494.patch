# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1458358155 25200
#      Fri Mar 18 20:29:15 2016 -0700
# Node ID 8e9833b8791d7628192174659a076f6bcddfa716
# Parent  a41e48ef2b99abf14b642c70fdf5b2db7d6f518d
textscan: Prefer using std::string to char *

* textscan.cc, textscan.h: Use std::string instead of char * arguments.
Use std::string::find instead of strchr.

diff --git a/libinterp/corefcn/textscan.cc b/libinterp/corefcn/textscan.cc
--- a/libinterp/corefcn/textscan.cc
+++ b/libinterp/corefcn/textscan.cc
@@ -324,17 +324,17 @@ delimited_stream::refresh_buf (void)
         retval = std::istream::traits_type::eof ();
     }
   else
     {
       delimited = true;
 
       for (last = eob - longest; last - buf >= 0; last--)
         {
-          if (strchr (delims.c_str (), *last))
+          if (delims.find (*last) != std::string::npos)
             break;
         }
 
       if (last - buf < 0)
         delimited = false;
 
       retval = 0;
     }
@@ -448,51 +448,49 @@ textscan_format_elt
 public:
 
   enum special_conversion
   {
     whitespace_conversion = 1,
     literal_conversion = 2
   };
 
-  textscan_format_elt (const char *txt = 0, int w = 0, int p = -1,
+  textscan_format_elt (const std::string& txt, int w = 0, int p = -1,
                        int bw = 0, bool dis = false, char typ = '\0',
                        const std::string& ch_class = std::string ())
-    : text (strsave (txt)), width (w), prec (p), bitwidth (bw),
+    : text (txt), width (w), prec (p), bitwidth (bw),
       char_class (ch_class), type (typ), discard (dis),
       numeric (typ == 'd' || typ == 'u' || type == 'f' || type == 'n')
   { }
 
   textscan_format_elt (const textscan_format_elt& e)
-    : text (strsave (e.text)), width (e.width), prec (e.prec),
+    : text (e.text), width (e.width), prec (e.prec),
       bitwidth (e.bitwidth), char_class (e.char_class), type (e.type),
       discard (e.discard), numeric (e.numeric)
   { }
 
   textscan_format_elt& operator = (const textscan_format_elt& e)
   {
     if (this != &e)
       {
-        text = strsave (e.text);
+        text = e.text;
         width = e.width;
         prec = e.prec;
         bitwidth = e.bitwidth;
         discard = e.discard;
         type = e.type;
         numeric = e.numeric;
         char_class = e.char_class;
       }
 
     return *this;
   }
 
-  ~textscan_format_elt (void) { delete [] text; }
-
   // The C-style format string.
-  const char *text;
+  std::string text;
 
   // The maximum field width.
   unsigned int width;
 
   // The maximum number of digits to read after the decimal in a
   // floating point conversion.
   int prec;
 
@@ -725,18 +723,17 @@ textscan_format_list::add_elt_to_list (u
 {
   if (buf)
     {
       std::string text = buf->str ();
 
       if (! text.empty ())
         {
           textscan_format_elt *elt
-            = new textscan_format_elt (text.c_str (), width, prec, bitwidth,
-                                       discard, type, char_class);
+            = new textscan_format_elt (text, width, prec, bitwidth, discard, type, char_class);
 
           if (! discard)
             output_container.push_back (val_type);
 
           fmt_elts.push_back (elt);
         }
 
       delete buf;
@@ -1582,19 +1579,18 @@ textscan::read_double (delimited_stream&
       if (i == precision)
         while (width_left-- && is && (ch = is.get ()) >= '0' && ch <= '9')
           ;  // discard
 
       width_left++;
     }
 
   // look for exponent part in, e.g.,  6.023E+23
-  const char *ec = exp_chars.c_str ();
   bool used_exp = false;
-  if (valid && width_left > 1 && strchr (ec, ch))
+  if (valid && width_left > 1 && exp_chars.find (ch) != std::string::npos)
     {
       int ch1 = is.peek ();
       if (ch1 == '-' || ch1 == '+' || (ch1 >= '0' && ch1 <= '9'))
         {          // if 1.0e+$ or some such, this will set failbit, as we want
           width_left--;                         // count "E"
           int exp = 0;
           int exp_sign = 1;
           if (ch1 == '+')
@@ -1815,27 +1811,27 @@ textscan::scan_complex (delimited_stream
     val = empty_value.scalar_value ();
   else
     val = Complex (re, im);
 }
 
 // Return in VAL the run of characters from IS NOT contained in PATTERN.
 
 int
-textscan::scan_caret (delimited_stream& is, const char *pattern,
+textscan::scan_caret (delimited_stream& is, const std::string& pattern,
                       std::string& val) const
 {
   int c1 = std::istream::traits_type::eof ();
   std::ostringstream obuf;              // Is this optimised for growing?
 
   while (is && ((c1 = (is && ! is.eof ())
                  ? is.get_undelim ()
                  : std::istream::traits_type::eof ())
                 != std::istream::traits_type::eof ())
-         && ! strchr (pattern, c1))
+         && pattern.find (c1) == std::string::npos)
     obuf << static_cast<char> (c1);
 
   val = obuf.str ();
 
   if (c1 != std::istream::traits_type::eof ())
     is.putback (c1);
 
   return c1;
@@ -1922,23 +1918,23 @@ textscan::scan_string (delimited_stream&
         }
       val = textscan::read_until (is, delim_list, ends);
     }
 }
 
 // Return in VAL the run of characters from IS contained in PATTERN.
 
 int
-textscan::scan_bracket (delimited_stream& is, const char *pattern,
+textscan::scan_bracket (delimited_stream& is, const std::string& pattern,
                         std::string& val) const
 {
   int c1 = std::istream::traits_type::eof ();
   std::ostringstream obuf;              // Is this optimised for growing?
 
-  while (is && strchr (pattern, (c1 = is.get_undelim ())))
+  while (is && pattern.find (c1 = is.get_undelim ()) != std::string::npos)
     obuf << static_cast<char> (c1);
 
   val = obuf.str ();
   if (c1 != std::istream::traits_type::eof ())
     is.putback (c1);
   return c1;
 }
 
diff --git a/libinterp/corefcn/textscan.h b/libinterp/corefcn/textscan.h
--- a/libinterp/corefcn/textscan.h
+++ b/libinterp/corefcn/textscan.h
@@ -139,20 +139,21 @@ private:
 
   // Methods to process a particular conversion specifier.
   double read_double (delimited_stream& is,
                       const textscan_format_elt& fmt) const;
 
   void scan_complex (delimited_stream& is, const textscan_format_elt& fmt,
                      Complex& val) const;
 
-  int scan_bracket (delimited_stream& is, const char *pattern,
+  int scan_bracket (delimited_stream& is, const std::string& pattern,
                     std::string& val) const;
 
-  int scan_caret (delimited_stream& is, const char *, std::string& val) const;
+  int scan_caret (delimited_stream& is, const std::string& pattern,
+                  std::string& val) const;
 
   void scan_string (delimited_stream& is, const textscan_format_elt& fmt,
                     std::string& val) const;
 
   void scan_cstring (delimited_stream& is, const textscan_format_elt& fmt,
                      std::string& val) const;
 
   void scan_qstring (delimited_stream& is, const textscan_format_elt& fmt,
