# HG changeset patch
# User jwe
# Date 953758306 0
#      Wed Mar 22 20:51:46 2000 +0000
# Node ID 8cea69ad95ae1517995b4ee27d43a4a21b5a4b23
# Parent  b0d6c6e84d56e44eb435d0ac64e94a1ecc54a7c3
[project @ 2000-03-22 20:51:45 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,14 @@
+2000-03-22  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* image/saveimage.m: Add comment to file saying who created it and
+	when it was created.  Suggested by Stephen Eglen
+	<stephen@cogsci.ed.ac.uk>.
+
 2000-03-21  Paul Kienzle <pkienzle@kienzle.powernet.co.uk>
 
 	* polynomial/polyreduce.m: Simplify by looking for the first
 	non-zero element rather than the last of the first set of zero
 	elements.
 
 	* plot/__pltopt1__.m: Accept "--", "-.", and ":" line styles.
 
diff --git a/scripts/image/saveimage.m b/scripts/image/saveimage.m
--- a/scripts/image/saveimage.m
+++ b/scripts/image/saveimage.m
@@ -145,16 +145,26 @@ function saveimage (filename, img, img_f
 
   idx = find (img > map_nr);
   img (idx) = ones (size (idx)) * map_nr;
 
   idx = find (img <= 0);
   img (idx) = ones (size (idx));
 
   if (strcmp (img_form, "ppm"))
+
+    ## Would be nice to make this consistent with the line used by the
+    ## load/save functions, but we need a good way to get username and
+    ## hostname information.
+
+    time_string = ctime (time ());
+    time_string = time_string (1:length (time_string)-1);
+    tagline = sprintf ("# Created by Octave %s, %s",
+		       __OCTAVE_VERSION__, time_string);
+
     if (grey && map_nr == 2 && bw)
 
       if (map(1) != 0)
         map = [0; 1];
       else
         map = [1; 0];
       endif
 
@@ -176,25 +186,25 @@ function saveimage (filename, img, img_f
         else
           for j = 1:8
             tmp(:,i) = tmp(:,i) + img_row (j:8:l_img_row) * 2^(8-j);
           endfor
         endif
       endfor
 
       fid = fopen (filename, "w");
-      fprintf (fid, "P4\n%d %d\n", img_nr, img_nc);
+      fprintf (fid, "P4\n%s\n%d %d\n", tagline, img_nr, img_nc);
       fwrite (fid, tmp, "char");
       fprintf (fid, "\n");
       fclose (fid);
 
     elseif (grey)
 
       fid = fopen (filename, "w");
-      fprintf (fid, "P5\n%d %d\n255\n", img_nr, img_nc);
+      fprintf (fid, "P5\n%s\n%d %d\n255\n", tagline, img_nr, img_nc);
       fwrite (fid, map(img), "uchar");
       fprintf (fid, "\n");
       fclose (fid);
 
     else
 
       img_idx = ((1:3:3*img_sz)+2)';
       map_idx = ((2*map_nr+1):map_sz)';
@@ -206,17 +216,17 @@ function saveimage (filename, img, img_f
       tmap = map(map_idx);
       tmp(img_idx--) = tmap(img);
 
       map_idx = map_idx - map_nr;
       tmap = map(map_idx);
       tmp(img_idx--) = tmap(img);
 
       fid = fopen (filename, "w");
-      fprintf (fid, "P6\n%d %d\n255\n", img_nr, img_nc);
+      fprintf (fid, "P6\n%s\n%d %d\n255\n", tagline, img_nr, img_nc);
       fwrite (fid, tmp, "uchar");
       fprintf (fid, "\n");
       fclose (fid);
 
     endif
 
   elseif (strcmp (img_form, "ps") == 1)
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2000-03-22  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* oct-lvalue.h (dummy_val): New static variable.
+	(octave_lvalue::octave_lvalue): Use it to initialize val.
+
+	* variables.cc (is_valid_function): Look in the global symbol
+	table for functions.
+
 2000-03-21  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* src/Makefile.in (LIBRARIES): Conditionally define.
 	(libraries): Depend on $(LIBRARIES).
 	(octave): Depend on $(LIBRARIES), not libraries.  Also depend on
 	stamp-prereq and stamp-oct-links.
 	(all): Don't depend on stamp-prereq or stamp-oct-links.
 	(liboctinterp.$(LIBEXT), liboctinterp.$(SHELXT)): Delete target
diff --git a/src/oct-lvalue.h b/src/oct-lvalue.h
--- a/src/oct-lvalue.h
+++ b/src/oct-lvalue.h
@@ -26,22 +26,28 @@ Software Foundation, 59 Temple Place - S
 class octave_value;
 class octave_value_list;
 
 #include <string>
 
 #include "oct-obj.h"
 #include "symtab.h"
 
+// XXX FIXME XXX -- eliminate the following kluge?
+
+// This variable is used when creating dummy octave_lvalue objects.
+static octave_value dummy_val;
+
 class
 octave_lvalue
 {
 public:
 
-  octave_lvalue (octave_value *v = 0, symbol_record::change_function f = 0)
+  octave_lvalue (octave_value *v = &dummy_val,
+		 symbol_record::change_function f = 0)
     : val (v), idx (), chg_fcn (f), struct_elt_name (), index_set (false) { }
 
   octave_lvalue (octave_value *v, const std::string& nm,
 		 symbol_record::change_function f = 0)
     : val (v), idx (), chg_fcn (f), struct_elt_name (nm), index_set (false) { }
 
   octave_lvalue (const octave_lvalue& vr)
     : val (vr.val), idx (vr.idx), chg_fcn (vr.chg_fcn),
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -135,17 +135,21 @@ is_globally_visible (const std::string& 
 octave_function *
 is_valid_function (const std::string& fcn_name, const std::string& warn_for, bool warn)
 {
   octave_function *ans = 0;
 
   symbol_record *sr = 0;
 
   if (! fcn_name.empty ())
-    sr = lookup_by_name (fcn_name);
+    {
+      sr = global_sym_tab->lookup (fcn_name, true);
+
+      lookup (sr, false);
+    }
 
   if (sr)
     {
       octave_value tmp = sr->def ();
       ans = tmp.function_value (true);
     }
 
   if (! sr || ! ans || ! sr->is_function ())
