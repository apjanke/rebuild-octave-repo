# HG changeset patch
# User Rik <rik@octave.org>
# Date 1476640305 25200
#      Sun Oct 16 10:51:45 2016 -0700
# Branch stable
# Node ID 7b190a2f11cba5f1eb6f516747d1bff1779d21a7
# Parent  869c02fde46c3c22d408f3926ef2f71424862014
maint: Use 2-space indent in definition of BIST %!functions.

* randi.m, structfun.m, normest1.m, frame2im.m, im2frame.m, test.m:
Use 2-space indent in definition of BIST %!functions.

diff --git a/scripts/general/randi.m b/scripts/general/randi.m
--- a/scripts/general/randi.m
+++ b/scripts/general/randi.m
@@ -158,23 +158,23 @@ endfunction
 %! max_int8 = double (intmax ("int8"));
 %! min_int8 = double (intmin ("int8"));
 %! max_uint8 = double (intmax ("uint8"));
 %! min_uint8 = double (intmin ("uint8"));
 %! max_single = double (flintmax ("single"));
 
 ## Test that no warning thrown if IMAX is exactly on the limits of the range
 %!function test_no_warning (func, varargin)
-%! state = warning ("query");
-%! unwind_protect
-%!   warning ("error", "all");
-%!   func (varargin{:});
-%! unwind_protect_cleanup
-%!   warning (state);
-%! end_unwind_protect
+%!  state = warning ("query");
+%!  unwind_protect
+%!    warning ("error", "all");
+%!    func (varargin{:});
+%!  unwind_protect_cleanup
+%!    warning (state);
+%!  end_unwind_protect
 %!endfunction
 %!test test_no_warning (@randi, max_int8, "int8");
 %!test test_no_warning (@randi, max_uint8, "uint8");
 %!test test_no_warning (@randi, max_single, "single");
 %!test test_no_warning (@randi, [min_int8, max_int8], "int8");
 %!test test_no_warning (@randi, [min_uint8, max_uint8], "uint8");
 %!test test_no_warning (@randi, [-max_single, max_single], "single");
 
diff --git a/scripts/general/structfun.m b/scripts/general/structfun.m
--- a/scripts/general/structfun.m
+++ b/scripts/general/structfun.m
@@ -116,18 +116,18 @@ endfunction
 %! s.name2 = "Jill Jones";
 %! l.name1 = "Smith";
 %! l.name2 = "Jones";
 %! o = structfun (@(x) regexp (x, '(\w+)$', "matches"){1}, s,
 %!                "UniformOutput", false);
 %! assert (o, l);
 
 %!function [a, b] = __twoouts (x)
-%! a = x + x;
-%! b = x * x;
+%!  a = x + x;
+%!  b = x * x;
 %!endfunction
 
 %!test
 %! s = struct ("a", {1, 2, 3}, "b", {4, 5, 6});
 %! c(1:2, 1, 1) = [2; 8];
 %! c(1:2, 1, 2) = [4; 10];
 %! c(1:2, 1, 3) = [6; 12];
 %! d(1:2, 1, 1) = [1; 16];
diff --git a/scripts/linear-algebra/normest1.m b/scripts/linear-algebra/normest1.m
--- a/scripts/linear-algebra/normest1.m
+++ b/scripts/linear-algebra/normest1.m
@@ -243,38 +243,38 @@ function [est, v, w, k] = normest1 (A, t
       ind_hist(ind(1:tmax)) = 1;
     endif
   endwhile
   v = zeros (n, 1);
   v(ind_best) = 1;
 endfunction
 
 %!function z = afun_A (flag, x, A, n)
-%! switch flag
-%! case {"dim"}
-%!   z = n;
-%! case {"real"}
-%!   z = isreal (A);
-%! case {"transp"}
-%!   z = A' * x;
-%! case {"notransp"}
-%!   z = A * x;
-%! endswitch
+%!  switch flag
+%!  case {"dim"}
+%!    z = n;
+%!  case {"real"}
+%!    z = isreal (A);
+%!  case {"transp"}
+%!    z = A' * x;
+%!  case {"notransp"}
+%!    z = A * x;
+%!  endswitch
 %!endfunction
 %!function z = afun_A_P (flag, x, A, m)
-%! switch flag
-%! case "dim"
-%!   z = length (A);
-%! case "real"
-%!   z = isreal (A);
-%! case "transp"
-%!   z = x; for i = 1:m, z = A' * z;, endfor
-%! case "notransp"
-%!   z = x; for i = 1:m, z = A * z;, endfor
-%! endswitch
+%!  switch flag
+%!  case "dim"
+%!    z = length (A);
+%!  case "real"
+%!    z = isreal (A);
+%!  case "transp"
+%!    z = x; for i = 1:m, z = A' * z;, endfor
+%!  case "notransp"
+%!    z = x; for i = 1:m, z = A * z;, endfor
+%!  endswitch
 %!endfunction
 
 %!test
 %! A = reshape ((1:16)-8, 4, 4);
 %! assert (normest1 (A), norm (A, 1), eps)
 
 ## test t=1
 %!test
diff --git a/scripts/plot/util/frame2im.m b/scripts/plot/util/frame2im.m
--- a/scripts/plot/util/frame2im.m
+++ b/scripts/plot/util/frame2im.m
@@ -54,21 +54,21 @@ function [x, map] = frame2im (frame)
     x = reshape (x, rows (x), columns (x) / n, n, size (frame(1).cdata, 3));
     x = permute (x, [1 2 4 3]);
   endif
 
 endfunction
 
 
 %!function f = make_rgb_f ()
-%! f = randi ([0 255], 10, 20, 3);
+%!  f = randi ([0 255], 10, 20, 3);
 %!endfunction
 
 %!function f = make_ind_f ()
-%! f = randi ([1 100], 10, 20, 3);
+%!  f = randi ([1 100], 10, 20, 3);
 %!endfunction
 
 %!test
 %! x = make_ind_f ();
 %! cmap = jet (100);
 %! frame = struct ("cdata", x, "colormap", cmap);
 %! [rx, rcmap] = frame2im (frame);
 %! assert (rx, x);
diff --git a/scripts/plot/util/im2frame.m b/scripts/plot/util/im2frame.m
--- a/scripts/plot/util/im2frame.m
+++ b/scripts/plot/util/im2frame.m
@@ -64,21 +64,21 @@ function [frame] = im2frame (x, map = []
   endif
 
   frame = struct ("cdata", x, "colormap", map);
 
 endfunction
 
 
 %!function f = make_rgb_f ()
-%! f = randi ([0 255], 10, 20, 3);
+%!  f = randi ([0 255], 10, 20, 3);
 %!endfunction
 
 %!function f = make_ind_f ()
-%! f = randi ([1 100], 10, 20, 3);
+%!  f = randi ([1 100], 10, 20, 3);
 %!endfunction
 
 %!test
 %! rgb = make_rgb_f ();
 %! assert (im2frame (rgb), struct ("cdata", rgb, "colormap", []));
 
 %!test
 %! ind = make_ind_f ();
diff --git a/scripts/testfun/test.m b/scripts/testfun/test.m
--- a/scripts/testfun/test.m
+++ b/scripts/testfun/test.m
@@ -880,29 +880,29 @@ endfunction
 %!shared                  # clear all shared variables
 %!test assert (! exist ("a", "var")) # show that they are cleared
 %!shared a,b,c            # support for initializer shorthand
 %! a=1; b=2; c=4;
 %!shared                  # clear all shared variables for remainder of tests
 
 ## Test 'function' keyword
 %!function x = __test_a (y)
-%! x = 2*y;
+%!  x = 2*y;
 %!endfunction
 %!assert (__test_a (2), 4)  # Test a test function
 
 %!function __test_a (y)
-%! x = 2*y;
+%!  x = 2*y;
 %!endfunction
 %!test
 %! __test_a (2);            # Test a test function with no return value
 
 %!function [x,z] = __test_a (y)
-%! x = 2*y;
-%! z = 3*y;
+%!  x = 2*y;
+%!  z = 3*y;
 %!endfunction
 %!test
 %! [x,z] = __test_a (3);    # Test a test function with multiple returns
 %! assert (x,6);
 %! assert (z,9);
 
 ## Test 'assert' keyword
 %!assert (isempty ([]))     # support for test assert shorthand
