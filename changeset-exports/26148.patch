# HG changeset patch
# User Kai T. Ohlhus <k.ohlhus@gmail.com>
# Date 1543492455 -3600
#      Thu Nov 29 12:54:15 2018 +0100
# Node ID 8c72f0345ee8ea9a6cad81d8ed81bf17db193459
# Parent  216d857732eb8cee5778e2db64e46e3d1f8d7ef5
maint: Silence compiler warnings about unused or too many parameters.

* libinterp/dldfcn/audiodevinfo.cc: Use "warning_with_id", if an ID is given.
Those problems can now be detectec since cset 216d857732eb.

* liboctave/numeric/oct-fftw.cc (fftw_planner::threads,
float_fftw_planner::threads): Avoid compiler warning about unused parameter 'nt'
when compiling without FFTW thread support.

diff --git a/libinterp/dldfcn/audiodevinfo.cc b/libinterp/dldfcn/audiodevinfo.cc
--- a/libinterp/dldfcn/audiodevinfo.cc
+++ b/libinterp/dldfcn/audiodevinfo.cc
@@ -130,18 +130,18 @@ recording using those parameters.
 
   octave_idx_type numinput = 0, numoutput = 0;
   for (int i = 0; i < num_devices; i++)
     {
       const PaDeviceInfo *device_info = Pa_GetDeviceInfo (i);
 
       if (! device_info)
         {
-          warning ("Octave:invalid-audio-device",
-                   "invalid audio device ID = %d", i);
+          warning_with_id ("Octave:invalid-audio-device",
+                           "invalid audio device ID = %d", i);
           continue;
         }
 
       if (device_info->maxInputChannels != 0)
         numinput++;
 
       if (device_info->maxOutputChannels != 0)
         numoutput++;
@@ -156,18 +156,18 @@ recording using those parameters.
 
   octave_idx_type idx_i = 0, idx_o = 0;
   for (int i = 0; i < num_devices; i++)
     {
       const PaDeviceInfo *device_info = Pa_GetDeviceInfo (i);
 
       if (! device_info)
         {
-          warning ("Octave:invalid-audio-device",
-                   "invalid audio device ID = %d", i);
+          warning_with_id ("Octave:invalid-audio-device",
+                           "invalid audio device ID = %d", i);
           continue;
         }
 
       const PaHostApiInfo *api_info = Pa_GetHostApiInfo (device_info->hostApi);
 
       const char *driver = (api_info ? api_info->name : "");
 
       char name[128];
@@ -306,18 +306,18 @@ recording using those parameters.
             stream_parameters.sampleFormat = format;
           else
             error ("audiodevinfo: no such bits per sample format");
 
           const PaDeviceInfo *device_info = Pa_GetDeviceInfo (i);
 
           if (! device_info)
             {
-              warning ("Octave:invalid-audio-device",
-                       "invalid audio device ID = %d", i);
+              warning_with_id ("Octave:invalid-audio-device",
+                               "invalid audio device ID = %d", i);
               continue;
             }
 
           stream_parameters.suggestedLatency
             = device_info->defaultLowInputLatency;
 
           stream_parameters.hostApiSpecificStreamInfo = nullptr;
 
@@ -829,18 +829,18 @@ audioplayer::audioplayer (void)
     end_sample (-1), tag (""), y (), userdata (Matrix ()),
     left (), right (), stream (nullptr), output_parameters (), type ()
 { }
 
 audioplayer::~audioplayer (void)
 {
   if (isplaying ())
     {
-      warning ("Octave:audio-interrupt",
-               "interrupting playing audioplayer");
+      warning_with_id ("Octave:audio-interrupt",
+                       "interrupting playing audioplayer");
       stop ();
     }
 }
 
 void
 audioplayer::print (std::ostream& os, bool pr_as_read_syntax)
 {
   print_raw (os, pr_as_read_syntax);
@@ -869,18 +869,18 @@ audioplayer::init_fn (void)
 
   output_parameters.device = device;
   output_parameters.channelCount = 2;
   output_parameters.sampleFormat = bits_to_format (get_nbits ());
 
   const PaDeviceInfo *device_info = Pa_GetDeviceInfo (device);
 
   if (! device_info)
-    warning ("Octave:invalid-default-audio-device",
-             "invalid default audio device ID = %d", device);
+    warning_with_id ("Octave:invalid-default-audio-device",
+                     "invalid default audio device ID = %d", device);
 
   output_parameters.suggestedLatency
     = (device_info ? device_info->defaultHighOutputLatency : -1);
 
   output_parameters.hostApiSpecificStreamInfo = nullptr;
 }
 
 void
@@ -913,18 +913,18 @@ audioplayer::init (void)
   else if (type == TYPE_UINT8)
     output_parameters.sampleFormat = paUInt8;
   else if (type == TYPE_UINT16)
     output_parameters.sampleFormat = paInt16;
 
   const PaDeviceInfo *device_info = Pa_GetDeviceInfo (device);
 
   if (! device_info)
-    warning ("Octave:invalid-default-audio-device",
-             "invalid default audio device ID = %d", device);
+    warning_with_id ("Octave:invalid-default-audio-device",
+                     "invalid default audio device ID = %d", device);
 
   output_parameters.suggestedLatency
     = (device_info ? device_info->defaultHighOutputLatency : -1);
 
   output_parameters.hostApiSpecificStreamInfo = nullptr;
 }
 
 void
@@ -1465,18 +1465,18 @@ audiorecorder::audiorecorder (void)
     end_sample (-1), tag (""), y (), userdata (Matrix ()),
     left (), right (), stream (nullptr), input_parameters (), type ()
 { }
 
 audiorecorder::~audiorecorder (void)
 {
   if (isrecording ())
     {
-      warning ("Octave:audio-interrupt",
-               "interrupting recording audiorecorder");
+      warning_with_id ("Octave:audio-interrupt",
+                       "interrupting recording audiorecorder");
       stop ();
     }
 }
 
 void
 audiorecorder::print (std::ostream& os, bool pr_as_read_syntax)
 {
   print_raw (os, pr_as_read_syntax);
@@ -1505,18 +1505,18 @@ audiorecorder::init (void)
 
   input_parameters.device = device;
   input_parameters.channelCount = get_channels ();
   input_parameters.sampleFormat = bits_to_format (get_nbits ());
 
   const PaDeviceInfo *device_info = Pa_GetDeviceInfo (device);
 
   if (! device_info)
-    warning ("Octave:invalid-default-audio-device",
-             "invalid default audio device ID = %d", device);
+    warning_with_id ("Octave:invalid-default-audio-device",
+                     "invalid default audio device ID = %d", device);
 
   input_parameters.suggestedLatency
     = (device_info ? device_info->defaultHighInputLatency : -1);
 
   input_parameters.hostApiSpecificStreamInfo = nullptr;
 }
 
 void
diff --git a/liboctave/numeric/oct-fftw.cc b/liboctave/numeric/oct-fftw.cc
--- a/liboctave/numeric/oct-fftw.cc
+++ b/liboctave/numeric/oct-fftw.cc
@@ -131,16 +131,18 @@ namespace octave
     if (instance_ok () && nt != threads ())
       {
         instance->nthreads = nt;
         fftw_plan_with_nthreads (nt);
         // Clear the current plans.
         instance->rplan = instance->plan[0] = instance->plan[1] = nullptr;
       }
 #else
+    octave_unused_parameter (nt);
+
     (*current_liboctave_warning_handler)
       ("unable to change number of threads without FFTW thread support");
 #endif
   }
 
 #define CHECK_SIMD_ALIGNMENT(x)                         \
   (((reinterpret_cast<ptrdiff_t> (x)) & 0xF) == 0)
 
@@ -489,16 +491,18 @@ namespace octave
     if (instance_ok () && nt != threads ())
       {
         instance->nthreads = nt;
         fftwf_plan_with_nthreads (nt);
         // Clear the current plans.
         instance->rplan = instance->plan[0] = instance->plan[1] = nullptr;
       }
 #else
+    octave_unused_parameter (nt);
+
     (*current_liboctave_warning_handler)
       ("unable to change number of threads without FFTW thread support");
 #endif
   }
 
   void *
   float_fftw_planner::do_create_plan (int dir, const int rank,
                                       const dim_vector& dims,
