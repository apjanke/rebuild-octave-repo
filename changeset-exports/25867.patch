# HG changeset patch
# User Markus MÃ¼tzel <markus.muetzel@gmx.de>
# Date 1536431790 -7200
#      Sat Sep 08 20:36:30 2018 +0200
# Node ID 49ffa78f92431c18f35c450931b950b3a24d5a84
# Parent  cece80ddc264a6e7a3c80a974336c10391b9e151
Use "facenormals" for flat lighting on surfaces (bug #54024).

* graphics.in.h, graphics.cc (surface::properties::update_face_normals):
New function.

* gl-render.cc (draw_surface): Use face normals if lighting mode is "flat".

* genpropdoc.m (surface): Document "facenormals(mode)" and
"vertexnormals(mode)".

* light.m: Document usage of "facenormals" and "vertexnormals".

* NEWS: Announce changes.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -46,28 +46,37 @@ Summary of important user-visible change
         MaxIter      |      500       |     Inf
         TolX         |     1e-4       |     1e-8
 
  ** Figure graphic objects have a new property "Number" which is
     read-only and will return the handle (number) of the figure.
     However, if the property "IntegerHandle" has been set to "off" then
     the property will return an empty matrix ([]).
 
+ ** Patch and surface graphic objects now use the "FaceNormals" property for
+    flat lighting.
+
+ ** "FaceNormals" and "EdgeNormals" for patch and surface graphic objects are
+    now calculated automatically if necessary.
+
  ** Printing using the -dtiff output device will now create compressed
     images using lzw compression.  This change was made for Matlab
     compatibility.  To produce uncompressed images use the -dtiffn
     device.
 
  ** The FFTW library is now required to perform FFT calculations.  The
     FFTPACK sources have been removed from Octave.
 
  ** The OSMesa library is no longer used.  To print invisible figures
     when using OpenGL graphics, the Qt QOFFSCREENSURFACE feature must be
     available and you must use the qt graphics toolkit.
 
+ ** It is now possible to use files and folders containing Unicode characters
+    in Windows.
+
  ** New functions added in 5.0:
 
       isfile
       isfolder
       ordeig
 
  ** Legacy functions.
 
diff --git a/doc/interpreter/genpropdoc.m b/doc/interpreter/genpropdoc.m
--- a/doc/interpreter/genpropdoc.m
+++ b/doc/interpreter/genpropdoc.m
@@ -1231,16 +1231,27 @@ layered transparent faces.";
       case "facelighting"
         s.doc = "When set to a value other than @qcode{\"none\"}, the faces \
 of the object are drawn with light and shadow effects.  Supported values are \
 @qcode{\"none\"} (no lighting effects), @qcode{\"flat\"} (facetted look) and \
 @qcode{\"gouraud\"} (linear interpolation of the lighting effects between \
 the vertices). @qcode{\"phong\"} is deprecated and has the same effect as \
 @qcode{\"gouraud\"}.";
 
+      case "facenormals"
+        s.doc = "Face normals are used for lighting the edges or faces if the \
+@code{edgelighting} or @code{facelighting} properties are set to \
+@qcode{\"flat\"}.  __modemsg__";
+
+      case "facenormalsmode"
+        s.doc = "If this property is set to @qcode{\"auto\"}, \
+@code{facenormals} are automatically calculated if the @code{edgelighting} or \
+@code{facelighting} property are set to @qcode{\"flat\"} and at least one \
+@code{light} object is present and visible in the same axes.";
+
       case "interpreter"
       case "linestyle"
         s.doc = "@xref{Line Styles}.";
 
       case "linewidth"
         s.doc = "@xref{XREFlinelinewidth, , @w{line linewidth property}}.";
 
       case "marker"
@@ -1255,33 +1266,42 @@ the vertices). @qcode{\"phong\"} is depr
 @w{line markerfacecolor property}}.";
 
       case "markersize"
         s.doc = "@xref{XREFlinemarkersize, , \
 @w{line markersize property}}.";
         s.valid = "scalar";
 
       case "meshstyle"
-      case "normalmode"
       case "specularcolorreflectance"
         s.doc = "Reflectance for specular color. Value between 0.0 (color \
 of underlying face) and 1.0 (color of light source).";
         s.valid = "scalar";
 
       case "specularexponent"
         s.doc = "Exponent for the specular reflex. The lower the value, \
 the more the reflex is spread out.";
         s.valid = "scalar";
 
       case "specularstrength"
         s.doc = "Strength of the specular reflex. Value between 0.0 (no \
 specular reflex) and 1.0 (full specular reflex).";
         s.valid = "scalar";
 
       case "vertexnormals"
+        s.doc = "Vertex normals are used for lighting the edges or faces if \
+the @code{edgelighting} or @code{facelighting} properties are set to \
+@qcode{\"gouraud\"}.  __modemsg__";
+
+      case "vertexnormalsmode"
+        s.doc = "If this property is set to @qcode{\"auto\"}, \
+@code{vertexnormals} are automatically calculated if the @code{edgelighting} \
+or @code{facelighting} property are set to @qcode{\"gouraud\"} and at least \
+one @code{light} object is present and visible in the same axes.";
+
       case "xdata"
         s.valid = "matrix";
 
       case "xdatasource"
       case "ydata"
         s.valid = "matrix";
 
       case "ydatasource"
diff --git a/libinterp/corefcn/gl-render.cc b/libinterp/corefcn/gl-render.cc
--- a/libinterp/corefcn/gl-render.cc
+++ b/libinterp/corefcn/gl-render.cc
@@ -2386,17 +2386,18 @@ namespace octave
     const Matrix x = xform.xscale (props.get_xdata ().matrix_value ());
     const Matrix y = xform.yscale (props.get_ydata ().matrix_value ());
     const Matrix z = xform.zscale (props.get_zdata ().matrix_value ());
 
     int zr = z.rows ();
     int zc = z.columns ();
 
     NDArray c;
-    const NDArray n = props.get_vertexnormals ().array_value ();
+    const NDArray vn = props.get_vertexnormals ().array_value ();
+    const NDArray fn = props.get_facenormals ().array_value ();
 
     // FIXME: handle transparency
     Matrix a;
 
     int fc_mode = (props.facecolor_is_rgb () ? 0 :
                    (props.facecolor_is ("flat") ? 1 :
                     (props.facecolor_is ("interp") ? 2 :
                      (props.facecolor_is ("texturemap") ? 3 : -1))));
@@ -2560,17 +2561,18 @@ namespace octave
                             m_glfcns.glMaterialfv (LIGHT_MODE, GL_DIFFUSE, cb);
 
                             for (int k = 0; k < 3; k++)
                               cb[k] = ss * (scr + (1-scr) * c(j-1, i-1, k));
                             m_glfcns.glMaterialfv (LIGHT_MODE, GL_SPECULAR, cb);
                           }
                       }
                     if (fl_mode > 0)
-                      set_normal (bfl_mode, n, j-1, i-1);
+                      set_normal (bfl_mode, (fl_mode == GOURAUD ? vn : fn),
+                                  j-1, i-1);
 
                     m_glfcns.glVertex3d (x(j1,i-1), y(j-1,i1), z(j-1,i-1));
 
                     // Vertex 2
                     if (fc_mode == TEXTURE)
                       tex.tex_coord (double (i) / (zc-1), double (j-1) / (zr-1));
                     else if (fc_mode == INTERP)
                       {
@@ -2591,17 +2593,17 @@ namespace octave
 
                             for (int k = 0; k < 3; k++)
                               cb[k] = ss * (scr + (1-scr) * c(j-1, i, k));
                             m_glfcns.glMaterialfv (LIGHT_MODE, GL_SPECULAR, cb);
                           }
                       }
 
                     if (fl_mode == GOURAUD)
-                      set_normal (bfl_mode, n, j-1, i);
+                      set_normal (bfl_mode, vn, j-1, i);
 
                     m_glfcns.glVertex3d (x(j1,i), y(j-1,i2), z(j-1,i));
 
                     // Vertex 3
                     if (fc_mode == TEXTURE)
                       tex.tex_coord (double (i) / (zc-1), double (j) / (zr-1));
                     else if (fc_mode == INTERP)
                       {
@@ -2621,17 +2623,17 @@ namespace octave
                             m_glfcns.glMaterialfv (LIGHT_MODE, GL_DIFFUSE, cb);
 
                             for (int k = 0; k < 3; k++)
                               cb[k] = ss * (scr + (1-scr) * c(j, i, k));
                             m_glfcns.glMaterialfv (LIGHT_MODE, GL_SPECULAR, cb);
                           }
                       }
                     if (fl_mode == GOURAUD)
-                      set_normal (bfl_mode, n, j, i);
+                      set_normal (bfl_mode, vn, j, i);
 
                     m_glfcns.glVertex3d (x(j2,i), y(j,i2), z(j,i));
 
                     // Vertex 4
                     if (fc_mode == TEXTURE)
                       tex.tex_coord (double (i-1) / (zc-1), double (j) / (zr-1));
                     else if (fc_mode == INTERP)
                       {
@@ -2651,17 +2653,17 @@ namespace octave
                             m_glfcns.glMaterialfv (LIGHT_MODE, GL_DIFFUSE, cb);
 
                             for (int k = 0; k < 3; k++)
                               cb[k] = ss * (scr + (1-scr) * c(j, i-1, k));
                             m_glfcns.glMaterialfv (LIGHT_MODE, GL_SPECULAR, cb);
                           }
                       }
                     if (fl_mode == GOURAUD)
-                      set_normal (bfl_mode, n, j, i-1);
+                      set_normal (bfl_mode, vn, j, i-1);
 
                     m_glfcns.glVertex3d (x(j2,i-1), y(j,i1), z(j,i-1));
 
                     m_glfcns.glEnd ();
                   }
               }
 
             set_polygon_offset (false);
@@ -2767,17 +2769,18 @@ namespace octave
                                 m_glfcns.glMaterialfv (LIGHT_MODE, GL_DIFFUSE, cb);
 
                                 for (int k = 0; k < 3; k++)
                                   cb[k] = ss * (scr + (1-scr) * c(j-1, i, k));
                                 m_glfcns.glMaterialfv (LIGHT_MODE, GL_SPECULAR, cb);
                               }
                           }
                         if (el_mode > 0)
-                          set_normal (bfl_mode, n, j-1, i);
+                          set_normal (bfl_mode, (el_mode == GOURAUD ? vn : fn),
+                                      j-1, i);
 
                         m_glfcns.glVertex3d (x(j1,i), y(j-1,i2), z(j-1,i));
 
                         // Vertex 2
                         if (ec_mode == INTERP)
                           {
                             for (int k = 0; k < 3; k++)
                               cb[k] = c(j, i, k);
@@ -2794,17 +2797,17 @@ namespace octave
                                 m_glfcns.glMaterialfv (LIGHT_MODE, GL_DIFFUSE, cb);
 
                                 for (int k = 0; k < 3; k++)
                                   cb[k] = ss * (scr + (1-scr) * c(j, i, k));
                                 m_glfcns.glMaterialfv (LIGHT_MODE, GL_SPECULAR, cb);
                               }
                           }
                         if (el_mode == GOURAUD)
-                          set_normal (bfl_mode, n, j, i);
+                          set_normal (bfl_mode, vn, j, i);
 
                         m_glfcns.glVertex3d (x(j2,i), y(j,i2), z(j,i));
 
                         m_glfcns.glEnd ();
                       }
                   }
               }
 
@@ -2864,17 +2867,18 @@ namespace octave
                                 m_glfcns.glMaterialfv (LIGHT_MODE, GL_DIFFUSE, cb);
 
                                 for (int k = 0; k < 3; k++)
                                   cb[k] = ss * (scr + (1-scr) * c(j, i-1, k));
                                 m_glfcns.glMaterialfv (LIGHT_MODE, GL_SPECULAR, cb);
                               }
                           }
                         if (el_mode > 0)
-                          set_normal (bfl_mode, n, j, i-1);
+                          set_normal (bfl_mode, (el_mode == GOURAUD ? vn : fn),
+                                      j, i-1);
 
                         m_glfcns.glVertex3d (x(j2,i-1), y(j,i1), z(j,i-1));
 
                         // Vertex 2
                         if (ec_mode == INTERP)
                           {
                             for (int k = 0; k < 3; k++)
                               cb[k] = c(j, i, k);
@@ -2891,17 +2895,17 @@ namespace octave
                                 m_glfcns.glMaterialfv (LIGHT_MODE, GL_DIFFUSE, cb);
 
                                 for (int k = 0; k < 3; k++)
                                   cb[k] = ss * (scr + (1-scr) * c(j, i, k));
                                 m_glfcns.glMaterialfv (LIGHT_MODE, GL_SPECULAR, cb);
                               }
                           }
                         if (el_mode == GOURAUD)
-                          set_normal (bfl_mode, n, j, i);
+                          set_normal (bfl_mode, vn, j, i);
 
                         m_glfcns.glVertex3d (x(j2,i), y(j,i2), z(j,i));
 
                         m_glfcns.glEnd ();
                       }
                   }
               }
 
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -8672,36 +8672,34 @@ axes::properties::clear_zoom_stack (bool
 
 void
 axes::properties::trigger_normals_calc (void)
 {
   // Find all patch (and surface) objects within axes
   std::list<graphics_object> children_list;
   std::list<graphics_object>::iterator children_list_iter;
   get_children_of_type ("patch", false, true, children_list);
-  // FIXME: Un-comment when surface is ready:
-  // get_children_of_type ("surface", false, true, children_list);
+  get_children_of_type ("surface", false, true, children_list);
 
   // trigger normals calculation for these objects
   for (children_list_iter = children_list.begin ();
        children_list_iter != children_list.end (); children_list_iter++)
     {
       graphics_object kid = *children_list_iter;
       if (kid.isa ("patch"))
         {
           patch::properties& patch_props =
               dynamic_cast<patch::properties&> (kid.get_properties ());
           patch_props.update_normals (false);
         }
       else
         {
-          // FIXME: Un-comment when surface is ready:
-          // surface::properties& surface_props =
-          //     dynamic_cast<surface::properties&> (kid.get_properties ());
-          // surface_props.update_normals (false);
+          surface::properties& surface_props =
+              dynamic_cast<surface::properties&> (kid.get_properties ());
+          surface_props.update_normals (false);
         }
     }
 }
 
 void
 axes::reset_default_properties (void)
 {
   // empty list of local defaults
@@ -9307,18 +9305,18 @@ patch::properties::calc_face_normals (Ma
               // 2-d vertices always point towards +z
               nz = (nz < 0) ? -nz : nz;
             }
         }
       else
         {
           // more general for non-planar polygons
 
-          // calculate face normal with Newill method
-          // https://courses.cit.cornell.edu/cs417-land/SECTIONS/normals.html
+          // calculate face normal with Newell's method
+          // https://www.khronos.org/opengl/wiki/Calculating_a_Surface_Normal#Newell.27s_Method
 
           j1 = nc - 1; j2 = 0;
           i1 = f(i,j1) - 1; i2 = f(i,j2) - 1;
 
           nx = (v(i2,1) - v(i1,1)) * (v(i1,2) + v(i2,2));
           ny = (v(i2,2) - v(i1,2)) * (v(i1,0) + v(i2,0));
           nz = (v(i2,0) - v(i1,0)) * (v(i1,1) + v(i2,1));
 
@@ -9500,19 +9498,101 @@ surface::properties::get_do_lighting (vo
   graphics_object go = gh_manager::get_object (get___myhandle__ ());
   axes::properties& ax_prop = dynamic_cast<axes::properties&>
     (go.get_ancestor ("axes").get_properties ());
 
   return (ax_prop.get_num_lights () > 0);
 }
 
 void
-surface::properties::update_vertex_normals (void)
-{
-  if (vertexnormalsmode_is ("auto"))
+surface::properties::update_face_normals (bool reset)
+{
+  if (! facenormalsmode_is ("auto"))
+    return;
+
+  if ((facelighting_is ("flat") || edgelighting_is ("flat")) &&
+      get_do_lighting ())
+    {
+      Matrix x = get_xdata ().matrix_value ();
+      Matrix y = get_ydata ().matrix_value ();
+      Matrix z = get_zdata ().matrix_value ();
+
+      int p = z.columns ();
+      int q = z.rows ();
+
+      // FIXME: There might be a cleaner way to do this.  When data is changed
+      // the update_xdata, update_ydata, update_zdata routines are called in a
+      // serial fashion.  Until the final call to update_zdata the matrices
+      // will be of mismatched dimensions which can cause an out-of-bound
+      // indexing in the code below.  This one-liner prevents calculating
+      // normals until dimensions match.
+      if (x.columns () != p || y.rows () != q)
+        return;
+
+      NDArray n (dim_vector (q-1, p-1, 3), 0.0);
+
+      bool x_mat = (x.rows () == q);
+      bool y_mat = (y.columns () == p);
+      
+      double dx = x(1,1) - x(0,0);
+      double dy = y(1,1) - y(0,0);
+
+      int i1, i2, j1, j2;
+      i1 = i2 = 0;
+      j1 = j2 = 0;
+
+      for (int i = 0; i < p-1; i++)
+        {
+          if (y_mat)
+            {
+              i1 = i;
+              i2 = i + 1;
+            }
+
+          for (int j = 0; j < q-1; j++)
+            {
+              if (x_mat)
+                {
+                  j1 = j;
+                  j2 = j + 1;
+                }
+
+              double& nx = n(j, i, 0);
+              double& ny = n(j, i, 1);
+              double& nz = n(j, i, 2);
+
+              // calculate face normal with Newell's method
+              // https://www.khronos.org/opengl/wiki/Calculating_a_Surface_Normal#Newell.27s_Method
+              
+              nx = dy * (z(j1,i1) + z(j2,i1) - z(j1,i2) - z(j2,i2));
+              ny = dx * (z(j1,i1) + z(j1,i2) - z(j2,i1) - z(j2,i2));
+              nz = 2 * dx * dy;
+
+              double d = std::max (std::max (fabs (nx), fabs (ny)), fabs (nz));
+
+              nx /= d;
+              ny /= d;
+              nz /= d;
+            }
+        }
+      facenormals = n;
+    }
+  else if (reset)
+    facenormals = Matrix ();
+}
+
+void
+surface::properties::update_vertex_normals (bool reset)
+{
+  if (! vertexnormalsmode_is ("auto"))
+    return;
+  
+  if ((facelighting_is ("gouraud") || facelighting_is ("phong") ||
+      edgelighting_is ("gouraud") || edgelighting_is ("phong")) &&
+      get_do_lighting ())
     {
       Matrix x = get_xdata ().matrix_value ();
       Matrix y = get_ydata ().matrix_value ();
       Matrix z = get_zdata ().matrix_value ();
 
       int p = z.columns ();
       int q = z.rows ();
 
@@ -9588,16 +9668,18 @@ surface::properties::update_vertex_norma
 
               nx /= d;
               ny /= d;
               nz /= d;
             }
         }
       vertexnormals = n;
     }
+  else if (reset)
+    vertexnormals = Matrix ();
 }
 
 // ---------------------------------------------------------------------
 
 void
 hggroup::properties::remove_child (const graphics_handle& h)
 {
   graphics_object go = gh_manager::get_object (h);
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -5113,23 +5113,23 @@ public:
       radio_property backfacelighting , "unlit|lit|{reverselit}"
       array_property cdata u , default_surface_cdata ()
       radio_property cdatamapping al , "{scaled}|direct"
       string_property cdatasource , ""
       double_property diffusestrength , 0.6
       string_property displayname , ""
       double_radio_property edgealpha , double_radio_property (1.0, radio_values ("flat|interp"))
       color_property edgecolor , color_property (color_values (0, 0, 0), radio_values ("none|flat|interp"))
-      radio_property edgelighting , "{none}|flat|gouraud|phong"
+      radio_property edgelighting u , "{none}|flat|gouraud|phong"
       radio_property erasemode h , "{normal}|none|xor|background"
       double_radio_property facealpha , double_radio_property (1.0, radio_values ("flat|interp|texturemap"))
       color_property facecolor , color_property (radio_values ("none|{flat}|interp|texturemap"), color_values (0, 0, 0))
-      radio_property facelighting , "none|{flat}|gouraud|phong"
+      radio_property facelighting u , "none|{flat}|gouraud|phong"
       array_property facenormals m , Matrix ()
-      radio_property facenormalsmode , "{auto}|manual"
+      radio_property facenormalsmode u , "{auto}|manual"
       // FIXME: DEPRECATED: Remove interpreter property in version 6.
       radio_property interpreter hd , "{tex}|none|latex"
       radio_property linestyle , "{-}|--|:|-.|none"
       double_property linewidth , 0.5
       radio_property marker , "{none}|+|o|*|.|x|s|square|d|diamond|^|v|>|<|p|pentagram|h|hexagram"
       color_property markeredgecolor , color_property (radio_values ("none|{auto}|flat"), color_values (0, 0, 0))
       color_property markerfacecolor , color_property (radio_values ("{none}|auto|flat"), color_values (0, 0, 0))
       double_property markersize , 6
@@ -5185,16 +5185,24 @@ public:
       markersize.add_constraint ("min", 0.0, false);
       specularcolorreflectance.add_constraint ("min", 0.0, true);
       specularcolorreflectance.add_constraint ("max", 1.0, true);
       specularexponent.add_constraint ("min", 0.0, false);
       specularstrength.add_constraint ("min", 0.0, true);
       specularstrength.add_constraint ("max", 1.0, true);
     }
 
+  public:
+    void update_normals (bool reset)
+    {
+      update_face_normals (reset);
+      update_vertex_normals (reset);
+    }
+
+
   private:
     void update_alphadata (void)
     {
       if (alphadatamapping_is ("scaled"))
         set_alim (alphadata.get_limits ());
       else
         alim = alphadata.get_limits ();
     }
@@ -5204,36 +5212,48 @@ public:
       if (cdatamapping_is ("scaled"))
         set_clim (cdata.get_limits ());
       else
         clim = cdata.get_limits ();
     }
 
     void update_xdata (void)
     {
-      update_vertex_normals ();
+      update_normals (true);
       set_xlim (xdata.get_limits ());
     }
 
     void update_ydata (void)
     {
-      update_vertex_normals ();
+      update_normals (true);
       set_ylim (ydata.get_limits ());
     }
 
     void update_zdata (void)
     {
-      update_vertex_normals ();
+      update_normals (true);
       set_zlim (zdata.get_limits ());
     }
 
-    void update_vertex_normals (void);
+    void update_face_normals (bool reset);
+    void update_vertex_normals (bool reset);
+
+    void update_facenormalsmode (void)
+    { update_face_normals (false); }
 
     void update_vertexnormalsmode (void)
-    { update_vertex_normals (); }
+    { update_vertex_normals (false); }
+
+    void update_edgelighting (void)
+    { update_normals (false); }
+
+    void update_facelighting (void)
+    { update_normals (false); }
+
+
   };
 
 private:
   properties xproperties;
 
 public:
   surface (const graphics_handle& mh, const graphics_handle& p)
     : base_graphics_object (), xproperties (mh, p)
diff --git a/scripts/plot/draw/light.m b/scripts/plot/draw/light.m
--- a/scripts/plot/draw/light.m
+++ b/scripts/plot/draw/light.m
@@ -24,17 +24,19 @@
 ## Create a light object in the current axes or for axes @var{hax}.
 ##
 ## When a light object is present in an axes object, and the properties
 ## @qcode{"EdgeLighting"} or @qcode{"FaceLighting"} of a @code{patch} or
 ## @code{surface} object are set to a value other than @qcode{"none"}, these
 ## objects are drawn with lighting effects.  Supported values for Lighting
 ## properties are @qcode{"none"} (no lighting effects), @qcode{"flat"} (faceted
 ## look of the objects), and @qcode{"gouraud"} (linear interpolation of the
-## lighting effects between the vertices).
+## lighting effects between the vertices).  If the lighting mode is set to
+## @qcode{"flat"}, the @qcode{"FaceNormals"} property is used for lighting.
+## For @qcode{"gouraud"}, the @qcode{"VertexNormals"} property is used.
 ##
 ## Up to eight light objects are supported per axes. (Implementation dependent)
 ##
 ## Lighting is only supported for OpenGL graphic toolkits (i.e., @qcode{"fltk"}
 ## and @qcode{"qt"}).
 ##
 ## A light object has the following properties which alter the appearance of
 ## the plot.
