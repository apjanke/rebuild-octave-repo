# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1354898043 18000
#      Fri Dec 07 11:34:03 2012 -0500
# Node ID 686580b1a9345c59869c8287d3559182fc6d84d0
# Parent  5238ff93777d48762b7a507e6d54fa4a9f459396
eliminate most compilation warnings for __java__.cc

* libinterp/dldfcn/__java__.h (octave_java::octave_java): Explicitly
initialize base class.
(JVMArgs::update): Use new instead of malloc.  Use strsave instead of
strdup.
(JVMArgs::clean): Use delete instead of free.
Eliminate C-style casts.
(Java_org_octave_OctaveReference_doFinalize, Fjava_init, Fjava_exit,
F__java__, Fjava_convert_matrix, Fjava_unsigned_conversion):
Avoid unused parameter warning.
(find_octave_class): Declare name parameter const.  Eliminate const
casts in all callers.

diff --git a/libinterp/dldfcn/__java__.cc b/libinterp/dldfcn/__java__.cc
--- a/libinterp/dldfcn/__java__.cc
+++ b/libinterp/dldfcn/__java__.cc
@@ -121,38 +121,38 @@ public:
     }
 
 private:
   void clean ()
     {
       if (vm_args.options != 0)
         {
           for (int i=0; i<vm_args.nOptions; i++)
-            free (vm_args.options[i].optionString);
-          free (vm_args.options);
+            delete [] vm_args.options[i].optionString;
+          delete [] vm_args.options;
 
           vm_args.options = 0;
           vm_args.nOptions = 0;
         }
     }
 
   void update ()
     {
       clean ();
       if (java_opts.size () > 0)
         {
           int index = 0;
 
           vm_args.nOptions = java_opts.size ();
-          vm_args.options = (JavaVMOption*) malloc (sizeof (JavaVMOption) * vm_args.nOptions);
+          vm_args.options = new JavaVMOption [vm_args.nOptions];
           for (std::list<std::string>::const_iterator it = java_opts.begin (); it != java_opts.end (); ++it)
             {
               if (Vjava_debug)
                 std::cout << *it << std::endl;
-              vm_args.options[index++].optionString = strdup ((*it).c_str ());
+              vm_args.options[index++].optionString = strsave ((*it).c_str ());
             }
           java_opts.clear ();
         }
     }
 
 private:
   JavaVMInitArgs vm_args;
   std::list<std::string> java_opts;
@@ -226,21 +226,17 @@ static void set_dll_directory (const std
 }
 #endif
 
 static std::string get_module_path (const std::string& name, bool strip_name = true) 
 {
   std::string retval;
 
   retval = octave_env::make_absolute (load_path::find_file (name), 
-#ifdef HAVE_OCTAVE_32
-                                      octave_env::getcwd ());
-#else
                                       octave_env::get_current_directory ());
-#endif
 
   if (! retval.empty ())
     {
       if (strip_name)
       {
         size_t pos = retval.rfind (file_ops::dir_sep_str () + name);
 
         if (pos != std::string::npos)
@@ -430,21 +426,19 @@ static void initialize_jvm ()
 
     std::string jvm_bin_path;
 
     value = "JavaHome";
     jvm_bin_path = read_registry_string (key, value);
     if (! jvm_bin_path.empty ())
       {
 	jvm_bin_path = (jvm_bin_path + std::string ("\\bin"));
-#ifdef HAVE_OCTAVE_32
-    old_cwd = octave_env::getcwd ();
-#else
-    old_cwd = octave_env::get_current_directory ();
-#endif
+
+        old_cwd = octave_env::get_current_directory ();
+
 	set_dll_directory (jvm_bin_path);
 	octave_env::chdir (jvm_bin_path);
       }
   }
   else
   {
     // JVM seems to be already loaded, better to use that DLL instead
     // of looking in the registry, to avoid opening a different JVM.
@@ -468,18 +462,18 @@ static void initialize_jvm ()
     throw std::string("unable to load Java Runtime Environment from ")+jvm_lib_path;
 
 #if defined (__WIN32__)
   set_dll_directory ();
   if (! old_cwd.empty ())
     octave_env::chdir (old_cwd);
 #endif
 
-  JNI_CreateJavaVM_t create_vm = (JNI_CreateJavaVM_t)lib.search("JNI_CreateJavaVM");
-  JNI_GetCreatedJavaVMs_t get_vm = (JNI_GetCreatedJavaVMs_t)lib.search("JNI_GetCreatedJavaVMs");
+  JNI_CreateJavaVM_t create_vm = reinterpret_cast<JNI_CreateJavaVM_t> (lib.search("JNI_CreateJavaVM"));
+  JNI_GetCreatedJavaVMs_t get_vm = reinterpret_cast<JNI_GetCreatedJavaVMs_t> (lib.search("JNI_GetCreatedJavaVMs"));
   if (!create_vm)
     throw std::string("unable to find JNI_CreateJavaVM in ")+jvm_lib_path;
   if (!get_vm)
     throw std::string("unable to find JNI_GetCreatedJavaVMs in ")+jvm_lib_path;
 
   if (get_vm(&jvm, 1, &nVMs) == 0 && nVMs > 0)
 
 #else
@@ -490,25 +484,25 @@ static void initialize_jvm ()
 
   if (JNI_GetCreatedJavaVMs(&jvm, 1, &nVMs) == 0 && nVMs > 0)
 
 #endif
 
   {
     // At least one JVM exists, try to attach to it
 
-    switch (jvm->GetEnv((void**)&current_env, JNI_VERSION_1_2))
+    switch (jvm->GetEnv(reinterpret_cast<void **> (&current_env), JNI_VERSION_1_2))
     {
       case JNI_EDETACHED:
         // Attach the current thread
         JavaVMAttachArgs vm_args;
         vm_args.version = JNI_VERSION_1_2;
-        vm_args.name = (char*)"octave";
+        vm_args.name = const_cast<char *> ("octave");
         vm_args.group = NULL;
-        if (jvm->AttachCurrentThread((void**)&current_env, &vm_args) < 0)
+        if (jvm->AttachCurrentThread (reinterpret_cast<void **> (&current_env), &vm_args) < 0)
           throw std::string("JVM internal error, unable to attach octave to existing JVM");
         break;
       case JNI_EVERSION:
         throw std::string("JVM internal error, the required JNI version is not supported");
         break;
       case JNI_OK:
         // Don't do anything, the current thread is already attached to JVM
         break;
@@ -612,17 +606,17 @@ static octave_value check_exception (JNI
 
       error ("[java] %s", msg.c_str ());
     }
   else
     retval = Matrix ();
   return retval;
 }
 
-static jclass find_octave_class (JNIEnv *jni_env, char *name)
+static jclass find_octave_class (JNIEnv *jni_env, const char *name)
 {
   static std::string class_loader;
   static jclass uiClass = 0;
  
   jclass jcls = jni_env->FindClass (name);
 
   if (jcls == 0)
     {
@@ -725,17 +719,17 @@ static jobject make_java_index (JNIEnv* 
 static octave_value get_array_elements (JNIEnv* jni_env, jobject jobj, const octave_value_list& idx)
 {
   octave_value retval;
   jobject_ref resObj (jni_env);
   jobject_ref java_idx (jni_env, make_java_index (jni_env, idx));
   
   if (! error_state)
     {
-      jclass_ref helperClass (jni_env, find_octave_class (jni_env, (char*)"org/octave/ClassHelper"));
+      jclass_ref helperClass (jni_env, find_octave_class (jni_env, "org/octave/ClassHelper"));
       jmethodID mID = jni_env->GetStaticMethodID (helperClass, "arraySubsref", "(Ljava/lang/Object;[[I)Ljava/lang/Object;");
       resObj = jni_env->CallStaticObjectMethod (helperClass, mID, jobj, jobject (java_idx));
     }
 
   if (resObj)
     retval = box (jni_env, resObj);
   else
     retval = check_exception (jni_env);
@@ -747,17 +741,17 @@ static octave_value set_array_elements (
 {
   octave_value retval;
   jclass_ref rhsCls (jni_env);
   jobject_ref resObj (jni_env), rhsObj (jni_env);
   jobject_ref java_idx (jni_env, make_java_index (jni_env, idx));
   
   if (! error_state && unbox (jni_env, rhs, rhsObj, rhsCls))
     {
-      jclass_ref helperClass (jni_env, find_octave_class (jni_env, (char*)"org/octave/ClassHelper"));
+      jclass_ref helperClass (jni_env, find_octave_class (jni_env, "org/octave/ClassHelper"));
       jmethodID mID = jni_env->GetStaticMethodID (helperClass, "arraySubsasgn",
           "(Ljava/lang/Object;[[ILjava/lang/Object;)Ljava/lang/Object;");
       resObj = jni_env->CallStaticObjectMethod (helperClass, mID,
           jobj, jobject (java_idx), jobject (rhsObj));
     }
 
   if (resObj)
     retval = box (jni_env, resObj);
@@ -897,17 +891,17 @@ octave_value box (JNIEnv* jni_env, jobje
       if (jni_env->IsInstanceOf (jobj, cls))
         {
           retval = jstring_to_string (jni_env, jobj);
         }
     }
 
   if (retval.is_undefined () && Vjava_convert_matrix)
     {
-      cls = find_octave_class (jni_env, (char*)"org/octave/Matrix");
+      cls = find_octave_class (jni_env, "org/octave/Matrix");
       if (jni_env->IsInstanceOf (jobj, cls))
         {
           jmethodID mID = jni_env->GetMethodID (cls, "getDims", "()[I");
           jintArray_ref iv (jni_env, reinterpret_cast<jintArray> (jni_env->CallObjectMethod (jobj, mID)));
           jint *iv_data = jni_env->GetIntArrayElements (jintArray (iv), 0);
           dim_vector dims;
           dims.resize (jni_env->GetArrayLength (jintArray (iv)));
           for (int i=0; i<dims.length (); i++)
@@ -926,53 +920,53 @@ octave_value box (JNIEnv* jni_env, jobje
             }
           else if (s == "byte")
             {
               if (Vjava_unsigned_conversion)
                 {
                   uint8NDArray m (dims);
                   mID = jni_env->GetMethodID (cls, "toByte", "()[B");
                   jbyteArray_ref dv (jni_env, reinterpret_cast<jbyteArray> (jni_env->CallObjectMethod (jobj, mID)));
-                  jni_env->GetByteArrayRegion (dv, 0, m.length (), (jbyte*)m.fortran_vec ());
+                  jni_env->GetByteArrayRegion (dv, 0, m.length (), reinterpret_cast<jbyte *> (m.fortran_vec ()));
                   retval = m;
                 }
               else
                 {
                   int8NDArray m (dims);
                   mID = jni_env->GetMethodID (cls, "toByte", "()[B");
                   jbyteArray_ref dv (jni_env, reinterpret_cast<jbyteArray> (jni_env->CallObjectMethod (jobj, mID)));
-                  jni_env->GetByteArrayRegion (dv, 0, m.length (), (jbyte*)m.fortran_vec ());
+                  jni_env->GetByteArrayRegion (dv, 0, m.length (), reinterpret_cast<jbyte *> (m.fortran_vec ()));
                   retval = m;
                 }
             }
           else if (s == "integer")
             {
               if (Vjava_unsigned_conversion)
                 {
                   uint32NDArray m (dims);
                   mID = jni_env->GetMethodID (cls, "toInt", "()[I");
                   jintArray_ref dv (jni_env, reinterpret_cast<jintArray> (jni_env->CallObjectMethod (jobj, mID)));
-                  jni_env->GetIntArrayRegion (dv, 0, m.length (), (jint*)m.fortran_vec ());
+                  jni_env->GetIntArrayRegion (dv, 0, m.length (), reinterpret_cast<jint *> (m.fortran_vec ()));
                   retval = m;
                 }
               else
                 {
                   int32NDArray m (dims);
                   mID = jni_env->GetMethodID (cls, "toInt", "()[I");
                   jintArray_ref dv (jni_env, reinterpret_cast<jintArray> (jni_env->CallObjectMethod (jobj, mID)));
-                  jni_env->GetIntArrayRegion (dv, 0, m.length (), (jint*)m.fortran_vec ());
+                  jni_env->GetIntArrayRegion (dv, 0, m.length (), reinterpret_cast<jint *> (m.fortran_vec ()));
                   retval = m;
                 }
             }
         }
     }
 
   if (retval.is_undefined ())
     {
-      cls = find_octave_class (jni_env, (char*)"org/octave/OctaveReference");
+      cls = find_octave_class (jni_env, "org/octave/OctaveReference");
       if (jni_env->IsInstanceOf (jobj, cls))
         {
           jmethodID mID = jni_env->GetMethodID (cls, "getID", "()I");
           int ID = jni_env->CallIntMethod (jobj, mID);
           std::map<int,octave_value>::iterator it = octave_ref_map.find (ID);
 
           if (it != octave_ref_map.end ())
             retval = it->second;
@@ -1111,17 +1105,17 @@ int unbox (JNIEnv* jni_env, const octave
       jdoubleArray dv = jni_env->NewDoubleArray (m.length ());
       //for (int i=0; i<m.length (); i++)
         jni_env->SetDoubleArrayRegion (dv, 0, m.length (), m.fortran_vec ());
       jobj = dv;
       jcls = jni_env->GetObjectClass (jobj);
     }
   else if (Vjava_convert_matrix && (val.is_matrix_type () || val.is_range()) && val.is_real_type ())
     {
-      jclass_ref mcls (jni_env, find_octave_class (jni_env, (char*)"org/octave/Matrix"));
+      jclass_ref mcls (jni_env, find_octave_class (jni_env, "org/octave/Matrix"));
       dim_vector dims = val.dims ();
       jintArray_ref iv (jni_env, jni_env->NewIntArray (dims.length ()));
       jint *iv_data = jni_env->GetIntArrayElements (jintArray (iv), 0);
       for (int i=0; i<dims.length (); i++)
         iv_data[i] = dims(i);
       jni_env->ReleaseIntArrayElements (jintArray (iv), iv_data, 0);
       if (val.is_double_type ())
         {
@@ -1131,35 +1125,35 @@ int unbox (JNIEnv* jni_env, const octave
           jmethodID mID = jni_env->GetMethodID (mcls, "<init>", "([D[I)V");
           jobj = jni_env->NewObject (jclass (mcls), mID, jdoubleArray (dv), jintArray (iv));
           jcls = jni_env->GetObjectClass (jobj);
         }
       else if (val.is_int8_type ())
         {
           int8NDArray m = val.int8_array_value ();
           jbyteArray_ref bv (jni_env, jni_env->NewByteArray (m.length ()));
-          jni_env->SetByteArrayRegion (jbyteArray (bv), 0, m.length (), (jbyte*)m.fortran_vec ());
+          jni_env->SetByteArrayRegion (jbyteArray (bv), 0, m.length (), reinterpret_cast <jbyte *> (m.fortran_vec ()));
           jmethodID mID = jni_env->GetMethodID (mcls, "<init>", "([B[I)V");
           jobj = jni_env->NewObject (jclass (mcls), mID, jbyteArray (bv), jintArray (iv));
           jcls = jni_env->GetObjectClass (jobj);
         }
       else if (val.is_uint8_type ())
         {
           uint8NDArray m = val.uint8_array_value ();
           jbyteArray_ref bv (jni_env, jni_env->NewByteArray (m.length ()));
-          jni_env->SetByteArrayRegion (jbyteArray (bv), 0, m.length (), (jbyte*)m.fortran_vec ());
+          jni_env->SetByteArrayRegion (jbyteArray (bv), 0, m.length (), reinterpret_cast<jbyte *> (m.fortran_vec ()));
           jmethodID mID = jni_env->GetMethodID (mcls, "<init>", "([B[I)V");
           jobj = jni_env->NewObject (jclass (mcls), mID, jbyteArray (bv), jintArray (iv));
           jcls = jni_env->GetObjectClass (jobj);
         }
       else if (val.is_int32_type ())
         {
           int32NDArray m = val.int32_array_value ();
           jintArray_ref v (jni_env, jni_env->NewIntArray (m.length ()));
-          jni_env->SetIntArrayRegion (jintArray (v), 0, m.length (), (jint*)m.fortran_vec ());
+          jni_env->SetIntArrayRegion (jintArray (v), 0, m.length (), reinterpret_cast<jint *> (m.fortran_vec ()));
           jmethodID mID = jni_env->GetMethodID (mcls, "<init>", "([I[I)V");
           jobj = jni_env->NewObject (jclass (mcls), mID, jintArray (v), jintArray (iv));
           jcls = jni_env->GetObjectClass (jobj);
         }
       else
         {
           found = 0;
           error ("cannot convert matrix of type `%s'", val.class_name ().c_str ());
@@ -1175,17 +1169,17 @@ int unbox (JNIEnv* jni_env, const octave
           jstring_ref jstr (jni_env, jni_env->NewStringUTF (cellStr(i).string_value().c_str()));
           jni_env->SetObjectArrayElement (array, i, jstr);
         }
       jobj = array;
       jcls = jni_env->GetObjectClass (jobj);
     }
   else
     {
-      jclass rcls = find_octave_class (jni_env, (char*)"org/octave/OctaveReference");
+      jclass rcls = find_octave_class (jni_env, "org/octave/OctaveReference");
       jmethodID mID = jni_env->GetMethodID (rcls, "<init>", "(I)V");
       int ID = octave_java_refcount++;
 
       jobj = jni_env->NewObject (rcls, mID, ID);
       jcls = rcls;
       octave_ref_map[ID] = val;
     }
 
@@ -1240,17 +1234,17 @@ static long get_current_thread_ID(JNIEnv
 }
 
 static int java_event_hook (void)
 {
   JNIEnv *current_env = octave_java::thread_jni_env ();
 
   if (current_env)
     {
-      jclass_ref cls (current_env, find_octave_class (current_env, (char*)"org/octave/Octave"));
+      jclass_ref cls (current_env, find_octave_class (current_env, "org/octave/Octave"));
       jmethodID mID = current_env->GetStaticMethodID (cls, "checkPendingAction", "()V");
       current_env->CallStaticVoidMethod (cls, mID);
     }
   return 0;
 }
 
 static void initialize_java (void)
 {
@@ -1269,30 +1263,30 @@ static void initialize_java (void)
         }
       catch (std::string msg)
         {
           error (msg.c_str ());
         }
     }
 }
 
-DEFUN_DLD (java_init, args, , "")
+DEFUN_DLD (java_init, , , "")
 {
   
   octave_value retval;
 
   retval = 0;
   initialize_java ();
   if (! error_state)
     retval = 1;
 
   return retval;
 }
 
-DEFUN_DLD (java_exit, args, , "")
+DEFUN_DLD (java_exit, , , "")
 {
   octave_value retval;
 
   terminate_jvm ();
 
   return retval;
 }
 
@@ -1592,17 +1586,17 @@ DEFUN_DLD (java2mat, args, , "")
         }
       else
         print_usage ();
     }
 
   return retval;
 }
 
-DEFUN_DLD (__java__, args, , "")
+DEFUN_DLD (__java__, , , "")
 {
   return octave_value ();
 }
 
 DEFUN_DLD (java_convert_matrix, args, nargout, "")
 {
   return SET_INTERNAL_VARIABLE (java_convert_matrix);
 }
@@ -1637,17 +1631,17 @@ JNIEXPORT jboolean JNICALL Java_org_octa
       if (unbox (env, varargout, out_objs, out_clss))
         return true;
     }
 
   return false;
 }
 
 JNIEXPORT void JNICALL Java_org_octave_OctaveReference_doFinalize
-  (JNIEnv *env, jclass, jint ID)
+  (JNIEnv *, jclass, jint ID)
 {
   octave_ref_map.erase (ID);
 }
 
 JNIEXPORT void JNICALL Java_org_octave_Octave_doInvoke
   (JNIEnv *env, jclass, jint ID, jobjectArray args)
 {
   std::map<int,octave_value>::iterator it = octave_ref_map.find (ID);
@@ -1729,17 +1723,17 @@ dim_vector octave_java::dims(void) const
     return dim_vector (1, 1);
 }
 
 JNIEnv* octave_java::thread_jni_env (void)
 {
   JNIEnv *env = NULL;
 
   if (jvm)
-    jvm->GetEnv ((void**)&env, JNI_VERSION_1_2);
+    jvm->GetEnv (reinterpret_cast<void **> (&env), JNI_VERSION_1_2);
 
   return env;
 }
 
 octave_value_list octave_java::subsref(const std::string& type, const std::list<octave_value_list>& idx, int nargout)
 {
   octave_value_list retval;
   int skip = 1;
@@ -1890,17 +1884,17 @@ octave_value octave_java::do_java_invoke
 {
   octave_value retval;
 
   if (jni_env)
     {
       jobjectArray_ref arg_objs (jni_env), arg_types (jni_env);
       if (unbox (jni_env, args, arg_objs, arg_types))
         {
-          jclass_ref helperClass (jni_env, find_octave_class (jni_env, (char*)"org/octave/ClassHelper"));
+          jclass_ref helperClass (jni_env, find_octave_class (jni_env, "org/octave/ClassHelper"));
           jmethodID mID = jni_env->GetStaticMethodID (helperClass, "invokeMethod",
               "(Ljava/lang/Object;Ljava/lang/String;[Ljava/lang/Object;[Ljava/lang/Class;)Ljava/lang/Object;");
           jstring_ref methName (jni_env, jni_env->NewStringUTF (name.c_str ()));
           jobjectArray_ref resObj (jni_env, reinterpret_cast<jobjectArray> (jni_env->CallStaticObjectMethod (helperClass, mID,
               to_java (), jstring (methName), jobjectArray (arg_objs), jobjectArray (arg_types))));
           if (resObj)
             retval = box (jni_env, resObj);
           else
@@ -1915,17 +1909,17 @@ octave_value octave_java:: do_java_invok
 {
   octave_value retval;
 
   if (jni_env)
     {
       jobjectArray_ref arg_objs (jni_env), arg_types (jni_env);
       if (unbox (jni_env, args, arg_objs, arg_types))
         {
-          jclass_ref helperClass (jni_env, find_octave_class (jni_env, (char*)"org/octave/ClassHelper"));
+          jclass_ref helperClass (jni_env, find_octave_class (jni_env, "org/octave/ClassHelper"));
           jmethodID mID = jni_env->GetStaticMethodID (helperClass, "invokeStaticMethod",
               "(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;[Ljava/lang/Class;)Ljava/lang/Object;");
           jstring_ref methName (jni_env, jni_env->NewStringUTF (name.c_str ()));
           jstring_ref clsName (jni_env, jni_env->NewStringUTF (class_name.c_str ()));
           jobject_ref resObj (jni_env, jni_env->CallStaticObjectMethod (helperClass, mID,
               jstring (clsName), jstring (methName), jobjectArray (arg_objs), jobjectArray (arg_types)));
           if (resObj)
             retval = box (jni_env, resObj);
@@ -1940,17 +1934,17 @@ octave_value octave_java::do_java_create
 {
   octave_value retval;
 
   if (jni_env)
     {
       jobjectArray_ref arg_objs (jni_env), arg_types (jni_env);
       if (unbox (jni_env, args, arg_objs, arg_types))
         {
-          jclass_ref helperClass (jni_env, find_octave_class (jni_env, (char*)"org/octave/ClassHelper"));
+          jclass_ref helperClass (jni_env, find_octave_class (jni_env, "org/octave/ClassHelper"));
           jmethodID mID = jni_env->GetStaticMethodID (helperClass, "invokeConstructor",
               "(Ljava/lang/String;[Ljava/lang/Object;[Ljava/lang/Class;)Ljava/lang/Object;");
           jstring_ref clsName (jni_env, jni_env->NewStringUTF (name.c_str ()));
           jobject_ref resObj (jni_env, jni_env->CallStaticObjectMethod (helperClass, mID,
               jstring (clsName), jobjectArray (arg_objs), jobjectArray (arg_types)));
           if (resObj)
             retval = box (jni_env, resObj);
           else
@@ -1961,17 +1955,17 @@ octave_value octave_java::do_java_create
 }
 
 octave_value octave_java::do_java_get (JNIEnv* jni_env, const std::string& name)
 {
   octave_value retval;
 
   if (jni_env)
     {
-      jclass_ref helperClass (jni_env, find_octave_class (jni_env, (char*)"org/octave/ClassHelper"));
+      jclass_ref helperClass (jni_env, find_octave_class (jni_env, "org/octave/ClassHelper"));
       jmethodID mID = jni_env->GetStaticMethodID (helperClass, "getField",
           "(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;");
       jstring_ref fName (jni_env, jni_env->NewStringUTF (name.c_str ()));
       jobject_ref resObj (jni_env, jni_env->CallStaticObjectMethod (helperClass, mID,
           to_java (), jstring (fName)));
       if (resObj)
         retval = box (jni_env, resObj);
       else
@@ -1981,17 +1975,17 @@ octave_value octave_java::do_java_get (J
 }
 
 octave_value octave_java::do_java_get (JNIEnv* jni_env, const std::string& class_name, const std::string& name)
 {
   octave_value retval;
 
   if (jni_env)
     {
-      jclass_ref helperClass (jni_env, find_octave_class (jni_env, (char*)"org/octave/ClassHelper"));
+      jclass_ref helperClass (jni_env, find_octave_class (jni_env, "org/octave/ClassHelper"));
       jmethodID mID = jni_env->GetStaticMethodID (helperClass, "getStaticField",
           "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;");
       jstring_ref cName (jni_env, jni_env->NewStringUTF (class_name.c_str ()));
       jstring_ref fName (jni_env, jni_env->NewStringUTF (name.c_str ()));
       jobject_ref resObj (jni_env, jni_env->CallStaticObjectMethod (helperClass, mID,
           jstring (cName), jstring (fName)));
       if (resObj)
         retval = box (jni_env, resObj);
@@ -2007,17 +2001,17 @@ octave_value octave_java::do_java_set (J
 
   if (jni_env)
     {
       jobject_ref jobj (jni_env);
       jclass_ref jcls (jni_env);
 
       if (unbox (jni_env, val, jobj, jcls))
         {
-          jclass_ref helperClass (jni_env, find_octave_class (jni_env, (char*)"org/octave/ClassHelper"));
+          jclass_ref helperClass (jni_env, find_octave_class (jni_env, "org/octave/ClassHelper"));
           jmethodID mID = jni_env->GetStaticMethodID (helperClass, "setField",
               "(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)V");
           jstring_ref fName (jni_env, jni_env->NewStringUTF (name.c_str ()));
           jni_env->CallStaticObjectMethod (helperClass, mID, to_java (), jstring (fName), jobject (jobj));
           check_exception (jni_env);
         }
     }
   return retval;
@@ -2029,17 +2023,17 @@ octave_value octave_java::do_java_set (J
 
   if (jni_env)
     {
       jobject_ref jobj (jni_env);
       jclass_ref jcls (jni_env);
 
       if (unbox (jni_env, val, jobj, jcls))
         {
-          jclass_ref helperClass (jni_env, find_octave_class (jni_env, (char*)"org/octave/ClassHelper"));
+          jclass_ref helperClass (jni_env, find_octave_class (jni_env, "org/octave/ClassHelper"));
           jmethodID mID = jni_env->GetStaticMethodID (helperClass, "setStaticField",
               "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V");
           jstring_ref cName (jni_env, jni_env->NewStringUTF (class_name.c_str ()));
           jstring_ref fName (jni_env, jni_env->NewStringUTF (name.c_str ()));
           jni_env->CallStaticObjectMethod (helperClass, mID, jstring (cName), jstring (fName), jobject (jobj));
           check_exception (jni_env);
         }
     }
diff --git a/libinterp/dldfcn/__java__.h b/libinterp/dldfcn/__java__.h
--- a/libinterp/dldfcn/__java__.h
+++ b/libinterp/dldfcn/__java__.h
@@ -97,27 +97,27 @@ extern JAVAPKG_API int unbox (JNIEnv* jn
 extern JAVAPKG_API bool Vjava_convert_matrix;
 extern JAVAPKG_API bool Vjava_unsigned_conversion;
 extern JAVAPKG_API bool Vjava_debug;
 
 class JAVAPKG_API octave_java : public octave_base_value
 {
 public:
   octave_java (void)
-    : java_object (0), java_class (0)
+    : octave_base_value (), java_object (0), java_class (0)
     { }
 
   octave_java (const octave_java& jobj)
-    : java_object (0), java_class (0)
+    : octave_base_value (jobj), java_object (0), java_class (0)
     {
       init (jobj.java_object, jobj.java_class);
     }
 
-  octave_java (jobject obj, jclass cls = 0)
-    : java_object (0)
+  octave_java (const jobject& obj, jclass cls = 0)
+    : octave_base_value (), java_object (0)
     {
       init (obj, cls);
     }
 
   ~octave_java (void)
     {
       release ();
     }
