# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1361847580 18000
#      Mon Feb 25 21:59:40 2013 -0500
# Node ID b7de58feb2d3658665e3f528fae265f6f63d523d
# Parent  c8974e28da59088876651e112ad79bd9341d7316
move block_comment_nesting_level to lexical_feedback_class

* lex.h, lex.ll (block_comment_nesting_level): Move global
variable to lexical_feedback class.  Change all uses.
(reset_parser): Don't reset block_comment_nesting_level.

diff --git a/libinterp/parse-tree/lex.h b/libinterp/parse-tree/lex.h
--- a/libinterp/parse-tree/lex.h
+++ b/libinterp/parse-tree/lex.h
@@ -145,16 +145,17 @@ public:
       looking_at_matrix_or_assign_lhs (false),
       looking_for_object_index (false), 
       looking_at_indirect_ref (false), parsing_class_method (false),
       maybe_classdef_get_set_method (false), parsing_classdef (false),
       quote_is_transpose (false), parser_end_of_input (false),
       input_line_number (1), current_input_column (1),
       bracketflag (0), braceflag (0),
       looping (0), defining_func (0), looking_at_function_handle (0),
+      block_comment_nesting_level (0),
       looking_at_object_index (), parsed_function_name (),
       pending_local_variables (), nesting_level ()
   {
     init ();
   }
 
   lexical_feedback (const lexical_feedback& lf)
     : convert_spaces_to_comma (lf.convert_spaces_to_comma),
@@ -175,16 +176,17 @@ public:
       parser_end_of_input (lf.parser_end_of_input),
       input_line_number (lf.input_line_number),
       current_input_column (lf.current_input_column),
       bracketflag (lf.bracketflag),
       braceflag (lf.braceflag),
       looping (lf.looping),
       defining_func (lf.defining_func),
       looking_at_function_handle (lf.looking_at_function_handle),
+      block_comment_nesting_level (lf.block_comment_nesting_level),
       looking_at_object_index (lf.looking_at_object_index),
       parsed_function_name (lf.parsed_function_name),
       pending_local_variables (lf.pending_local_variables),
       nesting_level (lf.nesting_level)
   { }
 
   lexical_feedback& operator = (const lexical_feedback& lf)
   {
@@ -208,16 +210,17 @@ public:
         parser_end_of_input = lf.parser_end_of_input;
         input_line_number = lf.input_line_number;
         current_input_column = lf.current_input_column;
         bracketflag = lf.bracketflag;
         braceflag = lf.braceflag;
         looping = lf.looping;
         defining_func = lf.defining_func;
         looking_at_function_handle = lf.looking_at_function_handle;
+        block_comment_nesting_level = lf.block_comment_nesting_level,
         looking_at_object_index = lf.looking_at_object_index;
         parsed_function_name = lf.parsed_function_name;
         pending_local_variables = lf.pending_local_variables;
         nesting_level = lf.nesting_level;
       }
 
     return *this;
   }
@@ -303,16 +306,19 @@ public:
   int looping;
 
   // Nonzero means we're in the middle of defining a function.
   int defining_func;
 
   // Nonzero means we are parsing a function handle.
   int looking_at_function_handle;
 
+  // Nestng level for blcok comments.
+  int block_comment_nesting_level;
+
   // If the front of the list is TRUE, the closest paren, brace, or
   // bracket nesting is an index for an object.
   std::list<bool> looking_at_object_index;
 
   // If the top of the stack is TRUE, then we've already seen the name
   // of the current function.  Should only matter if
   // current_function_level > 0
   std::stack<bool> parsed_function_name;
diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -230,20 +230,16 @@ typedef int yum_yum;
 const yum_yum ATE_NOTHING = 0;
 const yum_yum ATE_SPACE_OR_TAB = 1;
 const yum_yum ATE_NEWLINE = 2;
 
 static bool Vdisplay_tokens = false;
 
 static unsigned int Vtoken_count = 0;
 
-// The start state that was in effect when the beginning of a block
-// comment was noticed.
-static int block_comment_nesting_level = 0;
-
 // Internal variable for lexer debugging state.
 static bool lexer_debug_flag = false;
 
 // Forward declarations for functions defined at the bottom of this
 // file.
 
 static int text_yyinput (void);
 static void xunput (char c, char *buf);
@@ -656,17 +652,17 @@ NUMBER  (({D}+\.?{D}*{EXPON}?)|(\.{D}+{E
 
 %{
 // End of file.
 %}
 
 <<EOF>> {
     LEXER_DEBUG ("<<EOF>>");
 
-    if (block_comment_nesting_level != 0)
+    if (lexer_flags.block_comment_nesting_level != 0)
       {
         warning ("block comment open at end of input");
 
         if ((reading_fcn_file || reading_script_file || reading_classdef_file)
             && ! curr_fcn_file_name.empty ())
           warning ("near line %d of file '%s.m'",
                    lexer_flags.input_line_number, curr_fcn_file_name.c_str ());
       }
@@ -834,17 +830,17 @@ NUMBER  (({D}+\.?{D}*{EXPON}?)|(\.{D}+{E
 
 ^{S}*{CCHAR}\{{S}*{NL} {
     LEXER_DEBUG ("^{S}*{CCHAR}\\{{S}*{NL}");
 
     lexer_flags.looking_for_object_index = false;
 
     lexer_flags.input_line_number++;
     lexer_flags.current_input_column = 1;
-    block_comment_nesting_level++;
+    lexer_flags.block_comment_nesting_level++;
     promptflag--;
 
     bool eof = false;
     process_comment (true, eof);
   }
 
 %{
 // Other operators.
@@ -1058,19 +1054,16 @@ reset_parser (void)
   // Start off on the right foot.
   BEGIN (INITIAL);
 
   parser_symtab_context.clear ();
 
   // We do want a prompt by default.
   promptflag = 1;
 
-  // We are not in a block comment.
-  block_comment_nesting_level = 0;
-
   // Clear out the stack of token info used to track line and column
   // numbers.
   while (! token_stack.empty ())
     {
       delete token_stack.top ();
       token_stack.pop ();
     }
 
@@ -1675,25 +1668,25 @@ grab_block_comment (stream_reader& reade
                     case '\n':
                       {
                         lexer_flags.current_input_column = 0;
                         at_bol = true;
                         done = true;
 
                         if (type == '{')
                           {
-                            block_comment_nesting_level++;
+                            lexer_flags.block_comment_nesting_level++;
                             promptflag--;
                           }
                         else
                           {
-                            block_comment_nesting_level--;
+                            lexer_flags.block_comment_nesting_level--;
                             promptflag++;
 
-                            if (block_comment_nesting_level == 0)
+                            if (lexer_flags.block_comment_nesting_level == 0)
                               {
                                 buf += grab_comment_block (reader, true, eof);
 
                                 return buf;
                               }
                           }
                       }
                       break;
@@ -1783,17 +1776,17 @@ grab_comment_block (stream_reader& reade
                       break;
 
                     case '\n':
                       {
                         lexer_flags.current_input_column = 0;
                         at_bol = true;
                         done = true;
 
-                        block_comment_nesting_level++;
+                        lexer_flags.block_comment_nesting_level++;
                         promptflag--;
 
                         buf += grab_block_comment (reader, eof);
 
                         in_comment = false;
 
                         if (eof)
                           goto done;
