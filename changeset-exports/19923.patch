# HG changeset patch
# User Rik <rik@octave.org>
# Date 1426005739 25200
#      Tue Mar 10 09:42:19 2015 -0700
# Node ID 31e3799b9e27cedf9399ab7f4616dfdc8405395e
# Parent  a0ec61ec0f73e899e1953ad80c78f9ac18fbc406
Map -pi to pi for principal argument in complex operators with float values (bug #43313)

* Array-fC.cc (nan_ascending_compare, nan_descending_compare): Use static_cast
to float on M_PI so that comparisons work.

* oct-cmplx.h (DEF_COMPLEXR_COMP): Use static_cast to type <T> on M_PI so that
comparisons work.

* complex.tst: Add tests for single values on top of those for double.

diff --git a/liboctave/array/Array-fC.cc b/liboctave/array/Array-fC.cc
--- a/liboctave/array/Array-fC.cc
+++ b/liboctave/array/Array-fC.cc
@@ -53,19 +53,20 @@ nan_ascending_compare (const FloatComple
   float yabs = std::abs (y);
 
   if (xabs < yabs)
     return true;
   else if (xabs == yabs)
     {
       float xarg = arg (x);
       float yarg = arg (y);
-      xarg = (xarg == -M_PI) ? M_PI : xarg;
-      yarg = (yarg == -M_PI) ? M_PI : yarg;
-
+      xarg = (xarg == -static_cast<float> (M_PI)) ? static_cast<float> (M_PI)
+                                                  : xarg;
+      yarg = (yarg == -static_cast<float> (M_PI)) ? static_cast<float> (M_PI)
+                                                  : yarg;
       return xarg < yarg;
     }
   else
     return false;
 }
 
 static bool
 nan_descending_compare (const FloatComplex& x, const FloatComplex& y)
@@ -77,19 +78,20 @@ nan_descending_compare (const FloatCompl
   float yabs = std::abs (y);
 
   if (xabs > yabs)
     return true;
   else if (xabs == yabs)
     {
       float xarg = arg (x);
       float yarg = arg (y);
-      xarg = (xarg == -M_PI) ? M_PI : xarg;
-      yarg = (yarg == -M_PI) ? M_PI : yarg;
-
+      xarg = (xarg == -static_cast<float> (M_PI)) ? static_cast<float> (M_PI)
+                                                  : xarg;
+      yarg = (yarg == -static_cast<float> (M_PI)) ? static_cast<float> (M_PI)
+                                                  : yarg;
       return xarg > yarg;
     }
   else
     return false;
 }
 
 Array<FloatComplex>::compare_fcn_type
 safe_comparator (sortmode mode, const Array<FloatComplex>& a, bool allow_chk)
diff --git a/liboctave/util/oct-cmplx.h b/liboctave/util/oct-cmplx.h
--- a/liboctave/util/oct-cmplx.h
+++ b/liboctave/util/oct-cmplx.h
@@ -45,55 +45,55 @@ template <class T> \
 inline bool operator OP (const std::complex<T>& a, const std::complex<T>& b) \
 { \
   FLOAT_TRUNCATE const T ax = std::abs (a); \
   FLOAT_TRUNCATE const T bx = std::abs (b); \
   if (ax == bx) \
     { \
       FLOAT_TRUNCATE const T ay = std::arg (a); \
       FLOAT_TRUNCATE const T by = std::arg (b); \
-      if (ay == -M_PI) \
+      if (ay == static_cast<T> (-M_PI)) \
         { \
-          if (by != -M_PI) \
-            return M_PI OP by; \
+          if (by != static_cast<T> (-M_PI)) \
+            return static_cast<T> (M_PI) OP by; \
         } \
-      else if (by == -M_PI) \
+      else if (by == static_cast<T> (-M_PI)) \
         { \
-          return ay OP M_PI; \
+          return ay OP static_cast<T> (M_PI); \
         } \
       return ay OP by; \
     } \
   else \
     return ax OPS bx; \
 } \
 template <class T> \
 inline bool operator OP (const std::complex<T>& a, T b) \
 { \
   FLOAT_TRUNCATE const T ax = std::abs (a); \
   FLOAT_TRUNCATE const T bx = std::abs (b); \
   if (ax == bx) \
     { \
       FLOAT_TRUNCATE const T ay = std::arg (a); \
-      if (ay == -M_PI) \
-        return M_PI OP 0; \
+      if (ay == static_cast<T> (-M_PI)) \
+        return static_cast<T> (M_PI) OP 0; \
       return ay OP 0; \
     } \
   else \
     return ax OPS bx; \
 } \
 template <class T> \
 inline bool operator OP (T a, const std::complex<T>& b) \
 { \
   FLOAT_TRUNCATE const T ax = std::abs (a); \
   FLOAT_TRUNCATE const T bx = std::abs (b); \
   if (ax == bx) \
     { \
       FLOAT_TRUNCATE const T by = std::arg (b); \
-      if (by == -M_PI) \
-        return 0 OP M_PI; \
+      if (by == static_cast<T> (-M_PI)) \
+        return 0 OP static_cast<T> (M_PI); \
       return 0 OP by; \
     } \
   else \
     return ax OPS bx; \
 }
 
 DEF_COMPLEXR_COMP (>, >)
 DEF_COMPLEXR_COMP (<, <)
diff --git a/test/complex.tst b/test/complex.tst
--- a/test/complex.tst
+++ b/test/complex.tst
@@ -15,30 +15,38 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## Test ordering of complex values by magnitude and then by phase
 %!test
 %! x = [0 i 1+i 2 3i 3+4i];
 %! assert (sort (x, "descend"), fliplr (x));
+%! assert (sort (single (x), "descend"), fliplr (single (x)));
 
 %!test
 %! x = [1, -1, i, -i];
 %! xs = [-i, 1, i, -1];
 %! assert (sort (x), xs);
 %! assert (sort (x, "descend"), fliplr (xs));
+%! assert (sort (single (x)), single (xs));
+%! assert (sort (single (x), "descend"), fliplr (single (xs)));
 
 ## bug #44071, issorted incorrect because it uses different sort routine.
 %!assert (issorted ([1, -1, i, -i]), false)
+%!assert (issorted (single ([1, -1, i, -i])), false)
 
 ## bug #43313, -1 is both '>' and '==' to (-1 - 0i)
 %!test
 %! assert (complex(-1,0) == complex(-1,-0), true);
 %! assert (complex(-1,0) > complex(-1,-0), false);
 %! assert (complex(-1,0) < complex(-1,-0), false);
 
 ## Test that sort and issorted both agree on boundary case
 %!test
 %! x = [complex(-1,0), complex(-1,-0), i, -i, 1];
 %! xs = sort (x);
+%! xf = single (x);
+%! xfs = sort (xf);
 %! assert (issorted (xs));
+%! assert (issorted (xfs));
+%! assert (double (xfs), xs);
 
