# HG changeset patch
# User Andreas Weber <andy.weber.aw@gmail.com>
# Date 1420304274 -3600
#      Sat Jan 03 17:57:54 2015 +0100
# Node ID 4f615cd9a68d0e6a0c2517934570d81bf26e3ccb
# Parent  651f12640c90a49f7c2cf850d8a334bb2f110cf6
Use "testif HAVE_PORTAUDIO" for new audio function tests

diff --git a/libinterp/dldfcn/audiodevinfo.cc b/libinterp/dldfcn/audiodevinfo.cc
--- a/libinterp/dldfcn/audiodevinfo.cc
+++ b/libinterp/dldfcn/audiodevinfo.cc
@@ -391,40 +391,40 @@ or recording using those parameters.\n\
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
 
   return retval;
 }
 
 /*
-%!test
+%!testif HAVE_PORTAUDIO
 %! devinfo = audiodevinfo;
 %! assert (rows (devinfo.input), 1);
 %! assert (rows (devinfo.output), 1);
 
-%!test
+%!testif HAVE_PORTAUDIO
 %! devinfo = audiodevinfo;
 %! nout = audiodevinfo (0);
 %! nin = audiodevinfo (1);
 %! assert (columns (devinfo.output), nout);
 %! assert (columns (devinfo.input), nin);
 
-%!test
+%!testif HAVE_PORTAUDIO
 %! devinfo = audiodevinfo;
 %! nout = audiodevinfo (0);
 %! nin = audiodevinfo (1);
 %! for i = 1:nout,
 %!   assert (devinfo.output(i).Name, audiodevinfo (0, devinfo.output(i).ID))
 %! endfor
 %! for i=1:nin,
 %!   assert (devinfo.input(i).Name, audiodevinfo (1, devinfo.input(i).ID))
 %! endfor
 
-%!test
+%!testif HAVE_PORTAUDIO
 %! devinfo = audiodevinfo;
 %! nout = audiodevinfo (0);
 %! nin = audiodevinfo (1);
 %! for i = 1:nout,
 %!   assert (devinfo.output(i).ID, audiodevinfo (0, devinfo.output(i).Name))
 %! endfor
 %! for i = 1:nin,
 %!   assert (devinfo.input(i).ID, audiodevinfo (1, devinfo.input(i).Name))
diff --git a/scripts/audio/@audioplayer/audioplayer.m b/scripts/audio/@audioplayer/audioplayer.m
--- a/scripts/audio/@audioplayer/audioplayer.m
+++ b/scripts/audio/@audioplayer/audioplayer.m
@@ -96,101 +96,101 @@ function player = audioplayer (varargin)
       varargin{1} = str2func (varargin{1});
     endif
     player.player = __player_audioplayer__ (varargin{:});
     player = class (player, "audioplayer");
   endif
 
 endfunction
 
-%!test
+%!testif HAVE_PORTAUDIO
 %! mono = randn (1, 44100) - 0.5;
 %! stereo = randn (2, 44100) - 0.5;
 %! fs = 44100;
 %! player1 = audioplayer (mono, fs);
 %! player2 = audioplayer (stereo, fs);
 %! assert (player1.NumberOfChannels, 1);
 %! assert (player2.NumberOfChannels, 2);
 %! assert (player1.SampleRate, 44100);
 %! assert (player2.SampleRate, 44100);
 %! assert (player1.TotalSamples, 44100);
 %! assert (player2.TotalSamples, 44100);
 %! playblocking (player1);
 %! playblocking (player2);
 
-%!test
+%!testif HAVE_PORTAUDIO
 %! audio = randn (2, 88200) - 0.5;
 %! fs = 44100;
 %! player = audioplayer (audio, fs);
 %! assert (!isplaying (player));
 %! play (player);
 %! assert (isplaying (player));
 %! sleep (1);
 %! pause (player);
 %! assert (!isplaying (player));
 %! sleep (1);
 %! resume (player);
 %! assert (isplaying (player));
 %! sleep (1);
 
-%!test
+%!testif HAVE_PORTAUDIO
 %! audio = randn (2, 88200) - 0.5;
 %! fs = 44100;
 %! player = audioplayer (audio, fs);
 %! assert (!isplaying (player));
 %! play (player);
 %! assert (isplaying (player));
 %! sleep (1);
 %! stop (player);
 %! sleep (1);
 %! assert (!isplaying (player));
 %! assert (player.CurrentSample, 0);
 
-%!test
+%!testif HAVE_PORTAUDIO
 %! audio = randn (2, 44100) - 0.5;
 %! fs = 44100;
 %! player = audioplayer (audio, fs);
 %! set (player, {"SampleRate", "Tag", "UserData"}, {8000, "tag", [1, 2; 3, 4]});
 %! assert (player.SampleRate, 8000);
 %! assert (player.Tag, "tag");
 %! assert (player.UserData, [1, 2; 3, 4]);
 
-%!test
+%!testif HAVE_PORTAUDIO
 %! audio = randn (2, 44100) - 0.5;
 %! fs = 44100;
 %! player = audioplayer (audio, fs);
 %! settable = set (player);
 %! settable.SampleRate = 8000;
 %! settable.Tag = "tag";
 %! settable.UserData = [1, 2; 3, 4];
 %! set (player, settable);
 %! assert (player.SampleRate, 8000);
 %! assert (player.Tag, "tag");
 %! assert (player.UserData, [1, 2; 3, 4]);
 
-%!test
+%!testif HAVE_PORTAUDIO
 %! audio = randn (2, 44100) - 0.5;
 %! fs = 44100;
 %! player = audioplayer (audio, fs);
 %! player.SampleRate = 8000;
 %! player.Tag = "tag";
 %! player.UserData = [1, 2; 3, 4];
 %! properties = get (player, {"SampleRate", "Tag", "UserData"});
 %! assert (properties, {8000, "tag", [1, 2; 3, 4]});
 
 %!function [sound, status] = callback (samples)
 %!  sound = rand (samples, 2) - 0.5;
 %!  status = 0;
 %!endfunction
 
-%!test
+%!testif HAVE_PORTAUDIO
 %! player = audioplayer (@callback, 44100);
 %! play (player);
 %! sleep (2);
 %! stop (player);
 %! assert (1);
 
-%!test
+%!testif HAVE_PORTAUDIO
 %! player = audioplayer ("callback", 44100, 16);
 %! play (player);
 %! sleep (2);
 %! stop (player);
 %! assert (1);
diff --git a/scripts/audio/@audiorecorder/audiorecorder.m b/scripts/audio/@audiorecorder/audiorecorder.m
--- a/scripts/audio/@audiorecorder/audiorecorder.m
+++ b/scripts/audio/@audiorecorder/audiorecorder.m
@@ -39,95 +39,95 @@ function recorder = audiorecorder (varar
     varargin{1} = str2func (varargin{1});
   endif
 
   recorder.recorder = __recorder_audiorecorder__ (varargin{:});
   recorder = class (recorder, "audiorecorder");
 
 endfunction
 
-%!test
+%!testif HAVE_PORTAUDIO
 %! recorder = audiorecorder (44100, 16, 2);
 %! recordblocking (recorder, 1);
 %! data = getaudiodata (recorder, "int16");
 %! assert (strcmp (class (data), "int16"));
 %! data = getaudiodata (recorder, "int8");
 %! assert (strcmp (class (data), "int8"));
 %! data = getaudiodata (recorder, "uint8");
 %! assert (strcmp (class (data), "uint8"));
 %! assert (size (data)(1), recorder.TotalSamples);
 %! assert (size (data)(2), 2);
 %! assert (size (data)(1) != 0);
 
-%!test
+%!testif HAVE_PORTAUDIO
 %! recorder = audiorecorder (44100, 16, 2);
 %! record (recorder, 1)
 %! sleep (2);
 %! record (recorder, 1);
 %! sleep (2);
 %! data = getaudiodata (recorder);
 %! assert (size (data)(1) < 44100 * 2);
 
-%!test
+%!testif HAVE_PORTAUDIO
 %! recorder = audiorecorder (44100, 16, 2);
 %! record (recorder, 1);
 %! sleep (2);
 %! player1 = audioplayer (recorder);
 %! player2 = getplayer (recorder);
 %! play (player1);
 %! sleep (2);
 %! play (player2);
 %! sleep (2);
 %! assert (player1.TotalSamples, recorder.TotalSamples);
 %! assert (player2.TotalSamples, recorder.TotalSamples);
 
-%!test
+%!testif HAVE_PORTAUDIO
 %! recorder = audiorecorder;
 %! set (recorder, {"SampleRate", "Tag", "UserData"}, {8000, "tag", [1, 2; 3, 4]});
 %! assert (recorder.SampleRate, 8000);
 %! assert (recorder.Tag, "tag");
 %! assert (recorder.UserData, [1, 2; 3, 4]);
 
-%!test
+%!testif HAVE_PORTAUDIO
 %! recorder = audiorecorder;
 %! settable = set (recorder);
 %! settable.SampleRate = 8000;
 %! settable.Tag = "tag";
 %! settable.UserData = [1, 2; 3, 4];
 %! set (recorder, settable);
 %! assert (recorder.SampleRate, 8000);
 %! assert (recorder.Tag, "tag");
 %! assert (recorder.UserData, [1, 2; 3, 4]);
 
-%!test
+%!testif HAVE_PORTAUDIO
 %! recorder = audiorecorder;
 %! recorder.SampleRate = 8000;
 %! recorder.Tag = "tag";
 %! recorder.UserData = [1, 2; 3, 4];
 %! properties = get (recorder, {"SampleRate", "Tag", "UserData"});
 %! assert (properties, {8000, "tag", [1, 2; 3, 4]});
 
 #%!function status = callback_record (sound)
 #%!  fid = fopen ("record.txt", "at");
 #%!  for index = 1:rows(sound)
 #%!    fprintf (fid, "%.4f, %.4f\n", sound(index, 1), sound(index, 2));
 #%!  endfor
 #%!  fclose (fid);
 #%!  status = 0;
 #%!endfunction
 
-#%!test
+#%!testif HAVE_PORTAUDIO
 #%! recorder = audiorecorder (@callback_record, 44100);
 #%! unlink ("record.txt")
 #%! record (recorder);
 #%! sleep (2);
 #%! stop (player);
 #%! s = stat ("record.txt");
 #%! assert (s.size > 0);
 
-#%!test
+#%!testif HAVE_PORTAUDIO
 #%! recorder = audiorecorder (@callback_record, 44100);
 #%! unlink ("record.txt")
 #%! record (recorder);
 #%! sleep (2);
 #%! stop (recorder);
 #%! s = stat ("record.txt");
 #%! assert (s.size > 0);
