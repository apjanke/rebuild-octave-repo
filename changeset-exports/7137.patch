# HG changeset patch
# User jwe
# Date 1194553592 0
#      Thu Nov 08 20:26:32 2007 +0000
# Node ID 38fe664f0ef18d348e80b729926a1e24fe5c5dc7
# Parent  59dcf01bb3e38c2fcc51fd64a724368ca4027916
[project @ 2007-11-08 20:26:32 by jwe]

diff --git a/scripts/control/base/bode_bounds.m b/scripts/control/base/bode_bounds.m
--- a/scripts/control/base/bode_bounds.m
+++ b/scripts/control/base/bode_bounds.m
@@ -63,18 +63,18 @@ function [wmin, wmax] = bode_bounds (zer
 
     if (! isempty (iip))
       cpol = log (pol(iip))/tsam;
     else
       cpol = [];
     endif
   else
     ## continuous
-    iip = find (abs(pol) > norm(pol)*eps));
-    iiz = find (abs(zer) > norm(zer)*eps));
+    iip = find (abs(pol) > norm(pol)*eps);
+    iiz = find (abs(zer) > norm(zer)*eps);
 
     if (! isempty (zer))
       czer = zer(iiz);
     else
       czer = [];
     endif
     if (! isempty (pol))
       cpol = pol(iip);
diff --git a/scripts/control/base/lsim.m b/scripts/control/base/lsim.m
--- a/scripts/control/base/lsim.m
+++ b/scripts/control/base/lsim.m
@@ -61,17 +61,17 @@ function [y, x] = lsim (sys, u, t, x0)
     error ("lsim: There should be an input value (row) for each time instant");
   endif
   if (columns (u) != columns (d))
     error ("lsim: U and d should have the same number of inputs");
   endif
   if (columns (x0) > 1)
     error ("lsim: Initial condition vector should have only one column");
   endif
-  if (rows (x0) > rows p(a))
+  if (rows (x0) > rows (a))
     error ("lsim: Initial condition vector is too large");
   endif
 
   Ts = 0;
   t(2)-t(1);
   u=u';
   n = max (size (t));
 
diff --git a/scripts/control/hinf/hinf_ctr.m b/scripts/control/hinf/hinf_ctr.m
--- a/scripts/control/hinf/hinf_ctr.m
+++ b/scripts/control/hinf/hinf_ctr.m
@@ -97,17 +97,17 @@ function K = hinf_ctr (dgs, F, H, Z, g)
   D1121 = D11((nz-nu+1):nz,1:(nw-ny));
   D1122 = D11((nz-nu+1):nz,(nw-ny+1):nw);
 
   ## D11ik may be the empty matrix, don't calculate with empty matrices
   [nd1111, md1111] = size (D1111);
   md1112 = length (D1112);
   md1121 = length (D1121);
 
-  if (nd1111 == 0) || md1112 == 0)
+  if (nd1111 == 0 || md1112 == 0)
     d11hat = -D1122;
   else
     xx = inv (g*g*eye(nz-nu) - D1111*D1111');
     d11hat = -D1121*D1111'*xx*D1112 - D1122;
   endif
   if (md1112 == 0)
     d21hat = eye (ny);
   elseif (nd1111 == 0)
diff --git a/scripts/control/hinf/hinfnorm.m b/scripts/control/hinf/hinfnorm.m
--- a/scripts/control/hinf/hinfnorm.m
+++ b/scripts/control/hinf/hinfnorm.m
@@ -149,17 +149,17 @@ function [g, gmin, gmax] = hinfnorm (sys
   endif
 
   if (nargin < 2)
     tol = 0.001;        # convergence measure for gmin, gmax
   endif
 
   ## check for scalar input arguments 2...5
   if (! isscalar (tol) && isscalar (gmin)
-      && isscalar (gmax) && isscalar (ptol)) )
+      && isscalar (gmax) && isscalar (ptol))
     error ("hinfnorm: tol, gmin, gmax, ptol must be scalars");
   endif
 
   In = eye (n+nz);
   Im = eye (m);
   Ip = eye (p);
   ## find the Hinf norm via binary search
   while (gmax/gmin - 1 > tol)
diff --git a/scripts/control/obsolete/packsys.m b/scripts/control/obsolete/packsys.m
--- a/scripts/control/obsolete/packsys.m
+++ b/scripts/control/obsolete/packsys.m
@@ -40,17 +40,17 @@ function Asys = packsys (a, b, c, d, dfl
   if (nargin < 3 || nargin > 5)
     disp ("packsys: Invalid number of arguments");
   endif
 
   ## check dflg
   if (nargin == 5)
     if (! isscalar (dflg))
       [m, n] = size(dflg);
-      error (["packsys: dflg (%d,%d) must be a scalar", m, n);
+      error ("packsys: dflg (%d,%d) must be a scalar", m, n);
     elseif (dflg != 0 && dflg != 1)
       error ("packsys: dflg=%g must be 0 or 1", dflg);
     endif
   else
     ## default condition
     dflg = 0;
   endif
 
diff --git a/scripts/control/system/ss.m b/scripts/control/system/ss.m
--- a/scripts/control/system/ss.m
+++ b/scripts/control/system/ss.m
@@ -209,18 +209,19 @@ function retsys = ss (a, b, c, d, tsam, 
   ## If dimensions are wrong, exit function
   if (m == -1)
     error ("a(%dx%d), b(%dx%d), c(%dx%d), d(%dx%d); incompatible",
 	   rows (a), columns (a), rows (b), columns (b),
 	   rows (c), columns (c), rows (d), columns (d));
   endif
 
   ## check for tsam input
-  if (nargin < 5) tsam = 0;
-  elseif (! (is_sample (tsam) || tsam == 0)))
+  if (nargin < 5)
+    tsam = 0;
+  elseif (! (is_sample (tsam) || tsam == 0))
     error ("tsam must be a nonnegative real scalar");
   endif
 
   ## check for continuous states
   if (nargin < 6 && tsam == 0)
     n = na;
   elseif (nargin < 6)
     n = 0;
diff --git a/scripts/control/system/sysappend.m b/scripts/control/system/sysappend.m
--- a/scripts/control/system/sysappend.m
+++ b/scripts/control/system/sysappend.m
@@ -103,17 +103,17 @@ function retsys = sysappend (sys, b, c, 
     make_d = 1;
   elseif (isempty(d))
     make_d = 1;
   else
     make_d = 0;
   endif
 
   if (make_d)
-    d = zeros (rows(c)+Ap, columns(b) + Am);
+    d = zeros (rows(c)+Ap, columns(b)+Am);
   endif
 
   ## Append new input(s) if any
   Bm = max (columns(d), columns(b)+Am);
   if (Bm != Am)
     ## construct new signal names
     if (nargin >= 6)   # new names were passed
 	if (! ischar (inname))
@@ -166,17 +166,17 @@ function retsys = sysappend (sys, b, c, 
     endif
 
     ## construct new yd entries
     if (nargin == 7)
       if (! isvector (yd))
 	error ("yd(%dx%d) must be a vector", rows (yd), columns (yd));
       elseif (rows (c) != length (yd) && rows (d) != length (yd))
 	error ("length(yd) = %d; c(%dx%d), d(%dx%d); mismatch",
-	       length (yd), rows (c), columns (c), rows (d), columns (d)));
+	       length (yd), rows (c), columns (c), rows (d), columns (d));
       endif
     else
       ## default yd values
       yd = ones (1, Bp) * ((Ats > 0) & (Ann == 0) & isempty (find (Ayd == 0)));
     endif
     Ayd = [vec(Ayd); vec(yd)];
 
     ## default c matrix
diff --git a/scripts/control/system/sysconnect.m b/scripts/control/system/sysconnect.m
--- a/scripts/control/system/sysconnect.m
+++ b/scripts/control/system/sysconnect.m
@@ -197,17 +197,17 @@ function sys = sysconnect (sys, output_l
   ## check cont state -> disc output -> cont state
   dyi = find (yd(p2:pp));
 
   ## disp("sysconnect: dyi=")
   ## dyi
   ## nc
   ## disp("/sysconnect");
 
-  if ((nc > 0 & find (dyi > 0))
+  if ((nc > 0) & find (dyi > 0))
     B2con = B2(1:nc,dyi);       # connection to cont states
     C2hd = C2h(dyi,1:nc);       # cont states -> outputs
   else
     B2con = C2hd = [];
   endif
 
   if (max (size (B2con)) & max (size (C2hd)))
     if (norm (B2con*C2hd))
diff --git a/scripts/control/system/sysprune.m b/scripts/control/system/sysprune.m
--- a/scripts/control/system/sysprune.m
+++ b/scripts/control/system/sysprune.m
@@ -124,17 +124,17 @@ function sys = sysprune (sys, output_idx
 
   lo = length (output_idx);
   li = length (input_idx);
   lst = length (state_idx);
 
   if (! isstruct (sys))
     error ("Asys must be a system data structure (see ss, tf, or zp)");
   elseif (pp < lo)
-    error("%d output_idx entries, system has only %d outputs", lo, pp]);
+    error("%d output_idx entries, system has only %d outputs", lo, pp);
   elseif (mm < li)
     error("%d input_idx entries, system has only %d inputs", li, mm);
   elseif (nn+nz < lst)
     error("%d state_idx entries, system has only %d states", lst, nn+nz);
   endif
 
   [aa, bb, cc, dd, tsam, nn, nz, stnam, innam, outnam, yd] = sys2ss (sys);
 
diff --git a/scripts/control/system/tf2ss.m b/scripts/control/system/tf2ss.m
--- a/scripts/control/system/tf2ss.m
+++ b/scripts/control/system/tf2ss.m
@@ -88,17 +88,17 @@ function [a, b, c, d] = tf2ss (num, den)
   endif
 
   ## force num, den to be row vectors
   num = vec (num)';
   den = vec (den)';
   nn = length (num);
   nd = length (den);
   if (nn > nd)
-    error ("deg(num)=%d > deg(den)= %d", nn, nd));
+    error ("deg(num)=%d > deg(den)= %d", nn, nd);
   endif
 
    ## Check sizes
    if (nd == 1)
      a = b = c = [];
      d = num(:,1) / den(1);
    else
     ## Pad num so that length(num) = length(den)
