# HG changeset patch
# User Torsten Lilge <ttl-octave@mailbox.org>
# Date 1552232435 -3600
#      Sun Mar 10 16:40:35 2019 +0100
# Node ID 9ec36417c262bde4c9aa30bb987aaaff5311c304
# Parent  07d0ab1f1ec33db1acd4cf01800d545ac8a80b90
debug step starts script if not already running in debug mode (bug #44728)

* file-editor-tab.cc (run_file): new additional parameter whether just
  run or step through the file

* file-editor-tab.h: run_file with new parameter

* file-editor.cc (check_actions): emit new signal for indicating the
  existence of tabs;
  (request_step_into_file): new slote for running a file for stepping
  through it;
  (add_file_editor_tab): update connection of signal fetab_run_file with
  slot run_file with new parameter;

* file-editor.h: updated fetab_run_file signal with new parameter,
  new signal editor_tabs_changed for changed number of tabs,
  new slot request_step_into_file

* main-window.cc (debug_step_over): check for debug state; if in debug mode
  just call dbstep or start stepping through the file otherwise;
  (construct): connect new signal for stepping through the current editor
  file with the related slot of the editor, connect new editor signal
  indicating the exsitence of tabs with the related slot in the main window;
  (editor_tabs_changed): new slot for editor signal on changed tabs;
  (handle_exit_debugger): only set debug step action to disabled if editor
  does not have tabs

* main-window.h: new signal for stepping through the current editor file,
  new slot for changed existence of edtior tabs,
  new class variable holding whether editor has tabs or not

diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -904,28 +904,31 @@ namespace octave
     QPrintDialog printDlg (printer, this);
 
     if (printDlg.exec () == QDialog::Accepted)
       printer->printRange (_edit_area);
 
     delete printer;
   }
 
-  void file_editor_tab::run_file (const QWidget *ID)
+  void file_editor_tab::run_file (const QWidget *ID, bool step_into)
   {
     if (ID != this)
       return;
 
     if (_edit_area->isModified () | ! valid_file_name ())
       {
         save_file (_file_name);  // save file dialog
         if (! valid_file_name ())
           return;   // still invalid filename: "save as" was cancelled
       }
 
+    if (step_into)
+      handle_request_add_breakpoint (1, QString ());
+
     QFileInfo info (_file_name);
     emit run_file_signal (info);
   }
 
   void file_editor_tab::context_run (const QWidget *ID)
   {
     if (ID != this)
       return;
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -89,17 +89,17 @@ namespace octave
     void context_help (const QWidget *ID, bool);
     void context_edit (const QWidget *ID);
     void check_modified_file (void);
     void save_file (const QWidget *ID);
     void save_file (const QWidget *ID, const QString& fileName,
                     bool remove_on_success);
     void save_file_as (const QWidget *ID);
     void print_file (const QWidget *ID);
-    void run_file (const QWidget *ID);
+    void run_file (const QWidget *ID, bool step_into = false);
     void context_run (const QWidget *ID);
     void toggle_bookmark (const QWidget *ID);
     void next_bookmark (const QWidget *ID);
     void previous_bookmark (const QWidget *ID);
     void remove_bookmark (const QWidget *ID);
 
     void toggle_breakpoint (const QWidget *ID);
     void next_breakpoint (const QWidget *ID);
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -189,16 +189,18 @@ namespace octave
     m_run_action->setEnabled (have_tabs);
 
     m_edit_function_action->setEnabled (have_tabs);
     m_save_action->setEnabled (have_tabs);
     m_save_as_action->setEnabled (have_tabs);
     m_close_action->setEnabled (have_tabs);
     m_close_all_action->setEnabled (have_tabs);
     m_close_others_action->setEnabled (have_tabs && m_tab_widget->count () > 1);
+
+    emit editor_tabs_changed_signal (have_tabs);
   }
 
   // empty_script determines whether we have to create an empty script
   // 1. At startup, when the editor has to be (really) visible
   //    (Here we can not use the visibility changed signal)
   // 2. When the editor becomes visible when octave is running
   void file_editor::empty_script (bool startup, bool visible)
   {
@@ -537,16 +539,21 @@ namespace octave
     emit fetab_save_file_as (m_tab_widget->currentWidget ());
   }
 
   void file_editor::request_run_file (bool)
   {
     emit fetab_run_file (m_tab_widget->currentWidget ());
   }
 
+  void file_editor::request_step_into_file ()
+  {
+    emit fetab_run_file (m_tab_widget->currentWidget (), true);
+  }
+
   void file_editor::request_context_run (bool)
   {
     emit fetab_context_run (m_tab_widget->currentWidget ());
   }
 
   void file_editor::request_toggle_bookmark (bool)
   {
     emit fetab_toggle_bookmark (m_tab_widget->currentWidget ());
@@ -2235,18 +2242,18 @@ namespace octave
              f, SLOT (save_file (const QWidget*)));
 
     connect (this, SIGNAL (fetab_save_file_as (const QWidget*)),
              f, SLOT (save_file_as (const QWidget*)));
 
     connect (this, SIGNAL (fetab_print_file (const QWidget*)),
              f, SLOT (print_file (const QWidget*)));
 
-    connect (this, SIGNAL (fetab_run_file (const QWidget*)),
-             f, SLOT (run_file (const QWidget*)));
+    connect (this, SIGNAL (fetab_run_file (const QWidget*, bool)),
+             f, SLOT (run_file (const QWidget*, bool)));
 
     connect (this, SIGNAL (fetab_context_run (const QWidget*)),
              f, SLOT (context_run (const QWidget*)));
 
     connect (this, SIGNAL (fetab_toggle_bookmark (const QWidget*)),
              f, SLOT (toggle_bookmark (const QWidget*)));
 
     connect (this, SIGNAL (fetab_next_bookmark (const QWidget*)),
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -131,17 +131,17 @@ namespace octave
     // No fetab_open, functionality in editor
     // No fetab_new, functionality in editor
     void fetab_context_help (const QWidget *ID, bool);
     void fetab_context_edit (const QWidget *ID);
     void fetab_check_modified_file (void);
     void fetab_save_file (const QWidget *ID);
     void fetab_save_file_as (const QWidget *ID);
     void fetab_print_file (const QWidget *ID);
-    void fetab_run_file (const QWidget *ID);
+    void fetab_run_file (const QWidget *ID, bool step_into = false);
     void fetab_context_run (const QWidget *ID);
     void fetab_toggle_bookmark (const QWidget *ID);
     void fetab_next_bookmark (const QWidget *ID);
     void fetab_previous_bookmark (const QWidget *ID);
     void fetab_remove_bookmark (const QWidget *ID);
     void fetab_toggle_breakpoint (const QWidget *ID);
     void fetab_next_breakpoint (const QWidget *ID);
     void fetab_previous_breakpoint (const QWidget *ID);
@@ -171,16 +171,18 @@ namespace octave
 
     void fetab_set_directory (const QString& dir);
     void fetab_recover_from_exit (void);
 
     void request_settings_dialog (const QString&);
     void request_open_file_external (const QString& file_name, int line);
     void file_loaded_signal (void);
 
+    void editor_tabs_changed_signal (bool);
+
   public slots:
 
     void focus (void);
     void set_focus (QWidget *fet);
     void enable_menu_shortcuts (bool);
     bool check_closing (void);
 
     void request_new_file (const QString& commands);
@@ -193,16 +195,17 @@ namespace octave
     void request_redo (bool);
     void request_cut (bool);
     void request_context_help (bool);
     void request_context_doc (bool);
     void request_context_edit (bool);
     void request_save_file (bool);
     void request_save_file_as (bool);
     void request_run_file (bool);
+    void request_step_into_file ();
     void request_context_run (bool);
     void request_toggle_bookmark (bool);
     void request_next_bookmark (bool);
     void request_previous_bookmark (bool);
     void request_remove_bookmark (bool);
 
     void request_move_match_brace (bool);
     void request_sel_match_brace (bool);
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -1006,17 +1006,17 @@ namespace octave
   }
 
   void main_window::handle_exit_debugger (void)
   {
     setWindowTitle ("Octave");
 
     m_debug_continue->setEnabled (false);
     m_debug_step_into->setEnabled (false);
-    m_debug_step_over->setEnabled (false);
+    m_debug_step_over->setEnabled (m_editor_has_tabs);
     m_debug_step_out->setEnabled (false);
     m_debug_quit->setEnabled (false);
 
 #if defined (HAVE_QSCINTILLA)
     m_editor_window->handle_exit_debug_mode ();
 #endif
   }
 
@@ -1030,19 +1030,28 @@ namespace octave
   void main_window::debug_step_into (void)
   {
     octave_cmd_debug *cmd = new octave_cmd_debug ("in", m_suppress_dbg_location);
     queue_cmd (cmd);
   }
 
   void main_window::debug_step_over (void)
   {
-    octave_cmd_debug *cmd
-      = new octave_cmd_debug ("step", m_suppress_dbg_location);
-    queue_cmd (cmd);
+    if (m_debug_quit->isEnabled ())
+      {
+        // We are in debug mode, just call dbstep
+        octave_cmd_debug *cmd
+          = new octave_cmd_debug ("step", m_suppress_dbg_location);
+        queue_cmd (cmd);
+      }
+    else
+      {
+        // Not in debug mode: "step into" the current editor file
+        emit step_into_file_signal ();
+      }
   }
 
   void main_window::debug_step_out (void)
   {
     octave_cmd_debug *cmd = new octave_cmd_debug ("out", m_suppress_dbg_location);
     queue_cmd (cmd);
   }
 
@@ -1763,16 +1772,22 @@ namespace octave
              this, SLOT (notice_settings (const QSettings *)));
 
     connect (this, SIGNAL (editor_focus_changed (bool)),
              this, SLOT (disable_menu_shortcuts (bool)));
 
     connect (this, SIGNAL (editor_focus_changed (bool)),
              m_editor_window, SLOT (enable_menu_shortcuts (bool)));
 
+    connect (this, SIGNAL (step_into_file_signal (void)),
+             m_editor_window, SLOT (request_step_into_file (void)));
+
+    connect (m_editor_window, SIGNAL (editor_tabs_changed_signal (bool)),
+             this, SLOT (editor_tabs_changed (bool)));
+
     connect (m_editor_window,
              SIGNAL (request_open_file_external (const QString&, int)),
              m_external_editor,
              SLOT (call_custom_editor (const QString&, int)));
 
     connect (m_external_editor,
              SIGNAL (request_settings_dialog (const QString&)),
              this, SLOT (process_settings_dialog_request (const QString&)));
@@ -2226,16 +2241,23 @@ namespace octave
     m_editor_window->debug_menu ()->addSeparator ();
 #endif
 
     m_debug_quit = construct_debug_menu_item (
                                               "db-stop", tr ("Quit Debug Mode"),
                                               SLOT (debug_quit (void)));
   }
 
+  void main_window::editor_tabs_changed (bool have_tabs)
+  {
+    // Set state of action which depend on the existance of editor tabs
+    m_editor_has_tabs = have_tabs;
+    m_debug_step_over->setEnabled (have_tabs);
+  }
+
   QAction * main_window::construct_window_menu_item (QMenu *p,
                                                      const QString& item,
                                                      bool checkable,
                                                      QWidget *widget)
   {
     QAction *action = p->addAction (QIcon (), item);
 
     addAction (action);  // important for shortcut context
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -118,16 +118,17 @@ namespace octave
     void active_dock_changed (octave_dock_widget *, octave_dock_widget *);
     void editor_focus_changed (bool);
 
     void settings_changed (const QSettings *);
     void init_terminal_size_signal (void);
     void new_file_signal (const QString&);
     void open_file_signal (const QString&);
     void open_file_signal (const QString& file, const QString& enc, int line);
+    void step_into_file_signal (void);
 
     void show_doc_signal (const QString&);
     void register_doc_signal (const QString&);
     void unregister_doc_signal (const QString&);
 
     void insert_debugger_pointer_signal (const QString& file, int line);
     void delete_debugger_pointer_signal (const QString& file, int line);
     void update_breakpoint_marker_signal (bool insert, const QString& file,
@@ -189,16 +190,17 @@ namespace octave
 
     void handle_enter_debugger (void);
     void handle_exit_debugger (void);
     void debug_continue (void);
     void debug_step_into (void);
     void debug_step_over (void);
     void debug_step_out (void);
     void debug_quit (void);
+    void editor_tabs_changed (bool);
 
     void request_open_file (void);
     void request_new_script (const QString& commands = QString ());
     void request_new_function (bool triggered = true);
     void handle_edit_mfile_request (const QString& name, const QString& file,
                                     const QString& curr_dir, int line);
 
     void handle_insert_debugger_pointer_request (const QString& file, int line);
@@ -450,16 +452,17 @@ namespace octave
     //! related callbacks.
 
     octave_command_queue m_cmd_queue;
 
     //! Some class global flags.
     //!@{
     bool m_prevent_readline_conflicts;
     bool m_suppress_dbg_location;
+    bool m_editor_has_tabs;
 
     //! Flag for closing the whole application.
 
     bool m_closing;
     //!@}
 
     QString m_file_encoding;
   };
