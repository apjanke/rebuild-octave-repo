# HG changeset patch
# User jwe
# Date 1098120891 0
#      Mon Oct 18 17:34:51 2004 +0000
# Node ID 36f954d8d53af07a1f289302c5b0529d6dcb7d52
# Parent  ea74d76ff607e49e702fd5d78c97babc16b9a063
[project @ 2004-10-18 17:34:51 by jwe]

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -107,16 +107,20 @@ Array<T>::squeeze (void) const
 	      break;
 
 	    default:
 	      new_dimensions.resize (k);
 	      break;
 	    }
 	}
 
+      // XXX FIXME XXX -- it would be better if we did not have to do
+      // this, so we could share the data while still having different
+      // dimension vectors.
+
       retval.make_unique ();
 
       retval.dimensions = new_dimensions;
     }
 
   return retval;
 }
 
@@ -2535,26 +2539,32 @@ assign2 (Array<LT>& lhs, const Array<RT>
 {
   int retval = 1;
 
   int n_idx = lhs.index_count ();
 
   int lhs_nr = lhs.rows ();
   int lhs_nc = lhs.cols ();
 
-  int rhs_nr = rhs.rows ();
-  int rhs_nc = rhs.cols ();
-
-  if (rhs.length () > 2)
+  Array<RT> xrhs = rhs;
+
+  int rhs_nr = xrhs.rows ();
+  int rhs_nc = xrhs.cols ();
+
+  if (xrhs.ndims () > 2)
     {
-      dim_vector dv_tmp = rhs.squeeze().dims ();
+      xrhs = xrhs.squeeze ();
+
+      dim_vector dv_tmp = xrhs.dims ();
 
       switch (dv_tmp.length ())
 	{
 	case 1:
+	  // XXX FIXME XXX -- this case should be unnecessary, because
+	  // squeeze should always return an object with 2 dimensions.
 	  if (rhs_nr == 1)
 	    rhs_nc = dv_tmp.elem (0);
 	  break;
 
 	case 2:
 	  rhs_nr = dv_tmp.elem (0);
 	  rhs_nc = dv_tmp.elem (1);
 	  break;
@@ -2604,17 +2614,17 @@ assign2 (Array<LT>& lhs, const Array<RT>
 		{
 		  // No need to do anything if either of the indices
 		  // are empty.
 
 		  if (n > 0 && m > 0)
 		    {
 		      MAYBE_RESIZE_LHS;
 
-		      RT scalar = rhs.elem (0, 0);
+		      RT scalar = xrhs.elem (0, 0);
 
 		      for (int j = 0; j < m; j++)
 			{
 			  int jj = idx_j.elem (j);
 			  for (int i = 0; i < n; i++)
 			    {
 			      int ii = idx_i.elem (i);
 			      lhs.elem (ii, jj) = scalar;
@@ -2629,17 +2639,17 @@ assign2 (Array<LT>& lhs, const Array<RT>
 		      MAYBE_RESIZE_LHS;
 
 		      for (int j = 0; j < m; j++)
 			{
 			  int jj = idx_j.elem (j);
 			  for (int i = 0; i < n; i++)
 			    {
 			      int ii = idx_i.elem (i);
-			      lhs.elem (ii, jj) = rhs.elem (i, j);
+			      lhs.elem (ii, jj) = xrhs.elem (i, j);
 			    }
 			}
 		    }
 		}
 	      else if (n == 0 && m == 0)
 		{
 		  if (! ((rhs_nr == 1 && rhs_nc == 1)
 			 || (rhs_nr == 0 || rhs_nc == 0)))
@@ -2699,17 +2709,17 @@ assign2 (Array<LT>& lhs, const Array<RT>
 			  int idx_nc = idx_i.orig_columns ();
 
 			  if (! (rhs_nr == idx_nr && rhs_nc == idx_nc))
 			    (*current_liboctave_warning_handler)
 			      ("A(I) = X: X does not have same shape as I");
 			}
 		    }
 
-		  if (assign1 ((Array<LT>&) lhs, (Array<RT>&) rhs, rfv))
+		  if (assign1 (lhs, xrhs, rfv))
 		    {
 		      int len = lhs.length ();
 
 		      if (len > 0)
 			{
 			  // The following behavior is much simplified
 			  // over previous versions of Octave.  It
 			  // seems to be compatible with Matlab.
@@ -2730,17 +2740,17 @@ assign2 (Array<LT>& lhs, const Array<RT>
 	  idx_i.freeze (lhs_nc, "vector", true, liboctave_wrore_flag);
 
 	  if (idx_i)
 	    {
 	      if (rhs_nr == 0 && rhs_nc == 0)
 		lhs.maybe_delete_elements (idx_i);
 	      else
 		{
-		  if (assign1 ((Array<LT>&) lhs, (Array<RT>&) rhs, rfv))
+		  if (assign1 (lhs, xrhs, rfv))
 		    lhs.dimensions = dim_vector (1, lhs.length ());
 		  else
 		    retval = 0;
 		}
 	    }
 	  // idx_vector::freeze() printed an error message for us.
 	}
       else if (lhs_nc == 1)
@@ -2748,17 +2758,17 @@ assign2 (Array<LT>& lhs, const Array<RT>
 	  idx_i.freeze (lhs_nr, "vector", true, liboctave_wrore_flag);
 
 	  if (idx_i)
 	    {
 	      if (rhs_nr == 0 && rhs_nc == 0)
 		lhs.maybe_delete_elements (idx_i);
 	      else
 		{
-		  if (assign1 ((Array<LT>&) lhs, (Array<RT>&) rhs, rfv))
+		  if (assign1 (lhs, xrhs, rfv))
 		    lhs.dimensions = dim_vector (lhs.length (), 1);
 		  else
 		    retval = 0;
 		}
 	    }
 	  // idx_vector::freeze() printed an error message for us.
 	}
       else
@@ -2789,17 +2799,17 @@ assign2 (Array<LT>& lhs, const Array<RT>
 		  int k = 0;
 		  for (int j = 0; j < rhs_nc; j++)
 		    {
 		      for (int i = 0; i < rhs_nr; i++)
 			{
 			  int ii = idx_i.elem (k++);
 			  int fr = ii % lhs_nr;
 			  int fc = (ii - fr) / lhs_nr;
-			  lhs.elem (fr, fc) = rhs.elem (i, j);
+			  lhs.elem (fr, fc) = xrhs.elem (i, j);
 			}
 		    }
 		}
 	      else if (rhs_nr == 1 && rhs_nc == 1)
 		{
 		  RT scalar = rhs.elem (0, 0);
 
 		  for (int i = 0; i < len; i++)
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2004-10-18  John W. Eaton  <jwe@octave.org>
+
+	* Array.cc (assign2): Save result of squeeze operation.
+	Squeeze if ndims is > 2, not if length of RHS vector is > 2.
+
 2004-10-11  David Bateman <dbateman@free.fr>
 
 	* oct-fftw.cc (class octave_fftw_planner): Add inplace[2] to
 	flag whether transform in- or out-of-place.
 	(octave_fftw_planner::octave_fftw_planner): Initialize it.
 	(octave_fftw_planner::create_plan): Use it.
 
 2004-09-24  John W. Eaton  <jwe@octave.org>
