# HG changeset patch
# User Guillaume Flandin
# Date 1499707875 25200
#      Mon Jul 10 10:31:15 2017 -0700
# Node ID b85a46745298ca28deda53410801193e3a4e3cb8
# Parent  f891afece80dfc433f8bc3bf6dcad0541abed58b
__isequal__.m: Add extra specialization for cellstr inputs for performance (bug #51403).

* __isequal__.m: Add extra specialization for cellstr inputs.
Move cell() command out of while loop for performance.

diff --git a/scripts/general/private/__isequal__.m b/scripts/general/private/__isequal__.m
--- a/scripts/general/private/__isequal__.m
+++ b/scripts/general/private/__isequal__.m
@@ -112,24 +112,36 @@ function t = __isequal__ (nans_compare_e
         args(1:2) = {nans_compare_equal, {x.(fn_x{idx})}};
         for argn = 1:l_v
           args{argn+2} = {varargin{argn}.(fn_x{idx})};
         endfor
         ## Minimize function calls by calling for all the arguments at once.
         t = __isequal__ (args{:});
       endwhile
 
+    elseif (iscellstr (x) && all (cellfun (@iscellstr, varargin)))
+      ## Check that each element of a cellstr is equal.
+      l_x = numel (x);
+      idx = 0;
+      ## FIXME: It would be faster to use strcmp on whole cellstr arrays,
+      ## rather than element-by-element, but bug #51412 needs to be fixed.
+      while (t && idx < l_x)
+        idx += 1;
+        t = all (strcmp (x{idx}, [cellindexmat(varargin, idx){:}]));
+      endwhile
+
     elseif (iscell (x))
       ## Check that each element of a cell is equal.
       l_x = numel (x);
       idx = 0;
+      args = cell (1, 2+l_v);
+      args{1} = nans_compare_equal;
       while (t && idx < l_x)
         idx += 1;
-        args = cell (1, 2+l_v);
-        args(1:2) = {nans_compare_equal, x{idx}};
+        args{2} = x{idx};
         args(3:end) = [cellindexmat(varargin, idx){:}];
 
         t = __isequal__ (args{:});
       endwhile
 
     elseif (ischar (x) && all (cellfun ("isclass", varargin, "char")))
       ## Sizes are equal already, so we can just make everything into a
       ## row and test the rows.
