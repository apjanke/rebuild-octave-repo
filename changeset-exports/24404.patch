# HG changeset patch
# User Rik <rik@octave.org>
# Date 1513128281 28800
#      Tue Dec 12 17:24:41 2017 -0800
# Node ID 9213b8166af9ba2d4895cca3f315e24a28df7e41
# Parent  b9462090773afb7cd52a8a792423f6dae7b92843
Reimplement close() for figures for better Matlab compatibility (bug #52621).
Make the figure that is about to be closed the current figure before calling
the closerequestfcn() callback.

* close.m: Add additional calling form of 'close (h, "hidden")' to docstring.
Change documentation to note that figure to be closed is made the current
figure before calling closerequestfcn().  Change code to respect "HandleVisibility"
property and not close hidden figures unless "hidden" or "force" is given.  Add
for loop to run over each figure, set it to current figure, and then call
closerequestfcn() callback.  Add BIST tests for various modes.

* closereq.m: Remove references to gcbf(), close() is guaranteed to
set current figure.  Add empty BIST test to mark file as being tested; Tests
are in close.m

diff --git a/scripts/plot/util/close.m b/scripts/plot/util/close.m
--- a/scripts/plot/util/close.m
+++ b/scripts/plot/util/close.m
@@ -15,110 +15,168 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {} {} close
 ## @deftypefnx {} {} close @var{h}
 ## @deftypefnx {} {} close (@var{h})
+## @deftypefnx {} {} close (@var{h}, "hidden")
 ## @deftypefnx {} {} close (@var{h}, "force")
 ## @deftypefnx {} {} close all
 ## @deftypefnx {} {} close all hidden
 ## @deftypefnx {} {} close all force
 ## Close figure window(s).
 ##
 ## When called with no arguments, close the current figure.  This is equivalent
 ## to @code{close (gcf)}.  If the input @var{h} is a graphic handle, or vector
 ## of graphics handles, then close each figure in @var{h}.
 ##
 ## If the argument @qcode{"all"} is given then all figures with visible handles
 ## (HandleVisibility = @qcode{"on"}) are closed.
 ##
-## If the argument @qcode{"all hidden"} is given then all figures, including
-## hidden ones, are closed.
+## If the argument @qcode{"hidden"} is given then figures, including hidden
+## ones, are closed.
 ##
 ## If the argument @qcode{"force"} is given then figures are closed even when
 ## @qcode{"closerequestfcn"} has been altered to prevent closing the window.
 ##
-## Implementation Note: @code{close} operates by calling the function specified
-## by the @qcode{"closerequestfcn"} property for each figure.  By default, the
-## function @code{closereq} is used.  It is possible that the function invoked
-## will delay or abort removing the figure.  To remove a figure without
-## executing any callback functions use @code{delete}.  When writing a callback
-## function to close a window do not use @code{close} to avoid recursion.
+## Implementation Note: @code{close} operates by making the handle @var{h} the
+## current figure, and then calling the function specified by the
+## @qcode{"closerequestfcn"} property of the figure.  By default, the function
+## @code{closereq} is used.  It is possible that the function invoked will
+## delay or abort removing the figure.  To remove a figure without executing
+## any callback functions use @code{delete}.  When writing a callback function
+## to close a window do not use @code{close} to avoid recursion.
 ##
 ## @seealso{closereq, delete}
 ## @end deftypefn
 
-## Author: jwe
-## 2010-05-02   PBig    allow empty argument
-
 function retval = close (arg1, arg2)
 
   figs = [];
 
   if (nargin > 2)
     print_usage ();
   elseif (nargin == 0)
     ## Close current figure.
     ## Can't use gcf because it opens a new plot window if one does not exist.
     figs = get (0, "currentfigure");
     if (figs == 0)  # don't close root figure
       figs = [];
     endif
   elseif (nargin == 1)
     if (ischar (arg1) && strcmpi (arg1, "all"))
-      figs = (get (0, "children"))';
+      figs = get (0, "children");
       figs = figs(isfigure (figs));
     elseif (any (isfigure (arg1)))
       figs = arg1(isfigure (arg1));
+      figs = figs(strcmp ("on", get (figs, "handlevisibility")));
     elseif (isempty (arg1))
       figs = [];  # Silently accept null argument for Matlab compatibility
     else
       error ('close: first argument must be "all" or a figure handle');
     endif
   elseif (ischar (arg2)
           && (strcmpi (arg2, "hidden") || strcmpi (arg2, "force")))
     if (ischar (arg1) && strcmpi (arg1, "all"))
-      figs = (allchild (0))';
+      figs = allchild (0);
       figs = figs(isfigure (figs));
     elseif (any (isfigure (arg1)))
       figs = arg1(isfigure (arg1));
     elseif (isempty (arg1))
       figs = [];  # Silently accept null argument for Matlab compatibility
     else
       error ('close: first argument must be "all" or a figure handle');
     endif
     if (strcmpi (arg2, "force"))
       delete (figs);
       return;
     endif
+    ## Unhide hidden figures that are about to be deleted
+    set (figs, "handlevisibility", "on");
   else
     error ('close: second argument must be "hidden" or "force"');
   endif
 
-  __go_execute_callback__ (figs, "closerequestfcn");
+  ## Save and restore current figure
+  cf = get (0, "currentfigure");
+
+  for hfig = figs(:).'
+    set (0, "currentfigure", hfig);  # make figure current
+    __go_execute_callback__ (hfig, "closerequestfcn");
+  endfor
+
+  if (isfigure (cf))
+    set (0, "currentfigure", cf);
+  endif
 
   if (nargout > 0)
     retval = 1;
   endif
 
 endfunction
 
 
 %!test
+%! ## Test closing gcf
+%! hf = figure ("visible", "off");
+%! unwind_protect
+%!   close ();
+%!   assert (! isfigure (hf));
+%! unwind_protect_cleanup
+%!   if (isfigure (hf))
+%!     delete (hf);
+%!   endif
+%! end_unwind_protect
+
+%!test
+%! ## Test closing specified figure handle
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   close (hf);
-%!   objs = findobj ("type", "figure");
-%!   assert (! any (objs == hf));
+%!   assert (! isfigure (hf));
 %! unwind_protect_cleanup
 %!   if (isfigure (hf))
-%!     close (hf);
+%!     delete (hf);
+%!   endif
+%! end_unwind_protect
+
+%!test
+%! ## Test closing hidden figures
+%! hf1 = figure ("visible", "off", "handlevisibility", "off");
+%! hf2 = figure ("visible", "off");
+%! unwind_protect
+%!   close (hf1);
+%!   assert (isfigure (hf1));    # figure not deleted
+%!   close ([hf1 hf2]);
+%!   assert (isfigure (hf1) && ! isfigure (hf2));
+%!   close (hf1, "hidden");
+%!   assert (! isfigure (hf1));  # figure finally deleted
+%! unwind_protect_cleanup
+%!   if (isfigure (hf1))
+%!     delete (hf1);
+%!   endif
+%!   if (isfigure (hf2))
+%!     delete (hf2);
+%!   endif
+%! end_unwind_protect
+
+%!test
+%! ## Test forcing the close of a figure
+%! hf = figure ("visible", "off", "closerequestfcn", []);
+%! unwind_protect
+%!   close (hf);
+%!   assert (isfigure (hf));    # figure not deleted
+%!   close (hf, "force");
+%!   assert (! isfigure (hf));  # figure finally deleted
+%! unwind_protect_cleanup
+%!   if (isfigure (hf))
+%!     delete (hf);
 %!   endif
 %! end_unwind_protect
 
 ## Test input validation
 %!error close (1,2,3)
 %!error <first argument must be "all" or a figure> close ({"all"})
 %!error <first argument must be "all" or a figure> close ("all_and_more")
 %!error <first argument must be "all" or a figure> close (-1)
diff --git a/scripts/plot/util/closereq.m b/scripts/plot/util/closereq.m
--- a/scripts/plot/util/closereq.m
+++ b/scripts/plot/util/closereq.m
@@ -28,18 +28,19 @@
 ## Author: jwe
 
 function closereq ()
 
   if (nargin != 0)
     print_usage ();
   endif
 
-  cf = gcbf ();
-  if (isempty (cf))
-    warning ("closereq: calling closereq from octave prompt is not supported, use 'close' instead");
-    cf = get (0, "currentfigure");
-  endif
-  if (! isempty (cf) && isfigure (cf))
+  ## Get current figure, but don't use gcf to avoid creating a new figure.
+  cf = get (0, "currentfigure");
+  if (isfigure (cf))
     delete (cf);
   endif
 
 endfunction
+
+
+## No BIST tests required.  Testing done in close.m.
+%!assert (1)
