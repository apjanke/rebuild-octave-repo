# HG changeset patch
# User jwe
# Date 1076029185 0
#      Fri Feb 06 00:59:45 2004 +0000
# Node ID 2527c2fd4345dcbf3d11e7963b7e2dc5f7e8b140
# Parent  e44d0ac643a544ac85146a9d88e78ba5f5eb5302
[project @ 2004-02-06 00:59:45 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2004-02-05  Petter Risholm  <risholm@stud.ntnu.no>
+
+	* ov-base-mat.cc (octave_base_matrix<MT>::do_index_op):
+	Don't fail if number of indices is greater than 2.
+
 2004-02-05  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* data.cc (Fsize): Update for N-d objects.
 
 	* ls-mat5.cc (read_mat5_binary_element): Force conversion.
 
 	* ov-base.cc (octave_base_value::char_matrix_value):
 	Pass force arg to convert_to_str.
diff --git a/src/ov-base-mat.cc b/src/ov-base-mat.cc
--- a/src/ov-base-mat.cc
+++ b/src/ov-base-mat.cc
@@ -116,55 +116,54 @@ octave_base_matrix<MT>::subsasgn (const 
 
 template <class MT>
 octave_value
 octave_base_matrix<MT>::do_index_op (const octave_value_list& idx,
 				     int resize_ok)
 {
   octave_value retval;
 
-  int len = idx.length ();
+  int n_idx = idx.length ();
 
-  switch (len)
-    {
-    case 2:
-      {
-	int nd = matrix.ndims ();
+  int nd = matrix.ndims ();
 
-	if (nd == 2)
-	  {
-	    idx_vector i = idx (0).index_vector ();
-	    idx_vector j = idx (1).index_vector ();
-
-	    retval = MT (matrix.index (i, j, resize_ok,
-				       MT::resize_fill_value ()));
-	  }
-	else
-	  error ("invalid number of indices (= 2) for %d-dimensional array",
-		 nd);
-      }
+  switch (n_idx)
+    {
+    case 0:
+      error ("invalid number of indices (= 0) for %d-dimensional array", nd);
       break;
 
     case 1:
       {
 	idx_vector i = idx (0).index_vector ();
 
 	retval = MT (matrix.index (i, resize_ok, MT::resize_fill_value ()));
       }
       break;
 
     default:
       {
-	Array<idx_vector> idx_vec (len);
+	if (n_idx == 2 && nd == 2)
+	  {
+	    idx_vector i = idx (0).index_vector ();
+	    idx_vector j = idx (1).index_vector ();
 
-	for (int i = 0; i < len; i++)
-	  idx_vec(i) = idx(i).index_vector ();
+	    retval = MT (matrix.index (i, j, resize_ok,
+				       MT::resize_fill_value ()));
+	  }
+	else
+	  {
+	    Array<idx_vector> idx_vec (n_idx);
 
-	retval = MT (matrix.index (idx_vec, resize_ok,
-				   MT::resize_fill_value ()));
+	    for (int i = 0; i < n_idx; i++)
+	      idx_vec(i) = idx(i).index_vector ();
+
+	    retval = MT (matrix.index (idx_vec, resize_ok,
+				       MT::resize_fill_value ()));
+	  }
       }
       break;
     }
 
   return retval;
 }
 
 template <class MT>
