# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1420218468 18000
#      Fri Jan 02 12:07:48 2015 -0500
# Node ID 572b9bd43e922ea58a24113840ef060413995c49
# Parent  22e2f11424b3b95196aa45bb6089aa7a22b9bf7d
use 0 instead of NULL

* audiodevinfo.cc: Use 0 instead of NULL.

diff --git a/libinterp/dldfcn/audiodevinfo.cc b/libinterp/dldfcn/audiodevinfo.cc
--- a/libinterp/dldfcn/audiodevinfo.cc
+++ b/libinterp/dldfcn/audiodevinfo.cc
@@ -278,35 +278,35 @@ or recording using those parameters.\n\
             stream_parameters.sampleFormat = format;
           else
             {
               error ("audiodevinfo: no such bits per sample format");
               return retval;
             }
           stream_parameters.suggestedLatency =
               Pa_GetDeviceInfo (i)->defaultLowInputLatency;
-          stream_parameters.hostApiSpecificStreamInfo = NULL;
+          stream_parameters.hostApiSpecificStreamInfo = 0;
           if (io == 0)
             {
               if (Pa_GetDeviceInfo (i)->maxOutputChannels < chans)
                 continue;
 
-              err = Pa_IsFormatSupported (NULL, &stream_parameters, rate);
+              err = Pa_IsFormatSupported (0, &stream_parameters, rate);
               if (err == paFormatIsSupported)
                 {
                   retval = i;
                   return retval;
                 }
             }
           else if (io == 1)
             {
               if (Pa_GetDeviceInfo (i)->maxInputChannels < chans)
                 continue;
 
-              err = Pa_IsFormatSupported (&stream_parameters, NULL, rate);
+              err = Pa_IsFormatSupported (&stream_parameters, 0, rate);
               if (err == paFormatIsSupported)
                 {
                   retval = i;
                   return retval;
                 }
             }
         }
       retval = -1;
@@ -327,39 +327,39 @@ or recording using those parameters.\n\
         stream_parameters.sampleFormat = format;
       else
         {
           error ("audiodevinfo: no such bits per sample format");
           return retval;
         }
       stream_parameters.suggestedLatency =
         Pa_GetDeviceInfo (id)->defaultLowInputLatency;
-      stream_parameters.hostApiSpecificStreamInfo = NULL;
+      stream_parameters.hostApiSpecificStreamInfo = 0;
       if (io == 0)
         {
           if (Pa_GetDeviceInfo (id)->maxOutputChannels < chans)
             {
               retval = 0;
               return retval;
             }
-          err = Pa_IsFormatSupported (NULL, &stream_parameters, rate);
+          err = Pa_IsFormatSupported (0, &stream_parameters, rate);
           if (err == paFormatIsSupported)
             {
               retval = 1;
               return retval;
             }
         }
       else if (io == 1)
         {
           if (Pa_GetDeviceInfo (id)->maxInputChannels < chans)
             {
               retval = 0;
               return retval;
             }
-          err = Pa_IsFormatSupported (&stream_parameters, NULL, rate);
+          err = Pa_IsFormatSupported (&stream_parameters, 0, rate);
           if (err == paFormatIsSupported)
             {
               retval = 1;
               return retval;
             }
         }
       else
         {
@@ -698,17 +698,17 @@ audioplayer::init_fn (void)
     device = Pa_GetDefaultOutputDevice ();
   else
     device = get_id ();
 
   output_parameters.device = device;
   output_parameters.channelCount = 2;
   output_parameters.sampleFormat = bits_to_format (get_nbits ());
   output_parameters.suggestedLatency = Pa_GetDeviceInfo (device)->defaultHighOutputLatency;
-  output_parameters.hostApiSpecificStreamInfo = NULL;
+  output_parameters.hostApiSpecificStreamInfo = 0;
 }
 
 void
 audioplayer::init (void)
 {
   PaError err;
 
   // Both of these variables are unused.  Should they be
@@ -746,17 +746,17 @@ audioplayer::init (void)
   else if (type == INT8)
     output_parameters.sampleFormat = paInt8;
   else if (type == UINT8)
     output_parameters.sampleFormat = paUInt8;
   else if (type == INT16)
     output_parameters.sampleFormat = paInt16;
 
   output_parameters.suggestedLatency = Pa_GetDeviceInfo (device)->defaultHighOutputLatency;
-  output_parameters.hostApiSpecificStreamInfo = NULL;
+  output_parameters.hostApiSpecificStreamInfo = 0;
 }
 
 void
 audioplayer::set_y (const octave_value& y_arg)
 {
   if (y_arg.is_int8_type ())
     type = INT8;
   else if (y_arg.is_uint8_type ())
@@ -917,17 +917,18 @@ audioplayer::get_userdata (void)
 void
 audioplayer::playblocking (void)
 {
   if (get_stream ())
     stop ();
 
   PaError err;
   uint32_t buffer[BUFFER_SIZE * 2];
-  err = Pa_OpenStream (&stream, NULL, &(output_parameters), get_fs (), BUFFER_SIZE, paClipOff, NULL, NULL);
+  err = Pa_OpenStream (&stream, 0, &(output_parameters), get_fs (),
+                       BUFFER_SIZE, paClipOff, 0, 0);
   if (err != paNoError)
     {
       error ("audioplayer: Error opening audio playback stream");
       return;
     }
 
   err = Pa_StartStream (stream);
   if (err != paNoError)
@@ -971,21 +972,21 @@ audioplayer::playblocking (void)
 void
 audioplayer::play (void)
 {
   if (get_stream ())
     stop ();
 
   PaError err;
   if (octave_callback_function != 0)
-    err = Pa_OpenStream (&stream, NULL, &(output_parameters),
+    err = Pa_OpenStream (&stream, 0, &(output_parameters),
                          get_fs (), BUFFER_SIZE, paClipOff,
                          octave_play_callback, this);
   else
-    err = Pa_OpenStream (&stream, NULL, &(output_parameters),
+    err = Pa_OpenStream (&stream, 0, &(output_parameters),
                          get_fs (), BUFFER_SIZE, paClipOff,
                          portaudio_play_callback, this);
 
   if (err != paNoError)
     {
       error ("audioplayer: Error opening audio playback stream");
       return;
     }
@@ -1316,17 +1317,17 @@ audiorecorder::init (void)
     device = Pa_GetDefaultInputDevice ();
   else
     device = get_id ();
 
   input_parameters.device = device;
   input_parameters.channelCount = get_channels ();
   input_parameters.sampleFormat = bits_to_format (get_nbits ());
   input_parameters.suggestedLatency = Pa_GetDeviceInfo (device)->defaultHighInputLatency;
-  input_parameters.hostApiSpecificStreamInfo = NULL;
+  input_parameters.hostApiSpecificStreamInfo = 0;
 }
 
 void
 audiorecorder::set_fs (int fs_arg)
 {
   fs = fs_arg;
 }
 
@@ -1485,23 +1486,23 @@ audiorecorder::record (void)
   if (get_stream ())
     stop ();
 
   left.clear ();
   right.clear ();
   PaError err;
   if (octave_callback_function != 0)
     {
-      err = Pa_OpenStream (&stream, &(input_parameters), NULL,
+      err = Pa_OpenStream (&stream, &(input_parameters), 0,
                            get_fs (), BUFFER_SIZE, paClipOff,
                            octave_record_callback, this);
     }
   else
     {
-      err = Pa_OpenStream (&stream, &(input_parameters), NULL,
+      err = Pa_OpenStream (&stream, &(input_parameters), 0,
                            get_fs (), BUFFER_SIZE, paClipOff,
                            portaudio_record_callback, this);
     }
   if (err != paNoError)
     {
       error ("audiorecorder: Error opening audio recording stream");
       return;
     }
@@ -1518,18 +1519,18 @@ audiorecorder::recordblocking (float sec
 {
   if (get_stream ())
     stop ();
 
   left.clear ();
   right.clear ();
 
   PaError err;
-  err = Pa_OpenStream (&stream, &(input_parameters), NULL,
-                       get_fs (), BUFFER_SIZE, paClipOff, NULL, this);
+  err = Pa_OpenStream (&stream, &(input_parameters), 0,
+                       get_fs (), BUFFER_SIZE, paClipOff, 0, this);
   if (err != paNoError)
     {
       error ("audiorecorder: Error opening audio recording stream");
       return;
     }
 
   err = Pa_StartStream (stream);
   if (err != paNoError)
@@ -1539,19 +1540,19 @@ audiorecorder::recordblocking (float sec
     }
 
   unsigned int frames = seconds * get_fs ();
   uint8_t buffer[BUFFER_SIZE * 2 * 3];
   for (unsigned long i = 0; i < frames / BUFFER_SIZE; i++)
     {
       Pa_ReadStream (get_stream (), buffer, BUFFER_SIZE);
       if (octave_callback_function != 0)
-        octave_record_callback (buffer, NULL, BUFFER_SIZE, 0, 0, this);
+        octave_record_callback (buffer, 0, BUFFER_SIZE, 0, 0, this);
       else
-        portaudio_record_callback (buffer, NULL, BUFFER_SIZE, 0, 0, this);
+        portaudio_record_callback (buffer, 0, BUFFER_SIZE, 0, 0, this);
     }
 }
 
 void
 audiorecorder::pause (void)
 {
   if (get_stream () == 0)
     return;
