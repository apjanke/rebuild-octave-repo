# HG changeset patch
# User jwe
# Date 1066271516 0
#      Thu Oct 16 02:31:56 2003 +0000
# Node ID e8355721a809316c88d117168c87ed3856c18326
# Parent  ed2990fab58f193ba057395ef4d251a8718fad44
[project @ 2003-10-16 02:31:56 by jwe]

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -2146,29 +2146,35 @@ assign2 (Array<LT>& lhs, const Array<RT>
       if (idx_i && idx_j)
 	{
 	  if (rhs_nr == 0 && rhs_nc == 0)
 	    {
 	      lhs.maybe_delete_elements (idx_i, idx_j);
 	    }
 	  else
 	    {
-	      if (rhs_nr == 1 && rhs_nc == 1 && n > 0 && m > 0)
+	      if (rhs_nr == 1 && rhs_nc == 1 && n >= 0 && m >= 0)
 		{
-		  MAYBE_RESIZE_LHS;
-
-		  RT scalar = rhs.elem (0, 0);
-
-		  for (int j = 0; j < m; j++)
+		  // No need to do anything if either of the indices
+		  // are empty.
+
+		  if (n > 0 && m > 0)
 		    {
-		      int jj = idx_j.elem (j);
-		      for (int i = 0; i < n; i++)
+		      MAYBE_RESIZE_LHS;
+
+		      RT scalar = rhs.elem (0, 0);
+
+		      for (int j = 0; j < m; j++)
 			{
-			  int ii = idx_i.elem (i);
-			  lhs.elem (ii, jj) = scalar;
+			  int jj = idx_j.elem (j);
+			  for (int i = 0; i < n; i++)
+			    {
+			      int ii = idx_i.elem (i);
+			      lhs.elem (ii, jj) = scalar;
+			    }
 			}
 		    }
 		}
 	      else if (n == rhs_nr && m == rhs_nc)
 		{
 		  if (n > 0 && m > 0)
 		    {
 		      MAYBE_RESIZE_LHS;
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2003-10-15  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* Array.cc (assign2): No error (but don't do anything either) for
+	expressions like x([],j) = scalar.
+
 2003-10-09  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Array.cc (assignN): Allow lhs(:) = scalar.
 
 	* CNDArray.cc (ComplexNDArray::increment_index): New function.
 	* dNDArray.cc (NDArray::increment_index): Likewise.
 	* boolNDArray.cc (boolNDArray::increment_index): Likewise.
 	* chNDArray.cc (charNDArray::increment_index): Likewise.
