# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1444472497 -7200
#      Sat Oct 10 12:21:37 2015 +0200
# Node ID 46edfbd31ad756bcf8b95e014c20f1c67207ca6a
# Parent  3af34e1ef330fc572388339cc83384e111ad10f4
Fix execution of "windowbuttonmotionfcn" with uipanels (bug #46151)

* Canvas.cc (Canvas::canvasMouseMoveEvent): decide here to update the currentpoint and run "windowbuttonmotionfcn" if the latter is not empty
* Canvas.h: remove unused "enableCurrentPointUpdates" method and "m_updateCurrentPoint" attribute
* Figure.h: declare a new private method "enableMouseTracking"
* Figure.cc (Figure::Figure): use "enableMouseTracking" instead of "update" on "windowbuttonmotionfcn".
* Figure.cc (Figure::update): mouse tracking is now enabled unconditionally so remove unused case "windowbuttonmotionfcn".
*Figure.cc(Figure::eventNotifyAfter): enable mouse tracking on new children widgets.

diff --git a/libgui/graphics/Canvas.cc b/libgui/graphics/Canvas.cc
--- a/libgui/graphics/Canvas.cc
+++ b/libgui/graphics/Canvas.cc
@@ -502,27 +502,31 @@ Canvas::canvasMouseMoveEvent (QMouseEven
             // Force immediate redraw
             redraw (true);
           }
 
         default:
           break;
         }
     }
-  else if (m_mouseMode == NoMode && m_updateCurrentPoint)
+  else if (m_mouseMode == NoMode)
     {
       graphics_object obj = gh_manager::get_object (m_handle);
 
       if (obj.valid_object ())
         {
           graphics_object figObj (obj.get_ancestor ("figure"));
 
-          updateCurrentPoint (figObj, obj, event);
-          gh_manager::post_callback (figObj.get_handle (),
-                                     "windowbuttonmotionfcn");
+          if (figObj.valid_object () &&
+              ! figObj.get ("windowbuttonmotionfcn").is_empty ())
+            {
+              updateCurrentPoint (figObj, obj, event);
+              gh_manager::post_callback (figObj.get_handle (),
+                                         "windowbuttonmotionfcn");
+            }
         }
     }
 
   // Update mouse coordinates in the figure window status bar
   graphics_object figObj =
     gh_manager::get_object (m_handle).get_ancestor ("figure");
 
   if (figObj.valid_object ())
diff --git a/libgui/graphics/Canvas.h b/libgui/graphics/Canvas.h
--- a/libgui/graphics/Canvas.h
+++ b/libgui/graphics/Canvas.h
@@ -65,34 +65,32 @@ public:
   virtual QWidget* qWidget (void) = 0;
 
   static Canvas* create (const std::string& name, QWidget* parent,
                          const graphics_handle& handle);
 
   virtual void toggleAxes (const graphics_handle& handle) = 0;
   virtual void toggleGrid (const graphics_handle& handle) = 0;
   virtual void autoAxes (const graphics_handle& handle) = 0;
-  void enableCurrentPointUpdates (bool on) { m_updateCurrentPoint = on; }
 
 protected:
   virtual void draw (const graphics_handle& handle) = 0;
   virtual void drawZoomBox (const QPoint& p1, const QPoint& p2) = 0;
   virtual void resize (int x, int y, int width, int height) = 0;
   virtual graphics_object selectFromAxes (const graphics_object& ax,
                                           const QPoint& pt) = 0;
 
 protected:
   Canvas (const graphics_handle& handle)
     : m_handle (handle),
       m_redrawBlocked (false),
       m_mouseMode (NoMode),
       m_clickMode (false),
       m_eventMask (0),
-      m_rectMode (false),
-      m_updateCurrentPoint (false)
+      m_rectMode (false)
     { }
 
   void canvasToggleAxes (const graphics_handle& handle);
   void canvasToggleGrid (const graphics_handle& handle);
   void canvasAutoAxes (const graphics_handle& handle);
   void canvasPaintEvent (void);
   void canvasMouseDoubleClickEvent (QMouseEvent* event);
   void canvasMouseMoveEvent (QMouseEvent* event);
@@ -117,14 +115,13 @@ private:
   bool m_redrawBlocked;
   MouseMode m_mouseMode;
   bool m_clickMode;              // True: ZoomIn, False: ZoomOut
   QPoint m_mouseAnchor;
   QPoint m_mouseCurrent;
   graphics_handle m_mouseAxes;
   int m_eventMask;
   bool m_rectMode;
-  bool m_updateCurrentPoint;
 };
 
 }; // namespace QtHandles
 
 #endif
diff --git a/libgui/graphics/Figure.cc b/libgui/graphics/Figure.cc
--- a/libgui/graphics/Figure.cc
+++ b/libgui/graphics/Figure.cc
@@ -127,21 +127,16 @@ Figure::Figure (const graphics_object& g
   : Object (go, win), m_blockUpdates (false), m_figureToolBar (0),
     m_menuBar (0), m_innerRect (), m_outerRect (), m_mouseModeGroup (0)
 {
   m_container = new Container (win);
   win->setCentralWidget (m_container);
 
   figure::properties& fp = properties<figure> ();
 
-  // Enable mouse tracking
-  m_container->setMouseTracking (true);
-  foreach (QWidget* w, m_container->findChildren<QWidget*> ())
-    { w->setMouseTracking (true); }
-
   // Status bar
   m_statusBar = win->statusBar ();
   int boffset = 0;
 
   // Toolbar and menubar
   createFigureToolBarAndMenuBar ();
   int toffset = 0;
 
@@ -163,31 +158,30 @@ Figure::Figure (const graphics_object& g
   else
     m_menuBar->hide ();
 
   m_innerRect = boundingBoxToRect (fp.get_boundingbox (true));
   m_outerRect = boundingBoxToRect (fp.get_boundingbox (false));
 
   win->setGeometry (m_innerRect.adjusted (0, -toffset, 0, boffset));
 
+  // Enable mouse tracking unconditionally  
+  enableMouseTracking ();
+
   // When this constructor gets called all properties are already 
   // set, even non default. We force "update" here to get things right.
 
   // Figure title
   update (figure::properties::ID_NUMBERTITLE);
 
   // Decide what keyboard events we listen to
   m_container->canvas (m_handle)->setEventMask (0);
   update (figure::properties::ID_KEYPRESSFCN);
   update (figure::properties::ID_KEYRELEASEFCN);
 
-  // Decide if the "currentpoint" is updated on mouse movements and
-  // if the windowbuttonmotionfcn is executed  
-  update (figure::properties::ID_WINDOWBUTTONMOTIONFCN);
-
   // Visibility
   update (figure::properties::ID_VISIBLE);
   
 
   connect (this, SIGNAL (asyncUpdate (void)),
            this, SLOT (updateContainer (void)));
 
   win->addReceiver (this);
@@ -480,24 +474,16 @@ Figure::update (int pId)
 
     case figure::properties::ID_KEYRELEASEFCN:
       if (fp.get_keyreleasefcn ().is_empty ())
         m_container->canvas (m_handle)->clearEventMask (Canvas::KeyRelease);
       else
         m_container->canvas (m_handle)->addEventMask (Canvas::KeyRelease);
       break;
 
-    case figure::properties::ID_WINDOWBUTTONMOTIONFCN:
-        {
-          bool hasCallback = ! fp.get_windowbuttonmotionfcn ().is_empty ();
-
-          m_container->canvas (m_handle)->enableCurrentPointUpdates (hasCallback);
-        }
-      break;
-
     default:
       break;
     }
 
   m_blockUpdates = false;
 }
 
 void
@@ -728,16 +714,18 @@ Figure::eventNotifyAfter (QObject* watch
               break;
 
             case QEvent::ChildAdded:
               if (dynamic_cast<QChildEvent*> (xevent)->child
                   ()->isWidgetType())
                 {
                   gh_manager::auto_lock lock;
                   update (figure::properties::ID_TOOLBAR);
+
+                  enableMouseTracking ();
                 }
 
             default:
               break;
             }
         }
       else if (watched == m_menuBar)
         {
@@ -976,9 +964,19 @@ void
 Figure::autoAxes (void)
 {
   Canvas* canvas = m_container->canvas (m_handle);
 
   if (canvas)
     canvas->autoAxes (m_handle);
 }
 
+void
+Figure::enableMouseTracking (void)
+{
+  // Enable mouse tracking on every widgets
+  m_container->setMouseTracking (true);
+  m_container->canvas (m_handle)->qWidget ()->setMouseTracking (true);
+  foreach (QWidget* w, m_container->findChildren<QWidget*> ())
+    { w->setMouseTracking (true); }
+}
+
 }; // namespace QtHandles
diff --git a/libgui/graphics/Figure.h b/libgui/graphics/Figure.h
--- a/libgui/graphics/Figure.h
+++ b/libgui/graphics/Figure.h
@@ -108,16 +108,18 @@ private:
 
   void updateFigureToolBarAndMenuBar (void);
 
   static void updateBoundingBoxHelper (void*);
 
   void save_figure_callback (const std::string& file);
   void copy_figure_callback (const std::string& format);
 
+  void enableMouseTracking (void);  
+
 private slots:
   void setMouseMode (MouseMode mode);
   void fileSaveFigure (bool prompt = false);
   void fileSaveFigureAs (void);
   void fileCloseFigure (void);
   void editCopy (bool choose_format = false);
   void helpAboutQtHandles (void);
   void updateMenuBar (void);
