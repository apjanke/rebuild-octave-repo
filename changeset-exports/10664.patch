# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1274873176 -7200
#      Wed May 26 13:26:16 2010 +0200
# Node ID faff5367cc0506d2347cb14e0ec75ac3f2e6d001
# Parent  b9032852598574c902d50c3a24c1c48b60cfe3f0
second isprime rewrite

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2010-05-26  Jaroslav Hajek  <highegg@gmail.com>
+
+	* specfun/isprime.m: Fix and further optimize.
+
 2010-05-26  Rik <octave@nomad.inbox5.com>
         * sparse/svds.m: Check struct input arguments.  Overhaul documentation.
 
 2010-05-26  Ben Abbott <bpabbott@mac.com>
 
 	* plot/legend.m: Key labels for specified objects.
 	* plot/ancestor.m: Support vectors of handles.
 
diff --git a/scripts/specfun/isprime.m b/scripts/specfun/isprime.m
--- a/scripts/specfun/isprime.m
+++ b/scripts/specfun/isprime.m
@@ -1,9 +1,10 @@
 ## Copyright (C) 2000, 2006, 2007, 2009 Paul Kienzle
+## Copyright (C) 2010 VZLU Prague
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 3 of the License, or (at
 ## your option) any later version.
 ##
@@ -15,44 +16,61 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} isprime (@var{n})
 ## Return true if @var{n} is a prime number, false otherwise.
 ##
-## Something like the following is much faster if you need to test a lot
-## of small numbers:
-##
-## @example
-## @var{t} = ismember (@var{n}, primes (max (@var{n} (:))));
-## @end example
-##
 ## If max(n) is very large, then you should be using special purpose 
 ## factorization code.
 ##
 ## @seealso{primes, factor, gcd, lcm}
 ## @end deftypefn
 
 function t = isprime (n)
 
   if (nargin == 1)
-    n = n(:);
-    idx = 1:numel (n);
-    for p = primes (sqrt (max (n(:))))
-      if (isempty (idx))
-        break;
+    if (any ((n != floor (n) | n < 0)(:)))
+      error ("isprime: needs positive integers");
+    endif
+    maxn = max (n(:));
+    ## generate prime table of suitable length.
+    maxp = min (maxn, max (sqrt (maxn), 1e7)); # FIXME: threshold not optimized.
+    pr = primes (maxp);
+    ## quick search for table matches.
+    t = lookup (pr, n, "b");
+    ## take the rest.
+    m = n(n > maxp);
+    if (! isempty (m))
+      ## there are still possible primes. filter them out by division.
+      if (maxn <= intmax ("uint32"))
+        m = uint32 (m);
+      elseif (maxn <= intmax ("uint64"))
+        m = uint64 (m);
+      else
+        warning ("isprime: too large integers being tested");
       endif
-      mask = rem (n, p) != 0;
-      n = n(mask);
-      idx = idx(mask);
-    endfor
-    t = false (size (n));
-    t(idx) = true;
+      pr = cast (pr(pr <= sqrt (maxn)), class (m));
+      for p = pr
+        m = m(rem (m, p) != 0);
+        if (length (m) < length (pr) / 10)
+          break;
+        endif
+      endfor
+      pr = pr(pr > p);
+      mm = arrayfun (@(x) all (rem (x, pr)), m);
+      m = m(mm);
+      if (! isempty (m))
+        m = cast (sort (m), class (n));
+        t |= lookup (m, n, "b");
+      endif
+    endif
+
   else
     print_usage ();
   endif
 
 endfunction
 
 %!assert (isprime (4), logical (0));
 %!assert (isprime (3), logical (1));
