# HG changeset patch
# User jwe
# Date 772474667 0
#      Fri Jun 24 16:17:47 1994 +0000
# Node ID de9de43ad21f3d72f6c4a0c5c201fe9991c034a0
# Parent  28167349d46a982c407769ee6b94aad1ed1faaa0
[project @ 1994-06-24 16:17:47 by jwe]

diff --git a/src/builtins.cc b/src/builtins.cc
--- a/src/builtins.cc
+++ b/src/builtins.cc
@@ -600,19 +600,16 @@ at which the integrand is singular.\n", 
        rand (n)              -- generate N x N matrix\n\
        rand (A)              -- generate matrix the size of A\n\
        rand (n, m)           -- generate N x M matrix\n\
        rand (\"dist\")         -- get current distribution\n\
        rand (\"distribution\") -- set distribution\n\
        rand (\"seed\")         -- get current seed\n\
        rand (\"seed\", n)      -- set seed", },
 
-  { "replot", 1, 0, builtin_replot,
-    "replot (): redisplay current plot", },
-
   { "scanf", 2, -1, builtin_scanf,
     "[a, b, c, ...] = scanf (\"fmt\")", },
 
   { "setstr", 2, 1, builtin_setstr,
     "setstr (v): convert a vector to a string", },
 
   { "shell_cmd", 2, 1, builtin_shell_command,
     "shell_cmd (string [, return_output]): execute shell commands", },
diff --git a/src/g-builtins.cc b/src/g-builtins.cc
--- a/src/g-builtins.cc
+++ b/src/g-builtins.cc
@@ -1545,32 +1545,16 @@ builtin_rand (const tree_constant *args,
 		 retval = rand_internal (args, nargin, nargout);)
   else
     print_usage ("rand");
 
   return retval;
 }
 
 /*
- * Replot current plot.
- */
-tree_constant *
-builtin_replot (const tree_constant *args, int nargin, int nargout)
-{
-  tree_constant *retval = NULL_TREE_CONST;
-
-  if (nargin > 1)
-    warning ("replot: ignoring extra arguments");
-
-  send_to_plot_stream ("replot\n");
-
-  return retval;
-}
-
-/*
  * Formatted reading.
  */
 tree_constant *
 builtin_scanf (const tree_constant *args, int nargin, int nargout)
 {
   tree_constant *retval = NULL_TREE_CONST;
 
   if (nargin != 2)
diff --git a/src/g-builtins.h b/src/g-builtins.h
--- a/src/g-builtins.h
+++ b/src/g-builtins.h
@@ -110,17 +110,16 @@ extern tree_constant *builtin_pwd (const
 extern tree_constant *builtin_qpsol (const tree_constant *, int, int);
 extern tree_constant *builtin_qpsol_options (const tree_constant *, int, int);
 extern tree_constant *builtin_qr (const tree_constant *, int, int);
 extern tree_constant *builtin_quad (const tree_constant *, int, int);
 extern tree_constant *builtin_quad_options (const tree_constant *, int, int);
 extern tree_constant *builtin_quit (const tree_constant *, int, int);
 extern tree_constant *builtin_qzval (const tree_constant *, int, int);
 extern tree_constant *builtin_rand (const tree_constant *, int, int);
-extern tree_constant *builtin_replot (const tree_constant *, int, int);
 extern tree_constant *builtin_setstr (tree_constant *, int, int);
 extern tree_constant *builtin_scanf (const tree_constant *, int, int);
 extern tree_constant *builtin_schur (const tree_constant *, int, int);
 extern tree_constant *builtin_shell_command (const tree_constant *, int, int);
 extern tree_constant *builtin_size (const tree_constant *, int, int);
 extern tree_constant *builtin_sort (const tree_constant *, int, int);
 extern tree_constant *builtin_sprintf (const tree_constant *, int, int);
 extern tree_constant *builtin_sqrtm (const tree_constant *, int, int);
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -1052,25 +1052,33 @@ is_keyword (char *s)
   else if (strcmp ("global", s) == 0)
     {
       return GLOBAL;
     }
   else if (strcmp ("gplot", s) == 0)
     {
       plotting = 1;
       yylval.tok_val = new token (token::two_dee, l, c);
+      token_stack.push (yylval.tok_val);
       return PLOT;
     }
   else if (strcmp ("gsplot", s) == 0)
     {
       plotting = 1;
       yylval.tok_val = new token (token::three_dee, l, c);
       token_stack.push (yylval.tok_val);
       return PLOT;
     }
+  else if (strcmp ("replot", s) == 0)
+    {
+      plotting = 1;
+      yylval.tok_val = new token (token::replot, l, c);
+      token_stack.push (yylval.tok_val);
+      return PLOT;
+    }
   else if (strcmp ("if", s) == 0)
     {
       iffing++;
       promptflag--;
       yylval.tok_val = new token (l, c);
       token_stack.push (yylval.tok_val);
       return IF;
     }
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -376,23 +376,31 @@ plot_command	: PLOT plot_command1
 		    plotting = 0;
 		    past_plot_range = 0;
 		    in_plot_range = 0;
 		    in_plot_using = 0;
 		    in_plot_style = 0;
 		  }
 		| PLOT ranges plot_command1
 		  {
-		    tree_subplot_list *tmp = $3->reverse ();
-		    $$ = new tree_plot_command (tmp, $2, $1->pttype ());
-		    plotting = 0;
-		    past_plot_range = 0;
-		    in_plot_range = 0;
-		    in_plot_using = 0;
-		    in_plot_style = 0;
+		    if ($1->pttype () == token::replot)
+		      {
+			yyerror ("cannot specify new ranges with replot");
+			ABORT_PARSE;
+		      }
+		    else
+		      {
+			tree_subplot_list *tmp = $3->reverse ();
+			$$ = new tree_plot_command (tmp, $2, $1->pttype ());
+			plotting = 0;
+			past_plot_range = 0;
+			in_plot_range = 0;
+			in_plot_using = 0;
+			in_plot_style = 0;
+		      }
 		  }
 		;
 
 ranges		: ranges1
 		  { $$ = new tree_plot_limits ($1); }
 		| ranges1 ranges1
 		  { $$ = new tree_plot_limits ($1, $2); }
 		| ranges1 ranges1 ranges1
diff --git a/src/pt-plot.cc b/src/pt-plot.cc
--- a/src/pt-plot.cc
+++ b/src/pt-plot.cc
@@ -84,16 +84,19 @@ tree_plot_command::eval (int print)
 
   if (error_state)
     return retval;
 
   ostrstream plot_buf;
 
   switch (ndim)
     {
+    case 1:
+      plot_buf << "replot";
+      break;
     case 2:
       plot_buf << "plot";
       break;
     case 3:
       plot_buf << "splot";
       break;
     default:
       panic_impossible ();
diff --git a/src/token.h b/src/token.h
--- a/src/token.h
+++ b/src/token.h
@@ -50,16 +50,17 @@ public:
       for_end,
       function_end,
       if_end,
       while_end,
     };
 
   enum plot_tok_type
     {
+      replot = 1,
       two_dee = 2,
       three_dee = 3,
     };
 
   token (int l = -1, int c = -1);
   token (char *s, int l = -1, int c = -1);
   token (double d, int l = -1, int c = -1);
   token (end_tok_type t, int l = -1, int c = -1);
