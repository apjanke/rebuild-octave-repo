# HG changeset patch
# User Torsten <ttl@justmail.de>
# Date 1359480256 -3600
#      Tue Jan 29 18:24:16 2013 +0100
# Node ID 47a4c92924a70ae18d2481dc62b52b41b922b6f3
# Parent  f75ffcc82acbbd7e0c769b7f674b793da98eb8ff
gui: prevent error messages at start-up (regression from changeset 6c0fce0632a4)

* main-window.h: declaration of new function connect_visibility_changed ()
* main-window.cc (connect_visibility_changed): new function for connecting the
  signales emitted when the visibility of a widget changes; this function must
  be called after the main window is shown
* main-window.cc (construct): do not connect the signals here
* octave-gui.cc (octave_start_gui): call connect_visibility_changed () just
  before calling application.exec ()

diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -611,16 +611,40 @@ main_window::write_settings ()
   for (int i=0; i<_current_directory_combo_box->count (); i++)
     {
       curr_dirs.append (_current_directory_combo_box->itemText (i));
     }
   settings->setValue ("MainWindow/current_directory_list",curr_dirs);
   settings->sync ();
 }
 
+
+// Connecting the signals emitted when the visibility of a widget changes.
+// This has to be done after the window is shown (see octave-gui.cc)
+void
+main_window::connect_visibility_changed ()
+{
+  connect (_terminal_dock_widget, SIGNAL (visibilityChanged (bool)),
+           this,                  SLOT (handle_command_window_visible (bool)));
+  connect (_workspace_view,       SIGNAL (visibilityChanged (bool)),
+           this,                  SLOT (handle_workspace_visible (bool)));
+  connect (_history_dock_widget,  SIGNAL (visibilityChanged (bool)),
+           this,                  SLOT (handle_command_history_visible (bool)));
+  connect (_files_dock_widget,    SIGNAL (visibilityChanged (bool)),
+           this,                  SLOT (handle_current_directory_visible (bool)));
+#ifdef HAVE_QSCINTILLA
+  connect (_file_editor,          SIGNAL (visibilityChanged (bool)),
+           this,                  SLOT (handle_editor_visible (bool)));
+#endif
+  connect (_documentation_dock_widget,  SIGNAL (visibilityChanged (bool)),
+           this,                  SLOT (handle_documentation_visible (bool)));
+}
+
+
+// Main subroutine of the constructor
 void
 main_window::construct ()
 {
   _closing = false;   // flag for editor files when closed
   setWindowIcon (QIcon(":/actions/icons/logo.png"));
 
   // Setup dockable widgets and the status bar.
   _workspace_view           = new workspace_view (this);
@@ -987,30 +1011,16 @@ main_window::construct ()
   connect (history_action,              SIGNAL (triggered ()),
            this,                        SLOT (focus_command_history ()));
   connect (file_browser_action,         SIGNAL (triggered ()),
            this,                        SLOT (focus_current_directory ()));
   connect (editor_action,               SIGNAL (triggered ()),
            this,                        SLOT (focus_editor ()));
   connect (documentation_action,        SIGNAL (triggered ()),
            this,                        SLOT (focus_documentation ()));
-  connect (_terminal_dock_widget,       SIGNAL (visibilityChanged (bool)),
-           this,                        SLOT (handle_command_window_visible (bool)));
-  connect (_workspace_view,             SIGNAL (visibilityChanged (bool)),
-           this,                        SLOT (handle_workspace_visible (bool)));
-  connect (_history_dock_widget,        SIGNAL (visibilityChanged (bool)),
-           this,                        SLOT (handle_command_history_visible (bool)));
-  connect (_files_dock_widget,          SIGNAL (visibilityChanged (bool)),
-           this,                        SLOT (handle_current_directory_visible (bool)));
-#ifdef HAVE_QSCINTILLA
-  connect (_file_editor,                SIGNAL (visibilityChanged (bool)),
-           this,                        SLOT (handle_editor_visible (bool)));
-#endif
-  connect (_documentation_dock_widget,  SIGNAL (visibilityChanged (bool)),
-           this,                        SLOT (handle_documentation_visible (bool)));
 
   connect (reset_windows_action,        SIGNAL (triggered ()),
            this,                        SLOT   (reset_windows ()));
 #ifdef HAVE_QSCINTILLA
   connect (this,                        SIGNAL (settings_changed ()),
            _file_editor,                SLOT   (notice_settings ()));
 #endif
   connect (this,                        SIGNAL (settings_changed ()),
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -118,16 +118,17 @@ public slots:
   void debug_continue ();
   void debug_step_into ();
   void debug_step_over ();
   void debug_step_out ();
   void debug_quit ();
 
   void read_settings ();
   void write_settings ();
+  void connect_visibility_changed ();
 
 protected:
   void closeEvent (QCloseEvent * closeEvent);
 
 private:
   void construct ();
   void establish_octave_link ();
 
diff --git a/libgui/src/octave-gui.cc b/libgui/src/octave-gui.cc
--- a/libgui/src/octave-gui.cc
+++ b/libgui/src/octave-gui.cc
@@ -104,13 +104,14 @@ octave_start_gui (int argc, char *argv[]
           resource_manager::update_network_settings ();
 
           // create main window, read settings, and show window
           main_window w;
           w.read_settings ();  // get widget settings after construction
                                // but before showing
           w.show ();
           w.focus_command_window ();
-
+          w.connect_visibility_changed (); // connect signals for changes in
+                                           // visibility not before w is shown
           return application.exec ();
         }
     }
 }
