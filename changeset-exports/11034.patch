# HG changeset patch
# User John Swensen <jpswensen@gmail.com>
# Date 1285709032 14400
#      Tue Sep 28 17:23:52 2010 -0400
# Node ID 6589aaf769f6c17bbaa077885133ed49c0475b2c
# Parent  d9c8916bb9dd52130bb5f830c268e38adbc9deb1
Correctly handle logical and integer bit depths

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2010-09-28  John P. Swensen  <jpswensen@gmail.com>
+
+	* DLD-FUNCTIONS/__magick_read__.cc (encode_uint_image)
+	(encode_bool_image): Ensure bit depth encoding is correct for
+	logical, uint8, and uint16 images.
+
 2010-09-28  Jaroslav Hajek  <highegg@gmail.com>
 
 	* xpow.cc (xpow (double, const Matrix&)): Ensure real result for
 	positive base.
 	(xpow (double, const Matrix&)): Likewise.
 
 2010-09-28  Jaroslav Hajek  <highegg@gmail.com>
 
diff --git a/src/DLD-FUNCTIONS/__magick_read__.cc b/src/DLD-FUNCTIONS/__magick_read__.cc
--- a/src/DLD-FUNCTIONS/__magick_read__.cc
+++ b/src/DLD-FUNCTIONS/__magick_read__.cc
@@ -612,16 +612,20 @@ encode_bool_image (std::vector<Magick::I
 
               idx(0) = x;
 
               if (m(idx))
                 im.pixelColor (y, x, "white");
             }
         }
 
+      im.quantizeColorSpace (Magick::GRAYColorspace);
+      im.quantizeColors (2);
+      im.quantize ();
+
       imvec.push_back (im);
     }
 }
 
 template <class T>
 static void
 encode_uint_image (std::vector<Magick::Image>& imvec,
                    const octave_value& img,
@@ -738,16 +742,20 @@ encode_uint_image (std::vector<Magick::I
                       idx(2) = 0;
                     }
 
                   c.shade (static_cast<double>(m(idx)) / div_factor);
 
                   im.pixelColor (y, x, c);
                 }
             }
+
+          im.quantizeColorSpace (Magick::GRAYColorspace);
+          im.quantizeColors (pow (2, bitdepth));
+          im.quantize ();
         }
 
       imvec.push_back (im);
     }
 }
 
 static void
 encode_map (std::vector<Magick::Image>& imvec, const NDArray& cmap)
