# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1231501965 18000
#      Fri Jan 09 06:52:45 2009 -0500
# Node ID d6c0d5f208de9d5d94f0914d2ca4635491c043e3
# Parent  adab48231a03df9cc198b5175aec42a4a7400861
parse.y: avoid storing null statements in statement lists

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -14,16 +14,21 @@ 2009-01-09  John W. Eaton  <jwe@octave.o
 	* parse.y (input_line_number): Initialize to 1, not 0.
 	(text_getc): Increment input_line_number correctly.
 	(stdio_stream_reader::ungetc): Decrement input_line_number if
 	putting back a newline character.
 	(parse_fcn_file): Set input_line_number to 1, not 0.
 	(eval_string): Unwind-protect input_line_number and
 	current_input_column.
 
+	* parse.y (make_statement): New function.
+	(statement): Use it.
+	(make_statement_list, append_statement_list): New functions.
+	(simple_list1, list1): Use them.
+
 2009-01-08  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-cell.cc (octave_cell::subsasgn): Erase duplicate lhs value 
 	prior to assignment to avoid a redundant copy.
 
 2008-12-26  Thorsten Meyer  <thorsten.meyier@gmx.de>
 
 	* mappers.cc (Ftoascii), mappers.cc (Ftolower), mappers.cc
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -309,16 +309,41 @@ finish_cell (tree_cell *c);
 // Maybe print a warning.  Duh.
 static void
 maybe_warn_missing_semi (tree_statement_list *);
 
 // Set the print flag for a statement based on the separator type.
 static void
 set_stmt_print_flag (tree_statement_list *, char, bool);
 
+// Create a statement list.
+static tree_statement_list *make_statement_list (tree_statement *stmt);
+
+// Append a statement to an existing statement list.
+static tree_statement_list *
+append_statement_list (tree_statement_list *list, char sep,
+		       tree_statement *stmt, bool warn_missing_semi);
+
+// Finish building a statement.
+template <class T>
+static tree_statement *
+make_statement (T *arg)
+{
+  tree_statement *retval = 0;
+
+  if (arg)
+    {
+      octave_comment_list *comment = octave_comment_buffer::get_comment ();
+
+      retval = new tree_statement (arg, comment);
+    }
+
+  return retval;
+}
+
 #define ABORT_PARSE \
   do \
     { \
       global_command = 0; \
       yyerrok; \
       if (! symtab_context.empty ()) \
         { \
 	  symbol_table::set_scope (symtab_context.top ()); \
@@ -498,62 +523,44 @@ input1		: '\n'
 simple_list	: simple_list1 opt_sep_no_nl
 		  {
 		    set_stmt_print_flag ($1, $2, false);
 		    $$ = $1;
 		  }
 		;
 
 simple_list1	: statement
-		  { $$ = new tree_statement_list ($1); }
+		  { $$ = make_statement_list ($1); }
 		| simple_list1 sep_no_nl statement
-		  {
-		    set_stmt_print_flag ($1, $2, false);
-		    $1->append ($3);
-		    $$ = $1;
-		  }
+		  { $$ = append_statement_list ($1, $2, $3, false); }
 		;
 
 opt_list	: // empty
 		  { $$ = new tree_statement_list (); }
 		| list
 		  { $$ = $1; }
 		;
 
 list		: list1 opt_sep
 		  {
 		    set_stmt_print_flag ($1, $2, true);
 		    $$ = $1;
 		  }
 		;
 
 list1		: statement
-		  { $$ = new tree_statement_list ($1); }
+		  { $$ = make_statement_list ($1); }
 		| list1 sep statement
-		  {
-		    set_stmt_print_flag ($1, $2, true);
-		    $1->append ($3);
-		    $$ = $1;
-		  }
+		  { $$ = append_statement_list ($1, $2, $3, true); }
 		;
 
 statement	: expression
-		  {
-		    octave_comment_list *comment
-		      = octave_comment_buffer::get_comment ();
-
-		    $$ = new tree_statement ($1, comment);
-		  }
+		  { $$ = make_statement ($1); }
 		| command
-		  {
-		    octave_comment_list *comment
-		      = octave_comment_buffer::get_comment ();
-
-		    $$ = new tree_statement ($1, comment);
-		  }
+		  { $$ = make_statement ($1); }
 		;
 
 // ===========
 // Expressions
 // ===========
 
 identifier	: NAME
 		  {
@@ -2848,16 +2855,38 @@ set_stmt_print_flag (tree_statement_list
       break;
 
     default:
       warning ("unrecognized separator type!");
       break;
     }
 }
 
+static tree_statement_list *
+make_statement_list (tree_statement *stmt)
+{
+  return stmt ? new tree_statement_list (stmt) : new tree_statement_list ();
+}
+
+static tree_statement_list *
+append_statement_list (tree_statement_list *list, char sep,
+		       tree_statement *stmt, bool warn_missing_semi)
+{
+  tree_statement_list *retval = list;
+
+  if (stmt)
+    {
+      set_stmt_print_flag (list, sep, warn_missing_semi);
+
+      list->append (stmt);
+    }
+
+  return retval;
+}
+
 static void
 safe_fclose (void *f)
 {
   // FIXME -- comments at the end of an input file are
   // discarded (otherwise, they would be appended to the next
   // statement, possibly from the command line or another file, which
   // can be quite confusing).
 
