# HG changeset patch
# User jwe
# Date 1067047155 0
#      Sat Oct 25 01:59:15 2003 +0000
# Node ID 308feb0e564632d2386f2769af43c5bd0a1b22c2
# Parent  a4796ccde726eeae73c6b7b6a1d9497ed1951902
[project @ 2003-10-25 01:59:15 by jwe]

diff --git a/liboctave/Makefile.in b/liboctave/Makefile.in
--- a/liboctave/Makefile.in
+++ b/liboctave/Makefile.in
@@ -173,17 +173,17 @@ stmp-pic: pic
 pic:
 	@if [ -d pic ]; then \
 	  true; \
 	else \
 	  echo "mkdir pic"; \
 	  mkdir pic; \
 	fi
 
-stamp-prereq: $(OPTS_INC) $(VX_OP_INC) $(VX_OP_SRC) $(MX_OP_INC) $(MX_OP_SRC)
+stamp-prereq: $(OPTS_INC) $(VX_OP_INC) $(VX_OP_SRC) $(MX_OP_INC) $(MX_OP_SRC) mx-ops.h
 	touch stamp-prereq
 
 ifeq ($(SHARED_LIBS), true)
   ifeq ($(STATIC_LIBS), true)
     libraries: \
 	stamp-prereq \
 	liboctave.$(LIBEXT) liboctave.$(SHLEXT_VER)
   else
@@ -317,18 +317,18 @@ bin-dist:
 
 $(VX_OP_INC) $(VX_OP_SRC) : $(srcdir)/mk-ops.awk vx-ops
 	$(AWK) -f $(srcdir)/mk-ops.awk prefix=vx $(srcdir)/vx-ops
 
 $(MX_OP_INC) $(MX_OP_SRC) : $(srcdir)/mk-ops.awk mx-ops
 	$(AWK) -f $(srcdir)/mk-ops.awk prefix=mx $(srcdir)/mx-ops
 
 mx-ops.h : $(srcdir)/mk-ops.awk mx-ops
-	$(AWK) -f $(srcdir)/mk-ops.awk make_inclusive_header=mx-ops.h > $@.t
-	@$(top_srcdir)/move-if-change $@-t $@
+	$(AWK) -f $(srcdir)/mk-ops.awk prefix=mx make_inclusive_header=mx-ops.h $(srcdir)/mx-ops > $@-t
+	$(top_srcdir)/move-if-change $@-t $@
 
 
 # If missing, GNU make attempts to create them in the reverse of the
 # order in which they are listed here.  We rely on that fact to ensure
 # that defaults.h is created before trying to create the .d files.
 # Hmm.  I wonder if we can count on that...
 
 ifndef omit_deps
diff --git a/liboctave/mk-ops.awk b/liboctave/mk-ops.awk
--- a/liboctave/mk-ops.awk
+++ b/liboctave/mk-ops.awk
@@ -1,31 +1,32 @@
 BEGIN {
   declare_types = 0;
   generate_ops = 0;
   ntypes = 0;
-  if (make_inclusive_header)
+} {
+  if (NR == 1 && make_inclusive_header)
     {
+      print "// DO NOT EDIT -- generated by mk-ops";
       tmp = make_inclusive_header;
-      gsub ("\\.-", "_", tmp);
+      gsub (/[\.-]/, "_", tmp);
       printf ("#if !defined (octave_%s)\n", tmp);
       printf ("#define octave_%s 1\n", tmp);
     }
 }
-  /^#/ {
-    if ($2 == "types")
-      declare_types = 1;
-    else if ($2 == "ops")
-      {
-        generate_ops = 1;
-        declare_types = 0;
-      }
-    next;
-  }
-{
+/^#/ {
+  if ($2 == "types")
+    declare_types = 1;
+  else if ($2 == "ops")
+    {
+      generate_ops = 1;
+      declare_types = 0;
+    }
+  next;
+} {
   if (declare_types)
     {
       ntypes++;
 
       if (NF == 5)
         {
           fwd_decl_ok[ntypes] = $5 == "YES";
           header[ntypes] = $4 == "NONE" ? "" : $4;
@@ -79,17 +80,20 @@ BEGIN {
 
 	  if (list_h_files)
 	    {
 	      print h_file;
 	      next;
 	    }
 
 	  if (make_inclusive_header)
-            printf ("#include \"%s\"\n", h_file);
+	    {
+              printf ("#include \"%s\"\n", h_file);
+              next;
+            }
 
 	  h_guard = sprintf ("octave_%s_%s_%s_h", prefix, lhs_tag, rhs_tag);
 
 	  result_num = rev_tag[result_tag];
 	  lhs_num = rev_tag[lhs_tag];
 	  rhs_num = rev_tag[rhs_tag];
 
 	  result_type = type[result_num];
@@ -187,9 +191,9 @@ BEGIN {
         }
       else
         printf ("skipping line %d: %s\n", NR, $0); 
     }
 }
 END {
   if (make_inclusive_header)
     print "#endif";
-}
\ No newline at end of file
+}
