# HG changeset patch
# User Piotr Held <pjheld@gmail.com>
# Date 1501502115 -7200
#      Mon Jul 31 13:55:15 2017 +0200
# Node ID 3ac5d3d01cad554c63b43baa4e36c5b6f3ab4cfa
# Parent  ccc4e85762ac363988437465d4648becbb0345c0
Anonymous functions to local functions in classdef files (bug #51599).

* libinterp/corefcn/symtab.cc (symbol_table::fcn_info::fcn_info_rep::xfind):
When looking up local functions and no function file name is present, which is
the case for an anonymous function, it now looks at the parent scope for it.
Another approach of stashing the file information for an anonymous function
during the initialization in tree_evaluator::visit_anon_fcn_handle caused weird
bugs.

* test/bug-51599/bug-51599.tst, test/bug-51599/class_bug51599.m,
test/bug-51599/module.mk: new files for simple test of calling a local function
of a classdef class from an instance of that class using a function handle.

* test/module.mk: Add bug-51599 tests to build system.

Pushed by K. T. Ohlhus <k.ohlhus@gmail.com>.

diff --git a/libinterp/corefcn/symtab.cc b/libinterp/corefcn/symtab.cc
--- a/libinterp/corefcn/symtab.cc
+++ b/libinterp/corefcn/symtab.cc
@@ -822,16 +822,29 @@ namespace octave
         octave_user_function *current_fcn = scope ? scope->function () : nullptr;
 
         // Local function.
 
         if (current_fcn)
           {
             std::string fcn_file = current_fcn->fcn_file_name ();
 
+            // For anonymous functions we look at the parent scope so that if
+            // they were defined within class methods and use local functions
+            // (helper functions) we can still use those anonymous functions
+
+            if (current_fcn->is_anonymous_function ())
+              {
+                if (fcn_file.empty ()
+                    && scope->parent_scope () != nullptr
+                    && scope->parent_scope ()->function () != nullptr)
+                  fcn_file
+                    = scope->parent_scope ()->function ()->fcn_file_name();
+              }
+
             if (! fcn_file.empty ())
               {
                 str_val_iterator r = local_functions.find (fcn_file);
 
                 if (r != local_functions.end ())
                   {
                     // We shouldn't need an out-of-date check here since
                     // local functions may ultimately be called only from
diff --git a/test/bug-51599/bug-51599.tst b/test/bug-51599/bug-51599.tst
new file mode 100644
--- /dev/null
+++ b/test/bug-51599/bug-51599.tst
@@ -0,0 +1,24 @@
+## Copyright (C) 2017 Piotr Held
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 3 of the License, or
+## (at your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+## GNU General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
+## <http://www.gnu.org/licenses/>.
+
+## Check if a function handle to a local function of a classdef class
+## can be called from an instance of that class.
+%!test
+%! a = class_bug51599 ();
+%! a.foo ();
+%! assert (a.bar (0), 2);
diff --git a/test/bug-51599/class_bug51599.m b/test/bug-51599/class_bug51599.m
new file mode 100644
--- /dev/null
+++ b/test/bug-51599/class_bug51599.m
@@ -0,0 +1,17 @@
+classdef class_bug51599 < handle
+  properties
+    anon_fcn
+  endproperties
+  methods
+    function foo (obj)
+      obj.anon_fcn = @(x) my_helper (x + 1);
+    endfunction
+    function ret = bar (obj, val)
+      ret = obj.anon_fcn (val);
+    endfunction
+  endmethods
+endclassdef
+
+function ret = my_helper (val)
+  ret = val + 1;
+endfunction
diff --git a/test/bug-51599/module.mk b/test/bug-51599/module.mk
new file mode 100644
--- /dev/null
+++ b/test/bug-51599/module.mk
@@ -0,0 +1,5 @@
+bug_51599_TEST_FILES = \
+  %reldir%/bug-51599.tst \
+  %reldir%/class_bug51599.m
+
+TEST_FILES += $(bug_51599_TEST_FILES)
diff --git a/test/module.mk b/test/module.mk
--- a/test/module.mk
+++ b/test/module.mk
@@ -50,16 +50,17 @@ include %reldir%/bug-36025/module.mk
 include %reldir%/bug-38236/module.mk
 include %reldir%/bug-38691/module.mk
 include %reldir%/bug-41723/module.mk
 include %reldir%/bug-44940/module.mk
 include %reldir%/bug-46660/module.mk
 include %reldir%/bug-50014/module.mk
 include %reldir%/bug-50035/module.mk
 include %reldir%/bug-50716/module.mk
+include %reldir%/bug-51599/module.mk
 include %reldir%/class-concat/module.mk
 include %reldir%/classdef/module.mk
 include %reldir%/classdef-multiple-inheritance/module.mk
 include %reldir%/classes/module.mk
 include %reldir%/ctor-vs-method/module.mk
 include %reldir%/fcn-handle-derived-resolution/module.mk
 include %reldir%/nest/module.mk
 include %reldir%/publish/module.mk
