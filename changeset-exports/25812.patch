# HG changeset patch
# User Rik <rik@octave.org>
# Date 1534542550 25200
#      Fri Aug 17 14:49:10 2018 -0700
# Node ID fc74c8d2a584bb344e002e2637c18763c0fcfe69
# Parent  94b8dc8292af6739de898f5d2a05d7ab20e92c4a
Clean up liboctave Range implementation.

* Range.h: Cleanup up spacing by removing some unnecessary blank lines.

* Range.cc: Wrap comments to 80 characters.  Add more comments to code.
* Range.cc (matrix_value): Use xelem() for performance.
* Range.cc (operator <<): Rename "num_elem" to "nel".
* Range.cc (teq): Use std::abs() instead of fabs() (we're C++11 now!).
* Range.cc (limit_internal): Rename "tmp_limit" to "new_limit".  Don't bother
checking if new limit is different from old limit before returning it.

* range.tst: Add BIST tests for operators (+, -, *) on Ranges.

diff --git a/liboctave/array/Range.cc b/liboctave/array/Range.cc
--- a/liboctave/array/Range.cc
+++ b/liboctave/array/Range.cc
@@ -34,19 +34,19 @@ along with Octave; see the file COPYING.
 #include "Range.h"
 #include "lo-error.h"
 #include "lo-mappers.h"
 #include "lo-utils.h"
 
 bool
 Range::all_elements_are_ints (void) const
 {
-  // If the base and increment are ints, the final value in the range
-  // will also be an integer, even if the limit is not.  If there is one
-  // or fewer elements only the base needs to be an integer
+  // If the base and increment are ints, the final value in the range will also
+  // be an integer, even if the limit is not.  If there is one or fewer
+  // elements only the base needs to be an integer.
 
   return (! (octave::math::isnan (rng_base) || octave::math::isnan (rng_inc))
           && (octave::math::nint_big (rng_base) == rng_base || rng_numel < 1)
           && (octave::math::nint_big (rng_inc) == rng_inc || rng_numel <= 1));
 }
 
 octave_idx_type
 Range::nnz (void) const
@@ -59,20 +59,23 @@ Range::nnz (void) const
           || (rng_base < 0.0 && rng_limit < 0.0))
         {
           // All elements have the same sign, hence there are no zeros.
           retval = rng_numel;
         }
       else if (rng_inc != 0.0)
         {
           if (rng_base == 0.0 || rng_limit == 0.0)
+            // Exactly one zero at beginning or end of range.
             retval = rng_numel - 1;
           else if ((rng_base / rng_inc) != std::floor (rng_base / rng_inc))
+            // Range crosses negative/positive without hitting zero.
             retval = rng_numel;
           else
+            // Range crosses negative/positive and hits zero.
             retval = rng_numel - 1;
         }
       else
         {
           // All elements are equal (rng_inc = 0) but not positive or negative,
           // therefore all elements are zero.
           retval = 0;
         }
@@ -90,43 +93,42 @@ Range::matrix_value (void) const
 
       // The first element must always be *exactly* the base.
       // E.g, -0 would otherwise become +0 in the loop (-0 + 0*increment).
       cache(0) = rng_base;
 
       double b = rng_base;
       double increment = rng_inc;
       for (octave_idx_type i = 1; i < rng_numel - 1; i++)
-        cache(i) = b + i * increment;
+        cache.xelem (i) = b + i * increment;
 
-      cache(rng_numel - 1) = rng_limit;
+      cache.xelem (rng_numel - 1) = rng_limit;
     }
 
   return cache;
 }
 
 double
 Range::checkelem (octave_idx_type i) const
 {
-  // Ranges are row vectors.
-
   if (i < 0 || i >= rng_numel)
     octave::err_index_out_of_range (2, 2, i+1, rng_numel);
 
   if (i == 0)
     return rng_base;
   else if (i < rng_numel - 1)
     return rng_base + i * rng_inc;
   else
     return rng_limit;
 }
 
 double
 Range::checkelem (octave_idx_type i, octave_idx_type j) const
 {
+  // Ranges are *always* row vectors.
   if (i != 0)
     octave::err_index_out_of_range (1, 1, i+1, rng_numel);
 
   return checkelem (j);
 }
 
 double
 Range::elem (octave_idx_type i) const
@@ -279,17 +281,16 @@ Range::sort_internal (Array<octave_idx_t
       reverse = true;
     }
 
   octave_idx_type tmp = (reverse ? nel - 1 : 0);
   octave_idx_type stp = (reverse ? -1 : 1);
 
   for (octave_idx_type i = 0; i < nel; i++, tmp += stp)
     psidx[i] = tmp;
-
 }
 
 Matrix
 Range::diag (octave_idx_type k) const
 {
   return matrix_value ().diag (k);
 }
 
@@ -376,27 +377,27 @@ Range::set_inc (double i)
     }
 }
 
 std::ostream&
 operator << (std::ostream& os, const Range& a)
 {
   double b = a.base ();
   double increment = a.inc ();
-  octave_idx_type num_elem = a.numel ();
+  octave_idx_type nel = a.numel ();
 
-  if (num_elem > 1)
+  if (nel > 1)
     {
-      // First element must be the base *exactly* (-0).
+      // First element must be the base *exactly* (e.g., -0).
       os << b << ' ';
-      for (octave_idx_type i = 1; i < num_elem-1; i++)
+      for (octave_idx_type i = 1; i < nel-1; i++)
         os << b + i * increment << ' ';
     }
 
-  // Print out exactly the last element, rather than a calculated last element.
+  // Print out the last element exactly, rather than a calculated last element.
   os << a.rng_limit << "\n";
 
   return os;
 }
 
 std::istream&
 operator >> (std::istream& is, Range& a)
 {
@@ -404,32 +405,35 @@ operator >> (std::istream& is, Range& a)
   if (is)
     {
       double tmp_rng_limit;
       is >> tmp_rng_limit;
 
       if (is)
         is >> a.rng_inc;
 
-      // Clip the rng_limit to the true limit and rebuild numel, clear cache
+      // Clip the rng_limit to the true limit, rebuild numel, clear cache
       a.set_limit (tmp_rng_limit);
     }
 
   return is;
 }
 
 Range
 operator - (const Range& r)
 {
   return Range (-r.base (), -r.limit (), -r.inc (), r.numel ());
 }
 
 Range operator + (double x, const Range& r)
 {
   Range result (x + r.base (), x + r.limit (), r.inc (), r.numel ());
+  // Check whether new range was constructed properly.  A non-finite
+  // value (Inf or NaN) requires that the output be of the same size
+  // as the original range with all values set to the non-finite value.
   if (result.rng_numel < 0)
     result.cache = x + r.matrix_value ();
 
   return result;
 }
 
 Range operator + (const Range& r, double x)
 {
@@ -537,20 +541,20 @@ tfloor (double x, double ct)
   else
     return t1 - 1.0;
 }
 
 static inline bool
 teq (double u, double v,
      double ct = 3.0 * std::numeric_limits<double>::epsilon ())
 {
-  double tu = fabs (u);
-  double tv = fabs (v);
+  double tu = std::abs (u);
+  double tv = std::abs (v);
 
-  return fabs (u - v) < ((tu > tv ? tu : tv) * ct);
+  return std::abs (u - v) < ((tu > tv ? tu : tv) * ct);
 }
 
 octave_idx_type
 Range::numel_internal (void) const
 {
   octave_idx_type retval = -1;
 
   if (rng_inc == 0
@@ -563,26 +567,24 @@ Range::numel_internal (void) const
     {
       double ct = 3.0 * std::numeric_limits<double>::epsilon ();
 
       double tmp = tfloor ((rng_limit - rng_base + rng_inc) / rng_inc, ct);
 
       octave_idx_type n_elt = (tmp > 0.0 ? static_cast<octave_idx_type> (tmp)
                                          : 0);
 
-      // If the final element that we would compute for the range is
-      // equal to the limit of the range, or is an adjacent floating
-      // point number, accept it.  Otherwise, try a range with one
-      // fewer element.  If that fails, try again with one more
-      // element.
+      // If the final element that we would compute for the range is equal to
+      // the limit of the range, or is an adjacent floating point number,
+      // accept it.  Otherwise, try a range with one fewer element.  If that
+      // fails, try again with one more element.
       //
-      // I'm not sure this is very good, but it seems to work better than
-      // just using tfloor as above.  For example, without it, the
-      // expression 1.8:0.05:1.9 fails to produce the expected result of
-      // [1.8, 1.85, 1.9].
+      // I'm not sure this is very good, but it seems to work better than just
+      // using tfloor as above.  For example, without it, the expression
+      // 1.8:0.05:1.9 fails to produce the expected result of [1.8, 1.85, 1.9].
 
       if (! teq (rng_base + (n_elt - 1) * rng_inc, rng_limit))
         {
           if (teq (rng_base + (n_elt - 2) * rng_inc, rng_limit))
             n_elt--;
           else if (teq (rng_base + n_elt * rng_inc, rng_limit))
             n_elt++;
         }
@@ -592,28 +594,28 @@ Range::numel_internal (void) const
     }
 
   return retval;
 }
 
 double
 Range::limit_internal (void) const
 {
-  double tmp_limit = rng_limit;
+  double new_limit = rng_limit;
 
   if (rng_inc > 0)
-    tmp_limit = max ();
+    new_limit = max ();
   else
-    tmp_limit = min ();
+    new_limit = min ();
 
-  // If result must be an integer then force the limit to be one.
+  // If result must be an integer then force the new_limit to be one.
   if (all_elements_are_ints ())
-    tmp_limit = std::round (tmp_limit);
+    new_limit = std::round (new_limit);
 
-  return (tmp_limit != rng_limit) ? tmp_limit : rng_limit;
+  return new_limit;
 }
 
 void
 Range::init (void)
 {
   rng_numel = numel_internal ();
   rng_limit = limit_internal ();
 
diff --git a/liboctave/array/Range.h b/liboctave/array/Range.h
--- a/liboctave/array/Range.h
+++ b/liboctave/array/Range.h
@@ -65,30 +65,29 @@ public:
     if (! octave::math::isfinite (b) || ! octave::math::isfinite (i)
         || ! octave::math::isfinite (rng_limit))
       rng_numel = -2;
     else
       {
         // Code below is only needed if the resulting range must be 100%
         // correctly constructed.  If the Range object created is only
         // a temporary one used by operators this may be unnecessary.
-
         rng_limit = limit_internal ();
       }
   }
 
   double base (void) const { return rng_base; }
   double limit (void) const { return rng_limit; }
   double inc (void) const { return rng_inc; }
 
+  octave_idx_type numel (void) const { return rng_numel; }
+
   OCTAVE_DEPRECATED (4.4, "use 'numel' instead")
   octave_idx_type nelem (void) const { return numel (); }
 
-  octave_idx_type numel (void) const { return rng_numel; }
-
   octave_idx_type rows (void) const { return 1; }
 
   octave_idx_type cols (void) const { return numel (); }
   octave_idx_type columns (void) const { return numel (); }
 
   bool isempty (void) const { return numel () == 0; }
 
   OCTAVE_DEPRECATED (4.4, "use 'isempty' instead")
@@ -103,17 +102,16 @@ public:
   double max (void) const;
 
   void sort_internal (bool ascending = true);
   void sort_internal (Array<octave_idx_type>& sidx, bool ascending = true);
 
   Matrix diag (octave_idx_type k = 0) const;
 
   Range sort (octave_idx_type dim = 0, sortmode mode = ASCENDING) const;
-
   Range sort (Array<octave_idx_type>& sidx, octave_idx_type dim = 0,
               sortmode mode = ASCENDING) const;
 
   sortmode issorted (sortmode mode = ASCENDING) const;
 
   OCTAVE_DEPRECATED (4.4, "use 'issorted' instead")
   sortmode is_sorted (sortmode mode = ASCENDING) const
   { return issorted (mode); }
@@ -180,22 +178,16 @@ protected:
   {
     if (! octave::math::isfinite (b) || ! octave::math::isfinite (i)
         || ! octave::math::isfinite (l))
       rng_numel = -2;
   }
 };
 
 extern OCTAVE_API Range operator - (const Range& r);
-
 extern OCTAVE_API Range operator + (double x, const Range& r);
-
 extern OCTAVE_API Range operator + (const Range& r, double x);
-
 extern OCTAVE_API Range operator - (double x, const Range& r);
-
 extern OCTAVE_API Range operator - (const Range& r, double x);
-
 extern OCTAVE_API Range operator * (double x, const Range& r);
-
 extern OCTAVE_API Range operator * (const Range& r, double x);
 
 #endif
diff --git a/test/range.tst b/test/range.tst
--- a/test/range.tst
+++ b/test/range.tst
@@ -102,16 +102,42 @@
 
 %!assert (max (rneg), -0)
 %!assert (signbit (max (rneg)), true)
 
 %!assert (sort (r, "descend"), [3 2 1 -0])
 %!assert (signbit (sort (r, "descend")), logical ([0 0 0 1]))
 %!assert (signbit (sort (rrev, "ascend")), logical ([1 0 0 0]))
 
+## Test mathematical operations (also, non-finite values and 0)
+%!shared r
+%! r = 1:5;
+
+%!assert (-r, -1:-1:-5)
+%!assert (1 + r, 2:6)
+%!assert (Inf + r, Inf (1,5))
+%!assert (NaN + r, NaN (1,5))
+%!assert (r + 1, 2:6)
+%!assert (r + Inf, Inf (1,5))
+%!assert (r + NaN, NaN (1,5))
+%!assert (1 - r, 0:-1:-4)
+%!assert (Inf - r, Inf (1,5))
+%!assert (NaN - r, NaN (1,5))
+%!assert (r - 1, 0:4)
+%!assert (r - Inf, -Inf (1,5))
+%!assert (r - NaN, NaN (1,5))
+%!assert (2 * r, 2:2:10)
+%!assert (0 * r, zeros (1,5))
+%!assert (Inf * r, Inf (1,5))
+%!assert (NaN * r, NaN (1,5))
+%!assert (r * 2, 2:2:10)
+%!assert (r * 0, zeros (1,5))
+%!assert (r * Inf, Inf (1,5))
+%!assert (r * NaN, NaN (1,5))
+
 ## Test sorting of ranges (bug #45739)
 %!shared r, rrev
 %! r = 1:2:10;
 %! rrev = 10:-2:1;
 
 %!assert <*45739> (sort (r, "descend"), [9 7 5 3 1])
 %!assert <*45739> (sort (rrev, "ascend"), [2 4 6 8 10])
 
