# HG changeset patch
# User Marco Caliari <marco.caliari@univr.it>
# Date 1311790881 25200
#      Wed Jul 27 11:21:21 2011 -0700
# Branch stable
# Node ID 72ffa81a68d44e46d1d46147c4250be13669067b
# Parent  67bf9b30f3f968e848b9c2596da603d513ebe28d
legendre.m: Allow ND-array inputs (Bug #33526).

* legendre.m: Allow ND-array inputs (Bug #33526).

diff --git a/scripts/specfun/legendre.m b/scripts/specfun/legendre.m
--- a/scripts/specfun/legendre.m
+++ b/scripts/specfun/legendre.m
@@ -161,17 +161,17 @@ function retval = legendre (n, x, normal
   if (nargin < 2 || nargin > 3)
     print_usage ();
   endif
 
   if (!isscalar (n) || n < 0 || n != fix (n))
     error ("legendre: N must be a non-negative scalar integer");
   endif
 
-  if (!isvector (x) || !isreal (x) || any (x < -1 | x > 1))
+  if (!isreal (x) || any (x(:) < -1 | x(:) > 1))
     error ("legendre: X must be real-valued vector in the range -1 <= X <= 1");
   endif
 
   if (nargin == 3)
     normalization = lower (normalization);
   else
     normalization = "unnorm";
   endif
@@ -182,28 +182,26 @@ function retval = legendre (n, x, normal
     case "sch"
       scale = sqrt (2);
     case "unnorm"
       scale = 1;
     otherwise
       error ('legendre: expecting NORMALIZATION option to be "norm", "sch", or "unnorm"');
   endswitch
 
-  if (rows (x) != 1)
-    x = x';
-  endif
-  scale = scale * ones (1, numel (x));
+  scale = scale * ones (size (x));
 
   ## Based on the recurrence relation below
   ##            m                 m              m
   ## (n-m+1) * P (x) = (2*n+1)*x*P (x)  - (n+1)*P (x)
   ##            n+1               n              n-1
   ## http://en.wikipedia.org/wiki/Associated_Legendre_function
 
   overflow = false;
+  retval = zeros([n+1, size(x)]);
   for m = 1:n
     lpm1 = scale;
     lpm2 = (2*m-1) .* x .* scale;
     lpm3 = lpm2;
     for k = m+1:n
       lpm3a = (2*k-1) .* x .* lpm2;
       lpm3b = (k+m-2) .* lpm1;
       lpm3 = (lpm3a - lpm3b)/(k-m+1);
@@ -212,39 +210,45 @@ function retval = legendre (n, x, normal
       if (! warned_overflow)
         if (any (abs (lpm3a) > realmax)
             || any (abs (lpm3b) > realmax)
             || any (abs (lpm3)  > realmax))
           overflow = true;
         endif
       endif
     endfor
-    retval(m,:) = lpm3;
+    retval(m,:) = lpm3(:);
     if (strcmp (normalization, "unnorm"))
       scale = -scale * (2*m-1);
     else
       ## normalization == "sch" or normalization == "norm"
       scale = scale / sqrt ((n-m+1)*(n+m))*(2*m-1);
     endif
     scale = scale .* sqrt(1-x.^2);
   endfor
 
-  retval(n+1,:) = scale;
+  retval(n+1,:) = scale(:);
+
+  if (isvector (x))
+  ## vector case is special
+    retval = reshape (retval, n + 1, length (x));
+  endif
 
   if (strcmp (normalization, "sch"))
     retval(1,:) = retval(1,:) / sqrt (2);
   endif
 
   if (overflow && ! warned_overflow)
     warning ("legendre: overflow - results may be unstable for high orders");
     warned_overflow = true;
   endif
 
 endfunction
 
+
 %!test
 %! result = legendre (3, [-1.0 -0.9 -0.8]);
 %! expected = [
 %!    -1.00000  -0.47250  -0.08000
 %!     0.00000  -1.99420  -1.98000
 %!     0.00000  -2.56500  -4.32000
 %!     0.00000  -1.24229  -3.24000
 %! ];
@@ -273,21 +277,35 @@ endfunction
 %!test
 %! result = legendre (151, 0);
 %! ## Don't compare to "-Inf" since it would fail on 64 bit systems.
 %! assert (result(end) < -1.7976e308 && all (isfinite (result(1:end-1))));
 
 %!test
 %! result = legendre (150, 0);
 %! ## This agrees with Matlab's result.
-%! assert (result(end), 3.7532741115719e+306, 0.0000000000001e+306)
+%! assert (result(end), 3.7532741115719e+306, 0.0000000000001e+306);
 
 %!test
 %! result = legendre (0, 0:0.1:1);
-%! assert (result, full(ones(1,11)))
+%! assert (result, full(ones(1,11)));
+
+%!test
+%! result = legendre (3, [-1,0,1;1,0,-1]);
+%! ## Test matrix input
+%! expected(:,:,1) = [-1,1;0,0;0,0;0,0];
+%! expected(:,:,2) = [0,0;1.5,1.5;0,0;-15,-15];
+%! expected(:,:,3) = [1,-1;0,0;0,0;0,0];
+%! assert (result, expected);
+
+%!test
+%! result = legendre (3, [-1,0,1;1,0,-1]');
+%! expected(:,:,1) = [-1,0,1;0,1.5,0;0,0,0;0,-15,0];
+%! expected(:,:,2) = [1,0,-1;0,1.5,0;0,0,0;0,-15,0];
+%! assert (result, expected);
 
 %% Check correct invocation
 %!error legendre ();
 %!error legendre (1);
 %!error legendre (1,2,3,4);
 %!error legendre ([1, 2], [-1, 0, 1]);
 %!error legendre (-1, [-1, 0, 1]);
 %!error legendre (1.1, [-1, 0, 1]);
