# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1470973949 -3600
#      Fri Aug 12 04:52:29 2016 +0100
# Node ID dd0d2a27e5b3685dc311d1dfb767f3347b49d6a2
# Parent  e70183e8264f03088a2cfe90070d3cbdffb20c35
doc: fix indexing note on doxygen docs for Array<T>.

diff --git a/liboctave/array/Array.h b/liboctave/array/Array.h
--- a/liboctave/array/Array.h
+++ b/liboctave/array/Array.h
@@ -43,29 +43,29 @@ along with Octave; see the file COPYING.
 #include "quit.h"
 #include "oct-refcount.h"
 
 //! N Dimensional Array with copy-on-write semantics.
 /*!
     The Array class is at the root of Octave.  It provides a container
     with an arbitrary number of dimensions.  The operator () provides
     access to individual elements via subscript and linear indexing.
-    Indexing starts at 1, and arrays are column-major order as in Fortran.
+    Indexing starts at 0.  Arrays are column-major order as in Fortran.
 
     @code{.cc}
     // 3 D Array with 10 rows, 20 columns, and 5 pages, filled with 7.0
     Array<double> A Array<double (dim_vector (10, 20, 5), 7.0);
 
-    // set value for row 5, column 10, and page 3
-    A(5, 10, 3) = 2.5;
+    // set value for row 0, column 10, and page 3
+    A(0, 10, 3) = 2.5;
 
-    // get value for row 1, column 2, and page 1
-    double v = A(1, 2, 1);
+    // get value for row 1, column 2, and page 0
+    double v = A(1, 2, 0);
 
-    // get value for 24th element (row 4, column 3, page 1)
+    // get value for 25th element (row 4, column 3, page 1)
     double v = A(24);
     @endcode
 
     ## Notes on STL compatibility
 
     ### size() and length()
 
     To access the total number of elements in an Array, use numel()
