# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1297732984 28800
#      Mon Feb 14 17:23:04 2011 -0800
# Node ID f2c080bbd8a5f7040a61d3c3a6b4e71aab3761c8
# Parent  890e89c3dfebad34de2d6a8e36e79f23f35b2440
Fix documentation bugs uncovered while rewriting munge-texi.

Add missing commas to @seealso macro calls for some script functions.
Remove @DOCSTRING references to functions without help text references.

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,13 @@
+2010-02-14  Rik  <octave@nomad.inbox5.com>
+
+	* interpreter/arith.txi, interpreter/io.txi, interpreter/oop.txi:
+	Remove functions which have no DOCSTRING entries.
+
 2011-02-06  John W. Eaton  <jwe@octave.org>
 
 	* interpreter/contributors.in: Add Fotios Kasolis to the list.
 
 2010-02-05  Rik  <octave@nomad.inbox5.com>
 
 	* interpreter/doccheck/mk_undocumented_list: Add dbnext, alias for
 	dbstep, to functions not requiring a docstring.
diff --git a/doc/interpreter/arith.txi b/doc/interpreter/arith.txi
--- a/doc/interpreter/arith.txi
+++ b/doc/interpreter/arith.txi
@@ -209,18 +209,16 @@ cos (pi/2)
 @DOCSTRING(factor)
 
 @DOCSTRING(factorial)
 
 @DOCSTRING(fix)
 
 @DOCSTRING(floor)
 
-@DOCSTRING(fmod)
-
 @DOCSTRING(gcd)
 
 @DOCSTRING(gradient)
 
 @DOCSTRING(hypot)
 
 @DOCSTRING(lcm)
 
diff --git a/doc/interpreter/io.txi b/doc/interpreter/io.txi
--- a/doc/interpreter/io.txi
+++ b/doc/interpreter/io.txi
@@ -992,18 +992,16 @@ within Octave needs to access data.  Whe
 files will be deleted, so this step need not be executed manually.
 
 @DOCSTRING(mkstemp)
 
 @DOCSTRING(tmpfile)
 
 @DOCSTRING(tmpnam)
 
-@DOCSTRING(octave_tmp_file_name)
-
 @node EOF and Errors, File Positioning, Temporary Files, C-Style I/O Functions
 @subsection End of File and Errors
 
 Once a file has been opened its status can be acquired.  As an example
 the @code{feof} functions determines if the end of the file has been
 reached.  This can be very useful when reading small parts of a file
 at a time.  The following example shows how to read one line at a time
 from a file until the end has been reached.
diff --git a/doc/interpreter/oop.txi b/doc/interpreter/oop.txi
--- a/doc/interpreter/oop.txi
+++ b/doc/interpreter/oop.txi
@@ -294,32 +294,29 @@ The equivalent functionality for subscri
 
 Note that the @code{subsref} and @code{subsasgn} methods always receive the
 whole index chain, while they usually handle only the first element.  It is the
 responsibility of these methods to handle the rest of the chain (if needed),
 usually by forwarding it again to @code{subsref} or @code{subsasgn}.
 
 If you wish to use the @code{end} keyword in subscripted expressions
 of an object, then the user needs to define the @code{end} method for 
-the class.
-
-@DOCSTRING(end)
-
-For example the @code{end} method for our polynomial class might look like
+the class.  For example, the @code{end} method for our polynomial class might
+look like
 
 @example
 @group
 @EXAMPLEFILE(@polynomial/end.m)
 @end group
 @end example
 
 @noindent
 which is a fairly generic @code{end} method that has a behavior similar to
-the @code{end} keyword for Octave Array classes.  It can then be used for
-example like
+the @code{end} keyword for Octave Array classes.  It can then be used as 
+follows:
 
 @example
 @group
 p = polynomial([1,2,3,4]);
 p(end-1)
 @result{} 3
 @end group
 @end example
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,14 @@
+2010-02-14  Rik  <octave@nomad.inbox5.com>
+
+	* plot/semilogxerr.m, plot/semilogyerr.m, special-matrix/pascal.m,
+	special-matrix/rosser.m, special-matrix/wilkinson.m: Add missing
+	commas in @seealso macro.
+
 2011-02-14  David Bateman  <dbateman@free.fr>
 
 	* testfun/test.m: More explicit error message when source of a
 	dynamically linked function is not found.
 
 	* plot/private/__scatter__.m: Correctly set the facevertexcdata and
 	faces properties in the patch objects.
 
diff --git a/scripts/plot/semilogxerr.m b/scripts/plot/semilogxerr.m
--- a/scripts/plot/semilogxerr.m
+++ b/scripts/plot/semilogxerr.m
@@ -26,17 +26,17 @@
 ## semilogxerr (@var{x}, @var{y}, @var{ey}, @var{fmt})
 ## @end example
 ##
 ## @noindent
 ## which produces a semi-logarithmic plot of @var{y} versus @var{x}
 ## with errors in the @var{y}-scale defined by @var{ey} and the plot
 ## format defined by @var{fmt}.  See @code{errorbar} for available formats and
 ## additional information.
-## @seealso{errorbar, loglogerr semilogyerr}
+## @seealso{errorbar, loglogerr, semilogyerr}
 ## @end deftypefn
 
 ## Created: 20.2.2001
 ## Author: Teemu Ikonen <tpikonen@pcu.helsinki.fi>
 ## Keywords: errorbar, plotting
 
 function retval = semilogxerr (varargin)
 
diff --git a/scripts/plot/semilogyerr.m b/scripts/plot/semilogyerr.m
--- a/scripts/plot/semilogyerr.m
+++ b/scripts/plot/semilogyerr.m
@@ -26,17 +26,17 @@
 ## semilogyerr (@var{x}, @var{y}, @var{ey}, @var{fmt})
 ## @end example
 ##
 ## @noindent
 ## which produces a semi-logarithmic plot of @var{y} versus @var{x}
 ## with errors in the @var{y}-scale defined by @var{ey} and the plot
 ## format defined by @var{fmt}.  See @code{errorbar} for available formats and
 ## additional information.
-## @seealso{errorbar, loglogerr semilogxerr}
+## @seealso{errorbar, loglogerr, semilogxerr}
 ## @end deftypefn
 
 ## Created: 20.2.2001
 ## Author: Teemu Ikonen <tpikonen@pcu.helsinki.fi>
 ## Keywords: errorbar, plotting
 
 function retval = semilogyerr (varargin)
 
diff --git a/scripts/special-matrix/pascal.m b/scripts/special-matrix/pascal.m
--- a/scripts/special-matrix/pascal.m
+++ b/scripts/special-matrix/pascal.m
@@ -25,17 +25,17 @@
 ## the Pascal matrix if @code{@var{t} = 1}.  This matrix is its own
 ## inverse, that is @code{pascal (@var{n}, 1) ^ 2 == eye (@var{n})}.
 ## If @code{@var{t} = -1}, return its absolute value.  This is the
 ## standard Pascal triangle as a lower-triangular matrix.
 ## If @code{@var{t} = 2}, return a transposed and permuted version of
 ## @code{pascal (@var{n}, 1)}, which is the cube-root of the identity
 ## matrix.  That is @code{pascal (@var{n}, 2) ^ 3 == eye (@var{n})}.
 ##
-## @seealso{hankel, vander, sylvester_matrix, hilb, invhilb, toeplitz
+## @seealso{hankel, vander, sylvester_matrix, hilb, invhilb, toeplitz,
 ##          hadamard, wilkinson, compan, rosser}
 ## @end deftypefn
 
 ## Author: Peter Ekberg
 ##         (peda)
 
 function retval = pascal (n, t)
 
diff --git a/scripts/special-matrix/rosser.m b/scripts/special-matrix/rosser.m
--- a/scripts/special-matrix/rosser.m
+++ b/scripts/special-matrix/rosser.m
@@ -16,17 +16,17 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} rosser ()
 ## Return the Rosser matrix.  This is a difficult test case used to evaluate
 ## eigenvalue algorithms.
 ##
-## @seealso{hankel, vander, sylvester_matrix, hilb, invhilb, toeplitz
+## @seealso{hankel, vander, sylvester_matrix, hilb, invhilb, toeplitz,
 ##          hadamard, wilkinson, compan, pascal}
 ## @end deftypefn
 
 ## Author: Peter Ekberg
 ##         (peda)
 
 function retval = rosser ()
 
diff --git a/scripts/special-matrix/wilkinson.m b/scripts/special-matrix/wilkinson.m
--- a/scripts/special-matrix/wilkinson.m
+++ b/scripts/special-matrix/wilkinson.m
@@ -17,18 +17,18 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} wilkinson (@var{n})
 ## Return the Wilkinson matrix of order @var{n}.  Wilkinson matrices are
 ## symmetric and tridiagonal with pairs of nearly, but not exactly, equal
 ## eigenvalues.
 ##
-## @seealso{hankel, vander, sylvester_matrix, hilb, invhilb, toeplitz
-##           hadamard, rosser, compan, pascal}
+## @seealso{hankel, vander, sylvester_matrix, hilb, invhilb, toeplitz,
+##          hadamard, rosser, compan, pascal}
 ## @end deftypefn
 
 ## Author: Peter Ekberg
 ##         (peda)
 
 function retval = wilkinson (n)
 
   if (nargin != 1)
@@ -45,9 +45,9 @@ function retval = wilkinson (n)
 
 endfunction
 
 %!assert (wilkinson(1), [])
 %!assert (wilkinson(2), [0.5,1;1,0.5])
 %!assert (wilkinson(3), [1,1,0;1,0,1;0,1,1])
 %!assert (wilkinson(4), [1.5,1,0,0;1,0.5,1,0;0,1,0.5,1;0,0,1,1.5])
 %!error (wilkinson())
-%!error (wilkinson(1,2))
\ No newline at end of file
+%!error (wilkinson(1,2))
