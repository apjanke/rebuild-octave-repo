# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1277376215 -7200
#      Thu Jun 24 12:43:35 2010 +0200
# Node ID df1a3e0ebbff938a07e10d62d3ff0471e0035308
# Parent  d699a6c63263d9471568d131d427deab2bd32e59
important fixes for struct rewrite(1)

diff --git a/src/oct-map.cc b/src/oct-map.cc
--- a/src/oct-map.cc
+++ b/src/oct-map.cc
@@ -834,17 +834,17 @@ octave_map::assign (const idx_vector& i,
       optimize_dimensions ();
     }
   else
     {
       Array<octave_idx_type> perm;
       octave_map rhs1 = rhs.orderfields (*this, perm);
       if (! error_state)
         {
-          assert (rhs1.xkeys.is_same (rhs.xkeys));
+          assert (rhs1.xkeys.is_same (xkeys));
           assign (i, rhs1);
         }
       else
         error ("incompatible fields in struct assignment");
     }
 }
 
 void
@@ -871,17 +871,17 @@ octave_map::assign (const idx_vector& i,
       optimize_dimensions ();
     }
   else
     {
       Array<octave_idx_type> perm;
       octave_map rhs1 = rhs.orderfields (*this, perm);
       if (! error_state)
         {
-          assert (rhs1.xkeys.is_same (rhs.xkeys));
+          assert (rhs1.xkeys.is_same (xkeys));
           assign (i, j, rhs1);
         }
       else
         error ("incompatible fields in struct assignment");
     }
 }
 
 void
@@ -908,17 +908,17 @@ octave_map::assign (const Array<idx_vect
       optimize_dimensions ();
     }
   else
     {
       Array<octave_idx_type> perm;
       octave_map rhs1 = rhs.orderfields (*this, perm);
       if (! error_state)
         {
-          assert (rhs1.xkeys.is_same (rhs.xkeys));
+          assert (rhs1.xkeys.is_same (xkeys));
           assign (ia, rhs1);
         }
       else
         error ("incompatible fields in struct assignment");
     }
 }
 
 void
@@ -965,16 +965,47 @@ octave_map::assign (const octave_value_l
         if (! error_state)
           assign (ia, rhs);
       }
       break;
     }
 }
 
 void
+octave_map::assign (const octave_value_list& idx, const std::string& k,
+                    const Cell& rhs)
+{
+  Cell tmp;
+  iterator p = seek (k);
+  Cell& ref = p != end () ? contents (p) : tmp;
+
+  if (&ref == &tmp)
+    ref.clear (dimensions);
+
+  ref.assign (idx, rhs);
+    
+  if (! error_state && ref.dims () != dimensions)
+    {
+      dimensions = ref.dims ();
+
+      octave_idx_type nf = nfields ();
+      for (octave_idx_type k = 0; k < nf; k++)
+        {
+          if (&xvals[k] != &ref)
+            xvals[k].resize (dimensions, Cell::resize_fill_value ());
+        }
+
+      optimize_dimensions ();
+    }
+
+  if (! error_state && &ref == &tmp)
+    setfield (k, tmp);
+}
+
+void
 octave_map::delete_elements (const idx_vector& i)
 {
   octave_idx_type nf = nfields ();
   for (octave_idx_type k = 0; k < nf; k++)
     xvals[k].delete_elements (i);
 
   if (nf > 0)
     dimensions = xvals[0].dims ();
diff --git a/src/oct-map.h b/src/oct-map.h
--- a/src/oct-map.h
+++ b/src/oct-map.h
@@ -393,16 +393,19 @@ public:
   void assign (const idx_vector& i, const octave_map& rhs);
 
   void assign (const idx_vector& i, const idx_vector& j, const octave_map& rhs);
 
   void assign (const Array<idx_vector>& ia, const octave_map& rhs);
 
   void assign (const octave_value_list&, const octave_map& rhs);
   
+  void assign (const octave_value_list& idx, const std::string& k,
+               const Cell& rhs);
+
   void delete_elements (const idx_vector& i);
 
   void delete_elements (int dim, const idx_vector& i);
 
   void delete_elements (const Array<idx_vector>& ia);
 
   void delete_elements (const octave_value_list&);
 
diff --git a/src/ov-struct.cc b/src/ov-struct.cc
--- a/src/ov-struct.cc
+++ b/src/ov-struct.cc
@@ -426,34 +426,34 @@ octave_struct::subsasgn (const std::stri
                         dim_vector didx = dims ().redim (idxf.length ());
                         for (octave_idx_type k = 0; k < idxf.length (); k++)
                           if (! idxf(k).is_magic_colon ()) didx(k) = idxf(k).numel ();
 
                         if (didx.numel () == tmp_cell.numel ())
                           tmp_cell = tmp_cell.reshape (didx);
 
 
-                        map.contents (key).assign (idxf, tmp_cell);
+                        map.assign (idxf, key, tmp_cell);
 
                         if (! error_state)
                           {
                             count++;
                             retval = octave_value (this);
                           }
                         else
                           gripe_failed_assignment ();
                       }
                     else 
                       {
                         const octave_map& cmap = const_cast<const octave_map &> (map);
                         // cast map to const reference to avoid forced key insertion.
                         if (idxf.all_scalars () 
                             || cmap.contents (key).index (idxf, true).numel () == 1)
                           {
-                            map.contents (key).assign (idxf, Cell (t_rhs.storable_value ()));
+                            map.assign (idxf, key, Cell (t_rhs.storable_value ()));
                             if (! error_state)
                               {
                                 count++;
                                 retval = octave_value (this);
                               }
                             else
                               gripe_failed_assignment ();
                           }
@@ -1234,16 +1234,19 @@ octave_scalar_struct::subsasgn (const st
                 t_rhs = tmp.subsasgn (next_type, next_idx, rhs);
             }
         }
 
       if (! error_state)
         map.setfield (key, t_rhs.storable_value ());
       else
         gripe_failed_assignment ();
+
+      count++;
+      retval = this;
     }
   else
     {
       // Forward this case to octave_struct.
       octave_value tmp (new octave_struct (octave_map (map)));
       retval = tmp.subsasgn (type, idx, rhs);
     }
 
