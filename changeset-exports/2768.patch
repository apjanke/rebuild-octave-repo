# HG changeset patch
# User jwe
# Date 857185957 0
#      Sat Mar 01 03:12:37 1997 +0000
# Node ID ee9582e6668f29213d70bf539e766c4b32eac876
# Parent  c05ed7ef4c1a510d6ccbae2199eed20d53183119
[project @ 1997-03-01 03:12:36 by jwe]

diff --git a/doc/interpreter/arith.texi b/doc/interpreter/arith.texi
--- a/doc/interpreter/arith.texi
+++ b/doc/interpreter/arith.texi
@@ -411,34 +411,34 @@ For a vector argument, return the sum of
 elements.  For a matrix argument, return the sum of the squares of the
 elements in each column, as a row vector.
 @end deftypefn
 
 @node Special Functions, Mathematical Constants, Sums and Products, Arithmetic
 @section Special Functions
 
 @deftypefn {Mapping Function} {} beta (@var{a}, @var{b})
-Returns the Beta function,
+Return the Beta function,
 @iftex
 @tex
 $$
  B (a, b) = {\Gamma (a) \Gamma (b) \over \Gamma (a + b)}.
 $$
 @end tex
 @end iftex
 @ifinfo
 
 @example
 beta (a, b) = gamma (a) * gamma (b) / gamma (a + b).
 @end example
 @end ifinfo
 @end deftypefn
 
 @deftypefn {Mapping Function} {} betai (@var{a}, @var{b}, @var{x})
-Returns the incomplete Beta function,
+Return the incomplete Beta function,
 @iftex
 @tex
 $$
  \beta (a, b, x) = B (a, b)^{-1} \int_0^x t^{(a-z)} (1-t)^{(b-1)} dt.
 $$
 @end tex
 @end iftex
 @ifinfo
@@ -453,17 +453,17 @@ betai (a, b, x) = beta (a, b)^(-1) | t^(
 @end ifinfo
 
 If x has more than one component, both @var{a} and @var{b} must be
 scalars.  If @var{x} is a scalar, @var{a} and @var{b} must be of
 compatible dimensions.
 @end deftypefn
 
 @deftypefn {Mapping Function} {} bincoeff (@var{n}, @var{k})
-Returns the binomial coefficient of @var{n} and @var{k}, defined as
+Return the binomial coefficient of @var{n} and @var{k}, defined as
 @iftex
 @tex
 $$
  {n \choose k} = {n (n-1) (n-2) \cdots (n-k+1) \over k!}
 $$
 @end tex
 @end iftex
 @ifinfo
@@ -571,33 +571,33 @@ If @var{a} is scalar, then @code{gammai 
 for each element of @var{x} and vice versa.
 
 If neither @var{a} nor @var{x} is scalar, the sizes of @var{a} and
 @var{x} must agree, and @var{gammai} is applied element-by-element.
 @end deftypefn
 
 @deftypefn {Mapping Function} {} lgamma (@var{a}, @var{x})
 @deftypefnx {Mapping Function} {} gammaln (@var{a}, @var{x})
-Returns the natural logarithm of the gamma function.
+Return the natural logarithm of the gamma function.
 @end deftypefn
 
 @deftypefn {Function File} {} cross (@var{x}, @var{y})
 Computes the vector cross product of the two 3-dimensional vectors
 @var{x} and @var{y}.  For example,
 
 @example
 @group
 cross ([1,1,0], [0,1,1])
      @result{} [ 1; -1; 1 ]
 @end group
 @end example
 @end deftypefn
 
 @deftypefn {Function File} {} commutation_matrix (@var{m}, @var{n})
-Returns the commutation matrix
+Return the commutation matrix
 @iftex
 @tex
  $K_{m,n}$
 @end tex
 @end iftex
 @ifinfo
  K(m,n)
 @end ifinfo
@@ -649,17 +649,17 @@ If only one argument @var{m} is given,
 @end ifinfo
  is returned.
 
 See Magnus and Neudecker (1988), Matrix differential calculus with
 applications in statistics and econometrics.
 @end deftypefn
 
 @deftypefn {Function File} {} duplication_matrix (@var{n})
-Returns the duplication matrix
+Return the duplication matrix
 @iftex
 @tex
  $D_n$
 @end tex
 @end iftex
 @ifinfo
  @var{D}_@var{n}
 @end ifinfo
diff --git a/doc/interpreter/io.texi b/doc/interpreter/io.texi
--- a/doc/interpreter/io.texi
+++ b/doc/interpreter/io.texi
@@ -1438,24 +1438,24 @@ Since the named file is not opened, by @
 is possible (though relatively unlikely) that it will not be available
 by the time your program attempts to open it.
 @end deftypefn
 
 @node EOF and Errors, File Positioning, Temporary Files, C-Style I/O Functions
 @subsection End of File and Errors
 
 @deftypefn {Built-in Function} {} feof (@var{fid})
-Returns 1 if an end-of-file condition has been encountered for a given
+Return 1 if an end-of-file condition has been encountered for a given
 file and 0 otherwise.  Note that it will only return 1 if the end of the
 file has already been encountered, not if the next read operation will
 result in an end-of-file condition.
 @end deftypefn
 
 @deftypefn {Built-in Function} {} ferror (@var{fid})
-Returns 1 if an error condition has been encountered for a given file
+Return 1 if an error condition has been encountered for a given file
 and 0 otherwise.  Note that it will only return 1 if an error has
 already been encountered, not if the next operation will result in an
 error condition.
 @end deftypefn
 
 @deftypefn {Built-in Function} {} freport ()
 Print a list of which files have been opened, and whether they are open
 for reading, writing, or both.  For example,
diff --git a/doc/interpreter/linalg.texi b/doc/interpreter/linalg.texi
--- a/doc/interpreter/linalg.texi
+++ b/doc/interpreter/linalg.texi
@@ -149,41 +149,41 @@ If @var{a} is a vector or a scalar:
 @code{min (abs (@var{a}))}.
 
 @item other
 p-norm of @var{a}, @code{(sum (abs (@var{a}) .^ @var{p})) ^ (1/@var{p})}.
 @end table
 @end deftypefn
 
 @deftypefn {Function File} {} null (@var{a}, @var{tol})
-Returns an orthonormal basis of the null space of @var{a}.
+Return an orthonormal basis of the null space of @var{a}.
 
 The dimension of the null space is taken as the number of singular
 values of @var{a} not greater than @var{tol}.  If the argument @var{tol}
 is missing, it is computed as
 
 @example
 max (size (@var{a})) * max (svd (@var{a})) * eps
 @end example
 @end deftypefn
 
 @deftypefn {Function File} {} orth (@var{a}, @var{tol})
-Returns an orthonormal basis of the range space of @var{a}.
+Return an orthonormal basis of the range space of @var{a}.
 
 The dimension of the range space is taken as the number of singular
 values of @var{a} greater than @var{tol}.  If the argument @var{tol} is
 missing, it is computed as
 
 @example
 max (size (@var{a})) * max (svd (@var{a})) * eps
 @end example
 @end deftypefn
 
 @deftypefn {Function File} {} pinv (@var{x}, @var{tol})
-Returns the pseudoinverse of @var{x}.  Singular values less than
+Return the pseudoinverse of @var{x}.  Singular values less than
 @var{tol} are ignored. 
 
 If the second argument is omitted, it is assumed that
 
 @example
 tol = max (size (@var{x})) * sigma_max (@var{x}) * eps,
 @end example
 
@@ -666,18 +666,18 @@ If given a second argument, @code{svd} r
 decomposition, eliminating the unnecessary rows or columns of @var{u} or
 @var{v}.
 @end deftypefn
 
 @node Functions of a Matrix,  , Matrix Factorizations, Linear Algebra
 @section Functions of a Matrix
 
 @deftypefn {Loadable Function} {} expm (@var{a})
-Returns the exponential of a matrix, defined as the
-infinite Taylor series
+Return the exponential of a matrix, defined as the infinite Taylor
+series
 @iftex
 @tex
 $$
  \exp (A) = I + A + {A^2 \over 2!} + {A^3 \over 3!} + \cdots
 $$
 @end tex
 @end iftex
 @ifinfo
diff --git a/doc/interpreter/matrix.texi b/doc/interpreter/matrix.texi
--- a/doc/interpreter/matrix.texi
+++ b/doc/interpreter/matrix.texi
@@ -156,20 +156,20 @@ otherwise. For example,
 finite ([13, Inf, NaN])
 
      @result{} [ 1, 0, 0 ]
 @end group
 @end example
 @end deftypefn
 
 @deftypefn {Loadable Function} {} find (@var{x})
-The function @code{find} returns a vector of indices of nonzero elements
-of a matrix.  To obtain a single index for each matrix element, Octave
-pretends that the columns of a matrix form one long vector (like Fortran
-arrays are stored).  For example,
+Return a vector of indices of nonzero elements of a matrix.  To obtain a
+single index for each matrix element, Octave pretends that the columns
+of a matrix form one long vector (like Fortran arrays are stored).  For
+example,
 
 @example
 @group
 find (eye (2))
 
      @result{} [ 1; 4 ]
 @end group
 @end example
@@ -230,17 +230,17 @@ flipud ([1, 2; 3, 4])
 
      @result{}  3  4
          1  2
 @end group
 @end example
 @end deftypefn
 
 @deftypefn {Function File} {} rot90 (@var{x}, @var{n})
-Returns a copy of @var{x} with the elements rotated counterclockwise in
+Return a copy of @var{x} with the elements rotated counterclockwise in
 90-degree increments.  The second argument is optional, and specifies
 how many 90-degree rotations are to be applied (the default value is 1).
 Negative values of @var{n} rotate the matrix in a clockwise direction.
 For example,
 
 @example
 @group
 rot90 ([1, 2; 3, 4], -1)
@@ -301,17 +301,17 @@ matrix must match the total number of el
 @deftypefn {Function File} {} shift (@var{x}, @var{b})
 If @var{x} is a vector, perform a circular shift of length @var{b} of
 the elements of @var{x}.
 
 If @var{x} is a matrix, do the same for each column of @var{x}.
 @end deftypefn
 
 @deftypefn {Loadable Function} {[@var{s}, @var{i}] =} sort (@var{x})
-Returns a copy of @var{x} with the elements elements arranged in
+Return a copy of @var{x} with the elements elements arranged in
 increasing order.  For matrices, @code{sort} orders the elements in each
 column.
 
 For example,
 
 @example
 @group
 sort ([1, 2; 2, 3; 3, 1])
@@ -404,32 +404,32 @@ tril (ones (3), 1)
      @result{}  1  1  0
          1  1  1
          1  1  1
 @end group
 @end example
 @end deftypefn
 
 @deftypefn {Function File} {} vec (@var{x})
-For a matrix @var{x}, returns the vector obtained by stacking the
-columns of @var{x} one above the other.
+Return the vector obtained by stacking the columns of the matrix @var{x}
+one above the other.
 @end deftypefn
 
 @deftypefn {Function File} {} vech (@var{x})
-For a square matrix @var{x}, returns the vector obtained from @var{x}
-by eliminating all supradiagonal elements and stacking the result
-one column above the other.
+Return the vector obtained by eliminating all supradiagonal elements of
+the square matrix @var{x} and stacking the result one column above the
+other.
 @end deftypefn
 
 @node Special Utility Matrices, Famous Matrices, Rearranging Matrices, Matrix Manipulation
 @section Special Utility Matrices
 
 @deftypefn {Built-in Function} {} eye (@var{x})
 @deftypefnx {Built-in Function} {} eye (@var{n}, @var{m})
-Returns an identity matrix.  If invoked with a single scalar argument,
+Return an identity matrix.  If invoked with a single scalar argument,
 @code{eye} returns a square matrix with the dimension specified.  If you
 supply two scalar arguments, @code{eye} takes them to be the number of
 rows and columns.  If given a vector with two elements, @code{eye} uses
 the values of the elements as the number of rows and columns,
 respectively.  For example,
 
 @example
 @group
@@ -454,37 +454,37 @@ eye (size ([1, 2; 3, 4])
 @end example
 
 For compatibility with @sc{Matlab}, calling @code{eye} with no arguments
 is equivalent to calling it with an argument of 1.
 @end deftypefn
 
 @deftypefn {Built-in Function} {} ones (@var{x})
 @deftypefnx {Built-in Function} {} ones (@var{n}, @var{m})
-Returns a matrix whose elements are all 1.  The arguments are handled
+Return a matrix whose elements are all 1.  The arguments are handled
 the same as the arguments for @code{eye}.
 
 If you need to create a matrix whose values are all the same, you should
 use an expression like
 
 @example
 val_matrix = val * ones (n, m)
 @end example
 @end deftypefn
 
 @deftypefn {Built-in Function} {} zeros (@var{x})
 @deftypefnx {Built-in Function} {} zeros (@var{n}, @var{m})
-Returns a matrix whose elements are all 0.  The arguments are handled
+Return a matrix whose elements are all 0.  The arguments are handled
 the same as the arguments for @code{eye}.
 @end deftypefn
 
 @deftypefn {Loadable Function} {} rand (@var{x})
 @deftypefnx {Loadable Function} {} rand (@var{n}, @var{m})
 @deftypefnx {Loadable Function} {} rand (@code{"seed"}, @var{x})
-Returns a matrix with random elements uniformly distributed on the
+Return a matrix with random elements uniformly distributed on the
 interval (0, 1).  The arguments are handled the same as the arguments
 for @code{eye}.  In
 addition, you can set the seed for the random number generator using the
 form
 
 @example
 rand ("seed", @var{x})
 @end example
@@ -498,17 +498,17 @@ rand ("seed")
 
 @noindent
 @code{rand} returns the current value of the seed.
 @end deftypefn
 
 @deftypefn {Loadable Function} {} randn (@var{x})
 @deftypefnx {Loadable Function} {} randn (@var{n}, @var{m})
 @deftypefnx {Loadable Function} {} randn (@code{"seed"}, @var{x})
-Returns a matrix with normally distributed random elements.  The
+Return a matrix with normally distributed random elements.  The
 arguments are handled the same as the arguments for @code{eye}.  In
 addition, you can set the seed for the random number generator using the
 form
 
 @example
 randn ("seed", @var{x})
 @end example
 
@@ -565,17 +565,17 @@ single element of a random sequence.
 
 The @code{rand} and @code{randn} functions use Fortran code from
 @sc{Ranlib}, a library of fortran routines for random number generation,
 compiled by Barry W. Brown and James Lovato of the Department of
 Biomathematics at The University of Texas, M.D. Anderson Cancer Center,
 Houston, TX 77030.
 
 @deftypefn {Built-in Function} {} diag (@var{v}, @var{k})
-Returns a diagonal matrix with vector @var{v} on diagonal @var{k}.  The
+Return a diagonal matrix with vector @var{v} on diagonal @var{k}.  The
 second argument is optional.  If it is positive, the vector is placed on
 the @var{k}-th super-diagonal.  If it is negative, it is placed on the
 @var{-k}-th sub-diagonal.  The default value of @var{k} is 0, and the
 vector is placed on the main diagonal.  For example,
 
 @example
 @group
 diag ([1, 2, 3], 1)
diff --git a/doc/interpreter/poly.texi b/doc/interpreter/poly.texi
--- a/doc/interpreter/poly.texi
+++ b/doc/interpreter/poly.texi
@@ -96,38 +96,38 @@ a remander polynomial of lowest order.
 If @var{a} is a square @var{N}-by-@var{N} matrix, @code{poly (@var{a})}
 is the row vector of the coefficients of @code{det (z * eye (N) - a)},
 the characteristic polynomial of @var{a}.  If @var{x} is a vector,
 @code{poly (@var{x})} is a vector of coefficients of the polynomial
 whose roots are the elements of @var{x}.
 @end deftypefn
 
 @deftypefn {Function File} {} polyderiv (@var{c})
-Returns the coefficients of the derivative of the polynomial whose
+Return the coefficients of the derivative of the polynomial whose
 coefficients are given by vector @var{c}.
 @end deftypefn
 
 @deftypefn {Function File} {} polyfit (@var{n}, @var{y}, @var{n})
-Returns the coefficients of a polynomial @var{p}(@var{x}) of degree
+Return the coefficients of a polynomial @var{p}(@var{x}) of degree
 @var{n} that minimizes 
 @iftex
 @tex
 $$
 \sum_{i=1}^N (p(x_i) - y_i)^2
 $$
 @end tex
 @end iftex
 @ifinfo
 @code{sumsq (p(x(i)) - y(i))},
 @end ifinfo
  to best fit the data in the least squares sense.
 @end deftypefn
 
 @deftypefn {Function File} {} polyinteg (@var{c})
-Returns the coefficients of the integral the polynomial whose coefficients
+Return the coefficients of the integral the polynomial whose coefficients
 are represented by the vector @var{c}.
 
 The constant of integration is set to zero.
 @end deftypefn
 
 @deftypefn {Function File} {} polyreduce (@var{c})
 Reduces a polynomial coefficient vector to a minimum number of terms by
 stripping off any leading zeros.
diff --git a/doc/interpreter/set.texi b/doc/interpreter/set.texi
--- a/doc/interpreter/set.texi
+++ b/doc/interpreter/set.texi
@@ -4,19 +4,18 @@
 
 @node Sets, Polynomial Manipulations, Statistics, Top
 @chapter Sets
 
 Octave has a limited set of functions for managing sets of data, where a
 set is defined as a collection unique elements.
 
 @deftypefn {Function File} {} create_set (@var{x})
-Given a matrix or vector of values, the function @code{create_set}
-returns a row vector containing unique values, sorted in ascending
-order.  For example,
+Return a row vector containing the unique values in @var{x}, sorted in
+ascending order.  For example,
 
 @example
 @group
 create_set ([ 1, 2; 3, 4; 4, 2 ])
      @result{} [ 1, 2, 3, 4 ]
 @end group
 @end example
 @end deftypefn
@@ -41,17 +40,17 @@ For example,
 @group
 intersection ([ 1, 2, 3 ], [ 2, 3, 5 ])
      @result{} [ 2, 3 ]
 @end group
 @end example
 @end deftypefn
 
 @deftypefn {Function File} {} complement (@var{x}, @var{y})
-Returns the elements of set @var{y} that are not in set @var{x}.  For
+Return the elements of set @var{y} that are not in set @var{x}.  For
 example,
 
 @example
 @group
 complement ([ 1, 2, 3 ], [ 2, 3, 5 ])
      @result{} 5
 @end group
 @end example
diff --git a/doc/interpreter/signal.texi b/doc/interpreter/signal.texi
--- a/doc/interpreter/signal.texi
+++ b/doc/interpreter/signal.texi
@@ -57,38 +57,37 @@ Compute the two dimensional inverse FFT 
 
 The optional arguments @var{n} and @var{m} may be used specify the
 number of rows and columns of @var{a} to use.  If either of these is
 larger than the size of @var{a}, @var{a} is resized and padded with
 zeros.
 @end deftypefn
 
 @deftypefn {Built-in Function} {} fftconv (@var{a}, @var{b}, @var{n})
-This function returns the convolution of the vectors @var{a} and
-@var{b}, a vector with length equal to the @code{length (a) + length (b)
-- 1}.  If @var{a} and @var{b} are the coefficient vectors of two
-polynomials, the returned value is the coefficient vector of the product
-polynomial.
+Return the convolution of the vectors @var{a} and @var{b}, as a vector
+with length equal to the @code{length (a) + length (b) - 1}.  If @var{a}
+and @var{b} are the coefficient vectors of two polynomials, the returned
+value is the coefficient vector of the product polynomial.
 
 The computation uses the FFT by calling the function @code{fftfilt}.  If
 the optional argument @var{n} is specified, an N-point FFT is used.
 @end deftypefn
 
 @deftypefn {Function File} {} fftfilt (@var{b}, @var{x}, @var{n})
 
 With two arguments, @code{fftfilt} filters @var{x} with the FIR filter
 @var{b} using the FFT.
 
 Given the optional third argument, @var{n}, @code{fftfilt} uses the
 overlap-add method to filter @var{x} with @var{b} using an N-point FFT.
 @end deftypefn
 
 @deftypefn {Loadable Function} {y =} filter (@var{b}, @var{a}, @var{x})
-This function returns the solution to the following linear,
-time-invariant difference equation:
+Return the solution to the following linear, time-invariant difference
+equation:
 @iftex
 @tex
 $$
 \sum_{k=0}^N a_{k+1} y_{n-k} = \sum_{k=0}^M b_{k+1} x_{n-k}, \qquad
  1 \le n \le P
 $$
 @end tex
 @end iftex
diff --git a/doc/interpreter/special.texi b/doc/interpreter/special.texi
--- a/doc/interpreter/special.texi
+++ b/doc/interpreter/special.texi
@@ -14,17 +14,17 @@ purpose than to try to use other tricks 
 * Famous Matrices::             
 @end menu
 
 @node Special Utility Matrices, Famous Matrices, Special Matrices, Special Matrices
 @section Special Utility Matrices
 
 @deftypefn {Built-in Function} {} eye (@var{x})
 @deftypefnx {Built-in Function} {} eye (@var{n}, @var{m})
-Returns an identity matrix.  If invoked with a single scalar argument,
+Return an identity matrix.  If invoked with a single scalar argument,
 @code{eye} returns a square matrix with the dimension specified.  If you
 supply two scalar arguments, @code{eye} takes them to be the number of
 rows and columns.  If given a vector with two elements, @code{eye} uses
 the values of the elements as the number of rows and columns,
 respectively.  For example,
 
 @example
 @group
@@ -49,37 +49,37 @@ eye (size ([1, 2; 3, 4])
 @end example
 
 For compatibility with @sc{Matlab}, calling @code{eye} with no arguments
 is equivalent to calling it with an argument of 1.
 @end deftypefn
 
 @deftypefn {Built-in Function} {} ones (@var{x})
 @deftypefnx {Built-in Function} {} ones (@var{n}, @var{m})
-Returns a matrix whose elements are all 1.  The arguments are handled
+Return a matrix whose elements are all 1.  The arguments are handled
 the same as the arguments for @code{eye}.
 
 If you need to create a matrix whose values are all the same, you should
 use an expression like
 
 @example
 val_matrix = val * ones (n, m)
 @end example
 @end deftypefn
 
 @deftypefn {Built-in Function} {} zeros (@var{x})
 @deftypefnx {Built-in Function} {} zeros (@var{n}, @var{m})
-Returns a matrix whose elements are all 0.  The arguments are handled
+Return a matrix whose elements are all 0.  The arguments are handled
 the same as the arguments for @code{eye}.
 @end deftypefn
 
 @deftypefn {Loadable Function} {} rand (@var{x})
 @deftypefnx {Loadable Function} {} rand (@var{n}, @var{m})
 @deftypefnx {Loadable Function} {} rand (@code{"seed"}, @var{x})
-Returns a matrix with random elements uniformly distributed on the
+Return a matrix with random elements uniformly distributed on the
 interval (0, 1).  The arguments are handled the same as the arguments
 for @code{eye}.  In
 addition, you can set the seed for the random number generator using the
 form
 
 @example
 randn ("seed", @var{x})
 @end example
@@ -93,17 +93,17 @@ rand ("seed")
 
 @noindent
 @code{rand} returns the current value of the seed.
 @end deftypefn
 
 @deftypefn {Loadable Function} {} randn (@var{x})
 @deftypefnx {Loadable Function} {} randn (@var{n}, @var{m})
 @deftypefnx {Loadable Function} {} randn (@code{"seed"}, @var{x})
-Returns a matrix with normally distributed random elements.  The
+Return a matrix with normally distributed random elements.  The
 arguments are handled the same as the arguments for @code{eye}.  In
 addition, you can set the seed for the random number generator using the
 form
 
 @example
 randn ("seed", @var{x})
 @end example
 
@@ -159,17 +159,17 @@ If it is invoked without arguments, @cod
 single element of a random sequence.
 
 The @code{rand} and @code{randn} functions use Fortran code from RANLIB,
 a library of fortran routines for random number generation, compiled by
 Barry W. Brown and James Lovato of the Department of Biomathematics at
 The University of Texas, M.D. Anderson Cancer Center, Houston, TX 77030.
 
 @deftypefn {Built-in Function} {} diag (@var{v}, @var{k})
-Returns a diagonal matrix with vector @var{v} on diagonal @var{k}.  The
+Return a diagonal matrix with vector @var{v} on diagonal @var{k}.  The
 second argument is optional.  If it is positive, the vector is placed on
 the @var{k}-th super-diagonal.  If it is negative, it is placed on the
 @var{-k}-th sub-diagonal.  The default value of @var{k} is 0, and the
 vector is placed on the main diagonal.  For example,
 
 @example
 @group
 diag ([1, 2, 3], 1)
diff --git a/doc/interpreter/stats.texi b/doc/interpreter/stats.texi
--- a/doc/interpreter/stats.texi
+++ b/doc/interpreter/stats.texi
@@ -107,19 +107,20 @@ kurtosis (x) = N^(-1) std(x)^(-4) sum ((
 @end ifinfo
 
 @noindent
 of @var{x}.  If @var{x} is a matrix, return the row vector containing
 the kurtosis of each column.
 @end deftypefn
 
 @deftypefn {Function File} {} mahalanobis (@var{x}, @var{y})
-Returns Mahalanobis' D-square distance between the multivariate samples
-@var{x} and @var{y}, which must have the same number of components
-(columns), but may have a different number of observations (rows).
+Return the Mahalanobis' D-square distance between the multivariate
+samples @var{x} and @var{y}, which must have the same number of
+components (columns), but may have a different number of observations
+(rows).
 @end deftypefn
 
 @deftypefn {Function File} {} skewness (@var{x})
 If @var{x} is a vector of length @var{N}, return the skewness
 @iftex
 @tex
 $$
 {\rm skewness} (x) = {1\over N \sigma(x)^3} \sum_{i=1}^N (x_i-\bar{x})^3
diff --git a/doc/interpreter/strings.texi b/doc/interpreter/strings.texi
--- a/doc/interpreter/strings.texi
+++ b/doc/interpreter/strings.texi
@@ -118,17 +118,17 @@ Data Types} for more information about c
 * String Conversions::          
 * Character Class Functions::   
 @end menu
 
 @node Creating Strings, Searching and Replacing, Strings, Strings
 @section Creating Strings
 
 @deftypefn {Function File} {} blanks (@var{n})
-Returns a string of @var{n} blanks.
+Return a string of @var{n} blanks.
 @end deftypefn
 
 @deftypefn {Function File} {} int2str (@var{n})
 @deftypefnx {Function File} {} num2str (@var{x})
 Convert a number to a string.  These functions are not very flexible,
 but are provided for compatibility with @sc{Matlab}.  For better control
 over the results, use @code{sprintf} (@pxref{Formatted Output}).
 @end deftypefn
@@ -172,17 +172,17 @@ string_fill_char = "X";
      @result{} "theseXX"
         "areXXXX"
         "strings"
 @end group
 @end example
 @end defvr
 
 @deftypefn {Function File} {} str2mat (@var{s_1}, @dots{}, @var{s_n})
-Returns a matrix containing the strings @var{s_1}, @dots{}, @var{s_n} as
+Return a matrix containing the strings @var{s_1}, @dots{}, @var{s_n} as
 its rows.  Each string is padded with blanks in order to form a valid
 matrix.
 
 @strong{Note:}
 This function is modelled after @sc{Matlab}.  In Octave, you can create
 a matrix of strings by @code{[@var{s_1}; @dots{}; @var{s_n}]} even if
 the strings are not all the same length.
 @end deftypefn
@@ -194,43 +194,43 @@ Return 1 if @var{a} is a string.  Otherw
 @node Searching and Replacing, String Conversions, Creating Strings, Strings
 @section Searching and Replacing
 
 @deftypefn {Function File} {} deblank (@var{s})
 Removes the trailing blanks from the string @var{s}. 
 @end deftypefn
 
 @deftypefn {Function File} {} findstr (@var{s}, @var{t}, @var{overlap})
-Returns the vector of all positions in the longer of the two strings
+Return the vector of all positions in the longer of the two strings
 @var{s} and @var{t} where an occurrence of the shorter of the two starts.
 If the optional argument @var{overlap} is nonzero, the returned vector
 can include overlapping positions (this is the default).  For example,
 
 @example
 findstr ("ababab", "a")
      @result{} [ 1, 3, 5 ]
 findstr ("abababa", "aba", 0)
      @result{} [ 1, 5 ]
 @end example
 @end deftypefn
 
 @deftypefn {Function File} {} index (@var{s}, @var{t})
-Returns the position of the first occurrence of the string @var{t} in the
+Return the position of the first occurrence of the string @var{t} in the
 string @var{s}, or 0 if no occurrence is found.  For example,
 
 @example
 index ("Teststring", "t")
      @result{} 4
 @end example
 
 @strong{Note:}  This function does not work for arrays of strings.
 @end deftypefn
 
 @deftypefn {Function File} {} rindex (@var{s}, @var{t})
-Returns the position of the last occurrence of the string @var{t} in the
+Return the position of the last occurrence of the string @var{t} in the
 string @var{s}, or 0 if no occurrence is found.  For example,
 
 @example
 rindex ("Teststring", "t")
      @result{} 6
 @end example
 
 @strong{Note:}  This function does not work for arrays of strings.
@@ -263,17 +263,17 @@ with the string @var{y}.  For example,
 
 @example
 strrep ("This is a test string", "is", "&%$")
      @result{} "Th&%$ &%$ a test string"
 @end example
 @end deftypefn
 
 @deftypefn {Function File} {} substr (@var{s}, @var{beg}, @var{len})
-Returns the substring of @var{s} which starts at character number
+Return the substring of @var{s} which starts at character number
 @var{beg} and is @var{len} characters long.  For example,
 
 @example
 substr ("This is a test string", 6, 9)
      @result{} "is a test"
 @end example
 
 @quotation
@@ -282,48 +282,48 @@ This function is patterned after AWK.  Y
 @code{@var{s} (@var{beg} : (@var{beg} + @var{len} - 1))}.  
 @end quotation
 @end deftypefn
 
 @node String Conversions, Character Class Functions, Searching and Replacing, Strings
 @section String Conversions
 
 @deftypefn {Function File} {} bin2dec (@var{s})
-Given a binary number represented as a string of zeros and ones,
-returns the corresponding decimal number.  For example,
+Return a decimal number corresponding to the the binary number
+represented as a string of zeros and ones.  For example,
 
 @example
 bin2dec ("1110")
      @result{} 14
 @end example
 @end deftypefn
 
 @deftypefn {Function File} {} dec2bin (@var{n})
-Given a nonnegative integer, returns the corresponding binary number as
-a string of ones and zeros.  For example, 
+Return a binary number corresponding the the nonnegative decimal number
+@var{n}, as a string of ones and zeros.  For example,
 
 @example
 dec2bin (14)
      @result{} "1110"
 @end example
 @end deftypefn
 
 @deftypefn {Function File} {} dec2hex (@var{n})
-Given a nonnegative integer, returns the corresponding hexadecimal
-number as a string.  For example,
+Return the hexadecimal number corresponding to the nonnegative decimal
+number @var{n}, as a string.  For example,
 
 @example
 dec2hex (2748)
      @result{} "abc"
 @end example
 @end deftypefn
 
 @deftypefn {Function File} {} hex2dec (@var{s})
-Given a hexadecimal number represented as a string, returns the
-corresponding decimal number.  For example,
+Return the decimal number corresponding to the hexadecimal number stored
+in the string @var{s}.  For example,
 
 @example
 hex2dec ("12B")
      @result{} 299
 hex2dec ("12b")
      @result{} 299
 @end example
 @end deftypefn
@@ -351,17 +351,17 @@ are left unchanged.  For example,
 
 @example
 tolower ("MiXeD cAsE 123")
      @result{} "mixed case 123"
 @end example
 @end deftypefn
 
 @deftypefn {Function File} {} toupper (@var{s})
-Returns a copy of the string @var{s}, with each  lower-case character
+Return a copy of the string @var{s}, with each  lower-case character
 replaced by the corresponding upper-case one; nonalphabetic characters
 are left unchanged.  For example,
 
 @example
 @group
 toupper ("MiXeD cAsE 123")
      @result{} "MIXED CASE 123"
 @end group
@@ -413,57 +413,57 @@ corresponding character in the string ar
 @example
 @group
 isalpha ("!Q@@WERT^Y&")
      @result{} [ 0, 1, 0, 1, 1, 1, 1, 0, 1, 0 ]
 @end group
 @end example
 
 @deftypefn {Mapping Function} {} isalnum (@var{s})
-Returns true for characters that are letters or digits (@code{isalpha
+Return 1 for characters that are letters or digits (@code{isalpha
 (@var{a})} or @code{isdigit (@var{})} is true).
 @end deftypefn
 
 @deftypefn {Mapping Function} {} isalpha (@var{s})
-Returns true for characters that are letters (@code{isupper (@var{a})}
+Return true for characters that are letters (@code{isupper (@var{a})}
 or @code{islower (@var{})} is true). 
 @end deftypefn
 
 @deftypefn {Mapping Function} {} isascii (@var{s})
-Returns true for characters that are ASCII (in the range 0 to 127 decimal).
+Return 1 for characters that are ASCII (in the range 0 to 127 decimal).
 @end deftypefn
 
 @deftypefn {Mapping Function} {} iscntrl (@var{s})
-Returns true for control characters.
+Return 1 for control characters.
 @end deftypefn
 
 @deftypefn {Mapping Function} {} isdigit (@var{s})
-Returns true for characters that are decimal digits.
+Return 1 for characters that are decimal digits.
 @end deftypefn
 
 @deftypefn {Mapping Function} {} isgraph (@var{s})
-Returns true for printable characters (but not the space character).
+Return 1 for printable characters (but not the space character).
 @end deftypefn
 
 @deftypefn {Mapping Function} {} islower (@var{s})
-Returns true for characters that are lower case letters.
+Return 1 for characters that are lower case letters.
 @end deftypefn
 
 @deftypefn {Mapping Function} {} isprint (@var{s})
-Returns true for printable characters (including the space character).
+Return 1 for printable characters (including the space character).
 @end deftypefn
 
 @deftypefn {Mapping Function} {} ispunct (@var{s})
-Returns true for punctuation characters.
+Return 1 for punctuation characters.
 @end deftypefn
 
 @deftypefn {Mapping Function} {} isspace (@var{s})
-Returns true for whitespace characters (space, formfeed, newline,
+Return 1 for whitespace characters (space, formfeed, newline,
 carriage return, tab, and vertical tab).
 @end deftypefn
 
 @deftypefn {Mapping Function} {} isupper (@var{s})
-Returns true for upper case letters.
+Return 1 for upper case letters.
 @end deftypefn
 
 @deftypefn {Mapping Function} {} isxdigit (@var{s})
-Returns true for characters that are hexadecimal digits.
+Return 1 for characters that are hexadecimal digits.
 @end deftypefn
diff --git a/doc/interpreter/struct.texi b/doc/interpreter/struct.texi
--- a/doc/interpreter/struct.texi
+++ b/doc/interpreter/struct.texi
@@ -180,22 +180,22 @@ x.v =
 It is also possible to cycle through all the elements of a structure in
 a loop, using a special form of the @code{for} statement
 (@pxref{The for Statement})
 
 The following functions are available to give you information about
 structures.
 
 @deftypefn {Built-in Function} {} is_struct (@var{expr})
-Returns 1 if the value of the expression @var{expr} is a structure.
+Return 1 if the value of the expression @var{expr} is a structure.
 @end deftypefn
 
 @deftypefn {Built-in Function} {} struct_contains (@var{expr}, @var{name})
-This function returns 1 if the expression @var{expr} is a structure and it
-includes an element named @var{name}.  The first argument must be a
-structure and the second must be a string.
+Return 1 if the expression @var{expr} is a structure and it includes an
+element named @var{name}.  The first argument must be a structure and
+the second must be a string.
 @end deftypefn
 
-@deftypefn {Built-in Function} {} struct_elements (@var{expr})
-If the expression @var{expr} is a structure, this function returns a
-list of strings naming the elements of the structure.  It is an error to
-call @code{struct_elements} with an argument that is not a structure.
+@deftypefn {Built-in Function} {} struct_elements (@var{struct})
+Return a list of strings naming the elements of the structure @{struct}.
+It is an error to call @code{struct_elements} with an argument that is
+not a structure.
 @end deftypefn
diff --git a/doc/interpreter/system.texi b/doc/interpreter/system.texi
--- a/doc/interpreter/system.texi
+++ b/doc/interpreter/system.texi
@@ -331,17 +331,17 @@ clock ()
 @end group
 @end example
 
 The function clock is more accurate on systems that have the
 @code{gettimeofday} function.
 @end deftypefn
 
 @deftypefn {Function File} {} date ()
-Returns the date as a character string in the form DD-MMM-YY.  For
+Return the date as a character string in the form DD-MMM-YY.  For
 example,
 
 @example
 @group
 date ()
      @result{} "20-Aug-93"
 @end group
 @end example
@@ -987,17 +987,17 @@ Return the effective group id of the cur
 @deftypefn {Built-in Function} {} getgid ()
 Return the real group id of the current process.
 @end deftypefn
 
 @node Environment Variables, Current Working Directory, Process ID Information, System Utilities
 @section Environment Variables
 
 @deftypefn {Built-in Function} {} getenv (@var{var})
-Returns the value of the environment variable @var{var}.  For example,
+Return the value of the environment variable @var{var}.  For example,
 
 @example
 getenv ("PATH")
 @end example
 
 @noindent
 returns a string containing the value of your path.
 @end deftypefn
@@ -1019,17 +1019,17 @@ cd ~/octave
 
 @noindent
 Changes the current working directory to @file{~/octave}.  If the
 directory does not exist, an error message is printed and the working
 directory is not changed.
 @end deffn
 
 @deftypefn {Built-in Function} {} pwd ()
-Returns the current working directory.
+Return the current working directory.
 @end deftypefn
 
 @defvr {Built-in Variable} PWD
 The current working directory.  The value of @code{PWD} is updated each
 time the current working directory is changed with the @samp{cd}
 command.
 @end defvr
 
@@ -1176,17 +1176,17 @@ x = computer ()
 @end deftypefn
 
 @deftypefn {Built-in Function} {} isieee ()
 Return 1 if your computer claims to conform to the IEEE standard for
 floating point calculations.
 @end deftypefn
 
 @deftypefn {Built-in Function} {} version ()
-Returns Octave's version number as a string.  This is also the value of
+Return Octave's version number as a string.  This is also the value of
 the built-in variable @code{OCTAVE_VERSION}.
 @end deftypefn
 
 @defvr {Built-in Variable} OCTAVE_VERSION
 The version number of Octave, as a string.
 @end defvr
 
 @deftypefn {Built-in Function} {} octave_config_info ()
