# HG changeset patch
# User jwe
# Date 1197949684 0
#      Tue Dec 18 03:48:04 2007 +0000
# Node ID 359f464342b30011487eaea4799ea926e3b9afb6
# Parent  70ddbed64bad4e945c9252db8e97a78c76cd5e65
[project @ 2007-12-18 03:48:03 by jwe]

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -2241,17 +2241,17 @@ Array<T>::indexN (idx_vector& ra_idx, in
 
       octave_idx_type frozen_len
 	= ra_idx.freeze (orig_len, "nd-array", resize_ok);
 
       if (ra_idx)
 	{
 	  dim_vector result_dims;
 
-	  if (vec_equiv)
+	  if (vec_equiv && ! orig_len == 1)
 	    {
 	      result_dims = dv;
 
 	      for (int i = 0; i < n_dims; i++)
 		{
 		  if (result_dims(i) != 1)
 		    {
 		      // All but this dim should be one.
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2007-12-17  John W. Eaton  <jwe@octave.org>
+
+	* Array.cc (Array<T>::indexN): Correctly handle scalar indexed by
+	N-d array.
+
 2007-12-17  David Bateman  <dbateman@free.fr>
 
 	* Sparse-op-defs.h (SPARSE_ANY_ALL_OP_ROW_CODE): Use ridx for row
 	index.
 
 2007-12-11  John W. Eaton  <jwe@octave.org>
 
 	* Sparse.cc (Sparse<T>::index (idx_vector&, int) const):
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,24 +1,31 @@
+2007-12-17  David Bateman  <dbateman@free.fr>
+
+	* plot/rose.m, plot/feather.m, plot/compass.m: New functions
+	* plot/Makefiles (SOURCES): Add them to the sources
+	* plot/polar.m: Set the x and y limits to the maximum polar
+	radius. Set the axes to be square.
+	* plot/__go_draw_axes__.m: Allow {x|y}axislocation to be "zero"
+	and print axis at zero if this is used.
+
+	* plot/__go_draw_axes__.m: Use "set pm3d explicit" so that
+	contours can overlay pcolor plots. Priveldge no hidden line
+	removal when there are multiple objects in the plot.
+
 2007-12-17  Peter A. Gustafson  <petegus@umich.edu>
 
 	* plot/__go_draw_axes__.m:  Fix mirrored tics and borders for
 	set (gca (), "[xy]axislocation", "{right|top}", "box", "off").
 
 2007-12-17  Ben Abbott  <bpabbott@mac.com>
 
          * miscellaneous/run.m: Replace script with f when looking for
 	 file to run.
 
-2007-12-17  David Bateman  <dbateman@free.fr>
-
-	* plot/__go_draw_axes__.m: Use "set pm3d explicit" so that
-	contours can overlay pcolor plots. Priveldge no hidden line
-	removal when there are multiple objects in the plot.
-
 2007-12-14  David Bateman  <dbateman@free.fr>
 
 	* plot/contour3.m, plot/__contour__.m: Handle linespec.
 	* plot/contour.m: Doc fix.
 	* plot/__go_draw_axes__.m (case "patch"): Include "lt" in lt string.
 	Include linetype in withclause.
 
 	* plot/__go_draw_axes__.m (__calc_dimensions__): New function.
diff --git a/scripts/image/imshow.m b/scripts/image/imshow.m
--- a/scripts/image/imshow.m
+++ b/scripts/image/imshow.m
@@ -145,19 +145,21 @@ function h = imshow (im, varargin)
 
   ## This is for compatibility.
   if (ismember (class (im), {"int8", "int16", "uint32", "int32", "single"}))
     im = double (im);
   endif
 
   ## Scale the image to the interval [0, 1] according to display_range.
   if (! (true_color || indexed || islogical (im)))
-    low = display_range(1);
-    high = display_range(2);
-    im = (im-low)/(high-low);
+    class (im)
+im
+    low = display_range(1)
+    high = display_range(2)
+    im = (im-low)/(high-low)
     im(im < 0) = 0;
     im(im > 1) = 1;
   endif
 
   if (true_color)
     tmp = __img__ ([], [], im);
   else
     tmp = image (round ((rows (colormap ()) - 1) * im));
diff --git a/scripts/plot/Makefile.in b/scripts/plot/Makefile.in
--- a/scripts/plot/Makefile.in
+++ b/scripts/plot/Makefile.in
@@ -73,24 +73,26 @@ SOURCES = \
   bar.m \
   barh.m \
   box.m \
   caxis.m \
   clf.m \
   close.m \
   closereq.m \
   colorbar.m \
+  compass.m \
   contour3.m \
   contour.m \
   contourc.m \
   contourf.m \
   cylinder.m \
   drawnow.m \
   ellipsoid.m \
   errorbar.m \
+  feather.m \
   figure.m \
   fill.m \
   findobj.m \
   fplot.m \
   gca.m \
   gcf.m \
   grid.m \
   hidden.m \
@@ -119,16 +121,17 @@ SOURCES = \
   plot3.m \
   plotyy.m \
   polar.m \
   print.m \
   quiver.m \
   quiver3.m \
   replot.m \
   ribbon.m \
+  rose.m \
   scatter.m \
   scatter3.m \
   semilogx.m \
   semilogxerr.m \
   semilogy.m \
   semilogyerr.m \
   shading.m \
   shg.m \
diff --git a/scripts/plot/__go_draw_axes__.m b/scripts/plot/__go_draw_axes__.m
--- a/scripts/plot/__go_draw_axes__.m
+++ b/scripts/plot/__go_draw_axes__.m
@@ -180,23 +180,29 @@ function __go_draw_axes__ (h, plot_strea
     endif
 
     if (strcmpi (axis_obj.xaxislocation, "top"))
       xaxisloc = "x2";
       xaxisloc_using = "x2";
     else
       xaxisloc = "x";
       xaxisloc_using = "x1";
+      if (strcmpi (axis_obj.xaxislocation, "zero"))
+	fputs (plot_stream, "set xzeroaxis;\n");
+      endif
     endif
     if (strcmpi (axis_obj.yaxislocation, "right"))
       yaxisloc = "y2";
       yaxisloc_using = "y2";
     else
       yaxisloc = "y";
       yaxisloc_using = "y1";
+      if (strcmpi (axis_obj.yaxislocation, "zero"))
+	fputs (plot_stream, "set yzeroaxis;\n");
+      endif
     endif
 
     have_grid = false;
 
     if (strcmpi (axis_obj.xgrid, "on"))
       have_grid = true;
       fprintf (plot_stream, "set grid %stics;\n", xaxisloc);
     else
@@ -1465,59 +1471,69 @@ function __gnuplot_write_data__ (plot_st
   endif
   fputs (plot_stream, "e\n");
 
 endfunction
 
 function do_tics (obj, plot_stream, ymirror, mono)
   if (strcmpi (obj.xaxislocation, "top"))
     do_tics_1 (obj.xtickmode, obj.xtick, obj.xticklabelmode, obj.xticklabel,
-	       obj.xcolor, "x2", plot_stream, true, mono);
+	       obj.xcolor, "x2", plot_stream, true, mono, "border");
     do_tics_1 ("manual", [], obj.xticklabelmode, obj.xticklabel,
-	       obj.xcolor, "x", plot_stream, true, mono);
+	       obj.xcolor, "x", plot_stream, true, mono, "border");
+  elseif (strcmpi (obj.xaxislocation, "zero"))
+    do_tics_1 (obj.xtickmode, obj.xtick, obj.xticklabelmode, obj.xticklabel,
+	       obj.xcolor, "x", plot_stream, true, mono, "axis");
+    do_tics_1 ("manual", [], obj.xticklabelmode, obj.xticklabel,
+	       obj.xcolor, "x2", plot_stream, true, mono, "axis");
   else
     do_tics_1 (obj.xtickmode, obj.xtick, obj.xticklabelmode, obj.xticklabel,
-	       obj.xcolor, "x", plot_stream, true, mono);
+	       obj.xcolor, "x", plot_stream, true, mono, "border");
     do_tics_1 ("manual", [], obj.xticklabelmode, obj.xticklabel,
-	       obj.xcolor, "x2", plot_stream, true, mono);
+	       obj.xcolor, "x2", plot_stream, true, mono, "border");
   endif
   if (strcmpi (obj.yaxislocation, "right"))
     do_tics_1 (obj.ytickmode, obj.ytick, obj.yticklabelmode, obj.yticklabel,
-	       obj.ycolor, "y2", plot_stream, ymirror, mono);
+	       obj.ycolor, "y2", plot_stream, ymirror, mono, "border");
     do_tics_1 ("manual", [], obj.yticklabelmode, obj.yticklabel,
-	       obj.ycolor, "y", plot_stream, ymirror, mono);
+	       obj.ycolor, "y", plot_stream, ymirror, mono, "border");
+  elseif (strcmpi (obj.xaxislocation, "zero"))
+    do_tics_1 (obj.ytickmode, obj.ytick, obj.yticklabelmode, obj.yticklabel,
+	       obj.ycolor, "y", plot_stream, ymirror, mono, "axis");
+    do_tics_1 ("manual", [], obj.yticklabelmode, obj.yticklabel,
+	       obj.ycolor, "y2", plot_stream, ymirror, mono, "axis");
   else
     do_tics_1 (obj.ytickmode, obj.ytick, obj.yticklabelmode, obj.yticklabel,
-	       obj.ycolor, "y", plot_stream, ymirror, mono);
+	       obj.ycolor, "y", plot_stream, ymirror, mono, "border");
     do_tics_1 ("manual", [], obj.yticklabelmode, obj.yticklabel,
-	       obj.ycolor, "y2", plot_stream, ymirror, mono);
+	       obj.ycolor, "y2", plot_stream, ymirror, mono, "border");
   endif
   do_tics_1 (obj.ztickmode, obj.ztick, obj.zticklabelmode, obj.zticklabel,
-	     obj.zcolor, "z", plot_stream, true, mono);
+	     obj.zcolor, "z", plot_stream, true, mono, "border");
 endfunction
 
 function do_tics_1 (ticmode, tics, labelmode, labels, color, ax,
-		    plot_stream, mirror, mono)
+		    plot_stream, mirror, mono, axispos)
   colorspec = get_text_colorspec (color, mono);
   if (strcmpi (ticmode, "manual"))
     if (isempty (tics))
       fprintf (plot_stream, "unset %stics;\n", ax);
     elseif (strcmpi (labelmode, "manual") && ! isempty (labels))
       if (ischar (labels))
 	labels = cellstr (labels);
       endif
       if (iscellstr (labels))
 	k = 1;
 	ntics = numel (tics);
 	nlabels = numel (labels);
 	fprintf (plot_stream, "set format %s \"%%s\";\n", ax);
 	if (mirror)
-	  fprintf (plot_stream, "set %stics (", ax);
+	  fprintf (plot_stream, "set %stics %s (", ax, axispos);
 	else
-	  fprintf (plot_stream, "set %stics nomirror (", ax);
+	  fprintf (plot_stream, "set %stics %s nomirror (", ax, axispos);
 	endif
 	labels = regexprep(labels, "%", "%%");
 	for i = 1:ntics
 	  fprintf (plot_stream, " \"%s\" %g", labels{k++}, tics(i))
 	  if (i < ntics)
 	    fputs (plot_stream, ", ");
 	  endif
 	  if (k > nlabels)
@@ -1526,29 +1542,30 @@ function do_tics_1 (ticmode, tics, label
 	endfor
 	fprintf (plot_stream, ") %s;\n", colorspec);
       else
 	error ("unsupported type of ticklabel");
       endif
     else
       fprintf (plot_stream, "set format %s \"%%g\";\n", ax);
       if (mirror)
-	fprintf (plot_stream, "set %stics (", ax);
+	fprintf (plot_stream, "set %stics %s (", ax, axispos );
       else
-	fprintf (plot_stream, "set %stics nomirror (", ax);
+	fprintf (plot_stream, "set %stics %s nomirror (", ax, axispos);
       endif
       fprintf (plot_stream, " %g,", tics(1:end-1));
       fprintf (plot_stream, " %g);\n", tics(end));
     endif
   else
     fprintf (plot_stream, "set format %s \"%%g\";\n", ax);
     if (mirror)
-      fprintf (plot_stream, "set %stics %s;\n", ax, colorspec);
+      fprintf (plot_stream, "set %stics %s %s;\n", ax, axispos, colorspec);
     else
-      fprintf (plot_stream, "set %stics nomirror %s;\n", ax, colorspec);
+      fprintf (plot_stream, "set %stics %s nomirror %s;\n", ax, 
+	       axispos, colorspec);
     endif
   endif
 endfunction
 
 function colorspec = get_text_colorspec (color, mono)
   persistent have_newer_gnuplot ...
       = compare_versions (__gnuplot_version__ (), "4.0", ">");
 
diff --git a/scripts/plot/polar.m b/scripts/plot/polar.m
--- a/scripts/plot/polar.m
+++ b/scripts/plot/polar.m
@@ -25,44 +25,58 @@
 ## The optional third argument specifies the line type.
 ## @seealso{plot}
 ## @end deftypefn
 
 ## Author: jwe
 
 function retval = polar (varargin)
 
-  [h, varargin] = __plt_get_axis_arg__ ("polar", varargin{:});
+  [h, varargin, nargs] = __plt_get_axis_arg__ ("polar", varargin{:});
 
   oldh = gca ();
   unwind_protect
     axes (h);
     newplot ();
 
-    nargs = numel (varargin);
-
     if (nargs == 3)
       if (! ischar (varargin{3}))
 	error ("polar: third argument must be a string");
       endif
       tmp = __plr2__ (h, varargin{:});
-    elseif (nargin == 2)
+      maxr = max (varargin {2} (:));
+    elseif (nargs == 2)
       if (ischar (varargin{2}))
 	tmp = __plr1__ (h, varargin{:});
+	if (iscomplex(varargin{1}))
+	  maxr = max (imag(varargin{1})(:));
+	else
+	  maxr = max (varargin{1}(:));
+	endif
       else
 	fmt = "";
 	tmp = __plr2__ (h, varargin{:}, fmt);
+	maxr = max (varargin {2} (:));
       endif
-    elseif (nargin == 1)
+    elseif (nargs == 1)
       fmt = "";
       tmp = __plr1__ (h, varargin{:}, fmt);
+      if (iscomplex(varargin{1}))
+	maxr = max (imag(varargin{1})(:));
+      else
+	maxr = max (varargin{1}(:));
+      endif
     else
       print_usage ();
     endif
 
+    set (h, "xlim", [-maxr, maxr], "ylim", [-maxr, maxr],
+	 "xaxislocation", "zero", "yaxislocation", "zero",
+	 "dataaspectratio", [1, 1, 1]); 
+
     if (nargout > 0)
       retval = tmp;
     endif
   unwind_protect_cleanup
     axes (oldh);
   end_unwind_protect
 
 endfunction
