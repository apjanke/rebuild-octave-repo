# HG changeset patch
# User Rik <rik@octave.org>
# Date 1485044378 28800
#      Sat Jan 21 16:19:38 2017 -0800
# Node ID 17dc6c7ef4271768fcc1897f7ba2038a6fc32e72
# Parent  6f4569690de1b936fa611b2fe6416f236e87b824
Ignore ODE event function at t==0 for Matlab compatibility (bug #49919).

* integrate_adaptive.m: new variable have_EventFcn to make code more readable.

* ode_event_handler.m: New persistent variable firstrun.  Set to true when
called with 'init'.  Toggled back to false after one normal invocation.
Ignore terminating the ODE integration if it occurs on the first time step.

diff --git a/scripts/ode/private/integrate_adaptive.m b/scripts/ode/private/integrate_adaptive.m
--- a/scripts/ode/private/integrate_adaptive.m
+++ b/scripts/ode/private/integrate_adaptive.m
@@ -96,17 +96,19 @@ function solution = integrate_adaptive (
     else
       solution.retout = x;
     endif
     feval (options.OutputFcn, tspan, solution.retout, "init",
            options.funarguments{:});
   endif
 
   ## Initialize the EventFcn
+  have_EventFcn = false;
   if (! isempty (options.Events))
+    have_EventFcn  = true;
     ode_event_handler (options.Events, tspan(1), x,
                        "init", options.funarguments{:});
   endif
 
   if (options.havenonnegative)
     nn = options.NonNegative;
   endif
 
@@ -157,17 +159,17 @@ function solution = integrate_adaptive (
             runge_kutta_interpolate (order, [t_old t_new], [x_old x_new],
                                      t(t_caught), new_k_vals, dt, func,
                                      options.funarguments);
 
           istep += 1;
 
           ## Call Events function only if a valid result has been found.
           ## Stop integration if eventbreak is true.
-          if (! isempty (options.Events))
+          if (have_EventFcn)
             break_loop = false;
             for idenseout = 1:numel (t_caught)
               id = t_caught(idenseout);
               td = t(id);
               solution.event = ...
                 ode_event_handler (options.Events, t(id), x(:, id), [],
                                    options.funarguments{:});
               if (! isempty (solution.event{1}) && solution.event{1} == 1)
@@ -219,17 +221,17 @@ function solution = integrate_adaptive (
       else   # not fixed times
 
         t(++istep)  = t_new;
         x(:, istep) = x_new;
         iout = istep;
 
         ## Call Events function only if a valid result has been found.
         ## Stop integration if eventbreak is true.
-        if (! isempty (options.Events))
+        if (have_EventFcn)
           solution.event = ...
             ode_event_handler (options.Events, t(istep), x(:, istep), [],
                                options.funarguments{:});
           if (! isempty (solution.event{1}) && solution.event{1} == 1)
             t(istep) = solution.event{3}(end);
             x(:, istep) = solution.event{4}(end, :).';
             solution.unhandledtermination = false;
             break;
diff --git a/scripts/ode/private/ode_event_handler.m b/scripts/ode/private/ode_event_handler.m
--- a/scripts/ode/private/ode_event_handler.m
+++ b/scripts/ode/private/ode_event_handler.m
@@ -67,16 +67,17 @@ function retval = ode_event_handler (evt
   ## processing in the previous time stamp.
   ## evtold  the results from the event function
   ## told    the time stamp
   ## yold    the ODE result
   ## retcell the return values cell array
   ## evtcnt  the counter for how often this function has been called
   persistent evtold told yold retcell;
   persistent evtcnt = 1;   # Don't remove.  Required for Octave parser.
+  persistent firstrun = true;
 
   if (isempty (flag))
     ## Process the event, i.e.,
     ## find the zero crossings for either a rising or falling edge
     if (! iscell (y))
       inpargs = {evtfun, t, y};
     else
       inpargs = {evtfun, t, y{1}, y{2}};
@@ -104,37 +105,46 @@ function retval = ode_event_handler (evt
       else
         ## Found a zero crossing but must not be notified
         idx = [];
       endif
 
       ## Create new output values if a valid index has been found
       if (! isempty (idx))
         ## Change the persistent result cell array
-        retcell{1} = any (term(idx));     # Stop integration or not
+        if (firstrun)
+          ## Matlab compatibility requires ignoring condition on first run.
+          retcell{1} = false;
+        else
+          retcell{1} = any (term(idx));     # Stop integration or not
+        endif
         retcell{2}(evtcnt,1) = idx(1,1);  # Take first event found
         ## Calculate the time stamp when the event function returned 0 and
         ## calculate new values for the integration results, we do both by
         ## a linear interpolation
         tnew = t - evt(1,idx) * (t - told) / (evt(1,idx) - evtold(1,idx));
         ynew = (y - (t - tnew) * (y - yold) / (t - told)).';
         retcell{3}(evtcnt,1) = tnew;
         retcell{4}(evtcnt,:) = ynew;
         evtcnt += 1;
       endif
 
     endif
+
+    firstrun = false;
     evtold = evt; told = t; yold = y;
     retval = retcell;
 
   elseif (strcmp (flag, "init"))
     ## Call the event function if an event function has been defined to
     ## initialize the internal variables of the event function and to get
     ## a value for evtold.
 
+    firstrun = true;
+
     if (! iscell (y))
       inpargs = {evtfun, t, y};
     else
       inpargs = {evtfun, t, y{1}, y{2}};
       y = y{1};  # Delete cell element 2
     endif
     if (nargin > 4)
       inpargs = {inpargs{:}, varargin{:}};
@@ -143,15 +153,16 @@ function retval = ode_event_handler (evt
 
     ## We require that all return values be row vectors
     evtold = evtold(:).'; told = t; yold = y;
     evtcnt = 1;
     retval = retcell = cell (1,4);
 
   elseif (strcmp (flag, "done"))
     ## Clear this event handling function
+    firstrun = true;
     evtold = told = yold = evtcnt = [];
     retval = retcell = cell (1,4);
 
   endif
 
 endfunction
 
