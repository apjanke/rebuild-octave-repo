# HG changeset patch
# User Ben Abbott  <bpabbott@mac.com>
# Date 1450225543 18000
#      Tue Dec 15 19:25:43 2015 -0500
# Node ID 40e1134ec9843c96f36733b3f6d06c3f4d6872b5
# Parent  c640ea6a1612a107067920db81f261591d47b0d1
# Parent  9fe6db1dcc4619b88e8df36518f88adb1108350f
maint: Periodic merge of stable to default

diff --git a/scripts/general/private/__isequal__.m b/scripts/general/private/__isequal__.m
--- a/scripts/general/private/__isequal__.m
+++ b/scripts/general/private/__isequal__.m
@@ -59,25 +59,25 @@ function t = __isequal__ (nans_compare_e
   t = (all (strcmp (class (x),
                     cellfun ("class", varargin, "uniformoutput", false)))
        || ((isreal (x) || isnumeric (x))
            && all (cellfun ("isreal", varargin)
                    | cellfun ("isnumeric", varargin))));
 
   if (t)
     ## Test that everything has the same number of dimensions.
-    t = all (ndims (x) == cellfun ("ndims", varargin));
+    t = all (builtin ("ndims", x) == cellfun ("ndims", varargin));
   endif
 
   if (t)
     ## Test that everything is the same size since the dimensionality matches.
     nd = ndims (x);
     k = 1;
     do
-      t = all (size (x,k) == cellfun ("size", varargin, k));
+      t = all (builtin ("size", x, k) == cellfun ("size", varargin, k));
     until (!t || k++ == nd);
   endif
 
   ## From here on, compare objects as if they were structures.
   if (t && isobject (x))
     ## Locally suppress class-to-struct warning.  We know what we are doing.
     warning ("off", "Octave:classdef-to-struct", "local");
     x = builtin ("struct", x);
diff --git a/scripts/plot/util/__gnuplot_drawnow__.m b/scripts/plot/util/__gnuplot_drawnow__.m
--- a/scripts/plot/util/__gnuplot_drawnow__.m
+++ b/scripts/plot/util/__gnuplot_drawnow__.m
@@ -180,18 +180,18 @@ function enhanced = gnuplot_set_term (pl
           set (h, "units", units);
         end_unwind_protect
         gnuplot_pos = position_in_pixels(1:2);
         gnuplot_size = position_in_pixels(3:4);
         if (! (output_to_screen (term)
                || any (strcmp (term, {"canvas", "emf", "gif", "jpeg", ...
                                       "pbm", "png", "pngcairo", "svg"}))))
           ## Convert to inches
-          gnuplot_pos = gnuplot_pos / get (0, "screenpixelsperinch");
-          gnuplot_size = gnuplot_size / get (0, "screenpixelsperinch");
+          gnuplot_pos = gnuplot_pos / 72;
+          gnuplot_size = gnuplot_size / 72;
         endif
         if (all (gnuplot_size > 0))
           terminals_with_size = {"canvas", "emf", "epslatex", "fig", ...
                                  "gif", "jpeg", "latex", "pbm", "pdf", ...
                                  "pdfcairo", "postscript", "png", ...
                                  "pngcairo", "pstex", "pslatex", "svg", "tikz"};
           if (__gnuplot_has_feature__ ("windows_figure_position"))
             terminals_with_size{end+1} = "windows";
diff --git a/test/classes/@SizeTester/SizeTester.m b/test/classes/@SizeTester/SizeTester.m
new file mode 100644
--- /dev/null
+++ b/test/classes/@SizeTester/SizeTester.m
@@ -0,0 +1,6 @@
+function x = SizeTester (desired_size)
+
+  x = struct ("desired_size", desired_size);
+  x = class (x, "SizeTester");
+
+endfunction
diff --git a/test/classes/@SizeTester/numel.m b/test/classes/@SizeTester/numel.m
new file mode 100644
--- /dev/null
+++ b/test/classes/@SizeTester/numel.m
@@ -0,0 +1,5 @@
+function n = numel (this)
+
+  n = prod (this.desired_size);
+
+endfunction
diff --git a/test/classes/@SizeTester/size.m b/test/classes/@SizeTester/size.m
new file mode 100644
--- /dev/null
+++ b/test/classes/@SizeTester/size.m
@@ -0,0 +1,5 @@
+function s = size (this)
+
+  s = this.desired_size;
+
+endfunction
diff --git a/test/classes/classes.tst b/test/classes/classes.tst
--- a/test/classes/classes.tst
+++ b/test/classes/classes.tst
@@ -356,8 +356,54 @@
 %!shared A, B
 %!test A = Snork (rand (2));
 %!test B = CPrecedenceTester3 (2);  % CPrecedenceTester3 < Snork
 %!assert (isequal (tattack (A, B), 'Snork'))
 %!assert (isequal (tattack (B, A), 'Snork'))
 %% Trying to change to CPrecendenceTester3 > Snork
 %!error D = CPrecedenceTester3 (1);
 
+##############################################
+## Testing overridden size+numel method     ##
+## (builtin size method and similar methods ##
+## use the size of the struct container)    ##
+##############################################
+
+%!shared st
+%!test st = SizeTester ([1 1]);
+%! assert (isequal (size (st), [1 1]))
+%! assert (isequal (numel (st), 1))
+%!assert (isequal (ndims (st), 2))
+%!assert (isequal (rows (st), 1))
+%!assert (isequal (columns (st), 1))
+%!assert (isequal (st, st))
+%!assert (isscalar (st))
+%!assert (isvector (st))
+
+%!test st = SizeTester ([1 2]);
+%! assert (isequal (size (st), [1 2]))
+%! assert (isequal (numel (st), 2))
+%!assert (isequal (ndims (st), 2))
+%!assert (isequal (rows (st), 1))
+%!xtest assert (isequal (columns (st), 2))
+%!assert (isequal (st, st))                # bug #44334
+%!xtest assert (not (isscalar (st)))       # bug #44498
+%!assert (isvector (st))
+
+%!test st = SizeTester ([2 3]);
+%! assert (isequal (size (st), [2 3]))
+%! assert (isequal (numel (st), 6))
+%!assert (isequal (ndims (st), 2))
+%!xtest assert (isequal (rows (st), 2))
+%!xtest assert (isequal (columns (st), 3))
+%!assert (isequal (st, st))                # bug #44334
+%!xtest assert (not (isscalar (st)))       # bug #44498
+%!xtest assert (not (isvector (st)))       # bug #44498
+
+%!test st = SizeTester ([2 3 4]);
+%! assert (isequal (size (st), [2 3 4]))
+%! assert (isequal (numel (st), 24))
+%!xtest assert (isequal (ndims (st), 3))
+%!xtest assert (isequal (rows (st), 2))
+%!xtest assert (isequal (columns (st), 3))
+%!assert (isequal (st, st))                # bug #44334
+%!xtest assert (not (isscalar (st)))       # bug #44498
+%!xtest assert (not (isvector (st)))       # bug #44498
