# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1547222278 -3600
#      Fri Jan 11 16:57:58 2019 +0100
# Branch stable
# Node ID 9ed51ca683529fea360063f83e1996e18688ee4c
# Parent  80e69933b6c01513182492caa415c8ce24ef2ea2
Allow any object to be the root "callbackobject" (bug #55428)

* graphics.cc (base_properties::update_handlevisibility): Don't prevent objects
  with "handlevisibility" = "off" from being the root "callbackobject"
  (do_execute_callback): Don't prevent objects with "handlevisibility" = "off"
  from becoming the root "callbackobject". Rework BIST associated to the
  previous behavior.

diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -3383,27 +3383,16 @@ base_properties::update_autopos (const s
 }
 
 void
 base_properties::update_handlevisibility (void)
 {
   if (is_handle_visible ())
     return;
 
-  // This object should not be the root "callbackobject"
-  graphics_object rt = gh_manager::get_object (0);
-  octave_value cbo = rt.get ("callbackobject");
-  if (! cbo.isempty () && cbo.double_value () == __myhandle__)
-    {
-      gh_manager::auto_lock guard;
-      auto& root_props =
-        dynamic_cast<root_figure::properties&> (rt.get_properties ());
-      root_props.set_callbackobject (Matrix ());
-    }
-
   // This object should not be the figure "currentobject"
   graphics_object go (gh_manager::get_object (get___myhandle__ ()));
   graphics_object fig (go.get_ancestor ("figure"));
   if (fig.valid_object ())
     {
       octave_value co = fig.get ("currentobject");
       if (! co.isempty () && co.double_value () == __myhandle__)
         {
@@ -3433,27 +3422,26 @@ base_properties::update_handlevisibility
 %! unwind_protect_cleanup
 %!   close ([hf1, hf2]);
 %! end_unwind_protect;
 */
 
 /*
 ## test current callback object have visible handle
 %!test
-%! hf = figure ("visible", "off");
-%! hax = axes ();
+%! hf = figure ("handlevisibility", "off", "visible", "off");
+%! hax = axes ("parent", hf, "handlevisibility", "off");
 %! unwind_protect
-%!   fcn = @(h) assert (gcbo (), h);
+%!   fcn = @(h) setappdata (h, "testdata", gcbo ());
+%!   addlistener (hf, "color", fcn);
 %!   addlistener (hax, "color", fcn);
-%!   set (hax, "color", "r");
-%!   dellistener (hax, "color", fcn);
-%!   set (hax, "handlevisibility", "off");
-%!   fcn = @() assert (gcbo (), []);
-%!   addlistener (hax, "color", fcn);
+%!   set (hf, "color", "b");
 %!   set (hax, "color", "b");
+%!   assert (getappdata (hf, "testdata"), hf)
+%!   assert (getappdata (hax, "testdata"), hax)
 %! unwind_protect_cleanup
 %!   close (hf);
 %! end_unwind_protect;
 */
 
 void
 base_properties::add_listener (const caseless_str& pname,
                                const octave_value& val,
@@ -11565,18 +11553,17 @@ gh_manager::do_execute_callback (const g
 
       graphics_object go (get_object (h));
       if (go)
         {
           // FIXME: Is the lock necessary when we're only calling a
           //        const "get" method?
           gh_manager::auto_lock guard;
           callback_objects.push_front (go);
-          if (go.get ("handlevisibility").string_value () != "off")
-            xset_gcbo (h);
+          xset_gcbo (h);
         }
 
       // Copy CB because "function_value" method is non-const.
 
       octave_value cb = cb_arg;
 
       if (cb.is_function () || cb.is_function_handle ())
         fcn = cb.function_value ();
