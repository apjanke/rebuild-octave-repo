# HG changeset patch
# User Nir Krakauer <nkrakauer@ccny.cuny.edu>
# Date 1476715403 -7200
#      Mon Oct 17 16:43:23 2016 +0200
# Branch stable
# Node ID aace27d191622dbe925e94c9bfacbd6c65709778
# Parent  abfb538acc59fa9c4b044796343d2df8e8ad6729
Improve docstring of odeset.m

* scripts/ode/odeset.m : correct typos and reorganize
  in a more readable way.

diff --git a/scripts/ode/odeset.m b/scripts/ode/odeset.m
--- a/scripts/ode/odeset.m
+++ b/scripts/ode/odeset.m
@@ -30,84 +30,95 @@
 ##
 ## When called with no input argument and one output argument, return a new ODE
 ## options structure that contains all possible fields initialized to their
 ## default values.  If no output argument is requested, display a list of
 ## the common ODE solver options along with their default value.
 ##
 ## If called with name-value input argument pairs @var{"field1"},
 ## @var{"value1"}, @var{"field2"}, @var{"value2"}, @dots{} return a new
-## ODE options structure with all the most commont options fields
-## initialized @strong{and} set the values of the fields @var{"field1"},
+## ODE options structure with all the most common option fields
+## initialized, @strong{and} set the values of the fields @var{"field1"},
 ## @var{"field2"}, @dots{} to the values @var{value1}, @var{value2},
 ## @dots{}.
 ##
-## The most commonly used ODE options which are always assigned a value
-## by @qcode{odeset} are the following:
+## If called with an input structure @var{oldstruct} then overwrite the
+## values of the options @var{"field1"}, @var{"field2"}, @dots{} with
+## new values @var{value1}, @var{value2}, @dots{} and return the
+## modified structure.
+##
+## When called with two input ODE options structures @var{oldstruct} and
+## @var{newstruct} overwrite all values from the structure
+## @var{oldstruct} with new values from the structure @var{newstruct}.
+## Empty values in @var{newstruct} will not overwrite values in
+## @var{oldstruct}.
+##
+## The most commonly used ODE options, which are always assigned a value
+## by @qcode{odeset}, are the following:
 ##
 ## @table @asis
 ## @item AbsTol
 ## Absolute error tolerance.
 ##
 ## @item BDF
-## Used BDF formulas in implicit multistep methods.
+## Use BDF formulas in implicit multistep methods.
 ##
 ## @item Events
 ## Event function. An event function must have the form
 ## @code{[value, isterminal, direction] = my_events_f (t, y)}
 ##
 ## @item InitialSlope
 ## Consistent initial slope vector for DAE solvers.
 ##
 ## @item InitialStep
 ## Initial time step size.
 ##
 ## @item Jacobian
 ## Jacobian matrix, specified as a constant matrix or a function of
-## thime and state.
+## time and state.
 ##
 ## @item JConstant
-## Specifiy whether the Jacobian is a constant matrix or depends on the
+## Specify whether the Jacobian is a constant matrix or depends on the
 ## state.
 ##
 ## @item JPattern
-## If the Jacobian matrix is sparse and non constant but maintains a
+## If the Jacobian matrix is sparse and non-constant but maintains a
 ## constant sparsity pattern, specify the sparsity pattern.
 ##
 ## @item Mass
-## Mass matrix specified as a constant matrix or a function of
-## thime and state.
+## Mass matrix, specified as a constant matrix or a function of
+## time and state.
 ##
 ## @item MassConstant
-## Specifiy whether the Mass matrix is a constant matrix or depends on
+## Specify whether the mass matrix is a constant matrix or depends on
 ## the state.
 ##
 ## @item MassSingular
 ## Specify whether the mass matrix is singular. Accepted values include
 ## @qcode{"yes"}, @qcode{"no"}, @qcode{"maybe"}.
 ##
 ## @item MaxOrder
 ## Maximum order of formula.
 ##
 ## @item MaxStep
 ## Maximum time step value.
 ##
 ## @item MStateDependence
 ## Specify whether the mass matrix depends on the state or only on time.
 ##
 ## @item MvPattern
-## If the Mass matrix is sparse and non constant but maintains a
+## If the mass matrix is sparse and non-constant but maintains a
 ## constant sparsity pattern, specify the sparsity pattern.
 ##
 ## @item NonNegative
 ## Specify elements of the state vector that are expected to remain
 ## nonnegative during the simulation.
 ##
 ## @item NormControl
-## Control error relative to the 2-norm of the solution rather than its
+## Control error relative to the 2-norm of the solution, rather than its
 ## absolute value.
 ##
 ## @item OutputFcn
 ## Function to monitor the state during the simulation. For the form of
 ## the function to use see @qcode{odeplot}.
 ##
 ## @item OutputSel
 ## Indices of elements of the state vector to be passed to the output
@@ -129,27 +140,16 @@
 ## Specify whether @qcode{odefun} can be passed multiple values of the
 ## state at once.
 ##
 ## @end table
 ##
 ## Field names that are not in the above list are also accepted and
 ## added to the result structure.
 ##
-## If called with an input structure @var{oldstruct} then overwrite the
-## values of the options @var{"field1"}, @var{"field2"}, @dots{} with
-## new values @var{value1}, @var{value2}, @dots{} and return the
-## modified structure.
-##
-## When called with two input ODE options structures @var{oldstruct} and
-## @var{newstruct} overwrite all values from the structure
-## @var{oldstruct} with new values from the structure @var{newstruct}.
-## Empty values in @var{newstruct} will not overwrite values in
-## @var{oldstruct}.
-##
 ## @seealso{odeget}
 ## @end deftypefn
 
 function odestruct = odeset (varargin)
 
   persistent p;
 
   if (isempty (p))
