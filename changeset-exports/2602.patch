# HG changeset patch
# User jwe
# Date 852618006 0
#      Tue Jan 07 06:20:06 1997 +0000
# Node ID 9cbbbcf5b6f560b1e3468d6ac0e555a6b71919b8
# Parent  3723512a827a67d88551dd6f8debbcbe521a18e5
[project @ 1997-01-07 06:18:23 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,12 @@
+Tue Jan  7 00:16:35 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* Version 2.0.1 released.
+
 Thu Dec 19 16:18:59 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* aclocal.m4 (OCTAVE_FLIBS): Only add -Xlinker args if compiler is
 	gcc.
 
 Sat Dec 14 09:46:50 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* README.Linux: New file.
diff --git a/PROJECTS b/PROJECTS
--- a/PROJECTS
+++ b/PROJECTS
@@ -73,16 +73,20 @@ Numerical:
     upper limit on the number of arguments.
 
   * If possible, make economy QR factorization actually take advantage
     of the form of the result instead of just dropping columns.
     Lapack doesn't appear to do this yet.
 
   * Check matrix classes for proper handling of empty matrices.
 
+  * Force all empty matrices to be 0x0 even when other dimensions have
+    been speicified, for compatibility with Matlab, at least when some
+    preference variable is set.
+
   * Improve design of ODE, DAE, classes.
 
   * Make it possible to specify a time which dassl and lsode should
     not integrate past.
 
   * Extend meaning of .* to include v .* M or M .* v (where v is a
     column vector with the same number of rows as M) to scale rows of
     M by elements of v.  Similarly, if w is a row vector with as many
diff --git a/README.Linux b/README.Linux
--- a/README.Linux
+++ b/README.Linux
@@ -1,15 +1,15 @@
-Since July 1996, most work on Octave has been done using a
-Linux/GNU system, and a number of people who regularly test Octave
-snapshot releases also primarily use Linux/GNU systems.
+Since July 1996, most work on Octave has been done using a Linux
+system, and a number of people who regularly test Octave snapshot
+releases also primarily use Linux systems.
 
 However, I have recently started to receive a significant number of
 reports from people who say that they can't compile or run Octave on
-Linux/GNU systems.  In nearly every case, the problem has turned out
+Linux systems.  In nearly every case, the problem has turned out
 to be that the compilers or libraries have not been installed
 properly.  I suspect that this often results from a botched upgrade,
 or from attempting to install the compilers from the standard source
 distributions.  But in some cases, the cause has been a buggy Linux
 distribution.  Many of these problems go unnoticed because much of the
 software for Linux is written in C, not C++.
 
 Octave compiles, but it won't run
diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,12 @@
+Tue Jan  7 00:17:24 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* Version 2.0.1 released.
+
 Tue Dec 10 01:43:13 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Version 2.0 released.
 
 Fri Dec  6 15:23:52 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Version 1.94.
 
diff --git a/info/ChangeLog b/info/ChangeLog
--- a/info/ChangeLog
+++ b/info/ChangeLog
@@ -1,8 +1,13 @@
+Mon Jan  6 19:14:49 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* terminal.c (terminal_prep_terminal): Only delete OCRNL from
+	ttybuff.c_oflag if it is defined.
+
 Mon Dec  9 14:20:01 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Makefile.in (install): Use $(EXE) suffix so that install will
 	find the right file on cygwin32 systems.
 
 Mon Dec  2 13:48:57 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* configure.in: Check for gethostname in libsocket.a, for SCO.
diff --git a/info/terminal.c b/info/terminal.c
--- a/info/terminal.c
+++ b/info/terminal.c
@@ -632,17 +632,21 @@ terminal_prep_terminal ()
 #  if defined (HAVE_TERMIO_H)
   ioctl (tty, TCGETA, &original_termio);
   ioctl (tty, TCGETA, &ttybuff);
 #  endif
 #endif
 
 #if defined (HAVE_TERMIOS_H) || defined (HAVE_TERMIO_H)
   ttybuff.c_iflag &= (~ISTRIP & ~INLCR & ~IGNCR & ~ICRNL & ~IXON);
-  ttybuff.c_oflag &= (~ONLCR & ~OCRNL);
+#ifdef OCRNL
+  ttybuff.c_oflag &= ~OCRNL;
+#endif
+  ttybuff.c_oflag &= ~ONLCR;
+
   ttybuff.c_lflag &= (~ICANON & ~ECHO);
 
   ttybuff.c_cc[VMIN] = 1;
   ttybuff.c_cc[VTIME] = 0;
 
   if (ttybuff.c_cc[VINTR] == '\177')
     ttybuff.c_cc[VINTR] = -1;
 
diff --git a/libcruft/ChangeLog b/libcruft/ChangeLog
--- a/libcruft/ChangeLog
+++ b/libcruft/ChangeLog
@@ -1,8 +1,12 @@
+Tue Jan  7 00:17:17 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* Version 2.0.1 released.
+
 Tue Dec 17 11:02:02 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* misc/lo-error.c: Convert C++-style comments to C-style comments.
 
 Wed Dec 11 01:50:31 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* misc/Makefile.in (SPECIAL_DEPEND): Delete d1mach.o from the list.
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,12 @@
+Tue Jan  7 00:16:57 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* Version 2.0.1 released.
+
 Sun Jan  5 12:07:45 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* dMatrix.cc (Matrix::read): Correctly compute the number of
 	columns for resizing when the number of rows is specified but the
 	number of columns is not.
 
 Wed Dec 18 16:18:58 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+Tue Jan  7 00:16:52 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* Version 2.0.1 released.
+
 Thu Dec 19 22:16:46 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* elfun/lcm.m: Replace missing if statement.
 
 	* elfun/gcd.m: Report error if no input args.
 	* elfun/lcm.m: Likewise.
 
 Mon Dec 16 15:23:04 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,24 @@
+Tue Jan  7 00:16:41 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* Version 2.0.1 released.
+
+Mon Jan  6 00:00:07 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* pt-mat.cc (tm_row_const_rep::all_mt): New variable.
+	(tm_row_const::all_empty): New function.
+	(tm_row_const::tm_row_const_rep::init): Set all_mt here.
+	(tm_const::all_mt): New variable.
+	(tm_const::all_emtpy): New function.
+	(tm_const::init): Set all_mt here.
+	(tree_matrix::eval): Return an empty matrix if the list contains
+	only empty elements.  If it contains only empty strings, return an
+	empty string.
+
 Sun Jan  5 12:50:25 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* ops.h (SC_MX_BOOL_OP, MX_SC_BOOL_OP): New arg, empty_result.
 	* op-cm-cm.cc, op-cm-cs.cc, op-cm-m.cc, op-cm-s.cc, op-cs-cm.cc,
 	op-cs-m.cc, op-m-cm.cc, op-m-cs.cc, op-m-m.cc, op-m-s.cc,
 	op-s-cm.cc, op-s-m.cc, op-str-str.cc: Change all uses of
 	SC_MX_BOOL_OP and MX_SC_BOOL_OP macros.  Return correct results
 	for empty matrix cases.
diff --git a/src/pt-mat.cc b/src/pt-mat.cc
--- a/src/pt-mat.cc
+++ b/src/pt-mat.cc
@@ -66,32 +66,33 @@ private:
 
   class
   tm_row_const_rep : public SLList<octave_value>
   {
   public:
 
     tm_row_const_rep (void)
       : SLList<octave_value> (), count (1), nr (0), nc (0),
-	all_str (false), is_cmplx (false), ok (false) { }
+	all_str (false), is_cmplx (false), all_mt (true), ok (false) { }
 
     tm_row_const_rep (const tree_matrix_row& mr)
       : SLList<octave_value> (), count (1), nr (0), nc (0),
-	all_str (false), is_cmplx (false), ok (false)
+	all_str (false), is_cmplx (false), all_mt (true), ok (false)
         { init (mr); }
 
     ~tm_row_const_rep (void) { }
 
     int count;
 
     int nr;
     int nc;
 
     bool all_str;
     bool is_cmplx;
+    bool all_mt;
 
     bool ok;
 
     void init (const tree_matrix_row&);
 
   private:
 
     tm_row_const_rep (const tm_row_const_rep&);
@@ -140,16 +141,17 @@ public:
 	delete rep;
     }
 
   int rows (void) { return rep->nr; }
   int cols (void) { return rep->nc; }
 
   bool all_strings (void) const { return rep->all_str; }
   bool is_complex (void) const { return rep->is_cmplx; }
+  bool all_empty (void) const { return rep->all_mt; }
 
   octave_value& operator () (Pix p) { return rep->operator () (p); }
 
   const octave_value& operator () (Pix p) const
     { return rep->operator () (p); }
 
   Pix first (void) const { return rep->first (); }
   void next (Pix& p) const { rep->next (p); }
@@ -193,16 +195,18 @@ tm_row_const::tm_row_const_rep::init (co
 		{
 		  eval_error ("empty matrix found in matrix list",
 			      elt->line (), elt->column ());
 		  break;
 		}
 	    }
 	  else
 	    {
+	      all_mt = false;
+
 	      if (first_elem)
 		{
 		  first_elem = false;
 
 		  nr = this_elt_nr;
 		}
 	      else if (this_elt_nr != nr)
 		{
@@ -255,36 +259,38 @@ template class SLList<tm_row_const>;
 
 class
 tm_const : public SLList<tm_row_const>
 {
 public:
 
   tm_const (const tree_matrix& tm)
     : SLList<tm_row_const> (), nr (0), nc (0), all_str (false),
-      is_cmplx (false), ok (false)
+      is_cmplx (false), all_mt (true), ok (false)
       { init (tm); }
 
   ~tm_const (void) { }
 
   int rows (void) const { return nr; }
   int cols (void) const { return nc; }
 
   bool all_strings (void) const { return all_str; }
   bool is_complex (void) const { return is_cmplx; }
+  bool all_empty (void) const { return all_mt; }
 
   operator void* () const { return ok ? (void *) -1 : (void *) 0; }
 
 private:
 
   int nr;
   int nc;
 
   bool all_str;
   bool is_cmplx;
+  bool all_mt;
 
   bool ok;
 
   tm_const (void);
 
   tm_const (const tm_const&);
 
   tm_const& operator = (const tm_const&);
@@ -313,16 +319,19 @@ tm_const::init (const tree_matrix& tm)
       if (tmp)
 	{
 	  if (all_str && ! tmp.all_strings ())
 	    all_str = false;
 
 	  if (! is_cmplx && tmp.is_complex ())
 	    is_cmplx = true;
 
+	  if (all_mt && ! tmp.all_empty ())
+	    all_mt = false;
+
 	  append (tmp);
 	}
       else
 	break;
     }
 
   if (! error_state)
     {
@@ -340,16 +349,18 @@ tm_const::init (const tree_matrix& tm)
 	      else if (Vempty_list_elements_ok == 0)
 		{
 		  ::error ("empty matrix found in matrix list");
 		  break;
 		}
 	    }
 	  else
 	    {
+	      all_mt = false;
+
 	      if (first_elem)
 		{
 		  first_elem = false;
 
 		  nc = this_elt_nc;
 		}
 	      else if (all_str)
 		{
@@ -457,31 +468,36 @@ tree_matrix::all_elements_are_constant (
 
 octave_value
 tree_matrix::eval (bool /* print */)
 {
   octave_value retval;
 
   tm_const tmp (*this);
 
+  bool all_strings = false;
+  bool all_empty = false;
+
   if (tmp)
     {
       int nr = tmp.rows ();
       int nc = tmp.cols ();
 
       Matrix m;
       ComplexMatrix cm;
       charMatrix chm;
 
       // Now, extract the values from the individual elements and
       // insert them in the result matrix.
 
-      bool all_strings = tmp.all_strings ();
       bool found_complex = tmp.is_complex ();
 
+      all_strings = tmp.all_strings ();
+      all_empty = tmp.all_empty ();
+
       if (all_strings)
 	chm.resize (nr, nc, Vstring_fill_char);
       else if (found_complex)
 	cm.resize (nr, nc, 0.0);
       else
 	m.resize (nr, nc, 0.0);
 
       int put_row = 0;
@@ -549,16 +565,24 @@ tree_matrix::eval (bool /* print */)
 	    }
 
 	  put_row += row.rows ();
 	}
     }
 
 done:
 
+  if (! error_state && retval.is_undefined () && all_empty)
+    {
+      if (all_strings)
+	retval = "";
+      else
+	retval = Matrix ();
+    }
+
   return retval;
 }
 
 void
 tree_matrix::accept (tree_walker& tw)
 {
   tw.visit_matrix (*this);
 }
diff --git a/test/ChangeLog b/test/ChangeLog
--- a/test/ChangeLog
+++ b/test/ChangeLog
@@ -1,8 +1,12 @@
+Tue Jan  7 00:16:23 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* Version 2.0.1 released.
+
 Tue Dec 10 01:43:05 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Version 2.0 released.
 
 Fri Dec  6 15:23:39 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Version 1.94.
 
