# HG changeset patch
# User jwe
# Date 1041479153 0
#      Thu Jan 02 03:45:53 2003 +0000
# Node ID b8a4496d7b24ff072e4cc4597129c3ebef80a947
# Parent  e556870ce8f018ccc0b5b5e497dbfcb3d173d11b
[project @ 2003-01-02 03:45:53 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,17 @@
 2003-01-01  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* pt-arg-list.cc (tree_argument_list::append): New function.
+	(tree_argument_list::convert_to_const_vector): Don't save and
+	set pointer to indexed object if list_includes_magic_end is false.
+	* pt-arg-list.h (tree_argument_list::append): Provide decl.
+	(tree_argument_list::list_includes_magic_end): New data member.
+	(tree_argument_list::tree_argument_list): Initialize it.
+
 	* ov-base.cc (octave_base_value::char_matrix_value,
 	octave_base_value::all_strings,	octave_base_value::string_value):
 	Attempt conversions here if Vimplicit_num_to_num_ok is true.
 
 	* ov.cc (Vimplicit_num_to_str_ok): Move here from pt-mat.cc and
 	make extern.
 	* ov.h: Provide decl.
 
diff --git a/src/pt-arg-list.cc b/src/pt-arg-list.cc
--- a/src/pt-arg-list.cc
+++ b/src/pt-arg-list.cc
@@ -52,16 +52,25 @@ tree_argument_list::~tree_argument_list 
   while (! empty ())
     {
       iterator p = begin ();
       delete *p;
       erase (p);
     }
 }
 
+void
+tree_argument_list::append (const element_type& s)
+{
+  octave_base_list<tree_expression *>::append (s);
+
+  if (s && s->is_identifier () && s->name () == "__end__")
+    list_includes_magic_end = true;
+}
+
 int
 tree_argument_list::nargout_count (void) const
 {
   int retval = 0;
 
   for (const_iterator p = begin (); p != end (); p++)
     {
       tree_expression *elt = *p;
@@ -149,17 +158,18 @@ DEFCONSTFUN (__end__, , ,
 }
 
 octave_value_list
 tree_argument_list::convert_to_const_vector (const octave_value *object)
 {
   // END doesn't make sense for functions.  Maybe we need a different
   // way of asking an octave_value object this question?
 
-  bool stash_object = (object && object->is_constant ());
+  bool stash_object = (list_includes_magic_end
+		       && object && object->is_constant ());
 
   if (stash_object)
     {
       unwind_protect::begin_frame ("convert_to_const_vector");
 
       unwind_protect_ptr (indexed_object);
 
       indexed_object = object;
diff --git a/src/pt-arg-list.h b/src/pt-arg-list.h
--- a/src/pt-arg-list.h
+++ b/src/pt-arg-list.h
@@ -40,42 +40,50 @@ class tree_walker;
 // Argument lists.  Used to hold the list of expressions that are the
 // arguments in a function call or index expression.
 
 class
 tree_argument_list : public octave_base_list<tree_expression *>
 {
 public:
 
-  tree_argument_list (void) { }
+  typedef tree_expression* element_type;
 
-  tree_argument_list (tree_expression *t) { append (t); }
+  tree_argument_list (void)
+    : list_includes_magic_end (false) { }
+
+  tree_argument_list (tree_expression *t)
+    : list_includes_magic_end (false) { append (t); }
 
   ~tree_argument_list (void);
 
   tree_expression *remove_front (void)
     {
       iterator p = begin ();
       tree_expression *retval = *p;
       erase (p);
       return retval;
     }
 
+  void append (const element_type& s);
+
   int nargout_count (void) const;
 
   bool all_elements_are_constant (void) const;
 
   octave_value_list convert_to_const_vector (const octave_value *object = 0);
 
   string_vector get_arg_names (void) const;
 
   void accept (tree_walker& tw);
 
 private:
 
+  bool list_includes_magic_end;
+
   // No copying!
 
   tree_argument_list (const tree_argument_list&);
 
   tree_argument_list& operator = (const tree_argument_list&);
 };
 
 #endif
