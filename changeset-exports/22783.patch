# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1479160656 -3600
#      Mon Nov 14 22:57:36 2016 +0100
# Node ID 219c70d2ba286751c9c3ab5fd07c3482f287fb90
# Parent  af79b2a398edaac9eff68828f369d202a48600da
print.m: Don't change ui* objects units (bug #49600).

* print.m: Initialize nfig variable at beginning of the unwind_protect block.
Remove ui* objects from the list of axes children.
Consistently use "end" keyword to index prop array.
Increment nfig after each "set" operation on "units" properties.

diff --git a/scripts/plot/util/print.m b/scripts/plot/util/print.m
--- a/scripts/plot/util/print.m
+++ b/scripts/plot/util/print.m
@@ -336,84 +336,85 @@ function print (varargin)
     opts.ghostscript.prepend = [tempname() ext];
     copyfile (opts.ghostscript.output, opts.ghostscript.prepend);
   endif
 
   unwind_protect
 
     ## Modify properties as specified by options
     props = [];
+    nfig = 0;
 
     drawnow ();
 
     ## print() requires children of axes to have units = "normalized", or "data"
     hobj = findall (opts.figure, "-not", "type", "figure", ...
-      "-not", "type", "axes", "-property", "units", ...
-      "-not", "units", "normalized", "-not", "units", "data");
+                    "-not", "type", "axes", "-property", "units", ...
+                    "-not", "units", "normalized", "-not", "units", "data");
+    hobj = hobj(! strncmp (get (hobj, "type"), "ui", 2));
     for n = 1:numel(hobj)
       props(n).h = hobj(n);
       props(n).name = "units";
       props(n).value = {get(hobj(n), "units")};
       set (hobj(n), "units", "data");
+      nfig += 1;
     endfor
 
     ## print() requires axes units = "normalized"
     hax = findall (opts.figure, "-depth", 1, "type", "axes", ...
       "-not", "units", "normalized");
-    m = numel (props);
     for n = 1:numel(hax)
-      props(m+n).h = hax(n);
-      props(m+n).name = "units";
-      props(m+n).value = {get(hax(n), "units")};
+      props(end+1).h = hax(n);
+      props(end).name = "units";
+      props(end).value = {get(hax(n), "units")};
       set (hax(n), "units", "normalized");
+      nfig += 1;
     endfor
 
     ## print() requires figure units to be "pixels"
-    m = numel (props);
-    props(m+1).h = opts.figure;
-    props(m+1).name = "units";
-    props(m+1).value = {get(opts.figure, "units")};
+    props(end+1).h = opts.figure;
+    props(end).name = "units";
+    props(end).value = {get(opts.figure, "units")};
     set (opts.figure, "units", "pixels");
+    nfig += 1;
 
     ## graphics toolkit translates figure position to eps bbox (points)
     fpos = get (opts.figure, "position");
-    props(m+2).h = opts.figure;
-    props(m+2).name = "position";
-    props(m+2).value = {fpos};
+    props(end+1).h = opts.figure;
+    props(end).name = "position";
+    props(end).value = {fpos};
     fpos(3:4) = opts.canvas_size;
     set (opts.figure, "position", fpos);
+    nfig += 1;
 
     ## Implement InvertHardCopy option
     do_hardcopy = strcmp (get (opts.figure, "inverthardcopy"), "on");
 
     if (do_hardcopy)
       ## Set figure background to white.
-      props(m+3).h = opts.figure;
-      props(m+3).name = "color";
-      props(m+3).value{1} = get (props(m+3).h, props(m+3).name);
-      set (props(m+3).h, "color", "white");
-      nfig = m + 3;
-    else
-      nfig = m + 2;
+      props(end+1).h = opts.figure;
+      props(end).name = "color";
+      props(end).value{1} = get (opts.figure, "color");
+      set (opts.figure, "color", "white");
+      nfig += 1;
     endif
 
     if (do_hardcopy)
       ## Set background to white for all top-level axes objects
       hax = findall (opts.figure, "-depth", 1, "type", "axes",
                                   "-not", "tag", "legend",
                                   "-not", "color", "none");
       if (! isempty (hax))
-        m = numel (props);
         for n = 1:numel (hax)
-          props(m+n).h = hax(n);
-          props(m+n).name = "color";
-          props(m+n).value{1} = get(hax(n), "color");
+          props(end+1).h = hax(n);
+          props(end).name = "color";
+          props(end).value{1} = get(hax(n), "color");
           set (hax(n), "color", "white");
+          nfig += 1;
         endfor
-        nfig += n;
       endif
     endif
 
     if (opts.force_solid != 0)
       h = findall (opts.figure, "-property", "linestyle");
       m = numel (props);
       for n = 1:numel (h)
         props(m+n).h = h(n);
