# HG changeset patch
# User jwe
# Date 1191841608 0
#      Mon Oct 08 11:06:48 2007 +0000
# Node ID 9e32bb1099804b5ca8bf99d3605d205fa2d894b4
# Parent  6fcc2f5b2c7d2b68805b34b7b7c776dbd115491a
[project @ 2007-10-08 11:06:47 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,39 @@
 2007-10-08  John W. Eaton  <jwe@octave.org>
 
+	* load-save.cc 	(save_vars, dump_octave_core):
+	Don't pass INFNAN_WARNED to do_save.
+	(do_save): Delete unused arg, INFNAN_WARNED.
+	Don't pass INFNAN_WARNED to save_ascii_data.
+	* ls-oct-ascii.cc (save_ascii_data_for_plotting):
+	Don't pass INFNAN_WARNED to save_ascii.
+	(save_ascii_data): Delete unused arg, INFNAN_WARNED.
+
+	* ov.h (octave_value::save_ascii): Delete unused arg, INFNAN_WARNED.
+	* ov-base-int.cc (octave_base_int_matrix<T>::save_ascii,
+	octave_base_int_scalar<T>::save_ascii): Likewise.
+	* ov-base-sparse.cc (octave_base_sparse<T>::save_ascii): Likewise.
+	* ov-base.cc (octave_base_value::save_ascii): Likewise.
+	* ov-bool-mat.cc (octave_bool_matrix::save_ascii): Likewise.
+	* ov-bool.cc (octave_bool::save_ascii): Likewise.
+	* ov-cell.cc (octave_cell::save_ascii): Likewise.
+	* ov-fcn-handle.cc (octave_fcn_handle::save_ascii): Likewise.
+	* ov-fcn-inline.cc (octave_fcn_inline::save_ascii): Likewise.
+	* ov-list.cc (octave_list::save_ascii): Likewise.
+	* ov-struct.cc (octave_struct::save_ascii): Likewise.
+	* ov-str-mat.cc (octave_char_matrix_str::save_ascii): Likewise.
+	* ov-range.cc (octave_range::save_ascii): Likewise.
+
+	* ov-scalar.cc (octave_scalar::save_ascii): Remove warning about
+	reloading inf/nan values.  Delete unused arg, INFNAN_WARNED.
+	* ov-complex.cc (octave_complex::save_ascii): Likewise.
+	* ov-re-mat.cc (octave_matrix::save_ascii): Likewise.
+	* ov-cx-mat.cc (octave_complex_matrix::save_ascii): Likewise.
+
 	* ov-fcn-inline.cc (Finline): Use DEFUNX instead of DEFUN.
 
 2007-10-08  Michael Goffioul <michael.goffioul@gmail.com>
 
 	* sighandlers.h (can_interrupt): Tag with OCTINERP_API.
 	* sysdep.h (raw_mode, octave_popen, octave_pclose,
 	same_file_internal): Likewise.
 
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -1027,23 +1027,22 @@ glob_pattern_p (const std::string& patte
     }
 
   return false;
 }
 
 static void
 do_save (std::ostream& os, const octave_value& tc,
 	 const std::string& name, const std::string& help,
-	 int global, load_save_format fmt, bool save_as_floats,
-	 bool& infnan_warned)
+	 int global, load_save_format fmt, bool save_as_floats)
 {
   switch (fmt)
     {
     case LS_ASCII:
-      save_ascii_data (os, tc, name, infnan_warned, global, 0);
+      save_ascii_data (os, tc, name, global, 0);
       break;
 
     case LS_BINARY:
       save_binary_data (os, tc, name, help, global, save_as_floats);
       break;
 
     case LS_MAT_ASCII:
     case LS_MAT_ASCII_LONG:
@@ -1074,55 +1073,52 @@ do_save (std::ostream& os, const octave_
       break;
     }
 }
 
 // Save the info from SR on stream OS in the format specified by FMT.
 
 void
 do_save (std::ostream& os, symbol_record *sr, load_save_format fmt,
-	 bool save_as_floats, bool& infnan_warned)
+	 bool save_as_floats)
 {
   if (! sr->is_variable ())
     {
       error ("save: can only save variables, not functions");
       return;
     }
 
   octave_value tc = sr->def ();
 
   if (tc.is_defined ())
     {
       std::string name = sr->name ();
       std::string help = sr->help ();
 
       int global = sr->is_linked_to_global ();
 
-      do_save (os, tc, name, help, global, fmt, save_as_floats,
-	       infnan_warned);
+      do_save (os, tc, name, help, global, fmt, save_as_floats);
     }
 }
 
 // Save variables with names matching PATTERN on stream OS in the
 // format specified by FMT.
 
 static int
 save_vars (std::ostream& os, const std::string& pattern,
 	   load_save_format fmt, bool save_as_floats)
 {
   Array<symbol_record *> vars = curr_sym_tab->glob
     (pattern, symbol_record::USER_VARIABLE, SYMTAB_ALL_SCOPES);
 
   int saved = vars.length ();
 
-  bool infnan_warned = false;
-
   for (int i = 0; i < saved; i++)
     {
-      do_save (os, vars(i), fmt, save_as_floats, infnan_warned);
+      do_save (os, vars(i), fmt, save_as_floats);
 
       if (error_state)
 	break;
     }
 
   return saved;
 }
 
@@ -1336,18 +1332,16 @@ dump_octave_core (std::ostream& os, cons
 {
   write_header (os, fmt);
 
   Array<symbol_record *> vars = curr_sym_tab->glob
     ("*", symbol_record::USER_VARIABLE, SYMTAB_ALL_SCOPES);
 
   int num_to_save = vars.length ();
 
-  bool infnan_warned = false;
-
   double save_mem_size = 0;
 
   for (int i = 0; i < num_to_save; i++)
     {
       symbol_record *sr = vars(i);
 
       if (sr->is_variable ())
 	{
@@ -1365,18 +1359,17 @@ dump_octave_core (std::ostream& os, cons
 		{
 		  save_mem_size += tc_size;
 
 		  std::string name = sr->name ();
 		  std::string help = sr->help ();
 
 		  int global = sr->is_linked_to_global ();
 
-		  do_save (os, tc, name, help, global, fmt, save_as_floats,
-			   infnan_warned);
+		  do_save (os, tc, name, help, global, fmt, save_as_floats);
 
 		  if (error_state)
 		    break;
 		}
 	    }
 	}
     }
 
diff --git a/src/load-save.h b/src/load-save.h
--- a/src/load-save.h
+++ b/src/load-save.h
@@ -55,17 +55,17 @@ read_binary_file_header (std::istream& i
 extern octave_value
 do_load (std::istream& stream, const std::string& orig_fname, bool force,
 	 load_save_format format, oct_mach_info::float_format flt_fmt,
 	 bool list_only, bool swap, bool verbose,
 	 const string_vector& argv, int argv_idx, int argc, int nargout);
 
 extern void
 do_save (std::ostream& os, symbol_record *sr, load_save_format fmt,
-	 bool save_as_floats, bool& infnan_warned);
+	 bool save_as_floats);
 
 extern void
 write_header (std::ostream& os, load_save_format format);
 
 #endif
 
 /*
 ;;; Local Variables: ***
diff --git a/src/ls-oct-ascii.cc b/src/ls-oct-ascii.cc
--- a/src/ls-oct-ascii.cc
+++ b/src/ls-oct-ascii.cc
@@ -316,18 +316,18 @@ read_ascii_data (std::istream& is, const
 // Assumes ranges and strings cannot contain Inf or NaN values.
 //
 // Returns 1 for success and 0 for failure.
 
 // FIXME -- should probably write the help string here too.
 
 bool
 save_ascii_data (std::ostream& os, const octave_value& val_arg,
-		 const std::string& name, bool& infnan_warned,
-		 bool mark_as_global, int precision)
+		 const std::string& name, bool mark_as_global,
+		 int precision)
 {
   bool success = true;
 
   if (! name.empty ())
     os << "# name: " << name << "\n";
 
   octave_value val = val_arg;
 
@@ -337,30 +337,28 @@ save_ascii_data (std::ostream& os, const
     os << "# type: " << val.type_name() << "\n";
 
   if (! precision)
     precision = Vsave_precision;
 
   long old_precision = os.precision ();
   os.precision (precision);
 
-  success = val . save_ascii (os, infnan_warned);
+  success = val.save_ascii (os);
 
   os.precision (old_precision);
 
   return (os && success);
 }
 
 bool
 save_ascii_data_for_plotting (std::ostream& os, const octave_value& t,
 			      const std::string& name)
 {
-  bool infnan_warned = true;
-
-  return save_ascii_data (os, t, name, infnan_warned, false, 6);
+  return save_ascii_data (os, t, name, false, 6);
 }
 
 // Maybe this should be a static function in tree-plot.cc?
 
 // If TC is matrix, save it on stream OS in a format useful for
 // making a 3-dimensional plot with gnuplot.  If PARAMETRIC is
 // TRUE, assume a parametric 3-dimensional plot will be generated.
 
diff --git a/src/ls-oct-ascii.h b/src/ls-oct-ascii.h
--- a/src/ls-oct-ascii.h
+++ b/src/ls-oct-ascii.h
@@ -45,18 +45,17 @@ extract_keyword (std::istream& is, const
 		 const bool next_only = false);
 
 extern OCTINTERP_API std::string
 read_ascii_data (std::istream& is, const std::string& filename, bool& global,
 		 octave_value& tc, octave_idx_type count);
 
 extern OCTINTERP_API bool
 save_ascii_data (std::ostream& os, const octave_value& val_arg,
-		 const std::string& name, bool& infnan_warned,
-		 bool mark_as_global, int precision);
+		 const std::string& name, bool mark_as_global, int precision);
 
 extern OCTINTERP_API bool
 save_ascii_data_for_plotting (std::ostream& os, const octave_value& t,
 			      const std::string& name);
 
 extern OCTINTERP_API bool
 save_three_d (std::ostream& os, const octave_value& t,
 	      bool parametric = false);
diff --git a/src/ov-base-int.cc b/src/ov-base-int.cc
--- a/src/ov-base-int.cc
+++ b/src/ov-base-int.cc
@@ -107,17 +107,17 @@ octave_base_int_matrix<T>::convert_to_st
 
   retval = octave_value (chm, true, type);
 
   return retval;
 }
 
 template <class T>
 bool
-octave_base_int_matrix<T>::save_ascii (std::ostream& os, bool&)
+octave_base_int_matrix<T>::save_ascii (std::ostream& os)
 {
   dim_vector d = this->dims ();
 
   os << "# ndims: " << d.length () << "\n";
 
   for (int i = 0; i < d.length (); i++)
     os << " " << d (i);
 
@@ -392,17 +392,17 @@ octave_base_int_scalar<T>::convert_to_st
   else
     retval = octave_value (std::string (1, static_cast<char> (ival)), type);
 
   return retval;
 }
 
 template <class T>
 bool
-octave_base_int_scalar<T>::save_ascii (std::ostream& os, bool&)
+octave_base_int_scalar<T>::save_ascii (std::ostream& os)
 {
   os << this->scalar << "\n";
   return true;
 }
 
 template <class T>
 bool 
 octave_base_int_scalar<T>::load_ascii (std::istream& is)
diff --git a/src/ov-base-int.h b/src/ov-base-int.h
--- a/src/ov-base-int.h
+++ b/src/ov-base-int.h
@@ -64,17 +64,17 @@ public:
   //  void increment (void) { matrix += 1; }
 
   //  void decrement (void) { matrix -= 1; }
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   octave_value convert_to_str_internal (bool, bool, char type) const;
 
-  bool save_ascii (std::ostream& os, bool& infnan_warned);
+  bool save_ascii (std::ostream& os);
 
   bool load_ascii (std::istream& is);
 
   bool save_binary (std::ostream& os, bool& );
 
   bool load_binary (std::istream& is, bool swap, 
 		    oct_mach_info::float_format );
 
@@ -107,17 +107,17 @@ public:
   bool is_real_type (void) const { return true; }
 
   //  void increment (void) { scalar += 1; }
 
   //  void decrement (void) { scalar -= 1; }
 
   octave_value convert_to_str_internal (bool, bool, char type) const;
 
-  bool save_ascii (std::ostream& os, bool&);
+  bool save_ascii (std::ostream& os);
 
   bool load_ascii (std::istream& is);
 
   bool save_binary (std::ostream& os, bool& );
 
   bool load_binary (std::istream& is, bool swap, 
 		    oct_mach_info::float_format );
 
diff --git a/src/ov-base-sparse.cc b/src/ov-base-sparse.cc
--- a/src/ov-base-sparse.cc
+++ b/src/ov-base-sparse.cc
@@ -290,17 +290,17 @@ octave_base_sparse<T>::print_raw (std::o
 	      octave_print_internal (os, matrix.data(i), pr_as_read_syntax);
 	    }
 	}
     }
 }
 
 template <class T>
 bool
-octave_base_sparse<T>::save_ascii (std::ostream& os, bool&)
+octave_base_sparse<T>::save_ascii (std::ostream& os)
 {
   dim_vector dv = this->dims ();
 
   // Ensure that additional memory is deallocated
   matrix.maybe_compress ();
 
   os << "# nnz: "      << nzmax () << "\n";
   os << "# rows: "     << dv (0) << "\n";
diff --git a/src/ov-base-sparse.h b/src/ov-base-sparse.h
--- a/src/ov-base-sparse.h
+++ b/src/ov-base-sparse.h
@@ -136,17 +136,17 @@ octave_base_sparse : public octave_base_
   bool print_as_scalar (void) const;
 
   void print (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   void print_info (std::ostream& os, const std::string& prefix) const;
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
-  bool save_ascii (std::ostream& os, bool& infnan_warned);
+  bool save_ascii (std::ostream& os);
 
   bool load_ascii (std::istream& is);
 
   // Unsafe.  These functions exists to support the MEX interface.
   // You should not use them anywhere else.
   void *mex_get_data (void) const { return matrix.mex_get_data (); }
 
   octave_idx_type *mex_get_ir (void) const { return matrix.mex_get_ir (); }
diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -810,17 +810,17 @@ octave_value_list
 octave_base_value::list_value (void) const
 {
   octave_value_list retval;
   gripe_wrong_type_arg ("octave_base_value::list_value()", type_name ());
   return retval;
 }
 
 bool 
-octave_base_value::save_ascii (std::ostream&, bool&)
+octave_base_value::save_ascii (std::ostream&)
 {
   gripe_wrong_type_arg ("octave_base_value::save_ascii()", type_name ());
   return false;
 }
 
 bool 
 octave_base_value::load_ascii (std::istream&)
 {
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -414,17 +414,17 @@ public:
   print_name_tag (std::ostream& os, const std::string& name) const;
 
   virtual void
   print_with_name (std::ostream& output_buf, const std::string& name, 
 		   bool print_padding = true) const;
 
   virtual void print_info (std::ostream& os, const std::string& prefix) const;
 
-  virtual bool save_ascii (std::ostream& os, bool& infnan_warned);
+  virtual bool save_ascii (std::ostream& os);
 
   virtual bool load_ascii (std::istream& is);
 
   virtual bool save_binary (std::ostream& os, bool& save_as_floats);
 
   virtual bool load_binary (std::istream& is, bool swap, 
 			    oct_mach_info::float_format fmt);
 
diff --git a/src/ov-bool-mat.cc b/src/ov-bool-mat.cc
--- a/src/ov-bool-mat.cc
+++ b/src/ov-bool-mat.cc
@@ -144,17 +144,17 @@ void
 octave_bool_matrix::print_raw (std::ostream& os,
 			       bool pr_as_read_syntax) const
 {
   octave_print_internal (os, matrix, pr_as_read_syntax,
 			 current_print_indent_level ());
 }
 
 bool 
-octave_bool_matrix::save_ascii (std::ostream& os, bool& /* infnan_warned */)
+octave_bool_matrix::save_ascii (std::ostream& os)
 {
   dim_vector d = dims ();
   if (d.length () > 2)
     {
       NDArray tmp = array_value ();
       os << "# ndims: " << d.length () << "\n";
 
       for (int i = 0; i < d.length (); i++)
diff --git a/src/ov-bool-mat.h b/src/ov-bool-mat.h
--- a/src/ov-bool-mat.h
+++ b/src/ov-bool-mat.h
@@ -159,17 +159,17 @@ public:
 
   SparseBoolMatrix sparse_bool_matrix_value (bool = false) const
   { return SparseBoolMatrix (matrix.matrix_value ()); }
 
   octave_value convert_to_str_internal (bool pad, bool force, char type) const;
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
-  bool save_ascii (std::ostream& os, bool& infnan_warned);
+  bool save_ascii (std::ostream& os);
 
   bool load_ascii (std::istream& is);
 
   bool save_binary (std::ostream& os, bool& save_as_floats);
 
   bool load_binary (std::istream& is, bool swap, 
 		    oct_mach_info::float_format fmt);
 
diff --git a/src/ov-bool.cc b/src/ov-bool.cc
--- a/src/ov-bool.cc
+++ b/src/ov-bool.cc
@@ -128,17 +128,17 @@ octave_bool::convert_to_str_internal (bo
   char s[2];
   s[0] = static_cast<char> (scalar);
   s[1] = '\0';
 
   return octave_value (s, type);
 }
 
 bool 
-octave_bool::save_ascii (std::ostream& os, bool& /* infnan_warned */)
+octave_bool::save_ascii (std::ostream& os)
 {
   double d = double_value ();
 
   octave_write_double (os, d);
   os << "\n";
 
   return true;
 }
diff --git a/src/ov-bool.h b/src/ov-bool.h
--- a/src/ov-bool.h
+++ b/src/ov-bool.h
@@ -161,17 +161,17 @@ public:
 
   boolNDArray bool_array_value (bool = false) const
     { return boolNDArray (dim_vector (1, 1), scalar); }
 
   octave_value resize (const dim_vector& dv, bool fill = false) const;
 
   octave_value convert_to_str_internal (bool pad, bool force, char type) const;
 
-  bool save_ascii (std::ostream& os, bool& infnan_warned);
+  bool save_ascii (std::ostream& os);
 
   bool load_ascii (std::istream& is);
 
   bool save_binary (std::ostream& os, bool& save_as_floats);
 
   bool load_binary (std::istream& is, bool swap, 
 		    oct_mach_info::float_format fmt);
 
diff --git a/src/ov-cell.cc b/src/ov-cell.cc
--- a/src/ov-cell.cc
+++ b/src/ov-cell.cc
@@ -458,17 +458,17 @@ octave_cell::print_raw (std::ostream& os
       os << "{" << dv.str () << " Cell Array}";
       newline (os);
     }
 }
 
 #define CELL_ELT_TAG "<cell-element>"
 
 bool 
-octave_cell::save_ascii (std::ostream& os, bool& infnan_warned)
+octave_cell::save_ascii (std::ostream& os)
 {
   dim_vector d = dims ();
   if (d.length () > 2)
     {
       os << "# ndims: " << d.length () << "\n";
       
       for (int i = 0; i < d.length (); i++)
 	os << " " << d (i);
@@ -476,18 +476,17 @@ octave_cell::save_ascii (std::ostream& o
 
       Cell tmp = cell_value ();
       
       for (octave_idx_type i = 0; i < d.numel (); i++)
 	{
 	  octave_value o_val = tmp.elem (i);
 
 	  // Recurse to print sub-value.
-	  bool b = save_ascii_data (os, o_val, CELL_ELT_TAG, infnan_warned, 
-				    false, 0);
+	  bool b = save_ascii_data (os, o_val, CELL_ELT_TAG, false, 0);
 	      
 	  if (! b)
 	    return os;
 	}
     }
   else
     {
       // Keep this case, rather than use generic code above for backward 
@@ -499,18 +498,17 @@ octave_cell::save_ascii (std::ostream& o
       
       for (octave_idx_type j = 0; j < tmp.cols (); j++)
 	{
 	  for (octave_idx_type i = 0; i < tmp.rows (); i++)
 	    {
 	      octave_value o_val = tmp.elem (i, j);
 
 	      // Recurse to print sub-value.
-	      bool b = save_ascii_data (os, o_val, CELL_ELT_TAG, 
-					infnan_warned, false, 0);
+	      bool b = save_ascii_data (os, o_val, CELL_ELT_TAG, false, 0);
 	      
 	      if (! b)
 		return os;
 	    }
 	  
 	  os << "\n";
 	}
     }
diff --git a/src/ov-cell.h b/src/ov-cell.h
--- a/src/ov-cell.h
+++ b/src/ov-cell.h
@@ -110,17 +110,17 @@ public:
 
   bool print_as_scalar (void) const;
 
   void print (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
 
-  bool save_ascii (std::ostream& os, bool& infnan_warned);
+  bool save_ascii (std::ostream& os);
 
   bool load_ascii (std::istream& is);
 
   bool save_binary (std::ostream& os, bool& save_as_floats);
 
   bool load_binary (std::istream& is, bool swap, 
 		    oct_mach_info::float_format fmt);
 
diff --git a/src/ov-complex.cc b/src/ov-complex.cc
--- a/src/ov-complex.cc
+++ b/src/ov-complex.cc
@@ -171,26 +171,20 @@ octave_complex::resize (const dim_vector
       if (dv.numel ())
 	retval(0) = scalar;
 
       return retval;
     }
 }
 
 bool 
-octave_complex::save_ascii (std::ostream& os, bool& infnan_warned)
+octave_complex::save_ascii (std::ostream& os)
 {
   Complex c = complex_value ();
 
-  if (! infnan_warned && (xisnan (c) || xisinf (c)))
-    {
-      warning ("save: Inf or NaN values may not be reloadable");
-      infnan_warned = true;
-    }
-      
   octave_write_complex (os, c);
 
   os << "\n";
 
   return true;
 }
 
 bool 
diff --git a/src/ov-complex.h b/src/ov-complex.h
--- a/src/ov-complex.h
+++ b/src/ov-complex.h
@@ -117,17 +117,17 @@ public:
   ComplexMatrix complex_matrix_value (bool = false) const;
 
   ComplexNDArray complex_array_value (bool = false) const;
 
   void increment (void) { scalar += 1.0; }
 
   void decrement (void) { scalar -= 1.0; }
 
-  bool save_ascii (std::ostream& os, bool& infnan_warned);
+  bool save_ascii (std::ostream& os);
 
   bool load_ascii (std::istream& is);
 
   bool save_binary (std::ostream& os, bool& save_as_floats);
 
   bool load_binary (std::istream& is, bool swap, 
 		    oct_mach_info::float_format fmt);
 
diff --git a/src/ov-cx-mat.cc b/src/ov-cx-mat.cc
--- a/src/ov-cx-mat.cc
+++ b/src/ov-cx-mat.cc
@@ -196,29 +196,23 @@ octave_complex_matrix::sparse_matrix_val
 
 SparseComplexMatrix
 octave_complex_matrix::sparse_complex_matrix_value (bool) const
 {
   return SparseComplexMatrix (matrix.matrix_value ());
 }
 
 bool 
-octave_complex_matrix::save_ascii (std::ostream& os, bool& infnan_warned)
+octave_complex_matrix::save_ascii (std::ostream& os)
 {
   dim_vector d = dims ();
   if (d.length () > 2)
     {
       ComplexNDArray tmp = complex_array_value ();
 
-      if (! infnan_warned && tmp.any_element_is_inf_or_nan ())
-	{
-	  warning ("save: Inf or NaN values may not be reloadable");
-	  infnan_warned = true;
-	}
-
       os << "# ndims: " << d.length () << "\n";
 
       for (int i = 0; i < d.length (); i++)
 	os << " " << d (i);
 
       os << "\n" << tmp;
     }
   else
diff --git a/src/ov-cx-mat.h b/src/ov-cx-mat.h
--- a/src/ov-cx-mat.h
+++ b/src/ov-cx-mat.h
@@ -116,17 +116,17 @@ public:
   SparseMatrix sparse_matrix_value (bool = false) const;
 
   SparseComplexMatrix sparse_complex_matrix_value (bool = false) const;
 
   void increment (void) { matrix += Complex (1.0); }
 
   void decrement (void) { matrix -= Complex (1.0); }
 
-  bool save_ascii (std::ostream& os, bool& infnan_warned);
+  bool save_ascii (std::ostream& os);
 
   bool load_ascii (std::istream& is);
 
   bool save_binary (std::ostream& os, bool& save_as_floats);
 
   bool load_binary (std::istream& is, bool swap, 
 		    oct_mach_info::float_format fmt);
 
diff --git a/src/ov-fcn-handle.cc b/src/ov-fcn-handle.cc
--- a/src/ov-fcn-handle.cc
+++ b/src/ov-fcn-handle.cc
@@ -256,17 +256,17 @@ octave_fcn_handle::set_fcn (const std::s
 	    }
 	}
     }
 
   return success;
 }
 
 bool
-octave_fcn_handle::save_ascii (std::ostream& os, bool& infnan_warned)
+octave_fcn_handle::save_ascii (std::ostream& os)
 {
   if (nm == "@<anonymous>")
     {
       os << nm << "\n";
 
       print_raw (os, true);
       os << "\n";
 
@@ -288,17 +288,17 @@ octave_fcn_handle::save_ascii (std::ostr
       if (varlen > 0)
 	{
 	  os << "# length: " << varlen << "\n";
 
 	  for (octave_idx_type i = 0; i < vars.length(); i++)
 	    {
 	      if (vars(i)->is_defined () &&
 		  ! save_ascii_data (os, vars(i)->def(), vars(i)->name(), 
-				     infnan_warned, false, 0))
+				     false, 0))
 		return os;
 	    }
 	}
     }
   else
     {
       os << "# octaveroot: " << OCTAVE_EXEC_PREFIX << "\n";
       os << "# path: " << user_function_value ()-> fcn_file_name () << "\n";
diff --git a/src/ov-fcn-handle.h b/src/ov-fcn-handle.h
--- a/src/ov-fcn-handle.h
+++ b/src/ov-fcn-handle.h
@@ -82,17 +82,17 @@ public:
     { return fcn.user_function_value (); }
 
   octave_fcn_handle *fcn_handle_value (bool = false) { return this; }
 
   octave_value fcn_val (void) const { return fcn; }
 
   std::string fcn_name (void) const { return nm; }
 
-  bool save_ascii (std::ostream& os, bool& infnan_warned);
+  bool save_ascii (std::ostream& os);
 
   bool load_ascii (std::istream& is);
 
   bool save_binary (std::ostream& os, bool& save_as_floats);
 
   bool load_binary (std::istream& is, bool swap, 
 		    oct_mach_info::float_format fmt);
 
diff --git a/src/ov-fcn-inline.cc b/src/ov-fcn-inline.cc
--- a/src/ov-fcn-inline.cc
+++ b/src/ov-fcn-inline.cc
@@ -105,17 +105,17 @@ octave_fcn_inline::map_value (void) cons
   for (int i = 0; i < args.length (); i++)
     buf << args(i) << " = INLINE_INPUTS_{" << i + 1 << "}; ";
   m.assign ("inputExpr", octave_value (buf.str ()));
 
   return m;
 }
 
 bool
-octave_fcn_inline::save_ascii (std::ostream& os, bool&)
+octave_fcn_inline::save_ascii (std::ostream& os)
 {
   os << "# nargs: " <<  ifargs.length () << "\n";
   for (int i = 0; i < ifargs.length (); i++)
     os << ifargs(i) << "\n";
   if (nm.length () < 1)
     // Write an invalid value to flag empty fcn handle name.
     os << "0\n";
   else
diff --git a/src/ov-fcn-inline.h b/src/ov-fcn-inline.h
--- a/src/ov-fcn-inline.h
+++ b/src/ov-fcn-inline.h
@@ -62,17 +62,17 @@ public:
   std::string fcn_text (void) const { return iftext; }
 
   string_vector fcn_arg_names (void) const { return ifargs; }
 
   octave_value convert_to_str_internal (bool, bool, char) const;
 
   Octave_map map_value (void) const;
 
-  bool save_ascii (std::ostream& os, bool& infnan_warned);
+  bool save_ascii (std::ostream& os);
 
   bool load_ascii (std::istream& is);
 
   bool save_binary (std::ostream& os, bool& save_as_floats);
 
   bool load_binary (std::istream& is, bool swap, 
 		    oct_mach_info::float_format fmt);
 
diff --git a/src/ov-list.cc b/src/ov-list.cc
--- a/src/ov-list.cc
+++ b/src/ov-list.cc
@@ -533,31 +533,30 @@ is equivalent to @code{append (@var{list
     }
   else
     print_usage ();
 
   return retval;
 }
 
 bool 
-octave_list::save_ascii (std::ostream& os, bool& infnan_warned)
+octave_list::save_ascii (std::ostream& os)
 {
   octave_value_list lst = list_value ();
   os << "# length: " << lst.length () << "\n";
 
   for (int i = 0; i < lst.length (); ++i)
     {
       // should we use lst.name_tags () to label the elements?
 
       std::ostringstream buf;
       buf << "_" << i;
       std::string s = buf.str ();
 
-      bool b = save_ascii_data (os, lst (i), s.c_str (), infnan_warned,
-				false, 0);
+      bool b = save_ascii_data (os, lst (i), s.c_str (), false, 0);
       
       if (! b)
 	return false;
     }
 
   return true;
 }
 
diff --git a/src/ov-list.h b/src/ov-list.h
--- a/src/ov-list.h
+++ b/src/ov-list.h
@@ -94,17 +94,17 @@ public:
   octave_value_list list_value (void) const;
 
   void print (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   bool print_name_tag (std::ostream& os, const std::string& name) const;
 
-  bool save_ascii (std::ostream& os, bool& infnan_warned);
+  bool save_ascii (std::ostream& os);
 
   bool load_ascii (std::istream& is);
 
   bool save_binary (std::ostream& os, bool& save_as_floats);
 
   bool load_binary (std::istream& is, bool swap, 
 		    oct_mach_info::float_format fmt);
 
diff --git a/src/ov-range.cc b/src/ov-range.cc
--- a/src/ov-range.cc
+++ b/src/ov-range.cc
@@ -280,17 +280,17 @@ skip_comments (std::istream& is)
 	while (is.get (c) && c != '\n')
 	  ; // Skip to beginning of next line, ignoring everything.
       else
 	break;
     }
 }
 
 bool 
-octave_range::save_ascii (std::ostream& os, bool& /* infnan_warned */)
+octave_range::save_ascii (std::ostream& os)
 {
   Range r = range_value ();
   double base = r.base ();
   double limit = r.limit ();
   double inc = r.inc ();
 
   os << "# base, limit, increment\n";
   octave_write_double (os, base);
diff --git a/src/ov-range.h b/src/ov-range.h
--- a/src/ov-range.h
+++ b/src/ov-range.h
@@ -220,17 +220,17 @@ public:
   octave_value convert_to_str_internal (bool pad, bool force, char type) const;
 
   void print (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   bool print_name_tag (std::ostream& os, const std::string& name) const;
 
-  bool save_ascii (std::ostream& os, bool& infnan_warned);
+  bool save_ascii (std::ostream& os);
 
   bool load_ascii (std::istream& is);
 
   bool save_binary (std::ostream& os, bool& save_as_floats);
 
   bool load_binary (std::istream& is, bool swap, 
 		    oct_mach_info::float_format fmt);
 
diff --git a/src/ov-re-mat.cc b/src/ov-re-mat.cc
--- a/src/ov-re-mat.cc
+++ b/src/ov-re-mat.cc
@@ -250,30 +250,24 @@ octave_matrix::convert_to_str_internal (
     }
 
   retval = octave_value (chm, true, type);
 
   return retval;
 }
 
 bool 
-octave_matrix::save_ascii (std::ostream& os, bool& infnan_warned)
+octave_matrix::save_ascii (std::ostream& os)
 {
   dim_vector d = dims ();
 
   if (d.length () > 2)
     {
       NDArray tmp = array_value ();
 
-      if (! infnan_warned && tmp.any_element_is_inf_or_nan ())
-	{
-	  warning ("save: Inf or NaN values may not be reloadable");
-	  infnan_warned = true;
-	}
-
       os << "# ndims: " << d.length () << "\n";
 
       for (int i=0; i < d.length (); i++)
 	os << " " << d (i);
 
       os << "\n" << tmp;
     }
   else
diff --git a/src/ov-re-mat.h b/src/ov-re-mat.h
--- a/src/ov-re-mat.h
+++ b/src/ov-re-mat.h
@@ -151,17 +151,17 @@ public:
   void increment (void) { matrix += 1.0; }
 
   void decrement (void) { matrix -= 1.0; }
 
   octave_value convert_to_str_internal (bool pad, bool force, char type) const;
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
-  bool save_ascii (std::ostream& os, bool& infnan_warned);
+  bool save_ascii (std::ostream& os);
 
   bool load_ascii (std::istream& is);
 
   bool save_binary (std::ostream& os, bool& save_as_floats);
 
   bool load_binary (std::istream& is, bool swap, 
 		    oct_mach_info::float_format fmt);
 
diff --git a/src/ov-scalar.cc b/src/ov-scalar.cc
--- a/src/ov-scalar.cc
+++ b/src/ov-scalar.cc
@@ -151,26 +151,20 @@ octave_scalar::convert_to_str_internal (
 
       retval = octave_value (std::string (1, static_cast<char> (ival)), type);
     }
 
   return retval;
 }
 
 bool 
-octave_scalar::save_ascii (std::ostream& os, bool& infnan_warned)
+octave_scalar::save_ascii (std::ostream& os)
 {
   double d = double_value ();
 
-  if (! infnan_warned && (xisnan (d) || xisinf (d)))
-    {
-      warning ("save: Inf or NaN values may not be reloadable");
-      infnan_warned = true;
-    }
-
   octave_write_double (os, d);
 
   os << "\n";
 
   return true;
 }
 
 bool 
diff --git a/src/ov-scalar.h b/src/ov-scalar.h
--- a/src/ov-scalar.h
+++ b/src/ov-scalar.h
@@ -189,17 +189,17 @@ public:
   streamoff_array streamoff_array_value (void) const;
 
   octave_value convert_to_str_internal (bool pad, bool force, char type) const;
 
   void increment (void) { ++scalar; }
 
   void decrement (void) { --scalar; }
 
-  bool save_ascii (std::ostream& os, bool& infnan_warned);
+  bool save_ascii (std::ostream& os);
 
   bool load_ascii (std::istream& is);
 
   bool save_binary (std::ostream& os, bool& save_as_floats);
 
   bool load_binary (std::istream& is, bool swap, 
 		    oct_mach_info::float_format fmt);
 
diff --git a/src/ov-str-mat.cc b/src/ov-str-mat.cc
--- a/src/ov-str-mat.cc
+++ b/src/ov-str-mat.cc
@@ -264,17 +264,17 @@ octave_char_matrix_str::string_value (bo
 void
 octave_char_matrix_str::print_raw (std::ostream& os, bool pr_as_read_syntax) const
 {
   octave_print_internal (os, matrix, pr_as_read_syntax,
 			 current_print_indent_level (), true);
 }
 
 bool 
-octave_char_matrix_str::save_ascii (std::ostream& os, bool& /* infnan_warned */)
+octave_char_matrix_str::save_ascii (std::ostream& os)
 {
   dim_vector d = dims ();
   if (d.length () > 2)
     {
       charNDArray tmp = char_array_value ();
       os << "# ndims: " << d.length () << "\n";
       for (int i=0; i < d.length (); i++)
 	os << " " << d (i);
diff --git a/src/ov-str-mat.h b/src/ov-str-mat.h
--- a/src/ov-str-mat.h
+++ b/src/ov-str-mat.h
@@ -125,17 +125,17 @@ public:
   string_vector all_strings (bool pad = false) const;
 
   std::string string_value (bool force = false) const;
 
   bool print_as_scalar (void) const { return (rows () <= 1); }
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
-  bool save_ascii (std::ostream& os, bool& infnan_warned);
+  bool save_ascii (std::ostream& os);
 
   bool load_ascii (std::istream& is);
 
   bool save_binary (std::ostream& os, bool& save_as_floats);
 
   bool load_binary (std::istream& is, bool swap, 
 		    oct_mach_info::float_format fmt);
 
diff --git a/src/ov-struct.cc b/src/ov-struct.cc
--- a/src/ov-struct.cc
+++ b/src/ov-struct.cc
@@ -1052,27 +1052,27 @@ named fields.\n\
     }
   else
     print_usage ();
 
   return retval;
 }
 
 bool
-octave_struct::save_ascii (std::ostream& os, bool& infnan_warned)
+octave_struct::save_ascii (std::ostream& os)
 {
   Octave_map m = map_value ();
   os << "# length: " << m.nfields () << "\n";
 
   Octave_map::iterator i = m.begin ();
   while (i != m.end ())
     {
       octave_value val = map.contents (i);
 
-      bool b = save_ascii_data (os, val, m.key (i), infnan_warned, false, 0);
+      bool b = save_ascii_data (os, val, m.key (i), false, 0);
       
       if (! b)
 	return os;
 
       i++;
     }
 
   return true;
diff --git a/src/ov-struct.h b/src/ov-struct.h
--- a/src/ov-struct.h
+++ b/src/ov-struct.h
@@ -112,17 +112,17 @@ public:
   string_vector map_keys (void) const { return map.keys (); }
 
   void print (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   bool print_name_tag (std::ostream& os, const std::string& name) const;
 
-  bool save_ascii (std::ostream& os, bool& infnan_warned);
+  bool save_ascii (std::ostream& os);
 
   bool load_ascii (std::istream& is);
 
   bool save_binary (std::ostream& os, bool& save_as_floats);
 
   bool load_binary (std::istream& is, bool swap, 
 		    oct_mach_info::float_format fmt);
 
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -798,21 +798,19 @@ public:
 				 const octave_value& b,
 				 const Array<octave_idx_type>& ra_idx);
 
   const octave_base_value& get_rep (void) const { return *rep; }
 
   void print_info (std::ostream& os,
 			   const std::string& prefix = std::string ()) const;
 
-  bool save_ascii (std::ostream& os, bool& infnan_warned)
-    { return rep->save_ascii (os, infnan_warned); }
+  bool save_ascii (std::ostream& os) { return rep->save_ascii (os); }
 
-  bool load_ascii (std::istream& is)
-    { return rep->load_ascii (is); }
+  bool load_ascii (std::istream& is) { return rep->load_ascii (is); }
 
   bool save_binary (std::ostream& os, bool& save_as_floats)
     { return rep->save_binary (os, save_as_floats); }
 
   bool load_binary (std::istream& is, bool swap,
 			    oct_mach_info::float_format fmt)
     { return rep->load_binary (is, swap, fmt); }
 
