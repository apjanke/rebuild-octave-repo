# HG changeset patch
# User jwe
# Date 942034728 0
#      Mon Nov 08 04:18:48 1999 +0000
# Node ID ff13d5dec62d5fea81188951f8d216dcb7eb5447
# Parent  466d7a1cac01bc8bb672b2a932e7a54799e5d174
[project @ 1999-11-08 04:18:48 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+1999-11-07  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* oct-time.cc (Fstrftime): Undo previous change.
+	(octave_time::octave_time (const octave_base_tm&)): Likewise.
+
 1999-11-03  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* dbleSVD.cc (SVD::init): Let DGESVD determine work space requirement.
 	* CmplxSVD.cc (ComplexSVD::init): Likewise, for complex version.
 
 	* dbleSCHUR.cc (SCHUR::init): IWORK is always referenced by dgeesx.
 	Don't forget to pass length of third string argument to dgeesx.
 
diff --git a/liboctave/oct-time.cc b/liboctave/oct-time.cc
--- a/liboctave/oct-time.cc
+++ b/liboctave/oct-time.cc
@@ -42,21 +42,26 @@ octave_time::octave_time (const octave_b
   t.tm_mon = tm.mon ();
   t.tm_year = tm.year ();
   t.tm_wday = tm.wday ();
   t.tm_yday = tm.yday ();
   t.tm_isdst = tm.isdst ();
 
 #if defined (HAVE_TM_ZONE)
   string s = tm.zone ();
-  t.tm_zone = s.c_str ();
+  char *ps = strsave (s.c_str ());
+  t.tm_zone = ps;
 #endif
 
   ot_unix_time = mktime (&t);
 
+#if defined (HAVE_TM_ZONE)
+  delete [] ps;
+#endif
+
   ot_usec = tm.usec ();
 }
 
 string
 octave_time::ctime (void) const
 {
   return octave_localtime (*this) . asctime ();
 }
@@ -133,17 +138,18 @@ octave_base_tm::strftime (const string& 
   t.tm_mday = tm_mday;
   t.tm_mon = tm_mon;
   t.tm_year = tm_year;
   t.tm_wday = tm_wday;
   t.tm_yday = tm_yday;
   t.tm_isdst = tm_isdst;
 
 #if defined (HAVE_TM_ZONE)
-  t.tm_zone = tm_zone.c_str ();
+  char *ps = strsave (tm_zone.c_str ());
+  t.tm_zone = ps;
 #endif
 
   const char *fmt_str = fmt.c_str ();
 
   char *buf = 0;
   size_t bufsize = STRFTIME_BUF_INITIAL_SIZE;
   size_t chars_written = 0;
 
@@ -153,16 +159,20 @@ octave_base_tm::strftime (const string& 
       buf = new char[bufsize];
       buf[0] = '\0';
 
       chars_written = ::strftime (buf, bufsize, fmt_str, &t);
 
       bufsize *= 2;
     }
 
+#if defined (HAVE_TM_ZONE)
+  delete [] ps;
+#endif
+
   retval = buf;
 
   delete [] buf;
 
   return retval;
 }
 
 void
