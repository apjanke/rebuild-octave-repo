# HG changeset patch
# User jwe
# Date 824259820 0
#      Wed Feb 14 01:03:40 1996 +0000
# Node ID 8c4bce5e773ec3c37a7d2fec856ce49dd2f9d895
# Parent  8cb4d3008c76172aaf43995d375ac8406adafd07
[project @ 1996-02-14 01:03:03 by jwe]

diff --git a/liboctave/DASSL.cc b/liboctave/DASSL.cc
--- a/liboctave/DASSL.cc
+++ b/liboctave/DASSL.cc
@@ -58,41 +58,37 @@ static int nn;
 DASSL::DASSL (void) : DAE ()
 {
   stop_time_set = 0;
   stop_time = 0.0;
 
   liw = 0;
   lrw = 0;
 
-  info  = new int [15];
-  iwork = (int *) 0;
-  rwork = (double *) 0;
+  info.resize (15);
 
   for (int i = 0; i < 15; i++)
-    info [i] = 0;
+    info.elem (i) = 0;
 }
 
 DASSL::DASSL (const ColumnVector& state, double time, DAEFunc& f)
   : DAE (state, time, f)
 {
   n = size ();
 
   stop_time_set = 0;
   stop_time = 0.0;
 
   liw = 20 + n;
   lrw = 40 + 9*n + n*n;
 
-  info  = new int [15];
-  iwork = new int [liw];
-  rwork = new double [lrw];
+  info.resize (15);
 
   for (int i = 0; i < 15; i++)
-    info [i] = 0;
+    info.elem (i) = 0;
 }
 
 DASSL::DASSL (const ColumnVector& state, const ColumnVector& deriv,
 	  double time, DAEFunc& f)
   : DAE (state, deriv, time, f)
 {
   n = size ();
 
@@ -100,29 +96,20 @@ DASSL::DASSL (const ColumnVector& state,
   stop_time = 0.0;
 
   DAEFunc::set_function (f.function ());
   DAEFunc::set_jacobian_function (f.jacobian_function ());
 
   liw = 20 + n;
   lrw = 40 + 9*n + n*n;
 
-  info  = new int [15];
-  iwork = new int [liw];
-  rwork = new double [lrw];
+  info.resize (15);
 
   for (int i = 0; i < 15; i++)
-    info [i] = 0;
-}
-
-DASSL::~DASSL (void)
-{
-  delete [] info;
-  delete [] rwork;
-  delete [] iwork;
+    info.elem (i) = 0;
 }
 
 void
 DASSL::force_restart (void)
 {
   restart = 1;
   integration_error = 0;
 }
@@ -194,119 +181,131 @@ ddassl_j (const double& time, double *, 
       pd [nn * j + i] = tmp_dfdx.elem (i, j);
 
   return 0;
 }
 
 ColumnVector
 DASSL::do_integrate (double tout)
 {
+  ColumnVector retval;
+
+  if (restart)
+    {
+      restart = 0;
+      info.elem (0) = 0;
+    }
+
+  if (iwork.length () != liw)
+    iwork.resize (liw);
+
+  if (rwork.length () != lrw)
+    rwork.resize (lrw);
+
   integration_error = 0;
 
   if (DAEFunc::jacobian_function ())
-    iwork [4] = 1;
+    iwork.elem (4) = 1;
   else
-    iwork [4] = 0;
+    iwork.elem (4) = 0;
 
   double *px    = x.fortran_vec ();
   double *pxdot = xdot.fortran_vec ();
 
   nn = n;
   user_fun = DAEFunc::fun;
   user_jac = DAEFunc::jac;
 
   if (stop_time_set)
     {
-      info [3] = 1;
-      rwork [0] = stop_time;
+      info.elem (3) = 1;
+      rwork.elem (0) = stop_time;
     }
   else
-    info [3] = 0;
+    info.elem (3) = 0;
 
   double abs_tol = absolute_tolerance ();
   double rel_tol = relative_tolerance ();
 
   if (initial_step_size () >= 0.0)
     {
-      rwork[2] = initial_step_size ();
-      info[7] = 1;
+      rwork.elem (2) = initial_step_size ();
+      info.elem (7) = 1;
     }
   else
-    info[7] = 0;
+    info.elem (7) = 0;
 
   if (maximum_step_size () >= 0.0)
     {
-      rwork[2] = maximum_step_size ();
-      info[6] = 1;
+      rwork.elem (2) = maximum_step_size ();
+      info.elem (6) = 1;
     }
   else
-    info[6] = 0;
+    info.elem (6) = 0;
 
   double *dummy = 0;
   int *idummy = 0;
 
-  if (restart)
-    {
-      restart = 0;
-      info[0] = 0;
-    }
+  int *pinfo = info.fortran_vec ();
+  int *piwork = iwork.fortran_vec ();
+  double *prwork = rwork.fortran_vec ();
 
 // again:
 
-  F77_FCN (ddassl, DDASSL) (ddassl_f, n, t, px, pxdot, tout, info,
-			    rel_tol, abs_tol, idid, rwork, lrw, iwork,
-			    liw, dummy, idummy, ddassl_j);
+  F77_XFCN (ddassl, DDASSL, (ddassl_f, n, t, px, pxdot, tout, pinfo,
+			     rel_tol, abs_tol, idid, prwork, lrw,
+			     piwork, liw, dummy, idummy, ddassl_j));
 
-  switch (idid)
+  if (f77_exception_encountered)
+    (*current_liboctave_error_handler) ("unrecoverable error in dassl");
+  else
     {
-    case 1: // A step was successfully taken in the
-	    // intermediate-output mode. The code has not yet reached
-	    // TOUT.
-      break;
+      switch (idid)
+	{
+	case 1: // A step was successfully taken in intermediate-output
+	        // mode. The code has not yet reached TOUT.
+	case 2: // The integration to TSTOP was successfully completed
+	        // (T=TSTOP) by stepping exactly to TSTOP.
+	case 3: // The integration to TOUT was successfully completed
+	        // (T=TOUT) by stepping past TOUT.  Y(*) is obtained by
+	        // interpolation.  YPRIME(*) is obtained by interpolation.
 
-    case 2: // The integration to TSTOP was successfully completed
-	    // (T=TSTOP) by stepping exactly to TSTOP.
-      break;
-
-    case 3: // The integration to TOUT was successfully completed
-	    // (T=TOUT) by stepping past TOUT.  Y(*) is obtained by
-	    // interpolation.  YPRIME(*) is obtained by interpolation.
-      break;
+	  retval = x;
+	  t = tout;
+	  break;
 
-    case -1: // A large amount of work has been expended.  (About 500 steps).
-    case -2: // The error tolerances are too stringent.
-    case -3: // The local error test cannot be satisfied because you
-	     // specified a zero component in ATOL and the
-	     // corresponding computed solution component is zero.
-	     // Thus, a pure relative error test is impossible for
-	     // this component.
-    case -6: // DDASSL had repeated error test failures on the last
-	     // attempted step.
-    case -7: // The corrector could not converge.
-    case -8: // The matrix of partial derivatives is singular.
-    case -9: // The corrector could not converge.  There were repeated
-	     // error test failures in this step.
-    case -10: // The corrector could not converge because IRES was
-	      // equal to minus one.
-    case -11: // IRES equal to -2 was encountered and control is being
-	      // returned to the calling program.
-    case -12: // DDASSL failed to compute the initial YPRIME.
-    case -33: // The code has encountered trouble from which it cannot
-	      // recover. A message is printed explaining the trouble
-	      // and control is returned to the calling program. For
-	      // example, this occurs when invalid input is detected.
-
-    default:
-      integration_error = 1;
-      break;
+	case -1: // A large amount of work has been expended.  (~500 steps).
+	case -2: // The error tolerances are too stringent.
+	case -3: // The local error test cannot be satisfied because you
+	         // specified a zero component in ATOL and the
+		 // corresponding computed solution component is zero.
+		 // Thus, a pure relative error test is impossible for
+		 // this component.
+	case -6: // DDASSL had repeated error test failures on the last
+		 // attempted step.
+	case -7: // The corrector could not converge.
+	case -8: // The matrix of partial derivatives is singular.
+	case -9: // The corrector could not converge.  There were repeated
+		 // error test failures in this step.
+	case -10: // The corrector could not converge because IRES was
+		  // equal to minus one.
+	case -11: // IRES equal to -2 was encountered and control is being
+		  // returned to the calling program.
+	case -12: // DDASSL failed to compute the initial YPRIME.
+	case -33: // The code has encountered trouble from which it cannot
+		  // recover. A message is printed explaining the trouble
+		  // and control is returned to the calling program. For
+		  // example, this occurs when invalid input is detected.
+	default:
+	  integration_error = 1;
+	  break;
+	}
     }
 
-  t = tout;
-
-  return x;
+  return retval;
 }
 
 Matrix
 DASSL::do_integrate (const ColumnVector& tout)
 {
   Matrix dummy;
   return integrate (tout, dummy);
 }
diff --git a/liboctave/DASSL.h b/liboctave/DASSL.h
--- a/liboctave/DASSL.h
+++ b/liboctave/DASSL.h
@@ -114,17 +114,17 @@ public:
 
   DASSL (void);
 
   DASSL (const ColumnVector& x, double time, DAEFunc& f);
 
   DASSL (const ColumnVector& x, const ColumnVector& xdot,
 	 double time, DAEFunc& f);
 
- ~DASSL (void);
+  ~DASSL (void) { }
 
   void force_restart (void);
 
   void set_stop_time (double t);
   void clear_stop_time (void);
 
   ColumnVector do_integrate (double t);
 
@@ -141,19 +141,19 @@ private:
   int stop_time_set;
 
   int n;
   int integration_error;
   int restart;
   int liw;  
   int lrw;
   int idid;
-  int *info;
-  int *iwork;
-  double *rwork;
+  Array<int> info;
+  Array<int> iwork;
+  Array<double> rwork;
 
   friend int ddassl_j (double *time, double *state, double *deriv,
 		       double *pd, double *cj, double *rpar, int *ipar);
 
   friend int ddassl_f (double *time, double *state, double *deriv,
 		       double *delta, int *ires, double *rpar, int *ipar);
 
 };
diff --git a/liboctave/LSODE.cc b/liboctave/LSODE.cc
--- a/liboctave/LSODE.cc
+++ b/liboctave/LSODE.cc
@@ -67,24 +67,16 @@ LSODE::LSODE (void) : ODE (), LSODE_opti
 
   istate = 1;
   itol = 1;
   itask = 1;
   iopt = 0;
 
   liw = 20 + n;
   lrw = 22 + n * (9 + n);
-
-  iwork = new int [liw];
-  rwork = new double [lrw];
-  for (int i = 4; i < 9; i++)
-    {
-      iwork[i] = 0;
-      rwork[i] = 0.0;
-    }
 }
 
 LSODE::LSODE (const ColumnVector& state, double time, const ODEFunc& f)
   : ODE (state, time, f), LSODE_options ()
 {
   n = size ();
 
   stop_time_set = 0;
@@ -95,30 +87,16 @@ LSODE::LSODE (const ColumnVector& state,
 
   istate = 1;
   itol = 1;
   itask = 1;
   iopt = 0;
 
   liw = 20 + n;
   lrw = 22 + n * (9 + n);
-
-  iwork = new int [liw];
-  rwork = new double [lrw];
-  for (int i = 4; i < 9; i++)
-    {
-      iwork[i] = 0;
-      rwork[i] = 0.0;
-    }
-}
-
-LSODE::~LSODE (void)
-{
-  delete [] rwork;
-  delete [] iwork;
 }
 
 void
 LSODE::force_restart (void)
 {
   restart = 1;
 }
 
@@ -175,16 +153,40 @@ lsode_j (const int& neq, const double& t
       pd [nrowpd * j + i] = tmp_jac (i, j);
 
   return 0;
 }
 
 ColumnVector
 LSODE::do_integrate (double tout)
 {
+  ColumnVector retval;
+
+  if (restart)
+    {
+      restart = 0;
+      istate = 1;
+    }
+
+  if (iwork.length () != liw)
+    {
+      iwork.resize (liw);
+
+      for (int i = 4; i < 9; i++)
+	iwork.elem (i) = 0;
+    }
+
+  if (rwork.length () != lrw)
+    {
+      rwork.resize (lrw);
+
+      for (int i = 4; i < 9; i++)
+	rwork.elem (i) = 0;
+    }
+
   if (jac)
     method_flag = 21;
   else
     method_flag = 22;
 
   integration_error = 0;
 
   double *xp = x.fortran_vec ();
@@ -194,90 +196,92 @@ LSODE::do_integrate (double tout)
   //       and copy.
 
   tmp_x = &x;
   user_fun = function ();
   user_jac = jacobian_function ();
 
   // Try 5000 steps before giving up.
 
-  iwork[5] = 5000;
-  int working_too_hard = 0;
+  iwork.elem (5) = 5000;
 
   if (stop_time_set)
     {
       itask = 4;
-      rwork [0] = stop_time;
+      rwork.elem (0) = stop_time;
     }
   else
     {
       itask = 1;
     }
 
   double abs_tol = absolute_tolerance ();
   double rel_tol = relative_tolerance ();
 
-  rwork[4] = (initial_step_size () >= 0.0) ? initial_step_size () : 0.0;
-  rwork[5] = (maximum_step_size () >= 0.0) ? maximum_step_size () : 0.0;
-  rwork[6] = (minimum_step_size () >= 0.0) ? minimum_step_size () : 0.0;
+  rwork.elem (4) = (initial_step_size () >= 0.0) ? initial_step_size () : 0.0;
+  rwork.elem (5) = (maximum_step_size () >= 0.0) ? maximum_step_size () : 0.0;
+  rwork.elem (6) = (minimum_step_size () >= 0.0) ? minimum_step_size () : 0.0;
 
-  if (restart)
-    {
-      restart = 0;
-      istate = 1;
-    }
+  int *piwork = iwork.fortran_vec ();
+  double *prwork = rwork.fortran_vec ();
+
+  working_too_hard = 0;
 
  again:
 
-  F77_FCN (lsode, LSODE) (lsode_f, n, xp, t, tout, itol, rel_tol,
-			  abs_tol, itask, istate, iopt, rwork, lrw,
-			  iwork, liw, lsode_j, method_flag);
+  F77_XFCN (lsode, LSODE, (lsode_f, n, xp, t, tout, itol, rel_tol,
+			   abs_tol, itask, istate, iopt, prwork, lrw,
+			   piwork, liw, lsode_j, method_flag));
 
-  switch (istate)
+  if (f77_exception_encountered)
+    (*current_liboctave_error_handler) ("unrecoverable error in lsode");
+  else
     {
-    case -13: // Return requested in user-supplied function.
-    case -6:  // error weight became zero during problem. (solution
-	      // component i vanished, and atol or atol(i) = 0.)
-    case -5:  // repeated convergence failures (perhaps bad jacobian
-	      // supplied or wrong choice of mf or tolerances).
-    case -4:  // repeated error test failures (check all inputs).
-    case -3:  // illegal input detected (see printed message).
-    case -2:  // excess accuracy requested (tolerances too small).
-      integration_error = 1;
-      return ColumnVector ();
-      break;
+      switch (istate)
+	{
+	case -13: // Return requested in user-supplied function.
+	case -6:  // error weight became zero during problem. (solution
+	          // component i vanished, and atol or atol(i) = 0.)
+	case -5:  // repeated convergence failures (perhaps bad jacobian
+	          // supplied or wrong choice of mf or tolerances).
+	case -4:  // repeated error test failures (check all inputs).
+	case -3:  // illegal input detected (see printed message).
+	case -2:  // excess accuracy requested (tolerances too small).
+	  integration_error = 1;
+	  break;
 
-    case -1:  // excess work done on this call (perhaps wrong mf).
-      working_too_hard++;
-      if (working_too_hard > 20)
-	{
+	case -1:  // excess work done on this call (perhaps wrong mf).
+	  working_too_hard++;
+	  if (working_too_hard > 20)
+	    {
+	      (*current_liboctave_error_handler)
+		("giving up after more than %d steps attempted in lsode",
+		 iwork.elem (5) * 20);
+	      integration_error = 1;
+	    }
+	  else
+	    {
+	      istate = 2;
+	      goto again;
+	    }
+	  break;
+
+	case 2:  // lsode was successful
+	  retval = x;
+	  t = tout;
+	  break;
+	  
+	default: // Error?
 	  (*current_liboctave_error_handler)
-	    ("giving up after more than %d steps attempted in lsode",
-	     iwork[5] * 20);
-	  integration_error = 1;
-	  return ColumnVector ();
+	    ("unrecognized value of istate returned from lsode");
+	  break;
 	}
-      else
-	{
-	  istate = 2;
-	  goto again;
-	}
-      break;
-
-    case 2:  // lsode was successful
-      break;
-
-    default:
-      // Error?
-      break;
     }
 
-  t = tout;
-
-  return x;
+  return retval;
 }
 
 #if 0
 void
 LSODE::integrate (int nsteps, double tstep, ostream& s)
 {
   int time_to_quit = 0;
   double tout = t;
diff --git a/liboctave/LSODE.h b/liboctave/LSODE.h
--- a/liboctave/LSODE.h
+++ b/liboctave/LSODE.h
@@ -123,17 +123,17 @@ LSODE : public ODE, public LSODE_options
 public:
 
   LSODE (void);
 
   LSODE (int n);
   
   LSODE (const ColumnVector& state, double time, const ODEFunc& f);
 
-  ~LSODE (void);
+  ~LSODE (void) { }
 
   void force_restart (void);
 
   void set_stop_time (double t);
   void clear_stop_time (void);
 
   ColumnVector do_integrate (double t);
 
@@ -152,24 +152,25 @@ private:
 
   double stop_time;
   int stop_time_set;
 
   int n;
   int integration_error;
   int restart;
   int method_flag;
-  int *iwork;
-  double *rwork;
+  Array<int> iwork;
+  Array<double> rwork;
   int istate;
   int itol;
   int itask;
   int iopt;
   int liw;
   int lrw;
+  int working_too_hard;
 
   friend int lsode_f (int *neq, double *t, double *y, double *ydot);
 
   friend int lsode_j (int *neq, double *t, double *y, int *ml, int *mu,
 		      double *pd, int *nrowpd);
 };
 
 #endif
diff --git a/liboctave/NPSOL.cc b/liboctave/NPSOL.cc
--- a/liboctave/NPSOL.cc
+++ b/liboctave/NPSOL.cc
@@ -178,55 +178,50 @@ NPSOL::do_minimize (double& objf, int& i
   Array<int> aistate (n+nclin+ncnln);
   int *istate = aistate.fortran_vec ();
 
   // User defined function stuff is defined above in the functions
   // npsol_confun() and npsol_objfun();
 
   // Constraint stuff.
 
+  double bigbnd = infinite_bound ();
+
   Matrix clin = lc.constraint_matrix ();
   double *pclin = clin.fortran_vec ();
 
-  Array<double> aclow (n+nclin+ncnln);
-  double *clow = aclow.fortran_vec ();
-
-  Array<double> acup (n+nclin+ncnln);
-  double *cup = acup.fortran_vec ();
+  ColumnVector aclow (n+nclin+ncnln);
+  ColumnVector acup (n+nclin+ncnln);
 
   if (bnds.size () > 0)
     {
-      for (int i = 0; i < n; i++)
-	{
-	  clow[i] = bnds.lower_bound (i);
-	  cup[i] = bnds.upper_bound (i);
-	}
+      aclow.insert (bnds.lower_bounds (), 0);
+      acup.insert (bnds.upper_bounds (), 0);
     }
   else
     {
-      double huge = 1.0e30;
-      for (int i = 0; i < n; i++)
-	{
-	  clow[i] = -huge;
-	  cup[i] = huge;
-	}
+      aclow.fill (-bigbnd, 0, n-1);
+      acup.fill (bigbnd, 0, n-1);
     }
 
-  for (int i = 0; i < nclin; i++)
+  if (nclin > 0)
     {
-      clow[i+n] = lc.lower_bound (i);
-      cup[i+n] = lc.upper_bound (i);
+      aclow.insert (lc.lower_bounds (), n);
+      acup.insert (lc.upper_bounds (), n);
     }
 
-  for (int i = 0; i < ncnln; i++)
+  if (ncnln > 0)
     {
-      clow[i+n+nclin] = nlc.lower_bound (i);
-      cup[i+n+nclin] = nlc.upper_bound (i);
+      aclow.insert (nlc.lower_bounds (), n+nclin);
+      acup.insert (nlc.upper_bounds (), n+nclin);
     }
 
+  double *clow = aclow.fortran_vec ();
+  double *cup = acup.fortran_vec ();
+
   Array<double> ac (ncnln);
   double *c = ac.fortran_vec ();
 
   Array<double> acjac (nrowj*n);
   double *cjac = acjac.fortran_vec ();
 
   // Objective stuff.
 
diff --git a/liboctave/QPSOL.cc b/liboctave/QPSOL.cc
--- a/liboctave/QPSOL.cc
+++ b/liboctave/QPSOL.cc
@@ -82,36 +82,31 @@ QPSOL::do_minimize (double& objf, int& i
  
   int itmax = (iteration_limit () < 0) ? 50 * n : iteration_limit ();
   int msglvl = print_level ();
   int nclin = lc.size ();
   int nctotl = nclin + n;
 
   double bigbnd = infinite_bound ();
 
-  double *pa = 0;
-  Matrix clin;
-  if (nclin > 0)
-    {
-      clin = lc.constraint_matrix ();
-      pa = clin.fortran_vec ();
-    }
+  Matrix clin = lc.constraint_matrix ();
+  double *pa = clin.fortran_vec ();
 
   ColumnVector bl (n+nclin);
   ColumnVector bu (n+nclin);
 
   if (bnds.size () > 0)
     {
       bl.insert (bnds.lower_bounds (), 0);
       bu.insert (bnds.upper_bounds (), 0);
     }
   else
     {
-      bl.fill (-bigbnd);
-      bu.fill (bigbnd);
+      bl.fill (-bigbnd, 0, n-1);
+      bu.fill (bigbnd, 0, n-1);
     }
 
   if (nclin > 0)
     {
       bl.insert (lc.lower_bounds (), 0);
       bu.insert (lc.upper_bounds (), 0);
     }
 
