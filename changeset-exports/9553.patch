# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1250849545 -7200
#      Fri Aug 21 12:12:25 2009 +0200
# Node ID 0c72d928408776cfc4fc7ab6495357dce1f1b4af
# Parent  ded32956d66070d6de10a8520035817b4f941e3b
further bool ops tweaks

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -3053,18 +3053,17 @@ ComplexMatrix::operator -= (const Matrix
   return *this;
 }
 
 // unary operations
 
 boolMatrix
 ComplexMatrix::operator ! (void) const
 {
-  ND_LOGICAL_NAN_CHECK (*this);
-  return do_mx_unary_op<boolMatrix, ComplexMatrix> (*this, mx_inline_iszero);
+  return do_mx_unary_op<boolMatrix, ComplexMatrix> (*this, mx_inline_not);
 }
 
 // other operations
 
 Matrix
 ComplexMatrix::map (dmapper fcn) const
 {
   return MArray2<Complex>::map<double> (func_ptr (fcn));
diff --git a/liboctave/CNDArray.cc b/liboctave/CNDArray.cc
--- a/liboctave/CNDArray.cc
+++ b/liboctave/CNDArray.cc
@@ -492,18 +492,17 @@ ComplexNDArray::ifourierNd (void) const
 
 #endif
 
 // unary operations
 
 boolNDArray
 ComplexNDArray::operator ! (void) const
 {
-  ND_LOGICAL_NAN_CHECK (*this);
-  return do_mx_unary_op<boolNDArray, ComplexNDArray> (*this, mx_inline_iszero);
+  return do_mx_unary_op<boolNDArray, ComplexNDArray> (*this, mx_inline_not);
 }
 
 // FIXME -- this is not quite the right thing.
 
 bool
 ComplexNDArray::any_element_is_nan (void) const
 {
   octave_idx_type nel = nelem ();
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,25 @@
+2009-08-20  Jaroslav Hajek  <highegg@gmail.com>
+
+	* mx-inlines.cc (logical_value): New overloaded template.
+	(DEFMXBOOL_OP): Use it in definitions.
+	(mx_inline_not): Also use logical_value.
+	* mx-op-defs.h (ND_LOGICAL_NAN_CHECK, SC_LOGICAL_NAN_CHECK): Remove
+	(also from all macros).
+
+	* CMatrix.cc (operator !): Simply call mx_inline_not.
+	* CNDArray.cc: Ditto.
+	* dMatrix.cc: Ditto.
+	* dNDArray.cc: Ditto.
+	* fCMatrix.cc: Ditto.
+	* fCNDArray.cc: Ditto.
+	* fMatrix.cc: Ditto.
+	* fNDArray.cc: Ditto.
+	
 2009-08-20  Jaroslav Hajek  <highegg@gmail.com>
 	
 	* dMatrix.cc (Matrix::operator!): Simplify & check for NaNs.
 	* fMatrix.cc (FloatMatrix::operator!): Ditto.
 	* CMatrix.cc (ComplexMatrix::operator!): Ditto.
 	* fCMatrix.cc (FloatComplexMatrix::operator!): Ditto.
 	* dNDArray.cc (NDArray::operator!): Ditto.
 	* fNDArray.cc (FloatNDArray::operator!): Ditto.
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -2562,18 +2562,17 @@ Matrix::operator -= (const DiagMatrix& a
   return *this;
 }
 
 // unary operations
 
 boolMatrix
 Matrix::operator ! (void) const
 {
-  ND_LOGICAL_NAN_CHECK (*this);
-  return do_mx_unary_op<boolMatrix, Matrix> (*this, mx_inline_iszero);
+  return do_mx_unary_op<boolMatrix, Matrix> (*this, mx_inline_not);
 }
 
 // column vector by row vector -> matrix operations
 
 Matrix
 operator * (const ColumnVector& v, const RowVector& a)
 {
   Matrix retval;
diff --git a/liboctave/dNDArray.cc b/liboctave/dNDArray.cc
--- a/liboctave/dNDArray.cc
+++ b/liboctave/dNDArray.cc
@@ -533,18 +533,17 @@ NDArray::ifourierNd (void) const
 
 #endif
 
 // unary operations
 
 boolNDArray
 NDArray::operator ! (void) const
 {
-  ND_LOGICAL_NAN_CHECK (*this);
-  return do_mx_unary_op<boolNDArray, NDArray> (*this, mx_inline_iszero);
+  return do_mx_unary_op<boolNDArray, NDArray> (*this, mx_inline_not);
 }
 
 bool
 NDArray::any_element_is_negative (bool neg_zero) const
 {
   octave_idx_type nel = nelem ();
 
   if (neg_zero)
diff --git a/liboctave/fCMatrix.cc b/liboctave/fCMatrix.cc
--- a/liboctave/fCMatrix.cc
+++ b/liboctave/fCMatrix.cc
@@ -3046,18 +3046,17 @@ FloatComplexMatrix::operator -= (const F
   return *this;
 }
 
 // unary operations
 
 boolMatrix
 FloatComplexMatrix::operator ! (void) const
 {
-  ND_LOGICAL_NAN_CHECK (*this);
-  return do_mx_unary_op<boolMatrix, FloatComplexMatrix> (*this, mx_inline_iszero);
+  return do_mx_unary_op<boolMatrix, FloatComplexMatrix> (*this, mx_inline_not);
 }
 
 // other operations
 
 FloatMatrix
 FloatComplexMatrix::map (dmapper fcn) const
 {
   return MArray2<FloatComplex>::map<float> (func_ptr (fcn));
diff --git a/liboctave/fCNDArray.cc b/liboctave/fCNDArray.cc
--- a/liboctave/fCNDArray.cc
+++ b/liboctave/fCNDArray.cc
@@ -487,18 +487,17 @@ FloatComplexNDArray::ifourierNd (void) c
 
 #endif
 
 // unary operations
 
 boolNDArray
 FloatComplexNDArray::operator ! (void) const
 {
-  ND_LOGICAL_NAN_CHECK (*this);
-  return do_mx_unary_op<boolNDArray, FloatComplexNDArray> (*this, mx_inline_iszero);
+  return do_mx_unary_op<boolNDArray, FloatComplexNDArray> (*this, mx_inline_not);
 }
 
 // FIXME -- this is not quite the right thing.
 
 bool
 FloatComplexNDArray::any_element_is_nan (void) const
 {
   octave_idx_type nel = nelem ();
diff --git a/liboctave/fMatrix.cc b/liboctave/fMatrix.cc
--- a/liboctave/fMatrix.cc
+++ b/liboctave/fMatrix.cc
@@ -2561,18 +2561,17 @@ FloatMatrix::operator -= (const FloatDia
   return *this;
 }
 
 // unary operations
 
 boolMatrix
 FloatMatrix::operator ! (void) const
 {
-  ND_LOGICAL_NAN_CHECK (*this);
-  return do_mx_unary_op<boolMatrix, FloatMatrix> (*this, mx_inline_iszero);
+  return do_mx_unary_op<boolMatrix, FloatMatrix> (*this, mx_inline_not);
 }
 
 // column vector by row vector -> matrix operations
 
 FloatMatrix
 operator * (const FloatColumnVector& v, const FloatRowVector& a)
 {
   FloatMatrix retval;
diff --git a/liboctave/fNDArray.cc b/liboctave/fNDArray.cc
--- a/liboctave/fNDArray.cc
+++ b/liboctave/fNDArray.cc
@@ -491,18 +491,17 @@ FloatNDArray::ifourierNd (void) const
 
 #endif
 
 // unary operations
 
 boolNDArray
 FloatNDArray::operator ! (void) const
 {
-  ND_LOGICAL_NAN_CHECK (*this);
-  return do_mx_unary_op<boolNDArray, FloatNDArray> (*this, mx_inline_iszero);
+  return do_mx_unary_op<boolNDArray, FloatNDArray> (*this, mx_inline_not);
 }
 
 bool
 FloatNDArray::any_element_is_negative (bool neg_zero) const
 {
   octave_idx_type nel = nelem ();
 
   if (neg_zero)
diff --git a/liboctave/mx-inlines.cc b/liboctave/mx-inlines.cc
--- a/liboctave/mx-inlines.cc
+++ b/liboctave/mx-inlines.cc
@@ -43,17 +43,16 @@ inline void mx_inline_fill (size_t n, R 
 { for (size_t i = 0; i < n; i++) r[i] = s; }
 
 #define DEFMXUNOP(F, OP) \
 template <class R, class X> \
 inline void F (size_t n, R *r, const X *x) \
 { for (size_t i = 0; i < n; i++) r[i] = OP x[i]; }
 
 DEFMXUNOP (mx_inline_uminus, -)
-DEFMXUNOP (mx_inline_not, !)
 
 #define DEFMXUNBOOLOP(F, OP) \
 template <class X> \
 inline void F (size_t n, bool *r, const X *x) \
 { const X zero = X(); for (size_t i = 0; i < n; i++) r[i] = x[i] OP zero; }
 
 DEFMXUNBOOLOP (mx_inline_iszero, ==)
 DEFMXUNBOOLOP (mx_inline_notzero, !=)
@@ -114,46 +113,67 @@ inline void F (size_t n, bool *r, const 
 { for (size_t i = 0; i < n; i++) r[i] = real (x[i]) OP real (y[i]); } \
 template <class X, class Y> \
 inline void F (size_t n, bool *r, const std::complex<X> *x, Y y) \
 { for (size_t i = 0; i < n; i++) r[i] = real (x[i]) OP y; } \
 template <class X, class Y> \
 inline void F (size_t n, bool *r, X x, const std::complex<Y> *y) \
 { for (size_t i = 0; i < n; i++) r[i] = x OP real (y[i]); }
 
-#define DEFMXBOOLOP(F, EQ1, OP, EQ2) \
+// Convert to logical value, for logical op purposes.
+template <class T> inline bool logical_value (T x) { return x; }
+template <class T> inline bool logical_value (const octave_int<T>& x) 
+{ return x.value (); }
+
+// NaNs in real data should generate an error. Doing it on-the-fly is faster.
+
+#define DEFLOGCHKNAN(ARG, ZERO) \
+inline bool logical_value (ARG x) \
+{ if (xisnan (x)) gripe_nan_to_logical_conversion (); return x != ZERO; }
+
+DEFLOGCHKNAN (double, 0.0)
+DEFLOGCHKNAN (const Complex&, 0.0)
+DEFLOGCHKNAN (float, 0.0f)
+DEFLOGCHKNAN (const FloatComplex&, 0.0f)
+
+template <class X>
+void mx_inline_not (size_t n, bool *r, const X* x)
+{
+  for (size_t i = 0; i < n; i++)
+    r[i] = ! logical_value (x[i]);
+}
+
+#define DEFMXBOOLOP(F, NOT1, OP, NOT2) \
 template <class X, class Y> \
 inline void F (size_t n, bool *r, const X *x, const Y *y) \
 { \
-  const X xzero = X(); \
-  const Y yzero = Y(); \
   for (size_t i = 0; i < n; i++) \
-    r[i] = (x[i] EQ1 xzero) OP (y[i] EQ2 yzero); \
+    r[i] = (NOT1 logical_value (x[i])) OP (NOT2 logical_value (y[i])); \
 } \
 template <class X, class Y> \
 inline void F (size_t n, bool *r, const X *x, Y y) \
 { \
-  const X xzero = X(); \
-  const bool yy = y EQ2 Y(); \
-  for (size_t i = 0; i < n; i++) r[i] = (x[i] EQ1 xzero) OP yy; \
+  const bool yy = (NOT2 logical_value (y)); \
+  for (size_t i = 0; i < n; i++) \
+    r[i] = (NOT1 logical_value (x[i])) OP yy; \
 } \
 template <class X, class Y> \
 inline void F (size_t n, bool *r, X x, const Y *y) \
 { \
-  const bool xx = x EQ1 X(); \
-  const Y yzero = Y(); \
-  for (size_t i = 0; i < n; i++) r[i] = xx OP (y[i] EQ2 yzero); \
+  const bool xx = (NOT1 logical_value (x)); \
+  for (size_t i = 0; i < n; i++) \
+    r[i] = xx OP (NOT2 logical_value (y[i])); \
 }
 
-DEFMXBOOLOP (mx_inline_and, !=, &, !=)
-DEFMXBOOLOP (mx_inline_or, !=, |, !=)
-DEFMXBOOLOP (mx_inline_not_and, ==, &, !=)
-DEFMXBOOLOP (mx_inline_not_or, ==, |, !=)
-DEFMXBOOLOP (mx_inline_and_not, !=, &, ==)
-DEFMXBOOLOP (mx_inline_or_not, !=, |, ==)
+DEFMXBOOLOP (mx_inline_and, , &, )
+DEFMXBOOLOP (mx_inline_or, , |, )
+DEFMXBOOLOP (mx_inline_not_and, !, &, )
+DEFMXBOOLOP (mx_inline_not_or, !, |, )
+DEFMXBOOLOP (mx_inline_and_not, , &, !)
+DEFMXBOOLOP (mx_inline_or_not, , |, !)
 
 template <class T> 
 inline bool 
 mx_inline_any_nan (size_t, const T*) { return false; }
 
 #define DEFMXANYNAN(T) \
 inline bool \
 mx_inline_any_nan (size_t n, const T* t) \
diff --git a/liboctave/mx-op-defs.h b/liboctave/mx-op-defs.h
--- a/liboctave/mx-op-defs.h
+++ b/liboctave/mx-op-defs.h
@@ -23,24 +23,16 @@ along with Octave; see the file COPYING.
 */
 
 #if !defined (octave_mx_op_defs_h)
 #define octave_mx_op_defs_h 1
 
 #include "mx-op-decl.h"
 #include "mx-inlines.cc"
 
-#define ND_LOGICAL_NAN_CHECK(X) \
-if (mx_inline_any_nan ((X).numel (), (X).data ())) \
-    gripe_nan_to_logical_conversion ()
-
-#define SC_LOGICAL_NAN_CHECK(X) \
-  if (xisnan(X)) \
-      gripe_nan_to_logical_conversion ()
-
 // vector by scalar operations.
 
 #define VS_BIN_OP(R, F, OP, V, S) \
   R \
   F (const V& v, const S& s) \
   { \
     octave_idx_type len = v.length (); \
  \
@@ -153,18 +145,16 @@ if (mx_inline_any_nan ((X).numel (), (X)
   MS_CMP_OP (mx_el_gt, >,  M, CM, S, CS) \
   MS_CMP_OP (mx_el_eq, ==, M,   , S,   ) \
   MS_CMP_OP (mx_el_ne, !=, M,   , S,   )
 
 #define MS_BOOL_OP(F, OP, M, S) \
   boolMatrix \
   F (const M& m, const S& s) \
   { \
-    ND_LOGICAL_NAN_CHECK (m); \
-    SC_LOGICAL_NAN_CHECK (s); \
     return do_ms_binary_op<boolMatrix, M, S> (m, s, OP); \
   }
 
 #define MS_BOOL_OPS(M, S) \
   MS_BOOL_OP (mx_el_and, mx_inline_and, M, S) \
   MS_BOOL_OP (mx_el_or,  mx_inline_or,  M, S)
 
 // scalar by matrix operations.
@@ -210,18 +200,16 @@ if (mx_inline_any_nan ((X).numel (), (X)
   SM_CMP_OP (mx_el_gt, >,  S, CS, M, CM) \
   SM_CMP_OP (mx_el_eq, ==, S,   , M,   ) \
   SM_CMP_OP (mx_el_ne, !=, S,   , M,   )
 
 #define SM_BOOL_OP(F, OP, S, M) \
   boolMatrix \
   F (const S& s, const M& m) \
   { \
-    SC_LOGICAL_NAN_CHECK (s); \
-    ND_LOGICAL_NAN_CHECK (m); \
     return do_sm_binary_op<boolMatrix, S, M> (s, m, OP); \
   }
 
 #define SM_BOOL_OPS(S, M) \
   SM_BOOL_OP (mx_el_and, mx_inline_and, S, M) \
   SM_BOOL_OP (mx_el_or,  mx_inline_or,  S, M)
 
 // matrix by matrix operations.
@@ -272,18 +260,16 @@ if (mx_inline_any_nan ((X).numel (), (X)
   MM_CMP_OP (mx_el_gt, >,  M1, C1, M2, C2) \
   MM_CMP_OP (mx_el_eq, ==, M1,   , M2,   ) \
   MM_CMP_OP (mx_el_ne, !=, M1,   , M2,   )
 
 #define MM_BOOL_OP(F, OP, M1, M2) \
   boolMatrix \
   F (const M1& m1, const M2& m2) \
   { \
-    ND_LOGICAL_NAN_CHECK(m1); \
-    ND_LOGICAL_NAN_CHECK(m2); \
     return do_mm_binary_op<boolMatrix, M1, M2> (m1, m2, OP, #F); \
   }
 
 #define MM_BOOL_OPS(M1, M2) \
   MM_BOOL_OP (mx_el_and, mx_inline_and, M1, M2) \
   MM_BOOL_OP (mx_el_or,  mx_inline_or,  M1, M2)
 
 // N-d matrix by scalar operations.
@@ -376,18 +362,16 @@ if (mx_inline_any_nan ((X).numel (), (X)
   NDS_CMP_OP2 (mx_el_gt, >,  ND, NDC, S, SC, SPEC1, SPEC2) \
   NDS_CMP_OP2 (mx_el_eq, ==, ND,    , S,   , SPEC1, SPEC2) \
   NDS_CMP_OP2 (mx_el_ne, !=, ND,    , S,   , SPEC1, SPEC2)
 
 #define NDS_BOOL_OP(F, OP, ND, S) \
   boolNDArray \
   F (const ND& m, const S& s) \
   { \
-    ND_LOGICAL_NAN_CHECK (m); \
-    SC_LOGICAL_NAN_CHECK (s); \
     return do_ms_binary_op<boolNDArray, ND, S> (m, s, OP); \
   }
 
 #define NDS_BOOL_OPS(ND, S) \
   NDS_BOOL_OP (mx_el_and,     mx_inline_and,     ND, S) \
   NDS_BOOL_OP (mx_el_or,      mx_inline_or,      ND, S) \
   NDS_BOOL_OP (mx_el_not_and, mx_inline_not_and, ND, S) \
   NDS_BOOL_OP (mx_el_not_or,  mx_inline_not_or,  ND, S) \
@@ -482,18 +466,16 @@ if (mx_inline_any_nan ((X).numel (), (X)
   SND_CMP_OP2 (mx_el_gt, >,  S, CS, ND, CND, SPEC1, SPEC2) \
   SND_CMP_OP2 (mx_el_eq, ==, S,   , ND,    , SPEC1, SPEC2) \
   SND_CMP_OP2 (mx_el_ne, !=, S,   , ND,    , SPEC1, SPEC2)
 
 #define SND_BOOL_OP(F, OP, S, ND) \
   boolNDArray \
   F (const S& s, const ND& m) \
   { \
-    SC_LOGICAL_NAN_CHECK (s); \
-    ND_LOGICAL_NAN_CHECK (m); \
     return do_sm_binary_op<boolNDArray, S, ND> (s, m, OP); \
   }
 
 #define SND_BOOL_OPS(S, ND) \
   SND_BOOL_OP (mx_el_and,     mx_inline_and,     S, ND) \
   SND_BOOL_OP (mx_el_or,      mx_inline_or,      S, ND) \
   SND_BOOL_OP (mx_el_not_and, mx_inline_not_and, S, ND) \
   SND_BOOL_OP (mx_el_not_or,  mx_inline_not_or,  S, ND) \
@@ -544,18 +526,16 @@ if (mx_inline_any_nan ((X).numel (), (X)
   NDND_CMP_OP (mx_el_gt, >,  ND1, C1, ND2, C2) \
   NDND_CMP_OP (mx_el_eq, ==, ND1,   , ND2,   ) \
   NDND_CMP_OP (mx_el_ne, !=, ND1,   , ND2,   )
 
 #define NDND_BOOL_OP(F, OP, ND1, ND2) \
   boolNDArray \
   F (const ND1& m1, const ND2& m2) \
   { \
-    ND_LOGICAL_NAN_CHECK(m1); \
-    ND_LOGICAL_NAN_CHECK(m2); \
     return do_mm_binary_op<boolNDArray, ND1, ND2> (m1, m2, OP, #F); \
   }
 
 #define NDND_BOOL_OPS(ND1, ND2) \
   NDND_BOOL_OP (mx_el_and,     mx_inline_and,     ND1, ND2) \
   NDND_BOOL_OP (mx_el_or,      mx_inline_or,      ND1, ND2) \
   NDND_BOOL_OP (mx_el_not_and, mx_inline_not_and, ND1, ND2) \
   NDND_BOOL_OP (mx_el_not_or,  mx_inline_not_or,  ND1, ND2) \
