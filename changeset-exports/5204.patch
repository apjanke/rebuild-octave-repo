# HG changeset patch
# User jwe
# Date 1110863235 0
#      Tue Mar 15 05:07:15 2005 +0000
# Node ID 2a44a667da0294fecd03f9a8cd16a962beae2e4d
# Parent  dbeafbc0ff64e0aad4f04636a242d5ef6894c3fe
[project @ 2005-03-15 05:07:15 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,19 @@
+2005-03-15  John W. Eaton  <jwe@octave.org>
+
+	* emacs/octave-inf.el, emacs/octave-mod.el, emacs/octave-hlp.el:
+	Import changes from Emacs.
+
+2005-03-14  Rafael Laboissiere  <rafael@debian.org>
+
+	* emacs/octave-mod.el (octave-end-keywords): Omit "end" from the list.
+	(octave-reserved-words): Include "end" here.
+	(octve-block-match-alist): Don't include "end" here.
+
 2005-03-14  John W. Eaton  <jwe@octave.org>
 
 	* configure.in: Check for umfpack/umfpack.h instead of just umfpack.h.
 
 2004-06-22  David Bateman  <dbateman@free.org>
 
 	* configure.in: Check for UMFPACK library and header files.
 
diff --git a/emacs/octave-hlp.el b/emacs/octave-hlp.el
--- a/emacs/octave-hlp.el
+++ b/emacs/octave-hlp.el
@@ -75,17 +75,17 @@ If KEY is not a string, prompt for it wi
 	    (setq Info-index-alternatives matches)
 	    (Info-index-next 0))))))
 
 (defun octave-help-get-lookup-alist ()
   "Build the index lookup alist from all Octave info files.
 The files specified by `octave-help-files' are searched."
   (if octave-help-lookup-alist
       ()
-    (message "Building help lookup alist...")    
+    (message "Building help lookup alist...")
     (let ((files octave-help-files) file key node)
       (save-window-excursion
 	(while files
 	  (setq file (car files))
  	  (Info-goto-node (concat "(" file ")"))
 	  (condition-case nil
 	      (progn
 		(Info-index "")
@@ -122,16 +122,16 @@ The files specified by `octave-help-file
       ()
     (message "Building help completion alist...")
     (let ((alist (octave-help-get-lookup-alist)) entry)
       (while alist
 	(setq entry (car alist))
 	(add-to-list 'octave-help-completion-alist
 		     (cons (car entry) (car entry)))
 	(setq alist (cdr alist))))
-    (message "Building help completion alist...done"))    
+    (message "Building help completion alist...done"))
   octave-help-completion-alist)
 
 ;;; provide ourself
 
 (provide 'octave-hlp)
 
 ;;; octave-hlp.el ends here
diff --git a/emacs/octave-inf.el b/emacs/octave-inf.el
--- a/emacs/octave-inf.el
+++ b/emacs/octave-inf.el
@@ -19,16 +19,18 @@
 ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ;; GNU General Public License for more details.
 
 ;; You should have received a copy of the GNU General Public License
 ;; along with GNU Emacs; see the file COPYING.  If not, write to the
 ;; Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 ;; Boston, MA 02111-1307, USA.
 
+;;; Commentary:
+
 ;;; Code:
 
 (require 'octave-mod)
 (require 'comint)
 
 (defgroup octave-inferior nil
   "Running Octave as an inferior Emacs process."
   :group 'octave)
@@ -88,27 +90,38 @@ mode, set this to (\"-q\" \"--traditiona
   :group 'octave-inferior)
 
 (defvar inferior-octave-font-lock-keywords
   (list
    (cons inferior-octave-prompt 'font-lock-type-face))
   ;; Could certainly do more font locking in inferior Octave ...
   "Additional expressions to highlight in Inferior Octave mode.")
 
+
+;;; Compatibility functions
+(if (not (fboundp 'comint-line-beginning-position))
+    ;; comint-line-beginning-position is defined in Emacs 21
+    (defun comint-line-beginning-position ()
+      "Returns the buffer position of the beginning of the line, after any prompt.
+The prompt is assumed to be any text at the beginning of the line matching
+the regular expression `comint-prompt-regexp', a buffer local variable."
+      (save-excursion (comint-bol nil) (point))))
+
+
 (defvar inferior-octave-output-list nil)
 (defvar inferior-octave-output-string nil)
 (defvar inferior-octave-receive-in-progress nil)
 
 (defvar inferior-octave-startup-hook nil)
 
 (defvar inferior-octave-complete-impossible nil
   "Non-nil means that `inferior-octave-complete' is impossible.")
 
 (defvar inferior-octave-dynamic-complete-functions
-  '(inferior-octave-complete comint-dynamic-complete-filename)  
+  '(inferior-octave-complete comint-dynamic-complete-filename)
   "List of functions called to perform completion for inferior Octave.
 This variable is used to initialize `comint-dynamic-complete-functions'
 in the Inferior Octave buffer.")
 
 (defun inferior-octave-mode ()
   "Major mode for interacting with an inferior Octave process.
 Runs Octave as a subprocess of Emacs, with Octave I/O through an Emacs
 buffer.
@@ -120,22 +133,22 @@ Entry to this mode successively runs the
   (setq comint-prompt-regexp inferior-octave-prompt
 	major-mode 'inferior-octave-mode
 	mode-name "Inferior Octave"
 	mode-line-process '(":%s")
 	local-abbrev-table octave-abbrev-table)
   (use-local-map inferior-octave-mode-map)
   (set-syntax-table inferior-octave-mode-syntax-table)
 
-  (make-local-variable 'comment-start)  
+  (make-local-variable 'comment-start)
   (setq comment-start octave-comment-start)
   (make-local-variable 'comment-end)
   (setq comment-end "")
   (make-local-variable 'comment-column)
-  (setq comment-column 32)    
+  (setq comment-column 32)
   (make-local-variable 'comment-start-skip)
   (setq comment-start-skip octave-comment-start-skip)
 
   (make-local-variable 'font-lock-defaults)
   (setq font-lock-defaults '(inferior-octave-font-lock-keywords nil nil))
 
   (setq comint-input-ring-file-name
 	(or (getenv "OCTAVE_HISTFILE") "~/.octave_hist")
@@ -209,17 +222,17 @@ startup file, `~/.emacs-octave'."
     ;; O.k., now we are ready for the Inferior Octave startup commands.
     (let* (commands
 	   (program (file-name-nondirectory inferior-octave-program))
 	   (file (or inferior-octave-startup-file
 			  (concat "~/.emacs-" program))))
       (setq commands
 	    (list "page_screen_output = 0;\n"
 		  (if (not (string-equal
-			    inferior-octave-output-string ">> ")) 
+			    inferior-octave-output-string ">> "))
 		      "PS1=\"\\\\s> \";\n")
 		  (if (file-exists-p file)
 		      (format "source (\"%s\");\n" file))))
       (inferior-octave-send-list-and-digest commands))
     (insert-before-markers
      (concat
       (if inferior-octave-output-list
 	  (concat (mapconcat
@@ -238,21 +251,20 @@ startup file, `~/.emacs-octave'."
 
 
 (defun inferior-octave-complete ()
   "Perform completion on the Octave symbol preceding point.
 This is implemented using the Octave command `completion_matches' which
 is NOT available with versions of Octave prior to 2.0."
   (interactive)
   (let* ((end (point))
-	 (command (save-excursion
-		    (skip-syntax-backward "w_")
-		    (and (looking-at comint-prompt-regexp)
-			 (goto-char (match-end 0)))
-		    (buffer-substring-no-properties (point) end)))
+	 (command
+	  (save-excursion
+	    (skip-syntax-backward "w_" (comint-line-beginning-position))
+	    (buffer-substring-no-properties (point) end)))
 	 (proc (get-buffer-process inferior-octave-buffer))
 	 (filter (process-filter proc)))
     (cond (inferior-octave-complete-impossible
 	   (error (concat
 		   "Your Octave does not have `completion_matches'.  "
 		   "Please upgrade to version 2.X.")))
 	  ((string-equal command "")
 	   (message "Cannot complete an empty string"))
diff --git a/emacs/octave-mod.el b/emacs/octave-mod.el
--- a/emacs/octave-mod.el
+++ b/emacs/octave-mod.el
@@ -1,11 +1,11 @@
 ;;; octave-mod.el --- editing Octave source files under Emacs
 
-;; Copyright (C) 1997 Free Software Foundation, Inc.
+;; Copyright (C) 1997, 2003 Free Software Foundation, Inc.
 
 ;; Author: Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>
 ;; Author: John Eaton <jwe@bevo.che.wisc.edu>
 ;; Maintainer: Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>
 ;; Keywords: languages
 
 ;; This file is part of GNU Emacs.
 
@@ -46,79 +46,81 @@
   "Major mode for editing Octave source files."
   :group 'languages)
 
 (defvar inferior-octave-output-list nil)
 (defvar inferior-octave-output-string nil)
 (defvar inferior-octave-receive-in-progress nil)
 
 (defconst octave-maintainer-address
-  "Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>, bug-gnu-emacs@gnu.org" 
+  "Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>, bug-gnu-emacs@gnu.org"
   "Current maintainer of the Emacs Octave package.")
 
 (defvar octave-abbrev-table nil
   "Abbrev table for Octave's reserved words.
-Used in octave-mode and inferior-octave-mode buffers.
+Used in `octave-mode' and inferior-octave-mode buffers.
 All Octave abbrevs start with a grave accent (`).")
-(if octave-abbrev-table
-    ()
+(unless octave-abbrev-table
   (let ((ac abbrevs-changed))
     (define-abbrev-table 'octave-abbrev-table ())
-    (define-abbrev octave-abbrev-table "`a" "all_va_args" nil)
-    (define-abbrev octave-abbrev-table "`b" "break" nil)
-    (define-abbrev octave-abbrev-table "`cs" "case" nil)
-    (define-abbrev octave-abbrev-table "`ca" "catch" nil)
-    (define-abbrev octave-abbrev-table "`c" "continue" nil)
-    (define-abbrev octave-abbrev-table "`el" "else" nil)
-    (define-abbrev octave-abbrev-table "`eli" "elseif" nil)
-    (define-abbrev octave-abbrev-table "`et" "end_try_catch" nil)
-    (define-abbrev octave-abbrev-table "`eu" "end_unwind_protect" nil)
-    (define-abbrev octave-abbrev-table "`ef" "endfor" nil)
-    (define-abbrev octave-abbrev-table "`efu" "endfunction" nil)
-    (define-abbrev octave-abbrev-table "`ei" "endif" nil)
-    (define-abbrev octave-abbrev-table "`es" "endswitch" nil)
-    (define-abbrev octave-abbrev-table "`ew" "endwhile" nil)
-    (define-abbrev octave-abbrev-table "`f" "for" nil)
-    (define-abbrev octave-abbrev-table "`fu" "function" nil)
-    (define-abbrev octave-abbrev-table "`gl" "global" nil)
-    (define-abbrev octave-abbrev-table "`gp" "gplot" nil)
-    (define-abbrev octave-abbrev-table "`gs" "gsplot" nil)
-    (define-abbrev octave-abbrev-table "`if" "if ()" nil)
-    (define-abbrev octave-abbrev-table "`o" "otherwise" nil)
-    (define-abbrev octave-abbrev-table "`rp" "replot" nil)
-    (define-abbrev octave-abbrev-table "`r" "return" nil)
-    (define-abbrev octave-abbrev-table "`s" "switch" nil)
-    (define-abbrev octave-abbrev-table "`t" "try" nil)
-    (define-abbrev octave-abbrev-table "`u" "until ()" nil)
-    (define-abbrev octave-abbrev-table "`up" "unwind_protect" nil)
-    (define-abbrev octave-abbrev-table "`upc" "unwind_protect_cleanup" nil)
-    (define-abbrev octave-abbrev-table "`w" "while ()" nil)
+    (define-abbrev octave-abbrev-table "`a" "all_va_args" nil 0 t)
+    (define-abbrev octave-abbrev-table "`b" "break" nil 0 t)
+    (define-abbrev octave-abbrev-table "`cs" "case" nil 0 t)
+    (define-abbrev octave-abbrev-table "`ca" "catch" nil 0 t)
+    (define-abbrev octave-abbrev-table "`c" "continue" nil 0 t)
+    (define-abbrev octave-abbrev-table "`el" "else" nil 0 t)
+    (define-abbrev octave-abbrev-table "`eli" "elseif" nil 0 t)
+    (define-abbrev octave-abbrev-table "`et" "end_try_catch" nil 0 t)
+    (define-abbrev octave-abbrev-table "`eu" "end_unwind_protect" nil 0 t)
+    (define-abbrev octave-abbrev-table "`ef" "endfor" nil 0 t)
+    (define-abbrev octave-abbrev-table "`efu" "endfunction" nil 0 t)
+    (define-abbrev octave-abbrev-table "`ei" "endif" nil 0 t)
+    (define-abbrev octave-abbrev-table "`es" "endswitch" nil 0 t)
+    (define-abbrev octave-abbrev-table "`ew" "endwhile" nil 0 t)
+    (define-abbrev octave-abbrev-table "`f" "for" nil 0 t)
+    (define-abbrev octave-abbrev-table "`fu" "function" nil 0 t)
+    (define-abbrev octave-abbrev-table "`gl" "global" nil 0 t)
+    (define-abbrev octave-abbrev-table "`gp" "gplot" nil 0 t)
+    (define-abbrev octave-abbrev-table "`gs" "gsplot" nil 0 t)
+    (define-abbrev octave-abbrev-table "`if" "if ()" nil 0 t)
+    (define-abbrev octave-abbrev-table "`o" "otherwise" nil 0 t)
+    (define-abbrev octave-abbrev-table "`rp" "replot" nil 0 t)
+    (define-abbrev octave-abbrev-table "`r" "return" nil 0 t)
+    (define-abbrev octave-abbrev-table "`s" "switch" nil 0 t)
+    (define-abbrev octave-abbrev-table "`t" "try" nil 0 t)
+    (define-abbrev octave-abbrev-table "`u" "until ()" nil 0 t)
+    (define-abbrev octave-abbrev-table "`up" "unwind_protect" nil 0 t)
+    (define-abbrev octave-abbrev-table "`upc" "unwind_protect_cleanup" nil 0 t)
+    (define-abbrev octave-abbrev-table "`w" "while ()" nil 0 t)
     (setq abbrevs-changed ac)))
 
 (defvar octave-comment-char ?#
   "Character to start an Octave comment.")
 (defvar octave-comment-start
   (string octave-comment-char ?\ )
   "String to insert to start a new Octave in-line comment.")
 (defvar octave-comment-start-skip "\\s<+\\s-*"
   "Regexp to match the start of an Octave comment up to its body.")
 
 (defvar octave-begin-keywords
   '("do" "for" "function" "if" "switch" "try" "unwind_protect" "while"))
 (defvar octave-else-keywords
   '("case" "catch" "else" "elseif" "otherwise" "unwind_protect_cleanup"))
+;; Only use specific "end" tokens here to avoid confusion when "end"
+;; is used in indexing (the real fix is much more complex, and is
+;; probably not worth the effort).
 (defvar octave-end-keywords
-  '("end" "endfor" "endfunction" "endif" "endswitch" "end_try_catch"
+  '("endfor" "endfunction" "endif" "endswitch" "end_try_catch"
     "end_unwind_protect" "endwhile" "until"))
 
 (defvar octave-reserved-words
   (append octave-begin-keywords
 	  octave-else-keywords
 	  octave-end-keywords
-	  '("all_va_args" "break" "continue" "global" "gplot" "gsplot"
+	  '("all_va_args" "break" "continue" "end" "global" "gplot" "gsplot"
 	    "replot" "return"))
   "Reserved words in Octave.")
 
 (defvar octave-text-functions
   '("casesen" "cd" "chdir" "clear" "diary" "dir" "document" "echo"
     "edit_history" "format" "graw" "gset" "gshow" "help" "history" "hold"
     "load" "ls" "more" "run_history" "save" "set" "show" "type"
     "which" "who" "whos")
@@ -207,48 +209,48 @@ parenthetical grouping.")
     ()
   (let ((map (make-sparse-keymap)))
     (define-key map "`" 'octave-abbrev-start)
     (define-key map ";" 'octave-electric-semi)
     (define-key map " " 'octave-electric-space)
     (define-key map "\n" 'octave-reindent-then-newline-and-indent)
     (define-key map "\t" 'indent-according-to-mode)
     (define-key map "\e;" 'octave-indent-for-comment)
-    (define-key map "\e\n" 'octave-indent-new-comment-line)  
+    (define-key map "\e\n" 'octave-indent-new-comment-line)
     (define-key map "\e\t" 'octave-complete-symbol)
     (define-key map "\M-\C-a" 'octave-beginning-of-defun)
     (define-key map "\M-\C-e" 'octave-end-of-defun)
     (define-key map "\M-\C-h" 'octave-mark-defun)
-    (define-key map "\M-\C-q" 'octave-indent-defun)  
+    (define-key map "\M-\C-q" 'octave-indent-defun)
     (define-key map "\C-c;" 'octave-comment-region)
-    (define-key map "\C-c:" 'octave-uncomment-region)  
+    (define-key map "\C-c:" 'octave-uncomment-region)
     (define-key map "\C-c\C-b" 'octave-submit-bug-report)
     (define-key map "\C-c\C-p" 'octave-previous-code-line)
     (define-key map "\C-c\C-n" 'octave-next-code-line)
     (define-key map "\C-c\C-a" 'octave-beginning-of-line)
-    (define-key map "\C-c\C-e" 'octave-end-of-line)  
+    (define-key map "\C-c\C-e" 'octave-end-of-line)
     (define-key map "\C-c\M-\C-n" 'octave-forward-block)
     (define-key map "\C-c\M-\C-p" 'octave-backward-block)
     (define-key map "\C-c\M-\C-u" 'octave-backward-up-block)
     (define-key map "\C-c\M-\C-d" 'octave-down-block)
     (define-key map "\C-c\M-\C-h" 'octave-mark-block)
     (define-key map "\C-c]" 'octave-close-block)
     (define-key map "\C-c\C-f" 'octave-insert-defun)
     (define-key map "\C-c\C-h" 'octave-help)
     (define-key map "\C-c\C-il" 'octave-send-line)
     (define-key map "\C-c\C-ib" 'octave-send-block)
     (define-key map "\C-c\C-if" 'octave-send-defun)
-    (define-key map "\C-c\C-ir" 'octave-send-region)  
+    (define-key map "\C-c\C-ir" 'octave-send-region)
     (define-key map "\C-c\C-is" 'octave-show-process-buffer)
     (define-key map "\C-c\C-ih" 'octave-hide-process-buffer)
     (define-key map "\C-c\C-ik" 'octave-kill-process)
     (define-key map "\C-c\C-i\C-l" 'octave-send-line)
     (define-key map "\C-c\C-i\C-b" 'octave-send-block)
     (define-key map "\C-c\C-i\C-f" 'octave-send-defun)
-    (define-key map "\C-c\C-i\C-r" 'octave-send-region)  
+    (define-key map "\C-c\C-i\C-r" 'octave-send-region)
     (define-key map "\C-c\C-i\C-s" 'octave-show-process-buffer)
     (define-key map "\C-c\C-i\C-h" 'octave-hide-process-buffer)
     (define-key map "\C-c\C-i\C-k" 'octave-kill-process)
     (setq octave-mode-map map)))
 
 (defvar octave-mode-menu
   (list "Octave"
 	(list "Lines"
@@ -349,26 +351,29 @@ newline or semicolon after an else or en
 (defvar octave-block-end-regexp
   (concat "\\<\\("
 	  (mapconcat 'identity octave-end-keywords "\\|")
 	  "\\)\\>"))
 (defvar octave-block-begin-or-end-regexp
   (concat octave-block-begin-regexp "\\|" octave-block-end-regexp))
 (defvar octave-block-else-or-end-regexp
   (concat octave-block-else-regexp "\\|" octave-block-end-regexp))
+;; Only use specific "end" tokens here to avoid confusion when "end"
+;; is used in indexing (the real fix is much more complex, and is
+;; probably not worth the effort).
 (defvar octave-block-match-alist
   '(("do" . ("until"))
-    ("for" . ("end" "endfor"))
-    ("function" . ("end" "endfunction"))
-    ("if" . ("else" "elseif" "end" "endif"))
-    ("switch" . ("case" "otherwise" "end" "endswitch"))
-    ("try" . ("catch" "end" "end_try_catch"))
-    ("unwind_protect" . ("unwind_protect_cleanup" "end"
+    ("for" . ("endfor"))
+    ("function" . ("endfunction"))
+    ("if" . ("else" "elseif" "endif"))
+    ("switch" . ("case" "otherwise" "endswitch"))
+    ("try" . ("catch" "end_try_catch"))
+    ("unwind_protect" . ("unwind_protect_cleanup"
 			 "end_unwind_protect"))
-    ("while" . ("end" "endwhile")))
+    ("while" . ("endwhile")))
   "Alist with Octave's matching block keywords.
 Has Octave's begin keywords as keys and a list of the matching else or
 end keywords as associated values.")
 
 (defvar octave-block-comment-start
   (concat (make-string 2 octave-comment-char) " ")
   "String to insert to start a new Octave comment on an empty line.")
 
@@ -382,26 +387,26 @@ end keywords as associated values.")
   "*Character string used for Octave continuation lines.  Normally \\."
   :type 'string
   :group 'octave)
 
 (defvar octave-completion-alist nil
   "Alist of Octave symbols for completion in Octave mode.
 Each element looks like (VAR . VAR), where the car and cdr are the same
 symbol (an Octave command or variable name).
-Currently, only builtin variables can be completed.") 
+Currently, only builtin variables can be completed.")
 
 (defvar octave-mode-imenu-generic-expression
   (list
    ;; Functions
    (list nil octave-function-header-regexp 3))
   "Imenu expression for Octave mode.  See `imenu-generic-expression'.")
 
 (defcustom octave-mode-startup-message t
-  "*Nil means do not display the Octave mode startup message."
+  "*nil means do not display the Octave mode startup message."
   :type 'boolean
   :group 'octave)
 
 (defcustom octave-mode-hook nil
   "*Hook to be run when Octave mode is started."
   :type 'hook
   :group 'octave)
 
@@ -469,17 +474,17 @@ octave-continuation-offset
   Extra indentation applied to Octave continuation lines.
   Default is 4.
 
 octave-continuation-string
   String used for Octave continuation lines.
   Default is a backslash.
 
 octave-mode-startup-message
-  Nil means do not display the Octave mode startup message.
+  nil means do not display the Octave mode startup message.
   Default is t.
 
 octave-send-echo-input
   Non-nil means always display `inferior-octave-buffer' after sending a
   command to the inferior Octave process.
 
 octave-send-line-auto-forward
   Non-nil means always go to the next unsent line of Octave code after
@@ -515,26 +520,26 @@ including a reproducible test case and s
   (interactive)
   (kill-all-local-variables)
 
   (use-local-map octave-mode-map)
   (setq major-mode 'octave-mode)
   (setq mode-name "Octave")
   (setq local-abbrev-table octave-abbrev-table)
   (set-syntax-table octave-mode-syntax-table)
-  
+
   (make-local-variable 'indent-line-function)
   (setq indent-line-function 'octave-indent-line)
 
-  (make-local-variable 'comment-start)  
+  (make-local-variable 'comment-start)
   (setq comment-start octave-comment-start)
   (make-local-variable 'comment-end)
   (setq comment-end "")
   (make-local-variable 'comment-column)
-  (setq comment-column 32)    
+  (setq comment-column 32)
   (make-local-variable 'comment-start-skip)
   (setq comment-start-skip "\\s<+\\s-*")
   (make-local-variable 'comment-indent-function)
   (setq comment-indent-function 'octave-comment-indent)
 
   (make-local-variable 'parse-sexp-ignore-comments)
   (setq parse-sexp-ignore-comments t)
   (make-local-variable 'paragraph-start)
@@ -638,17 +643,17 @@ the end keyword."
 
 ;;; Comments
 (defun octave-comment-region (beg end &optional arg)
   "Comment or uncomment each line in the region as Octave code.
 See `comment-region'."
   (interactive "r\nP")
   (let ((comment-start (char-to-string octave-comment-char)))
     (comment-region beg end arg)))
-  
+
 (defun octave-uncomment-region (beg end &optional arg)
   "Uncomment each line in the region as Octave code."
   (interactive "r\nP")
   (or arg (setq arg 1))
   (octave-comment-region beg end (- arg)))
 
 
 ;;; Indentation
@@ -734,18 +739,18 @@ level."
 	(calculate-octave-indent)
       (skip-syntax-backward " ")
       (max (if (bolp) 0 (+ 1 (current-column)))
 	   comment-column))))
 
 (defun octave-indent-for-comment ()
   "Maybe insert and indent an Octave comment.
 If there is no comment already on this line, create a code-level comment
-(started by two comment characters) if the line is empty, or an in-line
-comment (started by one comment character) otherwise. 
+\(started by two comment characters) if the line is empty, or an in-line
+comment (started by one comment character) otherwise.
 Point is left after the start of the comment which is properly aligned."
   (interactive)
   (indent-for-comment)
   (indent-according-to-mode))
 
 (defun octave-indent-line (&optional arg)
   "Indent current line as Octave code.
 With optional ARG, use this as offset unless this line is a comment with
@@ -761,18 +766,18 @@ fixed goal column."
 	(error "Unmatched end keyword")
       (indent-line-to icol)
       (if (> relpos 0)
 	  (move-to-column (+ icol relpos))))))
 
 (defun octave-indent-new-comment-line ()
   "Break Octave line at point, continuing comment if within one.
 If within code, insert `octave-continuation-string' before breaking the
-line.  If within a string, signal an error.   
-The new line is properly indented." 
+line.  If within a string, signal an error.
+The new line is properly indented."
   (interactive)
   (delete-horizontal-space)
   (cond
    ((octave-in-comment-p)
     (indent-new-comment-line))
    ((octave-in-string-p)
     (error "Cannot split a code line inside a string"))
    (t
@@ -802,17 +807,17 @@ On success, return 0.  Otherwise, go as 
 	(inc (if (> arg 0) 1 -1)))
     (while (and (/= arg 0) (= n 0))
       (setq n (forward-line inc))
       (while (and (= n 0)
 		  (looking-at "\\s-*\\($\\|\\s<\\)"))
 	(setq n (forward-line inc)))
       (setq arg (- arg inc)))
     n))
-      
+
 (defun octave-previous-code-line (&optional arg)
   "Move ARG lines of Octave code backward (forward if ARG is negative).
 Skips past all empty and comment lines.  Default for ARG is 1.
 
 On success, return 0.  Otherwise, go as far as possible and return -1."
   (interactive "p")
   (or arg (setq arg 1))
   (octave-next-code-line (- arg)))
@@ -857,17 +862,17 @@ does not end in `...' or `\\' or is insi
 		     t)
 		 (error nil))
 	       (and (save-excursion
 		      (beginning-of-line)
 		      (or (looking-at "\\s-*\\($\\|\\s<\\)")
 			  (looking-at octave-continuation-regexp)))
 		    (zerop (forward-line 1)))))
     (end-of-line)))
-  
+
 (defun octave-scan-blocks (from count depth)
   "Scan from character number FROM by COUNT Octave begin-end blocks.
 Returns the character number of the position thus found.
 
 If DEPTH is nonzero, block depth begins counting from that value.
 Only places where the depth in blocks becomes zero are candidates for
 stopping; COUNT such places are counted.
 
@@ -1062,17 +1067,17 @@ Returns t unless search stops at the beg
 With positive ARG, do it that many times.  Negative argument -N means
 move back to Nth preceding end of a function.
 
 An end of a function occurs right after the end keyword matching the
 `function' keyword that starts the function."
   (interactive "p")
   (or arg (setq arg 1))
   (and (< arg 0) (skip-syntax-backward "w"))
-  (and (> arg 0) (skip-syntax-forward "w"))  
+  (and (> arg 0) (skip-syntax-forward "w"))
   (if (octave-in-defun-p)
       (setq arg (- arg 1)))
   (if (= arg 0) (setq arg -1))
   (if (octave-beginning-of-defun (- arg))
       (octave-forward-block)))
 
 (defun octave-mark-defun ()
   "Put point at the beginning of this Octave function, mark at its end.
@@ -1085,27 +1090,27 @@ The function marked is the one containin
 	(progn
 	  (skip-syntax-forward "w")
 	  (octave-beginning-of-defun)
 	  (push-mark (point))
 	  (octave-end-of-defun)
 	  (exchange-point-and-mark))
       (goto-char pos)
       (message "No function to mark found"))))
-  
+
 
 ;;; Filling
 (defun octave-auto-fill ()
   "Perform auto-fill in Octave mode.
 Returns nil if no feasible place to break the line could be found, and t
 otherwise."
   (let (fc give-up)
     (if (or (null (setq fc (current-fill-column)))
 	    (save-excursion
-	      (beginning-of-line) 
+	      (beginning-of-line)
 	      (and auto-fill-inhibit-regexp
 		   (looking-at auto-fill-inhibit-regexp))))
 	nil				; Can't do anything
       (if (and (not (octave-in-comment-p))
 	       (> (current-column) fc))
 	  (setq fc (- fc (+ (length octave-continuation-string) 1))))
       (while (and (not give-up) (> (current-column) fc))
 	(let* ((opoint (point))
@@ -1152,17 +1157,17 @@ otherwise."
 		(if (>= (current-column) prev-column)
 		    (setq give-up t)))
 	    (setq give-up t))))
       (not give-up))))
 
 (defun octave-fill-paragraph (&optional arg)
  "Fill paragraph of Octave code, handling Octave comments."
  (interactive "P")
- (save-excursion 
+ (save-excursion
    (let ((end (progn (forward-paragraph) (point)))
 	 (beg (progn
 		(forward-paragraph -1)
 		(skip-chars-forward " \t\n")
 		(beginning-of-line)
 		(point)))
 	 (cfc (current-fill-column))
 	 (ind (calculate-octave-indent))
@@ -1184,17 +1189,17 @@ otherwise."
 	 (move-to-column cfc)
 	 ;; First check whether we need to combine non-empty comment lines
 	 (if (and (< (current-column) cfc)
 		  (octave-in-comment-p)
 		  (not (save-excursion
 			 (beginning-of-line)
 			 (looking-at "^\\s-*\\s<+\\s-*$"))))
 	     ;; This is a nonempty comment line which does not extend
-	     ;; past the fill column.  If it is followed by an nonempty
+	     ;; past the fill column.  If it is followed by a nonempty
 	     ;; comment line with the same comment prefix, try to
 	     ;; combine them, and repeat this until either we reach the
 	     ;; fill-column or there is nothing more to combine.
 	     (progn
 	       ;; Get the comment prefix
 	       (save-excursion
 		 (beginning-of-line)
 		 (while (and (re-search-forward "\\s<+")
@@ -1257,17 +1262,17 @@ variables."
 	   (ding))
 	  ((not (string= string completion))
            (delete-region beg end)
            (insert completion))
 	  (t
 	   (let ((list (all-completions string octave-completion-alist))
 		 (conf (current-window-configuration)))
 	     ;; Taken from comint.el
-	     (message "Making completion list...")	       
+	     (message "Making completion list...")
 	     (with-output-to-temp-buffer "*Completions*"
 	       (display-completion-list list))
 	     (message "Hit space to flush")
 	     (let (key first)
 	       (if (save-excursion
 		     (set-buffer (get-buffer "*Completions*"))
 		     (setq key (read-key-sequence nil)
 			   first (aref key 0))
@@ -1278,17 +1283,17 @@ variables."
 			  (eq (key-binding key) 'mouse-choose-completion)))
 		   (progn
 		     (mouse-choose-completion first)
 		     (set-window-configuration conf))
 		 (if (eq first ?\ )
 		     (set-window-configuration conf)
 		   (setq unread-command-events
 			 (listify-key-sequence key))))))))))
-	       
+
 
 ;;; Electric characters && friends
 (defun octave-reindent-then-newline-and-indent ()
   "Reindent current Octave line, insert newline, and indent the new line.
 If Abbrev mode is on, expand abbrevs first."
   (interactive)
   (if abbrev-mode (expand-abbrev))
   (if octave-blink-matching-block
@@ -1377,31 +1382,31 @@ entered without parens)."
 			name
 			args))
 	(prefix octave-block-comment-start))
     (if (not (bobp)) (newline))
     (insert "function" string)
     (indent-according-to-mode)
     (newline 2)
     (insert prefix "usage: " string)
-    (reindent-then-newline-and-indent)    
+    (reindent-then-newline-and-indent)
     (insert prefix)
-    (reindent-then-newline-and-indent)    
+    (reindent-then-newline-and-indent)
     (insert prefix)
     (indent-according-to-mode)
     (save-excursion
       (newline 2)
       (insert "endfunction")
       (indent-according-to-mode))))
-	      
+
 
 ;;; Menu
 (defun octave-add-octave-menu ()
   "Adds the `Octave' menu to the menu bar in Octave mode."
-  (require 'easymenu)  
+  (require 'easymenu)
   (easy-menu-define octave-mode-menu-map octave-mode-map
 		    "Menu keymap for Octave mode." octave-mode-menu)
   (easy-menu-add octave-mode-menu-map octave-mode-map))
 
 
 ;;; Communication with the inferior Octave process
 (defun octave-kill-process ()
   "Kill inferior Octave process and its buffer."
@@ -1425,17 +1430,17 @@ entered without parens)."
   (interactive)
   (if (get-buffer inferior-octave-buffer)
       (delete-windows-on inferior-octave-buffer)
     (message "No buffer named %s" inferior-octave-buffer)))
 
 (defun octave-send-region (beg end)
   "Send current region to the inferior Octave process."
   (interactive "r")
-  (inferior-octave t)  
+  (inferior-octave t)
   (let ((proc inferior-octave-process)
 	(string (buffer-substring-no-properties beg end))
 	line)
     (save-excursion
       (set-buffer inferior-octave-buffer)
       (setq inferior-octave-output-list nil)
       (while (not (string-equal string ""))
 	(if (string-match "\n" string)
@@ -1453,17 +1458,17 @@ entered without parens)."
 		     (mapcar 'inferior-octave-strip-ctrl-g
 			     inferior-octave-output-list)
 		     (list inferior-octave-output-string))
 		    "\n")))))
   (if octave-send-show-buffer
       (display-buffer inferior-octave-buffer)))
 
 (defun octave-send-block ()
-  "Send current Octave block to the inferior Octave process."  
+  "Send current Octave block to the inferior Octave process."
   (interactive)
   (save-excursion
     (octave-mark-block)
     (octave-send-region (point) (mark))))
 
 (defun octave-send-defun ()
   "Send current Octave function to the inferior Octave process."
   (interactive)
@@ -1492,17 +1497,17 @@ code line."
 (defun octave-eval-print-last-sexp ()
   "Evaluate Octave sexp before point and print value into current buffer."
   (interactive)
   (inferior-octave t)
   (let ((standard-output (current-buffer))
 	(print-escape-newlines nil)
 	(opoint (point)))
     (terpri)
-    (prin1    
+    (prin1
      (save-excursion
        (forward-sexp -1)
        (inferior-octave-send-list-and-digest
 	(list (concat (buffer-substring-no-properties (point) opoint)
 		      "\n")))
        (mapconcat 'identity inferior-octave-output-list "\n")))
     (terpri)))
 
