# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1354944193 18000
#      Sat Dec 08 00:23:13 2012 -0500
# Node ID f96faf028d90ffb6fb84f1145ffb6dc749456e0b
# Parent  72968fb32c82b3f093408220a09f8f9cdd9f70ad
make java functions part of core octave_value classes

* run-octave.in: Set OCTAVE_JAVA_DIR.
* octave-value/ov-java.cc: Rename from dldfcn/__java__.cc.
(get_module_path): Delete.
(initial_java_dir): Don't set architecture dependent directory.
Check environment or use Vfcn_file_dir to set default directory.
(initial_class_path): Don't search load path for octave.jar.
(initialize_jvm): Don't add -Doctave.java.path=DIR to vm_args.
Use DEFUN, not DEFUN_DLD.
(F__java__): Delete.
* octave-value/ov-java.h: Rename from dldfcn/__java__.h.
* dldfcn/module-files: Delete entry for __java__.cc.
* libinterp/Makefile.am (octinclude_HEADERS): Delete $(DLDFCN_INC)
from the list.
* octave-value/module.mk (OCTAVE_VALUE_INC): Add ov-java.h to the list.
(OCTAVE_VALUE_SRC) Add ov-java.cc to the list.
(octave_value_liboctave_value_la_LIBADD): New variable.
(octave_value_liboctave_value_la_CPPFLAGS): Add $(JAVA_CPPFLAGS) to
the list.
* dldfcn/config-module.awk: Don't print DLDFCN_INC variable.
* Octave.java, OctaveReference.java: Don't grab a reference to
__java__.oct.

diff --git a/libinterp/Makefile.am b/libinterp/Makefile.am
--- a/libinterp/Makefile.am
+++ b/libinterp/Makefile.am
@@ -102,18 +102,17 @@ octinclude_HEADERS = \
   parse-tree/oct-gperf.h \
   builtins.h \
   builtin-defun-decls.h \
   octave.h \
   $(OCTAVE_VALUE_INC) \
   $(PARSE_TREE_INC) \
   $(OPERATORS_INC) \
   $(INTERP_CORE_INC) \
-  $(INTERPFCN_INC) \
-  $(DLDFCN_INC)
+  $(INTERPFCN_INC)
 
 nodist_octinclude_HEADERS = \
   interp-core/mxarray.h \
   interpfcn/defaults.h \
   interpfcn/graphics.h \
   oct-conf.h \
   version.h
 
diff --git a/libinterp/dldfcn/config-module.awk b/libinterp/dldfcn/config-module.awk
--- a/libinterp/dldfcn/config-module.awk
+++ b/libinterp/dldfcn/config-module.awk
@@ -5,20 +5,16 @@ BEGIN {
   print "## DO NOT EDIT -- generated from module-files by config-module.awk";
   print ""
   print "EXTRA_DIST += \\"
   print "  dldfcn/config-module.sh \\"
   print "  dldfcn/config-module.awk \\"
   print "  dldfcn/module-files \\"
   print "  dldfcn/oct-qhull.h"
   print ""
-## Kluge...
-  print "DLDFCN_INC = \\"
-  print "  dldfcn/__java__.h"
-  print ""
 }
 /^#.*/ { next; }
 {
   nfiles++;
   files[nfiles] = $1;
   cppflags[nfiles] = $2;
   ldflags[nfiles] = $3;
   libraries[nfiles] = $4;
diff --git a/libinterp/dldfcn/module-files b/libinterp/dldfcn/module-files
--- a/libinterp/dldfcn/module-files
+++ b/libinterp/dldfcn/module-files
@@ -1,16 +1,15 @@
 # FILE|CPPFLAGS|LDFLAGS|LIBRARIES
 __delaunayn__.cc|$(QHULL_CPPFLAGS)|$(QHULL_LDFLAGS)|$(QHULL_LIBS)
 __dsearchn__.cc
 __fltk_uigetfile__.cc|$(GRAPHICS_CFLAGS) $(FT2_CPPFLAGS)|$(GRAPHICS_LDFLAGS) $(FT2_LDFLAGS)|$(GRAPHICS_LIBS) $(FT2_LIBS)
 __glpk__.cc|$(GLPK_CPPFLAGS)|$(GLPK_LDFLAGS)|$(GLPK_LIBS)
 __init_fltk__.cc|$(GRAPHICS_CFLAGS) $(FT2_CPPFLAGS)|$(GRAPHICS_LDFLAGS) $(FT2_LDFLAGS)|$(GRAPHICS_LIBS) $(FT2_LIBS)
 __init_gnuplot__.cc
-__java__.cc|$(JAVA_CPPFLAGS)||$(JAVA_LIBS)
 __magick_read__.cc|$(MAGICK_CPPFLAGS)|$(MAGICK_LDFLAGS)|$(MAGICK_LIBS)
 __voronoi__.cc|$(QHULL_CPPFLAGS)|$(QHULL_LDFLAGS)|$(QHULL_LIBS)
 amd.cc|$(SPARSE_XCPPFLAGS)|$(SPARSE_XLDFLAGS)|$(SPARSE_XLIBS)
 ccolamd.cc|$(SPARSE_XCPPFLAGS)|$(SPARSE_XLDFLAGS)|$(SPARSE_XLIBS)
 chol.cc|$(SPARSE_XCPPFLAGS)|$(SPARSE_XLDFLAGS)|$(SPARSE_XLIBS)
 colamd.cc|$(SPARSE_XCPPFLAGS)|$(SPARSE_XLDFLAGS)|$(SPARSE_XLIBS)
 convhulln.cc|$(QHULL_CPPFLAGS)|$(QHULL_LDFLAGS)|$(QHULL_LIBS)
 dmperm.cc|$(SPARSE_XCPPFLAGS)|$(SPARSE_XLDFLAGS)|$(SPARSE_XLIBS)
diff --git a/libinterp/octave-value/module.mk b/libinterp/octave-value/module.mk
--- a/libinterp/octave-value/module.mk
+++ b/libinterp/octave-value/module.mk
@@ -46,16 +46,17 @@ OCTAVE_VALUE_INC = \
   octave-value/ov-fcn-inline.h \
   octave-value/ov-fcn.h \
   octave-value/ov-float.h \
   octave-value/ov-flt-complex.h \
   octave-value/ov-flt-cx-diag.h \
   octave-value/ov-flt-cx-mat.h \
   octave-value/ov-flt-re-diag.h \
   octave-value/ov-flt-re-mat.h \
+  octave-value/ov-java.h \
   octave-value/ov-lazy-idx.h \
   octave-value/ov-mex-fcn.h \
   octave-value/ov-null-mat.h \
   octave-value/ov-oncleanup.h \
   octave-value/ov-perm.h \
   octave-value/ov-range.h \
   octave-value/ov-re-diag.h \
   octave-value/ov-re-mat.h \
@@ -103,16 +104,17 @@ OCTAVE_VALUE_SRC = \
   octave-value/ov-fcn-inline.cc \
   octave-value/ov-fcn.cc \
   octave-value/ov-float.cc \
   octave-value/ov-flt-complex.cc \
   octave-value/ov-flt-cx-diag.cc \
   octave-value/ov-flt-cx-mat.cc \
   octave-value/ov-flt-re-diag.cc \
   octave-value/ov-flt-re-mat.cc \
+  octave-value/ov-java.cc \
   octave-value/ov-lazy-idx.cc \
   octave-value/ov-mex-fcn.cc \
   octave-value/ov-null-mat.cc \
   octave-value/ov-oncleanup.cc \
   octave-value/ov-perm.cc \
   octave-value/ov-range.cc \
   octave-value/ov-re-diag.cc \
   octave-value/ov-re-mat.cc \
@@ -123,9 +125,19 @@ OCTAVE_VALUE_SRC = \
   octave-value/ov-usr-fcn.cc \
   octave-value/ov.cc \
   $(OV_INTTYPE_SRC) \
   $(OV_SPARSE_SRC)
 
 noinst_LTLIBRARIES += octave-value/liboctave-value.la
 
 octave_value_liboctave_value_la_SOURCES = $(OCTAVE_VALUE_SRC)
-octave_value_liboctave_value_la_CPPFLAGS = $(liboctinterp_la_CPPFLAGS)
+
+## FIXME -- maybe it would be better to limit the JAVA flags to
+## the compile commands for ov-java.cc?  Does JAVA_LIBS need to be
+## added to LIBOCTINTERP_LINK_DEPS (see libinterp/link-deps.mk)?
+## Should we have a separate set of JAVA_LDFLAGS?
+
+octave_value_liboctave_value_la_CPPFLAGS = \
+  $(liboctinterp_la_CPPFLAGS) \
+  $(JAVA_CPPFLAGS)
+
+octave_value_liboctave_value_la_LIBADD = $(JAVA_LIBS)
diff --git a/libinterp/dldfcn/__java__.cc b/libinterp/octave-value/ov-java.cc
rename from libinterp/dldfcn/__java__.cc
rename to libinterp/octave-value/ov-java.cc
--- a/libinterp/dldfcn/__java__.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -33,24 +33,25 @@ along with Octave; see the file COPYING.
 #include <algorithm>
 #include <map>
 #include <iostream>
 #include <fstream>
 
 #include <clocale>
 
 #include "Cell.h"
-#include "__java__.h"
 #include "cmd-edit.h"
-#include "defun-dld.h"
+#include "defaults.h"
+#include "defun.h"
 #include "file-ops.h"
 #include "file-stat.h"
 #include "load-path.h"
 #include "oct-env.h"
 #include "oct-shlib.h"
+#include "ov-java.h"
 #include "parse.h"
 #include "variables.h"
 
 typedef jint (JNICALL *JNI_CreateJavaVM_t) (JavaVM **pvm, JNIEnv **penv, void *args);
 typedef jint (JNICALL *JNI_GetCreatedJavaVMs_t) (JavaVM **pvm, jsize bufLen, jsize *nVMs);
 
 extern "C"
 {
@@ -247,61 +248,29 @@ set_dll_directory (const std::string& di
     }
 
   if (dllfcn)
     dllfcn (dir.empty () ? NULL : dir.c_str ());
 }
 #endif
 
 static std::string
-get_module_path (const std::string& name, bool strip_name = true)
+initial_java_dir (void)
 {
-  std::string retval;
-
-  retval = octave_env::make_absolute (load_path::find_file (name),
-                                      octave_env::get_current_directory ());
-
-  if (! retval.empty ())
-    {
-      if (strip_name)
-      {
-        size_t pos = retval.rfind (file_ops::dir_sep_str () + name);
-
-        if (pos != std::string::npos)
-          retval.resize (pos);
-        else
-          throw std::string ("No module path in ") + retval;
-      }
-    }
-  else
-    throw std::string ("Could not find file ") + name;
+  static std::string java_dir;
 
-  return retval;
-}
-
-static std::string
-initial_java_dir (bool arch_dependent = false)
-{
-  static std::string path1;
-  static std::string path2;
-
-  if (arch_dependent)
+  if (java_dir.empty ())
     {
-      if (path1.empty ())
-        path1 = get_module_path ("__java__.oct", true);
+      java_dir = octave_env::getenv ("OCTAVE_JAVA_DIR");
 
-      return path1;
+      if (java_dir.empty ())
+        java_dir = Vfcn_file_dir + file_ops::dir_sep_str () + "java";
     }
-  else
-    {
-      if (path2.empty ())
-        path2 = get_module_path ("javaclasspath.m", true);
 
-      return path2;
-    }
+  return java_dir;
 }
 
 // Read the content of a file filename (usually "classpath.txt")
 //
 // Returns a string with all lines concatenated and separated
 // by the path separator character.
 // The return string also starts with a path separator so that
 // it can be appended easily to a base classpath.
@@ -345,56 +314,61 @@ read_classpath_txt (const std::string& f
 
   return (classpath);
 }
 
 
 static std::string
 initial_class_path (void)
 {
-  std::string retval = initial_java_dir ();
+  std::string java_dir = initial_java_dir ();
+
+  std::string retval = java_dir;
 
   // find octave.jar file
   if (! retval.empty ())
     {
-      std::string jar_file = get_module_path ("octave.jar", false);
+      std::string sep = file_ops::dir_sep_str ();
+
+      std::string jar_file = java_dir + sep + "octave.jar";
+
       file_stat jar_exists (jar_file);
 
       if (jar_exists)
         {
           // initialize static classpath to octave.jar
           retval = jar_file;
 
-
           // The base classpath has been set.  Try to find the optional
           // file "classpath.txt" in two places.  The users classes will
           // take precedence over the settings defined in the package
           // directory
 
           std::string str_filename = "classpath.txt";
           std::string cp_file;
           file_stat   cp_exists;
 
           // Try to read the file "classpath.txt" in the user's home
           // directory.
 
-          cp_file = file_ops::tilde_expand ("~" + file_ops::dir_sep_str () + str_filename);
+          std::string home_dir = "~" + sep + str_filename;
+          cp_file = file_ops::tilde_expand (home_dir);
           cp_exists = file_stat (cp_file);
           if (cp_exists)
             {
               // The file "classpath.txt" has been found: add its
               // contents to the static classpath.
 
               std::string theClassPath = read_classpath_txt (cp_file);
               retval.append (theClassPath);
             }
 
           // Try to read a file "classpath.txt" in the package directory.
 
-          cp_file = initial_java_dir () + file_ops::dir_sep_str () + str_filename;
+          cp_file = java_dir + sep + str_filename;
           cp_exists = file_stat (cp_file);
           if (cp_exists)
             {
               // The file "classpath.txt" has been found: add its
               // contents to the static classpath.
 
               std::string theClassPath = read_classpath_txt (cp_file);
               retval.append (theClassPath);
@@ -549,34 +523,33 @@ initialize_jvm (void)
     }
   else
     {
       // No JVM exists, create one
 
       JVMArgs vm_args;
 
       vm_args.add ("-Djava.class.path=" + initial_class_path ());
-      vm_args.add ("-Doctave.java.path=" + initial_java_dir (true));
       vm_args.add ("-Xrs");
       vm_args.add ("-Djava.system.class.loader=org.octave.OctClassLoader");
-      vm_args.read_java_opts (initial_java_dir (false) + file_ops::dir_sep_str () + "java.opts");
+      vm_args.read_java_opts (initial_java_dir () + file_ops::dir_sep_str () + "java.opts");
 
 # if !defined (__APPLE__) && !defined (__MACH__)
 
       if (create_vm (&jvm, &current_env, vm_args.to_args ()) != JNI_OK)
         throw std::string ("unable to start Java VM in ")+jvm_lib_path;
       //printf ("JVM created\n");
     }
 
   jvm_lib = lib;
 
 #else
 
       if (JNI_CreateJavaVM (&jvm, reinterpret_cast<void **> (&current_env),
-                        vm_args.to_args ()) != JNI_OK)
+                            vm_args.to_args ()) != JNI_OK)
         throw std::string ("unable to start Java VM in ")+jvm_lib_path;
 
     }
 
 #endif
 
   setlocale (LC_ALL, locale.c_str ());
 }
@@ -1385,62 +1358,62 @@ initialize_java (void)
         }
       catch (std::string msg)
         {
           error (msg.c_str ());
         }
     }
 }
 
-DEFUN_DLD (java_init, , ,
+DEFUN (java_init, , ,
   "-*- texinfo -*-\n\
 @deftypefn  {Loadable Function} {} java_init ()\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
   retval = 0;
   initialize_java ();
   if (! error_state)
     retval = 1;
 
   return retval;
 }
 
-DEFUN_DLD (java_exit, , ,
+DEFUN (java_exit, , ,
   "-*- texinfo -*-\n\
 @deftypefn  {Loadable Function} {} java_exit ()\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
   terminate_jvm ();
 
   return retval;
 }
 
-DEFUN_DLD (java_new, args, ,
+DEFUN (java_new, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{obj} =} java_new (@var{name}, @var{arg1}, ...)\n\
 Create a Java object of class @var{name}, by calling the class constructor with the\n\
 arguments @var{arg1}, ...\n\
 \n\
 @example\n\
   x = java_new (\"java.lang.StringBuffer\", \"Initial string\")\n\
 @end example\n\
 \n\
 @seealso{java_invoke, java_get, java_set}\n\
 @end deftypefn")
 {
   return _java_new (args);
 }
 
-DEFUN_DLD (javaObject, args, ,
+DEFUN (javaObject, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{obj} =} javaObject (@var{name}, @var{arg1}, ...)\n\
 Create a Java object of class @var{name}, by calling the class constructor with the\n\
 arguments @var{arg1}, ...\n\
 The first example creates an unitialized object, \
 while the second example supplies an initializer argument.\n\
 \n\
 @example\n\
@@ -1479,17 +1452,17 @@ static octave_value _java_new (const oct
         }
       else
         print_usage ();
     }
 
   return retval;
 }
 
-DEFUN_DLD (java_invoke, args, ,
+DEFUN (java_invoke, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{ret} =} java_invoke (@var{obj}, @var{name}, @var{arg1}, ...)\n\
 Invoke the method @var{name} on the Java object @var{obj} with the arguments\n\
 @var{arg1}, ... For static methods, @var{obj} can be a string representing the\n\
 fully qualified name of the corresponding class. The function returns the result\n\
 of the method invocation.\n\
 \n\
 When @var{obj} is a regular Java object, the structure-like indexing can be used\n\
@@ -1501,17 +1474,17 @@ as a shortcut syntax. For instance, the 
 @end example\n\
 \n\
 @seealso{java_get, java_set, java_new}\n\
 @end deftypefn")
 {
   return _java_invoke (args);
 }
 
-DEFUN_DLD (javaMethod, args, ,
+DEFUN (javaMethod, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{ret} =} javaMethod (@var{name}, @var{obj}, @var{arg1}, ...)\n\
 Invoke the method @var{name} on the Java object @var{obj} with the arguments\n\
 @var{arg1}, ... For static methods, @var{obj} can be a string representing the\n\
 fully qualified name of the corresponding class. The function returns the result\n\
 of the method invocation.\n\
 \n\
 When @var{obj} is a regular Java object, the structure-like indexing can be used\n\
@@ -1589,17 +1562,17 @@ static octave_value
         }
       else
         print_usage ();
     }
 
   return retval;
 }
 
-DEFUN_DLD (java_get, args, ,
+DEFUN (java_get, args, ,
     "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{val} =} java_get (@var{obj}, @var{name})\n\
 Get the value of the field @var{name} of the Java object @var{obj}. For\n\
 static fields, @var{obj} can be a string representing the fully qualified\n\
 name of the corresponding class.\n\
 \n\
 When @var{obj} is a regular Java object, the structure-like indexing can be used\n\
 as a shortcut syntax. For instance, the two following statements are equivalent\n\
@@ -1643,17 +1616,17 @@ as a shortcut syntax. For instance, the 
         }
       else
         print_usage ();
     }
 
   return retval;
 }
 
-DEFUN_DLD (java_set, args, ,
+DEFUN (java_set, args, ,
     "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{obj} =} java_set (@var{obj}, @var{name}, @var{val})\n\
 Set the value of the field @var{name} of the Java object @var{obj} to @var{val}.\n\
 For static fields, @var{obj} can be a string representing the fully qualified named\n\
 of the corresponding Java class.\n\
 \n\
 When @var{obj} is a regular Java object, the structure-like indexing can be used as\n\
 a shortcut syntax. For instance, the two following statements are equivalent\n\
@@ -1697,17 +1670,17 @@ a shortcut syntax. For instance, the two
         }
       else
         print_usage ();
     }
 
   return retval;
 }
 
-DEFUN_DLD (java2mat, args, ,
+DEFUN (java2mat, args, ,
   "-*- texinfo -*-\n\
 @deftypefn  {Loadable Function} {} java2mat (@var{obj})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   initialize_java ();
@@ -1728,44 +1701,35 @@ Undocumented internal function.\n\
         }
       else
         print_usage ();
     }
 
   return retval;
 }
 
-DEFUN_DLD (__java__, , ,
-  "-*- texinfo -*-\n\
-@deftypefn  {Loadable Function} {} __java__ ()\n\
-Undocumented internal function.\n\
-@end deftypefn")
-{
-  return octave_value ();
-}
-
-DEFUN_DLD (java_convert_matrix, args, nargout,
+DEFUN (java_convert_matrix, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} java_convert_matrix ()\n\
 Query or set the internal variable that determines FIXME.\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (java_convert_matrix);
 }
 
-DEFUN_DLD (java_unsigned_conversion, args, nargout,
+DEFUN (java_unsigned_conversion, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} java_unsigned_conversion ()\n\
 Query or set the internal variable that determines FIXME.\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (java_unsigned_conversion);
 }
 
-DEFUN_DLD (java_debug, args, nargout,
+DEFUN (java_debug, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} java_debug ()\n\
 Query or set the internal variable that determines FIXME.\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (java_debug);
 }
 
diff --git a/libinterp/dldfcn/__java__.h b/libinterp/octave-value/ov-java.h
rename from libinterp/dldfcn/__java__.h
rename to libinterp/octave-value/ov-java.h
--- a/libinterp/dldfcn/__java__.h
+++ b/libinterp/octave-value/ov-java.h
@@ -15,18 +15,18 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, see
 <http://www.gnu.org/licenses/>.
 
 */
 
-#if !defined (octave___java__h)
-#define octave___java__h 1
+#if !defined (octave_java_h)
+#define octave_java_h 1
 
 #include <jni.h>
 
 #include <oct-obj.h>
 #include <ov.h>
 
 #ifdef JAVAPKG_BUILD
 # define JAVAPKG_API OCTAVE_EXPORT
@@ -316,9 +316,9 @@ private:
 
   jobject java_object;
 
   jclass java_class;
 
   std::string java_type;
 };
 
-#endif /* __JAVA__H__ */
+#endif
diff --git a/run-octave.in b/run-octave.in
--- a/run-octave.in
+++ b/run-octave.in
@@ -75,13 +75,14 @@ if [ $# -gt 0 ]; then
   elif [ "x$1" = "x-cli" ]; then
     octave_executable="$builddir/src/octave-cli"
     shift
   fi
 fi
 
 OCTAVE_SITE_INITFILE="$top_srcdir/scripts/startup/main-rcfile" \
 OCTAVE_DEFAULT_QT_SETTINGS="$top_srcdir/libgui/default-qt-settings" \
+OCTAVE_JAVA_DIR="$builddir/scripts/java" \
   exec $builddir/libtool --mode=execute $driver \
     "$octave_executable" --no-init-path --path="$LOADPATH" \
     --image-path="$IMAGEPATH" --doc-cache-file="$DOCFILE" \
     --built-in-docstrings-file="$BUILT_IN_DOCSTRINGS_FILE" \
     --texi-macros-file="$TEXIMACROSFILE" --info-file="$INFOFILE" "$@"
diff --git a/scripts/java/org/octave/Octave.java b/scripts/java/org/octave/Octave.java
--- a/scripts/java/org/octave/Octave.java
+++ b/scripts/java/org/octave/Octave.java
@@ -15,21 +15,16 @@
 */
 
 package org.octave;
 
 import java.util.*;
 
 public class Octave
 {
-  static
-  {
-    System.load (System.getProperty ("octave.java.path") + java.io.File.separator + "__java__.oct");
-  }
-
   private static Object notifyObject = null;
   private static Object[] args = null;
   private static LinkedList invokeList = new LinkedList();
   private static LinkedList waitList = new LinkedList();
 
   public native static boolean call (String name, Object[] argin, Object[] argout);
   public native static void doInvoke(int ID, Object[] args);
   public native static void doEvalString(String cmd);
diff --git a/scripts/java/org/octave/OctaveReference.java b/scripts/java/org/octave/OctaveReference.java
--- a/scripts/java/org/octave/OctaveReference.java
+++ b/scripts/java/org/octave/OctaveReference.java
@@ -13,21 +13,16 @@
 ** You should have received a copy of the GNU General Public License
 ** along with this program; If not, see <http://www.gnu.org/licenses/>.
 */
 
 package org.octave;
 
 public class OctaveReference
 {
-	static
-	{
-		System.load (System.getProperty ("octave.java.path") + java.io.File.separator + "__java__.oct");
-	}
-  
 	private int ID;
 
 	public OctaveReference(int ID)
 	{
 		this.ID = ID;
 	}
 
 	private native static void doFinalize(int ID);
