# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1272885695 -7200
#      Mon May 03 13:21:35 2010 +0200
# Node ID 3ce0c530a9c91f556a852af18b13d97c5ecfe7ba
# Parent  036bdc2d0af0bf62ce33336c34a65cabe309b5fc
implement svd_driver

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,20 @@
+2010-05-03  Jaroslav Hajek  <highegg@gmail.com>
+
+	* dbleSVD.h (SVD::driver): New enum.
+	(SVD::SVD, SVD::init): Add driver option.
+	* floatSVD.h (FloatSVD::FloatSVD, FloatSVD::init): Add driver option.
+	* CmplxSVD.h (ComplexSVD::ComplexSVD, ComplexSVD::init): Add driver option.
+	* fCmplxSVD.h (FloatComplexSVD::FloatComplexSVD, FloatComplexSVD::init): Add driver option.
+	* dbleSVD.cc (SVD::init): Optionally use xGESDD driver.
+	* floatSVD.cc (FloatSVD::init): Ditto.
+	* CmplxSVD.cc (ComplexSVD::init): Ditto.
+	* fCmplxSVD.cc (FloatComplexSVD::init): Ditto.
+
 2010-04-28  John W. Eaton  <jwe@octave.org>
 
 	* dim-vector.h (dim_vector (const octave_idx_type *, size_t)): Delete.
 	* Sparse.cc (Sparse<T>::assign): Cast 0 to octave_idx_type in
 	call to Sparse<T> constructor.
 	Addresses bug #29692.
 
 2010-04-27  John W. Eaton  <jwe@octave.org>
diff --git a/liboctave/CmplxSVD.cc b/liboctave/CmplxSVD.cc
--- a/liboctave/CmplxSVD.cc
+++ b/liboctave/CmplxSVD.cc
@@ -23,28 +23,37 @@ along with Octave; see the file COPYING.
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "CmplxSVD.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
+#include "oct-locbuf.h"
 
 extern "C"
 {
   F77_RET_T
   F77_FUNC (zgesvd, ZGESVD) (F77_CONST_CHAR_ARG_DECL,
                              F77_CONST_CHAR_ARG_DECL,
                              const octave_idx_type&, const octave_idx_type&, Complex*,
                              const octave_idx_type&, double*, Complex*, const octave_idx_type&,
                              Complex*, const octave_idx_type&, Complex*, const octave_idx_type&,
                              double*, octave_idx_type&
                              F77_CHAR_ARG_LEN_DECL
                              F77_CHAR_ARG_LEN_DECL);
+
+  F77_RET_T
+  F77_FUNC (zgesdd, ZGESDD) (F77_CONST_CHAR_ARG_DECL,
+                             const octave_idx_type&, const octave_idx_type&, Complex*,
+                             const octave_idx_type&, double*, Complex*, const octave_idx_type&,
+                             Complex*, const octave_idx_type&, Complex*, const octave_idx_type&,
+                             double*, octave_idx_type *, octave_idx_type&
+                             F77_CHAR_ARG_LEN_DECL);
 }
 
 ComplexMatrix
 ComplexSVD::left_singular_matrix (void) const
 {
   if (type_computed == SVD::sigma_only)
     {
       (*current_liboctave_error_handler)
@@ -64,17 +73,17 @@ ComplexSVD::right_singular_matrix (void)
         ("ComplexSVD: V not computed because type == SVD::sigma_only");
       return ComplexMatrix ();
     }
   else
     return right_sm;
 }
 
 octave_idx_type
-ComplexSVD::init (const ComplexMatrix& a, SVD::type svd_type)
+ComplexSVD::init (const ComplexMatrix& a, SVD::type svd_type, SVD::driver svd_driver)
 {
   octave_idx_type info;
 
   octave_idx_type m = a.rows ();
   octave_idx_type n = a.cols ();
 
   ComplexMatrix atmp = a;
   Complex *tmp_data = atmp.fortran_vec ();
@@ -139,32 +148,58 @@ ComplexSVD::init (const ComplexMatrix& a
 
   octave_idx_type lwork = -1;
 
   Array<Complex> work (1, 1);
 
   octave_idx_type one = 1;
   octave_idx_type m1 = std::max (m, one), nrow_vt1 = std::max (nrow_vt, one);
 
-  F77_XFCN (zgesvd, ZGESVD, (F77_CONST_CHAR_ARG2 (&jobu, 1),
-                             F77_CONST_CHAR_ARG2 (&jobv, 1),
-                             m, n, tmp_data, m1, s_vec, u, m1, vt,
-                             nrow_vt1, work.fortran_vec (), lwork,
-                             rwork.fortran_vec (), info
-                             F77_CHAR_ARG_LEN (1)
-                             F77_CHAR_ARG_LEN (1)));
+  if (svd_driver == SVD::GESVD)
+    {
+      F77_XFCN (zgesvd, ZGESVD, (F77_CONST_CHAR_ARG2 (&jobu, 1),
+                                 F77_CONST_CHAR_ARG2 (&jobv, 1),
+                                 m, n, tmp_data, m1, s_vec, u, m1, vt,
+                                 nrow_vt1, work.fortran_vec (), lwork,
+                                 rwork.fortran_vec (), info
+                                 F77_CHAR_ARG_LEN (1)
+                                 F77_CHAR_ARG_LEN (1)));
+
+      lwork = static_cast<octave_idx_type> (work(0).real ());
+      work.resize (lwork, 1);
 
-  lwork = static_cast<octave_idx_type> (work(0).real ());
-  work.resize (lwork, 1);
+      F77_XFCN (zgesvd, ZGESVD, (F77_CONST_CHAR_ARG2 (&jobu, 1),
+                                 F77_CONST_CHAR_ARG2 (&jobv, 1),
+                                 m, n, tmp_data, m1, s_vec, u, m1, vt,
+                                 nrow_vt1, work.fortran_vec (), lwork,
+                                 rwork.fortran_vec (), info
+                                 F77_CHAR_ARG_LEN (1)
+                                 F77_CHAR_ARG_LEN (1)));
+    }
+  else if (svd_driver == SVD::GESDD)
+    {
+      assert (jobu == jobv);
+      char jobz = jobu;
+      OCTAVE_LOCAL_BUFFER (octave_idx_type, iwork, 8*min_mn);
 
-  F77_XFCN (zgesvd, ZGESVD, (F77_CONST_CHAR_ARG2 (&jobu, 1),
-                             F77_CONST_CHAR_ARG2 (&jobv, 1),
-                             m, n, tmp_data, m1, s_vec, u, m1, vt,
-                             nrow_vt1, work.fortran_vec (), lwork,
-                             rwork.fortran_vec (), info
-                             F77_CHAR_ARG_LEN (1)
-                             F77_CHAR_ARG_LEN (1)));
+      F77_XFCN (zgesdd, ZGESDD, (F77_CONST_CHAR_ARG2 (&jobz, 1),
+                                 m, n, tmp_data, m1, s_vec, u, m1, vt,
+                                 nrow_vt1, work.fortran_vec (), lwork,
+                                 rwork.fortran_vec (), iwork, info
+                                 F77_CHAR_ARG_LEN (1)));
+
+      lwork = static_cast<octave_idx_type> (work(0).real ());
+      work.resize (lwork, 1);
+
+      F77_XFCN (zgesdd, ZGESDD, (F77_CONST_CHAR_ARG2 (&jobz, 1),
+                                 m, n, tmp_data, m1, s_vec, u, m1, vt,
+                                 nrow_vt1, work.fortran_vec (), lwork,
+                                 rwork.fortran_vec (), iwork, info
+                                 F77_CHAR_ARG_LEN (1)));
+    }
+  else
+    assert (0); // impossible
 
   if (! (jobv == 'N' || jobv == 'O'))
     right_sm = right_sm.hermitian ();
 
   return info;
 }
diff --git a/liboctave/CmplxSVD.h b/liboctave/CmplxSVD.h
--- a/liboctave/CmplxSVD.h
+++ b/liboctave/CmplxSVD.h
@@ -33,25 +33,26 @@ along with Octave; see the file COPYING.
 class
 OCTAVE_API
 ComplexSVD
 {
 public:
 
   ComplexSVD (void) { }
 
-  ComplexSVD (const ComplexMatrix& a, SVD::type svd_type = SVD::std)
+  ComplexSVD (const ComplexMatrix& a, 
+              SVD::type svd_type = SVD::std, SVD::driver svd_driver = SVD::GESVD) 
     {
-      init (a, svd_type);
+    { init (a, svd_type, svd_driver); }
     }
 
   ComplexSVD (const ComplexMatrix& a, octave_idx_type& info,
-              SVD::type svd_type = SVD::std)
+              SVD::type svd_type = SVD::std, SVD::driver svd_driver = SVD::GESVD) 
     {
-      info = init (a, svd_type);
+      info = init (a, svd_type, svd_driver);
     }
 
   ComplexSVD (const ComplexSVD& a)
     : type_computed (a.type_computed),
       sigma (a.sigma), left_sm (a.left_sm), right_sm (a.right_sm) { }
 
   ComplexSVD& operator = (const ComplexSVD& a)
     {
@@ -78,12 +79,14 @@ public:
 private:
 
   SVD::type type_computed;
 
   DiagMatrix sigma;
   ComplexMatrix left_sm;
   ComplexMatrix right_sm;
 
-  octave_idx_type init (const ComplexMatrix& a, SVD::type svd_type = SVD::std);
+  octave_idx_type init (const ComplexMatrix& a,
+                        SVD::type svd_type = SVD::std, 
+                        SVD::driver svd_driver = SVD::GESVD);
 };
 
 #endif
diff --git a/liboctave/dbleSVD.cc b/liboctave/dbleSVD.cc
--- a/liboctave/dbleSVD.cc
+++ b/liboctave/dbleSVD.cc
@@ -24,28 +24,37 @@ along with Octave; see the file COPYING.
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <iostream>
 
 #include "dbleSVD.h"
 #include "f77-fcn.h"
+#include "oct-locbuf.h"
 
 extern "C"
 {
   F77_RET_T
   F77_FUNC (dgesvd, DGESVD) (F77_CONST_CHAR_ARG_DECL,
                              F77_CONST_CHAR_ARG_DECL,
                              const octave_idx_type&, const octave_idx_type&, double*,
                              const octave_idx_type&, double*, double*,
                              const octave_idx_type&, double*, const octave_idx_type&,
                              double*, const octave_idx_type&, octave_idx_type&
                              F77_CHAR_ARG_LEN_DECL
                              F77_CHAR_ARG_LEN_DECL);
+
+  F77_RET_T
+  F77_FUNC (dgesdd, DGESDD) (F77_CONST_CHAR_ARG_DECL,
+                             const octave_idx_type&, const octave_idx_type&, double*,
+                             const octave_idx_type&, double*, double*,
+                             const octave_idx_type&, double*, const octave_idx_type&,
+                             double*, const octave_idx_type&, octave_idx_type *, octave_idx_type&
+                             F77_CHAR_ARG_LEN_DECL);
 }
 
 Matrix
 SVD::left_singular_matrix (void) const
 {
   if (type_computed == SVD::sigma_only)
     {
       (*current_liboctave_error_handler)
@@ -65,17 +74,17 @@ SVD::right_singular_matrix (void) const
         ("SVD: V not computed because type == SVD::sigma_only");
       return Matrix ();
     }
   else
     return right_sm;
 }
 
 octave_idx_type
-SVD::init (const Matrix& a, SVD::type svd_type)
+SVD::init (const Matrix& a, SVD::type svd_type, SVD::driver svd_driver)
 {
   octave_idx_type info;
 
   octave_idx_type m = a.rows ();
   octave_idx_type n = a.cols ();
 
   Matrix atmp = a;
   double *tmp_data = atmp.fortran_vec ();
@@ -135,32 +144,58 @@ SVD::init (const Matrix& a, SVD::type sv
 
   octave_idx_type lwork = -1;
 
   Array<double> work (1, 1);
 
   octave_idx_type one = 1;
   octave_idx_type m1 = std::max (m, one), nrow_vt1 = std::max (nrow_vt, one);
 
-  F77_XFCN (dgesvd, DGESVD, (F77_CONST_CHAR_ARG2 (&jobu, 1),
-                             F77_CONST_CHAR_ARG2 (&jobv, 1),
-                             m, n, tmp_data, m1, s_vec, u, m1, vt,
-                             nrow_vt1, work.fortran_vec (), lwork, info
-                             F77_CHAR_ARG_LEN (1)
-                             F77_CHAR_ARG_LEN (1)));
+  if (svd_driver == SVD::GESVD)
+    {
+      F77_XFCN (dgesvd, DGESVD, (F77_CONST_CHAR_ARG2 (&jobu, 1),
+                                 F77_CONST_CHAR_ARG2 (&jobv, 1),
+                                 m, n, tmp_data, m1, s_vec, u, m1, vt,
+                                 nrow_vt1, work.fortran_vec (), lwork, info
+                                 F77_CHAR_ARG_LEN (1)
+                                 F77_CHAR_ARG_LEN (1)));
+
+      lwork = static_cast<octave_idx_type> (work(0));
+      work.resize (lwork, 1);
+
+      F77_XFCN (dgesvd, DGESVD, (F77_CONST_CHAR_ARG2 (&jobu, 1),
+                                 F77_CONST_CHAR_ARG2 (&jobv, 1),
+                                 m, n, tmp_data, m1, s_vec, u, m1, vt,
+                                 nrow_vt1, work.fortran_vec (), lwork, info
+                                 F77_CHAR_ARG_LEN (1)
+                                 F77_CHAR_ARG_LEN (1)));
 
-  lwork = static_cast<octave_idx_type> (work(0));
-  work.resize (lwork, 1);
+    }
+  else if (svd_driver == SVD::GESDD)
+    {
+      assert (jobu == jobv);
+      char jobz = jobu;
+      OCTAVE_LOCAL_BUFFER (octave_idx_type, iwork, 8*min_mn);
+
+      F77_XFCN (dgesdd, DGESDD, (F77_CONST_CHAR_ARG2 (&jobz, 1),
+                                 m, n, tmp_data, m1, s_vec, u, m1, vt,
+                                 nrow_vt1, work.fortran_vec (), lwork, iwork, info
+                                 F77_CHAR_ARG_LEN (1)));
 
-  F77_XFCN (dgesvd, DGESVD, (F77_CONST_CHAR_ARG2 (&jobu, 1),
-                             F77_CONST_CHAR_ARG2 (&jobv, 1),
-                             m, n, tmp_data, m1, s_vec, u, m1, vt,
-                             nrow_vt1, work.fortran_vec (), lwork, info
-                             F77_CHAR_ARG_LEN (1)
-                             F77_CHAR_ARG_LEN (1)));
+      lwork = static_cast<octave_idx_type> (work(0));
+      work.resize (lwork, 1);
+
+      F77_XFCN (dgesdd, DGESDD, (F77_CONST_CHAR_ARG2 (&jobz, 1),
+                                 m, n, tmp_data, m1, s_vec, u, m1, vt,
+                                 nrow_vt1, work.fortran_vec (), lwork, iwork, info
+                                 F77_CHAR_ARG_LEN (1)));
+
+    }
+  else
+    assert (0); // impossible
 
   if (! (jobv == 'N' || jobv == 'O'))
     right_sm = right_sm.transpose ();
 
   return info;
 }
 
 std::ostream&
diff --git a/liboctave/dbleSVD.h b/liboctave/dbleSVD.h
--- a/liboctave/dbleSVD.h
+++ b/liboctave/dbleSVD.h
@@ -37,23 +37,32 @@ public:
 
   enum type
     {
       std,
       economy,
       sigma_only
     };
 
+  enum driver
+    {
+      GESVD,
+      GESDD
+    };
+
   SVD (void) : sigma (), left_sm (), right_sm () { }
 
-  SVD (const Matrix& a, type svd_type = SVD::std) { init (a, svd_type); }
+  SVD (const Matrix& a, 
+       type svd_type = SVD::std, driver svd_driver = SVD::GESVD) 
+    { init (a, svd_type, svd_driver); }
 
-  SVD (const Matrix& a, octave_idx_type& info, type svd_type = SVD::std)
+  SVD (const Matrix& a, octave_idx_type& info, 
+       type svd_type = SVD::std, driver svd_driver = SVD::GESVD) 
     {
-      info = init (a, svd_type);
+      info = init (a, svd_type, svd_driver);
     }
 
   SVD (const SVD& a)
     : type_computed (a.type_computed),
       sigma (a.sigma), left_sm (a.left_sm), right_sm (a.right_sm) { }
 
   SVD& operator = (const SVD& a)
     {
@@ -81,12 +90,13 @@ public:
 private:
 
   SVD::type type_computed;
 
   DiagMatrix sigma;
   Matrix left_sm;
   Matrix right_sm;
 
-  octave_idx_type init (const Matrix& a, type svd_type = std);
+  octave_idx_type init (const Matrix& a, 
+                        type svd_type = std, driver svd_driver = GESVD);
 };
 
 #endif
diff --git a/liboctave/fCmplxSVD.cc b/liboctave/fCmplxSVD.cc
--- a/liboctave/fCmplxSVD.cc
+++ b/liboctave/fCmplxSVD.cc
@@ -23,28 +23,37 @@ along with Octave; see the file COPYING.
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "fCmplxSVD.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
+#include "oct-locbuf.h"
 
 extern "C"
 {
   F77_RET_T
   F77_FUNC (cgesvd, CGESVD) (F77_CONST_CHAR_ARG_DECL,
                              F77_CONST_CHAR_ARG_DECL,
                              const octave_idx_type&, const octave_idx_type&, FloatComplex*,
                              const octave_idx_type&, float*, FloatComplex*, const octave_idx_type&,
                              FloatComplex*, const octave_idx_type&, FloatComplex*, const octave_idx_type&,
                              float*, octave_idx_type&
                              F77_CHAR_ARG_LEN_DECL
                              F77_CHAR_ARG_LEN_DECL);
+
+  F77_RET_T
+  F77_FUNC (cgesdd, CGESDD) (F77_CONST_CHAR_ARG_DECL,
+                             const octave_idx_type&, const octave_idx_type&, FloatComplex*,
+                             const octave_idx_type&, float*, FloatComplex*, const octave_idx_type&,
+                             FloatComplex*, const octave_idx_type&, FloatComplex*, const octave_idx_type&,
+                             float*, octave_idx_type *, octave_idx_type&
+                             F77_CHAR_ARG_LEN_DECL);
 }
 
 FloatComplexMatrix
 FloatComplexSVD::left_singular_matrix (void) const
 {
   if (type_computed == SVD::sigma_only)
     {
       (*current_liboctave_error_handler)
@@ -64,17 +73,17 @@ FloatComplexSVD::right_singular_matrix (
         ("FloatComplexSVD: V not computed because type == SVD::sigma_only");
       return FloatComplexMatrix ();
     }
   else
     return right_sm;
 }
 
 octave_idx_type
-FloatComplexSVD::init (const FloatComplexMatrix& a, SVD::type svd_type)
+FloatComplexSVD::init (const FloatComplexMatrix& a, SVD::type svd_type, SVD::driver svd_driver)
 {
   octave_idx_type info;
 
   octave_idx_type m = a.rows ();
   octave_idx_type n = a.cols ();
 
   FloatComplexMatrix atmp = a;
   FloatComplex *tmp_data = atmp.fortran_vec ();
@@ -139,32 +148,58 @@ FloatComplexSVD::init (const FloatComple
 
   octave_idx_type lwork = -1;
 
   Array<FloatComplex> work (1, 1);
 
   octave_idx_type one = 1;
   octave_idx_type m1 = std::max (m, one), nrow_vt1 = std::max (nrow_vt, one);
 
-  F77_XFCN (cgesvd, CGESVD, (F77_CONST_CHAR_ARG2 (&jobu, 1),
-                             F77_CONST_CHAR_ARG2 (&jobv, 1),
-                             m, n, tmp_data, m1, s_vec, u, m1, vt,
-                             nrow_vt1, work.fortran_vec (), lwork,
-                             rwork.fortran_vec (), info
-                             F77_CHAR_ARG_LEN (1)
-                             F77_CHAR_ARG_LEN (1)));
+  if (svd_driver == SVD::GESVD)
+    {
+      F77_XFCN (cgesvd, CGESVD, (F77_CONST_CHAR_ARG2 (&jobu, 1),
+                                 F77_CONST_CHAR_ARG2 (&jobv, 1),
+                                 m, n, tmp_data, m1, s_vec, u, m1, vt,
+                                 nrow_vt1, work.fortran_vec (), lwork,
+                                 rwork.fortran_vec (), info
+                                 F77_CHAR_ARG_LEN (1)
+                                 F77_CHAR_ARG_LEN (1)));
+
+      lwork = static_cast<octave_idx_type> (work(0).real ());
+      work.resize (lwork, 1);
 
-  lwork = static_cast<octave_idx_type> (work(0).real ());
-  work.resize (lwork, 1);
+      F77_XFCN (cgesvd, CGESVD, (F77_CONST_CHAR_ARG2 (&jobu, 1),
+                                 F77_CONST_CHAR_ARG2 (&jobv, 1),
+                                 m, n, tmp_data, m1, s_vec, u, m1, vt,
+                                 nrow_vt1, work.fortran_vec (), lwork,
+                                 rwork.fortran_vec (), info
+                                 F77_CHAR_ARG_LEN (1)
+                                 F77_CHAR_ARG_LEN (1)));
+    }
+  else if (svd_driver == SVD::GESDD)
+    {
+      assert (jobu == jobv);
+      char jobz = jobu;
+      OCTAVE_LOCAL_BUFFER (octave_idx_type, iwork, 8*min_mn);
 
-  F77_XFCN (cgesvd, CGESVD, (F77_CONST_CHAR_ARG2 (&jobu, 1),
-                             F77_CONST_CHAR_ARG2 (&jobv, 1),
-                             m, n, tmp_data, m1, s_vec, u, m1, vt,
-                             nrow_vt1, work.fortran_vec (), lwork,
-                             rwork.fortran_vec (), info
-                             F77_CHAR_ARG_LEN (1)
-                             F77_CHAR_ARG_LEN (1)));
+      F77_XFCN (cgesdd, CGESDD, (F77_CONST_CHAR_ARG2 (&jobz, 1),
+                                 m, n, tmp_data, m1, s_vec, u, m1, vt,
+                                 nrow_vt1, work.fortran_vec (), lwork,
+                                 rwork.fortran_vec (), iwork, info
+                                 F77_CHAR_ARG_LEN (1)));
+
+      lwork = static_cast<octave_idx_type> (work(0).real ());
+      work.resize (lwork, 1);
+
+      F77_XFCN (cgesdd, CGESDD, (F77_CONST_CHAR_ARG2 (&jobz, 1),
+                                 m, n, tmp_data, m1, s_vec, u, m1, vt,
+                                 nrow_vt1, work.fortran_vec (), lwork,
+                                 rwork.fortran_vec (), iwork, info
+                                 F77_CHAR_ARG_LEN (1)));
+    }
+  else
+    assert (0); // impossible
 
   if (! (jobv == 'N' || jobv == 'O'))
     right_sm = right_sm.hermitian ();
 
   return info;
 }
diff --git a/liboctave/fCmplxSVD.h b/liboctave/fCmplxSVD.h
--- a/liboctave/fCmplxSVD.h
+++ b/liboctave/fCmplxSVD.h
@@ -33,25 +33,26 @@ along with Octave; see the file COPYING.
 class
 OCTAVE_API
 FloatComplexSVD
 {
 public:
 
   FloatComplexSVD (void) { }
 
-  FloatComplexSVD (const FloatComplexMatrix& a, SVD::type svd_type = SVD::std)
+  FloatComplexSVD (const FloatComplexMatrix& a, 
+                   SVD::type svd_type = SVD::std, SVD::driver svd_driver = SVD::GESVD) 
     {
-      init (a, svd_type);
+      init (a, svd_type, svd_driver);
     }
 
   FloatComplexSVD (const FloatComplexMatrix& a, octave_idx_type& info,
-              SVD::type svd_type = SVD::std)
+                   SVD::type svd_type = SVD::std, SVD::driver svd_driver = SVD::GESVD) 
     {
-      info = init (a, svd_type);
+      info = init (a, svd_type, svd_driver);
     }
 
   FloatComplexSVD (const FloatComplexSVD& a)
     : type_computed (a.type_computed),
       sigma (a.sigma), left_sm (a.left_sm), right_sm (a.right_sm) { }
 
   FloatComplexSVD& operator = (const FloatComplexSVD& a)
     {
@@ -78,12 +79,14 @@ public:
 private:
 
   SVD::type type_computed;
 
   FloatDiagMatrix sigma;
   FloatComplexMatrix left_sm;
   FloatComplexMatrix right_sm;
 
-  octave_idx_type init (const FloatComplexMatrix& a, SVD::type svd_type = SVD::std);
+  octave_idx_type init (const FloatComplexMatrix& a, 
+                        SVD::type svd_type = SVD::std, 
+                        SVD::driver svd_driver = SVD::GESVD);
 };
 
 #endif
diff --git a/liboctave/floatSVD.cc b/liboctave/floatSVD.cc
--- a/liboctave/floatSVD.cc
+++ b/liboctave/floatSVD.cc
@@ -24,28 +24,37 @@ along with Octave; see the file COPYING.
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <iostream>
 
 #include "floatSVD.h"
 #include "f77-fcn.h"
+#include "oct-locbuf.h"
 
 extern "C"
 {
   F77_RET_T
   F77_FUNC (sgesvd, SGESVD) (F77_CONST_CHAR_ARG_DECL,
                              F77_CONST_CHAR_ARG_DECL,
                              const octave_idx_type&, const octave_idx_type&, float*,
                              const octave_idx_type&, float*, float*,
                              const octave_idx_type&, float*, const octave_idx_type&,
                              float*, const octave_idx_type&, octave_idx_type&
                              F77_CHAR_ARG_LEN_DECL
                              F77_CHAR_ARG_LEN_DECL);
+
+  F77_RET_T
+  F77_FUNC (sgesdd, SGESDD) (F77_CONST_CHAR_ARG_DECL,
+                             const octave_idx_type&, const octave_idx_type&, float*,
+                             const octave_idx_type&, float*, float*,
+                             const octave_idx_type&, float*, const octave_idx_type&,
+                             float*, const octave_idx_type&, octave_idx_type *, octave_idx_type&
+                             F77_CHAR_ARG_LEN_DECL);
 }
 
 FloatMatrix
 FloatSVD::left_singular_matrix (void) const
 {
   if (type_computed == SVD::sigma_only)
     {
       (*current_liboctave_error_handler)
@@ -65,17 +74,17 @@ FloatSVD::right_singular_matrix (void) c
         ("FloatSVD: V not computed because type == SVD::sigma_only");
       return FloatMatrix ();
     }
   else
     return right_sm;
 }
 
 octave_idx_type
-FloatSVD::init (const FloatMatrix& a, SVD::type svd_type)
+FloatSVD::init (const FloatMatrix& a, SVD::type svd_type, SVD::driver svd_driver)
 {
   octave_idx_type info;
 
   octave_idx_type m = a.rows ();
   octave_idx_type n = a.cols ();
 
   FloatMatrix atmp = a;
   float *tmp_data = atmp.fortran_vec ();
@@ -135,32 +144,58 @@ FloatSVD::init (const FloatMatrix& a, SV
 
   octave_idx_type lwork = -1;
 
   Array<float> work (1, 1);
 
   octave_idx_type one = 1;
   octave_idx_type m1 = std::max (m, one), nrow_vt1 = std::max (nrow_vt, one);
 
-  F77_XFCN (sgesvd, SGESVD, (F77_CONST_CHAR_ARG2 (&jobu, 1),
-                             F77_CONST_CHAR_ARG2 (&jobv, 1),
-                             m, n, tmp_data, m1, s_vec, u, m1, vt,
-                             nrow_vt1, work.fortran_vec (), lwork, info
-                             F77_CHAR_ARG_LEN (1)
-                             F77_CHAR_ARG_LEN (1)));
+  if (svd_driver == SVD::GESVD)
+    {
+      F77_XFCN (sgesvd, SGESVD, (F77_CONST_CHAR_ARG2 (&jobu, 1),
+                                 F77_CONST_CHAR_ARG2 (&jobv, 1),
+                                 m, n, tmp_data, m1, s_vec, u, m1, vt,
+                                 nrow_vt1, work.fortran_vec (), lwork, info
+                                 F77_CHAR_ARG_LEN (1)
+                                 F77_CHAR_ARG_LEN (1)));
+
+      lwork = static_cast<octave_idx_type> (work(0));
+      work.resize (lwork, 1);
+
+      F77_XFCN (sgesvd, SGESVD, (F77_CONST_CHAR_ARG2 (&jobu, 1),
+                                 F77_CONST_CHAR_ARG2 (&jobv, 1),
+                                 m, n, tmp_data, m1, s_vec, u, m1, vt,
+                                 nrow_vt1, work.fortran_vec (), lwork, info
+                                 F77_CHAR_ARG_LEN (1)
+                                 F77_CHAR_ARG_LEN (1)));
 
-  lwork = static_cast<octave_idx_type> (work(0));
-  work.resize (lwork, 1);
+    }
+  else if (svd_driver == SVD::GESDD)
+    {
+      assert (jobu == jobv);
+      char jobz = jobu;
+      OCTAVE_LOCAL_BUFFER (octave_idx_type, iwork, 8*min_mn);
+
+      F77_XFCN (sgesdd, SGESDD, (F77_CONST_CHAR_ARG2 (&jobz, 1),
+                                 m, n, tmp_data, m1, s_vec, u, m1, vt,
+                                 nrow_vt1, work.fortran_vec (), lwork, iwork, info
+                                 F77_CHAR_ARG_LEN (1)));
 
-  F77_XFCN (sgesvd, SGESVD, (F77_CONST_CHAR_ARG2 (&jobu, 1),
-                             F77_CONST_CHAR_ARG2 (&jobv, 1),
-                             m, n, tmp_data, m1, s_vec, u, m1, vt,
-                             nrow_vt1, work.fortran_vec (), lwork, info
-                             F77_CHAR_ARG_LEN (1)
-                             F77_CHAR_ARG_LEN (1)));
+      lwork = static_cast<octave_idx_type> (work(0));
+      work.resize (lwork, 1);
+
+      F77_XFCN (sgesdd, SGESDD, (F77_CONST_CHAR_ARG2 (&jobz, 1),
+                                 m, n, tmp_data, m1, s_vec, u, m1, vt,
+                                 nrow_vt1, work.fortran_vec (), lwork, iwork, info
+                                 F77_CHAR_ARG_LEN (1)));
+
+    }
+  else
+    assert (0); // impossible
 
   if (! (jobv == 'N' || jobv == 'O'))
     right_sm = right_sm.transpose ();
 
   return info;
 }
 
 std::ostream&
diff --git a/liboctave/floatSVD.h b/liboctave/floatSVD.h
--- a/liboctave/floatSVD.h
+++ b/liboctave/floatSVD.h
@@ -33,21 +33,24 @@ along with Octave; see the file COPYING.
 class
 OCTAVE_API
 FloatSVD
 {
 public:
 
   FloatSVD (void) : sigma (), left_sm (), right_sm () { }
 
-  FloatSVD (const FloatMatrix& a, SVD::type svd_type = SVD::std) { init (a, svd_type); }
+  FloatSVD (const FloatMatrix& a, 
+            SVD::type svd_type = SVD::std, SVD::driver svd_driver = SVD::GESVD) 
+    { init (a, svd_type, svd_driver); }
 
-  FloatSVD (const FloatMatrix& a, octave_idx_type& info, SVD::type svd_type = SVD::std)
+  FloatSVD (const FloatMatrix& a, octave_idx_type& info, 
+            SVD::type svd_type = SVD::std, SVD::driver svd_driver = SVD::GESVD) 
     {
-      info = init (a, svd_type);
+      info = init (a, svd_type, svd_driver);
     }
 
   FloatSVD (const FloatSVD& a)
     : type_computed (a.type_computed),
       sigma (a.sigma), left_sm (a.left_sm), right_sm (a.right_sm) { }
 
   FloatSVD& operator = (const FloatSVD& a)
     {
@@ -75,12 +78,14 @@ public:
 private:
 
   SVD::type type_computed;
 
   FloatDiagMatrix sigma;
   FloatMatrix left_sm;
   FloatMatrix right_sm;
 
-  octave_idx_type init (const FloatMatrix& a, SVD::type svd_type = SVD::std);
+  octave_idx_type init (const FloatMatrix& a, 
+                        SVD::type svd_type = SVD::std, 
+                        SVD::driver svd_driver = SVD::GESVD);
 };
 
 #endif
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2010-05-03  Jaroslav Hajek  <highegg@gmail.com>
+
+	* DLD-FUNCTIONS/svd.cc (driver): New static var.
+	(Fsvd): Use it to select a driver.
+	(Fsvd_driver): New DEFUN.
+
 2010-05-02  Rik <octave@nomad.inbox5.com>
 
 	* ov-cell.cc: Wrap documentation line to prevent overfull hbox 
         LaTex warning
 
 2010-05-01  Ben Abbott <bpabbott@mac.com>
 
 	* graphics.cc, graphics.h.in: Remove line object properties ldata,
diff --git a/src/DLD-FUNCTIONS/svd.cc b/src/DLD-FUNCTIONS/svd.cc
--- a/src/DLD-FUNCTIONS/svd.cc
+++ b/src/DLD-FUNCTIONS/svd.cc
@@ -32,16 +32,18 @@ along with Octave; see the file COPYING.
 
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
 #include "oct-obj.h"
 #include "pr-output.h"
 #include "utils.h"
 
+static SVD::driver driver = SVD::GESVD;
+
 DEFUN_DLD (svd, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{s} =} svd (@var{a})\n\
 @deftypefnx {Loadable Function} {[@var{u}, @var{s}, @var{v}] =} svd (@var{a})\n\
 @cindex singular value decomposition\n\
 Compute the singular value decomposition of @var{a}\n\
 @tex\n\
 $$\n\
@@ -198,17 +200,17 @@ decomposition, eliminating the unnecessa
               if (! error_state)
                 {
                   if (tmp.any_element_is_inf_or_nan ())
                     {
                       error ("svd: cannot take SVD of matrix containing Inf or NaN values"); 
                       return retval;
                     }
 
-                  FloatSVD result (tmp, type);
+                  FloatSVD result (tmp, type, driver);
 
                   FloatDiagMatrix sigma = result.singular_values ();
 
                   if (nargout == 0 || nargout == 1)
                     {
                       retval(0) = sigma.diag ();
                     }
                   else
@@ -226,17 +228,17 @@ decomposition, eliminating the unnecessa
               if (! error_state)
                 {
                   if (ctmp.any_element_is_inf_or_nan ())
                     {
                       error ("svd: cannot take SVD of matrix containing Inf or NaN values"); 
                       return retval;
                     }
 
-                  FloatComplexSVD result (ctmp, type);
+                  FloatComplexSVD result (ctmp, type, driver);
 
                   FloatDiagMatrix sigma = result.singular_values ();
 
                   if (nargout == 0 || nargout == 1)
                     {
                       retval(0) = sigma.diag ();
                     }
                   else
@@ -257,17 +259,17 @@ decomposition, eliminating the unnecessa
               if (! error_state)
                 {
                   if (tmp.any_element_is_inf_or_nan ())
                     {
                       error ("svd: cannot take SVD of matrix containing Inf or NaN values"); 
                       return retval;
                     }
 
-                  SVD result (tmp, type);
+                  SVD result (tmp, type, driver);
 
                   DiagMatrix sigma = result.singular_values ();
 
                   if (nargout == 0 || nargout == 1)
                     {
                       retval(0) = sigma.diag ();
                     }
                   else
@@ -285,17 +287,17 @@ decomposition, eliminating the unnecessa
               if (! error_state)
                 {
                   if (ctmp.any_element_is_inf_or_nan ())
                     {
                       error ("svd: cannot take SVD of matrix containing Inf or NaN values"); 
                       return retval;
                     }
 
-                  ComplexSVD result (ctmp, type);
+                  ComplexSVD result (ctmp, type, driver);
 
                   DiagMatrix sigma = result.singular_values ();
 
                   if (nargout == 0 || nargout == 1)
                     {
                       retval(0) = sigma.diag ();
                     }
                   else
@@ -391,8 +393,48 @@ decomposition, eliminating the unnecessa
 %! assert (size (s), [0, 0]);
 %! assert (size (v), [0, 0]);
 
 %!error <Invalid call to svd.*> svd ();
 %!error <Invalid call to svd.*> svd ([1, 2; 4, 5], 2, 3);
 %!error <Invalid call to svd.*> [u, v] = svd ([1, 2; 3, 4]);
 
 */
+
+DEFUN_DLD (svd_driver, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {@var{old} =} svd_driver (@var{new})\n\
+Sets or queries the underlying LAPACK driver used by svd.\n\
+Currently recognized are \"gesvd\" and \"gesdd\". Default is \"gesvd\".\n\
+@seealso{svd}\n\
+@end deftypefn")
+{
+  octave_value retval;
+  int nargin = args.length ();
+
+  if (nargin == 0 || (nargin == 1 && args(0).is_string ()))
+    {
+      if (driver == SVD::GESVD)
+        retval = "gesvd";
+      else if (driver == SVD::GESDD)
+        retval = "gesdd";
+      else
+        panic_impossible ();
+
+
+      if (nargin == 1)
+        {
+          std::string opt = args(0).xtolower ().string_value ();
+          if (opt == "gesvd")
+            driver = SVD::GESVD;
+          else if (opt == "gesdd")
+            driver = SVD::GESDD;
+          else
+            error ("svd_driver: invalid driver spec: %s", opt.c_str ());
+        }
+    }
+  else
+    print_usage ();
+
+  return retval;
+}
+
+
