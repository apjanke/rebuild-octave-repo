# HG changeset patch
# User jwe
# Date 1029378641 0
#      Thu Aug 15 02:30:41 2002 +0000
# Node ID 8bc97120fbd5f579bc38059297e98dc835008849
# Parent  3995501ce1d9be166aba295b58e681b3585a72a6
[project @ 2002-08-15 02:30:40 by jwe]

diff --git a/libcruft/odessa/odessa.f b/libcruft/odessa/odessa.f
--- a/libcruft/odessa/odessa.f
+++ b/libcruft/odessa/odessa.f
@@ -1614,17 +1614,18 @@ C---------------------------------------
       TOLSF = TOLSF*2.0D0
       IF (NST .EQ. 0) GO TO 626
       GO TO 520
  280   IF (ODESSA_ADDX(TN,H) .NE. TN) GO TO 290
       NHNIL = NHNIL + 1
       IF (NHNIL .GT. MXHNIL) GO TO 290
       CALL XERRWD ('ODESSA - WARNING..INTERNAL T (=R1) AND H (=R2) ARE',
      1   101, 1, 0, 0, 0, 0, ZERO, ZERO)
-      CALL XERRWD ('SUCH THAT IN THE MACHINE, T + H = T ON THE NEXT STEP',
+      CALL XERRWD
+     1 ('SUCH THAT IN THE MACHINE, T + H = T ON THE NEXT STEP',
      1   101, 1, 0, 0, 0, 0, ZERO, ZERO)
       CALL XERRWD ('(H = STEP SIZE). SOLVER WILL CONTINUE ANYWAY',
      1   101, 1, 0, 0, 0, 2, TN, H)
       IF (NHNIL .LT. MXHNIL) GO TO 290
       CALL XERRWD ('ODESSA - ABOVE WARNING HAS BEEN ISSUED I1 TIMES.',
      1   102, 1, 0, 0, 0, 0, ZERO, ZERO)
       CALL XERRWD ('IT WILL NOT BE ISSUED AGAIN FOR THIS PROBLEM',
      1   102, 1, 1, MXHNIL, 0, 0, ZERO,ZERO)
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,13 @@
 2002-08-14  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* LSODE.cc (LSODE::error_message): Also return current T on
+	failures when that makes sense.
+
 	* Makefile.in (liboct-pathsearch.$(SHLEXT_VER)): Link to
 	$(LIBKPATHSEA) here.
 
 2002-08-08  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* lo-ieee.cc (lo_ieee_is_NA): New function.
 	(lo_ieee_is_NaN_or_NA): New function.
 	(octave_NA): New global value.
diff --git a/liboctave/LSODE.cc b/liboctave/LSODE.cc
--- a/liboctave/LSODE.cc
+++ b/liboctave/LSODE.cc
@@ -27,16 +27,17 @@ Software Foundation, 59 Temple Place - S
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cfloat>
 #include <cmath>
 
 #include <iostream>
+#include <strstream>
 
 #include "LSODE.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
 
 typedef int (*lsode_fcn_ptr) (const int&, const double&, double*,
 			      double*, int&);
 
@@ -293,58 +294,69 @@ LSODE::do_integrate (double tout)
   return retval;
 }
 
 std::string
 LSODE::error_message (void) const
 {
   std::string retval;
 
+  std::ostrstream buf;
+  buf << t << ends;
+  const char *t = buf.str ();
+  std::string curr_t = t;
+  delete [] t;
+
   switch (istate)
     {
     case 1:
       retval = "prior to initial integration step";
       break;
 
     case 2:
       retval = "successful exit";
       break;
 	  
     case 3:
       retval = "prior to continuation call with modified parameters";
       break;
 	  
     case -1:
-      retval = "excess work on this call (perhaps wrong integration method)";
+      retval = std::string ("excess work on this call (t = ")
+	+ curr_t + "; perhaps wrong integration method)";
       break;
 
     case -2:
       retval = "excess accuracy requested (tolerances too small)";
       break;
 
     case -3:
       retval = "invalid input detected (see printed message)";
       break;
 
     case -4:
-      retval = "repeated error test failures (check all inputs)";
+      retval = std::string ("repeated error test failures (t = ")
+	+ curr_t + "check all inputs)";
       break;
 
     case -5:
-      retval = "repeated convergence failures (perhaps bad jacobian\
- supplied or wrong choice of integration method or tolerances)";
+      retval = std::string ("repeated convergence failures (t = ")
+	+ curr_t
+	+ "perhaps bad jacobian supplied or wrong choice of integration method or tolerances)";
       break;
 
     case -6:
-      retval = "error weight became zero during problem.\
-  (solution component i vanished, and atol or atol(i) == 0)";
+      retval = std::string ("error weight became zero during problem. (t = ")
+	+ curr_t
+	+ "; solution component i vanished, and atol or atol(i) == 0)";
       break;
 
     case -13:
-      retval = "return requested in user-supplied function";
+      retval = "return requested in user-supplied function (t = "
+	+ curr_t + ")";
       break;
 
     default:
       retval = "unknown error state";
       break;
     }
 
   return retval;
