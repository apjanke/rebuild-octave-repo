# HG changeset patch
# User Rik <rik@octave.org>
# Date 1434389053 25200
#      Mon Jun 15 10:24:13 2015 -0700
# Branch stable
# Node ID 5c42ff6f0eb18d03b8164d67c0e7d5a36cc0515b
# Parent  2691947f5409f8c658defc10f0d9e09fadead668
Clean up MEX example code.

* myfeval.c: Use mxIsChar rather than deprecated mxIsString.

* mypow2.c: Validate that input is a double matrix.

* myprop.c: Use space after '!' operator to conform to Octave conventions.

* myset.c: Use mexPutVariable instead of missing mxSetName and deprecated
mexPutArray.  Find existing variable EITHER in global workspace OR in
caller workspace.  Don't check both.

* mystruct.c: Clarify input validation message.

diff --git a/examples/code/myfeval.c b/examples/code/myfeval.c
--- a/examples/code/myfeval.c
+++ b/examples/code/myfeval.c
@@ -5,17 +5,17 @@ mexFunction (int nlhs, mxArray* plhs[],
              int nrhs, const mxArray* prhs[])
 {
   char *str;
 
   mexPrintf ("Starting file myfeval.mex\n");
 
   mexPrintf ("I have %d inputs and %d outputs\n", nrhs, nlhs);
 
-  if (nrhs < 1 || ! mxIsString (prhs[0]))
+  if (nrhs < 1 || ! mxIsChar (prhs[0]))
     mexErrMsgTxt ("ARG1 must be a function name");
 
   str = mxArrayToString (prhs[0]);
 
   mexPrintf ("I'm going to call the function %s\n", str);
 
   if (nlhs == 0)
     nlhs = 1;  // Octave's automatic 'ans' variable
diff --git a/examples/code/mypow2.c b/examples/code/mypow2.c
--- a/examples/code/mypow2.c
+++ b/examples/code/mypow2.c
@@ -3,18 +3,18 @@
 void
 mexFunction (int nlhs, mxArray* plhs[],
              int nrhs, const mxArray* prhs[])
 {
   mwSize n;
   mwIndex i;
   double *vri, *vro;
 
-  if (nrhs != 1 || ! mxIsNumeric (prhs[0]))
-    mexErrMsgTxt ("ARG1 must be a matrix");
+  if (nrhs != 1 || ! mxIsDouble (prhs[0]))
+    mexErrMsgTxt ("ARG1 must be a double matrix");
 
   n = mxGetNumberOfElements (prhs[0]);
   plhs[0] = mxCreateNumericArray (mxGetNumberOfDimensions (prhs[0]),
                                   mxGetDimensions (prhs[0]),
                                   mxGetClassID (prhs[0]),
                                   mxIsComplex (prhs[0]));
   vri = mxGetPr (prhs[0]);
   vro = mxGetPr (plhs[0]);
diff --git a/examples/code/myprop.c b/examples/code/myprop.c
--- a/examples/code/myprop.c
+++ b/examples/code/myprop.c
@@ -4,20 +4,20 @@ void
 mexFunction (int nlhs, mxArray* plhs[],
              int nrhs, const mxArray* prhs[])
 {
   double handle;
   char property[256];
 
   if (nrhs < 2 || nrhs > 3)
     mexErrMsgTxt ("incorrect number of arguments");
-  if (!mxIsDouble (prhs[0]))
-    mexErrMsgTxt ("handle expected to be a double scalar");
-  if (!mxIsChar (prhs[1]))
-    mexErrMsgTxt ("expected property to be a string");
+  if (! mxIsDouble (prhs[0]))
+    mexErrMsgTxt ("handle must be a double scalar");
+  if (! mxIsChar (prhs[1]))
+    mexErrMsgTxt ("property must be a string");
 
   handle = mxGetScalar (prhs[0]);
   mxGetString (prhs[1], property, 256);
   plhs[0] = mxDuplicateArray (mexGet (handle, property));
 
   if (nrhs == 3)
     if (mexSet (handle, property, mxDuplicateArray (prhs[2])))
       mexErrMsgTxt ("failed to set property");
diff --git a/examples/code/myset.c b/examples/code/myset.c
--- a/examples/code/myset.c
+++ b/examples/code/myset.c
@@ -1,34 +1,37 @@
 #include "mex.h"
 
 void
 mexFunction (int nlhs, mxArray* plhs[],
              int nrhs, const mxArray* prhs[])
 {
   char *str;
   mxArray *v;
+  int found = 0;
 
-  if (nrhs != 2 || ! mxIsString (prhs[0]))
-    mexErrMsgTxt ("expects symbol name and value");
+  if (nrhs != 2 || ! mxIsChar (prhs[0]))
+    mexErrMsgTxt ("Arguments must be a symbol name and a value");
 
   str = mxArrayToString (prhs[0]);
 
+  // FIXME: If variable does not exist, error is reported which prevents
+  //        subsequent mexGetArray function from working.
   v = mexGetArray (str, "global");
-
   if (v)
     {
       mexPrintf ("%s is a global variable with the following value:\n", str);
       mexCallMATLAB (0, NULL, 1, &v, "disp");
+      found = 1;
     }
 
-  v = mexGetArray (str, "caller");
+  if (! found)
+    v = mexGetArray (str, "caller");
 
-  if (v)
+  if (! found && v)
     {
       mexPrintf ("%s is a caller variable with the following value:\n", str);
       mexCallMATLAB (0, NULL, 1, &v, "disp");
     }
 
   // WARNING!! Can't do this in MATLAB!  Must copy variable first.
-  mxSetName (prhs[1], str);
-  mexPutArray (prhs[1], "caller");
+  mexPutVariable ("caller", str, prhs[1]);
 }
diff --git a/examples/code/mystruct.c b/examples/code/mystruct.c
--- a/examples/code/mystruct.c
+++ b/examples/code/mystruct.c
@@ -5,17 +5,17 @@ mexFunction (int nlhs, mxArray* plhs[],
              int nrhs, const mxArray* prhs[])
 {
   int i;
   mwIndex j;
   mxArray *v;
   const char *keys[] = { "this", "that" };
 
   if (nrhs != 1 || ! mxIsStruct (prhs[0]))
-    mexErrMsgTxt ("expects struct");
+    mexErrMsgTxt ("ARG1 must be a struct");
 
   for (i = 0; i < mxGetNumberOfFields (prhs[0]); i++)
     for (j = 0; j < mxGetNumberOfElements (prhs[0]); j++)
       {
         mexPrintf ("field %s(%d) = ", mxGetFieldNameByNumber (prhs[0], i), j);
         v = mxGetFieldByNumber (prhs[0], j, i);
         mexCallMATLAB (0, NULL, 1, &v, "disp");
       }
