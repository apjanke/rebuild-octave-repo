# HG changeset patch
# User jwe
# Date 1045882653 0
#      Sat Feb 22 02:57:33 2003 +0000
# Node ID b6ad3db48255760af399d2b5841ddc450b985262
# Parent  6fa0c2306ef6a52ae997e135d416ed2f33426fe5
[project @ 2003-02-22 02:57:33 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,18 @@
+2003-02-21  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* octave.cc (fun_to_call): New static variable.
+	(octave_main): Pass it to main_loop.
+	(long_opts): Accept --funcall.
+	(usage_string, verbose_usage): Add --funcall.
+
+	* toplev.cc (main_loop): New arg, fun_to_call.  If non-empty,
+	evaluate this function before continuing.
+
 2003-02-21  Paul Kienzle <pkienzle@users.sf.net>
 
 	* file-io.cc (Fmkstemp): Use OCTAVE_LOCAL_BUFFER instead of using
 	std::auto_ptr directly.
 
 2003-02-21  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* ov.h, ov.cc (octave_value (long long int)): New constructor.
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -105,41 +105,47 @@ static bool traditional = false;
 
 // If TRUE, print verbose info in some cases.
 // (--verbose; -V)
 static bool verbose_flag = false;
 
 // Usage message
 static const char *usage_string = 
   "octave [-?HVdfhiqvx] [--debug] [--echo-commands] [--exec-path path]\n\
-       [--help] [--info-file file] [--info-program prog] [--interactive]\n\
-       [--no-history] [--no-init-file] [--no-line-editing] [--no-site-file]\n\
-       [-p path] [--path path] [--silent] [--traditional] [--verbose]\n\
-       [--version] [file]";
+       [--funcall FUNC] [--help] [--info-file file] [--info-program prog]\n\
+       [--interactive] [--no-history] [--no-init-file] [--no-line-editing]\n\
+       [--no-site-file] [-p path] [--path path] [--silent] [--traditional]\n\
+       [--verbose] [--version] [file]";
 
 // This is here so that it's more likely that the usage message and
 // the real set of options will agree.  Note: the `+' must come first
 // to prevent getopt from permuting arguments!
 static const char *short_opts = "+?HVdfhip:qvx";
 
+// The name of the optional initial function to call at startup.
+// (--funcall FUNC)
+static std::string fun_to_call;
+
 // Long options.  See the comments in getopt.h for the meanings of the
 // fields in this structure.
 #define EXEC_PATH_OPTION 1
-#define INFO_FILE_OPTION 2
-#define INFO_PROG_OPTION 3
-#define NO_INIT_FILE_OPTION 4
-#define NO_LINE_EDITING_OPTION 5
-#define NO_SITE_FILE_OPTION 6
-#define TRADITIONAL_OPTION 7
+#define FUNCALL_OPTION 2
+#define INFO_FILE_OPTION 3
+#define INFO_PROG_OPTION 4
+#define NO_INIT_FILE_OPTION 5
+#define NO_LINE_EDITING_OPTION 6
+#define NO_SITE_FILE_OPTION 7
+#define TRADITIONAL_OPTION 8
 long_options long_opts[] =
   {
     { "debug",            prog_args::no_arg,       0, 'd' },
     { "braindead",        prog_args::no_arg,       0, TRADITIONAL_OPTION },
     { "echo-commands",    prog_args::no_arg,       0, 'x' },
     { "exec-path",        prog_args::required_arg, 0, EXEC_PATH_OPTION },
+    { "funcall",          prog_args::required_arg,  0, FUNCALL_OPTION },
     { "help",             prog_args::no_arg,       0, 'h' },
     { "info-file",        prog_args::required_arg, 0, INFO_FILE_OPTION },
     { "info-program",     prog_args::required_arg, 0, INFO_PROG_OPTION },
     { "interactive",      prog_args::no_arg,       0, 'i' },
     { "no-history",       prog_args::no_arg,       0, 'H' },
     { "no-init-file",     prog_args::no_arg,       0, NO_INIT_FILE_OPTION },
     { "no-line-editing",  prog_args::no_arg,       0, NO_LINE_EDITING_OPTION },
     { "no-site-file",     prog_args::no_arg,       0, NO_SITE_FILE_OPTION },
@@ -279,16 +285,17 @@ verbose_usage (void)
 \n\
 Usage: octave [options]\n\
 \n\
 Options:\n\
 \n\
   --debug, -d             Enter parser debugging mode.\n\
   --echo-commands, -x     Echo commands as they are executed.\n\
   --exec-path PATH        Set path for executing subprograms.\n\
+  --funcall FUNC          Call Octave function FUNC with no arguments.\n\
   --help, -h, -?          Print short help message and exit.\n\
   --info-file FILE        Use top-level info file FILE.\n\
   --info-program PROGRAM  Use PROGRAM for reading info files.\n\
   --interactive, -i       Force interactive behavior.\n\
   --no-history, -H        Don't save commands to the history list\n\
   --no-init-file          Don't read the ~/.octaverc or .octaverc files.\n\
   --no-line-editing       Don't use readline for command-line editing.\n\
   --no-site-file          Don't read the site-wide octaverc file.\n\
@@ -298,18 +305,20 @@ Options:\n\
   --traditional           Set compatibility variables.\n\
   --verbose, -V           Enable verbose output in some cases.\n\
   --version, -v           Print version number and exit.\n\
 \n\
   FILE                    Execute commands from FILE.\n\
 \n\
 Additional information about Octave is available via the WWW at\n\
 http://www.octave.org.\n\
-\n\
-Please report bugs to the bug-octave@bevo.che.wisc.edu mailing list.\n";
+\n"
+OCTAVE_CONTRIB_STATEMENT "\n\
+\n"
+OCTAVE_BUGS_STATEMENT "\n";
 
   exit (0);
 }
 
 // Terse usage messsage.
 
 static void
 usage (void)
@@ -456,16 +465,21 @@ octave_main (int argc, char **argv)
 	  print_version_and_exit ();
 	  break;
 
 	case EXEC_PATH_OPTION:
 	  if (args.optarg ())
 	    bind_builtin_variable ("EXEC_PATH", args.optarg ());
 	  break;
 
+	case FUNCALL_OPTION:
+	  if (args.optarg ())
+	    fun_to_call = args.optarg ();
+	  break;
+
 	case INFO_FILE_OPTION:
 	  if (args.optarg ())
 	    bind_builtin_variable ("INFO_FILE", args.optarg ());
 	  break;
 
 	case INFO_PROG_OPTION:
 	  if (args.optarg ())
 	    bind_builtin_variable ("INFO_PROGRAM", args.optarg ());
@@ -590,17 +604,17 @@ octave_main (int argc, char **argv)
       // XXX FIXME XXX -- is this the right thing to do?
 
       bind_builtin_variable ("echo_executing_commands", ECHO_CMD_LINE);
     }
 
   if (! interactive)
     line_editing = false;
 
-  int retval = main_loop ();
+  int retval = main_loop (fun_to_call);
 
   if (retval == 1 && ! error_state)
     retval = 0;
 
   clean_up_and_exit (retval);
 
   return 0;
 }
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -170,17 +170,17 @@ public:
   // internally, which will break for very large values.  We just use
   // them to store things like 64-bit ino_t, etc, and hope that those
   // values are never actually larger than can be represented exactly
   // in a double.
 
 #if defined (HAVE_LONG_LONG_INT)
   octave_value (long long int i);
 #endif
-#if defined (HAVE_UNSIGNEDLONG_LONG_INT)
+#if defined (HAVE_UNSIGNED_LONG_LONG_INT)
   octave_value (unsigned long long int i);
 #endif
 
   octave_value (octave_time t);
   octave_value (double d);
   octave_value (const Cell& m);
   octave_value (const Matrix& m);
   octave_value (const DiagMatrix& d);
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -106,17 +106,17 @@ recover_from_exception (void)
   octave_interrupt_immediately = 0;
   octave_interrupt_state = 0;
   octave_allocation_error = 0;
   octave_restore_signal_mask ();
   octave_catch_interrupts ();
 }
 
 int
-main_loop (void)
+main_loop (const std::string& fun_to_call)
 {
   octave_save_signal_mask ();
 
   if (octave_set_current_context)
     {
 #if defined (USE_EXCEPTIONS_FOR_INTERRUPTS)
       panic_impossible ();
 #else
@@ -128,16 +128,19 @@ main_loop (void)
     }
 
   can_interrupt = true;
 
   octave_catch_interrupts ();
 
   octave_initialized = true;
 
+  if (! fun_to_call.empty ())
+    feval (fun_to_call);
+
   // The big loop.
 
   int retval = 0;
   do
     {
       try
 	{
 	  curr_sym_tab = top_level_sym_tab;
diff --git a/src/toplev.h b/src/toplev.h
--- a/src/toplev.h
+++ b/src/toplev.h
@@ -32,17 +32,17 @@ class octave_value_list;
 class octave_user_function;
 class tree_statement_list;
 class charMatrix;
 
 extern void
 clean_up_and_exit (int) GCC_ATTR_NORETURN;
 
 extern int
-main_loop (void);
+main_loop (const std::string& fun_to_call);
 
 extern void
 do_octave_atexit (void);
 
 // Current command to execute.
 extern tree_statement_list *global_command;
 
 // Pointer to function that is currently being evaluated.
