# HG changeset patch
# User Soren Hauberg <hauberg@gmail.com>
# Date 1243357152 -7200
#      Tue May 26 18:59:12 2009 +0200
# Node ID be7d8132c1392a90ce12f11c1ad7182eb0c9f648
# Parent  9eb6e8f2b937a0ecda984b5cec9486809789095b
# Parent  de255681c85f4b1e1704b429f4e77f6430a0b940
Resolve ChangeLog conflict

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,12 +1,16 @@
 2009-05-26 Søren Hauberg  <hauberg@gmail.com>
 
 	* help/__makeinfo__.m: Support several @seealso's in one text. 
 
+2009-05-26  John W. Eaton  <jwe@octave.org>
+
+	* plot/colorbar.m: Downcase location argument.
+
 2009-05-26 Carlo de Falco  <kingcrimson@tiscali.it>
 
 	* pkg/pkg.m: Add "version" field to the structure returned by "pkg
 	describe". 
 
 2009-05-25  Ben Abbott <bpabbott@mac.com>
 
 	* plot/__go_draw_axes__.m: Properly render TeX symbols for x11, when
diff --git a/scripts/plot/colorbar.m b/scripts/plot/colorbar.m
--- a/scripts/plot/colorbar.m
+++ b/scripts/plot/colorbar.m
@@ -66,17 +66,17 @@ function h = colorbar (varargin)
 	      || strcmp (get (ax, "type"), "axes"))
 	    error ("colorbar: expecting an axes handle following \"peer\"");
 	  endif
 	endif
       elseif (strcmpi (arg, "north") || strcmpi (arg, "south")
 	      || strcmpi (arg, "east") || strcmpi (arg, "west")
 	      || strcmpi (arg, "northoutside") || strcmpi (arg, "southoutside")
 	      || strcmpi (arg, "eastoutside") || strcmpi (arg, "westoutside"))
-	loc = arg;
+	loc = tolower (arg);
       elseif (strcmpi (arg, "off") || strcmpi (arg, "none"))
 	deleting = true;
       else
 	args{end+1} = arg;
       endif
     else
       args{end+1} = arg;
     endif
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,30 @@
+2009-05-26  John W. Eaton  <jwe@octave.org>
+
+	* load-path.h, load-path.cc (load_path::files, load_path::do_files): 
+	New arg, OMIT_EXTS.
+	* help.cc (F__list_functions__): Call load_path::files with
+	omit_exts set to true.
+
+	* symtab.h
+	(symbol_table::symbol_record::symbol_record_rep::is_variable):
+	Use "! is_local ()" instead of storage_class != local.
+	(symbol_table::do_variable_names): Only add variables to the list.
+	(symbol_table::unmark_forced_variables): New static function
+	* variables.cc (do_who): Use is_variable instead of is_defined.
+	Also limit output to variables when using regexp pattern.
+	* octave.cc (unmark_forced_vars): Delete.
+	(execute_eval_option_code): Don't add unmark_forced_vars to 
+	unwind_protect stack here.
+	* toplev.cc (main_loop): Add symbol_table::unmark_forced_variables
+	to the unwind_protect stack here.
+	* input.cc (get_debug_input): Likewise.
+	* parse.y (parse_fcn_file, eval_string): Likewise.
+
 2009-05-25  Jaroslav Hajek  <highegg@gmail.com>
 
 	* toplev.h (quit_allowed): New global variable.
 	* toplev.cc (quit_allowed): Declare it.
 	(Fquit): Raise error if quitting is not allowed.
 	* octave.cc (octave_main): if running as embedded, disable quit by
 	default.
 
diff --git a/src/help.cc b/src/help.cc
--- a/src/help.cc
+++ b/src/help.cc
@@ -952,20 +952,27 @@ Undocumented internal function.\n\
   if (args.length () == 0)
     retval = Cell (ffl.append (afl));
   else
     {
       std::string dir = args (0).string_value ();
 
       if (! error_state)
 	{
-	  string_vector fl = load_path::files (dir);
+	  string_vector fl = load_path::files (dir, true);
 
 	  if (! error_state)
-	    retval = Cell (fl);
+	    {
+	      // Return a sorted list with unique entries (in case of
+	      // .m and .oct versions of the same function in a given
+	      // directory, for example).
+	      fl.sort (true);
+
+	      retval = Cell (fl);
+	    }
 	}
       else
         error ("__list_functions__: input must be a string");
     }  
 
   return retval;
 }
 
diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -661,16 +661,21 @@ get_debug_input (const std::string& prom
     {
       reset_error_handler ();
 
       reset_parser ();
 
       // Save current value of global_command.
       unwind_protect_ptr (global_command);
 
+      // Do this with an unwind-protect cleanup function so that the
+      // forced variables will be unmarked in the event of an interrupt.
+      symbol_table::scope_id scope = symbol_table::top_scope ();
+      unwind_protect::add (symbol_table::unmark_forced_variables, &scope);
+
       // This is the same as yyparse in parse.y.
       int retval = octave_parse ();
 
       if (retval == 0 && global_command)
 	{
 	  global_command->accept (*current_evaluator);
 
 	  // FIXME -- To avoid a memory leak, global_command should be
@@ -682,16 +687,19 @@ get_debug_input (const std::string& prom
 	  // delete global_command;
 	  //
 	  // global_command = 0;
 
 	  if (octave_completion_matches_called)
 	    octave_completion_matches_called = false;	    
 	}
 
+      // Unmark forced variables.
+      unwind_protect::run ();
+
       // Restore previous value of global_command.
       unwind_protect::run ();
 
       OCTAVE_QUIT;
     }
 
   unwind_protect::run_frame ("get_debug_input");
 }
diff --git a/src/load-path.cc b/src/load-path.cc
--- a/src/load-path.cc
+++ b/src/load-path.cc
@@ -1332,25 +1332,40 @@ load_path::do_dir_list (void) const
        i != dir_info_list.end ();
        i++)
     retval.push_back (i->dir_name);
 
   return retval;
 }
 
 string_vector
-load_path::do_files (const std::string& dir) const
+load_path::do_files (const std::string& dir, bool omit_exts) const
 {
   string_vector retval;
 
   const_dir_info_list_iterator i = find_dir_info (dir);
 
   if (i != dir_info_list.end ())
     retval = i->fcn_files;
 
+  if (omit_exts)
+    {
+      octave_idx_type len = retval.length ();
+
+      for (octave_idx_type i = 0; i < len; i++)
+	{
+	  std::string fname = retval[i];
+
+	  size_t pos = fname.rfind ('.');
+
+	  if (pos != std::string::npos)
+	    retval[i] = fname.substr (0, pos);
+	}
+    }
+
   return retval;
 }
 
 string_vector
 load_path::do_fcn_names (void) const
 {
   size_t len = fcn_map.size ();
 
diff --git a/src/load-path.h b/src/load-path.h
--- a/src/load-path.h
+++ b/src/load-path.h
@@ -181,19 +181,20 @@ public:
   }
 
   static std::list<std::string> dir_list (void)
   {
     return instance_ok ()
       ? instance->do_dir_list () : std::list<std::string> ();
   }
 
-  static string_vector files (const std::string& dir)
+  static string_vector files (const std::string& dir, bool omit_exts = false)
   {
-    return instance_ok () ? instance->do_files (dir) : string_vector ();
+    return instance_ok ()
+      ? instance->do_files (dir, omit_exts) : string_vector ();
   }
 
   static string_vector fcn_names (void)
   {
     return instance_ok () ? instance->do_fcn_names () : string_vector ();
   }
 
   static std::string path (void)
@@ -485,17 +486,17 @@ private:
   std::string do_find_first_of (const string_vector& files) const;
 
   string_vector do_find_all_first_of (const string_vector& files) const;
 
   string_vector do_dirs (void) const;
 
   std::list<std::string> do_dir_list (void) const;
 
-  string_vector do_files (const std::string& dir) const;
+  string_vector do_files (const std::string& dir, bool omit_exts) const;
 
   string_vector do_fcn_names (void) const;
 
   std::string do_path (void) const;
 
   friend void print_types (std::ostream& os, int types);
 
   friend string_vector get_file_list (const dir_info::fcn_file_map_type& lst);
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -362,28 +362,16 @@ execute_startup_files (void)
 
 	  source_file (local_rc, context, verbose, require_file);
 	}
     }
 
   unwind_protect::run_frame ("execute_startup_files");
 }
 
-static void
-unmark_forced_vars (void *arg)
-{
-  // Unmark any symbols that may have been tagged as local variables
-  // while parsing (for example, by force_local_variable in lex.l).
-
-  symbol_table::scope_id *pscope = static_cast <symbol_table::scope_id *> (arg);
-
-  if (pscope)
-    symbol_table::unmark_forced_variables (*pscope);
-}
-
 static int
 execute_eval_option_code (const std::string& code)
 {
   unwind_protect::begin_frame ("execute_eval_option_code");
 
   octave_save_signal_mask ();
 
   can_interrupt = true;
@@ -393,21 +381,16 @@ execute_eval_option_code (const std::str
   octave_bad_alloc_hook = unwind_protect::run_all;
 
   octave_catch_interrupts ();
 
   octave_initialized = true;
 
   unwind_protect_bool (interactive);
 
-  // Do this with an unwind-protect cleanup function so that the
-  // forced variables will be unmarked in the event of an interrupt.
-  symbol_table::scope_id scope = symbol_table::top_scope ();
-  unwind_protect::add (unmark_forced_vars, &scope);
-
   interactive = false;
 
   int parse_status = 0;
 
   try
     {
       eval_string (code, false, parse_status, 0);
     }
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -3253,16 +3253,22 @@ parse_fcn_file (const std::string& ff, c
 
 	  switch_to_buffer (new_buf);
 
 	  unwind_protect_ptr (curr_fcn_ptr);
 	  curr_fcn_ptr = 0;
 
 	  reset_parser ();
 
+	  // Do this with an unwind-protect cleanup function so that
+	  // the forced variables will be unmarked in the event of an
+	  // interrupt. 
+	  symbol_table::scope_id scope = symbol_table::top_scope ();
+	  unwind_protect::add (symbol_table::unmark_forced_variables, &scope);
+
 	  if (! help_txt.empty ())
 	    help_buf.push (help_txt);
 
 	  if (parsing_script)
 	    prep_lexer_for_script ();
 
 	  lexer_flags.parsing_class_method = ! dispatch_type.empty ();
 
@@ -3900,20 +3906,29 @@ eval_string (const std::string& s, bool 
   switch_to_buffer (new_buf);
 
   do
     {
       reset_parser ();
 
       unwind_protect_ptr (global_command);
 
+      // Do this with an unwind-protect cleanup function so that the
+      // forced variables will be unmarked in the event of an
+      // interrupt.
+      symbol_table::scope_id scope = symbol_table::top_scope ();
+      unwind_protect::add (symbol_table::unmark_forced_variables, &scope);
+
       parse_status = yyparse ();
 
       tree_statement_list *command_list = global_command;
 
+      // Unmark forced variables.
+      unwind_protect::run ();
+
       // Restore previous value of global_command.
       unwind_protect::run ();
 
       if (parse_status == 0)
         {
 	  if (command_list)
 	    {
 	      tree_statement *stmt = 0;
diff --git a/src/symtab.h b/src/symtab.h
--- a/src/symtab.h
+++ b/src/symtab.h
@@ -292,17 +292,17 @@ public:
 
       bool is_defined (context_id context) const
       {
 	return varval (context).is_defined ();
       }
 
       bool is_variable (context_id context) const
       {
-	return (storage_class != local || is_defined (context) || is_forced ());
+	return (! is_local () || is_defined (context) || is_forced ());
       }
 
       bool is_local (void) const { return storage_class & local; }
       bool is_automatic (void) const { return storage_class & automatic; }
       bool is_formal (void) const { return storage_class & formal; }
       bool is_hidden (void) const { return storage_class & hidden; }
       bool is_inherited (void) const { return storage_class & inherited; }
       bool is_global (void) const { return storage_class & global; }
@@ -1330,16 +1330,29 @@ public:
   {
     symbol_table *inst = get_instance (scope);
 
     if (inst)
       inst->do_unmark_forced_variables ();
   }
 
   // For unwind_protect.
+  static void unmark_forced_variables (void *arg)
+  {
+    // Unmark any symbols that may have been tagged as local variables
+    // while parsing (for example, by force_local_variable in lex.l).
+
+    symbol_table::scope_id *p = static_cast <symbol_table::scope_id *> (arg);
+
+  if (p)
+    unmark_forced_variables (*p);
+}
+
+
+  // For unwind_protect.
   static void clear_variables (void *) { clear_variables (); }
 
   static void clear_functions (void)
   {
     for (fcn_table_iterator p = fcn_table.begin (); p != fcn_table.end (); p++)
       p->second.clear ();
   }
 
@@ -2284,17 +2297,20 @@ private:
     return retval;
   }
 
   std::list<std::string> do_variable_names (void)
   {
     std::list<std::string> retval;
 
     for (table_const_iterator p = table.begin (); p != table.end (); p++)
-      retval.push_back (p->first);
+      {
+	if (p->second.is_variable ())
+	  retval.push_back (p->first);
+      }
 
     retval.sort ();
 
     return retval;
   }
 
   static std::map<std::string, octave_value>
   subfunctions_defined_in_scope (scope_id scope = xcurrent_scope)
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -543,20 +543,28 @@ main_loop (void)
 
   // The big loop.
 
   int retval = 0;
   do
     {
       try
 	{
+	  unwind_protect::begin_frame ("main_loop");
+
 	  reset_error_handler ();
 
 	  reset_parser ();
 
+	  // Do this with an unwind-protect cleanup function so that
+	  // the forced variables will be unmarked in the event of an
+	  // interrupt.
+	  symbol_table::scope_id scope = symbol_table::top_scope ();
+	  unwind_protect::add (symbol_table::unmark_forced_variables, &scope);
+
 	  // This is the same as yyparse in parse.y.
 	  retval = octave_parse ();
 
 	  if (retval == 0)
 	    {
 	      if (global_command)
 		{
 		  global_command->accept (*current_evaluator);
@@ -597,16 +605,18 @@ main_loop (void)
 			octave_completion_matches_called = false;	    
 		      else
 			command_editor::increment_current_command_number ();
 		    }
 		}
 	      else if (parser_end_of_input)
 		break;
 	    }
+
+	  unwind_protect::run_frame ("main_loop");
 	}
       catch (octave_quit_exception e)
         {
           unwind_protect::run_all ();
           clean_up_and_exit (e.status);
         }
       catch (octave_interrupt_exception)
 	{
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -1448,20 +1448,23 @@ do_who (int argc, const string_vector& a
 	{
 	  std::list<symbol_table::symbol_record> tmp = global_only
 	    ? symbol_table::regexp_global_variables (pat)
 	    : symbol_table::regexp_variables (pat);
 
 	  for (std::list<symbol_table::symbol_record>::const_iterator p = tmp.begin ();
 	       p != tmp.end (); p++)
 	    {
-	      if (verbose)
-		symbol_stats.append (*p);
-	      else
-		symbol_names.push_back (p->name ());
+	      if (p->is_variable ())
+		{
+		  if (verbose)
+		    symbol_stats.append (*p);
+		  else
+		    symbol_names.push_back (p->name ());
+		}
 	    }
 	}
       else
 	{
 	  size_t pos = pat.find_first_of (".({");
 
 	  if (pos != std::string::npos && pos > 0)
 	    {
@@ -1500,17 +1503,17 @@ do_who (int argc, const string_vector& a
 	    {
 	      std::list<symbol_table::symbol_record> tmp = global_only
 		? symbol_table::glob_global_variables (pat)
 		: symbol_table::glob_variables (pat);
 
 	      for (std::list<symbol_table::symbol_record>::const_iterator p = tmp.begin ();
 		   p != tmp.end (); p++)
 		{
-                  if (p->is_defined ())
+                  if (p->is_variable ())
                     {
                       if (verbose)
                         symbol_stats.append (*p);
                       else
                         symbol_names.push_back (p->name ());
                     }
 		}
 	    }
