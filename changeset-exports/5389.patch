# HG changeset patch
# User jwe
# Date 1118807149 0
#      Wed Jun 15 03:45:49 2005 +0000
# Node ID 25c8956d220447e0d4747d8e4b2734e357aefcb1
# Parent  7099eb9841b40b828590780398854d48bcdf0f63
[project @ 2005-06-15 03:45:46 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,12 @@
+2005-06-14  John W. Eaton  <jwe@octave.org>
+
+	* configure.in (AH_BOTTOM): Also define GCC_ATTR_DEPRECATED.
+
 2005-06-02  John W. Eaton  <jwe@octave.org>
 
 	* Makeconf.in (do-subst-default-vals): Substitute
 	${localstartupfiledir}, not ${localstartupfile} (which is undefined).
 
 2005-05-16  David Bateman  <dbateman@free.fr>
 
 	* configure.in: Change UMFPACK_LONG_IDX to IDX_TYPE_LONG.
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -24,17 +24,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### Preserve CFLAGS and CXXFLAGS from the environment before doing
 ### anything else because we don't know which macros might call
 ### AC_PROG_CC or AC_PROG_CXX.
 
 EXTERN_CFLAGS="$CFLAGS"
 EXTERN_CXXFLAGS="$CXXFLAGS"
 
 AC_INIT
-AC_REVISION($Revision: 1.478 $)
+AC_REVISION($Revision: 1.479 $)
 AC_PREREQ(2.57)
 AC_CONFIG_SRCDIR([src/octave.cc])
 AC_CONFIG_HEADER(config.h)
 
 AC_DEFINE(OCTAVE_SOURCE, 1, [Define if this is Octave.])
   
 OCTAVE_HOST_TYPE
 
@@ -1465,19 +1465,21 @@ AC_CONFIG_SUBDIRS(scripts)
 if test "x$PLPLOT_DIR" = xplplot; then
   AC_CONFIG_SUBDIRS(plplot)
 fi
 
 ### Some things to add to the bottom of config.h.
 
 AH_BOTTOM([
 #if defined (__GNUC__)
+#define GCC_ATTR_DEPRECATED __attribute__ ((__deprecated__))
 #define GCC_ATTR_NORETURN __attribute__ ((__noreturn__))
 #define GCC_ATTR_UNUSED __attribute__ ((__unused__))
 #else
+#define GCC_ATTR_DEPRECATED
 #define GCC_ATTR_NORETURN
 #define GCC_ATTR_UNUSED
 #endif
 
 #define CONST_CAST(T, E) (T) (E)
 
 #define DYNAMIC_CAST(T, E) (T) (E)
 
diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -2602,19 +2602,19 @@ ComplexMatrix::too_large_for_float (void
   for (octave_idx_type j = 0; j < nc; j++)
     for (octave_idx_type i = 0; i < nr; i++)
       {
 	Complex val = elem (i, j);
 
 	double r_val = std::real (val);
 	double i_val = std::imag (val);
 
-	if ((! (octave_is_NaN_or_NA (r_val) || xisinf (r_val))
+	if ((! (xisnan (r_val) || xisinf (r_val))
 	     && fabs (r_val) > FLT_MAX)
-	    || (! (octave_is_NaN_or_NA (i_val) || xisinf (i_val))
+	    || (! (xisnan (i_val) || xisinf (i_val))
 		&& fabs (i_val) > FLT_MAX))
 	  return true;
       }
 
   return false;
 }
 
 // XXX FIXME XXX Do these really belong here?  Maybe they should be
@@ -2801,41 +2801,41 @@ ComplexMatrix::row_min (Array<octave_idx
 	  Complex tmp_min;
 
 	  double abs_min = octave_NaN;
 
 	  for (idx_j = 0; idx_j < nc; idx_j++)
 	    {
 	      tmp_min = elem (i, idx_j);
 
-	      if (! octave_is_NaN_or_NA (tmp_min))
+	      if (! xisnan (tmp_min))
 		{
 		  abs_min = real_only ? std::real (tmp_min) : std::abs (tmp_min);
 		  break;
 		}
 	    }
 
 	  for (octave_idx_type j = idx_j+1; j < nc; j++)
 	    {
 	      Complex tmp = elem (i, j);
 
-	      if (octave_is_NaN_or_NA (tmp))
+	      if (xisnan (tmp))
 		continue;
 
 	      double abs_tmp = real_only ? std::real (tmp) : std::abs (tmp);
 
 	      if (abs_tmp < abs_min)
 		{
 		  idx_j = j;
 		  tmp_min = tmp;
 		  abs_min = abs_tmp;
 		}
 	    }
 
-	  if (octave_is_NaN_or_NA (tmp_min))
+	  if (xisnan (tmp_min))
 	    {
 	      result.elem (i) = Complex_NaN_result;
 	      idx_arg.elem (i) = 0;
 	    }
 	  else
 	    {
 	      result.elem (i) = tmp_min;
 	      idx_arg.elem (i) = idx_j;
@@ -2875,41 +2875,41 @@ ComplexMatrix::row_max (Array<octave_idx
 	  Complex tmp_max;
 
 	  double abs_max = octave_NaN;
 
 	  for (idx_j = 0; idx_j < nc; idx_j++)
 	    {
 	      tmp_max = elem (i, idx_j);
 
-	      if (! octave_is_NaN_or_NA (tmp_max))
+	      if (! xisnan (tmp_max))
 		{
 		  abs_max = real_only ? std::real (tmp_max) : std::abs (tmp_max);
 		  break;
 		}
 	    }
 
 	  for (octave_idx_type j = idx_j+1; j < nc; j++)
 	    {
 	      Complex tmp = elem (i, j);
 
-	      if (octave_is_NaN_or_NA (tmp))
+	      if (xisnan (tmp))
 		continue;
 
 	      double abs_tmp = real_only ? std::real (tmp) : std::abs (tmp);
 
 	      if (abs_tmp > abs_max)
 		{
 		  idx_j = j;
 		  tmp_max = tmp;
 		  abs_max = abs_tmp;
 		}
 	    }
 
-	  if (octave_is_NaN_or_NA (tmp_max))
+	  if (xisnan (tmp_max))
 	    {
 	      result.elem (i) = Complex_NaN_result;
 	      idx_arg.elem (i) = 0;
 	    }
 	  else
 	    {
 	      result.elem (i) = tmp_max;
 	      idx_arg.elem (i) = idx_j;
@@ -2949,41 +2949,41 @@ ComplexMatrix::column_min (Array<octave_
 	  Complex tmp_min;
 
 	  double abs_min = octave_NaN;
 
 	  for (idx_i = 0; idx_i < nr; idx_i++)
 	    {
 	      tmp_min = elem (idx_i, j);
 
-	      if (! octave_is_NaN_or_NA (tmp_min))
+	      if (! xisnan (tmp_min))
 		{
 		  abs_min = real_only ? std::real (tmp_min) : std::abs (tmp_min);
 		  break;
 		}
 	    }
 
 	  for (octave_idx_type i = idx_i+1; i < nr; i++)
 	    {
 	      Complex tmp = elem (i, j);
 
-	      if (octave_is_NaN_or_NA (tmp))
+	      if (xisnan (tmp))
 		continue;
 
 	      double abs_tmp = real_only ? std::real (tmp) : std::abs (tmp);
 
 	      if (abs_tmp < abs_min)
 		{
 		  idx_i = i;
 		  tmp_min = tmp;
 		  abs_min = abs_tmp;
 		}
 	    }
 
-	  if (octave_is_NaN_or_NA (tmp_min))
+	  if (xisnan (tmp_min))
 	    {
 	      result.elem (j) = Complex_NaN_result;
 	      idx_arg.elem (j) = 0;
 	    }
 	  else
 	    {
 	      result.elem (j) = tmp_min;
 	      idx_arg.elem (j) = idx_i;
@@ -3023,41 +3023,41 @@ ComplexMatrix::column_max (Array<octave_
 	  Complex tmp_max;
 
 	  double abs_max = octave_NaN;
 
 	  for (idx_i = 0; idx_i < nr; idx_i++)
 	    {
 	      tmp_max = elem (idx_i, j);
 
-	      if (! octave_is_NaN_or_NA (tmp_max))
+	      if (! xisnan (tmp_max))
 		{
 		  abs_max = real_only ? std::real (tmp_max) : std::abs (tmp_max);
 		  break;
 		}
 	    }
 
 	  for (octave_idx_type i = idx_i+1; i < nr; i++)
 	    {
 	      Complex tmp = elem (i, j);
 
-	      if (octave_is_NaN_or_NA (tmp))
+	      if (xisnan (tmp))
 		continue;
 
 	      double abs_tmp = real_only ? std::real (tmp) : std::abs (tmp);
 
 	      if (abs_tmp > abs_max)
 		{
 		  idx_i = i;
 		  tmp_max = tmp;
 		  abs_max = abs_tmp;
 		}
 	    }
 
-	  if (octave_is_NaN_or_NA (tmp_max))
+	  if (xisnan (tmp_max))
 	    {
 	      result.elem (j) = Complex_NaN_result;
 	      idx_arg.elem (j) = 0;
 	    }
 	  else
 	    {
 	      result.elem (j) = tmp_max;
 	      idx_arg.elem (j) = idx_i;
diff --git a/liboctave/CNDArray.cc b/liboctave/CNDArray.cc
--- a/liboctave/CNDArray.cc
+++ b/liboctave/CNDArray.cc
@@ -589,19 +589,19 @@ ComplexNDArray::too_large_for_float (voi
 
   for (octave_idx_type i = 0; i < nel; i++)
     {
       Complex val = elem (i);
 
       double r_val = std::real (val);
       double i_val = std::imag (val);
 
-      if ((! (octave_is_NaN_or_NA (r_val) || xisinf (r_val))
+      if ((! (xisnan (r_val) || xisinf (r_val))
 	   && fabs (r_val) > FLT_MAX)
-	  || (! (octave_is_NaN_or_NA (i_val) || xisinf (i_val))
+	  || (! (xisnan (i_val) || xisinf (i_val))
 	      && fabs (i_val) > FLT_MAX))
 	return true;
     }
 
   return false;
 }
 
 boolNDArray
@@ -730,41 +730,41 @@ ComplexNDArray::max (ArrayN<octave_idx_t
       Complex tmp_max;
 
       double abs_max = octave_NaN;
 
       for (idx_j = 0; idx_j < x_len; idx_j++)
 	{
 	  tmp_max = elem (idx_j * x_stride + x_offset);
 	  
-	  if (! octave_is_NaN_or_NA (tmp_max))
+	  if (! xisnan (tmp_max))
 	    {
 	      abs_max = std::abs(tmp_max);
 	      break;
 	    }
 	}
 
       for (octave_idx_type j = idx_j+1; j < x_len; j++)
 	{
 	  Complex tmp = elem (j * x_stride + x_offset);
 
-	  if (octave_is_NaN_or_NA (tmp))
+	  if (xisnan (tmp))
 	    continue;
 
 	  double abs_tmp = std::abs (tmp);
 
 	  if (abs_tmp > abs_max)
 	    {
 	      idx_j = j;
 	      tmp_max = tmp;
 	      abs_max = abs_tmp;
 	    }
 	}
 
-      if (octave_is_NaN_or_NA (tmp_max))
+      if (xisnan (tmp_max))
 	{
 	  result.elem (i) = Complex_NaN_result;
 	  idx_arg.elem (i) = 0;
 	}
       else
 	{
 	  result.elem (i) = tmp_max;
 	  idx_arg.elem (i) = idx_j;
@@ -822,41 +822,41 @@ ComplexNDArray::min (ArrayN<octave_idx_t
       Complex tmp_min;
 
       double abs_min = octave_NaN;
 
       for (idx_j = 0; idx_j < x_len; idx_j++)
 	{
 	  tmp_min = elem (idx_j * x_stride + x_offset);
 	  
-	  if (! octave_is_NaN_or_NA (tmp_min))
+	  if (! xisnan (tmp_min))
 	    {
 	      abs_min = std::abs(tmp_min);
 	      break;
 	    }
 	}
 
       for (octave_idx_type j = idx_j+1; j < x_len; j++)
 	{
 	  Complex tmp = elem (j * x_stride + x_offset);
 
-	  if (octave_is_NaN_or_NA (tmp))
+	  if (xisnan (tmp))
 	    continue;
 
 	  double abs_tmp = std::abs (tmp);
 
 	  if (abs_tmp < abs_min)
 	    {
 	      idx_j = j;
 	      tmp_min = tmp;
 	      abs_min = abs_tmp;
 	    }
 	}
 
-      if (octave_is_NaN_or_NA (tmp_min))
+      if (xisnan (tmp_min))
 	{
 	  result.elem (i) = Complex_NaN_result;
 	  idx_arg.elem (i) = 0;
 	}
       else
 	{
 	  result.elem (i) = tmp_min;
 	  idx_arg.elem (i) = idx_j;
diff --git a/liboctave/CSparse.cc b/liboctave/CSparse.cc
--- a/liboctave/CSparse.cc
+++ b/liboctave/CSparse.cc
@@ -230,30 +230,30 @@ SparseComplexMatrix::max (Array2<octave_
 	      tmp_max = 0.;
 	      abs_max = 0.;
 	    }
 
 	  for (octave_idx_type i = cidx(j); i < cidx(j+1); i++)
 	    {
 	      Complex tmp = data (i);
 
-	      if (octave_is_NaN_or_NA (tmp))
+	      if (xisnan (tmp))
 		continue;
 
 	      double abs_tmp = std::abs (tmp);
 
-	      if (octave_is_NaN_or_NA (abs_max) || abs_tmp > abs_max)
+	      if (xisnan (abs_max) || abs_tmp > abs_max)
 		{
 		  idx_j = ridx (i);
 		  tmp_max = tmp;
 		  abs_max = abs_tmp;
 		}
 	    }
 
- 	  idx_arg.elem (j) = octave_is_NaN_or_NA (tmp_max) ? 0 : idx_j;
+ 	  idx_arg.elem (j) = xisnan (tmp_max) ? 0 : idx_j;
 	  if (abs_max != 0.)
 	    nel++;
 	}
 
       result = SparseComplexMatrix (1, nc, nel);
 
       octave_idx_type ii = 0;
       result.xcidx (0) = 0;
@@ -296,17 +296,17 @@ SparseComplexMatrix::max (Array2<octave_
       for (octave_idx_type j = 0; j < nc; j++)
 	{
 	  for (octave_idx_type i = cidx(j); i < cidx(j+1); i++)
 	    {
 	      octave_idx_type ir = ridx (i);
 	      octave_idx_type ix = idx_arg.elem (ir);
 	      Complex tmp = data (i);
 
-	      if (octave_is_NaN_or_NA (tmp))
+	      if (xisnan (tmp))
 		continue;
 	      else if (ix == -1 || std::abs(tmp) > std::abs(elem (ir, ix)))
 		idx_arg.elem (ir) = j;
 	    }
 	}
 
       octave_idx_type nel = 0;
       for (octave_idx_type j = 0; j < nr; j++)
@@ -382,30 +382,30 @@ SparseComplexMatrix::min (Array2<octave_
 	      tmp_min = 0.;
 	      abs_min = 0.;
 	    }
 
 	  for (octave_idx_type i = cidx(j); i < cidx(j+1); i++)
 	    {
 	      Complex tmp = data (i);
 
-	      if (octave_is_NaN_or_NA (tmp))
+	      if (xisnan (tmp))
 		continue;
 
 	      double abs_tmp = std::abs (tmp);
 
-	      if (octave_is_NaN_or_NA (abs_min) || abs_tmp < abs_min)
+	      if (xisnan (abs_min) || abs_tmp < abs_min)
 		{
 		  idx_j = ridx (i);
 		  tmp_min = tmp;
 		  abs_min = abs_tmp;
 		}
 	    }
 
- 	  idx_arg.elem (j) = octave_is_NaN_or_NA (tmp_min) ? 0 : idx_j;
+ 	  idx_arg.elem (j) = xisnan (tmp_min) ? 0 : idx_j;
 	  if (abs_min != 0.)
 	    nel++;
 	}
 
       result = SparseComplexMatrix (1, nc, nel);
 
       octave_idx_type ii = 0;
       result.xcidx (0) = 0;
@@ -448,17 +448,17 @@ SparseComplexMatrix::min (Array2<octave_
       for (octave_idx_type j = 0; j < nc; j++)
 	{
 	  for (octave_idx_type i = cidx(j); i < cidx(j+1); i++)
 	    {
 	      octave_idx_type ir = ridx (i);
 	      octave_idx_type ix = idx_arg.elem (ir);
 	      Complex tmp = data (i);
 
-	      if (octave_is_NaN_or_NA (tmp))
+	      if (xisnan (tmp))
 		continue;
 	      else if (ix == -1 || std::abs(tmp) < std::abs(elem (ir, ix)))
 		idx_arg.elem (ir) = j;
 	    }
 	}
 
       octave_idx_type nel = 0;
       for (octave_idx_type j = 0; j < nr; j++)
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,20 @@
 2005-06-14  John W. Eaton  <jwe@octave.org>
 
+	* CMatrix.cc, CNDArray.cc, CSparse.cc, dMatrix.cc, dNDArray.cc,
+	dSparse.cc, lo-cieee.c, lo-mappers.cc: Change all uses of
+	octave_is_NaN_or_NA to xisnan.
+
+	* lo-mappers.h (octave_is_NaN_or_NA): Mark with GCC_ATTR_DEPRECATED.
+	* lo-ieee.h (lo_ieee_is_NaN_or_NA): Likewise.
+
+	* lo-cieee.c (lo_ieee_is_NaN_or_NA): Now just a wrapper for
+	lo_ieee_isnan.
+
 	* dMatrix.cc (Matrix::too_large_for_float): Only check if abs
 	value is greater than FLT_MAX.
 	* CMatrix.cc (ComplexMatrix::too_large_for_float): Ditto.
 	* dNDArray.cc (NDArray::too_large_for_float): Ditto.
 	* CNDArray.cc (ComplexNDArray::too_large_for_float): Ditto.
 
 	* dMatrix.cc (Matrix::too_large_for_float): Special case Inf
 	values too.
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -2109,17 +2109,17 @@ bool
 Matrix::too_large_for_float (void) const
 {
   octave_idx_type nel = nelem ();
 
   for (octave_idx_type i = 0; i < nel; i++)
     {
       double val = elem (i);
 
-      if (! (octave_is_NaN_or_NA (val) || xisinf (val))
+      if (! (xisnan (val) || xisinf (val))
 	  && fabs (val) > FLT_MAX)
 	return true;
     }
 
   return false;
 }
 
 // XXX FIXME XXX Do these really belong here?  Maybe they should be
@@ -2265,35 +2265,35 @@ Matrix::row_min (Array<octave_idx_type>&
 	  octave_idx_type idx_j;
 
 	  double tmp_min = octave_NaN;
 
 	  for (idx_j = 0; idx_j < nc; idx_j++)
 	    {
 	      tmp_min = elem (i, idx_j);
 
-	      if (! octave_is_NaN_or_NA (tmp_min))
+	      if (! xisnan (tmp_min))
 		break;
 	    }
 
 	  for (octave_idx_type j = idx_j+1; j < nc; j++)
 	    {
 	      double tmp = elem (i, j);
 
-	      if (octave_is_NaN_or_NA (tmp))
+	      if (xisnan (tmp))
 		continue;
 	      else if (tmp < tmp_min)
 		{
 		  idx_j = j;
 		  tmp_min = tmp;
 		}
 	    }
 
 	  result.elem (i) = tmp_min;
-	  idx_arg.elem (i) = octave_is_NaN_or_NA (tmp_min) ? 0 : idx_j;
+	  idx_arg.elem (i) = xisnan (tmp_min) ? 0 : idx_j;
         }
     }
 
   return result;
 }
 
 ColumnVector
 Matrix::row_max (void) const
@@ -2320,35 +2320,35 @@ Matrix::row_max (Array<octave_idx_type>&
 	  octave_idx_type idx_j;
 
 	  double tmp_max = octave_NaN;
 
 	  for (idx_j = 0; idx_j < nc; idx_j++)
 	    {
 	      tmp_max = elem (i, idx_j);
 
-	      if (! octave_is_NaN_or_NA (tmp_max))
+	      if (! xisnan (tmp_max))
 		break;
 	    }
 
 	  for (octave_idx_type j = idx_j+1; j < nc; j++)
 	    {
 	      double tmp = elem (i, j);
 
-	      if (octave_is_NaN_or_NA (tmp))
+	      if (xisnan (tmp))
 		continue;
 	      else if (tmp > tmp_max)
 		{
 		  idx_j = j;
 		  tmp_max = tmp;
 		}
 	    }
 
 	  result.elem (i) = tmp_max;
-	  idx_arg.elem (i) = octave_is_NaN_or_NA (tmp_max) ? 0 : idx_j;
+	  idx_arg.elem (i) = xisnan (tmp_max) ? 0 : idx_j;
         }
     }
 
   return result;
 }
 
 RowVector
 Matrix::column_min (void) const
@@ -2375,35 +2375,35 @@ Matrix::column_min (Array<octave_idx_typ
 	  octave_idx_type idx_i;
 
 	  double tmp_min = octave_NaN;
 
 	  for (idx_i = 0; idx_i < nr; idx_i++)
 	    {
 	      tmp_min = elem (idx_i, j);
 
-	      if (! octave_is_NaN_or_NA (tmp_min))
+	      if (! xisnan (tmp_min))
 		break;
 	    }
 
 	  for (octave_idx_type i = idx_i+1; i < nr; i++)
 	    {
 	      double tmp = elem (i, j);
 
-	      if (octave_is_NaN_or_NA (tmp))
+	      if (xisnan (tmp))
 		continue;
 	      else if (tmp < tmp_min)
 		{
 		  idx_i = i;
 		  tmp_min = tmp;
 		}
 	    }
 
 	  result.elem (j) = tmp_min;
-	  idx_arg.elem (j) = octave_is_NaN_or_NA (tmp_min) ? 0 : idx_i;
+	  idx_arg.elem (j) = xisnan (tmp_min) ? 0 : idx_i;
         }
     }
 
   return result;
 }
 
 RowVector
 Matrix::column_max (void) const
@@ -2430,35 +2430,35 @@ Matrix::column_max (Array<octave_idx_typ
 	  octave_idx_type idx_i;
 
 	  double tmp_max = octave_NaN;
 
 	  for (idx_i = 0; idx_i < nr; idx_i++)
 	    {
 	      tmp_max = elem (idx_i, j);
 
-	      if (! octave_is_NaN_or_NA (tmp_max))
+	      if (! xisnan (tmp_max))
 		break;
 	    }
 
 	  for (octave_idx_type i = idx_i+1; i < nr; i++)
 	    {
 	      double tmp = elem (i, j);
 
-	      if (octave_is_NaN_or_NA (tmp))
+	      if (xisnan (tmp))
 		continue;
 	      else if (tmp > tmp_max)
 		{
 		  idx_i = i;
 		  tmp_max = tmp;
 		}
 	    }
 
 	  result.elem (j) = tmp_max;
-	  idx_arg.elem (j) = octave_is_NaN_or_NA (tmp_max) ? 0 : idx_i;
+	  idx_arg.elem (j) = xisnan (tmp_max) ? 0 : idx_i;
         }
     }
 
   return result;
 }
 
 std::ostream&
 operator << (std::ostream& os, const Matrix& a)
diff --git a/liboctave/dNDArray.cc b/liboctave/dNDArray.cc
--- a/liboctave/dNDArray.cc
+++ b/liboctave/dNDArray.cc
@@ -584,17 +584,17 @@ bool
 NDArray::too_large_for_float (void) const
 {
   octave_idx_type nel = nelem ();
 
   for (octave_idx_type i = 0; i < nel; i++)
     {
       double val = elem (i);
 
-      if (! (octave_is_NaN_or_NA (val) || xisinf (val))
+      if (! (xisnan (val) || xisinf (val))
 	  && fabs (val) > FLT_MAX)
 	return true;
     }
 
   return false;
 }
 
 // XXX FIXME XXX -- this is not quite the right thing.
@@ -689,35 +689,35 @@ NDArray::max (ArrayN<octave_idx_type>& i
       octave_idx_type idx_j;
 
       double tmp_max = octave_NaN;
 
       for (idx_j = 0; idx_j < x_len; idx_j++)
 	{
 	  tmp_max = elem (idx_j * x_stride + x_offset);
 	  
-	  if (! octave_is_NaN_or_NA (tmp_max))
+	  if (! xisnan (tmp_max))
 	    break;
 	}
 
       for (octave_idx_type j = idx_j+1; j < x_len; j++)
 	{
 	  double tmp = elem (j * x_stride + x_offset);
 
-	  if (octave_is_NaN_or_NA (tmp))
+	  if (xisnan (tmp))
 	    continue;
 	  else if (tmp > tmp_max)
 	    {
 	      idx_j = j;
 	      tmp_max = tmp;
 	    }
 	}
 
       result.elem (i) = tmp_max;
-      idx_arg.elem (i) = octave_is_NaN_or_NA (tmp_max) ? 0 : idx_j;
+      idx_arg.elem (i) = xisnan (tmp_max) ? 0 : idx_j;
     }
 
   return result;
 }
 
 NDArray
 NDArray::min (int dim) const
 {
@@ -764,35 +764,35 @@ NDArray::min (ArrayN<octave_idx_type>& i
       octave_idx_type idx_j;
 
       double tmp_min = octave_NaN;
 
       for (idx_j = 0; idx_j < x_len; idx_j++)
 	{
 	  tmp_min = elem (idx_j * x_stride + x_offset);
 	  
-	  if (! octave_is_NaN_or_NA (tmp_min))
+	  if (! xisnan (tmp_min))
 	    break;
 	}
 
       for (octave_idx_type j = idx_j+1; j < x_len; j++)
 	{
 	  double tmp = elem (j * x_stride + x_offset);
 
-	  if (octave_is_NaN_or_NA (tmp))
+	  if (xisnan (tmp))
 	    continue;
 	  else if (tmp < tmp_min)
 	    {
 	      idx_j = j;
 	      tmp_min = tmp;
 	    }
 	}
 
       result.elem (i) = tmp_min;
-      idx_arg.elem (i) = octave_is_NaN_or_NA (tmp_min) ? 0 : idx_j;
+      idx_arg.elem (i) = xisnan (tmp_min) ? 0 : idx_j;
     }
 
   return result;
 }
 
 NDArray
 NDArray::concat (const NDArray& rb, const Array<octave_idx_type>& ra_idx)
 {
diff --git a/liboctave/dSparse.cc b/liboctave/dSparse.cc
--- a/liboctave/dSparse.cc
+++ b/liboctave/dSparse.cc
@@ -221,27 +221,27 @@ SparseMatrix::max (Array2<octave_idx_typ
 
 	  if (idx_j != nr)
 	    tmp_max = 0.;
 
 	  for (octave_idx_type i = cidx(j); i < cidx(j+1); i++)
 	    {
 	      double tmp = data (i);
 
-	      if (octave_is_NaN_or_NA (tmp))
+	      if (xisnan (tmp))
 		continue;
-	      else if (octave_is_NaN_or_NA (tmp_max) || tmp > tmp_max)
+	      else if (xisnan (tmp_max) || tmp > tmp_max)
 		{
 		  idx_j = ridx (i);
 		  tmp_max = tmp;
 		}
 
 	    }
 
- 	  idx_arg.elem (j) = octave_is_NaN_or_NA (tmp_max) ? 0 : idx_j;
+ 	  idx_arg.elem (j) = xisnan (tmp_max) ? 0 : idx_j;
 	  if (tmp_max != 0.)
 	    nel++;
 	}
 
       result = SparseMatrix (1, nc, nel);
 
       octave_idx_type ii = 0;
       result.xcidx (0) = 0;
@@ -285,17 +285,17 @@ SparseMatrix::max (Array2<octave_idx_typ
       for (octave_idx_type j = 0; j < nc; j++)
 	{
 	  for (octave_idx_type i = cidx(j); i < cidx(j+1); i++)
 	    {
 	      octave_idx_type ir = ridx (i);
 	      octave_idx_type ix = idx_arg.elem (ir);
 	      double tmp = data (i);
 
-	      if (octave_is_NaN_or_NA (tmp))
+	      if (xisnan (tmp))
 		continue;
 	      else if (ix == -1 || tmp > elem (ir, ix))
 		idx_arg.elem (ir) = j;
 	    }
 	}
 
       octave_idx_type nel = 0;
       for (octave_idx_type j = 0; j < nr; j++)
@@ -367,27 +367,27 @@ SparseMatrix::min (Array2<octave_idx_typ
 
 	  if (idx_j != nr)
 	    tmp_min = 0.;
 
 	  for (octave_idx_type i = cidx(j); i < cidx(j+1); i++)
 	    {
 	      double tmp = data (i);
 
-	      if (octave_is_NaN_or_NA (tmp))
+	      if (xisnan (tmp))
 		continue;
-	      else if (octave_is_NaN_or_NA (tmp_min) || tmp < tmp_min)
+	      else if (xisnan (tmp_min) || tmp < tmp_min)
 		{
 		  idx_j = ridx (i);
 		  tmp_min = tmp;
 		}
 
 	    }
 
- 	  idx_arg.elem (j) = octave_is_NaN_or_NA (tmp_min) ? 0 : idx_j;
+ 	  idx_arg.elem (j) = xisnan (tmp_min) ? 0 : idx_j;
 	  if (tmp_min != 0.)
 	    nel++;
 	}
 
       result = SparseMatrix (1, nc, nel);
 
       octave_idx_type ii = 0;
       result.xcidx (0) = 0;
@@ -431,17 +431,17 @@ SparseMatrix::min (Array2<octave_idx_typ
       for (octave_idx_type j = 0; j < nc; j++)
 	{
 	  for (octave_idx_type i = cidx(j); i < cidx(j+1); i++)
 	    {
 	      octave_idx_type ir = ridx (i);
 	      octave_idx_type ix = idx_arg.elem (ir);
 	      double tmp = data (i);
 
-	      if (octave_is_NaN_or_NA (tmp))
+	      if (xisnan (tmp))
 		continue;
 	      else if (ix == -1 || tmp < elem (ir, ix))
 		idx_arg.elem (ir) = j;
 	    }
 	}
 
       octave_idx_type nel = 0;
       for (octave_idx_type j = 0; j < nr; j++)
diff --git a/liboctave/lo-cieee.c b/liboctave/lo-cieee.c
--- a/liboctave/lo-cieee.c
+++ b/liboctave/lo-cieee.c
@@ -80,41 +80,41 @@ isinf (double x)
 }
 
 #endif
 
 int
 lo_ieee_isnan (double x)
 {
 #if defined (HAVE_ISNAN)
-  return isnan (x) ? ! lo_ieee_is_NA (x) : 0;
+  return isnan (x);
 #else
   return 0;
 #endif
 }
 
 int
 lo_ieee_finite (double x)
 {
 #if defined (HAVE_FINITE)
-  return finite (x) != 0 && ! lo_ieee_is_NaN_or_NA (x);
+  return finite (x) != 0 && ! lo_ieee_isnan (x);
 #elif defined (HAVE_ISINF)
-  return (! isinf (x) && ! lo_ieee_is_NaN_or_NA (x));
+  return (! isinf (x) && ! lo_ieee_isnan (x));
 #else
-  return ! lo_ieee_is_NaN_or_NA (x);
+  return ! lo_ieee_isnan (x);
 #endif
 }
 
 int
 lo_ieee_isinf (double x)
 {
 #if defined (HAVE_ISINF)
   return isinf (x);
 #elif defined (HAVE_FINITE)
-  return (! (finite (x) || lo_ieee_is_NaN_or_NA (x)));
+  return (! (finite (x) || lo_ieee_isnan (x)));
 #else
   return 0;
 #endif
 }
 
 int
 lo_ieee_is_NA (double x)
 {
@@ -125,20 +125,17 @@ lo_ieee_is_NA (double x)
 #else
   return 0;
 #endif
 }
 
 int
 lo_ieee_is_NaN_or_NA (double x)
 {
-  /* Although NA really is an IEEE NaN value, lo_ieee_isnan pretends
-     it is not, so we much check both...  */
-
-  return lo_ieee_isnan (x) || lo_ieee_is_NA (x);
+  return lo_ieee_isnan (x);
 }
 
 double
 lo_ieee_inf_value (void)
 {
   return octave_Inf;
 }
 
diff --git a/liboctave/lo-ieee.h b/liboctave/lo-ieee.h
--- a/liboctave/lo-ieee.h
+++ b/liboctave/lo-ieee.h
@@ -59,17 +59,17 @@ extern int isnan (double);
 extern int isinf (double);
 #endif
 
 extern int lo_ieee_isnan (double x);
 extern int lo_ieee_finite (double x);
 extern int lo_ieee_isinf (double x);
 
 extern int lo_ieee_is_NA (double);
-extern int lo_ieee_is_NaN_or_NA (double);
+extern int lo_ieee_is_NaN_or_NA (double) GCC_ATTR_DEPRECATED;
 
 extern double lo_ieee_inf_value (void);
 extern double lo_ieee_na_value (void);
 extern double lo_ieee_nan_value (void);
 
 extern int lo_ieee_signbit (double);
 
 #ifdef	__cplusplus
diff --git a/liboctave/lo-mappers.cc b/liboctave/lo-mappers.cc
--- a/liboctave/lo-mappers.cc
+++ b/liboctave/lo-mappers.cc
@@ -124,54 +124,54 @@ bool
 octave_is_NA (double x)
 {
   return lo_ieee_is_NA (x);
 }
 
 bool
 octave_is_NaN_or_NA (double x)
 {
-  return lo_ieee_is_NaN_or_NA (x);
+  return lo_ieee_isnan (x);
 }
 
 // (double, double) -> double mappers.
 
 // XXX FIXME XXX -- need to handle NA too?
 
 double
 xmin (double x, double y)
 {
   if (x < y)
     return x;
 
   if (y <= x)
     return y;
 
-  if (octave_is_NaN_or_NA (x) && ! octave_is_NaN_or_NA (y))
+  if (xisnan (x) && ! xisnan (y))
     return y;
-  else if (octave_is_NaN_or_NA (y) && ! octave_is_NaN_or_NA (x))
+  else if (xisnan (y) && ! xisnan (x))
     return x;
   else if (octave_is_NA (x) || octave_is_NA (y))
     return octave_NA;
   else
     return octave_NaN;
 }
 
 double
 xmax (double x, double y)
 {
   if (x > y)
     return x;
 
   if (y >= x)
     return y;
 
-  if (octave_is_NaN_or_NA (x) && ! octave_is_NaN_or_NA (y))
+  if (xisnan (x) && ! xisnan (y))
     return y;
-  else if (octave_is_NaN_or_NA (y) && ! octave_is_NaN_or_NA (x))
+  else if (xisnan (y) && ! xisnan (x))
     return x;
   else if (octave_is_NA (x) || octave_is_NA (y))
     return octave_NA;
   else
     return octave_NaN;
 }
 
 // complex -> complex mappers.
@@ -257,18 +257,18 @@ xisnan (const Complex& x)
 }
 
 bool
 xfinite (const Complex& x)
 {
   double rx = real (x);
   double ix = imag (x);
 
-  return (xfinite (rx) && ! octave_is_NaN_or_NA (rx)
-	  && xfinite (ix) && ! octave_is_NaN_or_NA (ix));
+  return (xfinite (rx) && ! xisnan (rx)
+	  && xfinite (ix) && ! xisnan (ix));
 }
 
 bool
 xisinf (const Complex& x)
 {
   return (xisinf (real (x)) || xisinf (imag (x)));
 }
 
@@ -276,17 +276,17 @@ bool
 octave_is_NA (const Complex& x)
 {
   return (octave_is_NA (real (x)) || octave_is_NA (imag (x)));
 }
 
 bool
 octave_is_NaN_or_NA (const Complex& x)
 {
-  return (octave_is_NaN_or_NA (real (x)) || octave_is_NaN_or_NA (imag (x)));
+  return (xisnan (real (x)) || xisnan (imag (x)));
 }
 
 // (complex, complex) -> complex mappers.
 
 // XXX FIXME XXX -- need to handle NA too?
 
 Complex
 xmin (const Complex& x, const Complex& y)
diff --git a/liboctave/lo-mappers.h b/liboctave/lo-mappers.h
--- a/liboctave/lo-mappers.h
+++ b/liboctave/lo-mappers.h
@@ -34,17 +34,17 @@ extern double real (double x);
 extern double xround (double x);
 extern double signum (double x);
 
 extern bool xisnan (double x);
 extern bool xfinite (double x);
 extern bool xisinf (double x);
 
 extern bool octave_is_NA (double x);
-extern bool octave_is_NaN_or_NA (double x);
+extern bool octave_is_NaN_or_NA (double x) GCC_ATTR_DEPRECATED;
 
 extern double xmin (double x, double y);
 extern double xmax (double x, double y);
 
 extern Complex acos (const Complex& x);
 extern Complex acosh (const Complex& x);
 extern Complex asin (const Complex& x);
 extern Complex asinh (const Complex& x);
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,12 +1,17 @@
+2005-06-14  John W. Eaton  <jwe@octave.org>
+
+	* ls-mat5.cc, mappers.cc, oct-stream.cc, pr-output.cc: Change all
+	uses of octave_is_NaN_or_NA to xisnan.
+
 2005-06-14  Keith Goodman  <kwgoodman@gmail.com>
 
-	* input.cc (get_user_input): Renamed debug commands to dbnext, dbstep,
-	and dbcont.
+	* input.cc (get_user_input): Renamed debug commands to dbnext,
+	dbstep, and dbcont.
 	* pt.cc: Renamed dbg_next to dbnext in comment string.
 	* pt.h: Renamed dbg_next to dbnext in comment string.
 
 2005-06-14  David Bateman  <dbateman@free.fr>
 
 	* pt-arg-list.cc (F__end__): Return 1 for dimensions larger than ndim.
 
 2005-06-14  John W. Eaton  <jwe@octave.org>
diff --git a/src/ls-mat5.cc b/src/ls-mat5.cc
--- a/src/ls-mat5.cc
+++ b/src/ls-mat5.cc
@@ -1238,17 +1238,17 @@ save_mat5_array_length (const double* va
 
       if (save_as_floats)
 	{
 	  bool too_large_for_float = false;
 	  for (int i = 0; i < nel; i++)
 	    {
 	      double tmp = val [i];
 
-	      if (! (octave_is_NaN_or_NA (tmp) || xisinf (tmp))
+	      if (! (xisnan (tmp) || xisinf (tmp))
 		  && fabs (tmp) > FLT_MAX)
 		{
 		  too_large_for_float = true;
 		  break;
 		}
 	    }
 
 	  if (!too_large_for_float)
diff --git a/src/mappers.cc b/src/mappers.cc
--- a/src/mappers.cc
+++ b/src/mappers.cc
@@ -460,51 +460,36 @@ Return 1 for printable characters (but n
 @deftypefn {Mapping Function} {} islower (@var{s})\n\
 Return 1 for characters that are lower case letters.\n\
 @end deftypefn");
 
   DEFUN_MAPPER (isna, 0, octave_is_NA, octave_is_NA, 0, 0, 0, 0.0, 0.0, 0, 0,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} isna (@var{x})\n\
 Return 1 for elements of @var{x} that are NA (missing) values and zero\n\
-otherwise. For example,\n\
+otherwise.  For example,\n\
 \n\
 @example\n\
 @group\n\
 is_NA ([13, Inf, NA, NaN])\n\
      @result{} [ 0, 0, 1, 0 ]\n\
 @end group\n\
 @end example\n\
 @end deftypefn");
 
-  DEFUN_MAPPER (is_nan_or_na, 0, octave_is_NaN_or_NA,
-		octave_is_NaN_or_NA, 0, 0, 0, 0.0, 0.0, 0, 0,
-    "-*- texinfo -*-\n\
-@deftypefn {Mapping Function} {} is_nan_or_na (@var{x})\n\
-Return 1 for elements of @var{x} that are NaN or NA (missing) values\n\
-and zero otherwise. For example,\n\
-\n\
-@example\n\
-@group\n\
-is_NAN_or_NA ([13, Inf, NA, NaN])\n\
-     @result{} [ 0, 0, 1, 1 ]\n\
-@end group\n\
-@end example\n\
-@end deftypefn");
-
   DEFUN_MAPPER (isnan, 0, xisnan, xisnan, 0, 0, 0, 0.0, 0.0, 0, 0,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} isnan (@var{x})\n\
 Return 1 for elements of @var{x} that are NaN values and zero\n\
-otherwise. For example,\n\
+otherwise.  NA values are also considered NaN values.  For example,\n\
 \n\
 @example\n\
 @group\n\
 isnan ([13, Inf, NA, NaN])\n\
-     @result{} [ 0, 0, 0, 1 ]\n\
+     @result{} [ 0, 0, 1, 1 ]\n\
 @end group\n\
 @end example\n\
 @end deftypefn");
 
   DEFUN_MAPPER (isprint, xisprint, 0, 0, 0, 0, 0, 0.0, 0.0, 0, 0,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} isprint (@var{s})\n\
 Return 1 for printable characters (including the space character).\n\
diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -65,17 +65,17 @@ convert_to_valid_int (const octave_value
   int retval = 0;
 
   conv_err = 0;
 
   double dval = tc.double_value ();
 
   if (! error_state)
     {
-      if (! lo_ieee_is_NaN_or_NA (dval))
+      if (! lo_ieee_isnan (dval))
 	{
 	  int ival = NINT (dval);
 
 	  if (ival == dval)
 	    retval = ival;
 	  else
 	    conv_err = 3;
 	}
@@ -88,17 +88,17 @@ convert_to_valid_int (const octave_value
   return retval;
 }
 
 static int
 get_size (double d, const std::string& who)
 {
   int retval = -1;
 
-  if (! lo_ieee_is_NaN_or_NA (d))
+  if (! lo_ieee_isnan (d))
     {
       if (! xisinf (d))
 	{
 	  if (d >= 0.0)
 	    retval = NINT (d);
 	  else
 	    ::error ("%s: negative value invalid as size specification",
 		     who.c_str ());
@@ -2553,29 +2553,29 @@ octave_base_stream::do_printf (printf_fo
 		    break;
 		}
 	      else
 		{
 		  double val = val_cache.double_value ();
 
 		  if (val_cache)
 		    {
-		      if (lo_ieee_is_NaN_or_NA (val) || xisinf (val)
+		      if (lo_ieee_isnan (val) || xisinf (val)
 			  || ((val > INT_MAX || val < INT_MIN)
 			      && (elt->type == 'd'
 				  || elt->type == 'i'
 				  || elt->type == 'c'
 				  || elt->type == 'o'
 				  || elt->type == 'x'
 				  || elt->type == 'X'
 				  || elt->type == 'u')))
 			{
 			  std::string tfmt = fmt;
 
-			  if (lo_ieee_is_NaN_or_NA (val) || xisinf (val))
+			  if (lo_ieee_isnan (val) || xisinf (val))
 			    {
 			      tfmt.replace (tfmt.rfind (elt->type), 1, 1, 's');
 
 			      const char *tval = xisinf (val)
 				? (val < 0 ? "-Inf" : "Inf")
 				: (lo_ieee_is_NA (val) ? "NA" : "NaN");
 
 			      retval += do_printf_conv (os, tfmt.c_str (),
diff --git a/src/pr-output.cc b/src/pr-output.cc
--- a/src/pr-output.cc
+++ b/src/pr-output.cc
@@ -254,17 +254,17 @@ pr_min_internal (const Matrix& m)
   octave_idx_type nc = m.columns ();
 
   double result = DBL_MAX;
 
   for (octave_idx_type j = 0; j < nc; j++)
     for (octave_idx_type i = 0; i < nr; i++)
       {
 	double val = m(i,j);
-	if (xisinf (val) || octave_is_NaN_or_NA (val))
+	if (xisinf (val) || xisnan (val))
 	  continue;
 
 	if (val < result)
 	  result = val;
       }
 
   return result;
 }
@@ -365,17 +365,17 @@ set_format (double d, int& fw)
   curr_real_fmt = 0;
   curr_imag_fmt = 0;
 
   if (free_format)
     return;
 
   bool sign = (d < 0.0);
 
-  bool inf_or_nan = (xisinf (d) || octave_is_NaN_or_NA (d));
+  bool inf_or_nan = (xisinf (d) || xisnan (d));
 
   bool int_only = (! inf_or_nan && D_NINT (d) == d);
 
   double d_abs = d < 0.0 ? -d : d;
 
   int digits = (inf_or_nan || d_abs == 0.0)
     ? 0 : static_cast<int> (floor (log10 (d_abs) + 1.0));
 
@@ -2954,17 +2954,17 @@ fixed_point_format (void)
   return 0;
 }
 
 static int
 output_max_field_width (void)
 {
   double val;
   if (builtin_real_scalar_variable ("output_max_field_width", val)
-      && ! octave_is_NaN_or_NA (val))
+      && ! xisnan (val))
     {
       int ival = NINT (val);
       if (ival > 0 && ival == val)
 	{
 	  Voutput_max_field_width = ival;
 	  return 0;
 	}
     }
@@ -2972,17 +2972,17 @@ output_max_field_width (void)
   return -1;
 }
 
 static int
 output_precision (void)
 {
   double val;
   if (builtin_real_scalar_variable ("output_precision", val)
-      && ! octave_is_NaN_or_NA (val))
+      && ! xisnan (val))
     {
       int ival = NINT (val);
       if (ival >= 0 && ival == val)
 	{
 	  Voutput_precision = ival;
 	  return 0;
 	}
     }
