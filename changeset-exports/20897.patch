# HG changeset patch
# User Rik <rik@octave.org>
# Date 1450136079 28800
#      Mon Dec 14 15:34:39 2015 -0800
# Node ID 9aad16a799c941536b253b98f1263bb61de679e2
# Parent  5e16d687a7018d78b4f9db9a22450bae4ea3d176
maint: Replace argc variable name with nargin in C++ code.

* cellfun.cc (Fnum2cell): Remove extra space in nargin declaration.

* error.cc (Fwarning): Rename argc variable to nargin and update code.

* graphics.cc (create): Surround tertiary expression with parentheses before
assignment to variable.

* pager.cc (Fmore): Rename argc variable to nargin and update code.  Replace
make_argv() with xstring_value() call.  Make error messages more specific.

* pr-output.cc (Fformat): Return empty octave_value_list rather than declaring
retval and then returning it.

* variables.cc (Fwho, Fwhos): Remove unused variable retval.
* variables.cc (Fclear): Return empty octave_value_list rather than declaring
retval and then returning it.

* pt-funcall.cc (print_raw): Rename variable "len" to "n" for clarity.

diff --git a/libinterp/corefcn/cellfun.cc b/libinterp/corefcn/cellfun.cc
--- a/libinterp/corefcn/cellfun.cc
+++ b/libinterp/corefcn/cellfun.cc
@@ -1804,17 +1804,17 @@ num2cell ([1,2;3,4],1)\n\
 @end group\n\
 @end example\n\
 \n\
 @seealso{mat2cell}\n\
 @end deftypefn")
 {
   octave_value retval;
 
-  int nargin =  args.length ();
+  int nargin = args.length ();
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
 
   octave_value array = args(0);
 
   Array<int> dimv;
 
diff --git a/libinterp/corefcn/error.cc b/libinterp/corefcn/error.cc
--- a/libinterp/corefcn/error.cc
+++ b/libinterp/corefcn/error.cc
@@ -1464,35 +1464,34 @@ with single quotes, as long as there are
 disable escape sequence expansion use a second backslash before the sequence\n\
 (e.g., @qcode{\"@xbackslashchar{}@xbackslashchar{}n\"}) or use the\n\
 @code{regexptranslate} function.\n\
 @seealso{warning_ids, lastwarn, error}\n\
 @end deftypefn")
 {
   octave_value retval;
 
-  int argc = args.length () + 1;
-
+  int nargin = args.length ();
   bool done = false;
 
-  if (argc > 1 && args.all_strings_p ())
+  if (nargin > 0 && args.all_strings_p ())
     {
       string_vector argv = args.make_argv ("warning");
 
       std::string arg1 = argv(1);
       std::string arg2 = "all";
 
-      if (argc >= 3)
+      if (nargin >= 2)
         arg2 = argv(2);
 
       if (arg1 == "on" || arg1 == "off" || arg1 == "error")
         {
           octave_map old_warning_options = warning_options;
 
-          if (argc == 4 && argv(3) == "local"
+          if (nargin == 3 && argv(3) == "local"
               && ! symbol_table::at_top_level ())
             {
               symbol_table::scope_id scope
                 = octave_call_stack::current_scope ();
 
               symbol_table::context_id context
                 = octave_call_stack::current_context ();
 
@@ -1552,36 +1551,34 @@ disable escape sequence expansion use a 
               m.contents ("identifier") = ids;
               m.contents ("state") = states;
 
               symbol_table::assign
                 (".saved_warning_states.", m, scope, context);
 
               // Now ignore the "local" argument and continue to
               // handle the current setting.
-              argc--;
+              nargin--;
             }
 
           if (arg2 == "all")
             {
               octave_map tmp;
 
               Cell id (1, 1);
               Cell st (1, 1);
 
               id(0) = arg2;
               st(0) = arg1;
 
-              // Since internal Octave functions are not
-              // compatible, turning all warnings into errors
-              // should leave the state of
+              // Since internal Octave functions are not compatible,
+              // turning all warnings into errors should leave the state of
               // Octave:language-extension alone.
 
-              if (arg1 == "error"
-                  && warning_options.contains ("identifier"))
+              if (arg1 == "error" && warning_options.contains ("identifier"))
                 {
                   octave_idx_type n = 1;
 
                   Cell tid = warning_options.contents ("identifier");
                   Cell tst = warning_options.contents ("state");
 
                   for (octave_idx_type i = 0; i < tid.numel (); i++)
                     {
@@ -1679,54 +1676,52 @@ disable escape sequence expansion use a 
               retval = tmp;
             }
           else
             retval = warning_query (arg2);
 
           done = true;
         }
     }
-  else if (argc == 1)
+  else if (nargin == 0)
     {
       if (nargout > 0)
         retval = warning_options;
       else
         display_warning_options (octave_stdout);
 
       done = true;
     }
-  else if (argc == 2)
+  else if (nargin == 1)
     {
       octave_value arg = args(0);
 
       octave_map old_warning_options = warning_options;
 
       if (arg.is_map ())
         {
           octave_map m = arg.map_value ();
 
-          if (m.contains ("identifier") && m.contains ("state"))
-            {
-              // Simply step through the struct elements one at a time.
+          if (! m.contains ("identifier") || ! m.contains ("state"))
+            error ("warning: STATE structure must have fields 'identifier' and 'state'");
 
-              Cell ident = m.contents ("identifier");
-              Cell state = m.contents ("state");
+          // Simply step through the struct elements one at a time.
 
-              octave_idx_type nel = ident.numel ();
+          Cell ident = m.contents ("identifier");
+          Cell state = m.contents ("state");
 
-              for (octave_idx_type i = 0; i < nel; i++)
-                {
-                  std::string tst = state(i).string_value ();
-                  std::string tid = ident(i).string_value ();
+          octave_idx_type nel = ident.numel ();
 
-                  set_warning_option (tst, tid);
-                }
+          for (octave_idx_type i = 0; i < nel; i++)
+            {
+              std::string tst = state(i).string_value ();
+              std::string tid = ident(i).string_value ();
+
+              set_warning_option (tst, tid);
             }
-          else
-            error ("warning: STATE structure must have fields 'identifier' and 'state'");
 
           done = true;
 
           if (nargout > 0)
             retval = old_warning_options;
         }
     }
 
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -1694,18 +1694,18 @@ property::create (const std::string& nam
   if (type.compare ("string"))
     {
       std::string sv = (args.length () > 0 ? args(0).string_value () : "");
 
       retval = property (new string_property (name, h, sv));
     }
   else if (type.compare ("any"))
     {
-      octave_value ov = args.length () > 0 ? args(0)
-                                           : octave_value (Matrix ());
+      octave_value ov = (args.length () > 0 ? args(0)
+                                            : octave_value (Matrix ()));
 
       retval = property (new any_property (name, h, ov));
     }
   else if (type.compare ("radio"))
     {
       if (args.length () < 1)
         error ("addproperty: missing possible values for radio property");
       else
diff --git a/libinterp/corefcn/pager.cc b/libinterp/corefcn/pager.cc
--- a/libinterp/corefcn/pager.cc
+++ b/libinterp/corefcn/pager.cc
@@ -603,40 +603,36 @@ DEFUN (more, args, ,
 Turn output pagination on or off.\n\
 \n\
 Without an argument, @code{more} toggles the current state.\n\
 \n\
 The current state can be determined via @code{page_screen_output}.\n\
 @seealso{page_screen_output, page_output_immediately, PAGER, PAGER_FLAGS}\n\
 @end deftypefn")
 {
-  octave_value_list retval;
+  int nargin = args.length ();
 
-  int argc = args.length () + 1;
-
-  if (argc < 1 || argc > 2)
+  if (nargin > 1)
     print_usage ();
 
-  string_vector argv = args.make_argv ("more");
-
-  if (argc == 2)
+  if (nargin > 0)
     {
-      std::string arg = argv[1];
+      std::string arg = args(0).xstring_value ("more: argument must be string \"on\" or \"off\"");
 
       if (arg == "on")
         Vpage_screen_output = true;
       else if (arg == "off")
         Vpage_screen_output = false;
       else
-        error ("more: unrecognized argument '%s'", arg.c_str ());
+        error ("more: argument must be \"on\" or \"off\"");
     }
   else
     Vpage_screen_output = ! Vpage_screen_output;
 
-  return retval;
+  return octave_value_list ();
 }
 
 DEFUN (terminal_size, , ,
        "-*- texinfo -*-\n\
 @deftypefn {} {} terminal_size ()\n\
 Return a two-element row vector containing the current size of the terminal\n\
 window in characters (rows and columns).\n\
 @seealso{list_in_columns}\n\
diff --git a/libinterp/corefcn/pr-output.cc b/libinterp/corefcn/pr-output.cc
--- a/libinterp/corefcn/pr-output.cc
+++ b/libinterp/corefcn/pr-output.cc
@@ -4028,25 +4028,23 @@ matrices producing more compact output w
 \n\
 @item loose\n\
 Insert blank lines above and below column number labels and between matrices\n\
 to produce a more readable output with less data per page.  (default).\n\
 @end table\n\
 @seealso{fixed_point_format, output_max_field_width, output_precision, split_long_rows, print_empty_dimensions, rats}\n\
 @end deftypefn")
 {
-  octave_value_list retval;
-
   int argc = args.length () + 1;
 
   string_vector argv = args.make_argv ("format");
 
   set_format_style (argc, argv);
 
-  return retval;
+  return octave_value_list ();
 }
 
 DEFUN (__compactformat__, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {} {@var{val} =} __compactformat__ ()\n\
 @deftypefnx {} {} __compactformat__ (@var{TRUE|FALSE})\n\
 Undocumented internal function\n\
 @end deftypefn")
diff --git a/libinterp/corefcn/variables.cc b/libinterp/corefcn/variables.cc
--- a/libinterp/corefcn/variables.cc
+++ b/libinterp/corefcn/variables.cc
@@ -1815,18 +1815,16 @@ specified file are listed.  No patterns 
 from a file.\n\
 @end table\n\
 \n\
 If called as a function, return a cell array of defined variable names\n\
 matching the given patterns.\n\
 @seealso{whos, isglobal, isvarname, exist, regexp}\n\
 @end deftypefn")
 {
-  octave_value retval;
-
   if (nargout > 1)
     print_usage ();
 
   int argc = args.length () + 1;
 
   string_vector argv = args.make_argv ("who");
 
   return do_who (argc, argv, nargout == 1);
@@ -1891,18 +1889,16 @@ the function @code{whos_line_format}.\n\
 \n\
 If @code{whos} is called as a function, return a struct array of defined\n\
 variable names matching the given patterns.  Fields in the structure\n\
 describing each variable are: name, size, bytes, class, global, sparse,\n\
 complex, nesting, persistent.\n\
 @seealso{who, whos_line_format}\n\
 @end deftypefn")
 {
-  octave_value retval;
-
   if (nargout > 1)
     print_usage ();
 
   int argc = args.length () + 1;
 
   string_vector argv = args.make_argv ("whos");
 
   return do_who (argc, argv, nargout == 1, true);
@@ -2371,18 +2367,16 @@ The arguments are treated as regular exp
 match will be cleared.\n\
 @end table\n\
 \n\
 With the exception of @code{exclusive}, all long options can be used\n\
 without the dash as well.\n\
 @seealso{who, whos, exist}\n\
 @end deftypefn")
 {
-  octave_value_list retval;
-
   int argc = args.length () + 1;
 
   string_vector argv = args.make_argv ("clear");
 
   if (argc == 1)
     {
       do_clear_globals (argv, argc, true);
       do_clear_variables (argv, argc, true);
@@ -2453,28 +2447,25 @@ without the dash as well.\n\
             }
           else
             break;
         }
 
       if (idx <= argc)
         {
           if (! have_dash_option)
-            {
-              do_matlab_compatible_clear (argv, argc, idx);
-            }
+            do_matlab_compatible_clear (argv, argc, idx);
           else
             {
               if (clear_all)
                 {
                   maybe_warn_exclusive (exclusive);
 
                   if (++idx < argc)
-                    warning
-                      ("clear: ignoring extra arguments after -all");
+                    warning ("clear: ignoring extra arguments after -all");
 
                   symbol_table::clear_all ();
                 }
               else if (have_regexp)
                 {
                   do_clear_variables (argv, argc, idx, exclusive, true);
                 }
               else if (clear_functions)
@@ -2500,17 +2491,17 @@ without the dash as well.\n\
                   do_clear_symbols (argv, argc, idx, exclusive);
                 }
             }
 
           octave_link::set_workspace ();
         }
     }
 
-  return retval;
+  return octave_value_list ();
 }
 
 DEFUN (whos_line_format, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {} {@var{val} =} whos_line_format ()\n\
 @deftypefnx {} {@var{old_val} =} whos_line_format (@var{new_val})\n\
 @deftypefnx {} {} whos_line_format (@var{new_val}, \"local\")\n\
 Query or set the format string used by the command @code{whos}.\n\
diff --git a/libinterp/parse-tree/pt-funcall.cc b/libinterp/parse-tree/pt-funcall.cc
--- a/libinterp/parse-tree/pt-funcall.cc
+++ b/libinterp/parse-tree/pt-funcall.cc
@@ -47,22 +47,22 @@ tree_funcall::print_raw (std::ostream& o
     }
   else
     {
       octave_function *fp = fcn.function_value ();
       std::string nm = fp ? fp->name () : std::string ("<invalid-function>");
 
       os << nm << " (";
 
-      octave_idx_type len = args.length ();
-      for (octave_idx_type i = 0; i < len; i++)
+      octave_idx_type n = args.length ();
+      for (octave_idx_type i = 0; i < n; i++)
         {
           args(i).print_raw (os, pr_as_read_syntax);
 
-          if (i < len - 1)
+          if (i < n - 1)
             os << ", ";
         }
 
       os << ")";
     }
 }
 
 tree_funcall *
