# HG changeset patch
# User Kai T. Ohlhus <k.ohlhus@gmail.com>
# Date 1507903062 -7200
#      Fri Oct 13 15:57:42 2017 +0200
# Node ID af577de75e687eecebefc3192b2bf8dd299d470c
# Parent  0b7662d8bd023d65b4a3d2b5a9f9f6c123132d8c
maint: libinterp/octave-value/ov-java.cc: Clean up code.  No function changes.

- Try to stick to 79 chars, if readabilty is not violated.
- Sort headers.

diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -24,39 +24,39 @@ along with Octave; see the file COPYING.
 //! @file ov-java.cc
 //!
 //! Provides Octave's Java interface.
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
-#include "defun.h"
-#include "error.h"
-#include "errwarn.h"
-#include "fpucw-wrappers.h"
-
 #if defined (HAVE_WINDOWS_H)
 #  include <windows.h>
 #endif
 
 #include <algorithm>
 #include <map>
 #include <iostream>
 #include <fstream>
 #include <string>
+#include <vector>
 
 #include <clocale>
 
 #include "Cell.h"
 #include "builtin-defun-decls.h"
 #include "cmd-edit.h"
 #include "defaults.h"
+#include "defun.h"
+#include "error.h"
+#include "errwarn.h"
 #include "file-ops.h"
 #include "file-stat.h"
+#include "fpucw-wrappers.h"
 #include "load-path.h"
 #include "oct-env.h"
 #include "oct-shlib.h"
 #include "ov-java.h"
 #include "parse.h"
 #include "variables.h"
 
 #if defined (HAVE_JAVA)
@@ -245,17 +245,18 @@ namespace octave
 
           while (! js.eof () && ! js.fail ())
             {
               std::getline (js, line);
 
               if (line.find ('-') == 0)
                 java_opts.push_back (line);
               else if (line.length () > 0 && Vdebug_java)
-                std::cerr << "invalid JVM option, skipping: " << line << std::endl;
+                std::cerr << "invalid JVM option, skipping: " << line
+                                                              << std::endl;
             }
         }
     }
 
   private:
 
     void clean (void)
     {
@@ -416,31 +417,25 @@ read_classpath_txt (const std::string& f
 
   if (! fs.bad () && ! fs.fail ())
     {
       std::string line;
 
       while (! fs.eof () && ! fs.fail ())
         {
           std::getline (fs, line);
-
-          if (line.length () > 0)
+          if (line.length () > 0 && line[0] != '#' && line[0] != '%')
             {
-              if (line[0] == '#' || line[0] == '%')
-                ; // skip comments
-              else
-                {
-                  // prepend separator character
-                  classpath.append (octave::directory_path::path_sep_str ());
-
-                  // append content of line without whitespace
-                  int last = line.find_last_not_of (" \t\f\v\r\n");
-
-                  classpath.append (octave::sys::file_ops::tilde_expand (line.substr (0, last+1)));
-                }
+              // prepend separator character
+              classpath.append (octave::directory_path::path_sep_str ());
+
+              // append content of line without whitespace
+              int last = line.find_last_not_of (" \t\f\v\r\n");
+
+              classpath.append (octave::sys::file_ops::tilde_expand (line.substr (0, last+1)));
             }
         }
     }
 
   return (classpath);
 }
 
 
@@ -484,26 +479,26 @@ initial_class_path (void)
           retval = jar_file;
 
           // The base classpath has been set.
           // Try to find an optional file specifying classpaths in 3 places.
           // 1) Current directory
           // 2) User's home directory
           // 3) Octave installation directory where octave.jar resides
 
-          std::string cwd = octave::sys::env::get_current_directory ();
+          std::string cwd      = octave::sys::env::get_current_directory ();
           std::string home_dir = octave::sys::env::get_home_directory ();
 
-          // The filename is "javaclasspath.txt", but historically
-          // has been "classpath.txt" so both are supported.
-          std::string cp_list[] = {"javaclasspath.txt", "classpath.txt"};
-
-          for (int i=0; i<2; i++)
+          // The filename is "javaclasspath.txt", but historically has been
+          // "classpath.txt" so both are supported.
+          std::vector<std::string> cp_list = {"javaclasspath.txt",
+                                              "classpath.txt"};
+
+          for (std::string filename : cp_list)
             {
-              std::string filename = cp_list[i];
               std::string cp_file = filename;
               octave::sys::file_stat cp_exists;
 
               // Try to find classpath file in the current directory.
 
               cp_exists = octave::sys::file_stat (cp_file);
               if (cp_exists)
                 {
@@ -652,17 +647,18 @@ initialize_jvm (void)
 
   if (! lib)
     error ("unable to load Java Runtime Environment from %s",
            jvm_lib_path.c_str ());
 
   JNI_CreateJavaVM_t create_vm =
     reinterpret_cast<JNI_CreateJavaVM_t> (lib.search ("JNI_CreateJavaVM"));
   JNI_GetCreatedJavaVMs_t get_vm =
-    reinterpret_cast<JNI_GetCreatedJavaVMs_t> (lib.search ("JNI_GetCreatedJavaVMs"));
+    reinterpret_cast<JNI_GetCreatedJavaVMs_t>
+      (lib.search ("JNI_GetCreatedJavaVMs"));
 
   if (! create_vm)
     error ("unable to find JNI_CreateJavaVM in %s", jvm_lib_path.c_str ());
 
   if (! get_vm)
     error ("unable to find JNI_GetCreatedJavaVMs in %s", jvm_lib_path.c_str ());
 
   if (get_vm (&jvm, 1, &nVMs) == 0 && nVMs > 0)
@@ -898,17 +894,18 @@ check_exception (JNIEnv *jni_env)
         jni_env->ExceptionDescribe ();
 
       jni_env->ExceptionClear ();
 
       jclass_ref jcls (jni_env, jni_env->GetObjectClass (ex));
       jmethodID mID = jni_env->GetMethodID (jcls, "toString",
                                             "()Ljava/lang/String;");
       jstring_ref js (jni_env,
-                      reinterpret_cast<jstring> (jni_env->CallObjectMethod (ex, mID)));
+                      reinterpret_cast<jstring> (jni_env->CallObjectMethod (ex,
+                                                                            mID)));
       std::string msg = jstring_to_string (jni_env, js);
 
       error ("[java] %s", msg.c_str ());
     }
   else
     retval = Matrix ();
 
   return retval;
@@ -1054,17 +1051,17 @@ make_java_index (JNIEnv *jni_env, const 
         jni_env->ReleaseIntArrayElements (i_array, buf, 0);
         jni_env->SetObjectArrayElement (retval, i, i_array);
 
         check_exception (jni_env);
       }
     catch (octave::index_exception& e)
       {
         // Rethrow to allow more info to be reported later.
-        e.set_pos_if_unset (idx.length (), i+1);
+        e.set_pos_if_unset (idx.length (), i + 1);
         throw;
       }
 
   return retval;
 }
 
 static octave_value
 get_array_elements (JNIEnv *jni_env, jobject jobj,
@@ -1156,17 +1153,18 @@ get_invoke_list (JNIEnv *jni_env, void *
                                                      "()Ljava/lang/String;");
       jmethodID f_getName_ID = jni_env->GetMethodID (fCls, "getName",
                                                      "()Ljava/lang/String;");
 
       for (int i = 0; i < mLen; i++)
         {
           jobject_ref meth (jni_env, jni_env->GetObjectArrayElement (mList, i));
           jstring_ref methName (jni_env, reinterpret_cast<jstring>
-                                (jni_env->CallObjectMethod (meth, m_getName_ID)));
+                                 (jni_env->CallObjectMethod (meth,
+                                                             m_getName_ID)));
           name_list.push_back (jstring_to_string (jni_env, methName));
         }
 
       for (int i = 0; i < fLen; i++)
         {
           jobject_ref field (jni_env,
                              jni_env->GetObjectArrayElement (fList, i));
           jstring_ref fieldName (jni_env,
@@ -1221,17 +1219,18 @@ convert_to_string (JNIEnv *jni_env, jobj
             }
           else
             {
               cls = jni_env->FindClass ("java/lang/Object");
               jmethodID mID = jni_env->GetMethodID (cls, "toString",
                                                     "()Ljava/lang/String;");
               jstring_ref js (jni_env,
                               reinterpret_cast<jstring>
-                              (jni_env->CallObjectMethod (java_object, mID)));
+                                (jni_env->CallObjectMethod (java_object,
+                                                            mID)));
 
               if (js)
                 retval = octave_value (jstring_to_string (jni_env, js), type);
               else
                 retval = check_exception (jni_env);
             }
         }
       else
@@ -1381,17 +1380,18 @@ box (JNIEnv *jni_env, void *jobj_arg, vo
           cls = find_octave_class (jni_env, "org/octave/Matrix");
 
           if (jni_env->IsInstanceOf (jobj, cls))
             {
               jmethodID mID = jni_env->GetMethodID (cls, "getDims", "()[I");
               jintArray_ref iv (jni_env,
                                 reinterpret_cast<jintArray>
                                 (jni_env->CallObjectMethod (jobj, mID)));
-              jint *iv_data = jni_env->GetIntArrayElements (jintArray (iv), nullptr);
+              jint *iv_data = jni_env->GetIntArrayElements (jintArray (iv),
+                                                            nullptr);
               dim_vector dims;
               dims.resize (jni_env->GetArrayLength (jintArray (iv)));
 
               for (int i = 0; i < dims.ndims (); i++)
                 dims(i) = iv_data[i];
 
               jni_env->ReleaseIntArrayElements (jintArray (iv), iv_data, 0);
               mID = jni_env->GetMethodID (cls, "getClassName",
@@ -1403,76 +1403,81 @@ box (JNIEnv *jni_env, void *jobj_arg, vo
               std::string s = jstring_to_string (jni_env, js);
 
               if (s == "double")
                 {
                   NDArray m (dims);
                   mID = jni_env->GetMethodID (cls, "toDouble", "()[D");
                   jdoubleArray_ref dv (jni_env,
                                        reinterpret_cast<jdoubleArray>
-                                       (jni_env->CallObjectMethod (jobj, mID)));
-                  jni_env->GetDoubleArrayRegion (dv, 0,
-                                                 m.numel (),
+                                         (jni_env->CallObjectMethod (jobj,
+                                                                     mID)));
+                  jni_env->GetDoubleArrayRegion (dv, 0, m.numel (),
                                                  m.fortran_vec ());
                   retval = m;
                   break;
                 }
               else if (s == "byte")
                 {
                   if (Vjava_unsigned_autoconversion)
                     {
                       uint8NDArray m (dims);
                       mID = jni_env->GetMethodID (cls, "toByte", "()[B");
                       jbyteArray_ref dv (jni_env,
                                          reinterpret_cast<jbyteArray>
-                                         (jni_env->CallObjectMethod (jobj,
-                                                                     mID)));
+                                           (jni_env->CallObjectMethod (jobj,
+                                                                       mID)));
                       jni_env->GetByteArrayRegion (dv, 0, m.numel (),
                                                    reinterpret_cast<jbyte *>
-                                                   (m.fortran_vec ()));
+                                                     (m.fortran_vec ()));
                       retval = m;
                       break;
                     }
                   else
                     {
                       int8NDArray m (dims);
                       mID = jni_env->GetMethodID (cls, "toByte", "()[B");
                       jbyteArray_ref dv (jni_env,
                                          reinterpret_cast<jbyteArray>
-                                         (jni_env->CallObjectMethod (jobj,
-                                                                     mID)));
+                                           (jni_env->CallObjectMethod (jobj,
+                                                                       mID)));
                       jni_env->GetByteArrayRegion (dv, 0, m.numel (),
                                                    reinterpret_cast<jbyte *>
-                                                   (m.fortran_vec ()));
+                                                     (m.fortran_vec ()));
                       retval = m;
                       break;
                     }
                 }
               else if (s == "integer")
                 {
                   if (Vjava_unsigned_autoconversion)
                     {
                       uint32NDArray m (dims);
                       mID = jni_env->GetMethodID (cls, "toInt", "()[I");
-                      jintArray_ref dv (jni_env, reinterpret_cast<jintArray> (jni_env->CallObjectMethod (jobj, mID)));
-                      jni_env->GetIntArrayRegion (dv, 0, m.numel (), reinterpret_cast<jint *> (m.fortran_vec ()));
+                      jintArray_ref dv (jni_env,
+                                        reinterpret_cast<jintArray>
+                                          (jni_env->CallObjectMethod (jobj,
+                                                                      mID)));
+                      jni_env->GetIntArrayRegion (dv, 0, m.numel (),
+                                                  reinterpret_cast<jint *>
+                                                    (m.fortran_vec ()));
                       retval = m;
                       break;
                     }
                   else
                     {
                       int32NDArray m (dims);
                       mID = jni_env->GetMethodID (cls, "toInt", "()[I");
                       jintArray_ref dv (jni_env,
                                         reinterpret_cast<jintArray>
-                                        (jni_env->CallObjectMethod (jobj,
-                                                                    mID)));
+                                          (jni_env->CallObjectMethod (jobj,
+                                                                      mID)));
                       jni_env->GetIntArrayRegion (dv, 0, m.numel (),
                                                   reinterpret_cast<jint *>
-                                                  (m.fortran_vec ()));
+                                                    (m.fortran_vec ()));
                       retval = m;
                       break;
                     }
                 }
             }
         }
 
       cls = find_octave_class (jni_env, "org/octave/OctaveReference");
@@ -1516,17 +1521,18 @@ box_more (JNIEnv *jni_env, void *jobj_ar
           if (jni_env->IsInstanceOf (jobj, cls))
             {
               jdoubleArray jarr = reinterpret_cast<jdoubleArray> (jobj);
               int len = jni_env->GetArrayLength (jarr);
 
               if (len > 0)
                 {
                   Matrix m (1, len);
-                  jni_env->GetDoubleArrayRegion (jarr, 0, len, m.fortran_vec ());
+                  jni_env->GetDoubleArrayRegion (jarr, 0, len,
+                                                 m.fortran_vec ());
                   retval = m;
                 }
               else
                 retval = Matrix ();
             }
         }
 
       if (retval.is_undefined ())
@@ -1542,18 +1548,18 @@ box_more (JNIEnv *jni_env, void *jobj_ar
               if (rows > 0)
                 {
                   Matrix m;
 
                   for (int r = 0; r < rows; r++)
                     {
                       jdoubleArray_ref row (jni_env,
                                             reinterpret_cast<jdoubleArray>
-                                            (jni_env->GetObjectArrayElement
-                                             (jarr, r)));
+                                              (jni_env->GetObjectArrayElement
+                                                (jarr, r)));
 
                       if (m.isempty ())
                         {
                           cols = jni_env->GetArrayLength (row);
                           m.resize (cols, rows);
                         }
                       jni_env->GetDoubleArrayRegion
                         (row, 0, cols, m.fortran_vec () + r * cols);
@@ -2435,23 +2441,33 @@ octave_java:: do_javaMethod (void *jni_e
 
   JNIEnv *jni_env = TO_JNIENV (jni_env_arg);
 
   if (jni_env)
     {
       jobjectArray_ref arg_objs (jni_env), arg_types (jni_env);
       if (unbox (jni_env, args, arg_objs, arg_types))
         {
-          jclass_ref helperClass (jni_env, find_octave_class (jni_env, "org/octave/ClassHelper"));
-          jmethodID mID = jni_env->GetStaticMethodID (helperClass, "invokeStaticMethod",
+          jclass_ref helperClass (jni_env,
+                                  find_octave_class (jni_env,
+                                                     "org/octave/ClassHelper"));
+          jmethodID mID = jni_env->GetStaticMethodID (helperClass,
+                                                      "invokeStaticMethod",
                                                       "(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;[Ljava/lang/Class;)Ljava/lang/Object;");
-          jstring_ref methName (jni_env, jni_env->NewStringUTF (name.c_str ()));
-          jstring_ref clsName (jni_env, jni_env->NewStringUTF (class_name.c_str ()));
-          jobject_ref resObj (jni_env, jni_env->CallStaticObjectMethod (helperClass, mID,
-                                                                        jstring (clsName), jstring (methName), jobjectArray (arg_objs), jobjectArray (arg_types)));
+          jstring_ref methName (jni_env,
+                                jni_env->NewStringUTF (name.c_str ()));
+          jstring_ref clsName (jni_env,
+                               jni_env->NewStringUTF (class_name.c_str ()));
+          jobject_ref resObj (jni_env,
+                              jni_env->CallStaticObjectMethod (helperClass,
+                                                               mID,
+                                                               jstring (clsName),
+                                                               jstring (methName),
+                                                               jobjectArray (arg_objs),
+                                                               jobjectArray (arg_types)));
           if (resObj)
             retval = box (jni_env, resObj);
           else
             retval = check_exception (jni_env);
         }
 
       octave_set_default_fpucw ();
     }
@@ -2507,22 +2523,30 @@ octave_java::do_javaObject (void *jni_en
   JNIEnv *jni_env = TO_JNIENV (jni_env_arg);
 
   if (jni_env)
     {
       jobjectArray_ref arg_objs (jni_env), arg_types (jni_env);
 
       if (unbox (jni_env, args, arg_objs, arg_types))
         {
-          jclass_ref helperClass (jni_env, find_octave_class (jni_env, "org/octave/ClassHelper"));
-          jmethodID mID = jni_env->GetStaticMethodID (helperClass, "invokeConstructor",
+          jclass_ref helperClass (jni_env,
+                                  find_octave_class (jni_env,
+                                                     "org/octave/ClassHelper"));
+          jmethodID mID = jni_env->GetStaticMethodID (helperClass,
+                                                      "invokeConstructor",
                                                       "(Ljava/lang/String;[Ljava/lang/Object;[Ljava/lang/Class;)Ljava/lang/Object;");
-          jstring_ref clsName (jni_env, jni_env->NewStringUTF (name.c_str ()));
-          jobject_ref resObj (jni_env, jni_env->CallStaticObjectMethod (helperClass, mID,
-                                                                        jstring (clsName), jobjectArray (arg_objs), jobjectArray (arg_types)));
+          jstring_ref clsName (jni_env,
+                               jni_env->NewStringUTF (name.c_str ()));
+          jobject_ref resObj (jni_env,
+                              jni_env->CallStaticObjectMethod (helperClass,
+                                                               mID,
+                                                               jstring (clsName),
+                                                               jobjectArray (arg_objs),
+                                                               jobjectArray (arg_types)));
 
           if (resObj)
             retval = octave_value (new octave_java (resObj, nullptr));
           else
             check_exception (jni_env);
         }
 
       octave_set_default_fpucw ();
@@ -2571,22 +2595,27 @@ octave_java::do_java_get (void *jni_env_
 #if defined (HAVE_JAVA)
 
   octave_value retval;
 
   JNIEnv *jni_env = TO_JNIENV (jni_env_arg);
 
   if (jni_env)
     {
-      jclass_ref helperClass (jni_env, find_octave_class (jni_env, "org/octave/ClassHelper"));
+      jclass_ref helperClass (jni_env,
+                              find_octave_class (jni_env,
+                                                 "org/octave/ClassHelper"));
       jmethodID mID = jni_env->GetStaticMethodID (helperClass, "getField",
           "(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;");
       jstring_ref fName (jni_env, jni_env->NewStringUTF (name.c_str ()));
-      jobject_ref resObj (jni_env, jni_env->CallStaticObjectMethod (helperClass, mID,
-          to_java (), jstring (fName)));
+      jobject_ref resObj (jni_env,
+                          jni_env->CallStaticObjectMethod (helperClass,
+                                                           mID,
+                                                           to_java (),
+                                                           jstring (fName)));
 
       if (resObj)
         retval = box (jni_env, resObj);
       else
         retval = check_exception (jni_env);
 
       octave_set_default_fpucw ();
     }
@@ -2632,23 +2661,28 @@ octave_java::do_java_get (void *jni_env_
 #if defined (HAVE_JAVA)
 
   octave_value retval;
 
   JNIEnv *jni_env = TO_JNIENV (jni_env_arg);
 
   if (jni_env)
     {
-      jclass_ref helperClass (jni_env, find_octave_class (jni_env, "org/octave/ClassHelper"));
-      jmethodID mID = jni_env->GetStaticMethodID (helperClass, "getStaticField",
-          "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;");
+      jclass_ref helperClass (jni_env,
+                              find_octave_class (jni_env,
+                                                 "org/octave/ClassHelper"));
+      jmethodID mID = jni_env->GetStaticMethodID (helperClass,
+                                                  "getStaticField",
+                                                  "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;");
       jstring_ref cName (jni_env, jni_env->NewStringUTF (class_name.c_str ()));
       jstring_ref fName (jni_env, jni_env->NewStringUTF (name.c_str ()));
-      jobject_ref resObj (jni_env, jni_env->CallStaticObjectMethod (helperClass, mID,
-          jstring (cName), jstring (fName)));
+      jobject_ref resObj (jni_env,
+                          jni_env->CallStaticObjectMethod (helperClass, mID,
+                                                           jstring (cName),
+                                                           jstring (fName)));
       if (resObj)
         retval = box (jni_env, resObj);
       else
         retval = check_exception (jni_env);
 
       octave_set_default_fpucw ();
     }
 
@@ -2701,21 +2735,24 @@ octave_java::do_java_set (void *jni_env_
 
   if (jni_env)
     {
       jobject_ref jobj (jni_env);
       jclass_ref jcls (jni_env);
 
       if (unbox (jni_env, val, jobj, jcls))
         {
-          jclass_ref helperClass (jni_env, find_octave_class (jni_env, "org/octave/ClassHelper"));
+          jclass_ref helperClass (jni_env,
+                                  find_octave_class (jni_env,
+                                                     "org/octave/ClassHelper"));
           jmethodID mID = jni_env->GetStaticMethodID (helperClass, "setField",
                                                       "(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)V");
           jstring_ref fName (jni_env, jni_env->NewStringUTF (name.c_str ()));
-          jni_env->CallStaticObjectMethod (helperClass, mID, to_java (), jstring (fName), jobject (jobj));
+          jni_env->CallStaticObjectMethod (helperClass, mID, to_java (),
+                                           jstring (fName), jobject (jobj));
           check_exception (jni_env);
         }
 
       octave_set_default_fpucw ();
     }
 
   return retval;
 
@@ -2765,22 +2802,27 @@ octave_java::do_java_set (void *jni_env_
 
   if (jni_env)
     {
       jobject_ref jobj (jni_env);
       jclass_ref jcls (jni_env);
 
       if (unbox (jni_env, val, jobj, jcls))
         {
-          jclass_ref helperClass (jni_env, find_octave_class (jni_env, "org/octave/ClassHelper"));
-          jmethodID mID = jni_env->GetStaticMethodID (helperClass, "setStaticField",
+          jclass_ref helperClass (jni_env,
+                                  find_octave_class (jni_env,
+                                                     "org/octave/ClassHelper"));
+          jmethodID mID = jni_env->GetStaticMethodID (helperClass,
+                                                      "setStaticField",
                                                       "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V");
-          jstring_ref cName (jni_env, jni_env->NewStringUTF (class_name.c_str ()));
+          jstring_ref cName (jni_env,
+                             jni_env->NewStringUTF (class_name.c_str ()));
           jstring_ref fName (jni_env, jni_env->NewStringUTF (name.c_str ()));
-          jni_env->CallStaticObjectMethod (helperClass, mID, jstring (cName), jstring (fName), jobject (jobj));
+          jni_env->CallStaticObjectMethod (helperClass, mID, jstring (cName),
+                                           jstring (fName), jobject (jobj));
           check_exception (jni_env);
         }
 
       octave_set_default_fpucw ();
     }
 
   return retval;
 
@@ -2836,25 +2878,30 @@ octave_java::init (void *jobj_arg, void 
     {
       if (jobj)
         java_object = current_env->NewGlobalRef (jobj);
 
       if (jcls)
         java_class = current_env->NewGlobalRef (jcls);
       else if (java_object)
         {
-          jclass_ref ocls (current_env, current_env->GetObjectClass (TO_JOBJECT (java_object)));
+          jclass_ref ocls (current_env,
+                           current_env->GetObjectClass(TO_JOBJECT (java_object)));
           java_class = current_env->NewGlobalRef (jclass (ocls));
         }
 
       if (java_class)
         {
-          jclass_ref clsCls (current_env, current_env->GetObjectClass (TO_JCLASS (java_class)));
-          jmethodID mID = current_env->GetMethodID (clsCls, "getCanonicalName", "()Ljava/lang/String;");
-          jobject_ref resObj (current_env, current_env->CallObjectMethod (TO_JCLASS (java_class), mID));
+          jclass_ref clsCls (current_env,
+                             current_env->GetObjectClass (TO_JCLASS (java_class)));
+          jmethodID mID = current_env->GetMethodID (clsCls,
+                                                    "getCanonicalName",
+                                                    "()Ljava/lang/String;");
+          jobject_ref resObj (current_env,
+                              current_env->CallObjectMethod (TO_JCLASS (java_class), mID));
           java_classname = jstring_to_string (current_env, resObj);
         }
     }
 
 #else
 
   octave_unused_parameter (jobj_arg);
   octave_unused_parameter (jcls_arg);
@@ -2904,19 +2951,17 @@ DEFUN (__java_init__, , ,
 @deftypefn {} {} __java_init__ ()
 Internal function used @strong{only} when debugging Java interface.
 
 Function will directly call initialize_java to create an instance of a JVM.
 @end deftypefn */)
 {
 #if defined (HAVE_JAVA)
 
-  octave_value retval;
-
-  retval = 0;
+  octave_value retval = 0;
 
   initialize_java ();
 
   retval = 1;
 
   return retval;
 
 #else
