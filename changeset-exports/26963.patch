# HG changeset patch
# User Rik <rik@octave.org>
# Date 1553489407 25200
#      Sun Mar 24 21:50:07 2019 -0700
# Branch stable
# Node ID 589b00536a390b451590c4fabe59abef2a1f6e25
# Parent  86f439ba2d474211ba9c6fd52a20e8be1fca4cbd
doc: Small fixes to mat2cell and polyeig docstrings (bug #55985).

* cellfun.cc (Fmat2cell): Replace reference to old variable "di" with variable
"dimi".

* polyeig.m: Use @var{} macro around "z" in @code example.

diff --git a/libinterp/corefcn/cellfun.cc b/libinterp/corefcn/cellfun.cc
--- a/libinterp/corefcn/cellfun.cc
+++ b/libinterp/corefcn/cellfun.cc
@@ -2113,17 +2113,17 @@ DEFUN (mat2cell, args, ,
 @deftypefn  {} {@var{C} =} mat2cell (@var{A}, @var{dim1}, @var{dim2}, @dots{}, @var{dimi}, @dots{}, @var{dimn})
 @deftypefnx {} {@var{C} =} mat2cell (@var{A}, @var{rowdim})
 Convert the matrix @var{A} to a cell array.
 
 Each dimension argument (@var{dim1}, @var{dim2}, etc.@:) is a vector of
 integers which specifies how to divide that dimension's elements amongst the
 new elements in the output @var{C}.  The number of elements in the @var{i}-th
 dimension is @code{size (@var{A}, @var{i})}.  Because all elements in @var{A}
-must be partitioned, there is a requirement that @code{sum (@var{di}) == size
+must be partitioned, there is a requirement that @code{sum (@var{dimi}) == size
 (@var{A}, i)}.  The size of the output cell @var{C} is numel (@var{dim1}) x
 numel (@var{dim2}) x @dots{} x numel (@var{dimn}).
 
 Given a single dimensional argument, @var{rowdim}, the output is divided into
 rows as specified.  All other dimensions are not divided and thus all
 columns (dim 2), pages (dim 3), etc.@: appear in each output element.
 
 Examples
diff --git a/scripts/polynomial/polyeig.m b/scripts/polynomial/polyeig.m
--- a/scripts/polynomial/polyeig.m
+++ b/scripts/polynomial/polyeig.m
@@ -24,18 +24,18 @@
 ##
 ## Given an @var{n}x@var{n} matrix polynomial
 ##
 ## @code{@var{C}(@var{s}) = @var{C0} + @var{C1} @var{s} + @dots{} + @var{Cl}
 ## @var{s}^@var{l}}
 ##
 ## @code{polyeig} solves the eigenvalue problem
 ##
-## @code{(@var{C0} + @var{C1} @var{z} + @dots{} + @var{Cl} z^@var{l}) @var{v} =
-## 0}.
+## @code{(@var{C0} + @var{C1} @var{z} + @dots{} + @var{Cl} @var{z}^@var{l})
+## @var{v} = 0}.
 ##
 ## Note that the eigenvalues @var{z} are the zeros of the matrix polynomial.
 ## @var{z} is a row vector with @code{@var{n}*@var{l}} elements.  @var{v} is a
 ## matrix (@var{n} x @var{n}*@var{l}) with columns that correspond to the
 ## eigenvectors.
 ##
 ## @seealso{eig, eigs, compan}
 ## @end deftypefn
