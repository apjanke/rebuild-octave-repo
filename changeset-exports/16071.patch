# HG changeset patch
# User Jordi Guti√©rrez Hermoso <jordigh@octave.org>
# Date 1361378173 18000
#      Wed Feb 20 11:36:13 2013 -0500
# Node ID 94e95309710ce44ea2bb9d2b944e8e97c5c0bd26
# Parent  e603ce23f20c3a68b5f7ca44bd5be1e327633bcc
Whitespace cleanup

diff --git a/libinterp/interpfcn/symtab.cc b/libinterp/interpfcn/symtab.cc
--- a/libinterp/interpfcn/symtab.cc
+++ b/libinterp/interpfcn/symtab.cc
@@ -1011,18 +1011,18 @@ symbol_table::fcn_info::fcn_info_rep::fi
 
 bool
 symbol_table::set_class_relationship (const std::string& sup_class,
                                       const std::string& inf_class)
 {
   if (is_superiorto (inf_class, sup_class))
     return false;
 
-  // If sup_class doesn't have an entry in the precedence table, 
-  // this will automatically create it, and associate to it a 
+  // If sup_class doesn't have an entry in the precedence table,
+  // this will automatically create it, and associate to it a
   // singleton set {inf_class} of inferior classes.
   class_precedence_table[sup_class].insert (inf_class);
 
   return true;
 }
 
 // Has class A been marked as superior to class B?  Also returns
 // TRUE if B has been marked as inferior to A, since we only keep
@@ -1035,17 +1035,17 @@ symbol_table::set_class_relationship (co
 //  else if (symbol_table::is_superiorto (b, a))
 //    // B is superior to A, or A has been marked inferior to B.
 //  else
 //    // No relation.
 
 bool
 symbol_table::is_superiorto (const std::string& a, const std::string& b)
 {
-  class_precedence_table_const_iterator p = class_precedence_table.find (a);  
+  class_precedence_table_const_iterator p = class_precedence_table.find (a);
   // If a has no entry in the precedence table, return false
   if (p == class_precedence_table.end ())
     return false;
 
   const std::set<std::string>& inferior_classes = p->second;
   std::set<std::string>::const_iterator q = inferior_classes.find (b);
   return (q != inferior_classes.end ());
 }
@@ -1461,17 +1461,17 @@ symbol_table::do_update_nest (void)
         {
           symbol_record &ours = ti->second;
           symbol_record parents;
           if (! ours.is_formal ()
               && nest_parent->look_nonlocal (ti->first, parents))
             {
               if (ours.is_global () || ours.is_persistent ())
                 ::error ("global and persistent may only be used in the topmost level in which a nested variable is used");
-                
+
               if (! ours.is_formal ())
                 {
                   ours.invalidate ();
                   ti->second = parents;
                 }
             }
           else
             ours.set_curr_fcn (curr_fcn);
diff --git a/libinterp/octave-value/ov-class.cc b/libinterp/octave-value/ov-class.cc
--- a/libinterp/octave-value/ov-class.cc
+++ b/libinterp/octave-value/ov-class.cc
@@ -2191,77 +2191,77 @@ This function may only be called from a 
   octave_value retval;
 
   octave_function *fcn = octave_call_stack::caller ();
   if ((! fcn) || (! fcn->is_class_constructor ()))
     {
       error ("superiorto: invalid call from outside class constructor");
       return retval;
     }
-  
+
   for (int i = 0; i < args.length (); i++)
     {
       std::string inf_class = args(i).string_value ();
       if (error_state)
         {
               error ("superiorto: expecting argument to be class name");
               break;
         }
 
-      // User defined classes always have higher precedence 
+      // User defined classes always have higher precedence
       // than built-in classes
       if (is_built_in_class (inf_class))
         break;
 
       std::string sup_class = fcn->name ();
       if (! symbol_table::set_class_relationship (sup_class, inf_class))
         {
           error ("superiorto: opposite precedence already set for %s and %s",
                  sup_class.c_str (), inf_class.c_str ());
           break;
         }
-    }   
-  
+    }
+
   return retval;
 }
 
 DEFUN (inferiorto, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} inferiorto (@var{class_name}, @dots{})\n\
 When called from a class constructor, mark the object currently\n\
 constructed as having a lower precedence than @var{class_name}.\n\
 More that one such class can be specified in a single call.\n\
 This function may only be called from a class constructor.\n\
 @end deftypefn")
 {
   octave_value retval;
-  
+
   octave_function *fcn = octave_call_stack::caller ();
   if ((! fcn) || (! fcn->is_class_constructor ()))
     {
       error ("inferiorto: invalid call from outside class constructor");
       return retval;
     }
-  
+
   for (int i = 0; i < args.length (); i++)
     {
-      std::string sup_class = args(i).string_value ();      
+      std::string sup_class = args(i).string_value ();
       if (error_state)
         {
           error ("inferiorto: expecting argument to be class name");
           break;
         }
-      
+
       if (is_built_in_class (sup_class))
         {
           error ("inferiorto: cannot give user-defined class lower "
                  "precedence than built-in class");
           break;
         }
-      
+
       std::string inf_class = fcn->name ();
       if (! symbol_table::set_class_relationship (sup_class, inf_class))
         {
           error ("inferiorto: opposite precedence already set for %s and %s",
                  inf_class.c_str (), sup_class.c_str ());
           break;
         }
     }
