# HG changeset patch
# User Jordi Guti√©rrez Hermoso <jordigh@gmail.com>
# Date 1312300211 18000
#      Tue Aug 02 10:50:11 2011 -0500
# Node ID f7a8d1dafda3842df5cea4ae0b1e733983f862e7
# Parent  7cdf3934887979838f09f03fb80cf09679aee421
Let rand accept negative dimensions (bug #33301)

* rand.cc (do_rand): Make it so that ranges, matrices, and individual
arguments treat negative dimensions as zero.

* data.cc (eye): Document that negative dimensions are treated as zero
(rand's docstring references eye)

diff --git a/src/DLD-FUNCTIONS/rand.cc b/src/DLD-FUNCTIONS/rand.cc
--- a/src/DLD-FUNCTIONS/rand.cc
+++ b/src/DLD-FUNCTIONS/rand.cc
@@ -174,28 +174,26 @@ do_rand (const octave_value_list& args, 
                 octave_idx_type n = r.nelem ();
 
                 dims.resize (n);
 
                 octave_idx_type base = NINTbig (r.base ());
                 octave_idx_type incr = NINTbig (r.inc ());
                 octave_idx_type lim = NINTbig (r.limit ());
 
-                if (base < 0 || lim < 0)
-                  error ("%s: all dimensions must be positive", fcn);
-                else
+                for (octave_idx_type i = 0; i < n; i++)
                   {
-                    for (octave_idx_type i = 0; i < n; i++)
-                      {
-                        dims(i) = base;
-                        base += incr;
-                      }
+                    //Negative dimensions are treated as zero for Matlab
+                    //compatibility
+                    dims(i) = base >= 0 ? base : 0;
+                    base += incr;
+                  }
 
-                    goto gen_matrix;
-                  }
+                goto gen_matrix;
+
               }
             else
               error ("%s: all elements of range must be integers",
                      fcn);
           }
         else if (tmp.is_matrix_type ())
           {
             Array<int> iv = tmp.int_vector_value (true);
@@ -203,25 +201,20 @@ do_rand (const octave_value_list& args, 
             if (! error_state)
               {
                 octave_idx_type len = iv.length ();
 
                 dims.resize (len);
 
                 for (octave_idx_type i = 0; i < len; i++)
                   {
+                    //Negative dimensions are treated as zero for Matlab
+                    //compatibility
                     octave_idx_type elt = iv(i);
-
-                    if (elt < 0)
-                      {
-                        error ("%s: all dimensions must be positive", fcn);
-                        goto done;
-                      }
-
-                    dims(i) = iv(i);
+                    dims(i) = elt >=0 ? elt : 0;
                   }
 
                 goto gen_matrix;
               }
             else
               error ("%s: expecting integer vector", fcn);
           }
         else
@@ -273,23 +266,24 @@ do_rand (const octave_value_list& args, 
               error ("%s: unrecognized string argument", fcn);
           }
         else
           {
             dims.resize (nargin);
 
             for (int i = 0; i < nargin; i++)
               {
-                dims(i) = args(idx+i).int_value ();
-
+                octave_idx_type elt = args(idx+i).int_value ();
                 if (error_state)
                   {
                     error ("%s: expecting integer arguments", fcn);
                     goto done;
                   }
+                //Negative is zero for Matlab compatibility
+                dims(i) = elt >= 0 ? elt : 0;
               }
 
             goto gen_matrix;
           }
       }
       break;
     }
 
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -4182,18 +4182,18 @@ eye (size ([1, 2; 3, 4])\n\
 The optional argument @var{class}, allows @code{eye} to return an array of\n\
 the specified type, like\n\
 \n\
 @example\n\
 val = zeros (n,m, \"uint8\")\n\
 @end example\n\
 \n\
 Calling @code{eye} with no arguments is equivalent to calling it\n\
-with an argument of 1.  This odd definition is for compatibility\n\
-with @sc{matlab}.\n\
+with an argument of 1.  Any negative dimensions are treated as zero. \n\
+These odd definitions are for compatibility with @sc{matlab}.\n\
 @seealso{speye}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   oct_data_conv::data_type dt = oct_data_conv::dt_double;
