# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1253027833 -7200
#      Tue Sep 15 17:17:13 2009 +0200
# Node ID 080e11f1b0c1cc9291eb0f6c5743afa91cc77fea
# Parent  85dd3a2c9355dc4cf05d36fa3be0fea6bdafa4e9
don't return undefined output values from user functions

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,17 @@
+2009-09-15  Jaroslav Hajek  <highegg@gmail.com>
+
+	* pt-misc.cc (tree_parameter_list::convert_to_const_vector): Pass
+	in nargout. Don't return excess elements. Optimize varargout-only case
+	to possibly use a shallow copy.
+	* pt-misc.h: Update decl.
+	* ov-usr-fcn.cc (octave_user_function::do_multi_index_op): Update call
+	to tree_parameter_list::convert_to_const_vector.
+
 2009-09-15  Jaroslav Hajek  <highegg@gmail.com>
 
 	* pr-output.cc (Fdisp, Ffdisp): Declare retval as octave_value_list.
 
 2009-09-14  Shai Ayal  <shaiay@users.sourceforge.net>
 
 	* DLD-FUNCTIONS/fltk_backend.cc (plot_window::pixel2status,
 	plot_window::pixel2pos): New argument AXES, which the
diff --git a/src/ov-usr-fcn.cc b/src/ov-usr-fcn.cc
--- a/src/ov-usr-fcn.cc
+++ b/src/ov-usr-fcn.cc
@@ -468,17 +468,17 @@ octave_user_function::do_multi_index_op 
 		varargout = varargout_varval.cell_value ();
 
 		if (error_state)
 		  error ("expecting varargout to be a cell array object");
 	      }
 	  }
 
 	if (! error_state)
-	  retval = ret_list->convert_to_const_vector (varargout);
+	  retval = ret_list->convert_to_const_vector (nargout, varargout);
       }
   }
 
  abort:
   unwind_protect::run_frame (uwp_frame);
 
   return retval;
 }
@@ -701,13 +701,24 @@ DEFUN (optimize_subsasgn_calls, args, na
 Query or set the internal flag for subsasgn method call optimizations.\n\
 If true, Octave will attempt to eliminate the redundant copying when calling\n\
 subsasgn method of a user-defined class.\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (optimize_subsasgn_calls);
 }
 
+DEFUN (test_feval, args, , "")
+{
+  octave_value_list fargs(2);
+  fargs(0) = "load";
+  fargs(1) = "nlwing2";
+  octave_value_list retval = feval ("pkg", fargs, 0);
+  std::cerr << retval.length () << '\n';
+
+  return octave_value_list ();
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/pt-misc.cc b/src/pt-misc.cc
--- a/src/pt-misc.cc
+++ b/src/pt-misc.cc
@@ -199,36 +199,47 @@ tree_parameter_list::undefine (void)
 
       octave_lvalue ref = elt->lvalue ();
 
       ref.assign (octave_value::op_asn_eq, octave_value ());
     }
 }
 
 octave_value_list
-tree_parameter_list::convert_to_const_vector (const Cell& varargout)
+tree_parameter_list::convert_to_const_vector (int nargout,
+                                              const Cell& varargout)
 {
   octave_idx_type vlen = varargout.numel ();
 
-  int nout = length () + vlen;
+  // Special case. Will do a shallow copy.
+  if (length () == 0 && vlen == nargout)
+    return varargout;
 
-  octave_value_list retval (nout, octave_value ());
+  // We want always at least one return value.
+  int nout = std::max (nargout, 1);
+  octave_value_list retval (nout);
 
   int i = 0;
 
-  for (iterator p = begin (); p != end (); p++)
+  for (iterator p = begin (); p != end () && i < nout; p++)
     {
       tree_decl_elt *elt = *p;
 
       retval(i++) = elt->is_defined () ? elt->rvalue1 () : octave_value ();
     }
 
+  vlen = std::min (vlen, nout - i);
+
   for (octave_idx_type j = 0; j < vlen; j++)
     retval(i++) = varargout(j);
 
+  // If there was zero outputs requested, and nothing is defined, don't return anything.
+  if (nargout == 0 && retval(0).is_undefined ())
+    retval = octave_value_list ();
+
   return retval;
 }
 
 bool
 tree_parameter_list::is_defined (void)
 {
   bool status = true;
 
diff --git a/src/pt-misc.h b/src/pt-misc.h
--- a/src/pt-misc.h
+++ b/src/pt-misc.h
@@ -74,17 +74,17 @@ public:
 				      int nargout, const octave_value& val);
 
   void define_from_arg_vector (const octave_value_list& args);
 
   void undefine (void);
 
   bool is_defined (void);
 
-  octave_value_list convert_to_const_vector (const Cell& varargout);
+  octave_value_list convert_to_const_vector (int nargout, const Cell& varargout);
 
   tree_parameter_list *dup (symbol_table::scope_id scope,
 			    symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
 
 private:
 
