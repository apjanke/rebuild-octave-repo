# HG changeset patch
# User Torsten <mttl@mailbox.org>
# Date 1488053615 -3600
#      Sat Feb 25 21:13:35 2017 +0100
# Node ID 4cd5f975d26cd26c3334334b50c81272f0f893ec
# Parent  a36d3015f8c86d5e5ac983eb68480f6c57769b8d
automatically add a comment string when line breaking in line comments

* file-editor-tab.cc (handle_char_added): insert a comment string at the
  beginning of a new line when breaking a comment line

* octave-qscintilla.cc: include headers of the used qscintilla lexers;
  (get_style): new function providing the style at specific/current position;
  (is_style_comment): new function for detecting lin or block comment styles;

* octave-qscintilla.h: new functions get_style and is_style_comment, new
  enum for return values of is_style_comment

diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -2703,18 +2703,24 @@ file_editor_tab::handle_char_added (int 
         c = _edit_area->SendScintilla (QsciScintillaBase::SCI_GETCHARAT, pos);
       }
 
     // If a space or tab was found, break at this char,
     // otherwise break at cursor position
     int col_newline = col - 1;
     if (c == ' ' || c == '\t')
       col_newline = col_space + 1;
-    // Insert a newline char for breaking the line
-    _edit_area->insertAt (QString ("\n"), line, col_newline);
+
+    // Insert a newline char for breaking the line possibly followed
+    // by a line comment string
+    QString newline = QString ("\n");
+    int style = _edit_area->is_style_comment ();
+    if (style == octave_qscintilla::ST_LINE_COMMENT)
+      newline = newline + _edit_area->comment_string ();
+    _edit_area->insertAt (newline, line, col_newline);
 
     // Automatically indent the new line to the indentation of previous line
     // and set the cursor position to the end of the indentation.
     _edit_area->setIndentation (line + 1, indentation);
     _edit_area->SendScintilla (QsciScintillaBase::SCI_LINEEND);
   }
 }
 
diff --git a/libgui/src/m-editor/octave-qscintilla.cc b/libgui/src/m-editor/octave-qscintilla.cc
--- a/libgui/src/m-editor/octave-qscintilla.cc
+++ b/libgui/src/m-editor/octave-qscintilla.cc
@@ -23,23 +23,31 @@ along with Octave; see the file COPYING.
 // Author: Torsten <ttl@justmail.de>
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
 #if defined (HAVE_QSCINTILLA)
 
+#include <Qsci/qscilexer.h>
+
 #if defined (HAVE_QSCI_QSCILEXEROCTAVE_H)
 #  define HAVE_LEXER_OCTAVE 1
+#  include <Qsci/qscilexeroctave.h>
 #elif defined (HAVE_QSCI_QSCILEXERMATLAB_H)
 #  define HAVE_LEXER_MATLAB 1
+#  include <Qsci/qscilexermatlab.h>
 #endif
+#include <Qsci/qscilexercpp.h>
+#include <Qsci/qscilexerbash.h>
+#include <Qsci/qscilexerperl.h>
+#include <Qsci/qscilexerbatch.h>
+#include <Qsci/qscilexerdiff.h>
 
-#include <Qsci/qscilexer.h>
 #include <Qsci/qscicommandset.h>
 #include <QShortcut>
 #include <QMessageBox>
 
 #include "octave-qscintilla.h"
 #include "file-editor-tab.h"
 #include "shortcut-manager.h"
 #include "resource-manager.h"
@@ -395,16 +403,76 @@ void
 octave_qscintilla::clear_indicator (int indicator_style)
 {
   int end_pos = text ().length ();
   int end_line, end_col;
   lineIndexFromPosition (end_pos, &end_line, &end_col);
   clearIndicatorRange (0, 0, end_line, end_col, indicator_style);
 }
 
+// provide the style at a specific position
+int
+octave_qscintilla::get_style (int pos)
+{
+  int position;
+  if (pos < 0)
+    // The positition has to be reduced by 2 for getting the real style (?)
+    position = SendScintilla (QsciScintillaBase::SCI_GETCURRENTPOS) - 2;
+  else
+    position = pos;
+
+  return SendScintilla (QsciScintillaBase::SCI_GETSTYLEAT, position);
+}
+
+// Is a specific cursor position in a line or block comment?
+int
+octave_qscintilla::is_style_comment (int pos)
+{
+  int lexer = SendScintilla (QsciScintillaBase::SCI_GETLEXER);
+  int style = get_style (pos);
+
+  switch (lexer)
+    {
+      case SCLEX_CPP:
+        return (ST_LINE_COMMENT * (
+                          style == QsciLexerCPP::CommentLine
+                       || style == QsciLexerCPP::CommentLineDoc)
+              + ST_BLOCK_COMMENT * (
+                           style == QsciLexerCPP::Comment
+                        || style == QsciLexerCPP::CommentDoc
+                        || style == QsciLexerCPP::CommentDocKeyword
+                        || style == QsciLexerCPP::CommentDocKeywordError)
+                );
+
+#if defined (HAVE_LEXER_MATLAB)
+      case SCLEX_MATLAB:
+        return (ST_LINE_COMMENT * (style == QsciLexerMatlab::Comment));
+#endif
+#if  defined (HAVE_LEXER_OCTAVE)
+      case SCLEX_OCTAVE:
+        return (ST_LINE_COMMENT * (style == QsciLexerOctave::Comment));
+#endif
+
+      case SCLEX_PERL:
+        return (ST_LINE_COMMENT * (style == QsciLexerPerl::Comment));
+
+      case SCLEX_BATCH:
+        return (ST_LINE_COMMENT * (style == QsciLexerBatch::Comment));
+
+      case SCLEX_DIFF:
+        return (ST_LINE_COMMENT * (style == QsciLexerDiff::Comment));
+
+      case SCLEX_BASH:
+        return (ST_LINE_COMMENT * (style == QsciLexerBash::Comment));
+
+    }
+
+  return ST_NONE;
+}
+
 // Function returning the true cursor position where the tab length
 // is taken into account.
 void
 octave_qscintilla::get_current_position (int *pos, int *line, int *col)
 {
   *pos = SendScintilla (QsciScintillaBase::SCI_GETCURRENTPOS);
   *line = SendScintilla (QsciScintillaBase::SCI_LINEFROMPOSITION, *pos);
   *col = SendScintilla (QsciScintillaBase::SCI_GETCOLUMN, *pos);
diff --git a/libgui/src/m-editor/octave-qscintilla.h b/libgui/src/m-editor/octave-qscintilla.h
--- a/libgui/src/m-editor/octave-qscintilla.h
+++ b/libgui/src/m-editor/octave-qscintilla.h
@@ -33,26 +33,35 @@ class octave_qscintilla : public QsciSci
 {
   Q_OBJECT
 
 public:
 
   octave_qscintilla (QWidget *p);
   ~octave_qscintilla ();
 
+  enum
+    {
+      ST_NONE = 0,
+      ST_LINE_COMMENT,
+      ST_BLOCK_COMMENT
+    };
+
   virtual void contextMenuEvent (QContextMenuEvent *e);
 
   void context_help_doc (bool);
   void context_edit ();
   void context_run ();
   void get_global_textcursor_pos (QPoint *global_pos, QPoint *local_pos);
   bool get_actual_word ();
   void clear_indicator (int indicator_style);
   void get_current_position (int *pos, int *line, int *col);
   QString comment_string ();
+  int get_style (int pos = -1);
+  int is_style_comment (int pos = -1);
 
 signals:
 
   void execute_command_in_terminal_signal (const QString&);
   void create_context_menu_signal (QMenu*);
   void context_menu_edit_signal (const QString&);
   void qsci_has_focus_signal (bool);
   void status_update (bool,bool);
