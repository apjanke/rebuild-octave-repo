# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1455011729 18000
#      Tue Feb 09 04:55:29 2016 -0500
# Node ID b8cf410b5c889f3c41e31e53511b9e0b942fc19f
# Parent  5f318c8ec6345f4d9478656db00395661ce9b023
eliminate feature tests from lo-mappers.h

* lo-mappers.h, lo-mappers.cc (xisinf, xisnan, xfinite):
Move feature tests inside functions in lo-mappers.cc.

diff --git a/liboctave/numeric/lo-mappers.cc b/liboctave/numeric/lo-mappers.cc
--- a/liboctave/numeric/lo-mappers.cc
+++ b/liboctave/numeric/lo-mappers.cc
@@ -134,39 +134,45 @@ xlog2 (const Complex& x, int& exp)
 {
   double ax = std::abs (x);
   double lax = xlog2 (ax, exp);
   return (ax != lax) ? (x / ax) * lax : x;
 }
 
 // double -> bool mappers.
 
-#if ! defined (HAVE_CMATH_ISNAN)
 bool
 xisnan (double x)
 {
+#if defined (HAVE_CMATH_ISNAN)
+  return std::isnan (x);
+#else
   return lo_ieee_isnan (x);
-}
 #endif
+}
 
-#if ! defined (HAVE_CMATH_ISFINITE)
 bool
 xfinite (double x)
 {
+#if defined (HAVE_CMATH_ISFINITE)
+  return std::isfinite (x);
+#else
   return lo_ieee_finite (x);
-}
 #endif
+}
 
-#if ! defined (HAVE_CMATH_ISINF)
 bool
 xisinf (double x)
 {
+#if defined (HAVE_CMATH_ISINF)
+  return std::isinf (x);
+#else
   return lo_ieee_isinf (x);
+#endif
 }
-#endif
 
 bool
 octave_is_NA (double x)
 {
   return lo_ieee_is_NA (x);
 }
 
 // (double, double) -> double mappers.
@@ -353,39 +359,45 @@ xlog2 (const FloatComplex& x, int& exp)
 {
   float ax = std::abs (x);
   float lax = xlog2 (ax, exp);
   return (ax != lax) ? (x / ax) * lax : x;
 }
 
 // float -> bool mappers.
 
-#if ! defined (HAVE_CMATH_ISNANF)
 bool
 xisnan (float x)
 {
+#if defined (HAVE_CMATH_ISNANF)
+  return std::isnan (x);
+#else
   return lo_ieee_isnan (x);
-}
 #endif
+}
 
-#if ! defined (HAVE_CMATH_ISFINITEF)
 bool
 xfinite (float x)
 {
+#if defined (HAVE_CMATH_ISFINITEF)
+  return std::isfinite (x);
+#else
   return lo_ieee_finite (x);
-}
 #endif
+}
 
-#if ! defined (HAVE_CMATH_ISINFF)
 bool
 xisinf (float x)
 {
+#if defined (HAVE_CMATH_ISINFF)
+  return std::isinf (x);
+#else
   return lo_ieee_isinf (x);
+#endif
 }
-#endif
 
 bool
 octave_is_NA (float x)
 {
   return lo_ieee_is_NA (x);
 }
 
 // (float, float) -> float mappers.
diff --git a/liboctave/numeric/lo-mappers.h b/liboctave/numeric/lo-mappers.h
--- a/liboctave/numeric/lo-mappers.h
+++ b/liboctave/numeric/lo-mappers.h
@@ -48,34 +48,19 @@ extern OCTAVE_API Complex xlog2 (const C
 extern OCTAVE_API double xlog2 (double x, int& exp);
 extern OCTAVE_API Complex xlog2 (const Complex& x, int& exp);
 extern OCTAVE_API double xexp2 (double x);
 
 // These are used by the BOOL_OP macros in mx-op-defs.h.
 inline bool xisnan (bool) { return false; }
 inline bool xisnan (char) { return false; }
 
-#if defined (HAVE_CMATH_ISNAN)
-inline bool xisnan (double x)
-{ return std::isnan (x); }
-#else
 extern OCTAVE_API bool xisnan (double x);
-#endif
-#if defined (HAVE_CMATH_ISFINITE)
-inline bool xfinite (double x)
-{ return std::isfinite (x); }
-#else
 extern OCTAVE_API bool xfinite (double x);
-#endif
-#if defined (HAVE_CMATH_ISINF)
-inline bool xisinf (double x)
-{ return std::isinf (x); }
-#else
 extern OCTAVE_API bool xisinf (double x);
-#endif
 
 extern OCTAVE_API bool octave_is_NA (double x);
 
 // Generic xmin, xmax definitions
 template <typename T>
 inline T xmin (T x, T y)
 {
   return x <= y ? x : y;
@@ -126,34 +111,19 @@ extern OCTAVE_API float xround (float x)
 extern OCTAVE_API float xroundb (float x);
 extern OCTAVE_API float signum (float x);
 extern OCTAVE_API float xlog2 (float x);
 extern OCTAVE_API FloatComplex xlog2 (const FloatComplex& x);
 extern OCTAVE_API float xlog2 (float x, int& exp);
 extern OCTAVE_API FloatComplex xlog2 (const FloatComplex& x, int& exp);
 extern OCTAVE_API float xexp2 (float x);
 
-#if defined (HAVE_CMATH_ISNANF)
-inline bool xisnan (float x)
-{ return std::isnan (x); }
-#else
 extern OCTAVE_API bool xisnan (float x);
-#endif
-#if defined (HAVE_CMATH_ISFINITEF)
-inline bool xfinite (float x)
-{ return std::isfinite (x); }
-#else
 extern OCTAVE_API bool xfinite (float x);
-#endif
-#if defined (HAVE_CMATH_ISINFF)
-inline bool xisinf (float x)
-{ return std::isinf (x); }
-#else
 extern OCTAVE_API bool xisinf (float x);
-#endif
 
 extern OCTAVE_API bool octave_is_NA (float x);
 
 inline float
 xmin (float x, float y)
 {
   return xisnan (y) ? x : (x <= y ? x : y);
 }
