# HG changeset patch
# User jwe
# Date 976168027 0
#      Thu Dec 07 05:47:07 2000 +0000
# Node ID 50f30e40abca296e11661fe0a87e5aa82527c0f6
# Parent  c82ab37998aabce61327b65173ee3ecc9d9ba526
[project @ 2000-12-07 05:47:06 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,31 @@
+2000-12-06  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* DLD-FUNCTIONS/minmax.cc (EMPTY_RETURN_CHECK): New macro.
+	(min, max): Use it.
+
+	* DLD-FUNCTIONS/minmax.cc (MINMAX_BODY): New macro.  If single arg
+	is empty, return empty matrix result and empty matrix for index.
+	(Fmin, Fmax): Use MINMAX_BODY, so we have consistent definition
+	for min and max functions.
+
+2000-11-30  Joerg Specht  <joerg.specht@ins.uni-stuttgart.de>
+
+	* help.cc (display_help_text): Append new line at end of doc string.
+
+2000-11-30  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* DLD-FUNCTIONS/lsode.cc (LSODE_ABORT1, LSODE_ABORT2): Omit `##'
+	in macro definition since they are not needed to paste strings
+	together and picky compilers choke on them.
+	* DLD-FUNCTIONS/quad.cc (QUAD_ABORT1, QUAD_ABORT2): Likewise.
+	* DLD-FUNCTIONS/fsolve.cc (FSOLVE_ABORT1, FSOLVE_ABORT2): Likewise.
+	* DLD-FUNCTIONS/dassl.cc (DASSL_ABORT1, DASSL_ABORT2): Likewise.
+
 2000-11-29  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* mkbuiltins (XDEFUNX_INTERNAL): New macro.
 	* mkgendoc (XDEFUNX_INTERNAL): Likewise.
 	* defun-int.h (DEFUNX_INTERNAL): Use it.
 
 	* defun.h (DEFUNX): New macro.
 	* defun-int.h (DEFUNX_INTERNAL, DECLARE_FUNX): New macro.
diff --git a/src/DLD-FUNCTIONS/dassl.cc b/src/DLD-FUNCTIONS/dassl.cc
--- a/src/DLD-FUNCTIONS/dassl.cc
+++ b/src/DLD-FUNCTIONS/dassl.cc
@@ -115,25 +115,25 @@ dassl_user_function (const ColumnVector&
       unwind_protect::run_frame ("Fdassl"); \
       return retval; \
     } \
   while (0)
 
 #define DASSL_ABORT1(msg) \
   do \
     { \
-      ::error ("dassl: " ## msg); \
+      ::error ("dassl: " msg); \
       DASSL_ABORT (); \
     } \
   while (0)
 
 #define DASSL_ABORT2(fmt, arg) \
   do \
     { \
-      ::error ("dassl: " ## fmt, arg); \
+      ::error ("dassl: " fmt, arg); \
       DASSL_ABORT (); \
     } \
   while (0)
 
 DEFUN_DLD (dassl, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {[@var{x}, @var{xdot}] =} dassl (@var{fcn}, @var{x0}, @var{xdot0}, @var{t}, @var{t_crit})\n\
 Return a matrix of states and their first derivatives with respect to\n\
diff --git a/src/DLD-FUNCTIONS/fsolve.cc b/src/DLD-FUNCTIONS/fsolve.cc
--- a/src/DLD-FUNCTIONS/fsolve.cc
+++ b/src/DLD-FUNCTIONS/fsolve.cc
@@ -131,25 +131,25 @@ fsolve_user_function (const ColumnVector
       unwind_protect::run_frame ("Ffsolve"); \
       return retval; \
     } \
   while (0)
 
 #define FSOLVE_ABORT1(msg) \
   do \
     { \
-      ::error ("fsolve: " ## msg); \
+      ::error ("fsolve: " msg); \
       FSOLVE_ABORT (); \
     } \
   while (0)
 
 #define FSOLVE_ABORT2(fmt, arg) \
   do \
     { \
-      ::error ("fsolve: " ## fmt, arg); \
+      ::error ("fsolve: " fmt, arg); \
       FSOLVE_ABORT (); \
     } \
   while (0)
 
 DEFUN_DLD (fsolve, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {[@var{x}, @var{info}] =} fsolve (@var{fcn}, @var{x0})\n\
 Given @var{fcn}, the name of a function of the form @code{f (@var{x})}\n\
diff --git a/src/DLD-FUNCTIONS/lsode.cc b/src/DLD-FUNCTIONS/lsode.cc
--- a/src/DLD-FUNCTIONS/lsode.cc
+++ b/src/DLD-FUNCTIONS/lsode.cc
@@ -139,25 +139,25 @@ lsode_user_jacobian (const ColumnVector&
       unwind_protect::run_frame ("Flsode"); \
       return retval; \
     } \
   while (0)
  
 #define LSODE_ABORT1(msg) \
   do \
     { \
-      ::error ("lsode: " ## msg); \
+      ::error ("lsode: " msg); \
       LSODE_ABORT (); \
     } \
   while (0)
 
 #define LSODE_ABORT2(fmt, arg) \
   do \
     { \
-      ::error ("lsode: " ## fmt, arg); \
+      ::error ("lsode: " fmt, arg); \
       LSODE_ABORT (); \
     } \
   while (0)
 
 DEFUN_DLD (lsode, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} lsode (@var{fcn}, @var{x0}, @var{t}, @var{t_crit})\n\
 Return a matrix of @var{x} as a function of @var{t}, given the initial\n\
diff --git a/src/DLD-FUNCTIONS/minmax.cc b/src/DLD-FUNCTIONS/minmax.cc
--- a/src/DLD-FUNCTIONS/minmax.cc
+++ b/src/DLD-FUNCTIONS/minmax.cc
@@ -32,107 +32,125 @@ Software Foundation, 59 Temple Place - S
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
 #include "oct-obj.h"
 
 // XXX FIXME XXX -- it would be nice to share code among the min/max
 // functions below.
 
+#define EMPTY_RETURN_CHECK(T) \
+  if (nr == 0 || nc == 0) \
+    return T (0, 0)
+
 static Matrix
 min (double d, const Matrix& m)
 {
   int nr = m.rows ();
   int nc = m.columns ();
 
+  EMPTY_RETURN_CHECK (Matrix);
+
   Matrix result (nr, nc);
 
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
       result (i, j) = xmin (d, m (i, j));
 
   return result;
 }
 
 static Matrix
 min (const Matrix& m, double d)
 {
   int nr = m.rows ();
   int nc = m.columns ();
 
+  EMPTY_RETURN_CHECK (Matrix);
+
   Matrix result (nr, nc);
 
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
       result (i, j) = xmin (m (i, j), d);
 
   return result;
 }
 
 static ComplexMatrix
 min (const Complex& c, const ComplexMatrix& m)
 {
   int nr = m.rows ();
   int nc = m.columns ();
 
+  EMPTY_RETURN_CHECK (ComplexMatrix);
+
   ComplexMatrix result (nr, nc);
 
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
       result (i, j) = xmin (c, m (i, j));
 
   return result;
 }
 
 static ComplexMatrix
 min (const ComplexMatrix& m, const Complex& c)
 {
   int nr = m.rows ();
   int nc = m.columns ();
 
+  EMPTY_RETURN_CHECK (ComplexMatrix);
+
   ComplexMatrix result (nr, nc);
 
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
       result (i, j) = xmin (m (i, j), c);
 
   return result;
 }
 
 static Matrix
 min (const Matrix& a, const Matrix& b)
 {
   int nr = a.rows ();
   int nc = a.columns ();
+
   if (nr != b.rows () || nc != b.columns ())
     {
       error ("two-arg min expecting args of same size");
       return Matrix ();
     }
 
+  EMPTY_RETURN_CHECK (Matrix);
+
   Matrix result (nr, nc);
 
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
       result (i, j) = xmin (a (i, j), b (i, j));
 
   return result;
 }
 
 static ComplexMatrix
 min (const ComplexMatrix& a, const ComplexMatrix& b)
 {
   int nr = a.rows ();
   int nc = a.columns ();
+
   if (nr != b.rows () || nc != b.columns ())
     {
       error ("two-arg min expecting args of same size");
       return ComplexMatrix ();
     }
 
+  EMPTY_RETURN_CHECK (ComplexMatrix);
+
   ComplexMatrix result (nr, nc);
 
   for (int j = 0; j < nc; j++)
     {
       int columns_are_real_only = 1;
       for (int i = 0; i < nr; i++)
 	if (imag (a (i, j)) != 0.0 || imag (b (i, j)) != 0.0)
 	  {
@@ -156,101 +174,115 @@ min (const ComplexMatrix& a, const Compl
 }
 
 static Matrix
 max (double d, const Matrix& m)
 {
   int nr = m.rows ();
   int nc = m.columns ();
 
+  EMPTY_RETURN_CHECK (Matrix);
+
   Matrix result (nr, nc);
 
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
       result (i, j) = xmax (d, m (i, j));
 
   return result;
 }
 
 static Matrix
 max (const Matrix& m, double d)
 {
   int nr = m.rows ();
   int nc = m.columns ();
 
+  EMPTY_RETURN_CHECK (Matrix);
+
   Matrix result (nr, nc);
 
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
       result (i, j) = xmax (m (i, j), d);
 
   return result;
 }
 
 static ComplexMatrix
 max (const Complex& c, const ComplexMatrix& m)
 {
   int nr = m.rows ();
   int nc = m.columns ();
 
+  EMPTY_RETURN_CHECK (ComplexMatrix);
+
   ComplexMatrix result (nr, nc);
 
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
       result (i, j) = xmax (c, m (i, j));
 
   return result;
 }
 
 static ComplexMatrix
 max (const ComplexMatrix& m, const Complex& c)
 {
   int nr = m.rows ();
   int nc = m.columns ();
 
+  EMPTY_RETURN_CHECK (ComplexMatrix);
+
   ComplexMatrix result (nr, nc);
 
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
       result (i, j) = xmax (m (i, j), c);
 
   return result;
 }
 
 static Matrix
 max (const Matrix& a, const Matrix& b)
 {
   int nr = a.rows ();
   int nc = a.columns ();
+
   if (nr != b.rows () || nc != b.columns ())
     {
       error ("two-arg max expecting args of same size");
       return Matrix ();
     }
 
+  EMPTY_RETURN_CHECK (Matrix);
+
   Matrix result (nr, nc);
 
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
       result (i, j) = xmax (a (i, j), b (i, j));
 
   return result;
 }
 
 static ComplexMatrix
 max (const ComplexMatrix& a, const ComplexMatrix& b)
 {
   int nr = a.rows ();
   int nc = a.columns ();
+
   if (nr != b.rows () || nc != b.columns ())
     {
       error ("two-arg max expecting args of same size");
       return ComplexMatrix ();
     }
 
+  EMPTY_RETURN_CHECK (ComplexMatrix);
+
   ComplexMatrix result (nr, nc);
 
   for (int j = 0; j < nc; j++)
     {
       int columns_are_real_only = 1;
       for (int i = 0; i < nr; i++)
 	if (imag (a (i, j)) != 0.0 || imag (b (i, j)) != 0.0)
 	  {
@@ -268,16 +300,249 @@ max (const ComplexMatrix& a, const Compl
 	  for (int i = 0; i < nr; i++)
 	    result (i, j) = xmax (a (i, j), b (i, j));
 	}
     }
 
   return result;
 }
 
+#define MINMAX_BODY(FCN) \
+ \
+  octave_value_list retval;  \
+ \
+  int nargin = args.length (); \
+ \
+  if (nargin < 1 || nargin > 2 || nargout > 2) \
+    { \
+      print_usage (#FCN); \
+      return retval; \
+    } \
+ \
+  octave_value arg1; \
+  octave_value arg2; \
+ \
+  switch (nargin) \
+    { \
+    case 2: \
+      arg2 = args(1); \
+ \
+    case 1: \
+      arg1 = args(0); \
+      break; \
+ \
+    default: \
+      panic_impossible (); \
+      break; \
+    } \
+ \
+  if (nargin == 1 && (nargout == 1 || nargout == 0)) \
+    { \
+      if (arg1.is_real_type ()) \
+	{ \
+	  Matrix m = arg1.matrix_value (); \
+ \
+	  if (! error_state) \
+	    { \
+	      if (m.rows () == 1) \
+		retval(0) = m.row_ ## FCN (); \
+	      else \
+		{ \
+		  if (m.rows () == 0 || m.columns () == 0) \
+		    retval(0) = Matrix (); \
+		  else \
+		    retval(0) = m.column_ ## FCN (); \
+		} \
+	    } \
+	} \
+      else if (arg1.is_complex_type ()) \
+	{ \
+	  ComplexMatrix m = arg1.complex_matrix_value (); \
+ \
+	  if (! error_state) \
+	    { \
+	      if (m.rows () == 1) \
+		retval(0) = m.row_ ## FCN (); \
+	      else \
+		{ \
+		  if (m.rows () == 0 || m.columns () == 0) \
+		    retval(0) = Matrix (); \
+		  else \
+		    retval(0) = m.column_ ## FCN (); \
+		} \
+	    } \
+	} \
+      else \
+	gripe_wrong_type_arg (#FCN, arg1); \
+    } \
+  else if (nargin == 1 && nargout == 2) \
+    { \
+      Array<int> index; \
+ \
+      if (arg1.is_real_type ()) \
+	{ \
+	  Matrix m = arg1.matrix_value (); \
+ \
+	  if (! error_state) \
+	    { \
+	      retval.resize (2); \
+ \
+	      if (m.rows () == 1) \
+		retval(0) = m.row_ ## FCN (index); \
+	      else \
+		{ \
+		  if (m.rows () == 0 || m.columns () == 0) \
+		    retval(0) = Matrix (); \
+		  else \
+		    retval(0) = m.column_ ## FCN (index); \
+		} \
+	    } \
+	} \
+      else if (arg1.is_complex_type ()) \
+	{ \
+	  ComplexMatrix m = arg1.complex_matrix_value (); \
+ \
+	  if (! error_state) \
+	    { \
+	      retval.resize (2); \
+ \
+	      if (m.rows () == 1) \
+		retval(0) = m.row_ ## FCN (index); \
+	      else \
+		{ \
+		  if (m.rows () == 0 || m.columns () == 0) \
+		    retval(0) = Matrix (); \
+		  else \
+		    retval(0) = m.column_ ## FCN (index); \
+		} \
+	    } \
+	} \
+      else \
+	gripe_wrong_type_arg (#FCN, arg1); \
+ \
+      int len = index.length (); \
+ \
+      if (len > 0) \
+	{ \
+	  RowVector idx (len); \
+ \
+	  for (int i = 0; i < len; i++) \
+	    { \
+	      int tmp = index.elem (i) + 1; \
+	      idx.elem (i) = (tmp <= 0) \
+		? octave_NaN : static_cast<double> (tmp); \
+	    } \
+ \
+	  retval(1) = idx; \
+	} \
+      else \
+	retval(1) = Matrix (); \
+    } \
+  else if (nargin == 2) \
+    { \
+      int arg1_is_scalar = arg1.is_scalar_type (); \
+      int arg2_is_scalar = arg2.is_scalar_type (); \
+ \
+      int arg1_is_complex = arg1.is_complex_type (); \
+      int arg2_is_complex = arg2.is_complex_type (); \
+ \
+      if (arg1_is_scalar) \
+	{ \
+	  if (arg1_is_complex || arg2_is_complex) \
+	    { \
+	      Complex c1 = arg1.complex_value (); \
+	      ComplexMatrix m2 = arg2.complex_matrix_value (); \
+	      if (! error_state) \
+		{ \
+		  ComplexMatrix result = FCN (c1, m2); \
+		  if (! error_state) \
+		    retval(0) = result; \
+		} \
+	    } \
+	  else \
+	    { \
+	      double d1 = arg1.double_value (); \
+	      Matrix m2 = arg2.matrix_value (); \
+ \
+	      if (! error_state) \
+		{ \
+		  Matrix result = FCN (d1, m2); \
+		  if (! error_state) \
+		    retval(0) = result; \
+		} \
+	    } \
+	} \
+      else if (arg2_is_scalar) \
+	{ \
+	  if (arg1_is_complex || arg2_is_complex) \
+	    { \
+	      ComplexMatrix m1 = arg1.complex_matrix_value (); \
+ \
+	      if (! error_state) \
+		{ \
+		  Complex c2 = arg2.complex_value (); \
+		  ComplexMatrix result = FCN (m1, c2); \
+		  if (! error_state) \
+		    retval(0) = result; \
+		} \
+	    } \
+	  else \
+	    { \
+	      Matrix m1 = arg1.matrix_value (); \
+ \
+	      if (! error_state) \
+		{ \
+		  double d2 = arg2.double_value (); \
+		  Matrix result = FCN (m1, d2); \
+		  if (! error_state) \
+		    retval(0) = result; \
+		} \
+	    } \
+	} \
+      else \
+	{ \
+	  if (arg1_is_complex || arg2_is_complex) \
+	    { \
+	      ComplexMatrix m1 = arg1.complex_matrix_value (); \
+ \
+	      if (! error_state) \
+		{ \
+		  ComplexMatrix m2 = arg2.complex_matrix_value (); \
+ \
+		  if (! error_state) \
+		    { \
+		      ComplexMatrix result = FCN (m1, m2); \
+		      if (! error_state) \
+			retval(0) = result; \
+		    } \
+		} \
+	    } \
+	  else \
+	    { \
+	      Matrix m1 = arg1.matrix_value (); \
+ \
+	      if (! error_state) \
+		{ \
+		  Matrix m2 = arg2.matrix_value (); \
+ \
+		  if (! error_state) \
+		    { \
+		      Matrix result = FCN (m1, m2); \
+		      if (! error_state) \
+			retval(0) = result; \
+		    } \
+		} \
+	    } \
+	} \
+    } \
+  else \
+    panic_impossible (); \
+ \
+  return retval
+
 DEFUN_DLD (min, args, nargout,
   "-*- texinfo -*-\n\
 For a vector argument, return the minimum value.  For a matrix\n\
 argument, return the minimum value from each column, as a row\n\
 vector.  Thus,\n\
 \n\
 @example\n\
 min (min (@var{x}))\n\
@@ -293,225 +558,17 @@ If called with two output arguments, als
 minimum value(s). Thus,\n\
 @example\n
 [x, ix] = min ([1, 3, 0, 2, 5])\n\
 @end example\n\
 \n\
 @noindent\n\
 returns @var{x} = 0 and @var{ix} = 3.")
 {
-  octave_value_list retval;
-
-  int nargin = args.length ();
-
-  if (nargin < 1 || nargin > 2 || nargout > 2)
-    {
-      print_usage ("min");
-      return retval;
-    }
-
-  octave_value arg1;
-  octave_value arg2;
-
-  switch (nargin)
-    {
-    case 2:
-      arg2 = args(1);
-      // Fall through...
-
-    case 1:
-      arg1 = args(0);
-      break;
-
-    default:
-      panic_impossible ();
-      break;
-    }
-
-  if (nargin == 1 && (nargout == 1 || nargout == 0))
-    {
-      if (arg1.is_real_type ())
-	{
-	  Matrix m = arg1.matrix_value ();
-
-	  if (! error_state)
-	    {
-	      if (m.rows () == 1)
-		retval(0) = m.row_min ();
-	      else
-		retval(0) = m.column_min ();
-	    }
-	}
-      else if (arg1.is_complex_type ())
-	{
-	  ComplexMatrix m = arg1.complex_matrix_value ();
-
-	  if (! error_state)
-	    {
-	      if (m.rows () == 1)
-		retval(0) = m.row_min ();
-	      else
-		retval(0) = m.column_min ();
-	    }
-	}
-      else
-	gripe_wrong_type_arg ("min", arg1);
-    }
-  else if (nargin == 1 && nargout == 2)
-    {
-      Array<int> index;
-
-      if (arg1.is_real_type ())
-	{
-	  Matrix m = arg1.matrix_value ();
-
-	  if (! error_state)
-	    {
-	      retval.resize (2);
-
-	      if (m.rows () == 1)
-		retval(0) = m.row_min (index);
-	      else
-		retval(0) = m.column_min (index);
-	    }
-	}
-      else if (arg1.is_complex_type ())
-	{
-	  ComplexMatrix m = arg1.complex_matrix_value ();
-
-	  if (! error_state)
-	    {
-	      retval.resize (2);
-
-	      if (m.rows () == 1)
-		retval(0) = m.row_min (index);
-	      else
-		retval(0) = m.column_min (index);
-	    }
-	}
-      else
-	gripe_wrong_type_arg ("min", arg1);
-
-      int len = index.length ();
-
-      if (len > 0)
-	{
-	  RowVector idx (len);
-
-	  for (int i = 0; i < len; i++)
-	    {
-	      int tmp = index.elem (i) + 1;
-	      idx.elem (i) = (tmp <= 0)
-		? octave_NaN : static_cast<double> (tmp);
-	    }
-
-	  retval(1) = idx;
-	}
-    }
-  else if (nargin == 2)
-    {
-      int arg1_is_scalar = arg1.is_scalar_type ();
-      int arg2_is_scalar = arg2.is_scalar_type ();
-
-      int arg1_is_complex = arg1.is_complex_type ();
-      int arg2_is_complex = arg2.is_complex_type ();
-
-      if (arg1_is_scalar)
-	{
-	  if (arg1_is_complex || arg2_is_complex)
-	    {
-	      Complex c1 = arg1.complex_value ();
-	      ComplexMatrix m2 = arg2.complex_matrix_value ();
-	      if (! error_state)
-		{
-		  ComplexMatrix result = min (c1, m2);
-		  if (! error_state)
-		    retval(0) = result;
-		}
-	    }
-	  else
-	    {
-	      double d1 = arg1.double_value ();
-	      Matrix m2 = arg2.matrix_value ();
-
-	      if (! error_state)
-		{
-		  Matrix result = min (d1, m2);
-		  if (! error_state)
-		    retval(0) = result;
-		}
-	    }
-	}
-      else if (arg2_is_scalar)
-	{
-	  if (arg1_is_complex || arg2_is_complex)
-	    {
-	      ComplexMatrix m1 = arg1.complex_matrix_value ();
-
-	      if (! error_state)
-		{
-		  Complex c2 = arg2.complex_value ();
-		  ComplexMatrix result = min (m1, c2);
-		  if (! error_state)
-		    retval(0) = result;
-		}
-	    }
-	  else
-	    {
-	      Matrix m1 = arg1.matrix_value ();
-
-	      if (! error_state)
-		{
-		  double d2 = arg2.double_value ();
-		  Matrix result = min (m1, d2);
-		  if (! error_state)
-		    retval(0) = result;
-		}
-	    }
-	}
-      else
-	{
-	  if (arg1_is_complex || arg2_is_complex)
-	    {
-	      ComplexMatrix m1 = arg1.complex_matrix_value ();
-
-	      if (! error_state)
-		{
-		  ComplexMatrix m2 = arg2.complex_matrix_value ();
-
-		  if (! error_state)
-		    {
-		      ComplexMatrix result = min (m1, m2);
-		      if (! error_state)
-			retval(0) = result;
-		    }
-		}
-	    }
-	  else
-	    {
-	      Matrix m1 = arg1.matrix_value ();
-
-	      if (! error_state)
-		{
-		  Matrix m2 = arg2.matrix_value ();
-
-		  if (! error_state)
-		    {
-		      Matrix result = min (m1, m2);
-		      if (! error_state)
-			retval(0) = result;
-		    }
-		}
-	    }
-	}
-    }
-  else
-    panic_impossible ();
-
-  return retval;
+  MINMAX_BODY (min);
 }
 
 DEFUN_DLD (max, args, nargout,
   "-*- texinfo -*-\n\
 For a vector argument, return the maximum value.  For a matrix\n\
 argument, return the maximum value from each column, as a row\n\
 vector.  Thus,\n\
 \n\
@@ -529,224 +586,16 @@ If called with two output arguments, als
 maximum value(s). Thus,\n\
 @example\n
 [x, ix] = max([1, 3, 5, 2, 5])\n\
 @end example\n\
 \n\
 @noindent\n\
 returns @var{x} = 5 and @var{ix} = 3.")
 {
-  octave_value_list retval;
-
-  int nargin = args.length ();
-
-  if (nargin < 1 || nargin > 2 || nargout > 2)
-    {
-      print_usage ("max");
-      return retval;
-    }
-
-  octave_value arg1;
-  octave_value arg2;
-
-  switch (nargin)
-    {
-    case 2:
-      arg2 = args(1);
-      // Fall through...
-
-    case 1:
-      arg1 = args(0);
-      break;
-
-    default:
-      panic_impossible ();
-      break;
-    }
-
-  if (nargin == 1 && (nargout == 1 || nargout == 0))
-    {
-      if (arg1.is_real_type ())
-	{
-	  Matrix m = arg1.matrix_value ();
-
-	  if (! error_state)
-	    {
-	      if (m.rows () == 1)
-		retval(0) = m.row_max ();
-	      else
-		retval(0) = m.column_max ();
-	    }
-	}
-      else if (arg1.is_complex_type ())
-	{
-	  ComplexMatrix m = arg1.complex_matrix_value ();
-
-	  if (! error_state)
-	    {
-	      if (m.rows () == 1)
-		retval(0) = m.row_max ();
-	      else
-		retval(0) = m.column_max ();
-	    }
-	}
-      else
-	gripe_wrong_type_arg ("max", arg1);
-    }
-  else if (nargin == 1 && nargout == 2)
-    {
-      Array<int> index;
-
-      if (arg1.is_real_type ())
-	{
-	  Matrix m = arg1.matrix_value ();
-
-	  if (! error_state)
-	    {
-	      retval.resize (2);
-
-	      if (m.rows () == 1)
-		retval(0) = m.row_max (index);
-	      else
-		retval(0) = m.column_max (index);
-	    }
-	}
-      else if (arg1.is_complex_type ())
-	{
-	  ComplexMatrix m = arg1.complex_matrix_value ();
-
-	  if (! error_state)
-	    {
-	      retval.resize (2);
-
-	      if (m.rows () == 1)
-		retval(0) = m.row_max (index);
-	      else
-		retval(0) = m.column_max (index);
-	    }
-	}
-      else
-	gripe_wrong_type_arg ("max", arg1);
-
-      int len = index.length ();
-
-      if (len > 0)
-	{
-	  RowVector idx (len);
-
-	  for (int i = 0; i < len; i++)
-	    {
-	      int tmp = index.elem (i) + 1;
-	      idx.elem (i) = (tmp <= 0)
-		? octave_NaN : static_cast<double> (tmp);
-	    }
-
-	  retval(1) = idx;
-	}
-    }
-  else if (nargin == 2)
-    {
-      int arg1_is_scalar = arg1.is_scalar_type ();
-      int arg2_is_scalar = arg2.is_scalar_type ();
-
-      int arg1_is_complex = arg1.is_complex_type ();
-      int arg2_is_complex = arg2.is_complex_type ();
-
-      if (arg1_is_scalar)
-	{
-	  if (arg1_is_complex || arg2_is_complex)
-	    {
-	      Complex c1 = arg1.complex_value ();
-	      ComplexMatrix m2 = arg2.complex_matrix_value ();
-	      if (! error_state)
-		{
-		  ComplexMatrix result = max (c1, m2);
-		  if (! error_state)
-		    retval(0) = result;
-		}
-	    }
-	  else
-	    {
-	      double d1 = arg1.double_value ();
-	      Matrix m2 = arg2.matrix_value ();
-
-	      if (! error_state)
-		{
-		  Matrix result = max (d1, m2);
-		  if (! error_state)
-		    retval(0) = result;
-		}
-	    }
-	}
-      else if (arg2_is_scalar)
-	{
-	  if (arg1_is_complex || arg2_is_complex)
-	    {
-	      ComplexMatrix m1 = arg1.complex_matrix_value ();
-
-	      if (! error_state)
-		{
-		  Complex c2 = arg2.complex_value ();
-		  ComplexMatrix result = max (m1, c2);
-		  if (! error_state)
-		    retval(0) = result;
-		}
-	    }
-	  else
-	    {
-	      Matrix m1 = arg1.matrix_value ();
-
-	      if (! error_state)
-		{
-		  double d2 = arg2.double_value ();
-		  Matrix result = max (m1, d2);
-		  if (! error_state)
-		    retval(0) = result;
-		}
-	    }
-	}
-      else
-	{
-	  if (arg1_is_complex || arg2_is_complex)
-	    {
-	      ComplexMatrix m1 = arg1.complex_matrix_value ();
-
-	      if (! error_state)
-		{
-		  ComplexMatrix m2 = arg2.complex_matrix_value ();
-
-		  if (! error_state)
-		    {
-		      ComplexMatrix result = max (m1, m2);
-		      if (! error_state)
-			retval(0) = result;
-		    }
-		}
-	    }
-	  else
-	    {
-	      Matrix m1 = arg1.matrix_value ();
-
-	      if (! error_state)
-		{
-		  Matrix m2 = arg2.matrix_value ();
-
-		  if (! error_state)
-		    {
-		      Matrix result = max (m1, m2);
-		      if (! error_state)
-			retval(0) = result;
-		    }
-		}
-	    }
-	}
-    }
-  else
-    panic_impossible ();
-
-  return retval;
+  MINMAX_BODY (max);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/DLD-FUNCTIONS/quad.cc b/src/DLD-FUNCTIONS/quad.cc
--- a/src/DLD-FUNCTIONS/quad.cc
+++ b/src/DLD-FUNCTIONS/quad.cc
@@ -99,25 +99,25 @@ quad_user_function (double x)
       unwind_protect::run_frame ("Fquad"); \
       return retval; \
     } \
   while (0)
 
 #define QUAD_ABORT1(msg) \
   do \
     { \
-      ::error ("quad: " ## msg); \
+      ::error ("quad: " msg); \
       QUAD_ABORT (); \
     } \
   while (0)
 
 #define QUAD_ABORT2(fmt, arg) \
   do \
     { \
-      ::error ("quad: " ## fmt, arg); \
+      ::error ("quad: " fmt, arg); \
       QUAD_ABORT (); \
     } \
   while (0)
 
 DEFUN_DLD (quad, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {[@var{v}, @var{ier}, @var{nfun}, @var{err}] =} quad (@var{f}, @var{a}, @var{b}, @var{tol}, @var{sing})\n\
 Integrate a nonlinear function of one variable using Quadpack.\n\
diff --git a/src/help.cc b/src/help.cc
--- a/src/help.cc
+++ b/src/help.cc
@@ -634,17 +634,17 @@ display_help_text (std::ostream& os, con
       if (filter && filter.is_open ())
 	{
 	  filter << "@macro seealso {args}\n"
 		 << "\n"
 		 << "@noindent\n"
 		 << "See also: \\args\\.\n"
                  << "@end macro\n";
 
-	  filter << msg.substr (pos+1);
+	  filter << msg.substr (pos+1) << endl;
 
 	  int status = filter.close ();
 
 	  std::ifstream tmp_file (tmp_file_name.c_str ());
 
 	  if (WIFEXITED (status) && WEXITSTATUS (status) == 0)
 	    {
 	      int c;
