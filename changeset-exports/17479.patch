# HG changeset patch
# User Rik <rik@octave.org>
# Date 1380122797 25200
#      Wed Sep 25 08:26:37 2013 -0700
# Node ID bdb237c7507ccbe1b602ce2a635712bb3917f977
# Parent  0ad2f93fd83c2c25a917e87a76fee27ef5315d05
doc: Redo fplot docstring.

* scripts/plot/fplot.m: Redo fplot docstring.

diff --git a/scripts/plot/fplot.m b/scripts/plot/fplot.m
--- a/scripts/plot/fplot.m
+++ b/scripts/plot/fplot.m
@@ -13,35 +13,39 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} fplot (@var{fn}, @var{limits})
-## @deftypefnx {Function File} {} fplot (@var{fn}, @var{limits}, @var{tol})
-## @deftypefnx {Function File} {} fplot (@var{fn}, @var{limits}, @var{n})
-## @deftypefnx {Function File} {} fplot (@var{fn}, @var{limits}, @var{fmt})
-## @deftypefnx {Function File} {} fplot (@var{fn}, @var{limits}, @var{tol}, @var{n}, @var{fmt})
+## @deftypefnx {Function File} {} fplot (@dots{}, @var{tol})
+## @deftypefnx {Function File} {} fplot (@dots{}, @var{n})
+## @deftypefnx {Function File} {} fplot (@dots{}, @var{fmt})
 ## @deftypefnx {Function File} {[@var{x}, @var{y}] =} fplot (@dots{})
 ## Plot a function @var{fn} within the range defined by @var{limits}.
 ##
-## @var{fn} is a function handle, inline function, or string
-## containing the name of the function to evaluate.
-## The limits of the plot are of the form @code{[@var{xlo}, @var{xhi}]} or
-## @code{[@var{xlo}, @var{xhi}, @var{ylo}, @var{yhi}]}.
+## @var{fn} is a function handle, inline function, or string containing the
+## name of the function to evaluate.
+##
+## The limits of the plot are of the form @w{@code{[@var{xlo}, @var{xhi}]}} or
+## @w{@code{[@var{xlo}, @var{xhi}, @var{ylo}, @var{yhi}]}}.
+##
 ## The next three arguments are all optional and any number of them may be
 ## given in any order.
+##
 ## @var{tol} is the relative tolerance to use for the plot and defaults
 ## to 2e-3 (.2%).
-## @var{n} is the minimum number of points to use.  When @var{n} is
-## specified, the maximum stepsize will be
-## @code{@var{xhi} - @var{xlo} / @var{n}}.  More than @var{n} points may still
-## be used in order to meet the relative tolerance requirement.
+##
+## @var{n} is the minimum number of points to use.  When @var{n} is specified,
+## the maximum stepsize will be @code{@var{xhi} - @var{xlo} / @var{n}}.  More
+## than @var{n} points may still be used in order to meet the relative
+## tolerance requirement.
+##
 ## The @var{fmt} argument specifies the linestyle to be used by the plot
 ## command.
 ##
 ## If the first argument @var{hax} is an axes handle, then plot into this axis,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## With no output arguments the results are immediately plotted.  With two
 ## output arguments the 2-D plot data is returned.  The data can subsequently
@@ -132,18 +136,18 @@ function [X, Y] = fplot (varargin)
     y = repmat (y, size (x));
   endif
 
   err0 = Inf;
 
   ## FIXME: This algorithm should really use adaptive scaling as the 
   ##        the numerical quadrature algorithms do so that extra points are
   ##        used where they are needed and not spread evenly over the entire
-  ##        x-range.  Try any function with a discontinuity such as
-  ##        fplot (@tan, [-2, 2]) or fplot ("1./x", [-3, 2]) to see the
+  ##        x-range.  Try any function with a discontinuity, such as
+  ##        fplot (@tan, [-2, 2]) or fplot ("1./x", [-3, 2]), to see the
   ##        problems with the current solution.
 
   while (n < 2^18)    # Something is wrong if we need more than 250K points
     yi = interp1 (x0, y0, x, "linear");
     ## relative error calculation using average of [yi,y] as reference
     ## since neither estimate is known a priori to be better than the other.
     err = 0.5 * max (abs ((yi - y) ./ (yi + y))(:));
     if (err < tol || abs (err - err0) < tol/2)
