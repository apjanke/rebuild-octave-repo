# HG changeset patch
# User jwe
# Date 774729558 0
#      Wed Jul 20 18:39:18 1994 +0000
# Node ID 2814c75c8398fb8854d5b1f69d1f9f91f4cc98b0
# Parent  4a07f0083ab06021c503544143144e1215e9b15f
[project @ 1994-07-20 18:36:24 by jwe]

diff --git a/src/procstream.cc b/src/procstream.cc
--- a/src/procstream.cc
+++ b/src/procstream.cc
@@ -31,25 +31,25 @@ Software Foundation, 675 Mass Ave, Cambr
 
 #include "procstream.h"
 
 procstreambase::procstreambase (void)
 {
   init (new procbuf ());
 }
 
-procstreambase::procstreambase (const char *command, int mode = ios::out)
+procstreambase::procstreambase (const char *command, int mode)
 {
   init (new procbuf ());
   if (! rdbuf()->open (command, mode))
     set (ios::badbit);
 }
 
 void
-procstreambase::open (const char *command, int mode = ios::out)
+procstreambase::open (const char *command, int mode)
 {
   clear ();
   if (! rdbuf()->open (command, mode))
     set (ios::badbit);
 }
 
 int
 procstreambase::close (void)
diff --git a/src/pt-plot.cc b/src/pt-plot.cc
--- a/src/pt-plot.cc
+++ b/src/pt-plot.cc
@@ -20,54 +20,73 @@ along with Octave; see the file COPYING.
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include "config.h"
 #endif
 
+#if defined (__GNUG__)
+#pragma implementation
+#endif
+
+#include <sys/types.h>
+#ifdef HAVE_UNISTD_H
+#include <unistd.h>
+#endif
 #include <iostream.h>
 #include <fstream.h>
 #include <strstream.h>
 
+#include "SLStack.h"
+#include "procstream.h"
+
+#include "user-prefs.h"
+#include "tree-const.h"
+#include "tree-plot.h"
 #include "error.h"
 #include "utils.h"
 #include "tree.h"
-#include "tree-const.h"
-#include "tree-plot.h"
+#include "defun.h"
 
 extern "C"
 {
   char *tilde_expand (char *s); /* From readline's tilde.c */
 }
 
 // The number of lines we\'ve plotted so far.
 int plot_line_count;
 
 // Is this a parametric plot?  Makes a difference for 3D plotting.
 int parametric_plot = 0;
 
 // Should the graph window be cleared before plotting the next line?
 int clear_before_plotting = 1;
 
+// List of files to delete when we exit or crash.
+static SLStack <char *> tmp_files;
+
+// Pipe to gnuplot.
+static oprocstream plot_stream;
+
 /*
  * Plotting, eh?
  */
 
 tree_plot_command::tree_plot_command (void)
 {
-  range = (tree_plot_limits *) NULL;
-  plot_list = (tree_subplot_list *) NULL;
+  range = 0;
+  plot_list = 0;
   ndim = 0;
 }
 
 tree_plot_command::tree_plot_command (tree_subplot_list *plt, int nd)
 {
-  range = (tree_plot_limits *) NULL;
+  range = 0;
   plot_list = plt;
   ndim = nd;
 }
 
 tree_plot_command::tree_plot_command (tree_subplot_list *plt,
 				      tree_plot_limits *rng, int nd)
 {
   range = rng;
@@ -122,30 +141,29 @@ tree_plot_command::eval (int print)
 	plot_buf << "splot";
       }
       break;
     default:
       panic_impossible ();
       break;
     }
 
-  if (range != (tree_plot_limits *) NULL)
+  if (range)
     {
       if (plot_line_count == 0)
 	range->print (ndim, plot_buf);
       else
 	warning ("can't specify new plot ranges with `replot' or while\
  hold is on");
     }
 
   if (error_state)
     return retval;
 
-  tree_subplot_list *ptr = plot_list;
-  for ( ; ptr != (tree_subplot_list *) NULL; ptr = ptr->next_elem ())
+  for (tree_subplot_list *ptr = plot_list; ptr; ptr = ptr->next_elem ())
     {
       plot_line_count++;
 
       if (ptr != plot_list)
 	plot_buf << ",\\\n  ";
 
       int status = ptr->print (ndim, plot_buf);
       if (status < 0)
@@ -174,50 +192,50 @@ tree_plot_command::eval (int print)
       delete [] message;
     }
 
   return retval;
 }
 
 tree_subplot_list::tree_subplot_list (void)
 {
-  plot_data = (tree_expression *) NULL;
-  using = (tree_subplot_using *) NULL;
-  title = (tree_expression *) NULL;
-  style = (tree_subplot_style *) NULL;
-  next = (tree_subplot_list *) NULL;
+  plot_data = 0;
+  using = 0;
+  title = 0;
+  style = 0;
+  next = 0;
 }
 
 tree_subplot_list::tree_subplot_list (tree_expression *data)
 {
   plot_data = data;
-  using = (tree_subplot_using *) NULL;
-  title = (tree_expression *) NULL;
-  style = (tree_subplot_style *) NULL;
-  next = (tree_subplot_list *) NULL;
+  using = 0;
+  title = 0;
+  style = 0;
+  next = 0;
 }
 
 tree_subplot_list::tree_subplot_list (tree_subplot_list *t)
 {
   plot_data = t->plot_data;
   using = t->using;
   title = t->title;
   style = t->style;
   next = t->next;
 }
 
 tree_subplot_list::tree_subplot_list (tree_subplot_using *u,
 				      tree_expression *t,
 				      tree_subplot_style *s)
 {
-  plot_data = (tree_expression *) NULL;
+  plot_data = 0;
   using = u;
   title = t;
   style = s;
-  next = (tree_subplot_list *) NULL;
+  next = 0;
 }
 
 tree_subplot_list::~tree_subplot_list (void)
 {
   delete plot_data;
   delete using;
   delete title;
   delete style;
@@ -239,19 +257,19 @@ tree_subplot_list::chain (tree_subplot_l
   return tmp;
 }
 
 tree_subplot_list *
 tree_subplot_list::reverse (void)
 {
   tree_subplot_list *list = this;
   tree_subplot_list *next;
-  tree_subplot_list *prev = (tree_subplot_list *) NULL;
+  tree_subplot_list *prev = 0;
 
-  while (list != (tree_subplot_list *) NULL)
+  while (list)
     {
       next = list->next;
       list->next = prev;
       prev = list;
       list = next;
     }
   return prev;
 }
@@ -267,36 +285,36 @@ tree_subplot_list::eval (int print)
 {
   return plot_data->eval (0);
 }
 
 int
 tree_subplot_list::print (int ndim, ostrstream& plot_buf)
 {
   int nc = 0;
-  if (plot_data != (tree_expression *) NULL)
+  if (plot_data)
     {
       tree_constant data = plot_data->eval (0);
       if (! error_state && data.is_defined ())
 	{
-	  char *file = (char *) NULL;
+	  char *file = 0;
 	  if (data.is_string_type ())
 	    {
 	      file = tilde_expand (data.string_value ());
 	      ifstream ftmp (file);
 	      if (ftmp)
 		{
 		  plot_buf << " \"" << file << '"';
 		  free (file);
 		  goto have_existing_file_or_command;
 		}
 	      else
 		{
 		  free (file);
-		  file = (char *) NULL;
+		  file = 0;
 
 // Opening as a file failed.  Let's try passing it along as a plot
 // command.
 		  plot_buf << " " << data.string_value ();
 		  goto have_existing_file_or_command;
 		}
 	    }
 
@@ -323,67 +341,67 @@ tree_subplot_list::print (int ndim, ostr
       else
 	return -1;
     }
   else
     return -1;
 
  have_existing_file_or_command:
 
-  if (using != (tree_subplot_using *) NULL)
+  if (using)
     {
       int status = using->print (ndim, nc, plot_buf);
       if (status < 0)
 	return -1;
     }
 
-  if (title != (tree_expression *) NULL)
+  if (title)
     {
       tree_constant tmp = title->eval (0);
       if (! error_state && tmp.is_string_type ())
 	plot_buf << " title " << '"' << tmp.string_value () << '"';
       else
 	{
 	  warning ("line title must be a string");
 	  plot_buf << " title " << '"' << "line " << plot_line_count << '"';
 	}
     }
   else
     plot_buf << " title " << '"' << "line " << plot_line_count << '"';
 
-  if (style != (tree_subplot_style *) NULL)
+  if (style)
     {
       int status = style->print (plot_buf);
       if (status < 0)
 	return -1;
     }
 
   return 0;
 }
 
 tree_plot_limits::tree_plot_limits (void)
 {
-  x_range = (tree_plot_range *) NULL;
-  y_range = (tree_plot_range *) NULL;
-  z_range = (tree_plot_range *) NULL;
+  x_range = 0;
+  y_range = 0;
+  z_range = 0;
 }
 
 tree_plot_limits::tree_plot_limits (tree_plot_range *xlim)
 {
   x_range = xlim;
-  y_range = (tree_plot_range *) NULL;
-  z_range = (tree_plot_range *) NULL;
+  y_range = 0;
+  z_range = 0;
 }
 
 tree_plot_limits::tree_plot_limits (tree_plot_range *xlim,
 				    tree_plot_range *ylim)
 {
   x_range = xlim;
   y_range = ylim;
-  z_range = (tree_plot_range *) NULL;
+  z_range = 0;
 }
 
 tree_plot_limits::tree_plot_limits (tree_plot_range *xlim,
 				    tree_plot_range *ylim,
 				    tree_plot_range *zlim)
 {
   x_range = xlim;
   y_range = ylim;
@@ -404,35 +422,35 @@ tree_plot_limits::eval (int print)
   return retval;
 }
 
 void
 tree_plot_limits::print (int ndim, ostrstream& plot_buf)
 {
   if (ndim  == 2 || ndim == 3)
     {
-      if (x_range != (tree_plot_range *) NULL)
+      if (x_range)
 	x_range->print (plot_buf);
       else
 	return;
 
-      if (y_range != (tree_plot_range *) NULL)
+      if (y_range)
 	y_range->print (plot_buf);
       else
 	return;
     }
 
-  if (ndim == 3 && z_range != (tree_plot_range *) NULL)
+  if (ndim == 3 && z_range)
     z_range->print (plot_buf);
 }
 
 tree_plot_range::tree_plot_range (void)
 {
-  lower = (tree_expression *) NULL;
-  upper = (tree_expression *) NULL;
+  lower = 0;
+  upper = 0;
 }
 
 tree_plot_range::tree_plot_range (tree_expression *l, tree_expression *u)
 {
   lower = l;
   upper = u;
 }
 
@@ -449,34 +467,34 @@ tree_plot_range::eval (int print)
   return retval;
 }
 
 void
 tree_plot_range::print (ostrstream& plot_buf)
 {
   plot_buf << " [";
 
-  if (lower != (tree_expression *) NULL)
+  if (lower)
     {
       tree_constant lower_val = lower->eval (0);
       if (error_state)
 	{
 	  ::error ("evaluating lower bound of plot range");
 	  return;
 	}
       else
 	{
 	  double lo = lower_val.to_scalar ();
 	  plot_buf << lo;
 	}
     }
 
   plot_buf << ":";
 
-  if (upper != (tree_expression *) NULL)
+  if (upper)
     {
       tree_constant upper_val = upper->eval (0);
       if (error_state)
 	{
 	  ::error ("evaluating upper bound of plot range");
 	  return;
 	}
       else
@@ -487,30 +505,30 @@ tree_plot_range::print (ostrstream& plot
     }
 
   plot_buf << "]";
 }
 
 tree_subplot_using::tree_subplot_using (void)
 {
   qualifier_count = 0;
-  x[0] = (tree_expression *) NULL;
-  x[1] = (tree_expression *) NULL;
-  x[2] = (tree_expression *) NULL;
-  x[3] = (tree_expression *) NULL;
-  scanf_fmt = (tree_expression *) NULL;
+  x[0] = 0;
+  x[1] = 0;
+  x[2] = 0;
+  x[3] = 0;
+  scanf_fmt = 0;
 }
 
 tree_subplot_using::tree_subplot_using (tree_expression *fmt)
 {
   qualifier_count = 0;
-  x[0] = (tree_expression *) NULL;
-  x[1] = (tree_expression *) NULL;
-  x[2] = (tree_expression *) NULL;
-  x[3] = (tree_expression *) NULL;
+  x[0] = 0;
+  x[1] = 0;
+  x[2] = 0;
+  x[3] = 0;
   scanf_fmt = fmt;
 }
 
 tree_subplot_using::~tree_subplot_using (void)
 {
   delete scanf_fmt;
 }
 
@@ -543,17 +561,17 @@ int
 tree_subplot_using::print (int ndim, int n_max, ostrstream& plot_buf)
 {
   if ((ndim == 2 && qualifier_count > 4)
       || (ndim == 3 && qualifier_count > 3))
     return -1;
 
   for (int i = 0; i < qualifier_count; i++)
     {
-      if (x[i] != (tree_expression *) NULL)
+      if (x[i])
 	{
 	  tree_constant tmp = x[i]->eval (0);
 	  if (error_state)
 	    {
 	      ::error ("evaluating plot using command");
 	      return -1;
 	    }
 
@@ -578,41 +596,41 @@ tree_subplot_using::print (int ndim, int
 	    }
 	  else
 	    return -1;
 	}
       else
 	return -1;
     }
 
-  if (scanf_fmt != (tree_expression *) NULL)
+  if (scanf_fmt)
     warning ("ignoring scanf format in plot command");
 
   return 0;
 }
 
 tree_subplot_style::tree_subplot_style (void)
 {
-  style = (char *) NULL;
-  linetype = (tree_expression *) NULL;
-  pointtype = (tree_expression *) NULL;
+  style = 0;
+  linetype = 0;
+  pointtype = 0;
 }
 
 tree_subplot_style::tree_subplot_style (char *s)
 {
   style = strsave (s);
-  linetype = (tree_expression *) NULL;
-  pointtype = (tree_expression *) NULL;
+  linetype = 0;
+  pointtype = 0;
 }
 
 tree_subplot_style::tree_subplot_style (char *s, tree_expression *lt)
 {
   style = strsave (s);
   linetype = lt;
-  pointtype = (tree_expression *) NULL;
+  pointtype = 0;
 }
 
 tree_subplot_style::tree_subplot_style (char *s, tree_expression *lt,
 					tree_expression *pt)
 {
   style = strsave (s);
   linetype = lt;
   pointtype = pt;
@@ -630,36 +648,36 @@ tree_subplot_style::eval (int print)
 {
   tree_constant retval;
   return retval;
 }
 
 int
 tree_subplot_style::print (ostrstream& plot_buf)
 {
-  if (style != (char *) NULL)
+  if (style)
     {
       plot_buf << " with " << style;
 
-      if (linetype != (tree_expression *) NULL)
+      if (linetype)
 	{
 	  tree_constant tmp = linetype->eval (0);
 	  if (! error_state && tmp.is_defined ())
 	    {
 	      double val = tmp.to_scalar ();
 	      plot_buf << " " << NINT (val);
 	    }
 	  else
 	    {
 	      ::error ("evaluating plot style command");
 	      return -1;
 	    }
 	}
 
-      if (pointtype != (tree_expression *) NULL)
+      if (pointtype)
 	{
 	  tree_constant tmp = pointtype->eval (0);
 	  if (! error_state && tmp.is_defined ())
 	    {
 	      double val = tmp.to_scalar ();
 	      plot_buf << " " << NINT (val);
 	    }
 	  else
@@ -670,14 +688,241 @@ tree_subplot_style::print (ostrstream& p
 	}
     }
   else
     return -1;
 
   return 0;
 }
 
+char *
+save_in_tmp_file (tree_constant& t, int ndim, int parametric)
+{
+  char *name = strsave (tmpnam (0));
+  if (name)
+    {
+      ofstream file (name);
+      if (file)
+	{
+	  switch (ndim)
+	    {
+	    case 2:
+	      t.save (file);
+	      break;
+	    case 3:
+	      t.save_three_d (file, parametric);
+	      break;
+	    default:
+	      panic_impossible ();
+	      break;
+	    }
+	}
+      else
+	{
+	  error ("couldn't open temporary output file `%s'", name);
+	  delete [] name;
+	  name = 0;
+	}
+    }
+  return name;
+}
+
+void
+mark_for_deletion (const char *filename)
+{
+  char *tmp = strsave (filename);
+  tmp_files.push (tmp);
+}
+
+void
+cleanup_tmp_files (void)
+{
+  while (! tmp_files.empty ())
+    {
+      char *filename = tmp_files.pop ();
+      unlink (filename);
+      delete [] filename;
+    }
+}
+
+int
+send_to_plot_stream (const char *cmd)
+{
+// From sighandlers.cc:
+  extern int pipe_handler_error_count;
+
+  static int initialized = 0;
+
+  if (! plot_stream.is_open ())
+    {
+      plot_line_count = 0;
+
+      char *plot_prog = user_pref.gnuplot_binary;
+      if (plot_prog)
+	{
+	  plot_stream.open (plot_prog);
+	  if (! plot_stream.is_open ())
+	    {
+	      warning ("plot: unable to open pipe to `%s'",
+		       plot_prog);
+
+	      if (strcmp (plot_prog, "gnuplot") != 0)
+		{
+		  warning ("having trouble finding plotting program.");
+		  warning ("trying again with `gnuplot'");
+		  goto last_chance;
+		}
+	    }
+	}
+      else
+	{
+	last_chance:
+
+	  plot_stream.open ("gnuplot");
+
+	  if (! plot_stream.is_open ())
+	    {
+	      error ("plot: unable to open pipe to `%s'", plot_prog);
+	      return -1;
+	    }
+	}
+    }
+
+  if (! initialized)
+    {
+      initialized = 1;
+      plot_stream << "set data style lines\n";
+    }
+
+  plot_stream << cmd;
+  plot_stream.flush ();
+  pipe_handler_error_count = 0;
+
+  return 0;
+}
+
+void
+close_plot_stream (void)
+{
+  if (plot_stream.is_open ())
+    plot_stream.close ();
+
+  plot_line_count = 0;
+}
+
+DEFUN ("closeplot", Fcloseplot, Scloseplot, 1, 0,
+  "closeplot (): close the stream to plotter")
+{
+  Octave_object retval;
+  close_plot_stream ();
+  return retval;
+}
+
+DEFUN_TEXT ("hold", Fhold, Shold, -1, 1,
+  "hold [on|off]\n\
+\n\
+determine whether the plot window is cleared before the next line is\n\
+drawn.  With no argument, toggle the current state.") 
+{
+  Octave_object retval;
+
+  DEFINE_ARGV("hold");
+
+  switch (argc)
+    {
+    case 1:
+      clear_before_plotting = ! clear_before_plotting;
+      break;
+    case 2:
+      if (strcasecmp (argv[1], "on") == 0)
+	clear_before_plotting = 0;
+      else if (strcasecmp (argv[1], "off") == 0)
+	clear_before_plotting = 1;
+      else
+	print_usage ("hold");
+      break;
+    default:
+      print_usage ("hold");
+      break;
+    }
+
+  DELETE_ARGV;
+
+  return retval;
+}
+
+DEFUN ("purge_tmp_files", Fpurge_tmp_files, Spurge_tmp_files, 5, 1,
+  "delete temporary data files used for plotting")
+{
+  Octave_object retval;
+  cleanup_tmp_files ();
+  return retval;
+}
+
+DEFUN_TEXT ("set", Fset, Sset, -1, 1,
+  "set [options]\n\
+\n\
+set plotting options")
+{
+  Octave_object retval;
+
+  DEFINE_ARGV("set");
+
+  ostrstream plot_buf;
+
+  if (argc > 1)
+    {
+      if (almost_match ("parametric", argv[1], 3))
+	parametric_plot = 1;
+      else if (almost_match ("noparametric", argv[1], 5))
+	parametric_plot = 0;
+    }
+
+  for (int i = 0; i < argc; i++)
+    plot_buf << argv[i] << " ";
+
+  plot_buf << "\n" << ends;
+
+  char *plot_command = plot_buf.str ();
+  send_to_plot_stream (plot_command);
+
+  delete [] plot_command;
+
+  DELETE_ARGV;
+
+  return retval;
+}
+
+/*
+ * Set plotting options.
+ */
+DEFUN_TEXT ("show", Fshow, Sshow, -1, 1,
+  "show [options]\n\
+\n\
+show plotting options")
+{
+  Octave_object retval;
+
+  DEFINE_ARGV("show");
+
+  ostrstream plot_buf;
+
+  for (int i = 0; i < argc; i++)
+    plot_buf << argv[i] << " ";
+
+  plot_buf << "\n" << ends;
+
+  char *plot_command = plot_buf.str ();
+  send_to_plot_stream (plot_command);
+
+  delete [] plot_command;
+
+  DELETE_ARGV;
+
+  return retval;
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/src/pt-plot.h b/src/pt-plot.h
--- a/src/pt-plot.h
+++ b/src/pt-plot.h
@@ -23,27 +23,28 @@ Software Foundation, 675 Mass Ave, Cambr
 
 #if !defined (octave_tree_plot_h)
 #define octave_tree_plot_h 1
 
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
+class tree_command;
 class tree_plot_limits;
 class tree_plot_range;
 class tree_subplot;
 class tree_subplot_using;
 class tree_subplot_style;
 class tree_subplot_list;
 class tree_plot_command;
 
 class ostream;
 
-#include "tree-base.h"
+#include "tree.h"
 
 class
 tree_plot_command : public tree_command
 {
  public:
   tree_plot_command (void);
   tree_plot_command (tree_subplot_list *plt, int nd);
   tree_plot_command (tree_subplot_list *plt, tree_plot_limits *rng, int nd);
@@ -169,16 +170,27 @@ tree_subplot_style : public tree
   int print (ostrstream& plot_buf);
 
  private:
   char *style;
   tree_expression *linetype;
   tree_expression *pointtype;
 };
 
+extern char *save_in_tmp_file (tree_constant& t, int ndim = 2,
+			       int parametric = 0);
+
+extern void mark_for_deletion (const char *filename);
+
+extern void cleanup_tmp_files (void);
+
+extern int send_to_plot_stream (const char *cmd);
+
+extern void close_plot_stream (void);
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
