# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1463698044 25200
#      Thu May 19 15:47:24 2016 -0700
# Node ID 61f3575250e45eacf26fb109fd629de8234d1842
# Parent  ac8b8bdae98f3a669ebdcfdef19991ed8c6ce3c7
rats: Fix round-off corner case for 32-bit systems (bug #47964)

* pr-output.cc (rational_approx): Invert convergence test to prevent
aborting early due to round-off error in 32-bit environments.  Use std::abs
instead of fabs.

diff --git a/libinterp/corefcn/pr-output.cc b/libinterp/corefcn/pr-output.cc
--- a/libinterp/corefcn/pr-output.cc
+++ b/libinterp/corefcn/pr-output.cc
@@ -384,17 +384,17 @@ rational_approx (double val, int len)
       while (1)
         {
           double flip = 1. / frac;
           double step = xround (flip);
           double nextn = n;
           double nextd = d;
 
           // Have we converged to 1/intmax ?
-          if (fabs (frac) < 1 / static_cast<double> (std::numeric_limits<int>::max ()))
+          if (std::abs (flip) > static_cast<double> (std::numeric_limits<int>::max ()))
             {
               lastn = n;
               lastd = d;
               break;
             }
 
           frac = flip - step;
           n = step * n + lastn;
@@ -412,18 +412,18 @@ rational_approx (double val, int len)
             {
               // Double negative, string can be two characters longer..
               if (buf.str ().length () > static_cast<unsigned int>(len + 2))
                 break;
             }
           else if (buf.str ().length () > static_cast<unsigned int>(len))
             break;
 
-          if (fabs (n) > std::numeric_limits<int>::max ()
-              || fabs (d) > std::numeric_limits<int>::max ())
+          if (std::abs (n) > std::numeric_limits<int>::max ()
+              || std::abs (d) > std::numeric_limits<int>::max ())
             break;
 
           s = buf.str ();
         }
 
       if (lastd < 0.)
         {
           // Move sign to the top
