# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1492707152 14400
#      Thu Apr 20 12:52:32 2017 -0400
# Node ID 872f42fb26dcc9bd1c74cd2a65bd56723a0ebb1b
# Parent  50fc8edb007b292a134a78de92d1bf093e9e7447
let walker visit tree_boolean and tree_compound_binary expressions directly

* pt-walk.cc: New file.
* module.mk: Update

* pt-walk.h, pt-walk.cc (tree_walker::visit_boolean_expression,
  tree_walker::visit_compound_binary_expression): New methods.

* pt-binop.h, pt-binop.cc (tree_boolean_expression::accept):
New function.
* pt-cbinop.h, pt-cbinop.cc (tree_compound_binary_expression::accept):
Likewise.

diff --git a/libinterp/parse-tree/module.mk b/libinterp/parse-tree/module.mk
--- a/libinterp/parse-tree/module.mk
+++ b/libinterp/parse-tree/module.mk
@@ -76,16 +76,17 @@ PARSE_TREE_SRC = \
   libinterp/parse-tree/pt-jump.cc \
   libinterp/parse-tree/pt-loop.cc \
   libinterp/parse-tree/pt-mat.cc \
   libinterp/parse-tree/pt-misc.cc \
   libinterp/parse-tree/pt-pr-code.cc \
   libinterp/parse-tree/pt-select.cc \
   libinterp/parse-tree/pt-stmt.cc \
   libinterp/parse-tree/pt-unop.cc \
+  libinterp/parse-tree/pt-walk.cc \
   libinterp/parse-tree/pt.cc \
   libinterp/parse-tree/token.cc
 
 ## Special rules for sources which must be built before rest of compilation.
 
 ## Don't use a pipeline to process gperf output since if gperf
 ## is missing but sed is not, the exit status of the pipeline
 ## will still be success and we will end up creating an empty
diff --git a/libinterp/parse-tree/pt-binop.cc b/libinterp/parse-tree/pt-binop.cc
--- a/libinterp/parse-tree/pt-binop.cc
+++ b/libinterp/parse-tree/pt-binop.cc
@@ -250,9 +250,15 @@ namespace octave
       = new tree_boolean_expression (op_lhs ? op_lhs->dup (scope, context) : 0,
                                      op_rhs ? op_rhs->dup (scope, context) : 0,
                                      line (), column (), etype);
 
     new_be->copy_base (*this);
 
     return new_be;
   }
+
+  void
+  tree_boolean_expression::accept (tree_walker& tw)
+  {
+    tw.visit_boolean_expression (*this);
+  }
 }
diff --git a/libinterp/parse-tree/pt-binop.h b/libinterp/parse-tree/pt-binop.h
--- a/libinterp/parse-tree/pt-binop.h
+++ b/libinterp/parse-tree/pt-binop.h
@@ -171,16 +171,18 @@ namespace octave
 
     std::string oper (void) const;
 
     type op_type (void) const { return etype; }
 
     tree_expression *dup (symbol_table::scope_id scope,
                           symbol_table::context_id context) const;
 
+    void accept (tree_walker& tw);
+
   private:
 
     // The type of the expression.
     type etype;
   };
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
diff --git a/libinterp/parse-tree/pt-cbinop.cc b/libinterp/parse-tree/pt-cbinop.cc
--- a/libinterp/parse-tree/pt-cbinop.cc
+++ b/libinterp/parse-tree/pt-cbinop.cc
@@ -234,9 +234,15 @@ namespace octave
     tree_binary_expression *ret = (ct == octave_value::unknown_compound_binary_op)
       ? new tree_binary_expression (a, b, l, c, t)
       : new tree_compound_binary_expression (a, b, l,
                                              c, t, ca,
                                              cb, ct);
 
     return ret;
   }
+
+  void
+  tree_compound_binary_expression::accept (tree_walker& tw)
+  {
+    tw.visit_compound_binary_expression (*this);
+  }
 }
diff --git a/libinterp/parse-tree/pt-cbinop.h b/libinterp/parse-tree/pt-cbinop.h
--- a/libinterp/parse-tree/pt-cbinop.h
+++ b/libinterp/parse-tree/pt-cbinop.h
@@ -56,16 +56,18 @@ namespace octave
     octave_value::compound_binary_op cop_type (void) const { return etype; }
 
     bool rvalue_ok (void) const { return true; }
 
     octave_value rvalue1 (int nargout = 1);
 
     octave_value_list rvalue (int nargout);
 
+    void accept (tree_walker& tw);
+
   private:
 
     tree_expression *op_lhs;
     tree_expression *op_rhs;
     octave_value::compound_binary_op etype;
 
     // No copying!
 
diff --git a/libinterp/parse-tree/pt-walk.cc b/libinterp/parse-tree/pt-walk.cc
new file mode 100644
--- /dev/null
+++ b/libinterp/parse-tree/pt-walk.cc
@@ -0,0 +1,44 @@
+/*
+
+Copyright (C) 2017 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 3 of the License, or
+(at your option) any later version.
+
+Octave is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+#if defined (HAVE_CONFIG_H)
+#  include "config.h"
+#endif
+
+#include "pt-binop.h"
+#include "pt-cbinop.h"
+#include "pt-walk.h"
+
+namespace octave
+{
+  void
+  tree_walker::visit_boolean_expression (tree_boolean_expression& expr)
+  {
+    visit_binary_expression (expr);
+  }
+
+  void
+  tree_walker::visit_compound_binary_expression (tree_compound_binary_expression& expr)
+  {
+    visit_binary_expression (expr);
+  }
+}
diff --git a/libinterp/parse-tree/pt-walk.h b/libinterp/parse-tree/pt-walk.h
--- a/libinterp/parse-tree/pt-walk.h
+++ b/libinterp/parse-tree/pt-walk.h
@@ -25,19 +25,28 @@ along with Octave; see the file COPYING.
 
 #include "octave-config.h"
 
 class octave_user_script;
 class octave_user_function;
 
 namespace octave
 {
+  // No separate visitor needed
+  // Base classes only, so no need to include them.
+  //
+  //  class tree_array_list
+  //  class tree_unary_expression
+  //  class tree_black_hole
+
   class tree_anon_fcn_handle;
   class tree_argument_list;
   class tree_binary_expression;
+  class tree_boolean_expression;
+  class tree_compound_binary_expression;
   class tree_break_command;
   class tree_colon_expression;
   class tree_continue_command;
   class tree_global_command;
   class tree_persistent_command;
   class tree_decl_elt;
   class tree_decl_init_list;
   class tree_simple_for_command;
@@ -110,16 +119,22 @@ namespace octave
 
     virtual void
     visit_argument_list (tree_argument_list&) = 0;
 
     virtual void
     visit_binary_expression (tree_binary_expression&) = 0;
 
     virtual void
+    visit_boolean_expression (tree_boolean_expression& expr);
+
+    virtual void
+    visit_compound_binary_expression (tree_compound_binary_expression& expr);
+
+    virtual void
     visit_break_command (tree_break_command&) = 0;
 
     virtual void
     visit_colon_expression (tree_colon_expression&) = 0;
 
     virtual void
     visit_continue_command (tree_continue_command&) = 0;
 
