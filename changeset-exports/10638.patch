# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1274100116 -7200
#      Mon May 17 14:41:56 2010 +0200
# Node ID e1559a8a60b429d74cfe33eece5b6c171406b1c6
# Parent  9cd5aa83fa62ad38e83057c7bba055c267350cb9
general mechanism for string enum variables

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2010-05-17  Jaroslav Hajek  <highegg@gmail.com>
+
+	* variables.cc (set_internal_variable (int&, ..., const char **, int)):
+	New overload.
+	* variables.h: Declare it.
+	(SET_INTERNAL_VARIABLE_CHOICES): New macro.
+	* DLD-FUNCTIONS/svd.cc (Fsvd_driver): Use it here.
+
 2010-05-17  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-usr-fcn.h (octave_user_function::curr_unwind_protect_frame): New
 	field.
 	(octave_user_function::local_protect): New template method.
 	* ov-usr-fcn.cc (octave_user_function::octave_user_function):
 	Initialize it here.
 	(octave_user_function::do_multi_index_op): Set and restore it here.
diff --git a/src/DLD-FUNCTIONS/svd.cc b/src/DLD-FUNCTIONS/svd.cc
--- a/src/DLD-FUNCTIONS/svd.cc
+++ b/src/DLD-FUNCTIONS/svd.cc
@@ -31,18 +31,19 @@ along with Octave; see the file COPYING.
 #include "floatSVD.h"
 
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
 #include "oct-obj.h"
 #include "pr-output.h"
 #include "utils.h"
+#include "variables.h"
 
-static SVD::driver driver = SVD::GESVD;
+static int Vsvd_driver = SVD::GESVD;
 
 DEFUN_DLD (svd, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{s} =} svd (@var{a})\n\
 @deftypefnx {Loadable Function} {[@var{u}, @var{s}, @var{v}] =} svd (@var{a})\n\
 @cindex singular value decomposition\n\
 Compute the singular value decomposition of @var{a}\n\
 @tex\n\
@@ -143,16 +144,19 @@ decomposition, eliminating the unnecessa
     }
 
   bool isfloat = arg.is_single_type ();
 
   SVD::type type = ((nargout == 0 || nargout == 1)
                     ? SVD::sigma_only
                     : (nargin == 2) ? SVD::economy : SVD::std);
 
+  SVD::driver driver = static_cast<SVD::driver> (Vsvd_driver);
+  assert (driver == SVD::GESVD || driver == SVD::GESDD);
+
   if (nr == 0 || nc == 0)
     {
       if (isfloat)
         {
           switch (type)
             {
             case SVD::std:
               retval(2) = FloatDiagMatrix (nc, nc, 1.0f);
@@ -394,47 +398,20 @@ decomposition, eliminating the unnecessa
 %! assert (size (v), [0, 0]);
 
 %!error <Invalid call to svd.*> svd ();
 %!error <Invalid call to svd.*> svd ([1, 2; 4, 5], 2, 3);
 %!error <Invalid call to svd.*> [u, v] = svd ([1, 2; 3, 4]);
 
 */
 
-DEFUN_DLD (svd_driver, args, ,
+DEFUN_DLD (svd_driver, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{old} =} svd_driver (@var{new})\n\
 Sets or queries the underlying LAPACK driver used by svd.\n\
 Currently recognized are \"gesvd\" and \"gesdd\". Default is \"gesvd\".\n\
 @seealso{svd}\n\
 @end deftypefn")
 {
-  octave_value retval;
-  int nargin = args.length ();
-
-  if (nargin == 0 || (nargin == 1 && args(0).is_string ()))
-    {
-      if (driver == SVD::GESVD)
-        retval = "gesvd";
-      else if (driver == SVD::GESDD)
-        retval = "gesdd";
-      else
-        panic_impossible ();
-
+  static const char *driver_names[] = { "gesvd", "gesdd" };
 
-      if (nargin == 1)
-        {
-          std::string opt = args(0).xtolower ().string_value ();
-          if (opt == "gesvd")
-            driver = SVD::GESVD;
-          else if (opt == "gesdd")
-            driver = SVD::GESDD;
-          else
-            error ("svd_driver: invalid driver spec: %s", opt.c_str ());
-        }
-    }
-  else
-    print_usage ();
-
-  return retval;
+  return SET_INTERNAL_VARIABLE_CHOICES (svd_driver, driver_names);
 }
-
-
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -866,16 +866,62 @@ set_internal_variable (std::string& var,
         error ("%s: expecting arg to be a character string", nm);
     }
   else if (nargin > 1)
     print_usage ();
 
   return retval;
 }
 
+octave_value
+set_internal_variable (int& var, const octave_value_list& args,
+                       int nargout, const char *nm, const char **choices,
+                       int nchoices)
+{
+  octave_value retval;
+
+  int nargin = args.length ();
+  assert (var < nchoices);
+
+  if (nargout > 0 || nargin == 0)
+    retval = choices[var];
+
+  if (wants_local_change (args, nargin))
+    {
+      if (! try_local_protect (var))
+        warning ("\"local\" has no effect outside a function");
+    }
+
+  if (nargin == 1)
+    {
+      std::string sval = args(0).string_value ();
+
+      if (! error_state)
+        {
+          int i = 0;
+          for (; i < nchoices; i++)
+            {
+              if (sval == choices[i])
+                {
+                  var = i;
+                  break;
+                }
+            }
+          if (i == nchoices)
+            error ("%s: value not allowed (\"%s\")", nm, sval.c_str ());
+        }
+      else
+        error ("%s: expecting arg to be a character string", nm);
+    }
+  else if (nargin > 1)
+    print_usage ();
+
+  return retval;
+}
+
 struct
 whos_parameter
 {
   char command;
   char modifier;
   int parameter_length;
   int first_parameter_length;
   int balance;
diff --git a/src/variables.h b/src/variables.h
--- a/src/variables.h
+++ b/src/variables.h
@@ -104,25 +104,35 @@ extern OCTINTERP_API octave_value
 set_internal_variable (double& var, const octave_value_list& args,
                        int nargout, const char *nm,
                        double minval = DBL_MIN, double maxval = DBL_MAX);
 
 extern OCTINTERP_API octave_value
 set_internal_variable (std::string& var, const octave_value_list& args,
                        int nargout, const char *nm, bool empty_ok = true);
 
+extern OCTINTERP_API octave_value
+set_internal_variable (int& var, const octave_value_list& args,
+                       int nargout, const char *nm, const char **choices,
+                       int nchoices);
+
 #define SET_INTERNAL_VARIABLE(NM) \
   set_internal_variable (V ## NM, args, nargout, #NM)
 
 #define SET_NONEMPTY_INTERNAL_STRING_VARIABLE(NM) \
   set_internal_variable (V ## NM, args, nargout, #NM, false)
 
 #define SET_INTERNAL_VARIABLE_WITH_LIMITS(NM, MINVAL, MAXVAL) \
   set_internal_variable (V ## NM, args, nargout, #NM, MINVAL, MAXVAL)
 
+// in the following, CHOICES must be a static C string array.
+#define SET_INTERNAL_VARIABLE_CHOICES(NM, CHOICES) \
+  set_internal_variable (V ## NM, args, nargout, #NM, CHOICES, \
+                         sizeof (CHOICES) / sizeof (const char *))
+
 extern OCTINTERP_API std::string builtin_string_variable (const std::string&);
 extern OCTINTERP_API int builtin_real_scalar_variable (const std::string&, double&);
 extern OCTINTERP_API octave_value builtin_any_variable (const std::string&);
 
 extern OCTINTERP_API void bind_ans (const octave_value& val, bool print);
 
 extern OCTINTERP_API void
 bind_internal_variable (const std::string& fname, const octave_value& val);
