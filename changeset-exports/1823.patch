# HG changeset patch
# User jwe
# Date 823178705 0
#      Thu Feb 01 12:45:05 1996 +0000
# Node ID 5cdd59e7579a1c077367bc9c2fc64dd70c98838d
# Parent  3a47ca3dd227ce92bbdcad04bc06eae27af9a30e
[project @ 1996-02-01 12:45:05 by jwe]

diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -28,16 +28,18 @@ Software Foundation, 59 Temple Place - S
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cctype>
 #include <cstring>
 
+#include <string>
+
 #include <strstream.h>
 
 #include "SLStack.h"
 
 // These would be alphabetical, but y.tab.h must be included before
 // oct-gperf.h and y.tab.h must be included after token.h and the tree
 // class declarations.  We can't include y.tab.h in oct-gperf.h
 // because it may not be protected to allow it to be included multiple
@@ -109,29 +111,29 @@ static int cant_be_identifier = 0;
 static SLStack <int> nesting_level;
 
 // Forward declarations for functions defined at the bottom of this
 // file.
 
 static void do_string_escapes (char *s);
 static void fixup_column_count (char *s);
 static void do_comma_insert_check (void);
-static int is_plot_keyword (char *s);
-static int is_keyword (char *s);
-static char *plot_style_token (char *s);
-static symbol_record *lookup_identifier (char *s);
+static int is_plot_keyword (const string& s);
+static int is_keyword (const string& s);
+static string plot_style_token (const string& s);
+static symbol_record *lookup_identifier (const string& s);
 static void grab_help_text (void);
 static int match_any (char c, char *s);
 static int next_token_is_bin_op (int spc_prev, char *yytext);
 static int next_token_is_postfix_unary_op (int spc_prev, char *yytext);
-static char *strip_trailing_whitespace (char *s);
+static string strip_trailing_whitespace (char *s);
 static void handle_number (char *yytext);
 static int handle_string (char delim, int text_style = 0);
 static int handle_close_brace (int spc_gobbled);
-static int handle_identifier (char *tok, int spc_gobbled);
+static int handle_identifier (const string& tok, int spc_gobbled);
 static int have_continuation (int trailing_comments_ok = 1);
 static int have_ellipsis_continuation (int trailing_comments_ok = 1);
 static int eat_whitespace (void);
 static int eat_continuation (void);
 
 %}
 
 D	[0-9]
@@ -185,17 +187,17 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
   }
 
 <TEXT_FCN>[\"\'] {
     current_input_column++;
     return handle_string (yytext[0], 1);
   }
 
 <TEXT_FCN>[^ \t\n\;\,]*{S}* {
-    char *tok = strip_trailing_whitespace (yytext);
+    string tok = strip_trailing_whitespace (yytext);
     TOK_PUSH_AND_RETURN (tok, TEXT);
   }
 
 %{
 // For this and the next two rules, we're looking at ']', and we
 // need to know if the next token is `=' or `=='.
 //
 // It would have been so much easier if the delimiters were simply
@@ -400,17 +402,17 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
   }
 
 %{
 // Identifiers.  Truncate the token at the first space or tab but
 // don't write directly on yytext.
 %}
 
 {IDENT}{S}* {
-    char *tok = strip_trailing_whitespace (yytext);
+    string tok = strip_trailing_whitespace (yytext);
     int c = yytext[yyleng-1];
     int cont_is_spc = eat_continuation ();
     int spc_gobbled = (cont_is_spc || c == ' ' || c == '\t');
     return handle_identifier (tok, spc_gobbled);
   }
 
 %{
 // A new line character.  New line characters inside matrix constants
@@ -854,19 +856,21 @@ void
 delete_input_buffer (void *buf)
 {
   delete_buffer ((YY_BUFFER_STATE) buf);
 }
 
 // Check to see if a character string matches any of the possible line
 // styles for plots.
 
-static char *
-plot_style_token (char *s)
+static string
+plot_style_token (const string& s)
 {
+  string retval;
+
   static char *plot_styles[] = 
     {
       "boxes",
       "boxerrorbars",
       "dots",
       "errorbars",
       "impulses",
       "lines",
@@ -874,80 +878,85 @@ plot_style_token (char *s)
       "points",
       "steps",
       0,
     };
 
   char **tmp = plot_styles;
   while (*tmp)
     {
-      if (almost_match (*tmp, s))
-	return *tmp;
+      if (almost_match (*tmp, s.c_str ()))
+	{
+	  retval = *tmp;
+	  break;
+	}
 
       tmp++;
     }
 
-  return 0;
+  return retval;
 }
 
 // Check to see if a character string matches any one of the plot
 // option keywords.  Don't match abbreviations for clear, since that's
 // not a gnuplot keyword (users will probably only expect to be able
 // to abbreviate actual gnuplot keywords).
 
 static int
-is_plot_keyword (char *s)
+is_plot_keyword (const string& s)
 {
-  if (almost_match ("title", s))
+  const char *t = s.c_str ();
+  if (almost_match ("title", t))
     {
       return TITLE;
     }
-  else if (almost_match ("using", s))
+  else if (almost_match ("using", t))
     {
       in_plot_using = 1;
       return USING;
     }
-  else if (almost_match ("with", s))
+  else if (almost_match ("with", t))
     {
       in_plot_style = 1;
       return WITH;
     }
-  else if (strcmp ("clear", s) == 0)
+  else if (strcmp ("clear", t) == 0)
     {
       return CLEAR;
     }
   else
     {
       return 0;
     }
 }
 
 // Handle keywords.  Could probably be more efficient...
 
 static int
-is_keyword (char *s)
+is_keyword (const string& s)
 {
   if (plotting && in_plot_style)
     {
-      char *sty = plot_style_token (s);
-      if (sty)
+      string sty = plot_style_token (s);
+
+      if (! sty.empty ())
 	{
 	  in_plot_style = 0;
 	  yylval.tok_val = new token (sty);
 	  token_stack.push (yylval.tok_val);
 	  return STYLE;
 	}
     }
 
   int l = input_line_number;
   int c = current_input_column;
 
-  int len = strlen (s);
+  int len = s.length ();
 
-  const octave_kw *kw = octave_kw_lookup (s, len);
+  const octave_kw *kw = octave_kw_lookup (s.c_str (), len);
 
   if (kw)
     {
       yylval.tok_val = 0;
 
       switch (kw->kw_id)
 	{
 	case all_va_args_kw:
@@ -1061,17 +1070,17 @@ is_keyword (char *s)
 
   return 0;
 }
 
 // Try to find an identifier.  All binding to global or builtin
 // variables occurs when expressions are evaluated.
 
 static symbol_record *
-lookup_identifier (char *name)
+lookup_identifier (const string& name)
 {
   return curr_sym_tab->lookup (name, 1, 0);
 }
 
 // Grab the help text from an function file.  Always overwrites the
 // current contents of help_buf.
 
 static void
@@ -1245,32 +1254,25 @@ next_token_is_bin_op (int spc_prev, char
 
   yyunput (c0, yytext);
 
   return bin_op;
 }
 
 // Used to delete trailing white space from tokens.
 
-static char *
+static string
 strip_trailing_whitespace (char *s)
 {
-  static char *retval = 0;
-
-  delete [] retval;
-
-  retval = strsave (s);
+  string retval = s;
 
-  char *t = strchr (retval, ' ');
-  if (t)
-    *t = '\0';
+  size_t pos = retval.find_first_of (" \t");
 
-  t = strchr (retval, '\t');
-  if (t)
-    *t = '\0';
+  if (pos != NPOS)
+    retval.resize (pos);
 
   return retval;
 }
 
 // Discard whitespace, including comments and continuations.
 //
 // Return value is logical OR of the following values:
 //
@@ -1654,17 +1656,17 @@ maybe_unput_comma (int spc_gobbled)
 	unput (',');
     }
 }
 
 // Figure out exactly what kind of token to return when we have seen
 // an identifier.  Handles keywords.
 
 static int
-handle_identifier (char *tok, int spc_gobbled)
+handle_identifier (const string& tok, int spc_gobbled)
 {
 // It is almost always an error for an identifier to be followed
 // directly by another identifier.  Special cases are handled below.
 
   cant_be_identifier = 1;
 
 // If we are expecting a structure element, we just want to return
 // TEXT_ID, which is a string that is also a valid identifier.  But
@@ -1719,17 +1721,17 @@ handle_identifier (char *tok, int spc_go
 // arguments.  These are also reserved words, but only because it
 // would be very difficult to do anything intelligent with them if
 // they were not reserved.
 
   if (is_text_function_name (tok))
     {
       BEGIN TEXT_FCN;
 
-      if (strcmp (tok, "set") == 0)
+      if (tok == "set")
 	doing_set = 1;
     }
 
   int c = yyinput ();
   yyunput (c, yytext);
   int next_tok_is_eq = (c == '=');
 
 // Make sure we put the return values of a function in the symbol
