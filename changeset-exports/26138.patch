# HG changeset patch
# User Kai T. Ohlhus <k.ohlhus@gmail.com>
# Date 1543156763 -3600
#      Sun Nov 25 15:39:23 2018 +0100
# Node ID 804e18e3e3208a9f45b890f24302b5e14c609ea9
# Parent  1ae11ca7dceb1acb486fb6202719dcf3999ac157
Reenable query of optimization options (bugs #54952 and #55089).

* scripts/optimization/__all_opts__.m: Improve documentation of query mechanism.

* scripts/optimization/fminbnd.m, scripts/optimization/fminsearch.m,
scripts/optimization/fminunc.m, scripts/optimization/fsolve.m,
scripts/optimization/fzero.m, scripts/optimization/lsqnonneg.m,
scripts/optimization/pqpnonneg.m, default/scripts/optimization/qp.m:
Return a struct without double-check by optimset.  The sanity of the values is
always checked at Octave startup by the PKG_ADD invoked interplay of
"__all_opts__" and "optimset".

diff --git a/scripts/optimization/__all_opts__.m b/scripts/optimization/__all_opts__.m
--- a/scripts/optimization/__all_opts__.m
+++ b/scripts/optimization/__all_opts__.m
@@ -13,38 +13,40 @@
 ## GNU General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <https://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {} {@var{names} =} __all_opts__ (@dots{})
-## Undocumented internal function.
-## @end deftypefn
-
+## Internal function.
+##
 ## Query all options from all known optimization functions and return a
 ## list of possible values.
+## @end deftypefn
 
 function names = __all_opts__ (varargin)
 
+  ## This variable is filled by the auto-generated PKG_ADD script at
+  ## Octave startup.
   persistent saved_names = {};
 
   ## do not clear this function
   mlock ();
 
   ## guard against recursive calls.
   persistent recursive = false;
 
   if (recursive)
     names = {};
   elseif (nargin == 0)
     names = saved_names;
   else
-    ## query all options from all known functions.  These will call optimset,
+    ## Query all options from all known functions.  These will call optimset,
     ## which will in turn call us, but we won't answer.
     recursive = true;
     names = saved_names;
     for i = 1:nargin
       try
         opts = optimset (varargin{i});
         fn = fieldnames (opts).';
         names = [names, fn];
diff --git a/scripts/optimization/fminbnd.m b/scripts/optimization/fminbnd.m
--- a/scripts/optimization/fminbnd.m
+++ b/scripts/optimization/fminbnd.m
@@ -80,19 +80,19 @@
 
 ## PKG_ADD: ## Discard result to avoid polluting workspace with ans at startup.
 ## PKG_ADD: [~] = __all_opts__ ("fminbnd");
 
 function [x, fval, info, output] = fminbnd (fun, a, b, options = struct ())
 
   ## Get default options if requested.
   if (nargin == 1 && ischar (fun) && strcmp (fun, "defaults"))
-    x = optimset ("Display", "notify", "FunValCheck", "off",
-                  "MaxFunEvals", 500, "MaxIter", 500,
-                  "OutputFcn", [], "TolX", 1e-4);
+    x = struct ("Display", "notify", "FunValCheck", "off",
+                "MaxFunEvals", 500, "MaxIter", 500,
+                "OutputFcn", [], "TolX", 1e-4);
     return;
   endif
 
   if (nargin < 2 || nargin > 4)
     print_usage ();
   endif
 
   if (a > b)
diff --git a/scripts/optimization/fminsearch.m b/scripts/optimization/fminsearch.m
--- a/scripts/optimization/fminsearch.m
+++ b/scripts/optimization/fminsearch.m
@@ -123,20 +123,20 @@
 function [x, fval, exitflag, output] = fminsearch (varargin)
 
   if (nargin < 1)
     print_usage ();
   endif
 
   ## Get default options if requested.
   if (nargin == 1 && ischar (varargin{1}) && strcmp (varargin{1}, "defaults"))
-    x = optimset ("Display", "notify", "FunValCheck", "off",
-                  "MaxFunEvals", [], "MaxIter", [],
-                  "OutputFcn", [],
-                  "TolFun", 1e-4, "TolX", 1e-4);
+    x = struct ("Display", "notify", "FunValCheck", "off",
+                "MaxFunEvals", [], "MaxIter", [],
+                "OutputFcn", [],
+                "TolFun", 1e-4, "TolX", 1e-4);
     return;
   endif
 
   if (nargin == 1)
     problem = varargin{1};
     varargin = {};
     if (! isstruct (problem))
       error ("fminsearch: PROBLEM must be a structure");
diff --git a/scripts/optimization/fminunc.m b/scripts/optimization/fminunc.m
--- a/scripts/optimization/fminunc.m
+++ b/scripts/optimization/fminunc.m
@@ -108,20 +108,20 @@
 
 ## PKG_ADD: ## Discard result to avoid polluting workspace with ans at startup.
 ## PKG_ADD: [~] = __all_opts__ ("fminunc");
 
 function [x, fval, info, output, grad, hess] = fminunc (fcn, x0, options = struct ())
 
   ## Get default options if requested.
   if (nargin == 1 && strcmp (fcn, "defaults"))
-    x = optimset ("AutoScaling", "off", "FunValCheck", "off",
-                  "FinDiffType", "forward", "GradObj", "off",
-                  "MaxFunEvals", [], "MaxIter", 400, "OutputFcn", [],
-                  "TolFun", 1e-6, "TolX", 1e-6, "TypicalX", []);
+    x = struct ("AutoScaling", "off", "FunValCheck", "off",
+                "FinDiffType", "forward", "GradObj", "off",
+                "MaxFunEvals", [], "MaxIter", 400, "OutputFcn", [],
+                "TolFun", 1e-6, "TolX", 1e-6, "TypicalX", []);
     return;
   endif
 
   if (nargin < 2 || nargin > 3 || ! isnumeric (x0))
     print_usage ();
   endif
 
   if (ischar (fcn))
diff --git a/scripts/optimization/fsolve.m b/scripts/optimization/fsolve.m
--- a/scripts/optimization/fsolve.m
+++ b/scripts/optimization/fsolve.m
@@ -167,21 +167,21 @@
 
 ## PKG_ADD: ## Discard result to avoid polluting workspace with ans at startup.
 ## PKG_ADD: [~] = __all_opts__ ("fsolve");
 
 function [x, fval, info, output, fjac] = fsolve (fcn, x0, options = struct ())
 
   ## Get default options if requested.
   if (nargin == 1 && ischar (fcn) && strcmp (fcn, "defaults"))
-    x = optimset ("AutoScaling", "off", "ComplexEqn", "off",
-                  "FunValCheck", "off", "FinDiffType", "forward",
-                  "Jacobian", "off",  "MaxFunEvals", [], "MaxIter", 400,
-                  "OutputFcn", [], "Updating", "off", "TolFun", 1e-6,
-                  "TolX", 1e-6, "TypicalX", []);
+    x = struct ("AutoScaling", "off", "ComplexEqn", "off",
+                "FunValCheck", "off", "FinDiffType", "forward",
+                "Jacobian", "off",  "MaxFunEvals", [], "MaxIter", 400,
+                "OutputFcn", [], "Updating", "off", "TolFun", 1e-6,
+                "TolX", 1e-6, "TypicalX", []);
     return;
   endif
 
   if (nargin < 2 || nargin > 3 || ! isnumeric (x0))
     print_usage ();
   endif
 
   if (ischar (fcn))
diff --git a/scripts/optimization/fzero.m b/scripts/optimization/fzero.m
--- a/scripts/optimization/fzero.m
+++ b/scripts/optimization/fzero.m
@@ -118,19 +118,19 @@
 
 ## PKG_ADD: ## Discard result to avoid polluting workspace with ans at startup.
 ## PKG_ADD: [~] = __all_opts__ ("fzero");
 
 function [x, fval, info, output] = fzero (fun, x0, options = struct ())
 
   ## Get default options if requested.
   if (nargin == 1 && ischar (fun) && strcmp (fun, "defaults"))
-    x = optimset ("Display", "notify", "FunValCheck", "off",
-                  "MaxFunEvals", Inf, "MaxIter", Inf,
-                  "OutputFcn", [], "TolX", eps);
+    x = struct ("Display", "notify", "FunValCheck", "off",
+                "MaxFunEvals", Inf, "MaxIter", Inf,
+                "OutputFcn", [], "TolX", eps);
     return;
   endif
 
   if (nargin < 2 || nargin > 3)
     print_usage ();
   endif
 
   if (ischar (fun))
diff --git a/scripts/optimization/lsqnonneg.m b/scripts/optimization/lsqnonneg.m
--- a/scripts/optimization/lsqnonneg.m
+++ b/scripts/optimization/lsqnonneg.m
@@ -77,17 +77,17 @@
 ## Solving Least Squares Problems.
 
 function [x, resnorm, residual, exitflag, output, lambda] = lsqnonneg (c, d,
                                                                        x0 = [],
                                                                        options = struct ())
 
   ## Special case: called to find default optimization options
   if (nargin == 1 && ischar (c) && strcmp (c, "defaults"))
-    x = optimset ("MaxIter", 1e5);
+    x = struct ("MaxIter", 1e5);
     return;
   endif
 
   if (nargin < 2 || nargin > 4)
     print_usage ();
   endif
 
   if (! (isnumeric (c) && ismatrix (c)) || ! (isnumeric (d) && ismatrix (d)))
diff --git a/scripts/optimization/pqpnonneg.m b/scripts/optimization/pqpnonneg.m
--- a/scripts/optimization/pqpnonneg.m
+++ b/scripts/optimization/pqpnonneg.m
@@ -79,17 +79,17 @@
 ## from Lawson and Hanson's 1973 algorithm on page 161 of Solving Least Squares
 ## Problems.  It shares the convergence guarantees.
 
 function [x, minval, exitflag, output, lambda] = pqpnonneg (c, d, x0 = [],
                                                             options = struct ())
 
   ## Special case: called to find default optimization options
   if (nargin == 1 && ischar (c) && strcmp (c, "defaults"))
-    x = optimset ("MaxIter", 1e5);
+    x = struct ("MaxIter", 1e5);
     return;
   endif
 
   if (nargin < 2 || nargin > 4)
     print_usage ();
   endif
 
   if (! (isnumeric (c) && ismatrix (c)) || ! (isnumeric (d) && ismatrix (d)))
diff --git a/scripts/optimization/qp.m b/scripts/optimization/qp.m
--- a/scripts/optimization/qp.m
+++ b/scripts/optimization/qp.m
@@ -115,17 +115,17 @@
 ## @end deftypefn
 
 ## PKG_ADD: ## Discard result to avoid polluting workspace with ans at startup.
 ## PKG_ADD: [~] = __all_opts__ ("qp");
 
 function [x, obj, INFO, lambda] = qp (x0, H, varargin)
 
   if (nargin == 1 && ischar (x0) && strcmp (x0, "defaults"))
-    x = optimset ("MaxIter", 200);
+    x = struct ("MaxIter", 200);
     return;
   endif
 
   nargs = nargin;
   if (nargs > 2 && isstruct (varargin{end}))
     options = varargin{end};
     nargs -= 1;
   else
