# HG changeset patch
# User Rik <rik@octave.org>
# Date 1513315419 28800
#      Thu Dec 14 21:23:39 2017 -0800
# Node ID 2adff1743db73c60174937ec5ba2ee7ac5a9bc6f
# Parent  a51a92186a1f421a35ed2bdf63a39fe8897cedd8
# Parent  50bb53905f03c6d90f9ef25bcc47ebe31af36af7
maint: merge stable to default.

diff --git a/libinterp/corefcn/lsode.cc b/libinterp/corefcn/lsode.cc
--- a/libinterp/corefcn/lsode.cc
+++ b/libinterp/corefcn/lsode.cc
@@ -234,18 +234,19 @@ jac = ---- = |                       |
              | df_N  df_N       df_N |
              | ----  ----  ...  ---- |
              | dx_1  dx_2       dx_N |
 @end group
 @end example
 
 @end ifnottex
 
-The second and third arguments specify the initial state of the system,
-@math{x_0}, and the initial value of the independent variable @math{t_0}.
+The second argument specifies the initial state of the system @math{x_0}.  The
+third argument is a vector, @var{t}, specifying the time values for which a
+solution is sought.
 
 The fourth argument is optional, and may be used to specify a set of
 times that the ODE solver should not integrate past.  It is useful for
 avoiding difficulties with singularities and points where there is a
 discontinuity in the derivative.
 
 After a successful computation, the value of @var{istate} will be 2
 (consistent with the Fortran version of @sc{lsode}).
diff --git a/libinterp/op-kw-docs b/libinterp/op-kw-docs
--- a/libinterp/op-kw-docs
+++ b/libinterp/op-kw-docs
@@ -23,16 +23,23 @@
 Logical 'not' operator.
 @seealso{~, not}
 @end deftypefn
 ~
 @c libinterp/parse-tree/oct-parse.in.yy
 -*- texinfo -*-
 @deftypefn {} {} ~
 Logical 'not' operator.
+
+The symbol may also be used to discard outputs of a function that are unwanted
+without using a temporary variable.
+
+@example
+[~, @var{idx_of_max}] = max (@var{x})
+@end example
 @seealso{!, not}
 @end deftypefn
 !=
 @c libinterp/parse-tree/oct-parse.in.yy
 -*- texinfo -*-
 @deftypefn {} {} !=
 Logical 'not equals' operator.
 @seealso{~=, ne}
@@ -44,16 +51,21 @@ Logical 'not equals' operator.
 Logical 'not equals' operator.
 @seealso{!=, ne}
 @end deftypefn
 "
 @c libinterp/parse-tree/oct-parse.in.yy
 -*- texinfo -*-
 @deftypefn {} {} "
 String delimiter.
+
+Escape sequences within double-quoted strings are expanded.  I.e., "\n" is a
+1-character string representing a newline.  See the single quote delimiter (')
+to create strings without escape sequence processing.
+@seealso{'}
 @end deftypefn
 #
 @c libinterp/parse-tree/oct-parse.in.yy
 -*- texinfo -*-
 @deftypefn {} {} #
 Begin comment character.
 @seealso{%, #@\{}
 @end deftypefn
@@ -63,53 +75,59 @@ Begin comment character.
 @deftypefn {} {} %
 Begin comment character.
 @seealso{#, %@\{}
 @end deftypefn
 #{
 @c libinterp/parse-tree/oct-parse.in.yy
 -*- texinfo -*-
 @deftypefn {} {} #@{
-Begin block comment.  There must be nothing else, other than
-whitespace, in the line both before and after @code{#@{}.
-It is possible to nest block comments.
+Begin block comment.
+
+There must be no other characters, other than whitespace, on the line before
+and after @code{#@{}.  It is possible to nest block comments.
 @seealso{%@\{, #@\}, #}
 @end deftypefn
 %{
 @c libinterp/parse-tree/oct-parse.in.yy
 -*- texinfo -*-
 @deftypefn {} {} %@{
-Begin block comment.  There must be nothing else, other than
-whitespace, in the line both before and after @code{%@{}.
-It is possible to nest block comments.
+Begin block comment.
+
+There must be no other characters, other than whitespace, on the line before
+and after @code{%@{}.  It is possible to nest block comments.
 @seealso{#@\{, %@\}, %}
 @end deftypefn
 #}
 @c libinterp/parse-tree/oct-parse.in.yy
 -*- texinfo -*-
 @deftypefn {} {} #@}
-Close block comment.  There must be nothing else, other than
-whitespace, in the line both before and after @code{#@}}.
-It is possible to nest block comments.
+Close block comment.
+
+There must be no other characters, other than whitespace, on the line before
+and after @code{#@}}.  It is possible to nest block comments.
 @seealso{%@\}, #@\{, #}
 @end deftypefn
 %}
 @c libinterp/parse-tree/oct-parse.in.yy
 -*- texinfo -*-
 @deftypefn {} {} %@}
-Close block comment.  There must be nothing else, other than
-whitespace, in the line both before and after @code{%@}}.
-It is possible to nest block comments.
+Close block comment.
+
+There must be no other characters, other than whitespace, on the line before
+and after @code{%@}}.  It is possible to nest block comments.
 @seealso{#@\}, %@\{, %}
 @end deftypefn
 ...
 @c libinterp/parse-tree/oct-parse.in.yy
 -*- texinfo -*-
 @deftypefn {} {} ...
-Continuation marker.  Joins current line with following line.
+Continuation marker.
+
+Joins current line with following line.
 @end deftypefn
 &
 @c libinterp/parse-tree/oct-parse.in.yy
 -*- texinfo -*-
 @deftypefn {} {} &
 Element by element logical 'and' operator.
 @seealso{&&, and}
 @end deftypefn
@@ -119,23 +137,25 @@ Element by element logical 'and' operato
 @deftypefn {} {} &&
 Logical 'and' operator (with short-circuit evaluation).
 @seealso{&, and}
 @end deftypefn
 '
 @c libinterp/parse-tree/oct-parse.in.yy
 -*- texinfo -*-
 @deftypefn {} {} '
-Matrix transpose operator.  For complex matrices, computes the
-complex conjugate (Hermitian) transpose.
+Matrix transpose operator or string delimiter.
+
+For complex matrices, computes the complex conjugate (Hermitian) transpose.
 
-The single quote character may also be used to delimit strings, but
-it is better to use the double quote character, since that is never
-ambiguous.
-@seealso{.', transpose}
+The single quote character may also be used to delimit strings.  Escape
+sequences within single-quoted strings are not expanded.  I.e., '\n' is a
+2-character string '\' and 'n' rather than "\n" which is a single character
+representing a newline.
+@seealso{.', transpose, "}
 @end deftypefn
 (
 @c libinterp/parse-tree/oct-parse.in.yy
 -*- texinfo -*-
 @deftypefn {} {} (
 Array index or function argument delimiter.
 @end deftypefn
 )
@@ -150,43 +170,48 @@ Array index or function argument delimit
 @deftypefn {} {} *
 Multiplication operator.
 @seealso{.*, times}
 @end deftypefn
 **
 @c libinterp/parse-tree/oct-parse.in.yy
 -*- texinfo -*-
 @deftypefn {} {} **
-Power operator.  This may return complex results for real inputs.  Use
-@code{realsqrt}, @code{cbrt}, @code{nthroot}, or @code{realroot} to obtain
-real results when possible.
+Power operator.
+
+This may return complex results for real inputs.  Use @code{realsqrt},
+@code{cbrt}, @code{nthroot}, or @code{realroot} to obtain real results when
+possible.
 @seealso{power, ^, .**, .^, realpow, realsqrt, cbrt, nthroot}
 @end deftypefn
 ^
 @c libinterp/parse-tree/oct-parse.in.yy
 -*- texinfo -*-
 @deftypefn {} {} ^
-Power operator.  This may return complex results for real inputs.  Use
-@code{realsqrt}, @code{cbrt}, @code{nthroot}, or @code{realroot} to obtain
-real results when possible.
+Power operator.
+
+This may return complex results for real inputs.  Use @code{realsqrt},
+@code{cbrt}, @code{nthroot}, or @code{realroot} to obtain real results when
+possible.
 @seealso{power, **, .^, .**, realpow, realsqrt, cbrt, nthroot}
 @end deftypefn
 +
 @c libinterp/parse-tree/oct-parse.in.yy
 -*- texinfo -*-
 @deftypefn {} {} +
 Addition operator.
 @seealso{plus}
 @end deftypefn
 ++
 @c libinterp/parse-tree/oct-parse.in.yy
 -*- texinfo -*-
 @deftypefn {} {} ++
-Increment operator.  As in C, may be applied as a prefix or postfix
-operator.
+Increment operator.
+
+As in C, may be applied as a prefix or postfix operator.
 @seealso{--}
 @end deftypefn
 ,
 @c libinterp/parse-tree/oct-parse.in.yy
 -*- texinfo -*-
 @deftypefn {} {} ,
 Array index, function argument, or command separator.
 @end deftypefn
@@ -196,53 +221,58 @@ Array index, function argument, or comma
 @deftypefn {} {} -
 Subtraction or unary negation operator.
 @seealso{minus}
 @end deftypefn
 --
 @c libinterp/parse-tree/oct-parse.in.yy
 -*- texinfo -*-
 @deftypefn {} {} --
-Decrement operator.  As in C, may be applied as a prefix or postfix
-operator.
+Decrement operator.
+
+As in C, may be applied as a prefix or postfix operator.
 @seealso{++}
 @end deftypefn
 .'
 @c libinterp/parse-tree/oct-parse.in.yy
 -*- texinfo -*-
 @deftypefn {} {} .'
-Matrix transpose operator.  For complex matrices, computes the
-transpose, @emph{not} the complex conjugate transpose.
+Matrix transpose operator.
+
+For complex matrices, computes the transpose, @emph{not} the complex conjugate
+(Hermitian) transpose.
 @seealso{', transpose}
 @end deftypefn
 .*
 @c libinterp/parse-tree/oct-parse.in.yy
 -*- texinfo -*-
 @deftypefn {} {} .*
 Element by element multiplication operator.
 @seealso{*, times}
 @end deftypefn
 .**
 @c libinterp/parse-tree/oct-parse.in.yy
 -*- texinfo -*-
 @deftypefn {} {} .**
-Element by element power operator.  If several complex results are possible,
-returns the one with smallest non-negative argument (angle).  Use
-@code{realpow}, @code{realsqrt}, @code{cbrt}, or @code{nthroot} if a
-real result is preferred.
+Element by element power operator.
+
+If several complex results are possible, returns the one with smallest
+non-negative argument (angle).  Use @code{realpow}, @code{realsqrt},
+@code{cbrt}, or @code{nthroot} if a real result is preferred.
 @seealso{**, ^, .^, power, realpow, realsqrt, cbrt, nthroot}
 @end deftypefn
 .^
 @c libinterp/parse-tree/oct-parse.in.yy
 -*- texinfo -*-
 @deftypefn {} {} .^
-Element by element power operator.  If several complex results are possible,
-returns the one with smallest non-negative argument (angle).  Use
-@code{realpow}, @code{realsqrt}, @code{cbrt}, or @code{nthroot} if a
-real result is preferred.
+Element by element power operator.
+
+If several complex results are possible, returns the one with smallest
+non-negative argument (angle).  Use @code{realpow}, @code{realsqrt},
+@code{cbrt}, or @code{nthroot} if a real result is preferred.
 @seealso{.**, ^, **, power, realpow, realsqrt, cbrt, nthroot}
 @end deftypefn
 ./
 @c libinterp/parse-tree/oct-parse.in.yy
 -*- texinfo -*-
 @deftypefn {} {} ./
 Element by element right division operator.
 @seealso{/, .\\, rdivide, mrdivide}
@@ -349,89 +379,121 @@ Element by element logical 'or' operator
 @deftypefn {} {} ||
 Logical 'or' (with short-circuit evaluation) operator.
 @seealso{|, or}
 @end deftypefn
 break
 @c libinterp/parse-tree/oct-parse.in.yy
 -*- texinfo -*-
 @deftypefn {} {} break
-Exit the innermost enclosing do, while or for loop.
+Exit the innermost enclosing do, while, or for loop.
 @seealso{do, while, for, parfor, continue}
 @end deftypefn
 case
 @c libinterp/parse-tree/oct-parse.in.yy
 -*- texinfo -*-
 @deftypefn  {} {} case @var{value}
 @deftypefnx {} {} case @{@var{value}, @dots{}@}
-A case statement in a switch.  Octave cases are exclusive and do not
-fall-through as do C-language cases.  A switch statement must have at least
-one case.  See @code{switch} for an example.
+A case statement in a switch block.
+
+Octave cases are exclusive and do not fall-through as do C-language cases.  A
+switch statement must have at least one case.  See @code{switch} for an
+example.
 @seealso{switch}
 @end deftypefn
 catch
 @c libinterp/parse-tree/oct-parse.in.yy
 -*- texinfo -*-
 @deftypefn  {} {} catch
 @deftypefnx {} {} catch @var{value}
 Begin the cleanup part of a try-catch block.
 @seealso{try}
 @end deftypefn
+classdef
+@c libinterp/parse-tree/oct-parse.in.yy
+-*- texinfo -*-
+@deftypefn {} {} classdef
+Begin a classdef block.
+@seealso{properties, methods, events, enumeration}
+@end deftypefn
 continue
 @c libinterp/parse-tree/oct-parse.in.yy
 -*- texinfo -*-
 @deftypefn {} {} continue
-Jump to the end of the innermost enclosing do, while or for loop.
-@seealso{do, while, for, parfor, break}
+Jump to the end of the innermost enclosing do, while, or for loop.
+@seealso{break, do, while, for, parfor}
 @end deftypefn
 do
 @c libinterp/parse-tree/oct-parse.in.yy
 -*- texinfo -*-
 @deftypefn {} {} do
-Begin a do-until loop.  This differs from a do-while loop in that the
-body of the loop is executed at least once.
+Begin a do-until loop.
+
+This differs from a while loop in that the body of the loop is executed at
+least once.
 
 @example
 @group
 i = 0;
 do
   i++
 until (i == 10)
 @end group
 @end example
 @seealso{for, until, while}
 @end deftypefn
 else
 @c libinterp/parse-tree/oct-parse.in.yy
 -*- texinfo -*-
 @deftypefn {} {} else
-Alternate action for an if block.  See @code{if} for an example.
+Alternate action for an if block.  See @code{if} for  an example.
 @seealso{if}
 @end deftypefn
 elseif
 @c libinterp/parse-tree/oct-parse.in.yy
 -*- texinfo -*-
 @deftypefn {} {} elseif (@var{condition})
 Alternate conditional test for an if block.  See @code{if} for an example.
 @seealso{if}
 @end deftypefn
 end_try_catch
 @c libinterp/parse-tree/oct-parse.in.yy
 -*- texinfo -*-
 @deftypefn {} {} end_try_catch
-Mark the end of an @code{try-catch} block.
+Mark the end of a @code{try-catch} block.
 @seealso{try, catch}
 @end deftypefn
 end_unwind_protect
 @c libinterp/parse-tree/oct-parse.in.yy
 -*- texinfo -*-
 @deftypefn {} {} end_unwind_protect
 Mark the end of an unwind_protect block.
 @seealso{unwind_protect}
 @end deftypefn
+endclassdef
+@c libinterp/parse-tree/oct-parse.in.yy
+-*- texinfo -*-
+@deftypefn {} {} endclassdef
+Mark the end of a classdef definition.
+@seealso{classdef}
+@end deftypefn
+endenumeration
+@c libinterp/parse-tree/oct-parse.in.yy
+-*- texinfo -*-
+@deftypefn {} {} endenumeration
+Mark the end of an enumeration block in a classdef definition.
+@seealso{enumeration}
+@end deftypefn
+endevents
+@c libinterp/parse-tree/oct-parse.in.yy
+-*- texinfo -*-
+@deftypefn {} {} endevents
+Mark the end of an events block in a classdef definition.
+@seealso{events}
+@end deftypefn
 endfor
 @c libinterp/parse-tree/oct-parse.in.yy
 -*- texinfo -*-
 @deftypefn {} {} endfor
 Mark the end of a for loop.  See @code{for} for an example.
 @seealso{for}
 @end deftypefn
 endfunction
@@ -443,51 +505,77 @@ Mark the end of a function.
 @end deftypefn
 endif
 @c libinterp/parse-tree/oct-parse.in.yy
 -*- texinfo -*-
 @deftypefn {} {} endif
 Mark the end of an if block.  See @code{if} for an example.
 @seealso{if}
 @end deftypefn
+endmethods
+@c libinterp/parse-tree/oct-parse.in.yy
+-*- texinfo -*-
+@deftypefn {} {} endmethods
+Mark the end of a methods block in a classdef definition.
+@seealso{methods}
+@end deftypefn
 endparfor
 @c libinterp/parse-tree/oct-parse.in.yy
 -*- texinfo -*-
 @deftypefn {} {} endparfor
 Mark the end of a parfor loop.  See @code{parfor} for an example.
 @seealso{parfor}
 @end deftypefn
+endproperties
+@c libinterp/parse-tree/oct-parse.in.yy
+-*- texinfo -*-
+@deftypefn {} {} endproperties
+Mark the end of a properties block in a classdef definition.
+@seealso{properties}
+@end deftypefn
 endswitch
 @c libinterp/parse-tree/oct-parse.in.yy
 -*- texinfo -*-
 @deftypefn {} {} endswitch
 Mark the end of a switch block.  See @code{switch} for an example.
 @seealso{switch}
 @end deftypefn
 endwhile
 @c libinterp/parse-tree/oct-parse.in.yy
 -*- texinfo -*-
 @deftypefn {} {} endwhile
 Mark the end of a while loop.  See @code{while} for an example.
 @seealso{do, while}
 @end deftypefn
+enumeration
+@c libinterp/parse-tree/oct-parse.in.yy
+-*- texinfo -*-
+@deftypefn {} {} enumeration
+Begin an enumeration block in a classdef definition.
+@end deftypefn
+events
+@c libinterp/parse-tree/oct-parse.in.yy
+-*- texinfo -*-
+@deftypefn {} {} events
+Begin an events block in a classdef definition.
+@end deftypefn
 for
 @c libinterp/parse-tree/oct-parse.in.yy
 -*- texinfo -*-
 @deftypefn {} {} for @var{i} = @var{range}
 Begin a for loop.
 
 @example
 @group
 for i = 1:10
   i
 endfor
 @end group
 @end example
-@seealso{do, parfor, while}
+@seealso{parfor, do, while}
 @end deftypefn
 function
 @c libinterp/parse-tree/oct-parse.in.yy
 -*- texinfo -*-
 @deftypefn  {} {} function @var{outputs} = function (@var{input}, @dots{})
 @deftypefnx {} {} function {} function (@var{input}, @dots{})
 @deftypefnx {} {} function @var{outputs} = function
 Begin a function body with @var{outputs} as results and @var{inputs} as
@@ -528,22 +616,31 @@ elseif (x == 2)
   disp ("two");
 else
   disp ("not one or two");
 endif
 @end group
 @end example
 @seealso{switch}
 @end deftypefn
+## FIXME: Can't have duplicate DOCSTRING entries.  The function methods
+##        already has a docstring which overrides this keyword definition.
+#methods
+#@c libinterp/parse-tree/oct-parse.in.yy
+#-*- texinfo -*-
+#@deftypefn {} {} methods
+#Begin a methods block in a classdef definition.
+#@end deftypefn
 otherwise
 @c libinterp/parse-tree/oct-parse.in.yy
 -*- texinfo -*-
 @deftypefn {} {} otherwise
-The default statement in a switch block (similar to else in an if block).
-@seealso{switch}
+The default statement in a switch block which is executed when no other
+case statements match the input.
+@seealso{switch, case}
 @end deftypefn
 parfor
 @c libinterp/parse-tree/oct-parse.in.yy
 -*- texinfo -*-
 @deftypefn  {} {} parfor @var{i} = @var{range}
 @deftypefnx {} {} parfor (@var{i} = @var{range}, @var{maxproc})
 Begin a for loop that may execute in parallel.
 
@@ -555,23 +652,31 @@ endparfor
 @end group
 @end example
 @seealso{for, do, while}
 @end deftypefn
 persistent
 @c libinterp/parse-tree/oct-parse.in.yy
 -*- texinfo -*-
 @deftypefn {} {} persistent @var{var}
-Declare variables as persistent.  A variable that has been declared
-persistent within a function will retain its contents in memory between
-subsequent calls to the same function.  The difference between persistent
-variables and global variables is that persistent variables are local in
-scope to a particular function and are not visible elsewhere.
+Declare variables as persistent.
+
+A variable that has been declared persistent within a function will retain its
+contents in memory between subsequent calls to the same function.  The
+difference between persistent variables and global variables is that persistent
+variables are local in scope to a particular function and are not visible
+elsewhere.
 @seealso{global}
 @end deftypefn
+properties
+@c libinterp/parse-tree/oct-parse.in.yy
+-*- texinfo -*-
+@deftypefn {} {} properties
+Begin a properties block in a classdef definition.
+@end deftypefn
 return
 @c libinterp/parse-tree/oct-parse.in.yy
 -*- texinfo -*-
 @deftypefn {} {} return
 Return from a function.
 @seealso{function}
 @end deftypefn
 static
@@ -584,19 +689,19 @@ This statement has been deprecated in fa
 switch
 @c libinterp/parse-tree/oct-parse.in.yy
 -*- texinfo -*-
 @deftypefn {} {} switch @var{statement}
 Begin a switch block.
 
 @example
 @group
-yesno = "yes"
+yesno = "yes";
 
-switch yesno
+switch (yesno)
   case @{"Yes" "yes" "YES" "y" "Y"@}
     value = 1;
   case @{"No" "no" "NO" "n" "N"@}
     value = 0;
   otherwise
     error ("invalid value");
 endswitch
 @end group
@@ -605,40 +710,38 @@ endswitch
 @end deftypefn
 try
 @c libinterp/parse-tree/oct-parse.in.yy
 -*- texinfo -*-
 @deftypefn {} {} try
 Begin a try-catch block.
 
 If an error occurs within a try block, then the catch code will be run and
-execution will proceed after the catch block (though it is often
-recommended to use the lasterr function to re-throw the error after cleanup
-is completed).
+execution will proceed after the catch block (though it is often recommended to
+use the lasterr function to re-throw the error after cleanup is completed).
 @seealso{catch, unwind_protect}
 @end deftypefn
 until
 @c libinterp/parse-tree/oct-parse.in.yy
 -*- texinfo -*-
 @deftypefn {} {} until (@var{cond})
 End a do-until loop.  See @code{do} for an example.
 @seealso{do}
 @end deftypefn
 unwind_protect
 @c libinterp/parse-tree/oct-parse.in.yy
 -*- texinfo -*-
 @deftypefn {} {} unwind_protect
 Begin an unwind_protect block.
 
-If an error occurs within the first part of an unwind_protect block
-the commands within the unwind_protect_cleanup block are executed before
-the error is thrown.  If an error is not thrown, then the
-unwind_protect_cleanup block is still executed (in other words, the
-unwind_protect_cleanup will be run with or without an error in the
-unwind_protect block).
+If an error occurs within the first part of an unwind_protect block the
+commands within the unwind_protect_cleanup block are executed before the error
+is thrown.  If an error is not thrown, then the unwind_protect_cleanup block is
+still executed.  In other words, the unwind_protect_cleanup code is guaranteed
+to execute regardless of success or failure in the unwind_protect block. 
 @seealso{unwind_protect_cleanup, try}
 @end deftypefn
 unwind_protect_cleanup
 @c libinterp/parse-tree/oct-parse.in.yy
 -*- texinfo -*-
 @deftypefn {} {} unwind_protect_cleanup
 Begin the cleanup section of an unwind_protect block.
 @seealso{unwind_protect}
