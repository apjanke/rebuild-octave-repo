# HG changeset patch
# User jwe
# Date 1094609636 0
#      Wed Sep 08 02:13:56 2004 +0000
# Node ID c09cbec5119088187f33a0106244cad78a43f888
# Parent  0355f2f7d19350396b3993538b592642eaa1697c
[project @ 2004-09-08 02:13:55 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,12 @@
+2004-09-07  John W. Eaton  <jwe@octave.org>
+
+	* configure.in: Check for round.
+
 2004-06-22  David Bateman  <dbateman@free.fr>
 
 	* configure.in: Use -Wl,-Bsymbolic for MKOCTFILE_DL_LDFLAGS on
 	GNU/Linux systems but not for SH_LDFLAGS.
     
 2004-04-22  John W. Eaton  <jwe@octave.org>
 
 	* configure.in: Add -Wl,-Bsymbolic to SH_LDFLAGS for GNU/Linux
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -24,17 +24,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### Preserve CFLAGS and CXXFLAGS from the environment before doing
 ### anything else because we don't know which macros might call
 ### AC_PROG_CC or AC_PROG_CXX.
 
 EXTERN_CFLAGS="$CFLAGS"
 EXTERN_CXXFLAGS="$CXXFLAGS"
 
 AC_INIT
-AC_REVISION($Revision: 1.454 $)
+AC_REVISION($Revision: 1.455 $)
 AC_PREREQ(2.57)
 AC_CONFIG_SRCDIR([src/octave.cc])
 AC_CONFIG_HEADER(config.h)
 
 AC_DEFINE(OCTAVE_SOURCE, 1, [Define if this is Octave.])
   
 OCTAVE_HOST_TYPE
 
@@ -958,18 +958,18 @@ AC_SUBST(GLOB_INCFLAGS)
 
 ### Checks for functions and variables.
 
 AC_CHECK_FUNCS(atexit basename bcopy bzero dup2 endgrent endpwent execvp \
   fcntl fork getcwd getegid geteuid getgid getgrent getgrgid \
   getgrnam getpgrp getpid getppid getpwent getpwuid gettimeofday \
   getuid getwd _kbhit kill link localtime_r lstat memmove mkdir \
   mkfifo mkstemp on_exit pipe poll putenv raise readlink rename \
-  rindex rmdir select setgrent setpwent setvbuf sigaction siglongjmp \
-  sigpending sigprocmask sigsuspend stat strcasecmp strdup \
+  rindex rmdir round select setgrent setpwent setvbuf sigaction \
+  siglongjmp sigpending sigprocmask sigsuspend stat strcasecmp strdup \
   strerror strftime stricmp strncasecmp strnicmp strptime symlink \
   tempnam umask unlink usleep vfprintf vsprintf vsnprintf waitpid)
 
 OCTAVE_SMART_PUTENV
 
 ### Dynamic linking is now enabled only if we are building shared
 ### libs and some API for dynamic linking is detected.
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,17 @@
+2004-09-07  John W. Eaton  <jwe@octave.org>
+
+	* Range.cc (round): Delete unused function.
+
+	* lo-mappers.cc (xround): Rename from round.  Change all uses.
+	If HAVE_ROUND, call round, otherwise fake with floor and ceil.
+
+	* oct-inttypes.h: Include <cmath> here.
+
 2004-09-03  David Bateman  <dbateman@free.fr>
 
 	* boolNDArray.cc (boolNDArray::concat, boolNDArray::insert):
 	New functions for boolean matrix concatenation.
 	* boolNDArray.h: Provide decls.
 
 2004-09-03  John W. Eaton  <jwe@octave.org>
 
diff --git a/liboctave/Range.cc b/liboctave/Range.cc
--- a/liboctave/Range.cc
+++ b/liboctave/Range.cc
@@ -237,22 +237,16 @@ tfloor (double x, double ct)
 }
 
 static inline double
 tceil (double x, double ct)
 {
   return -tfloor (-x, ct);
 }
 
-static inline double
-round (double x, double ct)
-{
-  return tfloor (x+0.5, ct);
-}
-
 static inline bool
 teq (double u, double v, double ct = 3.0 * DBL_EPSILON)
 {
   double tu = fabs (u);
   double tv = fabs (v);
 
   return fabs (u - v) < ((tu > tv ? tu : tv) * ct);
 }
diff --git a/liboctave/lo-mappers.cc b/liboctave/lo-mappers.cc
--- a/liboctave/lo-mappers.cc
+++ b/liboctave/lo-mappers.cc
@@ -72,19 +72,23 @@ imag (double)
 
 double
 real (double x)
 {
   return x;
 }
 
 double
-round (double x)
+xround (double x)
 {
-  return D_NINT (x);
+#if defined HAVE_ROUND
+  return round (x);
+#else
+  return (x < 0 ? ceil (x - 0.5) : floor (x + 0.5);
+#endif
 }
 
 double
 signum (double x)
 {
   double tmp = 0.0;
   if (x < 0.0)
     tmp = -1.0;
@@ -248,19 +252,19 @@ fix (const Complex& x)
 
 Complex
 floor (const Complex& x)
 {
   return Complex (floor (real (x)), floor (imag (x)));
 }
 
 Complex
-round (const Complex& x)
+xround (const Complex& x)
 {
-  return Complex (D_NINT (real (x)), D_NINT (imag (x)));
+  return Complex (xround (real (x)), xround (imag (x)));
 }
 
 Complex
 signum (const Complex& x)
 {
   return x / abs (x);
 }
 
diff --git a/liboctave/lo-mappers.h b/liboctave/lo-mappers.h
--- a/liboctave/lo-mappers.h
+++ b/liboctave/lo-mappers.h
@@ -25,17 +25,17 @@ Software Foundation, 59 Temple Place - S
 
 #include "oct-cmplx.h"
 
 extern double arg (double x);
 extern double conj (double x);
 extern double fix (double x);
 extern double imag (double x);
 extern double real (double x);
-extern double round (double x);
+extern double xround (double x);
 extern double signum (double x);
 
 extern bool xisnan (double x);
 extern bool xfinite (double x);
 extern bool xisinf (double x);
 
 extern bool octave_is_NA (double x);
 extern bool octave_is_NaN_or_NA (double x);
@@ -54,17 +54,17 @@ extern Complex atanh (const Complex& x);
 extern Complex log10 (const Complex& x);
 extern Complex tan (const Complex& x);
 extern Complex tanh (const Complex& x);
 #endif
 
 extern Complex ceil (const Complex& x);
 extern Complex fix (const Complex& x);
 extern Complex floor (const Complex& x);
-extern Complex round (const Complex& x);
+extern Complex xround (const Complex& x);
 extern Complex signum (const Complex& x);
 
 extern bool xisnan (const Complex& x);
 extern bool xfinite (const Complex& x);
 extern bool xisinf (const Complex& x);
 
 extern bool octave_is_NA (const Complex& x);
 extern bool octave_is_NaN_or_NA (const Complex& x);
diff --git a/liboctave/oct-inttypes.h b/liboctave/oct-inttypes.h
--- a/liboctave/oct-inttypes.h
+++ b/liboctave/oct-inttypes.h
@@ -18,18 +18,19 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 #if !defined (octave_inttypes_h)
 #define octave_inttypes_h 1
 
+#include <cmath>
+
 #include <limits>
-
 #include <iostream>
 
 #include "data-conv.h"
 #include "lo-ieee.h"
 
 typedef signed char octave_int8_t;
 typedef TWO_BYTE_INT octave_int16_t;
 typedef FOUR_BYTE_INT octave_int32_t;
@@ -281,17 +282,17 @@ public:
     ival = OCTAVE_INT_FIT_TO_RANGE (t * tx, T);
     return *this;
   }
 
   octave_int<T>& operator /= (const octave_int<T>& x)
   {
     double t = static_cast<double> (value ());
     double tx = static_cast<double> (x.value ());
-    double r = (t == 0 && tx == 0) ? 0 : round (t / tx);
+    double r = (t == 0 && tx == 0) ? 0 : xround (t / tx);
     ival = OCTAVE_INT_FIT_TO_RANGE (r, T);
     return *this;
   }
 
   template <class T2>
   octave_int<T>& operator <<= (const T2& x)
   {
     ival = ((ival << x) > std::numeric_limits<T>::max ()) ? 0 : (ival << x);
@@ -355,27 +356,27 @@ pow (const octave_int<T>& a, const octav
 }
 
 template <class T>
 octave_int<T>
 pow (double a, const octave_int<T>& b)
 {
   double tb = static_cast<double> (b.value ());
   double r = pow (a, tb);
-  r = lo_ieee_isnan (r) ? 0 : round (r);
+  r = lo_ieee_isnan (r) ? 0 : xround (r);
   return OCTAVE_INT_FIT_TO_RANGE (r, T);
 }
 
 template <class T>
 octave_int<T>
 pow (const octave_int<T>& a, double b)
 {
   double ta = static_cast<double> (a.value ());
   double r = pow (ta, b);
-  r = lo_ieee_isnan (r) ? 0 : round (r);
+  r = lo_ieee_isnan (r) ? 0 : xround (r);
   return OCTAVE_INT_FIT_TO_RANGE (r, T);
 }
 
 template <class T>
 std::ostream&
 operator << (std::ostream& os, const octave_int<T>& ival)
 {
   os << ival.value ();
@@ -430,35 +431,35 @@ operator / (const octave_int<T1>& x, con
 
 #define OCTAVE_INT_DOUBLE_BIN_OP(OP) \
  \
   template <class T> \
   octave_int<T> \
   operator OP (const octave_int<T>& x, double y) \
   { \
     double tx = static_cast<double> (x.value ()); \
-    double r = round (tx OP y); \
-    r = lo_ieee_isnan (r) ? 0 : round (r); \
+    double r = xround (tx OP y); \
+    r = lo_ieee_isnan (r) ? 0 : xround (r); \
     return OCTAVE_INT_FIT_TO_RANGE (r, T); \
   }
 
 OCTAVE_INT_DOUBLE_BIN_OP(+)
 OCTAVE_INT_DOUBLE_BIN_OP(-)
 OCTAVE_INT_DOUBLE_BIN_OP(*)
 OCTAVE_INT_DOUBLE_BIN_OP(/)
 
 #define OCTAVE_DOUBLE_INT_BIN_OP(OP) \
  \
   template <class T> \
   octave_int<T> \
   operator OP (double x, const octave_int<T>& y) \
   { \
     double ty = static_cast<double> (y.value ()); \
     double r = x OP ty; \
-    r = lo_ieee_isnan (r) ? 0 : round (r); \
+    r = lo_ieee_isnan (r) ? 0 : xround (r); \
     return OCTAVE_INT_FIT_TO_RANGE (r, T); \
   }
 
 OCTAVE_DOUBLE_INT_BIN_OP(+)
 OCTAVE_DOUBLE_INT_BIN_OP(-)
 OCTAVE_DOUBLE_INT_BIN_OP(*)
 OCTAVE_DOUBLE_INT_BIN_OP(/)
 
diff --git a/src/mappers.cc b/src/mappers.cc
--- a/src/mappers.cc
+++ b/src/mappers.cc
@@ -560,17 +560,17 @@ Compute the base-10 logarithm for each e
 
   DEFUN_MAPPER (real, 0, 0, 0, real, xreal, 0, 0.0, 0.0, 0, 0,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} real (@var{z})\n\
 Return the real part of @var{z}.\n\
 @end deftypefn\n\
 @seealso{imag and conj}");
 
-  DEFUN_MAPPER (round, 0, 0, 0, round, 0, round, 0.0, 0.0, 0, 0,
+  DEFUN_MAPPER (round, 0, 0, 0, xround, 0, xround, 0.0, 0.0, 0, 0,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} round (@var{x})\n\
 Return the integer nearest to @var{x}.  If @var{x} is complex, return\n\
 @code{round (real (@var{x})) + round (imag (@var{x})) * I}.\n\
 @end deftypefn\n\
 @seealso{rem}");
 
   DEFUN_MAPPER (sign, 0, 0, 0, signum, 0, signum, 0.0, 0.0, 0, 0,
