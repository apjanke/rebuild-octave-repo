# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1470431052 -3600
#      Fri Aug 05 22:04:12 2016 +0100
# Node ID 30eefd9ddb48071b40271262d16a4f926fae42e6
# Parent  cfa684a0539da407b92c417a9be1c69f9cedcf33
prepad, postpad: do nothing wen input is already of the right size.

diff --git a/scripts/general/postpad.m b/scripts/general/postpad.m
--- a/scripts/general/postpad.m
+++ b/scripts/general/postpad.m
@@ -68,17 +68,25 @@ function y = postpad (x, l, c, dim)
   endif
 
   if (dim > nd)
     sz(nd+1:dim) = 1;
   endif
 
   d = sz(dim);
 
-  if (d >= l)
+  if (d == l)
+    ## This optimization makes sense because the function is used to match
+    ## the length between two vectors not knowing a priori is larger, and
+    ## allow for:
+    ##    ml = max (numel (v1), numel (v2));
+    ##    v1 = postpad (v1, ml);
+    ##    v2 = postpad (v2, ml);
+    y = x;
+  elseif (d >= l)
     idx = repmat ({':'}, nd, 1);
     idx{dim} = 1:l;
     y = x(idx{:});
   else
     sz(dim) = l - d;
     y = cat (dim, x, c(ones (sz)));
   endif
 
@@ -88,16 +96,20 @@ endfunction
 %!assert (postpad ([1,2], 4), [1,2,0,0])
 %!assert (postpad ([1;2], 4), [1;2;0;0])
 %!assert (postpad ([1,2], 4, 2), [1,2,2,2])
 %!assert (postpad ([1;2], 4, 2), [1;2;2;2])
 %!assert (postpad ([1,2], 2, 2, 1), [1,2;2,2])
 %!assert (postpad ([1;2], 2, 2, 3), reshape ([1;2;2;2], 2, 1, 2))
 %!assert (postpad ([1,2], 2, 2, 3), reshape ([1,2,2,2], 1, 2, 2))
 
+%!assert (postpad ([1 2], 2), [1 2])
+%!assert (postpad ([1; 2], 2), [1; 2])
+%!assert (postpad ([1; 2], 2, 3, 2), [1 3; 2 3])
+
 %! ## Test with string concatenation (bug #44162)
 %!assert (postpad ("Octave", 16, "x"), "Octavexxxxxxxxxx")
 %!assert (postpad ("Octave", 4), "Octa")
 
 %!error postpad ()
 %!error postpad (1)
 %!error postpad (1,2,3,4,5)
 
diff --git a/scripts/general/prepad.m b/scripts/general/prepad.m
--- a/scripts/general/prepad.m
+++ b/scripts/general/prepad.m
@@ -68,17 +68,25 @@ function y = prepad (x, l, c, dim)
   endif
 
   if (dim > nd)
     sz(nd+1:dim) = 1;
   endif
 
   d = sz(dim);
 
-  if (d >= l)
+  if (d == l)
+    ## This optimization makes sense because the function is used to match
+    ## the length between two vectors not knowing a priori is larger, and
+    ## allow for:
+    ##    ml = max (numel (v1), numel (v2));
+    ##    v1 = prepad (v1, ml);
+    ##    v2 = prepad (v2, ml);
+    y = x;
+  elseif (d >= l)
     idx = repmat ({':'}, nd, 1);
     idx{dim} = d-l+1:d;
     y = x(idx{:});
   else
     sz(dim) = l - d;
     y = cat (dim, c(ones (sz)), x);
   endif
 
@@ -86,16 +94,20 @@ endfunction
 
 
 %!assert (prepad ([1,2], 4), [0,0,1,2])
 %!assert (prepad ([1;2], 4), [0;0;1;2])
 
 %!assert (prepad ([1,2], 4, 2), [2,2,1,2])
 %!assert (prepad ([1;2], 4, 2), [2;2;1;2])
 
+%!assert (prepad ([1 2], 2), [1 2])
+%!assert (prepad ([1; 2], 2), [1; 2])
+%!assert (prepad ([1; 2], 2, 3, 2), [3 1; 3 2])
+
 %!assert (prepad ([1,2], 2, 2, 1), [2,2;1,2])
 
 %!assert (prepad ([1,2], 2, 2, 3), reshape ([2,2,1,2], 1, 2, 2))
 %!assert (prepad ([1;2], 2, 2, 3), reshape ([2;2;1;2], 2, 1, 2))
 
 %! ## Test with string concatenation (bug #44162)
 %!assert (prepad ("Octave", 16, "x"), "xxxxxxxxxxOctave")
 %!assert (prepad ("Octave", 4), "tave")
