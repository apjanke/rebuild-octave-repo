# HG changeset patch
# User jwe
# Date 929774795 0
#      Sat Jun 19 06:46:35 1999 +0000
# Node ID a41cc560087ab24b74a78325da821e2151371a56
# Parent  2270329efd14f91cd61f1b94907cda1b4e838adc
[project @ 1999-06-19 06:46:20 by jwe]

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,15 @@
+Fri Jun 18 23:17:02 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* interpreter/Makefile.in (octave_toc.html): Add -expandinfo to
+	tex12html options.
+	* liboctave/Makefile.in (liboctave_toc.html): Likewise.
+	* faq/Makefile.in (Octave-FAQ_toc.html): Likewise.
+
 Fri Oct  9 00:27:33 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* faq/Makefile.in, interpreter/Makefile.in, liboctave/Makefile.in:
 	New rules for generating HTML files from Texinfo sources.
 
 Thu May 14 21:04:40 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* interpreter/Makefile.in (../../BUGS, ../../INSTALL): Add
diff --git a/doc/faq/Makefile.in b/doc/faq/Makefile.in
--- a/doc/faq/Makefile.in
+++ b/doc/faq/Makefile.in
@@ -45,17 +45,17 @@ Octave-FAQ.dvi: Octave-FAQ.texi
 	-TEXINPUTS="$(srcdir):$(srcdir)/..:$(TEXINPUTS):"; \
 	  export TEXINPUTS; \
 	  $(TEXI2DVI) $(srcdir)/Octave-FAQ.texi
 
 Octave-FAQ.ps: Octave-FAQ.dvi
 	-dvips -o Octave-FAQ.ps Octave-FAQ.dvi
 
 Octave-FAQ_toc.html:
-	-texi2html -split_chapter $(srcdir)/Octave-FAQ.texi
+	-texi2html -expandinfo -split_chapter $(srcdir)/Octave-FAQ.texi
 
 check install install-strip uninstall:
 .PHONY: check install install-strip uninstall
 
 tags: $(SOURCES)
 	ctags $(SOURCES)
 
 TAGS: $(SOURCES)
diff --git a/doc/interpreter/Makefile.in b/doc/interpreter/Makefile.in
--- a/doc/interpreter/Makefile.in
+++ b/doc/interpreter/Makefile.in
@@ -76,17 +76,18 @@ octave.ps: octave.dvi
 ../../BUGS: bugs.texi
 	rm -f BUGS
 	-makeinfo -D BUGSONLY \
 	  --no-validate --no-headers --no-split --output BUGS \
 	  -I$(srcdir) -I$(srcdir)/.. $(srcdir)/bugs.texi
 	mv BUGS ../../BUGS
 
 octave_toc.html:
-	-texi2html -split_chapter -I$(srcdir)/.. $(srcdir)/octave.texi
+	-texi2html -expandinfo -split_chapter -I$(srcdir)/.. \
+	  $(srcdir)/octave.texi
 
 check: all
 .PHONY: check
 
 install install-strip: all
 	$(top_srcdir)/mkinstalldirs $(man1dir) $(infodir)
 	@if test -d $(man1dir); then \
 	  rm -f $(man1dir)/octave$(man1ext); \
diff --git a/doc/interpreter/basics.texi b/doc/interpreter/basics.texi
--- a/doc/interpreter/basics.texi
+++ b/doc/interpreter/basics.texi
@@ -212,17 +212,17 @@ When Octave starts, the value of the bui
 typed at the shell prompt to run Octave, and the value of
 @code{program_name} is automatically set to the final component of
 @code{program_invocation_name}.  For example, if you typed
 @samp{@value{OCTAVEHOME}/bin/octave} to start Octave,
 @code{program_invocation_name} would have the value
 @code{"@value{OCTAVEHOME}/bin/octave"}, and @code{program_name} would
 have the value @code{"octave"}.
 
-If executing a script from the command line (e.g., @code{octave foo.m}
+If executing a script from the command line (e.g., @code{octave foo.m})
 or using an executable Octave script, the program name is set to the
 name of the script.  @xref{Executable Octave Programs} for an example of
 how to create an executable Octave script.
 @end defvr
 
 Here is an example of using these variables to reproduce Octave's
 command line.
 
diff --git a/doc/interpreter/io.texi b/doc/interpreter/io.texi
--- a/doc/interpreter/io.texi
+++ b/doc/interpreter/io.texi
@@ -1160,27 +1160,28 @@ In more detail, an input conversion spec
 @samp{%} character followed in sequence by:
 
 @itemize @bullet
 @item
 An optional @dfn{flag character} @samp{*}, which says to ignore the text
 read for this specification.  When @code{scanf} finds a conversion
 specification that uses this flag, it reads input as directed by the
 rest of the conversion specification, but it discards this input, does
-not use a pointer argument, and does not increment the count of
+not return any value, and does not increment the count of
 successful assignments.
 @cindex flag character (@code{scanf})
 
 @item
 An optional decimal integer that specifies the @dfn{maximum field
 width}.  Reading of characters from the input stream stops either when
 this maximum is reached or when a non-matching character is found,
 whichever happens first.  Most conversions discard initial whitespace
-characters (those that don't are explicitly documented), and these
-discarded characters don't count towards the maximum field width.
+characters, and these discarded characters don't count towards the
+maximum field width.  Conversions that do not discard initial whitespace
+are explicitly documented.
 @cindex maximum field width (@code{scanf})
 
 @item
 An optional type modifier character.  This character is ignored by
 Octave's @code{scanf} function, but is recognized to provide
 compatibility with the C language @code{scanf}.
 
 @item
diff --git a/doc/liboctave/Makefile.in b/doc/liboctave/Makefile.in
--- a/doc/liboctave/Makefile.in
+++ b/doc/liboctave/Makefile.in
@@ -49,17 +49,18 @@ liboctave.dvi: $(TEXINFO) ../conf.texi
 	-TEXINPUTS="$(srcdir):$(srcdir)/..:$(TEXINPUTS):"; \
 	  export TEXINPUTS; \
 	  $(TEXI2DVI) $(srcdir)/liboctave.texi
 
 liboctave.ps: liboctave.dvi
 	-dvips -o liboctave.ps liboctave.dvi
 
 liboctave_toc.html:
-	-texi2html -split_chapter -I$(srcdir)/.. $(srcdir)/liboctave.texi
+	-texi2html -expandinfo -split_chapter -I$(srcdir)/.. \
+	  $(srcdir)/liboctave.texi
 
 check:
 .PHONY: check
 
 install install-strip: all
 .PHONY: install install-strip
 
 uninstall:
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+Fri Jun 18 12:19:22 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* polynomial/polyfit.m: Correct previous change.
+
 Wed Apr  7 13:57:26 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* linear-algebra/qrhouse.m, linear-algebra/krygetq.m: Delete.
 
 Wed Apr  7 13:22:43 1999  A. S. Hodel <a.s.hodel@eng.auburn.edu>
 
 	* control/is_controllable.m, control/zgscal.m: Accomodate new
 	version of krylov and krylovb.
diff --git a/scripts/polynomial/polyfit.m b/scripts/polynomial/polyfit.m
--- a/scripts/polynomial/polyfit.m
+++ b/scripts/polynomial/polyfit.m
@@ -54,17 +54,17 @@ function [p, yf] = polyfit (x, y, n)
   X = (x * ones (1, n+1)) .^ (ones (l, 1) * (0 : n));
 
   p = X \ y;
 
   if (nargout == 2)
     yf = X * p;
 
     if (y_is_row_vector)
-      yf = yf';
+      yf = yf.';
     endif
   endif
 
   p = flipud (p);
 
   if (! prefer_column_vectors)
     p = p.';
   endif
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,21 @@
+Mon Jun  7 09:54:51 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* lex.l (next_token_is_bin_op, next_token_is_postfix_unary_op,
+	handle_number): Delete yytext arg.  Change all callers.
+	(next_token_is_postfix_unary_op): Check the first character
+	obtained from yyinput before calling it again.
+	(next_token_is_bin_op): Do a more thorough check.
+	(handle_identifier): Also enter token in local symbol table if the
+	following token is a dot and it looks like a binary operator.
+	(whitespace_in_literal_matrix): Now static.
+
+	* lex.l: Always use unput, not yyunput.
+
 Fri May 28 11:02:37 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* DLD-FUNCTIONS/chol.cc (Fchol): If two output arguments, never
 	produce error message.
 
 Thu May 27 18:28:35 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* DLD-FUNCTIONS/chol.cc (Fchol): Also return info as second output.
diff --git a/src/file-io.cc b/src/file-io.cc
--- a/src/file-io.cc
+++ b/src/file-io.cc
@@ -941,24 +941,24 @@ Reads data in binary form of type PRECIS
 \n\
   SKIP      : number of bytes to skip after each element is read\n\
               (default is 0)\n\
 \n\
   ARCH      : string specifying the data format for the file.  Valid\n\
               values are\n\
 \n\
     native   --  the format of the current machine (default)\n\
-    ieee-le  --  IEEE big endian\n\
-    ieee-be  --  IEEE little endian\n\
+    ieee-be  --  IEEE big endian\n\
+    ieee-le  --  IEEE little endian\n\
     vaxd     --  VAX D floating format\n\
     vaxg     --  VAX G floating format\n\
     cray     --  Cray floating format\n\
 \n\
               however, conversions are currently only supported for\n\
-              ieee-be, and ieee-le formats.\n\
+              ieee-be and ieee-le formats.\n\
 \n\
 \n\
   DATA      : matrix in which the data is stored\n\
 \n\
   COUNT     : number of elements read")
 {
   octave_value_list retval;
 
diff --git a/src/help.cc b/src/help.cc
--- a/src/help.cc
+++ b/src/help.cc
@@ -860,25 +860,23 @@ display the definition of each NAME that
 		output_buf << argv[i] << " is a builtin text-function\n";
 	      else if (sym_rec->is_builtin_function ())
 		output_buf << argv[i] << " is a builtin function\n";
 	      else if (sym_rec->is_user_variable ()
 		       || sym_rec->is_builtin_variable ())
 		{
 		  octave_value defn = sym_rec->def ();
 
-		  assert (defn.is_constant ());
-
 		  int var_ok = 1;
 
 		  // XXX FIXME XXX -- need to handle structure
 		  // references correctly.
 
-		  if (defn.is_map ())
-		    error ("type: operations on structs not implemented");
+		  //if (defn.is_map ())
+		  //  error ("type: operations on structs not implemented");
 
 		  if (! error_state)
 		    {
 		      if (nargout == 0 && ! quiet)
 			{
 			  if (var_ok)
 			    {
 			      output_buf << argv[i];
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -165,20 +165,20 @@ static int Vwhitespace_in_literal_matrix
 static void fixup_column_count (char *s);
 static void do_comma_insert_check (void);
 static int is_plot_keyword (const string& s);
 static int is_keyword (const string& s);
 static string plot_style_token (const string& s);
 static symbol_record *lookup_identifier (const string& s);
 static void grab_help_text (void);
 static bool match_any (char c, const char *s);
-static bool next_token_is_bin_op (int spc_prev, char *yytext);
-static bool next_token_is_postfix_unary_op (int spc_prev, char *yytext);
+static bool next_token_is_bin_op (bool spc_prev);
+static bool next_token_is_postfix_unary_op (bool spc_prev);
 static string strip_trailing_whitespace (char *s);
-static void handle_number (char *yytext);
+static void handle_number (void);
 static int handle_string (char delim, int text_style = 0);
 static int handle_close_brace (int spc_gobbled);
 static int handle_identifier (const string& tok, int spc_gobbled);
 static bool have_continuation (bool trailing_comments_ok = true);
 static bool have_ellipsis_continuation (bool trailing_comments_ok = true);
 static yum_yum eat_whitespace (void);
 static yum_yum eat_continuation (void);
 
@@ -231,17 +231,17 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 	  TOK_RETURN (',');
 	else
 	  TOK_RETURN (';');
       }
   }
 
 <TEXT_FCN>[\"\'] {
     current_input_column++;
-    return handle_string (yytext[0], 1);
+    return handle_string (yytext[0], true);
   }
 
 <TEXT_FCN>[^ \t\n\;\,\"\'][^ \t\n\;\,]*{S}* {
     string tok = strip_trailing_whitespace (yytext);
     TOK_PUSH_AND_RETURN (tok, TEXT);
   }
 
 %{
@@ -289,18 +289,18 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 // here we can end up inserting too many commas.
 %}
 
 <MATRIX>{S}+ {
     current_input_column += yyleng;
     if (Vwhitespace_in_literal_matrix != 2)
       {
 	int tmp = eat_continuation ();
-	int bin_op = next_token_is_bin_op (1, yytext);
-	int postfix_un_op = next_token_is_postfix_unary_op (1, yytext);
+	int bin_op = next_token_is_bin_op (true);
+	int postfix_un_op = next_token_is_postfix_unary_op (true);
 
 	if (! (postfix_un_op || bin_op)
 	    && nesting_level.is_brace ()
 	    && lexer_flags.convert_spaces_to_comma)
 	  {
 	    lexer_flags.quote_is_transpose = false;
 	    lexer_flags.cant_be_identifier = false;
 	    lexer_flags.convert_spaces_to_comma = true;
@@ -392,28 +392,28 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
       TOK_RETURN (']');
   }
 
 %{
 // Imaginary numbers.
 %}
 
 {NUMBER}{Im} {
-    handle_number (yytext);
+    handle_number ();
     return IMAG_NUM;
   }
 
 %{
 // Real numbers.  Don't grab the `.' part of a dot operator as part of
 // the constant.
 %}
 
 {D}+/\.[\*/\\^'] |
 {NUMBER} {
-    handle_number (yytext);
+    handle_number ();
     return NUM;
   }
 
 %{
 // Eat whitespace.  Whitespace inside matrix constants is handled by
 // the <MATRIX> start state code above.
 %}
 
@@ -663,20 +663,20 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 
 void
 do_comma_insert_check (void)
 {
   int spc_gobbled = eat_continuation ();
 
   int c = yyinput ();
 
-  yyunput (c, yytext);
+  unput (c);
 
   if (spc_gobbled)
-    yyunput (' ', yytext);
+    unput (' ');
 
   lexer_flags.do_comma_insert = (lexer_flags.braceflag && c == '[');
 }
 
 // Fix things up for errors or interrupts.  The parser is never called
 // recursively, so it is always safe to reinitialize its state before
 // doing any parsing.
 
@@ -1167,17 +1167,17 @@ grab_help_text (void)
 	      goto done;
 	    }
 	}
     }
 
  done:
 
   if (c)
-    yyunput (c, yytext);
+    unput (c);
 }
 
 // Return 1 if the given character matches any character in the given
 // string.
 
 static bool
 match_any (char c, const char *s)
 {
@@ -1192,111 +1192,162 @@ match_any (char c, const char *s)
 
 // Given information about the spacing surrounding an operator,
 // return 1 if it looks like it should be treated as a binary
 // operator.  For example,
 //
 //   [ 1 + 2 ]  or  [ 1+ 2]  or  [ 1+2 ]  ==> binary
 
 static bool
-looks_like_bin_op (int spc_prev, int spc_next)
+looks_like_bin_op (bool spc_prev, int next_char)
 {
+  bool spc_next = (next_char == ' ' || next_char == '\t');
+
   return ((spc_prev && spc_next) || ! spc_prev);
 }
 
 // Try to determine if the next token should be treated as a postfix
 // unary operator.  This is ugly, but it seems to do the right thing.
 
 static bool
-next_token_is_postfix_unary_op (int spc_prev, char *yytext)
+next_token_is_postfix_unary_op (bool spc_prev)
 {
   bool un_op = false;
 
   int c0 = yyinput ();
-  int c1 = yyinput ();
-
-  yyunput (c1, yytext);
-  yyunput (c0, yytext);
 
-  int transpose = (c0 == '.' && c1 == '\'');
-  int hermitian = (c0 == '\'');
+  if (c0 == '\'' && ! spc_prev)
+    {
+      un_op = true;
+    }
+  else if (c0 == '.')
+    {
+      int c1 = yyinput ();
+      un_op = (c1 == '\'');
+      unput (c1);
+    }
 
-  un_op = (transpose || (hermitian && ! spc_prev));
+  unput (c0);
 
   return un_op;
 }
 
 // Try to determine if the next token should be treated as a binary
-// operator.  This is even uglier, but it also seems to do the right
-// thing.  Note that it is only necessary to check the spacing for `+'
-// and `-', since those are the only tokens that can appear as unary
-// ops too.
-//
-// Note that this never returns true for `.', even though it can be a
-// binary operator (the structure reference thing).  The only time
-// this appears to matter is for things like
+// operator.
 //
-//   [ a . b ]
+// This kluge exists because whitespace is not always ignored inside
+// the square brackets that are used to create matrix objects.
 //
-// which probably doesn't occur that often, can be worked around by
-// eliminating the whitespace, putting the expression in parentheses,
-// or using `whitespace_in_literal_matrix = "ignored"', so I think it
-// is an acceptable change.  It would be quite a bit harder to `fix'
-// this.  (Well, maybe not.  the best fix would be to do away with the
-// specialness of whitespace inside of `[ ... ]').
-//
-// However, we still do check for `.+', `.*', etc.
+// Line continuations directly after the operator will cause this
+// function to return FALSE.
 
 static bool
-next_token_is_bin_op (int spc_prev, char *yytext)
+next_token_is_bin_op (bool spc_prev)
 {
   bool bin_op = false;
 
   int c0 = yyinput ();
 
   switch (c0)
     {
+    case ':':
     case '+':
     case '-':
+    case '/':
+    case '\\':
+    case '^':
       {
 	int c1 = yyinput ();
-	yyunput (c1, yytext);
-	int spc_next = (c1 == ' ' || c1 == '\t');
-	bin_op = looks_like_bin_op (spc_prev, spc_next);
+	bin_op = looks_like_bin_op (spc_prev, c1);
+	unput (c1);
       }
       break;
 
+    // .+ .- ./ .\ .^ .* .**
     case '.':
       {
 	int c1 = yyinput ();
-	yyunput (c1, yytext);
-	bin_op = match_any (c1, "+-*/\\^");
+
+	if (match_any (c1, "+-/\\^"))
+	  {
+	    int c2 = yyinput ();
+	    bin_op = looks_like_bin_op (spc_prev, c2);
+	    unput (c2);
+	  }
+	else if (c1 == '*')
+	  {
+	    int c2 = yyinput ();
+
+	    if (c2 == '*')
+	      {
+		int c3 = yyinput ();
+		bin_op = looks_like_bin_op (spc_prev, c3);
+		unput (c3);
+	      }
+	    else
+	      bin_op = looks_like_bin_op (spc_prev, c2);
+
+	    unput (c2);
+	  }
+	else if (! isdigit (c1) && c1 != ' ' && c1 != '\t')
+	  {
+	    bin_op = true;
+	  }
+
+	unput (c1);
       }
       break;
 
-    case '/':
-    case ':':
-    case '\\':
-    case '^':
+    // = == & && | || * **
+    case '=':
     case '&':
+    case '|':
     case '*':
-    case '|':
+      {
+	int c1 = yyinput ();
+
+	if (c1 == c0)
+	  {
+	    int c2 = yyinput ();
+	    bin_op = looks_like_bin_op (spc_prev, c2);
+	    unput (c2);
+	  }
+	else
+	  bin_op = looks_like_bin_op (spc_prev, c1);
+
+	unput (c1);
+      }
+      break;
+
+    // <= >= <> ~= != < >
     case '<':
     case '>':
     case '~':
     case '!':
-    case '=':
-      bin_op = true;
+      {
+	int c1 = yyinput ();
+
+	if ((c1 == '=') || (c1 == '<' && c1 == '>'))
+	  {
+	    int c2 = yyinput ();
+	    bin_op = looks_like_bin_op (spc_prev, c2);
+	    unput (c2);
+	  }
+	else if (c1 != '~' && c1 != '!')
+	  bin_op = looks_like_bin_op (spc_prev, c1);
+
+	unput (c1);
+      }
       break;
 
     default:
       break;
     }
 
-  yyunput (c0, yytext);
+  unput (c0);
 
   return bin_op;
 }
 
 // Used to delete trailing white space from tokens.
 
 static string
 strip_trailing_whitespace (char *s)
@@ -1373,29 +1424,29 @@ eat_whitespace (void)
 	  if (in_comment)
 	    break;
 	  else
 	    goto done;
 	}
     }
 
  done:
-  yyunput (c, yytext);
+  unput (c);
   current_input_column--;
   return retval;
 }
 
 static inline bool
 looks_like_hex (const char *s, int len)
 {
   return (len > 2 && s[0] == '0' && (s[1] == 'x' || s[1] == 'X'));
 }
 
 static void
-handle_number (char *yytext)
+handle_number (void)
 {
   char *tmp = strsave (yytext);
 
   char *idx = strpbrk (tmp, "Dd");
 
   if (idx)
     *idx = 'e';
 
@@ -1475,27 +1526,27 @@ have_continuation (bool trailing_comment
 
 	default:
 	  if (! in_comment)
 	    goto cleanup;
 	  break;
 	}
     }
 
-  yyunput (c, yytext);
+  unput (c);
   return false;
 
 cleanup:
   buf << ends;
   char *s = buf.str ();
   if (s)
     {
       int len = strlen (s);
       while (len--)
-	yyunput (s[len], yytext);
+	unput (s[len]);
     }
   delete [] s;
 
   return false;
 }
 
 // We have seen a `.' and need to see if it is the start of a
 // continuation.  If so, this eats it, up to and including the new
@@ -1507,22 +1558,22 @@ have_ellipsis_continuation (bool trailin
   char c1 = yyinput ();
   if (c1 == '.')
     {
       char c2 = yyinput ();
       if (c2 == '.' && have_continuation (trailing_comments_ok))
 	return true;
       else
 	{
-	  yyunput (c2, yytext);
-	  yyunput (c1, yytext);
+	  unput (c2);
+	  unput (c1);
 	}
     }
   else
-    yyunput (c1, yytext);
+    unput (c1);
 
   return false;
 }
 
 // See if we have a continuation line.  If so, eat it and the leading
 // whitespace on the next line.
 //
 // Return value is the same as described for eat_whitespace().
@@ -1531,17 +1582,17 @@ static yum_yum
 eat_continuation (void)
 {
   int retval = ATE_NOTHING;
   int c = yyinput ();
   if ((c == '.' && have_ellipsis_continuation ())
       || (c == '\\' && have_continuation ()))
     retval = eat_whitespace ();
   else
-    yyunput (c, yytext);
+    unput (c);
 
   return retval;
 }
 
 static int
 handle_string (char delim, int text_style)
 {
   ostrstream buf;
@@ -1588,17 +1639,17 @@ handle_string (char delim, int text_styl
 	    buf << (char) c;
 	  else
 	    {
 	      c = yyinput ();
 	      if (c == delim)
 		buf << (char) c;
 	      else
 		{
-		  yyunput (c, yytext);
+		  unput (c);
 		  buf << ends;
 		  char *t = buf.str ();
 		  string s = do_string_escapes (t);
 		  delete [] t;
 
 		  if (text_style && lexer_flags.doing_set)
 		    {
 		      s = string (1, delim) + s + string (1, delim);
@@ -1731,19 +1782,18 @@ handle_close_brace (int spc_gobbled)
     }
   else
     {
       int c1 = yyinput ();
       unput (c1);
 
       if (lexer_flags.braceflag && Vwhitespace_in_literal_matrix != 2)
 	{
-	  int bin_op = next_token_is_bin_op (spc_gobbled, yytext);
-	  int postfix_un_op = next_token_is_postfix_unary_op
-	    (spc_gobbled, yytext);
+	  int bin_op = next_token_is_bin_op (spc_gobbled);
+	  int postfix_un_op = next_token_is_postfix_unary_op (spc_gobbled);
 
 	  int other_op = match_any (c1, ",;\n]");
 
 	  if (! (postfix_un_op || bin_op || other_op)
 	      && nesting_level.is_brace ()
 	      && lexer_flags.convert_spaces_to_comma)
 	    {
 	      unput (',');
@@ -1759,20 +1809,19 @@ handle_close_brace (int spc_gobbled)
   return retval;
 }
 
 static void
 maybe_unput_comma (int spc_gobbled)
 {
   if (Vwhitespace_in_literal_matrix != 2 && nesting_level.is_brace ())
     {
-      int bin_op = next_token_is_bin_op (spc_gobbled, yytext);
+      int bin_op = next_token_is_bin_op (spc_gobbled);
 
-      int postfix_un_op
-	= next_token_is_postfix_unary_op (spc_gobbled, yytext);
+      int postfix_un_op = next_token_is_postfix_unary_op (spc_gobbled);
 
       int c1 = yyinput ();
       int c2 = yyinput ();
 
       unput (c2);
       unput (c1);
 
       int sep_op = match_any (c1, ",;\n]");
@@ -1864,18 +1913,19 @@ handle_identifier (const string& tok, in
       if (nesting_level.none ())
 	plot_option_kw = is_plot_keyword (tok);
 
       if (lexer_flags.cant_be_identifier && plot_option_kw)
 	TOK_RETURN (plot_option_kw);
     }
 
   int c = yyinput ();
-  yyunput (c, yytext);
+  unput (c);
   bool next_tok_is_eq = (c == '=');
+  bool next_tok_is_dot = (c == '.');
   bool next_tok_is_paren = (c == '(');
 
   // Make sure we put the return values of a function in the symbol
   // table that is local to the function.
 
   // If we are defining a function and we have not seen the function
   // name yet and the next token is `=', then this identifier must be
   // the only return value for the function and it belongs in the
@@ -1896,17 +1946,18 @@ handle_identifier (const string& tok, in
   // something like [ab,cd] = foo (), force the symbol to be inserted
   // as a variable in the current symbol table.
 
   if (is_text_function_name (tok) && ! is_variable (tok))
     {
       if (next_tok_is_eq
 	  || lexer_flags.looking_at_return_list
 	  || lexer_flags.looking_at_parameter_list
-	  || lexer_flags.looking_at_matrix_or_assign_lhs)
+	  || lexer_flags.looking_at_matrix_or_assign_lhs
+	  || (next_tok_is_dot && next_token_is_bin_op (spc_gobbled)))
 	{
 	  force_local_variable (tok);
 	}
       else if (! next_tok_is_paren)
 	{
 	  if (tok == "gset")
 	    lexer_flags.doing_set = true;
 
@@ -1945,17 +1996,17 @@ handle_identifier (const string& tok, in
 // anything other than comments and whitespace following the END token
 // that matches the FUNCTION statement.
 
 void
 check_for_garbage_after_fcn_def (void)
 {
   // By making a newline be the next character to be read, we will
   // force the parser to return after reading the function.  Calling
-  // yyunput with EOF seems not to work...
+  // unput with EOF does not work.
 
   bool in_comment = false;
   int lineno = input_line_number;
   int c;
   while ((c = yyinput ()) != EOF)
     {
       switch (c)
 	{
@@ -1978,22 +2029,22 @@ check_for_garbage_after_fcn_def (void)
 	default:
 	  if (in_comment)
 	    break;
 	  else
 	    {
 	      warning ("ignoring trailing garbage after end of function\n\
          near line %d of file `%s.m'", lineno, curr_fcn_file_name.c_str ());
 	      
-	      yyunput ('\n', yytext);
+	      unput ('\n');
 	      return;
 	    }
 	}
     }
-  yyunput ('\n', yytext);
+  unput ('\n');
 }
 
 void
 lexical_feedback::init (void)
 {
   // Not initially defining a matrix list.
   braceflag = 0;
 
@@ -2028,17 +2079,17 @@ lexical_feedback::init (void)
 
   // Not initially looking at indirect references.
   looking_at_indirect_ref = false;
 
   // Quote marks strings intially.
   quote_is_transpose = false;
 }
 
-int
+static int
 whitespace_in_literal_matrix (void)
 {
   int pref = 0;
 
   string val = builtin_string_variable ("whitespace_in_literal_matrix");
 
   if (! val.empty ())
     {
diff --git a/test/octave.test/index/dfi-f/v-3.m b/test/octave.test/index/dfi-f/v-3.m
--- a/test/octave.test/index/dfi-f/v-3.m
+++ b/test/octave.test/index/dfi-f/v-3.m
@@ -1,5 +1,5 @@
 do_fortran_indexing = 0;
 a = [4,3,2,1];
 a_prime = [4;3;2;1];
 mid_a = [3,2];
-all (a(:) == a)
+all (a(:) == a_prime)
