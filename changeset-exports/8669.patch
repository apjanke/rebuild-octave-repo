# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1233772086 18000
#      Wed Feb 04 13:28:06 2009 -0500
# Node ID 33783e94fb16957d69fa52b1c02c56fc3c294392
# Parent  739b0aebf2614d9dca884bd5c32ce60de0bf13a0
line number fixes and other evaluator tweaks

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,43 @@
+2009-02-04  John W. Eaton  <jwe@octave.org>
+
+	* pt-loop.h, pt-loop.cc (evaluating_looping_command):
+	Delete global variable and all uses.
+	* parse.y, parse.h (evaluating_function_body): Delete global
+	variable and all uses.
+	(make_break_command, make_continue_command, make_return_command):
+	Use tree_evaluator::in_fcn_or_script_body and
+	tree_evaluator::in_loop_command instead of
+	evaluating_function_body and evaluating_looping_command.
+
+	* pt-eval.h (tree_evaluator::in_function_or_script_body):
+	Delete 	member variable and all uses.
+	(tree_evaluator::reset): Delete function and all uses.
+	
+	* pt-eval.cc, pt-eval.h (tree_evaluator::in_fcn_or_script_body,
+	tree_evaluator::in_loop_command): New static variables.
+	(tree_evaluator::visit_simple_for_command,
+	tree_evaluator::visit_complex_for_command,
+	tree_evaluator::visit_while_command,
+	tree_evaluator::visit_do_until_command): Unwind-protect and set
+	tree_evaluator::in_loop_command instead of
+	evaluating_looping_command.
+	(tree_evaluator::visit_statement): Only call echo_code if
+	evaluating function or script and (Vecho_executing_commands &
+	ECHO_FUNCTIONS).  Use tree_evaluator::in_fcn_or_script_body
+	instead of evaluating_function_body.  
+
+	* ov-usr-fcn.cc (octave_user_script::do_multi_index_op):
+	octave_user_function::do_multi_index_op): Unwind-protect and set
+	tree_evaluator::in_fcn_or_script_body.
+
+	* pt-stmt.cc, pt-stmt.h (tree_statement::echo_code):
+	Rename from maybe_echo_code.  Simplify.
+
 2009-02-04  Jaroslav Hajek  <highegg@gmail.com>
 
 	* pt-loop.h (tree_simple_for_command::do_for_loop_once,
 	tree_complex_for_command::do_for_loop_once): Remove obsolete decls.
 	* pt-loop.cc (quit_loop_now): Remove obsolete method.
 	* pt-eval.cc (DO_ND_LOOP): Delete macro.
 	(tree_evaluator::visit_simple_for_command): Use the generic
 	do_index_op for iterating matrices.
diff --git a/src/ov-usr-fcn.cc b/src/ov-usr-fcn.cc
--- a/src/ov-usr-fcn.cc
+++ b/src/ov-usr-fcn.cc
@@ -123,16 +123,19 @@ octave_user_script::do_multi_index_op (i
 	      call_depth++;
 
 	      if (call_depth < Vmax_recursion_depth)
 		{
 		  octave_call_stack::push (this);
 
 		  unwind_protect::add (octave_call_stack::unwind_pop, 0);
 
+		  unwind_protect_bool (tree_evaluator::in_fcn_or_script_body);
+		  tree_evaluator::in_fcn_or_script_body = true;
+
 		  cmd_list->accept (*current_evaluator);
 
 		  if (tree_return_command::returning)
 		    tree_return_command::returning = 0;
 
 		  if (tree_break_command::breaking)
 		    tree_break_command::breaking--;
 
@@ -425,18 +428,18 @@ octave_user_function::do_multi_index_op 
 
     bool echo_commands = (Vecho_executing_commands & ECHO_FUNCTIONS);
 
     if (echo_commands)
       print_code_function_header ();
 
     // Evaluate the commands that make up the function.
 
-    unwind_protect_bool (evaluating_function_body);
-    evaluating_function_body = true;
+    unwind_protect_bool (tree_evaluator::in_fcn_or_script_body);
+    tree_evaluator::in_fcn_or_script_body = true;
 
     bool special_expr = (is_inline_function ()
 			 || cmd_list->is_anon_function_body ());
 
     if (special_expr)
       {
 	assert (cmd_list->length () == 1);
 
diff --git a/src/parse.h b/src/parse.h
--- a/src/parse.h
+++ b/src/parse.h
@@ -57,21 +57,16 @@ extern std::stack<std::string> help_buf;
 extern bool line_editing;
 
 // TRUE means we printed messages about reading startup files.
 extern bool reading_startup_message_printed;
 
 // TRUE means input is coming from startup file.
 extern bool input_from_startup_file;
 
-// TRUE means that we are in the process of evaluating a function
-// body.  The parser might be called in that case if we are looking at
-// an eval() statement.
-extern bool evaluating_function_body;
-
 // Keep track of symbol table information when parsing functions.
 extern std::stack<symbol_table::scope_id> symtab_context;
 
 // Name of parent function when parsing function files that might
 // contain nested functions.
 extern std::string parent_function_name;
 
 // Name of the current class when we are parsing class methods or
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -94,21 +94,16 @@ static std::string fcn_comment_header;
 bool line_editing = true;
 
 // TRUE means we printed messages about reading startup files.
 bool reading_startup_message_printed = false;
 
 // TRUE means input is coming from startup file.
 bool input_from_startup_file = false;
 
-// TRUE means that we are in the process of evaluating a function
-// body.  The parser might be called in that case if we are looking at
-// an eval() statement.
-bool evaluating_function_body = false;
-
 // Keep a count of how many END tokens we expect.
 int end_tokens_expected = 0;
 
 // Keep track of symbol table information when parsing functions.
 std::stack<symbol_table::scope_id> symtab_context;
 
 // Name of parent function when parsing function files that might
 // contain nested functions.
@@ -2211,19 +2206,23 @@ make_for_command (token *for_tok, tree_a
 static tree_command *
 make_break_command (token *break_tok)
 {
   tree_command *retval = 0;
 
   int l = break_tok->line ();
   int c = break_tok->column ();
 
+  // We check to see if we are evaluating a function, script, or loop
+  // so that we don't turn eval ("break;") inside a function, script,
+  // or loop into a no-op command.
+
   if (lexer_flags.looping || lexer_flags.defining_func
-      || reading_script_file || evaluating_function_body
-      || evaluating_looping_command)
+      || reading_script_file || tree_evaluator::in_fcn_or_script_body
+      || tree_evaluator::in_loop_command)
     retval = new tree_break_command (l, c);
   else
     retval = new tree_no_op_command ("break", l, c);
 
   return retval;
 }
 
 // Build a continue command.
@@ -2231,17 +2230,20 @@ make_break_command (token *break_tok)
 static tree_command *
 make_continue_command (token *continue_tok)
 {
   tree_command *retval = 0;
 
   int l = continue_tok->line ();
   int c = continue_tok->column ();
 
-  if (lexer_flags.looping || evaluating_looping_command)
+  // We check to see if we are evaluating a loop so that we don't turn
+  // eval ("continue;") into a no-op command inside a loop.
+
+  if (lexer_flags.looping || tree_evaluator::in_loop_command)
     retval = new tree_continue_command (l, c);
   else
     retval = new tree_no_op_command ("continue", l, c);
 
   return retval;
 }
 
 // Build a return command.
@@ -2257,18 +2259,22 @@ make_return_command (token *return_tok)
   if (Vdebugging)
     {
       Vdebugging = false;
 
       retval = new tree_no_op_command ("return", l, c);
     }
   else
     {
+      // We check to see if we are evaluating a function or script so
+      // that we don't turn eval ("return;") inside a function, script,
+      // or loop into a no-op command.
+
       if (lexer_flags.defining_func || reading_script_file
-          || evaluating_function_body)
+          || tree_evaluator::in_fcn_or_script_body)
         retval = new tree_return_command (l, c);
       else
         retval = new tree_no_op_command ("return", l, c);
     }
 
   return retval;
 }
 
diff --git a/src/pt-eval.cc b/src/pt-eval.cc
--- a/src/pt-eval.cc
+++ b/src/pt-eval.cc
@@ -48,16 +48,20 @@ static tree_evaluator std_evaluator;
 tree_evaluator *current_evaluator = &std_evaluator;
 
 int tree_evaluator::dbstep_flag = 0;
 
 size_t tree_evaluator::current_frame = 0;
 
 bool tree_evaluator::debug_mode = false;
 
+bool tree_evaluator::in_fcn_or_script_body = false;
+
+bool tree_evaluator::in_loop_command = false;
+
 int tree_evaluator::db_line = -1;
 int tree_evaluator::db_column = -1;
 
 // If TRUE, turn off printing of results in functions (as if a
 // semicolon has been appended to each statement).
 static bool Vsilent_functions = false;
 
 // Normal evaluator.
@@ -261,19 +265,19 @@ quit_loop_now (void)
 void
 tree_evaluator::visit_simple_for_command (tree_simple_for_command& cmd)
 {
   if (error_state)
     return;
 
   unwind_protect::begin_frame ("tree_evaluator::visit_simple_for_command");
 
-  unwind_protect_bool (evaluating_looping_command);
+  unwind_protect_bool (in_loop_command);
 
-  evaluating_looping_command = true;
+  in_loop_command = true;
 
   tree_expression *expr = cmd.control_expr ();
 
   octave_value rhs = expr->rvalue1 ();
 
   if (error_state || rhs.is_undefined ())
     goto cleanup;
 
@@ -390,19 +394,19 @@ tree_evaluator::visit_simple_for_command
 void
 tree_evaluator::visit_complex_for_command (tree_complex_for_command& cmd)
 {
   if (error_state)
     return;
 
   unwind_protect::begin_frame ("tree_evaluator::visit_complex_for_command");
 
-  unwind_protect_bool (evaluating_looping_command);
+  unwind_protect_bool (in_loop_command);
 
-  evaluating_looping_command = true;
+  in_loop_command = true;
 
   tree_expression *expr = cmd.control_expr ();
 
   octave_value rhs = expr->rvalue1 ();
 
   if (error_state || rhs.is_undefined ())
     goto cleanup;
 
@@ -633,28 +637,31 @@ tree_evaluator::visit_statement (tree_st
   if (debug_mode)
     do_breakpoint (stmt);
 
   tree_command *cmd = stmt.command ();
   tree_expression *expr = stmt.expression ();
 
   if (cmd || expr)
     {
-      if (in_function_or_script_body)
-	octave_call_stack::set_statement (&stmt);
+      if (in_fcn_or_script_body)
+	{
+	  octave_call_stack::set_statement (&stmt);
 
-      stmt.maybe_echo_code (in_function_or_script_body);
+	  if (Vecho_executing_commands & ECHO_FUNCTIONS)
+	    stmt.echo_code ();
+	}
 
       try
 	{
 	  if (cmd)
 	    cmd->accept (*this);
 	  else
 	    {
-	      if (in_function_or_script_body && Vsilent_functions)
+	      if (in_fcn_or_script_body && Vsilent_functions)
 		expr->set_print_flag (false);
 
 	      // FIXME -- maybe all of this should be packaged in
 	      // one virtual function that returns a flag saying whether
 	      // or not the expression will take care of binding ans and
 	      // printing the result.
 
 	      // FIXME -- it seems that we should just have to
@@ -703,19 +710,16 @@ tree_evaluator::visit_statement_list (tr
       while (true)
 	{
 	  tree_statement *elt = *p++;
 
 	  if (elt)
 	    {
 	      OCTAVE_QUIT;
 
-	      in_function_or_script_body
-		= lst.is_function_body () || lst.is_script_body ();
-
 	      elt->accept (*this);
 
 	      if (error_state)
 		break;
 
 	      if (tree_break_command::breaking
 		  || tree_continue_command::continuing)
 		break;
@@ -981,19 +985,19 @@ tree_evaluator::visit_unwind_protect_com
 void
 tree_evaluator::visit_while_command (tree_while_command& cmd)
 {
   if (error_state)
     return;
 
   unwind_protect::begin_frame ("tree_evaluator::visit_while_command");
 
-  unwind_protect_bool (evaluating_looping_command);
+  unwind_protect_bool (in_loop_command);
 
-  evaluating_looping_command = true;
+  in_loop_command = true;
 
   tree_expression *expr = cmd.condition ();
 
   if (! expr)
     panic_impossible ();
 
   int l = expr->line ();
   int c = expr->column ();
@@ -1029,19 +1033,19 @@ tree_evaluator::visit_while_command (tre
 void
 tree_evaluator::visit_do_until_command (tree_do_until_command& cmd)
 {
   if (error_state)
     return;
 
   unwind_protect::begin_frame ("tree_evaluator::visit_do_until_command");
 
-  unwind_protect_bool (evaluating_looping_command);
+  unwind_protect_bool (in_loop_command);
 
-  evaluating_looping_command = true;
+  in_loop_command = true;
 
   tree_expression *expr = cmd.condition ();
 
   if (! expr)
     panic_impossible ();
 
   int l = expr->line ();
   int c = expr->column ();
diff --git a/src/pt-eval.h b/src/pt-eval.h
--- a/src/pt-eval.h
+++ b/src/pt-eval.h
@@ -36,26 +36,20 @@ class tree_expression;
 
 class
 tree_evaluator : public tree_walker
 {
 public:
 
   typedef void (*decl_elt_init_fcn) (tree_decl_elt&);
 
-  tree_evaluator (bool in_function_or_script_body_arg = false)
-    : in_function_or_script_body (in_function_or_script_body_arg) { }
+  tree_evaluator (void) { }
 
   ~tree_evaluator (void) { }
 
-  void reset (void)
-  {
-    in_function_or_script_body = false;
-  }
-
   void visit_anon_fcn_handle (tree_anon_fcn_handle&);
 
   void visit_argument_list (tree_argument_list&);
 
   void visit_binary_expression (tree_binary_expression&);
 
   void visit_break_command (tree_break_command&);
 
@@ -147,19 +141,23 @@ public:
   // If < 0, stop executing at the next possible stopping point.
   static int dbstep_flag;
 
   // The number of the stack frame we are currently debugging.
   static size_t current_frame;
 
   static bool debug_mode;
 
-private:
+  // TRUE means we are evaluating a function or script body.
+  static bool in_fcn_or_script_body;
 
-  bool in_function_or_script_body;
+  // TRUE means we are evaluating some kind of looping construct.
+  static bool in_loop_command;
+
+private:
 
   void do_decl_init_list (decl_elt_init_fcn fcn,
 			  tree_decl_init_list *init_list);
 
   void do_breakpoint (tree_statement& stmt) const;
 
   void do_breakpoint (bool is_breakpoint, int l, int c,
 		      bool is_end_of_fcn_or_script = false) const;
diff --git a/src/pt-loop.cc b/src/pt-loop.cc
--- a/src/pt-loop.cc
+++ b/src/pt-loop.cc
@@ -37,19 +37,16 @@ along with Octave; see the file COPYING.
 #include "pt-cmd.h"
 #include "pt-exp.h"
 #include "pt-jump.h"
 #include "pt-loop.h"
 #include "pt-stmt.h"
 #include "pt-walk.h"
 #include "unwind-prot.h"
 
-// TRUE means we are evaluating some kind of looping construct.
-bool evaluating_looping_command = false;
-
 // While.
 
 tree_while_command::~tree_while_command (void)
 {
   delete expr;
   delete list;
   delete lead_comm;
   delete trail_comm;
diff --git a/src/pt-loop.h b/src/pt-loop.h
--- a/src/pt-loop.h
+++ b/src/pt-loop.h
@@ -32,19 +32,16 @@ class tree_expression;
 class tree_statement_list;
 
 class tree_walker;
 
 #include "comment-list.h"
 #include "pt-cmd.h"
 #include "symtab.h"
 
-// TRUE means we are evaluating some kind of looping construct.
-extern bool evaluating_looping_command;
-
 // While.
 
 class
 tree_while_command : public tree_command
 {
 public:
 
   tree_while_command (int l = -1, int c = -1)
diff --git a/src/pt-stmt.cc b/src/pt-stmt.cc
--- a/src/pt-stmt.cc
+++ b/src/pt-stmt.cc
@@ -78,25 +78,21 @@ tree_statement::line (void) const
 
 int
 tree_statement::column (void) const
 {
   return cmd ? cmd->column () : (expr ? expr->column () : -1);
 }
 
 void
-tree_statement::maybe_echo_code (bool in_function_or_script_body)
+tree_statement::echo_code (void)
 {
-  if (in_function_or_script_body
-      && (Vecho_executing_commands & ECHO_FUNCTIONS))
-    {
-      tree_print_code tpc (octave_stdout, VPS4);
+  tree_print_code tpc (octave_stdout, VPS4);
 
-      accept (tpc);
-    }
+  accept (tpc);
 }
 
 bool
 tree_statement::is_end_of_fcn_or_script (void) const
 {
   bool retval = false;
 
   if (cmd)
diff --git a/src/pt-stmt.h b/src/pt-stmt.h
--- a/src/pt-stmt.h
+++ b/src/pt-stmt.h
@@ -68,17 +68,17 @@ public:
 
   void delete_breakpoint (void) { bp = false; }
 
   bool is_breakpoint (void) const { return bp; }
 
   int line (void) const;
   int column (void) const;
 
-  void maybe_echo_code (bool in_function_body);
+  void echo_code (void);
 
   tree_command *command (void) { return cmd; }
 
   tree_expression *expression (void) { return expr; }
 
   octave_comment_list *comment_text (void) { return comm; }
 
   bool is_null_statement (void) const { return ! (cmd || expr || comm); }
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -551,18 +551,16 @@ main_loop (void)
 
 	  // This is the same as yyparse in parse.y.
 	  retval = octave_parse ();
 
 	  if (retval == 0)
 	    {
 	      if (global_command)
 		{
-		  current_evaluator->reset ();
-
 		  global_command->accept (*current_evaluator);
 
 		  delete global_command;
 
 		  global_command = 0;
 
 		  OCTAVE_QUIT;
 
