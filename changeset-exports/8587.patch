# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1232828827 -3600
#      Sat Jan 24 21:27:07 2009 +0100
# Node ID 35656d6ad061c9fca04653b5b3d0a4a3e2cd72b2
# Parent  31ab3b83bc8a9be0afa595904560254db87891f9
properly reshape cs-lists assigned to struct & cells

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2009-01-24  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov-struct.cc (octave_struct::subsasgn): Reshape cs-list on rhs 
+	according to the index expression.
+	* ov-cell.cc (octave_cell::subsasgn): Dtto.
+
 2008-12-25 Ben Abbott <bpabbott@mac.com>
 
 	* load-path.cc: New function commandlinepath.
 	* load-path.h: Make command_line_path public.
 
 2009-01-24 Ben Abbott <bpabbott@mac.com>
 
 	* DLD-FUNCTIONS/eigs.cc: eigs.cc: skip tests if ARPACK is missing.
diff --git a/src/ov-cell.cc b/src/ov-cell.cc
--- a/src/ov-cell.cc
+++ b/src/ov-cell.cc
@@ -286,34 +286,37 @@ octave_cell::subsasgn (const std::string
 	      }
 	    else
 	      gripe_failed_assignment ();
 	  }
 	  break;
 
 	case '{':
 	  {
-	    octave_value_list i = idx.front ();
+	    octave_value_list idxf = idx.front ();
 
 	    if (t_rhs.is_cs_list ())
 	      {
 		Cell tmp_cell = Cell (t_rhs.list_value ());
 
-		// The shape of the RHS is irrelevant, we just want
-		// the number of elements to agree and to preserve the
-		// shape of the left hand side of the assignment.
+                // Inquire the proper shape of the RHS.
+
+                dim_vector didx = dims ().redim (idxf.length ());
+                for (octave_idx_type k = 0; k < idxf.length (); k++)
+                  if (! idxf(k).is_magic_colon ()) didx(k) = idxf(k).numel ();
 
-		if (numel () == tmp_cell.numel ())
-		  tmp_cell = tmp_cell.reshape (dims ());
+                if (didx.numel () == tmp_cell.numel ())
+                  tmp_cell = tmp_cell.reshape (didx);
+
 
-		octave_base_matrix<Cell>::assign (i, tmp_cell);
+		octave_base_matrix<Cell>::assign (idxf, tmp_cell);
 	      }
-	    else if (i.all_scalars () || do_index_op (i, true).numel () == 1)
+	    else if (idxf.all_scalars () || do_index_op (idxf, true).numel () == 1)
               // Regularize a null matrix if stored into a cell.
-              octave_base_matrix<Cell>::assign (i, Cell (t_rhs.storable_value ()));
+              octave_base_matrix<Cell>::assign (idxf, Cell (t_rhs.storable_value ()));
             else if (! error_state)
               error ("invalid assignment to cs-list outside multiple assignment.");
 
 	    if (! error_state)
 	      {
 		count++;
 		retval = octave_value (this);
 	      }
diff --git a/src/ov-struct.cc b/src/ov-struct.cc
--- a/src/ov-struct.cc
+++ b/src/ov-struct.cc
@@ -383,43 +383,55 @@ octave_struct::subsasgn (const std::stri
       switch (type[0])
 	{
 	case '(':
 	  {
 	    if (n > 1 && type[1] == '.')
 	      {
 		std::list<octave_value_list>::const_iterator p = idx.begin ();
 		octave_value_list key_idx = *++p;
-                octave_value_list idx_front = idx.front ();
+                octave_value_list idxf = idx.front ();
 
 		assert (key_idx.length () == 1);
 
 		std::string key = key_idx(0).string_value ();
 
 		if (! error_state)
 		  {
                     if (t_rhs.is_cs_list ())
                       {
-                        map.assign (idx.front (), key, Cell (t_rhs.list_value ()));
+                        Cell tmp_cell = Cell (t_rhs.list_value ());
+
+                        // Inquire the proper shape of the RHS.
+
+                        dim_vector didx = dims ().redim (idxf.length ());
+                        for (octave_idx_type k = 0; k < idxf.length (); k++)
+                          if (! idxf(k).is_magic_colon ()) didx(k) = idxf(k).numel ();
+
+                        if (didx.numel () == tmp_cell.numel ())
+                          tmp_cell = tmp_cell.reshape (didx);
+
+
+                        map.assign (idxf, key, tmp_cell);
 
                         if (! error_state)
                           {
                             count++;
                             retval = octave_value (this);
                           }
                         else
                           gripe_failed_assignment ();
                       }
                     else 
                       {
                         // cast map to const reference to avoid forced key insertion.
-                        if (idx_front.all_scalars () 
-                            || cmap.contents (key).index (idx_front, true).numel () == 1)
+                        if (idxf.all_scalars () 
+                            || cmap.contents (key).index (idxf, true).numel () == 1)
                           {
-                            map.assign (idx_front, key, t_rhs.storable_value ());
+                            map.assign (idxf, key, t_rhs.storable_value ());
                             if (! error_state)
                               {
                                 count++;
                                 retval = octave_value (this);
                               }
                             else
                               gripe_failed_assignment ();
                           }
