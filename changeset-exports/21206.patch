# HG changeset patch
# User Oliver Heimlich <oheim@posteo.de>
# Date 1454794693 -3600
#      Sat Feb 06 22:38:13 2016 +0100
# Node ID 15517574276a71abe539f2161af4b7d4641b2390
# Parent  5e2023e6e3f51b5d67a192c6a12b66bc0181b72c
doc: Add octave.css to HTML interpreter manual (patch #8888).

diff --git a/doc/interpreter/octave.css b/doc/interpreter/octave.css
new file mode 100644
--- /dev/null
+++ b/doc/interpreter/octave.css
@@ -0,0 +1,66 @@
+/*
+Copyright (C) 2016 Oliver Heimlich
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at
+your option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+*/
+
+@font-face { font-family: 'Roboto Condensed'; src: local('Roboto Condensed'),
+	url('https://fontlibrary.org/assets/fonts/roboto-condensed/71405335c70332d94afd24ae4f06c9b2/4b8b4b377e8cb358cf886d13c7bb287c/RobotoCondensedBold.ttf') format('truetype');
+	font-weight: bold; font-style: normal; }
+@font-face { font-family: 'Roboto Condensed'; src: local('Roboto Condensed'),
+	url('https://fontlibrary.org/assets/fonts/roboto-condensed/71405335c70332d94afd24ae4f06c9b2/9b1d05d1b332e5b95ad86e71ca8404fb/RobotoCondensedBoldItalic.ttf') format('truetype');
+    	font-weight: bold; font-style: italic; }
+@font-face { font-family: 'Roboto Condensed'; src: local('Roboto Condensed'),
+	url('https://fontlibrary.org/assets/fonts/roboto-condensed/71405335c70332d94afd24ae4f06c9b2/d02fffb6890e4f28023dd149916d1b8a/RobotoCondensedItalic.ttf') format('truetype');
+	font-weight: normal; font-style: italic; }
+@font-face { font-family: 'Roboto Condensed'; src: local('Roboto Condensed'),
+	url('https://fontlibrary.org/assets/fonts/roboto-condensed/71405335c70332d94afd24ae4f06c9b2/b0b1845ecce8ab6a503971e808a8409c/RobotoCondensedRegular.ttf') format('truetype');
+	font-weight: normal; font-style: normal; }
+@font-face { font-family: 'Fantasque Sans Mono'; src: local('Fantasque Sans Mono'),
+	url('https://fontlibrary.org/assets/fonts/fantasque-sans-mono/db52617ba875d08cbd8e080ca3d9f756/b145f0e884b2da8f1b112d26e7cefd3d/FantasqueSansMonoBold.ttf') format('truetype');
+	font-weight: bold; font-style: normal; }
+@font-face { font-family: 'Fantasque Sans Mono'; src: local('Fantasque Sans Mono'),
+	url('https://fontlibrary.org/assets/fonts/fantasque-sans-mono/db52617ba875d08cbd8e080ca3d9f756/49319cbd53210c32099631ac89b1e70a/FantasqueSansMonoBoldItalic.ttf') format('truetype');
+	font-weight: bold; font-style: italic; }
+@font-face { font-family: 'Fantasque Sans Mono'; src: local('Fantasque Sans Mono'),
+	url('https://fontlibrary.org/assets/fonts/fantasque-sans-mono/db52617ba875d08cbd8e080ca3d9f756/5c07fe59e84e4594ffa87ae1a72b130d/FantasqueSansMonoItalic.ttf') format('truetype');
+	font-weight: normal; font-style: italic; }
+@font-face { font-family: 'Fantasque Sans Mono'; src: local('Fantasque Sans Mono'),
+	url('https://fontlibrary.org/assets/fonts/fantasque-sans-mono/db52617ba875d08cbd8e080ca3d9f756/cc70dc22137e92aaef169e1de38a6ec7/FantasqueSansMonoRegular.ttf') format('truetype');
+	font-weight: normal; font-style: normal; }
+body > * { max-width: 42em; }
+div.header { max-width: 100%; }
+hr { margin-left: 0; border: none; border-top: 3px double #657b83; }
+div.header, div.float-caption { color: #657b83; }
+ul, ol { max-width: 39.5em; padding-left: 2.5em; }
+div.example, div.display, div.indentedblock, div.smalldisplay, div.lisp, div.smallindentedblock, div.smallexample, div.smalllisp { max-width: 38.8em; margin-left: 3.2em; }
+blockquote { margin-left: 3.2em; margin-right: 3.2em; max-width: 35.6em; }
+body, span.roman { font-family: 'Roboto Condensed', sans-serif; }
+body { padding-left: 7.5em; padding-right: 7.5em; }
+h1, h2, h3, h4, h5, pre.menu-comment { font-family: 'Roboto Condensed', serif; text-align: left !important; }
+div.float table, img { margin-left: auto; margin-right: auto; }
+div.float table { width: 38em; }
+div.float table, div.float th { border-collapse: collapse; border-top: 1px solid black; border-bottom: 1px solid black; }
+div.float th, div.float td { padding: 0.5em; }
+dd > p:first-child { margin-top: 0; }
+a { color: #268bd2; }
+a:visited { color: #d33682; }
+code, kbd, samp, tt { font-family: 'Fantasque Sans Mono', monospace; padding: 0 0.1em; font-style: italic; }
+pre.example, pre.smallexample, pre.verbatim { font-family: 'Fantasque Sans Mono', monospace; }
+pre.example { background-color: #fdf6e3; color: #657b83; padding: 0.5em; }
+.example { margin-bottom: 1em; }
+.example + .example { margin-top: -0.5em }
diff --git a/doc/module.mk b/doc/module.mk
--- a/doc/module.mk
+++ b/doc/module.mk
@@ -253,16 +253,17 @@ HTMLS += doc/interpreter/octave.html
 
 ## As of version 1.14.1, automake does not seem to generate
 ## rules for DVI, PDF, or HTML output that work for us when
 ## there are additional dependencies, so we include our own
 ## versions of the rules here.
 
 OCTAVE_HTML_DIR = doc/interpreter/octave.html
 OCTAVE_HTML_TMP_DIR = $(OCTAVE_HTML_DIR:.html=.htp)
+OCTAVE_HTML_CSS = $(OCTAVE_HTML_DIR)/octave.css
 OCTAVE_HTML_STAMP = $(OCTAVE_HTML_DIR)/.octave-html-stamp
 
 $(srcdir)/doc/interpreter/octave.info: $(DOC_IMAGES_TXT) $(octave_TEXINFOS)
 doc/interpreter/octave.dvi: $(DOC_IMAGES_EPS) $(octave_TEXINFOS)
 doc/interpreter/octave.pdf: $(DOC_IMAGES_PDF) $(octave_TEXINFOS)
 $(OCTAVE_HTML_STAMP): $(DOC_IMAGES_PNG) $(octave_TEXINFOS)
 
 $(srcdir)/doc/interpreter/octave.info: doc/interpreter/octave.texi $(srcdir)/doc/interpreter/version-octave.texi
@@ -298,47 +299,51 @@ doc/interpreter/octave.pdf: doc/interpre
 	MAKEINFO='$(MAKEINFO) $(AM_MAKEINFOFLAGS) $(MAKEINFOFLAGS) -I doc/interpreter -I $(abs_top_srcdir)/doc/interpreter' \
 	$(TEXI2PDF) $(AM_V_texinfo) --build-dir=$(@:.pdf=.t2p) -o $@ $(AM_V_texidevnull) \
 	`test -f 'doc/interpreter/octave.texi' || echo '$(abs_top_srcdir)/'`doc/interpreter/octave.texi
 
 doc/interpreter/octave.html: $(OCTAVE_HTML_STAMP)
 
 $(OCTAVE_HTML_STAMP): doc/interpreter/octave.texi $(srcdir)/doc/interpreter/version-octave.texi | doc/interpreter/$(am__dirstamp)
 	$(AM_V_MAKEINFO)rm -rf $(OCTAVE_HTML_DIR)
-	$(AM_V_at)if $(MAKEINFOHTML) $(AM_MAKEINFOHTMLFLAGS) $(MAKEINFOFLAGS) -I doc/interpreter -I $(abs_top_srcdir)/doc/interpreter \
+	$(AM_V_at)if $(MAKEINFOHTML) $(AM_MAKEINFOHTMLFLAGS) $(MAKEINFOFLAGS) \
+	 -I doc/interpreter -I $(abs_top_srcdir)/doc/interpreter \
+	 --css-ref=octave.css \
 	 -o $(OCTAVE_HTML_TMP_DIR) `test -f 'doc/interpreter/octave.texi' || echo '$(abs_top_srcdir)/'`doc/interpreter/octave.texi; \
 	then \
 	  rm -rf $(OCTAVE_HTML_DIR) && \
 	  mv $(OCTAVE_HTML_TMP_DIR) $(OCTAVE_HTML_DIR) && \
 	  touch $@; \
 	else \
 	  rm -rf $(OCTAVE_HTML_TMP_DIR); exit 1; \
 	fi
 
-$(HTMLDIR_IMAGES) : doc/interpreter/octave.html/%.png: doc/interpreter/%.png $(OCTAVE_HTML_STAMP)
+$(HTMLDIR_IMAGES) $(OCTAVE_HTML_CSS) : doc/interpreter/octave.html/%: doc/interpreter/% $(OCTAVE_HTML_STAMP)
 	$(AM_V_GEN)cp $< $@
 
 DOC_TARGETS += \
   $(srcdir)/doc/interpreter/octave.info \
   doc/interpreter/doc-cache \
   doc/interpreter/octave.ps \
   doc/interpreter/octave.pdf \
   $(OCTAVE_HTML_STAMP) \
-  $(HTMLDIR_IMAGES)
+  $(HTMLDIR_IMAGES) \
+  $(OCTAVE_HTML_CSS)
 
 doc_EXTRA_DIST += \
   $(BUILT_OCTAVE_TEXI_SRC) \
   $(srcdir)/doc/interpreter/octave.info \
   doc/interpreter/TODO \
   doc/interpreter/doc-cache \
   doc/interpreter/octave.dvi \
   doc/interpreter/octave.ps \
   doc/interpreter/octave.pdf \
   doc/interpreter/octave.html \
-  $(HTMLDIR_IMAGES)
+  $(HTMLDIR_IMAGES) \
+  $(OCTAVE_HTML_CSS)
 
 # Prevent packaging of distribution unless all libraries
 # necessary to create documentation are present
 doc-interpreter-dist-hook:
 	@$(GREP) '#define HAVE_COLAMD 1' $(top_builddir)/config.h > /dev/null || { echo "Documentation creation requires missing COLAMD library.  Cannot package distribution!" ; exit 1; }
 	@$(GREP) '#define HAVE_CHOLMOD 1' $(top_builddir)/config.h > /dev/null || { echo "Documentation creation requires missing CHOLMOD library.  Cannot package distribution!" ; exit 1; }
 	@$(GREP) '#define HAVE_UMFPACK 1' $(top_builddir)/config.h > /dev/null || { echo "Documentation creation requires missing UMFPACK library.  Cannot package distribution!" ; exit 1; }
 	@$(GREP) '#define HAVE_QHULL 1' $(top_builddir)/config.h > /dev/null || { echo "Documentation creation requires missing QHULL library.  Cannot package distribution!" ; exit 1; }
