# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1511891005 18000
#      Tue Nov 28 12:43:25 2017 -0500
# Node ID 64691264dd210d3b5437239eb6cfcd162e5b306d
# Parent  222addbadf46f46805ea505171e2ea86243beec2
eliminate some uses of decl_scope in symbol_record class

* symrec.cc, symrec.h (symbol_record::clear (void)): Delete.
(symbol_record::clear (symbol_scope *),
symbol_record_rep::clear (symbol_scope *)):
Eliminate argument.  Change all uses.

(symbol_record_rep::push_context, symbol_record_rep::pop_context):
Eliminate symbol_scope argument.  Change all uses.  Eliminate call for
fwd_rep.

(symbol_record::push_context, symbol_record::pop_context):
Eliminate symbol_scope argument.  Change all uses.

diff --git a/libinterp/corefcn/symrec.cc b/libinterp/corefcn/symrec.cc
--- a/libinterp/corefcn/symrec.cc
+++ b/libinterp/corefcn/symrec.cc
@@ -43,38 +43,16 @@ namespace octave
 {
   symbol_record::context_id
   symbol_record::symbol_record_rep::get_decl_scope_context (void) const
   {
     return m_decl_scope ? m_decl_scope->current_context () : 0;
   }
 
   void
-  symbol_record::symbol_record_rep::clear (symbol_scope *sid)
-  {
-    if (auto t_fwd_rep = m_fwd_rep.lock ())
-      {
-        t_fwd_rep->clear (sid);
-        return;
-      }
-
-    if (! (is_hidden () || is_inherited ())
-        && sid == decl_scope ())
-      {
-        if (is_global ())
-          unmark_global ();
-
-        assign (octave_value ());
-
-        if (is_persistent ())
-          unmark_persistent ();
-      }
-  }
-
-  void
   symbol_record::symbol_record_rep::init_persistent (void)
   {
     if (auto t_fwd_rep = m_fwd_rep.lock ())
       {
         t_fwd_rep->init_persistent ();
         return;
       }
 
diff --git a/libinterp/corefcn/symrec.h b/libinterp/corefcn/symrec.h
--- a/libinterp/corefcn/symrec.h
+++ b/libinterp/corefcn/symrec.h
@@ -191,26 +191,22 @@ namespace octave
           context = get_decl_scope_context ();
 
         if (context < m_value_stack.size ())
           return m_value_stack[context];
         else
           return octave_value ();
       }
 
-      void push_context (symbol_scope *sid)
+      void push_context (void)
       {
         if (auto t_fwd_rep = m_fwd_rep.lock ())
-          {
-            t_fwd_rep->push_context (sid);
-            return;
-          }
+          return;
 
-        if (! (is_persistent () || is_global ())
-            && sid == decl_scope ())
+        if (! (is_persistent () || is_global ()))
           m_value_stack.push_back (octave_value ());
       }
 
       // If pop_context returns 0, we are out of values and this element
       // of the symbol table should be deleted.  This can happen for
       // functions like
       //
       //   function foo (n)
@@ -218,46 +214,61 @@ namespace octave
       //       foo (n-1);
       //     else
       //       eval ("x = 1");
       //     endif
       //   endfunction
       //
       // Here, X should only exist in the final stack frame.
 
-      size_t pop_context (symbol_scope *sid)
+      size_t pop_context (void)
       {
-        if (auto t_fwd_rep = m_fwd_rep.lock ())
-          return t_fwd_rep->pop_context (sid);
-
         size_t retval = 1;
 
-        if (! (is_persistent () || is_global ())
-            && sid == decl_scope ())
+        if (auto t_fwd_rep = m_fwd_rep.lock ())
+          return retval;
+
+        if (! (is_persistent () || is_global ()))
           {
             m_value_stack.pop_back ();
             retval = m_value_stack.size ();
           }
 
         return retval;
       }
 
       void clear (void)
       {
+        // There is no need to do anything with a fowarded
+        // symbol_record_rep here.
+        //
+        // For scripts, we are never executing in the script "scope".
+        //
+        // For globals, we are only interested in breaking the link to
+        // the global value and clearing the local value, not the
+        // global one.
+
+        // For persistent values, we clear the value then unmark so
+        // that we clear the first element of the value stack.
+
         if (auto t_fwd_rep = m_fwd_rep.lock ())
+          return;
+
+        if (! (is_hidden () || is_inherited ()))
           {
-            t_fwd_rep->clear ();
-            return;
+            if (is_global ())
+              unmark_global ();
+
+            assign (octave_value ());
+
+            if (is_persistent ())
+              unmark_persistent ();
           }
-
-        clear (decl_scope ());
       }
 
-      void clear (symbol_scope *sid);
-
       bool is_defined (void) const
       {
         if (auto t_fwd_rep = m_fwd_rep.lock ())
           return t_fwd_rep->is_defined ();
 
         return varval ().is_defined ();
       }
 
@@ -661,24 +672,22 @@ namespace octave
       return m_rep->varref ();
     }
 
     octave_value varval (void) const
     {
       return m_rep->varval ();
     }
 
-    void push_context (symbol_scope *sid) { m_rep->push_context (sid); }
+    void push_context (void) { m_rep->push_context (); }
 
-    size_t pop_context (symbol_scope *sid) { return m_rep->pop_context (sid); }
+    size_t pop_context (void) { return m_rep->pop_context (); }
 
     void clear (void) { m_rep->clear (); }
 
-    void clear (symbol_scope *sid) { m_rep->clear (sid); }
-
     bool is_defined (void) const
     {
       return m_rep->is_defined ();
     }
 
     bool is_undefined (void) const
     {
       return ! m_rep->is_defined ();
diff --git a/libinterp/corefcn/symscope.h b/libinterp/corefcn/symscope.h
--- a/libinterp/corefcn/symscope.h
+++ b/libinterp/corefcn/symscope.h
@@ -256,100 +256,100 @@ namespace octave
         }
 
       return retval;
     }
 
     void push_context (void)
     {
       for (auto& nm_sr : m_symbols)
-        nm_sr.second.push_context (this);
+        nm_sr.second.push_context ();
     }
 
     void pop_context (void)
     {
       table_iterator tbl_it = m_symbols.begin ();
 
       while (tbl_it != m_symbols.end ())
         {
-          if (tbl_it->second.pop_context (this) == 0)
+          if (tbl_it->second.pop_context () == 0)
             m_symbols.erase (tbl_it++);
           else
             tbl_it++;
         }
     }
 
     void refresh (void)
     {
       for (auto& nm_sr : m_symbols)
         {
           symbol_record& sr = nm_sr.second;
 
           if (! sr.is_persistent ())
-            sr.clear (this);
+            sr.clear ();
         }
     }
 
     void clear_variables (void)
     {
       for (auto& nm_sr : m_symbols)
-        nm_sr.second.clear (this);
+        nm_sr.second.clear ();
     }
 
     void clear_objects (void)
     {
       for (auto& nm_sr : m_symbols)
         {
           symbol_record& sr = nm_sr.second;
           octave_value val = sr.varval ();
           if (val.isobject ())
-            nm_sr.second.clear (this);
+            nm_sr.second.clear ();
         }
     }
 
     void clear_global (const std::string& name);
 
     void clear_variable (const std::string& name)
     {
       table_iterator p = m_symbols.find (name);
 
       if (p != m_symbols.end ())
-        p->second.clear (this);
+        p->second.clear ();
     }
 
     void clear_global_pattern (const std::string& pat);
 
     void clear_variable_pattern (const std::string& pat)
     {
       glob_match pattern (pat);
 
       for (auto& nm_sr : m_symbols)
         {
           symbol_record& sr = nm_sr.second;
 
           if (sr.is_defined () || sr.is_global ())
             {
               if (pattern.match (sr.name ()))
-                sr.clear (this);
+                sr.clear ();
             }
         }
     }
 
     void clear_variable_regexp (const std::string& pat)
     {
       octave::regexp pattern (pat);
 
       for (auto& nm_sr : m_symbols)
         {
           symbol_record& sr = nm_sr.second;
 
           if (sr.is_defined () || sr.is_global ())
             {
               if (pattern.is_match (sr.name ()))
-                sr.clear (this);
+                sr.clear ();
             }
         }
     }
 
     void mark_automatic (const std::string& name)
     {
       insert (name).mark_automatic ();
     }
