# HG changeset patch
# User Rik <rik@octave.org>
# Date 1497219974 25200
#      Sun Jun 11 15:26:14 2017 -0700
# Node ID e95738a119dacd21bacaa03a8df626bbca895aac
# Parent  5faefc310a211278edcafeaf12822ff0a997acfc
maint: Deprecate is_cellstr and replace with iscellstr.

* ov.h (is_cellstr): Use OCTAVE_DEPRECATED macro for is_cellstr.
* ov.h (iscellstr): New function.

* Cell.cc, Cell.h, data.cc, graphics.cc, graphics.in.h, lookup.cc, strfns.cc,
sysdep.cc, __delaunayn__.cc, __voronoi__.cc, convhulln.cc, ov-base.h,
ov-cell.cc, ov-cell.h, ov-java.cc, ov-struct.cc:
Replace occurrences of is_cellstr with iscellstr.

diff --git a/libinterp/corefcn/Cell.cc b/libinterp/corefcn/Cell.cc
--- a/libinterp/corefcn/Cell.cc
+++ b/libinterp/corefcn/Cell.cc
@@ -115,17 +115,17 @@ Cell::Cell (const dim_vector& dv, const 
             }
 
           elem(i) = s;
         }
     }
 }
 
 bool
-Cell::is_cellstr (void) const
+Cell::iscellstr (void) const
 {
   bool retval = true;
 
   octave_idx_type n = numel ();
 
   for (octave_idx_type i = 0; i < n; i++)
     {
       if (! elem(i).is_string ())
diff --git a/libinterp/corefcn/Cell.h b/libinterp/corefcn/Cell.h
--- a/libinterp/corefcn/Cell.h
+++ b/libinterp/corefcn/Cell.h
@@ -67,17 +67,17 @@ public:
 
   Cell (const Array<std::string>& sa);
 
   Cell (const dim_vector& dv, const string_vector& sv, bool trim = false);
 
   Cell (const Cell& c)
     : Array<octave_value> (c) { }
 
-  bool is_cellstr (void) const;
+  bool iscellstr (void) const;
 
   Array<std::string> cellstr_value (void) const;
 
   string_vector string_vector_value (void) const;
 
   using Array<octave_value>::index;
 
   Cell index (const octave_value_list& idx, bool resize_ok = false) const;
diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -6910,17 +6910,17 @@ the ratio K/M is small; otherwise, it ma
           MAKE_INT_BRANCH (uint16);
           MAKE_INT_BRANCH (uint32);
           MAKE_INT_BRANCH (uint64);
           MAKE_INT_BRANCH (bool);
 
 #undef MAKE_INT_BRANCH
 
         default:
-          if (argx.is_cellstr ())
+          if (argx.iscellstr ())
             retval = argx.cellstr_value ().nth_element (n, dim);
           else
             err_wrong_type_arg ("nth_element", argx);
         }
     }
   catch (const octave::index_exception& e)
     {
       index_error ("nth_element: invalid N value %s. %s",
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -6600,17 +6600,17 @@ axes::properties::get_extent (bool with_
   return ext;
 }
 
 static octave_value
 convert_ticklabel_string (const octave_value& val)
 {
   octave_value retval = val;
 
-  if (val.is_cellstr ())
+  if (val.iscellstr ())
     {
       // Always return a column vector for Matlab compatibility
       if (val.columns () > 1)
         retval = val.reshape (dim_vector (val.numel (), 1));
     }
   else
     {
       string_vector sv;
@@ -6698,17 +6698,17 @@ axes::properties::set_zticklabel (const 
 
 // Almost identical to convert_ticklabel_string but it only accepts
 // cellstr or string, not numeric input.
 static octave_value
 convert_linestyleorder_string (const octave_value& val)
 {
   octave_value retval = val;
 
-  if (val.is_cellstr ())
+  if (val.iscellstr ())
     {
       // Always return a column vector for Matlab Compatibility
       if (val.columns () > 1)
         retval = val.reshape (dim_vector (val.numel (), 1));
     }
   else
     {
       string_vector sv;
@@ -10429,17 +10429,17 @@ being @qcode{"portrait"}.
   // loop over graphics objects
   for (octave_idx_type n = 0; n < hcv.numel (); n++)
     {
       graphics_object go = gh_manager::get_object (hcv(n));
 
       if (! go)
         error ("set: invalid handle (= %g)", hcv(n));
 
-      if (nargin == 3 && args(1).is_cellstr () && args(2).is_cell ())
+      if (nargin == 3 && args(1).iscellstr () && args(2).is_cell ())
         {
           if (args(2).cell_value ().rows () == 1)
             go.set (args(1).cellstr_value (), args(2).cell_value (), 0);
           else if (hcv.numel () == args(2).cell_value ().rows ())
             go.set (args(1).cellstr_value (), args(2).cell_value (), n);
           else
             error ("set: number of graphics handles must match number of value rows (%d != %d)",
                    hcv.numel (), args(2).cell_value ().rows ());
@@ -10553,17 +10553,17 @@ lists respectively.
             error ("get: vector of handles must all have the same type");
         }
     }
 
   octave_value retval;
   Cell vals;
   bool use_cell_format = false;
 
-  if (nargin > 1 && args(1).is_cellstr ())
+  if (nargin > 1 && args(1).iscellstr ())
     {
       Array<std::string> plist = args(1).cellstr_value ();
 
       octave_idx_type plen = plist.numel ();
 
       use_cell_format = true;
 
       vals.resize (dim_vector (hcv_len, plen));
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -491,17 +491,17 @@ public:
       }
   }
 
   string_array_property (const std::string& s, const graphics_handle& h,
                          const Cell& c, const char& sep = '|',
                          const desired_enum& typ = string_t)
     : base_property (s, h), desired_type (typ), separator (sep), str ()
   {
-    if (! c.is_cellstr ())
+    if (! c.iscellstr ())
       error ("set: invalid order property value for \"%s\"",
              get_name ().c_str ());
 
     string_vector strings (c.numel ());
 
     for (octave_idx_type i = 0; i < c.numel (); i++)
       strings[i] = c(i).string_value ();
 
@@ -612,17 +612,17 @@ protected:
         desired_type = string_t;
 
         if (replace)
           {
             str = strings;
             return true;
           }
       }
-    else if (val.is_cellstr ())
+    else if (val.iscellstr ())
       {
         bool replace = false;
         Cell new_cell = val.cell_value ();
 
         string_vector strings = new_cell.cellstr_value ();
 
         octave_idx_type nel = strings.numel ();
 
diff --git a/libinterp/corefcn/lookup.cc b/libinterp/corefcn/lookup.cc
--- a/libinterp/corefcn/lookup.cc
+++ b/libinterp/corefcn/lookup.cc
@@ -247,17 +247,17 @@ at most n-1).
   octave_value y = args(1);
   if (table.ndims () > 2 || (table.columns () > 1 && table.rows () > 1))
     warning ("lookup: table is not a vector");
 
   octave_value retval;
 
   bool num_case = ((table.is_numeric_type () && y.is_numeric_type ())
                    || (table.is_char_matrix () && y.is_char_matrix ()));
-  bool str_case = table.is_cellstr () && (y.is_string () || y.is_cellstr ());
+  bool str_case = table.iscellstr () && (y.is_string () || y.iscellstr ());
   bool left_inf = false;
   bool right_inf = false;
   bool match_idx = false;
   bool match_bool = false;
 
   if (nargin == 3)
     {
       std::string opt = args(2).xstring_value ("lookup: OPT must be a string");
@@ -314,17 +314,17 @@ at most n-1).
                                     left_inf, right_inf,
                                     match_idx, match_bool);
     }
   else if (str_case)
     {
       Array<std::string> str_table = table.cellstr_value ();
       Array<std::string> str_y (dim_vector (1, 1));
 
-      if (y.is_cellstr ())
+      if (y.iscellstr ())
         str_y = y.cellstr_value ();
       else
         str_y(0) = y.string_value ();
 
       Array<octave_idx_type> idx = str_table.lookup (str_y);
       octave_idx_type nval = str_y.numel ();
 
       // Post-process.
diff --git a/libinterp/corefcn/strfns.cc b/libinterp/corefcn/strfns.cc
--- a/libinterp/corefcn/strfns.cc
+++ b/libinterp/corefcn/strfns.cc
@@ -352,17 +352,17 @@ do_strcmp_fun (const octave_value& arg0,
       if (r == 0 || r == 1)
         {
           // Broadcast the string.
 
           boolNDArray output (cell_val.dims (), false);
 
           std::string s = (r == 0 ? "" : str[0]);
 
-          if (cell_val.is_cellstr ())
+          if (cell_val.iscellstr ())
             {
               const Array<std::string> cellstr = cell_val.cellstr_value ();
               for (octave_idx_type i = 0; i < cellstr.numel (); i++)
                 output(i) = str_op (cellstr(i), s, n);
             }
           else
             {
               // FIXME: should we warn here?
@@ -397,17 +397,17 @@ do_strcmp_fun (const octave_value& arg0,
           else
             {
               // Must match in all dimensions.
 
               boolNDArray output (cell.dims (), false);
 
               if (cell.numel () == r)
                 {
-                  if (cell_val.is_cellstr ())
+                  if (cell_val.iscellstr ())
                     {
                       const Array<std::string> cellstr
                         = cell_val.cellstr_value ();
                       for (octave_idx_type i = 0; i < cellstr.numel (); i++)
                         output(i) = str_op (str[i], cellstr(i), n);
                     }
                   else
                     {
@@ -458,17 +458,17 @@ do_strcmp_fun (const octave_value& arg0,
       if (r2 == 1)
         {
           // Broadcast cell2.
 
           if (cell2(0).is_string ())
             {
               const std::string str2 = cell2(0).string_value ();
 
-              if (cell1_val.is_cellstr ())
+              if (cell1_val.iscellstr ())
                 {
                   const Array<std::string> cellstr = cell1_val.cellstr_value ();
                   for (octave_idx_type i = 0; i < cellstr.numel (); i++)
                     output(i) = str_op (cellstr(i), str2, n);
                 }
               else
                 {
                   // FIXME: should we warn here?
@@ -483,17 +483,17 @@ do_strcmp_fun (const octave_value& arg0,
                 }
             }
         }
       else
         {
           if (size1 != size2)
             error ("%s: nonconformant cell arrays", fcn_name);
 
-          if (cell1.is_cellstr () && cell2.is_cellstr ())
+          if (cell1.iscellstr () && cell2.iscellstr ())
             {
               const Array<std::string> cellstr1 = cell1_val.cellstr_value ();
               const Array<std::string> cellstr2 = cell2_val.cellstr_value ();
               for (octave_idx_type i = 0; i < r1; i++)
                 output (i) = str_op (cellstr1(i), cellstr2(i), n);
             }
           else
             {
diff --git a/libinterp/corefcn/sysdep.cc b/libinterp/corefcn/sysdep.cc
--- a/libinterp/corefcn/sysdep.cc
+++ b/libinterp/corefcn/sysdep.cc
@@ -909,17 +909,17 @@ tilde_expand ("~/bin")
     print_usage ();
 
   octave_value arg = args(0);
 
   string_vector sv = arg.xstring_vector_value ("tilde_expand: argument must be char or cellstr object");
 
   sv = octave::sys::file_ops::tilde_expand (sv);
 
-  if (arg.is_cellstr ())
+  if (arg.iscellstr ())
     return ovl (Cell (arg.dims (), sv));
   else
     return ovl (sv);
 }
 
 /*
 %!test
 %! home = get_home_directory ();
diff --git a/libinterp/dldfcn/__delaunayn__.cc b/libinterp/dldfcn/__delaunayn__.cc
--- a/libinterp/dldfcn/__delaunayn__.cc
+++ b/libinterp/dldfcn/__delaunayn__.cc
@@ -122,17 +122,17 @@ Undocumented internal function.
     options = "Qt Qbb Qc Qx";
 
   if (nargin == 2)
     {
       if (args(1).is_string ())
         options = args(1).string_value ();
       else if (args(1).is_empty ())
         ;  // Use default options
-      else if (args(1).is_cellstr ())
+      else if (args(1).iscellstr ())
         {
           options = "";
           Array<std::string> tmp = args(1).cellstr_value ();
 
           for (octave_idx_type i = 0; i < tmp.numel (); i++)
             options += tmp(i) + " ";
         }
       else
diff --git a/libinterp/dldfcn/__voronoi__.cc b/libinterp/dldfcn/__voronoi__.cc
--- a/libinterp/dldfcn/__voronoi__.cc
+++ b/libinterp/dldfcn/__voronoi__.cc
@@ -121,17 +121,17 @@ Undocumented internal function.
   if (nargin == 3)
     {
       octave_value opt_arg = args(2);
 
       if (opt_arg.is_string ())
         options = " " + opt_arg.string_value ();
       else if (opt_arg.is_empty ())
         ; // Use default options.
-      else if (opt_arg.is_cellstr ())
+      else if (opt_arg.iscellstr ())
         {
           options = "";
 
           Array<std::string> tmp = opt_arg.cellstr_value ();
 
           for (octave_idx_type i = 0; i < tmp.numel (); i++)
             options += " " + tmp(i);
         }
diff --git a/libinterp/dldfcn/convhulln.cc b/libinterp/dldfcn/convhulln.cc
--- a/libinterp/dldfcn/convhulln.cc
+++ b/libinterp/dldfcn/convhulln.cc
@@ -138,17 +138,17 @@ convex hull is calculated.
     options = " Qt Qx";
 
   if (nargin == 2)
     {
       if (args(1).is_string ())
         options = " " + args(1).string_value ();
       else if (args(1).is_empty ())
         ; // Use default options.
-      else if (args(1).is_cellstr ())
+      else if (args(1).iscellstr ())
         {
           options = "";
 
           Array<std::string> tmp = args(1).cellstr_value ();
 
           for (octave_idx_type i = 0; i < tmp.numel (); i++)
             options += " " + tmp(i);
         }
diff --git a/libinterp/octave-value/ov-base.h b/libinterp/octave-value/ov-base.h
--- a/libinterp/octave-value/ov-base.h
+++ b/libinterp/octave-value/ov-base.h
@@ -336,17 +336,17 @@ public:
   virtual MatrixType matrix_type (const MatrixType& typ) const;
 
   virtual bool is_defined (void) const { return false; }
 
   bool is_empty (void) const { return (dims ().any_zero ()); }
 
   virtual bool is_cell (void) const { return false; }
 
-  virtual bool is_cellstr (void) const { return false; }
+  virtual bool iscellstr (void) const { return false; }
 
   virtual bool is_real_scalar (void) const { return false; }
 
   virtual bool is_real_matrix (void) const { return false; }
 
   virtual bool is_complex_scalar (void) const { return false; }
 
   virtual bool is_complex_matrix (void) const { return false; }
diff --git a/libinterp/octave-value/ov-cell.cc b/libinterp/octave-value/ov-cell.cc
--- a/libinterp/octave-value/ov-cell.cc
+++ b/libinterp/octave-value/ov-cell.cc
@@ -398,24 +398,24 @@ octave_cell::subsasgn (const std::string
     default:
       panic_impossible ();
     }
 
   return retval;
 }
 
 bool
-octave_cell::is_cellstr (void) const
+octave_cell::iscellstr (void) const
 {
   bool retval;
   if (cellstr_cache.get ())
     retval = true;
   else
     {
-      retval = matrix.is_cellstr ();
+      retval = matrix.iscellstr ();
       // Allocate empty cache to mark that this is indeed a cellstr.
       if (retval)
         cellstr_cache.reset (new Array<std::string> ());
     }
 
   return retval;
 }
 
@@ -451,17 +451,17 @@ octave_cell::byte_size (void) const
   return retval;
 }
 
 octave_value
 octave_cell::sort (octave_idx_type dim, sortmode mode) const
 {
   octave_value retval;
 
-  if (! is_cellstr ())
+  if (! iscellstr ())
     error ("sort: only cell arrays of character strings may be sorted");
 
   Array<std::string> tmp = cellstr_value ();
 
   tmp = tmp.sort (dim, mode);
 
   // We already have the cache.
   retval = new octave_cell (tmp);
@@ -470,17 +470,17 @@ octave_cell::sort (octave_idx_type dim, 
 }
 
 octave_value
 octave_cell::sort (Array<octave_idx_type> &sidx, octave_idx_type dim,
                    sortmode mode) const
 {
   octave_value retval;
 
-  if (! is_cellstr ())
+  if (! iscellstr ())
     error ("sort: only cell arrays of character strings may be sorted");
 
   Array<std::string> tmp = cellstr_value ();
 
   tmp = tmp.sort (sidx, dim, mode);
 
   // We already have the cache.
   retval = new octave_cell (tmp);
@@ -488,47 +488,47 @@ octave_cell::sort (Array<octave_idx_type
   return retval;
 }
 
 sortmode
 octave_cell::is_sorted (sortmode mode) const
 {
   sortmode retval = UNSORTED;
 
-  if (! is_cellstr ())
+  if (! iscellstr ())
     error ("issorted: A is not a cell array of strings");
 
   Array<std::string> tmp = cellstr_value ();
 
   retval = tmp.is_sorted (mode);
 
   return retval;
 }
 
 Array<octave_idx_type>
 octave_cell::sort_rows_idx (sortmode mode) const
 {
   Array<octave_idx_type> retval;
 
-  if (! is_cellstr ())
+  if (! iscellstr ())
     error ("sortrows: only cell arrays of character strings may be sorted");
 
   Array<std::string> tmp = cellstr_value ();
 
   retval = tmp.sort_rows_idx (mode);
 
   return retval;
 }
 
 sortmode
 octave_cell::is_sorted_rows (sortmode mode) const
 {
   sortmode retval = UNSORTED;
 
-  if (! is_cellstr ())
+  if (! iscellstr ())
     error ("issorted: A is not a cell array of strings");
 
   Array<std::string> tmp = cellstr_value ();
 
   retval = tmp.is_sorted_rows (mode);
 
   return retval;
 }
@@ -607,17 +607,17 @@ octave_cell::string_vector_value (bool p
   return retval;
 }
 
 Array<std::string>
 octave_cell::cellstr_value (void) const
 {
   Array<std::string> retval;
 
-  if (! is_cellstr ())
+  if (! iscellstr ())
     error ("invalid conversion from cell array to array of strings");
 
   if (cellstr_cache->is_empty ())
     *cellstr_cache = matrix.cellstr_value ();
 
   return *cellstr_cache;
 
   return retval;
@@ -1270,17 +1270,17 @@ DEFUN (iscellstr, args, ,
 Return true if every element of the cell array @var{cell} is a character
 string.
 @seealso{ischar}
 @end deftypefn */)
 {
   if (args.length () != 1)
     print_usage ();
 
-  return ovl (args(0).is_cellstr ());
+  return ovl (args(0).iscellstr ());
 }
 
 DEFUN (cellstr, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {@var{cstr} =} cellstr (@var{strmat})
 Create a new cell array object from the elements of the string array
 @var{strmat}.
 
diff --git a/libinterp/octave-value/ov-cell.h b/libinterp/octave-value/ov-cell.h
--- a/libinterp/octave-value/ov-cell.h
+++ b/libinterp/octave-value/ov-cell.h
@@ -116,17 +116,17 @@ public:
   bool is_defined (void) const { return true; }
 
   bool is_constant (void) const { return true; }
 
   bool is_cell (void) const { return true; }
 
   builtin_type_t builtin_type (void) const { return btyp_cell; }
 
-  bool is_cellstr (void) const;
+  bool iscellstr (void) const;
 
   bool is_true (void) const;
 
   Cell cell_value (void) const { return matrix; }
 
   octave_value_list list_value (void) const;
 
   octave_value convert_to_str_internal (bool pad, bool, char type) const
diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -1498,17 +1498,17 @@ unbox (JNIEnv *jni_env, const octave_val
     }
   else if (val.is_string ())
     {
       std::string s = val.string_value ();
 
       jobj = jni_env->NewStringUTF (s.c_str ());
       jcls = jni_env->GetObjectClass (jobj);
     }
-  else if (val.is_cellstr ())
+  else if (val.iscellstr ())
     {
       const Array<std::string> str_arr = val.cellstr_value ();
       const octave_idx_type n = str_arr.numel ();
 
       jclass_ref scls (jni_env, jni_env->FindClass ("java/lang/String"));
       jobjectArray array = jni_env->NewObjectArray (n, scls, nullptr);
 
       for (octave_idx_type i = 0; i < n; i++)
diff --git a/libinterp/octave-value/ov-struct.cc b/libinterp/octave-value/ov-struct.cc
--- a/libinterp/octave-value/ov-struct.cc
+++ b/libinterp/octave-value/ov-struct.cc
@@ -1964,17 +1964,17 @@ A(1)
   int nargin = args.length ();
 
   if (nargin < 2 || nargin > 3)
     print_usage ();
 
   if (! args(0).is_cell ())
     error ("cell2struct: argument CELL must be of type cell");
 
-  if (! (args(1).is_cellstr () || args(1).is_char_matrix ()))
+  if (! (args(1).iscellstr () || args(1).is_char_matrix ()))
     error ("cell2struct: FIELDS must be a cell array of strings or a character matrix");
 
   int dim = 0;
 
   if (nargin == 3)
     {
       if (! args(2).is_real_scalar ())
         error ("cell2struct: DIM must be a real scalar");
diff --git a/libinterp/octave-value/ov.h b/libinterp/octave-value/ov.h
--- a/libinterp/octave-value/ov.h
+++ b/libinterp/octave-value/ov.h
@@ -526,18 +526,22 @@ public:
   { return ! is_defined (); }
 
   bool is_empty (void) const
   { return rep->is_empty (); }
 
   bool is_cell (void) const
   { return rep->is_cell (); }
 
+  bool iscellstr (void) const
+  { return rep->iscellstr (); }
+
+  OCTAVE_DEPRECATED ("use 'iscellstr' instead")
   bool is_cellstr (void) const
-  { return rep->is_cellstr (); }
+  { return iscellstr (); }
 
   bool is_real_scalar (void) const
   { return rep->is_real_scalar (); }
 
   bool is_real_matrix (void) const
   { return rep->is_real_matrix (); }
 
   bool is_complex_scalar (void) const
