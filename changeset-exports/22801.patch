# HG changeset patch
# User Rik <rik@octave.org>
# Date 1479614286 28800
#      Sat Nov 19 19:58:06 2016 -0800
# Node ID f950625033d904824fdf58066f9f08fcf3664772
# Parent  592fa741e0aaab7f06f330bdb2c290816775bc96
# Parent  5de8670d10a6dc105d0466b9fcf32777b4eabdc6
maint: Periodic merge of stable to default.

diff --git a/doc/interpreter/octave.texi b/doc/interpreter/octave.texi
--- a/doc/interpreter/octave.texi
+++ b/doc/interpreter/octave.texi
@@ -87,17 +87,17 @@ Permission is granted to copy and distri
 manual into another language, under the above conditions for
 modified versions.
 @end ifnottex
 
 @titlepage
 @title GNU Octave
 @subtitle A high-level interactive language for numerical computations
 @subtitle Edition 4 for Octave version @value{VERSION}
-@subtitle September 2016
+@subtitle November 2016
 @sp 2
 @multitable @columnfractions 0.4 0.025 0.65
 @item
 @flushright @image{octave_logo,2.1in}
 @end flushright
 @tab
 @c this is a spacer column
 @tab
diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -5559,17 +5559,17 @@ If @var{opt} is the value @qcode{"rows"}
 compute its norm.  The result is returned as a column vector.
 Similarly, if @var{opt} is @qcode{"columns"} or @qcode{"cols"} then
 compute the norms of each column and return a row vector.
 @seealso{cond, svd}
 @end deftypefn */)
 {
   int nargin = args.length ();
 
-  if (nargin < 1 && nargin > 3)
+  if (nargin < 1 || nargin > 3)
     print_usage ();
 
   octave_value x_arg = args(0);
 
   if (x_arg.ndims () != 2)
     error ("norm: only valid for 2-D objects");
 
   enum { sfmatrix, sfcols, sfrows, sffrob, sfinf } strflag = sfmatrix;
@@ -5705,16 +5705,25 @@ compute the norms of each column and ret
 %!assert (norm (q, [], "rows"), norm (q, 2, "rows"))
 %!assert (norm (q, [], "cols"), norm (q, 2, "cols"))
 
 %!test <30631>
 %! ## Test for norm returning NaN on sparse matrix
 %! A = sparse (2,2);
 %! A(2,1) = 1;
 %! assert (norm (A), 1);
+
+## Test input validation
+%!error norm ()
+%!error norm (1,2,3,4)
+%!error <unrecognized option> norm (1, "invalid")
+%!error <unrecognized option> norm (1, "rows", "invalid")
+%!error <unrecognized option> norm (1, "invalid", "rows")
+%!error <invalid combination of options> norm (1, "cols", "rows")
+%!error <invalid combination of options> norm (1, "rows", "rows")
 */
 
 static octave_value
 unary_op_defun_body (octave_value::unary_op op,
                      const octave_value_list& args)
 {
   if (args.length () != 1)
     print_usage ();
@@ -6905,17 +6914,17 @@ do_accumarray_sum (const idx_vector& idx
 DEFUN (__accumarray_sum__, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} __accumarray_sum__ (@var{idx}, @var{vals}, @var{n})
 Undocumented internal function.
 @end deftypefn */)
 {
   int nargin = args.length ();
 
-  if (nargin < 2 && nargin > 3)
+  if (nargin < 2 || nargin > 3)
     print_usage ();
 
   if (! args(0).is_numeric_type ())
     error ("__accumarray_sum__: first argument must be numeric");
 
   octave_value retval;
 
   try
@@ -6994,17 +7003,17 @@ do_accumarray_minmax (const idx_vector& 
 }
 
 static octave_value_list
 do_accumarray_minmax_fun (const octave_value_list& args,
                           bool ismin)
 {
   int nargin = args.length ();
 
-  if (nargin < 3 && nargin > 4)
+  if (nargin < 3 || nargin > 4)
     print_usage ();
 
   if (! args(0).is_numeric_type ())
     error ("accumarray: first argument must be numeric");
 
   octave_value retval;
 
   try
@@ -7128,17 +7137,17 @@ do_accumdim_sum (const idx_vector& idx, 
 DEFUN (__accumdim_sum__, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} __accumdim_sum__ (@var{idx}, @var{vals}, @var{dim}, @var{n})
 Undocumented internal function.
 @end deftypefn */)
 {
   int nargin = args.length ();
 
-  if (nargin < 2 && nargin > 4)
+  if (nargin < 2 || nargin > 4)
     print_usage ();
 
   if (! args(0).is_numeric_type ())
     error ("__accumdim_sum__: first argument must be numeric");
 
   octave_value retval;
 
   try
diff --git a/scripts/image/rgb2hsv.m b/scripts/image/rgb2hsv.m
--- a/scripts/image/rgb2hsv.m
+++ b/scripts/image/rgb2hsv.m
@@ -12,18 +12,18 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ## GNU General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn  {} {@var{hsv_map} =} rgb2hsv (@var{rgb})
-## @deftypefnx {} {@var{hsv_map} =} rgb2hsv (@var{rgb})
+## @deftypefn  {} {@var{hsv_map} =} rgb2hsv (@var{rgb_map})
+## @deftypefnx {} {@var{hsv_img} =} rgb2hsv (@var{rgb_img})
 ## Transform a colormap or image from RGB to HSV color space.
 ##
 ## A color in the RGB space consists of red, green, and blue intensities.
 ##
 ## A color in HSV space is represented by hue, saturation and value
 ## (brightness) levels in a cylindrical coordinate system.  Hue is the
 ## azimuth and describes the dominant color.  Saturation is the radial
 ## distance and gives the amount of hue mixed into the color.  Value is
