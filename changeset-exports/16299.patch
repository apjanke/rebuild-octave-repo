# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1363203603 14400
#      Wed Mar 13 15:40:03 2013 -0400
# Node ID c40a8873c2e75e65ff906c3cdf3e14c36c687a67
# Parent  faaf60aa457ced89309c353eb4c21849f575c9a7
eliminate some unused variables

* lex.ll (\], \}, \", "'"): Eliminate unused variables.
* pt-array-list.cc (tree_array_list::dup): Omit unused argument names
from function definition.

diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -326,34 +326,34 @@ ANY_INCLUDING_NL (.|{NL})
 <MATRIX_START>\] {
     curr_lexer->lexer_debug ("<MATRIX_START>\\]");
 
     curr_lexer->looking_at_object_index.pop_front ();
 
     curr_lexer->looking_for_object_index = true;
     curr_lexer->at_beginning_of_statement = false;
 
-    int tok_to_return = curr_lexer->handle_close_bracket (']');
+    curr_lexer->handle_close_bracket (']');
 
     return curr_lexer->count_token (']');
   }
 
 %{
 // FIXME -- we need to handle block comments here.
 %}
 
 <MATRIX_START>\} {
     curr_lexer->lexer_debug ("<MATRIX_START>\\}*");
 
     curr_lexer->looking_at_object_index.pop_front ();
 
     curr_lexer->looking_for_object_index = true;
     curr_lexer->at_beginning_of_statement = false;
 
-    int tok_to_return = curr_lexer->handle_close_bracket ('}');
+    curr_lexer->handle_close_bracket ('}');
 
     return curr_lexer->count_token ('}');
   }
 
 \[ {
     curr_lexer->lexer_debug ("\\[");
 
         bool unput_comma = false;
@@ -757,18 +757,16 @@ ANY_INCLUDING_NL (.|{NL})
       {
         yyless (0);
         curr_lexer->push_start_state (COMMAND_START);
       }
     else
       {
         int tok = curr_lexer->previous_token_value ();
 
-        bool transpose = false;
-
         if (curr_lexer->whitespace_is_significant ())
           {
             if (curr_lexer->space_follows_previous_token ())
               {
                 if (tok == '[' || tok == '{'
                     || curr_lexer->previous_token_is_binop ())
                   {
                     curr_lexer->current_input_column++;
@@ -825,18 +823,16 @@ ANY_INCLUDING_NL (.|{NL})
       {
         yyless (0);
         curr_lexer->push_start_state (COMMAND_START);
       }
     else
       {
         int tok = curr_lexer->previous_token_value ();
 
-        bool transpose = false;
-
         if (curr_lexer->whitespace_is_significant ())
           {
             if (curr_lexer->space_follows_previous_token ())
               {
                 if (tok == '[' || tok == '{'
                     || curr_lexer->previous_token_is_binop ())
                   {
                     curr_lexer->current_input_column++;
diff --git a/libinterp/parse-tree/pt-array-list.cc b/libinterp/parse-tree/pt-array-list.cc
--- a/libinterp/parse-tree/pt-array-list.cc
+++ b/libinterp/parse-tree/pt-array-list.cc
@@ -88,18 +88,18 @@ tree_array_list::copy_base (const tree_a
 
       append (elt ? elt->dup (scope, context) : 0);
     }
 
   copy_base (*this);
 }
 
 tree_expression *
-tree_array_list::dup (symbol_table::scope_id scope,
-                      symbol_table::context_id context) const
+tree_array_list::dup (symbol_table::scope_id,
+                      symbol_table::context_id) const
 {
   panic_impossible ();
   return 0;
 }
 
 void
 tree_array_list::accept (tree_walker&)
 {
