# HG changeset patch
# User jwe
# Date 1063129753 0
#      Tue Sep 09 17:49:13 2003 +0000
# Node ID f6a61399bc5c31c093b3fb208c843f5c667a389c
# Parent  55db663c15ced9f451f98176d4a8f66f71e21996
[project @ 2003-09-09 17:48:00 by jwe]

diff --git a/doc/interpreter/var.txi b/doc/interpreter/var.txi
--- a/doc/interpreter/var.txi
+++ b/doc/interpreter/var.txi
@@ -70,21 +70,35 @@ A variable that has been declared @dfn{g
 within a function body without having to pass it as a formal parameter.
 
 A variable may be declared global using a @code{global} declaration
 statement.  The following statements are all global declarations.
 
 @example
 @group
 global a
-global b = 2
-global c = 3, d, e = 5
+global a b
+global c = 2
+global d = 3 e f = 5
 @end group
 @end example
 
+A global variable may only be initialized once in a @code{global}
+statement.  For example, after executing the following code
+
+@example
+@group
+global gvar = 1
+global gvar = 2
+@end group
+@end example
+
+@noindent
+the value of the global variable @code{gvar} is 1, not 2.
+
 It is necessary declare a variable as global within a function body in
 order to access it.  For example,
 
 @example
 @group
 global x
 function f ()
   x = 1;
diff --git a/liboctave/ArrayN-idx.h b/liboctave/ArrayN-idx.h
--- a/liboctave/ArrayN-idx.h
+++ b/liboctave/ArrayN-idx.h
@@ -281,16 +281,56 @@ freeze (Array<idx_vector>& ra_idx, const
 
   for (int i = 0; i < n; i++)
     retval(i) = ra_idx(i).freeze (dimensions(i), "XXX FIXME XXX", resize_ok);
 
   return retval;
 }
 
 static inline bool
+vector_equivalent (const Array<int>& ra_idx)
+{
+  int n = ra_idx.length ();
+
+  bool found_first = false;
+
+  for (int i = 0; i < n; i++)
+    {
+      if (ra_idx(i) != 1)
+        {
+	  if (! found_first)
+	    found_first = true;
+	  else
+	    return false;
+	}
+    }
+
+  return true;
+}
+
+static inline bool
+equal_arrays (const Array<int> a, const Array<int> b)
+{
+  bool retval = true;
+
+  if (a.length () != b.length ())
+    retval = false;
+  else
+    {
+      for (int i = 0; i < a.length (); i++)
+	{
+	  if (a(i) != b(i))
+	    retval = false;
+	}
+    }
+
+  return retval;
+}
+
+static inline bool
 all_ok (const Array<idx_vector>& ra_idx)
 {
   bool retval = true;
 
   int n = ra_idx.length ();
 
   for (int i = 0; i < n; i++)
     {
@@ -421,17 +461,17 @@ all_ones (const Array<int> arr)
 static Array<int>
 get_elt_idx (const Array<idx_vector>& ra_idx, const Array<int>& result_idx)
 {
   int n = ra_idx.length ();
 
   Array<int> retval (n);
 
   for (int i = 0; i < n; i++)
-    retval(i) = ra_idx(result_idx(i));
+    retval(i) = ra_idx(i).elem (result_idx(i));
 
   return retval;
 }
 
 template <class T>
 ArrayN<T>
 ArrayN<T>::index (Array<idx_vector>& ra_idx, int resize_ok, const T& rfv) const
 {
diff --git a/liboctave/ArrayN-inline.h b/liboctave/ArrayN-inline.h
--- a/liboctave/ArrayN-inline.h
+++ b/liboctave/ArrayN-inline.h
@@ -27,17 +27,17 @@ index_in_bounds (const Array<int>& ra_id
   bool retval = true;
 
   int n = ra_idx.length ();
 
   if (n == dimensions.length ())
     {
       for (int i = 0; i < n; i++)
 	{
-	  if (ra_idx(i) < 0 || ra_idx(i) >= dimensions (i))
+	  if (ra_idx(i) < 0 || ra_idx(i) > dimensions (i))
 	    {
 	      retval = false;
 	      break;
 	    }
 	}
     }
   else
     retval = false;
diff --git a/liboctave/ArrayN.cc b/liboctave/ArrayN.cc
--- a/liboctave/ArrayN.cc
+++ b/liboctave/ArrayN.cc
@@ -305,16 +305,44 @@ ArrayN<T>::insert (const ArrayN<T>& a, c
   else
     (*current_liboctave_error_handler)
       ("ArrayN<T>::insert: invalid indexing operation");
 
   return *this;
 }
 
 template <class T>
+void
+ArrayN<T>::maybe_delete_dims (void)
+{
+  int ndims = dimensions.length ();
+  Array<int> new_dims (1,1);
+  bool delete_dims = true;
+
+  for (int i = ndims - 1; i >= 0; i--)
+    {
+      if (delete_dims)
+        {
+          if (dimensions(i) != 1)
+	    {
+	      delete_dims = false;
+	      new_dims = Array<int> (i + 1, dimensions(i));
+	    }
+        }
+      else
+        {
+	  new_dims(i) = dimensions(i);
+	}
+    }
+    
+  if (ndims != new_dims.length ())
+    dimensions = new_dims;
+}
+
+template <class T>
 std::ostream&
 operator << (std::ostream& os, const ArrayN<T>& a)
 {
   Array<int> a_dims = a.dimensions;
 
   int n_dims = a_dims.length ();
 
   os << n_dims << "-dimensional array";
diff --git a/liboctave/ArrayN.h b/liboctave/ArrayN.h
--- a/liboctave/ArrayN.h
+++ b/liboctave/ArrayN.h
@@ -31,16 +31,17 @@ Software Foundation, 59 Temple Place - S
 #include <iostream>
 
 #include <cassert>
 #include <climits>
 #include <cmath>
 #include <cstdlib>
 
 #include "Array.h"
+#include "dMatrix.h"
 #include "lo-error.h"
 
 class idx_vector;
 
 // N-dimensional array class.
 
 template <class T>
 class
@@ -87,16 +88,32 @@ public:
     }
 
   ArrayN (const Array<T>& a, const Array<int>& dims) : Array<T> (a)
     {
       dimensions = dims;
       set_max_indices (dimensions.length ());
     }
 
+  // New constructor which takes a Matrix as an argument.  This should
+  // be moved to a subclass of ArrayN (NDArray) once we add a double
+  // instantiation of ArrayN.
+
+  ArrayN (const Matrix& m) : Array<T> (m)
+    {
+      set_max_indices (2);
+
+      Array<int> dim (2);
+
+      dim(0) = m.dim1 ();
+      dim(1) = m.dim2 ();
+
+      dimensions = dim;
+    }
+
   ~ArrayN (void) { }
 
   ArrayN<T>& operator = (const ArrayN<T>& a)
     {
       if (this != &a && Array<T>::rep != a.rep)
 	{
 	  Array<T>::operator = (a);
 	  dimensions = a.dimensions;
@@ -180,17 +197,18 @@ public:
 
   ArrayN<T> value (void);
 
   ArrayN<T> index (idx_vector& ra_idx, int resize_ok = 0,
 		   const T& rfv = resize_fill_value (T ())) const;
 
   ArrayN<T> index (Array<idx_vector>& ra_idx, int resize_ok = 0,
 		   const T& rfv = resize_fill_value (T ())) const;
-
+  
+  void maybe_delete_dims (void);
 #endif
 };
 
 template <class LT, class RT>
 int
 assign (ArrayN<LT>& lhs, const ArrayN<RT>& rhs, const LT& rfv);
 
 template <class LT, class RT>
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,25 @@
+2003-09-09  Petter Risholm  <risholm@stud.ntnu.no>
+
+	* ArrayN-idx.h (vector_equivalent, equal_arrays): New functions.
+	(get_elt_idx): Index ra_idx correctly.
+
+	* ArrayN-inline.h (index_in_bounds): Index is also condidered in
+	bounds if it is exactly on the bound.
+
+	* ArrayN.cc (ArrayN<T>::maybe_delete_dims): New function.
+	* ArrayN.h: Provide decl.
+
+	* ArrayN.h (ArrayN<T>::ArrayN<T> (const Matrix&)): New constructor.
+
+	* idx-vector.h (idx_vector::orig_dims): New member variable.
+	(idx_vector::idx_vector_rep::orig_dimensions): New function.
+	(idx_vector::orig_dimensions): New function.
+
 2003-09-04  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* lo-specfun.cc (xlgamma): Require nonnegative argument.
 
 2003-09-04  Petter Risholm  <risholm@stud.ntnu.no>
 
 	* ArrayN-idx.h (maybe_delete_elements): Implement function.
 	(is_in, how_many_lgt, all_ones): New functions.
diff --git a/liboctave/idx-vector.h b/liboctave/idx-vector.h
--- a/liboctave/idx-vector.h
+++ b/liboctave/idx-vector.h
@@ -24,16 +24,18 @@ Software Foundation, 59 Temple Place - S
 #define octave_idx_vector_h 1
 
 #if defined (__GNUG__) && defined (USE_PRAGMA_INTERFACE_IMPLEMENTATION)
 #pragma interface
 #endif
 
 #include <iostream>
 
+#include "Array.h"
+
 class ColumnVector;
 class boolMatrix;
 class Matrix;
 class Range;
 
 class
 idx_vector
 {
@@ -102,34 +104,44 @@ private:
     int is_colon (void) const { return colon; }
     int is_colon_equiv (int n, int sort_uniq);
 
     void sort (bool uniq);
 
     int orig_rows (void) const { return orig_nr; }
     int orig_columns (void) const { return orig_nc; }
 
+    Array<int> orig_dimensions (void) const { return orig_dims; }
+
     // other stuff
 
     void shorten (int n); // Unsafe.  Avoid at all cost.
 
     int freeze (int z_len, const char *tag, bool resize_ok, bool warn_resize);
 
     // i/o
 
     std::ostream& print (std::ostream& os) const;
 
     int *data;
     int len;
     int num_zeros;
     int num_ones;
     int max_val;
     int min_val;
+
+    // XXX FIXME XXX -- with the introduction of orig_dims, these two
+    // variables are not neccessary.  orig_dims(0) and orig_dims(1)
+    // should replace them in the code.
+
     int orig_nr;
     int orig_nc;
+
+    Array<int> orig_dims;
+ 
     int count;
     int frozen_at_z_len;
     int frozen_len;
     unsigned int colon : 1;
     unsigned int one_zero : 1;
     unsigned int initialized : 1;
     unsigned int frozen : 1;
     unsigned int colon_equiv_checked : 1;
@@ -241,16 +253,18 @@ public:
   int is_colon_equiv (int n, int sort_uniq = 0) const
     { return rep->is_colon_equiv (n, sort_uniq); }
 
   void sort (bool uniq = false) { rep->sort (uniq); }
 
   int orig_rows (void) const { return rep->orig_rows (); }
   int orig_columns (void) const { return rep->orig_columns (); }
 
+  Array<int> orig_dimensions (void) const { return rep->orig_dimensions (); }
+
   int orig_empty (void) const
     {
       return (! is_colon ()
 	      && (orig_rows () == 0 || orig_columns () == 0));
     }
 
 // Unsafe.  Avoid at all cost.
   void shorten (int n) { rep->shorten (n); }
diff --git a/test/octave.test/string/dec2bin-3.m b/test/octave.test/string/dec2bin-3.m
--- a/test/octave.test/string/dec2bin-3.m
+++ b/test/octave.test/string/dec2bin-3.m
@@ -1,1 +1,2 @@
-dec2bin (1, 2)
+strcmp (dec2bin (14, 6), "001110")
+
diff --git a/test/octave.test/string/dec2bin-4.m b/test/octave.test/string/dec2bin-4.m
new file mode 100644
--- /dev/null
+++ b/test/octave.test/string/dec2bin-4.m
@@ -0,0 +1,1 @@
+dec2bin (1, 2, 3)
diff --git a/test/octave.test/string/dec2hex-3.m b/test/octave.test/string/dec2hex-3.m
--- a/test/octave.test/string/dec2hex-3.m
+++ b/test/octave.test/string/dec2hex-3.m
@@ -1,1 +1,1 @@
-dec2hex (1, 2)
+strcmp (tolower (dec2hex (2748, 5)), "00abc")
diff --git a/test/octave.test/string/dec2hex-4.m b/test/octave.test/string/dec2hex-4.m
new file mode 100644
--- /dev/null
+++ b/test/octave.test/string/dec2hex-4.m
@@ -0,0 +1,1 @@
+dec2hex (1, 2, 3)
diff --git a/test/octave.test/string/string.exp b/test/octave.test/string/string.exp
--- a/test/octave.test/string/string.exp
+++ b/test/octave.test/string/string.exp
@@ -290,30 +290,38 @@ set test dec2bin-1
 set prog_output "^ans = 1"
 do_test dec2bin-1.m
 
 set test dec2bin-2
 set prog_output "^usage:.*"
 do_test dec2bin-2.m
 
 set test dec2bin-3
+set prog_output "^ans = 1"
+do_test dec2bin-3.m
+
+set test dec2bin-4
 set prog_output "^usage:.*"
-do_test dec2bin-3.m
+do_test dec2bin-4.m
 
 set test dec2hex-1
 set prog_output "^ans = 1"
 do_test dec2hex-1.m
 
 set test dec2hex-2
 set prog_output "^usage:.*"
 do_test dec2hex-2.m
 
 set test dec2hex-3
+set prog_output "^ans = 1"
+do_test dec2hex-3.m
+
+set test dec2hex-4
 set prog_output "^usage:.*"
-do_test dec2hex-3.m
+do_test dec2hex-4.m
 
 set test hex2dec-1
 set prog_output "^ans = 1"
 do_test hex2dec-1.m
 
 set test hex2dec-2
 set prog_output "^usage:.*"
 do_test hex2dec-2.m
