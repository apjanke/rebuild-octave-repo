# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1227520847 -3600
#      Mon Nov 24 11:00:47 2008 +0100
# Node ID b6c3b16d4cfa9f47ab9cc76dba65809a74da902c
# Parent  fa9e6619fa9949a96e2cd393a53a97d4c46b37ac
Check validitity of handles to delete before deleting them to avoid issues with callbacks deleting the handles as well

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -3,16 +3,22 @@ 2008-11-21  Jarkko Kaleva  <d3roga@gmail
 	* DLD-FUNCTIONS/eig.cc (Feig): Handle generalized eigenvalues and 
 	eigenvectors.
 
 2008-11-19  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD_FUNCTIONS/det.cc: Include only DET.h. Retrieve & matrix type &
 	store it after calculation if possible.
 
+2008-11-24  David Bateman  <dbateman@free.fr>
+
+	* graphics.cc (F__go_delete__): Check validity of handles before
+	deleting them to avoid issues with callback function also deleting
+	the handles.
+	
 2008-11-17  John W. Eaton  <jwe@octave.org>
 
 	* load-path.cc (load_path::dir_info::update): Simplify previous
 	change.
 
 	* load-path.h (load_path::dir_info::abs_dir_name): New data member.
 	(load_path::dir_info::dir_info, load_path::dir_info::operator =):
 	Copy abs_dir_name.
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -4577,54 +4577,66 @@ Undocumented internal function.\n\
   if (args.length () == 1)
     {
       graphics_handle h = octave_NaN;
 
       const NDArray vals = args (0).array_value ();
 
       if (! error_state)
 	{
+	  // Check is all the handles to delete are valid first
+	  // as callbacks might delete one of the handles we
+	  // later want to delete
 	  for (octave_idx_type i = 0; i < vals.numel (); i++)
 	    {
 	      h = gh_manager::lookup (vals.elem (i));
 
-	      if (h.ok ())
-		{
-		  graphics_object obj = gh_manager::get_object (h);
-
-		  // Don't do recursive deleting, due to callbacks
-		  if (! obj.get_properties ().is_beingdeleted ())
-		    {
-		      graphics_handle parent_h = obj.get_parent ();
-
-		      graphics_object parent_obj = 
-			gh_manager::get_object (parent_h);
-
-		      // NOTE: free the handle before removing it from its
-		      //       parent's children, such that the object's 
-		      //       state is correct when the deletefcn callback
-		      //       is executed
-
-		      gh_manager::free (h);
-
-		      // A callback function might have already deleted 
-		      // the parent
-		      if (parent_obj.valid_object ())
-			parent_obj.remove_child (h);
-
-		      Vdrawnow_requested = true;
-		    }
-		}
-	      else
+	      if (! h.ok ())
 		{
 		  error ("delete: invalid graphics object (= %g)", 
 			 vals.elem (i));
 		  break;
 		}
 	    }
+
+	  if (! error_state)
+	    {
+	      for (octave_idx_type i = 0; i < vals.numel (); i++)
+		{
+		  h = gh_manager::lookup (vals.elem (i));
+
+		  if (h.ok ())
+		    {
+		      graphics_object obj = gh_manager::get_object (h);
+
+		      // Don't do recursive deleting, due to callbacks
+		      if (! obj.get_properties ().is_beingdeleted ())
+			{
+			  graphics_handle parent_h = obj.get_parent ();
+
+			  graphics_object parent_obj = 
+			    gh_manager::get_object (parent_h);
+
+			  // NOTE: free the handle before removing it from its
+			  //       parent's children, such that the object's 
+			  //       state is correct when the deletefcn callback
+			  //       is executed
+
+			  gh_manager::free (h);
+
+			  // A callback function might have already deleted 
+			  // the parent
+			  if (parent_obj.valid_object ())
+			    parent_obj.remove_child (h);
+
+			  Vdrawnow_requested = true;
+			}
+		    }
+		}
+	    }
 	}
       else
 	error ("delete: invalid graphics object");
     }
   else
     print_usage ();
 
   return retval;
