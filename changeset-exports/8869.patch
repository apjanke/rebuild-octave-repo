# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1235549438 -3600
#      Wed Feb 25 09:10:38 2009 +0100
# Node ID c3b743b1b1c6ffd8047f9ddbdc462681f5c8a7c0
# Parent  4d812facab0e6bca6aacb7a8a42d634335f4b28a
preset triangular type if possible for lu and qr outputs

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2009-02-25  Jaroslav Hajek  <highegg@gmail.com>
+
+	* DLD-FUNCTIONS/lu.cc (maybe_set_triangular): New function.
+	(Flu): Use it.
+	* DLD-FUNCTIONS/qr.cc (maybe_set_triangular): New function.
+	(Fqr): Use it.
+
 2009-02-25  John W. Eaton  <jwe@octave.org>
 
 	* input.cc (get_debug_input): Write debugging location info
 	directly to std::cerr instead of calling message.
 	* pt-eval.cc (tree_evaluator::do_breakpoint): Write debugging
 	location info directly to std::cerr, not octave_stdout.
 
 	* defaults.h.in (OCTAVE_DOC_CACHE_FILE): New macro.
diff --git a/src/DLD-FUNCTIONS/lu.cc b/src/DLD-FUNCTIONS/lu.cc
--- a/src/DLD-FUNCTIONS/lu.cc
+++ b/src/DLD-FUNCTIONS/lu.cc
@@ -35,16 +35,39 @@ along with Octave; see the file COPYING.
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
 #include "oct-obj.h"
 #include "utils.h"
 #include "ov-re-sparse.h"
 #include "ov-cx-sparse.h"
 
+template <class MT>
+static octave_value
+maybe_set_triangular (const MT& m, MatrixType::matrix_type t = MatrixType::Upper)
+{
+  typedef typename MT::element_type T;
+  octave_value retval;
+  octave_idx_type r = m.rows (), c = m.columns ();
+  if (r == c)
+    {
+      const T zero = T();
+      octave_idx_type i = 0;
+      for (;i != r && m(i,i) != zero; i++) ;
+      if (i == r)
+        retval = octave_value (m, MatrixType (t));
+      else
+        retval = m;
+    }
+  else
+    retval = m;
+
+  return retval;
+}
+
 DEFUN_DLD (lu, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {[@var{l}, @var{u}, @var{p}] =} lu (@var{a})\n\
 @deftypefnx {Loadable Function} {[@var{l}, @var{u}, @var{p}, @var{q}] =} lu (@var{s})\n\
 @deftypefnx {Loadable Function} {[@var{l}, @var{u}, @var{p}, @var{q}, @var{r}] =} lu (@var{s})\n\
 @deftypefnx {Loadable Function} {[@dots{}] =} lu (@var{s}, @var{thres})\n\
 @deftypefnx {Loadable Function} {@var{y} =} lu (@dots{})\n\
 @deftypefnx {Loadable Function} {[@dots{}] =} lu (@dots{}, 'vector')\n\
@@ -353,30 +376,30 @@ information.\n\
 		    case 1:
 		      retval(0) = fact.Y ();
 		      break;
 
 		    case 2:
 		      {
 			PermMatrix P = fact.P ();
 			FloatMatrix L = P.transpose () * fact.L ();
-			retval(1) = fact.U ();
+			retval(1) = maybe_set_triangular (fact.U (), MatrixType::Upper);
 			retval(0) = L;
 		      }
 		      break;
 
 		    case 3:
 		    default:
 		      {
 			if (vecout)
 			  retval(2) = fact.P_vec ();
 			else
 			  retval(2) = fact.P ();
-			retval(1) = fact.U ();
-			retval(0) = fact.L ();
+			retval(1) = maybe_set_triangular (fact.U (), MatrixType::Upper);
+			retval(0) = maybe_set_triangular (fact.L (), MatrixType::Lower);
 		      }
 		      break;
 		    }
 		}
 	    }
 	  else
 	    {
 	      Matrix m = arg.matrix_value ();
@@ -391,30 +414,30 @@ information.\n\
 		    case 1:
 		      retval(0) = fact.Y ();
 		      break;
 
 		    case 2:
 		      {
 			PermMatrix P = fact.P ();
 			Matrix L = P.transpose () * fact.L ();
-			retval(1) = fact.U ();
+			retval(1) = maybe_set_triangular (fact.U (), MatrixType::Upper);
 			retval(0) = L;
 		      }
 		      break;
 
 		    case 3:
 		    default:
 		      {
 			if (vecout)
 			  retval(2) = fact.P_vec ();
 			else
 			  retval(2) = fact.P ();
-			retval(1) = fact.U ();
-			retval(0) = fact.L ();
+			retval(1) = maybe_set_triangular (fact.U (), MatrixType::Upper);
+			retval(0) = maybe_set_triangular (fact.L (), MatrixType::Lower);
 		      }
 		      break;
 		    }
 		}
 	    }
 	}
       else if (arg.is_complex_type ())
 	{
@@ -432,30 +455,30 @@ information.\n\
 		    case 1:
 		      retval(0) = fact.Y ();
 		      break;
 
 		    case 2:
 		      {
 			PermMatrix P = fact.P ();
 			FloatComplexMatrix L = P.transpose () * fact.L ();
-			retval(1) = fact.U ();
+			retval(1) = maybe_set_triangular (fact.U (), MatrixType::Upper);
 			retval(0) = L;
 		      }
 		      break;
 
 		    case 3:
 		    default:
 		      {
 			if (vecout)
 			  retval(2) = fact.P_vec ();
 			else
 			  retval(2) = fact.P ();
-			retval(1) = fact.U ();
-			retval(0) = fact.L ();
+			retval(1) = maybe_set_triangular (fact.U (), MatrixType::Upper);
+			retval(0) = maybe_set_triangular (fact.L (), MatrixType::Lower);
 		      }
 		      break;
 		    }
 		}
 	    }
 	  else
 	    {
 	      ComplexMatrix m = arg.complex_matrix_value ();
@@ -470,30 +493,30 @@ information.\n\
 		    case 1:
 		      retval(0) = fact.Y ();
 		      break;
 
 		    case 2:
 		      {
 			PermMatrix P = fact.P ();
 			ComplexMatrix L = P.transpose () * fact.L ();
-			retval(1) = fact.U ();
+			retval(1) = maybe_set_triangular (fact.U (), MatrixType::Upper);
 			retval(0) = L;
 		      }
 		      break;
 
 		    case 3:
 		    default:
 		      {
 			if (vecout)
 			  retval(2) = fact.P_vec ();
 			else
 			  retval(2) = fact.P ();
-			retval(1) = fact.U ();
-			retval(0) = fact.L ();
+			retval(1) = maybe_set_triangular (fact.U (), MatrixType::Upper);
+			retval(0) = maybe_set_triangular (fact.L (), MatrixType::Lower);
 		      }
 		      break;
 		    }
 		}
 	    }
 	}
       else
 	gripe_wrong_type_arg ("lu", arg);
diff --git a/src/DLD-FUNCTIONS/qr.cc b/src/DLD-FUNCTIONS/qr.cc
--- a/src/DLD-FUNCTIONS/qr.cc
+++ b/src/DLD-FUNCTIONS/qr.cc
@@ -39,16 +39,39 @@ along with Octave; see the file COPYING.
 
 
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
 #include "oct-obj.h"
 #include "utils.h"
 
+template <class MT>
+static octave_value
+maybe_set_triangular (const MT& m, MatrixType::matrix_type t = MatrixType::Upper)
+{
+  typedef typename MT::element_type T;
+  octave_value retval;
+  octave_idx_type r = m.rows (), c = m.columns ();
+  if (r == c)
+    {
+      const T zero = T();
+      octave_idx_type i = 0;
+      for (;i != r && m(i,i) != zero; i++) ;
+      if (i == r)
+        retval = octave_value (m, MatrixType (t));
+      else
+        retval = m;
+    }
+  else
+    retval = m;
+
+  return retval;
+}
+
 // [Q, R] = qr (X):      form Q unitary and R upper triangular such
 //                        that Q * R = X
 //
 // [Q, R] = qr (X, 0):    form the economy decomposition such that if X is
 //                        m by n then only the first n columns of Q are
 //                        computed.
 //
 // [Q, R, P] = qr (X):    form QRP factorization of X where
@@ -291,29 +314,29 @@ as\n\
 			FloatQR fact (m, type);
 			retval(0) = fact.R ();
 		      }
 		      break;
 
 		    case 2:
 		      {
 			FloatQR fact (m, type);
-			retval(1) = fact.R ();
+			retval(1) = maybe_set_triangular (fact.R ());
 			retval(0) = fact.Q ();
 		      }
 		      break;
 
 		    default:
 		      {
 			FloatQRP fact (m, type);
                         if (type == QR::economy)
                           retval(2) = fact.Pvec ();
                         else
                           retval(2) = fact.P ();
-			retval(1) = fact.R ();
+			retval(1) = maybe_set_triangular (fact.R ());
 			retval(0) = fact.Q ();
 		      }
 		      break;
 		    }
 		}
 	    }
 	  else if (arg.is_complex_type ())
 	    {
@@ -329,29 +352,29 @@ as\n\
 			FloatComplexQR fact (m, type);
 			retval(0) = fact.R ();
 		      }
 		      break;
 
 		    case 2:
 		      {
 			FloatComplexQR fact (m, type);
-			retval(1) = fact.R ();
+			retval(1) = maybe_set_triangular (fact.R ());
 			retval(0) = fact.Q ();
 		      }
 		      break;
 
 		    default:
 		      {
 			FloatComplexQRP fact (m, type);
                         if (type == QR::economy)
                           retval(2) = fact.Pvec ();
                         else
                           retval(2) = fact.P ();
-			retval(1) = fact.R ();
+			retval(1) = maybe_set_triangular (fact.R ());
 			retval(0) = fact.Q ();
 		      }
 		      break;
 		    }
 		}
 	    }
 	}
       else
@@ -370,29 +393,29 @@ as\n\
 			QR fact (m, type);
 			retval(0) = fact.R ();
 		      }
 		      break;
 
 		    case 2:
 		      {
 			QR fact (m, type);
-			retval(1) = fact.R ();
+			retval(1) = maybe_set_triangular (fact.R ());
 			retval(0) = fact.Q ();
 		      }
 		      break;
 
 		    default:
 		      {
 			QRP fact (m, type);
                         if (type == QR::economy)
                           retval(2) = fact.Pvec ();
                         else
                           retval(2) = fact.P ();
-			retval(1) = fact.R ();
+			retval(1) = maybe_set_triangular (fact.R ());
 			retval(0) = fact.Q ();
 		      }
 		      break;
 		    }
 		}
 	    }
 	  else if (arg.is_complex_type ())
 	    {
@@ -408,29 +431,29 @@ as\n\
 			ComplexQR fact (m, type);
 			retval(0) = fact.R ();
 		      }
 		      break;
 
 		    case 2:
 		      {
 			ComplexQR fact (m, type);
-			retval(1) = fact.R ();
+			retval(1) = maybe_set_triangular (fact.R ());
 			retval(0) = fact.Q ();
 		      }
 		      break;
 
 		    default:
 		      {
 			ComplexQRP fact (m, type);
                         if (type == QR::economy)
                           retval(2) = fact.Pvec ();
                         else
                           retval(2) = fact.P ();
-			retval(1) = fact.R ();
+			retval(1) = maybe_set_triangular (fact.R ());
 			retval(0) = fact.Q ();
 		      }
 		      break;
 		    }
 		}
 	    }
 	  else
 	    gripe_wrong_type_arg ("qr", arg);
