# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1231449137 -3600
#      Thu Jan 08 22:12:17 2009 +0100
# Node ID 7b25349b32e6debab897aca7a1aa259d6b1f248d
# Parent  dd52e541418b6ad9d788c0710bdf12727f06f1ab
avoid redundant copying in {} assignment

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2009-01-08  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov-cell.cc (octave_cell::subsasgn): Erase duplicate lhs value 
+	prior to assignment to avoid a redundant copy.
+
 2008-12-26  Thorsten Meyer  <thorsten.meyier@gmx.de>
 
 	* mappers.cc (Ftoascii), mappers.cc (Ftolower), mappers.cc
 	(Ftoupper), DLD-FUNCTIONS/regexp.cc (Fregexp),
 	DLD-FUNCTIONS/regexp.cc	(Fregexpi), DLD-FUNCTIONS/regexp.cc
 	(Fregexprep): Add references.
 	
 2008-12-27  Jaroslav Hajek <highegg@gmail.com>
diff --git a/src/ov-cell.cc b/src/ov-cell.cc
--- a/src/ov-cell.cc
+++ b/src/ov-cell.cc
@@ -176,39 +176,40 @@ octave_cell::subsasgn (const std::string
 	      }
 	  }
 	  break;
 
 	case '{':
 	  {
 	    octave_value tmp = do_index_op (idx.front (), true);
 
-	    if (! tmp.is_defined ())
-	      tmp = octave_value::empty_conv (type.substr (1), rhs);
-
 	    if (! error_state)
 	      {
-		const Cell tcell = tmp.cell_value ();
+		if (tmp.dims ().numel () == 1)
+		  {
+		    tmp = tmp.cell_value ()(0,0);
 
-		if (! error_state && tcell.length () == 1)
-		  {
-		    tmp = tcell(0,0);
+                    // Erase the reference to avoid copying.
+                    assign (idx.front (), octave_value ());
 
 		    std::list<octave_value_list> next_idx (idx);
 
 		    next_idx.erase (next_idx.begin ());
 
+                    // This should be a no-op.
 		    tmp.make_unique ();
 
 		    if (! tmp.is_defined () || tmp.is_zero_by_zero ())
 		      tmp = octave_value::empty_conv (type.substr (1), rhs);
 
 		    if (! error_state)
 		      t_rhs = tmp.subsasgn (type.substr (1), next_idx, rhs);
 		  }
+                else
+                  error ("scalar indices required for {} in assignment.");
 	      }
 	  }
 	  break;
 
 	case '.':
 	  {
 	    std::string nm = type_name ();
 	    error ("%s cannot be indexed with %c", nm.c_str (), type[0]);
