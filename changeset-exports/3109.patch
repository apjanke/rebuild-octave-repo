# HG changeset patch
# User jwe
# Date 880015966 0
#      Thu Nov 20 08:52:46 1997 +0000
# Node ID fcb2f5063e7f96380e38dcbaa5a368820a147009
# Parent  bb7ffd516332a11fc962527167dfa8df319efaf1
[project @ 1997-11-20 08:52:42 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,19 +1,14 @@
 Wed Nov 19 01:54:11 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* aclocal.m4 (OCTAVE_CXX_NEW_FRIEND_TEMPLATE_DECL): Don't forget
 	to call AC_LANG_RESTORE.
 
-	* acconfig.h: Add undefs for NO_EXTERN_TEMPLATE_DECLS and
-	NEED_TEMPLATE_FCN_SPECS.
-
 	* configure.in (CXX_VERSION): Require 2.7.2 or later.
-	Define NO_EXTERN_TEMPLATE_DECLS and NEED_TEMPLATE_FCN_SPECS if
-	using egcs or 2.8.x or later.
 
 Wed Nov 19 01:38:58 1997  Mumit Khan  <khan@dhaka.xraylith.wisc.edu>
 
 	* aclocal.m4 (OCTAVE_CXX_NEW_FRIEND_TEMPLATE_DECL): New macro
 	check for new friend template declaration syntax (guiding
 	declarations in DWP).
 	* configure.in: Use it.
 	* config.h.in: Add undef for CXX_NEW_FRIEND_TEMPLATE_DECL.
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,12 +1,12 @@
 Wed Nov 19 02:05:40 1997  Mumit Khan <khan@dhaka.xraylith.wisc.edu>
 
 	* DLD-FUNCTIONS/filter.cc: Don't include extern template decls if
-	NO_EXTERN_TEMPLATE_DECLS is defined.
+	CXX_NEW_FRIEND_TEMPLATE_DECL is defined.
 	* ov-cx-mat.cc: Likewise.
 	* ov-re-mat.cc: Likewise.
 	* ov-str-mat.cc: Likewise.
 
 	* ov-cx-mat.h (octave_complex_matrix::decrement,
 	octave_complex_matrix):	Use explicit Complex constructor.
 
 Wed Nov 19 00:08:13 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
diff --git a/src/DLD-FUNCTIONS/filter.cc b/src/DLD-FUNCTIONS/filter.cc
--- a/src/DLD-FUNCTIONS/filter.cc
+++ b/src/DLD-FUNCTIONS/filter.cc
@@ -31,17 +31,17 @@ Software Foundation, 59 Temple Place - S
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "defun-dld.h"
 #include "error.h"
 #include "oct-obj.h"
 
-#if !defined (NO_EXTERN_TEMPLATE_DECLS)
+#if !defined (CXX_NEW_FRIEND_TEMPLATE_DECL)
 extern MArray<double>
 filter (MArray<double>&, MArray<double>&, MArray<double>&);
 
 extern MArray<Complex>
 filter (MArray<Complex>&, MArray<Complex>&, MArray<Complex>&);
 #endif
 
 template <class T>
@@ -122,17 +122,17 @@ filter (MArray<T>& b, MArray<T>& a, MArr
 	}
     }
   else
     y = b (0) * x;
 
   return y;
 }
 
-#if !defined (NO_EXTERN_TEMPLATE_DECLS)
+#if !defined (CXX_NEW_FRIEND_TEMPLATE_DECL)
 extern MArray<double>
 filter (MArray<double>&, MArray<double>&, MArray<double>&,
 	MArray<double>&);
 
 extern MArray<Complex>
 filter (MArray<Complex>&, MArray<Complex>&, MArray<Complex>&,
 	MArray<Complex>&);
 #endif
diff --git a/src/ov-cx-mat.cc b/src/ov-cx-mat.cc
--- a/src/ov-cx-mat.cc
+++ b/src/ov-cx-mat.cc
@@ -117,17 +117,17 @@ octave_complex_matrix::do_index_op (cons
     default:
       error ("invalid number of indices (%d) for complex matrix value", len);
       break;
     }
 
   return retval;
 }
 
-#if !defined (NO_EXTERN_TEMPLATE_DECLS)
+#if !defined (CXX_NEW_FRIEND_TEMPLATE_DECL)
 extern void assign (Array2<Complex>&, const Array2<Complex>&);
 #endif
 
 void
 octave_complex_matrix::assign (const octave_value_list& idx,
 			       const ComplexMatrix& rhs)
 {
   int len = idx.length ();
@@ -158,17 +158,17 @@ octave_complex_matrix::assign (const oct
 
     default:
       error ("invalid number of indices (%d) for indexed matrix assignment",
 	     len);
       break;
     }
 }
 
-#if !defined (NO_EXTERN_TEMPLATE_DECLS)
+#if !defined (CXX_NEW_FRIEND_TEMPLATE_DECL)
 extern void assign (Array2<Complex>&, const Array2<double>&);
 #endif
 
 void
 octave_complex_matrix::assign (const octave_value_list& idx,
 			       const Matrix& rhs)
 {
   int len = idx.length ();
diff --git a/src/ov-re-mat.cc b/src/ov-re-mat.cc
--- a/src/ov-re-mat.cc
+++ b/src/ov-re-mat.cc
@@ -105,17 +105,17 @@ octave_matrix::do_index_op (const octave
     default:
       error ("invalid number of indices (%d) for matrix value", len);
       break;
     }
 
   return retval;
 }
 
-#if !defined (NO_EXTERN_TEMPLATE_DECLS)
+#if !defined (CXX_NEW_FRIEND_TEMPLATE_DECL)
 extern void assign (Array2<double>&, const Array2<double>&);
 #endif
 
 void
 octave_matrix::assign (const octave_value_list& idx, const Matrix& rhs)
 {
   int len = idx.length ();
 
diff --git a/src/ov-str-mat.cc b/src/ov-str-mat.cc
--- a/src/ov-str-mat.cc
+++ b/src/ov-str-mat.cc
@@ -89,17 +89,17 @@ octave_char_matrix_str::do_index_op (con
     default:
       error ("invalid number of indices (%d) for matrix value", len);
       break;
     }
 
   return retval;
 }
 
-#if !defined (NO_EXTERN_TEMPLATE_DECLS)
+#if !defined (CXX_NEW_FRIEND_TEMPLATE_DECL)
 extern void assign (Array2<char>&, const Array2<char>&);
 #endif
 
 void
 octave_char_matrix_str::assign (const octave_value_list& idx,
 				const charMatrix& rhs)
 {
   int len = idx.length ();
