# HG changeset patch
# User Rik <rik@octave.org>
# Date 1380657064 25200
#      Tue Oct 01 12:51:04 2013 -0700
# Node ID 76a6d7de4cbcc107b74b5828b48f3bf77fff4f6d
# Parent  797545fa86d0ad69b7df78d8ca812d79ff2540b2
Fix multiple problem with listeners for contour groups.

* scripts/plot/contour.m: Add new %!demo showing use of a single contour line.

* scripts/plot/private/__contour__.m: Fix bug with lowest level of contourf
showing background through.  Use same routines for calculating levels and
levelstep in main code and in listeners.  Fix linecolor when turning "fill" on
and off.  Fix "textlist" and "textliststep" properties which were not
activating correctly.

diff --git a/scripts/plot/contour.m b/scripts/plot/contour.m
--- a/scripts/plot/contour.m
+++ b/scripts/plot/contour.m
@@ -85,35 +85,41 @@ function [c, h] = contour (varargin)
 endfunction
 
 
 %!demo
 %! clf;
 %! colormap ('default');
 %! [x, y, z] = peaks ();
 %! contour (x, y, z);
-%! title ('contour() plot of peaks() function');
 %! title ({'contour() plot (isolines of constant Z)'; 'Z = peaks()'});
 
 %!demo
 %! clf;
 %! colormap ('default');
 %! [theta, r] = meshgrid (linspace (0,2*pi,64), linspace (0,1,64));
 %! [X, Y] = pol2cart (theta, r);
 %! Z = sin (2*theta) .* (1-r);
 %! contour (X, Y, abs (Z), 10);
 %! title ({'contour() plot'; 'polar fcn: Z = sin (2*theta) * (1-r)'});
 
+%!demo
+%! clf;
+%! colormap ('default');
+%! z = peaks ();
+%! contour (z, [0 0]);
+%! title ({'contour() plot with single isoline at Z == 0'; 'Z = peaks()'});
+
 %!test
 %! hf = figure ("visible", "off");
 %! clf (hf);
 %! unwind_protect
 %!   [x, y, z] = peaks ();
 %!   [c, h] = contour (x, y, z);
-%!   levellist = (-6):6;
+%!   levellist = -6:6;
 %!   set (h, "levellist", levellist);
 %!   assert (get (h, "levellist"), levellist)
 %!   assert (get (h, "levellistmode"), "manual")
 %! unwind_protect_cleanup
 %!   close (hf);
 %! end_unwind_protect
 
 %!test
@@ -121,14 +127,14 @@ endfunction
 %! clf (hf);
 %! unwind_protect
 %!   [x, y, z] = peaks ();
 %!   [c, h] = contour (x, y, z);
 %!   levelstep = 3;
 %!   set (h, "levelstep", levelstep);
 %!   assert (get (h, "levelstep"), levelstep)
 %!   assert (get (h, "levelstepmode"), "manual")
-%!   assert (get (h, "levellist"), (-6):levelstep:6)
+%!   assert (get (h, "levellist"), -6:levelstep:6)
 %!   assert (get (h, "levellistmode"), "auto")
 %! unwind_protect_cleanup
 %!   close (hf);
 %! end_unwind_protect
 
diff --git a/scripts/plot/private/__contour__.m b/scripts/plot/private/__contour__.m
--- a/scripts/plot/private/__contour__.m
+++ b/scripts/plot/private/__contour__.m
@@ -85,19 +85,20 @@ function [c, hg] = __contour__ (varargin
     vn = 10;
     vnauto = true;
   endif
 
   if (isscalar (vn))
     ## FIXME: The levels should be determined similarly to {x,y,z}ticks
     ##        so that they aren't set at extremely odd values.
     lvl = linspace (min (z1(!isinf (z1))), max (z1(!isinf (z1))), vn + 2);
-    lvl = lvl(2:end-1);  # Strip off max, min outliers
+    ## Strip off max outlier, min must stay for contourf hole algorithm.
+    lvl = lvl(1:end-1);
   else
-    lvl = unique (sort (vn));
+    lvl = sort (vn);
   endif
 
   if (strcmpi (filled, "on"))
     if (isvector (x1) || isvector (y1))
       [x1, y1] = meshgrid (x1, y1);
     endif
     [nr, nc] = size (z1);
     x0 = prepad (x1, nc+1, 2 * x1(1, 1) - x1(1, 2), 2);
@@ -159,30 +160,30 @@ function [c, hg] = __contour__ (varargin
   addproperty ("textstep", hg, "double", lvlstep);
   addproperty ("textstepmode", hg, "radio", "{auto}|manual", "auto");
   addproperty ("showtext", hg, "radio", "on|{off}", "off");
 
   addproperty ("linecolor", hg, "color", linespec.color, "{auto}|none");
   addproperty ("linestyle", hg, "linelinestyle", linespec.linestyle);
   addproperty ("linewidth", hg, "linelinewidth", 0.5);
 
-  addlistener (hg, "fill", @update_data);
+  addlistener (hg, "fill", {@update_data, "fill"});
 
   addlistener (hg, "zlevelmode", @update_zlevel);
   addlistener (hg, "zlevel", @update_zlevel);
 
   addlistener (hg, "levellist", {@update_data, "levellist"});
   addlistener (hg, "levelstep", {@update_data, "levelstep"});
   addlistener (hg, "levellistmode", @update_data);
   addlistener (hg, "levelstepmode", @update_data);
 
   addlistener (hg, "labelspacing", @update_text);
-  addlistener (hg, "textlist", @update_text);
+  addlistener (hg, "textlist", {@update_text, "textlist"});
   addlistener (hg, "textlistmode", @update_text);
-  addlistener (hg, "textstep", @update_text);
+  addlistener (hg, "textstep", {@update_text, "textstep"});
   addlistener (hg, "textstepmode", @update_text);
   addlistener (hg, "showtext", @update_text);
 
   addlistener (hg, "linecolor", @update_line);
   addlistener (hg, "linestyle", @update_line);
   addlistener (hg, "linewidth", @update_line);
 
   ## Set axis before adding patches so that each new patch does not trigger
@@ -296,17 +297,17 @@ function add_patch_children (hg)
     h = [];
     for n = len:-1:1
       idx = svec(n);
       ctmp = c(:, cont_idx(idx):cont_idx(idx) + cont_len(idx) - 1);
       if (all (ctmp(:,1) == ctmp(:,end)))
         ## patch() doesn't need/want closed contour.  It will do it itself.
         ctmp(:,end) = [];
       endif
-      if (isnan (cont_lev (idx)))
+      if (isnan (cont_lev(idx)))
         fc = get (ca, "color");
         if (strcmp (fc, "none"))
           fc = get (ancestor (ca, "figure"), "color");
         endif
       else
         fc = "flat";
       endif
       h = [h; __go_patch__(ca, "xdata", ctmp(1, :)(:), "ydata", ctmp(2, :)(:),
@@ -409,16 +410,23 @@ function update_data (h, ~, prop = "")
 
     delete (get (h, "children"));
 
     switch (prop)
       case "levellist"
         set (h, "levellistmode", "manual")
       case "levelstep"
         set (h, "levelstepmode", "manual")
+      case "fill"
+        ## Switching from filled ('k' linespec) to unfilled, reset linecolor
+        if (strcmp (get (h, "fill"), "off"))
+          set (h, "linecolor", "auto");
+        else
+          set (h, "linecolor", "black");
+        endif
     endswitch
 
     if (strcmp (get (h, "levellistmode"), "manual")
         && ! strcmp (prop, "levelstep"))
       lvl = get (h, "levellist");
     elseif (strcmp (get (h, "levelstepmode"), "manual"))
       z = get (h, "zdata");
       lvs = get (h, "levelstep");
@@ -427,17 +435,22 @@ function update_data (h, ~, prop = "")
       if (lvl(1) >= lvl(2))
         lvl = median (z(:));
       else
         lvl = lvl(1) : lvs : lvl(2);
       endif
       set (h, "levellist", lvl);
       set (h, "levellistmode", "auto");
     else
-      lvl = 10;
+      z = get (h, "zdata");
+      ## FIXME: The levels should be determined similarly to {x,y,z}ticks
+      ##        so that they aren't set at extremely odd values.
+      lvl = linspace (min (z(!isinf (z))), max (z(!isinf (z))), 10 + 2);
+      ## Strip off max outlier, min must stay for contourf hole algorithm.
+      lvl = lvl(1:end-1);
     endif
 
     if (strcmp (get (h, "fill"), "on"))
       X = get (h, "xdata");
       Y = get (h, "ydata");
       Z = get (h, "zdata");
       if (isvector (X) || isvector (Y))
         [X, Y] = meshgrid (X, Y);
@@ -459,36 +472,42 @@ function update_data (h, ~, prop = "")
     set (h, "contourmatrix", c);
 
     if (strcmp (get (h, "levellistmode"), "manual"))
       ## Do nothing
     elseif (strcmp (get (h, "levelstepmode"), "manual"))
       set (h, "levellist", lev);
     else
       set (h, "levellist", lev);
-      z = get (h, "zdata");
-      lvlstep = (max (z(:)) - min (z(:))) / 10;
+      lvlstep = sum (diff (lvl)) / (length (lvl) - 1);
       set (h, "levelstep", lvlstep);
     endif
 
     add_patch_children (h);
     update_text (h);
     recursive = false;
   endif
 
 endfunction
 
-function update_text (h, ~)
+function update_text (h, ~, prop = "")
   persistent recursive = false;
 
   if (! recursive)
     recursive = true;
 
     delete (findobj (h, "type", "text"));
 
+    switch (prop)
+      case "textlist"
+        set (h, "textlistmode", "manual")
+      case "textstep"
+        set (h, "textstepmode", "manual")
+    endswitch
+
     if (strcmp (get (h, "textlistmode"), "manual"))
       lvl = get (h, "textlist");
     elseif (strcmp (get (h, "textstepmode"), "manual"))
       lev = get (h, "levellist");
 
       lvl_eps = get_lvl_eps (lev);
 
       stp = get (h, "textstep");
