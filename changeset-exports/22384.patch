# HG changeset patch
# User Kai T. Ohlhus <k.ohlhus@gmail.com>
# Date 1472137536 -7200
#      Thu Aug 25 17:05:36 2016 +0200
# Node ID ac45255ccd2cfa22817a5ddf71239afba836bf67
# Parent  8d747185ae6bca66b26e1d38ad8a485899d8a9d8
minor improvements for publish.

* scripts/general/publish.m: support calls from relative and absolute paths.
More Matlab compatiblity regarding header and section formatting.

* scripts/general/private/__publish_html_output__.m: Make more of MathJax,
removed useless statement.

* scripts/general/private/__publish_latex_output__.m: More escaping of LaTeX
special chars to be more compatible to Matlab.

diff --git a/scripts/general/private/__publish_html_output__.m b/scripts/general/private/__publish_html_output__.m
--- a/scripts/general/private/__publish_html_output__.m
+++ b/scripts/general/private/__publish_html_output__.m
@@ -23,17 +23,18 @@ function outstr = __publish_html_output_
   ## * "R" ()
   ##
   eval (["outstr = handle_", varargin{1}, " (varargin{2:end});"]);
 endfunction
 
 function outstr = handle_header (title_str, intro_str, toc_cstr)
   mathjax_str = ["<script type=\"text/x-mathjax-config\">\n", ...
     "MathJax.Hub.Config({\n", ...
-    "  tex2jax: {inlineMath: [['$','$'], ['\\\\(','\\\\)']]}\n", ...
+    "  tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']] },\n", ...
+    "  TeX: { equationNumbers: { autoNumber: 'all' } }\n", ...
     "});\n", ...
     "</script>\n", ...
     "<script type=\"text/javascript\" async ", ...
     "src=\"https://cdn.mathjax.org/mathjax/latest/MathJax.js?", ...
     "config=TeX-MML-AM_CHTML\"></script>\n"];
   stylesheet_str = ["<style>\n", ...
     "body > * {\n", ...
     "  max-width: 42em;\n", ...
@@ -265,17 +266,16 @@ function outstr = syntax_highlight (str)
         ## String content
         else
           outstr = [outstr, str(i)];
           i++;
         endif
       endwhile
     else
       outstr = [outstr, str(i)];
-      iskeyword ("if");
       i++;
     endif
   endwhile
   kwords = iskeyword ();
   for i = 1:length(kwords)
     outstr = regexprep (outstr, ...
       ['(?!<span[^>]*?>)(\s|^)(', kwords{i},')(\s|$)(?![^<]*?<\/span>)'], ...
       ["$1<span class=\"keyword\">$2</span>$3"]);
diff --git a/scripts/general/private/__publish_latex_output__.m b/scripts/general/private/__publish_latex_output__.m
--- a/scripts/general/private/__publish_latex_output__.m
+++ b/scripts/general/private/__publish_latex_output__.m
@@ -29,16 +29,17 @@ function outstr = handle_header (title_s
   publish_comment = ["\n\n", ...
     "% This document was generated by the publish-function\n", ...
     "% from GNU Octave ", version(), "\n\n"];
 
   latex_preamble = ["\n\n", ...
     "\\documentclass[10pt]{article}\n", ...
     "\\usepackage{listings}\n", ...
     "\\usepackage{mathtools}\n", ...
+    "\\usepackage{amssymb}\n", ...
     "\\usepackage{graphicx}\n", ...
     "\\usepackage{hyperref}\n", ...
     "\\usepackage{xcolor}\n", ...
     "\\usepackage{titlesec}\n", ...
     "\\usepackage[utf8]{inputenc}\n", ...
     "\\usepackage[T1]{fontenc}\n", ...
     "\\usepackage{lmodern}\n"];
 
@@ -46,24 +47,23 @@ function outstr = handle_header (title_s
     "\\lstset{\n", ...
     "language=Octave,\n", ...
     "numbers=none,\n", ...
     "frame=single,\n", ...
     "tabsize=2,\n", ...
     "showstringspaces=false,\n", ...
     "breaklines=true}\n"];
 
-  ## Escape "_" in title_str, as many file names contain it
   latex_head = ["\n\n", ...
     "\\titleformat*{\\section}{\\Huge\\bfseries}\n", ...
     "\\titleformat*{\\subsection}{\\large\\bfseries}\n", ...
     "\\renewcommand{\\contentsname}{\\Large\\bfseries Contents}\n", ...
     "\\setlength{\\parindent}{0pt}\n\n",...
     "\\begin{document}\n\n", ...
-    "{\\Huge\\section*{", escape_chars(title_str),"}}\n\n", ...
+    "{\\Huge\\section*{", escape_latex(title_str),"}}\n\n", ...
     "\\tableofcontents\n", ...
     "\\vspace*{4em}\n\n"];
 
   outstr = [publish_comment, latex_preamble, listings_option, latex_head];
 endfunction
 
 function outstr = handle_footer (m_source_str)
   outstr = ["\n\n\\end{document}\n"];
@@ -76,41 +76,41 @@ endfunction
 function outstr = handle_code_output (str)
   outstr = ["\\begin{lstlisting}", ...
     "[language={},xleftmargin=5pt,frame=none]\n", ...
     str, "\n\\end{lstlisting}\n"];
 endfunction
 
 function outstr = handle_section (str)
   outstr = ["\n\n\\phantomsection\n", ...
-    "\\addcontentsline{toc}{section}{", str, "}\n", ...
-    "\\subsection*{", str, "}\n\n"];
+    "\\addcontentsline{toc}{section}{", escape_latex(str), "}\n", ...
+    "\\subsection*{", escape_latex(str), "}\n\n"];
 endfunction
 
 function outstr = handle_preformatted_code (str)
   outstr = ["\\begin{lstlisting}\n", str, "\n\\end{lstlisting}\n"];
 endfunction
 
 function outstr = handle_preformatted_text (str)
   outstr = ["\\begin{lstlisting}[language={}]\n", ...
     str, "\n\\end{lstlisting}\n"];
 endfunction
 
 function outstr = handle_bulleted_list (cstr)
   outstr = "\n\\begin{itemize}\n";
   for i = 1:length(cstr)
-    outstr = [outstr, "\\item ", cstr{i}, "\n"];
+    outstr = [outstr, "\\item ", escape_latex(cstr{i}), "\n"];
   endfor
   outstr = [outstr, "\\end{itemize}\n"];
 endfunction
 
 function outstr = handle_numbered_list (cstr)
   outstr = "\n\\begin{enumerate}\n";
   for i = 1:length(cstr)
-    outstr = [outstr, "\\item ", cstr{i}, "\n"];
+    outstr = [outstr, "\\item ", escape_latex(cstr{i}), "\n"];
   endfor
   outstr = [outstr, "\\end{enumerate}\n"];
 endfunction
 
 function outstr = handle_graphic (str)
   outstr = ["\\begin{figure}[!ht]\n", ...
     "\\includegraphics[width=\\textwidth]{", str, "}\n", ...
     "\\end{figure}\n"];
@@ -124,35 +124,43 @@ function outstr = handle_latex (str)
   outstr = str;
 endfunction
 
 function outstr = handle_link (url_str, str)
   outstr = ["\\href{", url_str,"}{", str, "}"];
 endfunction
 
 function outstr = handle_text (str)
-  outstr = ["\n\n", str, "\n\n"];
+  outstr = ["\n\n", escape_latex(str), "\n\n"];
 endfunction
 
 function outstr = handle_bold (str)
   outstr = ["\\textbf{", str, "}"];
 endfunction
 
 function outstr = handle_italic (str)
   outstr = ["\\textit{", str, "}"];
 endfunction
 
 function outstr = handle_monospaced (str)
   outstr = ["\\texttt{", str, "}"];
 endfunction
 
 function outstr = handle_TM ()
-  outstr = "\\texttrademark";
+  outstr = "\\texttrademark ";
 endfunction
 
 function outstr = handle_R ()
-  outstr = "\\textregistered";
+  outstr = "\\textregistered ";
 endfunction
 
-function str = escape_chars (str)
-  ## Escape "_"
-  str = regexprep (str, '([^\\]|^)(_)', "$1\\_");
+function str = escape_latex (str)
+  ## Escape "&", "%", "#", "_", "~", "^", "<", ">"
+  ## TODO: "\", "{", "}"
+  str = regexprep (str, '(?<!\\)(&)', "\\&");
+  str = regexprep (str, '(?<!\\)(%)', "\\%");
+  str = regexprep (str, '(?<!\\)(#)', "\\#");
+  str = regexprep (str, '(?<!\\)(_)', "\\_");
+  str = regexprep (str, '(?<!\\)(~)', "\\ensuremath{\\tilde{\;}}");
+  str = regexprep (str, '(?<!\\)(\^)', "\\^{}");
+  str = regexprep (str, '(?<!\\)(<)', "\\ensuremath{<}");
+  str = regexprep (str, '(?<!\\)(>)', "\\ensuremath{>}");
 endfunction
diff --git a/scripts/general/publish.m b/scripts/general/publish.m
--- a/scripts/general/publish.m
+++ b/scripts/general/publish.m
@@ -179,20 +179,27 @@
 function output_file = publish (file, varargin)
   narginchk (1, Inf);
   nargoutchk (0, 1);
 
   if (exist (file, "file") != 2)
     error ("publish: FILE does not exist.");
   endif
 
+  ## Check file to be in Octave's load path
+  [file_path, file_name, file_ext] = fileparts (file);
+  if (isempty (file_path))
+    file_path = pwd;
+  endif
+  if (isempty (which ([file_name, file_ext])))
+    error (["publish: ", file, " is not in the load path."]);
+  endif
+
   ## Check file extension and for an Octave script
-  [~, file_name, file_ext] = fileparts (file);
   file_info = __which__ (file_name);
-
   if ((! strcmp (file_ext, ".m")) || (! strcmp (file_info.type, "script")))
     error ("publish: Only Octave script files can be published.");
   endif
 
   ## Check file to be parsable
   __parse_file__ (file);
 
   ## Get structure with necessary options
@@ -231,17 +238,17 @@ function output_file = publish (file, va
     if (any (strcmp (options.format, {"doc", "ppt", "xml"})))
       error ("publish: Output format currently not supported");
     endif
   endif
 
   if (! isfield (options, "outputDir"))
     ## Matlab R2016a doc says default is "", but specifies to create a sub
     ## directory named "html" in the current working directory.
-    options.outputDir = "html";
+    options.outputDir = [file_path, filesep(), "html"];
   elseif (! ischar (options.outputDir))
     error ("publish: OUTPUTDIR must be a string");
   endif
 
   if (! isfield (options, "stylesheet"))
     options.stylesheet = "";
   elseif (! ischar (options.stylesheet))
     error ("publish: STYLESHEET must be a string");
@@ -714,19 +721,19 @@ function ofile = create_output (doc_stru
   endswitch
 
   ## Use title, or if not given the m-file name
   title_str = doc_struct.title;
   if (isempty (title_str))
     [~,title_str] = fileparts (doc_struct.m_source_file_name);
   endif
 
-  content = formatter ("header", title_str, ...
+  content = formatter ("header", format_text(title_str, formatter), ...
     format_output (doc_struct.intro, formatter, options), ...
-    get_toc (doc_struct.body));
+    get_toc (doc_struct.body, formatter));
   content = [content, format_output(doc_struct.body, formatter, options)];
   content = [content, formatter("footer", strjoin (doc_struct.m_source, "\n"))];
 
   ## Write file
   [~,ofile] = fileparts (doc_struct.m_source_file_name);
   ofile_name = [ofile, ofile_ext];
   ofile = [options.outputDir, filesep(), ofile_name];
   fid = fopen (ofile, "w");
@@ -741,25 +748,25 @@ function ofile = create_output (doc_stru
         system (["cd ", options.outputDir," && pdflatex ", ofile_name]);
       endfor
     endif
   endif
 endfunction
 
 
 
-function toc_cstr = get_toc (cstr)
+function toc_cstr = get_toc (cstr, formatter)
   ## GET_TOC extracts the table of contents from a cellstring (e.g.
   ##   doc_struct.body) with each section headline as a cell in a returned
   ##   cellstring.
   ##
   toc_cstr = cell ();
   for i = 1:length(cstr)
     if (strcmp (cstr{i}.type, "section"))
-      toc_cstr{end + 1} = cstr{i}.content;
+      toc_cstr{end + 1} = format_text (cstr{i}.content, formatter);
     endif
   endfor
 endfunction
 
 
 
 function str = format_output (cstr, formatter, options)
   ## FORMAT_OUTPUT steps through all blocks (doc_struct.intro or
@@ -775,17 +782,17 @@ function str = format_output (cstr, form
     switch (cstr{i}.type)
       case "code"
         if (options.showCode)
           str = [str, formatter(cstr{i}.type, cstr{i}.content)];
         endif
         if (options.evalCode)
           str = [str, formatter("code_output", cstr{i}.output)];
         endif
-      case "text"
+      case {"text", "section"}
         str = [str, formatter(cstr{i}.type, ...
           format_text (cstr{i}.content, formatter))];
       case {"bulleted_list", "numbered_list"}
         items = cellfun (@(str) format_text(str, formatter), ...
           cstr{i}.content, "UniformOutput", false);
         str = [str, formatter(cstr{i}.type, items)];
       otherwise
         str = [str, formatter(cstr{i}.type, cstr{i}.content)];
