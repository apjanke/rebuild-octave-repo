# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1520197260 -3600
#      Sun Mar 04 22:01:00 2018 +0100
# Node ID ae6679369a80fc73efe06c64bd4ff89b744232f4
# Parent  fd3edb183ee202be6796ff7d05501e805919b37b
Rely on QOffscreenSurface functionality rather than its presence (bug #53278)

* acinclude.m4: Define HAVE_QT_OFFSCREEN if QOffscreenSurface is functional

* getframe.m: rely on HAVE_QT_OFFSCREEN rather than HAVE_QOFFSCREENSURFACE

* __opengl_print__.m: Ditto

* GLCanvas.h/cc: Ditto

diff --git a/libgui/graphics/GLCanvas.cc b/libgui/graphics/GLCanvas.cc
--- a/libgui/graphics/GLCanvas.cc
+++ b/libgui/graphics/GLCanvas.cc
@@ -278,17 +278,17 @@ namespace QtHandles
 
   bool
   GLCanvas::begin_rendering (void)
   {
     bool retval = true;
     
     if (! isValid ())
       {
-#  if defined (HAVE_QOFFSCREENSURFACE)
+#  if defined (HAVE_QT_OFFSCREEN)
         static bool os_ctx_ok = true;
         if (os_ctx_ok && ! m_os_context.isValid ())
           {
             // Try to initialize offscreen context
             m_os_surface.create ();
             if (! m_os_context.create ())
               {
                 os_ctx_ok = false;
diff --git a/libgui/graphics/GLCanvas.h b/libgui/graphics/GLCanvas.h
--- a/libgui/graphics/GLCanvas.h
+++ b/libgui/graphics/GLCanvas.h
@@ -23,17 +23,17 @@ along with Octave; see the file COPYING.
 #if ! defined (octave_GLCanvas_h)
 #define octave_GLCanvas_h 1
 
 #if defined (HAVE_QOPENGLWIDGET)
 #  include <QOpenGLWidget>
 #  define OCTAVE_QT_OPENGL_WIDGET QOpenGLWidget
 #  include <QOpenGLFramebufferObject>
 #  define OCTAVE_QT_OPENGL_FBO QOpenGLFramebufferObject
-#  if defined (HAVE_QOFFSCREENSURFACE)
+#  if defined (HAVE_QT_OFFSCREEN)
 #    include <QOpenGLContext>
 #    include <QOffscreenSurface>
 #  endif  
 #elif defined (HAVE_QGLWIDGET)
 #  include <QGLWidget>
 #  define OCTAVE_QT_OPENGL_WIDGET QGLWidget
 #  include <QGLFramebufferObject>
 #  define OCTAVE_QT_OPENGL_FBO QGLFramebufferObject
@@ -75,17 +75,17 @@ namespace QtHandles
     void keyPressEvent (QKeyEvent *event);
     void keyReleaseEvent (QKeyEvent *event);
     
   private:
     
     bool begin_rendering (void);
     void end_rendering (void);
 
-# if defined (HAVE_QOFFSCREENSURFACE)
+# if defined (HAVE_QT_OFFSCREEN)
     QOpenGLContext m_os_context;    
     QOffscreenSurface m_os_surface;
 # endif
   };
 
 }
 
 #endif
diff --git a/m4/acinclude.m4 b/m4/acinclude.m4
--- a/m4/acinclude.m4
+++ b/m4/acinclude.m4
@@ -2011,18 +2011,21 @@ AC_DEFUN([OCTAVE_CHECK_QT_VERSION], [AC_
     OCTAVE_CHECK_MEMBER_QFONT_MONOSPACE
     OCTAVE_HAVE_QGUIAPPLICATION
 
     if test -n "$OPENGL_LIBS"; then
       OCTAVE_CHECK_QT_OPENGL_OK([build_qt_graphics=yes],
         [warn_qt_opengl="Qt does not work with the OpenGL libs (GL and GLU); disabling OpenGL graphics with Qt GUI"])
 
       if test $build_qt_graphics = yes; then
+        AC_DEFINE(HAVE_QT_GRAPHICS, 1, [Define to 1 if Qt works with OpenGL libs (GL and GLU)])
         OCTAVE_CHECK_QT_OPENGL_OFFSCREEN_OK([have_qt_opengl_offscreen=yes])
-        AC_DEFINE(HAVE_QT_GRAPHICS, 1, [Define to 1 if Qt works with OpenGL libs (GL and GLU)])
+        if test $have_qt_opengl_offscreen = yes; then
+          AC_DEFINE(HAVE_QT_OFFSCREEN, 1, [Define to 1 if Qt handles offscreen OpenGL rendering])
+        fi
       fi
     fi
 
     OCTAVE_CHECK_QSCINTILLA([$qt_version])
 
   fi
   AC_SUBST(MOCFLAGS)
   AC_SUBST(UICFLAGS)
diff --git a/scripts/image/getframe.m b/scripts/image/getframe.m
--- a/scripts/image/getframe.m
+++ b/scripts/image/getframe.m
@@ -93,17 +93,17 @@ function frame = getframe (h = [], rect 
       error ("getframe: RECT must define a region inside the figure");
     endif
     pos = rect;
   endif
 
   if (strcmp (get (hf, "visible"), "on")
       || (strcmp (get (hf, "__graphics_toolkit__"), "qt")
           && (strcmp (get (hf, "__gl_window__"), "on")
-              || __have_feature__ ("QOFFSCREENSURFACE"))))
+              || __have_feature__ ("QT_OFFSCREEN"))))
     cdata = __get_frame__ (hf);
   else
     ## Use OpenGL offscreen rendering with OSMesa for non-visible figures
     try
       cdata = __osmesa_print__ (hf);
     catch
       error ("getframe: couldn't render invisible figure. %s", lasterr ());
     end_try_catch
@@ -157,26 +157,26 @@ endfunction
 %! set (hax1, "units", "normalized");
 %! rect = [pos(1:2) pos(3:4)/2];
 %!
 %! frame = getframe (hax1, rect);
 %! hax2 = subplot (2,1,2);
 %! image (frame.cdata);
 %! title ("Lower left hand corner");
 
-%!testif HAVE_QOFFSCREENSURFACE
+%!testif HAVE_QT_OFFSCREEN
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   pos = get (hf, "position");
 %!   assert (size (getframe (hf).cdata)(1:2), pos(4:-1:3));
 %! unwind_protect_cleanup
 %!   close (hf);
 %! end_unwind_protect
 
-%!testif HAVE_QOFFSCREENSURFACE
+%!testif HAVE_QT_OFFSCREEN
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   hax = axes ("visible", "off", "position", [0 0 1 1]);
 %!   verts = [0 0; .5 0; 1 0; ...
 %!            0 .5; .5 .5; 1 .5; ...
 %!            0 1; .5 1; 1 1];
 %!   faces = [1 2 5 4; 2 3 6 5; 4 5 8 7; 5 6 9 8];
 %!   fvc = [1 0 0; 0 1 0; 0 0 1; 1 0 1];
diff --git a/scripts/plot/util/private/__opengl_print__.m b/scripts/plot/util/private/__opengl_print__.m
--- a/scripts/plot/util/private/__opengl_print__.m
+++ b/scripts/plot/util/private/__opengl_print__.m
@@ -148,17 +148,17 @@ function opts = __opengl_print__ (opts)
   for n = 1:numel (pipeline)
     if (opts.debug)
       fprintf ("opengl-pipeline: '%s'\n", pipeline{n});
     endif
 
     if (strcmp (get (opts.figure, "visible"), "on")
         || (strcmp (get (opts.figure, "__graphics_toolkit__"), "qt")
             && (strcmp (get (opts.figure, "__gl_window__"), "on")
-                || __have_feature__ ("QOFFSCREENSURFACE"))))
+                || __have_feature__ ("QT_OFFSCREEN"))))
       ## Use toolkits "print_figure" method
       drawnow (gl2ps_device{n}, ['|' pipeline{n}]);
     else
       ## Use OpenGL offscreen rendering with OSMesa
       __osmesa_print__ (opts.figure, ['|' pipeline{n}], gl2ps_device{n});
     endif
   endfor
 
