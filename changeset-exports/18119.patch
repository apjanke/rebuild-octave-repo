# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1386456713 18000
#      Sat Dec 07 17:51:53 2013 -0500
# Node ID ec9b35e60f9505d733666d79d3fd59eb118e2aca
# Parent  ca84d3c9dc24dd527112580ac5a67468eaeb3df0
style fixes in graphics.in.h and graphics.cc

* graphics.in.h, graphics.cc: Pass std::string as const reference.
Pass double by value, not as const or const reference.
Check str.empty () instead of str == "".  Minor formatting changes.

diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -1007,52 +1007,57 @@ radio_values::radio_values (const std::s
 
 std::string
 radio_values::values_as_string (void) const
 {
   std::string retval;
   for (std::set<caseless_str>::const_iterator it = possible_vals.begin ();
        it != possible_vals.end (); it++)
     {
-      if (retval == "")
+      if (retval.empty ())
         {
           if (*it == default_value ())
             retval = "{" + *it + "}";
           else
             retval = *it;
         }
       else
         {
           if (*it == default_value ())
             retval += " | {" + *it + "}";
           else
             retval += " | " + *it;
         }
     }
-  if (retval != "")
+
+  if (! retval.empty ())
     retval = "[ " + retval + " ]";
+
   return retval;
 }
 
 Cell
 radio_values::values_as_cell (void) const
 {
   octave_idx_type i = 0;
   Cell retval (nelem (), 1);
   for (std::set<caseless_str>::const_iterator it = possible_vals.begin ();
        it != possible_vals.end (); it++)
     retval(i++) = std::string (*it);
   return retval;
 }
 
 bool
-color_values::str2rgb (std::string str)
-{
+color_values::str2rgb (const std::string& str_arg)
+{
+  bool retval = true;
+
   double tmp_rgb[3] = {0, 0, 0};
-  bool retval = true;
+
+  std::string str = str_arg;
   unsigned int len = str.length ();
 
   std::transform (str.begin (), str.end (), str.begin (), tolower);
 
   if (str.compare (0, len, "blue", 0, len) == 0)
     tmp_rgb[2] = 1;
   else if (str.compare (0, len, "black", 0, len) == 0
            || str.compare (0, len, "k", 0, len) == 0)
@@ -2971,45 +2976,45 @@ base_graphics_object::values_as_string (
               if (p.ok () && ! p.is_hidden ())
                 {
                   retval += "\n\t" + std::string (pa->first) + ":  ";
                   if (p.is_radio ())
                     retval += p.values_as_string ();
                 }
             }
         }
-      if (retval != "")
+
+      if (! retval.empty ())
         retval += "\n";
     }
   else
     error ("base_graphics_object::values_as_string: invalid graphics object");
 
   return retval;
 }
 
 std::string
-base_graphics_object::value_as_string (std::string prop)
+base_graphics_object::value_as_string (const std::string& prop)
 {
   std::string retval;
 
   if (valid_object ())
     {
       if (prop != "children")
         {
           property p = get_properties ().get_property (prop);
 
           if (p.ok () && ! p.is_hidden ())
             {
               if (p.is_radio ())
-                {
-                  retval += p.values_as_string ();
-                }
-            }
-        }
-      if (retval != "")
+                retval += p.values_as_string ();
+            }
+        }
+
+      if (! retval.empty ())
         retval += "\n";
     }
   else
     error ("base_graphics_object::value_as_string: invalid graphics object");
 
   return retval;
 }
 
@@ -6913,24 +6918,24 @@ axes::update_axis_limits (const std::str
     default:
       break;
     }
 
   xproperties.update_transform ();
 }
 
 inline
-double force_in_range (const double x, const double lower, const double upper)
+double force_in_range (double x, double lower, double upper)
 {
   if (x < lower)
-    { return lower; }
+    return lower;
   else if (x > upper)
-    { return upper; }
+    return upper;
   else
-    { return x; }
+    return x;
 }
 
 static Matrix
 do_zoom (double val, double factor, const Matrix& lims, bool is_logscale)
 {
   Matrix new_lims = lims;
 
   double lo = lims(0);
@@ -8182,19 +8187,19 @@ private:
 
   void* function_data;
 
   // function_event objects must be created with at least a function.
   function_event (void);
 
   // No copying!
 
-  function_event (const function_event &);
-
-  function_event & operator = (const function_event &);
+  function_event (const function_event&);
+
+  function_event & operator = (const function_event&);
 };
 
 class
 set_event : public base_graphics_event
 {
 public:
   set_event (const graphics_handle& h, const std::string& name,
              const octave_value& value, bool do_notify_toolkit = true)
@@ -8386,17 +8391,17 @@ void
 gh_manager::do_post_event (const graphics_event& e)
 {
   event_queue.push_back (e);
 
   command_editor::add_event_hook (gh_manager::process_events);
 }
 
 void
-gh_manager::do_post_callback (const graphics_handle& h, const std::string name,
+gh_manager::do_post_callback (const graphics_handle& h, const std::string& name,
                               const octave_value& data)
 {
   gh_manager::auto_lock guard;
 
   graphics_object go = get_object (h);
 
   if (go.valid_object ())
     {
@@ -8436,17 +8441,17 @@ void
 gh_manager::do_post_function (graphics_event::event_fcn fcn, void* fcn_data)
 {
   gh_manager::auto_lock guard;
 
   do_post_event (graphics_event::create_function_event (fcn, fcn_data));
 }
 
 void
-gh_manager::do_post_set (const graphics_handle& h, const std::string name,
+gh_manager::do_post_set (const graphics_handle& h, const std::string& name,
                          const octave_value& value, bool notify_toolkit)
 {
   gh_manager::auto_lock guard;
 
   do_post_event (graphics_event::create_set_event (h, name, value,
                                                    notify_toolkit));
 }
 
@@ -8809,17 +8814,17 @@ the dimensions of @var{pv}.\n\
     }
   else
     print_usage ();
 
   return retval;
 }
 
 static std::string
-get_graphics_object_type (const double val)
+get_graphics_object_type (double val)
 {
   std::string retval;
 
   graphics_object obj = gh_manager::get_object (val);
 
   if (obj)
     retval = obj.type ();
   else
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -291,17 +291,17 @@ public:
   bool ok (void) const { return parent.ok (); }
 
   std::string get_name (void) const { return name; }
 
   void set_name (const std::string& s) { name = s; }
 
   graphics_handle get_parent (void) const { return parent; }
 
-  void set_parent (const graphics_handle &h) { parent = h; }
+  void set_parent (const graphics_handle& h) { parent = h; }
 
   bool is_hidden (void) const { return hidden; }
 
   void set_hidden (bool flag) { hidden = flag; }
 
   virtual bool is_radio (void) const { return false; }
 
   int get_id (void) const { return id; }
@@ -1023,17 +1023,17 @@ public:
   {
     xrgb(0) = r;
     xrgb(1) = g;
     xrgb(2) = b;
 
     validate ();
   }
 
-  color_values (std::string str)
+  color_values (const std::string& str)
     : xrgb (1, 3)
   {
     if (! str2rgb (str))
       error ("invalid color specification: %s", str.c_str ());
   }
 
   color_values (const color_values& c)
     : xrgb (c.xrgb)
@@ -1071,17 +1071,17 @@ public:
             break;
           }
       }
   }
 
 private:
   Matrix xrgb;
 
-  OCTINTERP_API bool str2rgb (std::string str);
+  OCTINTERP_API bool str2rgb (const std::string& str);
 };
 
 class color_property : public base_property
 {
 public:
   color_property (const color_values& c, const radio_values& v)
     : base_property ("", graphics_handle ()),
       current_type (color_t), color_val (c), radio_val (v),
@@ -1626,17 +1626,17 @@ class children_property : public base_pr
 public:
   children_property (void)
     : base_property ("", graphics_handle ()), children_list ()
   {
     do_init_children (Matrix ());
   }
 
   children_property (const std::string& nm, const graphics_handle& h,
-                     const Matrix &val)
+                     const Matrix& val)
     : base_property (nm, h), children_list ()
   {
     do_init_children (val);
   }
 
   children_property (const children_property& p)
     : base_property (p), children_list ()
   {
@@ -1646,22 +1646,22 @@ public:
   children_property& operator = (const octave_value& val)
   {
     set (val);
     return *this;
   }
 
   base_property* clone (void) const { return new children_property (*this); }
 
-  bool remove_child (const double &val)
+  bool remove_child (double val)
   {
     return do_remove_child (val);
   }
 
-  void adopt (const double &val)
+  void adopt (double val)
   {
     do_adopt_child (val);
   }
 
   Matrix get_children (void) const
   {
     return do_get_children (false);
   }
@@ -1754,24 +1754,24 @@ protected:
         for (octave_idx_type i = 0; i < tmp.numel (); i++)
           children_list.push_back (tmp.xelem (i));
       }
 
     return is_ok;
   }
 
 private:
-  void do_init_children (const Matrix &val)
+  void do_init_children (const Matrix& val)
   {
     children_list.clear ();
     for (octave_idx_type i = 0; i < val.numel (); i++)
       children_list.push_front (val.xelem (i));
   }
 
-  void do_init_children (const std::list<double> &val)
+  void do_init_children (const std::list<double>& val)
   {
     children_list.clear ();
     for (const_children_list_iterator p = val.begin (); p != val.end (); p++)
       children_list.push_front (*p);
   }
 
   Matrix do_get_children (bool return_hidden) const;
 
@@ -1795,17 +1795,17 @@ private:
           {
             children_list.erase (p);
             return true;
           }
       }
     return false;
   }
 
-  void do_adopt_child (const double &val)
+  void do_adopt_child (double val)
   {
     children_list.push_front (val);
   }
 
   void do_delete_children (bool clear);
 };
 
 
@@ -2595,17 +2595,17 @@ protected:
     // additional (Octave-specific) properties
     bool_property __modified__ s , "on"
     graphics_handle __myhandle__ fhrs , mh
   END_PROPERTIES
 
 protected:
   struct cmp_caseless_str
   {
-    bool operator () (const caseless_str &a, const caseless_str &b) const
+    bool operator () (const caseless_str& a, const caseless_str& b) const
     {
       std::string a1 = a;
       std::transform (a1.begin (), a1.end (), a1.begin (), tolower);
       std::string b1 = b;
       std::transform (b1.begin (), b1.end (), b1.begin (), tolower);
 
       return a1 < b1;
     }
@@ -2701,17 +2701,17 @@ public:
   virtual octave_value get_factory_defaults (void) const
   {
     error ("base_graphics_object::get_factory_defaults: invalid graphics object");
     return octave_value ();
   }
 
   virtual std::string values_as_string (void);
 
-  virtual std::string value_as_string (std::string prop);
+  virtual std::string value_as_string (const std::string& prop);
 
   virtual octave_scalar_map values_as_struct (void);
 
   virtual graphics_handle get_parent (void) const
   {
     if (valid_object ())
       return get_properties ().get_parent ();
     else
@@ -2974,17 +2974,17 @@ public:
 
   octave_value get_factory_defaults (void) const
   {
     return rep->get_factory_defaults ();
   }
 
   std::string values_as_string (void) { return rep->values_as_string (); }
 
-  std::string value_as_string (std::string prop) 
+  std::string value_as_string (const std::string& prop) 
   { 
     return rep->value_as_string (prop); 
   }
 
   octave_map values_as_struct (void) { return rep->values_as_struct (); }
 
   graphics_handle get_parent (void) const { return rep->get_parent (); }
 
@@ -5391,21 +5391,21 @@ public:
 
   bool valid_object (void) const { return true; }
 
 };
 
 // ---------------------------------------------------------------------
 
 octave_value
-get_property_from_handle (double handle, const std::string &property,
-                          const std::string &func);
+get_property_from_handle (double handle, const std::string& property,
+                          const std::string& func);
 bool
-set_property_in_handle (double handle, const std::string &property,
-                        const octave_value &arg, const std::string &func);
+set_property_in_handle (double handle, const std::string& property,
+                        const octave_value& arg, const std::string& func);
 
 // ---------------------------------------------------------------------
 
 class graphics_event;
 
 class
 base_graphics_event
 {
@@ -5866,22 +5866,22 @@ private:
 
   void do_unlock (void) { graphics_lock.unlock (); }
 
   void do_execute_listener (const graphics_handle& h, const octave_value& l);
 
   void do_execute_callback (const graphics_handle& h, const octave_value& cb,
                             const octave_value& data);
 
-  void do_post_callback (const graphics_handle& h, const std::string name,
+  void do_post_callback (const graphics_handle& h, const std::string& name,
                          const octave_value& data);
 
   void do_post_function (graphics_event::event_fcn fcn, void* fcn_data);
 
-  void do_post_set (const graphics_handle& h, const std::string name,
+  void do_post_set (const graphics_handle& h, const std::string& name,
                     const octave_value& value, bool notify_toolkit = true);
 
   int do_process_events (bool force = false);
 
   void do_close_all_figures (void);
 
   static void restore_gcbo (void)
   {
