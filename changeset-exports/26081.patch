# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1542313797 -3600
#      Thu Nov 15 21:29:57 2018 +0100
# Node ID 32d4ee071348b6d424eb25afba0bb4184adf842e
# Parent  13d11afc8122e1a9c8fb6844807a1c1c01a12c01
Disallow recursion in Fdrawnow when using gnuplot ASCII charts (bug #55029).

* graphics.cc (Fdrawnow): Restore behavior prior to cset ae9d6a491c06 when
  there is no display.  Don't run tests of "busyaction" and "interruptible"
  properties when there is no display.

diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -11423,17 +11423,17 @@ gh_manager::do_process_events (bool forc
 /*
 ## Test interruptible/busyaction properties
 %!function cb (h)
 %! setappdata (gcbf (), "cb_exec", [getappdata(gcbf (), "cb_exec") h]);
 %! drawnow ();
 %! setappdata (gcbf (), "cb_exec", [getappdata(gcbf (), "cb_exec") h]);
 %!endfunction
 %!
-%!test
+%!testif HAVE_OPENGL, HAVE_FLTK; have_window_system
 %! hf = figure ("visible", "off", "resizefcn", @cb);
 %! unwind_protect
 %!   ## Default
 %!   hui1 = uicontrol ("parent", hf, "interruptible", "on", "callback", @cb);
 %!   hui2 = uicontrol ("parent", hf, "busyaction", "queue", "callback", @cb);
 %!   hui3 = uicontrol ("parent", hf, "busyaction", "queue", "callback", @cb);
 %!   __go_post_callback__ (hui1, "callback");
 %!   __go_post_callback__ (hui2, "callback");
@@ -12697,26 +12697,36 @@ The event queue is flushed and any callb
 With the optional argument @qcode{"expose"}, only graphic objects are
 updated and no other events or callbacks are processed.
 
 The third calling form of @code{drawnow} is for debugging and is
 undocumented.
 @seealso{refresh}
 @end deftypefn */)
 {
+  // Disallow recursion when using gnuplot ASCII charts, i.e., with
+  // --no-window-system option.
+
+  static bool do_recursion = octave::display_info::display_available ();
+  static bool drawnow_executing = false;
+
   if (args.length () > 3)
     print_usage ();
 
   octave::unwind_protect frame;
 
   frame.protect_var (Vdrawnow_requested, false);
+  frame.protect_var (drawnow_executing);
 
   // Redraw unless we are in the middle of a deletion.
-  if (! delete_executing)
-    {
+
+  if (! delete_executing && (do_recursion || ! drawnow_executing))
+    {
+      drawnow_executing = true;
+
       gh_manager::auto_lock guard;
 
       if (args.length () <= 1)
         {
           // First process events so that the redraw happens when all
           // objects are in their definite state.
           bool do_events = true;
 
