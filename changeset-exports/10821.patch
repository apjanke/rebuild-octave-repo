# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1280204736 25200
#      Mon Jul 26 21:25:36 2010 -0700
# Node ID 693e22af08aed45e6e10860c12731fc503c91c6e
# Parent  c44c786f87ba964972eb04f0671244ce9489d981
Grammarcheck documentation of m-files

Add newlines between @item fields for readability.

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,57 @@
+2010-07-26  Rik <octave@nomad.inbox5.com>
+	* deprecated/complement.m, deprecated/intwarning.m, general/arrayfun.m,
+	general/circshift.m, general/colon.m, general/common_size.m,
+	general/del2.m, general/flipdim.m, general/fliplr.m, general/flipud.m,
+	general/idivide.m, general/interp1.m, general/interp2.m,
+	general/interp3.m, general/interpn.m, general/loadobj.m,
+	general/quadgk.m, general/rat.m, general/saveobj.m, general/shiftdim.m,
+	geometry/delaunayn.m, image/image_viewer.m, image/imfinfo.m,
+	io/csvread.m, io/csvwrite.m, io/strread.m, linear-algebra/condest.m,
+	linear-algebra/housh.m, linear-algebra/onenormest.m,
+	linear-algebra/qzhess.m, miscellaneous/bincoeff.m,
+	miscellaneous/compare_versions.m, miscellaneous/computer.m,
+	miscellaneous/edit.m, miscellaneous/fileattrib.m,
+	miscellaneous/getfield.m, miscellaneous/license.m, miscellaneous/ls.m,
+	miscellaneous/parseparams.m, miscellaneous/swapbytes.m,
+	miscellaneous/ver.m, miscellaneous/warning_ids.m,
+	optimization/fminbnd.m, optimization/fminunc.m, optimization/fsolve.m,
+	optimization/fzero.m, optimization/glpk.m, optimization/lsqnonneg.m,
+	optimization/pqpnonneg.m, optimization/qp.m, optimization/sqp.m,
+	path/pathdef.m, pkg/pkg.m, plot/__marching_cube__.m, plot/axis.m,
+	plot/colorbar.m, plot/contourc.m, plot/contourf.m, plot/cylinder.m,
+	plot/ezplot.m, plot/isocolors.m, plot/isonormals.m, plot/legend.m,
+	plot/print.m, plot/refreshdata.m, plot/slice.m, plot/subplot.m,
+	plot/surfl.m, polynomial/compan.m, polynomial/mpoles.m,
+	polynomial/poly.m, polynomial/polyaffine.m, polynomial/polyfit.m,
+	polynomial/polygcd.m, polynomial/polyout.m, polynomial/residue.m,
+	polynomial/roots.m, polynomial/unmkpp.m, set/union.m, signal/filter2.m,
+	signal/stft.m, sparse/spdiags.m, specfun/bessel.m, specfun/beta.m,
+	specfun/betaln.m, specfun/nchoosek.m, specfun/nthroot.m,
+	specfun/perms.m, special-matrix/hadamard.m, special-matrix/hankel.m,
+	special-matrix/hilb.m, special-matrix/invhilb.m,
+	special-matrix/toeplitz.m, special-matrix/vander.m,
+	statistics/base/cloglog.m, statistics/base/cor.m,
+	statistics/base/corrcoef.m, statistics/base/kendall.m,
+	statistics/base/kurtosis.m, statistics/base/logit.m,
+	statistics/base/mean.m, statistics/base/median.m,
+	statistics/base/quantile.m, statistics/base/skewness.m,
+	statistics/base/std.m, statistics/base/var.m,
+	statistics/distributions/kolmogorov_smirnov_cdf.m,
+	statistics/distributions/wblcdf.m, statistics/tests/cor_test.m,
+	statistics/tests/hotelling_test_2.m, strings/bin2dec.m,
+	strings/cstrcat.m, strings/dec2bin.m, strings/dec2hex.m,
+	strings/findstr.m, strings/hex2dec.m, strings/index.m,
+	strings/isstrprop.m, strings/regexptranslate.m, strings/rindex.m,
+	strings/strcat.m, strings/substr.m, testfun/demo.m, time/asctime.m,
+	time/clock.m, time/ctime.m, time/date.m, time/datenum.m,
+	time/is_leap_year.m: Grammarcheck documentation of m-files.
+	Add newlines between @items for readability.
+
 2010-07-26  Ben Abbott <bpabbott@mac.com>
 
 	* general/interp1.m: When absent set X equal to the inices of Y.
 	* general/interpn.m: Convert interpolation vectors of non-equal
 	length to nd-arrays.
 
 2010-07-26  Soren Hauberg <hauberg@gmail.com>
 
diff --git a/scripts/deprecated/complement.m b/scripts/deprecated/complement.m
--- a/scripts/deprecated/complement.m
+++ b/scripts/deprecated/complement.m
@@ -15,17 +15,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} complement (@var{x}, @var{y})
 ## Return the elements of set @var{y} that are not in set @var{x}.  For
-## example,
+## example:
 ##
 ## @example
 ## @group
 ## complement ([ 1, 2, 3 ], [ 2, 3, 5 ])
 ##      @result{} 5
 ## @end group
 ## @end example
 ## @seealso{union, intersect, unique}
diff --git a/scripts/deprecated/intwarning.m b/scripts/deprecated/intwarning.m
--- a/scripts/deprecated/intwarning.m
+++ b/scripts/deprecated/intwarning.m
@@ -45,17 +45,17 @@
 ## Turn integer conversion and math warnings on (or off).  If there is
 ## no output argument, then nothing is printed.  Otherwise the original
 ## state of the state of the integer conversion and math warnings is
 ## returned in a structure array.
 ## @end table
 ##
 ## The original state of the integer warnings can be restored by passing
 ## the structure array returned by @code{intwarning} to a later call to
-## @code{intwarning}.  For example
+## @code{intwarning}.  For example:
 ##
 ## @example
 ## @group
 ## s = intwarning ("off");
 ## @dots{}
 ## intwarning (s);
 ## @end group
 ## @end example
diff --git a/scripts/general/arrayfun.m b/scripts/general/arrayfun.m
--- a/scripts/general/arrayfun.m
+++ b/scripts/general/arrayfun.m
@@ -35,47 +35,47 @@
 ## array, a structure array or a cell array.  By a call of the function
 ## @command{arrayfun} all elements of @var{a} are passed on to the named
 ## function @var{func} individually.
 ## 
 ## The named function can also take more than two input arguments, with
 ## the input arguments given as third input argument @var{b}, fourth
 ## input argument @var{c}, @dots{}  If given more than one array input
 ## argument then all input arguments must have the same sizes, for
-## example
+## example:
 ##
 ## @example
 ## @group
 ## arrayfun (@@atan2, [1, 0], [0, 1])
 ## @result{} ans = [1.5708   0.0000]
 ## @end group
 ## @end example
 ##
 ## If the parameter @var{val} after a further string input argument
 ## "UniformOutput" is set @code{true} (the default), then the named
 ## function @var{func} must return a single element which then will be
 ## concatenated into the return value and is of type matrix.  Otherwise,
 ## if that parameter is set to @code{false}, then the outputs are
-## concatenated in a cell array.  For example
+## concatenated in a cell array.  For example:
 ##
 ## @example
 ## @group
 ## arrayfun (@@(x,y) x:y, "abc", "def", "UniformOutput", false)
 ## @result{} ans =
 ## @{
 ##   [1,1] = abcd
 ##   [1,2] = bcde
 ##   [1,3] = cdef
 ## @}
 ## @end group
 ## @end example
 ##
 ## If more than one output arguments are given then the named function
 ## must return the number of return values that also are expected, for
-## example
+## example:
 ##
 ## @example
 ## @group
 ## [A, B, C] = arrayfun (@@find, [10; 0], "UniformOutput", false)
 ## @result{}
 ## A =
 ## @{
 ##   [1,1] =  1
@@ -106,17 +106,17 @@
 ##
 ## where there is an additional input argument to @var{errfunc}
 ## relative to @var{func}, given by @var{s}.  This is a structure with
 ## the elements "identifier", "message" and "index", giving
 ## respectively the error identifier, the error message and the index of
 ## the array elements that caused the error.  The size of the output
 ## argument of @var{errfunc} must have the same size as the output
 ## argument of @var{func}, otherwise a real error is thrown.  For
-## example
+## example:
 ##
 ## @example
 ## @group
 ## function y = ferr (s, x), y = "MyString"; endfunction
 ## arrayfun (@@str2num, [1234], \
 ##           "UniformOutput", false, "ErrorHandler", @@ferr)
 ## @result{} ans =
 ## @{
diff --git a/scripts/general/circshift.m b/scripts/general/circshift.m
--- a/scripts/general/circshift.m
+++ b/scripts/general/circshift.m
@@ -18,17 +18,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{y} =} circshift (@var{x}, @var{n})
 ## Circularly shifts the values of the array @var{x}.  @var{n} must be
 ## a vector of integers no longer than the number of dimensions in 
 ## @var{x}.  The values of @var{n} can be either positive or negative,
 ## which determines the direction in which the values or @var{x} are
 ## shifted.  If an element of @var{n} is zero, then the corresponding
-## dimension of @var{x} will not be shifted.  For example
+## dimension of @var{x} will not be shifted.  For example:
 ##
 ## @example
 ## @group
 ## x = [1, 2, 3; 4, 5, 6; 7, 8, 9];
 ## circshift (x, 1)
 ## @result{}  7, 8, 9
 ##     1, 2, 3
 ##     4, 5, 6
diff --git a/scripts/general/colon.m b/scripts/general/colon.m
--- a/scripts/general/colon.m
+++ b/scripts/general/colon.m
@@ -15,17 +15,17 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{r} =} colon (@var{a}, @var{b})
 ## @deftypefnx {Function File} {@var{r} =} colon (@var{a}, @var{b}, @var{c})
 ## Method of a class to construct a range with the @code{:} operator.  For
-## example.
+## example:
 ##
 ## @example
 ## @group
 ## a = myclass (@dots{})
 ## b = myclass (@dots{})
 ## c = a : b
 ## @end group
 ## @end example
diff --git a/scripts/general/common_size.m b/scripts/general/common_size.m
--- a/scripts/general/common_size.m
+++ b/scripts/general/common_size.m
@@ -20,17 +20,17 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{err}, @var{y1}, @dots{}] =} common_size (@var{x1}, @dots{})
 ## Determine if all input arguments are either scalar or of common
 ## size.  If so, @var{err} is zero, and @var{yi} is a matrix of the
 ## common size with all entries equal to @var{xi} if this is a scalar or
 ## @var{xi} otherwise.  If the inputs cannot be brought to a common size,
-## @var{err} is 1, and @var{yi} is @var{xi}.  For example,
+## @var{err} is 1, and @var{yi} is @var{xi}.  For example:
 ##
 ## @example
 ## @group
 ## [errorcode, a, b] = common_size ([1 2; 3 4], 5)
 ##      @result{} errorcode = 0
 ##      @result{} a = [ 1, 2; 3, 4 ]
 ##      @result{} b = [ 5, 5; 5, 5 ]
 ## @end group
diff --git a/scripts/general/del2.m b/scripts/general/del2.m
--- a/scripts/general/del2.m
+++ b/scripts/general/del2.m
@@ -25,33 +25,32 @@
 ## Calculate the discrete Laplace
 ## @tex
 ## operator $( \nabla^2 )$.
 ## @end tex
 ## @ifnottex
 ## operator.
 ## @end ifnottex
 ## For a 2-dimensional matrix @var{m} this is defined as
-##
 ## @tex
 ## $$d = {1 \over 4} \left( {d^2 \over dx^2} M(x,y) + {d^2 \over dy^2} M(x,y) \right)$$
 ## @end tex
 ## @ifnottex
+##
 ## @example
 ## @group
 ##       1    / d^2            d^2         \
 ## D  = --- * | ---  M(x,y) +  ---  M(x,y) | 
 ##       4    \ dx^2           dy^2        /
 ## @end group
 ## @end example
+##
 ## @end ifnottex
-##
 ## For N-dimensional arrays the sum in parentheses is expanded to include second
-## derivatives 
-## over the additional higher dimensions.
+## derivatives over the additional higher dimensions.
 ##
 ## The spacing between evaluation points may be defined by @var{h}, which is a
 ## scalar defining the equidistant spacing in all dimensions.  Alternatively, 
 ## the spacing in each dimension may be defined separately by @var{dx},
 ## @var{dy}, etc.  A scalar spacing argument defines equidistant spacing, 
 ## whereas a vector argument can be used to specify variable spacing.  The
 ## length of the spacing vectors must match the respective dimension of
 ## @var{m}.  The default spacing value is 1.
diff --git a/scripts/general/flipdim.m b/scripts/general/flipdim.m
--- a/scripts/general/flipdim.m
+++ b/scripts/general/flipdim.m
@@ -17,17 +17,17 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} flipdim (@var{x})
 ## @deftypefnx {Function File} {} flipdim (@var{x}, @var{dim})
 ## Return a copy of @var{x} flipped about the dimension @var{dim}.
 ## @var{dim} defaults to the first non-singleton dimension.
-## For example,
+## For example:
 ##
 ## @example
 ## @group
 ## flipdim ([1, 2; 3, 4], 2)
 ##      @result{}  2  1
 ##          4  3
 ## @end group
 ## @end example
diff --git a/scripts/general/fliplr.m b/scripts/general/fliplr.m
--- a/scripts/general/fliplr.m
+++ b/scripts/general/fliplr.m
@@ -15,17 +15,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} fliplr (@var{x})
 ## Return a copy of @var{x} with the order of the columns reversed.  For
-## example,
+## example:
 ##
 ## @example
 ## @group
 ## fliplr ([1, 2; 3, 4])
 ##      @result{}  2  1
 ##          4  3
 ## @end group
 ## @end example
diff --git a/scripts/general/flipud.m b/scripts/general/flipud.m
--- a/scripts/general/flipud.m
+++ b/scripts/general/flipud.m
@@ -15,17 +15,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} flipud (@var{x})
 ## Return a copy of @var{x} with the order of the rows reversed.  For
-## example,
+## example:
 ##
 ## @example
 ## @group
 ## flipud ([1, 2; 3, 4])
 ##      @result{}  3  4
 ##          1  2
 ## @end group
 ## @end example
diff --git a/scripts/general/idivide.m b/scripts/general/idivide.m
--- a/scripts/general/idivide.m
+++ b/scripts/general/idivide.m
@@ -26,22 +26,25 @@
 ## division to be performed with different treatment for the fractional
 ## part of the division as determined by the @var{op} flag.  @var{op} is
 ## a string with one of the values: 
 ##
 ## @table @asis
 ## @item "fix"
 ## Calculate @code{@var{a} ./ @var{b}} with the fractional part rounded
 ## towards zero.
+##
 ## @item "round"
 ## Calculate @code{@var{a} ./ @var{b}} with the fractional part rounded
 ## towards the nearest integer.
+##
 ## @item "floor"
 ## Calculate @code{@var{a} ./ @var{b}} with the fractional part rounded
 ## towards negative infinity.
+##
 ## @item "ceil"
 ## Calculate @code{@var{a} ./ @var{b}} with the fractional part rounded
 ## towards positive infinity.
 ## @end table
 ## 
 ## @noindent
 ## If @var{op} is not given it defaults to @code{"fix"}.
 ## An example demonstrating these rounding rules is
diff --git a/scripts/general/interp1.m b/scripts/general/interp1.m
--- a/scripts/general/interp1.m
+++ b/scripts/general/interp1.m
@@ -30,22 +30,26 @@
 ## indices of @var{y}. If @var{y} is an array, treat the columns
 ## of @var{y} separately.
 ##
 ## Method is one of:
 ##
 ## @table @asis
 ## @item 'nearest'
 ## Return the nearest neighbor.
+##
 ## @item 'linear'
 ## Linear interpolation from nearest neighbors
+##
 ## @item 'pchip'
 ## Piece-wise cubic hermite interpolating polynomial
+##
 ## @item 'cubic'
 ## Cubic interpolation from four nearest neighbors
+##
 ## @item 'spline'
 ## Cubic spline interpolation--smooth first and second derivatives
 ## throughout the curve
 ## @end table
 ##
 ## Appending '*' to the start of the above method forces @code{interp1}
 ## to assume that @var{x} is uniformly spaced, and only @code{@var{x}
 ## (1)} and @code{@var{x} (2)} are referenced.  This is usually faster,
diff --git a/scripts/general/interp2.m b/scripts/general/interp2.m
--- a/scripts/general/interp2.m
+++ b/scripts/general/interp2.m
@@ -49,22 +49,26 @@
 ## @end table
 ##
 ## The variable @var{method} defines the method to use for the
 ## interpolation.  It can take one of the following values 
 ##
 ## @table @asis
 ## @item 'nearest'
 ## Return the nearest neighbor.
+##
 ## @item 'linear'
 ## Linear interpolation from nearest neighbors.
+##
 ## @item 'pchip'
 ## Piece-wise cubic Hermite interpolating polynomial.
+##
 ## @item 'cubic'
 ## Cubic interpolation from four nearest neighbors.
+##
 ## @item 'spline'
 ## Cubic spline interpolation--smooth first and second derivatives
 ## throughout the curve.
 ## @end table
 ##
 ## If a scalar value @var{extrapval} is defined as the final value, then
 ## values outside the mesh as set to this value.  Note that in this case 
 ## @var{method} must be defined as well.  If @var{extrapval} is not
diff --git a/scripts/general/interp3.m b/scripts/general/interp3.m
--- a/scripts/general/interp3.m
+++ b/scripts/general/interp3.m
@@ -39,20 +39,23 @@
 ## points.  This process is performed @var{m} times.  If only @var{v} is 
 ## specified, then @var{m} is assumed to be @code{1}.
 ##
 ## Method is one of:
 ##
 ## @table @asis
 ## @item 'nearest'
 ## Return the nearest neighbor.
+##
 ## @item 'linear'
 ## Linear interpolation from nearest neighbors.
+##
 ## @item 'cubic'
 ## Cubic interpolation from four nearest neighbors (not implemented yet).
+##
 ## @item 'spline'
 ## Cubic spline interpolation--smooth first and second derivatives
 ## throughout the curve.
 ## @end table
 ##
 ## The default method is 'linear'.
 ##
 ## If @var{extrap} is the string 'extrap', then extrapolate values beyond
diff --git a/scripts/general/interpn.m b/scripts/general/interpn.m
--- a/scripts/general/interpn.m
+++ b/scripts/general/interpn.m
@@ -39,20 +39,23 @@
 ## points.  This process is performed @var{m} times.  If only @var{v} is 
 ## specified, then @var{m} is assumed to be @code{1}.
 ##
 ## Method is one of:
 ##
 ## @table @asis
 ## @item 'nearest'
 ## Return the nearest neighbor.
+##
 ## @item 'linear'
 ## Linear interpolation from nearest neighbors.
+##
 ## @item 'cubic'
 ## Cubic interpolation from four nearest neighbors (not implemented yet).
+##
 ## @item 'spline'
 ## Cubic spline interpolation--smooth first and second derivatives
 ## throughout the curve.
 ## @end table
 ##
 ## The default method is 'linear'.
 ##
 ## If @var{extrapval} is the scalar value, use it to replace the values
diff --git a/scripts/general/loadobj.m b/scripts/general/loadobj.m
--- a/scripts/general/loadobj.m
+++ b/scripts/general/loadobj.m
@@ -17,17 +17,17 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{b} =} loadobj (@var{a})
 ## Method of a class to manipulate an object after loading it from a file. 
 ## The function @code{loadobj} is called when the object @var{a} is loaded 
 ## using the @code{load} function.  An example of the use of @code{saveobj}
 ## might be to add fields to an object that don't make sense to be saved.
-## For example
+## For example:
 ##
 ## @example
 ## @group
 ## function b = loadobj (a)
 ##   b = a;
 ##   b.addmissingfield = addfield (b);
 ## endfunction
 ## @end group
diff --git a/scripts/general/quadgk.m b/scripts/general/quadgk.m
--- a/scripts/general/quadgk.m
+++ b/scripts/general/quadgk.m
@@ -30,17 +30,17 @@
 ## vector values of @var{x} and return a vector of the same length
 ## representing the function evaluations at the given values of @var{x}.
 ## The function @var{f} can be defined in terms of a function handle,
 ## inline function or string.
 ##
 ## The bounds of the quadrature @code{[@var{a}, @var{b}]} can be finite
 ## or infinite and contain weak end singularities.  Variable
 ## transformation will be used to treat infinite intervals and weaken
-## the singularities.  For example
+## the singularities.  For example:
 ##
 ## @example
 ## quadgk(@@(x) 1 ./ (sqrt (x) .* (x + 1)), 0, Inf)
 ## @end example
 ##
 ## @noindent
 ## Note that the formulation of the integrand uses the
 ## element-by-element operator @code{./} and all user functions to
@@ -73,17 +73,17 @@
 ## number of sub-intervals that can exist before exiting.
 ##
 ## @item WayPoints
 ## If there exists discontinuities in the first derivative of the
 ## function to integrate, then these can be flagged with the
 ## @code{"WayPoints"} property.  This forces the ends of a sub-interval
 ## to fall on the breakpoints of the function and can result in
 ## significantly improved estimation of the error in the integral, faster
-## computation or both.  For example,
+## computation or both.  For example:
 ##
 ## @example
 ## quadgk (@@(x) abs (1 - x .^ 2), 0, 2, 'Waypoints', 1)
 ## @end example
 ##
 ## @noindent
 ## signals the breakpoint in the integrand at @code{@var{x} = 1}.
 ##
diff --git a/scripts/general/rat.m b/scripts/general/rat.m
--- a/scripts/general/rat.m
+++ b/scripts/general/rat.m
@@ -16,17 +16,17 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{s} =} rat (@var{x}, @var{tol})
 ## @deftypefnx {Function File} {[@var{n}, @var{d}] =} rat (@var{x}, @var{tol})
 ##
 ## Find a rational approximation to @var{x} within the tolerance defined
-## by @var{tol} using a continued fraction expansion.  For example,
+## by @var{tol} using a continued fraction expansion.  For example:
 ##
 ## @example
 ## @group
 ## rat(pi) = 3 + 1/(7 + 1/16) = 355/113
 ## rat(e) = 3 + 1/(-4 + 1/(2 + 1/(5 + 1/(-2 + 1/(-7))))) 
 ##        = 1457/536
 ## @end group
 ## @end example
diff --git a/scripts/general/saveobj.m b/scripts/general/saveobj.m
--- a/scripts/general/saveobj.m
+++ b/scripts/general/saveobj.m
@@ -18,17 +18,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{b} =} saveobj (@var{a})
 ## Method of a class to manipulate an object prior to saving it to a file. 
 ## The function @code{saveobj} is called when the object @var{a} is saved 
 ## using the @code{save} function.  An example of the use of @code{saveobj}
 ## might be to remove fields of the object that don't make sense to be saved
 ## or it might be used to ensure that certain fields of the object are
-## initialized before the object is saved.  For example
+## initialized before the object is saved.  For example:
 ##
 ## @example
 ## @group
 ## function b = saveobj (a)
 ##   b = a;
 ##   if (isempty (b.field))
 ##      b.field = initfield(b);
 ##   endif
diff --git a/scripts/general/shiftdim.m b/scripts/general/shiftdim.m
--- a/scripts/general/shiftdim.m
+++ b/scripts/general/shiftdim.m
@@ -25,17 +25,17 @@
 ## circulated to the end.  If @var{n} is negative, then the dimensions
 ## of @var{x} are shifted to the right, with @var{n} leading singleton
 ## dimensions added.
 ##
 ## Called with a single argument, @code{shiftdim}, removes the leading
 ## singleton dimensions, returning the number of dimensions removed
 ## in the second output argument @var{ns}.
 ##
-## For example 
+## For example:
 ##
 ## @example
 ## @group
 ## x = ones (1, 2, 3);
 ## size (shiftdim (x, -1))
 ##      @result{} [1, 1, 2, 3]
 ## size (shiftdim (x, 1))
 ##      @result{} [2, 3]
diff --git a/scripts/geometry/delaunayn.m b/scripts/geometry/delaunayn.m
--- a/scripts/geometry/delaunayn.m
+++ b/scripts/geometry/delaunayn.m
@@ -30,16 +30,17 @@
 ## a 2d simplex is a triangle and 3d simplex is a tetrahedron.
 ## 
 ## Extra options for the underlying Qhull command can be specified by the
 ## second argument.  This argument is a cell array of strings.  The default
 ## options depend on the dimension of the input: 
 ## 
 ## @itemize 
 ## @item 2D and 3D: @var{opt} = @code{@{"Qt", "Qbb", "Qc"@}}
+##
 ## @item 4D and higher: @var{opt} = @code{@{"Qt", "Qbb", "Qc", "Qz"@}} 
 ## @end itemize
 ## 
 ## If @var{opt} is [], then the default arguments are used.  If @var{opt}
 ## is @code{@{"@w{}"@}}, then none of the default arguments are used by Qhull. 
 ## See the Qhull documentation for the available options. 
 ## 
 ## All options can also be specified as single string, for example
diff --git a/scripts/image/image_viewer.m b/scripts/image/image_viewer.m
--- a/scripts/image/image_viewer.m
+++ b/scripts/image/image_viewer.m
@@ -30,31 +30,37 @@
 ##
 ## When called with one input argument images will be displayed by saving
 ## the image to a file and the system command @var{command} will be called
 ## to view the image.  The @var{command} must be a string containing
 ## @code{%s} and possibly @code{%f}.  The @code{%s} will be replaced by
 ## the filename of the image, and the @code{%f} will (if present) be
 ## replaced by the zoom factor given to the @code{image} function.
 ## For example,
+##
 ## @example
 ## image_viewer ("eog %s");
 ## @end example
+##
 ## changes the image viewer to the @code{eog} program.
 ##
 ## With two input arguments, images will be displayed by calling
 ## the function @var{function_handle}.  For example,
+##
 ## @example
 ## image_viewer (data, @@my_image_viewer);
 ## @end example
+##
 ## sets the image viewer function to @code{my_image_viewer}.  The image
 ## viewer function is called with
+##
 ## @example
 ## my_image_viewer (@var{x}, @var{y}, @var{im}, @var{zoom}, @var{data})
 ## @end example
+##
 ## where @var{x} and @var{y} are the axis of the image, @var{im} is the image
 ## variable, and @var{data} is extra user-supplied data to be passed to
 ## the viewer function.
 ##
 ## With three input arguments it is possible to change the zooming.
 ## Some programs (like @code{xloadimage}) require the zoom factor to be
 ## between 0 and 100, and not 0 and 1 like Octave assumes.  This is
 ## solved by setting the third argument to 100.
diff --git a/scripts/image/imfinfo.m b/scripts/image/imfinfo.m
--- a/scripts/image/imfinfo.m
+++ b/scripts/image/imfinfo.m
@@ -23,67 +23,89 @@
 ##
 ## @code{imfinfo} returns a structure containing information about the image
 ## stored in the file @var{filename}.  The output structure contains the
 ## following fields.
 ##
 ## @table @samp
 ## @item Filename
 ## The full name of the image file.
+##
 ## @item FileSize
 ## Number of bytes of the image on disk
+##
 ## @item FileModDate
 ## Date of last modification to the file.
+##
 ## @item Height
 ## Image height in pixels.
+##
 ## @item Width
 ## Image Width in pixels.
+##
 ## @item BitDepth
 ## Number of bits per channel per pixel.
+##
 ## @item Format
 ## Image format (e.g., @code{"jpeg"}).
+##
 ## @item LongFormat
 ## Long form image format description.
+##
 ## @item XResolution
 ## X resolution of the image.
+##
 ## @item YResolution
 ## Y resolution of the image.
+##
 ## @item TotalColors
 ## Number of unique colors in the image.
+##
 ## @item TileName
 ## Tile name.
+##
 ## @item AnimationDelay
 ## Time in 1/100ths of a second (0 to 65535) which must expire before displaying
 ## the next image in an animated sequence.
+##
 ## @item AnimationIterations
 ## Number of iterations to loop an animation (e.g., Netscape loop extension)
 ## for.
+##
 ## @item ByteOrder
 ## Endian option for formats that support it.  Is either @code{"little-endian"},
 ## @code{"big-endian"}, or @code{"undefined"}.
+##
 ## @item Gamma
 ## Gamma level of the image.  The same color image displayed on two different
 ## workstations may look different due to differences in the display monitor.
+##
 ## @item Matte
 ## @code{true} if the image has transparency.
+##
 ## @item ModulusDepth
 ## Image modulus depth (minimum number of bits required to support
 ## red/green/blue
 ## components without loss of accuracy).
+##
 ## @item Quality
 ## JPEG/MIFF/PNG compression level.
+##
 ## @item QuantizeColors
 ## Preferred number of colors in the image.
+##
 ## @item ResolutionUnits
 ## Units of image resolution.  Is either @code{"pixels per inch"},
 ## @code{"pixels per centimeter"}, or @code{"undefined"}.
+##
 ## @item ColorType
 ## Image type.  Is either @code{"grayscale"}, @code{"indexed"},
 ## @code{"truecolor"},
 ## or @code{"undefined"}.
+##
 ## @item View
 ## FlashPix viewing parameters.
 ## @end table
 ##
 ## @seealso{imread, imwrite}
 ## @end deftypefn
 
 function info = imfinfo (filename)
diff --git a/scripts/io/csvread.m b/scripts/io/csvread.m
--- a/scripts/io/csvread.m
+++ b/scripts/io/csvread.m
@@ -12,22 +12,24 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {@var{x} =} csvread (@var{filename})
+## @deftypefn  {Function File} {@var{x} =} csvread (@var{filename})
+## @deftypefnx {Function File} {@var{x} =} csvread (@var{filename}, @var{dlm_opts})
 ## Read the comma-separated-value file @var{filename} into the matrix @var{x}.
 ##
 ## This function is equivalent to
+##
 ## @example
 ## @var{x} = dlmread (@var{filename}, "," , @dots{})
 ## @end example
 ##
-## @seealso{dlmread, dlmwrite, csvwrite}
+## @seealso{csvwrite, dlmread, dlmwrite}
 ## @end deftypefn
 
 function x = csvread (f, varargin)
   x = dlmread (f, ",", varargin{:});
 endfunction
diff --git a/scripts/io/csvwrite.m b/scripts/io/csvwrite.m
--- a/scripts/io/csvwrite.m
+++ b/scripts/io/csvwrite.m
@@ -12,23 +12,25 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} csvwrite (@var{filename}, @var{x})
+## @deftypefn  {Function File} {} csvwrite (@var{filename}, @var{x})
+## @deftypefnx {Function File} {} csvwrite (@var{filename}, @var{x}, @var{dlm_opts})
 ## Write the matrix @var{x} to the file @var{filename} in
 ## @w{comma-separated-value} format.
 ##
 ## This function is equivalent to
+##
 ## @example
 ## dlmwrite (@var{filename}, @var{x}, ",", @dots{})
 ## @end example
 ##
-## @seealso{dlmread, dlmwrite, csvread}
+## @seealso{csvread, dlmwrite, dlmread}
 ## @end deftypefn
 
 function csvwrite (f, m, varargin)
   dlmwrite (f, m, ",", varargin{:});
 endfunction
diff --git a/scripts/io/strread.m b/scripts/io/strread.m
--- a/scripts/io/strread.m
+++ b/scripts/io/strread.m
@@ -29,19 +29,21 @@
 ## specifiers, the process is repeated until all words have been processed.
 ##
 ## The string @var{format} describes how the words in @var{str} should be
 ## parsed.
 ## It may contain any combination of the following specifiers:
 ## @table @code
 ## @item %s
 ## The word is parsed as a string.
+##
 ## @item %d
 ## @itemx %f
 ## The word is parsed as a number.
+##
 ## @item %*
 ## The word is skipped.
 ## @end table
 ##
 ## Parsed word corresponding to the first specifier are returned in the first
 ## output argument and likewise for the rest of the specifiers.
 ##
 ## By default, @var{format} is @t{"%f"}, meaning that numbers are read from
@@ -67,25 +69,30 @@
 ## The behaviour of @code{strread} can be changed via properties @var{prop}
 ## @itemize @code
 ## @item "commentstyle":
 ## Parts of @var{str} are considered comments and will be skipped.
 ## @var{value} is the comment style and can be any of the following.
 ## @itemize
 ## @item "shell"
 ## Everything from @code{#} characters to the nearest end-line is skipped.
+##
 ## @item "c"
 ## Everything between @code{/*} and @code{*/} is skipped.
+##
 ## @item "c++"
 ## Everything from @code{//} characters to the nearest end-line is skipped.
+##
 ## @item "matlab"
 ## Everything from @code{%} characters to the nearest end-line is skipped.
 ## @end itemize
+##
 ## @item "delimiter"
 ## Any character in @var{value} will be used to split @var{str} into words.
+##
 ## @item "emptyvalue"
 ## Parts of the output where no word is available is filled with @var{value}.
 ## @end itemize
 ##
 ## @seealso{textread, load, dlmread, fscanf}
 ## @end deftypefn
 
 function varargout = strread (str, formatstr = "%f", varargin)
diff --git a/scripts/linear-algebra/condest.m b/scripts/linear-algebra/condest.m
--- a/scripts/linear-algebra/condest.m
+++ b/scripts/linear-algebra/condest.m
@@ -29,20 +29,23 @@
 ##
 ## If the matrix is not explicit, e.g., when estimating the condition 
 ## number of @var{a} given an LU factorization, @code{condest} uses the 
 ## following functions:
 ##
 ## @table @var
 ## @item apply
 ## @code{A*x} for a matrix @code{x} of size @var{n} by @var{t}.
+##
 ## @item apply_t
 ## @code{A'*x} for a matrix @code{x} of size @var{n} by @var{t}.
+##
 ## @item solve
 ## @code{A \ b} for a matrix @code{b} of size @var{n} by @var{t}.
+##
 ## @item solve_t
 ## @code{A' \ b} for a matrix @code{b} of size @var{n} by @var{t}.
 ## @end table
 ##
 ## The implicit version requires an explicit dimension @var{n}.
 ##
 ## @code{condest} uses a randomized algorithm to approximate
 ## the 1-norms.
@@ -54,16 +57,17 @@
 ##
 ## References: 
 ## @itemize
 ## @item 
 ## N.J. Higham and F. Tisseur, @cite{A Block Algorithm
 ## for Matrix 1-Norm Estimation, with an Application to 1-Norm
 ## Pseudospectra}. SIMAX vol 21, no 4, pp 1185-1201.
 ## @url{http://dx.doi.org/10.1137/S0895479899356080}
+##
 ## @item 
 ## N.J. Higham and F. Tisseur, @cite{A Block Algorithm
 ## for Matrix 1-Norm Estimation, with an Application to 1-Norm
 ## Pseudospectra}. @url{http://citeseer.ist.psu.edu/223007.html}
 ## @end itemize
 ##
 ## @seealso{cond, norm, onenormest}
 ## @end deftypefn
diff --git a/scripts/linear-algebra/housh.m b/scripts/linear-algebra/housh.m
--- a/scripts/linear-algebra/housh.m
+++ b/scripts/linear-algebra/housh.m
@@ -30,28 +30,31 @@
 ## @end example
 ##
 ## @noindent
 ## Inputs
 ##
 ## @table @var
 ## @item x
 ## vector
+##
 ## @item j
 ## index into vector
+##
 ## @item z
 ## threshold for zero  (usually should be the number 0)
 ## @end table
 ##
 ## @noindent
 ## Outputs (see Golub and Van Loan):
 ##
 ## @table @var
 ## @item beta
 ## If beta = 0, then no reflection need be applied (zer set to 0)
+##
 ## @item housv
 ## householder vector
 ## @end table
 ## @end deftypefn
 
 ## Author: A. S. Hodel
 ## Created: August 1995
 
diff --git a/scripts/linear-algebra/onenormest.m b/scripts/linear-algebra/onenormest.m
--- a/scripts/linear-algebra/onenormest.m
+++ b/scripts/linear-algebra/onenormest.m
@@ -39,16 +39,17 @@
 ##
 ## References: 
 ## @itemize
 ## @item
 ## N.J. Higham and F. Tisseur, @cite{A Block Algorithm
 ## for Matrix 1-Norm Estimation, with an Application to 1-Norm
 ## Pseudospectra}. SIMAX vol 21, no 4, pp 1185-1201.
 ## @url{http://dx.doi.org/10.1137/S0895479899356080}
+##
 ## @item
 ## N.J. Higham and F. Tisseur, @cite{A Block Algorithm
 ## for Matrix 1-Norm Estimation, with an Application to 1-Norm
 ## Pseudospectra}. @url{http://citeseer.ist.psu.edu/223007.html}
 ## @end itemize
 ##
 ## @seealso{condest, norm, cond}
 ## @end deftypefn
diff --git a/scripts/linear-algebra/qzhess.m b/scripts/linear-algebra/qzhess.m
--- a/scripts/linear-algebra/qzhess.m
+++ b/scripts/linear-algebra/qzhess.m
@@ -18,17 +18,17 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{aa}, @var{bb}, @var{q}, @var{z}] =} qzhess (@var{a}, @var{b})
 ## Compute the Hessenberg-triangular decomposition of the matrix pencil
 ## @code{(@var{a}, @var{b})}, returning
 ## @code{@var{aa} = @var{q} * @var{a} * @var{z}},
 ## @code{@var{bb} = @var{q} * @var{b} * @var{z}}, with @var{q} and @var{z}
-## orthogonal.  For example,
+## orthogonal.  For example:
 ##
 ## @example
 ## @group
 ## [aa, bb, q, z] = qzhess ([1, 2; 3, 4], [5, 6; 7, 8])
 ##      @result{} aa = [ -3.02244, -4.41741;  0.92998,  0.69749 ]
 ##      @result{} bb = [ -8.60233, -9.99730;  0.00000, -0.23250 ]
 ##      @result{}  q = [ -0.58124, -0.81373; -0.81373,  0.58124 ]
 ##      @result{}  z = [ 1, 0; 0, 1 ]
diff --git a/scripts/miscellaneous/bincoeff.m b/scripts/miscellaneous/bincoeff.m
--- a/scripts/miscellaneous/bincoeff.m
+++ b/scripts/miscellaneous/bincoeff.m
@@ -31,19 +31,19 @@
 ## @group
 ##  /   \
 ##  | n |    n (n-1) (n-2) @dots{} (n-k+1)
 ##  |   |  = -------------------------
 ##  | k |               k!
 ##  \   /
 ## @end group
 ## @end example
+##
 ## @end ifnottex
-##
-## For example,
+## For example:
 ##
 ## @example
 ## @group
 ## bincoeff (5, 2)
 ##      @result{} 10
 ## @end group
 ## @end example
 ##
diff --git a/scripts/miscellaneous/compare_versions.m b/scripts/miscellaneous/compare_versions.m
--- a/scripts/miscellaneous/compare_versions.m
+++ b/scripts/miscellaneous/compare_versions.m
@@ -32,31 +32,37 @@
 ## nulls).
 ##
 ## The operator can be any logical operator from the set
 ##
 ## @itemize @bullet
 ## @item
 ## "=="
 ## equal
+##
 ## @item
 ## "<"
 ## less than
+##
 ## @item
 ## "<="
 ## less than or equal to
+##
 ## @item
 ## ">"
 ## greater than
+##
 ## @item
 ## ">="
 ## greater than or equal to
+##
 ## @item
 ## "!="
 ## not equal
+##
 ## @item
 ## "~="
 ## not equal
 ## @end itemize
 ##
 ## Note that version "1.1-test2" would compare as greater than
 ## "1.1-test10".  Also, since the numeric part is compared first, "a"
 ## compares less than "1a" because the second string starts with a
diff --git a/scripts/miscellaneous/computer.m b/scripts/miscellaneous/computer.m
--- a/scripts/miscellaneous/computer.m
+++ b/scripts/miscellaneous/computer.m
@@ -16,17 +16,17 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{c}, @var{maxsize}, @var{endian}] =} computer ()
 ## Print or return a string of the form @var{cpu}-@var{vendor}-@var{os}
 ## that identifies the kind of computer Octave is running on.  If invoked
 ## with an output argument, the value is returned instead of printed.  For
-## example,
+## example:
 ##
 ## @example
 ## @group
 ## computer ()
 ##      @print{} i586-pc-linux-gnu
 ##
 ## x = computer ()
 ##      @result{} x = "i586-pc-linux-gnu"
diff --git a/scripts/miscellaneous/edit.m b/scripts/miscellaneous/edit.m
--- a/scripts/miscellaneous/edit.m
+++ b/scripts/miscellaneous/edit.m
@@ -72,29 +72,32 @@
 ## @item editor
 ## This is the editor to use to modify the functions.  By default it uses
 ## Octave's @env{EDITOR} built-in function, which comes from 
 ## @code{getenv("EDITOR")} and defaults to @code{emacs}.  Use @code{%s}
 ## In place of the function name.  For example,
 ## @table @samp
 ## @item [EDITOR, " %s"]
 ## Use the editor which Octave uses for @code{bug_report}.
+##
 ## @item "xedit %s &"           
 ## pop up simple X11 editor in a separate window
+##
 ## @item "gnudoit -q \"(find-file \\\"%s\\\")\""   
 ## Send it to current Emacs; must have @code{(gnuserv-start)} in @file{.emacs}.
 ## @end table
 ##
 ## See also field 'mode', which controls how the editor is run by Octave.
 ## 
 ## On Cygwin, you will need to convert the Cygwin path to a Windows
-## path if you are using a native Windows editor.  For example
-## @c Set example in small font to prevent overfull line
+## path if you are using a native Windows editor.  For example:
+## @c Set example in small font to prevent overfull line in TeX
+##
 ## @smallexample
-## '"C:/Program Files/Good Editor/Editor.exe" "$(cygpath -wa %s)"'
+## @exdent '"C:/Program Files/Good Editor/Editor.exe" "$(cygpath -wa %s)"'
 ## @end smallexample
 ##
 ## @item home
 ## This is the location of user local m-files.  Be be sure it is in your
 ## path.  The default is @file{~/octave}.
 ##
 ## @item author
 ## This is the name to put after the "## Author:" field of new functions.
@@ -105,20 +108,23 @@
 ## By default it guesses @code{<$LOGNAME@@$HOSTNAME>}, and if @code{$HOSTNAME}
 ## is not defined it uses @code{uname -n}.  You probably want to override this.
 ## Be sure to use @code{<user@@host>} as your format.
 ##
 ## @item license
 ## @table @samp
 ## @item gpl
 ## GNU General Public License (default).
+##
 ## @item bsd
 ## BSD-style license without advertising clause.
+##
 ## @item pd
 ## Public domain.
+##
 ## @item "text"
 ## Your own default copyright and license.
 ## @end table
 ## 
 ## Unless you specify @samp{pd}, edit will prepend the copyright statement 
 ## with "Copyright (C) yyyy Function Author".
 ## 
 ## @item mode
diff --git a/scripts/miscellaneous/fileattrib.m b/scripts/miscellaneous/fileattrib.m
--- a/scripts/miscellaneous/fileattrib.m
+++ b/scripts/miscellaneous/fileattrib.m
@@ -21,34 +21,41 @@
 ## Return information about @var{file}.
 ##
 ## If successful, @var{status} is 1, with @var{result} containing a
 ## structure with the following fields:
 ##
 ## @table @code
 ## @item Name
 ## Full name of @var{file}.
+##
 ## @item archive
 ## True if @var{file} is an archive (Windows).
+##
 ## @item system
 ## True if @var{file} is a system file (Windows).
+##
 ## @item hidden
 ## True if @var{file} is a hidden file (Windows).
+##
 ## @item directory
 ## True if @var{file} is a directory.
+##
 ## @item UserRead
 ## @itemx GroupRead
 ## @itemx OtherRead
 ## True if the user (group; other users) has read permission for
 ## @var{file}.
+##
 ## @item UserWrite
 ## @itemx GroupWrite
 ## @itemx OtherWrite
 ## True if the user (group; other users) has write permission for
 ## @var{file}.
+##
 ## @item UserExecute
 ## @itemx GroupExecute
 ## @itemx OtherExecute
 ## True if the user (group; other users) has execute permission for
 ## @var{file}.
 ## @end table
 ## If an attribute does not apply (i.e., archive on a Unix system) then
 ## the field is set to NaN.
diff --git a/scripts/miscellaneous/getfield.m b/scripts/miscellaneous/getfield.m
--- a/scripts/miscellaneous/getfield.m
+++ b/scripts/miscellaneous/getfield.m
@@ -14,17 +14,17 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{v1}, @dots{}] =} getfield (@var{s}, @var{key}, @dots{}) 
-## Extract a field from a structure (or a nested structure).  For example
+## Extract a field from a structure (or a nested structure).  For example:
 ##
 ## @example
 ## @group
 ## ss(1,2).fd(3).b = 5;
 ## getfield (ss, @{1,2@}, "fd", @{3@}, "b")
 ##      @result{} ans = 5
 ## @end group
 ## @end example
diff --git a/scripts/miscellaneous/license.m b/scripts/miscellaneous/license.m
--- a/scripts/miscellaneous/license.m
+++ b/scripts/miscellaneous/license.m
@@ -34,16 +34,17 @@
 ## @deftypefnx {Function File} {} license ("test", @var{feature}, @var{toggle})
 ## Enable or disable license testing for @var{feature}, depending on
 ## @var{toggle}, which may be one of:
 ##
 ## @table @samp
 ## @item "enable"
 ## Future tests for the specified license of @var{feature} are conducted
 ## as usual.
+##
 ## @item "disable"
 ## Future tests for the specified license of @var{feature} return 0.
 ## @end table
 ##
 ## @deftypefnx {Function File} {@var{retval} =} license ("checkout", @var{feature})
 ## Check out a license for @var{feature}, returning 1 on success and 0
 ## on failure.
 ##
diff --git a/scripts/miscellaneous/ls.m b/scripts/miscellaneous/ls.m
--- a/scripts/miscellaneous/ls.m
+++ b/scripts/miscellaneous/ls.m
@@ -13,17 +13,17 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deffn {Command} ls options
-## List directory contents.  For example,
+## List directory contents.  For example:
 ## 
 ## @example
 ## @group
 ## ls -l
 ##      @print{} total 12
 ##      @print{} -rw-r--r--   1 jwe  users  4488 Aug 19 04:02 foo.m
 ##      @print{} -rw-r--r--   1 jwe  users  1315 Aug 17 23:14 bar.m
 ## @end group
diff --git a/scripts/miscellaneous/parseparams.m b/scripts/miscellaneous/parseparams.m
--- a/scripts/miscellaneous/parseparams.m
+++ b/scripts/miscellaneous/parseparams.m
@@ -17,17 +17,17 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {[@var{reg}, @var{prop}] =} parseparams (@var{params})
 ## @deftypefnx {Function File} {[@var{reg}, @var{var1}, @dots{}] =} parseparams (@var{params}, @var{name1}, @var{default1}, @dots{})
 ## Return in @var{reg} the cell elements of @var{param} up to the first
 ## string element and in @var{prop} all remaining elements beginning
-## with the first string element.  For example 
+## with the first string element.  For example:
 ##
 ## @example
 ## @group
 ## [reg, prop] = parseparams (@{1, 2, "linewidth", 10@})
 ## reg =
 ## @{
 ##   [1,1] = 1
 ##   [1,2] = 2
diff --git a/scripts/miscellaneous/swapbytes.m b/scripts/miscellaneous/swapbytes.m
--- a/scripts/miscellaneous/swapbytes.m
+++ b/scripts/miscellaneous/swapbytes.m
@@ -14,17 +14,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} swapbytes (@var{x})
 ## Swaps the byte order on values, converting from little endian to big 
-## endian and vice versa.  For example
+## endian and vice versa.  For example:
 ##
 ## @example
 ## @group
 ## swapbytes (uint16 (1:4))
 ## @result{} [   256   512   768  1024]
 ## @end group
 ## @end example
 ##
diff --git a/scripts/miscellaneous/ver.m b/scripts/miscellaneous/ver.m
--- a/scripts/miscellaneous/ver.m
+++ b/scripts/miscellaneous/ver.m
@@ -24,20 +24,23 @@
 ## directories.
 ## @deftypefnx {Function File} {v =} ver ()
 ## Return a vector of structures, respecting Octave and each installed package.
 ## The structure includes the following fields.
 ##
 ## @table @code
 ##   @item Name
 ##   Package name.
+##
 ##   @item Version
 ##   Version of the package.
+##
 ##   @item Revision
 ##   Revision of the package.
+##
 ##   @item Date
 ##   Date respecting the version/revision.
 ## @end table
 ## @deftypefnx {Function File} {v =} ver (@code{"Octave"})
 ## Return version information for Octave only..
 ## @deftypefnx {Function File} {v =} ver (@var{pkg})
 ## Return version information for the specified package @var{pkg}.
 ## @seealso{license, version}
diff --git a/scripts/miscellaneous/warning_ids.m b/scripts/miscellaneous/warning_ids.m
--- a/scripts/miscellaneous/warning_ids.m
+++ b/scripts/miscellaneous/warning_ids.m
@@ -112,17 +112,17 @@
 ## @item Octave:divide-by-zero
 ## If the @code{Octave:divide-by-zero} warning is enabled, a
 ## warning is issued when Octave encounters a division by zero.  By
 ## default, the @code{Octave:divide-by-zero} warning is enabled.
 ## 
 ## @item Octave:empty-list-elements
 ## If the @code{Octave:empty-list-elements} warning is enabled, a
 ## warning is issued when an empty matrix is found in a matrix list.
-## For example,
+## For example:
 ## 
 ## @example
 ## a = [1, [], 3, [], 5]
 ## @end example
 ## 
 ## @noindent
 ## By default, the @code{Octave:empty-list-elements} warning is enabled.
 ## 
@@ -178,16 +178,17 @@
 ## numbers in matrix notation.  For example,
 ## 
 ## @example
 ## @group
 ## [ "f", 111, 111 ]
 ##      @result{} "foo"
 ## @end group
 ## @end example
+##
 ## elicits a warning if the @code{Octave:num-to-str} warning is
 ## enabled.  By default, the @code{Octave:num-to-str} warning is enabled.
 ## 
 ## @item Octave:precedence-change
 ## If the @code{Octave:precedence-change} warning is enabled, Octave
 ## will warn about possible changes in the meaning of some code due to
 ## changes in precedence for some operators.  Precedence changes have
 ## typically been made for @sc{matlab} compatibility.  By default, the
@@ -214,22 +215,24 @@
 ## @item Octave:single-quote-string
 ## Print warning if a single quote character is used to introduce a
 ## string constant.
 ## 
 ## @item Octave:str-to-num
 ## If the @code{Octave:str-to-num} warning is enabled, a warning is printed
 ## for implicit conversions of strings to their numeric ASCII equivalents.
 ## For example,
+##
 ## @example
 ## @group
 ## "abc" + 0
 ##      @result{} 97 98 99
 ## @end group
 ## @end example
+##
 ## elicits a warning if the @code{Octave:str-to-num} warning is enabled.
 ## By default, the @code{Octave:str-to-num} warning is disabled.
 ## 
 ## @item Octave:string-concat
 ## If the @code{Octave:string-concat} warning is enabled, print a
 ## warning when concatenating a mixture of double and single quoted strings.
 ## By default, the @code{Octave:string-concat} warning is disabled.
 ## 
diff --git a/scripts/optimization/fminbnd.m b/scripts/optimization/fminbnd.m
--- a/scripts/optimization/fminbnd.m
+++ b/scripts/optimization/fminbnd.m
@@ -31,18 +31,20 @@
 ## 
 ## On exit, the function returns @var{x}, the approximate minimum point
 ## and @var{fval}, the function value thereof.
 ## @var{info} is an exit flag that can have these values:
 ##
 ## @itemize
 ## @item 1
 ## The algorithm converged to a solution.
+##
 ## @item 0
 ## Maximum number of iterations or function evaluations has been exhausted.
+##
 ## @item -1
 ## The algorithm has been terminated from user output function.
 ## @end itemize
 ## @seealso{optimset, fzero, fminunc} 
 ## @end deftypefn
 
 ## This is patterned after opt/fmin.f from Netlib, which in turn is taken from
 ## Richard Brent: Algorithms For Minimization Without Derivatives, Prentice-Hall (1973)
diff --git a/scripts/optimization/fminunc.m b/scripts/optimization/fminunc.m
--- a/scripts/optimization/fminunc.m
+++ b/scripts/optimization/fminunc.m
@@ -49,22 +49,26 @@
 ## On return, @var{fval} contains the value of the function @var{fcn}
 ## evaluated at @var{x}, and @var{info} may be one of the following values:
 ## 
 ## @table @asis
 ## @item 1
 ## Converged to a solution point.  Relative gradient error is less than
 ## specified
 ## by TolFun.
+##
 ## @item 2
 ## Last relative step size was less that TolX.
+##
 ## @item 3
 ## Last relative decrease in func value was less than TolF. 
+##
 ## @item 0
 ## Iteration limit exceeded.
+##
 ## @item -3
 ## The trust region radius became excessively small. 
 ## @end table
 ##
 ## Optionally, fminunc can also yield a structure with convergence statistics
 ## (@var{output}), the output gradient (@var{grad}) and approximate Hessian
 ## (@var{hess}).
 ##
diff --git a/scripts/optimization/fsolve.m b/scripts/optimization/fsolve.m
--- a/scripts/optimization/fsolve.m
+++ b/scripts/optimization/fsolve.m
@@ -17,17 +17,17 @@
 ## <http://www.gnu.org/licenses/>.
 ##
 ## Author: Jaroslav Hajek <highegg@gmail.com>
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} fsolve (@var{fcn}, @var{x0}, @var{options})
 ## @deftypefnx {Function File} {[@var{x}, @var{fvec}, @var{info}, @var{output}, @var{fjac}] =} fsolve (@var{fcn}, @dots{})
 ## Solve a system of nonlinear equations defined by the function @var{fcn}.
-## @var{fcn} should accepts a vector (array) defining the unknown variables,
+## @var{fcn} should accept a vector (array) defining the unknown variables,
 ## and return a vector of left-hand sides of the equations.  Right-hand sides
 ## are defined to be zeros.
 ## In other words, this function attempts to determine a vector @var{x} such 
 ## that @code{@var{fcn} (@var{x})} gives (approximately) all zeros.
 ## @var{x0} determines a starting guess.  The shape of @var{x0} is preserved
 ## in all calls to @var{fcn}, but otherwise it is treated as a column vector.
 ## @var{options} is a structure specifying additional options.
 ## Currently, @code{fsolve} recognizes these options:
@@ -64,24 +64,27 @@
 ## For description of the other options, see @code{optimset}.
 ##
 ## On return, @var{fval} contains the value of the function @var{fcn}
 ## evaluated at @var{x}, and @var{info} may be one of the following values:
 ## 
 ## @table @asis
 ## @item 1
 ## Converged to a solution point.  Relative residual error is less than
-## specified
-## by TolFun.
+## specified by TolFun.
+##
 ## @item 2
 ## Last relative step size was less that TolX.
+##
 ## @item 3
 ## Last relative decrease in residual was less than TolF. 
+##
 ## @item 0
 ## Iteration limit exceeded.
+##
 ## @item -3
 ## The trust region radius became excessively small. 
 ## @end table
 ## 
 ## Note: If you only have a single nonlinear equation of one variable, using 
 ## @code{fzero} is usually a much better idea.
 ## @seealso{fzero, optimset}
 ##
@@ -117,17 +120,16 @@
 ##   ## maybe output iteration status, etc.
 ## endif
 ## endfunction
 ##
 ## ## @dots{}.
 ## 
 ## fsolve (@@user_func, x0, optimset ("OutputFcn", @@user_func, @dots{}))
 ## @end example
-###
 ## @end deftypefn
 
 ## PKG_ADD: __all_opts__ ("fsolve");
 
 function [x, fvec, info, output, fjac] = fsolve (fcn, x0, options = struct ())
 
   ## Get default options if requested.
   if (nargin == 1 && ischar (fcn) && strcmp (fcn, 'defaults'))
@@ -156,17 +158,17 @@ function [x, fvec, info, output, fjac] =
   cdif = strcmpi (optimget (options, "FinDiffType", "central"), "central");
   maxiter = optimget (options, "MaxIter", 400);
   maxfev = optimget (options, "MaxFunEvals", Inf);
   outfcn = optimget (options, "OutputFcn");
   updating = strcmpi (optimget (options, "Updating", "on"), "on");
   complexeqn = strcmpi (optimget (options, "ComplexEqn", "off"), "on");
 
   ## Get scaling matrix using the TypicalX option. If set to "auto", the
-  ## scaling matrix is estimated using the jacobian.
+  ## scaling matrix is estimated using the Jacobian.
   typicalx = optimget (options, "TypicalX");
   if (isempty (typicalx))
     typicalx = ones (n, 1);
   endif
   autoscale = strcmpi (optimget (options, "AutoScaling", "off"), "on");
   if (! autoscale)
     dg = 1 ./ typicalx;
   endif
@@ -219,29 +221,29 @@ function [x, fvec, info, output, fjac] =
   nsuciter = 0;
 
   ## Outer loop.
   while (niter < maxiter && nfev < maxfev && ! info)
 
     ## Calculate function value and Jacobian (possibly via FD).
     if (has_jac)
       [fvec, fjac] = fcn (reshape (x, xsiz));
-      ## If the jacobian is sparse, disable Broyden updating.
+      ## If the Jacobian is sparse, disable Broyden updating.
       if (issparse (fjac))
         updating = false;
       endif
       fvec = fvec(:);
       nfev ++;
     else
       fjac = __fdjac__ (fcn, reshape (x, xsiz), fvec, typicalx, cdif);
       nfev += (1 + cdif) * length (x);
     endif
 
     ## For square and overdetermined systems, we update a QR
-    ## factorization of the jacobian to avoid solving a full system in each
+    ## factorization of the Jacobian to avoid solving a full system in each
     ## step. In this case, we pass a triangular matrix to __dogleg__.
     useqr = updating && m >= n && n > 10;
 
     if (useqr)
       ## FIXME: Currently, pivoting is mostly useless because the \ operator
       ## cannot exploit the resulting props of the triangular factor.
       ## Unpivoted QR is significantly faster so it doesn't seem right to pivot
       ## just to get invariance. Original MINPACK didn't pivot either, at least
@@ -254,33 +256,33 @@ function [x, fvec, info, output, fjac] =
       jcn = norm (fjac, 'columns').';
       if (niter == 1)
         dg = jcn;
         dg(dg == 0) = 1;
       else
         ## Rescale adaptively.
         ## FIXME: the original minpack used the following rescaling strategy:
         ##   dg = max (dg, jcn);
-        ## but it seems not good if we start with a bad guess yielding jacobian
+        ## but it seems not good if we start with a bad guess yielding Jacobian
         ## columns with large norms that later decrease, because the corresponding
         ## variable will still be overscaled. So instead, we only give the old
         ## scaling a small momentum, but do not honor it.
 
         dg = max (0.1*dg, jcn);
       endif
     endif
 
     if (niter == 1)
       xn = norm (dg .* x);
       ## FIXME: something better?
       delta = factor * max (xn, 1);
     endif
 
     ## It also seems that in the case of fast (and inhomogeneously) changing
-    ## jacobian, the Broyden updates are of little use, so maybe we could
+    ## Jacobian, the Broyden updates are of little use, so maybe we could
     ## skip them if a big disproportional change is expected. The question is,
     ## of course, how to define the above terms :)
 
     lastratio = 0;
     nfail = 0;
     nsuc = 0;
     decfac = 0.5;
 
@@ -394,33 +396,33 @@ function [x, fvec, info, output, fjac] =
           ## Again a classic one. It seems weird to use the same tolf
           ## for two different tests, but that's what M*b manual appears
           ## to say.
         elseif (actred < tolf)
           info = 3;
         endif
       endif
 
-      ## Criterion for recalculating jacobian.
+      ## Criterion for recalculating Jacobian.
       if (! updating || nfail == 2 || nsuciter < 2)
         break;
       endif
 
       ## Compute the scaled Broyden update.
       if (useqr)
         u = (fvec1 - q*w) / sn; 
         v = dg .* ((dg .* s) / sn);
 
         ## Update the QR factorization.
         [q, r] = qrupdate (q, r, u, v);
       else
         u = (fvec1 - w);
         v = dg .* ((dg .* s) / sn);
 
-        ## update the jacobian
+        ## update the Jacobian
         fjac += u * v';
       endif
     endwhile
   endwhile
 
   ## Restore original shapes.
   x = reshape (x, xsiz);
   fvec = reshape (fvec, fsiz);
diff --git a/scripts/optimization/fzero.m b/scripts/optimization/fzero.m
--- a/scripts/optimization/fzero.m
+++ b/scripts/optimization/fzero.m
@@ -23,53 +23,61 @@
 ## @deftypefnx {Function File} {} fzero (@var{fun}, @var{x0}, @var{options})
 ## @deftypefnx {Function File} {[@var{x}, @var{fval}, @var{info}, @var{output}] =} fzero (@dots{})
 ## Find a zero of a univariate function.  
 ##
 ## @var{fun} should be a function handle or name.  @var{x0} should be a 
 ## two-element vector specifying two points which bracket a zero.  In
 ## other words, there must be a change in sign of the function between
 ## @var{x0}(1) and @var{x0}(2).  More mathematically, the following must hold
+##
 ## @example
 ## sign (@var{fun}(@var{x0}(1))) * sign (@var{fun}(@var{x0}(2))) <= 0
 ## @end example
+##
 ## If @var{x0} is a single scalar then several nearby and distant
 ## values are probed in an attempt to obtain a valid bracketing.  If this
 ## is not successful, the function fails.
 ## @var{options} is a structure specifying additional options. 
 ## Currently, @code{fzero}
 ## recognizes these options: @code{"FunValCheck"}, @code{"OutputFcn"},
 ## @code{"TolX"}, @code{"MaxIter"}, @code{"MaxFunEvals"}. 
 ## For a description of these options, see @ref{doc-optimset,,optimset}.
 ## 
 ## On exit, the function returns @var{x}, the approximate zero point
 ## and @var{fval}, the function value thereof.
 ## @var{info} is an exit flag that can have these values:
 ##
 ## @itemize
 ## @item 1
 ##  The algorithm converged to a solution.
+##
 ## @item 0
 ##  Maximum number of iterations or function evaluations has been reached.
+##
 ## @item -1
 ## The algorithm has been terminated from user output function.
+##
 ## @item -5
 ## The algorithm may have converged to a singular point.
 ## @end itemize
 ## 
 ## @var{output} is a structure containing runtime information about the
 ## @code{fzero} algorithm.  Fields in the structure are:
 ##
 ## @itemize
 ## @item iterations
 ##  Number of iterations through loop.
+##
 ## @item nfev
 ##  Number of function evaluations.
+##
 ## @item bracketx
 ##  A two-element vector with the final bracketing of the zero along the x-axis.
+##
 ## @item brackety
 ##  A two-element vector with the final bracketing of the zero along the y-axis.
 ## @end itemize
 ## @seealso{optimset, fsolve} 
 ## @end deftypefn
 
 ## This is essentially the ACM algorithm 748: Enclosing Zeros of
 ## Continuous Functions due to Alefeld, Potra and Shi, ACM Transactions
diff --git a/scripts/optimization/glpk.m b/scripts/optimization/glpk.m
--- a/scripts/optimization/glpk.m
+++ b/scripts/optimization/glpk.m
@@ -15,72 +15,73 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{xopt}, @var{fmin}, @var{status}, @var{extra}] =} glpk (@var{c}, @var{a}, @var{b}, @var{lb}, @var{ub}, @var{ctype}, @var{vartype}, @var{sense}, @var{param})
 ## Solve a linear program using the GNU @sc{glpk} library.  Given three
 ## arguments, @code{glpk} solves the following standard LP:
-## 
 ## @tex
 ## $$
 ##   \min_x C^T x
 ## $$
 ## @end tex
 ## @ifnottex
+##
 ## @example
 ## min C'*x
 ## @end example
+##
 ## @end ifnottex
-## 
 ## subject to
-## 
 ## @tex
 ## $$
 ##   Ax = b \qquad x \geq 0
 ## $$
 ## @end tex
 ## @ifnottex
+##
 ## @example
 ## @group
 ## A*x  = b
 ##   x >= 0
 ## @end group
 ## @end example
+##
 ## @end ifnottex
-## 
 ## but may also solve problems of the form
-## 
 ## @tex
 ## $$
 ##   [ \min_x | \max_x ] C^T x
 ## $$
 ## @end tex
 ## @ifnottex
+##
 ## @example
 ## [ min | max ] C'*x
 ## @end example
+##
 ## @end ifnottex
-## 
 ## subject to
-## 
 ## @tex
 ## $$
 ##  Ax [ = | \leq | \geq ] b \qquad LB \leq x \leq UB
 ## $$
 ## @end tex
 ## @ifnottex
+##
 ## @example
 ## @group
 ## A*x [ "=" | "<=" | ">=" ] b
 ##   x >= LB
 ##   x <= UB
 ## @end group
 ## @end example
+##
 ## @end ifnottex
 ## 
 ## Input arguments:
 ## 
 ## @table @var
 ## @item c
 ## A column array containing the objective function coefficients.
 ## 
@@ -103,32 +104,37 @@
 ## 
 ## @item ctype
 ## An array of characters containing the sense of each constraint in the
 ## constraint matrix.  Each element of the array may be one of the
 ## following values
 ## @table @code
 ## @item "F"
 ## A free (unbounded) constraint (the constraint is ignored).
+##
 ## @item "U"
 ## An inequality constraint with an upper bound (@code{A(i,:)*x <= b(i)}).
+##
 ## @item "S"
 ## An equality constraint (@code{A(i,:)*x = b(i)}).
+##
 ## @item "L"
 ## An inequality with a lower bound (@code{A(i,:)*x >= b(i)}).
+##
 ## @item "D"
 ## An inequality constraint with both upper and lower bounds
 ## (@code{A(i,:)*x >= -b(i)} @emph{and} (@code{A(i,:)*x <= b(i)}).
 ## @end table
 ## 
 ## @item vartype
 ## A column array containing the types of the variables.
 ## @table @code
 ## @item "C"
 ## A continuous variable.
+##
 ## @item "I"
 ## An integer variable.
 ## @end table
 ## 
 ## @item sense
 ## If @var{sense} is 1, the problem is a minimization.  If @var{sense} is
 ## -1, the problem is a maximization.  The default value is 1.
 ## 
@@ -141,58 +147,66 @@
 ## Integer parameters:
 ## 
 ## @table @code
 ## @item msglev (@w{@code{LPX_K_MSGLEV}}, default: 1)
 ## Level of messages output by solver routines:
 ## @table @asis
 ## @item 0
 ## No output.
+##
 ## @item 1
 ## Error messages only.
+##
 ## @item 2
-## Normal output .
+## Normal output.
+##
 ## @item 3
 ## Full output (includes informational messages).
 ## @end table
 ## 
 ## @item scale (@w{@code{LPX_K_SCALE}}, default: 1)
 ## Scaling option: 
 ## @table @asis
 ## @item 0
 ## No scaling.
+##
 ## @item 1
 ## Equilibration scaling.
+##
 ## @item 2
 ## Geometric mean scaling, then equilibration scaling.
 ## @end table
 ## 
 ## @item dual    (@w{@code{LPX_K_DUAL}}, default: 0)
 ## Dual simplex option:
 ## @table @asis
 ## @item 0
 ## Do not use the dual simplex.
+##
 ## @item 1
 ## If initial basic solution is dual feasible, use the dual simplex.
 ## @end table
 ## 
 ## @item price   (@w{@code{LPX_K_PRICE}}, default: 1)
 ## Pricing option (for both primal and dual simplex):
 ## @table @asis
 ## @item 0
 ## Textbook pricing.
+##
 ## @item 1
 ## Steepest edge pricing.
 ## @end table
 ##   
 ## @item round   (@w{@code{LPX_K_ROUND}}, default: 0)
 ## Solution rounding option:
 ## @table @asis
 ## @item 0
 ## Report all primal and dual values "as is".
+##
 ## @item 1
 ## Replace tiny primal and dual values by exact zero.
 ## @end table
 ## 
 ## @item itlim   (@w{@code{LPX_K_ITLIM}}, default: -1)
 ## Simplex iterations limit.  If this value is positive, it is decreased by
 ## one each time when one simplex iteration has been performed, and
 ## reaching zero value signals the solver to stop the search.  Negative
@@ -203,46 +217,52 @@
 ## frequently the solver sends information about the solution to the
 ## standard output.
 ## 
 ## @item branch (@w{@code{LPX_K_BRANCH}}, default: 2)
 ## Branching heuristic option (for MIP only):
 ## @table @asis
 ## @item 0
 ## Branch on the first variable.
+##
 ## @item 1
 ## Branch on the last variable.
+##
 ## @item 2
 ## Branch using a heuristic by Driebeck and Tomlin.
 ## @end table
 ## 
 ## @item btrack (@w{@code{LPX_K_BTRACK}}, default: 2)
 ## Backtracking heuristic option (for MIP only):
 ## @table @asis
 ## @item 0
 ## Depth first search.
+##
 ## @item 1
 ## Breadth first search.
+##
 ## @item 2
 ## Backtrack using the best projection heuristic.
 ## @end table        
 ## 
 ## @item presol (@w{@code{LPX_K_PRESOL}}, default: 1)
 ## If this flag is set, the routine lpx_simplex solves the problem using
 ## the built-in LP presolver.  Otherwise the LP presolver is not used.
 ## 
 ## @item lpsolver (default: 1)
 ## Select which solver to use.  If the problem is a MIP problem this flag
 ## will be ignored.
 ## @table @asis
 ## @item 1
 ## Revised simplex method.
+##
 ## @item 2
 ## Interior point method.
 ## @end table
+##
 ## @item save (default: 0)
 ## If this parameter is nonzero, save a copy of the problem in
 ## CPLEX LP format to the file @file{"outpb.lp"}.  There is currently no
 ## way to change the name of the output file.
 ## @end table
 ## 
 ## Real parameters:
 ## 
@@ -306,18 +326,20 @@
 ## @end table
 ## @end table
 ## 
 ## Output values:
 ## 
 ## @table @var
 ## @item xopt
 ## The optimizer (the value of the decision variables at the optimum).
+##
 ## @item fopt
 ## The optimum value of the objective function.
+##
 ## @item status
 ## Status of the optimization.
 ## 
 ## Simplex Method:
 ## @table @asis
 ## @item 180 (@w{@code{LPX_OPT}})
 ## Solution is optimal.
 ## @item 181 (@w{@code{LPX_FEAS}})
@@ -372,25 +394,29 @@
 ## Problems with basis matrix.
 ## @item 212 (@w{@code{LPX_E_NOCONV}})
 ## No convergence (interior).
 ## @item 213 (@w{@code{LPX_E_NOPFS}})
 ## No primal feasible solution (LP presolver).
 ## @item 214 (@w{@code{LPX_E_NODFS}})
 ## No dual feasible solution (LP presolver).
 ## @end table
+##
 ## @item extra
 ## A data structure containing the following fields:
 ## @table @code
 ## @item lambda
 ## Dual variables.
+##
 ## @item redcosts
 ## Reduced Costs.
+##
 ## @item time
 ## Time (in seconds) used for solving LP/MIP problem.
+##
 ## @item mem
 ## Memory (in bytes) used for solving LP/MIP problem (this is not 
 ## available if the version of @sc{glpk} is 4.15 or later).
 ## @end table
 ## @end table
 ## 
 ## Example:
 ## 
diff --git a/scripts/optimization/lsqnonneg.m b/scripts/optimization/lsqnonneg.m
--- a/scripts/optimization/lsqnonneg.m
+++ b/scripts/optimization/lsqnonneg.m
@@ -30,32 +30,37 @@
 ## 0}.  @var{c} and @var{d} must be real.  @var{x0} is an optional
 ## initial guess for @var{x}.
 ##
 ## Outputs:
 ## @itemize @bullet
 ## @item resnorm
 ##
 ## The squared 2-norm of the residual: norm(@var{c}*@var{x}-@var{d})^2
+##
 ## @item residual
 ##
 ## The residual: @var{d}-@var{c}*@var{x}
+##
 ## @item exitflag
 ##
 ## An indicator of convergence.  0 indicates that the iteration count
 ## was exceeded, and therefore convergence was not reached; >0 indicates
 ## that the algorithm converged.  (The algorithm is stable and will
 ## converge given enough iterations.)
+##
 ## @item output
 ##
 ## A structure with two fields:
 ## @itemize @bullet
 ## @item "algorithm": The algorithm used ("nnls")
+##
 ## @item "iterations": The number of iterations taken.
 ## @end itemize
+##
 ## @item lambda
 ##
 ## Not implemented.
 ## @end itemize
 ## @seealso{optimset, pqpnonneg}
 ## @end deftypefn
 
 ## PKG_ADD: __all_opts__ ("lsqnonneg");
diff --git a/scripts/optimization/pqpnonneg.m b/scripts/optimization/pqpnonneg.m
--- a/scripts/optimization/pqpnonneg.m
+++ b/scripts/optimization/pqpnonneg.m
@@ -29,29 +29,33 @@
 ## and @var{d} must be real, and @var{c} must be symmetric and positive
 ## definite.  @var{x0} is an optional initial guess for @var{x}.
 ##
 ## Outputs:
 ## @itemize @bullet
 ## @item minval
 ##
 ## The minimum attained model value, 1/2*xmin'*c*xmin + d'*xmin
+##
 ## @item exitflag
 ##
 ## An indicator of convergence.  0 indicates that the iteration count
 ## was exceeded, and therefore convergence was not reached; >0 indicates
 ## that the algorithm converged.  (The algorithm is stable and will
 ## converge given enough iterations.)
+##
 ## @item output
 ##
 ## A structure with two fields:
 ## @itemize @bullet
 ## @item "algorithm": The algorithm used ("nnls")
+##
 ## @item "iterations": The number of iterations taken.
 ## @end itemize
+##
 ## @item lambda
 ##
 ## Not implemented.
 ## @end itemize
 ## @seealso{optimset, lsqnonneg, qp}
 ## @end deftypefn
 
 ## PKG_ADD: __all_opts__ ("pqpnonneg");
diff --git a/scripts/optimization/qp.m b/scripts/optimization/qp.m
--- a/scripts/optimization/qp.m
+++ b/scripts/optimization/qp.m
@@ -50,18 +50,18 @@
 ##
 ## @example
 ## @group
 ##      A*x = b
 ##      lb <= x <= ub
 ##      A_lb <= A_in*x <= A_ub
 ## @end group
 ## @end example
+##
 ## @end ifnottex
-##
 ## @noindent
 ## using a null-space active-set method.
 ##
 ## Any bound (@var{A}, @var{b}, @var{lb}, @var{ub}, @var{A_lb},
 ## @var{A_ub}) may be set to the empty matrix (@code{[]}) if not
 ## present.  If the initial guess is feasible the algorithm is faster.
 ##
 ## @table @var
@@ -72,35 +72,46 @@
 ## elements that you wish to change from the default.
 ##
 ## @table @code
 ## @item MaxIter (default: 200)
 ## Maximum number of iterations.
 ## @end table
 ## @end table
 ##
-## The value @var{info} is a structure with the following fields:
+## @table @var
+## @item info
+## Structure containing run-time information about the algorithm.  The
+## following fields are defined:
+##
 ## @table @code
 ## @item solveiter
 ## The number of iterations required to find the solution.
+##
 ## @item info
-## An integer indicating the status of the solution, as follows:
+## An integer indicating the status of the solution.
+## 
 ## @table @asis
 ## @item 0
 ## The problem is feasible and convex.  Global solution found.
+##
 ## @item 1
 ## The problem is not convex.  Local solution found.
+##
 ## @item 2
 ## The problem is not convex and unbounded.
+##
 ## @item 3
 ## Maximum number of iterations reached.
+##
 ## @item 6
 ## The problem is infeasible.
 ## @end table
 ## @end table
+## @end table
 ## @end deftypefn
 
 ## PKG_ADD: __all_opts__ ("qp");
 
 function [x, obj, INFO, lambda] = qp (x0, H, varargin)
 
   nargs = nargin;
 
diff --git a/scripts/optimization/sqp.m b/scripts/optimization/sqp.m
--- a/scripts/optimization/sqp.m
+++ b/scripts/optimization/sqp.m
@@ -49,18 +49,18 @@
 ##
 ## @example
 ## @group
 ##      g(x)  = 0
 ##      h(x) >= 0
 ##      lb <= x <= ub
 ## @end group
 ## @end example
+##
 ## @end ifnottex
-##
 ## @noindent
 ## using a successive quadratic programming method.
 ##
 ## The first argument is the initial guess for the vector @var{x}.
 ##
 ## The second argument is a function handle pointing to the objective
 ## function.  The objective function must be of the form
 ##
@@ -114,62 +114,65 @@
 ##
 ## @noindent
 ## in which @var{x} is a vector and @var{r} is a vector.
 ## 
 ## The third and fourth arguments may also be 2-element cell arrays of
 ## function handles.  The first element should point to the constraint
 ## function and the second should point to a function that computes the
 ## gradient of the constraint function:
-##
 ## @tex
 ## $$
 ##  \Bigg( {\partial f(x) \over \partial x_1}, 
 ##         {\partial f(x) \over \partial x_2}, \ldots,
 ##         {\partial f(x) \over \partial x_N} \Bigg)^T
 ## $$
 ## @end tex
 ## @ifnottex
+##
 ## @example
 ## @group
 ##                 [ d f(x)   d f(x)        d f(x) ]
 ##     transpose ( [ ------   -----   ...   ------ ] )
 ##                 [  dx_1     dx_2          dx_N  ]
 ## @end group
 ## @end example
+##
 ## @end ifnottex
-##
 ## The fifth and sixth arguments contain lower and upper bounds
 ## on @var{x}.  These must be consistent with the equality and inequality
 ## constraints @var{g} and @var{h}.  If the arguments are vectors then
 ## @var{x}(i) is bound by @var{lb}(i) and @var{ub}(i).  A bound can also
 ## be a scalar in which case all elements of @var{x} will share the same
 ## bound.  If only one bound (lb, ub) is specified then the other will 
 ## default to (-@var{realmax}, +@var{realmax}).
 ##
 ## The seventh argument specifies the maximum number of iterations.
 ## The default value is 100.
 ##
 ## The eighth argument specifies the tolerance for the stopping criteria.
 ## The default value is @code{eps}.
 ##
 ## The value returned in @var{info} may be one of the following:
+##
 ## @table @asis
 ## @item 101
 ## The algorithm terminated normally.  
 ## Either all constraints meet the requested tolerance, or the stepsize,
 ## @tex
 ## $\Delta x,$
 ## @end tex
 ## @ifnottex
 ## delta @var{x},
 ## @end ifnottex
 ## is less than @code{tol * norm (x)}.
+## 
 ## @item 102
 ## The BFGS update failed.
+## 
 ## @item 103
 ## The maximum number of iterations was reached. 
 ## @end table
 ##
 ## An example of calling @code{sqp}:
 ##
 ## @example
 ## function r = g (x)
diff --git a/scripts/path/pathdef.m b/scripts/path/pathdef.m
--- a/scripts/path/pathdef.m
+++ b/scripts/path/pathdef.m
@@ -20,17 +20,19 @@
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{val} =} pathdef ()
 ## Return the default path for Octave.
 ## The path information is extracted from one of three sources.
 ## In order of preference, those are;
 ##
 ## @enumerate
 ## @item @file{~/.octaverc}
+##
 ## @item @file{<octave-home>/@dots{}/<version>/m/startup/octaverc}
+##
 ## @item Octave's path prior to changes by any octaverc.
 ## @end enumerate
 ## @seealso{path, addpath, rmpath, genpath, savepath, pathsep}
 ## @end deftypefn
 
 function val = pathdef ()
 
   ## Locate the site octaverc file.
diff --git a/scripts/pkg/pkg.m b/scripts/pkg/pkg.m
--- a/scripts/pkg/pkg.m
+++ b/scripts/pkg/pkg.m
@@ -19,21 +19,24 @@
 
 ## -*- texinfo -*-
 ## @deffn  {Command} pkg @var{command} @var{pkg_name}
 ## @deffnx {Command} pkg @var{command} @var{option} @var{pkg_name}
 ## This command interacts with the package manager.  Different actions will
 ## be taken depending on the value of @var{command}.
 ##
 ## @table @samp
+##
 ## @item install
 ## Install named packages.  For example,
+##
 ## @example
 ## pkg install image-1.0.0.tar.gz
 ## @end example
+##
 ## @noindent
 ## installs the package found in the file @file{image-1.0.0.tar.gz}.
 ##
 ## The @var{option} variable can contain options that affect the manner
 ## in which a package is installed.  These options can be one or more of
 ##
 ## @table @code
 ## @item -nodeps
@@ -58,132 +61,165 @@
 ##
 ## @item -verbose
 ## The package manager will print the output of all of the commands that are 
 ## performed.
 ## @end table
 ##
 ## @item uninstall
 ## Uninstall named packages.  For example,
+##
 ## @example
 ## pkg uninstall image
 ## @end example
+##
 ## @noindent
 ## removes the @code{image} package from the system.  If another installed
 ## package depends on the @code{image} package an error will be issued.
 ## The package can be uninstalled anyway by using the @option{-nodeps} option.
+##
 ## @item load
 ## Add named packages to the path.  After loading a package it is
 ## possible to use the functions provided by the package.  For example,
+##
 ## @example
 ## pkg load image
 ## @end example
+##
 ## @noindent
 ## adds the @code{image} package to the path.  It is possible to load all
 ## installed packages at once with the command
+##
 ## @example
 ## pkg load all
 ## @end example
+##
 ## @item unload
 ## Removes named packages from the path.  After unloading a package it is
 ## no longer possible to use the functions provided by the package.
 ## This command behaves like the @code{load} command.
+##
 ## @item list
 ## Show a list of the currently installed packages.  By requesting one or two
 ## output argument it is possible to get a list of the currently installed
 ## packages.  For example,
+##
 ## @example
 ## installed_packages = pkg list;
 ## @end example
+##
 ## @noindent
 ## returns a cell array containing a structure for each installed package.
 ## The command
+##
 ## @example
 ## [@var{user_packages}, @var{system_packages}] = pkg list
 ## @end example
+##
 ## @noindent
 ## splits the list of installed packages into those who are installed by
 ## the current user, and those installed by the system administrator.
+##
 ## @item describe
 ## Show a short description of the named installed packages, with the option
 ## '-verbose' also list functions provided by the package, e.g.:
+##
 ## @example
 ##  pkg describe -verbose all
 ## @end example
+##
 ## @noindent
 ## will describe all installed packages and the functions they provide.
 ## If one output is requested a cell of structure containing the
 ## description and list of functions of each package is returned as
 ## output rather than printed on screen:
+##
 ## @example
 ##  desc = pkg ("describe", "secs1d", "image")
 ## @end example
+##
 ## @noindent
 ## If any of the requested packages is not installed, pkg returns an
 ## error, unless a second output is requested:
+##
 ## @example
 ##  [ desc, flag] = pkg ("describe", "secs1d", "image")
 ## @end example
+##
 ## @noindent
 ## @var{flag} will take one of the values "Not installed", "Loaded" or
 ## "Not loaded" for each of the named packages.
+##
 ## @item prefix
 ## Set the installation prefix directory.  For example,
+##
 ## @example
 ## pkg prefix ~/my_octave_packages
 ## @end example
+##
 ## @noindent
 ## sets the installation prefix to @file{~/my_octave_packages}.
 ## Packages will be installed in this directory.
 ##
 ## It is possible to get the current installation prefix by requesting an
-## output argument.  For example,
+## output argument.  For example:
+##
 ## @example
 ## p = pkg prefix
 ## @end example
 ##
 ## The location in which to install the architecture dependent files can be
-## independent specified with an addition argument.  For example
+## independent specified with an addition argument.  For example:
 ##
 ## @example
 ## pkg prefix ~/my_octave_packages ~/my_arch_dep_pkgs
 ## @end example
+##
 ## @item local_list
 ## Set the file in which to look for information on the locally
 ## installed packages.  Locally installed packages are those that are
-## typically available only to the current user.  For example
+## typically available only to the current user.  For example:
+##
 ## @example
 ## pkg local_list ~/.octave_packages
 ## @end example
+##
 ## It is possible to get the current value of local_list with the following
+##
 ## @example
 ## pkg local_list
 ## @end example
+##
 ## @item global_list
 ## Set the file in which to look for, for information on the globally
 ## installed packages.  Globally installed packages are those that are
-## typically available to all users.  For example
+## typically available to all users.  For example:
+##
 ## @example
 ## pkg global_list /usr/share/octave/octave_packages
 ## @end example
+##
 ## It is possible to get the current value of global_list with the following
+##
 ## @example
 ## pkg global_list
 ## @end example
+##
 ## @item rebuild
 ## Rebuilds the package database from the installed directories.  This can 
 ## be used in cases where for some reason the package database is corrupted.
 ## It can also take the @option{-auto} and @option{-noauto} options to allow the
-## autoloading state of a package to be changed.  For example
+## autoloading state of a package to be changed.  For example,
 ##
 ## @example
 ## pkg rebuild -noauto image
 ## @end example
 ##
 ## will remove the autoloading status of the image package.
+##
 ## @item build
 ## Builds a binary form of a package or packages.  The binary file produced
 ## will itself be an Octave package that can be installed normally with
 ## @code{pkg}.  The form of the command to build a binary package is
 ##
 ## @example
 ## pkg build builddir image-1.0.0.tar.gz @dots{}
 ## @end example
diff --git a/scripts/plot/__marching_cube__.m b/scripts/plot/__marching_cube__.m
--- a/scripts/plot/__marching_cube__.m
+++ b/scripts/plot/__marching_cube__.m
@@ -36,33 +36,33 @@
 ## argument.
 ##
 ## The marching cube algorithm is well known and described, for example, at
 ## Wikipedia.  The triangulation lookup table and the edge table used
 ## here are based on Cory Gene Bloyd's implementation and can be found
 ## beyond other surface and geometry stuff at Paul Bourke's website
 ## @uref{http://local.wasp.uwa.edu.au/~pbourke/geometry/polygonise}.
 ##
-## For example,
+## For example:
 ## @example
 ## @group
 ## N = 20;
 ## lin = linspace(0, 2, N);
 ## [x, y, z] = meshgrid (lin, lin, lin);
 ##
 ## c = (x-.5).^2 + (y-.5).^2 + (z-.5).^2;
 ## [t, p] = __marching_cube__ (x, y, z, c, .5);
 ##
 ## figure ();
 ## trimesh (t, p(:,1), p(:,2), p(:,3));
 ## @end group
 ## @end example
 ##
 ## Instead of the @command{trimesh} function the @command{patch}
-## function can be used to visualize the geometry.  For example,
+## function can be used to visualize the geometry.  For example:
 ##
 ## @example
 ## @group
 ## figure (); view (-38, 20);
 ## pa = patch ("Faces", t, "Vertices", p, "FaceVertexCData", p, \
 ##             "FaceColor", "interp", "EdgeColor", "none");
 ##
 ## ## Revert normals
diff --git a/scripts/plot/axis.m b/scripts/plot/axis.m
--- a/scripts/plot/axis.m
+++ b/scripts/plot/axis.m
@@ -57,65 +57,74 @@
 ## only.
 ##
 ## @noindent
 ## The following options control the aspect ratio of the axes.
 ##
 ## @table @code
 ## @item "square"
 ## Force a square aspect ratio.
+##
 ## @item "equal"
 ## Force x distance to equal y-distance.
+##
 ## @item "normal"
 ## Restore the balance.
 ## @end table
 ##
 ## @noindent
 ## The following options control the way axis limits are interpreted.
 ##
 ## @table @code
 ## @item "auto" 
 ## Set the specified axes to have nice limits around the data
 ## or all if no axes are specified.
+##
 ## @item "manual" 
 ## Fix the current axes limits.
+##
 ## @item "tight"
 ## Fix axes to the limits of the data.
 ## @end table
 ##
 ## @noindent
 ## The option @code{"image"} is equivalent to @code{"tight"} and
 ## @code{"equal"}.
 ##
 ## @noindent
 ## The following options affect the appearance of tic marks.
 ##
 ## @table @code
 ## @item "on" 
 ## Turn tic marks and labels on for all axes.
+##
 ## @item "off"
 ## Turn tic marks off for all axes.
+##
 ## @item "tic[xyz]"
 ## Turn tic marks on for all axes, or turn them on for the
 ## specified axes and off for the remainder.
+##
 ## @item "label[xyz]"
 ## Turn tic labels on for all axes, or turn them on for the 
 ## specified axes and off for the remainder.
+##
 ## @item "nolabel"
 ## Turn tic labels off for all axes.
 ## @end table
 ## Note, if there are no tic marks for an axis, there can be no labels.
 ##
 ## @noindent
 ## The following options affect the direction of increasing values on
 ## the axes.
 ##
 ## @table @code
 ## @item "ij"
 ## Reverse y-axis, so lower values are nearer the top.
+##
 ## @item "xy" 
 ## Restore y-axis, so higher values are nearer the top. 
 ## @end table
 ## 
 ## If an axes handle is passed as the first argument, then operate on
 ## this axes rather than the current axes.
 ## @end deftypefn
 
diff --git a/scripts/plot/colorbar.m b/scripts/plot/colorbar.m
--- a/scripts/plot/colorbar.m
+++ b/scripts/plot/colorbar.m
@@ -19,30 +19,38 @@
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} colorbar (@var{s})
 ## @deftypefnx {Function File} {} colorbar ("peer", @var{h}, @dots{})
 ## Adds a colorbar to the current axes.  Valid values for @var{s} are
 ##
 ## @table @asis
 ## @item "EastOutside"
 ## Place the colorbar outside the plot to the right.  This is the default.
+##
 ## @item "East"
 ## Place the colorbar inside the plot to the right.
+##
 ## @item "WestOutside"
 ## Place the colorbar outside the plot to the left.
+##
 ## @item "West"
 ## Place the colorbar inside the plot to the left.
+##
 ## @item "NorthOutside"
 ## Place the colorbar above the plot.
+##
 ## @item "North"
 ## Place the colorbar at the top of the plot.
+##
 ## @item "SouthOutside"
 ## Place the colorbar under the plot.
+##
 ## @item "South"
 ## Place the colorbar at the bottom of the plot.
+##
 ## @item "Off", "None"
 ## Remove any existing colorbar from the plot.
 ## @end table
 ##
 ## If the argument "peer" is given, then the following argument is treated
 ## as the axes handle on which to add the colorbar.
 ## @end deftypefn
 
diff --git a/scripts/plot/contourc.m b/scripts/plot/contourc.m
--- a/scripts/plot/contourc.m
+++ b/scripts/plot/contourc.m
@@ -37,17 +37,17 @@
 ## length of @var{lenn}.
 ## 
 ## If @var{x} and @var{y} are omitted they are taken as the row/column 
 ## index of @var{z}.  @var{vn} is either a scalar denoting the number of lines 
 ## to compute or a vector containing the values of the lines.  If only one 
 ## value is wanted, set @code{@var{vn} = [val, val]};
 ## If @var{vn} is omitted it defaults to 10.
 ##
-## For example,
+## For example:
 ## @example
 ## @group
 ## x = 0:2;
 ## y = x;
 ## z = x' * y;
 ## contourc (x, y, z, 2:3)
 ##      @result{}   2.0000   2.0000   1.0000   3.0000   1.5000   2.0000
 ##      2.0000   1.0000   2.0000   2.0000   2.0000   1.5000
diff --git a/scripts/plot/contourf.m b/scripts/plot/contourf.m
--- a/scripts/plot/contourf.m
+++ b/scripts/plot/contourf.m
@@ -42,16 +42,17 @@
 ## @var{lvl} to [lvl0, lvl0].  If both @var{n} or @var{lvl} are omitted
 ## a default value of 10 contour level is assumed.
 ##
 ## If provided, the filled contours are added to the axes object
 ## @var{ax} instead of the current axis.
 ##
 ## The following example plots filled contours of the @code{peaks}
 ## function.
+##
 ## @example
 ## @group
 ## [x, y, z] = peaks (50);
 ## contourf (x, y, z, -7:9)
 ## @end group
 ## @end example
 ## @seealso{contour, contourc, patch}
 ## @end deftypefn
diff --git a/scripts/plot/cylinder.m b/scripts/plot/cylinder.m
--- a/scripts/plot/cylinder.m
+++ b/scripts/plot/cylinder.m
@@ -30,16 +30,17 @@
 ## are assumed.
 ##
 ## Called with no return arguments, @code{cylinder} calls directly
 ## @code{surf (@var{x}, @var{y}, @var{z})}.  If an axes handle @var{ax}
 ## is passed as the first argument, the surface is plotted to this set
 ## of axes.
 ##
 ## Examples:
+##
 ## @example
 ## @group
 ## disp ("plotting a cone")
 ## [x, y, z] = cylinder (10:-1:0,50);
 ## surf (x, y, z);
 ## @end group
 ## @end example
 ## @seealso{sphere}
diff --git a/scripts/plot/ezplot.m b/scripts/plot/ezplot.m
--- a/scripts/plot/ezplot.m
+++ b/scripts/plot/ezplot.m
@@ -27,17 +27,17 @@
 ## Plots in two-dimensions the curve defined by @var{f}.  The function
 ## @var{f} may be a string, inline function or function handle and can
 ## have either one or two variables.  If @var{f} has one variable, then 
 ## the function is plotted over the domain @code{-2*pi < @var{x} < 2*pi}  
 ## with 500 points. 
 ##
 ## If @var{f} has two variables then @code{@var{f}(@var{x},@var{y}) = 0}
 ## is calculated over the meshed domain @code{-2*pi < @var{x} | @var{y}
-## < 2*pi} with 60 by 60 in the mesh.  For example
+## < 2*pi} with 60 by 60 in the mesh.  For example:
 ##
 ## @example
 ## ezplot (@@(@var{x}, @var{y}) @var{x} .^ 2 - @var{y} .^ 2 - 1)
 ## @end example
 ##
 ## If two functions are passed as strings, inline functions or function
 ## handles, then the parametric function
 ##
diff --git a/scripts/plot/isocolors.m b/scripts/plot/isocolors.m
--- a/scripts/plot/isocolors.m
+++ b/scripts/plot/isocolors.m
@@ -38,17 +38,17 @@
 ## are taken.
 ##
 ## Optionally, the patch handle @var{p} can be given as the last input
 ## argument to all variations of function calls instead of the vertices
 ## data @var{v}.  Finally, if no output argument is given then directly
 ## change the colors of a patch that is given by the patch handle
 ## @var{p}.
 ##
-## For example,
+## For example:
 ## @example
 ## function [] = isofinish (p)
 ##   set (gca, "PlotBoxAspectRatioMode", "manual", \
 ##        "PlotBoxAspectRatio", [1 1 1]);
 ##   set (p, "FaceColor", "interp");
 ##   ## set (p, "FaceLighting", "flat");
 ##   ## light ("Position", [1 1 5]); ## Available with JHandles
 ## endfunction
diff --git a/scripts/plot/isonormals.m b/scripts/plot/isonormals.m
--- a/scripts/plot/isonormals.m
+++ b/scripts/plot/isonormals.m
@@ -36,17 +36,17 @@
 ## function.
 ##
 ## If given the string input argument "negate" as last input argument
 ## then compute the reverse vector normals of an isosurface geometry.
 ##
 ## If no output argument is given then directly redraw the patch that is
 ## given by the patch handle @var{p}.
 ##
-## For example,
+## For example:
 ## @example
 ## function [] = isofinish (p)
 ##   set (gca, "PlotBoxAspectRatioMode","manual","PlotBoxAspectRatio",[1 1 1]);
 ##   set (p, "VertexNormals", -get(p,"VertexNormals")); ## Revert normals
 ##   set (p, "FaceColor", "interp");
 ##   ## set (p, "FaceLighting", "phong");
 ##   ## light ("Position", [1 1 5]); ## Available with JHandles
 ## endfunction
diff --git a/scripts/plot/legend.m b/scripts/plot/legend.m
--- a/scripts/plot/legend.m
+++ b/scripts/plot/legend.m
@@ -34,51 +34,66 @@
 ## then the legend's strings will be associated with the axes' descendants.
 ## Legend works on line graphs, bar graphs, etc.
 ## A plot must exist before legend is called.
 ##
 ## The optional parameter @var{pos} specifies the location of the legend
 ## as follows:
 ##
 ## @multitable @columnfractions 0.06 0.14 0.80
+##
 ## @item @tab north @tab
 ##   center top
+##
 ## @item @tab south @tab
 ##   center bottom
+##
 ## @item @tab east @tab
 ##   right center
+##
 ## @item @tab west @tab
 ##   left center
+##
 ## @item @tab northeast @tab
 ##   right top (default)
+##
 ## @item @tab northwest @tab
 ##   left top
+##
 ## @item @tab southeast @tab
 ##   right bottom
+##
 ## @item @tab southwest @tab
 ##   left bottom
+##
 ## @item 
+##
 ## @item @tab outside @tab
 ##   can be appended to any location string
 ## @end multitable
 ##
 ## The following customizations are available using @var{option}:
 ##
 ## @table @asis
 ## @item "show"
 ##   Show legend on the plot
+##
 ## @item "hide"
 ## @itemx "off"
 ##   Hide legend on the plot
+##
 ## @item "boxon"
 ##   Show a box around legend
+##
 ## @item "boxoff"
 ##   Hide the box around legend
+##
 ## @item "left"
 ##   Place text to the left of the keys
+##
 ## @item "right"
 ##   Place text to the right of the keys
 ## @end table
 ## @end deftypefn
 
 function legend (varargin)
 
   [ca, varargin, nargin] = __plt_get_axis_arg__ ("legend", varargin{:});
diff --git a/scripts/plot/print.m b/scripts/plot/print.m
--- a/scripts/plot/print.m
+++ b/scripts/plot/print.m
@@ -31,108 +31,134 @@
 ## @var{h} specifies the figure handle.  If no handle is specified
 ## the handle for the current figure is used.
 ##
 ## @var{options}:
 ## @table @code
 ## @item -P@var{printer}
 ##   Set the @var{printer} name to which the graph is sent if no
 ##   @var{filename} is specified.
+##
 ## @item -G@var{ghostscript_command}
 ##   Specify the command for calling Ghostscript.  For Unix and Windows,
 ## the defaults are 'gs' and 'gswin32c', respectively.
+##
 ## @item -color
 ## @itemx -mono
 ##   Monochrome or color lines.
+##
 ## @item -solid
 ## @itemx -dashed
 ##   Solid or dashed lines.
+##
 ## @item -portrait
 ## @itemx -landscape
 ##   Specify the orientation of the plot for printed output.
+##
 ## @item -d@var{device}
 ##   Output device, where @var{device} is one of:
 ##   @table @code
 ##   @item ps
 ##   @itemx ps2
 ##   @itemx psc
 ##   @itemx psc2
 ##     Postscript (level 1 and 2, mono and color)
+##
 ##   @item eps
 ##   @itemx eps2
 ##   @itemx epsc
 ##   @itemx epsc2
 ##     Encapsulated postscript (level 1 and 2, mono and color)
 ##   @item tex
 ##   @itemx epslatex
 ##   @itemx epslatexstandalone
 ##   @itemx pstex
 ##   @itemx pslatex
 ##     Generate a @LaTeX{} (or @TeX{}) file for labels, and eps/ps for
 ## graphics.  The file produced by @code{epslatexstandalone} can be
 ## processed directly by @LaTeX{}.  The other formats are intended to
 ## be included in a @LaTeX{} (or @TeX{}) document.  The @code{tex} device
 ## is the same as the @code{epslatex} device.
+##
 ##   @item tikz
 ##     Generate a @LaTeX{} file using gnuplot's Lua/TikZ terminal.
+##
 ##   @item ill
 ##   @itemx aifm
 ##     Adobe Illustrator
+##
 ##   @item cdr
 ##   @itemx @nospell{corel}
 ##     CorelDraw
+##
 ##   @item dxf
 ##     AutoCAD
+##
 ##   @item emf
 ##   @itemx meta
 ##     Microsoft Enhanced Metafile
+##
 ##   @item fig
 ##     XFig.  If this format is selected the additional options
 ##     @option{-textspecial} or @option{-textnormal} can be used to control
 ##     whether the special flag should be set for the text in
 ##     the figure (default is @option{-textnormal}). 
+##
 ##   @item hpgl
 ##     HP plotter language
+##
 ##   @item mf
 ##     Metafont
+##
 ##   @item png
 ##     Portable network graphics
+##
 ##   @item jpg
 ##   @itemx jpeg
 ##     JPEG image
+##
 ##   @item gif
 ##     GIF image
+##
 ##   @item pbm
 ##     PBMplus
+##
 ##   @item svg
 ##     Scalable vector graphics
+##
 ##   @item pdf
 ##     Portable document format
 ##   @end table
 ##
 ##   If the device is omitted, it is inferred from the file extension,
 ## or if there is no filename it is sent to the printer as postscript.
 ##
 ## @item -d@var{ghostscript_device}
 ##   Additional devices are supported by Ghostscript.
 ## Some examples are;
 ##
 ##   @table @code
 ##   @item ljet2p 
 ##     HP LaserJet IIP
+##
 ##   @item ljet3 
 ##     HP LaserJet III
+##
 ##   @item deskjet
 ##     HP DeskJet and DeskJet Plus
+##
 ##   @item cdj550
 ##     HP DeskJet 550C
+##
 ##   @item paintjet
 ##     HP PointJet
+##
 ##   @item pcx24b
 ##     24-bit color PCX file format
+##
 ##   @item ppm
 ##     Portable Pixel Map file format
 ##   @end table
 ##
 ##   For a complete list, type `system ("gs -h")' to see what formats
 ## and devices are available.
 ##
 ##   When Ghostscript output is sent to a printer the size is determined
diff --git a/scripts/plot/refreshdata.m b/scripts/plot/refreshdata.m
--- a/scripts/plot/refreshdata.m
+++ b/scripts/plot/refreshdata.m
@@ -23,16 +23,17 @@
 ## Evaluate any @samp{datasource} properties of the current figure and update
 ## the plot if the corresponding data has changed.  If called with one or more
 ## arguments @var{h} is a scalar or array of figure handles to refresh.  The
 ## optional second argument @var{workspace} can take the following values.
 ##
 ## @table @code
 ## @item "base"
 ## Evaluate the datasource properties in the base workspace.  (default).
+##
 ## @item "caller"
 ## Evaluate the datasource properties in the workspace of the function
 ## that called @code{refreshdata}.
 ## @end table
 ##
 ## An example of the use of @code{refreshdata} is:
 ##
 ## @example
diff --git a/scripts/plot/slice.m b/scripts/plot/slice.m
--- a/scripts/plot/slice.m
+++ b/scripts/plot/slice.m
@@ -37,30 +37,34 @@
 ## @code{x = 1:size (@var{v}, 2)}, @code{y = 1:size (@var{v}, 1)} and
 ## @code{z = 1:size (@var{v}, 3)}. 
 ##
 ## @var{Method} is one of:
 ##
 ## @table @code
 ## @item "nearest"
 ## Return the nearest neighbor.
+##
 ## @item "linear"
 ## Linear interpolation from nearest neighbors.
+##
 ## @item "cubic"
 ## Cubic interpolation from four nearest neighbors (not implemented yet).
+##
 ## @item "spline"
 ## Cubic spline interpolation---smooth first and second derivatives
 ## throughout the curve.
 ## @end table
 ##
 ## The default method is @code{"linear"}.
 ## The optional return value @var{h} is a vector of handles to the
 ## surface graphic objects.
 ##
 ## Examples:
+##
 ## @example
 ## @group
 ## [x, y, z] = meshgrid (linspace (-8, 8, 32));
 ## v = sin (sqrt (x.^2 + y.^2 + z.^2)) ./ (sqrt (x.^2 + y.^2 + z.^2));
 ## slice (x, y, z, v, [], 0, []);
 ## [xi, yi] = meshgrid (linspace (-7, 7));
 ## zi = xi + yi;
 ## slice (x, y, z, v, xi, yi, zi);
diff --git a/scripts/plot/subplot.m b/scripts/plot/subplot.m
--- a/scripts/plot/subplot.m
+++ b/scripts/plot/subplot.m
@@ -37,28 +37,27 @@
 ## \hfil\vbox{\offinterlineskip\hrule
 ## \halign{\vrule#&&\qquad\hfil#\hfil\qquad\vrule\cr
 ## height13pt&1&2&3\cr height12pt&&&\cr\noalign{\hrule}
 ## height13pt&4&5&6\cr height12pt&&&\cr\noalign{\hrule}}}
 ## \hfil
 ## \vskip 10pt
 ## @end tex
 ## @ifnottex
-## @display
+##
 ## @example
 ## @group
-##
 ## +-----+-----+-----+
 ## |  1  |  2  |  3  |
 ## +-----+-----+-----+
 ## |  4  |  5  |  6  |
 ## +-----+-----+-----+
 ## @end group
 ## @end example
-## @end display
+##
 ## @end ifnottex
 ## @seealso{plot}
 ## @end deftypefn
 
 ## Author: Vinayak Dutt <Dutt.Vinayak@mayo.EDU>
 ## Adapted-By: jwe
 
 function h = subplot (rows, columns, index)
diff --git a/scripts/plot/surfl.m b/scripts/plot/surfl.m
--- a/scripts/plot/surfl.m
+++ b/scripts/plot/surfl.m
@@ -35,18 +35,21 @@
 ## vector [lx, ly, lz].
 ## The default value is rotated 45° counter-clockwise from the current view.
 ##
 ## The material properties of the surface can specified using a 4-element vector
 ## @var{P} = [@var{AM} @var{D} @var{SP} @var{exp}] which defaults to
 ## @var{p} = [0.55 0.6 0.4 10]. 
 ## @table @code
 ## @item "AM" strength of ambient light
+##
 ## @item "D" strength of diffuse reflection
+##
 ## @item "SP" strength of specular reflection
+##
 ## @item "EXP" specular exponent
 ## @end table
 ## 
 ## The default lighting mode "cdata", changes the cdata property to give the
 ## impression
 ## of a lighted surface.  Please note: the alternative "light" mode, which
 ## creates a light
 ## object to illuminate the surface is not implemented (yet).
diff --git a/scripts/polynomial/compan.m b/scripts/polynomial/compan.m
--- a/scripts/polynomial/compan.m
+++ b/scripts/polynomial/compan.m
@@ -42,18 +42,18 @@
 ##     |       1            0      @dots{}       0             0      |
 ##     |       0            1      @dots{}       0             0      |
 ## A = |       .            .      .         .             .      |
 ##     |       .            .       .        .             .      |
 ##     |       .            .        .       .             .      |
 ##     |_      0            0      @dots{}       1             0     _|
 ## @end group
 ## @end smallexample
+##
 ## @end ifnottex
-##
 ## The eigenvalues of the companion matrix are equal to the roots of the
 ## polynomial.
 ## @seealso{poly, roots, residue, conv, deconv, polyval, polyderiv,
 ## polyint}
 ## @end deftypefn
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: June 1994
diff --git a/scripts/polynomial/mpoles.m b/scripts/polynomial/mpoles.m
--- a/scripts/polynomial/mpoles.m
+++ b/scripts/polynomial/mpoles.m
@@ -27,17 +27,17 @@
 ## they are considered to be multiples.  The default value for @var{tol}
 ## is 0.001.
 ##
 ## If the optional parameter @var{reorder} is zero, poles are not sorted.
 ##
 ## The value @var{multp} is a vector specifying the multiplicity of the
 ## poles.  @var{multp}(:) refers to multiplicity of @var{p}(@var{indx}(:)).
 ##
-## For example,
+## For example:
 ##
 ## @example
 ## @group
 ## p = [2 3 1 1 2];
 ## [m, n] = mpoles(p);
 ##   @result{} m = [1; 1; 2; 1; 2]
 ##   @result{} n = [2; 5; 1; 4; 3]
 ##   @result{} p(n) = [3, 2, 2, 1, 1]
diff --git a/scripts/polynomial/poly.m b/scripts/polynomial/poly.m
--- a/scripts/polynomial/poly.m
+++ b/scripts/polynomial/poly.m
@@ -20,28 +20,31 @@
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} poly (@var{a})
 ## @deftypefnx {Function File} {} poly (@var{x})
 ## If @var{a} is a square @math{N}-by-@math{N} matrix, @code{poly (@var{a})}
 ## is the row vector of the coefficients of @code{det (z * eye (N) - a)},
 ## the characteristic polynomial of @var{a}.  For example, 
 ## the following code finds the eigenvalues of @var{a} which are the roots of 
 ## @code{poly (@var{a})}.
+##
 ## @example
 ## @group
 ## roots(poly(eye(3)))
-## @result{} 1.00000 + 0.00000i
-## @result{} 1.00000 - 0.00000i
-## @result{} 1.00000 + 0.00000i
+## @result{} 1.00001 + 0.00001i
+## @result{} 1.00001 - 0.00001i
+## @result{} 0.99999 + 0.00000i
 ## @end group
 ## @end example
-## For numerical performance, however, the @code{eig} function
-## should be used for computing eigenvalues.
 ##
-## If @var{x} is a vector, @code{poly (@var{x})} is a vector of coefficients
+## In fact, all three eigenvalues are exactly 1 which emphasizes that for 
+## numerical performance the @code{eig} function should be used to compute
+## eigenvalues.
+##
+## If @var{x} is a vector, @code{poly (@var{x})} is a vector of the coefficients
 ## of the polynomial whose roots are the elements of @var{x}.  That is,
 ## if @var{c} is a polynomial, then the elements of 
 ## @code{@var{d} = roots (poly (@var{c}))} are contained in @var{c}.
 ## The vectors @var{c} and @var{d} are not identical, however, due to sorting
 ## and numerical errors.
 ## @seealso{eig, roots}
 ## @end deftypefn
 
diff --git a/scripts/polynomial/polyaffine.m b/scripts/polynomial/polyaffine.m
--- a/scripts/polynomial/polyaffine.m
+++ b/scripts/polynomial/polyaffine.m
@@ -12,38 +12,39 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with this program; If not, see <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} polyaffine (@var{f}, @var{mu})
 ## Return the coefficients of the polynomial whose coefficients are given by
 ## vector @var{f} after an affine tranformation.  If @var{f} is the vector
-## representing the polynomial f(x), then @var{g} = polytrans (@var{f},
-## @var{mu}) is the vector representing 
+## representing the polynomial f(x), then @code{@var{g} = polyaffine (@var{f},
+## @var{mu})} is the vector representing 
+##
 ## @example
 ## g(x) = f((x-@var{mu}(1))/@var{mu}(2)).
 ## @end example
 ## 
 ## @seealso{polyval}
 ## @end deftypefn
 
 
 function g = polyaffine (f, mu)
 
    if (nargin != 2)
       print_usage ();
    endif
 
    if (! isvector (f))
-      error ("polyaffine: first argument must be a vector.");
+      error ("polyaffine: F must be a vector.");
    endif
 
    if (! isvector (mu) || length (mu) != 2)
-      error ("polyaffine: second argument must be a two-element vector.");
+      error ("polyaffine: MU must be a two-element vector.");
    endif
 
    lf = length (f);
 
    ## Ensure that f is a row vector
    if (rows (f) > 1)
       f = f.';
    endif
diff --git a/scripts/polynomial/polyfit.m b/scripts/polynomial/polyfit.m
--- a/scripts/polynomial/polyfit.m
+++ b/scripts/polynomial/polyfit.m
@@ -26,22 +26,26 @@
 ##
 ## The polynomial coefficients are returned in a row vector.
 ##
 ## The second output is a structure containing the following fields:
 ##
 ## @table @samp
 ## @item R
 ## Triangular factor R from the QR decomposition.
+##
 ## @item X
 ## The Vandermonde matrix used to compute the polynomial coefficients.
+##
 ## @item df
 ## The degrees of freedom.
+##
 ## @item normr
 ## The norm of the residuals.
+##
 ## @item yf
 ## The values of the polynomial for each value of @var{x}.
 ## @end table
 ##
 ## The second output may be used by @code{polyval} to calculate the 
 ## statistical error limits of the predicted values.
 ##
 ## When the third output, @var{mu}, is present the 
diff --git a/scripts/polynomial/polygcd.m b/scripts/polynomial/polygcd.m
--- a/scripts/polynomial/polygcd.m
+++ b/scripts/polynomial/polygcd.m
@@ -12,29 +12,29 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {@var{q} =} polygcd (@var{b}, @var{a}, @var{tol})
+## @deftypefn  {Function File} {@var{q} =} polygcd (@var{b}, @var{a})
+## @deftypefnx {Function File} {@var{q} =} polygcd (@var{b}, @var{a}, @var{tol})
 ##
-## Find greatest common divisor of two polynomials.  This is equivalent
+## Find the greatest common divisor of two polynomials.  This is equivalent
 ## to the polynomial found by multiplying together all the common roots.
 ## Together with deconv, you can reduce a ratio of two polynomials.
-## Tolerance defaults to 
-## @example 
-## sqrt(eps).
-## @end example
-##  Note that this is an unstable
-## algorithm, so don't try it on large polynomials.
+## Tolerance defaults to @code{sqrt(eps)}.
 ##
-## Example
+## Note that this is a numerically unstable algorithm, and should not be used
+## on large polynomials.
+##
+## Example:
+##
 ## @example
 ## @group
 ## polygcd (poly(1:8), poly(3:12)) - poly(3:8)
 ## @result{} [ 0, 0, 0, 0, 0, 0, 0 ]
 ## deconv (poly(1:8), polygcd (poly(1:8), poly(3:12))) ...
 ##   - poly(1:2)
 ## @result{} [ 0, 0, 0 ]
 ## @end group
diff --git a/scripts/polynomial/polyout.m b/scripts/polynomial/polyout.m
--- a/scripts/polynomial/polyout.m
+++ b/scripts/polynomial/polyout.m
@@ -21,19 +21,21 @@
 ## @deftypefn  {Function File} {} polyout (@var{c})
 ## @deftypefnx {Function File} {} polyout (@var{c}, @var{x})
 ## @deftypefnx {Function File} {@var{str} =} polyout (@dots{})
 ## Write formatted polynomial
 ## @tex
 ## $$ c(x) = c_1 x^n + \ldots + c_n x + c_{n+1} $$
 ## @end tex
 ## @ifnottex
+##
 ## @example
 ##    c(x) = c(1) * x^n + @dots{} + c(n) x + c(n+1)
 ## @end example
+##
 ## @end ifnottex
 ## and return it as a string or write it to the screen (if
 ## @var{nargout} is zero).
 ## @var{x} defaults to the string @code{"s"}.
 ## @seealso{polyval, polyvalm, poly, roots, conv, deconv, residue,
 ## filter, polyderiv, polyint}
 ## @end deftypefn
 
diff --git a/scripts/polynomial/residue.m b/scripts/polynomial/residue.m
--- a/scripts/polynomial/residue.m
+++ b/scripts/polynomial/residue.m
@@ -17,34 +17,33 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{r}, @var{p}, @var{k}, @var{e}] =} residue (@var{b}, @var{a})
 ## Compute the partial fraction expansion for the quotient of the
 ## polynomials, @var{b} and @var{a}.
-##
 ## @tex
 ## $$
 ## {B(s)\over A(s)} = \sum_{m=1}^M {r_m\over (s-p_m)^e_m}
 ##   + \sum_{i=1}^N k_i s^{N-i}.
 ## $$
 ## @end tex
 ## @ifnottex
 ##
 ## @example
 ## @group
 ##  B(s)    M       r(m)         N
 ##  ---- = SUM -------------  + SUM k(i)*s^(N-i)
 ##  A(s)   m=1 (s-p(m))^e(m)    i=1
 ## @end group
 ## @end example
+##
 ## @end ifnottex
-##
 ## @noindent
 ## where @math{M} is the number of poles (the length of the @var{r},
 ## @var{p}, and @var{e}), the @var{k} vector is a polynomial of order @math{N-1}
 ## representing the direct contribution, and the @var{e} vector specifies
 ## the multiplicity of the m-th residue's pole.
 ##
 ## For example,
 ##
@@ -82,30 +81,30 @@
 ## @deftypefnx {Function File} {[@var{b}, @var{a}] =} residue (@var{r}, @var{p}, @var{k})
 ## @deftypefnx {Function File} {[@var{b}, @var{a}] =} residue (@var{r}, @var{p}, @var{k}, @var{e})
 ## Compute the reconstituted quotient of polynomials,
 ## @var{b}(s)/@var{a}(s), from the partial fraction expansion;
 ## represented by the residues, poles, and a direct polynomial specified
 ## by @var{r}, @var{p} and @var{k}, and the pole multiplicity @var{e}.
 ##
 ## If the multiplicity, @var{e}, is not explicitly specified the multiplicity is
-## determined by the script mpoles.m.
+## determined by the function @code{mpoles}.
 ##
-## For example,
+## For example:
 ##
 ## @example
 ## @group
 ## r = [-2; 7; 3];
 ## p = [2; 2; 1];
 ## k = [1, 0];
 ## [b, a] = residue (r, p, k);
 ##      @result{} b = [1, -5, 9, -3, 1]
 ##      @result{} a = [1, -5, 8, -4]
 ##
-## where mpoles.m is used to determine e = [1; 2; 1]
+## where mpoles is used to determine e = [1; 2; 1]
 ##
 ## @end group
 ## @end example
 ##
 ## Alternatively the multiplicity may be defined explicitly, for example,
 ##
 ## @example
 ## @group
@@ -130,16 +129,17 @@
 ##
 ## @example
 ## @group
 ##     -2        7        3         s^4 - 5s^3 + 9s^2 - 3s + 1
 ##    ----- + ------- + ----- + s = --------------------------
 ##    (s-2)   (s-2)^2   (s-1)          s^3 - 5s^2 + 8s - 4
 ## @end group
 ## @end example
+##
 ## @end ifnottex
 ## @seealso{poly, roots, conv, deconv, mpoles, polyval, polyderiv, polyint}
 ## @end deftypefn
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Author: Ben Abbott <bpabbott@mac.com>
 ## Created: June 1994
 ## Adapted-By: jwe
diff --git a/scripts/polynomial/roots.m b/scripts/polynomial/roots.m
--- a/scripts/polynomial/roots.m
+++ b/scripts/polynomial/roots.m
@@ -27,36 +27,41 @@
 ## v_1 z^{N-1} + \cdots + v_{N-1} z + v_N.
 ## $$
 ## @end tex
 ## @ifnottex
 ##
 ## @example
 ## v(1) * z^(N-1) + @dots{} + v(N-1) * z + v(N)
 ## @end example
+##
 ## @end ifnottex
 ##
 ## As an example, the following code finds the roots of the quadratic
 ## polynomial
 ## @tex
 ## $$ p(x) = x^2 - 5. $$
 ## @end tex
 ## @ifnottex
+##
 ## @example
 ## p(x) = x^2 - 5.
 ## @end example
+##
 ## @end ifnottex
+##
 ## @example
 ## @group
 ## c = [1, 0, -5];
 ## roots(c)
 ## @result{}  2.2361
 ## @result{} -2.2361
 ## @end group
 ## @end example
+##
 ## Note that the true result is
 ## @tex
 ## $\pm \sqrt{5}$
 ## @end tex
 ## @ifnottex
 ## @math{+/- sqrt(5)}
 ## @end ifnottex
 ## which is roughly
@@ -122,16 +127,16 @@ endfunction
 %!assert(all (all (abs (roots ([1, -6, 11, -6]) - [3; 2; 1]) < sqrt (eps))));
 
 %!assert(isempty (roots ([])));
 
 %!error roots ([1, 2; 3, 4]);
  
 %!assert(isempty (roots (1)));
 
- %!error roots ([1, 2; 3, 4]);
+%!error roots ([1, 2; 3, 4]);
  
 %!error roots ([1 Inf 1]);
 
 %!error roots ([1 NaN 1]);
 
 %!assert(roots ([1e-200, -1e200, 1]), 1e-200)
 %!assert(roots ([1e-200, -1e200 * 1i, 1]), -1e-200 * 1i)
diff --git a/scripts/polynomial/unmkpp.m b/scripts/polynomial/unmkpp.m
--- a/scripts/polynomial/unmkpp.m
+++ b/scripts/polynomial/unmkpp.m
@@ -20,26 +20,30 @@
 ## @deftypefn {Function File} {[@var{x}, @var{p}, @var{n}, @var{k}, @var{d}] =} unmkpp (@var{pp})
 ##
 ## Extract the components of a piece-wise polynomial structure @var{pp}.
 ## These are as follows:
 ##
 ## @table @asis
 ## @item @var{x}
 ## Sample points.
+##
 ## @item @var{p}
 ## Polynomial coefficients for points in sample interval.  @code{@var{p}
 ## (@var{i}, :)} contains the coefficients for the polynomial over
 ## interval @var{i} ordered from highest to lowest.  If @code{@var{d} >
 ## 1}, @code{@var{p} (@var{r}, @var{i}, :)} contains the coefficients for 
 ## the r-th polynomial defined on interval @var{i}.
+##
 ## @item @var{n}
 ## Number of polynomial pieces.
+##
 ## @item @var{k}
 ## Order of the polynomial plus 1.
+##
 ## @item @var{d}
 ## Number of polynomials defined for each interval.
 ## @end table
 ##
 ## @seealso{mkpp, ppval, spline}
 ## @end deftypefn
 
 function [x, P, n, k, d] = unmkpp (pp)
diff --git a/scripts/set/union.m b/scripts/set/union.m
--- a/scripts/set/union.m
+++ b/scripts/set/union.m
@@ -18,28 +18,29 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} union (@var{a}, @var{b})
 ## @deftypefnx {Function File} {} union (@var{a}, @var{b}, "rows")
 ## Return the set of elements that are in either of the sets @var{a} and
 ## @var{b}.  @var{a}, @var{b} may be cell arrays of string(s).
-## For example,
+## For example:
 ##
 ## @example
 ## @group
 ## union ([1, 2, 4], [2, 3, 5])
 ##      @result{} [1, 2, 3, 4, 5]
 ## @end group
 ## @end example
 ##
 ## If the optional third input argument is the string "rows" each row of
 ## the matrices @var{a} and @var{b} will be considered an element of sets.
-## For example,
+## For example:
+##
 ## @example
 ## @group
 ## union([1, 2; 2, 3], [1, 2; 3, 4], "rows")
 ##      @result{}  1   2
 ##     2   3
 ##     3   4
 ## @end group
 ## @end example
diff --git a/scripts/signal/filter2.m b/scripts/signal/filter2.m
--- a/scripts/signal/filter2.m
+++ b/scripts/signal/filter2.m
@@ -21,18 +21,20 @@
 ## @deftypefnx {Function File} {@var{y} =} filter2 (@var{b}, @var{x}, @var{shape})
 ## Apply the 2-D FIR filter @var{b} to @var{x}.  If the argument
 ## @var{shape} is specified, return an array of the desired shape.
 ## Possible values are: 
 ##
 ## @table @asis
 ## @item 'full'
 ## pad @var{x} with zeros on all sides before filtering.
+##
 ## @item 'same'
 ## unpadded @var{x} (default)
+##
 ## @item 'valid'
 ## trim @var{x} after filtering so edge effects are no included.
 ## @end table
 ##
 ## Note this is just a variation on convolution, with the parameters
 ## reversed and @var{b} rotated 180 degrees.
 ## @seealso{conv2}
 ## @end deftypefn
diff --git a/scripts/signal/stft.m b/scripts/signal/stft.m
--- a/scripts/signal/stft.m
+++ b/scripts/signal/stft.m
@@ -24,18 +24,20 @@
 ## points and an increment of @var{inc} points.
 ##
 ## Before computing the Fourier transform, one of the following windows
 ## is applied:
 ##
 ## @table @asis
 ## @item @nospell{hanning}
 ## w_type = 1
+##
 ## @item @nospell{hamming}
 ## w_type = 2
+##
 ## @item rectangle
 ## w_type = 3
 ## @end table
 ##
 ## The window names can be passed as strings or by the @var{w_type} number.
 ##
 ## If not all arguments are specified, the following defaults are used:
 ## @var{win_size} = 80, @var{inc} = 24, @var{num_coef} = 64, and
diff --git a/scripts/sparse/spdiags.m b/scripts/sparse/spdiags.m
--- a/scripts/sparse/spdiags.m
+++ b/scripts/sparse/spdiags.m
@@ -32,17 +32,17 @@
 ## @var{a} is defined then the diagonals of this matrix are replaced.
 ## Otherwise a matrix of @var{m} by @var{n} is created with the
 ## diagonals given by @var{v}.
 ##
 ## Negative values of @var{c} represent diagonals below the main
 ## diagonal, and positive values of @var{c} diagonals above the main
 ## diagonal.
 ##
-## For example
+## For example:
 ##
 ## @example
 ## @group
 ## spdiags (reshape (1:12, 4, 3), [-1 0 1], 5, 4)
 ## @result{}    5 10  0  0
 ##       1  6 11  0
 ##       0  2  7 12
 ##       0  0  3  8
diff --git a/scripts/specfun/bessel.m b/scripts/specfun/bessel.m
--- a/scripts/specfun/bessel.m
+++ b/scripts/specfun/bessel.m
@@ -24,27 +24,31 @@
 ## @deftypefnx {Loadable Function} {[@var{k}, @var{ierr}] =} besselk (@var{alpha}, @var{x}, @var{opt})
 ## @deftypefnx {Loadable Function} {[@var{h}, @var{ierr}] =} besselh (@var{alpha}, @var{k}, @var{x}, @var{opt})
 ## Compute Bessel or Hankel functions of various kinds:
 ## 
 ## @table @code
 ## @item besselj
 ## Bessel functions of the first kind.  If the argument @var{opt} is supplied, 
 ## the result is multiplied by @code{exp(-abs(imag(x)))}.
+##
 ## @item bessely
 ## Bessel functions of the second kind.  If the argument @var{opt} is supplied,
 ## the result is multiplied by @code{exp(-abs(imag(x)))}.
+##
 ## @item besseli
 ## Modified Bessel functions of the first kind.  If the argument @var{opt} is
 ## supplied,
 ## the result is multiplied by @code{exp(-abs(real(x)))}.
+##
 ## @item besselk
 ## Modified Bessel functions of the second kind.  If the argument @var{opt} is
 ## supplied,
 ## the result is multiplied by @code{exp(x)}.
+##
 ## @item besselh
 ## Compute Hankel functions of the first (@var{k} = 1) or second (@var{k}
 ## = 2) kind.  If the argument @var{opt} is supplied, the result is multiplied
 ## by
 ## @code{exp (-I*@var{x})} for @var{k} = 1 or @code{exp (I*@var{x})} for
 ## @var{k} = 2.
 ## @end table
 ## 
@@ -59,25 +63,30 @@
 ## complex.
 ## 
 ## If requested, @var{ierr} contains the following status information
 ## and is the same size as the result.
 ## 
 ## @enumerate 0
 ## @item
 ## Normal return.
+##
 ## @item
 ## Input error, return @code{NaN}.
+##
 ## @item
 ## Overflow, return @code{Inf}.
+##
 ## @item
 ## Loss of significance by argument reduction results in less than
 ## half of machine accuracy.
+##
 ## @item
 ## Complete loss of significance by argument reduction, return @code{NaN}.
+##
 ## @item
 ## Error---no computation, algorithm termination condition not met,
 ## return @code{NaN}.
 ## @end enumerate
 ## @end deftypefn
 
 function bessel ()
   error ("bessel: you must use besselj, bessely, besseli, or besselk");
diff --git a/scripts/specfun/beta.m b/scripts/specfun/beta.m
--- a/scripts/specfun/beta.m
+++ b/scripts/specfun/beta.m
@@ -25,35 +25,36 @@
 ##  B (a, b) = {\Gamma (a) \Gamma (b) \over \Gamma (a + b)}.
 ## $$
 ## @end tex
 ## @ifnottex
 ##
 ## @example
 ## beta (a, b) = gamma (a) * gamma (b) / gamma (a + b).
 ## @end example
+##
 ## @end ifnottex
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Created: 13 June 1993
 ## Adapted-By: jwe
 
 function retval = beta (a, b)
 
   if (nargin != 2)
     print_usage ();
   endif
 
   if (any (size (a) != size (b)) && numel (a) != 1 && numel (b) != 1)
-    error ("beta: inputs have inconsistent sizes");
+    error ("beta: inputs A and B have inconsistent sizes");
   endif
 
   if (! isreal (a) || ! isreal (b))
-    error ("beta: inputs must be real");
+    error ("beta: inputs A and B must be real");
   endif
 
   retval = real (exp (gammaln (a) + gammaln (b) - gammaln (a+b)));
 
 endfunction
 
 %!test
 %! a=[1, 1.5, 2, 3];
diff --git a/scripts/specfun/betaln.m b/scripts/specfun/betaln.m
--- a/scripts/specfun/betaln.m
+++ b/scripts/specfun/betaln.m
@@ -24,16 +24,17 @@
 ##  B (a, b) = \log {\Gamma (a) \Gamma (b) \over \Gamma (a + b)}.
 ## $$
 ## @end tex
 ## @ifnottex
 ##
 ## @example
 ## betaln (a, b) = gammaln (a) + gammaln (b) - gammaln (a + b)
 ## @end example
+## 
 ## @end ifnottex
 ## @seealso{beta, betainc, gammaln}
 ## @end deftypefn
 
 ## Author:   Nicol N. Schraudolph <nic@idsia.ch>
 ## Created:  06 Aug 1998
 ## Keywords: log beta special function
 
diff --git a/scripts/specfun/nchoosek.m b/scripts/specfun/nchoosek.m
--- a/scripts/specfun/nchoosek.m
+++ b/scripts/specfun/nchoosek.m
@@ -18,17 +18,16 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{c} =} nchoosek (@var{n}, @var{k})
 ##
 ## Compute the binomial coefficient or all combinations of @var{n}.
 ## If @var{n} is a scalar then, calculate the binomial coefficient
 ## of @var{n} and @var{k}, defined as
-##
 ## @tex
 ## $$
 ##  {n \choose k} = {n (n-1) (n-2) \cdots (n-k+1) \over k!}
 ##                = {n! \over k! (n-k)!}
 ## $$
 ## @end tex
 ## @ifnottex
 ##
@@ -36,16 +35,17 @@
 ## @group
 ##  /   \
 ##  | n |    n (n-1) (n-2) @dots{} (n-k+1)       n!
 ##  |   |  = ------------------------- =  ---------
 ##  | k |               k!                k! (n-k)!
 ##  \   /
 ## @end group
 ## @end example
+##
 ## @end ifnottex
 ##
 ## If @var{n} is a vector generate all combinations of the elements
 ## of @var{n}, taken @var{k} at a time, one row per combination.  The 
 ## resulting @var{c} has size @code{[nchoosek (length (@var{n}), 
 ## @var{k}), @var{k}]}.
 ##
 ## @code{nchoosek} works only for non-negative integer arguments; use
diff --git a/scripts/specfun/nthroot.m b/scripts/specfun/nthroot.m
--- a/scripts/specfun/nthroot.m
+++ b/scripts/specfun/nthroot.m
@@ -19,17 +19,17 @@
 ##
 ## Original version by Paul Kienzle distributed as free software in the
 ## public domain.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} nthroot (@var{x}, @var{n})
 ## 
 ## Compute the n-th root of @var{x}, returning real results for real 
-## components of @var{x}.  For example
+## components of @var{x}.  For example:
 ##
 ## @example
 ## @group
 ## nthroot (-1, 3)
 ## @result{} -1
 ## (-1) ^ (1 / 3)
 ## @result{} 0.50000 - 0.86603i
 ## @end group
diff --git a/scripts/specfun/perms.m b/scripts/specfun/perms.m
--- a/scripts/specfun/perms.m
+++ b/scripts/specfun/perms.m
@@ -20,16 +20,17 @@
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} perms (@var{v})
 ##
 ## Generate all permutations of @var{v}, one row per permutation.  The
 ## result has size @code{factorial (@var{n}) * @var{n}}, where @var{n}
 ## is the length of @var{v}.
 ##
 ## As an example, @code{perms([1, 2, 3])} returns the matrix
+##
 ## @example
 ## @group
 ##   1   2   3
 ##   2   1   3
 ##   1   3   2
 ##   2   3   1
 ##   3   1   2
 ##   3   2   1
diff --git a/scripts/special-matrix/hadamard.m b/scripts/special-matrix/hadamard.m
--- a/scripts/special-matrix/hadamard.m
+++ b/scripts/special-matrix/hadamard.m
@@ -28,23 +28,27 @@
 ## meaning @code{Hn(:,1) == 1} and @code{Hn(1,:) == 1}.
 ##
 ## Some of the properties of Hadamard matrices are:
 ##
 ## @itemize @bullet
 ## @item
 ## @code{kron (@var{Hm}, @var{Hn})} is a Hadamard matrix of size 
 ## @var{m}-by-@var{n}.
+##
 ## @item
 ## @code{Hn * Hn' == @var{n} * eye (@var{n})}.
+##
 ## @item
 ## The rows of @var{Hn} are orthogonal.
+##
 ## @item
 ## @code{det (@var{A}) <= abs(det (@var{Hn}))} for all @var{A} with
 ## @code{abs (@var{A} (@var{i}, @var{j})) <= 1}.
+##
 ## @item
 ## Multiply any row or column by -1 and still have a Hadamard matrix.
 ## @end itemize
 ##
 ## @end deftypefn
 
    
 ## Reference [1] contains a list of Hadamard matrices up to n=256.
diff --git a/scripts/special-matrix/hankel.m b/scripts/special-matrix/hankel.m
--- a/scripts/special-matrix/hankel.m
+++ b/scripts/special-matrix/hankel.m
@@ -36,16 +36,17 @@
 ## @ifnottex
 ##
 ## @example
 ## @group
 ## H(i,j) = c(i+j-1),  i+j-1 <= m;
 ## H(i,j) = r(i+j-m),  otherwise
 ## @end group
 ## @end example
+##
 ## @end ifnottex
 ## @seealso{vander, sylvester_matrix, hilb, invhilb, toeplitz}
 ## @end deftypefn
 
 ## Author: jwe
 
 function retval = hankel (c, r)
 
diff --git a/scripts/special-matrix/hilb.m b/scripts/special-matrix/hilb.m
--- a/scripts/special-matrix/hilb.m
+++ b/scripts/special-matrix/hilb.m
@@ -32,16 +32,17 @@
 ## H (i, j) = {1 \over (i + j - 1)}
 ## $$
 ## @end tex
 ## @ifnottex
 ##
 ## @example
 ## H (i, j) = 1 / (i + j - 1)
 ## @end example
+##
 ## @end ifnottex
 ## @seealso{hankel, vander, sylvester_matrix, invhilb, toeplitz}
 ## @end deftypefn
 
 ## Author: jwe
 
 function retval = hilb (n)
 
diff --git a/scripts/special-matrix/invhilb.m b/scripts/special-matrix/invhilb.m
--- a/scripts/special-matrix/invhilb.m
+++ b/scripts/special-matrix/invhilb.m
@@ -14,63 +14,66 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} invhilb (@var{n})
-## Return the inverse of a Hilbert matrix of order @var{n}.  This can be 
+## Return the inverse of the Hilbert matrix of order @var{n}.  This can be 
 ## computed exactly using
 ## @tex
 ## $$\eqalign{
 ##   A_{ij} &= -1^{i+j} (i+j-1)
 ##              \left( \matrix{n+i-1 \cr n-j } \right)
 ##              \left( \matrix{n+j-1 \cr n-i } \right)
 ##              \left( \matrix{i+j-2 \cr i-2 } \right)^2 \cr
 ##          &= { p(i)p(j) \over (i+j-1) }
 ## }$$
 ## where
 ## $$
 ##   p(k) = -1^k \left( \matrix{ k+n-1 \cr k-1 } \right)
 ##               \left( \matrix{ n \cr k } \right)
-##$$
+## $$
 ## @end tex
 ## @ifnottex
+##
 ## @example
 ## @group
 ##
 ##             (i+j)         /n+i-1\  /n+j-1\   /i+j-2\ 2
 ##  A(i,j) = -1      (i+j-1)(       )(       ) (       )
 ##                           \ n-j /  \ n-i /   \ i-2 /
 ##
 ##         = p(i) p(j) / (i+j-1)
 ##
 ## @end group
 ## @end example
+##
 ## where
+##
 ## @example
 ## @group
 ##              k  /k+n-1\   /n\
 ##     p(k) = -1  (       ) (   )
 ##                 \ k-1 /   \k/
 ## @end group
 ## @end example
+##
 ## @end ifnottex
-##
 ## The validity of this formula can easily be checked by expanding 
 ## the binomial coefficients in both formulas as factorials.  It can 
-## be derived more directly via the theory of Cauchy matrices: 
-## see J. W. Demmel, @cite{Applied Numerical Linear Algebra}, p. 92.
+## be derived more directly via the theory of Cauchy matrices. 
+## See J. W. Demmel, @cite{Applied Numerical Linear Algebra}, p. 92.
 ##
 ## Compare this with the numerical calculation of @code{inverse (hilb (n))},
 ## which suffers from the ill-conditioning of the Hilbert matrix, and the
 ## finite precision of your computer's floating point arithmetic.
-## @seealso{hankel, vander, sylvester_matrix, hilb, toeplitz}
+## @seealso{hilb, hankel, vander, sylvester_matrix, toeplitz}
 ## @end deftypefn
 
 ## Author: Dirk Laurie <dlaurie@na-net.ornl.gov>
 
 function retval = invhilb (n)
 
   if (nargin != 1)
     print_usage ();
diff --git a/scripts/special-matrix/toeplitz.m b/scripts/special-matrix/toeplitz.m
--- a/scripts/special-matrix/toeplitz.m
+++ b/scripts/special-matrix/toeplitz.m
@@ -39,22 +39,23 @@
 ## @end tex
 ## @ifnottex
 ##
 ## @example
 ## @group
 ## c(0)  r(1)   r(2)  @dots{}  r(n)
 ## c(1)  c(0)   r(1)  @dots{} r(n-1)
 ## c(2)  c(1)   c(0)  @dots{} r(n-2)
-##  .     ,      ,   .      .
-##  .     ,      ,     .    .
-##  .     ,      ,       .  .
+##  .     .      .   .      .
+##  .     .      .     .    .
+##  .     .      .       .  .
 ## c(n) c(n-1) c(n-2) @dots{}  c(0)
 ## @end group
 ## @end example
+##
 ## @end ifnottex
 ## @seealso{hankel, vander, sylvester_matrix, hilb, invhilb}
 ## @end deftypefn
 
 ## Author: jwe && jh
 
 function retval = toeplitz (c, r)
 
diff --git a/scripts/special-matrix/vander.m b/scripts/special-matrix/vander.m
--- a/scripts/special-matrix/vander.m
+++ b/scripts/special-matrix/vander.m
@@ -41,16 +41,17 @@
 ## c(1)^(n-1) @dots{} c(1)^2  c(1)  1
 ## c(2)^(n-1) @dots{} c(2)^2  c(2)  1
 ##     .     .      .      .    .
 ##     .       .    .      .    .
 ##     .         .  .      .    .
 ## c(n)^(n-1) @dots{} c(n)^2  c(n)  1
 ## @end group
 ## @end example
+##
 ## @end ifnottex
 ## @seealso{hankel, sylvester_matrix, hilb, invhilb, toeplitz}
 ## @end deftypefn
 
 ## Author: jwe
 
 function retval = vander (c, n)
 
diff --git a/scripts/statistics/base/cloglog.m b/scripts/statistics/base/cloglog.m
--- a/scripts/statistics/base/cloglog.m
+++ b/scripts/statistics/base/cloglog.m
@@ -15,26 +15,27 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} cloglog (@var{x})
 ## Return the complementary log-log function of @var{x}, defined as
-##
 ## @tex
 ## $$
 ## {\rm cloglog}(x) = - \log (- \log (x))
 ## $$
 ## @end tex
 ## @ifnottex
+##
 ## @example
 ## cloglog(x) = - log (- log (@var{x}))
 ## @end example
+##
 ## @end ifnottex
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Complementary log-log function
 
 function y = cloglog (x)
 
diff --git a/scripts/statistics/base/cor.m b/scripts/statistics/base/cor.m
--- a/scripts/statistics/base/cor.m
+++ b/scripts/statistics/base/cor.m
@@ -26,21 +26,22 @@
 ## @var{j}-th variable in @var{y}.
 ##
 ## @tex
 ## $$
 ## {\rm corrcoef}(x,y) = {{\rm cov}(x,y) \over {\rm std}(x) {\rm std}(y)}
 ## $$
 ## @end tex
 ## @ifnottex
+##
 ## @example
 ## corrcoef(x,y) = cov(x,y)/(std(x)*std(y))
 ## @end example
+##
 ## @end ifnottex
-##
 ## For matrices, each row is an observation and each column a variable;
 ## vectors are always observations and may be row or column vectors.
 ##
 ## @code{cor (@var{x})} is equivalent to @code{cor (@var{x}, @var{x})}.
 ##
 ## Note that the @code{corrcoef} function does the same as @code{cor}.
 ## @end deftypefn
 
diff --git a/scripts/statistics/base/corrcoef.m b/scripts/statistics/base/corrcoef.m
--- a/scripts/statistics/base/corrcoef.m
+++ b/scripts/statistics/base/corrcoef.m
@@ -27,21 +27,22 @@
 ## @var{i}-th variable in @var{x} and the @var{j}-th variable in @var{y}.
 ##
 ## @tex
 ## $$
 ## {\rm corrcoef}(x,y) = {{\rm cov}(x,y) \over {\rm std}(x) {\rm std}(y)}
 ## $$
 ## @end tex
 ## @ifnottex
+##
 ## @example
 ## corrcoef(x,y) = cov(x,y)/(std(x)*std(y))
 ## @end example
+##
 ## @end ifnottex
-##
 ## If called with one argument, compute @code{corrcoef (@var{x}, @var{x})}.
 ## @end deftypefn
 
 ## Author: Kurt Hornik <hornik@wu-wien.ac.at>
 ## Created: March 1993
 ## Adapted-By: jwe
 
 function retval = corrcoef (x, y)
diff --git a/scripts/statistics/base/kendall.m b/scripts/statistics/base/kendall.m
--- a/scripts/statistics/base/kendall.m
+++ b/scripts/statistics/base/kendall.m
@@ -32,35 +32,35 @@
 ## Kendall's @var{tau} is the correlation of the signs of all rank
 ## differences of @var{x} and @var{y}; i.e., if both @var{x} and
 ## @var{y} have distinct entries, then
 ##
 ## @tex
 ## $$ \tau = {1 \over n(n-1)} \sum_{i,j} {\rm sign}(q_i-q_j) {\rm sign}(r_i-r_j) $$
 ## @end tex
 ## @ifnottex
+##
 ## @example
 ## @group
 ##          1    
 ## tau = -------   SUM sign (q(i) - q(j)) * sign (r(i) - r(j))
 ##       n (n-1)   i,j
 ## @end group
 ## @end example
+##
 ## @end ifnottex
-##
 ## @noindent
 ## in which the
 ## @tex
 ## $q_i$ and $r_i$
 ## @end tex
 ## @ifnottex
 ## @var{q}(@var{i}) and @var{r}(@var{i})
 ## @end ifnottex
-##  are the ranks of
-## @var{x} and @var{y}, respectively.
+## are the ranks of @var{x} and @var{y}, respectively.
 ##
 ## If @var{x} and @var{y} are drawn from independent distributions,
 ## Kendall's @var{tau} is asymptotically normal with mean 0 and variance
 ## @tex
 ## ${2 (2n+5) \over 9n(n-1)}$.
 ## @end tex
 ## @ifnottex
 ## @code{(2 * (2@var{n}+5)) / (9 * @var{n} * (@var{n}-1))}.
diff --git a/scripts/statistics/base/kurtosis.m b/scripts/statistics/base/kurtosis.m
--- a/scripts/statistics/base/kurtosis.m
+++ b/scripts/statistics/base/kurtosis.m
@@ -26,23 +26,22 @@
 ## $$
 ## where $\bar{x}$ is the mean value of $x$.
 ## @end tex
 ## @ifnottex
 ##
 ## @example
 ## kurtosis (x) = N^(-1) std(x)^(-4) sum ((x - mean(x)).^4) - 3
 ## @end example
+##
 ## @end ifnottex
-##
 ## @noindent
 ## of @var{x}.  If @var{x} is a matrix, return the kurtosis over the
 ## first non-singleton dimension.  The optional argument @var{dim}
-## can be given to force the kurtosis to be given over that 
-## dimension.
+## can be given to force the kurtosis to be given over that dimension.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Created: 29 July 1994
 ## Adapted-By: jwe
 
 function retval = kurtosis (x, dim)
 
diff --git a/scripts/statistics/base/logit.m b/scripts/statistics/base/logit.m
--- a/scripts/statistics/base/logit.m
+++ b/scripts/statistics/base/logit.m
@@ -21,19 +21,21 @@
 ## @deftypefn {Function File} {} logit (@var{p})
 ## For each component of @var{p}, return the logit of @var{p} defined as
 ## @tex
 ## $$
 ## {\rm logit}(p) = \log\Big({p \over 1-p}\Big)
 ## $$
 ## @end tex
 ## @ifnottex
+##
 ## @example
 ## logit(@var{p}) = log (@var{p} / (1-@var{p}))
 ## @end example
+##
 ## @end ifnottex
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Logit transformation
 
 function y = logit (p)
 
diff --git a/scripts/statistics/base/mean.m b/scripts/statistics/base/mean.m
--- a/scripts/statistics/base/mean.m
+++ b/scripts/statistics/base/mean.m
@@ -26,16 +26,17 @@
 ## @tex
 ## $$ {\rm mean}(x) = \bar{x} = {1\over N} \sum_{i=1}^N x_i $$
 ## @end tex
 ## @ifnottex
 ##
 ## @example
 ## mean (x) = SUM_i x(i) / N
 ## @end example
+##
 ## @end ifnottex
 ## If @var{x} is a matrix, compute the mean for each column and return them
 ## in a row vector.
 ##
 ## The optional argument @var{opt} selects the type of mean to compute.
 ## The following options are recognized:
 ##
 ## @table @code
diff --git a/scripts/statistics/base/median.m b/scripts/statistics/base/median.m
--- a/scripts/statistics/base/median.m
+++ b/scripts/statistics/base/median.m
@@ -35,16 +35,17 @@
 ##
 ## @example
 ## @group
 ##             x(ceil(N/2)),             N odd
 ## median(x) =
 ##             (x(N/2) + x((N/2)+1))/2,  N even
 ## @end group
 ## @end example
+##
 ## @end ifnottex
 ## If @var{x} is a matrix, compute the median value for each
 ## column and return them in a row vector.  If the optional @var{dim}
 ## argument is given, operate along this dimension.
 ## @seealso{mean,mode}
 ## @end deftypefn
 
 ## Author: jwe
diff --git a/scripts/statistics/base/quantile.m b/scripts/statistics/base/quantile.m
--- a/scripts/statistics/base/quantile.m
+++ b/scripts/statistics/base/quantile.m
@@ -37,31 +37,38 @@
 ## 
 ## The methods available to calculate sample quantiles are the nine methods
 ## used by R (http://www.r-project.org/).  The default value is METHOD = 5.
 ## 
 ## Discontinuous sample quantile methods 1, 2, and 3
 ## 
 ## @enumerate 1
 ## @item Method 1: Inverse of empirical distribution function.
+##
 ## @item Method 2: Similar to method 1 but with averaging at discontinuities.
+##
 ## @item Method 3: SAS definition: nearest even order statistic.
 ## @end enumerate
 ## 
 ## Continuous sample quantile methods 4 through 9, where p(k) is the linear
 ## interpolation function respecting each methods' representative cdf.
 ## 
 ## @enumerate 4
 ## @item Method 4: p(k) = k / n. That is, linear interpolation of the empirical cdf.
+##
 ## @item Method 5: p(k) = (k - 0.5) / n. That is a piecewise linear function where 
 ## the knots are the values midway through the steps of the empirical cdf. 
+##
 ## @item Method 6: p(k) = k / (n + 1).
+##
 ## @item Method 7: p(k) = (k - 1) / (n - 1).
+##
 ## @item Method 8: p(k) = (k - 1/3) / (n + 1/3).  The resulting quantile estimates 
 ## are approximately median-unbiased regardless of the distribution of @var{x}.
+##
 ## @item Method 9: p(k) = (k - 3/8) / (n + 1/4).  The resulting quantile estimates 
 ## are approximately unbiased for the expected order statistics if @var{x} is 
 ## normally distributed.
 ## @end enumerate
 ## 
 ## Hyndman and Fan (1996) recommend method 8.  Maxima, S, and R
 ## (versions prior to 2.0.0) use 7 as their default.  Minitab and SPSS
 ## use method 6.  @sc{matlab} uses method 5.
diff --git a/scripts/statistics/base/skewness.m b/scripts/statistics/base/skewness.m
--- a/scripts/statistics/base/skewness.m
+++ b/scripts/statistics/base/skewness.m
@@ -26,16 +26,17 @@
 ## $$
 ## where $\bar{x}$ is the mean value of $x$.
 ## @end tex
 ## @ifnottex
 ##
 ## @example
 ## skewness (x) = N^(-1) std(x)^(-3) sum ((x - mean(x)).^3)
 ## @end example
+##
 ## @end ifnottex
 ##
 ## @noindent
 ## of @var{x}.  If @var{x} is a matrix, return the skewness along the
 ## first non-singleton dimension of the matrix.  If the optional
 ## @var{dim} argument is given, operate along this dimension.
 ## @end deftypefn
 
diff --git a/scripts/statistics/base/std.m b/scripts/statistics/base/std.m
--- a/scripts/statistics/base/std.m
+++ b/scripts/statistics/base/std.m
@@ -31,27 +31,29 @@
 ## @end tex
 ## @ifnottex
 ##
 ## @example
 ## @group
 ## std (x) = sqrt (sumsq (x - mean (x)) / (n - 1))
 ## @end group
 ## @end example
+##
 ## @end ifnottex
 ## If @var{x} is a matrix, compute the standard deviation for
 ## each column and return them in a row vector.
 ##
 ## The argument @var{opt} determines the type of normalization to use.  Valid
 ## values are
 ##
 ## @table @asis 
 ## @item 0:
 ##   normalizes with @math{N-1}, provides the square root of best unbiased 
 ##   estimator of the variance [default]
+##
 ## @item 1:
 ##   normalizes with @math{N}, this provides the square root of the second
 ##   moment around the mean
 ## @end table
 ##
 ## The third argument @var{dim} determines the dimension along which the
 ## standard
 ## deviation is calculated.
diff --git a/scripts/statistics/base/var.m b/scripts/statistics/base/var.m
--- a/scripts/statistics/base/var.m
+++ b/scripts/statistics/base/var.m
@@ -25,16 +25,17 @@
 ##
 ## The argument @var{opt} determines the type of normalization to use.
 ## Valid values are
 ##
 ## @table @asis 
 ## @item 0:
 ## Normalizes with @math{N-1}, provides the best unbiased estimator of the
 ## variance [default].
+##
 ## @item 1:
 ## Normalizes with @math{N}, this provides the second moment around the mean.
 ## @end table
 ##
 ## The third argument @var{dim} determines the dimension along which the 
 ## variance is calculated.
 ## @end deftypefn
 
diff --git a/scripts/statistics/distributions/kolmogorov_smirnov_cdf.m b/scripts/statistics/distributions/kolmogorov_smirnov_cdf.m
--- a/scripts/statistics/distributions/kolmogorov_smirnov_cdf.m
+++ b/scripts/statistics/distributions/kolmogorov_smirnov_cdf.m
@@ -19,25 +19,26 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} kolmogorov_smirnov_cdf (@var{x}, @var{tol})
 ## Return the CDF at @var{x} of the Kolmogorov-Smirnov distribution,
 ## @tex
 ## $$ Q(x) = \sum_{k=-\infty}^\infty (-1)^k \exp(-2 k^2 x^2) $$
 ## @end tex
 ## @ifnottex
+##
 ## @example
 ## @group
 ##          Inf
 ## Q(x) =   SUM    (-1)^k exp(-2 k^2 x^2)
 ##        k = -Inf
 ## @end group
 ## @end example
+##
 ## @end ifnottex
-##
 ## @noindent
 ## for @var{x} > 0.
 ##
 ## The optional parameter @var{tol} specifies the precision up to which
 ## the series should be evaluated; the default is @var{tol} = @code{eps}.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
diff --git a/scripts/statistics/distributions/wblcdf.m b/scripts/statistics/distributions/wblcdf.m
--- a/scripts/statistics/distributions/wblcdf.m
+++ b/scripts/statistics/distributions/wblcdf.m
@@ -16,25 +16,26 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} wblcdf (@var{x}, @var{scale}, @var{shape})
 ## Compute the cumulative distribution function (CDF) at @var{x} of the
 ## Weibull distribution with shape parameter @var{scale} and scale
 ## parameter @var{shape}, which is
-##
 ## @tex
 ## $$ 1 - \exp(-(x/shape)^{scale}) $$
 ## for $x\geq 0$.
 ## @end tex
 ## @ifnottex
+##
 ## @example
 ## 1 - exp(-(x/shape)^scale)
 ## @end example
+##
 ## for @var{x} @geq{} 0.
 ## @end ifnottex
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: CDF of the Weibull distribution
 
 function cdf = wblcdf (x, scale, shape)
diff --git a/scripts/statistics/tests/cor_test.m b/scripts/statistics/tests/cor_test.m
--- a/scripts/statistics/tests/cor_test.m
+++ b/scripts/statistics/tests/cor_test.m
@@ -37,24 +37,29 @@
 ## @var{method} is @code{"spearman"}, then Spearman's rank correlation
 ## rho is used.  Only the first character is necessary.
 ##
 ## The output is a structure with the following elements:
 ##
 ## @table @var
 ## @item pval
 ## The p-value of the test.
+##
 ## @item stat
 ## The value of the test statistic.
+##
 ## @item dist
 ## The distribution of the test statistic.
+##
 ## @item params
 ## The parameters of the null distribution of the test statistic.
+##
 ## @item alternative
 ## The alternative hypothesis.
+##
 ## @item method
 ## The method used for testing.
 ## @end table
 ##
 ## If no output argument is given, the p-value is displayed.
 ## @end deftypefn
 
 ## Author: FL <Friedrich.Leisch@ci.tuwien.ac.at>
diff --git a/scripts/statistics/tests/hotelling_test_2.m b/scripts/statistics/tests/hotelling_test_2.m
--- a/scripts/statistics/tests/hotelling_test_2.m
+++ b/scripts/statistics/tests/hotelling_test_2.m
@@ -20,28 +20,28 @@
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{pval}, @var{tsq}] =} hotelling_test_2 (@var{x}, @var{y})
 ## For two samples @var{x} from multivariate normal distributions with
 ## the same number of variables (columns), unknown means and unknown
 ## equal covariance matrices, test the null hypothesis @code{mean
 ## (@var{x}) == mean (@var{y})}.
 ##
 ## Hotelling's two-sample @math{T^2} is returned in @var{tsq}.  Under the null,
-##
 ## @tex
 ## $$
 ## {n_x+n_y-p-1) T^2 \over p(n_x+n_y-2)}
 ## $$
 ## @end tex
 ## @ifnottex
+##
 ## @example
 ## (n_x+n_y-p-1) T^2 / (p(n_x+n_y-2))
 ## @end example
+##
 ## @end ifnottex
-##
 ## @noindent
 ## has an F distribution with @math{p} and @math{n_x+n_y-p-1} degrees of
 ## freedom, where @math{n_x} and @math{n_y} are the sample sizes and
 ## @math{p} is the number of variables.
 ##
 ## The p-value of the test is returned in @var{pval}.
 ##
 ## If no output argument is given, the p-value of the test is displayed.
diff --git a/scripts/strings/bin2dec.m b/scripts/strings/bin2dec.m
--- a/scripts/strings/bin2dec.m
+++ b/scripts/strings/bin2dec.m
@@ -15,17 +15,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} bin2dec (@var{s})
 ## Return the decimal number corresponding to the binary number stored
-## in the string @var{s}.  For example,
+## in the string @var{s}.  For example:
 ##
 ## @example
 ## @group
 ## bin2dec ("1110")
 ##      @result{} 14
 ## @end group
 ## @end example
 ##
diff --git a/scripts/strings/cstrcat.m b/scripts/strings/cstrcat.m
--- a/scripts/strings/cstrcat.m
+++ b/scripts/strings/cstrcat.m
@@ -15,17 +15,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} cstrcat (@var{s1}, @var{s2}, @dots{})
 ## Return a string containing all the arguments concatenated
-## horizontally.  Trailing white space is preserved.  For example,
+## horizontally.  Trailing white space is preserved.  For example:
 ##
 ## @example
 ## @group
 ## cstrcat ("ab   ", "cd")
 ##      @result{} "ab   cd"
 ## @end group
 ## @end example
 ##
diff --git a/scripts/strings/dec2bin.m b/scripts/strings/dec2bin.m
--- a/scripts/strings/dec2bin.m
+++ b/scripts/strings/dec2bin.m
@@ -15,17 +15,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} dec2bin (@var{n}, @var{len})
 ## Return a binary number corresponding to the non-negative decimal number
-## @var{n}, as a string of ones and zeros.  For example,
+## @var{n}, as a string of ones and zeros.  For example:
 ##
 ## @example
 ## @group
 ## dec2bin (14)
 ##      @result{} "1110"
 ## @end group
 ## @end example
 ##
diff --git a/scripts/strings/dec2hex.m b/scripts/strings/dec2hex.m
--- a/scripts/strings/dec2hex.m
+++ b/scripts/strings/dec2hex.m
@@ -15,17 +15,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} dec2hex (@var{n}, @var{len})
 ## Return the hexadecimal string corresponding to the non-negative 
-## integer @var{n}.  For example,
+## integer @var{n}.  For example:
 ##
 ## @example
 ## @group
 ## dec2hex (2748)
 ##      @result{} "ABC"
 ## @end group
 ## @end example
 ##
diff --git a/scripts/strings/findstr.m b/scripts/strings/findstr.m
--- a/scripts/strings/findstr.m
+++ b/scripts/strings/findstr.m
@@ -17,17 +17,17 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} findstr (@var{s}, @var{t}, @var{overlap})
 ## Return the vector of all positions in the longer of the two strings
 ## @var{s} and @var{t} where an occurrence of the shorter of the two starts.
 ## If the optional argument @var{overlap} is nonzero, the returned vector
-## can include overlapping positions (this is the default).  For example,
+## can include overlapping positions (this is the default).  For example:
 ##
 ## @example
 ## @group
 ## findstr ("ababab", "a")
 ##      @result{} [1, 3, 5]
 ## findstr ("abababa", "aba", 0)
 ##      @result{} [1, 5]
 ## @end group
diff --git a/scripts/strings/hex2dec.m b/scripts/strings/hex2dec.m
--- a/scripts/strings/hex2dec.m
+++ b/scripts/strings/hex2dec.m
@@ -15,17 +15,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} hex2dec (@var{s})
 ## Return the integer corresponding to the hexadecimal number stored
-## in the string @var{s}.  For example,
+## in the string @var{s}.  For example:
 ##
 ## @example
 ## @group
 ## hex2dec ("12B")
 ##      @result{} 299
 ## hex2dec ("12b")
 ##      @result{} 299
 ## @end group
diff --git a/scripts/strings/index.m b/scripts/strings/index.m
--- a/scripts/strings/index.m
+++ b/scripts/strings/index.m
@@ -16,17 +16,17 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} index (@var{s}, @var{t})
 ## @deftypefnx {Function File} {} index (@var{s}, @var{t}, @var{direction})
 ## Return the position of the first occurrence of the string @var{t} in the
-## string @var{s}, or 0 if no occurrence is found.  For example,
+## string @var{s}, or 0 if no occurrence is found.  For example:
 ##
 ## @example
 ## @group
 ## index ("Teststring", "t")
 ##      @result{} 4
 ## @end group
 ## @end example
 ##
diff --git a/scripts/strings/isstrprop.m b/scripts/strings/isstrprop.m
--- a/scripts/strings/isstrprop.m
+++ b/scripts/strings/isstrprop.m
@@ -13,17 +13,17 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} isstrprop (@var{str}, @var{pred})
-## Test character string properties.  For example,
+## Test character string properties.  For example:
 ##
 ## @example
 ## @group
 ## isstrprop ("abc123", "alpha")
 ## @result{} [1, 1, 1, 0, 0, 0]
 ## @end group
 ## @end example
 ## 
diff --git a/scripts/strings/regexptranslate.m b/scripts/strings/regexptranslate.m
--- a/scripts/strings/regexptranslate.m
+++ b/scripts/strings/regexptranslate.m
@@ -23,32 +23,35 @@
 ## The behavior can be controlled by the @var{op} that can have the
 ## values
 ##
 ## @table @asis
 ## @item "wildcard"
 ## The wildcard characters @code{.}, @code{*} and @code{?} are replaced
 ## with wildcards that are appropriate for a regular expression. 
 ## For example:
+##
 ## @example
 ## @group
 ## regexptranslate ("wildcard", "*.m")
 ##      @result{} ".*\.m"
 ## @end group
 ## @end example
 ## 
 ## @item "escape"
 ## The characters @code{$.?[]}, that have special meaning for regular
 ## expressions are escaped so that they are treated literally.  For example:
+##
 ## @example
 ## @group
 ## regexptranslate ("escape", "12.5")
 ##      @result{} "12\.5"
 ## @end group
 ## @end example
+##
 ## @end table
 ## @seealso{regexp, regexpi, regexprep}
 ## @end deftypefn
 
 function y = regexptranslate (op, x)
   
   if nargin != 2
     print_usage ();
diff --git a/scripts/strings/rindex.m b/scripts/strings/rindex.m
--- a/scripts/strings/rindex.m
+++ b/scripts/strings/rindex.m
@@ -16,26 +16,26 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} rindex (@var{s}, @var{t})
 ## Return the position of the last occurrence of the character string
 ## @var{t} in the character string @var{s}, or 0 if no occurrence is
-## found.  For example,
+## found.  For example:
 ##
 ## @example
 ## @group
 ## rindex ("Teststring", "t")
 ##      @result{} 6
 ## @end group
 ## @end example
 ##
-## @strong{Caution:}  This function does not work for arrays of
+## @strong{Caution:} This function does not work for arrays of
 ## character strings.
 ## @seealso{find, index}
 ## @end deftypefn
 
 ## Author: Kurt Hornik <Kurt.Hornik@wu-wien.ac.at>
 ## Adapted-By: jwe
 
 function n = rindex (s, t)
diff --git a/scripts/strings/strcat.m b/scripts/strings/strcat.m
--- a/scripts/strings/strcat.m
+++ b/scripts/strings/strcat.m
@@ -20,17 +20,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} strcat (@var{s1}, @var{s2}, @dots{})
 ## Return a string containing all the arguments concatenated
 ## horizontally.  If the arguments are cells strings,  @code{strcat}
 ## returns a cell string with the individual cells concatenated.
 ## For numerical input, each element is converted to the
 ## corresponding ASCII character.  Trailing white space is eliminated.
-## For example,
+## For example:
 ##
 ## @example
 ## @group
 ## s = [ "ab"; "cde" ];
 ## strcat (s, s, s)
 ##      @result{} ans =
 ##         "ab ab ab "
 ##         "cdecdecde"
diff --git a/scripts/strings/substr.m b/scripts/strings/substr.m
--- a/scripts/strings/substr.m
+++ b/scripts/strings/substr.m
@@ -21,17 +21,17 @@
 ## @deftypefn {Function File} {} substr (@var{s}, @var{offset}, @var{len})
 ## Return the substring of @var{s} which starts at character number
 ## @var{offset} and is @var{len} characters long.
 ##
 ## If @var{offset} is negative, extraction starts that far from the end of
 ## the string.  If @var{len} is omitted, the substring extends to the end
 ## of S.
 ##
-## For example,
+## For example:
 ##
 ## @example
 ## @group
 ## substr ("This is a test string", 6, 9)
 ##      @result{} "is a test"
 ## @end group
 ## @end example
 ##
diff --git a/scripts/testfun/demo.m b/scripts/testfun/demo.m
--- a/scripts/testfun/demo.m
+++ b/scripts/testfun/demo.m
@@ -54,17 +54,17 @@
 ## include using multiple plots by saying figure between each, or
 ## using subplot to put multiple plots in the same window.
 ##
 ## Also, since demo evaluates inside a function context, you cannot
 ## define new functions inside a demo.  Instead you will have to
 ## use @code{eval(example('function',n))} to see them.  Because eval only
 ## evaluates one line, or one statement if the statement crosses
 ## multiple lines, you must wrap your demo in "if 1 <demo stuff> endif"
-## with the 'if' on the same line as 'demo'.  For example,
+## with the 'if' on the same line as 'demo'.  For example:
 ##
 ## @example
 ## @group
 ##   %!demo if 1
 ##   %!  function y=f(x)
 ##   %!    y=x;
 ##   %!  endfunction
 ##   %!  f(3)
diff --git a/scripts/time/asctime.m b/scripts/time/asctime.m
--- a/scripts/time/asctime.m
+++ b/scripts/time/asctime.m
@@ -15,17 +15,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} asctime (@var{tm_struct})
 ## Convert a time structure to a string using the following five-field
-## format: Thu Mar 28 08:40:14 1996.  For example,
+## format: Thu Mar 28 08:40:14 1996.  For example:
 ##
 ## @example
 ## @group
 ## asctime (localtime (time ()))
 ##      @result{} "Mon Feb 17 01:15:06 1997\n"
 ## @end group
 ## @end example
 ##
diff --git a/scripts/time/clock.m b/scripts/time/clock.m
--- a/scripts/time/clock.m
+++ b/scripts/time/clock.m
@@ -14,17 +14,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} clock ()
 ## Return a vector containing the current year, month (1-12), day (1-31),
-## hour (0-23), minute (0-59) and second (0-61).  For example,
+## hour (0-23), minute (0-59) and second (0-61).  For example:
 ##
 ## @example
 ## @group
 ## clock ()
 ##      @result{} [ 1993, 8, 20, 4, 56, 1 ]
 ## @end group
 ## @end example
 ##
diff --git a/scripts/time/ctime.m b/scripts/time/ctime.m
--- a/scripts/time/ctime.m
+++ b/scripts/time/ctime.m
@@ -17,17 +17,17 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} ctime (@var{t})
 ## Convert a value returned from @code{time} (or any other non-negative
 ## integer), to the local time and return a string of the same form as
 ## @code{asctime}.  The function @code{ctime (time)} is equivalent to
-## @code{asctime (localtime (time))}.  For example,
+## @code{asctime (localtime (time))}.  For example:
 ##
 ## @example
 ## @group
 ## ctime (time ())
 ##      @result{} "Mon Feb 17 01:15:06 1997\n"
 ## @end group
 ## @end example
 ## @end deftypefn
diff --git a/scripts/time/date.m b/scripts/time/date.m
--- a/scripts/time/date.m
+++ b/scripts/time/date.m
@@ -15,17 +15,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} date ()
 ## Return the date as a character string in the form DD-MMM-YY@.  For
-## example,
+## example:
 ##
 ## @example
 ## @group
 ## date ()
 ##      @result{} "20-Aug-93"
 ## @end group
 ## @end example
 ## @end deftypefn
diff --git a/scripts/time/datenum.m b/scripts/time/datenum.m
--- a/scripts/time/datenum.m
+++ b/scripts/time/datenum.m
@@ -28,24 +28,29 @@
 ## The fractional portion, @var{p}, corresponds to the portion of the
 ## specified day.
 ##
 ## Notes:
 ##
 ## @itemize
 ## @item
 ## Years can be negative and/or fractional.
+##
 ## @item
 ## Months below 1 are considered to be January.
+##
 ## @item
 ## Days of the month start at 1.
+##
 ## @item
 ## Days beyond the end of the month go into subsequent months.
+##
 ## @item
 ## Days before the beginning of the month go to the previous month.
+##
 ## @item
 ## Days can be fractional.
 ## @end itemize
 ##
 ## @strong{Warning:} this function does not attempt to handle Julian
 ## calendars so dates before Octave 15, 1582 are wrong by as much
 ## as eleven days.  Also be aware that only Roman Catholic countries
 ## adopted the calendar in 1582.  It took until 1924 for it to be 
diff --git a/scripts/time/is_leap_year.m b/scripts/time/is_leap_year.m
--- a/scripts/time/is_leap_year.m
+++ b/scripts/time/is_leap_year.m
@@ -15,17 +15,17 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} is_leap_year (@var{year})
 ## Return 1 if the given year is a leap year and 0 otherwise.  If no
 ## arguments are provided, @code{is_leap_year} will use the current year.
-## For example,
+## For example:
 ##
 ## @example
 ## @group
 ## is_leap_year (2000)
 ##      @result{} 1
 ## @end group
 ## @end example
 ## @end deftypefn
