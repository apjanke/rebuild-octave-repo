# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1231781471 18000
#      Mon Jan 12 12:31:11 2009 -0500
# Node ID a74871446af73598f8f6ef5811ef5643d9a5e4f7
# Parent  ebdf1e058d8581e580c3012337f87906d2207736
Fchar, Fstrvcat: use queue to avoid duplicate calls to all_strings

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2009-01-12  John W. Eaton  <jwe@octave.org>
+
+	* strfns.cc (Fstrvcat, Fchar): Use queue to avoid duplicate calls
+	to all_strings.
+
 2009-01-12  Thorsten Meyer  <thorsten.meyier@gmx.de>
 
 	* strfns.cc (Fstrvcap): New function.
 	
 2008-11-29  Thorsten Meyer  <thorsten.meyier@gmx.de>
 
         * strfns.cc (Fchar, Fischar, Fstrncmp, Flist_in_columns):
 	Improve documentation strings.  Add examples and tests.
diff --git a/src/strfns.cc b/src/strfns.cc
--- a/src/strfns.cc
+++ b/src/strfns.cc
@@ -22,16 +22,17 @@ along with Octave; see the file COPYING.
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cctype>
 
+#include <queue>
 #include <sstream>
 
 #include "dMatrix.h"
 
 #include "Cell.h"
 #include "defun.h"
 #include "error.h"
 #include "gripes.h"
@@ -75,16 +76,18 @@ char ([97, 98, 99], \"\", @{\"98\", \"99
     retval = args(0).convert_to_str (true, true,
 				     args(0).is_dq_string () ? '"' : '\'');
   else if (nargin > 1)
     {
       int n_elts = 0;
 
       int max_len = 0;
 
+      std::queue<string_vector> args_as_strings;
+
       for (int i = 0; i < nargin; i++)
 	{
 	  string_vector s = args(i).all_strings ();
 
 	  if (error_state)
 	    {
 	      error ("char: unable to convert some args to strings");
 	      return retval;
@@ -94,25 +97,27 @@ char ([97, 98, 99], \"\", @{\"98\", \"99
             n_elts += s.length ();
           else
             n_elts += 1;
 
 	  int s_max_len = s.max_length ();
 
 	  if (s_max_len > max_len)
 	    max_len = s_max_len;
+
+	  args_as_strings.push (s);
 	}
 
       string_vector result (n_elts);
 
       int k = 0;
 
       for (int i = 0; i < nargin; i++)
 	{
-	  string_vector s = args(i).all_strings ();
+	  string_vector s = args_as_strings.pop ();
 
 	  int n = s.length ();
 
           if (n > 0)
             {
 	      for (int j = 0; j < n; j++)
 	        {
 	          std::string t = s[j];
@@ -120,19 +125,17 @@ char ([97, 98, 99], \"\", @{\"98\", \"99
 
 	          if (max_len > t_len)
 		    t += std::string (max_len - t_len, ' ');
 
 	          result[k++] = t;
 	        }
             }
           else
-            {
-               result[k++] = std::string (max_len, ' ');
-            }
+	    result[k++] = std::string (max_len, ' ');
 	}
 
       retval = octave_value (result, '\'');
     }
   else
     print_usage ();
 
   return retval;
@@ -185,16 +188,18 @@ strvcat ([97, 98, 99], \"\", @{\"98\", \
   int nargin = args.length ();
 
   if (nargin > 0)
     {
       int n_elts = 0;
 
       int max_len = 0;
 
+      std::queue<string_vector> args_as_strings;
+
       for (int i = 0; i < nargin; i++)
 	{
 	  string_vector s = args(i).all_strings ();
 
 	  if (error_state)
 	    {
 	      error ("strvcat: unable to convert some args to strings");
 	      return retval;
@@ -211,25 +216,27 @@ strvcat ([97, 98, 99], \"\", @{\"98\", \
                     n_elts++;
                 }
             }
 
 	  int s_max_len = s.max_length ();
 
 	  if (s_max_len > max_len)
 	    max_len = s_max_len;
+
+	  args_as_strings.push (s);
 	}
 
       string_vector result (n_elts);
 
       int k = 0;
 
       for (int i = 0; i < nargin; i++)
 	{
-	  string_vector s = args(i).all_strings ();
+	  string_vector s = args_as_strings.pop ();
 
 	  int n = s.length ();
 
           if (n > 0)
             {
 	      for (int j = 0; j < n; j++)
 	        {
 	          std::string t = s[j];
