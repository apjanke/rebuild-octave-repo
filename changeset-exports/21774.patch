# HG changeset patch
# User Rik <rik@octave.org>
# Date 1464192964 25200
#      Wed May 25 09:16:04 2016 -0700
# Node ID ca9e09417e1f65583a8cb44fcac02b52899731aa
# Parent  45871845a93cfb6afe00f9c8eb063b2a012cf0e1
menu.m: Overhaul console-based portion of function (bug #48006).

* menu.m: Update docstring to clarify that 0 is returned on user abort
or invalid selection.  Convert a single cellstr input into a cell array
of strings for use by the text-based menu algorithm.  Don't loop endlessly
if the user makes an invalid selection.  Use warning, rather than printf,
to display warning message.  Space out code for readability.

diff --git a/scripts/miscellaneous/menu.m b/scripts/miscellaneous/menu.m
--- a/scripts/miscellaneous/menu.m
+++ b/scripts/miscellaneous/menu.m
@@ -25,18 +25,18 @@
 ## If the GUI is running, the menu is displayed graphically using
 ## @code{listdlg}.  Otherwise, the title and menu options are printed on the
 ## console.
 ##
 ## @var{title} is a string and the options may be input as individual strings
 ## or as a cell array of strings.
 ##
 ## The return value @var{choice} is the number of the option selected by the
-## user counting from 1 or 0 if the user aborts the dialog or makes an invalid
-## selection.
+## user counting from 1.  If the user aborts the dialog or makes an invalid
+## selection then 0 is returned.
 ##
 ## This function is useful for interactive programs.  There is no limit to the
 ## number of options that may be passed in, but it may be confusing to present
 ## more than will fit easily on one screen.
 ## @seealso{input, listdlg}
 ## @end deftypefn
 
 ## Author: jwe
@@ -50,51 +50,54 @@ function choice = menu (title, varargin)
   if (! ischar (title))
     error ("menu: TITLE must be a string");
   elseif (nargin > 2 && ! iscellstr (varargin))
     error ("menu: All OPTIONS must be strings");
   elseif (! ischar (varargin{1}) && ! iscellstr (varargin{1}))
     error ("menu: OPTIONS must be string or cell array of strings");
   endif
 
-  if (__octave_link_enabled__ ())
+  if (__octave_link_enabled__ ())  # GUI menu
     [choice, ok] = listdlg ("Name", "menu", "PromptString", title,
                             "ListString", varargin, "SelectionMode", "Single");
     if (! ok)
       choice = 0;
     endif
   else  # console menu
     ## Force pending output to appear before the menu.
     fflush (stdout);
 
-    ## Don't send the menu through the pager since doing that can cause
-    ## major confusion.
-    page_screen_output (0, "local");
+    ## Don't send the menu through the pager as that can cause major confusion.
+    page_screen_output (false, "local");
 
     if (! isempty (title))
       printf ("%s\n", title);
     endif
 
+    ## Handle case where choices are given as a cell array
+    if (iscellstr (varargin{1}))
+      varargin = varargin{1};
+    endif
+
     nopt = numel (varargin);
-    while (1)
-      for i = 1:nopt
-        printf ("  [%2d] %s\n", i, varargin{i});
-      endfor
-      printf ("\n");
-      s = input ("Select a number: ", "s");
-      choice = sscanf (s, "%d");
-      if (! isscalar (choice) || choice < 1 || choice > nopt)
-        printf ("\nerror: input invalid or out of range\n\n");
-        choice = 0;
-      else
-        break;
-      endif
-    endwhile
+    for i = 1:nopt
+      printf ("  [%2d] %s\n", i, varargin{i});
+    endfor
+    printf ("\n");
+
+    s = input ("Select a number: ", "s");
+    choice = sscanf (s, "%d");
+
+    if (! isscalar (choice) || choice < 1 || choice > nopt)
+      warning ("menu: input invalid or out of range\n");
+      choice = 0;
+    endif
   endif
 
 endfunction
 
 
 %!error menu ()
 %!error menu ("title")
 %!error <TITLE must be a string> menu (1, "opt1")
 %!error <All OPTIONS must be strings> menu ("title", "opt1", 1)
 %!error <OPTIONS must be string or cell array of strings> menu ("title", 1)
+
