# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1535565825 14400
#      Wed Aug 29 14:03:45 2018 -0400
# Branch stable
# Node ID 26c41d8bf170d96b34e4b0a840ecbe86291b0938
# Parent  07cb3e098c0a95731c00dc13ef0829d8f3dc9660
fix min-val saturation for 64-bit integer addition (bug #54572)

* oct-inttypes.h (octave_int_arith_base<T,true>::__signbit):
Simplify.
(octave_int_arith_base<T,true>::add): In overflow case, set negative
limit directly instead of adding signbit to max value.

diff --git a/liboctave/util/oct-inttypes.h b/liboctave/util/oct-inttypes.h
--- a/liboctave/util/oct-inttypes.h
+++ b/liboctave/util/oct-inttypes.h
@@ -539,21 +539,17 @@ class octave_int_arith_base<T, true> : o
   // The corresponding unsigned type.
   typedef typename query_integer_type<sizeof (T), false>::type UT;
 public:
 
   // Returns 1 for negative number, 0 otherwise.
   static T
   __signbit (T x)
   {
-#if defined (OCTAVE_HAVE_FAST_INT_OPS)
-    return static_cast<UT> (x) >> std::numeric_limits<T>::digits;
-#else
     return (x < 0) ? 1 : 0;
-#endif
   }
 
   static T
   abs (T x)
   {
 #if defined (OCTAVE_HAVE_FAST_INT_OPS)
     // This is close to how GCC does std::abs, but we can't just use std::abs,
     // because its behavior for INT_MIN is undefined and the compiler could
@@ -622,67 +618,71 @@ public:
     return y;
 #endif
   }
 
   static T
   add (T x, T y)
   {
 #if defined (OCTAVE_HAVE_FAST_INT_OPS)
+
     // The typecasts do nothing, but they are here to prevent an optimizing
     // compiler from interfering.  Also, the signed operations on small types
     // actually return int.
     T u = static_cast<UT> (x) + static_cast<UT> (y);
     T ux = u ^ x;
     T uy = u ^ y;
-    if ((ux & uy) < 0)
-      {
-        u = octave_int_base<T>::max_val () + __signbit (~u);
-      }
-    return u;
+
+    return ((ux & uy) < 0
+            ? (u < 0
+               ? octave_int_base<T>::max_val ()
+               : octave_int_base<T>::min_val ())
+            : u);
+
 #else
+
     // We shall carefully avoid anything that may overflow.
     T u;
+
     if (y < 0)
       {
         if (x < octave_int_base<T>::min_val () - y)
-          {
-            u = octave_int_base<T>::min_val ();
-          }
+          u = octave_int_base<T>::min_val ();
         else
           u = x + y;
       }
     else
       {
         if (x > octave_int_base<T>::max_val () - y)
-          {
-            u = octave_int_base<T>::max_val ();
-          }
+          u = octave_int_base<T>::max_val ();
         else
           u = x + y;
       }
 
     return u;
+
 #endif
   }
 
   // This is very similar to addition.
   static T
   sub (T x, T y)
   {
 #if defined (OCTAVE_HAVE_FAST_INT_OPS)
     // The typecasts do nothing, but they are here to prevent an optimizing
     // compiler from interfering.  Also, the signed operations on small types
     // actually return int.
     T u = static_cast<UT> (x) - static_cast<UT> (y);
     T ux = u ^ x;
     T uy = u ^ ~y;
     if ((ux & uy) < 0)
       {
-        u = octave_int_base<T>::max_val () + __signbit (~u);
+        u = (__signbit (~u)
+             ? octave_int_base<T>::min_val ()
+             : octave_int_base<T>::max_val ());
       }
     return u;
 #else
     // We shall carefully avoid anything that may overflow.
     T u;
     if (y < 0)
       {
         if (x > octave_int_base<T>::max_val () + y)
