# HG changeset patch
# User Shai Ayal <shaiay@users.sourceforge.net>
# Date 1204778406 -7200
#      Thu Mar 06 06:40:06 2008 +0200
# Node ID cf672485be432ab544325067200a64551980db6b
# Parent  f317f14516cbedbe26d85bd9cfe1ed0b7285edaa
Add toggle grid button & handle the 'a' & 'g' keys for auto axis and toggle
grid

diff --git a/src/graphics/ChangeLog b/src/graphics/ChangeLog
--- a/src/graphics/ChangeLog
+++ b/src/graphics/ChangeLog
@@ -1,8 +1,15 @@
+2008-03-06  Shai Ayal  <shaiay@users.sourceforge.net>
+
+	* fltk_backend/fltk_backend.cc (plot_window::handle): Add handling
+	of the 'a' and 'g' keys
+	(plot_window: toggle_grid): New helper function
+	(plot_window): Add new togglegrid button
+
 2008-03-01  Shai Ayal  <shaiay@users.sourceforge.net>
 
 	* fltk_backend/fltk_backend.cc (OpenGL_fltk::draw_overlay,
 	OpenGL_fltk::zoom, OpenGL_fltk::set_zoom_box): Added to support
 	zoom box
 	(plot_window::handle): Added zoom box code, B-3 now does autoscale
 	(plot_window::axis_auto): New utility function to call axis("auto")
 	(plot_window::button_press): "A" button now does autoscale
diff --git a/src/graphics/fltk_backend/fltk_backend.cc b/src/graphics/fltk_backend/fltk_backend.cc
--- a/src/graphics/fltk_backend/fltk_backend.cc
+++ b/src/graphics/fltk_backend/fltk_backend.cc
@@ -173,26 +173,34 @@ public:
       autoscale = new
 	Fl_Button (0, 
 		   _h - status_h, 
 		   status_h,
 		   status_h,
 		   "A");
       autoscale->callback (button_callback, static_cast<void*> (this));
 
+      togglegrid = new
+	Fl_Button (status_h, 
+		   _h - status_h, 
+		   status_h,
+		   status_h,
+		   "G");
+      togglegrid->callback (button_callback, static_cast<void*> (this));
+
       help = new
-	Fl_Button (status_h, 
+	Fl_Button (2*status_h, 
 		   _h - status_h, 
 		   status_h,
 		   status_h,
 		   "H");
       help->callback (button_callback, static_cast<void*> (this));
 
       status = new 
-	Fl_Output (2*status_h, 
+	Fl_Output (3*status_h, 
 		   _h - status_h, 
 		   _w > 2*status_h ? _w - status_h : 0, 
 		   status_h, "");
       
       status->textcolor (FL_BLACK);
       status->color (FL_GRAY);
       status->textfont (FL_COURIER);
       status->textsize (10);
@@ -203,16 +211,17 @@ public:
       show ();
       canvas->show ();
       canvas->make_current ();
     }
     end ();
 
     status->show ();
     autoscale->show ();
+    togglegrid->show ();
 
     resizable (canvas);
     size_range (4*status_h, 2*status_h);
 
     std::stringstream name;
     name << "octave: figure " << number ();
     label (name.str ().c_str ());
   }
@@ -251,32 +260,40 @@ private:
 
   // button callbacks
   static void button_callback (Fl_Widget* w, void* data) {
     static_cast<plot_window*> (data)-> button_press (w);
   };
 
   void button_press (Fl_Widget* widg) {
     if (widg == autoscale) axis_auto ();
+    if (widg == togglegrid) toggle_grid ();
     if (widg == help) fl_message (help_text);
   }
 
   OpenGL_fltk*   canvas;
   Fl_Button*	 autoscale;
+  Fl_Button*	 togglegrid;
   Fl_Button*	 help;
   Fl_Output*     status;
 
   void axis_auto () 
   {
     octave_value_list args;    
     args(0) = "auto";
     feval("axis",args);
     mark_modified ();
   }
 
+  void toggle_grid () 
+  { 
+    feval ("grid"); 
+    mark_modified ();
+  }
+
   void pixel2pos (int px, int py, double& x, double& y) const {
     graphics_object ax = gh_manager::get_object (fp.get_currentaxes ());
     if (ax && ax.isa ("axes")) 
       {
 	axes::properties& ap = 
 	  dynamic_cast<axes::properties&> (ax.get_properties ());
 	ColumnVector pp = ap.pixel2coord (px, py);
 	x = pp(0);
@@ -350,17 +367,30 @@ private:
     int retval = Fl_Window::handle (event);
 
     // we only handle events which are in the canvas area
     if (Fl::event_y () >= h() - status_h)
       return retval;
 
     switch (event)
       {
-      
+      case FL_KEYDOWN:
+	switch(Fl::event_key ()) 
+	  {
+	  case 'a':
+	  case 'A':
+	    axis_auto ();
+	    break;
+	  case 'g':
+	  case 'G':
+	    toggle_grid ();
+	    break;
+	  }
+	break;
+
       case FL_MOVE:
 	pixel2status (Fl::event_x (), Fl::event_y ());
 	break;
       
       case FL_PUSH:
 	if (Fl::event_button () == 1)
 	  {
 	    px0 = Fl::event_x ();
