# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1294955469 -3600
#      Thu Jan 13 22:51:09 2011 +0100
# Node ID da8e32c99969ac78226908a2debb7e4799a2916c
# Parent  53edbf95fbb60ecfba5aca9fe8b60fb669b8c821
Fix for savving of sparse matrices to matlab files when nnz is not equal to nzmax

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2011-01-12  David Bateman  <dbateman@free.fr>
+
+	ls-mat5.cc (int save_mat5_element_length (const octave_value&,
+	const std::string&, bool, bool)): For sparse matrices use nnz rather
+	than nzmax.
+	(bool save_mat5_binary_element (std::ostream&, const octave_value&,
+	const std::string&, bool, bool, bool, bool)): ditto.
+
 2011-01-13  John W. Eaton  <jwe@octave.org>
 
 	* base-list.h (class octave_base_list): Provide explicit
 	default and copy construtors, assignment operator, and destructor.
 	* load-path.h (load_path::dir_info::class_info): Likewise.
 
 	* load-path.h (load_path::dir_info::dir_info): Initialize all
 	members in initializaition list.
diff --git a/src/ls-mat5.cc b/src/ls-mat5.cc
--- a/src/ls-mat5.cc
+++ b/src/ls-mat5.cc
@@ -2074,29 +2074,29 @@ save_mat5_element_length (const octave_v
         ret += PAD (2 * chm.numel ());
     }
   else if (tc.is_sparse_type ())
     {
       if (tc.is_complex_type ())
         {
           const SparseComplexMatrix m = tc.sparse_complex_matrix_value ();
           octave_idx_type nc = m.cols ();
-          octave_idx_type nnz = m.nzmax (); // Yes its nzmax
+          octave_idx_type nnz = m.nnz ();
 
           ret += 16 + save_mat5_array_length (m.data (), nnz, save_as_floats);
           if (nnz > 1)
             ret += PAD (nnz * sizeof (int32_t));
           if (nc > 0)
             ret += PAD ((nc + 1) * sizeof (int32_t));
         }
       else
         {
           const SparseMatrix m = tc.sparse_matrix_value ();
           octave_idx_type nc = m.cols ();
-          octave_idx_type nnz = m.nzmax ();
+          octave_idx_type nnz = m.nnz ();
 
           ret += 16 + save_mat5_array_length (m.data (), nnz, save_as_floats);
           if (nnz > 1)
             ret += PAD (nnz * sizeof (int32_t));
           if (nc > 0)
             ret += PAD ((nc + 1) * sizeof (int32_t));
         }
     }
@@ -2440,44 +2440,42 @@ save_mat5_binary_element (std::ostream& 
           static char padbuf[9]="\x00\x00\x00\x00\x00\x00\x00\x00";
           os.write (padbuf, paddedlength - len);
         }
     }
   else if (tc.is_sparse_type ())
     {
       if (tc.is_complex_type ())
         {
-          SparseComplexMatrix m = tc.sparse_complex_matrix_value ();
+          const SparseComplexMatrix m = tc.sparse_complex_matrix_value ();
           octave_idx_type nnz = m.nnz ();
-          octave_idx_type nzmax = m.nzmax ();
           octave_idx_type nc = m.cols ();
 
-          write_mat5_sparse_index_vector (os, m.ridx (), nzmax);
+          write_mat5_sparse_index_vector (os, m.ridx (), nnz);
           write_mat5_sparse_index_vector (os, m.cidx (), nc + 1);
 
           NDArray buf (dim_vector (nnz, 1));
 
           for (octave_idx_type i = 0; i < nnz; i++)
             buf (i) = std::real (m.data (i));
 
           write_mat5_array (os, buf, save_as_floats);
 
           for (octave_idx_type i = 0; i < nnz; i++)
             buf (i) = std::imag (m.data (i));
 
           write_mat5_array (os, buf, save_as_floats);
         }
       else
         {
-          SparseMatrix m = tc.sparse_matrix_value ();
+          const SparseMatrix m = tc.sparse_matrix_value ();
           octave_idx_type nnz = m.nnz ();
-          octave_idx_type nzmax = m.nzmax ();
           octave_idx_type nc = m.cols ();
 
-          write_mat5_sparse_index_vector (os, m.ridx (), nzmax);
+          write_mat5_sparse_index_vector (os, m.ridx (), nnz);
           write_mat5_sparse_index_vector (os, m.cidx (), nc + 1);
 
           // FIXME
           // Is there a way to easily do without this buffer
           NDArray buf (dim_vector (nnz, 1));
 
           for (int i = 0; i < nnz; i++)
             buf (i) = m.data (i);
