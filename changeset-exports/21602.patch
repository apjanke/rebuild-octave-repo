# HG changeset patch
# User Rik <rik@octave.org>
# Date 1460346301 25200
#      Sun Apr 10 20:45:01 2016 -0700
# Node ID 47c76e56a1de0f885ee1ec90e3aafa10d71d495d
# Parent  25fd18a15a6cd53b68e3256b9263cb7b810c8fbb
maint: Remove extra space between end of statement and semicolon.

* bsxfun.cc, data.cc, gl-render.cc, graphics.cc, ls-mat4.h, amd.cc,
audioread.cc, ccolamd.cc, colamd.cc, eigs-base.cc, sparse-chol.cc,
sparse-dmsolve.cc, Sparse-op-defs.h, bicubic.m, sprandsym.m:
maint: Remove extra space between end of statement and semicolon.

diff --git a/libinterp/corefcn/bsxfun.cc b/libinterp/corefcn/bsxfun.cc
--- a/libinterp/corefcn/bsxfun.cc
+++ b/libinterp/corefcn/bsxfun.cc
@@ -433,17 +433,17 @@ dimensionality as the other array.\n\
           BSXDEF(int16NDArray);
           BSXDEF(int32NDArray);
           BSXDEF(int64NDArray);
           BSXDEF(uint8NDArray);
           BSXDEF(uint16NDArray);
           BSXDEF(uint32NDArray);
           BSXDEF(uint64NDArray);
 
-          octave_value Ac ;
+          octave_value Ac;
           octave_value_list idxA;
           octave_value Bc;
           octave_value_list idxB;
           octave_value C;
           octave_value_list inputs (2);
           Array<int> ra_idx (dim_vector (dvc.length (), 1), 0);
 
 
diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -5481,17 +5481,17 @@ If @var{dim} is supplied, the dimensions
 with all elements along the last dimension.  This is equivalent to\n\
 @code{shiftdim (@var{x}(:), 1-@var{dim})}.\n\
 @seealso{vech, resize, cat}\n\
 @end deftypefn")
 {
   int nargin = args.length ();
 
   if (nargin < 1 || nargin > 2)
-    print_usage () ;
+    print_usage ();
 
   int dim = 1;
   if (nargin == 2)
     {
       dim = args(1).idx_type_value ();
 
       if (dim < 1)
         error ("vec: DIM must be greater than zero");
diff --git a/libinterp/corefcn/gl-render.cc b/libinterp/corefcn/gl-render.cc
--- a/libinterp/corefcn/gl-render.cc
+++ b/libinterp/corefcn/gl-render.cc
@@ -2929,17 +2929,17 @@ opengl_renderer::draw_image (const image
   float im_xmax = x(1) + nor_dx/2;
   float im_ymin = y(0) - nor_dy/2;
   float im_ymax = y(1) + nor_dy/2;
   if (props.is_clipping ()) // clip to axes
     {
       if (im_xmin < xmin)
         j0 += (xmin - im_xmin)/nor_dx + 1;
       if (im_xmax > xmax)
-        j1 -= (im_xmax - xmax)/nor_dx ;
+        j1 -= (im_xmax - xmax)/nor_dx;
 
       if (im_ymin < ymin)
         i0 += (ymin - im_ymin)/nor_dy + 1;
       if (im_ymax > ymax)
         i1 -= (im_ymax - ymax)/nor_dy;
     }
   else // clip to viewport
     {
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -3798,17 +3798,17 @@ papersize_from_type (const caseless_str 
   if (! punits.compare ("normalized"))
     {
       double in2units;
       double mm2units;
 
       if (punits.compare ("inches"))
         {
           in2units = 1.0;
-          mm2units = 1 / 25.4 ;
+          mm2units = 1 / 25.4;
         }
       else if (punits.compare ("centimeters"))
         {
           in2units = 2.54;
           mm2units = 1 / 10.0;
         }
       else // points
         {
@@ -7142,17 +7142,17 @@ axes::update_axis_limits (const std::str
 
   if (axis_type == "xdata" || axis_type == "xscale"
       || axis_type == "xlimmode" || axis_type == "xliminclude"
       || axis_type == "xlim")
     {
       if (xproperties.xlimmode_is ("auto"))
         {
           limits = xproperties.get_xlim ().matrix_value ();
-          FIX_LIMITS ;
+          FIX_LIMITS;
 
           get_children_limits (min_val, max_val, min_pos, max_neg, kids, 'x');
 
           limits = xproperties.get_axis_limits (min_val, max_val,
                                                 min_pos, max_neg,
                                                 xproperties.xscale_is ("log"));
 
           update_type = 'x';
@@ -7160,17 +7160,17 @@ axes::update_axis_limits (const std::str
     }
   else if (axis_type == "ydata" || axis_type == "yscale"
            || axis_type == "ylimmode" || axis_type == "yliminclude"
            || axis_type == "ylim")
     {
       if (xproperties.ylimmode_is ("auto"))
         {
           limits = xproperties.get_ylim ().matrix_value ();
-          FIX_LIMITS ;
+          FIX_LIMITS;
 
           get_children_limits (min_val, max_val, min_pos, max_neg, kids, 'y');
 
           limits = xproperties.get_axis_limits (min_val, max_val,
                                                 min_pos, max_neg,
                                                 xproperties.yscale_is ("log"));
 
           update_type = 'y';
@@ -7178,17 +7178,17 @@ axes::update_axis_limits (const std::str
     }
   else if (axis_type == "zdata" || axis_type == "zscale"
            || axis_type == "zlimmode" || axis_type == "zliminclude"
            || axis_type == "zlim")
     {
       if (xproperties.zlimmode_is ("auto"))
         {
           limits = xproperties.get_zlim ().matrix_value ();
-          FIX_LIMITS ;
+          FIX_LIMITS;
 
           get_children_limits (min_val, max_val, min_pos, max_neg, kids, 'z');
 
           limits = xproperties.get_axis_limits (min_val, max_val,
                                                 min_pos, max_neg,
                                                 xproperties.zscale_is ("log"));
 
           update_type = 'z';
@@ -7196,17 +7196,17 @@ axes::update_axis_limits (const std::str
     }
   else if (axis_type == "cdata" || axis_type == "climmode"
            || axis_type == "cdatamapping" || axis_type == "climinclude"
            || axis_type == "clim")
     {
       if (xproperties.climmode_is ("auto"))
         {
           limits = xproperties.get_clim ().matrix_value ();
-          FIX_LIMITS ;
+          FIX_LIMITS;
 
           get_children_limits (min_val, max_val, min_pos, max_neg, kids, 'c');
 
           if (min_val > max_val)
             {
               min_val = min_pos = 0;
               max_val = 1;
             }
@@ -7227,17 +7227,17 @@ axes::update_axis_limits (const std::str
     }
   else if (axis_type == "alphadata" || axis_type == "alimmode"
            || axis_type == "alphadatamapping" || axis_type == "aliminclude"
            || axis_type == "alim")
     {
       if (xproperties.alimmode_is ("auto"))
         {
           limits = xproperties.get_alim ().matrix_value ();
-          FIX_LIMITS ;
+          FIX_LIMITS;
 
           get_children_limits (min_val, max_val, min_pos, max_neg, kids, 'a');
 
           if (min_val > max_val)
             {
               min_val = min_pos = 0;
               max_val = 1;
             }
diff --git a/libinterp/corefcn/ls-mat4.h b/libinterp/corefcn/ls-mat4.h
--- a/libinterp/corefcn/ls-mat4.h
+++ b/libinterp/corefcn/ls-mat4.h
@@ -37,11 +37,11 @@ read_mat_file_header (std::istream& is, 
                       int32_t& len, int quiet = 0);
 
 extern std::string
 read_mat_binary_data (std::istream& is, const std::string& filename,
                       octave_value& tc);
 
 extern bool
 save_mat_binary_data (std::ostream& os, const octave_value& tc,
-                      const std::string& name) ;
+                      const std::string& name);
 
 #endif
diff --git a/libinterp/dldfcn/amd.cc b/libinterp/dldfcn/amd.cc
--- a/libinterp/dldfcn/amd.cc
+++ b/libinterp/dldfcn/amd.cc
@@ -127,17 +127,17 @@ The author of the code itself is Timothy
       ridx = sm.xridx ();
       cidx = sm.xcidx ();
     }
 
   if (n_row != n_col)
     err_square_matrix_required ("amd", "S");
 
   OCTAVE_LOCAL_BUFFER (double, Control, AMD_CONTROL);
-  AMD_NAME (_defaults) (Control) ;
+  AMD_NAME (_defaults) (Control);
   if (nargin > 1)
     {
       octave_scalar_map arg1 = args(1).xscalar_map_value ("amd: OPTS argument must be a scalar structure");
 
       octave_value tmp;
 
       tmp = arg1.getfield ("dense");
       if (tmp.is_defined ())
diff --git a/libinterp/dldfcn/audioread.cc b/libinterp/dldfcn/audioread.cc
--- a/libinterp/dldfcn/audioread.cc
+++ b/libinterp/dldfcn/audioread.cc
@@ -303,17 +303,17 @@ Comment.\n\
         {
           double elem = (audio.xelem (i, j) - bias) / scale;
           data[idx++] = std::min (std::max (elem, -1.0), 1.0);
         }
     }
 
   SF_INFO info;
 
-  memset (&info, 0, sizeof (info)) ;
+  memset (&info, 0, sizeof (info));
 
   sf_count_t chunk_size = 0;
 
   if (ext == "ogg")
     {
       info.format = SF_FORMAT_VORBIS;
 
       // FIXME: there seems to be a bug writing ogg files in one shot
@@ -356,17 +356,16 @@ Comment.\n\
           else if (bits == 32)
             info.format |= SF_FORMAT_PCM_32;
           else
             error ("audiowrite: wrong number of bits specified");
         }
       else if (args(i).string_value () == "BitRate")
         ;
       // Quality is currently unused?
-      //
       // else if (args(i).string_value () == "Quality")
       //   quality = args(i + 1).int_value () * 0.01;
       else if (args(i).string_value () == "Title")
         title = args(i + 1).string_value ();
       else if (args(i).string_value () == "Artist")
         artist = args(i + 1).string_value ();
       else if (args(i).string_value () == "Comment")
         comment = args(i + 1).string_value ();
diff --git a/libinterp/dldfcn/ccolamd.cc b/libinterp/dldfcn/ccolamd.cc
--- a/libinterp/dldfcn/ccolamd.cc
+++ b/libinterp/dldfcn/ccolamd.cc
@@ -280,56 +280,56 @@ ccolamd, csymamd, amd, colamd, symamd, a
         cmember[i] = static_cast<octave_idx_type>(in_cmember(i) - 1);
 
       if (cslen != n_col)
         error ("ccolamd: CMEMBER must be of length equal to #cols of A");
 
       // Order the columns (destroys A)
       if (! CCOLAMD_NAME () (n_row, n_col, Alen, A, p, knobs, stats, cmember))
         {
-          CCOLAMD_NAME (_report) (stats) ;
+          CCOLAMD_NAME (_report) (stats);
 
           error ("ccolamd: internal error!");
         }
     }
   else
     {
       // Order the columns (destroys A)
       if (! CCOLAMD_NAME () (n_row, n_col, Alen, A, p, knobs, stats, 0))
         {
-          CCOLAMD_NAME (_report) (stats) ;
+          CCOLAMD_NAME (_report) (stats);
 
           error ("ccolamd: internal error!");
         }
     }
 
   // return the permutation vector
   NDArray out_perm (dim_vector (1, n_col));
   for (octave_idx_type i = 0; i < n_col; i++)
     out_perm(i) = p[i] + 1;
 
   retval(0) = out_perm;
 
-  // print stats if spumoni > 0
+  // print stats if spumoni > 0  
   if (spumoni > 0)
-    CCOLAMD_NAME (_report) (stats) ;
+    CCOLAMD_NAME (_report) (stats);
 
   // Return the stats vector
   if (nargout == 2)
     {
       NDArray out_stats (dim_vector (1, CCOLAMD_STATS));
       for (octave_idx_type i = 0 ; i < CCOLAMD_STATS ; i++)
-        out_stats(i) = stats[i] ;
+        out_stats(i) = stats[i];
       retval(1) = out_stats;
 
       // fix stats (5) and (6), for 1-based information on
       // jumbled matrix.  note that this correction doesn't
       // occur if symamd returns FALSE
-      out_stats (CCOLAMD_INFO1) ++ ;
-      out_stats (CCOLAMD_INFO2) ++ ;
+      out_stats(CCOLAMD_INFO1)++;
+      out_stats(CCOLAMD_INFO2)++;
     }
 
   return retval;
 
 #else
   err_disabled_feature ("ccolamd", "CCOLAMD");
 #endif
 }
@@ -511,56 +511,56 @@ ccolamd, csymamd, amd, colamd, symamd, a
         cmember[i] = static_cast<octave_idx_type>(in_cmember(i) - 1);
 
       if (cslen != n_col)
         error ("csymamd: CMEMBER must be of length equal to #cols of A");
 
       if (! CSYMAMD_NAME () (n_col, ridx, cidx, perm, knobs, stats,
                              &calloc, &free, cmember, -1))
         {
-          CSYMAMD_NAME (_report) (stats) ;
+          CSYMAMD_NAME (_report)(stats);
 
-          error ("csymamd: internal error!") ;
+          error ("csymamd: internal error!");
         }
     }
   else
     {
       if (! CSYMAMD_NAME () (n_col, ridx, cidx, perm, knobs, stats,
                             &calloc, &free, 0, -1))
         {
-          CSYMAMD_NAME (_report) (stats) ;
+          CSYMAMD_NAME (_report)(stats);
 
-          error ("csymamd: internal error!") ;
+          error ("csymamd: internal error!");
         }
     }
 
   // return the permutation vector
   NDArray out_perm (dim_vector (1, n_col));
   for (octave_idx_type i = 0; i < n_col; i++)
     out_perm(i) = perm[i] + 1;
 
   retval(0) = out_perm;
 
   // print stats if spumoni > 0
   if (spumoni > 0)
-    CSYMAMD_NAME (_report) (stats) ;
+    CSYMAMD_NAME (_report)(stats);
 
   // Return the stats vector
   if (nargout == 2)
     {
       NDArray out_stats (dim_vector (1, CCOLAMD_STATS));
       for (octave_idx_type i = 0 ; i < CCOLAMD_STATS ; i++)
-        out_stats(i) = stats[i] ;
+        out_stats(i) = stats[i];
       retval(1) = out_stats;
 
       // fix stats (5) and (6), for 1-based information on
       // jumbled matrix.  note that this correction doesn't
       // occur if symamd returns FALSE
-      out_stats (CCOLAMD_INFO1) ++ ;
-      out_stats (CCOLAMD_INFO2) ++ ;
+      out_stats(CCOLAMD_INFO1)++;
+      out_stats(CCOLAMD_INFO2)++;
     }
 
   return retval;
 
 #else
   err_disabled_feature ("csymamd", "CCOLAMD");
 #endif
 }
diff --git a/libinterp/dldfcn/colamd.cc b/libinterp/dldfcn/colamd.cc
--- a/libinterp/dldfcn/colamd.cc
+++ b/libinterp/dldfcn/colamd.cc
@@ -59,38 +59,38 @@ static void
 symetree (const octave_idx_type *ridx, const octave_idx_type *cidx,
           octave_idx_type *Parent, octave_idx_type *P, octave_idx_type n)
 {
   OCTAVE_LOCAL_BUFFER (octave_idx_type, Flag, n);
   OCTAVE_LOCAL_BUFFER (octave_idx_type, Pinv, (P ? n : 0));
   if (P)
     // If P is present then compute Pinv, the inverse of P
     for (octave_idx_type k = 0 ; k < n ; k++)
-      Pinv[P[k]] = k ;
+      Pinv[P[k]] = k;
 
   for (octave_idx_type k = 0 ; k < n ; k++)
     {
       // L(k,:) pattern: all nodes reachable in etree from nz in A(0:k-1,k)
       Parent[k] = n ;                // parent of k is not yet known
       Flag[k] = k ;                  // mark node k as visited
       octave_idx_type kk = (P) ? P[k]  // kth original, or permuted, column
-                               : (k) ;
-      octave_idx_type p2 = cidx[kk+1] ;
+                               : (k);
+      octave_idx_type p2 = cidx[kk+1];
       for (octave_idx_type p = cidx[kk] ; p < p2 ; p++)
         {
           // A (i,k) is nonzero (original or permuted A)
-          octave_idx_type i = (Pinv) ? (Pinv[ridx[p]]) : (ridx[p]) ;
+          octave_idx_type i = (Pinv) ? (Pinv[ridx[p]]) : (ridx[p]);
           if (i < k)
             {
               // follow path from i to root of etree, stop at flagged node
               for ( ; Flag[i] != k ; i = Parent[i])
                 {
                   // find parent of i if not yet determined
                   if (Parent[i] == n)
-                    Parent[i] = k ;
+                    Parent[i] = k;
                   Flag[i] = k ;        // mark i as visited
                 }
             }
         }
     }
 }
 
 // The elimination tree post-ordering code below is taken from SuperLU
@@ -295,17 +295,17 @@ Xerox PARC, and @nospell{Esmond Ng}, Oak
   if (nargin == 2)
     {
       NDArray User_knobs = args(1).array_value ();
       int nel_User_knobs = User_knobs.numel ();
 
       if (nel_User_knobs > 0)
         knobs[COLAMD_DENSE_ROW] = User_knobs(0);
       if (nel_User_knobs > 1)
-        knobs[COLAMD_DENSE_COL] = User_knobs(1) ;
+        knobs[COLAMD_DENSE_COL] = User_knobs(1);
       if (nel_User_knobs > 2)
         spumoni = static_cast<int> (User_knobs(2));
 
       // print knob settings if spumoni is set
       if (spumoni)
         {
 
           octave_stdout << "\ncolamd version " << COLAMD_MAIN_VERSION
@@ -386,17 +386,17 @@ Xerox PARC, and @nospell{Esmond Ng}, Oak
   OCTAVE_LOCAL_BUFFER (octave_idx_type, A, Alen);
   for (octave_idx_type i = 0; i < nnz; i++)
     A[i] = ridx[i];
 
   // Order the columns (destroys A)
   OCTAVE_LOCAL_BUFFER (octave_idx_type, stats, COLAMD_STATS);
   if (! COLAMD_NAME () (n_row, n_col, Alen, A, p, knobs, stats))
     {
-      COLAMD_NAME (_report) (stats) ;
+      COLAMD_NAME (_report)(stats);
 
       error ("colamd: internal error!");
     }
 
   // column elimination tree post-ordering (reuse variables)
   OCTAVE_LOCAL_BUFFER (octave_idx_type, colbeg, n_col + 1);
   OCTAVE_LOCAL_BUFFER (octave_idx_type, colend, n_col + 1);
   OCTAVE_LOCAL_BUFFER (octave_idx_type, etree, n_col + 1);
@@ -416,31 +416,31 @@ Xerox PARC, and @nospell{Esmond Ng}, Oak
   NDArray out_perm (dim_vector (1, n_col));
   for (octave_idx_type i = 0; i < n_col; i++)
     out_perm(i) = p[colbeg[i]] + 1;
 
   retval(0) = out_perm;
 
   // print stats if spumoni > 0
   if (spumoni > 0)
-    COLAMD_NAME (_report) (stats) ;
+    COLAMD_NAME (_report)(stats);
 
   // Return the stats vector
   if (nargout == 2)
     {
       NDArray out_stats (dim_vector (1, COLAMD_STATS));
       for (octave_idx_type i = 0 ; i < COLAMD_STATS ; i++)
-        out_stats(i) = stats[i] ;
+        out_stats(i) = stats[i];
       retval(1) = out_stats;
 
       // fix stats (5) and (6), for 1-based information on
       // jumbled matrix.  note that this correction doesn't
       // occur if symamd returns FALSE
-      out_stats (COLAMD_INFO1) ++ ;
-      out_stats (COLAMD_INFO2) ++ ;
+      out_stats(COLAMD_INFO1)++;
+      out_stats(COLAMD_INFO2)++;
     }
 
   return retval;
 
 #else
   err_disabled_feature ("colamd", "COLAMD");
 #endif
 }
@@ -582,19 +582,19 @@ Xerox PARC, and @nospell{Esmond Ng}, Oak
     err_square_matrix_required ("symamd", "S");
 
   // Allocate workspace for symamd
   OCTAVE_LOCAL_BUFFER (octave_idx_type, perm, n_col+1);
   OCTAVE_LOCAL_BUFFER (octave_idx_type, stats, COLAMD_STATS);
   if (! SYMAMD_NAME () (n_col, ridx, cidx, perm,
                        knobs, stats, &calloc, &free))
     {
-      SYMAMD_NAME (_report) (stats) ;
+      SYMAMD_NAME (_report)(stats);
 
-      error ("symamd: internal error!") ;
+      error ("symamd: internal error!");
     }
 
   // column elimination tree post-ordering
   OCTAVE_LOCAL_BUFFER (octave_idx_type, etree, n_col + 1);
   symetree (ridx, cidx, etree, perm, n_col);
 
   // Calculate the tree post-ordering
   OCTAVE_LOCAL_BUFFER (octave_idx_type, post, n_col + 1);
@@ -604,31 +604,31 @@ Xerox PARC, and @nospell{Esmond Ng}, Oak
   NDArray out_perm (dim_vector (1, n_col));
   for (octave_idx_type i = 0; i < n_col; i++)
     out_perm(i) = perm[post[i]] + 1;
 
   retval(0) = out_perm;
 
   // print stats if spumoni > 0
   if (spumoni > 0)
-    SYMAMD_NAME (_report) (stats) ;
+    SYMAMD_NAME (_report)(stats);
 
   // Return the stats vector
   if (nargout == 2)
     {
       NDArray out_stats (dim_vector (1, COLAMD_STATS));
       for (octave_idx_type i = 0 ; i < COLAMD_STATS ; i++)
-        out_stats(i) = stats[i] ;
+        out_stats(i) = stats[i];
       retval(1) = out_stats;
 
       // fix stats (5) and (6), for 1-based information on
       // jumbled matrix.  note that this correction doesn't
       // occur if symamd returns FALSE
-      out_stats (COLAMD_INFO1) ++ ;
-      out_stats (COLAMD_INFO2) ++ ;
+      out_stats(COLAMD_INFO1)++;
+      out_stats(COLAMD_INFO2)++;
     }
 
   return retval;
 
 #else
   err_disabled_feature ("symamd", "COLAMD");
 #endif
 }
diff --git a/liboctave/numeric/eigs-base.cc b/liboctave/numeric/eigs-base.cc
--- a/liboctave/numeric/eigs-base.cc
+++ b/liboctave/numeric/eigs-base.cc
@@ -741,17 +741,17 @@ EigsRealSymmetricMatrix (const M& m, con
   if (p < 0)
     {
       p = k * 2;
 
       if (p < 20)
         p = 20;
 
       if (p > n - 1)
-        p = n - 1 ;
+        p = n - 1;
     }
 
   if (k < 1 || k > n - 2)
     (*current_liboctave_error_handler)
       ("eigs: Invalid number of eigenvalues to extract (must be 0 < k < n-1-1).\n"
        "      Use 'eig (full (A))' instead");
 
   if (p <= k || p >= n)
@@ -1019,17 +1019,17 @@ EigsRealSymmetricMatrixShift (const M& m
   if (p < 0)
     {
       p = k * 2;
 
       if (p < 20)
         p = 20;
 
       if (p > n - 1)
-        p = n - 1 ;
+        p = n - 1;
     }
 
   if (p <= k || p >= n)
     (*current_liboctave_error_handler)
       ("eigs: opts.p must be greater than k and less than n");
 
   if (have_b && cholB && ! permB.is_empty ())
     {
@@ -1289,17 +1289,17 @@ EigsRealSymmetricFunc (EigsFunc fun, oct
   if (p < 0)
     {
       p = k * 2;
 
       if (p < 20)
         p = 20;
 
       if (p > n - 1)
-        p = n - 1 ;
+        p = n - 1;
     }
 
   if (k <= 0 || k >= n - 1)
     (*current_liboctave_error_handler)
       ("eigs: Invalid number of eigenvalues to extract (must be 0 < k < n-1).\n"
        "      Use 'eig (full (A))' instead");
 
   if (p <= k || p >= n)
@@ -1536,17 +1536,17 @@ EigsRealNonSymmetricMatrix (const M& m, 
   if (p < 0)
     {
       p = k * 2 + 1;
 
       if (p < 20)
         p = 20;
 
       if (p > n - 1)
-        p = n - 1 ;
+        p = n - 1;
     }
 
   if (k <= 0 || k >= n - 1)
     (*current_liboctave_error_handler)
       ("eigs: Invalid number of eigenvalues to extract (must be 0 < k < n-1).\n"
        "      Use 'eig (full (A))' instead");
 
   if (p <= k || p >= n)
@@ -1858,17 +1858,17 @@ EigsRealNonSymmetricMatrixShift (const M
   if (p < 0)
     {
       p = k * 2 + 1;
 
       if (p < 20)
         p = 20;
 
       if (p > n - 1)
-        p = n - 1 ;
+        p = n - 1;
     }
 
   if (k <= 0 || k >= n - 1)
     (*current_liboctave_error_handler)
       ("eigs: Invalid number of eigenvalues to extract (must be 0 < k < n-1).\n"
        "      Use 'eig (full (A))' instead");
 
   if (p <= k || p >= n)
@@ -2187,17 +2187,17 @@ EigsRealNonSymmetricFunc (EigsFunc fun, 
   if (p < 0)
     {
       p = k * 2 + 1;
 
       if (p < 20)
         p = 20;
 
       if (p > n - 1)
-        p = n - 1 ;
+        p = n - 1;
     }
 
   if (k <= 0 || k >= n - 1)
     (*current_liboctave_error_handler)
       ("eigs: Invalid number of eigenvalues to extract (must be 0 < k < n-1).\n"
        "      Use 'eig (full (A))' instead");
 
   if (p <= k || p >= n)
@@ -2485,17 +2485,17 @@ EigsComplexNonSymmetricMatrix (const M& 
   if (p < 0)
     {
       p = k * 2 + 1;
 
       if (p < 20)
         p = 20;
 
       if (p > n - 1)
-        p = n - 1 ;
+        p = n - 1;
     }
 
   if (k <= 0 || k >= n - 1)
     (*current_liboctave_error_handler)
       ("eigs: Invalid number of eigenvalues to extract (must be 0 < k < n-1).\n"
        "      Use 'eig (full (A))' instead");
 
   if (p <= k || p >= n)
@@ -2761,17 +2761,17 @@ EigsComplexNonSymmetricMatrixShift (cons
   if (p < 0)
     {
       p = k * 2 + 1;
 
       if (p < 20)
         p = 20;
 
       if (p > n - 1)
-        p = n - 1 ;
+        p = n - 1;
     }
 
   if (k <= 0 || k >= n - 1)
     (*current_liboctave_error_handler)
       ("eigs: Invalid number of eigenvalues to extract (must be 0 < k < n-1).\n"
        "      Use 'eig (full (A))' instead");
 
   if (p <= k || p >= n)
@@ -3048,17 +3048,17 @@ EigsComplexNonSymmetricFunc (EigsComplex
   if (p < 0)
     {
       p = k * 2 + 1;
 
       if (p < 20)
         p = 20;
 
       if (p > n - 1)
-        p = n - 1 ;
+        p = n - 1;
     }
 
   if (k <= 0 || k >= n - 1)
     (*current_liboctave_error_handler)
       ("eigs: Invalid number of eigenvalues to extract (must be 0 < k < n-1).\n"
        "      Use 'eig (full (A))' instead");
 
   if (p <= k || p >= n)
diff --git a/liboctave/numeric/sparse-chol.cc b/liboctave/numeric/sparse-chol.cc
--- a/liboctave/numeric/sparse-chol.cc
+++ b/liboctave/numeric/sparse-chol.cc
@@ -267,19 +267,19 @@ sparse_chol<chol_type>::sparse_chol_rep:
   if (a_nr < 1)
     ac->x = &dummy;
   else
     ac->x = a.data ();
 
   // use natural ordering if no q output parameter
   if (natural)
     {
-      cm->nmethods = 1 ;
-      cm->method[0].ordering = CHOLMOD_NATURAL ;
-      cm->postorder = false ;
+      cm->nmethods = 1;
+      cm->method[0].ordering = CHOLMOD_NATURAL;
+      cm->postorder = false;
     }
 
   cholmod_factor *Lfactor;
   BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
   Lfactor = CHOLMOD_NAME(analyze) (ac, cm);
   CHOLMOD_NAME(factorize) (ac, Lfactor, cm);
   END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 
diff --git a/liboctave/numeric/sparse-dmsolve.cc b/liboctave/numeric/sparse-dmsolve.cc
--- a/liboctave/numeric/sparse-dmsolve.cc
+++ b/liboctave/numeric/sparse-dmsolve.cc
@@ -78,22 +78,22 @@ dmsolve_extract (const MSparse<T> &A, co
             {
               octave_quit ();
 
               octave_idx_type r = (Pinv ? Pinv[A.ridx (p)] : A.ridx (p));
 
               if (r >= rst && r < rend)
                 {
                   B.xdata (nz) = A.data (p);
-                  B.xridx (nz++) = r - rst ;
+                  B.xridx (nz++) = r - rst;
                 }
             }
         }
 
-      B.xcidx (cend - cst) = nz ;
+      B.xcidx (cend - cst) = nz;
     }
   else
     {
       OCTAVE_LOCAL_BUFFER (T, X, rend - rst);
 
       octave_sort<octave_idx_type> sort;
       octave_idx_type *ri = B.xridx ();
 
@@ -109,27 +109,27 @@ dmsolve_extract (const MSparse<T> &A, co
             {
               octave_quit ();
 
               octave_idx_type r = (Pinv ? Pinv[A.ridx (p)] : A.ridx (p));
 
               if (r >= rst && r < rend)
                 {
                   X[r-rst] = A.data (p);
-                  B.xridx (nz++) = r - rst ;
+                  B.xridx (nz++) = r - rst;
                 }
             }
 
           sort.sort (ri + B.xcidx (j - cst), nz - B.xcidx (j - cst));
 
           for (octave_idx_type p = B.cidx (j - cst); p < nz; p++)
             B.xdata (p) = X[B.xridx (p)];
         }
 
-      B.xcidx (cend - cst) = nz ;
+      B.xcidx (cend - cst) = nz;
     }
 
   return B;
 }
 
 template <typename T>
 static MArray<T>
 dmsolve_extract (const MArray<T> &m, const octave_idx_type *,
diff --git a/liboctave/operators/Sparse-op-defs.h b/liboctave/operators/Sparse-op-defs.h
--- a/liboctave/operators/Sparse-op-defs.h
+++ b/liboctave/operators/Sparse-op-defs.h
@@ -1547,17 +1547,17 @@ along with Octave; see the file COPYING.
               for (octave_idx_type i = cidx (j); i < cidx (j + 1); i++) \
                 { \
                   ROW_EXPR; \
                 } \
             } \
           octave_idx_type nel = 0; \
           for (octave_idx_type i = 0; i < nr; i++) \
             if (tmp[i] != EL_TYPE ())  \
-              nel++ ; \
+              nel++; \
           retval = RET_TYPE (nr, static_cast<octave_idx_type> (1), nel); \
           retval.cidx (0) = 0; \
           retval.cidx (1) = nel; \
           nel = 0; \
           for (octave_idx_type i = 0; i < nr; i++) \
             if (tmp[i] != EL_TYPE ())  \
               { \
                 retval.data (nel) = tmp[i]; \
@@ -1574,17 +1574,17 @@ along with Octave; see the file COPYING.
               for (octave_idx_type i = cidx (j); i < cidx (j + 1); i++) \
                 { \
                   COL_EXPR; \
                 } \
             } \
           octave_idx_type nel = 0; \
           for (octave_idx_type i = 0; i < nc; i++) \
             if (tmp[i] != EL_TYPE ())  \
-              nel++ ; \
+              nel++; \
           retval = RET_TYPE (static_cast<octave_idx_type> (1), nc, nel); \
           retval.cidx (0) = 0; \
           nel = 0; \
           for (octave_idx_type i = 0; i < nc; i++) \
             if (tmp[i] != EL_TYPE ())  \
               { \
                 retval.data (nel) = tmp[i]; \
                 retval.ridx (nel++) = 0; \
diff --git a/scripts/deprecated/bicubic.m b/scripts/deprecated/bicubic.m
--- a/scripts/deprecated/bicubic.m
+++ b/scripts/deprecated/bicubic.m
@@ -83,17 +83,17 @@ function zi = bicubic (x, y, z, xi, yi, 
     if (! isvector (x) || ! isvector (y))
       error ("bicubic: XI and YI must be vector");
     endif
     s = y;
     t = z;
     z = x;
     [rz, cz] = size (z);
   elseif (nargin == 5 || nargin == 6)
-    [rz, cz] = size (z) ;
+    [rz, cz] = size (z);
     if (isvector (x) && isvector (y))
       if (rz != length (y) || cz != length (x))
         error ("bicubic: length of X and Y must match the size of Z");
       endif
     elseif (size_equal (x, y) && size_equal (x, z))
       x = x(1,:);
       y = y(:,1);
     else
@@ -182,17 +182,17 @@ function zi = bicubic (x, y, z, xi, yi, 
 
   p = zeros (size (z) + 2);
   p(2:rz+1,2:cz+1) = z;
   p(1,:) =    (6*(1-a))*p(2,:)    - 3*p(3,:)  + (6*a-2)*p(4,:);
   p(rz+2,:) = (6*(1-a))*p(rz+1,:) - 3*p(rz,:) + (6*a-2)*p(rz-1,:);
   p(:,1) =    (6*(1-a))*p(:,2)    - 3*p(:,3)  + (6*a-2)*p(:,4);
   p(:,cz+2) = (6*(1-a))*p(:,cz+1) - 3*p(:,cz) + (6*a-2)*p(:,cz-1);
 
-  ## Calculte the C1(t) C2(t) C3(t) C4(t) and C1(s) C2(s) C3(s) C4(s).
+  ## Calculate the C1(t) C2(t) C3(t) C4(t) and C1(s) C2(s) C3(s) C4(s).
   t2 = t.*t;
   t3 = t2.*t;
 
   ct0 =    -a .* t3 +     (2 * a) .* t2 - a .* t ;      # -a G0
   ct1 = (2-a) .* t3 +      (-3+a) .* t2          + 1 ;  # F0 - a G1
   ct2 = (a-2) .* t3 + (-2 *a + 3) .* t2 + a .* t ;      # F1 + a G0
   ct3 =     a .* t3 -           a .* t2;                # a G1
   t = []; t2 = []; t3 = [];
diff --git a/scripts/sparse/sprandsym.m b/scripts/sparse/sprandsym.m
--- a/scripts/sparse/sprandsym.m
+++ b/scripts/sparse/sprandsym.m
@@ -128,17 +128,17 @@ function r = pick_rand_diag (n, k)
   a = n*(n - 1)/2;
   d = [mod(k,2):2:min(n,k)-2];
   m = (k - d)/2;
   q = (n - d).*(n - d - 1).*m ./ (d + 2)./(d + 1)./(a - m + 1);
 
   ## Slight modification from discussion above: pivot around the max in
   ## order to avoid overflow (underflow is fine, just means effectively
   ## zero probabilities).
-  [~, midx] = max (cumsum (log (q))) ;
+  [~, midx] = max (cumsum (log (q)));
   midx += 1;
   lc = fliplr (cumprod (1./q(midx-1:-1:1)));
   rc = cumprod (q(midx:end));
 
   ## Now c = t(i)/t(midx), so c > 1 == [].
   c = [lc, 1, rc];
   s = sum (c);
   p = c/s;
