# HG changeset patch
# User Rik <rik@octave.org>
# Date 1454095943 28800
#      Fri Jan 29 11:32:23 2016 -0800
# Node ID bfd5e48c41a192cef3204d9e3649c88826a6a307
# Parent  f090661930ba14afdb346b6f6abf400a76a80776
Rename local error in mex I/F from invalid_type_error to err_invalid_type.
Switch from using class method mxArray_base::error to error from error.h

* mex.cc (mxArray_base::error, mxArray_matlab::invalid_type_error):
Delete functions.
* mex.cc (mxArray_matlab::err_invalid_type): New function declared with
OCTAVE_NORETURN.
* mex.cc: #include "error.h".  Rename all invalid_type_error calls to
err_invalid_type.  Remove useless statements appearing after calls to
err_invalid_type.

* mxarray.in.h: #include "error.h".  Rename all invalid_type_error calls to
err_invalid_type.
* mxarray.in.h (mxArray_base::err_invalid_type): New function declared with
OCTAVE_NORETURN.
* mxarray.in.h (mxArray_base::invalid_type_error): Add OCTAVE_DEPRECATED
attribute to function.

diff --git a/libinterp/corefcn/mex.cc b/libinterp/corefcn/mex.cc
--- a/libinterp/corefcn/mex.cc
+++ b/libinterp/corefcn/mex.cc
@@ -31,16 +31,17 @@ along with Octave; see the file COPYING.
 
 #include <set>
 
 #include "f77-fcn.h"
 #include "lo-ieee.h"
 #include "oct-locbuf.h"
 
 #include "Cell.h"
+#include "error.h"
 // mxArray must be declared as a class before including mexproto.h.
 #include "mxarray.h"
 #include "mexproto.h"
 #include "oct-map.h"
 #include "ovl.h"
 #include "ov.h"
 #include "ov-mex-fcn.h"
 #include "ov-usr-fcn.h"
@@ -99,23 +100,16 @@ valid_key (const char *key)
 
 done:
 
   return retval;
 }
 
 // ------------------------------------------------------------------
 
-void
-mxArray_base::error (const char *msg) const
-{
-  // FIXME
-  ::error ("%s", msg);
-}
-
 static mwIndex
 calc_single_subscript_internal (mwSize ndims, const mwSize *dims,
                                 mwSize nsubs, const mwIndex *subs)
 {
   mwIndex retval = 0;
 
   switch (nsubs)
     {
@@ -787,136 +781,123 @@ public:
   {
     mxFree (class_name);
     class_name = static_cast<char *> (mxArray::malloc (strlen (name_arg) + 1));
     strcpy (class_name, name_arg);
   }
 
   mxArray *get_cell (mwIndex /*idx*/) const
   {
-    invalid_type_error ();
-    return 0;
+    err_invalid_type ();
   }
 
   void set_cell (mwIndex /*idx*/, mxArray */*val*/)
   {
-    invalid_type_error ();
+    err_invalid_type ();
   }
 
   double get_scalar (void) const
   {
-    invalid_type_error ();
-    return 0;
+    err_invalid_type ();
   }
 
   void *get_data (void) const
   {
-    invalid_type_error ();
-    return 0;
+    err_invalid_type ();
   }
 
   void *get_imag_data (void) const
   {
-    invalid_type_error ();
-    return 0;
+    err_invalid_type ();
   }
 
   void set_data (void */*pr*/)
   {
-    invalid_type_error ();
+    err_invalid_type ();
   }
 
   void set_imag_data (void */*pi*/)
   {
-    invalid_type_error ();
+    err_invalid_type ();
   }
 
   mwIndex *get_ir (void) const
   {
-    invalid_type_error ();
-    return 0;
+    err_invalid_type ();
   }
 
   mwIndex *get_jc (void) const
   {
-    invalid_type_error ();
-    return 0;
+    err_invalid_type ();
   }
 
   mwSize get_nzmax (void) const
   {
-    invalid_type_error ();
-    return 0;
+    err_invalid_type ();
   }
 
   void set_ir (mwIndex */*ir*/)
   {
-    invalid_type_error ();
+    err_invalid_type ();
   }
 
   void set_jc (mwIndex */*jc*/)
   {
-    invalid_type_error ();
+    err_invalid_type ();
   }
 
   void set_nzmax (mwSize /*nzmax*/)
   {
-    invalid_type_error ();
+    err_invalid_type ();
   }
 
   int add_field (const char */*key*/)
   {
-    invalid_type_error ();
-    return -1;
+    err_invalid_type ();
   }
 
   void remove_field (int /*key_num*/)
   {
-    invalid_type_error ();
+    err_invalid_type ();
   }
 
   mxArray *get_field_by_number (mwIndex /*index*/, int /*key_num*/) const
   {
-    invalid_type_error ();
-    return 0;
+    err_invalid_type ();
   }
 
   void set_field_by_number (mwIndex /*index*/, int /*key_num*/,
                             mxArray */*val*/)
   {
-    invalid_type_error ();
+    err_invalid_type ();
   }
 
   int get_number_of_fields (void) const
   {
-    invalid_type_error ();
-    return 0;
+    err_invalid_type ();
   }
 
   const char *get_field_name_by_number (int /*key_num*/) const
   {
-    invalid_type_error ();
-    return 0;
+    err_invalid_type ();
   }
 
   int get_field_number (const char */*key*/) const
   {
     return -1;
   }
 
   int get_string (char */*buf*/, mwSize /*buflen*/) const
   {
-    invalid_type_error ();
-    return 0;
+    err_invalid_type ();
   }
 
   char *array_to_string (void) const
   {
-    invalid_type_error ();
-    return 0;
+    err_invalid_type ();
   }
 
   mwIndex calc_single_subscript (mwSize nsubs, mwIndex *subs) const
   {
     return calc_single_subscript_internal (ndims, dims, nsubs, subs);
   }
 
   size_t get_element_size (void) const
@@ -973,23 +954,24 @@ private:
 
   char *class_name;
 
   mxClassID id;
 
   mwSize ndims;
   mwSize *dims;
 
-  void invalid_type_error (void) const
+  OCTAVE_NORETURN void err_invalid_type (void) const
   {
     error ("invalid type for operation");
   }
 
-  // No assignment!  FIXME: should this be implemented?  Note that we
-  // do have a copy constructor.
+  // No assignment!
+  // FIXME: should this be implemented?
+  //        Note that we *do* have a copy constructor.
 
   mxArray_matlab& operator = (const mxArray_matlab&);
 };
 
 // Matlab-style numeric, character, and logical data.
 
 class mxArray_number : public mxArray_matlab
 {
@@ -1337,37 +1319,31 @@ public:
   }
 
 protected:
 
   template <typename ELT_T, typename ARRAY_T, typename ARRAY_ELT_T>
   octave_value
   int_to_ov (const dim_vector& dv) const
   {
-    octave_value retval;
+    if (pi)
+      error ("complex integer types are not supported");
 
     mwSize nel = get_number_of_elements ();
 
     ELT_T *ppr = static_cast<ELT_T *> (pr);
 
-    if (pi)
-      error ("complex integer types are not supported");
-    else
-      {
-        ARRAY_T val (dv);
-
-        ARRAY_ELT_T *ptr = val.fortran_vec ();
-
-        for (mwIndex i = 0; i < nel; i++)
-          ptr[i] = ppr[i];
-
-        retval = val;
-      }
-
-    return retval;
+    ARRAY_T val (dv);
+
+    ARRAY_ELT_T *ptr = val.fortran_vec ();
+
+    for (mwIndex i = 0; i < nel; i++)
+      ptr[i] = ppr[i];
+
+    return octave_value (val);
   }
 
   mxArray_number (const mxArray_number& val)
     : mxArray_matlab (val),
       pr (mxArray::malloc (get_number_of_elements () * get_element_size ())),
       pi (val.pi ? mxArray::malloc (get_number_of_elements ()
                                     * get_element_size ())
                  : 0)
@@ -2059,17 +2035,16 @@ public:
   // Allocate memory.
   void *malloc_unmarked (size_t n)
   {
     void *ptr = gnulib::malloc (n);
 
     if (! ptr)
       {
         // FIXME: could use "octave_new_handler();" instead
-
         error ("%s: failed to allocate %d bytes of memory",
                function_name (), n);
       }
 
     global_mark (ptr);
 
     return ptr;
   }
@@ -3073,16 +3048,18 @@ mexCallMATLAB (int nargout, mxArray *arg
 {
   octave_value_list args;
 
   // FIXME: do we need unwind protect to clean up args?  Off hand, I
   // would say that this problem is endemic to Octave and we will
   // continue to have memory leaks after Ctrl-C until proper exception
   // handling is implemented.
 
+  // FIXME: Proper exception handling has been implemented (Jan. 2016).
+  //        Can this code be re-factored?
   args.resize (nargin);
 
   for (int i = 0; i < nargin; i++)
     args(i) = mxArray::as_octave_value (argin[i]);
 
   bool execution_error = false;
 
   octave_value_list retval;
diff --git a/libinterp/corefcn/mxarray.in.h b/libinterp/corefcn/mxarray.in.h
--- a/libinterp/corefcn/mxarray.in.h
+++ b/libinterp/corefcn/mxarray.in.h
@@ -88,16 +88,17 @@ typedef char mxChar;
  */
 typedef %OCTAVE_IDX_TYPE% mwSize;
 typedef %OCTAVE_IDX_TYPE% mwIndex;
 typedef %OCTAVE_IDX_TYPE% mwSignedIndex;
 
 #if ! defined (MXARRAY_TYPEDEFS_ONLY)
 
 #include <cstring>
+#include "error.h"
 
 class octave_value;
 
 #define DO_MUTABLE_METHOD(RET_T, METHOD_CALL) \
   RET_T retval = rep->METHOD_CALL; \
  \
   if (rep->mutation_needed ()) \
     { \
@@ -111,20 +112,20 @@ class octave_value;
   rep->METHOD_CALL; \
  \
   if (rep->mutation_needed ()) \
     { \
       maybe_mutate (); \
       rep->METHOD_CALL; \
     }
 
-// A class to provide the default implemenation of some of the virtual
-// functions declared in the mxArray class.
+class mxArray;
 
-class mxArray;
+// A class to provide the default implementation of some of the
+// virtual functions declared in the mxArray class.
 
 class mxArray_base
 {
 protected:
 
   mxArray_base (void) { }
 
 public:
@@ -211,20 +212,21 @@ public:
   virtual int is_empty (void) const = 0;
 
   virtual mxClassID get_class_id (void) const = 0;
 
   virtual const char *get_class_name (void) const = 0;
 
   virtual void set_class_name (const char *name_arg) = 0;
 
+  // FIXME: Why not just have this '= 0' as the others?
+  // Could then eliminate err_invalid_type function and #include "error.h".
   virtual mxArray *get_cell (mwIndex /*idx*/) const
   {
-    invalid_type_error ();
-    return 0;
+    err_invalid_type ();
   }
 
   virtual void set_cell (mwIndex idx, mxArray *val) = 0;
 
   virtual double get_scalar (void) const = 0;
 
   virtual void *get_data (void) const = 0;
 
@@ -274,22 +276,27 @@ public:
   virtual mxArray *mutate (void) const { return 0; }
 
   virtual octave_value as_octave_value (void) const = 0;
 
 protected:
 
   mxArray_base (const mxArray_base&) { }
 
+  // FIXME: Deprecated in 4.2, remove in 4.6
+  OCTAVE_DEPRECATED ("use 'err_invalid_type' instead")
   void invalid_type_error (void) const
   {
     error ("invalid type for operation");
   }
 
-  void error (const char *msg) const;
+  OCTAVE_NORETURN void err_invalid_type (void) const
+  {
+    error ("invalid type for operation");
+  }
 };
 
 // The main interface class.  The representation can be based on an
 // octave_value object or a separate object that tries to reproduce
 // the semantics of mxArray objects in Matlab more directly.
 
 class mxArray
 {
