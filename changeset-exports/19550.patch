# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1420741247 18000
#      Thu Jan 08 13:20:47 2015 -0500
# Node ID 0083cc91bfaa22cc8ddd29bf8272fb19beb1d12a
# Parent  c332c72d496078ea22704a60e6a4dedbb020503a
* audiodevinfo.cc: Style fixes.

diff --git a/libinterp/dldfcn/audiodevinfo.cc b/libinterp/dldfcn/audiodevinfo.cc
--- a/libinterp/dldfcn/audiodevinfo.cc
+++ b/libinterp/dldfcn/audiodevinfo.cc
@@ -730,56 +730,56 @@ portaudio_play_callback (const void *, v
             return paComplete;
 
           unsigned long offset = j * 2;
 
           buffer[offset+0] = pl[sample_number];
           buffer[offset+1] = pr[sample_number];
 
           player->set_sample_number (sample_number + 1);
-        }  
+        }
     }
- else if (player->get_type () == UINT8)
-   {
-     uint8_t *buffer = static_cast<uint8_t *> (output);
-
-     for (unsigned long j = 0; j < frames; j++)
-       {
-         unsigned int sample_number = player->get_sample_number ();
-
-         if (sample_number >= player->get_end_sample ())
-           return paComplete;
-
-         unsigned long offset = j * 2;
-
-         buffer[offset+0] = pl[sample_number];
-         buffer[offset+1] = pr[sample_number];
-
-         player->set_sample_number (sample_number + 1);
-       }
-   }
- else if (player->get_type () == INT16)
-   {
-     int16_t *buffer = static_cast<int16_t *> (output);
-
-     for (unsigned long j = 0; j < frames; j++)
-       {
-         unsigned int sample_number = player->get_sample_number ();
-
-         if (sample_number >= player->get_end_sample ())
-           return paComplete;
-
-         unsigned long offset = j * 2;
-
-         buffer[offset+0] = pl[sample_number];
-         buffer[offset+1] = pr[sample_number];
-
-         player->set_sample_number (sample_number + 1);
-       }
-     }
+  else if (player->get_type () == UINT8)
+    {
+      uint8_t *buffer = static_cast<uint8_t *> (output);
+
+      for (unsigned long j = 0; j < frames; j++)
+        {
+          unsigned int sample_number = player->get_sample_number ();
+
+          if (sample_number >= player->get_end_sample ())
+            return paComplete;
+
+          unsigned long offset = j * 2;
+
+          buffer[offset+0] = pl[sample_number];
+          buffer[offset+1] = pr[sample_number];
+
+          player->set_sample_number (sample_number + 1);
+        }
+    }
+  else if (player->get_type () == INT16)
+    {
+      int16_t *buffer = static_cast<int16_t *> (output);
+
+      for (unsigned long j = 0; j < frames; j++)
+        {
+          unsigned int sample_number = player->get_sample_number ();
+
+          if (sample_number >= player->get_end_sample ())
+            return paComplete;
+
+          unsigned long offset = j * 2;
+
+          buffer[offset+0] = pl[sample_number];
+          buffer[offset+1] = pr[sample_number];
+
+          player->set_sample_number (sample_number + 1);
+        }
+    }
 
   return paContinue;
 }
 
 audioplayer::audioplayer (void)
   : octave_callback_function (0),
     id (-1), fs (0), nbits (16), channels (0), sample_number (0),
     end_sample (-1), tag (""), y (), userdata (Matrix ()),
@@ -2302,16 +2302,17 @@ Undocumented internal function.\n\
 
   recorder->set_fs (args(1).int_value ());
 
   switch (nargin)
     {
     case 3:
       recorder->set_nbits (args(2).int_value ());
       break;
+
     case 4:
       recorder->set_nbits (args(2).int_value ());
       recorder->set_id (args(3).int_value ());
       break;
     }
 
   if (is_function)
     recorder->init_fn ();
