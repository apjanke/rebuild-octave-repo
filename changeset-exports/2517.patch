# HG changeset patch
# User jwe
# Date 848003043 0
#      Thu Nov 14 20:24:03 1996 +0000
# Node ID 0c5e671499ed37441b11e9f3364d4f9e08686810
# Parent  70cad7ffd946ea4d15f0c0951cf50b2374197d41
[project @ 1996-11-14 20:24:02 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,15 @@
 Thu Nov 14 00:06:19 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* variables.cc (parse_fcn_file): Add unwind-protect for file
+	pointer, so the file is always closed.
+	(get_help_from_file): Likewise.
+	* toplev.cc (parse_and_execute): Likewise.
+
 	* Makefile.in (install-oct): Depend on mk-oct-links.
 	(mk-oct-links): New target.
 
 	* Version 1.92.
 
 Wed Nov 13 11:13:22 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* sighandlers.cc (sys_siglist): [__EMX__]: Add definitions.
diff --git a/src/mk-oct-links.in b/src/mk-oct-links.in
--- a/src/mk-oct-links.in
+++ b/src/mk-oct-links.in
@@ -2,17 +2,17 @@
 
 # Create additional links to .oct files that define more than one
 # function.
 
 # The first arg is taken as the directory where the .oct files are
 # installed.  The remaining arguments should be the list of source
 # files that were used to create the .oct files.
 
-LN_S="@LN_S@"
+LN_S="%LN_S%"
 
 links_dir=$1
 shift
 
 for f in "$@"; do
   base=`basename $f | sed 's/\.cc$//'`
   fcns=`grep -h '^ *DEFUN_DLD' $f |\
         sed -e 's/DEFUN_DLD *( *//' -e 's/ *,.*$//' |\
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -158,49 +158,56 @@ parse_and_execute (FILE *f, int print)
 	  delete global_command;
 	}
     }
   while (retval == 0);
 
   run_unwind_frame ("parse_and_execute");
 }
 
+static void
+safe_fclose (void *f)
+{
+  if (f)
+    fclose ((FILE *) f);
+}
+
 void
 parse_and_execute (const string& s, int print, int verbose,
 		   const char *warn_for)
 {
   begin_unwind_frame ("parse_and_execute_2");
 
   unwind_protect_int (reading_script_file);
   unwind_protect_str (curr_fcn_file_full_name);
 
   reading_script_file = 1;
   curr_fcn_file_full_name = s;
 
   FILE *f = get_input_from_file (s, 0);
 
   if (f)
     {
+      add_unwind_protect (safe_fclose, (void *) f);
+
       unwind_protect_int (input_line_number);
       unwind_protect_int (current_input_column);
 
       input_line_number = 0;
       current_input_column = 1;
 
       if (verbose)
 	{
 	  cout << "reading commands from " << s << " ... ";
 	  reading_startup_message_printed = 1;
 	  cout.flush ();
 	}
 
       parse_and_execute (f, print);
 
-      fclose (f);
-
       if (verbose)
 	cout << "done." << endl;
     }
   else if (warn_for)
     error ("%s: unable to open file `%s'", warn_for, s.c_str ());
 
   run_unwind_frame ("parse_and_execute_2");
 }
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -585,16 +585,23 @@ is_function_file (FILE *ffile)
 }
 
 static void
 restore_command_history (void *)
 {
   octave_command_history.ignore_entries (! Vsaving_history);
 }
 
+static void
+safe_fclose (void *f)
+{
+  if (f)
+    fclose ((FILE *) f);
+}
+
 static int
 parse_fcn_file (int exec_script, const string& ff)
 {
   begin_unwind_frame ("parse_fcn_file");
 
   int script_file_executed = 0;
 
   // Open function file and parse.
@@ -611,16 +618,18 @@ parse_fcn_file (int exec_script, const s
 
   using_readline = 0;
   reading_fcn_file = 1;
   input_line_number = 0;
   current_input_column = 1;
 
   FILE *ffile = get_input_from_file (ff, 0);
 
+  add_unwind_protect (safe_fclose, (void *) ffile);
+
   if (ffile)
     {
       // Check to see if this file defines a function or is just a
       // list of commands.
 
       if (is_function_file (ffile))
 	{
 	  // XXX FIXME XXX -- we shouldn't need both the
@@ -684,17 +693,16 @@ parse_fcn_file (int exec_script, const s
 
 	  Vsaving_history = 0;
 	  reading_script_file = 1;
 
 	  parse_and_execute (ffile, 1);
 
 	  script_file_executed = 1;
 	}
-      fclose (ffile);
     }
 
   run_unwind_frame ("parse_fcn_file");
 
   return script_file_executed;
 }
 
 static bool
@@ -782,18 +790,21 @@ get_help_from_file (const string& path)
   string retval;
 
   if (! path.empty ())
     {
       FILE *fptr = fopen (path.c_str (), "r");
 
       if (fptr)
 	{
+	  add_unwind_protect (safe_fclose, (void *) fptr);
+
 	  retval = gobble_leading_white_space (fptr, true, true);
-	  fclose (fptr);
+
+	  run_unwind_protect ();
 	}
     }
 
   return retval;
 }
 
 // Variable values.
 
