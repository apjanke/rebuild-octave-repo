# HG changeset patch
# User jwe
# Date 1096660780 0
#      Fri Oct 01 19:59:40 2004 +0000
# Node ID 3914c4ad3ffab91fb7cc5c064476a932329b89cf
# Parent  b2ce2871379149b32c0388dec78f2a91c65fafd1
[project @ 2004-10-01 19:59:40 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2004-10-01  John W. Eaton  <jwe@octave.org>
+
+	* ov-range.h (octave_range::valid_as_scalar_index): Ensure int value.
+	(octave_range::valid_as_zero_index): Likewise.
+
+	* ov-scalar.h (octave_scalar::valid_as_scalar_index): Ensure int value.
+	(octave_scalar::valid_as_zero_index): Likewise.
+
 2004-09-24  John W. Eaton  <jwe@octave.org>
 
 	* version.h (OCTAVE_VERSION): Now 2.1.60.
 	(OCTAVE_API_VERSION): Now api-v11.
 
 	* OPERATORS/op-int.h (OCTAVE_MM_INT_OPS): Include missing matrix
 	by int matrix ops.
 	(OCTAVE_INSTALL_MM_INT_OPS): Install them.
diff --git a/src/ov-range.h b/src/ov-range.h
--- a/src/ov-range.h
+++ b/src/ov-range.h
@@ -125,26 +125,26 @@ public:
   octave_value all (int dim = 0) const;
 
   octave_value any (int dim = 0) const;
 
   bool is_real_type (void) const { return true; }
 
   bool valid_as_scalar_index (void) const
     {
+      double b = range.base ();
       return (range.nelem () == 1
-	      && ! xisnan (range.base ())
-	      && NINT (range.base ()) == 1);
+	      && ! xisnan (b) && D_NINT (b) == b && NINT (b) == 1);
     }
 
   bool valid_as_zero_index (void) const
     {
+      double b = range.base ();
       return (range.nelem () == 1
-	      && ! xisnan (range.base ())
-	      && NINT (range.base ()) == 0);
+	      && ! xisnan (b) && D_NINT (b) == b && NINT (b) == 0);
     }
 
   bool is_numeric_type (void) const { return true; }
 
   // XXX DO ME XXX
   bool is_true (void) const;
 
   double double_value (bool = false) const;
diff --git a/src/ov-scalar.h b/src/ov-scalar.h
--- a/src/ov-scalar.h
+++ b/src/ov-scalar.h
@@ -77,20 +77,28 @@ public:
 
   idx_vector index_vector (void) const { return idx_vector (scalar); }
 
   bool is_real_scalar (void) const { return true; }
 
   bool is_real_type (void) const { return true; }
 
   bool valid_as_scalar_index (void) const
-    { return (! xisnan (scalar) && NINT (scalar) == 1); }
+    {
+      return (! xisnan (scalar)
+	      && D_NINT (scalar) == scalar
+	      && NINT (scalar) == 1);
+    }
 
   bool valid_as_zero_index (void) const
-    { return (! xisnan (scalar) && NINT (scalar) == 0); }
+    {
+      return (! xisnan (scalar)
+	      && D_NINT (scalar) == scalar
+	      && NINT (scalar) == 0);
+    }
 
   double double_value (bool = false) const { return scalar; }
 
   double scalar_value (bool = false) const { return scalar; }
 
   Matrix matrix_value (bool = false) const
     { return Matrix (1, 1, scalar); }
 
