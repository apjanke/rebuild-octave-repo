# HG changeset patch
# User jwe
# Date 949441083 0
#      Tue Feb 01 21:38:03 2000 +0000
# Node ID 5fcfe05d76e10b71d753ff5f6d46c84e4354a6dc
# Parent  00fdd363c098bf0b1384d3595e7db506a61de87d
[project @ 2000-02-01 21:38:03 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,12 @@
 2000-02-01  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* base-de.h: Use tt instead of t as arg names.
+
 	* DASSL.cc (dassl_fcn_ptr, dassl_jac_ptr): New typedefs.
 	* LSODE.cc: lsode_fcn_ptr, lsode_jac_ptr): Ditto.
 	* Quad.cc (quad_fcn_ptr): Ditto.
 	* NLEqn.cc (hybrd1_fcn_ptr, hybrj1_fcn_ptr): Ditto.
 
 	* oct-getopt.h, oct-getopt.c: New files for interface to getopt.
 
 	* oct-kpse.h, oct-kpse.c: New files for interface to kpathsearch.
diff --git a/liboctave/base-de.h b/liboctave/base-de.h
--- a/liboctave/base-de.h
+++ b/liboctave/base-de.h
@@ -48,53 +48,53 @@ public:
 	}
       return *this;
     }
 
   // Derived classes must provide functions to actually do the
   // integration.
 
   // Return the vector of states at output time t.
-  virtual ColumnVector do_integrate (double t) = 0;
+  virtual ColumnVector do_integrate (double tt) = 0;
 
   // Return a matrix of states at each output time specified by t.
   // The rows of the result matrix should each correspond to a new
   // output time.
-  virtual Matrix do_integrate (const ColumnVector& t) = 0;
+  virtual Matrix do_integrate (const ColumnVector& tt) = 0;
 
   // There must also be a way for us to force the integration to
   // restart.
   virtual void force_restart (void) = 0;
 
   // Lots of ways to call the single function and optionally set and
   // get additional information.
 
   // Integrate to t from current point.
-  virtual ColumnVector integrate (double t)
-    { return do_integrate (t); }
+  virtual ColumnVector integrate (double tt)
+    { return do_integrate (tt); }
 
   // Set new x0, t0 and integrate to t.
-  virtual ColumnVector integrate (const ColumnVector& x0, double t0, double t)
+  virtual ColumnVector integrate (const ColumnVector& x0, double t0, double tt)
     {
       initialize (x0, t0);
-      return do_integrate (t);
+      return do_integrate (tt);
     }
 
   // Integrate from current point and return output at all points
   // specified by t.
-  virtual Matrix integrate (const ColumnVector t)
-    { return do_integrate (t); }
+  virtual Matrix integrate (const ColumnVector tt)
+    { return do_integrate (tt); }
 
   // Set new x0, t0 and integrate to return output at all points
   // specified by t.
   virtual Matrix integrate (const ColumnVector& x0, double t0,
-			    const ColumnVector t)
+			    const ColumnVector tt)
     {
       initialize (x0, t0);
-      return do_integrate (t);
+      return do_integrate (tt);
     }
 
   virtual void initialize (const ColumnVector& x0, double t0)
     {
       x = x0;
       t = t0;
       force_restart ();
     }
