# HG changeset patch
# User shaiay@users.sourceforge.net
# Date 1252948399 14400
#      Mon Sep 14 13:13:19 2009 -0400
# Node ID 110863cd337118ee883712f4e6a1260276fc851a
# Parent  8d79f36ebdde886f148ec9f789019bf8b0e2390b
more bug fixes in fltk zoom

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2009-09-14  Shai Ayal  <shaiay@users.sourceforge.net>
+
+	* DLD-FUNCTIONS/fltk_backend.cc (plot_window::pixel2status,
+	plot_window::pixel2pos): New argument AXES, which the
+	coordinates are relative to.
+	(plot_window::handle): Pass axes to pixel2status and pixel2pos.
+
 2009-09-14  Jaroslav Hajek  <highegg@gmail.com>
 
 	* symtab.h (symbol_table::curr_fcn): New member field.
 	(symbol_table::get_curr_fcn, symbol_table::set_curr_fcn): New member
 	funcs.
 	* symtab.cc (symbol_table::fcn_info::fcn_info_rep::xfind): Use
 	symbol_table::get_curr_fcn.
 	(symbol_table::fcn_info::fcn_info_rep::x_builtin_find): Ditto.
diff --git a/src/DLD-FUNCTIONS/fltk_backend.cc b/src/DLD-FUNCTIONS/fltk_backend.cc
--- a/src/DLD-FUNCTIONS/fltk_backend.cc
+++ b/src/DLD-FUNCTIONS/fltk_backend.cc
@@ -84,17 +84,18 @@ public:
     : Fl_Gl_Window (xx, yy, ww, hh, 0), number (num), in_zoom (false)
   {
     // ask for double buffering and a depth buffer
     mode (FL_DEPTH | FL_DOUBLE);
   }
 
   ~OpenGL_fltk (void) { }
 
-  void zoom (bool z) { in_zoom = z; }
+  void zoom (bool z) 
+  {in_zoom = z; if (!in_zoom) hide_overlay ();}
   bool zoom (void) { return in_zoom; }
   void set_zoom_box (const Matrix& zb) { zoom_box = zb; }
 
 private:
   double number;
   opengl_renderer renderer;
   bool in_zoom;
 
@@ -226,17 +227,17 @@ public:
 		   status_h, "");
 
       status->textcolor (FL_BLACK);
       status->color (FL_GRAY);
       status->textfont (FL_COURIER);
       status->textsize (10);
       status->box (FL_ENGRAVED_BOX);
 
-      // This allows us to have a valid OpenGL context right away
+      //This allows us to have a valid OpenGL context right away
       canvas->mode (FL_DEPTH | FL_DOUBLE );
       show ();
       canvas->show ();
       canvas->make_current ();
     }
     end ();
 
     status->show ();
@@ -317,20 +318,25 @@ private:
   }
 
   void toggle_grid (void)
   {
     feval ("grid");
     mark_modified ();
   }
 
-  void pixel2pos (int px, int py, double& xx, double& yy) const
+  void pixel2pos 
+  (graphics_handle ax, int px, int py, double& xx, double& yy) const
   {
-    graphics_object ax = gh_manager::get_object (fp.get_currentaxes ());
+    pixel2pos ( gh_manager::get_object (ax), px, py, xx, yy);
+  }
 
+  void pixel2pos 
+  (graphics_object ax, int px, int py, double& xx, double& yy) const
+  {
     if (ax && ax.isa ("axes"))
       {
 	axes::properties& ap =
 	  dynamic_cast<axes::properties&> (ax.get_properties ());
 	ColumnVector pp = ap.pixel2coord (px, py);
 	xx = pp(0);
 	yy = pp(1);
       }
@@ -359,26 +365,32 @@ private:
 		    return hnd;
 		  }
 	      }
 	  }
       }
     return fp.get_currentaxes ();
   }
   
-  void pixel2status (int px0, int py0, int px1 = -1, int py1 = -1)
+  void pixel2status 
+  (graphics_handle ax, int px0, int py0, int px1 = -1, int py1 = -1)
+  {
+    pixel2status (gh_manager::get_object (ax), px0, py0, px1, py1);
+  }
+  void pixel2status 
+  (graphics_object ax, int px0, int py0, int px1 = -1, int py1 = -1)
   {
     double x0, y0, x1, y1;
     std::stringstream cbuf;
 
-    pixel2pos (px0, py0, x0, y0);
+    pixel2pos (ax, px0, py0, x0, y0);
     cbuf << "[" << x0 << ", " << y0 << "]";
     if (px1 >= 0)
       {
-	pixel2pos (px1, py1, x1, y1);
+	pixel2pos (ax, px1, py1, x1, y1);
 	cbuf << " -> ["<< x1 << ", " << y1 << "]";
       }
 
     status->value (cbuf.str ().c_str ());
     status->redraw ();
   }
 
   void resize (int _x,int _y,int _w,int _h)
@@ -400,16 +412,18 @@ private:
     Fl_Window::resize (pos(0), pos(1) , pos(2), pos(3) + status_h);
 
     return Fl_Window::draw ();
   }
 
   int handle (int event)
   {
     static int px0,py0;
+    static graphics_object ax0;
+
 
     int retval = Fl_Window::handle (event);
 
     // we only handle events which are in the canvas area
     if (Fl::event_y () >= h() - status_h)
       return retval;
 
     switch (event)
@@ -425,42 +439,42 @@ private:
 	  case 'g':
 	  case 'G':
 	    toggle_grid ();
 	    break;
 	  }
 	break;
 
       case FL_MOVE:
-	pixel2status (Fl::event_x (), Fl::event_y ());
+	pixel2status (pixel2axes_or_ca (Fl::event_x (), Fl::event_y ()),
+		      Fl::event_x (), Fl::event_y ());
 	break;
 
       case FL_PUSH:
 	if (Fl::event_button () == 1 || Fl::event_button () == 3)
 	  {
 	    px0 = Fl::event_x ();
 	    py0 = Fl::event_y ();
+	    ax0 = gh_manager::get_object (pixel2axes_or_ca (px0, py0));
 	    return 1;
 	  }
 	break;
 
       case FL_DRAG:
-	pixel2status (px0, py0, Fl::event_x (), Fl::event_y ());
+	pixel2status (ax0, px0, py0, Fl::event_x (), Fl::event_y ());
 	if (Fl::event_button () == 1)
 	  {
-	    graphics_object ax = 
-	      gh_manager::get_object (pixel2axes_or_ca (px0, py0));
-            if (ax && ax.isa ("axes"))
+            if (ax0 && ax0.isa ("axes"))
               {
                 axes::properties& ap = 
-		  dynamic_cast<axes::properties&> (ax.get_properties ());
+		  dynamic_cast<axes::properties&> (ax0.get_properties ());
               
                 double x0, y0, x1, y1;
-                pixel2pos (px0, py0, x0, y0);
-                pixel2pos (Fl::event_x (), Fl::event_y (), x1, y1);
+                pixel2pos (ax0, px0, py0, x0, y0);
+                pixel2pos (ax0, Fl::event_x (), Fl::event_y (), x1, y1);
                 px0 = Fl::event_x ();
                 py0 = Fl::event_y ();
 
                 ap.translate_view (x0 - x1, y0 - y1);
                 mark_modified ();
               }
 	    return 1;
 	  }
@@ -468,17 +482,16 @@ private:
 	  {
 	    canvas->zoom (true);
 	    Matrix zoom_box (1,4,0);
 	    zoom_box (0) = px0;
 	    zoom_box (1) = py0;
 	    zoom_box (2) =  Fl::event_x ();
 	    zoom_box (3) =  Fl::event_y ();
 	    canvas->set_zoom_box (zoom_box);
-	    canvas->redraw_overlay ();
 	  }
 
 	break;
 
       case FL_MOUSEWHEEL:
         {
           // Parameter controlling how fast we zoom. FIXME: Should
           // this be user tweakable?
@@ -493,58 +506,53 @@ private:
 		dynamic_cast<axes::properties&> (ax.get_properties ());
               
               // Determine if we're zooming in or out
               const double factor = 
 		(Fl::event_dy () > 0) ? 1.0 + zoom_speed : 1.0 - zoom_speed;
               
               // Get the point we're zooming about
               double x1, y1;
-              pixel2pos (Fl::event_x (), Fl::event_y (), x1, y1);
+              pixel2pos (ax, Fl::event_x (), Fl::event_y (), x1, y1);
               
               ap.zoom_about_point (x1, y1, factor, false);
               mark_modified ();
             }
 	}
       return 1;
 
       case FL_RELEASE:
 	if (Fl::event_button () == 1)
 	  {
 	    if ( Fl::event_clicks () == 1)
 	      {
-		graphics_object ax = 
-		  gh_manager::get_object (pixel2axes_or_ca (Fl::event_x (), 
-							    Fl::event_y ()));
-		if (ax && ax.isa ("axes"))
+		if (ax0 && ax0.isa ("axes"))
 		  {
 		    axes::properties& ap =
-		      dynamic_cast<axes::properties&> (ax.get_properties ());
+		      dynamic_cast<axes::properties&> (ax0.get_properties ());
 		    ap.set_xlimmode("auto");
 		    ap.set_ylimmode("auto");
 		    ap.set_zlimmode("auto");
 		    mark_modified ();
 		  }
 	      }
 	  }
 	if (Fl::event_button () == 3)
 	  {
 	    // end of drag -- zoom
 	    if (canvas->zoom ())
 	      {
 		canvas->zoom (false);
 		double x0,y0,x1,y1;
-		graphics_object ax = 
-		  gh_manager::get_object (pixel2axes_or_ca (px0, py0));
-		if (ax && ax.isa ("axes"))
+		if (ax0 && ax0.isa ("axes"))
 		  {
 		    axes::properties& ap =
-		      dynamic_cast<axes::properties&> (ax.get_properties ());
-		    pixel2pos (px0, py0, x0, y0);
-		    pixel2pos (Fl::event_x (), Fl::event_y (), x1, y1);
+		      dynamic_cast<axes::properties&> (ax0.get_properties ());
+		    pixel2pos (ax0, px0, py0, x0, y0);
+		    pixel2pos (ax0, Fl::event_x (), Fl::event_y (), x1, y1);
 		    Matrix xl (1,2,0);
 		    Matrix yl (1,2,0);
 		    if (x0 < x1)
 		      {
 			xl(0) = x0;
 			xl(1) = x1;
 		      }
 		    else
