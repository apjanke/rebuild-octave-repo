# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1211486426 -7200
#      Thu May 22 22:00:26 2008 +0200
# Node ID 12a68443191cb98fdace024862cfcabd29934889
# Parent  c250942674860b0f80824daa2dfab3ca5aa1a8d8
[mq]: cellstr

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2008-06-02  Jaroslav Hajek <highegg@gmail.com>
+
+	* strings/strcat.m: Add tests.
+
 2008-06-02  Kim Hansen  <kimhanse@gmail.com>
 
 	* strings/mat2str.m: Change is_complex to iscomplex, add tests, add
 	missing ;
 
 2008-05-20  David Bateman  <dbateman@free.fr>
 
 	* miscellaneous/single.m: Remove.
diff --git a/scripts/strings/strcat.m b/scripts/strings/strcat.m
--- a/scripts/strings/strcat.m
+++ b/scripts/strings/strcat.m
@@ -89,16 +89,18 @@ function st = strcat (varargin)
 endfunction
 
 ## test the dimensionality
 ## 1d
 %!assert(strcat("ab ", "ab "), "abab")
 %!assert(strcat({"ab "}, "ab "), {"ab ab"})
 %!assert(strcat("ab ", {"ab "}), {"abab "})
 %!assert(strcat({"ab "}, {"ab "}), {"ab ab "})
+%!assert(strcat("", "ab"), "ab")
+%!assert(strcat("", {"ab"}, {""}), {"ab"})
 ## 2d
 %!assert(strcat(["ab ";"cde"], ["ab ";"cde"]), ["abab  ";"cdecde"])
 
 ## test for deblanking implied trailing spaces of character input
 %!assert((strcmp (strcat ("foo", "bar"), "foobar") &&
 %!        strcmp (strcat (["a"; "bb"], ["foo"; "bar"]), ["afoo "; "bbbar"])));
 
 ## test for mixing character and cell inputs
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2008-06-02  Jaroslav Hajek <highegg@gmail.com>
+
+	* ov-cell.cc (Fcellstr): For compatibility with Matlab, return {''}
+	when given ''.
+
 2008-05-21  David Bateman  <dbateman@free.fr>
 
 	* DLD-FUNCTIONS/quad.cc (quad_float_user_function): New function.
 	(Fquad): Handle float type.
 	New tests.
 
 2008-05-21  Jaroslav Hajek <highegg@gmail.com>
 
diff --git a/src/ov-cell.cc b/src/ov-cell.cc
--- a/src/ov-cell.cc
+++ b/src/ov-cell.cc
@@ -1075,17 +1075,19 @@ array @var{string}.\n\
 
       if (tmp(0).is_true ())
 	retval = args(0);
       else
 	{
 	  string_vector s = args(0).all_strings ();
 
 	  if (! error_state)
-	    retval = Cell (s, true);
+	    retval = (s.is_empty ()
+                      ? Cell (octave_value (std::string ()))
+                      : Cell (s, true));
 	  else
 	    error ("cellstr: expecting argument to be a 2-d character array");
 	}
     }
   else
     print_usage ();
 
   return retval;
