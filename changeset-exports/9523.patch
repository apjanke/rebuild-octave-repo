# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1250202031 14400
#      Thu Aug 13 18:20:31 2009 -0400
# Node ID 0ce82753dd727964440847ff3af12d9d057ef610
# Parent  e79470be3ecb8ba2c26dac2434a30c779cb34011
more configure changes for libraries

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,33 @@
+2009-08-13  John W. Eaton  <jwe@octave.org>
+
+	* Makeconf.in (GLPK_CPPFLAGS, GLPK_LDFLAGS,
+	AMD_CPPFLAGS, AMD_LDFLAGS, CAMD_CPPFLAGS, CAMD_LDFLAGS,
+	CCOLAMD_CPPFLAGS, CCOLAMD_LDFLAGS, CHOLMOD_CPPFLAGS,
+	CHOLMOD_LDFLAGS, COLAMD_CPPFLAGS, COLAMD_LDFLAGS,
+	CXSPARSE_CPPFLAGS, CXSPARSE_LDFLAGS): New variables.
+	(do-subst-config-vals): Substitute Them.
+	(SPARSE_CPPFLAGS, SPARSE_LDFLAGS, SPARSE_LIBS, FFTW_CPPFLAGS,
+	FFTW_LDFLAGS, FFTW_LIBS): New variables.
+
+	* configure.in: Use OCTAVE_CHECK_LIBRARY to check for GLPK, AMD,
+	CAMD, CCOLAMD, CHOLMOD, COLAMD, CXSPARSE, FFTW3, and FFTW3F
+	libraries.  Print GLPK_CPPFLAGS, GLPK_LDFLAGS, AMD_CPPFLAGS,
+	AMD_LDFLAGS, CAMD_CPPFLAGS, CAMD_LDFLAGS, CCOLAMD_CPPFLAGS,
+	CCOLAMD_LDFLAGS, CHOLMOD_CPPFLAGS, CHOLMOD_LDFLAGS,
+	COLAMD_CPPFLAGS, COLAMD_LDFLAGS, CXSPARSE_CPPFLAGS,
+	CXSPARSE_LDFLAGS, FFTW3_CPPFLAGS, FFTW3_LDFLAGS, FFTW3_LIBS,
+	FFTW3F_CPPFLAGS, FFTW3F_LDFLAGS, and FFTW3F_LIBS in the summary.
+	(AH_BOTTOM): Define HAVE_FFTW if HAVE_FFTW3 and HAVE_FFTW3F are
+	both defined.
+
+	* aclocal.m4 (OCTAVE_CHECK_LIBRARY): New optional arguments for
+	language and doc string.
+
 2009-08-13  Jaroslav Hajek  <highegg@gmail.com>
 
 	* aclocal.m4 (OCTAVE_CHECK_LIBRARY): Prepend to LIBS rather than
 	replacing.
 
 2009-08-13  John W. Eaton  <jwe@octave.org>
 
 	* Makeconf.in (QHULL_CPPFLAGS, QHULL_LDFLAGS, CURL_CPPFLAGS,
diff --git a/Makeconf.in b/Makeconf.in
--- a/Makeconf.in
+++ b/Makeconf.in
@@ -233,38 +233,93 @@ ZLIB_LIBS = @ZLIB_LIBS@
 GRAPHICS_LIBS = @GRAPHICS_LIBS@
 
 QHULL_CPPFLAGS = @QHULL_CPPFLAGS@
 QHULL_LDFLAGS = @QHULL_LDFLAGS@
 QHULL_LIBS = @QHULL_LIBS@
 
 REGEX_LIBS = @REGEX_LIBS@
 BLAS_LIBS = @BLAS_LIBS@
-FFTW_LIBS = @FFTW_LIBS@
+
+FFTW3_CPPFLAGS = @FFTW3_CPPFLAGS@
+FFTW3_LDFLAGS = @FFTW3_LDFLAGS@
+FFTW3_LIBS = @FFTW3_LIBS@
+
+FFTW3F_CPPFLAGS = @FFTW3F_CPPFLAGS@
+FFTW3F_LDFLAGS = @FFTW3F_LDFLAGS@
+FFTW3F_LIBS = @FFTW3F_LIBS@
+
+GLPK_CPPFLAGS = @GLPK_CPPFLAGS@
+GLPK_LDFLAGS = @GLPK_LDFLAGS@
 GLPK_LIBS = @GLPK_LIBS@
 
 CURL_CPPFLAGS = @CURL_CPPFLAGS@
 CURL_LDFLAGS = @CURL_LDFLAGS@
 CURL_LIBS = @CURL_LIBS@
 
+AMD_CPPFLAGS = @AMD_CPPFLAGS@
+AMD_LDFLAGS = @AMD_LDFLAGS@
 AMD_LIBS = @AMD_LIBS@
+
+CAMD_CPPFLAGS = @CAMD_CPPFLAGS@
+CAMD_LDFLAGS = @CAMD_LDFLAGS@
 CAMD_LIBS = @CAMD_LIBS@
-UMFPACK_LIBS = @UMFPACK_LIBS@
+
+COLAMD_CPPFLAGS = @COLAMD_CPPFLAGS@
+COLAMD_LDFLAGS = @COLAMD_LDFLAGS@
 COLAMD_LIBS = @COLAMD_LIBS@
+
+CCOLAMD_CPPFLAGS = @CCOLAMD_CPPFLAGS@
+CCOLAMD_LDFLAGS = @CCOLAMD_LDFLAGS@
 CCOLAMD_LIBS = @CCOLAMD_LIBS@
+
+CHOLMOD_CPPFLAGS = @CHOLMOD_CPPFLAGS@
+CHOLMOD_LDFLAGS = @CHOLMOD_LDFLAGS@
 CHOLMOD_LIBS = @CHOLMOD_LIBS@
+
+CXSPARSE_CPPFLAGS = @CXSPARSE_CPPFLAGS@
+CXSPARSE_LDFLAGS = @CXSPARSE_LDFLAGS@
 CXSPARSE_LIBS = @CXSPARSE_LIBS@
+
+UMFPACK_LIBS = @UMFPACK_LIBS@
+
 OPENGL_LIBS = @OPENGL_LIBS@
 QRUPDATE_LIBS = @QRUPDATE_LIBS@
 READLINE_LIBS = @READLINE_LIBS@
 TERM_LIBS = @TERM_LIBS@
 ARPACK_LIBS = @ARPACK_LIBS@
 DL_LIBS = @DL_LIBS@
 LIBS = @LIBS@
 
+## Use sort to remove duplicates.
+SPARSE_CPPFLAGS = \
+  $(sort $(AMD_CPPFLAGS) $(CAMD_CPPFLAGS) $(COLAMD_CPPFLAGS) \
+    $(CCOLAMD_CPPFLAGS) $(CHOLMOD_CPPFLAGS) $(CXSPARSE_CPPFLAGS) \
+    $(UMFPACK_CPPFLAGS))
+
+## Use sort to remove duplicates.
+SPARSE_LDFLAGS = \
+  $(sort $(AMD_LDFLAGS) $(CAMD_LDFLAGS) $(COLAMD_LDFLAGS) \
+    $(CCOLAMD_LDFLAGS) $(CHOLMOD_LDFLAGS) $(CXSPARSE_LDFLAGS) \
+    $(UMFPACK_LDFLAGS))
+
+## FIXME -- does order matter here?
+SPARSE_LIBS = \
+  $(AMD_LIBS) $(CAMD_LIBS) $(COLAMD_LIBS) \
+    $(CCOLAMD_LIBS) $(CHOLMOD_LIBS) $(CXSPARSE_LIBS) \
+    $(UMFPACK_LIBS)
+
+## Use sort to remove duplicates.
+FFTW_CPPFLAGS = $(sort $(FFTW3_CPPFLAGS) $(FFTW3F_CPPFLAGS))
+
+## Use sort to remove duplicates.
+FFTW_LDFLAGS = $(sort $(FFTW3_LDFLAGS) $(FFTW3F_LDFLAGS))
+
+FFTW_LIBS = $(FFTW3_LIBS) $(FFTW3F_LIBS)
+
 USE_64_BIT_IDX_T = @USE_64_BIT_IDX_T@
 
 TEXINFO_COLAMD = @TEXINFO_COLAMD@
 TEXINFO_CHOLMOD = @TEXINFO_CHOLMOD@
 TEXINFO_UMFPACK = @TEXINFO_UMFPACK@
 TEXINFO_QHULL = @TEXINFO_QHULL@
 
 # The arguments passed to configure.
@@ -482,35 +537,47 @@ define do-subst-config-vals
 echo "making $@ from $<"
 $(SED) < $< \
   -e "s|%NO_OCT_FILE_STRIP%|${NO_OCT_FILE_STRIP}|" \
   -e "s|%OCTAVE_BINDIR%|\"${bindir}\"|" \
   -e "s|%OCTAVE_CONF_ALL_CFLAGS%|\"${ALL_CFLAGS}\"|" \
   -e "s|%OCTAVE_CONF_ALL_CXXFLAGS%|\"${ALL_CXXFLAGS}\"|" \
   -e "s|%OCTAVE_CONF_ALL_FFLAGS%|\"${ALL_FFLAGS}\"|" \
   -e "s|%OCTAVE_CONF_ALL_LDFLAGS%|\"${ALL_LDFLAGS}\"|" \
+  -e "s|%OCTAVE_CONF_AMD_CPPFLAGS%|\"${AMD_CPPFLAGS}\"|" \
+  -e "s|%OCTAVE_CONF_AMD_LDFLAGS%|\"${AMD_LDFLAGS}\"|" \
   -e "s|%OCTAVE_CONF_AMD_LIBS%|\"${AMD_LIBS}\"|" \
   -e "s|%OCTAVE_CONF_AR%|\"${AR}\"|" \
   -e "s|%OCTAVE_CONF_ARFLAGS%|\"${ARFLAGS}\"|" \
   -e "s|%OCTAVE_CONF_ARPACK_LIBS%|\"${ARPACK_LIBS}\"|" \
   -e "s|%OCTAVE_CONF_BLAS_LIBS%|\"${BLAS_LIBS}\"|" \
+  -e "s|%OCTAVE_CONF_CAMD_CPPFLAGS%|\"${CAMD_CPPFLAGS}\"|" \
+  -e "s|%OCTAVE_CONF_CAMD_LDFLAGS%|\"${CAMD_LDFLAGS}\"|" \
   -e "s|%OCTAVE_CONF_CAMD_LIBS%|\"${CAMD_LIBS}\"|" \
   -e "s|%OCTAVE_CONF_CANONICAL_HOST_TYPE%|\"${canonical_host_type}\"|" \
   -e "s|%OCTAVE_CONF_CARBON_LIBS%|\"${CARBON_LIBS}\"|" \
   -e "s|%OCTAVE_CONF_CC%|\"${CC}\"|" \
   -e "s|%OCTAVE_CONF_CC_VERSION%|\"${CC_VERSION}\"|" \
+  -e "s|%OCTAVE_CONF_CCOLAMD_CPPFLAGS%|\"${CCOLAMD_CPPFLAGS}\"|" \
+  -e "s|%OCTAVE_CONF_CCOLAMD_LDFLAGS%|\"${CCOLAMD_LDFLAGS}\"|" \
   -e "s|%OCTAVE_CONF_CCOLAMD_LIBS%|\"${CCOLAMD_LIBS}\"|" \
   -e "s|%OCTAVE_CONF_CFLAGS%|\"${CFLAGS}\"|" \
+  -e "s|%OCTAVE_CONF_CHOLMOD_CPPFLAGS%|\"${CHOLMOD_CPPFLAGS}\"|" \
+  -e "s|%OCTAVE_CONF_CHOLMOD_LDFLAGS%|\"${CHOLMOD_LDFLAGS}\"|" \
   -e "s|%OCTAVE_CONF_CHOLMOD_LIBS%|\"${CHOLMOD_LIBS}\"|" \
+  -e "s|%OCTAVE_CONF_COLAMD_CPPFLAGS%|\"${COLAMD_CPPFLAGS}\"|" \
+  -e "s|%OCTAVE_CONF_COLAMD_LDFLAGS%|\"${COLAMD_LDFLAGS}\"|" \
   -e "s|%OCTAVE_CONF_COLAMD_LIBS%|\"${COLAMD_LIBS}\"|" \
   -e "s|%OCTAVE_CONF_CPICFLAG%|\"${CPICFLAG}\"|" \
   -e "s|%OCTAVE_CONF_CPPFLAGS%|\"${CPPFLAGS}\"|" \
   -e "s|%OCTAVE_CONF_CURL_CPPFLAGS%|\"${CURL_CPPFLAGS}\"|" \
   -e "s|%OCTAVE_CONF_CURL_LDFLAGS%|\"${CURL_LDFLAGS}\"|" \
   -e "s|%OCTAVE_CONF_CURL_LIBS%|\"${CURL_LIBS}\"|" \
+  -e "s|%OCTAVE_CONF_CXSPARSE_CPPFLAGS%|\"${CXSPARSE_CPPFLAGS}\"|" \
+  -e "s|%OCTAVE_CONF_CXSPARSE_LDFLAGS%|\"${CXSPARSE_LDFLAGS}\"|" \
   -e "s|%OCTAVE_CONF_CXSPARSE_LIBS%|\"${CXSPARSE_LIBS}\"|" \
   -e "s|%OCTAVE_CONF_CXX%|\"${CXX}\"|" \
   -e "s|%OCTAVE_CONF_CXXCPP%|\"${CXXCPP}\"|" \
   -e "s|%OCTAVE_CONF_CXXFLAGS%|\"${CXXFLAGS}\"|" \
   -e "s|%OCTAVE_CONF_CXXPICFLAG%|\"${CXXPICFLAG}\"|" \
   -e "s|%OCTAVE_CONF_CXX_VERSION%|\"${CXX_VERSION}\"|" \
   -e "s|%OCTAVE_CONF_DEFAULT_PAGER%|\"${DEFAULT_PAGER}\"|" \
   -e "s|%OCTAVE_CONF_DEPEND_FLAGS%|\"${DEPEND_FLAGS}\"|" \
@@ -518,20 +585,27 @@ echo "making $@ from $<"
   -e "s|%OCTAVE_CONF_DL_LD%|\"${DL_LD}\"|" \
   -e "s|%OCTAVE_CONF_DL_LDFLAGS%|\"${DL_LDFLAGS}\"|" \
   -e "s|%OCTAVE_CONF_DL_LIBS%|\"${DL_LIBS}\"|" \
   -e "s|%OCTAVE_CONF_EXEEXT%|\"${EXEEXT}\"|" \
   -e "s|%OCTAVE_CONF_F77%|\"${F77}\"|" \
   -e "s|%OCTAVE_CONF_F77_FLOAT_STORE_FLAG%|\"${F77_FLOAT_STORE_FLAG}\"|" \
   -e "s|%OCTAVE_CONF_FC%|\"${FC}\"|" \
   -e "s|%OCTAVE_CONF_FFLAGS%|\"${FFLAGS}\"|" \
-  -e "s|%OCTAVE_CONF_FFTW_LIBS%|\"${FFTW_LIBS}\"|" \
+  -e "s|%OCTAVE_CONF_FFTW3_CPPFLAGS%|\"${FFTW3_CPPFLAGS}\"|" \
+  -e "s|%OCTAVE_CONF_FFTW3_LDFLAGS%|\"${FFTW3_LDFLAGS}\"|" \
+  -e "s|%OCTAVE_CONF_FFTW3_LIBS%|\"${FFTW3_LIBS}\"|" \
+  -e "s|%OCTAVE_CONF_FFTW3F_CPPFLAGS%|\"${FFTW3F_CPPFLAGS}\"|" \
+  -e "s|%OCTAVE_CONF_FFTW3F_LDFLAGS%|\"${FFTW3F_LDFLAGS}\"|" \
+  -e "s|%OCTAVE_CONF_FFTW3F_LIBS%|\"${FFTW3F_LIBS}\"|" \
   -e "s|%OCTAVE_CONF_FLIBS%|\"${FLIBS}\"|" \
   -e "s|%OCTAVE_CONF_FPICFLAG%|\"${FPICFLAG}\"|" \
   -e "s|%OCTAVE_CONF_FT2_LIBS%|\"${FT2_LIBS}\"|" \
+  -e "s|%OCTAVE_CONF_GLPK_CPPFLAGS%|\"${GLPK_CPPFLAGS}\"|" \
+  -e "s|%OCTAVE_CONF_GLPK_LDFLAGS%|\"${GLPK_LDFLAGS}\"|" \
   -e "s|%OCTAVE_CONF_GLPK_LIBS%|\"${GLPK_LIBS}\"|" \
   -e "s|%OCTAVE_CONF_GNUPLOT%|\"${GNUPLOT}\"|" \
   -e "s|%OCTAVE_CONF_GRAPHICS_LIBS%|\"${GRAPHICS_LIBS}\"|" \
   -e "s|%OCTAVE_CONF_HDF5_LIBS%|\"${HDF5_LIBS}\"|" \
   -e "s|%OCTAVE_CONF_INCFLAGS%|\"${INCFLAGS}\"|" \
   -e "s|%OCTAVE_CONF_INCLUDEDIR%|\"${includedir}\"|" \
   -e "s|%OCTAVE_CONF_LD_CXX%|\"${LD_CXX}\"|" \
   -e "s|%OCTAVE_CONF_LDFLAGS%|\"${LDFLAGS}\"|" \
diff --git a/aclocal.m4 b/aclocal.m4
--- a/aclocal.m4
+++ b/aclocal.m4
@@ -408,32 +408,35 @@ AC_DEFUN(OCTAVE_F77_FLAG, [
   else
     AC_MSG_RESULT(no)
     ifelse([$3], , , [$3])
   fi
 ])
 dnl
 dnl
 dnl
-dnl OCTAVE_CHECK_LIBRARY(LIBRARY, DOC-NAME, WARN-MSG, HEADER, FUNC, EXTRA-CHECK)
+dnl OCTAVE_CHECK_LIBRARY(LIBRARY, DOC-NAME, WARN-MSG, HEADER, FUNC,
+dnl                      LANG, DOC-STRING, EXTRA-CHECK)
 AC_DEFUN(OCTAVE_CHECK_LIBRARY, [
-  AC_ARG_WITH($1-includedir,
+  AC_ARG_WITH([$1-includedir],
     [AS_HELP_STRING([--with-$1-includedir=DIR],
       [look for $2 include files in DIR])],
     [m4_toupper([$1])_CPPFLAGS="-I$withval"])
   AC_SUBST(m4_toupper([$1])_CPPFLAGS)
 
-  AC_ARG_WITH($1-libdir,
+  AC_ARG_WITH([$1-libdir],
     [AS_HELP_STRING([--with-$1-libdir=DIR],
       [look for $2 libraries in DIR])],
     [m4_toupper([$1])_LDFLAGS="-L$withval"])
   AC_SUBST(m4_toupper([$1])_LDFLAGS)
 
-  AC_ARG_WITH($1,
-    [AS_HELP_STRING([--without-$1], [don't use $2])],
+  AC_ARG_WITH([$1],
+    [m4_ifblank([$7],
+      [AS_HELP_STRING([--without-$1], [don't use $2 library])],
+      [AS_HELP_STRING([--without-$1], [$7])])],
     with_$1=$withval, with_$1=yes)
 
   m4_toupper([$1])_LIBS=
   case $with_$1 in
     yes | "")
       m4_toupper([$1])_LIBS="-l$1"
     ;;
     -* | */* | *.a | *.so | *.so.* | *.o)
@@ -444,35 +447,37 @@ AC_DEFUN(OCTAVE_CHECK_LIBRARY, [
     ;;
   esac
 
   [TEXINFO_]m4_toupper([$1])=
   warn_$1="$3"
   if test -n "$m4_toupper([$1])_LIBS"; then
     save_CPPFLAGS="$CPPFLAGS"
     CPPFLAGS="$m4_toupper([$1])_CPPFLAGS $CPPFLAGS"
+    m4_ifnblank([$6], [AC_LANG_PUSH($6)])
     AC_CHECK_HEADERS($4, [
       save_LDFLAGS="$LDFLAGS"
       LDFLAGS="$m4_toupper([$1])_LDFLAGS $LDFLAGS"
       save_LIBS="$LIBS"
       LIBS="$m4_toupper([$1])_LIBS $LIBS"
       octave_$1_ok=no
       AC_MSG_CHECKING([for $5 in $m4_toupper([$1])_LIBS])
       AC_LINK_IFELSE([AC_LANG_CALL([], [$5])],
 	[octave_$1_ok=yes], [m4_toupper([$1])_LIBS=""])
       AC_MSG_RESULT($octave_$1_ok)
       if test $octave_$1_ok = yes; then
-	ifelse($#, 6, [$6], [
+	m4_ifblank([$8], [
 	  warn_$1=
 	  AC_DEFINE([HAVE_]m4_toupper([$1]), 1,
             [Define if $2 is available.])
-	  [TEXINFO_]m4_toupper([$1])="@set [HAVE_]m4_toupper([$1])"])
+	  [TEXINFO_]m4_toupper([$1])="@set [HAVE_]m4_toupper([$1])"], [$8])
       fi
       LIBS="$save_LIBS"
       LDFLAGS="$save_LDFLAGS"])
+    m4_ifnblank([$6], [AC_LANG_POP($6)])
     CPPFLAGS="$save_CPPFLAGS"
   fi
   AC_SUBST(m4_toupper([$1])_LIBS)
   AC_SUBST([TEXINFO_]m4_toupper([$1]))
   if test -n "$warn_$1"; then
     AC_MSG_WARN($warn_$1)
   fi
 ])
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -421,17 +421,17 @@ case "$canonical_host_type" in
     AC_CHECK_LIB(m, sin)
   ;;
 esac
 
 ### Check for the QHull library
 
 OCTAVE_CHECK_LIBRARY(qhull, QHull,
   [Qhull library not found -- this will result in loss of functionality of some geometry functions.],
-  [qhull/qhull_a.h], [qh_qhull],
+  [qhull/qhull_a.h], [qh_qhull], [], [],
   [warn_qhull=
    OCTAVE_CHECK_QHULL_VERSION
    OCTAVE_CHECK_QHULL_OK([TEXINFO_QHULL="@set HAVE_QHULL"
      AC_DEFINE(HAVE_QHULL, 1, [Define if QHull is available.])], [
      warn_qhull="Qhull library found, but seems not to work properly -- this will result in loss of functionality of some geometry functions.  Please try recompiling the library with -fno-strict-aliasing."])])
 
 ### Check for pcre/regex library.
 
@@ -554,81 +554,39 @@ if $WITH_ZLIB; then
     esac
   fi
 else
   warn_zlib="ZLIB library not found.  Octave will not be able to save or load compressed data files or HDF5 files."
   AC_MSG_WARN($warn_zlib)
 fi
 AC_SUBST(HDF5_LIBS)
 
-# Checks for FFTW header and library.
-
-# subdirectories of libcruft to build if they aren't found on the system:
+# Subdirectories of libcruft to build if they aren't found on the system:
 FFT_DIR="fftpack"
 AC_SUBST(FFT_DIR)
 
-# Installed fftw library, if any.
-FFTW_LIBS=''
-AC_SUBST(FFTW_LIBS)
+# Checks for FFTW header and library.
 
-AC_ARG_WITH(fftw, 
-  [AS_HELP_STRING([--without-fftw],
-     [use included fftpack instead of installed fftw])],
-  with_fftw=$withval, with_fftw=yes)
+OCTAVE_CHECK_LIBRARY(fftw3, FFTW3,
+  [FFTW3 library not found.  The slower FFTPACK library will be used instead.],
+  [fftw3.h], [fftw_plan_dft_1d])
 
-if test "$with_fftw" = yes; then
-  have_fftw3_header=no
-  with_fftw3=no
-  AC_CHECK_HEADER(fftw3.h, [have_fftw3_header=yes])
-  if test "$have_fftw3_header" = yes; then
-    AC_CHECK_LIB(fftw3, fftw_plan_dft_1d, [
-      AC_CHECK_LIB(fftw3f, fftwf_plan_dft_1d, [FFTW_LIBS="-lfftw3 -lfftw3f"; with_fftw3=yes])])
-  fi
-fi
+OCTAVE_CHECK_LIBRARY(fftw3f, FFTW3F,
+  [FFTW3F library not found.  The slower FFTPACK library will be used instead.],
+  [fftw3.h], [fftwf_plan_dft_1d])
 
-if test "$with_fftw" = yes && test "$with_fftw3" = yes; then
-  FFT_DIR=''
-  AC_DEFINE(HAVE_FFTW3, 1, [Define if the FFTW3 library is used.])
-else
-  warn_fftw="FFTW library not found.  Octave will use the (slower) FFTPACK library instead."
-  AC_MSG_WARN($warn_fftw)
+if test -n "$FFTW3_LIBS" && test -n "$FFTW3F_LIBS"; then
+  FFT_DIR=
 fi
 
 # Checks for GLPK header and library.
 
-AC_ARG_WITH(glpk,
-  [AS_HELP_STRING([--without-glpk], [don't use GLPK])],
-  with_glpk=$withval, with_glpk=yes)
-
-glpk_lib=
-if test "$with_glpk" = yes; then
-  glpk_lib="glpk"
-elif test "$with_glpk" != no; then
-  glpk_lib="$with_glpk"
-fi
-
-GLPK_LIBS=
-if test -n "$glpk_lib"; then
-  AC_CHECK_HEADERS([glpk/glpk.h glpk.h], [
-    AC_CHECK_LIB($glpk_lib, glp_lpx_simplex, [
-      GLPK_LIBS="-l$glpk_lib"
-      AC_DEFINE(GLPK_PRE_4_14, 1, [Define if GLPK version is less than 4.14.])], [
-        AC_CHECK_LIB($glpk_lib, _glp_lpx_simplex, [
-          GLPK_LIBS="-l$glpk_lib"], [])])
-
-    if test -n "$GLPK_LIBS"; then
-      AC_DEFINE(HAVE_GLPK, 1, [Define if GLPK is available.])
-    fi
-    break])
-fi
-AC_SUBST(GLPK_LIBS)
-if test -z "$GLPK_LIBS"; then
-  warn_glpk="GLPK library not found.  The glpk function for solving linear programs will be disabled."
-  AC_MSG_WARN($warn_glpk)
-fi
+OCTAVE_CHECK_LIBRARY(glpk, GLPK,
+  [GLPK library not found.  The glpk function for solving linear programs will be disabled.],
+  [glpk/glpk.h glpk.h], [_glp_lpx_simplex])
 
 # Checks for CURL header and library.
 
 OCTAVE_CHECK_LIBRARY(curl, cURL,
   [cURL library not found.  The urlread and urlwrite functions will be disabled.],
   [curl/curl.h], [curl_easy_escape])
 
 # GraphicsMagick++
@@ -906,43 +864,66 @@ if test "$with_qrupdate" = yes; then
     warn_qrupdate=
   fi
 fi
 if test -n "$warn_qrupdate"; then
   AC_MSG_WARN($warn_qrupdate)
 fi
 
 # Check for AMD library
-AMD_LIBS=
-AC_SUBST(AMD_LIBS)
 
-AC_ARG_WITH(amd,
-  [AS_HELP_STRING([--without-amd],
-     [don't use AMD, disable some sparse functionality])],
-  with_amd=$withval, with_amd=yes)
-
-warn_amd="AMD not found. This will result in some lack of functionality for sparse matrices."
-if test "$with_amd" = yes; then
-  with_amd=no
-  AC_CHECK_HEADERS([suitesparse/amd.h ufsparse/amd.h amd/amd.h amd.h], [
-    AC_CHECK_LIB(amd, amd_postorder, [AMD_LIBS="-lamd"; with_amd=yes])
-    if test "$with_amd" = yes; then
-      AC_DEFINE(HAVE_AMD, 1, [Define if the AMD library is used.])
-      warn_amd=
-    fi
-    break])
-fi 
-if test -n "$warn_amd"; then
-  AC_MSG_WARN($warn_amd)
-fi
+OCTAVE_CHECK_LIBRARY(amd, AMD,
+  [AMD library not found. This will result in some lack of functionality for sparse matrices.],
+  [suitesparse/amd.h ufsparse/amd.h amd/amd.h amd.h],
+  [amd_postorder],
+  [], [don't use AMD library, disable some sparse functionality])
 
 # Check for CAMD library
-CAMD_LIBS=
-AC_SUBST(CAMD_LIBS)
-AC_CHECK_LIB(camd, camd_postorder, [CAMD_LIBS="-lcamd"; with_camd=yes],[with_camd=no])
+
+OCTAVE_CHECK_LIBRARY(camd, CAMD,
+  [CAMD library not found. This will result in some lack of functionality for sparse matrices.],
+  [suitesparse/camd.h ufsparse/camd.h amd/camd.h camd.h],
+  [camd_postorder],
+  [], [don't use CAMD library, disable some sparse functionality])
+
+# Check for COLAMD library
+
+OCTAVE_CHECK_LIBRARY(colamd, COLAMD,
+  [COLAMD library not found. This will result in some lack of functionality for sparse matrices.],
+  [suitesparse/colamd.h ufsparse/colamd.h amd/colamd.h colamd.h],
+  [colamd],
+  [], [don't use COLAMD library, disable some sparse functionality])
+
+# Check for CCOLAMD library
+
+OCTAVE_CHECK_LIBRARY(ccolamd, CCOLAMD,
+  [CCOLAMD library not found. This will result in some lack of functionality for sparse matrices.],
+  [suitesparse/ccolamd.h ufsparse/ccolamd.h amd/ccolamd.h ccolamd.h],
+  [ccolamd],
+  [], [don't use CCOLAMD library, disable some sparse functionality])
+
+# Check for CHOLMOD library.  If your cholmod library requires cblas,
+# then you will need to configure with --with-cholmod="-lcholmod -lcblas".
+
+save_LIBS="$LIBS"
+LIBS="$BLAS_LIBS $FLIBS $LIBS"
+OCTAVE_CHECK_LIBRARY(cholmod, CHOLMOD,
+  [CHOLMOD library not found. This will result in some lack of functionality for sparse matrices.],
+  [suitesparse/cholmod.h ufsparse/cholmod.h cholmod/cholmod.h cholmod.h],
+  [cholmod_start],
+  [], [don't use CHOLMOD library, disable some sparse functionality])
+LIBS="$save_LIBS"
+
+# Check for CXSparse library
+
+OCTAVE_CHECK_LIBRARY(cxsparse, CXSparse,
+  [CXSparse library not found. This will result in some lack of functionality for sparse matrices.],
+  [suitesparse/cs.h ufsparse/cs.h amd/cs.h cs.h],
+  [cs_di_sqr],
+  [C++], [don't use CXSparse library, disable some sparse functionality])
 
 # Check for UMFPACK library.
 
 UMFPACK_LIBS=
 AC_SUBST(UMFPACK_LIBS)
 
 AC_ARG_WITH(umfpack,
   [AS_HELP_STRING([--without-umfpack],
@@ -977,129 +958,22 @@ if test "$with_umfpack" = yes && test "$
     break])
 fi
 if test -n "$warn_umfpack"; then
   AC_MSG_WARN($warn_umfpack)
 fi
 
 AC_SUBST(TEXINFO_UMFPACK)
 
-COLAMD_LIBS=
-AC_SUBST(COLAMD_LIBS)
-
-AC_ARG_WITH(colamd,
-  [AS_HELP_STRING([--without-colamd],
-     [don't use COLAMD, disable some sparse functionality])],
-  with_colamd=$withval, with_colamd=yes)
-
-warn_colamd="COLAMD not found. This will result in some lack of functionality for sparse matrices."
-if test "$with_colamd" = yes; then
-  with_colamd=no
-  AC_CHECK_HEADERS([suitesparse/colamd.h ufsparse/colamd.h colamd/colamd.h colamd.h], [
-    AC_CHECK_LIB(colamd, colamd, [COLAMD_LIBS="-lcolamd"; with_colamd=yes])
-    if test "$with_colamd" = yes; then
-      AC_DEFINE(HAVE_COLAMD, 1, [Define if the COLAMD library is used.])
-      TEXINFO_COLAMD="@set HAVE_COLAMD"
-      warn_colamd=
-    fi
-    break])
-fi 
-if test -n "$warn_colamd"; then
-  AC_MSG_WARN($warn_colamd)
-fi
-
-AC_SUBST(TEXINFO_COLAMD)
-
-CCOLAMD_LIBS=
-AC_SUBST(CCOLAMD_LIBS)
-
-AC_ARG_WITH(ccolamd,
-  [AS_HELP_STRING([--without-ccolamd],
-     [don't use CCOLAMD, disable some sparse functionality])],
-  with_ccolamd=$withval, with_ccolamd=yes)
-
-warn_ccolamd="CCOLAMD not found. This will result in some lack of functionality for sparse matrices."
-if test "$with_ccolamd" = yes; then
-  with_ccolamd=no
-  AC_CHECK_HEADERS([suitesparse/ccolamd.h ufsparse/ccolamd.h ccolamd/ccolamd.h ccolamd.h], [
-    AC_CHECK_LIB(ccolamd, ccolamd, [CCOLAMD_LIBS="-lccolamd"; with_ccolamd=yes])
-    if test "$with_ccolamd" = yes; then
-      AC_DEFINE(HAVE_CCOLAMD, 1, [Define if the CCOLAMD library is used.])
-      warn_ccolamd=
-    fi
-    break])
-fi 
-if test -n "$warn_ccolamd"; then
-  AC_MSG_WARN($warn_ccolamd)
-fi
-
-CHOLMOD_LIBS=
-AC_SUBST(CHOLMOD_LIBS)
-
-AC_ARG_WITH(cholmod,
-  [AS_HELP_STRING([--without-cholmod],
-     [don't use CHOLMOD, disable some sparse functionality])],
-  with_cholmod=$withval, with_cholmod=yes)
-
-warn_cholmod="CHOLMOD not found. This will result in some lack of functionality for sparse matrices."
-if test "$with_cholmod" = yes && test "$with_colamd" = yes &&
-	test "$with_ccolamd" = yes && test "$with_amd" = yes; then
-  with_cholmod=no
-  AC_CHECK_HEADERS([suitesparse/cholmod.h ufsparse/cholmod.h cholmod/cholmod.h cholmod.h], [
-    AC_CHECK_LIB(cholmod, cholmod_start, [CHOLMOD_LIBS="-lcholmod"; 
-      with_cholmod=yes], [
-      AC_CHECK_LIB(cholmod, cholmod_start, [CHOLMOD_LIBS="-lcholmod -cblas"; 
-	with_cholmod=yes], [],
-	$CAMD_LIBS $AMD_LIBS $COLAMD_LIBS $CCOLAMD_LIBS $BLAS_LIBS $FLIBS)],
-      $CAMD_LIBS $AMD_LIBS $COLAMD_LIBS $CCOLAMD_LIBS $BLAS_LIBS $FLIBS)
-
-    if test "$with_cholmod" = yes; then
-      AC_DEFINE(HAVE_CHOLMOD, 1, [Define if the CHOLMOD library is used.])
-      TEXINFO_CHOLMOD="@set HAVE_CHOLMOD"
-      warn_cholmod=
-    fi
-    break])
-fi
-if test -n "$warn_cholmod"; then
-  AC_MSG_WARN($warn_cholmod)
-fi
-
-AC_SUBST(TEXINFO_CHOLMOD)
-
-CXSPARSE_LIBS=
-AC_SUBST(CXSPARSE_LIBS)
-
-AC_ARG_WITH(cxsparse,
-  [AS_HELP_STRING([--without-cxsparse],
-     [don't use CXSparse, disable some sparse functionality])],
-  with_cxsparse=$withval, with_cxsparse=yes)
-
-warn_cxsparse="CXSparse not found. This will result in some lack of functionality for sparse matrices."
-if test "$with_cxsparse" = yes; then
-  with_cxsparse=no
-  AC_LANG_PUSH(C++)
-  AC_CHECK_HEADERS([suitesparse/cs.h ufsparse/cs.h cxsparse/cs.h cs.h], [
-    AC_CHECK_LIB(cxsparse, cs_di_sqr, [CXSPARSE_LIBS="-lcxsparse"; with_cxsparse=yes])
-    if test "$with_cxsparse" = yes; then
-      AC_DEFINE(HAVE_CXSPARSE, 1, [Define if the CXSparse library is used.])
-      warn_cxsparse=
-    fi
-    break])
-  AC_LANG_POP(C++)
-fi
-if test -n "$warn_cxsparse"; then
-  AC_MSG_WARN($warn_cxsparse)
-fi
-
 ARPACK_LIBS=
 AC_SUBST(ARPACK_LIBS)
 
 AC_ARG_WITH(arpack,
   [AS_HELP_STRING([--without-arpack],
-     [don't use ARPACK, disable some sparse functionality])],
+     [don't use ARPACK library, disable some sparse functionality])],
   with_arpack=$withval, with_arpack=yes)
 
 warn_arpack="arpack not found. This will result in a lack of the eigs function."
 if test "$with_arpack" = yes; then
   with_arpack=no
   AC_CHECK_LIB(arpack, F77_FUNC(dseupd,DSEUPD), [ARPACK_LIBS="-larpack"; with_arpack=yes], , $LAPACK_LIBS $FLIBS)
   if test "$with_arpack" = yes; then
     AC_DEFINE(HAVE_ARPACK, 1, [Define if the ARPACK library is used.])
@@ -2123,16 +1997,22 @@ typedef int sig_atomic_t;
 // least 80 bits wide and we need roundl declared in math.h.
 // FIXME -- maybe substitute this by a more precise check in the future.
 #if (SIZEOF_LONG_DOUBLE >= 10) && defined (HAVE_ROUNDL)
 #define OCTAVE_INT_USE_LONG_DOUBLE
 #endif
 
 #define OCTAVE_EMPTY_CPP_ARG
 
+// Octave is currently unable to use FFTW unless both float
+// and double versions are both available.
+#if defined (HAVE_FFTW3) && defined (HAVE_FFTW3F)
+#define HAVE_FFTW
+#endif
+
 #include "oct-dlldefs.h"
 #include "oct-types.h"
 ])
 
 ### Do the substitutions in all the Makefiles.
 
 AC_CONFIG_COMMANDS([Makefile], [if test "$ac_srcdir" != "."; then
   cp $srcdir/Makefile .
@@ -2167,31 +2047,50 @@ Octave is now configured for $canonical_
   Source directory:     $srcdir
   Installation prefix:  $prefix
   C compiler:           $CC $XTRA_CFLAGS $WARN_CFLAGS $CFLAGS
   C++ compiler:         $CXX $XTRA_CXXFLAGS $WARN_CXXFLAGS $CXXFLAGS
   Fortran compiler:     $F77 $FFLAGS
   Fortran libraries:    $FLIBS
   LIBS:                 $LIBS
 
+  AMD CPPFLAGS:         $AMD_CPPFLAGS
+  AMD LDFLAGS:          $AMD_LDFLAGS
   AMD libraries:        $AMD_LIBS
   ARPACK libraries:     $ARPACK_LIBS
   BLAS libraries:       $BLAS_LIBS
+  CAMD CPPFLAGS:        $CAMD_CPPFLAGS
+  CAMD LDFLAGS:         $CAMD_LDFLAGS
   CAMD libraries:       $CAMD_LIBS
   CARBON libraries:     $CARBON_LIBS
+  CCOLAMD CPPFLAGS:     $CCOLAMD_CPPFLAGS
+  CCOLAMD LDFLAGS:      $CCOLAMD_LDFLAGS
   CCOLAMD libraries:    $CCOLAMD_LIBS
+  CHOLMOD CPPFLAGS:     $CHOLMOD_CPPFLAGS
+  CHOLMOD LDFLAGS:      $CHOLMOD_LDFLAGS
   CHOLMOD libraries:    $CHOLMOD_LIBS
+  COLAMD CPPFLAGS:      $COLAMD_CPPFLAGS
+  COLAMD LDFLAGS:       $COLAMD_LDFLAGS
   COLAMD libraries:     $COLAMD_LIBS
   CURL CPPFLAGS:        $CURL_CPPFLAGS
   CURL LDFLAGS:         $CURL_LDFLAGS
   CURL libraries:       $CURL_LIBS
+  CXSPARSE CPPFLAGS:    $CXSPARSE_CPPFLAGS
+  CXSPARSE LDFLAGS:     $CXSPARSE_LDFLAGS
   CXSPARSE libraries:   $CXSPARSE_LIBS
   DL libraries:         $DL_LIBS
-  FFTW libraries:       $FFTW_LIBS
+  FFTW3 CPPFLAGS:       $FFTW3_CPPFLAGS
+  FFTW3 LDFLAGS:        $FFTW3_LDFLAGS
+  FFTW3 libraries:      $FFTW3_LIBS
+  FFTW3F CPPFLAGS:      $FFTW3F_CPPFLAGS
+  FFTW3F LDFLAGS:       $FFTW3F_LDFLAGS
+  FFTW3F libraries:     $FFTW3F_LIBS
   FLTK backend libs:    $GRAPHICS_LIBS
+  GLPK CPPFLAGS:        $GLPK_CPPFLAGS
+  GLPK LDFLAGS:         $GLPK_LDFLAGS
   GLPK libraries:       $GLPK_LIBS
   HDF5 libraries:       $HDF5_LIBS
   OPENGL libraries:     $OPENGL_LIBS
   PTHREAD flags:        $PTHREAD_CFLAGS
   PTHREAD libraries:    $PTHREAD_LIBS
   QHULL CPPFLAGS:       $QHULL_CPPFLAGS
   QHULL LDFLAGS:        $QHULL_LDFLAGS
   QHULL libraries:      $QHULL_LIBS
diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -35,40 +35,37 @@ along with Octave; see the file COPYING.
 // FIXME
 #ifdef HAVE_SYS_TYPES_H
 #include <sys/types.h>
 #endif
 
 #include "Array-util.h"
 #include "CMatrix.h"
 #include "CmplxAEPBAL.h"
-#include "DET.h"
+#include "CmplxCHOL.h"
 #include "CmplxSCHUR.h"
 #include "CmplxSVD.h"
-#include "CmplxCHOL.h"
+#include "DET.h"
 #include "f77-fcn.h"
 #include "functor.h"
 #include "lo-error.h"
-#include "oct-locbuf.h"
 #include "lo-ieee.h"
 #include "lo-mappers.h"
 #include "lo-utils.h"
 #include "mx-base.h"
 #include "mx-cm-dm.h"
+#include "mx-cm-s.h"
 #include "mx-dm-cm.h"
-#include "mx-cm-s.h"
 #include "mx-inlines.cc"
 #include "mx-op-defs.h"
 #include "oct-cmplx.h"
+#include "oct-fftw.h"
+#include "oct-locbuf.h"
 #include "oct-norm.h"
 
-#if defined (HAVE_FFTW3)
-#include "oct-fftw.h"
-#endif
-
 // Fortran functions we call.
 
 extern "C"
 {
   F77_RET_T
   F77_FUNC (xilaenv, XILAENV) (const octave_idx_type&, F77_CONST_CHAR_ARG_DECL,
 			       F77_CONST_CHAR_ARG_DECL,
 			       const octave_idx_type&, const octave_idx_type&,
@@ -206,30 +203,16 @@ extern "C"
 			     F77_CONST_CHAR_ARG_DECL, const octave_idx_type&, 
 			     const octave_idx_type&, const Complex*, 
 			     const octave_idx_type&, Complex*, 
 			     const octave_idx_type&, octave_idx_type&
 			     F77_CHAR_ARG_LEN_DECL
 			     F77_CHAR_ARG_LEN_DECL
 			     F77_CHAR_ARG_LEN_DECL);
 
-  // Note that the original complex fft routines were not written for
-  // double complex arguments.  They have been modified by adding an
-  // implicit double precision (a-h,o-z) statement at the beginning of
-  // each subroutine.
-
-  F77_RET_T
-  F77_FUNC (zffti, ZFFTI) (const octave_idx_type&, Complex*);
-
-  F77_RET_T
-  F77_FUNC (zfftf, ZFFTF) (const octave_idx_type&, Complex*, Complex*);
-
-  F77_RET_T
-  F77_FUNC (zfftb, ZFFTB) (const octave_idx_type&, Complex*, Complex*);
-
   F77_RET_T
   F77_FUNC (zlartg, ZLARTG) (const Complex&, const Complex&,
 			     double&, Complex&, Complex&);
 
   F77_RET_T
   F77_FUNC (ztrsyl, ZTRSYL) (F77_CONST_CHAR_ARG_DECL,
 			     F77_CONST_CHAR_ARG_DECL,
 			     const octave_idx_type&, const octave_idx_type&, const octave_idx_type&,
@@ -1212,17 +1195,17 @@ ComplexMatrix::pseudo_inverse (double to
       DiagMatrix D = DiagMatrix (sigma.extract (0, r)) . inverse ();
       ComplexMatrix Vr = V.extract (0, 0, nc-1, r);
       retval = Vr * D * Ur.hermitian ();
     }
 
   return retval;
 }
 
-#if defined (HAVE_FFTW3)
+#if defined (HAVE_FFTW)
 
 ComplexMatrix
 ComplexMatrix::fourier (void) const
 {
   size_t nr = rows ();
   size_t nc = cols ();
 
   ComplexMatrix retval (nr, nc);
@@ -1302,16 +1285,33 @@ ComplexMatrix::ifourier2d (void) const
 
   octave_fftw::ifftNd (in, out, 2, dv);
 
   return retval;
 }
 
 #else
 
+extern "C"
+{
+  // Note that the original complex fft routines were not written for
+  // double complex arguments.  They have been modified by adding an
+  // implicit double precision (a-h,o-z) statement at the beginning of
+  // each subroutine.
+
+  F77_RET_T
+  F77_FUNC (zffti, ZFFTI) (const octave_idx_type&, Complex*);
+
+  F77_RET_T
+  F77_FUNC (zfftf, ZFFTF) (const octave_idx_type&, Complex*, Complex*);
+
+  F77_RET_T
+  F77_FUNC (zfftb, ZFFTB) (const octave_idx_type&, Complex*, Complex*);
+}
+
 ComplexMatrix
 ComplexMatrix::fourier (void) const
 {
   ComplexMatrix retval;
 
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
 
diff --git a/liboctave/CNDArray.cc b/liboctave/CNDArray.cc
--- a/liboctave/CNDArray.cc
+++ b/liboctave/CNDArray.cc
@@ -27,54 +27,35 @@ along with Octave; see the file COPYING.
 #endif
 
 #include <cfloat>
 
 #include <vector>
 
 #include "Array-util.h"
 #include "CNDArray.h"
-#include "mx-base.h"
 #include "f77-fcn.h"
 #include "functor.h"
 #include "lo-ieee.h"
 #include "lo-mappers.h"
-#include "oct-locbuf.h"
+#include "mx-base.h"
 #include "mx-op-defs.h"
-
-#if defined (HAVE_FFTW3)
 #include "oct-fftw.h"
-#else
-extern "C"
-{
-  // Note that the original complex fft routines were not written for
-  // double complex arguments.  They have been modified by adding an
-  // implicit double precision (a-h,o-z) statement at the beginning of
-  // each subroutine.
-
-  F77_RET_T
-  F77_FUNC (zffti, ZFFTI) (const octave_idx_type&, Complex*);
-
-  F77_RET_T
-  F77_FUNC (zfftf, ZFFTF) (const octave_idx_type&, Complex*, Complex*);
-
-  F77_RET_T
-  F77_FUNC (zfftb, ZFFTB) (const octave_idx_type&, Complex*, Complex*);
-}
-#endif
+#include "oct-locbuf.h"
 
 ComplexNDArray::ComplexNDArray (const charNDArray& a)
   : MArrayN<Complex> (a.dims ())
 {
   octave_idx_type n = a.numel ();
   for (octave_idx_type i = 0; i < n; i++)
     xelem (i) = static_cast<unsigned char> (a(i));
 }
 
-#if defined (HAVE_FFTW3)
+#if defined (HAVE_FFTW)
+
 ComplexNDArray
 ComplexNDArray::fourier (int dim) const
 {
   dim_vector dv = dims ();
 
   if (dim > dv.length () || dim < 0)
     return ComplexNDArray ();
 
@@ -198,16 +179,34 @@ ComplexNDArray::ifourierNd (void) const
   Complex *out (retval.fortran_vec ());
 
   octave_fftw::ifftNd (in, out, rank, dv);
 
   return retval;
 }
 
 #else
+
+extern "C"
+{
+  // Note that the original complex fft routines were not written for
+  // double complex arguments.  They have been modified by adding an
+  // implicit double precision (a-h,o-z) statement at the beginning of
+  // each subroutine.
+
+  F77_RET_T
+  F77_FUNC (zffti, ZFFTI) (const octave_idx_type&, Complex*);
+
+  F77_RET_T
+  F77_FUNC (zfftf, ZFFTF) (const octave_idx_type&, Complex*, Complex*);
+
+  F77_RET_T
+  F77_FUNC (zfftb, ZFFTB) (const octave_idx_type&, Complex*, Complex*);
+}
+
 ComplexNDArray
 ComplexNDArray::fourier (int dim) const
 {
   dim_vector dv = dims ();
 
   if (dim > dv.length () || dim < 0)
     return ComplexNDArray ();
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,17 @@
+2009-08-13  John W. Eaton  <jwe@octave.org>
+
+	* CMatrix.cc, CNDArray.cc, dMatrix.cc, dNDArray.cc, fCMatrix.cc,
+	fCNDArray.cc, fMatrix.cc, fNDARray.cc, oct-fftw.cc, oct-fftw.h:
+	Update for new FFTW defines.
+
+	* Makefile.in: Add library-specific CPPFLAGS and LDFLAGS variables
+	to CPPFLAGS and LDFLAGS for files that use sparse matrices or fftw.
+
 2009-08-12  Jaroslav Hajek  <highegg@gmail.com>
 
 	* Makefile.in: Include LDFLAGS when linking shared executable.
 
 2009-08-11  John W. Eaton  <jwe@octave.org>
 
 	* oct-fftw.h, oct-fftw.cc (octave_fftw_planner): Convert to singleton.
 	(octave_float_fft_planner): Likewise.
diff --git a/liboctave/Makefile.in b/liboctave/Makefile.in
--- a/liboctave/Makefile.in
+++ b/liboctave/Makefile.in
@@ -32,19 +32,21 @@ INSTALL_PROGRAM = @INSTALL_PROGRAM@
 INSTALL_DATA = @INSTALL_DATA@
 
 DLL_CDEFS = @OCTAVE_DLL_DEFS@
 DLL_CXXDEFS = @OCTAVE_DLL_DEFS@
 
 LINK_DEPS = \
   $(RLD_FLAG) \
   -L../libcruft $(LIBCRUFT) \
-  $(CHOLMOD_LIBS) $(UMFPACK_LIBS) $(AMD_LIBS) $(CAMD_LIBS) \
-  $(COLAMD_LIBS) $(CCOLAMD_LIBS) $(CXSPARSE_LIBS) $(ARPACK_LIBS) \
-  $(QRUPDATE_LIBS) $(FFTW_LIBS) $(READLINE_LIBS) $(TERM_LIBS) $(LIBGLOB) \
+  $(SPARSE_LDFLAGS) $(SPARSE_LIBS) \
+  $(ARPACK_LIBS) \
+  $(QRUPDATE_LIBS) \
+  $(FFTW_LDFLAGS) $(FFTW_LIBS) \
+  $(READLINE_LIBS) $(TERM_LIBS) $(LIBGLOB) \
   $(REGEX_LIBS) $(DL_LIBS) $(LIBS) $(FLIBS) $(PTHREAD_LIBS)
 
 MATRIX_INC := Array.h Array2.h Array3.h ArrayN.h DiagArray2.h \
 	Array-util.h MArray-decl.h MArray-defs.h \
 	MArray.h MArray2.h MDiagArray2.h Matrix.h MArrayN.h \
 	base-lu.h base-aepbal.h dim-vector.h mx-base.h mx-op-decl.h \
 	mx-op-defs.h mx-defs.h mx-ext.h CColVector.h CDiagMatrix.h \
 	CMatrix.h CNDArray.h CRowVector.h CmplxAEPBAL.h CmplxCHOL.h \
@@ -380,13 +382,53 @@ dist: $(PREREQ)
 
 $(SPARSE_MX_OP_INC) $(SPARSE_MX_OP_SRC) : $(srcdir)/sparse-mk-ops.awk sparse-mx-ops
 	$(AWK) -f $(srcdir)/sparse-mk-ops.awk prefix=smx $(srcdir)/sparse-mx-ops
 
 mx-ops.h : $(srcdir)/mk-ops.awk mx-ops
 	$(AWK) -f $(srcdir)/mk-ops.awk prefix=mx make_inclusive_header=mx-ops.h $(srcdir)/mx-ops > $@-t
 	$(simple-move-if-change-rule)
 
+CSparse.d CSparse.df pic/CSparse.o CSparse.o: CPPFLAGS += $(SPARSE_CPPFLAGS)
+
+dSparse.d dSparse.df pic/dSparse.o dSparse.o: CPPFLAGS += $(SPARSE_CPPFLAGS)
+
+SparseCmplxLU.d SparseCmplxLU.df pic/SparseCmplxLU.o SparseCmplxLU.o: \
+  CPPFLAGS += $(SPARSE_CPPFLAGS)
+
+SparsedbleLU.d SparsedbleLU.df pic/SparsedbleLU.o SparsedbleLU.o: \
+  CPPFLAGS += $(SPARSE_CPPFLAGS)
+
+SparseCmplxQR.d SparseCmplxQR.df pic/SparseCmplxQR.o SparseCmplxQR.o: \
+  CPPFLAGS += $(SPARSE_CPPFLAGS)
+
+SparsedbleQR.d SparsedbleQR.df pic/SparsedbleQR.o SparsedbleQR.o: \
+  CPPFLAGS += $(SPARSE_CPPFLAGS)
+
+SparseCmplxCHOL.d SparseCmplxCHOL.df pic/SparseCmplxCHOL.o SparseCmplxCHOL.o: \
+  CPPFLAGS += $(SPARSE_CPPFLAGS)
+
+SparsedbleCHOL.d SparsedbleCHOL.df pic/SparsedbleCHOL.o SparsedbleCHOL.o: \
+  CPPFLAGS += $(SPARSE_CPPFLAGS)
+
+CMatrix.d CMatrix.df pic/CMatrix.o CMatrix.o: CPPFLAGS += $(FFTW_CPPFLAGS)
+
+CNDArray.d CNDArray.df pic/CNDArray.o CNDArray.o: CPPFLAGS += $(FFTW_CPPFLAGS)
+
+dMatrix.d dMatrix.df pic/dMatrix.o dMatrix.o: CPPFLAGS += $(FFTW_CPPFLAGS)
+
+dNDArray.d dNDArray.df pic/dNDArray.o dNDArray.o: CPPFLAGS += $(FFTW_CPPFLAGS)
+
+fCMatrix.d fCMatrix.df pic/fCMatrix.o fCMatrix.o: CPPFLAGS += $(FFTW_CPPFLAGS)
+
+fCNDArray.d fCNDArray.df pic/fCNDArray.o fCNDArray.o: CPPFLAGS += $(FFTW_CPPFLAGS)
+
+fMatrix.d fMatrix.df pic/fMatrix.o fMatrix.o: CPPFLAGS += $(FFTW_CPPFLAGS)
+
+fNDArray.d fNDArray.df pic/fNDArray.o fNDArray.o: CPPFLAGS += $(FFTW_CPPFLAGS)
+
+oct-fftw.d oct-fftw.df pic/oct-fftw.o oct-fftw.o: CPPFLAGS += $(FFTW_CPPFLAGS)
+
 ifdef omit_deps
 .PHONY: $(MAKEDEPS)
 endif
 
 -include $(MAKEDEPS)
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -48,23 +48,20 @@ along with Octave; see the file COPYING.
 #include "lo-mappers.h"
 #include "lo-utils.h"
 #include "mx-base.h"
 #include "mx-m-dm.h"
 #include "mx-dm-m.h"
 #include "mx-inlines.cc"
 #include "mx-op-defs.h"
 #include "oct-cmplx.h"
+#include "oct-fftw.h"
 #include "oct-norm.h"
 #include "quit.h"
 
-#if defined (HAVE_FFTW3)
-#include "oct-fftw.h"
-#endif
-
 // Fortran functions we call.
 
 extern "C"
 {
   F77_RET_T
   F77_FUNC (xilaenv, XILAENV) (const octave_idx_type&, F77_CONST_CHAR_ARG_DECL,
 			       F77_CONST_CHAR_ARG_DECL,
 			       const octave_idx_type&, const octave_idx_type&,
@@ -187,30 +184,16 @@ extern "C"
 			     F77_CONST_CHAR_ARG_DECL, const octave_idx_type&, 
 			     const octave_idx_type&, const double*, 
 			     const octave_idx_type&, double*, 
 			     const octave_idx_type&, octave_idx_type&
 			     F77_CHAR_ARG_LEN_DECL
 			     F77_CHAR_ARG_LEN_DECL
 			     F77_CHAR_ARG_LEN_DECL);
 
-  // Note that the original complex fft routines were not written for
-  // double complex arguments.  They have been modified by adding an
-  // implicit double precision (a-h,o-z) statement at the beginning of
-  // each subroutine.
-
-  F77_RET_T
-  F77_FUNC (zffti, ZFFTI) (const octave_idx_type&, Complex*);
-
-  F77_RET_T
-  F77_FUNC (zfftf, ZFFTF) (const octave_idx_type&, Complex*, Complex*);
-
-  F77_RET_T
-  F77_FUNC (zfftb, ZFFTB) (const octave_idx_type&, Complex*, Complex*);
-
   F77_RET_T
   F77_FUNC (dlartg, DLARTG) (const double&, const double&, double&,
 			     double&, double&);
 
   F77_RET_T
   F77_FUNC (dtrsyl, DTRSYL) (F77_CONST_CHAR_ARG_DECL,
 			     F77_CONST_CHAR_ARG_DECL,
 			     const octave_idx_type&, const octave_idx_type&, const octave_idx_type&,
@@ -889,17 +872,17 @@ Matrix::pseudo_inverse (double tol) cons
     {
       Matrix Ur = U.extract (0, 0, nr-1, r);
       DiagMatrix D = DiagMatrix (sigma.extract (0, r)) . inverse ();
       Matrix Vr = V.extract (0, 0, nc-1, r);
       return Vr * D * Ur.transpose ();
     }
 }
 
-#if defined (HAVE_FFTW3)
+#if defined (HAVE_FFTW)
 
 ComplexMatrix
 Matrix::fourier (void) const
 {
   size_t nr = rows ();
   size_t nc = cols ();
 
   ComplexMatrix retval (nr, nc);
@@ -977,16 +960,33 @@ Matrix::ifourier2d (void) const
 
   octave_fftw::ifftNd (out, out, 2, dv);
 
   return retval;
 }
 
 #else
 
+extern "C"
+{
+  // Note that the original complex fft routines were not written for
+  // double complex arguments.  They have been modified by adding an
+  // implicit double precision (a-h,o-z) statement at the beginning of
+  // each subroutine.
+
+  F77_RET_T
+  F77_FUNC (zffti, ZFFTI) (const octave_idx_type&, Complex*);
+
+  F77_RET_T
+  F77_FUNC (zfftf, ZFFTF) (const octave_idx_type&, Complex*, Complex*);
+
+  F77_RET_T
+  F77_FUNC (zfftb, ZFFTB) (const octave_idx_type&, Complex*, Complex*);
+}
+
 ComplexMatrix
 Matrix::fourier (void) const
 {
   ComplexMatrix retval;
 
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
 
diff --git a/liboctave/dNDArray.cc b/liboctave/dNDArray.cc
--- a/liboctave/dNDArray.cc
+++ b/liboctave/dNDArray.cc
@@ -27,28 +27,25 @@ along with Octave; see the file COPYING.
 #endif
 
 #include <cfloat>
 
 #include <vector>
 
 #include "Array-util.h"
 #include "dNDArray.h"
+#include "f77-fcn.h"
 #include "functor.h"
-#include "mx-base.h"
-#include "f77-fcn.h"
 #include "lo-error.h"
 #include "lo-ieee.h"
 #include "lo-mappers.h"
-#include "oct-locbuf.h"
+#include "mx-base.h"
 #include "mx-op-defs.h"
-
-#if defined (HAVE_FFTW3)
 #include "oct-fftw.h"
-#endif
+#include "oct-locbuf.h"
 
 NDArray::NDArray (const Array<octave_idx_type>& a, bool zero_based,
 		  bool negative_to_nan)
 {
   const octave_idx_type *pa = a.fortran_vec ();
   resize (a.dims ());
   double *ptmp = fortran_vec ();
   if (negative_to_nan)
@@ -90,17 +87,17 @@ NDArray::NDArray (const Array<octave_idx
 NDArray::NDArray (const charNDArray& a)
   : MArrayN<double> (a.dims ())
 {
   octave_idx_type n = a.numel ();
   for (octave_idx_type i = 0; i < n; i++)
     xelem (i) = static_cast<unsigned char> (a(i));
 }
 
-#if defined (HAVE_FFTW3)
+#if defined (HAVE_FFTW)
 
 ComplexNDArray
 NDArray::fourier (int dim) const
 {
   dim_vector dv = dims ();
 
   if (dim > dv.length () || dim < 0)
     return ComplexNDArray ();
diff --git a/liboctave/fCMatrix.cc b/liboctave/fCMatrix.cc
--- a/liboctave/fCMatrix.cc
+++ b/liboctave/fCMatrix.cc
@@ -33,41 +33,38 @@ along with Octave; see the file COPYING.
 #include <vector>
 
 // FIXME
 #ifdef HAVE_SYS_TYPES_H
 #include <sys/types.h>
 #endif
 
 #include "Array-util.h"
+#include "DET.h"
+#include "f77-fcn.h"
 #include "fCMatrix.h"
-#include "DET.h"
+#include "fCmplxCHOL.h"
 #include "fCmplxSCHUR.h"
 #include "fCmplxSVD.h"
-#include "fCmplxCHOL.h"
-#include "f77-fcn.h"
 #include "functor.h"
 #include "lo-error.h"
-#include "oct-locbuf.h"
 #include "lo-ieee.h"
 #include "lo-mappers.h"
 #include "lo-utils.h"
 #include "mx-base.h"
 #include "mx-fcm-fdm.h"
+#include "mx-fcm-fs.h"
 #include "mx-fdm-fcm.h"
-#include "mx-fcm-fs.h"
 #include "mx-inlines.cc"
 #include "mx-op-defs.h"
 #include "oct-cmplx.h"
+#include "oct-fftw.h"
+#include "oct-locbuf.h"
 #include "oct-norm.h"
 
-#if defined (HAVE_FFTW3)
-#include "oct-fftw.h"
-#endif
-
 // Fortran functions we call.
 
 extern "C"
 {
   F77_RET_T
   F77_FUNC (xilaenv, XILAENV) (const octave_idx_type&, F77_CONST_CHAR_ARG_DECL,
 			       F77_CONST_CHAR_ARG_DECL,
 			       const octave_idx_type&, const octave_idx_type&,
@@ -206,25 +203,16 @@ extern "C"
 			     const octave_idx_type&, const FloatComplex*, 
 			     const octave_idx_type&, FloatComplex*, 
 			     const octave_idx_type&, octave_idx_type&
 			     F77_CHAR_ARG_LEN_DECL
 			     F77_CHAR_ARG_LEN_DECL
 			     F77_CHAR_ARG_LEN_DECL);
 
   F77_RET_T
-  F77_FUNC (cffti, CFFTI) (const octave_idx_type&, FloatComplex*);
-
-  F77_RET_T
-  F77_FUNC (cfftf, CFFTF) (const octave_idx_type&, FloatComplex*, FloatComplex*);
-
-  F77_RET_T
-  F77_FUNC (cfftb, CFFTB) (const octave_idx_type&, FloatComplex*, FloatComplex*);
-
-  F77_RET_T
   F77_FUNC (clartg, CLARTG) (const FloatComplex&, const FloatComplex&,
 			     float&, FloatComplex&, FloatComplex&);
 
   F77_RET_T
   F77_FUNC (ctrsyl, CTRSYL) (F77_CONST_CHAR_ARG_DECL,
 			     F77_CONST_CHAR_ARG_DECL,
 			     const octave_idx_type&, const octave_idx_type&, const octave_idx_type&,
 			     const FloatComplex*, const octave_idx_type&,
@@ -1206,17 +1194,17 @@ FloatComplexMatrix::pseudo_inverse (floa
       FloatDiagMatrix D = FloatDiagMatrix (sigma.extract (0, r)) . inverse ();
       FloatComplexMatrix Vr = V.extract (0, 0, nc-1, r);
       retval = Vr * D * Ur.hermitian ();
     }
 
   return retval;
 }
 
-#if defined (HAVE_FFTW3)
+#if defined (HAVE_FFTW)
 
 FloatComplexMatrix
 FloatComplexMatrix::fourier (void) const
 {
   size_t nr = rows ();
   size_t nc = cols ();
 
   FloatComplexMatrix retval (nr, nc);
@@ -1296,16 +1284,28 @@ FloatComplexMatrix::ifourier2d (void) co
 
   octave_fftw::ifftNd (in, out, 2, dv);
 
   return retval;
 }
 
 #else
 
+extern "C"
+{
+  F77_RET_T
+  F77_FUNC (cffti, CFFTI) (const octave_idx_type&, FloatComplex*);
+
+  F77_RET_T
+  F77_FUNC (cfftf, CFFTF) (const octave_idx_type&, FloatComplex*, FloatComplex*);
+
+  F77_RET_T
+  F77_FUNC (cfftb, CFFTB) (const octave_idx_type&, FloatComplex*, FloatComplex*);
+}
+
 FloatComplexMatrix
 FloatComplexMatrix::fourier (void) const
 {
   FloatComplexMatrix retval;
 
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
 
diff --git a/liboctave/fCNDArray.cc b/liboctave/fCNDArray.cc
--- a/liboctave/fCNDArray.cc
+++ b/liboctave/fCNDArray.cc
@@ -26,50 +26,36 @@ along with Octave; see the file COPYING.
 #include <config.h>
 #endif
 
 #include <cfloat>
 
 #include <vector>
 
 #include "Array-util.h"
+#include "f77-fcn.h"
 #include "fCNDArray.h"
-#include "mx-base.h"
-#include "f77-fcn.h"
 #include "functor.h"
 #include "lo-ieee.h"
 #include "lo-mappers.h"
-#include "oct-locbuf.h"
+#include "mx-base.h"
 #include "mx-op-defs.h"
-
-#if defined (HAVE_FFTW3)
 #include "oct-fftw.h"
-#else
-extern "C"
-{
-  F77_RET_T
-  F77_FUNC (cffti, CFFTI) (const octave_idx_type&, FloatComplex*);
-
-  F77_RET_T
-  F77_FUNC (cfftf, CFFTF) (const octave_idx_type&, FloatComplex*, FloatComplex*);
-
-  F77_RET_T
-  F77_FUNC (cfftb, CFFTB) (const octave_idx_type&, FloatComplex*, FloatComplex*);
-}
-#endif
+#include "oct-locbuf.h"
 
 FloatComplexNDArray::FloatComplexNDArray (const charNDArray& a)
   : MArrayN<FloatComplex> (a.dims ())
 {
   octave_idx_type n = a.numel ();
   for (octave_idx_type i = 0; i < n; i++)
     xelem (i) = static_cast<unsigned char> (a(i));
 }
 
-#if defined (HAVE_FFTW3)
+#if defined (HAVE_FFTW)
+
 FloatComplexNDArray
 FloatComplexNDArray::fourier (int dim) const
 {
   dim_vector dv = dims ();
 
   if (dim > dv.length () || dim < 0)
     return FloatComplexNDArray ();
 
@@ -193,16 +179,29 @@ FloatComplexNDArray::ifourierNd (void) c
   FloatComplex *out (retval.fortran_vec ());
 
   octave_fftw::ifftNd (in, out, rank, dv);
 
   return retval;
 }
 
 #else
+
+extern "C"
+{
+  F77_RET_T
+  F77_FUNC (cffti, CFFTI) (const octave_idx_type&, FloatComplex*);
+
+  F77_RET_T
+  F77_FUNC (cfftf, CFFTF) (const octave_idx_type&, FloatComplex*, FloatComplex*);
+
+  F77_RET_T
+  F77_FUNC (cfftb, CFFTB) (const octave_idx_type&, FloatComplex*, FloatComplex*);
+}
+
 FloatComplexNDArray
 FloatComplexNDArray::fourier (int dim) const
 {
   dim_vector dv = dims ();
 
   if (dim > dv.length () || dim < 0)
     return FloatComplexNDArray ();
 
diff --git a/liboctave/fMatrix.cc b/liboctave/fMatrix.cc
--- a/liboctave/fMatrix.cc
+++ b/liboctave/fMatrix.cc
@@ -28,42 +28,39 @@ along with Octave; see the file COPYING.
 #endif
 
 #include <cfloat>
 
 #include <iostream>
 #include <vector>
 
 #include "Array-util.h"
+#include "DET.h"
 #include "byte-swap.h"
+#include "f77-fcn.h"
 #include "fMatrix.h"
-#include "DET.h"
+#include "floatCHOL.h"
 #include "floatSCHUR.h"
 #include "floatSVD.h"
-#include "floatCHOL.h"
-#include "f77-fcn.h"
 #include "functor.h"
 #include "lo-error.h"
-#include "oct-locbuf.h"
 #include "lo-ieee.h"
 #include "lo-mappers.h"
 #include "lo-utils.h"
 #include "mx-base.h"
+#include "mx-fdm-fm.h"
 #include "mx-fm-fdm.h"
-#include "mx-fdm-fm.h"
 #include "mx-inlines.cc"
 #include "mx-op-defs.h"
 #include "oct-cmplx.h"
+#include "oct-fftw.h"
+#include "oct-locbuf.h"
 #include "oct-norm.h"
 #include "quit.h"
 
-#if defined (HAVE_FFTW3)
-#include "oct-fftw.h"
-#endif
-
 // Fortran functions we call.
 
 extern "C"
 {
   F77_RET_T
   F77_FUNC (xilaenv, XILAENV) (const octave_idx_type&, F77_CONST_CHAR_ARG_DECL,
 			       F77_CONST_CHAR_ARG_DECL,
 			       const octave_idx_type&, const octave_idx_type&,
@@ -186,30 +183,16 @@ extern "C"
 			     F77_CONST_CHAR_ARG_DECL, const octave_idx_type&, 
 			     const octave_idx_type&, const float*, 
 			     const octave_idx_type&, float*, 
 			     const octave_idx_type&, octave_idx_type&
 			     F77_CHAR_ARG_LEN_DECL
 			     F77_CHAR_ARG_LEN_DECL
 			     F77_CHAR_ARG_LEN_DECL);
 
-  // Note that the original complex fft routines were not written for
-  // float complex arguments.  They have been modified by adding an
-  // implicit float precision (a-h,o-z) statement at the beginning of
-  // each subroutine.
-
-  F77_RET_T
-  F77_FUNC (cffti, CFFTI) (const octave_idx_type&, FloatComplex*);
-
-  F77_RET_T
-  F77_FUNC (cfftf, CFFTF) (const octave_idx_type&, FloatComplex*, FloatComplex*);
-
-  F77_RET_T
-  F77_FUNC (cfftb, CFFTB) (const octave_idx_type&, FloatComplex*, FloatComplex*);
-
   F77_RET_T
   F77_FUNC (slartg, SLARTG) (const float&, const float&, float&,
 			     float&, float&);
 
   F77_RET_T
   F77_FUNC (strsyl, STRSYL) (F77_CONST_CHAR_ARG_DECL,
 			     F77_CONST_CHAR_ARG_DECL,
 			     const octave_idx_type&, const octave_idx_type&, const octave_idx_type&,
@@ -888,17 +871,17 @@ FloatMatrix::pseudo_inverse (float tol) 
     {
       FloatMatrix Ur = U.extract (0, 0, nr-1, r);
       FloatDiagMatrix D = FloatDiagMatrix (sigma.extract (0, r)) . inverse ();
       FloatMatrix Vr = V.extract (0, 0, nc-1, r);
       return Vr * D * Ur.transpose ();
     }
 }
 
-#if defined (HAVE_FFTW3)
+#if defined (HAVE_FFTW)
 
 FloatComplexMatrix
 FloatMatrix::fourier (void) const
 {
   size_t nr = rows ();
   size_t nc = cols ();
 
   FloatComplexMatrix retval (nr, nc);
@@ -976,16 +959,33 @@ FloatMatrix::ifourier2d (void) const
 
   octave_fftw::ifftNd (out, out, 2, dv);
 
   return retval;
 }
 
 #else
 
+extern "C"
+{
+  // Note that the original complex fft routines were not written for
+  // float complex arguments.  They have been modified by adding an
+  // implicit float precision (a-h,o-z) statement at the beginning of
+  // each subroutine.
+
+  F77_RET_T
+  F77_FUNC (cffti, CFFTI) (const octave_idx_type&, FloatComplex*);
+
+  F77_RET_T
+  F77_FUNC (cfftf, CFFTF) (const octave_idx_type&, FloatComplex*, FloatComplex*);
+
+  F77_RET_T
+  F77_FUNC (cfftb, CFFTB) (const octave_idx_type&, FloatComplex*, FloatComplex*);
+}
+
 FloatComplexMatrix
 FloatMatrix::fourier (void) const
 {
   FloatComplexMatrix retval;
 
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
 
diff --git a/liboctave/fNDArray.cc b/liboctave/fNDArray.cc
--- a/liboctave/fNDArray.cc
+++ b/liboctave/fNDArray.cc
@@ -26,36 +26,36 @@ along with Octave; see the file COPYING.
 #include <config.h>
 #endif
 
 #include <cfloat>
 
 #include <vector>
 
 #include "Array-util.h"
+#include "f77-fcn.h"
 #include "fNDArray.h"
 #include "functor.h"
-#include "mx-base.h"
-#include "f77-fcn.h"
 #include "lo-error.h"
 #include "lo-ieee.h"
 #include "lo-mappers.h"
+#include "mx-base.h"
+#include "mx-op-defs.h"
+#include "oct-fftw.h"
 #include "oct-locbuf.h"
-#include "mx-op-defs.h"
 
 FloatNDArray::FloatNDArray (const charNDArray& a)
   : MArrayN<float> (a.dims ())
 {
   octave_idx_type n = a.numel ();
   for (octave_idx_type i = 0; i < n; i++)
     xelem (i) = static_cast<unsigned char> (a(i));
 }
 
-#if defined (HAVE_FFTW3)
-#include "oct-fftw.h"
+#if defined (HAVE_FFTW)
 
 FloatComplexNDArray
 FloatNDArray::fourier (int dim) const
 {
   dim_vector dv = dims ();
 
   if (dim > dv.length () || dim < 0)
     return FloatComplexNDArray ();
diff --git a/liboctave/oct-fftw.cc b/liboctave/oct-fftw.cc
--- a/liboctave/oct-fftw.cc
+++ b/liboctave/oct-fftw.cc
@@ -19,17 +19,17 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
-#if defined (HAVE_FFTW3)
+#if defined (HAVE_FFTW)
 
 #include <iostream>
 #include <vector>
 
 #include "lo-error.h"
 #include "oct-fftw.h"
 #include "quit.h"
 #include "oct-locbuf.h"
@@ -1014,17 +1014,16 @@ octave_fftw::ifftNd (const FloatComplex 
   const size_t npts = dv.numel ();
   const FloatComplex scale = npts;
   for (size_t i = 0; i < npts; i++)
     out[i] /= scale;
 
   return 0;
 }
 
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
 
diff --git a/liboctave/oct-fftw.h b/liboctave/oct-fftw.h
--- a/liboctave/oct-fftw.h
+++ b/liboctave/oct-fftw.h
@@ -19,21 +19,26 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #if !defined (octave_oct_fftw_h)
 #define octave_oct_fftw_h 1
 
 #include <cstddef>
+
+#if defined (HAVE_FFTW3_H)
 #include <fftw3.h>
+#endif
 
 #include "oct-cmplx.h"
 #include "dim-vector.h"
 
+#if defined (HAVE_FFTW)
+
 class
 OCTAVE_API
 octave_fftw_planner
 {
 protected:
 
   octave_fftw_planner (void);
 
@@ -287,16 +292,17 @@ private:
   bool rsimd_align;
 };
 
 class
 OCTAVE_API
 octave_fftw
 {
 public:
+
   static int fft (const double *in, Complex *out, size_t npts, 
 		  size_t nsamples = 1, octave_idx_type stride = 1, octave_idx_type dist = -1);
   static int fft (const Complex *in, Complex *out, size_t npts, 
 		  size_t nsamples = 1, octave_idx_type stride = 1, octave_idx_type dist = -1);
   static int ifft (const Complex *in, Complex *out, size_t npts,
 		   size_t nsamples = 1, octave_idx_type stride = 1, octave_idx_type dist = -1);
 
   static int fftNd (const double*, Complex*, const int, const dim_vector &);
@@ -314,21 +320,23 @@ public:
 
   static int fftNd (const float*, FloatComplex*, const int, const dim_vector &);
   static int fftNd (const FloatComplex*, FloatComplex*, const int, 
 		    const dim_vector &);
   static int ifftNd (const FloatComplex*, FloatComplex*, const int, 
 		     const dim_vector &);
 
 private:
-  octave_fftw ();
+  octave_fftw (void);
   octave_fftw (const octave_fftw&);
   octave_fftw& operator = (const octave_fftw&);
 };
 
 #endif
 
+#endif
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,27 @@
+2009-08-13  John W. Eaton  <jwe@octave.org>
+
+	* DLD-FUNCTIONS/fft.cc, DLD-FUNCTIONS/fft2.cc,
+	DLD-FUNCTIONS/fftn.cc, DLD-FUNCTIONS/fftw.cc: Update for new FFTW
+	defines.
+
+	* Makefile.in (amd.oct, colamd.oct, dmperm.oct, symcrm.oct,
+	qr.oct, fft.oct, fft2.oct, fftn.oct, fftw.oct): Add
+	library-specific CPPFLAGS and LDFLAGS variables to CPPFLAGS
+	and LDFLAGS.
+	* oct-conf.h.in: New #defines for GLPK_CPPFLAGS, GLPK_LDFLAGS,
+	AMD_CPPFLAGS, AMD_LDFLAGS, CAMD_CPPFLAGS, CAMD_LDFLAGS,
+	CCOLAMD_CPPFLAGS, CCOLAMD_LDFLAGS, CHOLMOD_CPPFLAGS,
+	CHOLMOD_LDFLAGS, COLAMD_CPPFLAGS, COLAMD_LDFLAGS,
+	CXSPARSE_CPPFLAGS, CXSPARSE_LDFLAGS, FFTW3_CPPFLAGS,
+	FFTW3_LDFLAGS, FFTW3_LIBS, FFTW3F_CPPFLAGS, FFTW3F_LDFLAGS, and
+	FFTW3F_LIBS.
+	* toplev.cc (octave_config_info): Include them in the list.
+
 2009-08-13  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-class.h (octave_class): Derive from octave_struct.
 	(octave_class::octave_class): Update all constructors.
 	(octave_class::numeric_conv, octave_class::byte_size, octave_class::numel, octave_class::nfields,
 	octave_class::reshape, octave_class::resize, octave_class::is_defined,
 	octave_class::map_value): Remove methods (inherit).
 	* ov-class.h (octave_class::obsolete_copies): New field.
diff --git a/src/DLD-FUNCTIONS/fft.cc b/src/DLD-FUNCTIONS/fft.cc
--- a/src/DLD-FUNCTIONS/fft.cc
+++ b/src/DLD-FUNCTIONS/fft.cc
@@ -28,17 +28,17 @@ along with Octave; see the file COPYING.
 #include "lo-mappers.h"
 
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
 #include "oct-obj.h"
 #include "utils.h"
 
-#if defined (HAVE_FFTW3)
+#if defined (HAVE_FFTW)
 #define FFTSRC "@sc{fftw}"
 #else
 #define FFTSRC "@sc{fftpack}"
 #endif
 
 static octave_value
 do_fft (const octave_value_list &args, const char *fcn, int type)
 {
diff --git a/src/DLD-FUNCTIONS/fft2.cc b/src/DLD-FUNCTIONS/fft2.cc
--- a/src/DLD-FUNCTIONS/fft2.cc
+++ b/src/DLD-FUNCTIONS/fft2.cc
@@ -31,17 +31,17 @@ along with Octave; see the file COPYING.
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
 #include "oct-obj.h"
 #include "utils.h"
 
 // This function should be merged with Fifft.
 
-#if defined (HAVE_FFTW3)
+#if defined (HAVE_FFTW)
 #define FFTSRC "@sc{fftw}"
 #else
 #define FFTSRC "@sc{fftpack}"
 #endif
 
 static octave_value
 do_fft2 (const octave_value_list &args, const char *fcn, int type)
 {
diff --git a/src/DLD-FUNCTIONS/fftn.cc b/src/DLD-FUNCTIONS/fftn.cc
--- a/src/DLD-FUNCTIONS/fftn.cc
+++ b/src/DLD-FUNCTIONS/fftn.cc
@@ -29,17 +29,17 @@ along with Octave; see the file COPYING.
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
 #include "oct-obj.h"
 #include "utils.h"
 
 // This function should be merged with Fifft.
 
-#if defined (HAVE_FFTW3)
+#if defined (HAVE_FFTW)
 #define FFTSRC "@sc{fftw}"
 #else
 #define FFTSRC "@sc{fftpack}"
 #endif
 
 static octave_value
 do_fftn (const octave_value_list &args, const char *fcn, int type)
 {
diff --git a/src/DLD-FUNCTIONS/fftw.cc b/src/DLD-FUNCTIONS/fftw.cc
--- a/src/DLD-FUNCTIONS/fftw.cc
+++ b/src/DLD-FUNCTIONS/fftw.cc
@@ -20,23 +20,22 @@ along with Octave; see the file COPYING.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <algorithm>
-#include "ov.h"
+
+#include "oct-fftw.h"
+
 #include "defun-dld.h"
 #include "error.h"
-
-#if defined (HAVE_FFTW3)
-#include "oct-fftw.h"
-#endif
+#include "ov.h"
 
 DEFUN_DLD (fftw, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{method} =} fftw ('planner')\n\
 @deftypefnx {Loadable Function} {} fftw ('planner', @var{method})\n\
 @deftypefnx {Loadable Function} {@var{wisdom} =} fftw ('dwisdom')\n\
 @deftypefnx {Loadable Function} {@var{wisdom} =} fftw ('dwisdom', @var{wisdom})\n\
 \n\
@@ -117,17 +116,17 @@ they will not be efficient and the point
   int nargin = args.length();
 
   if (nargin < 1 || nargin > 2)
     {
       print_usage ();
       return retval;
     }
 
-#if defined (HAVE_FFTW3)
+#if defined (HAVE_FFTW)
   if (args(0).is_string ())
     {
       std::string arg0 = args(0).string_value ();
 
       if (!error_state)
 	{
 	  // Use STL function to convert to lower case
 	  std::transform (arg0.begin (), arg0.end (), arg0.begin (), tolower);
@@ -255,14 +254,14 @@ they will not be efficient and the point
 		}
 	      else
 		error ("unrecognized argument");
 	    }
 	}
     }
 #else
 
-  warning ("fftw: this copy of Octave was not configured to use FFTW3");
+  warning ("fftw: this copy of Octave was not configured to use the FFTW3 planner");
 
 #endif
 
   return retval;
 }
diff --git a/src/Makefile.in b/src/Makefile.in
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -675,16 +675,43 @@ urlwrite.oct: OCT_LINK_DEPS += $(CURL_LD
 __glpk__.d __glpk__.df __glpk__.o pic/__glpk__.o: CPPFLAGS += $(GLPK_CPPFLAGS)
 __glpk__.oct: OCT_LINK_DEPS += $(GLPK_LDFLAGS) $(GLPK_LIBS)
 
 fltk_backend.d fltk_backend.df fltk_backend.o pic/fltk_backend.o: \
   CPPFLAGS += $(GRAPHICS_CPPFLAGS) $(FT2_CPPFLAGS)
 fltk_backend.oct: \
   OCT_LINK_DEPS += $(GRAPHICS_LDFLAGS) $(GRAPHICS_LIBS) $(FT2_LDFLAGS) $(FT2_LIBS)
 
-check: all
+amd.d amd.df pic/amd.o amd.o: CPPFLAGS += $(SPARSE_CPPFLAGS)
+amd.oct: OCT_LINK_DEPS += $(SPARSE_LDFLAGS) $(SPARSE_LIBS)
+
+colamd.d colamd.df pic/colamd.o colamd.o: CPPFLAGS += $(SPARSE_CPPFLAGS)
+colamd.oct: OCT_LINK_DEPS += $(SPARSE_LDFLAGS) $(SPARSE_LIBS)
+
+dmperm.d dmperm.df pic/dmperm.o dmperm.o: CPPFLAGS += $(SPARSE_CPPFLAGS)
+dmperm.oct: OCT_LINK_DEPS += $(SPARSE_LDFLAGS) $(SPARSE_LIBS)
+
+symrcm.d symrcm.df pic/symrcm.o symrcm.o: CPPFLAGS += $(SPARSE_CPPFLAGS)
+symrcm.oct: OCT_LINK_DEPS += $(SPARSE_LDFLAGS) $(SPARSE_LIBS)
+
+qr.d qr.df pic/qr.o qr.o: CPPFLAGS += $(SPARSE_CPPFLAGS)
+qr.oct: OCT_LINK_DEPS += $(SPARSE_LDFLAGS) $(SPARSE_LIBS)
+
+fft.d fft.df pic/fft.o fft.o: CPPFLAGS += $(FFTW_CPPFLAGS)
+fft.oct: OCT_LINK_DEPS += $(FFTW_LDFLAGS) $(FFTW_LIBS)
+
+fft2.d fft2.df pic/fft2.o fft2.o: CPPFLAGS += $(FFTW_CPPFLAGS)
+fft2.oct: OCT_LINK_DEPS += $(FFTW_LDFLAGS) $(FFTW_LIBS)
+
+fftn.d fftn.df pic/fftn.o fftn.o: CPPFLAGS += $(FFTW_CPPFLAGS)
+fftn.oct: OCT_LINK_DEPS += $(FFTW_LDFLAGS) $(FFTW_LIBS)
+
+fftw.d fftw.df pic/fftw.o fftw.o: CPPFLAGS += $(FFTW_CPPFLAGS)
+fftw.oct: OCT_LINK_DEPS += $(FFTW_LDFLAGS) $(FFTW_LIBS)
+
+pcheck: all
 .PHONY: check
 
 ifdef omit_deps
 .PHONY: $(MAKEDEPS)
 endif
 
 -include $(MAKEDEPS)
diff --git a/src/oct-conf.h.in b/src/oct-conf.h.in
--- a/src/oct-conf.h.in
+++ b/src/oct-conf.h.in
@@ -36,16 +36,24 @@ along with Octave; see the file COPYING.
 #ifndef OCTAVE_CONF_ALL_FFLAGS
 #define OCTAVE_CONF_ALL_FFLAGS %OCTAVE_CONF_ALL_FFLAGS%
 #endif
 
 #ifndef OCTAVE_CONF_ALL_LDFLAGS
 #define OCTAVE_CONF_ALL_LDFLAGS %OCTAVE_CONF_ALL_LDFLAGS%
 #endif
 
+#ifndef OCTAVE_CONF_AMD_CPPFLAGS
+#define OCTAVE_CONF_AMD_CPPFLAGS %OCTAVE_CONF_AMD_CPPFLAGS%
+#endif
+
+#ifndef OCTAVE_CONF_AMD_LDFLAGS
+#define OCTAVE_CONF_AMD_LDFLAGS %OCTAVE_CONF_AMD_LDFLAGS%
+#endif
+
 #ifndef OCTAVE_CONF_AMD_LIBS
 #define OCTAVE_CONF_AMD_LIBS %OCTAVE_CONF_AMD_LIBS%
 #endif
 
 #ifndef OCTAVE_CONF_ARFLAGS
 #define OCTAVE_CONF_ARFLAGS %OCTAVE_CONF_ARFLAGS%
 #endif
 
@@ -56,44 +64,76 @@ along with Octave; see the file COPYING.
 #ifndef OCTAVE_CONF_ARPACK_LIBS
 #define OCTAVE_CONF_ARPACK_LIBS %OCTAVE_CONF_ARPACK_LIBS%
 #endif
 
 #ifndef OCTAVE_CONF_BLAS_LIBS
 #define OCTAVE_CONF_BLAS_LIBS %OCTAVE_CONF_BLAS_LIBS%
 #endif
 
+#ifndef OCTAVE_CONF_CAMD_CPPFLAGS
+#define OCTAVE_CONF_CAMD_CPPFLAGS %OCTAVE_CONF_CAMD_CPPFLAGS%
+#endif
+
+#ifndef OCTAVE_CONF_CAMD_LDFLAGS
+#define OCTAVE_CONF_CAMD_LDFLAGS %OCTAVE_CONF_CAMD_LDFLAGS%
+#endif
+
 #ifndef OCTAVE_CONF_CAMD_LIBS
 #define OCTAVE_CONF_CAMD_LIBS %OCTAVE_CONF_CAMD_LIBS%
 #endif
 
 #ifndef OCTAVE_CONF_CARBON_LIBS
 #define OCTAVE_CONF_CARBON_LIBS %OCTAVE_CONF_CARBON_LIBS%
 #endif
 
 #ifndef OCTAVE_CONF_CC
 #define OCTAVE_CONF_CC %OCTAVE_CONF_CC%
 #endif
 
 #ifndef OCTAVE_CONF_CC_VERSION
 #define OCTAVE_CONF_CC_VERSION %OCTAVE_CONF_CC_VERSION%
 #endif
 
+#ifndef OCTAVE_CONF_CCOLAMD_CPPFLAGS
+#define OCTAVE_CONF_CCOLAMD_CPPFLAGS %OCTAVE_CONF_CCOLAMD_CPPFLAGS%
+#endif
+
+#ifndef OCTAVE_CONF_CCOLAMD_LDFLAGS
+#define OCTAVE_CONF_CCOLAMD_LDFLAGS %OCTAVE_CONF_CCOLAMD_LDFLAGS%
+#endif
+
 #ifndef OCTAVE_CONF_CCOLAMD_LIBS
 #define OCTAVE_CONF_CCOLAMD_LIBS %OCTAVE_CONF_CCOLAMD_LIBS%
 #endif
 
 #ifndef OCTAVE_CONF_CFLAGS
 #define OCTAVE_CONF_CFLAGS %OCTAVE_CONF_CFLAGS%
 #endif
 
+#ifndef OCTAVE_CONF_CHOLMOD_CPPFLAGS
+#define OCTAVE_CONF_CHOLMOD_CPPFLAGS %OCTAVE_CONF_CHOLMOD_CPPFLAGS%
+#endif
+
+#ifndef OCTAVE_CONF_CHOLMOD_LDFLAGS
+#define OCTAVE_CONF_CHOLMOD_LDFLAGS %OCTAVE_CONF_CHOLMOD_LDFLAGS%
+#endif
+
 #ifndef OCTAVE_CONF_CHOLMOD_LIBS
 #define OCTAVE_CONF_CHOLMOD_LIBS %OCTAVE_CONF_CHOLMOD_LIBS%
 #endif
 
+#ifndef OCTAVE_CONF_COLAMD_CPPFLAGS
+#define OCTAVE_CONF_COLAMD_CPPFLAGS %OCTAVE_CONF_COLAMD_CPPFLAGS%
+#endif
+
+#ifndef OCTAVE_CONF_COLAMD_LDFLAGS
+#define OCTAVE_CONF_COLAMD_LDFLAGS %OCTAVE_CONF_COLAMD_LDFLAGS%
+#endif
+
 #ifndef OCTAVE_CONF_COLAMD_LIBS
 #define OCTAVE_CONF_COLAMD_LIBS %OCTAVE_CONF_COLAMD_LIBS%
 #endif
 
 #ifndef OCTAVE_CONF_CPICFLAG
 #define OCTAVE_CONF_CPICFLAG %OCTAVE_CONF_CPICFLAG%
 #endif
 
@@ -108,16 +148,24 @@ along with Octave; see the file COPYING.
 #ifndef OCTAVE_CONF_CURL_LDFLAGS
 #define OCTAVE_CONF_CURL_LDFLAGS %OCTAVE_CONF_CURL_LDFLAGS%
 #endif
 
 #ifndef OCTAVE_CONF_CURL_LIBS
 #define OCTAVE_CONF_CURL_LIBS %OCTAVE_CONF_CURL_LIBS%
 #endif
 
+#ifndef OCTAVE_CONF_CXSPARSE_CPPFLAGS
+#define OCTAVE_CONF_CXSPARSE_CPPFLAGS %OCTAVE_CONF_CXSPARSE_CPPFLAGS%
+#endif
+
+#ifndef OCTAVE_CONF_CXSPARSE_LDFLAGS
+#define OCTAVE_CONF_CXSPARSE_LDFLAGS %OCTAVE_CONF_CXSPARSE_LDFLAGS%
+#endif
+
 #ifndef OCTAVE_CONF_CXSPARSE_LIBS
 #define OCTAVE_CONF_CXSPARSE_LIBS %OCTAVE_CONF_CXSPARSE_LIBS%
 #endif
 
 #ifndef OCTAVE_CONF_CXXCPP
 #define OCTAVE_CONF_CXXCPP %OCTAVE_CONF_CXXCPP%
 #endif
 
@@ -172,32 +220,60 @@ along with Octave; see the file COPYING.
 #ifndef OCTAVE_CONF_FC
 #define OCTAVE_CONF_FC %OCTAVE_CONF_FC%
 #endif
 
 #ifndef OCTAVE_CONF_FFLAGS
 #define OCTAVE_CONF_FFLAGS %OCTAVE_CONF_FFLAGS%
 #endif
 
-#ifndef OCTAVE_CONF_FFTW_LIBS
-#define OCTAVE_CONF_FFTW_LIBS %OCTAVE_CONF_FFTW_LIBS%
+#ifndef OCTAVE_CONF_FFTW3_CPPFLAGSS
+#define OCTAVE_CONF_FFTW3_CPPFLAGS %OCTAVE_CONF_FFTW3_CPPFLAGS%
+#endif
+
+#ifndef OCTAVE_CONF_FFTW3_LDFLAGSS
+#define OCTAVE_CONF_FFTW3_LDFLAGS %OCTAVE_CONF_FFTW3_LDFLAGS%
+#endif
+
+#ifndef OCTAVE_CONF_FFTW3_LIBS
+#define OCTAVE_CONF_FFTW3_LIBS %OCTAVE_CONF_FFTW3_LIBS%
+#endif
+
+#ifndef OCTAVE_CONF_FFTW3F_CPPFLAGSS
+#define OCTAVE_CONF_FFTW3F_CPPFLAGS %OCTAVE_CONF_FFTW3F_CPPFLAGS%
+#endif
+
+#ifndef OCTAVE_CONF_FFTW3F_LDFLAGSS
+#define OCTAVE_CONF_FFTW3F_LDFLAGS %OCTAVE_CONF_FFTW3F_LDFLAGS%
+#endif
+
+#ifndef OCTAVE_CONF_FFTW3F_LIBS
+#define OCTAVE_CONF_FFTW3F_LIBS %OCTAVE_CONF_FFTW3F_LIBS%
 #endif
 
 #ifndef OCTAVE_CONF_FLIBS
 #define OCTAVE_CONF_FLIBS %OCTAVE_CONF_FLIBS%
 #endif
 
 #ifndef OCTAVE_CONF_FPICFLAG
 #define OCTAVE_CONF_FPICFLAG %OCTAVE_CONF_FPICFLAG%
 #endif
 
 #ifndef OCTAVE_CONF_FT2_LIBS
 #define OCTAVE_CONF_FT2_LIBS %OCTAVE_CONF_FT2_LIBS%
 #endif
 
+#ifndef OCTAVE_CONF_GLPK_CPPFLAGS
+#define OCTAVE_CONF_GLPK_CPPFLAGS %OCTAVE_CONF_GLPK_CPPFLAGS%
+#endif
+
+#ifndef OCTAVE_CONF_GLPK_LDFLAGS
+#define OCTAVE_CONF_GLPK_LDFLAGS %OCTAVE_CONF_GLPK_LDFLAGS%
+#endif
+
 #ifndef OCTAVE_CONF_GLPK_LIBS
 #define OCTAVE_CONF_GLPK_LIBS %OCTAVE_CONF_GLPK_LIBS%
 #endif
 
 #ifndef OCTAVE_CONF_GNUPLOT
 #define OCTAVE_CONF_GNUPLOT %OCTAVE_CONF_GNUPLOT%
 #endif
 
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -1190,34 +1190,46 @@ specified option.\n\
   };
 
   static const conf_info_struct conf_info[] =
     {
       { false, "ALL_CFLAGS", OCTAVE_CONF_ALL_CFLAGS },
       { false, "ALL_CXXFLAGS", OCTAVE_CONF_ALL_CXXFLAGS },
       { false, "ALL_FFLAGS", OCTAVE_CONF_ALL_FFLAGS },
       { false, "ALL_LDFLAGS", OCTAVE_CONF_ALL_LDFLAGS },
+      { false, "AMD_CPPFLAGS", OCTAVE_CONF_AMD_CPPFLAGS },
+      { false, "AMD_LDFLAGS", OCTAVE_CONF_AMD_LDFLAGS },
       { false, "AMD_LIBS", OCTAVE_CONF_AMD_LIBS },
       { false, "AR", OCTAVE_CONF_AR },
       { false, "ARFLAGS", OCTAVE_CONF_ARFLAGS },
       { false, "ARPACK_LIBS", OCTAVE_CONF_ARPACK_LIBS },
       { false, "BLAS_LIBS", OCTAVE_CONF_BLAS_LIBS },
       { false, "CARBON_LIBS", OCTAVE_CONF_CARBON_LIBS },
+      { false, "CAMD_CPPFLAGS", OCTAVE_CONF_CAMD_CPPFLAGS },
+      { false, "CAMD_LDFLAGS", OCTAVE_CONF_CAMD_LDFLAGS },
       { false, "CAMD_LIBS", OCTAVE_CONF_CAMD_LIBS },
       { false, "CC", OCTAVE_CONF_CC },
       { false, "CC_VERSION", OCTAVE_CONF_CC_VERSION },
+      { false, "CCOLAMD_CPPFLAGS", OCTAVE_CONF_CCOLAMD_CPPFLAGS },
+      { false, "CCOLAMD_LDFLAGS", OCTAVE_CONF_CCOLAMD_LDFLAGS },
       { false, "CCOLAMD_LIBS", OCTAVE_CONF_CCOLAMD_LIBS },
       { false, "CFLAGS", OCTAVE_CONF_CFLAGS },
+      { false, "CHOLMOD_CPPFLAGS", OCTAVE_CONF_CHOLMOD_CPPFLAGS },
+      { false, "CHOLMOD_LDFLAGS", OCTAVE_CONF_CHOLMOD_LDFLAGS },
       { false, "CHOLMOD_LIBS", OCTAVE_CONF_CHOLMOD_LIBS },
+      { false, "COLAMD_CPPFLAGS", OCTAVE_CONF_COLAMD_CPPFLAGS },
+      { false, "COLAMD_LDFLAGS", OCTAVE_CONF_COLAMD_LDFLAGS },
       { false, "COLAMD_LIBS", OCTAVE_CONF_COLAMD_LIBS },
       { false, "CPICFLAG", OCTAVE_CONF_CPICFLAG },
       { false, "CPPFLAGS", OCTAVE_CONF_CPPFLAGS },
       { false, "CURL_CPPFLAGS", OCTAVE_CONF_CURL_CPPFLAGS },
       { false, "CURL_LDFLAGS", OCTAVE_CONF_CURL_LDFLAGS },
       { false, "CURL_LIBS", OCTAVE_CONF_CURL_LIBS },
+      { false, "CXSPARSE_CPPFLAGS", OCTAVE_CONF_CXSPARSE_CPPFLAGS },
+      { false, "CXSPARSE_LDFLAGS", OCTAVE_CONF_CXSPARSE_LDFLAGS },
       { false, "CXSPARSE_LIBS", OCTAVE_CONF_CXSPARSE_LIBS },
       { false, "CXX", OCTAVE_CONF_CXX },
       { false, "CXXCPP", OCTAVE_CONF_CXXCPP },
       { false, "CXXFLAGS", OCTAVE_CONF_CXXFLAGS },
       { false, "CXXPICFLAG", OCTAVE_CONF_CXXPICFLAG },
       { false, "CXX_VERSION", OCTAVE_CONF_CXX_VERSION },
       { false, "DEFAULT_PAGER", OCTAVE_DEFAULT_PAGER },
       { false, "DEFS", OCTAVE_CONF_DEFS },
@@ -1225,20 +1237,27 @@ specified option.\n\
       { false, "DL_LDFLAGS", OCTAVE_CONF_DL_LDFLAGS },
       { false, "DL_LIBS", OCTAVE_CONF_DL_LIBS },
       { false, "ENABLE_DYNAMIC_LINKING", OCTAVE_CONF_ENABLE_DYNAMIC_LINKING },
       { false, "EXEEXT", OCTAVE_CONF_EXEEXT },
       { false, "F77", OCTAVE_CONF_F77 },
       { false, "F77_FLOAT_STORE_FLAG", OCTAVE_CONF_F77_FLOAT_STORE_FLAG },
       { false, "FC", OCTAVE_CONF_FC },
       { false, "FFLAGS", OCTAVE_CONF_FFLAGS },
-      { false, "FFTW_LIBS", OCTAVE_CONF_FFTW_LIBS },
+      { false, "FFTW3_CPPFLAGS", OCTAVE_CONF_FFTW3_CPPFLAGS },
+      { false, "FFTW3_LDFLAGS", OCTAVE_CONF_FFTW3_LDFLAGS },
+      { false, "FFTW3_LIBS", OCTAVE_CONF_FFTW3_LIBS },
+      { false, "FFTW3F_CPPFLAGS", OCTAVE_CONF_FFTW3F_CPPFLAGS },
+      { false, "FFTW3F_LDFLAGS", OCTAVE_CONF_FFTW3F_LDFLAGS },
+      { false, "FFTW3F_LIBS", OCTAVE_CONF_FFTW3F_LIBS },
       { false, "FLIBS", OCTAVE_CONF_FLIBS },
       { false, "FPICFLAG", OCTAVE_CONF_FPICFLAG },
       { false, "FT2_LIBS", OCTAVE_CONF_FT2_LIBS },
+      { false, "GLPK_CPPFLAGS", OCTAVE_CONF_GLPK_CPPFLAGS },
+      { false, "GLPK_LDFLAGS", OCTAVE_CONF_GLPK_LDFLAGS },
       { false, "GLPK_LIBS", OCTAVE_CONF_GLPK_LIBS },
       { false, "GNUPLOT", OCTAVE_CONF_GNUPLOT },
       { false, "GRAPHICS_LIBS", OCTAVE_CONF_GRAPHICS_LIBS },
       { false, "HDF5_LIBS", OCTAVE_CONF_HDF5_LIBS },
       { false, "INCFLAGS", OCTAVE_CONF_INCFLAGS },
       { false, "LDFLAGS", OCTAVE_CONF_LDFLAGS },
       { false, "LD_CXX", OCTAVE_CONF_LD_CXX },
       { false, "LD_STATIC_FLAG", OCTAVE_CONF_LD_STATIC_FLAG },
