# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1239959220 -7200
#      Fri Apr 17 11:07:00 2009 +0200
# Node ID 5ec4dc52c1315f60f9714308e8f1ec3aa490dd1f
# Parent  5780b3b8042522090399b53185af7674d41dff91
fix empty struct indexed assignment

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2009-04-17  Jaroslav Hajek  <highegg@gmail.com>
+
+	* oct-map.cc (Octave_map::assign (const octave_value_list&, const
+	std::string&, const Cell&)): Fix & simplify.
+	(common_size): Remove.
+
 2009-04-16  Jaroslav Hajek  <highegg@gmail.com>
 
 	* pt-idx.cc (make_value_list): Gripe on magic end query for undefined
 	variables.
 
 2009-04-16  Jaroslav Hajek  <highegg@gmail.com>
 
 	* xpow.cc (same_sign): New helper function.
diff --git a/src/oct-map.cc b/src/oct-map.cc
--- a/src/oct-map.cc
+++ b/src/oct-map.cc
@@ -340,80 +340,41 @@ Octave_map::assign (const octave_value_l
 	}
     }
   else
     error ("field name mismatch in structure assignment");
 
   return *this;
 }
 
-static dim_vector
-common_size (const dim_vector& a, const dim_vector& b)
-{
-  dim_vector retval;
-
-  octave_idx_type a_len = a.length ();
-  octave_idx_type b_len = b.length ();
-
-  octave_idx_type new_len = std::max (a_len, b_len);
-  octave_idx_type min_len = std::min (a_len, b_len);
-
-  retval.resize (new_len);
-
-  for (octave_idx_type i = 0; i < min_len; i++)
-    retval(i) = std::max (a(i), b(i));
-
-  if (a_len < b_len)
-    {
-      for (octave_idx_type i = min_len; i < b_len; i++)
-	retval(i) = b(i);
-    }
-  else if (a_len > b_len)
-    {
-      for (octave_idx_type i = min_len; i < a_len; i++)
-	retval(i) = a(i);
-    }
-
-  return retval;
-}
-
 Octave_map&
 Octave_map::assign (const octave_value_list& idx, const std::string& k,
 		    const Cell& rhs)
 {
   Cell tmp;
 
   if (contains (k))
     tmp = map[k];
+  else
+    tmp = Cell (dimensions);
 
-  octave_value fill_value = Matrix ();
-
-  tmp.assign (idx, rhs, fill_value);
+  tmp.assign (idx, rhs);
 
   if (! error_state)
     {
-      dim_vector rhs_dims = tmp.dims ();
-
-      dim_vector curr_dims = dims ();
-
-      dim_vector new_dims = common_size (rhs_dims, curr_dims);
+      dim_vector tmp_dims = tmp.dims ();
 
-      if (new_dims != rhs_dims)
-	{
-	  tmp.resize (new_dims, fill_value);
-	}
-
-      if (new_dims != curr_dims)
+      if (tmp_dims != dimensions)
 	{
 	  for (iterator p = begin (); p != end (); p++)
-	    contents(p).resize (new_dims, fill_value);
+	    contents(p).resize (tmp_dims, Cell::resize_fill_value ());
+
+          dimensions = tmp_dims;
 	}
 
-      dimensions = new_dims;
-
       maybe_add_to_key_list (k);
 
       map[k] = tmp;
     }
 
   return *this;
 }
 
