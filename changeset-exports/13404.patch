# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1302550290 -7200
#      Mon Apr 11 21:31:30 2011 +0200
# Node ID 9b38634081796cd72db3af9e47b622be1ff3e52a
# Parent  276faa3e74235b61233975fbce845b2d7131c845
Added toolbar, statusbar and some messages.

diff --git a/gui//src/FilesDockWidget.cpp b/gui//src/FilesDockWidget.cpp
--- a/gui//src/FilesDockWidget.cpp
+++ b/gui//src/FilesDockWidget.cpp
@@ -1,15 +1,16 @@
 #include "FilesDockWidget.h"
 
 #include <QApplication>
 
 FilesDockWidget::FilesDockWidget(QWidget *parent)
   : QDockWidget(parent)
 {
+    setWindowTitle("Files");
     setWidget(new QWidget(this));
 
     // Create a toolbar
     m_navigationToolBar = new QToolBar("", widget());
     m_navigationToolBar->setAllowedAreas(Qt::TopToolBarArea);
     m_navigationToolBar->setMovable(false);
     m_navigationToolBar->setIconSize(QSize (20,20));
 
@@ -48,20 +49,20 @@ FilesDockWidget::FilesDockWidget(QWidget
     widget()->setLayout(layout);
     // TODO: Add right-click contextual menus for copying, pasting, deleting files (and others)
 }
 
 void FilesDockWidget::itemDoubleClicked(const QModelIndex &index)
 {
     QFileInfo fileInfo = m_fileSystemModel->fileInfo(index);
     if (fileInfo.isDir()) {
-      m_fileSystemModel->setRootPath(fileInfo.absolutePath());
-      m_fileTreeView->setRootIndex(index);
+        m_fileSystemModel->setRootPath(fileInfo.absolutePath());
+        m_fileTreeView->setRootIndex(index);
     } else {
-      // TODO: Open the file appropriately based on the mime type
+        emit openFile(m_fileSystemModel->fileName(index));
     }
 }
 
 void FilesDockWidget::onUpDirectory(void)
 {
     // Move up an index node
     QDir dir = QDir(m_fileSystemModel->filePath(m_fileTreeView->rootIndex()));
     dir.cdUp();
diff --git a/gui//src/FilesDockWidget.h b/gui//src/FilesDockWidget.h
--- a/gui//src/FilesDockWidget.h
+++ b/gui//src/FilesDockWidget.h
@@ -23,40 +23,42 @@
 #undef PACKAGE_VERSION
 #include "octave/config.h"
 #include "octave/octave.h"
 #include "octave/str-vec.h"
 #include "octave/cmd-hist.h"
 #include <QDockWidget>
 
 class FilesDockWidget : public QDockWidget {
-  Q_OBJECT
+    Q_OBJECT
 public :
-  FilesDockWidget(QWidget *parent = 0);
-  void setDirectory(QString dir);
-  
+    FilesDockWidget(QWidget *parent = 0);
+    void setDirectory(QString dir);
+
 public slots:
-  /** Slot for handling a change in directory via double click. */
-  void itemDoubleClicked(const QModelIndex &index);
+    /** Slot for handling a change in directory via double click. */
+    void itemDoubleClicked(const QModelIndex &index);
 
-  /** Slot for handling the up-directory button in the toolbar. */
-  void onUpDirectory();
-    
-private:
+    /** Slot for handling the up-directory button in the toolbar. */
+    void onUpDirectory();
+
+signals:
+    void openFile(QString fileName);
 
-  // TODO: Add toolbar with buttons for navigating the path, creating dirs, etc
+private:
+    // TODO: Add toolbar with buttons for navigating the path, creating dirs, etc
 
-  /** Toolbar for file and directory manipulation. */
-  QToolBar *m_navigationToolBar;
+    /** Toolbar for file and directory manipulation. */
+    QToolBar *m_navigationToolBar;
 
-  /** Variables for the up-directory action. */
-  QIcon m_directoryIcon;
-  QAction *m_directoryUpAction;
-  QToolButton *upDirectoryButton;
+    /** Variables for the up-directory action. */
+    QIcon m_directoryIcon;
+    QAction *m_directoryUpAction;
+    QToolButton *upDirectoryButton;
 
-  /** The file system model. */
-  QFileSystemModel *m_fileSystemModel;
+    /** The file system model. */
+    QFileSystemModel *m_fileSystemModel;
 
-  /** The file system view. */
-  QTreeView *m_fileTreeView;
+    /** The file system view. */
+    QTreeView *m_fileTreeView;
 };
 
 #endif // FILESDOCKWIDGET_H
diff --git a/gui//src/HistoryDockWidget.cpp b/gui//src/HistoryDockWidget.cpp
--- a/gui//src/HistoryDockWidget.cpp
+++ b/gui//src/HistoryDockWidget.cpp
@@ -26,9 +26,10 @@ void HistoryDockWidget::construct() {
 void HistoryDockWidget::updateHistory(string_vector historyEntries) {
     QStringList stringList = m_historyListModel->stringList();
     for(size_t i = 0; i < historyEntries.length(); i++) {
         QString command(historyEntries[i].c_str());
         if(!command.startsWith("#"))
             stringList.push_front(QString("%1: ").arg(stringList.size() + 1) + command);
     }
     m_historyListModel->setStringList(stringList);
+    emit information("History updated.");
 }
diff --git a/gui//src/HistoryDockWidget.h b/gui//src/HistoryDockWidget.h
--- a/gui//src/HistoryDockWidget.h
+++ b/gui//src/HistoryDockWidget.h
@@ -28,21 +28,24 @@
 #include "octave/sysdep.h"
 #include "octave/str-vec.h"
 #include "octave/cmd-hist.h"
 #include "octave/cmd-edit.h"
 #include "octave/oct-env.h"
 #include "octave/symtab.h"
 #include "cmd-edit.h"
 
-class HistoryDockWidget : public QDockWidget
-{
+class HistoryDockWidget : public QDockWidget {
+    Q_OBJECT
 public:
     HistoryDockWidget(QWidget *parent = 0);
     void updateHistory(string_vector historyEntries);
 
+signals:
+    void information(QString message);
+
 private:
     void construct();
     QListView *m_historyListView;
     QStringListModel *m_historyListModel;
 };
 
 #endif // HISTORYDOCKWIDGET_H
diff --git a/gui//src/MainWindow.cpp b/gui//src/MainWindow.cpp
--- a/gui//src/MainWindow.cpp
+++ b/gui//src/MainWindow.cpp
@@ -28,42 +28,68 @@ MainWindow::MainWindow(QWidget *parent)
       m_isRunning(true) {
     constructWindow();
     establishOctaveLink();
 }
 
 MainWindow::~MainWindow() {
 }
 
+void MainWindow::handleOpenFileRequest(QString fileName) {
+    reportStatusMessage("Opening file.");
+    // TODO: Open mdi subwindow.
+}
+
+void MainWindow::reportStatusMessage(QString statusMessage) {
+    m_statusBar->showMessage(statusMessage, 1000);
+}
+
 void MainWindow::closeEvent(QCloseEvent *closeEvent) {
+    reportStatusMessage("Saving data and shutting down.");
     QSettings settings("~/.quint/settings.ini", QSettings::IniFormat);
     settings.setValue("MainWindow/geometry", saveGeometry());
     settings.setValue("MainWindow/windowState", saveState());
     QMainWindow::closeEvent(closeEvent);
 }
 
 void MainWindow::constructWindow() {
+    QStyle *style = QApplication::style();
     m_octaveTerminal = new OctaveTerminal(this);
+    m_generalPurposeToolbar = new QToolBar("Octave Toolbar", this);
     m_variablesDockWidget = new VariablesDockWidget(this);
     m_historyDockWidget = new HistoryDockWidget(this);
     m_filesDockWidget = new FilesDockWidget(this);
     m_openedFiles = new QMdiArea(this);
+    m_statusBar = new QStatusBar(this);
     m_centralTabWidget = new QTabWidget(this);
     m_centralTabWidget->addTab(m_octaveTerminal, "Terminal");
     m_centralTabWidget->addTab(m_openedFiles, "Editor");
 
+    // TODO: Add meaningfull toolbar items.
+    QAction *commandAction = new QAction(style->standardIcon(QStyle::SP_CommandLink),
+        "", m_generalPurposeToolbar);
+    QAction *computerAction = new QAction(style->standardIcon(QStyle::SP_ComputerIcon),
+        "", m_generalPurposeToolbar);
+    m_generalPurposeToolbar->addAction(commandAction);
+    m_generalPurposeToolbar->addAction(computerAction);
+
     setWindowTitle("Octave");
     setCentralWidget(m_centralTabWidget);
+    addToolBar(m_generalPurposeToolbar);
     addDockWidget(Qt::LeftDockWidgetArea, m_variablesDockWidget);
     addDockWidget(Qt::LeftDockWidgetArea, m_historyDockWidget);
     addDockWidget(Qt::RightDockWidgetArea, m_filesDockWidget);
+    setStatusBar(m_statusBar);
 
     QSettings settings("~/.quint/settings.ini", QSettings::IniFormat);
     restoreGeometry(settings.value("MainWindow/geometry").toByteArray());
     restoreState(settings.value("MainWindow/windowState").toByteArray());
+
+    connect(m_filesDockWidget, SIGNAL(openFile(QString)), this, SLOT(handleOpenFileRequest(QString)));
+    connect(m_historyDockWidget, SIGNAL(information(QString)), this, SLOT(reportStatusMessage(QString)));
 }
 
 void MainWindow::establishOctaveLink() {
     m_octaveMainThread = new OctaveMainThread(this);
     m_octaveMainThread->start();
 
     m_octaveCallbackThread = new OctaveCallbackThread(this, this);
     m_octaveCallbackThread->start();
@@ -73,9 +99,10 @@ void MainWindow::establishOctaveLink() {
     int fdm, fds;
     if(openpty(&fdm, &fds, 0, 0, 0) < 0) {
         assert(0);
     }
     dup2 (fds, 0);
     dup2 (fds, 1);
     dup2 (fds, 2);
     m_octaveTerminal->openTeletype(fdm);
+    reportStatusMessage("Established link to Octave.");
 }
diff --git a/gui//src/MainWindow.h b/gui//src/MainWindow.h
--- a/gui//src/MainWindow.h
+++ b/gui//src/MainWindow.h
@@ -18,16 +18,18 @@
 
 #ifndef MAINWINDOW_H
 #define MAINWINDOW_H
 
 #include <QtGui/QMainWindow>
 #include <QThread>
 #include <QTabWidget>
 #include <QMdiArea>
+#include <QStatusBar>
+#include <QToolBar>
 #include "OctaveTerminal.h"
 #include "OctaveLink.h"
 #include "VariablesDockWidget.h"
 #include "HistoryDockWidget.h"
 #include "FilesDockWidget.h"
 #include "CodeEdit.h"
 
 // Octave includes
@@ -88,28 +90,34 @@ public:
     ~MainWindow();
 
     bool isRunning() { return m_isRunning; }
     OctaveTerminal *octaveTerminal() { return m_octaveTerminal; }
     VariablesDockWidget *variablesDockWidget() { return m_variablesDockWidget; }
     HistoryDockWidget *historyDockWidget() { return m_historyDockWidget; }
     FilesDockWidget *filesDockWidget() { return m_filesDockWidget; }
 
+public slots:
+    void handleOpenFileRequest(QString fileName);
+    void reportStatusMessage(QString statusMessage);
+
 protected:
     void closeEvent(QCloseEvent *closeEvent);
 
 private:
     void constructWindow();
     void establishOctaveLink();
     OctaveTerminal *m_octaveTerminal;
     VariablesDockWidget *m_variablesDockWidget;
     HistoryDockWidget *m_historyDockWidget;
     FilesDockWidget *m_filesDockWidget;
     QMdiArea *m_openedFiles;
     QTabWidget *m_centralTabWidget;
+    QStatusBar *m_statusBar;
+    QToolBar *m_generalPurposeToolbar;
 
     // Threads for running octave and managing the data interaction.
     OctaveMainThread *m_octaveMainThread;
     OctaveCallbackThread *m_octaveCallbackThread;
     bool m_isRunning;
 };
 
 class OctaveMainThread : public QThread {
diff --git a/gui//src/OctaveTerminal.h b/gui//src/OctaveTerminal.h
--- a/gui//src/OctaveTerminal.h
+++ b/gui//src/OctaveTerminal.h
@@ -16,20 +16,18 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
 #ifndef OCTAVETERMINAL_H
 #define OCTAVETERMINAL_H
 
 #include "QTerminalWidget.h"
 
-
 class OctaveTerminal : public QTerminalWidget {
     Q_OBJECT
 public:
     OctaveTerminal(QWidget *parent = 0);
     ~OctaveTerminal();
 
 private:
     void construct();
 };
-
 #endif // OCTAVETERMINAL_H
