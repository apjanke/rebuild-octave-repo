# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1383630536 0
#      Tue Nov 05 05:48:56 2013 +0000
# Node ID adb0ba0d0c1372e07dc55a8586c629d23cf6e298
# Parent  aacb9da13df63c5e7291df98b042d031d41d3511
imwrite: implement DelayTime option.

* __magick_read__.cc (F__magick_write__): set animationDelay() when
writing an image to implement the DelayTime option.
* private/__imwrite__.m: input check for the new option DelayTime and
set its default. Organize options in alphabetic order.
* imwrite.m: document new option.

diff --git a/libinterp/dldfcn/__magick_read__.cc b/libinterp/dldfcn/__magick_read__.cc
--- a/libinterp/dldfcn/__magick_read__.cc
+++ b/libinterp/dldfcn/__magick_read__.cc
@@ -1382,21 +1382,24 @@ use @code{imwrite}.\n\
         {
           error ("__magick_write__: indexed image must be uint8, uint16 or float.");
           return retval;
         }
     }
 
   const octave_idx_type nFrames = imvec.size ();
 
-  // FIXME What happens when we try to set with formats that do not support it?
   const octave_idx_type quality = options.getfield ("quality").int_value ();
   for (octave_idx_type i = 0; i < nFrames; i++)
     imvec[i].quality (quality);
 
+  const ColumnVector delaytime = options.getfield ("delaytime").column_vector_value ();
+  for (octave_idx_type i = 0; i < nFrames; i++)
+    imvec[i].animationDelay (delaytime(i));
+
   // If writemode is set to append, read the image and append to it. Even
   // if set to append, make sure that something was read at all.
   const std::string writemode = options.getfield ("writemode").string_value ();
   if (writemode == "append" && file_stat (filename).exists ())
     {
       std::vector<Magick::Image> ini_imvec;
       read_file (filename, ini_imvec);
       if (error_state)
diff --git a/scripts/image/imwrite.m b/scripts/image/imwrite.m
--- a/scripts/image/imwrite.m
+++ b/scripts/image/imwrite.m
@@ -42,16 +42,23 @@
 ## @table @samp
 ## @item Alpha
 ## Alpha (transparency) channel for the image.  This must be a matrix with
 ## same class, and number of rows and columns of @var{img}.  In case of a
 ## multipage image, the size of the 4th dimension must also match and the third
 ## dimension must be a singleton.  By default, image will be completely
 ## opaque.
 ##
+## @item DelayTime
+## For formats that accept animations (such as GIF), controls for how long a
+## frame is displayed until it moves to the next one. The value must be scalar
+## (which will applied to all frames in @var{img}), or a vector of length
+## equal to the number of frames in @var{im}.  The value is in seconds, must
+## be between 0 and 655.35, and defaults to 0.5.
+##
 ## @item LoopCount
 ## For formats that accept animations (such as GIF), controls how many times
 ## the sequence is repeated.  A value of Inf means an infinite loop (default),
 ## a value of 0 or 1 that the sequence is played only once (loops zero times),
 ## while a value of 2 or above loops that number of times (looping twice means
 ## it plays the complete sequence 3 times).  This option is ignored when there
 ## is only a single image at the end of writing the file.
 ##
diff --git a/scripts/image/private/__imwrite__.m b/scripts/image/private/__imwrite__.m
--- a/scripts/image/private/__imwrite__.m
+++ b/scripts/image/private/__imwrite__.m
@@ -38,16 +38,17 @@ function __imwrite__ (img, varargin)
 
   if (rem (numel (param_list), 2) != 0)
     error ("imwrite: no pair for all arguments (odd number left)");
   endif
 
   ## set default for options
   options = struct ("writemode", "overwrite",
                     "quality",   75,
+                    "delaytime", ones (1, size (img, 4)) *500, # 0.5 seconds
                     "loopcount", 0, ## this is actually Inf
                     "alpha",     cast ([], class (img)));
 
   for idx = 1:2:numel (param_list)
 
     switch (tolower (param_list{idx}))
 
       case "alpha"
@@ -60,33 +61,33 @@ function __imwrite__ (img, varargin)
                  param_list{idx});
         elseif (ndims (options.alpha) > 4 ||
                 any (size (options.alpha)([1 2]) != size (img)([1 2])) ||
                 size (options.alpha, 4) != size (img, 4))
           error ("imwrite: matrix for %s must have same dimension as image",
                  param_list{idx});
         endif
 
-      case "writemode",
-        options.writemode = param_list{idx+1};
-        if (! ischar (options.writemode)
-            || ! any (strcmpi (options.writemode, {"append", "overwrite"})))
-          error ('imwrite: value for %s option must be "append" or "overwrite"',
+      case "delaytime"
+        options.delaytime = param_list{idx+1};
+        if (! isnumeric (options.delaytime))
+          error ("imwrite: value for %s option must be numeric",
                  param_list{idx});
         endif
-        options.writemode = tolower (options.writemode);
-
-      case "quality",
-        options.quality = param_list{idx+1};
-        if (! isnumeric (options.quality) || ! isscalar (options.quality)
-            || options.quality < 0 || options.quality > 100)
-          error ("imwrite: value for %s option must be a scalar between 0 and 100",
+        options.delaytime *= 100; # convert to 1/100ths of second
+        if (isscalar (options.delaytime))
+          options.delaytime(1:size (img, 4)) = options.delaytime;
+        elseif (size (img, 4) != numel (options.delaytime))
+          error ("imwrite: value for %s must either be a scalar or the number of frames",
                  param_list{idx});
         endif
-        options.quality = round (options.quality);
+        if (any (options.delaytime(:) < 0) || any (options.delaytime(:) > 65535))
+          error ("imwrite: value for %s must be between 0 and 655.35 seconds",
+                 param_list{idx});
+        endif
 
       case "loopcount"
         options.loopcount = param_list{idx+1};
         if (! isscalar (options.loopcount) || ! isnumeric (options.loopcount)
             || (! isinf (options.loopcount) && (options.loopcount < 0 ||
                                                 options.loopcount > 65535)))
           error ("imwrite: value for %s must be Inf or between 0 and 65535",
                  param_list{idx});
@@ -102,16 +103,34 @@ function __imwrite__ (img, varargin)
         ## https://sourceforge.net/p/graphicsmagick/bugs/248/
         if (isinf (options.loopcount))
           options.loopcount = 0;
         elseif (options.loopcount == 0 || options.loopcount == 1)
           options.loopcount++;
         endif
         options.loopcount = floor (options.loopcount);
 
+      case "quality",
+        options.quality = param_list{idx+1};
+        if (! isnumeric (options.quality) || ! isscalar (options.quality)
+            || options.quality < 0 || options.quality > 100)
+          error ("imwrite: value for %s option must be a scalar between 0 and 100",
+                 param_list{idx});
+        endif
+        options.quality = round (options.quality);
+
+      case "writemode",
+        options.writemode = param_list{idx+1};
+        if (! ischar (options.writemode)
+            || ! any (strcmpi (options.writemode, {"append", "overwrite"})))
+          error ('imwrite: value for %s option must be "append" or "overwrite"',
+                 param_list{idx});
+        endif
+        options.writemode = tolower (options.writemode);
+
       otherwise
         error ("imwrite: invalid PARAMETER `%s'", param_list{idx});
 
     endswitch
   endfor
 
   if (! isempty (map))
     if (! iscolormap (map))
