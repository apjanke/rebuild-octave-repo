# HG changeset patch
# User Rik <rik@octave.org>
# Date 1425081072 28800
#      Fri Feb 27 15:51:12 2015 -0800
# Node ID d575cd1e0da76b5ecb6b95b88c6d465510390e79
# Parent  ed5ee3f610db95d7f6061fcab95dcd7e7b35510d
Replace std::size_t with bare size_t for conformity to rest of code.

* gl2ps-renderer.cc (draw): Replace std::size_t with size_t.

* help.cc (size): Replace std::size_t with size_t.

* __fltk_uigetfile__.cc (F__fltk_uigetfile__): Replace std::size_t with size_t.

* __init_fltk__.cc (fltk_uimenu::find_index_by_name): Replace std::size_t with
size_t.

* audioread.cc (Faudiowrite): Replace std::size_t with size_t.

diff --git a/libinterp/corefcn/gl2ps-renderer.cc b/libinterp/corefcn/gl2ps-renderer.cc
--- a/libinterp/corefcn/gl2ps-renderer.cc
+++ b/libinterp/corefcn/gl2ps-renderer.cc
@@ -75,25 +75,25 @@ glps_renderer::draw (const graphics_obje
       while (state == GL2PS_OVERFLOW)
         {
           // For LaTeX output the fltk print process uses 2 drawnow() commands.
           // The first one is for the pdf/ps/eps graph to be included.  The
           // print_cmd is saved as old_print_cmd.  Then the second drawnow()
           // outputs the tex-file and the graphic filename to be included is
           // extracted from old_print_cmd.
           std::string include_graph;
-          std::size_t found_redirect = old_print_cmd.find (">");
+          size_t found_redirect = old_print_cmd.find (">");
           if (found_redirect != std::string::npos)
             include_graph = old_print_cmd.substr (found_redirect + 1);
           else
             include_graph = old_print_cmd;
-          std::size_t n_begin = include_graph.find_first_not_of (" ");
+          size_t n_begin = include_graph.find_first_not_of (" ");
           if (n_begin != std::string::npos)
             {
-              std::size_t n_end = include_graph.find_last_not_of (" ");
+              size_t n_end = include_graph.find_last_not_of (" ");
               include_graph = include_graph.substr (n_begin,
                                                     n_end - n_begin + 1);
             }
           else
             include_graph = "foobar-inc";
           buffsize += 1024*1024;
           // GL2PS_SILENT was removed to allow gl2ps printing errors on stderr
           GLint ret = gl2psBeginPage ("glps_renderer figure", "Octave", NULL,
diff --git a/libinterp/corefcn/help.cc b/libinterp/corefcn/help.cc
--- a/libinterp/corefcn/help.cc
+++ b/libinterp/corefcn/help.cc
@@ -93,18 +93,18 @@ static std::string Vmakeinfo_program = "
 static bool Vsuppress_verbose_help_message = false;
 
 #include <map>
 
 typedef std::map<std::string, std::string> map_type;
 typedef map_type::value_type pair_type;
 typedef map_type::const_iterator map_iter;
 
-template<typename T, std::size_t z>
-std::size_t
+template<typename T, size_t z>
+size_t
 size (T const (&)[z])
 {
   return z;
 }
 
 const static pair_type operators[] =
 {
   pair_type ("!",
diff --git a/libinterp/dldfcn/__fltk_uigetfile__.cc b/libinterp/dldfcn/__fltk_uigetfile__.cc
--- a/libinterp/dldfcn/__fltk_uigetfile__.cc
+++ b/libinterp/dldfcn/__fltk_uigetfile__.cc
@@ -97,17 +97,17 @@ Undocumented internal function.\n\
 
   if (fc.value ())
     {
       int file_count = fc.count ();
       std::string fname;
 
       //fltk uses forward slash even for windows
       std::string sep = "/";
-      std::size_t idx;
+      size_t idx;
 
       if (file_count == 1 && multi_type != Fl_File_Chooser::DIRECTORY)
         {
           fname = fc.value ();
           idx = fname.find_last_of (sep);
           retval(0) = fname.substr (idx + 1);
         }
       else
diff --git a/libinterp/dldfcn/__init_fltk__.cc b/libinterp/dldfcn/__init_fltk__.cc
--- a/libinterp/dldfcn/__init_fltk__.cc
+++ b/libinterp/dldfcn/__init_fltk__.cc
@@ -299,17 +299,17 @@ public:
             if (menupath.compare (findname) == 0)
               return (t);
           }
         else
           {
             // End of submenu? Pop back one level.
             if (! m->label ())
               {
-                std::size_t idx = menupath.find_last_of ("/");
+                size_t idx = menupath.find_last_of ("/");
                 if (idx != std::string::npos)
                   menupath.erase (idx);
                 else
                   menupath.clear ();
                 continue;
               }
             // Menu item?
             std::string itempath = menupath;
@@ -514,18 +514,18 @@ public:
         do
           {
             const Fl_Menu_Item* item
               = menubar->find_item (fltk_label.c_str ());
 
             if (item)
               {
                 //avoid duplicate menulabels
-                std::size_t idx1 = fltk_label.find_last_of ("(");
-                std::size_t idx2 = fltk_label.find_last_of (")");
+                size_t idx1 = fltk_label.find_last_of ("(");
+                size_t idx2 = fltk_label.find_last_of (")");
                 int len = idx2 - idx1;
                 int val = 1;
                 if (len > 0)
                   {
                     std::string valstr = fltk_label.substr (idx1 + 1, len - 1);
                     fltk_label.erase (idx1, len + 1);
                     val = atoi (valstr.c_str ());
                     if (val > 0 && val < 99)
diff --git a/libinterp/dldfcn/audioread.cc b/libinterp/dldfcn/audioread.cc
--- a/libinterp/dldfcn/audioread.cc
+++ b/libinterp/dldfcn/audioread.cc
@@ -327,17 +327,17 @@ Comment.\n\
     }
 
   int samplerate = args(2).int_value ();
 
   if (error_state)
     return retval;
 
   std::string ext;
-  std::size_t dotpos = filename.find_last_of (".");
+  size_t dotpos = filename.find_last_of (".");
   if (dotpos != std::string::npos)
     ext = filename.substr (dotpos + 1);
   std::transform (ext.begin (), ext.end (), ext.begin (), ::tolower);
 
   sf_count_t items_to_write = audio.rows () * audio.columns ();
 
   if (audio.rows () == 1)
     audio = audio.transpose ();
