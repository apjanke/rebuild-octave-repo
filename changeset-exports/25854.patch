# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1536179614 -7200
#      Wed Sep 05 22:33:34 2018 +0200
# Node ID d19dfcc862d47b4ea02615f2b82b1ca09e92c3a8
# Parent  0e30f072d00952319f078d62111a1a653f45d912
Remove multibyte characters in EPS printout (bug #52764)

* gl2ps_print.cc (gl2ps_renderer::strlist_to_ps): replace multibyte characters
  by white-space so that ghostscript can properly handle "xshow" command

diff --git a/libinterp/corefcn/gl2ps-print.cc b/libinterp/corefcn/gl2ps-print.cc
--- a/libinterp/corefcn/gl2ps-print.cc
+++ b/libinterp/corefcn/gl2ps-print.cc
@@ -35,16 +35,17 @@ along with Octave; see the file COPYING.
 #include <limits>
 
 #include <gl2ps.h>
 
 #include "lo-mappers.h"
 #include "oct-locbuf.h"
 #include "tmpfile-wrapper.h"
 #include "unistd-wrappers.h"
+#include "unistr-wrappers.h"
 #include "unwind-prot.h"
 
 #include "gl-render.h"
 #include "oct-opengl.h"
 #include "sighandlers.h"
 #include "sysdep.h"
 #include "text-renderer.h"
 
@@ -881,16 +882,18 @@ namespace octave
   {
     // Translate and rotate coordinates in order to use bottom-left alignment
     fix_strlist_position (x, y, z, box, rotation, lst);
     Matrix prev_color (1, 3, -1);
 
     std::ostringstream ss;
     ss << "gsave\n";
 
+    static bool warned = false;
+
     for (const auto& txtobj : lst)
       {
         // Color
         if (txtobj.get_color () != prev_color)
           {
             prev_color = txtobj.get_color ();
             for (int i = 0; i < 3; i++)
               ss << prev_color(i) << " ";
@@ -905,17 +908,43 @@ namespace octave
             fontname = "Symbol";
             str = code_to_symbol (txtobj.get_code ());
           }
         else
           {
             fontname = select_font (txtobj.get_name (),
                                     txtobj.get_weight () == "bold",
                                     txtobj.get_angle () == "italic");
-            str = txtobj.get_string ();
+
+            // Check that the string is composed of single byte characters
+            const std::string tmpstr = txtobj.get_string ();
+            const uint8_t *c =
+              reinterpret_cast<const uint8_t *> (tmpstr.c_str ());
+            
+            for (size_t i = 0; i < tmpstr.size ();)
+              {
+                int mblen = octave_u8_strmblen_wrapper (c + i);
+                
+                if (mblen > 1)
+                  {
+                    str += " ";
+                    if (! warned)
+                      {
+                        warning_with_id ("Octave:print:unsupported-multibyte",
+                                         "print: only ASCII characters are "
+                                         "supported for EPS and derived "
+                                         "formats.");
+                        warned = true;
+                      }
+                  }
+                else
+                  str += tmpstr.at (i);
+                
+                i += mblen;
+              }
           }
 
         escape_character ("(", str);
         escape_character (")", str);
 
         ss << "(" << str << ") [";
 
         std::vector<double> xdata = txtobj.get_xdata ();
