# HG changeset patch
# User jwe
# Date 779595804 0
#      Thu Sep 15 02:23:24 1994 +0000
# Node ID 0a81458ef677098624bd732e73aba5262316355b
# Parent  5d852fb75139ed2105260d83b8a481235d2bd8c3
[project @ 1994-09-15 02:23:24 by jwe]

diff --git a/src/balance.cc b/src/balance.cc
--- a/src/balance.cc
+++ b/src/balance.cc
@@ -38,17 +38,17 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "tree-const.h"
 #include "user-prefs.h"
 #include "gripes.h"
 #include "error.h"
 #include "utils.h"
 #include "help.h"
 #include "defun-dld.h"
 
-DEFUN_DLD ("balance", Fbalance, Sbalance, 4, 4,
+DEFUN_DLD_BUILTIN ("balance", Fbalance, Sbalance, 4, 4,
   "AA = balance (A [, OPT]) or [[DD,] AA] =  balance (A [, OPT])\n\
 \n\
 generalized eigenvalue problem:\n\
 \n\
   [cc, dd, aa, bb] = balance (a, b [, opt])\n\
 \n\
 where OPT is an optional single character argument as follows: \n\
 \n\
diff --git a/src/chol.cc b/src/chol.cc
--- a/src/chol.cc
+++ b/src/chol.cc
@@ -31,17 +31,17 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "tree-const.h"
 #include "user-prefs.h"
 #include "gripes.h"
 #include "error.h"
 #include "utils.h"
 #include "help.h"
 #include "defun-dld.h"
 
-DEFUN_DLD ("chol", Fchol, Schol, 2, 1,
+DEFUN_DLD_BUILTIN ("chol", Fchol, Schol, 2, 1,
   "R = chol (X): cholesky factorization")
 {
   Octave_object retval;
 
   if (args.length () != 2 || nargout > 1)
     {
       print_usage ("chol");
       return retval;
diff --git a/src/colloc.cc b/src/colloc.cc
--- a/src/colloc.cc
+++ b/src/colloc.cc
@@ -28,17 +28,17 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "CollocWt.h"
 
 #include "tree-const.h"
 #include "error.h"
 #include "utils.h"
 #include "help.h"
 #include "defun-dld.h"
 
-DEFUN_DLD ("colloc", Fcolloc, Scolloc, 7, 4,
+DEFUN_DLD_BUILTIN ("colloc", Fcolloc, Scolloc, 7, 4,
   "[R, A, B, Q] = colloc (N [, \"left\"] [, \"right\"]): collocation weights")
 {
   Octave_object retval;
 
   int nargin = args.length ();
 
   if (nargin < 2 || nargin > 4)
     {
diff --git a/src/dassl.cc b/src/dassl.cc
--- a/src/dassl.cc
+++ b/src/dassl.cc
@@ -100,17 +100,17 @@ dassl_user_function (const ColumnVector&
 	}
       else
 	gripe_user_supplied_eval ("dassl");
     }
 
   return retval;
 }
 
-DEFUN_DLD ("dassl", Fdassl, Sdassl, 5, 1,
+DEFUN_DLD_BUILTIN ("dassl", Fdassl, Sdassl, 5, 1,
   "dassl (\"function_name\", x_0, xdot_0, t_out)\n\
 dassl (F, X_0, XDOT_0, T_OUT, T_CRIT)\n\
 \n\
 The first argument is the name of the function to call to\n\
 compute the vector of residuals.  It must have the form\n\
 \n\
   res = f (x, xdot, t)\n\
 \n\
@@ -290,17 +290,17 @@ do_dassl_option (char *keyword, double v
 	  return;
 	}
       list++;
     }
 
   warning ("dassl_options: no match for `%s'", keyword);
 }
 
-DEFUN_DLD ("dassl_options", Fdassl_options, Sdassl_options, -1, 1,
+DEFUN_DLD_BUILTIN ("dassl_options", Fdassl_options, Sdassl_options, -1, 1,
   "dassl_options (KEYWORD, VALUE)\n\
 \n\
 Set or show options for dassl.  Keywords may be abbreviated\n\
 to the shortest match.")
 {
   Octave_object retval;
 
   int nargin = args.length ();
diff --git a/src/det.cc b/src/det.cc
--- a/src/det.cc
+++ b/src/det.cc
@@ -31,17 +31,17 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "tree-const.h"
 #include "user-prefs.h"
 #include "gripes.h"
 #include "error.h"
 #include "utils.h"
 #include "help.h"
 #include "defun-dld.h"
 
-DEFUN_DLD ("det", Fdet, Sdet, 2, 1,
+DEFUN_DLD_BUILTIN ("det", Fdet, Sdet, 2, 1,
   "det (X): determinant of a square matrix")
 {
   Octave_object retval;
 
   int nargin = args.length ();
 
   if (nargin != 2)
     {
diff --git a/src/eig.cc b/src/eig.cc
--- a/src/eig.cc
+++ b/src/eig.cc
@@ -30,17 +30,17 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "tree-const.h"
 #include "user-prefs.h"
 #include "gripes.h"
 #include "error.h"
 #include "utils.h"
 #include "help.h"
 #include "defun-dld.h"
 
-DEFUN_DLD ("eig", Feig, Seig, 2, 1,
+DEFUN_DLD_BUILTIN ("eig", Feig, Seig, 2, 1,
   "eig (X) or [V, D] = eig (X): compute eigenvalues and eigenvectors of X")
 {
   Octave_object retval;
 
   if (args.length () != 2 || nargout > 2)
     {
       print_usage ("eig");
       return retval;
diff --git a/src/expm.cc b/src/expm.cc
--- a/src/expm.cc
+++ b/src/expm.cc
@@ -48,17 +48,17 @@ extern "C"
 {
   double F77_FCN (dlange) (const char*, const int*, const int*,
 			   const double*, const int*, double*);
 
   double F77_FCN (zlange) (const char*, const int*, const int*,
 			   const Complex*, const int*, double*);
 }
 
-DEFUN_DLD ("expm", Fexpm, Sexpm, 2, 1,
+DEFUN_DLD_BUILTIN ("expm", Fexpm, Sexpm, 2, 1,
   "expm (X): matrix exponential, e^A")
 {
   Octave_object retval;
 
   int nargin = args.length ();
 
   if (nargin != 2)
     {
diff --git a/src/fft.cc b/src/fft.cc
--- a/src/fft.cc
+++ b/src/fft.cc
@@ -33,17 +33,17 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "gripes.h"
 #include "error.h"
 #include "utils.h"
 #include "help.h"
 #include "defun-dld.h"
 
 // This function should be merged with Fifft.
 
-DEFUN_DLD ("fft", Ffft, Sfft, 3, 1,
+DEFUN_DLD_BUILTIN ("fft", Ffft, Sfft, 3, 1,
   "fft (X [, N]): fast fourier transform of a vector")
 {
   Octave_object retval;
 
   int nargin = args.length ();
 
   if (nargin < 2 || nargin > 3)
     {
diff --git a/src/fft2.cc b/src/fft2.cc
--- a/src/fft2.cc
+++ b/src/fft2.cc
@@ -33,17 +33,17 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "gripes.h"
 #include "error.h"
 #include "utils.h"
 #include "help.h"
 #include "defun-dld.h"
 
 // This function should be merged with Fifft2.
 
-DEFUN_DLD ("fft2", Ffft2, Sfft2, 3, 1,
+DEFUN_DLD_BUILTIN ("fft2", Ffft2, Sfft2, 3, 1,
   "fft2 (X [, N] [, M])\n\
 \n\
 two dimensional fast fourier transform of a vector")
 {
   Octave_object retval;
 
   int nargin = args.length ();
 
diff --git a/src/find.cc b/src/find.cc
--- a/src/find.cc
+++ b/src/find.cc
@@ -147,17 +147,17 @@ find_nonzero_elem_idx (const ComplexMatr
 	    count++;
 	  }
       }
 
   tree_constant tmp (v, 1);
   return find_to_fortran_idx (i_idx, j_idx, tmp, m_nr, m_nc, nargout);
 }
 
-DEFUN_DLD ("find", Ffind, Sfind, 2, 3,
+DEFUN_DLD_BUILTIN ("find", Ffind, Sfind, 2, 3,
   "find (X) or [I, J, V] = find (X): Return indices of nonzero elements")
 {
   Octave_object retval;
 
   int nargin = args.length ();
 
   if (nargin != 2 || nargout > 3)
     {
diff --git a/src/fsolve.cc b/src/fsolve.cc
--- a/src/fsolve.cc
+++ b/src/fsolve.cc
@@ -116,17 +116,17 @@ fsolve_user_function (const ColumnVector
 	}
       else
 	gripe_user_supplied_eval ("fsolve");
     }
 
   return retval;
 }
 
-DEFUN_DLD ("fsolve", Ffsolve, Sfsolve, 5, 1,
+DEFUN_DLD_BUILTIN ("fsolve", Ffsolve, Sfsolve, 5, 1,
   "Solve nonlinear equations using Minpack.  Usage:\n\
 \n\
   [X, INFO] = fsolve (F, X0)\n\
 \n\
 Where the first argument is the name of the  function to call to\n\
 compute the vector of function values.  It must have the form\n\
 \n\
   y = f (x)
@@ -256,17 +256,17 @@ do_fsolve_option (char *keyword, double 
 	  return;
 	}
       list++;
     }
 
   warning ("fsolve_options: no match for `%s'", keyword);
 }
 
-DEFUN_DLD ("fsolve_options", Ffsolve_options, Sfsolve_options, -1, 1,
+DEFUN_DLD_BUILTIN ("fsolve_options", Ffsolve_options, Sfsolve_options, -1, 1,
   "fsolve_options (KEYWORD, VALUE)\n\
 \n\
 Set or show options for fsolve.  Keywords may be abbreviated\n\
 to the shortest match.")
 {
   Octave_object retval;
 
   int nargin = args.length ();
diff --git a/src/fsqp.cc b/src/fsqp.cc
--- a/src/fsqp.cc
+++ b/src/fsqp.cc
@@ -49,22 +49,22 @@ fsqp_constraint_function (const ColumnVe
 {
   ColumnVector retval;
   return retval;
 }
 
 #endif
 
 #if defined (FSQP_MISSING)
-DEFUN_DLD ("fsqp", Ffsqp, Sfsqp, 11, 3,
+DEFUN_DLD_BUILTIN ("fsqp", Ffsqp, Sfsqp, 11, 3,
   "This function requires FSQP, which is not freely\n\
 redistributable.  For more information, read the file\n\
 libcruft/fsqp/README.MISSING in the source distribution.")
 #else
-DEFUN_DLD ("fsqp", Ffsqp, Sfsqp, 11, 3,
+DEFUN_DLD_BUILTIN ("fsqp", Ffsqp, Sfsqp, 11, 3,
   "[X, PHI] = fsqp (X, PHI [, LB, UB] [, LB, A, UB] [, LB, G, UB])\n\
 \n\
 Groups of arguments surrounded in `[]' are optional, but\n\
 must appear in the same relative order shown above.")
 #endif
 {
 /*
 
@@ -84,22 +84,22 @@ Handle all of the following:
   Octave_object retval;
 
   error ("fsqp: not implemented yet");
 
   return retval;
 }
 
 #if defined (FSQP_MISSING)
-DEFUN_DLD ("fsqp_options", Ffsqp_options, Sfsqp_options, -1, 1,
+DEFUN_DLD_BUILTIN ("fsqp_options", Ffsqp_options, Sfsqp_options, -1, 1,
   "This function requires FSQP, which is not freely\n\
 redistributable.  For more information, read the file\n\
 libcruft/fsqp/README.MISSING in the source distribution.")
 #else
-DEFUN_DLD ("fsqp_options", Ffsqp_options, Sfsqp_options, -1, 1,
+DEFUN_DLD_BUILTIN ("fsqp_options", Ffsqp_options, Sfsqp_options, -1, 1,
   "fsqp_options (KEYWORD, VALUE)\n\
 \n\
 Set or show options for fsqp.  Keywords may be abbreviated\n\
 to the shortest match.")
 #endif
 {
   Octave_object retval;
 
diff --git a/src/givens.cc b/src/givens.cc
--- a/src/givens.cc
+++ b/src/givens.cc
@@ -42,17 +42,17 @@ extern "C"
 {
   int F77_FCN (dlartg) (const double*, const double*, double*, double*,
 			double*);
 
   int F77_FCN (zlartg) (const Complex*, const Complex*, double*,
 			Complex*, Complex*);
 }
 
-DEFUN_DLD ("givens", Fgivens, Sgivens, 3, 2,
+DEFUN_DLD_BUILTIN ("givens", Fgivens, Sgivens, 3, 2,
   "G = givens (X, Y)\n\
 \n\
 compute orthogonal matrix G = [c s; -conj (s) c]\n\
 such that G [x; y] = [*; 0]  (x, y scalars)\n\
 \n\
 [c, s] = givens (x, y) returns the (c, s) values themselves.")
 {
   Octave_object retval;
diff --git a/src/hess.cc b/src/hess.cc
--- a/src/hess.cc
+++ b/src/hess.cc
@@ -31,17 +31,17 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "tree-const.h"
 #include "user-prefs.h"
 #include "error.h"
 #include "gripes.h"
 #include "utils.h"
 #include "help.h"
 #include "defun-dld.h"
 
-DEFUN_DLD ("hess", Fhess, Shess, 2, 2,
+DEFUN_DLD_BUILTIN ("hess", Fhess, Shess, 2, 2,
   "[P, H] = hess (A) or H = hess (A): Hessenberg decomposition")
 {
   Octave_object retval;
 
   if (args.length () != 2 || nargout > 2)
     {
       print_usage ("hess");
       return retval;
diff --git a/src/ifft.cc b/src/ifft.cc
--- a/src/ifft.cc
+++ b/src/ifft.cc
@@ -33,17 +33,17 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "gripes.h"
 #include "error.h"
 #include "utils.h"
 #include "help.h"
 #include "defun-dld.h"
 
 // This function should be merged with Ffft.
 
-DEFUN_DLD ("ifft", Fifft, Sifft, 3, 1,
+DEFUN_DLD_BUILTIN ("ifft", Fifft, Sifft, 3, 1,
   "ifft (X [, N]): inverse fast fourier transform of a vector")
 {
   Octave_object retval;
 
   int nargin = args.length ();
 
   if (nargin < 2 || nargin > 3)
     {
diff --git a/src/ifft2.cc b/src/ifft2.cc
--- a/src/ifft2.cc
+++ b/src/ifft2.cc
@@ -33,17 +33,17 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "gripes.h"
 #include "error.h"
 #include "utils.h"
 #include "help.h"
 #include "defun-dld.h"
 
 // This function should be merged with Ffft2.
 
-DEFUN_DLD ("ifft2", Fifft2, Sifft2, 3, 1,
+DEFUN_DLD_BUILTIN ("ifft2", Fifft2, Sifft2, 3, 1,
   "ifft2 (X [, N] [, M])\n\
 \n\
 two dimensional inverse fast fourier transform of a vector") 
 {
   Octave_object retval;
 
   int nargin = args.length ();
 
diff --git a/src/inv.cc b/src/inv.cc
--- a/src/inv.cc
+++ b/src/inv.cc
@@ -31,17 +31,17 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "tree-const.h"
 #include "user-prefs.h"
 #include "gripes.h"
 #include "error.h"
 #include "utils.h"
 #include "help.h"
 #include "defun-dld.h"
 
-DEFUN_DLD ("inv", Finv, Sinv, 2, 1,
+DEFUN_DLD_BUILTIN ("inv", Finv, Sinv, 2, 1,
   "inv (X): inverse of a square matrix")
 {
   Octave_object retval;
 
   int nargin = args.length ();
 
   if (nargin != 2)
     {
diff --git a/src/log.cc b/src/log.cc
--- a/src/log.cc
+++ b/src/log.cc
@@ -32,17 +32,17 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "error.h"
 #include "gripes.h"
 #include "utils.h"
 #include "help.h"
 #include "defun-dld.h"
 
 // XXX FIXME XXX -- the next two functions should really be just one...
 
-DEFUN_DLD ("logm", Flogm, Slogm, 2, 1,
+DEFUN_DLD_BUILTIN ("logm", Flogm, Slogm, 2, 1,
   "logm (X): matrix logarithm")
 {
   Octave_object retval;
 
   if (args.length () != 2)
     {
       print_usage ("logm");
       return retval;
@@ -138,17 +138,17 @@ DEFUN_DLD ("logm", Flogm, Slogm, 2, 1,
   else
     {
       gripe_wrong_type_arg ("logm", arg);
     }
 
   return retval;
 }
 
-DEFUN_DLD ("sqrtm", Fsqrtm, Ssqrtm, 2, 1,
+DEFUN_DLD_BUILTIN ("sqrtm", Fsqrtm, Ssqrtm, 2, 1,
  "sqrtm (X): matrix sqrt")
 {
   Octave_object retval;
 
   if (args.length () != 2)
     {
       print_usage ("sqrtm");
       return retval;
diff --git a/src/lpsolve.cc b/src/lpsolve.cc
--- a/src/lpsolve.cc
+++ b/src/lpsolve.cc
@@ -27,33 +27,33 @@ Software Foundation, 675 Mass Ave, Cambr
 
 #include "LPsolve.h"
 
 #include "tree-const.h"
 #include "error.h"
 #include "help.h"
 #include "defun-dld.h"
 
-DEFUN_DLD ("lpsolve", Flpsolve, Slpsolve, 11, 3,
+DEFUN_DLD_BUILTIN ("lpsolve", Flpsolve, Slpsolve, 11, 3,
   "lp_solve (): solve linear programs using lp_solve.")
 {
   Octave_object retval;
 
 // Force a bad value of inform, and empty matrices for x and phi.
   Matrix m;
   retval(2) = -1.0;
   retval(1) = m;
   retval(0) = m;
 
   error ("lpsolve: not implemented yet");
 
   return retval;
 }
 
-DEFUN_DLD ("lpsolve_options", Flpsolve_options, Slpsolve_options, -1, 1,
+DEFUN_DLD_BUILTIN ("lpsolve_options", Flpsolve_options, Slpsolve_options, -1, 1,
   "lp_solve_options (KEYWORD, VALUE)\n\
 \n\
 Set or show options for lp_solve.  Keywords may be abbreviated\n\
 to the shortest match.")
 {
   Octave_object retval;
 
   error ("lpsolve_options: not implemented yet");
diff --git a/src/lsode.cc b/src/lsode.cc
--- a/src/lsode.cc
+++ b/src/lsode.cc
@@ -89,17 +89,17 @@ lsode_user_function (const ColumnVector&
 	}
       else
 	gripe_user_supplied_eval ("lsode");
     }
 
   return retval;
 }
 
-DEFUN_DLD ("lsode", Flsode, Slsode, 6, 1,
+DEFUN_DLD_BUILTIN ("lsode", Flsode, Slsode, 6, 1,
   "lsode (F, X0, T_OUT, T_CRIT)\n\
 \n\
 The first argument is the name of the function to call to\n\
 compute the vector of right hand sides.  It must have the form\n\
 \n\
   xdot = f (x, t)\n\
 \n\
 where xdot and x are vectors and t is a scalar.\n")
@@ -271,17 +271,17 @@ do_lsode_option (char *keyword, double v
 	  return;
 	}
       list++;
     }
 
   warning ("lsode_options: no match for `%s'", keyword);
 }
 
-DEFUN_DLD ("lsode_options", Flsode_options, Slsode_options, -1, 1,
+DEFUN_DLD_BUILTIN ("lsode_options", Flsode_options, Slsode_options, -1, 1,
   "lsode_options (KEYWORD, VALUE)\n\
 \n\
 Set or show options for lsode.  Keywords may be abbreviated\n\
 to the shortest match.")
 {
   Octave_object retval;
 
   int nargin = args.length ();
diff --git a/src/lu.cc b/src/lu.cc
--- a/src/lu.cc
+++ b/src/lu.cc
@@ -30,17 +30,17 @@ Software Foundation, 675 Mass Ave, Cambr
 
 #include "tree-const.h"
 #include "user-prefs.h"
 #include "gripes.h"
 #include "utils.h"
 #include "help.h"
 #include "defun-dld.h"
 
-DEFUN_DLD ("lu", Flu, Slu, 2, 3,
+DEFUN_DLD_BUILTIN ("lu", Flu, Slu, 2, 3,
   "[L, U, P] = lu (A): LU factorization")
 {
   Octave_object retval;
 
   if (args.length () != 2 || nargout > 3)
     {
       print_usage ("lu");
       return retval;
diff --git a/src/minmax.cc b/src/minmax.cc
--- a/src/minmax.cc
+++ b/src/minmax.cc
@@ -138,17 +138,17 @@ max (const ComplexMatrix& a, const Compl
         else
           result.elem (i, j) = b.elem (i, j);
       }
 
   return result;
 }
 
 
-DEFUN_DLD ("min", Fmin, Smin, 3, 2,
+DEFUN_DLD_BUILTIN ("min", Fmin, Smin, 3, 2,
   "min (X): minimum value(s) of a vector (matrix)")
 {
   Octave_object retval;
 
   int nargin = args.length ();
 
   if (nargin == 1 || nargin > 3 || nargout > 2)
     {
@@ -313,17 +313,17 @@ DEFUN_DLD ("min", Fmin, Smin, 3, 2,
 	error ("min: nonconformant matrices");
     }
   else
     panic_impossible ();
 
   return retval;
 }
 
-DEFUN_DLD ("max", Fmax, Smax, 3, 2,
+DEFUN_DLD_BUILTIN ("max", Fmax, Smax, 3, 2,
   "max (X): maximum value(s) of a vector (matrix)")
 {
   Octave_object retval;
 
   int nargin = args.length ();
 
   if (nargin == 1 || nargin > 3 || nargout > 2)
     {
diff --git a/src/npsol.cc b/src/npsol.cc
--- a/src/npsol.cc
+++ b/src/npsol.cc
@@ -227,22 +227,22 @@ nonlinear_constraints_ok (const ColumnVe
 	}
     }
   return ok;
 }
 
 #endif
 
 #if defined (NPSOL_MISSING)
-DEFUN_DLD ("npsol", Fnpsol, Snpsol, 11, 3,
+DEFUN_DLD_BUILTIN ("npsol", Fnpsol, Snpsol, 11, 3,
   "This function requires NPSOL, which is not freely\n\
 redistributable.  For more information, read the file\n\
 libcruft/npsol/README.MISSING in the source distribution.")
 #else
-DEFUN_DLD ("npsol", Fnpsol, Snpsol, 11, 3,
+DEFUN_DLD_BUILTIN ("npsol", Fnpsol, Snpsol, 11, 3,
   "[X, OBJ, INFO, LAMBDA] = npsol (X, PHI [, LB, UB] [, LB, A, UB] [, LB, G, UB])\n\
 \n\
 Groups of arguments surrounded in `[]' are optional, but\n\
 must appear in the same relative order shown above.\n\
 \n\
 The second argument is a string containing the name of the objective\n\
 function to call.  The objective function must be of the form\n\
 \n\
@@ -741,22 +741,22 @@ do_npsol_option (char *keyword, double v
     }
 
   warning ("npsol_options: no match for `%s'", keyword);
 }
 
 #endif
 
 #if defined (NPSOL_MISSING)
-DEFUN_DLD ("npsol_options", Fnpsol_options, Snpsol_options, -1, 1,
+DEFUN_DLD_BUILTIN ("npsol_options", Fnpsol_options, Snpsol_options, -1, 1,
   "This function requires NPSOL, which is not freely\n\
 redistributable.  For more information, read the file\n\
 libcruft/npsol/README.MISSING in the source distribution.")
 #else
-DEFUN_DLD ("npsol_options", Fnpsol_options, Snpsol_options, -1, 1,
+DEFUN_DLD_BUILTIN ("npsol_options", Fnpsol_options, Snpsol_options, -1, 1,
   "npsol_options (KEYWORD, VALUE)\n\
 \n\
 Set or show options for npsol.  Keywords may be abbreviated\n\
 to the shortest match.")
 #endif
 {
   Octave_object retval;
 
diff --git a/src/qpsol.cc b/src/qpsol.cc
--- a/src/qpsol.cc
+++ b/src/qpsol.cc
@@ -47,22 +47,22 @@ extern int linear_constraints_ok (const 
 				  const ColumnVector& lub, char *warn_for,
 				  int warn);
 
 static QPSOL_options qpsol_opts;
 
 #endif
 
 #if defined (QPSOL_MISSING)
-DEFUN_DLD ("qpsol", Fqpsol, Sqpsol, 9, 3,
+DEFUN_DLD_BUILTIN ("qpsol", Fqpsol, Sqpsol, 9, 3,
   "This function requires QPSOL, which is not freely\n\
 redistributable.  For more information, read the file\n\
 libcruft/qpsol/README.MISSING in the source distribution.")
 #else
-DEFUN_DLD ("qpsol", Fqpsol, Sqpsol, 9, 3,
+DEFUN_DLD_BUILTIN ("qpsol", Fqpsol, Sqpsol, 9, 3,
   "[X, OBJ, INFO, LAMBDA] = qpsol (X, H, C [, LB, UB] [, LB, A, UB])\n\
 \n\
 Groups of arguments surrounded in `[]' are optional, but\n\
 must appear in the same relative order shown above.")
 #endif
 {
 /*
 
@@ -347,22 +347,22 @@ do_qpsol_option (char *keyword, double v
     }
 
   warning ("qpsol_options: no match for `%s'", keyword);
 }
 
 #endif
 
 #if defined (QPSOL_MISSING)
-DEFUN_DLD ("qpsol_options", Fqpsol_options, Sqpsol_options, -1, 1,
+DEFUN_DLD_BUILTIN ("qpsol_options", Fqpsol_options, Sqpsol_options, -1, 1,
   "This function requires QPSOL, which is not freely\n\
 redistributable.  For more information, read the file\n\
 libcruft/qpsol/README.MISSING in the source distribution.")
 #else
-DEFUN_DLD ("qpsol_options", Fqpsol_options, Sqpsol_options, -1, 1,
+DEFUN_DLD_BUILTIN ("qpsol_options", Fqpsol_options, Sqpsol_options, -1, 1,
   "qpsol_options (KEYWORD, VALUE)\n
 \n\
 Set or show options for qpsol.  Keywords may be abbreviated\n\
 to the shortest match.")
 #endif
 {
   Octave_object retval;
 
diff --git a/src/qr.cc b/src/qr.cc
--- a/src/qr.cc
+++ b/src/qr.cc
@@ -33,17 +33,17 @@ Software Foundation, 675 Mass Ave, Cambr
 
 #include "tree-const.h"
 #include "user-prefs.h"
 #include "gripes.h"
 #include "utils.h"
 #include "help.h"
 #include "defun-dld.h"
 
-DEFUN_DLD ("qr", Fqr, Sqr, 2, 2,
+DEFUN_DLD_BUILTIN ("qr", Fqr, Sqr, 2, 2,
   "[Q, R] = qr (X):      form Q unitary and R upper triangular such\n\
                        that Q * R = X\n\
 \n\
 [Q, R] = qr (X, 0):    form the economy decomposition such that if X is\n\
                        if X is m by n then only the first n columns of Q\n\
                        are computed.\n\
 \n\
 [Q, R, P] = qr (X):    form QRP factorization of X where\n\
diff --git a/src/quad.cc b/src/quad.cc
--- a/src/quad.cc
+++ b/src/quad.cc
@@ -80,17 +80,17 @@ quad_user_function (double x)
 	  quad_integration_error = 1;  // XXX FIXME XXX
 	  gripe_user_supplied_eval ("quad");
 	}
     }
 
   return retval;
 }
 
-DEFUN_DLD ("quad", Fquad, Squad, 6, 3,
+DEFUN_DLD_BUILTIN ("quad", Fquad, Squad, 6, 3,
   "[V, IER, NFUN] = quad (F, A, B [, TOL] [, SING])\n\
 \n\
 Where the first argument is the name of the  function to call to\n\
 compute the value of the integrand.  It must have the form\n\
 \n\
   y = f (x)
 \n\
 where y and x are scalars.\n\
@@ -322,17 +322,17 @@ do_quad_option (char *keyword, double va
 	  return;
 	}
       list++;
     }
 
   warning ("quad_options: no match for `%s'", keyword);
 }
 
-DEFUN_DLD ("quad_options", Fquad_options, Squad_options, -1, 1,
+DEFUN_DLD_BUILTIN ("quad_options", Fquad_options, Squad_options, -1, 1,
   "quad_options (KEYWORD, VALUE)\n\
 \n\
 Set or show options for quad.  Keywords may be abbreviated\n\
 to the shortest match.")
 {
   Octave_object retval;
 
   int nargin = args.length ();
diff --git a/src/qzval.cc b/src/qzval.cc
--- a/src/qzval.cc
+++ b/src/qzval.cc
@@ -49,17 +49,17 @@ extern "C"
  
   int F77_FCN (qzit) (const int*, const int*, double*, double*, const
 		      double*, const long*, double*, int*);
  
   int F77_FCN (qzval) (const int*, const int*, double*, double*,
 		       double*, double*, double*, const long*, double*);
 }
 
-DEFUN_DLD ("qzvalue", Fqzvalue, Sqzvalue, 3, 1,
+DEFUN_DLD_BUILTIN ("qzvalue", Fqzvalue, Sqzvalue, 3, 1,
   "X = qzval (A, B)\n\
 \n\
 compute generalized eigenvalues of the matrix pencil (A - lambda B).\n\
 A and B must be real matrices.")
 {
   Octave_object retval;
 
   if (args.length () != 3 || nargout > 1)
diff --git a/src/rand.cc b/src/rand.cc
--- a/src/rand.cc
+++ b/src/rand.cc
@@ -92,17 +92,17 @@ curr_rand_dist (void)
     return "normal";
   else
     {
       panic_impossible ();
       return 0;
     }
 }
 
-DEFUN_DLD ("rand", Frand, Srand, 2, 1,
+DEFUN_DLD_BUILTIN ("rand", Frand, Srand, 2, 1,
   "rand                  -- generate a random value\n\
 \n\
 rand (N)              -- generate N x N matrix\n\
 rand (A)              -- generate matrix the size of A\n\
 rand (N, M)           -- generate N x M matrix\n\
 rand (\"dist\")         -- get current distribution\n\
 rand (DISTRIBUTION)   -- set distribution type (\"normal\" or \"uniform\"\n\
 rand (SEED)           -- get current seed\n\
diff --git a/src/schur.cc b/src/schur.cc
--- a/src/schur.cc
+++ b/src/schur.cc
@@ -31,17 +31,17 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "tree-const.h"
 #include "user-prefs.h"
 #include "utils.h"
 #include "error.h"
 #include "gripes.h"
 #include "help.h"
 #include "defun-dld.h"
 
-DEFUN_DLD ("schur", Fschur, Sschur, 3, 2,
+DEFUN_DLD_BUILTIN ("schur", Fschur, Sschur, 3, 2,
   "[U, S] = schur (A) or S = schur (A)\n\
 \n\
 or, for ordered Schur:\n\
 \n\
   [U, S] = schur (A, TYPE) or S = schur (A, TYPE)\n\
 where TYPE is a string that begins with one of the following\n\
 characters:\n\
 \n\
diff --git a/src/sort.cc b/src/sort.cc
--- a/src/sort.cc
+++ b/src/sort.cc
@@ -158,17 +158,17 @@ mx_sort (ComplexRowVector& cv, RowVector
 	    {
 	      double tmp = idx.elem (k);
 	      idx.elem (k) = idx.elem (k+gap);
 	      idx.elem (k+gap) = tmp;
 	    }
 	}
 }
 
-DEFUN_DLD ("sort", Fsort, Ssort, 2, 2,
+DEFUN_DLD_BUILTIN ("sort", Fsort, Ssort, 2, 2,
   "[S, I] = sort (X)\n\
 \n\
 sort the columns of X, optionally return sort index")
 {
   Octave_object retval;
 
   int nargin = args.length ();
 
diff --git a/src/svd.cc b/src/svd.cc
--- a/src/svd.cc
+++ b/src/svd.cc
@@ -31,17 +31,17 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "tree-const.h"
 #include "user-prefs.h"
 #include "gripes.h"
 #include "error.h"
 #include "utils.h"
 #include "help.h"
 #include "defun-dld.h"
 
-DEFUN_DLD ("svd", Fsvd, Ssvd, 2, 3,
+DEFUN_DLD_BUILTIN ("svd", Fsvd, Ssvd, 2, 3,
   "S = svd (X) or [U, S, V] = svd (X [, 0])\n\
 \n\
 Compute the singular value decomposition of X.  Given a second input\n\
 argument, an `economy' sized factorization is computed that omits\n\
 unnecessary rows and columns of U and V")
 {
   Octave_object retval;
 
diff --git a/src/syl.cc b/src/syl.cc
--- a/src/syl.cc
+++ b/src/syl.cc
@@ -51,17 +51,17 @@ extern "C"
  
   int F77_FCN (ztrsyl) (const char*, const char*, const int*,
 			const int*, const int*, const Complex*,
 			const int*, const Complex*, const int*,
 			const Complex*, const int*, double*, int*,
 			long, long);
 }
 
-DEFUN_DLD ("syl", Fsyl, Ssyl, 4, 1,
+DEFUN_DLD_BUILTIN ("syl", Fsyl, Ssyl, 4, 1,
   "X = syl (A, B, C): solve the Sylvester equation A X + X B + C = 0")
 {
   Octave_object retval;
 
   if (args.length () != 4 || nargout > 1)
     {
       print_usage ("syl");
       return retval;
