# HG changeset patch
# User jwe
# Date 812783436 0
#      Wed Oct 04 05:10:36 1995 +0000
# Node ID b3e4ca4f75a016ef45973ec28d5215321f014af6
# Parent  f07d425a9b04a18788d0c22ed464ce35a0ec3e57
[project @ 1995-10-04 05:10:36 by jwe]

diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -1185,16 +1185,29 @@ next_token_is_postfix_unary_op (int spc_
   return un_op;
 }
 
 // Try to determine if the next token should be treated as a binary
 // operator.  This is even uglier, but it also seems to do the right
 // thing.  Note that it is only necessary to check the spacing for `+'
 // and `-', since those are the only tokens that can appear as unary
 // ops too.
+//
+// Note that this never returns true for `.', even though it can be a
+// binary operator (the structure reference thing).  The only time
+// this appears to matter is for things like
+//
+//   [ a . b ]
+//
+// which probably doesn't occur that often, can be worked around by
+// eliminating the whitespace, putting the expression in parentheses,
+// or using `whitespace_in_literal_matrix = "ignored"', so I think it
+// is an acceptable change.  It would be quite a bit harder to `fix'
+// this.  (Well, maybe not.  the best fix would be to do away with the
+// specialness of whitespace inside of `[ ... ]').
 
 static int
 next_token_is_bin_op (int spc_prev, char *yytext)
 {
   int bin_op = 0;
 
   int c0 = yyinput ();
 
