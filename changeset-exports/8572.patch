# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1232647820 18000
#      Thu Jan 22 13:10:20 2009 -0500
# Node ID e17f262a02cd23afe690dc0e5b8a9bc85481254c
# Parent  38ee7ce3bc7d065153285c501c12f266f0a81cbf
display.cc: get info for windows and os x systems

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2009-01-22  John W. Eaton  <jwe@octave.org>
+
+	* display.cc (display_info::init): Get info for Windows and OS X
+	systems.
+
 2009-01-22  Jaroslav Hajek  <highegg@gmail.com>
 
 	* pt-idx.cc (tree_index_expression::lvalue): Correct tmpi when seeing
 	a plain struct component.
 	* ov-struct.cc (octave_struct::subsasgn): Use proper type substr in
 	empty_conv.
 
 2009-01-22  Jaroslav Hajek  <highegg@gmail.com>
diff --git a/src/display.cc b/src/display.cc
--- a/src/display.cc
+++ b/src/display.cc
@@ -21,35 +21,78 @@ along with Octave; see the file COPYING.
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cstdlib>
 
-#if defined (HAVE_X_WINDOWS)
+#if defined (OCTAVE_USE_WINDOWS_API)
+#include <Windows.h>
+#elif defined (OCTAVE_USE_OS_X_API)
+#include <CGDirectDisplay.h>
+#include <CGDisplayConfiguration.h>
+#elif defined (HAVE_X_WINDOWS)
 #include <X11/Xlib.h>
 #endif
 
+
+
 #include "display.h"
 #include "error.h"
 
 display_info *display_info::instance = 0;
 
 void
 display_info::init (void)
 {
 #if defined (OCTAVE_USE_WINDOWS_API)
 
-  warning ("code to find screen properties is missing");
+  HDC hdc = GetDC (0);
+
+  if (hdc)
+    {
+      dp = GetDeviceCaps (hdc, BITSPIXEL)
+
+      ht = GetDeviceCaps (hdc, VERTRES);
+      wd = GetDeviceCaps (hdc, HORZRES);
+
+      double ht_mm = GetDeviceCaps (hdc, VERTSIZE);
+      double wd_mm = GetDeviceCaps (hdc, HORZSIZE);
+
+      rx = wd * 25.4 / wd_mm;
+      ry = ht * 25.4 / ht_mm;
+    }
+  else
+    warning ("no graphical display found");
+
+#elif defined (OCTAVE_USE_OS_X_API)
 
-#elif defined (OCTAVE_USE_COCOA_API)  // FIXME -- what should this be called?
+  CGDirectDisplayID display = CGMainDisplayID ();
+
+  if (display)
+    {
+      dp = CGDisplayBitsPerPixel (display);
+
+      ht = CGDisplayPixelsHigh (display);
+      wd = CGDisplayPixelsWide (display);
+
+      CGSize sz_mm = CGDisplayScreenSize (display);
 
-  warning ("code to find screen properties is missing");
+      CGFloat ht_mm = sz_mm.height;
+      CGFloat wd_mm = sz_mm.width;
+
+      rx = wd * 25.4 / wd_mm;
+      ry = ht * 25.4 / ht_mm;
+
+      std::cerr << depth << " bit depth" << std::endl;
+    }
+  else
+    warning ("no graphical display found");
 
 #elif defined (HAVE_X_WINDOWS)
 
   const char *display_name = getenv ("DISPLAY");
 
   if (display_name && *display_name)
     {
       Display *display = XOpenDisplay (display_name);
