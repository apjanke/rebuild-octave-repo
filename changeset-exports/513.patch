# HG changeset patch
# User jwe
# Date 774042911 0
#      Tue Jul 12 19:55:11 1994 +0000
# Node ID 3c95cec7dd0542f4bbd6f4655e229842da007a4f
# Parent  f13cce2fda30cf2838b4af22c9037c625f37ad8d
[project @ 1994-07-12 19:52:40 by jwe]

diff --git a/src/pt-const.cc b/src/pt-const.cc
--- a/src/pt-const.cc
+++ b/src/pt-const.cc
@@ -355,22 +355,22 @@ find_to_fortran_idx (const ColumnVector 
 	  tmp (i) = nr * (j_idx (i) - 1.0) + i_idx (i);
 	retval(0) = tree_constant (tmp, 1);
 // If you want this to work more like Matlab, use the following line
 // instead of the previous one.
 //	retval(0) = tree_constant (tmp, (nr != 1));
       }
       break;
     case 3:
-      retval(2) = tree_constant (val, 1);
+      retval(2) = val;
     case 2:
-      retval(0) = tree_constant (tmp, 1);
+      retval(0) = tree_constant (i_idx, 1);
 // If you want this to work more like Matlab, use the following line
 // instead of the previous one.
-//    retval(0) = tree_constant (tmp, (nr != 1));
+//    retval(0) = tree_constant (i_idx, (nr != 1));
       retval(1) = tree_constant (j_idx, 1);
       break;
     default:
       panic_impossible ();
       break;
     }
 
   return retval;
@@ -408,17 +408,18 @@ find_nonzero_elem_idx (const Matrix& m, 
 	  {
 	    i_idx (count) = i + 1;
 	    j_idx (count) = j + 1;
 	    v (count) = d;
 	    count++;
 	  }
       }
 
-  return find_to_fortran_idx (i_idx, j_idx, v, m_nr, m_nc, nargout);
+  tree_constant tmp (v, 1);
+  return find_to_fortran_idx (i_idx, j_idx, tmp, m_nr, m_nc, nargout);
 }
 
 static Octave_object
 find_nonzero_elem_idx (const ComplexMatrix& m, int nargout)
 {
   int count = 0;
   int m_nr = m.rows ();
   int m_nc = m.columns ();
@@ -448,17 +449,18 @@ find_nonzero_elem_idx (const ComplexMatr
 	  {
 	    i_idx (count) = i;
 	    j_idx (count) = j;
 	    v (count) = c;
 	    count++;
 	  }
       }
 
-  return find_to_fortran_idx (i_idx, j_idx, v, m_nr, m_nc, nargout);
+  tree_constant tmp (v, 1);
+  return find_to_fortran_idx (i_idx, j_idx, tmp, m_nr, m_nc, nargout);
 }
 
 Octave_object
 find_nonzero_elem_idx (const tree_constant& a, int nargout)
 {
   Matrix result;
 
   nargout = (nargout == 0) ? 1 : nargout;
