# HG changeset patch
# User Bill Lash
# Date 1504039608 14400
#      Tue Aug 29 16:46:48 2017 -0400
# Node ID b4cf41d173dd44f644e05e39632fb74afcc5a697
# Parent  6cc3aafbdc41c7f2ba444110b9b23ebfd950742f
* cplxpair.m: Improve accuracy and compatibility (bug #50124)

diff --git a/scripts/general/cplxpair.m b/scripts/general/cplxpair.m
--- a/scripts/general/cplxpair.m
+++ b/scripts/general/cplxpair.m
@@ -60,20 +60,21 @@ function y = cplxpair (z, tol, dim)
     print_usage ();
   endif
 
   if (isempty (z))
     y = zeros (size (z));
     return;
   endif
 
+  cls = ifelse (isa (z, "single"), "single", "double");
   if (nargin < 2 || isempty (tol))
-    tol = 100;
-  elseif (! isscalar (tol) || tol < 0)
-    error ("cplxpair: TOL must be a positive scalar number");
+    tol = 100*eps(cls);
+  elseif (! isscalar (tol) || tol < 0 || tol >= 1)
+    error ("cplxpair: TOL must be a scalar number such that 0 <= TOL < 1");
   endif
 
   nd = ndims (z);
   if (nargin < 3)
     ## Find the first singleton dimension.
     sz = size (z);
     (dim = find (sz > 1, 1)) || (dim = 1);
   else
@@ -90,44 +91,51 @@ function y = cplxpair (z, tol, dim)
   n = sz(1);
   m = prod (sz) / n;
   z = reshape (z, n, m);
 
   ## Sort the sequence in terms of increasing real values.
   [q, idx] = sort (real (z), 1);
   z = z(idx + n * ones (n, 1) * [0:m-1]);
 
+
   ## Put the purely real values at the end of the returned list.
-  cls = ifelse (isa (z, "single"), "single", "double");
   [idxi, idxj] = find (abs (imag (z)) ./ (abs (z) + realmin (cls)) ...
-                       < tol*eps (abs (z)));
+                       <= tol);
+  ## Force values detected to be real within tolerance to actually be real.
+  z(idxi + n*(idxj-1)) = real (z(idxi + n*(idxj-1)));
   q = sparse (idxi, idxj, 1, n, m);
   nr = sum (q, 1);
   [q, idx] = sort (q, 1);
-  z = z(idx);
+  si = size(idx);
+  midx=idx+[0:si(2)-1]*si(1);
+  z = z(midx);
   y = z;
 
   ## For each remaining z, place the value and its conjugate at the start of
   ## the returned list, and remove them from further consideration.
   for j = 1:m
     p = n - nr(j);
     for i = 1:2:p
       if (i+1 > p)
         error ("cplxpair: could not pair all complex numbers");
       endif
-      [v, idx] = min (abs (z(i+1:p) - conj (z(i))));
-      if (v > tol*eps (abs (z(i))))
+      [v, idx] = min (abs (z(i+1:p,j) - conj (z(i,j))));
+      if (v >= tol*abs(z(i,j)))
         error ("cplxpair: could not pair all complex numbers");
       endif
-      if (imag (z(i)) < 0)
-        y([i, i+1]) = z([i, idx+i]);
+      ## For pairs, select the one with positive imaginary part
+      ## and use it and it's conjugate, but the pair with negative
+      ## imaginary part first
+      if (imag (z(i,j)) > 0)
+        y([i, i+1],j) = [conj(z(i,j)), z(i,j)];
       else
-        y([i, i+1]) = z([idx+i, i]);
+        y([i, i+1],j) = [conj(z(idx+i,j)), z(idx+i,j)];
       endif
-      z(idx+i) = z(i+1);
+      z(idx+i,j) = z(i+1,j);
     endfor
   endfor
 
   ## Reshape the output matrix.
   y = ipermute (reshape (y, sz), perm);
 
 endfunction
 
@@ -139,30 +147,38 @@ endfunction
 %!assert (cplxpair (1), 1)
 %!assert (cplxpair ([1+1i, 1-1i]), [1-1i, 1+1i])
 %!assert (cplxpair ([1+1i, 1+1i, 1, 1-1i, 1-1i, 2]), ...
 %!                  [1-1i, 1+1i, 1-1i, 1+1i, 1, 2])
 %!assert (cplxpair ([1+1i; 1+1i; 1; 1-1i; 1-1i; 2]), ...
 %!                  [1-1i; 1+1i; 1-1i; 1+1i; 1; 2])
 %!assert (cplxpair ([0, 1, 2]), [0, 1, 2])
 
-%!shared z
+%!shared z,y
 %! z = exp (2i*pi*[4; 3; 5; 2; 6; 1; 0]/7);
+%! z(2) = conj(z(1));
+%! z(4) = conj(z(3));
+%! z(6) = conj(z(5));
 %!assert (cplxpair (z(randperm (7))), z)
 %!assert (cplxpair (z(randperm (7))), z)
 %!assert (cplxpair (z(randperm (7))), z)
 %!assert (cplxpair ([z(randperm (7)), z(randperm (7))]), [z,z])
 %!assert (cplxpair ([z(randperm (7)), z(randperm (7))],[],1), [z,z])
 %!assert (cplxpair ([z(randperm (7)).'; z(randperm (7)).'],[],2), [z.';z.'])
+%! y = [ -1-1i; -1+1i;-3; -2; 1; 2; 3];
+%!assert (cplxpair ([z(randperm (7)), y(randperm (7))]), [z,y])
+%!assert (cplxpair ([z(randperm (7)), y(randperm (7)),z(randperm (7))]), [z,y,z])
+
 
 ## Test tolerance
 %!assert (cplxpair ([2000 * (1+eps) + 4j; 2000 * (1-eps) - 4j]), ...
 %!        [(2000 - 4j); (2000 + 4j)], 100*eps(200))
 %!error <could not pair> cplxpair ([2000 * (1+eps) + 4j; 2000 * (1-eps) - 4j], 0)
 
 %!error <could not pair> cplxpair ([2e6 + j; 2e6 - j; 1e-9 * (1 + j); 1e-9 * (1 - 2j)])
 
 ## Test input validation
 %!error cplxpair ()
 %!error cplxpair (1,2,3,4)
-%!error <TOL must be .* positive> cplxpair (1, -1)
-%!error <TOL must be .* scalar number> cplxpair (1, ones (2,2))
+%!error <cplxpair: TOL must be .* scalar number> cplxpair (1, -1)
+%!error <cplxpair: TOL must be .* scalar number> cplxpair (1, ones (2,2))
 %!error <invalid dimension DIM> cplxpair (1, [], 3)
+
