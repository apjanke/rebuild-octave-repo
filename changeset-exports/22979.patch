# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1483036743 18000
#      Thu Dec 29 13:39:03 2016 -0500
# Node ID 28cd5a239fdaeaa4b7e85201567de034e06b868a
# Parent  750c8b4b71641e3a14b10241feaeb2a83490d2ad
# Parent  03819d65cc1d71f684483e8a3fe1455e1646530f
maint: Merge stable to default.

diff --git a/liboctave/array/CMatrix.cc b/liboctave/array/CMatrix.cc
--- a/liboctave/array/CMatrix.cc
+++ b/liboctave/array/CMatrix.cc
@@ -2802,72 +2802,72 @@ operator * (const ComplexColumnVector& v
 // matrix by diagonal matrix -> matrix operations
 
 ComplexMatrix&
 ComplexMatrix::operator += (const DiagMatrix& a)
 {
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
 
-  octave_idx_type a_nr = rows ();
-  octave_idx_type a_nc = cols ();
+  octave_idx_type a_nr = a.rows ();
+  octave_idx_type a_nc = a.cols ();
 
   if (nr != a_nr || nc != a_nc)
     octave::err_nonconformant ("operator +=", nr, nc, a_nr, a_nc);
 
   for (octave_idx_type i = 0; i < a.length (); i++)
     elem (i, i) += a.elem (i, i);
 
   return *this;
 }
 
 ComplexMatrix&
 ComplexMatrix::operator -= (const DiagMatrix& a)
 {
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
 
-  octave_idx_type a_nr = rows ();
-  octave_idx_type a_nc = cols ();
+  octave_idx_type a_nr = a.rows ();
+  octave_idx_type a_nc = a.cols ();
 
   if (nr != a_nr || nc != a_nc)
     octave::err_nonconformant ("operator -=", nr, nc, a_nr, a_nc);
 
   for (octave_idx_type i = 0; i < a.length (); i++)
     elem (i, i) -= a.elem (i, i);
 
   return *this;
 }
 
 ComplexMatrix&
 ComplexMatrix::operator += (const ComplexDiagMatrix& a)
 {
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
 
-  octave_idx_type a_nr = rows ();
-  octave_idx_type a_nc = cols ();
+  octave_idx_type a_nr = a.rows ();
+  octave_idx_type a_nc = a.cols ();
 
   if (nr != a_nr || nc != a_nc)
     octave::err_nonconformant ("operator +=", nr, nc, a_nr, a_nc);
 
   for (octave_idx_type i = 0; i < a.length (); i++)
     elem (i, i) += a.elem (i, i);
 
   return *this;
 }
 
 ComplexMatrix&
 ComplexMatrix::operator -= (const ComplexDiagMatrix& a)
 {
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
 
-  octave_idx_type a_nr = rows ();
-  octave_idx_type a_nc = cols ();
+  octave_idx_type a_nr = a.rows ();
+  octave_idx_type a_nc = a.cols ();
 
   if (nr != a_nr || nc != a_nc)
     octave::err_nonconformant ("operator -=", nr, nc, a_nr, a_nc);
 
   for (octave_idx_type i = 0; i < a.length (); i++)
     elem (i, i) -= a.elem (i, i);
 
   return *this;
diff --git a/liboctave/array/fCMatrix.cc b/liboctave/array/fCMatrix.cc
--- a/liboctave/array/fCMatrix.cc
+++ b/liboctave/array/fCMatrix.cc
@@ -2822,72 +2822,72 @@ operator * (const FloatComplexColumnVect
 // matrix by diagonal matrix -> matrix operations
 
 FloatComplexMatrix&
 FloatComplexMatrix::operator += (const FloatDiagMatrix& a)
 {
   F77_INT nr = rows ();
   F77_INT nc = cols ();
 
-  octave_idx_type a_nr = rows ();
-  octave_idx_type a_nc = cols ();
+  octave_idx_type a_nr = a.rows ();
+  octave_idx_type a_nc = a.cols ();
 
   if (nr != a_nr || nc != a_nc)
     octave::err_nonconformant ("operator +=", nr, nc, a_nr, a_nc);
 
   for (octave_idx_type i = 0; i < a.length (); i++)
     elem (i, i) += a.elem (i, i);
 
   return *this;
 }
 
 FloatComplexMatrix&
 FloatComplexMatrix::operator -= (const FloatDiagMatrix& a)
 {
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
 
-  octave_idx_type a_nr = rows ();
-  octave_idx_type a_nc = cols ();
+  octave_idx_type a_nr = a.rows ();
+  octave_idx_type a_nc = a.cols ();
 
   if (nr != a_nr || nc != a_nc)
     octave::err_nonconformant ("operator -=", nr, nc, a_nr, a_nc);
 
   for (octave_idx_type i = 0; i < a.length (); i++)
     elem (i, i) -= a.elem (i, i);
 
   return *this;
 }
 
 FloatComplexMatrix&
 FloatComplexMatrix::operator += (const FloatComplexDiagMatrix& a)
 {
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
 
-  octave_idx_type a_nr = rows ();
-  octave_idx_type a_nc = cols ();
+  octave_idx_type a_nr = a.rows ();
+  octave_idx_type a_nc = a.cols ();
 
   if (nr != a_nr || nc != a_nc)
     octave::err_nonconformant ("operator +=", nr, nc, a_nr, a_nc);
 
   for (octave_idx_type i = 0; i < a.length (); i++)
     elem (i, i) += a.elem (i, i);
 
   return *this;
 }
 
 FloatComplexMatrix&
 FloatComplexMatrix::operator -= (const FloatComplexDiagMatrix& a)
 {
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
 
-  octave_idx_type a_nr = rows ();
-  octave_idx_type a_nc = cols ();
+  octave_idx_type a_nr = a.rows ();
+  octave_idx_type a_nc = a.cols ();
 
   if (nr != a_nr || nc != a_nc)
     octave::err_nonconformant ("operator -=", nr, nc, a_nr, a_nc);
 
   for (octave_idx_type i = 0; i < a.length (); i++)
     elem (i, i) -= a.elem (i, i);
 
   return *this;
