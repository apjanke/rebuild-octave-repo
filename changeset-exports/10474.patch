# HG changeset patch
# User David Grundberg <davidg@cs.umu.se>
# Date 1269796068 -7200
#      Sun Mar 28 19:07:48 2010 +0200
# Node ID b2143d97c00299e90c65136c74bca02c62d1645c
# Parent  169be980faf98aa843bf007a3a5ae4166de67b2b
Neither include qhull/qhull_a.h nor run tests unless we HAVE_QHULL.

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2010-03-28  David Grundberg  <davidg@cs.umu.se>
+
+	* DLD-FUNCTIONS/convhulln.cc [HAVE_QHULL]: Neither include
+	qhull/qhull_a.h nor run tests if unless we HAVE_QHULL.
+
 2010-03-26  Jaroslav Hajek  <highegg@gmail.com>
 
 	* variables.cc (maybe_missing_function_hook): Temporarily clear before
 	executing the hook to avoid recursive calls.
 
 2010-03-25  John W. Eaton  <jwe@octave.org>
 
 	* gl2ps-renderer.cc (glps_renderer::draw): Tag call to fclose
diff --git a/src/DLD-FUNCTIONS/convhulln.cc b/src/DLD-FUNCTIONS/convhulln.cc
--- a/src/DLD-FUNCTIONS/convhulln.cc
+++ b/src/DLD-FUNCTIONS/convhulln.cc
@@ -36,23 +36,25 @@ 2006-05-01 Tom Holroyd
 #include <sstream>
 
 #include "Cell.h"
 #include "defun-dld.h"
 #include "error.h"
 #include "oct-obj.h"
 #include "parse.h"
 
+#ifdef HAVE_QHULL
 extern "C" {
 #include <qhull/qhull_a.h>
 }
 
-#if defined (HAVE_QHULL) && defined (NEED_QHULL_VERSION)
+# ifdef NEED_QHULL_VERSION
 char qh_version[] = "convhulln.oct 2007-07-24";
-#endif
+# endif
+#endif /* HAVE_QHULL */
 
 DEFUN_DLD (convhulln, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{h} =} convhulln (@var{p})\n\
 @deftypefnx {Loadable Function} {@var{h} =} convhulln (@var{p}, @var{opt})\n\
 @deftypefnx {Loadable Function} {[@var{h}, @var{v}] =} convhulln (@dots{})\n\
 Return an index vector to the points of the enclosing convex hull.\n\
 The input matrix of size [n, dim] contains n points of dimension dim.\n\n\
@@ -227,17 +229,17 @@ calculated.\n\n\
 #else
   error ("convhulln: not available in this version of Octave");
 #endif
 
   return retval;
 }
 
 /*
-%!test
+%!testif HAVE_QHULL
 %! cube = [0 0 0;1 0 0;1 1 0;0 1 0;0 0 1;1 0 1;1 1 1;0 1 1];
 %! [h, v] = convhulln(cube,'Pp');
 %! assert (v, 1.0, 1e6*eps);
-%!test
+%!testif HAVE_QHULL
 %! tetrahedron = [1 1 1;-1 -1 1;-1 1 -1;1 -1 -1];
 %! [h, v] = convhulln(tetrahedron,'Pp');
 %! assert (v, 8/3, 1e6*eps);
 */
