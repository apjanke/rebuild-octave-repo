# HG changeset patch
# User Max Brister <max@2bass.com>
# Date 1341871614 18000
#      Mon Jul 09 17:06:54 2012 -0500
# Node ID 561aad6a9e4b553aba9df6be83dcce6ee46913b7
# Parent  a5f75de0dab1c0a021a06668c35fe823e5d7de03
Initial support for complex numbers in JIT

* src/pt-jit.cc (octave_jit_cast_complex_any, octave_jit_cast_any_complex):
  New function.
  (jit_typeinfo::jit_typeinfo, jit_typeinfo::type_of,
  jit_convert::convert_llvm::visit): Support complex numbers.

* src/pt-jit.h (jit_typeinfo::get_complex): New function.
  (jit_const_complex): New typedef.

diff --git a/src/pt-jit.cc b/src/pt-jit.cc
--- a/src/pt-jit.cc
+++ b/src/pt-jit.cc
@@ -51,16 +51,17 @@ along with Octave; see the file COPYING.
 #include <llvm/Support/TargetSelect.h>
 #include <llvm/Support/raw_os_ostream.h>
 
 #include "octave.h"
 #include "ov-fcn-handle.h"
 #include "ov-usr-fcn.h"
 #include "ov-builtin.h"
 #include "ov-scalar.h"
+#include "ov-complex.h"
 #include "pt-all.h"
 
 static llvm::IRBuilder<> builder (llvm::getGlobalContext ());
 
 static llvm::LLVMContext& context = llvm::getGlobalContext ();
 
 jit_typeinfo *jit_typeinfo::instance;
 
@@ -194,16 +195,34 @@ octave_jit_cast_scalar_any (octave_base_
 
 extern "C" octave_base_value *
 octave_jit_cast_any_scalar (double value)
 {
   return new octave_scalar (value);
 }
 
 extern "C" void
+octave_jit_cast_complex_any (double *dest, octave_base_value *obv)
+{
+  Complex ret = obv->complex_value ();
+  obv->release ();
+  dest[0] = ret.real ();
+  dest[1] = ret.imag ();
+}
+
+extern "C" octave_base_value *
+octave_jit_cast_any_complex (double real, double imag)
+{
+  if (imag == 0)
+    return new octave_scalar (real);
+  else
+    return new octave_complex (Complex (real, imag));
+}
+
+extern "C" void
 octave_jit_gripe_nan_to_logical_conversion (void)
 {
   try
     {
       gripe_nan_to_logical_conversion ();
     }
   catch (const octave_execution_exception&)
     {
@@ -496,24 +515,27 @@ jit_typeinfo::jit_typeinfo (llvm::Module
   llvm::Type *matrix_contents[5];
   matrix_contents[0] = refcount_t->getPointerTo ();
   matrix_contents[1] = scalar_t->getPointerTo ();
   matrix_contents[2] = index_t;
   matrix_contents[3] = index_t->getPointerTo ();
   matrix_contents[4] = string_t;
   matrix_t->setBody (llvm::makeArrayRef (matrix_contents, 5));
 
+  llvm::Type *complex_t = llvm::VectorType::get (scalar_t, 2);
+
   // create types
   any = new_type ("any", 0, any_t);
   matrix = new_type ("matrix", any, matrix_t);
   scalar = new_type ("scalar", any, scalar_t);
   range = new_type ("range", any, range_t);
   string = new_type ("string", any, string_t);
   boolean = new_type ("bool", any, bool_t);
   index = new_type ("index", any, index_t);
+  complex = new_type ("complex", any, complex_t);
 
   casts.resize (next_id + 1);
   identities.resize (next_id + 1, 0);
 
   // bind global variables
   lerror_state = new llvm::GlobalVariable (*module, bool_t, false,
                                            llvm::GlobalValue::ExternalLinkage,
                                            0, "error_state");
@@ -590,16 +612,20 @@ jit_typeinfo::jit_typeinfo (llvm::Module
   engine->addGlobalMapping (fn,
                             reinterpret_cast<void *> (&octave_jit_release_matrix));
   release_fn.add_overload (fn, false, 0, matrix);
 
   // release scalar
   fn = create_identity (scalar);
   release_fn.add_overload (fn, false, 0, scalar);
 
+  // release complex
+  fn = create_identity (complex);
+  release_fn.add_overload (fn, false, 0, complex);
+
   // release index
   fn = create_identity (index);
   release_fn.add_overload (fn, false, 0, index);
 
   // now for binary scalar operations
   // FIXME: Finish all operations
   add_binary_op (scalar, octave_value::op_add, llvm::Instruction::FAdd);
   add_binary_op (scalar, octave_value::op_sub, llvm::Instruction::FSub);
@@ -658,16 +684,77 @@ jit_typeinfo::jit_typeinfo (llvm::Module
     builder.CreateRet (ret);
 
     jit_operation::overload ol (fn, true, scalar, scalar, scalar);
     binary_ops[octave_value::op_ldiv].add_overload (ol);
     binary_ops[octave_value::op_el_ldiv].add_overload (ol);
   }
   llvm::verifyFunction (*fn);
 
+  // now for binary complex operations
+  add_binary_op (complex, octave_value::op_add, llvm::Instruction::FAdd);
+  add_binary_op (complex, octave_value::op_sub, llvm::Instruction::FSub);
+
+  fn = create_function ("octave_jit_*_complex_complex", complex, complex,
+                        complex);
+  body = llvm::BasicBlock::Create (context, "body", fn);
+  builder.SetInsertPoint (body);
+  {
+    // (x0*x1 - y0*y1, x0*y1 + y0*x1) = (x0,y0) * (x1,y1)
+    // We compute this in one vectorized multiplication, a subtraction, and an
+    // addition.
+    llvm::Value *lhs = fn->arg_begin ();
+    llvm::Value *rhs = ++fn->arg_begin ();
+
+    // FIXME: We need a better way of doing this, working with llvm's IR
+    // directly is sort of a pain.
+    llvm::Value *zero = builder.getInt32 (0);
+    llvm::Value *one = builder.getInt32 (1);
+    llvm::Value *two = builder.getInt32 (2);
+    llvm::Value *three = builder.getInt32 (3);
+
+    llvm::Type *vec4 = llvm::VectorType::get (scalar_t, 4);
+    llvm::Value *mlhs = llvm::UndefValue::get (vec4);
+    llvm::Value *mrhs = mlhs;
+
+    llvm::Value *temp = builder.CreateExtractElement (lhs, zero);
+    mlhs = builder.CreateInsertElement (mlhs, temp, zero);
+    mlhs = builder.CreateInsertElement (mlhs, temp, two);
+    temp = builder.CreateExtractElement (lhs, one);
+    mlhs = builder.CreateInsertElement (mlhs, temp, one);
+    mlhs = builder.CreateInsertElement (mlhs, temp, three);
+
+    temp = builder.CreateExtractElement (rhs, zero);
+    mrhs = builder.CreateInsertElement (mrhs, temp, zero);
+    mrhs = builder.CreateInsertElement (mrhs, temp, three);
+    temp = builder.CreateExtractElement (rhs, one);
+    mrhs = builder.CreateInsertElement (mrhs, temp, one);
+    mrhs = builder.CreateInsertElement (mrhs, temp, two);
+
+    llvm::Value *mres = builder.CreateFMul (mlhs, mrhs);
+    llvm::Value *ret = llvm::UndefValue::get (complex_t);
+    llvm::Value *tlhs = builder.CreateExtractElement (mres, zero);
+    llvm::Value *trhs = builder.CreateExtractElement (mres, one);
+    temp = builder.CreateFSub (tlhs, trhs);
+    //temp = llvm::ConstantFP::get (scalar_t, 123);
+    ret = builder.CreateInsertElement (ret, temp, zero);
+
+    tlhs = builder.CreateExtractElement (mres, two);
+    trhs = builder.CreateExtractElement (mres, three);
+    temp = builder.CreateFAdd (tlhs, trhs);
+    //temp = llvm::ConstantFP::get (scalar_t, 123);
+    ret = builder.CreateInsertElement (ret, temp, one);
+    builder.CreateRet (ret);
+
+    jit_operation::overload ol (fn, false, complex, complex, complex);
+    binary_ops[octave_value::op_mul].add_overload (ol);
+    binary_ops[octave_value::op_el_mul].add_overload (ol);
+  }
+  llvm::verifyFunction (*fn);
+
   // now for binary index operators
   add_binary_op (index, octave_value::op_add, llvm::Instruction::Add);
 
   // and binary bool operators
   add_binary_op (boolean, octave_value::op_el_or, llvm::Instruction::Or);
   add_binary_op (boolean, octave_value::op_el_and, llvm::Instruction::And);
 
   // now for printing functions
@@ -969,16 +1056,18 @@ jit_typeinfo::jit_typeinfo (llvm::Module
                         matrix_t->getPointerTo (), matrix_t->getPointerTo (),
                         range_t->getPointerTo (), scalar_t);
   engine->addGlobalMapping (fn,
                             reinterpret_cast<void *> (&octave_jit_paren_subsasgn_matrix_range));
   paren_subsasgn_fn.add_overload (fn, true, matrix, matrix, range, scalar);
 
   casts[any->type_id ()].stash_name ("(any)");
   casts[scalar->type_id ()].stash_name ("(scalar)");
+  casts[complex->type_id ()].stash_name ("(complex)");
+  casts[matrix->type_id ()].stash_name ("(matrix)");
 
   // cast any <- matrix
   fn = create_function ("octave_jit_cast_any_matrix", any_t,
                         matrix_t->getPointerTo ());
   engine->addGlobalMapping (fn,
                             reinterpret_cast<void*> (&octave_jit_cast_any_matrix));
   casts[any->type_id ()].add_overload (fn, false, any, matrix);
 
@@ -994,24 +1083,63 @@ jit_typeinfo::jit_typeinfo (llvm::Module
   engine->addGlobalMapping (fn, reinterpret_cast<void*> (&octave_jit_cast_any_scalar));
   casts[any->type_id ()].add_overload (fn, false, any, scalar);
 
   // cast scalar <- any
   fn = create_function ("octave_jit_cast_scalar_any", scalar, any);
   engine->addGlobalMapping (fn, reinterpret_cast<void*> (&octave_jit_cast_scalar_any));
   casts[scalar->type_id ()].add_overload (fn, false, scalar, any);
 
+  // cast any <- complex
+  llvm::Function *any_complex = create_function ("octave_jit_cast_any_complex",
+                                                 any, scalar, scalar);
+  engine->addGlobalMapping (any_complex, reinterpret_cast<void*> (&octave_jit_cast_any_complex));
+  fn = create_function ("cast_any_complex", any, complex);
+  body = llvm::BasicBlock::Create (context, "body", fn);
+  builder.SetInsertPoint (body);
+  {
+    llvm::Value *zero = builder.getInt32 (0);
+    llvm::Value *one = builder.getInt32 (1);
+
+    llvm::Value *cmplx = fn->arg_begin ();
+    llvm::Value *real = builder.CreateExtractElement (cmplx, zero);
+    llvm::Value *imag = builder.CreateExtractElement (cmplx, one);
+    llvm::Value *ret = builder.CreateCall2 (any_complex, real, imag);
+    builder.CreateRet (ret);
+  }
+  llvm::verifyFunction (*fn);
+  casts[any->type_id ()].add_overload (fn, false, any, complex);
+
+  // cast complex <- any
+  llvm::Function *complex_any = create_function ("octave_jit_cast_complex_any",
+                                                 void_t,
+                                                 complex_t->getPointerTo (),
+                                                 any_t);
+  fn = create_function ("cast_complex_any", complex, any);
+  body = llvm::BasicBlock::Create (context, "body", fn);
+  builder.SetInsertPoint (body);
+  {
+    llvm::Value *result = builder.CreateAlloca (complex_t);
+    builder.CreateCall2 (complex_any, result, fn->arg_begin ());
+    builder.CreateRet (builder.CreateLoad (result));
+  }
+  llvm::verifyFunction (*fn);
+  casts[complex->type_id ()].add_overload (fn, false, complex, any);
+
   // cast any <- any
   fn = create_identity (any);
   casts[any->type_id ()].add_overload (fn, false, any, any);
 
   // cast scalar <- scalar
   fn = create_identity (scalar);
   casts[scalar->type_id ()].add_overload (fn, false, scalar, scalar);
 
+  // cast complex <- complex
+  fn = create_identity (complex);
+  casts[complex->type_id ()].add_overload (fn, false, complex, complex);
 
   // -------------------- builtin functions --------------------
   add_builtin ("sin");
   register_intrinsic ("sin", llvm::Intrinsic::sin, scalar, scalar);
   register_generic ("sin", matrix, matrix);
 
   add_builtin ("cos");
   register_intrinsic ("cos", llvm::Intrinsic::cos, scalar, scalar);
@@ -1254,16 +1382,19 @@ jit_typeinfo::do_type_of (const octave_v
     {
       if (ov.is_real_scalar ())
         return get_scalar ();
 
       if (ov.is_matrix_type ())
         return get_matrix ();
     }
 
+  if (ov.is_complex_scalar ())
+    return get_complex ();
+
   return get_any ();
 }
 
 jit_type*
 jit_typeinfo::new_type (const std::string& name, jit_type *parent,
                         llvm::Type *llvm_type)
 {
   jit_type *ret = new jit_type (name, parent, llvm_type, next_id++);
@@ -2319,16 +2450,21 @@ jit_convert::visit_constant (tree_consta
       double dv = v.double_value ();
       result = create<jit_const_scalar> (dv);
     }
   else if (v.is_range ())
     {
       Range rv = v.range_value ();
       result = create<jit_const_range> (rv);
     }
+  else if (v.is_complex_scalar ())
+    {
+      Complex cv = v.complex_value ();
+      result = create<jit_const_complex> (cv);
+    }
   else
     fail ("Unknown constant");
 }
 
 void
 jit_convert::visit_fcn_handle (tree_fcn_handle&)
 {
   fail ();
@@ -3031,16 +3167,27 @@ jit_convert::convert_llvm::visit (jit_co
 }
 
 void
 jit_convert::convert_llvm::visit (jit_const_scalar& cs)
 {
   cs.stash_llvm (llvm::ConstantFP::get (cs.type_llvm (), cs.value ()));
 }
 
+void
+jit_convert::convert_llvm::visit (jit_const_complex& cc)
+{
+  llvm::Type *scalar_t = jit_typeinfo::get_scalar_llvm ();
+  llvm::Constant *values[2];
+  Complex value = cc.value ();
+  values[0] = llvm::ConstantFP::get (scalar_t, value.real ());
+  values[1] = llvm::ConstantFP::get (scalar_t, value.imag ());
+  cc.stash_llvm (llvm::ConstantVector::get (values));
+}
+
 void jit_convert::convert_llvm::visit (jit_const_index& ci)
 {
   ci.stash_llvm (llvm::ConstantInt::get (ci.type_llvm (), ci.value ()));
 }
 
 void
 jit_convert::convert_llvm::visit (jit_const_range& cr)
 {
diff --git a/src/pt-jit.h b/src/pt-jit.h
--- a/src/pt-jit.h
+++ b/src/pt-jit.h
@@ -443,16 +443,18 @@ public:
 
   static jit_type *get_bool (void) { return instance->boolean; }
 
   static jit_type *get_index (void) { return instance->index; }
 
   static llvm::Type *get_index_llvm (void)
   { return instance->index->to_llvm (); }
 
+  static jit_type *get_complex (void) { return instance->complex; }
+
   static jit_type *type_of (const octave_value& ov)
   {
     return instance->do_type_of (ov);
   }
 
   static const jit_operation& binary_op (int op)
   {
     return instance->do_binary_op (op);
@@ -682,16 +684,17 @@ private:
   std::vector<jit_type*> id_to_type;
   jit_type *any;
   jit_type *matrix;
   jit_type *scalar;
   jit_type *range;
   jit_type *string;
   jit_type *boolean;
   jit_type *index;
+  jit_type *complex;
   std::map<std::string, jit_type *> builtins;
 
   std::vector<jit_operation> binary_ops;
   jit_operation grab_fn;
   jit_operation release_fn;
   jit_operation print_fn;
   jit_operation for_init_fn;
   jit_operation for_check_fn;
@@ -723,16 +726,17 @@ private:
   JIT_METH(variable);                           \
   JIT_METH(error_check);                        \
   JIT_METH(assign)                              \
   JIT_METH(argument)
 
 #define JIT_VISIT_IR_CONST                      \
   JIT_METH(const_bool);                         \
   JIT_METH(const_scalar);                       \
+  JIT_METH(const_complex);                      \
   JIT_METH(const_index);                        \
   JIT_METH(const_string);                       \
   JIT_METH(const_range)
 
 #define JIT_VISIT_IR_CLASSES                    \
   JIT_VISIT_IR_NOTEMPLATE                       \
   JIT_VISIT_IR_CONST
 
@@ -751,16 +755,17 @@ class jit_instruction;
 class jit_terminator;
 
 template <typename T, jit_type *(*EXTRACT_T)(void), typename PASS_T = T,
           bool QUOTE=false>
 class jit_const;
 
 typedef jit_const<bool, jit_typeinfo::get_bool> jit_const_bool;
 typedef jit_const<double, jit_typeinfo::get_scalar> jit_const_scalar;
+typedef jit_const<Complex, jit_typeinfo::get_complex> jit_const_complex;
 typedef jit_const<octave_idx_type, jit_typeinfo::get_index> jit_const_index;
 
 typedef jit_const<std::string, jit_typeinfo::get_string, const std::string&,
                   true> jit_const_string;
 typedef jit_const<jit_range, jit_typeinfo::get_range, const jit_range&>
 jit_const_range;
 
 class jit_ir_walker;
