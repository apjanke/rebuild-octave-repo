# HG changeset patch
# User jwe
# Date 1081275112 0
#      Tue Apr 06 18:11:52 2004 +0000
# Node ID 66b3cce2bf37f8980c3e2e9a70118d5f3c1073be
# Parent  404c7122853e5603209f773d3d95afeac999f0b1
[project @ 2004-04-06 18:11:52 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,10 +1,18 @@
 2004-04-06  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* configure.in: Delete code for --with-ieee754.
+	Use OCTAVE_IEEE754_DATA_FORMAT.
+
+	* aclocal.m4 (OCTAVE_IEEE754_DATA_FORMAT): New macro, based on
+	configure.in code for HAVE_IEEE754_COMPLIANCE.
+
+2004-04-06  David Bateman  <dbateman@free.fr>
+
   	* configure.in : add the option --with-ieee754 and use it to define
 	HAVE_IEEE754_COMPLIANCE
 
 2004-04-02  David Bateman  <dbateman@free.fr>
 
 	* configure.in: Warn about g++ 2.9x versions.
 
 2004-04-01  John W. Eaton  <jwe@bevo.che.wisc.edu>
diff --git a/aclocal.m4 b/aclocal.m4
--- a/aclocal.m4
+++ b/aclocal.m4
@@ -769,8 +769,37 @@ then
     done
   done
   rm -rf "$tmp"
 ])
 fi
 AC_SUBST([SED], $octave_cv_path_sed)
 AC_MSG_RESULT([$SED])
 ])
+# OCTAVE_IEEE754_DATA_FORMAT
+# --------------
+# Check for IEEE 754 data format.
+AC_DEFUN([OCTAVE_IEEE754_DATA_FORMAT],
+[AC_MSG_CHECKING([for IEEE 754 data format])
+AC_CACHE_VAL(octave_cv_ieee754_data_format,
+[AC_TRY_RUN([
+int
+main (void) 
+{
+  typedef union { unsigned char c[8]; double d; } ieeebytes;
+   
+  ieeebytes l = {0x1c, 0xbc, 0x6e, 0xf2, 0x54, 0x8b, 0x11, 0x43};
+  ieeebytes b = {0x43, 0x11, 0x8b, 0x54, 0xf2, 0x6e, 0xbc, 0x1c};
+
+  return l.d != 1234567891234567.0 && b.d != 1234567891234567.0;
+}],
+  octave_cv_ieee754_data_format=yes,
+  octave_cv_ieee754_data_format=no,
+  octave_cv_ieee754_data_format=no)])
+if test "$cross_compiling" = yes; then
+  AC_MSG_RESULT([$octave_cv_ieee754_data_format assumed for cross compilation])
+else
+  AC_MSG_RESULT($octave_cv_ieee754_data_format)
+fi
+if test "$octave_cv_ieee754_data_format" = yes; then
+  AC_DEFINE(HAVE_IEEE754_DATA_FORMAT, 1, [Define if your system uses IEEE 754 data format.])
+fi
+])
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -24,17 +24,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### Preserve CFLAGS and CXXFLAGS from the environment before doing
 ### anything else because we don't know which macros might call
 ### AC_PROG_CC or AC_PROG_CXX.
 
 EXTERN_CFLAGS="$CFLAGS"
 EXTERN_CXXFLAGS="$CXXFLAGS"
 
 AC_INIT
-AC_REVISION($Revision: 1.451 $)
+AC_REVISION($Revision: 1.452 $)
 AC_PREREQ(2.57)
 AC_CONFIG_SRCDIR([src/octave.cc])
 AC_CONFIG_HEADER(config.h)
 
 AC_DEFINE(OCTAVE_SOURCE, 1, [Define if this is Octave.])
   
 OCTAVE_HOST_TYPE
 
@@ -426,58 +426,17 @@ if test -n "$mpi_lib"; then
   AC_CHECK_LIB($mpi_lib, MPI_Init, [
     AC_CHECK_HEADERS(mpi.h, [
       WITH_MPI=true
       MPI_LIBS="-l$mpi_lib"
       LIBS="$MPI_LIBS $LIBS"
       AC_DEFINE(HAVE_MPI, 1, [Define if MPI is available.])])])
 fi
 
-
-# Check for IEEE 754 compliance
-AC_ARG_WITH(ieee754, [  --with-ieee754          force IEEE754 compliance],
-	  with_ieee754=$withval, with_ieee754=no)
-
-AC_MSG_CHECKING([IEEE 754 compliance])
-if test "$with_ieee754" = yes; then
-  AC_MSG_RESULT(forced)
-else
-  # Test for conformance to IEEE 754 or IEEE 854 standards
-  # Need to temporarily change the quote to print "[]"
-  changequote(<-, ->)dnl
-  cat > conftest.c << EOF
-  int main (void) 
-  {
-     /* Test for IEEE754 floating point representation. */
-     union { unsigned char c[8]; double d; }
-     l = {{0x1c, 0xbc, 0x6e, 0xf2, 0x54, 0x8b, 0x11, 0x43}},
-     b = {{0x43, 0x11, 0x8b, 0x54, 0xf2, 0x6e, 0xbc, 0x1c}};
-     return l.d!=1234567891234567.0 && b.d!=1234567891234567.0;
-  }
-EOF
-  changequote([, ])dnl
-
-  ac_try="$CC -o conftest conftest.c"
-  if AC_TRY_EVAL(ac_try) ; then
-    ac_try="./conftest"
-    if AC_TRY_EVAL(ac_try) ; then
-      with_ieee754=yes
-      AC_MSG_RESULT(yes)
-    else
-      AC_MSG_RESULT(no)
-    fi
-  else	
-    AC_MSG_RESULT(no)
-  fi
-  rm -f conftest*
-fi
-
-if test "$with_ieee754" = yes; then
-  AC_DEFINE(HAVE_IEEE754_COMPLIANCE, 1, [Define if the system is IEEE754 complant.])
-fi
+OCTAVE_IEEE754_DATA_FORMAT
 
 # ----------------------------------------------------------------------
 
 ### We need these before trying to find libf2c.
 
 OCTAVE_PROG_AR
 
 AC_PROG_RANLIB
diff --git a/src/DLD-FUNCTIONS/sort.cc b/src/DLD-FUNCTIONS/sort.cc
--- a/src/DLD-FUNCTIONS/sort.cc
+++ b/src/DLD-FUNCTIONS/sort.cc
@@ -32,22 +32,21 @@ Software Foundation, 59 Temple Place - S
 #include "error.h"
 #include "gripes.h"
 #include "oct-obj.h"
 #include "lo-ieee.h"
 #include "data-conv.h"
 #include "ov-cx-mat.h"
 #include "oct-sort.cc"
 
-/* If we are IEEE 754 or IEEE 854 compliant, then we can use the trick of
- * casting doubles as unsigned eight byte integers, and with a little
- * bit of magic we can automatically sort the NaN's correctly.
- */
+// If we have IEEE 754 data format, then we can use the trick of
+// casting doubles as unsigned eight byte integers, and with a little
+// bit of magic we can automatically sort the NaN's correctly.
 
-#if defined(HAVE_IEEE754_COMPLIANCE) && defined(EIGHT_BYTE_INT)
+#if defined (HAVE_IEEE754_DATA_FORMAT) && defined (EIGHT_BYTE_INT)
 
 static inline unsigned EIGHT_BYTE_INT FloatFlip(unsigned EIGHT_BYTE_INT f)
 {
   unsigned EIGHT_BYTE_INT mask = -(EIGHT_BYTE_INT)(f >> 63) | 
     0x8000000000000000ULL;
   return f ^ mask;
 }
 
@@ -118,17 +117,17 @@ mx_sort (NDArray &m, bool return_idx, in
 
   dim_vector dv = m.dims ();
   unsigned int ns = dv (dim);
   unsigned int iter = dv.numel () / ns;
   unsigned int stride = 1;
   for (unsigned int i = 0; i < (unsigned int)dim; i++)
     stride *= dv(i);
 
-#if defined(HAVE_IEEE754_COMPLIANCE) && defined(EIGHT_BYTE_INT)
+#if defined (HAVE_IEEE754_DATA_FORMAT) && defined (EIGHT_BYTE_INT)
   double *v = m.fortran_vec ();
 
   unsigned EIGHT_BYTE_INT *p = (unsigned EIGHT_BYTE_INT *)v;
 
   if (return_idx)
     {
       octave_sort<vec_index *> indexed_ieee754_sort (ieee754_compare);
 
@@ -146,40 +145,40 @@ mx_sort (NDArray &m, bool return_idx, in
 	  unsigned int offset2 = 0;
 	  while (offset >= stride)
 	    {
 	      offset -= stride;
 	      offset2++;
 	    }
 	  offset += offset2 * stride * ns;
 
-	  /* Flip the data in the vector so that int compares on 
-	   * IEEE754 give the correct ordering
-	   */
+	  // Flip the data in the vector so that int compares on
+	  // IEEE754 give the correct ordering.
+
 	  for (unsigned int i = 0; i < ns; i++)
 	    {
 	      vi[i]->vec = FloatFlip (p[i*stride + offset]);
 	      vi[i]->indx = i + 1;
 	    }
 
 	  indexed_ieee754_sort.sort (vi, ns);
 
-	  /* Flip the data out of the vector so that int compares on
-	   *  IEEE754 give the correct ordering
-	   */
+	  // Flip the data out of the vector so that int compares on
+	  // IEEE754 give the correct ordering
+
 	  for (unsigned int i = 0; i < ns; i++)
 	    {
 	      p[i*stride + offset] = IFloatFlip (vi[i]->vec);
 	      idx(i*stride + offset) = vi[i]->indx;
 	    }
 
-	  /* There are two representations of NaN. One will be sorted to
-	   * the beginning of the vector and the other to the end. If it
-	   * will be sorted to the beginning, fix things up.
-	   */
+	  // There are two representations of NaN.  One will be sorted
+	  // to the beginning of the vector and the other to the end.
+	  // If it will be sorted to the beginning, fix things up.
+
 	  if (lo_ieee_signbit (octave_NaN))
 	    {
 	      unsigned int i = 0;
 	      while (xisnan(v[i++*stride+offset]) && i < ns);
 	      OCTAVE_LOCAL_BUFFER (double, itmp, i - 1);
 	      for (unsigned int l = 0; l < i -1; l++)
 		itmp[l] = idx(l*stride + offset);
 	      for (unsigned int l = 0; l < ns - i + 1; l++)
@@ -200,34 +199,35 @@ mx_sort (NDArray &m, bool return_idx, in
   else
     {
       octave_sort<unsigned EIGHT_BYTE_INT> ieee754_sort;
  
       if (stride == 1)
 	{
 	  for (unsigned int j = 0; j < iter; j++)
 	    {
-	      /* Flip the data in the vector so that int compares on 
-	       * IEEE754 give the correct ordering
-	       */
+	      // Flip the data in the vector so that int compares on
+	      // IEEE754 give the correct ordering.
+
 	      for (unsigned int i = 0; i < ns; i++)
 		p[i] = FloatFlip (p[i]);
 	      
 	      ieee754_sort.sort (p, ns);
 
-	      /* Flip the data out of the vector so that int compares on
-	       *  IEEE754 give the correct ordering
-	       */
+	      // Flip the data out of the vector so that int compares
+	      // on IEEE754 give the correct ordering.
+
 	      for (unsigned int i = 0; i < ns; i++)
 		p[i] = IFloatFlip (p[i]);
 
-	      /* There are two representations of NaN. One will be sorted to
-	       * the beginning of the vector and the other to the end. If it
-	       * will be sorted to the beginning, fix things up.
-	       */
+	      // There are two representations of NaN.  One will be
+	      // sorted to the beginning of the vector and the other
+	      // to the end.  If it will be sorted to the beginning,
+	      // fix things up.
+
 	      if (lo_ieee_signbit (octave_NaN))
 		{
 		  unsigned int i = 0;
 		  double *vtmp = (double *)p;
 		  while (xisnan(vtmp[i++]) && i < ns);
 		  for (unsigned int l = 0; l < ns - i + 1; l++)
 		    vtmp[l] = vtmp[l+i-1];
 		  for (unsigned int l = ns - i + 1; l < ns; l++)
@@ -248,34 +248,35 @@ mx_sort (NDArray &m, bool return_idx, in
 	      unsigned int offset2 = 0;
 	      while (offset >= stride)
 		{
 		  offset -= stride;
 		  offset2++;
 		}
 	      offset += offset2 * stride * ns;
 
-	      /* Flip the data in the vector so that int compares on 
-	       * IEEE754 give the correct ordering
-	       */
+	      // Flip the data in the vector so that int compares on
+	      // IEEE754 give the correct ordering.
+
 	      for (unsigned int i = 0; i < ns; i++)
 		vi[i] = FloatFlip (p[i*stride + offset]);
 
 	      ieee754_sort.sort (vi, ns);
 
-	      /* Flip the data out of the vector so that int compares on
-	       *  IEEE754 give the correct ordering
-	       */
+	      // Flip the data out of the vector so that int compares
+	      // on IEEE754 give the correct ordering.
+
 	      for (unsigned int i = 0; i < ns; i++)
 		p[i*stride + offset] = IFloatFlip (vi[i]);
 	      
-	      /* There are two representations of NaN. One will be sorted to
-	       * the beginning of the vector and the other to the end. If it
-	       * will be sorted to the beginning, fix things up.
-	       */
+	      // There are two representations of NaN. One will be
+	      // sorted to the beginning of the vector and the other
+	      // to the end. If it will be sorted to the beginning,
+	      // fix things up.
+
 	      if (lo_ieee_signbit (octave_NaN))
 		{
 		  unsigned int i = 0;
 		  while (xisnan(v[i++*stride + offset]) && i < ns);
 		  for (unsigned int l = 0; l < ns - i + 1; l++)
 		    v[l*stride + offset] = v[(l+i-1)*stride + offset];
 		  for (unsigned int l = ns - i + 1; l < ns; l++)
 		    v[l*stride + offset] = octave_NaN;
@@ -594,14 +595,13 @@ ordered lists.\n\
 	retval = mx_sort (cm, return_idx, dim);
     }
   else
     gripe_wrong_type_arg ("sort", arg);
 
   return retval;
 }
 
-
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
