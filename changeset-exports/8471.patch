# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1231805013 18000
#      Mon Jan 12 19:03:33 2009 -0500
# Node ID 02de6775f1fecbca5429c8a653937ea7af55ec8f
# Parent  5da39b223f61e5a555e85b625aff822b84ba59ed
parse.y: always append statements to list, but remove null statements after seeing separator

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,17 @@
 2009-01-12  John W. Eaton  <jwe@octave.org>
 
+	* pt-stmt.h (tree_statement::is_null_statement): New function.
+	* parse.y (set_stmt_print_flag): Return list.  Remove trailing
+	null statements from list.
+	(list, simple_list): Simplify action.
+	(make_statement, make_statement_list, append_statement_list):
+	Always create statements and them to the list.
+
 	* base-list.h (octave_base_list::push_front,
 	octave_base_list::push_back, octave_base_list::pop_front,
 	octave_base_list::pop_back): New functions.
 
 	* DLD-FUNCTIONS/qr.cc (Fqrupdate, Fqrinsert, Fqrdelete, Fqrshift):
 	Require args to be numeric, not necessarily matrix objects.
 
 2009-01-12  Ben Abbott  <bpabbott@mac.com>
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -306,42 +306,35 @@ finish_matrix (tree_matrix *m);
 static tree_expression *
 finish_cell (tree_cell *c);
 
 // Maybe print a warning.  Duh.
 static void
 maybe_warn_missing_semi (tree_statement_list *);
 
 // Set the print flag for a statement based on the separator type.
-static void
+static tree_statement_list *
 set_stmt_print_flag (tree_statement_list *, char, bool);
 
 // Create a statement list.
 static tree_statement_list *make_statement_list (tree_statement *stmt);
 
 // Append a statement to an existing statement list.
 static tree_statement_list *
 append_statement_list (tree_statement_list *list, char sep,
 		       tree_statement *stmt, bool warn_missing_semi);
 
 // Finish building a statement.
 template <class T>
 static tree_statement *
 make_statement (T *arg)
 {
-  tree_statement *retval = 0;
-
-  if (arg)
-    {
-      octave_comment_list *comment = octave_comment_buffer::get_comment ();
-
-      retval = new tree_statement (arg, comment);
-    }
-
-  return retval;
+  octave_comment_list *comment = octave_comment_buffer::get_comment ();
+
+  return new tree_statement (arg, comment);
 }
 
 #define ABORT_PARSE \
   do \
     { \
       global_command = 0; \
       yyerrok; \
       if (! symtab_context.empty ()) \
@@ -516,39 +509,33 @@ input1		: '\n'
 		  { $$ = $1; }
 		| simple_list '\n'
 		  { $$ = $1; }
 		| simple_list END_OF_INPUT
 		  { $$ = $1; }
 		;
 
 simple_list	: simple_list1 opt_sep_no_nl
-		  {
-		    set_stmt_print_flag ($1, $2, false);
-		    $$ = $1;
-		  }
+		  { $$ = set_stmt_print_flag ($1, $2, false); }
 		;
 
 simple_list1	: statement
 		  { $$ = make_statement_list ($1); }
 		| simple_list1 sep_no_nl statement
 		  { $$ = append_statement_list ($1, $2, $3, false); }
 		;
 
 opt_list	: // empty
 		  { $$ = new tree_statement_list (); }
 		| list
 		  { $$ = $1; }
 		;
 
 list		: list1 opt_sep
-		  {
-		    set_stmt_print_flag ($1, $2, true);
-		    $$ = $1;
-		  }
+		  { $$ = set_stmt_print_flag ($1, $2, true); }
 		;
 
 list1		: statement
 		  { $$ = make_statement_list ($1); }
 		| list1 sep statement
 		  { $$ = append_statement_list ($1, $2, $3, true); }
 		;
 
@@ -2829,62 +2816,67 @@ maybe_warn_missing_semi (tree_statement_
       if (tmp->is_expression ())
 	warning_with_id
 	  ("Octave:missing-semicolon",
 	   "missing semicolon near line %d, column %d in file `%s'",
 	    tmp->line (), tmp->column (), curr_fcn_file_full_name.c_str ());
     }
 }
 
-static void
+static tree_statement_list *
 set_stmt_print_flag (tree_statement_list *list, char sep,
 		     bool warn_missing_semi)
 {
+  tree_statement *tmp = list->back ();
+
   switch (sep)
     {
     case ';':
-      {
-	tree_statement *tmp = list->back ();
-	tmp->set_print_flag (0);
-      }
+      tmp->set_print_flag (0);
       break;
 
     case 0:
     case ',':
     case '\n':
       if (warn_missing_semi)
 	maybe_warn_missing_semi (list);
       break;
 
     default:
       warning ("unrecognized separator type!");
       break;
     }
+
+  // Even if a statement is null, we add it to the list then remove it
+  // here so that the print flag is applied to the correct statement.
+
+  if (tmp->is_null_statement ())
+    {
+      list->pop_back ();
+      delete tmp;
+    }
+
+  return list;
 }
 
 static tree_statement_list *
 make_statement_list (tree_statement *stmt)
 {
-  return stmt ? new tree_statement_list (stmt) : new tree_statement_list ();
+  return new tree_statement_list (stmt);
 }
 
 static tree_statement_list *
 append_statement_list (tree_statement_list *list, char sep,
 		       tree_statement *stmt, bool warn_missing_semi)
 {
-  tree_statement_list *retval = list;
-
-  if (stmt)
-    {
-      set_stmt_print_flag (list, sep, warn_missing_semi);
-
-      list->append (stmt);
-    }
-
-  return retval;
+  set_stmt_print_flag (list, sep, warn_missing_semi);
+
+  list->append (stmt);
+
+  return list;
 }
 
 static void
 safe_fclose (void *f)
 {
   // FIXME -- comments at the end of an input file are
   // discarded (otherwise, they would be appended to the next
   // statement, possibly from the command line or another file, which
diff --git a/src/pt-stmt.h b/src/pt-stmt.h
--- a/src/pt-stmt.h
+++ b/src/pt-stmt.h
@@ -73,16 +73,18 @@ public:
 
   octave_value_list eval (bool silent, int nargout,
 			  bool in_function_or_script_body);
 
   tree_expression *expression (void) { return expr; }
 
   octave_comment_list *comment_text (void) { return comm; }
 
+  bool is_null_statement (void) const { return ! (cmd || expr || comm); }
+
   // Allow modification of this statement.  Note that there is no
   // checking.  If you use these, are you sure you knwo what you are
   // doing?
 
   void set_command (tree_command *c) { cmd = c; }
 
   void set_expression (tree_expression *e) { expr = e; }
 
