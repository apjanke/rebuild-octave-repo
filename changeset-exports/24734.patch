# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1518365854 18000
#      Sun Feb 11 11:17:34 2018 -0500
# Node ID 5d8c4cbc56d705007c54a1357e2a48ada9aa6782
# Parent  e15d53d2de1ef9f2bbea8a7c6691442ae3be892c
don't use singleton pattern for child_list

* child-list.h, child-list.cc: Don't use singleton pattern.

* interpreter.h, interpreter.cc (interpreter::m_child_list):
New data member.
(interpreter::get_child_list): New method.

* interpreter-private.h, interpreter-private.cc (__get_child_list__):
New function.

* pager.cc, sighandlers.cc, toplev.cc: Access child_list through
interpreter.

diff --git a/libinterp/corefcn/interpreter-private.cc b/libinterp/corefcn/interpreter-private.cc
--- a/libinterp/corefcn/interpreter-private.cc
+++ b/libinterp/corefcn/interpreter-private.cc
@@ -22,16 +22,17 @@ along with Octave; see the file COPYING.
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
 #include <string>
 
 #include "call-stack.h"
+#include "child-list.h"
 #include "error.h"
 #include "gtk-manager.h"
 #include "help.h"
 #include "interpreter-private.h"
 #include "interpreter.h"
 #include "load-path.h"
 #include "ov-classdef.h"
 #include "symtab.h"
@@ -112,16 +113,23 @@ namespace octave
 
   call_stack& __get_call_stack__ (const std::string& who)
   {
     interpreter& interp = __get_interpreter__ (who);
 
     return interp.get_call_stack ();
   }
 
+  child_list& __get_child_list__ (const std::string& who)
+  {
+    interpreter& interp = __get_interpreter__ (who);
+
+    return interp.get_child_list ();
+  }
+
   cdef_manager& __get_cdef_manager__ (const std::string& who)
   {
     interpreter& interp = __get_interpreter__ (who);
 
     return interp.get_cdef_manager ();
   }
 
   gtk_manager& __get_gtk_manager__ (const std::string& who)
diff --git a/libinterp/corefcn/interpreter-private.h b/libinterp/corefcn/interpreter-private.h
--- a/libinterp/corefcn/interpreter-private.h
+++ b/libinterp/corefcn/interpreter-private.h
@@ -29,16 +29,17 @@ along with Octave; see the file COPYING.
 
 #include "symtab.h"
 
 class cdef_manager;
 
 namespace octave
 {
   class call_stack;
+  class child_list;
   class dynamic_loader;
   class gtk_manager;
   class help_system;
   class interpreter;
   class load_path;
   class tree_evaluator;
   class type_info;
 
@@ -57,14 +58,16 @@ namespace octave
   extern symbol_scope __get_current_scope__ (const std::string& who);
 
   extern symbol_scope __require_current_scope__ (const std::string& who);
 
   extern tree_evaluator& __get_evaluator__ (const std::string& who);
 
   extern call_stack& __get_call_stack__ (const std::string& who);
 
+  extern child_list& __get_child_list__ (const std::string& who);
+
   extern cdef_manager& __get_cdef_manager__ (const std::string& who);
 
   extern gtk_manager& __get_gtk_manager__ (const std::string& who);
 }
 
 #endif
diff --git a/libinterp/corefcn/interpreter.cc b/libinterp/corefcn/interpreter.cc
--- a/libinterp/corefcn/interpreter.cc
+++ b/libinterp/corefcn/interpreter.cc
@@ -349,16 +349,17 @@ namespace octave
       m_environment (),
       m_help_system (*this),
       m_dynamic_loader (*this),
       m_load_path (),
       m_type_info (),
       m_symbol_table (),
       m_evaluator (*this),
       m_stream_list (*this),
+      m_child_list (),
       m_url_handle_manager (),
       m_cdef_manager (*this),
       m_gtk_manager (),
       m_interactive (false),
       m_read_site_files (true),
       m_read_init_files (m_app_context != nullptr),
       m_verbose (false),
       m_inhibit_startup_message (false),
diff --git a/libinterp/corefcn/interpreter.h b/libinterp/corefcn/interpreter.h
--- a/libinterp/corefcn/interpreter.h
+++ b/libinterp/corefcn/interpreter.h
@@ -22,16 +22,17 @@ along with Octave; see the file COPYING.
 
 #if ! defined (octave_interpreter_h)
 #define octave_interpreter_h 1
 
 #include "octave-config.h"
 
 #include <string>
 
+#include "child-list.h"
 #include "quit.h"
 #include "str-vec.h"
 
 #include "dynamic-ld.h"
 #include "environment.h"
 #include "gtk-manager.h"
 #include "help.h"
 #include "load-path.h"
@@ -50,16 +51,17 @@ extern OCTINTERP_API bool octave_interpr
 
 // TRUE means we've processed all the init code and we are good to go.
 extern OCTINTERP_API bool octave_initialized;
 
 namespace octave
 {
   class profiler;
   class call_stack;
+  class child_list;
   class tree_evaluator;
 
   // The application object contains a pointer to the current
   // interpreter and the interpreter contains a pointer back to the
   // application context so we need a forward declaration for one (or
   // both) of them...
 
   class application;
@@ -179,16 +181,21 @@ namespace octave
     call_stack& get_call_stack (void);
 
     profiler& get_profiler (void);
 
     tree_evaluator& get_evaluator (void);
 
     stream_list& get_stream_list (void);
 
+    child_list& get_child_list (void)
+    {
+      return m_child_list;
+    }
+
     url_handle_manager& get_url_handle_manager (void);
 
     cdef_manager& get_cdef_manager (void)
     {
       return m_cdef_manager;
     }
 
     gtk_manager& get_gtk_manager (void)
@@ -249,16 +256,18 @@ namespace octave
     type_info m_type_info;
 
     symbol_table m_symbol_table;
 
     tree_evaluator m_evaluator;
 
     stream_list m_stream_list;
 
+    child_list m_child_list;
+
     url_handle_manager m_url_handle_manager;
 
     cdef_manager m_cdef_manager;
 
     gtk_manager m_gtk_manager;
 
     // TRUE means this is an interactive interpreter (forced or not).
     bool m_interactive;
diff --git a/libinterp/corefcn/pager.cc b/libinterp/corefcn/pager.cc
--- a/libinterp/corefcn/pager.cc
+++ b/libinterp/corefcn/pager.cc
@@ -23,26 +23,28 @@ along with Octave; see the file COPYING.
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
 #include <fstream>
 #include <iostream>
 #include <string>
 
+#include "child-list.h"
 #include "cmd-edit.h"
 #include "oct-env.h"
 #include "oct-syscalls.h"
 #include "singleton-cleanup.h"
 
 #include "defaults.h"
 #include "defun.h"
 #include "error.h"
 #include "errwarn.h"
 #include "input.h"
+#include "interpreter-private.h"
 #include "octave.h"
 #include "ovl.h"
 #include "pager.h"
 #include "procstream.h"
 #include "sighandlers.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
@@ -89,17 +91,20 @@ static bool really_flush_to_pager = fals
 
 static bool flushing_output_to_pager = false;
 
 static void
 clear_external_pager (void)
 {
   if (external_pager)
     {
-      octave::child_list::remove (external_pager->pid ());
+      octave::child_list& kids
+        = octave::__get_child_list__ ("clear_external_pager");
+
+      kids.remove (external_pager->pid ());
 
       delete external_pager;
       external_pager = nullptr;
     }
 }
 
 static bool
 pager_event_handler (pid_t pid, int status)
@@ -155,18 +160,23 @@ do_sync (const char *msg, int len, bool 
             {
               std::string pgr = pager_command ();
 
               if (! pgr.empty ())
                 {
                   external_pager = new oprocstream (pgr.c_str ());
 
                   if (external_pager)
-                    octave::child_list::insert (external_pager->pid (),
-                                                pager_event_handler);
+                    {
+                      octave::child_list& kids
+                        = octave::__get_child_list__ ("do_sync");
+
+                      kids.insert (external_pager->pid (),
+                                   pager_event_handler);
+                    }
                 }
             }
 
           if (external_pager)
             {
               if (external_pager->good ())
                 {
                   external_pager->write (msg, len);
diff --git a/libinterp/corefcn/sighandlers.cc b/libinterp/corefcn/sighandlers.cc
--- a/libinterp/corefcn/sighandlers.cc
+++ b/libinterp/corefcn/sighandlers.cc
@@ -30,26 +30,28 @@ along with Octave; see the file COPYING.
 #include <iostream>
 #include <new>
 
 #if defined (OCTAVE_USE_WINDOWS_API)
 #  define WIN32_LEAN_AND_MEAN
 #  include <windows.h>
 #endif
 
+#include "child-list.h"
 #include "cmd-edit.h"
 #include "oct-syscalls.h"
 #include "quit.h"
 #include "singleton-cleanup.h"
 #include "signal-wrappers.h"
 
 #include "bp-table.h"
 #include "defun.h"
 #include "error.h"
 #include "input.h"
+#include "interpreter-private.h"
 #include "interpreter.h"
 #include "load-save.h"
 #include "octave.h"
 #include "oct-map.h"
 #include "pager.h"
 #include "pt-bp.h"
 #include "pt-eval.h"
 #include "sighandlers.h"
@@ -180,38 +182,41 @@ namespace octave
     static int sigusr1;
     static const bool have_sigusr1
       = octave_get_sig_number ("SIGUSR1", &sigusr1);
 
     static int sigusr2;
     static const bool have_sigusr2
       = octave_get_sig_number ("SIGUSR2", &sigusr2);
 
+    octave::child_list& kids
+      = octave::__get_child_list__ ("respond_to_pending_signals");
+
     for (int sig = 0; sig < octave_num_signals (); sig++)
       {
         if (signals_caught[sig])
           {
             signals_caught[sig] = false;
 
             if ((have_sigchld && sig == sigchld)
                 || (have_sigcld && sig == sigcld))
               {
                 // FIXME: should we block or ignore?
                 volatile interrupt_handler saved_interrupt_handler
                   = ignore_interrupts ();
 
                 void *context = octave_block_child ();
 
-                child_list::wait ();
+                kids.wait ();
 
                 set_interrupt_handler (saved_interrupt_handler);
 
                 octave_unblock_child (context);
 
-                child_list::reap ();
+                kids.reap ();
               }
             else if (have_sigpipe && sig == sigpipe)
               {
                 std::cerr << "warning: broken pipe" << std::endl;
 
                 // Don't loop forever on account of this.
                 // FIXME: is this really needed?  Does it do anything
                 // useful now?
diff --git a/libinterp/corefcn/toplev.cc b/libinterp/corefcn/toplev.cc
--- a/libinterp/corefcn/toplev.cc
+++ b/libinterp/corefcn/toplev.cc
@@ -48,16 +48,17 @@ along with Octave; see the file COPYING.
 #include "build-env.h"
 #include "liboctinterp-build-info.h"
 #include "call-stack.h"
 #include "defaults.h"
 #include "defun.h"
 #include "error.h"
 #include "file-io.h"
 #include "help.h"
+#include "interpreter-private.h"
 #include "octave.h"
 #include "oct-map.h"
 #include "ovl.h"
 #include "ov.h"
 #include "pager.h"
 #include "procstream.h"
 #include "sysdep.h"
 #include "unwind-prot.h"
@@ -98,19 +99,21 @@ along with GNU Octave; see the file COPY
 
 static octave_value_list
 run_command_and_return_output (const std::string& cmd_str)
 {
   octave_value_list retval;
   octave::unwind_protect frame;
 
   iprocstream *cmd = new iprocstream (cmd_str.c_str ());
+  frame.add_delete (cmd);
 
-  frame.add_delete (cmd);
-  frame.add_fcn (octave::child_list::remove, cmd->pid ());
+  octave::child_list& kids
+    = octave::__get_child_list__ ("run_command_and_return_output");
+  frame.add_method (kids, &octave::child_list::remove, cmd->pid ());
 
   if (! *cmd)
     error ("system: unable to start subprocess for '%s'", cmd_str.c_str ());
 
   int fid = cmd->file_number ();
 
   std::ostringstream output_buf;
 
diff --git a/liboctave/system/child-list.cc b/liboctave/system/child-list.cc
--- a/liboctave/system/child-list.cc
+++ b/liboctave/system/child-list.cc
@@ -20,97 +20,48 @@ along with Octave; see the file COPYING.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
 #include "child-list.h"
-#include "lo-error.h"
 #include "oct-syscalls.h"
-#include "signal-wrappers.h"
-#include "singleton-cleanup.h"
 
 namespace octave
 {
-  child_list::child_list_rep *child_list::instance = nullptr;
-
-  bool
-  child_list::instance_ok (void)
-  {
-    bool retval = true;
-
-    if (! instance)
-      {
-        instance = new child_list_rep ();
-
-        if (instance)
-          singleton_cleanup_list::add (cleanup_instance);
-      }
-
-    if (! instance)
-      (*current_liboctave_error_handler)
-        ("unable to create child list object!");
-
-    return retval;
-  }
-
-  void
-  child_list::insert (pid_t pid, child::child_event_handler f)
-  {
-    if (instance_ok ())
-      instance->insert (pid, f);
-  }
-
-  void
-  child_list::reap (void)
-  {
-    if (instance_ok ())
-      instance->reap ();
-  }
-
-  bool
-  child_list::wait (void)
-  {
-    return (instance_ok ()) ? instance->wait () : false;
-  }
-
   class pid_equal
   {
   public:
 
     pid_equal (pid_t v) : val (v) { }
 
     bool operator () (const child& oc) const { return oc.pid == val; }
 
   private:
 
     pid_t val;
   };
 
-  void
-  child_list::remove (pid_t pid)
+  void child_list::remove (pid_t pid)
   {
-    if (instance_ok ())
-      instance->remove_if (pid_equal (pid));
+    m_list.remove_if (pid_equal (pid));
   }
 
-  void
-  child_list::child_list_rep::insert (pid_t pid, child::child_event_handler f)
+  void child_list::child_list::insert (pid_t pid, child::child_event_handler f)
   {
-    append (child (pid, f));
+    m_list.append (child (pid, f));
   }
 
-  void
-  child_list::child_list_rep::reap (void)
+  void child_list::reap (void)
   {
     // Mark the record for PID invalid.
 
-    for (iterator p = begin (); p != end (); p++)
+    for (iterator p = m_list.begin (); p != m_list.end (); p++)
       {
         // The call to the child::child_event_handler might
         // invalidate the iterator (for example, by calling
         // child_list::remove), so we increment the iterator
         // here.
 
         child& oc = *p;
 
@@ -120,27 +71,27 @@ namespace octave
 
             child::child_event_handler f = oc.handler;
 
             if (f && f (oc.pid, oc.status))
               oc.pid = -1;
           }
       }
 
-    remove_if (pid_equal (-1));
+    // ??
+    remove (-1);
   }
 
   // Wait on our children and record any changes in their status.
 
-  bool
-  child_list::child_list_rep::wait (void)
+  bool child_list::wait (void)
   {
     bool retval = false;
 
-    for (iterator p = begin (); p != end (); p++)
+    for (iterator p = m_list.begin (); p != m_list.end (); p++)
       {
         child& oc = *p;
 
         pid_t pid = oc.pid;
 
         if (pid > 0)
           {
             int status;
diff --git a/liboctave/system/child-list.h b/liboctave/system/child-list.h
--- a/liboctave/system/child-list.h
+++ b/liboctave/system/child-list.h
@@ -28,48 +28,35 @@ along with Octave; see the file COPYING.
 #include <csignal>
 
 #include <sys/types.h>
 
 #include "base-list.h"
 
 namespace octave
 {
-  class
-  OCTAVE_API
-  child
+  class OCTAVE_API child
   {
   public:
 
     // Do whatever to handle event for child with PID (might not
     // actually be dead, could just be stopped).  Return true if
     // the list element corresponding to PID should be removed from
     // list.  This function should not call any functions that modify
     // the child_list.
 
     typedef bool (*child_event_handler) (pid_t, int);
 
     child (pid_t id = -1, child_event_handler f = nullptr)
-      : pid (id), handler (f), have_status (0), status (0) { }
-
-    child (const child& oc)
-      : pid (oc.pid), handler (oc.handler),
-        have_status (oc.have_status), status (oc.status) { }
+      : pid (id), handler (f), have_status (0), status (0)
+    { }
 
-    child& operator = (const child& oc)
-    {
-      if (&oc != this)
-        {
-          pid = oc.pid;
-          handler = oc.handler;
-          have_status = oc.have_status;
-          status = oc.status;
-        }
-      return *this;
-    }
+    child (const child& oc) = default;
+
+    child& operator = (const child& oc) = default;
 
     ~child (void) = default;
 
     // The process id of this child.
     pid_t pid;
 
     // The function we call if an event happens for this child.
     child_event_handler handler;
@@ -81,56 +68,30 @@ namespace octave
     // from waitpid.
     int status;
   };
 
   class
   OCTAVE_API
   child_list
   {
-  protected:
+  public:
+
+    typedef base_list<child>::iterator iterator;
+    typedef base_list<child>::const_iterator const_iterator;
 
     child_list (void) { }
 
-    class child_list_rep : public base_list<child>
-    {
-    public:
+    void insert (pid_t pid, child::child_event_handler f);
 
-      void insert (pid_t pid, child::child_event_handler f);
-
-      void reap (void);
-
-      bool wait (void);
-    };
+    void remove (pid_t pid);
 
-  public:
-
-    ~child_list (void) = default;
-
-    static void insert (pid_t pid, child::child_event_handler f);
+    void reap (void);
 
-    static void reap (void);
-
-    static bool wait (void);
-
-    static void remove (pid_t pid);
+    bool wait (void);
 
   private:
 
-    static bool instance_ok (void);
-
-    static child_list_rep *instance;
-
-    static void cleanup_instance (void) { delete instance; instance = nullptr; }
+    base_list<child> m_list;
   };
 }
 
-#if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::child' instead")
-typedef octave::child octave_child;
-
-OCTAVE_DEPRECATED (4.2, "use 'octave::child_list' instead")
-typedef octave::child_list octave_child_list;
-
 #endif
-
-#endif
