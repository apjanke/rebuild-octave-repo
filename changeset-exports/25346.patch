# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1525328789 14400
#      Thu May 03 02:26:29 2018 -0400
# Node ID dd416c31761efd9076984b3fb5730a6988dfff6a
# Parent  ce6f7a5cd68e83ee9b1ad1319638a8a44a709d88
access bp_table through interpreter where possible

* debug.cc (Fdbstop, Fdbclear): Define with DEFMETHOD.
(Fdbstop, Fdbclear, Fdbstatus): Access bp_table through interpreter
object.

diff --git a/libinterp/corefcn/debug.cc b/libinterp/corefcn/debug.cc
--- a/libinterp/corefcn/debug.cc
+++ b/libinterp/corefcn/debug.cc
@@ -75,18 +75,18 @@ intmap_to_ov (const octave::bp_table::in
         }
     }
 
   retval.resize (dim_vector (1, idx));
 
   return retval;
 }
 
-DEFUN (dbstop, args, ,
-       doc: /* -*- texinfo -*-
+DEFMETHOD (dbstop, interp, args, ,
+           doc: /* -*- texinfo -*-
 @deftypefn  {} {} dbstop @var{func}
 @deftypefnx {} {} dbstop @var{func} @var{line}
 @deftypefnx {} {} dbstop @var{func} @var{line1} @var{line2} @dots{}
 @deftypefnx {} {} dbstop @var{line1} @dots{}
 @deftypefnx {} {} dbstop in @var{func}
 @deftypefnx {} {} dbstop in @var{func} at @var{line}
 @deftypefnx {} {} dbstop in @var{func} at @var{line} if "@var{condition}"
 @deftypefnx {} {} dbstop if @var{event}
@@ -171,17 +171,17 @@ all breakpoints within the file are clea
 @end deftypefn */)
 {
   octave::bp_table::intmap retmap;
   std::string symbol_name = "";  // stays empty for "dbstop if error" etc
   octave::bp_table::intmap lines;
   std::string condition = "";
   octave_value retval;
 
-  octave::bp_table& bptab = octave::__get_bp_table__ ("Fdbstop");
+  octave::bp_table& bptab = interp.get_bp_table ();
 
   if (args.length() >= 1 && ! args(0).isstruct ())
     {
       // explicit function / line / condition
       bptab.parse_dbfunction_params ("dbstop", args, symbol_name,
                                      lines, condition);
 
       if (lines.size () == 0)
@@ -247,18 +247,18 @@ all breakpoints within the file are clea
             }
           retval = octave_value (line.numel ());
         }
     }
 
   return retval;
 }
 
-DEFUN (dbclear, args, ,
-       doc: /* -*- texinfo -*-
+DEFMETHOD (dbclear, interp, args, ,
+           doc: /* -*- texinfo -*-
 @deftypefn  {} {} dbclear @var{func}
 @deftypefnx {} {} dbclear @var{func} @var{line}
 @deftypefnx {} {} dbclear @var{func} @var{line1} @var{line2} @dots{}
 @deftypefnx {} {} dbclear @var{line} @dots{}
 @deftypefnx {} {} dbclear all
 @deftypefnx {} {} dbclear in @var{func}
 @deftypefnx {} {} dbclear in @var{func} at @var{line}
 @deftypefnx {} {} dbclear if @var{event}
@@ -297,17 +297,17 @@ files.
 @end deftypefn */)
 {
   std::string symbol_name = "";  // stays empty for "dbclear if error" etc
   octave::bp_table::intmap lines;
   std::string dummy;             // "if" condition -- only used for dbstop
 
   int nargin = args.length ();
 
-  octave::bp_table& bptab = octave::__get_bp_table__ ("Fdbclear");
+  octave::bp_table& bptab = interp.get_bp_table ();
 
   bptab.parse_dbfunction_params ("dbclear", args, symbol_name, lines, dummy);
 
   if (nargin == 1 && symbol_name == "all")
     {
       bptab.remove_all_breakpoints ();
       bptab.dbclear_all_signals ();
     }
@@ -369,17 +369,17 @@ The @qcode{"warn"} field is set similarl
 
   if (nargin != 0 && nargin != 1)
     error ("dbstatus: only zero or one arguments accepted\n");
 
   octave_value_list fcn_list;
   octave::bp_table::fname_bp_map bp_list;
   std::string symbol_name;
 
-  octave::bp_table& bptab = octave::__get_bp_table__ ("Fdbstatus");
+  octave::bp_table& bptab = interp.get_bp_table ();
 
   if (nargin == 1)
     {
       if (! args(0).is_string ())
         err_wrong_type_arg ("dbstatus", args(0));
 
       symbol_name = args(0).string_value ();
       fcn_list(0) = symbol_name;
