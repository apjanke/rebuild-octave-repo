# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1286435347 14400
#      Thu Oct 07 03:09:07 2010 -0400
# Node ID 4558aad4c41d7b59b30d8175d154e157550b9170
# Parent  f9284142a0603233ca7667bacd85c5e013442013
conv.m: handle "same" shape argument

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2010-10-07  John W. Eaton  <jwe@octave.org>
+
+	* polynomial/conv.m: Handle optional third argument.  New
+	tests.  Update doc string.
+
 2010-10-06  Ben Abbott <bpabbott@mac.com>
 
 	* image/image.m: Allow x/ydata to imply a flip of the image.
 	Modify demos.
 
 2010-10-05  Carlo de Falco  <kingcrimson@tiscali.it>
 
 	* general/quadv.m: Fix help string and add a test for vector
diff --git a/scripts/polynomial/conv.m b/scripts/polynomial/conv.m
--- a/scripts/polynomial/conv.m
+++ b/scripts/polynomial/conv.m
@@ -13,69 +13,91 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} conv (@var{a}, @var{b})
+## @deftypefn {Function File} {} conv (@var{a}, @var{b}, @var{shape})
 ## Convolve two vectors.
 ##
 ## @code{y = conv (a, b)} returns a vector of length equal to
 ## @code{length (a) + length (b) - 1}.
 ## If @var{a} and @var{b} are polynomial coefficient vectors, @code{conv}
 ## returns the coefficients of the product polynomial.
+##
+## The optional @var{shape} parameter may be
+##
+## @table @asis\n\
+## @item @var{shape} = "full"
+## Return the full convolution.
+## \n\
+## @item @var{shape} = "same"
+## Return central part of the convolution with the same size as @var{a}.
+## @end table
+##
+## @noindent
+## By default, @var{shape} is @samp{"full"}.
+##
 ## @seealso{deconv, poly, roots, residue, polyval, polyderiv, polyint}
 ## @end deftypefn
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: June 1994
 ## Adapted-By: jwe
 
-function y = conv (a, b)
+function y = conv (a, b, shape = "full")
 
-  if (nargin != 2)
+  if (nargin < 2 || nargin > 3)
     print_usage ();
   endif
 
   if (! (isvector (a) && isvector (b)))
     error ("conv: both arguments must be vectors");
   endif
 
   la = length (a);
   lb = length (b);
 
   ly = la + lb - 1;
 
-  ## Use the shortest vector as the coefficent vector to filter.
-  ## Preserve the row/column orientation of the longer input.
-  if (la <= lb)
-    if (ly > lb)
-      if (size (b, 1) <= size (b, 2))
-        x = [b, (zeros (1, ly - lb))];
+  if (ly == 0)
+    y = zeros (1, 0);
+  else
+    ## Use the shortest vector as the coefficent vector to filter.
+    ## Preserve the row/column orientation of the longer input.
+    if (la <= lb)
+      if (ly > lb)
+        if (size (b, 1) <= size (b, 2))
+          x = [b, (zeros (1, ly - lb))];
+        else
+          x = [b; (zeros (ly - lb, 1))];
+        endif
       else
-        x = [b; (zeros (ly - lb, 1))];
+        x = b;
       endif
+      y = filter (a, 1, x);
     else
-      x = b;
+      if (ly > la)
+        if (size (a, 1) <= size (a, 2))
+          x = [a, (zeros (1, ly - la))];
+        else
+          x = [a; (zeros (ly - la, 1))];
+        endif
+      else
+        x = a;
+      endif
+      y = filter (b, 1, x);
     endif
-    y = filter (a, 1, x);
-  else
-    if (ly > la)
-      if (size (a, 1) <= size (a, 2))
-        x = [a, (zeros (1, ly - la))];
-      else
-        x = [a; (zeros (ly - la, 1))];
-      endif
-    else
-      x = a;
+    if (strcmp (shape, "same"))
+      idx = ceil ((ly - la) / 2);
+      y = y(idx+1:idx+la);
     endif
-    y = filter (b, 1, x);
   endif
 
 endfunction
 
 %!test
 %!  x = ones(3,1);
 %!  y = ones(1,3);
 %!  b = 2;
@@ -94,18 +116,29 @@ endfunction
 
 %!test
 %!  a = 1:10;
 %!  b = 1:3;
 %!  assert (size(conv(a,b)), [1, numel(a)+numel(b)-1])
 %!  assert (size(conv(b,a)), [1, numel(a)+numel(b)-1])
 
 %!test
+%!  a = 1:10;
+%!  b = 1:3;
+%!  assert (size(conv(a,b)), [1, numel(a)+numel(b)-1])
+%!  assert (size(conv(b,a)), [1, numel(a)+numel(b)-1])
+
 %!  a = (1:10).';
 %!  b = 1:3;
 %!  assert (size(conv(a,b)), [numel(a)+numel(b)-1, 1])
 %!  assert (size(conv(b,a)), [numel(a)+numel(b)-1, 1])
 
 %!test
 %!  a = 1:10;
+%!  b = 1:3;
+%!  assert (conv(a,b,'same'), [4, 10, 16, 22, 28, 34, 40, 46, 52, 47])
+%!  assert (conv(b,a,'same'), [28, 34, 40])
+
+%!test
+%!  a = 1:10;
 %!  b = (1:3).';
 %!  assert (size(conv(a,b)), [1, numel(a)+numel(b)-1])
 %!  assert (size(conv(b,a)), [1, numel(a)+numel(b)-1])
