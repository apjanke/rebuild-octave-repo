# HG changeset patch
# User Kai T. Ohlhus <k.ohlhus@gmail.com>
# Date 1505390853 -7200
#      Thu Sep 14 14:07:33 2017 +0200
# Node ID 8e8dbabd6e848e7343b0c315203e5f4f332535aa
# Parent  530d5e9202eea8760bd9b94df76a6a14494608c4
ov.h(fast_elem_insert): Remove "virtual" declaration.

No function except `fast_elem_insert` is declared virtual in ov.h.  There is
no obvious reason, as no class inherits from wrapper class `octave_value`.
Therefore remove that keyword to be consistent.  For a discussion, see:

https://lists.gnu.org/archive/html/octave-maintainers/2017-08/msg00149.html

Improve some comments for Doxygen in that file.

diff --git a/libinterp/octave-value/ov.h b/libinterp/octave-value/ov.h
--- a/libinterp/octave-value/ov.h
+++ b/libinterp/octave-value/ov.h
@@ -1456,37 +1456,47 @@ public:
   MAPPER_FORWARD (xtolower)
   MAPPER_FORWARD (xtoupper)
 
 #undef MAPPER_FORWARD
 
   octave_value map (octave_base_value::unary_mapper_t umap) const
   { return rep->map (umap); }
 
-  // Extract the n-th element, aka val(n).
-  // Result is undefined if val is not an array type or n is out of range.
-  // Never error.
+  /*!
+   * \brief Extract the n-th element, aka `val(n)`.
+   *
+   * \return Result is undefined if `val` is not an array type
+   *                                or \p n is out of range.
+   *
+   * \warning Function calls should never error.
+   */
   octave_value
   fast_elem_extract (octave_idx_type n) const
   { return rep->fast_elem_extract (n); }
 
-  // Assign the n-th element, aka val(n) = x.
-  // Return false if val is not an array type, x is not a matching scalar type,
-  // or n is out of range.
-  // Never error.
-  virtual bool
+  /*!
+   * \brief Assign the n-th element, aka `val(n) = x`.
+   *
+   * \returns false if `val` is not an array type,
+   *                   \p x is not a matching scalar type,
+   *                   or \p n is out of range.
+   *
+   * \warning Function calls should never error.
+   */
+  bool
   fast_elem_insert (octave_idx_type n, const octave_value& x)
   {
     make_unique ();
     return rep->fast_elem_insert (n, x);
   }
 
 protected:
 
-  // The real representation.
+  //! The real representation.
   octave_base_value *rep;
 
 private:
 
   static octave_base_value *nil_rep (void);
 
   assign_op unary_op_to_assign_op (unary_op op);
 
