# HG changeset patch
# User Rik <rik@octave.org>
# Date 1550191080 28800
#      Thu Feb 14 16:38:00 2019 -0800
# Node ID 75d79c39ac9226933067a4eb56317df092c1280b
# Parent  f034b29320ad5034ad5c66480f64411e9d773440
Replace '-0' in sigma matrix from svd() with '+0' (bug #55710).

* liboctave/numeric/svd.cc (svd (const T& a, svd::Type type, svd::Driver
driver): After calling LAPACK routine to calculate svd, check for zeros
in sigma matrix and replace them with '+0'.

* libinterp/corefcn/svd.cc (Fsvd): Add BIST test for bug #55710.

diff --git a/libinterp/corefcn/svd.cc b/libinterp/corefcn/svd.cc
--- a/libinterp/corefcn/svd.cc
+++ b/libinterp/corefcn/svd.cc
@@ -367,16 +367,18 @@ and may be less accurate for some matric
 %! assert (size (v), [0, 0]);
 
 %!test <*49309>
 %! [~,~,v] = svd ([1, 1, 1], 0);
 %! assert (size (v), [3 3]);
 %! [~,~,v] = svd ([1, 1, 1], "econ");
 %! assert (size (v), [3 1]);
 
+%!assert <*55710> (1 / svd (-0), Inf)
+
 %!error svd ()
 %!error svd ([1, 2; 4, 5], 2, 3)
 */
 
 DEFUN (svd_driver, args, nargout,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {@var{val} =} svd_driver ()
 @deftypefnx {} {@var{old_val} =} svd_driver (@var{new_val})
diff --git a/liboctave/numeric/svd.cc b/liboctave/numeric/svd.cc
--- a/liboctave/numeric/svd.cc
+++ b/liboctave/numeric/svd.cc
@@ -380,16 +380,23 @@ namespace octave
           std::vector<F77_INT> iwork (8 * std::min (m, n));
 
           gesdd (jobz, m, n, tmp_data, m1, s_vec, u, vt, nrow_vt1,
                  work, lwork, iwork.data (), info);
         }
       else
         (*current_liboctave_error_handler) ("svd: unknown driver");
 
+      // LAPACK can return -0 which is a small problem (bug #55710).
+      for (octave_idx_type i = 0; i < sigma.diag_length (); i++)
+        {
+          if (! sigma.dgxelem (i))
+            sigma.dgxelem (i) = DM_P (0);
+        }
+
       if (! (jobv == 'N' || jobv == 'O'))
         right_sm = right_sm.hermitian ();
     }
 
     // Instantiations we need.
 
     template class svd<Matrix>;
 
