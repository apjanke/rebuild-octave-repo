# HG changeset patch
# User jwe
# Date 1022125285 0
#      Thu May 23 03:41:25 2002 +0000
# Node ID e6f67a1ed814f037b93af06c5428251ed534ec11
# Parent  9be12c29c7d5390b3f3417bf6c0136a5f3888c16
[project @ 2002-05-23 03:41:25 by jwe]

diff --git a/libcruft/ChangeLog b/libcruft/ChangeLog
--- a/libcruft/ChangeLog
+++ b/libcruft/ChangeLog
@@ -1,10 +1,12 @@
 2002-05-22  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* ordered-qz/dsubsp.f (DSUBSP): Delete decl for unused variable J.
+
 	* misc/f77-fcn.c (xstopx): Return type is void, not volatile void.
 	* misc/f77-fcn.h (xstopx): Provide decl.  Add special gcc noreturn
 	attribute here.
 
 2002-05-16  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* misc/f77-fcn.h: Define F77_FCN for backward compatibility.
 
diff --git a/libcruft/ordered-qz/dsubsp.f b/libcruft/ordered-qz/dsubsp.f
--- a/libcruft/ordered-qz/dsubsp.f
+++ b/libcruft/ordered-qz/dsubsp.f
@@ -30,17 +30,17 @@ C*             IF THE ANSWER IS POSITIVE
 C*    EPS      THE REQUIRED ABSOLUTE ACCURACY OF THE RESULT
 C*   *NDIM     AN INTEGER GIVING THE DIMENSION OF THE COMPUTED
 C*             DEFLATING SUBSPACE
 C*   *FAIL     A LOGICAL VARIABLE WHICH IS FALSE ON A NORMAL RETURN,
 C*             TRUE OTHERWISE (WHEN EXCHQZ FAILS)
 C*   *IND      AN INTEGER WORKING ARRAY OF DIMENSION AT LEAST N
 C*
       INTEGER L, LS, LS1, LS2, L1, LL, NUM, IS, L2I, L2K, I, K, II,
-     * ISTEP, IFIRST, J
+     * ISTEP, IFIRST
       DOUBLE PRECISION S, P, D, ALPHA, BETA
       FAIL = .TRUE.
       NDIM = 0
       NUM = 0
       L = 0
       LS = 1
 C*** CONSTRUCT ARRAY IND(I) WHERE :
 C***     IABS(IND(I)) IS THE SIZE OF THE BLOCK I
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,15 @@
+2002-05-22  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* cmd-edit.cc (gnu_readline::history_search_backward): New function.
+	(gnu_readline::history_search_forward): Likewise.
+	(gnu_readline::gnu_readline): Use them instead of passing pointers
+	to extern "C" functions to octave_rl_ad_defun.
+
 2002-05-22  Mumit Khan <khan@nanotech.wisc.edu>
 
 	* DASPK.cc (ddaspk_psol): Return value.
 	* oct-rl-edit.c: Use /* ... */ to comment.
 
 2002-05-20  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* DASSL.h (DASSL_options::init): Undo previous change.
diff --git a/liboctave/cmd-edit.cc b/liboctave/cmd-edit.cc
--- a/liboctave/cmd-edit.cc
+++ b/liboctave/cmd-edit.cc
@@ -118,16 +118,20 @@ public:
   void do_set_event_hook (event_hook_fcn f);
 
   void do_restore_event_hook (void);
 
   void do_read_init_file (const std::string& file);
 
   static int operate_and_get_next (int, int);
 
+  static int history_search_backward (int, int);
+
+  static int history_search_forward (int, int);
+
 private:
 
   startup_hook_fcn previous_startup_hook;
 
   event_hook_fcn previous_event_hook;
 
   completion_fcn completion_function;
 
@@ -155,21 +159,21 @@ gnu_readline::gnu_readline ()
 
   octave_rl_add_defun ("operate-and-get-next",
 		       gnu_readline::operate_and_get_next,
 		       octave_rl_ctrl ('O'));
 
   /* And the history search functions. */
 
   octave_rl_add_defun ("history-search-backward",
-		       octave_rl_history_search_backward,
+		       gnu_readline::history_search_backward,
 		       octave_rl_meta ('P'));
 
   octave_rl_add_defun ("history-search-forward",
-		       octave_rl_history_search_forward,
+		       gnu_readline::history_search_forward,
 		       octave_rl_meta ('N'));
 }
 
 
 
 void
 gnu_readline::do_set_name (const std::string& nm)
 {
@@ -386,16 +390,28 @@ gnu_readline::operate_and_get_next (int 
   else
     command_history::set_mark (x_where + 1);
 
   command_editor::set_startup_hook (command_history::goto_mark);
 
   return 0;
 }
 
+int
+gnu_readline::history_search_backward (int count, int c)
+{
+  return octave_rl_history_search_backward (count, c);
+}
+
+int
+gnu_readline::history_search_forward (int count, int c)
+{
+  return octave_rl_history_search_forward (count, c);
+}
+
 char *
 gnu_readline::command_generator (const char *text, int state)
 {
   char *retval = 0;
 
   completion_fcn f = command_editor::get_completion_function ();
 
   std::string tmp = f (text, state);
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,26 @@
 2002-05-22  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* c-file-ptr-stream.h (c_file_ptr_buf::fclose): New function.
+	(c_file_ptr_buf::c_file_ptr_buf): Use it as default argument
+	instead of extern "C" fclose function.
+	(i_c_file_ptr_stream::i_c_file_ptr_stream): Likewise.
+	(o_c_file_ptr_stream::o_c_file_ptr_stream): Likewise.
+	* oct-stdstrm.h (octave_istdiostream::octave_istdiostream): Likewise.
+	(octave_istdiostream::create): Likewise.
+	* oct-stdstrm.h (octave_ostdiostream::octave_ostdiostream): Likewise.
+	(octave_ostdiostream::create): Likewise.
+
+	* oct-prcstrm.cc (cxx_pclose): New static function.
+	(octave_iprocstream::octave_iprocstream): Pass it to
+	octave_istdiostream constructor instead of extern "C" pclose function.
+	(octave_oprocstream::octave_oprocstream): Pass it to
+	octave_ostdiostream constructor instead of extern "C" pclose function.
+
 	* debug.cc (Fdbtype): Use C++ strings, not C strings.
 
 2002-05-22  Mumit Khan <khan@nanotech.wisc.edu>
 
 	* debug.cc: Include cstdlib instead of stdlib.h. Include cstring.
 	(dbtype): Use strchr instead of index.
 	* TEMPLATE-INST/Array-tc.cc (Array<octave_value>::resize_fill_value):
 	Fix template specialization syntax.
diff --git a/src/c-file-ptr-stream.h b/src/c-file-ptr-stream.h
--- a/src/c-file-ptr-stream.h
+++ b/src/c-file-ptr-stream.h
@@ -63,17 +63,17 @@ public:
 #else
   typedef std::filebuf::int_type int_type;
 #endif
 
   typedef int (*close_fcn) (FILE *);
 
   FILE* stdiofile (void) const { return f; }
 
-  c_file_ptr_buf (FILE *f_arg, close_fcn cf_arg = ::fclose)
+  c_file_ptr_buf (FILE *f_arg, close_fcn cf_arg = fclose)
     : 
 #if defined __GNUC__ && __GNUC__ >= 3
     OCTAVE_STD_FILEBUF (f_arg, std::ios::in | std::ios::out),
 #else
     OCTAVE_STD_FILEBUF (f_arg ? fileno (f_arg) : -1),
 #endif
     f (f_arg), cf (cf_arg),
     fd (f_arg ? fileno (f_arg) : -1)
@@ -102,16 +102,18 @@ public:
   int sync (void);
 
   int flush (void);
 
   int close (void);
 
   int file_number () const { return fd; }
 
+  static int fclose (FILE *f) { return ::fclose (f); }
+
 protected:
 
   FILE *f;
 
   close_fcn cf;
 
 private:
 
@@ -120,17 +122,18 @@ private:
 
 #undef OCTAVE_STD_FILEBUF
 
 class
 i_c_file_ptr_stream : public std::istream
 {
 public:
 
-  i_c_file_ptr_stream (FILE* f, c_file_ptr_buf::close_fcn cf = ::fclose)
+  i_c_file_ptr_stream (FILE* f,
+		       c_file_ptr_buf::close_fcn cf = c_file_ptr_buf::fclose)
     : std::istream (0), buf (new c_file_ptr_buf (f, cf)) { init (buf); }
 
   ~i_c_file_ptr_stream (void) { delete buf; buf = 0; }
 
   c_file_ptr_buf *rdbuf (void) { return buf; }
 
   void close (void);
 
@@ -139,17 +142,18 @@ private:
   c_file_ptr_buf *buf;
 };
 
 class
 o_c_file_ptr_stream : public std::ostream
 {
 public:
 
-  o_c_file_ptr_stream (FILE* f, c_file_ptr_buf::close_fcn cf = ::fclose)
+  o_c_file_ptr_stream (FILE* f,
+		       c_file_ptr_buf::close_fcn cf = c_file_ptr_buf::fclose)
     : std::ostream (0), buf (new c_file_ptr_buf (f, cf)) { init (buf); }
 
   ~o_c_file_ptr_stream (void) { delete buf; buf = 0; }
 
   c_file_ptr_buf *rdbuf (void) { return buf; }
 
   void close (void);
 
diff --git a/src/oct-prcstrm.cc b/src/oct-prcstrm.cc
--- a/src/oct-prcstrm.cc
+++ b/src/oct-prcstrm.cc
@@ -23,27 +23,33 @@ Software Foundation, 59 Temple Place - S
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cstdio>
 
 #include "oct-prcstrm.h"
 
+static int
+cxx_pclose (FILE *f)
+{
+  return ::pclose (f);
+}
+
 octave_stream
 octave_iprocstream::create (const std::string& n, std::ios::openmode arg_md,
 			    oct_mach_info::float_format flt_fmt)
 {
   return octave_stream (new octave_iprocstream (n, arg_md, flt_fmt));
 }
 
 octave_iprocstream::octave_iprocstream (const std::string& n,
 					std::ios::openmode arg_md,
 					oct_mach_info::float_format flt_fmt)
-  : octave_istdiostream (n, ::popen (n.c_str (), "r"), ::pclose,
+  : octave_istdiostream (n, ::popen (n.c_str (), "r"), cxx_pclose,
 			 arg_md, flt_fmt)
 {
 }
 
 octave_iprocstream::~octave_iprocstream (void)
 {
   do_close ();
 }
@@ -53,17 +59,17 @@ octave_oprocstream::create (const std::s
 			    oct_mach_info::float_format flt_fmt)
 {
   return octave_stream (new octave_oprocstream (n, arg_md, flt_fmt));
 }
 
 octave_oprocstream::octave_oprocstream (const std::string& n,
 					std::ios::openmode arg_md,
 					oct_mach_info::float_format flt_fmt)
-  : octave_ostdiostream (n, ::popen (n.c_str (), "w"), ::pclose,
+  : octave_ostdiostream (n, ::popen (n.c_str (), "w"), cxx_pclose,
 			 arg_md, flt_fmt)
 {
 }
 
 octave_oprocstream::~octave_oprocstream (void)
 {
   do_close ();
 }
diff --git a/src/oct-stdstrm.h b/src/oct-stdstrm.h
--- a/src/oct-stdstrm.h
+++ b/src/oct-stdstrm.h
@@ -69,24 +69,24 @@ protected:
 };
 
 class
 octave_istdiostream : public octave_base_stdiostream
 {
 public:
 
   octave_istdiostream (const std::string& n, FILE *f = 0,
-		       c_file_ptr_buf::close_fcn cf = ::fclose,
+		       c_file_ptr_buf::close_fcn cf = c_file_ptr_buf::fclose,
 		       std::ios::openmode arg_md = std::ios::in,
 		       oct_mach_info::float_format flt_fmt =
 		       oct_mach_info::native);
 
   static octave_stream
   create (const std::string& n, FILE *f = 0,
-	  c_file_ptr_buf::close_fcn cf = ::fclose,
+	  c_file_ptr_buf::close_fcn cf = c_file_ptr_buf::fclose,
 	  std::ios::openmode arg_md = std::ios::in,
 	  oct_mach_info::float_format flt_fmt = oct_mach_info::native);
 
   // Return non-zero if EOF has been reached on this stream.
 
   bool eof (void) const { return is ? is->eof () : true; }
 
   std::istream *input_stream (void) { return is; }
@@ -123,24 +123,24 @@ private:
 };
 
 class
 octave_ostdiostream : public octave_base_stdiostream
 {
 public:
 
   octave_ostdiostream (const std::string& n, FILE *f = 0,
-		       c_file_ptr_buf::close_fcn cf = ::fclose,
+		       c_file_ptr_buf::close_fcn cf = c_file_ptr_buf::fclose,
 		       std::ios::openmode arg_md = std::ios::out,
 		       oct_mach_info::float_format flt_fmt =
 		       oct_mach_info::native);
 
   static octave_stream
   create (const std::string& n, FILE *f = 0,
-	  c_file_ptr_buf::close_fcn cf = ::fclose,
+	  c_file_ptr_buf::close_fcn cf = c_file_ptr_buf::fclose,
 	  std::ios::openmode arg_md = std::ios::out,
 	  oct_mach_info::float_format flt_fmt = oct_mach_info::native);
 
   // Return non-zero if EOF has been reached on this stream.
 
   bool eof (void) const { return os ? os->eof () : true; }
 
   std::istream *input_stream (void) { return 0; }
