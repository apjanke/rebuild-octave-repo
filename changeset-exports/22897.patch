# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1481857451 18000
#      Thu Dec 15 22:04:11 2016 -0500
# Node ID 4090c32fccf81e98a1b9701b85f120bb5376a587
# Parent  8fb46f48c548ff748de8ca22fafd0b6a404b4867
store set of dispatch classes in built-in function objects

* ov-fcn.h (octave_function::push_dispatch_class,
octave_function::handles_dispatch_class): New virtual functions.
* ov-builtin.h, ov-builtin.cc (octave_builtin::push_dispatch_class,
octave_builtin::handles_dispatch_class): New functions.

* symtab.h, symtab.cc
(symbol_table::fcn_info::fcn_info_rep::install_built_in_dispatch):
Define in .cc file.  Store class names in built-in function object
instead of class_methods.
(symbol_table::fcn_info::fcn_info_rep::load_class_method): Also search
for built-in functions that are declared to handle specific types.

diff --git a/libinterp/corefcn/symtab.cc b/libinterp/corefcn/symtab.cc
--- a/libinterp/corefcn/symtab.cc
+++ b/libinterp/corefcn/symtab.cc
@@ -524,16 +524,34 @@ symbol_table::fcn_info::fcn_info_rep::lo
                     {
                       class_methods[dispatch_type] = retval;
                       break;
                     }
 
                   it++;
                 }
             }
+
+          if (retval.is_undefined ())
+            {
+              // Search for built-in functions that are declared to
+              // handle specific types.
+
+              if (built_in_function.is_defined ())
+                {
+                  octave_function *fcn = built_in_function.function_value ();
+
+                  if (fcn && fcn->handles_dispatch_class (dispatch_type))
+                    {
+                      retval = built_in_function;
+
+                      class_methods[dispatch_type] = retval;
+                    }
+                }
+            }
         }
     }
 
   return retval;
 }
 
 void
 symbol_table::fcn_info::fcn_info_rep::mark_subfunction_in_scope_as_private
@@ -1106,16 +1124,37 @@ static std::string
 fcn_file_name (const octave_value& fcn)
 {
   const octave_function *f = fcn.function_value ();
 
   return f ? f->fcn_file_name () : "";
 }
 
 void
+symbol_table::fcn_info::fcn_info_rep::install_built_in_dispatch (const std::string& klass)
+{
+  if (built_in_function.is_defined ())
+    {
+      octave_function *fcn = built_in_function.function_value ();
+
+      if (fcn)
+        {
+          if (fcn->handles_dispatch_class (klass))
+            warning ("install_built_in_dispatch: '%s' already defined for class '%s'",
+                     name.c_str (), klass.c_str ());
+          else
+            fcn->push_dispatch_class (klass);
+        }
+    }
+  else
+    error ("install_built_in_dispatch: '%s' is not a built-in function",
+           name.c_str ());
+}
+
+void
 symbol_table::fcn_info::fcn_info_rep::dump (std::ostream& os,
                                             const std::string& prefix) const
 {
   os << prefix << full_name ()
      << " ["
      << (cmdline_function.is_defined () ? "c" : "")
      << (built_in_function.is_defined () ? "b" : "")
      << (package.is_defined () ? "p" : "")
diff --git a/libinterp/corefcn/symtab.h b/libinterp/corefcn/symtab.h
--- a/libinterp/corefcn/symtab.h
+++ b/libinterp/corefcn/symtab.h
@@ -848,30 +848,17 @@ public:
         function_on_path = f;
       }
 
       void install_built_in_function (const octave_value& f)
       {
         built_in_function = f;
       }
 
-      void install_built_in_dispatch (const std::string& klass)
-      {
-        if (built_in_function.is_defined ())
-          {
-            if (class_methods.find (klass) != class_methods.end ())
-              warning ("install_built_in_dispatch: '%s' already defined for class '%s'",
-                       name.c_str (), klass.c_str ());
-            else
-              class_methods[klass] = built_in_function;
-          }
-        else
-          error ("install_built_in_dispatch: '%s' is not a built-in function",
-                 name.c_str ());
-      }
+      void install_built_in_dispatch (const std::string& klass);
 
       template <typename T>
       void
       clear_map (std::map<T, octave_value>& map, bool force = false)
       {
         typename std::map<T, octave_value>::iterator p = map.begin ();
 
         while (p != map.end ())
diff --git a/libinterp/octave-value/ov-builtin.cc b/libinterp/octave-value/ov-builtin.cc
--- a/libinterp/octave-value/ov-builtin.cc
+++ b/libinterp/octave-value/ov-builtin.cc
@@ -154,10 +154,22 @@ octave_builtin::stash_jit (jit_type &typ
 }
 
 octave_builtin::fcn
 octave_builtin::function (void) const
 {
   return f;
 }
 
+void
+octave_builtin::push_dispatch_class (const std::string& dispatch_type)
+{
+  dispatch_classes.insert (dispatch_type);
+}
+
+bool
+octave_builtin::handles_dispatch_class (const std::string& dispatch_type) const
+{
+  return dispatch_classes.find (dispatch_type) != dispatch_classes.end ();
+}
+
 const std::list<octave_lvalue> *octave_builtin::curr_lvalue_list = 0;
 
diff --git a/libinterp/octave-value/ov-builtin.h b/libinterp/octave-value/ov-builtin.h
--- a/libinterp/octave-value/ov-builtin.h
+++ b/libinterp/octave-value/ov-builtin.h
@@ -20,16 +20,18 @@ along with Octave; see the file COPYING.
 
 */
 
 #if ! defined (octave_ov_builtin_h)
 #define octave_ov_builtin_h 1
 
 #include "octave-config.h"
 
+#include <list>
+#include <set>
 #include <string>
 
 #include "ov-fcn.h"
 #include "ov-typeinfo.h"
 
 class octave_value;
 class octave_value_list;
 class jit_type;
@@ -92,26 +94,33 @@ public:
                      const std::list<octave_lvalue>* lvalue_list);
 
   jit_type *to_jit (void) const;
 
   void stash_jit (jit_type& type);
 
   fcn function (void) const;
 
+  void push_dispatch_class (const std::string& dispatch_type);
+
+  bool handles_dispatch_class (const std::string& dispatch_type) const;
+
   static const std::list<octave_lvalue> *curr_lvalue_list;
 
 protected:
 
   // A pointer to the actual function.
   fcn f;
 
   // The name of the file where this function was defined.
   std::string file;
 
+  // The types this function has been declared to handle (if any).
+  std::set<std::string> dispatch_classes;
+
   // A pointer to the jit type that represents the function.
   jit_type *jtype;
 
 private:
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
diff --git a/libinterp/octave-value/ov-fcn.h b/libinterp/octave-value/ov-fcn.h
--- a/libinterp/octave-value/ov-fcn.h
+++ b/libinterp/octave-value/ov-fcn.h
@@ -99,16 +99,24 @@ public:
 
   virtual bool is_class_method (const std::string& = "") const
   { return false; }
 
   virtual bool takes_varargs (void) const { return false; }
 
   virtual bool takes_var_return (void) const { return false; }
 
+  // The next two functions are for dispatching to built-in
+  // functions given built-in classes.
+
+  virtual void push_dispatch_class (const std::string&) { }
+
+  virtual bool handles_dispatch_class (const std::string&) const
+  { return false; }
+
   void stash_dispatch_class (const std::string& nm) { xdispatch_class = nm; }
 
   std::string dispatch_class (void) const { return xdispatch_class; }
 
   void stash_package_name (const std::string& pack) { xpackage_name = pack; }
 
   std::string package_name (void) const { return xpackage_name; }
 
