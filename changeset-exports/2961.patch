# HG changeset patch
# User jwe
# Date 863400984 0
#      Mon May 12 01:36:24 1997 +0000
# Node ID 8a77d52c9d02dde4f3d5c30eb5f980864307f7f0
# Parent  194b50e4725bb26dcb48e275ae06112f59db8c9b
[project @ 1997-05-12 01:36:04 by jwe]

diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -1422,17 +1422,17 @@ maybe_convert_to_ans_assign (tree_expres
 // Maybe print a warning if an assignment expression is used as the
 // test in a logical expression.
 
 static void
 maybe_warn_assign_as_truth_value (tree_expression *expr)
 {
   if (Vwarn_assign_as_truth_value
       && expr->is_assignment_expression ()
-      && expr->is_in_parens () < 2)
+      && expr->paren_count () < 2)
     {
       warning ("suggest parenthesis around assignment used as truth value");
     }
 }
 
 // Maybe print a warning about switch labels that aren't constants.
 
 static void
diff --git a/src/pt-exp-base.h b/src/pt-exp-base.h
--- a/src/pt-exp-base.h
+++ b/src/pt-exp-base.h
@@ -37,17 +37,17 @@ class octave_variable_reference;
 // A base class for expressions.
 
 class
 tree_expression : public tree
 {
 public:
 
   tree_expression (int l = -1, int c = -1)
-    : tree (l, c), in_parens (0) { }
+    : tree (l, c), num_parens (0) { }
 
   virtual ~tree_expression (void) { }
 
   virtual bool is_constant (void) const
     { return false; }
 
   virtual bool is_matrix_constant (void) const
     { return false; }
@@ -67,34 +67,45 @@ public:
   virtual bool is_assignment_expression (void) const
     { return false; }
 
   virtual bool is_prefix_expression (void) const
     { return false; }
 
   virtual bool is_logically_true (const char *);
 
-  virtual bool is_in_parens (void) { return in_parens; }
+  virtual int paren_count (void) const
+    { return num_parens; }
 
   virtual void mark_for_possible_ans_assign (void);
 
   virtual octave_value eval (bool print = false) = 0;
 
   virtual octave_variable_reference reference (void);
 
-  virtual string oper (void) const { return "<unknown>"; }
+  virtual string oper (void) const
+    { return "<unknown>"; }
 
   virtual string original_text (void) const;
 
-  expression *mark_in_parens (void) { in_parens++; return this; }
+  tree_expression *mark_in_parens (void)
+    {
+      num_parens++;
+      return this;
+    }
 
 protected:
 
-  // Nonzero if this expression appears inside parentheses.
-  int in_parens;
+  // A count of the number of times this expression appears directly
+  // inside a set of parentheses.
+  //
+  //   (((e1)) + e2)  ==> 2 for expression e1
+  //                  ==> 1 for expression ((e1)) + e2
+  //                  ==> 0 for expression e2
+  int num_parens;
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/pt-pr-code.cc b/src/pt-pr-code.cc
--- a/src/pt-pr-code.cc
+++ b/src/pt-pr-code.cc
@@ -65,54 +65,47 @@ tree_print_code::visit_argument_list (tr
     }
 }
 
 void
 tree_print_code::visit_binary_expression (tree_binary_expression& expr)
 {
   indent ();
 
-  bool in_parens = expr.is_in_parens ();
-
-  if (in_parens)
-    os << "(";
+  print_parens (expr, "(");
 
   tree_expression *op1 = expr.lhs ();
 
   if (op1)
     op1->accept (*this);
 
   os << " " << expr.oper () << " ";
 
   tree_expression *op2 = expr.rhs ();
 
   if (op2)
     op2->accept (*this);
 
-  if (in_parens)
-    os << ")";
+  print_parens (expr, ")");
 }
 
 void
 tree_print_code::visit_break_command (tree_break_command&)
 {
   indent ();
 
   os << "break";
 }
 
 void
 tree_print_code::visit_colon_expression (tree_colon_expression& expr)
 {
   indent ();
 
-  bool in_parens = expr.is_in_parens ();
-
-  if (in_parens)
-    os << "(";
+  print_parens (expr, "(");
 
   tree_expression *op1 = expr.base ();
 
   if (op1)
     op1->accept (*this);
 
   // Stupid syntax.
 
@@ -127,18 +120,17 @@ tree_print_code::visit_colon_expression 
   tree_expression *op2 = expr.limit ();
 
   if (op2)
     {
       os << ":";
       op2->accept (*this);
     }
 
-  if (in_parens)
-    os << ")";
+  print_parens (expr, ")");
 }
 
 void
 tree_print_code::visit_continue_command (tree_continue_command&)
 {
   indent ();
 
   os << "continue";
@@ -328,26 +320,22 @@ tree_print_code::visit_octave_user_funct
   newline ();
 }
 
 void
 tree_print_code::visit_identifier (tree_identifier& id)
 {
   indent ();
 
-  bool in_parens = id.is_in_parens ();
-
-  if (in_parens)
-    os << "(";
+  print_parens (id, "(");
 
   string nm = id.name ();
   os << (nm.empty () ? string ("(empty)") : nm);
 
-  if (in_parens)
-    os << ")";
+  print_parens (id, ")");
 }
 
 void
 tree_print_code::visit_if_clause (tree_if_clause& cmd)
 {
   tree_expression *expr = cmd.condition ();
 
   if (expr)
@@ -415,67 +403,56 @@ tree_print_code::visit_if_command_list (
     }
 }
 
 void
 tree_print_code::visit_index_expression (tree_index_expression& expr)
 {
   indent ();
 
-  bool in_parens = expr.is_in_parens ();
-
-  if (in_parens)
-    os << "(";
+  print_parens (expr, "(");
 
   tree_indirect_ref *id = expr.ident ();
 
   if (id)
     id->accept (*this);
 
   tree_argument_list *list = expr.arg_list ();
 
   if (list)
     {
       os << " (";
       list->accept (*this);
       os << ")";
     }
 
-  if (in_parens)
-    os << ")";
+  print_parens (expr, ")");
 }
 
 void
 tree_print_code::visit_indirect_ref (tree_indirect_ref& expr)
 {
   indent ();
 
-  bool in_parens = expr.is_in_parens ();
-
-  if (in_parens)
-    os << "(";
+  print_parens (expr, "(");
 
   // The name of the indirect ref includes the sub-elements.
 
   string nm = expr.name ();
   os << (nm.empty () ? string ("(empty)") : nm);
 
-  if (in_parens)
-    os << ")";
+  print_parens (expr, ")");
 }
 
 void
 tree_print_code::visit_matrix (tree_matrix& lst)
 {
   indent ();
 
-  bool in_parens = lst.is_in_parens ();
-
-  if (in_parens)
-    os << "(";
+  print_parens (lst, "(");
 
   os << "[";
 
   Pix p = lst.first ();
 
   while (p)
     {
       tree_matrix_row *elt = lst (p);
@@ -488,18 +465,17 @@ tree_print_code::visit_matrix (tree_matr
 
 	  if (p)
 	    os << "; ";
 	}
     }
 
   os << "]";
 
-  if (in_parens)
-    os << ")";
+  print_parens (lst, ")");
 }
 
 void
 tree_print_code::visit_matrix_row (tree_matrix_row& lst)
 {
   Pix p = lst.first ();
 
   while (p)
@@ -519,20 +495,17 @@ tree_print_code::visit_matrix_row (tree_
 }
 
 void
 tree_print_code::visit_multi_assignment_expression
   (tree_multi_assignment_expression& expr)
 {
   indent ();
 
-  bool in_parens = expr.is_in_parens ();
-
-  if (in_parens)
-    os << "(";
+  print_parens (expr, "(");
 
   tree_return_list *lhs = expr.left_hand_side ();
 
   if (lhs)
     {
       int len = lhs->length ();
 
       if (len > 1)
@@ -546,18 +519,17 @@ tree_print_code::visit_multi_assignment_
 
   os << " = ";
 
   tree_multi_val_ret *rhs = expr.right_hand_side ();
 
   if (rhs)
     rhs->accept (*this);
 
-  if (in_parens)
-    os << ")";
+  print_parens (expr, ")");
 }
 
 void
 tree_print_code::visit_no_op_command (tree_no_op_command& cmd)
 {
   indent ();
 
   os << cmd.original_command ();
@@ -569,25 +541,21 @@ tree_print_code::visit_oct_obj (tree_oct
   ::error ("visit_oct_obj: internal error");
 }
 
 void
 tree_print_code::visit_constant (tree_constant& val)
 {
   indent ();
 
-  bool in_parens = val.is_in_parens ();
-
-  if (in_parens)
-    os << "(";
+  print_parens (val, "(");
 
   val.print_raw (os, true, print_original_text);
 
-  if (in_parens)
-    os << ")";
+  print_parens (val, ")");
 }
 
 void
 tree_print_code::visit_parameter_list (tree_parameter_list& lst)
 {
   Pix p = lst.first ();
 
   while (p)
@@ -682,51 +650,43 @@ tree_print_code::visit_plot_range (plot_
   os << "]";
 }
 
 void
 tree_print_code::visit_postfix_expression (tree_postfix_expression& expr)
 {
   indent ();
 
-  bool in_parens = expr.is_in_parens ();
-
-  if (in_parens)
-    os << "(";
+  print_parens (expr, "(");
 
   tree_expression *e = expr.operand ();
 
   if (e)
     e->accept (*this);
 
   os << expr.oper ();
 
-  if (in_parens)
-    os << ")";
+  print_parens (expr, ")");
 }
 
 void
 tree_print_code::visit_prefix_expression (tree_prefix_expression& expr)
 {
   indent ();
 
-  bool in_parens = expr.is_in_parens ();
-
-  if (in_parens)
-    os << "(";
+  print_parens (expr, "(");
 
   os << expr.oper ();
 
   tree_expression *e = expr.operand ();
 
   if (e)
     e->accept (*this);
 
-  if (in_parens)
-    os << ")";
+  print_parens (expr, ")");
 }
 
 void
 tree_print_code::visit_return_command (tree_return_command&)
 {
   indent ();
 
   os << "return";
@@ -754,20 +714,17 @@ tree_print_code::visit_return_list (tree
 }
 
 void
 tree_print_code::visit_simple_assignment_expression
   (tree_simple_assignment_expression& expr)
 {
   indent ();
 
-  bool in_parens = expr.is_in_parens ();
-
-  if (in_parens)
-    os << "(";
+  print_parens (expr, "(");
 
   if (! expr.is_ans_assign ())
     {
       tree_indirect_ref *lhs = expr.left_hand_side ();
 
       if (lhs)
 	lhs->accept (*this);
 
@@ -783,18 +740,17 @@ tree_print_code::visit_simple_assignment
       os << " " << expr.oper () << " ";
     }
 
   tree_expression *rhs = expr.right_hand_side ();
 
   if (rhs)
     rhs->accept (*this);
 
-  if (in_parens)
-    os << ")";
+  print_parens (expr, ")");
 }
 
 void
 tree_print_code::visit_statement (tree_statement& stmt)
 {
   tree_command *cmd = stmt.command ();
 
   if (cmd)
@@ -1153,13 +1109,22 @@ tree_print_code::newline (void)
 
 void
 tree_print_code::reset (void)
 {
   beginning_of_line = true;
   curr_print_indent_level = 0;
 }
 
+void
+tree_print_code::print_parens (const tree_expression& expr, const char *txt)
+{
+  int n = expr.paren_count ();
+
+  for (int i = 0; i < n; i++)
+    os << txt;
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/pt-pr-code.h b/src/pt-pr-code.h
--- a/src/pt-pr-code.h
+++ b/src/pt-pr-code.h
@@ -26,16 +26,18 @@ Software Foundation, 59 Temple Place - S
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
 #include <string>
 
 #include "pt-walk.h"
 
+class tree_expression;
+
 // How to print the code that the parse trees represent.
 
 class
 tree_print_code : public tree_walker
 {
 public:
 
   tree_print_code (ostream& os_arg, const string& pfx = string (),
@@ -155,16 +157,18 @@ private:
     { curr_print_indent_level -= 2; }
 
   void newline (void);
 
   void indent (void);
 
   void reset (void);
 
+  void print_parens (const tree_expression& expr, const char *txt);
+
   // Must create with an output stream!
 
   tree_print_code (void);
 
   // No copying!
 
   tree_print_code (const tree_print_code&);
 
