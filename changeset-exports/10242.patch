# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1265017472 -3600
#      Mon Feb 01 10:44:32 2010 +0100
# Node ID 4acae5e467386d06ff2b8adc84d5faab380fc14d
# Parent  a277ba5da4dc007b8b51eb4d6e785ca12495a420
warn when core functions are shadowed

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,18 @@
+2010-02-01  Jaroslav Hajek  <highegg@gmail.com>
+
+	* load-path.cc (load_path::add_to_fcn_map): Warn when core library or
+	built-in functions are being shadowed. 
+	(load_path::do_add): Pass at_end to add_to_fcn_map, add_to_method_map.
+	Don't abort when "." not yet included.
+	(load_path::do_clear): Don't append "." here.
+	(load_path::do_set): Always prepend "." here.
+	(load_path::initialize): Don't explicitly include "." here.
+
 2010-02-02  John W. Eaton  <jwe@octave.org>
 
 	* DLD-FUNCTIONS/filter.cc (filter (MArray<T>&, MArray<T>&,
 	MArrayN<T>&, MArrayN<T>&, int)): Return early if X is empty.
 
 2010-02-02  John W. Eaton  <jwe@octave.org>
 
 	* cutils.c: Include <sys/times.h>, not "systime.h".
diff --git a/src/load-path.cc b/src/load-path.cc
--- a/src/load-path.cc
+++ b/src/load-path.cc
@@ -495,36 +495,38 @@ load_path::do_initialize (bool set_initi
       maybe_add_path_elts (sys_path, Vfcn_file_dir);
     }
 
   std::string tpath = load_path::command_line_path;
 
   if (tpath.empty ())
     tpath = octave_env::getenv ("OCTAVE_PATH");
 
-  std::string xpath = ".";
+  std::string xpath;
 
   if (! tpath.empty ())
-    xpath += dir_path::path_sep_str () + tpath;
-
-  if (! sys_path.empty ())
-    xpath += dir_path::path_sep_str () + sys_path;
+    {
+      xpath = tpath;
+
+      if (! sys_path.empty ())
+        xpath += dir_path::path_sep_str () + sys_path;
+    }
+  else
+    xpath = sys_path;
 
   do_set (xpath, false);
 }
 
 void
 load_path::do_clear (void)
 {
   dir_info_list.clear ();
   fcn_map.clear ();
   private_fcn_map.clear ();
   method_map.clear ();
-
-  do_append (".", false);
 }
 
 static std::list<std::string>
 split_path (const std::string& p)
 {
   std::list<std::string> retval;
 
   size_t beg = 0;
@@ -579,16 +581,19 @@ load_path::do_set (const std::string& p,
 
   for (dir_info_list_iterator i = dir_info_list.begin ();
        i != dir_info_list.end ();
        i++)
     {
       if (add_hook)
 	add_hook (i->dir_name);
     }
+
+  // Always prepend current directory.
+  do_prepend (".", warn);
 }
 
 void
 load_path::do_append (const std::string& dir, bool warn)
 {
   if (! dir.empty ())
     do_add (dir, true, warn);
 }
@@ -627,21 +632,21 @@ load_path::do_add (const std::string& di
 
 	      if (! error_state)
 		{
 		  if (at_end)
 		    dir_info_list.push_back (di);
 		  else
 		    dir_info_list.push_front (di);
 
-		  add_to_fcn_map (di, true);
+		  add_to_fcn_map (di, at_end);
 
 		  add_to_private_fcn_map (di);
 
-		  add_to_method_map (di, true);
+		  add_to_method_map (di, at_end);
 
 		  if (add_hook)
 		    add_hook (dir);
 		}
 	    }
 	  else if (warn)
 	    warning ("addpath: %s: not a directory", dir_arg.c_str ());
 	}
@@ -653,18 +658,16 @@ load_path::do_add (const std::string& di
     }
 
   // FIXME -- is there a better way to do this?
 
   i = find_dir_info (".");
 
   if (i != dir_info_list.end ())
     move (i, false);
-  else
-    panic_impossible ();
 }
 
 void
 load_path::remove_fcn_map (const std::string& dir,
 			   const string_vector& fcn_files)
 {
   octave_idx_type len = fcn_files.length ();
 
@@ -1667,17 +1670,39 @@ load_path::add_to_fcn_map (const dir_inf
 
       if (p == file_info_list.end ())
 	{
 	  file_info fi (dir_name, t);
 
 	  if (at_end)
 	    file_info_list.push_back (fi);
 	  else
-	    file_info_list.push_front (fi);
+            {
+              // Warn if a built-in or library function is being shadowed.
+              if (! file_info_list.empty ())
+                {
+                  file_info& old = file_info_list.front ();
+                  if (sys_path.find (old.dir_name) != std::string::npos)
+                    {
+                      std::string fcn_path = file_ops::concat (dir_name, fname);
+                      warning_with_id ("Octave:shadowed-function",
+                                       "function %s shadows a core library function", 
+                                       fcn_path.c_str ());
+                    }
+                }
+              else if (symbol_table::is_built_in_function_name (base))
+                {
+                  std::string fcn_path = file_ops::concat (dir_name, fname);
+                  warning_with_id ("Octave:shadowed-function",
+                                   "function %s shadows a built-in function", 
+                                   fcn_path.c_str ());
+                }
+
+              file_info_list.push_front (fi);
+            }
 	}
       else
 	{
 	  file_info& fi = *p;
 
 	  fi.types |= t;
 	}
     }
