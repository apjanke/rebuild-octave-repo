# HG changeset patch
# User jwe
# Date 1165616104 0
#      Fri Dec 08 22:15:04 2006 +0000
# Node ID 4685a6a76229756f7330024d8f307313c6823cb1
# Parent  0a259ae4375e0569d7d92ec8ff72ce3618c1898e
[project @ 2006-12-08 22:15:03 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,26 @@
+2006-12-08  John W. Eaton  <jwe@octave.org>
+
+	* ov-intx.h (OCTAVE_VALUE_INT_MATRIX_T::array_value, 
+	OCTAVE_VALUE_INT_MATRIX_T::complex_array_value, 
+	OCTAVE_VALUE_INT_MATRIX_T::bool_array_value, 
+	OCTAVE_VALUE_INT_MATRIX_T::char_array_value):
+	Use fortran_vec to avoid expensive indexing operator.
+
+2006-12-08  David Bateman  <dbateman@free.fr>
+
+	* ov-intx.h (OCTAVE_VALUE_INT_SCALAR_T::matrix_value,
+	OCTAVE_VALUE_INT_SCALAR_T::complex_matrix_value, 
+	OCTAVE_VALUE_INT_MATRIX_T::matrix_value, 
+	OCTAVE_VALUE_INT_MATRIX_T::comlex_matrix_value): New functions.
+	(OCTAVE_VALUE_INT_MATRIX_T::array_value, 
+	OCTAVE_VALUE_INT_MATRIX_T::comlex_array_value):
+	Use octave_idx_type instead of int for indexing.
+
 2006-12-04  David Bateman  <dbateman@free.fr>
 
 	* xpow.cc (xpow (const Matrix&, double)): Add matrix type probing
         to matrix inverse.
         (xpow (const ComplexMatrix&, double)): ditto.
         * DLD-FUNCTIONS/inv.cc (Finv): Add matrix type probing.
 
 2006-12-06  John W. Eaton  <jwe@octave.org>
diff --git a/src/ov-intx.h b/src/ov-intx.h
--- a/src/ov-intx.h
+++ b/src/ov-intx.h
@@ -100,61 +100,101 @@ public:
 	gripe_invalid_conversion (type_name (), "real scalar");
 
       return retval;
       
     }
 
   double scalar_value (bool = false) const { return double_value (); }
 
+  Matrix
+  matrix_value (bool = false) const
+    {
+      Matrix retval;
+      dim_vector dv = dims ();
+      if (dv.length () > 2)
+	error ("invalid conversion of %s to Matrix", type_name().c_str ());
+      else
+	{
+	  retval = Matrix (dv(0), dv(1));
+	  double *vec = retval.fortran_vec ();
+	  octave_idx_type nel = matrix.numel ();
+	  for (octave_idx_type i = 0; i < nel; i++)
+	    vec[i] = double (matrix(i));
+	}
+      return retval;
+    }
+
+  ComplexMatrix
+  complex_matrix_value (bool = false) const
+    {
+      ComplexMatrix retval;
+      dim_vector dv = dims();
+      if (dv.length () > 2)
+	error ("invalid conversion of %s to Matrix", type_name().c_str ());
+      else
+	{
+	  retval = ComplexMatrix (dv(0), dv(1));
+	  Complex *vec = retval.fortran_vec ();
+	  octave_idx_type nel = matrix.numel ();
+	  for (octave_idx_type i = 0; i < nel; i++)
+	    vec[i] = Complex (double (matrix(i)));
+	}
+      return retval;
+    }
+
   NDArray
   array_value (bool = false) const
     { 
       NDArray retval (matrix.dims ()); 
-      int nel = matrix.numel ();
-      for (int i = 0; i < nel; i++)
-        retval(i) = double (matrix(i));
+      double *vec = retval.fortran_vec ();
+      octave_idx_type nel = matrix.numel ();
+      for (octave_idx_type i = 0; i < nel; i++)
+        vec[i] = double (matrix(i));
       return retval;
     }
 
   ComplexNDArray
   complex_array_value (bool = false) const
     { 
       ComplexNDArray retval (matrix.dims ()); 
-      int nel = matrix.numel ();
-      for (int i = 0; i < nel; i++)
-        retval(i) = Complex (double (matrix(i)));
+      Complex *vec = retval.fortran_vec ();
+      octave_idx_type nel = matrix.numel ();
+      for (octave_idx_type i = 0; i < nel; i++)
+        vec[i] = Complex (double (matrix(i)));
       return retval;
     }
 
   boolNDArray
   bool_array_value (bool warn = false) const
   {
     boolNDArray retval (dims ());
 
     octave_idx_type nel = numel ();
 
     if (warn && matrix.any_element_not_one_or_zero ())
       gripe_logical_conversion ();
 
+    bool *vec = retval.fortran_vec ();
     for (octave_idx_type i = 0; i < nel; i++)
-      retval(i) = static_cast<bool>(matrix(i));
+      vec[i] = static_cast<bool> (matrix(i));
 
     return retval;
   }
 
   charNDArray
   char_array_value (bool = false) const
   {
     charNDArray retval (dims ());
 
     octave_idx_type nel = numel ();
   
+    char *vec = retval.fortran_vec ();
     for (octave_idx_type i = 0; i < nel; i++)
-      retval(i) = static_cast<char>(matrix(i));
+      vec[i] = static_cast<char> (matrix(i));
 
     return retval;
   }
 
   void increment (void) { matrix += 1; }
 
   void decrement (void) { matrix -= 1; }
 
@@ -312,16 +352,34 @@ public:
 	  return retval;
 	}
     }
 
   double double_value (bool = false) const { return double (scalar); }
 
   double scalar_value (bool = false) const { return double (scalar); }
 
+
+  Matrix
+  matrix_value (bool = false) const
+    {
+      Matrix retval (1, 1);
+      retval(0,0) = double (scalar);
+      return retval;
+    }
+
+  ComplexMatrix
+  complex_matrix_value (bool = false) const
+    {
+      ComplexMatrix retval (1, 1);
+      retval(0,0) = Complex (double (scalar));
+      return retval;
+    }
+
+
   NDArray
   array_value (bool = false) const
     { 
       NDArray retval (dim_vector (1, 1)); 
       retval(0) = double (scalar);
       return retval;
     }
 
@@ -336,26 +394,26 @@ public:
   boolNDArray
   bool_array_value (bool warn = false) const
   {
     boolNDArray retval (dim_vector (1, 1));
 
     if (warn && scalar != 0.0 && scalar != 1.0)
       gripe_logical_conversion ();
 
-    retval(0) = static_cast<bool>(scalar);
+    retval(0) = static_cast<bool> (scalar);
 
     return retval;
   }
 
   charNDArray
   char_array_value (bool = false) const
   {
     charNDArray retval (dim_vector (1, 1));
-    retval(0) = static_cast<char>(scalar);
+    retval(0) = static_cast<char> (scalar);
     return retval;
   }
 
   void increment (void) { scalar += 1; }
 
   void decrement (void) { scalar -= 1; }
 
   idx_vector index_vector (void) const { return idx_vector (scalar); }
