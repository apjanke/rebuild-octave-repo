# HG changeset patch
# User Rik <rik@octave.org>
# Date 1496788782 25200
#      Tue Jun 06 15:39:42 2017 -0700
# Node ID 613934236291a7a9e26bf6c16df85efe08d40afc
# Parent  c8daadf7543bc356099139d1bb559eaea74742fa
deconv.m: Overhaul function.

* deconv.m: Rewrite docstring to have both calling forms of function and to use
@var macro.  Use variable names in error() statement.  Use transpose operator
built in to interpreter rather than permute function for performance.  Only
calculate second output argument if required.  Add more input validation BIST
tests.

diff --git a/scripts/polynomial/deconv.m b/scripts/polynomial/deconv.m
--- a/scripts/polynomial/deconv.m
+++ b/scripts/polynomial/deconv.m
@@ -12,21 +12,22 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ## GNU General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {} {} deconv (@var{y}, @var{a})
-## Deconvolve two vectors.
+## @deftypefn  {} {@var{b} =} deconv (@var{y}, @var{a})
+## @deftypefnx {} {[@var{b}, @var{r}] =} deconv (@var{y}, @var{a})
+## Deconvolve two vectors (polynomial division).
 ##
-## @code{[b, r] = deconv (y, a)} solves for @var{b} and @var{r} such that
-## @code{y = conv (a, b) + r}.
+## @code{[@var{b}, @var{r}] = deconv (@var{y}, @var{a})} solves for @var{b} and
+## @var{r} such that @code{@var{y} = conv (@var{a}, @var{b}) + @var{r}}.
 ##
 ## If @var{y} and @var{a} are polynomial coefficient vectors, @var{b} will
 ## contain the coefficients of the polynomial quotient and @var{r} will be
 ## a remainder polynomial of lowest order.
 ## @seealso{conv, residue}
 ## @end deftypefn
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
@@ -35,52 +36,54 @@
 
 function [b, r] = deconv (y, a)
 
   if (nargin != 2)
     print_usage ();
   endif
 
   if (! (isvector (y) && isvector (a)))
-    error ("deconv: both arguments must be vectors");
+    error ("deconv: Y and A must be vectors");
+  endif
+
+  ## Ensure A is oriented as Y.
+  if ((isrow (y) && iscolumn (a)) || (iscolumn (y) && isrow (a))) 
+    a = a.';
   endif
 
   la = length (a);
   ly = length (y);
 
   lb = ly - la + 1;
 
-  ## Ensure A is oriented as Y.
-  if (diff (size (y)(1:2)) * diff (size (a)(1:2)) < 0)
-    a = permute (a, [2, 1]);
-  endif
-
   if (ly > la)
     x = zeros (size (y) - size (a) + 1);
     x(1) = 1;
     b = filter (y, a, x);
   elseif (ly == la)
     b = filter (y, a, 1);
   else
     b = 0;
   endif
 
-  lc = la + length (b) - 1;
-  if (ly == lc)
-    r = y - conv (a, b);
-  else
-    ## Respect the orientation of Y"
-    if (rows (y) <= columns (y))
-      r = [(zeros (1, lc - ly)), y] - conv (a, b);
+  if (isargout (2))
+    lc = la + length (b) - 1;
+    if (ly == lc)
+      r = y - conv (a, b);
     else
-      r = [(zeros (lc - ly, 1)); y] - conv (a, b);
-    endif
-    if (ly < la)
-      ## Trim the remainder is equal to the length of Y.
-      r = r(end-(length(y)-1):end);
+      ## Respect the orientation of Y.
+      if (rows (y) <= columns (y))
+        r = [(zeros (1, lc - ly)), y] - conv (a, b);
+      else
+        r = [(zeros (lc - ly, 1)); y] - conv (a, b);
+      endif
+      if (ly < la)
+        ## Trim the remainder to be the length of Y.
+        r = r(end-(length(y)-1):end);
+      endif
     endif
   endif
 
 endfunction
 
 
 %!test
 %! [b, r] = deconv ([3, 6, 9, 9], [1, 2, 3]);
@@ -104,10 +107,13 @@ endfunction
 
 %!test
 %! [b, r] = deconv ([3; 6], [1, 2, 3]);
 %! assert (b, 0);
 %! assert (r, [3; 6]);
 
 %!assert (deconv ((1:3)',[1, 1]), [1; 1])
 
-%!error [b, r] = deconv ([3, 6], [1, 2; 3, 4])
-%!error [b, r] = deconv ([3, 6; 1, 2], [1, 2, 3])
+## Test input validation
+%!error deconv (1)
+%!error deconv (1,2,3)
+%!error <Y .* must be vector> deconv ([3, 6], [1, 2; 3, 4])
+%!error <A must be vector> deconv ([3, 6], [1, 2; 3, 4])
