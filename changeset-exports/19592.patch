# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1421765741 18000
#      Tue Jan 20 09:55:41 2015 -0500
# Node ID 37d37297acf8d331d1ce23286d4b93fe6bc81dc2
# Parent  6b09dd57652111fb925eddaeb82199873537fffc
# Parent  6d75f1683ce822a2fae79be0d3086bb801ec1bcf
maint: Periodic merge of gui-release to default.

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -2781,16 +2781,26 @@ QT_CPPFLAGS=
 QT_LDFLAGS=
 QT_LIBS=
 win32_terminal=no
 build_gui=yes
 AC_ARG_ENABLE([gui],
   [AS_HELP_STRING([--disable-gui], [don't build the GUI])],
   [if test "$enableval" = no; then build_gui=no; fi], [])
 
+if test -z "$OPENGL_LIBS"; then
+  build_gui=no
+  if test $check_opengl = yes; then
+    warn_gui="OpenGL libs (GL and GLU) not found -- disabling GUI"
+  else
+    warn_gui="--without-opengl was specified -- disabling GUI"
+  fi
+  OCTAVE_CONFIGURE_WARNING([warn_gui])
+fi
+
 if test $build_gui = yes; then
 
   warn_gui=""
   ## Check for Qt libraries
   QT_MODULES="QtCore QtGui QtNetwork QtOpenGL"
   PKG_CHECK_MODULES(QT, [$QT_MODULES],
     [],
     [warn_gui="Qt libraries not found -- disabling GUI"
diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -1903,16 +1903,17 @@ file_editor_tab::notice_settings (const 
         (settings->value ("editor/indent_width",2).toInt ());
 
   _edit_area->setTabWidth
         (settings->value ("editor/tab_width",2).toInt ());
 
   _edit_area->SendScintilla (QsciScintillaBase::SCI_SETHSCROLLBAR,
         settings->value ("editor/show_hscroll_bar",true).toBool ());
   _edit_area->SendScintilla (QsciScintillaBase::SCI_SETSCROLLWIDTH,-1);
+  _edit_area->SendScintilla (QsciScintillaBase::SCI_SETSCROLLWIDTHTRACKING,true);
 
   _long_title = settings->value ("editor/longWindowTitle", false).toBool ();
   update_window_title (_edit_area->isModified ());
 
   _edit_area->setEdgeColumn (
               settings->value ("editor/long_line_column",80).toInt ());
   if (settings->value ("editor/long_line_marker",true).toBool ())
     _edit_area->setEdgeMode (QsciScintilla::EdgeLine);
diff --git a/libgui/src/m-editor/find-dialog.cc b/libgui/src/m-editor/find-dialog.cc
--- a/libgui/src/m-editor/find-dialog.cc
+++ b/libgui/src/m-editor/find-dialog.cc
@@ -286,18 +286,19 @@ find_dialog::find (bool forward)
               col  = _edit_area->text (line).length () - 1;
               if (col == -1)
                 col = 0;
             }
         }
       else if (! do_forward)
         {
            // search from previous character if search backward
+           _edit_area->getCursorPosition (&line,&col);
            int currpos = _edit_area->positionFromLineIndex(line,col);
-           if(currpos > 0) currpos --;
+           if (currpos > 0) currpos --;
            _edit_area->lineIndexFromPosition(currpos, &line,&col);
         }
     }
 
   if (_edit_area)
     {
       if (_edit_area->hasSelectedText ()
           && _search_selection_check_box->isChecked ())
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -169,21 +169,23 @@ main_window::focus_changed (QWidget *, Q
   int count = 0;                // fallback to prevent endless loop
 
   while (w_new && w_new != _main_tool_bar && count < 100)
     {
       dock = qobject_cast <octave_dock_widget *> (w_new);
       if (dock)
         break; // it is a QDockWidget ==> exit loop
 
+#ifdef HAVE_QSCINTILLA
       if (qobject_cast <octave_qscintilla *> (w_new))
         {
           dock = static_cast <octave_dock_widget *> (editor_window);
           break; // it is the editor window ==> exit loop
         }
+#endif
 
       w_new = qobject_cast <QWidget *> (w_new->previousInFocusChain ());
       if (w_new == start)
         break; // we have arrived where we began ==> exit loop
 
       count++;
     }
 
@@ -745,16 +747,19 @@ main_window::notice_settings (const QSet
   else
     status_bar->hide ();
 
   _prevent_readline_conflicts =
     settings->value ("shortcuts/prevent_readline_conflicts", true).toBool ();
   configure_shortcuts ();
   set_global_shortcuts (command_window_has_focus ());
 
+  _suppress_dbg_location =
+        ! settings->value ("terminal/print_debug_location", false).toBool ();
+
   resource_manager::update_network_settings ();
 }
 
 
 void
 main_window::prepare_to_exit (void)
 {
   write_settings ();
@@ -1074,17 +1079,19 @@ main_window::write_settings (void)
 // Connecting the signals emitted when the visibility of a widget changes.
 // This has to be done after the window is shown (see octave-gui.cc)
 void
 main_window::connect_visibility_changed (void)
 {
   foreach (octave_dock_widget *widget, dock_widget_list ())
     widget->connect_visibility_changed ();
 
+#ifdef HAVE_QSCINTILLA
   editor_window->enable_menu_shortcuts (false);
+#endif
 }
 
 void
 main_window::copyClipboard (void)
 {
   if (_current_directory_combo_box->hasFocus ())
     {
       QLineEdit * edit = _current_directory_combo_box->lineEdit ();
@@ -2025,16 +2032,17 @@ main_window::execute_command_callback ()
         repost = true;          // not empty, repost at end
       _cmd_queue_mutex.unlock ();
 
       command_editor::replace_line (command);
 
       command_editor::redisplay ();
       // We are executing inside the command editor event loop.  Force
       // the current line to be returned for processing.
+      Fdb_next_breakpoint_quiet (ovl (_suppress_dbg_location));
       command_editor::accept_line ();
     }
 
   if (repost)  // queue not empty, so repost event for further processing
     octave_link::post_event (this, &main_window::execute_command_callback);
 
 }
 
@@ -2081,29 +2089,29 @@ main_window::execute_debug_callback ()
       if (_dbg_queue->isEmpty ())
         _dbg_processing.release ();  // cmd queue empty, processing will stop
       else
         repost = true;          // not empty, repost at end
       _dbg_queue_mutex.unlock ();
 
       if (debug == "step")
         {
-          Fdb_next_breakpoint_quiet ();
+          Fdb_next_breakpoint_quiet (ovl (_suppress_dbg_location));
           Fdbstep ();
         }
       else if (debug == "cont")
         {
-          Fdb_next_breakpoint_quiet ();
+          Fdb_next_breakpoint_quiet (ovl (_suppress_dbg_location));
           Fdbcont ();
         }
       else if (debug == "quit")
         Fdbquit ();
       else
         {
-          Fdb_next_breakpoint_quiet ();
+          Fdb_next_breakpoint_quiet (ovl (_suppress_dbg_location));
           Fdbstep (ovl (debug.toStdString ()));
         }
 
       command_editor::interrupt (true);
     }
 
   if (repost)  // queue not empty, so repost event for further processing
     octave_link::post_event (this, &main_window::execute_debug_callback);
@@ -2344,14 +2352,16 @@ main_window::confirm_exit_octave ()
          tr ("Are you sure you want to exit Octave?"),
           QMessageBox::Ok | QMessageBox::Cancel, QMessageBox::Ok);
 
       if (ans !=  QMessageBox::Ok)
         return false;
 
     }
 
+#ifdef HAVE_QSCINTILLA
   closenow = editor_window->check_closing (1);  // 1: exit request from gui
+#endif
 
   return closenow;
 }
 
 
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -399,16 +399,17 @@ private:
   QMutex       _cmd_queue_mutex;
 
   // semaphore to synchronize debug signals and related callbacks
   QStringList *_dbg_queue;
   QSemaphore   _dbg_processing;
   QMutex       _dbg_queue_mutex;
 
   bool _prevent_readline_conflicts;
+  bool _suppress_dbg_location;
 };
 
 class news_reader : public QObject
 {
   Q_OBJECT
 
 public:
 
diff --git a/libgui/src/settings-dialog.cc b/libgui/src/settings-dialog.cc
--- a/libgui/src/settings-dialog.cc
+++ b/libgui/src/settings-dialog.cc
@@ -251,16 +251,41 @@ settings_dialog::settings_dialog (QWidge
 
   // terminal
   ui->terminal_fontName->setCurrentFont (QFont (
     settings->value ("terminal/fontName","Courier New").toString ()));
   ui->terminal_fontSize->setValue (
     settings->value ("terminal/fontSize", 10).toInt ());
   ui->terminal_history_buffer->setValue (
      settings->value ("terminal/history_buffer",1000).toInt ());
+  ui->terminal_cursorBlinking->setChecked (
+    settings->value ("terminal/cursorBlinking",true).toBool ());
+  ui->terminal_cursorUseForegroundColor->setChecked (
+    settings->value ("terminal/cursorUseForegroundColor",true).toBool ());
+  ui->terminal_focus_command->setChecked (
+    settings->value ("terminal/focus_after_command",false).toBool ());
+  ui->terminal_print_dbg_location->setChecked (
+    settings->value ("terminal/print_debug_location",false).toBool ());
+
+  QString cursorType
+    = settings->value ("terminal/cursorType", "ibeam").toString ();
+
+  QStringList items;
+  items << QString ("0") << QString ("1") << QString ("2");
+  ui->terminal_cursorType->addItems (items);
+  ui->terminal_cursorType->setItemText (0, tr ("IBeam Cursor"));
+  ui->terminal_cursorType->setItemText (1, tr ("Block Cursor"));
+  ui->terminal_cursorType->setItemText (2, tr ("Underline Cursor"));
+
+  if (cursorType == "ibeam")
+    ui->terminal_cursorType->setCurrentIndex (0);
+  else if (cursorType == "block")
+    ui->terminal_cursorType->setCurrentIndex (1);
+  else if (cursorType == "underline")
+    ui->terminal_cursorType->setCurrentIndex (2);
 
   // file browser
   ui->showFileSize->setChecked (
     settings->value ("filesdockwidget/showFileSize", false).toBool ());
   ui->showFileType->setChecked (
     settings->value ("filesdockwidget/showFileType", false).toBool ());
   ui->showLastModified->setChecked (
     settings->value ("filesdockwidget/showLastModified",false).toBool ());
@@ -279,39 +304,16 @@ settings_dialog::settings_dialog (QWidge
   connect (ui->pb_file_browser_dir, SIGNAL (pressed ()),
            this, SLOT (get_file_browser_dir ()));
 
   ui->checkbox_allow_web_connect->setChecked (
     settings->value ("news/allow_web_connection",false).toBool ());
   ui->useProxyServer->setChecked (
     settings->value ("useProxyServer", false).toBool ());
   ui->proxyHostName->setText (settings->value ("proxyHostName").toString ());
-  ui->terminal_cursorBlinking->setChecked (
-    settings->value ("terminal/cursorBlinking",true).toBool ());
-  ui->terminal_cursorUseForegroundColor->setChecked (
-    settings->value ("terminal/cursorUseForegroundColor",true).toBool ());
-  ui->terminal_focus_command->setChecked (
-    settings->value ("terminal/focus_after_command",false).toBool ());
-
-  QString cursorType
-    = settings->value ("terminal/cursorType", "ibeam").toString ();
-
-  QStringList items;
-  items << QString ("0") << QString ("1") << QString ("2");
-  ui->terminal_cursorType->addItems (items);
-  ui->terminal_cursorType->setItemText (0, tr ("IBeam Cursor"));
-  ui->terminal_cursorType->setItemText (1, tr ("Block Cursor"));
-  ui->terminal_cursorType->setItemText (2, tr ("Underline Cursor"));
-
-  if (cursorType == "ibeam")
-    ui->terminal_cursorType->setCurrentIndex (0);
-  else if (cursorType == "block")
-    ui->terminal_cursorType->setCurrentIndex (1);
-  else if (cursorType == "underline")
-    ui->terminal_cursorType->setCurrentIndex (2);
 
   int currentIndex = 0;
   QString proxyTypeString = settings->value ("proxyType").toString ();
   while ((currentIndex < ui->proxyType->count ())
           && (ui->proxyType->currentText () != proxyTypeString))
     {
       currentIndex++;
       ui->proxyType->setCurrentIndex (currentIndex);
@@ -743,16 +745,18 @@ settings_dialog::write_changed_settings 
   settings->setValue ("proxyUserName", ui->proxyUserName->text ());
   settings->setValue ("proxyPassword", ui->proxyPassword->text ());
   settings->setValue ("terminal/cursorBlinking",
                       ui->terminal_cursorBlinking->isChecked ());
   settings->setValue ("terminal/cursorUseForegroundColor",
                       ui->terminal_cursorUseForegroundColor->isChecked ());
   settings->setValue ("terminal/focus_after_command",
                       ui->terminal_focus_command->isChecked ());
+  settings->setValue ("terminal/print_debug_location",
+                      ui->terminal_print_dbg_location->isChecked ());
   settings->setValue ("terminal/history_buffer",
                       ui->terminal_history_buffer->value ());
 
   // the cursor
   QString cursorType;
   switch (ui->terminal_cursorType->currentIndex ())
     {
     case 0: cursorType = "ibeam"; break;
diff --git a/libgui/src/settings-dialog.ui b/libgui/src/settings-dialog.ui
--- a/libgui/src/settings-dialog.ui
+++ b/libgui/src/settings-dialog.ui
@@ -27,17 +27,17 @@
     <widget class="QTabWidget" name="tabWidget">
      <property name="minimumSize">
       <size>
        <width>0</width>
        <height>0</height>
       </size>
      </property>
      <property name="currentIndex">
-      <number>1</number>
+      <number>3</number>
      </property>
      <widget class="QWidget" name="tab_general">
       <property name="enabled">
        <bool>true</bool>
       </property>
       <attribute name="title">
        <string>General</string>
       </attribute>
@@ -1523,16 +1523,34 @@
                    <height>20</height>
                   </size>
                  </property>
                 </spacer>
                </item>
               </layout>
              </item>
              <item>
+              <layout class="QGridLayout" name="gridLayout_15">
+               <item row="0" column="0">
+                <widget class="QCheckBox" name="terminal_focus_command">
+                 <property name="text">
+                  <string>Set focus to terminal when running a command from within another widget</string>
+                 </property>
+                </widget>
+               </item>
+               <item row="1" column="0">
+                <widget class="QCheckBox" name="terminal_print_dbg_location">
+                 <property name="text">
+                  <string>Print debug location in terminal window in addition to the marker in the editor</string>
+                 </property>
+                </widget>
+               </item>
+              </layout>
+             </item>
+             <item>
               <widget class="Line" name="line_7">
                <property name="orientation">
                 <enum>Qt::Horizontal</enum>
                </property>
               </widget>
              </item>
              <item>
               <widget class="QGroupBox" name="terminal_colors_box">
@@ -1556,23 +1574,16 @@
                 </size>
                </property>
                <property name="orientation">
                 <enum>Qt::Horizontal</enum>
                </property>
               </widget>
              </item>
              <item>
-              <widget class="QCheckBox" name="terminal_focus_command">
-               <property name="text">
-                <string>Set focus to terminal when running a command from within another widget</string>
-               </property>
-              </widget>
-             </item>
-             <item>
               <widget class="Line" name="line_6">
                <property name="orientation">
                 <enum>Qt::Horizontal</enum>
                </property>
               </widget>
              </item>
             </layout>
            </item>
