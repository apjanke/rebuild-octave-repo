# HG changeset patch
# User Rik <rik@octave.org>
# Date 1418773837 28800
#      Tue Dec 16 15:50:37 2014 -0800
# Node ID 86e69f51328d437830b5098dafab3b044261a5d5
# Parent  e723e93ca2a06b958c836d121494473d41965728
genpropdoc.m: Use two spaces after period at start of sentence.

* genpropdoc.m: Use two spaces after period at start of sentence.

diff --git a/doc/interpreter/genpropdoc.m b/doc/interpreter/genpropdoc.m
--- a/doc/interpreter/genpropdoc.m
+++ b/doc/interpreter/genpropdoc.m
@@ -17,17 +17,17 @@
 ## -*- texinfo -*- 
 ## @deftypefn {Function File} {@var{retval} =} genpropdoc (@var{OBJNAME}, @var{FILENAME})
 ##
 ## Print FILENAME texinfo source file associated to OBJNAME objects.
 ## This function is meant to be run for generating octave
 ## documentation (see doc/interpreter/graphics_properties.mk).
 ##
 ## All the hard coded documentation is written in getdoc
-## function. See the comments in getdoc bellow for instruction on how
+## function.  See the comments in getdoc bellow for instruction on how
 ## to document a graphics property.
 ## 
 ## @seealso{}
 ## @end deftypefn
 
 function genpropdoc (objname, fname)  
   objnames = {"root", "figure", "axes", "line", ...
               "text", "image", "patch", "surface"};
@@ -49,41 +49,41 @@ function genpropdoc (objname, fname)
   if (fid < 0)
     error ("genpropdoc: couldn't open %s.", fname);
   endif
   
   fprintf (fid, str);
   fclose (fid);
 endfunction
 
-function  s = getdoc (objname, field, base)
+function s = getdoc (objname, field, base)
   ## Properties are represented by a struct with fields :
   ## 
   ## -"doc": string to be printed verbatim after being expanded
-  ##   through expand_doc function. Special keywords are:
+  ##   through expand_doc function.  Special keywords are:
   ##   "__objname__" further replaced by the current object name;
   ##   "__prop__"  further replaced by the current property name;
   ##   "__modemsg__"  further replaced by a message explaining that
   ##   the propmode will be toggled to "manual".
   ##   You may also cross reference properties using the label format
-  ##   OBJNAMEPROPERTY, e.g "@xref{XREFaxescolor, , axes color
+  ##   OBJNAMEPROPERTY, e.g, "@xref{XREFaxescolor, , axes color
   ##   property}." 
   ## 
   ## -"valid": string that describes valid values for the
-  ##   current property. Use "packopt" function to join options with
+  ##   current property.  Use "packopt" function to join options with
   ##   " | " separator and "markdef" to mark default among valid
   ##   values between curly braces. 
   ##   If not provided, valid values for radio properties are
   ##   automatically retrieved using set function.
   ## 
-  ## -"default": string. If not provided the default value is
+  ## -"default": string.  If not provided the default value is
   ##   automatically retrieved using get function.
   ##
-  ## -"printdefault": a boolean (def. true) that sepcifies whether the
-  ## default value should be printed. It is usefull for properties
+  ## -"printdefault": a boolean (def. true) that specifies whether the
+  ## default value should be printed.  It is useful for properties
   ## like root "screendepth" that default to screen dependant values. 
 
   packopt = @(c) strjoin (c, ' | ');
   markdef = @(s) ["@{" s "@}"];
   
   ## Some generic templates: 
   valid_color = "colorspec";
   valid_handle = "graphics handle";
@@ -92,17 +92,17 @@ function  s = getdoc (objname, field, ba
   valid_cellstring = packopt ({"string", "cell array of strings"});
   valid_2elvec = "two elements vector";
   valid_3elvec = "three elements vector";
   valid_4elvec = "four elements vector";
   valid_vecmat = packopt ({"vector", "matrix"});
   valid_scalmat = packopt ({"scalar", "matrix"});
   
   doc_notimpl =  "%s is not yet implemented for __objname__ \
-objects. __prop__ is unused.";
+objects.  __prop__ is unused.";
   doc_unused =  "__prop__ is unused.";
 
 
   ## Initialize structure
   if (isfield (base, field))
     s = base.(field);
   else
     s = struct ("valid", "", "default", "", "doc", "", ...
@@ -124,18 +124,18 @@ objects. __prop__ is unused.";
         s.valid = "vector of graphics handles";
         
       case "clipping"
         s.doc = "If __prop__ is @qcode{\"on\"}, the __objname__ is \
 clipped in its parent axes limits.";
         
       case "createfcn"
         s.doc = "Callback functions to be executed right after \
-the __objname__ has been created. Those functions have to be set by \
-default using e.g. @code{set (0, \"default__objname__createfcn\", \
+the __objname__ has been created.  Those functions have to be set by \
+default using e.g.  @code{set (0, \"default__objname__createfcn\", \
 'disp (\"__objname__ created!\")') }.";
         s.valid = valid_fcn;
         
       case "deletefcn"
         s.doc = "Callback functions to be executed right before \
 the __objname__ is deleted.";
         s.valid = valid_fcn;
         
@@ -150,17 +150,17 @@ handle is not visible into its parent's 
         s.valid = valid_handle;
         
       case "selected"
       case "selectionhighlight"
       case "tag"
         s.valid = valid_string;
         
       case "type"
-        s.doc = "Class name of the graphics object. __prop__ is \
+        s.doc = "Class name of the graphics object.  __prop__ is \
 always @qcode{\"__objname__\"}";
         s.valid = valid_string;
         s.printdefault = false;
         
       case "uicontextmenu"
       case "userdata"
       case "visible"
         s.doc = "If __prop__ is @qcode{\"off\"}, the __objname__ is \
@@ -173,74 +173,74 @@ not rendered on screen.";
       ## Overridden shared properties
       case {"beingdeleted", "busyaction", "buttondownfcn", ...
             "clipping", "createfcn", "deletefcn", "handlevisibility", ...
             "hittest", "interruptible", "selected", ...
             "selectionhighlight", "uicontextmenu", "visible"}
         s.doc = doc_unused;
         
       case "parent"
-        s.doc = "Root figure has no parent graphics object. __prop__ \
+        s.doc = "Root figure has no parent graphics object.  __prop__ \
 is always empty.";
         
       ## Specific properties
       case "callbackobject"
         s.valid = valid_handle;
         
       case "commandwindowsize"
       case "currentfigure"
         s.doc = "Graphics handle of the current figure.";
         s.valid = valid_handle;
         
       case "diary"
         s.doc = "If __prop__ is @qcode{\"on\"}, the octave \
-command window session is saved to file. @xref{XREFrootdiaryfile, , \
+command window session is saved to file.  @xref{XREFrootdiaryfile, , \
 diaryfile property}.";
         s.valid = valid_string;
         
       case "diaryfile"
-        s.doc = "The name of the diary file. \
+        s.doc = "The name of the diary file.  \
 @xref{XREFdiary, , diary function}.";
         s.valid = valid_string;
         
       case "echo"
         s.doc = "Control whether octave displays commands executed \
-from scripts. @xref{XREFecho, , echo function}.";
+from scripts.  @xref{XREFecho, , echo function}.";
         
       case "errormessage"
-        s.doc = "The last error message octave raised. \
+        s.doc = "The last error message octave raised.  \
 @xref{XREFlasterr, , lasterr function}.";
         s.valid = valid_string;
         
       case "fixedwidthfontname"
         s.valid = valid_string;
         
       case "format"
-        s. doc = "This property is a wrapper around @code{format} \
-function. @xref{XREFformat, , format function}.";
+        s.doc = "This property is a wrapper around @code{format} \
+function.  @xref{XREFformat, , format function}.";
         
       case "formatspacing"
-        s. doc = "This property is a wrapper around @code{format} \
-function. @xref{XREFformat, , format function}.";
+        s.doc = "This property is a wrapper around @code{format} \
+function.  @xref{XREFformat, , format function}.";
         
       case "language"
         s.valid = valid_string;
         
       case "monitorpositions"
         s.valid = valid_4elvec;
         
       case "pointerlocation"
         s.valid = valid_2elvec;
         
       case "pointerwindow"
         s.valid = valid_handle;
         
       case "recursionlimit"
         s.doc = "The maximum number of times a function can be \
-called recursively. @xref{XREFmax_recursion_depth, , \
+called recursively.  @xref{XREFmax_recursion_depth, , \
 max_recursion_depth function}.";
         s.valid = "double";
         
       case "screendepth"
         s.valid = "double";
         s.printdefault = false;
         
       case "screenpixelsperinch"
@@ -268,17 +268,17 @@ the value of their @code{handlevisibilit
 
       ## Specific properties
       case "alphamap"
         s.doc = sprintf (doc_notimpl, "Transparency");
       case "closerequestfcn"
         s.valid = valid_fcn;
         
       case "color"
-        s.doc = "Color of the figure background. @xref{Colors, , \
+        s.doc = "Color of the figure background.  @xref{Colors, , \
 colorspec}.";
         s.valid = valid_color;
         
       case "colormap"
         s.doc = "A matrix containing the RGB color map for \
 the current axes.";
         s.valid = "N-by-3 matrix";
         
@@ -318,35 +318,35 @@ defined \n\
       case "integerhandle"
       case "inverthardcopy"
       case "keypressfcn"
         s.valid = valid_fcn;
         
       case "keyreleasefcn"
         s.doc = "With @code{keypressfcn}, the keyboard callback \
 functions.  These callback functions get called when a key is \
-pressed/released respectively. The functions are called with two \
-input arguments. The first argument holds the handle of the calling \
+pressed/released respectively.  The functions are called with two \
+input arguments.  The first argument holds the handle of the calling \
 figure.  The second argument holds the event structure which has the \
 following members:\n\
 @table @code\n\
 @item Character:\n\
 The ASCII value of the key\n\
 @item Key:\n\
 lowercase value of the key\n\
 @item Modifier:\n\
 A cell array containing strings representing the modifiers pressed \
 with the key.\n\
 @end table";
         s.valid = valid_fcn;
         
       case "menubar"
       case "mincolormap"
       case "name"
-        s.doc = "Name to be displayed in the figure title bar. If \
+        s.doc = "Name to be displayed in the figure title bar.  If \
 __prop__ is empty, the title of the figure is \"figure\" followed \
 by the figure handle value.";
         s.valid = valid_string;
         
       case "nextplot"
       case "numbertitle"
       case "outerposition"
         s.valid = valid_4elvec;
@@ -360,22 +360,22 @@ page.  __modemsg__.";
         
       case "paperpositionmode"
         s.doc = "If __prop__ is set to @qcode{\"auto\"}, the \
 @qcode{\"paperposition\"} property is automatically computed: the \
 printed figure will have the same size as on-screen figure and will \
 be centered in the output page."; 
       case "papersize"
         s.doc = "Vector @qcode{[width height]} defining the size of the \
-printing paper. Setting this property forces the @code{papertype} \
+printing paper.  Setting this property forces the @code{papertype} \
 property to be set to @qcode{\"<custom>\"}.";
         s.valid = valid_2elvec;
         
       case "papertype"
-        s.doc = "Name of the paper to be used for printed output. \
+        s.doc = "Name of the paper to be used for printed output.  \
 Setting __prop__ also changes @code{papersize} accordingly.";
         
       case "paperunits"
         s.doc = "The unit used to compute the @code{paperposition} \
 property.";
         
       case "pointer"
       case "pointershapecdata"
@@ -429,17 +429,17 @@ coordinates of the cursor.";
       case "windowstyle"
       case "wvisual"
       case "wvisualmode"
       case "xdisplay"
       case "xvisual"
       case "xvisualmode"
       case "__graphics_toolkit__"
         s.doc = "The graphics toolkit that is used to render the \
-figure. @xref{XREFavailable_graphics_toolkits, , \
+figure.  @xref{XREFavailable_graphics_toolkits, , \
 available_graphics_toolkits function}.";
     endswitch
     
   ## Axes properties
   elseif (strcmp (objname, "axes"))
     switch field
       ## Overridden shared properties
       case "clipping"
@@ -469,57 +469,57 @@ available_graphics_toolkits function}.";
       case "cameraupvectormode"
       case "cameraviewangle"
         s.valid = "scalar";
         
       case "cameraviewanglemode"
       case "clim"
         s.valid = valid_2elvec;
         s.doc = "Define the limits for the color axis of image \
-children. __modemsg__. @xref{XREFpcolor, , pcolor function}.";
+children.  __modemsg__.  @xref{XREFpcolor, , pcolor function}.";
         
       case "climmode"
       case "color"
-        s.doc = "Color of the axes background. @xref{Colors, , \
+        s.doc = "Color of the axes background.  @xref{Colors, , \
 colorspec}.";
         s.valid = valid_color;
         
       case "colororder"
         s.doc = "RGB values to be used by plot function for \
 automatic line coloring.";
         s.valid = "N-by-3 RGB matrix";
         
       case "currentpoint"
         s.doc = "Matrix @qcode{[xf, yf, zf; xb, yb, zb]} which holds \
 the coordinates of the point over which the mouse pointer was when \
 the mouse button was pressed in axes data units.  If a mouse \
 callback function is defined, @code{currentpoint} holds the \
 pointer coordinates at the time the mouse button was pressed.  For \
 3D plots, the first row of the returned matrix specifies the point \
 nearest to the current camera position and the second rows the \
-furthest point. The two points forms a line which is perpendicular \
+furthest point.  The two points forms a line which is perpendicular \
 to the screen.";
         s.valid = "2-by-3 matrix";
         
       case "dataaspectratio"
         s.doc = "Specify the relative height and width of the data \
-displayed in the axes. Setting @code{dataaspectratio} to @samp{[1, \
+displayed in the axes.  Setting @code{dataaspectratio} to @samp{[1, \
 2]} causes the length of one unit as displayed on the y-axis to be \
-the same as the length of 2 units on the x-axis. __modemsg__.";
+the same as the length of 2 units on the x-axis.  __modemsg__.";
         s.valid = valid_3elvec;
         
       case "dataaspectratiomode"
       case "drawmode"
       case "fontangle"
       case "fontname"
         s.doc = "Name of the font to be used for axes annotations.";
         s.valid = valid_string;
         
       case "fontsize"
-        s.doc = "Size of the font to be used for axes annotations. \
+        s.doc = "Size of the font to be used for axes annotations.  \
 @xref{XREFaxesfontunits, , fontunits property}.";
         s.valid = "scalar";
         
       case "fontunits"
         s.doc = "Unit used to interpret @code{fontsize} property.";
         
       case "fontweight"
       case "gridlinestyle"
@@ -563,130 +563,130 @@ outerposition property}.";
         
       case "units"
       case "view"
         s.doc = "Specify the view point for three-dimensional plots";
         s.valid = valid_2elvec;
         
       case "xaxislocation"
       case "xcolor"
-        s.doc = "Color of the x-axis. @xref{Colors, , colorspec}.";
+        s.doc = "Color of the x-axis.  @xref{Colors, , colorspec}.";
         s.valid = packopt ({markdef(valid_color), ...
                             "@qcode{\"none\"}"});
         
       case "xdir"
       case "xgrid"
         s.doc = "Control wether major x grid lines are displayed.";
         
       case "xlabel"
         s.doc = "Graphics handle of the x label text object.";
         s.valid = valid_handle;
         
       case "xlim"
-        s.doc = "Specify the limits for x-axis. __modemsg__. \
+        s.doc = "Specify the limits for x-axis.  __modemsg__.  \
 @xref{XREFxlim, , xlim function}.";
         s.valid = valid_2elvec;
         
       case "xlimmode"
       case "xminorgrid"
         s.doc = "Control wether minor x grid lines are displayed.";
         
       case "xminortick"
       case "xscale"
       case "xtick"
-        s.doc = "Position of x tick marks. __modemsg__.";
+        s.doc = "Position of x tick marks.  __modemsg__.";
         s.valid = "vector";
         
       case "xticklabel"
-        s.doc = "Labels of x tick marks. __modemsg__.";
+        s.doc = "Labels of x tick marks.  __modemsg__.";
         s.valid = valid_cellstring;
         
       case "xticklabelmode"
       case "xtickmode"
       case "yaxislocation"
       case "ycolor"
-        s.doc = "Color of the y-axis. @xref{Colors, , colorspec}.";
+        s.doc = "Color of the y-axis.  @xref{Colors, , colorspec}.";
         s.valid = packopt ({markdef(valid_color), ...
                             "@qcode{\"none\"}"});
         
       case "ydir"
       case "ygrid"
         s.doc = "Control wether major y grid lines are displayed.";
         
       case "ylabel"
         s.doc = "Graphics handle of the y label text object.";
         s.valid = valid_handle;
         
       case "ylim"
-        s.doc = "Specify the limits for y-axis. __modemsg__. \
+        s.doc = "Specify the limits for y-axis.  __modemsg__.  \
 @xref{XREFylim, , ylim function}.";
         s.valid = valid_2elvec;
         
       case "ylimmode"
       case "yminorgrid"
         s.doc = "Control wether minor y grid lines are displayed.";
         
       case "yminortick"
       case "yscale"
       case "ytick"
-        s.doc = "Position of y tick marks. __modemsg__.";
+        s.doc = "Position of y tick marks.  __modemsg__.";
         s.valid = "vector";
         
       case "yticklabel"
-        s.doc = "Labels of y tick marks. __modemsg__.";
+        s.doc = "Labels of y tick marks.  __modemsg__.";
         s.valid = valid_cellstring;
         
       case "yticklabelmode"
       case "ytickmode"
       case "zcolor"
-        s.doc = "Color of the z-axis. @xref{Colors, , colorspec}.";
+        s.doc = "Color of the z-axis.  @xref{Colors, , colorspec}.";
         s.valid = packopt ({markdef(valid_color), ...
                             "@qcode{\"none\"}"});
         
       case "zdir"
       case "zgrid"
         s.doc = "Control wether major z grid lines are displayed.";
         
       case "zlabel"
         s.doc = "Graphics handle of the z label text object.";
         s.valid = valid_handle;
         
       case "zlim"
-        s.doc = "Specify the limits for z-axis. __modemsg__. \
+        s.doc = "Specify the limits for z-axis.  __modemsg__.  \
 @xref{XREFzlim, , zlim function}.";
         s.valid = valid_2elvec;
         
       case "zlimmode"
       case "zminorgrid"
         s.doc = "Control wether minor z grid lines are displayed.";
         
       case "zminortick"
       case "zscale"
       case "ztick"
-        s.doc = "Position of z tick marks. __modemsg__.";
+        s.doc = "Position of z tick marks.  __modemsg__.";
         s.valid = "vector";
         
       case "zticklabel"
-        s.doc = "Labels of z tick marks. __modemsg__.";
+        s.doc = "Labels of z tick marks.  __modemsg__.";
         s.valid = valid_cellstring;
         
       case "zticklabelmode"
       case "ztickmode"
     endswitch
     
   ## Line properties
   elseif (strcmp (objname, "line"))
     switch field
       ## Overridden shared properties
       case "children"
         s.doc = doc_unused;
         
       ## Specific properties
       case "color"
-        s.doc = "Color of the line object. @xref{Colors, , \
+        s.doc = "Color of the line object.  @xref{Colors, , \
 colorspec}.";
         s.valid = valid_color;
         
       case "displayname"
         s.doc = "The text of the legend entry corresponding to this \
 line.";
         s.valid = valid_cellstring;
         
@@ -696,30 +696,30 @@ line.";
       case "interpreter"
       case "linestyle"
         s.doc = "@xref{Line Styles}.";
         
       case "linewidth"
         s.doc = "Width in points of the line object.";
         
       case "marker"
-        s.doc = "The shape of the marker to be used. @xref{Marker \
+        s.doc = "The shape of the marker to be used.  @xref{Marker \
 Styles}.";
         
       case "markeredgecolor"
-        s.doc = "Color of the edge of the markers. If set \
-@qcode{\"auto\"}, the markers edges have the same color as the line. If \
-set @qcode{\"none\"}, the markers edges are not displayed. This property \
-can also be set to any color. @xref{Colors, , colorspec}.";
+        s.doc = "Color of the edge of the markers.  If set \
+@qcode{\"auto\"}, the markers edges have the same color as the line.  If \
+set @qcode{\"none\"}, the markers edges are not displayed.  This property \
+can also be set to any color.  @xref{Colors, , colorspec}.";
         
       case "markerfacecolor"
-        s.doc = "Color of the face of the markers. If set \
-@qcode{\"auto\"}, the markers faces have the same color as the line. If \
-set @qcode{\"none\"}, the markers faces are not displayed. This property \
-can also be set to any color. @xref{Colors, , colorspec}.";
+        s.doc = "Color of the face of the markers.  If set \
+@qcode{\"auto\"}, the markers faces have the same color as the line.  If \
+set @qcode{\"none\"}, the markers faces are not displayed.  This property \
+can also be set to any color.  @xref{Colors, , colorspec}.";
         
       case "markersize"
         s.doc = "Size of the markers  in points.";
         s.valid = "scalar";
         
       case "xdata"
         s.doc = "Vector of x data to be plotted.";
         s.valid = "vector";
@@ -757,31 +757,31 @@ that should be used as z data.";
         s.doc = doc_unused;
 
       ## Specific properties
       case "backgroundcolor"
         s.doc = sprintf (doc_notimpl, "Background area");
         s.valid = valid_color;
         
       case "color"
-        s.doc = "Color of the text. @xref{Colors, ,colorspec}. ";
+        s.doc = "Color of the text.  @xref{Colors, ,colorspec}.  ";
         s.valid = valid_color;
         
       case "displayname"
       case "edgecolor"
         s.doc = sprintf (doc_notimpl, "Background area");
         s.valid = valid_color;
         
       case "editing"
       case "erasemode"
         s.doc = doc_unused;
         
       case "extent"
       case "fontangle"
-        s.doc = "Flag whether the font is italic or normal. \
+        s.doc = "Flag whether the font is italic or normal.  \
 @code{fontangle} is currently unused.";
         
       case "fontname"
         s.doc = "The font used for the text.";
         s.valid = valid_string;
         
       case "fontsize"
         s.doc = "The font size of the text.";
@@ -985,19 +985,19 @@ markersize property}.";
         s.doc = sprintf (doc_notimpl, "Light");
         s.valid = "scalar";
         
       case "backfacelighting"
         s.doc = sprintf (doc_notimpl, "Light");
         
       case "cdata"
         s.doc = "Data defining the patch object color.\n\
-Patch color can be defined for faces or for vertices. \n\n\
+Patch color can be defined for faces or for vertices.  \n\n\
 If @code{cdata} is a scalar index into the current colormap or a RGB \
-triplet, it defines the color of all faces. \n\n\
+triplet, it defines the color of all faces.  \n\n\
 If @code{cdata} is a N-by-1 vector of indices or a N-by-3 (RGB) \
 matrix, it defines the color of each one of the N faces.\n\n\
 If @code{cdata} is a N-by-M or a N-by-M-by-3 (RGB) \
 matrix, it defines the color all vertices.";
         s.valid = valid_scalmat;
         
       case "diffusestrength"
         s.doc = sprintf (doc_notimpl, "Light");
@@ -1277,21 +1277,21 @@ function str = warn_autogen ()
 @c\n\
 @c Octave is free software; you can redistribute it and/or modify it\n\
 @c under the terms of the GNU General Public License as published by the\n\
 @c Free Software Foundation; either version 3 of the License, or (at\n\
 @c your option) any later version.\n\
 @c\n\
 @c Octave is distributed in the hope that it will be useful, but WITHOUT\n\
 @c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n\
-@c FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License\n\
+@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n\
 @c for more details.\n\
 @c\n\
 @c You should have received a copy of the GNU General Public License\n\
-@c along with Octave; see the file COPYING. If not, see\n\
+@c along with Octave; see the file COPYING.  If not, see\n\
 @c <http://www.gnu.org/licenses/>.";
 endfunction
 
 function str = print_options (val, default)
   str = "";
   if (! isempty (val))
     tmp = strrep (val, default, ["@{" default "@}"]);
     if (length (tmp) == length (val) && ! isempty (default))
