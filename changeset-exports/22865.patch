# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1480996777 18000
#      Mon Dec 05 22:59:37 2016 -0500
# Node ID 89756f2f085b134821c89fa86e247feea183acfd
# Parent  d744b1ed48511d89630b618b6d48ac9713a4984d
use c++11 style for deleting default copy constructor and assignment operator

* octave-gui.h, resource-manager.h, shortcut-manager.h,
base-text-renderer.h, c-file-ptr-stream.h, dynamic-ld.cc,
dynamic-ld.h, event-queue.h, ft-text-renderer.cc, gl-render.cc,
gl-render.h, graphics.cc, graphics.in.h, interpreter.h, mex.cc,
mxarray.in.h, oct-fstrm.h, oct-iostrm.h, oct-prcstrm.h, oct-procbuf.h,
oct-stdstrm.h, oct-stream.cc, oct-stream.h, oct-strstrm.h,
octave-link.h, pager.h, profiler.h, sighandlers.cc, symtab.h,
text-renderer.h, zfstream.h, __init_fltk__.cc, ov-builtin.h,
ov-dld-fcn.h, ov-fcn.h, ov-mex-fcn.h, ov-typeinfo.h, ov-usr-fcn.h,
octave.h, lex.h, parse.h, pt-arg-list.h, pt-array-list.h, pt-assign.h,
pt-binop.h, pt-bp.h, pt-cbinop.h, pt-cell.h, pt-check.h,
pt-classdef.h, pt-cmd.h, pt-colon.h, pt-const.h, pt-decl.h, pt-eval.h,
pt-except.h, pt-exp.h, pt-fcn-handle.h, pt-funcall.h, pt-id.h,
pt-idx.h, pt-jump.h, pt-loop.h, pt-mat.h, pt-misc.h, pt-pr-code.h,
pt-select.h, pt-stmt.h, pt-unop.h, pt-walk.h, pt.h, token.h, Array.cc,
idx-vector.h, oct-fftw.h, sparse-chol.cc, sparse-qr.cc, file-ops.h,
mach-info.h, oct-env.h, action-container.h, cmd-edit.cc, cmd-edit.h,
cmd-hist.h, oct-locbuf.h, oct-mutex.h, oct-shlib.cc, oct-sort.h,
pathsearch.h, singleton-cleanup.h, unwind-prot.h, url-transfer.cc,
url-transfer.h:
Use C++11 style "= delete" declaration to declare copy constructors
and assignment operators for classes that should not be copied.

diff --git a/libgui/src/octave-gui.h b/libgui/src/octave-gui.h
--- a/libgui/src/octave-gui.h
+++ b/libgui/src/octave-gui.h
@@ -43,19 +43,19 @@ namespace octave
 
     bool gui_running (void) const { return m_gui_running; }
     void gui_running (bool arg) { m_gui_running = arg; }
 
   private:
 
     // No copying, at least not yet.
 
-    gui_application (const gui_application&);
+    gui_application (const gui_application&) = delete;
 
-    gui_application& operator = (const gui_application&);
+    gui_application& operator = (const gui_application&) = delete;
 
     int m_argc;
     char **m_argv;
     bool m_gui_running;
   };
 }
 
 #endif
diff --git a/libgui/src/resource-manager.h b/libgui/src/resource-manager.h
--- a/libgui/src/resource-manager.h
+++ b/libgui/src/resource-manager.h
@@ -111,16 +111,20 @@ public:
 public slots:
 
   static void cleanup_instance (void) { delete instance; instance = 0; }
 
 private:
 
   // No copying!
 
+  resource_manager (const resource_manager&) = delete;
+
+  resource_manager& operator = (const resource_manager&) = delete;
+  
   static bool instance_ok (void);
 
   QString settings_directory;
 
   QString settings_file;
 
   QSettings *settings;
 
diff --git a/libgui/src/shortcut-manager.h b/libgui/src/shortcut-manager.h
--- a/libgui/src/shortcut-manager.h
+++ b/libgui/src/shortcut-manager.h
@@ -110,16 +110,20 @@ protected slots:
   void handle_double_clicked (QTreeWidgetItem*, int);
   void shortcut_dialog_finished (int);
   void shortcut_dialog_set_default ();
 
 private:
 
   // No copying!
 
+  shortcut_manager (const shortcut_manager&) = delete;
+
+  shortcut_manager& operator = (const shortcut_manager&) = delete;
+
   static bool instance_ok (void);
 
   void init (const QString&, const QString&, const QKeySequence&);
   void do_init_data ();
   void do_write_shortcuts (QSettings *settings, bool closing);
   void do_set_shortcut (QAction *action, const QString& key);
   void do_fill_treewidget (QTreeWidget *tree_view);
   bool do_import_export (int action);
diff --git a/libinterp/corefcn/base-text-renderer.h b/libinterp/corefcn/base-text-renderer.h
--- a/libinterp/corefcn/base-text-renderer.h
+++ b/libinterp/corefcn/base-text-renderer.h
@@ -70,16 +70,16 @@ namespace octave
                      std::list<text_renderer::string>& lst,
                      Matrix& box, int halign, int valign, double rotation,
                      const caseless_str& interpreter = "tex") = 0;
 
   private:
 
     // No copying!
 
-    base_text_renderer (const base_text_renderer&);
+    base_text_renderer (const base_text_renderer&) = delete;
 
-    base_text_renderer& operator = (const base_text_renderer&);
+    base_text_renderer& operator = (const base_text_renderer&) = delete;
   };
 }
 
 #endif
 
diff --git a/libinterp/corefcn/c-file-ptr-stream.h b/libinterp/corefcn/c-file-ptr-stream.h
--- a/libinterp/corefcn/c-file-ptr-stream.h
+++ b/libinterp/corefcn/c-file-ptr-stream.h
@@ -87,19 +87,19 @@ protected:
   close_fcn cf;
 
 private:
 
   int_type underflow_common (bool);
 
   // No copying!
 
-  c_file_ptr_buf (const c_file_ptr_buf&);
+  c_file_ptr_buf (const c_file_ptr_buf&) = delete;
 
-  c_file_ptr_buf& operator = (const c_file_ptr_buf&);
+  c_file_ptr_buf& operator = (const c_file_ptr_buf&) = delete;
 };
 
 // FIXME: the following three classes could probably share some code...
 
 template <typename STREAM_T, typename FILE_T, typename BUF_T>
 class
 c_file_ptr_stream : public STREAM_T
 {
@@ -122,19 +122,19 @@ public:
   void clear (void) { if (buf) buf->clear (); STREAM_T::clear (); }
 
 private:
 
   BUF_T *buf;
 
   // No copying!
 
-  c_file_ptr_stream (const c_file_ptr_stream&);
+  c_file_ptr_stream (const c_file_ptr_stream&) = delete;
 
-  c_file_ptr_stream& operator = (const c_file_ptr_stream&);
+  c_file_ptr_stream& operator = (const c_file_ptr_stream&) = delete;
 };
 
 typedef c_file_ptr_stream<std::istream, FILE *, c_file_ptr_buf>
   i_c_file_ptr_stream;
 typedef c_file_ptr_stream<std::ostream, FILE *, c_file_ptr_buf>
   o_c_file_ptr_stream;
 typedef c_file_ptr_stream<std::iostream, FILE *, c_file_ptr_buf>
   io_c_file_ptr_stream;
@@ -204,19 +204,19 @@ protected:
   close_fcn cf;
 
 private:
 
   int_type underflow_common (bool);
 
   // No copying!
 
-  c_zfile_ptr_buf (const c_zfile_ptr_buf&);
+  c_zfile_ptr_buf (const c_zfile_ptr_buf&) = delete;
 
-  c_zfile_ptr_buf& operator = (const c_zfile_ptr_buf&);
+  c_zfile_ptr_buf& operator = (const c_zfile_ptr_buf&) = delete;
 };
 
 typedef c_file_ptr_stream<std::istream, gzFile, c_zfile_ptr_buf>
   i_c_zfile_ptr_stream;
 typedef c_file_ptr_stream<std::ostream, gzFile, c_zfile_ptr_buf>
   o_c_zfile_ptr_stream;
 typedef c_file_ptr_stream<std::iostream, gzFile, c_zfile_ptr_buf>
   io_c_zfile_ptr_stream;
diff --git a/libinterp/corefcn/dynamic-ld.cc b/libinterp/corefcn/dynamic-ld.cc
--- a/libinterp/corefcn/dynamic-ld.cc
+++ b/libinterp/corefcn/dynamic-ld.cc
@@ -85,19 +85,19 @@ private:
 
   static bool instance_ok (void);
 
   // List of libraries we have loaded.
   std::list<octave::dynamic_library> lib_list;
 
   // No copying!
 
-  octave_shlib_list (const octave_shlib_list&);
+  octave_shlib_list (const octave_shlib_list&) = delete;
 
-  octave_shlib_list& operator = (const octave_shlib_list&);
+  octave_shlib_list& operator = (const octave_shlib_list&) = delete;
 };
 
 octave_shlib_list *octave_shlib_list::instance = 0;
 
 void
 octave_shlib_list::do_append (const octave::dynamic_library& shl)
 {
   lib_list.push_back (shl);
diff --git a/libinterp/corefcn/dynamic-ld.h b/libinterp/corefcn/dynamic-ld.h
--- a/libinterp/corefcn/dynamic-ld.h
+++ b/libinterp/corefcn/dynamic-ld.h
@@ -57,19 +57,19 @@ public:
 
   static bool remove_mex (const std::string& fcn_name,
                           octave::dynamic_library& shl);
 
 private:
 
   // No copying!
 
-  octave_dynamic_loader (const octave_dynamic_loader&);
+  octave_dynamic_loader (const octave_dynamic_loader&) = delete;
 
-  octave_dynamic_loader& operator = (const octave_dynamic_loader&);
+  octave_dynamic_loader& operator = (const octave_dynamic_loader&) = delete;
 
   static octave_dynamic_loader *instance;
 
   static void cleanup_instance (void) { delete instance; instance = 0; }
 
   static bool instance_ok (void);
 
   octave_function *
diff --git a/libinterp/corefcn/event-queue.h b/libinterp/corefcn/event-queue.h
--- a/libinterp/corefcn/event-queue.h
+++ b/libinterp/corefcn/event-queue.h
@@ -74,19 +74,19 @@ public:
 protected:
 
   std::queue<elem *> fifo;
 
 private:
 
   // No copying!
 
-  event_queue (const event_queue&);
+  event_queue (const event_queue&) = delete;
 
-  event_queue& operator = (const event_queue&);
+  event_queue& operator = (const event_queue&) = delete;
 };
 
 // Like event_queue, but this one will guard against the
 // possibility of seeing an exception (or interrupt) in the cleanup actions.
 // Not that we can do much about it, but at least we won't crash.
 
 class
 event_queue_safe : public event_queue
@@ -113,15 +113,15 @@ public:
           }
       }
   }
 
 private:
 
   // No copying!
 
-  event_queue_safe (const event_queue_safe&);
+  event_queue_safe (const event_queue_safe&) = delete;
 
-  event_queue_safe& operator = (const event_queue_safe&);
+  event_queue_safe& operator = (const event_queue_safe&) = delete;
 };
 
 #endif
 
diff --git a/libinterp/corefcn/ft-text-renderer.cc b/libinterp/corefcn/ft-text-renderer.cc
--- a/libinterp/corefcn/ft-text-renderer.cc
+++ b/libinterp/corefcn/ft-text-renderer.cc
@@ -138,19 +138,19 @@ namespace octave
     // weak references to the fonts, strong references are only present
     // in class text_renderer.
     ft_cache cache;
 
   private:
 
     // No copying!
 
-    ft_manager (const ft_manager&);
+    ft_manager (const ft_manager&) = delete;
 
-    ft_manager& operator = (const ft_manager&);
+    ft_manager& operator = (const ft_manager&) = delete;
 
     ft_manager (void)
       : library (), freetype_initialized (false), fontconfig_initialized (false)
     {
       if (FT_Init_FreeType (&library))
         error ("unable to initialize FreeType library");
       else
         freetype_initialized = true;
@@ -400,19 +400,19 @@ namespace octave
                          bool handle_rotation);
 
   private:
 
     int rotation_to_mode (double rotation) const;
 
     // No copying!
 
-    ft_text_renderer (const ft_text_renderer&);
+    ft_text_renderer (const ft_text_renderer&) = delete;
 
-    ft_text_renderer& operator = (const ft_text_renderer&);
+    ft_text_renderer& operator = (const ft_text_renderer&) = delete;
 
     // Class to hold information about fonts and a strong
     // reference to the font objects loaded by FreeType.
 
     class ft_font : public text_renderer::font
     {
     public:
 
diff --git a/libinterp/corefcn/gl-render.cc b/libinterp/corefcn/gl-render.cc
--- a/libinterp/corefcn/gl-render.cc
+++ b/libinterp/corefcn/gl-render.cc
@@ -347,19 +347,19 @@ namespace octave
 
     static void CALLBACK tess_error (GLenum err, void *t)
     { reinterpret_cast<opengl_tesselator *> (t)->error (err); }
 
   private:
 
     // No copying!
 
-    opengl_tesselator (const opengl_tesselator&);
-
-    opengl_tesselator operator = (const opengl_tesselator&);
+    opengl_tesselator (const opengl_tesselator&) = delete;
+
+    opengl_tesselator operator = (const opengl_tesselator&) = delete;
 
     GLUtesselator *glu_tess;
     bool fill;
   };
 
   class
   vertex_data
   {
@@ -566,19 +566,19 @@ namespace octave
 
       *out_data = new_v.get_rep ();
     }
 
   private:
 
     // No copying!
 
-    patch_tesselator (const patch_tesselator&);
-
-    patch_tesselator& operator = (const patch_tesselator&);
+    patch_tesselator (const patch_tesselator&) = delete;
+
+    patch_tesselator& operator = (const patch_tesselator&) = delete;
 
     opengl_renderer *renderer;
     int color_mode;
     int light_mode;
     int index;
     bool first;
     std::list<vertex_data> tmp_vdata;
   };
diff --git a/libinterp/corefcn/gl-render.h b/libinterp/corefcn/gl-render.h
--- a/libinterp/corefcn/gl-render.h
+++ b/libinterp/corefcn/gl-render.h
@@ -136,19 +136,19 @@ namespace octave
                                    double p1, double p2,
                                    int xyz, int ha, int va,
                                    int& wmax, int& hmax);
 
   private:
 
     // No copying!
 
-    opengl_renderer (const opengl_renderer&);
+    opengl_renderer (const opengl_renderer&) = delete;
 
-    opengl_renderer& operator = (const opengl_renderer&);
+    opengl_renderer& operator = (const opengl_renderer&) = delete;
 
     bool is_nan_or_inf (double x, double y, double z) const
     {
       return (octave::math::isnan (x) || octave::math::isnan (y)
               || octave::math::isnan (z)
               || octave::math::isinf (x) || octave::math::isinf (y)
               || octave::math::isinf (z));
     }
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -9506,19 +9506,19 @@ private:
 
   void* function_data;
 
   // function_event objects must be created with at least a function.
   function_event (void);
 
   // No copying!
 
-  function_event (const function_event&);
-
-  function_event & operator = (const function_event&);
+  function_event (const function_event&) = delete;
+
+  function_event & operator = (const function_event&) = delete;
 };
 
 class
 set_event : public base_graphics_event
 {
 public:
   set_event (const graphics_handle& h, const std::string& name,
              const octave_value& value, bool do_notify_toolkit = true)
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -2923,22 +2923,19 @@ protected:
   octave_refcount<int> count;
 
   // A flag telling whether this object is a valid object
   // in the backend context.
   bool toolkit_flag;
 
   // No copying!
 
-  base_graphics_object (const base_graphics_object&) : count (0) { }
-
-  base_graphics_object& operator = (const base_graphics_object&)
-  {
-    return *this;
-  }
+  base_graphics_object (const base_graphics_object&) = delete;
+
+  base_graphics_object& operator = (const base_graphics_object&) = delete;
 };
 
 class OCTINTERP_API graphics_object
 {
 public:
   graphics_object (void) : rep (new base_graphics_object ()) { }
 
   graphics_object (base_graphics_object *new_rep)
@@ -6364,18 +6361,20 @@ public:
                          ? instance->graphics_lock
                          : octave_mutex (),
                          wait)
     { }
 
   private:
 
     // No copying!
-    auto_lock (const auto_lock&);
-    auto_lock& operator = (const auto_lock&);
+
+    auto_lock (const auto_lock&) = delete;
+
+    auto_lock& operator = (const auto_lock&) = delete;
   };
 
 private:
 
   static gh_manager *instance;
 
   typedef std::map<graphics_handle, graphics_object>::iterator iterator;
   typedef std::map<graphics_handle, graphics_object>::const_iterator
diff --git a/libinterp/corefcn/interpreter.h b/libinterp/corefcn/interpreter.h
--- a/libinterp/corefcn/interpreter.h
+++ b/libinterp/corefcn/interpreter.h
@@ -112,19 +112,19 @@ namespace octave
 
     bool interactive (void) const { return m_interactive; }
     void interactive (bool arg) { m_interactive = arg; }
 
   private:
 
     // No copying, at least not yet...
 
-    interpreter (const interpreter&);
+    interpreter (const interpreter&) = delete;
 
-    interpreter& operator = (const interpreter&);
+    interpreter& operator = (const interpreter&) = delete;
 
     int main_loop (void);
 
     void clean_up_and_exit (int status, bool safe_to_return = false);
 
     application *m_app_context;
 
     tree_evaluator *m_evaluator;
diff --git a/libinterp/corefcn/mex.cc b/libinterp/corefcn/mex.cc
--- a/libinterp/corefcn/mex.cc
+++ b/libinterp/corefcn/mex.cc
@@ -2359,19 +2359,19 @@ private:
     else
       warning ("%s: value not marked", function_name ());
 #endif
 
   }
 
   // No copying!
 
-  mex (const mex&);
-
-  mex& operator = (const mex&);
+  mex (const mex&) = delete;
+
+  mex& operator = (const mex&) = delete;
 };
 
 // List of memory resources we allocated.
 std::set<void *> mex::global_memlist;
 
 // Current context.
 mex *mex_context = 0;
 
diff --git a/libinterp/corefcn/mxarray.in.h b/libinterp/corefcn/mxarray.in.h
--- a/libinterp/corefcn/mxarray.in.h
+++ b/libinterp/corefcn/mxarray.in.h
@@ -532,19 +532,19 @@ private:
 
   mxArray (mxArray_base *r, const char *n)
     : rep (r), name (mxArray::strsave (n)) { }
 
   void maybe_mutate (void) const;
 
   // No copying!
 
-  mxArray (const mxArray&);
+  mxArray (const mxArray&) = delete;
 
-  mxArray& operator = (const mxArray&);
+  mxArray& operator = (const mxArray&) = delete;
 };
 
 #undef DO_MUTABLE_METHOD
 #undef DO_VOID_MUTABLE_METHOD
 
 #endif
 #endif
 
diff --git a/libinterp/corefcn/oct-fstrm.h b/libinterp/corefcn/oct-fstrm.h
--- a/libinterp/corefcn/oct-fstrm.h
+++ b/libinterp/corefcn/oct-fstrm.h
@@ -75,15 +75,15 @@ protected:
 private:
 
   std::string nm;
 
   std::fstream fs;
 
   // No copying!
 
-  octave_fstream (const octave_fstream&);
+  octave_fstream (const octave_fstream&) = delete;
 
-  octave_fstream& operator = (const octave_fstream&);
+  octave_fstream& operator = (const octave_fstream&) = delete;
 };
 
 #endif
 
diff --git a/libinterp/corefcn/oct-iostrm.h b/libinterp/corefcn/oct-iostrm.h
--- a/libinterp/corefcn/oct-iostrm.h
+++ b/libinterp/corefcn/oct-iostrm.h
@@ -65,19 +65,19 @@ protected:
 private:
 
   std::string nm;
 
   virtual const char *stream_type (void) const = 0;
 
   // No copying!
 
-  octave_base_iostream (const octave_base_iostream&);
+  octave_base_iostream (const octave_base_iostream&) = delete;
 
-  octave_base_iostream& operator = (const octave_base_iostream&);
+  octave_base_iostream& operator = (const octave_base_iostream&) = delete;
 };
 
 class
 octave_istream : public octave_base_iostream
 {
 public:
 
   octave_istream (std::istream *arg = 0, const std::string& n = "")
@@ -104,19 +104,19 @@ protected:
 private:
 
   std::istream *is;
 
   const char *stream_type (void) const { return "octave_istream"; }
 
   // No copying!
 
-  octave_istream (const octave_istream&);
+  octave_istream (const octave_istream&) = delete;
 
-  octave_istream& operator = (const octave_istream&);
+  octave_istream& operator = (const octave_istream&) = delete;
 };
 
 class
 octave_ostream : public octave_base_iostream
 {
 public:
 
   octave_ostream (std::ostream *arg, const std::string& n = "")
@@ -143,15 +143,15 @@ protected:
 private:
 
   std::ostream *os;
 
   const char *stream_type (void) const { return "octave_ostream"; }
 
   // No copying!
 
-  octave_ostream (const octave_ostream&);
+  octave_ostream (const octave_ostream&) = delete;
 
-  octave_ostream& operator = (const octave_ostream&);
+  octave_ostream& operator = (const octave_ostream&) = delete;
 };
 
 #endif
 
diff --git a/libinterp/corefcn/oct-prcstrm.h b/libinterp/corefcn/oct-prcstrm.h
--- a/libinterp/corefcn/oct-prcstrm.h
+++ b/libinterp/corefcn/oct-prcstrm.h
@@ -48,19 +48,19 @@ public:
 protected:
 
   ~octave_iprocstream (void);
 
 private:
 
   // No copying!
 
-  octave_iprocstream (const octave_iprocstream&);
+  octave_iprocstream (const octave_iprocstream&) = delete;
 
-  octave_iprocstream& operator = (const octave_iprocstream&);
+  octave_iprocstream& operator = (const octave_iprocstream&) = delete;
 };
 
 class
 octave_oprocstream : public octave_stdiostream
 {
 public:
 
   octave_oprocstream (const std::string& n,
@@ -76,15 +76,15 @@ public:
 protected:
 
   ~octave_oprocstream (void);
 
 private:
 
   // No copying!
 
-  octave_oprocstream (const octave_oprocstream&);
+  octave_oprocstream (const octave_oprocstream&) = delete;
 
-  octave_oprocstream& operator = (const octave_oprocstream&);
+  octave_oprocstream& operator = (const octave_oprocstream&) = delete;
 };
 
 #endif
 
diff --git a/libinterp/corefcn/oct-procbuf.h b/libinterp/corefcn/oct-procbuf.h
--- a/libinterp/corefcn/oct-procbuf.h
+++ b/libinterp/corefcn/oct-procbuf.h
@@ -66,17 +66,17 @@ protected:
   pid_t proc_pid;
 
   octave_procbuf *next;
 
 private:
 
   // No copying!
 
-  octave_procbuf (const octave_procbuf&);
+  octave_procbuf (const octave_procbuf&) = delete;
 
-  octave_procbuf& operator = (const octave_procbuf&);
+  octave_procbuf& operator = (const octave_procbuf&) = delete;
 };
 
 extern void symbols_of_oct_procbuf (void);
 
 #endif
 
diff --git a/libinterp/corefcn/oct-stdstrm.h b/libinterp/corefcn/oct-stdstrm.h
--- a/libinterp/corefcn/oct-stdstrm.h
+++ b/libinterp/corefcn/oct-stdstrm.h
@@ -88,19 +88,19 @@ protected:
   int fnum;
 
   ~octave_tstdiostream (void) { delete s; }
 
 private:
 
   // No copying!
 
-  octave_tstdiostream (const octave_tstdiostream&);
+  octave_tstdiostream (const octave_tstdiostream&) = delete;
 
-  octave_tstdiostream& operator = (const octave_tstdiostream&);
+  octave_tstdiostream& operator = (const octave_tstdiostream&) = delete;
 };
 
 class
 octave_stdiostream
   : public octave_tstdiostream<c_file_ptr_buf, io_c_file_ptr_stream, FILE *>
 {
 public:
 
@@ -125,19 +125,19 @@ public:
 protected:
 
   ~octave_stdiostream (void) { }
 
 private:
 
   // No copying!
 
-  octave_stdiostream (const octave_stdiostream&);
+  octave_stdiostream (const octave_stdiostream&) = delete;
 
-  octave_stdiostream& operator = (const octave_stdiostream&);
+  octave_stdiostream& operator = (const octave_stdiostream&) = delete;
 };
 
 #if defined (HAVE_ZLIB)
 
 class
 octave_zstdiostream
   : public octave_tstdiostream<c_zfile_ptr_buf, io_c_zfile_ptr_stream, gzFile>
 {
@@ -165,17 +165,17 @@ public:
 protected:
 
   ~octave_zstdiostream (void) { }
 
 private:
 
   // No copying!
 
-  octave_zstdiostream (const octave_zstdiostream&);
+  octave_zstdiostream (const octave_zstdiostream&) = delete;
 
-  octave_zstdiostream& operator = (const octave_zstdiostream&);
+  octave_zstdiostream& operator = (const octave_zstdiostream&) = delete;
 };
 
 #endif
 
 #endif
 
diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -314,19 +314,19 @@ private:
                            int& width, bool& discard, char& type,
                            char& modifier);
 
   int finish_conversion (const std::string& s, size_t& i, size_t n,
                          int& width, bool discard, char& type,
                          char modifier);
   // No copying!
 
-  scanf_format_list (const scanf_format_list&);
-
-  scanf_format_list& operator = (const scanf_format_list&);
+  scanf_format_list (const scanf_format_list&) = delete;
+
+  scanf_format_list& operator = (const scanf_format_list&) = delete;
 };
 
 scanf_format_list::scanf_format_list (const std::string& s)
   : nconv (0), curr_idx (0), fmt_elts (), buf ()
 {
   size_t n = s.length ();
 
   size_t i = 0;
@@ -856,19 +856,19 @@ private:
                            int& prec, char& modifier, char& type);
 
   void finish_conversion (const std::string& s, size_t& i, int args,
                           const std::string& flags, int fw, int prec,
                           char modifier, char& type);
 
   // No copying!
 
-  printf_format_list (const printf_format_list&);
-
-  printf_format_list& operator = (const printf_format_list&);
+  printf_format_list (const printf_format_list&) = delete;
+
+  printf_format_list& operator = (const printf_format_list&) = delete;
 };
 
 printf_format_list::printf_format_list (const std::string& s)
   : nconv (0), curr_idx (0), fmt_elts (), buf ()
 {
   size_t n = s.length ();
 
   size_t i = 0;
@@ -1336,19 +1336,19 @@ namespace octave
 
     // Marker to see if a read consumes any characters.
     char *progress_marker;
 
     std::ios_base::iostate flags;
 
     // No copying!
 
-    delimited_stream (const delimited_stream&);
-
-    delimited_stream& operator = (const delimited_stream&);
+    delimited_stream (const delimited_stream&) = delete;
+
+    delimited_stream& operator = (const delimited_stream&) = delete;
   };
 
   // Create a delimited stream, reading from is, with delimiters delims,
   // and allowing reading of up to tellg + longest_lookeahead.  When is
   // is at EOF, lookahead may be padded by ASCII nuls.
 
   delimited_stream::delimited_stream (std::istream& is,
                                       const std::string& delimiters,
@@ -1775,19 +1775,19 @@ namespace octave
     std::string parse_char_class (const std::string& pattern) const;
 
     int finish_conversion (const std::string& s, size_t& i, size_t n,
                            unsigned int& width, int& prec, int& bitwidth,
                            octave_value& val_type,
                            bool discard, char& type);
     // No copying!
 
-    textscan_format_list (const textscan_format_list&);
-
-    textscan_format_list& operator = (const textscan_format_list&);
+    textscan_format_list (const textscan_format_list&) = delete;
+
+    textscan_format_list& operator = (const textscan_format_list&) = delete;
   };
 
   // Main class to implement textscan.  Read data and parse it
   // according to a format.
   //
   // The calling sequence is
   //
   //   textscan scanner ();
@@ -1928,19 +1928,19 @@ namespace octave
 
     bool isspace (unsigned int ch) const { return whitespace_table[ch & 0xff]; }
 
     // True if the only delimiter is whitespace.
     bool whitespace_delim (void) const { return delim_table.empty (); }
 
     // No copying!
 
-    textscan (const textscan&);
-
-    textscan& operator = (const textscan&);
+    textscan (const textscan&) = delete;
+
+    textscan& operator = (const textscan&) = delete;
   };
 
   textscan_format_list::textscan_format_list (const std::string& s,
                                               const std::string& who_arg)
     : who (who_arg), set_from_first (false), has_string (false),
       nconv (0), curr_idx (0), fmt_elts (), buf ()
   {
     size_t n = s.length ();
@@ -5321,19 +5321,19 @@ private:
   state curr_state;
 
   // Must create value cache with values!
 
   printf_value_cache (void);
 
   // No copying!
 
-  printf_value_cache (const printf_value_cache&);
-
-  printf_value_cache& operator = (const printf_value_cache&);
+  printf_value_cache (const printf_value_cache&) = delete;
+
+  printf_value_cache& operator = (const printf_value_cache&) = delete;
 };
 
 octave_value
 printf_value_cache::get_next_value (char type)
 {
   octave_value retval;
 
   if (exhausted ())
diff --git a/libinterp/corefcn/oct-stream.h b/libinterp/corefcn/oct-stream.h
--- a/libinterp/corefcn/oct-stream.h
+++ b/libinterp/corefcn/oct-stream.h
@@ -227,19 +227,19 @@ private:
 
   // We can always do this in terms of seek(), so the derived class
   // only has to provide that.
 
   void invalid_operation (const std::string& who, const char *rw);
 
   // No copying!
 
-  octave_base_stream (const octave_base_stream&);
+  octave_base_stream (const octave_base_stream&) = delete;
 
-  octave_base_stream& operator = (const octave_base_stream&);
+  octave_base_stream& operator = (const octave_base_stream&) = delete;
 };
 
 class
 OCTINTERP_API
 octave_stream
 {
 public:
 
diff --git a/libinterp/corefcn/oct-strstrm.h b/libinterp/corefcn/oct-strstrm.h
--- a/libinterp/corefcn/oct-strstrm.h
+++ b/libinterp/corefcn/oct-strstrm.h
@@ -61,19 +61,19 @@ public:
 protected:
 
   ~octave_base_strstream (void) { }
 
 private:
 
   // No copying!
 
-  octave_base_strstream (const octave_base_strstream&);
+  octave_base_strstream (const octave_base_strstream&) = delete;
 
-  octave_base_strstream& operator = (const octave_base_strstream&);
+  octave_base_strstream& operator = (const octave_base_strstream&) = delete;
 };
 
 class
 octave_istrstream : public octave_base_strstream
 {
 public:
 
   octave_istrstream (const char *data,
@@ -119,19 +119,19 @@ protected:
   ~octave_istrstream (void) { }
 
 private:
 
   std::istringstream is;
 
   // No copying!
 
-  octave_istrstream (const octave_istrstream&);
+  octave_istrstream (const octave_istrstream&) = delete;
 
-  octave_istrstream& operator = (const octave_istrstream&);
+  octave_istrstream& operator = (const octave_istrstream&) = delete;
 };
 
 class
 octave_ostrstream : public octave_base_strstream
 {
 public:
 
   octave_ostrstream (std::ios::openmode arg_md = std::ios::out,
@@ -165,15 +165,15 @@ protected:
   ~octave_ostrstream (void) { }
 
 private:
 
   std::ostringstream os;
 
   // No copying!
 
-  octave_ostrstream (const octave_ostrstream&);
+  octave_ostrstream (const octave_ostrstream&) = delete;
 
-  octave_ostrstream& operator = (const octave_ostrstream&);
+  octave_ostrstream& operator = (const octave_ostrstream&) = delete;
 };
 
 #endif
 
diff --git a/libinterp/corefcn/octave-link.h b/libinterp/corefcn/octave-link.h
--- a/libinterp/corefcn/octave-link.h
+++ b/libinterp/corefcn/octave-link.h
@@ -351,19 +351,19 @@ public:
   }
 
 private:
 
   static octave_link *instance;
 
   // No copying!
 
-  octave_link (const octave_link&);
+  octave_link (const octave_link&) = delete;
 
-  octave_link& operator = (const octave_link&);
+  octave_link& operator = (const octave_link&) = delete;
 
   static bool instance_ok (void) { return instance != 0; }
 
 protected:
 
   // Semaphore to lock access to the event queue.
   octave_mutex *event_queue_mutex;
 
diff --git a/libinterp/corefcn/pager.h b/libinterp/corefcn/pager.h
--- a/libinterp/corefcn/pager.h
+++ b/libinterp/corefcn/pager.h
@@ -85,19 +85,19 @@ private:
   static bool instance_ok (void);
 
   static void cleanup_instance (void) { delete instance; instance = 0; }
 
   octave_pager_buf *pb;
 
   // No copying!
 
-  octave_pager_stream (const octave_pager_stream&);
+  octave_pager_stream (const octave_pager_stream&) = delete;
 
-  octave_pager_stream& operator = (const octave_pager_stream&);
+  octave_pager_stream& operator = (const octave_pager_stream&) = delete;
 };
 
 class
 OCTINTERP_API
 octave_diary_buf : public std::stringbuf
 {
 public:
 
@@ -133,19 +133,19 @@ private:
   static bool instance_ok (void);
 
   static void cleanup_instance (void) { delete instance; instance = 0; }
 
   octave_diary_buf *db;
 
   // No copying!
 
-  octave_diary_stream (const octave_diary_stream&);
+  octave_diary_stream (const octave_diary_stream&) = delete;
 
-  octave_diary_stream& operator = (const octave_diary_stream&);
+  octave_diary_stream& operator = (const octave_diary_stream&) = delete;
 };
 
 #define octave_stdout (octave_pager_stream::stream ())
 
 #define octave_diary (octave_diary_stream::stream ())
 
 extern OCTINTERP_API void flush_octave_stdout (void);
 
diff --git a/libinterp/corefcn/profiler.h b/libinterp/corefcn/profiler.h
--- a/libinterp/corefcn/profiler.h
+++ b/libinterp/corefcn/profiler.h
@@ -75,18 +75,20 @@ public:
     {
       if (is_active)
         acc.exit_function (fcn);
     }
 
   private:
 
     // No copying!
-    enter (const enter&);
-    enter& operator = (const enter&);
+
+    enter (const enter&) = delete;
+
+    enter& operator = (const enter&) = delete;
   };
 
   profile_data_accumulator (void);
   virtual ~profile_data_accumulator ();
 
   bool is_active (void) const { return enabled; }
   void set_active (bool);
 
@@ -155,18 +157,20 @@ private:
     child_map children;
 
     // This is only time spent *directly* on this level, excluding children!
     double time;
 
     unsigned calls;
 
     // No copying!
-    tree_node (const tree_node&);
-    tree_node& operator = (const tree_node&);
+
+    tree_node (const tree_node&) = delete;
+
+    tree_node& operator = (const tree_node&) = delete;
   };
 
   // Each function we see in the profiler is given a unique index (which
   // simply counts starting from 1).  We thus have to map profiler-names to
   // those indices.  For all other stuff, we identify functions by their index.
 
   typedef std::vector<std::string> function_set;
   typedef std::map<std::string, octave_idx_type> fcn_index_map;
@@ -194,18 +198,20 @@ private:
   double query_time () const;
 
   // Add the time elapsed since last_time to the function we're currently in.
   // This is called from two different positions, thus it is useful to have
   // it as a seperate function.
   void add_current_time (void);
 
   // No copying!
-  profile_data_accumulator (const profile_data_accumulator&);
-  profile_data_accumulator& operator = (const profile_data_accumulator&);
+
+  profile_data_accumulator (const profile_data_accumulator&) = delete;
+
+  profile_data_accumulator& operator = (const profile_data_accumulator&) = delete;
 };
 
 // The instance used.
 extern OCTINTERP_API profile_data_accumulator profiler;
 
 // Helper macro to profile a block of code.
 
 #define BEGIN_PROFILER_BLOCK(classname)                                 \
diff --git a/libinterp/corefcn/sighandlers.cc b/libinterp/corefcn/sighandlers.cc
--- a/libinterp/corefcn/sighandlers.cc
+++ b/libinterp/corefcn/sighandlers.cc
@@ -97,19 +97,19 @@ namespace octave
     virtual void do_user_abort (const char *sig_name, int sig_number) = 0;
 
     virtual void do_raise_sigint (void) = 0;
 
   private:
 
     // No copying!
 
-    base_interrupt_manager (const base_interrupt_manager&);
+    base_interrupt_manager (const base_interrupt_manager&) = delete;
 
-    base_interrupt_manager& operator = (const base_interrupt_manager&);
+    base_interrupt_manager& operator = (const base_interrupt_manager&) = delete;
   };
 
 #if defined (OCTAVE_USE_WINDOWS_API)
 
   class
   w32_interrupt_manager : public base_interrupt_manager
   {
   public:
@@ -196,19 +196,19 @@ namespace octave
 
     // The ID of the thread that is running the octave interpreter.
     DWORD thread_id;
 
   private:
 
     // No copying!
 
-    w32_interrupt_manager (const w32_interrupt_manager&);
+    w32_interrupt_manager (const w32_interrupt_manager&) = delete;
 
-    w32_interrupt_manager& operator = (const w32_interrupt_manager&);
+    w32_interrupt_manager& operator = (const w32_interrupt_manager&) = delete;
   };
 
 #endif
 
   class
   posix_interrupt_manager : public base_interrupt_manager
   {
   public:
@@ -233,19 +233,19 @@ namespace octave
     {
       octave_raise_wrapper (SIGINT);
     }
 
   private:
 
     // No copying!
 
-    posix_interrupt_manager (const posix_interrupt_manager&);
+    posix_interrupt_manager (const posix_interrupt_manager&) = delete;
 
-    posix_interrupt_manager& operator = (const posix_interrupt_manager&);
+    posix_interrupt_manager& operator = (const posix_interrupt_manager&) = delete;
   };
 
   class
   interrupt_manager
   {
   public:
 
     ~interrupt_manager (void) { }
@@ -271,19 +271,19 @@ namespace octave
     }
 
   private:
 
     interrupt_manager (void) { }
 
     // No copying!
 
-    interrupt_manager (const interrupt_manager&);
+    interrupt_manager (const interrupt_manager&) = delete;
 
-    interrupt_manager& operator = (const interrupt_manager&);
+    interrupt_manager& operator = (const interrupt_manager&) = delete;
 
     static bool instance_ok (void)
     {
       bool retval = true;
 
       if (! instance)
         {
           instance = create_instance ();
diff --git a/libinterp/corefcn/symtab.h b/libinterp/corefcn/symtab.h
--- a/libinterp/corefcn/symtab.h
+++ b/libinterp/corefcn/symtab.h
@@ -101,19 +101,19 @@ public:
 
       return retval;
     }
 
   private:
 
     // No copying!
 
-    scope_id_cache (const scope_id_cache&);
-
-    scope_id_cache& operator = (const scope_id_cache&);
+    scope_id_cache (const scope_id_cache&) = delete;
+
+    scope_id_cache& operator = (const scope_id_cache&) = delete;
 
     static scope_id_cache *instance;
 
     static void cleanup_instance (void) { delete instance; instance = 0; }
 
     // The next available scope not in the free list.
     scope_id next_available;
 
@@ -472,19 +472,19 @@ public:
       bool valid;
 
       octave_refcount<size_t> count;
 
     private:
 
       // No copying!
 
-      symbol_record_rep (const symbol_record_rep& ov);
-
-      symbol_record_rep& operator = (const symbol_record_rep&);
+      symbol_record_rep (const symbol_record_rep& ov) = delete;
+
+      symbol_record_rep& operator = (const symbol_record_rep&) = delete;
     };
 
   public:
 
     symbol_record (scope_id s = xcurrent_scope,
                    const std::string& nm = "",
                    const octave_value& v = octave_value (),
                    unsigned int sc = local)
@@ -947,19 +947,19 @@ public:
     private:
 
       octave_value xfind (const octave_value_list& args, bool local_funcs);
 
       octave_value x_builtin_find (void);
 
       // No copying!
 
-      fcn_info_rep (const fcn_info_rep&);
-
-      fcn_info_rep& operator = (const fcn_info_rep&);
+      fcn_info_rep (const fcn_info_rep&) = delete;
+
+      fcn_info_rep& operator = (const fcn_info_rep&) = delete;
     };
 
   public:
 
     fcn_info (const std::string& nm = "")
       : rep (new fcn_info_rep (nm)) { }
 
     fcn_info (const fcn_info& fi) : rep (fi.rep)
@@ -2190,19 +2190,19 @@ public:
   }
 
   static void cleanup (void);
 
 private:
 
   // No copying!
 
-  symbol_table (const symbol_table&);
-
-  symbol_table& operator = (const symbol_table&);
+  symbol_table (const symbol_table&) = delete;
+
+  symbol_table& operator = (const symbol_table&) = delete;
 
   typedef std::map<std::string, symbol_record>::const_iterator
     table_const_iterator;
   typedef std::map<std::string, symbol_record>::iterator
     table_iterator;
 
   typedef std::map<std::string, octave_value>::const_iterator
     global_table_const_iterator;
diff --git a/libinterp/corefcn/text-renderer.h b/libinterp/corefcn/text-renderer.h
--- a/libinterp/corefcn/text-renderer.h
+++ b/libinterp/corefcn/text-renderer.h
@@ -201,16 +201,16 @@ namespace octave
                           const caseless_str& interpreter = "tex");
 
   private:
 
     base_text_renderer *rep;
 
     // No copying!
 
-    text_renderer (const text_renderer&);
+    text_renderer (const text_renderer&) = delete;
 
-    text_renderer& operator = (const text_renderer&);
+    text_renderer& operator = (const text_renderer&) = delete;
   };
 }
 
 #endif
 
diff --git a/libinterp/corefcn/zfstream.h b/libinterp/corefcn/zfstream.h
--- a/libinterp/corefcn/zfstream.h
+++ b/libinterp/corefcn/zfstream.h
@@ -197,19 +197,19 @@ protected:
 //
 //  virtual int_type uflow();
 //  virtual int_type pbackfail(int_type c = traits_type::eof());
 
 private:
 
   // No copying!
 
-  gzfilebuf (const gzfilebuf&);
+  gzfilebuf (const gzfilebuf&) = delete;
 
-  gzfilebuf& operator = (const gzfilebuf&);
+  gzfilebuf& operator = (const gzfilebuf&) = delete;
 
   /**
    *  @brief  Allocate internal buffer.
    *
    *  This function is safe to call multiple times.  It will ensure
    *  that a proper internal buffer exists if it is required.  If the
    *  buffer already exists or is external, the buffer pointers will be
    *  reset to their original state.
diff --git a/libinterp/dldfcn/__init_fltk__.cc b/libinterp/dldfcn/__init_fltk__.cc
--- a/libinterp/dldfcn/__init_fltk__.cc
+++ b/libinterp/dldfcn/__init_fltk__.cc
@@ -733,19 +733,19 @@ public:
   {
     delete menubar;
   }
 
 private:
 
   // No copying!
 
-  fltk_uimenu (const fltk_uimenu&);
+  fltk_uimenu (const fltk_uimenu&) = delete;
 
-  fltk_uimenu operator = (const fltk_uimenu&);
+  fltk_uimenu operator = (const fltk_uimenu&) = delete;
 
   Fl_Menu_Bar* menubar;
 };
 
 #if defined (HAVE_X_WINDOWS)
 static int
 xerror_handler (Display *, XErrorEvent *)
 {
@@ -1031,19 +1031,19 @@ public:
     window_label = fp.get_title ();
     label (window_label.c_str ());
   }
 
 private:
 
   // No copying!
 
-  plot_window (const plot_window&);
+  plot_window (const plot_window&) = delete;
 
-  plot_window& operator = (const plot_window&);
+  plot_window& operator = (const plot_window&) = delete;
 
   // window name -- this must exists for the duration of the window's
   // life
   std::string window_label;
 
   // Figure properties.
   figure::properties& fp;
 
@@ -1946,18 +1946,20 @@ public:
 
 private:
 
   static figure_manager *instance;
 
   figure_manager (void) { }
 
   // No copying!
-  figure_manager (const figure_manager&);
-  figure_manager& operator = (const figure_manager&);
+
+  figure_manager (const figure_manager&) = delete;
+
+  figure_manager& operator = (const figure_manager&) = delete;
 
   // Singelton -- hide all of the above.
 
   static int curr_index;
   typedef std::map<int, plot_window*> window_map;
   typedef window_map::iterator wm_iterator;;
   window_map windows;
 
diff --git a/libinterp/octave-value/ov-builtin.h b/libinterp/octave-value/ov-builtin.h
--- a/libinterp/octave-value/ov-builtin.h
+++ b/libinterp/octave-value/ov-builtin.h
@@ -103,17 +103,17 @@ protected:
 
   // A pointer to the jit type that represents the function.
   jit_type *jtype;
 
 private:
 
   // No copying!
 
-  octave_builtin (const octave_builtin& ob);
+  octave_builtin (const octave_builtin& ob) = delete;
 
-  octave_builtin& operator = (const octave_builtin& ob);
+  octave_builtin& operator = (const octave_builtin& ob) = delete;
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
 
diff --git a/libinterp/octave-value/ov-dld-fcn.h b/libinterp/octave-value/ov-dld-fcn.h
--- a/libinterp/octave-value/ov-dld-fcn.h
+++ b/libinterp/octave-value/ov-dld-fcn.h
@@ -86,17 +86,17 @@ private:
 
   // True if this function came from a file that is considered to be a
   // system function.  This affects whether we check the time stamp
   // on the file to see if it has changed.
   bool system_fcn_file;
 
   // No copying!
 
-  octave_dld_function (const octave_dld_function& fn);
+  octave_dld_function (const octave_dld_function& fn) = delete;
 
-  octave_dld_function& operator = (const octave_dld_function& fn);
+  octave_dld_function& operator = (const octave_dld_function& fn) = delete;
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
 
diff --git a/libinterp/octave-value/ov-fcn.h b/libinterp/octave-value/ov-fcn.h
--- a/libinterp/octave-value/ov-fcn.h
+++ b/libinterp/octave-value/ov-fcn.h
@@ -215,16 +215,16 @@ protected:
 
   // The help text for this function.
   std::string doc;
 
 private:
 
   // No copying!
 
-  octave_function (const octave_function& f);
+  octave_function (const octave_function& f) = delete;
 
-  octave_function& operator = (const octave_function& f);
+  octave_function& operator = (const octave_function& f) = delete;
 
 };
 
 #endif
 
diff --git a/libinterp/octave-value/ov-mex-fcn.h b/libinterp/octave-value/ov-mex-fcn.h
--- a/libinterp/octave-value/ov-mex-fcn.h
+++ b/libinterp/octave-value/ov-mex-fcn.h
@@ -105,17 +105,17 @@ private:
 
   // True if this function came from a file that is considered to be a
   // system function.  This affects whether we check the time stamp
   // on the file to see if it has changed.
   bool system_fcn_file;
 
   // No copying!
 
-  octave_mex_function (const octave_mex_function& fn);
+  octave_mex_function (const octave_mex_function& fn) = delete;
 
-  octave_mex_function& operator = (const octave_mex_function& fn);
+  octave_mex_function& operator = (const octave_mex_function& fn) = delete;
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
 
diff --git a/libinterp/octave-value/ov-typeinfo.h b/libinterp/octave-value/ov-typeinfo.h
--- a/libinterp/octave-value/ov-typeinfo.h
+++ b/libinterp/octave-value/ov-typeinfo.h
@@ -316,15 +316,15 @@ private:
   octave_scalar_map non_const_unary_ops_map (void) const;
   octave_scalar_map binary_ops_map (void) const;
   octave_scalar_map compound_binary_ops_map (void) const;
   octave_scalar_map assign_ops_map (void) const;
   octave_scalar_map assignany_ops_map (void) const;
 
   // No copying!
 
-  octave_value_typeinfo (const octave_value_typeinfo&);
+  octave_value_typeinfo (const octave_value_typeinfo&) = delete;
 
-  octave_value_typeinfo& operator = (const octave_value_typeinfo&);
+  octave_value_typeinfo& operator = (const octave_value_typeinfo&) = delete;
 };
 
 #endif
 
diff --git a/libinterp/octave-value/ov-usr-fcn.h b/libinterp/octave-value/ov-usr-fcn.h
--- a/libinterp/octave-value/ov-usr-fcn.h
+++ b/libinterp/octave-value/ov-usr-fcn.h
@@ -70,19 +70,19 @@ protected:
   octave_user_code (const std::string& nm,
                     const std::string& ds = "")
     : octave_function (nm, ds) { }
 
 private:
 
   // No copying!
 
-  octave_user_code (const octave_user_code& f);
+  octave_user_code (const octave_user_code& f) = delete;
 
-  octave_user_code& operator = (const octave_user_code& f);
+  octave_user_code& operator = (const octave_user_code& f) = delete;
 };
 
 // Scripts.
 
 class
 octave_user_script : public octave_user_code
 {
 public:
@@ -158,19 +158,19 @@ private:
   // parsed again.
   octave::sys::time t_checked;
 
   // Used to keep track of recursion depth.
   int call_depth;
 
   // No copying!
 
-  octave_user_script (const octave_user_script& f);
+  octave_user_script (const octave_user_script& f) = delete;
 
-  octave_user_script& operator = (const octave_user_script& f);
+  octave_user_script& operator = (const octave_user_script& f) = delete;
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 // User-defined functions.
 
 class
 octave_user_function : public octave_user_code
@@ -512,17 +512,17 @@ private:
   void bind_automatic_vars (const string_vector& arg_names, int nargin,
                             int nargout, const octave_value_list& va_args,
                             const std::list<octave_lvalue> *lvalue_list);
 
   void restore_warning_states (void);
 
   // No copying!
 
-  octave_user_function (const octave_user_function& fn);
+  octave_user_function (const octave_user_function& fn) = delete;
 
-  octave_user_function& operator = (const octave_user_function& fn);
+  octave_user_function& operator = (const octave_user_function& fn) = delete;
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
 
diff --git a/libinterp/octave.h b/libinterp/octave.h
--- a/libinterp/octave.h
+++ b/libinterp/octave.h
@@ -234,19 +234,19 @@ namespace octave
 
     static bool forced_interactive (void);
     static bool interactive (void);
 
   private:
 
     // No copying, at least not yet...
 
-    application (const application&);
+    application (const application&) = delete;
 
-    application& operator = (const application&);
+    application& operator = (const application&) = delete;
 
     // The application instance;  There should be only one.
     static application *instance;
 
     void init (void);
 
   protected:
 
@@ -294,19 +294,19 @@ namespace octave
     ~cli_application (void) { }
 
     int execute (void);
 
   private:
 
     // No copying, at least not yet...
 
-    cli_application (const cli_application&);
+    cli_application (const cli_application&) = delete;
 
-    cli_application& operator = (const cli_application&);
+    cli_application& operator = (const cli_application&) = delete;
   };
 
   class OCTINTERP_API embedded_application : public application
   {
   public:
 
     embedded_application (const cmdline_options& opts = cmdline_options ())
       : application (opts)
@@ -321,19 +321,19 @@ namespace octave
     void create_interpreter (void);
 
     int execute (void);
 
   private:
 
     // No copying, at least not yet...
 
-    embedded_application (const embedded_application&);
+    embedded_application (const embedded_application&) = delete;
 
-    embedded_application& operator = (const embedded_application&);
+    embedded_application& operator = (const embedded_application&) = delete;
   };
 }
 
 #endif
 
 #if defined  (__cplusplus)
 extern "C" {
 #endif
diff --git a/libinterp/parse-tree/lex.h b/libinterp/parse-tree/lex.h
--- a/libinterp/parse-tree/lex.h
+++ b/libinterp/parse-tree/lex.h
@@ -255,19 +255,19 @@ namespace octave
       }
 
     private:
 
       std::deque<token *> buffer;
 
       // No copying!
 
-      token_cache (const token_cache&);
+      token_cache (const token_cache&) = delete;
 
-      token_cache& operator = (const token_cache&);
+      token_cache& operator = (const token_cache&) = delete;
     };
 
     lexical_feedback (void)
       : end_of_input (false), at_beginning_of_statement (true),
         looking_at_anon_fcn_args (false), looking_at_return_list (false),
         looking_at_parameter_list (false), looking_at_decl_list (false),
         looking_at_initializer_expression (false),
         looking_at_matrix_or_assign_lhs (false),
@@ -459,19 +459,19 @@ namespace octave
 
     // Tokens generated by the lexer.
     token_cache tokens;
 
   private:
 
     // No copying!
 
-    lexical_feedback (const lexical_feedback&);
+    lexical_feedback (const lexical_feedback&) = delete;
 
-    lexical_feedback& operator = (const lexical_feedback&);
+    lexical_feedback& operator = (const lexical_feedback&) = delete;
   };
 
   // base_lexer inherits from lexical_feedback because we will
   // eventually have several different constructors and it is easier to
   // intialize if everything is grouped in a parent class rather than
   // listing all the members in the base_lexer class.
 
   class
@@ -707,19 +707,19 @@ namespace octave
     void enable_fq_identifier (void);
 
   protected:
 
     std::stack<int> start_state_stack;
 
     // No copying!
 
-    base_lexer (const base_lexer&);
+    base_lexer (const base_lexer&) = delete;
 
-    base_lexer& operator = (const base_lexer&);
+    base_lexer& operator = (const base_lexer&) = delete;
   };
 
   class
   lexer : public base_lexer
   {
   public:
 
     lexer (interpreter *interp_context = 0)
@@ -773,19 +773,19 @@ namespace octave
     int fill_flex_buffer (char *buf, unsigned int max_size);
 
     octave_input_reader input_reader;
 
   protected:
 
     // No copying!
 
-    lexer (const lexer&);
+    lexer (const lexer&) = delete;
 
-    lexer& operator = (const lexer&);
+    lexer& operator = (const lexer&) = delete;
   };
 
   class
   push_lexer : public base_lexer
   {
   public:
 
     push_lexer (interpreter *interp_context = 0)
@@ -846,16 +846,16 @@ namespace octave
     int fill_flex_buffer (char *buf, unsigned int max_size);
 
   protected:
 
     int pflag;
 
     // No copying!
 
-    push_lexer (const push_lexer&);
+    push_lexer (const push_lexer&) = delete;
 
-    push_lexer& operator = (const push_lexer&);
+    push_lexer& operator = (const push_lexer&) = delete;
   };
 }
 
 #endif
 
diff --git a/libinterp/parse-tree/parse.h b/libinterp/parse-tree/parse.h
--- a/libinterp/parse-tree/parse.h
+++ b/libinterp/parse-tree/parse.h
@@ -460,19 +460,19 @@ namespace octave
 
     // Internal state of the Bison parser.
     void *parser_state;
 
   private:
 
     // No copying!
 
-    base_parser (const base_parser&);
+    base_parser (const base_parser&) = delete;
 
-    base_parser& operator = (const base_parser&);
+    base_parser& operator = (const base_parser&) = delete;
   };
 
   class
   parser : public base_parser
   {
   public:
 
     parser (void)
@@ -494,19 +494,19 @@ namespace octave
     ~parser (void) { }
 
     int run (void);
 
   private:
 
     // No copying!
 
-    parser (const parser&);
+    parser (const parser&) = delete;
 
-    parser& operator = (const parser&);
+    parser& operator = (const parser&) = delete;
   };
 
   class
   push_parser : public base_parser
   {
   public:
 
     push_parser (void)
@@ -516,16 +516,16 @@ namespace octave
     ~push_parser (void) { }
 
     int run (const std::string& input, bool eof);
 
   private:
 
     // No copying!
 
-    push_parser (const push_parser&);
+    push_parser (const push_parser&) = delete;
 
-    push_parser& operator = (const push_parser&);
+    push_parser& operator = (const push_parser&) = delete;
   };
 }
 
 #endif
 
diff --git a/libinterp/parse-tree/pt-arg-list.h b/libinterp/parse-tree/pt-arg-list.h
--- a/libinterp/parse-tree/pt-arg-list.h
+++ b/libinterp/parse-tree/pt-arg-list.h
@@ -99,15 +99,15 @@ private:
   bool list_includes_magic_end;
 
   bool list_includes_magic_tilde;
 
   bool simple_assign_lhs;
 
   // No copying!
 
-  tree_argument_list (const tree_argument_list&);
+  tree_argument_list (const tree_argument_list&) = delete;
 
-  tree_argument_list& operator = (const tree_argument_list&);
+  tree_argument_list& operator = (const tree_argument_list&) = delete;
 };
 
 #endif
 
diff --git a/libinterp/parse-tree/pt-array-list.h b/libinterp/parse-tree/pt-array-list.h
--- a/libinterp/parse-tree/pt-array-list.h
+++ b/libinterp/parse-tree/pt-array-list.h
@@ -71,15 +71,15 @@ public:
                         symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
 
 private:
 
   // No copying!
 
-  tree_array_list (const tree_array_list&);
+  tree_array_list (const tree_array_list&) = delete;
 
-  tree_array_list& operator = (const tree_array_list&);
+  tree_array_list& operator = (const tree_array_list&) = delete;
 };
 
 #endif
 
diff --git a/libinterp/parse-tree/pt-assign.h b/libinterp/parse-tree/pt-assign.h
--- a/libinterp/parse-tree/pt-assign.h
+++ b/libinterp/parse-tree/pt-assign.h
@@ -99,19 +99,19 @@ private:
   // True if this is an assignment to the automatic variable ans.
   bool ans_ass;
 
   // The type of the expression.
   octave_value::assign_op etype;
 
   // No copying!
 
-  tree_simple_assignment (const tree_simple_assignment&);
+  tree_simple_assignment (const tree_simple_assignment&) = delete;
 
-  tree_simple_assignment& operator = (const tree_simple_assignment&);
+  tree_simple_assignment& operator = (const tree_simple_assignment&) = delete;
 };
 
 // Multi-valued assignment expressions.
 
 class
 tree_multi_assignment : public tree_expression
 {
 public:
@@ -156,15 +156,15 @@ private:
   // The right hand side of the assignment.
   tree_expression *rhs;
 
   // True if we should not delete the lhs.
   bool preserve;
 
   // No copying!
 
-  tree_multi_assignment (const tree_multi_assignment&);
+  tree_multi_assignment (const tree_multi_assignment&) = delete;
 
-  tree_multi_assignment& operator = (const tree_multi_assignment&);
+  tree_multi_assignment& operator = (const tree_multi_assignment&) = delete;
 };
 
 #endif
 
diff --git a/libinterp/parse-tree/pt-binop.h b/libinterp/parse-tree/pt-binop.h
--- a/libinterp/parse-tree/pt-binop.h
+++ b/libinterp/parse-tree/pt-binop.h
@@ -122,19 +122,19 @@ private:
   // TRUE if we have already issued a warning about short circuiting
   // for this operator.
   bool braindead_shortcircuit_warning_issued;
 
   void matlab_style_short_circuit_warning (const char *op);
 
   // No copying!
 
-  tree_binary_expression (const tree_binary_expression&);
+  tree_binary_expression (const tree_binary_expression&) = delete;
 
-  tree_binary_expression& operator = (const tree_binary_expression&);
+  tree_binary_expression& operator = (const tree_binary_expression&) = delete;
 };
 
 // Boolean expressions.
 
 class
 tree_boolean_expression : public tree_binary_expression
 {
 public:
@@ -172,15 +172,15 @@ public:
 
 private:
 
   // The type of the expression.
   type etype;
 
   // No copying!
 
-  tree_boolean_expression (const tree_boolean_expression&);
+  tree_boolean_expression (const tree_boolean_expression&) = delete;
 
-  tree_boolean_expression& operator = (const tree_boolean_expression&);
+  tree_boolean_expression& operator = (const tree_boolean_expression&) = delete;
 };
 
 #endif
 
diff --git a/libinterp/parse-tree/pt-bp.h b/libinterp/parse-tree/pt-bp.h
--- a/libinterp/parse-tree/pt-bp.h
+++ b/libinterp/parse-tree/pt-bp.h
@@ -165,19 +165,19 @@ private:
   // List of breakpoint line numbers.
   octave_value_list bp_list;
 
   // List of breakpoint conditions.
   octave_value_list bp_cond_list;
 
   // No copying!
 
-  tree_breakpoint (const tree_breakpoint&);
+  tree_breakpoint (const tree_breakpoint&) = delete;
 
-  tree_breakpoint& operator = (const tree_breakpoint&);
+  tree_breakpoint& operator = (const tree_breakpoint&) = delete;
 };
 
 // TRUE means SIGINT should put us in the debugger at the next
 // available breakpoint.
 extern bool octave_debug_on_interrupt_state;
 
 #endif
 
diff --git a/libinterp/parse-tree/pt-cbinop.h b/libinterp/parse-tree/pt-cbinop.h
--- a/libinterp/parse-tree/pt-cbinop.h
+++ b/libinterp/parse-tree/pt-cbinop.h
@@ -63,20 +63,20 @@ public:
 private:
 
   tree_expression *op_lhs;
   tree_expression *op_rhs;
   octave_value::compound_binary_op etype;
 
   // No copying!
 
-  tree_compound_binary_expression (const tree_compound_binary_expression&);
+  tree_compound_binary_expression (const tree_compound_binary_expression&) = delete;
 
   tree_compound_binary_expression& operator =
-    (const tree_compound_binary_expression&);
+    (const tree_compound_binary_expression&) = delete;
 };
 
 // a "virtual constructor"
 
 tree_binary_expression *
 maybe_compound_binary_expression (tree_expression *a, tree_expression *b,
                                   int l = -1, int c = -1,
                                   octave_value::binary_op t
diff --git a/libinterp/parse-tree/pt-cell.h b/libinterp/parse-tree/pt-cell.h
--- a/libinterp/parse-tree/pt-cell.h
+++ b/libinterp/parse-tree/pt-cell.h
@@ -61,15 +61,15 @@ public:
                         symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
 
 private:
 
   // No copying!
 
-  tree_cell (const tree_cell&);
+  tree_cell (const tree_cell&) = delete;
 
-  tree_cell& operator = (const tree_cell&);
+  tree_cell& operator = (const tree_cell&) = delete;
 };
 
 #endif
 
diff --git a/libinterp/parse-tree/pt-check.h b/libinterp/parse-tree/pt-check.h
--- a/libinterp/parse-tree/pt-check.h
+++ b/libinterp/parse-tree/pt-check.h
@@ -132,15 +132,15 @@ private:
   std::string file_name;
 
   void do_decl_command (tree_decl_command&);
 
   OCTAVE_NORETURN void errmsg (const std::string& msg, int line);
 
   // No copying!
 
-  tree_checker (const tree_checker&);
+  tree_checker (const tree_checker&) = delete;
 
-  tree_checker& operator = (const tree_checker&);
+  tree_checker& operator = (const tree_checker&) = delete;
 };
 
 #endif
 
diff --git a/libinterp/parse-tree/pt-classdef.h b/libinterp/parse-tree/pt-classdef.h
--- a/libinterp/parse-tree/pt-classdef.h
+++ b/libinterp/parse-tree/pt-classdef.h
@@ -64,19 +64,19 @@ public:
 private:
 
   tree_identifier *id;
   tree_expression *expr;
   bool neg;
 
   // No copying!
 
-  tree_classdef_attribute (const tree_classdef_attribute&);
+  tree_classdef_attribute (const tree_classdef_attribute&) = delete;
 
-  tree_classdef_attribute& operator = (const tree_classdef_attribute&);
+  tree_classdef_attribute& operator = (const tree_classdef_attribute&) = delete;
 };
 
 class tree_classdef_attribute_list : public octave::base_list<tree_classdef_attribute *>
 {
 public:
 
   tree_classdef_attribute_list (void) { }
 
@@ -88,19 +88,19 @@ public:
   ~tree_classdef_attribute_list (void);
 
   void accept (tree_walker&);
 
 private:
 
   // No copying!
 
-  tree_classdef_attribute_list (const tree_classdef_attribute_list&);
+  tree_classdef_attribute_list (const tree_classdef_attribute_list&) = delete;
 
-  tree_classdef_attribute_list& operator = (const tree_classdef_attribute_list&);
+  tree_classdef_attribute_list& operator = (const tree_classdef_attribute_list&) = delete;
 };
 
 class tree_classdef_superclass
 {
 public:
 
   tree_classdef_superclass (const std::string& cname)
     : cls_name (cname) { }
@@ -112,19 +112,19 @@ public:
   void accept (tree_walker&);
 
 private:
 
   std::string cls_name;
 
   // No copying!
 
-  tree_classdef_superclass (const tree_classdef_superclass&);
+  tree_classdef_superclass (const tree_classdef_superclass&) = delete;
 
-  tree_classdef_superclass& operator = (const tree_classdef_superclass&);
+  tree_classdef_superclass& operator = (const tree_classdef_superclass&) = delete;
 };
 
 class tree_classdef_superclass_list : public octave::base_list<tree_classdef_superclass *>
 {
 public:
 
   tree_classdef_superclass_list (void) { }
 
@@ -136,19 +136,19 @@ public:
   ~tree_classdef_superclass_list (void);
 
   void accept (tree_walker&);
 
 private:
 
   // No copying!
 
-  tree_classdef_superclass_list (const tree_classdef_superclass_list&);
+  tree_classdef_superclass_list (const tree_classdef_superclass_list&) = delete;
 
-  tree_classdef_superclass_list& operator = (const tree_classdef_superclass_list&);
+  tree_classdef_superclass_list& operator = (const tree_classdef_superclass_list&) = delete;
 };
 
 template <typename T>
 class tree_classdef_element : public tree
 {
 public:
 
   tree_classdef_element (tree_classdef_attribute_list *a,
@@ -188,19 +188,19 @@ private:
   // Comment preceding the token marking the beginning of the block.
   octave_comment_list *lead_comm;
 
   // Comment preceding END token.
   octave_comment_list *trail_comm;
 
   // No copying!
 
-  tree_classdef_element (const tree_classdef_element&);
+  tree_classdef_element (const tree_classdef_element&) = delete;
 
-  tree_classdef_element& operator = (const tree_classdef_element&);
+  tree_classdef_element& operator = (const tree_classdef_element&) = delete;
 };
 
 class tree_classdef_property
 {
 public:
 
   tree_classdef_property (tree_identifier *i = 0, tree_expression *e = 0)
     : id (i), expr (e) { }
@@ -219,19 +219,19 @@ public:
 
 private:
 
   tree_identifier *id;
   tree_expression *expr;
 
   // No copying!
 
-  tree_classdef_property (const tree_classdef_property&);
+  tree_classdef_property (const tree_classdef_property&) = delete;
 
-  tree_classdef_property& operator = (const tree_classdef_property&);
+  tree_classdef_property& operator = (const tree_classdef_property&) = delete;
 };
 
 class tree_classdef_property_list : public octave::base_list<tree_classdef_property *>
 {
 public:
 
   tree_classdef_property_list (void) { }
 
@@ -243,19 +243,19 @@ public:
   ~tree_classdef_property_list (void);
 
   void accept (tree_walker&);
 
 private:
 
   // No copying!
 
-  tree_classdef_property_list (const tree_classdef_property_list&);
+  tree_classdef_property_list (const tree_classdef_property_list&) = delete;
 
-  tree_classdef_property_list& operator = (const tree_classdef_property_list&);
+  tree_classdef_property_list& operator = (const tree_classdef_property_list&) = delete;
 };
 
 class tree_classdef_properties_block
   : public tree_classdef_element<tree_classdef_property *>
 {
 public:
 
   tree_classdef_properties_block (tree_classdef_attribute_list *a,
@@ -268,19 +268,19 @@ public:
   ~tree_classdef_properties_block (void) { }
 
   void accept (tree_walker&);
 
 private:
 
   // No copying!
 
-  tree_classdef_properties_block (const tree_classdef_properties_block&);
+  tree_classdef_properties_block (const tree_classdef_properties_block&) = delete;
 
-  tree_classdef_properties_block& operator = (const tree_classdef_properties_block&);
+  tree_classdef_properties_block& operator = (const tree_classdef_properties_block&) = delete;
 };
 
 class tree_classdef_methods_list : public octave::base_list<octave_value>
 {
 public:
 
   tree_classdef_methods_list (void) { }
 
@@ -292,19 +292,19 @@ public:
   ~tree_classdef_methods_list (void) { }
 
   void accept (tree_walker&);
 
 private:
 
   // No copying!
 
-  tree_classdef_methods_list (const tree_classdef_methods_list&);
+  tree_classdef_methods_list (const tree_classdef_methods_list&) = delete;
 
-  tree_classdef_methods_list& operator = (const tree_classdef_methods_list&);
+  tree_classdef_methods_list& operator = (const tree_classdef_methods_list&) = delete;
 };
 
 class tree_classdef_methods_block : public tree_classdef_element<octave_value>
 {
 public:
 
   tree_classdef_methods_block (tree_classdef_attribute_list *a,
                                tree_classdef_methods_list *mlist,
@@ -315,19 +315,19 @@ public:
   ~tree_classdef_methods_block (void) { }
 
   void accept (tree_walker&);
 
 private:
 
   // No copying!
 
-  tree_classdef_methods_block (const tree_classdef_methods_block&);
+  tree_classdef_methods_block (const tree_classdef_methods_block&) = delete;
 
-  tree_classdef_methods_block& operator = (const tree_classdef_methods_block&);
+  tree_classdef_methods_block& operator = (const tree_classdef_methods_block&) = delete;
 };
 
 class tree_classdef_event
 {
 public:
 
   tree_classdef_event (tree_identifier *i = 0) : id (i) { }
 
@@ -341,19 +341,19 @@ public:
   void accept (tree_walker&);
 
 private:
 
   tree_identifier *id;
 
   // No copying!
 
-  tree_classdef_event (const tree_classdef_event&);
+  tree_classdef_event (const tree_classdef_event&) = delete;
 
-  tree_classdef_event& operator = (const tree_classdef_event&);
+  tree_classdef_event& operator = (const tree_classdef_event&) = delete;
 };
 
 class tree_classdef_events_list : public octave::base_list<tree_classdef_event *>
 {
 public:
 
   tree_classdef_events_list (void) { }
 
@@ -365,19 +365,19 @@ public:
   ~tree_classdef_events_list (void);
 
   void accept (tree_walker&);
 
 private:
 
   // No copying!
 
-  tree_classdef_events_list (const tree_classdef_events_list&);
+  tree_classdef_events_list (const tree_classdef_events_list&) = delete;
 
-  tree_classdef_events_list& operator = (const tree_classdef_events_list&);
+  tree_classdef_events_list& operator = (const tree_classdef_events_list&) = delete;
 };
 
 class tree_classdef_events_block
   : public tree_classdef_element<tree_classdef_event *>
 {
 public:
 
   tree_classdef_events_block (tree_classdef_attribute_list *a,
@@ -389,19 +389,19 @@ public:
   ~tree_classdef_events_block (void) { }
 
   void accept (tree_walker&);
 
 private:
 
   // No copying!
 
-  tree_classdef_events_block (const tree_classdef_events_block&);
+  tree_classdef_events_block (const tree_classdef_events_block&) = delete;
 
-  tree_classdef_events_block& operator = (const tree_classdef_events_block&);
+  tree_classdef_events_block& operator = (const tree_classdef_events_block&) = delete;
 };
 
 class tree_classdef_enum
 {
 public:
 
   tree_classdef_enum (void) : id (0), expr (0) { }
 
@@ -422,19 +422,19 @@ public:
 
 private:
 
   tree_identifier *id;
   tree_expression *expr;
 
   // No copying!
 
-  tree_classdef_enum (const tree_classdef_enum&);
+  tree_classdef_enum (const tree_classdef_enum&) = delete;
 
-  tree_classdef_enum& operator = (const tree_classdef_enum&);
+  tree_classdef_enum& operator = (const tree_classdef_enum&) = delete;
 };
 
 class tree_classdef_enum_list : public octave::base_list<tree_classdef_enum *>
 {
 public:
 
   tree_classdef_enum_list (void) { }
 
@@ -446,19 +446,19 @@ public:
   ~tree_classdef_enum_list (void);
 
   void accept (tree_walker&);
 
 private:
 
   // No copying!
 
-  tree_classdef_enum_list (const tree_classdef_enum_list&);
+  tree_classdef_enum_list (const tree_classdef_enum_list&) = delete;
 
-  tree_classdef_enum_list& operator = (const tree_classdef_enum_list&);
+  tree_classdef_enum_list& operator = (const tree_classdef_enum_list&) = delete;
 };
 
 class tree_classdef_enum_block
   : public tree_classdef_element<tree_classdef_enum *>
 {
 public:
 
   tree_classdef_enum_block (tree_classdef_attribute_list *a,
@@ -470,19 +470,19 @@ public:
   ~tree_classdef_enum_block (void) { }
 
   void accept (tree_walker&);
 
 private:
 
   // No copying!
 
-  tree_classdef_enum_block (const tree_classdef_enum_block&);
+  tree_classdef_enum_block (const tree_classdef_enum_block&) = delete;
 
-  tree_classdef_enum_block& operator = (const tree_classdef_enum_block&);
+  tree_classdef_enum_block& operator = (const tree_classdef_enum_block&) = delete;
 };
 
 class tree_classdef_body
 {
 public:
 
   typedef std::list<tree_classdef_properties_block *>::iterator properties_list_iterator;
   typedef std::list<tree_classdef_properties_block *>::const_iterator properties_list_const_iterator;
@@ -574,19 +574,19 @@ private:
   std::list<tree_classdef_methods_block *> methods_lst;
 
   std::list<tree_classdef_events_block *> events_lst;
 
   std::list<tree_classdef_enum_block *> enum_lst;
 
   // No copying!
 
-  tree_classdef_body (const tree_classdef_body&);
+  tree_classdef_body (const tree_classdef_body&) = delete;
 
-  tree_classdef_body& operator = (const tree_classdef_body&);
+  tree_classdef_body& operator = (const tree_classdef_body&) = delete;
 };
 
 // Classdef definition.
 
 class tree_classdef : public tree_command
 {
 public:
 
@@ -642,15 +642,15 @@ private:
 
   octave_comment_list *lead_comm;
   octave_comment_list *trail_comm;
 
   std::string pack_name;
 
   // No copying!
 
-  tree_classdef (const tree_classdef&);
+  tree_classdef (const tree_classdef&) = delete;
 
-  tree_classdef& operator = (const tree_classdef&);
+  tree_classdef& operator = (const tree_classdef&) = delete;
 };
 
 #endif
 
diff --git a/libinterp/parse-tree/pt-cmd.h b/libinterp/parse-tree/pt-cmd.h
--- a/libinterp/parse-tree/pt-cmd.h
+++ b/libinterp/parse-tree/pt-cmd.h
@@ -48,19 +48,19 @@ public:
 
   virtual tree_command *dup (symbol_table::scope_id,
                              symbol_table::context_id context) const = 0;
 
 private:
 
   // No copying!
 
-  tree_command (const tree_command&);
+  tree_command (const tree_command&) = delete;
 
-  tree_command& operator = (const tree_command&);
+  tree_command& operator = (const tree_command&) = delete;
 };
 
 // No-op.
 
 class
 tree_no_op_command : public tree_command
 {
 public:
@@ -88,19 +88,19 @@ public:
 private:
 
   bool eof;
 
   std::string orig_cmd;
 
   // No copying!
 
-  tree_no_op_command (const tree_no_op_command&);
+  tree_no_op_command (const tree_no_op_command&) = delete;
 
-  tree_no_op_command& operator = (const tree_no_op_command&);
+  tree_no_op_command& operator = (const tree_no_op_command&) = delete;
 };
 
 // Function definition.
 
 class
 tree_function_def : public tree_command
 {
 public:
@@ -121,15 +121,15 @@ private:
 
   octave_value fcn;
 
   tree_function_def (const octave_value& v, int l = -1, int c = -1)
     : tree_command (l, c), fcn (v) { }
 
   // No copying!
 
-  tree_function_def (const tree_function_def&);
+  tree_function_def (const tree_function_def&) = delete;
 
-  tree_function_def& operator = (const tree_function_def&);
+  tree_function_def& operator = (const tree_function_def&) = delete;
 };
 
 #endif
 
diff --git a/libinterp/parse-tree/pt-colon.h b/libinterp/parse-tree/pt-colon.h
--- a/libinterp/parse-tree/pt-colon.h
+++ b/libinterp/parse-tree/pt-colon.h
@@ -104,15 +104,15 @@ private:
   tree_expression *op_base;
   tree_expression *op_limit;
   tree_expression *op_increment;
 
   bool save_base;
 
   // No copying!
 
-  tree_colon_expression (const tree_colon_expression&);
+  tree_colon_expression (const tree_colon_expression&) = delete;
 
-  tree_colon_expression& operator = (const tree_colon_expression&);
+  tree_colon_expression& operator = (const tree_colon_expression&) = delete;
 };
 
 #endif
 
diff --git a/libinterp/parse-tree/pt-const.h b/libinterp/parse-tree/pt-const.h
--- a/libinterp/parse-tree/pt-const.h
+++ b/libinterp/parse-tree/pt-const.h
@@ -91,16 +91,16 @@ private:
   // The actual value that this constant refers to.
   octave_value val;
 
   // The original text form of this constant.
   std::string orig_text;
 
   // No copying!
 
-  tree_constant (const tree_constant&);
+  tree_constant (const tree_constant&) = delete;
 
-  tree_constant& operator = (const tree_constant&);
+  tree_constant& operator = (const tree_constant&) = delete;
 
 };
 
 #endif
 
diff --git a/libinterp/parse-tree/pt-decl.h b/libinterp/parse-tree/pt-decl.h
--- a/libinterp/parse-tree/pt-decl.h
+++ b/libinterp/parse-tree/pt-decl.h
@@ -100,19 +100,19 @@ private:
   // An identifier to tag with the declared property.
   tree_identifier *id;
 
   // An initializer expression (may be zero);
   tree_expression *expr;
 
   // No copying!
 
-  tree_decl_elt (const tree_decl_elt&);
+  tree_decl_elt (const tree_decl_elt&) = delete;
 
-  tree_decl_elt& operator = (const tree_decl_elt&);
+  tree_decl_elt& operator = (const tree_decl_elt&) = delete;
 };
 
 class
 tree_decl_init_list : public octave::base_list<tree_decl_elt *>
 {
 public:
 
   tree_decl_init_list (void) { }
@@ -133,19 +133,19 @@ public:
                             symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
 
 private:
 
   // No copying!
 
-  tree_decl_init_list (const tree_decl_init_list&);
+  tree_decl_init_list (const tree_decl_init_list&) = delete;
 
-  tree_decl_init_list& operator = (const tree_decl_init_list&);
+  tree_decl_init_list& operator = (const tree_decl_init_list&) = delete;
 };
 
 // Base class for declaration commands -- global, static, etc.
 
 class
 tree_decl_command : public tree_command
 {
 public:
@@ -170,19 +170,19 @@ protected:
 
   // The list of variables or initializers in this declaration command.
   tree_decl_init_list *init_list;
 
 private:
 
   // No copying!
 
-  tree_decl_command (const tree_decl_command&);
+  tree_decl_command (const tree_decl_command&) = delete;
 
-  tree_decl_command& operator = (const tree_decl_command&);
+  tree_decl_command& operator = (const tree_decl_command&) = delete;
 };
 
 // Global.
 
 class
 tree_global_command : public tree_decl_command
 {
 public:
@@ -201,19 +201,19 @@ public:
   void accept (tree_walker& tw);
 
 private:
 
   static void do_init (tree_decl_elt& elt);
 
   // No copying!
 
-  tree_global_command (const tree_global_command&);
+  tree_global_command (const tree_global_command&) = delete;
 
-  tree_global_command& operator = (const tree_global_command&);
+  tree_global_command& operator = (const tree_global_command&) = delete;
 };
 
 // Persistent.
 
 class
 tree_persistent_command : public tree_decl_command
 {
 public:
@@ -232,15 +232,15 @@ public:
   void accept (tree_walker& tw);
 
 private:
 
   static void do_init (tree_decl_elt& elt);
 
   // No copying!
 
-  tree_persistent_command (const tree_persistent_command&);
+  tree_persistent_command (const tree_persistent_command&) = delete;
 
-  tree_persistent_command& operator = (const tree_persistent_command&);
+  tree_persistent_command& operator = (const tree_persistent_command&) = delete;
 };
 
 #endif
 
diff --git a/libinterp/parse-tree/pt-eval.h b/libinterp/parse-tree/pt-eval.h
--- a/libinterp/parse-tree/pt-eval.h
+++ b/libinterp/parse-tree/pt-eval.h
@@ -187,19 +187,19 @@ namespace octave
 
     virtual octave_value
       do_keyboard (const octave_value_list& args = octave_value_list ()) const;
 
     interpreter *m_interp_context;
 
     // No copying!
 
-    tree_evaluator (const tree_evaluator&);
+    tree_evaluator (const tree_evaluator&) = delete;
 
-    tree_evaluator& operator = (const tree_evaluator&);
+    tree_evaluator& operator = (const tree_evaluator&) = delete;
   };
 }
 
 // Maximum nesting level for functions, scripts, or sourced files called
 // recursively.
 extern int Vmax_recursion_depth;
 
 #endif
diff --git a/libinterp/parse-tree/pt-except.h b/libinterp/parse-tree/pt-except.h
--- a/libinterp/parse-tree/pt-except.h
+++ b/libinterp/parse-tree/pt-except.h
@@ -90,19 +90,19 @@ private:
   // Comment preceding CATCH token.
   octave_comment_list *mid_comm;
 
   // Comment preceding END_TRY_CATCH token.
   octave_comment_list *trail_comm;
 
   // No copying!
 
-  tree_try_catch_command (const tree_try_catch_command&);
+  tree_try_catch_command (const tree_try_catch_command&) = delete;
 
-  tree_try_catch_command& operator = (const tree_try_catch_command&);
+  tree_try_catch_command& operator = (const tree_try_catch_command&) = delete;
 };
 
 // Simple exception handling.
 
 class
 tree_unwind_protect_command : public tree_command
 {
 public:
@@ -152,15 +152,15 @@ private:
   // Comment preceding UNWIND_PROTECT_CLEANUP token.
   octave_comment_list *mid_comm;
 
   // Comment preceding END_UNWIND_PROTECT token.
   octave_comment_list *trail_comm;
 
   // No copying!
 
-  tree_unwind_protect_command (const tree_unwind_protect_command&);
+  tree_unwind_protect_command (const tree_unwind_protect_command&) = delete;
 
-  tree_unwind_protect_command& operator = (const tree_unwind_protect_command&);
+  tree_unwind_protect_command& operator = (const tree_unwind_protect_command&) = delete;
 };
 
 #endif
 
diff --git a/libinterp/parse-tree/pt-exp.h b/libinterp/parse-tree/pt-exp.h
--- a/libinterp/parse-tree/pt-exp.h
+++ b/libinterp/parse-tree/pt-exp.h
@@ -156,15 +156,15 @@ protected:
 
   // Print result of rvalue for this expression?
   bool print_flag;
 
 private:
 
   // No copying!
 
-  tree_expression (const tree_expression&);
+  tree_expression (const tree_expression&) = delete;
 
-  tree_expression& operator = (const tree_expression&);
+  tree_expression& operator = (const tree_expression&) = delete;
 };
 
 #endif
 
diff --git a/libinterp/parse-tree/pt-fcn-handle.h b/libinterp/parse-tree/pt-fcn-handle.h
--- a/libinterp/parse-tree/pt-fcn-handle.h
+++ b/libinterp/parse-tree/pt-fcn-handle.h
@@ -78,19 +78,19 @@ public:
 
 private:
 
   // The name of this function handle.
   std::string nm;
 
   // No copying!
 
-  tree_fcn_handle (const tree_fcn_handle&);
+  tree_fcn_handle (const tree_fcn_handle&) = delete;
 
-  tree_fcn_handle& operator = (const tree_fcn_handle&);
+  tree_fcn_handle& operator = (const tree_fcn_handle&) = delete;
 };
 
 class
 tree_anon_fcn_handle : public tree_expression
 {
 public:
 
   tree_anon_fcn_handle (int l = -1, int c = -1)
@@ -145,15 +145,15 @@ private:
   // The function.
   octave_user_function *fcn;
 
   // Filename where the handle was defined.
   std::string file_name;
 
   // No copying!
 
-  tree_anon_fcn_handle (const tree_anon_fcn_handle&);
+  tree_anon_fcn_handle (const tree_anon_fcn_handle&) = delete;
 
-  tree_anon_fcn_handle& operator = (const tree_anon_fcn_handle&);
+  tree_anon_fcn_handle& operator = (const tree_anon_fcn_handle&) = delete;
 };
 
 #endif
 
diff --git a/libinterp/parse-tree/pt-funcall.h b/libinterp/parse-tree/pt-funcall.h
--- a/libinterp/parse-tree/pt-funcall.h
+++ b/libinterp/parse-tree/pt-funcall.h
@@ -87,15 +87,15 @@ private:
   // construction.
   octave_value fcn;
 
   // Argument list.
   octave_value_list args;
 
   // No copying!
 
-  tree_funcall (const tree_funcall&);
+  tree_funcall (const tree_funcall&) = delete;
 
-  tree_funcall& operator = (const tree_funcall&);
+  tree_funcall& operator = (const tree_funcall&) = delete;
 };
 
 #endif
 
diff --git a/libinterp/parse-tree/pt-id.h b/libinterp/parse-tree/pt-id.h
--- a/libinterp/parse-tree/pt-id.h
+++ b/libinterp/parse-tree/pt-id.h
@@ -135,19 +135,19 @@ public:
   }
 private:
 
   // The symbol record that this identifier references.
   symbol_table::symbol_reference sym;
 
   // No copying!
 
-  tree_identifier (const tree_identifier&);
+  tree_identifier (const tree_identifier&) = delete;
 
-  tree_identifier& operator = (const tree_identifier&);
+  tree_identifier& operator = (const tree_identifier&) = delete;
 };
 
 class tree_black_hole : public tree_identifier
 {
 public:
 
   tree_black_hole (int l = -1, int c = -1)
     : tree_identifier (l, c) { }
diff --git a/libinterp/parse-tree/pt-idx.h b/libinterp/parse-tree/pt-idx.h
--- a/libinterp/parse-tree/pt-idx.h
+++ b/libinterp/parse-tree/pt-idx.h
@@ -121,15 +121,15 @@ private:
 
   std::string
   get_struct_index
     (std::list<string_vector>::const_iterator p_arg_nm,
      std::list<tree_expression *>::const_iterator p_dyn_field) const;
 
   // No copying!
 
-  tree_index_expression (const tree_index_expression&);
+  tree_index_expression (const tree_index_expression&) = delete;
 
-  tree_index_expression& operator = (const tree_index_expression&);
+  tree_index_expression& operator = (const tree_index_expression&) = delete;
 };
 
 #endif
 
diff --git a/libinterp/parse-tree/pt-jump.h b/libinterp/parse-tree/pt-jump.h
--- a/libinterp/parse-tree/pt-jump.h
+++ b/libinterp/parse-tree/pt-jump.h
@@ -48,19 +48,19 @@ public:
   void accept (tree_walker& tw);
 
   static int breaking;
 
 private:
 
   // No copying!
 
-  tree_break_command (const tree_break_command&);
+  tree_break_command (const tree_break_command&) = delete;
 
-  tree_break_command& operator = (const tree_break_command&);
+  tree_break_command& operator = (const tree_break_command&) = delete;
 };
 
 // Continue.
 
 class
 tree_continue_command : public tree_command
 {
 public:
@@ -76,19 +76,19 @@ public:
   void accept (tree_walker& tw);
 
   static int continuing;
 
 private:
 
   // No copying!
 
-  tree_continue_command (const tree_continue_command&);
+  tree_continue_command (const tree_continue_command&) = delete;
 
-  tree_continue_command& operator = (const tree_continue_command&);
+  tree_continue_command& operator = (const tree_continue_command&) = delete;
 };
 
 // Return.
 
 class
 tree_return_command : public tree_command
 {
 public:
@@ -104,15 +104,15 @@ public:
   void accept (tree_walker& tw);
 
   static int returning;
 
 private:
 
   // No copying!
 
-  tree_return_command (const tree_return_command&);
+  tree_return_command (const tree_return_command&) = delete;
 
-  tree_return_command& operator = (const tree_return_command&);
+  tree_return_command& operator = (const tree_return_command&) = delete;
 };
 
 #endif
 
diff --git a/libinterp/parse-tree/pt-loop.h b/libinterp/parse-tree/pt-loop.h
--- a/libinterp/parse-tree/pt-loop.h
+++ b/libinterp/parse-tree/pt-loop.h
@@ -123,19 +123,19 @@ private:
 
 #if defined (HAVE_LLVM)
   // compiled version of the loop
   jit_info *compiled;
 #endif
 
   // No copying!
 
-  tree_while_command (const tree_while_command&);
+  tree_while_command (const tree_while_command&) = delete;
 
-  tree_while_command& operator = (const tree_while_command&);
+  tree_while_command& operator = (const tree_while_command&) = delete;
 };
 
 // Do-Until.
 
 class
 tree_do_until_command : public tree_while_command
 {
 public:
@@ -161,19 +161,19 @@ public:
                      symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
 
 private:
 
   // No copying!
 
-  tree_do_until_command (const tree_do_until_command&);
+  tree_do_until_command (const tree_do_until_command&) = delete;
 
-  tree_do_until_command& operator = (const tree_do_until_command&);
+  tree_do_until_command& operator = (const tree_do_until_command&) = delete;
 };
 
 // For.
 
 class
 tree_simple_for_command : public tree_command
 {
 public:
@@ -259,19 +259,19 @@ private:
   // Comment preceding ENDFOR token.
   octave_comment_list *trail_comm;
 
   // compiled version of the loop
   jit_info *compiled;
 
   // No copying!
 
-  tree_simple_for_command (const tree_simple_for_command&);
+  tree_simple_for_command (const tree_simple_for_command&) = delete;
 
-  tree_simple_for_command& operator = (const tree_simple_for_command&);
+  tree_simple_for_command& operator = (const tree_simple_for_command&) = delete;
 };
 
 class
 tree_complex_for_command : public tree_command
 {
 public:
 
   tree_complex_for_command (int l = -1, int c = -1)
@@ -317,15 +317,15 @@ private:
   // Comment preceding FOR token.
   octave_comment_list *lead_comm;
 
   // Comment preceding ENDFOR token.
   octave_comment_list *trail_comm;
 
   // No copying!
 
-  tree_complex_for_command (const tree_complex_for_command&);
+  tree_complex_for_command (const tree_complex_for_command&) = delete;
 
-  tree_complex_for_command& operator = (const tree_complex_for_command&);
+  tree_complex_for_command& operator = (const tree_complex_for_command&) = delete;
 };
 
 #endif
 
diff --git a/libinterp/parse-tree/pt-mat.h b/libinterp/parse-tree/pt-mat.h
--- a/libinterp/parse-tree/pt-mat.h
+++ b/libinterp/parse-tree/pt-mat.h
@@ -64,19 +64,19 @@ public:
                         symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
 
 private:
 
   // No copying!
 
-  tree_matrix (const tree_matrix&);
+  tree_matrix (const tree_matrix&) = delete;
 
-  tree_matrix& operator = (const tree_matrix&);
+  tree_matrix& operator = (const tree_matrix&) = delete;
 };
 
 // The character to fill with when creating string arrays.
 extern char Vstring_fill_char;
 
 extern std::string
 get_concat_class (const std::string& c1, const std::string& c2);
 
diff --git a/libinterp/parse-tree/pt-misc.h b/libinterp/parse-tree/pt-misc.h
--- a/libinterp/parse-tree/pt-misc.h
+++ b/libinterp/parse-tree/pt-misc.h
@@ -98,19 +98,19 @@ private:
   int marked_for_varargs;
 
   void mark_varargs (void) { marked_for_varargs = 1; }
 
   void mark_varargs_only (void) { marked_for_varargs = -1; }
 
   // No copying!
 
-  tree_parameter_list (const tree_parameter_list&);
+  tree_parameter_list (const tree_parameter_list&) = delete;
 
-  tree_parameter_list& operator = (const tree_parameter_list&);
+  tree_parameter_list& operator = (const tree_parameter_list&) = delete;
 };
 
 // Return lists.  Used to hold the right hand sides of multiple
 // assignment expressions.
 
 class
 tree_return_list : public octave::base_list<tree_index_expression *>
 {
@@ -126,33 +126,33 @@ public:
                          symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
 
 private:
 
   // No copying!
 
-  tree_return_list (const tree_return_list&);
+  tree_return_list (const tree_return_list&) = delete;
 
-  tree_return_list& operator = (const tree_return_list&);
+  tree_return_list& operator = (const tree_return_list&) = delete;
 };
 
 class
 tree_va_return_list : public octave::base_list<octave_value>
 {
 public:
 
   tree_va_return_list (void) { }
 
   ~tree_va_return_list (void) { }
 
 private:
 
   // No copying!
 
-  tree_va_return_list (const tree_va_return_list&);
+  tree_va_return_list (const tree_va_return_list&) = delete;
 
-  tree_va_return_list& operator = (const tree_va_return_list&);
+  tree_va_return_list& operator = (const tree_va_return_list&) = delete;
 };
 
 #endif
 
diff --git a/libinterp/parse-tree/pt-pr-code.h b/libinterp/parse-tree/pt-pr-code.h
--- a/libinterp/parse-tree/pt-pr-code.h
+++ b/libinterp/parse-tree/pt-pr-code.h
@@ -187,15 +187,15 @@ private:
   void print_indented_comment (octave_comment_list *comment_list);
 
   // Must create with an output stream!
 
   tree_print_code (void);
 
   // No copying!
 
-  tree_print_code (const tree_print_code&);
+  tree_print_code (const tree_print_code&) = delete;
 
-  tree_print_code& operator = (const tree_print_code&);
+  tree_print_code& operator = (const tree_print_code&) = delete;
 };
 
 #endif
 
diff --git a/libinterp/parse-tree/pt-select.h b/libinterp/parse-tree/pt-select.h
--- a/libinterp/parse-tree/pt-select.h
+++ b/libinterp/parse-tree/pt-select.h
@@ -77,19 +77,19 @@ private:
   // The list of statements to evaluate if expr is true.
   tree_statement_list *list;
 
   // Comment preceding ELSE or ELSEIF token.
   octave_comment_list *lead_comm;
 
   // No copying!
 
-  tree_if_clause (const tree_if_clause&);
+  tree_if_clause (const tree_if_clause&) = delete;
 
-  tree_if_clause& operator = (const tree_if_clause&);
+  tree_if_clause& operator = (const tree_if_clause&) = delete;
 };
 
 class
 tree_if_command_list : public octave::base_list<tree_if_clause *>
 {
 public:
 
   tree_if_command_list (void) { }
@@ -110,19 +110,19 @@ public:
                              symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
 
 private:
 
   // No copying!
 
-  tree_if_command_list (const tree_if_command_list&);
+  tree_if_command_list (const tree_if_command_list&) = delete;
 
-  tree_if_command_list& operator = (const tree_if_command_list&);
+  tree_if_command_list& operator = (const tree_if_command_list&) = delete;
 };
 
 class
 tree_if_command : public tree_command
 {
 public:
 
   tree_if_command (int l = -1, int c = -1)
@@ -153,19 +153,19 @@ private:
   // Comment preceding IF token.
   octave_comment_list *lead_comm;
 
   // Comment preceding ENDIF token.
   octave_comment_list *trail_comm;
 
   // No copying!
 
-  tree_if_command (const tree_if_command&);
+  tree_if_command (const tree_if_command&) = delete;
 
-  tree_if_command& operator = (const tree_if_command&);
+  tree_if_command& operator = (const tree_if_command&) = delete;
 };
 
 // Switch.
 
 class
 tree_switch_case : public tree
 {
 public:
@@ -207,19 +207,19 @@ private:
   // The list of statements to evaluate if the label matches.
   tree_statement_list *list;
 
   // Comment preceding CASE or OTHERWISE token.
   octave_comment_list *lead_comm;
 
   // No copying!
 
-  tree_switch_case (const tree_switch_case&);
+  tree_switch_case (const tree_switch_case&) = delete;
 
-  tree_switch_case& operator = (const tree_switch_case&);
+  tree_switch_case& operator = (const tree_switch_case&) = delete;
 };
 
 class
 tree_switch_case_list : public octave::base_list<tree_switch_case *>
 {
 public:
 
   tree_switch_case_list (void) { }
@@ -240,19 +240,19 @@ public:
                               symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
 
 private:
 
   // No copying!
 
-  tree_switch_case_list (const tree_switch_case_list&);
+  tree_switch_case_list (const tree_switch_case_list&) = delete;
 
-  tree_switch_case_list& operator = (const tree_switch_case_list&);
+  tree_switch_case_list& operator = (const tree_switch_case_list&) = delete;
 };
 
 class
 tree_switch_command : public tree_command
 {
 public:
 
   tree_switch_command (int l = -1, int c = -1)
@@ -291,15 +291,15 @@ private:
   // Comment preceding SWITCH token.
   octave_comment_list *lead_comm;
 
   // Comment preceding ENDSWITCH token.
   octave_comment_list *trail_comm;
 
   // No copying!
 
-  tree_switch_command (const tree_switch_command&);
+  tree_switch_command (const tree_switch_command&) = delete;
 
-  tree_switch_command& operator = (const tree_switch_command&);
+  tree_switch_command& operator = (const tree_switch_command&) = delete;
 };
 
 #endif
 
diff --git a/libinterp/parse-tree/pt-stmt.h b/libinterp/parse-tree/pt-stmt.h
--- a/libinterp/parse-tree/pt-stmt.h
+++ b/libinterp/parse-tree/pt-stmt.h
@@ -115,19 +115,20 @@ private:
 
   // Expression to evaluate.
   tree_expression *expr;
 
   // Comment associated with this statement.
   octave_comment_list *comm;
 
   // No copying!
-  tree_statement (const tree_statement&);
 
-  tree_statement& operator = (const tree_statement&);
+  tree_statement (const tree_statement&) = delete;
+
+  tree_statement& operator = (const tree_statement&) = delete;
 };
 
 // A list of statements to evaluate.
 
 class
 tree_statement_list : public octave::base_list<tree_statement *>
 {
 public:
@@ -189,15 +190,15 @@ private:
   // Does this list of statements make up the body of a function?
   bool anon_function_body;
 
   // Does this list of statements make up the body of a script?
   bool script_body;
 
   // No copying!
 
-  tree_statement_list (const tree_statement_list&);
+  tree_statement_list (const tree_statement_list&) = delete;
 
-  tree_statement_list& operator = (const tree_statement_list&);
+  tree_statement_list& operator = (const tree_statement_list&) = delete;
 };
 
 #endif
 
diff --git a/libinterp/parse-tree/pt-unop.h b/libinterp/parse-tree/pt-unop.h
--- a/libinterp/parse-tree/pt-unop.h
+++ b/libinterp/parse-tree/pt-unop.h
@@ -72,19 +72,19 @@ protected:
 
   // The type of the expression.
   octave_value::unary_op etype;
 
 private:
 
   // No copying!
 
-  tree_unary_expression (const tree_unary_expression&);
+  tree_unary_expression (const tree_unary_expression&) = delete;
 
-  tree_unary_expression& operator = (const tree_unary_expression&);
+  tree_unary_expression& operator = (const tree_unary_expression&) = delete;
 };
 
 // Prefix expressions.
 
 class
 tree_prefix_expression : public tree_unary_expression
 {
 public:
@@ -111,19 +111,19 @@ public:
   void accept (tree_walker& tw);
 
   std::string profiler_name (void) const { return "prefix " + oper (); }
 
 private:
 
   // No copying!
 
-  tree_prefix_expression (const tree_prefix_expression&);
+  tree_prefix_expression (const tree_prefix_expression&) = delete;
 
-  tree_prefix_expression& operator = (const tree_prefix_expression&);
+  tree_prefix_expression& operator = (const tree_prefix_expression&) = delete;
 };
 
 // Postfix expressions.
 
 class
 tree_postfix_expression : public tree_unary_expression
 {
 public:
@@ -150,15 +150,15 @@ public:
   void accept (tree_walker& tw);
 
   std::string profiler_name (void) const { return "postfix " + oper (); }
 
 private:
 
   // No copying!
 
-  tree_postfix_expression (const tree_postfix_expression&);
+  tree_postfix_expression (const tree_postfix_expression&) = delete;
 
-  tree_postfix_expression& operator = (const tree_postfix_expression&);
+  tree_postfix_expression& operator = (const tree_postfix_expression&) = delete;
 };
 
 #endif
 
diff --git a/libinterp/parse-tree/pt-walk.h b/libinterp/parse-tree/pt-walk.h
--- a/libinterp/parse-tree/pt-walk.h
+++ b/libinterp/parse-tree/pt-walk.h
@@ -273,15 +273,15 @@ protected:
   tree_walker (void) { }
 
   virtual ~tree_walker (void) { }
 
 private:
 
   // No copying!
 
-  tree_walker (const tree_walker&);
+  tree_walker (const tree_walker&) = delete;
 
-  tree_walker& operator = (const tree_walker&);
+  tree_walker& operator = (const tree_walker&) = delete;
 };
 
 #endif
 
diff --git a/libinterp/parse-tree/pt.h b/libinterp/parse-tree/pt.h
--- a/libinterp/parse-tree/pt.h
+++ b/libinterp/parse-tree/pt.h
@@ -91,15 +91,15 @@ private:
   int line_num;
   int column_num;
 
   // Breakpoint flag: NULL if no breakpoint, or the condition if there is one
   std::string *bp;
 
   // No copying!
 
-  tree (const tree&);
+  tree (const tree&) = delete;
 
-  tree& operator = (const tree&);
+  tree& operator = (const tree&) = delete;
 };
 
 #endif
 
diff --git a/libinterp/parse-tree/token.h b/libinterp/parse-tree/token.h
--- a/libinterp/parse-tree/token.h
+++ b/libinterp/parse-tree/token.h
@@ -109,19 +109,19 @@ public:
   std::string superclass_class_name (void);
 
   std::string text_rep (void);
 
 private:
 
   // No copying!
 
-  token (const token& tok);
+  token (const token& tok) = delete;
 
-  token& operator = (const token& tok);
+  token& operator = (const token& tok) = delete;
 
   bool maybe_cmd;
   bool tspc;
   int line_num;
   int column_num;
   int tok_val;
   token_type type_tag;
   union
diff --git a/liboctave/array/Array.cc b/liboctave/array/Array.cc
--- a/liboctave/array/Array.cc
+++ b/liboctave/array/Array.cc
@@ -431,19 +431,19 @@ private:
           dest = do_permute (src + i * step, dest, lev-1);
       }
 
     return dest;
   }
 
   // No copying!
 
-  rec_permute_helper (const rec_permute_helper&);
-
-  rec_permute_helper& operator = (const rec_permute_helper&);
+  rec_permute_helper (const rec_permute_helper&) = delete;
+
+  rec_permute_helper& operator = (const rec_permute_helper&) = delete;
 
 public:
 
   template <typename T>
   void permute (const T *src, T *dest) const { do_permute (src, dest, top); }
 };
 
 template <typename T>
@@ -612,19 +612,19 @@ private:
         octave_idx_type d = cdim[lev];
         for (octave_idx_type i = 0; i < nn; i++)
           do_fill (val, dest + d*idx[lev].xelem (i), lev-1);
       }
   }
 
   // No copying!
 
-  rec_index_helper (const rec_index_helper&);
-
-  rec_index_helper& operator = (const rec_index_helper&);
+  rec_index_helper (const rec_index_helper&) = delete;
+
+  rec_index_helper& operator = (const rec_index_helper&) = delete;
 
 public:
 
   template <typename T>
   void index (const T *src, T *dest) const { do_index (src, dest, top); }
 
   template <typename T>
   void assign (const T *src, T *dest) const { do_assign (src, dest, top); }
@@ -697,19 +697,19 @@ private:
           do_resize_fill (src + k * sd, dest + k * dd, rfv, lev - 1);
 
         std::fill_n (dest + k * dd, dext[lev] - k * dd, rfv);
       }
   }
 
   // No copying!
 
-  rec_resize_helper (const rec_resize_helper&);
-
-  rec_resize_helper& operator = (const rec_resize_helper&);
+  rec_resize_helper (const rec_resize_helper&) = delete;
+
+  rec_resize_helper& operator = (const rec_resize_helper&) = delete;
 
 public:
 
   template <typename T>
   void resize_fill (const T* src, T *dest, const T& rfv) const
   { do_resize_fill (src, dest, rfv, n-1); }
 };
 
diff --git a/liboctave/array/idx-vector.h b/liboctave/array/idx-vector.h
--- a/liboctave/array/idx-vector.h
+++ b/liboctave/array/idx-vector.h
@@ -109,18 +109,20 @@ private:
 
     octave_refcount<int> count;
 
     bool err;
 
   private:
 
     // No copying!
-    idx_base_rep (const idx_base_rep&);
-    idx_base_rep& operator = (const idx_base_rep&);
+
+    idx_base_rep (const idx_base_rep&) = delete;
+
+    idx_base_rep& operator = (const idx_base_rep&) = delete;
   };
 
   // The magic colon index.
   class OCTAVE_API idx_colon_rep : public idx_base_rep
   {
   public:
     idx_colon_rep (void) { }
 
@@ -143,18 +145,20 @@ private:
 
     bool is_colon_equiv (octave_idx_type) const { return true; }
 
     std::ostream& print (std::ostream& os) const;
 
   private:
 
     // No copying!
-    idx_colon_rep (const idx_colon_rep& idx);
-    idx_colon_rep& operator = (const idx_colon_rep& idx);
+
+    idx_colon_rep (const idx_colon_rep& idx) = delete;
+
+    idx_colon_rep& operator = (const idx_colon_rep& idx) = delete;
   };
 
   // To distinguish the "direct" constructors that blindly trust the data.
   enum direct { DIRECT };
 
   // The integer range index.
   class OCTAVE_API idx_range_rep : public idx_base_rep
   {
@@ -205,18 +209,20 @@ private:
 
     Range unconvert (void) const;
 
     Array<octave_idx_type> as_array (void);
 
   private:
 
     // No copying!
-    idx_range_rep (const idx_range_rep& idx);
-    idx_range_rep& operator = (const idx_range_rep& idx);
+
+    idx_range_rep (const idx_range_rep& idx) = delete;
+
+    idx_range_rep& operator = (const idx_range_rep& idx) = delete;
 
     octave_idx_type start, len, step;
 
   };
 
   // The integer scalar index.
   class OCTAVE_API idx_scalar_rep : public idx_base_rep
   {
@@ -260,18 +266,20 @@ private:
 
     double unconvert (void) const;
 
     Array<octave_idx_type> as_array (void);
 
   private:
 
     // No copying!
-    idx_scalar_rep (const idx_scalar_rep& idx);
-    idx_scalar_rep& operator = (const idx_scalar_rep& idx);
+
+    idx_scalar_rep (const idx_scalar_rep& idx) = delete;
+
+    idx_scalar_rep& operator = (const idx_scalar_rep& idx) = delete;
 
     octave_idx_type data;
 
   };
 
   // The integer vector index.
   class OCTAVE_API idx_vector_rep : public idx_base_rep
   {
@@ -325,18 +333,20 @@ private:
 
     Array<double> unconvert (void) const;
 
     Array<octave_idx_type> as_array (void);
 
   private:
 
     // No copying!
-    idx_vector_rep (const idx_vector_rep& idx);
-    idx_vector_rep& operator = (const idx_vector_rep& idx);
+
+    idx_vector_rep (const idx_vector_rep& idx) = delete;
+
+    idx_vector_rep& operator = (const idx_vector_rep& idx) = delete;
 
     const octave_idx_type *data;
     octave_idx_type len;
     octave_idx_type ext;
 
     // This is a trick to allow user-given zero-based arrays to be used
     // as indices without copying.  If the following pointer is nonzero,
     // we do not own the data, but rather have an Array<octave_idx_type>
@@ -397,18 +407,20 @@ private:
 
     Array<bool> unconvert (void) const;
 
     Array<octave_idx_type> as_array (void);
 
   private:
 
     // No copying!
-    idx_mask_rep (const idx_mask_rep& idx);
-    idx_mask_rep& operator = (const idx_mask_rep& idx);
+
+    idx_mask_rep (const idx_mask_rep& idx) = delete;
+
+    idx_mask_rep& operator = (const idx_mask_rep& idx) = delete;
 
     const bool *data;
     octave_idx_type len;
     octave_idx_type ext;
 
     // FIXME: I'm not sure if this is a good design.  Maybe it would be
     // better to employ some sort of generalized iteration scheme.
     mutable octave_idx_type lsti;
diff --git a/liboctave/numeric/oct-fftw.h b/liboctave/numeric/oct-fftw.h
--- a/liboctave/numeric/oct-fftw.h
+++ b/liboctave/numeric/oct-fftw.h
@@ -97,19 +97,19 @@ public:
   {
     return instance_ok () ? instance->nthreads : 0;
   }
 
 private:
 
   // No copying!
 
-  octave_fftw_planner (const octave_fftw_planner&);
+  octave_fftw_planner (const octave_fftw_planner&) = delete;
 
-  octave_fftw_planner& operator = (const octave_fftw_planner&);
+  octave_fftw_planner& operator = (const octave_fftw_planner&) = delete;
 
   static octave_fftw_planner *instance;
 
   static void cleanup_instance (void) { delete instance; instance = 0; }
 
   void *
   do_create_plan (int dir, const int rank, const dim_vector dims,
                   octave_idx_type howmany, octave_idx_type stride,
@@ -242,19 +242,19 @@ public:
   {
     return instance_ok () ? instance->nthreads : 0;
   }
 
 private:
 
   // No copying!
 
-  octave_float_fftw_planner (const octave_float_fftw_planner&);
+  octave_float_fftw_planner (const octave_float_fftw_planner&) = delete;
 
-  octave_float_fftw_planner& operator = (const octave_float_fftw_planner&);
+  octave_float_fftw_planner& operator = (const octave_float_fftw_planner&) = delete;
 
   static octave_float_fftw_planner *instance;
 
   static void cleanup_instance (void) { delete instance; instance = 0; }
 
   void *
   do_create_plan (int dir, const int rank, const dim_vector dims,
                   octave_idx_type howmany, octave_idx_type stride,
diff --git a/liboctave/numeric/sparse-chol.cc b/liboctave/numeric/sparse-chol.cc
--- a/liboctave/numeric/sparse-chol.cc
+++ b/liboctave/numeric/sparse-chol.cc
@@ -123,19 +123,19 @@ namespace octave
 
       void drop_zeros (const cholmod_sparse *S);
 #endif
 
       octave_idx_type init (const chol_type& a, bool natural, bool force);
 
       // No copying!
 
-      sparse_chol_rep (const sparse_chol_rep&);
+      sparse_chol_rep (const sparse_chol_rep&) = delete;
 
-      sparse_chol_rep& operator = (const sparse_chol_rep&);
+      sparse_chol_rep& operator = (const sparse_chol_rep&) = delete;
     };
 
 #if defined (HAVE_CHOLMOD)
 
     // Can't use CHOLMOD_NAME(drop)(0.0, S, cm) because it doesn't treat
     // complex matrices.
 
     template <typename chol_type>
diff --git a/liboctave/numeric/sparse-qr.cc b/liboctave/numeric/sparse-qr.cc
--- a/liboctave/numeric/sparse-qr.cc
+++ b/liboctave/numeric/sparse-qr.cc
@@ -115,19 +115,19 @@ namespace octave
       template <typename RHS_T, typename RET_T>
       RET_T
       wide_solve (const RHS_T& b, octave_idx_type& info) const;
 
     private:
 
       // No copying!
 
-      sparse_qr_rep (const sparse_qr_rep&);
-
-      sparse_qr_rep& operator = (const sparse_qr_rep&);
+      sparse_qr_rep (const sparse_qr_rep&) = delete;
+
+      sparse_qr_rep& operator = (const sparse_qr_rep&) = delete;
     };
 
     template <typename SPARSE_T>
     ColumnVector
     sparse_qr<SPARSE_T>::sparse_qr_rep::Pinv (void) const
     {
 #if defined (HAVE_CXSPARSE)
 
diff --git a/liboctave/system/file-ops.h b/liboctave/system/file-ops.h
--- a/liboctave/system/file-ops.h
+++ b/liboctave/system/file-ops.h
@@ -128,19 +128,19 @@ namespace octave
     private:
 
       static file_ops *instance;
 
       static void cleanup_instance (void) { delete instance; instance = 0; }
 
       // No copying!
 
-      file_ops (const file_ops&);
+      file_ops (const file_ops&) = delete;
 
-      file_ops& operator = (const file_ops&);
+      file_ops& operator = (const file_ops&) = delete;
 
       static bool instance_ok (void);
 
       char m_dev_sep_char;
 
       char m_dir_sep_char;
       std::string m_dir_sep_str;
       std::string m_dir_sep_chars;
diff --git a/liboctave/system/mach-info.h b/liboctave/system/mach-info.h
--- a/liboctave/system/mach-info.h
+++ b/liboctave/system/mach-info.h
@@ -67,19 +67,19 @@ namespace octave
     // The floating point format for the current machine.
     mutable float_format native_float_fmt;
 
     // TRUE if the byte order on this system is big endian.
     mutable bool big_chief;
 
     // No copying!
 
-    mach_info (const mach_info&);
+    mach_info (const mach_info&) = delete;
 
-    mach_info& operator = (const mach_info&);
+    mach_info& operator = (const mach_info&) = delete;
   };
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
 OCTAVE_DEPRECATED ("use 'octave::mach_info' instead")
 typedef octave::mach_info oct_mach_info;
 
diff --git a/liboctave/system/oct-env.h b/liboctave/system/oct-env.h
--- a/liboctave/system/oct-env.h
+++ b/liboctave/system/oct-env.h
@@ -113,19 +113,19 @@ namespace octave
       void pathname_backup (std::string& path, int n) const;
 
       void error (int) const;
 
       void error (const std::string&) const;
 
       // No copying!
 
-      env (const env&);
+      env (const env&) = delete;
 
-      env& operator = (const env&);
+      env& operator = (const env&) = delete;
 
       // The real thing.
       static env *instance;
 
       static void cleanup_instance (void) { delete instance; instance = 0; }
 
       // TRUE means follow symbolic links that point to directories just
       // as if they are real directories.
diff --git a/liboctave/util/action-container.h b/liboctave/util/action-container.h
--- a/liboctave/util/action-container.h
+++ b/liboctave/util/action-container.h
@@ -49,19 +49,19 @@ public:
     virtual ~elem (void) { }
 
     friend class action_container;
 
   private:
 
     // No copying!
 
-    elem (const elem&);
+    elem (const elem&) = delete;
 
-    elem& operator = (const elem&);
+    elem& operator = (const elem&) = delete;
   };
 
   // An element that merely runs a void (*)(void) function.
 
   class fcn_elem : public elem
   {
   public:
     fcn_elem (void (*fptr) (void))
@@ -84,19 +84,19 @@ public:
       : e_fcn (fcn), e_arg (arg) { }
 
     void run (void) { e_fcn (e_arg); }
 
   private:
 
     // No copying!
 
-    fcn_arg_elem (const fcn_arg_elem&);
+    fcn_arg_elem (const fcn_arg_elem&) = delete;
 
-    fcn_arg_elem& operator = (const fcn_arg_elem&);
+    fcn_arg_elem& operator = (const fcn_arg_elem&) = delete;
 
     void (*e_fcn) (T);
     T e_arg;
   };
 
   // An element that stores a variable of type T along with a
   // void (*) (const T&) function pointer, and calls the function with
   // the parameter.
@@ -128,19 +128,19 @@ public:
 
   private:
 
     T *e_obj;
     void (T::*e_method) (void);
 
     // No copying!
 
-    method_elem (const method_elem&);
+    method_elem (const method_elem&) = delete;
 
-    method_elem operator = (const method_elem&);
+    method_elem operator = (const method_elem&) = delete;
   };
 
   // An element for calling a member function with a single argument
 
   template <typename T, typename A>
   class method_arg_elem : public elem
   {
   public:
@@ -152,19 +152,19 @@ public:
   private:
 
     T *e_obj;
     void (T::*e_method) (A);
     A e_arg;
 
     // No copying!
 
-    method_arg_elem (const method_arg_elem&);
+    method_arg_elem (const method_arg_elem&) = delete;
 
-    method_arg_elem operator = (const method_arg_elem&);
+    method_arg_elem operator = (const method_arg_elem&) = delete;
   };
 
   // An element for calling a member function with a single argument
 
   template <typename T, typename A>
   class method_crefarg_elem : public elem
   {
   public:
@@ -176,19 +176,19 @@ public:
   private:
 
     T *e_obj;
     void (T::*e_method) (const A&);
     A e_arg;
 
     // No copying!
 
-    method_crefarg_elem (const method_crefarg_elem&);
+    method_crefarg_elem (const method_crefarg_elem&) = delete;
 
-    method_crefarg_elem operator = (const method_crefarg_elem&);
+    method_crefarg_elem operator = (const method_crefarg_elem&) = delete;
   };
 
   // An element that stores arbitrary variable, and restores it.
 
   template <typename T>
   class restore_var_elem : public elem
   {
   public:
@@ -196,19 +196,19 @@ public:
       : e_ptr (&ref), e_val (val) { }
 
     void run (void) { *e_ptr = e_val; }
 
   private:
 
     // No copying!
 
-    restore_var_elem (const restore_var_elem&);
+    restore_var_elem (const restore_var_elem&) = delete;
 
-    restore_var_elem& operator = (const restore_var_elem&);
+    restore_var_elem& operator = (const restore_var_elem&) = delete;
 
     T *e_ptr, e_val;
   };
 
   // Deletes a class allocated using new.
 
   template <typename T>
   class delete_ptr_elem : public elem
@@ -220,19 +220,19 @@ public:
     void run (void) { delete e_ptr; }
 
   private:
 
     T *e_ptr;
 
     // No copying!
 
-    delete_ptr_elem (const delete_ptr_elem&);
+    delete_ptr_elem (const delete_ptr_elem&) = delete;
 
-    delete_ptr_elem operator = (const delete_ptr_elem&);
+    delete_ptr_elem operator = (const delete_ptr_elem&) = delete;
   };
 
   action_container (void) { }
 
   virtual ~action_container (void) { }
 
   virtual void add (elem *new_elem) = 0;
 
@@ -330,15 +330,15 @@ public:
   virtual size_t size (void) const = 0;
 
   bool empty (void) const { return size () == 0; }
 
 private:
 
   // No copying!
 
-  action_container (const action_container&);
+  action_container (const action_container&) = delete;
 
-  action_container& operator = (const action_container&);
+  action_container& operator = (const action_container&) = delete;
 };
 
 #endif
 
diff --git a/liboctave/util/cmd-edit.cc b/liboctave/util/cmd-edit.cc
--- a/liboctave/util/cmd-edit.cc
+++ b/liboctave/util/cmd-edit.cc
@@ -956,19 +956,19 @@ namespace octave
   private:
 
     FILE *input_stream;
 
     FILE *output_stream;
 
     // No copying!
 
-    default_command_editor (const default_command_editor&);
+    default_command_editor (const default_command_editor&) = delete;
 
-    default_command_editor& operator = (const default_command_editor&);
+    default_command_editor& operator = (const default_command_editor&) = delete;
   };
 
   std::string
   default_command_editor::do_readline (const std::string& prompt, bool& eof)
   {
     std::fputs (prompt.c_str (), output_stream);
     std::fflush (output_stream);
 
diff --git a/liboctave/util/cmd-edit.h b/liboctave/util/cmd-edit.h
--- a/liboctave/util/cmd-edit.h
+++ b/liboctave/util/cmd-edit.h
@@ -190,19 +190,19 @@ namespace octave
     static void set_initial_input (const std::string& text);
 
     static int insert_initial_input (void);
 
   private:
 
     // No copying!
 
-    command_editor (const command_editor&);
+    command_editor (const command_editor&) = delete;
 
-    command_editor& operator = (const command_editor&);
+    command_editor& operator = (const command_editor&) = delete;
 
     static bool instance_ok (void);
 
     static void make_command_editor (void);
 
     static int startup_handler (void);
 
     static int pre_input_handler (void);
diff --git a/liboctave/util/cmd-hist.h b/liboctave/util/cmd-hist.h
--- a/liboctave/util/cmd-hist.h
+++ b/liboctave/util/cmd-hist.h
@@ -116,19 +116,19 @@ namespace octave
     static void replace_entry (int, const std::string&);
 
     static void clean_up_and_save (const std::string& = "", int = -1);
 
   private:
 
     // No copying!
 
-    command_history (const command_history&);
+    command_history (const command_history&) = delete;
 
-    command_history& operator = (const command_history&);
+    command_history& operator = (const command_history&) = delete;
 
     static bool instance_ok (void);
 
     static void make_command_history (void);
 
     // The real thing.
     static command_history *instance;
 
diff --git a/liboctave/util/oct-locbuf.h b/liboctave/util/oct-locbuf.h
--- a/liboctave/util/oct-locbuf.h
+++ b/liboctave/util/oct-locbuf.h
@@ -46,18 +46,20 @@ public:
   ~octave_local_buffer (void) { delete [] data; }
 
   operator T *() const { return data; }
 
 private:
   T *data;
 
   // No copying!
-  octave_local_buffer (const octave_local_buffer&);
-  octave_local_buffer& operator = (const octave_local_buffer&);
+
+  octave_local_buffer (const octave_local_buffer&) = delete;
+
+  octave_local_buffer& operator = (const octave_local_buffer&) = delete;
 };
 
 // For buffers of POD types, we'll be smarter.  There is one thing
 // that differentiates a local buffer from a dynamic array - the local
 // buffers, if not manipulated improperly, have a FIFO semantics,
 // meaning that if buffer B is allocated after buffer A, B *must* be
 // deallocated before A.  This is *guaranteed* if you use local buffer
 // exclusively through the OCTAVE_LOCAL_BUFFER macro, because the C++
@@ -100,18 +102,20 @@ private:
 
   // Pointer to the current chunk.
   char *cnk;
 
   // Pointer to the beginning of the most recent allocation.
   char *dat;
 
   // No copying!
-  octave_chunk_buffer (const octave_chunk_buffer&);
-  octave_chunk_buffer& operator = (const octave_chunk_buffer&);
+
+  octave_chunk_buffer (const octave_chunk_buffer&) = delete;
+
+  octave_chunk_buffer& operator = (const octave_chunk_buffer&) = delete;
 };
 
 // This specializes octave_local_buffer to use the chunked buffer
 // mechanism for POD types.
 #define SPECIALIZE_POD_BUFFER(TYPE)                             \
   template <>                                                   \
   class octave_local_buffer<TYPE> : private octave_chunk_buffer \
   {                                                             \
diff --git a/liboctave/util/oct-mutex.h b/liboctave/util/oct-mutex.h
--- a/liboctave/util/oct-mutex.h
+++ b/liboctave/util/oct-mutex.h
@@ -124,20 +124,21 @@ public:
   }
 
   bool ok (void) const { return lock_result; }
 
   operator bool (void) const { return ok (); }
 
 private:
 
-  // No copying or default constructor!
-  octave_autolock (void);
-  octave_autolock (const octave_autolock&);
-  octave_autolock& operator = (const octave_autolock&);
+  // No copying.
+
+  octave_autolock (const octave_autolock&) = delete;
+
+  octave_autolock& operator = (const octave_autolock&) = delete;
 
 private:
   octave_mutex mutex;
   bool lock_result;
 };
 
 class
 OCTAVE_API
diff --git a/liboctave/util/oct-shlib.cc b/liboctave/util/oct-shlib.cc
--- a/liboctave/util/oct-shlib.cc
+++ b/liboctave/util/oct-shlib.cc
@@ -174,19 +174,19 @@ namespace octave
     // library.  Leave it here for possible future use.
 
     bool is_open (void) const { return (library != 0); }
 
   private:
 
     // No copying!
 
-    octave_dlopen_shlib (const octave_dlopen_shlib&);
+    octave_dlopen_shlib (const octave_dlopen_shlib&) = delete;
 
-    octave_dlopen_shlib& operator = (const octave_dlopen_shlib&);
+    octave_dlopen_shlib& operator = (const octave_dlopen_shlib&) = delete;
 
     void *library;
   };
 
   octave_dlopen_shlib::octave_dlopen_shlib (const std::string& f)
     : dynamic_library::dynlib_rep (f), library (0)
   {
     int flags = 0;
@@ -261,19 +261,19 @@ namespace octave
                   dynamic_library::name_mangler mangler = 0);
 
     bool is_open (void) const { return (library != 0); }
 
   private:
 
     // No copying!
 
-    octave_shl_load_shlib (const octave_shl_load_shlib&);
+    octave_shl_load_shlib (const octave_shl_load_shlib&) = delete;
 
-    octave_shl_load_shlib& operator = (const octave_shl_load_shlib&);
+    octave_shl_load_shlib& operator = (const octave_shl_load_shlib&) = delete;
 
     shl_t library;
   };
 
   octave_shl_load_shlib::octave_shl_load_shlib (const std::string& f)
     : dynamic_library::dynlib_rep (f), library (0)
   {
     file = f;
@@ -329,19 +329,19 @@ namespace octave
                   dynamic_library::name_mangler mangler = 0);
 
     bool is_open (void) const { return (handle != 0); }
 
   private:
 
     // No copying!
 
-    octave_w32_shlib (const octave_w32_shlib&);
+    octave_w32_shlib (const octave_w32_shlib&) = delete;
 
-    octave_w32_shlib& operator = (const octave_w32_shlib&);
+    octave_w32_shlib& operator = (const octave_w32_shlib&) = delete;
 
     HINSTANCE handle;
   };
 
   static void
   set_dll_directory (const std::string& dir = "")
   {
     SetDllDirectory (dir.empty () ? 0 : dir.c_str ());
@@ -432,19 +432,19 @@ namespace octave
     void close (dynamic_library::close_hook cl_hook = 0);
 
     bool is_open (void) const {return (handle != 0); }
 
   private:
 
     // No copying!
 
-    octave_dyld_shlib (const octave_dyld_shlib&);
+    octave_dyld_shlib (const octave_dyld_shlib&) = delete;
 
-    octave_dyld_shlib& operator = (const octave_dyld_shlib&);
+    octave_dyld_shlib& operator = (const octave_dyld_shlib&) = delete;
 
     NSObjectFileImage img;
     NSModule handle;
   };
 
   octave_dyld_shlib::octave_dyld_shlib (const std::string& f)
     : dynamic_library::dynlib_rep (f), handle (0)
   {
diff --git a/liboctave/util/oct-sort.h b/liboctave/util/oct-sort.h
--- a/liboctave/util/oct-sort.h
+++ b/liboctave/util/oct-sort.h
@@ -218,19 +218,19 @@ private:
     //
     // so we could cut the storage for this, but it's a minor amount,
     // and keeping all the info explicit simplifies the code.
     octave_idx_type n;
     struct s_slice pending[MAX_MERGE_PENDING];
 
     // No copying!
 
-    MergeState (const MergeState&);
+    MergeState (const MergeState&) = delete;
 
-    MergeState& operator = (const MergeState&);
+    MergeState& operator = (const MergeState&) = delete;
   };
 
   compare_fcn_type compare;
 
   MergeState *ms;
 
   template <typename Comp>
   void binarysort (T *data, octave_idx_type nel,
@@ -326,19 +326,19 @@ private:
 
   template <typename Comp>
   void nth_element (T *data, octave_idx_type nel,
                     octave_idx_type lo, octave_idx_type up,
                     Comp comp);
 
   // No copying!
 
-  octave_sort (const octave_sort&);
+  octave_sort (const octave_sort&) = delete;
 
-  octave_sort& operator = (const octave_sort&);
+  octave_sort& operator = (const octave_sort&) = delete;
 };
 
 template <typename T>
 class
 vec_index
 {
 public:
   T vec;
diff --git a/liboctave/util/pathsearch.h b/liboctave/util/pathsearch.h
--- a/liboctave/util/pathsearch.h
+++ b/liboctave/util/pathsearch.h
@@ -168,19 +168,19 @@ namespace octave
       static static_members *instance;
 
       static void cleanup_instance (void) { delete instance; instance = 0; }
 
       static bool instance_ok (void);
 
       // No copying!
 
-      static_members (const static_members&);
+      static_members (const static_members&) = delete;
 
-      static_members& operator = (const static_members&);
+      static_members& operator = (const static_members&) = delete;
 
       char xpath_sep_char;
 
       std::string xpath_sep_str;
     };
   };
 }
 
diff --git a/liboctave/util/singleton-cleanup.h b/liboctave/util/singleton-cleanup.h
--- a/liboctave/util/singleton-cleanup.h
+++ b/liboctave/util/singleton-cleanup.h
@@ -61,15 +61,15 @@ private:
 
   void do_add (fptr f)
   {
     fcn_list.insert (f);
   }
 
   // No copying!
 
-  singleton_cleanup_list (const singleton_cleanup_list&);
+  singleton_cleanup_list (const singleton_cleanup_list&) = delete;
 
-  singleton_cleanup_list& operator = (const singleton_cleanup_list&);
+  singleton_cleanup_list& operator = (const singleton_cleanup_list&) = delete;
 };
 
 #endif
 
diff --git a/liboctave/util/unwind-prot.h b/liboctave/util/unwind-prot.h
--- a/liboctave/util/unwind-prot.h
+++ b/liboctave/util/unwind-prot.h
@@ -100,19 +100,19 @@ namespace octave
   protected:
 
     std::stack<elem *> lifo;
 
   private:
 
     // No copying!
 
-    unwind_protect (const unwind_protect&);
+    unwind_protect (const unwind_protect&) = delete;
 
-    unwind_protect& operator = (const unwind_protect&);
+    unwind_protect& operator = (const unwind_protect&) = delete;
   };
 
   // Like unwind_protect, but this one will guard against the possibility
   // of seeing an exception (or interrupt) in the cleanup actions.
   // Not that we can do much about it, but at least we won't crash.
 
   class
   OCTAVE_API
@@ -140,19 +140,19 @@ namespace octave
             }
         }
     }
 
   private:
 
     // No copying!
 
-    unwind_protect_safe (const unwind_protect_safe&);
+    unwind_protect_safe (const unwind_protect_safe&) = delete;
 
-    unwind_protect_safe& operator = (const unwind_protect_safe&);
+    unwind_protect_safe& operator = (const unwind_protect_safe&) = delete;
   };
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
 OCTAVE_DEPRECATED ("use 'octave::unwind_protect' instead")
 typedef octave::unwind_protect unwind_protect;
 
diff --git a/liboctave/util/url-transfer.cc b/liboctave/util/url-transfer.cc
--- a/liboctave/util/url-transfer.cc
+++ b/liboctave/util/url-transfer.cc
@@ -665,19 +665,19 @@ namespace octave
     // the handle is released.  The curl_handle::curl_handle_rep class
     // contains the pointer to the CURL handle and so is the best
     // candidate for storing the strings as well. (bug #36717)
     std::string url;
     std::string userpwd;
 
     // No copying!
 
-    curl_transfer (const curl_transfer&);
+    curl_transfer (const curl_transfer&) = delete;
 
-    curl_transfer& operator = (const curl_transfer&);
+    curl_transfer& operator = (const curl_transfer&) = delete;
 
     void init (const std::string& user, const std::string& passwd,
                std::istream& is, std::ostream& os)
     {
       // No data transfer by default
       SETOPT (CURLOPT_NOBODY, 1);
 
       // Set the username and password
diff --git a/liboctave/util/url-transfer.h b/liboctave/util/url-transfer.h
--- a/liboctave/util/url-transfer.h
+++ b/liboctave/util/url-transfer.h
@@ -153,19 +153,19 @@ namespace octave
     std::string errmsg;
     std::istream *curr_istream;
     std::ostream *curr_ostream;
 
   private:
 
     // No copying!
 
-    base_url_transfer (const base_url_transfer&);
+    base_url_transfer (const base_url_transfer&) = delete;
 
-    base_url_transfer& operator = (const base_url_transfer&);
+    base_url_transfer& operator = (const base_url_transfer&) = delete;
   };
 
   class
   OCTAVE_API
   url_transfer
   {
   public:
 
