# HG changeset patch
# User jwe
# Date 1174616351 0
#      Fri Mar 23 02:19:11 2007 +0000
# Node ID 5bec61ae1576b7336f568cccde53e828efae0c7b
# Parent  ff87ad14403f348605cc8e298bd78c9b1f260fe6
[project @ 2007-03-23 02:19:10 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,10 +1,13 @@
 2007-03-22  John W. Eaton  <jwe@octave.org>
 
+	* plot/drawnow.m: Check and optionally, set, the __modified__
+	property of each figure.
+
 	* plot/__go_draw_axes__.m: If no real data, plot a point at Inf,
 	Inf to show axes.  From Daniel J Sebald <daniel.sebald@ieee.org>.
 
 2007-03-21  John W. Eaton  <jwe@octave.org>
 
 	* linear-algebra/null.m: Set elements of retval with magnitudes
 	less than eps to 0.
 
diff --git a/scripts/plot/drawnow.m b/scripts/plot/drawnow.m
--- a/scripts/plot/drawnow.m
+++ b/scripts/plot/drawnow.m
@@ -41,26 +41,30 @@ function drawnow (term, file)
       end_unwind_protect
     else
       error ("drawnow: nothing to draw");
     endif
   elseif (nargin == 0)
     for h = __go_figure_handles__ ()
       if (! (isnan (h) || h == 0))
 	f = get (h);
-	plot_stream = f.__plot_stream__;
-	figure_is_visible = strcmp (f.visible, "on");
-	if (figure_is_visible)
-	  if (isempty (plot_stream))
-	    plot_stream = open_gnuplot_stream (h);
+	if (f.__modified__)
+	  plot_stream = f.__plot_stream__;
+	  figure_is_visible = strcmp (f.visible, "on");
+	  if (figure_is_visible)
+	    if (isempty (plot_stream))
+	      plot_stream = open_gnuplot_stream (h);
+	    endif
+	    __go_draw_figure__ (f, plot_stream);
+	  elseif (! isempty (plot_stream))
+	    pclose (plot_stream);
+	    set (h, "__plot_stream__", []);
 	  endif
-	  __go_draw_figure__ (f, plot_stream);
-	elseif (! isempty (plot_stream))
-	  pclose (plot_stream);
-	  set (h, "__plot_stream__", []);
+	  "setting"
+	  set (h, "__modified__", false);
 	endif
 	__request_drawnow__ (false);
       endif
     endfor
   else
     print_usage ();
   endif
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,11 +1,34 @@
 2007-03-22  John W. Eaton  <jwe@octave.org>
 
-	* src/parse.y (Fautoload): Use warning_with_id.
+	* graphics.cc (base_graphics_object::mark_modified):
+	New virtual function.
+	(base_properties::__modified__): New data member.
+	(base_properties::base_properties): Initialize it.
+	(graphics_object::mark_modified, base_properties::mark_modified, 
+	root_figure::mark_modified, figure::mark_modified,
+	axes::mark_modified, line::mark_modified, text::mark_modified,
+	image::mark_modified, surface::mark_modified,
+	root_figure::root_figure_properties::mark_modified,
+	figure::figure_properties::mark_modified,
+	axes::axes_properties::mark_modified,
+	line::line_properties::mark_modified,
+	text::text_properties::mark_modified,
+	image::image_properties::mark_modified,
+	surface::surface_properties::mark_modified): New functions.
+	(figure::figure_properties::set, figure::figure_properties::get,
+	axes::axes_properties::set, axes::axes_properties::get,
+	line::line_properties::set, line::line_properties::get,
+	text::text_properties::set, text::text_properties::get,
+	image::image_properties::set, image::image_properties::get,
+	surface::surface_properties::set, surface::surface_properties::get):
+	Handle __modified__ property.
+
+	* parse.y (Fautoload): Use warning_with_id.
 
 2007-03-21  John W. Eaton  <jwe@octave.org>
 
 	* DLD-FUNCTIONS/__qp__.cc (ABS): Delete.  Use std::abs instead.
 	(null): Set elements of retval with magnitudes less than eps to 0.
 
 	* error.cc (Fwarning): Allow setting options with struct.
 	If setting options, return previous state.
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -391,16 +391,21 @@ public:
   friend class graphics_object;
 
   base_graphics_object (void) : count (1) { }
 
   base_graphics_object (const base_graphics_object&) { }
 
   virtual ~base_graphics_object (void) { }
 
+  virtual void mark_modified (void)
+  {
+    error ("base_graphics_object::mark_modified: invalid graphics object");
+  }
+
   virtual void override_defaults (base_graphics_object&)
   {
     error ("base_graphics_object::override_defaults: invalid graphics object");
   }
 
   virtual void set_from_list (property_list&)
   {
     error ("base_graphics_object::set_from_list: invalid graphics object");
@@ -513,16 +518,18 @@ public:
   }
 
   ~graphics_object (void)
   {
     if (--rep->count == 0)
       delete rep;
   }
 
+  void mark_modified (void) { rep->mark_modified (); }
+
   void override_defaults (base_graphics_object& obj)
   {
     rep->override_defaults (obj);
   }
 
   void set_from_list (property_list& plist)
   {
     rep->set_from_list (plist);
@@ -996,22 +1003,30 @@ maybe_set_children (const Matrix& kids, 
 }
 
 class base_properties
 {
 public:
   base_properties (const std::string& t = "unknown",
 		   const graphics_handle& mh = octave_NaN,
 		   const graphics_handle& p = octave_NaN)
-    : type (t), __myhandle__ (mh), parent (p), children () { }
+    : type (t), __modified__ (true), __myhandle__ (mh), parent (p),
+      children () { }
 
   virtual ~base_properties (void) { }
 
   virtual std::string graphics_object_name (void) const = 0;
 
+  void mark_modified (void)
+  {
+    __modified__ = true;
+    graphics_object parent_obj = gh_manager::get_object (parent);
+    parent_obj.mark_modified ();
+  }
+
   void override_defaults (base_graphics_object& obj)
   {
     graphics_object parent_obj = gh_manager::get_object (parent);
     parent_obj.override_defaults (obj);
   }
 
   // Look through DEFAULTS for properties with given CLASS_NAME, and
   // apply them to the current object with set (virtual method).
@@ -1114,16 +1129,17 @@ public:
     octave_idx_type n = children.numel ();
 
     for (octave_idx_type i = 0; i < n; i++)
       gh_manager::free (children(i));
   }
 
 protected:
   std::string type;
+  bool __modified__;
   graphics_handle __myhandle__;
   graphics_handle parent;
   Matrix children;
 };
 
 // ---------------------------------------------------------------------
 
 class root_figure : public base_graphics_object
@@ -1207,16 +1223,18 @@ public:
 public:
 
   root_figure (void) : properties (), default_properties () { }
 
   ~root_figure (void) { properties.delete_children (); }
 
   std::string type (void) const { return properties.graphics_object_name (); }
 
+  void mark_modified (void) { }
+
   void override_defaults (base_graphics_object& obj)
   {
     // Now override with our defaults.  If the default_properties
     // list includes the properties for all defaults (line,
     // surface, etc.) then we don't have to know the type of OBJ
     // here, we just call its set function and let it decide which
     // properties from the list to use.
     obj.set_from_list (default_properties);
@@ -1328,18 +1346,25 @@ public:
 	visible ("on"),
 	paperorientation ("portrait")
     { }
 
     ~figure_properties (void) { }
 
     void set (const property_name& name, const octave_value& val)
     {
+      bool modified = true;
+
       if (name.compare ("children"))
 	children = maybe_set_children (children, val);
+      else if (name.compare ("__modified__"))
+	{
+	  __modified__ = val.bool_value ();
+	  modified = false;
+	}
       else if (name.compare ("__plot_stream__"))
 	__plot_stream__ = val;
       else if (name.compare ("nextplot"))
 	nextplot = val;
       else if (name.compare ("closerequestfcn"))
 	closerequestfcn = val;
       else if (name.compare ("currentaxes"))
 	{
@@ -1362,26 +1387,33 @@ public:
 		xset (0, "currentfigure", __myhandle__);
 
 	      visible = val;
 	    }
 	}
       else if (name.compare ("paperorientation"))
 	paperorientation = val;
       else
-	warning ("set: invalid property `%s'", name.c_str ());
+	{
+	  modified = false;
+	  warning ("set: invalid property `%s'", name.c_str ());
+	}
+
+      if (modified)
+	mark_modified ();
     }
 
     octave_value get (void) const
     {
       Octave_map m;
 
       m.assign ("type", type);
       m.assign ("parent", parent);
       m.assign ("children", children);
+      m.assign ("__modified__", __modified__);
       m.assign ("__plot_stream__", __plot_stream__);
       m.assign ("nextplot", nextplot);
       m.assign ("closerequestfcn", closerequestfcn);
       m.assign ("currentaxes", nan_to_empty (currentaxes));
       m.assign ("colormap", colormap);
       m.assign ("visible", visible);
       m.assign ("paperorientation", paperorientation);
 
@@ -1393,16 +1425,18 @@ public:
       octave_value retval;
 
       if (name.compare ("type"))
 	retval = type;
       else if (name.compare ("parent"))
 	retval = parent;
       else if (name.compare ("children"))
 	retval = children;
+      else if (name.compare ("__modified__"))
+	retval = __modified__;
       else if (name.compare ("__plot_stream__"))
 	retval = __plot_stream__;
       else if (name.compare ("nextplot"))
 	retval = nextplot;
       else if (name.compare ("closerequestfcn"))
 	retval = closerequestfcn;
       else if (name.compare ("currentaxes"))
 	retval = nan_to_empty (currentaxes);
@@ -1438,17 +1472,17 @@ public:
 
     std::string graphics_object_name (void) const { return go_name; }
 
     static property_list::pval_map_type factory_defaults (void)
     {
       property_list::pval_map_type m;
 
       m["nextplot"] = "replace";
-      //      m["closerequestfcn"] = make_fcn_handle ("closereq");
+      // m["closerequestfcn"] = make_fcn_handle ("closereq");
       m["colormap"] = colormap_property ();
       m["visible"] = "on";
       m["paperorientation"] = "portrait";
 
       return m;
     }
 
   private:
@@ -1475,16 +1509,18 @@ public:
   ~figure (void)
   {
     properties.delete_children ();
     properties.close ();
   }
 
   std::string type (void) const { return properties.graphics_object_name (); }
 
+  void mark_modified (void) { properties.mark_modified (); }
+
   void override_defaults (base_graphics_object& obj)
   {
     // Allow parent (root figure) to override first (properties knows how
     // to find the parent object).
     properties.override_defaults (obj);
 
     // Now override with our defaults.  If the default_properties
     // list includes the properties for all defaults (line,
@@ -1633,20 +1669,27 @@ public:
       touterposition(3) = 1;
       outerposition = touterposition;
     }
 
     ~axes_properties (void) { }
 
     void set (const property_name& name, const octave_value& val)
     {
+      bool modified = true;
+
       if (name.compare ("parent"))
 	set_parent (val);
       else if (name.compare ("children"))
 	children = maybe_set_children (children, val);
+      else if (name.compare ("__modified__"))
+	{
+	  __modified__ = val.bool_value ();
+	  modified = false;
+	}
       else if (name.compare ("position"))
 	position = val;
       else if (name.compare ("title"))
 	{
 	  graphics_handle h = ::reparent (val, "set", "title",
 					  __myhandle__, false);
 	  if (! error_state)
 	    {
@@ -1796,17 +1839,23 @@ public:
 	zdir = val;
       else if (name.compare ("view"))
 	view = val;
       else if (name.compare ("nextplot"))
 	nextplot = val;
       else if (name.compare ("outerposition"))
 	outerposition = val;
       else
-	warning ("set: invalid property `%s'", name.c_str ());
+	{
+	  modified = false;
+	  warning ("set: invalid property `%s'", name.c_str ());
+	}
+
+      if (modified)
+	mark_modified ();
     }
 
     void set_defaults (base_graphics_object& obj, const std::string& mode)
     {
       position = Matrix ();
       title = octave_NaN;
       box = "on";
       key = "off";
@@ -1890,16 +1939,17 @@ public:
 	ylabel = gh_manager::make_graphics_handle ("text", __myhandle__);
 
       if (xisnan (zlabel))
 	zlabel = gh_manager::make_graphics_handle ("text", __myhandle__);
 
       m.assign ("type", type);
       m.assign ("parent", parent);
       m.assign ("children", children);
+      m.assign ("__modified__", __modified__);
       m.assign ("position", position);
       m.assign ("title", title);
       m.assign ("box", box);
       m.assign ("key", key);
       m.assign ("keybox", keybox);
       m.assign ("keypos", keypos);
       m.assign ("dataaspectratio", dataaspectratio);
       m.assign ("dataaspectratiomode", dataaspectratiomode);
@@ -1948,16 +1998,18 @@ public:
       octave_value retval;
 
       if (name.compare ("type"))
 	retval = type;
       else if (name.compare ("parent"))
 	retval = parent;
       else if (name.compare ("children"))
 	retval = children;
+      else if (name.compare ("__modified__"))
+	retval = __modified__;
       else if (name.compare ("position"))
 	retval = position;
       else if (name.compare ("title"))
 	{
 	  if (xisnan (title))
 	    title = gh_manager::make_graphics_handle ("text", __myhandle__);
 
 	  retval = title;
@@ -2224,16 +2276,18 @@ public:
   {
     properties.override_defaults (*this);
   }
 
   ~axes (void) { properties.delete_children (); }
 
   std::string type (void) const { return properties.graphics_object_name (); }
 
+  void mark_modified (void) { properties.mark_modified (); }
+
   void override_defaults (base_graphics_object& obj)
   {
     // Allow parent (figure) to override first (properties knows how
     // to find the parent object).
     properties.override_defaults (obj);
 
     // Now override with our defaults.  If the default_properties
     // list includes the properties for all defaults (line,
@@ -2352,20 +2406,27 @@ public:
 	marker ("none"),
 	markersize (1),
 	keylabel ("") { }
 
     ~line_properties (void) { }
 
     void set (const property_name& name, const octave_value& val)
     {
+      bool modified = true;
+
       if (name.compare ("parent"))
 	set_parent (val);
       else if (name.compare ("children"))
 	children = maybe_set_children (children, val);
+      else if (name.compare ("__modified__"))
+	{
+	  __modified__ = val.bool_value ();
+	  modified = false;
+	}
       else if (name.compare ("xdata"))
 	xdata = val;
       else if (name.compare ("ydata"))
 	ydata = val;
       else if (name.compare ("zdata"))
 	zdata = val;
       else if (name.compare ("ldata"))
 	ldata = val;
@@ -2383,26 +2444,33 @@ public:
 	linewidth = val;
       else if (name.compare ("marker"))
 	marker = val;
       else if (name.compare ("markersize"))
 	markersize = val;
       else if (name.compare ("keylabel"))
 	keylabel = val;
       else
-	warning ("set: invalid property `%s'", name.c_str ());
+	{
+	  modified = false;
+	  warning ("set: invalid property `%s'", name.c_str ());
+	}
+
+      if (modified)
+	mark_modified ();
     }
 
     octave_value get (void) const
     {
       Octave_map m;
 
       m.assign ("type", type);
       m.assign ("parent", parent);
       m.assign ("children", children);
+      m.assign ("__modified__", __modified__);
       m.assign ("xdata", xdata);
       m.assign ("ydata", ydata);
       m.assign ("zdata", zdata);
       m.assign ("ldata", ldata);
       m.assign ("udata", udata);
       m.assign ("xldata", xldata);
       m.assign ("xudata", xudata);
       m.assign ("color", color);
@@ -2420,16 +2488,18 @@ public:
       octave_value retval;
 
       if (name.compare ("type"))
 	retval = type;
       else if (name.compare ("parent"))
 	retval = parent;
       else if (name.compare ("children"))
 	retval = children;
+      else if (name.compare ("__modified__"))
+	retval = __modified__;
       else if (name.compare ("xdata"))
 	retval = xdata;
       else if (name.compare ("ydata"))
 	retval = ydata;
       else if (name.compare ("zdata"))
 	retval = zdata;
       else if (name.compare ("ldata"))
 	retval = ldata;
@@ -2506,16 +2576,18 @@ public:
   {
     properties.override_defaults (*this);
   }
 
   ~line (void) { properties.delete_children (); }
 
   std::string type (void) const { return properties.graphics_object_name (); }
 
+  void mark_modified (void) { properties.mark_modified (); }
+
   void override_defaults (base_graphics_object& obj)
   {
     // Allow parent (figure) to override first (properties knows how
     // to find the parent object).
     properties.override_defaults (obj);
   }
 
   void set_from_list (property_list& plist)
@@ -2566,39 +2638,53 @@ public:
 	position (Matrix (1, 3, 0.0)),
 	horizontalalignment ("left")
     { }
 
     ~text_properties (void) { }
 
     void set (const property_name& name, const octave_value& val)
     {
+      bool modified = true;
+
       if (name.compare ("parent"))
 	set_parent (val);
       else if (name.compare ("children"))
 	children = maybe_set_children (children, val);
+      else if (name.compare ("__modified__"))
+	{
+	  __modified__ = val.bool_value ();
+	  modified = false;
+	}
       else if (name.compare ("string"))
 	string = val;
       else if (name.compare ("units"))
 	units = val;
       else if (name.compare ("position"))
 	position = val;
       else if (name.compare ("horizontalalignment"))
 	horizontalalignment = val;
       else
-	warning ("set: invalid property `%s'", name.c_str ());
+	{
+	  modified = false;
+	  warning ("set: invalid property `%s'", name.c_str ());
+	}
+
+      if (modified)
+	mark_modified ();
     }
 
     octave_value get (void) const
     {
       Octave_map m;
 
       m.assign ("type", type);
       m.assign ("parent", parent);
       m.assign ("children", children);
+      m.assign ("__modified__", __modified__);
       m.assign ("string", string);
       m.assign ("units", units);
       m.assign ("position", position);
       m.assign ("horizontalalignment", horizontalalignment);
 
       return m;
     }
 
@@ -2607,16 +2693,18 @@ public:
       octave_value retval;
 
       if (name.compare ("type"))
 	retval = type;
       else if (name.compare ("parent"))
 	retval = parent;
       else if (name.compare ("children"))
 	retval = children;
+      else if (name.compare ("__modified__"))
+	retval = __modified__;
       else if (name.compare ("string"))
 	retval = string;
       else if (name.compare ("units"))
 	retval = units;
       else if (name.compare ("position"))
 	retval = position;
       else if (name.compare ("horizontalalignment"))
 	retval = horizontalalignment;
@@ -2657,16 +2745,18 @@ public:
   {
     properties.override_defaults (*this);
   }
 
   ~text (void) { properties.delete_children (); }
 
   std::string type (void) const { return properties.graphics_object_name (); }
 
+  void mark_modified (void) { properties.mark_modified (); }
+
   void override_defaults (base_graphics_object& obj)
   {
     // Allow parent (figure) to override first (properties knows how
     // to find the parent object).
     properties.override_defaults (obj);
   }
 
   void set_from_list (property_list& plist)
@@ -2716,37 +2806,51 @@ public:
 	xdata (Matrix ()),
 	ydata (Matrix ())
     { }
 
     ~image_properties (void) { }
 
     void set (const property_name& name, const octave_value& val)
     {
+      bool modified = true;
+
       if (name.compare ("parent"))
 	set_parent (val);
       else if (name.compare ("children"))
 	children = maybe_set_children (children, val);
+      else if (name.compare ("__modified__"))
+	{
+	  __modified__ = val.bool_value ();
+	  modified = false;
+	}
       else if (name.compare ("cdata"))
 	cdata = val;
       else if (name.compare ("xdata"))
 	xdata = val;
       else if (name.compare ("ydata"))
 	ydata = val;
       else
-	warning ("set: invalid property `%s'", name.c_str ());
+	{
+	  modified = false;
+	  warning ("set: invalid property `%s'", name.c_str ());
+	}
+
+      if (modified)
+	mark_modified ();
     }
 
     octave_value get (void) const
     {
       Octave_map m;
 
       m.assign ("type", type);
       m.assign ("parent", parent);
       m.assign ("children", children);
+      m.assign ("__modified__", __modified__);
       m.assign ("cdata", cdata);
       m.assign ("xdata", xdata);
       m.assign ("ydata", ydata);
 
       return m;
     }
 
     octave_value get (const property_name& name) const
@@ -2754,16 +2858,18 @@ public:
       octave_value retval;
 
       if (name.compare ("type"))
 	retval = type;
       else if (name.compare ("parent"))
 	retval = parent;
       else if (name.compare ("children"))
 	retval = children;
+      else if (name.compare ("__modified__"))
+	retval = __modified__;
       else if (name.compare ("cdata"))
 	retval = cdata;
       else if (name.compare ("xdata"))
 	retval = xdata;
       else if (name.compare ("ydata"))
 	retval = ydata;
       else
 	warning ("get: invalid property `%s'", name.c_str ());
@@ -2800,16 +2906,18 @@ public:
   {
     properties.override_defaults (*this);
   }
 
   ~image (void) { properties.delete_children (); }
 
   std::string type (void) const { return properties.graphics_object_name (); }
 
+  void mark_modified (void) { properties.mark_modified (); }
+
   void override_defaults (base_graphics_object& obj)
   {
     // Allow parent (figure) to override first (properties knows how
     // to find the parent object).
     properties.override_defaults (obj);
   }
 
   void set_from_list (property_list& plist)
@@ -2860,39 +2968,53 @@ public:
 	zdata (Matrix ()),
 	keylabel ("")
     { }
 
     ~surface_properties (void) { }
 
     void set (const property_name& name, const octave_value& val)
     {
+      bool modified = true;
+
       if (name.compare ("parent"))
 	set_parent (val);
       else if (name.compare ("children"))
 	children = maybe_set_children (children, val);
+      else if (name.compare ("__modified__"))
+	{
+	  __modified__ = val.bool_value ();
+	  modified = false;
+	}
       else if (name.compare ("xdata"))
 	xdata = val;
       else if (name.compare ("ydata"))
 	ydata = val;
       else if (name.compare ("zdata"))
 	zdata = val;
       else if (name.compare ("keylabel"))
 	keylabel = val;
       else
-	warning ("set: invalid property `%s'", name.c_str ());
+	{
+	  modified = false;
+	  warning ("set: invalid property `%s'", name.c_str ());
+	}
+
+      if (modified)
+	mark_modified ();
     }
 
     octave_value get (void) const
     {
       Octave_map m;
 
       m.assign ("type", type);
       m.assign ("parent", parent);
       m.assign ("children", children);
+      m.assign ("__modified__", __modified__);
       m.assign ("xdata", xdata);
       m.assign ("ydata", ydata);
       m.assign ("zdata", zdata);
       m.assign ("keylabel", keylabel);
 
       return m;
     }
 
@@ -2901,16 +3023,18 @@ public:
       octave_value retval;
 
       if (name.compare ("type"))
 	retval = type;
       else if (name.compare ("parent"))
 	retval = parent;
       else if (name.compare ("children"))
 	retval = children;
+      else if (name.compare ("__modified__"))
+	retval = __modified__;
       else if (name.compare ("xdata"))
 	retval = xdata;
       else if (name.compare ("ydata"))
 	retval = ydata;
       else if (name.compare ("zdata"))
 	retval = zdata;
       else if (name.compare ("keylabel"))
 	retval = keylabel;
@@ -2951,16 +3075,18 @@ public:
   {
     properties.override_defaults (*this);
   }
 
   ~surface (void) { properties.delete_children (); }
 
   std::string type (void) const { return properties.graphics_object_name (); }
 
+  void mark_modified (void) { properties.mark_modified (); }
+
   void override_defaults (base_graphics_object& obj)
   {
     // Allow parent (figure) to override first (properties knows how
     // to find the parent object).
     properties.override_defaults (obj);
   }
 
   void set_from_list (property_list& plist)
