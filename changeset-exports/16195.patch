# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1362496791 18000
#      Tue Mar 05 10:19:51 2013 -0500
# Node ID b52d2f9294b605ae08e19c6c3be647725a68a0ef
# Parent  b7ca669af5281e4dd5e5972e41290cb151ae4ba3
use class for reading lexer input

* input.h, input.cc (octave_base_input_reader, octave_terminal_reader,
octave_file_reader, octave_eval_string_reader): New classes.
(octave_gets): Now a member function of octave_base_reader.
(get_user_input): Delete function.  Move actions to
octave_terminal_reader::get_input and
octave_eval_string_reader::get_input.
function.  Call from octave_file_reader::get_input.  Don't check
whether reading an eval string.
(current_eval_string, get_input_from_eval_string): Delete global
variables.
(get_debug_input): Check CURR_LEXER->input_from_eval_string instead of
global get_input_from_eval_string variable.  Don't protect
get_input_from_eval_string.

* lex.h (octave_lexer::input_reader): New data member.
(octave_lexer::octave_lexer (void)): Initialize it.
(octave_lexer::octave_lexer (const std::string&),
octave_lexer::octave_lexer (FILE *)): New constructors.

* lex.h, lex.cc (octave_lexer::input_buffer::fill): New function.
(octave_lexer::input_buffer::read): Delete.
(octave_lexer::read): Rename from octave_read.  Call reader to get
input, and then hand it to the input_buffer instead of asking the
input buffer to read input.  Change all callers.
(octave_lexer::input_source, octave_lexer::input_from_eval_string):
New functions.  Call octave_lexer::input_from_eval_string instead of
using get_input_from_eval_string.

* oct-parse.in.yy (octave_parser::octave_parser (FILE *),
octave_parser::octave_parser (const std::string&)): New constructors.
(parse_fcn_file): Pass FILE pointer to octave_parser constructor.
(eval_string): Pass string to octave_parser constructor instead of
setting global current_eval_string variable.

diff --git a/libinterp/interpfcn/input.cc b/libinterp/interpfcn/input.cc
--- a/libinterp/interpfcn/input.cc
+++ b/libinterp/interpfcn/input.cc
@@ -89,22 +89,16 @@ std::string VPS4 = "+ ";
 int Vecho_executing_commands = ECHO_OFF;
 
 // The time we last printed a prompt.
 octave_time Vlast_prompt_time = 0.0;
 
 // Character to append after successful command-line completion attempts.
 static char Vcompletion_append_char = ' ';
 
-// Global pointer for eval().
-std::string current_eval_string;
-
-// TRUE means get input from current_eval_string.
-bool get_input_from_eval_string = false;
-
 // TRUE means that input is coming from a file that was named on
 // the command line.
 bool input_from_command_line_file = false;
 
 // TRUE means that stdin is a terminal, not a pipe or redirected file.
 bool stdin_is_tty = false;
 
 // TRUE means we're parsing a function file.
@@ -257,32 +251,31 @@ interactive_input (const std::string& s,
 static inline std::string
 interactive_input (const std::string& s, bool force_readline = false)
 {
   bool eof = false;
 
   return interactive_input (s, eof, force_readline);
 }
 
-static std::string
-octave_gets (bool& eof)
+std::string
+octave_base_reader::octave_gets (bool& eof)
 {
   octave_quit ();
 
   eof = false;
 
   std::string retval;
 
   bool history_skip_auto_repeated_debugging_command = false;
 
   if ((interactive || forced_interactive)
       && (! (reading_fcn_file
              || reading_classdef_file
              || reading_script_file
-             || get_input_from_eval_string
              || input_from_startup_file
              || input_from_command_line_file)))
     {
       std::string ps = (promptflag > 0) ? VPS1 : VPS2;
 
       std::string prompt = command_editor::decode_prompt_string (ps);
 
       pipe_handler_error_count = 0;
@@ -336,46 +329,16 @@ octave_gets (bool& eof)
       do_input_echo (current_input_line);
     }
   else if (! (reading_fcn_file || reading_script_file || reading_classdef_file))
     octave_diary << "\n";
 
   return retval;
 }
 
-// Read a line from the input stream.
-
-std::string
-get_user_input (bool& eof)
-{
-  octave_quit ();
-
-  eof = false;
-
-  std::string retval;
-
-  if (get_input_from_eval_string)
-    {
-      retval = current_eval_string;
-
-      // Clear the global eval string so that the next call will return
-      // an empty character string with EOF = true.
-      current_eval_string = "";
-
-      if (retval.empty ())
-        eof = true;
-    }
-  else
-    retval = octave_gets (eof);
-
-  current_input_line = retval;
-
-  return retval;
-}
-
 // Fix things up so that input can come from file 'name', printing a
 // warning if the file doesn't exist.
 
 FILE *
 get_input_from_file (const std::string& name, int warn)
 {
   FILE *instream = 0;
 
@@ -637,17 +600,17 @@ get_debug_input (const std::string& prom
 
   frame.protect_var (VPS1);
   VPS1 = prompt;
 
   if (! (interactive || forced_interactive)
       || (reading_fcn_file
           || reading_classdef_file
           || reading_script_file
-          || get_input_from_eval_string
+          || CURR_LEXER->input_from_eval_string ()
           || input_from_startup_file
           || input_from_command_line_file))
     {
       frame.protect_var (forced_interactive);
       forced_interactive = true;
 
       frame.protect_var (reading_fcn_file);
       reading_fcn_file = false;
@@ -658,19 +621,16 @@ get_debug_input (const std::string& prom
       frame.protect_var (reading_script_file);
       reading_script_file = false;
 
       frame.protect_var (input_from_startup_file);
       input_from_startup_file = false;
 
       frame.protect_var (input_from_command_line_file);
       input_from_command_line_file = false;
-
-      frame.protect_var (get_input_from_eval_string);
-      get_input_from_eval_string = false;
     }
 
   // octave_parser constructor sets this for us.
   frame.protect_var (CURR_LEXER);
 
   octave_parser curr_parser;
 
   while (Vdebugging)
@@ -695,16 +655,75 @@ get_debug_input (const std::string& prom
           if (octave_completion_matches_called)
             octave_completion_matches_called = false;
         }
 
       octave_quit ();
     }
 }
 
+const std::string octave_base_reader::in_src ("invalid");
+
+const std::string octave_terminal_reader::in_src ("terminal");
+
+std::string
+octave_terminal_reader::get_input (bool& eof)
+{
+  octave_quit ();
+
+  eof = false;
+
+  std::string retval = octave_gets (eof);
+
+  current_input_line = retval;
+
+  return retval;
+}
+
+const std::string octave_file_reader::in_src ("file");
+
+std::string
+octave_file_reader::get_input (bool& eof)
+{
+  octave_quit ();
+
+  eof = false;
+
+  std::string retval = octave_fgets (file, eof);
+
+  current_input_line = retval;
+
+  return retval;
+}
+
+const std::string octave_eval_string_reader::in_src ("eval_string");
+
+std::string
+octave_eval_string_reader::get_input (bool& eof)
+{
+  octave_quit ();
+
+  eof = false;
+
+  std::string retval;
+
+  retval = eval_string;
+
+  // Clear the eval string so that the next call will return
+  // an empty character string with EOF = true.
+  eval_string = "";
+
+  if (retval.empty ())
+    eof = true;
+
+  current_input_line = retval;
+
+  return retval;
+}
+
 // If the user simply hits return, this will produce an empty matrix.
 
 static octave_value_list
 get_user_input (const octave_value_list& args, int nargout)
 {
   octave_value_list retval;
 
   int nargin = args.length ();
diff --git a/libinterp/interpfcn/input.h b/libinterp/interpfcn/input.h
--- a/libinterp/interpfcn/input.h
+++ b/libinterp/interpfcn/input.h
@@ -30,29 +30,21 @@ along with Octave; see the file COPYING.
 #include <string>
 
 #include "oct-time.h"
 #include "oct-obj.h"
 #include "pager.h"
 
 class octave_value;
 
-extern OCTINTERP_API std::string get_user_input (bool& eof);
-
 extern OCTINTERP_API FILE *get_input_from_file (const std::string& name,
                                                 int warn = 1);
 
 extern OCTINTERP_API FILE *get_input_from_stdin (void);
 
-// Global pointer for eval().
-extern std::string current_eval_string;
-
-// TRUE means get input from current_eval_string.
-extern bool get_input_from_eval_string;
-
 // TRUE means that input is coming from a file that was named on
 // the command line.
 extern bool input_from_command_line_file;
 
 // TRUE means that stdin is a terminal, not a pipe or redirected file.
 extern bool stdin_is_tty;
 
 // TRUE means we're parsing a function file.
@@ -114,9 +106,144 @@ enum echo_state
   ECHO_FUNCTIONS = 2,
   ECHO_CMD_LINE = 4
 };
 
 extern int Vecho_executing_commands;
 
 extern octave_time Vlast_prompt_time;
 
+class
+octave_base_reader
+{
+public:
+
+  friend class octave_input_reader;
+
+  octave_base_reader (void) : count (1) { }
+
+  octave_base_reader (const octave_base_reader&) : count (1) { }
+
+  virtual ~octave_base_reader (void) { }
+
+  virtual std::string get_input (bool& eof) = 0;
+
+  virtual std::string input_source (void) const { return in_src; }
+
+  std::string octave_gets (bool& eof);
+
+private:
+
+  int count;
+
+  static const std::string in_src;
+};
+
+class
+octave_terminal_reader : public octave_base_reader
+{
+public:
+
+  octave_terminal_reader (void) : octave_base_reader () { }
+
+  std::string get_input (bool& eof);
+
+  std::string input_source (void) const { return in_src; }
+
+private:
+
+  static const std::string in_src;
+};
+
+class
+octave_file_reader : public octave_base_reader
+{
+public:
+
+  octave_file_reader (FILE *f_arg)
+    : octave_base_reader (), file (f_arg) { }
+
+  std::string get_input (bool& eof);
+
+  std::string input_source (void) const { return in_src; }
+
+private:
+
+  FILE *file;
+
+  static const std::string in_src;
+};
+
+class
+octave_eval_string_reader : public octave_base_reader
+{
+public:
+
+  octave_eval_string_reader (const std::string& str)
+    : octave_base_reader (), eval_string (str)
+  { }
+
+  std::string get_input (bool& eof);
+
+  std::string input_source (void) const { return in_src; }
+
+private:
+
+  std::string eval_string;
+
+  static const std::string in_src;
+};
+
+class
+octave_input_reader
+{
+public:
+  octave_input_reader (void)
+    : rep (new octave_terminal_reader ())
+  { }
+
+  octave_input_reader (FILE *file)
+    : rep (new octave_file_reader (file))
+  { }
+
+  octave_input_reader (const std::string& str)
+    : rep (new octave_eval_string_reader (str))
+  { }
+
+  octave_input_reader (const octave_input_reader& ir)
+  {
+    rep = ir.rep;
+    rep->count++;
+  }
+
+  octave_input_reader& operator = (const octave_input_reader& ir)
+  {
+    if (&ir != this)
+      {
+        rep = ir.rep;
+        rep->count++;
+      }
+
+    return *this;
+  }
+
+  ~octave_input_reader (void)
+  {
+    if (--rep->count == 0)
+      delete rep;
+  }
+
+  std::string get_input (bool& eof)
+  {
+    return rep->get_input (eof);
+  }
+
+  std::string input_source (void) const
+  {
+    return rep->input_source ();
+  }
+
+private:
+
+  octave_base_reader *rep;
+};
+
 #endif
diff --git a/libinterp/parse-tree/lex.h b/libinterp/parse-tree/lex.h
--- a/libinterp/parse-tree/lex.h
+++ b/libinterp/parse-tree/lex.h
@@ -22,16 +22,18 @@ along with Octave; see the file COPYING.
 
 #if !defined (octave_lex_h)
 #define octave_lex_h 1
 
 #include <list>
 #include <set>
 #include <stack>
 
+#include "input.h"
+
 extern OCTINTERP_API void cleanup_parser (void);
 
 // Is the given string a keyword?
 extern bool is_keyword (const std::string& s);
 
 class
 stream_reader
 {
@@ -312,18 +314,17 @@ public:
   class input_buffer
   {
   public:
 
     input_buffer (void)
       : buffer (), pos (0), chars_left (0), eof (false)
     { }
 
-    // Grab more input from the current input source.
-    void read (void);
+    void fill (const std::string& input, bool eof_arg);
 
     // Copy at most max_size characters to buf.
     int copy_chunk (char *buf, size_t max_size);
 
     bool empty (void) const { return chars_left == 0; }
 
     bool at_eof (void) const { return eof; }
 
@@ -331,32 +332,46 @@ public:
 
     std::string buffer;
     const char *pos;
     size_t chars_left;
     bool eof;
   };
 
   octave_lexer (void)
-    : lexical_feedback (), scanner (0), input_buf ()
+    : lexical_feedback (), scanner (0), input_buf (), input_reader ()
+  {
+    init ();
+  }
+
+  octave_lexer (FILE *file)
+    : lexical_feedback (), scanner (0), input_buf (),
+      input_reader (file)
+  {
+    init ();
+  }
+
+  octave_lexer (const std::string& eval_string)
+    : lexical_feedback (), scanner (0), input_buf (),
+      input_reader (eval_string)
   {
     init ();
   }
 
   ~octave_lexer (void);
 
   void init (void);
 
   void reset (void);
 
   void prep_for_script_file (void);
 
   void prep_for_function_file (void);
 
-  int octave_read (char *buf, unsigned int max_size);
+  int read (char *buf, unsigned int max_size);
 
   int handle_end_of_input (void);
 
   char *flex_yytext (void);
 
   int flex_yyleng (void);
 
   void do_comma_insert_check (void);
@@ -443,16 +458,28 @@ public:
   void lexer_debug (const char *pattern, const char *text);
 
   // Internal state of the flex-generated lexer.
   void *scanner;
 
   // Object that reads and buffers input.
   input_buffer input_buf;
 
+  octave_input_reader input_reader;
+
+  std::string input_source (void) const
+  {
+    return input_reader.input_source ();
+  }
+
+  bool input_from_eval_string (void) const
+  {
+    return input_source () == "eval_string";
+  }
+
   // For unwind protect.
   static void cleanup (octave_lexer *lexer) { delete lexer; }
 
 private:
 
   // No copying!
 
   octave_lexer (const octave_lexer&);
diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -113,17 +113,17 @@ object) relevant global values before an
 #define curr_lexer yyextra
 
 // Arrange to get input via readline.
 
 #ifdef YY_INPUT
 #undef YY_INPUT
 #endif
 #define YY_INPUT(buf, result, max_size) \
-  result = curr_lexer->octave_read (buf, max_size)
+  result = curr_lexer->read (buf, max_size)
 
 // Try to avoid crashing out completely on fatal scanner errors.
 
 #ifdef YY_FATAL_ERROR
 #undef YY_FATAL_ERROR
 #endif
 #define YY_FATAL_ERROR(msg) \
   (yyget_extra (yyscanner))->fatal_error (msg)
@@ -1355,21 +1355,22 @@ lexical_feedback::reset_token_stack (voi
   while (! token_stack.empty ())
     {
       delete token_stack.top ();
       token_stack.pop ();
     }
 }
 
 void
-octave_lexer::input_buffer::read (void)
+octave_lexer::input_buffer::fill (const std::string& input, bool eof_arg)
 {
-  buffer = get_user_input (eof);
+  buffer = input;
   chars_left = buffer.length ();
   pos = buffer.c_str ();
+  eof = eof_arg;
 }
 
 int
 octave_lexer::input_buffer::copy_chunk (char *buf, size_t max_size)
 {
   static const char * const eol = "\n";
 
   size_t len = max_size > chars_left ? chars_left : max_size;
@@ -1388,17 +1389,17 @@ octave_lexer::input_buffer::copy_chunk (
           // There is enough room to plug the newline character in
           // the buffer.
           buf[len++] = '\n';
         }
       else
         {
           // There isn't enough room to plug the newline character
           // in the buffer so arrange to have it returned on the next
-          // call to octave_read.
+          // call to octave_lexer::read.
           pos = eol;
           chars_left = 1;
         }
     }
 
   return len;
 }
 
@@ -1442,17 +1443,17 @@ octave_lexer::reset (void)
   // Only ask for input from stdin if we are expecting interactive
   // input.
 
   if (! quitting_gracefully
       && (interactive || forced_interactive)
       && ! (reading_fcn_file
             || reading_classdef_file
             || reading_script_file
-            || get_input_from_eval_string
+            || input_from_eval_string ()
             || input_from_startup_file))
     yyrestart (stdin, scanner);
 
   // Clear the buffer for help text.
   while (! help_buf.empty ())
     help_buf.pop ();
 
   lexical_feedback::reset ();
@@ -1470,31 +1471,35 @@ void
 octave_lexer::prep_for_function_file (void)
 {
   OCTAVE_YYG;
 
   BEGIN (FUNCTION_FILE_BEGIN);
 }
 
 int
-octave_lexer::octave_read (char *buf, unsigned max_size)
+octave_lexer::read (char *buf, unsigned max_size)
 {
   int status = 0;
 
   if (input_buf.empty ())
-    input_buf.read ();
+    {
+      bool eof = false;
+      std::string input = input_reader.get_input (eof);
+      input_buf.fill (input, eof);
+    }
 
   if (! input_buf.empty ())
     status = input_buf.copy_chunk (buf, max_size);
   else
     {
       status = YY_NULL;
 
       if (! input_buf.at_eof ())
-        fatal_error ("octave_read () in flex scanner failed");
+        fatal_error ("octave_lexer::read () in flex scanner failed");
     }
 
   return status;
 }
 
 int
 octave_lexer::handle_end_of_input (void)
 {
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -131,17 +131,17 @@ make_statement (T *arg)
 
 #define ABORT_PARSE \
   do \
     { \
       yyerrok; \
       if (! parser_symtab_context.empty ()) \
         parser_symtab_context.pop (); \
       if ((interactive || forced_interactive)   \
-          && ! get_input_from_eval_string)      \
+          && ! (curr_lexer)->input_from_eval_string ()) \
         YYACCEPT; \
       else \
         YYABORT; \
     } \
   while (0)
 
 #define curr_lexer curr_parser.curr_lexer
 #define scanner curr_lexer->scanner
@@ -1232,17 +1232,17 @@ function_end    : END
                       {
                         curr_parser.bison_error ("inconsistent function endings -- "
                                  "if one function is explicitly ended, "
                                  "so must all the others");
                         YYABORT;
                       }
 
                     if (! (reading_fcn_file || reading_script_file
-                           || get_input_from_eval_string))
+                           || (curr_lexer)->input_from_eval_string ()))
                       {
                         curr_parser.bison_error ("function body open at end of input");
                         YYABORT;
                       }
 
                     if (reading_classdef_file)
                       {
                         curr_parser.bison_error ("classdef body open at end of input");
@@ -3394,17 +3394,17 @@ parse_fcn_file (const std::string& ff, c
 
   if (ffile)
     {
       bool eof;
 
       // octave_parser constructor sets this for us.
       frame.protect_var (CURR_LEXER);
 
-      octave_parser curr_parser;
+      octave_parser curr_parser (ffile);
 
       curr_parser.curr_class_name = dispatch_type;
       curr_parser.autoloading = autoload;
       curr_parser.fcn_file_from_relative_lookup = relative_lookup;
 
       std::string help_txt
         = gobble_leading_white_space
             (ffile, eof,
@@ -3413,24 +3413,21 @@ parse_fcn_file (const std::string& ff, c
 
       if (! help_txt.empty ())
         help_buf.push (help_txt);
 
       if (! eof)
         {
           std::string file_type;
 
-          frame.protect_var (get_input_from_eval_string);
           frame.protect_var (reading_fcn_file);
           frame.protect_var (reading_script_file);
           frame.protect_var (reading_classdef_file);
           frame.protect_var (Vecho_executing_commands);
 
-          get_input_from_eval_string = false;
-
           if (! force_script && looking_at_function_keyword (ffile))
             {
               file_type = "function";
 
               Vecho_executing_commands = ECHO_OFF;
 
               reading_classdef_file = false;
               reading_fcn_file = true;
@@ -4176,42 +4173,38 @@ another function for the given type sign
     }
   else
     print_usage ();
 
   return retval;
 }
 
 octave_value_list
-eval_string (const std::string& s, bool silent, int& parse_status, int nargout)
+eval_string (const std::string& eval_str, bool silent,
+             int& parse_status, int nargout)
 {
   octave_value_list retval;
 
   unwind_protect frame;
 
   // octave_parser constructor sets this for us.
   frame.protect_var (CURR_LEXER);
 
-  octave_parser curr_parser;
-
-  frame.protect_var (get_input_from_eval_string);
+  octave_parser curr_parser (eval_str);
+
   frame.protect_var (line_editing);
-  frame.protect_var (current_eval_string);
   frame.protect_var (reading_fcn_file);
   frame.protect_var (reading_script_file);
   frame.protect_var (reading_classdef_file);
 
-  get_input_from_eval_string = true;
   line_editing = false;
   reading_fcn_file = false;
   reading_script_file = false;
   reading_classdef_file = false;
 
-  current_eval_string = s;
-
   do
     {
       curr_parser.reset ();
 
       // Do this with an unwind-protect cleanup function so that the
       // forced variables will be unmarked in the event of an
       // interrupt.
       symbol_table::scope_id scope = symbol_table::top_scope ();
@@ -4273,21 +4266,21 @@ eval_string (const std::string& s, bool 
         }
     }
   while (parse_status == 0);
 
   return retval;
 }
 
 octave_value
-eval_string (const std::string& s, bool silent, int& parse_status)
+eval_string (const std::string& eval_str, bool silent, int& parse_status)
 {
   octave_value retval;
 
-  octave_value_list tmp = eval_string (s, silent, parse_status, 1);
+  octave_value_list tmp = eval_string (eval_str, silent, parse_status, 1);
 
   if (! tmp.empty ())
     retval = tmp(0);
 
   return retval;
 }
 
 static octave_value_list
diff --git a/libinterp/parse-tree/parse.h b/libinterp/parse-tree/parse.h
--- a/libinterp/parse-tree/parse.h
+++ b/libinterp/parse-tree/parse.h
@@ -145,16 +145,40 @@ public:
       curr_fcn_depth (0), primary_fcn_scope (-1),
       curr_class_name (), function_scopes (), primary_fcn_ptr (0),
       stmt_list (0),
       curr_lexer (new octave_lexer ()), parser_state (0)
   {
     init ();
   }
 
+  octave_parser (FILE *file)
+    : endfunction_found (false),
+      autoloading (false), fcn_file_from_relative_lookup (false),
+      parsing_subfunctions (false), max_fcn_depth (0),
+      curr_fcn_depth (0), primary_fcn_scope (-1),
+      curr_class_name (), function_scopes (), primary_fcn_ptr (0),
+      stmt_list (0),
+      curr_lexer (new octave_lexer (file)), parser_state (0)
+  {
+    init ();
+  }
+
+  octave_parser (const std::string& eval_string)
+    : endfunction_found (false),
+      autoloading (false), fcn_file_from_relative_lookup (false),
+      parsing_subfunctions (false), max_fcn_depth (0),
+      curr_fcn_depth (0), primary_fcn_scope (-1),
+      curr_class_name (), function_scopes (), primary_fcn_ptr (0),
+      stmt_list (0),
+      curr_lexer (new octave_lexer (eval_string)), parser_state (0)
+  {
+    init ();
+  }
+
   ~octave_parser (void);
 
   void init (void);
 
   void reset (void);
 
   int run (void);
 
