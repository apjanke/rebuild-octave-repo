# HG changeset patch
# User jwe
# Date 1069500284 0
#      Sat Nov 22 11:24:44 2003 +0000
# Node ID 2d237a76dbdd090368b2652868fc05068fb6c2e5
# Parent  f70c9e90ac2df9fd9c64829b64f2bce94bd1e53a
[project @ 2003-11-22 11:24:44 by jwe]

diff --git a/src/ov-typeinfo.cc b/src/ov-typeinfo.cc
--- a/src/ov-typeinfo.cc
+++ b/src/ov-typeinfo.cc
@@ -77,20 +77,21 @@ octave_value_typeinfo::instance_ok (void
       retval = false;
     }
 
   return retval;
 }
 
 int
 octave_value_typeinfo::register_type (const std::string& t_name,
-				      const std::string& c_name)
+				      const std::string& c_name,
+				      const octave_value& val)
 {
   return (instance_ok ())
-    ? instance->do_register_type (t_name, c_name) : -1;
+    ? instance->do_register_type (t_name, c_name, val) : -1;
 }
 
 bool
 octave_value_typeinfo::register_unary_op (octave_value::unary_op op,
 					   int t, unary_op_fcn f)
 {
   return (instance_ok ())
     ? instance->do_register_unary_op (op, t, f) : false;
@@ -144,32 +145,35 @@ octave_value_typeinfo::register_widening
 					     type_conv_fcn f)
 {
   return (instance_ok ())
     ? instance->do_register_widening_op (t, t_result, f) : false;
 }
 
 int
 octave_value_typeinfo::do_register_type (const std::string& t_name,
-					 const std::string& c_name)
+					 const std::string& c_name,
+					 const octave_value& val)
 {
   int i = 0;
 
   for (i = 0; i < num_types; i++)
     if (t_name == types (i))
       return i;
 
   int len = types.length ();
 
   if (i == len)
     {
       len *= 2;
 
       types.resize (len, std::string ());
 
+      vals.resize (len, octave_value ());
+
       unary_ops.resize (static_cast<int> (octave_value::num_unary_ops),
 			len, static_cast<unary_op_fcn> (0));
 
       non_const_unary_ops.resize
 	(static_cast<int> (octave_value::num_unary_ops),
 	 len, static_cast<non_const_unary_op_fcn> (0));
 
       binary_ops.resize (static_cast<int> (octave_value::num_binary_ops),
@@ -183,16 +187,18 @@ octave_value_typeinfo::do_register_type 
 
       pref_assign_conv.resize (len, len, -1);
 
       widening_ops.resize (len, len, static_cast<type_conv_fcn> (0));
     }
 
   types (i) = t_name;
 
+  vals (i) = val;
+
   num_types++;
 
   return i;
 }
 
 bool
 octave_value_typeinfo::do_register_unary_op (octave_value::unary_op op,
 					     int t, unary_op_fcn f)
@@ -318,16 +324,33 @@ octave_value_typeinfo::do_register_widen
 	       t_name.c_str (), t_result_name.c_str ());
     }
 
   widening_ops.checkelem (t, t_result) = f;
 
   return false;
 }
 
+octave_value
+octave_value_typeinfo::do_lookup_type (const std::string& nm)
+{
+  octave_value retval;
+
+  for (int i = 0; i < num_types; i++)
+    {
+      if (nm == types(i))
+	{
+	  retval = vals(i);
+	  break;
+	}
+    }
+
+  return retval;
+}
+
 unary_op_fcn
 octave_value_typeinfo::do_lookup_unary_op (octave_value::unary_op op, int t)
 {
   return unary_ops.checkelem (static_cast<int> (op), t);
 }
 
 non_const_unary_op_fcn
 octave_value_typeinfo::do_lookup_non_const_unary_op
diff --git a/src/ov-typeinfo.h b/src/ov-typeinfo.h
--- a/src/ov-typeinfo.h
+++ b/src/ov-typeinfo.h
@@ -39,17 +39,18 @@ class string_vector;
 
 class
 octave_value_typeinfo
 {
 public:
 
   static bool instance_ok (void);
 
-  static int register_type (const std::string&, const std::string&);
+  static int register_type (const std::string&, const std::string&,
+			    const octave_value&);
 
   static bool register_unary_op (octave_value::unary_op, int, unary_op_fcn);
 
   static bool register_non_const_unary_op (octave_value::unary_op, int,
 					   non_const_unary_op_fcn);
 
   static bool register_binary_op (octave_value::binary_op, int, int,
 				  binary_op_fcn);
@@ -59,16 +60,22 @@ public:
 
   static bool register_assignany_op (octave_value::assign_op, int,
 				     assign_op_fcn);
 
   static bool register_pref_assign_conv (int, int, int);
 
   static bool register_widening_op (int, int, type_conv_fcn);
 
+  static octave_value
+  lookup_type (const std::string& nm)
+  {
+    return instance->do_lookup_type (nm);
+  }
+
   static unary_op_fcn
   lookup_unary_op (octave_value::unary_op op, int t)
   {
     return instance->do_lookup_unary_op (op, t);
   }
 
   static non_const_unary_op_fcn
   lookup_non_const_unary_op (octave_value::unary_op op, int t)
@@ -133,31 +140,34 @@ private:
   static const int init_tab_sz;
 
   static octave_value_typeinfo *instance;
 
   int num_types;
 
   Array<std::string> types;
 
+  Array<octave_value> vals;
+
   Array2<unary_op_fcn> unary_ops;
 
   Array2<non_const_unary_op_fcn> non_const_unary_ops;
 
   Array3<binary_op_fcn> binary_ops;
 
   Array3<assign_op_fcn> assign_ops;
 
   Array2<assign_op_fcn> assignany_ops;
 
   Array2<int> pref_assign_conv;
 
   Array2<type_conv_fcn> widening_ops;
 
-  int do_register_type (const std::string&, const std::string&);
+  int do_register_type (const std::string&, const std::string&,
+			const octave_value&);
 
   bool do_register_unary_op (octave_value::unary_op, int, unary_op_fcn);
 
   bool do_register_non_const_unary_op (octave_value::unary_op, int,
 				       non_const_unary_op_fcn);
 
   bool do_register_binary_op (octave_value::binary_op, int, int,
 			      binary_op_fcn);
@@ -167,16 +177,18 @@ private:
 
   bool do_register_assignany_op (octave_value::assign_op, int,
 				 assign_op_fcn);
 
   bool do_register_pref_assign_conv (int, int, int);
 
   bool do_register_widening_op (int, int, type_conv_fcn);
 
+  octave_value do_lookup_type (const std::string& nm);
+
   unary_op_fcn do_lookup_unary_op (octave_value::unary_op, int);
 
   non_const_unary_op_fcn do_lookup_non_const_unary_op
     (octave_value::unary_op, int);
 
   binary_op_fcn do_lookup_binary_op (octave_value::binary_op, int, int);
 
   assign_op_fcn do_lookup_assign_op (octave_value::assign_op, int, int);
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -751,28 +751,33 @@ OV_BINOP_FN (op_struct_ref)
 // T_ID is the type id of struct objects, set by register_type().
 // T_NAME is the type name of struct objects.
 #define DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA \
   public: \
     int type_id (void) const { return t_id; } \
     std::string type_name (void) const { return t_name; } \
     std::string class_name (void) const { return c_name; } \
     static int static_type_id (void) { return t_id; } \
-    static void register_type (void) \
-      { t_id = octave_value_typeinfo::register_type (t_name, c_name); } \
+    static void register_type (void); \
  \
   private: \
     static int t_id; \
     static const std::string t_name; \
     static const std::string c_name;
 
 #define DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA(t, n, c) \
   int t::t_id (-1); \
   const std::string t::t_name (n); \
-  const std::string t::c_name (c)
+  const std::string t::c_name (c); \
+  void t::register_type (void) \
+    { \
+      t_id = octave_value_typeinfo::register_type (t::t_name, \
+						   t::c_name, \
+						   octave_value (new t)); \
+    }
 
 // If TRUE, print a warning for assignments like
 //
 //   octave> A(1) = 3; A(2) = 5
 //
 // for A already defined and a matrix type.
 extern bool Vwarn_fortran_indexing;
 
