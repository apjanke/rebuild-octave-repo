# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1511144245 18000
#      Sun Nov 19 21:17:25 2017 -0500
# Node ID d22d2936f58027d14a1db9fd3337fa51274e1560
# Parent  81557c74be7f5347e2cb8792af50ee8b2cbbfea4
store subfunction names in scope instead of function object

* symscope.h (symbol_scope::m_subfunction_names): New data member.
(symbol_scope::has_subfunctions,
symbol_scope::stash_subfunction_names,
symbol_scope::subfunction_names): New functions.

* ov-usr-fcn.h, ov-usr-fcn.cc (octave_user_function::has_subfunctions,
octave_user_function::stash_subfunction_names,
octave_user_function::subfunction_names): Forward to symbol_scope
functions.
(octave_user_function::subfcn_names): Delete data member.

diff --git a/libinterp/corefcn/symscope.h b/libinterp/corefcn/symscope.h
--- a/libinterp/corefcn/symscope.h
+++ b/libinterp/corefcn/symscope.h
@@ -520,16 +520,31 @@ namespace octave
 
     void erase_subfunctions (void)
     {
       m_subfunctions.clear ();
     }
 
     void mark_subfunctions_in_scope_as_private (const std::string& class_name);
 
+    bool has_subfunctions (void) const
+    {
+      return ! m_subfunction_names.empty ();
+    }
+
+    void stash_subfunction_names (const std::list<std::string>& names)
+    {
+      m_subfunction_names = names;
+    }
+
+    std::list<std::string> subfunction_names (void) const
+    {
+      return m_subfunction_names;
+    }
+
     std::list<workspace_element> workspace_info (void) const;
 
     octave_value dump (void) const;
 
     std::string name (void) const { return m_name; }
 
     void cache_name (const std::string& name) { m_name = name; }
 
@@ -557,16 +572,20 @@ namespace octave
     std::map<std::string, symbol_record> m_symbols;
 
     // Map from names of persistent variables to values.
     std::map<std::string, octave_value> m_persistent_symbols;
 
     // Map from symbol names to subfunctions.
     std::map<std::string, octave_value> m_subfunctions;
 
+    // The list of subfunctions (if any) in the order they appear in
+    // the function file.
+    std::list<std::string> m_subfunction_names;
+
     // The associated user code (may be null).
     octave_user_function *m_fcn;
 
     // Parent of nested function (may be null).
     symbol_scope *m_parent;
     octave_value m_parent_fcn;
 
     // Child nested functions.
diff --git a/libinterp/octave-value/ov-usr-fcn.cc b/libinterp/octave-value/ov-usr-fcn.cc
--- a/libinterp/octave-value/ov-usr-fcn.cc
+++ b/libinterp/octave-value/ov-usr-fcn.cc
@@ -455,24 +455,29 @@ std::map<std::string, octave_value>
 octave_user_function::subfunctions (void) const
 {
   return m_scope->subfunctions ();
 }
 
 bool
 octave_user_function::has_subfunctions (void) const
 {
-  return ! subfcn_names.empty ();
+  return m_scope->has_subfunctions ();
 }
 
 void
-octave_user_function::stash_subfunction_names
-  (const std::list<std::string>& names)
+octave_user_function::stash_subfunction_names (const std::list<std::string>& names)
 {
-  subfcn_names = names;
+  m_scope->stash_subfunction_names (names);
+}
+
+std::list<std::string>
+octave_user_function::subfunction_names (void) const
+{
+  return m_scope->subfunction_names ();
 }
 
 octave_value_list
 octave_user_function::all_va_args (const octave_value_list& args)
 {
   octave_value_list retval;
 
   octave_idx_type n = args.length () - num_named_args;
diff --git a/libinterp/octave-value/ov-usr-fcn.h b/libinterp/octave-value/ov-usr-fcn.h
--- a/libinterp/octave-value/ov-usr-fcn.h
+++ b/libinterp/octave-value/ov-usr-fcn.h
@@ -306,20 +306,17 @@ public:
   void unlock_subfunctions (void);
 
   std::map<std::string, octave_value> subfunctions (void) const;
 
   bool has_subfunctions (void) const;
 
   void stash_subfunction_names (const std::list<std::string>& names);
 
-  std::list<std::string> subfunction_names (void) const
-  {
-    return subfcn_names;
-  }
+  std::list<std::string> subfunction_names (void) const;
 
   octave_value_list all_va_args (const octave_value_list& args);
 
   void stash_function_name (const std::string& s) { my_name = s; }
 
   void mark_as_subfunction (void) { subfunction = true; }
 
   bool is_subfunction (void) const { return subfunction; }
@@ -442,20 +439,16 @@ private:
   int location_line;
   int location_column;
   int end_location_line;
   int end_location_column;
 
   // The name of the parent function, if any.
   std::string parent_name;
 
-  // The list of subfunctions (if any) in the order they appear in the
-  // file.
-  std::list<std::string> subfcn_names;
-
   // The time the file was parsed.
   octave::sys::time t_parsed;
 
   // The time the file was last checked to see if it needs to be
   // parsed again.
   octave::sys::time t_checked;
 
   // True if this function came from a file that is considered to be a
@@ -464,17 +457,17 @@ private:
   bool system_fcn_file;
 
   // Used to keep track of recursion depth.
   int call_depth;
 
   // The number of arguments that have names.
   int num_named_args;
 
-  // TRUE means this subfunction of a primary function.
+  // TRUE means this is a subfunction of a primary function.
   bool subfunction;
 
   // TRUE means this is an inline function.
   bool inline_function;
 
   // TRUE means this is an anonymous function.
   bool anonymous_function;
 
