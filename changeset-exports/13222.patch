# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1316994244 14400
#      Sun Sep 25 19:44:04 2011 -0400
# Node ID 82f3a0c27569b87d68955e01151d445b13dea6db
# Parent  410de573089a0defce445c22b5ecc2a41b86e9c4
fix warnings for uninitialized variables

* pt-binop.cc (simplify_mul_op, simplify_ldiv_op, simplify_and_or_op):
Initialize retop at declaration.
* hex2num.cc (Fhex2num): Initialize num.ival to zero.

diff --git a/src/DLD-FUNCTIONS/hex2num.cc b/src/DLD-FUNCTIONS/hex2num.cc
--- a/src/DLD-FUNCTIONS/hex2num.cc
+++ b/src/DLD-FUNCTIONS/hex2num.cc
@@ -71,16 +71,18 @@ hex2num ([\"4005bf0a8b145769\";\"4024000
           for (octave_idx_type i = 0; i < nr; i++)
             {
               union
               {
                 uint64_t ival;
                 double dval;
               } num;
 
+              num.ival = 0;
+
               for (octave_idx_type j = 0; j < nc; j++)
                 {
                   unsigned char ch = cmat.elem (i, j);
 
                   if (isxdigit (ch))
                     {
                       num.ival <<= 4;
                       if (ch >= 'a')
diff --git a/src/pt-cbinop.cc b/src/pt-cbinop.cc
--- a/src/pt-cbinop.cc
+++ b/src/pt-cbinop.cc
@@ -79,62 +79,64 @@ strip_not (tree_expression *&exp)
 }
 
 // Possibly convert multiplication to trans_mul, mul_trans, herm_mul,
 // or mul_herm.
 
 static octave_value::compound_binary_op
 simplify_mul_op (tree_expression *&a, tree_expression *&b)
 {
-  octave_value::compound_binary_op retop;
+  octave_value::compound_binary_op retop
+    = octave_value::unknown_compound_binary_op;
+
   octave_value::unary_op opa = strip_trans_herm (a);
 
   if (opa == octave_value::op_hermitian)
     retop = octave_value::op_herm_mul;
   else if (opa == octave_value::op_transpose)
     retop = octave_value::op_trans_mul;
   else
     {
       octave_value::unary_op opb = strip_trans_herm (b);
 
       if (opb == octave_value::op_hermitian)
         retop = octave_value::op_mul_herm;
       else if (opb == octave_value::op_transpose)
         retop = octave_value::op_mul_trans;
-      else
-        retop = octave_value::unknown_compound_binary_op;
     }
 
   return retop;
 }
 
 // Possibly convert left division to trans_ldiv or herm_ldiv.
 
 static octave_value::compound_binary_op
 simplify_ldiv_op (tree_expression *&a, tree_expression *&)
 {
-  octave_value::compound_binary_op retop;
+  octave_value::compound_binary_op retop
+    = octave_value::unknown_compound_binary_op;
+
   octave_value::unary_op opa = strip_trans_herm (a);
 
   if (opa == octave_value::op_hermitian)
     retop = octave_value::op_herm_ldiv;
   else if (opa == octave_value::op_transpose)
     retop = octave_value::op_trans_ldiv;
-  else
-    retop = octave_value::unknown_compound_binary_op;
 
   return retop;
 }
 
 // Possibly contract and/or with negation.
 
 static octave_value::compound_binary_op
 simplify_and_or_op (tree_expression *&a, tree_expression *&b, octave_value::binary_op op)
 {
-  octave_value::compound_binary_op retop;
+  octave_value::compound_binary_op retop
+    = octave_value::unknown_compound_binary_op;
+
   octave_value::unary_op opa = strip_not (a);
 
   if (opa == octave_value::op_not)
     {
       if (op == octave_value::op_el_and)
         retop = octave_value::op_el_not_and;
       else if (op == octave_value::op_el_or)
         retop = octave_value::op_el_not_or;
@@ -145,18 +147,16 @@ simplify_and_or_op (tree_expression *&a,
 
       if (opb == octave_value::op_not)
         {
           if (op == octave_value::op_el_and)
             retop = octave_value::op_el_and_not;
           else if (op == octave_value::op_el_or)
             retop = octave_value::op_el_or_not;
         }
-      else
-        retop = octave_value::unknown_compound_binary_op;
     }
 
   return retop;
 }
 
 tree_binary_expression *
 maybe_compound_binary_expression (tree_expression *a, tree_expression *b,
                                   int l, int c, octave_value::binary_op t)
