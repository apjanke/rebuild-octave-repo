# HG changeset patch
# User Michael Goffioul <michael.goffioul@gmail.com>
# Date 1319111698 -3600
#      Thu Oct 20 12:54:58 2011 +0100
# Node ID 28ddb31509438ccf656292b54499047070f26b06
# Parent  b1186adb567e9c21b6b812cbfa6cea28ea43fd5e
Rename signbit to __signbit, until the problem is fixed in gnulib.

* oct-inttypes.h (octave_int_arith_base<T, true>): Rename signbit to
__signbit to avoid problems with gnulib macro.

diff --git a/liboctave/oct-inttypes.h b/liboctave/oct-inttypes.h
--- a/liboctave/oct-inttypes.h
+++ b/liboctave/oct-inttypes.h
@@ -447,17 +447,17 @@ template <class T>
 class octave_int_arith_base<T, true> : octave_int_base<T>
 {
   // The corresponding unsigned type.
   typedef typename query_integer_type<sizeof (T), false>::type UT;
 public:
 
   // Returns 1 for negative number, 0 otherwise.
   static T
-  signbit (T x)
+  __signbit (T x)
     {
 #ifdef HAVE_FAST_INT_OPS
       return static_cast<UT> (x) >> std::numeric_limits<T>::digits;
 #else
       return (x < 0) ? 1 : 0;
 #endif
     }
 
@@ -491,17 +491,17 @@ public:
       return y;
 #endif
     }
 
   static T
   signum (T x)
     {
       // With modest optimizations, this will compile without a jump.
-      return ((x > 0) ? 1 : 0) - signbit (x);
+      return ((x > 0) ? 1 : 0) - __signbit (x);
     }
 
   // FIXME -- we do not have an authority what signed shifts should
   // exactly do, so we define them the easy way. Note that Matlab does
   // not define signed shifts.
 
   static T
   rshift (T x, int n) { return x >> n; }
@@ -539,17 +539,17 @@ public:
 #ifdef HAVE_FAST_INT_OPS
     // The typecasts do nothing, but they are here to prevent an optimizing
     // compiler from interfering. Also, the signed operations on small types
     // actually return int.
       T u = static_cast<UT> (x) + static_cast<UT> (y);
       T ux = u ^ x, uy = u ^ y;
       if ((ux & uy) < 0)
         {
-          u = octave_int_base<T>::max_val () + signbit (~u);
+          u = octave_int_base<T>::max_val () + __signbit (~u);
         }
       return u;
 #else
       // We shall carefully avoid anything that may overflow.
       T u;
       if (y < 0)
         {
           if (x < octave_int_base<T>::min_val () - y)
@@ -580,17 +580,17 @@ public:
 #ifdef HAVE_FAST_INT_OPS
     // The typecasts do nothing, but they are here to prevent an optimizing
     // compiler from interfering. Also, the signed operations on small types
     // actually return int.
       T u = static_cast<UT> (x) - static_cast<UT> (y);
       T ux = u ^ x, uy = u ^ ~y;
       if ((ux & uy) < 0)
         {
-          u = octave_int_base<T>::max_val () + signbit (~u);
+          u = octave_int_base<T>::max_val () + __signbit (~u);
         }
       return u;
 #else
       // We shall carefully avoid anything that may overflow.
       T u;
       if (y < 0)
         {
           if (x > octave_int_base<T>::max_val () + y)
@@ -646,29 +646,29 @@ public:
             {
               z = octave_int_base<T>::max_val ();
             }
           else
             {
               z = x / y;
               T w = -octave_int_abs (x % y); // Can't overflow, but std::abs (x) can!
               if (w <= y - w)
-                z -= 1 - (signbit (x) << 1);
+                z -= 1 - (__signbit (x) << 1);
             }
         }
       else
         {
           z = x / y;
           // FIXME -- this is a workaround due to MSVC's absence of
           // std::abs (int64_t).  The call to octave_int_abs can't
           // overflow, but std::abs (x) can!
           T w = octave_int_abs (x % y);
 
           if (w >= y - w)
-            z += 1 - (signbit (x) << 1);
+            z += 1 - (__signbit (x) << 1);
         }
       return z;
     }
 
   // Remainder.
   static T
   rem (T x, T y)
     {
