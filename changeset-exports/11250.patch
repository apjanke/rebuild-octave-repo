# HG changeset patch
# User Michael Goffioul <michael.goffioul@gmail.com>
# Date 1289771505 0
#      Sun Nov 14 21:51:45 2010 +0000
# Node ID 830b940e7ff4b0d8343ffab9edad82c339311c73
# Parent  6cd1e62b6616efee11a4e5ade26e711418e4f04c
Turn xget_ancestor into regular API

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,18 @@
+2010-11-14  Michael Goffioul  <michael.goffioul@gmail.com>
+
+	* graphics.h.in (graphics_object::get_ancestor): New method.
+	* graphics.cc (graphics_object::get_ancestor): Likewise.
+	(convert_text_position, convert_cdata): Use it.
+	(xget_ancestor): Remove obsolete function.
+	* DLD_FUNCTIONS/fltk_backend.cc (plot_window::uimenu_update,
+	fltk_backend::update): Replace xget_ancestor with
+	graphics_objects::get_ancestor.
+
 2010-11-13  John W. Eaton  <jwe@octave.org>
 
 	* graphics.h.in (figure::properties::filename): Make writable.
 	Bug #31450.
 
 2010-11-12  John W. Eaton  <jwe@octave.org>
 
 	* Makefile.am (nodist_liboctinterp_la_SOURCES): Remove
diff --git a/src/DLD-FUNCTIONS/fltk_backend.cc b/src/DLD-FUNCTIONS/fltk_backend.cc
--- a/src/DLD-FUNCTIONS/fltk_backend.cc
+++ b/src/DLD-FUNCTIONS/fltk_backend.cc
@@ -80,19 +80,16 @@ g - toggle grid\n\
 \n\
 Mouse\n\
 left drag - pan\n\
 mouse wheel - zoom\n\
 right drag - rectangle zoom\n\
 left double click - autoscale\n\
 ";
 
-graphics_object xget_ancestor (const graphics_object& go_arg,
-                                      const std::string& type);
-
 class OpenGL_fltk : public Fl_Gl_Window
 {
 public:
   OpenGL_fltk (int xx, int yy, int ww, int hh, double num)
     : Fl_Gl_Window (xx, yy, ww, hh, 0), number (num), renderer (),
       in_zoom (false), zoom_box (),  print_fid (-1)
   {
     // Ask for double buffering and a depth buffer.
@@ -785,17 +782,17 @@ public:
   {
     graphics_object uimenu_obj = gh_manager::get_object (gh);
     
     if (uimenu_obj.valid_object () && uimenu_obj.isa ("uimenu"))
       {
         uimenu::properties& uimenup =
           dynamic_cast<uimenu::properties&> (uimenu_obj.get_properties ());
         std::string fltk_label = uimenup.get_fltk_label();
-        graphics_object fig = xget_ancestor(uimenu_obj,"figure");
+        graphics_object fig = uimenu_obj.get_ancestor("figure");
         figure::properties& figp =
           dynamic_cast<figure::properties&> (fig.get_properties ());
         
         switch(id)
           {
             case base_properties::ID_BEINGDELETED:
               uimenu->remove_from_menu (uimenup);
               break;
@@ -1820,17 +1817,17 @@ public:
               }
           }
       }
     else if (go.isa ("uimenu"))
       {
         if (id == uimenu::properties::ID_LABEL)
           uimenu_set_fltk_label (go);
         
-        graphics_object fig = xget_ancestor(go,"figure");
+        graphics_object fig = go.get_ancestor("figure");
         figure_manager::uimenu_update(fig.get_handle (), go.get_handle (), id);
       }
   }
 
   void redraw_figure (const graphics_object& go) const
   {
     figure_manager::mark_modified (go.get_handle ());
 
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -50,18 +50,16 @@ along with Octave; see the file COPYING.
 #include "ov-fcn-handle.h"
 #include "parse.h"
 #include "toplev.h"
 #include "txt-eng-ft.h"
 #include "unwind-prot.h"
 
 // forward declarations
 static octave_value xget (const graphics_handle& h, const caseless_str& name);
-graphics_object xget_ancestor (const graphics_object& go_arg,
-                                      const std::string& type);
 
 static void
 gripe_set_invalid (const std::string& pname)
 {
   error ("set: invalid value for %s property", pname.c_str ());
 }
 
 // Check to see that PNAME matches just one of PNAMES uniquely.
@@ -455,17 +453,17 @@ convert_position (const Matrix& pos, con
 }
 
 static Matrix
 convert_text_position (const Matrix& pos, const text::properties& props,
                        const caseless_str& from_units,
                        const caseless_str& to_units)
 {
   graphics_object go = gh_manager::get_object (props.get___myhandle__ ());
-  graphics_object ax = xget_ancestor (go, "axes");
+  graphics_object ax = go.get_ancestor ("axes");
 
   Matrix retval (1, pos.numel (), 0);
 
   if (ax.valid_object ())
     {
       const axes::properties& ax_props =
           dynamic_cast<const axes::properties&> (ax.get_properties ());
       graphics_xform ax_xform = ax_props.get_transform ();
@@ -536,36 +534,16 @@ convert_text_position (const Matrix& pos
 static Matrix
 screen_size_pixels (void)
 {
   graphics_object obj = gh_manager::get_object (0);
   Matrix sz = obj.get ("screensize").matrix_value ();
   return convert_position (sz, obj.get ("units").string_value (), "pixels", sz.extract_n (0, 2, 1, 2)).extract_n (0, 2, 1, 2);
 }
 
-graphics_object
-xget_ancestor (const graphics_object& go_arg, const std::string& type)
-{
-  graphics_object go = go_arg;
-
-  do
-    {
-      if (go.valid_object ())
-        {
-          if (go.isa (type))
-            return go;
-          else
-            go = gh_manager::get_object (go.get_parent ());
-        }
-      else
-        return graphics_object ();
-    }
- while (true);
-}
-
 static void
 convert_cdata_2 (bool is_scaled, double clim_0, double clim_1,
                  const double *cmapv, double x, octave_idx_type lda,
                  octave_idx_type nc, octave_idx_type i, double *av)
 {
   if (is_scaled)
     x = xround ((nc - 1) * (x - clim_0) / (clim_1 - clim_0));
   else
@@ -610,29 +588,29 @@ convert_cdata (const base_properties& pr
 
   if (dv.length () == cdim && dv(cdim-1) == 3)
     return cdata;
 
   Matrix cmap (1, 3, 0.0);
   Matrix clim (1, 2, 0.0);
 
   graphics_object go = gh_manager::get_object (props.get___myhandle__ ());
-  graphics_object fig = xget_ancestor (go, "figure");
+  graphics_object fig = go.get_ancestor ("figure");
 
   if (fig.valid_object ())
     {
       Matrix _cmap = fig.get (caseless_str ("colormap")).matrix_value ();
 
       if (! error_state)
         cmap = _cmap;
     }
 
   if (is_scaled)
     {
-      graphics_object ax = xget_ancestor (go, "axes");
+      graphics_object ax = go.get_ancestor ("axes");
 
       if (ax.valid_object ())
         {
           Matrix _clim = ax.get (caseless_str ("clim")).matrix_value ();
 
           if (! error_state)
             clim = _clim;
         }
@@ -2550,16 +2528,30 @@ base_graphics_object::values_as_struct (
         }
     }
   else
     error ("base_graphics_object::values_as_struct: invalid graphics object");
 
   return retval;
 }
 
+graphics_object
+graphics_object::get_ancestor (const std::string& type) const
+{
+  if (valid_object ())
+    {
+      if (isa (type))
+        return *this;
+      else
+        return gh_manager::get_object (get_parent ()).get_ancestor (type);
+    }
+  else
+    return graphics_object ();
+}
+
 // ---------------------------------------------------------------------
 
 #include "graphics-props.cc"
 
 // ---------------------------------------------------------------------
 
 void
 root_figure::properties::set_currentfigure (const octave_value& v)
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -2491,16 +2491,18 @@ public:
   std::string values_as_string (void) { return rep->values_as_string (); }
 
   octave_map values_as_struct (void) { return rep->values_as_struct (); }
 
   graphics_handle get_parent (void) const { return rep->get_parent (); }
 
   graphics_handle get_handle (void) const { return rep->get_handle (); }
 
+  graphics_object get_ancestor (const std::string& type) const;
+
   void remove_child (const graphics_handle& h) { rep->remove_child (h); }
 
   void adopt (const graphics_handle& h) { rep->adopt (h); }
 
   void reparent (const graphics_handle& h) { rep->reparent (h); }
 
   void defaults (void) const { rep->defaults (); }
 
