# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1471462772 -3600
#      Wed Aug 17 20:39:32 2016 +0100
# Node ID 8d747185ae6bca66b26e1d38ad8a485899d8a9d8
# Parent  07eb510d88004c0197d69c7a513987de58a07839
doc: remove "Contributing guidelines" and "Tips and standards" from the manual.

* doc/interpreter/contrib.txi, doc/interpreter/tips.txi: remove sections
"Contributing guidelines" and "Tips and standards" which are outside of
the scope of a language manual.  The Octave website is a better fit for
this subject and most of this content has been merged in the Octave wiki
(most of it was already duplicated).
* doc/interpreter/external.txi: remove reference to removed section about
tips on writing good documentation.
* doc/interpreter/install.txi: replace link to removed section of the
manual with reference to the files in source that have instructions for
building.
* doc/interpreter/preface.txi: replace link to removed section of the manual
with link to octave.org for instructions on how to get involved.
* etc/HACKING: replace references to the removed sections of the manual
with link to the main page on the wiki with contribution guidelines.
* /doc/interpreter/module.mk: remove files from build system.

diff --git a/doc/interpreter/contrib.txi b/doc/interpreter/contrib.txi
deleted file mode 100644
--- a/doc/interpreter/contrib.txi
+++ /dev/null
@@ -1,511 +0,0 @@
-@c Copyright (C) 2012 John W. Eaton
-@c Copyright (C) 2008-2016 Jaroslav Hajek
-@c
-@c This file is part of Octave.
-@c
-@c Octave is free software; you can redistribute it and/or modify it
-@c under the terms of the GNU General Public License as published by the
-@c Free Software Foundation; either version 3 of the License, or (at
-@c your option) any later version.
-@c
-@c Octave is distributed in the hope that it will be useful, but WITHOUT
-@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
-@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
-@c for more details.
-@c
-@c You should have received a copy of the GNU General Public License
-@c along with Octave; see the file COPYING.  If not, see
-@c <http://www.gnu.org/licenses/>.
-
-@node Contributing Guidelines
-@appendix Contributing Guidelines
-@cindex coding standards
-@cindex Octave development
-
-This chapter is dedicated to those who wish to contribute code to Octave.
-
-@menu
-* How to Contribute::
-* Building the Development Sources::
-* Basics of Generating a Changeset::
-* General Guidelines::
-* Octave Sources (m-files)::
-* C++ Sources::
-* Other Sources::
-@end menu
-
-@node How to Contribute
-@section How to Contribute
-The mailing list for Octave development discussions is
-@email{maintainers@@octave.org}.  Patches should be submitted to
-@url{https://savannah.gnu.org/patch/?func=additem&group=octave, Octave's patch tracker}.
-This concerns the development of Octave core, i.e., code that goes in to Octave
-directly.  You may consider developing and publishing a package instead;
-a great place for this is the allied Octave-Forge project
-(@url{http://octave.sourceforge.net}).  Note that the Octave core
-project is inherently more conservative and follows narrower rules.
-
-@node Building the Development Sources
-@section Building the Development Sources
-
-The directions for building from the development sources change from
-time to time, so you should read the resources for developers on the web
-or in the development sources archive.  Start here:
-@url{http://www.octave.org/get-involved.html}.
-
-@node Basics of Generating a Changeset
-@section Basics of Generating a Changeset
-
-The best way to contribute is to create a Mercurial changeset and submit it to
-the @url{http://savannah.gnu.org/bugs/?group=octave, bug} or
-@url{http://savannah.gnu.org/patch/?func=additem&group=octave, patch}
-trackers@footnote{Please use the patch tracker only for patches which add new
-features.  If you have a patch to submit that fixes a bug, you should use the
-bug tracker instead.}.
-Mercurial is the source code management system currently used to develop
-Octave.  Other forms of contributions (e.g., simple diff patches) are
-also acceptable, but they slow down the review process.  If you want to
-make more contributions, you should really get familiar with Mercurial.
-A good place to start is
-@url{http://www.selenic.com/mercurial/wiki/index.cgi/Tutorial}.  There
-you will also find help about how to install Mercurial.
-
-A simple contribution sequence could look like this:
-
-@example
-@group
-hg clone http://www.octave.org/hg/octave
-                             # make a local copy of the octave
-                             # source repository
-cd octave
-# change some sources@dots{}
-hg commit -m "make Octave the coolest software ever"
-                             # commit the changeset into your
-                             # local repository
-hg export -o ../cool.diff tip
-                             # export the changeset to a diff
-                             # file
-# attach ../cool.diff to your bug report
-@end group
-@end example
-
-You may want to get familiar with Mercurial queues to manage your
-changesets.  To work with queues you must activate the extension
-@nospell{mq} with the following entry in Mercurial's configuration file
-@file{.hgrc} (or @file{Mercurial.ini} on Windows):
-
-@example
-@group
-[extensions]
-mq=
-@end group
-@end example
-
-Here is a slightly more complex example using Mercurial
-queues, where work on two unrelated changesets is done in parallel and
-one of the changesets is updated after discussion on the bug tracker:
-
-@example
-hg qnew nasty_bug            # create a new patch
-# change sources@dots{}
-hg qref                      # save the changes into the patch
-# change even more@dots{}
-hg qref -m "solution to nasty bug!"
-                             # save again with commit message
-hg export -o ../nasty.diff tip
-                             # export the patch
-# attach ../nasty.diff to your bug report
-hg qpop                      # undo the application of the patch
-                             # and remove the changes from the
-                             # source tree
-hg qnew doc_improvements     # create an unrelated patch
-# change doc sources@dots{}
-hg qref -m "could not find myfav.m in the doc"
-                             # save the changes into the patch
-hg export -o ../doc.diff tip
-                             # export the second patch
-# attach ../doc.diff to your bug report
-hg qpop
-# discussion in the bug tracker @dots{}
-hg qpush nasty_bug           # apply the patch again
-# change sources yet again @dots{}
-hg qref
-hg export -o ../nasty2.diff tip
-# attach ../nasty2.diff to your bug report
-@end example
-
-Mercurial has a few more useful extensions that really should be enabled.
-They are not enabled by default due to a number of factors
-(mostly because they don't work in all terminal types).
-
-The following entries in the @file{.hgrc} are recommended
-
-@example
-@group
-[extensions]
-graphlog=
-color=
-progress=
-pager=
-@end group
-@end example
-
-For the color extension, default color and formatting
-of @code{hg status} can be modified by
-
-@example
-@group
-[color]
-status.modified = magenta bold
-status.added = green bold
-status.removed = red bold
-status.deleted = cyan bold
-status.unknown = black  bold
-status.ignored = black bold
-@end group
-@end example
-
-Sometimes a few further improvements for the pager extension are
-necessary.  The following options should not be enabled unless paging
-is not working correctly.
-
-@example
-@group
-[pager]
-# Some options for the less pager, see less(1) for their meaning.
-pager = LESS='FSRX' less
-
-# Some commands that aren't paged by default; also enable paging
-# for them
-attend = tags, help, annotate, cat, diff, export, status, \
-         outgoing, incoming
-@end group
-@end example
-
-Enabling the described extensions should immediately lead to a difference
-when using the command line version of @nospell{hg}.  Of these options, the
-only one that enables a new command is @nospell{graphlog}.  It is recommanded
-that to use the command @code{hg glog}, instead of @code{hg log}, for a better
-feel about what commits are being based on.
-
-@node General Guidelines
-@section General Guidelines
-
-All Octave's sources are distributed under the GNU General Public License
-(GPL).  Currently, Octave uses GPL version 3.  For details about this
-license, see @url{http://www.gnu.org/licenses/gpl.html}.  Therefore,
-whenever you create a new source file, it should have the following
-comment header (use appropriate year, name and comment marks):
-
-@example
-@group
-## Copyright (C) 1996-2016 John W. Eaton <jwe@@octave.org>
-##
-## This file is part of Octave.
-##
-## Octave is free software; you can redistribute it and/or modify it
-## under the terms of the GNU General Public License as published by
-## the Free Software Foundation; either version 3 of the License, or
-## (at your option) any later version.
-##
-## Octave is distributed in the hope that it will be useful, but
-## WITHOUT ANY WARRANTY; without even the implied warranty of
-## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-## GNU General Public License for more details.
-##
-## You should have received a copy of the GNU General Public License
-## along with Octave; see the file COPYING.  If not,
-## see <http://www.gnu.org/licenses/>.
-@end group
-@end example
-
-Always include commit messages in changesets.  After making your source
-changes, record and briefly describe the changes in your commit message.
-You should have previously configured your @file{.hgrc} (or
-@file{Mercurial.ini} on Windows) with your name and email, which will
-be automatically added to your commit message.  Your commit message
-should have a brief one-line explanation of what the commit does.  If you
-are patching a bug, this one-line explanation should mention the bug
-number at the end.  If your change is small and only touches one file then
-this is typically sufficient.  If you are modifying several files, or
-several parts of one file, you should enumerate your changes roughly
-following the GNU coding standards for changelogs, as in the following
-example:
-
-@example
-@group
-look for methods before constructors
-
-* symtab.cc (symbol_table::fcn_info::fcn_info_rep::find):
-Look for class methods before constructors, contrary to @sc{matlab}
-documentation.
-
-* test/ctor-vs-method: New directory of test classes.
-* test/test_ctor_vs_method.m: New file.
-* test/Makefile.am: Include ctor-vs-method/module.mk.
-(FCN_FILES): Include test_ctor_vs_method.m in the list.
-@end group
-@end example
-
-@noindent
-In this example, the names of the file changed is listed first, and in
-parentheses the name of the function in that file that was modified.  There
-is no need to mention the function for m-files that only contain one function.
-The commit message should describe what was changed, not why it was changed.
-Any explanation for why a change is needed should appear as comments in the
-code, particularly if there is something that might not be obvious to someone
-reading it later.
-
-When submitting code which addresses a known bug on the Octave bug
-tracker (@url{http://bugs.octave.org}), please add '(bug #XXXXX)' to the
-first line of the commit messages.  For example:
-
-@example
-@group
-Fix zip, gzip, bzip2 to allow names with spaces (bug #47232)
-@end group
-@end example
-
-The preferred comment mark for places that may need further attention is
-@code{FIXME:}.
-
-@node Octave Sources (m-files)
-@section Octave Sources (m-files)
-
-Don't use tabs.  Tabs cause trouble.  If you are used to them, set up
-your editor so that it converts tabs to spaces.  Indent the bodies of
-statement blocks.  The recommended indent is 2 spaces.
-
-When calling functions, put spaces after commas and before the calling
-parentheses, like this:
-
-@example
-  x = max (sin (y+3), 2);
-@end example
-
-@noindent
-An exception are matrix or cell constructors:
-
-@example
-@group
-  [sin(x), cos(x)]
-  @{sin(x), cos(x)@}
-@end group
-@end example
-
-@noindent
-Here, putting spaces after @code{sin}, @code{cos} would result in a
-parse error.
-
-For indexing expressions, do @strong{not} put a space after the
-identifier (this differentiates indexing and function calls nicely).
-The space after a comma is not necessary if index expressions are simple,
-i.e., you may write
-
-@example
-  A(:,i,j)
-@end example
-
-@noindent
-but
-
-@example
-  A([1:i-1;i+1:n], XI(:,2:n-1))
-@end example
-
-When constructing matrices, prefer using the comma rather than the space to
-distinguish between columns.
-
-@example
-@group
-  M = [1, 2, 3
-       4, 5, 6];
-@end group
-@end example
-
-However, if the matrix is large or the indentation makes it clear the comma
-may be dropped.
-
-@example
-@group
-  prices = [ 1.01  2.02  3.03
-            44.04 55.05  6.06];
-@end group
-@end example
-
-Use lowercase names if possible.  Uppercase is acceptable for variable
-names consisting of 1-2 letters.  Do not use mixed case names.  Function
-names must be lowercase.  Function names are global, so choose them
-wisely.
-
-Always use a specific end-of-block statement (like @code{endif},
-@code{endswitch}) rather than the generic @code{end}.
-
-Enclose the condition of an @code{if}, @code{while}, @code{until}, or
-@code{switch} statement in parentheses, as in C:
-
-@example
-@group
-if (isvector (a))
-  s = sum (a);
-endif
-@end group
-@end example
-
-@noindent
-Do not do this, however, with the iteration counter portion of a @code{for}
-statement.  Write:
-
-@example
-@group
-for i = 1:n
-  b(i) = sum (a(:,i));
-endfor
-@end group
-@end example
-
-The Octave operator @samp{!} should be used for logical negation, rather than
-@samp{~}.  The negation operator is written with a space between the operator
-and its target, e.g., @code{! A}.
-
-Comments should begin with the @samp{#} character, rather than @samp{%}.
-@xref{Comment Tips}.
-
-Any demos or Built-In Self Tests (BIST) using the @code{%!demo} or
-@code{%!test} syntax should begin two lines after the @code{endfunction}
-keyword.  Demo blocks should be listed before test blocks.
-
-@node C++ Sources
-@section C++ Sources
-
-Don't use tabs.  Tabs cause trouble.  If you are used to them, set up
-your editor so that it converts tabs to spaces.
-
-Format function headers like this:
-
-@example
-@group
-static bool
-matches_patterns (const string_vector& patterns, int pat_idx,
-                  int num_pat, const std::string& name)
-@end group
-@end example
-
-@noindent
-The return type of the function and any modifiers are specified on the first
-line.  The function name on the second line should start in column 1, and
-multi-line argument lists should be aligned on the first char after the open
-parenthesis.  You should put a space before the left open parenthesis and after
-commas, for both function definitions and function calls.
-
-The recommended indent is 2 spaces.  When indenting, indent the statement
-after control structures (like @code{if}, @code{while}, etc.).  If there
-is a compound statement, indent @emph{both} the curly braces and the
-body of the statement (so that the body gets indented by @emph{two}
-indents).  This format is known as @nospell{"GNU style"} and is an option for
-some code formatting tools.  Example indenting:
-
-@example
-@group
-if (have_args)
-  @{
-    idx.push_back (first_args);
-    have_args = false;
-  @}
-else
-  idx.push_back (make_value_list (*p_args, *p_arg_nm, &tmp));
-@end group
-@end example
-
-@noindent
-If you have nested @code{if} statements, use extra braces for extra
-clarification.
-
-Split long expressions in such a way that a continuation line starts
-with an operator rather than identifier.  If the split occurs inside
-braces, continuation should be aligned with the first char after the
-innermost braces enclosing the split.  Example:
-
-@example
-@group
-SVD::type type = ((nargout == 0 || nargout == 1)
-                  ? SVD::sigma_only
-                  : (nargin == 2) ? SVD::economy : SVD::std);
-@end group
-@end example
-
-@noindent
-Consider putting extra braces around a multi-line expression to make it
-more readable, even if they are not necessary.  Also, do not hesitate to
-put extra braces anywhere if it improves clarity.
-
-The negation operator is written with a space between the operator
-and its target, e.g., @code{! A}.
-
-Declare variables just before they are needed.  Use variables local to
-blocks---it helps optimization.  Don't write a multi-line variable
-declaration with a single type specification and multiple variables.  If
-the variables don't fit on single line, repeat the type specification.
-Example:
-
-@example
-@group
-octave_value retval;
-
-octave_idx_type nr = b.rows ();
-octave_idx_type nc = b.cols ();
-
-double d1, d2;
-@end group
-@end example
-
-Use lowercase names if possible.  Uppercase is acceptable for variable
-names consisting of 1-2 letters.  Do not use mixed case names.
-
-Use Octave's types and classes if possible.  Otherwise, use the C++
-standard library.  Use of STL containers and algorithms is encouraged.
-Use templates wisely to reduce code duplication.
-
-Avoid comma expressions, labels and gotos, and explicit typecasts.  If you need
-to typecast, use the modern C++ casting operators.  In functions, minimize the
-number of @code{return} statements, but elimination of all but one
-@code{return} is not required.
-
-When an empty string is required, use @qcode{""}, rather than creating an empty
-string object with @code{std::string ()}.
-
-@node Other Sources
-@section Other Sources
-Apart from C++ and Octave language (m-files), Octave's sources include
-files written in C, Fortran, M4, Perl, Unix shell, AWK, Texinfo, and
-@TeX{}.  There are not many rules to follow when using these other
-languages; some of them are summarized below.  In any case, the golden
-rule is: if you modify a source file, try to follow any conventions you
-can detect in the file or other similar files.
-
-For C, you should follow all C++ rules that can apply.
-
-If you modify a Fortran file, you should stay within Fortran 77 with
-common extensions like @code{END DO}.  Currently, we want all sources to
-be compilable with the f2c and g77 compilers, without special flags if
-possible.  This usually means that non-legacy compilers also accept the
-sources.
-
-The M4 macro language is mainly used for Autoconf configuration files.
-You should follow normal M4 rules when contributing to these files.
-Some M4 files come from external source, namely the Autoconf archive
-@url{http://autoconf-archive.cryp.to}.
-
-If you give a code example in the documentation written in Texinfo with
-the @code{@@example} environment, you should be aware that the text
-within such an environment will not be wrapped.  It is recommended that
-you keep the lines short enough to fit on pages in the generated pdf or
-ps documents.  Here is a ruler (in an @code{@@example} environment) for
-finding the appropriate line width:
-
-@example
-@group
-         1         2         3         4         5         6
-123456789012345678901234567890123456789012345678901234567890
-@end group
-@end example
diff --git a/doc/interpreter/external.txi b/doc/interpreter/external.txi
--- a/doc/interpreter/external.txi
+++ b/doc/interpreter/external.txi
@@ -1204,17 +1204,17 @@ 1 / 0
 The warning for division by zero (and in fact all warnings) are disabled in the
 @code{unwinddemo} function.
 
 @node Documentation and Test of Oct-Files
 @subsection Documentation and Test of Oct-Files
 
 The documentation of an oct-file is the fourth string parameter of the
 @w{@code{DEFUN_DLD}} macro.  This string can be formatted in the same manner
-as the help strings for user functions (@pxref{Documentation Tips}),
+as the help strings for user functions,
 however there are some issue that are particular to the formatting of
 help strings within oct-files.
 
 The major issue is that the help string will typically be longer than a
 single line of text, and so the formatting of long help strings needs to
 be taken into account.  There are several possible solutions, but the most
 common is illustrated in the following example,
 
diff --git a/doc/interpreter/install.txi b/doc/interpreter/install.txi
--- a/doc/interpreter/install.txi
+++ b/doc/interpreter/install.txi
@@ -43,17 +43,17 @@ derived file.
 @end ifset
 
 @cindex installing Octave
 
 The procedure for installing Octave from source on a Unix-like system is
 described next.  Building on other platforms will follow similar
 steps.  Note that this description applies to Octave releases.  Building
 the development sources from the Mercurial archive requires additional
-steps as described in @ref{Building the Development Sources}.
+steps as described in the development source itself.
 
 @menu
 * Build Dependencies::
 * Running Configure and Make::
 * Compiling Octave with 64-bit Indexing::
 * Installation Problems::
 @end menu
 
diff --git a/doc/interpreter/module.mk b/doc/interpreter/module.mk
--- a/doc/interpreter/module.mk
+++ b/doc/interpreter/module.mk
@@ -110,17 +110,16 @@ DOC_IMAGES_EPS += doc/interpreter/octave
 DOC_IMAGES_PDF += doc/interpreter/octave_logo.pdf
 
 MUNGED_TEXI_SRC = \
   doc/interpreter/arith.texi \
   doc/interpreter/audio.texi \
   doc/interpreter/basics.texi \
   doc/interpreter/bugs.texi \
   doc/interpreter/container.texi \
-  doc/interpreter/contrib.texi \
   doc/interpreter/cp-idx.texi \
   doc/interpreter/data.texi \
   doc/interpreter/debug.texi \
   doc/interpreter/diffeq.texi \
   doc/interpreter/diagperm.texi \
   doc/interpreter/external.texi \
   doc/interpreter/emacs.texi \
   doc/interpreter/errors.texi \
@@ -153,17 +152,16 @@ MUNGED_TEXI_SRC = \
   doc/interpreter/set.texi \
   doc/interpreter/signal.texi \
   doc/interpreter/sparse.texi \
   doc/interpreter/stats.texi \
   doc/interpreter/stmt.texi \
   doc/interpreter/strings.texi \
   doc/interpreter/system.texi \
   doc/interpreter/testfun.texi \
-  doc/interpreter/tips.texi \
   doc/interpreter/var.texi \
   doc/interpreter/vectorize.texi
 
 TXI_SRC = $(MUNGED_TEXI_SRC:.texi=.txi)
 
 BUILT_OCTAVE_TEXI_SRC = \
   doc/interpreter/contributors.texi \
   $(GRAPH_PROP_TEXI_SRC) \
diff --git a/doc/interpreter/preface.txi b/doc/interpreter/preface.txi
--- a/doc/interpreter/preface.txi
+++ b/doc/interpreter/preface.txi
@@ -165,18 +165,18 @@ use @code{citation}.
 @node How You Can Contribute to Octave
 @unnumberedsec How You Can Contribute to Octave
 @cindex contributing to Octave
 @cindex funding Octave development
 
 There are a number of ways that you can contribute to help make Octave a
 better system.  Perhaps the most important way to contribute is to write
 high-quality code for solving new problems, and to make your code freely
-available for others to use.  @xref{Contributing Guidelines}, for detailed
-information on contributing new code.
+available for others to use.  See @url{http://www.octave.org/get-involved.html}
+for detailed information.
 
 If you find Octave useful, consider providing additional funding to
 continue its development.  Even a modest amount of additional funding
 could make a significant difference in the amount of time that is
 available for development and support.
 
 Donations supporting Octave development may be made on the web at
 @url{https://my.fsf.org/donate/working-together/octave}.  These
diff --git a/doc/interpreter/tips.txi b/doc/interpreter/tips.txi
deleted file mode 100644
--- a/doc/interpreter/tips.txi
+++ /dev/null
@@ -1,697 +0,0 @@
-@c Copyright (C) 1996-2016 John W. Eaton
-@c
-@c This file is part of Octave.
-@c
-@c Octave is free software; you can redistribute it and/or modify it
-@c under the terms of the GNU General Public License as published by the
-@c Free Software Foundation; either version 3 of the License, or (at
-@c your option) any later version.
-@c
-@c Octave is distributed in the hope that it will be useful, but WITHOUT
-@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
-@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
-@c for more details.
-@c
-@c You should have received a copy of the GNU General Public License
-@c along with Octave; see the file COPYING.  If not, see
-@c <http://www.gnu.org/licenses/>.
-
-@node Tips and Standards
-@appendix Tips and Standards
-@cindex tips
-@cindex standards of coding style
-@cindex coding standards
-
-This chapter describes no additional features of Octave.  Instead it
-gives advice on making effective use of the features described in the
-previous chapters.
-
-@menu
-* Style Tips::                  Writing clean and robust programs.
-* Comment Tips::                Conventions for writing comments.
-* Function Headers::            Standard headers for functions.
-* Documentation Tips::          Writing readable documentation strings.
-@end menu
-
-@node Style Tips
-@section Writing Clean Octave Programs
-
-Here are some tips for avoiding common errors in writing Octave code
-intended for widespread use:
-
-@itemize @bullet
-@item
-Since all global variables share the same name space, and all functions
-share another name space, you should choose a short word to distinguish
-your program from other Octave programs.  Then take care to begin the
-names of all global variables, constants, and functions with the chosen
-prefix.  This helps avoid name conflicts.
-
-If you write a function that you think ought to be added to Octave under
-a certain name, such as @code{fiddle_matrix}, don't call it by that name
-in your program.  Call it @code{mylib_fiddle_matrix} in your program,
-and send mail to @email{maintainers@@octave.org} suggesting that it
-be added to Octave.  If and when it is, the name can be changed easily
-enough.
-
-If one prefix is insufficient, your package may use two or three
-alternative common prefixes, so long as they make sense.
-
-Separate the prefix from the rest of the symbol name with an underscore
-@samp{_}.  This will be consistent with Octave itself and with most
-Octave programs.
-
-@item
-When you encounter an error condition, call the function @code{error}
-(or @code{print_usage}).  The @code{error} and @code{print_usage} functions
-do not return.  @xref{Errors}.  It is customary to prefix the error message
-with the name of the function that generated it.  For example:
-
-@example
-error ("my_cool_function: input A must be a matrix");
-@end example
-
-@item
-Please put a copyright notice on the file if you give copies to anyone.
-Use the same lines that appear at the top of the function files
-distributed with Octave.  If you have not signed papers to assign the
-copyright to anyone else, then place your name in the copyright notice.
-@end itemize
-
-
-@node Comment Tips
-@section Tips on Writing Comments
-
-Here are the conventions to follow when writing comments.
-
-@table @samp
-@item #
-Comments that start with a single sharp-sign, @samp{#}, are used to explain
-the code on the same line as the comment itself.  These comments should
-all be aligned to the same column to the right of the source code.  In
-the Emacs mode for Octave, the @kbd{M-;} (@code{indent-for-comment})
-command automatically inserts such a @samp{#} in the right place, or
-aligns such a comment if it is already present.  Example:
-
-@example
-@var{C} = 2 * pi * r;    # formula for circumference of a circle
-@end example
-
-@item ##
-Comments that start with a double sharp-sign, @samp{##}, are stand-alone
-comments that occupy an entire line.  These comments should be aligned to
-the same level of indentation as the code.  Such comments usually
-describe the purpose of the following lines or the state of the program
-at that point.  Example:
-
-@example
-@group
-## Calculate area and volume of a sphere
-@var{A} = 4 * pi * r^2;
-@var{V} = 4/3 * pi * r^3;
-@end group
-@end example
-
-@end table
-
-@noindent
-The indentation commands of the Octave mode in Emacs, such as @kbd{M-;}
-(@code{indent-for-comment}) and @kbd{TAB} (@code{octave-indent-line})
-automatically indent comments according to these conventions,
-depending on the number of semicolons.  @xref{Comments,,
-Manipulating Comments, emacs, The GNU Emacs Manual}.
-
-@node Function Headers
-@section Conventional Headers for Octave Functions
-@cindex header comments
-
-Octave has conventions for using special comments in function files
-to give information such as who wrote them.  This section explains these
-conventions.
-
-The top of the file should contain a copyright notice, followed by a
-block of comments that can be used as the help text for the function.
-Here is an example:
-
-@example
-## Copyright (C) 1996, 1997, 2007 John W. Eaton
-##
-## This file is part of Octave.
-##
-## Octave is free software; you can redistribute it and/or
-## modify it under the terms of the GNU General Public
-## License as published by the Free Software Foundation;
-## either version 3 of the License, or (at your option) any
-## later version.
-##
-## Octave is distributed in the hope that it will be useful,
-## but WITHOUT ANY WARRANTY; without even the implied
-## warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
-## PURPOSE.  See the GNU General Public License for more
-## details.
-##
-## You should have received a copy of the GNU General Public
-## License along with Octave; see the file COPYING.  If not,
-## see <http://www.gnu.org/licenses/>.
-
-## usage: [IN, OUT, PID] = popen2 (COMMAND, ARGS)
-##
-## Start a subprocess with two-way communication.  COMMAND
-## specifies the name of the command to start.  ARGS is an
-## array of strings containing options for COMMAND.  IN and
-## OUT are the file ids of the input and streams for the
-## subprocess, and PID is the process id of the subprocess,
-## or -1 if COMMAND could not be executed.
-##
-## Example:
-##
-##  [in, out, pid] = popen2 ("sort", "-nr");
-##  fputs (in, "these\nare\nsome\nstrings\n");
-##  fclose (in);
-##  while (ischar (s = fgets (out)))
-##    fputs (stdout, s);
-##  endwhile
-##  fclose (out);
-@end example
-
-Octave uses the first block of comments in a function file that do not
-appear to be a copyright notice as the help text for the file.  For
-Octave to recognize the first comment block as a copyright notice, it
-must start with the word `Copyright' after stripping the leading
-comment characters.
-
-After the copyright notice and help text come several @dfn{header
-comment} lines, each beginning with @samp{## @var{header-name}:}.  For
-example,
-
-@example
-@group
-## Author: jwe
-## Keywords: subprocesses input-output
-## Maintainer: jwe
-@end group
-@end example
-
-Here is a table of the conventional possibilities for @var{header-name}:
-
-@table @samp
-@item Author
-This line states the name and net address of at least the principal
-author of the library.
-
-@example
-## Author: John W. Eaton <jwe@@octave.org>
-@end example
-
-@item Maintainer
-This line should contain a single name/address as in the Author line, or
-an address only, or the string @samp{jwe}.  If there is no maintainer
-line, the person(s) in the Author field are presumed to be the
-maintainers.
-
-The idea behind the @samp{Author} and @samp{Maintainer} lines is to make
-possible a function to ``send mail to the maintainer'' without
-having to mine the name out by hand.
-
-Be sure to surround the network address with @samp{<@dots{}>} if
-you include the person's full name as well as the network address.
-
-@item Created
-This optional line gives the original creation date of the
-file.  For historical interest only.
-
-@item Version
-If you wish to record version numbers for the individual Octave program,
-put them in this line.
-
-@item Adapted-By
-In this header line, place the name of the person who adapted the
-library for installation (to make it fit the style conventions, for
-example).
-
-@item Keywords
-This line lists keywords.  Eventually, it will be used by an apropos
-command to allow people will find your package when they're looking for
-things by topic area.  To separate the keywords, you can use spaces,
-commas, or both.
-@end table
-
-Just about every Octave function ought to have the @samp{Author} and
-@samp{Keywords} header comment lines.  Use the others if they are
-appropriate.  You can also put in header lines with other header
-names---they have no standard meanings, so they can't do any harm.
-
-@node Documentation Tips
-@section Tips for Documentation Strings
-
-As noted above, documentation is typically in a commented header block
-on an Octave function following the copyright statement.  The help string
-shown above is an unformatted string and will be displayed as is by
-Octave.  Here are some tips for the writing of documentation strings.
-
-@itemize @bullet
-@item
-Every command, function, or variable intended for users to know about
-should have a documentation string.
-
-@item
-An internal variable or subroutine of an Octave program might as well have
-a documentation string.
-
-@item
-The first line of the documentation string should consist of a summary of
-the function.
-
-Subsequent lines may expand the general nature of the function.
-
-After the introduction there should be paragraphs describing the meaning
-and usage of each input, followed by the meaning and usage of each output.
-
-Finally, there may be more general information such as notes about the
-algorithm used, references to scientific papers, notes about any
-incompatibilities with @sc{matlab}, etc.
-
-@item
-For consistency, phrase the verb in the first sentence of a
-documentation string as an infinitive with ``to'' omitted.  For
-instance, use ``Return the frob of A and B.'' in preference to ``Returns
-the frob of A and B@.''  Usually it looks good to do likewise for the
-rest of the first paragraph.  Subsequent paragraphs usually look better
-if they have proper subjects.
-
-@item
-Write documentation strings in the active voice, not the passive, and in
-the present tense, not the future.  For instance, use ``Return a list
-containing A and B.'' instead of ``A list containing A and B will be
-returned.''
-
-@item
-Avoid using the word ``cause'' (or its equivalents) unnecessarily.
-Instead of, ``Cause Octave to display text in boldface,'' just write
-``Display text in boldface.''
-
-@item
-Use two spaces between the period marking the end of a sentence and the
-word which opens the next sentence.  This convention has no effect for
-typeset formats like @TeX{}, but improves the readability of the documentation
-in fixed-width environments such as the Info reader.
-
-@item
-Do not start or end a documentation string with whitespace.
-
-@item
-Format the documentation string so that it fits within an 80-column screen.
-It is a good idea for most lines to be no wider than 60 characters.
-
-However, rather than simply filling the entire documentation string, you
-can make it much more readable by choosing line breaks with care.
-Use blank lines between topics if the documentation string is long.
-
-@item
-@strong{Do not} indent subsequent lines of a documentation string so
-that the text is lined up in the source code with the text of the first
-line.  This looks nice in the source code, but looks bizarre when users
-view the documentation.  Remember that the indentation before the
-starting double-quote is not part of the string!
-
-@item
-When choosing variable names try to adhere to the following guidelines.
-
-@table @asis
-@item vectors :
-x,y,z,t,w
-
-@item matrices :
-A,B,M
-
-@item strings :
-@nospell{str},s
-
-@item filenames :
-@nospell{fname}
-
-@item cells,@nospell{cellstrs} :
-c,@nospell{cstr}
-@end table
-
-@item
-The documentation string for a variable that is a yes-or-no flag should
-start with words such as ``Nonzero means@dots{}'', to make it clear that
-all nonzero values are equivalent and indicate explicitly what zero and
-nonzero mean.
-
-@item
-When a function's documentation string mentions the value of an argument
-of the function, use the argument name in capital letters as if it were
-a name for that value.  Thus, the documentation string of the operator
-@code{/} refers to its second argument as @samp{DIVISOR}, because the
-actual argument name is @code{divisor}.
-
-Also use all caps for meta-syntactic variables, such as when you show
-the decomposition of a list or vector into subunits, some of which may
-vary.
-@end itemize
-
-Octave also allows extensive formatting of the help string of functions
-using Texinfo.  The effect on the online documentation is relatively
-small, but makes the help string of functions conform to the help of
-Octave's own functions.  However, the effect on the appearance of printed
-or online documentation will be greatly improved.
-
-The fundamental building block of Texinfo documentation strings is the
-Texinfo macro @code{@@deftypefn}.  The first argument to the macro is
-always blank.  The second and third arguments are the function's output
-arguments and the function signature.  A skeletal Texinfo documentation
-string looks like this
-
-@example
-@group
--*- texinfo -*-
-@@deftypefn @{@} @{@@var@{ret@} =@} fn (@dots{})
-@@cindex index term
-Help text in Texinfo format.  Code samples should be marked
-like @@code@{sample of code@} and variables should be marked
-as @@var@{variable@}.
-@@seealso@{fn2, fn3@}
-@@end deftypefn
-@end group
-@end example
-
-This help string must be commented in user functions, or in the help
-string of the @w{@code{DEFUN_DLD}} macro for dynamically loadable
-functions.  The important aspects of the documentation string are
-
-@table @asis
-@item -*- @nospell{texinfo} -*-
-This string signals Octave that the following text is in Texinfo format,
-and should be the first part of any help string in Texinfo format.
-
-@item @@deftypefn @{@} @dots{} @@end deftypefn
-The entire help string should be enclosed within the block defined by
-deftypefn.
-
-@item @@cindex index term
-This generates an index entry, and can be useful when the function is
-included as part of a larger piece of documentation.  It is ignored
-within Octave's help viewer.  Only one index term may appear per line
-but multiple @@cindex lines are valid if the function should be
-filed under different terms.
-
-@item @@var@{variable@}
-All variables should be marked with this macro.  The markup of variables
-is then changed appropriately for display.
-
-@item @@code@{sample of code@}
-All samples of code should be marked with this macro for the same
-reasons as the @@var macro.
-
-@item  @nospell{@@qcode@{"sample_code"@}}
-@itemx @nospell{@@qcode@{'sample_code'@}}
-All samples of code which are quoted should use this more specialized macro.
-This happens frequently when discussing graphics properties such as "position"
-or options such as "on"/"off".
-
-@item @@seealso@{function2, function3@}
-This is a comma separated list of function names that allows cross
-referencing from one function documentation string to another.
-@end table
-
-Texinfo format has been designed to generate output for online viewing
-with text terminals as well as generating high-quality printed output.
-To these ends, Texinfo has commands which control the diversion of parts
-of the document into a particular output processor.  Three formats are
-of importance: info, HTML, and @TeX{}.  These are selected with
-
-@example
-@group
-@@ifinfo
-Text area for info only
-@@end ifinfo
-@end group
-@end example
-
-@example
-@group
-@@ifhtml
-Text area for HTML only
-@@end ifhtml
-@end group
-@end example
-
-@example
-@group
-@@tex
-Text area for TeX only
-@@end tex
-@end group
-@end example
-
-Note that often @TeX{} output can be used in HTML documents and so often
-the @code{@@ifhtml} blocks are unnecessary.  If no specific output
-processor is chosen, by default, the text goes into all output
-processors.  It is usual to have the above blocks in pairs to allow the
-same information to be conveyed in all output formats, but with a
-different markup.  Currently, most Octave documentation only makes a
-distinction between @TeX{} and all other formats.  Therefore, the
-following construct is seen repeatedly.
-
-@example
-@group
-@@tex
-text for TeX only
-@@end tex
-@@ifnottex
-text for info, HTML, plaintext
-@@end ifnottex
-@end group
-@end example
-
-Another important feature of Texinfo that is often used in Octave help
-strings is the @code{@@example} environment.  An example of its use is
-
-@example
-@group
-@@example
-@@group
-@@code@{2 * 2@}
-@@result@{@} 4
-@@end group
-@@end example
-@end group
-@end example
-
-@noindent
-which produces
-
-@example
-@group
-@code{2 * 2}
-@result{} 4
-@end group
-@end example
-
-The @code{@@group} block prevents the example from being split across a
-page boundary, while the @code{@@result@{@}} macro produces a right
-arrow signifying the result of a command.  If your example is larger than
-20 lines it is better @emph{NOT} to use grouping so that a reasonable page
-boundary can be calculated.
-
-In many cases a function has multiple ways in which it can be called,
-and the @code{@@deftypefnx} macro can be used to give alternatives.  For
-example
-
-@example
-@group
--*- texinfo -*-
-@@deftypefn  @{@} @{@@var@{a@} =@} fn (@@var@{x@}, @dots{})
-@@deftypefnx @{@} @{@@var@{a@} =@} fn (@@var@{y@}, @dots{})
-Help text in Texinfo format.
-@@end deftypefn
-@end group
-@end example
-
-Many complete examples of Texinfo documentation can be taken from the
-help strings for the Octave functions themselves.  A relatively complete
-example of which is the @code{nchoosek} function.  The Texinfo
-documentation string for @code{nchoosek} is
-
-@example
--*- texinfo -*-
-@@deftypefn  @{@} @{@@var@{c@} =@} nchoosek (@@var@{n@}, @@var@{k@})
-@@deftypefnx @{@} @{@@var@{c@} =@} nchoosek (@@var@{set@}, @@var@{k@})
-
-Compute the binomial coefficient of @@var@{n@} or list all possible
-combinations of a @@var@{set@} of items.
-
-If @@var@{n@} is a scalar then calculate the binomial coefficient
-of @@var@{n@} and @@var@{k@} which is defined as
-@@tex
-$$
- @{n \choose k@} = @{n (n-1) (n-2) \cdots (n-k+1) \over k!@}
-               = @{n! \over k! (n-k)!@}
-$$
-@@end tex
-@@ifnottex
-
-@@example
-@@group
- /   \
- | n |    n (n-1) (n-2) @@dots@{@} (n-k+1)       n!
- |   |  = ------------------------- =  ---------
- | k |               k!                k! (n-k)!
- \   /
-@@end group
-@@end example
-
-@@end ifnottex
-@@noindent
-This is the number of combinations of @@var@{n@} items taken in groups of
-size @@var@{k@}.
-
-If the first argument is a vector, @@var@{set@}, then generate all
-combinations of the elements of @@var@{set@}, taken @@var@{k@} at a time, with
-one row per combination.  The result @@var@{c@} has @@var@{k@} columns and
-@@w@{@@code@{nchoosek (length (@@var@{set@}), @@var@{k@})@}@} rows.
-
-For example:
-
-How many ways can three items be grouped into pairs?
-
-@@example
-@@group
-nchoosek (3, 2)
-   @@result@{@} 3
-@@end group
-@@end example
-
-What are the possible pairs?
-
-@@example
-@@group
-nchoosek (1:3, 2)
-   @@result@{@}  1   2
-       1   3
-       2   3
-@@end group
-@@end example
-
-Programming Note: When calculating the binomial coefficient @@code@{nchoosek@}
-works only for non-negative, integer arguments.  Use @@code@{bincoeff@} for
-non-integer and negative scalar arguments, or for computing many binomial
-coefficients at once with vector inputs for @@var@{n@} or @@var@{k@}.
-
-@@seealso@{bincoeff, perms@}
-@@end deftypefn
-@end example
-
-@noindent
-which demonstrates most of the concepts discussed above.
-@iftex
-This documentation string renders in Info format as
-@c Note: use the actual output of info below, rather than try and
-@c reproduce it here to prevent it looking different from how it would
-@c appear with info.
-
-@example
- -- C = nchoosek (N, K)
- -- C = nchoosek (SET, K)
-
-     Compute the binomial coefficient of N or list all possible
-     combinations of a SET of items.
-
-     If N is a scalar then calculate the binomial coefficient of N and K
-     which is defined as
-
-           /   \
-           | n |    n (n-1) (n-2) ... (n-k+1)       n!
-           |   |  = ------------------------- =  ---------
-           | k |               k!                k! (n-k)!
-           \   /
-
-     This is the number of combinations of N items taken in groups of
-     size K.
-
-     If the first argument is a vector, SET, then generate all
-     combinations of the elements of SET, taken K at a time, with one
-     row per combination.  The result C has K columns and
-     `nchoosek (length (SET), K)' rows.
-
-     For example:
-
-     How many ways can three items be grouped into pairs?
-
-          nchoosek (3, 2)
-             => 3
-
-     What are the possible pairs?
-
-          nchoosek (1:3, 2)
-             =>  1   2
-                 1   3
-                 2   3
-
-     Programming Note: When calculating the binomial coefficient
-     `nchoosek' works only for non-negative, integer arguments.  Use
-     `bincoeff' for non-integer and negative scalar arguments, or for
-     computing many binomial coefficients at once with vector inputs for
-     N or K.
-
-     See also: bincoeff, perms.
-@end example
-@noindent
-whereas in printed documentation using @TeX{} it will appear as
-
-@deftypefn  {} {@var{c} =} nchoosek (@var{n}, @var{k})
-@deftypefnx {} {@var{c} =} nchoosek (@var{set}, @var{k})
-
-Compute the binomial coefficient of @var{n} or list all possible
-combinations of a @var{set} of items.
-
-If @var{n} is a scalar then calculate the binomial coefficient
-of @var{n} and @var{k} which is defined as
-@tex
-$$
- {n \choose k} = {n (n-1) (n-2) \cdots (n-k+1) \over k!}
-               = {n! \over k! (n-k)!}
-$$
-@end tex
-@noindent
-This is the number of combinations of @var{n} items taken in groups of
-size @var{k}.
-
-If the first argument is a vector, @var{set}, then generate all
-combinations of the elements of @var{set}, taken @var{k} at a time, with
-one row per combination.  The result @var{c} has @var{k} columns and
-@w{@code{nchoosek (length (@var{set}), @var{k})}} rows.
-
-For example:
-
-How many ways can three items be grouped into pairs?
-
-@example
-@group
-nchoosek (3, 2)
-   @result{} 3
-@end group
-@end example
-
-What are the possible pairs?
-
-@example
-@group
-nchoosek (1:3, 2)
-   @result{}  1   2
-       1   3
-       2   3
-@end group
-@end example
-
-Programming Note: When calculating the binomial coefficient @code{nchoosek}
-works only for non-negative, integer arguments.  Use @code{bincoeff} for
-non-integer and negative scalar arguments, or for computing many binomial
-coefficients at once with vector inputs for @var{n} or @var{k}.
-
-@seealso{bincoeff, perms}
-@end deftypefn
-
-@end iftex
diff --git a/etc/HACKING b/etc/HACKING
--- a/etc/HACKING
+++ b/etc/HACKING
@@ -118,18 +118,17 @@ and the currently visited hg revision:
   $ hg diff
 
 should output no difference.
 
 ** Coding style
 
 The most important advice is to follow any conventions you detect in the
 file being edited.  In addition, Octave maintainers have written a lot
-on the subject.  See "Appendix C: Tips and Standards" and
-"Appendix D: Contributing Guidelines" in the PDF documentation.
+on the subject.  See http://wiki.octave.org/Contribution_guidelines
 
 * Bugs and patches
 
 See the file BUGS in this directory for more guidance on reporting bugs
 and preparing patches.
 
 * Code layout
 
