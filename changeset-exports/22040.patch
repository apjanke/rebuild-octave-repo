# HG changeset patch
# User Daniel J Sebald <daniel.sebald@ieee.org>
# Date 1467741600 18000
#      Tue Jul 05 13:00:00 2016 -0500
# Node ID 79e7a6fc524d1d3ee8285828e7059c0e3e16208b
# Parent  0a528a6dac958c19cda37301623c9408856727f7
Add control of grid lines for gnuplot toolkit (bug #48401).

* __gnuplot_draw_axes__.m: Remove grid commands from before data commands to
  after data commands, and use a linetype via do_linestyle_command() for
  dashtype, color and linewidth control.
  (do_linestyle_command): Condition the extra linetype command on the
  presence of points on the plot.

diff --git a/scripts/plot/util/private/__gnuplot_draw_axes__.m b/scripts/plot/util/private/__gnuplot_draw_axes__.m
--- a/scripts/plot/util/private/__gnuplot_draw_axes__.m
+++ b/scripts/plot/util/private/__gnuplot_draw_axes__.m
@@ -353,23 +353,16 @@ function __gnuplot_draw_axes__ (h, plot_
   else
     fputs (plot_stream, "set grid layerdefault;\n");
     ## FIXME: The gnuplot help says that "layerdefault" should work
     ##        for set border too, but it fails for me with gnuplot 4.2.5.
     ##        So, use "back" instead.
     fputs (plot_stream, "set border back;\n");
   endif
 
-  fprintf (plot_stream, "set grid linewidth %f, linewidth %f;\n",
-           axis_obj.linewidth, axis_obj.linewidth);
-
-  if (! have_grid)
-    fputs (plot_stream, "unset grid;\n");
-  endif
-
   xlogscale = strcmpi (axis_obj.xscale, "log");
   ylogscale = strcmpi (axis_obj.yscale, "log");
   zlogscale = strcmpi (axis_obj.zscale, "log");
 
   ## Detect logscale and negative lims
   if (xlogscale && all (axis_obj.xlim < 0))
     axis_obj.xsgn = -1;
     if (strcmp (axis_obj.xdir, "reverse"))
@@ -1471,16 +1464,33 @@ function __gnuplot_draw_axes__ (h, plot_
             fputs (plot_stream, "unset border;\n");
           endif
         endif
         axis_idx = do_border_2d (axis_obj, plot_stream, axis_idx);
       endif
     endif
   endif
 
+  grid_idx = axis_idx;
+  if (! have_grid)
+    fputs (plot_stream, "unset grid;\n");
+  else
+    grid_idx += 1;
+    grid_obj.linestyle = axis_obj.gridlinestyle;
+    grid_obj.linewidth = axis_obj.linewidth;
+    [style, sidx] = do_linestyle_command (grid_obj, axis_obj.gridcolor,
+                                          grid_idx, plot_stream);
+    if (__gnuplot_has_feature__ ("linetype"))
+      scmd = "linetype";
+    else
+      scmd = "linestyle";
+    endif
+    fprintf (plot_stream, "set grid %s %d, %s %d;\n", scmd, sidx, scmd, sidx);
+  endif
+
   if (! isempty (hlgnd) && ! isempty (hlgnd.children)
       && any (strcmpi (get (hlgnd.children, "visible"), "on")))
     if (strcmpi (hlgnd.box, "on"))
       box = "box";
     else
       box = "nobox";
     endif
     if (strcmpi (hlgnd.orientation, "vertical"))
@@ -1896,17 +1906,17 @@ function [style, ltidx] = do_linestyle_c
           ltidx(sidx) = idx;
           fprintf (plot_stream, " pointtype %s", pt2);
         endif
         if (isfield (obj, "markersize"))
           fprintf (plot_stream, " pointsize %f", obj.markersize / 3);
         endif
       endif
     endif
-    if (isfield (obj, "markeredgecolor")
+    if (! isempty(pt) && isfield (obj, "markeredgecolor")
         && ! strcmp (obj.markeredgecolor, "none"))
       if (facesame && ! isempty (pt)
           && (strcmp (obj.markeredgecolor, "auto")
               || ! isnumeric (obj.markeredgecolor)
               || (isnumeric (obj.markeredgecolor)
                   && isequal (color, obj.markeredgecolor))))
         if (sidx == 1 && ((length (style{sidx}) == 5
             && strncmp (style{sidx}, "lines", 5)) || isempty (style{sidx})))
