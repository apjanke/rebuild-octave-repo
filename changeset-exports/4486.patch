# HG changeset patch
# User jwe
# Date 1061570986 0
#      Fri Aug 22 16:49:46 2003 +0000
# Node ID 6ceba1f351fbceeb49a86457d8dd821fbfcbe929
# Parent  bd3cfa59eb61a7640e7799ca0ae9a5eccd66bea5
[project @ 2003-08-22 16:49:46 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2003-08-22  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* defaults.cc (maybe_add_or_del_packages): Use source_file instead
+	of parse_and_execute.
+	* parse.y (source_file): New function.
+	(Fsource): Use it.
+	* parse.h (source_file): Provide decl.
+
 2003-08-21  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* utils.cc (octave_vsnprintf): Copy va_list to avoid using more
 	than once.
 
 2003-08-07  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* utils.cc (octave_vsnprintf): Call octave_raw_vsnprintf instead
diff --git a/src/defaults.cc b/src/defaults.cc
--- a/src/defaults.cc
+++ b/src/defaults.cc
@@ -130,17 +130,17 @@ maybe_add_or_del_packages (const string_
 
       if (! found)
 	{
 	  std::string file = a_dir + file_ops::dir_sep_str + script_file;
 
 	  file_stat fs = file_stat (file);
 
 	  if (fs.exists ())
-	    parse_and_execute (file);
+	    source_file (file);
 
 	  if (error_state)
 	    return;
 	}
     }
 
   unwind_protect::run_frame ("maybe_add_or_del_packages");
 }
diff --git a/src/parse.h b/src/parse.h
--- a/src/parse.h
+++ b/src/parse.h
@@ -95,16 +95,19 @@ extern void
 parse_and_execute (const std::string& s, bool verbose = false,
 		   const char *warn_for = 0);
 
 extern std::string get_help_from_file (const std::string& f);
 
 extern bool
 load_fcn_from_file (symbol_record *sym_rec, bool exec_script);
 
+extern void
+source_file (const std::string file_name);
+
 extern octave_value_list
 feval (const std::string& name,
        const octave_value_list& args = octave_value_list (),
        int nargout = 0);
 
 extern octave_value_list
 feval (octave_function *fcn,
        const octave_value_list& args = octave_value_list (),
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -3454,16 +3454,38 @@ load_fcn_from_file (symbol_record *sym_r
 	force_link_to_function (nm);
 
       unwind_protect::run_frame ("load_fcn_from_file");
     }
 
   return script_file_executed;
 }
 
+void
+source_file (const std::string file_name)
+{
+  std::string file_full_name = file_ops::tilde_expand (file_name);
+
+  unwind_protect::begin_frame ("source_file");
+
+  unwind_protect_str (curr_fcn_file_name);
+  unwind_protect_str (curr_fcn_file_full_name);
+
+  curr_fcn_file_name = file_name;
+  curr_fcn_file_full_name = file_full_name;
+
+  parse_fcn_file (file_full_name, true, true);
+
+  if (error_state)
+    error ("source: error sourcing file `%s'",
+	   file_full_name.c_str ());
+
+  unwind_protect::run_frame ("source_file");
+}
+
 DEFUN (source, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} source (@var{file})\n\
 Parse and execute the contents of @var{file}.  This is equivalent to\n\
 executing commands from a script file, but without requiring the file to\n\
 be named @file{@var{file}.m}.\n\
 @end deftypefn")
 {
@@ -3471,35 +3493,17 @@ be named @file{@var{file}.m}.\n\
 
   int nargin = args.length ();
 
   if (nargin == 1)
     {
       std::string file_name = args(0).string_value ();
 
       if (! error_state)
-	{
-	  std::string file_full_name = file_ops::tilde_expand (file_name);
-
-	  unwind_protect::begin_frame ("Fsource");
-
-	  unwind_protect_str (curr_fcn_file_name);
-	  unwind_protect_str (curr_fcn_file_full_name);
-
-	  curr_fcn_file_name = file_name;
-	  curr_fcn_file_full_name = file_full_name;
-
-	  parse_fcn_file (file_full_name, true, true);
-
-	  if (error_state)
-	    error ("source: error sourcing file `%s'",
-		   file_full_name.c_str ());
-
-	  unwind_protect::run_frame ("Fsource");
-	}
+        source_file (file_name);
       else
 	error ("source: expecting file name as argument");
     }
   else
     print_usage ("source");
 
   return retval;
 }
