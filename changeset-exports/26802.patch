# HG changeset patch
# User Sebastien Villemot <sebastien@debian.org>
# Date 1551111751 -3600
#      Mon Feb 25 17:22:31 2019 +0100
# Branch stable
# Node ID 74e63d2fd0d01f7ad5857cfb917c65ccf48ecad0
# Parent  c2e6725987cec31ffb2eba66b7fd18b3e88726ee
ordeig.m: Do not fail on 1x1 matrices (bug #55779);

* ordeig.m (isquasitri): Special case 1x1 and 2x2 matrices and immediately return true.
* ordeig.m: Add regression BIST test for 1x1 matrices.

diff --git a/scripts/linear-algebra/ordeig.m b/scripts/linear-algebra/ordeig.m
--- a/scripts/linear-algebra/ordeig.m
+++ b/scripts/linear-algebra/ordeig.m
@@ -94,20 +94,24 @@ function lambda = ordeig (A, B)
         lambda(i) = 2*c / (-b + sqrt (b^2 - 4*a*c));
       endif
     endif
     i += 1;
   endwhile
 
 endfunction
 
-# Checks whether a matrix is quasi-triangular
+## Check whether a matrix is quasi-triangular
 function retval = isquasitri (A)
-  v = diag (A, -1) != 0;
-  retval = all (tril (A, -2)(:) == 0) && all (v(1:end-1) + v(2:end) < 2);
+  if (length (A) <= 2)
+    retval = true;
+  else
+    v = diag (A, -1) != 0;
+    retval = (all (tril (A, -2)(:) == 0) && all (v(1:end-1) + v(2:end) < 2));
+  endif
 endfunction
 
 
 %!test
 %! A = toeplitz ([0, 1, 0, 0], [0, -1, 0, 0]);
 %! T = schur (A);
 %! lambda = ordeig (T);
 %! assert (lambda, [1.61803i; -1.61803i; 0.61803i; -0.61803i], 1e-4);
@@ -119,16 +123,21 @@ endfunction
 %! assert (isreal (AA) && isreal (BB));
 %! lambda = ordeig (AA, BB);
 %! assert (lambda, [0.5+0.86603i; 0.5-0.86603i; i; -i], 1e-4);
 %! [AA, BB] = qz (complex (A), complex (B));
 %! assert (iscomplex (AA) && iscomplex (BB));
 %! lambda = ordeig (AA, BB);
 %! assert (lambda, diag (AA) ./ diag (BB));
 
+## Check trivial 1x1 case
+%!test <*55779>
+%! lambda = ordeig ([6], [2]);
+%! assert (lambda, 3);
+
 ## Test input validation
 %!error ordeig ()
 %!error ordeig (1,2,3)
 %!error <A must be a square matrix> ordeig ('a')
 %!error <A must be a square matrix> ordeig ([1, 2, 3])
 %!error <A must be quasi-triangular> ordeig (magic (3))
 %!error <A must be upper-triangular> ordeig ([1, 0; i, 1])
 %!error <B must be a square matrix> ordeig (1, 'a')
