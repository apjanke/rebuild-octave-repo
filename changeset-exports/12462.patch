# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1298168518 28800
#      Sat Feb 19 18:21:58 2011 -0800
# Node ID e4dbfe3019b1e15c54d0438e0cb3c746fe01ff50
# Parent  cc14943e6254ff9b0d231b8999abb0b51f5a88ab
Use PCRE regular expressions throughout Octave.

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,12 @@
+2010-02-19  Rik  <octave@nomad.inbox5.com>
+
+	* interpreter/install.txi: Remove reference to POSIX regex library.
+
 2010-02-14  Rik  <octave@nomad.inbox5.com>
 
 	* interpreter/arith.txi, interpreter/io.txi, interpreter/oop.txi:
 	Remove functions which have no DOCSTRING entries.
 
 2011-02-06  John W. Eaton  <jwe@octave.org>
 
 	* interpreter/contributors.in: Add Fotios Kasolis to the list.
diff --git a/doc/interpreter/install.txi b/doc/interpreter/install.txi
--- a/doc/interpreter/install.txi
+++ b/doc/interpreter/install.txi
@@ -556,17 +556,17 @@ miscompiled.
 
 @item Other dependencies
 
 Probably nothing special needs to be done for the following
 dependencies.  If you discover that something does need to be done,
 please submit a bug report.
 
 @itemize @minus
-@item pcre or regex
+@item pcre
 
 @item zlib
 
 @item hdf5
 
 @item fftw3
 
 @item cURL
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,14 @@
+2010-02-19  Rik  <octave@nomad.inbox5.com>
+
+	* io/dlmwrite.m, pkg/get_forge_pkg.m, plot/__gnuplot_ginput__.m,
+	plot/__go_draw_axes__.m, testfun/runtests.m: Use PCRE regular
+	expressions to simplify scripts.
+
 2011-02-19  Ben Abbott  <bpabbott@mac.com>
 
 	* plot/__print_parse_opts__.m, plot/private/__ghostscript__.m: Improve
 	warnings when shell utilties are missing.
 
 2011-02-19  Thorsten Meyer  <thorsten.meyier@gmx.de>
 
 	* general/interp1.m: Fix tests according to spline update of
diff --git a/scripts/io/dlmwrite.m b/scripts/io/dlmwrite.m
--- a/scripts/io/dlmwrite.m
+++ b/scripts/io/dlmwrite.m
@@ -167,17 +167,17 @@ function dlmwrite (file, M, varargin)
   if (fid < 0)
     error (msg);
   else
     if (r > 0)
       fprintf (fid, "%s",
                repmat ([repmat(delim, 1, c + columns(M)-1), newline], 1, r));
     endif
     if (iscomplex (M))
-      cprecision = regexprep (precision, '^%([-.0-9])','%+$1');
+      cprecision = regexprep (precision, '^%([-\d.])','%+$1');
       template = [precision, cprecision, "i", ...
                   repmat([delim, precision, cprecision, "i"], 1, ...
                   columns(M) - 1), newline ];
     else
       template = [precision, repmat([delim, precision], 1, columns(M)-1),...
                   newline];
     endif
     if (c > 0)
diff --git a/scripts/pkg/get_forge_pkg.m b/scripts/pkg/get_forge_pkg.m
--- a/scripts/pkg/get_forge_pkg.m
+++ b/scripts/pkg/get_forge_pkg.m
@@ -38,17 +38,17 @@ function [ver, url] = get_forge_pkg (nam
   name = tolower (name);
 
   ## Try to download package's index page.
   [html, succ] = urlread (sprintf ("http://octave.sourceforge.net/%s/index.html", name));
   if (succ)
     ## Remove blanks for simpler matching.
     html(isspace(html)) = [];
     ## Good. Let's grep for the version.
-    pat = "<tdclass=""package_table"">PackageVersion:</td><td>([0-9.]*)</td>";
+    pat = "<tdclass=""package_table"">PackageVersion:</td><td>([\d.]*)</td>";
     t = regexp (html, pat, "tokens");
     if (isempty (t) || isempty(t{1}))
       error ("get_forge_pkg: could not read version number from package's page");
     else
       ver = t{1}{1};
       if (nargout > 1)
         # Build download string.
         urlbase = "http://downloads.sourceforge.net/octave/%s-%s.tar.gz?download";
diff --git a/scripts/plot/__gnuplot_ginput__.m b/scripts/plot/__gnuplot_ginput__.m
--- a/scripts/plot/__gnuplot_ginput__.m
+++ b/scripts/plot/__gnuplot_ginput__.m
@@ -108,17 +108,17 @@ function [x, y, button] = __gnuplot_ginp
         fflush (ostream);
 
         str = {};
         while (isempty (str))
           str = char (fread (istream)');
           if (isempty (str))
             sleep (0.05);
           else
-            str = regexp (str, 'OCTAVE:\s+[-+.0-9]+\s+[-+.0-9]+\s+[0-9]*', 'match');
+            str = regexp (str, 'OCTAVE:\s+[-+.\d]+\s+[-+.\d]+\s+\d*', 'match');
           endif
           fclear (istream);
         endwhile
         [x(k), y(k), button(k), count] = sscanf (str{end}(8:end), "%f %f %d", "C");
       endif
 
       if ([x(k), y(k), button(k)] == [0, 0, -1])
         ## Mousing not active (no plot yet).
diff --git a/scripts/plot/__go_draw_axes__.m b/scripts/plot/__go_draw_axes__.m
--- a/scripts/plot/__go_draw_axes__.m
+++ b/scripts/plot/__go_draw_axes__.m
@@ -2321,17 +2321,17 @@ function str = __tex2enhanced__ (str, fn
       i ++;
     endif
   endwhile
 
 endfunction
 
 function l = length_string (s)
   l = length (s) - length (strfind(s,'{')) - length (strfind(s,'}'));
-  m = regexp (s, '/([a-zA-Z0-9_-]+|[a-zA-Z0-9_-]+=[0-9]+)', 'matches');
+  m = regexp (s, '/([\w-]+|[\w-]+=\d+)', 'matches');
   if (!isempty (m))
     l = l - sum (cellfun (@length, m));
   endif
 endfunction
 
 function sym = __setup_sym_table__ ()
   ## Setup the translation table for TeX to gnuplot enhanced mode.
   sym.forall = '{/Symbol \042}';
diff --git a/scripts/testfun/runtests.m b/scripts/testfun/runtests.m
--- a/scripts/testfun/runtests.m
+++ b/scripts/testfun/runtests.m
@@ -75,19 +75,17 @@ function run_all_tests (directory)
   endif
 endfunction
 
 function retval = has_tests (f)
   fid = fopen (f);
   if (fid >= 0)
     str = fread (fid, "*char")';
     fclose (fid);
-    ## Avoid PCRE 'lineanchors' by searching for newline followed by PTN.
-    ## Equivalent to regexp ('^PTN','lineanchors')
-    retval = ! isempty (regexp (str, "[\r\n]\\s*%!(test|assert|error|warning)", "once"));
+    retval = ! isempty (regexp (str, "^%!(test|assert|error|warning)", "lineanchors"));
   else
     error ("runtests: fopen failed: %s", f);
   endif
 endfunction
 
 function print_pass_fail (n, p)
   if (n > 0)
     printf (" PASS %4d/%-4d", p, n);
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2010-02-19  Rik  <octave@nomad.inbox5.com>
+
+	* src/DLD-FUNCTIONS/regexp.cc: Use PCRE regular expressions everywhere
+	now that Octave requires library for building.  Remove testif PCRE
+	on testing blocks and adjust all documentation.
+	
 2011-02-18  Konstantinos Poulios  <logari81@googlemail.com>
 
 	* graphics.cc (axes::properties::sync_positions): Fix a small
 	bug introduced with changes from 2011-02-14.
 
 2011-02-15  Konstantinos Poulios  <logari81@googlemail.com>
 
 	Bug #32319.
diff --git a/src/DLD-FUNCTIONS/regexp.cc b/src/DLD-FUNCTIONS/regexp.cc
--- a/src/DLD-FUNCTIONS/regexp.cc
+++ b/src/DLD-FUNCTIONS/regexp.cc
@@ -880,19 +880,17 @@ octcellregexp (const octave_value_list &
 }
 
 DEFUN_DLD (regexp, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn  {Loadable Function} {[@var{s}, @var{e}, @var{te}, @var{m}, @var{t}, @var{nm}] =} regexp (@var{str}, @var{pat})\n\
 @deftypefnx {Loadable Function} {[@dots{}] =} regexp (@var{str}, @var{pat}, \"@var{opt1}\", @dots{})\n\
 Regular expression string matching.  Search for @var{pat} in @var{str} and\n\
 return the positions and substrings of any matches, or empty values if there\n\
-are none.  Note, some features and extended options are only available when\n\
-Octave is compiled with support for Perl Compatible Regular Expressions\n\
-(PCRE).\n\
+are none.\n\
 \n\
 The matched pattern @var{pat} can include any of the standard regex\n\
 operators, including:\n\
 \n\
 @table @code\n\
 @item .\n\
 Match any character\n\
 \n\
@@ -919,21 +917,19 @@ Match between @var{m} and @var{n} times\
 @end table\n\
 \n\
 @item [@dots{}] [^@dots{}]\n\
 \n\
 List operators.  The pattern will match any character listed between \"[\"\n\
 and \"]\".  If the first character is \"^\" then the pattern is inverted and\n\
 any character except those listed between brackets will match.\n\
 \n\
-With PCRE support, escape sequences defined below can be used inside list\n\
+Escape sequences defined below can also be used inside list\n\
 operators.  For example, a template for a floating point number might be\n\
-@code{[-+.\\d]+}.  POSIX regular expressions do not use escape sequences\n\
-and any backslash @samp{\\} will be interpreted literally as one\n\
-of the list of characters to match.\n\
+@code{[-+.\\d]+}.\n\
 \n\
 @item ()\n\
 Grouping operator\n\
 \n\
 @item |\n\
 Alternation operator.  Match one of a choice of regular expressions.  The\n\
 alternatives must be delimited by the grouping operator @code{()} above.\n\
 \n\
@@ -970,24 +966,18 @@ Match the end of a word\n\
 Match any whitespace character\n\
 \n\
 @item \\S\n\
 Match any non-whitespace character\n\
 \n\
 @item \\d\n\
 Match any digit\n\
 \n\
-This sequence is only available with PCRE support.  For POSIX regular\n\
-expressions use the following list operator @code{[0-9]}.\n\
-\n\
 @item \\D\n\
 Match any non-digit\n\
-\n\
-This sequence is only available with PCRE support.  For POSIX regular\n\
-expressions use the following list operator @code{[^0-9]}.\n\
 @end table\n\
 \n\
 The outputs of @code{regexp} default to the order given below\n\
 \n\
 @table @var\n\
 @item s\n\
 The start indices of each matching substring\n\
 \n\
@@ -1002,17 +992,17 @@ The extents of each matched token surrou
 A cell array of the text of each match\n\
 \n\
 @item t\n\
 A cell array of the text of each token matched\n\
 \n\
 @item nm\n\
 A structure containing the text of each matched named token, with the name\n\
 being used as the fieldname.  A named token is denoted by\n\
-@code{(?<name>@dots{})} and is only available with PCRE support.\n\
+@code{(?<name>@dots{})}.\n\
 @end table\n\
 \n\
 Particular output arguments, or the order of the output arguments, can be\n\
 selected by additional @var{opt} arguments.  These are strings and the\n\
 correspondence between the output arguments and the optional argument\n\
 are\n\
 \n\
 @multitable @columnfractions 0.2 0.3 0.3 0.2\n\
@@ -1028,59 +1018,56 @@ Additional arguments are summarized belo
 \n\
 @table @samp\n\
 @item once\n\
 Return only the first occurrence of the pattern.\n\
 \n\
 @item matchcase\n\
 Make the matching case sensitive.  (default)\n\
 \n\
-Alternatively, use (?-i) in the pattern when PCRE is available.\n\
+Alternatively, use (?-i) in the pattern.\n\
 \n\
 @item ignorecase\n\
 Ignore case when matching the pattern to the string.\n\
 \n\
-Alternatively, use (?i) in the pattern when PCRE is available.\n\
+Alternatively, use (?i) in the pattern.\n\
 \n\
 @item stringanchors\n\
 Match the anchor characters at the beginning and end of the string.  \n\
 (default)\n\
 \n\
-Alternatively, use (?-m) in the pattern when PCRE is available.\n\
+Alternatively, use (?-m) in the pattern.\n\
 \n\
 @item lineanchors\n\
 Match the anchor characters at the beginning and end of the line.\n\
-Only available when Octave is compiled with PCRE.\n\
 \n\
-Alternatively, use (?m) in the pattern when PCRE is available.\n\
+Alternatively, use (?m) in the pattern.\n\
 \n\
 @item dotall\n\
 The pattern @code{.} matches all characters including the newline character.\n\
  (default)\n\
 \n\
-Alternatively, use (?s) in the pattern when PCRE is available.\n\
+Alternatively, use (?s) in the pattern.\n\
 \n\
 @item dotexceptnewline\n\
 The pattern @code{.} matches all characters except the newline character.\n\
-Only available when Octave is compiled with PCRE.\n\
 \n\
-Alternatively, use (?-s) in the pattern when PCRE is available.\n\
+Alternatively, use (?-s) in the pattern.\n\
 \n\
 @item literalspacing\n\
 All characters in the pattern, including whitespace, are significant and are\n\
 used in pattern matching.  (default)\n\
 \n\
-Alternatively, use (?-x) in the pattern when PCRE is available.\n\
+Alternatively, use (?-x) in the pattern.\n\
 \n\
 @item freespacing\n\
 The pattern may include arbitrary whitespace and also comments beginning with\n\
 the character @samp{#}.\n\
-Only available when Octave is compiled with PCRE.\n\
 \n\
-Alternatively, use (?x) in the pattern when PCRE is available.\n\
+Alternatively, use (?x) in the pattern.\n\
 \n\
 @end table\n\
 @seealso{regexpi, strfind, regexprep}\n\
 @end deftypefn")
 {
   octave_value_list retval;
   int nargin = args.length();
 
@@ -1163,103 +1150,103 @@ Alternatively, use (?x) in the pattern w
 %!test
 %! [m, te, e, s, t] = regexp('short test string','\w*r\w*','once', 'match', 'tokenExtents', 'end', 'start', 'tokens');
 %! assert (s,1)
 %! assert (e,5)
 %! assert (isempty(te))
 %! assert (m,'short')
 %! assert (isempty(t))
 
-%!testif HAVE_PCRE
+%!test
 %! [s, e, te, m, t, nm] = regexp('short test string','(?<word1>\w*t)\s*(?<word2>\w*t)');
 %! assert (s,1)
 %! assert (e,10)
 %! assert (size(te), [1,1])
 %! assert (te{1}, [1 5; 7, 10])
 %! assert (m{1},'short test')
 %! assert (size(t),[1,1])
 %! assert (t{1}{1},'short')
 %! assert (t{1}{2},'test')
 %! assert (size(nm), [1,1])
 %! assert (!isempty(fieldnames(nm)))
 %! assert (sort(fieldnames(nm)),{'word1';'word2'})
 %! assert (nm.word1,'short')
 %! assert (nm.word2,'test')
 
-%!testif HAVE_PCRE
+%!test
 %! [nm, m, te, e, s, t] = regexp('short test string','(?<word1>\w*t)\s*(?<word2>\w*t)', 'names', 'match', 'tokenExtents', 'end', 'start', 'tokens');
 %! assert (s,1)
 %! assert (e,10)
 %! assert (size(te), [1,1])
 %! assert (te{1}, [1 5; 7, 10])
 %! assert (m{1},'short test')
 %! assert (size(t),[1,1])
 %! assert (t{1}{1},'short')
 %! assert (t{1}{2},'test')
 %! assert (size(nm), [1,1])
 %! assert (!isempty(fieldnames(nm)))
 %! assert (sort(fieldnames(nm)),{'word1';'word2'})
 %! assert (nm.word1,'short')
 %! assert (nm.word2,'test')
 
-%!testif HAVE_PCRE
+%!test
 %! [t, nm] = regexp("John Davis\nRogers, James",'(?<first>\w+)\s+(?<last>\w+)|(?<last>\w+),\s+(?<first>\w+)','tokens','names');
 %! assert (size(t), [1,2]);
 %! assert (t{1}{1},'John');
 %! assert (t{1}{2},'Davis');
 %! assert (t{2}{1},'Rogers');
 %! assert (t{2}{2},'James');
 %! assert (size(nm), [1,1]);
 %! assert (nm.first{1},'John');
 %! assert (nm.first{2},'James');
 %! assert (nm.last{1},'Davis');
 %! assert (nm.last{2},'Rogers');
 
-%!testif HAVE_PCRE
+%!test
 %! # Parenthesis in named token (ie (int)) causes a problem
 %! assert (regexp('qwe int asd', ['(?<typestr>(int))'], 'names'), struct ('typestr', 'int'));
 
 %!assert(regexp("abc\nabc",'.'),[1:7])
 %!assert(regexp("abc\nabc",'.','dotall'),[1:7])
-%!testif HAVE_PCRE
+%!test
 %! assert(regexp("abc\nabc",'(?s).'),[1:7])
 %! assert(regexp("abc\nabc",'.','dotexceptnewline'),[1,2,3,5,6,7])
 %! assert(regexp("abc\nabc",'(?-s).'),[1,2,3,5,6,7])
 
 %!assert(regexp("caseCaSe",'case'),1)
 %!assert(regexp("caseCaSe",'case',"matchcase"),1)
 %!assert(regexp("caseCaSe",'case',"ignorecase"),[1,5])
-%!testif HAVE_PCRE
+%!test
 %! assert(regexp("caseCaSe",'(?-i)case'),1)
 %! assert(regexp("caseCaSe",'(?i)case'),[1,5])
 
 %!assert (regexp("abc\nabc",'c$'),7)
 %!assert (regexp("abc\nabc",'c$',"stringanchors"),7)
-%!testif HAVE_PCRE
+%!test
 %! assert (regexp("abc\nabc",'(?-m)c$'),7)
 %! assert (regexp("abc\nabc",'c$',"lineanchors"),[3,7])
 %! assert (regexp("abc\nabc",'(?m)c$'),[3,7])
 
 %!assert (regexp("this word",'s w'),4)
 %!assert (regexp("this word",'s w','literalspacing'),4)
-%!testif HAVE_PCRE
+%!test
 %! assert (regexp("this word",'(?-x)s w','literalspacing'),4)
 %! assert (regexp("this word",'s w','freespacing'),zeros(1,0))
 %! assert (regexp("this word",'(?x)s w'),zeros(1,0))
 
 %!error regexp('string', 'tri', 'BadArg');
 %!error regexp('string');
 
 %!assert(regexp({'asdfg-dfd';'-dfd-dfd-';'qasfdfdaq'},'-'),{6;[1,5,9];zeros(1,0)})
 %!assert(regexp({'asdfg-dfd','-dfd-dfd-','qasfdfdaq'},'-'),{6,[1,5,9],zeros(1,0)})
 %!assert(regexp({'asdfg-dfd';'-dfd-dfd-';'qasfdfdaq'},{'-';'f';'q'}),{6;[3,7];[1,9]})
 %!assert(regexp('Strings',{'t','s'}),{2,7})
 
 ## Test case for lookaround operators
-%!testif HAVE_PCRE
+%!test
 %! assert(regexp('Iraq','q(?!u)'),4)
 %! assert(regexp('quit','q(?!u)'), zeros(1,0))
 %! assert(regexp('quit','q(?=u)','match'), {'q'})
 %! assert(regexp("quit",'q(?=u+)','match'), {'q'})
 %! assert(regexp("qit",'q(?=u+)','match'), cell(1,0))
 %! assert(regexp("qit",'q(?=u*)','match'), {'q'})
 %! assert(regexp('thingamabob','(?<=a)b'), 9)
 
@@ -1348,33 +1335,33 @@ syntax of the search pattern.\n\
 %!test
 %! [m, te, e, s, t] = regexpi('ShoRt Test String','\w*r\w*','once', 'match', 'tokenExtents', 'end', 'start', 'tokens');
 %! assert (s,1)
 %! assert (e,5)
 %! assert (isempty(te))
 %! assert (m,'ShoRt')
 %! assert (isempty(t))
 
-%!testif HAVE_PCRE
+%!test
 %! [s, e, te, m, t, nm] = regexpi('ShoRt Test String','(?<word1>\w*t)\s*(?<word2>\w*t)');
 %! assert (s,1)
 %! assert (e,10)
 %! assert (size(te), [1,1])
 %! assert (te{1}, [1 5; 7, 10])
 %! assert (m{1},'ShoRt Test')
 %! assert (size(t),[1,1])
 %! assert (t{1}{1},'ShoRt')
 %! assert (t{1}{2},'Test')
 %! assert (size(nm), [1,1])
 %! assert (!isempty(fieldnames(nm)))
 %! assert (sort(fieldnames(nm)),{'word1';'word2'})
 %! assert (nm.word1,'ShoRt')
 %! assert (nm.word2,'Test')
 
-%!testif HAVE_PCRE
+%!test
 %! [nm, m, te, e, s, t] = regexpi('ShoRt Test String','(?<word1>\w*t)\s*(?<word2>\w*t)', 'names', 'match', 'tokenExtents', 'end', 'start', 'tokens');
 %! assert (s,1)
 %! assert (e,10)
 %! assert (size(te), [1,1])
 %! assert (te{1}, [1 5; 7, 10])
 %! assert (m{1},'ShoRt Test')
 %! assert (size(t),[1,1])
 %! assert (t{1}{1},'ShoRt')
@@ -1382,38 +1369,38 @@ syntax of the search pattern.\n\
 %! assert (size(nm), [1,1])
 %! assert (!isempty(fieldnames(nm)))
 %! assert (sort(fieldnames(nm)),{'word1';'word2'})
 %! assert (nm.word1,'ShoRt')
 %! assert (nm.word2,'Test')
 
 %!assert(regexpi("abc\nabc",'.'),[1:7])
 %!assert(regexpi("abc\nabc",'.','dotall'),[1:7])
-%!testif HAVE_PCRE
+%!test
 %! assert(regexpi("abc\nabc",'(?s).'),[1:7])
 %! assert(regexpi("abc\nabc",'.','dotexceptnewline'),[1,2,3,5,6,7])
 %! assert(regexpi("abc\nabc",'(?-s).'),[1,2,3,5,6,7])
 
 %!assert(regexpi("caseCaSe",'case'),[1,5])
 %!assert(regexpi("caseCaSe",'case',"matchcase"),1)
 %!assert(regexpi("caseCaSe",'case',"ignorecase"),[1,5])
-%!testif HAVE_PCRE
+%!test
 %! assert(regexpi("caseCaSe",'(?-i)case'),1)
 %! assert(regexpi("caseCaSe",'(?i)case'),[1,5])
 
 %!assert (regexpi("abc\nabc",'C$'),7)
 %!assert (regexpi("abc\nabc",'C$',"stringanchors"),7)
-%!testif HAVE_PCRE
+%!test
 %! assert (regexpi("abc\nabc",'(?-m)C$'),7)
 %! assert (regexpi("abc\nabc",'C$',"lineanchors"),[3,7])
 %! assert (regexpi("abc\nabc",'(?m)C$'),[3,7])
 
 %!assert (regexpi("this word",'S w'),4)
 %!assert (regexpi("this word",'S w','literalspacing'),4)
-%!testif HAVE_PCRE
+%!test
 %! assert (regexpi("this word",'(?-x)S w','literalspacing'),4)
 %! assert (regexpi("this word",'S w','freespacing'),zeros(1,0))
 %! assert (regexpi("this word",'(?x)S w'),zeros(1,0))
 
 %!error regexpi('string', 'tri', 'BadArg');
 %!error regexpi('string');
 
 %!assert(regexpi({'asdfg-dfd';'-dfd-dfd-';'qasfdfdaq'},'-'),{6;[1,5,9];zeros(1,0)})
@@ -1741,17 +1728,17 @@ This option is present for compatibility
 %! assert(t,'? <tag v="hello">some stuff?</tag>')
 
 %!test  # Check that 'tokenize' is ignored
 %! xml = '<!-- This is some XML --> <tag v="hello">some stuff<!-- sample tag--></tag>';
 %! t = regexprep(xml,'<[!?][^>]*>','','tokenize');
 %! assert(t,' <tag v="hello">some stuff</tag>')
 
 ## Test capture replacement
-%!testif HAVE_PCRE
+%!test
 %! data = "Bob Smith\nDavid Hollerith\nSam Jenkins";
 %! result = "Smith, Bob\nHollerith, David\nJenkins, Sam";
 %! t = regexprep(data,'(?m)^(\w+)\s+(\w+)$','$2, $1');
 %! assert(t,result)
 
 ## Return the original if no match
 %!assert(regexprep('hello','world','earth'),'hello')
 
@@ -1776,12 +1763,12 @@ This option is present for compatibility
 %!assert(regexprep("abc","(b)","$1.."),"ab..c");
 
 ## Test cell array arguments
 %!assert(regexprep("abc",{"b","a"},"?"),{"??c"})
 %!assert(regexprep({"abc","cba"},"b","?"),{"a?c","c?a"})
 %!assert(regexprep({"abc","cba"},{"b","a"},{"?","!"}),{"!?c","c?!"})
 
 # Nasty lookbehind expression
-%!testif HAVE_PCRE
+%!test
 %! assert(regexprep('x^(-1)+y(-1)+z(-1)=0','(?<=[a-z]+)\(\-[1-9]*\)','_minus1'),'x^(-1)+y_minus1+z_minus1=0')
 
 */
diff --git a/test/ChangeLog b/test/ChangeLog
--- a/test/ChangeLog
+++ b/test/ChangeLog
@@ -1,8 +1,12 @@
+2010-02-19  Rik  <octave@nomad.inbox5.com>
+
+	* fntests.m: Use PCRE regular expressions to simplify script.
+
 2010-02-02  Rik  <octave@nomad.inbox5.com>
 
 	* build_sparse_tests.sh: Use testif to only run some sparse tests when
 	necessary libraries are installed.
 
 2011-01-14  John W. Eaton  <jwe@octave.org>
 
 	* Update copyright notices for 2011.
diff --git a/test/fntests.m b/test/fntests.m
--- a/test/fntests.m
+++ b/test/fntests.m
@@ -70,35 +70,33 @@ endfunction
 
 function retval = has_functions (f)
   n = length (f);
   if (n > 3 && strcmp (f((end-2):end), ".cc"))
     fid = fopen (f);
     if (fid >= 0)
       str = fread (fid, "*char")';
       fclose (fid);
-      retval = ! isempty (regexp (str,"[\r\n](DEFUN|DEFUN_DLD)\\b", "once"));
+      retval = ! isempty (regexp (str,'^(DEFUN|DEFUN_DLD)\b', 'lineanchors'));
     else
       error ("fopen failed: %s", f);
     endif
   elseif (n > 2 && strcmp (f((end-1):end), ".m"))
     retval = true;
   else
     retval = false;
   endif
 endfunction
 
 function retval = has_tests (f)
   fid = fopen (f);
   if (fid >= 0)
     str = fread (fid, "*char")';
     fclose (fid);
-    ## Avoid PCRE 'lineanchors' by searching for newline followed by PTN.
-    ## Equivalent to regexp ('^PTN','lineanchors')
-    retval = ! isempty (regexp (str, "[\r\n]\\s*%!(test|assert|error|warning)", "once"));
+    retval = ! isempty (regexp (str, "^%!(test|assert|error|warning)", "lineanchors"));
   else
     error ("fopen failed: %s", f);
   endif
 endfunction
 
 function [dp, dn, dxf, dsk] = run_test_dir (fid, d);
   global files_with_tests;
   global files_with_no_tests;
