# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1516601036 18000
#      Mon Jan 22 01:03:56 2018 -0500
# Node ID 81c84fd1ae57346c29bbcb57c02ec8c077cd17ce
# Parent  57f36275e605fa2adbd7c867b835ca1fe29930f1
identify functions that are intended to execute in interpreter thread

* main-window.cc (main_window::save_workspace_callback,
main_window::load_workspace_callback,
main_window::rename_variable_callback,
main_window::command_window_undo_callback,
main_window::clear_command_window_callback,
main_window::resize_command_window_callback,
main_window::set_screen_size_callback,
main_window::clear_workspace_callback,
main_window::clear_history_callback,
main_window::new_figure_callback,
main_window::force_refresh_workspace):
Tag with comment indicating that the function is intended to run in
the interpeter thread.

diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -2522,34 +2522,40 @@ main_window::construct_tool_bar (void)
 
   connect (m_undo_action, SIGNAL (triggered (void)),
            this, SLOT (handle_undo_request (void)));
 }
 
 void
 main_window::save_workspace_callback (const std::string& file)
 {
+  // INTERPRETER THREAD
+
   Fsave (ovl (file));
 }
 
 void
 main_window::load_workspace_callback (const std::string& file)
 {
+  // INTERPRETER THREAD
+
   Fload (ovl (file));
 
   octave::symbol_scope scope
    = octave::__get_current_scope__ ("main_window::load_workspace_callback");
 
   if (scope)
     octave_link::set_workspace (true, scope.workspace_info ());
 }
 
 void
 main_window::rename_variable_callback (const main_window::name_pair& names)
 {
+  // INTERPRETER THREAD
+
   octave::symbol_scope scope
     = octave::__get_current_scope__ ("main_window::rename_variable_callback");
 
   if (scope)
     {
       scope.rename (names.first, names.second);
 
       octave_link::set_workspace (true, scope.workspace_info ());
@@ -2557,64 +2563,78 @@ main_window::rename_variable_callback (c
 
   // FIXME: if this action fails, do we need a way to display that info
   // in the GUI?
 }
 
 void
 main_window::command_window_undo_callback (void)
 {
+  // INTERPRETER THREAD
+
   octave::command_editor::undo ();
   octave::command_editor::redisplay ();
 }
 
 void
 main_window::clear_command_window_callback (void)
 {
+  // INTERPRETER THREAD
+
   octave::command_editor::kill_full_line ();
   octave::command_editor::clear_screen ();
 }
 
 void
 main_window::resize_command_window_callback (void)
 {
+  // INTERPRETER THREAD
+
   octave::command_editor::resize_terminal ();
 }
 
 void
 main_window::set_screen_size_callback (const int_pair& sz)
 {
+  // INTERPRETER THREAD
+
   octave::command_editor::set_screen_size (sz.first, sz.second);
 }
 
 void
 main_window::clear_workspace_callback (void)
 {
+  // INTERPRETER THREAD
+
   octave::interpreter& interp
     = octave::__get_interpreter__ ("main_window::clear_workspace_callback");
 
   Fclear (interp);
 }
 
 void
 main_window::clear_history_callback (void)
 {
+  // INTERPRETER THREAD
+
   Fhistory (ovl ("-c"));
 }
 
 bool
 main_window::focus_console_after_command (void)
 {
   QSettings *settings = resource_manager::get_settings ();
   return settings->value ("terminal/focus_after_command",false).toBool ();
 }
 
 void
 main_window::new_figure_callback (void)
 {
+  // INTERPRETER THREAD
+
   octave::interpreter& interp
     = octave::__get_interpreter__ ("main_window::new_figure_callback");
 
   Fbuiltin (interp, ovl ("figure"));
   Fdrawnow ();
 }
 
 void
@@ -2700,16 +2720,18 @@ main_window::configure_shortcuts (void)
                                   "main_news:release_notes");
   shortcut_manager::set_shortcut (m_current_news_action,
                                   "main_news:community_news");
 }
 
 void
 main_window::force_refresh_workspace (void)
 {
+  // INTERPRETER THREAD
+
   octave::symbol_scope scope
    = octave::__get_current_scope__ ("main_window::load_workspace_callback");
 
   if (scope)
     octave_link::set_workspace (true, scope.workspace_info (), false);
 }
 
 QList<octave_dock_widget *>
