# HG changeset patch
# User jwe
# Date 796688012 0
#      Fri Mar 31 22:13:32 1995 +0000
# Node ID 1352ecca2d91f72c95fc22de263dd8c160f7fafb
# Parent  ed01dfb2338d6a30d1c146a51e0551f9bb3bd3ba
[project @ 1995-03-31 22:13:32 by jwe]

diff --git a/src/user-prefs.cc b/src/user-prefs.cc
--- a/src/user-prefs.cc
+++ b/src/user-prefs.cc
@@ -59,16 +59,17 @@ init_user_prefs (void)
   user_pref.print_empty_dimensions = 0;
   user_pref.propagate_empty_matrices = 0;
   user_pref.read_only_constants = 1;
   user_pref.resize_on_range_error = 0;
   user_pref.return_last_computed_value = 0;
   user_pref.save_precision = 0;
   user_pref.silent_functions = 0;
   user_pref.split_long_rows = 0;
+  user_pref.struct_levels_to_print = 0;
   user_pref.suppress_verbose_help_message = 0;
   user_pref.treat_neg_dim_as_zero = 0;
   user_pref.warn_assign_as_truth_value = 0;
   user_pref.warn_comma_in_global_decl = 0;
   user_pref.warn_divide_by_zero = 0;
   user_pref.warn_function_name_clash = 0;
   user_pref.whitespace_in_literal_matrix = 0;
 
@@ -105,16 +106,19 @@ check_str_pref (char *var)
       else if (strncmp (val, "never", 5) == 0
 	       || strncmp (val, "no", 2) == 0
 	       || strncmp (val, "false", 5) == 0)
 	pref = 0;
     }
   return pref;
 }
 
+// XXX FIXME XXX -- some of these should do their own checking to be
+// able to provide more meaningful warning or error messages.
+
 // Should a replot command be generated automatically each time a plot
 // changes in some way?
 
 int
 automatic_replot (void)
 {
   user_pref.automatic_replot = check_str_pref ("automatic_replot");
 
@@ -359,16 +363,49 @@ int
 split_long_rows (void)
 {
   user_pref.split_long_rows = check_str_pref ("split_long_rows");
 
   return 0;
 }
 
 
+// How many levels of structure elements should we print?
+
+int
+struct_levels_to_print (void)
+{
+  int status = 0;
+
+  static int kludge = 0;
+
+  double val;
+  if (builtin_real_scalar_variable ("struct_levels_to_print", val) == 0
+      && ! xisnan (val))
+    {
+      int ival = NINT (val);
+      if (ival > 0 && (double) ival == val)
+	{
+	  user_pref.struct_levels_to_print = ival;
+	  return status;
+	}
+    }
+
+  if (kludge == 0)
+    kludge++;
+  else
+    {
+      warning ("invalid value specified for struct_levels_to_print");
+      status = -1;
+    }
+
+  return status;
+}
+
+
 // Suppress printing of additional help message in help and usage
 // functions?
 
 int
 suppress_verbose_help_message (void)
 {
   user_pref.suppress_verbose_help_message =
     check_str_pref ("suppress_verbose_help_message");
@@ -514,17 +551,17 @@ set_output_max_field_width (void)
 
   double val;
   if (builtin_real_scalar_variable ("output_max_field_width", val) == 0
       && ! xisnan (val))
     {
       int ival = NINT (val);
       if (ival > 0 && (double) ival == val)
 	{
-	  user_pref.output_max_field_width= ival;
+	  user_pref.output_max_field_width = ival;
 	  return status;
 	}
     }
 
   if (kludge == 0)
     kludge++;
   else
     {
diff --git a/src/user-prefs.h b/src/user-prefs.h
--- a/src/user-prefs.h
+++ b/src/user-prefs.h
@@ -42,16 +42,17 @@ struct user_preferences
   int print_empty_dimensions;
   int propagate_empty_matrices;
   int read_only_constants;
   int resize_on_range_error;
   int return_last_computed_value;
   int save_precision;
   int silent_functions;
   int split_long_rows;
+  int struct_levels_to_print;
   int suppress_verbose_help_message;
   int treat_neg_dim_as_zero;
   int warn_assign_as_truth_value;
   int warn_comma_in_global_decl;
   int warn_divide_by_zero;
   int warn_function_name_clash;
   int whitespace_in_literal_matrix;
 
@@ -85,16 +86,17 @@ extern int prefer_zero_one_indexing (voi
 extern int print_answer_id_name (void);
 extern int print_empty_dimensions (void);
 extern int propagate_empty_matrices (void);
 extern int read_only_constants (void);
 extern int resize_on_range_error (void);
 extern int return_last_computed_value (void);
 extern int silent_functions (void);
 extern int split_long_rows (void);
+extern int struct_levels_to_print (void);
 extern int suppress_verbose_help_message (void);
 extern int treat_neg_dim_as_zero (void);
 extern int warn_assign_as_truth_value (void);
 extern int warn_comma_in_global_decl (void);
 extern int warn_divide_by_zero (void);
 extern int warn_function_name_clash (void);
 extern int whitespace_in_literal_matrix (void);
 
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -1649,16 +1649,20 @@ default_return_value");
   DEFVAR ("silent_functions", SBV_silent_functions, "false", 0, 0, 1,
 	  silent_functions,
     "suppress printing results in called functions");
 
   DEFVAR ("split_long_rows", SBV_split_long_rows, "true", 0, 0, 1,
 	  split_long_rows,
     "split long matrix rows instead of wrapping");
 
+  DEFVAR ("struct_levels_to_print", SBV_struct_levels_to_print, 2.0,
+	  0, 0, 1, struct_levels_to_print,
+    "number of levels of structure elements to print");
+
 #ifdef USE_GNU_INFO
   DEFVAR ("suppress_verbose_help_message",
 	  SBV_suppress_verbose_help_message, "false", 0, 0, 1,
 	  suppress_verbose_help_message,
     "suppress printing of message pointing to additional help in the\n\
 help and usage functions");
 #endif
 
