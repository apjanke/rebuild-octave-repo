# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1363025045 14400
#      Mon Mar 11 14:04:05 2013 -0400
# Branch classdef
# Node ID b8a2df776118608460d7ca804565d3394a9304a7
# Parent  6a3c6c921daac6968b9906bc736d7edac215a4c4
# Parent  a89cf57ba3a55044d91b679e771abc844c96dff3
maint: periodic merge of default to classdef

diff --git a/libinterp/parse-tree/lex.h b/libinterp/parse-tree/lex.h
--- a/libinterp/parse-tree/lex.h
+++ b/libinterp/parse-tree/lex.h
@@ -250,18 +250,16 @@ public:
   }
 
   ~lexical_feedback (void);
 
   void init (void);
 
   void reset (void);
 
-  int finish_comment (octave_comment_elt::comment_type typ);
-
   // true means that we have encountered eof on the input stream.
   bool end_of_input;
 
   // true means that we should convert spaces to a comma inside a
   // matrix definition.
   bool convert_spaces_to_comma;
 
   // gag.  stupid kludge so that [[1,2][3,4]] will work.
@@ -499,16 +497,21 @@ public:
   bool next_token_is_bin_op (bool spc_prev);
 
   void scan_for_comments (const char *text);
 
   int eat_whitespace (void);
 
   void handle_number (void);
 
+  void handle_continuation (void);
+
+  void finish_comment (octave_comment_elt::comment_type typ,
+                       bool looking_at_continuation = false);
+
   bool have_continuation (bool trailing_comments_ok = true);
 
   bool have_ellipsis_continuation (bool trailing_comments_ok = true);
 
   int eat_continuation (void);
 
   int handle_string (char delim);
 
diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -480,32 +480,28 @@ ANY_INCLUDING_NL (.|{NL})
 // Start of a block comment.  If the comment marker appears immediately
 // after a block of full-line comments, finish the full line comment
 // block.
 %}
 
 ^{S}*{CCHAR}\{{S}*{NL} {
     curr_lexer->lexer_debug ("^{S}*{CCHAR}\{{S}*{NL}");
 
-    int tok = 0;
+    yyless (0);
 
     if (curr_lexer->start_state () == LINE_COMMENT_START)
       {
         if (! curr_lexer->comment_text.empty ())
-          tok = curr_lexer->finish_comment (octave_comment_elt::full_line);
+          curr_lexer->finish_comment (octave_comment_elt::full_line);
 
         curr_lexer->pop_start_state ();
       }
 
     curr_lexer->push_start_state (BLOCK_COMMENT_START);
 
-    yyless (0);
-
-    if (tok > 0)
-      return curr_lexer->count_token (tok);
   }
 
 <BLOCK_COMMENT_START>^{S}*{CCHAR}\{{S}*{NL} {
     curr_lexer->lexer_debug ("<BLOCK_COMMENT_START>^{S}*{CCHAR}\{{S}*{NL}");
 
     curr_lexer->input_line_number++;
     curr_lexer->current_input_column = 1;
 
@@ -522,28 +518,23 @@ ANY_INCLUDING_NL (.|{NL})
 %}
 
 <BLOCK_COMMENT_START>^{S}*{CCHAR}\}{S}*{NL} {
     curr_lexer->lexer_debug ("<BLOCK_COMMENT_START>^{S}*{CCHAR}\\}{S}*{NL}");
 
     curr_lexer->input_line_number++;
     curr_lexer->current_input_column = 1;
 
-    int tok = 0;
-
     if (curr_lexer->block_comment_nesting_level > 1)
       curr_lexer->comment_text = "\n";
     else
-      tok = curr_lexer->finish_comment (octave_comment_elt::block);
+      curr_lexer->finish_comment (octave_comment_elt::block);
 
     curr_lexer->block_comment_nesting_level--;
     curr_lexer->pop_start_state ();
-
-    if (tok > 0)
-      return curr_lexer->count_token (tok);
   }
 
 %{
 // Body of a block comment.
 %}
 
 <BLOCK_COMMENT_START>.*{NL} {
     curr_lexer->lexer_debug ("<BLOCK_COMMENT_START>.*{NL}");
@@ -579,53 +570,36 @@ ANY_INCLUDING_NL (.|{NL})
         if (c == '#' || c == '%' || c == ' ' || c == '\t')
           i++;
         else
           break;
       }
       
     curr_lexer->comment_text += &yytext[i];
 
-    int tok = 0;
-
     if (! full_line_comment)
       {
-        tok = curr_lexer->finish_comment (octave_comment_elt::end_of_line);
+        curr_lexer->finish_comment (octave_comment_elt::end_of_line);
 
         curr_lexer->pop_start_state ();
-
-        if (curr_lexer->start_state () == COMMAND_START)
-          {
-            // Allow the actions for the end of a COMMAND line to be
-            // executed next.
-
-            tok = 0;
-            curr_lexer->xunput ('\n');
-          }
       }
-
-    if (tok > 0)
-      return curr_lexer->count_token (tok);
   }
 
 %{
 // End of a block of full-line comments.
 %}
 
 <LINE_COMMENT_START>{ANY_INCLUDING_NL} {
     curr_lexer->lexer_debug ("<LINE_COMMENT_START>{ANY_INCLUDING_NL}");
 
     curr_lexer->xunput (yytext[0]);
 
-    int tok = curr_lexer->finish_comment (octave_comment_elt::full_line);  
+    curr_lexer->finish_comment (octave_comment_elt::full_line);  
 
     curr_lexer->pop_start_state ();
-
-    if (tok > 0)
-      return curr_lexer->count_token (tok);
   }
 
 %{
 // Imaginary numbers.
 %}
 
 {NUMBER}{Im} {
     curr_lexer->lexer_debug ("{NUMBER}{Im}");
@@ -655,25 +629,20 @@ ANY_INCLUDING_NL (.|{NL})
     curr_lexer->current_input_column += yyleng;
   }
 
 %{
 // Continuation lines.  Allow comments after continuations.
 %}
 
 {CONT}{S}*{NL} |
-{CONT}{S}*{COMMENT} {
-    curr_lexer->lexer_debug ("{CONT}{S}*{NL}|{CONT}{S}*{COMMENT}");
-
-    if (yytext[0] == '\\')
-      curr_lexer->gripe_matlab_incompatible_continuation ();
-    curr_lexer->scan_for_comments (yytext);
-    curr_lexer->decrement_promptflag ();
-    curr_lexer->input_line_number++;
-    curr_lexer->current_input_column = 1;
+{CONT}{S}*{CCHAR}.*{NL} {
+    curr_lexer->lexer_debug ("{CONT}{S}*{NL}|{CONT}{S}*{CCHAR}.*{NL}");
+
+    curr_lexer->handle_continuation ();
   }
 
 %{
 // End of file.
 %}
 
 <<EOF>> {
    return curr_lexer->handle_end_of_input ();
@@ -1412,46 +1381,16 @@ looks_like_copyright (const std::string&
       size_t offset = s.find_first_not_of (" \t");
 
       retval = (s.substr (offset, 9) == "Copyright" || s.substr (offset, 6) == "Author");
     }
 
   return retval;
 }
 
-int
-lexical_feedback::finish_comment (octave_comment_elt::comment_type typ)
-{
-  bool copyright = looks_like_copyright (comment_text);
-
-  if (nesting_level.none () && help_text.empty ()
-    && ! comment_text.empty () && ! copyright)
-    help_text = comment_text;
-
-  if (copyright)
-    typ = octave_comment_elt::copyright;
-
-  octave_comment_buffer::append (comment_text, typ);
-
-  comment_text = "";
-
-  quote_is_transpose = false;
-  convert_spaces_to_comma = true;
-  at_beginning_of_statement = true;
-
-  if (nesting_level.none ())
-    return '\n';
-  else if (nesting_level.is_bracket_or_brace ())
-    // FIXME -- this result will be different if the comment follows a
-    // continuation token.
-    return ';';
-  else
-    return 0;
-}
-
 void
 octave_lexer::input_buffer::fill (const std::string& input, bool eof_arg)
 {
   buffer = input;
   chars_left = buffer.length ();
   pos = buffer.c_str ();
   eof = eof_arg;
 }
@@ -2351,16 +2290,91 @@ octave_lexer::handle_number (void)
   push_token (new token (value, yytxt, input_line_number,
                          current_input_column));
 
   current_input_column += flex_yyleng ();
 
   do_comma_insert_check ();
 }
 
+void
+octave_lexer::handle_continuation (void)
+{
+  char *yytxt = flex_yytext ();
+  int yylng = flex_yyleng ();
+
+  size_t offset = 1;
+  if (yytxt[0] == '\\')
+    gripe_matlab_incompatible_continuation ();
+  else
+    offset = 3;
+
+  bool have_space = false;
+  while (offset < yylng)
+    {
+      char c = yytxt[offset];
+      if (c == ' ' || c == '\t')
+        {
+          have_space = true;
+          offset++;
+        }
+      else
+        break;
+    }
+
+  bool have_comment = false;
+  while (offset < yylng)
+    {
+      char c = yytxt[offset];
+      if (c == '#' || c == '%')
+        {
+          have_comment = true;
+          offset++;
+        }
+      else
+        break;
+    }
+
+  if (have_comment)
+    {
+      comment_text = &yytxt[offset];
+
+      finish_comment (octave_comment_elt::end_of_line, true);
+    }
+
+  decrement_promptflag ();
+  input_line_number++;
+  current_input_column = 1;
+}
+
+void
+octave_lexer::finish_comment (octave_comment_elt::comment_type typ,
+                              bool looking_at_continuation)
+{
+  bool copyright = looks_like_copyright (comment_text);
+
+  if (nesting_level.none () && help_text.empty ()
+    && ! comment_text.empty () && ! copyright)
+    help_text = comment_text;
+
+  if (copyright)
+    typ = octave_comment_elt::copyright;
+
+  octave_comment_buffer::append (comment_text, typ);
+
+  comment_text = "";
+
+  quote_is_transpose = false;
+  convert_spaces_to_comma = true;
+  at_beginning_of_statement = true;
+
+  if (! looking_at_continuation)
+    xunput ('\n');
+}
+
 // We have seen a backslash and need to find out if it should be
 // treated as a continuation character.  If so, this eats it, up to
 // and including the new line character.
 //
 // Match whitespace only, followed by a comment character or newline.
 // Once a comment character is found, discard all input until newline.
 // If non-whitespace characters are found before comment
 // characters, return 0.  Otherwise, return 1.
