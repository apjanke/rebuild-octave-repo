# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1485558948 18000
#      Fri Jan 27 18:15:48 2017 -0500
# Node ID af48d8be62b3c6da01d3daf802b35609d46e76a3
# Parent  3e7ca46d3eabdee21929853c5e765f462771f0be
move recover_from_exception and atexit functions inside octave namespace

* interpreter.h, interpreter.cc (recover_from_exception,
octave_add_atexit_function, octave_remove_atexit_function,
octave_atexit_functions): Move inside octave::interpreter class and
rename without octave_ prefix.  Change all uses.

diff --git a/libgui/graphics/__init_qt__.cc b/libgui/graphics/__init_qt__.cc
--- a/libgui/graphics/__init_qt__.cc
+++ b/libgui/graphics/__init_qt__.cc
@@ -54,17 +54,17 @@ namespace QtHandles
 
             qRegisterMetaType<graphics_object> ("graphics_object");
 
             gh_manager::enable_event_processing (true);
 
             graphics_toolkit tk (new Backend ());
             gtk_manager::load_toolkit (tk);
 
-            octave_add_atexit_function ("__shutdown_qt__");
+            octave::interpreter::add_atexit_function ("__shutdown_qt__");
 
             // Change some default settings to use Qt default colors
             QPalette p;
             graphics_object root = gh_manager::get_object (0);
 
             /*
             root.set ("defaultfigurecolor",
                       octave_value (Utils::toRgb (p.color (QPalette::Window))));
diff --git a/libinterp/corefcn/cellfun.cc b/libinterp/corefcn/cellfun.cc
--- a/libinterp/corefcn/cellfun.cc
+++ b/libinterp/corefcn/cellfun.cc
@@ -77,17 +77,17 @@ get_output_list (octave_idx_type count, 
   try
     {
       tmp = func.do_multi_index_op (nargout, inputlist);
     }
   catch (const octave::execution_exception& e)
     {
       if (error_handler.is_defined ())
         {
-          recover_from_exception ();
+          octave::interpreter::recover_from_exception ();
 
           execution_error = true;
         }
       else
         throw e;
     }
 
   if (execution_error)
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -3265,17 +3265,17 @@ base_graphics_object::remove_all_listene
         {
           property p = get_properties ().get_property (pm.first);
 
           if (p.ok ())
             p.delete_listener ();
         }
       catch (const octave::execution_exception&)
         {
-          recover_from_exception ();
+          octave::interpreter::recover_from_exception ();
         }
     }
 }
 
 void
 base_graphics_object::build_user_defaults_map (property_list::pval_map_type &def, const std::string go_name) const
 {
   property_list local_defaults = get_defaults_list ();
@@ -9743,17 +9743,17 @@ gh_manager::do_execute_callback (const g
               octave::eval_string (s, false, status, 0);
             }
           catch (octave::execution_exception&)
             {
               std::cerr << "execution error in graphics callback function"
                         << std::endl;
               octave::feval ("lasterr",
                              ovl ("execution error in graphics callback function"));
-              recover_from_exception ();
+              octave::interpreter::recover_from_exception ();
             }
         }
       else if (cb.is_cell () && cb.length () > 0
                && (cb.rows () == 1 || cb.columns () == 1)
                && (cb.cell_value ()(0).is_function ()
                    || cb.cell_value ()(0).is_function_handle ()))
         {
           Cell c = cb.cell_value ();
@@ -9776,17 +9776,17 @@ gh_manager::do_execute_callback (const g
             octave::feval (fcn, args);
           }
         catch (octave::execution_exception&)
           {
             std::cerr << "execution error in graphics callback function"
                       << std::endl;
             octave::feval ("lasterr",
                            ovl ("execution error in graphics callback function"));
-            recover_from_exception ();
+            octave::interpreter::recover_from_exception ();
           }
 
       // Redraw after interacting with a user-interface (ui*) object.
       if (Vdrawnow_requested)
         {
           graphics_object go = get_object (h);
 
           if (go)
diff --git a/libinterp/corefcn/input.cc b/libinterp/corefcn/input.cc
--- a/libinterp/corefcn/input.cc
+++ b/libinterp/corefcn/input.cc
@@ -212,17 +212,17 @@ interactive_input (const std::string& s,
           eval_error = true;
 
           std::string stack_trace = e.info ();
 
           if (! stack_trace.empty ())
             std::cerr << stack_trace;
 
           if (octave::application::interactive ())
-            recover_from_exception ();
+            octave::interpreter::recover_from_exception ();
         }
 
       octave::flush_stdout ();
 
       // We set Vdrawnow_requested to false even if there is an error in
       // drawnow so that the error doesn't reappear at every prompt.
 
       Vdrawnow_requested = false;
@@ -719,17 +719,17 @@ get_debug_input (const std::string& prom
       catch (const octave::execution_exception& e)
         {
           std::string stack_trace = e.info ();
 
           if (! stack_trace.empty ())
             std::cerr << stack_trace;
 
           // Ignore errors when in debugging mode;
-          recover_from_exception ();
+          octave::interpreter::recover_from_exception ();
         }
     }
 }
 
 namespace octave
 {
   const std::string base_reader::in_src ("invalid");
 
diff --git a/libinterp/corefcn/interpreter.cc b/libinterp/corefcn/interpreter.cc
--- a/libinterp/corefcn/interpreter.cc
+++ b/libinterp/corefcn/interpreter.cc
@@ -189,32 +189,16 @@ maximum_braindamage (void)
   Fstruct_levels_to_print (octave_value (0));
 
   disable_warning ("Octave:abbreviated-property-match");
   disable_warning ("Octave:data-file-in-path");
   disable_warning ("Octave:function-name-clash");
   disable_warning ("Octave:possible-matlab-short-circuit-operator");
 }
 
-void
-recover_from_exception (void)
-{
-  octave::can_interrupt = true;
-  octave_interrupt_immediately = 0;
-  octave_interrupt_state = 0;
-  octave_signal_caught = 0;
-  octave_exception_state = octave_no_exception;
-  octave_restore_signal_mask ();
-  octave::catch_interrupts ();
-}
-
-// Fix up things before exiting.
-
-static std::list<std::string> octave_atexit_functions;
-
 DEFUN (quit, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {} exit
 @deftypefnx {} {} exit (@var{status})
 @deftypefnx {} {} quit
 @deftypefnx {} {} quit (@var{status})
 Exit the current Octave session.
 
@@ -249,41 +233,16 @@ to run using @code{atexit}.
 
   throw octave::exit_exception (exit_status);
 
   return ovl ();
 }
 
 DEFALIAS (exit, quit);
 
-void
-octave_add_atexit_function (const std::string& fname)
-{
-  octave_atexit_functions.push_front (fname);
-}
-
-bool
-octave_remove_atexit_function (const std::string& fname)
-{
-  bool found = false;
-
-  for (auto it = octave_atexit_functions.begin ();
-       it != octave_atexit_functions.end (); it++)
-    {
-      if (*it == fname)
-        {
-          octave_atexit_functions.erase (it);
-          found = true;
-          break;
-        }
-    }
-
-  return found;
-}
-
 DEFUN (atexit, args, nargout,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {} atexit (@var{fcn})
 @deftypefnx {} {} atexit (@var{fcn}, @var{flag})
 Register a function to be called when Octave exits.
 
 For example,
 
@@ -328,20 +287,20 @@ from the list, so if a function was plac
 
   bool add_mode = (nargin == 2)
     ? args(1).xbool_value ("atexit: FLAG argument must be a logical value")
     : true;
 
   octave_value_list retval;
 
   if (add_mode)
-    octave_add_atexit_function (arg);
+    octave::interpreter::add_atexit_function (arg);
   else
     {
-      bool found = octave_remove_atexit_function (arg);
+      bool found = octave::interpreter::remove_atexit_function (arg);
 
       if (nargout > 0)
         retval = ovl (found);
     }
 
   return retval;
 }
 
@@ -357,23 +316,23 @@ safe_source_file (const std::string& fil
                   const std::string& warn_for = "")
 {
   try
     {
       octave::source_file (file_name, context, verbose, require_file, warn_for);
     }
   catch (const octave::interrupt_exception&)
     {
-      recover_from_exception ();
+      octave::interpreter::recover_from_exception ();
 
       return 1;
     }
   catch (const octave::execution_exception&)
     {
-      recover_from_exception ();
+      octave::interpreter::recover_from_exception ();
 
       return 1;
     }
 
   return 0;
 }
 
 static void
@@ -382,21 +341,21 @@ execute_pkg_add (const std::string& dir)
   std::string file_name = octave::sys::file_ops::concat (dir, "PKG_ADD");
 
   try
     {
       load_path::execute_pkg_add (dir);
     }
   catch (const octave::interrupt_exception&)
     {
-      recover_from_exception ();
+      octave::interpreter::recover_from_exception ();
     }
   catch (const octave::execution_exception&)
     {
-      recover_from_exception ();
+      octave::interpreter::recover_from_exception ();
     }
 }
 
 static void
 initialize_load_path (bool set_initial_path)
 {
   // Temporarily set the execute_pkg_add function to one that catches
   // exceptions.  This is better than wrapping load_path::initialize in
@@ -1008,21 +967,21 @@ namespace octave
     // If we are attached to a GUI, process pending events and
     // disconnect the link.
 
     octave_link::process_events (true);
     octave_link::disconnect_link ();
 
     OCTAVE_SAFE_CALL (remove_input_event_hook_functions, ());
 
-    while (! octave_atexit_functions.empty ())
+    while (! atexit_functions.empty ())
       {
-        std::string fcn = octave_atexit_functions.front ();
+        std::string fcn = atexit_functions.front ();
 
-        octave_atexit_functions.pop_front ();
+        atexit_functions.pop_front ();
 
         OCTAVE_SAFE_CALL (reset_error_handler, ());
 
         OCTAVE_SAFE_CALL (octave::feval, (fcn, octave_value_list (), 0));
 
         OCTAVE_SAFE_CALL (octave::flush_stdout, ());
       }
 
@@ -1078,9 +1037,47 @@ namespace octave
         // .oct files to be unregistered when the .oct file shared library
         // is unloaded.
         //
         // OCTAVE_SAFE_CALL (singleton_cleanup_list::cleanup, ());
 
         OCTAVE_SAFE_CALL (octave::chunk_buffer::clear, ());
       }
   }
+
+  void recover_from_exception (void)
+  {
+    octave::can_interrupt = true;
+    octave_interrupt_immediately = 0;
+    octave_interrupt_state = 0;
+    octave_signal_caught = 0;
+    octave_exception_state = octave_no_exception;
+    octave_restore_signal_mask ();
+    octave::catch_interrupts ();
+  }
+
+  // Functions to call when the interpreter exits.
+
+  std::list<std::string> atexit_functions;
+
+  void interpreter::add_atexit_function (const std::string& fname)
+  {
+    atexit_functions.push_front (fname);
+  }
+
+  bool interpreter::remove_atexit_function (const std::string& fname)
+  {
+    bool found = false;
+
+    for (auto it = atexit_functions.begin ();
+         it != atexit_functions.end (); it++)
+      {
+        if (*it == fname)
+          {
+            atexit_functions.erase (it);
+            found = true;
+            break;
+          }
+      }
+
+    return found;
+  }
 }
diff --git a/libinterp/corefcn/interpreter.h b/libinterp/corefcn/interpreter.h
--- a/libinterp/corefcn/interpreter.h
+++ b/libinterp/corefcn/interpreter.h
@@ -29,24 +29,16 @@ along with Octave; see the file COPYING.
 
 #include "quit.h"
 #include "str-vec.h"
 
 #include "pt-eval.h"
 
 extern OCTINTERP_API bool quit_allowed;
 
-extern OCTINTERP_API void recover_from_exception (void);
-
-extern OCTINTERP_API void
-octave_add_atexit_function (const std::string& fname);
-
-extern OCTINTERP_API bool
-octave_remove_atexit_function (const std::string& fname);
-
 // TRUE means we are ready to interpret commands, but not everything
 // is ready for interactive use.
 extern OCTINTERP_API bool octave_interpreter_ready;
 
 // TRUE means we've processed all the init code and we are good to go.
 extern OCTINTERP_API bool octave_initialized;
 
 namespace octave
@@ -74,18 +66,26 @@ namespace octave
 
     ~interpreter (void);
 
     int execute (void);
 
     bool interactive (void) const { return m_interactive; }
     void interactive (bool arg) { m_interactive = arg; }
 
+    static void recover_from_exception (void);
+
+    static void add_atexit_function (const std::string& fname);
+
+    static bool remove_atexit_function (const std::string& fname);
+
   private:
 
+    static std::list<std::string> atexit_functions;
+
     int execute_internal (void);
 
     void display_startup_message (void) const;
 
     int execute_startup_files (void) const;
 
     int execute_eval_option_code (void);
 
@@ -101,9 +101,34 @@ namespace octave
 
     bool m_embedded;
 
     // TRUE means this is an interactive interpreter (forced or not).
     bool m_interactive;
   };
 }
 
+#if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
+
+OCTAVE_DEPRECATED ("use 'octave::interpreter::recover_from_exception' instead")
+static inline void
+recover_from_exception (void)
+{
+  octave::interpreter::recover_from_exception ();
+}
+
+OCTAVE_DEPRECATED ("use 'octave::interpreter::add_atexit_function' instead")
+static inline void
+add_atexit_function (const std::string& fname)
+{
+  octave::interpreter::add_atexit_function (fname);
+}
+
+OCTAVE_DEPRECATED ("use 'octave::interpreter::remove_atexit_function' instead")
+static inline bool
+remove_atexit_function (const std::string& fname)
+{
+  return octave::interpreter::remove_atexit_function (fname);
+}
+
 #endif
+
+#endif
diff --git a/libinterp/corefcn/load-path.cc b/libinterp/corefcn/load-path.cc
--- a/libinterp/corefcn/load-path.cc
+++ b/libinterp/corefcn/load-path.cc
@@ -103,17 +103,17 @@ load_path::dir_info::update (void)
                   // We haven't seen this directory before.
                   initialize ();
                 }
             }
           catch (const octave::execution_exception&)
             {
               // Skip updating if we don't know where we are,
               // but don't treat it as an error.
-              recover_from_exception ();
+              octave::interpreter::recover_from_exception ();
             }
         }
       // Absolute path, check timestamp to see whether it requires re-caching
       else if (fs.mtime () + fs.time_resolution () > dir_time_last_checked)
         initialize ();
     }
 }
 
@@ -167,17 +167,17 @@ load_path::dir_info::initialize (void)
 
           abs_dir_cache[abs_name] = *this;
         }
       catch (const octave::execution_exception&)
         {
           // Skip updating if we don't know where we are but don't treat
           // it as an error.
 
-          recover_from_exception ();
+          octave::interpreter::recover_from_exception ();
         }
     }
   else
     {
       std::string msg = fs.error ();
       warning ("load_path: %s: %s", dir_name.c_str (), msg.c_str ());
     }
 }
diff --git a/libinterp/corefcn/ls-mat-ascii.cc b/libinterp/corefcn/ls-mat-ascii.cc
--- a/libinterp/corefcn/ls-mat-ascii.cc
+++ b/libinterp/corefcn/ls-mat-ascii.cc
@@ -355,17 +355,17 @@ save_mat_ascii_data (std::ostream& os, c
   Matrix m;
 
   try
     {
       m = val.matrix_value (true);
     }
   catch (const octave::execution_exception& e)
     {
-      recover_from_exception ();
+      octave::interpreter::recover_from_exception ();
 
       success = false;
     }
 
   if (success)
     {
       long old_precision = os.precision ();
 
diff --git a/libinterp/corefcn/mex.cc b/libinterp/corefcn/mex.cc
--- a/libinterp/corefcn/mex.cc
+++ b/libinterp/corefcn/mex.cc
@@ -3181,17 +3181,17 @@ mexCallMATLAB (int nargout, mxArray *arg
   try
     {
       retval = octave::feval (fname, args, nargout);
     }
   catch (const octave::execution_exception&)
     {
       if (mex_context->trap_feval_error)
         {
-          recover_from_exception ();
+          octave::interpreter::recover_from_exception ();
 
           execution_error = true;
         }
       else
         {
           args.resize (0);
           retval.resize (0);
 
@@ -3261,17 +3261,17 @@ mexEvalString (const char *s)
   octave_value_list ret;
 
   try
     {
       ret = octave::eval_string (s, false, parse_status, 0);
     }
   catch (const octave::execution_exception&)
     {
-      recover_from_exception ();
+      octave::interpreter::recover_from_exception ();
 
       execution_error = true;
     }
 
   if (parse_status || execution_error)
     retval = 1;
 
   return retval;
@@ -3288,17 +3288,17 @@ mexEvalStringWithTrap (const char *s)
   octave_value_list ret;
 
   try
     {
       ret = octave::eval_string (s, false, parse_status, 0);
     }
   catch (const octave::execution_exception&)
     {
-      recover_from_exception ();
+      octave::interpreter::recover_from_exception ();
 
       execution_error = true;
     }
 
   if (parse_status || execution_error)
     {
       const char *field_names[] = {"identifier", "message", "case", "stack"};
       mx = mxCreateStructMatrix (1, 1, 4, field_names);
diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -84,17 +84,17 @@ convert_to_valid_int (const octave_value
   double dval = 0.0;
 
   try
     {
       dval = tc.double_value ();
     }
   catch (const octave::execution_exception&)
     {
-      recover_from_exception ();
+      octave::interpreter::recover_from_exception ();
 
       conv_err = 1;
     }
 
   if (! conv_err)
     {
       if (! lo_ieee_isnan (dval))
         {
diff --git a/libinterp/corefcn/utils.cc b/libinterp/corefcn/utils.cc
--- a/libinterp/corefcn/utils.cc
+++ b/libinterp/corefcn/utils.cc
@@ -1366,17 +1366,17 @@ character @nospell{"@xbackslashchar{}0"}
 
       if (nargin == 2)
         retval = idx.extent (n) <= n;
       else
         retval = true;
     }
   catch (const octave::execution_exception&)
     {
-      recover_from_exception ();
+      octave::interpreter::recover_from_exception ();
 
       retval = false;
     }
 
   return retval;
 }
 
 /*
diff --git a/libinterp/corefcn/variables.cc b/libinterp/corefcn/variables.cc
--- a/libinterp/corefcn/variables.cc
+++ b/libinterp/corefcn/variables.cc
@@ -282,17 +282,17 @@ generate_struct_completions (const std::
               frame.run ();
 
               if (tmp.is_defined ()
                   && (tmp.is_map () || tmp.is_java () || tmp.is_classdef_object ()))
                 names = tmp.map_keys ();
             }
           catch (const octave::execution_exception&)
             {
-              recover_from_exception ();
+              octave::interpreter::recover_from_exception ();
             }
         }
     }
 
   // Undo look-back that found the array expression,
   // but insert an extra "." to distinguish from the non-struct case.
   if (array)
     prefix = ".";
diff --git a/libinterp/octave-value/ov-class.cc b/libinterp/octave-value/ov-class.cc
--- a/libinterp/octave-value/ov-class.cc
+++ b/libinterp/octave-value/ov-class.cc
@@ -1060,17 +1060,17 @@ octave_class::reconstruct_exemplar (void
           octave_value_list result;
 
           try
             {
               result = ctor.do_multi_index_op (1, octave_value_list ());
             }
           catch (const octave::execution_exception&)
             {
-              recover_from_exception ();
+              octave::interpreter::recover_from_exception ();
 
               execution_error = true;
             }
 
           if (! execution_error && result.length () == 1)
             retval = true;
         }
       else
diff --git a/libinterp/octave-value/ov-fcn-handle.cc b/libinterp/octave-value/ov-fcn-handle.cc
--- a/libinterp/octave-value/ov-fcn-handle.cc
+++ b/libinterp/octave-value/ov-fcn-handle.cc
@@ -2038,17 +2038,17 @@ octave_fcn_binder::maybe_binder (const o
                           interpreter_try (frame);
 
                           try
                             {
                               root_val = make_fcn_handle (head_name);
                             }
                           catch (const octave::execution_exception&)
                             {
-                              recover_from_exception ();
+                              octave::interpreter::recover_from_exception ();
 
                               bad = true;
                             }
                         }
                     }
                 }
 
               if (! bad)
diff --git a/libinterp/octave-value/ov-oncleanup.cc b/libinterp/octave-value/ov-oncleanup.cc
--- a/libinterp/octave-value/ov-oncleanup.cc
+++ b/libinterp/octave-value/ov-oncleanup.cc
@@ -80,17 +80,17 @@ octave_oncleanup::~octave_oncleanup (voi
 
   try
     {
       // Run the actual code.
       fcn.do_multi_index_op (0, octave_value_list ());
     }
   catch (const octave::interrupt_exception&)
     {
-      recover_from_exception ();
+      octave::interpreter::recover_from_exception ();
 
       warning ("onCleanup: interrupt occurred in cleanup action");
     }
   catch (const octave::execution_exception&)
     {
       std::string msg = last_error_message ();
       warning ("onCleanup: error caught while executing cleanup function:\n%s\n",
                msg.c_str ());
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -2338,17 +2338,17 @@ namespace octave
                     tc_retval->stash_original_text (buf.str ());
 
                     delete e;
 
                     retval = tc_retval;
                   }
                 catch (const octave::execution_exception&)
                   {
-                    recover_from_exception ();
+                    octave::interpreter::recover_from_exception ();
                   }
               }
           }
         else
           {
             e->preserve_base ();
             delete e;
 
@@ -3958,17 +3958,17 @@ namespace octave
             tc_retval->stash_original_text (buf.str ());
 
             delete array_list;
 
             retval = tc_retval;
           }
         catch (const octave::execution_exception&)
           {
-            recover_from_exception ();
+            octave::interpreter::recover_from_exception ();
           }
       }
 
     return retval;
   }
 
   // Finish building a matrix list.
 
@@ -5218,17 +5218,17 @@ does.
   octave_value_list tmp;
 
   try
     {
       tmp = octave::eval_string (args(0), nargout > 0, parse_status, nargout);
     }
   catch (const octave::execution_exception&)
     {
-      recover_from_exception ();
+      octave::interpreter::recover_from_exception ();
 
       execution_error = true;
     }
 
   if (nargin > 1 && (parse_status != 0 || execution_error))
     {
       // Set up for letting the user print any messages from
       // errors that occurred in the first part of this eval().
@@ -5388,17 +5388,17 @@ Like @code{eval}, except that the expres
 
   try
     {
       tmp = octave::eval_string (args(1), nargout > 0,
                                  parse_status, nargout);
     }
   catch (const octave::execution_exception&)
     {
-      recover_from_exception ();
+      octave::interpreter::recover_from_exception ();
 
       execution_error = true;
     }
 
   if (nargin > 2 && (parse_status != 0 || execution_error))
     {
       // Set up for letting the user print any messages from
       // errors that occurred in the first part of this eval().
diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -828,17 +828,17 @@ namespace octave
           try
             {
               in_try_catch++;
               try_code->accept (*this);
               in_try_catch--;
             }
           catch (const octave::execution_exception&)
             {
-              recover_from_exception ();
+              octave::interpreter::recover_from_exception ();
 
               in_try_catch--;          // must be restored before "catch" block
               execution_error = true;
             }
         }
       // Unwind to let the user print any messages from
       // errors that occurred in the body of the try_catch statement,
       // or throw further errors.
@@ -900,17 +900,17 @@ namespace octave
 
     try
       {
         if (list)
           list->accept (*this);
       }
     catch (const octave::execution_exception&)
       {
-        recover_from_exception ();
+        octave::interpreter::recover_from_exception ();
 
         if (tree_break_command::breaking || tree_return_command::returning)
           frame.discard (2);
         else
           frame.run (2);
 
         frame.discard (2);
 
@@ -964,17 +964,17 @@ namespace octave
             unwind_protect_code->accept (*this);
           }
         catch (const octave::execution_exception&)
           {
             // FIXME: Maybe we should be able to temporarily set the
             // interpreter's exception handling state to something "safe"
             // while the cleanup block runs instead of just resetting it
             // here?
-            recover_from_exception ();
+            octave::interpreter::recover_from_exception ();
 
             // Run the cleanup code on exceptions, so that it is run even
             // in case of interrupt or out-of-memory.
             do_unwind_protect_cleanup_code (cleanup_code);
 
             // If an error occurs inside the cleanup code, a new
             // exception will be thrown instead of the original.
             throw;
