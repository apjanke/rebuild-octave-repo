# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1519222537 18000
#      Wed Feb 21 09:15:37 2018 -0500
# Node ID 0d21e2a1cdfc82aeee1fa7d63efc02dbd55e24dd
# Parent  5f445419559f74ca47b2726bde19f184d5346244
new element access operators for Range objects

* Range.h, Range.cc (Range::checkelem, Range::elem, Range::operator()):
Allow indexing by row and column.

diff --git a/liboctave/array/Range.cc b/liboctave/array/Range.cc
--- a/liboctave/array/Range.cc
+++ b/liboctave/array/Range.cc
@@ -67,38 +67,55 @@ Range::matrix_value (void) const
     }
 
   return cache;
 }
 
 double
 Range::checkelem (octave_idx_type i) const
 {
+  // Ranges are row vectors.
+
   if (i < 0 || i >= rng_numel)
-    octave::err_index_out_of_range (1, 1, i+1, rng_numel);
+    octave::err_index_out_of_range (2, 2, i+1, rng_numel);
 
   if (i == 0)
     return rng_base;
   else if (i < rng_numel - 1)
     return rng_base + i * rng_inc;
   else
     return rng_limit;
 }
 
 double
+Range::checkelem (octave_idx_type i, octave_idx_type j) const
+{
+  if (i != 0)
+    octave::err_index_out_of_range (1, 1, i+1, rng_numel);
+
+  return checkelem (j);
+}
+
+double
 Range::elem (octave_idx_type i) const
 {
   if (i == 0)
     return rng_base;
   else if (i < rng_numel - 1)
     return rng_base + i * rng_inc;
   else
     return rng_limit;
 }
 
+double
+Range::elem (octave_idx_type i, octave_idx_type j) const
+{
+  return elem (j);
+}
+
 // Helper class used solely for idx_vector.loop () function call
 class __rangeidx_helper
 {
 public:
   __rangeidx_helper (double *a, double b, double i, double l, octave_idx_type n)
     : array (a), base (b), inc (i), limit (l), nmax (n-1) { }
 
   void operator () (octave_idx_type i)
diff --git a/liboctave/array/Range.h b/liboctave/array/Range.h
--- a/liboctave/array/Range.h
+++ b/liboctave/array/Range.h
@@ -79,16 +79,21 @@ public:
   double limit (void) const { return rng_limit; }
   double inc (void) const { return rng_inc; }
 
   OCTAVE_DEPRECATED (4.4, "use 'numel' instead")
   octave_idx_type nelem (void) const { return numel (); }
 
   octave_idx_type numel (void) const { return rng_numel; }
 
+  octave_idx_type rows (void) const { return 1; }
+
+  octave_idx_type cols (void) const { return numel (); }
+  octave_idx_type columns (void) const { return numel (); }
+
   bool isempty (void) const { return numel () == 0; }
 
   OCTAVE_DEPRECATED (4.4, "use 'isempty' instead")
   bool is_empty (void) const
   { return isempty (); }
 
   bool all_elements_are_ints (void) const;
 
@@ -111,20 +116,24 @@ public:
 
   OCTAVE_DEPRECATED (4.4, "use 'issorted' instead")
   sortmode is_sorted (sortmode mode = ASCENDING) const
   { return issorted (mode); }
 
   // Support for single-index subscripting, without generating matrix cache.
 
   double checkelem (octave_idx_type i) const;
+  double checkelem (octave_idx_type i, octave_idx_type j) const;
 
   double elem (octave_idx_type i) const;
+  double elem (octave_idx_type i, octave_idx_type j) const;
 
   double operator () (octave_idx_type i) const { return elem (i); }
+  double operator () (octave_idx_type i, octave_idx_type j) const
+  { return elem (i, j); }
 
   Array<double> index (const idx_vector& i) const;
 
   void set_base (double b);
 
   void set_limit (double l);
 
   void set_inc (double i);
