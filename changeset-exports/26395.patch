# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1546528586 18000
#      Thu Jan 03 10:16:26 2019 -0500
# Node ID 5daa7fff9c6999b2cd91edc7cdbefa371547cebb
# Parent  c309bceb6774c8e59659404947c0995b39f0e6f3
# Parent  6323979ee312e83f5c9f43b3354f033625c82f67
maint: Merge stable to default.

diff --git a/libgui/graphics/annotation-dialog.cc b/libgui/graphics/annotation-dialog.cc
--- a/libgui/graphics/annotation-dialog.cc
+++ b/libgui/graphics/annotation-dialog.cc
@@ -187,21 +187,18 @@ annotation_dialog::set_gui_props ()
               ui->sb_x->setValue (0);
               ui->sb_y->setValue (0);
             }
           if (nels >= 4)
             {
               ui->sb_width->setValue (position(2));
               ui->sb_height->setValue (position(3));
             }
-          else
-            {
-              ui->sb_width->setValue (position(2));
-              ui->sb_height->setValue (position(3));
-            }
+          // FIXME: Should there be an else branch here?
+          // In annotation.m "textbox" is forced to have a 4-elem vector.
         }
       else if (name == "string")
         {
           // FIXME: handle if is array of strings ?
           ui->edit_string->setText (props(2*i +1).string_value ().c_str ());
         }
       else if (name == "fitboxtotext")
         {
diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -2092,16 +2092,23 @@ namespace octave
     // If it is a new file with no name, signal that saveFileAs
     // should be performed.
     if (! valid_file_name (saveFileName))
       {
         save_file_as (remove_on_success);
         return;
       }
 
+    _encoding = _new_encoding;    // consider a possible new encoding
+
+    // set the desired codec (if suitable for contents)
+    QTextCodec *codec = check_valid_codec ();
+    if (! codec)
+      return;   // No valid codec
+
     // Get a list of breakpoint line numbers, before  exit_debug_and_clear().
     emit report_marker_linenr (_bp_lines, _bp_conditions);
 
     // get the absolute path (if existing)
     QFileInfo file_info = QFileInfo (saveFileName);
     QString file_to_save;
     if (file_info.exists ())
       {
@@ -2137,23 +2144,16 @@ namespace octave
                              QMessageBox::Ok, nullptr);
         show_dialog (msgBox, false);
 
         return;
       }
 
     // save the contents into the file
 
-    _encoding = _new_encoding;    // consider a possible new encoding
-
-    // set the desired codec (if suitable for contents)
-    QTextCodec *codec = check_valid_codec ();
-    if (! codec)
-      return;   // No valid codec
-
     // write the file
     QTextStream out (&file);
     out.setCodec (codec);
 
     QApplication::setOverrideCursor (Qt::WaitCursor);
     out << _edit_area->text ();
     out.flush ();
     QApplication::restoreOverrideCursor ();
@@ -2331,36 +2331,42 @@ namespace octave
       {
         QVector<uint> u32_str = editor_text.toUcs4 ();
         const uint32_t *src = reinterpret_cast<const uint32_t *>
                               (u32_str.data ());
 
         size_t length;
         char *res_str =
           octave_u32_conv_to_encoding_strict (_encoding.toStdString ().c_str (),
-                                              src, u32_str.size (), &length);
+                                              src, u32_str.length (), &length);
         if (! res_str)
           {
             if (errno == EILSEQ)
               can_encode = false;
           }
         else
           ::free (static_cast<void *> (res_str));
       }
 
     if (! can_encode)
       {
-        QMessageBox::critical (nullptr,
-                               tr ("Octave Editor"),
-                               tr ("The current editor contents can not be encoded\n"
-                                   "with the selected encoding %1.\n"
-                                   "Using it would result in data loss!\n\n"
-                                   "Please select another one!").arg (_encoding));
-
-        return nullptr;
+        QMessageBox::StandardButton pressed_button
+          = QMessageBox::critical (nullptr,
+                                   tr ("Octave Editor"),
+                                   tr ("The current editor contents can not be encoded\n"
+                                       "with the selected encoding %1.\n"
+                                       "Using it would result in data loss!\n\n"
+                                       "Please select another one!").arg (_encoding),
+                                   QMessageBox::Cancel | QMessageBox::Ignore,
+                                   QMessageBox::Cancel);
+
+        if (pressed_button == QMessageBox::Ignore)
+          return codec;
+        else
+          return nullptr;
       }
 
     return codec;
   }
 
   void file_editor_tab::handle_save_file_as_answer (const QString& saveFileName)
   {
     if (_save_as_desired_eol != _edit_area->eolMode ())
diff --git a/libinterp/corefcn/oct-map.h b/libinterp/corefcn/oct-map.h
--- a/libinterp/corefcn/oct-map.h
+++ b/libinterp/corefcn/oct-map.h
@@ -82,20 +82,23 @@ public:
       }
   }
 
   octave_fields (const octave_fields& o) : rep (o.rep) { rep->count++; }
 
   octave_fields&
   operator = (const octave_fields& o)
   {
-    o.rep->count++;
-    if (--rep->count == 0)
-      delete rep;
-    rep = o.rep;
+    if (&o != this)
+      {
+        o.rep->count++;
+        if (--rep->count == 0)
+          delete rep;
+        rep = o.rep;
+      }
 
     return *this;
   }
 
   // constant iteration support. non-const iteration intentionally unsupported.
 
   typedef std::map<std::string, octave_idx_type>::const_iterator const_iterator;
   typedef const_iterator iterator;
diff --git a/libinterp/dldfcn/__ode15__.cc b/libinterp/dldfcn/__ode15__.cc
--- a/libinterp/dldfcn/__ode15__.cc
+++ b/libinterp/dldfcn/__ode15__.cc
@@ -1127,36 +1127,34 @@ Undocumented internal function.
 
   // Check number of parameters
   int nargin = args.length ();
 
   if (nargin != 5)
     print_usage ();
 
   // Check odefun
-  octave_function *ida_fcn = nullptr;
-
   octave_value f_arg = args(0);
 
   if (! f_arg.is_function_handle ())
     error ("__ode15__: odefun must be a function handle");
 
-  ida_fcn = f_arg.function_value ();
+  octave_function *ida_fcn = f_arg.function_value ();
 
   // Check input tspan
   ColumnVector tspan
     = args(1).xvector_value ("__ode15__: TRANGE must be a vector of numbers");
 
   int numt = tspan.numel ();
 
   realtype t0 = tspan (0);
 
   if (numt < 2)
     error ("__ode15__: TRANGE must contain at least 2 elements");
-  else if (! tspan.issorted () || tspan(0) == tspan(numt - 1))
+  else if (tspan.issorted () == UNSORTED || tspan(0) == tspan(numt - 1))
     error ("__ode15__: TRANGE must be strictly monotonic");
 
   // input y0 and yp0
   ColumnVector y0
     = args(2).xvector_value ("__ode15__: initial state y0 must be a vector");
 
   ColumnVector yp0
     = args(3).xvector_value ("__ode15__: initial state yp0 must be a vector");
diff --git a/libinterp/dldfcn/audioread.cc b/libinterp/dldfcn/audioread.cc
--- a/libinterp/dldfcn/audioread.cc
+++ b/libinterp/dldfcn/audioread.cc
@@ -341,17 +341,16 @@ Comment.
       // problem and produces valid files.
       chunk_size = 0x100000;
     }
   else
     info.format = SF_FORMAT_PCM_16;
 
   info.channels = audio.columns ();
   info.samplerate = samplerate;
-  info.channels = audio.cols ();
   info.format |= extension_to_format (ext);
 
   std::string title = "";
   std::string artist = "";
   std::string comment = "";
   double quality = 0.75;
 
   for (int i = 3; i < nargin; i += 2)
diff --git a/libinterp/dldfcn/ccolamd.cc b/libinterp/dldfcn/ccolamd.cc
--- a/libinterp/dldfcn/ccolamd.cc
+++ b/libinterp/dldfcn/ccolamd.cc
@@ -417,19 +417,19 @@ colamd, csymamd, amd, colamd, symamd, an
   // Check for user-passed knobs
   if (nargin > 1)
     {
       NDArray User_knobs = args(1).array_value ();
       int nel_User_knobs = User_knobs.numel ();
 
       if (nel_User_knobs > 0)
         knobs[CCOLAMD_DENSE_ROW] = User_knobs(0);
-      if (nel_User_knobs > 0)
+      if (nel_User_knobs > 1)
         knobs[CCOLAMD_AGGRESSIVE] = User_knobs(1);
-      if (nel_User_knobs > 1)
+      if (nel_User_knobs > 2)
         spumoni = static_cast<int> (User_knobs(2));
 
       // print knob settings if spumoni is set
       if (spumoni)
         {
           octave_stdout << "\ncsymamd version " << CCOLAMD_MAIN_VERSION
                         << '.' << CCOLAMD_SUB_VERSION
                         << ", " << CCOLAMD_DATE << "\n";
diff --git a/libinterp/dldfcn/symbfact.cc b/libinterp/dldfcn/symbfact.cc
--- a/libinterp/dldfcn/symbfact.cc
+++ b/libinterp/dldfcn/symbfact.cc
@@ -156,17 +156,17 @@ Cholesky@tie{}factorization as determine
       A->xtype = CHOLMOD_COMPLEX;
 
       if (a.rows () > 0 && a.cols () > 0)
         A->x = a.data ();
     }
   else
     err_wrong_type_arg ("symbfact", args(0));
 
-  octave_idx_type coletree = false;
+  bool coletree = false;
   octave_idx_type n = A->nrow;
 
   if (nargin > 1)
     {
       std::string str = args(1).xstring_value ("TYP must be a string");
       // FIXME: The input validation could be improved to use strncmp
       char ch;
       ch = tolower (str[0]);
@@ -205,17 +205,17 @@ Cholesky@tie{}factorization as determine
   OCTAVE_LOCAL_BUFFER (octave::suitesparse_integer, First, n);
   OCTAVE_LOCAL_BUFFER (octave_idx_type, Level, n);
 
   cholmod_common Common;
   cholmod_common *cm = &Common;
   CHOLMOD_NAME(start) (cm);
 
   double spu = octave_sparse_params::get_key ("spumoni");
-  if (spu == 0.)
+  if (spu == 0.0)
     {
       cm->print = -1;
       SUITESPARSE_ASSIGN_FPTR (printf_func, cm->print_function, nullptr);
     }
   else
     {
       cm->print = static_cast<int> (spu) + 2;
       SUITESPARSE_ASSIGN_FPTR (printf_func, cm->print_function, &SparseCholPrint);
diff --git a/libinterp/octave-value/ov-base-scalar.h b/libinterp/octave-value/ov-base-scalar.h
--- a/libinterp/octave-value/ov-base-scalar.h
+++ b/libinterp/octave-value/ov-base-scalar.h
@@ -104,26 +104,26 @@ public:
                      sortmode) const
   {
     sidx.resize (dim_vector (1, 1));
     sidx(0) = 0;
     return octave_value (scalar);
   }
 
   sortmode issorted (sortmode mode = UNSORTED) const
-  { return mode ? mode : ASCENDING; }
+  { return mode == UNSORTED ? ASCENDING : mode; }
 
   Array<octave_idx_type> sort_rows_idx (sortmode) const
   {
     return Array<octave_idx_type> (dim_vector (1, 1),
                                    static_cast<octave_idx_type> (0));
   }
 
   sortmode is_sorted_rows (sortmode mode = UNSORTED) const
-  { return mode ? mode : ASCENDING; }
+  { return mode == UNSORTED ? ASCENDING : mode; }
 
   MatrixType matrix_type (void) const { return MatrixType::Diagonal; }
   MatrixType matrix_type (const MatrixType&) const
   { return matrix_type (); }
 
   bool is_scalar_type (void) const { return true; }
 
   bool isnumeric (void) const { return true; }
