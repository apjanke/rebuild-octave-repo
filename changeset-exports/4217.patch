# HG changeset patch
# User jwe
# Date 1039059181 0
#      Thu Dec 05 03:33:01 2002 +0000
# Node ID 301cc4cf87e9eb1819bb6049488b682693f37b2a
# Parent  e613ffa9f0e6a5064ef88bd5fef3bcbb7560a64a
[project @ 2002-12-05 03:33:01 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,17 @@
 2002-12-04  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* defaults.cc (maybe_add_or_del_packages, default_load_path,
+	update_load_path_dir_path): New static functions. 
+	(set_default_path, loadpath): Call update_load_path_dir_path.
+	(symbols_of_defaults): Use DEFVAR, not DEFCONST for DEFAULT_LOADPATH.
+	(execute_default_pkg_add_files): New function.
+	* defaults.h.in: Provide decl.
+
 	* utils.cc (search_path_for_all_files): New function.
 	(Ffile_in_loadpath, Ffile_in_path): Allow search to return all
 	files in the path.
 
 	* Cell.cc (Cell (const string_vector&)): New constructor.
 
 	* oct-obj.cc (octave_value_list::assign): Allow optional fill
 	value for resizing.
diff --git a/src/defaults.cc b/src/defaults.cc
--- a/src/defaults.cc
+++ b/src/defaults.cc
@@ -32,27 +32,31 @@ Software Foundation, 59 Temple Place - S
 #ifdef HAVE_UNISTD_H
 #ifdef HAVE_SYS_TYPES_H
 #include <sys/types.h>
 #endif
 #include <unistd.h>
 #endif
 
 #include "oct-env.h"
+#include "file-stat.h"
 #include "pathsearch.h"
+#include "str-vec.h"
 
 #include <defaults.h>
 #include "defun.h"
 #include "error.h"
 #include "file-ops.h"
 #include "gripes.h"
 #include "help.h"
 #include "oct-obj.h"
 #include "ov.h"
+#include "parse.h"
 #include "toplev.h"
+#include "unwind-prot.h"
 #include "variables.h"
 #include <version.h>
 
 std::string Voctave_home;
 
 std::string Vbin_dir;
 std::string Vinfo_dir;
 std::string Vdata_dir;
@@ -79,16 +83,93 @@ dir_path Vload_path_dir_path;
 // Name of the editor to be invoked by the edit_history command.
 std::string Veditor;
 
 std::string Vimagepath;
 
 std::string Vlocal_site_defaults_file;
 std::string Vsite_defaults_file;
 
+// Each element of A and B should be directory names.  For each
+// element of A not in the list B, execute SCRIPT_FILE in that
+// directory if it exists.
+
+static void
+maybe_add_or_del_packages (const string_vector& a,
+			   const string_vector& b,
+			   const std::string script_file)
+{
+  if (! octave_interpreter_ready)
+    return;
+
+  unwind_protect::begin_frame ("maybe_add_or_del_packages");
+
+  unwind_protect_bool (input_from_startup_file);
+
+  input_from_startup_file = true;
+
+  int a_len = a.length ();
+  int b_len = b.length ();
+
+  for (int i = 0; i < a_len; i++)
+    {
+      std::string a_dir = a[i];
+
+      bool found = false;
+
+      for (int j = 0; j < b_len; j++)
+	{
+	  if (b[j] == a_dir)
+	    {
+	      found = true;
+	      break;
+	    }
+	}
+
+      if (! found)
+	{
+	  std::string file = a_dir + file_ops::dir_sep_str + script_file;
+
+	  file_stat fs = file_stat (file);
+
+	  if (fs.exists ())
+	    parse_and_execute (file);
+
+	  if (error_state)
+	    return;
+	}
+    }
+
+  unwind_protect::run_frame ("maybe_add_or_del_packages");
+}
+
+static void
+update_load_path_dir_path (void)
+{
+  string_vector old_dirs = Vload_path_dir_path.all_directories ();
+
+  Vload_path_dir_path = dir_path (Vload_path, Vdefault_load_path);
+
+  string_vector new_dirs = Vload_path_dir_path.all_directories ();
+
+  maybe_add_or_del_packages (old_dirs, new_dirs, "PKG_DEL");
+
+  if (! error_state)
+    maybe_add_or_del_packages (new_dirs, old_dirs, "PKG_ADD");
+}
+
+void
+execute_default_pkg_add_files (void)
+{
+  string_vector old_dirs;
+  string_vector new_dirs = Vload_path_dir_path.all_directories ();
+  
+  maybe_add_or_del_packages (new_dirs, old_dirs, "PKG_ADD");
+}
+
 static std::string
 subst_octave_home (const std::string& s)
 {
   std::string retval;
 
   std::string prefix = OCTAVE_PREFIX;
 
   retval = s;
@@ -186,17 +267,17 @@ static void
 set_default_path (void)
 {
   Vdefault_load_path = subst_octave_home (OCTAVE_FCNFILEPATH);
 
   std::string oct_path = octave_env::getenv ("OCTAVE_PATH");
 
   Vload_path = oct_path.empty () ? std::string (":") : oct_path;
 
-  Vload_path_dir_path = dir_path (Vload_path, Vdefault_load_path);
+  update_load_path_dir_path ();
 }
 
 static void
 set_default_info_file (void)
 {
   std::string std_info_file = subst_octave_home (OCTAVE_INFOFILE);
 
   std::string oct_info_file = octave_env::getenv ("OCTAVE_INFO_FILE");
@@ -418,17 +499,39 @@ loadpath (void)
       // I'm not sure whether this causes more problems that it
       // solves...
       //      if (! (s[0] == ':' || s[s.length () - 1] == ':'
       //	     || s.find ("::") != NPOS))
       //	warning ("LOADPATH will ignore default load path");
 
       Vload_path = s;
 
-      Vload_path_dir_path = dir_path (Vload_path, Vdefault_load_path);
+      update_load_path_dir_path ();
+    }
+
+  return status;
+}
+
+static int
+default_load_path (void)
+{
+  int status = 0;
+
+  std::string s = builtin_string_variable ("DEFAULT_LOADPATH");
+
+  if (s.empty ())
+    {
+      gripe_invalid_value_specified ("DEFAULT_LOADPATH");
+      status = -1;
+    }
+  else
+    {
+      Vdefault_load_path = s;
+
+      update_load_path_dir_path ();
     }
 
   return status;
 }
 
 void
 symbols_of_defaults (void)
 {
@@ -491,17 +594,17 @@ To improve performance of recursive dire
 each directory that is to be searched recursively to contain\n\
 @emph{either} additional subdirectories @emph{or} function files, but\n\
 not a mixture of both.\n\
 \n\
 @xref{Organization of Functions}, for a description of the function file\n\
 directories that are distributed with Octave.\n\
 @end defvr");
 
-  DEFCONST (DEFAULT_LOADPATH, Vdefault_load_path,
+  DEFVAR (DEFAULT_LOADPATH, Vdefault_load_path, default_load_path,
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} DEFAULT_LOADPATH\n\
 A colon separated list of directories in which to search for function\n\
 files by default.  The value of this variable is also automatically\n\
 substituted for leading, trailing, or doubled colons that appear in the\n\
 built-in variable @code{LOADPATH}.\n\
 @end defvr");
   
diff --git a/src/defaults.h.in b/src/defaults.h.in
--- a/src/defaults.h.in
+++ b/src/defaults.h.in
@@ -181,16 +181,18 @@ extern dir_path Vload_path_dir_path;
 // Name of the editor to be invoked by the edit_history command.
 extern std::string Veditor;
 
 extern std::string Vimagepath;
 
 extern std::string Vlocal_site_defaults_file;
 extern std::string Vsite_defaults_file;
 
+extern void execute_default_pkg_add_files (void);
+
 extern std::string maybe_add_default_load_path (const std::string& pathstring);
 
 extern void install_defaults (void);
 
 #endif
 
 /*
 ;;; Local Variables: ***
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -508,16 +508,20 @@ octave_main (int argc, char **argv)
   initialize_command_input ();
 
   if (! inhibit_startup_message)
     std::cout << OCTAVE_STARTUP_MESSAGE "\n" << std::endl;
 
   if (traditional)
     maximum_braindamage ();
 
+  octave_interpreter_ready = true;
+
+  execute_default_pkg_add_files ();
+
   execute_startup_files ();
 
   command_history::read (false);
 
   if (! inhibit_startup_message && reading_startup_message_printed)
     std::cout << std::endl;
 
   // Avoid counting commands executed from startup files.
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -73,16 +73,20 @@ Software Foundation, 59 Temple Place - S
 #include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
 #include <version.h>
 
 // TRUE means we are exiting via the builtin exit or quit functions.
 static bool quitting_gracefully = false;
 
+// TRUE means we are ready to interpret commands, but not everything
+// is ready for interactive use.
+bool octave_interpreter_ready = false;
+
 // TRUE means we've processed all the init code and we are good to go.
 bool octave_initialized = false;
 
 // Current command to execute.
 tree_statement_list *global_command = 0;
 
 // Pointer to function that is currently being evaluated.
 octave_user_function *curr_function = 0;
diff --git a/src/toplev.h b/src/toplev.h
--- a/src/toplev.h
+++ b/src/toplev.h
@@ -46,16 +46,20 @@ do_octave_atexit (void);
 extern tree_statement_list *global_command;
 
 // Pointer to function that is currently being evaluated.
 extern octave_user_function *curr_function;
 
 // Original value of TEXMFDBS environment variable.
 extern std::string octave_original_texmfdbs;
 
+// TRUE means we are ready to interpret commands, but not everything
+// is ready for interactive use.
+extern bool octave_interpreter_ready;
+
 // TRUE means we've processed all the init code and we are good to go.
 extern bool octave_initialized;
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
