# HG changeset patch
# User Rik <rik@octave.org>
# Date 1498246339 25200
#      Fri Jun 23 12:32:19 2017 -0700
# Node ID 6fe13cd3543c62372f9a6d7583efccea631a859c
# Parent  8b5bc5e5f74bdbc9462390e24cb6100d7223c78c
Clean up lo-mappers.h, lo-mappers.cc.

* lo-mappers.h: Remove using std::FUNCTION lines.  Prefer to specifically
declare std:: namespace at point in code where function is used.  Specifically
call std::ceil rather than just ::ceil which leaves it up to the linker.

* lo-mappers.cc: Add explanatory comments to code.  Use constants from math.h
rather than calculating our own.  Place frexp code in alphabetical order in
list of functions.  Call std::acos, std::asin rather than ::acos, ::asin which
leaves decision to linker.  Use all upper case for constants in code.

* lo-specfun.cc: Replace asin with call to std::asin so that code compiles.

diff --git a/liboctave/numeric/lo-mappers.cc b/liboctave/numeric/lo-mappers.cc
--- a/liboctave/numeric/lo-mappers.cc
+++ b/liboctave/numeric/lo-mappers.cc
@@ -72,16 +72,18 @@ namespace octave
     }
 
     bool
     is_NaN_or_NA (const FloatComplex& x)
     {
       return (isnan (std::real (x)) || isnan (std::imag (x)));
     }
 
+    // Matlab returns a different phase for acos, asin then std library
+    // which requires a small function to remap the phase.
     Complex
     acos (const Complex& x)
     {
       Complex y = std::acos (x);
 
       if (std::imag (x) == 0.0 && std::real (x) > 1.0)
         return std::conj (y);
       else
@@ -116,36 +118,36 @@ namespace octave
       FloatComplex y = std::asin (x);
 
       if (std::imag (x) == 0.0f && std::real (x) > 1.0f)
         return std::conj (y);
       else
         return y;
     }
 
+    double frexp (double x, int *expptr)
+    {
+      return octave_frexp_wrapper (x, expptr);
+    }
+
+    float frexp (float x, int *expptr)
+    {
+      return octave_frexpf_wrapper (x, expptr);
+    }
+
     Complex
     log2 (const Complex& x)
     {
-#if defined (M_LN2)
-      static double ln2 = M_LN2;
-#else
-      static double ln2 = std::log (2.0);
-#endif
-      return std::log (x) / ln2;
+      return std::log (x) / M_LN2;
     }
 
     FloatComplex
     log2 (const FloatComplex& x)
     {
-#if defined (M_LN2)
-      static float ln2 = M_LN2;
-#else
-      static float ln2 = log (2.0f);
-#endif
-      return std::log (x) / ln2;
+      return std::log (x) / static_cast<float> (M_LN2);
     }
 
     double
     log2 (double x, int& exp)
     {
       return frexp (x, &exp);
     }
 
@@ -169,26 +171,16 @@ namespace octave
       float ax = std::abs (x);
       float lax = log2 (ax, exp);
       return (ax != lax) ? (x / ax) * lax : x;
     }
 
     bool negative_sign (double x) { return __lo_ieee_signbit (x); }
     bool negative_sign (float x) { return __lo_ieee_float_signbit (x); }
 
-    double frexp (double x, int *expptr)
-    {
-      return octave_frexp_wrapper (x, expptr);
-    }
-
-    float frexp (float x, int *expptr)
-    {
-      return octave_frexpf_wrapper (x, expptr);
-    }
-
     // Sometimes you need a large integer, but not always.
 
     octave_idx_type
     nint_big (double x)
     {
       if (x > std::numeric_limits<octave_idx_type>::max ())
         return std::numeric_limits<octave_idx_type>::max ();
       else if (x < std::numeric_limits<octave_idx_type>::min ())
@@ -230,24 +222,24 @@ namespace octave
         return std::numeric_limits<int>::min ();
       else
         return static_cast<int> ((x > 0.0f) ? (x + 0.5f) : (x - 0.5f));
     }
 
     Complex
     rc_acos (double x)
     {
-      return fabs (x) > 1.0 ? acos (Complex (x)) : Complex (::acos (x));
+      return fabs (x) > 1.0 ? acos (Complex (x)) : Complex (std::acos (x));
     }
 
     FloatComplex
     rc_acos (float x)
     {
       return fabsf (x) > 1.0f ? acos (FloatComplex (x))
-                              : FloatComplex (::acosf (x));
+                              : FloatComplex (std::acos (x));
     }
 
     Complex
     rc_acosh (double x)
     {
       return x < 1.0 ? acosh (Complex (x)) : Complex (acosh (x));
     }
 
@@ -255,17 +247,17 @@ namespace octave
     rc_acosh (float x)
     {
       return x < 1.0f ? acosh (FloatComplex (x)) : FloatComplex (acosh (x));
     }
 
     Complex
     rc_asin (double x)
     {
-      return fabs (x) > 1.0 ? asin (Complex (x)) : Complex (::asin (x));
+      return fabs (x) > 1.0 ? asin (Complex (x)) : Complex (std::asin (x));
     }
 
     FloatComplex
     rc_asin (float x)
     {
       return fabsf (x) > 1.0f ? asin (FloatComplex (x))
                               : FloatComplex (::asinf (x));
     }
@@ -281,55 +273,53 @@ namespace octave
     {
       return fabsf (x) > 1.0f ? atanh (FloatComplex (x))
                               : FloatComplex (atanh (x));
     }
 
     Complex
     rc_log (double x)
     {
-      const double pi = 3.14159265358979323846;
-      return x < 0.0 ? Complex (std::log (-x), pi) : Complex (std::log (x));
+      return x < 0.0 ? Complex (std::log (-x), M_PI) : Complex (std::log (x));
     }
 
     FloatComplex
     rc_log (float x)
     {
-      const float pi = 3.14159265358979323846f;
-      return x < 0.0f ? FloatComplex (std::log (-x), pi)
+      return x < 0.0f ? FloatComplex (std::log (-x), static_cast<float> (M_PI))
                       : FloatComplex (std::log (x));
     }
 
     Complex
     rc_log2 (double x)
     {
-      const double pil2 = 4.53236014182719380962; // = pi / log(2)
-      return x < 0.0 ? Complex (log2 (-x), pil2) : Complex (log2 (x));
+      const double PI_LN2 = 4.53236014182719380962;  // = pi / log(2)
+      return x < 0.0 ? Complex (log2 (-x), PI_LN2) : Complex (log2 (x));
     }
 
     FloatComplex
     rc_log2 (float x)
     {
-      const float pil2 = 4.53236014182719380962f; // = pi / log(2)
-      return x < 0.0f ? FloatComplex (log2 (-x), pil2)
+      const float PI_LN2 = 4.53236014182719380962f;  // = pi / log(2)
+      return x < 0.0f ? FloatComplex (log2 (-x), PI_LN2)
                       : FloatComplex (log2 (x));
     }
 
     Complex
     rc_log10 (double x)
     {
-      const double pil10 = 1.36437635384184134748; // = pi / log(10)
-      return x < 0.0 ? Complex (log10 (-x), pil10) : Complex (log10 (x));
+      const double PI_LN10 = 1.36437635384184134748;  // = pi / log(10)
+      return x < 0.0 ? Complex (log10 (-x), PI_LN10) : Complex (log10 (x));
     }
 
     FloatComplex
     rc_log10 (float x)
     {
-      const float pil10 = 1.36437635384184134748f; // = pi / log(10)
-      return x < 0.0f ? FloatComplex (log10 (-x), pil10)
+      const float PI_LN10 = 1.36437635384184134748f;  // = pi / log(10)
+      return x < 0.0f ? FloatComplex (log10 (-x), PI_LN10)
                       : FloatComplex (log10f (x));
     }
 
     Complex
     rc_sqrt (double x)
     {
       return x < 0.0 ? Complex (0.0, std::sqrt (-x)) : Complex (std::sqrt (x));
     }
diff --git a/liboctave/numeric/lo-mappers.h b/liboctave/numeric/lo-mappers.h
--- a/liboctave/numeric/lo-mappers.h
+++ b/liboctave/numeric/lo-mappers.h
@@ -69,28 +69,22 @@ namespace octave
 
     // Test for positive sign.
     inline bool positive_sign (double x) { return ! negative_sign (x); }
     inline bool positive_sign (float x) { return ! negative_sign (x); }
 
     extern OCTAVE_API Complex acos (const Complex& x);
     extern OCTAVE_API FloatComplex acos (const FloatComplex& x);
 
-    using std::acos;
-
     extern OCTAVE_API Complex asin (const Complex& x);
     extern OCTAVE_API FloatComplex asin (const FloatComplex& x);
 
-    using std::asin;
-
     inline Complex atan (const Complex& x) { return std::atan (x); }
     inline FloatComplex atan (const FloatComplex& x) { return std::atan (x); }
 
-    using std::atan;
-
     // C++ now provides versions of the following functions for arguments of
     // type std::complex<T> and T.  But some compilers (I'm looking at you,
     // clang) apparently don't get this right yet...  So we provide our own
     // wrappers for real-valued arguments.
 
     inline double arg (double x) { return signbit (x) ? M_PI : 0; }
     inline float arg (float x)
     {
@@ -144,17 +138,17 @@ namespace octave
     extern OCTAVE_API float log2 (float x, int& exp);
 
     extern OCTAVE_API Complex log2 (const Complex& x, int& exp);
     extern OCTAVE_API FloatComplex log2 (const FloatComplex& x, int& exp);
 
     inline double exp2 (double x) { return std::exp2 (x); }
     inline float exp2 (float x) { return std::exp2f (x); }
 
-    inline double ceil (double x) { return ::ceil (x); }
+    inline double ceil (double x) { return std::ceil (x); }
     inline float ceil (float x) { return ::ceilf (x); }
 
     template <typename T>
     std::complex<T>
     ceil (const std::complex<T>& x)
     {
       return std::complex<T> (ceil (std::real (x)), ceil (std::imag (x)));
     }
diff --git a/liboctave/numeric/lo-specfun.cc b/liboctave/numeric/lo-specfun.cc
--- a/liboctave/numeric/lo-specfun.cc
+++ b/liboctave/numeric/lo-specfun.cc
@@ -2467,17 +2467,17 @@ namespace octave
               err = 1;
               return;
             }
           Nn = n;
           for (ii = 1; n > 0; ii = ii*2, --n) ; // ii = pow(2,Nn)
           phi = ii*a[Nn]*u;
           for (n = Nn; n > 0; --n)
             {
-              phi = (asin ((c[n]/a[n])* sin (phi)) + phi)/2;
+              phi = (std::asin ((c[n]/a[n])* sin (phi)) + phi)/2;
             }
           sn = sin (phi);
           cn = cos (phi);
           dn = std::sqrt (1 - m*sn*sn);
         }
     }
 
     void
