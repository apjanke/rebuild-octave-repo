# HG changeset patch
# User Ben Abbott  <bpabbott@mac.com>
# Date 1371871136 -28800
#      Sat Jun 22 11:18:56 2013 +0800
# Node ID 286904321282c795254b6862291a6d5d43bd2488
# Parent  d749c9b588e56e76804b6326d0380cd1c269cff7
Use unmodified axes "position" and "outerposition" properties for legend().

legend.m: Preserve parent axes' initial "positon" and "outerposition" values.
Clear figure before each demo. Add demo.  (Bug # 36408).

diff --git a/scripts/plot/legend.m b/scripts/plot/legend.m
--- a/scripts/plot/legend.m
+++ b/scripts/plot/legend.m
@@ -254,17 +254,17 @@ function [hlegend2, hobjects2, hplot2, t
 
   if (nargs == 1)
     arg = varargin{1};
     if (ischar (arg))
       if (rows (arg) == 1)
         str = tolower (strtrim (arg));
         switch (str)
           case "off"
-            delete (hlegend);
+            delete (hlegend)
             return;
           case "hide"
             show = "off";
             nargs--;
           case "show"
             if (! isempty (hlegend))
               show = "on";
             else
@@ -415,18 +415,18 @@ function [hlegend2, hobjects2, hplot2, t
           endif
         endif  # elseif hggroup
       endfor   # for loop k = 1 : nkids
     endif      # else branch of if (have_labels)
 
     if (have_labels || ! have_dname)
       k = nkids;
       if (! have_labels)
-        varargin = arrayfun (@(x) sprintf ("data%d", x), [1:nkids]',
-          "uniformoutput", false);
+        varargin = arrayfun (@(x) sprintf ("data%d", x), [1:nkids]', 
+                             "uniformoutput", false);
         have_labels = true;
         nargs = nkids;
       endif
       for i = 1 : nargs
         arg = varargin{i};
         if (ischar (arg))
           typ = get (kids(k), "type");
           while (k > 0
@@ -506,17 +506,17 @@ function [hlegend2, hobjects2, hplot2, t
           endif
         endif
       endwhile
     endif
 
     if (isempty (hplots))
       if (! isempty (hlegend))
         fkids = get (fig, "children");
-        delete (fkids(fkids == hlegend));
+        delete_legend (fkids(fkids == hlegend));
         hlegend = [];
         hobjects = [];
         hplots  = [];
         text_strings = {};
       endif
     else
       ## Preserve the old legend if it exists
       if (! isempty (hlegend))
@@ -552,29 +552,36 @@ function [hlegend2, hobjects2, hplot2, t
 
       ## Get axis size and fontsize in points.
       ## Rely on listener to handle coversion.
       units = get (ca(1), "units");
       fontunits = get (ca(1), "fontunits");
       unwind_protect
         set (ca(1), "units", "points");
         set (ca(1), "fontunits", "points");
-        ca_pos = get (ca(1), "position");
-        ca_outpos = get (ca(1), "outerposition");
+        if (isempty (hlegend) || ! isprop (hlegend, "unmodified_axes_position"))
+          unmodified_axes_position = get (ca(1), "position");
+          unmodified_axes_outerposition = get (ca(1), "outerposition");
+        else
+          unmodified_axes_position = get (hlegend, "unmodified_axes_position");
+          unmodified_axes_outerposition = get (hlegend, ...
+            "unmodified_axes_outerposition");
+        endif
+        ca_pos = unmodified_axes_position;
+        ca_outpos = unmodified_axes_outerposition;
         ca_fontsize = get (ca(1), "fontsize");
       unwind_protect_cleanup
         set (ca(1), "units", units);
         set (ca(1), "fontunits", fontunits);
       end_unwind_protect
 
       ## Padding between legend entries horizontally and vertically
       xpad = 2;
       ypad = 2;
 
-      ## Length of line segments in the legend in points
       linelength = 15;
 
       ## Create the axis first
       ## FIXME hlegend should inherit properties from "ca"
       curaxes = get (fig, "currentaxes");
       unwind_protect
         ud = ancestor (hplots, "axes");
         if (!isscalar (ud))
@@ -658,22 +665,45 @@ function [hlegend2, hobjects2, hplot2, t
           txoffset = 2 * xpad + linelength;
         else
           xoffset = 2 * xpad + maxwidth;
           txoffset = xpad + maxwidth;
         endif
         ystep = (ypad + maxheight);
         yoffset = ystep / 2;
 
-        ## Place the legend in the desired position
+        ## Place the legend in the desired location
         if (strcmp (orientation, "vertical"))
           lpos = [0, 0, num2 * xstep, num1 * ystep];
         else
           lpos = [0, 0, num1 * xstep, num2 * ystep];
         endif
+
+        if (strcmp (get (fig, "__graphics_toolkit__"), "gnuplot"))
+          ## Gnuplot places the key (legend) at edge of the figure window.
+          ## OpenGL places the legend box at edge of the unmodified axes
+          ## position.
+          if (isempty (strfind (location, "east")))
+            extra_offset = unmodified_axes_outerposition(1) ...
+                         + unmodified_axes_outerposition(3) ...
+                         - unmodified_axes_position(1) ...
+                         - unmodified_axes_position(3);
+          else
+            extra_offset = unmodified_axes_position(1) ...
+                         - unmodified_axes_outerposition(1);
+          endif
+          ## FIXME - the "fontsize" is added to match the behavior of OpenGL.
+          ## This implies that a change in fontsize should trigger a listener
+          ## to update the legend.  The "2" was determined using a long legend
+          ## key in the absence of any subplots.
+          extra_offset = extra_offset - 2 * fontsize;
+        else
+          extra_offset = 0;
+        endif
+
         switch (location)
           case "north"
             if (outside)
               lpos = [ca_pos(1) + (ca_pos(3) - lpos(3)) / 2, ...
                       ca_outpos(2) + ca_outpos(4) - lpos(4) - ypad, lpos(3), ...
                       lpos(4)];
 
               new_pos = [ca_pos(1), ca_pos(2), ca_pos(3), ca_pos(4) - lpos(4)];
@@ -691,65 +721,74 @@ function [hlegend2, hobjects2, hplot2, t
               lpos = [ca_pos(1) + (ca_pos(3) - lpos(3)) / 2, ...
                       ca_pos(2) + ypad, lpos(3), lpos(4)];
             endif
           case "east"
             if (outside)
               lpos = [ca_outpos(1) + ca_outpos(3) - lpos(3) - ypad, ...
                       ca_pos(2) + (ca_pos(4) - lpos(4)) / 2, lpos(3), lpos(4)];
               new_pos = [ca_pos(1), ca_pos(2), ca_pos(3) - lpos(3), ca_pos(4)];
+              new_pos(3) = new_pos(3) + extra_offset;
             else
               lpos = [ca_pos(1) + ca_pos(3) - lpos(3) - ypad, ...
                       ca_pos(2) + (ca_pos(4) - lpos(4)) / 2, lpos(3), lpos(4)];
             endif
           case "west"
             if (outside)
               lpos = [ca_outpos(1) + ypad, ...
                       ca_pos(2) + (ca_pos(4) - lpos(4)) / 2, ...
                       lpos(3), lpos(4)];
               new_pos = [ca_pos(1) + lpos(3), ca_pos(2), ...
                          ca_pos(3) - lpos(3), ca_pos(4)];
+              new_pos(1) = new_pos(1) - extra_offset;
+              new_pos(3) = new_pos(3) + extra_offset;
             else
               lpos = [ca_pos(1) +  ypad, ...
                       ca_pos(2) + (ca_pos(4) - lpos(4)) / 2, lpos(3), lpos(4)];
             endif
           case "northeast"
             if (outside)
               lpos = [ca_outpos(1) + ca_outpos(3) - lpos(3) - ypad, ...
                       ca_pos(2) + ca_pos(4) - lpos(4), lpos(3), lpos(4)];
               new_pos = [ca_pos(1), ca_pos(2), ca_pos(3) - lpos(3), ca_pos(4)];
+              new_pos(3) = new_pos(3) + extra_offset;
             else
               lpos = [ca_pos(1) + ca_pos(3) - lpos(3) - ypad, ...
                       ca_pos(2) + ca_pos(4) - lpos(4) - ypad, lpos(3), lpos(4)];
             endif
           case "northwest"
             if (outside)
               lpos = [ca_outpos(1) + ypad , ca_pos(2) + ca_pos(4) - lpos(4), ...
                       lpos(3), lpos(4)];
               new_pos = [ca_pos(1) + lpos(3), ca_pos(2), ...
                          ca_pos(3) - lpos(3), ca_pos(4)];
+              new_pos(1) = new_pos(1) - extra_offset;
+              new_pos(3) = new_pos(3) + extra_offset;
             else
               lpos = [ca_pos(1) + ypad, ...
                       ca_pos(2) + ca_pos(4) - lpos(4) - ypad, lpos(3), lpos(4)];
             endif
           case "southeast"
             if (outside)
               lpos = [ca_outpos(1) + ca_outpos(3) - lpos(3) - ypad, ...
                       ca_pos(2), lpos(3), lpos(4)];
               new_pos = [ca_pos(1), ca_pos(2), ...
                          ca_pos(3) - lpos(3), ca_pos(4)];
+              new_pos(3) = new_pos(3) + extra_offset;
             else
               lpos = [ca_pos(1) + ca_pos(3) - lpos(3) - ypad, ...
                       ca_pos(2) + ypad, lpos(3), lpos(4)];
             endif
           case "southwest"
             if (outside)
               lpos = [ca_outpos(1) + ypad, ca_pos(2), lpos(3), lpos(4)];
               new_pos = [ca_pos(1) + lpos(3), ca_pos(2), ...
                          ca_pos(3) - lpos(3), ca_pos(4)];
+              new_pos(1) = new_pos(1) - extra_offset;
+              new_pos(3) = new_pos(3) + extra_offset;
             else
               lpos = [ca_pos(1) + ypad, ca_pos(2) + ypad, lpos(3), lpos(4)];
             endif
         endswitch
 
         units = get (hlegend, "units");
         unwind_protect
           set (hlegend, "units", "points");
@@ -822,20 +861,39 @@ function [hlegend2, hobjects2, hplot2, t
               xk = 0;
               yk++;
             endif
           endif
         endfor
 
         ## Add an invisible text object to original axis
         ## that when it is destroyed will remove the legend
-        t1 = text (0, 0, "", "parent", ca(1), "tag", "legend",
-                   "handlevisibility", "off", "visible", "off",
-                   "xliminclude", "off", "yliminclude", "off");
-        set (t1, "deletefcn", {@deletelegend1, hlegend});
+        props = {"parent", ca(1), "tag", "legend", ...
+                 "handlevisibility", "off", "visible", "off", ...
+                 "xliminclude", "off", "yliminclude", "off"};
+        t1 = findall (ca(1), props{:}, "type", "text");
+        if (isempty (t1))
+          ht = findall (ca(1), "type", "text", props{3:end});
+          if (! isempty (ht))
+            set (ht, "deletefcn", "")
+            delete (ht);
+          endif
+          t1 = text (0, 0, "", props{:});
+          set (t1, "deletefcn", {@deletelegend1, hlegend});
+        endif
+        if (isprop (hlegend, "unmodified_axes_position"))
+          set (hlegend, "unmodified_axes_position", unmodified_axes_position)
+          set (hlegend, "unmodified_axes_outerposition", 
+               unmodified_axes_outerposition)
+        else
+          addproperty ("unmodified_axes_position", hlegend,
+                       "data", unmodified_axes_position);
+          addproperty ("unmodified_axes_outerposition", hlegend,
+                       "data", unmodified_axes_outerposition);
+        endif
 
         ## Resize the axis that the legend is attached to if the
         ## legend is "outside" the plot and create a listener to
         ## resize axis to original size if the legend is deleted,
         ## hidden, or shown.
         if (outside)
           for i = 1 : numel (ca)
             units = get (ca(i), "units");
@@ -843,27 +901,33 @@ function [hlegend2, hobjects2, hplot2, t
               set (ca(i), "units", "points");
               set (ca(i), "position", new_pos);
             unwind_protect_cleanup
               set (ca(i), "units", units);
             end_unwind_protect
           endfor
 
           set (hlegend, "deletefcn", {@deletelegend2, ca, ...
-                                      ca_pos, ca_outpos, t1, hplots});
+                                      unmodified_axes_position, ...
+                                      unmodified_axes_outerposition, t1, hplots});
           addlistener (hlegend, "visible", {@hideshowlegend, ca, ...
-                                            ca_pos, new_pos});
+                                            unmodified_axes_position, new_pos});
         else
           set (hlegend, "deletefcn", {@deletelegend2, ca, [], [], t1, hplots});
         endif
 
         if (addprops)
           addproperty ("edgecolor", hlegend, "color", [0, 0, 0]);
           addproperty ("textcolor", hlegend, "color", [0, 0, 0]);
-          addproperty ("location", hlegend, "radio", "north|south|east|west|{northeast}|southeast|northwest|southwest|northoutside|southoutside|eastoutside|westoutside|northeastoutside|southeastoutside|northwestoutside|southwestoutside");
+          locations = {"north", "south", "east", "west", "{northeast}", ...
+            "southeast", "northwest", "southwest", "northoutside", ...
+            "southoutside", "eastoutside", "westoutside", ...
+            "northeastoutside", "southeastoutside", "northwestoutside", ...
+            "southwestoutside"};
+          addproperty ("location", hlegend, "radio", strjoin (locations, "|"));
           addproperty ("orientation", hlegend, "radio",
                        "{vertical}|horizontal");
           addproperty ("string", hlegend, "any", text_strings);
           addproperty ("textposition", hlegend, "radio", "{left}|right");
         else
           set (hlegend, "string", text_strings);
         endif
 
@@ -901,16 +965,29 @@ endfunction
 
 function updatelegend (h, d)
   persistent recursive = false;
   if (! recursive)
     recursive = true;
     unwind_protect
       hax = getfield (get (h, "userdata"), "handle");
       [hplots, text_strings] = __getlegenddata__ (h);
+      position = get (h, "unmodified_axes_position");
+      outerposition = get (h, "unmodified_axes_outerposition");
+      units = get (hax, "units");
+      set (hax, "units", "points")
+      switch get (hax, "activepositionproperty")
+      case "position"
+        set (hax, "outerposition", outerposition)
+        set (hax, "position", position)
+      case "outerposition"
+        set (hax, "position", position)
+        set (hax, "outerposition", outerposition)
+      endswitch
+      set (hax, "units", units)
       h = legend (hax, hplots, get (h, "string"));
     unwind_protect_cleanup
       recursive = false;
     end_unwind_protect
   endif
 endfunction
 
 function updatelegendtext (h, d)
@@ -1065,44 +1142,53 @@ function updateline (h, d, hlegend, line
             "markerfacecolor", get (h, "markerfacecolor"),
             "markersize", get (h, "markersize"), "linestyle", "none",
             "userdata", h, "parent", hlegend);
     endif
   endif
 endfunction
 
 %!demo
+%! clf ()
 %! plot (rand (2));
 %! title ('legend called with cellstr and string inputs for labels');
 %! h = legend ({'foo'}, 'bar');
+%! legend location northeastoutside
 %! set (h, 'fontsize', 20)
 
 %!demo
+%! clf ()
 %! plot (rand (3));
 %! title ('legend() without inputs creates default labels');
-%! legend ();
+%! h = legend ();
 
 %!demo
 %! clf;
 %! x = 0:1;
 %! plot (x,x,';I am Blue;', x,2*x, x,3*x,';I am Red;');
+%! legend location northeastoutside
+%! # Placing legend inside should return axes to original size
+%! legend location northeast
 %! title ('Blue and Red keys, with Green missing');
 
 %!demo
 %! clf;
 %! plot (1:10, 1:10, 1:10, fliplr (1:10));
 %! title ('incline is blue and decline is green');
 %! legend ({'I am blue', 'I am green'}, 'location', 'east');
+%! legend hide
+%! legend show
 
 %!demo
 %! clf;
 %! plot (1:10, 1:10, 1:10, fliplr (1:10));
 %! title ('Legend with keys in horizontal orientation');
 %! legend ({'I am blue', 'I am green'}, 'location', 'east', 'orientation', 'horizontal');
 %! legend boxoff;
+%! legend boxon
 
 %!demo
 %! clf;
 %! plot (1:10, 1:10, 1:10, fliplr (1:10));
 %! title ('Legend with box off');
 %! legend ({'I am blue', 'I am green'}, 'location', 'east');
 %! legend boxoff;
 
@@ -1111,45 +1197,47 @@ endfunction
 %! plot (1:10, 1:10, 1:10, fliplr (1:10));
 %! title ('Legend with text to the right of key');
 %! legend ({'I am blue', 'I am green'}, 'location', 'east');
 %! legend right;
 
 %!demo
 %! clf;
 %! plot (1:10, 1:10, 1:10, fliplr (1:10));
-%! title ('Using properties to have legend text shown to the right of key');
+%! title ({'Use properties to place legend text to the right of key', ...
+%!         'Legend text color is magenta'});
 %! h = legend ({'I am blue', 'I am green'}, 'location', 'east');
 %! legend ('left');
 %! set (h, 'textposition', 'right');
 %! set (h, 'textcolor', [1 0 1]);
 
 %!demo
 %! clf;
 %! plot (1:10, 1:10, 1:10, fliplr (1:10));
 %! title ('Legend is hidden')
 %! legend ({'I am blue', 'I am green'}, 'location', 'east');
 %! legend hide;
 
 %!demo
 %! clf;
 %! x = 0:1;
 %! plot (x,x,';I am Blue;', x,2*x,';I am Green;', x,3*x,';I am Red;');
-%! title ('labels embedded in call to plot');
+%! title ({'Labels are embedded in call to plot', ...
+%!         'Legend is hidden and then shown'});
 %! legend boxon
 %! legend hide
 %! legend show
 
 %!demo
 %! clf;
 %! x = 0:1;
 %! plot (x, x, ';\alpha;',  ...
 %!       x, 2*x, ';\beta=2\alpha;',  ...
 %!       x, 3*x, ';\gamma=3\alpha;');
-%! title ('labels with interpreted Greek text');
+%! title ('Labels with interpreted Greek text');
 
 %!demo
 %! clf;
 %! plot (rand (2));
 %! title ('Labels with TeX interpreter turned off');
 %! h = legend ('Hello_World', 'foo^bar');
 %! set (h, 'interpreter', 'none');
 
@@ -1270,31 +1358,69 @@ endfunction
 
 %!demo
 %! clf;
 %! plot (rand (2));
 %! title ('legend() will warn if extra labels are specified');
 %! legend ('Hello', 'World', 'interpreter', 'foobar');
 
 %!demo
+%! clf;
 %! x = 0:10;
 %! y1 = rand (size (x));
 %! y2 = rand (size (x));
 %! [ax, h1, h2] = plotyy (x, y1, x, y2);
 %! title ('plotyy legend test #1: Blue and Green labels');
 %! legend ([h1, h2], {'Blue', 'Green'}, 'location', 'south');
 
 %!demo
+%! clf;
 %! x = 0:10;
 %! y1 = rand (size (x));
 %! y2 = rand (size (x));
 %! [ax, h1, h2] = plotyy (x, y1, x, y2);
 %! title ('plotyy legend test #2: Blue and Green labels');
 %! legend ({'Blue', 'Green'}, 'location', 'south');
 
 %!demo
+%! clf;
 %! x = 0:10;
 %! y1 = rand (size (x));
 %! y2 = rand (size (x));
 %! [ax, h1, h2] = plotyy (x, y1, x, y2);
 %! title ('plotyy legend test #3: Blue and Green labels');
 %! legend ('Blue', 'Green', 'location', 'south');
 
+%!demo % bug 36408
+%! clf;
+%! option = "right";
+%! subplot (3,1,1)
+%! plot (rand (1,4));
+%! title ("Subplots should adjust to the legend placed outside")
+%! legend ({"1"}, "location", "northeastoutside")
+%! legend (option)
+%! subplot (3,1,2)
+%! plot (rand (1,4));
+%! legend ({"1234567890"}, "location", "eastoutside")
+%! legend (option)
+%! subplot (3,1,3)
+%! plot (rand (1,4));
+%! legend ({"12345678901234567890"}, "location", "southeastoutside")
+%! legend (option)
+
+%!demo % bug 36408
+%! clf;
+%! option = "right";
+%! subplot (3,1,1)
+%! plot (rand (1,4));
+%! title ("Subplots should adjust to the legend placed outside")
+%! legend ({"1"}, "location", "northwestoutside")
+%! legend (option)
+%! subplot (3,1,2)
+%! plot (rand (1,4));
+%! legend ({"1234567890"}, "location", "westoutside")
+%! legend (option)
+%! subplot (3,1,3)
+%! plot (rand (1,4));
+%! legend ({"12345678901234567890"}, "location", "southwestoutside")
+%! legend (option)
+
+
