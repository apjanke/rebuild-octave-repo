# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1254043601 -7200
#      Sun Sep 27 11:26:41 2009 +0200
# Node ID a531dec450c47863167e2856c7002aeb211e3d7c
# Parent  1dba57e9d08d1baa85701ddd9dc96bac0e5d5e1e
allow 1D case for sub2ind and ind2sub

diff --git a/liboctave/Array-util.cc b/liboctave/Array-util.cc
--- a/liboctave/Array-util.cc
+++ b/liboctave/Array-util.cc
@@ -491,17 +491,17 @@ struct sub2ind_helper
   void operator ()(octave_idx_type k) { (*ind++ *= n) += k; }
 };
 
 idx_vector sub2ind (const dim_vector& dv, const Array<idx_vector>& idxa)
 {
   idx_vector retval;
   octave_idx_type len = idxa.length ();
 
-  if (len >= 2)
+  if (len >= 1)
     {
       const dim_vector dvx = dv.redim (len);
       bool all_ranges = true;
       octave_idx_type clen = -1;
 
       for (octave_idx_type i = 0; i < len; i++)
         {
           idx_vector idx = idxa(i);
@@ -512,17 +512,19 @@ idx_vector sub2ind (const dim_vector& dv
             clen = idx.length (n);
           else if (clen != idx.length (n))
             current_liboctave_error_handler ("sub2ind: lengths of indices must match");
 
           if (idx.extent (n) > n)
             current_liboctave_error_handler ("sub2ind: index out of range");
         }
 
-      if (clen == 1)
+      if (len == 1)
+        retval = idxa(0);
+      else if (clen == 1)
         {
           // All scalars case - the result is a scalar.
           octave_idx_type idx = idxa(len-1)(0);
           for (octave_idx_type i = len - 2; i >= 0; i--)
             idx = idx * dvx(i) + idxa(i)(0);
           retval = idx_vector (idx);
         }
       else if (all_ranges && clen != 0)
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2009-09-27  Jaroslav Hajek  <highegg@gmail.com>
+
+	* dim-vector.h (dim_vector::redim): Rewrite.
+	* Array-util.cc (sub2ind): Allow single index case.
+
 2009-09-26  Jaroslav Hajek  <highegg@gmail.com>
 
 	* dMatrix.cc (xgemm): Use blas_trans_type to indicate transposes.
 	(operator *(const Matrix&, const Matrix&)): Update.
 	* fMatrix.cc (xgemm): Use blas_trans_type to indicate transposes.
 	(operator *(const FloatMatrix&, const FloatMatrix&)): Update.
 	* CMatrix.cc (xgemm): Use blas_trans_type to indicate transposes.
 	(operator *(const ComplexMatrix&, const ComplexMatrix&)): Update.
diff --git a/liboctave/dim-vector.h b/liboctave/dim-vector.h
--- a/liboctave/dim-vector.h
+++ b/liboctave/dim-vector.h
@@ -457,40 +457,49 @@ public:
   // set to 1, redundant are folded into the trailing one. If n = 1, the result
   // is 2d and the second dim is 1 (dim_vectors are always at least 2D).
   // If the original dimensions were all zero, the padding value is zero.
   dim_vector redim (int n) const
     {
       int n_dims = length ();
       if (n_dims == n)
         return *this;
-      else
+      else if (n_dims < n)
         {
-          dim_vector retval;
-          retval.resize (n == 1 ? 2 : n, 1);
-          
-          bool zeros = true;
-          for (int i = 0; i < n && i < n_dims; i++)
+          dim_vector retval = alloc (n);
+
+          int pad = 0;
+          for (int i = 0; i < n_dims; i++)
             {
-              retval(i) = elem (i);
-              zeros = zeros && elem (i) == 0;
+              retval.rep[i] = rep[i];
+              if (rep[i] != 0)
+                pad = 1;
             }
 
-          if (n < n_dims)
-            {
-              octave_idx_type k = 1;
-              for (int i = n; i < n_dims; i++)
-                k *= elem (i);
-              retval(n - 1) *= k;
-            }
-          else if (zeros)
-            {
-              for (int i = n_dims; i < n; i++)
-                retval.elem (i) = 0;
-            }
+          for (int i = n_dims; i < n; i++)
+            retval.rep[i] = pad;
+
+          return retval;
+        }
+      else
+        {
+          if (n < 1) n = 1;
+
+          dim_vector retval = alloc (n);
+
+          retval.rep[1] = 1;
+
+          for (int i = 0; i < n-1; i++)
+            retval.rep[i] = rep[i];
+
+          int k = rep[n-1];
+          for (int i = n; i < n_dims; i++)
+            k *= rep[i];
+
+          retval.rep[n-1] = k;
 
           return retval;
         }
     }
 
   bool is_vector (void) const
     {
       return (length () == 2 && (elem (0) == 1 || elem (1) == 1));
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2009-09-27  Jaroslav Hajek  <highegg@gmail.com>
+
+	* DLD-FUNCTIONS/sub2ind.cc (get_dimensions): Allow singleton array.
+	(Fsub2ind): Allow single index.
+
 2009-09-26  Jaroslav Hajek  <highegg@gmail.com>
 
 	* OPERATORS/op-m-m.cc (trans_mul, mul_trans): Update.
 	* OPERATORS/op-fm-fm.cc (trans_mul, mul_trans): Update.
 	* OPERATORS/op-cm-cm.cc (trans_mul, mul_trans, herm_mul, mul_herm): Update.
 	* OPERATORS/op-fcm-fcm.cc (trans_mul, mul_trans, herm_mul, mul_herm): Update.
 	* OPERATORS/op-m-cm.cc (trans_mul): Update.
 	* OPERATORS/op-cm-m.cc (mul_trans): Update.
diff --git a/src/DLD-FUNCTIONS/sub2ind.cc b/src/DLD-FUNCTIONS/sub2ind.cc
--- a/src/DLD-FUNCTIONS/sub2ind.cc
+++ b/src/DLD-FUNCTIONS/sub2ind.cc
@@ -35,22 +35,23 @@ along with Octave; see the file COPYING.
 static dim_vector 
 get_dim_vector (const octave_value& val,
                 const char *name)
 {
   RowVector dimsv = val.row_vector_value (false, true);
   dim_vector dv;
   octave_idx_type n = dimsv.length ();
 
-  if (n < 2)
-    error ("%s: dimension vector must have at least 2 elements", name);
+  if (n < 1)
+    error ("%s: dimension vector must not be empty", name);
   else
     {
-      dv.resize (n);
-      for (octave_idx_type i = 0; i < dimsv.length (); i++)
+      dv.resize (std::max (n, 2));
+      dv(1) = 1;
+      for (octave_idx_type i = 0; i < n; i++)
         {
           octave_idx_type ii = static_cast<int> (dimsv(i));
           if (ii == dimsv(i) && ii >= 0)
             dv(i) = ii;
           else
             {
               error ("%s: dimension vector must contain integers", name);
               break;
@@ -79,23 +80,22 @@ linear_index = sub2ind ([3, 3], 2, 3)\n\
 @end group\n\
 @end example\n\
 @seealso{ind2sub}\n\
 @end deftypefn")
 {
   int nargin = args.length ();
   octave_value retval;
 
-  if (nargin < 3)
+  if (nargin < 2)
     print_usage ();
   else
     {
       dim_vector dv = get_dim_vector (args(0), "sub2ind");
       Array<idx_vector> idxa (nargin - 1);
-      dim_vector idims;
 
       if (! error_state)
         {
           dv = dv.redim (nargin - 1);
           for (int j = 0; j < nargin - 1; j++)
             {
               if (args(j+1).is_numeric_type ())
                 {
