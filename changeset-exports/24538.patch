# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1515259394 18000
#      Sat Jan 06 12:23:14 2018 -0500
# Node ID 2b273df71aa0b9a4e500d355b5b6b75ef853ed76
# Parent  11729ca6eb81ffde907261d0a5332aecd3921c78
allow experimenting with thread_local storage

* mk-octave-config-h.sh, oct-conf-post.in.h:
Define OCTAVE_THREAD_LOCAL.

* interpreter.h, interpreter.cc (interpreter::instance):
Tag with OCTAVE_THREAD_LOCAL.  Note that error message should be
changed when a thread_local interpreter object is really possible.

diff --git a/build-aux/mk-octave-config-h.sh b/build-aux/mk-octave-config-h.sh
--- a/build-aux/mk-octave-config-h.sh
+++ b/build-aux/mk-octave-config-h.sh
@@ -172,16 +172,21 @@ fi
 
 cat << EOF
 
 typedef $octave_idx_type octave_idx_type;
 typedef $octave_f77_int_type octave_f77_int_type;
 
 #  define OCTAVE_HAVE_F77_INT_TYPE 1
 
+
+#  if defined (__cplusplus) && ! defined (OCTAVE_THREAD_LOCAL)
+#    define OCTAVE_THREAD_LOCAL
+#  endif
+
 EOF
 
 if grep "#define OCTAVE_ENABLE_FLOAT_TRUNCATE 1" $config_h_file > /dev/null; then
   echo "#  define OCTAVE_FLOAT_TRUNCATE volatile"
 else
   echo "#  define OCTAVE_FLOAT_TRUNCATE"
 fi
 
diff --git a/libinterp/corefcn/interpreter.cc b/libinterp/corefcn/interpreter.cc
--- a/libinterp/corefcn/interpreter.cc
+++ b/libinterp/corefcn/interpreter.cc
@@ -362,19 +362,24 @@ namespace octave
       m_read_site_files (true),
       m_read_init_files (m_app_context != nullptr),
       m_verbose (false),
       m_inhibit_startup_message (false),
       m_load_path_initialized (false),
       m_history_initialized (false),
       m_initialized (false)
   {
+    // FIXME: When thread_local storage is used by default, this message
+    // should change to say something like
+    //
+    //   only one Octave interpreter may be active in any given thread
+
     if (instance)
       throw std::runtime_error
-        ("only one Octave interpreter object may be active");
+        ("only one Octave interpreter may be active");
 
     instance = this;
 
     // Matlab uses "C" locale for LC_NUMERIC class regardless of local setting
     setlocale (LC_NUMERIC, "C");
     setlocale (LC_TIME, "C");
     sys::env::putenv ("LC_NUMERIC", "C");
     sys::env::putenv ("LC_TIME", "C");
@@ -524,17 +529,17 @@ namespace octave
     // some PKG_ADD files might need --traditional behavior.
 
     if (traditional)
       maximum_braindamage ();
 
     octave_interpreter_ready = true;
   }
 
-  interpreter *interpreter::instance = nullptr;
+  OCTAVE_THREAD_LOCAL interpreter *interpreter::instance = nullptr;
 
   interpreter::~interpreter (void)
   {
     cleanup ();
   }
 
   void interpreter::intern_nargin (octave_idx_type nargs)
   {
diff --git a/libinterp/corefcn/interpreter.h b/libinterp/corefcn/interpreter.h
--- a/libinterp/corefcn/interpreter.h
+++ b/libinterp/corefcn/interpreter.h
@@ -202,18 +202,24 @@ namespace octave
 
     static bool remove_atexit_function (const std::string& fname);
 
     static interpreter * the_interpreter (void) { return instance; }
 
   private:
 
     // The interpreter instance;  Currently it is only possible to
-    // have one.
-    static interpreter *instance;
+    // have one, so OCTAVE_THREAD_LOCAL will normally be defined to be
+    // empty.  Eventually we would like to allow multiple interpreters
+    // to be active at once, but they will still be limited to one per
+    // thread.  When that is possible, OCTAVE_THREAD_LOCAL can be
+    // replaced by the C++ thread_local keyword.  For now, use a macro
+    // to allow experimenting with thread_local storage.
+
+    OCTAVE_THREAD_LOCAL static interpreter *instance;
 
     static std::list<std::string> atexit_functions;
 
     void display_startup_message (void) const;
 
     int execute_startup_files (void) const;
 
     int execute_eval_option_code (void);
diff --git a/oct-conf-post.in.h b/oct-conf-post.in.h
--- a/oct-conf-post.in.h
+++ b/oct-conf-post.in.h
@@ -200,14 +200,18 @@ typedef unsigned long ino_t;
 #  include <stdint.h>
 #endif
 
 typedef OCTAVE_IDX_TYPE octave_idx_type;
 typedef OCTAVE_F77_INT_TYPE octave_f77_int_type;
 
 #define OCTAVE_HAVE_F77_INT_TYPE 1
 
+#if defined (__cplusplus) && ! defined (OCTAVE_THREAD_LOCAL)
+#  define OCTAVE_THREAD_LOCAL
+#endif
+
 /* Tag indicating Octave's autoconf-generated config.h has been
    included.  This symbol is provided because autoconf-generated
    config.h files do not define a multiple-inclusion guard.  See also
    the notes at the top of the generated octave-config.h file.  */
 
 #define OCTAVE_AUTOCONFIG_H_INCLUDED 1
