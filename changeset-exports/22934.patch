# HG changeset patch
# User Carlo de Falco <carlo.defalco@polimi.it>
# Date 1482484131 -3600
#      Fri Dec 23 10:08:51 2016 +0100
# Node ID bb452f84a299dfe7773a889c2217f66e651de57f
# Parent  c3428bb9aca9a0f8bc5351a2ab4b6211e8d17c06
Fix printing of solution stats in ode23/ode45 solvers (bug #49918).

* ode23.m, ode45.m : print statistics even if nargout != 0.
In BIST tests, use evalc when Stats are 'on' to capture output rather than
printing to screen.  Adjust some indentation, phrasing of comments to fit
better onscreen.

diff --git a/scripts/ode/ode23.m b/scripts/ode/ode23.m
--- a/scripts/ode/ode23.m
+++ b/scripts/ode/ode23.m
@@ -246,22 +246,20 @@ function varargout = ode23 (fun, trange,
   ## Print additional information if option Stats is set
   if (strcmp (odeopts.Stats, "on"))
     nsteps    = solution.cntloop;             # cntloop from 2..end
     nfailed   = solution.cntcycles - nsteps;  # cntcycl from 1..end
     nfevals   = 3 * solution.cntcycles + 1;   # number of ode evaluations
     ndecomps  = 0;  # number of LU decompositions
     npds      = 0;  # number of partial derivatives
     nlinsols  = 0;  # no. of solutions of linear systems
-    ## Print cost statistics if no output argument is given
-    if (nargout == 0)
-      printf ("Number of successful steps: %d\n", nsteps);
-      printf ("Number of failed attempts:  %d\n", nfailed);
-      printf ("Number of function calls:   %d\n", nfevals);
-    endif
+
+    printf ("Number of successful steps: %d\n", nsteps);
+    printf ("Number of failed attempts:  %d\n", nfailed);
+    printf ("Number of function calls:   %d\n", nfevals);
   endif
 
   if (nargout == 2)
     varargout{1} = solution.t;      # Time stamps are first output argument
     varargout{2} = solution.x;      # Results are second output argument
   elseif (nargout == 1)
     varargout{1}.x = solution.t.';   # Time stamps are saved in field x (row vector)
     varargout{1}.y = solution.x.';   # Results are saved in field y (row vector)
@@ -314,41 +312,39 @@ endfunction
 %! ylabel ("err(h)");
 %! title ("Convergence plot for ode23");
 %! legend ("imposed tolerance", "ode23 (relative) error",
 %!         "order 2", "order 3", "location", "northwest");
 %!
 %! ## Estimate order numerically
 %! p = diff (log (err)) ./ diff (log (h))
 
-## We are using the "Van der Pol" implementation for all tests that are done
-## for this function.
-## For further tests we also define a reference solution (computed at high
-## accuracy)
+## We are using the Van der Pol equation for all tests.
+## Further tests also define a reference solution (computed at high accuracy)
 %!function ydot = fpol (t, y)  # The Van der Pol ODE
 %!  ydot = [y(2); (1 - y(1)^2) * y(2) - y(1)];
 %!endfunction
 %!function ref = fref ()       # The computed reference sol
 %!  ref = [0.32331666704577, -1.83297456798624];
 %!endfunction
 %!function [val, trm, dir] = feve (t, y, varargin)
-%!  val = fpol (t, y, varargin);    # We use the derivatives
-%!  trm = zeros (2,1);              # that's why component 2
-%!  dir = ones (2,1);               # does not seem to be exact
+%!  val = fpol (t, y, varargin);  # We use the derivatives
+%!  trm = zeros (2,1);            # that's why component 2
+%!  dir = ones (2,1);             # does not seem to be exact
 %!endfunction
 %!function [val, trm, dir] = fevn (t, y, varargin)
-%!  val = fpol (t, y, varargin);    # We use the derivatives
-%!  trm = ones (2,1);               # that's why component 2
-%!  dir = ones (2,1);               # does not seem to be exact
+%!  val = fpol (t, y, varargin);  # We use the derivatives
+%!  trm = ones (2,1);             # that's why component 2
+%!  dir = ones (2,1);             # does not seem to be exact
 %!endfunction
 %!function mas = fmas (t, y, varargin)
-%!  mas = [1, 0; 0, 1];             # Dummy mass matrix for tests
+%!  mas = [1, 0; 0, 1];           # Dummy mass matrix for tests
 %!endfunction
 %!function mas = fmsa (t, y, varargin)
-%!  mas = sparse ([1, 0; 0, 1]);    # A sparse dummy matrix
+%!  mas = sparse ([1, 0; 0, 1]);  # A sparse dummy matrix
 %!endfunction
 %!function out = fout (t, y, flag, varargin)
 %!  out = false;
 %!  if (strcmp (flag, "init"))
 %!    if (! isequal (size (t), [2, 1]))
 %!      error ('fout: step "init"');
 %!    endif
 %!  elseif (isempty (flag))
@@ -428,17 +424,18 @@ endfunction
 %! opt = odeset ("NonNegative", 2);
 %! sol = ode23 (@fpol, [0 2], [2 0], opt);
 %! assert ([sol.x(end); sol.y(:,end)], [2; 2; 0], 1e-1);
 %!test  # Details of OutputSel and Refine can't be tested
 %! opt = odeset ("OutputFcn", @fout, "OutputSel", 1, "Refine", 5);
 %! sol = ode23 (@fpol, [0 2], [2 0], opt);
 %!test  # Stats must add further elements in sol
 %! opt = odeset ("Stats", "on");
-%! sol = ode23 (@fpol, [0 2], [2 0], opt);
+%! stat_str = evalc ("sol = ode23 (@fpol, [0 2], [2 0], opt);");
+%! assert (strncmp (stat_str, "Number of successful steps:", 27));
 %! assert (isfield (sol, "stats"));
 %! assert (isfield (sol.stats, "nsteps"));
 %!test  # Events option add further elements in sol
 %! opt = odeset ("Events", @feve);
 %! sol = ode23 (@fpol, [0 10], [2 0], opt);
 %! assert (isfield (sol, "ie"));
 %! assert (sol.ie(1), 2);
 %! assert (isfield (sol, "xe"));
diff --git a/scripts/ode/ode45.m b/scripts/ode/ode45.m
--- a/scripts/ode/ode45.m
+++ b/scripts/ode/ode45.m
@@ -239,30 +239,28 @@ function varargout = ode45 (fun, trange,
   ## Print additional information if option Stats is set
   if (strcmp (odeopts.Stats, "on"))
     nsteps    = solution.cntloop;             # cntloop from 2..end
     nfailed   = solution.cntcycles - nsteps;  # cntcycl from 1..end
     nfevals   = 6 * solution.cntcycles + 1;   # number of ode evaluations
     ndecomps  = 0;  # number of LU decompositions
     npds      = 0;  # number of partial derivatives
     nlinsols  = 0;  # no. of linear systems solutions
-    ## Print cost statistics if no output argument is given
-    if (nargout == 0)
-      printf ("Number of successful steps: %d\n", nsteps);
-      printf ("Number of failed attempts:  %d\n", nfailed);
-      printf ("Number of function calls:   %d\n", nfevals);
-    endif
+
+    printf ("Number of successful steps: %d\n", nsteps);
+    printf ("Number of failed attempts:  %d\n", nfailed);
+    printf ("Number of function calls:   %d\n", nfevals);
   endif
 
   if (nargout == 2)
     varargout{1} = solution.t;      # Time stamps are first output argument
     varargout{2} = solution.x;      # Results are second output argument
   elseif (nargout == 1)
-    varargout{1}.x = solution.t.';   # Time stamps are saved in field x (row vector)
-    varargout{1}.y = solution.x.';   # Results are saved in field y (row vector)
+    varargout{1}.x = solution.t.';  # Time stamps saved in field x (row vector)
+    varargout{1}.y = solution.x.';  # Results are saved in field y (row vector)
     varargout{1}.solver = solver;   # Solver name is saved in field solver
     if (! isempty (odeopts.Events))
       varargout{1}.ie = solution.event{2};  # Index info which event occurred
       varargout{1}.xe = solution.event{3};  # Time info when an event occurred
       varargout{1}.ye = solution.event{4};  # Results when an event occurred
     endif
     if (strcmp (odeopts.Stats, "on"))
       varargout{1}.stats = struct ();
@@ -307,41 +305,39 @@ endfunction
 %! ylabel ("err(h)");
 %! title ("Convergence plot for ode45");
 %! legend ("imposed tolerance", "ode45 (relative) error",
 %!         "order 4", "order 5", "location", "northwest");
 %!
 %! ## Estimate order numerically
 %! p = diff (log (err)) ./ diff (log (h))
 
-## We are using the Van der Pol equation for all tests that are done
-## for this function.
-## For further tests we also define a reference solution (computed at high
-## accuracy)
+## We are using the Van der Pol equation for all tests.
+## Further tests also define a reference solution (computed at high accuracy)
 %!function ydot = fpol (t, y)  # The Van der Pol ODE
 %!  ydot = [y(2); (1 - y(1)^2) * y(2) - y(1)];
 %!endfunction
 %!function ref = fref ()       # The computed reference solution
 %!  ref = [0.32331666704577, -1.83297456798624];
 %!endfunction
 %!function [val, trm, dir] = feve (t, y, varargin)
-%!  val = fpol (t, y, varargin);    # We use the derivatives
-%!  trm = zeros (2,1);              # that's why component 2
-%!  dir = ones (2,1);               # does not seem to be exact
+%!  val = fpol (t, y, varargin);  # We use the derivatives
+%!  trm = zeros (2,1);            # that's why component 2
+%!  dir = ones (2,1);             # does not seem to be exact
 %!endfunction
 %!function [val, trm, dir] = fevn (t, y, varargin)
-%!  val = fpol (t, y, varargin);    # We use the derivatives
-%!  trm = ones (2,1);               # that's why component 2
-%!  dir = ones (2,1);               # does not seem to be exact
+%!  val = fpol (t, y, varargin);  # We use the derivatives
+%!  trm = ones (2,1);             # that's why component 2
+%!  dir = ones (2,1);             # does not seem to be exact
 %!endfunction
 %!function mas = fmas (t, y, varargin)
-%!  mas = [1, 0; 0, 1];            # Dummy mass matrix for tests
+%!  mas = [1, 0; 0, 1];           # Dummy mass matrix for tests
 %!endfunction
 %!function mas = fmsa (t, y, varargin)
-%!  mas = sparse ([1, 0; 0, 1]);   # A sparse dummy matrix
+%!  mas = sparse ([1, 0; 0, 1]);  # A sparse dummy matrix
 %!endfunction
 %!function out = fout (t, y, flag, varargin)
 %!  out = false;
 %!  if (strcmp (flag, "init"))
 %!    if (! isequal (size (t), [2, 1]))
 %!      error ('fout: step "init"');
 %!    endif
 %!  elseif (isempty (flag))
@@ -437,17 +433,18 @@ endfunction
 %! opt = odeset ("NonNegative", 2);
 %! sol = ode45 (@fpol, [0 2], [2 0], opt);
 %! assert ([sol.x(end); sol.y(:,end)], [2; 2; 0], 0.5);
 %!test  # Details of OutputSel and Refine can't be tested
 %! opt = odeset ("OutputFcn", @fout, "OutputSel", 1, "Refine", 5);
 %! sol = ode45 (@fpol, [0 2], [2 0], opt);
 %!test  # Stats must add further elements in sol
 %! opt = odeset ("Stats", "on");
-%! sol = ode45 (@fpol, [0 2], [2 0], opt);
+%! stat_str = evalc ("sol = ode45 (@fpol, [0 2], [2 0], opt);");
+%! assert (strncmp (stat_str, "Number of successful steps:", 27));
 %! assert (isfield (sol, "stats"));
 %! assert (isfield (sol.stats, "nsteps"));
 %!test  # Events option add further elements in sol
 %! opt = odeset ("Events", @feve);
 %! sol = ode45 (@fpol, [0 10], [2 0], opt);
 %! assert (isfield (sol, "ie"));
 %! assert (sol.ie(1), 2);
 %! assert (isfield (sol, "xe"));
