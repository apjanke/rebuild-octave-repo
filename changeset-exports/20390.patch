# HG changeset patch
# User Lachlan Andrew <lachlanbis@gmail.com>
# Date 1437774018 25200
#      Fri Jul 24 14:40:18 2015 -0700
# Node ID 41d19a6ef55a46b8005fef83d21cee8e8e7bb794
# Parent  6bc09e953927d8a9052e88ba71ad7cd5ce54ae8b
Allow assignment of an empty variable to an empty indexing slice (bug #45467).

* Array.cc (Array<T>::assign): For 2-D case, check that neither the LHS or RHS
is empty before calling gripe_assignment_dimension_mismatch().

* Array.cc (Array<T>::assign): For N-D case, check that neither the LHS or RHS
is empty before calling gripe_assignment_dimension_mismatch().

diff --git a/liboctave/array/Array.cc b/liboctave/array/Array.cc
--- a/liboctave/array/Array.cc
+++ b/liboctave/array/Array.cc
@@ -1178,16 +1178,17 @@ Array<T>::assign (const idx_vector& i, c
           else
             i.assign (rhs.data (), n, fortran_vec ());
         }
     }
   else
     gripe_invalid_assignment_size ();
 }
 
+// Assignment to a 2-dimensional array
 template <class T>
 void
 Array<T>::assign (const idx_vector& i, const idx_vector& j,
                   const Array<T>& rhs, const T& rfv)
 {
   bool initial_dims_all_zero = dimensions.all_zero ();
 
   // Get RHS extents, discarding singletons.
@@ -1276,20 +1277,22 @@ Array<T>::assign (const idx_vector& i, c
               else
                 {
                   for (octave_idx_type k = 0; k < jl; k++)
                     src += i.assign (src, r, dest + r * j.xelem (k));
                 }
             }
         }
     }
-  else
+  // any empty RHS can be assigned to an empty LHS
+  else if ((il != 0 && jl != 0) || (rhdv(0) != 0 && rhdv(1) != 0))
     gripe_assignment_dimension_mismatch ();
 }
 
+// Assignment to a multi-dimensional array
 template <class T>
 void
 Array<T>::assign (const Array<idx_vector>& ia,
                   const Array<T>& rhs, const T& rfv)
 {
   int ial = ia.numel ();
 
   // FIXME: is this dispatching necessary / desirable?
@@ -1379,17 +1382,29 @@ Array<T>::assign (const Array<idx_vector
               // Do it.
               if (isfill)
                 rh.fill (rhs(0), fortran_vec ());
               else
                 rh.assign (rhs.data (), fortran_vec ());
             }
         }
       else
-        gripe_assignment_dimension_mismatch ();
+        {
+          // dimension mismatch, unless LHS and RHS both empty
+          bool lhsempty, rhsempty;
+          lhsempty = rhsempty = false;
+          for (int i = 0; i < ial; i++)
+            {
+              octave_idx_type l = ia(i).length (rdv(i));
+              lhsempty = lhsempty || (l == 0);
+              rhsempty = rhsempty || (rhdv(j++) == 0);
+            }
+          if (! lhsempty || ! rhsempty)
+            gripe_assignment_dimension_mismatch ();
+        }
     }
 }
 
 template <class T>
 void
 Array<T>::delete_elements (const idx_vector& i)
 {
   octave_idx_type n = numel ();
