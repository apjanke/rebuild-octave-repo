# HG changeset patch
# User jwe
# Date 975543551 0
#      Thu Nov 30 00:19:11 2000 +0000
# Node ID 35daf9714b9adc6711eb609c0e176a21a8327b83
# Parent  078fde449ebcaf0772e573e057b914d36b9e256a
[project @ 2000-11-30 00:19:10 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,14 @@
 2000-11-29  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* defun.h (DEFUNX): New macro.
+	* defun-int.h (DEFUNX_INTERNAL, DECLARE_FUNX): New macro.
+	(DECLARE_FUN): Define in terms of DECLARE_FUNX.
+
 	* mkdefs: Read and print one line at a time, so we can force
 	patterns to match only at the beginning of a line.
 
 	* defun-int.h (UNDERSCORIFY): Omit `##' in macro definition since
 	they are not needed to paste strings together and picky compilers
 	choke on them.
 
 2000-11-17  John W. Eaton  <jwe@bevo.che.wisc.edu>
diff --git a/src/defun-int.h b/src/defun-int.h
--- a/src/defun-int.h
+++ b/src/defun-int.h
@@ -57,19 +57,22 @@ install_builtin_constant (const std::str
 extern void
 install_dld_function (octave_dld_function::fcn f, const std::string& name,
 		      const octave_shlib& shl,
 		      const std::string& doc, bool is_text_fcn = false);
 
 extern void
 alias_builtin (const std::string& alias, const std::string& name);
 
-#define DECLARE_FUN(name, args_name, nargout_name) \
+#define DECLARE_FUNX(name, args_name, nargout_name) \
   octave_value_list \
-  F ## name (const octave_value_list& args_name, int nargout_name)
+  name (const octave_value_list& args_name, int nargout_name)
+
+#define DECLARE_FUN(name, args_name, nargout_name) \
+  DECLARE_FUNX (F ## name, args_name, nargout_name)
 
 // Define the code that will be used to insert the new function into
 // the symbol table.  We look for this name instead of the actual
 // function so that we can easily install the doc std::string too.
 
 typedef bool (*octave_dld_fcn_installer) (const octave_shlib&);
 
 #define DEFINE_FUN_INSTALLER_FUN(name, doc) \
@@ -91,16 +94,22 @@ typedef bool (*octave_dld_fcn_installer)
 // mkdefs will create a .def file for every .cc file that uses DEFUN,
 // or DEFUN_TEXT.
 
 #define DEFUN_INTERNAL(name, args_name, nargout_name, is_text_fcn, doc) \
   BEGIN_INSTALL_BUILTIN \
     XDEFUN_INTERNAL (name, args_name, nargout_name, is_text_fcn, doc) \
   END_INSTALL_BUILTIN
 
+#define DEFUNX_INTERNAL(name, fname, args_name, nargout_name, \
+			is_text_fcn, doc) \
+  BEGIN_INSTALL_BUILTIN \
+    XDEFUN_INTERNAL (name, args_name, nargout_name, is_text_fcn, doc) \
+  END_INSTALL_BUILTIN
+
 // Generate code to install name in the symbol table.  The script
 // mkdefs will create a .def file for every .cc file that uses
 // DEFUN_DLD.
 
 #define DEFUN_DLD_INTERNAL(name, args_name, nargout_name, is_text_fcn, doc) \
   BEGIN_INSTALL_BUILTIN \
     XDEFUN_DLD_INTERNAL (name, args_name, nargout_name, is_text_fcn, doc) \
   END_INSTALL_BUILTIN
@@ -139,16 +148,20 @@ typedef bool (*octave_dld_fcn_installer)
 #else /* ! MAKE_BUILTINS */
 
 // Generate the first line of the function definition.  This ensures
 // that the internal functions all have the same signature.
 
 #define DEFUN_INTERNAL(name, args_name, nargout_name, is_text_fcn, doc) \
   DECLARE_FUN (name, args_name, nargout_name)
 
+#define DEFUNX_INTERNAL(name, fname, args_name, nargout_name, \
+			is_text_fcn, doc) \
+  DECLARE_FUNX (fname, args_name, nargout_name)
+
 // No definition is required for an alias.
 
 #define DEFALIAS_INTERNAL(name, alias)
 
 // How builtin variables are actually installed.
 
 #define DEFVAR_INTERNAL(name, sname, defn, protect, chg_fcn, doc) \
   install_builtin_variable (name, octave_value (defn), protect, \
diff --git a/src/defun.h b/src/defun.h
--- a/src/defun.h
+++ b/src/defun.h
@@ -55,17 +55,17 @@ Software Foundation, 59 Temple Place - S
 // retain its original value when cleared) and also an alias to it
 // called `__name__' (which may not be redefined).
 
 #define DEFCONST(name, defn, doc) \
   DEFCONST_INTERNAL (name, defn, doc)
 
 // This one can be used when `name' cannot be used directly (if it is
 // already defined as a macro).  In that case, name is already a
-// quoted string, and the name of the structure has to be passed too.
+// quoted string, and the name of the structure must to be passed too.
 
 #define DEFCONSTX(name, sname, defn, doc) \
   DEFCONSTX_INTERNAL (name, sname, defn, doc)
 
 // Define a builtin function.
 //
 //   name is the name of the function, unqouted.
 //
@@ -75,16 +75,24 @@ Software Foundation, 59 Temple Place - S
 //   nargout_name is the name of the int variable used to pass the
 //     number of output arguments this function is expected to produce.
 //
 //   doc is the simple help text for the function.
 
 #define DEFUN(name, args_name, nargout_name, doc) \
   DEFUN_INTERNAL (name, args_name, nargout_name, false, doc)
 
+// This one can be used when `name' cannot be used directly (if it is
+// already defined as a macro).  In that case, name is already a
+// quoted string, and the internal name of the function must be passed
+// too (the convetion is to use a prefix of "F", so "foo" becomes "Ffoo").
+
+#define DEFUNX(name, fname, args_name, nargout_name, doc) \
+  DEFUNX_INTERNAL (name, fname, args_name, nargout_name, false, doc)
+
 // Define a builtin text-style function.
 //
 // This is like DEFUN, except that it defines a function that can be
 // called from the Octave language without using parenthesis to
 // surround the arguments). 
 
 #define DEFUN_TEXT(name, args_name, nargout_name, doc) \
   DEFUN_INTERNAL (name, args_name, nargout_name, true, doc)
diff --git a/src/ov-usr-fcn.cc b/src/ov-usr-fcn.cc
--- a/src/ov-usr-fcn.cc
+++ b/src/ov-usr-fcn.cc
@@ -481,17 +481,17 @@ octave_user_function::bind_automatic_var
 {
   if (! arg_names.empty ())
     argn_sr->define (arg_names);
 
   nargin_sr->define (static_cast<double> (nargin));
   nargout_sr->define (static_cast<double> (nargout));
 }
 
-DEFUN (va_arg, args, ,
+DEFUNX ("va_arg", Fva_arg, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} va_arg ()\n\
 Return the value of hte next available argument and move the internal\n\
 pointer to the next argument.  It is an error to call @code{va_arg}\n\
 when ther eare no more arguments available, or in a function that\n\
 has not been declared to take a variable number of parameters.\n\
 @end deftypefn")
 {
