# HG changeset patch
# User Michael Goffioul <michael.goffioul@gmail.com>
# Date 1225331789 14400
#      Wed Oct 29 21:56:29 2008 -0400
# Node ID 2368aa769ab9312b6473cf68dc1f7fec4b8e9d91
# Parent  f3dbea0e8a1ddf2ac4fece92f8c00af048e78438
Work around missing std::complex members under MSVC

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,14 @@
+2008-10-29  Michael Goffioul  <michael.goffioul@gmail.com>
+
+	* lo-specfun.cc (cbesj, cbesy, cbesi, cbesk, cbesh1, cbesh2): Do not
+	use std::complex::real() and std::complex::imag() as l-value, this is
+	not supported under MSVC.
+
 2008-10-28  John W. Eaton  <jwe@octave.org>
 
 	* lo-specfun.cc: Fix prototypes for the Fortran subroutines cbesh,
 	cbesi, cbesj, cbesk, and cbesy.
 	(cbesh, cbesi, cbesj, cbesk, cbesy): Fix calls to Fortran
 	subroutines.
 
 2008-10-28  Brian Gough  <bjg@gnu.org>
diff --git a/liboctave/lo-specfun.cc b/liboctave/lo-specfun.cc
--- a/liboctave/lo-specfun.cc
+++ b/liboctave/lo-specfun.cc
@@ -1294,23 +1294,22 @@ cbesj (const FloatComplex& z, float alph
       FloatComplex y = 0.0;
 
       octave_idx_type nz;
 
       F77_FUNC (cbesj, CBESJ) (z, alpha, 2, 1, &y, nz, ierr);
 
       if (kode != 2)
 	{
-	  float expz = exp (std::abs (imag (z))); 
-	  y.real () *= expz;
-	  y.imag () *= expz;
+	  float expz = exp (std::abs (imag (z)));
+	  y *= expz;
 	}
 
       if (imag (z) == 0.0 && real (z) >= 0.0)
-	y.imag () = 0.0;
+	y = FloatComplex (y.real (), 0.0);
 
       retval = bessel_return_value (y, ierr);
     }
   else if (is_integer_value (alpha))
     {
       // zbesy can overflow as z->0, and cause troubles for generic case below
       alpha = -alpha;
       FloatComplex tmp = cbesj (z, alpha, kode, ierr);
@@ -1358,22 +1357,21 @@ cbesy (const FloatComplex& z, float alph
 	}
       else
 	{
 	  F77_FUNC (cbesy, CBESY) (z, alpha, 2, 1, &y, nz, &w, ierr);
 
 	  if (kode != 2)
 	    {
 	      float expz = exp (std::abs (imag (z)));
-	      y.real () *= expz;
-	      y.imag () *= expz;
+	      y *= expz;
 	    }
 
 	  if (imag (z) == 0.0 && real (z) >= 0.0)
-	    y.imag () = 0.0;
+	    y = FloatComplex (y.real (), 0.0);
 	}
 
       return bessel_return_value (y, ierr);
     }
   else if (is_integer_value (alpha - 0.5))
     {
       // zbesy can overflow as z->0, and cause troubles for generic case below
       alpha = -alpha;
@@ -1416,17 +1414,17 @@ cbesi (const FloatComplex& z, float alph
 
       if (kode != 2)
 	{
 	  float expz = exp (std::abs (real (z)));
 	  y *= expz;
 	}
 
       if (imag (z) == 0.0 && real (z) >= 0.0)
-	y.imag () = 0.0;
+	y = FloatComplex (y.real (), 0.0);
 
       retval = bessel_return_value (y, ierr);
     }
   else
     {
       alpha = -alpha;
 
       FloatComplex tmp = cbesi (z, alpha, kode, ierr);
@@ -1476,24 +1474,24 @@ cbesk (const FloatComplex& z, float alph
 
 	  if (kode != 2)
 	    {
 	      FloatComplex expz = exp (-z);
 
 	      float rexpz = real (expz);
 	      float iexpz = imag (expz);
 
-	      float tmp = real (y) * rexpz - imag (y) * iexpz;
-
-	      y.imag () = real (y) * iexpz + imag (y) * rexpz;
-	      y.real () = tmp;
+	      float tmp_r = real (y) * rexpz - imag (y) * iexpz;
+	      float tmp_i = real (y) * iexpz + imag (y) * rexpz;
+
+	      y = FloatComplex (tmp_r, tmp_i);
 	    }
 
 	  if (imag (z) == 0.0 && real (z) >= 0.0)
-	    y.imag () = 0.0;
+	    y = FloatComplex (y.real (), 0.0);
 	}
 
       retval = bessel_return_value (y, ierr);
     }
   else
     {
       FloatComplex tmp = cbesk (z, -alpha, kode, ierr);
 
@@ -1518,20 +1516,20 @@ cbesh1 (const FloatComplex& z, float alp
 
       if (kode != 2)
 	{
 	  FloatComplex expz = exp (FloatComplex (0.0, 1.0) * z);
 
 	  float rexpz = real (expz);
 	  float iexpz = imag (expz);
 
-	  float tmp = real (y) * rexpz - imag (y) * iexpz;
-
-	  y.imag () = real (y) * iexpz + imag (y) * rexpz;
-	  y.real () = tmp;
+	  float tmp_r = real (y) * rexpz - imag (y) * iexpz;
+	  float tmp_i = real (y) * iexpz + imag (y) * rexpz;
+
+	  y = FloatComplex (tmp_r, tmp_i);
 	}
 
       retval = bessel_return_value (y, ierr);
     }
   else
     {
       alpha = -alpha;
 
@@ -1560,20 +1558,20 @@ cbesh2 (const FloatComplex& z, float alp
 
       if (kode != 2)
 	{
 	  FloatComplex expz = exp (-FloatComplex (0.0, 1.0) * z);
 
 	  float rexpz = real (expz);
 	  float iexpz = imag (expz);
 
-	  float tmp = real (y) * rexpz - imag (y) * iexpz;
-
-	  y.imag () = real (y) * iexpz + imag (y) * rexpz;
-	  y.real () = tmp;
+	  float tmp_r = real (y) * rexpz - imag (y) * iexpz;
+	  float tmp_i = real (y) * iexpz + imag (y) * rexpz;
+
+	  y = FloatComplex (tmp_r, tmp_i);
 	}
 
       retval = bessel_return_value (y, ierr);
     }
   else
     {
       alpha = -alpha;
 
