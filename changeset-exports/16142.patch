# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1361997649 18000
#      Wed Feb 27 15:40:49 2013 -0500
# Node ID 26d65d677557e51693849a4dc136b357ea5e8e77
# Parent  c6b2409672e9271eb12e4b2c9f92f229416682db
rename yyerror to bison_error and make it a member of octave_parser class

* parse.h, oct-parse.yy (octave_parser::bison_error): New function
derived from yyerror.  Change all explicit calls of yyerror to call
bison_error instead.
(yyerror): Forward to bison_error for the current parser.

diff --git a/libinterp/parse-tree/oct-parse.yy b/libinterp/parse-tree/oct-parse.yy
--- a/libinterp/parse-tree/oct-parse.yy
+++ b/libinterp/parse-tree/oct-parse.yy
@@ -150,19 +150,17 @@ static octave_function *primary_fcn_ptr 
 static symbol_table::scope_id primary_fcn_scope;
 
 // List of autoloads (function -> file mapping).
 static std::map<std::string, std::string> autoload_map;
 
 // Forward declarations for some functions defined at the bottom of
 // the file.
 
-// Generic error messages.
-static void
-yyerror (const char *s);
+static void yyerror (const char *s);
 
 // Finish building a statement.
 template <class T>
 static tree_statement *
 make_statement (T *arg)
 {
   octave_comment_list *comment = octave_comment_buffer::get_comment ();
 
@@ -1037,17 +1035,17 @@ push_fcn_symtab : // empty
 
                     function_scopes.push_back (symbol_table::current_scope ());
 
                     if (! reading_script_file && current_function_depth == 1
                         && ! parsing_subfunctions)
                       primary_fcn_scope = symbol_table::current_scope ();
 
                     if (reading_script_file && current_function_depth > 1)
-                      yyerror ("nested functions not implemented in this context");
+                      curr_parser->bison_error ("nested functions not implemented in this context");
                   }
                 ;
 
 // ===========================
 // List of function parameters
 // ===========================
 
 param_list_beg  : '('
@@ -1073,17 +1071,17 @@ param_list_end  : ')'
 
 param_list      : param_list_beg param_list1 param_list_end
                   {
                     curr_lexer->quote_is_transpose = false;
                     $$ = $2;
                   }
                 | param_list_beg error
                   {
-                    yyerror ("invalid parameter list");
+                    curr_parser->bison_error ("invalid parameter list");
                     $$ = 0;
                     ABORT_PARSE;
                   }
                 ;
 
 param_list1     : // empty
                   { $$ = 0; }
                 | param_list2
@@ -1243,38 +1241,38 @@ function_end    : END
                     else
                       ABORT_PARSE;
                   }
                 | END_OF_INPUT
                   {
 // A lot of tests are based on the assumption that this is OK
 //                  if (reading_script_file)
 //                    {
-//                      yyerror ("function body open at end of script");
+//                      curr_parser->bison_error ("function body open at end of script");
 //                      YYABORT;
 //                    }
 
                     if (endfunction_found)
                       {
-                        yyerror ("inconsistent function endings -- "
+                        curr_parser->bison_error ("inconsistent function endings -- "
                                  "if one function is explicitly ended, "
                                  "so must all the others");
                         YYABORT;
                       }
 
                     if (! (reading_fcn_file || reading_script_file
                            || get_input_from_eval_string))
                       {
-                        yyerror ("function body open at end of input");
+                        curr_parser->bison_error ("function body open at end of input");
                         YYABORT;
                       }
 
                     if (reading_classdef_file)
                       {
-                        yyerror ("classdef body open at end of input");
+                        curr_parser->bison_error ("classdef body open at end of input");
                         YYABORT;
                       }
 
                     $$ = curr_parser->make_end ("endfunction",
                                                 curr_lexer->input_line_number,
                                                 curr_lexer->current_input_column);
                   }
                 ;
@@ -1440,17 +1438,17 @@ class_enum      : identifier '(' express
 // Miscellaneous
 // =============
 
 stash_comment   : // empty
                   { $$ = octave_comment_buffer::get_comment (); }
                 ;
 
 parse_error     : LEXICAL_ERROR
-                  { yyerror ("parse error"); }
+                  { curr_parser->bison_error ("parse error"); }
                 | error
                 ;
 
 sep_no_nl       : ','
                   { $$ = ','; }
                 | ';'
                   { $$ = ';'; }
                 | sep_no_nl ','
@@ -1493,16 +1491,22 @@ opt_comma       : // empty
 
 %%
 
 // Generic error messages.
 
 static void
 yyerror (const char *s)
 {
+  curr_parser->bison_error (s);
+}
+
+void
+octave_parser::bison_error (const char *s)
+{
   int err_col = curr_lexer->current_input_column - 1;
 
   std::ostringstream output_buf;
 
   if (reading_fcn_file || reading_script_file || reading_classdef_file)
     output_buf << "parse error near line " << curr_lexer->input_line_number
                << " of file " << curr_fcn_file_full_name;
   else
@@ -1607,17 +1611,17 @@ octave_parser::end_token_ok (token *tok,
   bool retval = true;
 
   token::end_tok_type ettype = tok->ettype ();
 
   if (ettype != expected && ettype != token::simple_end)
     {
       retval = false;
 
-      yyerror ("parse error");
+      bison_error ("parse error");
 
       int l = tok->line ();
       int c = tok->column ();
 
       switch (expected)
         {
         case token::classdef_end:
           end_error ("classdef", ettype, l, c);
@@ -2319,17 +2323,17 @@ octave_parser::make_for_command (int tok
           retval = new tree_simple_for_command (parfor, tmp, expr, maxproc,
                                                 body, lc, tc, l, c);
 
           delete lhs;
         }
       else
         {
           if (parfor)
-            yyerror ("invalid syntax for parfor statement");
+            bison_error ("invalid syntax for parfor statement");
           else
             retval = new tree_complex_for_command (lhs, expr, body,
                                                    lc, tc, l, c);
         }
     }
 
   return retval;
 }
@@ -2573,17 +2577,17 @@ octave_parser::make_assign_op (int op, t
 
       retval = new tree_simple_assignment (tmp, rhs, false, l, c, t);
 
       delete lhs;
     }
   else if (t == octave_value::op_asn_eq)
     return new tree_multi_assignment (lhs, rhs, false, l, c);
   else
-    yyerror ("computed multiple assignment not allowed");
+    bison_error ("computed multiple assignment not allowed");
 
   return retval;
 }
 
 // Define a script.
 
 void
 octave_parser::make_script (tree_statement_list *cmds,
@@ -2852,17 +2856,17 @@ octave_parser::recover_from_parsing_func
 tree_index_expression *
 octave_parser::make_index_expression (tree_expression *expr,
                                       tree_argument_list *args, char type)
 {
   tree_index_expression *retval = 0;
 
   if (args && args->has_magic_tilde ())
     {
-      yyerror ("invalid use of empty argument (~) in index expression");
+      bison_error ("invalid use of empty argument (~) in index expression");
       return retval;
     }
 
   int l = expr->line ();
   int c = expr->column ();
 
   expr->mark_postfix_indexed ();
 
@@ -2970,17 +2974,17 @@ octave_parser::make_decl_command (int to
 
   return retval;
 }
 
 tree_argument_list *
 octave_parser::validate_matrix_row (tree_argument_list *row)
 {
   if (row && row->has_magic_tilde ())
-    yyerror ("invalid use of tilde (~) in matrix expression");
+    bison_error ("invalid use of tilde (~) in matrix expression");
   return row;
 }
 
 // Finish building a matrix list.
 
 tree_expression *
 octave_parser::finish_matrix (tree_matrix *m)
 {
diff --git a/libinterp/parse-tree/parse.h b/libinterp/parse-tree/parse.h
--- a/libinterp/parse-tree/parse.h
+++ b/libinterp/parse-tree/parse.h
@@ -321,16 +321,19 @@ public:
   // Create a statement list.
   tree_statement_list *make_statement_list (tree_statement *stmt);
 
   // Append a statement to an existing statement list.
   tree_statement_list *
   append_statement_list (tree_statement_list *list, char sep,
                          tree_statement *stmt, bool warn_missing_semi);
 
+  // Generic error messages.
+  void bison_error (const char *s);
+
   // TRUE means that we have encountered EOF on the input stream.
   bool end_of_input;
 
   // For unwind protect.
   static void cleanup (octave_parser *parser) { delete parser; }
 
 private:
 
