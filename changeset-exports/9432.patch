# HG changeset patch
# User Robert T. Short <octave@phaselockedsystems.com>
# Date 1247680280 14400
#      Wed Jul 15 13:51:20 2009 -0400
# Node ID 8cc2d087f3c1969812011dfdc7f0c6cdbae67d77
# Parent  78cc9a8fac6d7ed8de22fc08bbe66ee3d3000a7b
src/DLD-FUNCTIONS/filter.cc: new tests

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2009-07-15  Robert T. Short  <octave@phaselockedsystems.com>
+
+	* DLD-FUNCTIONS/filter.cc: New tests.
+
 2009-07-09  John W. Eaton  <jwe@octave.org>
 
 	* data.cc (Fones, Fzeros, Ftrue, Ffalse): Update docstrings.
 
 2009-07-08  John W. Eaton  <jwe@octave.org>
 
 	* graphics.cc (convert_cdata): Return NaN for NaN values in cdata.
 
diff --git a/src/DLD-FUNCTIONS/filter.cc b/src/DLD-FUNCTIONS/filter.cc
--- a/src/DLD-FUNCTIONS/filter.cc
+++ b/src/DLD-FUNCTIONS/filter.cc
@@ -685,12 +685,70 @@ filter (MArray<float>&, MArray<float>&, 
 template MArrayN<FloatComplex>
 filter (MArray<FloatComplex>&, MArray<FloatComplex>&, MArrayN<FloatComplex>&,
 	MArrayN<FloatComplex>&, int dim);
 
 template MArrayN<FloatComplex>
 filter (MArray<FloatComplex>&, MArray<FloatComplex>&, MArrayN<FloatComplex>&, int dim);
 
 /*
+%!shared a, b, x, r
+%!test
+%!  a = [1 1];
+%!  b = [1 1];
+%!  x = zeros(1,10); x(1) = 1;
+%!  assert(all(filter(b,   [1], x  ) == [1 1 0 0 0 0 0 0 0 0]  ))
+%!  assert(all(filter(b,   [1], x.') == [1 1 0 0 0 0 0 0 0 0].'))
+%!  assert(all(filter(b.', [1], x  ) == [1 1 0 0 0 0 0 0 0 0]  ))
+%!  assert(all(filter(b.', [1], x.') == [1 1 0 0 0 0 0 0 0 0].'))
+%!  assert(all(filter([1], a,   x  ) == [+1 -1 +1 -1 +1 -1 +1 -1 +1 -1]  ))
+%!  assert(all(filter([1], a,   x.') == [+1 -1 +1 -1 +1 -1 +1 -1 +1 -1].'))
+%!  assert(all(filter([1], a.', x  ) == [+1 -1 +1 -1 +1 -1 +1 -1 +1 -1]  ))
+%!  assert(all(filter([1], a.', x.') == [+1 -1 +1 -1 +1 -1 +1 -1 +1 -1].'))
+%!  assert(all(filter(b,   a,   x  ) == [1 0 0 0 0 0 0 0 0 0]  ))
+%!  assert(all(filter(b.', a,   x  ) == [1 0 0 0 0 0 0 0 0 0]  ))
+%!  assert(all(filter(b,   a.', x  ) == [1 0 0 0 0 0 0 0 0 0]  ))
+%!  assert(all(filter(b.', a,   x  ) == [1 0 0 0 0 0 0 0 0 0]  ))
+%!  assert(all(filter(b,   a,   x.') == [1 0 0 0 0 0 0 0 0 0].'))
+%!  assert(all(filter(b.', a,   x.') == [1 0 0 0 0 0 0 0 0 0].'))
+%!  assert(all(filter(b,   a.', x.') == [1 0 0 0 0 0 0 0 0 0].'))
+%!  assert(all(filter(b.', a,   x.') == [1 0 0 0 0 0 0 0 0 0].'))
+%!
+%!test
+%!  r = sqrt(1/2)*(1+i);
+%!  a = a*r;
+%!  b = b*r;
+%!  assert(all(filter(b, [1], x   ) == r*[1 1 0 0 0 0 0 0 0 0]   ))
+%!  assert(all(filter(b, [1], r*x ) == r*r*[1 1 0 0 0 0 0 0 0 0] ))
+%!  assert(all(filter(b, [1], x.' ) == r*[1 1 0 0 0 0 0 0 0 0].' ))
+%!  assert(all(filter(b, a,   x   ) ==   [1 0 0 0 0 0 0 0 0 0]   ))
+%!  assert(all(filter(b, a,   r*x ) == r*[1 0 0 0 0 0 0 0 0 0]   ))
+%!
+%!shared a, b, x, y, so
+%!test
+%!  a = [1,1]; b=[1,1];
+%!  x = zeros(1,10); x(1) = 1;
+%!  [y, so] = filter(b, [1], x, [-1]);
+%!  assert(all(y == [0 1 0 0 0 0 0 0 0 0]))
+%!  assert(so,0)
+%!
+%!test
+%!  x  = zeros(10,3); x(1,1)=-1; x(1,2)=1;
+%!  y0 = zeros(10,3); y0(1:2,1)=-1; y0(1:2,2)=1;
+%!  y = filter(b,[1],x);
+%!  assert(all(all(y==y0)))
+%!
+%!test
+%!  a = [1,1]; b=[1,1];
+%!  x = zeros(4,4,2); x(1,1:4,1) = +1; x(1,1:4,2) = -1;
+%!  y0 = zeros(4,4,2); y0(1:2,1:4,1) = +1; y0(1:2,1:4,2) = -1;
+%!  y = filter(b, [1], x);
+%!  assert(all(all(all(y==y0))))
+
+%%  Should put some tests of the "DIM" parameter in here.
+
+ */
+
+/*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */  
