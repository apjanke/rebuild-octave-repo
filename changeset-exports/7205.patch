# HG changeset patch
# User jwe
# Date 1196199407 0
#      Tue Nov 27 21:36:47 2007 +0000
# Node ID f3d508351e49a7f673bc81ea1c36b69540291343
# Parent  ccda60eac3d402e722f130b3c61ec3b2f0c48e47
[project @ 2007-11-27 21:36:46 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,15 @@
 2007-11-27  John W. Eaton  <jwe@octave.org>
 
+	* pt-bp.cc (tree_breakpoint::visit_decl_command): Also check line
+	number of cmd.
+	* pt-decl.cc (tree_global_command::eval, tree_static_command::eval):
+	Insert MAYBE_DO_BREAKPOINT here.
+
 	* error.cc (Fwarning): If setting state "all" to "error", leave
 	Octave:matlab-incompatible warning state unchanged.
 
 	* octave.cc (execute_eval_option_code, execute_command_line_file):
 	Handle interrupts.
 	* toplev.cc (recover_from_exception): Now extern.
 	* toplev.h (recover_from_exception): Provide decl.
 
diff --git a/src/pt-bp.cc b/src/pt-bp.cc
--- a/src/pt-bp.cc
+++ b/src/pt-bp.cc
@@ -181,16 +181,19 @@ tree_breakpoint::visit_continue_command 
 }
 
 void 
 tree_breakpoint::visit_decl_command (tree_decl_command& cmd)
 {
   if (found)
     return;
 
+  if (cmd.line () >= line)
+    take_action (cmd);
+
   tree_decl_init_list *init_list = cmd.initializer_list ();
 
   if (init_list)
     init_list->accept (*this);
 }
 
 void 
 tree_breakpoint::visit_decl_elt (tree_decl_elt& cmd)
diff --git a/src/pt-decl.cc b/src/pt-decl.cc
--- a/src/pt-decl.cc
+++ b/src/pt-decl.cc
@@ -25,16 +25,17 @@ along with Octave; see the file COPYING.
 #include <config.h>
 #endif
 
 #include "defun.h"
 #include "error.h"
 #include "pt-cmd.h"
 #include "ov.h"
 #include "oct-lvalue.h"
+#include "pt-bp.h"
 #include "pt-decl.h"
 #include "pt-exp.h"
 #include "pt-id.h"
 #include "pt-walk.h"
 #include "utils.h"
 #include "variables.h"
 
 // Declarations (global, static, etc.).
@@ -160,16 +161,18 @@ tree_global_command::do_init (tree_decl_
 	    }
 	}
     }
 }
 
 void
 tree_global_command::eval (void)
 {
+  MAYBE_DO_BREAKPOINT;
+
   if (init_list)
     {
       init_list->eval (do_init);
 
       initialized = true;
     }
 
   if (error_state)
@@ -211,16 +214,18 @@ tree_static_command::do_init (tree_decl_
 	  ult.assign (octave_value::op_asn_eq, init_val);
 	}
     }
 }
 
 void
 tree_static_command::eval (void)
 {
+  MAYBE_DO_BREAKPOINT;
+
   // Static variables only need to be marked and initialized once.
 
   if (init_list && ! initialized)
     {
       init_list->eval (do_init);
 
       initialized = true;
 
