# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1344697332 14400
#      Sat Aug 11 11:02:12 2012 -0400
# Branch gui
# Node ID 9e62d5a3a45e547df73b79fc27c11e1f4f4c1eab
# Parent  d8a10cae1dcdf6a2aecab4ac50a079fcb45a4961
partial cleanup of include files in gui sources

* symbol-information.cc, octave-adapter/octave-event.cc: New files.
* documentation-dockwidget.h, history-dockwidget.cc,
m-editor/file-editor.h, octave-event.cc, octave-event.h,
octave-link.cc, octave-link.h, octave-main-thread.cc, octave-gui.cc,
symbol-information.cc, symbol-information.h, workspace-model.cc:
Avoid including unnecssary header files.

diff --git a/gui/src/Makefile.am b/gui/src/Makefile.am
--- a/gui/src/Makefile.am
+++ b/gui/src/Makefile.am
@@ -43,24 +43,26 @@ liboctgui_la_SOURCES = \
 		     documentation-dockwidget.cc \
 		     files-dockwidget.cc \
 		     history-dockwidget.cc \
 		     main-window.cc \
 		     octave-gui.cc \
 		     octave-qt-event-listener.cc \
 		     resource-manager.cc \
 		     settings-dialog.cc \
+		     symbol-information.cc \
 		     terminal-dockwidget.cc \
 		     welcome-wizard.cc \
 		     workspace-model.cc \
 		     workspace-view.cc \
 		     m-editor/file-editor.cc \
 		     m-editor/file-editor-tab.cc \
 		     m-editor/find-dialog.cc \
 		     m-editor/lexer-octave-gui.cc \
+		     octave-adapter/octave-event.cc \
 		     octave-adapter/octave-link.cc \
 		     octave-adapter/octave-main-thread.cc \
 		     qtinfo/parser.cc \
 		     qtinfo/webinfo.cc
 
 liboctgui_la_LIBADD = \
   libqterminal.la \
   -lQtCore \
diff --git a/gui/src/documentation-dockwidget.h b/gui/src/documentation-dockwidget.h
--- a/gui/src/documentation-dockwidget.h
+++ b/gui/src/documentation-dockwidget.h
@@ -13,16 +13,17 @@
  *
  * You should have received a copy of the GNU General Public License
  * along with this program. If not, see <http://www.gnu.org/licenses/>.
  */
 
 #ifndef DOCUMENTATIONDOCKWIDGET_H
 #define DOCUMENTATIONDOCKWIDGET_H
 
+#include <QObject>
 #include <QDockWidget>
 #include "webinfo.h"
 
 class documentation_dock_widget : public QDockWidget
 {
   Q_OBJECT
 public:
   documentation_dock_widget (QWidget *parent = 0);
diff --git a/gui/src/history-dockwidget.cc b/gui/src/history-dockwidget.cc
--- a/gui/src/history-dockwidget.cc
+++ b/gui/src/history-dockwidget.cc
@@ -10,18 +10,25 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program. If not, see <http://www.gnu.org/licenses/>.
  */
 
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include <QVBoxLayout>
+
+#include "cmd-hist.h"
+
 #include "history-dockwidget.h"
-#include <QVBoxLayout>
 
 history_dock_widget::history_dock_widget (QWidget * parent)
   : QDockWidget (parent), octave_event_observer ()
 {
   setObjectName ("HistoryDockWidget");
   construct ();
 }
 
diff --git a/gui/src/m-editor/file-editor.h b/gui/src/m-editor/file-editor.h
--- a/gui/src/m-editor/file-editor.h
+++ b/gui/src/m-editor/file-editor.h
@@ -13,27 +13,27 @@
  *
  * You should have received a copy of the GNU General Public License
  * along with this program. If not, see <http://www.gnu.org/licenses/>.
  */
 
 #ifndef FILEEDITORMDISUBWINDOW_H
 #define FILEEDITORMDISUBWINDOW_H
 
-#include "main-window.h"
-#include "file-editor-interface.h"
-#include "file-editor-tab.h"
-
 #include <QToolBar>
 #include <QAction>
 #include <QMenuBar>
 #include <QStatusBar>
 #include <QCloseEvent>
 #include <QTabWidget>
 
+#include "main-window.h"
+#include "file-editor-interface.h"
+#include "file-editor-tab.h"
+
 const char UNNAMED_FILE[]     = "<unnamed>";
 const char SAVE_FILE_FILTER[] = "Octave Files (*.m);;All Files (*.*)";
 enum editor_markers
   {
     bookmark,
     breakpoint,
     debugger_position
   };
diff --git a/gui/src/octave-adapter/octave-event.cc b/gui/src/octave-adapter/octave-event.cc
new file mode 100644
--- /dev/null
+++ b/gui/src/octave-adapter/octave-event.cc
@@ -0,0 +1,170 @@
+/* OctaveGUI - A graphical user interface for Octave
+ * Copyright (C) 2011 John P. Swensen, Jacob Dawid (jacob.dawid@googlemail.com)
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation, either version 3 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include <string>
+
+#include "cmd-hist.h"
+#include "oct-env.h"
+
+#include "debug.h"
+#include "oct-obj.h"
+#include "parse.h"
+#include "symtab.h"
+#include "toplev.h"
+
+#include "octave-event.h"
+
+#include <readline/readline.h>
+
+void
+octave_event::call_octave_function (std::string name)
+{
+  call_octave_function (name, octave_value_list ());
+}
+
+void
+octave_event::call_octave_function (std::string name,
+                                    const octave_value_list& args,
+                                    int nargout)
+{
+  try
+    {
+      feval (name, args, nargout);
+    } catch (...) { } // Ignore exceptions. Crashes without that.
+}
+
+void
+octave_event::finish_readline_event () const
+{
+  rl_line_buffer[0] = '\0';
+  rl_point = rl_end = 0;
+  rl_done = 1;
+  //rl_forced_update_display ();
+}
+
+bool
+octave_clear_history_event::perform ()
+{
+  int i;
+  while ((i = command_history::length ()) > 0) {
+    command_history::remove (i - 1);
+  }
+  return true;
+}
+
+bool
+octave_debug_step_into_event::perform ()
+{
+  octave_value_list args;
+  args.append (octave_value ("in"));
+  call_octave_function ("dbstep", args);
+  finish_readline_event ();
+  return true;
+}
+
+bool
+octave_debug_step_out_event::perform ()
+{
+  octave_value_list args;
+  args.append (octave_value ("out"));
+  call_octave_function ("dbstep", args);
+  finish_readline_event ();
+  return true;
+}
+
+
+bool
+octave_exit_event::perform ()
+{
+  clean_up_and_exit (0);
+  return true;
+}
+
+bool
+octave_run_file_event::perform ()
+{
+  octave_value_list args;
+  args.append (octave_value (_file));
+  call_octave_function ("run", args);
+  finish_readline_event ();
+  return true;
+}
+
+bool
+octave_change_directory_event::perform ()
+{
+  return octave_env::chdir (_directory);
+}
+
+bool
+octave_load_workspace_event::perform ()
+{
+  octave_value_list args;
+  args.append (octave_value (_file));
+  call_octave_function ("load", args);
+  return true;
+}
+
+bool
+octave_save_workspace_event::perform ()
+{
+  octave_value_list args;
+  args.append (octave_value (_file));
+  call_octave_function ("save", args);
+  return true;
+}
+
+bool
+octave_add_breakpoint_event::perform ()
+{
+  bp_table::intmap intmap;
+  intmap[0] = _line + 1;
+
+  std::string previous_directory = octave_env::get_current_directory ();
+  octave_env::chdir (_path);
+  intmap = bp_table::add_breakpoint (_function_name, intmap);
+  octave_env::chdir (previous_directory);
+  return intmap.size () > 0;
+}
+
+bool
+octave_remove_breakpoint_event::perform ()
+{
+  bp_table::intmap intmap;
+  intmap[0] = _line;
+
+  std::string previous_directory = octave_env::get_current_directory ();
+  octave_env::chdir (_path);
+  bp_table::remove_breakpoint (_function_name, intmap);
+  octave_env::chdir (previous_directory);
+  return true; // TODO: Check result.
+}
+
+bool
+octave_remove_all_breakpoints_event::perform ()
+{
+  bp_table::intmap intmap;
+  std::string previous_directory = octave_env::get_current_directory ();
+  octave_env::chdir (_path);
+  intmap = bp_table::remove_all_breakpoints_in_file (_function_name, true);
+  octave_env::chdir (previous_directory);
+  return intmap.size() > 0;
+}
diff --git a/gui/src/octave-adapter/octave-event.h b/gui/src/octave-adapter/octave-event.h
--- a/gui/src/octave-adapter/octave-event.h
+++ b/gui/src/octave-adapter/octave-event.h
@@ -14,27 +14,20 @@
  * You should have received a copy of the GNU General Public License
  * along with this program. If not, see <http://www.gnu.org/licenses/>.
  */
 
 #ifndef OCTAVEEVENT_H
 #define OCTAVEEVENT_H
 
 #include <string>
+
+class octave_value_list;
+
 #include "octave-event-observer.h"
-#include "config.h"
-#include "symtab.h"
-#include "oct-env.h"
-#include "pt-eval.h"
-#include "toplev.h"
-#include "parse.h"
-#include "debug.h"
-#include "cmd-hist.h"
-
-#include <readline/readline.h>
 
 /**
   * \class octave_event
   * \brief Base class for an octave event.
   * In order to make communication with octave threadsafe, comunication is
   * implemented via events. An application may create events and post them,
   * however there is no guarantee events will be processed in a given time.
   *
@@ -69,33 +62,23 @@ class octave_event
     /**
       * Rejects this event. This allows the event observer to react properly
       * onto the event.
       */
     void reject ()
     { _octave_event_observer.event_reject (this); }
 
   protected:
+    void call_octave_function (std::string name);
+
     void call_octave_function (std::string name,
-                               const octave_value_list& args = octave_value_list (),
-                               int nargout = 0)
-    {
-      try
-      {
-        feval (name, args, nargout);
-      } catch (...) { } // Ignore exceptions. Crashes without that.
-    }
+                               const octave_value_list& args,
+                               int nargout = 0);
 
-    void finish_readline_event () const
-    {
-      rl_line_buffer[0] = '\0';
-      rl_point = rl_end = 0;
-      rl_done = 1;
-      //rl_forced_update_display ();
-    }
+    void finish_readline_event () const;
 
   private:
     octave_event_observer& _octave_event_observer;
 };
 
 class octave_update_history_event : public octave_event
 {
   public:
@@ -124,55 +107,46 @@ class octave_update_workspace_event : pu
 class octave_exit_event : public octave_event
 {
   public:
     /** Creates a new octave_exit_event. */
     octave_exit_event (octave_event_observer& o)
       : octave_event (o)
     { }
 
-    bool perform ()
-    { clean_up_and_exit (0); return true; }
+    bool perform ();
 };
 
 /** Implements an octave run file event. */
 class octave_run_file_event : public octave_event
 {
   public:
     /** Creates a new octave_run_file_event. */
     octave_run_file_event (octave_event_observer& o,
                            std::string file)
       : octave_event (o)
     { _file = file; }
 
-    bool perform ()
-    {
-      octave_value_list args;
-      args.append (octave_value (_file));
-      call_octave_function ("run", args);
-      finish_readline_event ();
-      return true;
-    }
+    bool perform ();
 
   private:
     std::string _file;
 };
 
 /** Implements a change directory event. */
 class octave_change_directory_event : public octave_event
 {
   public:
     /** Creates a new octave_change_directory_event. */
     octave_change_directory_event (octave_event_observer& o,
                                    std::string directory)
       : octave_event (o)
     { _directory = directory; }
 
-    bool perform ()
-    { return octave_env::chdir (_directory); }
+    bool perform ();
 
   private:
     std::string _directory;
 };
 
 /** Implements a clear workspace event. */
 class octave_clear_workspace_event : public octave_event
 {
@@ -194,93 +168,64 @@ class octave_load_workspace_event : publ
 {
   public:
     /** Creates a new octave_change_directory_event. */
     octave_load_workspace_event (octave_event_observer& o,
                                  std::string file)
       : octave_event (o)
     { _file = file; }
 
-    bool perform ()
-    {
-      octave_value_list args;
-      args.append (octave_value (_file));
-      call_octave_function ("load", args);
-      return true;
-    }
+    bool perform ();
 
   private:
     std::string _file;
 };
 
 /** Implements a save workspace event. */
 class octave_save_workspace_event : public octave_event
 {
   public:
     /** Creates a new octave_change_directory_event. */
     octave_save_workspace_event (octave_event_observer& o,
                                  std::string file)
       : octave_event (o)
     { _file = file; }
 
-    bool perform ()
-    {
-      octave_value_list args;
-      args.append (octave_value (_file));
-      call_octave_function ("save", args);
-      return true;
-    }
+    bool perform ();
 
   private:
     std::string _file;
 };
 
 class octave_clear_history_event : public octave_event
 {
   public:
     /** Creates a new octave_clear_history_event. */
     octave_clear_history_event (octave_event_observer& o)
       : octave_event (o)
     { }
 
-    bool perform ()
-    {
-      int i;
-      while ((i = command_history::length ()) > 0) {
-          command_history::remove (i - 1);
-        }
-      return true;
-    }
+  bool perform ();
 };
 
 class octave_add_breakpoint_event : public octave_event
 {
   public:
     octave_add_breakpoint_event (octave_event_observer& o,
                                  std::string path,
                                  std::string function_name,
                                  int line)
       : octave_event (o)
     {
       _path = path;
       _function_name = function_name;
       _line = line;
     }
 
-    bool perform ()
-    {
-      bp_table::intmap intmap;
-      intmap[0] = _line + 1;
-
-      std::string previous_directory = octave_env::get_current_directory ();
-      octave_env::chdir (_path);
-      intmap = bp_table::add_breakpoint (_function_name, intmap);
-      octave_env::chdir (previous_directory);
-      return intmap.size () > 0;
-    }
+    bool perform ();
 
     std::string get_path ()
     {
       return _path;
     }
 
     std::string get_function_name ()
     {
@@ -307,27 +252,17 @@ class octave_remove_breakpoint_event : p
                                     int line)
       : octave_event (o)
     {
       _path = path;
       _function_name = function_name;
       _line = line;
     }
 
-    bool perform ()
-    {
-      bp_table::intmap intmap;
-      intmap[0] = _line;
-
-      std::string previous_directory = octave_env::get_current_directory ();
-      octave_env::chdir (_path);
-      bp_table::remove_breakpoint (_function_name, intmap);
-      octave_env::chdir (previous_directory);
-      return true; // TODO: Check result.
-    }
+    bool perform ();
 
     std::string get_path ()
     {
       return _path;
     }
 
     std::string get_function_name ()
     {
@@ -352,25 +287,17 @@ class octave_remove_all_breakpoints_even
                                          std::string path,
                                          std::string function_name)
       : octave_event (o)
     {
       _path = path;
       _function_name = function_name;
     }
 
-    bool perform ()
-    {
-      bp_table::intmap intmap;
-      std::string previous_directory = octave_env::get_current_directory ();
-      octave_env::chdir (_path);
-      intmap = bp_table::remove_all_breakpoints_in_file (_function_name, true);
-      octave_env::chdir (previous_directory);
-      return intmap.size() > 0;
-    }
+    bool perform ();
 
     std::string get_path ()
     {
       return _path;
     }
 
     std::string get_function_name ()
     {
@@ -384,24 +311,17 @@ class octave_remove_all_breakpoints_even
 
 class octave_debug_step_into_event : public octave_event
 {
   public:
     /** Creates a new octave_debug_step_into_event. */
     octave_debug_step_into_event (octave_event_observer& o)
       : octave_event (o) { }
 
-    bool perform ()
-    {
-      octave_value_list args;
-      args.append (octave_value ("in"));
-      call_octave_function ("dbstep", args);
-      finish_readline_event ();
-      return true;
-    }
+    bool perform ();
 };
 
 class octave_debug_step_over_event : public octave_event
 {
   public:
     /** Creates a new octave_debug_step_over_event. */
     octave_debug_step_over_event (octave_event_observer& o)
       : octave_event (o) { }
@@ -416,24 +336,17 @@ class octave_debug_step_over_event : pub
 
 class octave_debug_step_out_event : public octave_event
 {
   public:
     /** Creates a new octave_debug_step_out_event. */
     octave_debug_step_out_event (octave_event_observer& o)
       : octave_event (o) { }
 
-    bool perform ()
-    {
-      octave_value_list args;
-      args.append (octave_value ("out"));
-      call_octave_function ("dbstep", args);
-      finish_readline_event ();
-      return true;
-    }
+    bool perform ();
 };
 
 class octave_debug_continue_event : public octave_event
 {
   public:
     /** Creates a new octave_debug_step_out_event. */
     octave_debug_continue_event (octave_event_observer& o)
       : octave_event (o) { }
diff --git a/gui/src/octave-adapter/octave-link.cc b/gui/src/octave-adapter/octave-link.cc
--- a/gui/src/octave-adapter/octave-link.cc
+++ b/gui/src/octave-adapter/octave-link.cc
@@ -10,18 +10,27 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program. If not, see <http://www.gnu.org/licenses/>.
  */
 
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include "cmd-edit.h"
+#include "oct-env.h"
+#include "oct-mutex.h"
+#include "symtab.h"
+#include "toplev.h"
+
 #include "octave-link.h"
-#include "load-path.h"
 
 int octave_readline_hook ()
 {
   octave_link::instance ()->entered_readline_hook ();
   octave_link::instance ()->generate_events ();
   octave_link::instance ()->process_events ();
   octave_link::instance ()->finished_readline_hook ();
   return 0;
diff --git a/gui/src/octave-adapter/octave-link.h b/gui/src/octave-adapter/octave-link.h
--- a/gui/src/octave-adapter/octave-link.h
+++ b/gui/src/octave-adapter/octave-link.h
@@ -13,61 +13,20 @@
  *
  * You should have received a copy of the GNU General Public License
  * along with this program. If not, see <http://www.gnu.org/licenses/>.
  */
 
 #ifndef OCTAVELINK_H
 #define OCTAVELINK_H
 
-// Octave includes
-#undef PACKAGE_BUGREPORT
-#undef PACKAGE_NAME
-#undef PACKAGE_STRING
-#undef PACKAGE_TARNAME
-#undef PACKAGE_VERSION
-#undef PACKAGE_URL
-#include "config.h"
-#include "cmd-edit.h"
-#include "error.h"
-#include "file-io.h"
-#include "input.h"
-#include "lex.h"
-#include "load-path.h"
-#include "octave.h"
-#include "oct-hist.h"
-#include "oct-map.h"
-#include "oct-obj.h"
-#include "ops.h"
-#include "ov.h"
-#include "ov-usr-fcn.h"
-#include "symtab.h"
-#include "pt.h"
-#include "pt-eval.h"
-#include "config.h"
-#include "Range.h"
-#include "toplev.h"
-#include "procstream.h"
-#include "sighandlers.h"
-#include "debug.h"
-#include "sysdep.h"
-#include "ov.h"
-#include "unwind-prot.h"
-#include "utils.h"
-#include "variables.h"
-#include "oct-mutex.h"
-#include "profiler.h"
+#include <queue>
+#include <string>
 
-// Standard includes
-#include <iostream>
-#include <string>
-#include <vector>
-#include <readline/readline.h>
-#include <queue>
-#include <time.h>
+class octave_mutex;
 
 #include "octave-main-thread.h"
 #include "octave-event.h"
 #include "octave-event-observer.h"
 #include "octave-event-listener.h"
 
 /**
   * \class OctaveLink
diff --git a/gui/src/octave-adapter/octave-main-thread.cc b/gui/src/octave-adapter/octave-main-thread.cc
--- a/gui/src/octave-adapter/octave-main-thread.cc
+++ b/gui/src/octave-adapter/octave-main-thread.cc
@@ -10,19 +10,26 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program. If not, see <http://www.gnu.org/licenses/>.
  */
 
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include <string>
+
+#include "octave.h"
+
 #include "octave-main-thread.h"
 #include "octave-link.h"
-#include <string>
 
 octave_main_thread::octave_main_thread () : QThread ()
 {
 }
 
 void
 octave_main_thread::run ()
 {
diff --git a/gui/src/octave-gui.cc b/gui/src/octave-gui.cc
--- a/gui/src/octave-gui.cc
+++ b/gui/src/octave-gui.cc
@@ -10,19 +10,28 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program. If not, see <http://www.gnu.org/licenses/>.
  */
 
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
 #include <QtGui/QApplication>
 #include <QTranslator>
 #include <QSettings>
+
+#include <iostream>
+
+#include <syswait.h>
+
 #include "welcome-wizard.h"
 #include "resource-manager.h"
 #include "main-window.h"
 #include "octave-gui.h"
 
 // Dissociate from the controlling terminal, if any.
 
 static void
diff --git a/gui/src/symbol-information.cc b/gui/src/symbol-information.cc
new file mode 100644
--- /dev/null
+++ b/gui/src/symbol-information.cc
@@ -0,0 +1,100 @@
+/* OctaveGUI - A graphical user interface for Octave
+ * Copyright (C) 2011 Jacob Dawid (jacob.dawid@googlemail.com)
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation, either version 3 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include <QString>
+
+#include "ov.h"
+#include "symtab.h"
+
+#include "symbol-information.h"
+
+bool
+symbol_information::from_symbol_record
+  (const symbol_table::symbol_record& symbol_record)
+{
+  if (symbol_record.is_local () && !symbol_record.is_global () && !symbol_record.is_hidden ())
+    _scope = local;
+  else if (symbol_record.is_global ())
+    _scope = global;
+  else if (symbol_record.is_persistent ())
+    _scope = persistent;
+  else if (symbol_record.is_hidden ())
+    _scope = hidden;
+
+  _symbol = QString (symbol_record.name ().c_str ());
+  _type   = QString (symbol_record.varval ().type_name ().c_str ());
+  octave_value ov = symbol_record.varval ();
+
+  // In case we have really large matrices or strings, cut them down
+  // for performance reasons.
+  QString short_value_string;
+  bool use_short_value_string = false;
+  if (ov.is_matrix_type () || ov.is_cell ())
+    {
+      if (ov.rows () * ov.columns () > 10)
+        {
+          use_short_value_string = true;
+          short_value_string
+            = QString ("%1x%2 items").arg (ov.rows ()).arg (ov.columns ());
+        }
+    }
+  else if (ov.is_string ())
+    {
+      if (ov.string_value ().length () > 40)
+        {
+          use_short_value_string = true;
+          short_value_string
+            = QString::fromStdString (ov.string_value ().substr (0, 40));
+        }
+    }
+
+  if (use_short_value_string)
+    {
+      _value = short_value_string;
+    }
+  else
+    {
+      std::stringstream buffer;
+      ov.print (buffer, true);
+      _value  = QString::fromStdString (buffer.str ());
+    }
+  _value.replace("\n", " ");
+
+  if (ov.is_string ())
+    _dimension = QString ("%1").arg (ov.string_value ().length ());
+  else if (ov.is_range ())
+    _dimension =  QString ("%1 : %2 : %3").arg (ov.range_value ().base ())
+      .arg (ov.range_value ().inc ())
+      .arg (ov.range_value ().limit ());
+  else if (ov.is_matrix_type () || ov.is_cell ())
+    _dimension = QString ("%1x%2").arg (ov.rows ())
+      .arg (ov.columns ());
+  else if (ov.is_function_handle ())
+    // See code for func2str for a possible solution
+    _dimension = QString ("func handle");
+  else if (ov.is_inline_function ())
+    // See code for formula for a possible solution
+    _dimension = QString ("inline func");
+  else
+    _dimension = "1";
+
+  return true;
+}
diff --git a/gui/src/symbol-information.h b/gui/src/symbol-information.h
--- a/gui/src/symbol-information.h
+++ b/gui/src/symbol-information.h
@@ -13,67 +13,39 @@
  *
  * You should have received a copy of the GNU General Public License
  * along with this program. If not, see <http://www.gnu.org/licenses/>.
  */
 
 #ifndef SYMBOLINFORMATION_H
 #define SYMBOLINFORMATION_H
 
+// FIXME -- we should not be including config.h in header files.
+
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
+
 #include <QString>
 #include <QHash>
 
 #include <sstream>
 
-// Octave includes
-#undef PACKAGE_BUGREPORT
-#undef PACKAGE_NAME
-#undef PACKAGE_STRING
-#undef PACKAGE_TARNAME
-#undef PACKAGE_VERSION
-#undef PACKAGE_URL
-#include "config.h"
-#include "cmd-edit.h"
-#include "error.h"
-#include "file-io.h"
-#include "input.h"
-#include "lex.h"
-#include "load-path.h"
-#include "octave.h"
-#include "oct-hist.h"
-#include "oct-map.h"
-#include "oct-obj.h"
-#include "ops.h"
-#include "ov.h"
-#include "ov-usr-fcn.h"
 #include "symtab.h"
-#include "pt.h"
-#include "pt-eval.h"
-#include "config.h"
-#include "Range.h"
-#include "toplev.h"
-#include "procstream.h"
-#include "sighandlers.h"
-#include "debug.h"
-#include "sysdep.h"
-#include "ov.h"
-#include "unwind-prot.h"
-#include "utils.h"
-#include "variables.h"
 
 /**
   * \struct symbol_information
   * \brief Meta-information over a symbol-table entry.
   * \author Jacob Dawid
   * This struct is used to store meta information over a symbol entry.
   * It reduces memory consumption, since it only stores relevant data
   * about a symbol-table entry that will be used in the model for the
   * graphical user interface.
   */
-typedef struct symbol_information
+struct symbol_information
 {
   enum Scope
   {
     local       = 0,
     global      = 1,
     persistent  = 2,
     hidden      = 3
   };
@@ -103,81 +75,12 @@ typedef struct symbol_information
             && _value  == other._value
             && _scope  == other._scope
             && _dimension == other._dimension;
       }
   }
 
   /** Extracts meta information from a given symbol record. */
   bool
-  from_symbol_record (const symbol_table::symbol_record& symbol_record)
-  {
-    if (symbol_record.is_local () && !symbol_record.is_global () && !symbol_record.is_hidden ())
-      _scope = local;
-    else if (symbol_record.is_global ())
-      _scope = global;
-    else if (symbol_record.is_persistent ())
-      _scope = persistent;
-    else if (symbol_record.is_hidden ())
-      _scope = hidden;
-
-    _symbol = QString (symbol_record.name ().c_str ());
-    _type   = QString (symbol_record.varval ().type_name ().c_str ());
-    octave_value ov = symbol_record.varval ();
-
-    // In case we have really large matrices or strings, cut them down
-    // for performance reasons.
-    QString short_value_string;
-    bool use_short_value_string = false;
-    if (ov.is_matrix_type () || ov.is_cell ())
-      {
-        if (ov.rows () * ov.columns () > 10)
-          {
-            use_short_value_string = true;
-            short_value_string
-              = QString ("%1x%2 items").arg (ov.rows ()).arg (ov.columns ());
-          }
-      }
-    else if (ov.is_string ())
-      {
-        if (ov.string_value ().length () > 40)
-          {
-            use_short_value_string = true;
-            short_value_string
-              = QString::fromStdString (ov.string_value ().substr (0, 40));
-          }
-      }
-
-    if (use_short_value_string)
-      {
-        _value = short_value_string;
-      }
-    else
-      {
-        std::stringstream buffer;
-        ov.print (buffer, true);
-        _value  = QString::fromStdString (buffer.str ());
-      }
-    _value.replace("\n", " ");
-
-    if (ov.is_string ())
-      _dimension = QString ("%1").arg (ov.string_value ().length ());
-    else if (ov.is_range ())
-      _dimension =  QString ("%1 : %2 : %3").arg (ov.range_value ().base ())
-                                            .arg (ov.range_value ().inc ())
-                                            .arg (ov.range_value ().limit ());
-    else if (ov.is_matrix_type () || ov.is_cell ())
-      _dimension = QString ("%1x%2").arg (ov.rows ())
-                                    .arg (ov.columns ());
-    else if (ov.is_function_handle ())
-      // See code for func2str for a possible solution
-      _dimension = QString ("func handle");
-    else if (ov.is_inline_function ())
-      // See code for formula for a possible solution
-      _dimension = QString ("inline func");
-    else
-      _dimension = "1";
-
-    return true;
-  }
-} symbol_information;
+  from_symbol_record (const symbol_table::symbol_record& symbol_record);
+};
 
 #endif // SYMBOLINFORMATION_H
diff --git a/gui/src/workspace-model.cc b/gui/src/workspace-model.cc
--- a/gui/src/workspace-model.cc
+++ b/gui/src/workspace-model.cc
@@ -10,19 +10,28 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program. If not, see <http://www.gnu.org/licenses/>.
  */
 
-#include "workspace-model.h"
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
 #include <QTreeWidget>
 #include <QTime>
+
+#include <list>
+
+#include <symtab.h>
+
+#include "workspace-model.h"
 #include "octave-link.h"
 
 workspace_model::workspace_model(QObject *parent)
   : QAbstractItemModel(parent), octave_event_observer ()
 {
   QList<QVariant> rootData;
   rootData << tr ("Name") << tr ("Type") << tr("Dimension") << tr ("Value");
   _rootItem = new tree_item(rootData);
