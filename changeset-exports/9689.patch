# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1254715867 14400
#      Mon Oct 05 00:11:07 2009 -0400
# Node ID 34d6f005db4b3c7e4c1678c9f5cfb407c23a0fed
# Parent  90abfd8a2895bdfd169930e8729a6c56844c6338
eliminate is_string argument from octave_value character array constructors

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,75 @@
+2009-10-05  John W. Eaton  <jwe@octave.org>
+
+	* ov.h (octave_value (const charMatrix&, char, bool),
+	octave_value (const charNDArray&, char, bool),
+	octave_value (const ArrayN<char>&, char, bool)):
+	New constructor decls.
+	(octave_value (const charMatrix&, bool, char),
+	octave_value (const charNDArray&, bool, char),
+	octave_value (const ArrayN<char>&, bool, char)): Mark with
+	GCC_ATTR_DEPRECATED.  Single-quoted strings are now default string
+	type.
+	(octave_value::convert_to_str): Default is single-quoted strings.
+	* ov.cc (octave_value (const charMatrix&, char, bool),
+	octave_value (const charNDArray&, char, bool),
+	octave_value (const ArrayN<char>&, char, bool)): New constructors.
+	(octave_value (const charMatrix&, bool, char),
+	octave_value (const charNDArray&, bool, char),
+	octave_value (const ArrayN<char>&, bool, char)):
+	Assume is_string argument is always true.
+
+	* ov-re-mat.cc (octave_sparse_matrix::convert_to_str_internal):
+	Update for octave_value constructore changes.
+	* ov-ch-mat.h (octave_char_matrix::convert_to_str_internal): Likewise.
+	* ov-re-sparse.cc (octave_sparse_matrix::convert_to_str_internal):
+	Likewise.
+	* ov-str-mat.h (octave_char_matrix_str::squeeze,
+	octave_char_matrix_str::reshape, octave_char_matrix_str::permute,
+	octave_char_matrix_str::diag, octave_char_matrix_str::sort,
+	octave_char_matrix_sq_str::squeeze,
+	octave_char_matrix_sq_str::reshape,
+	octave_char_matrix_sq_str::permute,
+	octave_char_matrix_sq_str::diag, octave_char_matrix_sq_str::sort):
+	Likewise.
+	* ov-str-mat.cc (octave_char_matrix_str::do_index_op_internal):
+	Likewise.
+	(octave_char_matrix_str::resize): Likewise.
+	* data.cc (do_cat, Fmerge): Likewise.
+	* ops.h (DEFNDCHARCATOP_FN): Likewise.
+	* ov-base-int.cc (octave_base_int_matrix<T>::convert_to_str_internal):
+	Likewise.
+	* pt-mat.cc (tree_matrix::rvalue1): Likewise.
+
+	* ov-ch-mat.h (octave_char_matrix::octave_char_matrix): Delete
+	unused bool arg.  Declare constructors protected.
+
+	(xisalnum, xisalpha, xisascii, xiscntrl, xisdigit, xisgraph,
+	xislower, xisprint, xispunct, xisspace, xisupper, xisxdigit,
+	xtoascii, xtolower, xtoupper): Move decls here from ov-str-mat.h.
+	(MAT_MAPPER, BOOL_MAT_MAPPER): Move macro definitions and uses
+	here from ov-str-mat.h.
+
+	* ov-ch-mat.cc (MACRO_WRAPPER, STRING_MAPPER, TOSTRING_MAPPER):
+	Move macro definitions and uses here.
+	* ov-str-mat.cc: From here.
+
+	* DLD-FUNCTIONS/typecast (Ftypecast): Update for octave_value
+	constructor changes.  Create sq_string unless casting from string,
+	then preserve exact type.
+	(Fbitpack): Update for octave_value constructor changes.  Create
+	sq_string.
+	* DLD-FUNCTIONS/hex2num.cc (Fnum2hex): Update for octave_value
+	constructor changes.  Create sq_string.
+	* ls-oct-ascii.cc (read_ascii_data): Likewise.
+	* mex.cc (mxArray_number::as_octave_value): Likewise.
+	* oct-stream.cc (octave_stream::read): Likewise.
+	* ov-base.cc (STRING_MAPPER): Likewise.
+
 2009-10-04  John W. Eaton  <jwe@octave.org>
 
 	* ov-str-mat.h (octave_char_matrix_str::squeeze,
 	octave_char_matrix_sq_str::squeeze, octave_char_matrix_str::diag,
 	octave_char_matrix_sq_str::diag): New functions.
 
 2009-10-03  Shai Ayal  <shaiay@users.sourceforge.net>
 
diff --git a/src/DLD-FUNCTIONS/hex2num.cc b/src/DLD-FUNCTIONS/hex2num.cc
--- a/src/DLD-FUNCTIONS/hex2num.cc
+++ b/src/DLD-FUNCTIONS/hex2num.cc
@@ -172,18 +172,18 @@ num2hex ([-1, 1, e, Inf, NaN, NA]);\n\
 		  if (ch >= 10)
 		    ch += 'a' - 10;
 		  else
 		    ch += '0';
 
 		  m.elem (i, j) = ch;
 		}
 	    }
-	  
-	  retval = octave_value (m, true);
+
+	  retval = m;
 	}
     }
 
   return retval;
 }
 
 /*
 %!assert (num2hex (-2:2),['c000000000000000';'bff0000000000000';'0000000000000000';'3ff0000000000000';'4000000000000000'])
diff --git a/src/DLD-FUNCTIONS/typecast.cc b/src/DLD-FUNCTIONS/typecast.cc
--- a/src/DLD-FUNCTIONS/typecast.cc
+++ b/src/DLD-FUNCTIONS/typecast.cc
@@ -183,17 +183,17 @@ typecast (@var{x}, 'uint8')\n\
       else
         error ("typecast: invalid input class: %s", array.class_name ().c_str ());
 
       std::string numclass = args(1).string_value ();
 
       if (error_state || numclass.size () == 0)
         ;
       else if (numclass == "char")
-        retval = octave_value (reinterpret_copy<charNDArray> (data, byte_size, old_dims), true);
+        retval = octave_value (reinterpret_copy<charNDArray> (data, byte_size, old_dims), array.is_dq_string () ? '"' : '\'');
       else if (numclass[0] == 'i')
         {
           if (numclass == "int8")
             retval = reinterpret_copy<int8NDArray> (data, byte_size, old_dims);
           else if (numclass == "int16")
             retval = reinterpret_copy<int16NDArray> (data, byte_size, old_dims);
           else if (numclass == "int32")
             retval = reinterpret_copy<int32NDArray> (data, byte_size, old_dims);
@@ -299,17 +299,17 @@ The result is a row vector if @var{x} is
     {
       boolNDArray bitp = args(0).bool_array_value ();
 
       std::string numclass = args(1).string_value ();
 
       if (error_state || numclass.size () == 0)
         ;
       else if (numclass == "char")
-        retval = octave_value (do_bitpack<charNDArray> (bitp), true);
+        retval = octave_value (do_bitpack<charNDArray> (bitp), '\'');
       else if (numclass[0] == 'i')
         {
           if (numclass == "int8")
             retval = do_bitpack<int8NDArray> (bitp);
           else if (numclass == "int16")
             retval = do_bitpack<int16NDArray> (bitp);
           else if (numclass == "int32")
             retval = do_bitpack<int32NDArray> (bitp);
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -1913,17 +1913,17 @@ do_cat (const octave_value_list& args, s
 	      char type = all_dq_strings_p ? '"' : '\'';
 
 	      maybe_warn_string_concat (all_dq_strings_p, all_sq_strings_p);
 
 	      charNDArray result (dv, Vstring_fill_char);
 
 	      SINGLE_TYPE_CONCAT (charNDArray, char_array_value);
 
-	      retval = octave_value (result, true, type);
+	      retval = octave_value (result, type);
 	    }
 	  else if (result_type == "logical")
 	    {
 	      if (any_sparse_p)
 		DO_SINGLE_TYPE_CONCAT (SparseBoolMatrix, sparse_bool_matrix_value);
 	      else
 		DO_SINGLE_TYPE_CONCAT (boolNDArray, bool_array_value);
 	    }
@@ -6146,18 +6146,17 @@ it is first converted to logical.\n\
                                    fval.float_array_value ());
             }
           else if (tval.is_string () && fval.is_string ())
             {
               bool sq_string = tval.is_sq_string () || fval.is_sq_string ();
               retval = octave_value (do_merge (mask,
                                                tval.char_array_value (),
                                                fval.char_array_value ()),
-                                     true, sq_string ? '\'' : '"');
-
+                                     sq_string ? '\'' : '"');
             }
           else if (tval.is_cell () && fval.is_cell ())
             {
               retval = do_merge (mask,
                                  tval.cell_value (),
                                  fval.cell_value ());
             }
 
diff --git a/src/ls-oct-ascii.cc b/src/ls-oct-ascii.cc
--- a/src/ls-oct-ascii.cc
+++ b/src/ls-oct-ascii.cc
@@ -273,17 +273,17 @@ read_ascii_data (std::istream& is, const
 
 	  typ = global ? tag.substr (7) : tag;
 	}
       else
 	typ = tag;
 
       // Special case for backward compatiablity. A small bit of cruft
       if (SUBSTRING_COMPARE_EQ (typ, 0, 12, "string array"))
-	tc = octave_value (charMatrix (), true);
+	tc = charMatrix ();
       else
 	tc = octave_value_typeinfo::lookup_type (typ);
 
       if (! tc.load_ascii (is))
 	error ("load: trouble reading ascii file `%s'", filename.c_str ());
     }
   else
     error ("load: failed to extract keyword specifying value type");
diff --git a/src/mex.cc b/src/mex.cc
--- a/src/mex.cc
+++ b/src/mex.cc
@@ -1336,17 +1336,17 @@ protected:
 
 	  charNDArray val (dv);
 
 	  char *ptr = val.fortran_vec ();
 
 	  for (mwIndex i = 0; i < nel; i++)
 	    ptr[i] = static_cast<char> (ppr[i]);
 
-	  retval = octave_value (val, true, '\'');
+	  retval = val;
 	}
 	break;
 
       case mxSINGLE_CLASS:
 	{
 	  mwSize nel = get_number_of_elements ();
 
 	  float *ppr = static_cast<float *> (pr);
diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -3363,17 +3363,17 @@ octave_stream::read (const Array<double>
 				   ffmt, char_count);
 
 		  // FIXME -- kluge!
 
 		  if (! error_state
 		      && (output_type == oct_data_conv::dt_char
 			  || output_type == oct_data_conv::dt_schar
 			  || output_type == oct_data_conv::dt_uchar))
-		    retval = octave_value (retval.char_matrix_value (), true);
+		    retval = retval.char_matrix_value ();
 		}
 	      else
 		error ("fread: unable to read and convert requested types");
 	    }
 	}
       else
 	invalid_operation ("fread", "reading");
     }
diff --git a/src/ops.h b/src/ops.h
--- a/src/ops.h
+++ b/src/ops.h
@@ -376,18 +376,18 @@ extern void install_ops (void);
   }
 
 #define DEFNDCHARCATOP_FN(name, t1, t2, f) \
   CATOPDECL (name, a1, a2) \
   { \
     CAST_BINOP_ARGS (CONCAT2(octave_, t1)&, const CONCAT2(octave_, t2)&); \
  \
     return octave_value (v1.char_array_value () . f (v2.char_array_value (), ra_idx), \
-			 true, ((a1.is_sq_string () || a2.is_sq_string ()) \
-				? '\'' : '"')); \
+			 ((a1.is_sq_string () || a2.is_sq_string ()) \
+			  ? '\'' : '"')); \
   }
 
 // For compatibility, the second arg is always converted to the type
 // of the first.  Hmm.
 
 #define DEFNDCATOP_FN2(name, t1, t2, tc1, tc2, e1, e2, f) \
   CATOPDECL (name, a1, a2) \
   { \
diff --git a/src/ov-base-int.cc b/src/ov-base-int.cc
--- a/src/ov-base-int.cc
+++ b/src/ov-base-int.cc
@@ -167,17 +167,17 @@ octave_base_int_matrix<T>::convert_to_st
 	      ::warning ("range error for conversion to character value");
 	      warned = true;
 	    }
 	}
       else
 	chm (i) = static_cast<char> (ival);
     }
 
-  retval = octave_value (chm, true, type);
+  retval = octave_value (chm, type);
 
   return retval;
 }
 
 template <class T>
 bool
 octave_base_int_matrix<T>::save_ascii (std::ostream& os)
 {
diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -1161,17 +1161,17 @@ UNDEFINED_MAPPER (tan)
 UNDEFINED_MAPPER (tanh)
 
 // String mapper functions, convert to a string
 
 #define STRING_MAPPER(F) \
   octave_value \
   octave_base_value::F (void) const \
   { \
-    octave_value tmp = octave_value (char_array_value (true), true); \
+    octave_value tmp = char_array_value (true); \
     return error_state ? octave_value () : octave_value (tmp.F ()); \
   }
 
 STRING_MAPPER (xisalnum)
 STRING_MAPPER (xisalpha)
 STRING_MAPPER (xisascii)
 STRING_MAPPER (xiscntrl)
 STRING_MAPPER (xisdigit)
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -532,17 +532,17 @@ public:
 
   virtual octave_fcn_handle *fcn_handle_value (bool silent = false);
 
   virtual octave_fcn_inline *fcn_inline_value (bool silent = false);
 
   virtual octave_value_list list_value (void) const;
 
   virtual octave_value convert_to_str (bool pad = false, bool force = false,
-				       char type = '"') const;
+				       char type = '\'') const;
   virtual octave_value
   convert_to_str_internal (bool pad, bool force, char type) const;
 
   virtual void convert_to_row_or_column_vector (void);
 
   virtual bool print_as_scalar (void) const { return false; }
 
   virtual void print (std::ostream& os, bool pr_as_read_syntax = false) const;
diff --git a/src/ov-ch-mat.cc b/src/ov-ch-mat.cc
--- a/src/ov-ch-mat.cc
+++ b/src/ov-ch-mat.cc
@@ -150,13 +150,52 @@ octave_char_matrix::as_mxArray (void) co
   const char *p = matrix.data ();
 
   for (mwIndex i = 0; i < nel; i++)
     pr[i] = p[i];
 
   return retval;
 }
 
+#define MACRO_WRAPPER(FCN, CTYPE_FCN) \
+  static int x ## FCN (int c) { return CTYPE_FCN (c); }
+
+#define STRING_MAPPER(FCN, AMAP, CTYPE_FCN) \
+  MACRO_WRAPPER (FCN, CTYPE_FCN) \
+ \
+  octave_value \
+  octave_char_matrix::FCN (void) const \
+  { \
+    static charNDArray::mapper smap = x ## FCN; \
+    return matrix.AMAP (smap);  \
+  }
+
+#define TOSTRING_MAPPER(FCN, AMAP, CTYPE_FCN) \
+  MACRO_WRAPPER (FCN, CTYPE_FCN) \
+ \
+  octave_value \
+  octave_char_matrix::FCN (void) const \
+  { \
+    static charNDArray::mapper smap = x ## FCN; \
+    return octave_value (matrix.AMAP (smap), is_sq_string () ? '\'' : '"'); \
+  }
+
+STRING_MAPPER (xisalnum, bmap, isalnum)
+STRING_MAPPER (xisalpha, bmap, isalpha)
+STRING_MAPPER (xisascii, bmap, isascii)
+STRING_MAPPER (xiscntrl, bmap, iscntrl)
+STRING_MAPPER (xisdigit, bmap, isdigit)
+STRING_MAPPER (xisgraph, bmap, isgraph)
+STRING_MAPPER (xislower, bmap, islower)
+STRING_MAPPER (xisprint, bmap, isprint)
+STRING_MAPPER (xispunct, bmap, ispunct)
+STRING_MAPPER (xisspace, bmap, isspace)
+STRING_MAPPER (xisupper, bmap, isupper)
+STRING_MAPPER (xisxdigit, bmap, isxdigit)
+STRING_MAPPER (xtoascii, dmap, toascii)
+TOSTRING_MAPPER (xtolower, smap, tolower)
+TOSTRING_MAPPER (xtoupper, smap, toupper)
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/ov-ch-mat.h b/src/ov-ch-mat.h
--- a/src/ov-ch-mat.h
+++ b/src/ov-ch-mat.h
@@ -29,40 +29,41 @@ along with Octave; see the file COPYING.
 #include <iosfwd>
 #include <string>
 
 #include "mx-base.h"
 #include "oct-alloc.h"
 #include "str-vec.h"
 
 #include "error.h"
+#include "ov.h"
 #include "ov-base.h"
-
 #include "ov-base-mat.h"
+#include "ov-re-mat.h"
 #include "ov-typeinfo.h"
 
 class Octave_map;
 class octave_value_list;
 
 class tree_walker;
 
 // Character matrix values.
 
 class
 octave_char_matrix : public octave_base_matrix<charNDArray>
 {
-public:
+protected:
 
   octave_char_matrix (void)
     : octave_base_matrix<charNDArray> () { }
 
-  octave_char_matrix (const charMatrix& chm, bool = false)
+  octave_char_matrix (const charMatrix& chm)
     : octave_base_matrix<charNDArray> (chm) { }
 
-  octave_char_matrix (const charNDArray& chm, bool = false)
+  octave_char_matrix (const charNDArray& chm)
     : octave_base_matrix<charNDArray> (chm) { }
 
   octave_char_matrix (char c)
     : octave_base_matrix<charNDArray> (c) { }
 
   octave_char_matrix (const char *s)
     : octave_base_matrix<charNDArray> (s) { }
 
@@ -70,16 +71,18 @@ public:
     : octave_base_matrix<charNDArray> (s) { }
 
   octave_char_matrix (const string_vector& s)
     : octave_base_matrix<charNDArray> (s) { }
 
   octave_char_matrix (const octave_char_matrix& chm)
     : octave_base_matrix<charNDArray> (chm) { }
 
+public:
+
   ~octave_char_matrix (void) { }
 
   octave_base_value *clone (void) const { return new octave_char_matrix (*this); }
   octave_base_value *empty_clone (void) const { return new octave_char_matrix (); }
 
   idx_vector index_vector (void) const;
 
   builtin_type_t builtin_type (void) const { return btyp_char; }
@@ -129,22 +132,72 @@ public:
 
   charMatrix char_matrix_value (bool = false) const
     { return matrix.matrix_value (); }
 
   charNDArray char_array_value (bool = false) const
     { return matrix; }
 
   octave_value convert_to_str_internal (bool, bool, char type) const
-    { return octave_value (matrix, true, type); }
+    { return octave_value (matrix, type); }
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   mxArray *as_mxArray (void) const;
 
+  octave_value xisalnum (void) const;
+  octave_value xisalpha (void) const;
+  octave_value xisascii (void) const;
+  octave_value xiscntrl (void) const;
+  octave_value xisdigit (void) const;
+  octave_value xisgraph (void) const;
+  octave_value xislower (void) const;
+  octave_value xisprint (void) const;
+  octave_value xispunct (void) const;
+  octave_value xisspace (void) const;
+  octave_value xisupper (void) const;
+  octave_value xisxdigit (void) const;
+  octave_value xtoascii (void) const;
+  octave_value xtolower (void) const;
+  octave_value xtoupper (void) const;
+
+#define MAT_MAPPER(MAP) \
+  octave_value MAP (void) const \
+    { \
+      octave_matrix m (array_value (true)); \
+      return m.MAP (); \
+    }
+
+  MAT_MAPPER (abs)
+  MAT_MAPPER (angle)
+  MAT_MAPPER (arg)
+  MAT_MAPPER (ceil)
+  MAT_MAPPER (conj)
+  MAT_MAPPER (fix)
+  MAT_MAPPER (floor)
+  MAT_MAPPER (imag)
+  MAT_MAPPER (real)
+  MAT_MAPPER (round)
+  MAT_MAPPER (signum)
+
+#undef MAT_MAPPER
+
+#define BOOL_MAT_MAPPER(MAP, VAL)	\
+  octave_value MAP (void) const \
+    { \
+      return boolNDArray (matrix.dims (), VAL); \
+    }
+
+  BOOL_MAT_MAPPER (finite, true)
+  BOOL_MAT_MAPPER (isinf, false)
+  BOOL_MAT_MAPPER (isna, false)
+  BOOL_MAT_MAPPER (isnan, false)
+
+#undef BOOL_MAT_MAPPER
+
 protected:
 
   DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
diff --git a/src/ov-re-mat.cc b/src/ov-re-mat.cc
--- a/src/ov-re-mat.cc
+++ b/src/ov-re-mat.cc
@@ -310,17 +310,17 @@ octave_matrix::convert_to_str_internal (
 		  warned = true;
 		}
 	    }
 
 	  chm (i) = static_cast<char> (ival);
 	}
     }
 
-  retval = octave_value (chm, true, type);
+  retval = octave_value (chm, type);
 
   return retval;
 }
 
 bool 
 octave_matrix::save_ascii (std::ostream& os)
 {
   dim_vector d = dims ();
diff --git a/src/ov-re-sparse.cc b/src/ov-re-sparse.cc
--- a/src/ov-re-sparse.cc
+++ b/src/ov-re-sparse.cc
@@ -234,17 +234,18 @@ octave_sparse_matrix::convert_to_str_int
 			  warned = true;
 			}
 		    }
 
 		  chm (matrix.ridx(i) + j * nr) = 
 		    static_cast<char> (ival);
 		}
 	  }
-      retval = octave_value (chm, true, type);
+
+      retval = octave_value (chm, type);
     }
 
   return retval;
 }
 
 bool 
 octave_sparse_matrix::save_binary (std::ostream& os, bool&save_as_floats)
 {
diff --git a/src/ov-str-mat.cc b/src/ov-str-mat.cc
--- a/src/ov-str-mat.cc
+++ b/src/ov-str-mat.cc
@@ -92,66 +92,66 @@ octave_char_matrix_str::do_index_op_inte
 {
   octave_value retval;
 
   octave_idx_type len = idx.length ();
 
   switch (len)
     {
     case 0:
-      retval = octave_value (matrix, true, type);
+      retval = octave_value (matrix, type);
       break;
 
     case 1:
       {
 	idx_vector i = idx (0).index_vector ();
 
 	if (! error_state)
 	  retval = octave_value (charNDArray (matrix.index (i, resize_ok)),
-				 true, type);
+				 type);
       }
       break;
 
     case 2:
       {
 	idx_vector i = idx (0).index_vector ();
 	idx_vector j = idx (1).index_vector ();
 
 	if (! error_state)
 	  retval = octave_value (charNDArray (matrix.index (i, j, resize_ok)),
-				 true, type);
+				 type);
       }
       break;
 
     default:
       {
 	Array<idx_vector> idx_vec (len);
 
 	for (octave_idx_type i = 0; i < len; i++)
 	  idx_vec(i) = idx(i).index_vector ();
 
 	if (! error_state)
 	  retval = octave_value (charNDArray (matrix.index (idx_vec, resize_ok)),
-				 true, type);
+				 type);
       }
       break;
     }
 
   return retval;
 }
 
 octave_value 
 octave_char_matrix_str::resize (const dim_vector& dv, bool fill) const
 {
   charNDArray retval (matrix);
   if (fill)
-    retval.resize (dv, charNDArray::resize_fill_value());
+    retval.resize (dv, charNDArray::resize_fill_value ());
   else
     retval.resize (dv);
-  return octave_value (retval, true);
+  return octave_value (retval, is_sq_string () ? '\'' : '"');
 }
 
 #define CHAR_MATRIX_CONV(T, INIT, TNAME, FCN) \
   T retval INIT; \
  \
   if (! force_string_conv) \
     gripe_invalid_conversion ("string", TNAME); \
   else \
@@ -745,53 +745,13 @@ octave_char_matrix_str::load_hdf5 (hid_t
 	}
     }
 
   return retval;
 }
 
 #endif
 
-#define MACRO_WRAPPER(FCN, CTYPE_FCN) \
-  static int x ## FCN (int c) { return CTYPE_FCN (c); }
-
-#define STRING_MAPPER(FCN, AMAP, CTYPE_FCN) \
-  MACRO_WRAPPER (FCN, CTYPE_FCN) \
- \
-  octave_value \
-  octave_char_matrix_str::FCN (void) const \
-  { \
-    static charNDArray::mapper smap = x ## FCN; \
-    return matrix.AMAP (smap);  \
-  }
-
-#define TOSTRING_MAPPER(FCN, AMAP, CTYPE_FCN) \
-  MACRO_WRAPPER (FCN, CTYPE_FCN) \
- \
-  octave_value \
-  octave_char_matrix_str::FCN (void) const \
-  { \
-    static charNDArray::mapper smap = x ## FCN; \
-    return octave_value (matrix.AMAP (smap), true, \
-			 is_sq_string () ? '\'' : '"'); \
-  }
-
-STRING_MAPPER (xisalnum, bmap, isalnum)
-STRING_MAPPER (xisalpha, bmap, isalpha)
-STRING_MAPPER (xisascii, bmap, isascii)
-STRING_MAPPER (xiscntrl, bmap, iscntrl)
-STRING_MAPPER (xisdigit, bmap, isdigit)
-STRING_MAPPER (xisgraph, bmap, isgraph)
-STRING_MAPPER (xislower, bmap, islower)
-STRING_MAPPER (xisprint, bmap, isprint)
-STRING_MAPPER (xispunct, bmap, ispunct)
-STRING_MAPPER (xisspace, bmap, isspace)
-STRING_MAPPER (xisupper, bmap, isupper)
-STRING_MAPPER (xisxdigit, bmap, isxdigit)
-STRING_MAPPER (xtoascii, dmap, toascii)
-TOSTRING_MAPPER (xtolower, smap, tolower)
-TOSTRING_MAPPER (xtoupper, smap, toupper)
-
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/ov-str-mat.h b/src/ov-str-mat.h
--- a/src/ov-str-mat.h
+++ b/src/ov-str-mat.h
@@ -30,18 +30,18 @@ along with Octave; see the file COPYING.
 #include <string>
 
 #include "mx-base.h"
 #include "str-vec.h"
 
 #include "error.h"
 #include "oct-stream.h"
 #include "ov.h"
+#include "ov-ch-mat.h"
 #include "ov-re-mat.h"
-#include "ov-ch-mat.h"
 #include "ov-typeinfo.h"
 
 class Octave_map;
 class octave_value_list;
 
 class tree_walker;
 
 // Character matrix values with special properties for use as
@@ -87,28 +87,28 @@ public:
 
   type_conv_info numeric_conversion_function (void) const;
 
   octave_value do_index_op (const octave_value_list& idx,
 			    bool resize_ok = false)
     { return do_index_op_internal (idx, resize_ok); }
 
   octave_value squeeze (void) const
-    { return octave_value (charNDArray (matrix.squeeze ()), true); }
+    { return octave_value (charNDArray (matrix.squeeze ())); }
 
   octave_value reshape (const dim_vector& new_dims) const
-    { return octave_value (charNDArray (matrix.reshape (new_dims)), true); }
+    { return octave_value (charNDArray (matrix.reshape (new_dims))); }
 
   octave_value permute (const Array<int>& vec, bool inv = false) const
-    { return octave_value (charNDArray (matrix.permute (vec, inv)), true); }
+    { return octave_value (charNDArray (matrix.permute (vec, inv))); }
 
   octave_value resize (const dim_vector& dv, bool fill = false) const;
 
   octave_value diag (octave_idx_type k = 0) const
-    { return octave_value (matrix.diag (k), true); }
+    { return octave_value (matrix.diag (k)); }
 
   bool is_string (void) const { return true; }
 
   bool is_real_type (void) const { return false; }
 
   bool is_matrix_type (void) const { return false; }
 
   bool is_numeric_type (void) const { return false; }
@@ -125,21 +125,21 @@ public:
 
   ComplexNDArray complex_array_value (bool = false) const;
 
   string_vector all_strings (bool pad = false) const;
 
   std::string string_value (bool force = false) const;
 
   octave_value sort (octave_idx_type dim = 0, sortmode mode = ASCENDING) const
-    { return octave_value (matrix.sort (dim, mode), true); }
+    { return octave_value (matrix.sort (dim, mode)); }
 
   octave_value sort (Array<octave_idx_type> &sidx, octave_idx_type dim = 0,
 		     sortmode mode = ASCENDING) const
-    { return octave_value (matrix.sort (sidx, dim, mode), true); }
+    { return octave_value (matrix.sort (sidx, dim, mode)); }
 
   bool print_as_scalar (void) const { return (rows () <= 1); }
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   bool save_ascii (std::ostream& os);
 
   bool load_ascii (std::istream& is);
@@ -155,66 +155,16 @@ public:
   bool load_hdf5 (hid_t loc_id, const char *name, bool have_h5giterate_bug);
 #endif
 
   int write (octave_stream& os, int block_size,
 	     oct_data_conv::data_type output_type, int skip,
 	     oct_mach_info::float_format flt_fmt) const
     { return os.write (matrix, block_size, output_type, skip, flt_fmt); }
 
-  octave_value xisalnum (void) const;
-  octave_value xisalpha (void) const;
-  octave_value xisascii (void) const;
-  octave_value xiscntrl (void) const;
-  octave_value xisdigit (void) const;
-  octave_value xisgraph (void) const;
-  octave_value xislower (void) const;
-  octave_value xisprint (void) const;
-  octave_value xispunct (void) const;
-  octave_value xisspace (void) const;
-  octave_value xisupper (void) const;
-  octave_value xisxdigit (void) const;
-  octave_value xtoascii (void) const;
-  octave_value xtolower (void) const;
-  octave_value xtoupper (void) const;
-
-#define MAT_MAPPER(MAP) \
-  octave_value MAP (void) const \
-    { \
-      octave_matrix m (array_value (true)); \
-      return m.MAP (); \
-    }
-
-  MAT_MAPPER (abs)
-  MAT_MAPPER (angle)
-  MAT_MAPPER (arg)
-  MAT_MAPPER (ceil)
-  MAT_MAPPER (conj)
-  MAT_MAPPER (fix)
-  MAT_MAPPER (floor)
-  MAT_MAPPER (imag)
-  MAT_MAPPER (real)
-  MAT_MAPPER (round)
-  MAT_MAPPER (signum)
-
-#undef MAT_MAPPER
-
-#define BOOL_MAT_MAPPER(MAP, VAL)	\
-  octave_value MAP (void) const \
-    { \
-      return boolNDArray (matrix.dims (), VAL); \
-    }
-
-  BOOL_MAT_MAPPER (finite, true)
-  BOOL_MAT_MAPPER (isinf, false)
-  BOOL_MAT_MAPPER (isna, false)
-  BOOL_MAT_MAPPER (isnan, false)
-
-#undef BOOL_MAT_MAPPER
-
 protected:
 
   octave_value do_index_op_internal (const octave_value_list& idx,
 				     bool resize_ok, char type = '"');
 
 private:
 
   DECLARE_OCTAVE_ALLOCATOR
@@ -257,47 +207,47 @@ public:
     : octave_char_matrix_str (chms) { }
 
   ~octave_char_matrix_sq_str (void) { }
 
   octave_base_value *clone (void) const { return new octave_char_matrix_sq_str (*this); }
   octave_base_value *empty_clone (void) const { return new octave_char_matrix_sq_str (); }
 
   octave_value squeeze (void) const
-    { return octave_value (charNDArray (matrix.squeeze ()), true, '\''); }
+    { return octave_value (charNDArray (matrix.squeeze ()), '\''); }
 
   octave_value reshape (const dim_vector& new_dims) const
-    { return octave_value (charNDArray (matrix.reshape (new_dims)), true, '\''); }
+    { return octave_value (charNDArray (matrix.reshape (new_dims)), '\''); }
 
   octave_value permute (const Array<int>& vec, bool inv = false) const
-    { return octave_value (charNDArray (matrix.permute (vec, inv)), true, '\''); }
+    { return octave_value (charNDArray (matrix.permute (vec, inv)), '\''); }
 
   octave_value resize (const dim_vector& dv, bool = false) const
     {
       charNDArray retval (matrix);
       retval.resize (dv);
-      return octave_value (retval, true, '\'');
+      return octave_value (retval, '\'');
     }
 
   octave_value diag (octave_idx_type k = 0) const
-    { return octave_value (matrix.diag (k), true, '\''); }
+    { return octave_value (matrix.diag (k), '\''); }
 
   bool is_sq_string (void) const { return true; }
 
   octave_value do_index_op (const octave_value_list& idx,
 			    bool resize_ok = false)
     { return do_index_op_internal (idx, resize_ok, '\''); }
 
 
   octave_value sort (octave_idx_type dim = 0, sortmode mode = ASCENDING) const
-    { return octave_value (matrix.sort (dim, mode), true, '\''); }
+    { return octave_value (matrix.sort (dim, mode), '\''); }
 
   octave_value sort (Array<octave_idx_type> &sidx, octave_idx_type dim = 0,
 		     sortmode mode = ASCENDING) const
-    { return octave_value (matrix.sort (sidx, dim, mode), true, '\''); }
+    { return octave_value (matrix.sort (sidx, dim, mode), '\''); }
 
 private:
 
   DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -805,42 +805,60 @@ octave_value::octave_value (const std::s
 octave_value::octave_value (const string_vector& s, char type)
   : rep (type == '"'
 	 ? new octave_char_matrix_dq_str (s)
 	 : new octave_char_matrix_sq_str (s))
 {
   maybe_mutate ();
 }
 
-octave_value::octave_value (const charMatrix& chm, bool is_str, char type)
-  : rep (is_str
-	 ? (type == '"'
-	    ? new octave_char_matrix_dq_str (chm)
-	    : new octave_char_matrix_sq_str (chm))
-	 : new octave_char_matrix (chm))
+octave_value::octave_value (const charMatrix& chm, char type)
+  : rep (type == '"'
+	 ? new octave_char_matrix_dq_str (chm)
+	 : new octave_char_matrix_sq_str (chm))
+{
+  maybe_mutate ();
+}
+
+octave_value::octave_value (const charNDArray& chm, char type)
+  : rep (type == '"'
+	 ? new octave_char_matrix_dq_str (chm)
+	 : new octave_char_matrix_sq_str (chm))
 {
   maybe_mutate ();
 }
 
-octave_value::octave_value (const charNDArray& chm, bool is_str, char type)
-  : rep (is_str
-	 ? (type == '"'
-	    ? new octave_char_matrix_dq_str (chm)
-	    : new octave_char_matrix_sq_str (chm))
-	 : new octave_char_matrix (chm))
+octave_value::octave_value (const ArrayN<char>& chm, char type)
+  : rep (type == '"'
+	 ? new octave_char_matrix_dq_str (chm)
+	 : new octave_char_matrix_sq_str (chm))
 {
   maybe_mutate ();
 }
 
-octave_value::octave_value (const ArrayN<char>& chm, bool is_str, char type)
-  : rep (is_str
-	 ? (type == '"'
-	    ? new octave_char_matrix_dq_str (chm)
-	    : new octave_char_matrix_sq_str (chm))
-	 : new octave_char_matrix (chm))
+octave_value::octave_value (const charMatrix& chm, bool, char type)
+  : rep (type == '"'
+	 ? new octave_char_matrix_dq_str (chm)
+	 : new octave_char_matrix_sq_str (chm))
+{
+  maybe_mutate ();
+}
+
+octave_value::octave_value (const charNDArray& chm, bool, char type)
+  : rep (type == '"'
+	 ? new octave_char_matrix_dq_str (chm)
+	 : new octave_char_matrix_sq_str (chm))
+{
+  maybe_mutate ();
+}
+
+octave_value::octave_value (const ArrayN<char>& chm, bool, char type)
+  : rep (type == '"'
+	 ? new octave_char_matrix_dq_str (chm)
+	 : new octave_char_matrix_sq_str (chm))
 {
   maybe_mutate ();
 }
 
 octave_value::octave_value (const SparseMatrix& m, const MatrixType &t)
   : rep (new octave_sparse_matrix (m, t))
 {
   maybe_mutate ();
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -218,26 +218,29 @@ public:
   octave_value (const FloatComplexRowVector& v);
   octave_value (const ComplexColumnVector& v);
   octave_value (const FloatComplexColumnVector& v);
   octave_value (const PermMatrix& p);
   octave_value (bool b);
   octave_value (const boolMatrix& bm, const MatrixType& t = MatrixType());
   octave_value (const boolNDArray& bnda);
   octave_value (const ArrayN<bool>& bnda);
-  octave_value (char c, char type = '"');
-  octave_value (const char *s, char type = '"');
-  octave_value (const std::string& s, char type = '"');
-  octave_value (const string_vector& s, char type = '"');
-  octave_value (const charMatrix& chm, bool is_string = false,
-		char type = '"');
-  octave_value (const charNDArray& chnda, bool is_string = false,
-		char type = '"');
-  octave_value (const ArrayN<char>& chnda, bool is_string = false,
-		char type = '"');
+  octave_value (char c, char type = '\'');
+  octave_value (const char *s, char type = '\'');
+  octave_value (const std::string& s, char type = '\'');
+  octave_value (const string_vector& s, char type = '\'');
+  octave_value (const charMatrix& chm, 	char type = '\'');
+  octave_value (const charNDArray& chnda, char type = '\'');
+  octave_value (const ArrayN<char>& chnda, char type = '\'');
+  octave_value (const charMatrix& chm, bool is_string,
+		char type = '\'') GCC_ATTR_DEPRECATED;
+  octave_value (const charNDArray& chnda, bool is_string,
+		char type = '\'') GCC_ATTR_DEPRECATED;
+  octave_value (const ArrayN<char>& chnda, bool is_string,
+		char type = '\'') GCC_ATTR_DEPRECATED;
   octave_value (const SparseMatrix& m, const MatrixType& t = MatrixType ());
   octave_value (const Sparse<double>& m, const MatrixType& t = MatrixType ());
   octave_value (const SparseComplexMatrix& m, 
 		const MatrixType& t = MatrixType ());
   octave_value (const Sparse<Complex>& m, const MatrixType& t = MatrixType ());
   octave_value (const SparseBoolMatrix& bm, 
 		const MatrixType& t = MatrixType ());
   octave_value (const Sparse<bool>& m, const MatrixType& t = MatrixType ());
@@ -941,18 +944,18 @@ public:
 
   void make_storable_value (void);
 
   // Conversions.  These should probably be private.  If a user of this
   // class wants a certain kind of constant, he should simply ask for
   // it, and we should convert it if possible.
 
   octave_value convert_to_str (bool pad = false, bool force = false,
-			       char type = '"') const
-  { return rep->convert_to_str (pad, force, type); }
+			       char type = '\'') const
+    { return rep->convert_to_str (pad, force, type); }
 
   octave_value
   convert_to_str_internal (bool pad, bool force, char type) const
     { return rep->convert_to_str_internal (pad, force, type); }
 
   void convert_to_row_or_column_vector (void)
     { rep->convert_to_row_or_column_vector (); }
 
diff --git a/src/pt-mat.cc b/src/pt-mat.cc
--- a/src/pt-mat.cc
+++ b/src/pt-mat.cc
@@ -915,17 +915,17 @@ tree_matrix::rvalue1 (int)
 	  char type = all_dq_strings_p ? '"' : '\'';
 
 	  maybe_warn_string_concat (all_dq_strings_p, all_sq_strings_p);
 
 	  charNDArray result (dv, Vstring_fill_char);
 
 	  SINGLE_TYPE_CONCAT (charNDArray, char_array_value);
 
-	  retval = octave_value (result, true, type);
+	  retval = octave_value (result, type);
 	}
       else if (result_type == "logical")
 	{
 	  if (any_sparse_p)
 	    DO_SINGLE_TYPE_CONCAT (SparseBoolMatrix, sparse_bool_matrix_value);
 	  else
 	    DO_SINGLE_TYPE_CONCAT (boolNDArray, bool_array_value);
 	}
