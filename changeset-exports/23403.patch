# HG changeset patch
# User Torsten <mttl@mailbox.org>
# Date 1492452504 -7200
#      Mon Apr 17 20:08:24 2017 +0200
# Node ID fee5312256790fad657ac256cbe8833b4a39be3d
# Parent  1fadf480a63b07104063aa18b5e810acc159cfc5
make url in the console window clickable under linux (bug #41076)

* QTerminal.cc (handleCustomContextMenuReques): before showing the context
  menu, get possible actions related to a hotspot (text matching url-filter)
  and append these actions to the context menu

* QTerminal.h: virtual function for getting hotspot actions, returning an
  empty list by default

* Filter.cpp (UrlFilter::HotSpot::activate): replace KRun function by
  QDesktopServices::openUrl for opening urls

* QUnixTerminalImpl.cpp (initialize): create a new UrlFilter and add it
  to the filter chain;
  (get_hotspot_actions): reimplemented function returning actions of a
  possible matching hotspot at a specific location;

* QUnixTerminalImpl.h: reimplemented get_hotspot_actions

* TerminalView.cpp (blinkCursorEvent): use this timer event for processing
  the filter chain;
  (mousePressEvent): check for a left click in a link hotspot and trigger
  the first action of all actions related to the hotspot;
  (mouseMoveEvent): change the mouse cursor when hovering over a link hotspot

diff --git a/libgui/qterminal/libqterminal/QTerminal.cc b/libgui/qterminal/libqterminal/QTerminal.cc
--- a/libgui/qterminal/libqterminal/QTerminal.cc
+++ b/libgui/qterminal/libqterminal/QTerminal.cc
@@ -118,17 +118,29 @@ QTerminal::handleCustomContextMenuReques
             data << file_name << line;
             _edit_action->setData (data);
           }
       }
 
     _paste_action->setEnabled (cb->text().length() > 0);
     _copy_action->setEnabled (has_selected_text);
 
+    // Get the actions of any hotspots the filters may have found
+    QList<QAction*> actions = get_hotspot_actions (at);
+    if (actions.length ())
+      _contextMenu->addSeparator ();
+    for (int i = 0; i < actions.length (); i++)
+      _contextMenu->addAction (actions.at(i));
+
+    // Finally, show the context menu
     _contextMenu->exec (mapToGlobal (at));
+
+    // Cleaning up, remove actions of the hotspot
+    for (int i = 0; i < actions.length (); i++)
+      _contextMenu->removeAction (actions.at(i));
   }
 
 // slot for edit files in error messages
 void
 QTerminal::edit_file ()
 {
   QString file = _edit_action->data ().toStringList ().at (0);
   int line = _edit_action->data ().toStringList ().at (1).toInt ();
diff --git a/libgui/qterminal/libqterminal/QTerminal.h b/libgui/qterminal/libqterminal/QTerminal.h
--- a/libgui/qterminal/libqterminal/QTerminal.h
+++ b/libgui/qterminal/libqterminal/QTerminal.h
@@ -56,16 +56,19 @@ public:
   virtual void setSize (int h, int v) = 0;
 
   virtual void sendText (const QString& text) = 0;
 
   virtual QString selectedText () = 0;
 
   virtual void has_extra_interrupt (bool extra) = 0;
 
+  virtual QList<QAction*> get_hotspot_actions (const QPoint&)
+      { return QList<QAction*> (); }
+
   enum CursorType
   {
     UnderlineCursor,
     BlockCursor,
     IBeamCursor
   };
 
   virtual void setCursorType (CursorType type, bool blinking)
diff --git a/libgui/qterminal/libqterminal/unix/Filter.cpp b/libgui/qterminal/libqterminal/unix/Filter.cpp
--- a/libgui/qterminal/libqterminal/unix/Filter.cpp
+++ b/libgui/qterminal/libqterminal/unix/Filter.cpp
@@ -21,16 +21,17 @@
 
 // Own
 #include "unix/Filter.h"
 
 // System
 #include <iostream>
 
 // Qt
+#include <QDesktopServices>
 #include <QAction>
 #include <QApplication>
 #include <QClipboard>
 #include <QtCore/QString>
 
 #include <QtCore/QSharedData>
 #include <QtCore>
 
@@ -477,17 +478,17 @@ void UrlFilter::HotSpot::activate(QObjec
                 url.prepend("http://");
             }
         }
         else if ( kind == Email )
         {
             url.prepend("mailto:");
         }
 
-//        new KRun(url,QApplication::activeWindow());
+        QDesktopServices::openUrl (QUrl (url));
     }
 }
 
 // Note:  Altering these regular expressions can have a major effect on the performance of the filters
 // used for finding URLs in the text, especially if they are very general and could match very long
 // pieces of text.
 // Please be careful when altering them.
 
diff --git a/libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.cpp b/libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.cpp
--- a/libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.cpp
+++ b/libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.cpp
@@ -38,16 +38,19 @@ void QUnixTerminalImpl::initialize()
     m_terminalView->setBellMode(TerminalView::NotifyBell);
     m_terminalView->setTerminalSizeHint(true);
     m_terminalView->setContextMenuPolicy(Qt::CustomContextMenu);
     m_terminalView->setTripleClickMode(TerminalView::SelectWholeLine);
     m_terminalView->setTerminalSizeStartup(true);
     m_terminalView->setSize(80, 40);
     m_terminalView->setScrollBarPosition(TerminalView::ScrollBarRight);
 
+    UrlFilter *url_filter = new UrlFilter();
+    m_terminalView->filterChain ()->addFilter (url_filter);
+
     connect(m_terminalView, SIGNAL(customContextMenuRequested(QPoint)),
             this, SLOT(handleCustomContextMenuRequested(QPoint)));
 
     connect (m_terminalView, SIGNAL (interrupt_signal (void)),
              this, SLOT (terminal_interrupt ()));
 
 #ifdef Q_OS_MAC
     QFont font = QFont("Monaco");
@@ -82,16 +85,22 @@ void QUnixTerminalImpl::setScrollBufferS
     {
       m_terminalModel->clearHistory ();
       m_terminalModel->setHistoryType (HistoryTypeBuffer ( value ));
     }
   else
     m_terminalModel->setHistoryType (HistoryTypeNone ());
 }
 
+QList<QAction*>
+QUnixTerminalImpl::get_hotspot_actions (const QPoint& at)
+{
+  return m_terminalView->filterActions (at);
+}
+
 void QUnixTerminalImpl::connectToPty()
 {
     // Store the file descriptor associated with the STDERR stream onto
     // another temporary file descriptor for reconnect in the destructor.
     fdstderr = dup (STDERR_FILENO);
 
     int fds = m_kpty->slaveFd();
 
diff --git a/libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.h b/libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.h
--- a/libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.h
+++ b/libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.h
@@ -45,16 +45,17 @@ public:
 
     void setBackgroundColor (const QColor& color);
     void setForegroundColor (const QColor& color);
     void setSelectionColor (const QColor& color);
     void setCursorColor (bool useForegroundColor, const QColor& color);
     void setScrollBufferSize(int value);
     QString selectedText();
     void has_extra_interrupt (bool extra_interrupt);
+    QList<QAction*> get_hotspot_actions (const QPoint& at);
 
 public slots:
     void copyClipboard();
     void pasteClipboard();
     void selectAll();
 
 protected:
     void showEvent(QShowEvent *);
diff --git a/libgui/qterminal/libqterminal/unix/TerminalView.cpp b/libgui/qterminal/libqterminal/unix/TerminalView.cpp
--- a/libgui/qterminal/libqterminal/unix/TerminalView.cpp
+++ b/libgui/qterminal/libqterminal/unix/TerminalView.cpp
@@ -1385,16 +1385,19 @@ void TerminalView::blinkCursorEvent()
   if (_hasBlinkingCursor)
     _cursorBlinking = !_cursorBlinking;
   else
     _cursorBlinking = false;
 
   QRect cursorRect = imageToWidget( QRect(cursorPosition(),QSize(1,1)) );
 
   update(cursorRect);
+
+  // use this timer event for updating the hot spots
+  processFilters ();
 }
 
 /* ------------------------------------------------------------------------- */
 /*                                                                           */
 /*                                  Resizing                                 */
 /*                                                                           */
 /* ------------------------------------------------------------------------- */
 
@@ -1554,16 +1557,26 @@ void TerminalView::mousePressEvent(QMous
 
   int charLine;
   int charColumn;
   getCharacterPosition(ev->pos(),charLine,charColumn);
   QPoint pos = QPoint(charColumn,charLine);
 
   if ( ev->button() == Qt::LeftButton)
     {
+
+      Filter::HotSpot* spot = _filterChain->hotSpotAt(charLine,charColumn);
+      if ( spot && spot->type() == Filter::HotSpot::Link)
+        {
+          QList<QAction*> actions = spot->actions ();
+          if (actions.length ())
+            actions.at (0)->activate (QAction::Trigger);
+          return;
+        }
+
       _lineSelectionMode = false;
       _wordSelectionMode = false;
 
       emit isBusySelecting(true); // Keep it steady...
       // Drag only when the Control key is hold
       bool selected = false;
 
       // The receiver of the testIsSelected() signal will adjust
@@ -1640,16 +1653,20 @@ void TerminalView::mouseMoveEvent(QMouse
 
   getCharacterPosition(ev->pos(),charLine,charColumn);
 
   // handle filters
   // change link hot-spot appearance on mouse-over
   Filter::HotSpot* spot = _filterChain->hotSpotAt(charLine,charColumn);
   if ( spot && spot->type() == Filter::HotSpot::Link)
     {
+      // change mouse cursor when mouse is over links
+      if (! _mouseOverHotspotArea.isValid())
+        setCursor (Qt::PointingHandCursor);
+
       QRect previousHotspotArea = _mouseOverHotspotArea;
       _mouseOverHotspotArea.setCoords( qMin(spot->startColumn() , spot->endColumn()) * _fontWidth,
                                        spot->startLine() * _fontHeight,
                                        qMax(spot->startColumn() , spot->endColumn()) * _fontHeight,
                                        (spot->endLine()+1) * _fontHeight );
 
       // display tooltips when mousing over links
       // TODO: Extend this to work with filter types other than links
@@ -1658,16 +1675,17 @@ void TerminalView::mouseMoveEvent(QMouse
         {
           QToolTip::showText( mapToGlobal(ev->pos()) , tooltip , this , _mouseOverHotspotArea );
         }
 
       update( _mouseOverHotspotArea | previousHotspotArea );
     }
   else if ( _mouseOverHotspotArea.isValid() )
     {
+      setUsesMouse (true);
       update( _mouseOverHotspotArea );
       // set hotspot area to an invalid rectangle
       _mouseOverHotspotArea = QRect();
     }
 
   // for auto-hiding the cursor, we need mouseTracking
   if (ev->buttons() == Qt::NoButton ) return;
 
