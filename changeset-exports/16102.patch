# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1361842012 18000
#      Mon Feb 25 20:26:52 2013 -0500
# Node ID 679a54d274d92cc1b36814579f3cbd27687bc3e3
# Parent  8d19626b38ae22de6d9a5efab3291fa20c2f66be
move global parser_end_of_input variable to lexical_feedback class

* lex.h, lex.ll (parser_end_of_input): Move global variable to
lexical_feedback class.  Change all uses.
(reset_parser): Don't reset parser_end_of_input here.
* oct-parse.yy (eval_string, parse_fcn_file): Add lexer_flags object
to unwind_protect stack.  Don't protect parser_end_of_input.

diff --git a/libinterp/interpfcn/toplev.cc b/libinterp/interpfcn/toplev.cc
--- a/libinterp/interpfcn/toplev.cc
+++ b/libinterp/interpfcn/toplev.cc
@@ -627,17 +627,17 @@ main_loop (void)
                   else
                     {
                       if (octave_completion_matches_called)
                         octave_completion_matches_called = false;
                       else
                         command_editor::increment_current_command_number ();
                     }
                 }
-              else if (parser_end_of_input)
+              else if (lexer_flags.parser_end_of_input)
                 break;
             }
         }
       catch (octave_interrupt_exception)
         {
           recover_from_exception ();
           octave_stdout << "\n";
           if (quitting_gracefully)
diff --git a/libinterp/parse-tree/lex.h b/libinterp/parse-tree/lex.h
--- a/libinterp/parse-tree/lex.h
+++ b/libinterp/parse-tree/lex.h
@@ -66,17 +66,18 @@ public:
       at_beginning_of_statement (true),
       looking_at_anon_fcn_args (false), looking_at_return_list (false),
       looking_at_parameter_list (false), looking_at_decl_list (false),
       looking_at_initializer_expression (false),
       looking_at_matrix_or_assign_lhs (false),
       looking_for_object_index (false), 
       looking_at_indirect_ref (false), parsing_class_method (false),
       maybe_classdef_get_set_method (false), parsing_classdef (false),
-      quote_is_transpose (false), bracketflag (0), braceflag (0),
+      quote_is_transpose (false), parser_end_of_input (false),
+      bracketflag (0), braceflag (0),
       looping (0), defining_func (0), looking_at_function_handle (0),
       looking_at_object_index (), parsed_function_name (),
       pending_local_variables ()
   {
     init ();
   }
 
   lexical_feedback (const lexical_feedback& lf)
@@ -90,16 +91,17 @@ public:
       looking_at_initializer_expression (lf.looking_at_initializer_expression),
       looking_at_matrix_or_assign_lhs (lf.looking_at_matrix_or_assign_lhs),
       looking_for_object_index (lf.looking_for_object_index),
       looking_at_indirect_ref (lf.looking_at_indirect_ref),
       parsing_class_method (lf.parsing_class_method),
       maybe_classdef_get_set_method (lf.maybe_classdef_get_set_method),
       parsing_classdef (lf.parsing_classdef),
       quote_is_transpose (lf.quote_is_transpose),
+      parser_end_of_input (lf.parser_end_of_input),
       bracketflag (lf.bracketflag),
       braceflag (lf.braceflag),
       looping (lf.looping),
       defining_func (lf.defining_func),
       looking_at_function_handle (lf.looking_at_function_handle),
       looking_at_object_index (lf.looking_at_object_index),
       parsed_function_name (lf.parsed_function_name),
       pending_local_variables (lf.pending_local_variables)
@@ -119,16 +121,17 @@ public:
         looking_at_initializer_expression = lf.looking_at_initializer_expression;
         looking_at_matrix_or_assign_lhs = lf.looking_at_matrix_or_assign_lhs;
         looking_for_object_index = lf.looking_for_object_index;
         looking_at_indirect_ref = lf.looking_at_indirect_ref;
         parsing_class_method = lf.parsing_class_method;
         maybe_classdef_get_set_method = lf.maybe_classdef_get_set_method;
         parsing_classdef = lf.parsing_classdef;
         quote_is_transpose = lf.quote_is_transpose;
+        parser_end_of_input = lf.parser_end_of_input;
         bracketflag = lf.bracketflag;
         braceflag = lf.braceflag;
         looping = lf.looping;
         defining_func = lf.defining_func;
         looking_at_function_handle = lf.looking_at_function_handle;
         looking_at_object_index = lf.looking_at_object_index;
         parsed_function_name = lf.parsed_function_name;
         pending_local_variables = lf.pending_local_variables;
@@ -194,16 +197,19 @@ public:
   bool maybe_classdef_get_set_method;
 
   // TRUE means we are parsing a classdef file
   bool parsing_classdef;
 
   // Return transpose or start a string?
   bool quote_is_transpose;
 
+  // TRUE means that we have encountered EOF on the input stream.
+  bool parser_end_of_input;
+
   // Square bracket level count.
   int bracketflag;
 
   // Curly brace level count.
   int braceflag;
 
   // TRUE means we're in the middle of defining a loop.
   int looping;
@@ -243,15 +249,12 @@ private:
   // No copying!
   stream_reader (const stream_reader&);
   stream_reader& operator = (const stream_reader&);
 };
 
 extern std::string
 grab_comment_block (stream_reader& reader, bool at_bol, bool& eof);
 
-// TRUE means that we have encountered EOF on the input stream.
-extern bool parser_end_of_input;
-
 // Flags that need to be shared between the lexer and parser.
 extern lexical_feedback lexer_flags;
 
 #endif
diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -205,19 +205,16 @@ along with Octave; see the file COPYING.
 #define LEXER_DEBUG(pattern) \
   do \
     { \
       if (lexer_debug_flag) \
         lexer_debug (pattern, yytext); \
     } \
   while (0)
 
-// TRUE means that we have encountered EOF on the input stream.
-bool parser_end_of_input = false;
-
 // The state of the lexer.
 lexical_feedback lexer_flags;
 
 // Stack to hold tokens so that we can delete them when the parser is
 // reset and avoid growing forever just because we are stashing some
 // information.  This has to appear before lex.h is included, because
 // one of the macros defined there uses token_stack.
 //
@@ -1107,18 +1104,16 @@ do_comma_insert_check (void)
 // doing any parsing.
 
 void
 reset_parser (void)
 {
   // Start off on the right foot.
   BEGIN (INITIAL);
 
-  parser_end_of_input = false;
-
   parser_symtab_context.clear ();
 
   // We do want a prompt by default.
   promptflag = 1;
 
   // We are not in a block comment.
   block_comment_nesting_level = 0;
 
diff --git a/libinterp/parse-tree/oct-parse.yy b/libinterp/parse-tree/oct-parse.yy
--- a/libinterp/parse-tree/oct-parse.yy
+++ b/libinterp/parse-tree/oct-parse.yy
@@ -557,17 +557,17 @@ input           : input1
                 | parse_error
                   { ABORT_PARSE; }
                 ;
 
 input1          : '\n'
                   { $$ = 0; }
                 | END_OF_INPUT
                   {
-                    parser_end_of_input = 1;
+                    lexer_flags.parser_end_of_input = 1;
                     $$ = 0;
                   }
                 | simple_list
                   { $$ = $1; }
                 | simple_list '\n'
                   { $$ = $1; }
                 | simple_list END_OF_INPUT
                   { $$ = $1; }
@@ -3512,26 +3512,27 @@ parse_fcn_file (const std::string& ff, c
 
       if (! help_txt.empty ())
         help_buf.push (help_txt);
 
       if (! eof)
         {
           std::string file_type;
 
+          frame.protect_var (lexer_flags);
+
           frame.protect_var (get_input_from_eval_string);
-          frame.protect_var (parser_end_of_input);
           frame.protect_var (reading_fcn_file);
           frame.protect_var (reading_script_file);
           frame.protect_var (reading_classdef_file);
           frame.protect_var (Vecho_executing_commands);
 
+          lexer_flags = lexical_feedback ();
 
           get_input_from_eval_string = false;
-          parser_end_of_input = false;
 
           if (! force_script && looking_at_function_keyword (ffile))
             {
               file_type = "function";
 
               Vecho_executing_commands = ECHO_OFF;
 
               reading_classdef_file = false;
@@ -4307,35 +4308,37 @@ another function for the given type sign
 
 octave_value_list
 eval_string (const std::string& s, bool silent, int& parse_status, int nargout)
 {
   octave_value_list retval;
 
   unwind_protect frame;
 
+  frame.protect_var (lexer_flags);
+
   frame.protect_var (input_line_number);
   frame.protect_var (current_input_column);
   frame.protect_var (get_input_from_eval_string);
-  frame.protect_var (parser_end_of_input);
   frame.protect_var (line_editing);
   frame.protect_var (current_eval_string);
   frame.protect_var (current_function_depth);
   frame.protect_var (function_scopes);
   frame.protect_var (max_function_depth);
   frame.protect_var (parsing_subfunctions);
   frame.protect_var (endfunction_found);
   frame.protect_var (reading_fcn_file);
   frame.protect_var (reading_script_file);
   frame.protect_var (reading_classdef_file);
 
+  lexer_flags = lexical_feedback ();
+
   input_line_number = 1;
   current_input_column = 1;
   get_input_from_eval_string = true;
-  parser_end_of_input = false;
   line_editing = false;
   current_function_depth = 0;
   function_scopes.clear ();
   max_function_depth = 0;
   parsing_subfunctions = false;
   endfunction_found = false;
   reading_fcn_file = false;
   reading_script_file = false;
@@ -4422,17 +4425,17 @@ eval_string (const std::string& s, bool 
                 error ("eval: invalid use of statement list");
 
               if (error_state
                   || tree_return_command::returning
                   || tree_break_command::breaking
                   || tree_continue_command::continuing)
                 break;
             }
-          else if (parser_end_of_input)
+          else if (lexer_flags.parser_end_of_input)
             break;
         }
     }
   while (parse_status == 0);
 
   return retval;
 }
 
