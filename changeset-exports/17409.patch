# HG changeset patch
# User Ben Kurtz <hidden email>
# Date 1378470245 -7200
#      Fri Sep 06 14:24:05 2013 +0200
# Node ID 3baf8e7ec3ddb153017e7544df74da7b9ae3fb62
# Parent  266fafd1ffc1187773cb8b86c4f9a81144b2d75c
str2double.cc: make output more consistent and ML-compatible, update help text, add tests (bug #39838)

diff --git a/libinterp/corefcn/str2double.cc b/libinterp/corefcn/str2double.cc
--- a/libinterp/corefcn/str2double.cc
+++ b/libinterp/corefcn/str2double.cc
@@ -315,36 +315,45 @@ a and b are real numbers and the complex
 @item i*b + a\n\
 @end itemize\n\
 \n\
 If present, a and/or b are of the form @nospell{[+-]d[,.]d[[eE][+-]d]} where\n\
 the brackets indicate optional arguments and @qcode{'d'} indicates zero or\n\
 more digits.  The special input values @code{Inf}, @code{NaN}, and @code{NA}\n\
 are also accepted.\n\
 \n\
-@var{s} may also be a character matrix, in which case the conversion is\n\
-repeated for each row.  Or @var{s} may be a cell array of strings, in which\n\
-case each element is converted and an array of the same dimensions is\n\
-returned.\n\
+@var{s} can be a character string, a character matrix or a cell array.\n\
+For character arrays the conversion is repeated for every row, and\n\
+a double or complex array is returned in which rows corresponding to\n\
+zero-length rows in @var{s} are deleted.  In case of a cell array @var{s} each\n\
+character string element is processed and a double or complex array of the\n\
+same dimensions as @var{s} is returned.\n\
 \n\
-@code{str2double} returns NaN for elements of @var{s} which cannot be\n\
-converted.\n\
+For unconvertible scalar or character string input @code{str2double} returns\n\
+a NaN.  Similarly, for character array input @code{str2double} returns a NaN\n\
+for any row of @var{s} that could not be converted.  For a cell array\n\
+@code{str2double} returns a NaN for any element of @var{s} for which\n\
+conversion fails, which includes numeric elements.\n\
 \n\
 @code{str2double} can replace @code{str2num}, and it avoids the security\n\
 risk of using @code{eval} on unknown data.\n\
 @seealso{str2num}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () != 1)
     print_usage ();
   else if (args(0).is_string ())
     {
-      if (args(0).rows () == 1 && args(0).ndims () == 2)
+      if (args(0).rows () == 0 || args(0).columns () == 0)
+        {
+          retval = Matrix (1, 1, octave_NaN);
+        }
+      else if (args(0).rows () == 1 && args(0).ndims () == 2)
         {
           retval = str2double1 (args(0).string_value ());
         }
       else
         {
           const string_vector sv = args(0).all_strings ();
           if (! error_state)
             retval = sv.map<Complex> (str2double1);
@@ -361,17 +370,17 @@ risk of using @code{eval} on unknown dat
         {
           if (cell(i).is_string ())
             output(i) = str2double1 (cell(i).string_value ());
         }
         retval = output;
       }
     }
   else
-    retval = NDArray (args(0).dims (), octave_NaN);
+    retval = Matrix (1, 1, octave_NaN);
 
 
   return retval;
 }
 
 /*
 %!assert (str2double ("1"), 1)
 %!assert (str2double ("-.1e-5"), -1e-6)
@@ -395,10 +404,13 @@ risk of using @code{eval} on unknown dat
 %!assert (str2double ("-Inf"), -Inf)
 %!assert (str2double ("Inf*i"), complex (0, Inf))
 %!assert (str2double ("iNF*i"), complex (0, Inf))
 %!assert (str2double ("NaN + Inf*i"), complex (NaN, Inf))
 %!assert (str2double ("Inf - Inf*i"), complex (Inf, -Inf))
 %!assert (str2double ("-i*NaN - Inf"), complex (-Inf, -NaN))
 %!assert (str2double ({"abc", "4i"}), [NaN + 0i, 4i])
 %!assert (str2double ({2, "4i"}), [NaN + 0i, 4i])
-%!assert (str2double (zeros (3,1,2)), NaN (3,1,2))
-*/
+%!assert (str2double (zeros (3,1,2)), NaN)
+%!assert (str2double (''), NaN)
+%!assert (str2double ([]), NaN)
+%!assert (str2double (char(zeros(3,0))), NaN)
+ */
