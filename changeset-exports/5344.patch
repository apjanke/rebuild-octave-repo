# HG changeset patch
# User jwe
# Date 1115665383 0
#      Mon May 09 19:03:03 2005 +0000
# Node ID b427cca320b812596321fe6d34b4ca064e7ab018
# Parent  be0bd7a760c9322bd44c5cf1a835dc5457cc620f
[project @ 2005-05-09 19:03:02 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2005-05-09  John W. Eaton  <jwe@octave.org>
+
+	* parse.y (except_command): Make catch clause optional in try
+	statements.
+	* pt-except.cc (tree_try_catch_command::eval):
+	Always buffer error messages.
+
 2005-05-06  John W. Eaton  <jwe@octave.org>
 
 	* ov-struct.cc (octave_struct::save_ascii,
 	octave_struct::save_binary, octave_sruct::save_hdf5):
 	Always save cell array.
 	(octave_struct::load_ascii, octave_struct::load_binary,
 	octave_sruct::load_hdf5): Try to read old-style files correctly.
 
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -1111,16 +1111,21 @@ except_command	: UNWIND stash_comment op
 		      ABORT_PARSE;
 		  }
 		| TRY stash_comment opt_sep opt_list CATCH
 		  stash_comment opt_sep opt_list END
 		  {
 		    if (! ($$ = make_try_command ($1, $4, $8, $9, $2, $6)))
 		      ABORT_PARSE;
 		  }
+		| TRY stash_comment opt_sep opt_list END
+		  {
+		    if (! ($$ = make_try_command ($1, $4, 0, $5, $2, 0)))
+		      ABORT_PARSE;
+		  }
 		;
 
 // ===========================================
 // Some `subroutines' for function definitions
 // ===========================================
 
 save_symtab	: // empty
 		  { symtab_context.push (curr_sym_tab); }
diff --git a/src/pt-except.cc b/src/pt-except.cc
--- a/src/pt-except.cc
+++ b/src/pt-except.cc
@@ -90,21 +90,18 @@ do_catch_code (void *ptr)
 
 void
 tree_try_catch_command::eval (void)
 {
   unwind_protect::begin_frame ("tree_try_catch::eval");
   
   MAYBE_DO_BREAKPOINT;
 
-  if (catch_code)
-    {
-      unwind_protect_int (buffer_error_messages);
-      buffer_error_messages++;
-    }
+  unwind_protect_int (buffer_error_messages);
+  buffer_error_messages++;
 
   unwind_protect::add (do_catch_code, catch_code);
 
   if (try_code)
     try_code->eval ();
 
   if (catch_code && error_state)
     {
@@ -117,18 +114,17 @@ tree_try_catch_command::eval (void)
 
       // Unwind stack elements must be cleared or run in the reverse
       // order in which they were added to the stack.
 
       // For clearing the do_catch_code cleanup function.
       unwind_protect::discard ();
 
       // For restoring buffer_error_messages.
-      if (catch_code)
-	unwind_protect::run ();
+      unwind_protect::run ();
 
       // Also clear the frame marker.
       unwind_protect::discard ();
     }
 }
 
 void
 tree_try_catch_command::accept (tree_walker& tw)
