# HG changeset patch
# User Max Brister <max@2bass.com>
# Date 1338931689 18000
#      Tue Jun 05 16:28:09 2012 -0500
# Node ID 78e1457c5bf55393f9b80f8d335f8e1a0f7fc33c
# Parent  32deb562ae77086ae6b4bc55c800fd69b5d36159
Remove some macros from pt-jit.h and pt-jit.cc

diff --git a/src/pt-jit.cc b/src/pt-jit.cc
--- a/src/pt-jit.cc
+++ b/src/pt-jit.cc
@@ -766,17 +766,17 @@ jit_block::prepend (jit_instruction *ins
 
 jit_instruction *
 jit_block::prepend_after_phi (jit_instruction *instr)
 {
   // FIXME: Make this O(1)
   for (iterator iter = begin (); iter != end (); ++iter)
     {
       jit_instruction *temp = *iter;
-      if (! temp->is_phi ())
+      if (! isa<jit_phi> (temp))
         {
           insert_before (iter, instr);
           return instr;
         }
     }
 
   return append (instr);
 }
@@ -808,17 +808,17 @@ jit_block::insert_after (iterator loc, j
 
 jit_terminator *
 jit_block::terminator (void) const
 {
   if (instructions.empty ())
     return 0;
 
   jit_instruction *last = instructions.back ();
-  return last->to_terminator ();
+  return dynamic_cast<jit_terminator *> (last);
 }
 
 jit_block *
 jit_block::pred (size_t idx) const
 {
   // FIXME: Make this O(1)
   
   // here we get the use in backwards order. This means we preserve phi
@@ -1122,20 +1122,18 @@ jit_convert::jit_convert (llvm::Module *
   std::cout << tee.str_print_code () << std::endl;
   print_blocks ("octave jit ir");
 #endif
 
   // for now just init arguments from entry, later we will have to do something
   // more interesting
   for (jit_block::iterator iter = entry_block->begin ();
        iter != entry_block->end (); ++iter)
-    {
-      if (jit_extract_argument *extract = (*iter)->to_extract_argument ())
-        arguments.push_back (std::make_pair (extract->name (), true));
-    }
+    if (jit_extract_argument *extract = dynamic_cast<jit_extract_argument *> (*iter))
+      arguments.push_back (std::make_pair (extract->name (), true));
 
   convert_llvm to_llvm;
   function = to_llvm.convert (module, arguments, blocks);
 
 #ifdef OCTAVE_JIT_DEBUG
   std::cout << "-------------------- llvm ir --------------------";
   llvm::raw_os_ostream llvm_cout (std::cout);
   function->print (llvm_cout);
@@ -1790,40 +1788,38 @@ jit_convert::construct_ssa (jit_block *f
 
 void
 jit_convert::do_construct_ssa (jit_block& block)
 {
   // replace variables with their current SSA value
   for (jit_block::iterator iter = block.begin (); iter != block.end (); ++iter)
     {
       jit_instruction *instr = *iter;
-      if (! instr->is_phi ())
+      if (! isa<jit_phi> (instr))
         {
           for (size_t i = 0; i < instr->argument_count (); ++i)
             {
-              jit_variable *var;
-              var = instr->argument_variable (i);
-              assert (var == instr->argument (i)->to_variable ());
-              assert (var == dynamic_cast<jit_variable *> (instr->argument (i)));
+              jit_value *arg = instr->argument (i);
+              jit_variable *var = dynamic_cast<jit_variable *> (arg);
               if (var)
                 instr->stash_argument (i, var->top ());
             }
         }
 
       instr->push_variable ();
     }
 
   // finish phi nodes of sucessors
   for (size_t i = 0; i < block.succ_count (); ++i)
     {
       jit_block *finish = block.succ (i);
       size_t pred_idx = finish->pred_index (&block);
 
       for (jit_block::iterator iter = finish->begin (); iter != finish->end ()
-             && (*iter)->is_phi (); ++iter)
+             && isa<jit_phi> (*iter); ++iter)
         {
           jit_instruction *phi = *iter;
           jit_variable *var = phi->tag ();
           phi->stash_argument (pred_idx, var->top ());
         }
     }
 }
 
@@ -1849,34 +1845,35 @@ jit_convert::finish_breaks (jit_block *d
 void
 jit_convert::release_placer::operator() (jit_block& block)
 {
   for (jit_block::iterator iter = block.begin (); iter != block.end (); ++iter)
     {
       jit_instruction *instr = *iter;
       for (size_t i = 0; i < instr->argument_count (); ++i)
         {
-          jit_instruction *arg = instr->argument_instruction (i);
+          jit_value *varg = instr->argument (i);
+          jit_instruction *arg = dynamic_cast<jit_instruction *> (varg);
           if (arg && arg->tag ())
             {
               jit_variable *tag = arg->tag ();
               tag->stash_last_use (instr);
             }
         }
 
       jit_variable *tag = instr->tag ();
-      if (tag && ! (instr->is_phi () || instr->is_store_argument ())
+      if (tag && ! (isa<jit_phi> (instr) || isa<jit_store_argument> (instr))
           && tag->has_top ())
         {
           jit_instruction *last_use = tag->last_use ();
           jit_call *release = convert.create<jit_call> (jit_typeinfo::release,
                                                         tag->top ());
           release->infer ();
           if (last_use && last_use->parent () == &block
-              && ! last_use->is_phi ())
+              && ! isa<jit_phi> (last_use))
             block.insert_after (last_use->location (), release);
           else
             block.prepend_after_phi (release);
         }
 
       instr->push_variable ();
     }
 }
@@ -1926,17 +1923,17 @@ jit_convert::convert_llvm::convert (llvm
       for (biter = blocks.begin (); biter != blocks.end (); ++biter)
         visit (*biter);
 
       // now finish phi nodes
       for (biter = blocks.begin (); biter != blocks.end (); ++biter)
         {
           jit_block& block = **biter;
           for (jit_block::iterator piter = block.begin ();
-               piter != block.end () && (*piter)->is_phi (); ++piter)
+               piter != block.end () && isa<jit_phi> (*piter); ++piter)
             {
               jit_instruction *phi = *piter;
               finish_phi (phi);
             }
         }
 
       jit_block *last = blocks.back ();
       builder.SetInsertPoint (last->to_llvm ());
@@ -1955,17 +1952,17 @@ jit_convert::convert_llvm::finish_phi (j
 {
   jit_block *pblock = phi->parent ();
   llvm::PHINode *llvm_phi = llvm::cast<llvm::PHINode> (phi->to_llvm ());
 
   bool can_remove = llvm_phi->use_empty ();
   if (! can_remove && llvm_phi->hasOneUse () && phi->use_count () == 1)
     {
       jit_instruction *user = phi->first_use ()->user ();
-      can_remove = user->is_call (); // must be a remove
+      can_remove = isa<jit_call> (user); // must be a remove
     }
 
   if (can_remove)
     {
       // replace with releases along each incomming branch
       while (! llvm_phi->use_empty ())
         {
           llvm::Instruction *llvm_instr;
diff --git a/src/pt-jit.h b/src/pt-jit.h
--- a/src/pt-jit.h
+++ b/src/pt-jit.h
@@ -57,22 +57,21 @@ along with Octave; see the file COPYING.
 // The octave low level IR is a linear IR, it works by converting everything to
 // calls to jit_functions. This turns expressions like c = a + b into
 // c = call binary+ (a, b)
 // The jit_functions contain information about overloads for differnt types. For
 // example, if we know a and b are scalars, then c must also be a scalar.
 //
 //
 // TODO:
-// 1. Rename symbol_table::symbol_record_ref -> symbol_table::symbol_reference
+// 1. Support error cases
 // 2. Support some simple matrix case (and cleanup Octave low level IR)
-// 3. Support error cases
-// 4. Fix memory leaks in JIT
-// 5. Cleanup/documentation
-// 6. ...
+// 3. Fix memory leaks in JIT
+// 4. Cleanup/documentation
+// 5. ...
 // ---------------------------------------------------------
 
 
 // we don't want to include llvm headers here, as they require __STDC_LIMIT_MACROS
 // and __STDC_CONSTANT_MACROS be defined in the entire compilation unit
 namespace llvm
 {
   class Value;
@@ -86,16 +85,24 @@ namespace llvm
   class Type;
   class Twine;
 }
 
 class octave_base_value;
 class octave_value;
 class tree;
 
+// Use like: isa<jit_phi> (value)
+// basically just a short cut type typing dyanmic_cast.
+template <typename T, typename U>
+bool isa (U *value)
+{
+  return dynamic_cast<T *> (value);
+}
+
 // jit_range is compatable with the llvm range structure
 struct
 jit_range
 {
   jit_range (const Range& from) : base (from.base ()), limit (from.limit ()),
     inc (from.inc ()), nelem (from.nelem ())
     {}
 
@@ -528,38 +535,32 @@ private:
   JIT_METH(variable)
 
 #define JIT_VISIT_IR_CONST                      \
   JIT_METH(const_scalar)                        \
   JIT_METH(const_index)                         \
   JIT_METH(const_string)                        \
   JIT_METH(const_range)
 
-#define JIT_VISIT_IR_ABSTRACT                   \
-  JIT_METH(instruction)                         \
-  JIT_METH(terminator)
-
 #define JIT_VISIT_IR_CLASSES                    \
   JIT_VISIT_IR_NOTEMPLATE                       \
   JIT_VISIT_IR_CONST
 
-#define JIT_VISIT_IR_ALL                        \
-  JIT_VISIT_IR_CLASSES                          \
-  JIT_VISIT_IR_ABSTRACT
-
 // forward declare all ir classes
 #define JIT_METH(cname)                         \
   class jit_ ## cname;
 
-JIT_VISIT_IR_ABSTRACT
 JIT_VISIT_IR_NOTEMPLATE
 
 #undef JIT_METH
 
-// constants are typedefs from jit_const
+// ABCs which aren't included in  JIT_VISIT_IR_ALL
+class jit_instruction;
+class jit_terminator;
+
 template <typename T, jit_type *(*EXTRACT_T)(void), typename PASS_T = T,
           bool QUOTE=false>
 class jit_const;
 
 typedef jit_const<double, jit_typeinfo::get_scalar> jit_const_scalar;
 typedef jit_const<octave_idx_type, jit_typeinfo::get_index> jit_const_index;
 
 typedef jit_const<std::string, jit_typeinfo::get_string, const std::string&, true>
@@ -625,31 +626,16 @@ public:
     return llvm_value;
   }
 
   void stash_llvm (llvm::Value *compiled)
   {
     llvm_value = compiled;
   }
 
-#define JIT_METH(cname)                                         \
-  virtual bool is_ ## cname (void) const                        \
-  { return false; }                                             \
-                                                                \
-  virtual jit_ ## cname *to_ ## cname (void)                    \
-  { return 0; }                                                 \
-                                                                \
-  virtual const jit_ ## cname *to_ ## cname (void) const        \
-  { return 0; }
-
-JIT_VISIT_IR_NOTEMPLATE
-JIT_VISIT_IR_ABSTRACT
-
-#undef JIT_METH
-
 protected:
   std::ostream& print_indent (std::ostream& os, size_t indent) const
   {
     for (size_t i = 0; i < indent * 8; ++i)
       os << " ";
     return os;
   }
 
@@ -657,26 +643,16 @@ protected:
 private:
   jit_type *ty;
   jit_use *use_head;
   size_t myuse_count;
 };
 
 std::ostream& operator<< (std::ostream& os, const jit_value& value);
 
-#define JIT_GEN_CASTS(cname)                                    \
-  virtual bool is_ ## cname (void) const                        \
-  { return true; }                                              \
-                                                                \
-  virtual jit_ ## cname *to_ ## cname (void)                    \
-  { return this; }                                              \
-                                                                \
-  virtual const jit_ ## cname *to_ ## cname (void) const        \
-  { return this; }
-
 class
 jit_use
 {
 public:
   jit_use (void) : mvalue (0), mnext (0), mprev (0), muser (0), mindex (0) {}
 
   // we should really have a move operator, but not until c++11 :(
   jit_use (const jit_use& use) : mvalue (0), mnext (0), mprev (0), muser (0),
@@ -830,30 +806,16 @@ public:
   }
 
   llvm::Type *argument_type_llvm (size_t i) const
   {
     assert (argument (i));
     return argument_type (i)->to_llvm ();
   }
 
-  // generate functions of form argument_type where type is any subclass of
-  // jit_value
-#define JIT_METH(cname)                                 \
-  jit_ ## cname *argument_ ## cname (size_t i) const    \
-  {                                                     \
-    jit_value *arg = argument (i);                      \
-    return arg ? arg->to_ ## cname () : 0;              \
-  }
-
-JIT_VISIT_IR_ABSTRACT
-JIT_VISIT_IR_NOTEMPLATE
-
-#undef JIT_METH
-
   std::ostream& print_argument (std::ostream& os, size_t i) const
   {
     if (argument (i))
       return argument (i)->short_print (os); 
     else
       return os << "NULL";
   }
 
@@ -909,18 +871,16 @@ JIT_VISIT_IR_NOTEMPLATE
   {
     mparent = aparent;
     mlocation = alocation;
   }
 
   jit_variable *tag (void) const;
 
   void stash_tag (jit_variable *atag);
-
-  JIT_GEN_CASTS (instruction)
 protected:
   std::vector<jit_type *> already_infered;
 private:
   static size_t next_id (bool reset = false)
   {
     static size_t ret = 0;
     if (reset)
       return ret = 0;
@@ -1150,17 +1110,16 @@ public:
   virtual std::ostream& short_print (std::ostream& os) const
   {
     return os << mname;
   }
 
   llvm::BasicBlock *to_llvm (void) const;
 
   JIT_VALUE_ACCEPT (block)
-  JIT_GEN_CASTS (block)
 private:
   void compute_df (size_t visit_count);
 
   bool update_idom (size_t visit_count);
 
   void create_dom_tree (size_t visit_count);
 
   jit_block *idom_intersect (jit_block *b);
@@ -1283,17 +1242,16 @@ public:
   }
 
   virtual std::ostream& print (std::ostream& os, size_t indent) const
   {
     return print_indent (os, indent) << mname;
   }
 
   JIT_VALUE_ACCEPT (variable)
-  JIT_GEN_CASTS (variable)
 private:
   std::string mname;
   std::stack<jit_value *> value_stack;
   jit_instruction *mlast_use;
 };
 
 class
 jit_phi : public jit_instruction
@@ -1352,17 +1310,16 @@ public:
         if (i + 1 < argument_count ())
           os << std::endl;
       }
 
     return os;
   }
 
   JIT_VALUE_ACCEPT (phi);
-  JIT_GEN_CASTS (phi)
 };
 
 class
 jit_terminator : public jit_instruction
 {
 public:
   jit_terminator (jit_value *arg0) : jit_instruction (arg0) {}
 
@@ -1383,18 +1340,16 @@ public:
   }
 
   std::ostream& print_sucessor (std::ostream& os, size_t idx = 0) const
   {
     return sucessor (idx)->short_print (os);
   }
 
   virtual size_t sucessor_count (void) const = 0;
-
-  JIT_GEN_CASTS (terminator)
 };
 
 class
 jit_break : public jit_terminator
 {
 public:
   jit_break (jit_block *succ) : jit_terminator (succ) {}
 
@@ -1408,17 +1363,16 @@ public:
 
   virtual std::ostream& print (std::ostream& os, size_t indent) const
   {
     print_indent (os, indent) << "break: ";
     return print_sucessor (os);
   }
 
   JIT_VALUE_ACCEPT (break)
-  JIT_GEN_CASTS (break)
 };
 
 class
 jit_cond_break : public jit_terminator
 {
 public:
   jit_cond_break (jit_value *c, jit_block *ctrue, jit_block *cfalse)
     : jit_terminator (c, ctrue, cfalse) {}
@@ -1447,17 +1401,16 @@ public:
   {
     print_indent (os, indent) << "cond_break: ";
     print_cond (os) << ", ";
     print_sucessor (os, 0) << ", ";
     return print_sucessor (os, 1);
   }
 
   JIT_VALUE_ACCEPT (cond_break)
-  JIT_GEN_CASTS (cond_break)
 };
 
 class
 jit_call : public jit_instruction
 {
 public:
   jit_call (const jit_function& afunction,
             jit_value *arg0) : jit_instruction (arg0), mfunction (afunction) {}
@@ -1513,17 +1466,16 @@ public:
 
   virtual bool dead (void) const;
 
   virtual bool almost_dead (void) const;
 
   virtual bool infer (void);
 
   JIT_VALUE_ACCEPT (call)
-  JIT_GEN_CASTS (call)
 private:
   const jit_function& mfunction;
 };
 
 class
 jit_extract_argument : public jit_instruction
 {
 public:
@@ -1548,17 +1500,16 @@ public:
   {
     print_indent (os, indent);
     os << "exract ";
     short_print (os);
     return os;
   }
 
   JIT_VALUE_ACCEPT (extract_argument)
-  JIT_GEN_CASTS (extract_argument)
 };
 
 class
 jit_store_argument : public jit_instruction
 {
 public:
   jit_store_argument (jit_variable *var)
     : jit_instruction (var)
@@ -1595,17 +1546,16 @@ public:
   {
     jit_value *res = result ();
     print_indent (os, indent) << "store ";
     short_print (os) << " = ";
     return res->short_print (os);
   }
 
   JIT_VALUE_ACCEPT (store_argument)
-  JIT_GEN_CASTS (store_argument)
 };
 
 class
 jit_ir_walker
 {
 public:
   virtual ~jit_ir_walker () {}
 
@@ -1947,10 +1897,16 @@ private:
   typedef void (*jited_function)(octave_base_value**);
 
   llvm::ExecutionEngine *engine;
   jited_function function;
 
   std::vector<std::pair<std::string, bool> > arguments;
   type_bound_vector bounds;
 };
+
+// some #defines we use in the header, but not the cc file
+#undef JIT_VISIT_IR_CLASSES
+#undef JIT_VISIT_IR_CONST
+#undef JIT_VALUE_ACCEPT
+
 #endif
 #endif
