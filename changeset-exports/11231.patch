# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1289440532 18000
#      Wed Nov 10 20:55:32 2010 -0500
# Node ID 2f29b765c0ef7dfb7c3e0d8d9a1a7c142cb79928
# Parent  9c6143abf9e1a3792dfbf826b901f764566bc038
eliminate special cases for __EMX__ systems

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2010-11-10  John W. Eaton  <jwe@octave.org>
+
+	* lo-sysdep.cc (octave_chdir): Delete special case for __EMX__.
+	* oct-env.cc (octave_env::do_make_absolute): Likewise.
+
 2010-11-10  John W. Eaton  <jwe@octave.org>
 
 	* lo-ieee.h: Eliminate special cases for SCO.
 	* lo-ieee.cc (octave_ieee_init): Eliminate special cases for SCO.
 
 2010-11-09  John W. Eaton  <jwe@octave.org>
 
 	* lo-mappers.h (xmod, xrem): Don't copy sign if result is zero.
diff --git a/liboctave/lo-sysdep.cc b/liboctave/lo-sysdep.cc
--- a/liboctave/lo-sysdep.cc
+++ b/liboctave/lo-sysdep.cc
@@ -67,43 +67,22 @@ octave_getcwd (void)
   return retval;
 }
 
 int
 octave_chdir (const std::string& path_arg)
 {
   std::string path = file_ops::tilde_expand (path_arg);
 
-#if defined (__EMX__)
-  int retval = -1;
-
-  char *tmp_path = strsave (path.c_str ());
-
-  if (path.length () == 2 && path[1] == ':')
-    {
-      char *upper_case_dir_name = strupr (tmp_path);
-      _chdrive (upper_case_dir_name[0]);
-      if (_getdrive () == upper_case_dir_name[0])
-        retval = _chdir2 ("/");
-    }
-  else
-    retval = _chdir2 (tmp_path);
-
-  delete [] tmp_path;
-
-  return retval;
-#else
-
 #if defined (__WIN32__) && ! defined (__CYGWIN__)
   if (path.length() == 2 && path[1] == ':')
     path += "\\";
 #endif
 
   return chdir (path.c_str ());
-#endif
 }
 
 #if defined (__WIN32__) && ! defined (__CYGWIN__)
 
 pid_t
 octave_popen2 (const std::string& cmd, const string_vector& args, bool sync_mode,
     int *fildes, std::string& msg)
 {
diff --git a/liboctave/oct-env.cc b/liboctave/oct-env.cc
--- a/liboctave/oct-env.cc
+++ b/liboctave/oct-env.cc
@@ -316,21 +316,16 @@ octave_env::do_base_pathname (const std:
 
 // Turn STRING (a pathname) into an absolute pathname, assuming that
 // DOT_PATH contains the symbolic location of the current directory.
 
 std::string
 octave_env::do_make_absolute (const std::string& s,
                               const std::string& dot_path) const
 {
-#if defined (__EMX__)
-  if (s.length () > 1 && s[1] == ':')
-    return s;
-#endif
-
   if (dot_path.empty () || s.empty () || do_absolute_pathname (s))
     return s;
 
   std::string current_dir = dot_path;
 
   if (current_dir.empty ())
     current_dir = do_getcwd ();
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2010-11-10  John W. Eaton  <jwe@octave.org>
+
+	* sighandlers.cc (MAYBE_ACK_SIGNAL): Delete macro and all uses.
+	(sigchld_handler): Delete special case for __EMX__.
+	* sysdep.cc (sysdep_init): Eliminate special case for __EMX__.
+	(OS2_init, Fextproc): Delete.
+
 2010-11-10  John W. Eaton  <jwe@octave.org>
 
 	* sysdep.cc (sysdep_init): Eliminate special case for SCO.
 	(SCO_init): Delete.
 
 2010-11-10  John W. Eaton  <jwe@octave.org>
 
 	* DLD-FUNCTIONS/__dispatch__.cc: Rename from dispatch.cc.
diff --git a/src/sighandlers.cc b/src/sighandlers.cc
--- a/src/sighandlers.cc
+++ b/src/sighandlers.cc
@@ -66,25 +66,16 @@ static bool Vdebug_on_interrupt = false;
 // Allow users to avoid writing octave-core for SIGHUP (sent by
 // closing gnome-terminal, for example).  Note that this variable has
 // no effect if Vcrash_dumps_octave_core is FALSE.
 static bool Vsighup_dumps_octave_core = true;
 
 // Similar to Vsighup_dumps_octave_core, but for SIGTERM signal.
 static bool Vsigterm_dumps_octave_core = true;
 
-#if defined (__EMX__)
-#define MAYBE_ACK_SIGNAL(sig) \
-  octave_set_signal_handler (sig, SIG_ACK)
-#define ACK_USES_SIG 1
-#else
-#define MAYBE_ACK_SIGNAL(sig) \
-  do { } while (0)
-#endif
-
 // List of signals we have caught since last call to octave_signal_handler.
 static bool octave_signals_caught[NSIG];
 
 // Called from octave_quit () to actually do something about the signals
 // we have caught.
 
 void
 octave_signal_handler (void)
@@ -213,75 +204,56 @@ generic_sig_handler (int sig)
 
 #ifdef SIGCHLD
 static void
 sigchld_handler (int /* sig */)
 {
   volatile octave_interrupt_handler saved_interrupt_handler
      = octave_ignore_interrupts ();
 
-  // I wonder if this is really right, or if SIGCHLD should just be
-  // blocked on OS/2 systems the same as for systems with POSIX signal
-  // functions.
-
-#if defined (__EMX__)
-  volatile sig_handler *saved_sigchld_handler
-    = octave_set_signal_handler (SIGCHLD, SIG_IGN);
-#endif
-
   sigset_t set, oset;
 
   BLOCK_CHILD (set, oset);
 
   if (octave_child_list::wait ())
     {
       // The status of some child changed.
 
       octave_signal_caught = 1;
 
       octave_signals_caught[SIGCHLD] = true;
     }
 
   octave_set_interrupt_handler (saved_interrupt_handler);
 
   UNBLOCK_CHILD (oset);
-
-#ifdef __EMX__
-  octave_set_signal_handler (SIGCHLD, saved_sigchld_handler);
-#endif
-
-  MAYBE_ACK_SIGNAL (SIGCHLD);
 }
 #endif /* defined(SIGCHLD) */
 
 #ifdef SIGFPE
 #if defined (__alpha__)
 static void
 sigfpe_handler (int /* sig */)
 {
-  MAYBE_ACK_SIGNAL (SIGFPE);
-
   if (can_interrupt && octave_interrupt_state >= 0)
     {
       octave_signal_caught = 1;
 
       octave_signals_caught[SIGFPE] = true;
 
       octave_interrupt_state++;
     }
 }
 #endif /* defined(__alpha__) */
 #endif /* defined(SIGFPE) */
 
 #if defined (SIGHUP) || defined (SIGTERM)
 static void
 sig_hup_or_term_handler (int sig)
 {
-  MAYBE_ACK_SIGNAL (sig);
-
   switch (sig)
     {
 #if defined (SIGHUP)
     case SIGHUP:
       {
         if (Vsighup_dumps_octave_core)
           dump_octave_core ();
       }
@@ -305,18 +277,16 @@ sig_hup_or_term_handler (int sig)
 }
 #endif
 
 #if 0
 #if defined (SIGWINCH)
 static void
 sigwinch_handler (int /* sig */)
 {
-  MAYBE_ACK_SIGNAL (SIGWINCH);
-
   command_editor::resize_terminal ();
 }
 #endif
 #endif
 
 // Handle SIGINT by restarting the parser (see octave.cc).
 //
 // This also has to work for SIGBREAK (on systems that have it), so we
@@ -377,34 +347,30 @@ user_abort (const char *sig_name, int si
         }
     }
 
 }
 
 static void
 sigint_handler (int sig)
 {
-  MAYBE_ACK_SIGNAL (sig);
-
 #ifdef USE_W32_SIGINT
   if (w32_in_main_thread ())
     user_abort (strsignal (sig), sig);
   else
     w32_raise (sig);
 #else
   user_abort (strsignal (sig), sig);
 #endif
 }
 
 #ifdef SIGPIPE
 static void
 sigpipe_handler (int /* sig */)
 {
-  MAYBE_ACK_SIGNAL (SIGPIPE);
-
   octave_signal_caught = 1;
 
   octave_signals_caught[SIGPIPE] = true;
 
   // Don't loop forever on account of this.
 
   if (pipe_handler_error_count++ > 100 && octave_interrupt_state >= 0)
     octave_interrupt_state++;
diff --git a/src/sysdep.cc b/src/sysdep.cc
--- a/src/sysdep.cc
+++ b/src/sysdep.cc
@@ -265,37 +265,27 @@ malloc_handler (int code)
 
 static void
 NeXT_init (void)
 {
   malloc_error (malloc_handler);
 }
 #endif
 
-#if defined (__EMX__)
-OS2_init (void)
-{
-  _control87 ((EM_INVALID | EM_DENORMAL | EM_ZERODIVIDE | EM_OVERFLOW
-               | EM_UNDERFLOW | EM_INEXACT), MCW_EM);
-}
-#endif
-
 void
 sysdep_init (void)
 {
 #if defined (__386BSD__) || defined (__FreeBSD__) || defined(__NetBSD__)
   BSD_init ();
 #elif defined (__MINGW32__)
   MINGW_init ();
 #elif defined (_MSC_VER)
   MSVC_init ();
 #elif defined (NeXT)
   NeXT_init ();
-#elif defined (__EMX__)
-  OS2_init ();
 #endif
 
   octave_ieee_init ();
 }
 
 void
 sysdep_cleanup (void)
 {
@@ -841,20 +831,8 @@ tilde_expand (\"~/bin\")\n\
       else
         error ("tilde_expand: expecting argument to be char or cellstr object");
     }
   else
     print_usage ();
 
   return retval;
 }
-
-#if defined (__EMX__) && defined (OS2)
-
-DEFUN (extproc, , ,
-  "extproc: ignored by Octave")
-{
-  return octave_value_list ();
-}
-
-DEFALIAS (EXTPROC, extproc);
-
-#endif
