# HG changeset patch
# User Daniel J Sebald <daniel.sebald@ieee.org>
# Date 1523420523 18000
#      Tue Apr 10 23:22:03 2018 -0500
# Branch stable
# Node ID 07bddddc58567e5960a77b8a79e0790cbb6a24d8
# Parent  164399071f4dc36c695cee6d727c81e8217fd011
Restore Variable Editor focusWidget lost in dock/undock transition (bug #53410)

* variable-editor.cc (variable_editor::variable_editor): Initialize new member
  variable m_variable_focus_widget to nullptr.
  (variable_editor::focusInEvent): If the m_main window's focusWidget() is
  nullptr, check if the recorded m_variable_focus_widget is still valid within
  the m_main container.  If so, use it as a valid pointer and restore its
  focus.
  (variable_editor::focusOutEvent): Record m_main's focusWidget() just prior
  to transition to/from docked state.

* variable-editor.h (variable_editor:octave_dock_widget): A class member
  variable m_variable_focus_widget to keep track of focusWidget().

diff --git a/libgui/src/variable-editor.cc b/libgui/src/variable-editor.cc
--- a/libgui/src/variable-editor.cc
+++ b/libgui/src/variable-editor.cc
@@ -985,17 +985,18 @@ namespace octave
       m_add_font_height (0),
       m_use_terminal_font (true),
       m_alternate_rows (true),
       m_stylesheet (""),
       m_font (),
       m_sel_font (),
       m_table_colors (),
       m_current_focus_vname (""),
-      m_hovered_focus_vname ("")
+      m_hovered_focus_vname (""),
+      m_variable_focus_widget (nullptr)
   {
     setObjectName ("VariableEditor");
     set_title (tr ("Variable Editor"));
     setStatusTip (tr ("Edit variables."));
     setWindowIcon (QIcon (":/actions/icons/logo.png"));
     setAttribute (Qt::WA_AlwaysShowToolTips);
 
     m_main->setParent (this);
@@ -1033,20 +1034,30 @@ namespace octave
     connect (this, SIGNAL (command_signal (const QString&)),
              p, SLOT (execute_command_in_terminal (const QString&)));
   }
 
   void variable_editor::focusInEvent (QFocusEvent *ev)
   {
     octave_dock_widget::focusInEvent (ev);
 
-    // set focus to the current variable
+    // set focus to the current variable or most recent if still valid
     QWidget *fw = m_main->focusWidget ();
     if (fw != nullptr)
       fw->setFocus ();
+    else if (m_main->isAncestorOf (m_variable_focus_widget))
+      m_variable_focus_widget->setFocus ();
+  }
+
+  void variable_editor::focusOutEvent (QFocusEvent *ev)
+  {
+    // focusWidget() appears lost in transition to/from main window
+    m_variable_focus_widget = m_main->focusWidget ();
+
+    octave_dock_widget::focusOutEvent (ev);
   }
 
   // Add an action to a menu or the widget itself.
 
   QAction*
   variable_editor::add_action (QMenu *menu, const QIcon& icon,
                                const QString& text,
                                const char *member)
diff --git a/libgui/src/variable-editor.h b/libgui/src/variable-editor.h
--- a/libgui/src/variable-editor.h
+++ b/libgui/src/variable-editor.h
@@ -333,16 +333,18 @@ namespace octave
     void delete_selected_signal (void);
 
     void selected_command_signal (const QString& cmd);
 
   protected:
 
     void focusInEvent (QFocusEvent *ev);
 
+    void focusOutEvent (QFocusEvent *ev);
+
   private:
 
     QAction * add_action (QMenu *menu, const QIcon& icon, const QString& text,
                           const char *member);
 
     QMainWindow *m_main;
 
     QToolBar *m_tool_bar;
@@ -372,12 +374,14 @@ namespace octave
     QAction *add_tool_bar_button (const QIcon &icon, const QString &text,
                                   const QObject *receiver, const char *member);
 
     void construct_tool_bar (void);
 
     QString m_current_focus_vname;
 
     QString m_hovered_focus_vname;
+
+    QWidget *m_variable_focus_widget;
   };
 }
 
 #endif
