# HG changeset patch
# User jwe
# Date 777048918 0
#      Tue Aug 16 14:55:18 1994 +0000
# Node ID 9e90d4df19e2a2e7b756655981823652381f189c
# Parent  8e4e7e5f307ea541d62be0c41b0c8ecd2d0c3c1f
[project @ 1994-08-16 14:55:18 by jwe]

diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -33,16 +33,17 @@ Software Foundation, 675 Mass Ave, Cambr
 #include <ctype.h>
 
 #include "tree-base.h"
 #include "tree-expr.h"
 #include "tree-const.h"
 #include "user-prefs.h"
 #include "load-save.h"
 #include "symtab.h"
+#include "pager.h"
 #include "error.h"
 #include "defun.h"
 #include "utils.h"
 #include "help.h"
 
 extern "C"
 {
 #include <readline/tilde.h>
@@ -1683,29 +1684,45 @@ found in the file will be replaced with 
 
   DEFINE_ARGV("load");
 
   argc--;
   argv++;
 
   int force = 0;
 
-// Here is where we would get the default load format if it were
-// stored in a user preference variable.
+// It isn't necessary to have the default load format stored in a user
+// preference variable since we can determine the type of file as we
+// are reading.
 
   load_save_format format = LS_UNKNOWN;
 
+  int list_only = 0;
+  int verbose = 0;
+
   while (argc > 0)
     {
       if (strcmp (*argv, "-force") == 0 || strcmp (*argv, "-f") == 0)
 	{
 	  force++;
 	  argc--;
 	  argv++;
 	}
+      else if (strcmp (*argv, "-list") == 0 || strcmp (*argv, "-l") == 0)
+	{
+	  list_only = 1;
+	  argc--;
+	  argv++;
+	}
+      else if (strcmp (*argv, "-verbose") == 0 || strcmp (*argv, "-v") == 0)
+	{
+	  verbose = 1;
+	  argc--;
+	  argv++;
+	}
       else if (strcmp (*argv, "-ascii") == 0 || strcmp (*argv, "-a") == 0)
 	{
 	  format = LS_ASCII;
 	  argc--;
 	  argv++;
 	}
       else if (strcmp (*argv, "-binary") == 0 || strcmp (*argv, "-b") == 0)
 	{
@@ -1782,16 +1799,17 @@ found in the file will be replaced with 
       if (read_binary_file_header (file, swap, flt_fmt) < 0)
 	{
 	  file.close ();
 	  DELETE_ARGV;
 	  return retval;
 	}
     }
 
+  ostrstream output_buf;
   int count = 0;
   for (;;)
     {
       int global = 0;
       tree_constant tc;
 
       char *name = 0;
       char *doc = 0;
@@ -1822,17 +1840,36 @@ found in the file will be replaced with 
 	}
       else if (! error_state && name)
 	{
 	  if (tc.is_defined ())
 	    {
 	      if (argc == 0 || matches_patterns (argv, argc, name))
 		{
 		  count++;
-		  install_loaded_variable (force, name, tc, global, doc);
+		  if (list_only)
+		    {
+		      if (verbose)
+			{
+			  if (count == 1)
+			    output_buf
+			      << "type               rows   cols   name\n"
+			      << "====               ====   ====   ====\n";
+
+			  output_buf.form ("%-16s", tc.type_as_string ());
+			  output_buf.form ("%7d", tc.rows ());
+			  output_buf.form ("%7d", tc.columns ());
+			  output_buf << "   ";
+			}
+		      output_buf << name << "\n";
+		    }
+		  else
+		    {
+		      install_loaded_variable (force, name, tc, global, doc);
+		    }
 		}
 	    }
 	  else
 	    error ("load: unable to load variable `%s'", name);
 	}
       else
 	{
 	  if (count == 0)
@@ -1841,16 +1878,29 @@ found in the file will be replaced with 
 
 	  break;
 	}
 
       delete [] name;
       delete [] doc;
     }
 
+  if (list_only && count)
+    {
+      if (nargout > 0)
+	{
+	  output_buf << ends;
+	  char *msg = output_buf.str ();
+	  retval = msg;
+	  delete [] msg;
+	}
+      else
+	maybe_page_output (output_buf);
+    }
+
   if (file);
     file.close ();
 
   DELETE_ARGV;
 
   return retval;
 }
 
