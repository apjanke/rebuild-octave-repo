# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1531506743 14400
#      Fri Jul 13 14:32:23 2018 -0400
# Node ID 506419b5f817270fe118eb73e87cdf2b87d95d52
# Parent  a15fe773db71111a8785c7a990395e38a6118738
maint: Strip trailing whitespace from source files.

diff --git a/libgui/src/documentation.cc b/libgui/src/documentation.cc
--- a/libgui/src/documentation.cc
+++ b/libgui/src/documentation.cc
@@ -307,32 +307,32 @@ namespace octave
           {
 #if defined (HAVE_QHELPSEARCHQUERYWIDGET_SEARCHINPUT)
             QVector<QHelpSearchResult> res
               = search_engine->searchResults (0, search_engine->searchResultCount ());
 #else
             QList< QPair<QString, QString> > res
               = search_engine->hits (0, search_engine->hitCount ());
 #endif
-            
+
             if (res.count ())
               {
                 QUrl url;
-                
+
                 if (res.count () == 1)
 #if defined (HAVE_QHELPSEARCHQUERYWIDGET_SEARCHINPUT)
                   url = res.front ().url ();
 #else
                   url = res.front ().first;
 #endif
                 else
                   {
                     // Remove the quotes we added
                     QString search_string = m_internal_search;
-                    
+
                     for (auto r = res.begin (); r != res.end (); r++)
                       {
 #if defined (HAVE_QHELPSEARCHQUERYWIDGET_SEARCHINPUT)
                         QString title = r->title ().toLower ();
                         QUrl tmpurl = r->url ();
 #else
                         QString title = r->second.toLower ();
                         QUrl tmpurl = r->first;
@@ -343,34 +343,33 @@ namespace octave
                               {
                                 url = tmpurl;
                                 break;
                               }
                             else if (url.isEmpty ())
                               url = tmpurl;
                           }
                       }
-                          
                   }
 
                 if (! url.isEmpty ())
                   {
                     connect (this, SIGNAL (show_single_result (const QUrl)),
                              m_doc_browser,
                              SLOT (handle_index_clicked (const QUrl)));
-                    
+
                     emit show_single_result (url);
                   }
               }
            }
-           m_internal_search = QString ();
+
+        m_internal_search = QString ();
       }
 
     qApp->restoreOverrideCursor();
-    
   }
 
   void documentation::notice_settings (const QSettings *)
   {
     shortcut_manager::shortcut (m_show_shortcut, "editor_edit:find_replace");
     shortcut_manager::shortcut (m_findnext_shortcut, "editor_edit:find_next");
     shortcut_manager::shortcut (m_findprev_shortcut, "editor_edit:find_previous");
   }
@@ -384,33 +383,33 @@ namespace octave
   void documentation::load_ref (const QString& ref_name)
   {
     if (! m_help_engine)
       return;
 
     // First search in the function index
     QMap<QString, QUrl> found_links
       = m_help_engine->linksForIdentifier (ref_name);
-    
+
     QTabWidget *navi = static_cast<QTabWidget*> (widget (0));
-    
+
     if (found_links.count() > 0)
       {
         m_doc_browser->setSource (found_links.constBegin().value());
-        
+
         // Switch to function index tab
         m_help_engine->indexWidget()->filterIndices (ref_name);
         QWidget *index_tab
           = navi->findChild<QWidget*> ("documentation_tab_index");
         navi->setCurrentWidget (index_tab);
       }
     else
       {
         // Use full text search to provide the best match
-        QHelpSearchEngine *search_engine = m_help_engine->searchEngine ();      
+        QHelpSearchEngine *search_engine = m_help_engine->searchEngine ();
         QHelpSearchQueryWidget *search_query = search_engine->queryWidget ();
 
 #if defined (HAVE_QHELPSEARCHQUERYWIDGET_SEARCHINPUT)
         QString query = ref_name;
         query.prepend ("\"").append ("\"");
 #else
         QList<QHelpSearchQuery> query;
         query << QHelpSearchQuery (QHelpSearchQuery::DEFAULT,
@@ -424,17 +423,16 @@ namespace octave
         search_query->setSearchInput (query);
 #else
         search_query->setQuery (query);
 #endif
         QWidget *search_tab
           = navi->findChild<QWidget*> ("documentation_tab_search");
         navi->setCurrentWidget (search_tab);
       }
-    
   }
 
   void documentation::filter_update (const QString& expression)
   {
     if (! m_help_engine)
       return;
 
     QString wildcard;
@@ -564,10 +562,9 @@ namespace octave
 
   QVariant documentation_browser::loadResource (int type, const QUrl &url)
   {
     if (url.scheme () == "qthelp")
       return QVariant (m_help_engine->fileData(url));
     else
       return QTextBrowser::loadResource(type, url);
   }
-
 }
diff --git a/libgui/src/documentation.h b/libgui/src/documentation.h
--- a/libgui/src/documentation.h
+++ b/libgui/src/documentation.h
@@ -49,17 +49,16 @@ namespace octave
 
     void handle_index_clicked (const QUrl& url,
                                const QString& keyword = QString ());
     void notice_settings (const QSettings *settings);
 
   private:
 
     QHelpEngine *m_help_engine;
-
   };
 
 
   // The documentaiton main class (splitter)
   class documentation : public QSplitter
   {
     Q_OBJECT
 
@@ -89,27 +88,27 @@ namespace octave
     void filter_update_history (void);
     void find_forward (void);
     void find_backward (void);
     void find_forward_from_anchor (const QString& text);
     void record_anchor_position (void);
     void handle_cursor_position_change (void);
 
   signals:
+
     void show_single_result (const QUrl);
-    
+
   private:
 
     QHelpEngine *m_help_engine;
     QString m_internal_search;
     documentation_browser *m_doc_browser;
     QLineEdit *m_find_line_edit;
     int m_search_anchor_position;
     QComboBox *m_filter;
     QString m_collection;
     QShortcut *m_show_shortcut;
     QShortcut *m_findnext_shortcut;
     QShortcut *m_findprev_shortcut;
   };
-
 }
 
 #endif
diff --git a/liboctave/system/lo-sysdep.cc b/liboctave/system/lo-sysdep.cc
--- a/liboctave/system/lo-sysdep.cc
+++ b/liboctave/system/lo-sysdep.cc
@@ -92,17 +92,17 @@ namespace octave
       if (path_name.back () == '\\' || path_name.back () == '/')
         path_name.push_back ('*');
       else
         path_name.append (R"(\*)");
 
       // Find first file in directory.
       HANDLE hFind = FindFirstFileW (u8_to_wstring (path_name).c_str (),
                               &ffd);
-      if (INVALID_HANDLE_VALUE == hFind) 
+      if (INVALID_HANDLE_VALUE == hFind)
         {
           DWORD errCode = GetLastError ();
           char *errorText;
           FormatMessageA (FORMAT_MESSAGE_FROM_SYSTEM |
                          FORMAT_MESSAGE_ALLOCATE_BUFFER |
                          FORMAT_MESSAGE_IGNORE_INSERTS,
                          NULL, errCode,
                          MAKELANGID (LANG_NEUTRAL, SUBLANG_DEFAULT),
@@ -202,43 +202,43 @@ namespace octave
 #if defined (OCTAVE_USE_WINDOWS_API)
       // Return file name that only contains ASCII characters that can be used
       // to access the file orig_file_name.  The original file must exist in the
       // file system before calling this function.
       // This is useful for passing file names to functions that are not aware
       // of the character encoding we are using.
 
       // 1. Check whether filename contains non-ASCII (UTF-8) characters
-      std::string::const_iterator first_non_ASCII = 
+      std::string::const_iterator first_non_ASCII =
                 std::find_if (orig_file_name.begin (), orig_file_name.end (),
                 [](char c){return (c < 0 || c >= 128);});
       if (first_non_ASCII == orig_file_name.end ())
         return orig_file_name;
 
       // 2. Check if file system stores short filenames (always ASCII-only).
       const wchar_t *w_orig_file_name = u8_to_wstring (orig_file_name).c_str ();
       // get short filename (8.3) from UTF-16 filename
       long length = GetShortPathNameW (w_orig_file_name, NULL, 0);
 
-      // Dynamically allocate the correct size 
+      // Dynamically allocate the correct size
       // (terminating null char was included in length)
       wchar_t *w_short_file_name = new wchar_t[length];
       length = GetShortPathNameW (w_orig_file_name, w_short_file_name, length);
- 
+
       std::string short_file_name = u8_from_wstring (std::wstring (w_short_file_name));
 
       if (short_file_name.compare (orig_file_name) != 0)
         return short_file_name;
 
       // 3. Create hard link with only-ASCII characters
       // Get longest possible part of path that only contains ASCII chars.
       size_t pos = (std::string (orig_file_name.begin (), first_non_ASCII)).
                         find_last_of (octave::sys::file_ops::dir_sep_chars ());
       std::string par_dir = orig_file_name.substr (0, pos+1);
-      
+
       // create .oct_ascii directory
       // FIXME: We need to have write permission in this location.
       std::string oct_ascii_dir = par_dir + ".oct_ascii";
       std::string test_dir = canonicalize_file_name (oct_ascii_dir);
       if (test_dir.empty ())
       {
         std::string msg;
         int status = octave::sys::mkdir (oct_ascii_dir, 0777, msg);
diff --git a/liboctave/wrappers/unistd-wrappers.c b/liboctave/wrappers/unistd-wrappers.c
--- a/liboctave/wrappers/unistd-wrappers.c
+++ b/liboctave/wrappers/unistd-wrappers.c
@@ -301,17 +301,17 @@ octave_getcwd_wrapper (char *nm, size_t 
 
   retval = u8_from_wchar (tmp);
   if (! nm)
     return retval;
   else
     {
       if (strlen (retval) > len)
         return NULL;
-      
+
       memcpy (nm, retval, len);
       free (retval);
       return nm;
     }
 #else
   return getcwd (nm, len);
 #endif
 }
