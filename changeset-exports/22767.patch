# HG changeset patch
# User Rik <rik@octave.org>
# Date 1479166471 28800
#      Mon Nov 14 15:34:31 2016 -0800
# Node ID 212333a97d8d89ece12b45387418461100c9517e
# Parent  01aae08a01055000746111cdc816f969a3a5f98b
maint: Remove dangling ';' from m-file function declarations.

* publish.m, structfun.m, krylov.m, fminsearch.m, __ezplot__.m,
__rotate_around_axis__.m, smooth3.m, __ghostscript__.m, __print_parse_opts__.m,
__run_test_suite__.m: Remove dangling ';' from m-file function declarations.

diff --git a/scripts/general/publish.m b/scripts/general/publish.m
--- a/scripts/general/publish.m
+++ b/scripts/general/publish.m
@@ -981,17 +981,17 @@ function doc = eval_code (doc, options)
     j = str2double (fig_code_blocks{i}) + body_offset;
     doc.body = [doc.body(1:j), elems, doc.body(j+1:end)];
     body_offset = body_offset + numel (elems);
   endfor
 
 endfunction
 
 
-function ___cstr___ = eval_code_helper (___context___, ___code___);
+function ___cstr___ = eval_code_helper (___context___, ___code___)
   ## EVAL_CODE_HELPER evaluates a given string with Octave code in an extra
   ##   temporary context and returns a cellstring with the eval output.
 
   ## FIXME: Potential conflicting variables surrounded by "___".
   ##        Maybe there is a better solution?
   if (isempty (___code___))
     return;
   endif
diff --git a/scripts/general/structfun.m b/scripts/general/structfun.m
--- a/scripts/general/structfun.m
+++ b/scripts/general/structfun.m
@@ -66,17 +66,17 @@
 ## elements @qcode{"identifier"}, @qcode{"message"} and @qcode{"index"},
 ## giving respectively the error identifier, the error message, and the index
 ## into the input arguments of the element that caused the error.  For an
 ## example on how to use an error handler, @pxref{XREFcellfun,,cellfun}.
 ##
 ## @seealso{cellfun, arrayfun, spfun}
 ## @end deftypefn
 
-function varargout = structfun (func, S, varargin);
+function varargout = structfun (func, S, varargin)
 
   if (nargin < 2)
     print_usage ();
   endif
 
   nargs = length (varargin);
 
   recognized_opts = {"UniformOutput", "ErrorHandler"};
diff --git a/scripts/linear-algebra/krylov.m b/scripts/linear-algebra/krylov.m
--- a/scripts/linear-algebra/krylov.m
+++ b/scripts/linear-algebra/krylov.m
@@ -50,17 +50,17 @@
 ##
 ## Reference: @nospell{A. Hodel, P. Misra}, @cite{Partial Pivoting in the
 ## Computation of Krylov Subspaces of Large Sparse Systems}, Proceedings of
 ## the 42nd IEEE Conference on Decision and Control, December 2003.
 ## @end deftypefn
 
 ## Author: A. Scottedward Hodel <a.s.hodel@eng.auburn.edu>
 
-function [Uret, H, nu] = krylov (A, V, k, eps1, pflg);
+function [Uret, H, nu] = krylov (A, V, k, eps1, pflg)
 
   if (isa (A, "single") || isa (V, "single"))
     defeps = 1e-6;
   else
     defeps = 1e-12;
   endif
 
   if (nargin < 3 || nargin > 5)
diff --git a/scripts/optimization/fminsearch.m b/scripts/optimization/fminsearch.m
--- a/scripts/optimization/fminsearch.m
+++ b/scripts/optimization/fminsearch.m
@@ -116,17 +116,17 @@ endfunction
 ##    and Applied Mathematics, Philadelphia, PA, 1999.
 
 ## From Matrix Toolbox
 ## Copyright (C) 2002, 2013 N.J.Higham
 ## www.maths.man.ac.uk/~higham/mctoolbox
 ##
 ## Modifications for Octave by A.Adler 2003
 
-function [stopit, savit, dirn, trace, tol, maxiter] = parse_options (options, x );
+function [stopit, savit, dirn, trace, tol, maxiter] = parse_options (options, x )
 
   ## Tolerance for cgce test based on relative size of simplex.
   stopit(1) = tol = optimget (options, "TolX", 1e-4);
 
   ## Max no. of f-evaluations.
   stopit(2) = optimget (options, "MaxFunEvals", length (x) * 200);
 
   ## Max no. of iterations
diff --git a/scripts/plot/draw/private/__ezplot__.m b/scripts/plot/draw/private/__ezplot__.m
--- a/scripts/plot/draw/private/__ezplot__.m
+++ b/scripts/plot/draw/private/__ezplot__.m
@@ -477,17 +477,17 @@ function x = __eliminate_sing__ (x)
   x(isinf (x)) = NaN;
   ## High rates of curvature are treated as singularities
   threshold = 0.2 * (max (x(:)) - min (x(:)));
   x(abs (del2 (x)) > threshold) = NaN;
 endfunction
 
 ## Find: 1) range of function where there are not NaN values,
 ##       2) function is changing (not just flat surface)
-function domain = find_valid_domain (X, Y, Z);
+function domain = find_valid_domain (X, Y, Z)
 
   if (isvector (Z))
     ## 2-D data for isplot
     domain = [X(1) X(end)];
 
     ## Guess a range which includes the "mass" of the data by using a
     ## median-based approach.  The center 3/4 of the data is used to
     ## determine the range of the data.
diff --git a/scripts/plot/draw/private/__rotate_around_axis__.m b/scripts/plot/draw/private/__rotate_around_axis__.m
--- a/scripts/plot/draw/private/__rotate_around_axis__.m
+++ b/scripts/plot/draw/private/__rotate_around_axis__.m
@@ -18,17 +18,17 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {} {[@var{xr}, @var{yr}, @var{zr}] =} __rotate_around_axis__ (@var{x}, @var{y}, @var{z}, @var{angle}, @var{dir}, @var{origin})
 ## Rotate the points given by X, Y, Z about an axis by ANGLE degrees.
 ## The axis is specified by the vector DIR and the point ORIGIN.
 ## @end deftypefn
 
-function [xr, yr, zr] = __rotate_around_axis__ (x, y, z, angle, dir, origin);
+function [xr, yr, zr] = __rotate_around_axis__ (x, y, z, angle, dir, origin)
 
   dir /= norm (dir);
   u = dir(1);
   v = dir(2);
   w = dir(3);
 
   a = origin(1);
   b = origin(2);
diff --git a/scripts/plot/draw/smooth3.m b/scripts/plot/draw/smooth3.m
--- a/scripts/plot/draw/smooth3.m
+++ b/scripts/plot/draw/smooth3.m
@@ -76,17 +76,17 @@ function smoothed_data = smooth3 (data, 
     idx{i_dim} = [pad_vec 1:sz_dim sz_dim*pad_vec];
   endfor
   data_padded = data(idx{:});
 
   smoothed_data = convn (data_padded, conv_kernel, "valid");
 
 endfunction
 
-function [data, conv_kernel, sz, std_dev] = __get_check_smooth3_args__ (data, method, sz, std_dev);
+function [data, conv_kernel, sz, std_dev] = __get_check_smooth3_args__ (data, method, sz, std_dev)
 
   if (! isnumeric (data) || ndims (data) != 3)
     error ("smooth3: DATA must be a 3-D numeric matrix");
   endif
 
   if (! ischar (method))
     error ("smooth3: METHOD must be a string");
   endif
diff --git a/scripts/plot/util/private/__ghostscript__.m b/scripts/plot/util/private/__ghostscript__.m
--- a/scripts/plot/util/private/__ghostscript__.m
+++ b/scripts/plot/util/private/__ghostscript__.m
@@ -19,17 +19,17 @@
 ## -*- texinfo -*-
 ## @deftypefn {} {} __ghostscript__ (@var{@dots{}})
 ## Undocumented internal function.
 ## @end deftypefn
 
 ## Author: Ben Abbott <bpabbott@mac.com>
 ## Created: 2010-07-26
 
-function [gs_cmd, cleanup_cmd] = __ghostscript__ (varargin);
+function [gs_cmd, cleanup_cmd] = __ghostscript__ (varargin)
 
   dos_shell = (ispc () && ! isunix ());
 
   opts.binary = "";
   opts.source = "-";
   opts.output = "-";
   opts.device = "";
   opts.epscrop = false;
diff --git a/scripts/plot/util/private/__print_parse_opts__.m b/scripts/plot/util/private/__print_parse_opts__.m
--- a/scripts/plot/util/private/__print_parse_opts__.m
+++ b/scripts/plot/util/private/__print_parse_opts__.m
@@ -623,31 +623,31 @@ function value = convert2points (value, 
       value *= 72 / 2.54;
     case "normalized"
       error ("print:customnormalized",
              "print.m: papersize=='<custom>' and paperunits='normalized' may not be combined");
   endswitch
 
 endfunction
 
-function device_list = gs_device_list ();
+function device_list = gs_device_list ()
   ## Graphics formats/languages, not printers.
   device_list = {"bmp16"; "bmp16m"; "bmp256"; "bmp32b"; "bmpgray"; ...
                  "epswrite"; "eps2write"; "jpeg"; "jpegcymk"; "jpeggray";
                  "pbm"; "pbmraw"; "pcx16"; "pcx24b"; "pcx256"; "pcx2up"; ...
                  "pcxcmyk"; "pcxgray"; "pcxmono"; "pdfwrite"; "pgm"; ...
                  "pgmraw"; "pgnm"; "pgnmraw"; "png16"; "png16m"; ...
                  "png256"; "png48"; "pngalpha"; "pnggray"; "pngmono"; ...
                  "pnm"; "pnmraw"; "ppm"; "ppmraw"; "pswrite"; ...
                  "ps2write"; "tiff12nc"; "tiff24nc"; "tiff32nc"; ...
                  "tiffcrle"; "tiffg3"; "tiffg32d"; "tiffg4"; ...
                  "tiffgray"; "tifflzw"; "tiffpack"; "tiffsep"};
 endfunction
 
-function aliases = gs_aliases ();
+function aliases = gs_aliases ()
   ## Aliases for other devices: "bmp", "png", "tiff", "tiffn", "pdf",
   ##                            "ps", "ps2", "psc", "psc2"
   ##
   ## eps, epsc, eps2, epsc2 are not included here because those are
   ## are generated by the graphics toolkit.
   aliases.bmp   = "bmp32b";
   aliases.pdf   = "pdfwrite";
   aliases.png   = "png16m";
diff --git a/scripts/testfun/__run_test_suite__.m b/scripts/testfun/__run_test_suite__.m
--- a/scripts/testfun/__run_test_suite__.m
+++ b/scripts/testfun/__run_test_suite__.m
@@ -184,17 +184,17 @@ function retval = has_tests (f)
   str = fread (fid, "*char")';
   fclose (fid);
   retval = ! isempty (regexp (str,
                               '^%!(assert|error|fail|test|xtest|warning)',
                               'lineanchors', 'once'));
 
 endfunction
 
-function [dp, dn, dxf, dsk] = run_test_dir (fid, d);
+function [dp, dn, dxf, dsk] = run_test_dir (fid, d)
   global files_with_tests;
   global files_with_no_tests;
 
   lst = dir (d);
   dp = dn = dxf = dsk = 0;
   for i = 1:length (lst)
     nm = lst(i).name;
     if (lst(i).isdir
@@ -230,17 +230,17 @@ function [dp, dn, dxf, dsk] = run_test_d
       endif
     endfor
   unwind_protect_cleanup
     cd (saved_dir);
   end_unwind_protect
 
 endfunction
 
-function [dp, dn, dxf, dsk] = run_test_script (fid, d);
+function [dp, dn, dxf, dsk] = run_test_script (fid, d)
   global files_with_tests;
   global files_with_no_tests;
   global topsrcdir;
   global topbuilddir;
 
   lst = dir (d);
   dp = dn = dxf = dsk = 0;
   for i = 1:length (lst)
