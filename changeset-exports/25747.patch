# HG changeset patch
# User Rik <rik@octave.org>
# Date 1533531063 25200
#      Sun Aug 05 21:51:03 2018 -0700
# Node ID 3c45cfac769246f91a98509853527080bd9ca38b
# Parent  e1b69ea2d39a32a1a76ae06e7f621e10021f7394
fzero.m: Overhaul function.

* fzero.m: Redo documentation string to match other optimization functions.
Alphabetize optimset options in code.  Remove persistent designation
from variable mu which has the simple value 0.5.  Add new field "algorithm" to
struct output for Matlab compatibility.

diff --git a/scripts/optimization/fzero.m b/scripts/optimization/fzero.m
--- a/scripts/optimization/fzero.m
+++ b/scripts/optimization/fzero.m
@@ -37,49 +37,67 @@
 ## @end example
 ##
 ## If @var{x0} is a single scalar then several nearby and distant values are
 ## probed in an attempt to obtain a valid bracketing.  If this is not
 ## successful, the function fails.
 ##
 ## @var{options} is a structure specifying additional options.  Currently,
 ## @code{fzero} recognizes these options:
-## @qcode{"FunValCheck"}, @qcode{"OutputFcn"}, @qcode{"TolX"},
-## @qcode{"MaxIter"}, @qcode{"MaxFunEvals"}.
-## For a description of these options, see @ref{XREFoptimset,,optimset}.
+## @qcode{"FunValCheck"}, @qcode{"MaxFunEvals"}, @qcode{"MaxIter"},
+## @qcode{"OutputFcn"}, and @qcode{"TolX"}.
+##
+## @qcode{"MaxFunEvals"} proscribes the maximum number of function evaluations
+## before the search is halted.  The default value is @code{Inf}.
+## The value must be a positive integer.
+##
+## @qcode{"MaxIter"} proscribes the maximum number of algorithm iterations
+## before the search is halted.  The default value is @code{Inf}.
+## The value must be a positive integer.
 ##
-## On exit, the function returns @var{x}, the approximate zero point and
-## @var{fval}, the function value thereof.
+## @qcode{"TolX"} specifies the termination tolerance for the solution @var{x}.
+## The default value is @code{eps}.
 ##
-## @var{info} is an exit flag that can have these values:
+## For a description of the other options, see @ref{XREFoptimset,,optimset}.
+## To initialize an options structure with default values for @code{fzero} use
+## @code{options = optimset ("fzero")}.
+##
+## On exit, the function returns @var{x}, the approximate zero point, and
+## @var{fval}, the function evaluated at @var{x}.
+##
+## The third output @var{info} reports whether the algorithm succeeded and
+## may take one of the following values:
 ##
 ## @itemize
 ## @item 1
 ##  The algorithm converged to a solution.
 ##
 ## @item 0
 ##  Maximum number of iterations or function evaluations has been reached.
 ##
 ## @item -1
-## The algorithm has been terminated from user output function.
+## The algorithm has been terminated by a user @code{OutputFcn}.
 ##
 ## @item -5
 ## The algorithm may have converged to a singular point.
 ## @end itemize
 ##
 ## @var{output} is a structure containing runtime information about the
 ## @code{fzero} algorithm.  Fields in the structure are:
 ##
 ## @itemize
 ## @item iterations
 ##  Number of iterations through loop.
 ##
-## @item @nospell{nfev}
+## @item funcCount
 ##  Number of function evaluations.
 ##
+## @item algorithm
+##  The string "bisection, interpolation".
+##
 ## @item bracketx
 ##  A two-element vector with the final bracketing of the zero along the
 ## x-axis.
 ##
 ## @item brackety
 ##  A two-element vector with the final bracketing of the zero along the
 ## y-axis.
 ## @end itemize
@@ -99,47 +117,47 @@
 ## also been slightly modified.
 
 ## PKG_ADD: ## Discard result to avoid polluting workspace with ans at startup.
 ## PKG_ADD: [~] = __all_opts__ ("fzero");
 
 function [x, fval, info, output] = fzero (fun, x0, options = struct ())
 
   ## Get default options if requested.
-  if (nargin == 1 && ischar (fun) && strcmp (fun, 'defaults'))
-    x = optimset ("MaxIter", Inf, "MaxFunEvals", Inf, "TolX", eps,
-                  "OutputFcn", [], "FunValCheck", "off");
+  if (nargin == 1 && ischar (fun) && strcmp (fun, "defaults"))
+    x = optimset ("Display", "notify", "FunValCheck", "off",
+                  "MaxFunEvals", Inf, "MaxIter", Inf,
+                  "OutputFcn", [], "TolX", eps);
     return;
   endif
 
   if (nargin < 2 || nargin > 3)
     print_usage ();
   endif
 
   if (ischar (fun))
     fun = str2func (fun, "global");
   endif
 
-  ## FIXME:
+  ## FIXME: Display is not yet implemented
   ## displev = optimget (options, "Display", "notify");
   funvalchk = strcmpi (optimget (options, "FunValCheck", "off"), "on");
+  maxfev = optimget (options, "MaxFunEvals", Inf);
+  maxiter = optimget (options, "MaxIter", Inf);
   outfcn = optimget (options, "OutputFcn");
   tolx = optimget (options, "TolX", eps);
-  maxiter = optimget (options, "MaxIter", Inf);
-  maxfev = optimget (options, "MaxFunEvals", Inf);
 
-  persistent mu = 0.5;
+  mu = 0.5;
 
   if (funvalchk)
     ## Replace fun with a guarded version.
     fun = @(x) guarded_eval (fun, x);
   endif
 
-  ## The default exit flag if exceeded number of iterations.
-  info = 0;
+  info = 0;  # The default exit flag if number of iterations exceeded.
   niter = 0;
   nfev = 0;
 
   x = fval = a = fa = b = fb = NaN;
 
   ## Prepare...
   a = x0(1);
   fa = fun (a);
@@ -238,17 +256,17 @@ function [x, fval, info, output] = fzero
           d31 = (a - b) * fb / (fb - fa);
           q22 = (d21 - q11) * fb / (fe - fb);
           q32 = (d31 - q21) * fa / (fd - fa);
           d32 = (d31 - q21) * fd / (fd - fa);
           q33 = (d32 - q22) * fa / (fe - fa);
           c = a + q31 + q32 + q33;
         endif
         if (l < 4 || sign (c - a) * sign (c - b) > 0)
-          ## Quadratic interpolation + newton.
+          ## Quadratic interpolation + Newton.
           a0 = fa;
           a1 = (fb - fa)/(b - a);
           a2 = ((fd - fb)/(d - b) - a1) / (d - a);
           ## Modification 1: this is simpler and does not seem to be worse.
           c = a - a0/a1;
           if (a2 != 0)
             c = a - a0/a1;
             for i = 1:itype
@@ -351,16 +369,17 @@ function [x, fval, info, output] = fzero
     if ((b - a) != 0
         && abs ((fb - fa)/(b - a) / slope0) > max (1e6, 0.5/(macheps+tolx)))
       info = -5;
     endif
   endif
 
   output.iterations = niter;
   output.funcCount = nfev;
+  output.algorithm = "bisection, interpolation";
   output.bracketx = [a, b];
   output.brackety = [fa, fb];
 
 endfunction
 
 ## A helper function that evaluates a function and checks for bad results.
 function fx = guarded_eval (fun, x)
   fx = fun (x);
