# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1517013586 18000
#      Fri Jan 26 19:39:46 2018 -0500
# Node ID 78aff6f142271e21e839e298fe88500f0c11fd13
# Parent  d58543eb53e9effc6edecd38da27b064299b93fe
more variable editor improvements; allow more variable types to be edited

* ov.h (octave_value::edit_display): New function.
* ov-base.h (octave_base_value::edit_display): New virtual function.
* ov-base-mat.h, ov-base-mat.cc, ov-base-scalar.h, ov-base-scalar.cc,
ov-cell.h, ov-cell.cc: Overload edit_display function.

* variable-editor.cc (variable_editor::variable_editor): Increase
default width to 30.

* variable-editor-model.h, variable-editor-model.cc (make_label): Now
file-scope static function instead of member function.
(get_rows_and_columns): New file-scope static function.
Use to eliminate duplicated code.
(impl::cell::cell (const octave_value&, int, int)): New ctor.

(variable_editor_model::resize_columns_signal): New signal.
(variable_editor_model::update_data): Emit resize_columns_signal
when done.
(variable_editor_model::variable_editor_model):
Connect resize_columns_signal.  Don't nest calls to insertRows and
insertColumns.

(variable_editor_model::type_is_editable) Allow all numeric types,
logical arrays, and cells to be edited.  Include dimensions in error
message.

diff --git a/libgui/src/variable-editor-model.cc b/libgui/src/variable-editor-model.cc
--- a/libgui/src/variable-editor-model.cc
+++ b/libgui/src/variable-editor-model.cc
@@ -39,22 +39,75 @@ along with Octave; see the file COPYING.
 
 #include "ov.h"
 #include "parse.h"
 #include "utils.h"
 #include "variables.h"
 
 // Pimpl/Dpointer for variable_editor_model.
 
+static QString
+make_label (const std::string& name, const octave_value& val)
+{
+  QString lbl_txt = QString::fromStdString (name);
+
+  if (val.is_defined ())
+    {
+      if (! lbl_txt.isEmpty ())
+        lbl_txt += " ";
+
+      dim_vector dv = val.dims ();
+
+      lbl_txt += ("["
+                  + QString::fromStdString (dv.str ())
+                  + " "
+                  + QString::fromStdString (val.class_name ())
+                  + "]");
+    }
+  else
+    lbl_txt += " [undefined]";
+
+  return lbl_txt;
+}
+
+static void
+get_rows_and_columns (const octave_value& val, int& rows, int& cols)
+{
+  rows = val.rows ();
+  cols = val.columns ();
+}
+
 struct variable_editor_model::impl
 {
   struct cell
   {
     cell (void) : m_defined (false) { }
 
+    cell (const octave_value& val, int r, int c)
+      : m_defined (true), m_data ("no display"), m_status_tip ("status"),
+        m_tool_tip ("tip"), m_requires_sub_editor (false),
+        m_editor_type (sub_none)
+    {
+      if (val.iscell ())
+        {
+          Cell cval = val.cell_value ();
+
+          octave_value ov = cval(r,c);
+          dim_vector dv = ov.dims ();
+
+          m_requires_sub_editor = true;
+
+          m_data = make_label ("", ov);
+        }
+      else
+        {
+          m_data = QString::fromStdString (val.edit_display (r, c));
+        }
+    }
+
     cell (const QString& d, const QString& s, const QString& t,
           bool rse, sub_editor_types edtype)
       : m_defined (true), m_data (d), m_status_tip (s), m_tool_tip (t),
         m_requires_sub_editor (rse), m_editor_type (edtype)
     { }
 
     bool m_defined;
 
@@ -106,45 +159,22 @@ struct variable_editor_model::impl
 
   void update (const QModelIndex& idx)
   {
     if (is_defined (idx))
       return;
 
     if (idx.isValid ())
       {
-        QString dat;
-        bool requires_sub_editor = false;
-
         int r = idx.row ();
         int c = idx.column ();
 
-        if (m_value.iscell ())
-          {
-            requires_sub_editor = true;
-
-            Cell cval = m_value.cell_value ();
-
-            octave_value ov = cval(r,c);
-            dim_vector dv = ov.dims ();
+        cell edit_cell (m_value, r, c);
 
-            dat = make_label ("", ov);
-          }
-        else
-          {
-            // XXX
-            Matrix mval = m_value.matrix_value ();
-
-            double dval = mval(r,c);
-
-            dat.setNum (dval);
-          }
-
-        set (r, c, cell (dat, "status", "tip", requires_sub_editor,
-                         sub_matrix));
+        set (r, c, edit_cell);
       }
   }
 
   octave_value value_at (const QModelIndex& idx) const
   {
     if (! m_value.iscell ())
       return octave_value ();
 
@@ -202,55 +232,29 @@ struct variable_editor_model::impl
     int c = 0;
 
     m_value = val;
 
     if (m_value.is_defined ())
       {
         m_validity = true;
 
-        r = m_value.rows ();
-        c = m_value.columns ();
+        get_rows_and_columns (m_value, r, c);
       }
 
     m_rows = r;
     m_cols = c;
 
     m_table.resize (r * c);
 
     m_label->setTextFormat (Qt::PlainText);
 
     m_validtext = make_label (m_name, m_value);
   }
 
-  QString make_label (const std::string& name, const octave_value& val)
-  {
-    QString lbl_txt = QString::fromStdString (name);
-
-    if (val.is_defined ())
-      {
-        if (! lbl_txt.isEmpty ())
-          lbl_txt += " ";
-
-        lbl_txt += "[";
-
-        if (! val.is_scalar_type ())
-          {
-            dim_vector dv = val.dims ();
-            lbl_txt += QString::fromStdString (dv.str ());
-          }
-
-        lbl_txt += " " + QString::fromStdString (val.class_name ()) + "]";
-      }
-    else
-      lbl_txt += " [undefined]";
-
-    return lbl_txt;
-  }
-
   void invalidate (void)
   {
     reset (octave_value ());
   }
 
   QVariant data (const QModelIndex& idx, int role)
   {
     update (idx);
@@ -308,31 +312,36 @@ variable_editor_model::variable_editor_m
            this, SLOT (update_data (const octave_value&)));
 
   connect (this, SIGNAL (data_error_signal (const QString&)),
            this, SLOT (data_error (const QString&)));
 
   connect (this, SIGNAL (clear_data_cell_signal (int, int)),
            this, SLOT (clear_data_cell (int, int)));
 
+  connect (this, SIGNAL (resize_columns_signal (void)),
+           parent, SLOT (resizeColumnsToContents (void)));
+
   if (! type_is_editable (val))
     return;
 
   // Initializes everything.
 
-  int rows = val.rows ();
-  int cols = val.columns ();
+  int rows = 0;
+  int cols = 0;
 
-  beginInsertRows (QModelIndex (), 0, rows-1);
-  beginInsertColumns (QModelIndex (), 0, cols-1);
+  get_rows_and_columns (val, rows, cols);
 
   m_d->reset (val);
 
+  beginInsertRows (QModelIndex (), 0, rows-1);
+  endInsertRows ();
+
+  beginInsertColumns (QModelIndex (), 0, cols-1);
   endInsertColumns ();
-  endInsertRows ();
 }
 
 variable_editor_model::~variable_editor_model (void)
 {
   delete m_d;
 }
 
 octave_value
@@ -551,18 +560,20 @@ variable_editor_model::update_data (cons
 
   // Add or remove rows and columns when the size changes, but always
   // invalidate the entire m_table cache because we don't know which
   // elements of val have changed.
 
   int old_rows = m_d->rows ();
   int old_cols = m_d->columns ();
 
-  int new_rows = val.rows ();
-  int new_cols = val.columns ();
+  int new_rows = 0;
+  int new_cols = 0;
+
+  get_rows_and_columns (val, new_rows, new_cols);
 
   m_d->reset (val);
 
   if (new_rows < old_rows)
     {
       beginRemoveRows (QModelIndex (), new_rows, old_rows-1);
       endRemoveRows ();
     }
@@ -582,16 +593,18 @@ variable_editor_model::update_data (cons
       beginInsertColumns (QModelIndex (), old_cols, new_cols-1);
       endInsertColumns ();
     }
 
   display_valid ();
 
   emit dataChanged (QAbstractTableModel::index (0, 0),
                     QAbstractTableModel::index (new_rows-1, new_cols-1));
+
+  emit resize_columns_signal ();
 }
 
 // Private.
 
 // val has to be copied!
 
 void
 variable_editor_model::set_data_oct (const std::string& name,
@@ -739,22 +752,31 @@ variable_editor_model::clear_data_cell (
 {
   m_d->clear (r, c);
 }
 
 bool
 variable_editor_model::type_is_editable (const octave_value& val,
                                          bool display_error) const
 {
-  if (val.is_matrix_type () || val.iscell ())
+  if ((val.isnumeric () || val.islogical () || val.iscell ()
+      && val.ndims () == 2)
     return true;
 
   if (display_error)
-    emit data_error_signal (QString ("unable to edit '%1' objects")
-                            .arg (QString::fromStdString (val.type_name ())));
+    {
+      QString tname = QString::fromStdString (val.type_name ());
+
+      dim_vector dv = val.dims ();
+      QString dimstr = QString::fromStdString (dv.str ());
+
+      emit data_error_signal (QString ("unable to edit [%1] '%2' objects")
+                              .arg (dimstr)
+                              .arg (tname));
+    }
 
   return false;
 }
 
 void
 variable_editor_model::evaluation_error (const std::string& expr) const
 {
   emit user_error_signal ("Evaluation failed",
diff --git a/libgui/src/variable-editor-model.h b/libgui/src/variable-editor-model.h
--- a/libgui/src/variable-editor-model.h
+++ b/libgui/src/variable-editor-model.h
@@ -102,16 +102,18 @@ signals: // private
   void update_data_signal (const octave_value& val);
 
   void clear_data_cell_signal (int r, int c);
 
   void data_error_signal (const QString& name) const;
 
   void user_error_signal (const QString& title, const QString& msg) const;
 
+  void resize_columns_signal (void);
+
 private slots:
 
   void update_data (const octave_value& val);
 
   void clear_data_cell (int r, int c);
 
   // Change the display if the variable does not exist.
   void data_error (const QString& msg);
diff --git a/libgui/src/variable-editor.cc b/libgui/src/variable-editor.cc
--- a/libgui/src/variable-editor.cc
+++ b/libgui/src/variable-editor.cc
@@ -80,17 +80,17 @@ idx_to_expr (int32_t from, int32_t to)
           ? QString ("%1").arg (from + 1)
           : QString ("%1:%2").arg (from + 1).arg (to + 1));
 }
 
 variable_editor::variable_editor (QWidget *p)
   : octave_dock_widget (p), m_main (new QMainWindow ()),
     m_tool_bar (new QToolBar (m_main)),
     m_tab_widget (new QTabWidget (m_main)),
-    m_default_width (20), m_default_height (100), m_add_font_height (0),
+    m_default_width (30), m_default_height (100), m_add_font_height (0),
     m_autofit (false), m_autofit_max (false), m_use_terminal_font (true),
     m_alternate_rows (true), m_stylesheet (""), m_font (), m_sel_font (),
     m_table_colors ()
 {
   // Use a MainWindow.
 
   setObjectName ("variable_editor");
   set_title (tr ("Variable Editor"));
diff --git a/libinterp/octave-value/ov-base-mat.cc b/libinterp/octave-value/ov-base-mat.cc
--- a/libinterp/octave-value/ov-base-mat.cc
+++ b/libinterp/octave-value/ov-base-mat.cc
@@ -502,16 +502,26 @@ octave_base_matrix<MT>::short_disp (std:
       if (nel <= max_elts)
         os << ']';
     }
   else
     os << "...";
 }
 
 template <typename MT>
+std::string
+octave_base_matrix<MT>::edit_display (octave_idx_type i,
+                                      octave_idx_type j) const
+{
+  std::ostringstream buf;
+  octave_print_internal (buf, matrix(i,j));
+  return buf.str ();
+}
+
+template <typename MT>
 octave_value
 octave_base_matrix<MT>::fast_elem_extract (octave_idx_type n) const
 {
   if (n < matrix.numel ())
     return matrix(n);
   else
     return octave_value ();
 }
diff --git a/libinterp/octave-value/ov-base-mat.h b/libinterp/octave-value/ov-base-mat.h
--- a/libinterp/octave-value/ov-base-mat.h
+++ b/libinterp/octave-value/ov-base-mat.h
@@ -158,16 +158,18 @@ public:
   bool print_as_scalar (void) const;
 
   void print (std::ostream& os, bool pr_as_read_syntax = false);
 
   void print_info (std::ostream& os, const std::string& prefix) const;
 
   void short_disp (std::ostream& os) const;
 
+  std::string edit_display (octave_idx_type i, octave_idx_type j) const;
+
   MT& matrix_ref (void)
   {
     clear_cached_info ();
     return matrix;
   }
 
   const MT& matrix_ref (void) const
   {
diff --git a/libinterp/octave-value/ov-base-scalar.cc b/libinterp/octave-value/ov-base-scalar.cc
--- a/libinterp/octave-value/ov-base-scalar.cc
+++ b/libinterp/octave-value/ov-base-scalar.cc
@@ -184,16 +184,25 @@ octave_base_scalar<ST>::short_disp (std:
   size_t pos = tmp.find_first_not_of (' ');
   if (pos != std::string::npos)
     os << tmp.substr (pos);
   else if (! tmp.empty ())
     os << tmp[0];
 }
 
 template <typename ST>
+std::string
+octave_base_scalar<ST>::edit_display (octave_idx_type, octave_idx_type) const
+{
+  std::ostringstream buf;
+  octave_print_internal (buf, scalar);
+  return buf.str ();
+}
+
+template <typename ST>
 octave_value
 octave_base_scalar<ST>::fast_elem_extract (octave_idx_type n) const
 {
   return (n == 0) ? octave_value (scalar) : octave_value ();
 }
 
 template <typename ST>
 bool
diff --git a/libinterp/octave-value/ov-base-scalar.h b/libinterp/octave-value/ov-base-scalar.h
--- a/libinterp/octave-value/ov-base-scalar.h
+++ b/libinterp/octave-value/ov-base-scalar.h
@@ -133,16 +133,18 @@ public:
   void print (std::ostream& os, bool pr_as_read_syntax = false);
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   bool print_name_tag (std::ostream& os, const std::string& name) const;
 
   void short_disp (std::ostream& os) const;
 
+  std::string edit_display (octave_idx_type i, octave_idx_type j) const;
+
   // Unsafe.  This function exists to support the MEX interface.
   // You should not use it anywhere else.
   void * mex_get_data (void) const { return const_cast<ST *> (&scalar); }
 
   const ST& scalar_ref (void) const { return scalar; }
 
   ST& scalar_ref (void) { return scalar; }
 
diff --git a/libinterp/octave-value/ov-base.h b/libinterp/octave-value/ov-base.h
--- a/libinterp/octave-value/ov-base.h
+++ b/libinterp/octave-value/ov-base.h
@@ -656,16 +656,19 @@ public:
   print_name_tag (std::ostream& os, const std::string& name) const;
 
   virtual void
   print_with_name (std::ostream& output_buf, const std::string& name,
                    bool print_padding = true);
 
   virtual void short_disp (std::ostream& os) const { os << "..."; }
 
+  virtual std::string edit_display (octave_idx_type, octave_idx_type) const
+  { return "#VAL"; }
+
   virtual void print_info (std::ostream& os, const std::string& prefix) const;
 
   virtual bool save_ascii (std::ostream& os);
 
   virtual bool load_ascii (std::istream& is);
 
   virtual bool save_binary (std::ostream& os, bool& save_as_floats);
 
diff --git a/libinterp/octave-value/ov-cell.cc b/libinterp/octave-value/ov-cell.cc
--- a/libinterp/octave-value/ov-cell.cc
+++ b/libinterp/octave-value/ov-cell.cc
@@ -95,16 +95,29 @@ octave_base_matrix<Cell>::delete_element
 {
   matrix.delete_elements (idx);
 }
 
 // FIXME: this list of specializations is becoming so long that we should
 // really ask whether octave_cell should inherit from octave_base_matrix at all.
 
 template <>
+std::string
+octave_base_matrix<Cell>::edit_display (octave_idx_type i,
+                                        octave_idx_type j) const
+{
+  octave_value val = matrix(i,j);
+
+  if (val.numel () == 1)
+    return edit_display(0,0);
+  else
+    return "type + dims";
+}
+
+template <>
 octave_value
 octave_base_matrix<Cell>::fast_elem_extract (octave_idx_type n) const
 {
   if (n < matrix.numel ())
     return Cell (matrix(n));
   else
     return octave_value ();
 }
diff --git a/libinterp/octave-value/ov.h b/libinterp/octave-value/ov.h
--- a/libinterp/octave-value/ov.h
+++ b/libinterp/octave-value/ov.h
@@ -1270,16 +1270,21 @@ public:
   bool print_name_tag (std::ostream& os, const std::string& name) const
   { return rep->print_name_tag (os, name); }
 
   void print_with_name (std::ostream& os, const std::string& name) const
   { rep->print_with_name (os, name, true); }
 
   void short_disp (std::ostream& os) const { rep->short_disp (os); }
 
+  std::string edit_display (octave_idx_type i, octave_idx_type j) const
+  {
+    return rep->edit_display (i, j);
+  }
+
   int type_id (void) const { return rep->type_id (); }
 
   std::string type_name (void) const { return rep->type_name (); }
 
   std::string class_name (void) const { return rep->class_name (); }
 
   // Unary and binary operations.
 
