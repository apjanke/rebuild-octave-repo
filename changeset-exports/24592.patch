# HG changeset patch
# User Sebastian SchoÌˆps <sesc@gmx.de>
# Date 1515868031 28800
#      Sat Jan 13 10:27:11 2018 -0800
# Node ID 6c3b7ca0cb90d711a8122d0dfb0ef70e2e18106f
# Parent  bccb203494f64e6e04879545344947f8a5e72446
Fix Java >1.8 on macOS (Bug #9439)

* configure.ac: Set up JAVA_CPPFLAGS in a manner consistent with Linux.

* libinterp/octave-value/ov-java.cc: Remove all the CPP magic for macOS.

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -2715,27 +2715,21 @@ do
     AC_MSG_RESULT([$JAVA_LDPATH])
   fi
 
   AC_MSG_CHECKING([for include file <jni.h>])
 
   ## Java and JVM found.  Set up flags.
   case $host_os in
     darwin*)
-      ## Sneak the -framework flag into mkoctfile via LDFLAGS
-      LDFLAGS="$LDFLAGS -framework JavaVM"
-      ## According to: http://developer.apple.com/unix/crossplatform.html
-      ## one must explicitly set the include path.
-      ## Unfortunately, the include path keeps moving around.
       if test -n "$JAVA_CPPFLAGS"; then
-        JAVA_CPPFLAGS="-I${JAVA_CPPFLAGS}"
+        JAVA_CPPFLAGS="-I${JAVA_CPPFLAGS} -I${JAVA_CPPFLAGS}/darwin"
       else
-        JAVA_CPPFLAGS="-I${JAVA_HOME}/include -I/System/Library/Frameworks/JavaVM.framework/Home/include -I/System/Library/Frameworks/JavaVM.framework/Versions/CurrentJDK/Headers -I/System/Library/Frameworks/JavaVM.framework/Versions/Current/Headers"
+        JAVA_CPPFLAGS="-I${JAVA_HOME}/include -I${JAVA_HOME}/include/darwin"
       fi
-      JAVA_LIBS="-framework JavaVM"
     ;;
     *)
       if test -n "$JAVA_CPPFLAGS"; then
         JAVA_CPPFLAGS="-I${JAVA_CPPFLAGS} -I${JAVA_CPPFLAGS}/linux"
       else
         JAVA_CPPFLAGS="-I${JAVA_HOME}/include -I${JAVA_HOME}/include/linux"
       fi
     ;;
diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -636,18 +636,16 @@ initialize_jvm (void)
   std::string jvm_lib_path = JAVA_LDPATH + std::string ("/libjvm.so");
 #  endif
 
 #endif
 
   //! The number of created jvm's.
   jsize nVMs = 0;
 
-#if ! defined (__APPLE__) && ! defined (__MACH__)
-
   octave::dynamic_library lib (jvm_lib_path);
 
   if (! lib)
     error ("unable to load Java Runtime Environment from %s",
            jvm_lib_path.c_str ());
 
   JNI_CreateJavaVM_t create_vm =
     reinterpret_cast<JNI_CreateJavaVM_t> (lib.search ("JNI_CreateJavaVM"));
@@ -658,26 +656,16 @@ initialize_jvm (void)
   if (! create_vm)
     error ("unable to find JNI_CreateJavaVM in %s", jvm_lib_path.c_str ());
 
   if (! get_vm)
     error ("unable to find JNI_GetCreatedJavaVMs in %s", jvm_lib_path.c_str ());
 
   if (get_vm (&jvm, 1, &nVMs) == 0 && nVMs > 0)
 
-#else
-
-  // FIXME: There exists a problem on the Mac platform that
-  //   octave::dynamic_library lib (jvm_lib_path)
-  // doesn't work with 'not-bundled' *.oct files.
-
-  if (JNI_GetCreatedJavaVMs (&jvm, 1, &nVMs) == 0 && nVMs > 0)
-
-#endif
-
     {
       // At least one JVM exists, try to attach the current thread to it.
 
       switch (jvm->GetEnv (reinterpret_cast<void **> (&current_env),
                            JNI_VERSION_1_6))
         {
         case JNI_EDETACHED:
           // Attach the current thread
@@ -712,34 +700,22 @@ initialize_jvm (void)
       vm_args.add ("-Djava.system.class.loader=org.octave.OctClassLoader");
       vm_args.add ("-Xrs");
 
       // Additional options given by file java.opts.
       vm_args.read_java_opts (initial_java_dir () +
                               octave::sys::file_ops::dir_sep_str () +
                               "java.opts");
 
-#if ! defined (__APPLE__) && ! defined (__MACH__)
-
       if (create_vm (&jvm, &current_env, vm_args.to_args ()) != JNI_OK)
         error ("unable to start Java VM in %s", jvm_lib_path.c_str ());
     }
 
   jvm_lib = lib;
 
-#else
-
-      if (JNI_CreateJavaVM (&jvm, reinterpret_cast<void **> (&current_env),
-                            vm_args.to_args ()) != JNI_OK)
-        error ("unable to start Java VM in %s", jvm_lib_path.c_str ());
-
-    }
-
-#endif
-
   setlocale (LC_ALL, locale.c_str ());
 }
 
 //! Terminate the current jvm, if there is any.
 //!
 //! Otherwise, detach the jvm if this thread is attached to it and unload it
 //! if this thread created it itself.
 //!
