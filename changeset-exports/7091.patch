# HG changeset patch
# User jwe
# Date 1193866164 0
#      Wed Oct 31 21:29:24 2007 +0000
# Node ID 5608935ff5228a90d34fa80dce3dab2462d20fd3
# Parent  47c1736d7371fec813573f8c854956960bd2f8d5
[project @ 2007-10-31 21:26:39 by jwe]

diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -24,17 +24,17 @@ dnl               2002, 2003, 2004, 2005
 ### Preserve CFLAGS and CXXFLAGS from the environment before doing
 ### anything else because we don't know which macros might call
 ### AC_PROG_CC or AC_PROG_CXX.
 
 EXTERN_CFLAGS="$CFLAGS"
 EXTERN_CXXFLAGS="$CXXFLAGS"
 
 AC_INIT
-AC_REVISION($Revision: 1.588 $)
+AC_REVISION($Revision: 1.589 $)
 AC_PREREQ(2.57)
 AC_CONFIG_SRCDIR([src/octave.cc])
 AC_CONFIG_HEADER(config.h)
 
 OCTAVE_HOST_TYPE
 
 AC_DEFINE(OCTAVE_SOURCE, 1, [Define if this is Octave.])
   
@@ -121,17 +121,17 @@ AC_SUBST(config_opts)
 
 ### Make it possible to have Octave's array and matrix classes do bounds
 ### checking on element references.  This slows some operations down a
 ### bit, so it is turned off by default.
 
 BOUNDS_CHECKING=false
 AC_ARG_ENABLE(bounds-check,
   [AS_HELP_STRING([--enable-bounds-check],
-     [for internal array classes (default is no)])],
+     [bounds checking for indexing in internal array classes (default is no)])],
   [if test "$enableval" = yes; then BOUNDS_CHECKING=true; fi], [])
 if $BOUNDS_CHECKING; then
   AC_DEFINE(BOUNDS_CHECKING, 1, [Define to use internal bounds checking.])
 fi
 
 ### If possible, use a 64-bit integer type for array dimensions and indexing.
 
 USE_64_BIT_IDX_T=false
diff --git a/doc/interpreter/install.txi b/doc/interpreter/install.txi
--- a/doc/interpreter/install.txi
+++ b/doc/interpreter/install.txi
@@ -54,55 +54,92 @@ when building Octave:
 @table @code
 @item --prefix=@var{prefix}
 Install Octave in subdirectories below @var{prefix}.  The default value
 of @var{prefix} is @file{/usr/local}.
 
 @item --srcdir=@var{dir}
 Look for Octave sources in the directory @var{dir}.
 
-@item --with-f2c
-Use @code{f2c} even if a Fortran compiler is available.
+@item --enable-bounds-check
+Enable bounds checking for indexing operators in the internal array
+classes.  This option is primarily used for debugging Octave.  Building
+Octave with this option has a negative impact on performace and is not
+recommended for general use.
 
-@item --with-f77
-Use @code{f77} to compile Fortran code.  You may also specify the name
-of the compiler to use as an optional argument.  For example,
-@code{--with-f77=g77} sets the name of the Fortran compiler to
-@code{g77}.
+@item --enable-64
+This is an @strong{experimental} option to enable Octave to use 64-bit
+integers for array dimensions and indexing on 64-bit platforms.  You
+probably don't want to use this option unless you know what you are
+doing.
+
+If you use @code{--enable-64}, you must ensure that your Fortran
+compiler generates code with 8 byte signed @code{INTEGER} values, and
+that your BLAS and LAPACK libraries are compiled to use 8 byte
+signed integers for array dimensions and indexing.
 
 @item --enable-shared
-Create shared libraries.  If you are planning to use
-@code{--enable-lite-kernel} or the dynamic loading features, you will
-probably want to use this option.  It will make your @file{.oct} files
-much smaller and on some systems it may be necessary to build shared
-libraries in order to use dynamically linked functions.
+Create shared libraries (this is the default).  If you are planning to
+use the dynamic loading features, you will probably want to use this
+option.  It will make your @file{.oct} files much smaller and on some
+systems it may be necessary to build shared libraries in order to use
+dynamically linked functions.
 
 You may also want to build a shared version of @code{libstdc++}, if your
 system doesn't already have one.
 
 @item --enable-dl
 Use @code{dlopen} and friends to make Octave capable of dynamically
-linking externally compiled functions.  This only works on systems that
-actually have these functions.  If you plan on using this feature, you
+linking externally compiled functions (this is the default if
+@code{--enable-shared} is specified).  This option only works on systems
+that actually have these functions.  If you plan on using this feature, you
 should probably also use @code{--enable-shared} to reduce the size of
 your @file{.oct} files.
 
-@item --enable-shl
-Use @code{shl_load} and friends to make Octave capable of dynamically
-linking externally compiled functions.  This only works on systems that
-actually have these functions (only HP-UX systems).  If you plan on
-using this feature, you should probably also use @code{--enable-shared}
-to reduce the size of your @file{.oct} files.
+@item --without-blas
+Compile and use the generic BLAS and LAPACK versions included with
+Octave.  By default, configure first looks for BLAS and LAPACK matrix
+libraries on your system, including optimized BLAS implementations such
+as the free ATLAS 3.0, as well as vendor-tuned libraries.  (The use of
+an optimized BLAS will generally result in several-times faster matrix
+operations.)  Only use this option if your system has BLAS/LAPACK
+libraries that cause problems for some reason.  You can also use
+@code{--with-blas=lib} to specify a particular BLAS library
+@code{-llib} that configure doesn't check for automatically.
+
+@item --without-ccolamd
+Don't use CCOLAMD, disable some sparse matrix functionality.
+
+@item --without-colamd
+Don't use COLAMD, disable some sparse matrix functionality.
+
+@item --without-curl
+Don't use the cURL, disable the @code{urlread} and @code{urlwrite}
+functions.
 
-@item --enable-lite-kernel
-Compile smaller kernel.  This currently requires the dynamic linking
-functions @code{dlopen} or @code{shl_load} and friends so that Octave
-can load functions at run time that are not loaded at compile time.
+@item --without-cxsparse
+Don't use CXSPARSE, disable some sparse matrix functionality.
+
+@item --without-umfpack
+Don't use UMFPACK, disable some sparse matrix functionality.
+
+@item --without-fftw
+Use the included fftpack library instead of the FFTW library.
 
-@item --without-blas
+@item --without-glpk
+Don't use the GLPK library for linear programming.
+
+@item --without-hdf5
+Don't use the HDF5 library for reading and writing HDF5 files.
+
+@item --without-zlib
+Don't use the zlib library, disable data file compression and support
+for recent MAT file formats.
+
+@item --without-lapack
 Compile and use the generic BLAS and LAPACK versions included with
 Octave.  By default, configure first looks for BLAS and LAPACK matrix
 libraries on your system, including optimized BLAS implementations such
 as the free ATLAS 3.0, as well as vendor-tuned libraries.  (The use of
 an optimized BLAS will generally result in several-times faster matrix
 operations.)  Only use this option if your system has BLAS/LAPACK
 libraries that cause problems for some reason.  You can also use
 @code{--with-blas=lib} to specify a particular BLAS library
@@ -124,51 +161,38 @@ makefiles to work with other make progra
 your time.  We recommend you get and compile GNU Make instead.
 
 For plotting, you will need to have gnuplot installed on your system.
 Gnuplot is a command-driven interactive function plotting program.
 Gnuplot is copyrighted, but freely distributable.  The `gnu' in gnuplot
 is a coincidence---it is not related to the GNU project or the FSF in
 any but the most peripheral sense.
 
-To compile Octave, you will need a recent version of GNU Make.  You
-will also need @code{g++} 2.7.2 or later.  Version 2.8.0 or @code{egcs}
-1.0.x should work.  Later versions may work, but C++ is still evolving,
-so don't be too surprised if you run into some trouble.
-
-It is no longer necessary to have @code{libg++}, but you do need to have
-the GNU implementation of @code{libstdc++}.  If you are using @code{g++}
-2.7.2, @code{libstdc++} is distributed along with @code{libg++}, but for
-later versions, @code{libstdc++} is distributed separately.  For
-@code{egcs}, @code{libstdc++} is included with the compiler
-distribution.
+To compile Octave, you will need a recent version of GNU Make.  You will
+also need a recent version of @code{g++} or other ANSI C++ compiler. You
+will also need a Fortran 77 compiler or @code{f2c}.  If you use
+@code{f2c}, you will need a script like @code{fort77} that works like a
+normal Fortran compiler by combining @code{f2c} with your C compiler in
+a single script.
 
 If you plan to modify the parser you will also need GNU @code{bison} and
 @code{flex}.  If you modify the documentation, you will need GNU
 Texinfo, along with the patch for the @code{makeinfo} program that is
 distributed with Octave.
 
 GNU Make, @code{gcc}, and @code{libstdc++}, @code{gnuplot},
 @code{bison}, @code{flex}, and Texinfo are all available from many
 anonymous ftp archives.  The primary site is @url{ftp.gnu.org}, but it
 is often very busy.  A list of sites that mirror the software on
 @url{ftp.gnu.org} is available by anonymous ftp from
 @url{ftp://ftp.gnu.org/pub/gnu/GNUinfo/FTP}.
 
-If you don't have a Fortran compiler, or if your Fortran compiler
-doesn't work like the traditional Unix f77, you will need to have the
-Fortran to C translator @code{f2c}.  You can get @code{f2c} from any
-number of anonymous ftp archives.  The most recent version of @code{f2c}
-is always available from @url{netlib.att.com}.
-
-On an otherwise idle Pentium 133 running Linux, it will take somewhere
-between 1-1/2 to 3 hours to compile everything, depending on whether you
-are building shared libraries.  You will need about 100 megabytes of disk
-storage to work with (considerably less if you don't compile with debugging
-symbols).  To do that, use the command
+You will need about 925 megabytes of disk storage to work with when
+building Octave from source (considerably less if you don't compile with
+debugging symbols).  To do that, use the command
 
 @example
 make CFLAGS=-O CXXFLAGS=-O LDFLAGS=
 @end example
 
 @noindent
 instead of just @samp{make}.
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2007-10-31  John W. Eaton  <jwe@octave.org>
+
+	* version.h (OCTAVE_VERSION): Now 2.9.16.
+	(OCTAVE_API_VERSION): Now api-v28.
+	(OCTAVE_RELEASE_DATE): Now 2007-10-31.
+
 2007-10-31  Muthiah Annamalai  <muthuspost@gmail.com>
 
 	* pt-assign.h (tree_simple_assignment::op_type,
 	tree_multi_assignment::op_type): New functions.
 	* pt-unop.h (tree_unary_expression::op_type): New function.
 
 2007-10-31  John W. Eaton  <jwe@octave.org>
 
diff --git a/src/version.h b/src/version.h
--- a/src/version.h
+++ b/src/version.h
@@ -19,21 +19,21 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, see
 <http://www.gnu.org/licenses/>.
 
 */
 
 #if !defined (octave_version_h)
 #define octave_version_h 1
 
-#define OCTAVE_VERSION "2.9.15+"
+#define OCTAVE_VERSION "2.9.16"
 
-#define OCTAVE_API_VERSION "api-v27"
+#define OCTAVE_API_VERSION "api-v28"
 
-#define OCTAVE_RELEASE_DATE "2007-10-13"
+#define OCTAVE_RELEASE_DATE "2007-10-31"
 
 #define OCTAVE_COPYRIGHT "Copyright (C) 2007 John W. Eaton and others."
 
 // This is the first line printed by --version.  The GNU coding
 // standards say that the version number should follow the last space
 // on the line.
 
 #define OCTAVE_NAME_AND_VERSION "GNU Octave, version " OCTAVE_VERSION
