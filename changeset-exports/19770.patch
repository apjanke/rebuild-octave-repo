# HG changeset patch
# User Torsten <ttl@justmail.de>
# Date 1424373996 -3600
#      Thu Feb 19 20:26:36 2015 +0100
# Node ID 35a8e1beac8d477a4947fc38b1c2b48f6aaddafc
# Parent  70911df8ad280ca424984228b5cb7b2f26d1617b
 fix some oddities updating lexer and api-files for auto completion

* file-editor-tab.cc (file_editor_tab): call notice_settings with flag that
  updating the lexer is not necessary since it is done while loading the file;
  (update_lexer): fix some binary operators;
  (new_file): call update_lexer since it is not called during initialization;
  (notice_settings): new flag for indicating initialization phase where
  update_lexer should not be called

* file-editor-tab.h: notice_settings has an additional input parameter which
  is set to false by default

* octave-txt-lexer.cc (lexer): new function returning the name of the lexer

* octave-txt-lexer.h: new function returning the name of the lexer

diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -158,17 +158,17 @@ file_editor_tab::file_editor_tab (const 
   connect (_edit_area, SIGNAL (copyAvailable (bool)),
            this, SLOT (handle_copy_available (bool)));
 
   connect (&_file_system_watcher, SIGNAL (fileChanged (const QString&)),
            this, SLOT (file_has_changed (const QString&)));
 
   QSettings *settings = resource_manager::get_settings ();
   if (settings)
-    notice_settings (settings);
+    notice_settings (settings, true);
 }
 
 file_editor_tab::~file_editor_tab (void)
 {
   // Destroy items attached to _edit_area.
   QsciLexer *lexer = _edit_area->lexer ();
   if (lexer)
     {
@@ -472,17 +472,17 @@ file_editor_tab::update_lexer ()
 
           _prep_apis_file = _prep_apis_file + ".pap"; // final name of apis file
 
           // check whether the APIs info needs to be prepared and saved
           QFileInfo apis_file = QFileInfo (_prep_apis_file);
           update_apis_file = ! apis_file.exists ();  // flag whether apis file needs update
 
           // function list depends on installed packages: check mod. date
-          if (! update_apis_file & octave_functions)
+          if (! update_apis_file && octave_functions)
             {
               // check whether package file is newer than apis_file
               QDateTime apis_date = apis_file.lastModified ();
 
               // compare to local package list
               // FIXME: How to get user chosen location?
               QFileInfo local_pkg_list = QFileInfo (
                 desktopServices.storageLocation (QDesktopServices::HomeLocation)
@@ -492,26 +492,26 @@ file_editor_tab::update_lexer ()
                 update_apis_file = true;
 
               // compare to global package list
               // FIXME: How to get user chosen location?
               QFileInfo global_pkg_list = QFileInfo (
                                         QString::fromStdString (Voctave_home)
                                         + "/share/octave/octave_packages");
                if (global_pkg_list.exists ()
-                   & (apis_date < global_pkg_list.lastModified ()) )
+                   && (apis_date < global_pkg_list.lastModified ()) )
                 update_apis_file = true;
             }
           }
         else  // no octave file, just add extension
           {
             _prep_apis_file = prep_apis_path + lexer->lexer () + ".pap";
           }
 
-      if (update_apis_file | !_lexer_apis->loadPrepared (_prep_apis_file))
+      if (update_apis_file || !_lexer_apis->loadPrepared (_prep_apis_file))
         {
           // no prepared info loaded, prepare and save if possible
 
           // create raw apis info
           QString keyword;
           QStringList keyword_list;
           int i,j;
 
@@ -1427,16 +1427,18 @@ file_editor_tab::new_file (const QString
   int eol_mode = QsciScintilla::EolUnix;
 #endif
   _edit_area->setEolMode (
     static_cast<QsciScintilla::EolMode> (
       settings->value("editor/default_eol_mode",eol_mode).toInt ()));
 
   update_eol_indicator ();
 
+  update_lexer ();
+
   _edit_area->setText (commands);
   _edit_area->setModified (false); // new file is not modified yet
 }
 
 void
 file_editor_tab::save_file (const QString& saveFileName, bool remove_on_success)
 {
   // If it is a new file with no name, signal that saveFileAs
@@ -1778,21 +1780,22 @@ file_editor_tab::file_has_changed (const
 
       msgBox->setWindowModality (Qt::WindowModal);
       msgBox->setAttribute (Qt::WA_DeleteOnClose);
       msgBox->show ();
     }
 }
 
 void
-file_editor_tab::notice_settings (const QSettings *settings)
+file_editor_tab::notice_settings (const QSettings *settings, bool init)
 {
   // QSettings pointer is checked before emitting.
 
-  update_lexer ();
+  if (! init)
+    update_lexer ();
 
   // code folding
   if (settings->value ("editor/code_folding",true).toBool ())
     {
       _edit_area->setMarginType (3, QsciScintilla::SymbolMargin);
       _edit_area->setFolding (QsciScintilla::BoxedTreeFoldStyle , 3);
     }
   else
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -60,17 +60,17 @@ public:
 public slots:
 
   void update_window_title (bool modified);
   void handle_copy_available (bool enableCopy);
   void handle_margin_clicked (int line, int margin,
                               Qt::KeyboardModifiers state);
 
   // Tells the editor tab to react on changed settings.
-  void notice_settings (const QSettings *settings);
+  void notice_settings (const QSettings *settings, bool init = false);
 
   // Change to a different editor tab by identifier tag.
   void change_editor_state (const QWidget *ID);
 
   // Simply transmit file name.
   void file_name_query (const QWidget *ID);
 
   void set_focus (const QWidget *ID);
diff --git a/libgui/src/m-editor/octave-txt-lexer.cc b/libgui/src/m-editor/octave-txt-lexer.cc
--- a/libgui/src/m-editor/octave-txt-lexer.cc
+++ b/libgui/src/m-editor/octave-txt-lexer.cc
@@ -44,9 +44,16 @@ octave_txt_lexer::description (int style
 
 const char*
 octave_txt_lexer::language () const
 {
   return "Text";
 }
 
 
+const char*
+octave_txt_lexer::lexer () const
+{
+  return "text";
+}
+
+
 #endif
diff --git a/libgui/src/m-editor/octave-txt-lexer.h b/libgui/src/m-editor/octave-txt-lexer.h
--- a/libgui/src/m-editor/octave-txt-lexer.h
+++ b/libgui/src/m-editor/octave-txt-lexer.h
@@ -31,13 +31,14 @@ along with Octave; see the file COPYING.
 
 class octave_txt_lexer : public QsciLexer
 {
   Q_OBJECT
 
 public:
 
   virtual const char *language () const;
+  virtual const char *lexer () const;
   virtual QString description (int style) const;
 
 };
 
 #endif
\ No newline at end of file
