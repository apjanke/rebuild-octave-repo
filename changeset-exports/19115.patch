# HG changeset patch
# User Rik <rik@octave.org>
# Date 1411268370 25200
#      Sat Sep 20 19:59:30 2014 -0700
# Node ID 3132cd3d6625eb756a940ea8ba0cca2a1421926b
# Parent  c53401edf4e3483a40a9609e88d7f15ef564b14a
repmat.m: Use Octave coding conventions in cset c53401edf4e3.

repmat.m: Use Octave coding conventions in cset c53401edf4e3.

diff --git a/scripts/general/repmat.m b/scripts/general/repmat.m
--- a/scripts/general/repmat.m
+++ b/scripts/general/repmat.m
@@ -62,42 +62,42 @@ function x = repmat (A, m, varargin)
       endif
       if (all (size (n) > 1))
         n = n(:,1);
       endif
       m = m(:).';
       n = n(:).';
     endif
   else
-    if nargin > 3
+    if (nargin > 3)
       # input check for m and varargin
-      if isscalar(m) && all(cellfun(@(x) isscalar(x), varargin))
+      if (isscalar (m) && all (cellfun ("numel", varargin) == 1))
         m = [m varargin{:}];
         n = [];
       else
-        error("repmat: All input arguments have to be scalar")
+        error ("repmat: all input arguments must be scalar");
       end
     elseif (isempty (m))
       m = n = 1;
     elseif (isscalar (m))
       n = m;
     elseif (ndims (m) > 2)
-      error ("repmat: M has more than 2 dimensions")
+      error ("repmat: M has more than 2 dimensions");
     elseif (all (size (m) > 1))
       m = m(:,1).';
       n = [];
     else
       m = m(:).';
       n = [];
     endif
   endif
   idx = [m, n];
 
   if (all (idx < 0))
-    error ("repmat: invalid dimensions")
+    error ("repmat: invalid dimensions");
   else
     idx = max (idx, 0);
   endif
 
   if (numel (A) == 1)
     ## optimize the scalar fill case.
     if (any (idx == 0))
       x = resize (A, idx);
@@ -156,17 +156,17 @@ endfunction
 %!shared x
 %! x = [1 2;3 4];
 %!assert (repmat (x, [1 1]), repmat (x, 1))
 %!assert (repmat (x, [3 3]), repmat (x, 3))
 %!assert (repmat (x, [1 1]), repmat (x, 1, 1))
 %!assert (repmat (x, [1 3]), repmat (x, 1, 3))
 %!assert (repmat (x, [3 1]), repmat (x, 3, 1))
 %!assert (repmat (x, [3 3]), repmat (x, 3, 3))
-%!assert (repmat (pi, [1,2,3,4]), repmat(pi,1,2,3,4))
+%!assert (repmat (pi, [1,2,3,4]), repmat (pi, 1,2,3,4))
 
 # Tests for numel==1 case:
 %!shared x, r
 %! x = [ 65 ];
 %! r = kron (ones (2,2), x);
 %!assert (r, repmat (x, [2 2]))
 %!assert (char (r), repmat (char (x), [2 2]))
 %!assert (int8 (r), repmat (int8 (x), [2 2]))
