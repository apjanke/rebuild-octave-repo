# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1339175630 -7200
#      Fri Jun 08 19:13:50 2012 +0200
# Branch gui
# Node ID 4812bcd524a1c1d5ca53a4e8d86381d7463cc1de
# Parent  06bd3610f76e315586168770da01f1539d605969
Fixed flooding the event queue by only an event after the last one has been processed.

* history-dockwidget.cc: Set update timer to single shot and starting timer again after an event.
* octave-link.cc: Flushing event queue before exiting.
* workspace-model.cc: Set update timer to single shot and starting timer again after an update event has been received.

diff --git a/gui/src/history-dockwidget.cc b/gui/src/history-dockwidget.cc
--- a/gui/src/history-dockwidget.cc
+++ b/gui/src/history-dockwidget.cc
@@ -42,16 +42,19 @@ history_dock_widget::event_accepted (oct
             {
               _history_model->insertRow (0);
               _history_model->setData (_history_model->index (0),
                 QString (command_history::get_entry (i).c_str ()));
             }
         }
     }
 
+  // Post a new update event in a given time. This prevents flooding the
+  // event queue.
+  _update_history_model_timer.start ();
   delete e;
 }
 
 void
 history_dock_widget::event_reject (octave_event *e)
 {
   delete e;
 }
@@ -90,17 +93,17 @@ history_dock_widget::construct ()
            SLOT (handle_double_click (QModelIndex)));
 
   connect (this,
            SIGNAL (visibilityChanged (bool)),
            this,
            SLOT (handle_visibility_changed (bool)));
 
   _update_history_model_timer.setInterval (200);
-  _update_history_model_timer.setSingleShot (false);
+  _update_history_model_timer.setSingleShot (true);
 
   connect (&_update_history_model_timer,
            SIGNAL (timeout ()),
            this,
            SLOT (request_history_model_update ()));
 
   _update_history_model_timer.start ();
 }
diff --git a/gui/src/octave-adapter/octave-link.cc b/gui/src/octave-adapter/octave-link.cc
--- a/gui/src/octave-adapter/octave-link.cc
+++ b/gui/src/octave-adapter/octave-link.cc
@@ -118,11 +118,17 @@ octave_link::event_accepted (octave_even
 
 void
 octave_link::event_reject (octave_event *e)
 { delete e; }
 
 void
 octave_link::about_to_exit ()
 {
+  _event_queue_mutex->lock ();
+  while (!_event_queue.empty ())
+    _event_queue.pop ();
+
+  _event_queue_mutex->unlock ();
+
   if (_octave_event_listener)
     _octave_event_listener->about_to_exit ();
 }
diff --git a/gui/src/workspace-model.cc b/gui/src/workspace-model.cc
--- a/gui/src/workspace-model.cc
+++ b/gui/src/workspace-model.cc
@@ -33,17 +33,17 @@ workspace_model::workspace_model(QObject
   insert_top_level_item(3, new tree_item ("Hidden"));
 
   connect(&_update_workspace_model_timer,
           SIGNAL (timeout ()),
           this,
           SLOT (request_update_workspace()));
 
   _update_workspace_model_timer.setInterval (500);
-  _update_workspace_model_timer.setSingleShot (false);
+  _update_workspace_model_timer.setSingleShot (true);
   _update_workspace_model_timer.start ();
 }
 
 workspace_model::~workspace_model()
 {
   delete _rootItem;
 }
 
@@ -90,16 +90,20 @@ workspace_model::event_accepted (octave_
               case symbol_information::persistent:  top_level_item (2)->add_child (child); break;
               case symbol_information::hidden:      top_level_item (3)->add_child (child); break;
             }
         }
 
       reset();
       emit expand_request();
     }
+
+  // Post a new event in a given time.
+  // This prevents flooding the event queue when no events are being processed.
+  _update_workspace_model_timer.start ();
   delete e;
 }
 
 void
 workspace_model::event_reject (octave_event *e)
 {
   delete e;
 }
