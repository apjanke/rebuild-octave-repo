# HG changeset patch
# User Rik <rdrider0-list@yahoo.com>
# Date 1237993535 25200
#      Wed Mar 25 08:05:35 2009 -0700
# Node ID 853f96e8008f054be0fd40f485ef0463e755ba74
# Parent  dbd0c77e575e56269babc70e970cd440fae61294
Cleanup documentation file matrix.texi

Spellcheck
Stylecheck (Mostly double spaces after periods)

diff --git a/scripts/general/circshift.m b/scripts/general/circshift.m
--- a/scripts/general/circshift.m
+++ b/scripts/general/circshift.m
@@ -17,18 +17,18 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{y} =} circshift (@var{x}, @var{n})
 ## Circularly shifts the values of the array @var{x}. @var{n} must be
 ## a vector of integers no longer than the number of dimensions in 
 ## @var{x}. The values of @var{n} can be either positive or negative,
 ## which determines the direction in which the values or @var{x} are
-## shifted. If an element of @var{n} is zero, then the corresponding
-## dimension of @var{x} will not be shifted. For example
+## shifted.  If an element of @var{n} is zero, then the corresponding
+## dimension of @var{x} will not be shifted.  For example
 ##
 ## @example
 ## @group
 ## x = [1, 2, 3; 4, 5, 6; 7, 8, 9];
 ## circshift (x, 1)
 ## @result{}  7, 8, 9
 ##     1, 2, 3
 ##     4, 5, 6
diff --git a/scripts/general/diff.m b/scripts/general/diff.m
--- a/scripts/general/diff.m
+++ b/scripts/general/diff.m
@@ -30,18 +30,18 @@
 ##  @var{x}(2) - @var{x}(1), @dots{}, @var{x}(n) - @var{x}(n-1).
 ## @end ifnottex
 ##
 ## If @var{x} is a matrix, @code{diff (@var{x})} is the matrix of column
 ## differences along the first non-singleton dimension.
 ##
 ## The second argument is optional.  If supplied, @code{diff (@var{x},
 ## @var{k})}, where @var{k} is a nonnegative integer, returns the
-## @var{k}-th differences. It is possible that @var{k} is larger than
-## then first non-singleton dimension of the matrix. In this case,
+## @var{k}-th differences.  It is possible that @var{k} is larger than
+## then first non-singleton dimension of the matrix.  In this case,
 ## @code{diff} continues to take the differences along the next
 ## non-singleton dimension.
 ##
 ## The dimension along which to take the difference can be explicitly
 ## stated with the optional variable @var{dim}. In this case the 
 ## @var{k}-th order differences are calculated along this dimension.
 ## In the case where @var{k} exceeds @code{size (@var{x}, @var{dim})}
 ## then an empty matrix is returned.
diff --git a/scripts/general/repmat.m b/scripts/general/repmat.m
--- a/scripts/general/repmat.m
+++ b/scripts/general/repmat.m
@@ -15,17 +15,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} repmat (@var{A}, @var{m}, @var{n})
 ## @deftypefnx {Function File} {} repmat (@var{A}, [@var{m} @var{n}])
-## @deftypefnx {Function File} {} repmat (@var{A}, [@var{m} @var{n} @var{p} ...])
+## @deftypefnx {Function File} {} repmat (@var{A}, [@var{m} @var{n} @var{p} @dots{}])
 ## Form a block matrix of size @var{m} by @var{n}, with a copy of matrix
 ## @var{A} as each element.  If @var{n} is not specified, form an 
 ## @var{m} by @var{m} block matrix.
 ## @end deftypefn
 
 ## Author: Paul Kienzle <pkienzle@kienzle.powernet.co.uk>
 ## Created: July 2000
 
diff --git a/scripts/general/rotdim.m b/scripts/general/rotdim.m
--- a/scripts/general/rotdim.m
+++ b/scripts/general/rotdim.m
@@ -17,18 +17,18 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} rotdim (@var{x}, @var{n}, @var{plane})
 ## Return a copy of @var{x} with the elements rotated counterclockwise in
 ## 90-degree increments.  The second argument is optional, and specifies
 ## how many 90-degree rotations are to be applied (the default value is 1).
 ## The third argument is also optional and defines the plane of the
-## rotation. As such @var{plane} is a two element vector containing two
-## different valid dimensions of the matrix. If @var{plane} is not given
+## rotation.  As such @var{plane} is a two element vector containing two
+## different valid dimensions of the matrix.  If @var{plane} is not given
 ## Then the first two non-singleton dimensions are used.
 ##
 ## Negative values of @var{n} rotate the matrix in a clockwise direction.
 ## For example,
 ##
 ## @example
 ## @group
 ## rotdim ([1, 2; 3, 4], -1, [1, 2])
diff --git a/scripts/general/shiftdim.m b/scripts/general/shiftdim.m
--- a/scripts/general/shiftdim.m
+++ b/scripts/general/shiftdim.m
@@ -15,19 +15,19 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{y} =} shiftdim (@var{x}, @var{n})
 ## @deftypefnx {Function File} {[@var{y}, @var{ns}] =} shiftdim (@var{x})
 ## Shifts the dimension of @var{x} by @var{n}, where @var{n} must be
-## an integer scalar. When @var{n} is positive, the dimensions of
+## an integer scalar.  When @var{n} is positive, the dimensions of
 ## @var{x} are shifted to the left, with the leading dimensions
-## circulated to the end. If @var{n} is negative, then the dimensions
+## circulated to the end.  If @var{n} is negative, then the dimensions
 ## of @var{x} are shifted to the right, with @var{n} leading singleton
 ## dimensions added.
 ##
 ## Called with a single argument, @code{shiftdim}, removes the leading
 ## singleton dimensions, returning the number of dimensions removed
 ## in the second output argument @var{ns}.
 ##
 ## For example 
diff --git a/scripts/general/sortrows.m b/scripts/general/sortrows.m
--- a/scripts/general/sortrows.m
+++ b/scripts/general/sortrows.m
@@ -16,17 +16,17 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} sortrows (@var{a}, @var{c})
 ## Sort the rows of the matrix @var{a} according to the order of the
 ## columns specified in @var{c}.  If @var{c} is omitted, a
-## lexicographical sort is used. By default ascending order is used 
+## lexicographical sort is used.  By default ascending order is used 
 ## however if elements of @var{c} are negative then the corresponding  
 ## column is sorted in descending order.
 ## @end deftypefn
 
 ## Author: Daniel Calvelo, Paul Kienzle
 ## Adapted-by: jwe
 
 function [s, i] = sortrows (m, c)
diff --git a/scripts/special-matrix/magic.m b/scripts/special-matrix/magic.m
--- a/scripts/special-matrix/magic.m
+++ b/scripts/special-matrix/magic.m
@@ -14,17 +14,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} magic (@var{n})
 ##
-## Create an @var{n}-by-@var{n} magic square. Note that @code{magic
+## Create an @var{n}-by-@var{n} magic square.  Note that @code{magic
 ## (@var{2})} is undefined since there is no 2-by-2 magic square.
 ##
 ## @end deftypefn
 
 function A = magic(n)
 
   if (nargin != 1)
     print_usage ();
diff --git a/scripts/special-matrix/pascal.m b/scripts/special-matrix/pascal.m
--- a/scripts/special-matrix/pascal.m
+++ b/scripts/special-matrix/pascal.m
@@ -20,17 +20,17 @@
 ## @deftypefn {Function File} {} pascal (@var{n}, @var{t})
 ##
 ## Return the Pascal matrix of order @var{n} if @code{@var{t} = 0}.
 ## @var{t} defaults to 0. Return lower triangular Cholesky factor of 
 ## the Pascal matrix if @code{@var{t} = 1}. This matrix is its own
 ## inverse, that is @code{pascal (@var{n}, 1) ^ 2 == eye (@var{n})}.
 ## If @code{@var{t} = 2}, return a transposed and  permuted version of
 ## @code{pascal (@var{n}, 1)}, which is the cube-root of the identity
-## matrix. That is @code{pascal (@var{n}, 2) ^ 3 == eye (@var{n})}.
+## matrix.  That is @code{pascal (@var{n}, 2) ^ 3 == eye (@var{n})}.
 ##
 ## @seealso{hankel, vander, sylvester_matrix, hilb, invhilb, toeplitz
 ##           hadamard, wilkinson, compan, rosser}
 ## @end deftypefn
 
 ## Author: Peter Ekberg
 ##         (peda)
 
diff --git a/scripts/special-matrix/rosser.m b/scripts/special-matrix/rosser.m
--- a/scripts/special-matrix/rosser.m
+++ b/scripts/special-matrix/rosser.m
@@ -14,17 +14,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} rosser ()
 ##
-## Returns the Rosser matrix. This is a difficult test case used to test
+## Returns the Rosser matrix.  This is a difficult test case used to test
 ## eigenvalue algorithms.
 ##
 ## @seealso{hankel, vander, sylvester_matrix, hilb, invhilb, toeplitz
 ##           hadamard, wilkinson, compan, pascal}
 ## @end deftypefn
 
 ## Author: Peter Ekberg
 ##         (peda)
diff --git a/scripts/special-matrix/toeplitz.m b/scripts/special-matrix/toeplitz.m
--- a/scripts/special-matrix/toeplitz.m
+++ b/scripts/special-matrix/toeplitz.m
@@ -36,23 +36,23 @@
 ##               c_n    & c_{n-1} & c_{n-2} & \ldots & c_0}\right]
 ## $$
 ## @end tex
 ## @end iftex
 ## @ifnottex
 ##
 ## @example
 ## @group
-## c(0)  r(1)   r(2)  ...  r(n)
-## c(1)  c(0)   r(1)  ... r(n-1)
-## c(2)  c(1)   c(0)  ... r(n-2)
+## c(0)  r(1)   r(2)  @dots{}  r(n)
+## c(1)  c(0)   r(1)  @dots{} r(n-1)
+## c(2)  c(1)   c(0)  @dots{} r(n-2)
 ##  .     ,      ,   .      .
 ##  .     ,      ,     .    .
 ##  .     ,      ,       .  .
-## c(n) c(n-1) c(n-2) ...  c(0)
+## c(n) c(n-1) c(n-2) @dots{}  c(0)
 ## @end group
 ## @end example
 ## @end ifnottex
 ## @seealso{hankel, vander, sylvester_matrix, hilb, invhilb}
 ## @end deftypefn
 
 ## Author: jwe
 
diff --git a/scripts/special-matrix/vander.m b/scripts/special-matrix/vander.m
--- a/scripts/special-matrix/vander.m
+++ b/scripts/special-matrix/vander.m
@@ -31,22 +31,22 @@
 ##               c_n^{n-1}  & \cdots & c_n^2  & c_n    & 1      }\right]
 ## $$
 ## @end tex
 ## @end iftex
 ## @ifnottex
 ##
 ## @example
 ## @group
-## c(1)^(n-1) ... c(1)^2  c(1)  1
-## c(2)^(n-1) ... c(2)^2  c(2)  1
+## c(1)^(n-1) @dots{} c(1)^2  c(1)  1
+## c(2)^(n-1) @dots{} c(2)^2  c(2)  1
 ##     .     .      .      .    .
 ##     .       .    .      .    .
 ##     .         .  .      .    .
-## c(n)^(n-1) ... c(n)^2  c(n)  1
+## c(n)^(n-1) @dots{} c(n)^2  c(n)  1
 ## @end group
 ## @end example
 ## @end ifnottex
 ## @seealso{hankel, sylvester_matrix, hilb, invhilb, toeplitz}
 ## @end deftypefn
 
 ## Author: jwe
 
diff --git a/src/DLD-FUNCTIONS/bsxfun.cc b/src/DLD-FUNCTIONS/bsxfun.cc
--- a/src/DLD-FUNCTIONS/bsxfun.cc
+++ b/src/DLD-FUNCTIONS/bsxfun.cc
@@ -125,21 +125,21 @@ update_index (Array<int>& idx, const dim
       i = i / dv (j);
     }
 }
 
 DEFUN_DLD (bsxfun, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} bsxfun (@var{f}, @var{a}, @var{b})\n\
 Applies a binary function @var{f} element-wise to two matrix arguments\n\
-@var{a} and @var{b}. The function @var{f} must be capable of accepting\n\
+@var{a} and @var{b}.  The function @var{f} must be capable of accepting\n\
 two column vector arguments of equal length, or one column vector\n\
 argument and a scalar.\n\
 \n\
-The dimensions of @var{a} and @var{b} must be equal or singleton. The\n\
+The dimensions of @var{a} and @var{b} must be equal or singleton.  The\n\
 singleton dimensions of the matrices will be expanded to the same\n\
 dimensionality as the other matrix.\n\
 \n\
 @seealso{arrayfun, cellfun}\n\
 @end deftypefn")
 {
   int nargin = args.length ();
   octave_value_list retval;
diff --git a/src/DLD-FUNCTIONS/find.cc b/src/DLD-FUNCTIONS/find.cc
--- a/src/DLD-FUNCTIONS/find.cc
+++ b/src/DLD-FUNCTIONS/find.cc
@@ -488,17 +488,17 @@ If two inputs are given, @var{n} indicat
 find from the beginning of the matrix or vector.\n\
 \n\
 If three inputs are given, @var{direction} should be one of \"first\" or\n\
 \"last\" indicating that it should start counting found elements from the\n\
 first or last element.\n\
 \n\
 Note that this function is particularly useful for sparse matrices, as\n\
 it extracts the non-zero elements as vectors, which can then be used to\n\
-create the original matrix. For example,\n\
+create the original matrix.  For example,\n\
 \n\
 @example\n\
 @group\n\
 sz = size(a);\n\
 [i, j, v] = find (a);\n\
 b = sparse(i, j, v, sz(1), sz(2));\n\
 @end group\n\
 @end example\n\
diff --git a/src/DLD-FUNCTIONS/rand.cc b/src/DLD-FUNCTIONS/rand.cc
--- a/src/DLD-FUNCTIONS/rand.cc
+++ b/src/DLD-FUNCTIONS/rand.cc
@@ -348,19 +348,19 @@ Modeling and Computer Simulation Vol. 8,
 @url{http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html}).\n\
 Do @strong{not} use for cryptography without securely hashing\n\
 several returned values together, otherwise the generator state\n\
 can be learned after reading 624 consecutive values.\n\
 \n\
 Older versions of Octave used a different random number generator.\n\
 The new generator is used by default\n\
 as it is significantly faster than the old generator, and produces\n\
-random numbers with a significantly longer cycle time. However, in\n\
+random numbers with a significantly longer cycle time.  However, in\n\
 some circumstances it might be desirable to obtain the same random\n\
-sequences as used by the old generators. To do this the keyword\n\
+sequences as used by the old generators.  To do this the keyword\n\
 \"seed\" is used to specify that the old generators should be use,\n\
 as in\n\
 \n\
 @example\n\
 rand (\"seed\", val)\n\
 @end example\n\
 \n\
 which sets the seed of the generator to @var{val}. The seed of the\n\
@@ -469,21 +469,21 @@ reset_rand_generator (void *)
 
 DEFUN_DLD (randn, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} randn (@var{x})\n\
 @deftypefnx {Loadable Function} {} randn (@var{n}, @var{m})\n\
 @deftypefnx {Loadable Function} {} randn (\"state\", @var{x})\n\
 @deftypefnx {Loadable Function} {} randn (\"seed\", @var{x})\n\
 Return a matrix with normally distributed pseudo-random\n\
-elements having zero mean and variance one. The arguments are\n\
+elements having zero mean and variance one.  The arguments are\n\
 handled the same as the arguments for @code{rand}.\n\
 \n\
 By default, @code{randn} uses the Marsaglia and Tsang ``Ziggurat technique'' to\n\
-transform from a uniform to a normal distribution. (G. Marsaglia and\n\
+transform from a uniform to a normal distribution.  (G. Marsaglia and\n\
 W.W. Tsang, @cite{Ziggurat method for generating random variables},\n\
 J. Statistical Software, vol 5, 2000,\n\
 @url{http://www.jstatsoft.org/v05/i08/})\n\
 \n\
 @seealso{rand, rande, randg, randp}\n\
 @end deftypefn")
 {
   octave_value retval;
@@ -543,21 +543,21 @@ J. Statistical Software, vol 5, 2000,\n\
 */
 
 DEFUN_DLD (rande, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} rande (@var{x})\n\
 @deftypefnx {Loadable Function} {} rande (@var{n}, @var{m})\n\
 @deftypefnx {Loadable Function} {} rande (\"state\", @var{x})\n\
 @deftypefnx {Loadable Function} {} rande (\"seed\", @var{x})\n\
-Return a matrix with exponentially distributed random elements. The\n\
+Return a matrix with exponentially distributed random elements.  The\n\
 arguments are handled the same as the arguments for @code{rand}.\n\
 \n\
 By default, @code{randn} uses the Marsaglia and Tsang ``Ziggurat technique'' to\n\
-transform from a uniform to a exponential distribution. (G. Marsaglia and\n\
+transform from a uniform to a exponential distribution.  (G. Marsaglia and\n\
 W.W. Tsang, @cite{Ziggurat method for generating random variables},\n\
 J. Statistical Software, vol 5, 2000,\n\
 @url{http://www.jstatsoft.org/v05/i08/})\n\
 @seealso{rand, randn, randg, randp}\n\
 @end deftypefn")
 {
   octave_value retval;
 
@@ -667,19 +667,19 @@ r = randp ((1 - p) / p * randg (n))\n\
 @end example\n\
 @item non-central @code{chisq (df, L)}, for @code{df >= 0} and @code{L > 0}\n\
 (use chisq if @code{L = 0})\n\
 @example\n\
 r = randp (L / 2)\n\
 r(r > 0) = 2 * randg (r(r > 0))\n\
 r(df > 0) += 2 * randg (df(df > 0)/2)\n\
 @end example\n\
-@item @code{Dirichlet (a1, ..., ak)}\n\
+@item @code{Dirichlet (a1, @dots{} ak)}\n\
 @example\n\
-r = (randg (a1), ..., randg (ak))\n\
+r = (randg (a1), @dots{}, randg (ak))\n\
 r = r / sum (r)\n\
 @end example\n\
 @end table\n\
 @seealso{rand, randn, rande, randp}\n\
 @end deftypefn")
 {
   octave_value retval;
 
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -4470,17 +4470,17 @@ Resizing an object to fewer dimensions i
   return retval;
 }
 
 // FIXME -- should use octave_idx_type for dimensions.
 
 DEFUN (reshape, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} reshape (@var{a}, @var{m}, @var{n}, @dots{})\n\
-@deftypefnx {Built-in Function} {} reshape (@var{a}, @var{siz})\n\
+@deftypefnx {Built-in Function} {} reshape (@var{a}, @var{size})\n\
 Return a matrix with the given dimensions whose elements are taken\n\
 from the matrix @var{a}.  The elements of the matrix are accessed in\n\
 column-major order (like Fortran arrays are stored).\n\
 \n\
 For example,\n\
 \n\
 @example\n\
 @group\n\
@@ -5336,18 +5336,18 @@ matrix.  For example,\n\
             3  3\n\
      @result{} i = 1  3\n\
             2  1\n\
             3  2\n\
 @end group\n\
 @end example\n\
 \n\
 If the optional argument @var{dim} is given, then the matrix is sorted\n\
-along the dimension defined by @var{dim}. The optional argument @code{mode}\n\
-defines the order in which the values will be sorted. Valid values of\n\
+along the dimension defined by @var{dim}.  The optional argument @code{mode}\n\
+defines the order in which the values will be sorted.  Valid values of\n\
 @code{mode} are `ascend' or `descend'.\n\
 \n\
 For equal elements, the indices are such that the equal elements are listed\n\
 in the order that appeared in the original list.\n\
 \n\
 The @code{sort} function may also be used to sort strings and cell arrays\n\
 of strings, in which case the dictionary order of the strings is used.\n\
 \n\
diff --git a/src/mappers.cc b/src/mappers.cc
--- a/src/mappers.cc
+++ b/src/mappers.cc
@@ -628,17 +628,17 @@ Compute exp (@var{x}) - 1 accurately in 
 
   return retval;
 }
 
 DEFUN (finite, args, ,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} finite (@var{x})\n\
 Return 1 for elements of @var{x} that are finite values and zero\n\
-otherwise. For example,\n\
+otherwise.  For example,\n\
 \n\
 @example\n\
 @group\n\
 finite ([13, Inf, NA, NaN])\n\
      @result{} [ 1, 0, 0, 0 ]\n\
 @end group\n\
 @end example\n\
 @end deftypefn")
@@ -888,17 +888,17 @@ Return 1 for characters that are decimal
 
   return retval;
 }
 
 DEFUN (isinf, args, ,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} isinf (@var{x})\n\
 Return 1 for elements of @var{x} that are infinite and zero\n\
-otherwise. For example,\n\
+otherwise.  For example,\n\
 \n\
 @example\n\
 @group\n\
 isinf ([13, Inf, NA, NaN])\n\
      @result{} [ 0, 1, 0, 0 ]\n\
 @end group\n\
 @end example\n\
 @end deftypefn")
