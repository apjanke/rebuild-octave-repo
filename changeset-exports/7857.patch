# HG changeset patch
# User Shai Ayal <shaiay@users.sourceforge.net>
# Date 1205088712 -7200
#      Sun Mar 09 20:51:52 2008 +0200
# Node ID 09b1a9c8812850cd4ba12b1b52b7698697ed16b4
# Parent  cf672485be432ab544325067200a64551980db6b
added (far from perfect) support for logscale ticks

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,16 @@
 2008-06-04  Shai Ayal  <shaiay@users.sourceforge.net>
 
+	* graphics.h.in (axes::properties::update_xlim,
+	axes::properties::update_ylim, axes::properties::update_zlim):
+	pass is_logscale flag to axes::properties::calc_ticks_and_lims
+	* graphics.cc (axes::properties::calc_ticks_and_lims): Added
+	support for log scale
+
 	* graphics.h.in (axes::properities::fix_limits) : New method.
 	(axes::properties::update_xlim, axes::properties::update_ylim,
 	axes::properties::update_zlim): Use fix_limits.
 
 	* graphics.cc (axes::properties::calc_ticks_and_lims): Make sure
 	that lo <= hi.
 
 	* graphics.h.in (axes::pixel2coord, axes::coord2pixel): New functions.
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -2665,58 +2665,76 @@ axes::properties::get_axis_limits (doubl
 
   retval(0) = min_val;
   retval(1) = max_val;
 
   return retval;
 }
 
 void 
-axes::properties::calc_ticks_and_lims (array_property& lims, array_property& ticks, bool limmode_is_auto)
+axes::properties::calc_ticks_and_lims (array_property& lims, array_property& ticks, bool limmode_is_auto, bool is_logscale)
 {
 
   // FIXME -- add log ticks and lims
 
   if (lims.get ().is_empty ())
     return;
 
   double lo = (lims.get ().matrix_value ()) (0);
   double hi = (lims.get ().matrix_value ()) (1);
   // FIXME should this be checked for somewhere else? (i.e. set{x,y,z}lim)
   if (hi < lo) 
     {
       double tmp = hi;
       hi = lo;
       lo = tmp;
     }
-  
+
+  if (is_logscale)
+    {
+      // FIXME we should check for negtives here
+      hi = std::log10 (hi);
+      lo = std::log10 (lo);
+    }
+
   double tick_sep = calc_tick_sep (lo , hi);
 
   int i1 = static_cast<int> (std::floor (lo / tick_sep));
   int i2 = static_cast<int> (std::ceil (hi / tick_sep));
 
   if (limmode_is_auto)
     {
       // adjust limits to include min and max tics
       Matrix tmp_lims (1,2);
       tmp_lims(0) = tick_sep * i1;
       tmp_lims(1) = tick_sep * i2;
 
+      if (is_logscale) 
+	{
+	  tmp_lims(0) = std::pow (10.,tmp_lims(0));
+	  tmp_lims(1) = std::pow (10.,tmp_lims(1));
+	}
       lims = tmp_lims;
     }
   else
     {
       // adjust min and max tics if they are out of limits
       i1 = static_cast<int> (std::ceil (lo / tick_sep));
       i2 = static_cast<int> (std::floor (hi / tick_sep));
     }
       
   Matrix tmp_ticks (1, i2-i1+1);
-  for (int i = 0; i <= i2-i1; i++)
-    tmp_ticks (i) = tick_sep * (i+i1);
+  for (int i = 0; i <= i2-i1; i++) 
+    {
+      tmp_ticks (i) = tick_sep * (i+i1);
+      if (is_logscale)
+	tmp_ticks (i) = std::pow (10., tmp_ticks (i));
+    }
+	
+  
 
   ticks = tmp_ticks;
 }
 
 static bool updating_axis_limits = false;
 
 void
 axes::update_axis_limits (const std::string& axis_type)
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -2709,17 +2709,17 @@ public:
 
     void update_view (void) { update_camera (); }
 
     void update_xdir (void) { update_camera (); }
     void update_ydir (void) { update_camera (); }
     void update_zdir (void) { update_camera (); }
 
     double calc_tick_sep (double minval, double maxval);
-    void calc_ticks_and_lims (array_property& lims, array_property& ticks, bool limmode_is_auto);
+    void calc_ticks_and_lims (array_property& lims, array_property& ticks, bool limmode_is_auto, bool is_logscale);
     void fix_limits (array_property& lims)
     {
       if (lims.get ().is_empty ()) 
 	return;
 
       Matrix l = lims.get ().matrix_value ();
       if (l(0) > l(1))
 	{
@@ -2736,39 +2736,39 @@ public:
     }      
 
   public:
     Matrix get_axis_limits (double xmin, double xmax, double min_pos, bool logscale);
     
     void update_xlim (bool do_clr_zoom = true)
     {
       if (xtickmode.is ("auto"))
-	calc_ticks_and_lims (xlim, xtick, xlimmode.is ("auto"));
+	calc_ticks_and_lims (xlim, xtick, xlimmode.is ("auto"), xscale.is ("log"));
 
       fix_limits (xlim);
 
       if (do_clr_zoom)
 	zoom_stack.clear ();
     }
 
     void update_ylim (bool do_clr_zoom = true)
     {
       if (ytickmode.is ("auto"))
-	calc_ticks_and_lims (ylim, ytick, ylimmode.is ("auto"));
+	calc_ticks_and_lims (ylim, ytick, ylimmode.is ("auto"), yscale.is ("log"));
 
       fix_limits (ylim);
 
       if (do_clr_zoom)
 	zoom_stack.clear ();
     }
 
     void update_zlim (void)
     {
       if (ztickmode.is ("auto"))
-	calc_ticks_and_lims (zlim, ztick, zlimmode.is ("auto"));
+	calc_ticks_and_lims (zlim, ztick, zlimmode.is ("auto"), zscale.is ("log"));
 
       fix_limits (zlim);
 
       zoom_stack.clear ();
     }
     
   };
 
