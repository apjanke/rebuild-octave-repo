# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1520015134 18000
#      Fri Mar 02 13:25:34 2018 -0500
# Node ID 1e0718c1867ce3518433d046cce11dd937c3f818
# Parent  4ffdaea6e85eaa62163a2cf92a774a3fafa7d36d
eliminate most Qt version checks

* acinclude.m4 (OCTAVE_CHECK_FUNC_QHEADERVIEW_SETSECTIONRESIZEMODE,
OCTAVE_CHECK_FUNC_QHEADERVIEW_SETSECTIONSCLICKABLE,
OCTAVE_CHECK_FUNC_QHEADERVIEW_SETSECTIONSMOVABLE,
OCTAVE_CHECK_FUNC_QINSTALLMESSAGEHANDLER,
OCTAVE_CHECK_FUNC_QMOUSEEVENT_LOCALPOS,
OCTAVE_CHECK_FUNC_QTMESSAGEHANDLER_ACCEPTS_QMESSAGELOGCONTEXT): New macros.
(OCTAVE_CHECK_QT_VERSION): Use them.  Check for QStandardPaths
header.

* Canvas.cc, find-files-dialog.cc, file-editor-tab.cc,
octave-gui.cc, resource-manager.cc, shortcut-manager.cc,
variable-editor.cc, workspace-view.cc:
Use new macros instead of checking Qt version.

diff --git a/libgui/graphics/Canvas.cc b/libgui/graphics/Canvas.cc
--- a/libgui/graphics/Canvas.cc
+++ b/libgui/graphics/Canvas.cc
@@ -384,20 +384,20 @@ namespace QtHandles
         else if (childObj.isa ("uicontrol") || childObj.isa ("uipanel")
                  || childObj.isa ("uibuttongroup"))
           {
             Matrix bb = childObj.get_properties ().get_boundingbox (false);
             QRectF r (bb(0), bb(1), bb(2), bb(3));
 
             r.adjust (-5, -5, 5, 5);
 
-#if (HAVE_QT4)
+#if defined (HAVE_QMOUSEEVENT_LOCALPOS)
+            bool rect_contains_pos = r.contains (event->localPos ());
+#else
             bool rect_contains_pos = r.contains (event->posF ());
-#else
-            bool rect_contains_pos = r.contains (event->localPos ());
 #endif
             if (rect_contains_pos)
               {
                 currentObj = childObj;
                 break;
               }
           }
       }
@@ -438,20 +438,20 @@ namespace QtHandles
               }
             // FIXME: is this really necessary? the axes object should
             //        have been selected through selectFromAxes anyway
             else if (it->get_properties ().is_hittest ())
               {
                 Matrix bb = it->get_properties ().get_boundingbox (true);
                 QRectF r (bb(0), bb(1), bb(2), bb(3));
 
-#if defined (HAVE_QT4)
+#if defined (HAVE_QMOUSEEVENT_LOCALPOS)
+                bool rect_contains_pos = r.contains (event->localPos ());
+#else
                 bool rect_contains_pos = r.contains (event->posF ());
-#else
-                bool rect_contains_pos = r.contains (event->localPos ());
 #endif
                 if (rect_contains_pos)
                   axesObj = *it;
               }
 
             if (axesObj && currentObj)
               break;
           }
diff --git a/libgui/src/find-files-dialog.cc b/libgui/src/find-files-dialog.cc
--- a/libgui/src/find-files-dialog.cc
+++ b/libgui/src/find-files-dialog.cc
@@ -121,20 +121,20 @@ namespace octave
     m_file_list->setShowGrid (false);
     m_file_list->setSelectionBehavior (QAbstractItemView::SelectRows);
     m_file_list->setSelectionMode (QAbstractItemView::SingleSelection);
     m_file_list->setAlternatingRowColors (true);
     m_file_list->setToolTip (tr ("Search results"));
     m_file_list->setSortingEnabled (true);
     m_file_list->horizontalHeader ()->restoreState (settings->value ("findfiles/column_state").toByteArray ());
     m_file_list->horizontalHeader ()->setSortIndicatorShown (true);
-#if defined (HAVE_QT4)
+#if defined (HAVE_QHEADERVIEW_SETSECTIONSCLICKABLE)
+    m_file_list->horizontalHeader ()->setSectionsClickable (true);
+#else
     m_file_list->horizontalHeader ()->setClickable (true);
-#else
-    m_file_list->horizontalHeader ()->setSectionsClickable (true);
 #endif
     m_file_list->horizontalHeader ()->setStretchLastSection (true);
     m_file_list->sortByColumn (settings->value ("findfiles/sort_files_by_column",0).toInt (),
                                static_cast<Qt::SortOrder>
                                (settings->value ("findfiles/sort_files_by_order",
                                                  Qt::AscendingOrder).toUInt ()));
 
     connect (m_file_list, SIGNAL (doubleClicked (const QModelIndex&)),
diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -631,23 +631,23 @@ namespace octave
 
     if (_lexer_apis)
       {
         _lexer_apis->cancelPreparation ();  // stop preparing if apis exists
 
         bool update_apis = false;  // flag, whether update of apis files
 
         // get path to prepared api info
-#if defined (HAVE_QT4)
+#if defined (HAVE_QSTANDARDPATHS)
         QString prep_apis_path
-          = QDesktopServices::storageLocation (QDesktopServices::HomeLocation)
+          = QStandardPaths::writableLocation (QStandardPaths::HomeLocation)
           + "/.config/octave/" + QString (OCTAVE_VERSION) + "/qsci/";
 #else
         QString prep_apis_path
-          = QStandardPaths::writableLocation (QStandardPaths::HomeLocation)
+          = QDesktopServices::storageLocation (QDesktopServices::HomeLocation)
           + "/.config/octave/" + QString (OCTAVE_VERSION) + "/qsci/";
 #endif
 
         // get settings which infos are used for octave
         bool octave_builtins = settings->value (
                                                 "editor/codeCompletion_octave_builtins", true).toBool ();
         bool octave_functions = settings->value (
                                                  "editor/codeCompletion_octave_functions", true).toBool ();
diff --git a/libgui/src/octave-gui.cc b/libgui/src/octave-gui.cc
--- a/libgui/src/octave-gui.cc
+++ b/libgui/src/octave-gui.cc
@@ -55,20 +55,20 @@ along with Octave; see the file COPYING.
 #include "resource-manager.h"
 #include "shortcut-manager.h"
 #include "thread-manager.h"
 #include "welcome-wizard.h"
 
 // Disable all Qt messages by default.
 
 static void
-#if defined (HAVE_QT4)
+#if defined (QTMESSAGEHANDLER_ACCEPTS_QMESSAGELOGCONTEXT)
+message_handler (QtMsgType, const QMessageLogContext &, const QString &)
+#else
 message_handler (QtMsgType, const char *)
-#else
-message_handler (QtMsgType, const QMessageLogContext &, const QString &)
 #endif
 { }
 
 namespace octave
 {
   gui_application::gui_application (int argc, char **argv)
     : application (argc, argv), m_argc (argc), m_argv (argv),
       m_gui_running (false)
@@ -136,20 +136,20 @@ namespace octave
 
     std::string show_gui_msgs =
       sys::env::getenv ("OCTAVE_SHOW_GUI_MESSAGES");
 
     // Installing our handler suppresses the messages.
 
     if (show_gui_msgs.empty ())
       {
-#if defined (HAVE_QT4)
+#if defined (HAVE_QINSTALLMESSAGEHANDLER)
+        qInstallMessageHandler (message_handler);
+#else
         qInstallMsgHandler (message_handler);
-#else
-        qInstallMessageHandler (message_handler);
 #endif
       }
 
     // If START_GUI is false, we still set up the QApplication so that
     // we can use Qt widgets for plot windows.
 
     QApplication qt_app (m_argc, m_argv);
     QTranslator gui_tr, qt_tr, qsci_tr;
diff --git a/libgui/src/resource-manager.cc b/libgui/src/resource-manager.cc
--- a/libgui/src/resource-manager.cc
+++ b/libgui/src/resource-manager.cc
@@ -26,17 +26,17 @@ along with Octave; see the file COPYING.
 
 #include <string>
 
 #include <QFile>
 #include <QDir>
 #include <QNetworkProxy>
 #include <QLibraryInfo>
 #include <QMessageBox>
-#if defined (HAVE_QT5)
+#if defined (HAVE_QSTANDARDPATHS)
 #  include <QStandardPaths>
 #endif
 #include <QTextCodec>
 
 #include "error.h"
 #include "file-ops.h"
 #include "help.h"
 #include "oct-env.h"
@@ -64,22 +64,22 @@ namespace octave
 
     return QString::fromStdString (dsf);
   }
 
   resource_manager::resource_manager (void)
     : m_settings_directory (), m_settings_file (), m_settings (nullptr),
       m_default_settings (nullptr)
   {
-#if defined (HAVE_QT4)
+#if defined (HAVE_QSTANDARDPATHS)
+    QString home_path
+      = QStandardPaths::writableLocation (QStandardPaths::HomeLocation);
+#else
     QString home_path
       = QDesktopServices::storageLocation (QDesktopServices::HomeLocation);
-#else
-    QString home_path
-      = QStandardPaths::writableLocation (QStandardPaths::HomeLocation);
 #endif
 
     m_settings_directory = home_path + "/.config/octave";
 
     m_settings_file = m_settings_directory + "/qt-settings";
 
     m_default_settings = new QSettings (default_qt_settings_file (),
                                         QSettings::IniFormat);
diff --git a/libgui/src/shortcut-manager.cc b/libgui/src/shortcut-manager.cc
--- a/libgui/src/shortcut-manager.cc
+++ b/libgui/src/shortcut-manager.cc
@@ -509,20 +509,20 @@ namespace octave
       qDebug () << "Key: " << key << " not found in m_action_hash";
   }
 
   void shortcut_manager::do_fill_treewidget (QTreeWidget *tree_view)
   {
     m_dialog = nullptr;
     m_level_hash.clear ();
 
-#if defined (HAVE_QT4)
+#if defined (HAVE_QHEADERVIEW_SETSECTIONRESIZEMODE)
+    tree_view->header ()->setSectionResizeMode (QHeaderView::ResizeToContents);
+#else
     tree_view->header ()->setResizeMode (QHeaderView::ResizeToContents);
-#else
-    tree_view->header ()->setSectionResizeMode (QHeaderView::ResizeToContents);
 #endif
 
     QTreeWidgetItem *main = new QTreeWidgetItem (tree_view);
     main->setText (0, tr ("Global"));
     main->setExpanded (true);
     QTreeWidgetItem *main_file = new QTreeWidgetItem (main);
     main_file->setText (0, tr ("File Menu"));
     QTreeWidgetItem *main_edit = new QTreeWidgetItem (main);
diff --git a/libgui/src/variable-editor.cc b/libgui/src/variable-editor.cc
--- a/libgui/src/variable-editor.cc
+++ b/libgui/src/variable-editor.cc
@@ -298,32 +298,32 @@ variable_editor_view::variable_editor_vi
   setSelectionMode (QAbstractItemView::ContiguousSelection);
 
   horizontalHeader ()->setContextMenuPolicy (Qt::CustomContextMenu);
   verticalHeader ()->setContextMenuPolicy (Qt::CustomContextMenu);
 
   setHorizontalScrollMode (QAbstractItemView::ScrollPerPixel);
   setVerticalScrollMode (QAbstractItemView::ScrollPerPixel);
 
-#if defined (HAVE_QT4)
+#if defined (HAVE_QHEADERVIEW_SETSECTIONRESIZEMODE)
+  verticalHeader ()->setSectionResizeMode (QHeaderView::Interactive);
+#else
   verticalHeader ()->setResizeMode (QHeaderView::Interactive);
-#else
-  verticalHeader ()->setSectionResizeMode (QHeaderView::Interactive);
 #endif
 }
 
 void
 variable_editor_view::setModel (QAbstractItemModel *model)
 {
   QTableView::setModel (model);
 
-#if defined (HAVE_QT4)
+#if defined (HAVE_QHEADERVIEW_SETSECTIONRESIZEMODE)
+  horizontalHeader ()->setSectionResizeMode (QHeaderView::Interactive);
+#else
   horizontalHeader ()->setResizeMode (QHeaderView::Interactive);
-#else
-  horizontalHeader ()->setSectionResizeMode (QHeaderView::Interactive);
 #endif
 
   m_var_model = parent ()->findChild<variable_editor_model *> ();
 
   if (m_var_model != nullptr && m_var_model->column_width () > 0)
     {
       // col_width is in characters.  The font should be a fixed-width
       // font, so any character will do.  If not, you lose!
diff --git a/libgui/src/workspace-view.cc b/libgui/src/workspace-view.cc
--- a/libgui/src/workspace-view.cc
+++ b/libgui/src/workspace-view.cc
@@ -108,22 +108,25 @@ namespace octave
         // Initialize collapse/expand state of the workspace subcategories.
 
         //enable sorting (setting column and order after model was set)
         m_view->setSortingEnabled (true);
         // Initialize column order and width of the workspace
         m_view->horizontalHeader ()->restoreState (settings->value ("workspaceview/column_state").toByteArray ());
 
         // Set header properties for sorting
-#if defined (HAVE_QT4)
+#if defined (HAVE_QHEADERVIEW_SETSECTIONSCLICKABLE)
+        m_view->horizontalHeader ()->setSectionsClickable (true);
+#else
         m_view->horizontalHeader ()->setClickable (true);
+#endif
+#if defined (HAVE_QHEADERVIEW_SETSECTIONSMOVABLE)
+        m_view->horizontalHeader ()->setSectionsMovable (true);
+#else
         m_view->horizontalHeader ()->setMovable (true);
-#else
-        m_view->horizontalHeader ()->setSectionsClickable (true);
-        m_view->horizontalHeader ()->setSectionsMovable (true);
 #endif
         m_view->horizontalHeader ()->setSortIndicator (settings->value ("workspaceview/sort_by_column",0).toInt (),
                                                        static_cast<Qt::SortOrder>
                                                        (settings->value ("workspaceview/sort_order", Qt::AscendingOrder).toUInt ()));
         m_view->horizontalHeader ()->setSortIndicatorShown (true);
 
         m_view->horizontalHeader ()->setContextMenuPolicy (Qt::CustomContextMenu);
         connect (m_view->horizontalHeader (),
diff --git a/m4/acinclude.m4 b/m4/acinclude.m4
--- a/m4/acinclude.m4
+++ b/m4/acinclude.m4
@@ -339,16 +339,139 @@ AC_DEFUN([OCTAVE_CHECK_FUNC_QABSTRACTITE
     AC_LANG_POP(C++)
   ])
   if test $octave_cv_func_qabstractitemmodel_beginresetmodel = yes; then
     AC_DEFINE(HAVE_QABSTRACTITEMMODEL_BEGINRESETMODEL, 1,
       [Define to 1 if you have the `QAbstractItemModel::beginResetModel' member function.])
   fi
 ])
 dnl
+dnl Check whether the Qt QHeaderView class has the setSectionResizeMode
+dnl function.  This function was introduced in Qt 5.
+dnl
+dnl FIXME: Delete this entirely when we drop support for Qt 4.
+dnl
+AC_DEFUN([OCTAVE_CHECK_FUNC_QHEADERVIEW_SETSECTIONRESIZEMODE], [
+  AC_CACHE_CHECK([for QHeaderView::setSectionResizeMode],
+    [octave_cv_func_qheaderview_setsectionresizemode],
+    [AC_LANG_PUSH(C++)
+    ac_octave_save_CPPFLAGS="$CPPFLAGS"
+    ac_octave_save_CXXFLAGS="$CXXFLAGS"
+    CPPFLAGS="$QT_CPPFLAGS $CXXPICFLAG $CPPFLAGS"
+    CXXFLAGS="$CXXPICFLAG $CPPFLAGS"
+    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
+        #include <QHeaderView>
+        ]], [[
+        QHeaderView header_view (Qt::Horizontal);
+        header_view.setSectionResizeMode (QHeaderView::Interactive);
+        ]])],
+      octave_cv_func_qheaderview_setsectionresizemode=yes,
+      octave_cv_func_qheaderview_setsectionresizemode=no)
+    CPPFLAGS="$ac_octave_save_CPPFLAGS"
+    CXXFLAGS="$ac_octave_save_CXXFLAGS"
+    AC_LANG_POP(C++)
+  ])
+  if test $octave_cv_func_qheaderview_setsectionresizemode = yes; then
+    AC_DEFINE(HAVE_QHEADERVIEW_SETSECTIONRESIZEMODE, 1,
+      [Define to 1 if you have the `QHeaderView::setSectionResizeMode' member function.])
+  fi
+])
+dnl
+dnl Check whether the Qt QHeaderView class has the setSectionsClickable
+dnl function.  This function was introduced in Qt 5.
+dnl
+dnl FIXME: Delete this entirely when we drop support for Qt 4.
+dnl
+AC_DEFUN([OCTAVE_CHECK_FUNC_QHEADERVIEW_SETSECTIONSCLICKABLE], [
+  AC_CACHE_CHECK([for QHeaderView::setSectionsClickable],
+    [octave_cv_func_qheaderview_setsectionsclickable],
+    [AC_LANG_PUSH(C++)
+    ac_octave_save_CPPFLAGS="$CPPFLAGS"
+    ac_octave_save_CXXFLAGS="$CXXFLAGS"
+    CPPFLAGS="$QT_CPPFLAGS $CXXPICFLAG $CPPFLAGS"
+    CXXFLAGS="$CXXPICFLAG $CPPFLAGS"
+    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
+        #include <QHeaderView>
+        ]], [[
+        QHeaderView header_view (Qt::Horizontal);
+        header_view.setSectionsClickable (true);
+        ]])],
+      octave_cv_func_qheaderview_setsectionsclickable=yes,
+      octave_cv_func_qheaderview_setsectionsclickable=no)
+    CPPFLAGS="$ac_octave_save_CPPFLAGS"
+    CXXFLAGS="$ac_octave_save_CXXFLAGS"
+    AC_LANG_POP(C++)
+  ])
+  if test $octave_cv_func_qheaderview_setsectionsclickable = yes; then
+    AC_DEFINE(HAVE_QHEADERVIEW_SETSECTIONSCLICKABLE, 1,
+      [Define to 1 if you have the `QHeaderView::setSectionsClickable' member function.])
+  fi
+])
+dnl
+dnl Check whether the Qt QHeaderView class has the setSectionsMovable
+dnl function.  This function was introduced in Qt 5.
+dnl
+dnl FIXME: Delete this entirely when we drop support for Qt 4.
+dnl
+AC_DEFUN([OCTAVE_CHECK_FUNC_QHEADERVIEW_SETSECTIONSMOVABLE], [
+  AC_CACHE_CHECK([for QHeaderView::setSectionsMovable],
+    [octave_cv_func_qheaderview_setsectionsmovable],
+    [AC_LANG_PUSH(C++)
+    ac_octave_save_CPPFLAGS="$CPPFLAGS"
+    ac_octave_save_CXXFLAGS="$CXXFLAGS"
+    CPPFLAGS="$QT_CPPFLAGS $CXXPICFLAG $CPPFLAGS"
+    CXXFLAGS="$CXXPICFLAG $CPPFLAGS"
+    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
+        #include <QHeaderView>
+        ]], [[
+        QHeaderView header_view (Qt::Horizontal);
+        header_view.setSectionsMovable (true);
+        ]])],
+      octave_cv_func_qheaderview_setsectionsmovable=yes,
+      octave_cv_func_qheaderview_setsectionsmovable=no)
+    CPPFLAGS="$ac_octave_save_CPPFLAGS"
+    CXXFLAGS="$ac_octave_save_CXXFLAGS"
+    AC_LANG_POP(C++)
+  ])
+  if test $octave_cv_func_qheaderview_setsectionsmovable = yes; then
+    AC_DEFINE(HAVE_QHEADERVIEW_SETSECTIONSMOVABLE, 1,
+      [Define to 1 if you have the `QHeaderView::setSectionsMovable' member function.])
+  fi
+])
+dnl
+dnl Check whether the Qt function qInstallMessageHandler is available.
+dnl This function was introduced in Qt 5.
+dnl
+dnl FIXME: Delete this entirely when we drop support for Qt 4.
+dnl
+AC_DEFUN([OCTAVE_CHECK_FUNC_QINSTALLMESSAGEHANDLER], [
+  AC_CACHE_CHECK([for qInstallMessageHandler],
+    [octave_cv_func_qinstallmessagehandler],
+    [AC_LANG_PUSH(C++)
+    ac_octave_save_CPPFLAGS="$CPPFLAGS"
+    ac_octave_save_CXXFLAGS="$CXXFLAGS"
+    CPPFLAGS="$QT_CPPFLAGS $CXXPICFLAG $CPPFLAGS"
+    CXXFLAGS="$CXXPICFLAG $CPPFLAGS"
+    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
+        #include <QtGlobal>
+        ]], [[
+        qInstallMessageHandler (nullptr);
+        ]])],
+      octave_cv_func_qinstallmessagehandler=yes,
+      octave_cv_func_qinstallmessagehandler=no)
+    CPPFLAGS="$ac_octave_save_CPPFLAGS"
+    CXXFLAGS="$ac_octave_save_CXXFLAGS"
+    AC_LANG_POP(C++)
+  ])
+  if test $octave_cv_func_qinstallmessagehandler = yes; then
+    AC_DEFINE(HAVE_QINSTALLMESSAGEHANDLER, 1,
+      [Define to 1 if you have the `qInstallMessageHandler' function.])
+  fi
+])
+dnl
 dnl Check whether the Qt class QLineEdit has the setPlaceholderText member
 dnl function.  This member function was introduced in Qt 4.7.
 dnl
 dnl FIXME: Delete this entirely when we can safely assume that Qt 4.7 or later
 dnl is in use everywhere, or when we drop support for Qt 4.
 dnl
 AC_DEFUN([OCTAVE_CHECK_FUNC_QLINEEDIT_SETPLACEHOLDERTEXT], [
   AC_CACHE_CHECK([for QLineEdit::setPlaceholderText in <QLinedEdit>],
@@ -371,16 +494,47 @@ AC_DEFUN([OCTAVE_CHECK_FUNC_QLINEEDIT_SE
     AC_LANG_POP(C++)
   ])
   if test $octave_cv_func_qlineedit_setplaceholdertext = yes; then
     AC_DEFINE(HAVE_QLINEEDIT_SETPLACEHOLDERTEXT, 1,
       [Define to 1 if you have the `QLineEdit::setPlaceholderText' member function.])
   fi
 ])
 dnl
+dnl Check whether the Qt QMouseEvent class has the localPos function.
+dnl This function was introduced in Qt 5.
+dnl
+dnl FIXME: Delete this entirely when we drop support for Qt 4.
+dnl
+AC_DEFUN([OCTAVE_CHECK_FUNC_QMOUSEEVENT_LOCALPOS], [
+  AC_CACHE_CHECK([for QMouseEvent::localPos],
+    [octave_cv_func_qmouseevent_localpos],
+    [AC_LANG_PUSH(C++)
+    ac_octave_save_CPPFLAGS="$CPPFLAGS"
+    ac_octave_save_CXXFLAGS="$CXXFLAGS"
+    CPPFLAGS="$QT_CPPFLAGS $CXXPICFLAG $CPPFLAGS"
+    CXXFLAGS="$CXXPICFLAG $CPPFLAGS"
+    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
+        #include <QMouseEvent>
+        ]], [[
+        QMouseEvent *event;
+        event->localPos ();
+        ]])],
+      octave_cv_func_qmouseevent_localpos=yes,
+      octave_cv_func_qmouseevent_localpos=no)
+    CPPFLAGS="$ac_octave_save_CPPFLAGS"
+    CXXFLAGS="$ac_octave_save_CXXFLAGS"
+    AC_LANG_POP(C++)
+  ])
+  if test $octave_cv_func_qmouseevent_localpos = yes; then
+    AC_DEFINE(HAVE_QMOUSEEVENT_LOCALPOS, 1,
+      [Define to 1 if you have the `QMouseEvent::localPos' member function.])
+  fi
+])
+dnl
 dnl Check whether the QScintilla class QsciScintilla has the
 dnl findFirstInSelection member function.  This member function was introduced
 dnl in QScintilla 2.7.
 dnl
 dnl FIXME: Delete this entirely when we can safely assume that QScintilla 2.7
 dnl or later is in use everywhere, or when we drop support for Qt 4 (Qt 5 only
 dnl works with QScintilla 2.7.1 or later).
 dnl
@@ -482,16 +636,49 @@ AC_DEFUN([OCTAVE_CHECK_FUNC_QTABWIDGET_S
     AC_LANG_POP(C++)
   ])
   if test $octave_cv_func_qtabwidget_setmovable = yes; then
     AC_DEFINE(HAVE_QTABWIDGET_SETMOVABLE, 1,
       [Define to 1 if you have the `QTabWidget::setMovable' member function.])
   fi
 ])
 dnl
+dnl Check whether Qt message handler function accepts QMessageLogContext
+dnl argument.  This change was introduced in Qt 5.
+dnl
+dnl FIXME: Delete this entirely when we drop support for Qt 4.
+dnl
+AC_DEFUN([OCTAVE_CHECK_FUNC_QTMESSAGEHANDLER_ACCEPTS_QMESSAGELOGCONTEXT], [
+  AC_CACHE_CHECK([whether Qt message handler accepts QMessageLogContext],
+    [octave_cv_func_qtmessagehandler_accepts_qmessagelogcontext],
+    [AC_LANG_PUSH(C++)
+    ac_octave_save_CPPFLAGS="$CPPFLAGS"
+    ac_octave_save_CXXFLAGS="$CXXFLAGS"
+    CPPFLAGS="$QT_CPPFLAGS $CXXPICFLAG $CPPFLAGS"
+    CXXFLAGS="$CXXPICFLAG $CXXFLAGS"
+    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
+        #include <QtGlobal>
+        static void
+        msg_handler (QtMsgType, const QMessageLogContext &, const QString &)
+        { }
+        ]], [[
+        QtMessageHandler fptr = msg_handler;
+        ]])],
+      octave_cv_func_qtmessagehandler_accepts_qmessagelogcontext=yes,
+      octave_cv_func_qtmessagehandler_accepts_qmessagelogcontext=no)
+    CPPFLAGS="$ac_octave_save_CPPFLAGS"
+    CXXFLAGS="$ac_octave_save_CXXFLAGS"
+    AC_LANG_POP(C++)
+  ])
+  if test $octave_cv_func_qtmessagehandler_accepts_qmessagelogcontext = yes; then
+    AC_DEFINE(QTMESSAGEHANDLER_ACCEPTS_QMESSAGELOGCONTEXT, 1,
+      [Define to 1 if Qt message handler accepts 'QMessageLogContext' argument.])
+  fi
+])
+dnl
 dnl Check whether HDF5 library has version 1.6 API functions.
 dnl
 AC_DEFUN([OCTAVE_CHECK_HDF5_HAS_VER_16_API], [
   AC_CACHE_CHECK([whether HDF5 library has enforced version 1.6 API],
     [octave_cv_hdf5_has_ver_16_api],
     [AC_LINK_IFELSE([AC_LANG_PROGRAM([[
       #include <hdf5.h>
       ]], [[
@@ -1795,26 +1982,39 @@ AC_DEFUN([OCTAVE_CHECK_QT_VERSION], [AC_
 
   if test $build_qt_gui = yes; then
     ## We have what we need to build the Qt GUI.  The remaining
     ## checks below are for optional features related to the Qt GUI.
 
     AC_DEFINE(HAVE_QT, 1,
       [Define to 1 if Qt is available, with all required functions, libraries, developer header files, and utility programs (moc, uic, rcc, and lrelease).])
 
+    AC_LANG_PUSH(C++)
+    ac_octave_save_CPPFLAGS="$CPPFLAGS"
+    CPPFLAGS="$QT_CPPFLAGS $CXXPICFLAG $CPPFLAGS"
+    AC_CHECK_HEADERS([QStandardPaths])
+    CPPFLAGS="$ac_octave_save_CPPFLAGS"
+    AC_LANG_POP(C++)
+
     ## We don't need to unset cache variables for any of the remaining
     ## tests if they fail because we have already decided that the Qt
     ## version that we are testing now will be the one used.
 
+    OCTAVE_CHECK_FUNC_QHEADERVIEW_SETSECTIONRESIZEMODE
+    OCTAVE_CHECK_FUNC_QHEADERVIEW_SETSECTIONSCLICKABLE
+    OCTAVE_CHECK_FUNC_QHEADERVIEW_SETSECTIONSMOVABLE
+    OCTAVE_CHECK_FUNC_QINSTALLMESSAGEHANDLER
     OCTAVE_CHECK_FUNC_QLINEEDIT_SETPLACEHOLDERTEXT
+    OCTAVE_CHECK_FUNC_QMOUSEEVENT_LOCALPOS
+    OCTAVE_CHECK_FUNC_QOBJECT_FINDCHILDREN_ACCEPTS_FINDCHILDOPTIONS
     OCTAVE_CHECK_FUNC_QTABWIDGET_SETMOVABLE
+    OCTAVE_CHECK_FUNC_QTMESSAGEHANDLER_ACCEPTS_QMESSAGELOGCONTEXT
     OCTAVE_CHECK_MEMBER_QFONT_FORCE_INTEGER_METRICS
     OCTAVE_CHECK_MEMBER_QFONT_MONOSPACE
     OCTAVE_HAVE_QGUIAPPLICATION
-    OCTAVE_CHECK_FUNC_QOBJECT_FINDCHILDREN_ACCEPTS_FINDCHILDOPTIONS
 
     if test -n "$OPENGL_LIBS"; then
       OCTAVE_CHECK_QT_OPENGL_OK([build_qt_graphics=yes],
         [warn_qt_opengl="Qt does not work with the OpenGL libs (GL and GLU); disabling OpenGL graphics with Qt GUI"])
 
       if test $build_qt_graphics = yes; then
         OCTAVE_CHECK_QT_OPENGL_OFFSCREEN_OK([have_qt_opengl_offscreen=yes])
         AC_DEFINE(HAVE_QT_GRAPHICS, 1, [Define to 1 if Qt works with OpenGL libs (GL and GLU)])
