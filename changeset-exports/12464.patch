# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1298278259 18000
#      Mon Feb 21 03:50:59 2011 -0500
# Node ID dfeea9cae79e926a1b263022914bfa8577cf5313
# Parent  189baf055143318791384a1d145ed49dbd857509
require PCRE to build Octave

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,14 @@
+2011-02-21  John W. Eaton  <jwe@octave.org>
+
+	* NEWS: Note that PCRE is now required to build Octave.
+	* configure.ac: Improve check for PCRE, which is now required.
+	Don't check for -lregex.
+
 2011-02-19  Rik  <octave@nomad.inbox5.com>
 
 	* README.MacOS: Keep line length below 80, use 2 spaces to start
 	sentences.
 
 2011-02-16  Richard Campbell  <rlcamp.pdx@gmail.com>
 
 	* README.MacOS: Updated Readme.MacOS section 2.2.1 with results of test
diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -13,16 +13,18 @@ Summary of important user-visible change
       lchol               spdiag       spqr
       loadimage           spfind       spsum
       mark_as_command     sphcat       spsumsq
       mark_as_rawcommand  spinv        spvcat 
       spatan2             spkron       str2mat
       spchol              splchol      unmark_command
       spchol2inv          split        unmark_rawcommand
 
+  ** The PCRE library is now required to build Octave.
+
 Summary of important user-visible changes for version 3.4:
 ---------------------------------------------------------
 
  ** BLAS and LAPACK libraries are now required to build Octave.  The
     subset of the reference BLAS and LAPACK libraries has been removed
     from the Octave sources.
   
  ** The ARPACK library is now distributed with Octave so it no longer
diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -632,71 +632,53 @@ OCTAVE_CHECK_LIBRARY(qhull, QHull,
   [Qhull library not found -- this will result in loss of functionality of some geometry functions.],
   [qhull/qhull_a.h], [qh_qhull], [], [],
   [warn_qhull=
    OCTAVE_CHECK_QHULL_VERSION
    OCTAVE_CHECK_QHULL_OK([TEXINFO_QHULL="@set HAVE_QHULL"
      AC_DEFINE(HAVE_QHULL, 1, [Define if QHull is available.])], [
      warn_qhull="Qhull library found, but seems not to work properly -- this will result in loss of functionality of some geometry functions.  Please try recompiling the library with -fno-strict-aliasing."])])
 
-### Check for pcre/regex library.
+### Check for pcre regex library.
+
+REGEX_LIBS=
+
+pcre_fail_msg="to build Octave, you must have the PCRE library and header files installed"
 
-## check for pcre-config, and if so, set XTRA_CXXFLAGS appropriately
-AC_CHECK_PROG(WITH_PCRE_CONFIG, pcre-config, yes, no)
-if test $WITH_PCRE_CONFIG = yes ; then
-  XTRA_CXXFLAGS="$XTRA_CXXFLAGS $(pcre-config --cflags)"
-fi
-
-## NB: no need to do separate check for pcre.h header -- checking macros is good enough
-AC_CACHE_CHECK([whether pcre.h defines the macros we need], [ac_cv_pcre_h_macros_present], [
-  AC_EGREP_CPP([PCRE_HAS_MACROS_WE_NEED], [
+## NB: no need to do separate check for pcre.h header -- checking
+## macros is good enough
+AC_CACHE_CHECK([whether pcre.h defines the macros we need],
+  [ac_cv_pcre_h_macros_present],
+  [AC_EGREP_CPP([PCRE_HAS_MACROS_WE_NEED], [
 #include <pcre.h>
 #if defined (PCRE_INFO_NAMECOUNT) \
   && defined (PCRE_INFO_NAMEENTRYSIZE) \
   && defined (PCRE_INFO_NAMETABLE)
 PCRE_HAS_MACROS_WE_NEED
 #endif], ac_cv_pcre_h_macros_present=yes, ac_cv_pcre_h_macros_present=no)])
-WITH_PCRE="$ac_cv_pcre_h_macros_present"
 
-REGEX_LIBS=
-
-using_pcre=no
-using_regex=no
-
-if test "$WITH_PCRE" = yes; then
-  if test "$WITH_PCRE_CONFIG" = yes; then
-    REGEX_LIBS=$(pcre-config --libs)
+if test $ac_cv_pcre_h_macros_present = yes; then
+  ## check for pcre-config, and if so, set XTRA_CXXFLAGS appropriately
+  AC_CHECK_PROG(HAVE_PCRE_CONFIG, pcre-config, [yes], [no])
+  if test $HAVE_PCRE_CONFIG = yes; then
+    XTRA_CXXFLAGS="$XTRA_CXXFLAGS `pcre-config --cflags`"
+    REGEX_LIBS="`pcre-config --libs`"
   else
-    REGEX_LIBS=-lpcre
+    REGEX_LIBS="-lpcre"
   fi
   save_LIBS="$LIBS"
   LIBS="$REGEX_LIBS $LIBS"
-  AC_CHECK_FUNCS(pcre_compile, [using_pcre=yes
-    AC_DEFINE(HAVE_PCRE, 1, [Define if PCRE library is available.])], [
-      REGEX_LIBS=
-      warn_pcre="PCRE library not found.  This will result in some loss of functionality for the regular expression matching functions."
-      AC_MSG_WARN([$warn_pcre])])
+  AC_CHECK_FUNCS(pcre_compile,
+    [AC_SUBST(REGEX_LIBS)],
+    [AC_MSG_ERROR([$pcre_fail_msg])])
   LIBS="$save_LIBS"
 else
-  warn_pcre="PCRE library not found.  This will result in some loss of functionality for the regular expression matching functions."
-  AC_MSG_WARN([$warn_pcre])
+  AC_MSG_ERROR([$pcre_fail_msg])
 fi
 
-AC_CHECK_FUNCS(regexec, [using_regex=yes], [
-  AC_CHECK_LIB(regex, regexec, [using_regex=yes
-    REGEX_LIBS="-lregex $REGEX_LIBS"], [
-      warn_regex="regular expression functions not found.  The regular expression matching functions will be disabled."
-      AC_MSG_WARN([$warn_regex])])])
-
-if test "$using_regex" = yes; then
-  AC_DEFINE(HAVE_REGEX, 1, [Define if regex library is available.])
-fi
-
-AC_SUBST(REGEX_LIBS)
-
 ### Check for ZLIB library.
 
 OCTAVE_CHECK_LIBRARY(z, ZLIB,
   [ZLIB library not found.  Octave will not be able to save or load compressed data files or HDF5 files.],
   [zlib.h], [gzclearerr])
 
 ### Check for HDF5 library.
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2011-02-21  John W. Eaton  <jwe@octave.org>
+
+	* DLD-FUNCTIONS/regexp.cc: Assume we have PCRE.
+
 2010-02-19  Rik  <octave@nomad.inbox5.com>
 
 	* src/DLD-FUNCTIONS/regexp.cc: Use PCRE regular expressions everywhere
 	now that Octave requires library for building.  Remove testif PCRE
 	on testing blocks and adjust all documentation.
 	
 2011-02-18  Konstantinos Poulios  <logari81@googlemail.com>
 
diff --git a/src/DLD-FUNCTIONS/regexp.cc b/src/DLD-FUNCTIONS/regexp.cc
--- a/src/DLD-FUNCTIONS/regexp.cc
+++ b/src/DLD-FUNCTIONS/regexp.cc
@@ -36,25 +36,17 @@ along with Octave; see the file COPYING.
 
 #include "Cell.h"
 #include "oct-map.h"
 #include "str-vec.h"
 #include "quit.h"
 #include "parse.h"
 #include "oct-locbuf.h"
 
-#if defined (HAVE_PCRE)
 #include <pcre.h>
-#elif defined (HAVE_REGEX)
-#if defined (__MINGW32__)
-#define __restrict
-#endif
-#include <sys/types.h>
-#include <regex.h>
-#endif
 
 // Define the maximum number of retries for a pattern that
 // possibly results in an infinite recursion.
 #define PCRE_MATCHLIMIT_MAX 10
 
 // The regexp is constructed as a linked list to avoid resizing the
 // return values in arrays at each new match.
 
@@ -87,17 +79,17 @@ typedef std::list<regexp_elem>::const_it
 static bool lookbehind_warned = false;
 
 static int
 octregexp_list (const octave_value_list &args, const std::string &nm,
                 bool case_insensitive, std::list<regexp_elem> &lst,
                 string_vector &named, int &nopts, bool &once)
 {
   int sz = 0;
-#if defined (HAVE_REGEX) || defined (HAVE_PCRE)
+
   int nargin = args.length();
   bool lineanchors = false;
   bool dotexceptnewline = false;
   bool freespacing = false;
 
   nopts = nargin - 2;
   once = false;
 
@@ -152,17 +144,17 @@ octregexp_list (const octave_value_list 
           lineanchors = false;
           nopts--;
         }
       else if (str.find("literalspacing", 0) == 0)
         {
           freespacing = false;
           nopts--;
         }
-#if HAVE_PCRE
+
       // Only accept these options with pcre
       else if (str.find("dotexceptnewline", 0) == 0)
         {
           dotexceptnewline = true;
           nopts--;
         }
       else if (str.find("lineanchors", 0) == 0)
         {
@@ -173,37 +165,25 @@ octregexp_list (const octave_value_list 
         {
           freespacing = true;
           nopts--;
         }
       else if (str.find("start", 0) && str.find("end", 0) &&
                str.find("tokenextents", 0) && str.find("match", 0) &&
                str.find("tokens", 0) && str.find("names", 0))
         error ("%s: unrecognized option", nm.c_str());
-#else
-      else if (str.find("names", 0) == 0 ||
-               str.find("dotexceptnewline", 0) == 0 ||
-               str.find("lineanchors", 0) == 0 ||
-               str.find("freespacing", 0) == 0)
-       error ("%s: %s not implemented in this version", str.c_str(), nm.c_str());
-      else if (str.find("start", 0) && str.find("end", 0) &&
-               str.find("tokenextents", 0) && str.find("match", 0) &&
-               str.find("tokens", 0))
-        error ("%s: unrecognized option", nm.c_str());
-#endif
     }
 
   if (!error_state)
     {
       Cell t;
       std::string m;
       double s, e;
 
       // named tokens "(?<name>...)" are only treated with PCRE not regex.
-#if HAVE_PCRE
 
       size_t pos = 0;
       size_t new_pos;
       int nnames = 0;
       int inames = 0;
       std::ostringstream buf;
       Array<int> named_idx;
 
@@ -489,89 +469,18 @@ octregexp_list (const octave_value_list 
 
               if (once || idx >= buffer.length ())
                 break;
 
             }
         }
 
       pcre_free(re);
-#else
-      regex_t compiled;
-      int err=regcomp(&compiled, pattern.c_str(), REG_EXTENDED |
-                      (case_insensitive ? REG_ICASE : 0));
-      if (err)
-        {
-          int len = regerror(err, &compiled, 0, 0);
-          OCTAVE_LOCAL_BUFFER (char, errmsg, len);
-          regerror(err, &compiled, errmsg, len);
-          error("%s: %s in pattern (%s)", nm.c_str(), errmsg,
-                pattern.c_str());
-          regfree(&compiled);
-          return 0;
-        }
-
-      int subexpr = 1;
-      int idx = 0;
-      for (unsigned int i=0; i < pattern.length(); i++)
-          subexpr += ( pattern[i] == '(' ? 1 : 0 );
-      OCTAVE_LOCAL_BUFFER (regmatch_t, match, subexpr );
-
-      while(true)
-        {
-          OCTAVE_QUIT;
-
-          if (regexec(&compiled, buffer.c_str() + idx, subexpr,
-                      match, (idx ? REG_NOTBOL : 0)) == 0)
-            {
-              // Count actual matches
-              int matches = 0;
-              while (matches < subexpr && match[matches].rm_so >= 0)
-                matches++;
-
-              if (matches == 0 || match[0].rm_eo == 0)
-                break;
+    }
 
-              s = double (match[0].rm_so+1+idx);
-              e = double (match[0].rm_eo+idx);
-              Matrix te(matches-1,2);
-              for (int i = 1; i < matches; i++)
-                {
-                  te(i-1,0) = double (match[i].rm_so+1+idx);
-                  te(i-1,1) = double (match[i].rm_eo+idx);
-                }
-
-              m =  buffer.substr (match[0].rm_so+idx,
-                                         match[0].rm_eo-match[0].rm_so);
-
-              Cell cell_t (dim_vector(1,matches-1));
-              for (int i = 1; i < matches; i++)
-                cell_t(i-1) = buffer.substr (match[i].rm_so+idx,
-                                             match[i].rm_eo-match[i].rm_so);
-              t = cell_t;
-
-              idx += match[0].rm_eo;
-
-              string_vector sv;
-              regexp_elem new_elem (sv, t, m, te, s, e);
-              lst.push_back (new_elem);
-              sz++;
-
-              if (once)
-                break;
-            }
-          else
-            break;
-        }
-      regfree(&compiled);
-#endif
-    }
-#else
-  error ("%s: not available in this version of Octave", nm.c_str());
-#endif
   return sz;
 }
 
 static octave_value_list
 octregexp (const octave_value_list &args, int nargout, const std::string &nm,
            bool case_insensitive)
 {
   octave_value_list retval;
@@ -582,18 +491,18 @@ octregexp (const octave_value_list &args
   bool once;
   int sz = octregexp_list (args, nm, case_insensitive, lst, named, nopts, once);
 
   if (! error_state)
     {
       // Converted the linked list in the correct form for the return values
 
       octave_idx_type i = 0;
-#ifdef HAVE_PCRE
       octave_scalar_map nmap;
+
       if (sz == 1)
         {
           for (int j = 0; j < named.length(); j++)
             nmap.assign (named(j), lst.begin()->named_token(j));
           retval(5) = nmap;
         }
       else
         {
@@ -602,19 +511,16 @@ octregexp (const octave_value_list &args
               i = 0;
               Cell tmp(dim_vector (1, sz));
               for (const_iterator p = lst.begin(); p != lst.end(); p++)
                 tmp(i++) = p->named_token(j);
               nmap.assign (named(j), octave_value (tmp));
             }
           retval(5) = nmap;
         }
-#else
-      retval(5) = octave_scalar_map ();
-#endif
 
       if (once)
         retval(4) = sz ? lst.front ().t : Cell();
       else
         {
           Cell t (dim_vector(1, sz));
           i = 0;
           for (const_iterator p = lst.begin(); p != lst.end(); p++)
