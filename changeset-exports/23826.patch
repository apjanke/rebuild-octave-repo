# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1501708579 14400
#      Wed Aug 02 17:16:19 2017 -0400
# Node ID d69021d58a619ebd5336cfaf1b5fed3fe1eea97d
# Parent  5111b1b5034d34624a6bc729588de6d3640820ac
avoid fallthrough warnings

* oct-conf-post.in.h (OCTAVE_FALLTHROUGH): New macro.
* mk-octave-config-h.sh: Emit OCTAVE_FALLTROUGH definition.

* balance.cc, find.cc, gcd.cc, quad.cc, qz.cc, ov-classdef.cc,
DASPK.cc, lo-utils.cc: Use OCTAVE_FALLTHROUGH to avoid warnings.

diff --git a/build-aux/mk-octave-config-h.sh b/build-aux/mk-octave-config-h.sh
--- a/build-aux/mk-octave-config-h.sh
+++ b/build-aux/mk-octave-config-h.sh
@@ -117,16 +117,26 @@ since all of Octave's header files alrea
 #    define OCTAVE_NORETURN
 #    define OCTAVE_UNUSED
 
 /* #    undef HAVE_OCTAVE_DEPRECATED_ATTR */
 /* #    undef HAVE_OCTAVE_NORETURN_ATTR */
 /* #    undef HAVE_OCTAVE_UNUSED_ATTR */
 #  endif
 
+#  if ! defined (OCTAVE_FALLTHROUGH)
+#    if defined (__cplusplus) && __cplusplus > 201402L
+#      define OCTAVE_FALLTHROUGH [[fallthrough]]
+#    elif defined (__GNUC__) && __GNUC__ < 7
+#      define OCTAVE_FALLTHROUGH ((void) 0)
+#    else
+#      define OCTAVE_FALLTHROUGH __attribute__ ((__fallthrough__))
+#    endif
+#  endif
+
 #  define OCTAVE_USE_DEPRECATED_FUNCTIONS 1
 
 #  if defined (__cplusplus)
 template <typename T>
 static inline void
 octave_unused_parameter (const T&)
 { }
 #  else
diff --git a/libinterp/corefcn/balance.cc b/libinterp/corefcn/balance.cc
--- a/libinterp/corefcn/balance.cc
+++ b/libinterp/corefcn/balance.cc
@@ -250,106 +250,122 @@ Generalized eigenvalue problem balancing
           if (complex_case)
             {
               octave::math::gepbalance<FloatComplexMatrix> result (fcaa, fcbb, bal_job);
 
               switch (nargout)
                 {
                 case 4:
                   retval(3) = result.balanced_matrix2 ();
-                  // fall through
+                  OCTAVE_FALLTHROUGH;
+
                 case 3:
                   retval(2) = result.balanced_matrix ();
                   retval(1) = result.balancing_matrix2 ();
                   retval(0) = result.balancing_matrix ();
                   break;
+
                 case 2:
                   retval(1) = result.balancing_matrix2 ();
-                  // fall through
+                  OCTAVE_FALLTHROUGH;
+
                 case 1:
                   retval(0) = result.balancing_matrix ();
                   break;
+
                 default:
                   error ("balance: invalid number of output arguments");
                   break;
                 }
             }
           else
             {
               octave::math::gepbalance<FloatMatrix> result (faa, fbb, bal_job);
 
               switch (nargout)
                 {
                 case 4:
                   retval(3) = result.balanced_matrix2 ();
-                  // fall through
+                  OCTAVE_FALLTHROUGH;
+
                 case 3:
                   retval(2) = result.balanced_matrix ();
                   retval(1) = result.balancing_matrix2 ();
                   retval(0) = result.balancing_matrix ();
                   break;
+
                 case 2:
                   retval(1) = result.balancing_matrix2 ();
-                  // fall through
+                  OCTAVE_FALLTHROUGH;
+
                 case 1:
                   retval(0) = result.balancing_matrix ();
                   break;
+
                 default:
                   error ("balance: invalid number of output arguments");
                   break;
                 }
             }
         }
       else
         {
           if (complex_case)
             {
               octave::math::gepbalance<ComplexMatrix> result (caa, cbb, bal_job);
 
               switch (nargout)
                 {
                 case 4:
                   retval(3) = result.balanced_matrix2 ();
-                  // fall through
+                  OCTAVE_FALLTHROUGH;
+
                 case 3:
                   retval(2) = result.balanced_matrix ();
                   retval(1) = result.balancing_matrix2 ();
                   retval(0) = result.balancing_matrix ();
                   break;
+
                 case 2:
                   retval(1) = result.balancing_matrix2 ();
-                  // fall through
+                  OCTAVE_FALLTHROUGH;
+
                 case 1:
                   retval(0) = result.balancing_matrix ();
                   break;
+
                 default:
                   error ("balance: invalid number of output arguments");
                   break;
                 }
             }
           else
             {
               octave::math::gepbalance<Matrix> result (aa, bb, bal_job);
 
               switch (nargout)
                 {
                 case 4:
                   retval(3) = result.balanced_matrix2 ();
-                  // fall through
+                  OCTAVE_FALLTHROUGH;
+
                 case 3:
                   retval(2) = result.balanced_matrix ();
                   retval(1) = result.balancing_matrix2 ();
                   retval(0) = result.balancing_matrix ();
                   break;
+
                 case 2:
                   retval(1) = result.balancing_matrix2 ();
-                  // fall through
+                  OCTAVE_FALLTHROUGH;
+
                 case 1:
                   retval(0) = result.balancing_matrix ();
                   break;
+
                 default:
                   error ("balance: invalid number of output arguments");
                   break;
                 }
             }
         }
     }
 
diff --git a/libinterp/corefcn/find.cc b/libinterp/corefcn/find.cc
--- a/libinterp/corefcn/find.cc
+++ b/libinterp/corefcn/find.cc
@@ -51,32 +51,32 @@ find_nonzero_elem_idx (const Array<T>& n
   // The maximum element is always at the end.
   octave_idx_type iext = (idx.isempty () ? 0 : idx.xelem (idx.numel () - 1) + 1);
 
   switch (nargout)
     {
     default:
     case 3:
       retval(2) = Array<T> (nda.index (idx_vector (idx)));
-      // Fall through!
+      OCTAVE_FALLTHROUGH;
 
     case 2:
       {
         Array<octave_idx_type> jdx (idx.dims ());
         octave_idx_type n = idx.numel ();
         octave_idx_type nr = nda.rows ();
         for (octave_idx_type i = 0; i < n; i++)
           {
             jdx.xelem (i) = idx.xelem (i) / nr;
             idx.xelem (i) %= nr;
           }
         iext = -1;
         retval(1) = idx_vector (jdx, -1);
       }
-      // Fall through!
+      OCTAVE_FALLTHROUGH;
 
     case 1:
     case 0:
       retval(0) = idx_vector (idx, iext);
       break;
     }
 
   return retval;
@@ -203,25 +203,25 @@ find_nonzero_elem_idx (const Sparse<T>& 
     {
     case 0:
     case 1:
       retval(0) = idx;
       break;
 
     case 5:
       retval(4) = nc;
-      // Fall through
+      OCTAVE_FALLTHROUGH;
 
     case 4:
       retval(3) = nr;
-      // Fall through
+      OCTAVE_FALLTHROUGH;
 
     case 3:
       retval(2) = val;
-      // Fall through!
+      OCTAVE_FALLTHROUGH;
 
     case 2:
       retval(1) = j_idx;
       retval(0) = i_idx;
     }
 
   return retval;
 }
@@ -298,25 +298,25 @@ find_nonzero_elem_idx (const PermMatrix&
     {
     case 0:
     case 1:
       retval(0) = idx;
       break;
 
     case 5:
       retval(4) = nc;
-      // Fall through
+      OCTAVE_FALLTHROUGH;
 
     case 4:
       retval(3) = nc;
-      // Fall through
+      OCTAVE_FALLTHROUGH;
 
     case 3:
       retval(2) = val;
-      // Fall through!
+      OCTAVE_FALLTHROUGH;
 
     case 2:
       retval(1) = j_idx;
       retval(0) = i_idx;
     }
 
   return retval;
 }
diff --git a/libinterp/corefcn/gcd.cc b/libinterp/corefcn/gcd.cc
--- a/libinterp/corefcn/gcd.cc
+++ b/libinterp/corefcn/gcd.cc
@@ -267,17 +267,17 @@ do_simple_gcd (const octave_value& a, co
   switch (btyp)
     {
     case btyp_double:
       if (a.issparse () && b.issparse ())
         {
           retval = do_simple_gcd<SparseMatrix> (a, b);
           break;
         }
-      // fall through!
+      OCTAVE_FALLTHROUGH;
 
     case btyp_float:
       retval = do_simple_gcd<NDArray> (a, b);
       break;
 
 #define MAKE_INT_BRANCH(X)                            \
     case btyp_ ## X:                                  \
       retval = do_simple_gcd<X ## NDArray> (a, b);    \
diff --git a/libinterp/corefcn/quad.cc b/libinterp/corefcn/quad.cc
--- a/libinterp/corefcn/quad.cc
+++ b/libinterp/corefcn/quad.cc
@@ -251,24 +251,26 @@ variable by routines @code{dblquad} and 
         {
         case 5:
           if (indefinite)
             error ("quad: singularities not allowed on infinite intervals");
 
           have_sing = true;
 
           sing = args(4).xfloat_vector_value ("quad: fifth argument SING must be a vector of singularities");
+          OCTAVE_FALLTHROUGH;
 
         case 4:
           tol = args(3).xfloat_vector_value ("quad: TOL must be a 1 or 2-element vector");
 
           switch (tol.numel ())
             {
             case 2:
               quad_opts.set_single_precision_relative_tolerance (tol (1));
+              OCTAVE_FALLTHROUGH;
 
             case 1:
               quad_opts.set_single_precision_absolute_tolerance (tol (0));
               break;
 
             default:
               error ("quad: TOL must be a 1 or 2-element vector");
             }
@@ -344,24 +346,26 @@ variable by routines @code{dblquad} and 
         {
         case 5:
           if (indefinite)
             error ("quad: singularities not allowed on infinite intervals");
 
           have_sing = true;
 
           sing = args(4).vector_value ("quad: fifth argument SING must be a vector of singularities");
+          OCTAVE_FALLTHROUGH;
 
         case 4:
           tol = args(3).xvector_value ("quad: TOL must be a 1 or 2-element vector");
 
           switch (tol.numel ())
             {
             case 2:
               quad_opts.set_relative_tolerance (tol (1));
+              OCTAVE_FALLTHROUGH;
 
             case 1:
               quad_opts.set_absolute_tolerance (tol (0));
               break;
 
             default:
               error ("quad: TOL must be a 1 or 2-element vector");
             }
diff --git a/libinterp/corefcn/qz.cc b/libinterp/corefcn/qz.cc
--- a/libinterp/corefcn/qz.cc
+++ b/libinterp/corefcn/qz.cc
@@ -988,24 +988,27 @@ Note: @code{qz} performs permutation bal
     }
 
   octave_value_list retval (nargout);
 
   switch (nargout)
     {
     case 7:
       retval(6) = gev;
+      OCTAVE_FALLTHROUGH;
 
     case 6:
       // Return left eigenvectors.
       retval(5) = CVL;
+      OCTAVE_FALLTHROUGH;
 
     case 5:
       // Return right eigenvectors.
       retval(4) = CVR;
+      OCTAVE_FALLTHROUGH;
 
     case 4:
       if (nargin == 3)
         {
 #if defined (DEBUG)
           std::cout << "qz: sort: retval(3) = gev = " << std::endl;
           octave_print_internal (std::cout, ComplexMatrix (gev));
           std::cout << std::endl;
@@ -1014,32 +1017,34 @@ Note: @code{qz} performs permutation bal
         }
       else
         {
           if (complex_case)
             retval(3) = CZ;
           else
             retval(3) = ZZ;
         }
+      OCTAVE_FALLTHROUGH;
 
     case 3:
       if (nargin == 3)
         {
           if (complex_case)
             retval(2) = CZ;
           else
             retval(2) = ZZ;
         }
       else
         {
           if (complex_case)
             retval(2) = CQ.hermitian ();
           else
             retval(2) = QQ.transpose ();
         }
+      OCTAVE_FALLTHROUGH;
 
     case 2:
       {
         if (complex_case)
           {
 #if defined (DEBUG)
             std::cout << "qz: retval(1) = cbb = " << std::endl;
             octave_print_internal (std::cout, cbb, 0);
diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -1519,17 +1519,17 @@ cdef_object_array::subsref (const std::s
               if (r.length () > 0)
                 c(i) = r(0);
             }
 
           retval(0) = octave_value (c, true);
 
           break;
         }
-      // fall through "default"
+      OCTAVE_FALLTHROUGH;
 
     default:
       error ("can't perform indexing operation on array of %s objects",
              class_name ().c_str ());
       break;
     }
 
   return retval;
diff --git a/liboctave/numeric/DASPK.cc b/liboctave/numeric/DASPK.cc
--- a/liboctave/numeric/DASPK.cc
+++ b/liboctave/numeric/DASPK.cc
@@ -320,17 +320,17 @@ DASPK::do_integrate (double tout)
               {
                 // FIXME: Should this be a warning?
                 (*current_liboctave_error_handler)
                   ("daspk: inequality constraint types size mismatch");
                 integration_error = true;
                 return retval;
               }
           }
-        // Fall through...
+          OCTAVE_FALLTHROUGH;
 
         case 0:
         case 2:
           info(9) = octave::to_f77_int (eiq);
           break;
 
         default:
           // FIXME: Should this be a warning?
diff --git a/liboctave/util/lo-utils.cc b/liboctave/util/lo-utils.cc
--- a/liboctave/util/lo-utils.cc
+++ b/liboctave/util/lo-utils.cc
@@ -270,17 +270,17 @@ octave_read_fp_value (std::istream& is)
     c1 = is.get ();
 
   bool neg = false;
 
   switch (c1)
     {
     case '-':
       neg = true;
-      // fall through...
+      OCTAVE_FALLTHROUGH;
 
     case '+':
       {
         char c2 = 0;
         c2 = is.get ();
         if (c2 == 'i' || c2 == 'I' || c2 == 'n' || c2 == 'N')
           val = read_inf_nan_na<T> (is, c2);
         else
diff --git a/oct-conf-post.in.h b/oct-conf-post.in.h
--- a/oct-conf-post.in.h
+++ b/oct-conf-post.in.h
@@ -45,16 +45,26 @@ along with Octave; see the file COPYING.
 #  define OCTAVE_UNUSED __attribute__ ((__unused__))
 #  define HAVE_OCTAVE_UNUSED_ATTR 1
 #else
 #  define OCTAVE_DEPRECATED(ver, msg)
 #  define OCTAVE_NORETURN
 #  define OCTAVE_UNUSED
 #endif
 
+#if ! defined (OCTAVE_FALLTHROUGH)
+#  if defined (__cplusplus) && __cplusplus > 201402L
+#    define OCTAVE_FALLTHROUGH [[fallthrough]]
+#  elif defined (__GNUC__) && __GNUC__ < 7
+#    define OCTAVE_FALLTHROUGH ((void) 0)
+#  else
+#    define OCTAVE_FALLTHROUGH __attribute__ ((__fallthrough__))
+#  endif
+#endif
+
 /* This macro could have a better name...  It is intended to be used
    only to enable inline functions or typedefs that provide access to
    symbols that have been moved to the octave namespace.  It may be
    temporarily useful to define this macro when moving a symbol to the
    octave namespace but it should not be defined when building
    released versions of Octave, as building those should not require
    deprecated symbols.  It is defined in octave-config.h, so users of
    Octave may continue to access symbols using the deprecated names.  */
