# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1497968754 14400
#      Tue Jun 20 10:25:54 2017 -0400
# Node ID bbcc1e08aaed9d4ce7b6879a42264d0406a92b5c
# Parent  da89ce0d49ebf182c6c016882e2af3ccaac4a5d3
improve colon expression construction and avoid possible memory leak

Don't allow errors to be thrown during colon expression construction.

* pt-colon.h, pt-colon.cc (tree_colon_expression::tree_colon_expression):
Construct either two- or three-element expressions.
(tree_colon_expression::append): Delete.
(tree_colon_expression::line, tree_colon_expression::colum): Delete.

* parse.h, oct-parse.in.yy (base_parser::make_colon_expression):
New function.
(base_parser::finish_colon_expression): Delete.
(colon_expr1): Delete non-terminal
(tree_colon_expression_type): Delete.
(colon_expr): Construct two- or three-element expressions only.
(simple_expr): Handle single oper_expr separately here.

diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -245,17 +245,16 @@ static void yyerror (octave::base_parser
 %type <tree_cell_type> cell_rows
 %type <tree_expression_type> matrix cell
 %type <tree_expression_type> primary_expr oper_expr power_expr expr_no_assign
 %type <tree_expression_type> simple_expr colon_expr assign_expr expression
 %type <tree_identifier_type> identifier fcn_name magic_tilde
 %type <tree_funcall_type> superclass_identifier meta_identifier
 %type <octave_user_function_type> function1 function2
 %type <tree_index_expression_type> word_list_cmd
-%type <tree_colon_expression_type> colon_expr1
 %type <tree_argument_list_type> arg_list word_list assign_lhs
 %type <tree_argument_list_type> cell_or_matrix_row
 %type <tree_parameter_list_type> param_list param_list1 param_list2
 %type <tree_parameter_list_type> return_list return_list1
 %type <tree_command_type> command select_command loop_command
 %type <tree_command_type> jump_command except_command
 %type <tree_function_def_type> function
 %type <tree_classdef_type> classdef
@@ -325,17 +324,16 @@ static void yyerror (octave::base_parser
 %destructor { delete $$; } <tree_expression_type>
 %destructor { delete $$; } <tree_constant_type>
 %destructor { delete $$; } <tree_fcn_handle_type>
 %destructor { delete $$; } <tree_funcall_type>
 %destructor { delete $$; } <tree_function_def_type>
 %destructor { delete $$; } <tree_anon_fcn_handle_type>
 %destructor { delete $$; } <tree_identifier_type>
 %destructor { delete $$; } <tree_index_expression_type>
-%destructor { delete $$; } <tree_colon_expression_type>
 %destructor { delete $$; } <tree_argument_list_type>
 %destructor { delete $$; } <tree_parameter_list_type>
 %destructor { delete $$; } <tree_command_type>
 %destructor { delete $$; } <tree_if_command_type>
 %destructor { delete $$; } <tree_if_clause_type>
 %destructor { delete $$; } <tree_if_command_list_type>
 %destructor { delete $$; } <tree_switch_command_type>
 %destructor { delete $$; } <tree_switch_case_type>
@@ -819,36 +817,46 @@ power_expr      : primary_expr
                 | EXPR_NOT power_expr %prec POW
                   { $$ = parser.make_prefix_op (EXPR_NOT, $2, $1); }
                 | '+' power_expr %prec POW
                   { $$ = parser.make_prefix_op ('+', $2, $1); }
                 | '-' power_expr %prec POW
                   { $$ = parser.make_prefix_op ('-', $2, $1); }
                 ;
 
-colon_expr      : colon_expr1
-                  { $$ = parser.finish_colon_expression ($1); }
-                ;
-
-colon_expr1     : oper_expr
-                  { $$ = new octave::tree_colon_expression ($1); }
-                | colon_expr1 ':' oper_expr
+colon_expr      : oper_expr ':' oper_expr
                   {
                     YYUSE ($2);
 
-                    if (! ($$ = $1->append ($3)))
+                    $$ = parser.make_colon_expression ($1, $3);
+
+                    if (! $$)
                       {
-                        delete $1;
-                        delete $3;
+                        // finish_colon_expression deleted $1 and $3.
+                        YYABORT;
+                      }
+                  }
+                | oper_expr ':' oper_expr ':' oper_expr
+                  {
+                    YYUSE ($2);
+                    YYUSE ($4);
+
+                    $$ = parser.make_colon_expression ($1, $5, $3);
+
+                    if (! $$)
+                      {
+                        // finish_colon_expression deleted $1, $3, and $5.
                         YYABORT;
                       }
                   }
                 ;
 
-simple_expr     : colon_expr
+simple_expr     : oper_expr
+                  { $$ = $1; }
+                | colon_expr
                   { $$ = $1; }
                 | simple_expr EXPR_LT simple_expr
                   { $$ = parser.make_binary_op (EXPR_LT, $1, $2, $3); }
                 | simple_expr EXPR_LE simple_expr
                   { $$ = parser.make_binary_op (EXPR_LE, $1, $2, $3); }
                 | simple_expr EXPR_EQ simple_expr
                   { $$ = parser.make_binary_op (EXPR_EQ, $1, $2, $3); }
                 | simple_expr EXPR_GE simple_expr
@@ -2335,82 +2343,16 @@ namespace octave
         else
           warning_with_id
             ("Octave:variable-switch-label",
              "variable switch label near line %d, column %d in file '%s'",
              expr->line (), expr->column (), lexer.fcn_file_full_name.c_str ());
       }
   }
 
-  // Finish building a range.
-
-  tree_expression *
-  base_parser::finish_colon_expression (tree_colon_expression *e)
-  {
-    tree_expression *retval = e;
-
-    octave::unwind_protect frame;
-
-    frame.protect_var (discard_error_messages);
-    frame.protect_var (discard_warning_messages);
-
-    discard_error_messages = true;
-    discard_warning_messages = true;
-
-    tree_expression *base = e->base ();
-    tree_expression *limit = e->limit ();
-    tree_expression *incr = e->increment ();
-
-    if (base)
-      {
-        if (limit)
-          {
-            if (base->is_constant () && limit->is_constant ()
-                && (! incr || (incr && incr->is_constant ())))
-              {
-                try
-                  {
-                    octave::tree_evaluator& tw
-                      = __get_evaluator__ ("finish_colon_expression");
-
-                    octave_value tmp = tw.evaluate (e);
-
-                    tree_constant *tc_retval
-                      = new tree_constant (tmp, base->line (), base->column ());
-
-                    std::ostringstream buf;
-
-                    tree_print_code tpc (buf);
-
-                    e->accept (tpc);
-
-                    tc_retval->stash_original_text (buf.str ());
-
-                    delete e;
-
-                    retval = tc_retval;
-                  }
-                catch (const octave::execution_exception&)
-                  {
-                    octave::interpreter::recover_from_exception ();
-                  }
-              }
-          }
-        else
-          {
-            e->preserve_base ();
-            delete e;
-
-            retval = base;
-          }
-      }
-
-    return retval;
-  }
-
   // Make a constant.
 
   tree_constant *
   base_parser::make_constant (int op, token *tok_val)
   {
     int l = tok_val->line ();
     int c = tok_val->column ();
 
@@ -2505,16 +2447,84 @@ namespace octave
 
 // FIXME: Stash the filename.  This does not work and produces
     // errors when executed.
     //retval->stash_file_name (lexer.fcn_file_name);
 
     return retval;
   }
 
+  // Build a colon expression.
+
+  tree_expression *
+  base_parser::make_colon_expression (tree_expression *base,
+                                      tree_expression *limit,
+                                      tree_expression *incr)
+  {
+    tree_expression *retval = nullptr;
+
+    octave::unwind_protect frame;
+
+    frame.protect_var (discard_error_messages);
+    frame.protect_var (discard_warning_messages);
+
+    discard_error_messages = true;
+    discard_warning_messages = true;
+
+    if (! base || ! limit)
+      {
+        delete base;
+        delete limit;
+        delete incr;
+
+        return retval;
+      }
+
+    int l = base->line ();
+    int c = base->column ();
+
+    tree_colon_expression *e
+      = new tree_colon_expression (base, limit, incr, l, c);
+
+    if (base->is_constant () && limit->is_constant ()
+        && (! incr || (incr && incr->is_constant ())))
+      {
+        try
+          {
+            octave::tree_evaluator& tw
+              = __get_evaluator__ ("finish_colon_expression");
+
+            octave_value tmp = tw.evaluate (e);
+
+            tree_constant *tc_retval
+              = new tree_constant (tmp, e->line (), e->column ());
+
+            std::ostringstream buf;
+
+            tree_print_code tpc (buf);
+
+            e->accept (tpc);
+
+            tc_retval->stash_original_text (buf.str ());
+
+            delete e;
+
+            retval = tc_retval;
+          }
+        catch (const octave::execution_exception&)
+          {
+            octave::interpreter::recover_from_exception ();
+          }
+      }
+    else
+      retval = e;
+
+    return retval;
+  }
+
   // Build a binary expression.
 
   tree_expression *
   base_parser::make_binary_op (int op, tree_expression *op1,
                                token *tok_val, tree_expression *op2)
   {
     octave_value::binary_op t = octave_value::unknown_binary_op;
 
diff --git a/libinterp/parse-tree/parse.h b/libinterp/parse-tree/parse.h
--- a/libinterp/parse-tree/parse.h
+++ b/libinterp/parse-tree/parse.h
@@ -164,30 +164,32 @@ namespace octave
 
     // Maybe print a warning if an assignment expression is used as the
     // test in a logical expression.
     void maybe_warn_assign_as_truth_value (tree_expression *expr);
 
     // Maybe print a warning about switch labels that aren't constants.
     void maybe_warn_variable_switch_label (tree_expression *expr);
 
-    // Finish building a range.
-    tree_expression * finish_colon_expression (tree_colon_expression *e);
-
     // Build a constant.
     tree_constant * make_constant (int op, token *tok_val);
 
     // Build a function handle.
     tree_fcn_handle * make_fcn_handle (token *tok_val);
 
     // Build an anonymous function handle.
     tree_anon_fcn_handle *
     make_anon_fcn_handle (tree_parameter_list *param_list,
                           tree_expression * expr);
 
+    // Build a colon expression.
+    tree_expression *
+    make_colon_expression (tree_expression *base, tree_expression *limit,
+                           tree_expression *incr = nullptr);
+
     // Build a binary expression.
     tree_expression *
     make_binary_op (int op, tree_expression *op1, token *tok_val,
                     tree_expression *op2);
 
     // Build a boolean expression.
     tree_expression *
     make_boolean_op (int op, tree_expression *op1, token *tok_val,
diff --git a/libinterp/parse-tree/pt-colon.cc b/libinterp/parse-tree/pt-colon.cc
--- a/libinterp/parse-tree/pt-colon.cc
+++ b/libinterp/parse-tree/pt-colon.cc
@@ -19,87 +19,28 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
-#include "error.h"
-#include "ovl.h"
-#include "pager.h"
-#include "ov.h"
-#include "pt-bp.h"
 #include "pt-colon.h"
-#include "pt-walk.h"
 
 namespace octave
 {
   // Colon expressions.
 
-  tree_colon_expression *
-  tree_colon_expression::append (tree_expression *t)
-  {
-    tree_colon_expression *retval = nullptr;
-
-    if (! op_base)
-      error ("invalid colon expression");
-
-    if (op_limit)
-      {
-        if (op_increment)
-          error ("invalid colon expression");
-
-        // Stupid syntax:
-        //
-        // base : limit
-        // base : increment : limit
-
-        op_increment = op_limit;
-        op_limit = t;
-      }
-    else
-      op_limit = t;
-
-    retval = this;
-
-    return retval;
-  }
-
-  void
-  tree_colon_expression::eval_error (const std::string& s) const
-  {
-    error ("%s", s.c_str ());
-  }
-
-  int
-  tree_colon_expression::line (void) const
-  {
-    return (op_base ? op_base->line ()
-            : (op_increment ? op_increment->line ()
-               : (op_limit ? op_limit->line ()
-                  : -1)));
-  }
-
-  int
-  tree_colon_expression::column (void) const
-  {
-    return (op_base ? op_base->column ()
-            : (op_increment ? op_increment->column ()
-               : (op_limit ? op_limit->column ()
-                  : -1)));
-  }
-
   tree_expression *
   tree_colon_expression::dup (symbol_table::scope& scope) const
   {
-    tree_colon_expression *new_ce = new
-      tree_colon_expression (op_base ? op_base->dup (scope) : 0,
-                             op_limit ? op_limit->dup (scope) : 0,
-                             op_increment ? op_increment->dup (scope) : 0,
-                             line (), column ());
+    tree_colon_expression *new_ce
+      = new tree_colon_expression (op_base ? op_base->dup (scope) : 0,
+                                   op_limit ? op_limit->dup (scope) : 0,
+                                   op_increment ? op_increment->dup (scope) : 0,
+                                   line (), column ());
 
     new_ce->copy_base (*new_ce);
 
     return new_ce;
   }
 }
diff --git a/libinterp/parse-tree/pt-colon.h b/libinterp/parse-tree/pt-colon.h
--- a/libinterp/parse-tree/pt-colon.h
+++ b/libinterp/parse-tree/pt-colon.h
@@ -41,18 +41,19 @@ namespace octave
   class tree_colon_expression : public tree_expression
   {
   public:
 
     tree_colon_expression (int l = -1, int c = -1)
       : tree_expression (l, c), op_base (0), op_limit (0),
         op_increment (0), save_base (false) { }
 
-    tree_colon_expression (tree_expression *e, int l = -1, int c = -1)
-      : tree_expression (l, c), op_base (e), op_limit (0),
+    tree_colon_expression (tree_expression *bas, tree_expression *lim,
+                           int l = -1, int c = -1)
+      : tree_expression (l, c), op_base (bas), op_limit (lim),
         op_increment (0), save_base (false) { }
 
     tree_colon_expression (tree_expression *bas, tree_expression *lim,
                            tree_expression *inc, int l = -1, int c = -1)
       : tree_expression (l, c), op_base (bas), op_limit (lim),
         op_increment (inc), save_base (false) { }
 
     // No copying!
@@ -74,31 +75,26 @@ namespace octave
     {
       return ((op_base && op_base->has_magic_end ())
               || (op_limit && op_limit->has_magic_end ())
               || (op_increment && op_increment->has_magic_end ()));
     }
 
     void preserve_base (void) { save_base = true; }
 
-    tree_colon_expression * append (tree_expression *t);
-
     bool rvalue_ok (void) const { return true; }
 
     void eval_error (const std::string& s) const;
 
     tree_expression * base (void) { return op_base; }
 
     tree_expression * limit (void) { return op_limit; }
 
     tree_expression * increment (void) { return op_increment; }
 
-    int line (void) const;
-    int column (void) const;
-
     tree_expression * dup (symbol_table::scope& scope) const;
 
     void accept (tree_walker& tw)
     {
       tw.visit_colon_expression (*this);
     }
 
   private:
