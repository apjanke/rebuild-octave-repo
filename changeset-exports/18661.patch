# HG changeset patch
# User John Donoghue <john.donoghue@ieee.org>
# Date 1397847879 14400
#      Fri Apr 18 15:04:39 2014 -0400
# Branch gui-release
# Node ID 8b9e99c061f9ed8c3b9ef2cdaef68db8148b96c3
# Parent  1b289f45187f443b72bf32d3073ac53ba60df77a
GUI: Windows GUI terminal support for double click (Bug #41468)

* libgui/qterminal/libqterminal/win32/QWinTerminalImpl.h, libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp
  (QConsolePrivate::selectWord): New function.
  (QConsolePrivate::selectLine): New function.
  (QWinTerminalImpl::QWinTerminalImpl): init new allowTripleClick variable.
  (QWinTerminalImpl::mousePressEvent): call mouseTripleClickEvent ifallowTripleClick is set.
  (QWinTerminalImpl::mouseReleaseEvent): only process if settingSelection is true.
  (QWinTerminalImpl::mouseDoubleClickEvent): New function.
  (QWinTerminalImpl::mouseTripleClickEvent): New function.
  (QWinTerminalImpl::tripleClickTimeout): New slot.

diff --git a/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp b/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp
--- a/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp
+++ b/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp
@@ -182,16 +182,18 @@ public:
   void updateScrollBar (void);
   void setScrollValue (int value);
   void updateConsoleView (bool grab = true);
   void monitorConsole (void);
   void startCommand (void);
   void sendConsoleText (const QString& s);
   QRect cursorRect (void);
   void selectAll();
+  void selectWord(const QPoint& cellPos);
+  void selectLine(const QPoint& cellPos);
 
   void log (const char* fmt, ...);
 
   void closeStandardIO (int fd, DWORD stdHandleId, const char* name);
   void setupStandardIO (DWORD stdHandleId, int fd, const char* name,
                         const char* devName);
 
   QPoint posToCell (const QPoint& pt);
@@ -673,16 +675,77 @@ void QConsolePrivate::drawTextBackground
 void QConsolePrivate::selectAll()
 {
   m_beginSelection = QPoint (0,0);
   m_endSelection = QPoint(m_bufferSize.width (), 
                           m_cursorPos.y());
   updateSelection();
 }
 
+void QConsolePrivate::selectWord (const QPoint & cellpos)
+{
+  QPoint begin = cellpos;
+  QPoint end = cellpos;
+
+  int scrollOffset = m_consoleRect.top ();
+  int stride = m_consoleRect.width ();
+
+  // get begin, end in buffer offsets
+  begin.ry () -= scrollOffset;
+  end.ry () -= scrollOffset;
+
+  // loog at current clicked on char to determinate ig getting space chunk or nonspace chunk
+  if (QChar(m_buffer[begin.y ()*stride + begin.x ()].Char.UnicodeChar).isSpace () == false)
+  {
+    // from current char, go back and fwd to find start and end of block
+    while(begin.x () > 0 && 
+          QChar(m_buffer[begin.y ()*stride + begin.x () -1].Char.UnicodeChar).isSpace() == false)
+    {
+        begin.rx () --;
+    }
+
+    while(end.x () < m_consoleRect.width () && 
+          QChar(m_buffer[end.y ()*stride + end.x () +1].Char.UnicodeChar).isSpace() == false)
+    {
+      end.rx () ++;
+    }
+  }
+  else
+  {
+    while(begin.x () > 0 && 
+          QChar(m_buffer[begin.y ()*stride + begin.x () -1].Char.UnicodeChar).isSpace())
+    {
+      begin.rx () --;
+    }
+
+    while(end.x () < m_consoleRect.width () && 
+          QChar(m_buffer[end.y ()*stride + end.x () +1].Char.UnicodeChar).isSpace ())
+    {
+      end.rx () ++;
+    }
+  }
+
+  // convert console  offsets to absolute cell positions
+  begin.ry () += scrollOffset;
+  end.ry () += scrollOffset;
+
+  m_beginSelection = begin;
+  m_endSelection = end;
+
+  updateSelection ();
+}
+
+void QConsolePrivate::selectLine (const QPoint & cellpos)
+{
+  m_beginSelection = QPoint (0, cellpos.y ());
+  m_endSelection = QPoint (m_bufferSize.width ()-1, cellpos.y ());
+  updateSelection ();
+}
+
+
 void QConsolePrivate::drawSelection (QPainter& p, int cx1, int cy1,
                                      int cx2, int cy2, int cw, int ch)
 {
   p.save ();
 
   QPoint begin = m_beginSelection;
   QPoint end = m_endSelection;
 
@@ -1257,17 +1320,18 @@ QConsolePrivate::cursorRect (void)
   return QRect ((m_cursorPos.x () - m_consoleRect.x ()) * cw,
                 (m_cursorPos.y () - m_consoleRect.y ()) * ch,
                 cw, ch);
 }
 
 //////////////////////////////////////////////////////////////////////////////
 
 QWinTerminalImpl::QWinTerminalImpl (QWidget* parent)
-    : QTerminal (parent), d (new QConsolePrivate (this))
+    : QTerminal (parent), d (new QConsolePrivate (this)),
+      allowTripleClick (false)
 {
     installEventFilter (this);
 
     connect (this, SIGNAL (set_global_shortcuts_signal (bool)),
            parent, SLOT (set_global_shortcuts (bool)));
 
     setAcceptDrops (true);
 }
@@ -1293,36 +1357,70 @@ void QWinTerminalImpl::mouseMoveEvent (Q
       d->m_endSelection = d->posToCell (event->pos ());
 
       updateSelection ();
     }
 }
 
 void QWinTerminalImpl::mousePressEvent (QMouseEvent *event)
 {
-  if (event->button () == Qt::LeftButton)
+  if (allowTripleClick)
+    {
+      mouseTripleClickEvent (event);
+    }
+  else if (event->button () == Qt::LeftButton)
     {
       d->m_settingSelection = true;
 
       d->m_beginSelection = d->posToCell (event->pos ());
     }
 }
 
 void QWinTerminalImpl::mouseReleaseEvent (QMouseEvent *event)
 {
-  if (event->button () == Qt::LeftButton)
+  if (event->button () == Qt::LeftButton && d->m_settingSelection)
     {
       d->m_endSelection = d->posToCell (event->pos ());
 
       updateSelection ();
 
       d->m_settingSelection = false;
     }
 }
 
+void QWinTerminalImpl::mouseDoubleClickEvent (QMouseEvent *event)
+{
+  if (event->button () == Qt::LeftButton)
+    {
+      // doubleclick - select word
+      d->m_settingSelection = false;
+
+      d->selectWord (d->posToCell (event->pos ()));
+
+      allowTripleClick = true;
+
+      QTimer::singleShot (QApplication::doubleClickInterval (),this,
+                     SLOT (tripleClickTimeout ()));
+
+    }
+}
+
+void QWinTerminalImpl::mouseTripleClickEvent (QMouseEvent *event)
+{
+  if (event->button () == Qt::LeftButton)
+    {
+      d->selectLine (d->posToCell (event->pos ()));
+    }
+}
+
+void QWinTerminalImpl::tripleClickTimeout ()
+{
+  allowTripleClick = false;
+}
+
 //////////////////////////////////////////////////////////////////////////////
 
 void QWinTerminalImpl::viewResizeEvent (QConsoleView*, QResizeEvent*)
 {
   d->updateConsoleSize (true);
   d->grabConsoleBuffer ();
 }
 
diff --git a/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.h b/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.h
--- a/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.h
+++ b/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.h
@@ -85,26 +85,30 @@ protected:
   void wheelEvent (QWheelEvent*);
   void focusInEvent (QFocusEvent*);
   void focusOutEvent (QFocusEvent*);
   void keyPressEvent (QKeyEvent*);
   virtual void start (void);
   void mouseMoveEvent (QMouseEvent *event);
   void mousePressEvent (QMouseEvent *event);
   void mouseReleaseEvent (QMouseEvent *event);
+  void mouseDoubleClickEvent (QMouseEvent* event);
+  void mouseTripleClickEvent (QMouseEvent* event);
 
   bool eventFilter(QObject *obj, QEvent *ev);
 
   void dragEnterEvent(QDragEnterEvent *event);
   void dropEvent(QDropEvent *event);
 
 private slots:
   void scrollValueChanged (int value);
   void monitorConsole (void);
   void updateSelection (void);
+  void tripleClickTimeout (void);
 
 private:
   QConsolePrivate* d;
+  bool allowTripleClick;
 };
 
 //////////////////////////////////////////////////////////////////////////////
 
 #endif // __QConsole_h__
