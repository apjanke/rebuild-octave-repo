# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1446071683 0
#      Wed Oct 28 22:34:43 2015 +0000
# Node ID 67e6343cd29ab91d2cf91a070841bc817afb1b7e
# Parent  a278de349250f1027211f07b2d61d557f319e387
Add support for colorspace conversion of signed integers images (patch #8709)

* scripts/image/private/colorspace_conversion_input_check.m: add support for
  signed integers.  16 bit signed integers are common and supported by the
  image package.  We might as well support 8 bit signed as well.
* scripts/image/hsv2rgb.m, scripts/image/rgb2hsv.m, scripts/image/rgb2ntsc.m:
  add tests for signed integer images.

diff --git a/scripts/image/hsv2rgb.m b/scripts/image/hsv2rgb.m
--- a/scripts/image/hsv2rgb.m
+++ b/scripts/image/hsv2rgb.m
@@ -183,13 +183,15 @@ endfunction
 %! rgb = hsv2rgb (randi ([-128 127], 10, 10, 3, "uint16"));
 %! assert (class (rgb), "double")
 %! assert (size (rgb), [10 10 3])
 
 %!test
 %! hsv_double = reshape ([2/3 1/3 1 0 1 1 1 0, 1 1 1 1], [2 2 3]);
 %! hsv_uint8  = reshape (uint8 ([170 85 255 0 255 255 255 0 255 255 255 255]),
 %!                       [2 2 3]);
+%! hsv_int16 = int16 (double (hsv_double * uint16 (65535)) -32768);
 %! expected = reshape ([0 0 1 1 0 1 0 1 1 0 0 1], [2 2 3]);
 %!
 %! assert (hsv2rgb (hsv_double), expected)
 %! assert (hsv2rgb (hsv_uint8), expected)
+%! assert (hsv2rgb (hsv_int16), expected)
 %! assert (hsv2rgb (single (hsv_double)), single (expected), eps (single (2)))
diff --git a/scripts/image/private/colorspace_conversion_input_check.m b/scripts/image/private/colorspace_conversion_input_check.m
--- a/scripts/image/private/colorspace_conversion_input_check.m
+++ b/scripts/image/private/colorspace_conversion_input_check.m
@@ -24,17 +24,18 @@
 function [in_arg, cls, sz, is_im, is_nd] ...
             = colorspace_conversion_input_check (func, arg_name, in_arg)
 
   cls = class (in_arg);
   sz = size (in_arg);
 
   ## If we have an image convert it into a color map.
   if (! iscolormap (in_arg))
-    if (! any (strcmp (cls, {"uint8", "uint16", "single", "double"})))
+    if (! any (strcmp (cls, {"uint8", "int8", "int16", "uint16", ...
+                             "single", "double"})))
       error ("%s: %s of invalid data type '%s'", func, arg_name, cls);
     elseif (size (in_arg, 3) != 3)
       error ("%s: %s must be a colormap or %s image", func, arg_name, arg_name);
     elseif (! isreal (in_arg) || ! isnumeric (in_arg))
       error ("%s: %s must be numeric and real", func, arg_name);
     endif
     is_im = true;
 
@@ -57,12 +58,18 @@ function [in_arg, cls, sz, is_im, is_nd]
     in_arg = reshape (in_arg, [numel(in_arg)/3 3]);
   else
     is_im = false;
     is_nd = false;
   endif
 
   ## Convert to floating point (remember to leave class single alone)
   if (isinteger (in_arg))
-    in_arg = double (in_arg) / double (intmax (cls));
+    int_max = double (intmax (cls));
+    int_min = double (intmin (cls));
+    if (int_min < 0)
+      in_arg = (double (in_arg) - int_min) / (int_max - int_min);
+    else
+      in_arg = double (in_arg) / int_max;
+    endif
   endif
 
 endfunction
diff --git a/scripts/image/rgb2hsv.m b/scripts/image/rgb2hsv.m
--- a/scripts/image/rgb2hsv.m
+++ b/scripts/image/rgb2hsv.m
@@ -161,13 +161,14 @@ endfunction
 %! hsv = rgb2hsv (randi ([-128 127], 10, 10, 3, "uint16"));
 %! assert (class (hsv), "double")
 %! assert (size (hsv), [10 10 3])
 
 %!test
 %! rgb_double = reshape ([1 0 1 .5 1 1 0 .5 0 1 1 .5], [2 2 3]);
 %! rgb_uint8  = reshape (uint8 ([255 0 255 128 255 255 0 128 0 255 255 128]),
 %!                       [2 2 3]);
+%! rgb_int16 = int16 (double (rgb_double * uint16 (65535)) -32768);
 %! expected = reshape ([1/6 1/2 5/6 0 1 1 1 0 1 1 1 .5], [2 2 3]);
 %!
 %! assert (rgb2hsv (rgb_double), expected)
 %! assert (rgb2hsv (rgb_uint8), expected, 0.005)
 %! assert (rgb2hsv (single (rgb_double)), single (expected))
diff --git a/scripts/image/rgb2ntsc.m b/scripts/image/rgb2ntsc.m
--- a/scripts/image/rgb2ntsc.m
+++ b/scripts/image/rgb2ntsc.m
@@ -139,14 +139,15 @@ endfunction
 %! ntsc = rgb2ntsc (randi ([-128 127], 10, 10, 3, "uint16"));
 %! assert (class (ntsc), "double")
 %! assert (size (ntsc), [10 10 3])
 
 %!test
 %! rgb_double = reshape ([1 0 0 0 0 1 0 0 0 0 1 0], [2 2 3]);
 %! rgb_uint8  = reshape (uint8 ([255 0 0 0 0 255 0 0 0 0 255 0]),
 %!                       [2 2 3]);
+%! rgb_int16 = int16 (double (rgb_double * uint16 (65535)) -32768);
 %! expected = reshape ([.299 .587 .114 0 .596 -.274 -.322 0 .211 -.523 .312 0],
 %!                     [2 2 3]);
 %!
 %! assert (rgb2ntsc (rgb_double), expected)
 %! assert (rgb2ntsc (rgb_uint8), expected)
 %! assert (rgb2ntsc (single (rgb_double)), single (expected))
