# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1260196865 -3600
#      Mon Dec 07 15:41:05 2009 +0100
# Node ID 45c08d7c2c79f7e520b1740ae6f4aa53e47f2cf9
# Parent  6786e1e4167603f7454a1657a5272d4d9ac4eae3
allow discontinuous interpolant in interp1

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2009-12-07  Jaroslav Hajek  <highegg@gmail.com>
+
+	* general/interp1.m: Allow discontinuities (jumps) for the "nearest" and
+	"linear" methods. Document the feature and add a few tests.
+
 2009-12-06  Rik <rik@nomad.inbox5.com>
 
 	* Makefile.am: Distribute DOCSTRINGS so that documentation will not require
 	rebuild after merely untarring a distribution.
 	* mkdoc: Change output to refer to mfiles as "scripts/..." rather than
 	"$srcdir/...".  Otherwise, distributed DOCSTRINGS file will not match
 	DOCSTRINGS created under a VPATH build and documentation will be
 	unnecessarily rebuilt.
diff --git a/scripts/general/interp1.m b/scripts/general/interp1.m
--- a/scripts/general/interp1.m
+++ b/scripts/general/interp1.m
@@ -1,9 +1,10 @@
 ## Copyright (C) 2000, 2006, 2007, 2008, 2009 Paul Kienzle
+## Copyright (C) 2009 VZLU Prague
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 3 of the License, or (at
 ## your option) any later version.
 ##
@@ -19,17 +20,17 @@
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{yi} =} interp1 (@var{x}, @var{y}, @var{xi})
 ## @deftypefnx {Function File} {@var{yi} =} interp1 (@dots{}, @var{method})
 ## @deftypefnx {Function File} {@var{yi} =} interp1 (@dots{}, @var{extrap})
 ## @deftypefnx {Function File} {@var{pp} =} interp1 (@dots{}, 'pp')
 ##
 ## One-dimensional interpolation.  Interpolate @var{y}, defined at the
 ## points @var{x}, at the points @var{xi}.  The sample points @var{x} 
-## must be strictly monotonic.  If @var{y} is an array, treat the columns
+## must be monotonic.  If @var{y} is an array, treat the columns
 ## of @var{y} separately.
 ##
 ## Method is one of:
 ##
 ## @table @asis
 ## @item 'nearest'
 ## Return the nearest neighbor.
 ## @item 'linear'
@@ -54,16 +55,23 @@
 ##
 ## If the string argument 'pp' is specified, then @var{xi} should not be
 ## supplied and @code{interp1} returns the piece-wise polynomial that
 ## can later be used with @code{ppval} to evaluate the interpolation.
 ## There is an equivalence, such that @code{ppval (interp1 (@var{x},
 ## @var{y}, @var{method}, 'pp'), @var{xi}) == interp1 (@var{x}, @var{y},
 ## @var{xi}, @var{method}, 'extrap')}.
 ##
+## Duplicate points in @var{x} specify a discontinuous interpolant. There
+## should be at most 2 consecutive points with the same value.
+## The discontinuous interpolant is right-continuous if @var{x} is increasing,
+## left-continuous if it is decreasing.
+## Discontinuities are (currently) only allowed for "nearest" and "linear"
+## methods; in all other cases, @var{x} must be strictly monotonic.
+##
 ## An example of the use of @code{interp1} is
 ##
 ## @example
 ## @group
 ## xf = [0:0.05:10];
 ## yf = sin (2*pi*xf/5);
 ## xp = [0:10];
 ## yp = sin (2*pi*xp/5);
@@ -139,59 +147,86 @@ function yi = interp1 (x, y, varargin)
   xi = xi(:);
 
   ## determine sizes
   if (nx < 2 || ny < 2)
     error ("interp1: table too short");
   endif
 
   ## check whether x is sorted; sort if not.
-  if (! issorted (x))
+  if (! issorted (x, "either"))
     [x, p] = sort (x);
     y = y(p,:);
   endif
 
   starmethod = method(1) == "*";
 
   if (starmethod)
     dx = x(2) - x(1);
   else
-    if (any (x(1:nx-1) == x(2:nx)))
-      error ("interp1: table must be strictly monotonic");
+    jumps = x(1:nx-1) == x(2:nx);
+    have_jumps = any (jumps);
+    if (have_jumps)
+      if (any (strcmp (method, {"nearest", "linear"})))
+        if (any (jumps(1:nx-2) & jumps(2:nx-1)))
+          warning ("interp1: extra points in discontinuities");
+        endif
+      else
+        error ("interp1: discontinuities not supported for method %s", method);
+      endif
     endif
   endif
 
   ## Proceed with interpolating by all methods.
 
   switch (method)
   case "nearest"
     if (pp)
-      yi = mkpp ([x(1); (x(1:end-1)+x(2:end))/2; x(end)], y, szy(2:end));
+      yi = mkpp ([x(1); (x(1:nx-1)+x(2:nx))/2; x(nx)], y, szy(2:end));
     else
       idx = lookup (0.5*(x(1:nx-1)+x(2:nx)), xi) + 1;
       yi = y(idx,:);
     endif
   case "*nearest"
     if (pp)
-      yi = mkpp ([x(1); x(1)+[0.5:(ny-1)]'*dx; x(nx)], y, szy(2:end));
+      yi = mkpp ([x(1); x(1)+[0.5:(nx-1)]'*dx; x(nx)], y, szy(2:end));
     else
       idx = max (1, min (ny, floor((xi-x(1))/dx+1.5)));
       yi = y(idx,:);
     endif
   case "linear"
     dy = diff (y);
     dx = diff (x);
     if (pp)
-      yi = mkpp (x, [dy./dx, y(1:end-1)], szy(2:end));
+      coefs = [dy./dx, y(1:nx-1)];
+      xx = x;
+      if (have_jumps)
+        ## Omit zero-size intervals.
+        coefs(jumps) = [];
+        xx(jumps) = [];
+      endif
+      yi = mkpp (xx, coefs, szy(2:end));
     else
       ## find the interval containing the test point
       idx = lookup (x, xi, "lr");
       ## use the endpoints of the interval to define a line
       s = (xi - x(idx))./dx(idx);
       yi = bsxfun (@times, s, dy(idx,:)) + y(idx,:);
+      if (have_jumps)
+        ## Fix the corner cases of discontinuities at boundaries.
+        ## Internal discontinuities already handled correctly.
+        if (jumps (1))
+          mask = xi < x(1);
+          yi(mask,:) = y(1*ones (1, sum (mask)),:);
+        endif
+        if (jumps(nx-1))
+          mask = xi >= x(nx);
+          yi(mask,:) = y(nx*ones (1, sum (mask)),:);
+        endif
+      endif
     endif
   case "*linear"
     dy = diff (y);
     if (pp)
       yi = mkpp (x(1) + [0:ny-1]*dx, [dy./dx, y(1:end-1)], szy(2:end));
     else
       ## find the interval containing the test point
       t = (xi - x(1))/dx + 1;
@@ -332,16 +367,27 @@ endfunction
 %! ddyc = diff(diff(interp1(t,y,ti,'cubic'))./dti)./dti;
 %! ddys = diff(diff(interp1(t,y,ti,'spline'))./dti)./dti;
 %! ddyp = diff(diff(interp1(t,y,ti,'pchip'))./dti)./dti;
 %! plot (ti(2:end-1), ddyc,'g+',ti(2:end-1),ddys,'b*', ...
 %!       ti(2:end-1),ddyp,'c^');
 %! legend('cubic','spline','pchip');
 %! title("Second derivative of interpolated 'sin (4*t + 0.3) .* cos (3*t - 0.1)'");
 
+%!demo
+%! xf=0:0.05:10; yf = sin(2*pi*xf/5) - (xf >= 5);
+%! xp=[0:.5:4.5,4.99,5:.5:10];      yp = sin(2*pi*xp/5) - (xp >= 5);
+%! lin=interp1(xp,yp,xf,"linear");
+%! near=interp1(xp,yp,xf,"nearest");
+%! plot(xf,yf,"r",xf,near,"g",xf,lin,"b",xp,yp,"r*");
+%! legend ("original","nearest","linear")
+%! %--------------------------------------------------------
+%! % confirm that interpolated function matches the original
+
+
 ## For each type of interpolated test, confirm that the interpolated
 ## value at the knots match the values at the knots.  Points away
 ## from the knots are requested, but only 'nearest' and 'linear'
 ## confirm they are the correct values.
 
 %!shared xp, yp, xi, style
 %! xp=0:2:10;      yp = sin(2*pi*xp/5);  
 %! xi = [-1, 0, 2.2, 4, 6.6, 10, 11];
@@ -547,8 +593,11 @@ endfunction
 %!error interp1(1,1,1, "*linear");
 %!assert (interp1(1:2:4,1:2:4,[0,1,1.4,3,4],"*linear"),[NA,1,1.4,3,NA]);
 %!error interp1(1:3,1:3,1, "*cubic");
 %!assert (interp1(1:2:8,1:2:8,1.4,"*cubic"),1.4);
 %!error interp1(1:2,1:2,1, "*spline");
 %!assert (interp1(1:2:6,1:2:6,1.4,"*spline"),1.4);
 
 %!assert (interp1([3,2,1],[3,2,2],2.5),2.5)
+
+%!assert (interp1 ([1,2,2,3,4],[0,1,4,2,1],[-1,1.5,2,2.5,3.5], "linear", "extrap"), [-2,0.5,4,3,1.5])
+%!assert (interp1 ([4,4,3,2,0],[0,1,4,2,1],[1.5,4,4.5], "linear"), [0,1,NA])
