# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1254424214 14400
#      Thu Oct 01 15:10:14 2009 -0400
# Node ID c338cb954e582848855fceeb47d590091752a072
# Parent  40775386ab5841691eb763f78813bff50c9996f2
adjust axis limits for images

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2009-10-01  John W. Eaton  <jwe@octave.org>
+
+	* image/__img__.m: Adjust xlim and ylim correctly.
+
 2009-10-01  John W. Eaton  <jwe@octave.org>
 
 	* Makefile.in (plot/gnuplot_binary.m): New rule.
 	(DOCSTRINGS): Depend on plot/gnuplot_binary.m.
 	(ALL_M_FILES): Define with =, not :=.
 
 2009-10-01  Jaroslav Hajek  <highegg@gmail.com>
 
diff --git a/scripts/image/__img__.m b/scripts/image/__img__.m
--- a/scripts/image/__img__.m
+++ b/scripts/image/__img__.m
@@ -44,35 +44,45 @@ function h = __img__ (x, y, img, varargi
   if (isempty (x))
     x = [1, columns(img)];
   endif
 
   if (isempty (y))
     y = [1, rows(img)];
   endif
 
-  xlim = [x(1), x(end)];
-  ylim = [y(1), y(end)];
+  xdata = [x(1), x(end)];
+  ydata = [y(1), y(end)];
+
+  xlim = [x(1)-0.5, x(end)+0.5];
+  ylim = [y(1)-0.5, y(end)+0.5];
 
   ca = gca ();
 
-  tmp = __go_image__ (ca, "cdata", img, "xdata", xlim, "ydata", ylim, 
+  tmp = __go_image__ (ca, "cdata", img, "xdata", xdata, "ydata", ydata,
 		      "cdatamapping", "direct", varargin {:});
 
+  ## FIXME -- how can we do this and also get the {x,y}limmode
+  ## properties to remain "auto"?  I suppose this adjustment should
+  ## happen automatically in axes::update_axis_limits instead of
+  ## explicitly setting the values here.  But then what information is
+  ## available to axes::update_axis_limits to determine that the
+  ## adjustment is necessary?
+  set (ca, "xlim", xlim, "ylim", ylim);
+
   if (ndims (img) == 3)
     if (isinteger (img))
       c = class (img);
       mn = intmin (c);
       mx = intmax (c);
       set (ca, "clim", double ([mn, mx]));
     endif
   endif
 
-  set (ca, "view", [0, 90], "xlimmode", "manual", "ylimmode", "manual",
-       "xlim", xlim, "ylim", ylim);
+  set (ca, "view", [0, 90]);
 
   if (strcmp (get (ca, "nextplot"), "replace"))
     set (ca, "ydir", "reverse");
   endif
 
   if (nargout > 0)
     h = tmp;
   endif
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2009-10-01  John W. Eaton  <jwe@octave.org>
+
+	* gl-render.cc (opengl_renderer::draw (const image::properties&)):
+	Adjust origin for glRasterPos3d.
+
 2009-10-01  John W. Eaton  <jwe@octave.org>
 
 	* gl-render.cc: Style fixes.
 
 2009-10-01  Shai Ayal  <shaiay@users.sourceforge.net>
 
 	* graphics.cc (image::properties::get_color_data): New function.
 	* gl-render.cc (opengl_renderer::draw): Handle RGB images.
diff --git a/src/gl-render.cc b/src/gl-render.cc
--- a/src/gl-render.cc
+++ b/src/gl-render.cc
@@ -2699,18 +2699,18 @@ opengl_renderer::draw (const image::prop
   int h = dv(0), w = dv(1);
   bool ok = true;
   
   const Matrix x = props.get_xdata ().matrix_value ();
   const Matrix y = props.get_ydata ().matrix_value ();
   const ColumnVector p0 = xform.transform (x(0), y(0), 0);
   const ColumnVector p1 = xform.transform (x(1), y(1), 0);
 
-  glPixelZoom ((p1(0)-p0(0))/(w-1) , -(p1(1)-p0(1))/(h-1));
-  glRasterPos3d (x(0), y(0), 0);
+  glPixelZoom ((p1(0)-p0(0))/(w-1), -(p1(1)-p0(1))/(h-1));
+  glRasterPos3d (x(0)-0.5, y(0)-0.5, 0);
 
   // Expect RGB data
   if (dv.length () == 3 && dv(2) == 3)
     {
       if (cdata.is_double_type ())
 	{
 	  const NDArray xcdata = cdata.array_value ();
 
