# HG changeset patch
# User Rik <rik@octave.org>
# Date 1449556152 28800
#      Mon Dec 07 22:29:12 2015 -0800
# Node ID b169da1507028ee74fc8437443bb678f464ad968
# Parent  eed8ec05f1c84231ceafe6d11b3fcdf3a72434ed
Eliminate unnecessary uses of nargin.

* regexp.cc: Eliminate unnecessary uses of nargin.

diff --git a/libinterp/corefcn/regexp.cc b/libinterp/corefcn/regexp.cc
--- a/libinterp/corefcn/regexp.cc
+++ b/libinterp/corefcn/regexp.cc
@@ -848,22 +848,20 @@ Return zero-length matches.\n\
 \n\
 @code{regexp ('a', 'b*', 'emptymatch')} returns @code{[1 2]} because there\n\
 are zero or more @qcode{'b'} characters at positions 1 and end-of-string.\n\
 \n\
 @end table\n\
 @seealso{regexpi, strfind, regexprep}\n\
 @end deftypefn")
 {
-  octave_value_list retval;
+  if (args.length () < 2)
+    print_usage ();
 
-  int nargin = args.length ();
-
-  if (nargin < 2)
-    print_usage ();
+  octave_value_list retval;
 
   if (args(0).is_cell () || args(1).is_cell ())
     retval = octcellregexp (args, (nargout > 0 ? nargout : 1), "regexp");
   else
     retval = octregexp (args, nargout, "regexp");
 
   return retval;
 }
@@ -1144,22 +1142,20 @@ DEFUN (regexpi, args, nargout,
 Case insensitive regular expression string matching.\n\
 \n\
 Search for @var{pat} in @var{str} and return the positions and substrings of\n\
 any matches, or empty values if there are none.  @xref{XREFregexp,,regexp},\n\
 for details on the syntax of the search pattern.\n\
 @seealso{regexp}\n\
 @end deftypefn")
 {
-  octave_value_list retval;
+  if (args.length () < 2)
+    print_usage ();
 
-  int nargin = args.length ();
-
-  if (nargin < 2)
-    print_usage ();
+  octave_value_list retval;
 
   if (args(0).is_cell () || args(1).is_cell ())
     retval = octcellregexp (args, (nargout > 0 ? nargout : 1), "regexpi", true);
   else
     retval = octregexp (args, nargout, "regexpi", true);
 
   return retval;
 }
@@ -1379,27 +1375,24 @@ Implementation Note: For compatibility w
 in @var{pat} (e.g., @qcode{\"@xbackslashchar{}n\"} => newline) are expanded\n\
 even when @var{pat} has been defined with single quotes.  To disable\n\
 expansion use a second backslash before the escape sequence (e.g.,\n\
 \"@xbackslashchar{}@xbackslashchar{}n\") or use the @code{regexptranslate}\n\
 function.\n\
 @seealso{regexp, regexpi, strrep}\n\
 @end deftypefn")
 {
-  octave_value_list retval;
-  int nargin = args.length ();
+  if (args.length () < 3)
+    print_usage ();
 
-  if (nargin < 3)
-    print_usage ();
+  octave_value_list retval;
 
   if (args(0).is_cell () || args(1).is_cell () || args(2).is_cell ())
     {
-      Cell str;
-      Cell pat;
-      Cell rep;
+      Cell str, pat, rep;
       dim_vector dv0;
       dim_vector dv1 (1, 1);
 
       if (args(0).is_cell ())
         str = args(0).cell_value ();
       else
         str = Cell (args(0));
 
@@ -1442,17 +1435,17 @@ function.\n\
                 new_args(2) = rep(j);
               new_args(0) = octregexprep (new_args, "regexprep");
             }
 
           ret(i) = new_args(0);
         }
 
       retval = args(0).is_cell () ? octave_value (ret)
-        : octave_value (ret(0));
+                                  : octave_value (ret(0));
     }
   else
     retval = octregexprep (args, "regexprep");
 
   return retval;
 }
 
 /*
