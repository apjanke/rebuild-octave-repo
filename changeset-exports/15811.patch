# HG changeset patch
# User Rik <rik@octave.org>
# Date 1355791930 28800
#      Mon Dec 17 16:52:10 2012 -0800
# Node ID 317f4857c1e1f6859ff22c69ad181017b474914d
# Parent  87a61a4d8fd28c47da26f5b57736c4c914ecef1e
Modify class() to return Java class name, not type name "octave_java".

* libinterp/octave-value/ov-class.cc(Fclass): Check object type with is_java,
call java_class_name () on java objects.  Improve docstring.  Add %!test block.

diff --git a/libinterp/octave-value/ov-class.cc b/libinterp/octave-value/ov-class.cc
--- a/libinterp/octave-value/ov-class.cc
+++ b/libinterp/octave-value/ov-class.cc
@@ -40,16 +40,17 @@ along with Octave; see the file COPYING.
 #include "load-path.h"
 #include "ls-hdf5.h"
 #include "ls-oct-ascii.h"
 #include "ls-oct-binary.h"
 #include "ls-utils.h"
 #include "mxarray.h"
 #include "oct-lvalue.h"
 #include "ov-class.h"
+#include "ov-java.h"
 #include "ov-fcn.h"
 #include "ov-usr-fcn.h"
 #include "pager.h"
 #include "parse.h"
 #include "pr-output.h"
 #include "toplev.h"
 #include "unwind-prot.h"
 #include "variables.h"
@@ -1916,35 +1917,44 @@ octave_class::exemplar_info::compare (co
       error ("invalid comparison of class exemplar to non-class object");
     }
 
   return retval;
 }
 
 DEFUN (class, args, ,
   "-*- texinfo -*-\n\
-@deftypefn  {Built-in Function} {} class (@var{expr})\n\
-@deftypefnx {Built-in Function} {} class (@var{s}, @var{id})\n\
-@deftypefnx {Built-in Function} {} class (@var{s}, @var{id}, @var{p}, @dots{})\n\
-Return the class of the expression @var{expr} or create a class with\n\
+@deftypefn  {Function File} {@var{classname} =} class (@var{obj})\n\
+@deftypefnx {Function File} {} class (@var{s}, @var{id})\n\
+@deftypefnx {Function File} {} class (@var{s}, @var{id}, @var{p}, @dots{})\n\
+Return the class of the object @var{obj} or create a class with\n\
 fields from structure @var{s} and name (string) @var{id}.  Additional\n\
 arguments name a list of parent classes from which the new class is\n\
 derived.\n\
+@seealso{typeinfo, isa}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin == 0)
     print_usage ();
   else if (nargin == 1)
-    retval = args(0).class_name ();
+    // Called for class of object
+    if (! args(0).is_java ())
+      retval = args(0).class_name ();
+    else
+      {
+        octave_java *jobj = dynamic_cast<octave_java*>(args(0).internal_rep ());
+        retval = jobj->java_class_name ();
+      }
   else
     {
+      // Called as class constructor
       octave_function *fcn = octave_call_stack::caller ();
 
       std::string id = args(1).string_value ();
 
       if (! error_state)
         {
           if (fcn)
             {
@@ -1991,16 +2001,28 @@ derived.\n\
         }
       else
         error ("class: ID (class name) must be a character string");
     }
 
   return retval;
 }
 
+/*
+%!assert (class (1.1), "double");
+%!assert (class (single (1.1)), "single");
+%!assert (class (uint8 (1)), "uint8");
+%!testif HAVE_JAVA
+%! jobj = javaObject ("java.lang.StringBuffer");
+%! assert (class (jobj), "java.lang.StringBuffer");
+
+%% Test Input Validation
+%!error class ()
+*/
+
 DEFUN (__isa_parent__, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} __isa_parent__ (@var{class}, @var{name})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval = false;
 
