# HG changeset patch
# User jwe
# Date 1187974788 0
#      Fri Aug 24 16:59:48 2007 +0000
# Node ID d069de22e9aa329aae8d8aaddea96581ad85e3e2
# Parent  647cad23207009dd087320bf6c206f5158f06644
[project @ 2007-08-24 16:59:47 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,17 @@
+2007-08-24  John W. Eaton  <jwe@octave.org>
+
+	* plot/subplot.m, plot/plot.m, plot/grid.m:
+	Use p = get (h, "prop") instead of obj = get (h); p = obj.prop.
+
+	* miscellaneous/movefile.m: Separate second and third args and
+	use p1 and p2, not f1 and f2 when constructing arguments for
+	calls to system.  From Michael Goffioul <michael.goffioul@gmail.com>.
+
 2007-08-24  Michael Goffioul  <michael.goffioul@gmail.com>
 
 	* set/intersect.m: Make it work with cell arrays of strings.
 
 2007-08-24  David Bateman  <dbateman@free.fr>
 
         * geometry/convhull.m, geometry/delaunay.m, geometry/delaunay3.m, 
         geometry/griddata.m, geometry/voronoi.m, geometry/voronoin.m: New 
diff --git a/scripts/miscellaneous/movefile.m b/scripts/miscellaneous/movefile.m
--- a/scripts/miscellaneous/movefile.m
+++ b/scripts/miscellaneous/movefile.m
@@ -91,30 +91,30 @@ function [status, msg, msgid] = movefile
 	endwhile 
 
 	if (ispc () && ! isunix () && ! isempty (file_in_path (EXEC_PATH, "cp.exe")))
 	  p1 = strrep (p1, "\\", "/");
 	  p2 = strrep (p2, "\\", "/");
 	endif
 
 	## Move the file(s).
-	[err, msg] = system (sprintf ("%s %s\"%s\"", cmd, f1, f2));
+	[err, msg] = system (sprintf ("%s %s \"%s\"", cmd, p1, p2));
 	if (err < 0)
 	  status = false;
 	  msgid = "movefile";
 	endif
       endwhile
     else
       if (ispc () && ! isunix () && ! isempty (file_in_path (EXEC_PATH, "cp.exe")))
 	p1 = strrep (p1, "\\", "/");
 	p2 = strrep (p2, "\\", "/");
       endif
 
       ## Move the file(s).
-      [err, msg] = system (sprintf ("%s %s\"%s\"", cmd, f1, f2));
+      [err, msg] = system (sprintf ("%s %s \"%s\"", cmd, p1, p2));
       if (err < 0)
 	status = false;
 	msgid = "movefile";
       endif
     endif
   else
     print_usage ();
   endif
diff --git a/scripts/plot/grid.m b/scripts/plot/grid.m
--- a/scripts/plot/grid.m
+++ b/scripts/plot/grid.m
@@ -41,20 +41,19 @@ function grid (x, y)
   persistent grid_on = false;
   persistent minor_on = false;
 
   nargs = nargin;
 
   if (nargs == 2)
     if (ishandle (x))
       ax = x;
-      obj = get (x);
       x = y;
       nargs--;
-      if (! strcmp (obj.type, "axes"))
+      if (! strcmp (get (ax, "type"), "axes"))
 	error ("grid: expecting first argument to be an axes object");
       endif
     else
       print_usage ();
     endif
   else
     ax = gca ();
   endif
diff --git a/scripts/plot/plot.m b/scripts/plot/plot.m
--- a/scripts/plot/plot.m
+++ b/scripts/plot/plot.m
@@ -177,18 +177,17 @@
 ## @end deftypefn
 
 ## Author: jwe
 
 function retval = plot (varargin)
 
   if (isscalar (varargin{1}) && ishandle (varargin{1}))
     h = varargin {1};
-    obj = get (h);
-    if (! strcmp (obj.type, "axes"))
+    if (! strcmp (get (h, "type"), "axes"))
       error ("plot: expecting first argument to be an axes object");
     endif
     oldh = gca ();
     unwind_protect
       axes (h);
       newplot ();
       tmp = __plt__ ("plot", h, varargin{2:end});
     unwind_protect_cleanup
diff --git a/scripts/plot/subplot.m b/scripts/plot/subplot.m
--- a/scripts/plot/subplot.m
+++ b/scripts/plot/subplot.m
@@ -111,30 +111,27 @@ function h = subplot (rows, columns, ind
 
   x1 = x0 + xsize;
   y1 = y0 + ysize;
 
   cf = gcf ();
 
   set (cf, "nextplot", "add");
 
-  obj = get (cf);
-
   found = false;
-  for child = obj.children
+  for child = get (cf, "children")
     ## Check if this child is still valid; this might not be the case
     ## anymore due to the deletion of previous children (due to DeleteFcn
     ## callback or for legends/colorbars that get deleted with their
     ## corresponding axes)
     if (! ishandle (child))
       continue;
     endif
-    obj = get (child);
-    if (strcmp (obj.type, "axes"))
-      objpos = obj.outerposition;
+    if (strcmp (get (child, "type"), "axes"))
+      objpos = get (child, "outerposition");
       if (objpos == pos)
 	## If the new axes are in exactly the same position as an
 	## existing axes object, use the existing axes.
 	found = true;
 	tmp = child;
 	break;
       else
 	## If the new axes overlap an old axes object, delete the old
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,14 @@
 2007-08-24  John W. Eaton  <jwe@octave.org>
 
+	* mappers.cc (octave_is_NA (int), xisnan (int)): New functions.
+	(install_mapper_functions): Use them to handle character data in
+	isna and isnan functions.
+
 	* load-path.cc (load_path::do_remove): Call remove_hook function
 	before removing directory from list.
 
 2007-08-24  David Bateman  <dbateman@free.fr>
 
         * ov-bool-sparse.cc (DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA): Class
         is now logical.
         * ov-re-sparse.cc, ov-cx-sparse.cc 
diff --git a/src/mappers.cc b/src/mappers.cc
--- a/src/mappers.cc
+++ b/src/mappers.cc
@@ -161,16 +161,28 @@ ximag (const Complex& x)
 }
 
 static double
 xreal (const Complex& x)
 {
   return x.real ();
 }
 
+static int
+octave_is_NA (int)
+{
+  return 0;
+}
+
+static int
+xisnan (int)
+{
+  return 0;
+}
+
 void
 install_mapper_functions (void)
 {
   DEFUN_MAPPER (abs, xabs, 0, 0, fabs, xabs, 0, 0.0, 0.0, 1, 0,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} abs (@var{z})\n\
 Compute the magnitude of @var{z}, defined as\n\
 @iftex\n\
@@ -457,31 +469,31 @@ Return 1 for printable characters (but n
 @end deftypefn");
 
   DEFUN_MAPPER (islower, xislower, 0, 0, 0, 0, 0, 0.0, 0.0, 0, 0,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} islower (@var{s})\n\
 Return 1 for characters that are lower case letters.\n\
 @end deftypefn");
 
-  DEFUN_MAPPER (isna, 0, octave_is_NA, octave_is_NA, 0, 0, 0, 0.0, 0.0, 0, 0,
+  DEFUN_MAPPER (isna, octave_is_NA, octave_is_NA, octave_is_NA, 0, 0, 0, 0.0, 0.0, 0, 0,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} isna (@var{x})\n\
 Return 1 for elements of @var{x} that are NA (missing) values and zero\n\
 otherwise.  For example,\n\
 \n\
 @example\n\
 @group\n\
 isna ([13, Inf, NA, NaN])\n\
      @result{} [ 0, 0, 1, 0 ]\n\
 @end group\n\
 @end example\n\
 @end deftypefn");
 
-  DEFUN_MAPPER (isnan, 0, xisnan, xisnan, 0, 0, 0, 0.0, 0.0, 0, 0,
+  DEFUN_MAPPER (isnan, xisnan, xisnan, xisnan, 0, 0, 0, 0.0, 0.0, 0, 0,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} isnan (@var{x})\n\
 Return 1 for elements of @var{x} that are NaN values and zero\n\
 otherwise.  NA values are also considered NaN values.  For example,\n\
 \n\
 @example\n\
 @group\n\
 isnan ([13, Inf, NA, NaN])\n\
