# HG changeset patch
# User jwe
# Date 1129579912 0
#      Mon Oct 17 20:11:52 2005 +0000
# Node ID 9e3efbc3070a25c6881b8ac831b23f20d9082094
# Parent  3b3e8b7f0800da62a4890136bbacacaa1eb14544
[project @ 2005-10-17 20:11:52 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,16 @@
+2005-10-17  Paul Kienzle <pkienzle@users.sf.net>
+
+	* octave.test/system/system.exp: rmdir no longer prints a
+	message if the directory does not exist.
+
+	* octave.test/system/mk-rm-dir-1.m: mkdir/rmdir return 1
+	on success and 0 on failure.
+
 2005-10-17  John W. Eaton  <jwe@octave.org>
 
 	* configure.in (F77_FFLOAT_STORE_FLAG):
 	Check for -ffloat-store option for Fortran compiler and set
 	F77_FLOAT_STORE_FLAG if it works.
 	* Makeconf.in: Substitute it here.
 	(do-subst-config-vals): Substitute OCTAVE_CONF_F77_FLOAT_STORE_FLAG.
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2005-10-17  Keith Goodman  <kwgoodman@gmail.com>
+
+	* DLD-FUNCTIONS/sort.cc: Doc string fix.
+	
 2005-10-17  John W. Eaton  <jwe@octave.org>
 
 	* oct-conf.h.in (OCTAVE_CONF_F77_FLOAT_STORE_FLAG): Substitute
 	OCTAVE_CONF_F77_FLOAT_STORE_FLAG here.
 
 2005-10-14  John W. Eaton  <jwe@octave.org>
 
 	* mk-errno-list: New script.
diff --git a/src/DLD-FUNCTIONS/sort.cc b/src/DLD-FUNCTIONS/sort.cc
--- a/src/DLD-FUNCTIONS/sort.cc
+++ b/src/DLD-FUNCTIONS/sort.cc
@@ -678,19 +678,18 @@ mx_sort_indexed (ArrayN<octave_value> &m
 #endif
 
 DEFUN_DLD (sort, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {[@var{s}, @var{i}] =} sort (@var{x})\n\
 @deftypefnx {Loadable Function} {[@var{s}, @var{i}] =} sort (@var{x}, @var{dim})\n\
 @deftypefnx {Loadable Function} {[@var{s}, @var{i}] =} sort (@var{x}, @var{mode})\n\
 @deftypefnx {Loadable Function} {[@var{s}, @var{i}] =} sort (@var{x}, @var{dim}, @var{mode})\n\
-Return a copy of @var{x} with the elements elements arranged in\n\
-increasing order.  For matrices, @code{sort} orders the elements in each\n\
-column.\n\
+Return a copy of @var{x} with the elements arranged in increasing\n\
+order.  For matrices, @code{sort} orders the elements in each column.\n\
 \n\
 For example,\n\
 \n\
 @example\n\
 @group\n\
 sort ([1, 2; 2, 3; 3, 1])\n\
      @result{}  1  1\n\
          2  2\n\
@@ -718,17 +717,17 @@ If the optional argument @var{dim} is gi
 along the dimension defined by @var{dim}. The optional argument @code{mode}\n\
 defines the order in which the values will be sorted. Valid values of\n\
 @code{mode} are `ascend' or `descend'.\n\
 \n\
 For equal elements, the indices are such that the equal elements are listed\n\
 in the order that appeared in the original list.\n\
 \n\
 The @code{sort} function may also be used to sort strings and cell arrays\n\
-of strings, it which case the dictionary order of the strings is used.\n\
+of strings, in which case the dictionary order of the strings is used.\n\
 \n\
 The algorithm used in @code{sort} is optimized for the sorting of partially\n\
 ordered lists.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
diff --git a/test/octave.test/system/mk-rm-dir-1.m b/test/octave.test/system/mk-rm-dir-1.m
--- a/test/octave.test/system/mk-rm-dir-1.m
+++ b/test/octave.test/system/mk-rm-dir-1.m
@@ -1,6 +1,6 @@
 nm = tmpnam ();
 e1 = mkdir (nm);
 [s2, e2] = stat (nm);
 e3 = rmdir (nm);
 [s4, e4] = stat (nm);
-(! e1 && strcmp (s2.modestr(1), "d") && ! e3 && e4 < 0)
+(e1 && strcmp (s2.modestr(1), "d") && e3 && e4 < 0)
diff --git a/test/octave.test/system/system.exp b/test/octave.test/system/system.exp
--- a/test/octave.test/system/system.exp
+++ b/test/octave.test/system/system.exp
@@ -203,17 +203,17 @@ set test mkdir-2
 set prog_output "\n... mkdir:.*"
 do_test mkdir-2.m
 
 set test rmdir-1
 set prog_output "\n... rmdir:.*"
 do_test rmdir-1.m
 
 set test rmdir-2
-set prog_output "\n... rmdir:.*"
+set prog_output "ans = 0"
 do_test rmdir-2.m
 
 set test umask-1
 set prog_output "ans = 1"
 do_test umask-1.m
 
 set test umask-2
 set prog_output "\n... umask:.*"
