# HG changeset patch
# User jwe
# Date 1169070471 0
#      Wed Jan 17 21:47:51 2007 +0000
# Node ID 7924a9086c0809ea20d481a66bb5932e58b65056
# Parent  64bad7c6a6077e751390ab1c3ff2a89722306788
[project @ 2007-01-17 21:47:50 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,19 @@
+2007-01-17  John W. Eaton  <jwe@octave.org>
+
+	* help.cc (help_from_file, help_from_symbol_table, help_from_list):
+	Rewrite using raw_ versions.
+
+2007-01-17  David Bateman  <dbateman@free.fr>
+
+	* help.cc (raw_help, raw_help_from_file,
+	raw_help_from_symbol_table, raw_help_from_list): New functions.
+	* help.h (raw_help): Provide decl.
+
 2007-01-16  John W. Eaton  <jwe@octave.org>
 
 	* DLD-FUNCTIONS/__pchip_deriv__.cc: Fix dpchim decl for --enable-64.
 	(F__pchip_deriv__): Fix call to dpchim for --enable-64.
 
 	* DLD-FUNCTIONS/fftw.cc: Delete decl for fftw_planner.
 
 2007-01-11  Michael Goffioul  <michael.goffioul@swing.be>
diff --git a/src/help.cc b/src/help.cc
--- a/src/help.cc
+++ b/src/help.cc
@@ -884,52 +884,70 @@ display_usage_text (std::ostream& os, co
       if (found_def)
 	filtered_msg = buf.str ();
     }
 
   display_help_text (os, filtered_msg);
 }
 
 static bool
-help_from_list (std::ostream& os, const help_list *list,
-		const std::string& nm, int usage, bool& symbol_found)
+raw_help_from_list (const help_list *list, const std::string& nm, 
+		    std::string& h, bool& symbol_found)
 {
   bool retval = false;
 
   const char *name;
 
   while ((name = list->name) != 0)
     {
       if (strcmp (name, nm.c_str ()) == 0)
 	{
 	  symbol_found = true;
 
-	  std::string h = list->help;
+	  h = list->help;
 
 	  if (h.length () > 0)
-	    {
-	      if (usage)
-		os << "\nusage: ";
-	      else
-		os << "\n*** " << nm << ":\n\n";
+	    retval = true;
 
-	      display_help_text (os, h);
-
-	      os << "\n";
-
-	      retval = true;
-	    }
 	  break;
 	}
       list++;
     }
 
   return retval;;
 }
 
+static bool
+help_from_list (std::ostream& os, const help_list *list,
+		const std::string& nm, int usage, bool& symbol_found)
+{
+  bool retval = false;
+
+  std::string h;
+
+  if (raw_help_from_list (list, nm, h, symbol_found))
+    {
+      if (h.length () > 0)
+	{
+	  if (usage)
+	    os << "\nusage: ";
+	  else
+	    os << "\n*** " << nm << ":\n\n";
+
+	  display_help_text (os, h);
+
+	  os << "\n";
+
+	  retval = true;
+	}
+    }
+
+  return retval;
+}
+
 std::string
 extract_help_from_dispatch (const std::string& nm)
 {
   std::string retval;
 
   symbol_record *builtin = fbi_sym_tab->lookup ("builtin:" + nm, 0);
 
   if (builtin)
@@ -976,66 +994,123 @@ extract_help_from_dispatch (const std::s
       else
 	error ("failed to find dispatch record for `builtin:%s'", nm.c_str ());
     }
 
   return retval;
 }
 
 static bool
-help_from_symbol_table (std::ostream& os, const std::string& nm,
-			bool& symbol_found)
+raw_help_from_symbol_table (const std::string& nm, std::string& h, 
+			    std::string& w, bool& symbol_found)
 {
   bool retval = false;
 
   symbol_record *sym_rec = lookup_by_name (nm, 0);
 
   if (sym_rec && sym_rec->is_defined ())
     {
       symbol_found = true;
 
-      std::string h = sym_rec->help ();
+      h = sym_rec->help ();
+
+      if (h.length () > 0)
+	{
+	  w = sym_rec->which ();
+
+	  retval = true;
+	}
+    }
 
+  return retval;
+}
+
+static bool
+help_from_symbol_table (std::ostream& os, const std::string& nm,
+			bool& symbol_found)
+{
+  bool retval = false;
+
+  std::string h;
+  std::string w;
+
+  if (raw_help_from_symbol_table (nm, h, w, symbol_found))
+    {
       if (h.length () > 0)
 	{
 	  h = extract_help_from_dispatch (nm) + h;
+
 	  display_help_text (os, h);
-	  if (! Vsuppress_verbose_help_message)
-	    {
-	      sym_rec->which (os);
-	      os << "\n";
-	    }
+
+	  if (w.length () > 0 && ! Vsuppress_verbose_help_message)
+	    os << w << "\n";
+
 	  os << "\n";
+
 	  retval = true;
 	}
     }
 
   return retval;
 }
 
 static bool
+raw_help_from_file (const std::string& nm, std::string& h, 
+		    std::string& file, bool& symbol_found)
+{
+  bool retval = false;
+
+  h = get_help_from_file (nm, symbol_found, file);
+
+  if (h.length () > 0)
+    retval = true;
+
+  return retval;
+}
+
+static bool
 help_from_file (std::ostream& os, const std::string& nm, bool& symbol_found)
 {
   bool retval = false;
 
+  std::string h;
   std::string file;
 
-  std::string h = get_help_from_file (nm, symbol_found, file);
-
-  if (h.length () > 0)
+  if (raw_help_from_file (nm, h, file, symbol_found))
     {
-      os << nm << " is the file " << file << "\n\n";
-      display_help_text (os, h);
-      os << "\n";
-      retval = true;
+      if (h.length () > 0)
+	{
+	  os << nm << " is the file " << file << "\n\n";
+
+	  display_help_text (os, h);
+
+	  os << "\n";
+
+	  retval = true;
+	}
     }
 
   return retval;
 }
 
+std::string
+raw_help (const std::string& nm, bool &symbol_found)
+{
+  std::string h;
+  std::string w;
+  std::string f;
+
+  (raw_help_from_list (operator_help (), nm, h, symbol_found)
+   || raw_help_from_list (keyword_help (), nm, h, symbol_found)
+   || raw_help_from_symbol_table (nm, h, w, symbol_found)
+   || raw_help_from_file (nm, h, f, symbol_found));
+
+  return h;
+}
+
 static void
 builtin_help (int argc, const string_vector& argv)
 {
   help_list *op_help_list = operator_help ();
   help_list *kw_help_list = keyword_help ();
 
   for (int i = 1; i < argc; i++)
     {
diff --git a/src/help.h b/src/help.h
--- a/src/help.h
+++ b/src/help.h
@@ -34,16 +34,18 @@ extern string_vector make_name_list (voi
 extern std::string extract_help_from_dispatch (const std::string&);
 
 extern void display_help_text (std::ostream&, const std::string&);
 
 extern void display_usage_text (std::ostream&, const std::string&);
 
 extern void additional_help_message (std::ostream&);
 
+extern std::string raw_help (const std::string&, bool&);
+
 // Name of the info file specified on command line.
 // (--info-file file)
 extern std::string Vinfo_file;
 
 // Name of the info reader we'd like to use.
 // (--info-program program)
 extern std::string Vinfo_program;
 
