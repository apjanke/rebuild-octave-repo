# HG changeset patch
# User Kai T. Ohlhus <k.ohlhus@gmail.com>
# Date 1521731786 -3600
#      Thu Mar 22 16:16:26 2018 +0100
# Branch stable
# Node ID 0e5ae3ecda1a95bd122bfba2b5c5f92ed2071aeb
# Parent  0cd310ac0d779b1f671056861c101466632d1a6d
Make isequal handle large sparse matrices (bug #45171).

* scripts/general/isequal.m: In case of sparse matrices a logical index matrix
created by (x == y) is likely to exceed the memory.  By using find, there is
no need to create matrices like this and enables treatment of large sparse
matrices.  New BIST tests added.  Year updated.

diff --git a/scripts/general/isequal.m b/scripts/general/isequal.m
--- a/scripts/general/isequal.m
+++ b/scripts/general/isequal.m
@@ -1,9 +1,9 @@
-## Copyright (C) 2017 Rik Wehbring
+## Copyright (C) 2017-2018 Rik Wehbring
 ## Copyright (C) 2005-2017 William Poetra Yoga Hadisoeseno
 ## Copyright (C) 2000-2017 Paul Kienzle
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software: you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation, either version 3 of the License, or
@@ -29,17 +29,17 @@
 ## 1. Verify the class of x.
 ##    a. All objects are of the same class
 ##    b. All objects are of a generic "numeric" class which includes
 ##       numeric, logical, and character arrays
 ## 2. Verify size of all objects match.
 ## 3. Convert objects to struct, and then compare as stated below.
 ## 4. For each argument after x, compare it for equality with x:
 ##    a. char       compare each member with strcmp
-##    b. numeric    compare each member with '=='
+##    b. numeric    compare each member with '==' with sparsity regarded
 ##    c. struct     compare number of fieldnames, value of fieldnames,
 ##                  and then each field with isequal (recursive)
 ##    d. cellstr    compare each cellstr member with strcmp
 ##    e. cell       compare each member with isequal (recursive)
 ##    f. fcn_handle compare using overloaded "eq" operator
 
 function t = isequal (x, varargin)
 
@@ -96,19 +96,27 @@ function t = isequal (x, varargin)
   if (t)
     if (two_args)
 
       if (ischar (x) && ischar (y))
         ## char type.  Optimization, strcmp is ~35% faster than '==' operator.
         t = strcmp (x, y);
 
       elseif (isreal (x) || iscomplex (x))
-        ## general "numeric" type.  Use '==' operator.
-        m = (x == y);
-        t = all (m(:));
+        if (issparse (x))
+          ## sparse types.
+          [xi, xj, xv] = find (x);
+          [yi, yj, yv] = find (y);
+          t = (length (xi) == length (yi)) && all (xi == yi) ...
+              && all (xj == yj) && all (xv == yv);
+        else
+          ## general "numeric" type.  Use '==' operator.
+          m = (x == y);
+          t = all (m(:));
+        endif
 
       elseif (isstruct (x))
         ## struct type.  Compare # of fields, fieldnames, then field values.
 
         ## Test number of fields are equal.
         t = (numfields (x) == numfields (y));
 
         ## Test that all the field names are equal.
@@ -169,26 +177,44 @@ function t = isequal (x, varargin)
         ## char type.  Optimization, strcmp is ~35% faster than '==' operator.
         idx = 1;
         while (t && idx <= nvarargin)
           t = strcmp (x, varargin{idx});
           idx += 1;
         endwhile
 
       elseif (isreal (x) || iscomplex (x))
-        ## general "numeric" type.  Use '==' operator.
+
+        if (issparse (x))
+          ## sparse types.
+
+          idx = 1;
+          [xi, xj, xv] = find (x);
+          while (t && idx <= nvarargin)
+            y = varargin{idx};
+            [yi, yj, yv] = find (y);
+            t = (length (xi) == length (yi)) && all (xi == yi) ...
+                && all (xj == yj) && all (xv == yv);
 
-        idx = 1;
-        while (t && idx <= nvarargin)
-          y = varargin{idx};
-          m = (x == y);
-          t = all (m(:));
+            idx += 1;
+          endwhile
+
+        else
+          ## general "numeric" type.  Use '==' operator.
 
-          idx += 1;
-        endwhile
+          idx = 1;
+          while (t && idx <= nvarargin)
+            y = varargin{idx};
+            m = (x == y);
+            t = all (m(:));
+
+            idx += 1;
+          endwhile
+
+        endif
 
       elseif (isstruct (x))
         ## struct type.  Compare # of fields, fieldnames, then field values.
 
         ## Test number of fields are equal.
         fnm_x = fieldnames (x);
         n = numel (fnm_x);
         fnm_v = cellfun ("fieldnames", varargin, "uniformoutput", false);
@@ -463,16 +489,19 @@ endfunction
 %! assert (isequal (fcn, fcn), true);
 %! assert (isequal (fcn, fcn, fcn), true);
 %! assert (isequal (fcn, @(x) x.^2), false);
 %! assert (isequal (fcn, fcn, @(x) x.^2), false);
 %! assert (isequal (@(x) x.^2, fcn), false);
 %! assert (isequal (@(x) x.^2, @(x) x.^2, fcn), false);
 
 ## test for sparse matrices
+%!shared A, Z
+%!  A = sprand (2^31, 1000, 2^(-31));
+%!  Z = sparse (2^31, 1000);
 %!assert (isequal (sparse ([]), []), true)
 %!assert (isequal (sparse ([]), sparse ([]), []), true)
 %!assert (isequal ([], sparse ([])), true)
 %!assert (isequal ([], [], sparse ([])), true)
 %!assert (isequal (sparse (0,1), sparse (0,1)), true)
 %!assert (isequal (sparse (0,1), sparse (0,1), sparse (0,1)), true)
 %!assert (isequal (sparse (0,1), zeros (0,1)), true)
 %!assert (isequal (sparse (0,1), sparse (0,1), zeros (0,1)), true)
@@ -481,16 +510,22 @@ endfunction
 %!assert (isequal (zeros (2,2), sparse (2,2)), true)
 %!assert (isequal (zeros (2,2), zeros (2,2), sparse (2,2)), true)
 %!assert (isequal (speye (1), eye (1)), true)
 %!assert (isequal (speye (1), speye (1), eye (1)), true)
 %!assert (isequal (eye (300), speye (300)), true)
 %!assert (isequal (eye (300), eye (300), speye (300)), true)
 %!assert (isequal (sparse (0,1), sparse (1,0)), false)
 %!assert (isequal (sparse (0,1), sparse (0,1), sparse (1,0)), false)
+%!assert (isequal (Z, Z), true)
+%!assert (isequal (A, A), true)
+%!assert (isequal (A, Z), false)
+%!assert (isequal (Z, Z, Z), true)
+%!assert (isequal (A, A, A), true)
+%!assert (isequal (A, Z, A), false)
 
 ## test NaN
 %!assert (isequal (NaN, NaN), false)
 %!assert (isequal (NaN, NaN, NaN), false)
 %!assert (isequal (NaN, Inf), false)
 %!assert (isequal (NaN, Inf, Inf), false)
 %!assert (isequal (NaN, 1.0), false)
 %!assert (isequal (NaN, 1.0, 1.0), false)
