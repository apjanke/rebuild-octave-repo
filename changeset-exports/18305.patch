# HG changeset patch
# User Michael Goffioul <michael.goffioul@gmail.com>
# Date 1390077083 18000
#      Sat Jan 18 15:31:23 2014 -0500
# Node ID 81c1edd70bfd98e14305a8e6737e00a388de2567
# Parent  b0e8cc67639664531acc338b78a07722802e401a
Allow base classes to access protected members of derived classes.

* ov-classdef.cc (check_access): New members meth_name, prop_name and
is_prop_set. Allow a class to access protected methods/properties from
derived classes as long their are known and accessible from the base
class.
(cdef_method::cdef_method_rep::check_access): Use new arguments of
check_access.
(cdef_property::cdef_property_rep::check_get_access,
cdef_property::cdef_property_rep::check_set_access): Likewise.

diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -300,17 +300,20 @@ get_class_context (void)
 {
   std::string dummy_string;
   bool dummy_bool;
 
   return get_class_context (dummy_string, dummy_bool);
 }
 
 static bool
-check_access (const cdef_class& cls, const octave_value& acc)
+check_access (const cdef_class& cls, const octave_value& acc,
+              const std::string& meth_name = std::string (),
+              const std::string& prop_name = std::string (),
+              bool is_prop_set = false)
 {
   if (acc.is_string ())
     {
       std::string acc_s = acc.string_value ();
 
       if (acc_s == "public")
         return true;
 
@@ -319,17 +322,57 @@ check_access (const cdef_class& cls, con
       // The access is private or protected, this requires a
       // valid class context.
 
       if (! error_state && ctx.ok ())
         {
           if (acc_s == "private")
             return (ctx == cls);
           else if (acc_s == "protected")
-            return is_superclass (cls, ctx);
+            {
+              if (is_superclass (cls, ctx))
+                // Calling a protected method in a superclass.
+                return true;
+              else if (is_strict_superclass (ctx, cls))
+                {
+                  // Calling a protected method or property in a derived class.
+                  // This is only allowed if the context class knows about it
+                  // and has access to it.
+
+                  if (! meth_name.empty ())
+                    {
+                      cdef_method m = ctx.find_method (meth_name);
+
+                      if (m.ok ())
+                        return check_access (ctx, m.get ("Access"), meth_name);
+
+                      return false;
+                    }
+                  else if (! prop_name.empty ())
+                    {
+                      cdef_property p = ctx.find_property (prop_name);
+
+                      if (p.ok ())
+                        {
+                          octave_value p_access = p.get (is_prop_set ?
+                                                         "SetAccess" :
+                                                         "GetAccess");
+
+                          return check_access (ctx, p_access, meth_name,
+                                               prop_name, is_prop_set);
+                        }
+
+                      return false;
+                    }
+                  else
+                    panic_impossible ();
+                }
+
+              return false;
+            }
           else
             panic_impossible ();
         }
     }
   else if (acc.is_cell ())
     {
       Cell acc_c = acc.cell_value ();
 
@@ -2885,28 +2928,30 @@ cdef_property::cdef_property_rep::set_va
 }
 
 bool
 cdef_property::cdef_property_rep::check_get_access (void) const
 {
   cdef_class cls (to_cdef (get ("DefiningClass")));
 
   if (! error_state)
-    return ::check_access (cls, get ("GetAccess"));
+    return ::check_access (cls, get ("GetAccess"), std::string (),
+                           get_name (), false);
 
   return false;
 }
 
 bool
 cdef_property::cdef_property_rep::check_set_access (void) const
 {
   cdef_class cls (to_cdef (get ("DefiningClass")));
 
   if (! error_state)
-    return ::check_access (cls, get ("SetAccess"));
+    return ::check_access (cls, get ("SetAccess"), std::string (),
+                           get_name (), true);
 
   return false;
 }
 
 void
 cdef_method::cdef_method_rep::check_method (void)
 {
   if (is_external ())
@@ -3033,17 +3078,17 @@ cdef_method::cdef_method_rep::is_constru
 }
 
 bool
 cdef_method::cdef_method_rep::check_access (void) const
 {
   cdef_class cls (to_cdef (get ("DefiningClass")));
 
   if (! error_state)
-    return ::check_access (cls, get ("Access"));
+    return ::check_access (cls, get ("Access"), get_name ());
 
   return false;
 }
 
 octave_value_list
 cdef_method::cdef_method_rep::meta_subsref
   (const std::string& type, const std::list<octave_value_list>& idx,
    int nargout)
