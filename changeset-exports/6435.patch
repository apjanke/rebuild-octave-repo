# HG changeset patch
# User dbateman
# Date 1174659422 0
#      Fri Mar 23 14:17:02 2007 +0000
# Node ID 71888a0ab04073715db8c696b6b7fe38f3d820a3
# Parent  7caa5942d4dae89d8de578d497ce05a4f6ddda02
[project @ 2007-03-23 14:17:02 by dbateman]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2007-03-23  David Bateman  <dbateman@free.fr>
+
+	* oct-rand.cc (octave_rand::seed): Seed differently for big and
+	little endian.
+
 2007-03-15  John W. Eaton  <jwe@octave.org>
 
 	* lo-mappers.cc (acos): Use formula similar to what we use for asin.
 	From Alexander Barth <abarth@marine.usf.edu>.
 
 2007-03-12  John W. Eaton  <jwe@octave.org>
 
 	* oct-inttypes.h (octave_int::octave_int (double)):
diff --git a/liboctave/oct-rand.cc b/liboctave/oct-rand.cc
--- a/liboctave/oct-rand.cc
+++ b/liboctave/oct-rand.cc
@@ -31,16 +31,17 @@ 02110-1301, USA.
 #include "lo-error.h"
 #include "lo-mappers.h"
 #include "oct-rand.h"
 #include "oct-time.h"
 #include "data-conv.h"
 #include "randmtzig.h"
 #include "randpoisson.h"
 #include "randgamma.h"
+#include "mach-info.h"
 
 // Possible distributions of random numbers.  This was handled with an
 // enum, but unwind_protecting that doesn't work so well.
 #define uniform_dist 1
 #define normal_dist 2
 #define expon_dist 3
 #define poisson_dist 4
 #define gamma_dist 5
@@ -147,31 +148,57 @@ maybe_initialize (void)
 double
 octave_rand::seed (void)
 {
   if (! old_initialized)
     do_old_initialization ();
 
   union d2i { double d; octave_idx_type i[2]; };
   union d2i u;
-  F77_FUNC (getsd, GETSD) (u.i[0], u.i[1]);
+    
+  oct_mach_info::float_format ff = oct_mach_info::native_float_format ();
+
+  switch (ff)
+    {
+    case oct_mach_info::flt_fmt_ieee_big_endian:
+      F77_FUNC (getsd, GETSD) (u.i[1], u.i[0]);
+      break;
+    default:
+      F77_FUNC (getsd, GETSD) (u.i[0], u.i[1]);
+      break;
+    }
+
   return u.d;
 }
 
 void
 octave_rand::seed (double s)
 {
   use_old_generators = true;
   maybe_initialize ();
 
+  int i0, i1;
   union d2i { double d; octave_idx_type i[2]; };
   union d2i u;
   u.d = s;
-  int i0 = force_to_fit_range (u.i[0], 1, 2147483563);
-  int i1 = force_to_fit_range (u.i[1], 1, 2147483399);
+
+  oct_mach_info::float_format ff = oct_mach_info::native_float_format ();
+
+  switch (ff)
+    {
+    case oct_mach_info::flt_fmt_ieee_big_endian:
+      i1 = force_to_fit_range (u.i[0], 1, 2147483563);
+      i0 = force_to_fit_range (u.i[1], 1, 2147483399);
+      break;
+    default:
+      i0 = force_to_fit_range (u.i[0], 1, 2147483563);
+      i1 = force_to_fit_range (u.i[1], 1, 2147483399);
+      break;
+    }
+
   F77_FUNC (setsd, SETSD) (i0, i1);
 }
 
 ColumnVector
 octave_rand::state (void)
 {
   ColumnVector s (MT_N + 1);
   if (! new_initialized)
