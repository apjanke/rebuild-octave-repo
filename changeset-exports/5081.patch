# HG changeset patch
# User jwe
# Date 1100704501 0
#      Wed Nov 17 15:15:01 2004 +0000
# Node ID 273205761b4d8c664b8647d68e13f25b584ccf9e
# Parent  7929486ef2ed8d212c412c48504de7ae481657f6
[project @ 2004-11-17 15:15:00 by jwe]

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -1929,29 +1929,37 @@ Array<T>::value (void)
 }
 
 template <class T>
 Array<T>
 Array<T>::index (idx_vector& idx_arg, int resize_ok, const T& rfv) const
 {
   Array<T> retval;
 
-  switch (ndims ())
+  dim_vector dv = idx_arg.orig_dimensions ();
+
+  if (dv.length () > 2 || ndims () > 2)
+    retval = indexN (idx_arg, resize_ok, rfv);
+  else
     {
-    case 1:
-      retval = index1 (idx_arg, resize_ok, rfv);
-      break;
-
-    case 2:
-      retval = index2 (idx_arg, resize_ok, rfv);
-      break;
-
-    default:
-      retval = indexN (idx_arg, resize_ok, rfv);
-      break;
+      switch (ndims ())
+	{
+	case 1:
+	  retval = index1 (idx_arg, resize_ok, rfv);
+	  break;
+
+	case 2:
+	  retval = index2 (idx_arg, resize_ok, rfv);
+	  break;
+
+	default:
+	  (*current_liboctave_error_handler)
+	    ("invalid array (internal error)");
+	  break;
+	}
     }
 
   return retval;
 }
 
 template <class T>
 Array<T>
 Array<T>::index1 (idx_vector& idx_arg, int resize_ok, const T& rfv) const
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2004-11-17  John W. Eaton  <jwe@octave.org>
+
+	* Array.cc (Array<T>::index): Call generic N-d indexing function
+	if idx_arg is N-d.
+
 2004-11-09  David Bateman  <dbateman@free.fr>
 
 	* dNDArray.cc (concat): Delete.
 	(NDArray::concat): New methods.
 	* dNDArray.h: Provide decls.
 
 	* CNDArray.cc (concat): Delete.
 	(ComplexNDArray::concat): New methods.
diff --git a/src/pt-arg-list.cc b/src/pt-arg-list.cc
--- a/src/pt-arg-list.cc
+++ b/src/pt-arg-list.cc
@@ -124,17 +124,21 @@ DEFCONSTFUN (__end__, , ,
   if (indexed_object)
     {
       dim_vector dv = indexed_object->dims ();
 
       switch (index_position)
 	{
 	case -1:
 	  {
-	    int numel = indexed_object->numel ();
+	    // We want numel = prod (size ()) here, so dont' use
+	    // index_object->numel () as that may be different (it is
+	    // the number of nonzero elements for sparse arrays).
+
+	    int numel = dv.numel ();
 
 	    if (numel < 0)
 	      {
 		std::string dv_str = dv.str ();
 		::error ("invalid use of end: (index 1, dims %s)",
 			 dv_str.c_str ());
 	      }
 	    else
