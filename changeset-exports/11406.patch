# HG changeset patch
# User Tatsuro Matsuoka <tmacchant@yahoo.co.jp>
# Date 1293008399 18000
#      Wed Dec 22 03:59:59 2010 -0500
# Node ID a7e73f903ea683d8bd722865e130818f74fce5ba
# Parent  51b6193e90bb52d30dcec0cbd17f0258c4e6577a
nonlin.txi: correct docs for using Jacobian with fsolve

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,12 @@
+2010-12-22  Tatsuro Matsuoka  <tmacchant@yahoo.co.jp>
+
+	* nonlin.txi: Correct docs for using Jacobian with fsolve.
+
 2010-12-22  Judd Storrs <jstorrs@gmail.com>
 
 	* interpreter/expr.txi: Insert operator function docstrings.
 	* interpreter/oop.txi: Remove conflicting anchors for operator
 	functions. Add cindex entries for overloaded operators. Add
 	overloads to opindex.
 	* interpreter/numbers.txi: Fix colon opindex.
 
diff --git a/doc/interpreter/nonlin.txi b/doc/interpreter/nonlin.txi
--- a/doc/interpreter/nonlin.txi
+++ b/doc/interpreter/nonlin.txi
@@ -63,16 +63,17 @@ Here is a complete example.  To solve th
 
 @noindent
 you first need to write a function to compute the value of the given
 function.  For example:
 
 @example
 @group
 function y = f (x)
+  y = zeros (2, 1);
   y(1) = -2*x(1)^2 + 3*x(1)*x(2)   + 4*sin(x(2)) - 6;
   y(2) =  3*x(1)^2 - 2*x(1)*x(2)^2 + 3*cos(x(1)) + 4;
 endfunction
 @end group
 @end example
 
 Then, call @code{fsolve} with a specified initial condition to find the
 roots of the system of equations.  For example, given the function
@@ -132,28 +133,34 @@ analytically as
                -4 x_1 x_2                     \cr }\right]
 $$
 @end tex
 and compute it with the following Octave function
 @end iftex
 
 @example
 @group
-function J = jacobian(x)
-  J(1,1) =  3*x(2) - 4*x(1);
-  J(1,2) =  4*cos(x(2)) + 3*x(1);
-  J(2,1) = -2*x(2)^2 - 3*sin(x(1)) + 6*x(1);
-  J(2,2) = -4*x(1)*x(2);
+function [y, jac] = f (x)
+  y = zeros (2, 1);
+  y(1) = -2*x(1)^2 + 3*x(1)*x(2)   + 4*sin(x(2)) - 6;
+  y(2) =  3*x(1)^2 - 2*x(1)*x(2)^2 + 3*cos(x(1)) + 4;
+  if (nargout == 2)
+    jac = zeros (2, 2);
+    jac(1,1) =  3*x(2) - 4*x(1);
+    jac(1,2) =  4*cos(x(2)) + 3*x(1);
+    jac(2,1) = -2*x(2)^2 - 3*sin(x(1)) + 6*x(1);
+    jac(2,2) = -4*x(1)*x(2);
+  endif
 endfunction
 @end group
 @end example
 
 @noindent
 The Jacobian can then be used with the following call to @code{fsolve}:
 
 @example
-[x, fval, info] = fsolve (@{@@f, @@jacobian@}, [1; 2]);
+[x, fval, info] = fsolve (@@f, [1; 2], optimset ("jacobian", "on"));
 @end example
 
 @noindent
 which gives the same solution as before.
 
 @DOCSTRING(fzero)
