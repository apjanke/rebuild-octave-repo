# HG changeset patch
# User jwe
# Date 1094671891 0
#      Wed Sep 08 19:31:31 2004 +0000
# Node ID bfcd251499b27a23943d7e69e32603c2ebf70271
# Parent  80842ad3f85c473bf8cca7d1409f111b7b500734
[project @ 2004-09-08 19:31:31 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,24 +1,26 @@
 2004-09-08  John W. Eaton  <jwe@octave.org>
 
+	* error.cc (pr_where): Do a better job of printing location info.
+
+	* input.cc (get_user_input): Print location info before the debug
+	prompt.  From Keith Goodman <kwgoodman@gmail.com>.
+
 	* ov-usr-fcn.cc (octave_user_function::do_multi_index_op):
 	Save and set curr_caller_function and curr_caller_statement here.
 	* ov-mapper.cc (octave_mapper::do_multi_index_op): Likewise.
 	* ov-builtin.cc (octave_builtin::do_multi_index_op): Likewise.
 
 	* pt-stmt.cc (curr_caller_statement): New variable.
 	* pt-stmt.h: Provide decl.	
 
 	* toplev.cc (curr_caller_function): New variable.
 	* toplev.h: Provide decl.
 
-	* input.cc (get_user_input): Print location info before the debug
-	prompt.  From Keith Goodman <kwgoodman@gmail.com>.
-
 	* pt-arg-list.cc (convert_to_const_vector):
 	Unwind-protect index_position before modifying it.
 	Don't protect and set index_position unless stash_object is true.
 
 2004-09-08  David Bateman  <dbateman@free.fr>
 
 	* ov-fcn-inline.cc (octave_fcn_inline::save_ascii,
 	octave_fcn_inline::load_ascii, octave_fcn_inline::save_binary,
diff --git a/src/error.cc b/src/error.cc
--- a/src/error.cc
+++ b/src/error.cc
@@ -313,33 +313,58 @@ pr_where_1 (const char *fmt, ...)
   va_end (args);
 }
 
 static void
 pr_where (const char *name, bool print_code = true)
 {
   if (curr_statement)
     {
-      const char *f_nm = 0;
+      std::string nm;
 
-      if (curr_function)
+      int l = -1;
+      int c = -1;
+
+      octave_function *fcn = curr_function;
+
+      if (fcn)
 	{
-	  std::string fcn_name = curr_function->name ();
-	  std::string file_name = curr_function->fcn_file_name ();
+	  nm = fcn->name ();
+
+	  if (nm == "error" || nm == "warning")
+	    fcn = curr_caller_function;
+
+	  if (fcn)
+	    {
+	      nm = fcn->fcn_file_name ();
 
-	  f_nm = file_name.empty () ? fcn_name.c_str () : file_name.c_str ();
+	      if (nm.empty ())
+		nm = fcn->name ();
+
+	      if (curr_statement)
+		{
+		  l = curr_statement->line ();
+		  c = curr_statement->column ();
+		}
+	    }
 	}
 
-      int l = curr_statement->line ();
-      int c = curr_statement->column ();
-
-      if (f_nm)
-	pr_where_1 ("%s: in %s near line %d, column %d:", name, f_nm, l, c);
+      if (nm.empty ())
+	{
+	  if (l > 0 && c > 0)
+	    pr_where_1 ("%s: near line %d, column %d:", name, l, c);
+	}
       else
-	pr_where_1 ("%s: near line %d, column %d:", name, l, c);
+	{
+	  if (l > 0 && c > 0)
+	    pr_where_1 ("%s: in %s near line %d, column %d:",
+			name, nm.c_str (), l, c);
+	  else
+	    pr_where_1 ("%s: in %s", name, nm.c_str ());
+	}
 
       if (print_code)
 	{
 	  // XXX FIXME XXX -- Note that the column number is probably
 	  // not going to mean much here since the code is being
 	  // reproduced from the parse tree, and we are only showing
 	  // one statement even if there were multiple statements on
 	  // the original source line.
