# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1449696912 18000
#      Wed Dec 09 16:35:12 2015 -0500
# Node ID 14cd86258b3d53c8b6fb5093e7e8e8318a80f59a
# Parent  27b333c88c8ed167a11aac747a58bdfd757a3986
use 'invalid' instead of 'bogus' in source files

* tips.txi, ls-oct-text.cc, lex.ll, interp1.m, voronoi.m,
octave/TeXtranslator.java, test.m, build-sparse-tests.sh:
Use 'invalid' instead of 'bogus'.

diff --git a/doc/interpreter/tips.txi b/doc/interpreter/tips.txi
--- a/doc/interpreter/tips.txi
+++ b/doc/interpreter/tips.txi
@@ -184,18 +184,17 @@ author of the library.
 @example
 ## Author: John W. Eaton <jwe@@octave.org>
 @end example
 
 @item Maintainer
 This line should contain a single name/address as in the Author line, or
 an address only, or the string @samp{jwe}.  If there is no maintainer
 line, the person(s) in the Author field are presumed to be the
-maintainers.  The example above is mildly bogus because the maintainer
-line is redundant.
+maintainers.
 
 The idea behind the @samp{Author} and @samp{Maintainer} lines is to make
 possible a function to ``send mail to the maintainer'' without
 having to mine the name out by hand.
 
 Be sure to surround the network address with @samp{<@dots{}>} if
 you include the person's full name as well as the network address.
 
diff --git a/libinterp/corefcn/ls-oct-text.cc b/libinterp/corefcn/ls-oct-text.cc
--- a/libinterp/corefcn/ls-oct-text.cc
+++ b/libinterp/corefcn/ls-oct-text.cc
@@ -246,17 +246,17 @@ read_text_data (std::istream& is, const 
         error ("load: empty name keyword or no data found in file '%s'",
                filename.c_str ());
 
       return std::string ();
     }
 
   if (! (name == ".nargin." || name == ".nargout."
          || name == CELL_ELT_TAG || valid_identifier (name)))
-    error ("load: bogus identifier '%s' found in file '%s'",
+    error ("load: invalid identifier '%s' found in file '%s'",
            name.c_str (), filename.c_str ());
 
   // Look for type keyword.
 
   std::string tag = extract_keyword (is, "type");
 
   if (! tag.empty ())
     {
diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -335,17 +335,17 @@ NUMREAL (({D}{D_}*\.?{D_}*{EXPON}?)|(\.{
 NUMBER  ({NUMREAL}|{NUMHEX}|{NUMBIN})
 
 ANY_EXCEPT_NL [^\r\n]
 ANY_INCLUDING_NL (.|{NL})
 
 %%
 
 %{
-// Make script and function files start with a bogus token. This makes
+// Make script and function files start with an invalid token. This makes
 // the parser go down a special path.
 %}
 
 <INPUT_FILE_START>{ANY_INCLUDING_NL} {
     curr_lexer->lexer_debug ("<INPUT_FILE_START>{ANY_INCLUDING_NL}");
 
     curr_lexer->xunput (yytext[0]);
 
diff --git a/scripts/general/interp1.m b/scripts/general/interp1.m
--- a/scripts/general/interp1.m
+++ b/scripts/general/interp1.m
@@ -788,10 +788,10 @@ endfunction
 %!error <minimum of 2 points required> interp1 (1,1,1, "*linear")
 %!error <minimum of 2 points required> interp1 (1,1,1, "previous")
 %!error <minimum of 2 points required> interp1 (1,1,1, "*previous")
 %!warning <multiple discontinuities> interp1 ([1 1 1 2], [1 2 3 4], 1);
 %!error <discontinuities not supported> interp1 ([1 1],[1 2],1, "next")
 %!error <discontinuities not supported> interp1 ([1 1],[1 2],1, "pchip")
 %!error <discontinuities not supported> interp1 ([1 1],[1 2],1, "cubic")
 %!error <discontinuities not supported> interp1 ([1 1],[1 2],1, "spline")
-%!error <invalid method 'bogus'> interp1 (1:2,1:2,1, "bogus")
+%!error <invalid method 'invalid'> interp1 (1:2,1:2,1, "invalid")
 
diff --git a/scripts/geometry/voronoi.m b/scripts/geometry/voronoi.m
--- a/scripts/geometry/voronoi.m
+++ b/scripts/geometry/voronoi.m
@@ -204,13 +204,13 @@ endfunction
 %! x = [0 1];  y = [1 0];
 %! [vx, vy] = voronoi (x,y);
 %! assert (vx, [-0.7; 1.7], eps);
 %! assert (vy, [-0.7; 1.7], eps);
 
 ## Input validation tests
 %!error voronoi ()
 %!error voronoi (ones (3,1))
-%!error voronoi (ones (3,1), ones (3,1), "bogus1", "bogus2", "bogus3")
+%!error voronoi (ones (3,1), ones (3,1), "invalid1", "invalid2", "invalid3")
 %!error <HAX argument must be an axes object> voronoi (0, ones (3,1), ones (3,1))
 %!error <X and Y must be vectors of the same length> voronoi (ones (3,1), ones (4,1))
 %!error <minimum of 2 points needed> voronoi (2.5, 3.5)
 
diff --git a/scripts/java/org/octave/TeXtranslator.java b/scripts/java/org/octave/TeXtranslator.java
--- a/scripts/java/org/octave/TeXtranslator.java
+++ b/scripts/java/org/octave/TeXtranslator.java
@@ -245,17 +245,17 @@ public class TeXtranslator
                         // backslash
                         sb.replace (i, i + 2, "\\");
                       }
                   }
 
                 // 26 08 2010 MH
                 // advance i to avoid deadlock in case of incorrect escape
                 // sequences like \\\\alpha (double backslash) or
-                // \\bogus (unknown escape sequence)
+                // \\invalid (unknown escape sequence)
                 i++;
               }
           }
       }
     while (i > -1);
     // finall: remove trailing blank
     return (sb.substring (0, sb.length () - 1).toString ());
   }
diff --git a/scripts/testfun/test.m b/scripts/testfun/test.m
--- a/scripts/testfun/test.m
+++ b/scripts/testfun/test.m
@@ -795,24 +795,24 @@ endfunction
 %! assert (kron (A, B), res);
 %!shared  # clear out shared variables
 
 ## Now verify test() itself
 
 ## Test 'fail' keyword
 %!fail ("test", "Invalid call to test")  # no args, generates usage()
 %!fail ("test (1,2,3,4)", "usage.*test") # too many args, generates usage()
-%!fail ('test ("test", "bogus")', "unknown flag")  # incorrect args
+%!fail ('test ("test", "invalid")', "unknown flag")  # incorrect args
 %!fail ('garbage','garbage.*undefined')  # usage on nonexistent function should be
 
 ## Test 'error' keyword
 %!error test              # no args, generates usage()
 %!error test (1,2,3,4)    # too many args, generates usage()
-%!error <unknown flag> test ("test", "bogus"); # incorrect args
-%!error test ("test", "bogus");  # test without pattern
+%!error <unknown flag> test ("test", "invalid"); # incorrect args
+%!error test ("test", "invalid");  # test without pattern
 %!error <'garbage' undefined> garbage; # usage on nonexistent function is error
 
 ## Test 'warning' keyword
 %!warning warning ("warning message");   # no pattern
 %!warning <warning message> warning ("warning message");   # with pattern
 
 ## Test 'shared' keyword
 %!shared a                # create a shared variable
@@ -868,17 +868,17 @@ endfunction
 
 %!test
 %! [code, idx] = test ("test", "grabdemo");
 %! assert (numel (idx), 4);
 %! assert (code(idx(3):end),
 %!         " a=3                  # single line demo blocks work too");
 
 ## Test 'testif' keyword
-%!testif HAVE_BOGUS_FEATURE
+%!testif HAVE_INVALID_FEATURE
 %! error ("testif executed code despite not having feature");
 
 ## Test 'xtest' keyword
 %!xtest
 %! assert (1, 1);      # Test passes
 %!xtest
 %! assert (0, 1);      # Test fails
 
@@ -893,17 +893,17 @@ endfunction
 %!error <second argument must be a string> test ("ls", 1)
 %!error test ([], "normal")
 
 ## All of the following tests should fail.  These tests should
 ## be disabled unless you are developing test() since users don't
 ## like to be presented with expected failures.  I use '% !' to disable.
 % !test   error("---------Failure tests.  Use test('test','verbose',1)");
 % !test   assert([a,b,c],[1,3,6]);   # variables have wrong values
-% !bogus                     # unknown block type
+% !invalid                   # unknown block type
 % !error  toeplitz([1,2,3]); # correct usage
 % !test   syntax errors)     # syntax errors fail properly
 % !shared garbage in         # variables must be comma separated
 % !error  syntax++error      # error test fails on syntax errors
 % !error  "succeeds.";       # error test fails if code succeeds
 % !error <wrong pattern> error("message")  # error pattern must match
 % !demo   with syntax error  # syntax errors in demo fail properly
 % !shared a,b,c
diff --git a/test/build-sparse-tests.sh b/test/build-sparse-tests.sh
--- a/test/build-sparse-tests.sh
+++ b/test/build-sparse-tests.sh
@@ -179,17 +179,17 @@ cat <<EOF
 %! assert (inv (sparse ([1,1;1,1+i])), sparse ([1-1i,1i;1i,-1i]), 10*eps);
 %#!error inv ( sparse ([1,1;1,1]  ) );
 %#!error inv ( sparse ([0,0;0,1]  ) );
 %#!error inv ( sparse ([0,0;0,1+i]) );
 %#!error inv ( sparse ([0,0;0,0]  ) );
 
 %% error handling in constructor
 %!error sparse (1,[2,3],[1,2,3])
-%!error sparse ([1,1],[1,1],[1,2],3,3,"bogus")
+%!error sparse ([1,1],[1,1],[1,2],3,3,"invalid")
 %!error sparse ([1,3],[1,-4],[3,5],2,2)
 %!error sparse ([1,3],[1,-4],[3,5i],2,2)
 %!error sparse (-1,-1,1)
 EOF
 }
 
 
 gen_specific_tests() {
