# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1408464135 14400
#      Tue Aug 19 12:02:15 2014 -0400
# Node ID 1f36981ab323640e95cf6b5fbbfc0df3e42ffd5f
# Parent  9ef10e6a5987d840c4656d5f34825c0ee4e3535d
allow debugging messages in classdef code to be disabled

* ov-classdef.cc (DEBUG_TRACE): New macro.
Use DEBUG_TRACE to allow debugging messages to be disabled.
Use std::cerr instead of printf for debugging messages.

diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -40,16 +40,19 @@ along with Octave; see the file COPYING.
 #include "pt-stmt.h"
 #include "pt-walk.h"
 #include "singleton-cleanup.h"
 #include "symtab.h"
 #include "toplev.h"
 
 #include "Array.cc"
 
+// Define to 1 to enable debugging statements.
+#define DEBUG_TRACE 0
+
 static void
 gripe_method_access (const std::string& from, const cdef_method& meth)
 {
   octave_value acc = meth.get ("Access");
   std::string acc_s;
 
   if (acc.is_string ())
     acc_s = acc.string_value ();
@@ -1851,24 +1854,28 @@ bool cdef_object_scalar::is_partially_co
     if (! is_constructed_for (*lit))
       return false;
 
   return true;
 }
 
 handle_cdef_object::~handle_cdef_object (void)
 {
-  gnulib::printf ("deleting %s object (handle)\n",
-                  get_class ().get_name ().c_str ());
+#if DEBUG_TRACE
+  std::cerr << "deleting " << get_class ().get_name ()
+            << " object (handle)" << std::endl;
+#endif
 }
 
 value_cdef_object::~value_cdef_object (void)
 {
-  gnulib::printf ("deleting %s object (value)\n",
-                  get_class ().get_name ().c_str ());
+#if DEBUG_TRACE
+  std::cerr << "deleting " << get_class ().get_name ()
+            << " object (value)" << std::endl;
+#endif
 }
 
 cdef_class::cdef_class_rep::cdef_class_rep (const std::list<cdef_class>& superclasses)
      : cdef_meta_object_rep (), member_count (0), handle_class (false),
        object_count (0), meta (false)
 {
   put ("SuperClasses", to_ov (superclasses));
   implicit_ctor_list = superclasses;
@@ -2062,18 +2069,21 @@ cdef_class::cdef_class_rep::install_meth
                   if (! error_state)
                     {
                       std::list<cdef_class> explicit_ctor_list
                         = a.get_constructor_list ();
 
                       for (std::list<cdef_class>::const_iterator it = explicit_ctor_list.begin ();
                            ! error_state && it != explicit_ctor_list.end (); ++it)
                         {
-                          gnulib::printf ("explicit superclass constructor: %s\n",
-                                          it->get_name ().c_str ());
+#if DEBUG_TRACE
+                          std::cerr << "explicit superclass constructor: "
+                                    << it->get_name () << std::endl;
+#endif
+
                           implicit_ctor_list.remove (*it);
                         }
                     }
                 }
               else
                 ::error ("%s: invalid constructor output arguments",
                          meth.get_name ().c_str ());
             }
@@ -2379,23 +2389,31 @@ cdef_class::cdef_class_rep::meta_subsref
   size_t skip = 1;
 
   octave_value_list retval;
 
   switch (type[0])
     {
     case '(':
       // Constructor call
-      gnulib::printf ("constructor\n");
+
+#if DEBUG_TRACE
+      std::cerr << "constructor" << std::endl;
+#endif
+
       retval(0) = construct (idx.front ());
       break;
 
     case '.':
       // Static method, constant (or property?)
-      gnulib::printf ("static method/property\n");
+
+#if DEBUG_TRACE
+      std::cerr << "static method/property" << std::endl;
+#endif
+
       if (idx.front ().length () == 1)
         {
           std::string nm = idx.front ()(0).string_value ();
 
           if (! error_state)
             {
               cdef_method meth = find_method (nm);
 
@@ -2680,28 +2698,33 @@ cdef_class::make_meta_class (tree_classd
   cdef_class retval;
   std::string class_name, full_class_name;
 
   // Class creation
 
   class_name = full_class_name = t->ident ()->name ();
   if (! t->package_name ().empty ())
     full_class_name = t->package_name () + "." + full_class_name;
-  gnulib::printf ("class: %s\n", full_class_name.c_str ());
+
+#if DEBUG_TRACE
+  std::cerr << "class: " << full_class_name << std::endl;
+#endif
 
   std::list<cdef_class> slist;
 
   if (t->superclass_list ())
     {
       for (tree_classdef_superclass_list::iterator it = t->superclass_list ()->begin ();
            ! error_state && it != t->superclass_list ()->end (); ++it)
         {
           std::string sclass_name = (*it)->class_name ();
 
-          gnulib::printf ("superclass: %s\n", sclass_name.c_str ());
+#if DEBUG_TRACE
+          std::cerr << "superclass: " << sclass_name << std::endl;
+#endif
 
           cdef_class sclass = lookup_class (sclass_name);
 
           if (! error_state)
             {
               if (! sclass.get ("Sealed").bool_value ())
                 slist.push_back (sclass);
               else
@@ -2737,18 +2760,21 @@ cdef_class::make_meta_class (tree_classd
   if (t->attribute_list ())
     {
       for (tree_classdef_attribute_list::iterator it = t->attribute_list ()->begin ();
            it != t->attribute_list ()->end (); ++it)
         {
           std::string aname = (*it)->ident ()->name ();
           octave_value avalue = compute_attribute_value (*it);
 
-          gnulib::printf ("class attribute: %s = %s\n", aname.c_str (),
-                  attribute_value_to_string (*it, avalue).c_str ());
+#if DEBUG_TRACE
+          std::cerr << "class attribute: " << aname << " = "
+                    << attribute_value_to_string (*it, avalue) << std::endl;
+#endif
+
           retval.put (aname, avalue);
         }
     }
 
   tree_classdef_body* b = t->body ();
 
   if (b)
     {
@@ -2761,30 +2787,37 @@ cdef_class::make_meta_class (tree_classd
       // Method blocks
 
       std::list<tree_classdef_methods_block *> mb_list = b->methods_list ();
 
       for (tree_classdef_body::methods_list_iterator it = mb_list.begin ();
            it != mb_list.end (); ++it)
         {
           std::map<std::string, octave_value> amap;
-          gnulib::printf ("method block\n");
+
+#if DEBUG_TRACE
+          std::cerr << "method block" << std::endl;
+#endif
 
           // Method attributes
 
           if ((*it)->attribute_list ())
             {
               for (tree_classdef_attribute_list::iterator ait = (*it)->attribute_list ()->begin ();
                    ait != (*it)->attribute_list ()->end (); ++ait)
                 {
                   std::string aname = (*ait)->ident ()->name ();
                   octave_value avalue = compute_attribute_value (*ait);
 
-                  gnulib::printf ("method attribute: %s = %s\n", aname.c_str (),
-                                  attribute_value_to_string (*ait, avalue).c_str ());
+#if DEBUG_TRACE
+                  std::cerr << "method attribute: " << aname << " = "
+                            << attribute_value_to_string (*ait, avalue)
+                            << std::endl;
+#endif
+
                   amap[aname] = avalue;
                 }
             }
 
           // Methods
 
           if ((*it)->element_list ())
             {
@@ -2799,18 +2832,21 @@ cdef_class::make_meta_class (tree_classd
                       make_fcn_handle (*mit, full_class_name + ">" + mname);
                   else if (mprefix == "set.")
                     set_methods[mname.substr (4)] =
                       make_fcn_handle (*mit, full_class_name + ">" + mname);
                   else
                     {
                       cdef_method meth = make_method (retval, mname, *mit);
 
-                      gnulib::printf ("%s: %s\n", (mname == class_name ? "constructor" : "method"),
-                                      mname.c_str ());
+#if DEBUG_TRACE
+                      std::cerr << (mname == class_name ? "constructor" : "method")
+                                << ": " << mname << std::endl;
+#endif
+
                       for (std::map<std::string, octave_value>::iterator ait = amap.begin ();
                            ait != amap.end (); ++ait)
                         meth.put (ait->first, ait->second);
 
                       retval.install_method (meth);
                     }
                 }
             }
@@ -2861,30 +2897,37 @@ cdef_class::make_meta_class (tree_classd
       //        value expressions.
 
       std::list<tree_classdef_properties_block *> pb_list = b->properties_list ();
 
       for (tree_classdef_body::properties_list_iterator it = pb_list.begin ();
            it != pb_list.end (); ++it)
         {
           std::map<std::string, octave_value> amap;
-          gnulib::printf ("property block\n");
+
+#if DEBUG_TRACE
+          std::cerr << "property block" << std::endl;
+#endif
 
           // Property attributes
 
           if ((*it)->attribute_list ())
             {
               for (tree_classdef_attribute_list::iterator ait = (*it)->attribute_list ()->begin ();
                    ait != (*it)->attribute_list ()->end (); ++ait)
                 {
                   std::string aname = (*ait)->ident ()->name ();
                   octave_value avalue = compute_attribute_value (*ait);
 
-                  gnulib::printf ("property attribute: %s = %s\n", aname.c_str (),
-                          attribute_value_to_string (*ait, avalue).c_str ());
+#if DEBUG_TRACE
+                  std::cerr << "property attribute: " << aname << " = "
+                            << attribute_value_to_string (*ait, avalue)
+                            << std::endl;
+#endif
+
                   if (aname == "Access")
                     {
                       amap["GetAccess"] = avalue;
                       amap["SetAccess"] = avalue;
                     }
                   else
                     amap[aname] = avalue;
                 }
@@ -2896,23 +2939,31 @@ cdef_class::make_meta_class (tree_classd
             {
               for (tree_classdef_property_list::iterator pit = (*it)->element_list ()->begin ();
                    pit != (*it)->element_list ()->end (); ++pit)
                 {
                   std::string prop_name = (*pit)->ident ()->name ();
 
                   cdef_property prop = ::make_property (retval, prop_name);
 
-                  gnulib::printf ("property: %s\n", (*pit)->ident ()->name ().c_str ());
+#if DEBUG_TRACE
+                  std::cerr << "property: " << (*pit)->ident ()->name ()
+                            << std::endl;
+#endif
+
                   if ((*pit)->expression ())
                     {
                       octave_value pvalue = (*pit)->expression ()->rvalue1 ();
 
-                      gnulib::printf ("property default: %s\n",
-                              attribute_value_to_string (*pit, pvalue).c_str ());
+#if DEBUG_TRACE
+                      std::cerr << "property default: "
+                                << attribute_value_to_string (*pit, pvalue)
+                                << std::endl;
+#endif
+
                       prop.put ("DefaultValue", pvalue);
                     }
 
                   // Install property attributes. This is done before assigning the
                   // property accessors so we can do validationby using cdef_property
                   // methods.
 
                   for (std::map<std::string, octave_value>::iterator ait = amap.begin ();
@@ -3439,17 +3490,19 @@ cdef_package::cdef_package_rep::meta_sub
     {
     case '.':
       if (idx.front ().length () == 1)
         {
           std::string nm = idx.front ()(0).string_value ();
 
           if (! error_state)
             {
-              gnulib::printf ("meta.package query: %s\n", nm.c_str ());
+#if DEBUG_TRACE
+              std::cerr << "meta.package query: " << nm << std::endl;
+#endif
 
               octave_value o = find (nm);
 
               if (o.is_defined ())
                 {
                   if (o.is_function ())
                     {
                       octave_function* fcn = o.function_value ();
@@ -3856,19 +3909,21 @@ Undocumented internal function.\n\
 DEFUN (__meta_class_query__, args, /* nargout */,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} __meta_class_query__ ()\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
+#if DEBUG_TRACE
   std::cerr << "__meta_class_query__ ("
             << args(0).string_value () << ")"
             << std::endl;
+#endif
 
   if (args.length () == 1)
     {
       std::string cls = args(0).string_value ();
 
       if (! error_state)
         retval = to_ov (lookup_class (cls));
       else
