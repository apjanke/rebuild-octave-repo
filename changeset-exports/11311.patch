# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1291405569 28800
#      Fri Dec 03 11:46:09 2010 -0800
# Node ID 3bddc4ea8141ebfd3aa9671e7079a52c5600a2e7
# Parent  ffbcb0edfbdad83059b9c534cad2b058998a77b9
Fix bug #31734 where certain indices caused sparse matrices to segfault.

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2010-11-25  John W. Eaton  <jwe@octave.org>
+
+	* Sparse.cc (Sparse<T>::assign): Use correct endpoint for
+	destination range when making room for new elements. 
+
 2010-11-23  John W. Eaton  <jwe@octave.org>
 
 	* oct-md5.cc (oct_md5_result_to_str): Avoid buffer overrun in
 	call to sprintf.  Replace loop with a single call to sprintf.
 
 2010-11-23  John W. Eaton  <jwe@octave.org>
 
 	* oct-md5.cc (oct_md5_file): Close file after reading.
diff --git a/liboctave/Sparse.cc b/liboctave/Sparse.cc
--- a/liboctave/Sparse.cc
+++ b/liboctave/Sparse.cc
@@ -1742,20 +1742,20 @@ Sparse<T>::assign (const idx_vector& idx
 
               if (new_nz >= nz && new_nz <= capacity ())
                 {
                   // Adding/overwriting elements, enough capacity allocated.
 
                   if (new_nz > nz)
                     {
                       // Make room first.
-                      std::copy_backward (data () + ui, data () + nz, data () + li + rnz);
-                      std::copy_backward (ridx () + ui, ridx () + nz, ridx () + li + rnz);
+                      std::copy_backward (data () + ui, data () + nz, data () + nz + rnz);
+                      std::copy_backward (ridx () + ui, ridx () + nz, ridx () + nz + rnz);
                     }
-
+                  
                   // Copy data and adjust indices from rhs.
                   copy_or_memcpy (rnz, rhs.data (), data () + li);
                   mx_inline_add (rnz, ridx () + li, rhs.ridx (), lb);
                 }
               else
                 {
                   // Clearing elements or exceeding capacity, allocate afresh
                   // and paste pieces.
