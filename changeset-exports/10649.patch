# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1274697703 -7200
#      Mon May 24 12:41:43 2010 +0200
# Node ID 64472dd485172424afe66aad70b21a9d5bc45e2a
# Parent  bc4eb29e0cb4bf92005a13816aa469f6e8e227da
cosmetic changes in Cell interface

diff --git a/src/Cell.cc b/src/Cell.cc
--- a/src/Cell.cc
+++ b/src/Cell.cc
@@ -191,47 +191,43 @@ Cell::index (const octave_value_list& id
                                                 resize_fill_value ());
       }
       break;
     }
 
   return retval;
 }
 
-Cell&
+void
 Cell::assign (const octave_value_list& idx_arg, const Cell& rhs,
               const octave_value& fill_val)
 
 {
   octave_idx_type len = idx_arg.length ();
 
   Array<idx_vector> ra_idx (len, 1);
 
   for (octave_idx_type i = 0; i < len; i++)
     ra_idx(i) = idx_arg(i).index_vector ();
 
   Array<octave_value>::assign (ra_idx, rhs, fill_val);
-
-  return *this;
 }
 
-Cell&
+void
 Cell::delete_elements (const octave_value_list& idx_arg)
 
 {
   octave_idx_type len = idx_arg.length ();
 
   Array<idx_vector> ra_idx (len, 1);
 
   for (octave_idx_type i = 0; i < len; i++)
     ra_idx.xelem (i) = idx_arg(i).index_vector ();
 
   Array<octave_value>::delete_elements (ra_idx);
-
-  return *this;
 }
 
 octave_idx_type
 Cell::nnz (void) const
 {
   gripe_wrong_type_arg ("nnz", "cell array");
   return -1;
 }
diff --git a/src/Cell.h b/src/Cell.h
--- a/src/Cell.h
+++ b/src/Cell.h
@@ -69,22 +69,28 @@ public:
 
   Cell (const Cell& c)
     : Array<octave_value> (c) { }
 
   bool is_cellstr (void) const;
 
   Array<std::string> cellstr_value (void) const;
 
+  using Array<octave_value>::index;
+
   Cell index (const octave_value_list& idx, bool resize_ok = false) const;
 
-  Cell& delete_elements (const octave_value_list& idx);
+  using Array<octave_value>::delete_elements;
+
+  void delete_elements (const octave_value_list& idx);
 
-  Cell& assign (const octave_value_list& idx, const Cell& rhs,
-                const octave_value& fill_val = resize_fill_value ());
+  using Array<octave_value>::assign;
+
+  void assign (const octave_value_list& idx, const Cell& rhs,
+               const octave_value& fill_val = resize_fill_value ());
 
   Cell reshape (const dim_vector& new_dims) const
     { return Array<octave_value>::reshape (new_dims); }
 
   octave_idx_type nnz (void) const;
 
   Cell column (octave_idx_type i) const;
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2010-05-24  Jaroslav Hajek  <highegg@gmail.com>
+
+	* Cell.h (Cell::index, Cell::assign, Cell::delete_elements):
+	Make signatures consistent with inherited overloads. Import inherited
+	overloads to class's scope.
+	* oct-map.cc (Octave_map::maybe_delete_elements): Simplify.
+
 2010-05-20  John W. Eaton  <jwe@octave.org>
 
 	* utils.cc (Ffile_in_path, Ffile_in_loadpath): If no file is
 	found, return empty character string instead of empty matrix.
 
 2010-05-20  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/onCleanup.cc (octave_oncleanup::load_ascii,
diff --git a/src/oct-map.cc b/src/oct-map.cc
--- a/src/oct-map.cc
+++ b/src/oct-map.cc
@@ -338,17 +338,17 @@ Octave_map::maybe_delete_elements (const
   octave_idx_type len = t_keys.length ();
 
   if (len > 0)
     {
       for (octave_idx_type i = 0; i < len; i++)
         {
           std::string k = t_keys[i];
 
-          map[k] = contents(k).delete_elements (idx);
+          contents(k).delete_elements (idx);
 
           if (error_state)
             break;
         }
 
       if (!error_state)
         dimensions = contents(t_keys[0]).dims();
     }
