# HG changeset patch
# User jwe
# Date 980785928 0
#      Mon Jan 29 16:32:08 2001 +0000
# Node ID f0e7c832e0e261bada2f0a04152f0625ccb48a2b
# Parent  df962bbf17888ab75421ad190177f0b3dd3b020d
[project @ 2001-01-29 16:32:08 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,12 @@
+2001-01-29  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* lo-cutils.c: Don't delcare strptime.
+
 2001-01-02  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* CMatrix.cc (operator * (const ComplexMatrix&, const ComplexMatrix&):
 	Return correct size result for empty matrix case.
 
 2000-12-15  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* lo-mappers.cc (xmin (const Complex&, const Complex& y):
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,22 @@
+2001-01-29  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* Map.h, Map.cc (CHMap<C>::operator = (const CHMap&)): New function.
+	(Map<C>::operator = (const Map&)): Likewise.
+	(Map<C> (const Map&)): Likewise.
+
+	* OPERATORS/op-cm-cs.cc, OPERATORS/op-cm-s.cc,
+	OPERATORS/op-m-cs.cc, OPERATORS/op-m-s.cc:
+	Make ldiv operator work for row vector by scalar ops.
+
+	* OPERATORS/op-cs-cm.cc, OPERATORS/op-cs-m.cc,
+	OPERATORS/op-s-cm.cc, OPERATORS/op-s-m.cc:
+	Make div operator work for scalar by column vector ops.
+
 2001-01-17  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* parse.y (safe_fclose): Discard comments at the end of a file.
 
 2001-01-16  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* error.cc (pr_where): Call pr_where_1 with two args, not one, to
 	avoid processing format escapes that might appear in formatted code.
diff --git a/src/Map.cc b/src/Map.cc
--- a/src/Map.cc
+++ b/src/Map.cc
@@ -127,16 +127,52 @@ CHMap<C>::CHMap (const CHMap& a) : Map<C
   for (unsigned int i = 0; i < size; ++i)
     tab[i] = static_cast<CHNode<C> *> (index_to_CHptr (i+1));
   count = 0;
   for (Pix p = a.first (); p; a.next (p))
     (*this) [a.key (p)] = a.contents (p);
 }
 
 template <class C>
+CHMap<C>&
+CHMap<C>::operator = (const CHMap& a)
+{
+  Map<C>::operator = (*this);
+
+  unsigned int old_size = a.size;
+
+  CHNode<C> **old_tab = tab;
+  old_size = a.size;
+
+  size = old_size;
+  tab = new CHNode<C>* [size];
+
+  for (unsigned int i = 0; i < size; ++i)
+    tab[i] = static_cast<CHNode<C> *> (index_to_CHptr (i+1));
+
+  for (Pix p = a.first (); p; a.next (p))
+    (*this) [a.key (p)] = a.contents (p);
+
+  for (unsigned int i = 0; i < old_size; ++i)
+    {
+      CHNode<C> *p = old_tab[i];
+      old_tab[i] = static_cast<CHNode<C> *> (index_to_CHptr (i+1));
+      while (p->goodCHptr ())
+	{
+	  CHNode<C> *nxt = p->tl;
+	  delete p;
+	  p = nxt;
+	}
+    }
+  delete [] old_tab;
+
+  return *this;
+}
+
+template <class C>
 Pix
 CHMap<C>::seek (const std::string& key) const
 {
   unsigned int h = hash (key) % size;
 
   for (CHNode<C> *t = tab[h]; t->goodCHptr (); t = t->tl)
     if (key == t->hd)
       return Pix (t);
diff --git a/src/Map.h b/src/Map.h
--- a/src/Map.h
+++ b/src/Map.h
@@ -48,17 +48,27 @@ template <class C>
 class
 Map
 {
 protected:
   int count;
   C def;
 
 public:
-  Map (const C& dflt) : def (dflt) { count = 0; }
+  Map (const C& dflt) : count (0), def (dflt) { }
+
+  Map (const Map& m) : count (m.count), def (m.def) { }
+
+  Map& operator = (const Map& m)
+    {
+      count = m.count;
+      def = m.def;
+
+      return *this;
+    }
 
   virtual ~Map (void) { }
 
   int length (void) const { return count; }	// current number of items
   int empty (void) const { return count == 0; }
 
   virtual int contains (const std::string& key) const;  // is key mapped?
 
@@ -120,20 +130,22 @@ protected:
   CHNode<C> **tab;
   unsigned int size;
 
 public:
   CHMap (const C& dflt, unsigned int sz = DEFAULT_INITIAL_CAPACITY);
 
   CHMap (const CHMap& a);
 
+  CHMap& operator = (const CHMap& a);
+
   ~CHMap (void)
     {
       clear ();
-      delete tab;
+      delete [] tab;
     }
 
   C& operator [] (const std::string& key);
 
   void del (const std::string& key);
 
   Pix first (void) const;
   void next (Pix& i) const;
@@ -146,18 +158,18 @@ public:
       return ((CHNode<C> *) p)->hd;
     }
 
   C& contents (Pix p) const
     {
       if (p == 0)
 	error ("null Pix");
 
-     return ((CHNode<C> *) p)->cont;
-   }
+      return ((CHNode<C> *) p)->cont;
+    }
 
   Pix seek (const std::string& key) const;
 
   int contains (const std::string& key) const
     {
       return seek (key) != 0;
     }
 
