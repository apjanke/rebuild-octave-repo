# HG changeset patch
# User Rik <rik@octave.org>
# Date 1513112539 28800
#      Tue Dec 12 13:02:19 2017 -0800
# Node ID b9462090773afb7cd52a8a792423f6dae7b92843
# Parent  5cc1e8b16ab1b9526f3dd13b2904a7613813ddb8
legend.m: Setting DisplayName to "" should delete legend (bug #52641).

* legend.m: Add new field "nocallbacks" to legend "userdata" struct.
Set "nocallbacks" to true when constructing legend, and set to false
at end of function to restore callback functionality.
* legend.m (updateline): Check "nocallbacks" property before executing
callback function.  If DisplayName has changed to null string and there
are no labels to display then delete legend, otherwise re-build legend
with new strings.

* isprop.m: Fix BIST test that changed with new behavior.

diff --git a/scripts/plot/appearance/legend.m b/scripts/plot/appearance/legend.m
--- a/scripts/plot/appearance/legend.m
+++ b/scripts/plot/appearance/legend.m
@@ -352,21 +352,28 @@ function [hleg, hleg_obj, hplot, labels]
         set (hlegend, "location", [location "outside"],
                       "orientation", orientation);
       else
         set (hlegend, "location", location,
                       "orientation", orientation);
       endif
     endif
   else
-    ## Create new legend
+    ## Create or modify legend object
     hobjects = [];
     hplots = [];
     text_strings = {};
 
+    if (! isempty (hlegend))
+      ## Disable callbacks while modifying an existing legend
+      legdata = get (hlegend, "userdata");
+      legdata.nocallbacks = true;
+      set (hlegend, "userdata", legdata);
+    endif
+
     if (have_labels)
       ## Check for valid data that can be labeled.
       have_data = false;
       have_dname = false;
       for k = 1 : nkids
         typ = get (kids(k), "type");
         if (any (strcmp (typ, {"line", "patch", "surface", "hggroup"})))
           have_data = true;
@@ -407,20 +414,16 @@ function [hleg, hleg_obj, hplot, labels]
         endif
         typ = get (kids(k), "type");
         while (k > 0
                && ! any (strcmp (typ, {"line","patch","surface","hggroup"})))
           typ = get (kids(--k), "type");
         endwhile
         if (k > 0)
           if (have_labels)
-            ## FIXME: This is inefficient on an existing legend object because
-            ##        it triggers the updateline() callback which then calls
-            ##        legend() itself.  Possibly better to delete the callback
-            ##        on displayname and then re-attach it.  See bug #52641.
             set (kids(k), "displayname", arg);
           endif
           hplots(end+1) = kids(k);
           text_strings(end+1) = arg;
 
           if (--k == 0)
             break;
           endif
@@ -1042,16 +1045,21 @@ function [hleg, hleg_obj, hplot, labels]
         set (fig, "currentaxes", curaxes);
         if (! isempty (oldfig))
           set (0, "currentfigure", oldfig);
         endif
       end_unwind_protect
     endif
   endif
 
+  ## Restore operation of callbacks
+  legdata = get (hlegend, "userdata");
+  legdata.nocallbacks = false;
+  set (hlegend, "userdata", legdata);
+
   if (nargout > 0)
     hleg = hlegend;
     hleg_obj = hobjects;
     hplot = hplots;
     labels = text_strings;
   endif
 
 endfunction
@@ -1178,23 +1186,29 @@ function deletelegend2 (h, ~, ca, pos, o
       dellistener (hplots(i), "displayname");
     endif
   endfor
 
 endfunction
 
 function updateline (h, ~, hlegend, linelength, update_name)
 
+  ## Don't execute callbacks when legend is under construction
+  legdata = get (hlegend, "userdata");
+  if (legdata.nocallbacks)
+    return;
+  endif
+
   if (update_name)
     ## When string changes, have to rebuild legend completely
     [hplots, text_strings] = __getlegenddata__ (hlegend);
-    ## FIXME: See bug #52641.  Changing an existing legend string to a blank
-    ##        can trigger this.
-    if (! isempty (hplots))
-      legend (get (hplots(1), "parent"), hplots, text_strings);
+    if (isempty (hplots))
+      delete (hlegend);
+    else
+      legend (legdata.handle, hplots, text_strings);
     endif
   else
     kids = get (hlegend, "children");
     ll = lm = [];
     for i = 1 : numel (kids)
       if (get (kids(i), "userdata") == h
           && strcmp (get (kids(i), "type"), "line"))
         if (strcmp (get (kids(i), "marker"), "none"))
diff --git a/scripts/plot/util/isprop.m b/scripts/plot/util/isprop.m
--- a/scripts/plot/util/isprop.m
+++ b/scripts/plot/util/isprop.m
@@ -49,14 +49,14 @@ function res = isprop (obj, prop)
   endfor
 
 endfunction
 
 
 %!assert (isprop (0, "foobar"), false)
 %!assert (isprop (0, "screenpixelsperinch"), true)
 %!assert (isprop (zeros (2, 3), "visible"), true (2, 3))
-%!assert (isprop (0:2, "visible"), [true false false])
+%!assert (isprop ([-2, -1, 0], "visible"), [false, false, true])
 
 %!error isprop ()
 %!error isprop (1)
 %!error isprop (1,2,3)
 %!error <PROP name must be a string> isprop (0, {"visible"})
