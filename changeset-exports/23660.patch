# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1497994312 14400
#      Tue Jun 20 17:31:52 2017 -0400
# Node ID 97c3223c17a6c2d157e7266414676633dd5f9602
# Parent  114691e86b993a7d459b3188cf8fea2a6c2fee33
stash directory name in classdef method objects (bug #45444, bug #51276)

This change should allow private functions to be found from class
methods.

* ov-fcn.h (octave_function::stash_dir_name): Now virtual.

* ov-classdef.h, ov-classdef.cc (octave_classdef_meta::stash_dir_name,
cdef_meta_object::stash_dir_name,
cdef_meta_object_rep::stash_dir_name,
cdef_class::cdef_class_rep::stash_dir_name,
cdef_method::cdef_method_rep::stash_dir_name): New methods.
(cdef_class_rep::stash_dir_name): Also stash dir name in methods.
Rename existing set_directory methods to stash_dir_name.
Rename existing get_directory methods to dir_name.

diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -1014,16 +1014,18 @@ public:
   octave_classdef_meta (const cdef_meta_object& obj)
     : object (obj) { }
 
   ~octave_classdef_meta (void)
   { object.meta_release (); }
 
   octave_function * function_value (bool = false) { return this; }
 
+  void stash_dir_name (const std::string& dir) { object.stash_dir_name (dir); }
+
   octave_value_list
   subsref (const std::string& type,
            const std::list<octave_value_list>& idx,
            int nargout)
   {
     return object.meta_subsref (type, idx, nargout);
   }
 
@@ -2209,16 +2211,29 @@ cdef_class::cdef_class_rep::get_names (v
   find_names (names, false);
 
   string_vector v (names);
 
   return v.sort (true);
 }
 
 void
+cdef_class::cdef_class_rep::stash_dir_name (const std::string& dir)
+{
+  directory = dir;
+
+  for (auto& it : method_map)
+    {
+      cdef_method& meth = it.second;
+
+      meth.stash_dir_name (dir);
+    }
+}
+
+void
 cdef_class::cdef_class_rep::delete_object (cdef_object obj)
 {
   method_iterator it = method_map.find ("delete");
 
   if (it != method_map.end ())
     {
       cdef_class cls = obj.get_class ();
 
@@ -3063,16 +3078,25 @@ bool
 cdef_method::cdef_method_rep::is_constructor (void) const
 {
   if (function.is_function())
     return function.function_value ()->is_classdef_constructor ();
 
   return false;
 }
 
+void
+cdef_method::cdef_method_rep::stash_dir_name (const std::string& dir)
+{
+  octave_function *fptr = function.function_value ();
+
+  if (fptr)
+    fptr->stash_dir_name (dir);
+}
+
 bool
 cdef_method::cdef_method_rep::check_access (void) const
 {
   cdef_class cls (to_cdef (get ("DefiningClass")));
 
   return ::check_access (cls, get ("Access"), get_name ());
 }
 
diff --git a/libinterp/octave-value/ov-classdef.h b/libinterp/octave-value/ov-classdef.h
--- a/libinterp/octave-value/ov-classdef.h
+++ b/libinterp/octave-value/ov-classdef.h
@@ -5,17 +5,17 @@ Copyright (C) 2012-2017 Michael Goffioul
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 3 of the License, or
 (at your option) any later version.
 
 Octave is distributed in the hope that it will be useful, but
-qWITHOUT ANY WARRANTY; without even the implied warranty of
+WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, see
 <http://www.gnu.org/licenses/>.
 
 */
@@ -533,16 +533,18 @@ public:
   virtual bool is_class (void) const { return false; }
 
   virtual bool is_property (void) const { return false; }
 
   virtual bool is_method (void) const { return false; }
 
   virtual bool is_package (void) const { return false; }
 
+  virtual void stash_dir_name (const std::string&) { }
+
   virtual octave_value_list
   meta_subsref (const std::string& /* type */,
                 const std::list<octave_value_list>& /* idx */,
                 int /* nargout */)
   {
     error ("subsref: invalid meta object");
   }
 
@@ -593,16 +595,19 @@ public:
                 const std::list<octave_value_list>& idx, int nargout)
   { return get_rep ()->meta_subsref (type, idx, nargout); }
 
   void meta_release (void) { get_rep ()->meta_release (); }
 
   bool meta_accepts_postfix_index (char type) const
   { return get_rep ()->meta_accepts_postfix_index (type); }
 
+  void stash_dir_name (const std::string& dir)
+  { get_rep ()->stash_dir_name (dir); }
+
 private:
   cdef_meta_object_rep * get_rep (void)
   { return dynamic_cast<cdef_meta_object_rep *> (cdef_object::get_rep ()); }
 
   const cdef_meta_object_rep * get_rep (void) const
   { return dynamic_cast<const cdef_meta_object_rep *> (cdef_object::get_rep ()); }
 };
 
@@ -646,19 +651,19 @@ private:
     void install_property (const cdef_property& prop);
 
     Cell get_properties (int mode);
 
     std::map<std::string, cdef_property> get_property_map (int mode);
 
     string_vector get_names (void);
 
-    void set_directory (const std::string& dir) { directory = dir; }
+    void stash_dir_name (const std::string& dir);
 
-    std::string get_directory (void) const { return directory; }
+    std::string dir_name (void) const { return directory; }
 
     void delete_object (cdef_object obj);
 
     octave_value_list
     meta_subsref (const std::string& type,
                   const std::list<octave_value_list>& idx, int nargout);
 
     void meta_release (void);
@@ -811,27 +816,27 @@ public:
   { return get_rep ()->get_property_map (mode); }
 
   string_vector get_names (void) { return get_rep ()->get_names (); }
 
   bool is_abstract (void) const { return get_rep ()->is_abstract (); }
 
   bool is_sealed (void) const { return get_rep ()->is_sealed (); }
 
-  void set_directory (const std::string& dir)
-  { get_rep ()->set_directory (dir); }
+  void stash_dir_name (const std::string& dir)
+  { get_rep ()->stash_dir_name (dir); }
 
-  std::string get_directory (void) const
-  { return get_rep ()->get_directory (); }
+  std::string dir_name (void) const
+  { return get_rep ()->dir_name (); }
 
   std::string get_name (void) const
   { return get_rep ()->get_name (); }
 
   bool is_builtin (void) const
-  { return get_directory ().empty (); }
+  { return dir_name ().empty (); }
 
   void delete_object (cdef_object obj)
   { get_rep ()->delete_object (obj); }
 
   static cdef_class
   make_meta_class (octave::interpreter& interp, octave::tree_classdef *t,
                    bool is_at_folder = false);
 
@@ -1035,16 +1040,18 @@ private:
     void set_name (const std::string& nm) { put ("Name", nm); }
 
     bool is_static (void) const { return get("Static").bool_value (); }
 
     octave_value get_function (void) const { return function; }
 
     void set_function (const octave_value& fcn) { function = fcn; }
 
+    void stash_dir_name (const std::string& dir);
+
     bool check_access (void) const;
 
     bool is_external (void) const { return ! dispatch_type.empty (); }
 
     void mark_as_external (const std::string& dtype)
     { dispatch_type = dtype; }
 
     octave_value_list execute (const octave_value_list& args, int nargout,
diff --git a/libinterp/octave-value/ov-fcn.h b/libinterp/octave-value/ov-fcn.h
--- a/libinterp/octave-value/ov-fcn.h
+++ b/libinterp/octave-value/ov-fcn.h
@@ -137,17 +137,17 @@ public:
   { return private_function && xdispatch_class == nm; }
 
   virtual bool
   is_anonymous_function_of_class (const std::string& = "") const
   { return false; }
 
   std::string dir_name (void) const { return my_dir_name; }
 
-  void stash_dir_name (const std::string& dir) { my_dir_name = dir; }
+  virtual void stash_dir_name (const std::string& dir) { my_dir_name = dir; }
 
   void lock (void)
   {
     this->lock_subfunctions ();
     locked = true;
   }
 
   void unlock (void)
