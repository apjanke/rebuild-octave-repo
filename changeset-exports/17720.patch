# HG changeset patch
# User Rik <rik@octave.org>
# Date 1382419515 25200
#      Mon Oct 21 22:25:15 2013 -0700
# Node ID 1ab8e21d9cfcdaf8454d5e02b5b27227f8c634f9
# Parent  ed9a21a90221d5ddeabe215f32464fc111c91902
Further corrections to parenting of axes (bug #39813)

* scripts/plot/util/newplot.m: Accept multiple graphic handles to save.
Also save handles when axis nextplot property is "replacechildren".
Correct failing %!test.

* scripts/plot/util/__plt_get_axis_arg__.m: Return axis as first value,
"parent" handle as second value.

* scripts/plot/draw/surface.m: Get axis from __plt_get_axis_arg__ and ignore
any other returned handles.

diff --git a/scripts/plot/draw/surface.m b/scripts/plot/draw/surface.m
--- a/scripts/plot/draw/surface.m
+++ b/scripts/plot/draw/surface.m
@@ -48,16 +48,18 @@
 ## Author: jwe
 
 function h = surface (varargin)
 
   [hax, varargin] = __plt_get_axis_arg__ ("surface", varargin{:});
 
   if (isempty (hax))
     hax = gca ();
+  else
+    hax = hax(1);
   endif
   
   [htmp, bad_usage] = __surface__ (hax, varargin{:});
 
   if (bad_usage)
     print_usage ();
   endif
 
diff --git a/scripts/plot/util/__plt_get_axis_arg__.m b/scripts/plot/util/__plt_get_axis_arg__.m
--- a/scripts/plot/util/__plt_get_axis_arg__.m
+++ b/scripts/plot/util/__plt_get_axis_arg__.m
@@ -23,17 +23,16 @@
 
 ## Author: jwe
 
 function [h, varargin, narg] = __plt_get_axis_arg__ (caller, varargin)
 
   h = [];
   parent = find (strcmpi (varargin, "parent"), 1);
   
-
   ## Look for a scalar which is a graphics handle but not the
   ## Root Figure (0) or an ordinary figure (integer).
   if (numel (varargin) > 0 && numel (varargin{1}) == 1
       && ishandle (varargin{1}) && varargin{1} != 0 && ! isfigure (varargin{1}))
     htmp = varargin{1};
     if (! isaxes (htmp))
       error ("%s: expecting first argument to be axes handle", caller);
     endif
@@ -45,17 +44,17 @@ function [h, varargin, narg] = __plt_get
   elseif (numel (varargin) > 1 && ! isempty (parent))
     if (parent < numel (varargin) && ishandle (varargin{parent+1}))
       htmp = varargin{parent+1};
       if (isaxes (htmp) && ! strcmp (get (htmp, "tag"), "legend"))
         h = htmp;
         varargin(parent:parent+1) = [];
       else
         ## 'parent' property for some other type like hggroup
-        h = htmp;
+        h = [ancestor(htmp, "axes"), htmp];
       endif
     else
       error ("%s: expecting parent value to be axes handle", caller);
     endif
   endif
 
   narg = length (varargin);
 
diff --git a/scripts/plot/util/newplot.m b/scripts/plot/util/newplot.m
--- a/scripts/plot/util/newplot.m
+++ b/scripts/plot/util/newplot.m
@@ -86,22 +86,29 @@ function hax = newplot (hsave = [])
   endif
 
   cf = [];
   ca = [];
 
   if (! isempty (hsave))
     ## Find the first valid axes 
     ca = ancestor (hsave, "axes", "toplevel"); 
+    if (iscell (ca))
+      ca = [ca{:}];
+    endif
     ca = ca(find (ca, 1));
+    hsave(hsave == ca) = [];
     ## Next, find the figure associated with any axis found
     if (! isempty (ca))
       cf = ancestor (ca, "figure", "toplevel");
     else
       cf = ancestor (hsave, "figure", "toplevel"); 
+      if (iscell (cf))
+        cf = [cf{:}];
+      endif
       cf = cf(find (cf, 1));
     endif
   endif
 
   if (isempty (cf))
     ## get current figure, or create a new one if necessary
     cf = gcf ();
   else
@@ -154,17 +161,28 @@ function hax = newplot (hsave = [])
     __next_line_style__ (false);
   endif
 
   anp = get (ca, "nextplot");
   switch (anp)
     case "add"
       ## Default case.  Doesn't require action.
     case "replacechildren"
-      delete (get (ca, "children"));
+      if (! deleteall && ca != hsave)
+        ## preserve hsave and its parents, uncles, ...
+        kids = allchild (ca);
+        hkid = hsave;
+        while (! any (hkid == kids))
+          hkid = get (hkid, "parent");
+        endwhile
+        kids(kids == hkid) = [];
+        delete (kids);
+      else
+        delete (get (ca, "children"));
+      endif
     case "replace"
       if (! deleteall && ca != hsave)
         ## preserve hsave and its parents, uncles, ...
         kids = allchild (ca);
         hkid = hsave;
         while (! any (hkid == kids))
           hkid = get (hkid, "parent");
         endwhile
@@ -218,17 +236,17 @@ endfunction
 %!   hold off;
 %!   newplot (hg2);
 %!   assert (ishandle (li0), false);
 %!   assert (get (hax, "children"), hg1);
 %! 
 %!   ## kids are preserved for hggroups
 %!   kids = get (hg1, "children");
 %!   newplot (hg1); 
-%!   assert (get (hg1, "children"), kids));
+%!   assert (get (hg1, "children"), kids);
 %! 
 %!   ## preserve objects
 %!   newplot (li1);
 %!   assert (ishandle (li1));
 %! 
 %!   ## kids are deleted for axes
 %!   newplot (hax);  
 %!   assert (isempty (get (hax, "children")));
