# HG changeset patch
# User jwe
# Date 971367240 0
#      Thu Oct 12 16:14:00 2000 +0000
# Node ID 7d2d642cbb539f33fbac4c501b86b26ff372459e
# Parent  3dfae66ad67c0820751da4dc49b6b7988e5c2422
[project @ 2000-10-12 16:13:59 by jwe]

diff --git a/liboctave/Array2-idx.h b/liboctave/Array2-idx.h
--- a/liboctave/Array2-idx.h
+++ b/liboctave/Array2-idx.h
@@ -61,65 +61,68 @@ Array2<T>::index (idx_vector& idx_arg) c
   Array2<T> retval;
 
   int nr = d1;
   int nc = d2;
 
   int idx_orig_rows = idx_arg.orig_rows ();
   int idx_orig_columns = idx_arg.orig_columns ();
 
-  if (nr == 1 && nc == 1)
+  if (idx_arg.is_colon ())
+    {
+      // Fast magic colon processing.
+
+      int result_nr = nr * nc;
+      int result_nc = result_nr ? 1 : 0;
+
+      retval = Array2<T> (*this, result_nr, result_nc);
+    }
+  else if (nr == 1 && nc == 1)
     {
       Array<T> tmp = Array<T>::index (idx_arg);
 
       if (tmp.length () != 0)
 	retval = Array2<T> (tmp, idx_orig_rows, idx_orig_columns);
       else
 	retval = Array2<T> (tmp, 0, 0);
     }
   else if (nr == 1 || nc == 1)
     {
-      int result_is_column_vector = (nc == 1 || idx_arg.is_colon ());
+      int result_is_column_vector = (nc == 1);
 
       Array<T> tmp = Array<T>::index (idx_arg);
 
       int len = tmp.length ();
 
       if (len == 0)
 	retval = Array2<T> (0, 0);
       else
 	{
 	  if (result_is_column_vector)
 	    retval = Array2<T> (tmp, len, 1);
 	  else
 	    retval = Array2<T> (tmp, 1, len);
 	}
     }
   else if (liboctave_dfi_flag
-	   || idx_arg.is_colon ()
 	   || (idx_arg.one_zero_only ()
 	       && idx_orig_rows == nr
 	       && idx_orig_columns == nc))
     {
       // This code is only for indexing matrices.  The vector
       // cases are handled above.
 
       idx_arg.freeze (nr * nc, "matrix");
 
       if (idx_arg)
 	{
 	  int result_nr = idx_orig_rows;
 	  int result_nc = idx_orig_columns;
 
-	  if (idx_arg.is_colon ())
-	    {
-	      result_nr = nr * nc;
-	      result_nc = result_nr ? 1 : 0;
-	    }
-	  else if (idx_arg.one_zero_only ())
+	  if (idx_arg.one_zero_only ())
 	    {
 	      result_nr = idx_arg.ones_count ();
 	      result_nc = (result_nr > 0 ? 1 : 0);
 	    }
 
 	  retval.resize (result_nr, result_nc);
 
 	  int k = 0;
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2000-10-12  Paul Kienzle  <pkienzle@kienzle.powernet.co.uk>
+
+	* Array2-idx.h (Array2<T>::index (idx_vector&)): Avoid copying
+	elements if arg is a colon.
+
 2000-10-12  Cai Jianming <caijianming@yahoo.co.uk>
 
 	dMatrix.cc (Matrix::cumprod (int) const): New arg, DIM.
 	(Matrix::cumsum (int) const): Likewise.
 	(Matrix::prod (int) const): Likewise.
 	(Matrix::sum (int) const): Likewise.
 	(Matrix::sumsq (int) const): Likewise.
 	* CMatrix.cc (ComplexMatrix::cumprod (int dim) const): Likewise.
