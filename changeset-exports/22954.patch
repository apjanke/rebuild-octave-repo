# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1482808664 18000
#      Mon Dec 26 22:17:44 2016 -0500
# Node ID 6cd3e9acf443c316d4874414af548f4d7f217584
# Parent  fd649fd3db75f6eb7675dbb9c81c0b2083895ecc
* lo-specfun.cc: Use F77_INT in calls to Fortran subroutines.

diff --git a/liboctave/numeric/lo-slatec-proto.h b/liboctave/numeric/lo-slatec-proto.h
--- a/liboctave/numeric/lo-slatec-proto.h
+++ b/liboctave/numeric/lo-slatec-proto.h
@@ -101,34 +101,34 @@ extern "C"
   F77_FUNC (algams, ALGAMS) (const F77_REAL&, F77_REAL&, F77_REAL&);
 
   F77_RET_T
   F77_FUNC (dlgams, DLGAMS) (const F77_DBLE&, F77_DBLE&, F77_DBLE&);
 
   // PCHIM
 
   F77_RET_T
-  F77_FUNC (dpchim, DPCHIM) (const F77_INT& n, const F77_DBLE *x,
-                             const F77_DBLE *f, F77_DBLE *d,
+  F77_FUNC (dpchim, DPCHIM) (const F77_INT& n, const F77_DBLE& x,
+                             const F77_DBLE& f, F77_DBLE& d,
                              const F77_INT &incfd,
-                             F77_INT *ierr);
+                             F77_INT& ierr);
 
   F77_RET_T
-  F77_FUNC (pchim, PCHIM) (const F77_INT& n, const F77_REAL *x,
-                           const F77_REAL *f, F77_REAL *d,
+  F77_FUNC (pchim, PCHIM) (const F77_INT& n, const F77_REAL& x,
+                           const F77_REAL& f, F77_REAL& d,
                            const F77_INT& incfd,
-                           F77_INT *ierr);
+                           F77_INT& ierr);
 
   // PSIFN
 
   F77_RET_T
-  F77_FUNC (psifn, PSIFN) (const F77_REAL*, const F77_INT&,
+  F77_FUNC (psifn, PSIFN) (const F77_REAL&, const F77_INT&,
                            const F77_INT&, const F77_INT&,
-                           F77_REAL*, F77_INT*, F77_INT*);
+                           F77_REAL&, F77_INT&, F77_INT&);
 
   F77_RET_T
-  F77_FUNC (dpsifn, DPSIFN) (const F77_DBLE*, const F77_INT&,
+  F77_FUNC (dpsifn, DPSIFN) (const F77_DBLE&, const F77_INT&,
                              const F77_INT&, const F77_INT&,
-                             F77_DBLE*, F77_INT*, F77_INT*);
+                             F77_DBLE&, F77_INT&, F77_INT&);
 }
 
 #endif
 
diff --git a/liboctave/numeric/lo-specfun.cc b/liboctave/numeric/lo-specfun.cc
--- a/liboctave/numeric/lo-specfun.cc
+++ b/liboctave/numeric/lo-specfun.cc
@@ -770,22 +770,24 @@ namespace octave
     {
       Complex retval;
 
       if (alpha >= 0.0)
         {
           double yr = 0.0;
           double yi = 0.0;
 
-          octave_idx_type nz;
+          F77_INT nz, t_ierr;
 
           double zr = z.real ();
           double zi = z.imag ();
 
-          F77_FUNC (zbesj, ZBESJ) (zr, zi, alpha, 2, 1, &yr, &yi, nz, ierr);
+          F77_FUNC (zbesj, ZBESJ) (zr, zi, alpha, 2, 1, &yr, &yi, nz, t_ierr);
+
+          ierr = t_ierr;
 
           if (kode != 2)
             {
               double expz = exp (std::abs (zi));
               yr *= expz;
               yi *= expz;
             }
 
@@ -828,34 +830,36 @@ namespace octave
     {
       Complex retval;
 
       if (alpha >= 0.0)
         {
           double yr = 0.0;
           double yi = 0.0;
 
-          octave_idx_type nz;
+          F77_INT nz, t_ierr;
 
           double wr, wi;
 
           double zr = z.real ();
           double zi = z.imag ();
 
           ierr = 0;
 
           if (zr == 0.0 && zi == 0.0)
             {
               yr = -octave::numeric_limits<double>::Inf ();
               yi = 0.0;
             }
           else
             {
               F77_FUNC (zbesy, ZBESY) (zr, zi, alpha, 2, 1, &yr, &yi, nz,
-                                       &wr, &wi, ierr);
+                                       &wr, &wi, t_ierr);
+
+              ierr = t_ierr;
 
               if (kode != 2)
                 {
                   double expz = exp (std::abs (zi));
                   yr *= expz;
                   yi *= expz;
                 }
 
@@ -899,22 +903,24 @@ namespace octave
     {
       Complex retval;
 
       if (alpha >= 0.0)
         {
           double yr = 0.0;
           double yi = 0.0;
 
-          octave_idx_type nz;
+          F77_INT nz, t_ierr;
 
           double zr = z.real ();
           double zi = z.imag ();
 
-          F77_FUNC (zbesi, ZBESI) (zr, zi, alpha, 2, 1, &yr, &yi, nz, ierr);
+          F77_FUNC (zbesi, ZBESI) (zr, zi, alpha, 2, 1, &yr, &yi, nz, t_ierr);
+
+          ierr = t_ierr;
 
           if (kode != 2)
             {
               double expz = exp (std::abs (zr));
               yr *= expz;
               yi *= expz;
             }
 
@@ -964,31 +970,34 @@ namespace octave
     {
       Complex retval;
 
       if (alpha >= 0.0)
         {
           double yr = 0.0;
           double yi = 0.0;
 
-          octave_idx_type nz;
+          F77_INT nz, t_ierr;
 
           double zr = z.real ();
           double zi = z.imag ();
 
           ierr = 0;
 
           if (zr == 0.0 && zi == 0.0)
             {
               yr = octave::numeric_limits<double>::Inf ();
               yi = 0.0;
             }
           else
             {
-              F77_FUNC (zbesk, ZBESK) (zr, zi, alpha, 2, 1, &yr, &yi, nz, ierr);
+              F77_FUNC (zbesk, ZBESK) (zr, zi, alpha, 2, 1, &yr, &yi, nz,
+                                       t_ierr);
+
+              ierr = t_ierr;
 
               if (kode != 2)
                 {
                   Complex expz = exp (-z);
 
                   double rexpz = expz.real ();
                   double iexpz = expz.imag ();
 
@@ -1019,22 +1028,25 @@ namespace octave
     {
       Complex retval;
 
       if (alpha >= 0.0)
         {
           double yr = 0.0;
           double yi = 0.0;
 
-          octave_idx_type nz;
+          F77_INT nz, t_ierr;
 
           double zr = z.real ();
           double zi = z.imag ();
 
-          F77_FUNC (zbesh, ZBESH) (zr, zi, alpha, 2, 1, 1, &yr, &yi, nz, ierr);
+          F77_FUNC (zbesh, ZBESH) (zr, zi, alpha, 2, 1, 1, &yr, &yi, nz,
+                                   t_ierr);
+
+          ierr = t_ierr;
 
           if (kode != 2)
             {
               Complex expz = exp (Complex (0.0, 1.0) * z);
 
               double rexpz = expz.real ();
               double iexpz = expz.imag ();
 
@@ -1065,22 +1077,25 @@ namespace octave
     {
       Complex retval;
 
       if (alpha >= 0.0)
         {
           double yr = 0.0;
           double yi = 0.0;
 
-          octave_idx_type nz;
+          F77_INT nz, t_ierr;
 
           double zr = z.real ();
           double zi = z.imag ();
 
-          F77_FUNC (zbesh, ZBESH) (zr, zi, alpha, 2, 2, 1, &yr, &yi, nz, ierr);
+          F77_FUNC (zbesh, ZBESH) (zr, zi, alpha, 2, 2, 1, &yr, &yi, nz,
+                                   t_ierr);
+
+          ierr = t_ierr;
 
           if (kode != 2)
             {
               Complex expz = exp (-Complex (0.0, 1.0) * z);
 
               double rexpz = expz.real ();
               double iexpz = expz.imag ();
 
@@ -1408,20 +1423,22 @@ namespace octave
     cbesj (const FloatComplex& z, float alpha, int kode, octave_idx_type& ierr)
     {
       FloatComplex retval;
 
       if (alpha >= 0.0)
         {
           FloatComplex y = 0.0;
 
-          octave_idx_type nz;
+          F77_INT nz, t_ierr;
 
           F77_FUNC (cbesj, CBESJ) (F77_CONST_CMPLX_ARG (&z), alpha, 2, 1,
-                                   F77_CMPLX_ARG (&y), nz, ierr);
+                                   F77_CMPLX_ARG (&y), nz, t_ierr);
+
+          ierr = t_ierr;
 
           if (kode != 2)
             {
               float expz = exp (std::abs (z.imag ()));
               y *= expz;
             }
 
           if (z.imag () == 0.0 && z.real () >= 0.0)
@@ -1464,30 +1481,33 @@ namespace octave
     cbesy (const FloatComplex& z, float alpha, int kode, octave_idx_type& ierr)
     {
       FloatComplex retval;
 
       if (alpha >= 0.0)
         {
           FloatComplex y = 0.0;
 
-          octave_idx_type nz;
+          F77_INT nz, t_ierr;
 
           FloatComplex w;
 
           ierr = 0;
 
           if (z.real () == 0.0 && z.imag () == 0.0)
             {
               y = FloatComplex (-octave::numeric_limits<float>::Inf (), 0.0);
             }
           else
             {
               F77_FUNC (cbesy, CBESY) (F77_CONST_CMPLX_ARG (&z), alpha, 2, 1,
-                                       F77_CMPLX_ARG (&y), nz, F77_CMPLX_ARG (&w), ierr);
+                                       F77_CMPLX_ARG (&y), nz,
+                                       F77_CMPLX_ARG (&w), t_ierr);
+
+              ierr = t_ierr;
 
               if (kode != 2)
                 {
                   float expz = exp (std::abs (z.imag ()));
                   y *= expz;
                 }
 
               if (z.imag () == 0.0 && z.real () >= 0.0)
@@ -1531,20 +1551,22 @@ namespace octave
     cbesi (const FloatComplex& z, float alpha, int kode, octave_idx_type& ierr)
     {
       FloatComplex retval;
 
       if (alpha >= 0.0)
         {
           FloatComplex y = 0.0;
 
-          octave_idx_type nz;
+          F77_INT nz, t_ierr;
 
           F77_FUNC (cbesi, CBESI) (F77_CONST_CMPLX_ARG (&z), alpha, 2, 1,
-                                   F77_CMPLX_ARG (&y), nz, ierr);
+                                   F77_CMPLX_ARG (&y), nz, t_ierr);
+
+          ierr = t_ierr;
 
           if (kode != 2)
             {
               float expz = exp (std::abs (z.real ()));
               y *= expz;
             }
 
           if (z.imag () == 0.0 && z.real () >= 0.0)
@@ -1586,28 +1608,30 @@ namespace octave
     cbesk (const FloatComplex& z, float alpha, int kode, octave_idx_type& ierr)
     {
       FloatComplex retval;
 
       if (alpha >= 0.0)
         {
           FloatComplex y = 0.0;
 
-          octave_idx_type nz;
+          F77_INT nz, t_ierr;
 
           ierr = 0;
 
           if (z.real () == 0.0 && z.imag () == 0.0)
             {
               y = FloatComplex (octave::numeric_limits<float>::Inf (), 0.0);
             }
           else
             {
               F77_FUNC (cbesk, CBESK) (F77_CONST_CMPLX_ARG (&z), alpha, 2, 1,
-                                       F77_CMPLX_ARG (&y), nz, ierr);
+                                       F77_CMPLX_ARG (&y), nz, t_ierr);
+
+              ierr = t_ierr;
 
               if (kode != 2)
                 {
                   FloatComplex expz = exp (-z);
 
                   float rexpz = expz.real ();
                   float iexpz = expz.imag ();
 
@@ -1637,20 +1661,22 @@ namespace octave
     cbesh1 (const FloatComplex& z, float alpha, int kode, octave_idx_type& ierr)
     {
       FloatComplex retval;
 
       if (alpha >= 0.0)
         {
           FloatComplex y = 0.0;
 
-          octave_idx_type nz;
+          F77_INT nz, t_ierr;
 
           F77_FUNC (cbesh, CBESH) (F77_CONST_CMPLX_ARG (&z), alpha, 2, 1, 1,
-                                   F77_CMPLX_ARG (&y), nz, ierr);
+                                   F77_CMPLX_ARG (&y), nz, t_ierr);
+
+          ierr = t_ierr;
 
           if (kode != 2)
             {
               FloatComplex expz = exp (FloatComplex (0.0, 1.0) * z);
 
               float rexpz = expz.real ();
               float iexpz = expz.imag ();
 
@@ -1681,20 +1707,22 @@ namespace octave
     cbesh2 (const FloatComplex& z, float alpha, int kode, octave_idx_type& ierr)
     {
       FloatComplex retval;
 
       if (alpha >= 0.0)
         {
           FloatComplex y = 0.0;
 
-          octave_idx_type nz;
+          F77_INT nz, t_ierr;
 
           F77_FUNC (cbesh, CBESH) (F77_CONST_CMPLX_ARG (&z), alpha, 2, 2, 1,
-                                   F77_CMPLX_ARG (&y), nz, ierr);
+                                   F77_CMPLX_ARG (&y), nz, t_ierr);
+
+          ierr = t_ierr;
 
           if (kode != 2)
             {
               FloatComplex expz = exp (-FloatComplex (0.0, 1.0) * z);
 
               float rexpz = expz.real ();
               float iexpz = expz.imag ();
 
@@ -1872,21 +1900,22 @@ namespace octave
 
       for (octave_idx_type j = 0; j < nc; j++)
         for (octave_idx_type i = 0; i < nr; i++)
           retval(i,j) = f (x(i), alpha(j), (scaled ? 2 : 1), ierr(i,j));
 
       return retval;
     }
 
-#define SS_BESSEL(name, fcn)                                            \
-    FloatComplex                                                        \
-    name (float alpha, const FloatComplex& x, bool scaled, octave_idx_type& ierr) \
-    {                                                                   \
-      return do_bessel (fcn, #name, alpha, x, scaled, ierr);            \
+#define SS_BESSEL(name, fcn)                                    \
+    FloatComplex                                                \
+    name (float alpha, const FloatComplex& x, bool scaled,      \
+          octave_idx_type& ierr)                                \
+    {                                                           \
+      return do_bessel (fcn, #name, alpha, x, scaled, ierr);    \
     }
 
 #define SM_BESSEL(name, fcn)                                            \
     FloatComplexMatrix                                                  \
     name (float alpha, const FloatComplexMatrix& x, bool scaled,        \
           Array<octave_idx_type>& ierr)                                 \
     {                                                                   \
       return do_bessel (fcn, #name, alpha, x, scaled, ierr);            \
@@ -1897,52 +1926,53 @@ namespace octave
     name (const FloatMatrix& alpha, const FloatComplex& x, bool scaled, \
           Array<octave_idx_type>& ierr)                                 \
     {                                                                   \
       return do_bessel (fcn, #name, alpha, x, scaled, ierr);            \
     }
 
 #define MM_BESSEL(name, fcn)                                            \
     FloatComplexMatrix                                                  \
-    name (const FloatMatrix& alpha, const FloatComplexMatrix& x, bool scaled, \
-          Array<octave_idx_type>& ierr)                                 \
+    name (const FloatMatrix& alpha, const FloatComplexMatrix& x,        \
+          bool scaled, Array<octave_idx_type>& ierr)                    \
     {                                                                   \
       return do_bessel (fcn, #name, alpha, x, scaled, ierr);            \
     }
 
 #define SN_BESSEL(name, fcn)                                            \
     FloatComplexNDArray                                                 \
     name (float alpha, const FloatComplexNDArray& x, bool scaled,       \
           Array<octave_idx_type>& ierr)                                 \
     {                                                                   \
       return do_bessel (fcn, #name, alpha, x, scaled, ierr);            \
     }
 
-#define NS_BESSEL(name, fcn)                                            \
-    FloatComplexNDArray                                                 \
-    name (const FloatNDArray& alpha, const FloatComplex& x, bool scaled, \
-          Array<octave_idx_type>& ierr)                                 \
-    {                                                                   \
-      return do_bessel (fcn, #name, alpha, x, scaled, ierr);            \
+#define NS_BESSEL(name, fcn)                                    \
+    FloatComplexNDArray                                         \
+    name (const FloatNDArray& alpha, const FloatComplex& x,     \
+          bool scaled, Array<octave_idx_type>& ierr)            \
+    {                                                           \
+      return do_bessel (fcn, #name, alpha, x, scaled, ierr);    \
     }
 
 #define NN_BESSEL(name, fcn)                                            \
     FloatComplexNDArray                                                 \
-    name (const FloatNDArray& alpha, const FloatComplexNDArray& x, bool scaled, \
-          Array<octave_idx_type>& ierr)                                 \
+    name (const FloatNDArray& alpha, const FloatComplexNDArray& x,      \
+          bool scaled, Array<octave_idx_type>& ierr)                    \
     {                                                                   \
       return do_bessel (fcn, #name, alpha, x, scaled, ierr);            \
     }
 
-#define RC_BESSEL(name, fcn)                                            \
-    FloatComplexMatrix                                                  \
-    name (const FloatRowVector& alpha, const FloatComplexColumnVector& x, bool scaled, \
-          Array<octave_idx_type>& ierr)                                 \
-    {                                                                   \
-      return do_bessel (fcn, #name, alpha, x, scaled, ierr);            \
+#define RC_BESSEL(name, fcn)                                    \
+    FloatComplexMatrix                                          \
+    name (const FloatRowVector& alpha,                          \
+          const FloatComplexColumnVector& x, bool scaled,       \
+          Array<octave_idx_type>& ierr)                         \
+    {                                                           \
+      return do_bessel (fcn, #name, alpha, x, scaled, ierr);    \
     }
 
 #define ALL_BESSEL(name, fcn)                   \
     SS_BESSEL (name, fcn)                       \
     SM_BESSEL (name, fcn)                       \
     MS_BESSEL (name, fcn)                       \
     MM_BESSEL (name, fcn)                       \
     SN_BESSEL (name, fcn)                       \
@@ -1968,24 +1998,25 @@ namespace octave
 #undef RC_BESSEL
 
     Complex
     airy (const Complex& z, bool deriv, bool scaled, octave_idx_type& ierr)
     {
       double ar = 0.0;
       double ai = 0.0;
 
-      octave_idx_type nz;
-
       double zr = z.real ();
       double zi = z.imag ();
 
-      octave_idx_type id = deriv ? 1 : 0;
-
-      F77_FUNC (zairy, ZAIRY) (zr, zi, id, 2, ar, ai, nz, ierr);
+      F77_INT id = deriv ? 1 : 0;
+      F77_INT nz, t_ierr;
+
+      F77_FUNC (zairy, ZAIRY) (zr, zi, id, 2, ar, ai, nz, t_ierr);
+
+      ierr = t_ierr;
 
       if (! scaled)
         {
           Complex expz = exp (- 2.0 / 3.0 * z * sqrt (z));
 
           double rexpz = expz.real ();
           double iexpz = expz.imag ();
 
@@ -2005,19 +2036,22 @@ namespace octave
     biry (const Complex& z, bool deriv, bool scaled, octave_idx_type& ierr)
     {
       double ar = 0.0;
       double ai = 0.0;
 
       double zr = z.real ();
       double zi = z.imag ();
 
-      octave_idx_type id = deriv ? 1 : 0;
-
-      F77_FUNC (zbiry, ZBIRY) (zr, zi, id, 2, ar, ai, ierr);
+      F77_INT id = deriv ? 1 : 0;
+      F77_INT t_ierr;
+
+      F77_FUNC (zbiry, ZBIRY) (zr, zi, id, 2, ar, ai, t_ierr);
+
+      ierr = t_ierr;
 
       if (! scaled)
         {
           Complex expz = exp (std::abs (std::real (2.0 / 3.0 * z * sqrt (z))));
 
           double rexpz = expz.real ();
           double iexpz = expz.imag ();
 
@@ -2097,26 +2131,28 @@ namespace octave
 
       for (octave_idx_type i = 0; i < nel; i++)
         retval(i) = biry (z(i), deriv, scaled, ierr(i));
 
       return retval;
     }
 
     FloatComplex
-    airy (const FloatComplex& z, bool deriv, bool scaled, octave_idx_type& ierr)
+    airy (const FloatComplex& z, bool deriv, bool scaled,
+          octave_idx_type& ierr)
     {
       FloatComplex a;
 
-      octave_idx_type nz;
-
-      octave_idx_type id = deriv ? 1 : 0;
-
-      F77_FUNC (cairy, CAIRY) (F77_CONST_CMPLX_ARG (&z), id, 2, F77_CMPLX_ARG (&a),
-                               nz, ierr);
+      F77_INT id = deriv ? 1 : 0;
+      F77_INT nz, t_ierr;
+
+      F77_FUNC (cairy, CAIRY) (F77_CONST_CMPLX_ARG (&z), id, 2,
+                               F77_CMPLX_ARG (&a), nz, t_ierr);
+
+      ierr = t_ierr;
 
       float ar = a.real ();
       float ai = a.imag ();
 
       if (! scaled)
         {
           FloatComplex expz = exp (- 2.0f / 3.0f * z * sqrt (z));
 
@@ -2131,31 +2167,36 @@ namespace octave
 
       if (z.imag () == 0.0 && (! scaled || z.real () >= 0.0))
         ai = 0.0;
 
       return bessel_return_value (FloatComplex (ar, ai), ierr);
     }
 
     FloatComplex
-    biry (const FloatComplex& z, bool deriv, bool scaled, octave_idx_type& ierr)
+    biry (const FloatComplex& z, bool deriv, bool scaled,
+          octave_idx_type& ierr)
     {
       FloatComplex a;
 
-      octave_idx_type id = deriv ? 1 : 0;
-
-      F77_FUNC (cbiry, CBIRY) (F77_CONST_CMPLX_ARG (&z), id, 2, F77_CMPLX_ARG (&a),
-                               ierr);
+      F77_INT id = deriv ? 1 : 0;
+      F77_INT t_ierr;
+
+      F77_FUNC (cbiry, CBIRY) (F77_CONST_CMPLX_ARG (&z), id, 2,
+                               F77_CMPLX_ARG (&a), t_ierr);
+
+      ierr = t_ierr;
 
       float ar = a.real ();
       float ai = a.imag ();
 
       if (! scaled)
         {
-          FloatComplex expz = exp (std::abs (std::real (2.0f / 3.0f * z * sqrt (z))));
+          FloatComplex expz
+            = exp (std::abs (std::real (2.0f / 3.0f * z * sqrt (z))));
 
           float rexpz = expz.real ();
           float iexpz = expz.imag ();
 
           float tmp = ar*rexpz - ai*iexpz;
 
           ai = ar*iexpz + ai*rexpz;
           ar = tmp;
@@ -2376,17 +2417,18 @@ namespace octave
 
       for (octave_idx_type i = 0; i < nel; i++)
         *pretval++ = betainc (x(i), a(i), b);
 
       return retval;
     }
 
     Array<double>
-    betainc (const Array<double>& x, const Array<double>& a, const Array<double>& b)
+    betainc (const Array<double>& x, const Array<double>& a,
+             const Array<double>& b)
     {
       Array<double> retval;
       dim_vector dv = x.dims ();
 
       if (dv != a.dims () || dv != b.dims ())
         err_betainc_nonconformant (dv, a.dims (), b.dims ());
 
       octave_idx_type nel = dv.numel ();
@@ -2516,17 +2558,18 @@ namespace octave
 
       for (octave_idx_type i = 0; i < nel; i++)
         *pretval++ = betainc (x(i), a(i), b);
 
       return retval;
     }
 
     Array<float>
-    betainc (const Array<float>& x, const Array<float>& a, const Array<float>& b)
+    betainc (const Array<float>& x, const Array<float>& a,
+             const Array<float>& b)
     {
       Array<float> retval;
       dim_vector dv = x.dims ();
 
       if (dv != a.dims () || dv != b.dims ())
         err_betainc_nonconformant (dv, a.dims (), b.dims ());
 
       octave_idx_type nel = dv.numel ();
@@ -3760,44 +3803,49 @@ namespace octave
     }
 
     // explicit instantiations
     Complex psi (const Complex& z) { return xpsi (z); }
     FloatComplex psi (const FloatComplex& z) { return xpsi (z); }
 
     template <typename T>
     static inline void
-    fortran_psifn (const T z, const octave_idx_type n, T* ans,
-                   octave_idx_type* ierr);
+    fortran_psifn (T z, octave_idx_type n, T& ans, octave_idx_type& ierr);
 
     template <>
     inline void
-    fortran_psifn<double> (const double z, const octave_idx_type n,
-                           double* ans, octave_idx_type* ierr)
+    fortran_psifn<double> (double z, octave_idx_type n_arg,
+                           double& ans, octave_idx_type& ierr)
     {
-      octave_idx_type flag = 0;
-      F77_XFCN (dpsifn, DPSIFN, (&z, n, 1, 1, ans, &flag, ierr));
+      F77_INT n = to_f77_int (n_arg);
+      F77_INT flag = 0;
+      F77_INT t_ierr;
+      F77_XFCN (dpsifn, DPSIFN, (z, n, 1, 1, ans, flag, t_ierr));
+      ierr = t_ierr;
     }
 
     template <>
     inline void
-    fortran_psifn<float> (const float z, const octave_idx_type n,
-                          float* ans, octave_idx_type* ierr)
+    fortran_psifn<float> (float z, octave_idx_type n_arg,
+                          float& ans, octave_idx_type& ierr)
     {
-      octave_idx_type flag = 0;
-      F77_XFCN (psifn, PSIFN, (&z, n, 1, 1, ans, &flag, ierr));
+      F77_INT n = to_f77_int (n_arg);
+      F77_INT flag = 0;
+      F77_INT t_ierr;
+      F77_XFCN (psifn, PSIFN, (z, n, 1, 1, ans, flag, t_ierr));
+      ierr = t_ierr;
     }
 
     template <typename T>
     T
-    xpsi (const octave_idx_type n, T z)
+    xpsi (octave_idx_type n, T z)
     {
       T ans;
       octave_idx_type ierr = 0;
-      fortran_psifn<T> (z, n, &ans, &ierr);
+      fortran_psifn<T> (z, n, ans, ierr);
       if (ierr == 0)
         {
           // Remember that psifn and dpsifn return scales values
           // When n is 1: do nothing since ((-1)**(n+1)/gamma(n+1)) == 1
           // When n is 0: change sign since ((-1)**(n+1)/gamma(n+1)) == -1
           if (n > 1)
             // FIXME: xgamma here is a killer for our precision since it grows
             //        way too fast.
