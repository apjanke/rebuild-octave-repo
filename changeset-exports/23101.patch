# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1485533050 18000
#      Fri Jan 27 11:04:10 2017 -0500
# Node ID 86376c04cb661348124b262a8b619ebe45c26811
# Parent  a40e586b66bad0821fde93fa2c1f2f37f3c965df
generate signal name from number when needed in signal handler functions

* sighandlers.cc (my_friendly_exit, user_abort,
base_interrupt_manager::do_user_abort,
w32_interrupt_manager::do_user_abort,
posix_interrupt_manager::do_user_abort):
Eliminate signal name argument.  Change all callers.
(my_friendly_exit): Generate signal name from number here.

diff --git a/libinterp/corefcn/sighandlers.cc b/libinterp/corefcn/sighandlers.cc
--- a/libinterp/corefcn/sighandlers.cc
+++ b/libinterp/corefcn/sighandlers.cc
@@ -77,17 +77,17 @@ namespace octave
   // Similar to Vsighup_dumps_octave_core, but for SIGTERM signal.
   static bool Vsigterm_dumps_octave_core = true;
 
   // List of signals we have caught since last call to octave::signal_handler.
   static bool *signals_caught = 0;
 
   // Forward declarations.
   static void user_terminate (int sig_number);
-  static void user_abort (const char *sig_name, int sig_number);
+  static void user_abort (int sig_number);
 
   class
   base_interrupt_manager
   {
   public:
 
     base_interrupt_manager (void) { }
 
@@ -98,17 +98,17 @@ namespace octave
     base_interrupt_manager& operator = (const base_interrupt_manager&) = delete;
 
     virtual ~base_interrupt_manager (void) = default;
 
     virtual void do_jump_to_enclosing_context (void) = 0;
 
     virtual void do_user_terminate (int sig_number) = 0;
 
-    virtual void do_user_abort (const char *sig_name, int sig_number) = 0;
+    virtual void do_user_abort (int sig_number) = 0;
 
     virtual void do_raise_sigint (void) = 0;
   };
 
 #if defined (OCTAVE_USE_WINDOWS_API)
 
   class
   w32_interrupt_manager : public base_interrupt_manager
@@ -177,26 +177,26 @@ namespace octave
       else
         {
           SuspendThread (thread);
           octave::user_terminate (sig_number);
           ResumeThread (thread);
         }
     }
 
-    void do_user_abort (const char *sig_name, int sig_number)
+    void do_user_abort (int sig_number)
     {
       bool is_interrupt_thread = (GetCurrentThreadId () == thread_id);
 
       if (is_interrupt_thread)
-        octave::user_abort (sig_name, sig_number);
+        octave::user_abort (sig_number);
       else
         {
           SuspendThread (thread);
-          octave::user_abort (sig_name, sig_number);
+          octave::user_abort (sig_number);
           ResumeThread (thread);
         }
     }
 
     void do_raise_sigint (void)
     {
       bool is_interrupt_thread = (GetCurrentThreadId () == thread_id);
 
@@ -244,19 +244,19 @@ namespace octave
       ::octave_jump_to_enclosing_context ();
     }
 
     void do_user_terminate (int sig_number)
     {
       octave::user_terminate (sig_number);
     }
 
-    void do_user_abort (const char *sig_name, int sig_number)
+    void do_user_abort (int sig_number)
     {
-      octave::user_abort (sig_name, sig_number);
+      octave::user_abort (sig_number);
     }
 
     void do_raise_sigint (void)
     {
       octave_raise_wrapper (SIGINT);
     }
   };
 
@@ -276,20 +276,20 @@ namespace octave
     }
 
     static void user_terminate (int sig_number)
     {
       if (instance_ok ())
         instance->do_user_terminate (sig_number);
     }
 
-    static void user_abort (const char *sig_name, int sig_number)
+    static void user_abort (int sig_number)
     {
       if (instance_ok ())
-        instance->do_user_abort (sig_name, sig_number);
+        instance->do_user_abort (sig_number);
     }
 
     static void raise_sigint (void)
     {
       if (instance_ok ())
         instance->do_raise_sigint ();
     }
 
@@ -333,20 +333,20 @@ namespace octave
     static void cleanup_instance (void) { delete instance; instance = 0; }
 
     static base_interrupt_manager* instance;
   };
 
   base_interrupt_manager *interrupt_manager::instance = 0;
 
   static void
-  my_friendly_exit (const char *sig_name, int sig_number,
-                    bool save_vars = true)
+  my_friendly_exit (int sig, bool save_vars = true)
   {
-    std::cerr << "fatal: caught signal " << sig_name
+    std::cerr << "fatal: caught signal "
+              << octave_strsignal_wrapper (sig)
               << " -- stopping myself..." << std::endl;
 
     if (save_vars)
       dump_octave_core ();
 
     sysdep_cleanup ();
 
     throw octave::exit_exception (1);
@@ -392,19 +392,19 @@ namespace octave
 
                 octave_unblock_child (context);
 
                 child_list::reap ();
               }
             else if (have_sigfpe && i == sigfpe)
               std::cerr << "warning: floating point exception" << std::endl;
             else if (have_sighup && i == sighup)
-              my_friendly_exit ("SIGHUP", sighup, Vsighup_dumps_octave_core);
+              my_friendly_exit (sighup, Vsighup_dumps_octave_core);
             else if (have_sigterm && i == sigterm)
-              my_friendly_exit ("SIGTERM", sigterm, Vsigterm_dumps_octave_core);
+              my_friendly_exit (sigterm, Vsigterm_dumps_octave_core);
             else if (have_sigpipe && i == sigpipe)
               std::cerr << "warning: broken pipe" << std::endl;
           }
       }
   }
 
   sig_handler *
   set_signal_handler (int sig, sig_handler *handler, bool restart_syscalls)
@@ -466,17 +466,17 @@ namespace octave
 
   // Handle SIGINT.
   //
   // This also has to work for SIGBREAK (on systems that have it), so we
   // use the value of sig, instead of just assuming that it is called
   // for SIGINT only.
 
   static void
-  user_abort (const char *sig_name, int sig_number)
+  user_abort (int sig_number)
   {
     if (! octave_initialized)
       exit (1);
 
     if (can_interrupt)
       {
         if (Vdebug_on_interrupt)
           {
@@ -520,31 +520,31 @@ namespace octave
             octave_interrupt_state++;
 
             if (octave::application::interactive ()
                 && ! octave::application::forced_interactive ()
                 && octave_interrupt_state == 2)
               std::cerr << "Press Control-C again to abort." << std::endl;
 
             if (octave_interrupt_state >= 3)
-              my_friendly_exit (sig_name, sig_number, true);
+              my_friendly_exit (sig_number, true);
           }
       }
   }
 
   static void
   sigterm_handler (int sig)
   {
     interrupt_manager::user_terminate (sig);
   }
 
   static void
   sigint_handler (int sig)
   {
-    interrupt_manager::user_abort (octave_strsignal_wrapper (sig), sig);
+    interrupt_manager::user_abort (sig);
   }
 
   static void
   sigpipe_handler (int sig)
   {
     octave_signal_caught = 1;
 
     signals_caught[sig] = true;
