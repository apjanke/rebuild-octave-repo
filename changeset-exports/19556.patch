# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1420827952 18000
#      Fri Jan 09 13:25:52 2015 -0500
# Node ID d7057df2968e6d683b9bca61c8f4795471884778
# Parent  9bd2f0a07c959ce90891aba99739fbfaec76b2b1
use existing function to determine endianness in audiodevinfo.cc

* audiodevinfo.cc (is_big_endian): Delete.
(octave_play_callback, portaudio_play_callback): Use
oct_mach_info::words_big_endian instead of local big_endian function.

diff --git a/libinterp/dldfcn/audiodevinfo.cc b/libinterp/dldfcn/audiodevinfo.cc
--- a/libinterp/dldfcn/audiodevinfo.cc
+++ b/libinterp/dldfcn/audiodevinfo.cc
@@ -25,16 +25,18 @@ along with Octave; see the file COPYING.
 #endif
 
 // <cstdint> requires c++11
 #include <stdint.h>
 
 #include <string>
 #include <vector>
 
+#include "mach-info.h"
+
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
 #include "oct-obj.h"
 #include "ov.h"
 #include "ov-int32.h"
 #include "ov-struct.h"
 #include "parse.h"
@@ -510,27 +512,16 @@ private:
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 static const unsigned int BUFFER_SIZE = 8192;
 
 DEFINE_OCTAVE_ALLOCATOR (audioplayer);
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (audioplayer, "audioplayer", "audioplayer");
 
-int
-is_big_endian (void)
-{
-  union
-    {
-      uint32_t i;
-      char c[4];
-    } bint = { 0x01020304 };
-  return bint.c[0] == 1;
-}
-
 static int
 octave_play_callback (const void *, void *output, unsigned long frames,
                       const PaStreamCallbackTimeInfo *,
                       PaStreamCallbackFlags, void *data)
 {
   audioplayer *player = static_cast<audioplayer *> (data);
 
   if (! player)
@@ -598,17 +589,17 @@ octave_play_callback (const void *, void
           }
       }
       break;
 
     case 24:
       {
         static double scale_factor = pow (2.0, 23) - 1.0;
 
-        static int big_endian = is_big_endian ();
+        static int big_endian = oct_mach_info::words_big_endian ();
 
         uint8_t *buffer = static_cast<uint8_t *> (output);
 
         for (unsigned long i = 0; i < frames; i++)
           {
             int32_t sample_l = p_l[i];
             int32_t sample_r = p_r[i];
 
@@ -714,17 +705,17 @@ portaudio_play_callback (const void *, v
               }
           }
           break;
 
         case 24:
           {
             static double scale_factor = pow (2.0, 23) - 1.0;
 
-            static int big_endian = is_big_endian ();
+            static int big_endian = oct_mach_info::words_big_endian ();
 
             uint8_t *buffer = static_cast<uint8_t *> (output);
 
             for (unsigned long j = 0; j < frames; j++)
               {
                 unsigned int sample_number = player->get_sample_number ();
 
                 if (sample_number >= player->get_end_sample ())
