# HG changeset patch
# User Brian Gough <bjg@gnu.org>
# Date 1231824427 18000
#      Tue Jan 13 00:27:07 2009 -0500
# Node ID 836618fee9d6a052e015d633cb5ea0f89571b5b3
# Parent  2f5a2c58c15e86ae2bc5d027b3c062626d83d0b2
[docs] add hyphen

diff --git a/scripts/general/nthroot.m b/scripts/general/nthroot.m
--- a/scripts/general/nthroot.m
+++ b/scripts/general/nthroot.m
@@ -17,17 +17,17 @@
 ## <http://www.gnu.org/licenses/>.
 ##
 ## Original version by Paul Kienzle distributed as free software in the
 ## public domain.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} nthroot (@var{x}, @var{n})
 ## 
-## Compute the nth root of @var{x}, returning real results for real 
+## Compute the n-th root of @var{x}, returning real results for real 
 ## components of @var{x}. For example
 ##
 ## @example
 ## @group
 ## nthroot (-1, 3)
 ## @result{} -1
 ## (-1) ^ (1 / 3)
 ## @result{} 0.50000 - 0.86603i
diff --git a/scripts/geometry/rectint.m b/scripts/geometry/rectint.m
--- a/scripts/geometry/rectint.m
+++ b/scripts/geometry/rectint.m
@@ -20,18 +20,18 @@
 ## @deftypefn {Function File} {@var{area} =} rectint (@var{a}, @var{b})
 ##
 ## Compute the area of intersection of rectangles in @var{a} and
 ## rectangles in @var{b}.  Rectangles are defined as [x y width height]
 ## where x and y are the minimum values of the two orthogonal
 ## dimensions.
 ##
 ## If @var{a} or @var{b} are matrices, then the output, @var{area}, is a
-## matrix where the ith row corresponds to the ith row of a and the jth
-## column corresponds to the jth row of b.
+## matrix where the i-th row corresponds to the i-th row of a and the j-th
+## column corresponds to the j-th row of b.
 ##
 ## @seealso{polyarea}
 ## @end deftypefn
 
 ## Author: Bill Denney <bill@denney.ws>
 
 function area = rectint (a, b)
 	
diff --git a/scripts/linear-algebra/housh.m b/scripts/linear-algebra/housh.m
--- a/scripts/linear-algebra/housh.m
+++ b/scripts/linear-algebra/housh.m
@@ -15,17 +15,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{housv}, @var{beta}, @var{zer}] =} housh (@var{x}, @var{j}, @var{z})
 ## Compute Householder reflection vector @var{housv} to reflect @var{x}
-## to be the jth column of identity, i.e.,
+## to be the j-th column of identity, i.e.,
 ##
 ## @example
 ## @group
 ## (I - beta*housv*housv')x =  norm(x)*e(j) if x(1) < 0,
 ## (I - beta*housv*housv')x = -norm(x)*e(j) if x(1) >= 0
 ## @end group
 ## @end example
 ##
diff --git a/scripts/plot/ndgrid.m b/scripts/plot/ndgrid.m
--- a/scripts/plot/ndgrid.m
+++ b/scripts/plot/ndgrid.m
@@ -15,19 +15,19 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{y1}, @var{y2}, @dots{},  @var{y}n] =} ndgrid (@var{x1}, @var{x2}, @dots{}, @var{x}n)
 ## @deftypefnx {Function File} {[@var{y1}, @var{y2}, @dots{},  @var{y}n] =} ndgrid (@var{x})
 ## Given n vectors @var{x1}, @dots{} @var{x}n, @code{ndgrid} returns
-## n arrays of dimension n.  The elements of the ith output argument
+## n arrays of dimension n.  The elements of the i-th output argument
 ## contains the elements of the vector @var{x}i repeated over all
-## dimensions different from the ith dimension.  Calling ndgrid with
+## dimensions different from the i-th dimension.  Calling ndgrid with
 ## only one input argument @var{x} is equivalent of calling ndgrid with
 ## all n input arguments equal to @var{x}:
 ##
 ## [@var{y1}, @var{y2}, @dots{},  @var{y}n] = ndgrid (@var{x}, @dots{}, @var{x})
 ## @seealso{meshgrid}
 ## @end deftypefn
 
 ## Author: Alexander Barth <abarth@marine.usf.edu>
diff --git a/scripts/polynomial/mkpp.m b/scripts/polynomial/mkpp.m
--- a/scripts/polynomial/mkpp.m
+++ b/scripts/polynomial/mkpp.m
@@ -16,17 +16,17 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{pp} =} mkpp (@var{x}, @var{p})
 ## @deftypefnx {Function File} {@var{pp} =} mkpp (@var{x}, @var{p}, @var{d})
 ## 
 ## Construct a piece-wise polynomial structure from sample points
-## @var{x} and coefficients @var{p}.  The ith row of @var{p},
+## @var{x} and coefficients @var{p}.  The i-th row of @var{p},
 ## @code{@var{p} (@var{i},:)}, contains the coefficients for the polynomial
 ## over the @var{i}-th interval, ordered from highest to 
 ## lowest. There must be one row for each interval in @var{x}, so 
 ## @code{rows (@var{p}) == length (@var{x}) - 1}.  
 ##
 ## You can concatenate multiple polynomials of the same order over the 
 ## same set of intervals using @code{@var{p} = [ @var{p1}; @var{p2}; 
 ## @dots{}; @var{pd} ]}.  In this case, @code{rows (@var{p}) == @var{d} 
diff --git a/scripts/polynomial/residue.m b/scripts/polynomial/residue.m
--- a/scripts/polynomial/residue.m
+++ b/scripts/polynomial/residue.m
@@ -39,17 +39,17 @@
 ##  A(s)   m=1 (s-p(m))^e(m)    i=1
 ## @end example
 ## @end ifinfo
 ##
 ## @noindent
 ## where @math{M} is the number of poles (the length of the @var{r},
 ## @var{p}, and @var{e}), the @var{k} vector is a polynomial of order @math{N-1}
 ## representing the direct contribution, and the @var{e} vector specifies
-## the multiplicity of the mth residue's pole.
+## the multiplicity of the m-th residue's pole.
 ##
 ## For example,
 ##
 ## @example
 ## @group
 ## b = [1, 1, 1];
 ## a = [1, -5, 8, -4];
 ## [r, p, k, e] = residue (b, a);
