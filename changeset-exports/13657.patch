# HG changeset patch
# User ttl <ttl@justmail.de>
# Date 1314482608 -7200
#      Sun Aug 28 00:03:28 2011 +0200
# Node ID 347dfbea2c8a43c3405714037ccf0b7a264ee27c
# Parent  1347d498959cdafbf38e24182aed3dd2f515405c
modified editor files can be saved when main window is closed

diff --git a/gui/src/FileEditorMdiSubWindow.cpp b/gui/src/FileEditorMdiSubWindow.cpp
--- a/gui/src/FileEditorMdiSubWindow.cpp
+++ b/gui/src/FileEditorMdiSubWindow.cpp
@@ -12,17 +12,16 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
 #include "FileEditorMdiSubWindow.h"
-#include "MainWindow.h"
 #include <QVBoxLayout>
 #include <QApplication>
 #include <QFile>
 #include <QFont>
 #include <QFileDialog>
 #include <QMessageBox>
 #include <QStyle>
 #include <QTextStream>
@@ -35,25 +34,28 @@ FileEditorMdiSubWindow::FileEditorMdiSub
 
 FileEditorMdiSubWindow::~FileEditorMdiSubWindow ()
 {
 }
 
 void
 FileEditorMdiSubWindow::closeEvent(QCloseEvent *event)
 {
-  // ignore close event if file is not saved and user cancels closing this window
-  // TODO: This does not work if the main window is closed!
-  if (checkFileModified ("Close File")==QMessageBox::Cancel)
+  if ( m_mainWindow->isCloseApplication() )
     {
-      event->ignore();
+      // close wohle application: save file or not if modified
+      checkFileModified ("Close Octave GUI",0); // no cancel possible
     }
   else
     {
-      event->accept();
+      // ignore close event if file is not saved and user cancels closing this window
+      if (checkFileModified ("Close File",QMessageBox::Cancel)==QMessageBox::Cancel)
+        event->ignore();
+      else
+        event->accept();
     }
 }
 
 void
 FileEditorMdiSubWindow::handleMarginClicked(int margin, int line, Qt::KeyboardModifiers state)
 {
   Q_UNUSED (state);
   if ( margin == 1 )  // marker margin
@@ -84,17 +86,17 @@ FileEditorMdiSubWindow::handleCopyAvaila
   m_copyAction->setEnabled(enableCopy);
   m_cutAction->setEnabled(enableCopy);
 }
 
 
 void
 FileEditorMdiSubWindow::openFile ()
 {
-    if (checkFileModified ("Open File")==QMessageBox::Cancel)
+    if (checkFileModified ("Open File",QMessageBox::Cancel)==QMessageBox::Cancel)
       {
         return; // existing file not saved and opening another file canceled by user
       }
     QString openFileName;
     QFileDialog dlg(this);
     dlg.setNameFilter(SAVE_FILE_FILTER);
     dlg.setAcceptMode(QFileDialog::AcceptOpen);
     dlg.setViewMode(QFileDialog::Detail);
@@ -128,50 +130,52 @@ FileEditorMdiSubWindow::loadFile (QStrin
   setWindowTitle (fileName);
   m_statusBar->showMessage (tr ("File loaded."), 2000);
   m_editor->setModified (false); // loaded file is not modified yet
 }
 
 void
 FileEditorMdiSubWindow::newFile ()
 {
-    if (checkFileModified ("Open New File")==QMessageBox::Cancel)
+    if (checkFileModified ("Create New File",QMessageBox::Cancel)==QMessageBox::Cancel)
       {
         return; // existing file not saved and creating new file canceled by user
       }
     m_fileName = UNNAMED_FILE;
     setWindowTitle (m_fileName);
     m_editor->setText ("");
     m_editor->setModified (false); // new file is not modified yet
 }
 
 int
-FileEditorMdiSubWindow::checkFileModified (QString msg)
+FileEditorMdiSubWindow::checkFileModified (QString msg, int cancelButton)
 {
   int decision = QMessageBox::Yes;
   if (m_editor->isModified ())
     {
       // file is modified but not saved, aks user what to do
-      decision = QMessageBox::question (this,
+      decision = QMessageBox::warning (this,
                                         msg,
-                                        tr ("Do you want to save the current file\n%1 ?").
+                                        tr ("The file %1\n"
+                                            "has been modified. Do you want to save the changes?").
                                           arg (m_fileName),
-                                        QMessageBox::Cancel,
-                                        QMessageBox::No,
-                                        QMessageBox::Yes);
-
-      if (decision == QMessageBox::Yes)
+                                        QMessageBox::Save, QMessageBox::Discard, cancelButton );
+      if (decision == QMessageBox::Save)
         {
           saveFile ();
           if (m_editor->isModified ())
             {
               // If the user attempted to save the file, but it's still
               // modified, then probably something went wrong, so return cancel
-              // for cancel this operation
-              return (QMessageBox::Cancel);
+              // for cancel this operation or try to save files as if cancel not
+              // possible
+              if ( cancelButton )
+                return (QMessageBox::Cancel);
+              else
+                saveFileAs ();
             }
         }
     }
   return (decision);
 }
 
 void
 FileEditorMdiSubWindow::saveFile ()
@@ -326,21 +330,23 @@ FileEditorMdiSubWindow::prevBookmark ()
     line--; // we have a bookmark here, so start search from prev line
   prevline = m_editor->markerFindPrevious(line,(1 << MARKER_BOOKMARK));
   m_editor->setCursorPosition(prevline,0);
 }
 
 // function for setting the already existing lexer from MainWindow
 void
 FileEditorMdiSubWindow::initEditor (TerminalEmulation* terminalEmulation,
-                                    LexerOctaveGui* lexer)
+                                    LexerOctaveGui* lexer,
+                                    MainWindow* mainWindow)
 {
   m_editor->setLexer(lexer);
   m_terminalEmulation = terminalEmulation; // for sending commands to octave
                        // TODO: make a global commandOctave function?
+  m_mainWindow = mainWindow;  // get the MainWindow for chekcing state at subwindow close
 }
 
 // TODO: Do we still need tool tips in the status bar? Tool tips are now
 //       shown directly at the theme icons
 void
 FileEditorMdiSubWindow::showToolTipNew ()
 {
   m_statusBar->showMessage ("Create a new file", 2000);
diff --git a/gui/src/FileEditorMdiSubWindow.h b/gui/src/FileEditorMdiSubWindow.h
--- a/gui/src/FileEditorMdiSubWindow.h
+++ b/gui/src/FileEditorMdiSubWindow.h
@@ -14,16 +14,17 @@
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
 #ifndef FILEEDITORMDISUBWINDOW_H
 #define FILEEDITORMDISUBWINDOW_H
 
+#include "MainWindow.h"
 #include "TerminalEmulation.h"
 #include <QMdiSubWindow>
 #include <QToolBar>
 #include <QAction>
 #include <QMenuBar>
 #include <QStatusBar>
 #include <QCloseEvent>
 #include <Qsci/qsciscintilla.h>
@@ -40,17 +41,19 @@ enum MARKER
   };
 
 class FileEditorMdiSubWindow:public QMdiSubWindow
 {
 Q_OBJECT public:
   FileEditorMdiSubWindow (QWidget * parent = 0);
   ~FileEditorMdiSubWindow ();
   void loadFile (QString fileName);
-  void initEditor (TerminalEmulation *terminalEmulation, LexerOctaveGui *lexer);
+  void initEditor (TerminalEmulation *terminalEmulation,
+                   LexerOctaveGui *lexer,
+                   MainWindow *mainWindow);
 
 public slots:
 
   void newFile ();
   void openFile ();
   void saveFile ();
   void saveFile (QString fileName);
   void saveFileAs ();
@@ -62,27 +65,28 @@ public slots:
   void showToolTipUndo ();
   void showToolTipRedo ();
   void registerModified (bool modified);
 
 protected:
   void closeEvent(QCloseEvent *event);
 
 private:
-  int checkFileModified (QString msg);
+  int checkFileModified (QString msg, int cancelButton);
   void construct ();
   void doCommentSelectedText (bool comment);
   QMenuBar *m_menuBar;
   QToolBar *m_toolBar;
   QsciScintilla *m_editor;
   QStatusBar *m_statusBar;
   QString m_fileName;
   TerminalEmulation* m_terminalEmulation;
   QAction* m_copyAction;
   QAction* m_cutAction;
+  MainWindow* m_mainWindow;
   int m_markerBookmark;
   bool m_modified;
 
 private slots:
   void handleModificationChanged(bool modified);
   void handleMarginClicked(int line, int margin, Qt::KeyboardModifiers state);
   void handleCopyAvailable(bool enableCopy);
   void runFile();
diff --git a/gui/src/MainWindow.cpp b/gui/src/MainWindow.cpp
--- a/gui/src/MainWindow.cpp
+++ b/gui/src/MainWindow.cpp
@@ -91,17 +91,17 @@ MainWindow::openEditorFile (QString file
        keywordList = keyword.split(QRegExp("\\s+"));  // split into single strings
        int i;
        for ( i=0; i<keywordList.size(); i++ )
          {
            m_lexerAPI->add(keywordList.at(i));  // add single strings to the API
          }
        m_lexerAPI->prepare();           // prepare API info ... this make take some time
     }
-  subWindow->initEditor(m_terminalView->terminalEmulation(), m_lexer);   // init necessary informations for editor
+  subWindow->initEditor(m_terminalView->terminalEmulation(), m_lexer, this);   // init necessary informations for editor
 
   if ( fileName.isEmpty() )
     subWindow->newFile ();
   else
     subWindow->loadFile (fileName);
 }
 
 
@@ -232,18 +232,20 @@ MainWindow::showAboutQt ()
   QMessageBox::aboutQt (this);
 }
 
 void
 MainWindow::closeEvent (QCloseEvent * closeEvent)
 {
   reportStatusMessage (tr ("Saving data and shutting down."));
   writeSettings ();
-
+  m_closeApplication = true;  // inform editor window that whole application is closed
   OctaveLink::instance ()->terminateOctave();
+  m_centralMdiArea->closeAllSubWindows();   // send close events to subwindows
+                                            // (editor files can be saved!)
   QMainWindow::closeEvent (closeEvent);
 }
 
 void
 MainWindow::readSettings ()
 {
   QSettings *settings = ResourceManager::instance ()->settings ();
   restoreGeometry (settings->value ("MainWindow/geometry").toByteArray ());
@@ -259,16 +261,17 @@ MainWindow::writeSettings ()
   settings->setValue ("MainWindow/geometry", saveGeometry ());
   settings->setValue ("MainWindow/windowState", saveState ());
   settings->setValue ("MdiArea/geometry", m_centralMdiArea->saveGeometry ());
 }
 
 void
 MainWindow::construct ()
 {
+  m_closeApplication = false;   // flag for editor files when closed
   setWindowIcon (ResourceManager::instance ()->icon (ResourceManager::Octave));
 
   // Initialize MDI area.
   m_centralMdiArea = new QMdiArea (this);
   m_centralMdiArea->setObjectName ("CentralMdiArea");
   m_centralMdiArea->setViewMode (QMdiArea::TabbedView);
 
   // Setup dockable widgets and the status bar.
diff --git a/gui/src/MainWindow.h b/gui/src/MainWindow.h
--- a/gui/src/MainWindow.h
+++ b/gui/src/MainWindow.h
@@ -74,16 +74,21 @@ Q_OBJECT public:
   HistoryDockWidget *historyDockWidget ()
   {
     return m_historyDockWidget;
   }
   FilesDockWidget *filesDockWidget ()
   {
     return m_filesDockWidget;
   }
+  bool isCloseApplication ()
+  {
+    return m_closeApplication;
+  }
+
 signals:
   void settingsChanged ();
 
 public slots:
   void handleOpenFileRequest (QString fileName);
   void reportStatusMessage (QString statusMessage);
   void openWebPage (QString url);
   void handleSaveWorkspaceRequest ();
@@ -127,11 +132,14 @@ private:
 
   // Editor's lexer
   LexerOctaveGui *m_lexer;
   QsciAPIs *m_lexerAPI;
 
   // Toolbars.
   QStatusBar *m_statusBar;
 
+  // Flag for closing whole application
+  bool m_closeApplication;
+
 };
 
 #endif // MAINWINDOW_H
