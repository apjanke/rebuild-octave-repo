# HG changeset patch
# User dbateman
# Date 1173388379 0
#      Thu Mar 08 21:12:59 2007 +0000
# Node ID e4d3e9bddff3a892165b468b4d244632804625fe
# Parent  9bd49ed48ee6538630683ce91c1c44ed9bf4f0d4
[project @ 2007-03-08 21:12:59 by dbateman]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2007-03-08  David Bateman  <dbateman@free.fr>
+
+	* data.cc (do_cat): Ignore leading empty matrices.
+
 2007-03-07  Bob Weigel  <rweigel@gmu.edu>
 
 	* urlwrite.cc (urlget): Allow URL redirects.
 
 2007-03-05  David Bateman  <dbateman@free.fr>
 
 	* DLD-FUNCTIONS/md5sum.cc (Fmd5sum): Treat both files and strings.
 
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -731,40 +731,41 @@ do_cat (const octave_value_list& args, s
 	  //
 	  // We might also start with a empty octave_value using
 	  //   tmp = octave_value_typeinfo::lookup_type (args(1).type_name());
 	  // and then directly resize. However, for some types there might be
 	  // some additional setup needed, and so this should be avoided.
 
 	  octave_value tmp;
 
-          for (int i = 1; i < n_args; i++)
+	  int i;
+          for (i = 1; i < n_args; i++)
 	    {
 	      if (! args (i).all_zero_dims ())
 		{
 		  tmp = args (i);
 		  break;
 		}
 	    }
 
 	  tmp = tmp.resize (dim_vector (0,0)).resize (dv);
 
 	  if (error_state)
 	    return retval;
 
 	  Array<int> ra_idx (dv.length (), 0);
 
-	  for (int i = 1; i < n_args; i++)
+	  for (int j = i; j < n_args; j++)
 	    {
-	      tmp = do_cat_op (tmp, args (i), ra_idx);
+	      tmp = do_cat_op (tmp, args (j), ra_idx);
 
 	      if (error_state)
 		return retval;
 
-	      dim_vector dv_tmp = args (i).dims ();
+	      dim_vector dv_tmp = args (j).dims ();
 
 	      ra_idx (dim) += (dim < dv_tmp.length () ? dv_tmp (dim) : 1);
 	    }
 
 	  retval = tmp;
 	}
       else
 	error ("%s: invalid dimension argument", fname.c_str ());
