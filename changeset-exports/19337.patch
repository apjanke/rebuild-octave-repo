# HG changeset patch
# User Philipp Kutin <philipp.kutin@gmail.com>
# Date 1416566886 -3600
#      Fri Nov 21 11:48:06 2014 +0100
# Node ID d47e50953abcbe9385d5642390e5f4e0b834c337
# Parent  3a905b642408ea246861dc30dc8bc1be8867d530
Fix compilation of four of the six liboctave/numeric/*QR.cc (bug #43646).

* CmplxQR.cc (shift_cols): Use dim_vector, not octave_idx_type, in Array
constructor.

* dbleQR.cc (shift_cols): Use dim_vector, not octave_idx_type, in Array
constructor.

* fCmplxQR.cc: (shift_cols): Use dim_vector, not octave_idx_type, in Array
constructor.

* floatQR.cc: (shift_cols): Use dim_vector, not octave_idx_type, in Array
constructor.

diff --git a/liboctave/numeric/CmplxQR.cc b/liboctave/numeric/CmplxQR.cc
--- a/liboctave/numeric/CmplxQR.cc
+++ b/liboctave/numeric/CmplxQR.cc
@@ -544,17 +544,17 @@ ComplexMatrix delete_row (const ComplexM
   return retval;
 }
 
 static
 ComplexMatrix shift_cols (const ComplexMatrix& a,
                           octave_idx_type i, octave_idx_type j)
 {
   octave_idx_type n = a.columns ();
-  Array<octave_idx_type> p (n);
+  Array<octave_idx_type> p (dim_vector (1, n));
   for (octave_idx_type k = 0; k < n; k++) p(k) = k;
   if (i < j)
     {
       for (octave_idx_type k = i; k < j; k++) p(k) = k+1;
       p(j) = i;
     }
   else if (j < i)
     {
diff --git a/liboctave/numeric/dbleQR.cc b/liboctave/numeric/dbleQR.cc
--- a/liboctave/numeric/dbleQR.cc
+++ b/liboctave/numeric/dbleQR.cc
@@ -539,17 +539,17 @@ Matrix delete_row (const Matrix& a, octa
   return retval;
 }
 
 static
 Matrix shift_cols (const Matrix& a,
                    octave_idx_type i, octave_idx_type j)
 {
   octave_idx_type n = a.columns ();
-  Array<octave_idx_type> p (n);
+  Array<octave_idx_type> p (dim_vector (1, n));
   for (octave_idx_type k = 0; k < n; k++) p(k) = k;
   if (i < j)
     {
       for (octave_idx_type k = i; k < j; k++) p(k) = k+1;
       p(j) = i;
     }
   else if (j < i)
     {
diff --git a/liboctave/numeric/fCmplxQR.cc b/liboctave/numeric/fCmplxQR.cc
--- a/liboctave/numeric/fCmplxQR.cc
+++ b/liboctave/numeric/fCmplxQR.cc
@@ -552,17 +552,17 @@ FloatComplexMatrix delete_row (const Flo
   return retval;
 }
 
 static
 FloatComplexMatrix shift_cols (const FloatComplexMatrix& a,
                                octave_idx_type i, octave_idx_type j)
 {
   octave_idx_type n = a.columns ();
-  Array<octave_idx_type> p (n);
+  Array<octave_idx_type> p (dim_vector (1, n));
   for (octave_idx_type k = 0; k < n; k++) p(k) = k;
   if (i < j)
     {
       for (octave_idx_type k = i; k < j; k++) p(k) = k+1;
       p(j) = i;
     }
   else if (j < i)
     {
diff --git a/liboctave/numeric/floatQR.cc b/liboctave/numeric/floatQR.cc
--- a/liboctave/numeric/floatQR.cc
+++ b/liboctave/numeric/floatQR.cc
@@ -537,17 +537,17 @@ FloatMatrix delete_row (const FloatMatri
   return retval;
 }
 
 static
 FloatMatrix shift_cols (const FloatMatrix& a,
                         octave_idx_type i, octave_idx_type j)
 {
   octave_idx_type n = a.columns ();
-  Array<octave_idx_type> p (n);
+  Array<octave_idx_type> p (dim_vector (1, n));
   for (octave_idx_type k = 0; k < n; k++) p(k) = k;
   if (i < j)
     {
       for (octave_idx_type k = i; k < j; k++) p(k) = k+1;
       p(j) = i;
     }
   else if (j < i)
     {
