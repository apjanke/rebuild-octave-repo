# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1236451539 18000
#      Sat Mar 07 13:45:39 2009 -0500
# Node ID d75f4ee0538dd7f8417d9aab0246a17dca147b57
# Parent  e1d732d68b208ca1d8429a387a0882b72d6c40e5
qz.cc (Fqz): avoid maybe clobbred by vfork warning from GCC

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,13 @@
 2009-03-07  John W. Eaton  <jwe@octave.org>
 
+	* DLD-FUNCTIONS/qz.cc (Fqz): Avoid "maybe clobbered by vfork"
+	warning from GCC.
+
 	* version.h (OCTAVE_VERSION): Now 3.1.54.
 	(OCTAVE_API_VERSION): Now api-v36.
 	(OCTAVE_RELEASE_DATE): Now 2009-03-07.
 
 	* octave.cc (verbose_usage): Include --doc-cache-file in option list.
 
 2009-03-06  Jaroslav Hajek  <highegg@gmail.com>
 
diff --git a/src/DLD-FUNCTIONS/qz.cc b/src/DLD-FUNCTIONS/qz.cc
--- a/src/DLD-FUNCTIONS/qz.cc
+++ b/src/DLD-FUNCTIONS/qz.cc
@@ -301,35 +301,37 @@ Order of output arguments was selected f
       return retval;
     }
 
 #ifdef DEBUG
   std::cout << "qz: determine ordering option" << std::endl;
 #endif
 
   // Determine ordering option
-  std::string ord_job;
+  volatile char ord_job = 0;
   static double safmin;
 
   if (nargin == 2)
-    ord_job = "N";
+    ord_job = 'N';
   else if (!args(2).is_string ())
     {
       error ("qz: argument 3 must be a string");
       return retval;
     }
   else
     {
-      ord_job = args(2).string_value ();
+      std::string tmp = args(2).string_value ();
+
+      if (! tmp.empty ())
+	ord_job = tmp[0];
 
-      if (ord_job[0] != 'N'
-	  && ord_job[0] != 'S'
-	  && ord_job[0] != 'B'
-	  && ord_job[0] != '+'
-	  && ord_job[0] != '-')
+      if (! (ord_job == 'N' || ord_job == 'n'
+	     || ord_job == 'S' || ord_job == 's'
+	     || ord_job == 'B' || ord_job == 'b'
+	     || ord_job == '+' || ord_job == '-'))
 	{
 	  error ("qz: invalid order option");
 	  return retval;
 	}
 
       // overflow constant required by dlag2
       F77_FUNC (xdlamch, XDLAMCH) (F77_CONST_CHAR_ARG2 ("S", 1),
 				   safmin
@@ -598,41 +600,44 @@ Order of output arguments was selected f
 		 betar.fortran_vec (), QQ.fortran_vec (), nn,
 		 ZZ.fortran_vec (), nn, work.fortran_vec (), nn, info
 		 F77_CHAR_ARG_LEN (1)
 		 F77_CHAR_ARG_LEN (1)
 		 F77_CHAR_ARG_LEN (1)));
     }
 
   // order the QZ decomposition?
-  if (ord_job[0] != 'N')
+  if (! (ord_job == 'N' || ord_job == 'n'))
     {
       if (complex_case)
 	{
 	  // probably not needed, but better be safe
 	  error ("qz: cannot re-order complex qz decomposition.");
 	  return retval;
 	}
       else
 	{
 #ifdef DEBUG_SORT
-	  std::cout << "qz: ordering eigenvalues: ord_job = " << ord_job[0] << std::endl;
+	  std::cout << "qz: ordering eigenvalues: ord_job = "
+		    << ord_job << std::endl;
 #endif
 
 	  // declared static to avoid vfork/long jump compiler complaints
 	  static sort_function sort_test;
 	  sort_test = 0;
 
-	  switch (ord_job[0])
+	  switch (ord_job)
 	    {
 	    case 'S':
+	    case 's':
 	      sort_test = &fin;
 	      break;
 
 	    case 'B':
+	    case 'b':
 	      sort_test = &fout;
 	      break;
 
 	    case '+':
 	      sort_test = &fcrhp;
 	      break;
 
 	    case '-':
