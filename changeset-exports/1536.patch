# HG changeset patch
# User jwe
# Date 812872280 0
#      Thu Oct 05 05:51:20 1995 +0000
# Node ID 26411f9c7603c498d6d5697263ffe401e14bdd2b
# Parent  5f3f07b6db89afcd055d2170da0bc035ba6af15f
[project @ 1995-10-05 05:41:26 by jwe]

diff --git a/liboctave/DAE.h b/liboctave/DAE.h
--- a/liboctave/DAE.h
+++ b/liboctave/DAE.h
@@ -27,51 +27,49 @@ Software Foundation, 59 Temple Place - S
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
 #include "dColVector.h"
 #include "ODE.h"
 #include "DAEFunc.h"
 
-#ifndef Vector
-#define Vector ColumnVector
-#endif
-
 class DAE : public ODE, public DAEFunc
 {
 public:
 
   DAE (void);
 
   DAE (int);
 
-  DAE (const Vector& x, double time, DAEFunc& f);
+  DAE (const ColumnVector& x, double time, DAEFunc& f);
 
-  DAE (const Vector& x, const Vector& xdot, double time, DAEFunc& f);
+  DAE (const ColumnVector& x, const ColumnVector& xdot,
+       double time, DAEFunc& f);
 
  ~DAE (void);
 
-  Vector deriv (void);
+  ColumnVector deriv (void);
 
-  virtual void initialize (const Vector& x, double t);
-  virtual void initialize (const Vector& x, const Vector& xdot, double t);
+  virtual void initialize (const ColumnVector& x, double t);
+  virtual void initialize (const ColumnVector& x,
+			   const ColumnVector& xdot, double t);
 
-  Vector integrate (double t);
+  ColumnVector integrate (double t);
 
-  Matrix integrate (const Vector& tout, Matrix& xdot_out);
-  Matrix integrate (const Vector& tout, Matrix& xdot_out,
-		    const Vector& tcrit); 
+  Matrix integrate (const ColumnVector& tout, Matrix& xdot_out);
+  Matrix integrate (const ColumnVector& tout, Matrix& xdot_out,
+		    const ColumnVector& tcrit); 
 
 protected:
 
   // Some of this is probably too closely related to DASSL, but hey,
   // this is just a first attempt...
 
-  Vector xdot;
+  ColumnVector xdot;
 
 private:
 
   int integration_error;
   int restart;
   int liw;  
   int lrw;
   int idid;
diff --git a/liboctave/FSQP.h b/liboctave/FSQP.h
--- a/liboctave/FSQP.h
+++ b/liboctave/FSQP.h
@@ -27,20 +27,16 @@ Software Foundation, 59 Temple Place - S
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
 #ifndef FSQP_MISSING
 
 #include "NLP.h"
 
-#ifndef Vector
-#define Vector ColumnVector
-#endif
-
 class FSQP : public NLP
 {
  public:
  private:
 };
 
 #endif
 #endif
diff --git a/liboctave/LP.h b/liboctave/LP.h
--- a/liboctave/LP.h
+++ b/liboctave/LP.h
@@ -19,20 +19,16 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 #if !defined (octave_LP_h)
 #define octave_LP_h 1
 
-#if defined (__GNUG__)
-#pragma interface
-#endif
-
 #include "dColVector.h"
 #include "Bounds.h"
 #include "LinConst.h"
 #include "base-min.h"
 
 class LP : public base_minimizer
 {
  public:
diff --git a/liboctave/LinConst.h b/liboctave/LinConst.h
--- a/liboctave/LinConst.h
+++ b/liboctave/LinConst.h
@@ -32,39 +32,35 @@ class ostream;
 
 class ColumnVector;
 
 #include <cfloat>
 
 #include "dMatrix.h"
 #include "Bounds.h"
 
-#ifndef Vector
-#define Vector ColumnVector
-#endif
-
 class LinConst : public Bounds
 {
 public:
 
   LinConst (void) : Bounds () { }
   LinConst (int nc, int n) : Bounds (nc), A (nb, n) {}
 
   LinConst (int eq, int ineq, int n)
     : Bounds (eq+ineq), A (nb, n) {}
 
-  LinConst (const Vector& l, const Matrix& amat, const Vector& u)
+  LinConst (const ColumnVector& l, const Matrix& amat, const ColumnVector& u)
     : Bounds (l, u), A (amat)
       {
 	if (nb != amat.rows ())
 	  error ("inconsistent sizes for constraint matrix and bounds vectors");
       }
 
-  LinConst (const Matrix& A_eq, const Vector& b_eq,
-	    const Matrix& A_ineq, const Vector& b_ineq);
+  LinConst (const Matrix& A_eq, const ColumnVector& b_eq,
+	    const Matrix& A_ineq, const ColumnVector& b_ineq);
 
   LinConst (const LinConst& a)
     : Bounds (a.lb, a.ub), A (a.constraint_matrix ()) {}
 
   LinConst& operator = (const LinConst& a)
     {
       nb = a.nb;
       lb = a.lb;
@@ -86,18 +82,18 @@ public:
       A = amat;
 
       return *this;
     }
 
   Matrix eq_constraint_matrix (void) const;
   Matrix ineq_constraint_matrix (void) const;
 
-  Vector eq_constraint_vector (void) const;
-  Vector ineq_constraint_vector (void) const;
+  ColumnVector eq_constraint_vector (void) const;
+  ColumnVector ineq_constraint_vector (void) const;
 
   friend ostream& operator << (ostream& os, const LinConst& b);
 
 protected:
 
   Matrix A;
 
 private:
diff --git a/liboctave/Makefile.in b/liboctave/Makefile.in
--- a/liboctave/Makefile.in
+++ b/liboctave/Makefile.in
@@ -39,18 +39,18 @@ TI_SRC = Array-C.cc Array-i.cc Array-d.c
 MATRIX_SRC = CColVector.cc CDiagMatrix.cc CMatrix.cc CRowVector.cc \
 	CmplxAEPBAL.cc CmplxCHOL.cc CmplxDET.cc CmplxHESS.cc CmplxLU.cc \
 	CmplxQR.cc CmplxQRP.cc CmplxSCHUR.cc CmplxSVD.cc EIG.cc \
 	dColVector.cc dDiagMatrix.cc dMatrix.cc dRowVector.cc \
 	dbleAEPBAL.cc dbleCHOL.cc dbleDET.cc dbleGEPBAL.cc dbleHESS.cc \
 	dbleLU.cc dbleQR.cc dbleQRP.cc dbleSCHUR.cc dbleSVD.cc
 
 SOURCES = Bounds.cc CollocWt.cc DAE.cc FEGrid.cc FSQP.cc LinConst.cc \
-	LPsolve.cc NLEqn.cc NPSOL.cc Objective.cc ODE.cc QLD.cc \
-	QPSOL.cc Quad.cc Range.cc lo-error.cc sun-utils.cc \
+	LPsolve.cc NLEqn.cc NPSOL.cc ODE.cc QLD.cc QPSOL.cc Quad.cc \
+	Range.cc lo-error.cc sun-utils.cc \
 	$(TEMPLATE_SRC) \
 	$(TI_SRC) \
 	$(MATRIX_SRC)
 
 EXTRAS = mx-inlines.cc
 
 DISTFILES = Makefile.in $(SOURCES) $(INCLUDES) $(EXTRAS)
 
diff --git a/liboctave/NLEqn.cc b/liboctave/NLEqn.cc
--- a/liboctave/NLEqn.cc
+++ b/liboctave/NLEqn.cc
@@ -24,19 +24,16 @@ Software Foundation, 59 Temple Place - S
 #if defined (__GNUG__)
 #pragma implementation
 #endif
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
-#include <cfloat>
-#include <cmath>
-
 #include "NLEqn.h"
 #include "dMatrix.h"
 #include "f77-uscore.h"
 #include "lo-error.h"
 
 extern "C"
 {
   int F77_FCN (hybrd1, HYBRD1) (int (*)(int*, double*, double*, int*),
@@ -46,112 +43,47 @@ extern "C"
 
   int F77_FCN (hybrj1, HYBRJ1) (int (*)(int*, double*, double*,
 					double*, int*, int*),
 				const int&, double*, double*, double*,
 				const int&, const double&, int&,
 				double*, const int&);
 }
 
-static nonlinear_fcn user_fun;
-static jacobian_fcn user_jac;
+static NLFunc::nonlinear_fcn user_fun;
+static NLFunc::jacobian_fcn user_jac;
 
 // error handling
 
 void
 NLEqn::error (const char* msg)
 {
   (*current_liboctave_error_handler) ("fatal NLEqn error: %s", msg);
 }
 
-// Constructors
-
-NLEqn::NLEqn (void) : NLFunc (), n (0), x () { }
-
-NLEqn::NLEqn (const Vector& xvec, const NLFunc f) 
-  : NLFunc (f), n (xvec.capacity ()), x (xvec) { }
-
-NLEqn::NLEqn (const NLEqn& a) : NLFunc (a.fun, a.jac), n (a.n), x (a.x) { }
-
 void
-NLEqn::resize (int nn)
-{
-  if (n != nn)
-    {
-      n = nn;
-      x.resize (n);
-    }
-}
-
-int
-NLEqn::size (void) const
-{
-  return n;
-}
-
-// Assignment
-
-NLEqn&
-NLEqn::operator = (const NLEqn& a)
-{
-  fun = a.fun;
-  jac = a.jac;
-  x = a.n;
-
-  return *this;
-}
-
-Vector
-NLEqn::states (void) const
-{
-  return x;
-}
-
-void
-NLEqn::set_states (const Vector& xvec)
+NLEqn::set_states (const ColumnVector& xvec)
 {
   if (xvec.capacity () != n)
     {
       error ("dimension error");
       return;
     }
 
   x = xvec;
 }
 
 // Other operations
 
-Vector
-NLEqn::solve (const Vector& xvec)
-{
-  set_states (xvec);
-  int info;
-  return solve (info);
-}
-
-Vector
-NLEqn::solve (const Vector& xvec, int& info)
-{
-  set_states (xvec);
-  return solve (info);
-}
-
-Vector
-NLEqn::solve (void)
-{
-  int info;
-  return solve (info);
-}
-
 int
 hybrd1_fcn (int *n, double *x, double *fvec, int *iflag)
 {
   int nn = *n;
-  Vector tmp_f (nn);
-  Vector tmp_x (nn);
+  ColumnVector tmp_f (nn);
+  ColumnVector tmp_x (nn);
 
   for (int i = 0; i < nn; i++)
     tmp_x.elem (i) = x[i];
 
   tmp_f = (*user_fun) (tmp_x);
 
   if (tmp_f.length () == 0)
     *iflag = -1;
@@ -164,25 +96,25 @@ hybrd1_fcn (int *n, double *x, double *f
   return 0;
 }
 
 int
 hybrj1_fcn (int *n, double *x, double *fvec, double *fjac,
 	    int *ldfjac, int *iflag)
 {
   int nn = *n;
-  Vector tmp_x (nn);
+  ColumnVector tmp_x (nn);
 
   for (int i = 0; i < nn; i++)
     tmp_x.elem (i) = x[i];
 
   int flag = *iflag;
   if (flag == 1)
     {
-      Vector tmp_f (nn);
+      ColumnVector tmp_f (nn);
 
       tmp_f = (*user_fun) (tmp_x);
 
       if (tmp_f.length () == 0)
 	*iflag = -1;
       else
 	{
 	  for (int i = 0; i < nn; i++)
@@ -204,23 +136,25 @@ hybrj1_fcn (int *n, double *x, double *f
 	    for (int i = 0; i < nn; i++)
 	      fjac[j*ld+i] = tmp_fj.elem (i, j);
 	}
     }
 
   return 0;
 }
 
-Vector
+ColumnVector
 NLEqn::solve (int& info)
 {
+  ColumnVector retval;
+
   if (n == 0)
     {
       error ("equation set not initialized");
-      return Vector ();
+      return retval;
     }
 
   double tol = tolerance ();
 
   double *fvec = new double [n];
   double *px = new double [n];
   for (int i = 0; i < n; i++)
     px[i] = x.elem (i);
@@ -246,84 +180,28 @@ NLEqn::solve (int& info)
       double *wa = new double [lwa];
 
       F77_FCN (hybrd1, HYBRD1) (hybrd1_fcn, n, px, fvec, tol, info,
 				wa, lwa);
 
       delete [] wa;
     }
 
-  Vector retval;
-
   if (info >= 0)
     {
       retval.resize (n);
 
       for (int i = 0; i < n; i++)
 	retval.elem (i) = px[i];
     }
 
   delete [] fvec;
   delete [] px;
 
   return retval;
 }
 
-NLEqn_options::NLEqn_options (void)
-{
-  init ();
-}
-
-NLEqn_options::NLEqn_options (const NLEqn_options& opt)
-{
-  copy (opt);
-}
-
-NLEqn_options&
-NLEqn_options::operator = (const NLEqn_options& opt)
-{
-  if (this != &opt)
-    copy (opt);
-
-  return *this;
-}
-
-NLEqn_options::~NLEqn_options (void)
-{
-}
-
-void
-NLEqn_options::init (void)
-{
-  double sqrt_eps = sqrt (DBL_EPSILON);
-  x_tolerance = sqrt_eps;
-}
-
-void
-NLEqn_options::copy (const NLEqn_options& opt)
-{
-  x_tolerance = opt.x_tolerance;
-}
-
-void
-NLEqn_options::set_default_options (void)
-{
-  init ();
-}
-
-void
-NLEqn_options::set_tolerance (double val)
-{
-  x_tolerance = (val > 0.0) ? val : sqrt (DBL_EPSILON);
-}
-
-double
-NLEqn_options::tolerance (void)
-{
-  return x_tolerance;
-}
-
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/NLFunc.h b/liboctave/NLFunc.h
--- a/liboctave/NLFunc.h
+++ b/liboctave/NLFunc.h
@@ -19,30 +19,26 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 #if !defined (octave_NLFunc_h)
 #define octave_NLFunc_h 1
 
-#if defined (__GNUG__)
-#pragma interface
-#endif
-
 class ColumnVector;
 class Matrix;
 
-typedef ColumnVector (*nonlinear_fcn) (const ColumnVector&);
-typedef Matrix (*jacobian_fcn) (const ColumnVector&);
-
 class NLFunc
 {
 public:
 
+  typedef ColumnVector (*nonlinear_fcn) (const ColumnVector&);
+  typedef Matrix (*jacobian_fcn) (const ColumnVector&);
+
   NLFunc (void)
     {
       fun = 0;
       jac = 0;
     }
 
   NLFunc (const nonlinear_fcn f)
     {
diff --git a/liboctave/NPSOL.cc b/liboctave/NPSOL.cc
--- a/liboctave/NPSOL.cc
+++ b/liboctave/NPSOL.cc
@@ -59,20 +59,20 @@ extern "C"
 }
 
 // XXX FIXME XXX -- would be nice to not have to have this global
 // variable.
 // Nonzero means an error occurred in the calculation of the objective
 // function, and the user wants us to quit.
 int npsol_objective_error = 0;
 
-static objective_fcn user_phi;
-static gradient_fcn user_grad;
-static nonlinear_fcn user_g;
-static jacobian_fcn user_jac;
+static Objective::objective_fcn user_phi;
+static Objective::gradient_fcn user_grad;
+static NLFunc::nonlinear_fcn user_g;
+static NLFunc::jacobian_fcn user_jac;
 
 int
 npsol_objfun (int& mode, const int& n, double *xx, double *objf,
 	      double *objgrd, int *)
 {
   ColumnVector tmp_x (n);
 
   npsol_objective_error = 0;
diff --git a/liboctave/ODEFunc.h b/liboctave/ODEFunc.h
--- a/liboctave/ODEFunc.h
+++ b/liboctave/ODEFunc.h
@@ -19,49 +19,73 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 #if !defined (octave_ODEFunc_h)
 #define octave_ODEFunc_h 1
 
-#if defined (__GNUG__)
-#pragma interface
-#endif
-
 class Matrix;
 class ColumnVector;
 
-#ifndef Vector
-#define Vector ColumnVector
-#endif
-
 class ODEFunc
 {
 public:
 
-  typedef Vector (*ODERHSFunc) (const Vector&, double);
-  typedef Matrix (*ODEJacFunc) (const Vector&, double);
+  typedef ColumnVector (*ODERHSFunc) (const ColumnVector&, double);
+  typedef Matrix (*ODEJacFunc) (const ColumnVector&, double);
+
+  ODEFunc (void)
+    {
+      fun = 0;
+      jac = 0;
+    }
 
-  ODEFunc (void);
-  ODEFunc (ODERHSFunc f);
-  ODEFunc (ODERHSFunc f, ODEJacFunc j);
+  ODEFunc (ODERHSFunc f)
+    {
+      fun = f;
+      jac = 0;
+    }
 
-  ODEFunc (const ODEFunc& a);
+  ODEFunc (ODERHSFunc f, ODEJacFunc j)
+    {
+      fun = f;
+      jac = j;
+    }
 
-  ODEFunc& operator = (const ODEFunc& a);
+  ODEFunc (const ODEFunc& a)
+    {
+      fun = a.function ();
+      jac = a.jacobian_function ();
+    }
 
-  ODERHSFunc function (void) const;
+  ODEFunc& operator = (const ODEFunc& a)
+    {
+      fun = a.function ();
+      jac = a.jacobian_function ();
+
+      return *this;
+    }
 
-  ODEFunc& set_function (ODERHSFunc f);
+  ODERHSFunc function (void) const { return fun; }
+
+  ODEFunc& set_function (ODERHSFunc f)
+    {
+      fun = f;
+      return *this;
+    }
 
-  ODEJacFunc jacobian_function (void) const;
+  ODEJacFunc jacobian_function (void) const { return jac; }
 
-  ODEFunc& set_jacobian_function (ODEJacFunc j);
+  ODEFunc& set_jacobian_function (ODEJacFunc j)
+    {
+      jac = j;
+      return *this;
+    }
 
 protected:
 
   ODERHSFunc fun;
 
   ODEJacFunc jac;
 };
 
diff --git a/liboctave/Objective.h b/liboctave/Objective.h
--- a/liboctave/Objective.h
+++ b/liboctave/Objective.h
@@ -19,48 +19,72 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 #if !defined (octave_Objective_h)
 #define octave_Objective_h 1
 
-#if defined (__GNUG__)
-#pragma interface
-#endif
-
 #include "dColVector.h"
 
-#ifndef Vector
-#define Vector ColumnVector
-#endif
-
-typedef double (*objective_fcn) (const Vector&);
-typedef Vector (*gradient_fcn) (const Vector&);
-
 class Objective
 {
  public:
 
-  Objective (void);
-  Objective (const objective_fcn);
-  Objective (const objective_fcn, const gradient_fcn);
+  typedef double (*objective_fcn) (const ColumnVector&);
+  typedef ColumnVector (*gradient_fcn) (const ColumnVector&);
+
+  Objective (void)
+    {
+      phi = 0;
+      grad = 0;
+    }
 
-  Objective (const Objective& a);
+  Objective (const objective_fcn obj)
+    {
+      phi = obj;
+      grad = 0;
+    }
 
-  Objective& operator = (const Objective& a);
+  Objective (const objective_fcn obj, const gradient_fcn g)
+    {
+      phi = obj;
+      grad = g;
+    }
 
-  objective_fcn objective_function (void) const;
+  Objective (const Objective& a)
+    {
+      phi = a.phi;
+      grad = a.grad;
+    }
 
-  Objective& set_objective_function (const objective_fcn);
+  Objective& operator = (const Objective& a)
+    {
+      phi = a.phi;
+      grad = a.grad;
+
+      return *this;
+    }
 
-  gradient_fcn gradient_function (void) const;
+  objective_fcn objective_function (void) const { return phi; }
+
+  Objective& set_objective_function (const objective_fcn obj)
+    {
+      phi = obj;
+      return *this;
+    }
 
-  Objective& set_gradient_function (const gradient_fcn);
+  gradient_fcn gradient_function (void) const { return grad; }
+
+  Objective& set_gradient_function (const gradient_fcn g)
+    {
+      grad = g;
+      return *this;
+    }
 
  private:
 
   objective_fcn phi;
   gradient_fcn grad;
 
 };
 
diff --git a/liboctave/QLD.h b/liboctave/QLD.h
--- a/liboctave/QLD.h
+++ b/liboctave/QLD.h
@@ -28,20 +28,16 @@ Software Foundation, 59 Temple Place - S
 #pragma interface
 #endif
 
 class Matrix;
 class ColumnVector;
 
 #include "QP.h"
 
-#ifndef Vector
-#define Vector ColumnVector
-#endif
-
 class QLD : public QP
 {
  public:
 
   QLD (void) : QP ()
     { set_default_options (); }
 
   QLD (const ColumnVector& x, const Matrix& H) : QP (x, H)
diff --git a/liboctave/QPSOL.h b/liboctave/QPSOL.h
--- a/liboctave/QPSOL.h
+++ b/liboctave/QPSOL.h
@@ -29,20 +29,16 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #ifndef QPSOL_MISSING
 
 #include "dMatrix.h"
 #include "dColVector.h"
 #include "QP.h"
 
-#ifndef Vector
-#define Vector ColumnVector
-#endif
-
 class QPSOL_options
 {
  public:
 
   QPSOL_options (void);
   QPSOL_options (const QPSOL_options& opt);
 
   QPSOL_options& operator = (const QPSOL_options& opt);
diff --git a/liboctave/Quad.h b/liboctave/Quad.h
--- a/liboctave/Quad.h
+++ b/liboctave/Quad.h
@@ -23,16 +23,19 @@ Software Foundation, 59 Temple Place - S
 
 #if !defined (octave_Quad_h)
 #define octave_Quad_h 1
 
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
+#include <cfloat>
+#include <cmath>
+
 #include "dColVector.h"
 
 #if !defined (octave_Quad_typedefs)
 #define octave_Quad_typedefs 1
 
 typedef double (*integrand_fcn) (double x);
 
 #endif
diff --git a/liboctave/base-min.h b/liboctave/base-min.h
--- a/liboctave/base-min.h
+++ b/liboctave/base-min.h
@@ -53,61 +53,61 @@ class base_minimizer
 
   // Lots of ways to call the single function and optionally set and
   // get additional information.
 
   virtual ColumnVector minimize (void)
     {
       double objf;
       int inform;
-      Vector lambda;
+      ColumnVector lambda;
       return do_minimize (objf, inform, lambda);
     }
 
   virtual ColumnVector minimize (double& objf)
     {
       int inform;
-      Vector lambda;
+      ColumnVector lambda;
       return do_minimize (objf, inform, lambda);
     }
 
   virtual ColumnVector minimize (double& objf, int& inform)
     {
-      Vector lambda;
+      ColumnVector lambda;
       return do_minimize (objf, inform, lambda);
     }
 
   virtual ColumnVector minimize (double& objf, int& inform,
 				 ColumnVector& lambda)
     {
       return do_minimize (objf, inform, lambda);
     }
 
   virtual ColumnVector minimize (const ColumnVector& x0)
     {
       x = x0;
       double objf;
       int inform;
-      Vector lambda;
+      ColumnVector lambda;
       return do_minimize (objf, inform, lambda);
     }
 
   virtual ColumnVector minimize (const ColumnVector& x0, double& objf)
     {
       x = x0;
       int inform;
-      Vector lambda;
+      ColumnVector lambda;
       return do_minimize (objf, inform, lambda);
     }
 
   virtual ColumnVector minimize (const ColumnVector& x0, double& objf,
 				 int& inform)
     {
       x = x0;
-      Vector lambda;
+      ColumnVector lambda;
       return do_minimize (objf, inform, lambda);
     }
 
   virtual ColumnVector minimize (const ColumnVector& x0, double& objf,
 				 int& inform, ColumnVector& lambda)
     {
       x = x0;
       return do_minimize (objf, inform, lambda);
