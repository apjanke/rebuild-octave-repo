# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1515435910 18000
#      Mon Jan 08 13:25:10 2018 -0500
# Node ID 8f2c479eb125642510901cebdfa4f8e43ca38293
# Parent  5a10409695b7505042b5d8b8cd76e8840858cdaf
eliminate unnecessary value stack in evaluator

* pt-eval.h, pt-eval.cc (tree_evaluator::result_type): New enum.
(tree_evaluator::m_result_type, tree_evaluator::m_expr_result_value,
tree_evaluator::m_expr_result_value_list): New data members.
(tree_evaluator::push_result): New functions.  Store either a single
octave_value or octave_value_list along with the type (RT_VALUE or
RT_VALUE_LIST).
(tree_evaluator::evaluate, tree_evaluator::evaluate_n): Use new result
values instead of m_value_stack.
(tree_evaluator::value_stack): Delete.  A stack is not needed for
evaluation results.  Instead of pushing results on the value stack,
call push_result.

diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -73,17 +73,19 @@ namespace octave
 
   bool tree_evaluator::in_loop_command = false;
 
   // Normal evaluator.
 
   void
   tree_evaluator::reset (void)
   {
-    m_value_stack.clear ();
+    m_result_type = RT_UNDEFINED;
+    m_expr_result_value = octave_value ();
+    m_expr_result_value_list = octave_value_list ();
     m_lvalue_list_stack.clear ();
     m_nargout_stack.clear ();
   }
 
   void
   tree_evaluator::visit_anon_fcn_handle (tree_anon_fcn_handle& anon_fh)
   {
     // FIXME: should CMD_LIST be limited to a single expression?
@@ -146,17 +148,17 @@ namespace octave
     // FIXME: these should probably come from ANON_FH.
     //    af->stash_fcn_file_name (expr.file_name ());
     //    af->stash_fcn_location (expr.line (), expr.column ());
 
     octave_value ov_fcn (af);
 
     octave_value fh (octave_fcn_binder::maybe_binder (ov_fcn, this));
 
-    m_value_stack.push (ovl (fh));
+    push_result (fh);
   }
 
   void
   tree_evaluator::visit_argument_list (tree_argument_list&)
   {
     panic_impossible ();
   }
 
@@ -181,38 +183,38 @@ namespace octave
 
                 bool a_true = a.is_true ();
 
                 if (a_true)
                   {
                     if (etype == octave_value::op_el_or)
                       {
                         expr.matlab_style_short_circuit_warning ("|");
-                        m_value_stack.push (ovl (octave_value (true)));
+                        push_result (octave_value (true));
                         return;
                       }
                   }
                 else
                   {
                     if (etype == octave_value::op_el_and)
                       {
                         expr.matlab_style_short_circuit_warning ("&");
-                        m_value_stack.push (ovl (octave_value (false)));
+                        push_result (octave_value (false));
                         return;
                       }
                   }
 
                 if (op_rhs)
                   {
                     octave_value b = evaluate (op_rhs);
 
                     result = b.is_true ();
                   }
 
-                m_value_stack.push (ovl (octave_value (result)));
+                push_result (octave_value (result));
                 return;
               }
           }
       }
 
     if (op_lhs)
       {
         octave_value a = evaluate (op_lhs);
@@ -232,17 +234,17 @@ namespace octave
                 // is entangled and it's not clear where to start/stop
                 // timing the operator to make it reasonable.
 
                 val = ::do_binary_op (etype, a, b);
               }
           }
       }
 
-    m_value_stack.push (ovl (val));
+    push_result (val);
   }
 
   void
   tree_evaluator::visit_boolean_expression (tree_boolean_expression& expr)
   {
     octave_value val;
 
     bool result = false;
@@ -261,42 +263,42 @@ namespace octave
         bool a_true = a.is_true ();
 
         tree_boolean_expression::type etype = expr.op_type ();
 
         if (a_true)
           {
             if (etype == tree_boolean_expression::bool_or)
               {
-                m_value_stack.push (ovl (octave_value (true)));
+                push_result (octave_value (true));
                 return;
               }
           }
         else
           {
             if (etype == tree_boolean_expression::bool_and)
               {
-                m_value_stack.push (ovl (octave_value (false)));
+                push_result (octave_value (false));
                 return;
               }
           }
 
         tree_expression *op_rhs = expr.rhs ();
 
         if (op_rhs)
           {
             octave_value b = evaluate (op_rhs);
 
             result = b.is_true ();
           }
 
         val = octave_value (result);
       }
 
-    m_value_stack.push (ovl (val));
+    push_result (val);
   }
 
   void
   tree_evaluator::visit_compound_binary_expression (tree_compound_binary_expression& expr)
   {
     octave_value val;
 
     tree_expression *op_lhs = expr.clhs ();
@@ -315,17 +317,17 @@ namespace octave
               {
                 octave_value::compound_binary_op etype = expr.cop_type ();
 
                 val = ::do_binary_op (etype, a, b);
               }
           }
       }
 
-    m_value_stack.push (ovl (val));
+    push_result (val);
   }
 
   void
   tree_evaluator::visit_break_command (tree_break_command& cmd)
   {
     if (m_echo_state)
       {
         size_t line = cmd.line ();
@@ -347,17 +349,17 @@ namespace octave
   {
     octave_value val;
 
     tree_expression *op_base = expr.base ();
     tree_expression *op_limit = expr.limit ();
 
     if (! op_base || ! op_limit)
       {
-        m_value_stack.push (ovl (octave_value (val)));
+        push_result (octave_value (val));
         return;
       }
 
     octave_value ov_base = evaluate (op_base);
 
     octave_value ov_limit = evaluate (op_limit);
 
     tree_expression *op_increment = expr.increment ();
@@ -397,17 +399,17 @@ namespace octave
 
         if (op_increment)
           ov_increment = evaluate (op_increment);
 
         val = do_colon_op (ov_base, ov_increment, ov_limit,
                            expr.is_for_cmd_expr ());
       }
 
-    m_value_stack.push (ovl (val));
+    push_result (val);
   }
 
   void
   tree_evaluator::visit_continue_command (tree_continue_command& cmd)
   {
     if (m_echo_state)
       {
         size_t line = cmd.line ();
@@ -1082,25 +1084,26 @@ namespace octave
             if (expr.print_result () && nargout == 0
                 && statement_printing_enabled ())
               {
                 octave_value_list args = ovl (val);
                 args.stash_name_tags (string_vector (expr.name ()));
                 feval ("display", args);
               }
 
-            retval = val;
+            push_result (val);
+            return;
           }
       }
     else if (sym.is_added_static ())
       expr.static_workspace_error ();
     else
       expr.eval_undefined_error ();
 
-    m_value_stack.push (retval);
+    push_result (retval);
   }
 
   void
   tree_evaluator::visit_if_clause (tree_if_clause&)
   {
     panic_impossible ();
   }
 
@@ -1350,17 +1353,17 @@ namespace octave
                       error ("indexing undefined value");
                     else
                       base_expr_val = retval(0);
                   }
                 else
                   {
                     // No more indices, so we are done.
 
-                    m_value_stack.push (retval);
+                    push_result (retval);
                     return;
                   }
               }
           }
       }
 
     if (base_expr_val.is_undefined ())
       base_expr_val = evaluate (expr);
@@ -1537,17 +1540,17 @@ namespace octave
 
                 final_args = idx.front ();
               }
 
             retval = fcn->call (*this, nargout, final_args);
           }
       }
 
-    m_value_stack.push (retval);
+    push_result (retval);
   }
 
   void
   tree_evaluator::visit_matrix (tree_matrix& expr)
   {
     octave_value retval = Matrix ();
 
     bool all_strings_p = false;
@@ -1734,17 +1737,17 @@ namespace octave
 
             retval = ctmp;
 
             if (frc_str_conv && ! retval.is_string ())
               retval = retval.convert_to_str ();
           }
       }
 
-    m_value_stack.push (retval);
+    push_result (retval);
   }
 
   void
   tree_evaluator::visit_cell (tree_cell& expr)
   {
     octave_value retval;
 
     // Function calls inside an argument list can't have ignored
@@ -1796,17 +1799,17 @@ namespace octave
         i++;
       }
 
     if (i < nr)
       val.resize (dim_vector (i, nc));  // there were blank rows
 
     retval = val;
 
-    m_value_stack.push (retval);
+    push_result (retval);
   }
 
   void
   tree_evaluator::visit_multi_assignment (tree_multi_assignment& expr)
   {
     octave_value_list val;
 
     tree_expression *rhs = expr.right_hand_side ();
@@ -1961,17 +1964,17 @@ namespace octave
                 feval ("display", args);
               }
           }
 
         // Concatenate return values.
         val = retval_list;
       }
 
-    m_value_stack.push (val);
+    push_result (val);
   }
 
   void
   tree_evaluator::visit_no_op_command (tree_no_op_command& cmd)
   {
     if (m_echo_state)
       {
         size_t line = cmd.line ();
@@ -1986,27 +1989,27 @@ namespace octave
   void
   tree_evaluator::visit_constant (tree_constant& expr)
   {
     int nargout = m_nargout_stack.top ();
 
     if (nargout > 1)
       error ("invalid number of output arguments for constant expression");
 
-    m_value_stack.push (ovl (expr.value ()));
+    push_result (expr.value ());
   }
 
   void
   tree_evaluator::visit_fcn_handle (tree_fcn_handle& expr)
   {
     std::string nm = expr.name ();
 
     octave_value fh = make_fcn_handle (nm);
 
-    m_value_stack.push (ovl (fh));
+    push_result (fh);
   }
 
   void
   tree_evaluator::visit_funcall (tree_funcall& expr)
   {
     octave_value_list retval;
 
     octave_value fcn = expr.function ();
@@ -2028,17 +2031,17 @@ namespace octave
 
         if (f && ! (expr.is_postfix_indexed ()
                     && f->accepts_postfix_index (expr.postfix_index ())))
           {
             retval = f->call (*this, nargout);
           }
       }
 
-    m_value_stack.push (retval);
+    push_result (retval);
   }
 
   void
   tree_evaluator::visit_parameter_list (tree_parameter_list&)
   {
     panic_impossible ();
   }
 
@@ -2072,17 +2075,17 @@ namespace octave
                 profiler::enter<tree_postfix_expression>
                   block (m_profiler, expr);
 
                 val = ::do_unary_op (etype, op_val);
               }
           }
       }
 
-    m_value_stack.push (ovl (val));
+    push_result (val);
   }
 
   void
   tree_evaluator::visit_prefix_expression (tree_prefix_expression& expr)
   {
     octave_value val;
 
     tree_expression *op = expr.operand ();
@@ -2115,17 +2118,17 @@ namespace octave
                 if (op_val.get_count () == 1)
                   val = op_val.do_non_const_unary_op (etype);
                 else
                   val = ::do_unary_op (etype, op_val);
               }
           }
       }
 
-    m_value_stack.push (ovl (val));
+    push_result (val);
   }
 
   void
   tree_evaluator::visit_return_command (tree_return_command& cmd)
   {
     if (m_echo_state)
       {
         size_t line = cmd.line ();
@@ -2227,17 +2230,17 @@ namespace octave
         catch (index_exception& e)
           {
             e.set_var (lhs->name ());
             std::string msg = e.message ();
             error_with_id (e.err_id (), msg.c_str ());
           }
       }
 
-    m_value_stack.push (ovl (val));
+    push_result (val);
   }
 
   void
   tree_evaluator::visit_statement (tree_statement& stmt)
   {
     tree_command *cmd = stmt.command ();
     tree_expression *expr = stmt.expression ();
 
diff --git a/libinterp/parse-tree/pt-eval.h b/libinterp/parse-tree/pt-eval.h
--- a/libinterp/parse-tree/pt-eval.h
+++ b/libinterp/parse-tree/pt-eval.h
@@ -26,30 +26,38 @@ along with Octave; see the file COPYING.
 #include "octave-config.h"
 
 #include <list>
 #include <set>
 #include <stack>
 #include <string>
 
 #include "call-stack.h"
+#include "ov.h"
 #include "ovl.h"
 #include "profiler.h"
 #include "pt-exp.h"
 #include "pt-walk.h"
 
 namespace octave
 {
   class symbol_scope;
   class tree_decl_elt;
   class tree_expression;
 
   class interpreter;
   class unwind_protect;
 
+  enum result_type
+  {
+    RT_UNDEFINED = 0,
+    RT_VALUE = 1,
+    RT_VALUE_LIST = 2
+  };
+
   // How to evaluate the code that the parse trees represent.
 
   class OCTINTERP_API tree_evaluator : public tree_walker
   {
   public:
 
     enum echo_state
     {
@@ -110,18 +118,20 @@ namespace octave
     private:
 
       std::stack<T> m_stack;
     };
 
     typedef void (*decl_elt_init_fcn) (tree_decl_elt&);
 
     tree_evaluator (interpreter& interp)
-      : m_interpreter (interp), m_value_stack (), m_lvalue_list_stack (),
-        m_nargout_stack (), m_call_stack (interp), m_profiler (),
+      : m_interpreter (interp), m_result_type (RT_UNDEFINED),
+        m_expr_result_value (), m_expr_result_value_list (),
+        m_lvalue_list_stack (), m_nargout_stack (),
+        m_call_stack (interp), m_profiler (),
         m_max_recursion_depth (256), m_silent_functions (false),
         m_string_fill_char (' '), m_PS4 ("+ "), m_echo (ECHO_OFF),
         m_echo_state (false), m_echo_file_name (), m_echo_file_pos (1),
         m_echo_files ()
     { }
 
     // No copying!
 
@@ -264,38 +274,83 @@ namespace octave
     void isargout (int nargout, int nout, bool *isargout) const;
 
     const std::list<octave_lvalue> * lvalue_list (void) const
     {
       return (m_lvalue_list_stack.empty ()
               ? nullptr : m_lvalue_list_stack.top ());
     }
 
+    void push_result (const octave_value& val)
+    {
+      m_result_type = RT_VALUE;
+      m_expr_result_value = val;
+    }
+
+    void push_result (const octave_value_list& vals)
+    {
+      m_result_type = RT_VALUE_LIST;
+      m_expr_result_value_list = vals;
+    }
+
     octave_value evaluate (tree_expression *expr, int nargout = 1)
     {
+      octave_value retval;
+
       m_nargout_stack.push (nargout);
 
       expr->accept (*this);
 
       m_nargout_stack.pop ();
 
-      octave_value_list tmp = m_value_stack.val_pop ();
+      switch (m_result_type)
+        {
+        case RT_UNDEFINED:
+          panic_impossible ();
+          break;
 
-      return tmp.empty () ? octave_value () : tmp(0);
+        case RT_VALUE:
+          retval = m_expr_result_value;
+          break;
+
+        case RT_VALUE_LIST:
+          retval = (m_expr_result_value_list.empty ()
+                    ? octave_value () : m_expr_result_value_list(0));
+          break;
+        }
+
+      return retval;
     }
 
     octave_value_list evaluate_n (tree_expression *expr, int nargout = 1)
     {
+      octave_value_list retval;
+
       m_nargout_stack.push (nargout);
 
       expr->accept (*this);
 
       m_nargout_stack.pop ();
 
-      return m_value_stack.val_pop ();
+      switch (m_result_type)
+        {
+        case RT_UNDEFINED:
+          panic_impossible ();
+          break;
+
+        case RT_VALUE:
+          retval = ovl (m_expr_result_value);
+          break;
+
+        case RT_VALUE_LIST:
+          retval = m_expr_result_value_list;
+          break;
+        }
+
+      return retval;
     }
 
     octave_value evaluate (tree_decl_elt *);
 
     void define_parameter_list_from_arg_vector
       (tree_parameter_list *param_list, const octave_value_list& args);
 
     void undefine_parameter_list (tree_parameter_list *param_list);
@@ -419,17 +474,19 @@ namespace octave
     }
 
     bool echo_this_file (const std::string& file, int type) const;
 
     void echo_code (size_t line);
 
     interpreter& m_interpreter;
 
-    value_stack<octave_value_list> m_value_stack;
+    result_type m_result_type;
+    octave_value m_expr_result_value;
+    octave_value_list m_expr_result_value_list;
 
     value_stack<const std::list<octave_lvalue>*> m_lvalue_list_stack;
 
     value_stack<int> m_nargout_stack;
 
     call_stack m_call_stack;
 
     profiler m_profiler;
