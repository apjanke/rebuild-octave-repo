# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1396622887 14400
#      Fri Apr 04 10:48:07 2014 -0400
# Branch stable
# Node ID c644cfa9cb3bfaad48fb14f02b81eab128a78eb9
# Parent  aa861a98d84d084656ef9109bfd5279fea82aa99
suppress all X11 and Qt error messages by default

* octave-gui.cc (fdstderr): Delete variable and all uses.
(message_handler): Don't print anything.
(octave_start_gui): Check OCTAVE_SHOW_GUI_MESSAGES environment
variable to decide whether to install message_handler to suppress
messages.
* __init_fltk__.cc (xerror_handler): New function.
(plot_window::plot_window): Check OCTAVE_SHOW_GUI_MESSAGES environment
variable to decide whether to install xerror_handler to suppress
messages.

diff --git a/libgui/src/octave-gui.cc b/libgui/src/octave-gui.cc
--- a/libgui/src/octave-gui.cc
+++ b/libgui/src/octave-gui.cc
@@ -80,70 +80,36 @@ protected:
 
 private:
 
   int m_argc;
   char** m_argv;
   int m_result;
 };
 
-#if ! defined (__WIN32__) || defined (__CYGWIN__)
-static int fdstderr = -1;
-#endif
+// Disable all Qt messages by default.
 
-// Custom message handler for filtering some messages from Qt.
-
-void
+static void
 message_handler (QtMsgType type, const char *msg)
 {
-#if ! defined (__WIN32__) || defined (__CYGWIN__)
-  static FILE *errstream = fdopen (fdstderr, "a+");
-#else
-  static FILE *errstream = stderr;
-#endif
-
-  switch (type)
-    {
-    case QtDebugMsg:
-      gnulib::fprintf (errstream, "Debug: %s\n", msg);
-      break;
-
-    case QtWarningMsg:
-      gnulib::fprintf (errstream, "Warning: %s\n", msg);
-      break;
-
-    case QtCriticalMsg:
-      gnulib::fprintf (errstream, "Critical: %s\n", msg);
-      break;
-
-    case QtFatalMsg:
-      gnulib::fprintf (errstream, "Fatal: %s\n", msg);
-      abort ();
-
-    default:
-      break;
-    }
 }
 
 // If START_GUI is false, we still set up the QApplication so that we
 // can use Qt widgets for plot windows.
 
 int
 octave_start_gui (int argc, char *argv[], bool start_gui)
 {
   octave_thread_manager::block_interrupt_signal ();
 
-#if ! defined (__WIN32__) || defined (__CYGWIN__)
-  // Store the file descriptor associated with the STDERR stream.  Send
-  // Qt messages there instead of to the STDERR stream that will be
-  // associated with the GUI command window.
-  fdstderr = gnulib::dup (STDERR_FILENO);
-#endif
+  std::string show_gui_msgs = octave_env::getenv ("OCTAVE_SHOW_GUI_MESSAGES");
 
-  qInstallMsgHandler (message_handler);
+  // Installing our handler suppresses the messages.
+  if (show_gui_msgs.empty ())
+    qInstallMsgHandler (message_handler);
 
   if (start_gui)
     {
       QApplication application (argc, argv);
       QTranslator gui_tr, qt_tr, qsci_tr;
 
       // Set the codec for all strings (before wizard)
       QTextCodec::setCodecForCStrings (QTextCodec::codecForName ("UTF-8"));
diff --git a/libinterp/dldfcn/__init_fltk__.cc b/libinterp/dldfcn/__init_fltk__.cc
--- a/libinterp/dldfcn/__init_fltk__.cc
+++ b/libinterp/dldfcn/__init_fltk__.cc
@@ -37,16 +37,20 @@ To initialize:
 
 #include "builtin-defun-decls.h"
 #include "defun-dld.h"
 #include "error.h"
 #include "ov-fcn-handle.h"
 
 #ifdef HAVE_FLTK
 
+#if defined (HAVE_X_WINDOWS)
+#include <X11/Xlib.h>
+#endif
+
 #include <map>
 #include <set>
 #include <sstream>
 #include <iostream>
 
 #ifdef WIN32
 #define WIN32_LEAN_AND_MEAN
 #endif
@@ -68,16 +72,17 @@ To initialize:
 // FLTK headers may include X11/X.h which defines Complex, and that
 // conflicts with Octave's Complex typedef.  We don't need the X11
 // Complex definition in this file, so remove it before including Octave
 // headers which may require Octave's Complex typedef.
 #undef Complex
 
 #include "cmd-edit.h"
 #include "lo-ieee.h"
+#include "oct-env.h"
 
 #include "display.h"
 #include "file-ops.h"
 #include "gl-render.h"
 #include "gl2ps-renderer.h"
 #include "graphics.h"
 #include "parse.h"
 #include "sysdep.h"
@@ -669,16 +674,24 @@ private:
 
   fltk_uimenu (const fltk_uimenu&);
 
   fltk_uimenu operator = (const fltk_uimenu&);
 
   Fl_Menu_Bar* menubar;
 };
 
+#if defined (HAVE_X_WINDOWS)
+static int
+xerror_handler (Display *, XErrorEvent *)
+{
+  return 0;
+}
+#endif
+
 class plot_window : public Fl_Window
 {
   friend class fltk_uimenu;
 public:
   plot_window (int xx, int yy, int ww, int hh, figure::properties& xfp)
     : Fl_Window (xx, yy - menu_h, ww, hh + menu_h + status_h, "octave"),
       window_label (), shift (0), ndim (2), fp (xfp), canvas (0),
       autoscale (0), togglegrid (0), panzoom (0), rotate (0), help (0),
@@ -757,17 +770,28 @@ public:
         {
           // FIXME: This code should be removed when Octave drops support
           // for FLTK 1.1.  Search for default_xclass in this file to find
           // code that should be uncommented to take its place.
           //
           // Set WM_CLASS which allows window managers to properly group
           // related windows.  Otherwise, the class is just "FLTK"
           xclass ("Octave");
+
           show ();
+
+#if defined (HAVE_X_WINDOWS)
+          std::string show_gui_msgs
+            = octave_env::getenv ("OCTAVE_SHOW_GUI_MESSAGES");
+
+          // Installing our handler suppresses the messages.
+          if (show_gui_msgs.empty ())
+            XSetErrorHandler (xerror_handler);
+#endif
+
           if (fp.get_currentaxes ().ok ())
             show_canvas ();
           else
             hide_canvas ();
         }
     }
     end ();
 
