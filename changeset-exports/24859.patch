# HG changeset patch
# User maorshutman <maorus12@gmail.com>
# Date 1520595848 -7200
#      Fri Mar 09 13:44:08 2018 +0200
# Node ID 00ecff875f8a6b4b18f616a039ccada6b4ae5370
# Parent  8ce66fe46f18fd61fbcaf421a22cab0fb7b0b36d
Add nnz implementation for Range type (bug #53185).

* Range.h (nnz): Declare prototype for new function.

* Range.cc (nnz): New function.

* ov-range.h (nnz): Declare nnz and rely on implementation in Range.cc.

* data.cc (Fnnz): Added some basic BIST tests.

diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -2754,16 +2754,32 @@ Return the number of nonzero elements in
 @end deftypefn */)
 {
   if (args.length () != 1)
     print_usage ();
 
   return ovl (args(0).nnz ());
 }
 
+/*
+%!assert (nnz (1:5), 5)
+%!assert (nnz (-5:-1), 5)
+%!assert (nnz (0:5), 5)
+%!assert (nnz (-5:0), 5)
+%!assert (nnz (-5:5), 10)
+%!assert (nnz (-2:1:2), 4)
+%!assert (nnz (-2+eps(2):1:2), 5)
+%!assert (nnz (-2-eps(2):1:2), 5)
+%!assert (nnz (-2:1+eps(1):2), 5)
+%!assert (nnz (-2:1-eps(1):2), 5)
+%!assert (nnz ([1:5] * 0), 0)
+%!assert (nnz ([-5:-1] * 0), 0)
+%!assert (nnz ([-1:1] * 0), 0)
+*/
+
 DEFUN (nzmax, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {@var{n} =} nzmax (@var{SM})
 Return the amount of storage allocated to the sparse matrix @var{SM}.
 
 Note that Octave tends to crop unused memory at the first opportunity
 for sparse objects.  Thus, in general the value of @code{nzmax} will be the
 same as @code{nnz} except for some cases of user-created sparse objects.
diff --git a/libinterp/octave-value/ov-range.h b/libinterp/octave-value/ov-range.h
--- a/libinterp/octave-value/ov-range.h
+++ b/libinterp/octave-value/ov-range.h
@@ -106,16 +106,18 @@ public:
   idx_vector index_vector (bool require_integers = false) const;
 
   dim_vector dims (void) const
   {
     octave_idx_type n = range.numel ();
     return dim_vector (n > 0, n);
   }
 
+  octave_idx_type nnz (void) const { return range.nnz (); }
+
   octave_value resize (const dim_vector& dv, bool fill = false) const;
 
   size_t byte_size (void) const { return 3 * sizeof (double); }
 
   octave_value reshape (const dim_vector& new_dims) const
   { return NDArray (array_value ().reshape (new_dims)); }
 
   octave_value permute (const Array<int>& vec, bool inv = false) const
diff --git a/liboctave/array/Range.cc b/liboctave/array/Range.cc
--- a/liboctave/array/Range.cc
+++ b/liboctave/array/Range.cc
@@ -42,16 +42,49 @@ Range::all_elements_are_ints (void) cons
   // will also be an integer, even if the limit is not.  If there is one
   // or fewer elements only the base needs to be an integer
 
   return (! (octave::math::isnan (rng_base) || octave::math::isnan (rng_inc))
           && (octave::math::nint_big (rng_base) == rng_base || rng_numel < 1)
           && (octave::math::nint_big (rng_inc) == rng_inc || rng_numel <= 1));
 }
 
+octave_idx_type
+Range::nnz (void) const
+{
+  octave_idx_type retval = 0;
+
+  if (! isempty ())
+    {
+      if ((rng_base > 0.0 && rng_limit > 0.0)
+          || (rng_base < 0.0 && rng_limit < 0.0))
+        {
+          // All elements have the same sign, hence there are no zeros.
+          retval = rng_numel;
+        }
+      else if (rng_inc != 0.0)
+        {
+          if (rng_base == 0.0 || rng_limit == 0.0)
+            retval = rng_numel - 1;
+          else if ((rng_base / rng_inc) != std::floor (rng_base / rng_inc))
+            retval = rng_numel;
+          else
+            retval = rng_numel - 1;
+        }
+      else
+        {
+          // All elements are equal (rng_inc = 0) but not positive or negative,
+          // therefore all elements are zero.
+          retval = 0;
+        }
+    }
+
+  return retval;
+}
+
 Matrix
 Range::matrix_value (void) const
 {
   if (rng_numel > 0 && cache.isempty ())
     {
       cache.resize (1, rng_numel);
 
       // The first element must always be *exactly* the base.
diff --git a/liboctave/array/Range.h b/liboctave/array/Range.h
--- a/liboctave/array/Range.h
+++ b/liboctave/array/Range.h
@@ -113,16 +113,18 @@ public:
               sortmode mode = ASCENDING) const;
 
   sortmode issorted (sortmode mode = ASCENDING) const;
 
   OCTAVE_DEPRECATED (4.4, "use 'issorted' instead")
   sortmode is_sorted (sortmode mode = ASCENDING) const
   { return issorted (mode); }
 
+  octave_idx_type nnz (void) const;
+
   // Support for single-index subscripting, without generating matrix cache.
 
   double checkelem (octave_idx_type i) const;
   double checkelem (octave_idx_type i, octave_idx_type j) const;
 
   double elem (octave_idx_type i) const;
   double elem (octave_idx_type /* i */, octave_idx_type j) const
   { return elem (j); }
