# HG changeset patch
# User Max Brister <max@2bass.com>
# Date 1340830168 18000
#      Wed Jun 27 15:49:28 2012 -0500
# Node ID 95bfd032f4c7af0ff7c55a9e2d26b8e7a29c360d
# Parent  e3cd4c9d7ccce44fb47502c56fbcfbde4f81ec0b
Add element wise boolean And and Or in JIT

diff --git a/src/pt-jit.cc b/src/pt-jit.cc
--- a/src/pt-jit.cc
+++ b/src/pt-jit.cc
@@ -608,16 +608,20 @@ jit_typeinfo::jit_typeinfo (llvm::Module
     binary_ops[octave_value::op_ldiv].add_overload (ol);
     binary_ops[octave_value::op_el_ldiv].add_overload (ol);
   }
   llvm::verifyFunction (*fn);
 
   // now for binary index operators
   add_binary_op (index, octave_value::op_add, llvm::Instruction::Add);
 
+  // and binary bool operators
+  add_binary_op (boolean, octave_value::op_el_or, llvm::Instruction::Or);
+  add_binary_op (boolean, octave_value::op_el_and, llvm::Instruction::And);
+
   // now for printing functions
   print_fn.stash_name ("print");
   add_print (any, reinterpret_cast<void*> (&octave_jit_print_any));
   add_print (scalar, reinterpret_cast<void*> (&octave_jit_print_double));
 
   // initialize for loop
   for_init_fn.stash_name ("for_init");
 
@@ -1875,19 +1879,19 @@ void
 jit_convert::visit_argument_list (tree_argument_list&)
 {
   fail ();
 }
 
 void
 jit_convert::visit_binary_expression (tree_binary_expression& be)
 {
+  // this is the case for bool_or and bool_and
   if (be.op_type () >= octave_value::num_binary_ops)
-    // this is the case for bool_or and bool_and
-    fail ();
+    fail ("Unsupported binary operator");
 
   tree_expression *lhs = be.lhs ();
   jit_value *lhsv = visit (lhs);
 
   tree_expression *rhs = be.rhs ();
   jit_value *rhsv = visit (rhs);
 
   const jit_function& fn = jit_typeinfo::binary_op (be.op_type ());
