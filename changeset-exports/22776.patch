# HG changeset patch
# User Rik <rik@octave.org>
# Date 1479269681 28800
#      Tue Nov 15 20:14:41 2016 -0800
# Node ID ff1a99201ca98718a4a73625326a9129c0cc2439
# Parent  5b1fdeb1aa04a33c5ab3d467d445a7eabf804ef3
data.cc: Remove unused macros NATIVE_REDUCTION, NATIVE_REDUCTION_1.

* data.cc: Remove unused macros NATIVE_REDUCTION, NATIVE_REDUCTION_1.

diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -904,170 +904,16 @@ negative numbers or when the values are 
 %!assert (mod (2.1, 0.2), 0.1, eps)
 
 %!assert <45587> (signbit (mod (-0, 0)))
 %!assert <45587> (! signbit (mod (0, -0)))
 
 %!assert <42627> (mod (0.94, 0.01), 0.0)
 */
 
-// FIXME: Macros NATIVE_REDUCTION_1 and NATIVE_REDUCTION seem to be unused.
-//        Checked 1/23/2016.  They should probably be removed for clarity.
-// FIXME: Need to convert reduction functions of this file for single precision
-
-#define NATIVE_REDUCTION_1(FCN, TYPE, DIM)              \
-  (arg.is_ ## TYPE ## _type ())                         \
-  {                                                     \
-    TYPE ## NDArray tmp = arg. TYPE ##_array_value ();  \
-                                                        \
-    retval = tmp.FCN (DIM);                             \
-  }
-
-#define NATIVE_REDUCTION(FCN, BOOL_FCN)                                 \
-                                                                        \
-  int nargin = args.length ();                                          \
-                                                                        \
-  bool isnative = false;                                                \
-  bool isdouble = false;                                                \
-                                                                        \
-  if (nargin > 1 && args(nargin - 1).is_string ())                      \
-    {                                                                   \
-      std::string str = args(nargin - 1).string_value ();               \
-                                                                        \
-      if (str == "native")                                              \
-        isnative = true;                                                \
-      else if (str == "double")                                         \
-        isdouble = true;                                                \
-      else                                                              \
-        error ("sum: unrecognized string argument");                    \
-                                                                        \
-      nargin--;                                                         \
-    }                                                                   \
-                                                                        \
-  if (nargin < 1 || nargin > 2)                                         \
-    print_usage ();                                                     \
-                                                                        \
-  octave_value retval;                                                  \
-                                                                        \
-  octave_value arg = args(0);                                           \
-                                                                        \
-  int dim = (nargin == 1 ? -1 : args(1).int_value (true) - 1);          \
-                                                                        \
-  if (dim < -1)                                                         \
-    error (#FCN ": invalid dimension argument = %d", dim + 1);          \
-                                                                        \
-  if (arg.is_sparse_type ())                                            \
-    {                                                                   \
-      if (arg.is_real_type ())                                          \
-        {                                                               \
-          SparseMatrix tmp = arg.sparse_matrix_value ();                \
-                                                                        \
-          retval = tmp.FCN (dim);                                       \
-        }                                                               \
-      else                                                              \
-        {                                                               \
-          SparseComplexMatrix tmp                                       \
-            = arg.sparse_complex_matrix_value ();                       \
-                                                                        \
-          retval = tmp.FCN (dim);                                       \
-        }                                                               \
-    }                                                                   \
-  else                                                                  \
-    {                                                                   \
-      if (isnative)                                                     \
-        {                                                               \
-          if NATIVE_REDUCTION_1 (FCN, uint8, dim)                       \
-            else if NATIVE_REDUCTION_1 (FCN, uint16, dim)               \
-              else if NATIVE_REDUCTION_1 (FCN, uint32, dim)             \
-                else if NATIVE_REDUCTION_1 (FCN, uint64, dim)           \
-                  else if NATIVE_REDUCTION_1 (FCN, int8, dim)           \
-                    else if NATIVE_REDUCTION_1 (FCN, int16, dim)        \
-                      else if NATIVE_REDUCTION_1 (FCN, int32, dim)      \
-                        else if NATIVE_REDUCTION_1 (FCN, int64, dim)    \
-                          else if (arg.is_bool_type ())                 \
-                            {                                           \
-                              boolNDArray tmp = arg.bool_array_value (); \
-                                                                        \
-                              retval = boolNDArray (tmp.BOOL_FCN (dim)); \
-                            }                                           \
-                          else if (arg.is_char_matrix ())               \
-                            {                                           \
-                              error (#FCN, ": invalid char type");      \
-                            }                                           \
-                          else if (! isdouble && arg.is_single_type ()) \
-                            {                                           \
-                              if (arg.is_complex_type ())               \
-                                {                                       \
-                                  FloatComplexNDArray tmp =             \
-                                    arg.float_complex_array_value ();   \
-                                                                        \
-                                  retval = tmp.FCN (dim);               \
-                                }                                       \
-                              else if (arg.is_real_type ())             \
-                                {                                       \
-                                  FloatNDArray tmp = arg.float_array_value (); \
-                                                                        \
-                                  retval = tmp.FCN (dim);               \
-                                }                                       \
-                            }                                           \
-                          else if (arg.is_complex_type ())              \
-                            {                                           \
-                              ComplexNDArray tmp = arg.complex_array_value (); \
-                                                                        \
-                              retval = tmp.FCN (dim);                   \
-                            }                                           \
-                          else if (arg.is_real_type ())                 \
-                            {                                           \
-                              NDArray tmp = arg.array_value ();         \
-                                                                        \
-                              retval = tmp.FCN (dim);                   \
-                            }                                           \
-                          else                                          \
-                            err_wrong_type_arg (#FCN, arg);             \
-        }                                                               \
-      else if (arg.is_bool_type ())                                     \
-        {                                                               \
-          boolNDArray tmp = arg.bool_array_value ();                    \
-                                                                        \
-          retval = tmp.FCN (dim);                                       \
-        }                                                               \
-      else if (! isdouble && arg.is_single_type ())                     \
-        {                                                               \
-          if (arg.is_real_type ())                                      \
-            {                                                           \
-              FloatNDArray tmp = arg.float_array_value ();              \
-                                                                        \
-              retval = tmp.FCN (dim);                                   \
-            }                                                           \
-          else if (arg.is_complex_type ())                              \
-            {                                                           \
-              FloatComplexNDArray tmp =                                 \
-                arg.float_complex_array_value ();                       \
-                                                                        \
-              retval = tmp.FCN (dim);                                   \
-            }                                                           \
-        }                                                               \
-      else if (arg.is_real_type ())                                     \
-        {                                                               \
-          NDArray tmp = arg.array_value ();                             \
-                                                                        \
-          retval = tmp.FCN (dim);                                       \
-        }                                                               \
-      else if (arg.is_complex_type ())                                  \
-        {                                                               \
-          ComplexNDArray tmp = arg.complex_array_value ();              \
-                                                                        \
-          retval = tmp.FCN (dim);                                       \
-        }                                                               \
-      else                                                              \
-        err_wrong_type_arg (#FCN, arg);                                 \
-    }                                                                   \
-                                                                        \
-  return retval
-
 #define DATA_REDUCTION(FCN)                                             \
                                                                         \
   int nargin = args.length ();                                          \
                                                                         \
   if (nargin < 1 || nargin > 2)                                         \
     print_usage ();                                                     \
                                                                         \
   octave_value retval;                                                  \
