# HG changeset patch
# User Carlo de Falco <kingcrimson@tiscali.it>
# Date 1331920509 -3600
#      Fri Mar 16 18:55:09 2012 +0100
# Node ID d2c095e45196cf122bbd5667241ce2c83eaae805
# Parent  aad7ad0e15c1860adf44d42c7e6fd531edd1d0a6
maint: Remove redundant private function from the package manager.

* pkg/private/rm_rf.m: remove file.
* pkg/provate/build.m: remove calls to rm_rf.
* pkg/provate/configure_make.m: remove calls to rm_rf.
* pkg/provate/copy_files.m: remove calls to rm_rf.
* pkg/provate/finish_installation.m: remove calls to rm_rf.
* pkg/provate/install.m: remove calls to rm_rf.
* pkg/provate/packinfo_copy_file.m: remove calls to rm_rf.
* pkg/provate/prepare_installation.m: remove calls to rm_rf.
* pkg/provate/repackage.m: remove calls to rm_rf.
* pkg/provate/uninstall.m: remove calls to rm_rf.

diff --git a/scripts/pkg/module.mk b/scripts/pkg/module.mk
--- a/scripts/pkg/module.mk
+++ b/scripts/pkg/module.mk
@@ -29,17 +29,16 @@ pkg_PRIVATE_FCN_FILES = \
   pkg/private/load_packages.m \
   pkg/private/load_packages_and_dependencies.m \
   pkg/private/packinfo_copy_file.m \
   pkg/private/parse_pkg_idx.m \
   pkg/private/prepare_installation.m \
   pkg/private/print_package_description.m \
   pkg/private/rebuild.m \
   pkg/private/repackage.m \
-  pkg/private/rm_rf.m \
   pkg/private/save_order.m \
   pkg/private/shell.m \
   pkg/private/uninstall.m \
   pkg/private/unload_packages.m \
   pkg/private/verify_directory.m \
   pkg/private/write_index.m
 
 
diff --git a/scripts/pkg/pkg.m b/scripts/pkg/pkg.m
--- a/scripts/pkg/pkg.m
+++ b/scripts/pkg/pkg.m
@@ -263,16 +263,19 @@
 function [local_packages, global_packages] = pkg (varargin)
   ## Installation prefix (FIXME: what should these be on windows?)
   persistent user_prefix = false;
   persistent prefix = -1;
   persistent archprefix = -1;
   persistent local_list = tilde_expand (fullfile ("~", ".octave_packages"));
   persistent global_list = fullfile (OCTAVE_HOME (), "share", "octave",
                                      "octave_packages");
+
+  confirm_recursive_rmdir (false, "local");
+
   mlock ();
 
   global_install = issuperuser ();
 
   if (prefix == -1)
     if (global_install)
       prefix = fullfile (OCTAVE_HOME (), "share", "octave", "packages");
       archprefix = fullfile (octave_config_info ("libdir"),
diff --git a/scripts/pkg/private/build.m b/scripts/pkg/private/build.m
--- a/scripts/pkg/private/build.m
+++ b/scripts/pkg/private/build.m
@@ -46,15 +46,15 @@ function build (files, handle_deps, auto
   buildlist = fullfile (builddir, "octave_packages");
   install (files, handle_deps, autoload, installdir, installdir, verbose,
            buildlist, "", false);
   unwind_protect
     repackage (builddir, buildlist);
   unwind_protect_cleanup
     unload_packages ({"all"}, handle_deps, buildlist, "");
     if (exist (installdir, "dir"))
-      rm_rf (installdir);
+      rmdir (installdir, "s");
     endif
     if (exist (buildlist, "file"))
       unlink (buildlist);
     endif
   end_unwind_protect
 endfunction
diff --git a/scripts/pkg/private/configure_make.m b/scripts/pkg/private/configure_make.m
--- a/scripts/pkg/private/configure_make.m
+++ b/scripts/pkg/private/configure_make.m
@@ -51,29 +51,29 @@ function configure_make (desc, packdir, 
       endif
       if (isempty (getenv ("RANLIB")))
         flags = cstrcat (flags, " RANLIB=\"", octave_config_info ("RANLIB"), "\"");
       endif
       [status, output] = shell (cstrcat ("cd '", src, "'; ", scenv,
                                          "./configure --prefix=\"",
                                          desc.dir, "\"", flags));
       if (status != 0)
-        rm_rf (desc.dir);
+        rmdir (desc.dir, "s");
         error ("the configure script returned the following error: %s", output);
       elseif (verbose)
         printf("%s", output);
       endif
 
     endif
 
     ## Make.
     if (exist (fullfile (src, "Makefile"), "file"))
       [status, output] = shell (cstrcat (scenv, "make -C '", src, "'"));
       if (status != 0)
-        rm_rf (desc.dir);
+        rmdir (desc.dir, "s");
         error ("'make' returned the following error: %s", output);
       elseif (verbose)
         printf("%s", output);
       endif
     endif
 
     ## Copy files to "inst" and "inst/arch" (this is instead of 'make
     ## install').
@@ -129,31 +129,31 @@ function configure_make (desc, packdir, 
         if (! all (isspace ([archindependent{:}])))
           if (verbose)
             printf ("copyfile");
             printf (" %s", archindependent{:});
             printf ("%s\n", instdir);
           endif
           [status, output] = copyfile (archindependent, instdir);
           if (status != 1)
-            rm_rf (desc.dir);
+            rmdir (desc.dir, "s");
             error ("Couldn't copy files from 'src' to 'inst': %s", output);
           endif
         endif
         if (! all (isspace ([archdependent{:}])))
           if (verbose)
             printf ("copyfile");
             printf (" %s", archdependent{:});
             printf (" %s\n", archdir);
           endif
           if (! exist (archdir, "dir"))
             mkdir (archdir);
           endif
           [status, output] = copyfile (archdependent, archdir);
           if (status != 1)
-            rm_rf (desc.dir);
+            rmdir (desc.dir, "s");
             error ("Couldn't copy files from 'src' to 'inst': %s", output);
           endif
         endif
     endif
   endif
 endfunction
 
diff --git a/scripts/pkg/private/copy_files.m b/scripts/pkg/private/copy_files.m
--- a/scripts/pkg/private/copy_files.m
+++ b/scripts/pkg/private/copy_files.m
@@ -35,76 +35,76 @@ function copy_files (desc, packdir, glob
 
   octfiledir = getarchdir (desc);
 
   ## Copy the files from "inst" to installdir.
   instdir = fullfile (packdir, "inst");
   if (! dirempty (instdir))
     [status, output] = copyfile (fullfile (instdir, "*"), desc.dir);
     if (status != 1)
-      rm_rf (desc.dir);
+      rmdir (desc.dir, "s");
       error ("couldn't copy files to the installation directory");
     endif
     if (exist (fullfile (desc.dir, getarch ()), "dir")
         && ! strcmp (fullfile (desc.dir, getarch ()), octfiledir))
       if (! exist (octfiledir, "dir"))
         ## Can be required to create upto three levels of dirs.
         octm1 = fileparts (octfiledir);
         if (! exist (octm1, "dir"))
           octm2 = fileparts (octm1);
           if (! exist (octm2, "dir"))
             octm3 = fileparts (octm2);
             if (! exist (octm3, "dir"))
               [status, output] = mkdir (octm3);
               if (status != 1)
-                rm_rf (desc.dir);
+                rmdir (desc.dir, "s");
                 error ("couldn't create installation directory %s : %s",
                        octm3, output);
               endif
             endif
             [status, output] = mkdir (octm2);
             if (status != 1)
-              rm_rf (desc.dir);
+              rmdir (desc.dir, "s");
               error ("couldn't create installation directory %s : %s",
                      octm2, output);
             endif
           endif
           [status, output] = mkdir (octm1);
           if (status != 1)
-            rm_rf (desc.dir);
+            rmdir (desc.dir, "s");
             error ("couldn't create installation directory %s : %s",
                    octm1, output);
           endif
         endif
         [status, output] = mkdir (octfiledir);
         if (status != 1)
-          rm_rf (desc.dir);
+          rmdir (desc.dir, "s");
           error ("couldn't create installation directory %s : %s",
           octfiledir, output);
         endif
       endif
       [status, output] = movefile (fullfile (desc.dir, getarch (), "*"),
                                    octfiledir);
-      rm_rf (fullfile (desc.dir, getarch ()));
+      rmdir (fullfile (desc.dir, getarch ()), "s");
 
       if (status != 1)
-        rm_rf (desc.dir);
-        rm_rf (octfiledir);
+        rmdir (desc.dir, "s");
+        rmdir (octfiledir, "s");
         error ("couldn't copy files to the installation directory");
       endif
     endif
 
   endif
 
   ## Create the "packinfo" directory.
   packinfo = fullfile (desc.dir, "packinfo");
   [status, msg] = mkdir (packinfo);
   if (status != 1)
-    rm_rf (desc.dir);
-    rm_rf (octfiledir);
+    rmdir (desc.dir, "s");
+    rmdir (octfiledir, "s");
     error ("couldn't create packinfo directory: %s", msg);
   endif
 
   packinfo_copy_file ("DESCRIPTION", "required", packdir, packinfo, desc, octfiledir);
   packinfo_copy_file ("COPYING", "required", packdir, packinfo, desc, octfiledir);
 
   packinfo_copy_file ("NEWS", "optional", packdir, packinfo, desc, octfiledir);
   packinfo_copy_file ("ONEWS", "optional", packdir, packinfo, desc, octfiledir);
@@ -114,18 +114,18 @@ function copy_files (desc, packdir, glob
   index_file = fullfile (packdir, "INDEX");
   if (exist(index_file, "file"))
     packinfo_copy_file ("INDEX", "required", packdir, packinfo, desc, octfiledir);
   else
     try
       write_index (desc, fullfile (packdir, "inst"),
                    fullfile (packinfo, "INDEX"), global_install);
     catch
-      rm_rf (desc.dir);
-      rm_rf (octfiledir);
+      rmdir (desc.dir, "s");
+      rmdir (octfiledir, "s");
       rethrow (lasterror ());
     end_try_catch
   endif
 
   ## Is there an 'on_uninstall.m' to install?
   packinfo_copy_file ("on_uninstall.m", "optional", packdir, packinfo, desc, octfiledir);
 
   ## Is there a doc/ directory that needs to be installed?
diff --git a/scripts/pkg/private/finish_installation.m b/scripts/pkg/private/finish_installation.m
--- a/scripts/pkg/private/finish_installation.m
+++ b/scripts/pkg/private/finish_installation.m
@@ -28,15 +28,15 @@ function finish_installation (desc, pack
   if (exist (fullfile (packdir, "post_install.m"), "file"))
     wd = pwd ();
     try
       cd (packdir);
       post_install (desc);
       cd (wd);
     catch
       cd (wd);
-      rm_rf (desc.dir);
-      rm_rf (getarchdir (desc), global_install);
+      rmdir (desc.dir, "s");
+      rmdir (getarchdir (desc), "s");
       rethrow (lasterror ());
     end_try_catch
   endif
 endfunction
 
diff --git a/scripts/pkg/private/install.m b/scripts/pkg/private/install.m
--- a/scripts/pkg/private/install.m
+++ b/scripts/pkg/private/install.m
@@ -139,17 +139,17 @@ function install (files, handle_deps, au
             packages_to_uninstall(end+1) = j;
           endif
         endfor
       endif
     endfor
   catch
     ## Something went wrong, delete tmpdirs.
     for i = 1:length (tmpdirs)
-      rm_rf (tmpdirs{i});
+      rmdir (tmpdirs{i}, "s");
     endfor
     rethrow (lasterror ());
   end_try_catch
 
   ## Check dependencies.
   if (handle_deps)
     ok = true;
     error_text = "";
@@ -193,17 +193,17 @@ function install (files, handle_deps, au
       desc = descriptions{i};
       pdir = packdirs{i};
       prepare_installation (desc, pdir);
       configure_make (desc, pdir, verbose);
     endfor
   catch
     ## Something went wrong, delete tmpdirs.
     for i = 1:length (tmpdirs)
-      rm_rf (tmpdirs{i});
+      rmdir (tmpdirs{i}, "s");
     endfor
     rethrow (lasterror ());
   end_try_catch
 
   ## Uninstall the packages that will be replaced.
   try
     for i = packages_to_uninstall
       if (global_install)
@@ -212,17 +212,17 @@ function install (files, handle_deps, au
       else
         uninstall ({local_packages{i}.name}, false, verbose, local_list,
                    global_list, global_install);
       endif
     endfor
   catch
     ## Something went wrong, delete tmpdirs.
     for i = 1:length (tmpdirs)
-      rm_rf (tmpdirs{i});
+      rmdir (tmpdirs{i}, "s");
     endfor
     rethrow (lasterror ());
   end_try_catch
 
   ## Install each package.
   try
     for i = 1:length (descriptions)
       desc = descriptions{i};
@@ -231,33 +231,33 @@ function install (files, handle_deps, au
       create_pkgadddel (desc, pdir, "PKG_ADD", global_install);
       create_pkgadddel (desc, pdir, "PKG_DEL", global_install);
       finish_installation (desc, pdir, global_install);
       generate_lookfor_cache (desc);
     endfor
   catch
     ## Something went wrong, delete tmpdirs.
     for i = 1:length (tmpdirs)
-      rm_rf (tmpdirs{i});
+      rmdir (tmpdirs{i}, "s");
     endfor
     for i = 1:length (descriptions)
-      rm_rf (descriptions{i}.dir);
-      rm_rf (getarchdir (descriptions{i}));
+      rmdir (descriptions{i}.dir, "s");
+      rmdir (getarchdir (descriptions{i}), "s");
     endfor
     rethrow (lasterror ());
   end_try_catch
 
   ## Check if the installed directory is empty. If it is remove it
   ## from the list.
   for i = length (descriptions):-1:1
     if (dirempty (descriptions{i}.dir, {"packinfo", "doc"})
         && dirempty (getarchdir (descriptions{i})))
       warning ("package %s is empty\n", descriptions{i}.name);
-      rm_rf (descriptions{i}.dir);
-      rm_rf (getarchdir (descriptions{i}));
+      rmdir (descriptions{i}.dir, "s");
+      rmdir (getarchdir (descriptions{i}), "s");
       descriptions(i) = [];
     endif
   endfor
 
   ## If the package requested that it is autoloaded, or the installer
   ## requested that it is, then mark the package as autoloaded.
   str_true = {"true", "on", "yes", "1"};
   for i = length (descriptions):-1:1
@@ -291,33 +291,33 @@ function install (files, handle_deps, au
       idx = setdiff (1:length(local_packages), packages_to_uninstall);
       local_packages = save_order ({local_packages{idx}, descriptions{:}});
       save (local_list, "local_packages");
       installed_pkgs_lst = {local_packages{:}, global_packages{:}};
     endif
   catch
     ## Something went wrong, delete tmpdirs.
     for i = 1:length (tmpdirs)
-      rm_rf (tmpdirs{i});
+      rmdir (tmpdirs{i}, "s");
     endfor
     for i = 1:length (descriptions)
-      rm_rf (descriptions{i}.dir);
+      rmdir (descriptions{i}.dir, "s");
     endfor
     if (global_install)
       printf ("error: couldn't append to %s\n", global_list);
     else
       printf ("error: couldn't append to %s\n", local_list);
     endif
     rethrow (lasterror ());
   end_try_catch
 
   ## All is well, let's clean up.
   for i = 1:length (tmpdirs)
-    [status, msg] = rm_rf (tmpdirs{i});
-    if (status != 1)
+    [status, msg] = rmdir (tmpdirs{i}, "s");
+    if (status != 1 && exist (tmpdirs{i}, "dir"))
       warning ("couldn't clean up after my self: %s\n", msg);
     endif
   endfor
 
   ## Add the newly installed packages to the path, so the user
   ## can begin using them. Only load them if they are marked autoload.
   if (length (descriptions) > 0)
     idx = [];
diff --git a/scripts/pkg/private/packinfo_copy_file.m b/scripts/pkg/private/packinfo_copy_file.m
--- a/scripts/pkg/private/packinfo_copy_file.m
+++ b/scripts/pkg/private/packinfo_copy_file.m
@@ -25,15 +25,15 @@
 
 function packinfo_copy_file (filename, requirement, packdir, packinfo, desc, octfiledir)
   filepath = fullfile (packdir, filename);
   if (!exist (filepath, "file") && strcmpi (requirement, "optional"))
     ## do nothing, it's still OK
   else
     [status, output] = copyfile (filepath, packinfo);
     if (status != 1)
-      rm_rf (desc.dir);
-      rm_rf (octfiledir);
+      rmdir (desc.dir, "s");
+      rmdir (octfiledir, "s");
       error ("Couldn't copy %s file: %s", filename, output);
     endif
   endif
 endfunction
 
diff --git a/scripts/pkg/private/prepare_installation.m b/scripts/pkg/private/prepare_installation.m
--- a/scripts/pkg/private/prepare_installation.m
+++ b/scripts/pkg/private/prepare_installation.m
@@ -36,15 +36,15 @@ function prepare_installation (desc, pac
     end_try_catch
   endif
 
   ## If the directory "inst" doesn't exist, we create it.
   inst_dir = fullfile (packdir, "inst");
   if (! exist (inst_dir, "dir"))
     [status, msg] = mkdir (inst_dir);
     if (status != 1)
-      rm_rf (desc.dir);
+      rmdir (desc.dir, "s");
       error ("the 'inst' directory did not exist and could not be created: %s",
              msg);
     endif
   endif
 endfunction
 
diff --git a/scripts/pkg/private/repackage.m b/scripts/pkg/private/repackage.m
--- a/scripts/pkg/private/repackage.m
+++ b/scripts/pkg/private/repackage.m
@@ -77,15 +77,15 @@ function repackage (builddir, buildlist)
       try
         gzip (tfile);
         unlink (tfile);
       catch
         warning ("failed to compress %s", tfile);
       end_try_catch
     unwind_protect_cleanup
       if (exist (pack.name, "dir"))
-        rm_rf (pack.name);
+        rmdir (pack.name, "s");
       endif
       cd (wd);
     end_unwind_protect
   endfor
 endfunction
 
diff --git a/scripts/pkg/private/rm_rf.m b/scripts/pkg/private/rm_rf.m
deleted file mode 100644
--- a/scripts/pkg/private/rm_rf.m
+++ /dev/null
@@ -1,41 +0,0 @@
-## Copyright (C) 2005-2012 S�ren Hauberg
-## Copyright (C) 2010 VZLU Prague, a.s.
-##
-## This file is part of Octave.
-##
-## Octave is free software; you can redistribute it and/or modify it
-## under the terms of the GNU General Public License as published by
-## the Free Software Foundation; either version 3 of the License, or (at
-## your option) any later version.
-##
-## Octave is distributed in the hope that it will be useful, but
-## WITHOUT ANY WARRANTY; without even the implied warranty of
-## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-## General Public License for more details.
-##
-## You should have received a copy of the GNU General Public License
-## along with Octave; see the file COPYING.  If not, see
-## <http://www.gnu.org/licenses/>.
-
-## -*- texinfo -*-
-## @deftypefn  {Function File} {[@var{status_out}, @var{msg_out}] =}@
-## rm_rf (@var{dir})
-## Undocumented internal function.
-## @end deftypefn
-
-function [status_out, msg_out] = rm_rf (dir)
-  if (exist (dir))
-    crr = confirm_recursive_rmdir (false, "local");
-    [status, msg] = rmdir (dir, "s");
-  else
-    status = 1;
-    msg = "";
-  endif
-  if (nargout > 0)
-    status_out = status;
-  endif
-  if (nargout > 1)
-    msg_out = msg;
-  endif
-endfunction
-
diff --git a/scripts/pkg/private/uninstall.m b/scripts/pkg/private/uninstall.m
--- a/scripts/pkg/private/uninstall.m
+++ b/scripts/pkg/private/uninstall.m
@@ -107,26 +107,26 @@ function uninstall (pkgnames, handle_dep
     ## Do the actual deletion.
     if (desc.loaded)
       rmpath (desc.dir);
       if (exist (getarchdir (desc)))
         rmpath (getarchdir (desc));
       endif
     endif
     if (exist (desc.dir, "dir"))
-      [status, msg] = rm_rf (desc.dir);
-      if (status != 1)
+      [status, msg] = rmdir (desc.dir, "s");
+      if (status != 1 && exist (desc.dir, "dir"))
         error ("couldn't delete directory %s: %s", desc.dir, msg);
       endif
-      [status, msg] = rm_rf (getarchdir (desc));
-      if (status != 1)
+      [status, msg] = rmdir (getarchdir (desc), "s");
+      if (status != 1 && exist (getarchdir (desc), "dir"))
         error ("couldn't delete directory %s: %s", getarchdir (desc), msg);
       endif
       if (dirempty (desc.archprefix))
-        rm_rf (desc.archprefix);
+        rmdir (desc.archprefix, "s");
       endif
     else
       warning ("directory %s previously lost", desc.dir);
     endif
   endfor
 
   ## Write a new ~/.octave_packages.
   if (global_install)
