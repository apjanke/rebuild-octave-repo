# HG changeset patch
# User jwe
# Date 790458499 0
#      Wed Jan 18 19:48:19 1995 +0000
# Node ID cb4eaa324faf2fff6d62c91549fe92db338b16b8
# Parent  1aa6f2edd9752b626806a2a2a5360d2125c2b661
[project @ 1995-01-18 19:48:19 by jwe]

diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -24,16 +24,17 @@ Software Foundation, 675 Mass Ave, Cambr
 #ifdef HAVE_CONFIG_H
 #include "config.h"
 #endif
 
 #include "symtab.h"
 #include "error.h"
 #include "variables.h"
 #include "utils.h"
+#include "user-prefs.h"
 #include "tree-base.h"
 #include "tree-expr.h"
 #include "tree-const.h"
 
 extern "C"
 {
 #include "fnmatch.h"
 }
@@ -616,23 +617,37 @@ symbol_record::pop_context (void)
   linked_to_global = global_link_context.pop ();
 }
 
 int
 symbol_record::read_only_error (void)
 {
   if (is_read_only ())
     {
-      char *tag = "symbol";
       if (is_variable ())
-	tag = "variable";
+	{
+	  if (user_pref.read_only_constants)
+	    {
+	      if (user_pref.read_only_constants < 0)
+		{
+		  ::warning ("redefinition of constant `%s'", nm);
+		  return 0;
+		}
+	      else
+		::error ("can't redefine read-only constant `%s'", nm);
+	    }
+	}
       else if (is_function ())
-	tag = "function";
-	
-      ::error ("can't redefine read-only %s `%s'", tag, nm);
+	{
+	  ::error ("can't redefine read-only function `%s'", nm);
+	}
+      else
+	{
+	  ::error ("can't redefine read-only symbol `%s'", nm);
+	}
 
       return 1;
     }
   else
     return 0;
 }
 
 void
diff --git a/src/user-prefs.cc b/src/user-prefs.cc
--- a/src/user-prefs.cc
+++ b/src/user-prefs.cc
@@ -52,16 +52,17 @@ init_user_prefs (void)
   user_pref.output_max_field_width = 0;
   user_pref.output_precision = 0;
   user_pref.page_screen_output = 0;
   user_pref.prefer_column_vectors = 0;
   user_pref.prefer_zero_one_indexing = 0;
   user_pref.print_answer_id_name = 0;
   user_pref.print_empty_dimensions = 0;
   user_pref.propagate_empty_matrices = 0;
+  user_pref.read_only_constants = 1;
   user_pref.resize_on_range_error = 0;
   user_pref.return_last_computed_value = 0;
   user_pref.save_precision = 0;
   user_pref.silent_functions = 0;
   user_pref.split_long_rows = 0;
   user_pref.treat_neg_dim_as_zero = 0;
   user_pref.warn_assign_as_truth_value = 0;
   user_pref.warn_comma_in_global_decl = 0;
@@ -340,16 +341,25 @@ int
 propagate_empty_matrices (void)
 {
   user_pref.propagate_empty_matrices =
     check_str_pref ("propagate_empty_matrices");
 
   return 0;
 }
 
+// Should built-in constants always be read only?
+
+int
+read_only_constants (void)
+{
+  user_pref.read_only_constants = check_str_pref ("read_only_constants");
+
+  return 0;
+}
 
 // When doing assignments, should we resize matrices if the indices
 // are outside the current bounds?
 
 int
 resize_on_range_error (void)
 {
   user_pref.resize_on_range_error =
diff --git a/src/user-prefs.h b/src/user-prefs.h
--- a/src/user-prefs.h
+++ b/src/user-prefs.h
@@ -36,16 +36,17 @@ struct user_preferences
   int output_max_field_width;
   int output_precision;
   int page_screen_output;
   int prefer_column_vectors;
   int prefer_zero_one_indexing;
   int print_answer_id_name;
   int print_empty_dimensions;
   int propagate_empty_matrices;
+  int read_only_constants;
   int resize_on_range_error;
   int return_last_computed_value;
   int save_precision;
   int silent_functions;
   int split_long_rows;
   int treat_neg_dim_as_zero;
   int warn_assign_as_truth_value;
   int warn_comma_in_global_decl;
@@ -77,16 +78,17 @@ extern int ignore_function_time_stamp (v
 extern int implicit_str_to_num_ok (void);
 extern int ok_to_lose_imaginary_part (void);
 extern int page_screen_output (void);
 extern int prefer_column_vectors (void);
 extern int prefer_zero_one_indexing (void);
 extern int print_answer_id_name (void);
 extern int print_empty_dimensions (void);
 extern int propagate_empty_matrices (void);
+extern int read_only_constants (void);
 extern int resize_on_range_error (void);
 extern int return_last_computed_value (void);
 extern int silent_functions (void);
 extern int split_long_rows (void);
 extern int treat_neg_dim_as_zero (void);
 extern int warn_assign_as_truth_value (void);
 extern int warn_comma_in_global_decl (void);
 extern int warn_divide_by_zero (void);
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -1566,16 +1566,22 @@ install_builtin_variables (void)
   DEFVAR ("print_empty_dimensions", SBV_print_empty_dimensions, "true",
 	  0, 0, 1, print_empty_dimensions,
     "also print dimensions of empty matrices");
 
   DEFVAR ("propagate_empty_matrices", SBV_propagate_empty_matrices,
 	  "true", 0, 0, 1, propagate_empty_matrices,
     "operations on empty matrices return an empty matrix, not an error");
 
+#if 0
+  DEFVAR ("read_only_constants", SBV_read_only_constants, "true", 0,
+        0, 1, read_only_constants,
+    "allow built-in constants to be modified");
+#endif
+
   DEFVAR ("realmax", SBV_realmax, DBL_MAX, 1, 1, 1, 0,
     "realmax (): return largest representable floating point number");
 
   DEFVAR ("realmin", SBV_realmin, DBL_MIN, 1, 1, 1, 0,
     "realmin (): return smallest representable floating point number");
 
   DEFVAR ("resize_on_range_error", SBV_resize_on_range_error, "true", 0,
 	  0, 1, resize_on_range_error,
