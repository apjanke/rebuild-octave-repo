# HG changeset patch
# User jwe
# Date 812959279 0
#      Fri Oct 06 06:01:19 1995 +0000
# Node ID f1931fc63ce914f3fb50dd7ebf46a844bc01c22c
# Parent  d6e96e0bc681e19411439de58b7b2b166770a359
[project @ 1995-10-06 05:57:56 by jwe]

diff --git a/liboctave/CmplxSVD.cc b/liboctave/CmplxSVD.cc
--- a/liboctave/CmplxSVD.cc
+++ b/liboctave/CmplxSVD.cc
@@ -42,30 +42,30 @@ extern "C"
 				Complex*, const int&, Complex*,
 				const int&, double*, int&, long,
 				long);
 }
 
 ComplexMatrix
 ComplexSVD::left_singular_matrix (void) const
 {
-  if (type == SVD::sigma_only)
+  if (type_computed == SVD::sigma_only)
     {
       (*current_liboctave_error_handler)
 	("ComplexSVD: U not computed because type == SVD::sigma_only");
       return ComplexMatrix ();
     }
   else
     return left_sm;
 }
 
 ComplexMatrix
 ComplexSVD::right_singular_matrix (void) const
 {
-  if (type == SVD::sigma_only)
+  if (type_computed == SVD::sigma_only)
     {
       (*current_liboctave_error_handler)
 	("ComplexSVD: V not computed because type == SVD::sigma_only");
       return ComplexMatrix ();
     }
   else
     return right_sm;
 }
@@ -102,16 +102,18 @@ ComplexSVD::init (const ComplexMatrix& a
       jobu = jobv ="N";
       ncol_u = nrow_vt = 0;
       break;
 
     default:
       break;
     }
 
+  type_computed = svd_type;
+
   Complex *u = (ncol_u > 0 ? new Complex[m * ncol_u] : 0);
   double *s_vec  = new double[min_mn];
   Complex *vt = (nrow_vt > 0 ? new Complex[nrow_vt * n] : 0);
 
   int lwork = 2*min_mn + max_mn;
   Complex *work = new Complex[lwork];
 
   int lrwork = 5*max_mn;
diff --git a/liboctave/CmplxSVD.h b/liboctave/CmplxSVD.h
--- a/liboctave/CmplxSVD.h
+++ b/liboctave/CmplxSVD.h
@@ -67,26 +67,28 @@ public:
       left_sm = a.left_sm;
       right_sm = a.right_sm;
 
       return *this;
     }
 
   DiagMatrix singular_values (void) const { return sigma; }
 
-  ComplexMatrix left_singular_matrix (void);
+  ComplexMatrix left_singular_matrix (void) const;
 
-  ComplexMatrix right_singular_matrix (void);
+  ComplexMatrix right_singular_matrix (void) const;
 
   friend ostream&  operator << (ostream& os, const ComplexSVD& a);
 
 private:
 
   int init (const ComplexMatrix& a, SVD::type svd_type = SVD::std);
 
+  SVD::type type_computed;
+
   DiagMatrix sigma;
   ComplexMatrix left_sm;
   ComplexMatrix right_sm;
 };
 
 #endif
 
 /*
diff --git a/liboctave/dbleSVD.cc b/liboctave/dbleSVD.cc
--- a/liboctave/dbleSVD.cc
+++ b/liboctave/dbleSVD.cc
@@ -40,30 +40,30 @@ extern "C"
 				double*, double*, const int&, double*,
 				const int&, double*, const int&, int&,
 				long, long);
 }
 
 Matrix
 left_singular_matrix (void) const
 {
-  if (type == SVD::sigma_only)
+  if (type_computed == SVD::sigma_only)
     {
       (*current_liboctave_error_handler)
 	("ComplexSVD: U not computed because type == SVD::sigma_only");
       return Matrix ();
     }
   else
     return left_sm;
 }
 
 Matrix
 right_singular_matrix (void) const
 {
-  if (type == SVD::sigma_only)
+  if (type_computed == SVD::sigma_only)
     {
       (*current_liboctave_error_handler)
 	("ComplexSVD: V not computed because type == SVD::sigma_only");
       return Matrix ();
     }
   else
     return right_sm;
 }
@@ -100,16 +100,18 @@ SVD::init (const Matrix& a, SVD::type sv
       jobu = jobv ="N";
       ncol_u = nrow_vt = 0;
       break;
 
     default:
       break;
     }
 
+  type_computed = svd_type;
+
   double *u = (ncol_u > 0 ? new double[m * ncol_u] : 0);
   double *s_vec  = new double[min_mn];
   double *vt = (ncol_vt > 0 ? new double[nrow_vt * n] : 0);
 
   int tmp1 = 3*min_mn + max_mn;
   int tmp2 = 5*min_mn - 4;
   int lwork = tmp1 > tmp2 ? tmp1 : tmp2;
   double *work = new double[lwork];
diff --git a/liboctave/dbleSVD.h b/liboctave/dbleSVD.h
--- a/liboctave/dbleSVD.h
+++ b/liboctave/dbleSVD.h
@@ -69,26 +69,28 @@ public:
       left_sm = a.left_sm;
       right_sm = a.right_sm;
 
       return *this;
     }
 
   DiagMatrix singular_values (void) const { return sigma; }
 
-  Matrix left_singular_matrix (void);
+  Matrix left_singular_matrix (void) const;
 
-  Matrix right_singular_matrix (void);
+  Matrix right_singular_matrix (void) const;
 
   friend ostream&  operator << (ostream& os, const SVD& a);
 
 private:
 
   int init (const Matrix& a, type svd_type = std);
 
+  SVD::type type_computed;
+
   DiagMatrix sigma;
   Matrix left_sm;
   Matrix right_sm;
 };
 
 #endif
 
 /*
diff --git a/src/svd.cc b/src/svd.cc
--- a/src/svd.cc
+++ b/src/svd.cc
@@ -61,17 +61,18 @@ X may not contain any Inf or NaN values.
 
   int arg_is_empty = empty_arg ("svd", arg.rows (), arg.columns ());
 
   if (arg_is_empty < 0)
     return retval;
   else if (arg_is_empty > 0)
     return Octave_object (3, Matrix ());
 
-  SVD::type type = ((nargout == 1) ? SVD::sigma_only
+  SVD::type type = ((nargout == 0 || nargout == 1)
+		    ? SVD::sigma_only
 		    : (nargin == 2) ? SVD::economy : SVD::std);
 
   if (arg.is_real_type ())
     {
       Matrix tmp = arg.matrix_value ();
 
       if (! error_state)
 	{
