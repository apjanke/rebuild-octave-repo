# HG changeset patch
# User Daniel J Sebald <daniel.sebald@ieee.org>
# Date 1365563301 14400
#      Tue Apr 09 23:08:21 2013 -0400
# Node ID fa842e78f49132bf5900dd36e7985032283d6afc
# Parent  fcf1b0b52083c7c11ef21a1f00986c50c56daa47
Restore STDERR stream pipe before exit to capture error messages.

* QUnixTerminalImpl.cpp, QUnixTerminalImpl.h
(QUnixTerminalImpl::fdstderr): New member variable.
(QUnixTerminalImpl::connectToPty): Duplicate STDERR_FILENO file
descriptor.
(QUnixTerminalImpl::~QUnixTerminalImpl): Duplicate-2 the stored
descriptor back to STDERR_FILENO.

* main-window.cc (main_window::~main_window): Delete terminal window
first.

diff --git a/libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.cpp b/libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.cpp
--- a/libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.cpp
+++ b/libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.cpp
@@ -70,16 +70,20 @@ void QUnixTerminalImpl::initialize()
     m_terminalModel->setKeyBindings("");
     m_terminalModel->run();
     m_terminalModel->addView(m_terminalView);
     connectToPty();
 }
 
 void QUnixTerminalImpl::connectToPty()
 {
+    // Store the file descriptor associated with the STDERR stream onto
+    // another temporary file descriptor for reconnect in the destructor.
+    fdstderr = dup (STDERR_FILENO);
+
     int fds = m_kpty->slaveFd();
 
     dup2 (fds, STDIN_FILENO);
     dup2 (fds, STDOUT_FILENO);
     dup2 (fds, STDERR_FILENO);
 
     if(!isatty(STDIN_FILENO)) {
         qDebug("Error: stdin is not a tty.");
@@ -91,16 +95,19 @@ void QUnixTerminalImpl::connectToPty()
 
     if(!isatty(STDERR_FILENO)) {
         qDebug("Error: stderr is not a tty.");
     }
 }
 
 QUnixTerminalImpl::~QUnixTerminalImpl()
 {
+    // Restore stderr so that any errors at exit might appear somewhere.
+    dup2 (fdstderr, STDERR_FILENO);
+
     emit destroyed();
 }
 
 void QUnixTerminalImpl::setTerminalFont(const QFont &font)
 {
     if(!m_terminalView)
         return;
     m_terminalView->setVTFont(font);
diff --git a/libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.h b/libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.h
--- a/libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.h
+++ b/libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.h
@@ -25,35 +25,38 @@
 #include "unix/kpty.h"
 #include "unix/TerminalModel.h"
 #include "unix/TerminalView.h"
 #include "QTerminalInterface.h"
 
 class QUnixTerminalImpl : public QTerminalInterface
 {
     Q_OBJECT
+
+    int fdstderr;
+
 public:
     QUnixTerminalImpl(QWidget *parent = 0);
     virtual ~QUnixTerminalImpl();
-    
+
     void setTerminalFont(const QFont &font); 
     void setSize(int h, int v);
     void sendText(const QString& text);
 
     void setCursorType(CursorType type, bool blinking);
 
 public slots:
     void copyClipboard();
     void pasteClipboard();
-        
+
 protected:
     void focusInEvent(QFocusEvent *focusEvent);
     void showEvent(QShowEvent *);
     virtual void resizeEvent(QResizeEvent *);   
-    
+
 private:
     void initialize();
     void connectToPty();
 
     TerminalView *m_terminalView;
     TerminalModel *m_terminalModel;
     KPty *m_kpty;
 };
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -73,19 +73,22 @@ main_window::main_window (QWidget *p)
     workspace_window (new workspace_view (this))
 {
   // We have to set up all our windows, before we finally launch octave.
   construct ();
 }
 
 main_window::~main_window (void)
 {
++  // Destroy the terminal first so that STDERR stream is redirected back
++  // to its original pipe to capture error messages at exit.
+
+  delete command_window;
   delete _workspace_model;
   delete status_bar;
-  delete command_window;
   delete history_window;
   delete file_browser_window;
   delete doc_browser_window;
   delete editor_window;
   delete workspace_window;
 
   // Clean up all dynamically created objects to ensure they are
   // deleted before this main_window is.  Otherwise, some will be
