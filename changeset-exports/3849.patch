# HG changeset patch
# User jwe
# Date 1004676610 0
#      Fri Nov 02 04:50:10 2001 +0000
# Node ID 5266e351a19cea0f1b33510550d2b2103d5204b0
# Parent  562c1b1fa5f42ee8b7dd0d9562d9d17221e97e24
[project @ 2001-11-02 04:50:09 by jwe]

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,12 @@
+2001-11-01  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* interpreter/Makefile.in (MAIN_TEXINFO): Look in $(srcdir).
+
 2001-03-27  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* liboctave/Makefile.in (liboctave_toc.html): Use -expand info and
 	-split chapter instead of -expandinfo and -split_chapter options
 	for texi2html.
 	* faq/Makefile.in (Octave-FAQ_toc.html): Likewise.
 	* interpreter/Makefile.in (octave_toc.html): Likewise.
 
diff --git a/doc/interpreter/Makefile.in b/doc/interpreter/Makefile.in
--- a/doc/interpreter/Makefile.in
+++ b/doc/interpreter/Makefile.in
@@ -25,17 +25,17 @@ SUB_SOURCE := arith.txi audio.txi basics
 	install.txi intro.txi io.txi linalg.txi matrix.txi \
 	nonlin.txi numbers.txi op-idx.txi optim.txi plot.txi \
 	poly.txi preface.txi quad.txi quaternion.txi set.txi \
 	signal.txi stats.txi stmt.txi stream.txi strings.txi \
 	struct.txi system.txi tips.txi var.txi vr-idx.txi
 
 SOURCES := $(SUB_SOURCE)
 
-MAIN_TEXINFO := octave.texi
+MAIN_TEXINFO := $(SRCDIR)/octave.texi
 
 SUB_TEXINFO := $(SUB_SOURCE:.txi=.texi)
 
 TEXINFO := $(MAIN_TEXINFO) $(SUB_TEXINFO)
 
 FORMATTED = octave.dvi octave.ps octave.info octave.info-[0-9]* octave_*.html
 
 DISTFILES = Makefile.in dir munge-texi.cc Map-s.cc octave.1 octave-bug.1 \
diff --git a/libcruft/misc/d1mach-tst.for b/libcruft/misc/d1mach-tst.for
--- a/libcruft/misc/d1mach-tst.for
+++ b/libcruft/misc/d1mach-tst.for
@@ -1,7 +1,8 @@
       program main
       integer i
       double precision d1mach
+      double precision t1, t2
       do 10 i = 1, 5
         print *, d1mach (i)
    10 continue
       end
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,14 @@
+2001-10-08  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* DASSL.cc (ddassl_f): Handle IRES returned from user supplied
+	function.
+	* DAEFunc.h (DAERHSFunc): Add IRES to prototype.
+
 2001-06-07  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* dMatrix.cc (Matrix::inverse, Matrix::solve, Matrix::determinant,
 	Matrix::inverse): Handle the case of rcond being a NaN the same as
 	a signular matrix.  From "Jianming" <caijianming@yahoo.co.uk>.
 	* CMatrix.cc (ComplexMatrix::inverse, ComplexMatrix::solve,
 	ComplexMatrix::determinant, ComplexMatrix::inverse): Likewise.
 
diff --git a/liboctave/DAEFunc.h b/liboctave/DAEFunc.h
--- a/liboctave/DAEFunc.h
+++ b/liboctave/DAEFunc.h
@@ -33,17 +33,18 @@ public:
 
   struct DAEJac
     {
       Matrix *dfdxdot;
       Matrix *dfdx;
     };
 
   typedef ColumnVector (*DAERHSFunc) (const ColumnVector& x,
-				      const ColumnVector& xdot, double); 
+				      const ColumnVector& xdot,
+				      double, int&); 
 
   typedef DAEJac (*DAEJacFunc) (const ColumnVector& x,
 				const ColumnVector& xdot, double);
 
   DAEFunc (void)
     : fun (0), jac (0) { }
 
   DAEFunc (DAERHSFunc f)
diff --git a/liboctave/DASSL.cc b/liboctave/DASSL.cc
--- a/liboctave/DASSL.cc
+++ b/liboctave/DASSL.cc
@@ -140,24 +140,27 @@ ddassl_f (const double& time, double *st
   ColumnVector tmp_delta (nn);
 
   for (int i = 0; i < nn; i++)
     {
       tmp_deriv.elem (i) = deriv [i];
       tmp_state.elem (i) = state [i];
     }
 
-  tmp_delta = user_fun (tmp_state, tmp_deriv, time);
+  tmp_delta = user_fun (tmp_state, tmp_deriv, time, ires);
 
-  if (tmp_delta.length () == 0)
-    ires = -2;
-  else
+  if (ires >= 0)
     {
-      for (int i = 0; i < nn; i++)
-	delta [i] = tmp_delta.elem (i);
+      if (tmp_delta.length () == 0)
+	ires = -2;
+      else
+	{
+	  for (int i = 0; i < nn; i++)
+	    delta [i] = tmp_delta.elem (i);
+	}
     }
 
   return 0;
 }
 
 int
 ddassl_j (const double& time, double *, double *, double *pd, const
 	  double& cj, double *, int *)
@@ -215,17 +218,19 @@ DASSL::do_integrate (double tout)
   double *pxdot = xdot.fortran_vec ();
 
   nn = n;
   user_fun = DAEFunc::fun;
   user_jac = DAEFunc::jac;
 
   if (! sanity_checked)
     {
-      ColumnVector res = (*user_fun) (x, xdot, t);
+      int ires = 0;
+
+      ColumnVector res = (*user_fun) (x, xdot, t, ires);
 
       if (res.length () != x.length ())
 	{
 	  (*current_liboctave_error_handler)
 	    ("dassl: inconsistent sizes for state and residual vectors");
 
 	  integration_error = 1;
 	  return retval;
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2001-10-08  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* DLD-FUNCTIONS/dassl.cc (dassl_user_function): Allow user
+	supplied RES function to return IDID as second value.
+
 2001-07-23  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* parse.y: Clear help_buf after documenting function.
 
 2001-06-29  Mumit Khan  <khan@nanotech.wisc.edu>
 
 	* defun-int.h (DEFINE_FUN_INSTALLER_FUN{2,3}): New macros.
 	(DEFINE_FUN_INSTALLER_FUN): Use.
diff --git a/src/DLD-FUNCTIONS/dassl.cc b/src/DLD-FUNCTIONS/dassl.cc
--- a/src/DLD-FUNCTIONS/dassl.cc
+++ b/src/DLD-FUNCTIONS/dassl.cc
@@ -45,17 +45,18 @@ Software Foundation, 59 Temple Place - S
 static octave_function *dassl_fcn;
 
 static DASSL_options dassl_opts;
 
 // Is this a recursive call?
 static int call_depth = 0;
 
 ColumnVector
-dassl_user_function (const ColumnVector& x, const ColumnVector& xdot, double t)
+dassl_user_function (const ColumnVector& x, const ColumnVector& xdot,
+		     double t, int& ires)
 {
   ColumnVector retval;
 
   int nstates = x.capacity ();
 
   assert (nstates == xdot.capacity ());
 
   octave_value_list args;
@@ -90,20 +91,24 @@ dassl_user_function (const ColumnVector&
       octave_value_list tmp = dassl_fcn->do_multi_index_op (1, args);
 
       if (error_state)
 	{
 	  gripe_user_supplied_eval ("dassl");
 	  return retval;
 	}
 
-      if (tmp.length () > 0 && tmp(0).is_defined ())
+      int tlen = tmp.length ();
+      if (tlen > 0 && tmp(0).is_defined ())
 	{
 	  retval = ColumnVector (tmp(0).vector_value ());
 
+	  if (tlen > 1)
+	    ires = tmp(1).int_value ();
+
 	  if (error_state || retval.length () == 0)
 	    gripe_user_supplied_eval ("dassl");
 	}
       else
 	gripe_user_supplied_eval ("dassl");
     }
 
   return retval;
