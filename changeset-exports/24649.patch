# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1517249410 18000
#      Mon Jan 29 13:10:10 2018 -0500
# Node ID 456b486ae5e6d423401d01753ba124677d5aae0f
# Parent  1f1ac73910aba1db9701e5d737f9f2bb8393e5f3
respect autofit setting in variable edtior update (bug #52988)

* variable-editor.h, variable-editor.cc
(variable_editor::maybe_resize_columns): New function.
(variable_editor::edit_variable, variable_editor::callUpdate):
Call maybe_resize_columns to avoid duplicated code.
* variable-editor-model.h, variable-editor-model.cc
(variable_editor_model::maybe_resize_columns_signal): Rename form
resize_columns_signal.
(variable_editor_model::variable_editor_model): Connect
maybe_resize_columns_signal to variable_editor::maybe_resize_columns.

diff --git a/libgui/src/variable-editor-model.cc b/libgui/src/variable-editor-model.cc
--- a/libgui/src/variable-editor-model.cc
+++ b/libgui/src/variable-editor-model.cc
@@ -312,18 +312,18 @@ variable_editor_model::variable_editor_m
            this, SLOT (update_data (const octave_value&)));
 
   connect (this, SIGNAL (data_error_signal (const QString&)),
            this, SLOT (data_error (const QString&)));
 
   connect (this, SIGNAL (clear_data_cell_signal (int, int)),
            this, SLOT (clear_data_cell (int, int)));
 
-  connect (this, SIGNAL (resize_columns_signal (void)),
-           parent, SLOT (resizeColumnsToContents (void)));
+  connect (this, SIGNAL (maybe_resize_columns_signal (void)),
+           parent, SLOT (maybe_resize_columns (void)));
 
   if (! type_is_editable (val))
     return;
 
   // Initializes everything.
 
   int rows = 0;
   int cols = 0;
@@ -594,17 +594,17 @@ variable_editor_model::update_data (cons
       endInsertColumns ();
     }
 
   display_valid ();
 
   emit dataChanged (QAbstractTableModel::index (0, 0),
                     QAbstractTableModel::index (new_rows-1, new_cols-1));
 
-  emit resize_columns_signal ();
+  emit maybe_resize_columns_signal ();
 }
 
 // Private.
 
 // val has to be copied!
 
 void
 variable_editor_model::set_data_oct (const std::string& name,
diff --git a/libgui/src/variable-editor-model.h b/libgui/src/variable-editor-model.h
--- a/libgui/src/variable-editor-model.h
+++ b/libgui/src/variable-editor-model.h
@@ -102,17 +102,17 @@ signals: // private
   void update_data_signal (const octave_value& val);
 
   void clear_data_cell_signal (int r, int c);
 
   void data_error_signal (const QString& name) const;
 
   void user_error_signal (const QString& title, const QString& msg) const;
 
-  void resize_columns_signal (void);
+  void maybe_resize_columns_signal (void);
 
 private slots:
 
   void update_data (const octave_value& val);
 
   void clear_data_cell (int r, int c);
 
   // Change the display if the variable does not exist.
diff --git a/libgui/src/variable-editor.cc b/libgui/src/variable-editor.cc
--- a/libgui/src/variable-editor.cc
+++ b/libgui/src/variable-editor.cc
@@ -200,35 +200,17 @@ variable_editor::edit_variable (const QS
   int tab_idx = m_tab_widget->addTab (page, name);
   m_tab_widget->setCurrentIndex (tab_idx);
 
   // Enable tool bar for when opening first tab.
 
   if (m_tab_widget->count () == 1)
     m_tool_bar->setEnabled (true);
 
-  if (m_autofit)
-    {
-      table->resizeColumnsToContents ();
-
-      if (m_autofit_max)
-        {
-          int mx = 0;
-
-          for (int i = 0; i < table->model ()->columnCount (); i++)
-            {
-              if (table->columnWidth (i) > mx)
-                mx = table->columnWidth (i);
-            }
-
-          table->horizontalHeader ()->setDefaultSectionSize (mx);
-        }
-    }
-  else
-    table->horizontalHeader ()->setDefaultSectionSize (m_default_width);
+  maybe_resize_columns ();
 
   table->setFont (m_font);
   table->setStyleSheet (m_stylesheet);
   table->setAlternatingRowColors (m_alternate_rows);
 #if defined (HAVE_QT4)
   table->verticalHeader ()->setResizeMode (QHeaderView::Interactive);
 #else
   table->verticalHeader ()->setSectionResizeMode (QHeaderView::Interactive);
@@ -300,35 +282,17 @@ variable_editor::color_names (void)
   output << "Alternate Background";
 
   return output;
 }
 
 void
 variable_editor::callUpdate (const QModelIndex&, const QModelIndex&)
 {
-  if (m_autofit)
-    {
-      QTableView *view = get_table_data (m_tab_widget).m_table;
-
-      view->resizeColumnsToContents ();
-
-      if (m_autofit_max)
-        {
-          int mx = 0;
-
-          for (int i = 0; i < view->model ()->columnCount (); i++)
-            {
-              if (view->columnWidth (i) > mx)
-                mx = view->columnWidth (i);
-            }
-
-          view->horizontalHeader ()->setDefaultSectionSize (mx);
-        }
-    }
+  maybe_resize_columns ();
 
   emit updated ();
 }
 
 void
 variable_editor::notice_settings (const QSettings *settings)
 {
   // FIXME: Why use object->tostring->toint?  Why not just 100?
@@ -437,16 +401,42 @@ variable_editor::closeTab (int idx)
 
   // Disable tool bar when closing last tab.
 
   if (m_tab_widget->count () == 0)
     m_tool_bar->setEnabled (false);
 }
 
 void
+variable_editor::maybe_resize_columns (void)
+{
+  QTableView *table = get_table_data (m_tab_widget).m_table;
+
+  if (m_autofit)
+    {
+      table->resizeColumnsToContents ();
+
+      if (m_autofit_max)
+        {
+          int mx = 0;
+
+          for (int i = 0; i < table->model ()->columnCount (); i++)
+            {
+              if (table->columnWidth (i) > mx)
+                mx = table->columnWidth (i);
+            }
+
+          table->horizontalHeader ()->setDefaultSectionSize (mx);
+        }
+    }
+  else
+    table->horizontalHeader ()->setDefaultSectionSize (m_default_width);
+}
+
+void
 variable_editor::contextmenu_requested (const QPoint& qpos)
 {
   QTableView *view = get_table_data (m_tab_widget).m_table;
   QModelIndex index = view->indexAt (qpos);
 
   if (index.isValid ())
     {
       QMenu *menu = new QMenu (this);
diff --git a/libgui/src/variable-editor.h b/libgui/src/variable-editor.h
--- a/libgui/src/variable-editor.h
+++ b/libgui/src/variable-editor.h
@@ -65,16 +65,18 @@ public:
   static QStringList color_names (void);
 
 public slots:
 
   void callUpdate (const QModelIndex&,const QModelIndex&);
 
   void notice_settings (const QSettings *);
 
+  void maybe_resize_columns (void);
+
 protected slots:
 
   void closeEvent (QCloseEvent *);
 
   void closeTab (int idx);
 
   void contextmenu_requested (const QPoint& pt);
 
