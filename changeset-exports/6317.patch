# HG changeset patch
# User jwe
# Date 1171613454 0
#      Fri Feb 16 08:10:54 2007 +0000
# Node ID 8c67f8be341d7deb03fb066532ac9b9e987dad2d
# Parent  a3a2580435c2ad0b443c01c09edb9fe046e7807c
[project @ 2007-02-16 08:10:53 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,18 @@
+2007-02-16  John W. Eaton  <jwe@octave.org>
+
+	* input.cc (interactive_input): New arg, DEBUG.  Don't call
+	drawnow if debugging.
+	(get_user_input): Pass DEBUG to interactive_input.
+
+2007-02-16  Muthiah Annamalai  <muthuspost@gmail.com>
+
+	* debug.cc (Fdbtype): Improve compatibility.
+
 2007-02-16  John W. Eaton  <jwe@octave.org>
 
 	* toplev.cc (wait_for_input): New function.
 	(run_command_and_return_output): Use it instead of napping.
 
 	* oct-procbuf.h (octave_procbuf::pid): Now const.
 	* procstream.h (procstreambase::pid): Now const.
 	(procstreambase::file_number): New function.
diff --git a/src/debug.cc b/src/debug.cc
--- a/src/debug.cc
+++ b/src/debug.cc
@@ -343,18 +343,19 @@ do_dbtype (std::ostream& os, const std::
 		    os << line << "\t";
 		}
 	    }
 	}
       else
 	os << "dbtype: unable to open `" << ff << "' for reading!\n";
     }
   else
-    os << "dbtype: unkown function";
+    os << "dbtype: unknown function " << name << "\n";
 
+  os.flush();
 }
 
 DEFCMD (dbtype, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} dbtype ()\n\
 List script file with line numbers.\n\
 @seealso{dbclear, dbstatus, dbstop}\n\
 @end deftypefn")
@@ -396,53 +397,62 @@ List script file with line numbers.\n\
 		  if (ind != NPOS)
 		    {
 		      std::string start_str = arg.substr (0, ind);
 		      std::string end_str = arg.substr (ind + 1);
 
 		      int start = atoi (start_str.c_str ());
 		      int end = atoi (end_str.c_str ());
 		
-		      if (start < end)
-			do_dbtype (octave_stdout,
-				   dbg_fcn->name (), start, end);
+		      if (std::min (start, end) <= 0)
+ 			error ("dbtype: start and end lines must be >= 1\n");
+
+		      if (start <= end)
+			do_dbtype (octave_stdout, dbg_fcn->name (), start, end);
 		      else
-			error ("dbtype: the start line must be less than the end line\n");
+			error ("dbtype: start line must be less than end line\n");
 		    }
 		  else
-		    error ("dbtype: if you specify lines it must be like `start:end`");
+		    error ("dbtype: line specification must be `start:end'");
 		}
 	    }
 	  break;
 
-	case 2: // (dbtype func start:end)
+	case 2: // (dbtype func start:end) , (dbtype func start)
 	  dbg_fcn = get_user_function (argv[1]);
 
 	  if (dbg_fcn)
 	    {
 	      std::string arg = argv[2];
-
+	      int start = 0;
+	      int end = 0;
 	      size_t ind = arg.find (':');
 
 	      if (ind != NPOS)
 		{
 		  std::string start_str = arg.substr (0, ind);
 		  std::string end_str = arg.substr (ind + 1);
 
-		  int start = atoi (start_str.c_str ());
-		  int end = atoi (end_str.c_str ());
-		
-		  if (start < end)
-		    do_dbtype (octave_stdout,
-			       dbg_fcn->name (), start, end);
-		  else
-		    error ("dbtype: the start line must be less than the end line\n");
+		  start = atoi (start_str.c_str ());
+		  end = atoi (end_str.c_str ());
+		  
 		}
 	      else
-		error ("dbtype: if you specify lines it must be like `start:end`");
+		{
+		  start = atoi (arg.c_str ());
+		  end = start;
+		}
+
+	      if (std::min (start, end) <= 0)
+		error ("dbtype: start and end lines must be >= 1\n");
+	      
+	      if (start <= end)
+		do_dbtype (octave_stdout, dbg_fcn->name (), start, end);
+	      else
+		error ("dbtype: start line must be less than end line\n");
 	    }
 	  break;
 
 	default:
 	  error ("dbtype: expecting zero, one, or two arguments\n");
 	}
     }
 
diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -206,21 +206,23 @@ gnu_readline (const std::string& s, bool
 
       retval = octave_fgets (curr_stream);
     }
 
   return retval;
 }
 
 static inline std::string
-interactive_input (const std::string& s, bool force_readline = false)
+interactive_input (const std::string& s, bool debug = false,
+		   bool force_readline = false)
 {
   Vlast_prompt_time.stamp ();
 
-  if (Vdrawnow_requested && (interactive || forced_interactive))
+  if (! debug
+      && (Vdrawnow_requested && (interactive || forced_interactive)))
     {
       feval ("drawnow");
 
       // We set Vdrawnow_requested to false even if there is an error
       // in drawnow so that the error doesn't reappear at every prompt.
 
       Vdrawnow_requested = false;
 
@@ -624,17 +626,17 @@ get_user_input (const octave_value_list&
     }
 
  again:
 
   flush_octave_stdout ();
 
   octave_diary << prompt;
 
-  std::string input_buf = interactive_input (prompt.c_str (), true);
+  std::string input_buf = interactive_input (prompt.c_str (), debug, true);
 
   if (! input_buf.empty ())
     {
       if (! input_from_startup_file)
 	command_history::add (input_buf);
 
       size_t len = input_buf.length ();
 
