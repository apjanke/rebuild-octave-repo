# HG changeset patch
# User Rik <rik@octave.org>
# Date 1484703747 28800
#      Tue Jan 17 17:42:27 2017 -0800
# Node ID 7c7a61c2e0edf0ad9249e1c48cb3b9759db0d5be
# Parent  17e05e930d58a269a42938555df425bb05205a65
Replace out-of-date __keywords__ with alias to iskeyword.

* help.cc: Add #include "builtin-defun-decls.h".  Sort list of #includes.
Remove static variable keywords and keyword_names.
* help.cc (make_name_list): New static variable keywords to hold output of
Fiskeyword.  New static variable key_len to hold number of keywords.
* help.cc (F__keywords): Remove DEFUN and replace with DEFALIAS to iskeyword.

* file-editor-tab.cc (update_lexer): Call Fiskeyword rather than F__keywords__.

* help.m: Replace call to iskeyword with __keywords__.

diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -677,17 +677,17 @@ file_editor_tab::update_lexer ()
           int i,j;
 
           if (_is_octave_file)
             {
               // octave: get keywords from internal informations depending on
               //         user preferences
 
               // keywords are always used
-              add_octave_apis (F__keywords__ ());       // add new entries
+              add_octave_apis (Fiskeyword ());            // add new entries
 
               if (octave_builtins)
                 add_octave_apis (F__builtins__ ());       // add new entries
 
               if (octave_functions)
                 add_octave_apis (F__list_functions__ ()); // add new entries
 
             }
diff --git a/libinterp/corefcn/help.cc b/libinterp/corefcn/help.cc
--- a/libinterp/corefcn/help.cc
+++ b/libinterp/corefcn/help.cc
@@ -36,42 +36,43 @@ along with Octave; see the file COPYING.
 
 #include "cmd-edit.h"
 #include "file-ops.h"
 #include "file-stat.h"
 #include "oct-env.h"
 #include "oct-locbuf.h"
 #include "str-vec.h"
 
+#include "Cell.h"
+#include "builtin-defun-decls.h"
 #include "call-stack.h"
-#include <defaults.h>
-#include "Cell.h"
 #include "defun.h"
 #include "dirfns.h"
 #include "error.h"
 #include "errwarn.h"
 #include "help.h"
 #include "input.h"
+#include "interpreter.h"
 #include "load-path.h"
+#include "ov-fcn-handle.h"
+#include "ov-usr-fcn.h"
 #include "ovl.h"
-#include "ov-usr-fcn.h"
-#include "ov-fcn-handle.h"
 #include "pager.h"
 #include "parse.h"
 #include "pathsearch.h"
 #include "procstream.h"
 #include "pt-pr-code.h"
+#include "quit.h"
 #include "sighandlers.h"
 #include "symtab.h"
-#include "interpreter.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
 #include "version.h"
-#include "quit.h"
+#include <defaults.h>
 
 // Name of the doc cache file specified on the command line.
 // (--doc-cache-file file)
 std::string Vdoc_cache_file;
 
 // Name of the file containing local Texinfo macros that are prepended
 // to doc strings before processing.
 // (--texi-macros-file)
@@ -139,56 +140,16 @@ const static char * const operators[] =
   "]",
   "|",
   "||",
   0
 };
 
 const static string_vector operator_names (operators);
 
-const static char * const keywords[] =
-{
-  "break",
-  "case",
-  "catch",
-  "continue",
-  "do",
-  "else",
-  "elseif",
-  "end",
-  "end_try_catch",
-  "end_unwind_protect",
-  "endfor",
-  "endfunction",
-  "endif",
-  "endparfor",
-  "endswitch",
-  "endwhile",
-  "for",
-  "function",
-  "global",
-  "if",
-  "otherwise",
-  "parfor",
-  "persistent",
-  "return",
-  "static",
-  "switch",
-  "try",
-  "until",
-  "unwind_protect",
-  "unwind_protect_cleanup",
-  "varargin",
-  "varargout",
-  "while",
-  0
-};
-
-const static string_vector keyword_names (keywords);
-
 // Return a vector of all functions from this file,
 // for use in command line auto-completion.
 static string_vector
 local_functions (void)
 {
   string_vector retval;
 
   octave_user_code *curr_fcn = octave::call_stack::caller_user_code ();
@@ -214,17 +175,18 @@ local_functions (void)
   return retval;
 }
 
 // FIXME: It's not likely that this does the right thing now.
 
 string_vector
 make_name_list (void)
 {
-  const int key_len = keyword_names.numel ();
+  const static string_vector keywords = Fiskeyword ()(0).string_vector_value ();
+  const static int key_len = keywords.numel (); 
 
   const string_vector bif = symbol_table::built_in_function_names ();
   const int bif_len = bif.numel ();
 
   const string_vector cfl = symbol_table::cmdline_function_names ();
   const int cfl_len = cfl.numel ();
 
   const string_vector lcl = symbol_table::variable_names ();
@@ -243,18 +205,19 @@ make_name_list (void)
     = key_len + bif_len + cfl_len + lcl_len + ffl_len + afl_len + lfl_len;
 
   string_vector list (total_len);
 
   // Put all the symbols in one big list.
 
   int j = 0;
   int i = 0;
+
   for (i = 0; i < key_len; i++)
-    list[j++] = keyword_names[i];
+    list[j++] = keywords[i];
 
   for (i = 0; i < bif_len; i++)
     list[j++] = bif[i];
 
   for (i = 0; i < cfl_len; i++)
     list[j++] = cfl[i];
 
   for (i = 0; i < lcl_len; i++)
@@ -627,42 +590,34 @@ The format is a string which is one of @
 
   std::string text, format;
 
   do_get_help_text_from_file (fname, text, format);
 
   return ovl (text, format);
 }
 
-// Return a cell array of strings containing the names of all
-// operators.
+// Return a cell array of strings containing the names of all operators.
 
 DEFUN (__operators__, , ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} __operators__ ()
 Undocumented internal function.
 @end deftypefn */)
 {
   return ovl (Cell (operator_names));
 }
 
-// Return a cell array of strings containing the names of all
-// keywords.
+// Return a cell array of strings containing the names of all keywords.
+// iskeyword() function is located in lex.ll and is based on what the parser
+// thinks is a keyword.
 
-DEFUN (__keywords__, , ,
-       doc: /* -*- texinfo -*-
-@deftypefn {} {} __keywords__ ()
-Undocumented internal function.
-@end deftypefn */)
-{
-  return ovl (Cell (keyword_names));
-}
+DEFALIAS (__keywords__, iskeyword)
 
-// Return a cell array of strings containing the names of all builtin
-// functions.
+// Return a cell array of strings with the names of all builtin functions.
 
 DEFUN (__builtins__, , ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} __builtins__ ()
 Undocumented internal function.
 @end deftypefn */)
 {
   const string_vector bif = symbol_table::built_in_function_names ();
diff --git a/scripts/help/help.m b/scripts/help/help.m
--- a/scripts/help/help.m
+++ b/scripts/help/help.m
@@ -138,17 +138,17 @@ function retval = do_list_operators ()
                      "      help \"NAME\"   or   help 'NAME'"]);
 endfunction
 
 function retval = do_list_functions ()
 
   operators = do_list_operators ();
 
   keywords = sprintf ("*** keywords:\n\n%s\n\n",
-                      list_in_columns (iskeyword ()));
+                      list_in_columns (__keywords__ ()));
 
   builtins = sprintf ("*** builtins:\n\n%s\n\n",
                       list_in_columns (__builtins__ ()));
 
   dirs = ostrsplit (path, pathsep);
   flist = "";
   for i = 2:numel (dirs)
     files = sort ({dir(fullfile (dirs{i}, "*.m")).name, ...
