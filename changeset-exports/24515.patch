# HG changeset patch
# User Sahil Yadav <yadavsahil5198@gmail.com>
# Date 1514958407 -19800
#      Wed Jan 03 11:16:47 2018 +0530
# Node ID 070e9b0361414907059541f775cfa56b0a459d45
# Parent  2bee24503a13d08d5edfebb730bf46f9bdfdae7d
primes.m: Correctly return output of same class as input (bug #52787).

* primes.m: Assign output variable 'p' to be the result of casting
'p' to the desired class.  Use '@:' Texinfo to create a non-sentence
ending period for etc.  Add BIST tests for output class.

diff --git a/scripts/specfun/primes.m b/scripts/specfun/primes.m
--- a/scripts/specfun/primes.m
+++ b/scripts/specfun/primes.m
@@ -12,23 +12,23 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ## GNU General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {} {} primes (@var{n})
+## @deftypefn {} {@var{p} =} primes (@var{n})
 ## Return all primes up to @var{n}.
 ##
-## The output data class (double, single, uint32, etc.) is the same as the
+## The output data class (double, single, uint32, etc.@:) is the same as the
 ## input class of @var{n}.  The algorithm used is the Sieve of Eratosthenes.
 ##
-## Notes: If you need a specific number of primes you can use the fact that the
+## Note: If you need a specific number of primes you can use the fact that the
 ## distance from one prime to the next is, on average, proportional to the
 ## logarithm of the prime.  Integrating, one finds that there are about
 ## @math{k} primes less than
 ## @tex
 ## $k \log (5 k)$.
 ## @end tex
 ## @ifnottex
 ## k*log (5*k).
@@ -89,20 +89,22 @@ function p = primes (n)
          109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, ...
          173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, ...
          233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, ...
          293, 307, 311, 313, 317, 331, 337, 347, 349];
     p = a(a <= n);
   endif
 
   if (! isa (n, "double"))
-    cast (p, class (n));
+    p = cast (p, class (n));
   endif
 
 endfunction
 
 
 %!assert (size (primes (350)), [1, 70])
 %!assert (primes (357)(end), 353)
+%!assert (class (primes (single (10))), "single")
+%!assert (class (primes (uint8 (10))), "uint8")
 
 %!error primes ()
 %!error primes (1, 2)
 %!error <N must be a scalar> primes (ones (2,2))
