# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1455134422 18000
#      Wed Feb 10 15:00:22 2016 -0500
# Node ID 933083fee7aedaaa6d6e804c09d8702aff5e0926
# Parent  1473547f50f501a3b4efea18854800f3c15a3279
# Parent  f09f7dd58503a213581971b441650bfb9c3cafb4
maint: Periodic merge of stable to default.

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -2224,16 +2224,35 @@ AC_CHECK_SIZEOF([long double])
 ### Check structures and existence of necessary members
 
 AC_CHECK_MEMBERS([struct stat.st_blksize, struct stat.st_blocks,
                   struct stat.st_rdev])
 AC_CHECK_MEMBERS([struct group.gr_passwd])
 
 AC_STRUCT_TIMEZONE
 
+## Check if C++ compiler allows overload of char, int8_t, and uint8_t.
+AC_CACHE_CHECK([whether ${CXX-g++} allows overload of char, int8_t, and uint8_t],
+  [octave_cv_overload_char_int8_t],
+  [AC_LANG_PUSH(C++)
+  AC_COMPILE_IFELSE([AC_LANG_SOURCE([[
+    #include <stdint.h>
+    void somefunc(char x) {};
+    void somefunc(int8_t x) {};
+    void somefunc(uint8_t x) {};
+    ]])],
+    octave_cv_overload_char_int8_t=yes,
+    octave_cv_overload_char_int8_t=no)
+  AC_LANG_POP(C++)
+  ])
+if test $octave_cv_overload_char_int8_t = yes; then
+  AC_DEFINE(HAVE_OVERLOAD_CHAR_INT8_TYPES, 1,
+    [Define to 1 if C++ allows overload of char, int8_t, and uint8_t types.])
+fi
+
 ### Check compiler characteristics.
 
 ## Check if C++ compiler can auto allocate variable sized arrays.
 OCTAVE_CXX_DYNAMIC_AUTO_ARRAYS
 
 ## Check that C compiler and libraries support IEEE754 data format.
 OCTAVE_IEEE754_DATA_FORMAT
 
diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -3804,17 +3804,19 @@ INSTANTIATE_WRITE (int8_t);
 INSTANTIATE_WRITE (uint8_t);
 INSTANTIATE_WRITE (int16_t);
 INSTANTIATE_WRITE (uint16_t);
 INSTANTIATE_WRITE (int32_t);
 INSTANTIATE_WRITE (uint32_t);
 INSTANTIATE_WRITE (int64_t);
 INSTANTIATE_WRITE (uint64_t);
 INSTANTIATE_WRITE (bool);
+#if defined (HAVE_OVERLOAD_CHAR_INT8_TYPES)
 INSTANTIATE_WRITE (char);
+#endif
 INSTANTIATE_WRITE (float);
 INSTANTIATE_WRITE (double);
 
 octave_value
 octave_stream::scanf (const std::string& fmt, const Array<double>& size,
                       octave_idx_type& count, const std::string& who)
 {
   octave_value retval;
diff --git a/libinterp/dldfcn/__osmesa_print__.cc b/libinterp/dldfcn/__osmesa_print__.cc
--- a/libinterp/dldfcn/__osmesa_print__.cc
+++ b/libinterp/dldfcn/__osmesa_print__.cc
@@ -22,32 +22,32 @@ This code is based on Brian Pauls' src/o
 from git://anongit.freedesktop.org/mesa/demos
 
 */
 
 #ifdef HAVE_CONFIG_H
 #  include <config.h>
 #endif
 
+#if defined (HAVE_OSMESA_H)
+#  include <osmesa.h>
+#elif defined (HAVE_GL_OSMESA_H)
+#  include <GL/osmesa.h>
+#endif
+
 #include "oct-locbuf.h"
 #include "unwind-prot.h"
 
 #include "defun-dld.h"
 #include "errwarn.h"
 #include "gl-render.h"
 #include "gl2ps-print.h"
 #include "graphics.h"
 #include "oct-opengl.h"
 
-#if defined (HAVE_OSMESA_H)
-#  include "osmesa.h"
-#elif defined (HAVE_GL_OSMESA_H)
-#  include "GL/osmesa.h"
-#endif
-
 #if defined (HAVE_OSMESA) && defined (HAVE_OPENGL)
 
 static void
 reset_visibility (figure::properties *fp)
 {
   fp->set_visible ("on");
 }
 
diff --git a/liboctave/util/oct-inttypes.h b/liboctave/util/oct-inttypes.h
--- a/liboctave/util/oct-inttypes.h
+++ b/liboctave/util/oct-inttypes.h
@@ -834,20 +834,22 @@ octave_int : public octave_int_base<T>
 {
 public:
   typedef T val_type;
 
   octave_int (void) : ival () { }
 
   octave_int (T i) : ival (i) { }
 
+#if defined (HAVE_OVERLOAD_CHAR_INT8_TYPES)
   // Always treat characters as unsigned.
   octave_int (char c)
     : ival (octave_int_base<T>::truncate_int (static_cast<unsigned char> (c)))
   { }
+#endif
 
   octave_int (double d) : ival (octave_int_base<T>::convert_real (d)) { }
 
   octave_int (float d) : ival (octave_int_base<T>::convert_real (d)) { }
 
 #ifdef OCTAVE_INT_USE_LONG_DOUBLE
   octave_int (long double d) : ival (octave_int_base<T>::convert_real (d)) { }
 #endif
