# HG changeset patch
# User Lachlan Andrew <lachlanbis@gmail.com>
# Date 1467274646 -36000
#      Thu Jun 30 18:17:26 2016 +1000
# Node ID 5d4a286061c8a13116eec4d8770c22493304be78
# Parent  ae89334cb53617648b4c97319b151ac115d579a5
Track line numbers when in debug mode (bug #45764)

* pt-eval.cc (visit_statement): update location if new variable
  Vtrack_line_number is true, rather than simply not debugging.

* input.{h,cc}: Declare and define Vtrack_line_number.

* input.cc (do_keyboard): set Vtrack_line_number = false, because
  commands entered from the keyboard do not have valid line numbers.

* ov-usr-fcn.cc (octave_user_script::do_multi_index_op,
  octave_user_function::do_multi_index_op): Set Vtrack_line_number =
  true whenever executing a function or script, since these line
  numbers are meaningful.  Unwind/protect so future keyboard commands
  do not corrupt the program line number.

* debug.cc (Fdbcont, Fdbstep): set Vtrack_line_number = true when
  resuming running code.

diff --git a/libinterp/corefcn/debug.cc b/libinterp/corefcn/debug.cc
--- a/libinterp/corefcn/debug.cc
+++ b/libinterp/corefcn/debug.cc
@@ -2089,40 +2089,44 @@ function returns.
 
   if (nargin == 1)
     {
       std::string arg = args(0).xstring_value ("dbstep: input argument must be a string");
 
       if (arg == "in")
         {
           Vdebugging = false;
+          Vtrack_line_num = true;
 
           tree_evaluator::dbstep_flag = -1;
         }
       else if (arg == "out")
         {
           Vdebugging = false;
+          Vtrack_line_num = true;
 
           tree_evaluator::dbstep_flag = -2;
         }
       else
         {
           int n = atoi (arg.c_str ());
 
           if (n < 1)
             error ("dbstep: invalid argument");
 
           Vdebugging = false;
+          Vtrack_line_num = true;
 
           tree_evaluator::dbstep_flag = n;
         }
     }
   else
     {
       Vdebugging = false;
+      Vtrack_line_num = true;
 
       tree_evaluator::dbstep_flag = 1;
     }
 
   return ovl ();
 }
 
 DEFALIAS (dbnext, dbstep);
@@ -2136,16 +2140,17 @@ Leave command-line debugging mode and co
 {
   if (! Vdebugging)
     error ("dbcont: can only be called in debug mode");
 
   if (args.length () != 0)
     print_usage ();
 
   Vdebugging = false;
+  Vtrack_line_num = true;
 
   tree_evaluator::reset_debug_state ();
 
   return ovl ();
 }
 
 DEFUN (dbquit, args, ,
        doc: /* -*- texinfo -*-
diff --git a/libinterp/corefcn/input.cc b/libinterp/corefcn/input.cc
--- a/libinterp/corefcn/input.cc
+++ b/libinterp/corefcn/input.cc
@@ -103,16 +103,21 @@ bool octave_completion_matches_called = 
 
 // TRUE if the plotting system has requested a call to drawnow at
 // the next user prompt.
 bool Vdrawnow_requested = false;
 
 // TRUE if we are in debugging mode.
 bool Vdebugging = false;
 
+// TRUE if we are recording line numbers in a source file.
+// Always true except when debugging and taking input directly from
+// the terminal.
+bool Vtrack_line_num = true;
+
 // If we are in debugging mode, this is the last command entered, so
 // that we can repeat the previous command if the user just types RET.
 static std::string last_debugging_command = "\n";
 
 // TRUE if we are running in the Emacs GUD mode.
 static bool Vgud_mode = false;
 
 // The filemarker used to separate filenames from subfunction names
@@ -616,16 +621,18 @@ get_debug_input (const std::string& prom
     }
 
   octave_parser curr_parser;
 
   while (Vdebugging)
     {
       try
         {
+          Vtrack_line_num = false;
+
           reset_error_handler ();
 
           curr_parser.reset ();
 
           int retval = curr_parser.run ();
 
           if (octave::command_editor::interrupt (false))
             break;
@@ -880,16 +887,17 @@ do_keyboard (const octave_value_list& ar
 
   // FIXME: probably we just want to print one line, not the
   // entire statement, which might span many lines...
   //
   // tree_print_code tpc (octave_stdout);
   // stmt.accept (tpc);
 
   Vdebugging = true;
+  Vtrack_line_num = false;
 
   std::string prompt = "debug> ";
   if (nargin > 0)
     prompt = args(0).string_value ();
 
   get_debug_input (prompt);
 
   return retval;
diff --git a/libinterp/corefcn/input.h b/libinterp/corefcn/input.h
--- a/libinterp/corefcn/input.h
+++ b/libinterp/corefcn/input.h
@@ -45,16 +45,19 @@ extern bool octave_completion_matches_ca
 
 // TRUE if the plotting system has requested a call to drawnow at
 // the next user prompt.
 extern OCTINTERP_API bool Vdrawnow_requested;
 
 // TRUE if we are in debugging mode.
 extern OCTINTERP_API bool Vdebugging;
 
+// TRUE if we are not executing a command direct from debug> prompt.
+extern OCTINTERP_API bool Vtrack_line_num;
+
 extern void initialize_command_input (void);
 
 extern bool octave_yes_or_no (const std::string& prompt);
 
 extern octave_value do_keyboard (const octave_value_list& args
                                  = octave_value_list ());
 
 extern void remove_input_event_hook_functions (void);
diff --git a/libinterp/octave-value/ov-usr-fcn.cc b/libinterp/octave-value/ov-usr-fcn.cc
--- a/libinterp/octave-value/ov-usr-fcn.cc
+++ b/libinterp/octave-value/ov-usr-fcn.cc
@@ -136,16 +136,19 @@ octave_user_script::do_multi_index_op (i
 
       if (call_depth >= Vmax_recursion_depth)
         error ("max_recursion_depth exceeded");
 
       octave_call_stack::push (this);
 
       frame.add_fcn (octave_call_stack::pop);
 
+      frame.protect_var (Vtrack_line_num);
+      Vtrack_line_num = true;    // update line no. even if debugging
+
       frame.protect_var (tree_evaluator::statement_context);
       tree_evaluator::statement_context = tree_evaluator::script;
 
       BEGIN_PROFILER_BLOCK (octave_user_script)
 
         cmd_list->accept (*current_evaluator);
 
       END_PROFILER_BLOCK
@@ -499,16 +502,19 @@ octave_user_function::do_multi_index_op 
     error ("max_recursion_depth exceeded");
 
   // Save old and set current symbol table context, for
   // eval_undefined_error().
 
   int context = active_context ();
 
   octave_call_stack::push (this, local_scope, context);
+
+  frame.protect_var (Vtrack_line_num);
+  Vtrack_line_num = true;    // update source line numbers, even if debugging
   frame.add_fcn (octave_call_stack::pop);
 
   if (call_depth > 0 && ! is_anonymous_function ())
     {
       symbol_table::push_context ();
 
       frame.add_fcn (symbol_table::pop_context);
     }
diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -658,19 +658,20 @@ tree_evaluator::visit_statement (tree_st
   tree_command *cmd = stmt.command ();
   tree_expression *expr = stmt.expression ();
 
   if (cmd || expr)
     {
       if (statement_context == function || statement_context == script)
         {
           // Skip commands issued at a debug> prompt to avoid disturbing
-          // the state of the program we are debugging.
+          // the state of the program we are debugging, but still track
+          // progress through user functions called from debug> prompt.
 
-          if (! Vdebugging)
+          if (Vtrack_line_num)
             octave_call_stack::set_location (stmt.line (), stmt.column ());
 
           if ((statement_context == script
                && ((Vecho_executing_commands & ECHO_SCRIPTS
                     && octave_call_stack::all_scripts ())
                    || Vecho_executing_commands & ECHO_FUNCTIONS))
               || (statement_context == function
                   && Vecho_executing_commands & ECHO_FUNCTIONS))
