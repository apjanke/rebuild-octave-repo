# HG changeset patch
# User Jordi Gutiérrez Hermoso <jordigh@gmail.com>
# Date 1284445118 14400
#      Tue Sep 14 02:18:38 2010 -0400
# Node ID 386aa01ca84c67685ccdbd35560ed62eef8a1141
# Parent  795400289d1c54d0d84986f6034240ed40d790e3
genpath: accept additional arguments as names of directories to skip

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2010-09-14  Jordi Gutiérrez Hermoso <jordigh@gmail.com>
+
+	* load-path.cc (genpath): Pass SKIP in recursive call.
+	(Fgenpath): Accept list of directories to skip.
+
 2010-09-14  John W. Eaton  <jwe@octave.org>
 
 	* oct-stream.cc (BEGIN_CHAR_CLASS_CONVERSION): If we hit EOF but
 	have found a match, clear the stream state (bug # 30997).
 
 2010-09-13  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/cellfun.cc (Fcellfun): Remove subsref optimization.
diff --git a/src/load-path.cc b/src/load-path.cc
--- a/src/load-path.cc
+++ b/src/load-path.cc
@@ -1824,20 +1824,16 @@ genpath (const std::string& dirname, con
       string_vector dirlist = dir.read ();
       
       octave_idx_type len = dirlist.length ();
 
       for (octave_idx_type i = 0; i < len; i++)
         {
           std::string elt = dirlist[i];
 
-          // FIXME -- the caller should be able to specify the list of
-          // directories to skip in addition to ".", "..", and
-          // directories beginning with "@".
-
           bool skip_p = (elt == "." || elt == ".." || elt[0] == '@');
 
           if (! skip_p)
             {
               for (octave_idx_type j = 0; j < skip.length (); j++)
                 {
                   skip_p = (elt == skip[j]);
                   if (skip_p)
@@ -1846,17 +1842,17 @@ genpath (const std::string& dirname, con
 
               if (! skip_p)
                 {
                   std::string nm = file_ops::concat (dirname, elt);
 
                   file_stat fs (nm);
 
                   if (fs && fs.is_dir ())
-                    retval += dir_path::path_sep_str () + genpath (nm);
+                    retval += dir_path::path_sep_str () + genpath (nm, skip);
                 }
             }
         }
     }
 
   return retval;
 }
 
@@ -1891,30 +1887,54 @@ void
 execute_pkg_del (const std::string& dir)
 {
   execute_pkg_add_or_del (dir, "PKG_DEL");
 }
 
 DEFUN (genpath, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} genpath (@var{dir})\n\
+@deftypefnx {Built-in Function} {} genpath (@var{dir}, @var{skip}, @dots{})\n\
 Return a path constructed from @var{dir} and all its subdirectories.\n\
+If additional string parameters are given, the resulting path will \n\
+exclude directories with those names.\
 @end deftypefn")
 {
   octave_value retval;
 
-  if (args.length () == 1)
+  octave_idx_type nargin = args.length ();
+
+  if (nargin == 1)
     {
       std::string dirname = args(0).string_value ();
 
       if (! error_state)
         retval = genpath (dirname);
       else
         error ("genpath: expecting argument to be a character string");
     }
+  else if (nargin > 1)
+    {
+      std::string dirname = args(0).string_value ();
+
+      string_vector skip (nargin - 1);
+
+      for (octave_idx_type i = 1; i < nargin; i++)
+        {
+          skip[i-1] = args(i).string_value ();
+
+          if (error_state)
+            break;
+        }
+
+      if (! error_state)
+        retval = genpath (dirname, skip);
+      else
+        error ("genpath: expecting all arguments to be character strings");
+    }
   else
     print_usage ();
 
   return retval;
 }
 
 static void
 rehash_internal (void)
