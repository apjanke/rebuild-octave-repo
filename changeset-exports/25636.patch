# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1531933197 14400
#      Wed Jul 18 12:59:57 2018 -0400
# Node ID be45013e779454f0edeb7d04976df5df4194e67c
# Parent  6ff900fd15cb44cb11d8d50645b29453b90b2169
# Parent  7f6fd47712d01a3d4f175592ceeca4ba4ae98c50
maint: Merge stable to default.

diff --git a/libinterp/corefcn/ls-mat5.cc b/libinterp/corefcn/ls-mat5.cc
--- a/libinterp/corefcn/ls-mat5.cc
+++ b/libinterp/corefcn/ls-mat5.cc
@@ -1185,48 +1185,59 @@ read_mat5_binary_element (std::istream& 
                 // inline is not an object in Octave but rather an
                 // overload of a function handle.  Special case.
                 tc =
                   new octave_fcn_inline (m.contents ("expr")(0).string_value (),
                                          m.contents ("args")(0).string_value ());
               }
             else
               {
-                octave_class *cls
-                  = new octave_class (m, classname,
-                                      std::list<std::string> ());
-
-                if (cls->reconstruct_exemplar ())
+                cdef_manager& cdm
+                  = octave::__get_cdef_manager__ ("read_mat5_binary_element");
+
+                if (cdm.find_class (classname, false, true).ok ())
                   {
-
-                    if (! cls->reconstruct_parents ())
-                      warning ("load: unable to reconstruct object inheritance");
-
-                    tc = cls;
-
-                    octave::load_path& lp = octave::__get_load_path__ ("read_mat5_binary_element");
-
-                    if (lp.find_method (classname, "loadobj") != "")
-                      {
-                        try
-                          {
-                            octave_value_list tmp = octave::feval ("loadobj", tc, 1);
-
-                            tc = tmp(0);
-                          }
-                        catch (const octave::execution_exception&)
-                          {
-                            goto data_read_error;
-                          }
-                      }
+                    tc = m;
+                    warning ("load: classdef element has been converted to a struct");
                   }
                 else
                   {
-                    tc = m;
-                    warning ("load: element has been converted to a structure");
+                    octave_class *cls
+                      = new octave_class (m, classname,
+                                          std::list<std::string> ());
+
+                    if (cls->reconstruct_exemplar ())
+                      {
+
+                        if (! cls->reconstruct_parents ())
+                          warning ("load: unable to reconstruct object inheritance");
+
+                        tc = cls;
+
+                        octave::load_path& lp = octave::__get_load_path__ ("read_mat5_binary_element");
+
+                        if (lp.find_method (classname, "loadobj") != "")
+                          {
+                            try
+                              {
+                                octave_value_list tmp = octave::feval ("loadobj", tc, 1);
+
+                                tc = tmp(0);
+                              }
+                            catch (const octave::execution_exception&)
+                              {
+                                goto data_read_error;
+                              }
+                          }
+                      }
+                    else
+                      {
+                        tc = m;
+                        warning ("load: element has been converted to a structure");
+                      }
                   }
               }
           }
         else
           tc = m;
       }
       break;
 
