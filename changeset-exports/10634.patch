# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1274059739 25200
#      Sun May 16 18:28:59 2010 -0700
# Node ID 60542efcfa2cec85817873995bf6e270fe874ebc
# Parent  d022061c288d3804b8f1d94e7fa2c861fa988f52
Check input arguments for size and type (bug #29861).

Prevents segmentation fault with odd inputs.

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,14 @@
+2010-05-16  Rik <octave@nomad.inbox5.com>
+
+        * scripts/plot/contourc.m, scripts/plot/private/__contour__.m, 
+          scripts/plot/surface.m, scripts/plot/surfnorm.m: Check input
+          arguments for size and type (bug #29861).
+
 2010-05-13  John W. Eaton  <jwe@octave.org>
 
 	* help/help.m: Avoid unnecessary use of varargout.
 
 2010-05-13   Qianqian Fang <fangq>
 
         * miscellaneous/tempdir.m: Add filesep to end of tempdir (bug #29864).
 
diff --git a/scripts/plot/contourc.m b/scripts/plot/contourc.m
--- a/scripts/plot/contourc.m
+++ b/scripts/plot/contourc.m
@@ -59,19 +59,16 @@
 
 ## Author: Shai Ayal <shaiay@users.sourceforge.net>
 
 function [cout, lev] = contourc (varargin)
 
   if (nargin == 1)
     vn = 10;
     z = varargin{1};
-    [nr, nc] = size (z);
-    x = 1:nc;
-    y = 1:nr;
   elseif (nargin == 2)
     vn = varargin{2};
     z = varargin{1};
     [nr, nc] = size (z);
     x = 1:nc;
     y = 1:nr;
   elseif (nargin == 3)
     vn = 10;
@@ -82,16 +79,20 @@ function [cout, lev] = contourc (varargi
     vn = varargin{4};
     x = varargin{1};
     y = varargin{2};
     z = varargin{3};
   else
     print_usage ();
   endif
 
+  if (!ismatrix (z) || isvector (z) || isscalar (z))
+    error ("contourc: z argument must be a matrix");
+  endif
+
   if (isscalar (vn))
     vv = linspace (min (z(:)), max (z(:)), vn+2)(2:end-1);
   else
     vv = unique (sort (vn));
   endif
 
   if (isvector (x) && isvector (y))
     c = __contourc__ (x(:)', y(:)', z, vv);
diff --git a/scripts/plot/private/__contour__.m b/scripts/plot/private/__contour__.m
--- a/scripts/plot/private/__contour__.m
+++ b/scripts/plot/private/__contour__.m
@@ -83,16 +83,19 @@ function [c, hg] = __contour__ (varargin
     z1 = varargin{3};
     x1 = 1 : rows(z1);
     y1 = 1 : columns(z1);
   else
     x1 = varargin{3};
     y1 = varargin{4};
     z1 = varargin{5};
   endif
+  if (!ismatrix (z1) || isvector (z1) || isscalar (z1))
+    error ("__contour__: z argument must be a matrix");
+  endif
   if (length (varargin) == 4 || length (varargin) == 6)
     vn = varargin {end};
     vnauto = false;
   else
     vnauto = true;
     vn = 10; 
   endif
 
diff --git a/scripts/plot/surface.m b/scripts/plot/surface.m
--- a/scripts/plot/surface.m
+++ b/scripts/plot/surface.m
@@ -13,17 +13,17 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} surface (@var{x}, @var{y}, @var{z}, @var{c})
+## @deftypefn  {Function File} {} surface (@var{x}, @var{y}, @var{z}, @var{c})
 ## @deftypefnx {Function File} {} surface (@var{x}, @var{y}, @var{z})
 ## @deftypefnx {Function File} {} surface (@var{z}, @var{c})
 ## @deftypefnx {Function File} {} surface (@var{z})
 ## @deftypefnx {Function File} {} surface (@dots{}, @var{prop}, @var{val})
 ## @deftypefnx {Function File} {} surface (@var{h}, @dots{})
 ## @deftypefnx {Function File} {@var{h} =} surface (@dots{})
 ## Plot a surface graphic object given matrices @var{x}, and @var{y} from 
 ## @code{meshgrid} and a matrix @var{z} corresponding to the @var{x} and 
@@ -77,28 +77,28 @@ function [h, bad_usage] = __surface__ (a
     bad_usage = true;
   elseif (firststring == 5)
     x = varargin{1};
     y = varargin{2};
     z = varargin{3};
     c = varargin{4};
 
     if (! size_equal (z, c))
-      error ("surface: z and c must have same size");
+      error ("surface: z and c must have the same size");
     endif
     if (isvector (x) && isvector (y) && ismatrix (z))
       if (rows (z) == length (y) && columns (z) == length (x))
         x = x(:)';
         y = y(:);
       else
         error ("surface: rows (z) must be the same as length (y) and columns (z) must be the same as length (x)");
       endif
     elseif (ismatrix (x) && ismatrix (y) && ismatrix (z))
       if (! size_equal (x, y, z))
-        error ("surface: x, y, and z must have same dimensions");
+        error ("surface: x, y, and z must have the same dimensions");
       endif
     else
       error ("surface: x and y must be vectors and z must be a matrix");
     endif
   elseif (firststring == 4)
     x = varargin{1};
     y = varargin{2};
     z = varargin{3};
@@ -107,40 +107,40 @@ function [h, bad_usage] = __surface__ (a
       if (rows (z) == length (y) && columns (z) == length (x))
         x = x(:)';
         y = y(:);
       else
         error ("surface: rows (z) must be the same as length (y) and columns (z) must be the same as length (x)");
       endif
     elseif (ismatrix (x) && ismatrix (y) && ismatrix (z))
       if (! size_equal (x, y, z))
-        error ("surface: x, y, and z must have same dimensions");
+        error ("surface: x, y, and z must have the same dimensions");
       endif
     else
       error ("surface: x and y must be vectors and z must be a matrix");
     endif
   elseif (firststring == 3)    
     z = varargin{1};
     c = varargin{2};
-    if (ismatrix (z))
+    if (ismatrix (z) && !isvector (z) && !isscalar (z))
       [nr, nc] = size (z);
       x = 1:nc;
       y = (1:nr)';
     else
-      error ("surface: argument must be a matrix");
+      error ("surface: z argument must be a matrix");
     endif
   elseif (firststring == 2)    
     z = varargin{1};
     c = z;
-    if (ismatrix (z))
+    if (ismatrix (z) && !isvector (z) && !isscalar (z))
       [nr, nc] = size (z);
       x = 1:nc;
       y = (1:nr)';
     else
-      error ("surface: argument must be a matrix");
+      error ("surface: z argument must be a matrix");
     endif
   else
     bad_usage = true;
   endif
 
   if (! bad_usage)
     ## Make a default surface object.
     other_args = {};
diff --git a/scripts/plot/surfnorm.m b/scripts/plot/surfnorm.m
--- a/scripts/plot/surfnorm.m
+++ b/scripts/plot/surfnorm.m
@@ -66,18 +66,22 @@ function [Nx, Ny, Nz] = surfnorm (vararg
     ioff = 2;
   else
     x = varargin{1};
     y = varargin{2};
     z = varargin{3};
     ioff = 4;
   endif
 
-  if (nargout == 0)
+  if (!ismatrix (z) || isvector (z) || isscalar (z))
+    error ("surfnorm: z argument must be a matrix");
   endif
+  if (! size_equal (x, y, z))
+    error ("surfnorm: x, y, and z must have the same dimensions");
+  endif 
 
   ## Make life easier, and avoid having to do the extrapolation later, do
   ## a simpler linear extrapolation here. This is approximative, and works
   ## badly for closed surfaces like spheres.
   xx = [2 .* x(:,1) - x(:,2), x, 2 .* x(:,end) - x(:,end-1)];
   xx = [2 .* xx(1,:) - xx(2,:); xx; 2 .* xx(end,:) - xx(end-1,:)];
   yy = [2 .* y(:,1) - y(:,2), y, 2 .* y(:,end) - y(:,end-1)];
   yy = [2 .* yy(1,:) - yy(2,:); yy; 2 .* yy(end,:) - yy(end-1,:)];
