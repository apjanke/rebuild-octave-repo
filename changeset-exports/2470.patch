# HG changeset patch
# User jwe
# Date 847230479 0
#      Tue Nov 05 21:47:59 1996 +0000
# Node ID 1e673f0648b5f0eaf8f9acf0789a0724f733b6d6
# Parent  f201716926bbb89601efe3728f188f17baa46707
[project @ 1996-11-05 21:46:06 by jwe]

diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -15,17 +15,17 @@ dnl Copyright (C) 1996 John W. Eaton
 ### ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 ### FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ### for more details.
 ### 
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
-AC_REVISION($Revision: 1.223 $)
+AC_REVISION($Revision: 1.224 $)
 AC_PREREQ(2.9)
 AC_INIT(src/octave.cc)
 AC_CONFIG_HEADER(config.h)
 
 AC_DEFINE(OCTAVE_SOURCE, 1)
 
 AC_CANONICAL_HOST
 if test -z "$host"; then
@@ -421,21 +421,25 @@ AC_ARG_ENABLE(lite-kernel,
   [if test $enableval = no; then OCTAVE_LITE=false; else OCTAVE_LITE=true; fi],
   OCTAVE_LITE=false)
 if $OCTAVE_LITE; then
   AC_DEFINE(OCTAVE_LITE, 1)
 fi
 AC_SUBST(OCTAVE_LITE)
 
 ### special checks for odd OS specific things.
+###
+### I am told that on some SCO systems, the only place to find some
+### functions like gethostname and gettimeofday is in libsocket.
 
 AC_ISC_POSIX
 AC_MINIX
 AC_AIX
 AC_CHECK_LIB(sun, getpwnam)
+AC_CHECK_LIB(socket, gethostname)
 
 ### How big are ints and how are they oriented?  These could probably
 ### be eliminated in favor of run-time checks.
 
 AC_CHECK_SIZEOF(short)
 AC_CHECK_SIZEOF(int)
 AC_CHECK_SIZEOF(long)
 
@@ -862,16 +866,18 @@ AC_TRY_LINK([#include <math.h>],
 AC_TYPE_SIGNAL
 AC_DECL_SYS_SIGLIST
 AC_MSG_CHECKING([for sys_siglist variable])
 AC_TRY_LINK([#include <stdio.h>],
   [extern char *sys_siglist[]; printf ("%s\n", sys_siglist[1]);],
   AC_MSG_RESULT(yes)
   AC_DEFINE(HAVE_SYS_SIGLIST, 1),
   AC_MSG_RESULT(no))
+OCTAVE_SIGNAL_CHECK
+OCTAVE_REINSTALL_SIGHANDLERS
 
 ### Type stuff.
 
 AC_TYPE_MODE_T
 AC_TYPE_OFF_T
 AC_TYPE_PID_T
 AC_TYPE_SIZE_T
 AC_TYPE_UID_T
diff --git a/liboctave/cmd-hist.cc b/liboctave/cmd-hist.cc
--- a/liboctave/cmd-hist.cc
+++ b/liboctave/cmd-hist.cc
@@ -34,20 +34,17 @@ Software Foundation, 59 Temple Place - S
 
 #ifdef HAVE_UNISTD_H
 #ifdef HAVE_SYS_TYPES_H
 #include <sys/types.h>
 #endif
 #include <unistd.h>
 #endif
 
-extern "C"
-{
 #include <readline/history.h>
-}
 
 #include "file-ops.h"
 #include "lo-error.h"
 #include "cmd-hist.h"
 
 bool command_history::initialized = false;
 
 command_history::command_history (const string& f, int n)
@@ -62,21 +59,21 @@ command_history::command_history (const 
       lines_this_session = 0;
 
       xsize = -1;
 
       if (! f.empty ())
 	{
 	  xfile = f;
 
-	  read_history (f.c_str ());
+	  ::read_history (f.c_str ());
 
 	  lines_in_file = where ();
 
-	  using_history ();
+	  ::using_history ();
 	}
 
       if (n > 0)
 	xsize = n;
 
       initialized = true;
     }
 }
@@ -117,87 +114,87 @@ command_history::ignoring_entries (void)
   return ignoring_additions;
 }
 
 void
 command_history::add (const string& s)
 {
   if (! ignoring_entries ())
     {
-      add_history (s.c_str ());
+      ::add_history (s.c_str ());
       lines_this_session++;
     }
 }
 
 void
 command_history::remove (int n)
 {
-  HIST_ENTRY *discard = remove_history (n);
+  HIST_ENTRY *discard = ::remove_history (n);
 
   if (discard)
     {
       if (discard->line)
-	free (discard->line);
+	::free (discard->line);
 
-      free (discard);
+      ::free (discard);
     }
 }
 
 int
 command_history::where (void)
 {
-  return where_history ();
+  return ::where_history ();
 }
 
 int
 command_history::base (void)
 {
-  return history_base;
+  return ::history_base;
 }
 
 int
 command_history::current_number (void)
 {
   return (xsize > 0) ? base () + where () : -1;
 }
 
 void
 command_history::stifle (int n)
 {
-  stifle_history (n);
+  ::stifle_history (n);
 }
 
 int
 command_history::unstifle (void)
 {
-  return unstifle_history ();
+  return ::unstifle_history ();
 }
 
 int
 command_history::is_stifled (void)
 {
-  return history_is_stifled ();
+  return ::history_is_stifled ();
 }
 
 void
 command_history::read (const string& f_arg)
 {
   string f = f_arg;
 
   if (f.empty ())
     f = xfile;
 
   if (! f.empty ())
     {
-      int status = read_history (f.c_str ());
+      int status = ::read_history (f.c_str ());
 
       if (status != 0)
 	error (status);
       else
-	using_history ();
+	::using_history ();
     }
   else
     error ("command_history::read: missing file name");
 }
 
 void
 command_history::read_range (const string& f_arg, int from, int to)
 {
@@ -206,23 +203,23 @@ command_history::read_range (const strin
 
   string f = f_arg;
 
   if (f.empty ())
     f = xfile;
 
   if (! f.empty ())
     {
-      int status = read_history_range (f.c_str (), from, to);
+      int status = ::read_history_range (f.c_str (), from, to);
 
       if (status != 0)
 	error (status);
       else
 	{
-	  using_history ();
+	  ::using_history ();
 	  lines_in_file = where ();
 	}
     }
   else
     error ("command_history::read_range: missing file name");
 }
 
 void
@@ -230,17 +227,17 @@ command_history::write (const string& f_
 {
   string f = f_arg;
 
   if (f.empty ())
     f = xfile;
 
   if (! f.empty ())
     {
-      int status = write_history (f.c_str ());
+      int status = ::write_history (f.c_str ());
 
       if (status != 0)
 	error (status);
     }
   else
     error ("command_history::write: missing file name");
 }
 
@@ -265,17 +262,17 @@ command_history::append (const string& f
 	      if (! fs)
 		{
 		  int tem;
 
 		  tem = open (f.c_str (), O_CREAT, 0666);
 		  close (tem);
 		}
 
-	      int status = append_history (lines_this_session, f.c_str ());
+	      int status = ::append_history (lines_this_session, f.c_str ());
 
 	      if (status != 0)
 		error (status);
 	      else
 		lines_in_file += lines_this_session;
 
 	      lines_this_session = 0;
 	    }
@@ -289,29 +286,29 @@ void
 command_history::truncate_file (const string& f_arg, int n)
 {
   string f = f_arg;
 
   if (f.empty ())
     f = xfile;
 
   if (! f.empty ())
-    history_truncate_file (f.c_str (), n);
+    ::history_truncate_file (f.c_str (), n);
   else
     error ("command_history::truncate_file: missing file name");
 }
 
 string_vector
 command_history::list (int limit, int number_lines)
 {
   string_vector retval;
 
   if (limit)
     {
-      HIST_ENTRY **hlist = history_list ();
+      HIST_ENTRY **hlist = ::history_list ();
 
       if (hlist)
 	{
 	  int end = 0;
 	  while (hlist[end])
 	    end++;
 
 	  int beg = (limit < 0 || end < limit) ? 0 : (end - limit);
@@ -319,17 +316,17 @@ command_history::list (int limit, int nu
 	  retval.resize (end - beg);
 
 	  int k = 0;
 	  for (int i = beg; i < end; i++)
 	    {
 	      ostrstream output_buf;
 
 	      if (number_lines)
-		output_buf.form ("%5d%c", i + history_base,
+		output_buf.form ("%5d%c", i + ::history_base,
 				 hlist[i]->data ? '*' : ' '); 
 
 	      output_buf << hlist[i]->line << ends;
 
 	      const char *tmp = output_buf.str ();
 
 	      retval[k++] = tmp;
 
@@ -341,35 +338,35 @@ command_history::list (int limit, int nu
   return retval;
 }
 
 string
 command_history::get_entry (int n)
 {
   string retval;
 
-  HIST_ENTRY *entry = history_get (history_base + n);
+  HIST_ENTRY *entry = ::history_get (::history_base + n);
 
   if (entry && entry->line)
     retval = entry->line;
 
   return retval;
 }
 
 void
 command_history::replace_entry (int which, const string& line)
 {
-  HIST_ENTRY *discard = replace_history_entry (which, line.c_str (), 0);
+  HIST_ENTRY *discard = ::replace_history_entry (which, line.c_str (), 0);
 
   if (discard)
     {
       if (discard->line)
-	free (discard->line);
+	::free (discard->line);
 
-      free (discard);
+      ::free (discard);
     }
 }
 
 void
 command_history::clean_up_and_save (const string& f_arg, int n)
 {
   string f = f_arg;
 
@@ -378,26 +375,26 @@ command_history::clean_up_and_save (cons
 
   if (! f.empty ())
     {
       if (n < 0)
 	n = xsize;
 
       stifle (n);
 
-      write_history (f.c_str ());
+      ::write_history (f.c_str ());
     }
   else
     error ("command_history::clean_up_and_save: missing file name");
 }
 
 void
-command_history::error (int errno)
+command_history::error (int err_num)
 {
-  (*current_liboctave_error_handler) ("%s", strerror (errno));
+  (*current_liboctave_error_handler) ("%s", strerror (err_num));
 }
 
 void
 command_history::error (const string& s)
 {
   (*current_liboctave_error_handler) ("%s", s.c_str ());
 }
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,16 @@
 Tue Nov  5 13:00:35 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* input.cc, sysdep.cc, variables.cc: Only include readline.h and
+	history.h if USE_READLINE is defined.
+
+	* help.cc: Make it compile without warnings even if USE_GNU_INFO
+	is not defined.
+
 	* sighandlers.h (octave_child_list): Don't define
 	HAVE_POSIX_SIGNALS HERE.
 
 	* sighandlers.cc (SIGHANDLER_RETURN): New macro.
 	(generic_sig_handler, sigchld_handler, sigfpe_handler,
 	sigint_handler, sigpipe_handler):  Use it.
 	(sigchld_handler, sigfpe_handler, sigint_handler, sigpipe_handler):
 	Only reinstall signal handler if MUST_REINSTALL_SIGHANDLER is defined.
diff --git a/src/help.cc b/src/help.cc
--- a/src/help.cc
+++ b/src/help.cc
@@ -320,31 +320,33 @@ operator_help (void)
 }
 
 help_list *
 keyword_help (void)
 {
   return keywords;
 }
 
-#define VERBOSE_HELP_MESSAGE \
-  "\n\
+#if defined (USE_GNU_INFO)
+static void
+additional_help_message (ostream& os)
+{
+  if (! Vsuppress_verbose_help_message)
+    os << "\n\
 Additional help for builtin functions, operators, and variables\n\
 is available in the on-line version of the manual.\n\
 \n\
-Use the command `help -i <topic>' to search the manual index.\n"
-
+Use the command `help -i <topic>' to search the manual index.\n";
+}
+#else
 static void
-additional_help_message (ostream& os)
+additional_help_message (ostream&)
 {
-#ifdef USE_GNU_INFO
-  if (! Vsuppress_verbose_help_message)
-    os << VERBOSE_HELP_MESSAGE;
+}
 #endif
-}
 
 void
 print_usage (const string& nm, int just_usage)
 {
   symbol_record *sym_rec = global_sym_tab->lookup (nm, 0, 0);
   if (sym_rec)
     {
       string h = sym_rec->help ();
@@ -513,17 +515,17 @@ simple_help (void)
 
 	  names.list_in_columns (octave_stdout);
 	}
     }
 
   additional_help_message (octave_stdout);
 }
 
-#ifdef USE_GNU_INFO
+#if defined (USE_GNU_INFO)
 static int
 try_info (const string& nm)
 {
   int status = 0;
 
   static char *cmd_str = 0;
 
   delete [] cmd_str;
@@ -558,22 +560,20 @@ try_info (const string& nm)
 
   if ((status & 0xff) == 0)
     status = (signed char) ((status & 0xff00) >> 8);
   else
     status = 127;
 
   return status;
 }
-#endif
 
 static void
 help_from_info (const string_vector& argv, int idx, int argc)
 {
-#ifdef USE_GNU_INFO
   if (idx == argc)
     try_info (string ());
   else
     {
       for (int i = idx; i < argc; i++)
 	{
 	  int status = try_info (argv[i]);
 
@@ -589,20 +589,24 @@ help_from_info (const string_vector& arg
 	      else
 		{
 		  error ("help: unable to find info!");
 		  break;
 		}
 	    }
 	}
     }
+}
 #else
+static void
+help_from_info (const string_vector&, int, int)
+{
   message (0, "sorry, help -i is not available in this version of Octave");
+}
 #endif
-}
 
 int
 help_from_list (ostream& os, const help_list *list,
 		const string& nm, int usage)
 {
   char *name;
   while ((name = list->name) != 0)
     {
@@ -666,17 +670,17 @@ builtin_help (int argc, const string_vec
 
       octave_stdout << "\nhelp: sorry, `" << argv[i]
 		    << "' is not documented\n"; 
     }
 
   additional_help_message (octave_stdout);
 }
 
-#ifdef USE_GNU_INFO
+#if defined (USE_GNU_INFO)
 DEFUN_TEXT (help, args, ,
   "help [-i] [topic ...]\n\
 \n\
 print cryptic yet witty messages")
 #else
 DEFUN_TEXT (help, args, ,
   "help [topic ...]\n\
 \n\
@@ -957,20 +961,18 @@ void
 symbols_of_help (void)
 {
   DEFVAR (INFO_FILE, Vinfo_file, 0, info_file,
     "name of the Octave info file");
 
   DEFVAR (INFO_PROGRAM, Vinfo_prog, 0, info_prog,
     "name of the Octave info reader");
 
-#ifdef USE_GNU_INFO
   DEFVAR (suppress_verbose_help_message, 0.0, 0, suppress_verbose_help_message,
     "suppress printing of message pointing to additional help in the\n\
 help and usage functions");
-#endif
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -49,21 +49,20 @@ Free Software Foundation, Inc.
 
 #ifdef HAVE_UNISTD_H
 #ifdef HAVE_SYS_TYPES_H
 #include <sys/types.h>
 #endif
 #include <unistd.h>
 #endif
 
-// This must come before anything that includes iostream.h...
-// (This is apparently no longer true...)
-
-#include "readline/readline.h"
-#include "readline/history.h"
+#if defined (USE_READLINE)
+#include <readline/readline.h>
+#include <readline/history.h>
+#endif
 
 #include "str-vec.h"
 
 #include "defun.h"
 #include "dirfns.h"
 #include "error.h"
 #include "gripes.h"
 #include "help.h"
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -79,26 +79,28 @@ Software Foundation, 59 Temple Place - S
 #include "version.h"
 
 #if !defined (HAVE_ATEXIT) && defined (HAVE_ON_EXIT)
 extern "C" int on_exit ();
 #define atexit on_exit
 #endif
 
 // Don't redefine the variables if glibc already has.
-#ifndef HAVE_PROGRAM_INVOCATION_NAME
+#if defined (HAVE_PROGRAM_INVOCATION_NAME)
+extern char *program_invocation_name;
+extern char *program_invocation_short_name;
+#else
 char *program_invocation_name;
 char *program_invocation_short_name;
-#else
-extern char *program_invocation_name;
-extern char *program_invocation_short_name;
 #endif
 
+#if defined (USE_READLINE)
 // This is from readline's paren.c:
 extern int rl_blink_matching_paren;
+#endif
 
 // The command-line options.
 static string_vector octave_argv;
 
 // TRUE means we read ~/.octaverc and ./.octaverc.
 // (--norc; --no-init-file; -f)
 static bool read_init_files = true;
 
@@ -191,17 +193,17 @@ intern_argv (int argc, char **argv)
 
 // Initialize some global variables for later use.
 
 static void
 initialize_globals (const string& name)
 {
   // Kpathsea needs this.
 
-#ifndef HAVE_PROGRAM_INVOCATION_NAME
+#if ! defined (HAVE_PROGRAM_INVOCATION_NAME)
   program_invocation_name = strsave (name.c_str ());
   program_invocation_short_name = strrchr (program_invocation_name, '/');
   if (! program_invocation_short_name)
     program_invocation_short_name = program_invocation_name;
 #endif
 
   Vprogram_invocation_name = name;
   size_t pos = Vprogram_invocation_name.rfind ('/');
@@ -323,19 +325,19 @@ Options:\n\
   -d, --debug             Enter parser debugging mode.\n\
   -x, --echo-commands     Echo commands as they are executed.\n\
   --exec-path PATH        Set path for executing subprograms.\n\
   -h, -?, --help          Print short help message and exit.\n\
   -f, --norc              Don't read any initialization files.\n\
   --info-file FILE        Use top-level info file FILE.\n\
   --info-program PROGRAM  Use PROGRAM for reading info files.\n\
   -i, --interactive       Force interactive behavior.\n\
-  --no-init-file          Don't read the ~/.octaverc or .octaverc files\n\
+  --no-init-file          Don't read the ~/.octaverc or .octaverc files.\n\
   --no-line-editing       Don't use readline for command-line editing.\n\
-  --no-site-file          Don't read the site-wide octaverc file\n\
+  --no-site-file          Don't read the site-wide octaverc file.\n\
   -p PATH, --path PATH    Set initial LOADPATH to PATH.\n\
   -q, --silent            Don't print message at startup.\n\
   --traditional           Set compatibility variables.\n\
   -V, --verbose           Enable verbose output in some cases.\n\
   -v, --version           Print version number and exit.\n\
 \n\
   FILE                    Execute commands from FILE.\n\
 \n\
diff --git a/src/sysdep.cc b/src/sysdep.cc
--- a/src/sysdep.cc
+++ b/src/sysdep.cc
@@ -62,18 +62,20 @@ LOSE! LOSE!
 #if defined (HAVE_FLOATINGPOINT_H)
 #include <floatingpoint.h>
 #endif
 
 #if !defined (HAVE_GETHOSTNAME) && defined (HAVE_SYS_UTSNAME_H)
 #include <sys/utsname.h>
 #endif
 
+#if defined (USE_READLINE)
 #include <readline/readline.h>
 #include <readline/tilde.h>
+#endif
 
 extern char *term_clrpag;
 extern "C" void _rl_output_character_function ();
 
 #include "mach-info.h"
 #include "oct-math.h"
 
 #include "defun.h"
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -36,17 +36,19 @@ Software Foundation, 59 Temple Place - S
 
 #ifdef HAVE_UNISTD_H
 #ifdef HAVE_SYS_TYPES_H
 #include <sys/types.h>
 #endif
 #include <unistd.h>
 #endif
 
+#if defined (USE_READLINE)
 #include <readline/readline.h>
+#endif
 
 #include "file-ops.h"
 #include "oct-glob.h"
 #include "str-vec.h"
 
 #include "defaults.h"
 #include "data.h"
 #include "defun.h"
