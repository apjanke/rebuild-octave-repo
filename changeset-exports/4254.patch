# HG changeset patch
# User jwe
# Date 1041363787 0
#      Tue Dec 31 19:43:07 2002 +0000
# Node ID df5f2e433a1144b86a40b345d260065c96f48ba6
# Parent  c3acf8a967fa16e06210238298ad99310b31b0e1
[project @ 2002-12-31 19:43:07 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,33 @@
 2002-12-31  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* syscalls.cc (Fmkfifo): Use long_value instead of cast.
+
+	* ov.h (octave_value::short_value, octave_value::ushort_value,
+	octave_value::uint_value, octave_value::long_value,
+	octave_value::ulong_value): New functions.
+
+	* syscalls.cc (mk_stat_map, Fgetegid, getgid, geteuid): Likewise.
+	Delete unnecessary casts.
+	* file-io.cc (Ffgetl, Ffgets, Fftell, Fsscanf): Likewise.
+	* toplev.cc (Fsystem): Likewise.
+
+	* ov-file.h (octave_file::double_value,	octave_file::scalar_value):
+	Delete unnecessry cast.
+
+	* ov.cc (octave_value::octave_value): Add constructors for
+	octave_time, short int, unsigned short int, unsigned int, long
+	int, unsigned long int, 
+
+	* ov.h (octave_value::do_subsref (const std::string&, const
+	octave_value_list&)): Rename from subsref.  Change all derived classes.
+
+	* input.cc (generate_completion): Delete unused variable prefix_len.
+
 	* ov.h (DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA): Delete volatile
 	qualifier for decls of static_type_id and t_id.
 	(DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA): Likewise, for def of t_id.
 
 2002-12-30  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* utils.cc (Ffile_in_path): Index args correctly.
 
diff --git a/src/file-io.cc b/src/file-io.cc
--- a/src/file-io.cc
+++ b/src/file-io.cc
@@ -241,17 +241,17 @@ If there are no more characters to read,
 	    ? args(1) : octave_value (INT_MAX);
 
 	  bool err = false;
 
 	  std::string tmp = os.getl (len_arg, err);
 
 	  if (! err)
 	    {
-	      retval(1) = static_cast<double> (tmp.length ());
+	      retval(1) = tmp.length ();
 	      retval(0) = tmp;
 	    }
 	}
     }
   else
     print_usage ("fgetl");
 
   return retval;
@@ -287,17 +287,17 @@ If there are no more characters to read,
 	    ? args(1) : octave_value (INT_MAX);
 
 	  bool err = false;
 
 	  std::string tmp = os.gets (len_arg, err);
 
 	  if (! err)
 	    {
-	      retval(1) = static_cast<double> (tmp.length ());
+	      retval(1) = tmp.length ();
 	      retval(0) = tmp;
 	    }
 	}
     }
   else
     print_usage ("fgets");
 
   return retval;
@@ -618,17 +618,17 @@ from the beginning of the file @var{fid}
 
   int nargin = args.length ();
 
   if (nargin == 1)
     {
       octave_stream os = octave_stream_list::lookup (args(0), "ftell");
 
       if (! error_state)
-	retval = static_cast<double> (os.tell ());
+	retval = os.tell ();
     }
   else
     print_usage ("ftell");
 
   return retval;
 }
 
 DEFUN (fprintf, args, nargout,
@@ -944,17 +944,17 @@ string is treated as an end-of-file cond
 
 		      octave_value tmp = os.scanf (fmt, size, count);
 
 		      // XXX FIXME XXX -- is this the right thing to do?
 		      // Extract error message first, because getting
 		      // position will clear it.
 		      std::string errmsg = os.error ();
 
-		      retval(3) = static_cast<double> (os.tell () + 1);
+		      retval(3) = os.tell () + 1;
 		      retval(2) = errmsg;
 		      retval(1) = count;
 		      retval(0) = tmp;
 		    }
 		  else
 		    ::error ("sscanf: format must be a string");
 		}
 	      else
diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -1791,17 +1791,17 @@ octave_base_stream::do_oscanf (const sca
 
 	    case 'o': case 'u': case 'x':
 	      {
 		long int tmp;
 
 		if (OCTAVE_SCAN (is, *elt, &tmp))
 		  {
 		    if (! discard)
-		      retval = static_cast<double> (tmp);
+		      retval = tmp;
 		  }
 		else
 		  quit = true;
 	      }
 	      break;
 
 	    case 'e': case 'f': case 'g':
 	      {
diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -23,16 +23,18 @@ Software Foundation, 59 Temple Place - S
 #if defined (__GNUG__) && defined (USE_PRAGMA_INTERFACE_IMPLEMENTATION)
 #pragma implementation
 #endif
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
+#include <climits>
+
 #include <iostream>
 
 #include "lo-ieee.h"
 
 #include "gripes.h"
 #include "oct-map.h"
 #include "oct-obj.h"
 #include "oct-lvalue.h"
@@ -191,38 +193,49 @@ octave_base_value::print_name_tag (std::
 
 void
 octave_base_value::print_info (std::ostream& os,
 			       const std::string& prefix) const
 {
   os << "no info for type: " << type_name () << "\n";
 }
 
-int
-octave_base_value::int_value (bool require_int, bool frc_str_conv) const
-{
-  int retval = 0;
-
-  double d = double_value (frc_str_conv);
+#define INT_CONV_METHOD(T, F, MIN_LIMIT, MAX_LIMIT) \
+  T \
+  octave_base_value::F ## _value (bool require_int, bool frc_str_conv) const \
+  { \
+    T retval = 0; \
+ \
+    double d = double_value (frc_str_conv); \
+ \
+    if (! error_state) \
+      { \
+	if (require_int && D_NINT (d) != d) \
+	  error ("conversion of %g to " #T " value failed", d); \
+	else if (d < MIN_LIMIT || d > MAX_LIMIT) \
+	  error ("conversion of %g to short int out of range (%d, %d)", \
+		 d, MIN_LIMIT, MAX_LIMIT); \
+	else \
+	  retval = static_cast<T> (d); \
+      } \
+    else \
+      gripe_wrong_type_arg ("octave_base_value::" #F "_value ()", \
+			    type_name ()); \
+ \
+    return retval; \
+  }
 
-  if (! error_state)
-    {
-      if (require_int && D_NINT (d) != d)
-	{
-	  error ("conversion to integer value failed");
-	  return retval;
-	}
+INT_CONV_METHOD (short int, short, SHRT_MIN, SHRT_MAX)
+INT_CONV_METHOD (unsigned short int, ushort, 0, USHRT_MAX)
 
-      retval = static_cast<int> (d);
-    }
-  else
-    gripe_wrong_type_arg ("octave_base_value::int_value ()", type_name ());
+INT_CONV_METHOD (int, int, INT_MIN, INT_MAX)
+INT_CONV_METHOD (unsigned int, uint, 0, UINT_MAX)
 
-  return retval;
-}
+INT_CONV_METHOD (long int, long, LONG_MIN, LONG_MAX)
+INT_CONV_METHOD (unsigned long int, ulong, 0, ULONG_MAX)
 
 int
 octave_base_value::nint_value (bool frc_str_conv) const
 {
   int retval = 0;
 
   double d = double_value (frc_str_conv);
 
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -161,20 +161,30 @@ public:
   bool is_constant (void) const { return false; }
 
   bool is_function (void) const { return false; }
 
   bool is_builtin_function (void) const { return false; }
 
   bool is_dld_function (void) const { return false; }
 
+  short int short_value (bool = false, bool = false) const;
+
+  unsigned short int ushort_value (bool = false, bool = false) const;
+
   int int_value (bool = false, bool = false) const;
 
+  unsigned int uint_value (bool = false, bool = false) const;
+
   int nint_value (bool = false) const;
 
+  long int long_value (bool = false, bool = false) const;
+
+  unsigned long int ulong_value (bool = false, bool = false) const;
+
   double double_value (bool = false) const;
 
   double scalar_value (bool frc_str_conv = false) const
     { return double_value (frc_str_conv); }
 
   Cell cell_value (void) const;
 
   Matrix matrix_value (bool = false) const;
diff --git a/src/ov-file.h b/src/ov-file.h
--- a/src/ov-file.h
+++ b/src/ov-file.h
@@ -60,19 +60,19 @@ public:
 
   ~octave_file (void) { }
 
   octave_value *clone (void) const { return new octave_file (*this); }
   octave_value *empty_clone (void) const { return new octave_file (); }
 
   type_conv_fcn numeric_conversion_function (void) const;
 
-  double double_value (bool) const { return static_cast<double> (number); }
+  double double_value (bool) const { return number; }
 
-  double scalar_value (bool) const { return static_cast<double> (number); }
+  double scalar_value (bool) const { return number; }
 
   octave_stream stream_value (void) const { return stream; }
 
   int stream_number (void) const { return number; }
 
   bool is_defined (void) const { return true; }
 
   bool is_stream (void) const { return true; }
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -338,22 +338,58 @@ octave_value::assign_op_as_string (assig
 }
 
 octave_value::octave_value (void)
   : rep (new octave_base_value ())
 {
   rep->count = 1;
 }
 
+octave_value::octave_value (short int i)
+  : rep (new octave_scalar (i))
+{
+  rep->count = 1;
+}
+
+octave_value::octave_value (unsigned short int i)
+  : rep (new octave_scalar (i))
+{
+  rep->count = 1;
+}
+
 octave_value::octave_value (int i)
   : rep (new octave_scalar (i))
 {
   rep->count = 1;
 }
 
+octave_value::octave_value (unsigned int i)
+  : rep (new octave_scalar (i))
+{
+  rep->count = 1;
+}
+
+octave_value::octave_value (long int i)
+  : rep (new octave_scalar (i))
+{
+  rep->count = 1;
+}
+
+octave_value::octave_value (unsigned long int i)
+  : rep (new octave_scalar (i))
+{
+  rep->count = 1;
+}
+
+octave_value::octave_value (octave_time t)
+  : rep (new octave_scalar (t))
+{
+  rep->count = 1;
+}
+
 octave_value::octave_value (double d)
   : rep (new octave_scalar (d))
 {
   rep->count = 1;
 }
 
 octave_value::octave_value (const Cell& c)
   : rep (new octave_cell (c))
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -32,16 +32,17 @@ Software Foundation, 59 Temple Place - S
 #include <iostream>
 #include <string>
 #include <list>
 
 #include "Range.h"
 #include "idx-vector.h"
 #include "mx-base.h"
 #include "oct-alloc.h"
+#include "oct-time.h"
 #include "str-vec.h"
 
 class Cell;
 class Octave_map;
 class octave_stream;
 class octave_function;
 class octave_value_list;
 class octave_lvalue;
@@ -152,17 +153,23 @@ public:
 
   static octave_value empty_conv (const std::string& type,
 				  const octave_value& rhs = octave_value ());
 
   enum magic_colon { magic_colon_t };
   enum all_va_args { all_va_args_t };
 
   octave_value (void);
+  octave_value (short int i);
+  octave_value (unsigned short int i);
   octave_value (int i);
+  octave_value (unsigned int i);
+  octave_value (long int i);
+  octave_value (unsigned long int i);
+  octave_value (octave_time t);
   octave_value (double d);
   octave_value (const Cell& m);
   octave_value (const Matrix& m);
   octave_value (const DiagMatrix& d);
   octave_value (const RowVector& v);
   octave_value (const ColumnVector& v);
   octave_value (const Complex& C);
   octave_value (const ComplexMatrix& m);
@@ -403,22 +410,42 @@ public:
 
   virtual bool is_dld_function (void) const
     { return rep->is_dld_function (); }
 
   // Values.
 
   octave_value eval (void) { return *this; }
 
+  virtual short int
+  short_value (bool req_int = false, bool frc_str_conv = false) const
+    { return rep->short_value (req_int, frc_str_conv); }
+
+  virtual unsigned short int
+  ushort_value (bool req_int = false, bool frc_str_conv = false) const
+    { return rep->ushort_value (req_int, frc_str_conv); }
+
   virtual int int_value (bool req_int = false, bool frc_str_conv = false) const
     { return rep->int_value (req_int, frc_str_conv); }
 
+  virtual unsigned int
+  uint_value (bool req_int = false, bool frc_str_conv = false) const
+    { return rep->uint_value (req_int, frc_str_conv); }
+
   virtual int nint_value (bool frc_str_conv = false) const
     { return rep->nint_value (frc_str_conv); }
 
+  virtual long int
+  long_value (bool req_int = false, bool frc_str_conv = false) const
+    { return rep->long_value (req_int, frc_str_conv); }
+
+  virtual unsigned long int
+  ulong_value (bool req_int = false, bool frc_str_conv = false) const
+    { return rep->ulong_value (req_int, frc_str_conv); }
+
   virtual double double_value (bool frc_str_conv = false) const
     { return rep->double_value (frc_str_conv); }
 
   virtual double scalar_value (bool frc_str_conv = false) const
     { return rep->scalar_value (frc_str_conv); }
 
   virtual Cell cell_value (void) const;
 
diff --git a/src/syscalls.cc b/src/syscalls.cc
--- a/src/syscalls.cc
+++ b/src/syscalls.cc
@@ -61,33 +61,33 @@ Software Foundation, 59 Temple Place - S
 #include "variables.h"
 
 static Octave_map
 mk_stat_map (const file_stat& fs)
 {
   Octave_map m;
 
   m["dev"](0) = static_cast<double> (fs.dev ());
-  m["ino"](0) = static_cast<double> (fs.ino ());
+  m["ino"](0) = fs.ino ();
   m["modestr"](0) = fs.mode_as_string ();
-  m["nlink"](0) = static_cast<double> (fs.nlink ());
-  m["uid"](0) = static_cast<double> (fs.uid ());
-  m["gid"](0) = static_cast<double> (fs.gid ());
+  m["nlink"](0) = fs.nlink ();
+  m["uid"](0) = fs.uid ();
+  m["gid"](0) = fs.gid ();
 #if defined (HAVE_STRUCT_STAT_ST_RDEV)
   m["rdev"](0) = static_cast<double> (fs.rdev ());
 #endif
-  m["size"](0) = static_cast<double> (fs.size ());
-  m["atime"](0) = static_cast<double> (fs.atime ());
-  m["mtime"](0) = static_cast<double> (fs.mtime ());
-  m["ctime"](0) = static_cast<double> (fs.ctime ());
+  m["size"](0) = fs.size ();
+  m["atime"](0) = fs.atime ();
+  m["mtime"](0) = fs.mtime ();
+  m["ctime"](0) = fs.ctime ();
 #if defined (HAVE_STRUCT_STAT_ST_BLKSIZE)
-  m["blksize"](0) = static_cast<double> (fs.blksize ());
+  m["blksize"](0) = fs.blksize ();
 #endif
 #if defined (HAVE_STRUCT_STAT_ST_BLOCKS)
-  m["blocks"](0) = static_cast<double> (fs.blocks ());
+  m["blocks"](0) = fs.blocks ();
 #endif
 
   return m;
 }
 
 DEFUN (dup2, args, ,
  "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {[@var{fid}, @var{msg}] =} dup2 (@var{old}, @var{new})\n\
@@ -428,17 +428,17 @@ DEFUN (getegid, args, ,
 Return the effective group id of the current process.\n\
 @end deftypefn")
 {
   octave_value retval = -1;
 
   int nargin = args.length ();
 
   if (nargin == 0)
-    retval = static_cast<double> (octave_syscalls::getegid ());
+    retval = octave_syscalls::getegid ();
   else
     print_usage ("getegid");
 
   return retval;
 }
 
 DEFUN (getgid, args, ,
   "-*- texinfo -*-\n\
@@ -446,17 +446,17 @@ DEFUN (getgid, args, ,
 Return the real group id of the current process.\n\
 @end deftypefn")
 {
   octave_value retval = -1;
 
   int nargin = args.length ();
 
   if (nargin == 0)
-    retval = static_cast<double> (octave_syscalls::getgid ());
+    retval = octave_syscalls::getgid ();
   else
     print_usage ("getgid");
 
   return retval;
 }
 
 DEFUN (geteuid, args, ,
   "-*- texinfo -*-\n\
@@ -464,17 +464,17 @@ DEFUN (geteuid, args, ,
 Return the effective user id of the current process.\n\
 @end deftypefn")
 {
   octave_value retval = -1;
 
   int nargin = args.length ();
 
   if (nargin == 0)
-    retval = static_cast<double> (octave_syscalls::geteuid ());
+    retval = octave_syscalls::geteuid ();
   else
     print_usage ("geteuid");
 
   return retval;
 }
 
 DEFUN (getuid, args, ,
   "-*- texinfo -*-\n\
@@ -482,17 +482,17 @@ DEFUN (getuid, args, ,
 Return the real user id of the current process.\n\
 @end deftypefn")
 {
   octave_value retval = -1;
 
   int nargin = args.length ();
 
   if (nargin == 0)
-    retval = static_cast<double> (octave_syscalls::getuid ());
+    retval = octave_syscalls::getuid ();
   else
     print_usage ("getuid");
 
   return retval;
 }
 
 DEFUN (lstat, args, ,
   "-*- texinfo -*-\n\
@@ -552,26 +552,31 @@ system-dependent error message.\n\
   if (nargin == 2)
     {
       if (args(0).is_string ())
 	{
 	  std::string name = args(0).string_value ();
 
 	  if (args(1).is_scalar_type ())
 	    {
-	      long mode = static_cast<long> (args(1).double_value ());
+	      long mode = args(1).long_value ();
 
-	      std::string msg;
+	      if (! error_state)
+		{
+		  std::string msg;
+
+		  int status = file_ops::mkfifo (name, mode, msg);
 
-	      int status = file_ops::mkfifo (name, mode, msg);
+		  retval(0) = status;
 
-	      retval(0) = status;
-
-	      if (status < 0)
-		retval(1) = msg;
+		  if (status < 0)
+		    retval(1) = msg;
+		}
+	      else
+		error ("mkfifo: invalid MODE");
 	    }
 	  else
 	    error ("mkfifo: MODE must be an integer");
 	}
       else
 	error ("mkfifo: file name must be a string");
     }
   else
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -542,17 +542,17 @@ variable @code{status} to the integer @s
 		  // XXX FIXME XXX -- should probably replace this
 		  // call with something portable.
 
 		  execl ("/bin/sh", "sh", "-c", cmd_str.c_str (), 0);
 
 		  panic_impossible ();
 		}
 	      else
-		retval(0) = static_cast<double> (pid);
+		retval(0) = pid;
 #else
  	      error ("asynchronous system calls are not supported");
 #endif
 	    }
 	  else if (return_output)
 	    retval = run_command_and_return_output (cmd_str);
 	  else
 	    {
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -689,17 +689,17 @@ DEFUN (ERRNO, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{system_error_number}} errno ()\n\
 Return the current value of the system-dependent variable errno.\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 0)
-    retval = static_cast<double> (errno);
+    retval = errno;
   else
     print_usage ("errno");
 
   return retval;
 }
 
 // #endif
 
