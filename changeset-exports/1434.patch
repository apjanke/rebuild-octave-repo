# HG changeset patch
# User jwe
# Date 811496174 0
#      Tue Sep 19 07:36:14 1995 +0000
# Node ID 164051941de66488eb24084e59c6972c6a7dfcb8
# Parent  b8a8821962aff28c0745c650b97873529ce32b07
[project @ 1995-09-19 07:36:14 by jwe]

diff --git a/readline/bind.c b/readline/bind.c
--- a/readline/bind.c
+++ b/readline/bind.c
@@ -19,19 +19,19 @@
    is generally kept in a file called COPYING or LICENSE.  If you do not
    have a copy of the license, write to the Free Software Foundation,
    675 Mass Ave, Cambridge, MA 02139, USA. */
 #define READLINE_LIBRARY
 
 #include <stdio.h>
 #include <sys/types.h>
 #include <fcntl.h>
-#if !defined (NO_SYS_FILE)
+#if defined (HAVE_SYS_FILE)
 #  include <sys/file.h>
-#endif /* !NO_SYS_FILE */
+#endif /* HAVE_SYS_FILE */
 #include <signal.h>
 
 #if defined (HAVE_UNISTD_H)
 #  include <unistd.h>
 #endif /* HAVE_UNISTD_H */
 
 #if defined (HAVE_STDLIB_H)
 #  include <stdlib.h>
@@ -88,19 +88,24 @@ extern char **rl_funmap_names ();
 
 /* Forward declarations */
 void rl_set_keymap_from_edit_mode ();
 
 static int glean_key_from_name ();
 
 #if defined (HAVE_STRCASECMP)
 #define stricmp strcasecmp
+#else
+static int stricmp ();
+#endif
+
+#if defined (HAVE_STRNCASECMP)
 #define strnicmp strncasecmp
 #else
-static int stricmp (), strnicmp ();
+static int strnicmp ();
 #endif
 
 #if defined (STATIC_MALLOC)
 static char *xmalloc (), *xrealloc ();
 #else
 extern char *xmalloc (), *xrealloc ();
 #endif /* STATIC_MALLOC */
 
diff --git a/readline/complete.c b/readline/complete.c
--- a/readline/complete.c
+++ b/readline/complete.c
@@ -23,19 +23,19 @@
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
 #include <stdio.h>
 #include <sys/types.h>
 #include <fcntl.h>
-#if !defined (NO_SYS_FILE)
+#if defined (HAVE_SYS_FILE)
 #  include <sys/file.h>
-#endif /* !NO_SYS_FILE */
+#endif /* HAVE_SYS_FILE */
 
 #if defined (HAVE_UNISTD_H)
 #  include <unistd.h>
 #endif /* HAVE_UNISTD_H */
 
 #if defined (HAVE_STDLIB_H)
 #  include <stdlib.h>
 #else
@@ -212,16 +212,21 @@ char *rl_basic_word_break_characters = "
 char *rl_completer_word_break_characters = (char *)NULL;
 
 /* List of characters which can be used to quote a substring of the line.
    Completion occurs on the entire substring, and within the substring
    rl_completer_word_break_characters are treated as any other character,
    unless they also appear within this list. */
 char *rl_completer_quote_characters = (char *)NULL;
 
+/* Character to add after a single completion alternative matches
+   at the end of line.  By default this is a space.
+   Nothing is added if this is '\0'. */
+char rl_completion_append_character = ' ';
+
 /* List of characters that are word break characters, but should be left
    in TEXT when it is passed to the completion function.  The shell uses
    this to help determine what kind of completing to do. */
 char *rl_special_prefixes = (char *)NULL;
 
 /* If non-zero, then disallow duplicates in the matches. */
 int rl_ignore_completion_duplicates = 1;
 
@@ -737,34 +742,38 @@ rl_complete_internal (what_to_do)
 	      if (replacement != matches[0])
 		free (replacement);
 	    }
 
 	  /* If there are more matches, ring the bell to indicate.
 	     If this was the only match, and we are hacking files,
 	     check the file to see if it was a directory.  If so,
 	     add a '/' to the name.  If not, and we are at the end
-	     of the line, then add a space. */
+	     of the line, then add rl_completion_append_character,
+	     usually a space. */
 	  if (matches[1])
 	    {
 	      if (what_to_do == '!')
 		goto display_matches;		/* XXX */
 	      else if (rl_editing_mode != vi_mode)
 		ding ();	/* There are other matches remaining. */
 	    }
 	  else
 	    {
 	      char temp_string[4];
 	      int temp_string_index = 0;
 
 	      if (quote_char)
 		temp_string[temp_string_index++] = quote_char;
 
-	      temp_string[temp_string_index++] = delimiter ? delimiter : ' ';
-	      temp_string[temp_string_index++] = '\0';
+	      temp_string[temp_string_index++] = delimiter ? delimiter
+		: rl_completion_append_character;
+
+	      if (rl_completion_append_character)
+		temp_string[temp_string_index++] = '\0';
 
 	      if (rl_filename_completion_desired)
 		{
 		  struct stat finfo;
 		  char *filename = tilde_expand (matches[0]);
 
 		  if ((stat (filename, &finfo) == 0) && S_ISDIR (finfo.st_mode))
 		    {
diff --git a/readline/parens.c b/readline/parens.c
--- a/readline/parens.c
+++ b/readline/parens.c
@@ -29,17 +29,31 @@ rl_insert_close (count, invoking_key)
      int count, invoking_key;
 {
   return (rl_insert (count, invoking_key));
 }
 
 #else /* PAREN_MATCHING */
 
 #include <stdio.h>
+/* With SunOS 4.1.x at least, and Ultrix 4.x, sys/types.h won't define
+   the  FD_XXX macros if _POSIX_SOURCE is defined */
+#if defined (_POSIX_SOURCE) && (defined (sun) || defined (ultrix))
+#undef _POSIX_SOURCE
+#endif
+/* On the Alpha, we have to have _OSF_SOURCE defined for sys/types.h
+   to define the FD_XXX macros. */
+#if defined (__alpha__) && ! defined (_OSF_SOURCE)
+#define _OSF_SOURCE
+#endif
 #include <sys/types.h>
+/* AIX (any others?) defines the FD_XXX macros in sys/select.h */
+#if defined (HAVE_SYS_SELECT_H)
+#include <sys/select.h>
+#endif
 #if defined (FD_SET)
 #  include <sys/time.h>
 #endif /* FD_SET */
 #include "readline.h"
 
 extern int rl_explicit_arg;
 
 /* Non-zero means try to blink the matching open parenthesis when the
diff --git a/readline/rlconf.h b/readline/rlconf.h
--- a/readline/rlconf.h
+++ b/readline/rlconf.h
@@ -27,17 +27,17 @@
 /* Define this if you want the vi-mode editing available. */
 #define VI_MODE
 
 /* Define this to get an indication of file type when listing completions. */
 #define VISIBLE_STATS
 
 /* If defined, readline shows opening parens and braces when closing
    paren or brace entered. */
-/* #define PAREN_MATCHING */
+#define PAREN_MATCHING
 
 /* This definition is needed by readline.c, rltty.c, and signals.c. */
 /* If on, then readline handles signals in a way that doesn't screw. */
 #define HANDLE_SIGNALS
 
 /* Ugly but working hack for binding prefix meta. */
 #define PREFIX_META_HACK
 
diff --git a/readline/signals.c b/readline/signals.c
--- a/readline/signals.c
+++ b/readline/signals.c
@@ -19,19 +19,19 @@
    is generally kept in a file called COPYING or LICENSE.  If you do not
    have a copy of the license, write to the Free Software Foundation,
    675 Mass Ave, Cambridge, MA 02139, USA. */
 #define READLINE_LIBRARY
 
 #include <stdio.h>
 #include <sys/types.h>
 #include <fcntl.h>
-#if !defined (NO_SYS_FILE)
+#if defined (HAVE_SYS_FILE)
 #  include <sys/file.h>
-#endif /* !NO_SYS_FILE */
+#endif /* HAVE_SYS_FILE */
 #include <signal.h>
 
 #if defined (HAVE_UNISTD_H)
 #  include <unistd.h>
 #endif /* HAVE_UNISTD_H */
 
 #if defined (HAVE_STDLIB_H)
 #  include <stdlib.h>
@@ -59,25 +59,20 @@ extern int errno;
 #include "history.h"
 
 extern int readline_echoing_p;
 extern int rl_pending_input;
 extern int _rl_meta_flag;
 
 extern void free_undo_list ();
 
-#if defined (VOID_SIGHANDLER)
-#  define sighandler void
-#else
-#  define sighandler int
-#endif /* VOID_SIGHANDLER */
-
 /* This typedef is equivalant to the one for Function; it allows us
    to say SigHandler *foo = signal (SIGKILL, SIG_IGN); */
-typedef sighandler SigHandler ();
+typedef RETSIGTYPE SigHandler ();
+
 
 #if defined (__GO32__)
 #  undef HANDLE_SIGNALS
 #endif /* __GO32__ */
 
 #if defined (STATIC_MALLOC)
 static char *xmalloc (), *xrealloc ();
 #else
@@ -89,33 +84,33 @@ extern char *xmalloc (), *xrealloc ();
 /*					        		    */
 /*			   Signal Handling                          */
 /*								    */
 /* **************************************************************** */
 
 #if defined (SIGWINCH)
 static SigHandler *old_sigwinch = (SigHandler *)NULL;
 
-static sighandler
+static RETSIGTYPE
 rl_handle_sigwinch (sig)
      int sig;
 {
   if (readline_echoing_p)
     {
       _rl_set_screen_size (fileno (rl_instream), 1);
       _rl_redisplay_after_sigwinch ();
     }
 
   if (old_sigwinch &&
       old_sigwinch != (SigHandler *)SIG_IGN &&
       old_sigwinch != (SigHandler *)SIG_DFL)
     (*old_sigwinch) (sig);
-#if !defined (VOID_SIGHANDLER)
+#if RETSIGTYPE != void
   return (0);
-#endif /* VOID_SIGHANDLER */
+#endif
 }
 #endif  /* SIGWINCH */
 
 #if defined (HANDLE_SIGNALS)
 /* Interrupt handling. */
 static SigHandler
   *old_int  = (SigHandler *)NULL,
   *old_alrm = (SigHandler *)NULL;
@@ -123,17 +118,17 @@ static SigHandler
 static SigHandler
   *old_tstp = (SigHandler *)NULL,
   *old_ttou = (SigHandler *)NULL,
   *old_ttin = (SigHandler *)NULL,
   *old_cont = (SigHandler *)NULL;
 #endif /* !SHELL */
 
 /* Handle an interrupt character. */
-static sighandler
+static RETSIGTYPE
 rl_signal_handler (sig)
      int sig;
 {
 #if defined (HAVE_POSIX_SIGNALS)
   sigset_t set;
 #else /* !HAVE_POSIX_SIGNALS */
 #  if defined (HAVE_BSD_SIGNALS)
   long omask;
@@ -193,19 +188,19 @@ rl_signal_handler (sig)
       sigsetmask (omask & ~(sigmask (sig)));
 #  endif /* HAVE_BSD_SIGNALS */
 #endif /* !HAVE_POSIX_SIGNALS */
 
       rl_prep_terminal (_rl_meta_flag);
       rl_set_signals ();
     }
 
-#if !defined (VOID_SIGHANDLER)
+#if RETSIGTYPE != void
   return (0);
-#endif /* !VOID_SIGHANDLER */
+#endif
 }
 
 #if defined (HAVE_POSIX_SIGNALS)
 static SigHandler *
 rl_set_sighandler (sig, handler)
      int sig;
      SigHandler *handler;
 {
