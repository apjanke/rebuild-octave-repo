# HG changeset patch
# User Julien Bect <jbect@users.sourceforge.net>
# Date 1474014298 -7200
#      Fri Sep 16 10:24:58 2016 +0200
# Node ID 0b278f54f60a8bbce2973edb83cca6ee65f63510
# Parent  5017f4ee1348a3458e84300750ec6d0841976ec0
Remove unnecessary initializations in complex_value methods.

 * ov-base-diag.cc, ov-bool-mat.cc, ov-bool-sparse.cc, ov-ch-mat.cc,
   ov-cx-mat.cc, ov-cx-sparse.cc, ov-flt-cx-mat.cc, ov-flt-re-mat.cc,
   ov-perm.cc, ov-range.cc, ov-re-mat.cc, ov-re-sparse.cc, ov-str-mat.cc:
   Remove unnecessary initializations and declarations in complex_value methods.
 * ov-str-mat.cc: Simplify macro CHAR_MATRIX_CONV.

diff --git a/libinterp/octave-value/ov-base-diag.cc b/libinterp/octave-value/ov-base-diag.cc
--- a/libinterp/octave-value/ov-base-diag.cc
+++ b/libinterp/octave-value/ov-base-diag.cc
@@ -333,29 +333,23 @@ octave_base_diag<DMT, MT>::float_value (
 
   return helper_getreal (el_type (matrix (0, 0)));
 }
 
 template <typename DMT, typename MT>
 Complex
 octave_base_diag<DMT, MT>::complex_value (bool) const
 {
-  double tmp = lo_ieee_nan_value ();
-
-  Complex retval (tmp, tmp);
-
   if (rows () == 0 || columns () == 0)
     err_invalid_conversion (type_name (), "complex scalar");
 
   warn_implicit_conversion ("Octave:array-to-scalar",
                             type_name (), "complex scalar");
 
-  retval = matrix (0, 0);
-
-  return retval;
+  return matrix(0, 0);
 }
 
 template <typename DMT, typename MT>
 FloatComplex
 octave_base_diag<DMT, MT>::float_complex_value (bool) const
 {
   float tmp = lo_ieee_float_nan_value ();
 
diff --git a/libinterp/octave-value/ov-bool-mat.cc b/libinterp/octave-value/ov-bool-mat.cc
--- a/libinterp/octave-value/ov-bool-mat.cc
+++ b/libinterp/octave-value/ov-bool-mat.cc
@@ -123,29 +123,23 @@ octave_bool_matrix::float_value (bool) c
                             "bool matrix", "real scalar");
 
   return matrix(0, 0);
 }
 
 Complex
 octave_bool_matrix::complex_value (bool) const
 {
-  double tmp = lo_ieee_nan_value ();
-
-  Complex retval (tmp, tmp);
-
   if (rows () == 0 || columns () == 0)
     err_invalid_conversion ("bool matrix", "complex scalar");
 
   warn_implicit_conversion ("Octave:array-to-scalar",
                             "bool matrix", "complex scalar");
 
-  retval = matrix(0, 0);
-
-  return retval;
+  return Complex (matrix(0, 0), 0);
 }
 
 FloatComplex
 octave_bool_matrix::float_complex_value (bool) const
 {
   float tmp = lo_ieee_float_nan_value ();
 
   FloatComplex retval (tmp, tmp);
diff --git a/libinterp/octave-value/ov-bool-sparse.cc b/libinterp/octave-value/ov-bool-sparse.cc
--- a/libinterp/octave-value/ov-bool-sparse.cc
+++ b/libinterp/octave-value/ov-bool-sparse.cc
@@ -108,30 +108,24 @@ octave_sparse_bool_matrix::double_value 
                               "bool sparse matrix", "real scalar");
 
   return matrix(0, 0);
 }
 
 Complex
 octave_sparse_bool_matrix::complex_value (bool) const
 {
-  double tmp = lo_ieee_nan_value ();
-
-  Complex retval (tmp, tmp);
-
   if (rows () == 0 || columns () == 0)
     err_invalid_conversion ("bool sparse matrix", "complex scalar");
 
   if (numel () > 1)
     warn_implicit_conversion ("Octave:array-to-scalar",
                               "bool sparse matrix", "complex scalar");
 
-  retval = matrix(0, 0);
-
-  return retval;
+  return Complex (matrix(0, 0), 0);
 }
 
 octave_value
 octave_sparse_bool_matrix::convert_to_str_internal (bool pad, bool force,
                                                     char type) const
 {
   octave_value tmp = octave_value (array_value ());
   return tmp.convert_to_str (pad, force, type);
diff --git a/libinterp/octave-value/ov-ch-mat.cc b/libinterp/octave-value/ov-ch-mat.cc
--- a/libinterp/octave-value/ov-ch-mat.cc
+++ b/libinterp/octave-value/ov-ch-mat.cc
@@ -116,29 +116,23 @@ octave_char_matrix::uint64_scalar_value 
   retval = octave_uint64 (matrix(0, 0));
 
   return retval;
 }
 
 Complex
 octave_char_matrix::complex_value (bool) const
 {
-  double tmp = lo_ieee_nan_value ();
-
-  Complex retval (tmp, tmp);
-
   if (rows () == 0 && columns () == 0)
     err_invalid_conversion ("character matrix", "complex scalar");
 
   warn_implicit_conversion ("Octave:array-to-scalar",
                             "character matrix", "complex scalar");
 
-  retval = static_cast<unsigned char> (matrix(0, 0));
-
-  return retval;
+  return Complex (static_cast<unsigned char> (matrix(0, 0)), 0);
 }
 
 FloatComplex
 octave_char_matrix::float_complex_value (bool) const
 {
   float tmp = lo_ieee_float_nan_value ();
 
   FloatComplex retval (tmp, tmp);
diff --git a/libinterp/octave-value/ov-cx-mat.cc b/libinterp/octave-value/ov-cx-mat.cc
--- a/libinterp/octave-value/ov-cx-mat.cc
+++ b/libinterp/octave-value/ov-cx-mat.cc
@@ -174,29 +174,23 @@ octave_complex_matrix::float_matrix_valu
   retval = ::real (ComplexMatrix (matrix));
 
   return retval;
 }
 
 Complex
 octave_complex_matrix::complex_value (bool) const
 {
-  double tmp = lo_ieee_nan_value ();
-
-  Complex retval (tmp, tmp);
-
   if (rows () == 0 || columns () == 0)
     err_invalid_conversion ("complex matrix", "complex scalar");
 
   warn_implicit_conversion ("Octave:array-to-scalar",
                             "complex matrix", "complex scalar");
 
-  retval = matrix(0, 0);
-
-  return retval;
+  return matrix(0, 0);
 }
 
 FloatComplex
 octave_complex_matrix::float_complex_value (bool) const
 {
   float tmp = lo_ieee_float_nan_value ();
 
   FloatComplex retval (tmp, tmp);
diff --git a/libinterp/octave-value/ov-cx-sparse.cc b/libinterp/octave-value/ov-cx-sparse.cc
--- a/libinterp/octave-value/ov-cx-sparse.cc
+++ b/libinterp/octave-value/ov-cx-sparse.cc
@@ -133,31 +133,25 @@ octave_sparse_complex_matrix::matrix_val
   retval = ::real (matrix.matrix_value ());
 
   return retval;
 }
 
 Complex
 octave_sparse_complex_matrix::complex_value (bool) const
 {
-  double tmp = lo_ieee_nan_value ();
-
-  Complex retval (tmp, tmp);
-
   // FIXME: maybe this should be a function, valid_as_scalar()
   if (is_empty ())
     err_invalid_conversion ("complex sparse matrix", "real scalar");
 
   if (numel () > 1)
     warn_implicit_conversion ("Octave:array-to-scalar",
                               "complex sparse matrix", "real scalar");
 
-  retval = matrix(0, 0);
-
-  return retval;
+  return matrix(0, 0);
 }
 
 ComplexMatrix
 octave_sparse_complex_matrix::complex_matrix_value (bool) const
 {
   return matrix.matrix_value ();
 }
 
diff --git a/libinterp/octave-value/ov-flt-cx-mat.cc b/libinterp/octave-value/ov-flt-cx-mat.cc
--- a/libinterp/octave-value/ov-flt-cx-mat.cc
+++ b/libinterp/octave-value/ov-flt-cx-mat.cc
@@ -148,29 +148,23 @@ octave_float_complex_matrix::float_matri
   retval = ::real (FloatComplexMatrix (matrix));
 
   return retval;
 }
 
 Complex
 octave_float_complex_matrix::complex_value (bool) const
 {
-  double tmp = lo_ieee_nan_value ();
-
-  Complex retval (tmp, tmp);
-
   if (rows () == 0 || columns () == 0)
     err_invalid_conversion ("complex matrix", "complex scalar");
 
   warn_implicit_conversion ("Octave:array-to-scalar",
                             "complex matrix", "complex scalar");
 
-  retval = matrix(0, 0);
-
-  return retval;
+  return matrix(0, 0);
 }
 
 FloatComplex
 octave_float_complex_matrix::float_complex_value (bool) const
 {
   float tmp = lo_ieee_float_nan_value ();
 
   FloatComplex retval (tmp, tmp);
diff --git a/libinterp/octave-value/ov-flt-re-mat.cc b/libinterp/octave-value/ov-flt-re-mat.cc
--- a/libinterp/octave-value/ov-flt-re-mat.cc
+++ b/libinterp/octave-value/ov-flt-re-mat.cc
@@ -132,29 +132,23 @@ FloatMatrix
 octave_float_matrix::float_matrix_value (bool) const
 {
   return FloatMatrix (matrix);
 }
 
 Complex
 octave_float_matrix::complex_value (bool) const
 {
-  double tmp = lo_ieee_nan_value ();
-
-  Complex retval (tmp, tmp);
-
   if (rows () == 0 || columns () == 0)
     err_invalid_conversion ("real matrix", "complex scalar");
 
   warn_implicit_conversion ("Octave:array-to-scalar",
                             "real matrix", "complex scalar");
 
-  retval = matrix(0, 0);
-
-  return retval;
+  return Complex (matrix(0, 0), 0);
 }
 
 FloatComplex
 octave_float_matrix::float_complex_value (bool) const
 {
   double tmp = lo_ieee_float_nan_value ();
 
   FloatComplex retval (tmp, tmp);
diff --git a/libinterp/octave-value/ov-perm.cc b/libinterp/octave-value/ov-perm.cc
--- a/libinterp/octave-value/ov-perm.cc
+++ b/libinterp/octave-value/ov-perm.cc
@@ -167,29 +167,23 @@ octave_perm_matrix::float_value (bool) c
                             type_name (), "real scalar");
 
   return matrix(0, 0);
 }
 
 Complex
 octave_perm_matrix::complex_value (bool) const
 {
-  double tmp = lo_ieee_nan_value ();
-
-  Complex retval (tmp, tmp);
-
   if (rows () == 0 || columns () == 0)
     err_invalid_conversion (type_name (), "complex scalar");
 
   warn_implicit_conversion ("Octave:array-to-scalar",
                             type_name (), "complex scalar");
 
-  retval = matrix(0, 0);
-
-  return retval;
+  return Complex (matrix(0, 0), 0);
 }
 
 FloatComplex
 octave_perm_matrix::float_complex_value (bool) const
 {
   float tmp = lo_ieee_float_nan_value ();
 
   FloatComplex retval (tmp, tmp);
diff --git a/libinterp/octave-value/ov-range.cc b/libinterp/octave-value/ov-range.cc
--- a/libinterp/octave-value/ov-range.cc
+++ b/libinterp/octave-value/ov-range.cc
@@ -302,31 +302,25 @@ octave_range::is_true (void) const
     }
 
   return retval;
 }
 
 Complex
 octave_range::complex_value (bool) const
 {
-  double tmp = lo_ieee_nan_value ();
-
-  Complex retval (tmp, tmp);
-
   octave_idx_type nel = range.numel ();
 
   if (nel == 0)
     err_invalid_conversion ("range", "complex scalar");
 
   warn_implicit_conversion ("Octave:array-to-scalar",
                             "range", "complex scalar");
 
-  retval = range.base ();
-
-  return retval;
+  return Complex (range.base (), 0);
 }
 
 FloatComplex
 octave_range::float_complex_value (bool) const
 {
   float tmp = lo_ieee_float_nan_value ();
 
   FloatComplex retval (tmp, tmp);
diff --git a/libinterp/octave-value/ov-re-mat.cc b/libinterp/octave-value/ov-re-mat.cc
--- a/libinterp/octave-value/ov-re-mat.cc
+++ b/libinterp/octave-value/ov-re-mat.cc
@@ -147,29 +147,23 @@ FloatMatrix
 octave_matrix::float_matrix_value (bool) const
 {
   return FloatMatrix (Matrix (matrix));
 }
 
 Complex
 octave_matrix::complex_value (bool) const
 {
-  double tmp = lo_ieee_nan_value ();
-
-  Complex retval (tmp, tmp);
-
   if (rows () == 0 || columns () == 0)
     err_invalid_conversion ("real matrix", "complex scalar");
 
   warn_implicit_conversion ("Octave:array-to-scalar",
                             "real matrix", "complex scalar");
 
-  retval = matrix(0, 0);
-
-  return retval;
+  return Complex (matrix(0, 0), 0);
 }
 
 FloatComplex
 octave_matrix::float_complex_value (bool) const
 {
   float tmp = lo_ieee_float_nan_value ();
 
   FloatComplex retval (tmp, tmp);
diff --git a/libinterp/octave-value/ov-re-sparse.cc b/libinterp/octave-value/ov-re-sparse.cc
--- a/libinterp/octave-value/ov-re-sparse.cc
+++ b/libinterp/octave-value/ov-re-sparse.cc
@@ -103,31 +103,25 @@ octave_sparse_matrix::double_value (bool
                               "real sparse matrix", "real scalar");
 
   return matrix(0, 0);
 }
 
 Complex
 octave_sparse_matrix::complex_value (bool) const
 {
-  double tmp = lo_ieee_nan_value ();
-
-  Complex retval (tmp, tmp);
-
   // FIXME: maybe this should be a function, valid_as_scalar()
   if (rows () == 0 || columns () == 0)
     err_invalid_conversion ("real sparse matrix", "complex scalar");
 
   if (numel () > 1)
     warn_implicit_conversion ("Octave:array-to-scalar",
                               "real sparse matrix", "complex scalar");
 
-  retval = matrix(0, 0);
-
-  return retval;
+  return Complex (matrix(0, 0), 0);
 }
 
 Matrix
 octave_sparse_matrix::matrix_value (bool) const
 {
   return matrix.matrix_value ();
 }
 
diff --git a/libinterp/octave-value/ov-str-mat.cc b/libinterp/octave-value/ov-str-mat.cc
--- a/libinterp/octave-value/ov-str-mat.cc
+++ b/libinterp/octave-value/ov-str-mat.cc
@@ -156,63 +156,59 @@ octave_char_matrix_str::resize (const di
   charNDArray retval (matrix);
   if (fill)
     retval.resize (dv, 0);
   else
     retval.resize (dv);
   return octave_value (retval, is_sq_string () ? '\'' : '"');
 }
 
-#define CHAR_MATRIX_CONV(T, INIT, TNAME, FCN)                           \
-  T retval INIT;                                                        \
+#define CHAR_MATRIX_CONV(TNAME, FCN)                                    \
                                                                         \
   if (! force_string_conv)                                              \
     err_invalid_conversion ("string", TNAME);                           \
                                                                         \
   warn_implicit_conversion ("Octave:str-to-num", "string", TNAME);      \
                                                                         \
-  retval = octave_char_matrix::FCN ();                                  \
-                                                                        \
-  return retval
+  return octave_char_matrix::FCN ()
 
 double
 octave_char_matrix_str::double_value (bool force_string_conv) const
 {
-  CHAR_MATRIX_CONV (double, = 0, "real scalar", double_value);
+  CHAR_MATRIX_CONV ("real scalar", double_value);
 }
 
 Complex
 octave_char_matrix_str::complex_value (bool force_string_conv) const
 {
-  CHAR_MATRIX_CONV (Complex, = 0, "complex scalar", complex_value);
+  CHAR_MATRIX_CONV ("complex scalar", complex_value);
 }
 
 Matrix
 octave_char_matrix_str::matrix_value (bool force_string_conv) const
 {
-  CHAR_MATRIX_CONV (Matrix, , "real matrix", matrix_value);
+  CHAR_MATRIX_CONV ("real matrix", matrix_value);
 }
 
 ComplexMatrix
 octave_char_matrix_str::complex_matrix_value (bool force_string_conv) const
 {
-  CHAR_MATRIX_CONV (ComplexMatrix, , "complex matrix", complex_matrix_value);
+  CHAR_MATRIX_CONV ("complex matrix", complex_matrix_value);
 }
 
 NDArray
 octave_char_matrix_str::array_value (bool force_string_conv) const
 {
-  CHAR_MATRIX_CONV (NDArray, , "real N-D array", array_value);
+  CHAR_MATRIX_CONV ("real N-D array", array_value);
 }
 
 ComplexNDArray
 octave_char_matrix_str::complex_array_value (bool force_string_conv) const
 {
-  CHAR_MATRIX_CONV (ComplexNDArray, , "complex N-D array",
-                    complex_array_value);
+  CHAR_MATRIX_CONV ("complex N-D array", complex_array_value);
 }
 
 string_vector
 octave_char_matrix_str::string_vector_value (bool) const
 {
   string_vector retval;
 
   if (matrix.ndims () != 2)
