# HG changeset patch
# User jwe
# Date 787428398 0
#      Wed Dec 14 18:06:38 1994 +0000
# Node ID 4b483cf9f6b035c12b6dc2a6664219464bd62377
# Parent  6aeb8fdc27d48be950c2acbc28ea830134d93e2a
[project @ 1994-12-14 18:06:38 by jwe]

diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -80,22 +80,27 @@ int beginning_of_function = 0;
 // Nonzero means that we should convert spaces to a comma inside a
 // matrix definition.
 static int convert_spaces_to_comma = 1;
 
 // Another context hack, this time for the plot command's `using',
 // `title', and `with' keywords.
 static int cant_be_identifier = 0;
 
+#define BRACE 1
+#define PAREN 2
+
 // Is the closest nesting level a square brace or a paren?
 //
-//  1 -> brace, spaces are important (they can turn into commas)
-//  0 -> paren, spaces are not important
+//  BRACE -> spaces are important (they can turn into commas)
+//           new lines are important (they can turn into semicolons)
 //
-static SLStack <int> in_brace_or_paren;
+//  PAREN -> spaces and new lines are not important
+
+static SLStack <int> nesting_level;
 
 // Forward declarations for functions defined at the bottom of this
 // file.
 
 static void do_string_escapes (char *s);
 static void fixup_column_count (char *s);
 static void do_comma_insert_check (void);
 static int is_plot_keyword (char *s);
@@ -211,51 +216,70 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 
 %{
 // In some cases, spaces in matrix constants can turn into commas.
 // If commas are required, spaces are not important in matrix
 // constants so we just eat them.
 %}
 
 <MATRIX>{S}+ {
-    if (user_pref.commas_in_literal_matrix != 2)
+    if (user_pref.whitespace_in_literal_matrix != 2)
       {
 	int bin_op = next_token_is_bin_op (1, yytext);
 	int postfix_un_op = next_token_is_postfix_unary_op (1, yytext);
 
-	if (! (postfix_un_op || bin_op || in_brace_or_paren.empty ())
-	    && in_brace_or_paren.top ()
+	if (! (postfix_un_op || bin_op || nesting_level.empty ())
+	    && nesting_level.top () == BRACE
 	    && convert_spaces_to_comma)
 	  TOK_RETURN (',');
       }
   }
 
 %{
-// New lines and semicolons are both handled as row seprators in
-// matrix constants.
+// Semicolons are both handled as row seprators in matrix constants.
 %}
 
-<MATRIX>{SNLCMT}*[\n;]{SNLCMT}* {
+<MATRIX>{SNLCMT}*;{SNLCMT}* {
     fixup_column_count (yytext);
     quote_is_transpose = 0;
     cant_be_identifier = 0;
     convert_spaces_to_comma = 1;
     return ';';
   }
 
 %{
+// In some cases, new lines can also become row separators.
+%}
+
+<MATRIX>{SNLCMT}*\n{SNLCMT}* {
+    if (user_pref.whitespace_in_literal_matrix != 2)
+      {
+	fixup_column_count (yytext);
+	quote_is_transpose = 0;
+	cant_be_identifier = 0;
+	convert_spaces_to_comma = 1;
+
+	if (nesting_level.empty ())
+	  return LEXICAL_ERROR;
+
+	if (nesting_level.top () == BRACE)
+	  return ';';
+      }
+  }
+
+%{
 // Open and close brace are handled differently if we are in the range
 // part of a plot command.
 //
 %}
 
 \[{S}* {
     fixup_column_count (yytext);
 
-    in_brace_or_paren.push (1);
+    nesting_level.push (BRACE);
 
     promptflag--;
     eat_whitespace ();
 
     if (plotting && ! past_plot_range)
       {
 	in_plot_range = 1;
 	TOK_RETURN (OPEN_BRACE);
@@ -267,18 +291,18 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 	BEGIN MATRIX;
 	TOK_RETURN ('[');
       }
   }
 
 \] {
     promptflag++;
 
-    if (! in_brace_or_paren.empty ())
-      in_brace_or_paren.pop ();
+    if (! nesting_level.empty ())
+      nesting_level.pop ();
 
     if (plotting && ! past_plot_range)
       {
 	in_plot_range = 0;
 	TOK_RETURN (CLOSE_BRACE);
       }
     else
       TOK_RETURN (']');
@@ -351,25 +375,31 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
     tok = strip_trailing_whitespace (yytext);
     int c = yyinput ();
     unput (c);
     return handle_identifier (tok, (c == '='));
   }
 
 %{
 // A new line character.  New line characters inside matrix constants
-// are handled by the <MATRIX> start state code above.
+// are handled by the <MATRIX> start state code above.  If closest
+// nesting is inside parentheses, don't return a row separator.
 %}
 
 {NL} {
     quote_is_transpose = 0;
     cant_be_identifier = 0;
     current_input_column = 1;
     convert_spaces_to_comma = 1;
-    return '\n';
+
+    if (nesting_level.empty ())
+      return '\n';
+
+    if (nesting_level.top () == BRACE)
+      return LEXICAL_ERROR;
   }
 
 %{
 // Single quote can either be the beginning of a string or a transpose
 // operator. 
 %}
 
 "'" {
@@ -402,37 +432,40 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 ":" {
     if (plotting && (in_plot_range || in_plot_using))
       BIN_OP_RETURN (COLON, 1);
     else
       BIN_OP_RETURN (':', 0);
   }
 
 %{
-// Gobble comments.
-%}
+// Gobble comments.  If closest nesting is inside parentheses, don't
+// return a new line.
+%} 
 
 {CCHAR} {
-    if (in_brace_or_paren.empty () && beginning_of_function)
+    if (nesting_level.empty () && beginning_of_function)
       {
 	grab_help_text ();
 	beginning_of_function = 0;
       }
     else
       {
 	int c;
 	while ((c = yyinput ()) != EOF && c != '\n')
 	  ; // Eat comment.
       }
 
     quote_is_transpose = 0;
     cant_be_identifier = 0;
     current_input_column = 1;
     convert_spaces_to_comma = 1;
-    return '\n';
+
+    if (nesting_level.empty () || nesting_level.top () == BRACE)
+      return '\n';
   }
 
 %{
 // Other operators.
 %}
 
 ".*"		{ BIN_OP_RETURN (EMUL, 0); }
 "./"		{ BIN_OP_RETURN (EDIV, 0); }
@@ -489,29 +522,33 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
     if (plotting && ! in_plot_range)
       past_plot_range = 1;
     BIN_OP_RETURN ('-', 0);
   }
 
 "(" {
     if (plotting && ! in_plot_range)
       past_plot_range = 1;
-    in_brace_or_paren.push (0);
+    nesting_level.push (PAREN);
+    promptflag--;
     TOK_RETURN ('(');
   }
 
 ")" {
-    if (! in_brace_or_paren.empty ())
-      in_brace_or_paren.pop ();
+    if (! nesting_level.empty ())
+      {
+	nesting_level.pop ();
+	promptflag++;
+      }
     do_comma_insert_check ();
     current_input_column++;
     cant_be_identifier = 1;
     quote_is_transpose = 1;
-    convert_spaces_to_comma = (! in_brace_or_paren.empty ()
-			       && in_brace_or_paren.top ());
+    convert_spaces_to_comma = (! nesting_level.empty ()
+			       && nesting_level.top () == BRACE);
     return ')';
   }
 
 %{
 // We return everything else as single character tokens, which should
 // eventually result in a parse error.
 %}
 
@@ -576,32 +613,34 @@ reset_parser (void)
   in_plot_using = 0;
   in_plot_style = 0;
   doing_set = 0;
 
 // Not initially looking at indirect references.
   looking_at_indirect_ref = 0;
 
 // Error may have occurred inside some parentheses or braces.
-  in_brace_or_paren.clear ();
+  nesting_level.clear ();
 
 // Not initially defining a matrix list.
   braceflag = 0;
   ml.clear ();
   mlnm.clear ();
 
 // Clear out the stack of token info used to track line and column
 // numbers.
   while (! token_stack.empty ())
     delete token_stack.pop ();
 
 // Can be reset by defining a function.
-  current_input_column = 1;
-  if (! reading_script_file)
-    input_line_number = current_command_number - 1;
+  if (! (reading_script_file || reading_fcn_file))
+    {
+      current_input_column = 1;
+      input_line_number = current_command_number - 1;
+    }
 
 // Only ask for input from stdin if we are expecting interactive
 // input.
   if (interactive && ! (reading_fcn_file || get_input_from_eval_string))
     yyrestart (stdin);
 }
 
 // Replace backslash escapes in a string with the real values.
@@ -942,17 +981,18 @@ is_keyword (char *s)
       else
 	{
 	  tmp_local_sym_tab = new symbol_table ();
 	  curr_sym_tab = tmp_local_sym_tab;
 	  defining_func = 1;
 	  promptflag--;
 	  beginning_of_function = 1;
 	  help_buf[0] = '\0';
-	  input_line_number = 1;
+	  if (! (reading_fcn_file || reading_script_file))
+	    input_line_number = 1;
 	  return FCN;
 	}
     }
   else if (strcmp ("global", s) == 0)
     {
       yylval.tok_val = new token (l, c);
       token_stack.push (yylval.tok_val);
       return GLOBAL;
@@ -1311,16 +1351,18 @@ eat_whitespace (void)
 }
 
 static void
 handle_number (char *yytext)
 {
   double value;
   int nread = sscanf (yytext, "%lf", &value);
 
+// If yytext doesn't contain a valid number, we are in deep doo doo.
+
   assert (nread == 1);
 
   quote_is_transpose = 1;
   cant_be_identifier = 1;
   convert_spaces_to_comma = 1;
 
   if (plotting && ! in_plot_range)
     past_plot_range = 1;
@@ -1499,19 +1541,19 @@ handle_string (char delim, int text_styl
   return LEXICAL_ERROR;
 }
 
 static int
 handle_close_brace (char *yytext)
 {
   fixup_column_count (yytext);
 
-  if (! in_brace_or_paren.empty ())
+  if (! nesting_level.empty ())
     {
-      in_brace_or_paren.pop ();
+      nesting_level.pop ();
       braceflag--;
     }
 
   if (braceflag == 0)
     {
       if (! defining_func)
 	promptflag++;
       BEGIN 0;
@@ -1533,29 +1575,29 @@ handle_close_brace (char *yytext)
 	return SCREW_TWO;
       else
 	return ']';
     }
   else
     {
       unput (c1);
 
-      if (braceflag && user_pref.commas_in_literal_matrix != 2)
+      if (braceflag && user_pref.whitespace_in_literal_matrix != 2)
 	{
 	  int c0 = yytext[yyleng-1];
 	  int spc_prev = (c0 == ' ' || c0 == '\t');
 	  int bin_op = next_token_is_bin_op (spc_prev, yytext);
 	  int postfix_un_op = next_token_is_postfix_unary_op
 	    (spc_prev, yytext);
 
 	  int other_op = match_any (c1, ",;\n]");
 
 	  if (! (postfix_un_op || bin_op || other_op
-		 || in_brace_or_paren.empty ())
-	      && in_brace_or_paren.top ()
+		 || nesting_level.empty ())
+	      && nesting_level.top () == BRACE
 	      && convert_spaces_to_comma)
 	    {
 	      unput (',');
 	      return ']';
 	    }
 	}
     }
 
@@ -1678,32 +1720,32 @@ handle_identifier (char *tok, int next_t
 // a following `'' to be treated as a transpose (the next token is
 // `=', so it can't be `''.
 
   quote_is_transpose = 1;
   do_comma_insert_check ();
 
 // Check to see if we should insert a comma.
 
-  if (user_pref.commas_in_literal_matrix != 2
-      && ! in_brace_or_paren.empty ()
-      && in_brace_or_paren.top ()) 
+  if (user_pref.whitespace_in_literal_matrix != 2
+      && ! nesting_level.empty ()
+      && nesting_level.top () == BRACE) 
     {
       int c0 = yytext[yyleng-1];
       int spc_prev = (c0 == ' ' || c0 == '\t');
       int bin_op = next_token_is_bin_op (spc_prev, yytext);
 
       int postfix_un_op = next_token_is_postfix_unary_op (spc_prev,
 							  yytext);
 
       int c1 = yyinput ();
       unput (c1);
       int other_op = match_any (c1, ".,;\n]");
       int index_op = (c1 == '('
-		      && (user_pref.commas_in_literal_matrix == 0
+		      && (user_pref.whitespace_in_literal_matrix == 0
 			  || ! spc_prev));
 
       if (! (postfix_un_op || bin_op || other_op || index_op))
 	unput (',');
     }
 
   return NAME;
 }
