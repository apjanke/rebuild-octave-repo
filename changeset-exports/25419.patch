# HG changeset patch
# User Markus MÃ¼tzel <markus.muetzel@gmx.de>
# Date 1527799569 -7200
#      Thu May 31 22:46:09 2018 +0200
# Node ID 7361fd8aed8608af38ef9db483184034615743ee
# Parent  762eb2e33a7fb57fbf45d843c91a06d53cf5f9a1
Fix segmentation fault with last change (bug #47677).

* gl-renderer.cc (opengl_renderer::draw_patch): Check size of list before
dereferencing.

diff --git a/libinterp/corefcn/gl-render.cc b/libinterp/corefcn/gl-render.cc
--- a/libinterp/corefcn/gl-render.cc
+++ b/libinterp/corefcn/gl-render.cc
@@ -3138,28 +3138,28 @@ namespace octave
             std::list<octave_idx_type>::const_iterator it2;
             octave_idx_type i_start, i_end;
 
             for (int i = 0; i < nf; i++)
               {
                 if (clip_f(i))
                   continue;
 
-                bool check_coplanarity = false;
-                if (has_z && count_f(i) > 3)
+                bool is_non_planar = false;
+                if (props.coplanar_last_idx.size () > 0 && (*it1).size () > 1)
                   {
-                    check_coplanarity = true;
+                    is_non_planar = true;
                     it2 = (*it1).end ();
                     it2--;
                   }
 
                 // loop over planar subsets of face
                 do
                   {
-                    if (check_coplanarity)
+                    if (is_non_planar)
                       {
                         i_end = *it2;
                         if (it2 == (*it1).begin ())
                           i_start = 0;
                         else
                           {
                             it2--;
                             i_start = *it2 - 1;
@@ -3219,17 +3219,17 @@ namespace octave
 
                         tess.add_vertex (vv->coords.fortran_vec (), vv);
                       }
 
                     tess.end_contour ();
                     tess.end_polygon ();
                   } while (i_start > 0);
 
-                if (check_coplanarity)
+                if (is_non_planar)
                   it1++;
               }
 
             if ((fl_mode > 0) && (num_lights > 0) && has_normals)
               glDisable (GL_LIGHTING);
           }
         else
           {
@@ -3280,17 +3280,17 @@ namespace octave
             // not supported by glPolygonOffset which is used to do Z offsets.
             patch_tesselator tess (this, ec_mode, el_mode);
 
             it1 = props.coplanar_last_idx.begin ();
 
             for (int i = 0; i < nf; i++)
               {
                 bool is_non_planar = false;
-                if ((has_z && count_f(i) > 3) && (*it1).front () != count_f(i))
+                if (props.coplanar_last_idx.size () > 0 && (*it1).size () > 1)
                   is_non_planar = true;
                 if (clip_f(i) || is_non_planar)
                   {
                     // This is an unclosed contour or a non-planar face.
                     // Draw it as a line.
                     bool flag = false;
 
                     glShadeModel ((ec_mode == INTERP || el_mode == GOURAUD)
@@ -3355,17 +3355,17 @@ namespace octave
                         vertex_data::vertex_data_rep *vv
                           = vdata[i+j*fr].get_rep ();
                         tess.add_vertex (vv->coords.fortran_vec (), vv);
                       }
 
                     tess.end_contour ();
                     tess.end_polygon ();
                   }
-                if (has_z && count_f(i) > 3)
+                if (is_non_planar)
                   it1++;
               }
 
             set_linestyle ("-");  // Disable LineStipple
             set_linewidth (0.5f);
 
             if ((el_mode > 0) && (num_lights > 0) && has_normals)
               glDisable (GL_LIGHTING);
