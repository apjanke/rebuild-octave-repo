# HG changeset patch
# User Thorsten Meyer <thorsten.meyier@gmx.de>
# Date 1263731502 -3600
#      Sun Jan 17 13:31:42 2010 +0100
# Node ID 9d1a14e12431eb18830bc00c44d7a9635d14f966
# Parent  b5cc666da6ca8de7d97f06eb3995e30b1c92bf86
Update docs and add tests for container functions

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,13 @@
+2010-01-17  Thorsten Meyer  <thorsten.meyier@gmx.de>
+
+	* interpreter/container.txi (Creating Cell Arrays): Add
+	docstring for cellslices function.
+
 2010-01-09  John W. Eaton  <jwe@octave.org>
 
 	* interpreter/munge-texi.cc: Avoid C-style casts.
 	(main): Call usage if fewer than two arguments.
 
 2009-12-20  Rik <octave@nomad.inbox5.com>
 
 	* interpreter/geometryimages.m: Correctly set postscript output when QHULL
diff --git a/doc/interpreter/container.txi b/doc/interpreter/container.txi
--- a/doc/interpreter/container.txi
+++ b/doc/interpreter/container.txi
@@ -623,22 +623,24 @@ for cell arrays.  As do other functions 
 object, such as @ref{doc-length, @code{length}}, @ref{doc-numel,
 @code{numel}}, @ref{doc-rows, @code{rows}}, and @ref{doc-columns,
 @code{columns}}.
 
 @DOCSTRING(cell)
 
 As an alternative to creating empty cell arrays, and then filling them, it
 is possible to convert numerical arrays into cell arrays using the
-@code{num2cell} and @code{mat2cell} functions.
+@code{num2cell}, @code{mat2cell} and @code{cellslices} functions.
 
 @DOCSTRING(num2cell)
 
 @DOCSTRING(mat2cell)
 
+@DOCSTRING(cellslices)
+
 @node Indexing Cell Arrays
 @subsection Indexing Cell Arrays
 
 As shown in @pxref{Basic Usage of Cell Arrays} elements can be
 extracted from cell arrays using the @samp{@{} and @samp{@}}
 operators.  If you want to extract or access subarrays which are still 
 cell arrays, you need to use the @samp{(} and @samp{)} operators.  The
 following example illustrates the difference:
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,16 @@
+2010-01-17  Thorsten Meyer  <thorsten.meyier@gmx.de>
+
+	* general/celldisp.m: Add example, add demo.
+
+	* general/structfun.m, miscellaneous/getfield.m,
+	miscellaneous/orderfields.m, miscellaneous/setfield.m,
+	miscellaneous/substruct.m: Update documentation string. 
+
 2010-01-16  David Bateman  <dbateman@free.fr>
 
 	* plot/__go_draw_axes__.m (next_marker):  New function to find a
 	new marker. Use it to support the "@" marker.
 	* plot/private/__pltopt__.m: Don't convert "@" marker ro "+";
 
 2010-01-15  David Bateman  <dbateman@free.fr>
 
diff --git a/scripts/general/celldisp.m b/scripts/general/celldisp.m
--- a/scripts/general/celldisp.m
+++ b/scripts/general/celldisp.m
@@ -15,17 +15,34 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} celldisp (@var{c}, @var{name})
 ## Recursively display the contents of a cell array.  By default the values
 ## are displayed with the name of the variable @var{c}.  However, this name
-## can be replaced with the variable @var{name}.
+## can be replaced with the variable @var{name}.  For example:
+## 
+## @example
+## @group
+## c = @{1, 2, @{31, 32@}@};
+## celldisp(c, "b")
+##      @result{}
+##         b@{1@} = 
+##          1
+##         b@{2@} = 
+##          2
+##         b@{3@}@{1@} = 
+##          31
+##         b@{3@}@{2@} = 
+##          32
+## @end group
+## @end example
+##
 ## @seealso{disp}
 ## @end deftypefn
 
 ## This is ugly, but seems to be what matlab does..
 
 function celldisp (c, name)
   if (nargin < 1 || nargin > 2)
     print_usage ();
@@ -55,8 +72,12 @@ function s = indices (dv, i)
     c = cell (size (dv));
     [c{:}] = ind2sub (dv, i);
     s = sprintf("%i,", c{:});
     s(end) = [];
   else
     s = sprintf("%i", i);
   endif
 endfunction
+
+%!demo
+%! c = {1, 2, {31, 32}};
+%! celldisp(c, "b") 
\ No newline at end of file
diff --git a/scripts/general/structfun.m b/scripts/general/structfun.m
--- a/scripts/general/structfun.m
+++ b/scripts/general/structfun.m
@@ -13,57 +13,64 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} structfun (@var{func}, @var{s})
-## @deftypefnx {Function File} {[@var{a}, @var{b}] =} structfun (@dots{})
+## @deftypefnx {Function File} {[@var{a}, @dots{}] =} structfun (@dots{})
 ## @deftypefnx {Function File} {} structfun (@dots{}, "ErrorHandler", @var{errfunc})
 ## @deftypefnx {Function File} {} structfun (@dots{}, "UniformOutput", @var{val})
 ## 
 ## Evaluate the function named @var{name} on the fields of the structure
 ## @var{s}.  The fields of @var{s} are passed to the function @var{func}
 ## individually.
 ##
 ## @code{structfun} accepts an arbitrary function @var{func} in the form of 
 ## an inline function, function handle, or the name of a function (in a 
 ## character string).  In the case of a character string argument, the 
 ## function must accept a single argument named @var{x}, and it must return 
 ## a string value.  If the function returns more than one argument, they are
 ## returned as separate output variables.
 ##
 ## If the parameter "UniformOutput" is set to true (the default), then the function
 ## must return a single element which will be concatenated into the
-## return value.  If "UniformOutput" is false, the outputs placed in a structure
+## return value.  If "UniformOutput" is false, the outputs are placed into a structure
 ## with the same fieldnames as the input structure.
 ## 
 ## @example
 ## @group
 ## s.name1 = "John Smith"; 
 ## s.name2 = "Jill Jones"; 
 ## structfun (@@(x) regexp (x, '(\w+)$', "matches")@{1@}, s, 
 ##            "UniformOutput", false)
+##     @result{}
+##    @{
+##      name1 = Smith
+##      name2 = Jones
+##    @} 
 ## @end group
 ## @end example
 ## 
-## Given the parameter "ErrorHandler", then @var{errfunc} defines a function to
+## Given the parameter "ErrorHandler", @var{errfunc} defines a function to
 ## call in case @var{func} generates an error.  The form of the function is
 ## 
 ## @example
 ## function [@dots{}] = errfunc (@var{se}, @dots{})
 ## @end example
 ## 
 ## where there is an additional input argument to @var{errfunc} relative to
 ## @var{func}, given by @var{se}.  This is a structure with the elements
 ## "identifier", "message" and "index", giving respectively the error
 ## identifier, the error message, and the index into the input arguments
-## of the element that caused the error.
+## of the element that caused the error.  For an example on how to use
+## an error handler, @pxref{doc-cellfun, @code{cellfun}}. 
+##
 ## @seealso{cellfun, arrayfun}
 ## @end deftypefn
 
 function varargout = structfun (fun, s, varargin);
   if (nargin < 2)
     print_usage ();
   endif
 
diff --git a/scripts/miscellaneous/getfield.m b/scripts/miscellaneous/getfield.m
--- a/scripts/miscellaneous/getfield.m
+++ b/scripts/miscellaneous/getfield.m
@@ -14,33 +14,35 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{v1}, @dots{}] =} getfield (@var{s}, @var{key}, @dots{}) 
-## Extract fields from a structure.  For example
+## Extract a field from a structure (or a nested structure).  For example
 ##
 ## @example
 ## @group
 ## ss(1,2).fd(3).b = 5;
 ## getfield (ss, @{1,2@}, "fd", @{3@}, "b")
-## @result{} ans = 5
+##      @result{} ans = 5
 ## @end group
 ## @end example
 ##
 ## Note that the function call in the previous example is equivalent to
 ## the expression
 ##
 ## @example
 ## @group
 ## i1 = @{1,2@}; i2 = "fd"; i3 = @{3@}; i4= "b";
 ## ss(i1@{:@}).(i2)(i3@{:@}).(i4)
+##      @result{} ans = 5
+## 
 ## @end group
 ## @end example
 ## @seealso{setfield, rmfield, isfield, isstruct, fieldnames, struct}
 ## @end deftypefn
 
 ## Author: Etienne Grossmann <etienne@cs.uky.edu>
 
 function obj = getfield (s, varargin)
diff --git a/scripts/miscellaneous/orderfields.m b/scripts/miscellaneous/orderfields.m
--- a/scripts/miscellaneous/orderfields.m
+++ b/scripts/miscellaneous/orderfields.m
@@ -12,25 +12,80 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {[@var{t}, @var{p}] =} orderfields (@var{s1}, @var{s2})
-## Return a struct with fields arranged alphabetically or as specified
-## by @var{s2} and a corresponding permutation vector.
+## @deftypefn {Function File} {[@var{t}, @var{p}] =} orderfields (@var{s1}[, @var{s2}])
+## Return a copy of @var{s1} with fields arranged alphabetically or
+## as specified by @var{s2}.
 ##
 ## Given one struct, arrange field names in @var{s1} alphabetically.
 ##
-## Given two structs, arrange field names in @var{s1} as they appear
-## in @var{s2}.  The second argument may also specify the order in
-## a permutation vector or a cell array of strings.
+## If the second argument is a struct, arrange field names in @var{s1}
+## as they appear in @var{s2}.  The second argument may also specify the
+## order in a permutation vector or a cell array of strings containing
+## the fieldnames of @var{s1} in the desired order.
+##
+## The optional second output argument @var{p} is assigned the permutation vector
+## which converts the original name order into the new name order.
+##
+## Examples:
+##
+## @example
+## @group
+## s = struct("d", 4, "b", 2, "a", 1, "c", 3);
+## t1 = orderfields(s)
+##      @result{} t1 = 
+##         @{
+##           a =  1
+##           b =  2
+##           c =  3
+##           d =  4
+##         @}
+## @end group
+## @group
+## t = struct("d", @{@}, "c", @{@}, "b", "a", @{@});
+## t2 = orderfields(s, t)
+##      @result{} t2 =
+##         @{
+##           d =  4
+##           c =  3
+##           b =  2
+##           a =  1
+##         @}
+## @end group
+## @group
+## t3 = orderfields(s, [3, 2, 4, 1]);
+##      @result{} t3 =
+##         @{
+##           a =  1
+##           b =  2
+##           c =  3
+##           d =  4
+##         @}
+## @end group
+## @group
+## [t4, p] = orderfields(s, @{"d", "c", "b", "a"@})
+##      @result{} t4 = @{
+##           d =  4
+##           c =  3
+##           b =  2
+##           a =  1
+##         @}
+##      p =
+##         1
+##         4
+##         2
+##         3
+## @end group
+## @end example
 ##
 ## @seealso{getfield, rmfield, isfield, isstruct, fieldnames, struct}
 ## @end deftypefn
 
 ## Author: Paul Kienzle <pkienzle@users.sf.net>
 ## Adapted-By: jwe
 
 function [t, p] = orderfields (s1, s2)
@@ -108,19 +163,20 @@ endfunction
 %! a = struct ("foo", {1, 2}, "bar", {3, 4});
 %! b = struct ("bar", 6, "foo", 5);
 %! c = struct ("bar", {7, 8}, "foo", 9);
 %!test
 %! a(2) = orderfields (b, a);
 %! assert (a(2).foo, 5)
 %! assert (a(2).bar, 6)
 %!test
-%! a(2) = orderfields (b, [2 1]);
+%! [a(2), p] = orderfields (b, [2 1]);
 %! assert (a(2).foo, 5)
 %! assert (a(2).bar, 6)
+%! assert (p, [2; 1]);
 %!test
 %! a(2) = orderfields (b, fieldnames (a));
 %! assert (a(2).foo, 5)
 %! assert (a(2).bar, 6)
 %!test
 %! a(1:2) = orderfields (c, fieldnames (a));
 %! assert (a(2).foo, 9)
 %! assert (a(2).bar, 8)
diff --git a/scripts/miscellaneous/setfield.m b/scripts/miscellaneous/setfield.m
--- a/scripts/miscellaneous/setfield.m
+++ b/scripts/miscellaneous/setfield.m
@@ -14,33 +14,34 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{k1}, @dots{}, @var{v1}] =} setfield (@var{s}, @var{k1}, @var{v1}, @dots{})
-## Set field members in a structure.
+## Set a field member in a (nested) structure array.  For example:
 ##
 ## @example
 ## @group
 ## oo(1,1).f0 = 1;
 ## oo = setfield (oo, @{1,2@}, "fd", @{3@}, "b", 6);
 ## oo(1,2).fd(3).b == 6
-## @result{} ans = 1
+##      @result{} ans = 1
 ## @end group
 ## @end example
 ##
-## Note that this function could be written
+## Note that the same result as in the above example could be achieved by:
 ##
 ## @example
 ## @group
 ## i1 = @{1,2@}; i2 = "fd"; i3 = @{3@}; i4 = "b";
-## oo(i1@{:@}).(i2)(i3@{:@}).(i4) == 6;
+## oo(i1@{:@}).(i2)(i3@{:@}).(i4) == 6
+##      @result{} ans = 1
 ## @end group
 ## @end example
 ## @seealso{getfield, rmfield, isfield, isstruct, fieldnames, struct}
 ## @end deftypefn
 
 ## Author:  Etienne Grossmann <etienne@cs.uky.edu>
 
 function obj = setfield (obj, varargin)
diff --git a/scripts/miscellaneous/substruct.m b/scripts/miscellaneous/substruct.m
--- a/scripts/miscellaneous/substruct.m
+++ b/scripts/miscellaneous/substruct.m
@@ -14,17 +14,37 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} substruct (@var{type}, @var{subs}, @dots{})
 ## Create a subscript structure for use with @code{subsref} or
-## @code{subsasgn}.
+## @code{subsasgn}. For example:
+##
+## @example
+## @group
+## idx = substruct("()", @{3, ":"@})
+##      @result{}
+##        idx =
+##        @{
+##          type = ()
+##          subs =
+##          @{
+##            [1,1] =  3
+##            [1,2] = :
+##          @}
+##        @}
+## x = [1, 2, 3; 4, 5, 6; 7, 8, 9];
+## subsref(x, idx)
+##      @result{} ans = 
+##         7  8  9
+## @end group
+## @end example
 ## @seealso{subsref, subsasgn}
 ## @end deftypefn
 
 ## Author:  jwe
 
 function retval = substruct (varargin)
 
   nargs = nargin;
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,17 @@
+2010-01-17  Thorsten Meyer  <thorsten.meyier@gmx.de>
+
+	* ov-cell.cc (Fstruct2cell): Add example, add test.
+	* DLD-FUNCTIONS/cellfun.cc (Fcellfun, Fnum2cell), ov-struct.cc
+	(Fisstruct): Fix docstring.
+	* DLD-FUNCTIONS/cellfun.cc (Fcellslices, Fisfield, Ffieldnames,
+	Frmfield): Add test.
+        * ov-struct.cc (Fcell2struct): Fix docstring, add test.
+
 2010-01-16  David Bateman  <dbateman@free.fr>
 
 	* graphics.h.in (line::properties, surface::properties,
 	patch::properties): Allow the use of a "@" marker.
 	(axes::properties): Add markerorder properties to set the
 	order of the marker styles for the "@" marker.
 
 2010-01-15  Jaroslav Hajek  <highegg@gmail.com>
diff --git a/src/DLD-FUNCTIONS/cellfun.cc b/src/DLD-FUNCTIONS/cellfun.cc
--- a/src/DLD-FUNCTIONS/cellfun.cc
+++ b/src/DLD-FUNCTIONS/cellfun.cc
@@ -225,17 +225,17 @@ make_col_helper (const octave_value& val
 
 DEFUN_DLD (cellfun, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} cellfun (@var{name}, @var{c})\n\
 @deftypefnx {Loadable Function} {} cellfun (\"size\", @var{c}, @var{k})\n\
 @deftypefnx {Loadable Function} {} cellfun (\"isclass\", @var{c}, @var{class})\n\
 @deftypefnx {Loadable Function} {} cellfun (@var{func}, @var{c})\n\
 @deftypefnx {Loadable Function} {} cellfun (@var{func}, @var{c}, @var{d})\n\
-@deftypefnx {Loadable Function} {[@var{a}, @var{b}] =} cellfun (@dots{})\n\
+@deftypefnx {Loadable Function} {[@var{a}, @dots{}] =} cellfun (@dots{})\n\
 @deftypefnx {Loadable Function} {} cellfun (@dots{}, 'ErrorHandler', @var{errfunc})\n\
 @deftypefnx {Loadable Function} {} cellfun (@dots{}, 'UniformOutput', @var{val})\n\
 \n\
 Evaluate the function named @var{name} on the elements of the cell array\n\
 @var{c}.  Elements in @var{c} are passed on to the named function\n\
 individually.  The function @var{name} can be one of the functions\n\
 \n\
 @table @code\n\
@@ -263,29 +263,47 @@ function (in a character string).  In th
 argument, the function must accept a single argument named @var{x}, and\n\
 it must return a string value.  The function can take one or more arguments,\n\
 with the inputs args given by @var{c}, @var{d}, etc.  Equally the function\n\
 can return one or more output arguments.  For example\n\
 \n\
 @example\n\
 @group\n\
 cellfun (@@atan2, @{1, 0@}, @{0, 1@})\n\
-@result{}ans = [1.57080   0.00000]\n\
+     @result{}ans = [1.57080   0.00000]\n\
 @end group\n\
 @end example\n\
 \n\
-Note that the default output argument is an array of the same size as the\n\
+The number of output arguments of @code{cellfun} matches the number of output\n\
+arguments of the function.  The outputs of the function will be collected into the\n\
+output arguments of @code{cellfun} like this:\n\
+\n\
+@example\n\
+@group\n\
+function [a, b] = twoouts (x)\n\
+  a = x;\n\
+  b = x*x;\n\
+endfunction\n\
+[aa, bb] = cellfun(@@twoouts, @{1, 2, 3@})\n\
+     @result{}\n\
+        aa = \n\
+           1 2 3\n\
+        bb =\n\
+           1 4 9\n\
+@end group\n\
+@end example\n\
+Note that per default the output argument(s) are arrays of the same size as the\n\
 input arguments.\n\
 Input arguments that are singleton (1x1) cells will be automatically expanded\n\
 to the size of the other arguments.\n\
 \n\
 If the parameter 'UniformOutput' is set to true (the default), then the function\n\
-must return a single element which will be concatenated into the\n\
-return value.  If 'UniformOutput' is false, the outputs are concatenated in\n\
-a cell array.  For example\n\
+must return scalars which will be concatenated into the\n\
+return array(s).  If 'UniformOutput' is false, the outputs are concatenated into\n\
+a cell array (or cell arrays).  For example\n\
 \n\
 @example\n\
 @group\n\
 cellfun (\"tolower(x)\", @{\"Foo\", \"Bar\", \"FooBar\"@},\n\
          \"UniformOutput\",false)\n\
 @result{} ans = @{\"foo\", \"bar\", \"foobar\"@}\n\
 @end group\n\
 @end example\n\
@@ -1079,17 +1097,41 @@ do_num2cell (const NDA& array, const Arr
 
 
 DEFUN_DLD (num2cell, args, ,
   "-*- texinfo -*-\n\
 @deftypefn  {Loadable Function} {@var{c} =} num2cell (@var{m})\n\
 @deftypefnx {Loadable Function} {@var{c} =} num2cell (@var{m}, @var{dim})\n\
 Convert the matrix @var{m} to a cell array.  If @var{dim} is defined, the\n\
 value @var{c} is of dimension 1 in this dimension and the elements of\n\
-@var{m} are placed in slices in @var{c}.\n\
+@var{m} are placed into @var{c} in slices.  For example:\n\
+\n\
+@example\n\
+@group\n\
+num2cell([1,2;3,4])\n\
+     @result{} ans =\n\
+        @{\n\
+          [1,1] =  1\n\
+          [2,1] =  3\n\
+          [1,2] =  2\n\
+          [2,2] =  4\n\
+        @}\n\
+num2cell([1,2;3,4],1)\n\
+     @result{} ans =\n\
+        @{\n\
+          [1,1] =\n\
+             1\n\
+             3\n\
+          [1,2] =\n\
+             2\n\
+             4\n\
+        @}\n\
+@end group\n\
+@end example\n\
+\n\
 @seealso{mat2cell}\n\
 @end deftypefn") 
 {
   int nargin =  args.length();
   octave_value retval;
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
@@ -1533,14 +1575,21 @@ If @var{X} is a matrix or array, indexin
             }
         }
     }
   else
     print_usage ();
 
   return retval;
 }
-	  
+
+/*
+%!test
+%! m = [1, 2, 3, 4; 5, 6, 7, 8; 9, 10, 11, 12];
+%! c = cellslices (m, [1, 2], [2, 3]);
+%! assert (c, {[1, 2; 5, 6; 9, 10], [2, 3; 6, 7; 10, 11]});
+*/
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/ov-cell.cc b/src/ov-cell.cc
--- a/src/ov-cell.cc
+++ b/src/ov-cell.cc
@@ -1334,17 +1334,40 @@ array @var{string}.\n\
 }
 
 DEFUN (struct2cell, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} struct2cell (@var{S})\n\
 Create a new cell array from the objects stored in the struct object.\n\
 If @var{f} is the number of fields in the structure, the resulting\n\
 cell array will have a dimension vector corresponding to\n\
-@code{[@var{F} size(@var{S})]}.\n\
+@code{[@var{F} size(@var{S})]}. For example:\n\
+\n\
+@example\n\
+@group\n\
+  s = struct('name', @{'Peter', 'Hannah', 'Robert'@}, 'age', @{23, 16, 3@});\n\
+  c = struct2cell(s)\n\
+     @result{} c = @{1x1x3 Cell Array@}\n\
+  c(1,1,:)(:)\n\
+     @result{} ans =\n\
+        @{\n\
+          [1,1] = Peter\n\
+          [2,1] = Hannah\n\
+          [3,1] = Robert\n\
+        @}\n\
+  c(2,1,:)(:)\n\
+     @result{} ans =\n\
+        @{\n\
+          [1,1] = 23\n\
+          [2,1] = 16\n\
+          [3,1] = 3\n\
+        @}\n\
+@end group\n\
+@end example\n\
+\n\
 @seealso{cell2struct, fieldnames}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin == 1)
@@ -1397,16 +1420,28 @@ cell array will have a dimension vector 
 	error ("struct2cell: expecting argument to be a cell array");
     }
   else
     print_usage ();
 
   return retval;
 }
 
+/*
+%!test
+%!  keys = cellstr (char (floor (rand (11,10)*24+65)))';
+%!  vals = cellfun(@(x) mat2cell(rand (19,1), ones (19,1), 1), ...
+%!           mat2cell([1:11]', ones(11,1), 1), "uniformoutput", false)';
+%!  s = struct ([keys; vals]{:});
+%!  t = cell2struct ([vals{:}], keys, 2);
+%!  assert (s, t);
+%!  assert (struct2cell (s), [vals{:}]');
+%!  assert (fieldnames (s), keys');
+*/
+
 mxArray *
 octave_cell::as_mxArray (void) const
 {
   mxArray *retval = new mxArray (dims ());
 
   mxArray **elts = static_cast<mxArray **> (retval->get_data ());
 
   mwSize nel = numel ();
diff --git a/src/ov-struct.cc b/src/ov-struct.cc
--- a/src/ov-struct.cc
+++ b/src/ov-struct.cc
@@ -832,17 +832,18 @@ If the argument is an object, return the
     }
 
   return octave_value (map);
 }
 
 DEFUN (isstruct, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} isstruct (@var{expr})\n\
-Return 1 if the value of the expression @var{expr} is a structure.\n\
+Return 1 if the value of the expression @var{expr} is a structure\n\
+(or a structure array).\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 1)
     retval = args(0).is_map ();
   else
     print_usage ();
@@ -881,16 +882,23 @@ argument that is not a structure.\n\
 	gripe_wrong_type_arg ("fieldnames", args(0));
     }
   else
     print_usage ();
 
   return retval;
 }
 
+/*
+%!# test preservation of fieldname order
+%!test
+%!  x(3).d=1; x(2).a=2; x(1).b=3; x(2).c=3;
+%!  assert(fieldnames(x), {"d"; "a"; "b"; "c"});
+*/
+
 DEFUN (isfield, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} isfield (@var{expr}, @var{name})\n\
 Return true if the expression @var{expr} is a structure and it includes an\n\
 element named @var{name}.  The first argument must be a structure and\n\
 the second must be a string.\n\
 @end deftypefn")
 {
@@ -935,16 +943,28 @@ Return the number of fields of the struc
       retval = static_cast<double> (args(0).nfields ());
     }
   else
     print_usage ();
 
   return retval;
 }
 
+/*
+%!# test isfield
+%!test
+%!  x(3).d=1; x(2).a=2; x(1).b=3; x(2).c=3;
+%!  assert (isfield (x, "b"));
+%!assert( isfield( struct("a", "1"), "a"));
+%!assert( isfield( {1}, "c"), logical (0));
+%!assert( isfield( struct("a", "1"), 10), logical (0));
+%!assert( isfield( struct("a", "b"), "a "), logical (0));
+
+*/
+
 // Check that the dimensions of the input arguments are correct.
 
 static bool
 cell2struct_check_args (const dim_vector& c_dv, const dim_vector& f_dv,
 			bool is_cell, int dim)
 {
   bool retval = true;
 
@@ -1009,21 +1029,21 @@ must match the number of elements in @va
 that is @code{numel (@var{fields}) == size (@var{cell}, @var{dim})}.\n\
 \n\
 @example\n\
 @group\n\
 A = cell2struct (@{'Peter', 'Hannah', 'Robert';\n\
                    185, 170, 168@},\n\
                  @{'Name','Height'@}, 1);\n\
 A(1)\n\
-@result{} ans =\n\
-      @{\n\
-        Height = 185\n\
-        Name   = Peter\n\
-      @}\n\
+     @result{} ans =\n\
+        @{\n\
+          Name   = Peter\n\
+          Height = 185\n\
+        @}\n\
 \n\
 @end group\n\
 @end example\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 3)
@@ -1182,24 +1202,37 @@ A(1)\n\
 	error ("cell2struct: expecting first argument to be a cell array");
     }
   else
     print_usage ();
 
   return retval;
 }
 
+/*
+%!# test cell2struct versus struct2cell
+%!test
+%!  keys = cellstr (char (floor (rand (100,10)*24+65)))';
+%!  vals = mat2cell(rand (100,1), ones (100,1), 1)';
+%!  s = struct ([keys; vals]{:});
+%!  t = cell2struct (vals, keys, 2);
+%!  assert (s, t);
+%!  assert (struct2cell (s), vals');
+%!  assert (fieldnames (s), keys');
+*/
+
+
 // So we can call Fcellstr directly.
 extern octave_value_list Fcellstr (const octave_value_list& args, int);
 
 DEFUN (rmfield, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} rmfield (@var{s}, @var{f})\n\
-Remove field @var{f} from the structure @var{s}.  If @var{f} is a\n\
-cell array of character strings or a character array, remove the\n\
+Return a copy of the structure (array) @var{s} with the field @var{f} removed.\n\
+If @var{f} is a cell array of strings or a character array, remove the\n\
 named fields.\n\
 @seealso{cellstr, iscellstr, setfield}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
@@ -1233,16 +1266,25 @@ named fields.\n\
 	}
     }
   else
     print_usage ();
 
   return retval;
 }
 
+/*
+%!# test rmfield
+%!test
+%!  x(3).d=1; x(2).a=2; x(1).b=3; x(2).c=3; x(6).f="abc123";
+%!  y = rmfield (x, {"a", "f"});
+%!  assert (fieldnames (y), {"d"; "b"; "c"});
+%!  assert (size (y), [1, 6]);
+*/
+
 bool
 octave_struct::save_ascii (std::ostream& os)
 {
   Octave_map m = map_value ();
 
   octave_idx_type nf = m.nfields ();
 
   const dim_vector dv = dims ();
