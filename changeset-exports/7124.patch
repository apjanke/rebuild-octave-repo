# HG changeset patch
# User jwe
# Date 1194484184 0
#      Thu Nov 08 01:09:44 2007 +0000
# Node ID d07cb867891b6313a292444eb69f3667287b9318
# Parent  0b58070191725c94539ee8a60d8415ea08758d65
[project @ 2007-11-08 01:09:44 by jwe]

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -2493,20 +2493,22 @@ ComplexMatrix::lssolve (const ComplexMat
       Array<Complex> work (1);
 
       // FIXME: Can SMLSIZ be other than 25?
       octave_idx_type smlsiz = 25;
 
       // We compute the size of rwork and iwork because ZGELSD in
       // older versions of LAPACK does not return them on a query
       // call.
+      double dminmn = static_cast<double> (minmn);
+      double dsmlsizp1 = static_cast<double> (smlsiz+1);
 #if defined (HAVE_LOG2)
-      double tmp = log2 (minmn) / static_cast<double> (smlsiz+1) + 1;
+      double tmp = log2 (dminmn) / dsmlsizp1 + 1;
 #else
-      double tmp = log (minmn) / static_cast<double> (smlsiz+1) / log (2) + 1;
+      double tmp = log (dminmn) / dsmlsizp1 / log (2.0) + 1;
 #endif
       octave_idx_type nlvl = static_cast<int> (tmp);
       if (nlvl < 0)
 	nlvl = 0;
 
       octave_idx_type lrwork = minmn*(10 + 2*smlsiz + 8*nlvl)
 	+ 3*smlsiz*nrhs + (smlsiz+1)*(smlsiz+1);
       if (lrwork < 1)
@@ -2663,20 +2665,22 @@ ComplexMatrix::lssolve (const ComplexCol
       Array<Complex> work (1);
 
       // FIXME: Can SMLSIZ be other than 25?
       octave_idx_type smlsiz = 25;
 
       // We compute the size of rwork and iwork because ZGELSD in
       // older versions of LAPACK does not return them on a query
       // call.
+      double dminmn = static_cast<double> (minmn);
+      double dsmlsizp1 = static_cast<double> (smlsiz+1);
 #if defined (HAVE_LOG2)
-      double tmp = log2 (minmn) / static_cast<double> (smlsiz+1) + 1;
+      double tmp = log2 (dminmn) / dsmlsizp1 + 1;
 #else
-      double tmp = log (minmn) / static_cast<double> (smlsiz+1) / log (2) + 1;
+      double tmp = log (dminmn) / dsmlsizp1 / log (2.0) + 1;
 #endif
       octave_idx_type nlvl = static_cast<int> (tmp);
       if (nlvl < 0)
 	nlvl = 0;
 
       octave_idx_type lrwork = minmn*(10 + 2*smlsiz + 8*nlvl)
 	+ 3*smlsiz*nrhs + (smlsiz+1)*(smlsiz+1);
       if (lrwork < 1)
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2007-11-07  Michael Goffioul <michael.goffioul@gmail.com>
+
+	* dMatrix.cc, CMatrix.cc: Help MSVC compiler to resolve
+	ambiguities related to math functions (in C++ mode).
+
 2007-11-06  David Bateman  <dbateman@free.fr>
 
 	* intNDArray.cc (intNDArray<T> intNDArray<T>::sum (int) const):
 	New method.
 	* intNDarray.h (intNDArray sum (int) const): Declare it.
 	* boolNDArray.cc (boolNDArray boolNDArray::sum (int) const):
 	New method.
 	* boolNDarray.cc (boolNDArray sum (int) const): Declare it.
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -2103,20 +2103,22 @@ Matrix::lssolve (const Matrix& b, octave
 
       Array<double> work (1);
 
       // FIXME: Can SMLSIZ be other than 25?
       octave_idx_type smlsiz = 25;
 
       // We compute the size of iwork because DGELSD in older versions
       // of LAPACK does not return it on a query call.
+      double dminmn = static_cast<double> (minmn);
+      double dsmlsizp1 = static_cast<double> (smlsiz+1);
 #if defined (HAVE_LOG2)
-      double tmp = log2 (minmn) / static_cast<double> (smlsiz+1) + 1;
+      double tmp = log2 (dminmn) / dsmlsizp1 + 1;
 #else
-      double tmp = log (minmn) / static_cast<double> (smlsiz+1) / log (2) + 1;
+      double tmp = log (dminmn) / dsmlsizp1 / log (2.0) + 1;
 #endif
       octave_idx_type nlvl = static_cast<int> (tmp);
       if (nlvl < 0)
 	nlvl = 0;
 
       octave_idx_type liwork = 3 * minmn * nlvl + 11 * minmn;
       if (liwork < 1)
 	liwork = 1;
@@ -2266,20 +2268,22 @@ Matrix::lssolve (const ColumnVector& b, 
 
       Array<double> work (1);
 
       // FIXME: Can SMLSIZ be other than 25?
       octave_idx_type smlsiz = 25;
 
       // We compute the size of iwork because DGELSD in older versions
       // of LAPACK does not return it on a query call.
+      double dminmn = static_cast<double> (minmn);
+      double dsmlsizp1 = static_cast<double> (smlsiz+1);
 #if defined (HAVE_LOG2)
-      double tmp = log2 (minmn) / static_cast<double> (smlsiz+1) + 1;
+      double tmp = log2 (dminmn) / dsmlsizp1 + 1;
 #else
-      double tmp = log (minmn) / static_cast<double> (smlsiz+1) / log (2) + 1;
+      double tmp = log (dminmn) / dsmlsizp1 / log (2.0) + 1;
 #endif
       octave_idx_type nlvl = static_cast<int> (tmp);
       if (nlvl < 0)
 	nlvl = 0;
 
       octave_idx_type liwork = 3 * minmn * nlvl + 11 * minmn;
       if (liwork < 1)
 	liwork = 1;
