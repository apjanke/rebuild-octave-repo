# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1235894877 -3600
#      Sun Mar 01 09:07:57 2009 +0100
# Node ID d077c590eb889f6820821d722bb7639380b196fc
# Parent  ae51d068bbd5f1c2e61564ec959f13a0ba4ae2f0
indicate diag & perm matrices on output

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,19 @@
+2009-03-01  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov-perm.cc (octave_perm_matrix::print_raw): Call
+	octave_print_internal.
+	(octave_perm_matrix::print_raw): Call print_raw.
+	* pr-output.cc (octave_print_internal (...,const DiagMatrix&,...)):
+	Indicate diagonal matrix.
+	(octave_print_internal (...,const ComplexDiagMatrix&,...)): Ditto.
+	(octave_print_internal (...,const PermMatrix&,...)): New function.
+	* pr-output.h: Declare it.
+
 2009-02-27  Jaroslav Hajek  <highegg@gmail.com>
 
 	* OPERATORS/op-dms-template.cc (gripe_if_zero): New template static
 	function.
 	(dmsdiv, sdmldiv): Call it.
 
 2009-02-26  John W. Eaton  <jwe@octave.org>
 
diff --git a/src/ov-perm.cc b/src/ov-perm.cc
--- a/src/ov-perm.cc
+++ b/src/ov-perm.cc
@@ -28,16 +28,17 @@ along with Octave; see the file COPYING.
 
 #include "ov-perm.h"
 #include "ov-flt-perm.h"
 #include "ov-re-mat.h"
 #include "ov-scalar.h"
 #include "error.h"
 #include "gripes.h"
 #include "ops.h"
+#include "pr-output.h"
 
 #include "ls-oct-ascii.h"
 
 octave_value
 octave_perm_matrix::subsref (const std::string& type,
                              const std::list<octave_value_list>& idx)
 {
   octave_value retval;
@@ -347,17 +348,18 @@ octave_perm_matrix::load_binary (std::is
   matrix = PermMatrix (m, colp);
   return true;
 }
 
 void
 octave_perm_matrix::print_raw (std::ostream& os,
                                bool pr_as_read_syntax) const
 {
-  return to_dense ().print_raw (os, pr_as_read_syntax);
+  return octave_print_internal (os, matrix, pr_as_read_syntax,
+                                current_print_indent_level ());
 }
 
 mxArray *
 octave_perm_matrix::as_mxArray (void) const
 {
   return to_dense ().as_mxArray ();
 }
 
@@ -367,17 +369,18 @@ octave_perm_matrix::print_as_scalar (voi
   dim_vector dv = dims ();
 
   return (dv.all_ones () || dv.any_zero ());
 }
 
 void
 octave_perm_matrix::print (std::ostream& os, bool pr_as_read_syntax) const
 {
-  to_dense ().print (os, pr_as_read_syntax);
+  print_raw (os, pr_as_read_syntax);
+  newline (os);
 }
 
 int
 octave_perm_matrix::write (octave_stream& os, int block_size,
                                 oct_data_conv::data_type output_type, int skip,
                                 oct_mach_info::float_format flt_fmt) const
 { 
   return to_dense ().write (os, block_size, output_type, skip, flt_fmt); 
diff --git a/src/pr-output.cc b/src/pr-output.cc
--- a/src/pr-output.cc
+++ b/src/pr-output.cc
@@ -1788,16 +1788,17 @@ octave_print_internal (std::ostream& os,
                   os << " ]";
               else
                 os << " ...\n";
             }
           os << ")";
 	}
       else
 	{
+          os << "Diagonal Matrix\n\n";
 	  pr_scale_header (os, scale);
 
           // kluge. Get the true width of a number.
           int zero_fw;
 
             { 
               std::ostringstream tmp_oss;
               pr_float (tmp_oss, 0.0, fw, scale);
@@ -2190,16 +2191,17 @@ octave_print_internal (std::ostream& os,
                   os << " ]";
               else
                 os << " ...\n";
             }
           os << ")";
 	}
       else
 	{
+          os << "Diagonal Matrix\n\n";
 	  pr_scale_header (os, scale);
 
           // kluge. Get the true width of a number.
           int zero_fw;
 
             { 
               std::ostringstream tmp_oss;
               pr_complex (tmp_oss, Complex (0.0), r_fw, i_fw, scale);
@@ -2233,16 +2235,149 @@ octave_print_internal (std::ostream& os,
 		    os << "\n";
 		}
 	    }
 	}
     }
 }
 
 void
+octave_print_internal (std::ostream& os, const PermMatrix& m,
+		       bool pr_as_read_syntax, int extra_indent)
+{
+  octave_idx_type nr = m.rows ();
+  octave_idx_type nc = m.columns ();
+
+  if (nr == 0 || nc == 0)
+    print_empty_matrix (os, nr, nc, pr_as_read_syntax);
+  else if (plus_format && ! pr_as_read_syntax)
+    {
+      for (octave_idx_type i = 0; i < nr; i++)
+	{
+	  for (octave_idx_type j = 0; j < nc; j++)
+	    {
+	      OCTAVE_QUIT;
+
+	      pr_plus_format (os, m(i,j));
+	    }
+
+	  if (i < nr - 1)
+	    os << "\n";
+	}
+    }
+  else
+    {
+      int fw = 2;
+      double scale = 1.0;
+      int column_width = fw + 2;
+      octave_idx_type total_width = nc * column_width;
+      octave_idx_type max_width = command_editor::terminal_cols ();
+
+      if (pr_as_read_syntax)
+	max_width -= 4;
+      else
+	max_width -= extra_indent;
+
+      if (max_width < 0)
+	max_width = 0;
+
+      if (free_format)
+	{
+	  if (pr_as_read_syntax)
+	    os << "[\n";
+
+	  os << Matrix (m);
+
+	  if (pr_as_read_syntax)
+	    os << "]";
+
+	  return;
+	}
+
+      octave_idx_type inc = nc;
+      if (total_width > max_width && Vsplit_long_rows)
+	{
+	  inc = max_width / column_width;
+	  if (inc == 0)
+	    inc++;
+	}
+
+      if (pr_as_read_syntax)
+        {
+          Array<octave_idx_type> pvec = m.pvec ();
+          bool colp = m.is_col_perm ();
+
+          os << "eye (";
+          if (colp) os << ":, ";
+
+          octave_idx_type col = 0;
+          while (col < nc)
+            {
+              octave_idx_type lim = col + inc < nc ? col + inc : nc;
+
+              for (octave_idx_type j = col; j < lim; j++)
+                {
+                  OCTAVE_QUIT;
+
+                  if (j == 0)
+                    os << "[ ";
+                  else
+                    {
+                      if (j > col && j < lim)
+                        os << ", ";
+                      else
+                        os << "  ";
+                    }
+
+                  os << pvec (j);
+                }
+
+              col += inc;
+
+              if (col >= nc)
+                  os << " ]";
+              else
+                os << " ...\n";
+            }
+          if (! colp) os << ", :";
+          os << ")";
+	}
+      else
+	{
+          os << "Permutation Matrix\n\n";
+
+	  for (octave_idx_type col = 0; col < nc; col += inc)
+	    {
+	      octave_idx_type lim = col + inc < nc ? col + inc : nc;
+
+	      pr_col_num_header (os, total_width, max_width, lim, col,
+				 extra_indent);
+
+	      for (octave_idx_type i = 0; i < nr; i++)
+		{
+		  os << std::setw (extra_indent) << "";
+
+		  for (octave_idx_type j = col; j < lim; j++)
+		    {
+		      OCTAVE_QUIT;
+
+		      os << "  ";
+
+                      os << std::setw (fw) << m(i,j);
+		    }
+
+		  if (i < nr - 1)
+		    os << "\n";
+		}
+	    }
+	}
+    }
+}
+
+void
 octave_print_internal (std::ostream& os, const ComplexNDArray& nda,
 		       bool pr_as_read_syntax, int extra_indent)
 {
   switch (nda.ndims ())
     {
     case 1:
     case 2:
       octave_print_internal (os, nda.matrix_value (),
diff --git a/src/pr-output.h b/src/pr-output.h
--- a/src/pr-output.h
+++ b/src/pr-output.h
@@ -26,27 +26,32 @@ along with Octave; see the file COPYING.
 
 #include <iostream>
 
 #include "oct-cmplx.h"
 
 template <typename T> class ArrayN;
 class ComplexMatrix;
 class FloatComplexMatrix;
+class ComplexDiagMatrix;
+class FloatComplexDiagMatrix;
 class ComplexNDArray;
 class FloatComplexNDArray;
 class Matrix;
 class FloatMatrix;
+class DiagMatrix;
+class FloatDiagMatrix;
 class NDArray;
 class FloatNDArray;
 class Range;
 class boolMatrix;
 class boolNDArray;
 class charMatrix;
 class charNDArray;
+class PermMatrix;
 class Cell;
 
 #include "intNDArray.h"
 #include "oct-inttypes.h"
 
 
 extern OCTINTERP_API void
 octave_print_internal (std::ostream& os, bool d,
@@ -124,16 +129,21 @@ octave_print_internal (std::ostream& os,
 		       int extra_indent = 0);
 
 extern OCTINTERP_API void
 octave_print_internal (std::ostream& os, const FloatComplexNDArray& nda,
 		       bool pr_as_read_syntax = false,
 		       int extra_indent = 0);
 
 extern OCTINTERP_API void
+octave_print_internal (std::ostream& os, const PermMatrix& m,
+		       bool pr_as_read_syntax = false,
+		       int extra_indent = 0);
+
+extern OCTINTERP_API void
 octave_print_internal (std::ostream& os, const Range& r,
 		       bool pr_as_read_syntax = false,
 		       int extra_indent = 0);
 
 extern OCTINTERP_API void
 octave_print_internal (std::ostream& os, const boolMatrix& m,
 		       bool pr_as_read_syntax = false,
 		       int extra_indent = 0);
