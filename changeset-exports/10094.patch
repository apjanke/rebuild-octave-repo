# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1263380414 18000
#      Wed Jan 13 06:00:14 2010 -0500
# Node ID ab1101011a6da947247697d4eb31d9ff800b81d0
# Parent  d90736774da2e51e176b62c870e2f57b94b2d6b1
lu.cc: avoid test failures if HAVE_QRUPDATE_LUU is not defined

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2010-01-13  John W. Eaton  <jwe@octave.org>
+
+	* DLD-FUNCTIONS/lu.cc: Avoid test failures if HAVE_QRUPDATE_LUU is
+	not defined.
+
 2010-01-12  David Bateman  <dbateman@free.fr>
 
 	* graphics.h.in (patch::properties): Add "flat" value to
 	markeredgecolor and  markerfacecolor properties.
 
 2010-01-12  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-base.h (builtin_type_t): New enum constants: btyp_cell,
diff --git a/src/DLD-FUNCTIONS/lu.cc b/src/DLD-FUNCTIONS/lu.cc
--- a/src/DLD-FUNCTIONS/lu.cc
+++ b/src/DLD-FUNCTIONS/lu.cc
@@ -790,66 +790,66 @@ the factorization from scratch.\n\
 %!      0.69821 + 0.38844i;
 %!      0.74871 + 0.25821i ];
 %!
 %! vc = [0.85839 + 0.29468i;
 %!      0.20820 + 0.93090i;
 %!      0.86184 + 0.34689i ];
 %!
 
-%!test
+%!testif HAVE_QRUPDATE_LUU
 %! [L,U,P] = lu(A);
 %! [L,U] = luupdate(L,U,P*u,v);
 %! assert(norm(vec(tril(L)-L),Inf) == 0)
 %! assert(norm(vec(triu(U)-U),Inf) == 0)
 %! assert(norm(vec(P'*L*U - A - u*v.'),Inf) < norm(A)*1e1*eps)
 %! 
-%!test
+%!testif HAVE_QRUPDATE_LUU
 %! [L,U,P] = lu(Ac);
 %! [L,U] = luupdate(L,U,P*uc,vc);
 %! assert(norm(vec(tril(L)-L),Inf) == 0)
 %! assert(norm(vec(triu(U)-U),Inf) == 0)
 %! assert(norm(vec(P'*L*U - Ac - uc*vc.'),Inf) < norm(Ac)*1e1*eps)
 
-%!test
+%!testif HAVE_QRUPDATE_LUU
 %! [L,U,P] = lu(single(A));
 %! [L,U] = luupdate(L,U,P*single(u),single(v));
 %! assert(norm(vec(tril(L)-L),Inf) == 0)
 %! assert(norm(vec(triu(U)-U),Inf) == 0)
 %! assert(norm(vec(P'*L*U - single(A) - single(u)*single(v).'),Inf) < norm(single(A))*1e1*eps('single'))
 %! 
-%!test
+%!testif HAVE_QRUPDATE_LUU
 %! [L,U,P] = lu(single(Ac));
 %! [L,U] = luupdate(L,U,P*single(uc),single(vc));
 %! assert(norm(vec(tril(L)-L),Inf) == 0)
 %! assert(norm(vec(triu(U)-U),Inf) == 0)
 %! assert(norm(vec(P'*L*U - single(Ac) - single(uc)*single(vc).'),Inf) < norm(single(Ac))*1e1*eps('single'))
 
-%!test
+%!testif HAVE_QRUPDATE_LUU
 %! [L,U,P] = lu(A);
 %! [L,U,P] = luupdate(L,U,P,u,v);
 %! assert(norm(vec(tril(L)-L),Inf) == 0)
 %! assert(norm(vec(triu(U)-U),Inf) == 0)
 %! assert(norm(vec(P'*L*U - A - u*v.'),Inf) < norm(A)*1e1*eps)
 %! 
-%!test
+%!testif HAVE_QRUPDATE_LUU
 %! [L,U,P] = lu(Ac);
 %! [L,U,P] = luupdate(L,U,P,uc,vc);
 %! assert(norm(vec(tril(L)-L),Inf) == 0)
 %! assert(norm(vec(triu(U)-U),Inf) == 0)
 %! assert(norm(vec(P'*L*U - Ac - uc*vc.'),Inf) < norm(Ac)*1e1*eps)
 
-%!test
+%!testif HAVE_QRUPDATE_LUU
 %! [L,U,P] = lu(single(A));
 %! [L,U,P] = luupdate(L,U,P,single(u),single(v));
 %! assert(norm(vec(tril(L)-L),Inf) == 0)
 %! assert(norm(vec(triu(U)-U),Inf) == 0)
 %! assert(norm(vec(P'*L*U - single(A) - single(u)*single(v).'),Inf) < norm(single(A))*1e1*eps('single'))
 %! 
-%!test
+%!testif HAVE_QRUPDATE_LUU
 %! [L,U,P] = lu(single(Ac));
 %! [L,U,P] = luupdate(L,U,P,single(uc),single(vc));
 %! assert(norm(vec(tril(L)-L),Inf) == 0)
 %! assert(norm(vec(triu(U)-U),Inf) == 0)
 %! assert(norm(vec(P'*L*U - single(Ac) - single(uc)*single(vc).'),Inf) < norm(single(Ac))*1e1*eps('single'))
 */
 
 /*
