# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1295324287 28800
#      Mon Jan 17 20:18:07 2011 -0800
# Node ID 1811f4f8b3b5073aeb32e9022328630712aedd8b
# Parent  1140bd9f9b213f76f801ffc6085fe57ed4346a6a
Rename cquad to quadcc and add to documentation.

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,12 @@
+2010-01-17  Rik  <octave@nomad.inbox5.com>
+
+	* NEWS: Add quadcc to list of new functions added.
+
 2011-01-17  John W. Eaton  <jwe@octave.org>
 
 	* mkoctfile.cc.in (main): Add + missing from previous change.
 
 2011-01-15  John W. Eaton  <jwe@octave.org>
 
 	* configure.ac (AC_INIT): Version is now 3.3.54.
 	(OCTAVE_API_VERSION_NUMBER): Now 42.
diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -57,31 +57,31 @@ Summary of important user-visible change
       assert (2*linspace (1, 5, 5), 2*(1:5))
       assert (zeros (0, 0), [])
       assert (2*ones (1, 5), (2) (ones (1,5)))
 
  ** The behavior of library functions `ismatrix', `issquare', and
     `issymmetric' has been changed for better consistency.
     
     * The `ismatrix' function now returns true for all numeric,
-      logical and character 2d or Nd matrices.  Previously, `ismatrix' 
+      logical and character 2-D or N-D matrices.  Previously, `ismatrix' 
       returned false if the first or second dimension was zero.
       Hence, `ismatrix ([])' was false, 
       while `ismatrix (zeros (1,2,0))' was true.
 
     * The `issquare' function now returns a logical scalar, and is
       equivalent to the expression
 
         ismatrix (x) && ndims (x) == 2 && rows (x) == columns (x)
 
       The dimension is no longer returned.  As a result, `issquare ([])'
       now yields true.
     
     * The `issymmetric' function now checks for symmetry instead of
-      hermitianness.  For the latter, ishermitian was created.  Also,
+      Hermitianness.  For the latter, ishermitian was created.  Also,
       logical scalar is returned rather than the dimension, so
       `issymmetric ([])' is now true.
       
  ** Function handles are now aware of overloaded functions.  If a
     function is overloaded, the handle determines at the time of its
     reference which function to call.  A non-overloaded version does not
     need to exist.
 
@@ -308,25 +308,25 @@ Summary of important user-visible change
        format short eng
        format long eng
 
      Both display numbers in engineering notation, i.e., mantissa +
      exponent where the exponent is a multiple of 3.
 
   ** The following functions are new in Octave 3.4:
 
-       accumdim    erfcx        nfields      pqpnonneg  uigetfile  
-       bitpack     fileread     nth_element  randi      uiputfile   
-       bitunpack   fminbnd      onCleanup    repelems   uimenu
-       blkmm       fskipl       pbaspect     reset      whitebg
-       cbrt        ifelse       pie3         rsf2csf     
-       curl        ishermitian  powerset     saveas     
-       chop        isindex      ppder        strread         
-       daspect     luupdate     ppint        textread         
-       divergence  merge        ppjumps      uigetdir
+       accumdim    erfcx        nfields      pqpnonneg  uigetdir 
+       bitpack     fileread     nth_element  quadcc     uigetfile  
+       bitunpack   fminbnd      onCleanup    randi      uiputfile    
+       blkmm       fskipl       pbaspect     repelems   uimenu  
+       cbrt        ifelse       pie3         reset      whitebg
+       curl        ishermitian  powerset     rsf2csf    
+       chop        isindex      ppder        saveas          
+       daspect     luupdate     ppint        strread          
+       divergence  merge        ppjumps      textread 
 
   ** Using the image function to view images with external programs such
      as display, xv, and xloadimage is no longer supported.  The
      image_viewer function has also been removed.
 
   ** The behavior of struct assignments to non-struct values has been
      changed.  Previously, it was possible to overwrite an arbitrary
      value:
diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,12 @@
+2011-01-17  Rik  <octave@nomad.inbox5.com>
+
+	* interpreter/quad.txi: Add quadcc to documentation.
+
 2011-01-15  Rik  <octave@nomad.inbox5.com>
 
 	* interpreter/expr.txi: Add merge/ifelse function to documentation.
 
 2011-01-15  Rik  <octave@nomad.inbox5.com>
 
 	* interpreter/func.txi, interpreter/intro.txi: Eliminate
 	@deffn macros.
diff --git a/doc/interpreter/quad.txi b/doc/interpreter/quad.txi
--- a/doc/interpreter/quad.txi
+++ b/doc/interpreter/quad.txi
@@ -49,16 +49,19 @@ Numerical integration based on Gaussian 
 Numerical integration using an adaptive Lobatto rule.
 
 @item quadgk
 Numerical integration using an adaptive Gauss-Konrod rule.
 
 @item quadv
 Numerical integration using an adaptive vectorized Simpson's rule.
 
+@item quadcc
+Numerical integration using adaptive Clenshaw-Curtis rules.
+
 @item trapz
 Numerical integration using the trapezoidal method.
 @end table
 
 @noindent
 Besides these functions Octave also allows you to perform cumulative
 numerical integration using the trapezoidal method through the
 @code{cumtrapz} function.
@@ -119,16 +122,18 @@ is reasonably accurate (to see why, exam
 if you move the lower bound to 0.1, then 0.01, then 0.001, etc.).
 
 @DOCSTRING(quadl)
 
 @DOCSTRING(quadgk)
 
 @DOCSTRING(quadv)
 
+@DOCSTRING(quadcc)
+
 @DOCSTRING(trapz)
 
 @DOCSTRING(cumtrapz)
 
 @node Orthogonal Collocation
 @section Orthogonal Collocation
 
 @DOCSTRING(colloc)
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,14 @@
+2011-01-17  Rik  <octave@nomad.inbox5.com>
+
+	* general/dblquad.m, general/quadgk.m, general/quadl.m,
+	general/quadv.m, general/triplequad.m: Improve docstring with seealso
+	links to quadcc.
+
 2011-01-17  John W. Eaton  <jwe@octave.org>
 
 	* miscellaneous/isdeployed.m: New function.
 	* miscellaneous/module.mk (miscellaneous_FCN_FILES): Add it to
 	the list.  Bug #32151.
 
 2011-01-17  John W. Eaton  <jwe@octave.org>
 
diff --git a/scripts/general/dblquad.m b/scripts/general/dblquad.m
--- a/scripts/general/dblquad.m
+++ b/scripts/general/dblquad.m
@@ -24,17 +24,17 @@
 ## @var{yb}]}.  The function @var{f} must accept a vector @var{x} and a
 ## scalar @var{y}, and return a vector of the same length as @var{x}. 
 ##
 ## If defined, @var{tol} defines the absolute tolerance to which to
 ## which to integrate each sub-integral.
 ##
 ## Additional arguments, are passed directly to @var{f}.  To use the default
 ## value for @var{tol} one may pass an empty matrix.
-## @seealso{triplequad, quad, quadv, quadl, quadgk, trapz}
+## @seealso{triplequad,quad,quadv,quadl,quadgk,quadcc,trapz}
 ## @end deftypefn
 
 function q = dblquad(f, xa, xb, ya, yb, tol, quadf, varargin) 
   if (nargin < 5)
     print_usage ();
   endif
   if (nargin < 6 || isempty (tol))
     tol = 1e-6; 
diff --git a/scripts/general/quadgk.m b/scripts/general/quadgk.m
--- a/scripts/general/quadgk.m
+++ b/scripts/general/quadgk.m
@@ -107,17 +107,17 @@
 ## @noindent
 ## integrates @code{log (z)} along the square defined by @code{[1+1i,
 ##  1-1i, -1-1i, -1+1i]}
 ##
 ## If two output arguments are requested, then @var{err} returns the
 ## approximate bounds on the error in the integral @code{abs (@var{q} -
 ## @var{i})}, where @var{i} is the exact value of the integral.
 ##
-## @seealso{triplequad, dblquad, quad, quadl, quadv, trapz}
+## @seealso{quad,quadv,quadl,quadcc,trapz,dblquad,triplequad}
 ## @end deftypefn
 
 function [q, err] = quadgk (f, a, b, varargin)
   if (nargin < 3)
     print_usage ();
   endif
 
   if (b < a)
diff --git a/scripts/general/quadl.m b/scripts/general/quadl.m
--- a/scripts/general/quadl.m
+++ b/scripts/general/quadl.m
@@ -36,17 +36,17 @@
 ##
 ## Additional arguments @var{p1}, etc., are passed directly to @var{f}.
 ## To use default values for @var{tol} and @var{trace}, one may pass
 ## empty matrices.
 ##
 ## Reference: W. Gander and W. Gautschi, @cite{Adaptive Quadrature - 
 ## Revisited}, BIT Vol. 40, No. 1, March 2000, pp. 84--101.
 ## @url{http://www.inf.ethz.ch/personal/gander/}
-##
+## @seealso{quad,quadv,quadgk,quadcc,trapz,dblquad,triplequad}
 ## @end deftypefn
 
 ##   Author: Walter Gautschi
 ##   Date: 08/03/98
 ##   Reference: Gander, Computermathematik, Birkhaeuser, 1992.
 
 ## 2003-08-05 Shai Ayal
 ##   * permission from author to release as GPL
diff --git a/scripts/general/quadv.m b/scripts/general/quadv.m
--- a/scripts/general/quadv.m
+++ b/scripts/general/quadv.m
@@ -37,17 +37,17 @@
 ## If  @var{trace} is  @var{true}, after computing each of these partial integrals, 
 ## display the total number of function evaluations, the left end of the sub-interval, 
 ## the length of the sub-interval and the approximation of the integral over the sub-interval.
 ##
 ## Additional arguments @var{p1}, etc., are passed directly to @var{f}.
 ## To use default values for @var{tol} and @var{trace}, one may pass
 ## empty matrices.
 ##
-## @seealso{triplequad, dblquad, quad, quadl, quadgk, trapz}
+##@seealso{quad,quadl,quadgk,quadcc,trapz,dblquad,triplequad}
 ## @end deftypefn
 
 function [q, fcnt] = quadv (f, a, b, tol, trace, varargin)
   if (nargin < 3)
     print_usage ();
   endif
   if (nargin < 4)
     tol = []; 
diff --git a/scripts/general/triplequad.m b/scripts/general/triplequad.m
--- a/scripts/general/triplequad.m
+++ b/scripts/general/triplequad.m
@@ -25,17 +25,17 @@
 ## vector @var{x} and a scalar @var{y}, and return a vector of the same
 ## length as @var{x}.
 ##
 ## If defined, @var{tol} defines the absolute tolerance to which to
 ## which to integrate each sub-integral.
 ##
 ## Additional arguments, are passed directly to @var{f}.  To use the default
 ## value for @var{tol} one may pass an empty matrix.
-## @seealso{dblquad, quad, quadv, quadl, quadgk, trapz}
+## @seealso{dblquad,quad,quadv,quadl,quadgk,quadcc,trapz}
 ## @end deftypefn
 
 function Q = triplequad(f, xa, xb, ya, yb, za, zb, tol, quadf, varargin)
   if (nargin < 7)
     print_usage ();
   endif
   if (nargin < 8 || isempty (tol))
     tol = 1e-6; 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2011-01-17  Rik  <octave@nomad.inbox5.com>
+
+	* DLD-FUNCTIONS/module-files: Add quadcc.cc to list of files.
+	* DLD-FUNCTIONS/quad.cc: Add Seealso links to quadcc.
+
 2011-01-17  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTION/lookup.cc (Flookup): Validate option string.
 
 2011-01-17  John W. Eaton  <jwe@octave.org>
 
 	* ov-usr-fcn.cc (octave_user_function::bind_automatic_vars):
 	Save argument names in hidden variable .argn..
diff --git a/src/DLD-FUNCTIONS/module-files b/src/DLD-FUNCTIONS/module-files
--- a/src/DLD-FUNCTIONS/module-files
+++ b/src/DLD-FUNCTIONS/module-files
@@ -15,17 +15,16 @@ betainc.cc
 bsxfun.cc
 ccolamd.cc
 cellfun.cc
 chol.cc
 colamd.cc
 colloc.cc
 conv2.cc
 convhulln.cc
-cquad.cc
 daspk.cc
 dasrt.cc
 dassl.cc
 det.cc
 dot.cc
 dlmread.cc
 dmperm.cc
 eig.cc
@@ -53,16 +52,17 @@ lu.cc
 luinc.cc
 matrix_type.cc
 max.cc
 md5sum.cc
 onCleanup.cc
 pinv.cc
 qr.cc
 quad.cc
+quadcc.cc
 qz.cc
 rand.cc
 rcond.cc
 regexp.cc
 schur.cc
 spparms.cc
 sqrtm.cc
 strfind.cc
diff --git a/src/DLD-FUNCTIONS/quad.cc b/src/DLD-FUNCTIONS/quad.cc
--- a/src/DLD-FUNCTIONS/quad.cc
+++ b/src/DLD-FUNCTIONS/quad.cc
@@ -209,17 +209,17 @@ contains an integer error code (0 indica
 made, and @var{err} contains an estimate of the error in the\n\
 solution.\n\
 \n\
 The function @code{quad_options} can set other optional\n\
 parameters for @code{quad}.\n\
 \n\
 Note: because @code{quad} is written in Fortran it\n\
 cannot be called recursively.\n\
-@seealso{quad_options,quadv,quadl,quadgk,trapz}\n\
+@seealso{quad_options,quadv,quadl,quadgk,quadcc,trapz,dblquad,triplequad}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   std::string fcn_name;
 
   warned_imaginary = false;
 
diff --git a/src/DLD-FUNCTIONS/cquad.cc b/src/DLD-FUNCTIONS/quadcc.cc
rename from src/DLD-FUNCTIONS/cquad.cc
rename to src/DLD-FUNCTIONS/quadcc.cc
--- a/src/DLD-FUNCTIONS/cquad.cc
+++ b/src/DLD-FUNCTIONS/quadcc.cc
@@ -1472,35 +1472,35 @@ downdate (double *c, int n, int d, int *
 
 }
 
 
 
 /* The actual integration routine.
     */
 
-DEFUN_DLD (cquad, args, nargout, 
+DEFUN_DLD (quadcc, args, nargout, 
 "-*- texinfo -*-\n\
-@deftypefn  {Function File} {[@var{int}, @var{err}, @var{nr_points}] =} cquad (@var{f}, @var{a}, @var{b}, @var{tol})\n\
-@deftypefnx {Function File} {[@var{int}, @var{err}, @var{nr_points}] =} cquad (@var{f}, @var{a}, @var{b}, @var{tol}, @var{sing})\n\
+@deftypefn  {Function File} {[@var{int}, @var{err}, @var{nr_points}] =} quadcc (@var{f}, @var{a}, @var{b}, @var{tol})\n\
+@deftypefnx {Function File} {[@var{int}, @var{err}, @var{nr_points}] =} quadcc (@var{f}, @var{a}, @var{b}, @var{tol}, @var{sing})\n\
 Numerically evaluates an integral using the doubly-adaptive\n\
 quadrature described by P. Gonnet in @cite{Increasing the\n\
-Reliability of Adaptive Quadrature Using Explicit Interpolants,\n\
+Reliability of Adaptive Quadrature Using Explicit Interpolants},\n\
 ACM Transactions on Mathematical Software, in Press, 2010.\n\
 The algorithm uses Clenshaw-Curtis quadrature rules of increasing\n\
 degree in each interval and bisects the interval if either the\n\
 function does not appear to be smooth or a rule of maximum\n\
 degree has been reached. The error estimate is computed from the\n\
 L2-norm of the difference between two successive interpolations\n\
 of the integrand over the nodes of the respective quadrature rules.\n\
 \n\
 For example,\n\
 \n\
 @example\n\
-   int = cquad (f, a, b, 1.0e-6);\n\
+   int = quadcc (f, a, b, 1.0e-6);\n\
 @end example\n\
 \n\
 @noindent\n\
 computes the integral of a function @var{f} in the interval\n\
 [@var{a}, @var{b}] to the relative precision of six\n\
 decimal digits.\n\
 The integrand @var{f} should accept a vector argument and return a vector\n\
 result containing the integrand evaluated at each element of the\n\
@@ -1511,44 +1511,44 @@ argument, for example:\n\
 @end example\n\
 \n\
 If the integrand has known singularities or discontinuities\n\
 in any of its derivatives inside the interval,\n\
 as does the above example at x=1, these can be specified in\n\
 the additional argument @var{sing} as follows\n\
 \n\
 @example\n\
-   int = cquad (f, a, b, 1.0e-6, [ 1 ]);\n\
+   int = quadcc (f, a, b, 1.0e-6, [ 1 ]);\n\
 @end example\n\
 \n\
 The two additional output variables @var{err} and @var{nr_points}\n\
 return an estimate of the absolute integration error and\n\
 the number of points at which the integrand was evaluated\n\
 respectively.\n\
 If the adaptive integration did not converge, the value of\n\
 @var{err} will be larger than the requested tolerance.  It is\n\
 therefore recommended to verify this value for difficult\n\
 integrands.\n\
 \n\
-If either @var{a} or @var{b} are @code{+/-Inf}, @code{cquad}\n\
+If either @var{a} or @var{b} are @code{+/-Inf}, @code{quadcc}\n\
 integrates @var{f} by substituting the variable of integration\n\
 with @code{x=tan(pi/2*u)}.\n\
 \n\
-@code{cquad} is capable of dealing with non-numeric\n\
+@code{quadcc} is capable of dealing with non-numeric\n\
 values of the integrand such as @code{NaN}, @code{Inf}\n\
 or @code{-Inf}, as in the above example at x=0.\n\
-If the integral diverges and @code{cquad} detects this, \n\
+If the integral diverges and @code{quadcc} detects this, \n\
 a warning is issued and @code{Inf} or @code{-Inf} is returned.\n\
 \n\
-Note that @code{cquad} is a general purpose quadrature algorithm\n\
+Note that @code{quadcc} is a general purpose quadrature algorithm\n\
 and as such may be less efficient for smooth or otherwise\n\
 well-behaved integrand than other methods such as\n\
 @code{quadgk} or @code{trapz}.\n\
 \n\
-@seealso{quad,quadv,quadl,quadgk,trapz}\n\
+@seealso{quad,quadv,quadl,quadgk,trapz,dblquad,triplequad}\n\
 @end deftypefn")
 {
 
   /* Some constants that we will need. */
   static const int n[4] = { 4, 8, 16, 32 };
   static const int skip[4] = { 8, 4, 2, 1 };
   static const int idx[4] = { 0, 5, 14, 31 };
   static const double w = M_SQRT2 / 2;
@@ -1579,76 +1579,76 @@ well-behaved integrand than other method
   cquad_ival *iv, *ivl, *ivr;
   double nc, ncdiff;
 
 
   /* Parse the input arguments. */
   if (nargin < 1)
     {
       error
-        ("cquad: first argument (integrand) of type function handle required.");
+        ("quadcc: first argument (integrand) of type function handle required.");
       return octave_value_list ();
     }
   else
     {
       if (args (0).is_function_handle () || args (0).is_inline_function ())
         fcn = args (0).function_value ();
       else {
         error
-          ("cquad: first argument (integrand) must be a function handle or an inline function.");
+          ("quadcc: first argument (integrand) must be a function handle or an inline function.");
         return octave_value_list();
         }
     }
 
   if (nargin < 2 || !args (1).is_real_scalar ())
     {
       error
-        ("cquad: second argument (left interval edge) must be a single real scalar.");
+        ("quadcc: second argument (left interval edge) must be a single real scalar.");
       return octave_value_list ();
     }
   else
     a = args (1).double_value ();
 
   if (nargin < 3 || !args (2).is_real_scalar ())
     {
       error
-        ("cquad: third argument (right interval edge) must be a single real scalar.");
+        ("quadcc: third argument (right interval edge) must be a single real scalar.");
       return octave_value_list ();
     }
   else
     b = args (2).double_value ();
 
   if (nargin < 4)
     tol = 1.0e-6;
   else if (!args (3).is_real_scalar ())
     {
       error
-        ("cquad: fourth argument (tolerance) must be a single real scalar.");
+        ("quadcc: fourth argument (tolerance) must be a single real scalar.");
       return octave_value_list ();
     }
   else
     tol = args (3).double_value ();
 
   if (nargin < 5)
     {
       nivals = 1;
       iivals[0] = a;
       iivals[1] = b;
     }
   else if (!(args (4).is_real_scalar () || args (4).is_real_matrix ()))
     {
       error
-        ("cquad: fifth argument (singularities) must be a vector of real values.");
+        ("quadcc: fifth argument (singularities) must be a vector of real values.");
       return octave_value_list ();
     }
   else
     {
       nivals = 1 + args (4).length ();
       if ( nivals > cquad_heapsize ) {
-        error("cquad: maximum number of singular points is limited to %i.",cquad_heapsize-1);
+        error("quadcc: maximum number of singular points is limited to %i.",cquad_heapsize-1);
         return octave_value_list();
         }
       sing = args (4).array_value ().fortran_vec ();
       iivals[0] = a;
       for (i = 0; i < nivals - 2; i++)
         iivals[i + 1] = sing[i];
       iivals[nivals] = b;
     }
@@ -1692,24 +1692,24 @@ well-behaved integrand than other method
           for (i = 0; i <= n[3]; i++)
             ex (i) = m + xi[i] * h;
         }
       fargs (0) = ex;
       retval = feval (fcn, fargs, 1);
       if (retval.length () != 1 || !retval (0).is_real_matrix ())
         {
           error
-            ("cquad: integrand must return a single, real-valued vector.");
+            ("quadcc: integrand must return a single, real-valued vector.");
           return octave_value_list ();
         }
       Matrix effex = retval (0).matrix_value ();
       if (effex.length () != ex.length ())
         {
           error
-            ("cquad: integrand must return a single, real-valued vector of the same size as the input");
+            ("quadcc: integrand must return a single, real-valued vector of the same size as the input");
           return octave_value_list ();
         }
       for (i = 0; i <= n[3]; i++)
         {
           iv->fx[i] = effex (i);
           if (wrap)
             {
               xw = ex(i);
@@ -1785,17 +1785,17 @@ well-behaved integrand than other method
       OCTAVE_QUIT;
 
       /* Put our finger on the interval with the largest error. */
       iv = &(ivals[heap[0]]);
       m = (iv->a + iv->b) / 2;
       h = (iv->b - iv->a) / 2;
 
 /*      printf
-        ("cquad: processing ival %i (of %i) with [%e,%e] int=%e, err=%e, depth=%i\n",
+        ("quadcc: processing ival %i (of %i) with [%e,%e] int=%e, err=%e, depth=%i\n",
          heap[0], nivals, iv->a, iv->b, iv->igral, iv->err, iv->depth);
 */
       /* Should we try to increase the degree? */
       if (iv->depth < 3)
         {
 
           /* Keep tabs on some variables. */
           d = ++iv->depth;
@@ -1814,24 +1814,24 @@ well-behaved integrand than other method
                 for (i = 0; i < n[d] / 2; i++)
                   ex (i) = m + xi[(2 * i + 1) * skip[d]] * h;
               }
             fargs (0) = ex;
             retval = feval (fcn, fargs, 1);
             if (retval.length () != 1 || !retval (0).is_real_matrix ())
               {
                 error
-                  ("cquad: integrand must return a single, real-valued vector.");
+                  ("quadcc: integrand must return a single, real-valued vector.");
                 return octave_value_list ();
               }
             Matrix effex = retval (0).matrix_value ();
             if (effex.length () != ex.length ())
               {
                 error
-                  ("cquad: integrand must return a single, real-valued vector of the same size as the input.");
+                  ("quadcc: integrand must return a single, real-valued vector of the same size as the input.");
                 return octave_value_list ();
               }
             neval += effex.length ();
             for (i = 0; i < n[d] / 2; i++)
               {
                 j = (2 * i + 1) * skip[d];
                 iv->fx[j] = effex (i);
                 if (wrap)
@@ -1893,17 +1893,17 @@ well-behaved integrand than other method
 
       /* Should we drop this interval? */
       if ((m + h * xi[0]) >= (m + h * xi[1])
           || (m + h * xi[31]) >= (m + h * xi[32])
           || iv->err < fabs (iv->igral) * DBL_EPSILON * 10)
         {
 
 /*          printf
-            ("cquad: dropping ival %i (of %i) with [%e,%e] int=%e, err=%e, depth=%i\n",
+            ("quadcc: dropping ival %i (of %i) with [%e,%e] int=%e, err=%e, depth=%i\n",
              heap[0], nivals, iv->a, iv->b, iv->igral, iv->err,
              iv->depth);
 */
           /* Keep this interval's contribution */
           err_final += iv->err;
           igral_final += iv->igral;
           /* Swap with the last element on the heap */
           t = heap[nivals - 1];
@@ -1964,24 +1964,24 @@ well-behaved integrand than other method
                 for (i = 0; i < n[0] - 1; i++)
                   ex (i) = ml + xi[(i + 1) * skip[0]] * hl;
               }
             fargs (0) = ex;
             retval = feval (fcn, fargs, 1);
             if (retval.length () != 1 || !retval (0).is_real_matrix ())
               {
                 error
-                  ("cquad: integrand must return a single, real-valued vector.");
+                  ("quadcc: integrand must return a single, real-valued vector.");
                 return octave_value_list ();
               }
             Matrix effex = retval (0).matrix_value ();
             if (effex.length () != ex.length ())
               {
                 error
-                  ("cquad: integrand must return a single, real-valued vector of the same size as the input.");
+                  ("quadcc: integrand must return a single, real-valued vector of the same size as the input.");
                 return octave_value_list ();
               }
             neval += effex.length ();
             for (i = 0; i < n[0] - 1; i++)
               {
                 j = (i + 1) * skip[0];
                 ivl->fx[j] = effex (i);
                 if (wrap)
@@ -2027,17 +2027,17 @@ well-behaved integrand than other method
           ncdiff = sqrt (ncdiff);
           ivl->err = ncdiff * h;
           /* Check for divergence. */
           ivl->ndiv = iv->ndiv + (fabs (iv->c[0]) > 0
                                   && ivl->c[0] / iv->c[0] > 2);
           if (ivl->ndiv > ndiv_max && 2 * ivl->ndiv > ivl->rdepth)
             {
               igral = copysign (octave_Inf, igral);
-              warning ("cquad: divergent integral detected.");
+              warning ("quadcc: divergent integral detected.");
               break;
             }
 
           /* Compute the local integral. */
           ivl->igral = h * w * ivl->c[0];
           
           
           /* Generate the interval on the right */
@@ -2062,24 +2062,24 @@ well-behaved integrand than other method
                 for (i = 0; i < n[0] - 1; i++)
                   ex (i) = mr + xi[(i + 1) * skip[0]] * hr;
               }
             fargs (0) = ex;
             retval = feval (fcn, fargs, 1);
             if (retval.length () != 1 || !retval (0).is_real_matrix ())
               {
                 error
-                  ("cquad: integrand must return a single, real-valued vector.");
+                  ("quadcc: integrand must return a single, real-valued vector.");
                 return octave_value_list ();
               }
             Matrix effex = retval (0).matrix_value ();
             if (effex.length () != ex.length ())
               {
                 error
-                  ("cquad: integrand must return a single, real-valued vector of the same size as the input.");
+                  ("quadcc: integrand must return a single, real-valued vector of the same size as the input.");
                 return octave_value_list ();
               }
             neval += effex.length ();
             for (i = 0; i < n[0] - 1; i++)
               {
                 j = (i + 1) * skip[0];
                 ivr->fx[j] = effex (i);
                 if (wrap)
@@ -2125,17 +2125,17 @@ well-behaved integrand than other method
           ncdiff = sqrt (ncdiff);
           ivr->err = ncdiff * h;
           /* Check for divergence. */
           ivr->ndiv = iv->ndiv + (fabs (iv->c[0]) > 0
                                   && ivr->c[0] / iv->c[0] > 2);
           if (ivr->ndiv > ndiv_max && 2 * ivr->ndiv > ivr->rdepth)
             {
               igral = copysign (octave_Inf, igral);
-              warning ("cquad: divergent integral detected.");
+              warning ("quadcc: divergent integral detected.");
               break;
             }
 
           /* Compute the local integral. */
           ivr->igral = h * w * ivr->c[0];
           
           
           /* Fix-up the heap: we now have one interval on top
@@ -2209,17 +2209,17 @@ well-behaved integrand than other method
         }
 
       /* If the heap is about to overflow, remove the last two
          intervals. */
       while (nivals > cquad_heapsize - 2)
         {
           iv = &(ivals[heap[nivals - 1]]);
 /*          printf
-            ("cquad: dropping ival %i (of %i) with [%e,%e] int=%e, err=%e, depth=%i\n",
+            ("quadcc: dropping ival %i (of %i) with [%e,%e] int=%e, err=%e, depth=%i\n",
              heap[0], nivals, iv->a, iv->b, iv->igral, iv->err,
              iv->depth);
 */
           err_final += iv->err;
           igral_final += iv->igral;
           nivals--;
         }
 
@@ -2234,17 +2234,17 @@ well-behaved integrand than other method
 
     }
 
   /* Dump the contents of the heap. */
 /*  for (i = 0; i < nivals; i++)
     {
       iv = &(ivals[heap[i]]);
       printf
-        ("cquad: ival %i (%i) with [%e,%e], int=%e, err=%e, depth=%i, rdepth=%i, ndiv=%i\n",
+        ("quadcc: ival %i (%i) with [%e,%e], int=%e, err=%e, depth=%i, rdepth=%i, ndiv=%i\n",
          i, heap[i], iv->a, iv->b, iv->igral, iv->err, iv->depth,
          iv->rdepth, iv->ndiv);
     }
 */
   /* Clean up and present the results. */
   retval (0) = igral;
   if (nargout > 1)
     retval (1) = err;
