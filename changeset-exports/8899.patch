# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1235992349 -3600
#      Mon Mar 02 12:12:29 2009 +0100
# Node ID 4ab9654eceac5aee9c3d1b7837825d651865e8eb
# Parent  ca032de5fbf295013457db5722b8e5788e2645b6
update comment

diff --git a/liboctave/mx-inlines.cc b/liboctave/mx-inlines.cc
--- a/liboctave/mx-inlines.cc
+++ b/liboctave/mx-inlines.cc
@@ -281,17 +281,19 @@ OP_DUP_FCN (-, mx_inline_change_sign, fl
 OP_DUP_FCN (-, mx_inline_change_sign, FloatComplex, FloatComplex)
 
 OP_DUP_FCN (std::abs, mx_inline_fabs_dup, float,  float)
 OP_DUP_FCN (std::abs, mx_inline_cabs_dup, float,  FloatComplex)
 OP_DUP_FCN (real, mx_inline_real_dup, float,  FloatComplex)
 OP_DUP_FCN (imag, mx_inline_imag_dup, float,  FloatComplex)
 OP_DUP_FCN (conj, mx_inline_conj_dup, FloatComplex, FloatComplex)
 
-// NOTE: std::norm is NOT equivalent
+// FIXME: Due to a performance defect in g++ (<= 4.3), std::norm is slow unless
+// ffast-math is on (not by default even with -O3). The following helper function
+// gives the expected straightforward implementation of std::norm.
 template <class T>
 inline T cabsq (const std::complex<T>& c) 
 { return c.real () * c.real () + c.imag () * c.imag (); }
 
 #define OP_RED_SUM(ac, el) ac += el
 #define OP_RED_PROD(ac, el) ac *= el
 #define OP_RED_SUMSQ(ac, el) ac += el*el
 #define OP_RED_SUMSQC(ac, el) ac += cabsq (el)
