# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1271427285 -7200
#      Fri Apr 16 16:14:45 2010 +0200
# Node ID b4d2080b6df714365c77f734481ce2a663f74ca3
# Parent  660c244d3206ebbf9261416b202bd2bf15642502
Replace nzmax by nnz as needed

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,12 @@
+2010-04-16  David Bateman  <dbateman@free.fr>
+
+	* PROJECTS: Update for new sparse functionality.
+
 2010-04-14  Shai Ayal  <shaiay@users.sourceforge.net>
 
 	* NEWS: Update.
 
 2010-04-08  Marco Atzeri  <marco_atzeri@yahoo.it>
 
 	* Makefile.am (make-version-links, remove-version-links):
 	Use SCRIPTS_EXE_SUFFIX for scripts, not EXEEXT.
diff --git a/PROJECTS b/PROJECTS
--- a/PROJECTS
+++ b/PROJECTS
@@ -56,51 +56,31 @@ Numerical:
 
 ---------------
 Sparse Matrices:
 ---------------
 
   * Improve QR factorization functions, using idea based on CSPARSE
     cs_dmsol.m 
 
+  * Improve QR fqctorization by replace CXSPARSE code with SPQR code, and make
+    the linear solve return 2-norm solutions for ill-conditioned matrices
+    based on this new code
+
   * Implement fourth argument to the sprand and sprandn, and addition
     arguments to sprandsym that the leading brand implements.
 
   * Sparse logical indexing in idx_vector class so that something like
-    "a=sprandn(1e6,1e6,1e-6); a(a<1) = 0" won't cause a memory overflow.
-
-  * Make spalloc (r, c, n) actually create an empty sparse with n
-    non-zero elements?  This allows something like
-
-    sm = spalloc (r, c, n)
-    for j=1:c
-      for i=1:r
-        tmp = foo (i,j);
-        if (tmp != 0.)
-          sm (i,j) = tmp;
-        endif
-      endfor
-    endfor
-
-    actually make sense.  Otherwise the above will cause massive amounts
-    of memory reallocation.
-
-    The fact is that this doesn't make sense in any case as the assign
-    function makes another copy of the sparse matrix.  So although spalloc
-    might easily be made to have the correct behavior, the first assign
-    will cause the matrix to be resized!  There seems to be no simple
-    way to treat this but a complete rewrite of the sparse assignment
-    functions...
+    'a=sprandn(1e6,1e6,1e-6); a(a<1) = 0' won't cause a memory overflow.
 
   * Other missing Functions
       - symmmd      Superseded by symamd
       - colmmd      Superseded by colamd
       - cholinc
       - bicg        Can this be taken from octave-forge?
-      - cgs
       - gmres
       - lsqr
       - minres
       - qmr
       - symmlq 
 
 -------
 Strings:
diff --git a/liboctave/CSparse.h b/liboctave/CSparse.h
--- a/liboctave/CSparse.h
+++ b/liboctave/CSparse.h
@@ -75,18 +75,19 @@ public:
   explicit SparseComplexMatrix (const ComplexMatrix& a) 
     : MSparse<Complex> (a) { }
 
   explicit SparseComplexMatrix (const ComplexNDArray& a) 
     : MSparse<Complex> (a) { }
 
   SparseComplexMatrix (const Array<Complex>& a, const idx_vector& r, 
                        const idx_vector& c, octave_idx_type nr = -1, 
-                       octave_idx_type nc = -1, bool sum_terms = true)
-    : MSparse<Complex> (a, r, c, nr, nc, sum_terms) { }
+                       octave_idx_type nc = -1, bool sum_terms = true,
+                       octave_idx_type nzm = -1)
+    : MSparse<Complex> (a, r, c, nr, nc, sum_terms, nzm) { }
 
   explicit SparseComplexMatrix (const SparseMatrix& a);
 
   explicit SparseComplexMatrix (const SparseBoolMatrix& a);
 
   explicit SparseComplexMatrix (const ComplexDiagMatrix& a);
 
   SparseComplexMatrix (octave_idx_type r, octave_idx_type c, octave_idx_type num_nz) 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,22 @@
+2010-04-16  David Bateman  <dbateman@free.fr>
+
+	* Sparse.cc (template <class T> Sparse<T>::Sparse (const Array<T>&,
+	const idx_vector&, const idx_vector&, octave_idx_type,
+        octave_idx_type, bool, octave_idx_type)): Add argument defining the
+	minimum storage to allocate for the sparse matrix.
+	* Sparse.h (template <class T> Sparse (const Array<T>&,
+	const idx_vector&, const idx_vector&, octave_idx_type,
+        octave_idx_type, bool, octave_idx_type)): ditto.
+	* MSparse.h : ditto
+	* CSparse.h : ditto
+	* dSparse.h : ditto
+	* boolSparse.h : ditto
+
 2010-04-14  Jaroslav Hajek  <highegg@gmail.com>
 
 	* Sparse.cc: Update failing tests.
 
 2010-04-13  Jaroslav Hajek  <highegg@gmail.com>
 
 	* Sparse.cc (Sparse<T>::index): If S is a sparse column vector,
 	forward S(I,1) and S(I,:) to 1D indexing. Handle permutation indexing
diff --git a/liboctave/MSparse.h b/liboctave/MSparse.h
--- a/liboctave/MSparse.h
+++ b/liboctave/MSparse.h
@@ -54,18 +54,19 @@ public:
   MSparse (const MSparse<T>& a, const dim_vector& dv) : Sparse<T> (a, dv) { }
 
   MSparse (const Sparse<T>& a) : Sparse<T> (a) { }
 
   template <class U>
   MSparse (const Sparse<U>& a) : Sparse<T> (a) { }
 
   MSparse (const Array<T>& a, const idx_vector& r, const idx_vector& c,
-           octave_idx_type nr = -1, octave_idx_type nc = -1, bool sum_terms = true)
-    : Sparse<T> (a, r, c, nr, nc, sum_terms) { }
+           octave_idx_type nr = -1, octave_idx_type nc = -1, 
+           bool sum_terms = true, octave_idx_type nzm = -1)
+    : Sparse<T> (a, r, c, nr, nc, sum_terms, nzm) { }
 
   explicit MSparse (octave_idx_type r, octave_idx_type c, T val) : Sparse<T> (r, c, val) { }
 
   MSparse (octave_idx_type r, octave_idx_type c, octave_idx_type num_nz) : Sparse<T> (r, c, num_nz) { }
 
   ~MSparse (void) { }
 
   MSparse<T>& operator = (const MSparse<T>& a)
diff --git a/liboctave/Sparse.cc b/liboctave/Sparse.cc
--- a/liboctave/Sparse.cc
+++ b/liboctave/Sparse.cc
@@ -252,17 +252,18 @@ Sparse<T>::Sparse (const Sparse<T>& a, c
       for (octave_idx_type k = kk; k < new_nc; k++)
         xcidx(k+1) = new_nzmx;
     }
 }
 
 template <class T>
 Sparse<T>::Sparse (const Array<T>& a, const idx_vector& r, 
                    const idx_vector& c, octave_idx_type nr,
-                   octave_idx_type nc, bool sum_terms)
+                   octave_idx_type nc, bool sum_terms,
+                   octave_idx_type nzm)
   : rep (nil_rep ()), dimensions ()
 {
   if (nr < 0)
       nr = r.extent (0);
   else if (r.extent (nr) > nr)
     (*current_liboctave_error_handler) ("sparse: row index %d out of bound %d",
                                         r.extent (nr), nr);
 
@@ -291,17 +292,17 @@ Sparse<T>::Sparse (const Array<T>& a, co
 
   if ((rl != 1 && rl != n) || (cl != 1 && cl != n))
     (*current_liboctave_error_handler) ("sparse: dimension mismatch");
     
   if (rl <= 1 && cl <= 1)
     {
       if (n == 1 && a(0) != T ())
         {
-          change_capacity (1);
+          change_capacity (nzm > 1 ? nzm : 1);
           xridx(0) = r(0);
           xdata(0) = a(0);
           for (octave_idx_type j = 0; j < nc; j++)
             xcidx(j+1) = j >= c(0);
         }
     }
   else if (a_scalar)
     {
@@ -319,17 +320,17 @@ Sparse<T>::Sparse (const Array<T>& a, co
           octave_quit ();
 
           const octave_idx_type *rd = rs.raw ();
           // Count unique indices.
           octave_idx_type new_nz = 1;
           for (octave_idx_type i = 1; i < n; i++)
             new_nz += rd[i-1] != rd[i];
           // Allocate result.
-          change_capacity (new_nz);
+          change_capacity (nzm > new_nz ? nzm : new_nz);
           xcidx (1) = new_nz;
           octave_idx_type *rri = ridx ();
           T *rrd = data ();
 
           octave_quit ();
 
           octave_idx_type k = -1, l = -1;
 
@@ -402,17 +403,17 @@ Sparse<T>::Sparse (const Array<T>& a, co
                       l = k;
                       nzj++;
                     }
                 }
               // Set column pointer.
               xcidx(j+1) = xcidx(j) + nzj;
             }
 
-          change_capacity (xcidx (nc));
+          change_capacity (nzm > xcidx (nc) ? nzm : xcidx (nc));
           octave_idx_type *rri = ridx ();
           T *rrd = data ();
 
           // Fill-in data.
           for (octave_idx_type j = 0, jj = -1; j < nc; j++)
             {
               octave_quit ();
               octave_idx_type l = -1;
@@ -458,17 +459,17 @@ Sparse<T>::Sparse (const Array<T>& a, co
       octave_quit ();
 
       const octave_idx_type *rd = rs.raw (), *rdi = rsi.data ();
       // Count unique indices.
       octave_idx_type new_nz = 1;
       for (octave_idx_type i = 1; i < n; i++)
         new_nz += rd[i-1] != rd[i];
       // Allocate result.
-      change_capacity (new_nz);
+      change_capacity (nzm > new_nz ? nzm : new_nz);
       xcidx(1) = new_nz;
       octave_idx_type *rri = ridx ();
       T *rrd = data ();
 
       octave_quit ();
 
       octave_idx_type k = 0;
       rri[k] = rd[0];
@@ -545,17 +546,17 @@ Sparse<T>::Sparse (const Array<T>& a, co
                   l = k;
                   nzj++;
                 }
             }
           // Set column pointer.
           xcidx(j+1) = xcidx(j) + nzj;
         }
 
-      change_capacity (xcidx (nc));
+      change_capacity (nzm > xcidx (nc) ? nzm : xcidx (nc));
       octave_idx_type *rri = ridx ();
       T *rrd = data ();
 
       // Fill-in data.
       for (octave_idx_type j = 0, jj = -1; j < nc; j++)
         {
           octave_quit ();
           octave_idx_type l = -1;
diff --git a/liboctave/Sparse.h b/liboctave/Sparse.h
--- a/liboctave/Sparse.h
+++ b/liboctave/Sparse.h
@@ -216,17 +216,18 @@ public:
 
 public:
 
   Sparse (const dim_vector& dv);
 
   Sparse (const Sparse<T>& a, const dim_vector& dv);
 
   Sparse (const Array<T>& a, const idx_vector& r, const idx_vector& c,
-          octave_idx_type nr = -1, octave_idx_type nc = -1, bool sum_terms = true);
+          octave_idx_type nr = -1, octave_idx_type nc = -1,
+          bool sum_terms = true, octave_idx_type nzm = -1);
 
   // Sparsify a normal matrix
   Sparse (const Array<T>& a);
 
   virtual ~Sparse (void);
 
   Sparse<T>& operator = (const Sparse<T>& a);
 
diff --git a/liboctave/boolSparse.h b/liboctave/boolSparse.h
--- a/liboctave/boolSparse.h
+++ b/liboctave/boolSparse.h
@@ -52,18 +52,19 @@ public:
     : Sparse<bool> (a, dv) { }
 
   explicit SparseBoolMatrix (const boolMatrix& a) : Sparse<bool> (a) { }
 
   explicit SparseBoolMatrix (const boolNDArray& a) : Sparse<bool> (a) { }
 
   SparseBoolMatrix (const Array<bool>& a, const idx_vector& r, 
                     const idx_vector& c, octave_idx_type nr = -1, 
-                    octave_idx_type nc = -1, bool sum_terms = true)
-    : Sparse<bool> (a, r, c, nr, nc, sum_terms) { }
+                    octave_idx_type nc = -1, bool sum_terms = true,
+                    octave_idx_type nzm = -1)
+    : Sparse<bool> (a, r, c, nr, nc, sum_terms, nzm) { }
 
   SparseBoolMatrix (octave_idx_type r, octave_idx_type c, octave_idx_type num_nz) : Sparse<bool> (r, c, num_nz) { }
 
   SparseBoolMatrix& operator = (const SparseBoolMatrix& a)
     {
       Sparse<bool>::operator = (a);
       return *this;
     }
diff --git a/liboctave/dSparse.h b/liboctave/dSparse.h
--- a/liboctave/dSparse.h
+++ b/liboctave/dSparse.h
@@ -69,18 +69,19 @@ SparseMatrix : public MSparse<double>
   explicit SparseMatrix (const SparseBoolMatrix& a);
 
   explicit SparseMatrix (const Matrix& a) : MSparse<double> (a) { }
 
   explicit SparseMatrix (const NDArray& a) : MSparse<double> (a) { }
 
   SparseMatrix (const Array<double>& a, const idx_vector& r, 
                 const idx_vector& c, octave_idx_type nr = -1, 
-                octave_idx_type nc = -1, bool sum_terms = true)
-    : MSparse<double> (a, r, c, nr, nc, sum_terms) { }
+                octave_idx_type nc = -1, bool sum_terms = true,
+                octave_idx_type nzm = -1)
+    : MSparse<double> (a, r, c, nr, nc, sum_terms, nzm) { }
 
   explicit SparseMatrix (const DiagMatrix& a);
 
   explicit SparseMatrix (const PermMatrix& a);
 
   SparseMatrix (octave_idx_type r, octave_idx_type c, octave_idx_type num_nz) : MSparse<double> (r, c, num_nz) { }
 
   SparseMatrix& operator = (const SparseMatrix& a)
diff --git a/src/DLD-FUNCTIONS/__glpk__.cc b/src/DLD-FUNCTIONS/__glpk__.cc
--- a/src/DLD-FUNCTIONS/__glpk__.cc
+++ b/src/DLD-FUNCTIONS/__glpk__.cc
@@ -514,17 +514,17 @@ Undocumented internal function.\n\
       if (error_state)
         {
           error ("__glpk__: invalid value of A");
           return retval;
         }
 
       mrowsA = A.rows ();
       octave_idx_type Anc = A.cols ();
-      octave_idx_type Anz = A.nzmax ();
+      octave_idx_type Anz = A.nnz ();
       rn.resize (Anz+1, 1);
       cn.resize (Anz+1, 1);
       a.resize (Anz+1, 0.0);
 
       if (Anc != mrowsc)
         {
           error ("__glpk__: invalid value of A");
           return retval;
diff --git a/src/DLD-FUNCTIONS/amd.cc b/src/DLD-FUNCTIONS/amd.cc
--- a/src/DLD-FUNCTIONS/amd.cc
+++ b/src/DLD-FUNCTIONS/amd.cc
@@ -86,52 +86,49 @@ University of Florida (see @url{http://w
 
 #ifdef HAVE_AMD
   int nargin = args.length ();
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
   else
     {
-      octave_idx_type n_row, n_col, nnz;
+      octave_idx_type n_row, n_col;
       const octave_idx_type *ridx, *cidx;
       SparseMatrix sm;
       SparseComplexMatrix scm;
 
       if (args(0).is_sparse_type ())
         {
           if (args(0).is_complex_type ())
             {
               scm = args(0).sparse_complex_matrix_value ();
               n_row = scm.rows ();
               n_col = scm.cols ();
-              nnz = scm.nzmax ();
               ridx = scm.xridx ();
               cidx = scm.xcidx ();
             }
           else
             {
               sm = args(0).sparse_matrix_value ();
               n_row = sm.rows ();
               n_col = sm.cols ();
-              nnz = sm.nzmax ();
               ridx = sm.xridx ();
               cidx = sm.xcidx ();
             }
         }
       else
         {
           if (args(0).is_complex_type ())
             sm = SparseMatrix (real (args(0).complex_matrix_value ()));
           else
             sm = SparseMatrix (args(0).matrix_value ());
           
           n_row = sm.rows ();
           n_col = sm.cols ();
-          nnz = sm.nzmax ();
           ridx = sm.xridx ();
           cidx = sm.xcidx ();
         }
 
       if (!error_state && n_row != n_col)
         error ("amd: input matrix must be square");
 
       if (!error_state)
diff --git a/src/DLD-FUNCTIONS/ccolamd.cc b/src/DLD-FUNCTIONS/ccolamd.cc
--- a/src/DLD-FUNCTIONS/ccolamd.cc
+++ b/src/DLD-FUNCTIONS/ccolamd.cc
@@ -218,41 +218,41 @@ colamd, symamd, and other related orderi
 
       if (args(0).is_sparse_type ())
         {
           if (args(0).is_complex_type ())
             {
               scm = args(0). sparse_complex_matrix_value ();
               n_row = scm.rows ();
               n_col = scm.cols ();
-              nnz = scm.nzmax ();
+              nnz = scm.nnz ();
               ridx = scm.xridx ();
               cidx = scm.xcidx ();
             }
           else
             {
               sm = args(0).sparse_matrix_value ();
 
               n_row = sm.rows ();
               n_col = sm.cols ();
-              nnz = sm.nzmax ();
+              nnz = sm.nnz ();
               ridx = sm.xridx ();
               cidx = sm.xcidx ();
             }
         }
       else
         {
           if (args(0).is_complex_type ())
             sm = SparseMatrix (real (args(0).complex_matrix_value ()));
           else
             sm = SparseMatrix (args(0).matrix_value ());
 
           n_row = sm.rows ();
           n_col = sm.cols ();
-          nnz = sm.nzmax ();
+          nnz = sm.nnz ();
           ridx = sm.xridx ();
           cidx = sm.xcidx ();
         }
 
       // Allocate workspace for ccolamd
       OCTAVE_LOCAL_BUFFER (octave_idx_type, p, n_col+1);
       for (octave_idx_type i = 0; i < n_col+1; i++)
         p[i] = cidx [i];
@@ -456,40 +456,40 @@ colamd, symamd, and other related orderi
 
       if (args(0).is_sparse_type ())
         {
           if (args(0).is_complex_type ())
             {
               scm = args(0).sparse_complex_matrix_value ();
               n_row = scm.rows ();
               n_col = scm.cols ();
-              nnz = scm.nzmax ();
+              nnz = scm.nnz ();
               ridx = scm.xridx ();
               cidx = scm.xcidx ();
             }
           else
             {
               sm = args(0).sparse_matrix_value ();
               n_row = sm.rows ();
               n_col = sm.cols ();
-              nnz = sm.nzmax ();
+              nnz = sm.nnz ();
               ridx = sm.xridx ();
               cidx = sm.xcidx ();
             }
         }
       else
         {
           if (args(0).is_complex_type ())
             sm = SparseMatrix (real (args(0).complex_matrix_value ()));
           else
             sm = SparseMatrix (args(0).matrix_value ());
           
           n_row = sm.rows ();
           n_col = sm.cols ();
-          nnz = sm.nzmax ();
+          nnz = sm.nnz ();
           ridx = sm.xridx ();
           cidx = sm.xcidx ();
         }
 
       if (n_row != n_col)
         {
           error ("symamd: matrix must be square");
           return retval;
diff --git a/src/DLD-FUNCTIONS/colamd.cc b/src/DLD-FUNCTIONS/colamd.cc
--- a/src/DLD-FUNCTIONS/colamd.cc
+++ b/src/DLD-FUNCTIONS/colamd.cc
@@ -342,41 +342,41 @@ Ng, Oak Ridge National Laboratory.  (see
 
       if (args(0).is_sparse_type ())
         {
           if (args(0).is_complex_type ())
             {
               scm = args(0). sparse_complex_matrix_value ();
               n_row = scm.rows ();
               n_col = scm.cols ();
-              nnz = scm.nzmax ();
+              nnz = scm.nnz ();
               ridx = scm.xridx ();
               cidx = scm.xcidx ();
             }
           else
             {
               sm = args(0).sparse_matrix_value ();
 
               n_row = sm.rows ();
               n_col = sm.cols ();
-              nnz = sm.nzmax ();
+              nnz = sm.nnz ();
               ridx = sm.xridx ();
               cidx = sm.xcidx ();
             }
         }
       else
         {
           if (args(0).is_complex_type ())
             sm = SparseMatrix (real (args(0).complex_matrix_value ()));
           else
             sm = SparseMatrix (args(0).matrix_value ());
 
           n_row = sm.rows ();
           n_col = sm.cols ();
-          nnz = sm.nzmax ();
+          nnz = sm.nnz ();
           ridx = sm.xridx ();
           cidx = sm.xcidx ();
         }
 
       // Allocate workspace for colamd
       OCTAVE_LOCAL_BUFFER (octave_idx_type, p, n_col+1);
       for (octave_idx_type i = 0; i < n_col+1; i++)
         p[i] = cidx [i];
@@ -551,40 +551,40 @@ Ng, Oak Ridge National Laboratory.  (see
 
       if (args(0).is_sparse_type ())
         {
           if (args(0).is_complex_type ())
             {
               scm = args(0).sparse_complex_matrix_value ();
               n_row = scm.rows ();
               n_col = scm.cols ();
-              nnz = scm.nzmax ();
+              nnz = scm.nnz ();
               ridx = scm.xridx ();
               cidx = scm.xcidx ();
             }
           else
             {
               sm = args(0).sparse_matrix_value ();
               n_row = sm.rows ();
               n_col = sm.cols ();
-              nnz = sm.nzmax ();
+              nnz = sm.nnz ();
               ridx = sm.xridx ();
               cidx = sm.xcidx ();
             }
         }
       else
         {
           if (args(0).is_complex_type ())
             sm = SparseMatrix (real (args(0).complex_matrix_value ()));
           else
             sm = SparseMatrix (args(0).matrix_value ());
           
           n_row = sm.rows ();
           n_col = sm.cols ();
-          nnz = sm.nzmax ();
+          nnz = sm.nnz ();
           ridx = sm.xridx ();
           cidx = sm.xcidx ();
         }
 
       if (n_row != n_col)
         {
           error ("symamd: matrix must be square");
           return retval;
@@ -676,26 +676,26 @@ permutations on the tree.\n\
 
       if (args(0).is_sparse_type ())
         {
           if (args(0).is_complex_type ())
             {
               scm = args(0).sparse_complex_matrix_value ();
               n_row = scm.rows ();
               n_col = scm.cols ();
-              nnz = scm.nzmax ();
+              nnz = scm.nnz ();
               ridx = scm.xridx ();
               cidx = scm.xcidx ();
             }
           else
             {
               sm = args(0).sparse_matrix_value ();
               n_row = sm.rows ();
               n_col = sm.cols ();
-              nnz = sm.nzmax ();
+              nnz = sm.nnz ();
               ridx = sm.xridx ();
               cidx = sm.xcidx ();
             }
 
         }
       else
         {
           error ("etree: must be called with a sparse matrix");
diff --git a/src/DLD-FUNCTIONS/kron.cc b/src/DLD-FUNCTIONS/kron.cc
--- a/src/DLD-FUNCTIONS/kron.cc
+++ b/src/DLD-FUNCTIONS/kron.cc
@@ -95,17 +95,17 @@ kron (const MDiagArray2<R>& a, const MAr
 }
 
 template <class T>
 static MSparse<T>
 kron (const MSparse<T>& A, const MSparse<T>& B)
 {
   octave_idx_type idx = 0;
   MSparse<T> C (A.rows () * B.rows (), A.columns () * B.columns (), 
-                A.nzmax () * B.nzmax ());
+                A.nnz () * B.nnz ());
 
   C.cidx (0) = 0;
 
   for (octave_idx_type Aj = 0; Aj < A.columns (); Aj++)
     for (octave_idx_type Bj = 0; Bj < B.columns (); Bj++)
       {
         octave_quit ();
         for (octave_idx_type Ai = A.cidx (Aj); Ai < A.cidx (Aj+1); Ai++)
diff --git a/src/DLD-FUNCTIONS/sparse.cc b/src/DLD-FUNCTIONS/sparse.cc
--- a/src/DLD-FUNCTIONS/sparse.cc
+++ b/src/DLD-FUNCTIONS/sparse.cc
@@ -151,17 +151,23 @@ to have a common size.\n\
            else
              error ("sparse: invalid option: %s", opt.c_str ());
 
            nargin -= 1;
          }
 
        if (! error_state)
          {
-           octave_idx_type m = -1, n = -1;
+           octave_idx_type m = -1, n = -1, nzmax = -1;
+           if (nargin == 6)
+             {
+               nzmax = args(5).idx_type_value ();
+               nargin --;
+             }
+
            if (nargin == 5)
              {
                if (args(3).is_scalar_type () && args(4).is_scalar_type ())
                  {
                    m = args(3).idx_type_value ();
                    n = args(4).idx_type_value ();
                  }
                else
@@ -176,23 +182,23 @@ to have a common size.\n\
 
            if (! error_state)
              {
                idx_vector i = args(0).index_vector ();
                idx_vector j = args(1).index_vector ();
 
                if (args(2).is_bool_type ())
                  retval = SparseBoolMatrix (args(2).bool_array_value (), i, j,
-                                            m, n, summation);
+                                            m, n, summation, nzmax);
                else if (args(2).is_complex_type ())
-                 retval = SparseComplexMatrix (args(2).complex_array_value (), i, j,
-                                               m, n, summation);
+                 retval = SparseComplexMatrix (args(2).complex_array_value (),
+                                               i, j, m, n, summation, nzmax);
                else if (args(2).is_numeric_type ())
                  retval = SparseMatrix (args(2).array_value (), i, j,
-                                        m, n, summation);
+                                        m, n, summation, nzmax);
                else
                  gripe_wrong_type_arg ("sparse", args(2));
              }
 
          }
      }
 
    return retval;
diff --git a/src/ov-base-sparse.cc b/src/ov-base-sparse.cc
--- a/src/ov-base-sparse.cc
+++ b/src/ov-base-sparse.cc
@@ -356,17 +356,17 @@ template <class T>
 bool
 octave_base_sparse<T>::save_ascii (std::ostream& os)
 {
   dim_vector dv = this->dims ();
 
   // Ensure that additional memory is deallocated
   matrix.maybe_compress ();
 
-  os << "# nnz: "      << nzmax () << "\n";
+  os << "# nnz: "      << nnz () << "\n";
   os << "# rows: "     << dv (0) << "\n";
   os << "# columns: "  << dv (1) << "\n";
 
   os << this->matrix;
 
   return true;
 }
 
diff --git a/src/ov-bool-sparse.cc b/src/ov-bool-sparse.cc
--- a/src/ov-bool-sparse.cc
+++ b/src/ov-bool-sparse.cc
@@ -212,17 +212,17 @@ octave_sparse_bool_matrix::save_binary (
   if (d.length() < 1)
     return false;
 
   // Ensure that additional memory is deallocated
   matrix.maybe_compress ();
 
   int nr = d(0);
   int nc = d(1);
-  int nz = nzmax ();
+  int nz = nnz ();
 
   int32_t itmp;
   // Use negative value for ndims to be consistent with other formats
   itmp= -2;        
   os.write (reinterpret_cast<char *> (&itmp), 4);
   
   itmp= nr;    
   os.write (reinterpret_cast<char *> (&itmp), 4);
@@ -422,17 +422,17 @@ octave_sparse_bool_matrix::save_hdf5 (hi
 #endif
   if (data_hid < 0) 
     {
       H5Sclose (space_hid);
       H5Gclose (group_hid);
       return false;
     }
   
-  tmp = m.nzmax ();
+  tmp = m.nnz ();
   retval = H5Dwrite (data_hid, H5T_NATIVE_IDX, H5S_ALL, H5S_ALL,
                      H5P_DEFAULT, &tmp) >= 0;
   H5Dclose (data_hid);
   if (!retval)
     {
       H5Sclose (space_hid);
       H5Gclose (group_hid);
       return false;
@@ -473,17 +473,17 @@ octave_sparse_bool_matrix::save_hdf5 (hi
     {
       H5Sclose (space_hid);
       H5Gclose (group_hid);
       return false;
     }    
 
   H5Sclose (space_hid);
 
-  hdims[0] = m.nzmax ();
+  hdims[0] = m.nnz ();
   hdims[1] = 1;
 
   space_hid = H5Screate_simple (2, hdims, 0);
 
   if (space_hid < 0) 
     {
       H5Gclose (group_hid);
       return false;
@@ -523,18 +523,18 @@ octave_sparse_bool_matrix::save_hdf5 (hi
 #endif
   if (data_hid < 0) 
     {
       H5Sclose (space_hid);
       H5Gclose (group_hid);
       return false;
     }
 
-  OCTAVE_LOCAL_BUFFER (hbool_t, htmp, m.nzmax ());  
-  for (int i = 0; i < m.nzmax (); i++)
+  OCTAVE_LOCAL_BUFFER (hbool_t, htmp, m.nnz ());  
+  for (int i = 0; i < m.nnz (); i++)
     htmp[i] = m.xdata(i);
 
   retval = H5Dwrite (data_hid, H5T_NATIVE_HBOOL, H5S_ALL, H5S_ALL,
                      H5P_DEFAULT, htmp) >= 0;
   H5Dclose (data_hid);
   H5Sclose (space_hid);
   H5Gclose (group_hid);
 
diff --git a/src/ov-cx-sparse.cc b/src/ov-cx-sparse.cc
--- a/src/ov-cx-sparse.cc
+++ b/src/ov-cx-sparse.cc
@@ -231,17 +231,17 @@ octave_sparse_complex_matrix::save_binar
   if (d.length() < 1)
     return false;
 
   // Ensure that additional memory is deallocated
   matrix.maybe_compress ();
 
   int nr = d(0);
   int nc = d(1);
-  int nz = nzmax ();
+  int nz = nnz ();
 
   int32_t itmp;
   // Use negative value for ndims to be consistent with other formats
   itmp= -2;        
   os.write (reinterpret_cast<char *> (&itmp), 4);
   
   itmp= nr;    
   os.write (reinterpret_cast<char *> (&itmp), 4);
@@ -258,17 +258,17 @@ octave_sparse_complex_matrix::save_binar
       if (matrix.too_large_for_float ())
         {
           warning ("save: some values too large to save as floats --");
           warning ("save: saving as doubles instead");
         }
       else
         st = LS_FLOAT;
     }
-  else if (matrix.nzmax () > 8192) // FIXME -- make this configurable.
+  else if (matrix.nnz () > 8192) // FIXME -- make this configurable.
     {
       double max_val, min_val;
       if (matrix.all_integers (max_val, min_val))
         st = get_save_type (max_val, min_val);
     }
 
   // add one to the printed indices to go from
   // zero-based to one-based arrays
@@ -458,17 +458,17 @@ octave_sparse_complex_matrix::save_hdf5 
 #endif
   if (data_hid < 0) 
     {
       H5Sclose (space_hid);
       H5Gclose (group_hid);
       return false;
     }
   
-  tmp = m.nzmax ();
+  tmp = m.nnz ();
   retval = H5Dwrite (data_hid, H5T_NATIVE_IDX, H5S_ALL, H5S_ALL,
                      H5P_DEFAULT, &tmp) >= 0;
   H5Dclose (data_hid);
   if (!retval)
     {
       H5Sclose (space_hid);
       H5Gclose (group_hid);
       return false;
@@ -509,17 +509,17 @@ octave_sparse_complex_matrix::save_hdf5 
     {
       H5Sclose (space_hid);
       H5Gclose (group_hid);
       return false;
     }    
 
   H5Sclose (space_hid);
 
-  hdims[0] = m.nzmax ();
+  hdims[0] = m.nnz ();
   hdims[1] = 1;
 
   space_hid = H5Screate_simple (2, hdims, 0);
 
   if (space_hid < 0) 
     {
       H5Gclose (group_hid);
       return false;
diff --git a/src/ov-re-sparse.cc b/src/ov-re-sparse.cc
--- a/src/ov-re-sparse.cc
+++ b/src/ov-re-sparse.cc
@@ -264,17 +264,17 @@ octave_sparse_matrix::save_binary (std::
   if (d.length() < 1)
     return false;
 
   // Ensure that additional memory is deallocated
   matrix.maybe_compress ();
 
   int nr = d(0);
   int nc = d(1);
-  int nz = nzmax ();
+  int nz = nnz ();
 
   int32_t itmp;
   // Use negative value for ndims to be consistent with other formats
   itmp= -2;        
   os.write (reinterpret_cast<char *> (&itmp), 4);
   
   itmp= nr;    
   os.write (reinterpret_cast<char *> (&itmp), 4);
@@ -291,17 +291,17 @@ octave_sparse_matrix::save_binary (std::
       if (matrix.too_large_for_float ())
         {
           warning ("save: some values too large to save as floats --");
           warning ("save: saving as doubles instead");
         }
       else
         st = LS_FLOAT;
     }
-  else if (matrix.nzmax () > 8192) // FIXME -- make this configurable.
+  else if (matrix.nnz () > 8192) // FIXME -- make this configurable.
     {
       double max_val, min_val;
       if (matrix.all_integers (max_val, min_val))
         st = get_save_type (max_val, min_val);
     }
 
   // add one to the printed indices to go from
   // zero-based to one-based arrays
@@ -488,17 +488,17 @@ octave_sparse_matrix::save_hdf5 (hid_t l
 #endif
   if (data_hid < 0) 
     {
       H5Sclose (space_hid);
       H5Gclose (group_hid);
       return false;
     }
   
-  tmp = m.nzmax ();
+  tmp = m.nnz ();
   retval = H5Dwrite (data_hid, H5T_NATIVE_IDX, H5S_ALL, H5S_ALL, H5P_DEFAULT,
                      &tmp) >= 0;
   H5Dclose (data_hid);
   if (!retval)
     {
       H5Sclose (space_hid);
       H5Gclose (group_hid);
       return false;
@@ -539,17 +539,17 @@ octave_sparse_matrix::save_hdf5 (hid_t l
     {
       H5Sclose (space_hid);
       H5Gclose (group_hid);
       return false;
     }    
 
   H5Sclose (space_hid);
 
-  hdims[0] = m.nzmax ();
+  hdims[0] = m.nnz ();
   hdims[1] = 1;
 
   space_hid = H5Screate_simple (2, hdims, 0);
 
   if (space_hid < 0) 
     {
       H5Gclose (group_hid);
       return false;
diff --git a/src/sparse-xpow.cc b/src/sparse-xpow.cc
--- a/src/sparse-xpow.cc
+++ b/src/sparse-xpow.cc
@@ -302,17 +302,17 @@ octave_value
 elem_xpow (const SparseMatrix& a, double b)
 {
   // FIXME What should a .^ 0 give?? Matlab gives a 
   // sparse matrix with same structure as a, which is strictly
   // incorrect. Keep compatiability.
 
   octave_value retval;
 
-  octave_idx_type nz = a.nzmax ();
+  octave_idx_type nz = a.nnz ();
 
   if (b <= 0.0)
     {
       octave_idx_type nr = a.rows ();
       octave_idx_type nc = a.cols ();
 
       if (static_cast<int> (b) != b && a.any_element_is_negative ())
         {
@@ -469,17 +469,17 @@ elem_xpow (const SparseMatrix& a, const 
 {
   octave_value retval;
 
   if (b == 0.0)
     // Can this case ever happen, due to automatic retyping with maybe_mutate?
     retval = octave_value (NDArray (a.dims (), 1));
   else
     {
-      octave_idx_type nz = a.nzmax ();
+      octave_idx_type nz = a.nnz ();
       SparseComplexMatrix result (a);
       
       for (octave_idx_type i = 0; i < nz; i++)
         {
           octave_quit ();
           result.data (i) = std::pow (Complex (a.data (i)), b);
         }
   
@@ -597,17 +597,17 @@ elem_xpow (const SparseComplexMatrix& a,
                 result (a.ridx(i), j) = std::pow (a.data (i), b);
               }
         }  
 
       retval = result;
     }
   else
     {
-      octave_idx_type nz = a.nzmax ();
+      octave_idx_type nz = a.nnz ();
 
       SparseComplexMatrix result (a);
   
       if (xisint (b))
         {
           for (octave_idx_type i = 0; i < nz; i++)
             {
               octave_quit ();
@@ -676,17 +676,17 @@ elem_xpow (const SparseComplexMatrix& a,
   octave_value retval;
 
   if (b == 0.0)
     // Can this case ever happen, due to automatic retyping with maybe_mutate?
     retval = octave_value (NDArray (a.dims (), 1));
   else
     {
 
-      octave_idx_type nz = a.nzmax ();
+      octave_idx_type nz = a.nnz ();
 
       SparseComplexMatrix result (a);
 
       for (octave_idx_type i = 0; i < nz; i++)
         {
           octave_quit ();
           result.data (i) = std::pow (a.data (i), b);
         }
