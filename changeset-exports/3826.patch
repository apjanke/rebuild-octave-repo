# HG changeset patch
# User jwe
# Date 988779691 0
#      Wed May 02 05:01:31 2001 +0000
# Node ID 2184d16975a2f7990e60c28f965f2262304df22b
# Parent  74255bd05bdd8eb95d61c20ae3617cea2f0a952d
[project @ 2001-05-02 05:01:31 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2001-04-27  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* DLD-FUNCTIONS/sort.cc (mx_sort): Check for NaNs in comparisons.
+
 2001-04-26  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Makefile.in (OCTAVE_LIBS): Delete $(LIBREADLINE) from the list.
 	(octave): Delete TERMLIBS from link command.
 	* oct-conf.h.in: Delete references to LIBREADLINE, TERMLIBS.
 	* toplev.cc (octave_config_info): Delete entries for LIBREADLINE,
 	TERMLIBS.
 
diff --git a/src/DLD-FUNCTIONS/sort.cc b/src/DLD-FUNCTIONS/sort.cc
--- a/src/DLD-FUNCTIONS/sort.cc
+++ b/src/DLD-FUNCTIONS/sort.cc
@@ -19,16 +19,18 @@ along with Octave; see the file COPYING.
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
+#include "lo-mappers.h"
+
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
 #include "oct-obj.h"
 
 // This is algorithm 5.2.4L from Knuth, Volume 3.
 
 // XXX FIXME XXX -- there is way too much duplicated code here given
@@ -170,17 +172,17 @@ mx_sort (const Matrix& m)
       return retval;
     }
   else if (nr > 1 && nc > 0)
     {
       for (int j = 0; j < nc; j++)
 	{
 	  Array<int> l = create_index_array (nr);
 
-	  DO_SORT (nr, (m (p-1, j) > m (q-1, j)));
+	  DO_SORT (nr, (xisnan (m (p-1, j)) || m (p-1, j) > m (q-1, j)));
 
 	  MATRIX_CREATE_RETURN_VALUES (ms, m);
 	}
     }
 
   retval(1) = idx;
   retval(0) = ms;
 
@@ -203,17 +205,17 @@ mx_sort (const RowVector& v)
       retval(0) = v;
 
       return retval;
     }
   else if (n > 1)
     {
       Array<int> l = create_index_array (n);
 
-      DO_SORT (n, (v (p-1) > v (q-1)));
+      DO_SORT (n, (xisnan (v (p-1)) || v (p-1) > v (q-1)));
 
       VECTOR_CREATE_RETURN_VALUES (vs, v);
     }
 
   retval(1) = idx;
   retval(0) = vs;
 
   return retval;
@@ -238,26 +240,28 @@ mx_sort (const ComplexMatrix& cm)
       return retval;
     }
   else if (nr > 1 && nc > 0)
     {
       for (int j = 0; j < nc; j++)
 	{
 	  Array<int> l = create_index_array (nr);
 
-	  int all_elts_real = 1;
+	  bool all_elts_real = true;
 	  for (int i = 0; i < nr; i++)
 	    if (imag (cm (i, j)) != 0.0)
 	      {
-		all_elts_real = 0;
+		all_elts_real = false;
 		break;
 	      }
 
 	  DO_SORT (nr, ((all_elts_real
-			 && real (cm (p-1, j)) > real (cm (q-1, j)))
+			 && (xisnan (real (cm (p-1, j)))
+			     || real (cm (p-1, j)) > real (cm (q-1, j))))
+			|| xisnan (cm (p-1, j))
 			|| abs (cm (p-1, j)) > abs (cm (q-1, j))));
 
 	  MATRIX_CREATE_RETURN_VALUES (cms, cm);
 	}
     }
 
   retval(1) = idx;
   retval(0) = cms;
@@ -281,26 +285,28 @@ mx_sort (ComplexRowVector& cv)
       retval(0) = cv;
 
       return retval;
     }
   else if (n > 1)
     {
       Array<int> l = create_index_array (n);
 
-      int all_elts_real = 1;
+      bool all_elts_real = true;
       for (int i = 0; i < n; i++)
 	if (imag (cv (i)) != 0.0)
 	  {
-	    all_elts_real = 0;
+	    all_elts_real = false;
 	    break;
 	  }
 
       DO_SORT (n, ((all_elts_real
-		    && real (cv (p-1)) > real (cv (q-1)))
+		    && (xisnan (real (cv (p-1)))
+			|| real (cv (p-1)) > real (cv (q-1))))
+		   || xisnan (cv (p-1))
 		   || abs (cv (p-1)) > abs (cv (q-1))));
 
       VECTOR_CREATE_RETURN_VALUES (cvs, cv);
     }
 
   retval(1) = idx;
   retval(0) = cvs;
 
