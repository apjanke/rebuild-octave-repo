# HG changeset patch
# User Torsten <mttl@mailbox.org>
# Date 1545499034 -3600
#      Sat Dec 22 18:17:14 2018 +0100
# Branch stable
# Node ID f73bcf1d0b5a935d99cc4cb4cd5ab85c29d8532e
# Parent  9644c0b7efd8c39f9149fd3f3763cb35c8273c24
make SYSTEM alias for locale encoding if not suported on windows (bug #55139)

* file-editor-tab.cc (save_file): call new version of check_valid_codec
  resulting the codec for the current encoding name and return if codec
  is nullptr;
  (check_valid_codec): without paremeter, gives codec for current
  encoding name or nullptr, SYSTEM is allowed on windows even if not
  resulting in a valid codec, then codecForLocale is used;

* file-editor-tab.h: new version of check_valid_codec

* resource-manager.cc (do_get_codecs): add default string to the list of all
  codec name if on windows;
  (do_combo_encoding): default encoding exists even if SYSTEM is not
  supported, since it is then used as alias for codecForLocale

diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -2140,23 +2140,19 @@ namespace octave
         return;
       }
 
     // save the contents into the file
 
     _encoding = _new_encoding;    // consider a possible new encoding
 
     // set the desired codec (if suitable for contents)
-    QTextCodec *codec = QTextCodec::codecForName (_encoding.toLatin1 ());
-
-    if (check_valid_codec (codec))
-      {
-        save_file_as (remove_on_success);
-        return;
-      }
+    QTextCodec *codec = check_valid_codec ();
+    if (! codec)
+      return;   // No valid codec
 
     // write the file
     QTextStream out (&file);
     out.setCodec (codec);
 
     QApplication::setOverrideCursor (Qt::WaitCursor);
     out << _edit_area->text ();
     out.flush ();
@@ -2300,44 +2296,49 @@ namespace octave
 
         if (ans == QMessageBox::Yes)
           return true;
       }
 
     return false;
   }
 
-  bool file_editor_tab::check_valid_codec (QTextCodec *codec)
+  QTextCodec* file_editor_tab::check_valid_codec ()
   {
+    QTextCodec *codec = QTextCodec::codecForName (_encoding.toLatin1 ());
+
+    // "SYSTEM" is used as alias for locale on windows systems,
+    // which might not support "SYSTEM" codec
+    if ((! codec) && (_encoding == "SYSTEM"))
+      codec = QTextCodec::codecForLocale ();
+
     if (! codec)
       {
         QMessageBox::critical (nullptr,
                                tr ("Octave Editor"),
                                tr ("The current encoding %1\n"
                                    "can not be applied.\n\n"
-                                   "Please select another one or cancel saving!").arg (_encoding));
-
-        return true;
+                                   "Please select another one!").arg (_encoding));
+
+        return nullptr;
       }
 
     if (! codec->canEncode (_edit_area->text ()))
       {
-        int ans = QMessageBox::warning (nullptr,
-                                        tr ("Octave Editor"),
-                                        tr ("The current editor contents can not be encoded\n"
-                                            "with the selected encoding %1.\n"
-                                            "Using it will result in data loss!\n\n"
-                                            "Do you want to choose another encoding?").arg (_encoding),
-                                        QMessageBox::Yes | QMessageBox::No, QMessageBox::Yes);
-
-        if (ans == QMessageBox::Yes)
-          return true;
+        QMessageBox::critical (nullptr,
+                               tr ("Octave Editor"),
+                               tr ("The current editor contents can not be encoded\n"
+                                   "with the selected encoding %1.\n"
+                                   "Using it would result in data loss!\n\n"
+                                   "Please select another one!").arg (_encoding));
+
+        return nullptr;
       }
 
-    return false;
+    return codec;
   }
 
   void file_editor_tab::handle_save_file_as_answer (const QString& saveFileName)
   {
     if (_save_as_desired_eol != _edit_area->eolMode ())
       convert_eol (this,_save_as_desired_eol);
 
     if (saveFileName == _file_name)
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -246,17 +246,17 @@ namespace octave
 
     bool valid_file_name (const QString& file = QString ());
     bool exit_debug_and_clear (const QString& full_name,
                                const QString& base_name);
     void save_file (const QString& saveFileName, bool remove_on_success = false,
                     bool restore_breakpoints = true);
     void save_file_as (bool remove_on_success = false);
     bool check_valid_identifier (QString file_name);
-    bool check_valid_codec (QTextCodec *codec);
+    QTextCodec* check_valid_codec (void);
 
     bool unchanged_or_saved (void);
 
     void update_lexer (void);
     void update_lexer_settings (void);
 
     void show_dialog (QDialog *dlg, bool modal);
     int check_file_modified (void);
diff --git a/libgui/src/resource-manager.cc b/libgui/src/resource-manager.cc
--- a/libgui/src/resource-manager.cc
+++ b/libgui/src/resource-manager.cc
@@ -381,31 +381,40 @@ namespace octave
   {
     // get the codec name for each mib
     QList<int> all_mibs = QTextCodec::availableMibs ();
     foreach (int mib, all_mibs)
       {
         QTextCodec *c = QTextCodec::codecForMib (mib);
         codecs->append (c->name ().toUpper ());
       }
+
+    // If on windows append SYSTEM even if not supported
+    if (ed_default_enc.def.toString () == "SYSTEM")
+      codecs->append (ed_default_enc.def.toString ());
+
+    // Clean up and sort list of codecs
     codecs->removeDuplicates ();
     qSort (*codecs);
   }
 
   // initialize a given combo box with available text encodings
   void resource_manager::do_combo_encoding (QComboBox *combo, QString current)
   {
     QStringList all_codecs;
     do_get_codecs (&all_codecs);
 
     // get the value from the settings file if no current encoding is given
     QString enc = current;
 
+    // Check for valid codec for the default. Allow "SYSTEM" even no valid
+    // codec exists, since codecForLocale will be chosen in this case
     bool default_exists = false;
-    if (QTextCodec::codecForName (ed_default_enc.def.toString ().toLatin1 ()))
+    if (QTextCodec::codecForName (ed_default_enc.def.toString ().toLatin1 ())
+        || (ed_default_enc.def.toString () == "SYSTEM"))
       default_exists = true;
 
     if (enc.isEmpty ())
       {
         enc = m_settings->value (ed_default_enc.key, ed_default_enc.def).toString ();
 
         if (enc.isEmpty ())  // still empty?
           {
