# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1289284125 18000
#      Tue Nov 09 01:28:45 2010 -0500
# Node ID b79924abf776260b095d7941c7fee689f9f077d7
# Parent  94d9d412a2a07b902b1df7830edd893933dca167
Array.cc: use comparisons to sortmode values instead of testing mode directly

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -1706,17 +1706,17 @@ Array<T>::sort (int dim, sortmode mode) 
   for (int i = 0; i < dim; i++)
     stride *= dv(i);
 
   T *v = m.fortran_vec ();
   const T *ov = data ();
 
   octave_sort<T> lsort;
   
-  if (mode) 
+  if (mode != UNSORTED) 
     lsort.set_compare (mode);
   else
     return m;
 
   if (stride == 1)
     {
       for (octave_idx_type j = 0; j < iter; j++)
         {
@@ -1828,17 +1828,17 @@ Array<T>::sort (Array<octave_idx_type> &
   T *v = m.fortran_vec ();
   const T *ov = data ();
 
   octave_sort<T> lsort;
 
   sidx = Array<octave_idx_type> (dv);
   octave_idx_type *vi = sidx.fortran_vec ();
   
-  if (mode) 
+  if (mode != UNSORTED) 
     lsort.set_compare (mode);
   else
     return m;
 
   if (stride == 1)
     {
       for (octave_idx_type j = 0; j < iter; j++)
         {
@@ -1965,29 +1965,29 @@ Array<T>::is_sorted (sortmode mode) cons
 {
   octave_sort<T> lsort;
 
   octave_idx_type n = numel ();
 
   if (n <= 1)
     return mode ? mode : ASCENDING;
 
-  if (! mode)
+  if (mode == UNSORTED)
     {
       // Auto-detect mode.
       compare_fcn_type compare
         = safe_comparator (ASCENDING, *this, false);
 
       if (compare (elem (n-1), elem (0)))
         mode = DESCENDING;
       else
         mode = ASCENDING;
     }
 
-  if (mode)
+  if (mode != UNSORTED)
     {
       lsort.set_compare (safe_comparator (mode, *this, false));
 
       if (! lsort.is_sorted (data (), n))
         mode = UNSORTED;
     }
 
   return mode;
@@ -2018,17 +2018,17 @@ Array<T>::is_sorted_rows (sortmode mode)
 {
   octave_sort<T> lsort;
 
   octave_idx_type r = rows (), c = cols ();
 
   if (r <= 1 || c == 0)
     return mode ? mode : ASCENDING;
 
-  if (! mode)
+  if (mode == UNSORTED)
     {
       // Auto-detect mode.
       compare_fcn_type compare
         = safe_comparator (ASCENDING, *this, false);
 
       octave_idx_type i;
       for (i = 0; i < cols (); i++)
         {
@@ -2049,21 +2049,21 @@ Array<T>::is_sorted_rows (sortmode mode)
                 {
                   mode = UNSORTED;
                   break;
                 }
               else
                 mode = DESCENDING;
             }
         }
-      if (! mode && i == cols ())
+      if (mode == UNSORTED && i == cols ())
         mode = ASCENDING;
     }
 
-  if (mode)
+  if (mode != UNSORTED)
     {
       lsort.set_compare (safe_comparator (mode, *this, false));
 
       if (! lsort.is_sorted_rows (data (), r, c))
         mode = UNSORTED;
     }
 
   return mode;
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,14 @@
+2010-11-09  John W. Eaton  <jwe@octave.org>
+
+	* Array.cc (Array<T>::sort, Array<T>::is_sorted,
+	Array<T>::is_sorted_rows): Use comparisons to sortmode values
+	instead of testing mode directly.
+
 2010-11-09  John W. Eaton  <jwe@octave.org>
 
 	* lo-mappers.cc (xmod, xrem): New functions.
 	(mod): Delete.
 	* lo-mappers.h (xmod, xrem): Provide decls.
 
 2010-10-31  Michael Goffioul  <michael.goffioul@gmail.com>
 
