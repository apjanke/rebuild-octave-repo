# HG changeset patch
# User Daniel Kraft <d@domob.eu>
# Date 1316717490 -7200
#      Thu Sep 22 20:51:30 2011 +0200
# Node ID 6d57e53b21ea7145b0754cdf0088f4ad558b4fed
# Parent  4e92b71dcc97f1bea62f45986d42fecf9a144c1f
Add field for total time to hierarchical profile.

profiler.h: Add new argument (for additional output) to get_hierarchical.
profiler.cc: Calculate total time when generating the hierarchical profile.

diff --git a/src/profiler.cc b/src/profiler.cc
--- a/src/profiler.cc
+++ b/src/profiler.cc
@@ -19,17 +19,16 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
-#include <cstddef>
 #include <iostream>
 
 #include "defun.h"
 #include "oct-time.h"
 #include "ov-struct.h"
 #include "pager.h"
 #include "profiler.h"
 
@@ -140,49 +139,56 @@ profile_data_accumulator::tree_node::bui
 
   // Recurse on children.
   for (child_map::const_iterator i = children.begin ();
        i != children.end (); ++i)
     i->second->build_flat (data);
 }
 
 octave_value
-profile_data_accumulator::tree_node::get_hierarchical (void) const
+profile_data_accumulator::tree_node::get_hierarchical (double* total) const
 {
   /* Note that we don't generate the entry just for this node, but rather
      a struct-array with entries for all children.  This way, the top-node
      (for which we don't want a real entry) generates already the final
      hierarchical profile data.  */
 
   const octave_idx_type n = children.size ();
 
   Cell rv_indices (n, 1);
   Cell rv_times (n, 1);
+  Cell rv_totals (n, 1);
   Cell rv_calls (n, 1);
   Cell rv_children (n, 1);
 
   octave_idx_type i = 0;
   for (child_map::const_iterator p = children.begin ();
        p != children.end (); ++p)
     {
       const tree_node& entry = *p->second;
+      double child_total = entry.time;
 
       rv_indices(i) = octave_value (p->first);
       rv_times(i) = octave_value (entry.time);
       rv_calls(i) = octave_value (entry.calls);
-      rv_children(i) = entry.get_hierarchical ();
+      rv_children(i) = entry.get_hierarchical (&child_total);
+      rv_totals(i) = octave_value (child_total);
+
+      if (total)
+        *total += child_total;
 
       ++i;
     }
   assert (i == n);
 
   octave_map retval;
 
   retval.assign ("Index", rv_indices);
   retval.assign ("SelfTime", rv_times);
+  retval.assign ("TotalTime", rv_totals);
   retval.assign ("NumCalls", rv_calls);
   retval.assign ("Children", rv_children);
 
   return retval;
 }
 
 profile_data_accumulator::profile_data_accumulator ()
   : known_functions (), fcn_index (),
diff --git a/src/profiler.h b/src/profiler.h
--- a/src/profiler.h
+++ b/src/profiler.h
@@ -18,16 +18,17 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, see
 <http://www.gnu.org/licenses/>.
 
 */
 
 #if !defined (octave_profiler_h)
 #define octave_profiler_h 1
 
+#include <cstddef>
 #include <map>
 #include <set>
 #include <string>
 #include <vector>
 
 class octave_value;
 
 class
@@ -108,17 +109,21 @@ private:
     tree_node* enter (octave_idx_type);
 
     // Exit function.  As a sanity-check, it is verified that the currently
     // active function actually is the one handed in here.  Returned is the
     // then-active node, which is our parent.
     tree_node* exit (octave_idx_type);
 
     void build_flat (flat_profile&) const;
-    octave_value get_hierarchical (void) const;
+
+    // Get the hierarchical profile for this node and its children.  If total
+    // is set, accumulate total time of the subtree in that variable as
+    // additional return value.
+    octave_value get_hierarchical (double* total = NULL) const;
 
   private:
 
     tree_node* parent;
     octave_idx_type fcn_id;
 
     typedef std::map<octave_idx_type, tree_node*> child_map;
     child_map children;
