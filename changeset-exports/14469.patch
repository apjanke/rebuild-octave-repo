# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1331866981 25200
#      Thu Mar 15 20:03:01 2012 -0700
# Node ID 29aabe9b37a2e1de0fcc90ff950a556491c5ee54
# Parent  d16638f73691312020556f6cb5f3b004f10ca4fc
Rename array-as-vector, array-as-scalar warning IDs to match documentation (bug #35838)

* NEWS: Note change in name of warning IDS

* ov-base-diag.cc, ov-bool-mat.cc, ov-bool-sparse.cc, ov-ch-mat.cc,
ov-cx-mat.cc, ov-cx-sparse.cc, ov-flt-cx-mat.cc, ov-flt-re-mat.cc, ov-intx.h,
ov-perm.cc, ov-range.cc, ov-re-mat.cc, ov-re-sparse.cc, ov.cc: Rename
array-as-vector, array-as-scalar warning IDs to array-to-vector, array-to-scalar

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -1,11 +1,16 @@
 Summary of important user-visible changes for version 3.8:
 ---------------------------------------------------------
 
+ ** Warning IDs renamed:
+
+    Octave:array-as-scalar => Octave:array-to-scalar
+    Octave:array-as-vector => Octave:array-to-vector
+
  ** Other new functions added in 3.8.0:
 
       colorcube
       lines
       rgbplot
 
  ** Deprecated functions.
 
diff --git a/src/ov-base-diag.cc b/src/ov-base-diag.cc
--- a/src/ov-base-diag.cc
+++ b/src/ov-base-diag.cc
@@ -212,17 +212,17 @@ octave_base_diag<DMT, MT>::double_value 
   typedef typename DMT::element_type el_type;
 
   if (helper_iscomplex (el_type ()) && ! force_conversion)
     gripe_implicit_conversion ("Octave:imag-to-real",
                                "complex matrix", "real scalar");
 
   if (numel () > 0)
     {
-      gripe_implicit_conversion ("Octave:array-as-scalar",
+      gripe_implicit_conversion ("Octave:array-to-scalar",
                                  type_name (), "real scalar");
 
       retval = helper_getreal (el_type (matrix (0, 0)));
     }
   else
     gripe_invalid_conversion (type_name (), "real scalar");
 
   return retval;
@@ -236,17 +236,17 @@ octave_base_diag<DMT, MT>::float_value (
   typedef typename DMT::element_type el_type;
 
   if (helper_iscomplex (el_type ()) && ! force_conversion)
     gripe_implicit_conversion ("Octave:imag-to-real",
                                "complex matrix", "real scalar");
 
   if (numel () > 0)
     {
-      gripe_implicit_conversion ("Octave:array-as-scalar",
+      gripe_implicit_conversion ("Octave:array-to-scalar",
                                  type_name (), "real scalar");
 
       retval = helper_getreal (el_type (matrix (0, 0)));
     }
   else
     gripe_invalid_conversion (type_name (), "real scalar");
 
   return retval;
@@ -257,17 +257,17 @@ Complex
 octave_base_diag<DMT, MT>::complex_value (bool) const
 {
   double tmp = lo_ieee_nan_value ();
 
   Complex retval (tmp, tmp);
 
   if (rows () > 0 && columns () > 0)
     {
-      gripe_implicit_conversion ("Octave:array-as-scalar",
+      gripe_implicit_conversion ("Octave:array-to-scalar",
                                  type_name (), "complex scalar");
 
       retval = matrix (0, 0);
     }
   else
     gripe_invalid_conversion (type_name (), "complex scalar");
 
   return retval;
@@ -278,17 +278,17 @@ FloatComplex
 octave_base_diag<DMT, MT>::float_complex_value (bool) const
 {
   float tmp = lo_ieee_float_nan_value ();
 
   FloatComplex retval (tmp, tmp);
 
   if (rows () > 0 && columns () > 0)
     {
-      gripe_implicit_conversion ("Octave:array-as-scalar",
+      gripe_implicit_conversion ("Octave:array-to-scalar",
                                  type_name (), "complex scalar");
 
       retval = matrix (0, 0);
     }
   else
     gripe_invalid_conversion (type_name (), "complex scalar");
 
   return retval;
diff --git a/src/ov-bool-mat.cc b/src/ov-bool-mat.cc
--- a/src/ov-bool-mat.cc
+++ b/src/ov-bool-mat.cc
@@ -92,17 +92,17 @@ octave_bool_matrix::try_narrowing_conver
 
 double
 octave_bool_matrix::double_value (bool) const
 {
   double retval = lo_ieee_nan_value ();
 
   if (rows () > 0 && columns () > 0)
     {
-      gripe_implicit_conversion ("Octave:array-as-scalar",
+      gripe_implicit_conversion ("Octave:array-to-scalar",
                                  "bool matrix", "real scalar");
 
       retval = matrix (0, 0);
     }
   else
     gripe_invalid_conversion ("bool matrix", "real scalar");
 
   return retval;
@@ -110,17 +110,17 @@ octave_bool_matrix::double_value (bool) 
 
 float
 octave_bool_matrix::float_value (bool) const
 {
   float retval = lo_ieee_float_nan_value ();
 
   if (rows () > 0 && columns () > 0)
     {
-      gripe_implicit_conversion ("Octave:array-as-scalar",
+      gripe_implicit_conversion ("Octave:array-to-scalar",
                                  "bool matrix", "real scalar");
 
       retval = matrix (0, 0);
     }
   else
     gripe_invalid_conversion ("bool matrix", "real scalar");
 
   return retval;
@@ -130,17 +130,17 @@ Complex
 octave_bool_matrix::complex_value (bool) const
 {
   double tmp = lo_ieee_nan_value ();
 
   Complex retval (tmp, tmp);
 
   if (rows () > 0 && columns () > 0)
     {
-      gripe_implicit_conversion ("Octave:array-as-scalar",
+      gripe_implicit_conversion ("Octave:array-to-scalar",
                                  "bool matrix", "complex scalar");
 
       retval = matrix (0, 0);
     }
   else
     gripe_invalid_conversion ("bool matrix", "complex scalar");
 
   return retval;
@@ -150,17 +150,17 @@ FloatComplex
 octave_bool_matrix::float_complex_value (bool) const
 {
   float tmp = lo_ieee_float_nan_value ();
 
   FloatComplex retval (tmp, tmp);
 
   if (rows () > 0 && columns () > 0)
     {
-      gripe_implicit_conversion ("Octave:array-as-scalar",
+      gripe_implicit_conversion ("Octave:array-to-scalar",
                                  "bool matrix", "complex scalar");
 
       retval = matrix (0, 0);
     }
   else
     gripe_invalid_conversion ("bool matrix", "complex scalar");
 
   return retval;
diff --git a/src/ov-bool-sparse.cc b/src/ov-bool-sparse.cc
--- a/src/ov-bool-sparse.cc
+++ b/src/ov-bool-sparse.cc
@@ -95,17 +95,17 @@ octave_sparse_bool_matrix::try_narrowing
 double
 octave_sparse_bool_matrix::double_value (bool) const
 {
   double retval = lo_ieee_nan_value ();
 
   if (numel () > 0)
     {
       if (numel () > 1)
-        gripe_implicit_conversion ("Octave:array-as-scalar",
+        gripe_implicit_conversion ("Octave:array-to-scalar",
                                    "bool sparse matrix", "real scalar");
 
       retval = matrix (0, 0);
     }
   else
     gripe_invalid_conversion ("bool sparse matrix", "real scalar");
 
   return retval;
@@ -116,17 +116,17 @@ octave_sparse_bool_matrix::complex_value
 {
   double tmp = lo_ieee_nan_value ();
 
   Complex retval (tmp, tmp);
 
   if (rows () > 0 && columns () > 0)
     {
       if (numel () > 1)
-        gripe_implicit_conversion ("Octave:array-as-scalar",
+        gripe_implicit_conversion ("Octave:array-to-scalar",
                                    "bool sparse matrix", "complex scalar");
 
       retval = matrix (0, 0);
     }
   else
     gripe_invalid_conversion ("bool sparse matrix", "complex scalar");
 
   return retval;
diff --git a/src/ov-ch-mat.cc b/src/ov-ch-mat.cc
--- a/src/ov-ch-mat.cc
+++ b/src/ov-ch-mat.cc
@@ -52,17 +52,17 @@ octave_char_matrix::index_vector (void) 
 
 double
 octave_char_matrix::double_value (bool) const
 {
   double retval = lo_ieee_nan_value ();
 
   if (rows () > 0 && columns () > 0)
     {
-      gripe_implicit_conversion ("Octave:array-as-scalar",
+      gripe_implicit_conversion ("Octave:array-to-scalar",
                                  "character matrix", "real scalar");
 
       retval = static_cast<unsigned char> (matrix (0, 0));
     }
   else
     gripe_invalid_conversion ("character matrix", "real scalar");
 
   return retval;
@@ -70,17 +70,17 @@ octave_char_matrix::double_value (bool) 
 
 float
 octave_char_matrix::float_value (bool) const
 {
   float retval = lo_ieee_float_nan_value ();
 
   if (rows () > 0 && columns () > 0)
     {
-      gripe_implicit_conversion ("Octave:array-as-scalar",
+      gripe_implicit_conversion ("Octave:array-to-scalar",
                                  "character matrix", "real scalar");
 
       retval = static_cast<unsigned char> (matrix (0, 0));
     }
   else
     gripe_invalid_conversion ("character matrix", "real scalar");
 
   return retval;
@@ -90,17 +90,17 @@ Complex
 octave_char_matrix::complex_value (bool) const
 {
   double tmp = lo_ieee_nan_value ();
 
   Complex retval (tmp, tmp);
 
   if (rows () > 0 && columns () > 0)
     {
-      gripe_implicit_conversion ("Octave:array-as-scalar",
+      gripe_implicit_conversion ("Octave:array-to-scalar",
                                  "character matrix", "complex scalar");
 
       retval = static_cast<unsigned char> (matrix (0, 0));
     }
   else
     gripe_invalid_conversion ("character matrix", "complex scalar");
 
   return retval;
@@ -110,17 +110,17 @@ FloatComplex
 octave_char_matrix::float_complex_value (bool) const
 {
   float tmp = lo_ieee_float_nan_value ();
 
   FloatComplex retval (tmp, tmp);
 
   if (rows () > 0 && columns () > 0)
     {
-      gripe_implicit_conversion ("Octave:array-as-scalar",
+      gripe_implicit_conversion ("Octave:array-to-scalar",
                                  "character matrix", "complex scalar");
 
       retval = static_cast<unsigned char> (matrix (0, 0));
     }
   else
     gripe_invalid_conversion ("character matrix", "complex scalar");
 
   return retval;
diff --git a/src/ov-cx-mat.cc b/src/ov-cx-mat.cc
--- a/src/ov-cx-mat.cc
+++ b/src/ov-cx-mat.cc
@@ -103,17 +103,17 @@ octave_complex_matrix::double_value (boo
   double retval = lo_ieee_nan_value ();
 
   if (! force_conversion)
     gripe_implicit_conversion ("Octave:imag-to-real",
                                "complex matrix", "real scalar");
 
   if (rows () > 0 && columns () > 0)
     {
-      gripe_implicit_conversion ("Octave:array-as-scalar",
+      gripe_implicit_conversion ("Octave:array-to-scalar",
                                  "complex matrix", "real scalar");
 
       retval = std::real (matrix (0, 0));
     }
   else
     gripe_invalid_conversion ("complex matrix", "real scalar");
 
   return retval;
@@ -125,17 +125,17 @@ octave_complex_matrix::float_value (bool
   float retval = lo_ieee_float_nan_value ();
 
   if (! force_conversion)
     gripe_implicit_conversion ("Octave:imag-to-real",
                                "complex matrix", "real scalar");
 
   if (rows () > 0 && columns () > 0)
     {
-      gripe_implicit_conversion ("Octave:array-as-scalar",
+      gripe_implicit_conversion ("Octave:array-to-scalar",
                                  "complex matrix", "real scalar");
 
       retval = std::real (matrix (0, 0));
     }
   else
     gripe_invalid_conversion ("complex matrix", "real scalar");
 
   return retval;
@@ -173,17 +173,17 @@ Complex
 octave_complex_matrix::complex_value (bool) const
 {
   double tmp = lo_ieee_nan_value ();
 
   Complex retval (tmp, tmp);
 
   if (rows () > 0 && columns () > 0)
     {
-      gripe_implicit_conversion ("Octave:array-as-scalar",
+      gripe_implicit_conversion ("Octave:array-to-scalar",
                                  "complex matrix", "complex scalar");
 
       retval = matrix (0, 0);
     }
   else
     gripe_invalid_conversion ("complex matrix", "complex scalar");
 
   return retval;
@@ -193,17 +193,17 @@ FloatComplex
 octave_complex_matrix::float_complex_value (bool) const
 {
   float tmp = lo_ieee_float_nan_value ();
 
   FloatComplex retval (tmp, tmp);
 
   if (rows () > 0 && columns () > 0)
     {
-      gripe_implicit_conversion ("Octave:array-as-scalar",
+      gripe_implicit_conversion ("Octave:array-to-scalar",
                                  "complex matrix", "complex scalar");
 
       retval = matrix (0, 0);
     }
   else
     gripe_invalid_conversion ("complex matrix", "complex scalar");
 
   return retval;
diff --git a/src/ov-cx-sparse.cc b/src/ov-cx-sparse.cc
--- a/src/ov-cx-sparse.cc
+++ b/src/ov-cx-sparse.cc
@@ -109,17 +109,17 @@ octave_sparse_complex_matrix::double_val
   if (! force_conversion)
     gripe_implicit_conversion ("Octave:imag-to-real",
                                "complex sparse matrix", "real scalar");
 
   // FIXME -- maybe this should be a function, valid_as_scalar()
   if (numel () > 0)
     {
       if (numel () > 1)
-        gripe_implicit_conversion ("Octave:array-as-scalar",
+        gripe_implicit_conversion ("Octave:array-to-scalar",
                                    "complex sparse matrix", "real scalar");
 
       retval = std::real (matrix (0, 0));
     }
   else
     gripe_invalid_conversion ("complex sparse matrix", "real scalar");
 
   return retval;
@@ -145,17 +145,17 @@ octave_sparse_complex_matrix::complex_va
   double tmp = lo_ieee_nan_value ();
 
   Complex retval (tmp, tmp);
 
   // FIXME -- maybe this should be a function, valid_as_scalar()
   if (numel () > 0)
     {
       if (numel () > 1)
-        gripe_implicit_conversion ("Octave:array-as-scalar",
+        gripe_implicit_conversion ("Octave:array-to-scalar",
                                    "complex sparse matrix", "real scalar");
 
       retval = matrix (0, 0);
     }
   else
     gripe_invalid_conversion ("complex sparse matrix", "real scalar");
 
   return retval;
diff --git a/src/ov-flt-cx-mat.cc b/src/ov-flt-cx-mat.cc
--- a/src/ov-flt-cx-mat.cc
+++ b/src/ov-flt-cx-mat.cc
@@ -92,17 +92,17 @@ octave_float_complex_matrix::double_valu
   double retval = lo_ieee_nan_value ();
 
   if (! force_conversion)
     gripe_implicit_conversion ("Octave:imag-to-real",
                                "complex matrix", "real scalar");
 
   if (rows () > 0 && columns () > 0)
     {
-      gripe_implicit_conversion ("Octave:array-as-scalar",
+      gripe_implicit_conversion ("Octave:array-to-scalar",
                                  "complex matrix", "real scalar");
 
       retval = std::real (matrix (0, 0));
     }
   else
     gripe_invalid_conversion ("complex matrix", "real scalar");
 
   return retval;
@@ -114,17 +114,17 @@ octave_float_complex_matrix::float_value
   float retval = lo_ieee_float_nan_value ();
 
   if (! force_conversion)
     gripe_implicit_conversion ("Octave:imag-to-real",
                                "complex matrix", "real scalar");
 
   if (rows () > 0 && columns () > 0)
     {
-      gripe_implicit_conversion ("Octave:array-as-scalar",
+      gripe_implicit_conversion ("Octave:array-to-scalar",
                                  "complex matrix", "real scalar");
 
       retval = std::real (matrix (0, 0));
     }
   else
     gripe_invalid_conversion ("complex matrix", "real scalar");
 
   return retval;
@@ -162,17 +162,17 @@ Complex
 octave_float_complex_matrix::complex_value (bool) const
 {
   double tmp = lo_ieee_nan_value ();
 
   Complex retval (tmp, tmp);
 
   if (rows () > 0 && columns () > 0)
     {
-      gripe_implicit_conversion ("Octave:array-as-scalar",
+      gripe_implicit_conversion ("Octave:array-to-scalar",
                                  "complex matrix", "complex scalar");
 
       retval = matrix (0, 0);
     }
   else
     gripe_invalid_conversion ("complex matrix", "complex scalar");
 
   return retval;
@@ -182,17 +182,17 @@ FloatComplex
 octave_float_complex_matrix::float_complex_value (bool) const
 {
   float tmp = lo_ieee_float_nan_value ();
 
   FloatComplex retval (tmp, tmp);
 
   if (rows () > 0 && columns () > 0)
     {
-      gripe_implicit_conversion ("Octave:array-as-scalar",
+      gripe_implicit_conversion ("Octave:array-to-scalar",
                                  "complex matrix", "complex scalar");
 
       retval = matrix (0, 0);
     }
   else
     gripe_invalid_conversion ("complex matrix", "complex scalar");
 
   return retval;
diff --git a/src/ov-flt-re-mat.cc b/src/ov-flt-re-mat.cc
--- a/src/ov-flt-re-mat.cc
+++ b/src/ov-flt-re-mat.cc
@@ -91,17 +91,17 @@ octave_float_matrix::try_narrowing_conve
 
 double
 octave_float_matrix::double_value (bool) const
 {
   double retval = lo_ieee_nan_value ();
 
   if (numel () > 0)
     {
-      gripe_implicit_conversion ("Octave:array-as-scalar",
+      gripe_implicit_conversion ("Octave:array-to-scalar",
                                  "real matrix", "real scalar");
 
       retval = matrix (0, 0);
     }
   else
     gripe_invalid_conversion ("real matrix", "real scalar");
 
   return retval;
@@ -109,17 +109,17 @@ octave_float_matrix::double_value (bool)
 
 float
 octave_float_matrix::float_value (bool) const
 {
   float retval = lo_ieee_float_nan_value ();
 
   if (numel () > 0)
     {
-      gripe_implicit_conversion ("Octave:array-as-scalar",
+      gripe_implicit_conversion ("Octave:array-to-scalar",
                                  "real matrix", "real scalar");
 
       retval = matrix (0, 0);
     }
   else
     gripe_invalid_conversion ("real matrix", "real scalar");
 
   return retval;
@@ -143,17 +143,17 @@ Complex
 octave_float_matrix::complex_value (bool) const
 {
   double tmp = lo_ieee_nan_value ();
 
   Complex retval (tmp, tmp);
 
   if (rows () > 0 && columns () > 0)
     {
-      gripe_implicit_conversion ("Octave:array-as-scalar",
+      gripe_implicit_conversion ("Octave:array-to-scalar",
                                  "real matrix", "complex scalar");
 
       retval = matrix (0, 0);
     }
   else
     gripe_invalid_conversion ("real matrix", "complex scalar");
 
   return retval;
@@ -163,17 +163,17 @@ FloatComplex
 octave_float_matrix::float_complex_value (bool) const
 {
   double tmp = lo_ieee_float_nan_value ();
 
   FloatComplex retval (tmp, tmp);
 
   if (rows () > 0 && columns () > 0)
     {
-      gripe_implicit_conversion ("Octave:array-as-scalar",
+      gripe_implicit_conversion ("Octave:array-to-scalar",
                                  "real matrix", "complex scalar");
 
       retval = matrix (0, 0);
     }
   else
     gripe_invalid_conversion ("real matrix", "complex scalar");
 
   return retval;
diff --git a/src/ov-intx.h b/src/ov-intx.h
--- a/src/ov-intx.h
+++ b/src/ov-intx.h
@@ -99,17 +99,17 @@ public:
 
   double
   double_value (bool = false) const
     {
       double retval = lo_ieee_nan_value ();
 
       if (numel () > 0)
         {
-          gripe_implicit_conversion ("Octave:array-as-scalar",
+          gripe_implicit_conversion ("Octave:array-to-scalar",
                                      type_name (), "real scalar");
 
           retval = matrix(0).double_value ();
         }
       else
         gripe_invalid_conversion (type_name (), "real scalar");
 
       return retval;
@@ -118,17 +118,17 @@ public:
 
   float
   float_value (bool = false) const
     {
       float retval = lo_ieee_float_nan_value ();
 
       if (numel () > 0)
         {
-          gripe_implicit_conversion ("Octave:array-as-scalar",
+          gripe_implicit_conversion ("Octave:array-to-scalar",
                                      type_name (), "real scalar");
 
           retval = matrix(0).float_value ();
         }
       else
         gripe_invalid_conversion (type_name (), "real scalar");
 
       return retval;
diff --git a/src/ov-perm.cc b/src/ov-perm.cc
--- a/src/ov-perm.cc
+++ b/src/ov-perm.cc
@@ -130,17 +130,17 @@ octave_perm_matrix::is_true (void) const
 
 double
 octave_perm_matrix::double_value (bool) const
 {
   double retval = lo_ieee_nan_value ();
 
   if (numel () > 0)
     {
-      gripe_implicit_conversion ("Octave:array-as-scalar",
+      gripe_implicit_conversion ("Octave:array-to-scalar",
                                  type_name (), "real scalar");
 
       retval = matrix (0, 0);
     }
   else
     gripe_invalid_conversion (type_name (), "real scalar");
 
   return retval;
@@ -148,17 +148,17 @@ octave_perm_matrix::double_value (bool) 
 
 float
 octave_perm_matrix::float_value (bool) const
 {
   float retval = lo_ieee_float_nan_value ();
 
   if (numel () > 0)
     {
-      gripe_implicit_conversion ("Octave:array-as-scalar",
+      gripe_implicit_conversion ("Octave:array-to-scalar",
                                  type_name (), "real scalar");
 
       retval = matrix (0, 0);
     }
   else
     gripe_invalid_conversion (type_name (), "real scalar");
 
   return retval;
@@ -168,17 +168,17 @@ Complex
 octave_perm_matrix::complex_value (bool) const
 {
   double tmp = lo_ieee_nan_value ();
 
   Complex retval (tmp, tmp);
 
   if (rows () > 0 && columns () > 0)
     {
-      gripe_implicit_conversion ("Octave:array-as-scalar",
+      gripe_implicit_conversion ("Octave:array-to-scalar",
                                  type_name (), "complex scalar");
 
       retval = matrix (0, 0);
     }
   else
     gripe_invalid_conversion (type_name (), "complex scalar");
 
   return retval;
@@ -188,17 +188,17 @@ FloatComplex
 octave_perm_matrix::float_complex_value (bool) const
 {
   float tmp = lo_ieee_float_nan_value ();
 
   FloatComplex retval (tmp, tmp);
 
   if (rows () > 0 && columns () > 0)
     {
-      gripe_implicit_conversion ("Octave:array-as-scalar",
+      gripe_implicit_conversion ("Octave:array-to-scalar",
                                  type_name (), "complex scalar");
 
       retval = matrix (0, 0);
     }
   else
     gripe_invalid_conversion (type_name (), "complex scalar");
 
   return retval;
diff --git a/src/ov-range.cc b/src/ov-range.cc
--- a/src/ov-range.cc
+++ b/src/ov-range.cc
@@ -170,17 +170,17 @@ double
 octave_range::double_value (bool) const
 {
   double retval = lo_ieee_nan_value ();
 
   octave_idx_type nel = range.nelem ();
 
   if (nel > 0)
     {
-      gripe_implicit_conversion ("Octave:array-as-scalar",
+      gripe_implicit_conversion ("Octave:array-to-scalar",
                                  "range", "real scalar");
 
       retval = range.base ();
     }
   else
     gripe_invalid_conversion ("range", "real scalar");
 
   return retval;
@@ -190,17 +190,17 @@ float
 octave_range::float_value (bool) const
 {
   float retval = lo_ieee_float_nan_value ();
 
   octave_idx_type nel = range.nelem ();
 
   if (nel > 0)
     {
-      gripe_implicit_conversion ("Octave:array-as-scalar",
+      gripe_implicit_conversion ("Octave:array-to-scalar",
                                  "range", "real scalar");
 
       retval = range.base ();
     }
   else
     gripe_invalid_conversion ("range", "real scalar");
 
   return retval;
@@ -272,17 +272,17 @@ octave_range::complex_value (bool) const
   double tmp = lo_ieee_nan_value ();
 
   Complex retval (tmp, tmp);
 
   octave_idx_type nel = range.nelem ();
 
   if (nel > 0)
     {
-      gripe_implicit_conversion ("Octave:array-as-scalar",
+      gripe_implicit_conversion ("Octave:array-to-scalar",
                                  "range", "complex scalar");
 
       retval = range.base ();
     }
   else
     gripe_invalid_conversion ("range", "complex scalar");
 
   return retval;
@@ -294,17 +294,17 @@ octave_range::float_complex_value (bool)
   float tmp = lo_ieee_float_nan_value ();
 
   FloatComplex retval (tmp, tmp);
 
   octave_idx_type nel = range.nelem ();
 
   if (nel > 0)
     {
-      gripe_implicit_conversion ("Octave:array-as-scalar",
+      gripe_implicit_conversion ("Octave:array-to-scalar",
                                  "range", "complex scalar");
 
       retval = range.base ();
     }
   else
     gripe_invalid_conversion ("range", "complex scalar");
 
   return retval;
diff --git a/src/ov-re-mat.cc b/src/ov-re-mat.cc
--- a/src/ov-re-mat.cc
+++ b/src/ov-re-mat.cc
@@ -106,17 +106,17 @@ octave_matrix::try_narrowing_conversion 
 
 double
 octave_matrix::double_value (bool) const
 {
   double retval = lo_ieee_nan_value ();
 
   if (numel () > 0)
     {
-      gripe_implicit_conversion ("Octave:array-as-scalar",
+      gripe_implicit_conversion ("Octave:array-to-scalar",
                                  "real matrix", "real scalar");
 
       retval = matrix (0, 0);
     }
   else
     gripe_invalid_conversion ("real matrix", "real scalar");
 
   return retval;
@@ -124,17 +124,17 @@ octave_matrix::double_value (bool) const
 
 float
 octave_matrix::float_value (bool) const
 {
   float retval = lo_ieee_float_nan_value ();
 
   if (numel () > 0)
     {
-      gripe_implicit_conversion ("Octave:array-as-scalar",
+      gripe_implicit_conversion ("Octave:array-to-scalar",
                                  "real matrix", "real scalar");
 
       retval = matrix (0, 0);
     }
   else
     gripe_invalid_conversion ("real matrix", "real scalar");
 
   return retval;
@@ -158,17 +158,17 @@ Complex
 octave_matrix::complex_value (bool) const
 {
   double tmp = lo_ieee_nan_value ();
 
   Complex retval (tmp, tmp);
 
   if (rows () > 0 && columns () > 0)
     {
-      gripe_implicit_conversion ("Octave:array-as-scalar",
+      gripe_implicit_conversion ("Octave:array-to-scalar",
                                  "real matrix", "complex scalar");
 
       retval = matrix (0, 0);
     }
   else
     gripe_invalid_conversion ("real matrix", "complex scalar");
 
   return retval;
@@ -178,17 +178,17 @@ FloatComplex
 octave_matrix::float_complex_value (bool) const
 {
   float tmp = lo_ieee_float_nan_value ();
 
   FloatComplex retval (tmp, tmp);
 
   if (rows () > 0 && columns () > 0)
     {
-      gripe_implicit_conversion ("Octave:array-as-scalar",
+      gripe_implicit_conversion ("Octave:array-to-scalar",
                                  "real matrix", "complex scalar");
 
       retval = matrix (0, 0);
     }
   else
     gripe_invalid_conversion ("real matrix", "complex scalar");
 
   return retval;
diff --git a/src/ov-re-sparse.cc b/src/ov-re-sparse.cc
--- a/src/ov-re-sparse.cc
+++ b/src/ov-re-sparse.cc
@@ -95,17 +95,17 @@ octave_sparse_matrix::try_narrowing_conv
 double
 octave_sparse_matrix::double_value (bool) const
 {
   double retval = lo_ieee_nan_value ();
 
   if (numel () > 0)
     {
       if (numel () > 1)
-        gripe_implicit_conversion ("Octave:array-as-scalar",
+        gripe_implicit_conversion ("Octave:array-to-scalar",
                                    "real sparse matrix", "real scalar");
 
       retval = matrix (0, 0);
     }
   else
     gripe_invalid_conversion ("real sparse matrix", "real scalar");
 
   return retval;
@@ -117,17 +117,17 @@ octave_sparse_matrix::complex_value (boo
   double tmp = lo_ieee_nan_value ();
 
   Complex retval (tmp, tmp);
 
   // FIXME -- maybe this should be a function, valid_as_scalar()
   if (rows () > 0 && columns () > 0)
     {
       if (numel () > 1)
-        gripe_implicit_conversion ("Octave:array-as-scalar",
+        gripe_implicit_conversion ("Octave:array-to-scalar",
                                    "real sparse matrix", "complex scalar");
 
       retval = matrix (0, 0);
     }
   else
     gripe_invalid_conversion ("real sparse matrix", "complex scalar");
 
   return retval;
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -1526,17 +1526,17 @@ make_vector_dims (const dim_vector& dv, 
 {
   dim_vector retval (dv);
   retval.chop_trailing_singletons ();
   octave_idx_type nel = dv.numel ();
 
   if (retval.length () > 2 || (retval(0) != 1 && retval(1) != 1))
     {
       if (!force_vector_conversion)
-        gripe_implicit_conversion ("Octave:array-as-vector",
+        gripe_implicit_conversion ("Octave:array-to-vector",
                                    my_type.c_str (), wanted_type.c_str ());
       retval = dim_vector (nel, 1);
     }
 
   return retval;
 }
 
 ColumnVector
