# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1272419681 14400
#      Tue Apr 27 21:54:41 2010 -0400
# Node ID 9f55d3ce490af3168a3f57e4784002dd28ecf2c4
# Parent  6a81e809a39259ff90e232e2d65ea8b4c3c50df0
avoid crash when setting graphics property from cellstr object

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,17 @@
+2010-04-27  John W. Eaton  <jwe@octave.org>
+
+	* graphics.h.in (string_array_property::string_array_property):
+	Index string_vector with [], not ().
+	(string_array_property::string_value): Likewise.
+	(string_array_property::do_set): Likewise.
+	Avoid indexing past last element of string_vector object.
+	Fixes bug #29695.
+
 2010-04-27  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-cs-list.cc (octave_cs_list::subsref): New methods. Just gripe.
 	* ov-cs-list.h: Declare them.
 
 2010-04-27  John W. Eaton  <jwe@octave.org>
 
 	* ov-usr-fcn.cc (octave_user_script::do_multi_index_op):
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -547,17 +547,17 @@ public:
                   const desired_enum& typ = string_t)
     : base_property (s, h), desired_type (typ), separator (sep)
     { 
       if (c.is_cellstr ())
         {
           string_vector strings (c.numel ());
 
           for (octave_idx_type i = 0; i < c.numel (); i++)
-            strings (i) = c(i).string_value ();
+            strings[i] = c(i).string_value ();
 
           str = strings;
         }
       else
         error ("set: invalid order property value for \"%s\"",
                get_name ().c_str ());
     }
 
@@ -570,26 +570,26 @@ public:
       if (desired_type == string_t)
         return octave_value (string_value ());
       else
         return octave_value (cell_value ());
     }
 
   std::string string_value (void) const 
     { 
-      std::string _str;
+      std::string s;
 
       for (octave_idx_type i = 0; i < str.length (); i++)
         {
-          _str += str(i);
-          if (i != str.length() - 1)
-            _str += separator;
+          s += str[i];
+          if (i != str.length () - 1)
+            s += separator;
         }
 
-      return _str;
+      return s;
     }
 
   Cell cell_value (void) const {return Cell (str);}
 
   string_array_property& operator = (const octave_value& val)
     {
       set (val);
       return *this;
@@ -620,17 +620,17 @@ protected:
                 strings.append (new_str.substr (pos, new_pos - pos));
 
               pos = new_pos + 1;
             }
 
           if (str.numel () == strings.numel ())
             {
               for (octave_idx_type i = 0; i < str.numel (); i++)
-                if (strings (i) != str(i))
+                if (strings[i] != str[i])
                   {
                     replace = true;
                     break;
                   }
             }
           else
             replace = true;
 
@@ -640,23 +640,32 @@ protected:
               return true;
             }
         }
       else if (val.is_cellstr ())
         {
           bool replace = false;
           Cell new_cell = val.cell_value ();
 
-          string_vector strings (new_cell.numel ());
-
-          for (octave_idx_type i = 0; i < new_cell.numel (); i++)
+          string_vector strings = new_cell.cellstr_value ();
+
+          octave_idx_type nel = strings.length ();
+
+          if (nel != str.length ())
+            replace = true;
+          else
             {
-              strings (i) = new_cell(i).string_value ();
-              if (strings (i) != str (i))
-                replace = true;
+              for (octave_idx_type i = 0; i < nel; i++)
+                {
+                  if (strings[i] != str[i])
+                    {
+                      replace = true;
+                      break;
+                    }
+                }
             }
 
           if (replace)
             {
               str = strings;
               return true;
             }
         }
