# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1235397296 -3600
#      Mon Feb 23 14:54:56 2009 +0100
# Node ID c690e37725839344fb2579ccf5dc68ef9f04a1d3
# Parent  fcba62cc454939ea068fbfc8a581640d85bb66e3
support diagonal matrices in pinv

diff --git a/liboctave/CDiagMatrix.cc b/liboctave/CDiagMatrix.cc
--- a/liboctave/CDiagMatrix.cc
+++ b/liboctave/CDiagMatrix.cc
@@ -382,16 +382,36 @@ ComplexDiagMatrix::inverse (octave_idx_t
 	}
       else
 	retval.elem (i, i) = 1.0 / elem (i, i);
     }
 
   return retval;
 }
 
+ComplexDiagMatrix
+ComplexDiagMatrix::pseudo_inverse (void) const
+{
+  octave_idx_type r = rows ();
+  octave_idx_type c = cols ();
+  octave_idx_type len = length ();
+
+  ComplexDiagMatrix retval (c, r);
+
+  for (octave_idx_type i = 0; i < len; i++)
+    {
+      if (elem (i, i) != 0.0)
+        retval.elem (i, i) = 1.0 / elem (i, i);
+      else
+        retval.elem (i, i) = 0.0;
+    }
+
+  return retval;
+}
+
 bool
 ComplexDiagMatrix::all_elements_are_real (void) const
 {
   octave_idx_type len = length ();
   for (octave_idx_type i = 0; i < len; i++)
     {
       double ip = std::imag (elem (i, i));
 
diff --git a/liboctave/CDiagMatrix.h b/liboctave/CDiagMatrix.h
--- a/liboctave/CDiagMatrix.h
+++ b/liboctave/CDiagMatrix.h
@@ -107,16 +107,17 @@ public:
   ComplexRowVector row (octave_idx_type i) const;
   ComplexRowVector row (char *s) const;
 
   ComplexColumnVector column (octave_idx_type i) const;
   ComplexColumnVector column (char *s) const;
 
   ComplexDiagMatrix inverse (octave_idx_type& info) const;
   ComplexDiagMatrix inverse (void) const;
+  ComplexDiagMatrix pseudo_inverse (void) const;
 
   bool all_elements_are_real (void) const;
 
   // diagonal matrix by diagonal matrix -> diagonal matrix operations
 
   ComplexDiagMatrix& operator += (const DiagMatrix& a);
   ComplexDiagMatrix& operator -= (const DiagMatrix& a);
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,19 @@
+2009-02-23  Jaroslav Hajek  <highegg@gmail.com>
+
+	* dDiagMatrix.cc (DiagMatrix::pseudo_inverse): New method.
+	* dDiagMatrix.h: Declare it.
+	* fDiagMatrix.cc (FloatDiagMatrix::pseudo_inverse): New method.
+	* fDiagMatrix.h: Declare it.
+	* CDiagMatrix.cc (ComplexDiagMatrix::pseudo_inverse): New method.
+	* CDiagMatrix.h: Declare it.
+	* fCDiagMatrix.cc (FloatComplexDiagMatrix::pseudo_inverse): New method.
+	* fCDiagMatrix.h: Declare it.
+
 2009-02-20  Jaroslav Hajek  <highegg@gmail.com>
 
 	* oct-sort.h (octave_sort<T>::MergeState::MergeState): New
 	constructor.
 	(octave_sort<T>::MergeState::~MergeState): New destructor.
 	(octave_sort<T>::MergeState::reset, 
 	octave_sort<T>::MergeState::getmem,
 	octave_sort<T>::MergeState::getmemi): New methods.
diff --git a/liboctave/dDiagMatrix.cc b/liboctave/dDiagMatrix.cc
--- a/liboctave/dDiagMatrix.cc
+++ b/liboctave/dDiagMatrix.cc
@@ -298,16 +298,36 @@ DiagMatrix::inverse (octave_idx_type &in
 	}
       else
 	retval.elem (i, i) = 1.0 / elem (i, i);
     }
 
   return retval;
 }
 
+DiagMatrix
+DiagMatrix::pseudo_inverse (void) const
+{
+  octave_idx_type r = rows ();
+  octave_idx_type c = cols ();
+  octave_idx_type len = length ();
+
+  DiagMatrix retval (c, r);
+
+  for (octave_idx_type i = 0; i < len; i++)
+    {
+      if (elem (i, i) != 0.0)
+        retval.elem (i, i) = 1.0 / elem (i, i);
+      else
+        retval.elem (i, i) = 0.0;
+    }
+
+  return retval;
+}
+
 // diagonal matrix by diagonal matrix -> diagonal matrix operations
 
 // diagonal matrix by diagonal matrix -> diagonal matrix operations
 
 DiagMatrix
 operator * (const DiagMatrix& a, const DiagMatrix& b)
 {
   octave_idx_type a_nr = a.rows ();
diff --git a/liboctave/dDiagMatrix.h b/liboctave/dDiagMatrix.h
--- a/liboctave/dDiagMatrix.h
+++ b/liboctave/dDiagMatrix.h
@@ -89,16 +89,17 @@ public:
   RowVector row (octave_idx_type i) const;
   RowVector row (char *s) const;
 
   ColumnVector column (octave_idx_type i) const;
   ColumnVector column (char *s) const;
 
   DiagMatrix inverse (void) const;
   DiagMatrix inverse (octave_idx_type& info) const;
+  DiagMatrix pseudo_inverse (void) const;
 
   // other operations
 
   ColumnVector diag (octave_idx_type k = 0) const
     { return MDiagArray2<double>::diag (k); }
 
   DET determinant (void) const;
   double rcond (void) const;
diff --git a/liboctave/fCDiagMatrix.cc b/liboctave/fCDiagMatrix.cc
--- a/liboctave/fCDiagMatrix.cc
+++ b/liboctave/fCDiagMatrix.cc
@@ -382,16 +382,36 @@ FloatComplexDiagMatrix::inverse (octave_
 	}
       else
 	retval.elem (i, i) = static_cast<float> (1.0) / elem (i, i);
     }
 
   return retval;
 }
 
+FloatComplexDiagMatrix
+FloatComplexDiagMatrix::pseudo_inverse (void) const
+{
+  octave_idx_type r = rows ();
+  octave_idx_type c = cols ();
+  octave_idx_type len = length ();
+
+  FloatComplexDiagMatrix retval (c, r);
+
+  for (octave_idx_type i = 0; i < len; i++)
+    {
+      if (elem (i, i) != 0.0f)
+        retval.elem (i, i) = 1.0f / elem (i, i);
+      else
+        retval.elem (i, i) = 0.0f;
+    }
+
+  return retval;
+}
+
 bool
 FloatComplexDiagMatrix::all_elements_are_real (void) const
 {
   octave_idx_type len = length ();
   for (octave_idx_type i = 0; i < len; i++)
     {
       float ip = std::imag (elem (i, i));
 
diff --git a/liboctave/fCDiagMatrix.h b/liboctave/fCDiagMatrix.h
--- a/liboctave/fCDiagMatrix.h
+++ b/liboctave/fCDiagMatrix.h
@@ -107,16 +107,17 @@ public:
   FloatComplexRowVector row (octave_idx_type i) const;
   FloatComplexRowVector row (char *s) const;
 
   FloatComplexColumnVector column (octave_idx_type i) const;
   FloatComplexColumnVector column (char *s) const;
 
   FloatComplexDiagMatrix inverse (octave_idx_type& info) const;
   FloatComplexDiagMatrix inverse (void) const;
+  FloatComplexDiagMatrix pseudo_inverse (void) const;
 
   bool all_elements_are_real (void) const;
 
   // diagonal matrix by diagonal matrix -> diagonal matrix operations
 
   FloatComplexDiagMatrix& operator += (const FloatDiagMatrix& a);
   FloatComplexDiagMatrix& operator -= (const FloatDiagMatrix& a);
 
diff --git a/liboctave/fDiagMatrix.cc b/liboctave/fDiagMatrix.cc
--- a/liboctave/fDiagMatrix.cc
+++ b/liboctave/fDiagMatrix.cc
@@ -298,16 +298,36 @@ FloatDiagMatrix::inverse (octave_idx_typ
 	}
       else
 	retval.elem (i, i) = 1.0 / elem (i, i);
     }
 
   return retval;
 }
 
+FloatDiagMatrix
+FloatDiagMatrix::pseudo_inverse (void) const
+{
+  octave_idx_type r = rows ();
+  octave_idx_type c = cols ();
+  octave_idx_type len = length ();
+
+  FloatDiagMatrix retval (c, r);
+
+  for (octave_idx_type i = 0; i < len; i++)
+    {
+      if (elem (i, i) != 0.0f)
+        retval.elem (i, i) = 1.0f / elem (i, i);
+      else
+        retval.elem (i, i) = 0.0f;
+    }
+
+  return retval;
+}
+
 // diagonal matrix by diagonal matrix -> diagonal matrix operations
 
 // diagonal matrix by diagonal matrix -> diagonal matrix operations
 
 FloatDiagMatrix
 operator * (const FloatDiagMatrix& a, const FloatDiagMatrix& b)
 {
   octave_idx_type a_nr = a.rows ();
diff --git a/liboctave/fDiagMatrix.h b/liboctave/fDiagMatrix.h
--- a/liboctave/fDiagMatrix.h
+++ b/liboctave/fDiagMatrix.h
@@ -89,16 +89,17 @@ public:
   FloatRowVector row (octave_idx_type i) const;
   FloatRowVector row (char *s) const;
 
   FloatColumnVector column (octave_idx_type i) const;
   FloatColumnVector column (char *s) const;
 
   FloatDiagMatrix inverse (void) const;
   FloatDiagMatrix inverse (octave_idx_type& info) const;
+  FloatDiagMatrix pseudo_inverse (void) const;
 
   // other operations
 
   FloatColumnVector diag (octave_idx_type k = 0) const
     { return MDiagArray2<float>::diag (k); }
 
   FloatDET determinant (void) const;
   float rcond (void) const;
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2009-02-23  Jaroslav Hajek  <highegg@gmail.com>
+
+	* DLD-FUNCTIONS/pinv.cc: Support diagonal and permutation matrices.
+
 2008-02-21  David Bateman  <dbateman@free.fr>
 
 	* OPERATORS/op-cs-scm.cc, OPERATORS/op-cs-sm.cc, OPERATORS/op-s-scm.cc,
 	OPERATORS/op-s-sm.cc, OPERATORS/op-scm-cs.cc, OPERATORS/op-scm-s.cc,
 	OPERATORS/op-sm-cs.cc, OPERATORS/op-sm-s.cc: Don't perform any 
 	narrowing to full matrices.
 
 2009-02-20  Jaroslav Hajek  <highegg@gmail.com>
diff --git a/src/DLD-FUNCTIONS/pinv.cc b/src/DLD-FUNCTIONS/pinv.cc
--- a/src/DLD-FUNCTIONS/pinv.cc
+++ b/src/DLD-FUNCTIONS/pinv.cc
@@ -24,16 +24,23 @@ along with Octave; see the file COPYING.
 #include <config.h>
 #endif
 
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
 #include "oct-obj.h"
 #include "utils.h"
+#include "ops.h"
+#include "ov-re-diag.h"
+#include "ov-cx-diag.h"
+#include "ov-flt-re-diag.h"
+#include "ov-flt-cx-diag.h"
+#include "ov-perm.h"
+#include "ov-flt-perm.h"
 
 DEFUN_DLD (pinv, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} pinv (@var{x}, @var{tol})\n\
 Return the pseudoinverse of @var{x}.  Singular values less than\n\
 @var{tol} are ignored. \n\
 \n\
 If the second argument is omitted, it is assumed that\n\
@@ -60,17 +67,66 @@ where @code{sigma_max (@var{x})} is the 
 
   int arg_is_empty = empty_arg ("pinv", arg.rows (), arg.columns ());
 
   if (arg_is_empty < 0)
     return retval;
   else if (arg_is_empty > 0)
     return octave_value (Matrix ());
 
-  if (arg.is_single_type ())
+  bool isfloat = arg.is_single_type ();
+
+  if (arg.is_diag_matrix ())
+    {
+      if (nargin == 2)
+        warning ("pinv: tol is ignored for diagonal matrices");
+
+      const octave_base_value& a = arg.get_rep ();
+      if (arg.is_complex_type ())
+        {
+          if (isfloat)
+            {
+              CAST_CONV_ARG (const octave_float_complex_diag_matrix&);
+              retval = v.float_complex_diag_matrix_value ().pseudo_inverse ();
+            }
+          else
+            {
+              CAST_CONV_ARG (const octave_complex_diag_matrix&);
+              retval = v.complex_diag_matrix_value ().pseudo_inverse ();
+            }
+        }
+      else
+        {
+          if (isfloat)
+            {
+              CAST_CONV_ARG (const octave_float_diag_matrix&);
+              retval = v.float_diag_matrix_value ().pseudo_inverse ();
+            }
+          else
+            {
+              CAST_CONV_ARG (const octave_diag_matrix&);
+              retval = v.diag_matrix_value ().pseudo_inverse ();
+            }
+        }
+    }
+  else if (arg.is_perm_matrix ())
+    {
+      const octave_base_value& a = arg.get_rep ();
+      if (isfloat)
+        {
+          CAST_CONV_ARG (const octave_float_perm_matrix&);
+          retval = v.perm_matrix_value ().inverse ();
+        }
+      else
+        {
+          CAST_CONV_ARG (const octave_perm_matrix&);
+          retval = v.perm_matrix_value ().inverse ();
+        }
+    }
+  else if (isfloat)
     {
       float tol = 0.0;
       if (nargin == 2)
 	tol = args(1).float_value ();
 
       if (error_state)
 	return retval;
 
