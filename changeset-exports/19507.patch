# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1420055812 18000
#      Wed Dec 31 14:56:52 2014 -0500
# Node ID dac3191a530187fc51dfdcffe46d7064d5a630d4
# Parent  fdb8a62ef17a25ade69002d1e09e0a8c847573d7
style fixes for audioplayer and audiorecorder .m files

* @audioplayer/__get_properties__.m, @audioplayer/audioplayer.m,
@audioplayer/get.m, @audioplayer/set.m,
@audiorecorder/__get_properties__.m, @audiorecorder/audiorecorder.m,
@audiorecorder/get.m, @audiorecorder/getaudiodata.m,
@audiorecorder/getplayer.m, @audiorecorder/play.m,
@audiorecorder/set.m: Style fixes.

diff --git a/scripts/audio/@audioplayer/__get_properties__.m b/scripts/audio/@audioplayer/__get_properties__.m
--- a/scripts/audio/@audioplayer/__get_properties__.m
+++ b/scripts/audio/@audioplayer/__get_properties__.m
@@ -17,25 +17,46 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{properties} =} __get_properties__ (@var{player})
 ## Return a struct containing all named properties of the audioplayer
 ## object @var{player}.
 ## @end deftypefn
 
-function properties = __get_properties__ (player)
-  properties.BitsPerSample = __player_get_nbits__ (struct (player).player);
-  properties.CurrentSample = __player_get_sample_number__ (struct (player).player);
-  properties.DeviceID = __player_get_id__ (struct (player).player);
-  properties.NumberOfChannels = __player_get_channels__ (struct (player).player);
-  if __player_isplaying__ (struct (player).player)
+function props = __get_properties__ (player)
+  if (__player_isplaying__ (struct (player).player))
     running = "on";
   else
     running = "off";
   endif
-  properties.Running = running;
-  properties.SampleRate = __player_get_fs__ (struct (player).player);
-  properties.TotalSamples = __player_get_total_samples__ (struct (player).player);
-  properties.Tag = __player_get_tag__ (struct (player).player);
-  properties.Type = "audioplayer";
-  properties.UserData = __player_get_userdata__ (struct (player).player);
+
+  props = struct ("BitsPerSample",
+                  __player_get_nbits__ (struct (player).player),
+
+                  "CurrentSample",
+                  __player_get_sample_number__ (struct (player).player),
+
+                  "DeviceID",
+                  __player_get_id__ (struct (player).player),
+
+                  "NumberOfChannels",
+                  __player_get_channels__ (struct (player).player),
+
+                  "Running",
+                  running,
+
+                  "SampleRate",
+                  __player_get_fs__ (struct (player).player),
+
+                  "TotalSamples",
+                  __player_get_total_samples__ (struct (player).player),
+
+                  "Tag",
+                  __player_get_tag__ (struct (player).player),
+
+                  "Type",
+                  "audioplayer",
+
+                  "UserData",
+                  __player_get_userdata__ (struct (player).player));
+
 endfunction
diff --git a/scripts/audio/@audioplayer/audioplayer.m b/scripts/audio/@audioplayer/audioplayer.m
--- a/scripts/audio/@audioplayer/audioplayer.m
+++ b/scripts/audio/@audioplayer/audioplayer.m
@@ -71,31 +71,33 @@
 ## stop (player);
 ## @end group
 ## @end example
 
 function player = audioplayer (varargin)
   if (nargin < 1 || nargin > 4)
     print_usage ();
   endif
-  if ((isa (varargin{1}, "function_handle") || ischar (varargin{1})) && nargin < 2)
+  if ((isa (varargin{1}, "function_handle")
+       || ischar (varargin{1})) && nargin < 2)
     print_usage ();
   endif
   if isa (varargin{1}, "audiorecorder")
     if nargin == 1
       player = getplayer (varargin{1});
     elseif nargin == 2
       recorder = varargin{1};
       data = getaudiodata (recorder);
-      player = audioplayer (data, get (recorder, "SampleRate"), get (recorder, "BitsPerSample"), varargin{2});
+      player = audioplayer (data, get (recorder, "SampleRate"),
+                            get (recorder, "BitsPerSample"), varargin{2});
     else
       print_usage ();
     endif
   else
-    if ischar (varargin{1})
+    if (ischar (varargin{1}))
       varargin{1} = str2func (varargin{1});
     endif
     player.player = __player_audioplayer__ (varargin{:});
     player = class (player, "audioplayer");
   endif
 endfunction
 
 %!test
diff --git a/scripts/audio/@audioplayer/get.m b/scripts/audio/@audioplayer/get.m
--- a/scripts/audio/@audioplayer/get.m
+++ b/scripts/audio/@audioplayer/get.m
@@ -25,20 +25,20 @@
 ## player object, return a scalar structure with values of all
 ## properties of @var{player}.  The field names of the structure
 ## correspond to property names.
 ## @end deftypefn
 
 function result = get (varargin)
   player = varargin{1};
   properties = __get_properties__ (player);
-  if nargin == 1
+  if (nargin == 1)
     result = properties;
-  elseif nargin == 2
-    if ischar (varargin{2})
+  elseif (nargin == 2)
+    if (ischar (varargin{2}))
       result = getfield (properties, varargin{2});
     else
       result = {};
       index = 1;
       for property = varargin{2}
         result{index} = getfield (properties, char (property));
         index = index + 1;
       endfor
diff --git a/scripts/audio/@audioplayer/set.m b/scripts/audio/@audioplayer/set.m
--- a/scripts/audio/@audioplayer/set.m
+++ b/scripts/audio/@audioplayer/set.m
@@ -24,30 +24,30 @@
 ## If @var{name} and @var{value} are cell arrays, set each property to the
 ## corresponding value.  Given a structure of @var{properties} with
 ## fields corresponding to property names, set the value of those
 ## properties to the field values.  Given only the audioplayer object,
 ## return a structure of settable properties.
 ## @end deftypefn
 
 function settable = set (varargin)
-  if nargin < 1 || nargin > 3
+  if (nargin < 1 || nargin > 3)
     print_usage ();
   endif
   player = struct (varargin{1}).player;
-  if nargin == 1
+  if (nargin == 1)
     settable.SampleRate = {};
     settable.Tag = {};
     settable.UserData = {};
-  elseif nargin == 2
+  elseif (nargin == 2)
     for [value, property] = varargin{2}
       setproperty (player, property, value);
     endfor
-  elseif nargin == 3
-    if iscell (varargin{2})
+  elseif (nargin == 3)
+    if (iscell (varargin{2}))
       index = 1;
       for property = varargin{2}
         setproperty (player, char (property), varargin{3}{index});
         index = index + 1;
       endfor
     else
       setproperty (player, varargin{2}, varargin{3});
     endif
diff --git a/scripts/audio/@audiorecorder/__get_properties__.m b/scripts/audio/@audiorecorder/__get_properties__.m
--- a/scripts/audio/@audiorecorder/__get_properties__.m
+++ b/scripts/audio/@audiorecorder/__get_properties__.m
@@ -17,25 +17,46 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{properties} =} __get_properties__ (@var{recorder})
 ## Return a struct containing all named properties of the recorder object
 ## @var{recorder}.
 ## @end deftypefn
 
-function properties = __get_properties__ (recorder)
-  properties.BitsPerSample = __recorder_get_nbits__ (struct (recorder).recorder);
-  properties.CurrentSample = __recorder_get_sample_number__ (struct (recorder).recorder);
-  properties.DeviceID = __recorder_get_id__ (struct (recorder).recorder);
-  properties.NumberOfChannels = __recorder_get_channels__ (struct (recorder).recorder);
-  if __recorder_isrecording__ (struct (recorder).recorder)
+function props = __get_properties__ (recorder)
+  if (__recorder_isrecording__ (struct (recorder).recorder))
     running = "on";
   else
     running = "off";
   endif
-  properties.Running = running;
-  properties.SampleRate = __recorder_get_fs__ (struct (recorder).recorder);
-  properties.TotalSamples = __recorder_get_total_samples__ (struct (recorder).recorder);
-  properties.Tag = __recorder_get_tag__ (struct (recorder).recorder);
-  properties.Type = "audiorecorder";
-  properties.UserData = __recorder_get_userdata__ (struct (recorder).recorder);
+
+  props = struct ("BitsPerSample",
+                  __recorder_get_nbits__ (struct (recorder).recorder),
+
+                  "CurrentSample",
+                  __recorder_get_sample_number__ (struct (recorder).recorder),
+
+                  "DeviceID",
+                  __recorder_get_id__ (struct (recorder).recorder),
+
+                  "NumberOfChannels",
+                  __recorder_get_channels__ (struct (recorder).recorder),
+
+                  "Running",
+                  running,
+
+                  "SampleRate",
+                  __recorder_get_fs__ (struct (recorder).recorder),
+
+                  "TotalSamples",
+                  __recorder_get_total_samples__ (struct (recorder).recorder),
+
+                  "Tag",
+                  __recorder_get_tag__ (struct (recorder).recorder),
+
+                  "Type",
+                  "audiorecorder",
+
+                  "UserData",
+                  __recorder_get_userdata__ (struct (recorder).recorder));
+
 endfunction
diff --git a/scripts/audio/@audiorecorder/audiorecorder.m b/scripts/audio/@audiorecorder/audiorecorder.m
--- a/scripts/audio/@audiorecorder/audiorecorder.m
+++ b/scripts/audio/@audiorecorder/audiorecorder.m
@@ -28,17 +28,17 @@
 ## may be found using the audiodevinfo function.
 ## Given a function handle, use that function to process the audio.
 ## @end deftypefn
 
 function recorder = audiorecorder (varargin)
   if (nargin > 5)
     print_usage ();
   endif
-  if nargin > 0 && ischar (varargin{1})
+  if (nargin > 0 && ischar (varargin{1}))
     varargin{1} = str2func (varargin{1});
   endif
   recorder.recorder = __recorder_audiorecorder__ (varargin{:});
   recorder = class (recorder, "audiorecorder");
 endfunction
 
 %!test
 %!  recorder = audiorecorder (44100, 16, 2);
diff --git a/scripts/audio/@audiorecorder/get.m b/scripts/audio/@audiorecorder/get.m
--- a/scripts/audio/@audiorecorder/get.m
+++ b/scripts/audio/@audiorecorder/get.m
@@ -25,20 +25,20 @@
 ## recorder object, return a scalar structure with values of all
 ## properties of @var{recorder}.  The field names of the structure
 ## correspond to property names.
 ## @end deftypefn
 
 function result = get (varargin)
   recorder = varargin{1};
   properties = __get_properties__ (recorder);
-  if nargin == 1
+  if (nargin == 1)
     result = properties;
-  elseif nargin == 2
-    if ischar (varargin{2})
+  elseif (nargin == 2)
+    if (ischar (varargin{2}))
       result = getfield (properties, varargin{2});
     else
       result = {};
       index = 1;
       for property = varargin{2}
         result{index} = getfield (properties, char (property));
         index = index + 1;
       endfor
diff --git a/scripts/audio/@audiorecorder/getaudiodata.m b/scripts/audio/@audiorecorder/getaudiodata.m
--- a/scripts/audio/@audiorecorder/getaudiodata.m
+++ b/scripts/audio/@audiorecorder/getaudiodata.m
@@ -40,14 +40,14 @@ function data = getaudiodata (varargin)
       case "int16"
         data = int16 (data * (2.0 ^ 15));
       case "int8"
         data = int8 (data * (2.0 ^ 7));
       case "uint8"
         data = uint8 ((data + 1.0) * 0.5 * (2.0 ^ 8 - 1));
     endswitch
   endif
-  if get (recorder, "NumberOfChannels") == 2
+  if (get (recorder, "NumberOfChannels") == 2)
     data = data';
   else
     data = data(1,:)';
   endif
 endfunction
diff --git a/scripts/audio/@audiorecorder/getplayer.m b/scripts/audio/@audiorecorder/getplayer.m
--- a/scripts/audio/@audiorecorder/getplayer.m
+++ b/scripts/audio/@audiorecorder/getplayer.m
@@ -23,10 +23,11 @@
 ## @end deftypefn
 
 function player = getplayer (varargin)
   if (nargin < 1 || nargin > 2)
     print_usage ();
   endif
   recorder = varargin{1};
   data = getaudiodata (recorder);
-  player = audioplayer (data, get (recorder, "SampleRate"), get (recorder, "BitsPerSample"));
+  player = audioplayer (data, get (recorder, "SampleRate"),
+                        get (recorder, "BitsPerSample"));
 endfunction
diff --git a/scripts/audio/@audiorecorder/play.m b/scripts/audio/@audiorecorder/play.m
--- a/scripts/audio/@audiorecorder/play.m
+++ b/scripts/audio/@audiorecorder/play.m
@@ -28,15 +28,16 @@
 ## @end deftypefn
 
 function player = play (varargin)
   if (nargin < 1 || nargin > 2)
     print_usage ();
   endif
   recorder = varargin{1};
   data = getaudiodata (recorder);
-  player = audioplayer (data, get (recorder, "SampleRate"), get (recorder, "BitsPerSample"));
+  player = audioplayer (data, get (recorder, "SampleRate"),
+                        get (recorder, "BitsPerSample"));
   if (nargin == 1)
     play (player);
   else
     play (player, varargin{2});
   endif
 endfunction
diff --git a/scripts/audio/@audiorecorder/set.m b/scripts/audio/@audiorecorder/set.m
--- a/scripts/audio/@audiorecorder/set.m
+++ b/scripts/audio/@audiorecorder/set.m
@@ -25,30 +25,30 @@
 ## set each property to a corresponding value.
 ## Given a structure with fields corresponding to property names, set
 ## the value of those properties to the corresponding field values.
 ## Given a only the recorder object, return a structure of settable
 ## properties.
 ## @end deftypefn
 
 function settable = set (varargin)
-  if nargin < 1 || nargin > 3
+  if (nargin < 1 || nargin > 3)
     print_usage ();
   endif
   recorder = struct (varargin{1}).recorder;
-  if nargin == 1
+  if (nargin == 1)
     settable.SampleRate = {};
     settable.Tag = {};
     settable.UserData = {};
-  elseif nargin == 2
+  elseif (nargin == 2)
     for [value, property] = varargin{2}
       setproperty (recorder, property, value);
     endfor
-  elseif nargin == 3
-    if iscell (varargin{2})
+  elseif (nargin == 3)
+    if (iscell (varargin{2}))
       index = 1;
       for property = varargin{2}
         setproperty (recorder, char (property), varargin{3}{index});
         index = index + 1;
       endfor
     else
       setproperty (recorder, varargin{2}, varargin{3});
     endif
