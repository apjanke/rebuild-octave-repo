# HG changeset patch
# User Rik <rik@octave.org>
# Date 1374732766 25200
#      Wed Jul 24 23:12:46 2013 -0700
# Node ID b2cbf369837e75bd836a592481795a53157a823f
# Parent  328b579e08e9cf97bfd8a606141bc02864120a2e
stem.m, stem3.m, __stem__.m: Upgrade to use new __plt_get_axis_arg__.

* scripts/plot/stem.m, scripts/plot/stem3.m: Rename tmp to htmp.
Redo docstrings.

* scripts/plot/private/__stem__.m: Overhaul to support new
__plt_get_axis_arg__.  Left in a kluge where axis is set to gca.

diff --git a/scripts/plot/private/__stem__.m b/scripts/plot/private/__stem__.m
--- a/scripts/plot/private/__stem__.m
+++ b/scripts/plot/private/__stem__.m
@@ -27,52 +27,48 @@
 function h = __stem__ (have_z, varargin)
 
   if (have_z)
     caller = "stem3";
   else
     caller = "stem";
   endif
 
-  [ax, varargin, nargin] = __plt_get_axis_arg__ (caller, varargin{:});
+  [hax, varargin, nargin] = __plt_get_axis_arg__ (caller, varargin{:});
 
   [x, y, z, dofill, llc, ls, mmc, ms, varargin] = ...
       check_stem_arg (have_z, varargin{:});
 
-  oldax = gca ();
+  oldfig = ifelse (isempty (hax), [], get (0, "currentfigure"));
   unwind_protect
-    axes (ax);
-    hold_state = get (ax, "nextplot");
-    newplot ();
+    hax = newplot (hax);
+    hold_state = get (hax, "nextplot");
+    set (hax, "nextplot", "add");
+
     h = [];
-
     nx = rows (x);
-    for i = 1: columns (x)
+    for i = 1 : columns (x)
       if (have_z)
         xt = x(:)';
         xt = [xt; xt; NaN(1, nx)](:);
         yt = y(:)';
         yt = [yt; yt; NaN(1, nx)](:);
         zt = z(:)';
         zt = [zeros(1, nx); zt; NaN(1, nx)](:);
       else
         xt = x(:, i)';
         xt = [xt; xt; NaN(1, nx)](:);
         yt = y(:, i)';
         yt = [zeros(1, nx); yt; NaN(1, nx)](:);
       endif
 
-      hg  = hggroup ();
+      hg = hggroup ();
       h = [h; hg];
       args = __add_datasource__ (caller, hg, {"x", "y", "z"}, varargin{:});
 
-      if (i == 1)
-        set (ax, "nextplot", "add");
-      endif
-
       if (isempty (llc))
         lc = __next_line_color__ ();
       else
         lc = llc;
       endif
 
       if (isempty (mmc))
         mc = lc;
@@ -82,43 +78,43 @@ function h = __stem__ (have_z, varargin)
 
       if (dofill)
         fc = mc;
       else
         fc = "none";
       endif
 
       if (have_z)
-        h_stems = plot3 (xt, yt, zt, "color", lc, "linestyle", ls,
+        h_stems = plot3 (hax, xt, yt, zt, "color", lc, "linestyle", ls,
                          "parent", hg, x, y, z, "color", mc,
-                         "marker",  ms, "linestyle", "none",
+                         "marker", ms, "linestyle", "none",
                          "markerfacecolor", fc, "parent", hg);
 
         h_baseline = [];
       else
-        h_stems = plot (xt, yt, "color", lc, "linestyle", ls,
+        h_stems = plot (hax, xt, yt, "color", lc, "linestyle", ls,
                         "parent", hg, x(:,i), y(:, i), "color", mc, "marker",
                         ms, "linestyle", "none", "markerfacecolor",
                         fc, "parent", hg);
 
-        x_axis_range = get (ax, "xlim");
-        h_baseline = line (x_axis_range, [0, 0], "color", [0, 0, 0]);
+        x_axis_range = get (hax, "xlim");
+        h_baseline = line (hax, x_axis_range, [0, 0], "color", [0, 0, 0]);
         set (h_baseline, "handlevisibility", "off");
         set (h_baseline, "xliminclude", "off");
-        addlistener (ax, "xlim", @update_xlim);
+        addlistener (hax, "xlim", @update_xlim);
         addlistener (h_baseline, "ydata", @update_baseline);
         addlistener (h_baseline, "visible", @update_baseline);
       endif
 
       ## Setup the hggroup and listeners.
       addproperty ("showbaseline", hg, "radio", "{on}|off");
       addproperty ("basevalue", hg, "data", 0);
       addproperty ("baseline", hg, "data", h_baseline);
 
-      if (!have_z)
+      if (! have_z)
         addlistener (hg, "showbaseline", @show_baseline);
         addlistener (hg, "basevalue", @move_baseline);
       endif
 
       addproperty ("color", hg, "linecolor", lc);
       addproperty ("linewidth", hg, "linelinewidth", 0.5);
       addproperty ("linestyle", hg, "linelinestyle", ls);
       addproperty ("marker", hg, "linemarker", ms);
@@ -147,20 +143,27 @@ function h = __stem__ (have_z, varargin)
       if (! isempty (args))
         set (hg, args{:});
       endif
       if (i == 1 && ! isempty (h_baseline))
         set (h_baseline, "parent", get (hg, "parent"));
       endif
     endfor
 
+    if (! strcmp (hold_state, "add") && have_z)
+      set (hax, "view", [-37.5 30]);  # 3D view
+    endif
+    set (hax, hold_state);
+
   unwind_protect_cleanup
-    set (ax, "nextplot", hold_state);
-    axes (oldax);
+    if (! isempty (oldfig))
+      set (0, "currentfigure", oldfig);
+    endif
   end_unwind_protect
+
 endfunction
 
 function [x, y, z, dofill, lc, ls, mc, ms, newargs] = check_stem_arg (have_z, varargin)
 
   ## FIXME -- there seems to be a lot of duplicated code in this
   ## function.  It seems like it should be possible to simplify things
   ## by combining some of the nearly identical code sections into
   ## additional subfunctions.
diff --git a/scripts/plot/stem.m b/scripts/plot/stem.m
--- a/scripts/plot/stem.m
+++ b/scripts/plot/stem.m
@@ -14,44 +14,53 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} stem (@var{y})
 ## @deftypefnx {Function File} {} stem (@var{x}, @var{y})
-## @deftypefnx {Function File} {} stem (@var{x}, @var{y}, @var{linespec})
+## @deftypefnx {Function File} {} stem (@dots{}, @var{linespec})
 ## @deftypefnx {Function File} {} stem (@dots{}, "filled")
+## @deftypefnx {Function File} {} stem (@dots{}, "@var{prop}", "@var{val}", @dots{})
+## @deftypefnx {Function File} {} stem (@var{hax}, @dots{})
 ## @deftypefnx {Function File} {@var{h} =} stem (@dots{})
-## Plot a stem graph from two vectors of x-y data.  If only one argument
-## is given, it is taken as the y-values and the x coordinates are taken
-## from the indices of the elements.
+## Plot a stem graph from two vectors of x-y data.
+##
+## If only one argument is given, it is taken as the y-values and the
+## x-coordinates are taken from the indices of the elements.
 ##
 ## If @var{y} is a matrix, then each column of the matrix is plotted as
 ## a separate stem graph.  In this case @var{x} can either be a vector,
 ## the same length as the number of rows in @var{y}, or it can be a
 ## matrix of the same size as @var{y}.
 ##
-## The default color is @code{"b"} (blue).  The default line style is
-## @code{"-"} and the default marker is @code{"o"}.  The line style can
+## The default color is @code{"b"} (blue), the default line style is
+## @code{"-"}, and the default marker is @code{"o"}.  The line style can
 ## be altered by the @code{linespec} argument in the same manner as the
 ## @code{plot} command.  For example,
 ##
 ## @example
 ## @group
 ## x = 1:10;
 ## y = 2*x;
 ## stem (x, y, "r");
 ## @end group
 ## @end example
 ##
 ## @noindent
 ## plots 10 stems with heights from 2 to 20 in red;
 ##
+## Multiple property/value pairs may be specified, but they must appear in
+## pairs.
+##
+## If the first argument @var{hax} is an axis handle, then plot into these axes,
+## rather than the current axis handle returned by @code{gca}.
+##
 ## The optional return value @var{h} is a vector of "stem series" graphics
 ## handles with one handle per column of the variable @var{y}.  The
 ## handle regroups the elements of the stem graph together as the
 ## children of the "stem series" handle, allowing them to be altered
 ## together.  For example,
 ##
 ## @example
 ## @group
@@ -61,32 +70,32 @@
 ## set (h(2), "color", "g");
 ## set (h(1), "basevalue", -1)
 ## @end group
 ## @end example
 ##
 ## @noindent
 ## changes the color of the second "stem series" and moves the base line
 ## of the first.
-## @seealso{bar, barh, plot}
+## @seealso{stem3, bar, hist, plot}
 ## @end deftypefn
 
 ## Author: Michel D. Schmid <michaelschmid@users.sourceforge.net>
 ## Adapted-by: jwe
 
 function h = stem (varargin)
 
   if (nargin < 1)
     print_usage ();
   endif
 
-  tmp = __stem__ (false, varargin{:});
+  htmp = __stem__ (false, varargin{:});
 
   if (nargout > 0)
-    h = tmp;
+    h = htmp;
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
 %! x = 1:10;
diff --git a/scripts/plot/stem3.m b/scripts/plot/stem3.m
--- a/scripts/plot/stem3.m
+++ b/scripts/plot/stem3.m
@@ -14,47 +14,63 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} stem3 (@var{x}, @var{y}, @var{z})
 ## @deftypefnx {Function File} {} stem3 (@var{x}, @var{y}, @var{z}, @var{linespec})
+## @deftypefnx {Function File} {} stem3 (@dots{}, "filled")
+## @deftypefnx {Function File} {} stem3 (@dots{}, "@var{prop}", "@var{val}", @dots{})
+## @deftypefnx {Function File} {} stem3 (@var{hax}, @dots{})
 ## @deftypefnx {Function File} {@var{h} =} stem3 (@dots{})
-## Plot a three-dimensional stem graph and return the handles of the line
+## Plot a 3-D stem graph.
+##
+## The default color is @code{"r"} (red), the default line style is
+## @code{"-"}, and the default marker is @code{"o"}.  The line style can
+## be altered by the @code{linespec} argument in the same manner as the
+## @code{plot} command.
+##
+## Multiple property/value pairs may be specified, but they must appear in
+## pairs.
+##
+## If the first argument @var{hax} is an axis handle, then plot into these axes,
+## rather than the current axis handle returned by @code{gca}.
+##
+## The optional return value @var{h} is a vector with the handles of the line
 ## and marker objects used to draw the stems as "stem series" object.
-## The default color is @code{"r"} (red).  The default line style is
-## @code{"-"} and the default marker is @code{"o"}.
 ##
-## For example,
+## Example:
 ##
 ## @example
 ## @group
 ## theta = 0:0.2:6;
 ## stem3 (cos (theta), sin (theta), theta)
 ## @end group
 ## @end example
 ##
 ## @noindent
-## plots 31 stems with heights from 0 to 6 lying on a circle.  Color
-## definitions with RGB-triples are not valid!
-## @seealso{stem, bar, barh, plot}
+## plots 31 stems with heights from 0 to 6 lying on a circle.
+##
+## Implementation Note: Color definitions with RGB-triples are not valid.
+##
+## @seealso{stem, bar, hist, plot}
 ## @end deftypefn
 
 function h = stem3 (varargin)
 
   if (nargin < 1 || nargin > 4)
     print_usage ();
   endif
 
-  tmp = __stem__ (true, varargin{:});
+  htmp = __stem__ (true, varargin{:});
 
   if (nargout > 0)
-    h = tmp;
+    h = htmp;
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
 %! theta = 0:0.2:6;
