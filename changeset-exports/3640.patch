# HG changeset patch
# User jwe
# Date 953893700 0
#      Fri Mar 24 10:28:20 2000 +0000
# Node ID d3b0ff09dda7a69fce8dd455a3e8b6c9391c6f50
# Parent  fed1847dfd6cad21cf34fe581c995786483eb349
[project @ 2000-03-24 10:28:19 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,40 @@
+2000-03-24  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* oct-stream.cc (printf_format_list::add_elt_to_list,
+	printf_format_list::process_conversion,
+	printf_format_list::finish_conversion): New args, flags, fw, and prec.
+	(printf_format_list::printf_format_list): Save more complete info.
+	(printf_format_list::printme): Print flags, fw, and prec.
+	(octave_base_stream::printf): Simplify.
+	(do_printf_conv): Delete have_arg arg, since it is always true now.
+	(octave_base_stream::do_printf): Handle case of no args and %
+	directly instead of using do_printf_conv.
+	(printf_value_cache::exhausted): Rename from no_more_values.
+	(DO_PCT_CONVERSION): New macro
+	(octave_base_streain::do_scanf, octave_base_streain::do_oscanf):
+	Use it.
+	(scanf_format_list::finish_conversion): `%' counts as a conversion too.
+	Also don't forget to set type for it.
+	(OCTAVE_SCAN_0): Delete.
+	(OCTAVE_SCAN): Rename from OCTAVE_SCAN_1.
+	(octave_base_stream::scanf, octave_base_stream::oscanf): Don't
+	special-case number of conversions here.
+	(octave_base_stream::oscanf, octave_base_stream::do_oscanf): Only
+	cycle through fmt elements if the number of conversions is greater
+	than 0.
+
+	* oct-stream.h (scanf_format_list::next): New arg, `cycle'.
+	(printf_format_list::next): New arg, `cycle'.
+	(printf_format_list::last_elt_p): New function.
+	(printf_format_elt): New fields fw, prec, and flags.
+	Define copy constructor and assignment operator.
+	(scanf_format_elt): Define copy constructor and assignment operator.
+
 2000-03-23  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* oct-stream.cc (OCTAVE_SCAN_0, OCTAVE_SCAN_1): New macros.
 	(do_scanf_conv, BEGIN_S_CONVERSION, BEGIN_CHAR_CLASS_CONVERSION,
 	do_scanf, scanf, do_oscanf, do_oscanf, oscanf): Use them instead
 	of calling istream::scan directly.
 	(octave_scan): New function.
 	(do_scanf_conv): Second arg is now scanf_format_elt instead of char*.
diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -20,17 +20,16 @@ Software Foundation, 59 Temple Place - S
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cassert>
-#include <cstdarg>
 #include <cstring>
 
 #include <iomanip>
 #include <strstream>
 #include <fstream>
 #include <string>
 
 #include "lo-ieee.h"
@@ -263,18 +262,18 @@ scanf_format_list::add_elt_to_list (int 
 		= new scanf_format_elt (text, width, discard, type,
 					modifier, char_class);
 
 	      if (num_elts == list.length ())
 		list.resize (2 * num_elts);
 
 	      list(num_elts++) = elt;
 	    }
-	  else
-	    delete [] text;
+
+	  delete [] text;
 	}
 
       delete buf;
       buf = 0;
     }
 }
 
 static std::string
@@ -418,23 +417,26 @@ int
 scanf_format_list::finish_conversion (const std::string& s, int& i, int n,
 				      int& width, bool discard, char& type,
 				      char modifier, int& num_elts)
 {
   int retval = 0;
 
   std::string char_class;
 
+  int beg_idx = -1;
+  int end_idx = -1;
+
   if (s[i] == '%')
-    *buf << s[i++];
+    {
+      type = '%';
+      *buf << s[i++];
+    }
   else
     {
-      int beg_idx = -1;
-      int end_idx = -1;
-
       type = s[i];
 
       if (s[i] == '[')
 	{
 	  *buf << s[i++];
 
 	  if (i < n)
 	    {
@@ -466,28 +468,27 @@ scanf_format_list::finish_conversion (co
 	      *buf << s[i++];
 	    }
 
 	  if (s[i-1] != ']')
 	    retval = nconv = -1;
 	}
       else
 	*buf << s[i++];
-
-      nconv++;
-
-      if (nconv > 0)
-	{
-	  if (beg_idx >= 0 && end_idx >= 0)
-	    char_class = expand_char_class (s.substr (beg_idx,
-						      end_idx - beg_idx +1));
-
-	  add_elt_to_list (width, discard, type, modifier, num_elts,
-			   char_class);
-	}
+    }
+
+  nconv++;
+
+  if (nconv > 0)
+    {
+      if (beg_idx >= 0 && end_idx >= 0)
+	char_class = expand_char_class (s.substr (beg_idx,
+						  end_idx - beg_idx + 1));
+
+      add_elt_to_list (width, discard, type, modifier, num_elts, char_class);
     }
 
   return retval;
 }
 
 void
 scanf_format_list::printme (void) const
 {
@@ -582,52 +583,75 @@ printf_format_list::printf_format_list (
 {
   int num_elts = 0;
 
   int n = s.length ();
 
   int i = 0;
 
   int args = 0;
+  string flags;
+  int fw = 0;
+  int prec = 0;
   char modifier = '\0';
   char type = '\0';
 
   bool have_more = true;
+  bool empty_buf = true;
 
   while (i < n)
     {
       have_more = true;
 
       if (! buf)
-	buf = new std::ostrstream ();
+	{
+	  buf = new std::ostrstream ();
+	  empty_buf = true;
+	}
 
       switch (s[i])
 	{
 	case '%':
-	  process_conversion (s, i, n, args, type, modifier, num_elts);
-	  have_more = (buf != 0);
+	  {
+	    if (empty_buf)
+	      {
+		process_conversion (s, i, n, args, flags, fw, prec,
+				    type, modifier, num_elts);
+
+		have_more = (buf != 0);
+	      }
+	    else
+	      add_elt_to_list (args, flags, fw, prec, type, modifier,
+			       num_elts);
+	  }
 	  break;
 
 	default:
-	  args = 0;
-	  modifier = '\0';
-	  type = '\0';
-	  *buf << s[i++];
+	  {
+	    args = 0;
+	    flags = "";
+	    fw = 0;
+	    prec = 0;
+	    modifier = '\0';
+	    type = '\0';
+	    *buf << s[i++];
+	    empty_buf = false;
+	  }
 	  break;
 	}
 
       if (nconv < 0)
 	{
 	  have_more = false;
 	  break;
 	}
     }
 
   if (have_more)
-    add_elt_to_list (args, type, modifier, num_elts);
+    add_elt_to_list (args, flags, fw, prec, type, modifier, num_elts);
 
   list.resize (num_elts);
 
   delete buf;
 }
 
 printf_format_list::~printf_format_list (void)
 {
@@ -636,103 +660,125 @@ printf_format_list::~printf_format_list 
   for (int i = 0; i < n; i++)
     {
       printf_format_elt *elt = list(i);
       delete elt;
     }	
 }
 
 void
-printf_format_list::add_elt_to_list (int args, char type, char modifier,
-				     int& num_elts)
+printf_format_list::add_elt_to_list (int args, const std::string& flags,
+				     int fw, int prec, char type,
+				     char modifier, int& num_elts)
 {
   if (buf)
     {
       *buf << std::ends;
 
       char *text = buf->str ();
 
       if (text)
 	{
 	  if (*text)
 	    {
 	      printf_format_elt *elt
-		= new printf_format_elt (text, args, type, modifier);
+		= new printf_format_elt (text, args, fw, prec, flags,
+					 type, modifier);
 
 	      if (num_elts == list.length ())
 		list.resize (2 * num_elts);
 
 	      list(num_elts++) = elt;
 	    }
-	  else
-	    delete [] text;
+
+	  delete [] text;
 	}
 
       delete buf;
       buf = 0;
     }
 }
 
 void
-printf_format_list::process_conversion (const std::string& s, int& i, int n,
-					int& args, char& modifier,
-					char& type, int& num_elts)
+printf_format_list::process_conversion
+  (const std::string& s, int& i, int n, int& args, std::string& flags,
+   int& fw, int& prec, char& modifier, char& type, int& num_elts)
 {
   args = 0;
+  flags = "";
+  fw = 0;
+  prec = 0;
   modifier = '\0';
   type = '\0';
 
   *buf << s[i++];
 
   bool next = false;
 
   while (i < n)
     {
       switch (s[i])
 	{
 	case '-': case '+': case ' ': case '0': case '#':
+	  flags += s[i];
 	  *buf << s[i++];
 	  break;
 
 	default:
 	  next = true;
 	  break;
 	}
 
       if (next)
 	break;
     }
 
   if (i < n)
     {
       if (s[i] == '*')
 	{
+	  fw = -1;
 	  args++;
 	  *buf << s[i++];
 	}
       else
 	{
+	  if (isdigit (s[i]))
+	    {
+	      int n = 0;
+	      string tmp = s.substr (i);
+	      sscanf (tmp.c_str (), "%d%n", &fw, &n);
+	    }
+
 	  while (i < n && isdigit (s[i]))
 	    *buf << s[i++];
 	}
     }
 
   if (i < n && s[i] == '.')
     {
       *buf << s[i++];
 
       if (i < n)
 	{
 	  if (s[i] == '*')
 	    {
+	      prec = -1;
 	      args++;
 	      *buf << s[i++];
 	    }
 	  else
 	    {
+	      if (isdigit (s[i]))
+		{
+		  int n = 0;
+		  string tmp = s.substr (i);
+		  sscanf (tmp.c_str (), "%d%n", &prec, &n);
+		}
+
 	      while (i < n && isdigit (s[i]))
 		*buf << s[i++];
 	    }
 	}
     }
 
   if (i < n)
     {
@@ -744,25 +790,25 @@ printf_format_list::process_conversion (
 	  break;
 
 	default:
 	  break;
 	}
     }
 
   if (i < n)
-    finish_conversion (s, i, args, modifier, type, num_elts);
+    finish_conversion (s, i, args, flags, fw, prec, modifier, type, num_elts);
   else
     nconv = -1;
 }
 
 void
-printf_format_list::finish_conversion (const std::string& s, int& i,
-				       int args, char modifier,
-				       char& type, int& num_elts)
+printf_format_list::finish_conversion
+  (const std::string& s, int& i, int args, const std::string& flags,
+   int fw, int prec, char modifier, char& type, int& num_elts)
 
 {
   switch (s[i])
     {
     case 'd': case 'i': case 'o': case 'x': case 'X':
     case 'u': case 'c':
       if (modifier == 'L')
 	{
@@ -784,31 +830,28 @@ printf_format_list::finish_conversion (c
 	{
 	  nconv = -1;
 	  break;
 	}
       goto fini;
 
     fini:
 
-      if (s[i] == '%' && args == 0)
-	*buf << s[i++];
-      else
-	{
-	  if (s[i] != '%')
-	    args++;
-
-	  type = s[i];
-
-	  *buf << s[i++];
-
-	  add_elt_to_list (args, type, modifier, num_elts);
-
-	  nconv++;
-	}
+      type = s[i];
+
+      *buf << s[i++];
+
+      if (type != '%' || args != 0)
+	nconv++;
+
+      if (type != '%')
+	args++;
+
+      add_elt_to_list (args, flags, fw, prec, type, modifier, num_elts);
+
       break;
 
     default:
       nconv = -1;
       break;
     }
 }
 
@@ -816,20 +859,24 @@ void
 printf_format_list::printme (void) const
 {
   int n = list.length ();
 
   for (int i = 0; i < n; i++)
     {
       printf_format_elt *elt = list(i);
 
-      std::cerr << elt->args<< "\t"
-		<< elt->type << "\t"
-		<< elt->modifier << "\t"
-		<< undo_string_escapes (elt->text) << "\n";
+      std::cerr
+	<< "args:     " << elt->args << "\n"
+	<< "flags:    `" << elt->flags << "'\n"
+	<< "width:    " << elt->fw << "\n"
+	<< "prec:     " << elt->prec << "\n"
+	<< "type:     `" << elt->type << "'\n"
+	<< "modifier: `" << elt->modifier << "'\n"
+	<< "text:     `" << undo_string_escapes (elt->text) << "'\n\n";
     }
 }
 
 int
 octave_base_stream::file_number (void)
 {
   // Kluge alert!
 
@@ -1004,38 +1051,28 @@ octave_base_stream::read (const Matrix& 
   else
     invalid_operation ("fread", "reading");
 
   return retval;
 }
 
 #if defined (__GNUG__)
 
-#define OCTAVE_SCAN_0(is, fmt) is.scan ((fmt).text)
-
-#define OCTAVE_SCAN_1(is, fmt, arg) is.scan ((fmt).text, arg)
+#define OCTAVE_SCAN(is, fmt, arg) is.scan ((fmt).text, arg)
 
 #else
 
-#define OCTAVE_SCAN_0(is, fmt) octave_scan (is, fmt)
-
-#define OCTAVE_SCAN_1(is, fmt, arg) octave_scan (is, fmt, arg)
-
-std::istream&
-octave_scan (std::istream& is, const scanf_format_elt& fmt)
-{
-  return is;
-}
+#define OCTAVE_SCAN(is, fmt, arg) octave_scan (is, fmt, arg)
 
 template <class T>
 std::istream&
 octave_scan (std::istream& is, const scanf_format_elt& fmt, T valptr)
 {
-  // Someone else will have to fix this code.  I refuse to waste my
-  // time working on it when a reasonable alternative like
+  // Someone else who cares will have to fix this code.  I refuse to
+  // waste my time working on it when a reasonable alternative like
   // istream::scan exists in the GNU iostream library.  --jwe
 
   error ("formatted input only works when Octave is compiled with G++");
 
   is.setstate (std::ios::failbit);
 
   return is;
 }
@@ -1064,17 +1101,17 @@ octave_scan (std::istream&, const scanf_
 
 template <class T>
 void
 do_scanf_conv (std::istream& is, const scanf_format_elt& fmt,
 	       T valptr, Matrix& mval, double *data, int& idx,
 	       int& conversion_count, int nr, int max_size,
 	       bool discard) 
 {
-  OCTAVE_SCAN_1 (is, fmt, valptr);
+  OCTAVE_SCAN (is, fmt, valptr);
 
   if (is)
     {
       if (idx == max_size && ! discard)
 	{
 	  max_size *= 2;
 
 	  if (nr > 0)
@@ -1150,16 +1187,34 @@ do_scanf_conv (std::istream&, const scan
 	    } \
 	} \
  \
       if (i != n) \
 	is.setstate (std::ios::failbit); \
     } \
   while (0)
 
+#define DO_PCT_CONVERSION() \
+  do \
+    { \
+      int c = is.get (); \
+ \
+      if (c != EOF) \
+	{ \
+	  if (c != '%') \
+	    { \
+	      is.putback (c); \
+	      is.setstate (std::ios::failbit); \
+	    } \
+	} \
+      else \
+	is.setstate (std::ios::failbit); \
+    } \
+  while (0)
+
 #define BEGIN_C_CONVERSION() \
   is.unsetf (std::ios::skipws); \
  \
   int width = elt->width ? elt->width : 1; \
  \
   char *tmp = new char[width + 1]; \
  \
   int c = EOF; \
@@ -1178,17 +1233,17 @@ do_scanf_conv (std::istream&, const scan
   char *tmp = 0; \
  \
   do \
     { \
       if (width) \
 	{ \
 	  tmp = new char [width+1]; \
  \
-	  OCTAVE_SCAN_1 (is, *elt, tmp); \
+	  OCTAVE_SCAN (is, *elt, tmp); \
  \
 	  tmp[width] = '\0'; \
 	} \
       else \
 	{ \
 	  std::ostrstream buf; \
  \
 	  int c = EOF; \
@@ -1219,17 +1274,17 @@ do_scanf_conv (std::istream&, const scan
   char *tmp = 0; \
  \
   do \
     { \
       if (width) \
 	{ \
 	  tmp = new char[width+1]; \
  \
-	  OCTAVE_SCAN_1 (is, *elt, tmp); \
+	  OCTAVE_SCAN (is, *elt, tmp); \
  \
 	  tmp[width] = '\0'; \
 	} \
       else \
 	{ \
 	  std::ostrstream buf; \
  \
 	  std::string char_class = elt->char_class; \
@@ -1305,16 +1360,18 @@ do_scanf_conv (std::istream&, const scan
 
 octave_value
 octave_base_stream::do_scanf (scanf_format_list& fmt_list,
 			      int nr, int nc, bool one_elt_size_spec,
 			      int& conversion_count)
 {
   conversion_count = 0;
 
+  int nconv = fmt_list.num_conversions ();
+
   int data_index = 0;
 
   octave_value retval = Matrix ();
 
   if (nr == 0 || nc == 0)
     {
       if (one_elt_size_spec)
 	nc = 0;
@@ -1430,21 +1487,17 @@ octave_base_stream::do_scanf (scanf_form
 		  DO_WHITESPACE_CONVERSION ();
 		  break;
 
 		case scanf_format_elt::literal_conversion:
 		  DO_LITERAL_CONVERSION ();
 		  break;
 
 		case '%':
-		  {
-		    int dummy;
-
-		    OCTAVE_SCAN_1 (is, *elt, &dummy);
-		  }
+		  DO_PCT_CONVERSION ();
 		  break;
 
 		case 'd': case 'i': case 'o': case 'u': case 'x':
 		  {
 		    switch (elt->modifier)
 		      {
 		      case 'h':
 			{
@@ -1586,17 +1639,17 @@ octave_base_stream::do_scanf (scanf_form
 		}
 	    }
 	  else
 	    {
 	      error ("fscanf: internal format error");
 	      break;
 	    }
 
-	  elt = fmt_list.next ();
+	  elt = fmt_list.next (nconv > 0);
 	}
     }
 
   if (ok ())
     {
       mval.resize (final_nr, final_nc, 0.0);
 
       retval = mval;
@@ -1615,76 +1668,32 @@ octave_base_stream::scanf (const std::st
   octave_value retval = Matrix ();
 
   conversion_count = 0;
 
   std::istream *isp = input_stream ();
 
   if (isp)
     {
-      std::istream& is = *isp;
-
       scanf_format_list fmt_list (fmt);
 
-      switch (fmt_list.num_conversions ())
+      if (fmt_list.num_conversions () == -1)
+	::error ("fscanf: invalid format specified");
+      else
 	{
-	case -1:
-	  ::error ("fscanf: invalid format specified");
-	  break;
-
-	case 0:
-	  {
-	    const scanf_format_elt *elt = fmt_list.first ();
-
-	    if (elt)
-	      {
-		is.clear ();
-
-		OCTAVE_SCAN_0 (is, *elt);
-
-		if (! is)
-		  {
-		    // If it looks like we have a matching failure, then
-		    // reset the failbit in the stream state.
-
-		    if (is.rdstate () & std::ios::failbit)
-		      is.clear (is.rdstate () & (~std::ios::failbit));
-		    else
-		      error ("fscanf: read error");
-
-		    // XXX FIXME XXX -- is this the right thing to do?
-
-		    if (interactive && name () == "stdin")
-		      {
-			is.clear ();
-
-			// Skip to end of line.
-
-			bool err;
-			do_gets (-1, err, false, "fscanf");
-		      }
-		  }
-	      }
-	  }
-	  break;
-
-	default:
-	  {
-	    int nr = -1;
-	    int nc = -1;
-
-	    bool one_elt_size_spec;
-
-	    get_size (size, nr, nc, one_elt_size_spec, "fscanf");
-
-	    if (! error_state)
-	      retval = do_scanf (fmt_list, nr, nc, one_elt_size_spec,
-				 conversion_count);
-	  }
-	  break;
+	int nr = -1;
+	int nc = -1;
+
+	bool one_elt_size_spec;
+
+	get_size (size, nr, nc, one_elt_size_spec, "fscanf");
+
+	if (! error_state)
+	  retval = do_scanf (fmt_list, nr, nc, one_elt_size_spec,
+			     conversion_count);
 	}
     }
   else
     invalid_operation ("fscanf", "reading");
 
   return retval;
 }
 
@@ -1715,42 +1724,43 @@ octave_base_stream::do_oscanf (const sca
 	      break;
 
 	    case scanf_format_elt::literal_conversion:
 	      DO_LITERAL_CONVERSION ();
 	      break;
 
 	    case '%':
 	      {
-		int dummy;
-
-		if (! OCTAVE_SCAN_1 (is, *elt, &dummy))
+		DO_PCT_CONVERSION ();
+
+		if (! is)
 		  quit = true;
+
 	      }
 	      break;
 
 	    case 'd': case 'i': case 'o': case 'u': case 'x':
 	      {
 		int tmp;
 
-		if (OCTAVE_SCAN_1 (is, *elt, &tmp))
+		if (OCTAVE_SCAN (is, *elt, &tmp))
 		  {
 		    if (! discard)
 		      retval = static_cast<double> (tmp);
 		  }
 		else
 		  quit = true;
 	      }
 	      break;
 
 	    case 'e': case 'f': case 'g':
 	      {
 		double tmp;
 
-		if (OCTAVE_SCAN_1 (is, *elt, &tmp))
+		if (OCTAVE_SCAN (is, *elt, &tmp))
 		  {
 		    if (! discard)
 		      retval = tmp;
 		  }
 		else
 		  quit = true;
 	      }
 	      break;
@@ -1838,98 +1848,63 @@ octave_base_stream::oscanf (const std::s
   if (isp)
     {
       std::istream& is = *isp;
 
       scanf_format_list fmt_list (fmt);
 
       int nconv = fmt_list.num_conversions ();
 
-      switch (nconv)
+      if (nconv == -1)
+	::error ("fscanf: invalid format specified");
+      else
 	{
-	case -1:
-	  ::error ("fscanf: invalid format specified");
-	  break;
-
-	case 0:
-	  {
-	    const scanf_format_elt *elt = fmt_list.first ();
-
-	    if (elt)
-	      {
-		is.clear ();
-
-		OCTAVE_SCAN_0 (is, *elt);
-
-		if (! is)
-		  {
-		    error ("fscanf: read error");
-
-		    // XXX FIXME XXX -- is this the right thing to do?
-
-		    if (interactive && name () == "stdin")
-		      {
-			is.clear ();
-
-			// Skip to end of line.
-
-			bool err;
-			do_gets (-1, err, false, "fscanf");
-		      }
-		  }
-	      }
-	  }
-	  break;
-
-	default:
-	  {
-	    is.clear ();
-
-	    int len = fmt_list.length ();
-
-	    retval.resize (nconv+1, Matrix ());
-
-	    const scanf_format_elt *elt = fmt_list.first ();
-
-	    int num_values = 0;
-
-	    bool quit = false;
-
-	    for (int i = 0; i < len; i++)
-	      {
-		octave_value tmp;
-
-		quit = do_oscanf (elt, tmp);
-
-		if (quit)
-		  break;
-		else
-		  {
-		    if (tmp.is_defined ())
-		      retval (num_values++) = tmp;
-
-		    if (! ok ())
-		      break;
-		    elt = fmt_list.next ();
-		  }
-	      }
-
-	    retval (nconv) = static_cast<double> (num_values);
-
-	    if (! quit)
-	      {
-		// Pick up any trailing stuff.
-		if (ok () && len > nconv)
-		  {
-		    octave_value tmp;
-		    do_oscanf (elt, tmp);
-		  }
-	      }
-	  }
-	  break;
+	  is.clear ();
+
+	  int len = fmt_list.length ();
+
+	  retval.resize (nconv+1, Matrix ());
+
+	  const scanf_format_elt *elt = fmt_list.first ();
+
+	  int num_values = 0;
+
+	  bool quit = false;
+
+	  for (int i = 0; i < len; i++)
+	    {
+	      octave_value tmp;
+
+	      quit = do_oscanf (elt, tmp);
+
+	      if (quit)
+		break;
+	      else
+		{
+		  if (tmp.is_defined ())
+		    retval (num_values++) = tmp;
+
+		  if (! ok ())
+		    break;
+
+		  elt = fmt_list.next (nconv > 0);
+		}
+	    }
+
+	  retval (nconv) = static_cast<double> (num_values);
+
+	  if (! quit)
+	    {
+	      // Pick up any trailing stuff.
+	      if (ok () && len > nconv)
+		{
+		  octave_value tmp;
+		  do_oscanf (elt, tmp);
+		}
+	    }
 	}
     }
   else
     invalid_operation ("fscanf", "reading");
 
   return retval;
 }
 
@@ -2010,17 +1985,18 @@ public:
   // Get the current value as an int and advance the internal pointer.
   int int_value (void);
 
   // Get the current value as a string and advance the internal pointer.
   std::string string_value (void);
 
   operator bool () const { return (curr_state == ok); }
 
-  bool no_more_values (void) { return curr_state == list_exhausted; }
+  bool exhausted (void)
+    { return (curr_state == list_exhausted || val_idx + 1 >= n_vals); }
 
   bool looking_at_string (void);
 
 private:
 
   const octave_value_list values;
   int val_idx;
   int elt_idx;
@@ -2154,90 +2130,79 @@ printf_value_cache::string_value (void)
   return retval;
 }
 
 // Ugh again and again.
 
 template <class T>
 int
 do_printf_conv (std::ostream& os, const char *fmt, int nsa, int sa_1,
-		int sa_2, bool have_arg, T arg)
+		int sa_2, T arg)
 {
   int retval = 0;
 
   switch (nsa)
     {
     case 2:
-      if (have_arg)
-	retval = octave_format (os, fmt, sa_1, sa_2, arg);
-      else
-	retval = octave_format (os, fmt, sa_1, sa_2);
+      retval = octave_format (os, fmt, sa_1, sa_2, arg);
       break;
 
     case 1:
-      if (have_arg)
-	retval = octave_format (os, fmt, sa_1, arg);
-      else
-	retval = octave_format (os, fmt, sa_1);
+      retval = octave_format (os, fmt, sa_1, arg);
       break;
 
     case 0:
-      if (have_arg)
-	retval = octave_format (os, fmt, arg);
-      else
-	retval = octave_format (os, fmt);
+      retval = octave_format (os, fmt, arg);
       break;
 
     default:
       ::error ("fprintf: internal error handling format");
       break;
     }
 
   return retval;
 }
 
 template int
-do_printf_conv (std::ostream&, const char*, int, int, int, bool, int);
-
-template int
-do_printf_conv (std::ostream&, const char*, int, int, int, bool, long);
-
-template int
-do_printf_conv (std::ostream&, const char*, int, int, int, bool, double);
-
-template int
-do_printf_conv (std::ostream&, const char*, int, int, int, bool, const char*);
+do_printf_conv (std::ostream&, const char*, int, int, int, int);
+							   
+template int						   
+do_printf_conv (std::ostream&, const char*, int, int, int, long);
+							   
+template int						   
+do_printf_conv (std::ostream&, const char*, int, int, int, double);
+							   
+template int						   
+do_printf_conv (std::ostream&, const char*, int, int, int, const char*);
 
 int
 octave_base_stream::do_printf (printf_format_list& fmt_list,
 			       const octave_value_list& args)
 {
   int retval = 0;
 
+  int nconv = fmt_list.num_conversions ();
+
   std::ostream *osp = output_stream ();
 
   if (osp)
     {
       std::ostream& os = *osp;
 
       const printf_format_elt *elt = fmt_list.first ();
 
       printf_value_cache val_cache (args);
 
       for (;;)
 	{
 	  if (elt)
 	    {
-	      int args = elt->args;
-	      int nsa = args;
-
-	      int doing_percent = elt->type == '%';
-
-	      if (args > 0 && ! doing_percent)
-		nsa--;
+	      // NSA is the number of `star' args to convert.
+
+	      int nsa = (elt->fw < 0) + (elt->prec < 0);
 
 	      int sa_1 = 0;
 	      int sa_2 = 0; 
 
 	      if (nsa > 0)
 		{
 		  sa_1 = val_cache.int_value ();
 
@@ -2252,145 +2217,111 @@ octave_base_stream::do_printf (printf_fo
 			  if (! val_cache)
 			    break;
 			}
 		    }
 		}
 
 	      const char *fmt = elt->text;
 
-	      if (doing_percent || args == 0)
-		retval += do_printf_conv (os, fmt, nsa, sa_1, sa_2,
-					  false, 0.0);
+	      if (elt->type == '%')
+		{
+		  os << "%";
+		  retval++;
+		}
+	      else if (elt->args == 0 && elt->text)
+		{
+		  os << elt->text;
+		  retval += strlen (elt->text);
+		}	      
+	      else if (elt->type == 's' && val_cache.looking_at_string ())
+		{
+		  std::string val = val_cache.string_value ();
+
+		  if (val_cache)
+		    retval += do_printf_conv (os, fmt, nsa, sa_1,
+					      sa_2, val.c_str ());
+		  else
+		    break;
+		}
 	      else
 		{
-		  if (elt->type == 's' && val_cache.looking_at_string ())
+		  double val = val_cache.double_value ();
+
+		  if (val_cache)
 		    {
-		      std::string val = val_cache.string_value ();
-
-		      if (val_cache)
-			retval += do_printf_conv (os, fmt, nsa, sa_1,
-						  sa_2, true, val.c_str ());
-		      else
-			break;
+		      switch (elt->type)
+			{
+			case 'd': case 'i': case 'o': case 'x':
+			case 'X': case 'u': case 'c':
+			  {
+			    if (elt->modifier == 'l')
+			      retval
+				+= do_printf_conv (os, fmt, nsa, sa_1, sa_2,
+						   static_cast<long> (val));
+			    else
+			      retval
+				+= do_printf_conv (os, fmt, nsa, sa_1, sa_2,
+						   static_cast<int> (val));
+			  }
+			  break;
+
+			case 'f': case 'e': case 'E':
+			case 'g': case 'G':
+			  retval
+			    += do_printf_conv (os, fmt, nsa, sa_1, sa_2, val);
+			  break;
+
+			default:
+			  error ("fprintf: invalid format specifier");
+			  return -1;
+			  break;
+			}
 		    }
 		  else
-		    {
-		      double val = val_cache.double_value ();
-
-		      if (val_cache)
-			{
-			  switch (elt->type)
-			    {
-			    case 'd': case 'i': case 'o': case 'x':
-			    case 'X': case 'u': case 'c':
-			      {
-				if (elt->modifier == 'l')
-				  retval
-				    += do_printf_conv (os, fmt, nsa,
-						       sa_1, sa_2, true,
-						       static_cast<long> (val));
-				else
-				  retval
-				    += do_printf_conv (os, fmt, nsa,
-						       sa_1, sa_2, true,
-						       static_cast<int> (val));
-			      }
-			      break;
-
-			    case 'f': case 'e': case 'E':
-			    case 'g': case 'G':
-			      retval
-				+= do_printf_conv (os, fmt, nsa, sa_1,
-						   sa_2, true, val);
-			      break;
-
-			    default:
-			      error ("fprintf: invalid format specifier");
-			      return -1;
-			      break;
-			    }
-			}
-		      else
-			break;
-		    }
-
-		  if (val_cache.no_more_values ())
 		    break;
 		}
 
 	      if (! os)
 		{
 		  error ("fprintf: write error");
-		  retval = -1;
 		  break;
 		}
 	    }
 	  else
 	    {
 	      ::error ("fprintf: internal error handling format");
 	      retval = -1;
 	      break;
 	    }
 
-	  elt = fmt_list.next ();
-	}
+	  elt = fmt_list.next (nconv > 0 && ! val_cache.exhausted ());
+
+	  if (! elt || (val_cache.exhausted () && elt->args > 0))
+	    break;
+	}	      
     }
+  else
+    invalid_operation ("fprintf", "writing");
 
   return retval;
 }
 
 int
-octave_base_stream::printf (const std::string& fmt, const octave_value_list& args)
+octave_base_stream::printf (const std::string& fmt,
+			    const octave_value_list& args)
 {
-  int retval = -1;
-
-  std::ostream *osp = output_stream ();
-
-  if (osp)
-    {
-      std::ostream& os = *osp;
-
-      printf_format_list fmt_list (fmt);
-
-      switch (fmt_list.num_conversions ())
-	{
-	case -1:
-	  ::error ("fprintf: invalid format specified");
-	  break;
-
-	case 0:
-	  {
-	    const printf_format_elt *elt = fmt_list.first ();
-
-	    if (elt)
-	      {
-		retval = octave_format (os, elt->text);
-
-		if (! os)
-		  {
-		    retval = -1;
-		    error ("fprintf: write error");
-		  }
-	      }
-	  }
-	  break;
-
-	default:
-	  {
-	    if (args.length () == 0)
-	      ::error ("fprintf: no arguments available for specified format");
-	    else
-	      retval = do_printf (fmt_list, args);
-	  }
-	  break;
-	}
-    }
+  int retval = 0;
+
+  printf_format_list fmt_list (fmt);
+
+  if (fmt_list.num_conversions () == -1)
+    ::error ("fprintf: invalid format specified");
   else
-    invalid_operation ("fprintf", "writing");
+    retval = do_printf (fmt_list, args);
 
   return retval;
 }
 
 int
 octave_base_stream::puts (const std::string& s)
 {
   int retval = -1;
diff --git a/src/oct-stream.h b/src/oct-stream.h
--- a/src/oct-stream.h
+++ b/src/oct-stream.h
@@ -29,40 +29,74 @@ class octave_value;
 class octave_value_list;
 
 #include <iostream>
 #include <strstream>
 #include <string>
 
 #include "Array.h"
 #include "data-conv.h"
+#include "lo-utils.h"
 #include "mach-info.h"
 
-struct
+class
 scanf_format_elt
 {
+public:
+
   enum special_conversion
     {
       whitespace_conversion = 1,
       literal_conversion = 2
     };
 
   scanf_format_elt (const char *txt = 0, int w = 0, bool d = false,
 		    char typ = '\0', char mod = '\0',
 		    const std::string& ch_class = std::string ())
-    : text (txt), width (w), discard (d), type (typ), modifier (mod),
-      char_class (ch_class) { }
+    : text (strsave (txt)), width (w), discard (d), type (typ),
+      modifier (mod), char_class (ch_class) { }
+
+  scanf_format_elt (const scanf_format_elt& e)
+    : text (strsave (e.text)), width (e.width), discard (e.discard),
+      type (e.type), modifier (e.modifier), char_class (e.char_class) { }
 
-  ~scanf_format_elt (void) { delete text; }
+  scanf_format_elt& operator = (const scanf_format_elt& e)
+    {
+      if (this != &e)
+	{
+	  text = strsave (e.text);
+	  width = e.width;
+	  discard = e.discard;
+	  type = e.type;
+	  modifier = e.modifier;
+	  char_class = e.char_class;
+	}
 
+      return *this;
+    }
+
+  ~scanf_format_elt (void) { delete [] text; }
+
+  // The C-style format string.
   const char *text;
+
+  // The maximum field width.
   int width;
+
+  // TRUE if we are not storing the result of this conversion.
   bool discard;
+
+  // Type of conversion -- `d', `i', `o', `u', `x', `e', `f', `g',
+  // `c', `s', `p', `%', or `['.
   char type;
+
+  // A length modifier -- `h', `l', or `L'.
   char modifier;
+
+  // The class of characters in a `[' format.
   std::string char_class;
 };
 
 class
 scanf_format_list
 {
 public:
 
@@ -83,21 +117,27 @@ public:
     {
       curr_idx = 0;
       return current ();
     }
 
   const scanf_format_elt *current (void) const
     { return list.length () > 0 ? list.elem (curr_idx) : 0; }
 
-  const scanf_format_elt *next (void)
+  const scanf_format_elt *next (bool cycle = true)
     {
       curr_idx++;
+
       if (curr_idx >= list.length ())
-	curr_idx = 0;
+	{
+	  if (cycle)
+	    curr_idx = 0;
+	  else
+	    return 0;
+	}
       return current ();
     }
 
   void printme (void) const;
 
   bool ok (void) const { return (nconv >= 0); }
 
   operator bool () const { return ok (); }
@@ -117,44 +157,86 @@ private:
 
   // List of format elements.
   Array<scanf_format_elt*> list;
 
   // Temporary buffer.
   std::ostrstream *buf;
 
   void add_elt_to_list (int width, bool discard, char type, char modifier,
-			int& num_elts, const std::string& char_class = std::string ());
+			int& num_elts,
+			const std::string& char_class = std::string ()); 
 
   void process_conversion (const std::string& s, int& i, int n, int& width,
 			   bool& discard, char& type, char& modifier,
 			   int& num_elts);
 
   int finish_conversion (const std::string& s, int& i, int n, int& width,
 			 bool discard, char& type, char modifier,
 			 int& num_elts);
   // No copying!
 
   scanf_format_list (const scanf_format_list&);
 
   scanf_format_list& operator = (const scanf_format_list&);
 };
 
-struct
+class
 printf_format_elt
 {
-  printf_format_elt (const char *txt = 0, int n = 0, char typ = '\0',
-		     char mod = '\0')
-    : text (txt), args (n), type (typ), modifier (mod) { }
+public:
+
+  printf_format_elt (const char *txt = 0, int n = 0, int w = 0,
+		     int p = 0, const std::string& f = std::string (),
+		     char typ = '\0', char mod = '\0')
+    : text (strsave (txt)), args (n), fw (w), prec (p), flags (f),
+      type (typ), modifier (mod) { }
+
+  printf_format_elt (const printf_format_elt& e)
+    : text (strsave (e.text)), args (e.args), fw (e.fw), prec (e.prec),
+      flags (e.flags), type (e.type), modifier (e.modifier) { }
+
+  printf_format_elt& operator = (const printf_format_elt& e)
+    {
+      if (this != &e)
+	{
+	  text = strsave (e.text);
+	  args = e.args;
+	  fw = e.fw;
+	  prec = e.prec;
+	  flags = e.flags;
+	  type = e.type;
+	  modifier = e.modifier;
+	}
 
-  ~printf_format_elt (void) { delete text; }
+      return *this;
+    }
 
+  ~printf_format_elt (void) { delete [] text; }
+ 
+  // The C-style format string.
   const char *text;
+
+  // How many args do we expect to consume?
   int args;
+
+  // Field width.
+  int fw;
+
+  // Precision.
+  int prec;
+
+  // Flags -- `-', `+', ` ', `0', or `#'.
+  string flags;
+
+  // Type of conversion -- `d', `i', `o', `x', `X', `u', `c', `s',
+  // `f', `e', `E', `g', `G', `p', or `%'
   char type;
+
+  // A length modifier -- `h', `l', or `L'.
   char modifier;
 };
 
 class
 printf_format_list
 {
 public:
 
@@ -168,24 +250,33 @@ public:
     {
       curr_idx = 0;
       return current ();
     }
 
   const printf_format_elt *current (void) const
     { return list.length () > 0 ? list.elem (curr_idx) : 0; }
 
-  const printf_format_elt *next (void)
+  const printf_format_elt *next (bool cycle = true)
     {
       curr_idx++;
+
       if (curr_idx >= list.length ())
-	curr_idx = 0;
+	{
+	  if (cycle)
+	    curr_idx = 0;
+	  else
+	    return 0;
+	}
+
       return current ();
     }
 
+  bool last_elt_p (void) { return (curr_idx + 1 == list.length ()); }
+
   void printme (void) const;
 
   bool ok (void) const { return (nconv >= 0); }
 
   operator bool () const { return ok (); }
 
 private:
 
@@ -197,23 +288,27 @@ private:
   int curr_idx;
 
   // List of format elements.
   Array<printf_format_elt*> list;
 
   // Temporary buffer.
   std::ostrstream *buf;
 
-  void add_elt_to_list (int args, char type, char modifier,
-			int& num_elts);
-
-  void process_conversion (const std::string& s, int& i, int n, int& args,
-			   char& modifier, char& type, int& num_elts);
-
+  void add_elt_to_list (int args, const std::string& flags, int fw,
+			int prec, char type, char modifier,
+ 			int& num_elts);
+ 
+  void process_conversion (const std::string& s, int& i, int n,
+			   int& args, std::string& flags, int& fw,
+			   int& prec, char& modifier, char& type,
+			   int& num_elts); 
+ 
   void finish_conversion (const std::string& s, int& i, int args,
+			  const std::string& flags, int fw, int prec,
 			  char modifier, char& type, int& num_elts);
 
   // No copying!
 
   printf_format_list (const printf_format_list&);
 
   printf_format_list& operator = (const printf_format_list&);
 };
