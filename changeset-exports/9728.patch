# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1255604864 -7200
#      Thu Oct 15 13:07:44 2009 +0200
# Node ID 70925b11ba465579fa4aea5de2ced8d8ee5dfb3d
# Parent  04386b72d3dfe46650d15dda48c1f9a4d8212244
again allow the obsolete syntax for cellfun

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2009-10-15  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov.h (octave_value::octave_value (octave_base_value *, bool)) : New constructor.
+	(octave_value::octave_value (octave_base_value *, int)): Deprecate.
+	* DLD-FUNCTIONS/cellfun.cc (Fcellfun): Allow the obsolete func body syntax.
+
 2009-10-15  Jaroslav Hajek  <highegg@gmail.com>
 
 	* variables.cc (extract_function): Pass 0 to eval_string to avoid
 	error.
 
 2009-10-14  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov.cc (octave_value::octave_value (const Array<std::string>&)): New
diff --git a/src/DLD-FUNCTIONS/cellfun.cc b/src/DLD-FUNCTIONS/cellfun.cc
--- a/src/DLD-FUNCTIONS/cellfun.cc
+++ b/src/DLD-FUNCTIONS/cellfun.cc
@@ -36,16 +36,17 @@ along with Octave; see the file COPYING.
 #include "Cell.h"
 #include "oct-map.h"
 #include "defun-dld.h"
 #include "parse.h"
 #include "variables.h"
 #include "ov-colon.h"
 #include "unwind-prot.h"
 #include "gripes.h"
+#include "utils.h"
 
 // Rationale:
 // The octave_base_value::subsasgn method carries too much overhead for
 // per-element assignment strategy.
 // This class will optimize the most optimistic and most likely case
 // when the output really is scalar by defining a hierarchy of virtual
 // collectors specialized for some scalar types.
 
@@ -291,19 +292,16 @@ cellfun (@@factorial, @{-1,2@},'ErrorHan
   
   if (func.is_string ())
     {
       const Cell f_args = args(1).cell_value ();
 
       octave_idx_type k = f_args.numel ();
 
       std::string name = func.string_value ();
-      if (name.find_first_of ("(x)") != std::string::npos)
-        warning ("cellfun: passing function body as string is no longer supported."
-                 " Use @ or `inline'.");
 
       if (name == "isempty")
         {      
           boolNDArray result (f_args.dims ());
           for (octave_idx_type count = 0; count < k ; count++)
             result(count) = f_args.elem(count).is_empty ();
           retval(0) = result;
         }
@@ -379,16 +377,29 @@ cellfun (@@factorial, @{-1,2@},'ErrorHan
 
               retval(0) = result;
             }
           else
             error ("not enough arguments for `isclass'");
         }
       else
         {
+          if (! valid_identifier (name))
+            {
+
+              std::string fcn_name = unique_symbol_name ("__cellfun_fcn_");
+              std::string fname = "function y = ";
+              fname.append (fcn_name);
+              fname.append ("(x) y = ");
+              octave_function *ptr_func = extract_function (args(0), "cellfun", 
+                                                            fcn_name, fname, "; endfunction");
+              if (ptr_func && ! error_state)
+                func = octave_value (ptr_func, true);
+            }
+
           func = symbol_table::find_function (name);
           if (func.is_undefined ())
             error ("cellfun: invalid function name: %s", name.c_str ());
         }
     }
 
   if (error_state || ! retval.empty ())
     return retval;
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -1113,19 +1113,21 @@ octave_value::octave_value (const octave
 {
 }
 
 octave_value::octave_value (octave_value::magic_colon)
   : rep (new octave_magic_colon ())
 {
 }
 
-octave_value::octave_value (octave_base_value *new_rep)
+octave_value::octave_value (octave_base_value *new_rep, bool borrow)
   : rep (new_rep)
 {
+  if (borrow)
+    rep->count++;
 }
 
 octave_value::octave_value (octave_base_value *new_rep, int xcount)
   : rep (new_rep)
 {
   rep->count = xcount;
 }
 
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -274,18 +274,18 @@ public:
   octave_value (const idx_vector& idx);
   octave_value (double base, double limit, double inc);
   octave_value (const Range& r);
   octave_value (const Octave_map& m);
   octave_value (const Octave_map& m, const std::string& id);
   octave_value (const octave_value_list& m, bool is_cs_list = false);
   octave_value (octave_value::magic_colon);
 
-  octave_value (octave_base_value *new_rep);
-  octave_value (octave_base_value *new_rep, int xcount);
+  octave_value (octave_base_value *new_rep, bool borrow = false);
+  octave_value (octave_base_value *new_rep, int xcount) GCC_ATTR_DEPRECATED;
 
   // Copy constructor.
 
   octave_value (const octave_value& a)
     {
       rep = a.rep;
       rep->count++;
     }
