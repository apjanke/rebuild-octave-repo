# HG changeset patch
# User jwe
# Date 865192546 0
#      Sun Jun 01 19:15:46 1997 +0000
# Node ID ea9af2ffa80d47347277c40efb58d7fa325a8d3d
# Parent  cc828a2ace0d9391ce98c651225800438da5b09f
[project @ 1997-06-01 19:15:46 by jwe]

diff --git a/src/lex.h b/src/lex.h
--- a/src/lex.h
+++ b/src/lex.h
@@ -160,20 +160,16 @@ public:
 
   // TRUE means we're looking at the style part of a plot command.
   bool in_plot_style;
 
   // TRUE means we're looking at an indirect reference to a
   // structure element.
   bool looking_at_indirect_ref;
 
-  // TRUE means we need to do some extra lookahead to avoid being
-  // screwed by bogus function syntax.
-  int maybe_screwed_again;
-
   // TRUE means that we've already seen the name of this function.
   // Should only matter if defining_func is also TRUE.
   bool parsed_function_name;
 
   // TRUE means we've seen something that means we must be past the
   // range part of a plot command.
   bool past_plot_range;
 
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -1945,36 +1945,37 @@ lexical_feedback::init (void)
   in_plot_style = false;
   in_plot_using = false;
   past_plot_range = false;
   plotting = false;
 
   // Not initially looking at indirect references.
   looking_at_indirect_ref = false;
 
-  // Not initially screwed by `function [...] = f (...)' syntax.
-  maybe_screwed_again = 0;
-
   // Quote marks strings intially.
   quote_is_transpose = false;
 }
 
 int
 whitespace_in_literal_matrix (void)
 {
   int pref = 0;
+
   string val = builtin_string_variable ("whitespace_in_literal_matrix");
+
   if (! val.empty ())
     {
       if (val.compare ("ignore", 0, 6) == 0)
 	pref = 2;
       else if (val.compare ("traditional", 0, 11) == 0)
 	pref = 1;
     }
+
   Vwhitespace_in_literal_matrix = pref;
+
   return 0;
 }
 
 void
 symbols_of_lex (void)
 {
   DEFVAR (whitespace_in_literal_matrix, "", 0, whitespace_in_literal_matrix,
     "control auto-insertion of commas and semicolons in literal matrices");
