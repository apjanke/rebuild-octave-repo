# HG changeset patch
# User jwe
# Date 1057945601 0
#      Fri Jul 11 17:46:41 2003 +0000
# Node ID 75ee1995d2b49fca4949ced2d6b7240a17763f02
# Parent  2274f58d9b800c79f8c4cf509d2387bda25b1735
[project @ 2003-07-11 17:46:41 by jwe]

diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -43,16 +43,23 @@ class idx_vector;
 #ifndef HEAVYWEIGHT_INDEXING
 #define HEAVYWEIGHT_INDEXING 1
 #endif
 
 // One dimensional array class.  Handles the reference counting for
 // all the derived classes.
 
 template <class T>
+T
+resize_fill_value (const T& x)
+{
+  return x;
+}
+
+template <class T>
 class
 Array
 {
 protected:
 
 // The real representation of all arrays.
 
   class ArrayRep
@@ -248,34 +255,36 @@ public:
 
   idx_vector *get_idx (void) const { return idx; }
 
   void maybe_delete_elements (idx_vector& i);
 
   Array<T> value (void);
 
   Array<T> index (idx_vector& i, int resize_ok = 0,
-		  const T& rfv = Array<T>::resize_fill_value ()) const;
+		  const T& rfv = resize_fill_value (T ())) const;
 
 #endif
 
-  static T resize_fill_value (void) { return T (); }
+  //  static T resize_fill_value (void) { return T (); }
 
   void print_info (std::ostream& os, const std::string& prefix) const;
 };
 
 template <class LT, class RT>
 int
 assign (Array<LT>& lhs, const Array<RT>& rhs, const LT& resize_fill_value);
 
+
 template <class LT, class RT>
 int
 assign (Array<LT>& lhs, const Array<RT>& rhs)
 {
-  return assign (lhs, rhs, Array<LT>::resize_fill_value ());
+  //  return assign (lhs, rhs, Array<LT>::resize_fill_value ());
+  return assign (lhs, rhs, resize_fill_value (LT ()));
 }
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/liboctave/Array2-idx.h b/liboctave/Array2-idx.h
--- a/liboctave/Array2-idx.h
+++ b/liboctave/Array2-idx.h
@@ -51,18 +51,17 @@ Array2<T>::value (void)
 
   clear_index ();
 
   return retval;
 }
 
 template <class T>
 Array2<T>
-Array2<T>::index (idx_vector& idx_arg, int resize_ok,
-		  const T& resize_fill_value) const
+Array2<T>::index (idx_vector& idx_arg, int resize_ok, const T& rfv) const
 {
   Array2<T> retval;
 
   int nr = d1;
   int nc = d2;
 
   int orig_len = nr * nc;
 
@@ -147,17 +146,17 @@ Array2<T>::index (idx_vector& idx_arg, i
 
 	  int k = 0;
 	  for (int j = 0; j < result_nc; j++)
 	    {
 	      for (int i = 0; i < result_nr; i++)
 		{
 		  int ii = idx_arg.elem (k++);
 		  if (ii >= orig_len)
-		    retval.elem (i, j) = resize_fill_value;
+		    retval.elem (i, j) = rfv;
 		  else
 		    {
 		      int fr = ii % nr;
 		      int fc = (ii - fr) / nr;
 		      retval.elem (i, j) = elem (fr, fc);
 		    }
 		}
 	    }
@@ -166,17 +165,17 @@ Array2<T>::index (idx_vector& idx_arg, i
     }
 
   return retval;
 }
 
 template <class T>
 Array2<T>
 Array2<T>::index (idx_vector& idx_i, idx_vector& idx_j, int resize_ok,
-		  const T& resize_fill_value) const
+		  const T& rfv) const
 {
   Array2<T> retval;
 
   int nr = d1;
   int nc = d2;
 
   int n = idx_i.freeze (nr, "row", resize_ok);
   int m = idx_j.freeze (nc, "column", resize_ok);
@@ -197,17 +196,17 @@ Array2<T>::index (idx_vector& idx_i, idx
 
 	  for (int j = 0; j < m; j++)
 	    {
 	      int jj = idx_j.elem (j);
 	      for (int i = 0; i < n; i++)
 		{
 		  int ii = idx_i.elem (i);
 		  if (ii >= nr || jj >= nc)
-		    retval.elem (i, j) = resize_fill_value;
+		    retval.elem (i, j) = rfv;
 		  else
 		    retval.elem (i, j) = elem (ii, jj);
 		}
 	    }
 	}
     }
 
   // idx_vector::freeze() printed an error message for us.
@@ -492,24 +491,24 @@ Array2<T>::maybe_delete_elements (idx_ve
       if (liboctave_rre_flag) \
 	{ \
 	  int max_row_idx = idx_i_is_colon ? rhs_nr : idx_i.max () + 1; \
 	  int max_col_idx = idx_j_is_colon ? rhs_nc : idx_j.max () + 1; \
  \
 	  int new_nr = max_row_idx > lhs_nr ? max_row_idx : lhs_nr; \
 	  int new_nc = max_col_idx > lhs_nc ? max_col_idx : lhs_nc; \
  \
-	  lhs.resize (new_nr, new_nc, resize_fill_value); \
+	  lhs.resize (new_nr, new_nc, rfv); \
 	} \
     } \
   while (0)
 
 template <class LT, class RT>
 int
-assign (Array2<LT>& lhs, const Array2<RT>& rhs, const LT& resize_fill_value)
+assign (Array2<LT>& lhs, const Array2<RT>& rhs, const LT& rfv)
 {
   int retval = 1;
 
   int n_idx = lhs.index_count ();
 
   int lhs_nr = lhs.rows ();
   int lhs_nc = lhs.cols ();
 
diff --git a/liboctave/Array2.h b/liboctave/Array2.h
--- a/liboctave/Array2.h
+++ b/liboctave/Array2.h
@@ -177,35 +177,35 @@ public:
 
   void maybe_delete_elements (idx_vector& i);
 
   void maybe_delete_elements (idx_vector& i, idx_vector& j);
 
   Array2<T> value (void);
 
   Array2<T> index (idx_vector& i, int resize_ok = 0,
-		   const T& rfv = Array<T>::resize_fill_value ()) const;
+		   const T& rfv = resize_fill_value (T ())) const;
 
   Array2<T> index (idx_vector& i, idx_vector& j, int resize_ok = 0,
-		   const T& rfv = Array<T>::resize_fill_value ()) const;
+		   const T& rfv = resize_fill_value (T ())) const;
 
 #endif
 
   void print_info (std::ostream& os, const std::string& prefix) const;
 };
 
 template <class LT, class RT>
 int
 assign (Array2<LT>& lhs, const Array2<RT>& rhs, const LT& resize_fill_value);
 
 template <class LT, class RT>
 int
 assign (Array2<LT>& lhs, const Array2<RT>& rhs)
 {
-  return assign (lhs, rhs, Array<LT>::resize_fill_value ());
+  return assign (lhs, rhs, resize_fill_value (LT ()));
 }
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/liboctave/ArrayN.h b/liboctave/ArrayN.h
--- a/liboctave/ArrayN.h
+++ b/liboctave/ArrayN.h
@@ -176,33 +176,33 @@ public:
   ArrayN<T>& insert (const ArrayN<T>& a, const Array<int>& dims);
 
 #ifdef HEAVYWEIGHT_INDEXING
   void maybe_delete_elements (Array<idx_vector>& ra_idx);
 
   ArrayN<T> value (void);
 
   ArrayN<T> index (idx_vector& ra_idx, int resize_ok = 0,
-		   const T& rfv = Array<T>::resize_fill_value ()) const;
+		   const T& rfv = resize_fill_value (T ())) const;
 
   ArrayN<T> index (Array<idx_vector>& ra_idx, int resize_ok = 0,
-		   const T& rfv = Array<T>::resize_fill_value ()) const;
+		   const T& rfv = resize_fill_value (T ())) const;
 
 #endif
 };
 
 template <class LT, class RT>
 int
 assign (ArrayN<LT>& lhs, const ArrayN<RT>& rhs, const LT& resize_fill_value);
 
 template <class LT, class RT>
 int
 assign (ArrayN<LT>& lhs, const ArrayN<RT>& rhs)
 {
-  return assign (lhs, rhs, Array<LT>::resize_fill_value ());
+  return assign (lhs, rhs, resize_fill_value (LT ()));
 }
 
 template <class T>
 std::ostream&
 operator << (std::ostream&, const ArrayN<T>&);
 
 #endif
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2003-07-11  Russell Standish <R.Standish@unsw.edu.au>
+
+	* Array.h (resize_fill_value): Now a top-level template function.
+	Accept object as argument.  Change all uses.
+
 2003-07-09  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Array-flags.cc, Array-flags.h (liboctave_pcv_flag): Delete.
 
 	* Array2-idx.h (Array2<T>::index): Use liboctave_wfi_flag, not
 	liboctave_dfi_flag.
 	(assign): Likewise.  For indexed assignments like X(I) = RHS with
 	X undefined or empty, always create a row vector.
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2003-07-11  Russell Standish <R.Standish@unsw.edu.au>
+
+	* TEMPLATE-INST/Array-tc.cc (resize_fill_value): Provide
+	specialization.
+
 2003-07-10  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* strfns.cc (Fchar): Force string conversions without warnings.
 
 	* ov.h (octave_value::convert_to_str, octave_value::all_strings,
 	octave_value::string_value, octave_value:convert_to_str_internal):
 	New arg, force.  Fix all derived classes to match.
 
diff --git a/src/TEMPLATE-INST/Array-tc.cc b/src/TEMPLATE-INST/Array-tc.cc
--- a/src/TEMPLATE-INST/Array-tc.cc
+++ b/src/TEMPLATE-INST/Array-tc.cc
@@ -22,36 +22,38 @@ Software Foundation, 59 Temple Place - S
 
 // Instantiate Arrays of octave_values.
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "Array.h"
+
+
 #include "Array.cc"
 
 #include "Array2.h"
 #include "Array2.cc"
 
 #include "DiagArray2.h"
 #include "DiagArray2.cc"
 
 #include "oct-obj.h"
 
-template<>
-octave_value
-Array<octave_value>::resize_fill_value (void)
+octave_value 
+resize_fill_value (const octave_value& x)
 {
   static octave_value retval = octave_value (Matrix ());
   return retval;
 }
 
 template class Array<octave_value>;
 
+
 template int assign (Array<octave_value>&, const Array<octave_value>&);
 
 template int assign (Array<octave_value>&,
 		     const Array<octave_value>&, const octave_value&);
 
 
 template class Array2<octave_value>;
 
