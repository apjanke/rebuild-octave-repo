# HG changeset patch
# User jwe
# Date 945319906 0
#      Thu Dec 16 04:51:46 1999 +0000
# Node ID 42cb61dd02486968c6cc8c8728e262fc21537bb9
# Parent  eb4223985ca87ddc6978fc8ebe472e8ba1113ac3
[project @ 1999-12-16 04:51:43 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,18 +1,25 @@
 1999-12-15  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
-	* control/bddemo.m: Make it more likely to work with
-	whitespace_in_literal_matrix = "ignore".
+	* control/bddemo.m: Make it more likely to work with any value of
+	whitespace_in_literal_matrix.
 	* control/analdemo.m: Ditto.
 	* control/dgkfdemo.m: Ditto.
 	* control/frdemo.m: Ditto.
 	* control/sysrepdemo.m: Ditto.
 	* control/moddemo.m: Ditto.
+	* control/zp2ss.m: Ditto.
 	* control/zp2tf.m: Ditto.
+	* control/syssub.m: Ditto.
+	* finance/npv.m: Ditto.
+	* statistics/base/studentize.m: Ditto.
+	* statistics/base/values.m: Ditto.
+	* statistics/distributions/exponential_cdf.m: Ditto.
+	* statistics/distributions/poisson_cdf.m: Ditto.
 
 	* control/dezero.m: Use toascii to convert string to ASCII value
 	instead of multiplying it by 1.
 
 	* control/zp2sys.m: Don't save and restore implicit_str_to_num_ok.
 	* control/zpout.m: Ditto.
 	* control/tfout.m: Ditto.
 	* control/tf2sys.m: Ditto.
diff --git a/scripts/control/analdemo.m b/scripts/control/analdemo.m
--- a/scripts/control/analdemo.m
+++ b/scripts/control/analdemo.m
@@ -44,17 +44,17 @@ function analdemo ()
       help dgram
       prompt
 
       clc 
       disp("System Grammians: (see Moore, IEEE T-AC, 1981) \n");
       disp("Example #1, consider the discrete time state space system:\n");
       a=[1, 5, -8.4; 1.2, -3, 5; 1, 7, 9]
       b=[1, 5; 2, 6; -4.4, 5]
-      c=[1 -1.5, 2; 6, -9.8, 1]
+      c=[1, -1.5, 2; 6, -9.8, 1]
       d=0
       prompt
       disp("\nThe discrete controllability grammian is computed as follows:");
       cmd = "grammian = dgram(a, b);";
       run_cmd;
       disp("Results:\n");
       grammian = dgram(a,b)
       disp("Variable Description:\n");
diff --git a/scripts/control/syssub.m b/scripts/control/syssub.m
--- a/scripts/control/syssub.m
+++ b/scripts/control/syssub.m
@@ -95,17 +95,17 @@ function sys = syssub (...)
     Hsys = syssetsignals(Hsys,"in",sysdefioname(length(Hin),"Hin_u"));
     Hsys = syssetsignals(Hsys,"out",sysdefioname(length(Hout),"Hout_u"));
     
     sys = sysgroup(Gsys,Hsys);
   
     eyin = eye(mg);
     eyout = eye(pg);
   
-    sys = sysscale(sys,[eyout -eyout],[eyin;eyin],Gout,Gin);
+    sys = sysscale (sys, [eyout, -eyout], [eyin; eyin], Gout, Gin);
   
   else
     ## multiple systems (or a single system); combine together one by one
     sys = nth(arglist,1);
     for kk=2:length(arglist)
       sys = syssub(sys,nth(arglist,kk));
     endfor
   endif
diff --git a/scripts/control/zp2ss.m b/scripts/control/zp2ss.m
--- a/scripts/control/zp2ss.m
+++ b/scripts/control/zp2ss.m
@@ -107,27 +107,27 @@ function [a, b, c, d] = zp2ss (zer, pol,
       pcnt = 2;
     endif
 
     num=1;	# assume no zeros left.
     switch(pcnt)
     case(1)
       ## real pole/zero combination
       if(length(zer))
-        num = [1 -zer(1)];  
+        num = [1, -zer(1)];  
         zer = zer(2:length(zer));
       endif
-      den = [1 -pol(1)];
+      den = [1, -pol(1)];
       pol = pol(2:length(pol));
     case(2)
       ## got a complex pole or zero, need two roots (if available)
       if(length(zer) > 1)
         [num,zer] = zp2ssg2(zer);	# get two zeros
       elseif(length(zer) == 1)
-        num = [1 -zer];			# use last zero (better be real!)
+        num = [1, -zer];		# use last zero (better be real!)
         zer = [];
       endif
       [den,pol] = zp2ssg2(pol);		# get two poles
     otherwise
       error(["pcnt = ",num2str(pcnt)])
     endswitch
 
     ## pack tf into system form and put in series with earlier realization
diff --git a/scripts/finance/npv.m b/scripts/finance/npv.m
--- a/scripts/finance/npv.m
+++ b/scripts/finance/npv.m
@@ -47,20 +47,19 @@ function v = npv (r, p, i)
   endif
   
   if any (any (r <= -1))
     error ("npv:  all interest rates must be > -1");
   endif
   if is_scalar (r)
     d = 1 ./ (1 + r) .^ (0 : n);
   elseif (is_vector (r) && (length (r) == n))
-    d = [1, 1 ./ cumprod (reshape (1 + r, 1, n))];
+    d = [1, (1 ./ cumprod (reshape (1 + r, 1, n)))];
   else
-    error (["npv:  r has be a scalar ", ...
-	"or a vector of the same length as p"]);
+    error ("npv: r must be a scalar or a vector of the same length as p");
   endif
 
   if (nargin == 3)
     if !is_scalar (i)
       error ("npv:  I_0 must be a scalar");
     endif
   else
     i = 0;
diff --git a/scripts/statistics/base/studentize.m b/scripts/statistics/base/studentize.m
--- a/scripts/statistics/base/studentize.m
+++ b/scripts/statistics/base/studentize.m
@@ -34,14 +34,14 @@ function t = studentize (x)
     if (std (x) == 0)
       t = zeros (size (x));
     else
       t = (x - mean (x)) / std (x);
     endif
   elseif is_matrix (x)
     l = ones (rows (x), 1);
     t = x - l * mean (x);
-    t = t ./ (l * max ([std (t); !any (t)]));
+    t = t ./ (l * max ([(std (t)); (! any (t))]));
   else
     error ("studentize:  x must be a vector or a matrix.");
   endif
 
 endfunction
\ No newline at end of file
diff --git a/scripts/statistics/base/values.m b/scripts/statistics/base/values.m
--- a/scripts/statistics/base/values.m
+++ b/scripts/statistics/base/values.m
@@ -32,14 +32,14 @@ function v = values (x)
     error ("values:  x must be a vector");
   endif
 
   i = any (isnan (x));
   x = x(find(!isnan (x)));	# HACK!
   n = length (x);
   x = reshape (x, n, 1);
   s = sort (x);
-  v = s([1; find (s(2:n) > s(1:n-1)) + 1]);
+  v = s([1; (find (s(2:n) > s(1:n-1)) + 1)]);
   if (i)
     v = [v; NaN];
   endif
 
 endfunction
diff --git a/scripts/statistics/distributions/exponential_cdf.m b/scripts/statistics/distributions/exponential_cdf.m
--- a/scripts/statistics/distributions/exponential_cdf.m
+++ b/scripts/statistics/distributions/exponential_cdf.m
@@ -27,18 +27,17 @@
 function cdf = exponential_cdf (x, l)
   
   if (nargin != 2)
     usage ("exponential_cdf (x, lambda)");
   endif
   
   [retval, x, l] = common_size (x, l);
   if (retval > 0)
-    error (["exponential_cdf:  ",
-	    "x and lambda must be of common size or scalar"]);
+    error ("exponential_cdf: x and lambda must be of common size or scalar");
   endif
   
   [r, c] = size (x);
   s = r * c;
   x = reshape (x, 1, s);
   l = reshape (l, 1, s);
   cdf = zeros (1, s);
   
diff --git a/scripts/statistics/distributions/poisson_cdf.m b/scripts/statistics/distributions/poisson_cdf.m
--- a/scripts/statistics/distributions/poisson_cdf.m
+++ b/scripts/statistics/distributions/poisson_cdf.m
@@ -25,18 +25,17 @@
 function cdf = poisson_cdf (x, l)
   
   if (nargin != 2)
     usage ("poisson_cdf (x, lambda)");
   endif
   
   [retval, x, l] = common_size (x, l);
   if (retval > 0)
-    error (["poisson_cdf:  ",
-	    "x and lambda must be of common size or scalar"]);
+    error ("poisson_cdf: x and lambda must be of common size or scalar");
   endif
   
   [r, c] = size (x);
   s = r * c;
   x = reshape (x, 1, s);
   l = reshape (l, 1, s);
   cdf = zeros (1, s);
   
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,20 @@
+1999-12-15  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* lex.l (Vwarn_separator_insert): New variable.
+	(syms_of_lex): DEFVAR it.
+	(warn_separator_insert): New function.
+	(maybe_warn_separator_insert): New function.
+	Use new stuff to allow warnings for code that might result in
+	auto-insertion of commas or semicolons, depending on the value of
+	whitespace_in_literal_matrix.
+
+	* parse.y (Fsource): Record function file name here too.
+
 1999-12-13  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* variables.cc (link_to_global_variable): If the local symbol is
 	not a variable, don't bother to clear it.  Instead, just redefine
 	it by aliasing to the global symbol.
 
 1999-11-23  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -158,16 +158,18 @@ static bracket_brace_paren_nesting_level
 // comma between identifiers and `('.  For example, the statement
 //
 //   [eye (2)]
 //
 // will result in a call to `eye' with the argument `2'.
 
 static int Vwhitespace_in_literal_matrix;
 
+static bool Vwarn_separator_insert = false;
+
 // Forward declarations for functions defined at the bottom of this
 // file.
 
 static void fixup_column_count (char *s);
 static void do_comma_insert_check (void);
 static int is_plot_keyword (const string& s);
 static int is_keyword (const string& s);
 static string plot_style_token (const string& s);
@@ -181,16 +183,17 @@ static string strip_trailing_whitespace 
 static void handle_number (void);
 static int handle_string (char delim, int text_style = 0);
 static int handle_close_bracket (int spc_gobbled);
 static int handle_identifier (const string& tok, int spc_gobbled);
 static bool have_continuation (bool trailing_comments_ok = true);
 static bool have_ellipsis_continuation (bool trailing_comments_ok = true);
 static yum_yum eat_whitespace (void);
 static yum_yum eat_continuation (void);
+static void maybe_warn_separator_insert (char sep);
 
 %}
 
 D	[0-9]
 S	[ \t]
 NL	((\n)|(\r\n))
 SNL	({S}|{NL})
 EL	(\.\.\.)
@@ -272,50 +275,68 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 %{
 // Commas are element separators in matrix constants.  If we don't
 // check for continuations here we can end up inserting too many
 // commas.
 %}
 
 <MATRIX>{S}*\,{S}* {
     current_input_column += yyleng;
+
     int tmp = eat_continuation ();
+
     lexer_flags.quote_is_transpose = false;
     lexer_flags.cant_be_identifier = false;
     lexer_flags.convert_spaces_to_comma = true;
-    if (Vwhitespace_in_literal_matrix != 2
-	&& (tmp & ATE_NEWLINE) == ATE_NEWLINE)
-      unput (';');
+
+    if ((tmp & ATE_NEWLINE) == ATE_NEWLINE)
+      {
+	maybe_warn_separator_insert (';');
+
+	if (Vwhitespace_in_literal_matrix != 2)
+	  unput (';');
+      }
+
     return (',');
   }
 
 %{
 // In some cases, spaces in matrix constants can turn into commas.
 // If commas are required, spaces are not important in matrix
 // constants so we just eat them.  If we don't check for continuations
 // here we can end up inserting too many commas.
 %}
 
 <MATRIX>{S}+ {
     current_input_column += yyleng;
-    if (Vwhitespace_in_literal_matrix != 2)
+
+    int tmp = eat_continuation ();
+    int bin_op = next_token_is_bin_op (true);
+    int postfix_un_op = next_token_is_postfix_unary_op (true);
+
+    if (! (postfix_un_op || bin_op)
+	&& nesting_level.is_bracket ()
+	&& lexer_flags.convert_spaces_to_comma)
       {
-	int tmp = eat_continuation ();
-	int bin_op = next_token_is_bin_op (true);
-	int postfix_un_op = next_token_is_postfix_unary_op (true);
+	if ((tmp & ATE_NEWLINE) == ATE_NEWLINE)
+	  {
+	    maybe_warn_separator_insert (';');
 
-	if (! (postfix_un_op || bin_op)
-	    && nesting_level.is_bracket ()
-	    && lexer_flags.convert_spaces_to_comma)
+	    if (Vwhitespace_in_literal_matrix != 2)
+	      unput (';');
+	  }
+
+	if (Vwhitespace_in_literal_matrix != 2)
 	  {
 	    lexer_flags.quote_is_transpose = false;
 	    lexer_flags.cant_be_identifier = false;
 	    lexer_flags.convert_spaces_to_comma = true;
-	    if ((tmp & ATE_NEWLINE) == ATE_NEWLINE)
-	      unput (';');
+
+	    maybe_warn_separator_insert (',');
+
 	    return (',');
 	  }
       }
   }
 
 %{
 // Semicolons are handled as row seprators in matrix constants.  If we
 // don't eat whitespace here we can end up inserting too many
@@ -336,26 +357,32 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 // don't eat whitespace here we can end up inserting too many
 // semicolons.
 %}
 
 <MATRIX>{S}*{COMMENT}{SNLCMT}* |
 <MATRIX>{S}*{NL}{SNLCMT}* {
     fixup_column_count (yytext);
     eat_whitespace ();
+
     if (Vwhitespace_in_literal_matrix != 2)
       {
 	lexer_flags.quote_is_transpose = false;
 	lexer_flags.cant_be_identifier = false;
 	lexer_flags.convert_spaces_to_comma = true;
 
 	if (nesting_level.none ())
 	  return LEXICAL_ERROR;
+      }
 
-	if (nesting_level.is_bracket ())
+    if (nesting_level.is_bracket ())
+      {
+	maybe_warn_separator_insert (';');
+
+	if (Vwhitespace_in_literal_matrix != 2)
 	  return ';';
       }
   }
 
 %{
 // Open and close bracket are handled differently if we are in the range
 // part of a plot command.
 //
@@ -1845,67 +1872,91 @@ handle_close_bracket (int spc_gobbled)
     {
       retval = CLOSE_BRACE;
     }
   else
     {
       int c1 = yyinput ();
       unput (c1);
 
-      if (lexer_flags.bracketflag && Vwhitespace_in_literal_matrix != 2)
+      if (lexer_flags.bracketflag)
 	{
 	  int bin_op = next_token_is_bin_op (spc_gobbled);
 
 	  int postfix_un_op = next_token_is_postfix_unary_op (spc_gobbled);
 
 	  int sep_op = next_token_is_sep_op ();
 
 	  if (! (postfix_un_op || bin_op || sep_op)
 	      && nesting_level.is_bracket ()
 	      && lexer_flags.convert_spaces_to_comma)
 	    {
-	      unput (',');
-	      return ']';
+	      maybe_warn_separator_insert (',');
+
+	      if (Vwhitespace_in_literal_matrix != 2)
+		{
+		  unput (',');
+		  return ']';
+		}
 	    }
 	}
     }
 
   lexer_flags.quote_is_transpose = true;
   lexer_flags.cant_be_identifier = false;
   lexer_flags.convert_spaces_to_comma = true;
 
   return retval;
 }
 
 static void
 maybe_unput_comma (int spc_gobbled)
 {
-  if (Vwhitespace_in_literal_matrix != 2 && nesting_level.is_bracket ())
+  if (nesting_level.is_bracket ())
     {
       int bin_op = next_token_is_bin_op (spc_gobbled);
 
       int postfix_un_op = next_token_is_postfix_unary_op (spc_gobbled);
 
       int c1 = yyinput ();
       int c2 = yyinput ();
 
       unput (c2);
       unput (c1);
 
       int sep_op = next_token_is_sep_op ();
 
       int dot_op = (c1 == '.'
 		    && (isalpha (c2) || isspace (c2) || c2 == '_'));
 
-      int index_op = (c1 == '('
-		      && (Vwhitespace_in_literal_matrix == 0
-			  || ! spc_gobbled));
+      if (postfix_un_op || bin_op || sep_op || dot_op)
+	return;
+
+      int index_op = (c1 == '(');
+
+      if (index_op)
+	{
+	  // If there is no space before the '(', we don't insert a comma.
+	  if (! spc_gobbled)
+	    return;
+
+	  maybe_warn_separator_insert (',');
 
-      if (! (postfix_un_op || bin_op || sep_op || dot_op || index_op))
-	unput (',');
+	  // If there is a space, we only insert a comma if we are
+	  // trying to be Matlab-like.
+	  if (Vwhitespace_in_literal_matrix == 1)
+	    unput (',');
+	}
+      else
+	{
+	  maybe_warn_separator_insert (',');
+
+	  if (Vwhitespace_in_literal_matrix != 2)
+	    unput (',');
+	}
     }
 }
 
 // Figure out exactly what kind of token to return when we have seen
 // an identifier.  Handles keywords.
 
 static int
 handle_identifier (const string& tok, int spc_gobbled)
@@ -2145,16 +2196,40 @@ lexical_feedback::init (void)
 
   // Not initially looking at indirect references.
   looking_at_indirect_ref = false;
 
   // Quote marks strings intially.
   quote_is_transpose = false;
 }
 
+static void
+maybe_warn_separator_insert (char sep)
+{
+  string nm = curr_fcn_file_full_name;
+
+  if (Vwarn_separator_insert)
+    {
+      if (nm.empty ())
+	warning ("potential auto-insertion of `%c' near line %d",
+		 sep, input_line_number);
+      else
+	warning ("potential auto-insertion of `%c' near line %d of file %s",
+		 sep, input_line_number, nm.c_str ());
+    }
+}
+
+static int
+warn_separator_insert (void)
+{
+  Vwarn_separator_insert = check_preference ("warn_separator_insert");
+
+  return 0;
+}
+
 static int
 whitespace_in_literal_matrix (void)
 {
   int pref = 0;
 
   string val = builtin_string_variable ("whitespace_in_literal_matrix");
 
   if (! val.empty ())
@@ -2168,16 +2243,20 @@ whitespace_in_literal_matrix (void)
   Vwhitespace_in_literal_matrix = pref;
 
   return 0;
 }
 
 void
 symbols_of_lex (void)
 {
+  DEFVAR (warn_separator_insert, 0.0, warn_separator_insert,
+    "print warning if commas or semicolons that might be inserted\n\
+automatically in literal matrices");
+
   DEFVAR (whitespace_in_literal_matrix, "", whitespace_in_literal_matrix,
     "control auto-insertion of commas and semicolons in literal matrices");
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -3080,26 +3080,37 @@ be named @file{@var{file}.m}.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 1)
     {
-      string file = args(0).string_value ();
+      string file_name = args(0).string_value ();
 
       if (! error_state)
 	{
-	  file = file_ops::tilde_expand (file);
-
-	  parse_fcn_file (file, true, true);
+	  string file_full_name = file_ops::tilde_expand (file_name);
+
+	  unwind_protect::begin_frame ("Fsource");
+
+	  unwind_protect_str (curr_fcn_file_name);
+	  unwind_protect_str (curr_fcn_file_full_name);
+
+	  curr_fcn_file_name = file_name;
+	  curr_fcn_file_full_name = file_full_name;
+
+	  parse_fcn_file (file_full_name, true, true);
 
 	  if (error_state)
-	    error ("source: error sourcing file `%s'", file.c_str ());
+	    error ("source: error sourcing file `%s'",
+		   file_full_name.c_str ());
+
+	  unwind_protect::run_frame ("Fsource");
 	}
       else
 	error ("source: expecting file name as argument");
     }
   else
     print_usage ("source");
 
   return retval;
