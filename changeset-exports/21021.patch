# HG changeset patch
# User Rik <rik@octave.org>
# Date 1451597965 28800
#      Thu Dec 31 13:39:25 2015 -0800
# Node ID a5b99b09f8fda6f93191b029bfb716f9544e83ca
# Parent  7ebc9f38b3124021038e6e96a8a6068938d11b37
maint: Use comparison operators rather than compare() for strings.

* graphics.cc, graphics.in.h, load-path.cc, ls-oct-text.cc, ls-oct-text.h,
__init_fltk__.cc, oct-parse.in.yy, file-ops.cc:
Use comparison operators rather than compare() for strings.

diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -2017,17 +2017,17 @@ property_list::set (const caseless_str& 
           if (! has_property)
             error ("invalid %s property '%s'", pfx.c_str (), pname.c_str ());
 
           bool remove = false;
           if (val.is_string ())
             {
               std::string sval = val.string_value ();
 
-              remove = (sval.compare ("remove") == 0);
+              remove = (sval == "remove");
             }
 
           pval_map_type& pval_map = plist_map[pfx];
 
           if (remove)
             {
               pval_map_iterator p = pval_map.find (pname);
 
@@ -2362,34 +2362,34 @@ graphics_object::set_value_or_default (c
                                        const octave_value& val)
 {
   if (val.is_string ())
     {
       std::string sval = val.string_value ();
 
       octave_value default_val;
 
-      if (sval.compare ("default") == 0)
+      if (sval == "default")
         {
           default_val = get_default (pname);
 
           rep->set (pname, default_val);
         }
-      else if (sval.compare ("factory") == 0)
+      else if (sval == "factory")
         {
           default_val = get_factory_default (pname);
 
           rep->set (pname, default_val);
         }
       else
         {
           // Matlab specifically uses "\default" to escape string setting
-          if (sval.compare ("\\default") == 0)
+          if (sval == "\\default")
             rep->set (pname, "default");
-          else if (sval.compare ("\\factory") == 0)
+          else if (sval == "\\factory")
             rep->set (pname, "factory");
           else
             rep->set (pname, val);
         }
     }
   else
     rep->set (pname, val);
 }
@@ -3454,43 +3454,43 @@ figure::properties::set_integerhandle (c
     }
 }
 
 // FIXME: This should update monitorpositions and pointerlocation, but as these
 // properties aren't yet used, it doesn't matter that they aren't set either.
 void
 root_figure::properties::update_units (void)
 {
-  caseless_str xunits = get_units ();
+  std::string xunits = get_units ();
 
   Matrix scrn_sz = default_screensize ();
 
   double dpi = get_screenpixelsperinch ();
 
-  if (xunits.compare ("inches"))
+  if (xunits == "inches")
     {
       scrn_sz(0) = 0;
       scrn_sz(1) = 0;
       scrn_sz(2) /= dpi;
       scrn_sz(3) /= dpi;
     }
-  else if (xunits.compare ("centimeters"))
+  else if (xunits == "centimeters")
     {
       scrn_sz(0) = 0;
       scrn_sz(1) = 0;
       scrn_sz(2) *= 2.54 / dpi;
       scrn_sz(3) *= 2.54 / dpi;
     }
-  else if (xunits.compare ("normalized"))
+  else if (xunits == "normalized")
     {
       scrn_sz = Matrix (1, 4, 1.0);
       scrn_sz(0) = 0;
       scrn_sz(1) = 0;
     }
-  else if (xunits.compare ("points"))
+  else if (xunits == "points")
     {
       scrn_sz(0) = 0;
       scrn_sz(1) = 0;
       scrn_sz(2) *= 72 / dpi;
       scrn_sz(3) *= 72 / dpi;
     }
 
   set_screensize (scrn_sz);
@@ -4104,18 +4104,18 @@ figure::properties::update_paperunits (c
 
   papersize.set (octave_value (sz));
   paperposition.set (octave_value (pos));
 }
 
 void
 figure::properties::update_papertype (void)
 {
-  caseless_str typ = get_papertype ();
-  if (! typ.compare ("<custom>"))
+  std::string typ = get_papertype ();
+  if (typ != "<custom>")
     {
       Matrix sz = papersize_from_type (get_paperunits (), typ);
       if (get_paperorientation () == "landscape")
         std::swap (sz(0), sz(1));
       // Call papersize.set rather than set_papersize to avoid loops
       // between update_papersize and update_papertype.
       papersize.set (octave_value (sz));
     }
@@ -5588,19 +5588,19 @@ axes::properties::update_ticklength (voi
 static ColumnVector
 convert_label_position (const ColumnVector& p,
                         const text::properties& props,
                         const graphics_xform& xform,
                         const Matrix& bbox)
 {
   ColumnVector retval;
 
-  caseless_str to_units = props.get_units ();
-
-  if (! to_units.compare ("data"))
+  std::string to_units = props.get_units ();
+
+  if (to_units != "data")
     {
       ColumnVector v = xform.transform (p(0), p(1), p(2));
 
       retval.resize (3);
 
       retval(0) = v(0) - bbox(0) + 1;
       retval(1) = bbox(1) + bbox(3) - v(1) + 1;
       retval(2) = 0;
@@ -9367,19 +9367,19 @@ gh_manager::do_post_callback (const grap
         {
           const graphics_object& current = callback_objects.front ();
 
           if (current.get_properties ().is_interruptible ())
             do_post_event (graphics_event::create_callback_event (h, name,
                                                                   data));
           else
             {
-              caseless_str busy_action (go.get_properties ().get_busyaction ());
-
-              if (busy_action.compare ("queue"))
+              std::string busy_action (go.get_properties ().get_busyaction ());
+
+              if (busy_action == "queue")
                 do_post_event (graphics_event::create_callback_event (h, name,
                                                                       data));
               else
                 {
                   caseless_str cname (name);
 
                   if (cname.compare ("deletefcn") || cname.compare ("createfcn")
                       || (go.isa ("figure")
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -1965,28 +1965,28 @@ typedef std::pair <std::string, octave_v
 class pval_vector : public std::vector <pval_pair>
 {
 public:
   const_iterator find (const std::string pname) const
   {
     const_iterator it;
 
     for (it = (*this).begin (); it != (*this).end (); it++)
-      if (pname.compare ((*it).first) == 0)
+      if (pname == (*it).first)
         return it;
 
     return (*this).end ();
   }
 
   iterator find (const std::string pname)
   {
     iterator it;
 
     for (it = (*this).begin (); it != (*this).end (); it++)
-      if (pname.compare ((*it).first) == 0)
+      if (pname == (*it).first)
         return it;
 
     return (*this).end ();
   }
 
   octave_value lookup (const std::string pname) const
   {
     octave_value retval;
diff --git a/libinterp/corefcn/load-path.cc b/libinterp/corefcn/load-path.cc
--- a/libinterp/corefcn/load-path.cc
+++ b/libinterp/corefcn/load-path.cc
@@ -1411,17 +1411,17 @@ load_path::do_find_dir (const std::strin
               dname = dname.substr (0, dname_len - 1);
               dname_len--;
             }
 
           size_t dir_len = dir.length ();
 
           if (dname_len > dir_len
               && file_ops::is_dir_sep (dname[dname_len - dir_len - 1])
-              && dir.compare (dname.substr (dname_len - dir_len)) == 0)
+              && dir == dname.substr (dname_len - dir_len))
             {
               file_stat fs (p->dir_name);
 
               if (fs.exists () && fs.is_dir ())
                 return p->dir_name;
             }
         }
     }
@@ -1458,17 +1458,17 @@ load_path::do_find_matching_dirs (const 
               dname = dname.substr (0, dname_len - 1);
               dname_len--;
             }
 
           size_t dir_len = dir.length ();
 
           if (dname_len > dir_len
               && file_ops::is_dir_sep (dname[dname_len - dir_len - 1])
-              && dir.compare (dname.substr (dname_len - dir_len)) == 0)
+              && dir == dname.substr (dname_len - dir_len))
             {
               file_stat fs (p->dir_name);
 
               if (fs.exists () && fs.is_dir ())
                 retlist.push_back (p->dir_name);
             }
         }
     }
diff --git a/libinterp/corefcn/ls-oct-text.cc b/libinterp/corefcn/ls-oct-text.cc
--- a/libinterp/corefcn/ls-oct-text.cc
+++ b/libinterp/corefcn/ls-oct-text.cc
@@ -97,17 +97,17 @@ extract_keyword (std::istream& is, const
 
           if (isalpha (c))
             buf << c;
 
           while (is.get (c) && isalpha (c))
             buf << c;
 
           std::string tmp = buf.str ();
-          bool match = (tmp.compare (0, strlen (keyword), keyword) == 0);
+          bool match = (tmp.substr (0, strlen (keyword)) == keyword);
 
           if (match)
             {
               std::ostringstream value;
               while (is.get (c) && (c == ' ' || c == '\t' || c == ':'))
                 ; // Skip whitespace and the colon.
 
               is.putback (c);
diff --git a/libinterp/corefcn/ls-oct-text.h b/libinterp/corefcn/ls-oct-text.h
--- a/libinterp/corefcn/ls-oct-text.h
+++ b/libinterp/corefcn/ls-oct-text.h
@@ -88,17 +88,17 @@ extract_keyword (std::istream& is, const
 
           if (isalpha (c))
             buf << c;
 
           while (is.get (c) && isalpha (c))
             buf << c;
 
           std::string tmp = buf.str ();
-          bool match = (tmp.compare (0, strlen (keyword), keyword) == 0);
+          bool match = (tmp.substr (0, strlen (keyword)) == keyword);
 
           if (match)
             {
               while (is.get (c) && (c == ' ' || c == '\t' || c == ':'))
                 ; // Skip whitespace and the colon.
 
               is.putback (c);
               if (c != '\n' && c != '\r')
diff --git a/libinterp/dldfcn/__init_fltk__.cc b/libinterp/dldfcn/__init_fltk__.cc
--- a/libinterp/dldfcn/__init_fltk__.cc
+++ b/libinterp/dldfcn/__init_fltk__.cc
@@ -292,17 +292,17 @@ public:
         Fl_Menu_Item *m = const_cast<Fl_Menu_Item*> (&(menubar->menu ()[t]));
         if (m->submenu ())
           {
             // item has submenu
             if (! menupath.empty ())
               menupath += "/";
             menupath += m->label ();
 
-            if (menupath.compare (findname) == 0)
+            if (menupath == findname)
               return (t);
           }
         else
           {
             // End of submenu? Pop back one level.
             if (! m->label ())
               {
                 size_t idx = menupath.find_last_of ("/");
@@ -313,17 +313,17 @@ public:
                 continue;
               }
             // Menu item?
             std::string itempath = menupath;
             if (! itempath.empty ())
               itempath += "/";
             itempath += m->label ();
 
-            if (itempath.compare (findname) == 0)
+            if (itempath == findname)
               return (t);
           }
       }
     return (-1);
   }
 
   Matrix find_uimenu_children (uimenu::properties& uimenup) const
   {
@@ -667,19 +667,19 @@ public:
         if (kgo.valid_object ())
           {
             uimenu::properties kprop = dynamic_cast<uimenu::properties&>
                                        (kgo.get_properties ());
             remove_from_menu (kprop);
           }
       }
 
-    if (type.compare ("uimenu") == 0)
+    if (type == "uimenu")
       delete_entry (dynamic_cast<uimenu::properties&> (prop));
-    else if (type.compare ("figure") == 0)
+    else if (type == "figure")
       menubar->clear ();
   }
 
   ~fltk_uimenu (void)
   {
     delete menubar;
   }
 
@@ -1586,17 +1586,17 @@ private:
                 {
                   if (ax_obj && ax_obj.isa ("axes"))
                     {
                       axes::properties& ap =
                         dynamic_cast<axes::properties&>
                         (ax_obj.get_properties ());
 
                       // Don't pan or rotate legend
-                      if (ap.get_tag ().compare ("legend") < 0)
+                      if (ap.get_tag () == "legend")
                         {
                           if (rotate_enabled ())
                             view2status (ax_obj);
                           else
                             pixel2status (ax_obj, pos_x, pos_y,
                                           Fl::event_x (),
                                           Fl::event_y () - menu_dy ());
 
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -4414,17 +4414,17 @@ not loaded anymore during the current Oc
             warning_with_id ("Octave:autoload-relative-file-name",
                              "autoload: '%s' is not an absolute filename",
                              nm.c_str ());
         }
       if (nargin == 2)
         autoload_map[argv[1]] = nm;
       else if (nargin == 3)
         {
-          if (argv[3].compare ("remove") != 0)
+          if (argv[3] != "remove")
             error_with_id ("Octave:invalid-input-arg",
                            "autoload: third argument can only be 'remove'");
 
           // Remove function from symbol table and autoload map.
           symbol_table::clear_dld_function (argv[1]);
           autoload_map.erase (argv[1]);
         }
     }
diff --git a/liboctave/system/file-ops.cc b/liboctave/system/file-ops.cc
--- a/liboctave/system/file-ops.cc
+++ b/liboctave/system/file-ops.cc
@@ -155,17 +155,17 @@ tilde_find_prefix (const std::string& s,
   if (! prefixes.empty ())
     {
       for (size_t i = 0; i < s_len; i++)
         {
           for (int j = 0; j < prefixes.numel (); j++)
             {
               size_t pfx_len = prefixes[j].length ();
 
-              if (prefixes[j].compare (s.substr (i, pfx_len)) == 0)
+              if (prefixes[j] == s.substr (i, pfx_len))
                 {
                   len = pfx_len - 1;
                   return i + len;
                 }
             }
         }
     }
 
@@ -190,17 +190,17 @@ tilde_find_suffix (const std::string& s)
         break;
 
       if (! suffixes.empty ())
         {
           for (int j = 0; j < suffixes.numel (); j++)
             {
               size_t sfx_len = suffixes[j].length ();
 
-              if (suffixes[j].compare (s.substr (i, sfx_len)) == 0)
+              if (suffixes[j] == s.substr (i, sfx_len))
                 return i;
             }
         }
     }
 
   return i;
 }
 
