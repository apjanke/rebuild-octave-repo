# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1264064549 18000
#      Thu Jan 21 04:02:29 2010 -0500
# Node ID 96ed9db3345c40b11327b9fc074a99e45910f115
# Parent  22400682d3aad44cb83bdbbdfafe43fd0f1a77b2
provide wrappers for mkdir and mkfifo

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,18 @@
+2010-01-21  John W. Eaton  <jwe@octave.org>
+
+	* file-ops.h (file_ops::mkdir): Move definitions to file-ops.cc.
+	(file_ops::mkfifo): Move definitions to file-ops.cc.
+	(file_ops::mkdir_internal, file_ops::mkfifo_internal): Delete decls.
+	* file-ops.cc (file_ops::mkdir): Call octave_mkdir.
+	(file_ops::mkfifo): Call octave_mkfifo.
+	* lo-cutils.c (octave_mkdir, octave_mkfifo): New functions.
+	* lo-utils.h: Provide decls.
+
 2010-01-21  John W. Eaton  <jwe@octave.org>
 
 	* Makefile.am (LIBOCTAVE_C_SOURCES): Remove strptime.c from the list.
 	* strptime.c: Delete.
 
 2010-01-21  John W. Eaton  <jwe@octave.org>
 
 	* lo-cutils.c (octave_rename): New funtion.
diff --git a/liboctave/file-ops.cc b/liboctave/file-ops.cc
--- a/liboctave/file-ops.cc
+++ b/liboctave/file-ops.cc
@@ -90,49 +90,61 @@ file_ops::static_members::instance_ok (v
 }
 
 #define NOT_SUPPORTED(nm) \
   nm ": not supported on this system"
 
 // We provide a replacement for mkdir().
 
 int
-file_ops::mkdir_internal (const std::string& name, mode_t mode,
-                          std::string& msg)
+file_ops::mkdir (const std::string& nm, mode_t md)
+{
+  std::string msg;
+  return mkdir (nm, md, msg);
+}
+
+int
+file_ops::mkdir (const std::string& name, mode_t mode, std::string& msg)
 {
   msg = std::string ();
 
   int status = -1;
 
-  status = ::mkdir (name.c_str (), mode);
+  status = octave_mkdir (name.c_str (), mode);
 
   if (status < 0)
     {
       using namespace std;
       msg = ::strerror (errno);
     }
 
   return status;
 }
 
 // I don't know how to emulate this on systems that don't provide it.
 
 int
-file_ops::mkfifo_internal (const std::string& name, mode_t mode,
-                           std::string& msg)
+file_ops::mkfifo (const std::string& nm, mode_t md)
+{
+  std::string msg;
+  return mkfifo (nm, md, msg);
+}
+
+int
+file_ops::mkfifo (const std::string& name, mode_t mode, std::string& msg)
 {
   msg = std::string ();
 
   int status = -1;
 
   // With gnulib we will always have mkfifo, but some systems like MinGW
   // don't have working mkfifo functions.  On those systems, mkfifo will
   // always return -1 and set errno.
 
-  status = ::mkfifo (name.c_str (), mode);
+  status = octave_mkfifo (name.c_str (), mode);
 
   if (status < 0)
     {
       using namespace std;
       msg = ::strerror (errno);
     }
 
   return status;
diff --git a/liboctave/file-ops.h b/liboctave/file-ops.h
--- a/liboctave/file-ops.h
+++ b/liboctave/file-ops.h
@@ -32,37 +32,21 @@ along with Octave; see the file COPYING.
 #include "str-vec.h"
 
 struct
 OCTAVE_API
 file_ops
 {
 public:
 
-  static int mkdir (const std::string& nm, mode_t md)
-  {
-    std::string msg;
-    return mkdir_internal (nm, md, msg);
-  }
-
-  static int mkdir (const std::string& nm, mode_t md, std::string& msg)
-  {
-    return mkdir_internal (nm, md, msg);
-  }
+  static int mkdir (const std::string& nm, mode_t md);
+  static int mkdir (const std::string& nm, mode_t md, std::string& msg);
 
-  static int mkfifo (const std::string& nm, mode_t md)
-  {
-    std::string msg;
-    return mkfifo_internal (nm, md, msg);
-  }
-
-  static int mkfifo (const std::string& nm, mode_t md, std::string& msg)
-  {
-    return mkfifo_internal (nm, md, msg);
-  }
+  static int mkfifo (const std::string& nm, mode_t md);
+  static int mkfifo (const std::string& nm, mode_t md, std::string& msg);
 
   static int link (const std::string&, const std::string&);
   static int link (const std::string&, const std::string&, std::string&);
 
   static int symlink (const std::string&, const std::string&);
   static int symlink (const std::string&, const std::string&, std::string&);
 
   static int readlink (const std::string&, std::string&);
diff --git a/liboctave/lo-cutils.c b/liboctave/lo-cutils.c
--- a/liboctave/lo-cutils.c
+++ b/liboctave/lo-cutils.c
@@ -47,16 +47,28 @@ Software Foundation, Inc.
 #endif
 
 #include <stdlib.h>
 #include <string.h>
 #include <time.h>
 
 #include "syswait.h"
 
+OCTAVE_API int
+octave_mkdir (const char *name, mode_t mode)
+{
+  return mkdir (name, mode);
+}
+
+OCTAVE_API int
+octave_mkfifo (const char *name, mode_t mode)
+{
+  return mkfifo (name, mode);
+}
+
 OCTAVE_API void
 octave_qsort (void *base, size_t n, size_t size,
 	      int (*cmp) (const void *, const void *))
 {
   qsort (base, n, size, cmp);
 }
 
 OCTAVE_API char *
diff --git a/liboctave/lo-utils.h b/liboctave/lo-utils.h
--- a/liboctave/lo-utils.h
+++ b/liboctave/lo-utils.h
@@ -46,16 +46,20 @@ extern OCTAVE_API void octave_putenv (co
 extern OCTAVE_API std::string octave_fgets (std::FILE *);
 extern OCTAVE_API std::string octave_fgetl (std::FILE *);
 
 extern OCTAVE_API std::string octave_fgets (std::FILE *, bool& eof);
 extern OCTAVE_API std::string octave_fgetl (std::FILE *, bool& eof);
 
 extern "C" OCTAVE_API int octave_gethostname (char *, int);
 
+extern "C" OCTAVE_API int octave_mkdir (const char *name, mode_t mode);
+
+extern "C" OCTAVE_API int octave_mkfifo (const char *name, mode_t mode);
+
 extern "C" OCTAVE_API void octave_qsort (void *base, size_t n, size_t size,
 			      int (*cmp) (const void *, const void *));
 
 extern "C" OCTAVE_API int octave_rmdir (const char *name);
 
 extern "C" OCTAVE_API int octave_rename (const char *from, const char *to);
 
 extern "C" OCTAVE_API char *oct_strptime (const char *buf, const char *format,
