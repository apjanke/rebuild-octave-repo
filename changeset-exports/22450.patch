# HG changeset patch
# User Rik <rik@octave.org>
# Date 1473372206 25200
#      Thu Sep 08 15:03:26 2016 -0700
# Node ID 2fb86778f78d3a91859a6ddf41b776730f5dde96
# Parent  e337b8e3592ca408c409812fea2baa03f0fcd131
Return correct status from mexCallMATLAB when mexSetTrapFlag is 1 (bug #48949).

* mex.cc (mexCallMATLAB): If try block fails, set execution_error to true.

diff --git a/libinterp/corefcn/mex.cc b/libinterp/corefcn/mex.cc
--- a/libinterp/corefcn/mex.cc
+++ b/libinterp/corefcn/mex.cc
@@ -3073,17 +3073,21 @@ mexCallMATLAB (int nargout, mxArray *arg
 
   try
     {
       retval = feval (fname, args, nargout);
     }
   catch (const octave::execution_exception&)
     {
       if (mex_context->trap_feval_error)
-        recover_from_exception ();
+        {
+          recover_from_exception ();
+
+          execution_error = true;
+        }
       else
         {
           args.resize (0);
           retval.resize (0);
 
           throw;
         }
     }
@@ -3094,17 +3098,17 @@ mexCallMATLAB (int nargout, mxArray *arg
     num_to_copy = nargout;
 
   for (int i = 0; i < num_to_copy; i++)
     {
       // FIXME: it would be nice to avoid copying the value here,
       // but there is no way to steal memory from a matrix, never mind
       // that matrix memory is allocated by new[] and mxArray memory
       // is allocated by malloc().
-      argout[i] = mex_context->make_value (retval (i));
+      argout[i] = mex_context->make_value (retval(i));
     }
 
   while (num_to_copy < nargout)
     argout[num_to_copy++] = 0;
 
   return execution_error ? 1 : 0;
 }
 
