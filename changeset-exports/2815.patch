# HG changeset patch
# User jwe
# Date 858327958 0
#      Fri Mar 14 08:25:58 1997 +0000
# Node ID 33486d9e2d0073c80e90cbbfa11a182aab24986c
# Parent  ffa60dc8e49b67fb7a0738cf563d15d114df2abf
[project @ 1997-03-14 08:24:46 by jwe]

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -6,16 +6,20 @@ Summary of changes for version 2.0.6:
 
       quad ("sqrt (x)", 0, 1)
 
     is equivalent to
 
       function y = f (x) y = sqrt (x); endfunction
       quad ("f", 0, 1)
 
+  * If the argument to eig() is symmetric, Octave uses the specialized
+    Lapack subroutine for symmetric matrices for a significant
+    increase in performance.
+
 Summary of changes for version 2.0.5:
 ------------------------------------
 
   * A `switch' statement is now available.  See the Statements chapter
     in the manual for details.
 
   * Commands like ls, save, and cd may now also be used as formal
     parameters for functions.
diff --git a/kpathsea/ChangeLog b/kpathsea/ChangeLog
--- a/kpathsea/ChangeLog
+++ b/kpathsea/ChangeLog
@@ -1,8 +1,13 @@
+Thu Mar 13 13:08:05 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* configure.in: Don't set special PIC options on SGI systems,
+	since PIC is apparently the default.
+
 Wed Mar 12 17:00:16 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Makefile.in (install-strip): New target.
 
 Thu Feb 20 02:41:36 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* configure.in (SH_LDFLAGS): Add -fPIC for HP-UX.
 	(SH_LDFLAGS): Add -shared for alpha OSF/1.
diff --git a/kpathsea/configure.in b/kpathsea/configure.in
--- a/kpathsea/configure.in
+++ b/kpathsea/configure.in
@@ -32,16 +32,19 @@ case "$canonical_host_type" in
   ;;
   rs6000-ibm-aix* | powerpc-ibm-aix*)
     CPICFLAG=
   ;;
   hppa*-hp-hpux*)
     SHLEXT=sl
     SH_LDFLAGS="-shared -fPIC"
   ;;
+  *-sgi-*)
+    CPICFLAG=
+  ;;
 esac
 AC_MSG_RESULT([defining CPICFLAG to be $CPICFLAG])
 AC_MSG_RESULT([defining SHLEXT to be $SHLEXT])
 AC_MSG_RESULT([defining SH_LD to be $SH_LD])
 AC_MSG_RESULT([defining SH_LDFLAGS to be $SH_LDFLAGS])
 AC_SUBST(CPICFLAG)
 AC_SUBST(SHLEXT)
 AC_SUBST(SH_LD)
diff --git a/libcruft/ChangeLog b/libcruft/ChangeLog
--- a/libcruft/ChangeLog
+++ b/libcruft/ChangeLog
@@ -1,8 +1,13 @@
+Thu Mar 13 22:31:35 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* blas, lapack: Add new files for symmetric eigenvalue
+	computation.
+
 Wed Mar 12 16:59:59 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* misc/Makefile.in (install-strip): New target.
 
 	* Makefile.in (install-strip): New target.
 
 Mon Mar  3 15:38:39 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
diff --git a/liboctave/Array2.cc b/liboctave/Array2.cc
--- a/liboctave/Array2.cc
+++ b/liboctave/Array2.cc
@@ -166,13 +166,30 @@ Array2<T>::insert (const Array2<T>& a, i
 
   for (int j = 0; j < a_cols; j++)
     for (int i = 0; i < a_rows; i++)
       elem (r+i, c+j) = a.elem (i, j);
 
   return *this;
 }
 
+template <class T>
+bool
+Array2<T>::is_symmetric (void) const
+{
+  if (is_square () && d1 > 0)
+    {
+      for (int i = 0; i < d1; i++)
+	for (int j = i+1; j < d2; j++)
+	  if (elem (i, j) != elem (j, i))
+	    return false;
+
+      return true;
+    }
+
+  return false;
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/Array2.h b/liboctave/Array2.h
--- a/liboctave/Array2.h
+++ b/liboctave/Array2.h
@@ -168,16 +168,20 @@ public:
   T range_error (const char *fcn, int i, int j) const;
   T& range_error (const char *fcn, int i, int j);
 
   void resize (int n, int m);
   void resize (int n, int m, const T& val);
 
   Array2<T>& insert (const Array2<T>& a, int r, int c);
 
+  bool is_square (void) const { return (d1 == d2); }
+
+  bool is_symmetric (void) const;
+
 #ifdef HEAVYWEIGHT_INDEXING
   void maybe_delete_elements (idx_vector& i, idx_vector& j);
 
   Array2<T> value (void);
 
   Array2<T> index (idx_vector& i) const;
 
   Array2<T> index (idx_vector& i, idx_vector& j) const;
diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -176,16 +176,35 @@ ComplexMatrix::operator == (const Comple
 }
 
 bool
 ComplexMatrix::operator != (const ComplexMatrix& a) const
 {
   return !(*this == a);
 }
 
+bool
+ComplexMatrix::is_hermitian (void) const
+{
+  int nr = rows ();
+  int nc = cols ();
+
+  if (is_square () && nr > 0)
+    {
+      for (int i = 0; i < nr; i++)
+	for (int j = i; j < nc; j++)
+	  if (elem (i, j) != conj (elem (j, i)))
+	    return false;
+
+      return true;
+    }
+
+  return false;
+}
+
 // destructive insert/delete/reorder operations
 
 ComplexMatrix&
 ComplexMatrix::insert (const Matrix& a, int r, int c)
 {
   int a_nr = a.rows ();
   int a_nc = a.cols ();
 
diff --git a/liboctave/CMatrix.h b/liboctave/CMatrix.h
--- a/liboctave/CMatrix.h
+++ b/liboctave/CMatrix.h
@@ -67,16 +67,18 @@ public:
     {
       MArray2<Complex>::operator = (a);
       return *this;
     }
 
   bool operator == (const ComplexMatrix& a) const;
   bool operator != (const ComplexMatrix& a) const;
 
+  bool is_hermitian (void) const;
+
   // destructive insert/delete/reorder operations
 
   ComplexMatrix& insert (const Matrix& a, int r, int c);
   ComplexMatrix& insert (const RowVector& a, int r, int c);
   ComplexMatrix& insert (const ColumnVector& a, int r, int c);
   ComplexMatrix& insert (const DiagMatrix& a, int r, int c);
 
   ComplexMatrix& insert (const ComplexMatrix& a, int r, int c);
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,22 @@
+Fri Mar 14 00:29:46 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* EIG.cc (EIG::hermitian_init (const ComplexMatrix&)): New function.
+	(EIG::init (const ComplexMatrix&)): Call it if arg is hermitian.
+	(EIG::symmetric_init (const Matrix&)): New function.
+	(EIG::init (const Matrix&)): Call it if arg is symmetric.
+
+	* CMatrix.cc (ComplexMatrix::is_hermitian): New function.
+
+Thu Mar 13 17:04:26 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* Array2.cc (is_symmetric): New function.
+	* Array2.h (is_square): New function.
+
 Wed Mar 12 16:59:49 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Makefile.in (install-strip): New target.
 
 Mon Mar 10 22:34:22 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* CmplxCHOL.cc, CmplxHESS.cc, CmplxLU.cc, CmplxQR.cc,
 	CmplxQRP.cc, CmplxSCHUR.cc, CmplxSVD.cc, EIG.cc, dbleCHOL.cc,
diff --git a/liboctave/EIG.cc b/liboctave/EIG.cc
--- a/liboctave/EIG.cc
+++ b/liboctave/EIG.cc
@@ -24,148 +24,276 @@ Software Foundation, 59 Temple Place - S
 #pragma implementation
 #endif
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "EIG.h"
+#include "dColVector.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
 
 extern "C"
 {
   int F77_FCN (dgeev, DGEEV) (const char*, const char*, const int&,
 			      double*, const int&, double*, double*,
 			      double*, const int&, double*,
 			      const int&, double*, const int&, int&,
 			      long, long);
 
   int F77_FCN (zgeev, ZGEEV) (const char*, const char*, const int&,
 			      Complex*, const int&, Complex*,
 			      Complex*, const int&, Complex*,
 			      const int&, Complex*, const int&,
 			      double*, int&, long, long);
+
+  int F77_FCN (dsyev, DSYEV) (const char*, const char*, const int&,
+			      double*, const int&, double*, double*,
+			      const int&, int&, long, long);
+
+  int F77_FCN (zheev, ZHEEV) (const char*, const char*, const int&,
+			      Complex*, const int&, double*, Complex*,
+			      const int&, double*, int&, long, long);
 }
 
 int
 EIG::init (const Matrix& a)
 {
+  if (a.is_symmetric ())
+    return symmetric_init (a);
+
   int n = a.rows ();
 
   if (n != a.cols ())
     {
       (*current_liboctave_error_handler) ("EIG requires square matrix");
       return -1;
     }
 
-  int info;
+  int info = 0;
 
   Matrix atmp = a;
   double *tmp_data = atmp.fortran_vec ();
 
   Array<double> wr (n);
   double *pwr = wr.fortran_vec ();
 
   Array<double> wi (n);
   double *pwi = wi.fortran_vec ();
 
   Matrix vr (n, n);
   double *pvr = vr.fortran_vec ();
 
+  // XXX FIXME XXX -- it might be possible to choose a better value of
+  // lwork that would result in more efficient computations.
+
   int lwork = 8*n;
-
   Array<double> work (lwork);
   double *pwork = work.fortran_vec ();
 
   double *dummy = 0;
   int idummy = 1;
 
   F77_XFCN (dgeev, DGEEV, ("N", "V", n, tmp_data, n, pwr, pwi, dummy,
 			   idummy, pvr, n, pwork, lwork, info, 1L, 1L));
 
-  if (f77_exception_encountered)
+  if (f77_exception_encountered || info < 0)
     (*current_liboctave_error_handler) ("unrecoverable error in dgeev");
   else
     {
-      lambda.resize (n);
-      v.resize (n, n);
+      if (info > 0)
+	(*current_liboctave_error_handler) ("dgeev failed to converge");
+      else
+	{
+	  lambda.resize (n);
+	  v.resize (n, n);
 
-      for (int j = 0; j < n; j++)
-	{
-	  if (wi.elem (j) == 0.0)
+	  for (int j = 0; j < n; j++)
 	    {
-	      lambda.elem (j) = Complex (wr.elem (j));
-	      for (int i = 0; i < n; i++)
-		v.elem (i, j) = vr.elem (i, j);
-	    }
-	  else
-	    {
-	      if (j+1 >= n)
+	      if (wi.elem (j) == 0.0)
+		{
+		  lambda.elem (j) = Complex (wr.elem (j));
+		  for (int i = 0; i < n; i++)
+		    v.elem (i, j) = vr.elem (i, j);
+		}
+	      else
 		{
-		  (*current_liboctave_error_handler) ("EIG: internal error");
-		  return -1;
+		  if (j+1 >= n)
+		    {
+		      (*current_liboctave_error_handler)
+			("EIG: internal error");
+		      return -1;
+		    }
+
+		  for (int i = 0; i < n; i++)
+		    {
+		      lambda.elem(j) = Complex (wr.elem(j), wi.elem(j));
+		      lambda.elem(j+1) = Complex (wr.elem(j+1), wi.elem(j+1));
+		      double real_part = vr.elem (i, j);
+		      double imag_part = vr.elem (i, j+1);
+		      v.elem (i, j) = Complex (real_part, imag_part);
+		      v.elem (i, j+1) = Complex (real_part, -imag_part);
+		    }
+		  j++;
 		}
+	    }
+	}
+    }
+
+  return info;
+}
+
+int
+EIG::symmetric_init (const Matrix& a)
+{
+  int n = a.rows ();
 
-	      for (int i = 0; i < n; i++)
-		{
-		  lambda.elem (j) = Complex (wr.elem (j), wi.elem (j));
-		  lambda.elem (j+1) = Complex (wr.elem (j+1), wi.elem (j+1));
-		  double real_part = vr.elem (i, j);
-		  double imag_part = vr.elem (i, j+1);
-		  v.elem (i, j) = Complex (real_part, imag_part);
-		  v.elem (i, j+1) = Complex (real_part, -imag_part);
-		}
-	      j++;
-	    }
+  if (n != a.cols ())
+    {
+      (*current_liboctave_error_handler) ("EIG requires square matrix");
+      return -1;
+    }
+
+  int info = 0;
+
+  Matrix atmp = a;
+  double *tmp_data = atmp.fortran_vec ();
+
+  Array<double> wr (n);
+  double *pwr = wr.fortran_vec ();
+
+  // XXX FIXME XXX -- it might be possible to choose a better value of
+  // lwork that would result in more efficient computations.
+
+  int lwork = 8*n;
+  Array<double> work (lwork);
+  double *pwork = work.fortran_vec ();
+
+  F77_XFCN (dsyev, DSYEV, ("V", "U", n, tmp_data, n, pwr, pwork,
+			   lwork, info, 1L, 1L));
+
+  if (f77_exception_encountered || info < 0)
+    (*current_liboctave_error_handler) ("unrecoverable error in dsyev");
+  else
+    {
+      if (info > 0)
+	(*current_liboctave_error_handler) ("dsyev failed to converge");
+      else
+	{
+	  lambda.resize (n);
+
+	  for (int j = 0; j < n; j++)
+	    lambda.elem (j) = Complex (wr.elem (j));
+
+	  v = atmp;
 	}
     }
 
   return info;
 }
 
 int
 EIG::init (const ComplexMatrix& a)
 {
+  if (a.is_hermitian ())
+    return hermitian_init (a);
+
   int n = a.rows ();
 
   if (n != a.cols ())
     {
       (*current_liboctave_error_handler) ("EIG requires square matrix");
       return -1;
     }
 
-  int info;
-
-  lambda.resize (n);
-  v.resize (n, n);
-  
-  Complex *pw = lambda.fortran_vec ();
-  Complex *pvr = v.fortran_vec ();
+  int info = 0;
 
   ComplexMatrix atmp = a;
   Complex *tmp_data = atmp.fortran_vec ();
 
+  ComplexColumnVector w (n);
+  Complex *pw = w.fortran_vec ();
+
+  ComplexMatrix vtmp (n, n);
+  Complex *pv = vtmp.fortran_vec ();
+
+  // XXX FIXME XXX -- it might be possible to choose a better value of
+  // lwork that would result in more efficient computations.
+
   int lwork = 8*n;
-
   Array<Complex> work (lwork);
   Complex *pwork = work.fortran_vec ();
 
-  Array<double> rwork (4*n);
+  int lrwork = 2*n;
+  Array<double> rwork (lrwork);
   double *prwork = rwork.fortran_vec ();
 
   Complex *dummy = 0;
   int idummy = 1;
 
   F77_XFCN (zgeev, ZGEEV, ("N", "V", n, tmp_data, n, pw, dummy, idummy,
-			   pvr, n, pwork, lwork, prwork, info, 1L, 1L));
+			   pv, n, pwork, lwork, prwork, info, 1L, 1L));
+
+  if (f77_exception_encountered || info < 0)
+    (*current_liboctave_error_handler) ("unrecoverable error in zgeev");
+  else if (info > 0)
+    (*current_liboctave_error_handler) ("zgeev failed to converge");
+  else
+    {
+      lambda = w;
+      v = vtmp;
+    }
+
+  return info;
+}
+
+int
+EIG::hermitian_init (const ComplexMatrix& a)
+{
+  int n = a.rows ();
+
+  if (n != a.cols ())
+    {
+      (*current_liboctave_error_handler) ("EIG requires square matrix");
+      return -1;
+    }
+
+  int info = 0;
 
-  if (f77_exception_encountered)
-    (*current_liboctave_error_handler) ("unrecoverable error in zgeev");
+  ComplexMatrix atmp = a;
+  Complex *tmp_data = atmp.fortran_vec ();
+
+  ColumnVector w (n);
+  double *pw = w.fortran_vec ();
+
+  // XXX FIXME XXX -- it might be possible to choose a better value of
+  // lwork that would result in more efficient computations.
+
+  int lwork = 8*n;
+  Array<Complex> work (lwork);
+  Complex *pwork = work.fortran_vec ();
+
+  int lrwork = 3*n;
+  Array<double> rwork (lrwork);
+  double *prwork = rwork.fortran_vec ();
+
+  F77_XFCN (zheev, ZHEEV, ("V", "U", n, tmp_data, n, pw, pwork,
+			   lwork, prwork, info, 1L, 1L));
+
+  if (f77_exception_encountered || info < 0)
+    (*current_liboctave_error_handler) ("unrecoverable error in zheev");
+  else if (info > 0)
+    (*current_liboctave_error_handler) ("zheev failed to converge");
+  else
+    {
+      lambda = w;
+      v = atmp;
+    }
 
   return info;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/liboctave/EIG.h b/liboctave/EIG.h
--- a/liboctave/EIG.h
+++ b/liboctave/EIG.h
@@ -75,16 +75,19 @@ public:
 
 private:
 
   ComplexColumnVector lambda;
   ComplexMatrix v;
 
   int init (const Matrix& a);
   int init (const ComplexMatrix& a);
+
+  int symmetric_init (const Matrix& a);
+  int hermitian_init (const ComplexMatrix& a);
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/readline/ChangeLog b/readline/ChangeLog
--- a/readline/ChangeLog
+++ b/readline/ChangeLog
@@ -1,10 +1,13 @@
 Thu Mar 13 11:43:35 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* configure.in: Don't set special PIC options on SGI systems,
+	since PIC is apparently the default.
+
 	* Makefile.in (realclean, distclean): Don't remove configure or
 	config.h.in.
 
 Wed Mar 12 16:59:01 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Makefile.in (install-strip): New target.
 
 Mon Mar  3 15:40:54 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
diff --git a/readline/configure.in b/readline/configure.in
--- a/readline/configure.in
+++ b/readline/configure.in
@@ -44,16 +44,19 @@ case "$canonical_host_type" in
   ;;
   rs6000-ibm-aix* | powerpc-ibm-aix*)
     CPICFLAG=
   ;;
   hppa*-hp-hpux*)
     SHLEXT=sl
     SH_LDFLAGS="-shared -fPIC"
   ;;
+  *-sgi-*)
+    CPICFLAG=
+  ;;
 esac
 AC_MSG_RESULT([defining CPICFLAG to be $CPICFLAG])
 AC_MSG_RESULT([defining SHLEXT to be $SHLEXT])
 AC_MSG_RESULT([defining SH_LD to be $SH_LD])
 AC_MSG_RESULT([defining SH_LDFLAGS to be $SH_LDFLAGS])
 AC_SUBST(CPICFLAG)
 AC_SUBST(SHLEXT)
 AC_SUBST(SH_LD)
