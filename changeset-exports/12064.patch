# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1251018687 -7200
#      Sun Aug 23 11:11:27 2009 +0200
# Branch release-3-2-x
# Node ID 8e8da2c36e7e58872ff7c81f8ce5fba3bb13d49a
# Parent  4c7b51b2541de738f641b7629ca031dcec3abb29
make single prec. matrix mutliply tests really single

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,12 @@
+2009-08-16  Jaroslav Hajek  <highegg@gmail.com>
+
+	* fMatrix.cc, fCMatrix.cc: Make tests use single precision.
+
 2009-08-16  Jaroslav Hajek  <highegg@gmail.com>
 
 	* CMatrix.cc (xgemm): Fix typo. Add test.
 	* fCMatrix.cc (xgemm): Ditto.
 
 2009-07-20  John W. Eaton  <jwe@octave.org>
 
 	* lo-ieee.cc (octave_ieee_init) [__NetBSD__]: Call nan to
diff --git a/liboctave/fCMatrix.cc b/liboctave/fCMatrix.cc
--- a/liboctave/fCMatrix.cc
+++ b/liboctave/fCMatrix.cc
@@ -3731,30 +3731,30 @@ operator * (const FloatComplexMatrix& m,
 FloatComplexMatrix
 operator * (const FloatMatrix& m, const FloatComplexMatrix& a)
 {
   FloatComplexMatrix tmp (m);
   return tmp * a;
 }
 
 /* Simple Dot Product, Matrix-Vector and Matrix-Matrix Unit tests
-%!assert([1+i 2+i 3+i] * [ 4+i ; 5+i ; 6+i], 29+21i, 1e-14)
-%!assert([1+i 2+i ; 3+i 4+i ] * [5+i ; 6+i], [15 + 14i ; 37 + 18i], 1e-14)
-%!assert([1+i 2+i ; 3+i 4+i ] * [5+i 6+i ; 7+i 8+i], [17 + 15i 20 + 17i; 41 + 19i 48 + 21i], 1e-14)
-%!assert([1 i]*[i 0]', -i);
+%!assert(single([1+i 2+i 3+i]) * single([ 4+i ; 5+i ; 6+i]), single(29+21i), 5e-7)
+%!assert(single([1+i 2+i ; 3+i 4+i ]) * single([5+i ; 6+i]), single([15 + 14i ; 37 + 18i]), 5e-7)
+%!assert(single([1+i 2+i ; 3+i 4+i ]) * single([5+i 6+i ; 7+i 8+i]), single([17 + 15i 20 + 17i; 41 + 19i 48 + 21i]), 5e-7)
+%!assert(single([1 i])*single([i 0])', single(-i));
 */
 
 /* Test some simple identities
 %!shared M, cv, rv
 %! M = randn(10,10)+i*rand(10,10);
 %! cv = randn(10,1)+i*rand(10,1);
 %! rv = randn(1,10)+i*rand(1,10);
-%!assert([M*cv,M*cv],M*[cv,cv],1e-14)
-%!assert([rv*M;rv*M],[rv;rv]*M,1e-14)
-%!assert(2*rv*cv,[rv,rv]*[cv;cv],1e-14)
+%!assert([M*cv,M*cv],M*[cv,cv],5e-7)
+%!assert([rv*M;rv*M],[rv;rv]*M,5e-7)
+%!assert(2*rv*cv,[rv,rv]*[cv;cv],5e-7)
 */
 
 static const char *
 get_blas_trans_arg (bool trans, bool conj)
 {
   static char blas_notrans = 'N', blas_trans = 'T', blas_conj_trans = 'C';
   return trans ? (conj ? &blas_conj_trans : &blas_trans) : &blas_notrans;
 }
diff --git a/liboctave/fMatrix.cc b/liboctave/fMatrix.cc
--- a/liboctave/fMatrix.cc
+++ b/liboctave/fMatrix.cc
@@ -3142,29 +3142,29 @@ Sylvester (const FloatMatrix& a, const F
   retval = -ua*cx*ub.transpose ();
 
   return retval;
 }
 
 // matrix by matrix -> matrix operations
 
 /* Simple Dot Product, Matrix-Vector and Matrix-Matrix Unit tests
-%!assert([1 2 3] * [ 4 ; 5 ; 6], 32, 1e-14)
-%!assert([1 2 ; 3 4 ] * [5 ; 6], [17 ; 39 ], 1e-14)
-%!assert([1 2 ; 3 4 ] * [5 6 ; 7 8], [19 22; 43 50], 1e-14)
+%!assert(single([1 2 3]) * single([ 4 ; 5 ; 6]), single(32), 5e-7)
+%!assert(single([1 2 ; 3 4 ]) * single([5 ; 6]), single([17 ; 39 ]), 5e-7)
+%!assert(single([1 2 ; 3 4 ]) * single([5 6 ; 7 8]), single([19 22; 43 50]), 5e-7)
 */
 
 /* Test some simple identities
 %!shared M, cv, rv
-%! M = randn(10,10);
-%! cv = randn(10,1);
-%! rv = randn(1,10);
-%!assert([M*cv,M*cv],M*[cv,cv],1e-14)
-%!assert([rv*M;rv*M],[rv;rv]*M,1e-14)
-%!assert(2*rv*cv,[rv,rv]*[cv;cv],1e-14)
+%! M = single(randn(10,10));
+%! cv = single(randn(10,1));
+%! rv = single(randn(1,10));
+%!assert([M*cv,M*cv],M*[cv,cv],5e-7)
+%!assert([rv*M;rv*M],[rv;rv]*M,5e-7)
+%!assert(2*rv*cv,[rv,rv]*[cv;cv],5e-7)
 */
 
 static const char *
 get_blas_trans_arg (bool trans)
 {
   static char blas_notrans = 'N', blas_trans = 'T';
   return (trans) ? &blas_trans : &blas_notrans;
 }
