# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1259309421 -3600
#      Fri Nov 27 09:10:21 2009 +0100
# Node ID ead4f9c82a9abf4b3150a0097fef8d408d7071fa
# Parent  cac3b4e5035b79bf58b7c891dcb49b831b511db6
implement Array<T>::nnz

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -2420,16 +2420,30 @@ Array<T>::lookupb (const Array<T>& value
 
   lsort.lookupb (data (), n, values.data (), values.numel (),
                  match.fortran_vec ());
 
   return match;
 }
 
 template <class T>
+octave_idx_type 
+Array<T>::nnz (void) const
+{
+  const T *src = data ();
+  octave_idx_type nel = nelem (), retval = 0;
+  const T zero = T ();
+  for (octave_idx_type i = 0; i < nel; i++)
+    if (src[i] != zero)
+      retval++;
+
+  return retval;
+}
+
+template <class T>
 Array<octave_idx_type> 
 Array<T>::find (octave_idx_type n, bool backward) const
 {
   Array<octave_idx_type> retval;
   const T *src = data ();
   octave_idx_type nel = nelem ();
   const T zero = T ();
   if (n < 0 || n >= nel)
@@ -2688,16 +2702,20 @@ template <> Array<octave_idx_type>  \
 Array<T>::lookup (const Array<T>&, sortmode, bool, bool) const \
 { return Array<octave_idx_type> (); } \
 template <> Array<octave_idx_type>  \
 Array<T>::lookupm (const Array<T>&, sortmode) const \
 { return Array<octave_idx_type> (); } \
 template <> Array<bool>  \
 Array<T>::lookupb (const Array<T>&, sortmode) const \
 { return Array<bool> (); } \
+ \
+template <> octave_idx_type \
+Array<T>::nnz (void) const\
+{ return 0; } \
 template <> Array<octave_idx_type> \
 Array<T>::find (octave_idx_type, bool) const\
 { return Array<octave_idx_type> (); } \
  \
 template <> Array<T>  \
 Array<T>::nth_element (const idx_vector&, int) const { return Array<T> (); } \
 
 
diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -636,16 +636,19 @@ public:
 
   // This looks up only exact matches, giving their indices. Non-exact matches get
   // the value -1.
   Array<octave_idx_type> lookupm (const Array<T>& values, sortmode mode = UNSORTED) const;
 
   // This looks up only exact matches, returning true/false if match.
   Array<bool> lookupb (const Array<T>& values, sortmode mode = UNSORTED) const;
 
+  // Count nonzero elements.
+  octave_idx_type nnz (void) const;
+
   // Find indices of (at most n) nonzero elements. If n is specified, backward
   // specifies search from backward.
   Array<octave_idx_type> find (octave_idx_type n = -1, bool backward = false) const;
 
   // Returns the n-th element in increasing order, using the same ordering as
   // used for sort. n can either be a scalar index or a contiguous range.
   Array<T> nth_element (const idx_vector& n, int dim = 0) const;
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,16 @@
+2009-11-27  Jaroslav Hajek  <highegg@gmail.com>
+
+	* Array.cc (Array<T>::nnz): New method.
+	* Array.h: Declare it.
+	* MArray.h (MArray<T>::nnz): Remove.
+	* MArrayN.h (MArrayN<T>::nnz): Remove.
+	* boolNDArray.h (boolNDArray::nnz): Remove.
+
 2009-11-25  Jaroslav Hajek  <highegg@gmail.com>
 
 	* dbleCHOL.cc (CHOL::init): Output LAPACK's info. Resize matrix if
 	nonzero. Use smarter copying.
 	* floatCHOL.cc (FloatCHOL::init): Ditto.
 	* CmplxCHOL.cc (ComplexCHOL::init): Ditto.
 	* fCmplxCHOL.cc (FloatComplexCHOL::init): Ditto.
 
diff --git a/liboctave/MArray.h b/liboctave/MArray.h
--- a/liboctave/MArray.h
+++ b/liboctave/MArray.h
@@ -68,33 +68,16 @@ public:
 
   // FIXME: kluge again. This design really sucks.
   void resize (octave_idx_type n, const T& val = Array<T>::resize_fill_value ())
     { Array<T>::resize_fill (n, 1, val); }
 
   MArray<T> transpose (void) const { return Array<T>::transpose (); }
   MArray<T> hermitian (T (*fcn) (const T&) = 0) const { return Array<T>::hermitian (fcn); }
 
-  octave_idx_type nnz (void) const
-    {
-      octave_idx_type retval = 0;
-
-      const T *d = this->data ();
-
-      octave_idx_type nel = this->numel ();
-
-      for (octave_idx_type i = 0; i < nel; i++)
-	{
-	  if (d[i] != T ())
-	    retval++;
-	}
-
-      return retval;
-    }
-
   double norm (double p) const;
   float norm (float p) const;
 
   // FIXME: should go away.
   template <class U>
   MArray<U>
   map (U (&fcn) (T)) const
   { return Array<T>::template map<U> (fcn); }
diff --git a/liboctave/MArrayN.h b/liboctave/MArrayN.h
--- a/liboctave/MArrayN.h
+++ b/liboctave/MArrayN.h
@@ -65,33 +65,16 @@ public:
   ~MArrayN (void) { }
 
   MArrayN<T>& operator = (const MArrayN<T>& a)
     {
       Array<T>::operator = (a);
       return *this;
     }
 
-  octave_idx_type nnz (void) const
-    {
-      octave_idx_type retval = 0;
-
-      const T *d = this->data ();
-
-      octave_idx_type nel = this->numel ();
-
-      for (octave_idx_type i = 0; i < nel; i++)
-	{
-	  if (d[i] != T ())
-	    retval++;
-	}
-
-      return retval;
-    }
-
   MArrayN<T> reshape (const dim_vector& new_dims) const
     { return Array<T>::reshape (new_dims); }
 
   MArrayN<T> permute (const Array<octave_idx_type>& vec, 
 		      bool inv = false) const
     { return Array<T>::permute (vec, inv); }
 
   MArrayN<T> ipermute (const Array<octave_idx_type>& vec) const
diff --git a/liboctave/boolNDArray.h b/liboctave/boolNDArray.h
--- a/liboctave/boolNDArray.h
+++ b/liboctave/boolNDArray.h
@@ -96,33 +96,16 @@ public:
   // friend std::ostream& operator << (std::ostream& os, const NDArray& a);
   // friend std::istream& operator >> (std::istream& is, NDArray& a);
 
   static bool resize_fill_value (void) { return false; }
 
   //  bool all_elements_are_real (void) const;
   //  bool all_integers (double& max_val, double& min_val) const;
 
-  octave_idx_type nnz (void) const
-    {
-      octave_idx_type retval = 0;
-
-      const bool *d = this->data ();
-
-      octave_idx_type nel = this->numel ();
-
-      for (octave_idx_type i = 0; i < nel; i++)
-	{
-	  if (d[i])
-	    retval++;
-	}
-
-      return retval;
-    }
-
   boolNDArray diag (octave_idx_type k = 0) const;
 
 private:
 
   boolNDArray (bool *d, dim_vector& dv) : Array<bool> (d, dv) { }
 };
 
 NDND_BOOL_OP_DECLS (boolNDArray, boolNDArray, OCTAVE_API)
