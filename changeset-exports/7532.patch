# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1204012076 18000
#      Tue Feb 26 02:47:56 2008 -0500
# Node ID 493bb0de319977ab89626f0752e7c63ea7b24da1
# Parent  c9a476b1e6646ddec0e6efb310437d945f6e593b
avoid another xGELSD workspace query bug

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -2481,16 +2481,23 @@ ComplexMatrix::lssolve (const ComplexMat
 	  if (n-3*m > addend)
 	    addend = n-3*m;
 
 	  const octave_idx_type lworkaround = 4*m + m*m + addend;
 
 	  if (std::real (work(0)) < lworkaround)
 	    work(0) = lworkaround;
 	}
+      else if (m >= n)
+	{
+	  octave_idx_type lworkaround = 2*m + m*nrhs;
+
+	  if (std::real (work(0)) < lworkaround)
+	    work(0) = lworkaround;
+	}
 
       lwork = static_cast<octave_idx_type> (std::real (work(0)));
       work.resize (lwork);
 
       F77_XFCN (zgelsd, ZGELSD, (m, n, nrhs, tmp_data, m, pretval,
 				 maxmn, ps, rcond, rank,
 				 work.fortran_vec (), lwork, 
 				 prwork, piwork, info));
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2008-02-26  John W. Eaton  <jwe@octave.org>
+
+	* dMatrix.cc (Matrix::lssolve): Avoid another dgelsd lwork query bug.
+	* CMatrix.cc (ComplexMatrix::lssolve): Likewise, for zgelsd
+
 2008-02-24  John W. Eaton  <jwe@octave.org>
 
 	* oct-inttypes.h (octave_int_helper): New class.  Provide
 	specializations for signed and unsigned types.
 	(octave_int<T>::operator >>=, octave_int<T>::abs,
 	octave_int<T>::signum): Use static functions from
 	octave_int_helper class.
 
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -2090,16 +2090,24 @@ Matrix::lssolve (const Matrix& b, octave
 	  if (wlalsd > addend)
 	    addend = wlalsd;
 
 	  const octave_idx_type lworkaround = 4*m + m*m + addend;
 
 	  if (work(0) < lworkaround)
 	    work(0) = lworkaround;
 	}
+      else if (m >= n)
+	{
+	  octave_idx_type lworkaround
+	    = 12*n + 2*n*smlsiz + 8*n*nlvl + n*nrhs + (smlsiz+1)*(smlsiz+1);
+
+	  if (work(0) < lworkaround)
+	    work(0) = lworkaround;
+	}
 
       lwork = static_cast<octave_idx_type> (work(0));
       work.resize (lwork);
 
       F77_XFCN (dgelsd, DGELSD, (m, n, nrhs, tmp_data, m, pretval,
 				 maxmn, ps, rcond, rank,
 				 work.fortran_vec (), lwork, 
 				 piwork, info));
