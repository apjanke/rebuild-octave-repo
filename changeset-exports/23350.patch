# HG changeset patch
# User Rik <rik@octave.org>
# Date 1491426021 25200
#      Wed Apr 05 14:00:21 2017 -0700
# Node ID 0f18524973eb16b1dbf28350819284686628b891
# Parent  4f07b4770eec28397af831eb62d82092798ddc14
Fix initial newline for disp() of cells (bug #50683).

* ov-cell.h (octave_cell::print_name_tag): Overloaded function prototype.

* ov-cell.cc (octave_cell::print_name_tag): Overload function to display name
of variable before printing..
* ov-cell.cc (short_disp, save_ascii, save_binary): Correct comments.

diff --git a/libinterp/octave-value/ov-cell.cc b/libinterp/octave-value/ov-cell.cc
--- a/libinterp/octave-value/ov-cell.cc
+++ b/libinterp/octave-value/ov-cell.cc
@@ -683,16 +683,35 @@ octave_cell::print_raw (std::ostream& os
     {
       indent (os);
       dim_vector dv = matrix.dims ();
       os << "{" << dv.str () << " Cell Array}";
       newline (os);
     }
 }
 
+bool
+octave_cell::print_name_tag (std::ostream& os, const std::string& name) const
+{
+  bool retval = false;
+
+  indent (os);
+
+  if (is_empty () || ndims () > 2)
+    os << name << " = ";
+  else
+    {
+      os << name << " =";
+      newline (os);
+      retval = true;
+    }
+
+  return retval;
+}
+
 void
 octave_cell::short_disp (std::ostream& os) const
 {
   os << (matrix.is_empty () ? "{}" : "...");
 }
 
 #define CELL_ELT_TAG "<cell-element>"
 
@@ -709,17 +728,17 @@ octave_cell::save_ascii (std::ostream& o
       os << "\n";
 
       Cell tmp = cell_value ();
 
       for (octave_idx_type i = 0; i < dv.numel (); i++)
         {
           octave_value o_val = tmp.elem (i);
 
-          // Recurse to print sub-value.
+          // Recurse to save sub-value.
           bool b = save_text_data (os, o_val, CELL_ELT_TAG, false, 0);
 
           if (! b)
             return ! os.fail ();
         }
     }
   else
     {
@@ -731,17 +750,17 @@ octave_cell::save_ascii (std::ostream& o
       Cell tmp = cell_value ();
 
       for (octave_idx_type j = 0; j < tmp.cols (); j++)
         {
           for (octave_idx_type i = 0; i < tmp.rows (); i++)
             {
               octave_value o_val = tmp.elem (i, j);
 
-              // Recurse to print sub-value.
+              // Recurse to save sub-value.
               bool b = save_text_data (os, o_val, CELL_ELT_TAG, false, 0);
 
               if (! b)
                 return ! os.fail ();
             }
 
           os << "\n";
         }
@@ -866,17 +885,17 @@ octave_cell::save_binary (std::ostream& 
     }
 
   Cell tmp = cell_value ();
 
   for (octave_idx_type i = 0; i < dv.numel (); i++)
     {
       octave_value o_val = tmp.elem (i);
 
-      // Recurse to print sub-value.
+      // Recurse to save sub-value.
       bool b = save_binary_data (os, o_val, CELL_ELT_TAG, "", 0,
                                  save_as_floats);
 
       if (! b)
         return false;
     }
 
   return true;
diff --git a/libinterp/octave-value/ov-cell.h b/libinterp/octave-value/ov-cell.h
--- a/libinterp/octave-value/ov-cell.h
+++ b/libinterp/octave-value/ov-cell.h
@@ -147,16 +147,18 @@ public:
   Array<std::string> cellstr_value (const char *fmt, ...) const;
 
   bool print_as_scalar (void) const;
 
   void print (std::ostream& os, bool pr_as_read_syntax = false);
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
+  bool print_name_tag (std::ostream& os, const std::string& name) const;
+
   void short_disp (std::ostream& os) const;
 
   bool save_ascii (std::ostream& os);
 
   bool load_ascii (std::istream& is);
 
   bool save_binary (std::ostream& os, bool& save_as_floats);
 
