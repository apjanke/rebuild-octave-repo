# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1319781658 25200
#      Thu Oct 27 23:00:58 2011 -0700
# Node ID 5f96b91b4e0c63dbf819ff7646f02c0f1c403d6e
# Parent  2b98014771b4f443448ffbad33e3f2435518a587
interpft.m: Miscellaneous code cleanup.  Add more input validation tests.

* interpft.m: Miscellaneous code cleanup.  Add more input validation tests.

diff --git a/scripts/general/interpft.m b/scripts/general/interpft.m
--- a/scripts/general/interpft.m
+++ b/scripts/general/interpft.m
@@ -41,42 +41,39 @@
 ##    * Make it matlab compatiable, cutting out the 2-D interpolation
 
 function z = interpft (x, n, dim)
 
   if (nargin < 2 || nargin > 3)
     print_usage ();
   endif
 
+  if (! (isscalar (n) && n == fix (n)))
+    error ("interpft: N must be a scalar integer");
+  endif
+
   if (nargin == 2)
-    if (isvector (x) && size (x, 1) == 1)
+    if (isrow (x))
       dim = 2;
     else
       dim = 1;
     endif
   endif
 
-  if (! isscalar (n))
-    error ("interpft: N must be an integer scalar");
-  endif
-
   nd = ndims (x);
 
   if (dim < 1 || dim > nd)
-    error ("interpft: integrating over invalid dimension");
+    error ("interpft: invalid dimension DIM");
   endif
 
   perm = [dim:nd, 1:(dim-1)];
   x = permute (x, perm);
-  m = size (x, 1);
+  m = rows (x);
 
-  inc = 1;
-  while (inc*n < m)
-    inc++;
-  endwhile
+  inc = max (1, fix (m/n));
   y = fft (x) / m;
   k = floor (m / 2);
   sz = size (x);
   sz(1) = n * inc - m;
 
   idx = repmat ({':'}, nd, 1);
   idx{1} = 1:k;
   z = cat (1, y(idx{:}), zeros (sz));
@@ -85,28 +82,35 @@ function z = interpft (x, n, dim)
   z = n * ifft (z);
 
   if (inc != 1)
     sz(1) = n;
     z = inc * reshape (z(1:inc:end), sz);
   endif
 
   z = ipermute (z, perm);
+
 endfunction
 
+
 %!demo
 %! t = 0 : 0.3 : pi; dt = t(2)-t(1);
 %! n = length (t); k = 100;
 %! ti = t(1) + [0 : k-1]*dt*n/k;
 %! y = sin (4*t + 0.3) .* cos (3*t - 0.1);
 %! yp = sin (4*ti + 0.3) .* cos (3*ti - 0.1);
 %! plot (ti, yp, 'g', ti, interp1(t, y, ti, 'spline'), 'b', ...
 %!       ti, interpft (y, k), 'c', t, y, 'r+');
 %! legend ('sin(4t+0.3)cos(3t-0.1','spline','interpft','data');
 
 %!shared n,y
 %! x = [0:10]'; y = sin(x); n = length (x);
 %!assert (interpft(y, n), y, 20*eps);
 %!assert (interpft(y', n), y', 20*eps);
 %!assert (interpft([y,y],n), [y,y], 20*eps);
 
-%!error (interpft(y,n,0))
-%!error (interpft(y,[n,n]))
+%% Test input validation
+%!error interpft ()
+%!error interpft (1)
+%!error interpft (1,2,3)
+%!error (interpft(1,[n,n]))
+%!error (interpft(1,2,0))
+%!error (interpft(1,2,3))
