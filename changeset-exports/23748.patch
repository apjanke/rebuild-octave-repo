# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1499465194 14400
#      Fri Jul 07 18:06:34 2017 -0400
# Node ID 6e86d3b5a0632db625ee9e3dc5ce56764068b265
# Parent  0b4d1575a2e262cd2e22f351356cf865ab3c348b
move base64 encode and decode functions inside octave namespace

* oct-base64.h, oct-base64.cc (base64_encode, base64_decode):
Move functions inside octave namespace and rename from
octave_base64_encode and octave_base64_decode.  Change all uses.

diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -7762,17 +7762,17 @@ Encode a double matrix or array @var{x} 
     {
 #define MAKE_INT_BRANCH(X)                                               \
       if (args(0).is_ ## X ## _type ())                                  \
         {                                                                \
           const X##NDArray in = args(0).  X## _array_value ();           \
           size_t inlen = in.numel () * sizeof (X## _t) / sizeof (char);  \
           const char *inc = reinterpret_cast<const char *> (in.data ()); \
           char *out;                                                     \
-          if (octave_base64_encode (inc, inlen, &out))                   \
+          if (octave::base64_encode (inc, inlen, &out))                  \
             {                                                            \
               retval(0) = octave_value (out);                            \
               ::free (out);                                              \
             }                                                            \
         }
 
       MAKE_INT_BRANCH(int8)
       else MAKE_INT_BRANCH(int16)
@@ -7791,31 +7791,31 @@ Encode a double matrix or array @var{x} 
   else if (args(0).is_single_type ())
     {
       const Array<float> in = args(0).float_array_value ();
       size_t inlen;
       inlen = in.numel () * sizeof (float) / sizeof (char);
       const char*  inc;
       inc = reinterpret_cast<const char *> (in.data ());
       char *out;
-      if (octave_base64_encode (inc, inlen, &out))
+      if (octave::base64_encode (inc, inlen, &out))
         {
           retval(0) = octave_value (out);
           ::free (out);
         }
     }
   else  // double_type
     {
       const Array<double> in = args(0).array_value ();
       size_t inlen;
       inlen = in.numel () * sizeof (double) / sizeof (char);
       const char*  inc;
       inc = reinterpret_cast<const char *> (in.data ());
       char *out;
-      if (octave_base64_encode (inc, inlen, &out))
+      if (octave::base64_encode (inc, inlen, &out))
         {
           retval(0) = octave_value (out);
           ::free (out);
         }
     }
 
   return retval;
 }
@@ -7857,17 +7857,17 @@ dimensions of the decoded array.
 {
   int nargin = args.length ();
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
 
   std::string str = args(0).string_value ();
 
-  Array<double> retval = octave_base64_decode (str);
+  Array<double> retval = octave::base64_decode (str);
 
   if (nargin == 2)
     {
       dim_vector dims;
 
       const Array<octave_idx_type> size =
         args(1).octave_idx_type_vector_value ();
 
diff --git a/liboctave/util/oct-base64.cc b/liboctave/util/oct-base64.cc
--- a/liboctave/util/oct-base64.cc
+++ b/liboctave/util/oct-base64.cc
@@ -25,65 +25,84 @@ along with Octave; see the file COPYING.
 #endif
 
 #include <algorithm>
 
 #include "Array.h"
 #include "base64-wrappers.h"
 #include "oct-base64.h"
 
+namespace octave
+{
+  bool
+  base64_encode (const char *inc, const size_t inlen, char **out)
+  {
+    bool ret = false;
+
+    size_t outlen = octave_base64_encode_alloc_wrapper (inc, inlen, out);
+
+    if (! out)
+      {
+        if (outlen == 0 && inlen != 0)
+          (*current_liboctave_error_handler)
+            ("base64_encode: input array too large");
+        else
+          (*current_liboctave_error_handler)
+            ("base64_encode: memory allocation error");
+      }
+    else
+      ret = true;
+
+    return ret;
+  }
+
+  Array<double>
+  base64_decode (const std::string& str)
+  {
+    Array<double> retval;
+
+    char *out;
+    size_t outlen;
+
+    bool ok = octave_base64_decode_alloc_wrapper (str.data (), str.length (),
+                                                  &out, &outlen);
+
+    if (! ok)
+      (*current_liboctave_error_handler)
+        ("base64_decode: input was not valid base64");
+    if (! out)
+      (*current_liboctave_error_handler)
+        ("base64_decode: memory allocation error");
+
+    if ((outlen % (sizeof (double) / sizeof (char))) != 0)
+      {
+        ::free (out);
+        (*current_liboctave_error_handler)
+          ("base64_decode: incorrect input size");
+      }
+    else
+      {
+        octave_idx_type len = (outlen * sizeof (char)) / sizeof (double);
+        retval.resize (dim_vector (1, len));
+        double *dout = reinterpret_cast<double *> (out);
+        std::copy (dout, dout + len, retval.fortran_vec ());
+        ::free (out);
+      }
+
+    return retval;
+  }
+}
+
+#if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
+
 bool
 octave_base64_encode (const char *inc, const size_t inlen, char **out)
 {
-  bool ret = false;
-
-  size_t outlen = octave_base64_encode_alloc_wrapper (inc, inlen, out);
-
-  if (! out)
-    {
-      if (outlen == 0 && inlen != 0)
-        (*current_liboctave_error_handler)
-          ("base64_encode: input array too large");
-      else
-        (*current_liboctave_error_handler)
-          ("base64_encode: memory allocation error");
-    }
-  else
-    ret = true;
-
-  return ret;
+  return octave::base64_encode (inc, inlen, out);
 }
 
 Array<double>
 octave_base64_decode (const std::string& str)
 {
-  Array<double> retval;
-
-  char *out;
-  size_t outlen;
-
-  bool ok = octave_base64_decode_alloc_wrapper (str.data (), str.length (),
-                                                &out, &outlen);
-
-  if (! ok)
-    (*current_liboctave_error_handler)
-      ("base64_decode: input was not valid base64");
-  if (! out)
-    (*current_liboctave_error_handler)
-      ("base64_decode: memory allocation error");
+  return octave::base64_decode (str);
+}
 
-  if ((outlen % (sizeof (double) / sizeof (char))) != 0)
-    {
-      ::free (out);
-      (*current_liboctave_error_handler)
-        ("base64_decode: incorrect input size");
-    }
-  else
-    {
-      octave_idx_type len = (outlen * sizeof (char)) / sizeof (double);
-      retval.resize (dim_vector (1, len));
-      double *dout = reinterpret_cast<double *> (out);
-      std::copy (dout, dout + len, retval.fortran_vec ());
-      ::free (out);
-    }
-
-  return retval;
-}
+#endif
diff --git a/liboctave/util/oct-base64.h b/liboctave/util/oct-base64.h
--- a/liboctave/util/oct-base64.h
+++ b/liboctave/util/oct-base64.h
@@ -24,15 +24,30 @@ along with Octave; see the file COPYING.
 #define octave_oct_base64_h 1
 
 #include "octave-config.h"
 
 #include <string>
 
 template <typename T> class Array;
 
-extern OCTAVE_API bool
+namespace octave
+{
+  extern OCTAVE_API bool
+  base64_encode (const char *inc, const size_t inlen, char **out);
+
+  extern OCTAVE_API Array<double>
+  base64_decode (const std::string& str);
+}
+
+#if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
+
+OCTAVE_DEPRECATED (4.4, "use 'octave::base_64_encode' instead")
+extern bool
 octave_base64_encode (const char *inc, const size_t inlen, char **out);
 
-extern OCTAVE_API Array<double>
+OCTAVE_DEPRECATED (4.4, "use 'octave::base_64_decode' instead")
+extern Array<double>
 octave_base64_decode (const std::string& str);
 
 #endif
+
+#endif
