# HG changeset patch
# User jwe
# Date 1106691026 0
#      Tue Jan 25 22:10:26 2005 +0000
# Node ID ecbb290ba9ffb1230074bbf0f2f8f357a39046db
# Parent  2d94fe12e09ae964ac359bd3fc630281eeffb30b
[project @ 2005-01-25 22:10:26 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,11 +1,12 @@
 2005-01-25  Daniel J Sebald  <daniel.sebald@ieee.org>.
 
 	* plot/__plt__.m: Initialize fmt and sep outside of loop.
+	Simplify logic for decoding args.
 
 2005-01-24  John W. Eaton  <jwe@octave.org>
 
 	* plot/__plr__.m, plot/__plr2__.m: Pass name of caller to __plt__.
 
 	* plot/__plt__.m: No need to save and reset hold state now.
 	(first_plot): Delete unused variable.
 
diff --git a/scripts/plot/__plt__.m b/scripts/plot/__plt__.m
--- a/scripts/plot/__plt__.m
+++ b/scripts/plot/__plt__.m
@@ -26,109 +26,84 @@
 function __plt__ (caller, varargin)
 
   nargs = nargin ();
 
   if (nargs >= 2)
 
     k = 1;
     j = 1;
-    x = varargin{k++};
-    nargs -= 2;
-    x_set = 1;
+    nargs -= 1;
+    x_set = 0;
     y_set = 0;
     gp_cmd = "gplot";
     have_gp_cmd = false;
-    fmt = "";
     sep = "";
 
     ## Gather arguments, decode format, gather plot strings, and plot lines.
 
-    while (nargs-- > 0)
-
-      new = varargin{k++};
+    while ((nargs-- > 0) || x_set)
 
-      if (j > 1)
-	sep = ",\\\n";
+      if (k < nargin())
+	new = varargin{k++};
+      else
+	new = ""; ## Force the last plot when input variables run out.
       endif
 
+      queue_plot = false;
+
       if (isstr (new))
 	if (! x_set)
 	  error ("plot: no data to plot");
 	endif
 	fmt = __pltopt__ (caller, new);
 	if (! y_set)
 	  [data{j}, fmtstr] = __plt1__ (x, fmt);
 	else
 	  [data{j}, fmtstr] = __plt2__ (x, y, fmt);
 	endif
-	if (iscell (data{j}))
-	  for i = 1:length (data{j})
-	    gp_cmd = sprintf ("%s%s data{%d}{%d} %s", gp_cmd, sep,
-			      j, i, fmtstr{i});
-	    sep = ",\\\n";
-	    have_gp_cmd = true;
-	  endfor
-	else
-	  gp_cmd = sprintf ("%s%s data{%d} %s", gp_cmd, sep, j++, fmtstr);
-	  have_gp_cmd = true;
-	endif
+	queue_plot = true;
 	x_set = 0;
 	y_set = 0;
       elseif (x_set)
 	if (y_set)
-	  [data{j}, fmtstr] = __plt2__ (x, y, fmt);
-	  if (iscell (data{j}))
-	    for i = 1:length (data{j})
-	      gp_cmd = sprintf ("%s%s data{%d}{%d} %s", gp_cmd, sep,
-				j, i, fmtstr{i});
-	      sep = ",\\\n";
-	      have_gp_cmd = true;
-	    endfor
-	  else
-	    gp_cmd = sprintf ("%s%s data{%d} %s", gp_cmd, sep, j++, fmtstr);
-	    have_gp_cmd = true;
-	  endif
+	  [data{j}, fmtstr] = __plt2__ (x, y, "");
+	  queue_plot = true;
 	  x = new;
 	  y_set = 0;
 	else
 	  y = new;
 	  y_set = 1;
 	endif
       else
 	x = new;
 	x_set = 1;
       endif
 
-    endwhile
-
-    ## Handle last plot.
-
-    if (x_set)
-      if (y_set)
-	[data{j}, fmtstr] = __plt2__ (x, y, fmt);
-      else
-	[data{j}, fmtstr] = __plt1__ (x, fmt);
-      endif
-      if (iscell (data{j}))
-	for i = 1:length (data{j})
-	  gp_cmd = sprintf ("%s%s data{%d}{%d} %s", gp_cmd, sep,
-			    j, i, fmtstr{i});
+      if (queue_plot)
+	if (iscell (data{j}))
+	  for i = 1:length (data{j})
+	    gp_cmd = sprintf ("%s%s data{%d}{%d} %s", gp_cmd, sep,
+			      j, i, fmtstr{i});
+	    sep = ",\\\n";
+	  endfor
+	  j++;
+	else
+	  gp_cmd = sprintf ("%s%s data{%d} %s", gp_cmd, sep, j++, fmtstr);
 	  sep = ",\\\n";
-	  have_gp_cmd = true;
-	endfor
-      else
-	gp_cmd = sprintf ("%s%s data{%d} %s", gp_cmd, sep, j++, fmtstr);
+	endif
 	have_gp_cmd = true;
       endif
-    endif
+
+    endwhile
 
     if (have_gp_cmd)
       eval (gp_cmd);
     endif
+
   else
     msg = sprintf ("%s (x)\n", caller);
     msg = sprintf ("%s       %s (x, y)\n", msg, caller);
     msg = sprintf ("%s       %s (x2, y1, x2, y2)\n", msg, caller);
     msg = sprintf ("%s       %s (x, y, fmt)", msg, caller);
     usage (msg);
   endif
 
