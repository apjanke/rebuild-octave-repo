# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1551596932 0
#      Sun Mar 03 07:08:52 2019 +0000
# Node ID d9770844392e3f4c5f207ee97fd3229625032ae6
# Parent  414685784cd399d0b1f0b19949b28ae8c62ac6eb
provide virtual dup methods for stack frames

* stack-frame.h, stack-frame.cc (stack_frame::dup): New pure virtual.
(compiled_fcn_stack_frame::dup, script_stack_frame::dup,
user_fcn_stack_frame::dup, scope_stack_frame::dup): New functions.

diff --git a/libinterp/corefcn/stack-frame.cc b/libinterp/corefcn/stack-frame.cc
--- a/libinterp/corefcn/stack-frame.cc
+++ b/libinterp/corefcn/stack-frame.cc
@@ -513,16 +513,22 @@ namespace octave
       {
         frm->display (false);
         os << std::endl;
 
         frm = frm->access_link ();
       }
   }
 
+  compiled_fcn_stack_frame *
+  compiled_fcn_stack_frame::dup (void) const
+  {
+    return new compiled_fcn_stack_frame (*this);
+  }
+
   void compiled_fcn_stack_frame::display (bool follow) const
   {
     std::ostream& os = octave_stdout;
 
     os << "-- [compiled_fcn_stack_frame] (" << this << ") --" << std::endl;
     stack_frame::display (follow);
 
     os << "fcn: " << m_fcn->name ()
@@ -542,16 +548,22 @@ namespace octave
     : stack_frame (cs, prev, static_link, get_access_link (static_link)),
       m_script (script), m_unwind_protect_frame (up_frame),
       m_lexical_frame_offsets (get_num_symbols (script), 1),
       m_value_offsets (get_num_symbols (script), 0)
   {
     set_script_offsets ();
   }
 
+  script_stack_frame *
+  script_stack_frame::dup (void) const
+  {
+    return new script_stack_frame (*this);
+  }
+
   size_t script_stack_frame::get_num_symbols (octave_user_script *script)
   {
     symbol_scope script_scope = script->scope ();
 
     return script_scope.num_symbols ();
   }
 
   void script_stack_frame::set_script_offsets (void)
@@ -1082,16 +1094,22 @@ namespace octave
 
         octave_value val = varval (i);
 
         os << (val.is_defined () ? val.type_name () : " UNDEFINED") << ")"
            << std::endl;
       }
   }
 
+  user_fcn_stack_frame *
+  user_fcn_stack_frame::dup (void) const
+  {
+    return new user_fcn_stack_frame (*this);
+  }
+
   // If this is a nested scope, set access_link to nearest parent
   // stack frame that corresponds to the lexical parent of this scope.
 
   stack_frame *
   user_fcn_stack_frame::get_access_link (octave_user_function *fcn,
                                          stack_frame *static_link)
   {
     stack_frame *alink = nullptr;
@@ -1353,16 +1371,22 @@ namespace octave
     display_scope (os, get_scope ());
  }
 
   void user_fcn_stack_frame::accept (stack_frame_walker& sfw)
   {
     sfw.visit_user_fcn_stack_frame (*this);
   }
 
+  scope_stack_frame *
+  scope_stack_frame::dup (void) const
+  {
+    return new scope_stack_frame (*this);
+  }
+
   symbol_record scope_stack_frame::insert_symbol (const std::string& name)
   {
     // There is no access link for scope frames, so there is no other
     // frame to search in and the offset must be zero.
 
     symbol_record sym = m_scope.lookup_symbol (name);
 
     if (sym)
diff --git a/libinterp/corefcn/stack-frame.h b/libinterp/corefcn/stack-frame.h
--- a/libinterp/corefcn/stack-frame.h
+++ b/libinterp/corefcn/stack-frame.h
@@ -147,16 +147,18 @@ namespace octave
     { }
 
     stack_frame (const stack_frame& elt) = default;
 
     stack_frame& operator = (const stack_frame& elt) = delete;
 
     virtual ~stack_frame (void) = default;
 
+    virtual stack_frame * dup (void) const = 0;
+
     // FIXME: It would be nice to eliminate these but there are a few
     // places where we still need to know the specific type of the
     // stack frame that we are handling.
 
     virtual bool is_compiled_fcn_frame (void) const { return false; }
     virtual bool is_user_script_frame (void) const { return false; }
     virtual bool is_user_fcn_frame (void) const { return false; }
     virtual bool is_scope_frame (void) const { return false; }
@@ -575,16 +577,18 @@ namespace octave
 
     compiled_fcn_stack_frame (const compiled_fcn_stack_frame& elt) = default;
 
     compiled_fcn_stack_frame&
     operator = (const compiled_fcn_stack_frame& elt) = delete;
 
     ~compiled_fcn_stack_frame (void) = default;
 
+    compiled_fcn_stack_frame * dup (void) const;
+
     bool is_compiled_fcn_frame (void) const { return true; }
 
     symbol_scope get_scope (void) const
     {
       return m_static_link->get_scope ();
     }
 
     octave_function * function (void) const { return m_fcn; }
@@ -685,16 +689,18 @@ namespace octave
                         stack_frame *static_link);
 
     script_stack_frame (const script_stack_frame& elt) = default;
 
     script_stack_frame& operator = (const script_stack_frame& elt) = delete;
 
     ~script_stack_frame (void) = default;
 
+    script_stack_frame * dup (void) const;
+
     bool is_user_script_frame (void) const { return true; }
 
     static stack_frame * get_access_link (stack_frame *static_link);
 
     static size_t get_num_symbols (octave_user_script *script);
 
     void set_script_offsets (void);
 
@@ -890,16 +896,18 @@ namespace octave
 
     user_fcn_stack_frame (const user_fcn_stack_frame& elt) = default;
 
     user_fcn_stack_frame&
     operator = (const user_fcn_stack_frame& elt) = delete;
 
     ~user_fcn_stack_frame (void) = default;
 
+    user_fcn_stack_frame * dup (void) const;
+
     bool is_user_fcn_frame (void) const { return true; }
 
     static stack_frame *
     get_access_link (octave_user_function *fcn, stack_frame *static_link);
 
     static size_t get_num_symbols (octave_user_function *fcn)
     {
       symbol_scope fcn_scope = fcn->scope ();
@@ -964,16 +972,18 @@ namespace octave
     { }
 
     scope_stack_frame (const scope_stack_frame& elt) = default;
 
     scope_stack_frame& operator = (const scope_stack_frame& elt) = delete;
 
     ~scope_stack_frame (void) = default;
 
+    scope_stack_frame * dup (void) const;
+
     bool is_scope_frame (void) const { return true; }
 
     symbol_scope get_scope (void) const { return m_scope; }
 
     symbol_record lookup_symbol (const std::string& name) const
     {
       return m_scope.lookup_symbol (name);
     }
