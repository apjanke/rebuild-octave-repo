# HG changeset patch
# User jwe
# Date 757882448 0
#      Thu Jan 06 18:54:08 1994 +0000
# Node ID 7ec58832918fb584aee5dae45833805669aecacd
# Parent  64b486b19ce4280a267ca38aae753096fea43e70
[project @ 1994-01-06 18:54:08 by jwe]

diff --git a/src/builtins.cc b/src/builtins.cc
--- a/src/builtins.cc
+++ b/src/builtins.cc
@@ -257,16 +257,19 @@ where \"opt\" is an optional single char
 \n\
 The first argument is the name of the function to call to\n\
 compute the vector of residuals.  It must have the form\n\
 \n\
   res = f (x, xdot, t)\n\
 \n\
 where x, xdot, and res are vectors, and t is a scalar.", },
 
+  { "dassl_options", -1, 1, builtin_dassl_options,
+    "dassl_options (keyword, value): set or show options for dassl", },
+
   { "date", 1, 0, builtin_date,
     "date (): return current date in a string", },
 
   { "det", 2, 1, builtin_det,
     "det (X): determinant of a square matrix", },
 
   { "diag", 3, 1, builtin_diag,
     "diag (X [,k]): form/extract diagonals", },
@@ -349,27 +352,33 @@ where x, xdot, and res are vectors, and 
 \n\
 Where the first argument is the name of the  function to call to\n\
 compute the vector of function values.  It must have the form\n\
 \n\
   y = f (x)
 \n\
 where y and x are vectors.", },
 
+  { "fsolve_options", -1, 1, builtin_fsolve_options,
+    "fsolve_options (keyword, value): set or show options for fsolve", },
+
   { "fsqp", 11, 3, builtin_fsqp,
 #if defined (FSQP_MISSING)
     "This function requires FSQP, which is not freely\n\
        redistributable.  For more information, read the file\n\
        libcruft/fsqp/README.MISSING in the source distribution.", },
 #else
   "[x, phi] = fsqp (x, \"phi\" [, lb, ub] [, lb, A, ub] [, lb, \"g\", ub])\n\n\
   Groups of arguments surrounded in `[]' are optional, but\n\
   must appear in the same relative order shown above.", },
 #endif
 
+  { "fsqp_options", -1, 1, builtin_fsqp_options,
+    "fsqp_options (keyword, value): set or show options for fsqp", },
+
   { "ftell", 2, 1, builtin_ftell,
     "position = ftell (\"filename\" or filenum): returns the current file position", },
 
   { "getenv", 2, 1, builtin_getenv,
     "getenv (\"string\"): get environment variable values", },
 
   { "givens", 3, 2, builtin_givens,
     "G = givens (x, y): compute orthogonal matrix G = [c s; -conj (s) c]\n\
@@ -405,26 +414,32 @@ where y and x are vectors.", },
     "keyboard (\"prompt\"): maybe help in debugging M-files", },
 
   { "logm", 2, 1, builtin_logm,
     "logm (x): matrix logarithm", },
 
   { "lp_solve", 11, 3, builtin_lpsolve,
     "lp_solve (): solve linear programs using lp_solve.", },
 
+  { "lp_solve_options", -1, 1, builtin_lpsolve_options,
+    "lp_solve_options (keyword, value): set or show options for lp_solve", },
+
   { "lsode", 6, 1, builtin_lsode,
     "lsode (\"function_name\", x0, t_out, t_crit)\n\
 \n\
 The first argument is the name of the function to call to\n\
 compute the vector of right hand sides.  It must have the form\n\
 \n\
   xdot = f (x, t)\n\
 \n\
 where xdot and x are vectors and t is a scalar.\n", },
 
+  { "lsode_options", -1, 1, builtin_lsode_options,
+    "lsode_options (keyword, value): set or show options for lsode", },
+
   { "lu", 2, 3, builtin_lu,
     "[L, U, P] = lu (A): LU factorization", },
 
   { "max", 3, 2, builtin_max,
     "max (x): maximum value(s) of a vector (matrix)", },
 
   { "min", 3, 2, builtin_min,
     "min (x): minimum value(s) of a vector (matrix)", },
@@ -442,16 +457,19 @@ where xdot and x are vectors and t is a 
   The second argument is a string containing the name of the objective\n\
   function to call.  The objective function must be of the form\n\
 \n\
     y = phi (x)\n\
 \n\
   where x is a vector and y is a scalar.", },
 #endif
 
+  { "npsol_options", -1, 1, builtin_npsol_options,
+    "npsol_options (keyword, value): set or show options for npsol", },
+
   { "ones", 3, 1, builtin_ones,
     "ones (n), ones (n, m), ones (x): create a matrix of all ones", },
 
   { "pause", 1, 0, builtin_pause,
     "pause (seconds): suspend program execution", },
 
   { "purge_tmp_files", 5, 1, builtin_purge_tmp_files,
     "delete temporary data files used for plotting", },
@@ -472,16 +490,19 @@ where xdot and x are vectors and t is a 
        libcruft/qpsol/README.MISSING in the source distribution.", },
 #else
     "[x, obj, info, lambda] = qpsol (x, H, c [, lb, ub] [, lb, A, ub])\n\
 \n\
   Groups of arguments surrounded in `[]' are optional, but\n\
   must appear in the same relative order shown above.", },
 #endif
 
+  { "qpsol_options", -1, 1, builtin_qpsol_options,
+    "qpsol_options (keyword, value): set or show options for qpsol", },
+
   { "qr", 2, 2, builtin_qr,
     "[q, r] = qr (X): form QR factorization of X", },
 
   { "quad", 6, 3, builtin_quad,
     "[v, ier, nfun] = quad (\"f\", a, b [, tol] [, sing])\n\
 \n\
 Where the first argument is the name of the  function to call to\n\
 compute the value of the integrand.  It must have the form\n\
@@ -490,16 +511,19 @@ compute the value of the integrand.  It 
 \n\
 where y and x are scalars.\n\
 \n\
 The second and third arguments are limits of integration.  Either or\n\
 both may be infinite.  The optional argument tol specifies the desired\n\
 accuracy of the result.  The optional argument sing is a vector of\n\
 at which the integrand is singular.\n", },
 
+  { "quad_options", -1, 1, builtin_quad_options,
+    "quad_options (keyword, value): set or show options for quad", },
+
   { "quit", 1, 0, builtin_quit,
     "quit (): exit Octave gracefully", },
 
   { "qzval", 3, 1, builtin_qzval,
     "x = qzval (A,B): compute generalized eigenvalues of \n\
   the matrix pencil (A - lambda B).  A and B must be real matrices.", },
 
   { "rand", 2, 1, builtin_rand,
diff --git a/src/dassl.cc b/src/dassl.cc
--- a/src/dassl.cc
+++ b/src/dassl.cc
@@ -38,16 +38,22 @@ Software Foundation, 675 Mass Ave, Cambr
 static tree *dassl_fcn;
 
 #ifdef WITH_DLD
 tree_constant *
 builtin_dassl_2 (const tree_constant *args, int nargin, int nargout)
 {
   return dassl (args, nargin, nargout);
 }
+
+tree_constant *
+builtin_dassl_options_2 (const tree_constant *args, int nargin, int nargout)
+{
+  return dassl_options (args, nargin, nargout);
+}
 #endif
 
 ColumnVector
 dassl_user_function (const ColumnVector& x, const ColumnVector& xdot, double t)
 {
   ColumnVector retval;
 
   int nstates = x.capacity ();
@@ -157,15 +163,24 @@ dassl (const tree_constant *args, int na
     output = dae.integrate (out_times, deriv_output);
 
   retval = new tree_constant [3];
   retval[0] = tree_constant (output);
   retval[1] = tree_constant (deriv_output);
   return retval;
 }
 
+tree_constant *
+dassl_options (const tree_constant *args, int nargin, int nargout)
+{
+// Assumes that we have been given the correct number of arguments.
+
+  tree_constant *retval = NULL_TREE_CONST;
+  error ("dassl_options: not implemented yet");
+  return retval;
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
-
diff --git a/src/fsolve.cc b/src/fsolve.cc
--- a/src/fsolve.cc
+++ b/src/fsolve.cc
@@ -38,16 +38,22 @@ Software Foundation, 675 Mass Ave, Cambr
 static tree *fsolve_fcn;
 
 #ifdef WITH_DLD
 tree_constant *
 builtin_fsolve (const tree_constant *args, int nargin, int nargout)
 {
   return fsolve (args, nargin, nargout);
 }
+
+tree_constant *
+builtin_fsolve_options (const tree_constant *args, int nargin, int nargout)
+{
+  return fsolve_options (args, nargin, nargout);
+}
 #endif
 
 int
 hybrd_info_to_fsolve_info (int info)
 {
   switch (info)
     {
     case -1:
@@ -157,15 +163,24 @@ fsolve (const tree_constant *args, int n
     retval[1] = tree_constant ((double) info);
 
   if (nargout > 2)
     retval[2] = tree_constant ();
 
   return retval;
 }
 
+tree_constant *
+fsolve_options (const tree_constant *args, int nargin, int nargout)
+{
+// Assumes that we have been given the correct number of arguments.
+
+  tree_constant *retval = NULL_TREE_CONST;
+  error ("fsolve_options: not implemented yet");
+  return retval;
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
-
diff --git a/src/fsqp.cc b/src/fsqp.cc
--- a/src/fsqp.cc
+++ b/src/fsqp.cc
@@ -38,16 +38,22 @@ static tree *fsqp_objective;
 static tree *fsqp_constraints;
 
 #ifdef WITH_DLD
 tree_constant *
 builtin_fsqp_2 (const tree_constant *args, int nargin, int nargout)
 {
   return fsqp (args, nargin, nargout);
 }
+
+tree_constant *
+builtin_fsqp_options_2 (const tree_constant *args, int nargin, int nargout)
+{
+  return fsqp_options (args, nargin, nargout);
+}
 #endif
 
 double
 fsqp_objective_function (const ColumnVector& x)
 {
   return 0.0;
 }
 
@@ -78,16 +84,26 @@ Handle all of the following:
 
 // Assumes that we have been given the correct number of arguments.
 
   tree_constant *retval = NULL_TREE_CONST;
   error ("fsqp: not implemented yet");
   return retval;
 }
 
+tree_constant *
+fsqp_options (const tree_constant *args, int nargin, int nargout)
+{
+// Assumes that we have been given the correct number of arguments.
+
+  tree_constant *retval = NULL_TREE_CONST;
+  error ("fsqp_options: not implemented yet");
+  return retval;
+}
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/src/g-builtins.cc b/src/g-builtins.cc
--- a/src/g-builtins.cc
+++ b/src/g-builtins.cc
@@ -1,12 +1,12 @@
 // g-builtins.cc                                           -*- C++ -*-
 /*
 
-Copyright (C) 1992, 1993 John W. Eaton
+Copyright (C) 1992, 1993, 1994 John W. Eaton
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 2, or (at your option) any
 later version.
 
@@ -325,16 +325,30 @@ builtin_dassl (const tree_constant *args
     DLD_BUILTIN (args, nargin, nargout, dassl,
 		 retval = dassl (args, nargin, nargout);)
   else
     print_usage ("dassl");
 
   return retval;
 }
 
+tree_constant *
+builtin_dassl_options (const tree_constant *args, int nargin, int nargout)
+{
+  tree_constant *retval = NULL_TREE_CONST;
+
+  if (nargin >= 3 && nargin <= 7 && nargout >= 1 && nargout <= 3)
+    DLD_BUILTIN (args, nargin, nargout, dassl_options,
+		 retval = dassl_options (args, nargin, nargout);)
+  else
+    print_usage ("dassl_options");
+
+  return retval;
+}
+
 /*
  * Time in a string.
  */
 tree_constant *
 builtin_date (const tree_constant *args, int nargin, int nargout)
 {
   tree_constant *retval = NULL_TREE_CONST;
 
@@ -773,16 +787,30 @@ builtin_fsolve (const tree_constant *arg
     DLD_BUILTIN (args, nargin, nargout, fsolve,
 		 retval = fsolve (args, nargin, nargout);)
   else
     print_usage ("fsolve");
 
   return retval;
 }
 
+tree_constant *
+builtin_fsolve_options (const tree_constant *args, int nargin, int nargout)
+{
+  tree_constant *retval = NULL_TREE_CONST;
+
+  if (nargin >= 3 && nargin <= 7 && nargout >= 1 && nargout <= 3)
+    DLD_BUILTIN (args, nargin, nargout, fsolve_options,
+		 retval = fsolve_options (args, nargin, nargout);)
+  else
+    print_usage ("fsolve_options");
+
+  return retval;
+}
+
 /*
  * NLPs.
  */
 tree_constant *
 builtin_fsqp (const tree_constant *args, int nargin, int nargout)
 {
   tree_constant *retval = NULL_TREE_CONST;
 
@@ -796,16 +824,30 @@ builtin_fsqp (const tree_constant *args,
 		 retval = fsqp (args, nargin, nargout);)
   else
     print_usage ("fsolve");
 #endif
 
   return retval;
 }
 
+tree_constant *
+builtin_fsqp_options (const tree_constant *args, int nargin, int nargout)
+{
+  tree_constant *retval = NULL_TREE_CONST;
+
+  if (nargin >= 3 && nargin <= 7 && nargout >= 1 && nargout <= 3)
+    DLD_BUILTIN (args, nargin, nargout, fsqp_options,
+		 retval = fsqp_options (args, nargin, nargout);)
+  else
+    print_usage ("fsqp_options");
+
+  return retval;
+}
+
 /*
  * tell current position of file
  */
 tree_constant *
 builtin_ftell (const tree_constant *args, int nargin, int nargout)
 {
   tree_constant *retval = NULL_TREE_CONST;
 
@@ -996,16 +1038,30 @@ builtin_lpsolve (const tree_constant *ar
     DLD_BUILTIN (args, nargin, nargout, lpsolve,
 		 retval = lpsolve (args, nargin, nargout);)
   else
     print_usage ("lp_solve");
 
   return retval;
 }
 
+tree_constant *
+builtin_lpsolve_options (const tree_constant *args, int nargin, int nargout)
+{
+  tree_constant *retval = NULL_TREE_CONST;
+
+  if (nargin >= 3 && nargin <= 7 && nargout >= 1 && nargout <= 3)
+    DLD_BUILTIN (args, nargin, nargout, lpsolve_options,
+		 retval = lpsolve_options (args, nargin, nargout);)
+  else
+    print_usage ("lpsolve_options");
+
+  return retval;
+}
+
 /*
  * ODEs.
  */
 tree_constant *
 builtin_lsode (const tree_constant *args, int nargin, int nargout)
 {
   tree_constant *retval = NULL_TREE_CONST;
 
@@ -1013,16 +1069,30 @@ builtin_lsode (const tree_constant *args
     DLD_BUILTIN (args, nargin, nargout, lsode,
 		 retval = lsode (args, nargin, nargout);)
   else
     print_usage ("lsode");
 
   return retval;
 }
 
+tree_constant *
+builtin_lsode_options (const tree_constant *args, int nargin, int nargout)
+{
+  tree_constant *retval = NULL_TREE_CONST;
+
+  if (nargin >= 3 && nargin <= 7 && nargout >= 1 && nargout <= 3)
+    DLD_BUILTIN (args, nargin, nargout, lsode_options,
+		 retval = lsode_options (args, nargin, nargout);)
+  else
+    print_usage ("lsode_options");
+
+  return retval;
+}
+
 /*
  * LU factorization.
  */
 tree_constant *
 builtin_lu (const tree_constant *args, int nargin, int nargout)
 {
   tree_constant *retval = NULL_TREE_CONST;
 
@@ -1094,16 +1164,30 @@ builtin_npsol (const tree_constant *args
 		 retval = npsol (args, nargin, nargout);)
   else
     print_usage ("npsol");
 #endif
 
   return retval;
 }
 
+tree_constant *
+builtin_npsol_options (const tree_constant *args, int nargin, int nargout)
+{
+  tree_constant *retval = NULL_TREE_CONST;
+
+  if (nargin >= 3 && nargin <= 7 && nargout >= 1 && nargout <= 3)
+    DLD_BUILTIN (args, nargin, nargout, npsol_options,
+		 retval = npsol_options (args, nargin, nargout);)
+  else
+    print_usage ("npsol_options");
+
+  return retval;
+}
+
 /*
  * A matrix of ones.
  */
 tree_constant *
 builtin_ones (const tree_constant *args, int nargin, int nargout)
 {
   tree_constant *retval = NULL_TREE_CONST;
 
@@ -1255,16 +1339,30 @@ builtin_qpsol (const tree_constant *args
 		 retval = qpsol (args, nargin, nargout);)
   else
     print_usage ("qpsol");
 #endif
 
   return retval;
 }
 
+tree_constant *
+builtin_qpsol_options (const tree_constant *args, int nargin, int nargout)
+{
+  tree_constant *retval = NULL_TREE_CONST;
+
+  if (nargin >= 3 && nargin <= 7 && nargout >= 1 && nargout <= 3)
+    DLD_BUILTIN (args, nargin, nargout, qpsol_options,
+		 retval = qpsol_options (args, nargin, nargout);)
+  else
+    print_usage ("qpsol_options");
+
+  return retval;
+}
+
 /*
  * QR factorization.
  */
 tree_constant *
 builtin_qr (const tree_constant *args, int nargin, int nargout)
 {
   tree_constant *retval = NULL_TREE_CONST;
 
@@ -1306,16 +1404,30 @@ builtin_quad (const tree_constant *args,
     DLD_BUILTIN (args, nargin, nargout, quad,
 		 retval = do_quad (args, nargin, nargout);)
   else
     print_usage ("quad");
 
   return retval;
 }
 
+tree_constant *
+builtin_quad_options (const tree_constant *args, int nargin, int nargout)
+{
+  tree_constant *retval = NULL_TREE_CONST;
+
+  if (nargin >= 3 && nargin <= 7 && nargout >= 1 && nargout <= 3)
+    DLD_BUILTIN (args, nargin, nargout, quad_options,
+		 retval = quad_options (args, nargin, nargout);)
+  else
+    print_usage ("quad_options");
+
+  return retval;
+}
+
 /*
  * I'm outta here.
  */
 tree_constant *
 builtin_quit (const tree_constant *args, int nargin, int nargout)
 {
   quitting_gracefully = 1;
   clean_up_and_exit (0);
@@ -1717,17 +1829,17 @@ builtin_va_start (const tree_constant *a
 /*
  * Copying information.
  */
 tree_constant *
 builtin_warranty (const tree_constant *args, int nargin, int nargout)
 {
   ostrstream output_buf;
   output_buf << "\n    Octave, version " << version_string
-	     << ".  Copyright (C) 1992, 1993, John W. Eaton\n"
+	     << ".  Copyright (C) 1992, 1993, 1994 John W. Eaton\n"
 	     << "\n\
     This program is free software; you can redistribute it and/or modify\n\
     it under the terms of the GNU General Public License as published by\n\
     the Free Software Foundation; either version 2 of the License, or\n\
     (at your option) any later version.\n\n\
     This program is distributed in the hope that it will be useful,\n\
     but WITHOUT ANY WARRANTY; without even the implied warranty of\n\
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\
diff --git a/src/g-builtins.h b/src/g-builtins.h
--- a/src/g-builtins.h
+++ b/src/g-builtins.h
@@ -41,16 +41,17 @@ extern tree_constant *builtin_balance (c
 extern tree_constant *builtin_chol (const tree_constant *, int, int);
 extern tree_constant *builtin_clc (const tree_constant *, int, int);
 extern tree_constant *builtin_clock (const tree_constant *, int, int);
 extern tree_constant *builtin_closeplot (const tree_constant *, int, int);
 extern tree_constant *builtin_colloc (const tree_constant *, int, int);
 extern tree_constant *builtin_cumprod (const tree_constant *, int, int);
 extern tree_constant *builtin_cumsum (const tree_constant *, int, int);
 extern tree_constant *builtin_dassl (const tree_constant *, int, int);
+extern tree_constant *builtin_dassl_options (const tree_constant *, int, int);
 extern tree_constant *builtin_date (const tree_constant *, int, int);
 extern tree_constant *builtin_det (const tree_constant *, int, int);
 extern tree_constant *builtin_diag (const tree_constant *, int, int);
 extern tree_constant *builtin_disp (tree_constant *, int, int);
 extern tree_constant *builtin_eig (const tree_constant *, int, int);
 extern tree_constant *builtin_error (tree_constant *, int, int);
 extern tree_constant *builtin_eval (const tree_constant *, int, int);
 extern tree_constant *builtin_exist (const tree_constant *, int, int);
@@ -65,44 +66,51 @@ extern tree_constant *builtin_find (cons
 extern tree_constant *builtin_flops (const tree_constant *, int, int);
 extern tree_constant *builtin_fopen (const tree_constant *, int, int);
 extern tree_constant *builtin_fprintf (const tree_constant *, int, int);
 extern tree_constant *builtin_frewind (const tree_constant *, int, int);
 extern tree_constant *builtin_freport (const tree_constant *, int, int);
 extern tree_constant *builtin_fscanf (const tree_constant *, int, int);
 extern tree_constant *builtin_fseek (const tree_constant *, int, int);
 extern tree_constant *builtin_fsolve (const tree_constant *, int, int);
+extern tree_constant *builtin_fsolve_options (const tree_constant *, int, int);
 extern tree_constant *builtin_fsqp (const tree_constant *, int, int);
+extern tree_constant *builtin_fsqp_options (const tree_constant *, int, int);
 extern tree_constant *builtin_ftell (const tree_constant *, int, int);
 extern tree_constant *builtin_getenv (const tree_constant *, int, int);
 extern tree_constant *builtin_givens (const tree_constant *, int, int);
 extern tree_constant *builtin_hess (const tree_constant *, int, int);
 extern tree_constant *builtin_input (const tree_constant *, int, int);
 extern tree_constant *builtin_ifft (const tree_constant *, int, int);
 extern tree_constant *builtin_inv (const tree_constant *, int, int);
 extern tree_constant *builtin_is_global (const tree_constant *, int, int);
 extern tree_constant *builtin_isstr (const tree_constant *, int, int);
 extern tree_constant *builtin_keyboard (const tree_constant *, int, int);
 extern tree_constant *builtin_logm (const tree_constant *, int, int);
 extern tree_constant *builtin_lpsolve (const tree_constant *, int, int);
+extern tree_constant *builtin_lpsolve_options (const tree_constant *, int, int);
 extern tree_constant *builtin_lsode (const tree_constant *, int, int);
+extern tree_constant *builtin_lsode_options (const tree_constant *, int, int);
 extern tree_constant *builtin_lu (const tree_constant *, int, int);
 extern tree_constant *builtin_max (const tree_constant *, int, int);
 extern tree_constant *builtin_min (const tree_constant *, int, int);
 extern tree_constant *builtin_npsol (const tree_constant *, int, int);
+extern tree_constant *builtin_npsol_options (const tree_constant *, int, int);
 extern tree_constant *builtin_ones (const tree_constant *, int, int);
 extern tree_constant *builtin_pause (const tree_constant *, int, int);
 extern tree_constant *builtin_purge_tmp_files (const tree_constant *,
 					       int, int);
 extern tree_constant *builtin_printf (const tree_constant *, int, int);
 extern tree_constant *builtin_prod (const tree_constant *, int, int);
 extern tree_constant *builtin_pwd (const tree_constant *, int, int);
 extern tree_constant *builtin_qpsol (const tree_constant *, int, int);
+extern tree_constant *builtin_qpsol_options (const tree_constant *, int, int);
 extern tree_constant *builtin_qr (const tree_constant *, int, int);
 extern tree_constant *builtin_quad (const tree_constant *, int, int);
+extern tree_constant *builtin_quad_options (const tree_constant *, int, int);
 extern tree_constant *builtin_quit (const tree_constant *, int, int);
 extern tree_constant *builtin_qzval (const tree_constant *, int, int);
 extern tree_constant *builtin_rand (const tree_constant *, int, int);
 extern tree_constant *builtin_replot (const tree_constant *, int, int);
 extern tree_constant *builtin_setstr (tree_constant *, int, int);
 extern tree_constant *builtin_scanf (const tree_constant *, int, int);
 extern tree_constant *builtin_schur (const tree_constant *, int, int);
 extern tree_constant *builtin_shell_command (const tree_constant *, int, int);
diff --git a/src/lpsolve.cc b/src/lpsolve.cc
--- a/src/lpsolve.cc
+++ b/src/lpsolve.cc
@@ -32,26 +32,42 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "f-lpsolve.h"
 
 #ifdef WITH_DLD
 tree_constant *
 builtin_lpsolve_2 (const tree_constant *args, int nargin, int nargout)
 {
   return lpsolve (args, nargin, nargout);
 }
+
+tree_constant *
+builtin_lpsolve_options_2 (const tree_constant *args, int nargin, int nargout) 
+{
+  return lpsolve_options (args, nargin, nargout);
+}
 #endif
 
 tree_constant *
 lpsolve (const tree_constant *args, int nargin, int nargout)
 {
 // Assumes that we have been given the correct number of arguments.
 
   tree_constant *retval = NULL_TREE_CONST;
   error ("lpsolve: not implemented yet");
   return retval;
 }
 
+tree_constant *
+lpsolve_options (const tree_constant *args, int nargin, int nargout)
+{
+// Assumes that we have been given the correct number of arguments.
+
+  tree_constant *retval = NULL_TREE_CONST;
+  error ("lpsolve_options: not implemented yet");
+  return retval;
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/src/lsode.cc b/src/lsode.cc
--- a/src/lsode.cc
+++ b/src/lsode.cc
@@ -38,16 +38,22 @@ Software Foundation, 675 Mass Ave, Cambr
 static tree *lsode_fcn;
 
 #ifdef WITH_DLD
 tree_constant *
 builtin_lsode_2 (const tree_constant *args, int nargin, int nargout)
 {
   return lsode (args, nargin, nargout);
 }
+
+tree_constant *
+builtin_lsode_options_2 (const tree_constant *args, int nargin, int nargout)
+{
+  return lsode_options (args, nargin, nargout);
+}
 #endif
 
 ColumnVector
 lsode_user_function (const ColumnVector& x, double t)
 {
   ColumnVector retval;
 
   int nstates = x.capacity ();
@@ -139,14 +145,24 @@ lsode (const tree_constant *args, int na
   else
     output = ode.integrate (out_times);
 
   retval = new tree_constant [2];
   retval[0] = tree_constant (output);
   return retval;
 }
 
+tree_constant *
+lsode_options (const tree_constant *args, int nargin, int nargout)
+{
+// Assumes that we have been given the correct number of arguments.
+
+  tree_constant *retval = NULL_TREE_CONST;
+  error ("lsode_options: not implemented yet");
+  return retval;
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/src/npsol.cc b/src/npsol.cc
--- a/src/npsol.cc
+++ b/src/npsol.cc
@@ -41,16 +41,22 @@ static tree *npsol_objective;
 static tree *npsol_constraints;
 
 #ifdef WITH_DLD
 tree_constant *
 builtin_npsol_2 (const tree_constant *args, int nargin, int nargout)
 {
   return npsol (args, nargin, nargout);
 }
+
+tree_constant *
+builtin_npsol_options_2 (const tree_constant *args, int nargin, int nargout)
+{
+  return npsol_options (args, nargin, nargout);
+}
 #endif
 
 double
 npsol_objective_function (const ColumnVector& x)
 {
   int n = x.capacity ();
 
   tree_constant decision_vars;
@@ -475,16 +481,26 @@ Handle all of the following:
   if (nargout > 2)
     retval[2] = tree_constant ((double) inform);
   if (nargout > 3)
     retval[3] = tree_constant (lambda);
 
   return retval;
 }
 
+tree_constant *
+npsol_options (const tree_constant *args, int nargin, int nargout)
+{
+// Assumes that we have been given the correct number of arguments.
+
+  tree_constant *retval = NULL_TREE_CONST;
+  error ("npsol_options: not implemented yet");
+  return retval;
+}
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/src/qpsol.cc b/src/qpsol.cc
--- a/src/qpsol.cc
+++ b/src/qpsol.cc
@@ -44,16 +44,22 @@ extern int linear_constraints_ok (const 
 				  int warn);
 
 #ifdef WITH_DLD
 tree_constant *
 builtin_qpsol_2 (const tree_constant *args, int nargin, int nargout)
 {
   return qpsol (args, nargin, nargout);
 }
+
+tree_constant *
+builtin_qpsol_options_2 (const tree_constant *args, int nargin, int nargout)
+{
+  return qpsol_options (args, nargin, nargout);
+}
 #endif
 
 tree_constant *
 qpsol (const tree_constant *args, int nargin, int nargout)
 {
 /*
 
 Handle all of the following:
@@ -180,16 +186,26 @@ Handle all of the following:
   if (nargout > 2)
     retval[2] = tree_constant ((double) inform);
   if (nargout > 3)
     retval[3] = tree_constant (lambda);
 
   return retval;
 }
 
+tree_constant *
+qpsol_options (const tree_constant *args, int nargin, int nargout)
+{
+// Assumes that we have been given the correct number of arguments.
+
+  tree_constant *retval = NULL_TREE_CONST;
+  error ("qpsol_options: not implemented yet");
+  return retval;
+}
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/src/quad.cc b/src/quad.cc
--- a/src/quad.cc
+++ b/src/quad.cc
@@ -39,16 +39,22 @@ Software Foundation, 675 Mass Ave, Cambr
 static tree *quad_fcn;
 
 #ifdef WITH_DLD
 tree_constant *
 builtin_quad_2 (const tree_constant *args, int nargin, int nargout)
 {
   return do_quad (args, nargin, nargout);
 }
+
+tree_constant *
+builtin_quad_options_2 (const tree_constant *args, int nargin, int nargout)
+{
+  return quad_options (args, nargin, nargout);
+}
 #endif
 
 double
 quad_user_function (double x)
 {
   double retval = 0.0;
 
 //  tree_constant name = tree_constant (quad_fcn->name ());
@@ -184,15 +190,24 @@ do_quad (const tree_constant *args, int 
   retval[0] = tree_constant (val);
   retval[1] = tree_constant ((double) ier);
   retval[2] = tree_constant ((double) nfun);
   retval[3] = tree_constant (abserr);
 
   return retval;
 }
 
+tree_constant *
+quad_options (const tree_constant *args, int nargin, int nargout)
+{
+// Assumes that we have been given the correct number of arguments.
+
+  tree_constant *retval = NULL_TREE_CONST;
+  error ("quad_options: not implemented yet");
+  return retval;
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
-
