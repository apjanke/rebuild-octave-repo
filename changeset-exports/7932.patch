# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1216232438 14400
#      Wed Jul 16 14:20:38 2008 -0400
# Node ID d75586531aac80b389b9022888a7080e986685a7
# Parent  de26beacb20feb4ea4c4e740eb7ecd0709a38862
style fixes

diff --git a/src/DLD-FUNCTIONS/__magick_read__.cc b/src/DLD-FUNCTIONS/__magick_read__.cc
--- a/src/DLD-FUNCTIONS/__magick_read__.cc
+++ b/src/DLD-FUNCTIONS/__magick_read__.cc
@@ -1,12 +1,12 @@
 /*
 
 Copyright (C) 2002 Andy Adler
-              2008 Thomas L. Scofield
+Copyright (C) 2008 Thomas L. Scofield
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 3 of the License, or (at your
 option) any later version.
 
@@ -74,18 +74,18 @@ read_indexed_images (std::vector<Magick:
 	    imvec[frameidx(frame)].getConstPixels (0, 0, columns, rows);
 	    const Magick::IndexPacket *pix
 	      = imvec[frameidx(frame)].getConstIndexes ();
 	    i = 0;
 	    for (int y = 0; y < rows; y++)
 	      for (int x = 0; x < columns; x++)
 		im(y,x,frame) = static_cast<octave_uint8> (pix[i++]);
 	  }
-      im.chop_trailing_singletons ();
-      output(0) = octave_value (im);
+	im.chop_trailing_singletons ();
+	output(0) = octave_value (im);
       }
       break;
 
     case 16:
       {
 	uint16NDArray im = uint16NDArray (dim_vector(rows, columns, nframes));
 	for (int frame = 0; frame < nframes; frame++)
 	  {
@@ -176,17 +176,17 @@ read_images (const std::vector<Magick::I
   Array<int> idx (dim_vector (4));
 
   Magick::ImageType type = imvec[0].type ();
 
   switch (type)
     {
     case Magick::BilevelType:
     case Magick::GrayscaleType:
-      im = T(dim_vector (rows, columns, nframes));
+      im = T (dim_vector (rows, columns, nframes));
       for (int frame = 0; frame < nframes; frame++)
         {
 	  const Magick::PixelPacket *pix
 	    = imvec[frameidx(frame)].getConstPixels (0, 0, columns, rows);
 
 	  int i = 0;
 
 	  for (int y = 0; y < rows; y++)
@@ -221,17 +221,17 @@ read_images (const std::vector<Magick::I
 	    }
         }
       break;
 
     case Magick::PaletteType:
     case Magick::TrueColorType:
       idim(2) = 3;
       im = T (idim);
-      for (int frame=0; frame < nframes; frame++)
+      for (int frame = 0; frame < nframes; frame++)
         {
 	  const Magick::PixelPacket *pix
 	    = imvec[frameidx(frame)].getConstPixels (0, 0, columns, rows);
 
 	  int i = 0;
 	  idx(3) = frame;
 
 	  for (int y = 0; y < rows; y++)
@@ -252,17 +252,17 @@ read_images (const std::vector<Magick::I
         }
       break;
 
     case Magick::PaletteMatteType:
     case Magick::TrueColorMatteType:
     case Magick::ColorSeparationType:
       idim(2) = 4;
       im = T (idim);
-      for (int frame=0; frame < nframes; frame++)
+      for (int frame = 0; frame < nframes; frame++)
         {
 	  const Magick::PixelPacket *pix
 	    = imvec[frameidx(frame)].getConstPixels (0, 0, columns, rows);
 
 	  int i = 0;
 	  idx(3) = frame;
 
 	  for (int y = 0; y < rows; y++)
