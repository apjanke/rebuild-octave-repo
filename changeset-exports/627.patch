# HG changeset patch
# User jwe
# Date 777302672 0
#      Fri Aug 19 13:24:32 1994 +0000
# Node ID 739d16c30481e7022ce33bec66bfe0e916b8b1e3
# Parent  96be9eae023fab9afe678075e9e52ba7d39b58e3
[project @ 1994-08-19 13:23:14 by jwe]

diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -266,17 +266,17 @@ get_dimensions (const tree_constant& a, 
     }
   else
     {
       nr = tmpa.rows ();
       nc = tmpa.columns ();
 
       if ((nr == 1 && nc == 2) || (nr == 2 && nc == 1))
 	{
-	  ColumnVector v = tmpa.to_vector ();
+	  ColumnVector v = tmpa.vector_value ();
 
 	  nr = NINT (v.elem (0));
 	  nc = NINT (v.elem (1));
 	}
       else
 	warning ("%s (A): use %s (size (A)) instead", warn_for, warn_for);
     }
 
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -174,17 +174,17 @@ EXPON	([DdEe][+-]?{D}+)
 			      TOK_RETURN (TEXT);
 			    }
 
 <TEXT_FCN>\'{QSTR}*[\n\'] {
 			  if (yytext[yyleng-1] == '\n')
 			    {
 			      error ("unterminated string constant");
 			      current_input_column = 1;
-			      jump_to_top_level ();
+			      return LEXICAL_ERROR;
 			    }
 			  else
 			    {
 			      static char *tok = 0;
 			      delete [] tok;
 			      int off1 = doing_set ? 0 : 1;
 			      int off2 = doing_set ? 0 : 2;
 			      tok = strsave (&yytext[off1]);
@@ -197,17 +197,17 @@ EXPON	([DdEe][+-]?{D}+)
 			  return TEXT;
 			}
 
 <TEXT_FCN>\"{DQSTR}*[\n\"] {
 			  if (yytext[yyleng-1] == '\n')
 			    {
 			      error ("unterminated string constant");
 			      current_input_column = 1;
-			      jump_to_top_level ();
+			      return LEXICAL_ERROR;
 			    }
 			  else
 			    {
 			      static char *tok = 0;
 			      delete [] tok;
 			      int off1 = doing_set ? 0 : 1;
 			      int off2 = doing_set ? 0 : 2;
 			      tok = strsave (&yytext[off1]);
@@ -227,17 +227,17 @@ EXPON	([DdEe][+-]?{D}+)
 			    BEGIN MATRIX;
 			  else
 			    BEGIN 0;
 
 			  if (yytext[yyleng-1] == '\n')
 			    {
 			      error ("unterminated string constant");
 			      current_input_column = 1;
-			      jump_to_top_level ();
+			      return LEXICAL_ERROR;
 			    }
 			  else
 			    {
 			      static char *tok = 0;
 			      delete [] tok;
 			      tok = strsave (yytext);
 			      tok[yyleng-1] = '\0';
 			      do_string_escapes (tok);
@@ -257,17 +257,17 @@ EXPON	([DdEe][+-]?{D}+)
 			    BEGIN MATRIX;
 			  else
 			    BEGIN 0;
 
 			  if (yytext[yyleng-1] == '\n')
 			    {
 			      error ("unterminated string constant");
 			      current_input_column = 1;
-			      jump_to_top_level ();
+			      return LEXICAL_ERROR;
 			    }
 			  else
 			    {
 			      static char *tok = 0;
 			      delete [] tok;
 			      tok = strsave (yytext);
 			      tok[yyleng-1] = '\0';
 			      do_string_escapes (tok);
@@ -1038,17 +1038,17 @@ is_keyword (char *s)
 
 	  if ((reading_fcn_file || reading_script_file)
 	      && curr_fcn_file_name)
 	    error ("defining new function near line %d of file `%s.m'",
 		   input_line_number, curr_fcn_file_name);
 	  else
 	    error ("defining new function near line %d", input_line_number);
 
-	  jump_to_top_level ();  // XXX FIXME XXX
+	  return LEXICAL_ERROR;
 	}
       else
 	{
 	  tmp_local_sym_tab = new symbol_table ();
 	  curr_sym_tab = tmp_local_sym_tab;
 	  defining_func = 1;
 	  promptflag--;
 	  beginning_of_function = 1;
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -211,16 +211,17 @@ static tree_expression *make_unary_op (i
 %token <tok_val> NAME SCREW
 %token <tok_val> END
 %token <tok_val> PLOT
 %token <tok_val> TEXT STYLE
 %token <tok_val> FOR WHILE IF ELSEIF ELSE BREAK CONTINUE FUNC_RET
 %token <tok_val> GLOBAL
 
 // Other tokens.
+%token LEXICAL_ERROR
 %token FCN SCREW_TWO
 %token ELLIPSIS
 %token END_OF_INPUT
 %token USING TITLE WITH COLON OPEN_BRACE CLOSE_BRACE
 
 // Nonterminals we construct.
 %type <tree_type> input
 %type <tree_expression_type> expression simple_expr simple_expr1
@@ -235,17 +236,18 @@ static tree_expression *make_unary_op (i
 %type <tree_command_type> command func_def
 %type <tree_if_command_type> if_command
 %type <tree_if_clause_type> elseif_clause else_clause
 %type <tree_if_command_list_type> if_cmd_list1 if_cmd_list
 %type <tree_global_type> global_decl2
 %type <tree_global_init_list_type> global_decl1
 %type <tree_global_command_type> global_decl
 %type <tree_statement_type> statement
-%type <tree_statement_list_type> simple_list simple_list1 list list1 opt_list
+%type <tree_statement_list_type> simple_list simple_list1 list list1
+%type <tree_statement_list_type> opt_list input1
 %type <tree_plot_command_type> plot_command 
 %type <subplot_type> plot_command2 plot_options
 %type <subplot_list_type> plot_command1
 %type <plot_limits_type> ranges
 %type <plot_range_type> ranges1 
 %type <subplot_using_type> using using1 
 %type <subplot_style_type> style
 
@@ -268,58 +270,46 @@ static tree_expression *make_unary_op (i
 // Where to start.
 %start input
 
 /*
  * Grammar rules.
  */
 %%
 
-input		: '\n'
+input		: input1
 		  {
-		    global_command = 0;
+		    global_command = $1;
 		    promptflag = 1;
 		    YYACCEPT;
 		  }
 		| END_OF_INPUT
 		  {
 		    global_command = 0;
 		    promptflag = 1;
 		    YYABORT;
 		  }
+		| simple_list parse_error
+		  { ABORT_PARSE; }
+		| parse_error
+		  { ABORT_PARSE; }
+		;
+
+input1		: '\n'
+		  { $$ = 0; }
 		| simple_list
-		  {
-		    global_command = $1;
-		    promptflag = 1;
-		    YYACCEPT;
-		  }
+		  { $$ = $1; }
 		| simple_list '\n'
-		  {
-		    global_command = $1;
-		    promptflag = 1;
-		    YYACCEPT;
-		  }
+		  { $$ = $1; }
 		| simple_list END_OF_INPUT
-		  {
-		    global_command = $1;
-		    promptflag = 1;
-		    YYACCEPT;
-		  }
+		  { $$ = $1; }
+		;
+
+parse_error	: LEXICAL_ERROR
 		| error
-		  { ABORT_PARSE; }
-		| error '\n'
-		  { ABORT_PARSE; }
-		| error END_OF_INPUT
-		  { ABORT_PARSE; }
-		| simple_list error
-		  { ABORT_PARSE; }
-		| simple_list error '\n'
-		  { ABORT_PARSE; }
-		| simple_list error END_OF_INPUT
-		  { ABORT_PARSE; }
 		;
 
 simple_list	: semi_comma
 		  { $$ = 0; }
 		| comma_semi
 		  { $$ = 0; }
 		| simple_list1
 		  { $$ = $1; }
