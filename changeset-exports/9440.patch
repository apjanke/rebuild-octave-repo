# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1248083470 -7200
#      Mon Jul 20 11:51:10 2009 +0200
# Node ID 357cff83985db5175236cded3f978a35a9993c99
# Parent  0a696f8aa43445847d3e51fbd45b9c6c4240c13e
fix signed integer shift

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2009-07-20  Jaroslav Hajek  <highegg@gmail.com>
+
+	* bitfcns.cc (DO_UBITSHIFT): Avoid overflow.
+	(DO_SBITSHIFT): Fix mask calculation. 
+
 2009-07-17  Benjamin Lindner <lindnerb@users.sourceforge.net>
 
 	* DLD-FUNCTIONS/__magick_read__.cc (F__magick_read__):
 	Determine correct number of bits required when reading images.
 
 2009-07-16  John W. Eaton  <jwe@octave.org>
 
 	* graphics.cc (get_array_limits): Require min_pos value to be
diff --git a/src/bitfcns.cc b/src/bitfcns.cc
--- a/src/bitfcns.cc
+++ b/src/bitfcns.cc
@@ -376,35 +376,36 @@ bitshift (float a, int n, int64_t mask)
 	error ("bitshift: expecting second argument to be integer"); \
     }
 
 #define DO_UBITSHIFT(T, N) \
   do \
     { \
       int bits_in_type = octave_ ## T :: nbits (); \
       T ## NDArray m = m_arg.T ## _array_value (); \
-	octave_ ## T mask = ~0ULL; \
+	octave_ ## T mask = octave_ ## T::max (); \
       if ((N) < bits_in_type) \
 	mask = bitshift (mask, (N) - bits_in_type); \
       else if ((N) < 1) \
 	mask = 0; \
       DO_BITSHIFT (T); \
     } \
   while (0)
 
 #define DO_SBITSHIFT(T, N) \
   do \
     { \
       int bits_in_type = octave_ ## T :: nbits (); \
       T ## NDArray m = m_arg.T ## _array_value (); \
-	octave_ ## T mask = -1; \
+	octave_ ## T mask = octave_ ## T::max (); \
       if ((N) < bits_in_type) \
 	mask = bitshift (mask, (N) - bits_in_type); \
       else if ((N) < 1) \
 	mask = 0; \
+      mask = mask | octave_ ## T :: min (); /* FIXME: 2's complement only? */ \
       DO_BITSHIFT (T); \
     } \
   while (0)
 
 DEFUN (bitshift, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} bitshift (@var{a}, @var{k})\n\
 @deftypefnx {Built-in Function} {} bitshift (@var{a}, @var{k}, @var{n})\n\
