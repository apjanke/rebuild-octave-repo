# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1448395409 18000
#      Tue Nov 24 15:03:29 2015 -0500
# Node ID ee2743bd07a89bba58884ac1031ba6d961fb0c9a
# Parent  69aeef6736dfefe219bc34049a8701bb60e741e3
eliminate various compiler warnings

diff --git a/libinterp/corefcn/file-io.cc b/libinterp/corefcn/file-io.cc
--- a/libinterp/corefcn/file-io.cc
+++ b/libinterp/corefcn/file-io.cc
@@ -1332,17 +1332,17 @@ do_fread (octave_stream& os, const octav
       oct_data_conv::string_to_data_type (prec, block_size,
                                           input_type, output_type);
     }
   catch (const octave_execution_exception&)
     {
       error ("fread: invalid PRECISION specified");
     }
 
-  int skip;
+  int skip = 0;
 
   try
     {
       skip = skip_arg.int_value (true);
     }
   catch (const octave_execution_exception&)
     {
       error ("fread: SKIP must be an integer");
@@ -1590,17 +1590,17 @@ do_fwrite (octave_stream& os, const octa
     {
       oct_data_conv::string_to_data_type (prec, block_size, output_type);
     }
   catch (const octave_execution_exception&)
     {
       error ("fwrite: invalid PRECISION specified");
     }
 
-  int skip;
+  int skip = 0;
 
   try
     {
       skip = skip_arg.int_value (true);
     }
   catch (const octave_execution_exception&)
     {
       error ("fwrite: SKIP must be an integer");
diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -56,42 +56,45 @@ along with Octave; see the file COPYING.
 //
 //   1 : not a real scalar
 //   2 : value is NaN
 //   3 : value is not an integer
 
 static int
 convert_to_valid_int (const octave_value& tc, int& conv_err)
 {
+  conv_err = 0;
+
   int retval = 0;
 
-  conv_err = 0;
-
-  double dval;
+  double dval = 0.0;
 
   try
     {
       dval = tc.double_value ();
     }
   catch (const octave_execution_exception&)
     {
       conv_err = 1;
     }
 
-  if (! lo_ieee_isnan (dval))
+  if (! conv_err)
     {
-      int ival = NINT (dval);
-
-      if (ival == dval)
-        retval = ival;
+      if (! lo_ieee_isnan (dval))
+        {
+          int ival = NINT (dval);
+
+          if (ival == dval)
+            retval = ival;
+          else
+            conv_err = 3;
+        }
       else
-        conv_err = 3;
+        conv_err = 2;
     }
-  else
-    conv_err = 2;
 
   return retval;
 }
 
 static int
 get_size (double d, const std::string& who)
 {
   int retval = -1;
diff --git a/libinterp/octave-value/ov-base.cc b/libinterp/octave-value/ov-base.cc
--- a/libinterp/octave-value/ov-base.cc
+++ b/libinterp/octave-value/ov-base.cc
@@ -453,17 +453,17 @@ octave_base_value::print_info (std::ostr
 }
 
 #define INT_CONV_METHOD(T, F) \
   T \
   octave_base_value::F ## _value (bool require_int, bool frc_str_conv) const \
   { \
     T retval = 0; \
  \
-    double d; \
+    double d = 0.0; \
  \
     try \
       { \
         d = double_value (frc_str_conv); \
       } \
     catch (const octave_execution_exception&) \
       { \
         gripe_wrong_type_arg ("octave_base_value::" #F "_value ()", type_name ()); \
@@ -491,17 +491,17 @@ INT_CONV_METHOD (long int, long)
 INT_CONV_METHOD (unsigned long int, ulong)
 
 INT_CONV_METHOD (int64_t, int64)
 INT_CONV_METHOD (uint64_t, uint64)
 
 int
 octave_base_value::nint_value (bool frc_str_conv) const
 {
-  double d;
+  double d = 0.0;
 
   try
     {
       d = double_value (frc_str_conv);
     }
   catch (const octave_execution_exception&)
     {
       gripe_wrong_type_arg ("octave_base_value::nint_value ()", type_name ());
diff --git a/libinterp/octave-value/ov-class.cc b/libinterp/octave-value/ov-class.cc
--- a/libinterp/octave-value/ov-class.cc
+++ b/libinterp/octave-value/ov-class.cc
@@ -256,22 +256,16 @@ gripe_invalid_index_for_assignment (void
 }
 
 static void
 gripe_invalid_index_type (const std::string& nm, char t)
 {
   error ("%s cannot be indexed with %c", nm.c_str (), t);
 }
 
-static void
-gripe_failed_assignment (void)
-{
-  error ("assignment to class element failed");
-}
-
 Cell
 octave_class::dotref (const octave_value_list& idx)
 {
   Cell retval;
 
   assert (idx.length () == 1);
 
   std::string method_class = get_current_method_class ();
diff --git a/libinterp/octave-value/ov-struct.cc b/libinterp/octave-value/ov-struct.cc
--- a/libinterp/octave-value/ov-struct.cc
+++ b/libinterp/octave-value/ov-struct.cc
@@ -86,43 +86,29 @@ octave_struct::dotref (const octave_valu
     retval = (numel () == 0) ? Cell (dim_vector (1, 1)) : Cell (dims ());
   else
     error_with_id ("Octave:invalid-indexing",
                    "structure has no member '%s'", nm.c_str ());
 
   return retval;
 }
 
-#if 0
-static void
-gripe_invalid_index1 (void)
-{
-  error ("invalid index for structure array");
-}
-#endif
-
 static void
 gripe_invalid_index_for_assignment (void)
 {
   error ("invalid index for structure array assignment");
 }
 
 static void
 gripe_invalid_index_type (const std::string& nm, char t)
 {
   error ("%s cannot be indexed with %c", nm.c_str (), t);
 }
 
 static void
-gripe_failed_assignment (void)
-{
-  error ("assignment to structure element failed");
-}
-
-static void
 maybe_warn_invalid_field_name (const std::string& key, const char *who)
 {
   if (! valid_identifier (key))
     {
       if (who)
         warning_with_id ("Octave:language-extension",
                          "%s: invalid structure field name '%s'",
                          who, key.c_str ());
diff --git a/libinterp/octave.cc b/libinterp/octave.cc
--- a/libinterp/octave.cc
+++ b/libinterp/octave.cc
@@ -882,17 +882,17 @@ octave_execute_interpreter (void)
   int last_arg_idx = optind;
   int remaining_args = octave_cmdline_argc - last_arg_idx;
 
   if (remaining_args > 0)
     {
       // If we are running an executable script (#! /bin/octave) then
       // we should only see the args passed to the script.
 
-      int exit_status = 0;
+      exit_status = 0;
 
       try
         {
           intern_argv (remaining_args, octave_cmdline_argv+last_arg_idx);
 
           execute_command_line_file (octave_cmdline_argv[last_arg_idx]);
         }
       catch (const octave_execution_exception&)
