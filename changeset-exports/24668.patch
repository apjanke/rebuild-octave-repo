# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1517485010 18000
#      Thu Feb 01 06:36:50 2018 -0500
# Node ID d4dd741b2794c443b19885457cf0ba2199b7fdae
# Parent  56f889d66b7c8c23bbad2a341061dac74744d98d
new octave_value functions for formatting output

* ov.h, ov.cc, ov-base.h, ov-base.cc, and numeric/matrix-like objects:
(get_edit_display_format): New function.
(edit_display): Pass float_display_format as argument.

* pr-output.h, pr-output.cc: New variants of the octave_print_internal
functions that accept display formats.  Expose functions for getting
display formats.

* variable-editor-model.cc: Maintain display format for model.

diff --git a/libgui/src/variable-editor-model.cc b/libgui/src/variable-editor-model.cc
--- a/libgui/src/variable-editor-model.cc
+++ b/libgui/src/variable-editor-model.cc
@@ -34,16 +34,17 @@ along with Octave; see the file COPYING.
 #include <QString>
 #include <QVector>
 
 #include "octave-qt-link.h"
 #include "variable-editor-model.h"
 
 #include "ov.h"
 #include "parse.h"
+#include "pr-flt-fmt.h"
 #include "utils.h"
 #include "variables.h"
 
 // Pimpl/Dpointer for variable_editor_model.
 
 static QString
 make_label (const std::string& name, const octave_value& val)
 {
@@ -119,90 +120,101 @@ get_rows_and_columns (const octave_value
     }
   else
     {
       rows = val.rows ();
       cols = val.columns ();
     }
 }
 
+static float_display_format
+get_edit_display_format (const octave_value& val)
+{
+  // FIXME: make this limit configurable.
+
+  return (val.numel () > 250000
+          ? float_display_format () : val.get_edit_display_format ());
+}
+
 struct variable_editor_model::impl
 {
   struct cell
   {
     cell (void) : m_defined (false) { }
 
-    cell (const octave_value& val, int r, int c)
+    cell (const float_display_format& fmt, const octave_value& val,
+          int r, int c)
       : m_defined (true), m_data ("no display"), m_status_tip ("status"),
         m_tool_tip ("tip"), m_requires_sub_editor (false),
         m_editor_type (sub_none)
     {
       if (val.iscell ())
         {
           Cell cval = val.cell_value ();
 
           octave_value ov = cval(r,c);
 
-          init_data_and_sub_editor (val, cval(r,c), r, c);
+          init_data_and_sub_editor (fmt, val, cval(r,c), r, c);
         }
       else if (val.isstruct ())
         {
           if (val.numel () == 1)
             {
               // Scalar struct.  Rows are fields, single column for
               // values.
 
               octave_scalar_map m = val.scalar_map_value ();
 
-              init_data_and_sub_editor (val, m.contents (r), r, c);
+              init_data_and_sub_editor (fmt, val, m.contents (r), r, c);
             }
           else if (val.rows () == 1 || val.columns () == 1)
             {
               // Vector struct.  Columns are fields, rows are values.
 
               octave_map m = val.map_value ();
 
               Cell cval = m.contents (c);
 
-              init_data_and_sub_editor (val, cval(r), r, c);
+              init_data_and_sub_editor (fmt, val, cval(r), r, c);
             }
           else
             {
               // 2-d struct array.  Rows and columns index individual
               // scalar structs.
 
               octave_map m = val.map_value ();
 
-              init_data_and_sub_editor (val, m(r,c), r, c);
+              init_data_and_sub_editor (fmt, val, m(r,c), r, c);
             }
         }
       else
-        m_data = QString::fromStdString (val.edit_display (r, c));
+        m_data = QString::fromStdString (val.edit_display (fmt, r, c));
     }
 
     cell (const QString& d, const QString& s, const QString& t,
           bool rse, sub_editor_types edtype)
       : m_defined (true), m_data (d), m_status_tip (s), m_tool_tip (t),
         m_requires_sub_editor (rse), m_editor_type (edtype)
     { }
 
-    void init_data_and_sub_editor (const octave_value& val,
+    void init_data_and_sub_editor (const float_display_format& fmt,
+                                   const octave_value& val,
                                    const octave_value& elt,
                                    int r, int c)
     {
       if ((elt.numel () == 1 && (elt.isnumeric () || elt.islogical ()))
           || (elt.is_string () && (elt.rows () == 1 || elt.isempty ())))
         {
           m_requires_sub_editor = false;
-          m_data = QString::fromStdString (elt.edit_display (0, 0));
+          m_data = QString::fromStdString (elt.edit_display (fmt, 0, 0));
         }
       else
         {
           m_requires_sub_editor = true;
-          m_data = QString::fromStdString (val.edit_display (r, c));
+          m_data = QString::fromStdString (val.edit_display (fmt, r, c));
         }
     }
 
     bool m_defined;
 
     QVariant m_data;
 
     QVariant m_status_tip;
@@ -218,16 +230,17 @@ struct variable_editor_model::impl
     // FIXME: Other variables needed?
   };
 
   impl (void) = delete;
 
   impl (const QString& name, const octave_value& val, QLabel *label)
     : m_name (name.toStdString ()), m_value (val),
       m_rows (0), m_cols (0), m_table (), m_label (label),
+      m_display_fmt (get_edit_display_format (m_value)),
       m_validity (true), m_validtext (make_label (m_name, m_value))
   {
     m_label->setText (m_validtext);
   }
 
   impl (const impl&) = delete;
 
   impl& operator = (const impl&) = delete;
@@ -379,17 +392,17 @@ struct variable_editor_model::impl
     if (is_defined (idx))
       return;
 
     if (idx.isValid ())
       {
         int r = idx.row ();
         int c = idx.column ();
 
-        cell edit_cell (m_value, r, c);
+        cell edit_cell (m_display_fmt, m_value, r, c);
 
         set (r, c, edit_cell);
       }
   }
 
   octave_value value_at (int r, int c) const
   {
     if (m_value.iscell ())
@@ -483,16 +496,18 @@ struct variable_editor_model::impl
 
     m_table.clear ();
 
     int r = 0;
     int c = 0;
 
     m_value = val;
 
+    m_display_fmt = get_edit_display_format (m_value);
+
     if (m_value.is_defined ())
       {
         m_validity = true;
 
         get_rows_and_columns (m_value, r, c);
       }
 
     m_rows = r;
@@ -543,16 +558,18 @@ struct variable_editor_model::impl
   // Using QVector limits the size to int.
   int m_rows;
   int m_cols;
 
   QVector<cell> m_table;
 
   QLabel *m_label;
 
+  float_display_format m_display_fmt;
+
   bool m_validity;
 
   QString m_validtext;
 };
 
 variable_editor_model::variable_editor_model (const QString& expr,
                                               const octave_value& val,
                                               QLabel *label,
diff --git a/libinterp/corefcn/pr-output.cc b/libinterp/corefcn/pr-output.cc
--- a/libinterp/corefcn/pr-output.cc
+++ b/libinterp/corefcn/pr-output.cc
@@ -1318,17 +1318,17 @@ union equiv
       stmp[6] = (ctmp & 0x40) ? '1' : '0';      \
       stmp[7] = (ctmp & 0x80) ? '1' : '0';      \
       stmp[8] = '\0';                           \
       os << stmp;                               \
     }                                           \
   while (0)
 
 static void
-pr_any_float (const float_format& fmt, std::ostream& os, double d, int fw = 0)
+pr_any_float (std::ostream& os, const float_format& fmt, double d, int fw = 0)
 {
   // Unless explicitly asked for, always print in big-endian format
   // for hex and bit formats.
   //
   //   {bit,hex}_format == 1: print big-endian
   //   {bit,hex}_format == 2: print native
 
   if (hex_format)
@@ -1426,64 +1426,85 @@ pr_any_float (const float_format& fmt, s
     }
   else if (print_eng)
     os << pr_engineering_float (fmt, d);
   else
     os << pr_formatted_float (fmt, d);
 }
 
 static inline void
-pr_float (std::ostream& os, double d, int fw = 0, double scale = 1.0)
+pr_float (std::ostream& os, const float_display_format& fmt, double d,
+          int fw = 0, double scale = 1.0)
 {
   if (Vfixed_point_format && ! print_g && scale != 1.0)
     d /= scale;
 
-  pr_any_float (curr_float_display_fmt.real_format (), os, d, fw);
+  pr_any_float (os, fmt.real_format (), d, fw);
+}
+
+static inline void
+pr_float (std::ostream& os, double d, int fw = 0, double scale = 1.0)
+{
+  pr_float (os, curr_float_display_fmt, d, fw, scale);
+}
+
+static inline void
+pr_imag_float (std::ostream& os, const float_display_format& fmt,
+               double d, int fw = 0)
+{
+  pr_any_float (os, fmt.imag_format (), d, fw);
 }
 
 static inline void
 pr_imag_float (std::ostream& os, double d, int fw = 0)
 {
-  pr_any_float (curr_float_display_fmt.imag_format (), os, d, fw);
+  pr_imag_float (os, curr_float_display_fmt, d, fw);
 }
 
 static void
-pr_complex (std::ostream& os, const Complex& c, int r_fw = 0,
-            int i_fw = 0, double scale = 1.0)
+pr_complex (std::ostream& os, const float_display_format& fmt,
+            const Complex& c, int r_fw = 0, int i_fw = 0, double scale = 1.0)
 {
   Complex tmp
     = (Vfixed_point_format && ! print_g && scale != 1.0) ? c / scale : c;
 
   double r = tmp.real ();
 
-  pr_float (os, r, r_fw);
+  pr_float (os, fmt, r, r_fw);
 
   if (! bank_format)
     {
       double i = tmp.imag ();
       if (! (hex_format || bit_format) && lo_ieee_signbit (i))
         {
           os << " - ";
           i = -i;
-          pr_imag_float (os, i, i_fw);
+          pr_imag_float (os, fmt, i, i_fw);
         }
       else
         {
           if (hex_format || bit_format)
             os << "  ";
           else
             os << " + ";
 
-          pr_imag_float (os, i, i_fw);
+          pr_imag_float (os, fmt, i, i_fw);
         }
       os << 'i';
     }
 }
 
 static void
+pr_complex (std::ostream& os, const Complex& c, int r_fw = 0, int i_fw = 0,
+            double scale = 1.0)
+{
+  pr_complex (os, curr_float_display_fmt, c, r_fw, i_fw, scale);
+}
+
+static void
 print_empty_matrix (std::ostream& os, octave_idx_type nr, octave_idx_type nc,
                     bool pr_as_read_syntax)
 {
   assert (nr == 0 || nc == 0);
 
   if (pr_as_read_syntax)
     {
       if (nr == 0 && nc == 0)
@@ -1574,37 +1595,62 @@ pr_plus_format (std::ostream& os, const 
   if (val > T (0))
     os << plus_format_chars[0];
   else if (val < T (0))
     os << plus_format_chars[1];
   else
     os << plus_format_chars[2];
 }
 
+template <>
+float_display_format
+make_format (const NDArray& nda)
+{
+  int fw = 0;
+  double scale = 0;
+  return make_format (Matrix (nda), fw, scale);
+}
+
+template <>
+float_display_format
+make_format (const ComplexNDArray& nda)
+{
+  int r_fw = 0;
+  int i_fw = 0;
+  double scale = 0;
+  return make_format (ComplexMatrix (nda), r_fw, i_fw, scale);
+}
+
 void
 octave_print_internal (std::ostream&, char, bool)
 {
   panic_impossible ();
 }
 
 void
 octave_print_internal (std::ostream& os, double d,
                        bool pr_as_read_syntax)
 {
+  octave_print_internal (os, curr_float_display_fmt, d, pr_as_read_syntax);
+}
+
+void
+octave_print_internal (std::ostream& os, const float_display_format& fmt,
+                       double d, bool pr_as_read_syntax)
+{
   if (pr_as_read_syntax)
     os << d;
   else if (plus_format)
     pr_plus_format (os, d);
   else
     {
-      set_format (d);
       if (free_format)
         os << d;
       else
-        pr_float (os, d);
+        pr_float (os, fmt, d);
     }
 }
 
 void
 octave_print_internal (std::ostream& os, const Matrix& m,
                        bool pr_as_read_syntax, int extra_indent)
 {
   octave_idx_type nr = m.rows ();
@@ -2000,27 +2046,33 @@ pr_plus_format<> (std::ostream& os, cons
   else
     os << 'c';
 }
 
 void
 octave_print_internal (std::ostream& os, const Complex& c,
                        bool pr_as_read_syntax)
 {
+  octave_print_internal (os, curr_float_display_fmt, c, pr_as_read_syntax);
+}
+
+extern void
+octave_print_internal (std::ostream& os, const float_display_format& fmt,
+                       const Complex& c, bool pr_as_read_syntax)
+{
   if (pr_as_read_syntax)
     os << c;
   else if (plus_format)
     pr_plus_format (os, c);
   else
     {
-      set_format (c);
       if (free_format)
         os << c;
       else
-        pr_complex (os, c);
+        pr_complex (os, fmt, c);
     }
 }
 
 void
 octave_print_internal (std::ostream& os, const ComplexMatrix& cm,
                        bool pr_as_read_syntax, int extra_indent)
 {
   octave_idx_type nr = cm.rows ();
diff --git a/libinterp/corefcn/pr-output.h b/libinterp/corefcn/pr-output.h
--- a/libinterp/corefcn/pr-output.h
+++ b/libinterp/corefcn/pr-output.h
@@ -51,32 +51,59 @@ class boolNDArray;
 class charMatrix;
 class charNDArray;
 class PermMatrix;
 class Cell;
 class octave_value;
 
 template <typename T> class intNDArray;
 
+// FIXME: templates plus specializations might help here.
+
 extern OCTINTERP_API void
 octave_print_internal (std::ostream& os, bool d,
                        bool pr_as_read_syntax = false);
 
+inline void
+octave_print_internal (std::ostream& os, const float_display_format&,
+                       bool d, bool pr_as_read_syntax = false)
+{
+  octave_print_internal (os, d, pr_as_read_syntax);
+}
+
 extern OCTINTERP_API void
 octave_print_internal (std::ostream& os, char c,
                        bool pr_as_read_syntax = false);
 
+inline void
+octave_print_internal (std::ostream& os, const float_display_format&,
+                       char c, bool pr_as_read_syntax = false)
+{
+  octave_print_internal (os, c, pr_as_read_syntax);
+}
+
 extern OCTINTERP_API void
 octave_print_internal (std::ostream& os, double d,
                        bool pr_as_read_syntax = false);
 
+extern void
+octave_print_internal (std::ostream& os, const float_display_format& fmt,
+                       double d, bool pr_as_read_syntax = false);
+
 extern OCTINTERP_API void
 octave_print_internal (std::ostream& os, float d,
                        bool pr_as_read_syntax = false);
 
+inline void
+octave_print_internal (std::ostream& os, const float_display_format&,
+                       float d, bool pr_as_read_syntax = false)
+{
+  octave_print_internal (os, d, pr_as_read_syntax);
+}
+
 extern OCTINTERP_API void
 octave_print_internal (std::ostream& os, const Matrix& m,
                        bool pr_as_read_syntax = false,
                        int extra_indent = 0);
 
 extern OCTINTERP_API void
 octave_print_internal (std::ostream& os, const DiagMatrix& m,
                        bool pr_as_read_syntax = false,
@@ -101,20 +128,31 @@ extern OCTINTERP_API void
 octave_print_internal (std::ostream& os, const FloatNDArray& nda,
                        bool pr_as_read_syntax = false,
                        int extra_indent = 0);
 
 extern OCTINTERP_API void
 octave_print_internal (std::ostream& os, const Complex& c,
                        bool pr_as_read_syntax = false);
 
+extern void
+octave_print_internal (std::ostream& os, const float_display_format& fmt,
+                       const Complex& c, bool pr_as_read_syntax = false);
+
 extern OCTINTERP_API void
 octave_print_internal (std::ostream& os, const FloatComplex& c,
                        bool pr_as_read_syntax = false);
 
+inline void
+octave_print_internal (std::ostream& os, const float_display_format&,
+                       const FloatComplex& c, bool pr_as_read_syntax = false)
+{
+  octave_print_internal (os, c, pr_as_read_syntax);
+}
+
 extern OCTINTERP_API void
 octave_print_internal (std::ostream& os, const ComplexMatrix& cm,
                        bool pr_as_read_syntax = false,
                        int extra_indent = 0);
 
 extern OCTINTERP_API void
 octave_print_internal (std::ostream& os, const ComplexDiagMatrix& cm,
                        bool pr_as_read_syntax = false,
@@ -221,50 +259,123 @@ extern OCTINTERP_API void
 octave_print_internal (std::ostream& os, const intNDArray<octave_uint64>& sa,
                        bool pr_as_read_syntax = false,
                        int extra_indent = 0);
 
 extern OCTINTERP_API void
 octave_print_internal (std::ostream& os, const octave_int<int8_t>& sa,
                        bool pr_as_read_syntax = false);
 
+inline void
+octave_print_internal (std::ostream& os, const float_display_format&,
+                       const octave_int<int8_t>& sa,
+                       bool pr_as_read_syntax = false)
+{
+  octave_print_internal (os, sa, pr_as_read_syntax);
+}
+
 extern OCTINTERP_API void
 octave_print_internal (std::ostream& os, const octave_int<uint8_t>& sa,
                        bool pr_as_read_syntax = false);
 
+inline void
+octave_print_internal (std::ostream& os, const float_display_format&,
+                       const octave_int<uint8_t>& sa,
+                       bool pr_as_read_syntax = false)
+{
+  octave_print_internal (os, sa, pr_as_read_syntax);
+}
+
 extern OCTINTERP_API void
 octave_print_internal (std::ostream& os, const octave_int<int16_t>& sa,
                        bool pr_as_read_syntax = false);
 
+inline void
+octave_print_internal (std::ostream& os, const float_display_format&,
+                       const octave_int<int16_t>& sa,
+                       bool pr_as_read_syntax = false)
+{
+  octave_print_internal (os, sa, pr_as_read_syntax);
+}
+
 extern OCTINTERP_API void
 octave_print_internal (std::ostream& os, const octave_int<uint16_t>& sa,
                        bool pr_as_read_syntax = false);
 
+inline void
+octave_print_internal (std::ostream& os, const float_display_format&,
+                       const octave_int<uint16_t>& sa,
+                       bool pr_as_read_syntax = false)
+{
+  octave_print_internal (os, sa, pr_as_read_syntax);
+}
+
 extern OCTINTERP_API void
 octave_print_internal (std::ostream& os, const octave_int<int32_t>& sa,
                        bool pr_as_read_syntax = false);
 
+inline void
+octave_print_internal (std::ostream& os, const float_display_format&,
+                       const octave_int<int32_t>& sa,
+                       bool pr_as_read_syntax = false)
+{
+  octave_print_internal (os, sa, pr_as_read_syntax);
+}
+
 extern OCTINTERP_API void
 octave_print_internal (std::ostream& os, const octave_int<uint32_t>& sa,
                        bool pr_as_read_syntax = false);
 
+inline void
+octave_print_internal (std::ostream& os, const float_display_format&,
+                       const octave_int<uint32_t>& sa,
+                       bool pr_as_read_syntax = false)
+{
+  octave_print_internal (os, sa, pr_as_read_syntax);
+}
+
 extern OCTINTERP_API void
 octave_print_internal (std::ostream& os, const octave_int<int64_t>& sa,
                        bool pr_as_read_syntax = false);
 
+inline void
+octave_print_internal (std::ostream& os, const float_display_format&,
+                       const octave_int<int64_t>& sa,
+                       bool pr_as_read_syntax = false)
+{
+  octave_print_internal (os, sa, pr_as_read_syntax);
+}
+
 extern OCTINTERP_API void
 octave_print_internal (std::ostream& os, const octave_int<uint64_t>& sa,
                        bool pr_as_read_syntax = false);
 
+inline void
+octave_print_internal (std::ostream& os, const float_display_format&,
+                       const octave_int<uint64_t>& sa,
+                       bool pr_as_read_syntax = false)
+{
+  octave_print_internal (os, sa, pr_as_read_syntax);
+}
+
 extern OCTINTERP_API void
 octave_print_internal (std::ostream& os, const Cell& cell,
                        bool pr_as_read_syntax = false,
                        int extra_indent = 0,
                        bool pr_as_string = false);
 
+inline void
+octave_print_internal (std::ostream& os, const float_display_format&,
+                       const Cell& cell, bool pr_as_read_syntax = false,
+                       int extra_indent = 0, bool pr_as_string = false)
+{
+  octave_print_internal (os, cell, pr_as_read_syntax, extra_indent,
+                         pr_as_string);
+}
+
 extern OCTINTERP_API void
 octave_print_internal (std::ostream& os, const octave_value& ov,
                        bool pr_as_read_syntax = false);
 
 extern float_display_format
 make_format (double d, int& fw);
 
 extern float_display_format
@@ -274,16 +385,23 @@ extern float_display_format
 make_format (const Complex& c, int& r_fw, int& i_fw);
 
 extern float_display_format
 make_format (const ComplexMatrix& cm, int& r_fw, int& i_fw, double& scale);
 
 extern float_display_format
 make_format (const Range& r, int& fw, double& scale);
 
+template <typename MT>
+float_display_format
+make_format (const MT&)
+{
+  return float_display_format ();
+}
+
 class
 pr_engineering_float
 {
 public:
 
   const float_format m_ff;
 
   double m_val;
diff --git a/libinterp/octave-value/ov-base-diag.cc b/libinterp/octave-value/ov-base-diag.cc
--- a/libinterp/octave-value/ov-base-diag.cc
+++ b/libinterp/octave-value/ov-base-diag.cc
@@ -610,17 +610,18 @@ octave_base_diag<DMT, MT>::short_disp (s
         os << ']';
     }
   else
     os << "...";
 }
 
 template <typename DMT, typename MT>
 std::string
-octave_base_diag<DMT, MT>::edit_display (octave_idx_type i,
+octave_base_diag<DMT, MT>::edit_display (const float_display_format& fmt,
+                                         octave_idx_type i,
                                          octave_idx_type j) const
 {
   std::ostringstream buf;
   octave_print_internal (buf, matrix(i,j));
   return buf.str ();
 }
 
 template <typename DMT, typename MT>
diff --git a/libinterp/octave-value/ov-base-diag.h b/libinterp/octave-value/ov-base-diag.h
--- a/libinterp/octave-value/ov-base-diag.h
+++ b/libinterp/octave-value/ov-base-diag.h
@@ -211,17 +211,18 @@ public:
   bool print_as_scalar (void) const;
 
   void print (std::ostream& os, bool pr_as_read_syntax = false);
 
   void print_info (std::ostream& os, const std::string& prefix) const;
 
   void short_disp (std::ostream& os) const;
 
-  std::string edit_display (octave_idx_type i, octave_idx_type j) const;
+  std::string edit_display (const float_display_format& fmt,
+                            octave_idx_type i, octave_idx_type j) const;
 
   octave_value fast_elem_extract (octave_idx_type n) const;
 
 protected:
 
   DMT matrix;
 
   octave_value to_dense (void) const;
diff --git a/libinterp/octave-value/ov-base-mat.cc b/libinterp/octave-value/ov-base-mat.cc
--- a/libinterp/octave-value/ov-base-mat.cc
+++ b/libinterp/octave-value/ov-base-mat.cc
@@ -502,22 +502,30 @@ octave_base_matrix<MT>::short_disp (std:
       if (nel <= max_elts)
         os << ']';
     }
   else
     os << "...";
 }
 
 template <typename MT>
+float_display_format
+octave_base_matrix<MT>::get_edit_display_format (void) const
+{
+  return make_format (matrix);
+}
+
+template <typename MT>
 std::string
-octave_base_matrix<MT>::edit_display (octave_idx_type i,
+octave_base_matrix<MT>::edit_display (const float_display_format& fmt,
+                                      octave_idx_type i,
                                       octave_idx_type j) const
 {
   std::ostringstream buf;
-  octave_print_internal (buf, matrix(i,j));
+  octave_print_internal (buf, fmt, matrix(i,j));
   return buf.str ();
 }
 
 template <typename MT>
 octave_value
 octave_base_matrix<MT>::fast_elem_extract (octave_idx_type n) const
 {
   if (n < matrix.numel ())
diff --git a/libinterp/octave-value/ov-base-mat.h b/libinterp/octave-value/ov-base-mat.h
--- a/libinterp/octave-value/ov-base-mat.h
+++ b/libinterp/octave-value/ov-base-mat.h
@@ -158,17 +158,20 @@ public:
   bool print_as_scalar (void) const;
 
   void print (std::ostream& os, bool pr_as_read_syntax = false);
 
   void print_info (std::ostream& os, const std::string& prefix) const;
 
   void short_disp (std::ostream& os) const;
 
-  std::string edit_display (octave_idx_type i, octave_idx_type j) const;
+  float_display_format get_edit_display_format (void) const;
+
+  std::string edit_display (const float_display_format& fmt,
+                            octave_idx_type i, octave_idx_type j) const;
 
   MT& matrix_ref (void)
   {
     clear_cached_info ();
     return matrix;
   }
 
   const MT& matrix_ref (void) const
diff --git a/libinterp/octave-value/ov-base-scalar.cc b/libinterp/octave-value/ov-base-scalar.cc
--- a/libinterp/octave-value/ov-base-scalar.cc
+++ b/libinterp/octave-value/ov-base-scalar.cc
@@ -185,17 +185,18 @@ octave_base_scalar<ST>::short_disp (std:
   if (pos != std::string::npos)
     os << tmp.substr (pos);
   else if (! tmp.empty ())
     os << tmp[0];
 }
 
 template <typename ST>
 std::string
-octave_base_scalar<ST>::edit_display (octave_idx_type, octave_idx_type) const
+octave_base_scalar<ST>::edit_display (const float_display_format& fmt,
+                                      octave_idx_type, octave_idx_type) const
 {
   std::ostringstream buf;
   octave_print_internal (buf, scalar);
   return buf.str ();
 }
 
 template <typename ST>
 octave_value
diff --git a/libinterp/octave-value/ov-base-scalar.h b/libinterp/octave-value/ov-base-scalar.h
--- a/libinterp/octave-value/ov-base-scalar.h
+++ b/libinterp/octave-value/ov-base-scalar.h
@@ -133,17 +133,18 @@ public:
   void print (std::ostream& os, bool pr_as_read_syntax = false);
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   bool print_name_tag (std::ostream& os, const std::string& name) const;
 
   void short_disp (std::ostream& os) const;
 
-  std::string edit_display (octave_idx_type i, octave_idx_type j) const;
+  std::string edit_display (const float_display_format& fmt,
+                            octave_idx_type i, octave_idx_type j) const;
 
   // Unsafe.  This function exists to support the MEX interface.
   // You should not use it anywhere else.
   void * mex_get_data (void) const { return const_cast<ST *> (&scalar); }
 
   const ST& scalar_ref (void) const { return scalar; }
 
   ST& scalar_ref (void) { return scalar; }
diff --git a/libinterp/octave-value/ov-base.cc b/libinterp/octave-value/ov-base.cc
--- a/libinterp/octave-value/ov-base.cc
+++ b/libinterp/octave-value/ov-base.cc
@@ -50,16 +50,17 @@ along with Octave; see the file COPYING.
 #include "ov-cx-mat.h"
 #include "ov-fcn-handle.h"
 #include "ov-range.h"
 #include "ov-re-mat.h"
 #include "ov-scalar.h"
 #include "ov-str-mat.h"
 #include "ovl.h"
 #include "parse.h"
+#include "pr-flt-fmt.h"
 #include "pr-output.h"
 #include "utils.h"
 #include "variables.h"
 
 builtin_type_t btyp_mixed_numeric (builtin_type_t x, builtin_type_t y)
 {
   builtin_type_t retval = btyp_unknown;
 
@@ -437,16 +438,22 @@ octave_base_value::print_with_name (std:
   bool pad_after = print_name_tag (output_buf, name);
 
   print (output_buf);
 
   if (print_padding && pad_after && ! Vcompact_format)
     newline (output_buf);
 }
 
+float_display_format
+octave_base_value::get_edit_display_format (void) const
+{
+  return float_display_format ();
+}
+
 void
 octave_base_value::print_info (std::ostream& os,
                                const std::string& /* prefix */) const
 {
   os << "no info for type: " << type_name () << "\n";
 }
 
 #define INT_CONV_METHOD(T, F)                                           \
diff --git a/libinterp/octave-value/ov-base.h b/libinterp/octave-value/ov-base.h
--- a/libinterp/octave-value/ov-base.h
+++ b/libinterp/octave-value/ov-base.h
@@ -48,16 +48,17 @@ namespace octave
   // FIXME: This is not ideal, but it avoids including
   // interpreter-private.h here and bringing in a lot of unnecessary
   // symbols that require even more header files.
 
   extern type_info& __get_type_info__ (const std::string&);
 }
 
 class Cell;
+class float_display_format;
 class mxArray;
 class octave_map;
 class octave_scalar_map;
 class octave_value;
 class octave_value_list;
 class octave_classdef;
 class octave_function;
 class octave_user_function;
@@ -658,17 +659,20 @@ public:
   print_name_tag (std::ostream& os, const std::string& name) const;
 
   virtual void
   print_with_name (std::ostream& output_buf, const std::string& name,
                    bool print_padding = true);
 
   virtual void short_disp (std::ostream& os) const { os << "..."; }
 
-  virtual std::string edit_display (octave_idx_type, octave_idx_type) const
+  virtual float_display_format get_edit_display_format (void) const;
+
+  virtual std::string edit_display (const float_display_format&,
+                                    octave_idx_type, octave_idx_type) const
   { return "#VAL"; }
 
   virtual void print_info (std::ostream& os, const std::string& prefix) const;
 
   virtual bool save_ascii (std::ostream& os);
 
   virtual bool load_ascii (std::istream& is);
 
diff --git a/libinterp/octave-value/ov-cell.cc b/libinterp/octave-value/ov-cell.cc
--- a/libinterp/octave-value/ov-cell.cc
+++ b/libinterp/octave-value/ov-cell.cc
@@ -96,17 +96,18 @@ octave_base_matrix<Cell>::delete_element
   matrix.delete_elements (idx);
 }
 
 // FIXME: this list of specializations is becoming so long that we should
 // really ask whether octave_cell should inherit from octave_base_matrix at all.
 
 template <>
 std::string
-octave_base_matrix<Cell>::edit_display (octave_idx_type i,
+octave_base_matrix<Cell>::edit_display (const float_display_format& fmt,
+                                        octave_idx_type i,
                                         octave_idx_type j) const
 {
   octave_value val = matrix(i,j);
 
   std::string tname = val.type_name ();
   dim_vector dv = val.dims ();
   std::string dimstr = dv.str ();
   return "[" + dimstr + " " + tname + "]";
diff --git a/libinterp/octave-value/ov-perm.cc b/libinterp/octave-value/ov-perm.cc
--- a/libinterp/octave-value/ov-perm.cc
+++ b/libinterp/octave-value/ov-perm.cc
@@ -539,17 +539,18 @@ octave_perm_matrix::try_narrowing_conver
 
   if (matrix.numel () == 1)
     retval = new octave_scalar (matrix (0, 0));
 
   return retval;
 }
 
 std::string
-octave_perm_matrix::edit_display (octave_idx_type i, octave_idx_type j) const
+octave_perm_matrix::edit_display (const float_display_format& fmt,
+                                  octave_idx_type i, octave_idx_type j) const
 {
   // FIXME: maybe we should have octave_print_internal functions for
   // standard int types, not just octave_int<T> types.
 
   std::ostringstream buf;
   octave_print_internal (buf, octave_int<octave_idx_type> (matrix(i,j)));
   return buf.str ();
 }
diff --git a/libinterp/octave-value/ov-perm.h b/libinterp/octave-value/ov-perm.h
--- a/libinterp/octave-value/ov-perm.h
+++ b/libinterp/octave-value/ov-perm.h
@@ -227,17 +227,18 @@ public:
   bool print_as_scalar (void) const;
 
   void print (std::ostream& os, bool pr_as_read_syntax = false);
 
   void print_info (std::ostream& os, const std::string& prefix) const;
 
   void short_disp (std::ostream& os) const;
 
-  std::string edit_display (octave_idx_type i, octave_idx_type j) const;
+  std::string edit_display (const float_display_format& fmt,
+                            octave_idx_type i, octave_idx_type j) const;
 
   octave_value map (unary_mapper_t umap) const
   { return to_dense ().map (umap); }
 
   octave_value fast_elem_extract (octave_idx_type n) const;
 
 protected:
 
diff --git a/libinterp/octave-value/ov-re-mat.cc b/libinterp/octave-value/ov-re-mat.cc
--- a/libinterp/octave-value/ov-re-mat.cc
+++ b/libinterp/octave-value/ov-re-mat.cc
@@ -66,16 +66,17 @@ along with Octave; see the file COPYING.
 #include "ov-flt-re-mat.h"
 #include "ov-complex.h"
 #include "ov-cx-mat.h"
 #include "ov-re-sparse.h"
 #include "ov-re-diag.h"
 #include "ov-cx-diag.h"
 #include "ov-lazy-idx.h"
 #include "ov-perm.h"
+#include "pr-flt-fmt.h"
 #include "pr-output.h"
 #include "variables.h"
 
 #include "byte-swap.h"
 #include "ls-oct-text.h"
 #include "ls-utils.h"
 #include "ls-hdf5.h"
 
diff --git a/libinterp/octave-value/ov-str-mat.cc b/libinterp/octave-value/ov-str-mat.cc
--- a/libinterp/octave-value/ov-str-mat.cc
+++ b/libinterp/octave-value/ov-str-mat.cc
@@ -273,17 +273,18 @@ octave_char_matrix_str::short_disp (std:
       // FIXME: should this be configurable?
       size_t max_len = 100;
 
       os << (tmp.length () > max_len ? tmp.substr (0, 100) : tmp);
     }
 }
 
 std::string
-octave_char_matrix_str::edit_display (octave_idx_type i,
+octave_char_matrix_str::edit_display (const float_display_format& fmt,
+                                      octave_idx_type i,
                                       octave_idx_type) const
 {
   if (i == 0)
     {
       if (rows () == 1)
         {
           std::string retval = string_value ();
 
diff --git a/libinterp/octave-value/ov-str-mat.h b/libinterp/octave-value/ov-str-mat.h
--- a/libinterp/octave-value/ov-str-mat.h
+++ b/libinterp/octave-value/ov-str-mat.h
@@ -141,17 +141,18 @@ public:
   { return octave_value (matrix.sort (sidx, dim, mode)); }
 
   bool print_as_scalar (void) const { return (rows () <= 1); }
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   void short_disp (std::ostream& os) const;
 
-  std::string edit_display (octave_idx_type i, octave_idx_type j) const;
+  std::string edit_display (const float_display_format& fmt,
+                            octave_idx_type i, octave_idx_type j) const;
 
   bool save_ascii (std::ostream& os);
 
   bool load_ascii (std::istream& is);
 
   bool save_binary (std::ostream& os, bool& save_as_floats);
 
   bool load_binary (std::istream& is, bool swap,
diff --git a/libinterp/octave-value/ov-struct.cc b/libinterp/octave-value/ov-struct.cc
--- a/libinterp/octave-value/ov-struct.cc
+++ b/libinterp/octave-value/ov-struct.cc
@@ -652,17 +652,18 @@ octave_struct::print_name_tag (std::ostr
 
 static bool
 scalar (const dim_vector& dims)
 {
   return dims.ndims () == 2 && dims(0) == 1 && dims(1) == 1;
 }
 
 std::string
-octave_struct::edit_display (octave_idx_type r, octave_idx_type c) const
+octave_struct::edit_display (const float_display_format& fmt,
+                             octave_idx_type r, octave_idx_type c) const
 {
   octave_value val;
   if (map.rows () == 1 || map.columns () == 1)
     {
       // Vector struct.  Columns are fields, rows are values.
 
       Cell cval = map.contents (c);
 
@@ -1354,17 +1355,18 @@ octave_scalar_struct::print_name_tag (st
 
       retval = true;
     }
 
   return retval;
 }
 
 std::string
-octave_scalar_struct::edit_display (octave_idx_type r, octave_idx_type) const
+octave_scalar_struct::edit_display (const float_display_format& fmt,
+                                    octave_idx_type r, octave_idx_type) const
 {
   // Scalar struct.  Rows are fields, single column for values.
 
   octave_value val = map.contents (r);
 
   std::string tname = val.type_name ();
   dim_vector dv = val.dims ();
   std::string dimstr = dv.str ();
diff --git a/libinterp/octave-value/ov-struct.h b/libinterp/octave-value/ov-struct.h
--- a/libinterp/octave-value/ov-struct.h
+++ b/libinterp/octave-value/ov-struct.h
@@ -126,17 +126,18 @@ public:
   string_vector map_keys (void) const { return map.fieldnames (); }
 
   void print (std::ostream& os, bool pr_as_read_syntax = false);
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   bool print_name_tag (std::ostream& os, const std::string& name) const;
 
-  std::string edit_display (octave_idx_type i, octave_idx_type j) const;
+  std::string edit_display (const float_display_format& fmt,
+                            octave_idx_type i, octave_idx_type j) const;
 
   bool save_ascii (std::ostream& os);
 
   bool load_ascii (std::istream& is);
 
   bool save_binary (std::ostream& os, bool& save_as_floats);
 
   bool load_binary (std::istream& is, bool swap,
@@ -249,17 +250,18 @@ public:
   string_vector map_keys (void) const { return map.fieldnames (); }
 
   void print (std::ostream& os, bool pr_as_read_syntax = false);
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   bool print_name_tag (std::ostream& os, const std::string& name) const;
 
-  std::string edit_display (octave_idx_type i, octave_idx_type j) const;
+  std::string edit_display (const float_display_format& fmt,
+                            octave_idx_type i, octave_idx_type j) const;
 
   bool save_ascii (std::ostream& os);
 
   bool load_ascii (std::istream& is);
 
   bool save_binary (std::ostream& os, bool& save_as_floats);
 
   bool load_binary (std::istream& is, bool swap,
diff --git a/libinterp/octave-value/ov.cc b/libinterp/octave-value/ov.cc
--- a/libinterp/octave-value/ov.cc
+++ b/libinterp/octave-value/ov.cc
@@ -80,16 +80,17 @@ along with Octave; see the file COPYING.
 #include "ov-java.h"
 
 #include "defun.h"
 #include "error.h"
 #include "errwarn.h"
 #include "interpreter-private.h"
 #include "pager.h"
 #include "parse.h"
+#include "pr-flt-fmt.h"
 #include "pr-output.h"
 #include "symtab.h"
 #include "utils.h"
 #include "variables.h"
 
 // We are likely to have a lot of octave_value objects to allocate, so
 // make the grow_size large.
 
@@ -2127,16 +2128,22 @@ octave_value::make_storable_value (void)
       if (--rep->count == 0)
         delete rep;
       rep = rc;
     }
   else
     maybe_economize ();
 }
 
+float_display_format
+octave_value::get_edit_display_format (void) const
+{
+  return rep->get_edit_display_format ();
+}
+
 int
 octave_value::write (octave::stream& os, int block_size,
                      oct_data_conv::data_type output_type, int skip,
                      octave::mach_info::float_format flt_fmt) const
 {
   return rep->write (os, block_size, output_type, skip, flt_fmt);
 }
 
diff --git a/libinterp/octave-value/ov.h b/libinterp/octave-value/ov.h
--- a/libinterp/octave-value/ov.h
+++ b/libinterp/octave-value/ov.h
@@ -43,16 +43,17 @@ along with Octave; see the file COPYING.
 #include "str-vec.h"
 
 namespace octave
 {
   class type_info;
 }
 
 class Cell;
+class float_format;
 class mxArray;
 class octave_map;
 class octave_scalar_map;
 class octave_function;
 class octave_user_function;
 class octave_fcn_handle;
 class octave_fcn_inline;
 class octave_value_list;
@@ -1270,19 +1271,22 @@ public:
   bool print_name_tag (std::ostream& os, const std::string& name) const
   { return rep->print_name_tag (os, name); }
 
   void print_with_name (std::ostream& os, const std::string& name) const
   { rep->print_with_name (os, name, true); }
 
   void short_disp (std::ostream& os) const { rep->short_disp (os); }
 
-  std::string edit_display (octave_idx_type i, octave_idx_type j) const
+  float_display_format get_edit_display_format (void) const;
+
+  std::string edit_display (const float_display_format& fmt,
+                            octave_idx_type i, octave_idx_type j) const
   {
-    return rep->edit_display (i, j);
+    return rep->edit_display (fmt, i, j);
   }
 
   int type_id (void) const { return rep->type_id (); }
 
   std::string type_name (void) const { return rep->type_name (); }
 
   std::string class_name (void) const { return rep->class_name (); }
 
