# HG changeset patch
# User jwe
# Date 750792085 0
#      Sat Oct 16 17:21:25 1993 +0000
# Node ID 21b5993707285a1fddad5fe462a776545119efb7
# Parent  be50d501b2a77d603fbb28ec18298869cb770678
[project @ 1993-10-16 17:20:32 by jwe]

diff --git a/liboctave/ColVector.cc b/liboctave/ColVector.cc
--- a/liboctave/ColVector.cc
+++ b/liboctave/ColVector.cc
@@ -264,35 +264,35 @@ operator * (double s, const ColumnVector
 
 ColumnVector
 operator / (double s, const ColumnVector& a)
 {
   return ColumnVector (divide (s, a.data, a.len), a.len);
 }
 
 ComplexColumnVector
-ColumnVector::operator + (Complex s) const
+ColumnVector::operator + (const Complex& s) const
 {
   return ComplexColumnVector (add (data, len, s), len);
 }
 
 ComplexColumnVector
-ColumnVector::operator - (Complex s) const
+ColumnVector::operator - (const Complex& s) const
 {
   return ComplexColumnVector (subtract (data, len, s), len);
 }
 
 ComplexColumnVector
-ColumnVector::operator * (Complex s) const
+ColumnVector::operator * (const Complex& s) const
 {
   return ComplexColumnVector (multiply (data, len, s), len);
 }
 
 ComplexColumnVector
-ColumnVector::operator / (Complex s) const
+ColumnVector::operator / (const Complex& s) const
 {
   return ComplexColumnVector (divide (data, len, s), len);
 }
 
 // column vector by row vector -> matrix operations
 
 Matrix
 ColumnVector::operator * (const RowVector& a) const
@@ -540,17 +540,17 @@ ComplexColumnVector::ComplexColumnVector
     {
       data = new Complex [len];
       copy (data, len, val);
     }
   else
     data = (Complex *) NULL;
 }
 
-ComplexColumnVector::ComplexColumnVector (int n, Complex val)
+ComplexColumnVector::ComplexColumnVector (int n, const Complex& val)
 {
   if (n < 0)
     FAIL;
 
   len = n;
   if (n > 0)
     {
       data = new Complex [len];
@@ -586,17 +586,17 @@ ComplexColumnVector::ComplexColumnVector
 
 ComplexColumnVector::ComplexColumnVector (double a)
 {
   len = 1;
   data = new Complex [1];
   data[0] = a;
 }
 
-ComplexColumnVector::ComplexColumnVector (Complex a)
+ComplexColumnVector::ComplexColumnVector (const Complex& a)
 {
   len = 1;
   data = new Complex [1];
   data[0] = Complex (a);
 }
 
 ComplexColumnVector&
 ComplexColumnVector::operator = (const ColumnVector& a)
@@ -662,17 +662,17 @@ ComplexColumnVector::resize (int n, doub
   resize (n);
   for (int i = old_len; i < len; i++)
     data[i] = val;
 
   return *this;
 }
 
 ComplexColumnVector&
-ComplexColumnVector::resize (int n, Complex val)
+ComplexColumnVector::resize (int n, const Complex& val)
 {
   int old_len = len;
   resize (n);
   for (int i = old_len; i < len; i++)
     data[i] = val;
 
   return *this;
 }
@@ -723,17 +723,17 @@ ComplexColumnVector&
 ComplexColumnVector::fill (double val)
 {
   if (len > 0)
     copy (data, len, val);
   return *this;
 }
 
 ComplexColumnVector&
-ComplexColumnVector::fill (Complex val)
+ComplexColumnVector::fill (const Complex& val)
 {
   if (len > 0)
     copy (data, len, val);
   return *this;
 }
 
 ComplexColumnVector&
 ComplexColumnVector::fill (double val, int r1, int r2)
@@ -745,17 +745,17 @@ ComplexColumnVector::fill (double val, i
 
   for (int i = r1; i <= r2; i++)
     data[i] = val;
 
   return *this;
 }
 
 ComplexColumnVector&
-ComplexColumnVector::fill (Complex val, int r1, int r2)
+ComplexColumnVector::fill (const Complex& val, int r1, int r2)
 {
   if (r1 < 0 || r2 < 0 || r1 >= len || r2 >= len)
     FAIL;
 
   if (r1 > r2) { int tmp = r1; r1 = r2; r2 = tmp; }
 
   for (int i = r1; i <= r2; i++)
     data[i] = val;
@@ -861,35 +861,35 @@ ComplexColumnVector::operator * (double 
 
 ComplexColumnVector
 ComplexColumnVector::operator / (double s) const
 {
   return ComplexColumnVector (divide (data, len, s), len);
 }
 
 ComplexColumnVector
-ComplexColumnVector::operator + (Complex s) const
+ComplexColumnVector::operator + (const Complex& s) const
 {
   return ComplexColumnVector (add (data, len, s), len);
 }
 
 ComplexColumnVector
-ComplexColumnVector::operator - (Complex s) const
+ComplexColumnVector::operator - (const Complex& s) const
 {
   return ComplexColumnVector (subtract (data, len, s), len);
 }
 
 ComplexColumnVector
-ComplexColumnVector::operator * (Complex s) const
+ComplexColumnVector::operator * (const Complex& s) const
 {
   return ComplexColumnVector (multiply (data, len, s), len);
 }
 
 ComplexColumnVector
-ComplexColumnVector::operator / (Complex s) const
+ComplexColumnVector::operator / (const Complex& s) const
 {
   return ComplexColumnVector (divide (data, len, s), len);
 }
 
 // scalar by column vector -> column vector operations
 
 ComplexColumnVector
 operator + (double s, const ComplexColumnVector& a)
@@ -911,35 +911,35 @@ operator * (double s, const ComplexColum
 
 ComplexColumnVector
 operator / (double s, const ComplexColumnVector& a)
 {
   return ComplexColumnVector (divide (s, a.data, a.len), a.len);
 }
 
 ComplexColumnVector
-operator + (Complex s, const ComplexColumnVector& a)
+operator + (const Complex& s, const ComplexColumnVector& a)
 {
   return ComplexColumnVector (add (a.data, a.len, s), a.len);
 }
 
 ComplexColumnVector
-operator - (Complex s, const ComplexColumnVector& a)
+operator - (const Complex& s, const ComplexColumnVector& a)
 {
   return ComplexColumnVector (subtract (s, a.data, a.len), a.len);
 }
 
 ComplexColumnVector
-operator * (Complex s, const ComplexColumnVector& a)
+operator * (const Complex& s, const ComplexColumnVector& a)
 {
   return ComplexColumnVector (multiply (a.data, a.len, s), a.len);
 }
 
 ComplexColumnVector
-operator / (Complex s, const ComplexColumnVector& a)
+operator / (const Complex& s, const ComplexColumnVector& a)
 {
   return ComplexColumnVector (divide (s, a.data, a.len), a.len);
 }
 
 // column vector by row vector -> matrix operations
 
 ComplexMatrix
 ComplexColumnVector::operator * (const RowVector& a) const
diff --git a/liboctave/DiagMatrix.cc b/liboctave/DiagMatrix.cc
--- a/liboctave/DiagMatrix.cc
+++ b/liboctave/DiagMatrix.cc
@@ -429,24 +429,24 @@ DiagMatrix::operator + (double s) const
 Matrix
 DiagMatrix::operator - (double s) const
 {
   Matrix tmp (nr, nc, -s);
   return *this + tmp;
 }
 
 ComplexMatrix
-DiagMatrix::operator + (Complex s) const
+DiagMatrix::operator + (const Complex& s) const
 {
   ComplexMatrix tmp (nr, nc, s);
   return *this + tmp;
 }
 
 ComplexMatrix
-DiagMatrix::operator - (Complex s) const
+DiagMatrix::operator - (const Complex& s) const
 {
   ComplexMatrix tmp (nr, nc, -s);
   return *this + tmp;
 }
 
 // diagonal matrix by scalar -> diagonal matrix operations
 
 DiagMatrix
@@ -457,23 +457,23 @@ DiagMatrix::operator * (double s) const
 
 DiagMatrix
 DiagMatrix::operator / (double s) const
 {
   return DiagMatrix (divide (data, len, s), nr, nc);
 }
 
 ComplexDiagMatrix
-DiagMatrix::operator * (Complex s) const
+DiagMatrix::operator * (const Complex& s) const
 {
   return ComplexDiagMatrix (multiply (data, len, s), nr, nc);
 }
 
 ComplexDiagMatrix
-DiagMatrix::operator / (Complex s) const
+DiagMatrix::operator / (const Complex& s) const
 {
   return ComplexDiagMatrix (divide (data, len, s), nr, nc);
 }
 
 // scalar by diagonal matrix -> matrix operations
 
 Matrix
 operator + (double s, const DiagMatrix& a)
@@ -941,17 +941,17 @@ ComplexDiagMatrix::ComplexDiagMatrix (in
     {
       data = new Complex [len];
       copy (data, len, val);
     }
   else
     data = (Complex *) NULL;
 }
 
-ComplexDiagMatrix::ComplexDiagMatrix (int n, Complex val)
+ComplexDiagMatrix::ComplexDiagMatrix (int n, const Complex& val)
 {
   if (n < 0)
     FAIL;
 
   nr = n;
   nc = n;
   len = n;
   if (len > 0)
@@ -989,17 +989,17 @@ ComplexDiagMatrix::ComplexDiagMatrix (in
     {
       data = new Complex [len];
       copy (data, len, val);
     }
   else
     data = (Complex *) NULL;
 }
 
-ComplexDiagMatrix::ComplexDiagMatrix (int r, int c, Complex val)
+ComplexDiagMatrix::ComplexDiagMatrix (int r, int c, const Complex& val)
 {
   if (r < 0 || c < 0)
     FAIL;
 
   nr = r;
   nc = c;
   len = r < c ? r : c;
   if (len > 0)
@@ -1099,17 +1099,17 @@ ComplexDiagMatrix::ComplexDiagMatrix (do
 {
   nr = 1;
   nc = 1;
   len = 1;
   data = new Complex [1];
   data[0] = a;
 }
 
-ComplexDiagMatrix::ComplexDiagMatrix (Complex a)
+ComplexDiagMatrix::ComplexDiagMatrix (const Complex& a)
 {
   nr = 1;
   nc = 1;
   len = 1;
   data = new Complex [1];
   data[0] = Complex (a);
 }
 
@@ -1204,17 +1204,17 @@ ComplexDiagMatrix::resize (int r, int c,
   nc = c;
   len = new_len;
   data = new_data;
 
   return *this;
 }
 
 ComplexDiagMatrix&
-ComplexDiagMatrix::resize (int r, int c, Complex val)
+ComplexDiagMatrix::resize (int r, int c, const Complex& val)
 {
   if (r < 0 || c < 0)
     FAIL;
 
   int new_len = r < c ? r : c;
   Complex *new_data = (Complex *) NULL;
   if (new_len > 0)
     {
@@ -1265,17 +1265,17 @@ ComplexDiagMatrix::hermitian (void) cons
 ComplexDiagMatrix&
 ComplexDiagMatrix::fill (double val)
 {
   copy (data, len, val);
   return *this;
 }
 
 ComplexDiagMatrix&
-ComplexDiagMatrix::fill (Complex val)
+ComplexDiagMatrix::fill (const Complex& val)
 {
   copy (data, len, val);
   return *this;
 }
 
 ComplexDiagMatrix&
 ComplexDiagMatrix::fill (double val, int beg, int end)
 {
@@ -1283,17 +1283,17 @@ ComplexDiagMatrix::fill (double val, int
     FAIL;
 
   if (end > beg)
     copy (data+beg, beg-end, val);
   return *this;
 }
 
 ComplexDiagMatrix&
-ComplexDiagMatrix::fill (Complex val, int beg, int end)
+ComplexDiagMatrix::fill (const Complex& val, int beg, int end)
 {
   if (beg < 0 || end >= len || end < beg)
     FAIL;
 
   if (end > beg)
     copy (data+beg, beg-end, val);
   return *this;
 }
@@ -1531,24 +1531,24 @@ ComplexDiagMatrix::operator + (double s)
 ComplexMatrix
 ComplexDiagMatrix::operator - (double s) const
 {
   ComplexMatrix tmp (nr, nc, -s);
   return *this + tmp;
 }
 
 ComplexMatrix
-ComplexDiagMatrix::operator + (Complex s) const
+ComplexDiagMatrix::operator + (const Complex& s) const
 {
   ComplexMatrix tmp (nr, nc, s);
   return *this + tmp;
 }
 
 ComplexMatrix
-ComplexDiagMatrix::operator - (Complex s) const
+ComplexDiagMatrix::operator - (const Complex& s) const
 {
   ComplexMatrix tmp (nr, nc, -s);
   return *this + tmp;
 }
 
 // diagonal matrix by scalar -> diagonal matrix operations
 
 ComplexDiagMatrix
@@ -1559,23 +1559,23 @@ ComplexDiagMatrix::operator * (double s)
 
 ComplexDiagMatrix
 ComplexDiagMatrix::operator / (double s) const
 {
   return ComplexDiagMatrix (divide (data, len, s), nr, nc);
 }
 
 ComplexDiagMatrix
-ComplexDiagMatrix::operator * (Complex s) const
+ComplexDiagMatrix::operator * (const Complex& s) const
 {
   return ComplexDiagMatrix (multiply (data, len, s), nr, nc);
 }
 
 ComplexDiagMatrix
-ComplexDiagMatrix::operator / (Complex s) const
+ComplexDiagMatrix::operator / (const Complex& s) const
 {
   return ComplexDiagMatrix (divide (data, len, s), nr, nc);
 }
 
 // scalar by diagonal matrix -> matrix operations
 
 ComplexMatrix
 operator + (double s, const ComplexDiagMatrix& a)
@@ -1585,23 +1585,23 @@ operator + (double s, const ComplexDiagM
 
 ComplexMatrix
 operator - (double s, const ComplexDiagMatrix& a)
 {
   return -a + s;
 }
 
 ComplexMatrix
-operator + (Complex s, const ComplexDiagMatrix& a)
+operator + (const Complex& s, const ComplexDiagMatrix& a)
 {
   return a + s;
 }
 
 ComplexMatrix
-operator - (Complex s, const ComplexDiagMatrix& a)
+operator - (const Complex& s, const ComplexDiagMatrix& a)
 {
   return -a + s;
 }
 
 // scalar by diagonal matrix -> diagonal matrix operations
 
 ComplexDiagMatrix
 operator * (double s, const ComplexDiagMatrix& a)
@@ -1611,23 +1611,23 @@ operator * (double s, const ComplexDiagM
 
 ComplexDiagMatrix
  operator / (double s, const ComplexDiagMatrix& a)
 {
   return ComplexDiagMatrix (divide (s, a.data, a.len), a.nr, a.nc);
 }
 
 ComplexDiagMatrix
- operator * (Complex s, const ComplexDiagMatrix& a)
+ operator * (const Complex& s, const ComplexDiagMatrix& a)
 {
   return ComplexDiagMatrix (multiply (a.data, a.len, s), a.nr, a.nc);
 }
 
 ComplexDiagMatrix
-operator / (Complex s, const ComplexDiagMatrix& a)
+operator / (const Complex& s, const ComplexDiagMatrix& a)
 {
   return ComplexDiagMatrix (divide (s, a.data, a.len), a.nr, a.nc);
 }
 
 // diagonal matrix by column vector -> column vector operations
 
 ComplexColumnVector
 ComplexDiagMatrix::operator * (const ColumnVector& a) const
diff --git a/liboctave/Matrix.cc b/liboctave/Matrix.cc
--- a/liboctave/Matrix.cc
+++ b/liboctave/Matrix.cc
@@ -973,35 +973,35 @@ Matrix::operator * (double s) const
 
 Matrix
 Matrix::operator / (double s) const
 {
   return Matrix (divide (data, len, s), nr, nc);
 }
 
 ComplexMatrix
-Matrix::operator + (Complex s) const
+Matrix::operator + (const Complex& s) const
 {
   return ComplexMatrix (add (data, len, s), nr, nc);
 }
 
 ComplexMatrix
-Matrix::operator - (Complex s) const
+Matrix::operator - (const Complex& s) const
 {
   return ComplexMatrix (subtract (data, len, s), nr, nc);
 }
 
 ComplexMatrix
-Matrix::operator * (Complex s) const
+Matrix::operator * (const Complex& s) const
 {
   return ComplexMatrix (multiply (data, len, s), nr, nc);
 }
 
 ComplexMatrix
-Matrix::operator / (Complex s) const
+Matrix::operator / (const Complex& s) const
 {
   return ComplexMatrix (divide (data, len, s), nr, nc);
 }
 
 // scalar by matrix -> matrix operations
 
 Matrix
 operator + (double s, const Matrix& a)
@@ -1955,17 +1955,17 @@ ComplexMatrix::ComplexMatrix (int r, int
     {
       data = new Complex [len];
       copy (data, len, val);
     }
   else
     data = (Complex *) NULL;
 }
 
-ComplexMatrix::ComplexMatrix (int r, int c, Complex val)
+ComplexMatrix::ComplexMatrix (int r, int c, const Complex& val)
 {
   if (r < 0 || c < 0)
     FAIL;
 
   nr = r;
   nc = c;
   len = nr * nc;
   if (len > 0)
@@ -2041,17 +2041,17 @@ ComplexMatrix::ComplexMatrix (double a)
 {
   nr = 1;
   nc = 1;
   len = 1;
   data = new Complex [1];
   data[0] = a;
 }
 
-ComplexMatrix::ComplexMatrix (Complex a)
+ComplexMatrix::ComplexMatrix (const Complex& a)
 {
   nr = 1;
   nc = 1;
   len = 1;
   data = new Complex [1];
   data[0] = Complex (a);
 }
 
@@ -2151,17 +2151,17 @@ ComplexMatrix::resize (int r, int c, dou
   nc = c;
   len = new_len;
   data = new_data;
 
   return *this;
 }
 
 ComplexMatrix&
-ComplexMatrix::resize (int r, int c, Complex val)
+ComplexMatrix::resize (int r, int c, const Complex& val)
 {
   if (r < 0 || c < 0)
     FAIL;
 
   int new_len = r * c;
   Complex *new_data = (Complex *) NULL;
   if (new_len > 0)
     {
@@ -2308,17 +2308,17 @@ ComplexMatrix&
 ComplexMatrix::fill (double val)
 {
   if (nr > 0 && nc > 0)
     copy (data, len, val);
   return *this;
 }
 
 ComplexMatrix&
-ComplexMatrix::fill (Complex val)
+ComplexMatrix::fill (const Complex& val)
 {
   if (nr > 0 && nc > 0)
     copy (data, len, val);
   return *this;
 }
 
 ComplexMatrix&
 ComplexMatrix::fill (double val, int r1, int c1, int r2, int c2)
@@ -2333,17 +2333,17 @@ ComplexMatrix::fill (double val, int r1,
   for (int j = c1; j <= c2; j++)
     for (int i = r1; i <= r2; i++)
       elem (i, j) = val;
 
   return *this;
 }
 
 ComplexMatrix&
-ComplexMatrix::fill (Complex val, int r1, int c1, int r2, int c2)
+ComplexMatrix::fill (const Complex& val, int r1, int c1, int r2, int c2)
 {
   if (r1 < 0 || r2 < 0 || c1 < 0 || c2 < 0
       || r1 >= nr || r2 >= nr || c1 >= nc || c2 >= nc)
     FAIL;
 
   if (r1 > r2) { int tmp = r1; r1 = r2; r2 = tmp; }
   if (c1 > c2) { int tmp = c1; c1 = c2; c2 = tmp; }
 
@@ -3213,35 +3213,35 @@ ComplexMatrix::operator * (double s) con
 
 ComplexMatrix
 ComplexMatrix::operator / (double s) const
 {
   return ComplexMatrix (divide (data, len, s), nr, nc);
 }
 
 ComplexMatrix
-ComplexMatrix::operator + (Complex s) const
+ComplexMatrix::operator + (const Complex& s) const
 {
   return ComplexMatrix (add (data, len, s), nr, nc);
 }
 
 ComplexMatrix
-ComplexMatrix::operator - (Complex s) const
+ComplexMatrix::operator - (const Complex& s) const
 {
   return ComplexMatrix (subtract (data, len, s), nr, nc);
 }
 
 ComplexMatrix
-ComplexMatrix::operator * (Complex s) const
+ComplexMatrix::operator * (const Complex& s) const
 {
   return ComplexMatrix (multiply (data, len, s), nr, nc);
 }
 
 ComplexMatrix
-ComplexMatrix::operator / (Complex s) const
+ComplexMatrix::operator / (const Complex& s) const
 {
   return ComplexMatrix (divide (data, len, s), nr, nc);
 }
 
 // scalar by matrix -> matrix operations
 
 ComplexMatrix
 operator + (double s, const ComplexMatrix& a)
@@ -3263,35 +3263,35 @@ operator * (double s, const ComplexMatri
 
 ComplexMatrix
 operator / (double s, const ComplexMatrix& a)
 {
   return ComplexMatrix (divide (s, a.data, a.len), a.nr, a.nc);
 }
 
 ComplexMatrix
-operator + (Complex s, const ComplexMatrix& a)
+operator + (const Complex& s, const ComplexMatrix& a)
 {
   return ComplexMatrix (add (s, a.data, a.len), a.nr, a.nc);
 }
 
 ComplexMatrix
-operator - (Complex s, const ComplexMatrix& a)
+operator - (const Complex& s, const ComplexMatrix& a)
 {
   return ComplexMatrix (subtract (s, a.data, a.len), a.nr, a.nc);
 }
 
 ComplexMatrix
-operator * (Complex s, const ComplexMatrix& a)
+operator * (const Complex& s, const ComplexMatrix& a)
 {
   return ComplexMatrix (multiply (s, a.data, a.len), a.nr, a.nc);
 }
 
 ComplexMatrix
-operator / (Complex s, const ComplexMatrix& a)
+operator / (const Complex& s, const ComplexMatrix& a)
 {
   return ComplexMatrix (divide (s, a.data, a.len), a.nr, a.nc);
 }
 
 // matrix by column vector -> column vector operations
 
 ComplexColumnVector
 ComplexMatrix::operator * (const ColumnVector& a) const
diff --git a/liboctave/Matrix.h b/liboctave/Matrix.h
--- a/liboctave/Matrix.h
+++ b/liboctave/Matrix.h
@@ -424,20 +424,20 @@ public:
 
 // matrix by scalar -> matrix operations
 
   Matrix operator + (double s) const;
   Matrix operator - (double s) const;
   Matrix operator * (double s) const;
   Matrix operator / (double s) const;
 
-  ComplexMatrix operator + (Complex s) const;
-  ComplexMatrix operator - (Complex s) const;
-  ComplexMatrix operator * (Complex s) const;
-  ComplexMatrix operator / (Complex s) const;
+  ComplexMatrix operator + (const Complex& s) const;
+  ComplexMatrix operator - (const Complex& s) const;
+  ComplexMatrix operator * (const Complex& s) const;
+  ComplexMatrix operator / (const Complex& s) const;
 
 // scalar by matrix -> matrix operations
 
   friend Matrix operator + (double s, const Matrix& a);
   friend Matrix operator - (double s, const Matrix& a);
   friend Matrix operator * (double s, const Matrix& a);
   friend Matrix operator / (double s, const Matrix& a);
 
@@ -625,20 +625,20 @@ public:
 
 // column vector by scalar -> column vector operations
 
   ColumnVector operator + (double s) const;
   ColumnVector operator - (double s) const;
   ColumnVector operator * (double s) const;
   ColumnVector operator / (double s) const;
 
-  ComplexColumnVector operator + (Complex s) const;
-  ComplexColumnVector operator - (Complex s) const;
-  ComplexColumnVector operator * (Complex s) const;
-  ComplexColumnVector operator / (Complex s) const;
+  ComplexColumnVector operator + (const Complex& s) const;
+  ComplexColumnVector operator - (const Complex& s) const;
+  ComplexColumnVector operator * (const Complex& s) const;
+  ComplexColumnVector operator / (const Complex& s) const;
 
 // scalar by column vector -> column vector operations
 
   friend ColumnVector operator + (double s, const ColumnVector& a);
   friend ColumnVector operator - (double s, const ColumnVector& a);
   friend ColumnVector operator * (double s, const ColumnVector& a);
   friend ColumnVector operator / (double s, const ColumnVector& a);
 
@@ -786,20 +786,20 @@ public:
 
 // row vector by scalar -> row vector operations
 
   RowVector operator + (double s) const;
   RowVector operator - (double s) const;
   RowVector operator * (double s) const;
   RowVector operator / (double s) const;
 
-  ComplexRowVector operator + (Complex s) const;
-  ComplexRowVector operator - (Complex s) const;
-  ComplexRowVector operator * (Complex s) const;
-  ComplexRowVector operator / (Complex s) const;
+  ComplexRowVector operator + (const Complex& s) const;
+  ComplexRowVector operator - (const Complex& s) const;
+  ComplexRowVector operator * (const Complex& s) const;
+  ComplexRowVector operator / (const Complex& s) const;
 
 // scalar by row vector -> row vector operations
 
   friend RowVector operator + (double s, const RowVector& a);
   friend RowVector operator - (double s, const RowVector& a);
   friend RowVector operator * (double s, const RowVector& a);
   friend RowVector operator / (double s, const RowVector& a);
 
@@ -962,26 +962,26 @@ public:
   DiagMatrix inverse (int& info) const;
   DiagMatrix inverse (void) const;
 
 // diagonal matrix by scalar -> matrix operations
 
   Matrix operator + (double s) const;
   Matrix operator - (double s) const;
 
-  ComplexMatrix operator + (Complex s) const;
-  ComplexMatrix operator - (Complex s) const;
+  ComplexMatrix operator + (const Complex& s) const;
+  ComplexMatrix operator - (const Complex& s) const;
 
 // diagonal matrix by scalar -> diagonal matrix operations
 
   DiagMatrix operator * (double s) const;
   DiagMatrix operator / (double s) const;
 
-  ComplexDiagMatrix operator * (Complex s) const;
-  ComplexDiagMatrix operator / (Complex s) const;
+  ComplexDiagMatrix operator * (const Complex& s) const;
+  ComplexDiagMatrix operator / (const Complex& s) const;
 
 // scalar by diagonal matrix -> matrix operations
 
   friend Matrix operator + (double s, const DiagMatrix& a);
   friend Matrix operator - (double s, const DiagMatrix& a);
 
 // scalar by diagonal matrix -> diagonal matrix operations
 
@@ -1106,23 +1106,23 @@ friend class ComplexSVD;
 friend class ComplexSCHUR;
 friend class ComplexLU;
 friend class ComplexQR;
 
 public:
   ComplexMatrix (void);
   ComplexMatrix (int r, int c);
   ComplexMatrix (int r, int c, double val);
-  ComplexMatrix (int r, int c, Complex val);
+  ComplexMatrix (int r, int c, const Complex& val);
   ComplexMatrix (const Matrix& a);
   ComplexMatrix (const ComplexMatrix& a);
   ComplexMatrix (const DiagMatrix& a);
   ComplexMatrix (const ComplexDiagMatrix& a);
   ComplexMatrix (double a);
-  ComplexMatrix (Complex a);
+  ComplexMatrix (const Complex& a);
  ~ComplexMatrix (void);
 
   ComplexMatrix& operator = (const Matrix& a);
   ComplexMatrix& operator = (const ComplexMatrix& a);
 
   int rows (void) const;
   int cols (void) const;
   int columns (void) const;
@@ -1132,17 +1132,17 @@ public:
   Complex& operator () (int r, int c);
 
   Complex elem (int r, int c) const; // const access
   Complex checkelem (int r, int c) const;
   Complex operator () (int r, int c) const;
 
   ComplexMatrix& resize (int r, int c);
   ComplexMatrix& resize (int r, int c, double val);
-  ComplexMatrix& resize (int r, int c, Complex val);
+  ComplexMatrix& resize (int r, int c, const Complex& val);
 
   int operator == (const ComplexMatrix& a) const;
   int operator != (const ComplexMatrix& a) const;
 
 // destructive insert/delete/reorder operations
 
   ComplexMatrix& insert (const Matrix& a, int r, int c);
   ComplexMatrix& insert (const RowVector& a, int r, int c);
@@ -1150,19 +1150,19 @@ public:
   ComplexMatrix& insert (const DiagMatrix& a, int r, int c);
 
   ComplexMatrix& insert (const ComplexMatrix& a, int r, int c);
   ComplexMatrix& insert (const ComplexRowVector& a, int r, int c);
   ComplexMatrix& insert (const ComplexColumnVector& a, int r, int c);
   ComplexMatrix& insert (const ComplexDiagMatrix& a, int r, int c);
 
   ComplexMatrix& fill (double val);
-  ComplexMatrix& fill (Complex val);
+  ComplexMatrix& fill (const Complex& val);
   ComplexMatrix& fill (double val, int r1, int c1, int r2, int c2);
-  ComplexMatrix& fill (Complex val, int r1, int c1, int r2, int c2);
+  ComplexMatrix& fill (const Complex& val, int r1, int c1, int r2, int c2);
 
   ComplexMatrix append (const Matrix& a) const;
   ComplexMatrix append (const RowVector& a) const;
   ComplexMatrix append (const ColumnVector& a) const;
   ComplexMatrix append (const DiagMatrix& a) const;
 
   ComplexMatrix append (const ComplexMatrix& a) const;
   ComplexMatrix append (const ComplexRowVector& a) const;
@@ -1248,32 +1248,32 @@ public:
 
 // matrix by scalar -> matrix operations
 
   ComplexMatrix operator + (double s) const;
   ComplexMatrix operator - (double s) const;
   ComplexMatrix operator * (double s) const;
   ComplexMatrix operator / (double s) const;
 
-  ComplexMatrix operator + (Complex s) const;
-  ComplexMatrix operator - (Complex s) const;
-  ComplexMatrix operator * (Complex s) const;
-  ComplexMatrix operator / (Complex s) const;
+  ComplexMatrix operator + (const Complex& s) const;
+  ComplexMatrix operator - (const Complex& s) const;
+  ComplexMatrix operator * (const Complex& s) const;
+  ComplexMatrix operator / (const Complex& s) const;
 
 // scalar by matrix -> matrix operations
 
   friend ComplexMatrix operator + (double s, const ComplexMatrix& a);
   friend ComplexMatrix operator - (double s, const ComplexMatrix& a);
   friend ComplexMatrix operator * (double s, const ComplexMatrix& a);
   friend ComplexMatrix operator / (double s, const ComplexMatrix& a);
 
-  friend ComplexMatrix operator + (Complex s, const ComplexMatrix& a);
-  friend ComplexMatrix operator - (Complex s, const ComplexMatrix& a);
-  friend ComplexMatrix operator * (Complex s, const ComplexMatrix& a);
-  friend ComplexMatrix operator / (Complex s, const ComplexMatrix& a);
+  friend ComplexMatrix operator + (const Complex& s, const ComplexMatrix& a);
+  friend ComplexMatrix operator - (const Complex& s, const ComplexMatrix& a);
+  friend ComplexMatrix operator * (const Complex& s, const ComplexMatrix& a);
+  friend ComplexMatrix operator / (const Complex& s, const ComplexMatrix& a);
 
 // matrix by column vector -> column vector operations
 
   ComplexColumnVector operator * (const ColumnVector& a) const;
 
   ComplexColumnVector operator * (const ComplexColumnVector& a) const;
 
 // matrix by diagonal matrix -> matrix operations
@@ -1416,21 +1416,21 @@ friend class DiagMatrix;
 friend class ComplexMatrix;
 friend class ColumnVector;
 friend class ComplexDiagMatrix;
 
 public:
   ComplexColumnVector (void);
   ComplexColumnVector (int n);
   ComplexColumnVector (int n, double val);
-  ComplexColumnVector (int n, Complex val);
+  ComplexColumnVector (int n, const Complex& val);
   ComplexColumnVector (const ColumnVector& a);
   ComplexColumnVector (const ComplexColumnVector& a);
   ComplexColumnVector (double a);
-  ComplexColumnVector (Complex a);
+  ComplexColumnVector (const Complex& a);
  ~ComplexColumnVector (void);
 
   ComplexColumnVector& operator = (const ColumnVector& a);
   ComplexColumnVector& operator = (const ComplexColumnVector& a);
 
   int capacity (void) const;
   int length (void) const;
 
@@ -1439,30 +1439,30 @@ public:
   Complex& operator () (int n);
 
   Complex elem (int n) const; // const access
   Complex checkelem (int n) const;
   Complex operator () (int n) const;
 
   ComplexColumnVector& resize (int n);
   ComplexColumnVector& resize (int n, double val);
-  ComplexColumnVector& resize (int n, Complex val);
+  ComplexColumnVector& resize (int n, const Complex& val);
 
   int operator == (const ComplexColumnVector& a) const;
   int operator != (const ComplexColumnVector& a) const;
 
 // destructive insert/delete/reorder operations
 
   ComplexColumnVector& insert (const ColumnVector& a, int r);
   ComplexColumnVector& insert (const ComplexColumnVector& a, int r);
 
   ComplexColumnVector& fill (double val);
-  ComplexColumnVector& fill (Complex val);
+  ComplexColumnVector& fill (const Complex& val);
   ComplexColumnVector& fill (double val, int r1, int r2);
-  ComplexColumnVector& fill (Complex val, int r1, int r2);
+  ComplexColumnVector& fill (const Complex& val, int r1, int r2);
 
   ComplexColumnVector stack (const ColumnVector& a) const;
   ComplexColumnVector stack (const ComplexColumnVector& a) const;
 
   ComplexRowVector hermitian (void) const;  // complex conjugate transpose.
   ComplexRowVector transpose (void) const;
 
   friend ColumnVector real (const ComplexColumnVector& a);
@@ -1475,39 +1475,39 @@ public:
 
 // column vector by scalar -> column vector operations
 
   ComplexColumnVector operator + (double s) const;
   ComplexColumnVector operator - (double s) const;
   ComplexColumnVector operator * (double s) const;
   ComplexColumnVector operator / (double s) const;
 
-  ComplexColumnVector operator + (Complex s) const;
-  ComplexColumnVector operator - (Complex s) const;
-  ComplexColumnVector operator * (Complex s) const;
-  ComplexColumnVector operator / (Complex s) const;
+  ComplexColumnVector operator + (const Complex& s) const;
+  ComplexColumnVector operator - (const Complex& s) const;
+  ComplexColumnVector operator * (const Complex& s) const;
+  ComplexColumnVector operator / (const Complex& s) const;
 
 // scalar by column vector -> column vector operations
 
   friend ComplexColumnVector operator + (double s,
 					 const ComplexColumnVector& a); 
   friend ComplexColumnVector operator - (double s,
 					 const ComplexColumnVector& a);
   friend ComplexColumnVector operator * (double s,
 					 const ComplexColumnVector& a);
   friend ComplexColumnVector operator / (double s,
 					 const ComplexColumnVector& a);
 
-  friend ComplexColumnVector operator + (Complex s,
+  friend ComplexColumnVector operator + (const Complex& s,
 					 const ComplexColumnVector& a);
-  friend ComplexColumnVector operator - (Complex s,
+  friend ComplexColumnVector operator - (const Complex& s,
 					 const ComplexColumnVector& a);
-  friend ComplexColumnVector operator * (Complex s,
+  friend ComplexColumnVector operator * (const Complex& s,
 					 const ComplexColumnVector& a);
-  friend ComplexColumnVector operator / (Complex s,
+  friend ComplexColumnVector operator / (const Complex& s,
 					 const ComplexColumnVector& a);
 
 // column vector by row vector -> matrix operations
 
   ComplexMatrix operator * (const RowVector& a) const;
 
   ComplexMatrix operator * (const ComplexRowVector& a) const;
 
@@ -1610,21 +1610,21 @@ friend class RowVector;
 friend class ComplexMatrix;
 friend class ComplexColumnVector;
 friend class ComplexDiagMatrix;
 
 public:
   ComplexRowVector (void);
   ComplexRowVector (int n);
   ComplexRowVector (int n, double val);
-  ComplexRowVector (int n, Complex val);
+  ComplexRowVector (int n, const Complex& val);
   ComplexRowVector (const RowVector& a);
   ComplexRowVector (const ComplexRowVector& a);
   ComplexRowVector (double a);
-  ComplexRowVector (Complex a);
+  ComplexRowVector (const Complex& a);
  ~ComplexRowVector (void);
 
   ComplexRowVector& operator = (const RowVector& a);
   ComplexRowVector& operator = (const ComplexRowVector& a);
 
   int capacity (void) const;
   int length (void) const;
 
@@ -1633,30 +1633,30 @@ public:
   Complex& operator () (int n);
 
   Complex checkelem (int n) const; // const access
   Complex elem (int n) const;
   Complex operator () (int n) const;
 
   ComplexRowVector& resize (int n);
   ComplexRowVector& resize (int n, double val);
-  ComplexRowVector& resize (int n, Complex val);
+  ComplexRowVector& resize (int n, const Complex& val);
 
   int operator == (const ComplexRowVector& a) const;
   int operator != (const ComplexRowVector& a) const;
 
 // destructive insert/delete/reorder operations
 
   ComplexRowVector& insert (const RowVector& a, int c);
   ComplexRowVector& insert (const ComplexRowVector& a, int c);
 
   ComplexRowVector& fill (double val);
-  ComplexRowVector& fill (Complex val);
+  ComplexRowVector& fill (const Complex& val);
   ComplexRowVector& fill (double val, int c1, int c2);
-  ComplexRowVector& fill (Complex val, int c1, int c2);
+  ComplexRowVector& fill (const Complex& val, int c1, int c2);
 
   ComplexRowVector append (const RowVector& a) const;
   ComplexRowVector append (const ComplexRowVector& a) const;
 
   ComplexColumnVector hermitian (void) const;  // complex conjugate transpose.
   ComplexColumnVector transpose (void) const;
 
   friend RowVector real (const ComplexRowVector& a);
@@ -1669,32 +1669,36 @@ public:
 
 // row vector by scalar -> row vector operations
 
   ComplexRowVector operator + (double s) const;
   ComplexRowVector operator - (double s) const;
   ComplexRowVector operator * (double s) const;
   ComplexRowVector operator / (double s) const;
 
-  ComplexRowVector operator + (Complex s) const;
-  ComplexRowVector operator - (Complex s) const;
-  ComplexRowVector operator * (Complex s) const;
-  ComplexRowVector operator / (Complex s) const;
+  ComplexRowVector operator + (const Complex& s) const;
+  ComplexRowVector operator - (const Complex& s) const;
+  ComplexRowVector operator * (const Complex& s) const;
+  ComplexRowVector operator / (const Complex& s) const;
 
 // scalar by row vector -> row vector operations
 
   friend ComplexRowVector operator + (double s, const ComplexRowVector& a);
   friend ComplexRowVector operator - (double s, const ComplexRowVector& a);
   friend ComplexRowVector operator * (double s, const ComplexRowVector& a);
   friend ComplexRowVector operator / (double s, const ComplexRowVector& a);
 
-  friend ComplexRowVector operator + (Complex s, const ComplexRowVector& a);
-  friend ComplexRowVector operator - (Complex s, const ComplexRowVector& a);
-  friend ComplexRowVector operator * (Complex s, const ComplexRowVector& a);
-  friend ComplexRowVector operator / (Complex s, const ComplexRowVector& a);
+  friend ComplexRowVector operator + (const Complex& s, const
+				      ComplexRowVector& a);
+  friend ComplexRowVector operator - (const Complex& s, const
+				      ComplexRowVector& a);
+  friend ComplexRowVector operator * (const Complex& s, const
+				      ComplexRowVector& a);
+  friend ComplexRowVector operator / (const Complex& s, const
+				      ComplexRowVector& a);
 
 // row vector by column vector -> scalar
 
   Complex operator * (const ColumnVector& a) const;
 
   Complex operator * (const ComplexColumnVector& a) const;
 
 // row vector by matrix -> row vector
@@ -1799,28 +1803,28 @@ class ComplexDiagMatrix
 friend class Matrix;
 friend class DiagMatrix;
 friend class ComplexMatrix;
 
 public:
   ComplexDiagMatrix (void);
   ComplexDiagMatrix (int n);
   ComplexDiagMatrix (int n, double val);
-  ComplexDiagMatrix (int n, Complex val);
+  ComplexDiagMatrix (int n, const Complex& val);
   ComplexDiagMatrix (int r, int c);
   ComplexDiagMatrix (int r, int c, double val);
-  ComplexDiagMatrix (int r, int c, Complex val);
+  ComplexDiagMatrix (int r, int c, const Complex& val);
   ComplexDiagMatrix (const RowVector& a);
   ComplexDiagMatrix (const ComplexRowVector& a);
   ComplexDiagMatrix (const ColumnVector& a);
   ComplexDiagMatrix (const ComplexColumnVector& a);
   ComplexDiagMatrix (const DiagMatrix& a);
   ComplexDiagMatrix (const ComplexDiagMatrix& a);
   ComplexDiagMatrix (double a);
-  ComplexDiagMatrix (Complex a);
+  ComplexDiagMatrix (const Complex& a);
  ~ComplexDiagMatrix (void);
 
   ComplexDiagMatrix& operator = (const DiagMatrix& a);
   ComplexDiagMatrix& operator = (const ComplexDiagMatrix& a);
 
   int rows (void) const;
   int cols (void) const;
   int columns (void) const;
@@ -1830,25 +1834,25 @@ public:
   Complex& operator () (int r, int c);
 
   Complex checkelem (int r, int c) const; // const access
   Complex elem (int r, int c) const;
   Complex operator () (int r, int c) const;
 
   ComplexDiagMatrix& resize (int r, int c);
   ComplexDiagMatrix& resize (int r, int c, double val);
-  ComplexDiagMatrix& resize (int r, int c, Complex val);
+  ComplexDiagMatrix& resize (int r, int c, const Complex& val);
 
   int operator == (const ComplexDiagMatrix& a) const;
   int operator != (const ComplexDiagMatrix& a) const;
 
   ComplexDiagMatrix& fill (double val);
-  ComplexDiagMatrix& fill (Complex val);
+  ComplexDiagMatrix& fill (const Complex& val);
   ComplexDiagMatrix& fill (double val, int beg, int end);
-  ComplexDiagMatrix& fill (Complex val, int beg, int end);
+  ComplexDiagMatrix& fill (const Complex& val, int beg, int end);
   ComplexDiagMatrix& fill (const ColumnVector& a);
   ComplexDiagMatrix& fill (const ComplexColumnVector& a);
   ComplexDiagMatrix& fill (const RowVector& a);
   ComplexDiagMatrix& fill (const ComplexRowVector& a);
   ComplexDiagMatrix& fill (const ColumnVector& a, int beg);
   ComplexDiagMatrix& fill (const ComplexColumnVector& a, int beg);
   ComplexDiagMatrix& fill (const RowVector& a, int beg);
   ComplexDiagMatrix& fill (const ComplexRowVector& a, int beg);
@@ -1875,42 +1879,46 @@ public:
   ComplexDiagMatrix inverse (int& info) const;
   ComplexDiagMatrix inverse (void) const;
 
 // diagonal matrix by scalar -> matrix operations
 
   ComplexMatrix operator + (double s) const;
   ComplexMatrix operator - (double s) const;
 
-  ComplexMatrix operator + (Complex s) const;
-  ComplexMatrix operator - (Complex s) const;
+  ComplexMatrix operator + (const Complex& s) const;
+  ComplexMatrix operator - (const Complex& s) const;
 
 // diagonal matrix by scalar -> diagonal matrix operations
 
   ComplexDiagMatrix operator * (double s) const;
   ComplexDiagMatrix operator / (double s) const;
 
-  ComplexDiagMatrix operator * (Complex s) const;
-  ComplexDiagMatrix operator / (Complex s) const;
+  ComplexDiagMatrix operator * (const Complex& s) const;
+  ComplexDiagMatrix operator / (const Complex& s) const;
 
 // scalar by diagonal matrix -> matrix operations
 
   friend ComplexMatrix operator + (double s, const ComplexDiagMatrix& a);
   friend ComplexMatrix operator - (double s, const ComplexDiagMatrix& a);
 
-  friend ComplexMatrix operator + (Complex s, const ComplexDiagMatrix& a);
-  friend ComplexMatrix operator - (Complex s, const ComplexDiagMatrix& a);
+  friend ComplexMatrix operator + (const Complex& s, const
+				   ComplexDiagMatrix& a);
+  friend ComplexMatrix operator - (const Complex& s, const
+				   ComplexDiagMatrix& a);
 
 // scalar by diagonal matrix -> diagonal matrix operations
 
   friend ComplexDiagMatrix operator * (double s, const ComplexDiagMatrix& a);
   friend ComplexDiagMatrix operator / (double s, const ComplexDiagMatrix& a);
 
-  friend ComplexDiagMatrix operator * (Complex s, const ComplexDiagMatrix& a);
-  friend ComplexDiagMatrix operator / (Complex s, const ComplexDiagMatrix& a);
+  friend ComplexDiagMatrix operator * (const Complex& s, const
+				       ComplexDiagMatrix& a);
+  friend ComplexDiagMatrix operator / (const Complex& s, const
+				       ComplexDiagMatrix& a);
 
 // diagonal matrix by column vector -> column vector operations
 
   ComplexColumnVector operator * (const ColumnVector& a) const;
 
   ComplexColumnVector operator * (const ComplexColumnVector& a) const;
 
 // diagonal matrix by diagonal matrix -> diagonal matrix operations
@@ -2084,17 +2092,18 @@ public:
 
 private:
   int init (const ComplexMatrix& a, const char * balance_job);
 
   ComplexMatrix balanced_mat;
   ComplexMatrix balancing_mat;
 };
 
-inline ComplexAEPBALANCE::ComplexAEPBALANCE (const ComplexMatrix& a, const char * balance_job) 
+inline ComplexAEPBALANCE::ComplexAEPBALANCE (const ComplexMatrix& a,
+					     const char * balance_job)
 {
   init(a,balance_job); 
 }
 
 inline ComplexAEPBALANCE::ComplexAEPBALANCE (const ComplexAEPBALANCE& a)
 {
   balanced_mat = a.balanced_mat;
   balancing_mat = a.balancing_mat;
diff --git a/liboctave/RowVector.cc b/liboctave/RowVector.cc
--- a/liboctave/RowVector.cc
+++ b/liboctave/RowVector.cc
@@ -236,35 +236,35 @@ RowVector::operator * (double s) const
 
 RowVector
 RowVector::operator / (double s) const
 {
   return RowVector (divide (data, len, s), len);
 }
 
 ComplexRowVector
-RowVector::operator + (Complex s) const
+RowVector::operator + (const Complex& s) const
 {
   return ComplexRowVector (add (data, len, s), len);
 }
 
 ComplexRowVector
-RowVector::operator - (Complex s) const
+RowVector::operator - (const Complex& s) const
 {
   return ComplexRowVector (subtract (data, len, s), len);
 }
 
 ComplexRowVector
-RowVector::operator * (Complex s) const
+RowVector::operator * (const Complex& s) const
 {
   return ComplexRowVector (multiply (data, len, s), len);
 }
 
 ComplexRowVector
-RowVector::operator / (Complex s) const
+RowVector::operator / (const Complex& s) const
 {
   return ComplexRowVector (divide (data, len, s), len);
 }
 
 // scalar by row vector -> row vector operations
 
 RowVector
 operator + (double s, const RowVector& a)
@@ -561,17 +561,17 @@ ComplexRowVector::ComplexRowVector (int 
     {
       data = new Complex [len];
       copy (data, len, val);
     }
   else
     data = (Complex *) NULL;
 }
 
-ComplexRowVector::ComplexRowVector (int n, Complex val)
+ComplexRowVector::ComplexRowVector (int n, const Complex& val)
 {
   if (n < 0)
     FAIL;
 
   len = n;
   if (len > 0)
     {
       data = new Complex [len];
@@ -607,17 +607,17 @@ ComplexRowVector::ComplexRowVector (cons
 
 ComplexRowVector::ComplexRowVector (double a)
 {
   len = 1;
   data = new Complex [1];
   data[0] = a;
 }
 
-ComplexRowVector::ComplexRowVector (Complex a)
+ComplexRowVector::ComplexRowVector (const Complex& a)
 {
   len = 1;
   data = new Complex [1];
   data[0] = Complex (a);
 }
 
 ComplexRowVector&
 ComplexRowVector::operator = (const RowVector& a)
@@ -683,17 +683,17 @@ ComplexRowVector::resize (int n, double 
   resize (n);
   for (int i = old_len; i < len; i++)
     data[i] = val;
 
   return *this;
 }
 
 ComplexRowVector&
-ComplexRowVector::resize (int n, Complex val)
+ComplexRowVector::resize (int n, const Complex& val)
 {
   int old_len = len;
   resize (n);
   for (int i = old_len; i < len; i++)
     data[i] = val;
 
   return *this;
 }
@@ -744,17 +744,17 @@ ComplexRowVector&
 ComplexRowVector::fill (double val)
 {
   if (len > 0)
     copy (data, len, val);
   return *this;
 }
 
 ComplexRowVector&
-ComplexRowVector::fill (Complex val)
+ComplexRowVector::fill (const Complex& val)
 {
   if (len > 0)
     copy (data, len, val);
   return *this;
 }
 
 ComplexRowVector&
 ComplexRowVector::fill (double val, int c1, int c2)
@@ -766,17 +766,17 @@ ComplexRowVector::fill (double val, int 
 
   for (int i = c1; i <= c2; i++)
     data[i] = val;
 
   return *this;
 }
 
 ComplexRowVector&
-ComplexRowVector::fill (Complex val, int c1, int c2)
+ComplexRowVector::fill (const Complex& val, int c1, int c2)
 {
   if (c1 < 0 || c2 < 0 || c1 >= len || c2 >= len)
     FAIL;
 
   if (c1 > c2) { int tmp = c1; c1 = c2; c2 = tmp; }
 
   for (int i = c1; i <= c2; i++)
     data[i] = val;
@@ -882,35 +882,35 @@ ComplexRowVector::operator * (double s) 
 
 ComplexRowVector
 ComplexRowVector::operator / (double s) const
 {
   return ComplexRowVector (divide (data, len, s), len);
 }
 
 ComplexRowVector
-ComplexRowVector::operator + (Complex s) const
+ComplexRowVector::operator + (const Complex& s) const
 {
   return ComplexRowVector (add (data, len, s), len);
 }
 
 ComplexRowVector
-ComplexRowVector::operator - (Complex s) const
+ComplexRowVector::operator - (const Complex& s) const
 {
   return ComplexRowVector (subtract (data, len, s), len);
 }
 
 ComplexRowVector
-ComplexRowVector::operator * (Complex s) const
+ComplexRowVector::operator * (const Complex& s) const
 {
   return ComplexRowVector (multiply (data, len, s), len);
 }
 
 ComplexRowVector
-ComplexRowVector::operator / (Complex s) const
+ComplexRowVector::operator / (const Complex& s) const
 {
   return ComplexRowVector (divide (data, len, s), len);
 }
 
 // scalar by row vector -> row vector operations
 
 ComplexRowVector
 operator + (double s, const ComplexRowVector& a)
@@ -932,35 +932,35 @@ operator * (double s, const ComplexRowVe
 
 ComplexRowVector
 operator / (double s, const ComplexRowVector& a)
 {
   return ComplexRowVector (divide (s, a.data, a.len), a.len);
 }
 
 ComplexRowVector
-operator + (Complex s, const ComplexRowVector& a)
+operator + (const Complex& s, const ComplexRowVector& a)
 {
   return ComplexRowVector (add (a.data, a.len, s), a.len);
 }
 
 ComplexRowVector
-operator - (Complex s, const ComplexRowVector& a)
+operator - (const Complex& s, const ComplexRowVector& a)
 {
   return ComplexRowVector (subtract (s, a.data, a.len), a.len);
 }
 
 ComplexRowVector
-operator * (Complex s, const ComplexRowVector& a)
+operator * (const Complex& s, const ComplexRowVector& a)
 {
   return ComplexRowVector (multiply (a.data, a.len, s), a.len);
 }
 
 ComplexRowVector
-operator / (Complex s, const ComplexRowVector& a)
+operator / (const Complex& s, const ComplexRowVector& a)
 {
   return ComplexRowVector (divide (s, a.data, a.len), a.len);
 }
 
 // row vector by column vector -> scalar
 
 Complex
 ComplexRowVector::operator * (const ColumnVector& a) const
diff --git a/src/pt-const.cc b/src/pt-const.cc
--- a/src/pt-const.cc
+++ b/src/pt-const.cc
@@ -79,45 +79,45 @@ tree_constant_rep::tree_constant_rep (vo
 }
 
 tree_constant_rep::tree_constant_rep (double d)
 {
   scalar = d;
   type_tag = scalar_constant;
 }
 
-tree_constant_rep::tree_constant_rep (Matrix& m)
+tree_constant_rep::tree_constant_rep (const Matrix& m)
 {
   if (m.rows () == 1 && m.columns () == 1)
     {
       scalar = m.elem (0, 0);
       type_tag = scalar_constant;
     }
   else
     {
       matrix = new Matrix (m);
       type_tag = matrix_constant;
     }
 }
 
-tree_constant_rep::tree_constant_rep (DiagMatrix& d)
+tree_constant_rep::tree_constant_rep (const DiagMatrix& d)
 {
   if (d.rows () == 1 && d.columns () == 1)
     {
       scalar = d.elem (0, 0);
       type_tag = scalar_constant;
     }
   else
     {
       matrix = new Matrix (d);
       type_tag = matrix_constant;
     }
 }
 
-tree_constant_rep::tree_constant_rep (RowVector& v)
+tree_constant_rep::tree_constant_rep (const RowVector& v)
 {
   int len = v.capacity ();
   if (len == 1)
     {
       scalar = v.elem (0);
       type_tag = scalar_constant;
     }
   else
@@ -136,17 +136,17 @@ tree_constant_rep::tree_constant_rep (Ro
 	  for (int i = 0; i < len; i++)
 	    m.elem (0, i) = v.elem (i);
 	  matrix = new Matrix (m);
 	  type_tag = matrix_constant;
 	}
     }
 }
 
-tree_constant_rep::tree_constant_rep (RowVector& v, int prefer_column_vector)
+tree_constant_rep::tree_constant_rep (const RowVector& v, int prefer_column_vector)
 {
   int len = v.capacity ();
   if (len == 1)
     {
       scalar = v.elem (0);
       type_tag = scalar_constant;
     }
   else
@@ -165,17 +165,17 @@ tree_constant_rep::tree_constant_rep (Ro
 	  for (int i = 0; i < len; i++)
 	    m.elem (0, i) = v.elem (i);
 	  matrix = new Matrix (m);
 	  type_tag = matrix_constant;
 	}
     }
 }
 
-tree_constant_rep::tree_constant_rep (ColumnVector& v)
+tree_constant_rep::tree_constant_rep (const ColumnVector& v)
 {
   int len = v.capacity ();
   if (len == 1)
     {
       scalar = v.elem (0);
       type_tag = scalar_constant;
     }
   else
@@ -194,17 +194,17 @@ tree_constant_rep::tree_constant_rep (Co
 	  for (int i = 0; i < len; i++)
 	    m.elem (0, i) = v.elem (i);
 	  matrix = new Matrix (m);
 	  type_tag = matrix_constant;
 	}
     }
 }
 
-tree_constant_rep::tree_constant_rep (ColumnVector& v,
+tree_constant_rep::tree_constant_rep (const ColumnVector& v,
 				      int prefer_column_vector) 
 {
   int len = v.capacity ();
   if (len == 1)
     {
       scalar = v.elem (0);
       type_tag = scalar_constant;
     }
@@ -224,23 +224,23 @@ tree_constant_rep::tree_constant_rep (Co
 	  for (int i = 0; i < len; i++)
 	    m.elem (0, i) = v.elem (i);
 	  matrix = new Matrix (m);
 	  type_tag = matrix_constant;
 	}
     }
 }
 
-tree_constant_rep::tree_constant_rep (Complex c)
+tree_constant_rep::tree_constant_rep (const Complex& c)
 {
   complex_scalar = new Complex (c);
   type_tag = complex_scalar_constant;
 }
 
-tree_constant_rep::tree_constant_rep (ComplexRowVector& v)
+tree_constant_rep::tree_constant_rep (const ComplexRowVector& v)
 {
   int len = v.capacity ();
   if (len == 1)
     {
       complex_scalar = new Complex (v.elem (0));
       type_tag = complex_scalar_constant;
     }
   else
@@ -259,45 +259,45 @@ tree_constant_rep::tree_constant_rep (Co
 	  for (int i = 0; i < len; i++)
 	    m.elem (0, i) = v.elem (i);
 	  complex_matrix = new ComplexMatrix (m);
 	  type_tag = complex_matrix_constant;
 	}
     }
 }
 
-tree_constant_rep::tree_constant_rep (ComplexMatrix& m)
+tree_constant_rep::tree_constant_rep (const ComplexMatrix& m)
 {
   if (m.rows () == 1 && m.columns () == 1)
     {
       complex_scalar = new Complex (m.elem (0, 0));
       type_tag = complex_scalar_constant;
     }
   else
     {
       complex_matrix = new ComplexMatrix (m);
       type_tag = complex_matrix_constant;
     }
 }
 
-tree_constant_rep::tree_constant_rep (ComplexDiagMatrix& d)
+tree_constant_rep::tree_constant_rep (const ComplexDiagMatrix& d)
 {
   if (d.rows () == 1 && d.columns () == 1)
     {
       complex_scalar = new Complex (d.elem (0, 0));
       type_tag = complex_scalar_constant;
     }
   else
     {
       complex_matrix = new ComplexMatrix (d);
       type_tag = complex_matrix_constant;
     }
 }
 
-tree_constant_rep::tree_constant_rep (ComplexRowVector& v,
+tree_constant_rep::tree_constant_rep (const ComplexRowVector& v,
 				      int prefer_column_vector)
 {
   int len = v.capacity ();
   if (len == 1)
     {
       complex_scalar = new Complex (v.elem (0));
       type_tag = complex_scalar_constant;
     }
@@ -317,17 +317,17 @@ tree_constant_rep::tree_constant_rep (Co
 	  for (int i = 0; i < len; i++)
 	    m.elem (0, i) = v.elem (i);
 	  complex_matrix = new ComplexMatrix (m);
 	  type_tag = complex_matrix_constant;
 	}
     }
 }
 
-tree_constant_rep::tree_constant_rep (ComplexColumnVector& v)
+tree_constant_rep::tree_constant_rep (const ComplexColumnVector& v)
 {
   int len = v.capacity ();
   if (len == 1)
     {
       complex_scalar = new Complex (v.elem (0));
       type_tag = complex_scalar_constant;
     }
   else
@@ -346,17 +346,17 @@ tree_constant_rep::tree_constant_rep (Co
 	  for (int i = 0; i < len; i++)
 	    m.elem (0, i) = v.elem (i);
 	  complex_matrix = new ComplexMatrix (m);
 	  type_tag = complex_matrix_constant;
 	}
     }
 }
 
-tree_constant_rep::tree_constant_rep (ComplexColumnVector& v,
+tree_constant_rep::tree_constant_rep (const ComplexColumnVector& v,
 				      int prefer_column_vector) 
 {
   int len = v.capacity ();
   if (len == 1)
     {
       complex_scalar = new Complex (v.elem (0));
       type_tag = complex_scalar_constant;
     }
@@ -382,17 +382,17 @@ tree_constant_rep::tree_constant_rep (Co
 }
 
 tree_constant_rep::tree_constant_rep (const char *s)
 {
   string = strsave (s);
   type_tag = string_constant;
 }
 
-tree_constant_rep::tree_constant_rep (String& s)
+tree_constant_rep::tree_constant_rep (const String& s)
 {
   string = strsave (s);
   type_tag = string_constant;
 }
 
 tree_constant_rep::tree_constant_rep (double b, double l, double i)
 {
   range = new Range (b, l, i);
@@ -421,17 +421,17 @@ tree_constant_rep::tree_constant_rep (do
 	  matrix = new Matrix ();
 	  type_tag = matrix_constant;
 	}
       else
 	panic_impossible ();
     }
 }
 
-tree_constant_rep::tree_constant_rep (Range& r)
+tree_constant_rep::tree_constant_rep (const Range& r)
 {
   if (r.nelem () > 1)
     {
       range = new Range (r);
       type_tag = range_constant;
     }
   else if (r.nelem () == 1)
     {
@@ -449,17 +449,17 @@ tree_constant_rep::tree_constant_rep (Ra
 
 tree_constant_rep::tree_constant_rep (tree_constant_rep::constant_type t)
 {
   assert (t == magic_colon);
 
   type_tag = magic_colon;
 }
 
-tree_constant_rep::tree_constant_rep (tree_constant_rep& t)
+tree_constant_rep::tree_constant_rep (const tree_constant_rep& t)
 {
   type_tag = t.type_tag;
 
   switch (t.type_tag)
     {
     case unknown_constant:
       break;
     case scalar_constant:
diff --git a/src/pt-const.h b/src/pt-const.h
--- a/src/pt-const.h
+++ b/src/pt-const.h
@@ -230,40 +230,40 @@ public:
       string_constant,
       range_constant,
       magic_colon,
     };
 
   tree_constant_rep (void);
 
   tree_constant_rep (double d);
-  tree_constant_rep (Matrix& m);
-  tree_constant_rep (DiagMatrix& d);
-  tree_constant_rep (RowVector& v);
-  tree_constant_rep (RowVector& v, int pcv);
-  tree_constant_rep (ColumnVector& v);
-  tree_constant_rep (ColumnVector& v, int pcv);
+  tree_constant_rep (const Matrix& m);
+  tree_constant_rep (const DiagMatrix& d);
+  tree_constant_rep (const RowVector& v);
+  tree_constant_rep (const RowVector& v, int pcv);
+  tree_constant_rep (const ColumnVector& v);
+  tree_constant_rep (const ColumnVector& v, int pcv);
 
-  tree_constant_rep (Complex c);
-  tree_constant_rep (ComplexMatrix& m);
-  tree_constant_rep (ComplexDiagMatrix& d);
-  tree_constant_rep (ComplexRowVector& v);
-  tree_constant_rep (ComplexRowVector& v, int pcv);
-  tree_constant_rep (ComplexColumnVector& v);
-  tree_constant_rep (ComplexColumnVector& v, int pcv);
+  tree_constant_rep (const Complex& c);
+  tree_constant_rep (const ComplexMatrix& m);
+  tree_constant_rep (const ComplexDiagMatrix& d);
+  tree_constant_rep (const ComplexRowVector& v);
+  tree_constant_rep (const ComplexRowVector& v, int pcv);
+  tree_constant_rep (const ComplexColumnVector& v);
+  tree_constant_rep (const ComplexColumnVector& v, int pcv);
 
   tree_constant_rep (const char *s);
-  tree_constant_rep (String& s);
+  tree_constant_rep (const String& s);
 
   tree_constant_rep (double base, double limit, double inc);
-  tree_constant_rep (Range& r);
+  tree_constant_rep (const Range& r);
 
   tree_constant_rep (tree_constant_rep::constant_type t);
 
-  tree_constant_rep (tree_constant_rep& t);
+  tree_constant_rep (const tree_constant_rep& t);
 
   ~tree_constant_rep (void);
 
 #if defined (MDEBUG)
   void *operator new (size_t size);
   void operator delete (void *p, size_t size);
 #endif
 
@@ -524,58 +524,58 @@ class tree_constant : public tree
 friend class tree_constant_rep;
 
 public:
   tree_constant (void)
     { rep = new tree_constant_rep (); rep->count = 1; }
 
   tree_constant (double d)
     { rep = new tree_constant_rep (d); rep->count = 1; }
-  tree_constant (Matrix& m)
+  tree_constant (const Matrix& m)
     { rep = new tree_constant_rep (m); rep->count = 1; }
-  tree_constant (DiagMatrix& d)
+  tree_constant (const DiagMatrix& d)
     { rep = new tree_constant_rep (d); rep->count = 1; }
-  tree_constant (RowVector& v)
+  tree_constant (const RowVector& v)
     { rep = new tree_constant_rep (v); rep->count = 1; }
-  tree_constant (RowVector& v, int pcv)
+  tree_constant (const RowVector& v, int pcv)
     { rep = new tree_constant_rep (v, pcv); rep->count = 1; }
-  tree_constant (ColumnVector& v)
+  tree_constant (const ColumnVector& v)
     { rep = new tree_constant_rep (v); rep->count = 1; }
-  tree_constant (ColumnVector& v, int pcv)
+  tree_constant (const ColumnVector& v, int pcv)
     { rep = new tree_constant_rep (v, pcv); rep->count = 1; }
 
-  tree_constant (Complex c)
+  tree_constant (const Complex& c)
     { rep = new tree_constant_rep (c); rep->count = 1; }
-  tree_constant (ComplexMatrix& m)
+  tree_constant (const ComplexMatrix& m)
     { rep = new tree_constant_rep (m); rep->count = 1; }
-  tree_constant (ComplexDiagMatrix& d)
+  tree_constant (const ComplexDiagMatrix& d)
     { rep = new tree_constant_rep (d); rep->count = 1; }
-  tree_constant (ComplexRowVector& v)
+  tree_constant (const ComplexRowVector& v)
     { rep = new tree_constant_rep (v); rep->count = 1; }
-  tree_constant (ComplexRowVector& v, int pcv)
+  tree_constant (const ComplexRowVector& v, int pcv)
     { rep = new tree_constant_rep (v, pcv); rep->count = 1; }
-  tree_constant (ComplexColumnVector& v)
+  tree_constant (const ComplexColumnVector& v)
     { rep = new tree_constant_rep (v); rep->count = 1; }
-  tree_constant (ComplexColumnVector& v, int pcv)
+  tree_constant (const ComplexColumnVector& v, int pcv)
     { rep = new tree_constant_rep (v, pcv); rep->count = 1; }
 
   tree_constant (const char *s)
     { rep = new tree_constant_rep (s); rep->count = 1; }
-  tree_constant (String& s)
+  tree_constant (const String& s)
     { rep = new tree_constant_rep (s); rep->count = 1; }
 
   tree_constant (double base, double limit, double inc)
     { rep = new tree_constant_rep (base, limit, inc); rep->count = 1; }
-  tree_constant (Range& r)
+  tree_constant (const Range& r)
     { rep = new tree_constant_rep (r); rep->count = 1; }
 
   tree_constant (tree_constant_rep::constant_type t)
     { rep = new tree_constant_rep (t); rep->count = 1; }
 
-  tree_constant (tree_constant& a)
+  tree_constant (const tree_constant& a)
     { rep = a.rep; rep->count++; }
   tree_constant (tree_constant_rep& r)
     { rep = &r; rep->count++; }
 
   ~tree_constant (void);
 
 #if defined (MDEBUG)
   void *operator new (size_t size);
