# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1226231982 -3600
#      Sun Nov 09 12:59:42 2008 +0100
# Node ID 5fe0f4dfdbecf82cac0fa6112ab2f8e99b13167c
# Parent  ec969f3b8955140a79ee94c626ccdbb780daf61e
use std::vector as a simple linear container in oct-norm.cc to avoid problems with instantiating Array<T>

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,18 @@
+2008-11-09  Jaroslav Hajek <highegg@gmail.com>
+
+	* oct-norm.cc: Don't include Array.cc.  
+	(column_norms (const MArray2<T>&, ...)): Use std::vector instead of Array<T> for
+	accumulator containers. Use empty constructor instead of
+	Array<T>::resize.
+	(row_norms (const MArray2<T>&, ...)): Dtto.
+	(column_norms (const MSparse2<T>&, ...)): Dtto.
+	(row_norms (const MSparse2<T>&, ...)): Dtto.
+
 2008-10-31  Jaroslav Hajek  <highegg@gmail.com>
 
 	* oct-norm.h: New header file.
 	* oct-norm.cc: New source.
 	* CSparse.cc (SparseComplexMatrix::row, SparseComplexMatrix::column):
 	New member functions.
 	* CSparse.h (SparseComplexMatrix): Declare them.
 	* dSparse.cc (SparseMatrix::row, SparseMatrix::column):
diff --git a/liboctave/oct-norm.cc b/liboctave/oct-norm.cc
--- a/liboctave/oct-norm.cc
+++ b/liboctave/oct-norm.cc
@@ -26,22 +26,22 @@ along with Octave; see the file COPYING.
 #include <config.h>
 #endif
 
 #include <cassert>
 #include <cfloat>
 #include <cmath>
 
 #include <iostream>
+#include <vector>
 
 #include "oct-cmplx.h"
 #include "lo-error.h"
 #include "lo-ieee.h"
 #include "Array.h"
-#include "Array.cc"
 #include "Array-util.h"
 #include "CMatrix.h"
 #include "dMatrix.h"
 #include "fCMatrix.h"
 #include "fMatrix.h"
 #include "CColVector.h"
 #include "dColVector.h"
 #include "CRowVector.h"
@@ -219,66 +219,66 @@ inline void vector_norm (const Array<T>&
 
   res = acc;
 }
 
 // dense versions
 template <class T, class R, class ACC>
 void column_norms (const MArray2<T>& m, MArray<R>& res, ACC acc)
 {
-  res.resize (m.columns ());
+  res = MArray2<R> (1, m.columns ());
   for (octave_idx_type j = 0; j < m.columns (); j++)
     {
       ACC accj = acc;
       for (octave_idx_type i = 0; i < m.rows (); i++)
         accj.accum (m(i, j));
 
       res.xelem (j) = accj;
     }
 }
 
 template <class T, class R, class ACC>
 void row_norms (const MArray2<T>& m, MArray<R>& res, ACC acc)
 {
-  res.resize (m.rows ());
-  Array<ACC> acci (m.rows (), acc); 
+  res = MArray2<R> (m.rows (), 1);
+  std::vector<ACC> acci (m.rows (), acc); 
   for (octave_idx_type j = 0; j < m.columns (); j++)
     {
       for (octave_idx_type i = 0; i < m.rows (); i++)
-        acci.xelem (i).accum (m(i, j));
+        acci[i].accum (m(i, j));
     }
 
   for (octave_idx_type i = 0; i < m.rows (); i++)
-    res.xelem (i) = acci(i);
+    res.xelem (i) = acci[i];
 }
 
 // sparse versions
 template <class T, class R, class ACC>
 void column_norms (const MSparse<T>& m, MArray<R>& res, ACC acc)
 {
-  res.resize (m.columns ());
+  res = MArray2<R> (1, m.columns ());
   for (octave_idx_type j = 0; j < m.columns (); j++)
     {
       ACC accj = acc;
       for (octave_idx_type k = m.cidx (j); k < m.cidx (j+1); k++)
         accj.accum (m.data (k));
 
       res.xelem (j) = accj;
     }
 }
 
 template <class T, class R, class ACC>
 void row_norms (const MSparse<T>& m, MArray<R>& res, ACC acc)
 {
-  res.resize (m.rows ());
-  Array<ACC> acci (m.rows (), acc); 
+  res = MArray2<R> (m.rows (), 1);
+  std::vector<ACC> acci (m.rows (), acc); 
   for (octave_idx_type j = 0; j < m.columns (); j++)
     {
       for (octave_idx_type k = m.cidx (j); k < m.cidx (j+1); k++)
-        acci(m.ridx (k)).accum (m.data (k));
+        acci[m.ridx (k)].accum (m.data (k));
     }
 
   for (octave_idx_type i = 0; i < m.rows (); i++)
     res.xelem (i) = acci(i);
 }
 
 // now the dispatchers
 #define DEFINE_DISPATCHER(FUNC_NAME, ARG_TYPE, RES_TYPE) \
