# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1363026716 14400
#      Mon Mar 11 14:31:56 2013 -0400
# Branch classdef
# Node ID 3b0381ea8737e24b56fd21d53bdbd1261b9b30df
# Parent  dbbef00202ff3ecf74cc2640bb20e73c2138b7b5
# Parent  488b0fef52c55e827c20cc11801d06c719417b9a
maint: periodic merge of default to classdef

diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -1500,32 +1500,16 @@ match_any (char c, const char *s)
   while ((tmp = *s++) != '\0')
     {
       if (c == tmp)
         return true;
     }
   return false;
 }
 
-// Given information about the spacing surrounding an operator,
-// return 1 if it looks like it should be treated as a binary
-// operator.  For example,
-//
-//   [ 1 + 2 ]  or  [ 1+ 2]  or  [ 1+2 ]  ==>  binary
-//
-//   [ 1 +2 ]  ==>  unary
-
-static bool
-looks_like_bin_op (bool spc_prev, int next_char)
-{
-  bool spc_next = (next_char == ' ' || next_char == '\t');
-
-  return ((spc_prev && spc_next) || ! spc_prev);
-}
-
 bool
 is_keyword (const std::string& s)
 {
   // Parsing function names like "set.property_name" inside
   // classdef-style class definitions is simplified by handling the
   // "set" and "get" portions of the names using the same mechanism as
   // is used for keywords.  However, they are not really keywords in
   // the language, so omit them from the list of possible keywords.
@@ -2679,29 +2663,16 @@ octave_lexer::next_token_can_follow_bin_
       xunput (buf.top ());
 
       buf.pop ();
     }
 
   return (isalnum (c) || match_any (c, "!\"'(-[_{~"));
 }
 
-static bool
-can_be_command (const std::string& tok)
-{
-  // Don't allow these names to be treated as commands to avoid
-  // surprises when parsing things like "NaN ^2".
-
-  return ! (tok == "e"
-            || tok == "I" || tok == "i"
-            || tok == "J" || tok == "j"
-            || tok == "Inf" || tok == "inf"
-            || tok == "NaN" || tok == "nan");
-}
-
 bool
 octave_lexer::looks_like_command_arg (void)
 {
   bool retval = true;
 
   int c0 = text_yyinput ();
 
   switch (c0)
@@ -3118,17 +3089,22 @@ octave_lexer::handle_identifier (void)
   // transformation of the end keyword...
 
   if (tok == "end")
     tok = "__end__";
 
   token *tok_val = new token (NAME, &(symbol_table::insert (tok)),
                               input_line_number, current_input_column);
 
-  if (at_beginning_of_statement)
+  if (at_beginning_of_statement
+      && (! (tok == "e"
+             || tok == "I" || tok == "i"
+             || tok == "J" || tok == "j"
+             || tok == "Inf" || tok == "inf"
+             || tok == "NaN" || tok == "nan")))
     tok_val->mark_may_be_command ();
 
   push_token (tok_val);
 
   current_input_column += flex_yyleng ();
 
   if (tok != "__end__")
     looking_for_object_index = true;
