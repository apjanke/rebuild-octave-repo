# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1257933567 -3600
#      Wed Nov 11 10:59:27 2009 +0100
# Node ID ef4c4186cb477cce509827e1ab41f2e14768b89c
# Parent  cfd0aa788ae19d642f3ff51261237b0286391e69
improve some mx_inline loops

diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -671,35 +671,16 @@ public:
 	OCTAVE_QUIT;
 
 	p[i] = fcn (m[i]);
       }
 
     return result;
   }
 
-  // This is non-breakable map, suitable for fast functions. Efficiency
-  // relies on compiler's ability to inline a function pointer. This seems
-  // to be OK with recent GCC.
-  template <class U>
-  Array<U>
-  fastmap (U (*fcn) (typename ref_param<T>::type)) const
-  {
-    octave_idx_type len = length ();
-
-    const T *m = data ();
-
-    Array<U> result (dims ());
-    U *p = result.fortran_vec ();
-
-    std::transform (m, m + len, p, fcn);
-
-    return result;
-  }
-
   template <class U> friend class Array;
 
 private:
   static void instantiation_guard ();
 };
 
 // This is a simple wrapper template that will subclass an Array<T> type or any
 // later type derived from it and override the default non-const operator() to
diff --git a/liboctave/CNDArray.cc b/liboctave/CNDArray.cc
--- a/liboctave/CNDArray.cc
+++ b/liboctave/CNDArray.cc
@@ -755,43 +755,41 @@ ComplexNDArray
 ComplexNDArray::cummin (Array<octave_idx_type>& idx_arg, int dim) const
 {
   return do_mx_cumminmax_op<ComplexNDArray> (*this, idx_arg, dim, mx_inline_cummin);
 }
 
 NDArray
 ComplexNDArray::abs (void) const
 {
-  return NDArray (mx_inline_cabs_dup (data (), length ()),
-                  dims ());
+  return do_mx_unary_map<NDArray, ComplexNDArray, std::abs> (*this);
 }
 
 boolNDArray
 ComplexNDArray::isnan (void) const
 {
-  return Array<bool> (fastmap<bool> (xisnan));
+  return do_mx_unary_map<boolNDArray, ComplexNDArray, xisnan> (*this);
 }
 
 boolNDArray
 ComplexNDArray::isinf (void) const
 {
-  return Array<bool> (fastmap<bool> (xisinf));
+  return do_mx_unary_map<boolNDArray, ComplexNDArray, xisinf> (*this);
 }
 
 boolNDArray
 ComplexNDArray::isfinite (void) const
 {
-  return Array<bool> (fastmap<bool> (xfinite));
+  return do_mx_unary_map<boolNDArray, ComplexNDArray, xfinite> (*this);
 }
 
 ComplexNDArray
 conj (const ComplexNDArray& a)
 {
-  return ComplexNDArray (mx_inline_conj_dup (a.data (), a.length ()),
-                         a.dims ());
+  return do_mx_unary_map<ComplexNDArray, ComplexNDArray, std::conj> (a);
 }
 
 ComplexNDArray&
 ComplexNDArray::insert (const NDArray& a, octave_idx_type r, octave_idx_type c)
 {
   dim_vector a_dv = a.dims ();
   
   int n = a_dv.length ();
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,26 @@
+2009-11-11  Jaroslav Hajek  <highegg@gmail.com>
+
+	* mx-inlines.cc (mx_inline_map): New template loop.
+	(DEFMXMAPPER): New macro.
+	(DEFMXMAPPER2): Rename from DEFMXMAPPER.
+	(do_mx_unary_map): New applier.
+	(mx_inline_real, mx_inline_complex): New loops.
+	* dNDArray.cc (NDArray::abs, NDArray::isnan, NDArray::isinf,
+	NDArray::isfinite, real, imag): Use new constructs.
+	* fNDArray.cc (FloatNDArray::abs, FloatNDArray::isnan,
+	FloatNDArray::isinf, FloatNDArray::isfinite, real, imag): Ditto.
+	* CNDArray.cc (ComplexNDArray::abs, ComplexNDArray::isnan,
+	ComplexNDArray::isinf, ComplexNDArray::isfinite, conj): Use new
+	constructs.
+	* fCNDArray.cc (FloatComplexNDArray::abs, FloatComplexNDArray::isnan,
+	FloatComplexNDArray::isinf, FloatComplexNDArray::isfinite, conj): Use
+	new constructs.
+
 2009-11-10  John W. Eaton  <jwe@octave.org>
 
 	* mx-ops, sparse-mx-ops, vx-ops b/liboctave/vx-ops:
 	Add comment about updating.
 	* Makefile.am, config-ops.sh: New files.
 	* Makefile.in: Delete.
 
 2009-11-09  Jaroslav Hajek  <highegg@gmail.com>
diff --git a/liboctave/dNDArray.cc b/liboctave/dNDArray.cc
--- a/liboctave/dNDArray.cc
+++ b/liboctave/dNDArray.cc
@@ -844,25 +844,23 @@ NDArray::concat (const charNDArray& rb, 
 
   retval.insert (rb, ra_idx);
   return retval;
 }
 
 NDArray
 real (const ComplexNDArray& a)
 {
-  return NDArray (mx_inline_real_dup (a.data (), a.length ()),
-                  a.dims ());
+  return do_mx_unary_op<NDArray, ComplexNDArray> (a, mx_inline_real);
 }
 
 NDArray
 imag (const ComplexNDArray& a)
 {
-  return NDArray (mx_inline_imag_dup (a.data (), a.length ()),
-                  a.dims ());
+  return do_mx_unary_op<NDArray, ComplexNDArray> (a, mx_inline_imag);
 }
 
 NDArray&
 NDArray::insert (const NDArray& a, octave_idx_type r, octave_idx_type c)
 {
   Array<double>::insert (a, r, c);
   return *this;
 }
@@ -872,36 +870,35 @@ NDArray::insert (const NDArray& a, const
 {
   Array<double>::insert (a, ra_idx);
   return *this;
 }
 
 NDArray
 NDArray::abs (void) const
 {
-  return NDArray (mx_inline_fabs_dup (data (), length ()),
-                  dims ());
+  return do_mx_unary_map<NDArray, NDArray, std::abs> (*this);
 }
 
 boolNDArray
 NDArray::isnan (void) const
 {
-  return Array<bool> (fastmap<bool> (xisnan));
+  return do_mx_unary_map<boolNDArray, NDArray, xisnan> (*this);
 }
 
 boolNDArray
 NDArray::isinf (void) const
 {
-  return Array<bool> (fastmap<bool> (xisinf));
+  return do_mx_unary_map<boolNDArray, NDArray, xisinf> (*this);
 }
 
 boolNDArray
 NDArray::isfinite (void) const
 {
-  return Array<bool> (fastmap<bool> (xfinite));
+  return do_mx_unary_map<boolNDArray, NDArray, xfinite> (*this);
 }
 
 Matrix
 NDArray::matrix_value (void) const
 {
   Matrix retval;
 
   if (ndims () == 2)
diff --git a/liboctave/fCNDArray.cc b/liboctave/fCNDArray.cc
--- a/liboctave/fCNDArray.cc
+++ b/liboctave/fCNDArray.cc
@@ -750,43 +750,41 @@ FloatComplexNDArray
 FloatComplexNDArray::cummin (Array<octave_idx_type>& idx_arg, int dim) const
 {
   return do_mx_cumminmax_op<FloatComplexNDArray> (*this, idx_arg, dim, mx_inline_cummin);
 }
 
 FloatNDArray
 FloatComplexNDArray::abs (void) const
 {
-  return FloatNDArray (mx_inline_cabs_dup (data (), length ()),
-                       dims ());
+  return do_mx_unary_map<FloatNDArray, FloatComplexNDArray, std::abs> (*this);
 }
 
 boolNDArray
 FloatComplexNDArray::isnan (void) const
 {
-  return Array<bool> (fastmap<bool> (xisnan));
+  return do_mx_unary_map<boolNDArray, FloatComplexNDArray, xisnan> (*this);
 }
 
 boolNDArray
 FloatComplexNDArray::isinf (void) const
 {
-  return Array<bool> (fastmap<bool> (xisinf));
+  return do_mx_unary_map<boolNDArray, FloatComplexNDArray, xisinf> (*this);
 }
 
 boolNDArray
 FloatComplexNDArray::isfinite (void) const
 {
-  return Array<bool> (fastmap<bool> (xfinite));
+  return do_mx_unary_map<boolNDArray, FloatComplexNDArray, xfinite> (*this);
 }
 
 FloatComplexNDArray
 conj (const FloatComplexNDArray& a)
 {
-  return FloatComplexNDArray (mx_inline_conj_dup (a.data (), a.length ()),
-                              a.dims ());
+  return do_mx_unary_map<FloatComplexNDArray, FloatComplexNDArray, std::conj> (a);
 }
 
 FloatComplexNDArray&
 FloatComplexNDArray::insert (const NDArray& a, octave_idx_type r, octave_idx_type c)
 {
   dim_vector a_dv = a.dims ();
   
   int n = a_dv.length ();
diff --git a/liboctave/fNDArray.cc b/liboctave/fNDArray.cc
--- a/liboctave/fNDArray.cc
+++ b/liboctave/fNDArray.cc
@@ -802,25 +802,23 @@ FloatNDArray::concat (const charNDArray&
 
   retval.insert (rb, ra_idx);
   return retval;
 }
 
 FloatNDArray
 real (const FloatComplexNDArray& a)
 {
-  return FloatNDArray (mx_inline_real_dup (a.data (), a.length ()),
-                       a.dims ());
+  return do_mx_unary_op<FloatNDArray, FloatComplexNDArray> (a, mx_inline_real);
 }
 
 FloatNDArray
 imag (const FloatComplexNDArray& a)
 {
-  return FloatNDArray (mx_inline_imag_dup (a.data (), a.length ()),
-                       a.dims ());
+  return do_mx_unary_op<FloatNDArray, FloatComplexNDArray> (a, mx_inline_imag);
 }
 
 FloatNDArray&
 FloatNDArray::insert (const FloatNDArray& a, octave_idx_type r, octave_idx_type c)
 {
   Array<float>::insert (a, r, c);
   return *this;
 }
@@ -830,36 +828,35 @@ FloatNDArray::insert (const FloatNDArray
 {
   Array<float>::insert (a, ra_idx);
   return *this;
 }
 
 FloatNDArray
 FloatNDArray::abs (void) const
 {
-  return FloatNDArray (mx_inline_fabs_dup (data (), length ()),
-                       dims ());
+  return do_mx_unary_map<FloatNDArray, FloatNDArray, std::abs> (*this);
 }
 
 boolNDArray
 FloatNDArray::isnan (void) const
 {
-  return Array<bool> (fastmap<bool> (xisnan));
+  return do_mx_unary_map<boolNDArray, FloatNDArray, xisnan> (*this);
 }
 
 boolNDArray
 FloatNDArray::isinf (void) const
 {
-  return Array<bool> (fastmap<bool> (xisinf));
+  return do_mx_unary_map<boolNDArray, FloatNDArray, xisinf> (*this);
 }
 
 boolNDArray
 FloatNDArray::isfinite (void) const
 {
-  return Array<bool> (fastmap<bool> (xfinite));
+  return do_mx_unary_map<boolNDArray, FloatNDArray, xfinite> (*this);
 }
 
 FloatMatrix
 FloatNDArray::matrix_value (void) const
 {
   FloatMatrix retval;
 
   if (ndims () == 2)
diff --git a/liboctave/mx-inlines.cc b/liboctave/mx-inlines.cc
--- a/liboctave/mx-inlines.cc
+++ b/liboctave/mx-inlines.cc
@@ -192,69 +192,100 @@ mx_inline_any_nan (size_t n, const T* t)
   return false; \
 }
 
 DEFMXANYNAN(double)
 DEFMXANYNAN(float)
 DEFMXANYNAN(Complex)
 DEFMXANYNAN(FloatComplex)
 
+#define DEFMXMAPPER(F, FUN) \
+template <class T> \
+inline void F (size_t n, T *r, const T *x) \
+{ for (size_t i = 0; i < n; i++) r[i] = FUN (x[i]); }
+
+template<class T>
+inline void mx_inline_real (size_t n, T *r, const std::complex<T>* x)
+{ for (size_t i = 0; i < n; i++) r[i] = x[i].real (); }
+template<class T>
+inline void mx_inline_imag (size_t n, T *r, const std::complex<T>* x)
+{ for (size_t i = 0; i < n; i++) r[i] = x[i].imag (); }
+
 // Pairwise minimums/maximums
-#define DEFMXMAPPER(F, FUN) \
+#define DEFMXMAPPER2(F, FUN) \
 template <class T> \
 inline void F (size_t n, T *r, const T *x, const T *y) \
 { for (size_t i = 0; i < n; i++) r[i] = FUN (x[i], y[i]); } \
 template <class T> \
 inline void F (size_t n, T *r, const T *x, T y) \
 { for (size_t i = 0; i < n; i++) r[i] = FUN (x[i], y); } \
 template <class T> \
 inline void F (size_t n, T *r, T x, const T *y) \
 { for (size_t i = 0; i < n; i++) r[i] = FUN (x, y[i]); }
 
-DEFMXMAPPER (mx_inline_xmin, xmin)
-DEFMXMAPPER (mx_inline_xmax, xmax)
+DEFMXMAPPER2 (mx_inline_xmin, xmin)
+DEFMXMAPPER2 (mx_inline_xmax, xmax)
 
-#define DEFMXLOCALMAPPER(F, FUN, T) \
-static void F (size_t n, T *r, const T *x, const T *y) \
-{ for (size_t i = 0; i < n; i++) r[i] = FUN (x[i], y[i]); } \
-static void F (size_t n, T *r, const T *x, T y) \
-{ for (size_t i = 0; i < n; i++) r[i] = FUN (x[i], y); } \
-static void F (size_t n, T *r, T x, const T *y) \
-{ for (size_t i = 0; i < n; i++) r[i] = FUN (x, y[i]); }
+// Arbitrary function appliers. The function is a template parameter to enable
+// inlining.
+template <class R, class X, R fun (X x)>
+inline void mx_inline_map (size_t n, R *r, const X *x)
+{ for (size_t i = 0; i < n; i++) r[i] = fun (x[i]); }
+
+template <class R, class X, R fun (const X& x)>
+inline void mx_inline_map (size_t n, R *r, const X *x)
+{ for (size_t i = 0; i < n; i++) r[i] = fun (x[i]); }
 
 // Appliers. Since these call the operation just once, we pass it as
 // a pointer, to allow the compiler reduce number of instances.
 
+#define AELEMT(ARRAY) typename ARRAY::element_type
 template <class RNDA, class XNDA>
 inline RNDA 
 do_mx_unary_op (const XNDA& x,
-                void (*op) (size_t, typename RNDA::element_type *,
-                            const typename XNDA::element_type *))
+                void (*op) (size_t, AELEMT(RNDA) *,
+                            const AELEMT(XNDA) *))
 {
   RNDA r (x.dims ());
   op (r.length (), r.fortran_vec (), x.data ());
   return r;
 }
 
+// Shortcuts for applying mx_inline_map.
+
+template <class RNDA, class XNDA, AELEMT(RNDA) fun (AELEMT(XNDA))>
+inline RNDA 
+do_mx_unary_map (const XNDA& x)
+{
+  return do_mx_unary_op<RNDA, XNDA> (x, mx_inline_map<AELEMT(RNDA), AELEMT(XNDA), fun>);
+}
+
+template <class RNDA, class XNDA, AELEMT(RNDA) fun (const AELEMT(XNDA)&)>
+inline RNDA 
+do_mx_unary_map (const XNDA& x)
+{
+  return do_mx_unary_op<RNDA, XNDA> (x, mx_inline_map<AELEMT(RNDA), AELEMT(XNDA), fun>);
+}
+
 template <class RNDA>
 inline RNDA&
 do_mx_inplace_op (RNDA& r,
-                  void (*op) (size_t, typename RNDA::element_type *))
+                  void (*op) (size_t, AELEMT(RNDA) *))
 {
   op (r.numel (), r.fortran_vec ());
   return r;
 }
 
 
 template <class RNDA, class XNDA, class YNDA>
 inline RNDA 
 do_mm_binary_op (const XNDA& x, const YNDA& y,
-                 void (*op) (size_t, typename RNDA::element_type *,
-                             const typename XNDA::element_type *,
-                             const typename YNDA::element_type *),
+                 void (*op) (size_t, AELEMT(RNDA) *,
+                             const AELEMT(XNDA) *,
+                             const AELEMT(YNDA) *),
                  const char *opname)
 {
   dim_vector dx = x.dims (), dy = y.dims ();
   if (dx == dy)
     {
       RNDA r (dx);
       op (r.length (), r.fortran_vec (), x.data (), y.data ());
       return r;
@@ -264,54 +295,54 @@ do_mm_binary_op (const XNDA& x, const YN
       gripe_nonconformant (opname, dx, dy);
       return RNDA ();
     }
 }
 
 template <class RNDA, class XNDA, class YS>
 inline RNDA 
 do_ms_binary_op (const XNDA& x, const YS& y,
-                 void (*op) (size_t, typename RNDA::element_type *,
-                             const typename XNDA::element_type *, YS))
+                 void (*op) (size_t, AELEMT(RNDA) *,
+                             const AELEMT(XNDA) *, YS))
 {
   RNDA r (x.dims ());
   op (r.length (), r.fortran_vec (), x.data (), y);
   return r;
 }
 
 template <class RNDA, class XS, class YNDA>
 inline RNDA 
 do_sm_binary_op (const XS& x, const YNDA& y,
-                 void (*op) (size_t, typename RNDA::element_type *, XS,
-                             const typename YNDA::element_type *))
+                 void (*op) (size_t, AELEMT(RNDA) *, XS,
+                             const AELEMT(YNDA) *))
 {
   RNDA r (y.dims ());
   op (r.length (), r.fortran_vec (), x, y.data ());
   return r;
 }
 
 template <class RNDA, class XNDA>
 inline RNDA& 
 do_mm_inplace_op (RNDA& r, const XNDA& x,
-                  void (*op) (size_t, typename RNDA::element_type *,
-                              const typename XNDA::element_type *),
+                  void (*op) (size_t, AELEMT(RNDA) *,
+                              const AELEMT(XNDA) *),
                   const char *opname)
 {
   dim_vector dr = r.dims (), dx = x.dims ();
   if (dr == dx)
     op (r.length (), r.fortran_vec (), x.data ());
   else
     gripe_nonconformant (opname, dr, dx);
   return r;
 }
 
 template <class RNDA, class XS>
 inline RNDA& 
 do_ms_inplace_op (RNDA& r, const XS& x,
-                  void (*op) (size_t, typename RNDA::element_type *, XS))
+                  void (*op) (size_t, AELEMT(RNDA) *, XS))
 {
   op (r.length (), r.fortran_vec (), x);
   return r;
 }
 
 template <class T1, class T2>
 inline bool
 mx_inline_equal (size_t n, const T1 *x, const T2 *y)
@@ -1079,17 +1110,17 @@ get_extent_triplet (const dim_vector& di
 
 // Appliers.
 // FIXME: is this the best design? C++ gives a lot of options here...
 // maybe it can be done without an explicit parameter?
 
 template <class ArrayType, class T>
 inline ArrayType
 do_mx_red_op (const Array<T>& src, int dim,
-              void (*mx_red_op) (const T *, typename ArrayType::element_type *,
+              void (*mx_red_op) (const T *, AELEMT(ArrayType) *,
                                  octave_idx_type, octave_idx_type, octave_idx_type))
 {
   octave_idx_type l, n, u;
   dim_vector dims = src.dims ();
   // M*b inconsistency: sum([]) = 0 etc.
   if (dims.length () == 2 && dims(0) == 0 && dims(1) == 0)
     dims (1) = 1;
 
@@ -1103,35 +1134,34 @@ do_mx_red_op (const Array<T>& src, int d
   mx_red_op (src.data (), ret.fortran_vec (), l, n, u);
 
   return ret;
 }
 
 template <class ArrayType, class T>
 inline ArrayType
 do_mx_cum_op (const Array<T>& src, int dim,
-              void (*mx_cum_op) (const T *, typename ArrayType::element_type *,
+              void (*mx_cum_op) (const T *, AELEMT(ArrayType) *,
                                  octave_idx_type, octave_idx_type, octave_idx_type))
 {
   octave_idx_type l, n, u;
   dim_vector dims = src.dims ();
   get_extent_triplet (dims, dim, l, n, u);
 
   // Cumulative operation doesn't reduce the array size.
   ArrayType ret (dims);
   mx_cum_op (src.data (), ret.fortran_vec (), l, n, u);
 
   return ret;
 }
 
 template <class ArrayType>
 inline ArrayType
 do_mx_minmax_op (const ArrayType& src, int dim,
-                 void (*mx_minmax_op) (const typename ArrayType::element_type *, 
-                                       typename ArrayType::element_type *,
+                 void (*mx_minmax_op) (const AELEMT(ArrayType) *, AELEMT(ArrayType) *,
                                        octave_idx_type, octave_idx_type, octave_idx_type))
 {
   octave_idx_type l, n, u;
   dim_vector dims = src.dims ();
   get_extent_triplet (dims, dim, l, n, u);
 
   // If the dimension is zero, we don't do anything.
   if (dim < dims.length () && dims(dim) != 0) dims(dim) = 1;
@@ -1141,18 +1171,17 @@ do_mx_minmax_op (const ArrayType& src, i
   mx_minmax_op (src.data (), ret.fortran_vec (), l, n, u);
 
   return ret;
 }
 
 template <class ArrayType>
 inline ArrayType
 do_mx_minmax_op (const ArrayType& src, Array<octave_idx_type>& idx, int dim,
-                 void (*mx_minmax_op) (const typename ArrayType::element_type *, 
-                                       typename ArrayType::element_type *,
+                 void (*mx_minmax_op) (const AELEMT(ArrayType) *, AELEMT(ArrayType) *,
                                        octave_idx_type *,
                                        octave_idx_type, octave_idx_type, octave_idx_type))
 {
   octave_idx_type l, n, u;
   dim_vector dims = src.dims ();
   get_extent_triplet (dims, dim, l, n, u);
 
   // If the dimension is zero, we don't do anything.
@@ -1166,35 +1195,33 @@ do_mx_minmax_op (const ArrayType& src, A
                 l, n, u);
 
   return ret;
 }
 
 template <class ArrayType>
 inline ArrayType
 do_mx_cumminmax_op (const ArrayType& src, int dim,
-                    void (*mx_cumminmax_op) (const typename ArrayType::element_type *, 
-                                             typename ArrayType::element_type *,
+                    void (*mx_cumminmax_op) (const AELEMT(ArrayType) *, AELEMT(ArrayType) *,
                                              octave_idx_type, octave_idx_type, octave_idx_type))
 {
   octave_idx_type l, n, u;
   dim_vector dims = src.dims ();
   get_extent_triplet (dims, dim, l, n, u);
 
   ArrayType ret (dims);
   mx_cumminmax_op (src.data (), ret.fortran_vec (), l, n, u);
 
   return ret;
 }
 
 template <class ArrayType>
 inline ArrayType
 do_mx_cumminmax_op (const ArrayType& src, Array<octave_idx_type>& idx, int dim,
-                    void (*mx_cumminmax_op) (const typename ArrayType::element_type *, 
-                                             typename ArrayType::element_type *,
+                    void (*mx_cumminmax_op) (const AELEMT(ArrayType) *, AELEMT(ArrayType) *,
                                              octave_idx_type *,
                                              octave_idx_type, octave_idx_type, octave_idx_type))
 {
   octave_idx_type l, n, u;
   dim_vector dims = src.dims ();
   get_extent_triplet (dims, dim, l, n, u);
 
   ArrayType ret (dims);
@@ -1204,18 +1231,17 @@ do_mx_cumminmax_op (const ArrayType& src
                    l, n, u);
 
   return ret;
 }
 
 template <class ArrayType>
 inline ArrayType
 do_mx_diff_op (const ArrayType& src, int dim, octave_idx_type order,
-               void (*mx_diff_op) (const typename ArrayType::element_type *, 
-                                   typename ArrayType::element_type *,
+               void (*mx_diff_op) (const AELEMT(ArrayType) *, AELEMT(ArrayType) *,
                                    octave_idx_type, octave_idx_type, octave_idx_type,
                                    octave_idx_type))
 {
   octave_idx_type l, n, u;
   if (order <= 0)
     return src;
 
   dim_vector dims = src.dims ();
