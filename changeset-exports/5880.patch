# HG changeset patch
# User jwe
# Date 1152225360 0
#      Thu Jul 06 22:36:00 2006 +0000
# Node ID 84ca47e311b3d2fb13fd7b8bc87a6cd0bbba7107
# Parent  4f1112bfafcedaf004ebca10d385abaa9795137a
[project @ 2006-07-06 22:34:48 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,14 @@
+2006-07-06  John W. Eaton  <jwe@octave.org>
+
+	* str-vec.cc (string_vector::string_vector (std::list<std::string>&)):
+	New constructor.
+	* str-vec.h: Provide decl.
+
 2006-07-01  David Bateman  <dbateman@free.fr>
 
 	* dSparse.cc (tinverse): Check for rows with no elements and zero
 	elements on the diagonal. Allow both Upper and Lower triangular
 	matrices to be treated.
 	* CSparse.cc (tinverse): ditto.
 	* Sparse-op-defs.h (SPARSE_SPARSE_MUL): Take into account 64-bit
 	constant assignment.
diff --git a/liboctave/str-vec.cc b/liboctave/str-vec.cc
--- a/liboctave/str-vec.cc
+++ b/liboctave/str-vec.cc
@@ -35,16 +35,30 @@ 90, 91, 95, 1996 Free Software Foundatio
 
 #include <iostream>
 #include <string>
 
 #include "cmd-edit.h"
 #include "lo-utils.h"
 #include "str-vec.h"
 
+string_vector::string_vector (const std::list<std::string>& lst)
+{
+  size_t n = lst.size ();
+
+  resize (n);
+
+  octave_idx_type i = 0;
+
+  for (std::list<std::string>::const_iterator p = lst.begin ();
+       p != lst.end ();
+       p++)
+    elem(i++) = *p;
+}
+
 // Create a string vector from a NULL terminated list of C strings.
 
 string_vector::string_vector (const char * const *s)
   : Array<std::string> ()
 {
   octave_idx_type n = 0;
 
   const char * const *t = s;
diff --git a/liboctave/str-vec.h b/liboctave/str-vec.h
--- a/liboctave/str-vec.h
+++ b/liboctave/str-vec.h
@@ -20,16 +20,17 @@ Software Foundation, Inc., 51 Franklin S
 02110-1301, USA.
 
 */
 
 #if !defined (octave_str_vec_h)
 #define octave_str_vec_h 1
 
 #include <iostream>
+#include <list>
 #include <string>
 
 #include "Array.h"
 
 class
 string_vector : public Array<std::string>
 {
 public:
@@ -39,16 +40,18 @@ public:
   explicit string_vector (octave_idx_type n) : Array<std::string> (n) { }
 
   string_vector (const char *s) : Array<std::string> (1, s) { }
 
   string_vector (const std::string& s) : Array<std::string> (1, s) { }
 
   string_vector (const string_vector& s) : Array<std::string> (s) { }
 
+  string_vector (const std::list<std::string>& lst);
+
   string_vector (const char * const *s);
 
   string_vector (const char * const *s, octave_idx_type n);
 
   string_vector& operator = (const string_vector& s)
   {
     if (this != &s)
       Array<std::string>::operator = (s);
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,30 @@
+2006-07-06  John W. Eaton  <jwe@octave.org>
+
+	* DLD-FUNCTIONS/__glpk__.cc (F__glpk__): Declare mrowsc volatile.
+
+	* ov-struct.cc (octave_struct::print_raw): Print keys in key_list
+	order.
+
+	* oct-map.h (Octave_map::key_list): New data member.
+	(Octave_map::maybe_add_to_key_list): New function.
+	(Octave_map::key_list_iterator, Octave_map::const_key_list_iterator):
+	New typedefs.
+	(Octave_map::del): Also delete key from key_list.
+	* oct-map.cc (Octave_map::keys): Compute return value from
+	key_list instead of map.
+	(Octave_map::assign, Octave_map::contents): Call maybe_add_to_key_list.
+	* oct-map.h, oct-map.cc (Octave_map::Octave_map):
+	Insert keys in key_list.
+
+	* oct-map.h (Octave_map::Octave_map (const dim_vector&,
+	const string_vector&)): New arg, key_list_arg.
+	* oct-map.cc: Move definition here.
+
 2006-07-05  John W. Eaton  <jwe@octave.org>
 
 	* mex.cc (mexGetVariable): Rename from mexGetArray, swap arguments.
 	(mexGetVariablePtr): Rename from mexGetArrayPtr, swap arguments.
 	(mexErrMsgIdAndTxt, mexWarnMsgIdAndTxt): New functions.
 	* mexproto.h: Provide decls.
 	Include decls for as yet unsupported functions.
 	* mex.h: Add enum for class ids.
diff --git a/src/DLD-FUNCTIONS/__glpk__.cc b/src/DLD-FUNCTIONS/__glpk__.cc
--- a/src/DLD-FUNCTIONS/__glpk__.cc
+++ b/src/DLD-FUNCTIONS/__glpk__.cc
@@ -426,17 +426,17 @@ You should be using using the @code{glpk
   if (nrhs != 9)
     {
       print_usage ();
       return retval;
     }
 
   //-- 1nd Input. A column array containing the objective function
   //--            coefficients.
-  int mrowsc = args(0).rows();
+  volatile int mrowsc = args(0).rows();
 
   Matrix C (args(0).matrix_value ());
 
   if (error_state)
     {
       error ("__glpk__: invalid value of C");
       return retval;
     }
diff --git a/src/oct-map.cc b/src/oct-map.cc
--- a/src/oct-map.cc
+++ b/src/oct-map.cc
@@ -26,19 +26,35 @@ 02110-1301, USA.
 #endif
 
 #include "error.h"
 #include "str-vec.h"
 
 #include "oct-map.h"
 #include "utils.h"
 
+Octave_map::Octave_map (const dim_vector& dv,
+			const string_vector& key_list_arg)
+  : map (), key_list (), dimensions (dv)
+{
+  Cell c (dv);
+
+  for (octave_idx_type i = 0; i < key_list_arg.length (); i++)
+    {
+      std::string k = key_list_arg[i];
+      map[k] = c;
+      key_list.push_back (k);
+    }
+}
+
 Cell&
 Octave_map::contents (const std::string& k)
 {
+  maybe_add_to_key_list (k);
+
   return map[k];
 }
 
 Cell
 Octave_map::contents (const std::string& k) const
 {
   const_iterator p = seek (k);
 
@@ -70,25 +86,24 @@ Octave_map::stringfield (const std::stri
     retval = c(0).string_value ();
 
   return retval;
 }
 
 string_vector
 Octave_map::keys (void) const
 {
-  octave_idx_type len = length ();
-
-  string_vector names (len);
+  if (length () != key_list.size ())
+    {
+      std::cerr << "length () = " << length () << std::endl;
+      std::cerr << "key_list.size () = " << key_list.size () << std::endl;
+      abort ();
+    }
 
-  octave_idx_type i = 0;
-  for (const_iterator p = begin (); p != end (); p++)
-    names[i++] = key (p);
-
-  return names;
+  return string_vector (key_list);
 }
 
 Octave_map
 Octave_map::transpose (void) const
 {
   assert (ndims () == 2);
 
   dim_vector dv = dims ();
@@ -321,57 +336,71 @@ Octave_map::assign (const octave_value_l
       if (new_dims != curr_dims)
 	{
 	  for (iterator p = begin (); p != end (); p++)
 	    contents(p).resize (new_dims, fill_value);
 	}
 
       dimensions = new_dims;
 
+      maybe_add_to_key_list (k);
+
       map[k] = tmp;
     }
 
   return *this;
 }
 
 Octave_map&
 Octave_map::assign (const std::string& k, const octave_value& rhs)
 {
   if (empty ())
     {
+      maybe_add_to_key_list (k);
+
       map[k] = Cell (rhs);
 
       dimensions = dim_vector (1, 1);
     }
   else
     {
       dim_vector dv = dims ();
 
       if (dv.all_ones ())
-	map[k] = Cell (rhs);
+	{
+	  maybe_add_to_key_list (k);
+
+	  map[k] = Cell (rhs);
+	}
       else
 	error ("invalid structure assignment");
     }
 
   return *this;
 }
 
 Octave_map&
 Octave_map::assign (const std::string& k, const Cell& rhs)
 {
   if (empty ())
     {
+      maybe_add_to_key_list (k);
+
       map[k] = rhs;
 
       dimensions = rhs.dims ();
     }
   else
     {
       if (dims () == rhs.dims ())
-	map[k] = rhs;
+	{
+	  maybe_add_to_key_list (k);
+
+	  map[k] = rhs;
+	}
       else
 	error ("invalid structure assignment");
     }
 
   return *this;
 }
 
 Octave_map
diff --git a/src/oct-map.h b/src/oct-map.h
--- a/src/oct-map.h
+++ b/src/oct-map.h
@@ -34,40 +34,54 @@ class string_vector;
 class
 Octave_map
 {
  public:
 
   typedef std::map<std::string, Cell>::iterator iterator;
   typedef std::map<std::string, Cell>::const_iterator const_iterator;
 
+  typedef std::list<std::string>::iterator key_list_iterator;
+  typedef std::list<std::string>::const_iterator const_key_list_iterator;
+
   // Warning!  You should always use at least two dimensions.
 
-  Octave_map (const dim_vector& dv = dim_vector (0, 0))
-    : map (), dimensions (dv) { }
+  Octave_map (const dim_vector& dv = dim_vector (0, 0),
+	      const string_vector& key_list_arg = string_vector ());
 
   Octave_map (const std::string& k, const octave_value& value)
-    : map (), dimensions (1, 1)
-    { map[k] = value; }
+    : map (), key_list (), dimensions (1, 1)
+  {
+    map[k] = value;
+    key_list.push_back (k);
+  }
 
   Octave_map (const std::string& k, const Cell& vals)
-    : map (), dimensions (vals.dims ())
-    { map[k] = vals; }
+    : map (), key_list (), dimensions (vals.dims ())
+  {
+    map[k] = vals;
+    key_list.push_back (k);
+  }
 
   Octave_map (const std::string& k, const octave_value_list& val_list)
-    : map (), dimensions (1, val_list.length ())
-  { map[k] = val_list; }
+    : map (), key_list (), dimensions (1, val_list.length ())
+  {
+    map[k] = val_list;
+    key_list.push_back (k);
+  }
 
-  Octave_map (const Octave_map& m) : map (m.map), dimensions (m.dimensions) { }
+  Octave_map (const Octave_map& m)
+    : map (m.map), key_list (m.key_list), dimensions (m.dimensions) { }
 
   Octave_map& operator = (const Octave_map& m)
     {
       if (this != &m)
 	{
 	  map = m.map;
+	  key_list = m.key_list;
 	  dimensions = m.dimensions;
 	}
 
       return *this;
     }
 
   ~Octave_map (void) { }
 
@@ -76,16 +90,20 @@ Octave_map
 
   int empty (void) const { return map.empty (); }
 
   void del (const std::string& k)
     {
       iterator p = map.find (k);
       if (p != map.end ())
 	map.erase (p);
+
+      key_list_iterator q = find (key_list.begin (), key_list.end (), k);
+      if (q != key_list.end ())
+	key_list.erase (q);
     }
 
   iterator begin (void) { return iterator (map.begin ()); }
   const_iterator begin (void) const { return const_iterator (map.begin ()); }
 
   iterator end (void) { return iterator (map.end ()); }
   const_iterator end (void) const { return const_iterator (map.end ()); }
 
@@ -146,18 +164,30 @@ Octave_map
 
   Octave_map index (const octave_value_list& idx);
 
 private:
 
   // The map of names to values.
   std::map<std::string, Cell> map;
 
+  // An extra list of keys, so we can keep track of the order the keys
+  // are added for compatibility with you know what.
+  std::list<std::string> key_list;
+
   // The current size.
   mutable dim_vector dimensions;
+
+  void maybe_add_to_key_list (const std::string& k)
+  {
+    key_list_iterator p = find (key_list.begin (), key_list.end (), k);
+
+    if (p == key_list.end ())
+      key_list.push_back (k);
+  }
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/ov-struct.cc b/src/ov-struct.cc
--- a/src/ov-struct.cc
+++ b/src/ov-struct.cc
@@ -411,20 +411,16 @@ void
 octave_struct::print (std::ostream& os, bool) const
 {
   print_raw (os);
 }
 
 void
 octave_struct::print_raw (std::ostream& os, bool) const
 {
-  // FIXME -- would be nice to print the output in some
-  // standard order.  Maybe all substructures first, maybe
-  // alphabetize entries, etc.
-
   unwind_protect::begin_frame ("octave_struct_print");
 
   unwind_protect_int (Vstruct_levels_to_print);
 
   if (Vstruct_levels_to_print >= 0)
     {
       bool print_keys_only = (Vstruct_levels_to_print == 0
 			      || map.numel () == 0);
@@ -445,20 +441,23 @@ octave_struct::print_raw (std::ostream& 
 	  dim_vector dv = dims ();
 	  os << dv.str () << " struct array containing the fields:";
 	  newline (os);
 	  newline (os);
 
 	  increment_indent_level ();
 	}
 
-      for (Octave_map::const_iterator p = map.begin (); p != map.end (); p++)
+      string_vector key_list = map.keys ();
+
+      for (octave_idx_type i = 0; i < key_list.length (); i++)
 	{
-	  std::string key = map.key (p);
-	  Cell val = map.contents (p);
+	  std::string key = key_list[i];
+
+	  Cell val = map.contents (key);
 
 	  octave_value tmp = (n == 1) ? val(0) : octave_value (val, true);
 
 	  if (print_keys_only)
 	    {
 	      indent (os);
 	      os << key;
 	      if (n == 1)
