# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1252227276 -7200
#      Sun Sep 06 10:54:36 2009 +0200
# Node ID 3fc7272937ce5bae3f982202e10bff6db7b433a0
# Parent  bc0739d0272448e2c102378c62d3ce5189c86ccb
implement Array<T>::clear overloads

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -83,16 +83,30 @@ Array<T>::clear (void)
   rep->count++; 
   slice_data = rep->data;
   slice_len = rep->len;
 
   dimensions = dim_vector ();
 }
 
 template <class T>
+void
+Array<T>::clear (const dim_vector& dv)
+{
+  if (--rep->count <= 0)
+    delete rep;
+
+  rep = new ArrayRep (dv.numel ());
+  slice_data = rep->data;
+  slice_len = rep->len;
+
+  dimensions = dv;
+}
+
+template <class T>
 Array<T>
 Array<T>::squeeze (void) const
 {
   Array<T> retval = *this;
 
   if (ndims () > 2)
     {
       bool dims_changed = false;
diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -261,17 +261,24 @@ public:
           slice_data = a.slice_data;
           slice_len = a.slice_len;
         }
 
       return *this;
     }
 
   void fill (const T& val); 
+
   void clear (void);
+  void clear (const dim_vector& dv);
+  void clear (octave_idx_type n)
+    { clear (dim_vector (n)); }
+
+  void clear (octave_idx_type r, octave_idx_type c)
+    { clear (dim_vector (r, c)); }
 
   octave_idx_type capacity (void) const { return slice_len; }
   octave_idx_type length (void) const { return capacity (); }
   octave_idx_type nelem (void) const { return capacity (); }
   octave_idx_type numel (void) const { return nelem (); }
 
   octave_idx_type dim1 (void) const { return dimensions(0); }
   octave_idx_type dim2 (void) const { return dimensions(1); }
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,15 @@
+2009-09-04  Jaroslav Hajek  <highegg@gmail.com>
+
+	* Array.cc (Array<T>::clear (const dim_vector&)): new method.
+	* Array.h: Declare it.
+	(Array<T>::clear (octave_idx_type)): New method.
+	(Array<T>::clear (octave_idx_type, octave_idx_type)): New method.
+
 2009-09-04  Jaroslav Hajek  <highegg@gmail.com>
 
 	* mx-inlines.cc (DEFMXBOOLOPEQ): New macro.
 	(mx_inline_and2, mx_inline_or2): New loops.
 
 	* MArray.h (MArray<T>::MArray (const dim_vector&)): New constructor.
 	(MArray<T>::MArray (const Array<T>&)): Ensure column vector.
 	(MArray<T>::resize): New method.
