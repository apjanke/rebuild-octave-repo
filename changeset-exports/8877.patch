# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1235640599 -3600
#      Thu Feb 26 10:29:59 2009 +0100
# Node ID 2c8b2399247beb0e23ed8185af2341a534abf6a5
# Parent  a017b920530ebc74db0fcd4a59ac01d1885bc2f1
implement strsplit; deprecate split

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,28 @@
+2009-02-26  Jaroslav Hajek  <highegg@gmail.com>
+
+	* strings/strsplit.m: New function.
+	* strings/split.m: Move to deprecated/.
+	* strings/Makefile.in: Update.
+	* deprecated/Makefile.in: Update.
+
+	* general/int2str.m: Use strsplit instead of split.
+	* general/num2str.m: Ditto.
+	* help/__makeinfo__.m: Ditto.
+	* help/lookfor.m: Ditto.
+	* miscellaneous/compare_versions.m: Ditto.
+	* miscellaneous/tar.m: Ditto.
+	* miscellaneous/unpack.m: Ditto.
+	* miscellaneous/what.m: Ditto.
+	* miscellaneous/zip.m: Ditto.
+	* pkg/pkg.m: Ditto.
+	* strings/strtok.m: Ditto.
+	* testfun/rundemos.m: Ditto.
+
 2009-02-25  John W. Eaton  <jwe@octave.org>
 
 	* Makefile.in (distclean maintainer-clean): Remove tags and TAGS
 	in distclean target.
 
 2009-02-25  Jaroslav Hajek  <highegg@gmail.com>
 
 	* help/lookfor.m: Vectorize the path splitting using mat2cell.
diff --git a/scripts/deprecated/Makefile.in b/scripts/deprecated/Makefile.in
--- a/scripts/deprecated/Makefile.in
+++ b/scripts/deprecated/Makefile.in
@@ -45,17 +45,17 @@ SOURCES = beta_cdf.m beta_inv.m beta_pdf
   is_struct.m is_symmetric.m is_vector.m iscommand.m israwcommand.m \
   isstr.m lchol.m loadimage.m lognormal_cdf.m lognormal_inv.m \
   lognormal_pdf.m lognormal_rnd.m mark_as_command.m \
   mark_as_rawcommand.m meshdom.m normal_cdf.m normal_inv.m \
   normal_pdf.m normal_rnd.m pascal_cdf.m pascal_inv.m pascal_pdf.m \
   pascal_rnd.m poisson_cdf.m poisson_inv.m poisson_pdf.m \
   poisson_rnd.m polyinteg.m setstr.m spatan2.m spchol2inv.m \
   spcholinv.m spcumprod.m spcumsum.m spchol.m spdet.m spdiag.m \
-  spfind.m spinv.m spkron.m splchol.m splu.m spmax.m spmin.m \
+  spfind.m spinv.m spkron.m splchol.m split.m splu.m spmax.m spmin.m \
   spprod.m spqr.m spsum.m spsumsq.m struct_contains.m \
   struct_elements.m t_cdf.m t_inv.m t_pdf.m t_rnd.m uniform_cdf.m \
   uniform_inv.m uniform_pdf.m uniform_rnd.m unmark_command.m \
   unmark_rawcommand.m weibcdf.m weibinv.m weibpdf.m weibrnd.m \
   weibull_cdf.m weibull_inv.m weibull_pdf.m weibull_rnd.m \
   wiener_rnd.m str2mat.m
 
 DISTFILES = $(addprefix $(srcdir)/, Makefile.in $(SOURCES))
diff --git a/scripts/strings/split.m b/scripts/deprecated/split.m
rename from scripts/strings/split.m
rename to scripts/deprecated/split.m
--- a/scripts/strings/split.m
+++ b/scripts/deprecated/split.m
@@ -13,16 +13,20 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} split (@var{s}, @var{t}, @var{n})
+## This function has been deprecated. Use @code{char (strsplit (s, t))}
+## instead.
+## @end deftypefn
+
 ## Divides the string @var{s} into pieces separated by @var{t}, returning
 ## the result in a string array (padded with blanks to form a valid
 ## matrix).  If the optional input @var{n} is supplied, split @var{s}
 ## into at most @var{n} different pieces.
 ##
 ## For example,
 ##
 ## @example
diff --git a/scripts/general/int2str.m b/scripts/general/int2str.m
--- a/scripts/general/int2str.m
+++ b/scripts/general/int2str.m
@@ -65,17 +65,17 @@ function retval = int2str (x)
       idx(2) = 2:sz(2);
       rfmt = get_fmt (x(idx{:}), 2);
       fmt = cstrcat (ifmt, repmat (rfmt, 1, nc-1), "\n");
     else
       fmt = cstrcat (get_fmt (x, 0), "\n");
     endif
     tmp = sprintf (fmt, permute (x, [2, 1, 3 : nd]));
     tmp(end) = "";
-    retval = split (tmp, "\n");
+    retval = char (strsplit (tmp, "\n"));
   else
     print_usage ();
   endif
 
 endfunction
 
 function fmt = get_fmt (x, sep)
 
diff --git a/scripts/general/num2str.m b/scripts/general/num2str.m
--- a/scripts/general/num2str.m
+++ b/scripts/general/num2str.m
@@ -137,17 +137,17 @@ function retval = num2str (x, arg)
       if (tmp == tmp2)
 	break;
       else
 	tmp = tmp2;
       endif
     endwhile
 
     tmp(length (tmp)) = "";
-    retval = strtrim (split (tmp, "\n"));
+    retval = char (strtrim (strsplit (tmp, "\n")));
   else
     if (nargin == 2)
       if (ischar (arg))
 	fmt = arg;
       else
 	if (isnumeric (x) && round (x) == x && abs (x) < (10 .^ arg))
 	  fmt = sprintf ("%%%dd  ", arg);
 	else
diff --git a/scripts/help/__makeinfo__.m b/scripts/help/__makeinfo__.m
--- a/scripts/help/__makeinfo__.m
+++ b/scripts/help/__makeinfo__.m
@@ -102,17 +102,17 @@ function [retval, status] = __makeinfo__
         stop = find (text (start:end) == "\n", 1);
         if (isempty (stop))
           stop = length (text);
         else
           stop += start - 1;
         endif
       endif
       see_also_args = text (bracket_start+1:(stop-1));
-      see_also_args = strtrim (cellstr (split (see_also_args, ",")));
+      see_also_args = strtrim (strsplit (see_also_args, ","));
       expanded = see_also (see_also_args);
       text = strcat (text (1:start-1), expanded, text (stop+1:end));
     endif
   endif
   
   if (strcmpi (output_type, "texinfo"))
     status = 0;
     retval = text;
diff --git a/scripts/help/lookfor.m b/scripts/help/lookfor.m
--- a/scripts/help/lookfor.m
+++ b/scripts/help/lookfor.m
@@ -58,20 +58,20 @@ function [out_fun, out_help_text] = look
     [fun, help_text] = search_cache (str, cache_file, search_type);
     had_core_cache = true;
   else
     fun = help_text = {};
     had_core_cache = false;
   endif
   
   ## Search functions in new path dirs.
-  orig_path = split_str (__pathorig__ (), pathsep ());
+  orig_path = strsplit (__pathorig__ (), pathsep ());
 
   ## ditto for path.
-  new_path = split_str (path (), pathsep ());
+  new_path = strsplit (path (), pathsep ());
 
   ## scratch out directories already covered by orig_path.
   if (had_core_cache)
     new_path = setdiff (new_path, orig_path);
   endif
 
   for n = 1:numel (new_path)
     elt = new_path{n};
@@ -178,35 +178,8 @@ function [funs, help_texts] = search_cac
     cache_idx = find (!cellfun ("isempty", tmp));
     funs = cache (1, cache_idx);
     help_texts = cache (3, cache_idx);
   else
     funs = help_texts = {};
   endif
 endfunction
 
-## split string using a separator (or more separators)
-## FIXME: maybe this function should be available to users?
-function s = split_str (p, sep)
-  if (isempty (p))
-    s = cell (size (p));
-  else
-    ## split p according to delimiter.
-    if (isscalar (sep))
-      ## single separator
-      idx = find (p == sep);
-    else
-      ## multiple separators
-      idx = strchr (p, sep);
-    endif
-
-    ## get substring sizes.
-    if (isempty (idx))
-      sizes = numel (p);
-    else
-      sizes = [idx(1)-1, diff(idx)-1, numel(p)-idx(end)];
-    endif
-    ## remove separators.
-    p(idx) = []; 
-    ## convert!
-    s = mat2cell (p, 1, sizes);
-  endif
-endfunction
diff --git a/scripts/miscellaneous/compare_versions.m b/scripts/miscellaneous/compare_versions.m
--- a/scripts/miscellaneous/compare_versions.m
+++ b/scripts/miscellaneous/compare_versions.m
@@ -104,18 +104,18 @@ function out = compare_versions (v1, v2,
   if (! isempty (v2firstchar))
     v2c = v2(v2firstchar:length(v2));
     v2nochar = v2(1:v2firstchar-1);
   else
     v2c = "";
     v2nochar = v2;
   endif
 
-  v1n = str2num (split (v1nochar, "."));
-  v2n = str2num (split (v2nochar, "."));
+  v1n = str2num (char (strsplit (v1nochar, ".")));
+  v2n = str2num (char (strsplit (v2nochar, ".")));
   if ((isempty (v1n) && isempty (v1c)) || (isempty (v2n) && isempty(v2c)))
     error ("compare_versions: given version strings are not valid: %s %s",
 	   v1, v2);
   endif
 
   ## Assume that any additional elements would be 0 if one is longer
   ## than the other.
   maxnumlen = max ([length(v1n) length(v2n)]);
diff --git a/scripts/miscellaneous/tar.m b/scripts/miscellaneous/tar.m
--- a/scripts/miscellaneous/tar.m
+++ b/scripts/miscellaneous/tar.m
@@ -51,17 +51,17 @@ function entries = tar (tarfile, files, 
 
       [status, output] = system (cmd);
 
       if (status == 0)
 	if (nargout > 0)
 	  if (output(end) == "\n")
 	    output(end) = [];
 	  endif
-          entries = cellstr (split (output, "\n"));
+          entries = strsplit (output, "\n");
 	  entries = entries';
 	endif
       else
 	error ("tar: tar exited with status = %d", status);
       endif
     
     else
       error ("tar: expecting all arguments to be character strings");
diff --git a/scripts/miscellaneous/unpack.m b/scripts/miscellaneous/unpack.m
--- a/scripts/miscellaneous/unpack.m
+++ b/scripts/miscellaneous/unpack.m
@@ -189,17 +189,17 @@ function filelist = unpack (file, direct
   endif
 
   if (nargout > 0 || needmove)
     ## Trim the last cr if needed.
     ## FIXME -- will this need to change to a check for "\r\n" for windows?
     if (output(length (output)) == "\n")
       output(length (output)) = [];
     endif
-    files = parser (cellstr (split (output, "\n")))';
+    files = parser (strsplit (output, "\n"))';
 
     ## Move files if necessary
     if (needmove)
       [st, msg, msgid] = movefile (files, directory);
       if (! st)
 	error ("unpack: unable to move files to \"%s\": %s",
 	       directory, msg);
       endif
diff --git a/scripts/miscellaneous/what.m b/scripts/miscellaneous/what.m
--- a/scripts/miscellaneous/what.m
+++ b/scripts/miscellaneous/what.m
@@ -28,19 +28,17 @@
 ## @end deftypefn
 
 function ret = what (d)
 
   if (nargin == 0)
     d = pwd ();
   elseif (isempty (strfind (d, filesep ())))
     ## Find the appropriate directory on the path.
-    p = split (path (), pathsep());
-    p = cellfun (@(x) deblank (x), mat2cell (p, ones (1, size (p, 1)), ...
-		size (p, 2)), "UniformOutput", false);
+    p = strtrim (strsplit (path (), pathsep()));
     d = p{find (cellfun (@(x) ! isempty (strfind (x, d)), p))(end)};
   else
     [status, msg, msgid] = fileattrib (d);
     if (status != 1)
       error ("could not find the file or path %s", d);
     else
       d = msg.Name;
     endif
diff --git a/scripts/miscellaneous/zip.m b/scripts/miscellaneous/zip.m
--- a/scripts/miscellaneous/zip.m
+++ b/scripts/miscellaneous/zip.m
@@ -51,17 +51,17 @@ function entries = zip (zipfile, files, 
       if (status == 0)
 	if (nargout > 0)
 	  cmd = sprintf ("unzip -Z -1 %s", zipfile);
 	  [status, entries] = system (cmd);
 	  if (status == 0)
 	    if (entries(end) == "\n")
 	      entries(end) = [];
 	    endif
-            entries = cellstr (split (entries, "\n"))';
+            entries = strsplit (entries, "\n");
 	  else
 	    error ("zip: zipinfo failed with exit status = %d", status);
 	  endif
 	endif
       else
 	error ("zip: zip failed with exit status = %d", status);
       endif
     
diff --git a/scripts/pkg/pkg.m b/scripts/pkg/pkg.m
--- a/scripts/pkg/pkg.m
+++ b/scripts/pkg/pkg.m
@@ -1749,22 +1749,17 @@ function text = strip (text)
   else
     text = "";
   endif
 endfunction
 
 ## Split the text into a cell array of strings by sep.
 ## Example: "A, B" => {"A", "B"} (with sep = ",")
 function out = split_by (text, sep)
-  text_matrix = split (text, sep);
-  num_words = size (text_matrix, 1);
-  out = cell (num_words, 1);
-  for i = 1:num_words
-    out{i} = strip (text_matrix(i, :));
-  endfor
+  out = strtrim (strsplit (text, sep));
 endfunction
 
 ## Create an INDEX file for a package that doesn't provide one.
 ##   'desc'  describes the package.
 ##   'dir'   is the 'inst' directory in temporary directory.
 ##   'index_file' is the name (including path) of resulting INDEX file.
 function write_index (desc, dir, index_file, global_install)
   ## Get names of functions in dir
diff --git a/scripts/strings/Makefile.in b/scripts/strings/Makefile.in
--- a/scripts/strings/Makefile.in
+++ b/scripts/strings/Makefile.in
@@ -30,17 +30,17 @@ VPATH = @srcdir@
 include $(TOPDIR)/Makeconf
 
 INSTALL = @INSTALL@
 INSTALL_PROGRAM = @INSTALL_PROGRAM@
 INSTALL_DATA = @INSTALL_DATA@
 
 SOURCES = base2dec.m bin2dec.m blanks.m deblank.m dec2base.m \
   dec2bin.m dec2hex.m findstr.m hex2dec.m index.m isletter.m isstrprop.m \
-  mat2str.m regexptranslate.m rindex.m split.m str2double.m \
+  mat2str.m regexptranslate.m rindex.m strsplit.m str2double.m \
   str2num.m strcat.m cstrcat.m strcmpi.m strchr.m strfind.m strjust.m strmatch.m \
   strncmpi.m strrep.m strtok.m strtrim.m strtrunc.m \
   substr.m validatestring.m
 
 DISTFILES = $(addprefix $(srcdir)/, Makefile.in $(SOURCES))
 
 FCN_FILES = $(addprefix $(srcdir)/, $(SOURCES))
 FCN_FILES_NO_DIR = $(notdir $(FCN_FILES))
diff --git a/scripts/strings/strsplit.m b/scripts/strings/strsplit.m
new file mode 100644
--- /dev/null
+++ b/scripts/strings/strsplit.m
@@ -0,0 +1,63 @@
+## Copyright (C) 2009 Jaroslav Hajek
+##
+## This program is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 3 of the License, or (at
+## your option) any later version.
+##
+## This program is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+## General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with this program; see the file COPYING.  If not, see
+## <http://www.gnu.org/licenses/>.
+
+## -*- texinfo -*-
+## @deftypefn {Function File} {[@var{s}] =} strsplit (@var{p}, @var{sep}, @var{strip_empty})
+## Splits a single string using one or more delimiters.
+## The result is returned as a cell array of strings. Consecutive delimiters
+## and delimiters at boundaries result in empty strings, unless @var{strip_empty} is true.
+## The default value of @var{strip_empty} is false.
+## @end deftypefn
+
+function s = strsplit (p, sep, strip_empty = false)
+  if (! ischar (p) || rows (p) > 1 || ! ischar (sep) || ! islogical (strip_empty))
+    print_usage ();
+  endif
+
+  if (isempty (p))
+    s = cell (size (p));
+  else
+    ## split p according to delimiter.
+    if (isscalar (sep))
+      ## single separator
+      idx = find (p == sep);
+    else
+      ## multiple separators
+      idx = strchr (p, sep);
+    endif
+
+    ## get substring sizes.
+    if (isempty (idx))
+      sizes = numel (p);
+    else
+      sizes = [idx(1)-1, diff(idx)-1, numel(p)-idx(end)];
+    endif
+    ## remove separators.
+    p(idx) = []; 
+    if (strip_empty)
+      ## omit zero lengths.
+      sizes = sizes (sizes != 0); 
+    endif
+    ## convert!
+    s = mat2cell (p, 1, sizes);
+  endif
+endfunction
+
+%!assert (all (strcmp (strsplit ("road to hell", " "), {"road", "to", "hell"})))
+
+%!assert (all (strcmp (strsplit ("road to^hell", " ^"), {"road", "to", "hell"})))
+
+%!assert (all (strcmp (strsplit ("road   to--hell", " -", true), {"road", "to", "hell"})))
diff --git a/scripts/strings/strtok.m b/scripts/strings/strtok.m
--- a/scripts/strings/strtok.m
+++ b/scripts/strings/strtok.m
@@ -31,17 +31,17 @@
 ##      @result{} "this"
 ##
 ## [tok, rem] = strtok ("14*27+31", "+-*/")
 ##      @result{}
 ##         tok = 14
 ##         rem = *27+31
 ## @end group
 ## @end example
-## @seealso{index, split}
+## @seealso{index, strsplit}
 ## @end deftypefn
 
 ## FIXME: check what to do for a null delimiter
 
 function [tok, rem] = strtok (str, delim)
 
   if (nargin<1 || nargin > 2)
     print_usage ();
diff --git a/scripts/testfun/rundemos.m b/scripts/testfun/rundemos.m
--- a/scripts/testfun/rundemos.m
+++ b/scripts/testfun/rundemos.m
@@ -20,17 +20,17 @@
 ## @deftypefn {Function File} {} rundemos (@var{directory})
 ## @end deftypefn
 
 ## Author: jwe
 
 function rundemos (directory)
 
   if (nargin == 0)
-    dirs = cellstr (split (path (), pathsep ()));
+    dirs = strsplit (path (), pathsep ());
   elseif (nargin == 1)
     if (is_absolute_filename (directory))
       dirs = {directory};
     else
       fullname = find_dir_in_path (directory);
       if (! isempty (fullname))
 	dirs = {fullname};
       else
