# HG changeset patch
# User Rik <rik@octave.org>
# Date 1471299330 25200
#      Mon Aug 15 15:15:30 2016 -0700
# Node ID 1c4cd12987f54456dbb3e10b1776e5d2df738f65
# Parent  8192c26fcda4fdb8eaeacc2b472417cfb83dc5c9
Use Octave syntax in graphics demos.

* inputdlg.m, listdlg.m, waitbar.m, autumn.m, bone.m, cool.m, copper.m,
cubehelix.m, flag.m, gray.m, hot.m, hsv.m, jet.m, lines.m, ocean.m, pink.m,
prism.m, rainbow.m, rgbplot.m, spring.m, summer.m, viridis.m, white.m,
winter.m, annotation.m, axis.m, clabel.m, daspect.m, datetick.m, grid.m,
legend.m, lighting.m, material.m, pbaspect.m, shading.m, text.m, xlim.m,
ylim.m, zlim.m, area.m, bar.m, barh.m, camlight.m, colorbar.m, comet.m,
comet3.m, contour.m, contour3.m, contourf.m, cylinder.m, ellipsoid.m,
errorbar.m, ezcontour.m, ezcontourf.m, ezmesh.m, ezmeshc.m, ezplot.m,
ezplot3.m, ezsurf.m, ezsurfc.m, feather.m, fill.m, fplot.m, isocaps.m,
isonormals.m, isosurface.m, light.m, line.m, loglog.m, loglogerr.m, mesh.m,
meshc.m, meshz.m, pareto.m, patch.m, pcolor.m, pie.m, pie3.m, plot.m, plot3.m,
plotmatrix.m, plotyy.m, polar.m, quiver.m, quiver3.m, rectangle.m, ribbon.m,
rose.m, scatter.m, scatter3.m, semilogx.m, semilogxerr.m, semilogy.m,
semilogyerr.m, shrinkfaces.m, slice.m, smooth3.m, sombrero.m, stairs.m, stem.m,
stem3.m, stemleaf.m, surf.m, surfc.m, surfl.m, surfnorm.m, tetramesh.m,
trimesh.m, triplot.m, trisurf.m, waterfall.m, copyobj.m, hold.m, linkaxes.m,
linkprop.m, printd.m, refreshdata.m, subplot.m, zoom.m, pcr.m, dump_demos.m:
Use Octave syntax in graphics demos.

diff --git a/scripts/gui/inputdlg.m b/scripts/gui/inputdlg.m
--- a/scripts/gui/inputdlg.m
+++ b/scripts/gui/inputdlg.m
@@ -156,68 +156,68 @@ endfunction
 %!   helpdlg ('Canceled by user', 'Information');
 %! else
 %!   volume  = str2num (dims{1}) * str2num (dims{2}) * str2num (dims{3});
 %!   surface = 2 * (str2num (dims{1}) * str2num (dims{2}) + ...
 %!                  str2num (dims{2}) * str2num (dims{3}) + ...
 %!                  str2num (dims{1}) * str2num (dims{3}));
 %!   helpdlg (sprintf ('Results:\nVolume = %.3f\nSurface = %.3f', ...
 %!                     volume, surface), 'Box Dimensions');
-%! end
+%! endif
 
 %!demo
 %! disp ('- test inputdlg with prescribed scalar (2 lines per text field) and defaults.');
 %! prompt = {'Width', 'Height', 'Depth'};
 %! default = {'1.1', '2.2', '3.3'};
 %! rc = 2;
 %! dims = inputdlg (prompt, 'Enter Box Dimensions', rc, default);
 %! if (isempty (dims))
 %!   helpdlg ('Canceled by user', 'Information');
 %! else
 %!   volume  = str2num (dims{1}) * str2num (dims{2}) * str2num (dims{3});
 %!   surface = 2 * (str2num (dims{1}) * str2num (dims{2}) + ...
 %!                  str2num (dims{2}) * str2num (dims{3}) + ...
 %!                  str2num (dims{1}) * str2num (dims{3}));
 %!    helpdlg (sprintf ('Results:\nVolume = %.3f\nSurface = %.3f', ...
 %!                      volume, surface), 'Box Dimensions');
-%! end
+%! endif
 
 %!demo
 %! disp ('- test inputdlg with prescribed vector [1,2,3] for # of lines per text field and defaults.');
 %! prompt = {'Width', 'Height', 'Depth'};
 %! default = {'1.10', '2.10', '3.10'};
 %! rc = [1,2,3];  % NOTE: must be an array
 %! dims = inputdlg (prompt, 'Enter Box Dimensions', rc, default);
 %! if (isempty (dims))
 %!   helpdlg ('Canceled by user', 'Information');
 %! else
 %!   volume  = str2num (dims{1}) * str2num (dims{2}) * str2num (dims{3});
 %!   surface = 2 * (str2num (dims{1}) * str2num (dims{2}) + ...
 %!                  str2num (dims{2}) * str2num (dims{3}) + ...
 %!                  str2num (dims{1}) * str2num (dims{3}));
 %!   helpdlg (sprintf ('Results:\nVolume = %.3f\nSurface = %.3f', ...
 %!                     volume, surface), 'Box Dimensions');
-%! end
+%! endif
 
 %!demo
 %! disp ('- test inputdlg with prescribed row by column sizes and defaults.');
 %! prompt = {'Width', 'Height', 'Depth'};
 %! default = {'1.10', '2.20', '3.30'};
 %! rc = [1,10; 2,20; 3,30];  % NOTE: must be an array
 %! dims = inputdlg (prompt, 'Enter Box Dimensions', rc, default);
 %! if (isempty (dims))
 %!   helpdlg ('Canceled by user', 'Information');
 %! else
 %!   volume  = str2num (dims{1}) * str2num (dims{2}) * str2num (dims{3});
 %!   surface = 2 * (str2num (dims{1}) * str2num (dims{2}) + ...
 %!                  str2num (dims{2}) * str2num (dims{3}) + ...
 %!                  str2num (dims{1}) * str2num (dims{3}));
 %!   helpdlg (sprintf ('Results:\nVolume = %.3f\nSurface = %.3f', ...
 %!                     volume, surface), 'Box Dimensions');
-%! end
+%! endif
 
 %!error inputdlg (1, 2, 3, 4, 5)
 %!error <PROMPT must be a character string> inputdlg (1)
 %!error <TITLE must be a character string> inputdlg ("msg", 1)
 %!error <ROWSCOLS must be numeric> inputdlg ("msg", "title", "1")
 %!error <ROWSCOLS vector does not match size>
 %! inputdlg ({"a1", "a2"}, "title", [1, 2, 3]);
 
diff --git a/scripts/gui/listdlg.m b/scripts/gui/listdlg.m
--- a/scripts/gui/listdlg.m
+++ b/scripts/gui/listdlg.m
@@ -158,41 +158,41 @@ endfunction
 
 %!demo
 %! disp ("- test listdlg with selectionmode single. No caption, no prompt.");
 %! itemlist = {"An item \\alpha", "another", "yet another"};
 %! s = listdlg ("ListString", itemlist, "SelectionMode", "Single");
 %! imax = numel (s);
 %! for i=1:1:imax
 %!   disp (["Selected: ", num2str(i), ": ", itemlist{s(i)}]);
-%! end
+%! endfor
 
 %!demo
 %! disp ("- test listdlg with selectionmode and preselection. Has caption and two lines prompt.");
 %! itemlist = {"An item \\alpha", "another", "yet another"};
 %! s = listdlg ("ListString", itemlist, ...
 %!              "SelectionMode", "Multiple", ...
 %!              "Name", "Selection Dialog", ...
 %!              "InitialValue", [1,2,3,4],
 %!              "PromptString", {"Select <b>an</b> item...", "...or <b>multiple</b> items"});
 %! imax = numel (s);
 %! for i=1:1:imax
 %!   disp (["Selected: ", num2str(i), ": ", itemlist{s(i)}]);
-%! end
+%! endfor
 
 %!demo
 %! disp ("- test listdlg with listsize.");
 %! itemlist = {"Neutron", "Electron", "Quark", "Proton", "Neutrino"};
 %! s = listdlg ("ListString", itemlist,
 %!              "Name", "Bits and Pieces",
 %!              "ListSize", [200 75]);
 %! imax = numel (s);
 %! for i=1:1:imax
 %!   disp (["Selected: ", num2str(i), ": ", itemlist{s(i)}]);
-%! end
+%! endfor
 
 ## Test input validation
 %!error listdlg ()
 %!error listdlg ("SelectionMode")
 %!error <must occur in pairs> listdlg ("SelectionMode", "multiple", "Name")
 %!error <invalid KEY .FooBar.> listdlg ("FooBar", 1)
 %!error <ListString must not be empty> listdlg ("ListString", {})
 %!error <invalid SelectionMode>
diff --git a/scripts/gui/waitbar.m b/scripts/gui/waitbar.m
--- a/scripts/gui/waitbar.m
+++ b/scripts/gui/waitbar.m
@@ -205,53 +205,53 @@ function updatecancelbutton (hf, dummy, 
 
 endfunction
 
 
 %!demo
 %! h = waitbar (0, '0.00%');
 %! for i = 0:0.01:1
 %!   waitbar (i, h, sprintf ('%.2f%%', 100*i));
-%! end
+%! endfor
 %! close (h);
 
 %!demo
 %! h = waitbar (0, 'please wait...');
 %! for i = 0:0.01:0.6
 %!   waitbar (i);
-%! end
+%! endfor
 %! i = 0.3;
 %! waitbar (i, h, 'don''t you hate taking a step backward?');
 %! pause (0.5);
 %! for i = i:0.005:0.7
 %!   waitbar (i, h);
-%! end
+%! endfor
 %! waitbar (i, h, 'or stalling?');
 %! pause (1);
 %! for i = i:0.003:0.8
 %!   waitbar (i, h, 'just a little longer now');
-%! end
+%! endfor
 %! for i = i:0.001:1
 %!   waitbar (i, h, 'please don''t be impatient');
-%! end
+%! endfor
 %! close (h);
 
 %!demo
 %! h1 = waitbar (0, 'Waitbar #1');
 %! h2 = waitbar (0, 'Waitbar #2');
 %! h2pos = get (h2, 'position');
 %! h2pos(1) = h2pos(1) + (h2pos(3) + 50);
 %! set (h2, 'position', h2pos);
 %! pause (0.5);
 %! for i = 1:4
 %!   waitbar (i/4, h1);
 %!   pause (0.5);
 %!   waitbar (i/4, h2);
 %!   pause (0.5);
-%! end
+%! endfor
 %! pause (0.5);
 %! close (h1);
 %! close (h2);
 
 %!demo
 %! clf ();
 %! niter = 9;
 %! l = 1;
diff --git a/scripts/image/autumn.m b/scripts/image/autumn.m
--- a/scripts/image/autumn.m
+++ b/scripts/image/autumn.m
@@ -51,11 +51,11 @@ function map = autumn (n = rows (colorma
 
 endfunction
 
 
 %!demo
 %! ## Show the 'autumn' colormap profile and as an image
 %! cmap = autumn (256);
 %! subplot (2, 1, 1);
-%! rgbplot (cmap, "composite");
+%!  rgbplot (cmap, "composite");
 %! subplot (2, 1, 2);
-%! rgbplot (cmap);
+%!  rgbplot (cmap);
diff --git a/scripts/image/bone.m b/scripts/image/bone.m
--- a/scripts/image/bone.m
+++ b/scripts/image/bone.m
@@ -78,11 +78,11 @@ function map = bone (n = rows (colormap 
 
 endfunction
 
 
 %!demo
 %! ## Show the 'bone' colormap profile and as an image
 %! cmap = bone (256);
 %! subplot (2, 1, 1);
-%! rgbplot (cmap, "composite");
+%!  rgbplot (cmap, "composite");
 %! subplot (2, 1, 2);
-%! rgbplot (cmap);
+%!  rgbplot (cmap);
diff --git a/scripts/image/cool.m b/scripts/image/cool.m
--- a/scripts/image/cool.m
+++ b/scripts/image/cool.m
@@ -50,11 +50,11 @@ function map = cool (n = rows (colormap 
 
 endfunction
 
 
 %!demo
 %! ## Show the 'cool' colormap profile and as an image
 %! cmap = cool (256);
 %! subplot (2, 1, 1);
-%! rgbplot (cmap, "composite");
+%!  rgbplot (cmap, "composite");
 %! subplot (2, 1, 2);
-%! rgbplot (cmap);
+%!  rgbplot (cmap);
diff --git a/scripts/image/copper.m b/scripts/image/copper.m
--- a/scripts/image/copper.m
+++ b/scripts/image/copper.m
@@ -53,11 +53,11 @@ function map = copper (n = rows (colorma
 
 endfunction
 
 
 %!demo
 %! ## Show the 'copper' colormap profile and as an image
 %! cmap = copper (256);
 %! subplot (2, 1, 1);
-%! rgbplot (cmap, "composite");
+%!  rgbplot (cmap, "composite");
 %! subplot (2, 1, 2);
-%! rgbplot (cmap);
+%!  rgbplot (cmap);
diff --git a/scripts/image/cubehelix.m b/scripts/image/cubehelix.m
--- a/scripts/image/cubehelix.m
+++ b/scripts/image/cubehelix.m
@@ -76,12 +76,12 @@ endfunction
 
 
 ## A better demo of this colormap would be a 3D plot in NTSC instead of
 ## RGB values.  That would really show what this colormap is about.
 %!demo
 %! ## Show the 'cubehelix' colormap profile and as an image
 %! cmap = cubehelix (256);
 %! subplot (2, 1, 1);
-%! rgbplot (cmap, "composite");
+%!  rgbplot (cmap, "composite");
 %! subplot (2, 1, 2);
-%! rgbplot (cmap);
+%!  rgbplot (cmap);
 
diff --git a/scripts/image/flag.m b/scripts/image/flag.m
--- a/scripts/image/flag.m
+++ b/scripts/image/flag.m
@@ -48,11 +48,11 @@ function map = flag (n = rows (colormap 
 
 endfunction
 
 
 %!demo
 %! ## Show the 'flag' colormap profile and as an image
 %! cmap = flag (12);  # 4 colors, therefore cycle 3 times
 %! subplot (2, 1, 1);
-%! rgbplot (cmap, "composite");
+%!  rgbplot (cmap, "composite");
 %! subplot (2, 1, 2);
-%! rgbplot (cmap);
+%!  rgbplot (cmap);
diff --git a/scripts/image/gray.m b/scripts/image/gray.m
--- a/scripts/image/gray.m
+++ b/scripts/image/gray.m
@@ -51,11 +51,11 @@ function map = gray (n = rows (colormap 
 
 endfunction
 
 
 %!demo
 %! ## Show the 'gray' colormap profile and as an image
 %! cmap = gray (16);
 %! subplot (2, 1, 1);
-%! rgbplot (cmap, "composite");
+%!  rgbplot (cmap, "composite");
 %! subplot (2, 1, 2);
-%! rgbplot (cmap);
+%!  rgbplot (cmap);
diff --git a/scripts/image/hot.m b/scripts/image/hot.m
--- a/scripts/image/hot.m
+++ b/scripts/image/hot.m
@@ -66,11 +66,11 @@ function map = hot (n = rows (colormap (
 
 endfunction
 
 
 %!demo
 %! ## Show the 'hot' colormap profile and as an image
 %! cmap = hot (256);
 %! subplot (2, 1, 1);
-%! rgbplot (cmap, "composite");
+%!  rgbplot (cmap, "composite");
 %! subplot (2, 1, 2);
-%! rgbplot (cmap);
+%!  rgbplot (cmap);
diff --git a/scripts/image/hsv.m b/scripts/image/hsv.m
--- a/scripts/image/hsv.m
+++ b/scripts/image/hsv.m
@@ -54,11 +54,11 @@ function map = hsv (n = rows (colormap (
 endfunction
 
 
 ## A better demo of this colormap would be to plot the hsv values.
 %!demo
 %! ## Show the 'hsv' colormap profile and as an image
 %! cmap = hsv (256);
 %! subplot (2, 1, 1);
-%! rgbplot (cmap, "composite");
+%!  rgbplot (cmap, "composite");
 %! subplot (2, 1, 2);
-%! rgbplot (cmap);
+%!  rgbplot (cmap);
diff --git a/scripts/image/jet.m b/scripts/image/jet.m
--- a/scripts/image/jet.m
+++ b/scripts/image/jet.m
@@ -85,11 +85,11 @@ function map = jet (n = rows (colormap (
 
 endfunction
 
 
 %!demo
 %! ## Show the 'jet' colormap profile and as an image
 %! cmap = jet (256);
 %! subplot (2, 1, 1);
-%! rgbplot (cmap, "composite");
+%!  rgbplot (cmap, "composite");
 %! subplot (2, 1, 2);
-%! rgbplot (cmap);
+%!  rgbplot (cmap);
diff --git a/scripts/image/lines.m b/scripts/image/lines.m
--- a/scripts/image/lines.m
+++ b/scripts/image/lines.m
@@ -48,11 +48,11 @@ function map = lines (n = rows (colormap
 
 endfunction
 
 
 %!demo
 %! ## Show the 'lines' colormap profile and as an image
 %! cmap = lines (21); # default has 7 colors, therefore cycle 3 times
 %! subplot (2, 1, 1);
-%! rgbplot (cmap, "composite");
+%!  rgbplot (cmap, "composite");
 %! subplot (2, 1, 2);
-%! rgbplot (cmap);
+%!  rgbplot (cmap);
diff --git a/scripts/image/ocean.m b/scripts/image/ocean.m
--- a/scripts/image/ocean.m
+++ b/scripts/image/ocean.m
@@ -60,11 +60,11 @@ function map = ocean (n = rows (colormap
 
 endfunction
 
 
 %!demo
 %! ## Show the 'ocean' colormap profile and as an image
 %! cmap = ocean (256);
 %! subplot (2, 1, 1);
-%! rgbplot (cmap, "composite");
+%!  rgbplot (cmap, "composite");
 %! subplot (2, 1, 2);
-%! rgbplot (cmap);
+%!  rgbplot (cmap);
diff --git a/scripts/image/pink.m b/scripts/image/pink.m
--- a/scripts/image/pink.m
+++ b/scripts/image/pink.m
@@ -68,11 +68,11 @@ function map = pink (n = rows (colormap 
 
 endfunction
 
 
 %!demo
 %! ## Show the 'pink' colormap profile and as an image
 %! cmap = pink (256);
 %! subplot (2, 1, 1);
-%! rgbplot (cmap, "composite");
+%!  rgbplot (cmap, "composite");
 %! subplot (2, 1, 2);
-%! rgbplot (cmap);
+%!  rgbplot (cmap);
diff --git a/scripts/image/prism.m b/scripts/image/prism.m
--- a/scripts/image/prism.m
+++ b/scripts/image/prism.m
@@ -48,11 +48,11 @@ function map = prism (n = rows (colormap
 
 endfunction
 
 
 %!demo
 %! ## Show the 'prism' colormap profile and as an image
 %! cmap = prism (18); # 6 colors, therefore cycle 3 times
 %! subplot (2, 1, 1);
-%! rgbplot (cmap, "composite");
+%!  rgbplot (cmap, "composite");
 %! subplot (2, 1, 2);
-%! rgbplot (cmap);
+%!  rgbplot (cmap);
diff --git a/scripts/image/rainbow.m b/scripts/image/rainbow.m
--- a/scripts/image/rainbow.m
+++ b/scripts/image/rainbow.m
@@ -64,11 +64,11 @@ function map = rainbow (n = rows (colorm
 
 endfunction
 
 
 %!demo
 %! ## Show the 'rainbow' colormap profile and as an image
 %! cmap = rainbow (256);
 %! subplot (2, 1, 1);
-%! rgbplot (cmap, "composite");
+%!  rgbplot (cmap, "composite");
 %! subplot (2, 1, 2);
-%! rgbplot (cmap);
+%!  rgbplot (cmap);
diff --git a/scripts/image/rgbplot.m b/scripts/image/rgbplot.m
--- a/scripts/image/rgbplot.m
+++ b/scripts/image/rgbplot.m
@@ -75,19 +75,19 @@ function h = rgbplot (cmap, style = "pro
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
 %! subplot (1, 2, 1);
-%! rgbplot (ocean, "profile");
+%!  rgbplot (ocean, "profile");
 %! subplot (1, 2, 2);
-%! rgbplot (ocean, "composite");
+%!  rgbplot (ocean, "composite");
 
 ## Test input validation
 %!error rgbplot ()
 %!error rgbplot (1,2)
 %!error <CMAP must be a valid colormap> rgbplot ({0 1 0})
 %!error <STYLE must be a string> rgbplot ([0 1 0], 2)
 %!error <unknown style 'nostyle'> rgbplot ([0 1 0], "nostyle")
 
diff --git a/scripts/image/spring.m b/scripts/image/spring.m
--- a/scripts/image/spring.m
+++ b/scripts/image/spring.m
@@ -50,11 +50,11 @@ function map = spring (n = rows (colorma
 
 endfunction
 
 
 %!demo
 %! ## Show the 'spring' colormap profile and as an image
 %! cmap = spring (256);
 %! subplot (2, 1, 1);
-%! rgbplot (cmap, "composite");
+%!  rgbplot (cmap, "composite");
 %! subplot (2, 1, 2);
-%! rgbplot (cmap);
+%!  rgbplot (cmap);
diff --git a/scripts/image/summer.m b/scripts/image/summer.m
--- a/scripts/image/summer.m
+++ b/scripts/image/summer.m
@@ -51,11 +51,11 @@ function map = summer (n = rows (colorma
 
 endfunction
 
 
 %!demo
 %! ## Show the 'summer' colormap profile and as an image
 %! cmap = summer (256);
 %! subplot (2, 1, 1);
-%! rgbplot (cmap, "composite");
+%!  rgbplot (cmap, "composite");
 %! subplot (2, 1, 2);
-%! rgbplot (cmap);
+%!  rgbplot (cmap);
diff --git a/scripts/image/viridis.m b/scripts/image/viridis.m
--- a/scripts/image/viridis.m
+++ b/scripts/image/viridis.m
@@ -308,11 +308,11 @@ function map = viridis (n = rows (colorm
 endfunction
 
 
 ## A better demo of this colormap would be to plot the CIECAM02 values.
 %!demo
 %! ## Show the 'viridis' colormap profile and as an image
 %! cmap = viridis (256);
 %! subplot (2, 1, 1);
-%! rgbplot (cmap, "composite");
+%!  rgbplot (cmap, "composite");
 %! subplot (2, 1, 2);
-%! rgbplot (cmap);
+%!  rgbplot (cmap);
diff --git a/scripts/image/white.m b/scripts/image/white.m
--- a/scripts/image/white.m
+++ b/scripts/image/white.m
@@ -40,11 +40,11 @@ function map = white (n = rows (colormap
 
 endfunction
 
 
 %!demo
 %! ## Show the 'white' colormap profile and as an image
 %! cmap = white (256);
 %! subplot (2, 1, 1);
-%! rgbplot (cmap, "composite");
+%!  rgbplot (cmap, "composite");
 %! subplot (2, 1, 2);
-%! rgbplot (cmap);
+%!  rgbplot (cmap);
diff --git a/scripts/image/winter.m b/scripts/image/winter.m
--- a/scripts/image/winter.m
+++ b/scripts/image/winter.m
@@ -50,11 +50,11 @@ function map = winter (n = rows (colorma
 
 endfunction
 
 
 %!demo
 %! ## Show the 'winter' colormap profile and as an image
 %! cmap = winter (256);
 %! subplot (2, 1, 1);
-%! rgbplot (cmap, "composite");
+%!  rgbplot (cmap, "composite");
 %! subplot (2, 1, 2);
-%! rgbplot (cmap);
+%!  rgbplot (cmap);
diff --git a/scripts/plot/appearance/annotation.m b/scripts/plot/appearance/annotation.m
--- a/scripts/plot/appearance/annotation.m
+++ b/scripts/plot/appearance/annotation.m
@@ -1275,177 +1275,177 @@ function update_rect (h, dummy, prop, hr
   endif
 
 endfunction
 
 
 ## FIXME: the additional regular axes is necessary for fltk to draw the
 ##        annotation axes.
 %!demo
-%! clf; axes ('visible', 'off');
-%! annotation ('textbox', [.25 .9 .5 .09], 'string', ...
-%!             {'Right Click on annotation objects', ...
-%!              'to customize their appearance'}, ...
-%!             'horizontalalignment', 'center', 'fitboxtotext', 'off');
-%! annotation ('ellipse', [.2 .2 .6 .6], 'linewidth', 4);
+%! clf; axes ("visible", "off");
+%! annotation ("textbox", [.25 .9 .5 .09], "string", ...
+%!             {"Right Click on annotation objects", ...
+%!              "to customize their appearance"}, ...
+%!             "horizontalalignment", "center", "fitboxtotext", "off");
+%! annotation ("ellipse", [.2 .2 .6 .6], "linewidth", 4);
 %! ang = pi/2:-pi/2:-pi;
-%! lab = {'N', 'W', 'S', 'E'};
+%! lab = {"N", "W", "S", "E"};
 %! x0 = 0.5;
 %! y0 = 0.5;
 %! r = 0.3;
 %! for ii = 1:4
 %!   x = r * cos (ang(ii)) + x0;
 %!   y = r * sin (ang(ii)) + y0;
-%!   annotation ('textarrow', [x x0], [y y0], ...
-%!               'string', lab{ii},  'fontsize', 20);
-%! end
+%!   annotation ("textarrow", [x x0], [y y0], ...
+%!               "string", lab{ii},  "fontsize", 20);
+%! endfor
 %!
-%! h = annotation ('doublearrow', [x0 x0], [y0-r y0+r], ...
-%!                 'head1style', 'diamond', 'head1length', 60, ...
-%!                 'head2style', 'diamond', 'head2length', 60);
+%! h = annotation ("doublearrow", [x0 x0], [y0-r y0+r], ...
+%!                 "head1style", "diamond", "head1length", 60, ...
+%!                 "head2style", "diamond", "head2length", 60);
 
 %!demo
-%! clf; axes ('visible', 'off');
+%! clf; axes ("visible", "off");
 %! plot (1:10);
-%! xlabel ('X-LABEL');
-%! ylabel ('LARGE Y-LABEL', 'fontsize', 20);
-%! title ('FIGURE LAYOUT', 'fontsize', 24);
+%! xlabel ("X-LABEL");
+%! ylabel ("LARGE Y-LABEL", "fontsize", 20);
+%! title ("FIGURE LAYOUT", "fontsize", 24);
 %!
-%! ti = get (gca, 'tightinset');
-%! pos = get (gca, 'position');
+%! ti = get (gca, "tightinset");
+%! pos = get (gca, "position");
 %! pos(1:2) = pos(1:2) - ti(1:2);
 %! pos(3) = pos(3) + ti (1) + ti (3);
 %! pos(4) = pos(4) + ti (2) + ti (4);
 %!
-%! ht = annotation ('textbox', pos, 'string', ' Position + tighinset', ...
-%!                  'fitboxtotext', 'off', 'linestyle', '--', ...
-%!                  'edgecolor', 'g', 'linewidth', 3, 'color', 'g', ...
-%!                  'verticalalignment', 'bottom', 'fontsize', 15);
+%! ht = annotation ("textbox", pos, "string", " Position + tighinset", ...
+%!                  "fitboxtotext", "off", "linestyle", "--", ...
+%!                  "edgecolor", "g", "linewidth", 3, "color", "g", ...
+%!                  "verticalalignment", "bottom", "fontsize", 15);
 %!
-%! ho = annotation ('textbox', get (gca, 'outerposition'), ...
-%!                  'string', ' Outerposition','fitboxtotext', 'off', ...
-%!                  'linestyle', '--', 'edgecolor', 'r', ...
-%!                  'linewidth', 3, 'color', 'r', ...
-%!                  'verticalalignment', 'bottom', 'fontsize', 15);
+%! ho = annotation ("textbox", get (gca, "outerposition"), ...
+%!                  "string", " Outerposition","fitboxtotext", "off", ...
+%!                  "linestyle", "--", "edgecolor", "r", ...
+%!                  "linewidth", 3, "color", "r", ...
+%!                  "verticalalignment", "bottom", "fontsize", 15);
 %!
-%! hi = annotation ('textbox', get (gca, 'position'), ...
-%!                  'string', ' Position','fitboxtotext', 'off', ...
-%!                  'linestyle', '--', 'edgecolor', 'b', ...
-%!                  'linewidth', 3, 'color', 'b', ...
-%!                  'verticalalignment', 'bottom', 'fontsize', 15);
+%! hi = annotation ("textbox", get (gca, "position"), ...
+%!                  "string", " Position","fitboxtotext", "off", ...
+%!                  "linestyle", "--", "edgecolor", "b", ...
+%!                  "linewidth", 3, "color", "b", ...
+%!                  "verticalalignment", "bottom", "fontsize", 15);
 
 %!demo
-%! clf; axes ('visible', 'off');
-%! h = annotation ('arrow');
+%! clf; axes ("visible", "off");
+%! h = annotation ("arrow");
 %!
-%! %% Get allowed headstyles
-%! styles = set (h, 'headstyle');
+%! ## Get allowed headstyles
+%! styles = set (h, "headstyle");
 %! delete (h);
 %!
-%! %% Textbox for the title
-%! annotation ('textbox', [0.1 0 0.8 1], 'string', ...
+%! ## Textbox for the title
+%! annotation ("textbox", [0.1 0 0.8 1], "string", ...
 %!             '"headstyle" property:', ...
-%!             'backgroundcolor', [0.7 0.7 0.7], 'fontsize', 20, ...
-%!             'fitboxtotext', 'off', 'verticalalignment', 'top', ...
-%!             'horizontalalignment', 'center');
+%!             "backgroundcolor", [0.7 0.7 0.7], "fontsize", 20, ...
+%!             "fitboxtotext", "off", "verticalalignment", "top", ...
+%!             "horizontalalignment", "center");
 %!
-%! %% Textarrows
+%! ## Textarrows
 %! ns = numel (styles);
 %! nrows = ceil (ns/2);
 %! dy = 1/nrows;
 %! y = 1 - dy/2;
 %!
 %! jj = 1;
 %! for ii = 1:nrows
-%!   annotation ('textarrow', [0.3 0.5], [y y], ...
-%!               'string', ['"' styles{jj} '"'], 'fontsize', 15, ...
-%!               'headstyle', styles{jj}, 'textcolor', 'b');
+%!   annotation ("textarrow", [0.3 0.5], [y y], ...
+%!               "string", ['"' styles{jj} '"'], "fontsize", 15, ...
+%!               "headstyle", styles{jj}, "textcolor", "b");
 %!   jj = jj + 1;
 %!   if (jj <= ns)
-%!     annotation ('textarrow', [0.7 0.5], [y y], ...
-%!                 'string', ['"' styles{jj} '"'], 'fontsize', 15, ...
-%!                 'headstyle', styles{jj}, 'textcolor', 'b');
+%!     annotation ("textarrow", [0.7 0.5], [y y], ...
+%!                 "string", ['"' styles{jj} '"'], "fontsize", 15, ...
+%!                 "headstyle", styles{jj}, "textcolor", "b");
 %!   jj = jj + 1;
-%!   end
+%!   endif
 %!   y = y - dy;
-%! end
-%! annotation ('line', [0.5 0.5], [dy/2 1-dy/2], 'linestyle', '-.');
+%! endfor
+%! annotation ("line", [0.5 0.5], [dy/2 1-dy/2], "linestyle", "-.");
 
 %!demo
-%! clf; axes ('visible', 'off');
+%! clf; axes ("visible", "off");
 %!
-%! %% Textbox for the title
-%! annotation ('textbox', [0.1 0 0.8 1], 'string', ...
-%!             'Text arrows: text rotation', ...
-%!             'backgroundcolor', [0.7 0.7 0.7], 'fontsize', 20, ...
-%!             'fitboxtotext', 'off', 'verticalalignment', 'top', ...
-%!             'horizontalalignment', 'center');
+%! ## Textbox for the title
+%! annotation ("textbox", [0.1 0 0.8 1], "string", ...
+%!             "Text arrows: text rotation", ...
+%!             "backgroundcolor", [0.7 0.7 0.7], "fontsize", 20, ...
+%!             "fitboxtotext", "off", "verticalalignment", "top", ...
+%!             "horizontalalignment", "center");
 %!
-%! %% Textarrows
+%! ## Textarrows
 %! for ii = 1:10
 %!   rot = floor (rand (1) * 360 / 90) * 90;
-%!   annotation ('textarrow', 0.5 + [(0.6 * (rand(1) - .5)) 0], ...
+%!   annotation ("textarrow", 0.5 + [(0.6 * (rand(1) - .5)) 0], ...
 %!               0.5 + [(0.6 * (rand(1) - .5)) 0], ...
-%!               'string', 'A text', ...
-%!               'headstyle', 'none', 'textrotation', rot);
-%! end
+%!               "string", "A text", ...
+%!               "headstyle", "none", "textrotation", rot);
+%! endfor
 
 %!demo
-%! clf; axes ('visible', 'off');
+%! clf; axes ("visible", "off");
 %!
-%! %% Textbox for the title
-%! annotation ('textbox', [0.1 0 0.8 1], 'string', ...
-%!             'Text arrows: text alignment', ...
-%!             'backgroundcolor', [0.7 0.7 0.7], 'fontsize', 20, ...
-%!             'fitboxtotext', 'off', 'verticalalignment', 'top', ...
-%!             'horizontalalignment', 'center');
+%! ## Textbox for the title
+%! annotation ("textbox", [0.1 0 0.8 1], "string", ...
+%!             "Text arrows: text alignment", ...
+%!             "backgroundcolor", [0.7 0.7 0.7], "fontsize", 20, ...
+%!             "fitboxtotext", "off", "verticalalignment", "top", ...
+%!             "horizontalalignment", "center");
 %!
-%! %% Textarrows
-%! halig = {'right', 'center', 'left'};
+%! ## Textarrows
+%! halig = {"right", "center", "left"};
 %! ii = 1;
 %! for x = .3:.2:.7
-%!   annotation ('textarrow', [x .5], [.5 .9], ...
-%!               'string', {'Multiple lines', 'text'}, ...
-%!               'headstyle', 'none', 'horizontalalignment', halig{ii});
+%!   annotation ("textarrow", [x .5], [.5 .9], ...
+%!               "string", {"Multiple lines", "text"}, ...
+%!               "headstyle", "none", "horizontalalignment", halig{ii});
 %!   ii = ii + 1;
-%! end
+%! endfor
 
 %!demo
-%! clf; axes ('visible', 'off');
+%! clf; axes ("visible", "off");
 %!
 %! x = 0:0.01:2*pi;
 %! y = sin (x);
 %! plot (x, y);
 %!
-%! %% Extrema
+%! ## Extrema
 %! x0 = [pi/2 3*pi/2];
 %! y0 = [1 -1];
 %!
-%! %% Convert axes coordinates into normalized coordinates
+%! ## Convert axes coordinates into normalized coordinates
 %! xl = xlim ();
 %! yl = [-1.2 1.5];
 %! ylim (yl);
 %! x0 = (x0 - xl(1)) / diff(xl);
 %! y0 = (y0 - yl(1)) / diff(yl);
 %!
-%! pos = get (gca (), 'position');
+%! pos = get (gca (), "position");
 %! x0 = x0*pos(3) + pos(1);
 %! y0 = y0*pos(4) + pos(2);
 %!
 %!
-%! %% Textarrows
+%! ## Textarrows
 %! for ii = 1:2
-%!   annotation ('doublearrow', [(x0(ii) - .05) (x0(ii) + .05)], ...
-%!               [y0(ii) y0(ii)], 'head1style', 'vback3', ...
-%!               'head2style', 'vback3', ...
-%!               'head1width', 4, 'head2width', 4)
-%!   h = annotation ('textarrow', [0.5 x0(ii)], [.85 y0(ii)], ...
-%!                   'linestyle', '--', 'headstyle', 'none');
-%! end
-%! set (h, 'string', 'Extrema', 'fontsize', 15);
+%!   annotation ("doublearrow", [(x0(ii) - .05) (x0(ii) + .05)], ...
+%!               [y0(ii) y0(ii)], "head1style", "vback3", ...
+%!               "head2style", "vback3", ...
+%!               "head1width", 4, "head2width", 4)
+%!   h = annotation ("textarrow", [0.5 x0(ii)], [.85 y0(ii)], ...
+%!                   "linestyle", "--", "headstyle", "none");
+%! endfor
+%! set (h, "string", "Extrema", "fontsize", 15);
 
 ## test line properties
 %!test
 %! hf = figure ("visible", "off");
 %! hax = axes ();
 %! unwind_protect
 %!   h = annotation ("line", [0.2 0.7], [0.2 0.7], "linewidth", 2,
 %!                   "linestyle", "--", "color", "r");
diff --git a/scripts/plot/appearance/axis.m b/scripts/plot/appearance/axis.m
--- a/scripts/plot/appearance/axis.m
+++ b/scripts/plot/appearance/axis.m
@@ -400,218 +400,218 @@ endfunction
 
 %!demo
 %! clf;
 %! t = 0:0.01:2*pi;
 %! x = sin (t);
 %!
 %! subplot (221);
 %!  plot (t, x);
-%!  title ('normal plot');
+%!  title ("normal plot");
 %!
 %! subplot (222);
 %!  plot (t, x);
-%!  title ('square plot');
-%!  axis ('square');
+%!  title ("square plot");
+%!  axis ("square");
 %!
 %! subplot (223);
 %!  plot (t, x);
-%!  title ('equal plot');
-%!  axis ('equal');
+%!  title ("equal plot");
+%!  axis ("equal");
 %!
 %! subplot (224);
 %!  plot (t, x);
-%!  title ('normal plot again');
-%!  axis ('normal');
+%!  title ("normal plot again");
+%!  axis ("normal");
 
 %!demo
 %! clf;
 %! t = 0:0.01:2*pi;
 %! x = sin (t);
 %!
 %! subplot (121);
 %!  plot (t, x);
-%!  title ('ij plot');
-%!  axis ('ij');
+%!  title ("ij plot");
+%!  axis ("ij");
 %!
 %! subplot (122);
 %!  plot (t, x);
-%!  title ('xy plot');
-%!  axis ('xy');
+%!  title ("xy plot");
+%!  axis ("xy");
 
 %!demo
 %! clf;
 %! t = 0:0.01:2*pi;
 %! x = sin (t);
 %!
 %! subplot (331);
 %!  plot (t, x);
-%!  title ('x ticks and labels');
-%!  axis ('ticx');
+%!  title ("x ticks and labels");
+%!  axis ("ticx");
 %!
 %! subplot (332);
 %!  plot (t, x);
-%!  title ('y ticks and labels');
-%!  axis ('ticy');
+%!  title ("y ticks and labels");
+%!  axis ("ticy");
 %!
 %! subplot (333);
 %!  plot (t, x);
-%!  title ('axis off');
-%!  axis ('off');
+%!  title ("axis off");
+%!  axis ("off");
 %!
 %! subplot (334);
 %!  plot (t, x);
-%!  title ('x and y ticks, x labels');
-%!  axis ('labelx','tic');
+%!  title ("x and y ticks, x labels");
+%!  axis ("labelx","tic");
 %!
 %! subplot (335);
 %!  plot (t, x);
-%!  title ('x and y ticks, y labels');
-%!  axis ('labely','tic');
+%!  title ("x and y ticks, y labels");
+%!  axis ("labely","tic");
 %!
 %! subplot (336);
 %!  plot (t, x);
-%!  title ('all ticks but no labels');
-%!  axis ('nolabel','tic');
+%!  title ("all ticks but no labels");
+%!  axis ("nolabel","tic");
 %!
 %! subplot (337);
 %!  plot (t, x);
-%!  title ('x ticks, no labels');
-%!  axis ('nolabel','ticx');
+%!  title ("x ticks, no labels");
+%!  axis ("nolabel","ticx");
 %!
 %! subplot (338);
 %!  plot (t, x);
-%!  title ('y ticks, no labels');
-%!  axis ('nolabel','ticy');
+%!  title ("y ticks, no labels");
+%!  axis ("nolabel","ticy");
 %!
 %! subplot (339);
 %!  plot (t, x);
-%!  title ('all ticks and labels');
-%!  axis ('on');
+%!  title ("all ticks and labels");
+%!  axis ("on");
 
 %!demo
 %! clf;
 %! t = 0:0.01:2*pi;
 %! x = sin (t);
 %!
 %! subplot (321);
 %!  plot (t, x);
-%!  title ('axes at [0 3 0 1]');
+%!  title ("axes at [0 3 0 1]");
 %!  axis ([0,3,0,1]);
 %!
 %! subplot (322);
 %!  plot (t, x);
-%!  title ('auto');
-%!  axis ('auto');
+%!  title ("auto");
+%!  axis ("auto");
 %!
 %! subplot (323);
-%!  plot (t, x, ';sine [0:2pi];'); hold on;
-%!  plot (-3:3,-3:3, ';line (-3,-3)->(3,3);'); hold off;
-%!  title ('manual');
-%!  axis ('manual');
+%!  plot (t, x, ";sine [0:2pi];"); hold on;
+%!  plot (-3:3,-3:3, ";line (-3,-3)->(3,3);"); hold off;
+%!  title ("manual");
+%!  axis ("manual");
 %!
 %! subplot (324);
-%!  plot (t, x, ';sine [0:2pi];');
-%!  title ('axes at [0 3 0 1], then autox');
+%!  plot (t, x, ";sine [0:2pi];");
+%!  title ("axes at [0 3 0 1], then autox");
 %!  axis ([0,3,0,1]);
-%!  axis ('autox');
+%!  axis ("autox");
 %!
 %! subplot (325);
-%!  plot (t, x, ';sine [0:2pi];');
-%!  title ('axes at [3 6 0 1], then autoy');
+%!  plot (t, x, ";sine [0:2pi];");
+%!  title ("axes at [3 6 0 1], then autoy");
 %!  axis ([3,6,0,1]);
-%!  axis ('autoy');
+%!  axis ("autoy");
 %!
 %! subplot (326);
 %!  plot (t, sin(t), t, -2*sin(t/2));
-%!  axis ('tight');
-%!  title ('tight');
+%!  axis ("tight");
+%!  title ("tight");
 
 %!demo
 %! clf;
 %! x = 0:0.1:10;
 %! plot (x, sin(x));
 %! axis image;
-%! title ({'image', 'equivalent to "tight" & "equal"'});
+%! title ({"image", 'equivalent to "tight" & "equal"'});
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! [x,y,z] = peaks (50);
 %! x1 = max (x(:));
 %! pcolor (x-x1, y-x1/2, z);
 %! hold on;
 %! [x,y,z] = sombrero ();
 %! s = x1 / max (x(:));
 %! pcolor (s*x+x1, s*y+x1/2, 5*z);
 %! axis tight;
 
 %!demo
 %! clf;
 %! x = -10:10;
 %! plot (x,x, x,-x);
-%! set (gca, 'yscale', 'log');
-%! legend ({'x >= 1', 'x <= 1'}, 'location', 'north');
-%! title ('ylim = [1, 10]');
+%! set (gca, "yscale", "log");
+%! legend ({"x >= 1", "x <= 1"}, "location", "north");
+%! title ("ylim = [1, 10]");
 
 %!demo
 %! clf;
-%! loglog (1:20, '-s');
+%! loglog (1:20, "-s");
 %! axis tight;
 
 %!demo
 %! clf;
 %! x = -10:0.1:10;
 %! y = sin (x)./(1 + abs (x)) + 0.1*x - 0.4;
 %! plot (x, y);
-%! set (gca, 'xaxislocation', 'origin');
-%! set (gca, 'yaxislocation', 'origin');
+%! set (gca, "xaxislocation", "origin");
+%! set (gca, "yaxislocation", "origin");
 %! box off;
-%! title ({'no plot box', 'xaxislocation = origin, yaxislocation = origin'});
+%! title ({"no plot box", "xaxislocation = origin, yaxislocation = origin"});
 
 %!demo
 %! clf;
 %! x = -10:0.1:10;
 %! y = sin (x)./(1+abs (x)) + 0.1*x - 0.4;
 %! plot (x, y);
-%! set (gca, 'xaxislocation', 'origin');
-%! set (gca, 'yaxislocation', 'left');
+%! set (gca, "xaxislocation", "origin");
+%! set (gca, "yaxislocation", "left");
 %! box off;
-%! title ({'no plot box', 'xaxislocation = origin, yaxislocation = left'});
+%! title ({"no plot box", "xaxislocation = origin, yaxislocation = left"});
 
 %!demo
 %! clf;
 %! x = -10:0.1:10;
 %! y = sin (x)./(1+abs (x)) + 0.1*x - 0.4;
 %! plot (x, y);
-%! title ('no plot box');
-%! set (gca, 'xaxislocation', 'origin');
-%! set (gca, 'yaxislocation', 'right');
+%! title ("no plot box");
+%! set (gca, "xaxislocation", "origin");
+%! set (gca, "yaxislocation", "right");
 %! box off;
-%! title ({'no plot box', 'xaxislocation = origin, yaxislocation = right'});
+%! title ({"no plot box", "xaxislocation = origin, yaxislocation = right"});
 
 %!demo
 %! clf;
 %! x = -10:0.1:10;
 %! y = sin (x)./(1+abs (x)) + 0.1*x - 0.4;
 %! plot (x, y);
-%! set (gca, 'xaxislocation', 'bottom');
-%! set (gca, 'yaxislocation', 'origin');
+%! set (gca, "xaxislocation", "bottom");
+%! set (gca, "yaxislocation", "origin");
 %! box off;
-%! title ({'no plot box', 'xaxislocation = bottom, yaxislocation = origin'});
+%! title ({"no plot box", "xaxislocation = bottom, yaxislocation = origin"});
 
 %!demo
 %! clf;
 %! x = -10:0.1:10;
 %! y = sin (x)./(1+abs (x)) + 0.1*x - 0.4;
 %! plot (x, y);
-%! set (gca, 'xaxislocation', 'top');
-%! set (gca, 'yaxislocation', 'origin');
+%! set (gca, "xaxislocation", "top");
+%! set (gca, "yaxislocation", "origin");
 %! box off;
-%! title ({'no plot box', 'xaxislocation = top, yaxislocation = origin'});
+%! title ({"no plot box", "xaxislocation = top, yaxislocation = origin"});
 
 %!test
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   plot (11:20, [21:24, NaN, -Inf, 27:30]);
 %!   hold on;
 %!   plot (11:20, 25.5 + rand (10));
 %!   axis tight;
diff --git a/scripts/plot/appearance/clabel.m b/scripts/plot/appearance/clabel.m
--- a/scripts/plot/appearance/clabel.m
+++ b/scripts/plot/appearance/clabel.m
@@ -134,20 +134,20 @@ function h = clabel (c, varargin)
     h = htmp;
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! [c, h] = contour (peaks (), -4:6);
-%! clabel (c, h, -4:2:6, 'fontsize', 12);
-%! title ('clabel() labeling every other contour');
+%! clabel (c, h, -4:2:6, "fontsize", 12);
+%! title ("clabel() labeling every other contour");
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! [c, h] = contourf (peaks (), -7:6);
-%! clabel (c, h, -6:2:6, 'fontsize', 12);
-%! title ('clabel() labeling every other contour');
+%! clabel (c, h, -6:2:6, "fontsize", 12);
+%! title ("clabel() labeling every other contour");
 
diff --git a/scripts/plot/appearance/daspect.m b/scripts/plot/appearance/daspect.m
--- a/scripts/plot/appearance/daspect.m
+++ b/scripts/plot/appearance/daspect.m
@@ -98,46 +98,46 @@ endfunction
 
 
 %!demo
 %! clf;
 %! x = 0:0.01:4;
 %! plot (x,cos(x), x,sin(x));
 %! axis square;
 %! daspect ([1 1 1]);
-%! title ('square plot-box with axis limits [0, 4, -2, 2]');
+%! title ("square plot-box with axis limits [0, 4, -2, 2]");
 
 %!demo
 %! clf;
 %! x = 0:0.01:4;
 %! plot (x,cos (x), x,sin (x));
 %! axis ([0 4 -1 1]);
 %! daspect ([2 1 1]);
-%! title ('square plot-box with axis limits [0, 4, -1, 1]');
+%! title ("square plot-box with axis limits [0, 4, -1, 1]");
 
 %!demo
 %! clf;
 %! x = 0:0.01:4;
 %! plot (x,cos(x), x,sin(x));
 %! daspect ([1 2 1]);
 %! pbaspect ([2 1 1]);
-%! title ('2x1 plot box with axis limits [0, 4, -2, 2]');
+%! title ("2x1 plot box with axis limits [0, 4, -2, 2]");
 
 %!demo
 %! clf;
 %! x = 0:0.01:4;
 %! plot (x,cos(x), x, sin(x));
 %! axis square;
-%! set (gca, 'activepositionproperty', 'position');
+%! set (gca, "activepositionproperty", "position");
 %! daspect ([1 1 1]);
-%! title ('square plot-box with axis limits [0, 4, -2, 2]');
+%! title ("square plot-box with axis limits [0, 4, -2, 2]");
 
 %!demo
 %! clf;
 %! x = 0:0.01:4;
 %! plot (x,cos(x), x,sin(x));
 %! axis ([0 4 -1 1]);
-%! set (gca, 'activepositionproperty', 'position');
+%! set (gca, "activepositionproperty", "position");
 %! daspect ([2 1 1]);
-%! title ('square plot-box with axis limits [0, 4, -1, 1]');
+%! title ("square plot-box with axis limits [0, 4, -1, 1]");
 
 ## FIXME: need some input validation tests
 
diff --git a/scripts/plot/appearance/datetick.m b/scripts/plot/appearance/datetick.m
--- a/scripts/plot/appearance/datetick.m
+++ b/scripts/plot/appearance/datetick.m
@@ -64,32 +64,32 @@ endfunction
 
 
 %!demo
 %! clf;
 %! yr = 1900:10:2000;
 %! pop = [76.094, 92.407, 106.461, 123.077 131.954, 151.868, 179.979, ...
 %!        203.984, 227.225, 249.623, 282.224];
 %! plot (datenum (yr, 1, 1), pop);
-%! title ('US population (millions)');
-%! xlabel ('Year');
-%! datetick ('x', 'YYYY');
+%! title ("US population (millions)");
+%! xlabel ("Year");
+%! datetick ("x", "YYYY");
 
 %!demo
 %! clf;
 %! yr = 1988:2:2002;
 %! yr = datenum (yr,1,1);
 %! pr = [12.1 13.3 12.6 13.1 13.3 14.1 14.4 15.2];
-%! plot (yr, pr, '-o');
-%! xlabel ('year');
-%! ylabel ('average price');
+%! plot (yr, pr, "-o");
+%! xlabel ("year");
+%! ylabel ("average price");
 %! ax = gca;
-%! set (ax, 'xtick', datenum (1990:5:2005,1,1));
-%! datetick ('x', 2, 'keepticks');
-%! set (ax, 'ytick', 12:16);
+%! set (ax, "xtick", datenum (1990:5:2005,1,1));
+%! datetick ("x", 2, "keepticks");
+%! set (ax, "ytick", 12:16);
 
 ## Remove from test statistics.  No real tests possible.
 %!assert (1)
 
 function __datetick__ (varargin)
 
   keeplimits = false;
   idx = strcmpi (varargin, "keeplimits");
diff --git a/scripts/plot/appearance/grid.m b/scripts/plot/appearance/grid.m
--- a/scripts/plot/appearance/grid.m
+++ b/scripts/plot/appearance/grid.m
@@ -123,40 +123,40 @@ function grid (varargin)
 endfunction
 
 
 %!demo
 %! clf;
 %! subplot (2,2,1);
 %!  plot (1:100);
 %!  grid off;
-%!  title ('no grid');
+%!  title ("no grid");
 %! subplot (2,2,2);
 %!  plot (1:100);
 %!  grid on;
-%!  title ('grid on');
+%!  title ("grid on");
 %! subplot (2,2,3);
 %!  plot (1:100);
 %!  grid off;
-%!  title ('no grid');
+%!  title ("no grid");
 %! subplot (2,2,4);
 %!  plot (1:100);
 %!  grid minor;
-%!  title ('grid minor');
+%!  title ("grid minor");
 
 %!demo
 %! subplot (2,2,1);
 %!  semilogy (1:100);
 %!  grid off;
-%!  title ('no grid');
+%!  title ("no grid");
 %! subplot (2,2,2);
 %!  semilogy (1:100);
 %!  grid on;
-%!  title ('grid on');
+%!  title ("grid on");
 %! subplot (2,2,3);
 %!  semilogy (1:100);
 %!  grid off;
-%!  title ('no grid');
+%!  title ("no grid");
 %! subplot (2,2,4);
 %!  semilogy (1:100);
 %!  grid minor;
-%!  title ('grid minor');
+%!  title ("grid minor");
 
diff --git a/scripts/plot/appearance/legend.m b/scripts/plot/appearance/legend.m
--- a/scripts/plot/appearance/legend.m
+++ b/scripts/plot/appearance/legend.m
@@ -1225,388 +1225,388 @@ function updateline (h, ~, hlegend, line
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
 %! plot (rand (2));
-%! title ('legend called with cellstr and string inputs for labels');
-%! h = legend ({'foo'}, 'bar');
-%! legend (h, 'location', 'northeastoutside');
-%! set (h, 'fontsize', 20);
+%! title ("legend called with cellstr and string inputs for labels");
+%! h = legend ({"foo"}, "bar");
+%! legend (h, "location", "northeastoutside");
+%! set (h, "fontsize", 20);
 
 %!demo
 %! clf;
 %! plot (rand (3));
 %! title ('legend ("show") without inputs creates default labels');
-%! h = legend ('show');
+%! h = legend ("show");
 
 %!demo
 %! clf;
 %! x = 0:1;
-%! plot (x,x,';I am Blue;', x,2*x, x,3*x,';I am Red;');
-%! h = legend ('location', 'northeastoutside');
+%! plot (x,x,";I am Blue;", x,2*x, x,3*x,";I am Red;");
+%! h = legend ("location", "northeastoutside");
 %! ## Placing legend inside should return axes to original size
-%! legend (h, 'location', 'northeast');
-%! title ('Blue and Red keys, with Green missing');
+%! legend (h, "location", "northeast");
+%! title ("Blue and Red keys, with Green missing");
 
 %!demo
 %! clf;
 %! plot (1:10, 1:10, 1:10, fliplr (1:10));
-%! title ('incline is blue and decline is green');
-%! legend ({'I am blue', 'I am green'}, 'location', 'east');
+%! title ("incline is blue and decline is green");
+%! legend ({"I am blue", "I am green"}, "location", "east");
 %! legend hide
 %! legend show
 
 %!demo
 %! clf;
 %! plot (1:10, 1:10, 1:10, fliplr (1:10));
-%! title ('Legend with keys in horizontal orientation');
-%! legend ({'I am blue', 'I am green'}, ...
-%!         'location', 'east', 'orientation', 'horizontal');
+%! title ("Legend with keys in horizontal orientation");
+%! legend ({"I am blue", "I am green"}, ...
+%!         "location", "east", "orientation", "horizontal");
 %! legend boxoff
 %! legend boxon
 
 %!demo
 %! clf;
 %! plot (1:10, 1:10, 1:10, fliplr (1:10));
-%! title ('Legend with box off');
-%! legend ({'I am blue', 'I am green'}, 'location', 'east');
+%! title ("Legend with box off");
+%! legend ({"I am blue", "I am green"}, "location", "east");
 %! legend boxoff
 
 %!demo
 %! clf;
 %! plot (1:10, 1:10, 1:10, fliplr (1:10));
-%! title ('Legend with text to the left of key');
-%! legend ({'I am blue', 'I am green'}, 'location', 'east');
+%! title ("Legend with text to the left of key");
+%! legend ({"I am blue", "I am green"}, "location", "east");
 %! legend left
 
 %!demo
 %! clf;
 %! plot (1:10, 1:10, 1:10, fliplr (1:10));
-%! title ({'Use properties to place legend text to the left of key', ...
-%!         'Legend text color is magenta'});
-%! h = legend ({'I am blue', 'I am green'}, 'location', 'east');
-%! legend ('right');
-%! set (h, 'textposition', 'left');
-%! set (h, 'textcolor', [1 0 1]);
+%! title ({"Use properties to place legend text to the left of key", ...
+%!         "Legend text color is magenta"});
+%! h = legend ({"I am blue", "I am green"}, "location", "east");
+%! legend ("right");
+%! set (h, "textposition", "left");
+%! set (h, "textcolor", [1 0 1]);
 
 %!demo
 %! clf;
 %! plot (1:10, 1:10, 1:10, fliplr (1:10));
-%! title ('Legend is hidden');
-%! legend ({'I am blue', 'I am green'}, 'location', 'east');
+%! title ("Legend is hidden");
+%! legend ({"I am blue", "I am green"}, "location", "east");
 %! legend hide
 
 %!demo
 %! clf;
 %! x = 0:1;
-%! plot (x,x,';I am Blue;', x,2*x,';I am Green;', x,3*x,';I am Red;');
-%! title ({'Labels are embedded in call to plot', ...
-%!         'Legend is hidden and then shown'});
+%! plot (x,x,";I am Blue;", x,2*x,";I am Green;", x,3*x,";I am Red;");
+%! title ({"Labels are embedded in call to plot", ...
+%!         "Legend is hidden and then shown"});
 %! legend boxon
 %! legend hide
 %! legend show
 
 %!demo
 %! clf;
 %! x = 0:1;
 %! plot (x,x,  x,2*x, x,3*x);
-%! title ('Labels with interpreted Greek text');
+%! title ("Labels with interpreted Greek text");
 %! h = legend ('\alpha', '\beta=2\alpha', '\gamma=3\alpha');
-%! set (h, 'interpreter', 'tex');
+%! set (h, "interpreter", "tex");
 
 %!demo
 %! clf;
 %! plot (rand (2));
-%! title ('Labels with TeX interpreter turned off');
-%! h = legend ('Hello_World', 'foo^bar');
-%! set (h, 'interpreter', 'none');
+%! title ("Labels with TeX interpreter turned off");
+%! h = legend ("Hello_World", "foo^bar");
+%! set (h, "interpreter", "none");
 
 %!demo
 %! clf;
 %! labels = {};
-%! colororder = get (gca, 'colororder');
+%! colororder = get (gca, "colororder");
 %! for i = 1:5
 %!   h = plot (1:100, i + rand (100,1)); hold on;
-%!   set (h, 'color', colororder(i,:));
-%!   labels = {labels{:}, ['Signal ', num2str(i)]};
-%! end
+%!   set (h, "color", colororder(i,:));
+%!   labels = {labels{:}, ["Signal ", num2str(i)]};
+%! endfor
 %! hold off;
-%! title ({'Signals with random offset and uniform noise';
-%!         'Legend shown below and outside of plot'});
-%! xlabel ('Sample Nr [k]'); ylabel ('Amplitude [V]');
-%! legend (labels, 'location', 'southoutside');
+%! title ({"Signals with random offset and uniform noise";
+%!         "Legend shown below and outside of plot"});
+%! xlabel ("Sample Nr [k]"); ylabel ("Amplitude [V]");
+%! legend (labels, "location", "southoutside");
 
 %!demo
 %! clf;
 %! x = linspace (0, 10);
 %! plot (x, x);
 %! hold on;
-%! stem (x, x.^2, 'g');
-%! title ('First created object gets first label');
-%! legend ('linear');
+%! stem (x, x.^2, "g");
+%! title ("First created object gets first label");
+%! legend ("linear");
 %! hold off;
 
 %!demo
 %! clf;
 %! x = linspace (0, 10);
 %! plot (x, x, x, x.^2);
-%! title ('First created object gets first label');
-%! legend ('linear');
+%! title ("First created object gets first label");
+%! legend ("linear");
 
 %!demo
 %! clf;
 %! x = linspace (0, 10);
 %! plot (x, x, x, x.^2);
-%! title ('Labels are applied in order of object creation');
-%! legend ('linear', 'quadratic');
+%! title ("Labels are applied in order of object creation");
+%! legend ("linear", "quadratic");
 
 %!demo
 %! clf;
 %! rand_2x3_data1 = [0.341447, 0.171220, 0.284370; 0.039773, 0.731725, 0.779382];
 %! bar (rand_2x3_data1);
 %! ylim ([0 1.0]);
-%! title ('legend() works for bar graphs (hggroups)');
-%! legend ({'1st Bar', '2nd Bar', '3rd Bar'});
+%! title ("legend() works for bar graphs (hggroups)");
+%! legend ({"1st Bar", "2nd Bar", "3rd Bar"});
 
 %!demo
 %! clf;
 %! colormap (cool (64));
 %! surf (peaks ());
-%! legend ('peaks()');
-%! title ('legend() works for surface objects too');
+%! legend ("peaks()");
+%! title ("legend() works for surface objects too");
 
 %!demo
-%! clf reset;  % needed to undo colormap assignment in previous demo
+%! clf reset;  # needed to undo colormap assignment in previous demo
 %! rand_2x3_data2 = [0.44804, 0.84368, 0.23012; 0.72311, 0.58335, 0.90531];
 %! bar (rand_2x3_data2);
 %! ylim ([0 1.2]);
 %! title ('"left" option places colors to the left of text label');
-%! legend ('1st Bar', '2nd Bar', '3rd Bar');
+%! legend ("1st Bar", "2nd Bar", "3rd Bar");
 %! legend left;
 
 %!demo
 %! clf;
 %! x = 0:0.1:7;
 %! h = plot (x,sin(x), x,cos(x), x,sin(x.^2/10), x,cos(x.^2/10));
-%! title ('Only the sin() objects have keylabels');
-%! legend (h([1, 3]), {'sin (x)', 'sin (x^2/10)'}, 'location', 'southwest');
+%! title ("Only the sin() objects have keylabels");
+%! legend (h([1, 3]), {"sin (x)", "sin (x^2/10)"}, "location", "southwest");
 
 %!demo
 %! clf;
 %! x = 0:0.1:10;
-%! plot (x, sin (x), ';sin (x);');
+%! plot (x, sin (x), ";sin (x);");
 %! hold on;
-%! plot (x, cos (x), ';cos (x);');
+%! plot (x, cos (x), ";cos (x);");
 %! hold off;
-%! title ('legend constructed from multiple plot calls');
+%! title ("legend constructed from multiple plot calls");
 
 %!demo
 %! clf;
 %! x = 0:0.1:10;
-%! plot (x, sin (x), ';sin (x);');
+%! plot (x, sin (x), ";sin (x);");
 %! hold on;
-%! plot (x, cos (x), ';cos (x);');
+%! plot (x, cos (x), ";cos (x);");
 %! hold off;
-%! title ('Specified label text overrides previous labels');
-%! legend ({'Sine', 'Cosine'}, 'location', 'northeastoutside');
+%! title ("Specified label text overrides previous labels");
+%! legend ({"Sine", "Cosine"}, "location", "northeastoutside");
 
 %!demo
 %! clf;
 %! x = 0:10;
 %! plot (x, rand (11));
-%! xlabel ('Indices');
-%! ylabel ('Random Values');
-%! title ('Legend ''off'' deletes the legend');
-%! legend (cellstr (num2str ((1:10)')), 'location', 'northeastoutside');
+%! xlabel ("Indices");
+%! ylabel ("Random Values");
+%! title ('Legend "off" deletes the legend');
+%! legend (cellstr (num2str ((1:10)")), "location", "northeastoutside");
 %! legend off;
 %! axis ([0, 10, 0 1]);
 
 %!demo
 %! clf;
 %! x = (1:5)';
 %! subplot (2,2,1);
 %!  plot (x, rand (numel (x)));
-%!  legend (cellstr (num2str (x)), 'location', 'northwestoutside');
+%!  legend (cellstr (num2str (x)), "location", "northwestoutside");
 %! subplot (2,2,2);
 %!  plot (x, rand (numel (x)));
-%!  legend (cellstr (num2str (x)), 'location', 'northeastoutside');
+%!  legend (cellstr (num2str (x)), "location", "northeastoutside");
 %! subplot (2,2,3);
 %!  plot (x, rand (numel (x)));
-%!  legend (cellstr (num2str (x)), 'location', 'southwestoutside');
+%!  legend (cellstr (num2str (x)), "location", "southwestoutside");
 %! subplot (2,2,4);
 %!  plot (x, rand (numel (x)));
-%!  legend (cellstr (num2str (x)), 'location', 'southeastoutside');
-%! %% Legend works on a per axes basis for each subplot
+%!  legend (cellstr (num2str (x)), "location", "southeastoutside");
+%! ## Legend works on a per axes basis for each subplot
 
 %!demo
 %! clf;
 %! plot (rand (2));
-%! title ('legend() will warn if extra labels are specified');
-%! legend ('Hello', 'World', 'interpreter', 'foobar');
+%! title ("legend() will warn if extra labels are specified");
+%! legend ("Hello", "World", "interpreter", "foobar");
 
 %!demo
 %! clf;
 %! x = 0:10;
 %! y1 = rand (size (x));
 %! y2 = rand (size (x));
 %! [ax, h1, h2] = plotyy (x, y1, x, y2);
-%! title ('plotyy legend test #1: Blue and Green labels');
-%! legend ([h1, h2], {'Blue', 'Green'}, 'location', 'south');
+%! title ("plotyy legend test 1: Blue and Green labels");
+%! legend ([h1, h2], {"Blue", "Green"}, "location", "south");
 
 %!demo
 %! clf;
 %! x = 0:10;
 %! y1 = rand (size (x));
 %! y2 = rand (size (x));
 %! [ax, h1, h2] = plotyy (x, y1, x, y2);
-%! title ('plotyy legend test #2: Blue and Green labels');
-%! legend ({'Blue', 'Green'}, 'location', 'south');
+%! title ("plotyy legend test 2: Blue and Green labels");
+%! legend ({"Blue", "Green"}, "location", "south");
 
 %!demo
 %! clf;
 %! x = 0:10;
 %! y1 = rand (size (x));
 %! y2 = rand (size (x));
 %! [ax, h1, h2] = plotyy (x, y1, x, y2);
-%! title ('plotyy legend test #3: Blue and Green labels');
-%! legend ('Blue', 'Green', 'location', 'south');
+%! title ("plotyy legend test 3: Blue and Green labels");
+%! legend ("Blue", "Green", "location", "south");
 
 %!demo
 %! clf;
 %! plot (1:10, 1:10);
-%! title ('a very long label can sometimes cause problems');
-%! legend ('hello very big world', 'location', 'northeastoutside');
+%! title ("a very long label can sometimes cause problems");
+%! legend ("hello very big world", "location", "northeastoutside");
 
-%!demo % bug 36408
+%!demo  # bug 36408
 %! clf;
-%! option = 'right';
+%! option = "right";
 %! subplot (3,1,1);
 %!  plot (rand (1,4));
 %!  xlabel xlabel;
 %!  ylabel ylabel;
-%!  title ('Subplots adjust to the legend placed outside');
-%!  legend ({'1'}, 'location', 'northeastoutside');
+%!  title ("Subplots adjust to the legend placed outside");
+%!  legend ({"1"}, "location", "northeastoutside");
 %!  legend (option);
 %! subplot (3,1,2);
 %!  plot (rand (1,4));
 %!  xlabel xlabel;
 %!  ylabel ylabel;
-%!  legend ({'1234567890'}, 'location', 'eastoutside');
+%!  legend ({"1234567890"}, "location", "eastoutside");
 %!  legend (option);
 %! subplot (3,1,3);
 %!  plot (rand (1,4));
 %!  xlabel xlabel;
 %!  ylabel ylabel;
-%!  legend ({'12345678901234567890'}, 'location', 'southeastoutside');
+%!  legend ({"12345678901234567890"}, "location", "southeastoutside");
 %!  legend (option);
 
-%!demo % bug 36408
+%!demo  # bug 36408
 %! clf;
-%! option = 'right';
+%! option = "right";
 %! subplot (3,1,1);
 %!  plot (rand (1,4));
-%!  title ('Subplots adjust to the legend placed outside');
-%!  legend ({'1'}, 'location', 'northwestoutside');
+%!  title ("Subplots adjust to the legend placed outside");
+%!  legend ({"1"}, "location", "northwestoutside");
 %!  legend (option);
 %! subplot (3,1,2);
 %!  plot (rand (1,4));
-%!  legend ({'1234567890'}, 'location', 'westoutside');
+%!  legend ({"1234567890"}, "location", "westoutside");
 %!  legend (option);
 %! subplot (3,1,3);
 %!  plot (rand (1,4));
-%!  legend ({'12345678901234567890'}, 'location', 'southwestoutside');
+%!  legend ({"12345678901234567890"}, "location", "southwestoutside");
 %!  legend (option);
 
-%!demo % bug 36408
+%!demo  # bug 36408
 %! clf;
-%! option = 'right';
+%! option = "right";
 %! subplot (3,1,1);
 %!  plot (rand (1,4));
-%!  set (gca (), 'yaxislocation', 'right');
-%!  xlabel ('xlabel');
-%!  ylabel ('ylabel');
-%!  title ('Subplots adjust to the legend placed outside');
-%!  legend ({'1'}, 'location', 'northeastoutside');
+%!  set (gca (), "yaxislocation", "right");
+%!  xlabel ("xlabel");
+%!  ylabel ("ylabel");
+%!  title ("Subplots adjust to the legend placed outside");
+%!  legend ({"1"}, "location", "northeastoutside");
 %!  legend (option);
 %! subplot (3,1,2);
 %!  plot (rand (1,4));
-%!  set (gca (), 'yaxislocation', 'right');
-%!  xlabel ('xlabel');
-%!  ylabel ('ylabel');
-%!  legend ({'1234567890'}, 'location', 'eastoutside');
+%!  set (gca (), "yaxislocation", "right");
+%!  xlabel ("xlabel");
+%!  ylabel ("ylabel");
+%!  legend ({"1234567890"}, "location", "eastoutside");
 %!  legend (option);
 %! subplot (3,1,3);
 %!  plot (rand (1,4));
-%!  set (gca (), 'yaxislocation', 'right');
-%!  xlabel ('xlabel');
-%!  ylabel ('ylabel');
-%!  legend ({'12345678901234567890'}, 'location', 'southeastoutside');
+%!  set (gca (), "yaxislocation", "right");
+%!  xlabel ("xlabel");
+%!  ylabel ("ylabel");
+%!  legend ({"12345678901234567890"}, "location", "southeastoutside");
 %!  legend (option);
 
-%!demo % bug 36408
+%!demo  # bug 36408
 %! clf;
-%! option = 'right';
+%! option = "right";
 %! subplot (3,1,1);
 %!  plot (rand (1,4));
-%!  set (gca (), 'yaxislocation', 'right');
-%!  xlabel ('xlabel');
-%!  ylabel ('ylabel');
-%!  title ('Subplots adjust to the legend placed outside');
-%!  legend ({'1'}, 'location', 'northwestoutside');
+%!  set (gca (), "yaxislocation", "right");
+%!  xlabel ("xlabel");
+%!  ylabel ("ylabel");
+%!  title ("Subplots adjust to the legend placed outside");
+%!  legend ({"1"}, "location", "northwestoutside");
 %!  legend (option);
 %! subplot (3,1,2);
 %!  plot (rand (1,4));
-%!  set (gca (), 'yaxislocation', 'right');
-%!  xlabel ('xlabel');
-%!  ylabel ('ylabel');
-%!  legend ({'1234567890'}, 'location', 'westoutside');
+%!  set (gca (), "yaxislocation", "right");
+%!  xlabel ("xlabel");
+%!  ylabel ("ylabel");
+%!  legend ({"1234567890"}, "location", "westoutside");
 %!  legend (option);
 %! subplot (3,1,3);
 %!  plot (rand (1,4));
-%!  set (gca (), 'yaxislocation', 'right');
-%!  xlabel ('xlabel');
-%!  ylabel ('ylabel');
-%!  legend ({'12345678901234567890'}, 'location', 'southwestoutside');
+%!  set (gca (), "yaxislocation", "right");
+%!  xlabel ("xlabel");
+%!  ylabel ("ylabel");
+%!  legend ({"12345678901234567890"}, "location", "southwestoutside");
 %!  legend (option);
 
-%!demo % bug 36408;
+%!demo  # bug 36408;
 %! clf;
-%! option = 'right';
+%! option = "right";
 %! subplot (3,1,1);
 %!  plot (rand (1,4));
-%!  set (gca (), 'xaxislocation', 'top');
-%!  xlabel ('xlabel');
-%!  ylabel ('ylabel');
-%!  title ('Subplots adjust to the legend placed outside');
-%!  legend ({'1'}, 'location', 'northwestoutside');
+%!  set (gca (), "xaxislocation", "top");
+%!  xlabel ("xlabel");
+%!  ylabel ("ylabel");
+%!  title ("Subplots adjust to the legend placed outside");
+%!  legend ({"1"}, "location", "northwestoutside");
 %!  legend (option);
 %! subplot (3,1,2);
 %!  plot (rand (1,4));
-%!  set (gca (), 'xaxislocation', 'top');
-%!  xlabel ('xlabel');
-%!  ylabel ('ylabel');
-%!  legend ({'1234567890'}, 'location', 'westoutside');
+%!  set (gca (), "xaxislocation", "top");
+%!  xlabel ("xlabel");
+%!  ylabel ("ylabel");
+%!  legend ({"1234567890"}, "location", "westoutside");
 %!  legend (option);
 %! subplot (3,1,3);
 %!  plot (rand (1,4));
-%!  set (gca (), 'xaxislocation', 'top');
-%!  xlabel ('xlabel');
-%!  ylabel ('ylabel');
-%!  legend ({'12345678901234567890'}, 'location', 'southwestoutside');
+%!  set (gca (), "xaxislocation", "top");
+%!  xlabel ("xlabel");
+%!  ylabel ("ylabel");
+%!  legend ({"12345678901234567890"}, "location", "southwestoutside");
 %!  legend (option);
 
-%!demo % bug 39697
+%!demo  # bug 39697
 %! clf;
 %! plot (1:10);
-%! legend ('Legend Text');
-%! title ({'Multi-line', 'titles', 'are a', 'problem', 'See bug #39697'});
+%! legend ("Legend Text");
+%! title ({"Multi-line", "titles", "are a", "problem", "See bug #39697"});
 
 %!test
 %! toolkit = graphics_toolkit ("gnuplot");
 %! h = figure ("visible", "off");
 %! unwind_protect
 %!   position = get (h, "position");
 %!   plot (rand (3));
 %!   legend ();
diff --git a/scripts/plot/appearance/lighting.m b/scripts/plot/appearance/lighting.m
--- a/scripts/plot/appearance/lighting.m
+++ b/scripts/plot/appearance/lighting.m
@@ -115,69 +115,69 @@ function lighting (varargin)
   set (hlist(! is_mesh), "facelighting", mode, "edgelighting", "none");
   set (hlist(is_mesh), "edgelighting", mode, "facelighting", "none");
 
 endfunction
 
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! sombrero ();
 %! shading flat
 %! lighting flat
 %! light ();
-%! title ('shading flat - lighting flat');
+%! title ("shading flat - lighting flat");
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! sombrero ();
 %! shading interp
 %! lighting gouraud
 %! light ();
-%! title ('shading interp - lighting gouraud');
+%! title ("shading interp - lighting gouraud");
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! pcolor (peaks ());
 %! shading flat
 %! lighting flat
 %! light ();
 %! view (3)
-%! title ('shading flat - lighting flat');
+%! title ("shading flat - lighting flat");
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! pcolor (peaks ());
 %! shading interp
 %! lighting gouraud
 %! light ();
 %! view (3)
-%! title ('shading interp - lighting gouraud');
+%! title ("shading interp - lighting gouraud");
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! mesh (sombrero ());
 %! shading flat
 %! lighting flat
 %! light ();
-%! title ('shading flat - lighting flat');
+%! title ("shading flat - lighting flat");
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! mesh (sombrero ());
 %! shading interp
 %! lighting gouraud
 %! light ();
-%! title ('shading interp - lighting gouraud');
+%! title ("shading interp - lighting gouraud");
 
 %!test
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   ha = axes;
 %!   hm = mesh (sombrero ());
 %!   hp = patch;
 %!   hs = surface;
diff --git a/scripts/plot/appearance/material.m b/scripts/plot/appearance/material.m
--- a/scripts/plot/appearance/material.m
+++ b/scripts/plot/appearance/material.m
@@ -189,37 +189,37 @@ function retval = material (varargin)
     endif
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
-%! %% patch
-%! h_axes = axes;
+%! ## patch
 %! [x,y,z] = meshgrid (-2:0.2:2, -2:0.2:2, -2:0.2:2);
 %! val = x.^2 + y.^2 + z.^2;
 %! fv1 = isosurface (x, y, z, val, 1);
-%! h_patch = patch (fv1, "FaceColor", "r", "EdgeColor", "none", "FaceLighting", "Gouraud");
-%! isonormals (x, y, z, val, h_patch)
-%! axis equal; axis tight
-%! view (3)
-%! drawnow
-%! h_light = light ();
-%! material ([0 0.5 1 10 .5])
+%! h_patch = patch (fv1, "FaceColor", "r", "EdgeColor", "none", ...
+%!                       "FaceLighting", "Gouraud");
+%! isonormals (x, y, z, val, h_patch);
+%! axis equal;  axis tight;
+%! view (3);
+%! drawnow ();
+%! light ();
+%! material ([0 0.5 1 10 .5]);
 
 %!demo
-%! clf
-%! %% surface
-%! h_axes = axes;
-%! h_surf = surf (h_axes, peaks, "LineStyle", "none", "FaceLighting", "Gouraud");
-%! view (3)
-%! h_light = light ();
-%! material metal
+%! clf;
+%! ## surface
+%! hax = axes ();
+%! surf (hax, peaks, "LineStyle", "none", "FaceLighting", "Gouraud");
+%! view (3);
+%! light ();
+%! material metal;
 
 %!test
 %! hf = figure ("Visible", "off");
 %! unwind_protect
 %!   hp = patch;
 %!   hs = surface;
 %!   material dull
 %!   assert (get (hp, "ambientstrength"), 0.3);
diff --git a/scripts/plot/appearance/pbaspect.m b/scripts/plot/appearance/pbaspect.m
--- a/scripts/plot/appearance/pbaspect.m
+++ b/scripts/plot/appearance/pbaspect.m
@@ -98,25 +98,25 @@ function pbratio = pbaspect (varargin)
 endfunction
 
 
 %!demo
 %! clf;
 %! x = 0:0.01:4;
 %! plot (x,cos(x), x,sin(x));
 %! pbaspect ([1 1 1]);
-%! title ('plot box is square');
+%! title ("plot box is square");
 
 %!demo
 %! clf;
 %! x = 0:0.01:4;;
 %! plot (x,cos(x), x,sin(x));
 %! pbaspect ([2 1 1]);
-%! title ('plot box aspect ratio is 2x1');
+%! title ("plot box aspect ratio is 2x1");
 
 %!demo
 %! clf;
 %! x = 0:0.01:4;
 %! plot (x,cos(x), x,sin(x));
 %! daspect ([1 1 1]);
 %! pbaspect ([2 1 1]);
-%! title ('plot box is 2x1, and axes [0 4 -1 1]');
+%! title ("plot box is 2x1, and axes [0 4 -1 1]");
 
diff --git a/scripts/plot/appearance/shading.m b/scripts/plot/appearance/shading.m
--- a/scripts/plot/appearance/shading.m
+++ b/scripts/plot/appearance/shading.m
@@ -95,123 +95,123 @@ function shading (varargin)
       error ('shading: Invalid MODE "%s"', mode);
   endswitch
 
 endfunction
 
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! sombrero ();
 %! shading faceted;
 %! title ('shading ''faceted''');
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! sombrero ();
 %! shading faceted;
-%! h = findobj (gca (), 'type', 'surface');
-%! facecolor = get (h, 'facecolor');
-%! edgecolor = get (h, 'edgecolor');
-%! set (h, 'edgecolor', facecolor, 'facecolor', edgecolor)
+%! h = findobj (gca (), "type", "surface");
+%! facecolor = get (h, "facecolor");
+%! edgecolor = get (h, "edgecolor");
+%! set (h, "edgecolor", facecolor, "facecolor", edgecolor)
 %! title ({'shading ''faceted''', 'with "edgecolor" and "facecolor" reversed'});
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! sombrero ();
 %! shading flat;
 %! title ('shading ''flat''');
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! sombrero ();
 %! shading flat;
-%! h = findobj (gca (), 'type', 'surface');
-%! facecolor = get (h, 'facecolor');
-%! edgecolor = get (h, 'edgecolor');
-%! set (h, 'edgecolor', facecolor, 'facecolor', edgecolor)
+%! h = findobj (gca (), "type", "surface");
+%! facecolor = get (h, "facecolor");
+%! edgecolor = get (h, "edgecolor");
+%! set (h, "edgecolor", facecolor, "facecolor", edgecolor)
 %! title ({'shading ''flat''', 'with "edgecolor" and "facecolor" reversed'});
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! sombrero ();
 %! shading interp;
 %! title ('shading ''interp''');
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! sombrero ();
 %! shading interp;
-%! h = findobj (gca (), 'type', 'surface');
-%! facecolor = get (h, 'facecolor');
-%! edgecolor = get (h, 'edgecolor');
-%! set (h, 'edgecolor', facecolor, 'facecolor', edgecolor)
+%! h = findobj (gca (), "type", "surface");
+%! facecolor = get (h, "facecolor");
+%! edgecolor = get (h, "edgecolor");
+%! set (h, "edgecolor", facecolor, "facecolor", edgecolor)
 %! title ({'shading ''interp''', 'with "edgecolor" and "facecolor" reversed'});
 
 %!demo
 %! clf
-%! colormap ('default')
+%! colormap ("default")
 %! peaks ()
 %! shading interp
-%! h = findobj (gca (), 'type', 'surface');
-%! set (h, 'edgecolor', 'k')
+%! h = findobj (gca (), "type", "surface");
+%! set (h, "edgecolor", "k")
 %! title ({'shading ''interp''', 'with "edgecolor" set to black'})
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! pcolor (peaks ());
 %! shading faceted;
 %! title ('shading ''faceted''');
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! pcolor (peaks ());
 %! shading faceted;
-%! h = findobj (gca (), 'type', 'surface');
-%! facecolor = get (h, 'facecolor');
-%! edgecolor = get (h, 'edgecolor');
-%! set (h, 'edgecolor', facecolor, 'facecolor', edgecolor)
+%! h = findobj (gca (), "type", "surface");
+%! facecolor = get (h, "facecolor");
+%! edgecolor = get (h, "edgecolor");
+%! set (h, "edgecolor", facecolor, "facecolor", edgecolor)
 %! title ({'shading ''faceted''', 'with "edgecolor" and "facecolor" reversed'});
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! pcolor (peaks ());
 %! shading flat;
 %! title ('shading ''flat''');
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! pcolor (peaks ());
 %! shading flat;
-%! h = findobj (gca (), 'type', 'surface');
-%! facecolor = get (h, 'facecolor');
-%! edgecolor = get (h, 'edgecolor');
-%! set (h, 'edgecolor', facecolor, 'facecolor', edgecolor)
+%! h = findobj (gca (), "type", "surface");
+%! facecolor = get (h, "facecolor");
+%! edgecolor = get (h, "edgecolor");
+%! set (h, "edgecolor", facecolor, "facecolor", edgecolor)
 %! title ({'shading ''flat''', 'with "edgecolor" and "facecolor" reversed'});
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! pcolor (peaks ());
 %! shading interp;
 %! title ('shading ''interp''');
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! pcolor (peaks ());
 %! shading interp;
-%! h = findobj (gca (), 'type', 'surface');
-%! facecolor = get (h, 'facecolor');
-%! edgecolor = get (h, 'edgecolor');
-%! set (h, 'edgecolor', facecolor, 'facecolor', edgecolor)
+%! h = findobj (gca (), "type", "surface");
+%! facecolor = get (h, "facecolor");
+%! edgecolor = get (h, "edgecolor");
+%! set (h, "edgecolor", facecolor, "facecolor", edgecolor)
 %! title ({'shading ''interp''', 'with "edgecolor" and "facecolor" reversed'});
 
diff --git a/scripts/plot/appearance/text.m b/scripts/plot/appearance/text.m
--- a/scripts/plot/appearance/text.m
+++ b/scripts/plot/appearance/text.m
@@ -170,92 +170,92 @@ function h = text (varargin)
     h = htmp;
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
-%! ha = {'left', 'center', 'right'};
-%! va = {'bottom', 'middle', 'top'};
+%! ha = {"left", "center", "right"};
+%! va = {"bottom", "middle", "top"};
 %! x = [0.25 0.5 0.75];
 %! y = x;
 %! for t = 0:30:359;
 %!   for nh = 1:numel (ha)
 %!     for nv = 1:numel (va)
-%!       text (x(nh), y(nv), 'Hello World', ...
-%!             'rotation', t, ...
-%!             'horizontalalignment', ha{nh}, ...
-%!             'verticalalignment', va{nv});
-%!     end
-%!   end
-%! end
-%! set (gca, 'xtick', [0.25, 0.5, 0.75], ...
-%!           'xticklabel', ha, ...
-%!           'ytick', [0.25, 0.5, 0.75], ...
-%!           'yticklabel', va);
+%!       text (x(nh), y(nv), "Hello World", ...
+%!             "rotation", t, ...
+%!             "horizontalalignment", ha{nh}, ...
+%!             "verticalalignment", va{nv});
+%!     endfor
+%!   endfor
+%! endfor
+%! set (gca, "xtick", [0.25, 0.5, 0.75], ...
+%!           "xticklabel", ha, ...
+%!           "ytick", [0.25, 0.5, 0.75], ...
+%!           "yticklabel", va);
 %! axis ([0 1 0 1]);
-%! xlabel ('horizontal alignment');
-%! ylabel ('vertical alignment');
-%! title ('text alignment and rotation (0:30:360 degrees)');
+%! xlabel ("horizontal alignment");
+%! ylabel ("vertical alignment");
+%! title ("text alignment and rotation (0:30:360 degrees)");
 
 %!demo
 %! clf;
-%! h = mesh (peaks, 'edgecolor', 0.7 * [1 1 1], ...
-%!                  'facecolor', 'none', ...
-%!                  'facealpha', 0);
+%! h = mesh (peaks, "edgecolor", 0.7 * [1 1 1], ...
+%!                  "facecolor", "none", ...
+%!                  "facealpha", 0);
 %! for t = 0:45:359;
-%!   text (25, 25, 0, 'Vertical Alignment = Bottom', ...
-%!                    'rotation', t, ...
-%!                    'horizontalalignment', 'left', ...
-%!                    'verticalalignment', 'bottom');
-%! end
+%!   text (25, 25, 0, "Vertical Alignment = Bottom", ...
+%!                    "rotation", t, ...
+%!                    "horizontalalignment", "left", ...
+%!                    "verticalalignment", "bottom");
+%! endfor
 %! caxis ([-100 100]);
-%! title ('Vertically Aligned at Bottom');
+%! title ("Vertically Aligned at Bottom");
 
 %!demo
 %! clf;
 %! axis ([0 8 0 8]);
-%! title (['1st title';'2nd title']);
-%! xlabel (['1st xlabel';'2nd xlabel']);
-%! ylabel (['1st ylabel';'2nd ylabel']);
-%! text (4, 4, {'Hello', 'World'}, ...
-%!       'horizontalalignment', 'center', ...
-%!       'verticalalignment', 'middle');
+%! title (["1st title";"2nd title"]);
+%! xlabel (["1st xlabel";"2nd xlabel"]);
+%! ylabel (["1st ylabel";"2nd ylabel"]);
+%! text (4, 4, {"Hello", "World"}, ...
+%!       "horizontalalignment", "center", ...
+%!       "verticalalignment", "middle");
 %! grid on;
 
 %!demo
 %! clf;
-%! h = mesh (peaks (), 'edgecolor', 0.7 * [1 1 1], ...
-%!                     'facecolor', 'none', ...
-%!                     'facealpha', 0);
-%! title (['1st title';'2nd title']);
-%! xlabel (['1st xlabel';'2nd xlabel']);
-%! ylabel (['1st ylabel';'2nd ylabel']);
-%! zlabel (['1st zlabel';'2nd zlabel']);
-%! text (0, 0, 5, {'Hello', 'World'}, ...
-%!       'horizontalalignment', 'center', ...
-%!       'verticalalignment', 'middle');
+%! h = mesh (peaks (), "edgecolor", 0.7 * [1 1 1], ...
+%!                     "facecolor", "none", ...
+%!                     "facealpha", 0);
+%! title (["1st title";"2nd title"]);
+%! xlabel (["1st xlabel";"2nd xlabel"]);
+%! ylabel (["1st ylabel";"2nd ylabel"]);
+%! zlabel (["1st zlabel";"2nd zlabel"]);
+%! text (0, 0, 5, {"Hello", "World"}, ...
+%!       "horizontalalignment", "center", ...
+%!       "verticalalignment", "middle");
 %! hold on;
-%! plot3 (0, 0, 5, '+k');
+%! plot3 (0, 0, 5, "+k");
 
 %!demo
 %! clf;
-%! h = text (0.5, 0.3, 'char');
-%! h = text (0.5, 0.4, ['char row 1'; 'char row 2']);
-%! h = text (0.5, 0.6, {'cell2str (1,1)', 'cell2str (1,2)'; 'cell2str (2,1)', 'cell2str (2,2)'});
-%! h = text (0.5, 0.8, 'foobar');
-%! set (h, 'string', 1:3);
-%! h = text ([0.1, 0.1], [0.3, 0.4], 'one string & two objects');
-%! h = text ([0.1, 0.1], [0.5, 0.6], {'one cellstr & two objects'});
-%! h = text ([0.1, 0.1], [0.7, 0.8], {'cellstr 1 object 1', 'cellstr 2 object 2'});
-%! h = text ([0.1, 0.1], [0.1, 0.2], ['1st string & 1st object'; '2nd string & 2nd object']);
-%! h = text (0.7, 0.6, 'single string');
-%! h = text (0.7, 0.5, {'single cell-string'});
+%! h = text (0.5, 0.3, "char");
+%! h = text (0.5, 0.4, ["char row 1"; "char row 2"]);
+%! h = text (0.5, 0.6, {"cell2str (1,1)", "cell2str (1,2)"; "cell2str (2,1)", "cell2str (2,2)"});
+%! h = text (0.5, 0.8, "foobar");
+%! set (h, "string", 1:3);
+%! h = text ([0.1, 0.1], [0.3, 0.4], "one string & two objects");
+%! h = text ([0.1, 0.1], [0.5, 0.6], {"one cellstr & two objects"});
+%! h = text ([0.1, 0.1], [0.7, 0.8], {"cellstr 1 object 1", "cellstr 2 object 2"});
+%! h = text ([0.1, 0.1], [0.1, 0.2], ["1st string & 1st object"; "2nd string & 2nd object"]);
+%! h = text (0.7, 0.6, "single string");
+%! h = text (0.7, 0.5, {"single cell-string"});
 %! xlabel (1:2);
 %! ylabel (1:2);
 %! title (1:2);
 
 %!test
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   ## Single object with one line
diff --git a/scripts/plot/appearance/xlim.m b/scripts/plot/appearance/xlim.m
--- a/scripts/plot/appearance/xlim.m
+++ b/scripts/plot/appearance/xlim.m
@@ -52,35 +52,35 @@ function retval = xlim (varargin)
 
 endfunction
 
 
 %!demo
 %! clf;
 %! line ();
 %! xlim ([0.2, 0.8]);
-%! title ('xlim is [0.2, 0.8]');
+%! title ("xlim is [0.2, 0.8]");
 
 %!demo
 %! clf;
 %! line ();
-%! xlim ('auto');
-%! title ('xlim is auto');
+%! xlim ("auto");
+%! title ("xlim is auto");
 
 %!demo
 %! clf;
 %! plot3 ([0,1], [0,1], [0,1]);
 %! xlim ([0.2, 0.8]);
-%! title ('xlim is [0.2, 0.8]');
+%! title ("xlim is [0.2, 0.8]");
 
 %!demo
 %! clf;
 %! plot3 ([0,1], [0,1], [0,1]);
-%! xlim ('auto');
-%! title ('xlim is auto');
+%! xlim ("auto");
+%! title ("xlim is auto");
 
 %!test
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   plot3 ([0,1], [0,1], [0,1]);
 %!   xlim ([0, 1.1]);
 %!   assert (get (gca, "xlim"), [0, 1.1], eps);
 %!   assert (xlim ("mode"), "manual");
diff --git a/scripts/plot/appearance/ylim.m b/scripts/plot/appearance/ylim.m
--- a/scripts/plot/appearance/ylim.m
+++ b/scripts/plot/appearance/ylim.m
@@ -52,35 +52,35 @@ function retval = ylim (varargin)
 
 endfunction
 
 
 %!demo
 %! clf;
 %! line ();
 %! ylim ([0.2, 0.8]);
-%! title ('ylim is [0.2, 0.8]');
+%! title ("ylim is [0.2, 0.8]");
 
 %!demo
 %! clf;
 %! line ();
-%! ylim ('auto');
-%! title ('ylim is auto');
+%! ylim ("auto");
+%! title ("ylim is auto");
 
 %!demo
 %! clf;
 %! plot3 ([0,1], [0,1], [0,1]);
 %! ylim ([0.2, 0.8]);
-%! title ('ylim is [0.2, 0.8]');
+%! title ("ylim is [0.2, 0.8]");
 
 %!demo
 %! clf;
 %! plot3 ([0,1], [0,1], [0,1]);
-%! ylim ('auto');
-%! title ('ylim is auto');
+%! ylim ("auto");
+%! title ("ylim is auto");
 
 %!test
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   limy = [0, 1.1];
 %!   plot3 ([0,1], [0,1], [0,1]);
 %!   ylim (limy);
 %!   assert (get (gca, "ylim"), limy, eps);
diff --git a/scripts/plot/appearance/zlim.m b/scripts/plot/appearance/zlim.m
--- a/scripts/plot/appearance/zlim.m
+++ b/scripts/plot/appearance/zlim.m
@@ -52,35 +52,35 @@ function retval = zlim (varargin)
 
 endfunction
 
 
 %!demo
 %! clf;
 %! line ();
 %! zlim ([0.2, 0.8]);
-%! title ('zlim is [0.2, 0.8]');
+%! title ("zlim is [0.2, 0.8]");
 
 %!demo
 %! clf;
 %! line ();
-%! zlim ('auto');
-%! title ('zlim is auto');
+%! zlim ("auto");
+%! title ("zlim is auto");
 
 %!demo
 %! clf;
 %! plot3 ([0,1], [0,1], [0,1]);
 %! zlim ([0.2, 0.8]);
-%! title ('zlim is [0.2, 0.8]');
+%! title ("zlim is [0.2, 0.8]");
 
 %!demo
 %! clf;
 %! plot3 ([0,1], [0,1], [0,1]);
-%! zlim ('auto');
-%! title ('zlim is auto');
+%! zlim ("auto");
+%! title ("zlim is auto");
 
 %!test
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   limz = [0, 1.1];
 %!   plot3 ([0,1], [0,1], [0,1]);
 %!   zlim (limz);
 %!   assert (get (gca, "zlim"), limz, eps);
diff --git a/scripts/plot/draw/area.m b/scripts/plot/draw/area.m
--- a/scripts/plot/draw/area.m
+++ b/scripts/plot/draw/area.m
@@ -243,43 +243,43 @@ function update_data (h, d)
   endfor
 
 endfunction
 
 
 %!demo
 %! ## Verify identity sin^2 + cos^2 = 1
 %! clf;
-%! t = linspace (0, 2*pi, 100)';
+%! t = linspace (0, 2*pi, 100)";
 %! y = [sin(t).^2, cos(t).^2];
 %! area (t, y);
 %! axis tight
-%! legend ('sin^2', 'cos^2', 'location', 'NorthEastOutside');
-%! title ('area() plot');
+%! legend ("sin^2", "cos^2", "location", "NorthEastOutside");
+%! title ("area() plot");
 
 %!demo
 %! ## Show effects of setting BaseValue
 %! clf;
-%! x = [-2:0.1:2]';
+%! x = [-2:0.1:2]";
 %! y = x.^2 - 1;
 %! subplot (1, 2, 1)
-%! area (x, y);
-%! title ({'Parabola y = x^2 -1';'BaseValue = 0'});
+%!  area (x, y);
+%!  title ({"Parabola y = x^2 -1";"BaseValue = 0"});
 %! subplot (1, 2, 2)
-%! h = area (x, y);
-%! set (h, 'basevalue', -1);
-%! title ({'Parabola y = x^2 -1';'BaseValue = -1'});
+%!  h = area (x, y);
+%!  set (h, "basevalue", -1);
+%!  title ({"Parabola y = x^2 -1";"BaseValue = -1"});
 
 %!demo
 %! clf;
 %! x = 0:10;
 %! y = rand (size (x));
 %! h = area (x, y);
-%! set (h, 'ydata', sort (get (h, 'ydata')));
-%! title ('area() plot of sorted data');
+%! set (h, "ydata", sort (get (h, "ydata")));
+%! title ("area() plot of sorted data");
 
 ## Test input validation
 %!error area ()
 %!error area (1,2,3,4)
 %!error <X and Y must be real vectors or matrices> area ({1})
 %!error <X and Y must be real vectors or matrices> area (1+i)
 %!error <X and Y must be real vectors or matrices> area (1:2, {1, 2})
 %!error <X and Y must be real vectors or matrices> area (1:2, [1 1+i])
diff --git a/scripts/plot/draw/bar.m b/scripts/plot/draw/bar.m
--- a/scripts/plot/draw/bar.m
+++ b/scripts/plot/draw/bar.m
@@ -118,24 +118,24 @@ function varargout = bar (varargin)
   [varargout{:}] = __bar__ (true, "bar", varargin{:});
 endfunction
 
 
 %!demo
 %! clf;
 %! y = rand (11, 1);
 %! h = bar (y);
-%! set (h, 'ydata', sort (rand (11, 1)));
-%! title ('bar() graph');
+%! set (h, "ydata", sort (rand (11, 1)));
+%! title ("bar() graph");
 
 %!demo
 %! clf;
 %! h = bar (rand (5, 3));
-%! set (h(1), 'facecolor', 'r');
-%! set (h(2), 'facecolor', 'g');
-%! set (h(3), 'facecolor', 'b');
-%! title ('bar() graph w/multiple bars');
+%! set (h(1), "facecolor", "r");
+%! set (h(2), "facecolor", "g");
+%! set (h(3), "facecolor", "b");
+%! title ("bar() graph w/multiple bars");
 
 %!demo
 %! clf;
-%! h = bar (rand (5, 3), 'stacked');
-%! title ('bar() graph with stacked style');
+%! h = bar (rand (5, 3), "stacked");
+%! title ("bar() graph with stacked style");
 
diff --git a/scripts/plot/draw/barh.m b/scripts/plot/draw/barh.m
--- a/scripts/plot/draw/barh.m
+++ b/scripts/plot/draw/barh.m
@@ -75,18 +75,18 @@ function varargout = barh (varargin)
   [varargout{:}] = __bar__ (false, "barh", varargin{:});
 endfunction
 
 
 %!demo
 %! clf;
 %! x = rand (10, 1);
 %! barh (x);
-%! title ('barh() graph');
+%! title ("barh() graph");
 
 %!demo
 %! clf;
 %! h = barh (rand (5, 3));
-%! set (h(1), 'facecolor', 'r');
-%! set (h(2), 'facecolor', 'g');
-%! set (h(3), 'facecolor', 'b');
-%! title ('barh() graph w/multiple bars');
+%! set (h(1), "facecolor", "r");
+%! set (h(2), "facecolor", "g");
+%! set (h(3), "facecolor", "b");
+%! title ("barh() graph w/multiple bars");
 
diff --git a/scripts/plot/draw/camlight.m b/scripts/plot/draw/camlight.m
--- a/scripts/plot/draw/camlight.m
+++ b/scripts/plot/draw/camlight.m
@@ -213,32 +213,32 @@ endfunction
 %! view (30, 30);
 %!
 %! camlight
 %!
 %! for a = 30:2:390
 %!   view (a, 30);
 %!   drawnow ();
 %!   pause (0.01);
-%! end
+%! endfor
 
 %!demo
 %! sphere (48);
 %! title ("Move the camera and update the light position");
 %! axis equal;  shading flat
 %! view (30, 30);
 %!
 %! hl = camlight ();          # keep a handle to the light
 %!
 %! for a = 30:2:390
 %!   view (a, 30);
 %!   camlight (hl, "right");  # update light position
 %!   drawnow ();
 %!   pause (0.01);
-%! end
+%! endfor
 
 %!test
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   sphere (24);
 %!   set (gca (), "cameraposition", [8 12 7.3]);
 %!   set (gca (), "cameraupvector", [0 2 2]);
 %!   set (gca (), "cameratarget", [0.5 -0.3 -0.3]);
diff --git a/scripts/plot/draw/colorbar.m b/scripts/plot/draw/colorbar.m
--- a/scripts/plot/draw/colorbar.m
+++ b/scripts/plot/draw/colorbar.m
@@ -476,291 +476,291 @@ function [pos, cpos, vertical, mirr] = _
     endif
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! n = 64; x = kron (1:n, ones (n,1)); x = abs (x - x.');
 %! imagesc (x);
 %! colorbar ();
-%! title ('colorbar() example');
+%! title ("colorbar() example");
 
 %!demo
 %! clf;
-%! colormap ('default');
-%! n = 64; x = kron (1:n, ones (n,1)); x = abs (x - x.');
+%! colormap ("default");
+%! n = 64; x = kron (1:n, ones (n,1)); x = abs (x - x.");
 %! imagesc (x);
-%! colorbar ('westoutside');
+%! colorbar ("westoutside");
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! n = 64; x = kron (1:n, ones (n,1)); x = abs (x - x.');
 %! imagesc (x);
-%! colorbar ('peer', gca, 'northoutside');
+%! colorbar ("peer", gca, "northoutside");
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! n = 64; x = kron (1:n, ones (n,1)); x = abs (x - x.');
 %! imagesc (x);
-%! colorbar ('southoutside');
+%! colorbar ("southoutside");
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! contour (peaks ());
-%! colorbar ('west');
+%! colorbar ("west");
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! subplot (2,2,1);
 %!  contour (peaks ());
-%!  colorbar ('east');
+%!  colorbar ("east");
 %! subplot (2,2,2);
 %!  contour (peaks ());
-%!  colorbar ('west');
+%!  colorbar ("west");
 %! subplot (2,2,3);
 %!  contour (peaks ());
-%!  colorbar ('north');
+%!  colorbar ("north");
 %! subplot (2,2,4);
 %!  contour (peaks ());
-%!  colorbar ('south');
+%!  colorbar ("south");
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! n = 64; x = kron (1:n, ones (n,1)); x = abs (x - x.');
 %! subplot (2,2,1);
 %!  imagesc (x);
 %!  colorbar ();
 %! subplot (2,2,2);
 %!  imagesc (x);
-%!  colorbar ('westoutside');
+%!  colorbar ("westoutside");
 %! subplot (2,2,3);
 %!  imagesc (x);
-%!  colorbar ('northoutside');
+%!  colorbar ("northoutside");
 %! subplot (2,2,4);
 %!  imagesc (x);
-%!  colorbar ('southoutside');
+%!  colorbar ("southoutside");
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! n = 64; x = kron (1:n, ones (n,1)); x = abs (x - x.');
 %! subplot (1,2,1);
 %!  imagesc (x);
 %!  axis square;
 %!  colorbar ();
 %! subplot (1,2,2);
 %!  imagesc (x);
 %!  axis square;
-%!  colorbar ('westoutside');
+%!  colorbar ("westoutside");
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! n = 64; x = kron (1:n, ones (n,1)); x = abs (x - x.');
 %! subplot (1,2,1);
 %!  imagesc (x);
 %!  axis square;
-%!  colorbar ('northoutside');
+%!  colorbar ("northoutside");
 %! subplot (1,2,2);
 %!  imagesc (x);
 %!  axis square;
-%!  colorbar ('southoutside');
+%!  colorbar ("southoutside");
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! n = 64; x = kron (1:n, ones (n,1)); x = abs (x - x.');
 %! subplot (2,1,1);
 %!  imagesc (x);
 %!  axis square;
 %!  colorbar ();
 %! subplot (2,1,2);
 %!  imagesc (x);
 %!  axis square;
-%!  colorbar ('westoutside');
+%!  colorbar ("westoutside");
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! n = 64; x = kron (1:n, ones (n,1)); x = abs (x - x.');
 %! subplot (2,1,1);
 %!  imagesc (x);
 %!  axis square;
-%!  colorbar ('northoutside');
+%!  colorbar ("northoutside");
 %! subplot (2,1,2);
 %!  imagesc (x);
 %!  axis square;
-%!  colorbar ('southoutside');
+%!  colorbar ("southoutside");
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! n = 64; x = kron (1:n, ones (n,1)); x = abs (x - x.');
 %! subplot (1,2,1);
 %!  imagesc (x);
 %!  colorbar ();
 %! subplot (1,2,2);
 %!  imagesc (x);
-%!  colorbar ('westoutside');
+%!  colorbar ("westoutside");
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! n = 64; x = kron (1:n, ones (n,1)); x = abs (x - x.');
 %! subplot (1,2,1);
 %!  imagesc (x);
-%!  colorbar ('northoutside');
+%!  colorbar ("northoutside");
 %! subplot (1,2,2);
 %!  imagesc (x);
-%!  colorbar ('southoutside');
+%!  colorbar ("southoutside");
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! n = 64; x = kron (1:n, ones (n,1)); x = abs (x - x.');
 %! subplot (2,1,1);
 %!  imagesc (x);
 %!  colorbar ();
 %! subplot (2,1,2);
 %!  imagesc (x);
-%!  colorbar ('westoutside');
+%!  colorbar ("westoutside");
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! n = 64; x = kron (1:n, ones (n,1)); x = abs (x - x.');
 %! subplot (2,1,1);
 %!  imagesc (x);
-%!  colorbar ('northoutside');
+%!  colorbar ("northoutside");
 %! subplot (2,1,2);
 %!  imagesc (x);
-%!  colorbar ('southoutside');
+%!  colorbar ("southoutside");
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! n = 64; x = kron (1:n, ones (n,1)); x = abs (x - x.');
 %! subplot (1,2,1);
 %!  contour (x);
 %!  axis square;
-%!  colorbar ('east');
+%!  colorbar ("east");
 %!  xlim ([1, 64]);
 %!  ylim ([1, 64]);
 %! subplot (1,2,2);
 %!  contour (x);
-%!  colorbar ('west');
+%!  colorbar ("west");
 %!  xlim ([1, 64]);
 %!  ylim ([1, 64]);
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! n = 64; x = kron (1:n, ones (n,1)); x = abs (x - x.');
 %! contour (x);
 %! xlim ([1, 64]);
 %! ylim ([1, 64]);
 %! colorbar ();
 %! colorbar off;
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! n = 64; x = kron (1:n, ones (n,1)); x = abs (x - x.');
 %! contour (x);
 %! xlim ([1, 64]);
 %! ylim ([1, 64]);
 %! colorbar ();
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! imagesc (1 ./ hilb (99));
 %! h = colorbar ();
-%! set (h, 'yscale', 'log');
+%! set (h, "yscale", "log");
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! imagesc (log10 (1 ./ hilb (99)));
 %! h = colorbar ();
-%! ytick = get (h, 'ytick');
-%! set (h, 'yticklabel', sprintf ('10^{%g}|', ytick));
+%! ytick = get (h, "ytick");
+%! set (h, "yticklabel", sprintf ("10^{%g}|", ytick));
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! n = 5; x = linspace (0,5,n); y = linspace (0,1,n);
 %! imagesc (1 ./ hilb (n));
 %! axis equal;
 %! colorbar ();
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! n = 5; x = linspace (0,5,n); y = linspace (0,1,n);
 %! imagesc (x, y, 1 ./ hilb (n));
 %! axis equal;
 %! colorbar ();
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! n = 5; x = linspace (0,5,n); y = linspace (0,1,n);
 %! imagesc (y, x, 1 ./ hilb (n));
 %! axis equal;
 %! colorbar ();
 
-## This requires that the axes position be properly determined for 'axis equal'
+## This requires that the axes position be properly determined for "axis equal"
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! axes;
 %! colorbar ();
 %! hold on;
 %! contour (peaks ());
 %! hold off;
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! plot ([0, 2]);
-%! colorbar ('east');
+%! colorbar ("east");
 %! axis square;
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! plot ([0, 2]);
-%! colorbar ('eastoutside');
+%! colorbar ("eastoutside");
 %! axis square;
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! pcolor (peaks (20));
 %! shading interp;
-%! axis ('tight', 'square');
+%! axis ("tight", "square");
 %! colorbar ();
-#%! axes ('color','none','box','on','activepositionproperty','position');
+#%! axes ("color","none","box","on","activepositionproperty","position");
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! plot ([0, 2]);
-%! colorbar ('east');
+%! colorbar ("east");
 %! axis equal;
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! plot ([0, 2]);
-%! colorbar ('eastoutside');
+%! colorbar ("eastoutside");
 %! axis equal;
 
diff --git a/scripts/plot/draw/comet.m b/scripts/plot/draw/comet.m
--- a/scripts/plot/draw/comet.m
+++ b/scripts/plot/draw/comet.m
@@ -90,16 +90,16 @@ function comet (varargin)
     endif
   end_unwind_protect
 
 endfunction
 
 
 %!demo
 %! clf;
-%! title ('comet() animation');
+%! title ("comet() animation");
 %! hold on;
 %! t = 0:.1:2*pi;
 %! x = cos (2*t) .* (cos (t).^2);
 %! y = sin (2*t) .* (sin (t).^2);
 %! comet (x, y, 0.05);
 %! hold off;
 
diff --git a/scripts/plot/draw/comet3.m b/scripts/plot/draw/comet3.m
--- a/scripts/plot/draw/comet3.m
+++ b/scripts/plot/draw/comet3.m
@@ -92,14 +92,14 @@ function comet3 (varargin)
     endif
   end_unwind_protect
 
 endfunction
 
 
 %!demo
 %! clf;
-%! title ('comet3() animation');
+%! title ("comet3() animation");
 %! view (3); hold on;
 %! t = 0:pi/20:5*pi;
 %! comet3 (cos (t), sin (t), t, 0.05);
 %! hold off;
 
diff --git a/scripts/plot/draw/contour.m b/scripts/plot/draw/contour.m
--- a/scripts/plot/draw/contour.m
+++ b/scripts/plot/draw/contour.m
@@ -83,36 +83,36 @@ function [c, h] = contour (varargin)
     h = htmp;
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! [x, y, z] = peaks ();
 %! contour (x, y, z);
-%! title ({'contour() plot (isolines of constant Z)'; 'Z = peaks()'});
+%! title ({"contour() plot (isolines of constant Z)"; "Z = peaks()"});
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! [theta, r] = meshgrid (linspace (0,2*pi,64), linspace (0,1,64));
 %! [X, Y] = pol2cart (theta, r);
 %! Z = sin (2*theta) .* (1-r);
 %! contour (X, Y, abs (Z), 10);
-%! title ({'contour() plot'; 'polar fcn: Z = sin (2*theta) * (1-r)'});
+%! title ({"contour() plot"; "polar fcn: Z = sin (2*theta) * (1-r)"});
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! z = peaks ();
 %! contour (z, [0 0]);
-%! title ({'contour() plot with single isoline at Z == 0'; 'Z = peaks()'});
+%! title ({"contour() plot with single isoline at Z == 0"; "Z = peaks()"});
 
 %!test
 %! hf = figure ("visible", "off");
 %! clf (hf);
 %! unwind_protect
 %!   [x, y, z] = peaks ();
 %!   [c, h] = contour (x, y, z);
 %!   levellist = -6:6;
diff --git a/scripts/plot/draw/contour3.m b/scripts/plot/draw/contour3.m
--- a/scripts/plot/draw/contour3.m
+++ b/scripts/plot/draw/contour3.m
@@ -91,17 +91,17 @@ function [c, h] = contour3 (varargin)
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
 %! colormap (cool (64));
-%! surf (peaks (19), 'facecolor', 'none', 'edgecolor', [0.85 0.85 0.85]);
+%! surf (peaks (19), "facecolor", "none", "edgecolor", [0.85 0.85 0.85]);
 %! hold on;
 %! contour3 (peaks (19));
 %! hold off;
 %! axis tight;
 %! zlim auto;
 %! view (315, 17);
-%! title ({'contour3 of peaks() function', 'gray surf() shows peaks function'});
+%! title ({"contour3 of peaks() function", "gray surf() shows peaks function"});
 
diff --git a/scripts/plot/draw/contourf.m b/scripts/plot/draw/contourf.m
--- a/scripts/plot/draw/contourf.m
+++ b/scripts/plot/draw/contourf.m
@@ -85,31 +85,31 @@ function [c, h] = contourf (varargin)
     h = htmp;
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! [x, y, z] = peaks (50);
 %! contourf (x, y, z, -7:9);
-%! title ({'contourf() plot (filled contour lines)'; 'Z = peaks()'});
+%! title ({"contourf() plot (filled contour lines)"; "Z = peaks()"});
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! [theta, r] = meshgrid (linspace (0,2*pi,64), linspace (0,1,64));
 %! [X, Y] = pol2cart (theta, r);
 %! Z = sin (2*theta) .* (1-r);
 %! contourf (X, Y, abs (Z), 10);
-%! title ({'contourf() plot'; 'polar fcn: Z = sin (2*theta) * (1-r)'});
+%! title ({"contourf() plot"; "polar fcn: Z = sin (2*theta) * (1-r)"});
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! x = linspace (-2, 2);
 %! [x, y] = meshgrid (x);
 %! z = sqrt (x.^2 + y.^2) ./ (x.^2 + y.^2 + 1);
 %! contourf (x, y, z, [0.4, 0.4]);
-%! title ('Hole should be filled with the background color');
+%! title ("Hole should be filled with the background color");
 
diff --git a/scripts/plot/draw/cylinder.m b/scripts/plot/draw/cylinder.m
--- a/scripts/plot/draw/cylinder.m
+++ b/scripts/plot/draw/cylinder.m
@@ -97,13 +97,13 @@ function [xx, yy, zz] = cylinder (vararg
     end_unwind_protect
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! [x, y, z] = cylinder (10:-1:0, 50);
 %! surf (x, y, z);
-%! title ('cylinder() with linearly shrinking radius produces a cone');
+%! title ("cylinder() with linearly shrinking radius produces a cone");
 
diff --git a/scripts/plot/draw/ellipsoid.m b/scripts/plot/draw/ellipsoid.m
--- a/scripts/plot/draw/ellipsoid.m
+++ b/scripts/plot/draw/ellipsoid.m
@@ -90,10 +90,10 @@ function [xx, yy, zz] = ellipsoid (varar
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
 %! ellipsoid (0, 0, 1, 2, 3, 4, 20);
-%! title ('ellipsoid()');
+%! title ("ellipsoid()");
 
diff --git a/scripts/plot/draw/errorbar.m b/scripts/plot/draw/errorbar.m
--- a/scripts/plot/draw/errorbar.m
+++ b/scripts/plot/draw/errorbar.m
@@ -192,56 +192,56 @@ function h = errorbar (varargin)
 endfunction
 
 
 %!demo
 %! clf;
 %! rand_1x11_data1 = [0.82712, 0.50325, 0.35613, 0.77089, 0.20474, 0.69160, 0.30858, 0.88225, 0.35187, 0.14168, 0.54270];
 %! rand_1x11_data2 = [0.506375, 0.330106, 0.017982, 0.859270, 0.140641, 0.327839, 0.275886, 0.162453, 0.807592, 0.318509, 0.921112];
 %! errorbar (0:10, rand_1x11_data1, 0.25*rand_1x11_data2);
-%! title ('errorbar() with Y errorbars');
+%! title ("errorbar() with Y errorbars");
 
 %!demo
 %! clf;
 %! rand_1x11_data3 = [0.423650, 0.142331, 0.213195, 0.129301, 0.975891, 0.012872, 0.635327, 0.338829, 0.764997, 0.401798, 0.551850];
 %! rand_1x11_data4 = [0.682566, 0.456342, 0.132390, 0.341292, 0.108633, 0.601553, 0.040455, 0.146665, 0.309187, 0.586291, 0.540149];
-%! errorbar (0:10, rand_1x11_data3, rand_1x11_data4, '>');
-%! title ('errorbar() with X errorbars');
+%! errorbar (0:10, rand_1x11_data3, rand_1x11_data4, ">");
+%! title ("errorbar() with X errorbars");
 
 %!demo
 %! clf;
 %! x = 0:0.5:2*pi;
 %! err = x/30;
 %! y1 = sin (x);
 %! y2 = cos (x);
-%! errorbar (x, y1, err, '~', x, y2, err, '>');
-%! legend ('Y errbar', 'X errbar');
-%! title ('errorbar() with 2 datasets');
+%! errorbar (x, y1, err, "~", x, y2, err, ">");
+%! legend ("Y errbar", "X errbar");
+%! title ("errorbar() with 2 datasets");
 
 
 %!demo
 %! clf;
 %! x = 0:0.5:2*pi;
 %! err = x/30;
 %! y1 = sin (x);
 %! y2 = cos (x);
-%! errorbar (x, y1, err, err, '#r', x, y2, err, err, '#~');
-%! legend ('X errbox', 'Y errbox');
-%! title ('errorbar() with error boxes');
+%! errorbar (x, y1, err, err, "#r", x, y2, err, err, "#~");
+%! legend ("X errbox", "Y errbox");
+%! title ("errorbar() with error boxes");
 
 %!demo
 %! clf;
 %! x = 0:0.5:2*pi;
 %! err = x/30;
 %! y1 = sin (x);
 %! y2 = cos (x);
-%! errorbar (x, y1, err, err, err, err, '~>', ...
-%!           x, y2, err, err, err, err, '#~>-*');
-%! legend ('X-Y errbars', 'X-Y errboxes');
-%! title ('errorbar() with X-Y errorbars and error boxes');
+%! errorbar (x, y1, err, err, err, err, "~>", ...
+%!           x, y2, err, err, err, err, "#~>-*");
+%! legend ("X-Y errbars", "X-Y errboxes");
+%! title ("errorbar() with X-Y errorbars and error boxes");
 
 ## Invisible figure used for tests
 %!shared hf, hax
 %! hf = figure ("visible", "off");
 %! hax = axes;
 
 %!error errorbar ()
 %!error errorbar (1)
diff --git a/scripts/plot/draw/ezcontour.m b/scripts/plot/draw/ezcontour.m
--- a/scripts/plot/draw/ezcontour.m
+++ b/scripts/plot/draw/ezcontour.m
@@ -64,12 +64,12 @@ function h = ezcontour (varargin)
     h = htmp;
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! f = @(x,y) sqrt (abs (x .* y)) ./ (1 + x.^2 + y.^2);
 %! ezcontour (f, [-3, 3]);
 
diff --git a/scripts/plot/draw/ezcontourf.m b/scripts/plot/draw/ezcontourf.m
--- a/scripts/plot/draw/ezcontourf.m
+++ b/scripts/plot/draw/ezcontourf.m
@@ -64,12 +64,12 @@ function h = ezcontourf (varargin)
     h = htmp;
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! f = @(x,y) sqrt (abs (x .* y)) ./ (1 + x.^2 + y.^2);
 %! ezcontourf (f, [-3, 3]);
 
diff --git a/scripts/plot/draw/ezmesh.m b/scripts/plot/draw/ezmesh.m
--- a/scripts/plot/draw/ezmesh.m
+++ b/scripts/plot/draw/ezmesh.m
@@ -85,20 +85,20 @@ function h = ezmesh (varargin)
     h = htmp;
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! f = @(x,y) sqrt (abs (x .* y)) ./ (1 + x.^2 + y.^2);
 %! ezmesh (f, [-3, 3]);
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! fx = @(s,t) cos (s) .* cos (t);
 %! fy = @(s,t) sin (s) .* cos (t);
 %! fz = @(s,t) sin (t);
 %! ezmesh (fx, fy, fz, [-pi,pi,-pi/2,pi/2], 20);
 
diff --git a/scripts/plot/draw/ezmeshc.m b/scripts/plot/draw/ezmeshc.m
--- a/scripts/plot/draw/ezmeshc.m
+++ b/scripts/plot/draw/ezmeshc.m
@@ -75,12 +75,12 @@ function h = ezmeshc (varargin)
     h = htmp;
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! f = @(x,y) sqrt (abs (x .* y)) ./ (1 + x.^2 + y.^2);
 %! ezmeshc (f, [-3, 3]);
 
diff --git a/scripts/plot/draw/ezplot.m b/scripts/plot/draw/ezplot.m
--- a/scripts/plot/draw/ezplot.m
+++ b/scripts/plot/draw/ezplot.m
@@ -82,27 +82,27 @@ function h = ezplot (varargin)
   if (nargout > 0)
     h = htmp;
   endif
 
 endfunction
 
 
 %!demo
-%! %% sinc function using function handle
+%! ## sinc function using function handle
 %! f = @(x) sin (pi*x) ./ (pi*x);
 %! ezplot (f);
 
 %!demo
-%! %% example of a function string and explicit limits
+%! ## example of a function string and explicit limits
 %! clf;
-%! ezplot ('1/x', [-2 2]);
+%! ezplot ("1/x", [-2 2]);
 
 %!demo
-%! %% parameterized function example over -2*pi <= t <= +2*pi
+%! ## parameterized function example over -2*pi <= t <= +2*pi
 %! clf;
 %! ezplot (@cos, @sin);
 
 %!demo
-%! %% implicit function of 2 variables
+%! ## implicit function of 2 variables
 %! clf;
-%! ezplot (inline ('x^2 - y^2 - 1'));
+%! ezplot (inline ("x^2 - y^2 - 1"));
 
diff --git a/scripts/plot/draw/ezplot3.m b/scripts/plot/draw/ezplot3.m
--- a/scripts/plot/draw/ezplot3.m
+++ b/scripts/plot/draw/ezplot3.m
@@ -75,10 +75,10 @@ endfunction
 %! fz = @(t) t;
 %! ezplot3 (fx, fy, fz, [0, 10*pi], 100);
 
 %!demo
 %! clf;
 %! fx = @(t) cos (t);
 %! fy = @(t) sin (t);
 %! fz = @(t) t;
-%! ezplot3 (fx, fy, fz, [0, 5*pi], 100, 'animate');
+%! ezplot3 (fx, fy, fz, [0, 5*pi], 100, "animate");
 
diff --git a/scripts/plot/draw/ezsurf.m b/scripts/plot/draw/ezsurf.m
--- a/scripts/plot/draw/ezsurf.m
+++ b/scripts/plot/draw/ezsurf.m
@@ -85,32 +85,32 @@ function h = ezsurf (varargin)
     h = htmp;
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! f = @(x,y) sqrt (abs (x .* y)) ./ (1 + x.^2 + y.^2);
 %! ezsurf (f, [-3, 3]);
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! fx = @(s,t) cos (s) .* cos (t);
 %! fy = @(s,t) sin (s) .* cos (t);
 %! fz = @(s,t) sin (t);
 %! ezsurf (fx, fy, fz, [-pi,pi,-pi/2,pi/2], 20);
 %! axis equal;
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! f = @(x,y) x.^2 + y.^2;
 %! subplot (1,2,1);
 %!  ezsurf (f, [-2,2]);
-%!  title ({'x^2 + y^2'; 'plotted over rectangular grid (default)'});
+%!  title ({"x^2 + y^2"; "plotted over rectangular grid (default)"});
 %! subplot (1,2,2);
-%!  ezsurf (f, [-2,2], 'circ');
-%!  title ({'x^2 + y^2'; 'plotted over circular disk with "circ"'});
+%!  ezsurf (f, [-2,2], "circ");
+%!  title ({"x^2 + y^2"; 'plotted over circular disk with "circ"'});
 
diff --git a/scripts/plot/draw/ezsurfc.m b/scripts/plot/draw/ezsurfc.m
--- a/scripts/plot/draw/ezsurfc.m
+++ b/scripts/plot/draw/ezsurfc.m
@@ -75,12 +75,12 @@ function h = ezsurfc (varargin)
     h = htmp;
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! f = @(x,y) sqrt (abs (x .* y)) ./ (1 + x.^2 + y.^2);
 %! ezsurfc (f, [-3, 3]);
 
diff --git a/scripts/plot/draw/feather.m b/scripts/plot/draw/feather.m
--- a/scripts/plot/draw/feather.m
+++ b/scripts/plot/draw/feather.m
@@ -120,17 +120,17 @@ function h = feather (varargin)
 endfunction
 
 
 %!demo
 %! clf;
 %! phi = [0 : 15 : 360] * pi/180;
 %! feather (sin (phi), cos (phi));
 %! axis tight;
-%! title ('feather plot');
+%! title ("feather plot");
 
 ## Test input validation
 %!error feather ()
 %!error feather (1,2,3,4)
 %!error feather (1, "-r", 2)
 %!error <invalid linestyle STYLE> feather (1, "abc")
 %!error <invalid linestyle STYLE> feather (1, {1})
 
diff --git a/scripts/plot/draw/fill.m b/scripts/plot/draw/fill.m
--- a/scripts/plot/draw/fill.m
+++ b/scripts/plot/draw/fill.m
@@ -167,36 +167,36 @@ endfunction
 %!demo
 %! clf;
 %! t1 = (1/16:1/8:1) * 2*pi;
 %! t2 = ((1/16:1/8:1) + 1/32) * 2*pi;
 %! x1 = sin (t1) - 0.8;
 %! y1 = cos (t1);
 %! x2 = sin (t2) + 0.8;
 %! y2 = cos (t2);
-%! h = fill (x1,y1,'r', x2,y2,'g');
-%! title ({'fill() function'; 'cdata specified with string'});
+%! h = fill (x1,y1,"r", x2,y2,"g");
+%! title ({"fill() function"; "cdata specified with string"});
 
 %!demo
 %! clf;
 %! t1 = (1/16:1/8:1) * 2*pi;
 %! t2 = ((1/16:1/8:1) + 1/32) * 2*pi;
 %! x1 = sin (t1) - 0.8;
 %! y1 = cos (t1);
 %! x2 = sin (t2) + 0.8;
 %! y2 = cos (t2);
 %! h = fill (x1,y1,1, x2,y2,2);
-%! title ({'fill() function'; 'cdata = row vector produces FaceColor = "flat"'});
+%! title ({"fill() function"; 'cdata = row vector produces FaceColor = "flat"'});
 
 %!demo
 %! clf;
 %! x = [0 0
 %!      1 0.5
 %!      1 0.5
 %!      0 0];
 %! y = [0 0
 %!      0 0
 %!      1 0.5
 %!      1 0.5];
 %! c = [1 2 3 4]';
 %! fill (x, y, c);
-%! title ({'fill() function'; 'cdata = column vector produces FaceColor = "interp"'});
+%! title ({"fill() function"; 'cdata = column vector produces FaceColor = "interp"'});
 
diff --git a/scripts/plot/draw/fplot.m b/scripts/plot/draw/fplot.m
--- a/scripts/plot/draw/fplot.m
+++ b/scripts/plot/draw/fplot.m
@@ -202,28 +202,28 @@ function [X, Y] = fplot (varargin)
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
 %! fplot (@cos, [0, 2*pi]);
-%! title ('fplot() single function');
+%! title ("fplot() single function");
 
 %!demo
 %! clf;
-%! fplot ('[cos(x), sin(x)]', [0, 2*pi]);
-%! title ('fplot() multiple functions');
+%! fplot ("[cos(x), sin(x)]", [0, 2*pi]);
+%! title ("fplot() multiple functions");
 
 %!demo
 %! clf;
 %! fh = @(x) sin (pi*x) ./ (pi*x);
 %! fplot (fh, [-5, 5]);
-%! title ('fplot() sinc function (possible division by 0, near 0)');
+%! title ("fplot() sinc function (possible division by 0, near 0)");
 
 %!test
 %! ## Multi-valued function
 %! [x, y] = fplot ("[cos(x), sin(x)]", [0, 2*pi]);
 %! assert (columns (y) == 2);
 %! assert (rows (x) == rows (y));
 %! assert (y, [cos(x), sin(x)], -2e-3);
 
diff --git a/scripts/plot/draw/isocaps.m b/scripts/plot/draw/isocaps.m
--- a/scripts/plot/draw/isocaps.m
+++ b/scripts/plot/draw/isocaps.m
@@ -394,38 +394,38 @@ endfunction
 %! light ();
 
 %!demo
 %! v = smooth3 (rand (6, 8, 4));
 %! isoval = .5;
 %! x = 1:3:22;  y = -14:5:11;  z = linspace (16, 18, 4);
 %! [xx, yy, zz] = meshgrid (x, y, z);
 %! clf;
-%! %% two arguments, no output
+%! ## two arguments, no output
 %! subplot (2, 2, 1);
 %!  isocaps (v, isoval);
 %!  view (3);
-%! %% five arguments, no output (x, y, z are vectors)
+%! ## five arguments, no output (x, y, z are vectors)
 %! subplot (2, 2, 2);
 %!  isocaps (x, y, z, v, isoval);
 %!  view (3);
-%! %% five arguments, no output (x, y, z are matrices)
+%! ## five arguments, no output (x, y, z are matrices)
 %! subplot (2, 2, 3);
 %!  isocaps (xx, yy, zz, v, isoval);
 %!  view (3);
-%! %% five arguments, no output (mixed x, y, z)
+%! ## five arguments, no output (mixed x, y, z)
 %! subplot (2, 2, 4);
 %!  isocaps (x, yy, z, v, isoval);
 %!  view (3);
 %!
 %! annotation ("textbox", [0.1 0.9 0.9 0.1], ...
-%!    "String", ["Apart from the first plot having a different scale, " ...
-%!               "all four plots must look the same."], ...
-%!    "HorizontalAlignment", "left", ...
-%!    "FontSize", 12);
+%!     "String", ["Apart from the first plot having a different scale, " ...
+%!     "all four plots must look the same."], ...
+%!     "HorizontalAlignment", "left", ...
+%!     "FontSize", 12);
 
 %!shared x, y, z, xx, yy, zz, val, iso
 %! x = 1:3:22;  y = -14:5:11;  z = linspace (16, 18, 4);
 %! [xx, yy, zz] = meshgrid (x, y, z);
 %! val = rand (6, 8, 4);
 %! iso = .5;
 
 ## check results for differently shaped input coordinates
diff --git a/scripts/plot/draw/isonormals.m b/scripts/plot/draw/isonormals.m
--- a/scripts/plot/draw/isonormals.m
+++ b/scripts/plot/draw/isonormals.m
@@ -119,55 +119,59 @@ function varargout = isonormals (varargi
 
   endswitch
 
 endfunction
 
 
 %!demo
 %! function isofinish (hp)
-%!   axis equal
-%!   set (hp, "VertexNormals", -get (hp, "VertexNormals")); # Revert normals
-%!   shading interp
+%!   axis equal;
+%!   set (hp, "VertexNormals", -get (hp, "VertexNormals"));  # Revert normals
+%!   shading interp;
 %!   set (hp, "FaceLighting", "gouraud");
 %!   set (hp, "BackFaceLighting", "unlit");
 %!   light ();
 %! endfunction
 %!
 %! N = 15;    # Increase number of vertices in each direction
 %! iso = .4;  # Change isovalue to .1 to display a sphere
 %! lin = linspace (0, 2, N);
 %! [x, y, z] = meshgrid (lin, lin, lin);
 %! val = (x-.5).^2 + (y-.5).^2 + (z-.5).^2;
 %! clf;
 %!
-%! subplot (2,2,1); view (-38, 20);
-%! [fac, vert, cdat] = isosurface (x, y, z, val, iso, y);
-%! hp = patch ("Faces", fac, "Vertices", vert, "FaceVertexCData", cdat);
-%! title ("without isonormals")
-%! isofinish (hp);  # Call user function isofinish
+%! subplot (2,2,1);
+%!  view (-38, 20);
+%!  [fac, vert, cdat] = isosurface (x, y, z, val, iso, y);
+%!  hp = patch ("Faces", fac, "Vertices", vert, "FaceVertexCData", cdat);
+%!  title ("without isonormals");
+%!  isofinish (hp);
 %!
-%! subplot (2,2,2); view (-38, 20);
-%! hp = patch ("Faces", fac, "Vertices", vert, "FaceVertexCData", cdat);
-%! title ("patch modified by isonormals")
-%! isonormals (x, y, z, val, hp); # Directly modify patch
-%! isofinish (hp);
+%! subplot (2,2,2);
+%!  view (-38, 20);
+%!  hp = patch ("Faces", fac, "Vertices", vert, "FaceVertexCData", cdat);
+%!  title ("patch modified by isonormals");
+%!  isonormals (x, y, z, val, hp);  # Directly modify patch
+%!  isofinish (hp);
 %!
-%! subplot (2,2,3); view (-38, 20);
-%! hp = patch ("Faces", fac, "Vertices", vert, "FaceVertexCData", cdat);
-%! vn = isonormals (x, y, z, val, vert); # Compute normals of isosurface
-%! set (hp, "VertexNormals", vn);    # Manually set vertex normals
-%! title ('''VertexNormals'' from isonormals manually set')
-%! isofinish (hp);
+%! subplot (2,2,3);
+%!  view (-38, 20);
+%!  hp = patch ("Faces", fac, "Vertices", vert, "FaceVertexCData", cdat);
+%!  vn = isonormals (x, y, z, val, vert);  # Compute normals of isosurface
+%!  set (hp, "VertexNormals", vn);         # Manually set vertex normals
+%!  title ('"VertexNormals" from isonormals manually set');
+%!  isofinish (hp);
 %!
-%! subplot (2,2,4); view (-38, 20);
-%! hp = patch ("Faces", fac, "Vertices", vert, "FaceVertexCData", cdat);
-%! isonormals (x, y, z, val, hp, "negate"); # Use reverse directly
-%! title ('patch modified by isonormals (..., ''negate'')')
-%! isofinish (hp);
+%! subplot (2,2,4);
+%!  view (-38, 20);
+%!  hp = patch ("Faces", fac, "Vertices", vert, "FaceVertexCData", cdat);
+%!  isonormals (x, y, z, val, hp, "negate");  # Use reverse directly
+%!  title ('patch modified by isonormals (..., "negate")');
+%!  isofinish (hp);
 
 %!shared x,y,z,val,vert
 %! [x, y, z] = meshgrid (0:.5:2, 0:.5:2, 0:.5:2);
 %! val = abs ((x-.5).^2 + (y-.3).^2 + (z-.4).^2);
 %! [fac, vert, cdat] = isosurface (x, y, z, val, .4, y);
 
 %!test
 %! vn = isonormals (x, y, z, val, vert);
diff --git a/scripts/plot/draw/isosurface.m b/scripts/plot/draw/isosurface.m
--- a/scripts/plot/draw/isosurface.m
+++ b/scripts/plot/draw/isosurface.m
@@ -384,47 +384,48 @@ endfunction
 %! x = 0:2;
 %! y = 0:3;
 %! z = 0:1;
 %! [xx, yy, zz] = meshgrid (x, y, z);
 %! v        = [0, 0, 0; 0, 0, 0; 0, 0, 1; 0, 0, 1];
 %! v(:,:,2) = [0, 0, 0; 0, 0, 1; 0, 1, 2; 0, 1, 2];
 %! iso = 0.8;
 %! clf;
-%% three arguments, no output
+%!
+%! ## Three arguments, no output
 %! subplot (2, 2, 1);
-%! fvc = isosurface (v, iso, yy);
-%! patch (fvc);
-%! shading faceted
-%! view (110, 40);
-%% six arguments, no output (x, y, z are vectors)
+%!  fvc = isosurface (v, iso, yy);
+%!  patch (fvc);
+%!  shading faceted;
+%!  view (110, 40);
+%! ## six arguments, no output (x, y, z are vectors)
 %! subplot (2, 2, 2);
-%! fvc = isosurface (x, y, z, v, iso, yy);
-%! patch (fvc);
-%! shading faceted
-%! view (110, 40);
-%% six arguments, no output (x, y, z are matrices)
+%!  fvc = isosurface (x, y, z, v, iso, yy);
+%!  patch (fvc);
+%!  shading faceted;
+%!  view (110, 40);
+%! ## six arguments, no output (x, y, z are matrices)
 %! subplot (2, 2, 3);
-%! fvc = isosurface (xx, yy, zz, v, iso, yy);
-%! patch (fvc);
-%! shading faceted
-%! view (110, 40);
-%% six arguments, no output (mixed x, y, z) and option "noshare"
+%!  fvc = isosurface (xx, yy, zz, v, iso, yy);
+%!  patch (fvc);
+%!  shading faceted;
+%!  view (110, 40);
+%! ## six arguments, no output (mixed x, y, z) and option "noshare"
 %! subplot (2, 2, 4);
-%! fvc = isosurface (x, yy, z, v, iso, yy, "noshare");
-%! patch (fvc);
-%! shading faceted
-%! view (110, 40);
-%! annotation ("textbox", [0.1 0.9 0.9 0.1], ...
-%!    "String", ["Apart from the first plot having a different scale, " ...
-%!               "all four plots must look the same." 10 ...
-%!               "The last plot might have different colors but must have " ...
-%!               "the same shape."], ...
-%!    "HorizontalAlignment", "left", ...
-%!    "FontSize", 12);
+%!  fvc = isosurface (x, yy, z, v, iso, yy, "noshare");
+%!  patch (fvc);
+%!  shading faceted;
+%!  view (110, 40);
+%!  annotation ("textbox", [0.1 0.9 0.9 0.1], ...
+%!      "String", ["Apart from the first plot having a different scale, " ...
+%!      "all four plots must look the same.\n" ...
+%!      "The last plot might have different colors but must have " ...
+%!      "the same shape."], ...
+%!      "HorizontalAlignment", "left", ...
+%!      "FontSize", 12);
 
 %!shared x, y, z, xx, yy, zz, val, iso
 %! x = 0:2;
 %! y = 0:3;
 %! z = 0:1;
 %! [xx, yy, zz]  = meshgrid (x, y, z);
 %! val        = [0, 0, 0; 0, 0, 0; 0, 0, 1; 0, 0, 1];
 %! val(:,:,2) = [0, 0, 0; 0, 0, 1; 0, 1, 2; 0, 1, 2];
diff --git a/scripts/plot/draw/light.m b/scripts/plot/draw/light.m
--- a/scripts/plot/draw/light.m
+++ b/scripts/plot/draw/light.m
@@ -79,19 +79,19 @@ function h = light (varargin)
   if (nargout > 0)
     h = htmp;
   endif
 
 endfunction
 
 
 %!demo
-%! %% Demonstrate effects of lighting
+%! ## Demonstrate effects of lighting
 %! clf;
-%! %% patches
+%! ## patches
 %! h_axes1 = subplot (2, 2, 1);
 %! [x,y,z] = meshgrid (-2:0.2:2, -2:0.2:2, -2:0.2:2);
 %! val = x.^2 + y.^2 + z.^2;
 %! fv1 = isosurface (x, y, z, val, 1);
 %! h_patch1 = patch (fv1, "FaceColor", "c", "EdgeColor", "none", ...
 %!                        "FaceLighting", "Gouraud");
 %! isonormals (x, y, z, val, h_patch1);
 %! fv2 = isosurface (x, y+3, z, val, 1);
@@ -105,31 +105,31 @@ endfunction
 %!
 %! h_axes2 = subplot (2, 2, 2);
 %! patch (fv1, "FaceColor", "c", "EdgeColor", "none");
 %! patch (fv2, "FaceColor", "r", "EdgeColor", "none");
 %! axis equal; axis tight
 %! title ("Patch without lighting");
 %! view (3);
 %!
-%! %% surfaces
+%! ## surfaces
 %! h_axes3 = subplot (2, 2, 3);
 %! h_surf1 = surf (h_axes3, peaks, "LineStyle", "none", ...
 %!                                 "FaceLighting", "Gouraud");
 %! title ("Surface with lighting");
 %! view (3);
 %! h_light2 = light ();
 %!
 %! h_axes3 = subplot (2, 2, 4);
 %! h_surf2 = surf (h_axes3, peaks, "LineStyle", "none");
 %! title ("Surface without lighting");
 %! view (3);
 
 %!demo
-%! %% Lighting modes
+%! ## Lighting modes
 %! clf;
 %! [x,y,z] = meshgrid (-.2:0.05:.2, -.2:0.05:.2, -.2:0.05:.2);
 %! val = (x.^2 + y.^2 + z.^2);
 %!
 %! h_axes1 = axes ();
 %! fv = isosurface (x, y, z, val, .039);
 %! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", ...
 %!                      "FaceLighting", "none");
@@ -144,17 +144,17 @@ endfunction
 %! isonormals (x+1, y, z, val, h_patch);
 %! axis tight
 %! axis equal
 %! view (2);
 %! light ("Position", [-1 1 1]);
 %! title ("FaceLighting: none - flat - gouraud");
 
 %!demo
-%! %% multiple lights
+%! ## multiple lights
 %! clf;
 %! h_axes = subplot (1, 2, 1);
 %! [x,y,z] = meshgrid (-2:0.1:2, -2:0.1:2, -2:0.1:2);
 %! val = x.^2 + y.^2 + z.^2;
 %! fv = isosurface (x, y, z, val, 1);
 %! h_patch = patch (fv, "FaceColor", "w", "EdgeColor", "none", "FaceLighting", "Gouraud");
 %! isonormals (x, y, z, val, h_patch);
 %! axis equal; axis tight
@@ -168,17 +168,17 @@ endfunction
 %! axis equal; axis tight
 %! title ("Patch with three lights");
 %! view (3);
 %! h_light1 = light ("Color", "r");
 %! h_light2 = light ("Position", [0 1 1], "Color", "b");
 %! h_light3 = light ("Position", [-1 -1 2], "Color", "g");
 
 %!demo
-%! %% Diffuse and specular reflex
+%! ## Diffuse and specular reflection
 %! clf;
 %! h_axes = axes ();
 %! [x,y,z] = meshgrid (-.2:0.04:.2, -.2:0.04:.2, -.2:0.04:.2);
 %! val = (x.^2 + y.^2 + z.^2);
 %!
 %! fv = isosurface (x, y, z, val, .039);
 %! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", "FaceLighting", "Gouraud");
 %! set (h_patch, "DiffuseStrength", 0, "SpecularStrength", 0);
@@ -222,17 +222,17 @@ endfunction
 %! h_light = light ("Position", [-1 1 1]);
 %! view (2);
 %!
 %! xlabel ("SpecularStrength");
 %! ylabel ("DiffuseStrength");
 
 
 %!demo
-%! %% Ambient Strength and Ambient Light Color
+%! ## Ambient Strength and Ambient Light Color
 %! clf;
 %! [x,y,z] = meshgrid (-.2:0.05:.2, -.2:0.05:.2, -.2:0.05:.2);
 %! val = (x.^2 + y.^2 + z.^2);
 %!
 %! h_axes1 = subplot (3,1,3);
 %! set (h_axes1, "AmbientLightColor", "g");
 %! fv = isosurface (x, y, z, val, .039);
 %! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", "FaceLighting", "Gouraud");
@@ -289,17 +289,17 @@ endfunction
 %! isonormals (x+1, y, z, val, h_patch);
 %! h_light = light ("Position", [-1 1 1]);
 %! axis tight
 %! axis equal
 %! view (2);
 %! ylabel ("AmbientLightColor [1 1 1]");
 
 %!demo
-%! %% Specular Exponent
+%! ## Specular Exponent
 %! clf;
 %! [x,y,z] = meshgrid (-.2:0.02:.2, -.2:0.02:.2, -.2:0.02:.2);
 %! val = (x.^2 + y.^2 + z.^2);
 %!
 %! h_axes = axes ();
 %! fv = isosurface (x, y, z, val, .039);
 %! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", "FaceLighting", "Gouraud");
 %! set (h_patch, "SpecularExponent", 15);
@@ -314,17 +314,17 @@ endfunction
 %! isonormals (x+1, y, z, val, h_patch);
 %! h_light = light ("Position", [-1 1 1]);
 %! axis tight
 %! axis equal
 %! view (2);
 %! xlabel ("SpecularExponent");
 
 %!demo
-%! %% SpecularColorReflectance
+%! ## SpecularColorReflectance
 %! clf;
 %! [x,y,z] = meshgrid (-.2:0.02:.2, -.2:0.02:.2, -.2:0.02:.2);
 %! val = (x.^2 + y.^2 + z.^2);
 %!
 %! h_axes = axes ();
 %! fv = isosurface (x, y, z, val, .039);
 %! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", "FaceLighting", "Gouraud");
 %! set (h_patch, "SpecularColorReflectance", 0);
@@ -339,17 +339,17 @@ endfunction
 %! isonormals (x+1, y, z, val, h_patch);
 %! h_light = light ("Position", [-1 1 1]);
 %! axis tight
 %! axis equal
 %! view (2);
 %! xlabel ("SpecularColorReflectance");
 
 %!demo
-%! %% BackFaceLighting
+%! ## BackFaceLighting
 %! [x,y,z] = meshgrid (-.5:0.1:2, -2:0.1:2, -2:0.1:2);
 %! val = x.^2 + y.^2 + z.^2;
 %! fv = isosurface (x, y, z, val, 1);
 %! vn = isonormals (x, y, z, val, fv.vertices, "negate");
 %! h_axes1 = subplot (1, 3, 1);
 %! h_patch = patch (fv, "FaceColor", "c", "EdgeColor", "none", ...
 %!                  "FaceLighting", "Gouraud", "VertexNormals", vn);
 %! set (h_patch, "BackFaceLighting", "reverselit");
@@ -372,108 +372,107 @@ endfunction
 %!           "FaceLighting", "Gouraud", "VertexNormals", vn);
 %! set (h_patch, "BackFaceLighting", "unlit");
 %! h_light = light ();
 %! view (h_axes3, [-50 30]);
 %! title ("unlit");
 %! axis equal
 
 %!demo
-%! %% Colored patch
+%! ## Colored patch
 %! clf;
 %! [x,y,z] = meshgrid (-.2:0.02:.2, -.2:0.02:.2, -.2:0.02:.2);
 %! val = (x.^2 + y.^2 + z.^2);
 %!
 %! h_axes = axes ();
 %! fv = isosurface (x, y, z, val, .039, z);
 %! h_patch = patch (fv, "FaceColor", "flat", "EdgeColor", "none", ...
 %!             "FaceLighting", "Gouraud");
 %! set (h_patch, "SpecularExponent", 15);
 %! isonormals (x, y, z, val, h_patch);
-%! title ('Colored patch');
+%! title ("Colored patch");
 %! h_light = light ("Position", [-1 1 1]);
 %! axis tight
 %! axis equal
 %! view (3);
 
 %!demo
-%! %% Colored mesh (patch)
+%! ## Colored mesh (patch)
 %! clf;
 %! [x,y,z] = meshgrid (-.2:0.05:.2, -.2:0.05:.2, -.2:0.05:.2);
 %! val = (x.^2 + y.^2 + z.^2);
 %!
 %! h_axes = axes ();
 %! fv = isosurface (x, y, z, val, .039, z);
-%! h_patch = patch (fv, 'FaceColor', 'w', 'EdgeColor', 'interp');
+%! h_patch = patch (fv, "FaceColor", "w", "EdgeColor", "interp");
 %! isonormals (x, y, z, val, h_patch);
-%! title ('Colored mesh (patch)');
+%! title ("Colored mesh (patch)");
 %! h_light = light;
 %! lighting gouraud
 %! axis tight
 %! axis equal
 %! view (3);
 
 %!demo
-%! %% Colored mesh (surface)
+%! ## Colored mesh (surface)
 %! clf;
 %! h_mesh = mesh (peaks);
-%! title ('Colored mesh (surface)');
+%! title ("Colored mesh (surface)");
 %! h_light = light;
 %! lighting gouraud
 
 %!demo
-%! %% Light in hggroup
+%! ## Light in hggroup
 %! clf;
 %! h_mesh = mesh (peaks);
 %! h_hg = hggroup ();
-%! title ('Light in hggroup');
-%! h_light = light ('Parent', h_hg);
+%! title ("Light in hggroup");
+%! h_light = light ("Parent", h_hg);
 %! lighting gouraud
 
 %!demo
-%! %% Style local/infinite
+%! ## Style local/infinite
 %! clf;
 %! [x,y,z] = meshgrid (-.2:0.02:.2, -.2:0.02:.2, -.2:0.02:.2);
 %! val = (x.^2 + y.^2 + z.^2);
 %!
 %! h_axes1 = subplot (1,2,1);
 %! fv = isosurface (x, y, z, val, .039);
-%! h_patch = patch (fv, 'FaceColor', 'r', 'EdgeColor', 'none');
+%! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none");
 %! isonormals (x, y, z, val, h_patch);
 %! title ('"Style" set to "infinite" (default)');
-%! h_light = light ('Position', [.3 0 .3]);
+%! h_light = light ("Position", [.3 0 .3]);
 %! lighting gouraud
 %! axis equal
 %! view (3);
 %!
 %! h_axes2 = subplot (1,2,2);
 %! fv = isosurface (x, y, z, val, .039);
-%! h_patch = patch (fv, 'FaceColor', 'r', 'EdgeColor', 'none');
+%! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none");
 %! isonormals (x, y, z, val, h_patch);
 %! title ('"Style" set to "local"');
-%! h_light = light ('Style', 'local', 'Position', [.3 0 .3]);
+%! h_light = light ("Style", "local", "Position", [.3 0 .3]);
 %! lighting gouraud
 %! axis equal
 %! view (3);
 
-
 %!test
-%! hf = figure ("Visible", "off");
+%! hf = figure ("visible", "off");
 %! unwind_protect
 %!   h = light ();
 %!   assert (findobj (hf, "Type", "light"), h);
 %!   assert (get (h, "Position"), [1, 0, 1]);
 %!   assert (get (h, "Color"), [1, 1, 1]);
 %!   assert (get (h, "Style"), "infinite");
 %! unwind_protect_cleanup
 %!   close (hf);
 %! end_unwind_protect
 
 %!test
-%! hf = figure ("Visible", "off");
+%! hf = figure ("visible", "off");
 %! ha = gca;
 %! unwind_protect
 %!   h = light (ha, "Position", [1 2 3], "Color", "r");
 %!   assert (get (h, "Position"), [1 2 3]);
 %!   assert (get (h, "Color"), [1 0 0]);
 %! unwind_protect_cleanup
 %!   close (hf);
 %! end_unwind_protect
diff --git a/scripts/plot/draw/line.m b/scripts/plot/draw/line.m
--- a/scripts/plot/draw/line.m
+++ b/scripts/plot/draw/line.m
@@ -59,33 +59,33 @@ function h = line (varargin)
     h = htmp;
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
-%! line ([0 1], [0.8 0.8], 'linestyle', '-', 'color', 'b');
-%! line ([0 1], [0.6 0.6], 'linestyle', '--', 'color', 'g');
-%! line ([0 1], [0.4 0.4], 'linestyle', ':', 'color', 'r');
-%! line ([0 1], [0.2 0.2], 'linestyle', '-.', 'color', 'k');
+%! line ([0 1], [0.8 0.8], "linestyle", "-", "color", "b");
+%! line ([0 1], [0.6 0.6], "linestyle", "--", "color", "g");
+%! line ([0 1], [0.4 0.4], "linestyle", ":", "color", "r");
+%! line ([0 1], [0.2 0.2], "linestyle", "-.", "color", "k");
 %! ylim ([0 1]);
-%! title ('line() with various linestyles');
+%! title ("line() with various linestyles");
 %! legend ('"-"', '"--"', '":"', '"-."', 'location', 'eastoutside');
 
 %!demo
 %! clf;
 %! x = 0:0.3:10;
 %! y1 = cos (x);
 %! y2 = sin (x);
 %! subplot (3,1,1);
-%!  args = {'color', 'b', 'marker', 's'};
+%!  args = {"color", "b", "marker", "s"};
 %!  line ([x(:), x(:)], [y1(:), y2(:)], args{:});
-%!  title ('Test broadcasting for line()');
+%!  title ("Test broadcasting for line()");
 %! subplot (3,1,2);
 %!  line (x(:), [y1(:), y2(:)], args{:});
 %! subplot (3,1,3);
 %!  line ([x(:), x(:)+pi/2], y1(:), args{:});
 %!  xlim ([0 10]);
 
 %!test
 %! hf = figure ("visible", "off");
diff --git a/scripts/plot/draw/loglog.m b/scripts/plot/draw/loglog.m
--- a/scripts/plot/draw/loglog.m
+++ b/scripts/plot/draw/loglog.m
@@ -73,31 +73,31 @@ endfunction
 
 
 %!demo
 %! clf;
 %! t = 1:0.01:10;
 %! x = sort ((t .* (1 + rand (size (t)))) .^ 2);
 %! y = (t .* (1 + rand (size (t)))) .^ 2;
 %! loglog (x, y);
-%! title ({'loglog() plot', 'Both axes are logarithmic'});
+%! title ({"loglog() plot", "Both axes are logarithmic"});
 
 %!demo
 %! clf;
 %! a = logspace (-5, 1, 10);
 %! b =-logspace (-5, 1, 10);
 %!
 %! subplot (1,2,1);
 %!  loglog (a, b);
-%!  xlabel ('loglog (a, b)');
+%!  xlabel ("loglog (a, b)");
 %!
 %! subplot (1,2,2);
 %!  loglog (a, abs (b));
-%!  set (gca, 'ydir', 'reverse');
-%!  xlabel ('loglog (a, abs (b))');
+%!  set (gca, "ydir", "reverse");
+%!  xlabel ("loglog (a, abs (b))");
 
 %!test
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   a = logspace (-5, 1, 10);
 %!   b = logspace (-5, 1, 10);
 %!   loglog (a, b);
 %!   assert (get (gca, "yscale"), "log");
diff --git a/scripts/plot/draw/loglogerr.m b/scripts/plot/draw/loglogerr.m
--- a/scripts/plot/draw/loglogerr.m
+++ b/scripts/plot/draw/loglogerr.m
@@ -82,13 +82,13 @@ endfunction
 
 
 %!demo
 %! clf;
 %! x = exp (log (0.01):0.2:log (10));
 %! y = wblpdf (x, 3, 2);
 %! eyu = 2*rand (size (y)) .* y;
 %! eyl = 0.5*rand (size (y)) .* y;
-%! loglogerr (x, y, eyl, eyu, '#~x-');
+%! loglogerr (x, y, eyl, eyu, "#~x-");
 %! xlim (x([1, end]));
-%! title ({'loglogerr(): loglog() plot with errorbars', ...
-%!         'Both axes are logarithmic'});
+%! title ({"loglogerr(): loglog() plot with errorbars", ...
+%!         "Both axes are logarithmic"});
 
diff --git a/scripts/plot/draw/mesh.m b/scripts/plot/draw/mesh.m
--- a/scripts/plot/draw/mesh.m
+++ b/scripts/plot/draw/mesh.m
@@ -96,51 +96,51 @@ function h = mesh (varargin)
 endfunction
 
 
 %!demo
 %! clf;
 %! x = logspace (0,1,11);
 %! z = x'*x;
 %! mesh (x, x, z);
-%! xlabel 'X-axis';
-%! ylabel 'Y-axis';
-%! zlabel 'Z-axis';
-%! title ('mesh() with color proportional to height');
+%! xlabel "X-axis";
+%! ylabel "Y-axis";
+%! zlabel "Z-axis";
+%! title ("mesh() with color proportional to height");
 
 %!demo
 %! clf;
 %! x = logspace (0,1,11);
 %! z = x'*x;
 %! mesh (x, x, z, z.^2);
-%! xlabel 'X-axis';
-%! ylabel 'Y-axis';
-%! zlabel 'linear scale';
-%! title ('mesh() with color proportional to Z^2');
+%! xlabel "X-axis";
+%! ylabel "Y-axis";
+%! zlabel "linear scale";
+%! title ("mesh() with color proportional to Z^2");
 
 %!demo
 %! clf;
 %! x = logspace (0,1,11);
 %! z = x'*x;
 %! mesh (x, x, z, z.^2);
-%! set (gca, 'zscale', 'log');
-%! xlabel 'X-axis';
-%! ylabel 'Y-axis';
-%! zlabel 'log scale';
-%! title ({'mesh() with color proportional to Z^2', 'Z-axis is log scale'});
+%! set (gca, "zscale", "log");
+%! xlabel "X-axis";
+%! ylabel "Y-axis";
+%! zlabel "log scale";
+%! title ({"mesh() with color proportional to Z^2", "Z-axis is log scale"});
 %! try
-%!   if (strcmp (get (gcf, '__graphics_toolkit__'), 'gnuplot'))
-%!     title ({'Gnuplot: mesh color is wrong', 'This is a Gnuplot bug'});
+%!   if (strcmp (get (gcf, "__graphics_toolkit__"), "gnuplot"))
+%!     title ({"Gnuplot: mesh color is wrong", "This is a Gnuplot bug"});
 %!   endif
 %! catch
-%! end
+%! end_try_catch
 
 %!demo
 %! clf;
 %! x = logspace (0,1,11);
 %! z = x'*x;
-%! mesh (x, x, z, 'facecolor', 'none', 'edgecolor', 'c');
-%! xlabel 'X-axis';
-%! ylabel 'Y-axis';
-%! zlabel 'Z-axis';
-%! title ({'mesh() default properties overridden', ...
-%!         'transparent mesh with cyan color'});
+%! mesh (x, x, z, "facecolor", "none", "edgecolor", "c");
+%! xlabel "X-axis";
+%! ylabel "Y-axis";
+%! zlabel "Z-axis";
+%! title ({"mesh() default properties overridden", ...
+%!         "transparent mesh with cyan color"});
 
diff --git a/scripts/plot/draw/meshc.m b/scripts/plot/draw/meshc.m
--- a/scripts/plot/draw/meshc.m
+++ b/scripts/plot/draw/meshc.m
@@ -103,14 +103,14 @@ function h = meshc (varargin)
     h = htmp;
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! [X, Y] = meshgrid (linspace (-3, 3, 40));
 %! Z = sqrt (abs (X .* Y)) ./ (1 + X.^2 + Y.^2);
 %! meshc (X, Y, Z);
-%! title ('meshc() combines mesh/contour plots');
+%! title ("meshc() combines mesh/contour plots");
 
diff --git a/scripts/plot/draw/meshz.m b/scripts/plot/draw/meshz.m
--- a/scripts/plot/draw/meshz.m
+++ b/scripts/plot/draw/meshz.m
@@ -141,35 +141,35 @@ function h = meshz (varargin)
     h = htmp;
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! Z = peaks ();
 %! meshz (Z);
-%! title ('meshz() plot of peaks() function');
+%! title ("meshz() plot of peaks() function");
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! Z = peaks ();
 %! subplot (1,2,1)
 %!  mesh (Z);
 %!  daspect ([2.5, 2.5, 1]);
-%!  title ('mesh() plot');
+%!  title ("mesh() plot");
 %! subplot (1,2,2)
 %!  meshz (Z);
 %!  daspect ([2.5, 2.5, 1]);
-%!  title ('meshz() plot');
+%!  title ("meshz() plot");
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! [X,Y,Z] = peaks ();
 %! [fx, fy] = gradient (Z);
 %! C = sqrt (fx.^2 + fy.^2);
 %! meshz (X,Y,Z,C);
-%! title ('meshz() plot with color determined by gradient');
+%! title ("meshz() plot with color determined by gradient");
 
diff --git a/scripts/plot/draw/pareto.m b/scripts/plot/draw/pareto.m
--- a/scripts/plot/draw/pareto.m
+++ b/scripts/plot/draw/pareto.m
@@ -114,21 +114,21 @@ function h = pareto (varargin)
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
 %! colormap (jet (64));
-%! Cheese = {'Cheddar', 'Swiss', 'Camembert', 'Munster', 'Stilton', 'Blue'};
+%! Cheese = {"Cheddar", "Swiss", "Camembert", "Munster", "Stilton", "Blue"};
 %! Sold = [105, 30, 70, 10, 15, 20];
 %! pareto (Sold, Cheese);
 
 %!demo
 %! clf;
-%! % Suppose that we want establish which products makes 80% of turnover.
-%! Codes = {'AB4','BD7','CF8','CC5','AD11','BB5','BB3','AD8','DF3','DE7'};
-%! Value = [2.35 7.9 2.45 1.1 0.15 13.45 5.4 2.05 0.85  1.65]';
+%! ## Suppose that we want establish which products makes 80% of turnover.
+%! Codes = {"AB4","BD7","CF8","CC5","AD11","BB5","BB3","AD8","DF3","DE7"};
+%! Value = [2.35 7.9 2.45 1.1 0.15 13.45 5.4 2.05 0.85 1.65]';
 %! SoldUnits = [54723 41114 16939 1576091 168000 687197 120222 168195, ...
 %!              1084118 55576]';
 %! pareto (Value.*SoldUnits, Codes);
 
diff --git a/scripts/plot/draw/patch.m b/scripts/plot/draw/patch.m
--- a/scripts/plot/draw/patch.m
+++ b/scripts/plot/draw/patch.m
@@ -102,155 +102,155 @@ function h = patch (varargin)
   if (nargout > 0)
     h = htmp;
   endif
 
 endfunction
 
 
 %!demo
-%! %% Patches with same number of vertices
+%! ## Patches with same number of vertices
 %! clf;
 %! t1 = (1/16:1/8:1)' * 2*pi;
 %! t2 = ((1/16:1/8:1)' + 1/32) * 2*pi;
 %! x1 = sin (t1) - 0.8;
 %! y1 = cos (t1);
 %! x2 = sin (t2) + 0.8;
 %! y2 = cos (t2);
-%! patch ([x1,x2], [y1,y2], 'r');
+%! patch ([x1,x2], [y1,y2], "r");
 
 %!demo
-%! %% Unclosed patch
+%! ## Unclosed patch
 %! clf;
 %! t1 = (1/16:1/8:1)' * 2*pi;
 %! t2 = ((1/16:1/16:1)' + 1/32) * 2*pi;
 %! x1 = sin (t1) - 0.8;
 %! y1 = cos (t1);
 %! x2 = sin (t2) + 0.8;
 %! y2 = cos (t2);
-%! patch ([[x1;NaN(8,1)],x2], [[y1;NaN(8,1)],y2], 'r');
+%! patch ([[x1;NaN(8,1)],x2], [[y1;NaN(8,1)],y2], "r");
 
 %!demo
-%! %% Specify vertices and faces separately
+%! ## Specify vertices and faces separately
 %! clf;
 %! t1 = (1/16:1/8:1)' * 2*pi;
 %! t2 = ((1/16:1/16:1)' + 1/32) * 2*pi;
 %! x1 = sin (t1) - 0.8;
 %! y1 = cos (t1);
 %! x2 = sin (t2) + 0.8;
 %! y2 = cos (t2);
 %! vert = [x1, y1; x2, y2];
 %! fac = [1:8,NaN(1,8);9:24];
-%! patch ('Faces',fac, 'Vertices',vert, 'FaceColor','r');
+%! patch ("Faces",fac, "Vertices",vert, "FaceColor","r");
 
 %!demo
-%! %% Specify vertices and faces separately
+%! ## Specify vertices and faces separately
 %! clf;
 %! t1 = (1/16:1/8:1)' * 2*pi;
 %! t2 = ((1/16:1/16:1)' + 1/32) * 2*pi;
 %! x1 = sin (t1) - 0.8;
 %! y1 = cos (t1);
 %! x2 = sin (t2) + 0.8;
 %! y2 = cos (t2);
 %! vert = [x1, y1; x2, y2];
 %! fac = [1:8,NaN(1,8);9:24];
-%! patch ('Faces',fac, 'Vertices',vert, ...
-%!        'FaceVertexCData',[0, 1, 0; 0, 0, 1], 'FaceColor', 'flat');
+%! patch ("Faces",fac, "Vertices",vert, ...
+%!        "FaceVertexCData",[0, 1, 0; 0, 0, 1], "FaceColor", "flat");
 
 %!demo
-%! %% Property change on multiple patches
+%! ## Property change on multiple patches
 %! clf;
 %! t1 = (1/16:1/8:1)' * 2*pi;
 %! t2 = ((1/16:1/8:1)' + 1/32) * 2*pi;
 %! x1 = sin (t1) - 0.8;
 %! y1 = cos (t1);
 %! x2 = sin (t2) + 0.8;
 %! y2 = cos (t2);
 %! h = patch ([x1,x2], [y1,y2], cat (3, [0,0],[1,0],[0,1]));
 %! pause (1);
-%! set (h, 'FaceColor', 'r');
+%! set (h, "FaceColor", "r");
 
 %!demo
 %! clf;
 %! vertices = [0, 0, 0;
 %!             1, 0, 0;
 %!             1, 1, 0;
 %!             0, 1, 0;
 %!             0.5, 0.5, 1];
 %! faces = [1, 2, 5;
 %!          2, 3, 5;
 %!          3, 4, 5;
 %!          4, 1, 5];
-%! patch ('Vertices', vertices, 'Faces', faces, ...
-%!        'FaceVertexCData', jet (4), 'FaceColor', 'flat');
+%! patch ("Vertices", vertices, "Faces", faces, ...
+%!        "FaceVertexCData", jet (4), "FaceColor", "flat");
 %! view (-37.5, 30);
 
 %!demo
 %! clf;
 %! vertices = [0, 0, 0;
 %!             1, 0, 0;
 %!             1, 1, 0;
 %!             0, 1, 0;
 %!             0.5, 0.5, 1];
 %! faces = [1, 2, 5;
 %!          2, 3, 5;
 %!          3, 4, 5;
 %!          4, 1, 5];
-%! patch  ('Vertices', vertices, 'Faces', faces, ...
-%!        'FaceVertexCData', jet (5), 'FaceColor', 'interp');
+%! patch  ("Vertices", vertices, "Faces", faces, ...
+%!        "FaceVertexCData", jet (5), "FaceColor", "interp");
 %! view (-37.5, 30);
 
 %!demo
 %! clf;
 %! colormap (jet (64));
 %! x = [0 1 1 0];
 %! y = [0 0 1 1];
 %! subplot (2,1,1);
-%!  title ('Blue, Light-Green, and Red Horizontal Bars');
+%!  title ("Blue, Light-Green, and Red Horizontal Bars");
 %!  patch (x, y + 0, 1);
 %!  patch (x, y + 1, 2);
 %!  patch (x, y + 2, 3);
 %! subplot (2,1,2);
-%!  title ('Blue, Light-Green, and Red Vertical Bars');
+%!  title ("Blue, Light-Green, and Red Vertical Bars");
 %!  patch (x + 0, y, 1 * ones (size (x)));
 %!  patch (x + 1, y, 2 * ones (size (x)));
 %!  patch (x + 2, y, 3 * ones (size (x)));
 
 %!demo
 %! clf;
 %! colormap (jet (64));
 %! x = [0 1 1 0];
 %! y = [0 0 1 1];
 %! subplot (2,1,1);
-%!  title ('Blue horizontal bars: Dark to Light');
-%!  patch (x, y + 0, 1, 'cdatamapping', 'direct');
-%!  patch (x, y + 1, 9, 'cdatamapping', 'direct');
-%!  patch (x, y + 2, 17, 'cdatamapping', 'direct');
+%!  title ("Blue horizontal bars: Dark to Light");
+%!  patch (x, y + 0, 1, "cdatamapping", "direct");
+%!  patch (x, y + 1, 9, "cdatamapping", "direct");
+%!  patch (x, y + 2, 17, "cdatamapping", "direct");
 %! subplot (2,1,2);
-%!  title ('Blue vertical bars: Dark to Light');
-%!  patch (x + 0, y, 1 * ones (size (x)), 'cdatamapping', 'direct');
-%!  patch (x + 1, y, 9 * ones (size (x)), 'cdatamapping', 'direct');
-%!  patch (x + 2, y, 17 * ones (size (x)), 'cdatamapping', 'direct');
+%!  title ("Blue vertical bars: Dark to Light");
+%!  patch (x + 0, y, 1 * ones (size (x)), "cdatamapping", "direct");
+%!  patch (x + 1, y, 9 * ones (size (x)), "cdatamapping", "direct");
+%!  patch (x + 2, y, 17 * ones (size (x)), "cdatamapping", "direct");
 
 %!demo
 %! clf;
 %! colormap (jet (64));
 %! x = [ 0 0; 1 1; 1 0 ];
 %! y = [ 0 0; 0 1; 1 1 ];
-%! p = patch (x, y, 'b');
-%! set (p, 'cdatamapping', 'direct', 'facecolor', 'flat', 'cdata', [1 32]);
-%! title ('Direct mapping of colors: Light-Green UL and Blue LR triangles');
+%! p = patch (x, y, "b");
+%! set (p, "cdatamapping", "direct", "facecolor", "flat", "cdata", [1 32]);
+%! title ("Direct mapping of colors: Light-Green UL and Blue LR triangles");
 
 %!demo
 %! clf;
 %! colormap (jet (64));
 %! x = [ 0 0; 1 1; 1 0 ];
 %! y = [ 0 0; 0 1; 1 1 ];
 %! p = patch (x, y, [1 32]);
-%! title ('Autoscaling of colors: Red UL and Blue LR triangles');
+%! title ("Autoscaling of colors: Red UL and Blue LR triangles");
 
 %!test
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   h = patch ();
 %!   assert (findobj (hf, "type", "patch"), h);
 %!   assert (get (h, "xdata"), [0; 1; 0], eps);
 %!   assert (get (h, "ydata"), [1; 1; 0], eps);
diff --git a/scripts/plot/draw/pcolor.m b/scripts/plot/draw/pcolor.m
--- a/scripts/plot/draw/pcolor.m
+++ b/scripts/plot/draw/pcolor.m
@@ -136,23 +136,23 @@ function h = pcolor (varargin)
     h = htmp;
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! Z = peaks ();
 %! pcolor (Z);
-%! title ('pcolor() of peaks with facet shading');
+%! title ("pcolor() of peaks with facet shading");
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! [X,Y,Z] = sombrero ();
 %! [Fx,Fy] = gradient (Z);
 %! pcolor (X,Y,Fx+Fy);
 %! shading interp;
 %! axis tight;
-%! title ('pcolor() of peaks with interp shading');
+%! title ("pcolor() of peaks with interp shading");
 
diff --git a/scripts/plot/draw/pie.m b/scripts/plot/draw/pie.m
--- a/scripts/plot/draw/pie.m
+++ b/scripts/plot/draw/pie.m
@@ -79,25 +79,25 @@ function h = pie (varargin)
 
 endfunction
 
 
 %!demo
 %! clf;
 %! pie ([3, 2, 1], [0, 0, 1]);
 %! colormap ([1,0,0;0,1,0;0,0,1;1,1,0;1,0,1;0,1,1]);
-%! title ('pie() with exploded wedge');
+%! title ("pie() with exploded wedge");
 
 %!demo
 %! clf;
-%! pie ([3, 2, 1], [0, 0, 1], {'Cheddar', 'Swiss', 'Camembert'});
+%! pie ([3, 2, 1], [0, 0, 1], {"Cheddar", "Swiss", "Camembert"});
 %! colormap ([1,0,0;0,1,0;0,0,1;1,1,0;1,0,1;0,1,1]);
 %! axis ([-2,2,-2,2]);
-%! title ('pie() with labels');
+%! title ("pie() with labels");
 
 
 %!demo
 %! clf;
-%! pie ([0.17, 0.34, 0.41], {'Cheddar', 'Swiss', 'Camembert'});
+%! pie ([0.17, 0.34, 0.41], {"Cheddar", "Swiss", "Camembert"});
 %! colormap ([1,0,0;0,1,0;0,0,1;1,1,0;1,0,1;0,1,1]);
 %! axis ([-2,2,-2,2]);
-%! title ('pie() with missing slice');
+%! title ("pie() with missing slice");
 
diff --git a/scripts/plot/draw/pie3.m b/scripts/plot/draw/pie3.m
--- a/scripts/plot/draw/pie3.m
+++ b/scripts/plot/draw/pie3.m
@@ -80,24 +80,24 @@ function h = pie3 (varargin)
 
 endfunction
 
 
 %!demo
 %! clf;
 %! pie3 ([5:-1:1], [0, 0, 1, 0, 0]);
 %! colormap ([1,0,0;0,1,0;0,0,1;1,1,0;1,0,1;0,1,1]);
-%! title ('pie3() with exploded wedge');
+%! title ("pie3() with exploded wedge");
 
 %!demo
 %! clf;
-%! pie3 ([3, 2, 1], [0, 0, 1], {'Cheddar', 'Swiss', 'Camembert'});
+%! pie3 ([3, 2, 1], [0, 0, 1], {"Cheddar", "Swiss", "Camembert"});
 %! colormap ([1,0,0;0,1,0;0,0,1;1,1,0;1,0,1;0,1,1]);
 %! axis ([-2,2,-2,2]);
-%! title ('pie3() with labels');
+%! title ("pie3() with labels");
 
 %!demo
 %! clf;
-%! pie3 ([0.17, 0.34, 0.41], {'Cheddar', 'Swiss', 'Camembert'});
+%! pie3 ([0.17, 0.34, 0.41], {"Cheddar", "Swiss", "Camembert"});
 %! colormap ([1,0,0;0,1,0;0,0,1;1,1,0;1,0,1;0,1,1]);
 %! axis ([-2,2,-2,2]);
-%! title ('pie3() with missing slice');
+%! title ("pie3() with missing slice");
 
diff --git a/scripts/plot/draw/plot.m b/scripts/plot/draw/plot.m
--- a/scripts/plot/draw/plot.m
+++ b/scripts/plot/draw/plot.m
@@ -230,58 +230,58 @@ function h = plot (varargin)
     h = htmp;
   endif
 
 endfunction
 
 
 %!demo
 %! x = 1:5;  y = 1:5;
-%! plot (x,y,'g');
-%! title ('plot() of green line at 45 degrees');
+%! plot (x,y,"g");
+%! title ("plot() of green line at 45 degrees");
 
 %!demo
 %! x = 1:5;  y = 1:5;
-%! plot (x,y,'g*');
-%! title ('plot() of green stars along a line at 45 degrees');
+%! plot (x,y,"g*");
+%! title ("plot() of green stars along a line at 45 degrees");
 
 %!demo
 %! x1 = 1:5;  y1 = 1:5;
 %! x2 = 5:9; y2 = 5:-1:1;
-%! plot (x1,y1,'bo-', x2,y2,'rs-');
-%! axis ('tight');
-%! title ({'plot() of blue circles ascending and red squares descending';
-%!         'connecting lines drawn'});
+%! plot (x1,y1,"bo-", x2,y2,"rs-");
+%! axis ("tight");
+%! title ({"plot() of blue circles ascending and red squares descending";
+%!         "connecting lines drawn"});
 
 %!demo
 %! x = 0:10;
 %! plot (x, rand (numel (x), 3));
 %! axis ([0 10 0 1]);
-%! title ({'Three random variables', 'x[1x11], y[11x3]'});
+%! title ({"Three random variables", "x[1x11], y[11x3]"});
 
 %!demo
 %! x = 0:10;
 %! plot (x, rand (3, numel (x)));
 %! axis ([0 10 0 1]);
-%! title ({'Three random variables', 'x[1x11], y[3x11]'});
+%! title ({"Three random variables", "x[1x11], y[3x11]"});
 
 %!demo
 %! x = 0:10;
-%! plot (repmat (x, 2, 1), rand (2, numel (x)), '-s');
+%! plot (repmat (x, 2, 1), rand (2, numel (x)), "-s");
 %! axis ([0 10 0 1]);
-%! title ({'Vertical lines with random height and lengths', ...
-%!         'x[2x11], y[2,11]'})
+%! title ({"Vertical lines with random height and lengths", ...
+%!         "x[2x11], y[2,11]"})
 
 %!demo
 %! x = 0:10;
 %! plot (repmat (x(:), 1, 2), rand (numel (x), 2));
 %! axis ([0 10 0 1]);
-%! title ({'Two random variables', 'x[11x2], y[11x2]'});
+%! title ({"Two random variables", "x[11x2], y[11x2]"});
 
 %!demo
 %! x = 0:10;
 %! shape = [1, 1, numel(x), 2];
 %! x = reshape (repmat (x(:), 1, 2), shape);
 %! y = rand (shape);
 %! plot (x, y);
 %! axis ([0 10 0 1]);
-%! title ({'Two random variables', 'squeezed from 4-d arrays'});
+%! title ({"Two random variables", "squeezed from 4-d arrays"});
 
diff --git a/scripts/plot/draw/plot3.m b/scripts/plot/draw/plot3.m
--- a/scripts/plot/draw/plot3.m
+++ b/scripts/plot/draw/plot3.m
@@ -373,18 +373,18 @@ function retval = plot3 (varargin)
 
 endfunction
 
 
 %!demo
 %! clf;
 %! z = [0:0.05:5];
 %! plot3 (cos (2*pi*z), sin (2*pi*z), z);
-%! legend ('helix');
-%! title ('plot3() of a helix');
+%! legend ("helix");
+%! title ("plot3() of a helix");
 
 %!demo
 %! clf;
 %! z = [0:0.05:5];
 %! plot3 (z, exp (2i*pi*z));
-%! legend ('complex sinusoid');
-%! title ('plot3() with complex input');
+%! legend ("complex sinusoid");
+%! title ("plot3() with complex input");
 
diff --git a/scripts/plot/draw/plotmatrix.m b/scripts/plot/draw/plotmatrix.m
--- a/scripts/plot/draw/plotmatrix.m
+++ b/scripts/plot/draw/plotmatrix.m
@@ -105,17 +105,17 @@ function [h, ax, bigax, p, pax] = plotma
     pax = pax2;
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
-%! plotmatrix (randn (100, 3), 'g+');
+%! plotmatrix (randn (100, 3), "g+");
 
 
 function plotmatrixdelete (h, d, ax)
 
   for i = 1 : numel (ax)
     hc = ax(i);
     if (isaxes (hc) && strcmpi (get (hc, "beingdeleted"), "off"))
       parent = get (hc, "parent");
diff --git a/scripts/plot/draw/plotyy.m b/scripts/plot/draw/plotyy.m
--- a/scripts/plot/draw/plotyy.m
+++ b/scripts/plot/draw/plotyy.m
@@ -275,45 +275,45 @@ endfunction
 
 
 %!demo
 %! clf;
 %! x = 0:0.1:2*pi;
 %! y1 = sin (x);
 %! y2 = exp (x - 1);
 %! ax = plotyy (x,y1, x-1,y2, @plot, @semilogy);
-%! xlabel ('X');
-%! ylabel (ax(1), 'Axis 1');
-%! ylabel (ax(2), 'Axis 2');
-%! text (0.5, 0.5, 'Left Axis', ...
-%!       'color', [0 0 1], 'horizontalalignment', 'center', 'parent', ax(1));
-%! text (4.5, 80, 'Right Axis', ...
-%!       'color', [0 0.5 0], 'horizontalalignment', 'center', 'parent', ax(2));
-%! title ({'plotyy() example'; 'Left axis uses @plot, Right axis uses @semilogy'});
+%! xlabel ("X");
+%! ylabel (ax(1), "Axis 1");
+%! ylabel (ax(2), "Axis 2");
+%! text (0.5, 0.5, "Left Axis", ...
+%!       "color", [0 0 1], "horizontalalignment", "center", "parent", ax(1));
+%! text (4.5, 80, "Right Axis", ...
+%!       "color", [0 0.5 0], "horizontalalignment", "center", "parent", ax(2));
+%! title ({"plotyy() example"; "Left axis uses @plot, Right axis uses @semilogy"});
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! x = linspace (-1, 1, 201);
 %! subplot (2,2,1);
 %!  plotyy (x,sin(pi*x), x,10*cos(pi*x));
 %! subplot (2,2,2);
 %!  surf (peaks (25));
 %! subplot (2,2,3);
 %!  contour (peaks (25));
 %! subplot (2,2,4);
 %!  plotyy (x,10*sin(2*pi*x), x,cos(2*pi*x));
-%! axis square;
+%!  axis square;
 
 %!demo
 %! clf;
 %! hold on
 %! t = (0:0.1:9);
 %! x = sin (t);
 %! y = 5 * cos (t);
 %! [hax, h1, h2] = plotyy (t, x, t, y);
 %! [~, h3, h4] = plotyy (t+1, x, t+1, y);
-%! set ([h3, h4], 'linestyle', '--');
-%! xlabel (hax(1), 'xlabel');
+%! set ([h3, h4], "linestyle", "--");
+%! xlabel (hax(1), "xlabel");
 %! title (hax(2), 'Two plotyy graphs on same figure using "hold on"');
-%! ylabel (hax(1), 'Left axis is Blue');
-%! ylabel (hax(2), 'Right axis is Green');
+%! ylabel (hax(1), "Left axis is Blue");
+%! ylabel (hax(2), "Right axis is Green");
 
diff --git a/scripts/plot/draw/polar.m b/scripts/plot/draw/polar.m
--- a/scripts/plot/draw/polar.m
+++ b/scripts/plot/draw/polar.m
@@ -403,41 +403,41 @@ function resetaxis (~, ~, hax)
 endfunction
 
 
 %!demo
 %! clf;
 %! theta = linspace (0,2*pi,1000);
 %! rho = sin (7*theta);
 %! polar (theta, rho);
-%! title ('polar() plot');
+%! title ("polar() plot");
 
 %!demo
 %! clf;
 %! theta = linspace (0,2*pi,1000);
 %! cplx = theta + i*sin (7*theta);
-%! polar (cplx, 'g');
-%! title ('polar() plot of complex data');
+%! polar (cplx, "g");
+%! title ("polar() plot of complex data");
 
 %!demo
 %! clf;
 %! theta = linspace (0,2*pi,1000);
 %! rho = sin (2*theta).*cos (2*theta);
-%! polar (theta, rho, '--r');
-%! set (gca, 'rtick', 0.1:0.1:0.6, 'ttick', 0:20:340);
-%! title ('polar() plot with finer grid');
+%! polar (theta, rho, "--r");
+%! set (gca, "rtick", 0.1:0.1:0.6, "ttick", 0:20:340);
+%! title ("polar() plot with finer grid");
 
 %!demo
 %! clf;
 %! theta = linspace (0,2*pi,1000);
 %! rho = sin (2*theta).*cos (2*theta);
-%! polar (theta, rho, '--b');
-%! set (gca, 'fontsize', 12, 'linewidth', 2, 'color', [0.8 0.8 0.8]);
-%! title ('polar() plot with modified axis appearance');
+%! polar (theta, rho, "--b");
+%! set (gca, "fontsize", 12, "linewidth", 2, "color", [0.8 0.8 0.8]);
+%! title ("polar() plot with modified axis appearance");
 
 %!demo
 %! clf;
 %! theta = linspace (0,8*pi,1000);
 %! rho = sin (5/4*theta);
 %! polar (theta, rho);
-%! set (gca, 'rtick', 0.2:0.2:1);
-%! title ('polar() plot');
+%! set (gca, "rtick", 0.2:0.2:1);
+%! title ("polar() plot");
 
diff --git a/scripts/plot/draw/quiver.m b/scripts/plot/draw/quiver.m
--- a/scripts/plot/draw/quiver.m
+++ b/scripts/plot/draw/quiver.m
@@ -92,20 +92,20 @@ function h = quiver (varargin)
 
 endfunction
 
 
 %!demo
 %! clf;
 %! [x,y] = meshgrid (1:2:20);
 %! h = quiver (x,y, sin (2*pi*x/10), sin (2*pi*y/10));
-%! title ('quiver plot');
+%! title ("quiver plot");
 
 %!demo
 %! clf;
 %! x = linspace (0, 3, 80);
 %! y = sin (2*pi*x);
 %! theta = 2*pi*x + pi/2;
 %! quiver (x, y, sin (theta)/10, cos (theta)/10, 0.4);
 %! axis equal tight;
-%! hold on; plot (x,y,'r'); hold off;
-%! title ('quiver() with scaled arrows');
+%! hold on; plot (x,y,"r"); hold off;
+%! title ("quiver() with scaled arrows");
 
diff --git a/scripts/plot/draw/quiver3.m b/scripts/plot/draw/quiver3.m
--- a/scripts/plot/draw/quiver3.m
+++ b/scripts/plot/draw/quiver3.m
@@ -96,32 +96,32 @@ function h = quiver3 (varargin)
     h = htmp;
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! [x, y, z] = peaks (25);
 %! surf (x, y, z);
 %! hold on;
 %! [u, v, w] = surfnorm (x, y, z / 10);
 %! h = quiver3 (x, y, z, u, v, w);
-%! set (h, 'maxheadsize', 0.25);
+%! set (h, "maxheadsize", 0.25);
 %! hold off;
-%! title ('quiver3 of surface normals to peaks() function');
+%! title ("quiver3 of surface normals to peaks() function");
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! [x, y, z] = peaks (25);
 %! surf (x, y, z);
 %! hold on;
 %! [u, v, w] = surfnorm (x, y, z / 10);
 %! h = quiver3 (x, y, z, u, v, w);
-%! set (h, 'maxheadsize', 0.25);
+%! set (h, "maxheadsize", 0.25);
 %! hold off;
 %! shading interp;
-%! title ({'quiver3 of surface normals to peaks() function'; ...
+%! title ({"quiver3 of surface normals to peaks() function"; ...
 %!         'shading "interp"'});
 
diff --git a/scripts/plot/draw/rectangle.m b/scripts/plot/draw/rectangle.m
--- a/scripts/plot/draw/rectangle.m
+++ b/scripts/plot/draw/rectangle.m
@@ -231,24 +231,24 @@ function update_props (h, ~)
   set (kids, {"edgecolor", "linewidth", "linestyle", "facecolor"},
      get (h, {"edgecolor", "linewidth", "linestyle", "facecolor"}));
 endfunction
 
 
 %!demo
 %! clf;
 %! axis equal;
-%! rectangle ('Position', [0.05, 0.05, 0.9, 0.9], 'Curvature', [0.5, 0.5]);
-%! title ('rectangle() with corners curved');
+%! rectangle ("Position", [0.05, 0.05, 0.9, 0.9], "Curvature", [0.5, 0.5]);
+%! title ("rectangle() with corners curved");
 
 %!demo
 %! clf;
 %! axis equal;
-%! rectangle ('Position', [0.05, 0.05, 0.9, 0.4], 'Curvature', 1.0);
-%! title ('rectangle() with sides as complete arcs');
+%! rectangle ("Position", [0.05, 0.05, 0.9, 0.4], "Curvature", 1.0);
+%! title ("rectangle() with sides as complete arcs");
 
 %!demo
 %! clf;
 %! axis equal;
-%! h = rectangle ('Position', [0.05, 0.05, 0.9, 0.4], 'Curvature', 1.0);
-%! set (h, 'FaceColor', [0, 1, 0]);
-%! title ('rectangle() with FaceColor = green');
+%! h = rectangle ("Position", [0.05, 0.05, 0.9, 0.4], "Curvature", 1.0);
+%! set (h, "FaceColor", [0, 1, 0]);
+%! title ("rectangle() with FaceColor = green");
 
diff --git a/scripts/plot/draw/ribbon.m b/scripts/plot/draw/ribbon.m
--- a/scripts/plot/draw/ribbon.m
+++ b/scripts/plot/draw/ribbon.m
@@ -109,15 +109,15 @@ function h = ribbon (varargin)
     h = htmp;
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! [x, y, z] = sombrero ();
 %! ribbon (y, z);
-%! title ('ribbon() plot of sombrero()');
+%! title ("ribbon() plot of sombrero()");
 
 %!FIXME: Could have some input validation tests here
 
diff --git a/scripts/plot/draw/rose.m b/scripts/plot/draw/rose.m
--- a/scripts/plot/draw/rose.m
+++ b/scripts/plot/draw/rose.m
@@ -112,15 +112,15 @@ function [thout, rout] = rose (varargin)
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
 %! rose (2*randn (1e5, 1), 8);
-%! title ('rose() angular histogram plot with 8 bins');
+%! title ("rose() angular histogram plot with 8 bins");
 
 %!demo
 %! clf;
 %! rose ([2*randn(1e5, 1), pi + 2*randn(1e5, 1)]);
-%! title ('rose() angular histogram plot with 2 data series');
+%! title ("rose() angular histogram plot with 2 data series");
 
diff --git a/scripts/plot/draw/scatter.m b/scripts/plot/draw/scatter.m
--- a/scripts/plot/draw/scatter.m
+++ b/scripts/plot/draw/scatter.m
@@ -156,62 +156,62 @@ endfunction
 %!demo
 %! clf;
 %! k = 1;
 %! for m = [1, 3]
 %!   for n = [101, 50, 1]
 %!     x = rand (n, 1);
 %!     y = rand (n, 1);
 %!     if (m > 1)
-%!       str = 'Three Colors';
+%!       str = "Three Colors";
 %!       idx = ceil (rand (n, 1) * 3);
 %!       colors = eye (3);
 %!       colors = colors(idx, :);
 %!     else
-%!       str = 'Random Colors';
+%!       str = "Random Colors";
 %!       colors = rand (n, m);
-%!     end
+%!     endif
 %!     if (n == 1)
-%!       str = sprintf ('%s: 1 point', str);
+%!       str = sprintf ("%s: 1 point", str);
 %!     elseif (n < 100)
-%!       str = sprintf ('%s: < 100 points', str);
+%!       str = sprintf ("%s: < 100 points", str);
 %!     else
-%!       str = sprintf ('%s: > 100 points', str);
-%!     end
+%!       str = sprintf ("%s: > 100 points", str);
+%!     endif
 %!     subplot (2,3,k);
 %!     k = k + 1;
-%!     scatter (x, y, 15, colors, 'filled');
+%!     scatter (x, y, 15, colors, "filled");
 %!     axis ([0 1 0 1]);
 %!     title (str);
-%!   end
-%! end
+%!   endfor
+%! endfor
 
 %!demo
 %! clf;
 %! k = 1;
 %! for m = [1, 3]
 %!   for n = [101, 50, 1]
 %!     x = rand (n, 1);
 %!     y = rand (n, 1);
 %!     if (m > 1)
-%!       str = 'Three Colors';
+%!       str = "Three Colors";
 %!       idx = ceil (rand (n, 1) * 3);
 %!       colors = eye (3);
 %!       colors = colors(idx, :);
 %!     else
-%!       str = 'Random Colors';
+%!       str = "Random Colors";
 %!       colors = rand (n, m);
-%!     end
+%!     endif
 %!     if (n == 1)
-%!       str = sprintf ('%s: 1 point', str);
+%!       str = sprintf ("%s: 1 point", str);
 %!     elseif (n < 100)
-%!       str = sprintf ('%s: < 100 points', str);
+%!       str = sprintf ("%s: < 100 points", str);
 %!     else
-%!       str = sprintf ('%s: > 100 points', str);
-%!     end
+%!       str = sprintf ("%s: > 100 points", str);
+%!     endif
 %!     subplot (2,3,k);
 %!     k = k + 1;
 %!     scatter (x, y, 15, colors);
 %!     axis ([0 1 0 1]);
 %!     title (str);
-%!   end
-%! end
+%!   endfor
+%! endfor
 
diff --git a/scripts/plot/draw/scatter3.m b/scripts/plot/draw/scatter3.m
--- a/scripts/plot/draw/scatter3.m
+++ b/scripts/plot/draw/scatter3.m
@@ -98,32 +98,32 @@ function retval = scatter3 (varargin)
 
 endfunction
 
 
 %!demo
 %! clf;
 %! [x, y, z] = peaks (20);
 %! scatter3 (x(:), y(:), z(:), [], z(:));
-%! title ({'Default scatter3() plot', ...
-%!         'constant size bubbles and color determined by Z'});
+%! title ({"Default scatter3() plot", ...
+%!         "constant size bubbles and color determined by Z"});
 
 %!demo
 %! clf;
 %! x = rand (20,1);  y = rand (20,1);  z = rand (20,1);
-%! scatter3 (x(:), y(:), z(:), 10, z(:), 's');
-%! title ({'scatter3() plot', ...
-%!         'marker is square, size is 10, color determined by Z'});
+%! scatter3 (x(:), y(:), z(:), 10, z(:), "s");
+%! title ({"scatter3() plot", ...
+%!         "marker is square, size is 10, color determined by Z"});
 
 %!demo
 %! clf;
 %! x = rand (20,1);  y = rand (20,1);  z = rand (20,1);
-%! scatter3 (x(:), y(:), z(:), 20*z(:), [], 's');
-%! title ({'scatter3() plot', ...
-%!         'marker is square, size is determined by Z'});
+%! scatter3 (x(:), y(:), z(:), 20*z(:), [], "s");
+%! title ({"scatter3() plot", ...
+%!         "marker is square, size is determined by Z"});
 
 %!demo
 %! clf;
 %! x = rand (20,1);  y = rand (20,1);  z = rand (20,1);
-%! scatter3 (x(:), y(:), z(:), 20*z(:), z(:), 's');
-%! title ({'scatter3() plot', ...
-%!         'marker is square, size and color determined by Z'});
+%! scatter3 (x(:), y(:), z(:), 20*z(:), z(:), "s");
+%! title ({"scatter3() plot", ...
+%!         "marker is square, size and color determined by Z"});
 
diff --git a/scripts/plot/draw/semilogx.m b/scripts/plot/draw/semilogx.m
--- a/scripts/plot/draw/semilogx.m
+++ b/scripts/plot/draw/semilogx.m
@@ -72,45 +72,45 @@ function h = semilogx (varargin)
 endfunction
 
 
 %!demo
 %! clf;
 %! x = 1:0.01:10;
 %! y = (x .* (1 + rand (size (x)))) .^ 2;
 %! semilogx (y, x);
-%! title ({'semilogx() plot', 'X-axis is logarithmic'});
+%! title ({"semilogx() plot", "X-axis is logarithmic"});
 
 %!demo
 %! clf;
 %! x = logspace (-5, 1, 10);
 %! y = logspace (-5, 1, 10);
 %!
 %! subplot (1,2,1);
 %!  semilogx (x, y);
-%!  xlabel ('semilogx (x, y)');
+%!  xlabel ("semilogx (x, y)");
 %!
 %! subplot (1,2,2);
 %!  semilogx (-x, y);
-%!  xlabel ('semilogx (-x, y)');
+%!  xlabel ("semilogx (-x, y)");
 
 %!demo
 %! clf;
 %! x = logspace (-5, 1, 10);
 %! y = logspace (-5, 1, 10);
 %!
 %! subplot (1,2,1);
 %!  semilogx (x, y);
-%!  set (gca, 'xdir', 'reverse', 'activepositionproperty', 'outerposition');
-%!  xlabel ({'semilogx (x, y)', 'xdir = reversed'});
+%!  set (gca, "xdir", "reverse", "activepositionproperty", "outerposition");
+%!  xlabel ({"semilogx (x, y)", "xdir = reversed"});
 %!
 %! subplot (1,2,2);
 %!  semilogx (-x, y);
-%!  set (gca, 'xdir', 'reverse', 'activepositionproperty', 'outerposition');
-%!  xlabel ({'semilogx (-x, y)', 'xdir = reversed'});
+%!  set (gca, "xdir", "reverse", "activepositionproperty", "outerposition");
+%!  xlabel ({"semilogx (-x, y)", "xdir = reversed"});
 
 %!test
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   a = logspace (-5, 1, 10);
 %!   b = logspace (-5, 1, 10);
 %!   semilogx (a, b);
 %!   assert (get (gca, "xscale"), "log");
diff --git a/scripts/plot/draw/semilogxerr.m b/scripts/plot/draw/semilogxerr.m
--- a/scripts/plot/draw/semilogxerr.m
+++ b/scripts/plot/draw/semilogxerr.m
@@ -84,13 +84,13 @@ function h = semilogxerr (varargin)
 endfunction
 
 
 %!demo
 %! clf;
 %! x = exp (log (0.01):0.2:log (10));
 %! y = wblpdf (x, 2, 2);
 %! ey = 0.5*rand (size (y)) .* y;
-%! semilogxerr (x, y, ey, '#~x-');
+%! semilogxerr (x, y, ey, "#~x-");
 %! xlim (x([1, end]));
-%! title ({'semilogxerr(): semilogx() plot with errorbars', ...
-%!         'X-axis is logarithmic'});
+%! title ({"semilogxerr(): semilogx() plot with errorbars", ...
+%!         "X-axis is logarithmic"});
 
diff --git a/scripts/plot/draw/semilogy.m b/scripts/plot/draw/semilogy.m
--- a/scripts/plot/draw/semilogy.m
+++ b/scripts/plot/draw/semilogy.m
@@ -72,45 +72,45 @@ function h = semilogy (varargin)
 endfunction
 
 
 %!demo
 %! clf;
 %! x = 1:0.01:10;
 %! y = (x .* (1 + rand (size (x)))) .^ 2;
 %! semilogy (x, y);
-%! title ({'semilogx() plot', 'Y-axis is logarithmic'});
+%! title ({"semilogx() plot", "Y-axis is logarithmic"});
 
 %!demo
 %! clf;
 %! x = logspace (-5, 1, 10);
 %! y = logspace (-5, 1, 10);
 %!
 %! subplot (2,1,1);
 %!  semilogy (x, y);
-%!  ylabel ('semilogy (x, y)');
+%!  ylabel ("semilogy (x, y)");
 %!
 %! subplot (2,1,2);
 %!  semilogy (x, -y);
-%!  ylabel ('semilogy (x, -y)');
+%!  ylabel ("semilogy (x, -y)");
 
 %!demo
 %! clf;
 %! x = logspace (-5, 1, 10);
 %! y = logspace (-5, 1, 10);
 %!
 %! subplot (2,1,1);
 %!  semilogy (x, y);
-%!  set (gca, 'ydir', 'reverse', 'activepositionproperty', 'outerposition');
-%!  ylabel ({'semilogy (x, y)', 'ydir = reversed'});
+%!  set (gca, "ydir", "reverse", "activepositionproperty", "outerposition");
+%!  ylabel ({"semilogy (x, y)", "ydir = reversed"});
 %!
 %! subplot (2,1,2);
 %!  semilogy (x, -y);
-%!  set (gca, 'ydir', 'reverse', 'activepositionproperty', 'outerposition');
-%!  ylabel ({'semilogy (x, -y)', 'ydir = reversed'});
+%!  set (gca, "ydir", "reverse", "activepositionproperty", "outerposition");
+%!  ylabel ({"semilogy (x, -y)", "ydir = reversed"});
 
 %!test
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   a = logspace (-5, 1, 10);
 %!   b = logspace (-5, 1, 10);
 %!   semilogy (a, b);
 %!   assert (get (gca, "yscale"), "log");
diff --git a/scripts/plot/draw/semilogyerr.m b/scripts/plot/draw/semilogyerr.m
--- a/scripts/plot/draw/semilogyerr.m
+++ b/scripts/plot/draw/semilogyerr.m
@@ -85,13 +85,13 @@ endfunction
 
 
 %!demo
 %! clf;
 %! x = 0.25:0.25:10;
 %! y = wblpdf (x, 4, 2);
 %! eyu = rand (size (y));
 %! eyl = 1.0 - 1./(1+eyu);
-%! semilogyerr (x, y, eyl.*y, eyu.*y, '~-d');
+%! semilogyerr (x, y, eyl.*y, eyu.*y, "~-d");
 %! xlim ([0 10]);
-%! title ({'semilogyerr(): semilogy() plot with errorbars', ...
-%!         'Y-axis is logarithmic'});
+%! title ({"semilogyerr(): semilogy() plot with errorbars", ...
+%!         "Y-axis is logarithmic"});
 
diff --git a/scripts/plot/draw/shrinkfaces.m b/scripts/plot/draw/shrinkfaces.m
--- a/scripts/plot/draw/shrinkfaces.m
+++ b/scripts/plot/draw/shrinkfaces.m
@@ -150,62 +150,62 @@ function [nf, nv] = shrinkfaces (varargi
 
 endfunction
 
 
 %!demo
 %! clf;
 %! faces = [1 2 3; 1 3 4];
 %! vertices = [0 0; 1 0; 1 1; 0 1];
-%! patch ('Faces', faces, 'Vertices', vertices, 'FaceColor', 'none');
+%! patch ("Faces", faces, "Vertices", vertices, "FaceColor", "none");
 %! fv = shrinkfaces (faces, vertices, 0.25);
 %! patch (fv);
 %! axis equal;
 
 %!demo
 %! clf;
 %! faces = [1 2 3 4; 5 6 7 8];
 %! vertices = [0 0; 1 0; 2 1; 1 1; 2 0; 3 0; 4 1; 3.5 1];
-%! patch ('Faces', faces, 'Vertices', vertices, 'FaceColor', 'none');
+%! patch ("Faces", faces, "Vertices", vertices, "FaceColor", "none");
 %! fv = shrinkfaces (faces, vertices, 0.25);
 %! patch (fv);
 %! axis equal;
 %! grid on;
 
 %!demo
 %! clf;
 %! faces = [1 2 3 4];
 %! vertices = [-1 2; 0 0; 1 2; 0 1];
-%! patch ('Faces', faces, 'Vertices', vertices, 'FaceColor', 'none');
+%! patch ("Faces", faces, "Vertices", vertices, "FaceColor", "none");
 %! fv = shrinkfaces (faces, vertices, 0.25);
 %! patch (fv);
 %! axis equal;
 %! grid on;
-%! title 'faces which are not convex are clearly not allowed'
+%! title "faces which are not convex are clearly not allowed"
 
 %!demo
 %! clf;
 %! [phi r] = meshgrid (linspace (0, 1.5*pi, 16), linspace (1, 2, 4));
 %! tri = delaunay (phi(:), r(:));
 %! v = [r(:).*sin(phi(:)) r(:).*cos(phi(:))];
-%! p = patch ('Faces', tri, 'Vertices', v, 'FaceColor', 'none');
+%! p = patch ("Faces", tri, "Vertices", v, "FaceColor", "none");
 %! fv = shrinkfaces (p);
 %! patch (fv);
 %! axis equal;
 %! grid on;
 
 %!demo
 %! clf;
 %! N = 10;  % N intervals per axis
 %! [x, y, z] = meshgrid (linspace (-4,4,N+1));
 %! val = x.^3 + y.^3 + z.^3;
-%! fv = isosurface (x, y, z, val, 3, z, 'noshare');
+%! fv = isosurface (x, y, z, val, 3, z, "noshare");
 %!
-%! p = patch ('Faces', fv.faces, 'Vertices', fv.vertices, 'FaceVertexCData', ...
-%!            fv.facevertexcdata, 'FaceColor', 'interp', 'EdgeColor', 'black');
+%! p = patch ("Faces", fv.faces, "Vertices", fv.vertices, "FaceVertexCData", ...
+%!            fv.facevertexcdata, "FaceColor", "interp", "EdgeColor", "black");
 %! axis equal;
 %! view (115, 30);
 %! drawnow;
 %! shrinkfaces (p, 0.6);
 
 %!shared faces, vertices, nfv, nfv2
 %! faces = [1 2 3];
 %! vertices = [0 0 0; 1 0 0; 1 1 0];
diff --git a/scripts/plot/draw/slice.m b/scripts/plot/draw/slice.m
--- a/scripts/plot/draw/slice.m
+++ b/scripts/plot/draw/slice.m
@@ -198,22 +198,22 @@ function h = slice (varargin)
     h = htmp;
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! [x, y, z] = meshgrid (linspace (-8, 8, 32));
 %! v = sin (sqrt (x.^2 + y.^2 + z.^2)) ./ (sqrt (x.^2 + y.^2 + z.^2));
 %! slice (x, y, z, v, [], 0, []);
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! [x, y, z] = meshgrid (linspace (-8, 8, 32));
 %! v = sin (sqrt (x.^2 + y.^2 + z.^2)) ./ (sqrt (x.^2 + y.^2 + z.^2));
 %! [xi, yi] = meshgrid (linspace (-7, 7));
 %! zi = xi + yi;
 %! slice (x, y, z, v, xi, yi, zi);
 
diff --git a/scripts/plot/draw/smooth3.m b/scripts/plot/draw/smooth3.m
--- a/scripts/plot/draw/smooth3.m
+++ b/scripts/plot/draw/smooth3.m
@@ -143,26 +143,26 @@ function gaussian3 = __smooth3_gaussian3
 
 endfunction
 
 
 %!demo
 %! data = rand (10, 10, 10);
 %! clf;
 %! subplot (1, 2, 1);
-%! patch (isosurface (data, .5), ...
-%!        'FaceColor', 'blue', 'EdgeColor', 'k');
-%! title ('Original data')
-%! view (3);
-%! smoothed_data = smooth3 (data);
+%!  patch (isosurface (data, .5), ...
+%!         "FaceColor", "blue", "EdgeColor", "k");
+%!  title ("Original data");
+%!  view (3);
+%!  smoothed_data = smooth3 (data);
 %! subplot (1, 2, 2);
-%! patch (isosurface (smoothed_data, .5), ...
-%!        'FaceColor', 'blue', 'EdgeColor', 'k');
-%! title ('Smoothed data');
-%! view (3);
+%!  patch (isosurface (smoothed_data, .5), ...
+%!         "FaceColor", "blue", "EdgeColor", "k");
+%!  title ("Smoothed data");
+%!  view (3);
 
 ## one input argument (method: "box")
 %!test
 %! a = rand (10, 8, 7);
 %! b = smooth3 (a);
 %! assert (size_equal (a, b), true);
 
 ## two input argument (method: "gaussian")
diff --git a/scripts/plot/draw/sombrero.m b/scripts/plot/draw/sombrero.m
--- a/scripts/plot/draw/sombrero.m
+++ b/scripts/plot/draw/sombrero.m
@@ -71,16 +71,16 @@ function [x, y, z] = sombrero (n = 41)
     z = zz;
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! sombrero ();
-%! title ('sombrero() function');
+%! title ("sombrero() function");
 
 ## Test input validation
 %!error sombrero (1,2,3)
 %!error <N must be greater than 1> sombrero (1)
 
diff --git a/scripts/plot/draw/stairs.m b/scripts/plot/draw/stairs.m
--- a/scripts/plot/draw/stairs.m
+++ b/scripts/plot/draw/stairs.m
@@ -283,41 +283,41 @@ endfunction
 
 %!demo
 %! clf;
 %! x = 1:10;
 %! rand_1x10_data2 = [0.014, 0.460, 0.622, 0.394, 0.531, 0.378, 0.466, 0.788, 0.342, 0.893];
 %! y = rand_1x10_data2;
 %! [xs, ys] = stairs (x, y);
 %! plot (xs, ys);
-%! title ('plot() of stairs() generated data');
+%! title ("plot() of stairs() generated data");
 
 %!demo
 %! clf;
-%! stairs (1:9, '-o');
-%! title ('stairs() plot with linespec to modify marker');
+%! stairs (1:9, "-o");
+%! title ("stairs() plot with linespec to modify marker");
 
 %!demo
 %! clf;
-%! stairs (9:-1:1, 'marker', 's', 'markersize', 10, 'markerfacecolor', 'm');
-%! title ('stairs() plot with prop/val pairs to modify appearance');
+%! stairs (9:-1:1, "marker", "s", "markersize", 10, "markerfacecolor", "m");
+%! title ("stairs() plot with prop/val pairs to modify appearance");
 
 %!demo
 %! clf;
 %! N = 11;
 %! x = 0:(N-1);
 %! y = rand (1, N);
 %! hs = stairs (x(1), y(1));
 %! axis ([1, N-1 0, 1]);
-%! title ('stairs plot data modified through handle');
+%! title ("stairs plot data modified through handle");
 %! for k = 2:N
-%!   set (hs, 'xdata', x(1:k), 'ydata', y(1:k));
+%!   set (hs, "xdata", x(1:k), "ydata", y(1:k));
 %!   drawnow ();
 %!   pause (0.2);
-%! end
+%! endfor
 
 ## Invisible figure used for tests
 %!shared hf, hax
 %! hf = figure ("visible", "off");
 %! hax = axes;
 
 %!error stairs ()
 %!error <Y must be a numeric 2-D vector> stairs (hax, {1})
diff --git a/scripts/plot/draw/stem.m b/scripts/plot/draw/stem.m
--- a/scripts/plot/draw/stem.m
+++ b/scripts/plot/draw/stem.m
@@ -132,82 +132,82 @@ function h = stem (varargin)
 
 endfunction
 
 
 %!demo
 %! clf;
 %! y = 1:10;
 %! stem (y);
-%! title ('stem plot of y-values only');
+%! title ("stem plot of y-values only");
 
 %!demo
 %! clf;
 %! x = 1:10;
 %! y = 2*x;
 %! stem (x, y);
-%! title ('stem plot of x and y-values');
+%! title ("stem plot of x and y-values");
 
 %!demo
 %! clf;
 %! x = 1:10;
 %! y = 2*x;
-%! h = stem (x, y, 'r');
-%! title ('stem plot with modified color');
+%! h = stem (x, y, "r");
+%! title ("stem plot with modified color");
 
 %!demo
 %! clf;
 %! x = 1:10;
 %! y = 2*x;
-%! h = stem (x, y, '-.k');
-%! title ('stem plot with modified line style and color');
+%! h = stem (x, y, "-.k");
+%! title ("stem plot with modified line style and color");
 
 %!demo
 %! clf;
 %! x = 1:10;
 %! y = 2*x;
-%! h = stem (x, y, '-.ks');
-%! title ('stem plot with modified line style, color, and marker');
+%! h = stem (x, y, "-.ks");
+%! title ("stem plot with modified line style, color, and marker");
 
 %!demo
 %! clf;
 %! x = 1:10;
 %! y = 2*x;
-%! h = stem (x, y, 'filled');
+%! h = stem (x, y, "filled");
 %! title ('stem plot with "filled" markers');
 
 %!demo
 %! clf;
 %! x = 1:10;
 %! y = 2*x;
-%! h = stem (x, y, 'markerfacecolor', [1 0 1]);
-%! title ('stem plot modified with property/value pair');
+%! h = stem (x, y, "markerfacecolor", [1 0 1]);
+%! title ("stem plot modified with property/value pair");
 
 %!demo
 %! clf;
 %! x = (0 : 10)';
 %! y = [sin(x), cos(x)];
 %! h = stem (x, y);
-%! set (h(2), 'color', 'g');
-%! set (h(1), 'basevalue', -0.75);
-%! title ('stem plots modified through hggroup handle');
+%! set (h(2), "color", "g");
+%! set (h(1), "basevalue", -0.75);
+%! title ("stem plots modified through hggroup handle");
 
 %!demo
 %! clf;
 %! N = 11;
 %! x = 0:(N-1);
 %! y = rand (1, N);
 %! hs = stem (x(1), y(1));
-%! set (gca (), 'xlim', [1, N-1], 'ylim', [0, 1]);
-%! title ('stem plot data modified through hggroup handle');
+%! set (gca (), "xlim", [1, N-1], "ylim", [0, 1]);
+%! title ("stem plot data modified through hggroup handle");
 %! for k=2:N
-%!   set (hs, 'xdata', x(1:k), 'ydata', y(1:k));
+%!   set (hs, "xdata", x(1:k), "ydata", y(1:k));
 %!   drawnow ();
 %!   pause (0.2);
-%! end
+%! endfor
 
 %!test
 %! ## stemseries share the same baseline and basevalue
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   h = stem ([1 2; 1.5 2.5], [1 1;2 2]);
 %!   assert (get (h(1), "baseline"), get (h(2), "baseline"));
 %!   bv = 0.3;
diff --git a/scripts/plot/draw/stem3.m b/scripts/plot/draw/stem3.m
--- a/scripts/plot/draw/stem3.m
+++ b/scripts/plot/draw/stem3.m
@@ -75,17 +75,17 @@ function h = stem3 (varargin)
 
 endfunction
 
 
 %!demo
 %! clf;
 %! theta = 0:0.2:6;
 %! stem3 (cos (theta), sin (theta), theta);
-%! title ('stem3() plot');
+%! title ("stem3() plot");
 
 %!error stem3 ()
 %!error <must define X, Y, and Z> stem3 (1,2)
 %!error <X, Y, and Z must be numeric> stem3 ({1}, 1, 1)
 %!error <X, Y, and Z must be numeric> stem3 (1, {1}, 1)
 %!error <X, Y, and Z must be numeric> stem3 (1, 1, {1})
 %!error <inconsistent sizes for X, Y, and Z> stem3 (ones (2,2), 1, 1)
 %!error <inconsistent sizes for X, Y, and Z> stem3 (1, ones (2,2), 1)
diff --git a/scripts/plot/draw/stemleaf.m b/scripts/plot/draw/stemleaf.m
--- a/scripts/plot/draw/stemleaf.m
+++ b/scripts/plot/draw/stemleaf.m
@@ -299,43 +299,43 @@ function plotstr = stemleaf (x, caption,
   else
     plotstr = plot_out;
   endif
 
 endfunction
 
 
 %!demo
-%! %% Unsorted plot:
+%! ## Unsorted plot:
 %! x = [-22 12 -28 52  39 -2 12 10 11 11 42 38 44 18 44];
-%! stemleaf (x, 'Unsorted plot');
+%! stemleaf (x, "Unsorted plot");
 
 %!demo
-%! %% Sorted leaves:
+%! ## Sorted leaves:
 %! x = [-22 12 -28 52  39 -2 12 10 11 11 42 38 44 18 44];
 %! y = sort (x);
-%! stemleaf (y, 'Sorted leaves');
+%! stemleaf (y, "Sorted leaves");
 
 %!demo
-%! %% Sorted leaves (large dataset):
+%! ## Sorted leaves (large dataset):
 %! x = [-22 12 -28 52  39 -2 12 10 11 11 42 38 44 18 44 37 113 124 37 48     ...
 %!      127 36 29 31 125 139 131 115 105 132 104 123 35 113 122 42 117 119   ...
 %!      58 109 23 105 63 27 44 105 99 41 128 121 116 125 32 61 37 127 29 113 ...
 %!      121 58 114 126 53 114 96 25 109 7 31 141 46 -13 71 43 117 116 27 7   ...
 %!      68 40 31 115 124 42 128 52 71 118 117 38 27 106 33 117 116 111 40    ...
 %!      119 47 105 57 122 109 124 115 43 120 43 27 27 18 28 48 125 107 114   ...
 %!      34 133 45 120 30 127 31 116 146 21 23 30 10 20 21 30 0 100 110 1 20  ...
 %!      0];
 %! y = sort (x);
-%! stemleaf (y, 'Sorted leaves (large dataset)');
+%! stemleaf (y, "Sorted leaves (large dataset)");
 
 %!demo
-%! %% Gaussian leaves:
+%! ## Gaussian leaves:
 %! x = fix (30 * randn (300,1));
-%! stemleaf (x, 'Gaussian leaves');
+%! stemleaf (x, "Gaussian leaves");
 
 %!test
 %! ## test minus to plus
 %! x = [-22 12 -28 52  39 -2 12 10 11 11 42 38 44 18 44 37 113 124 37 48 127   ...
 %!      36 29 31 125 139 131 115 105 132 104 123 35 113 122 42 117 119 58 109  ...
 %!      23 105 63 27 44 105 99 41 128 121 116 125 32 61 37 127 29 113 121 58   ...
 %!      114 126 53 114 96 25 109 7 31 141 46 -13 71 43 117 116 27 7 68 40 31   ...
 %!      115 124 42 128 52 71 118 117 38 27 106 33 117 116 111 40 119 47 105 57 ...
diff --git a/scripts/plot/draw/surf.m b/scripts/plot/draw/surf.m
--- a/scripts/plot/draw/surf.m
+++ b/scripts/plot/draw/surf.m
@@ -86,33 +86,33 @@ function retval = surf (varargin)
     retval = htmp;
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! Z = peaks ();
 %! surf (Z);
-%! title ({'surf() plot of peaks() function'; 'color determined by height Z'});
+%! title ({"surf() plot of peaks() function"; "color determined by height Z"});
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! Z = sombrero ();
 %! [Fx,Fy] = gradient (Z);
 %! surf (Z, Fx+Fy);
 %! shading interp;
-%! title ({'surf() plot of peaks() function'; ...
-%!         'facecolor is interpolated, color determined by gradient of Z'});
+%! title ({"surf() plot of peaks() function"; ...
+%!         "facecolor is interpolated, color determined by gradient of Z"});
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! [X,Y,Z] = sombrero ();
 %! [~,Fy] = gradient (Z);
 %! surf (X, Y, Z, Fy);
 %! shading interp;
-%! title ({'surf() plot of peaks() function'; ...
-%!         'facecolor is interpolated, color determined by Y-gradient of Z'});
+%! title ({"surf() plot of peaks() function"; ...
+%!         "facecolor is interpolated, color determined by Y-gradient of Z"});
 
diff --git a/scripts/plot/draw/surfc.m b/scripts/plot/draw/surfc.m
--- a/scripts/plot/draw/surfc.m
+++ b/scripts/plot/draw/surfc.m
@@ -116,33 +116,33 @@ function h = surfc (varargin)
     h = htmp;
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! Z = peaks ();
 %! surfc (Z);
-%! title ('surfc() combines surf/contour plots');
+%! title ("surfc() combines surf/contour plots");
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! Z = sombrero ();
 %! [Fx,Fy] = gradient (Z);
 %! surfc (Z, Fx+Fy);
 %! shading interp;
-%! title ({'surfc() plot of sombrero() function'; ...
-%!         'facecolor is interpolated, color determined by gradient of Z'});
+%! title ({"surfc() plot of sombrero() function"; ...
+%!         "facecolor is interpolated, color determined by gradient of Z"});
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! [X,Y,Z] = sombrero ();
 %! [~,Fy] = gradient (Z);
 %! surfc (X,Y,Z,Fy);
 %! shading interp;
-%! title ({'surfc() plot of peaks() function'; ...
-%!         'facecolor is interpolated, color determined by Y-gradient of Z'});
+%! title ({"surfc() plot of peaks() function"; ...
+%!         "facecolor is interpolated, color determined by Y-gradient of Z"});
 
diff --git a/scripts/plot/draw/surfl.m b/scripts/plot/draw/surfl.m
--- a/scripts/plot/draw/surfl.m
+++ b/scripts/plot/draw/surfl.m
@@ -194,18 +194,18 @@ endfunction
 
 
 %!demo
 %! clf;
 %! [X,Y,Z] = sombrero ();
 %! colormap (copper (64));
 %! surfl (X,Y,Z);
 %! shading interp;
-%! title ('surfl() with defaults');
+%! title ("surfl() with defaults");
 
 %!demo
 %! clf;
 %! [X,Y,Z] = sombrero ();
 %! colormap (copper (64));
 %! surfl (X,Y,Z, [62.50,30], [0.2 0.6 0.4 25]);
 %! shading interp;
-%! title ('surfl() with lighting vector and material properties');
+%! title ("surfl() with lighting vector and material properties");
 
diff --git a/scripts/plot/draw/surfnorm.m b/scripts/plot/draw/surfnorm.m
--- a/scripts/plot/draw/surfnorm.m
+++ b/scripts/plot/draw/surfnorm.m
@@ -175,25 +175,25 @@ function [Nx, Ny, Nz] = surfnorm (vararg
     Nz = nz;
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! surfnorm (peaks (19));
 %! shading faceted;
-%! title ({'surfnorm() shows surface and normals at each vertex', ...
-%!         'peaks() function with 19 faces'});
+%! title ({"surfnorm() shows surface and normals at each vertex", ...
+%!         "peaks() function with 19 faces"});
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! [x, y, z] = sombrero (10);
 %! surfnorm (x, y, z);
 
 ## Test input validation
 %!error surfnorm ()
 %!error surfnorm (1,2)
 %!error <X, Y, and Z must be 2-D real matrices> surfnorm (i)
 %!error <X, Y, and Z must be 2-D real matrices> surfnorm (i, 1, 1)
diff --git a/scripts/plot/draw/tetramesh.m b/scripts/plot/draw/tetramesh.m
--- a/scripts/plot/draw/tetramesh.m
+++ b/scripts/plot/draw/tetramesh.m
@@ -130,30 +130,30 @@ endfunction
 %! [x,y,z] = meshgrid (d, d, d);
 %! x = [x(:); 0];
 %! y = [y(:); 0];
 %! z = [z(:); 0];
 %! tetra = delaunay (x, y, z);
 %! X = [x(:) y(:) z(:)];
 %! colormap (jet (64));
 %! h = tetramesh (tetra, X);
-%! set (h(1:2:end), 'Visible', 'off');
+%! set (h(1:2:end), "visible", "off");
 %! axis equal;
 %! view (30, 20);
-%! title ({'tetramesh() plot', ...
-%!         'colormap = jet (64), every other tetrahedron invisible'});
+%! title ({"tetramesh() plot", ...
+%!         "colormap = jet (64), every other tetrahedron invisible"});
 
 %!demo
 %! clf;
 %! d = [-1 1];
 %! [x,y,z] = meshgrid (d, d, d);
 %! x = [x(:); 0];
 %! y = [y(:); 0];
 %! z = [z(:); 0];
 %! tetra = delaunay (x, y, z);
 %! X = [x(:) y(:) z(:)];
 %! colormap (gray (256));
-%! tetramesh (tetra, X, 21:20:241, 'EdgeColor', 'w');
+%! tetramesh (tetra, X, 21:20:241, "EdgeColor", "w");
 %! axis equal;
 %! view (30, 20);
-%! title ({'tetramesh() plot', ...
-%!         'colormap = gray (256) with white edges'});
+%! title ({"tetramesh() plot", ...
+%!         "colormap = gray (256) with white edges"});
 
diff --git a/scripts/plot/draw/trimesh.m b/scripts/plot/draw/trimesh.m
--- a/scripts/plot/draw/trimesh.m
+++ b/scripts/plot/draw/trimesh.m
@@ -93,20 +93,20 @@ function h = trimesh (tri, x, y, z, vara
     h = htmp;
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
-%! colormap ('default');
-%! old_state = rand ('state');
-%! restore_state = onCleanup (@() rand ('state', old_state));
-%! rand ('state', 10);
+%! colormap ("default");
+%! old_state = rand ("state");
+%! restore_state = onCleanup (@() rand ("state", old_state));
+%! rand ("state", 10);
 %! N = 10;
 %! x = 3 - 6 * rand (N, N);
 %! y = 3 - 6 * rand (N, N);
 %! z = peaks (x, y);
 %! tri = delaunay (x(:), y(:));
 %! trimesh (tri, x(:), y(:), z(:));
 
 ## Test input validation
diff --git a/scripts/plot/draw/triplot.m b/scripts/plot/draw/triplot.m
--- a/scripts/plot/draw/triplot.m
+++ b/scripts/plot/draw/triplot.m
@@ -50,17 +50,17 @@ function h = triplot (tri, x, y, varargi
     h = handle;
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
-%! old_state = rand ('state');
-%! restore_state = onCleanup (@() rand ('state', old_state));
-%! rand ('state', 2);
+%! old_state = rand ("state");
+%! restore_state = onCleanup (@() rand ("state", old_state));
+%! rand ("state", 2);
 %! N = 20;
 %! x = rand (N, 1);
 %! y = rand (N, 1);
 %! tri = delaunay (x, y);
 %! triplot (tri, x, y);
 
diff --git a/scripts/plot/draw/trisurf.m b/scripts/plot/draw/trisurf.m
--- a/scripts/plot/draw/trisurf.m
+++ b/scripts/plot/draw/trisurf.m
@@ -142,22 +142,22 @@ endfunction
 %! x = rand (100, 1);
 %! y = rand (100, 1);
 %! z = x.^2 + y.^2;
 %! tri = delaunay (x, y);
 %! trisurf (tri, x, y, z, 'facecolor', 'interp');
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! x = rand (100, 1);
 %! y = rand (100, 1);
 %! z = x.^2 + y.^2;
 %! tri = delaunay (x, y);
-%! trisurf (tri, x, y, z, 'facecolor', 'interp', 'edgecolor', 'k');
+%! trisurf (tri, x, y, z, "facecolor", "interp", "edgecolor", "k");
 
 ## Test input validation
 %!error trisurf ()
 %!error trisurf (1)
 %!error trisurf (1,2)
 %!error trisurf (1,2,3)
 %!error <C must have 'numel \(Z\)' elements> trisurf (1,2,3,4,[5 6])
 %!error <C must have 'numel \(Z\)' elements> trisurf (1,2,3,4,[5 6]')
diff --git a/scripts/plot/draw/waterfall.m b/scripts/plot/draw/waterfall.m
--- a/scripts/plot/draw/waterfall.m
+++ b/scripts/plot/draw/waterfall.m
@@ -68,26 +68,26 @@ function h = waterfall (varargin)
     h = htmp;
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! Z = peaks ();
 %! waterfall (Z);
-%! title ('waterfall() plot of peaks() function');
+%! title ("waterfall() plot of peaks() function");
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! Z = peaks ();
 %! subplot (1,2,1)
 %!  meshz (Z);
 %!  daspect ([2.5, 2.5, 1]);
-%!  title ('meshz() plot');
+%!  title ("meshz() plot");
 %! subplot (1,2,2)
 %!  waterfall (Z);
 %!  daspect ([2.5, 2.5, 1]);
-%!  title ('waterfall() plot');
+%!  title ("waterfall() plot");
 
diff --git a/scripts/plot/util/copyobj.m b/scripts/plot/util/copyobj.m
--- a/scripts/plot/util/copyobj.m
+++ b/scripts/plot/util/copyobj.m
@@ -112,66 +112,66 @@ function hnew = copyobj (horig, hparent 
 endfunction
 
 
 ## Absurd number of drawnow() function calls in demos is due to problem
 ## with FLTK backend which is not respecting the set ('position') call.
 
 %!demo
 %! hobj = clf;
-%! set (hobj, 'name', 'Original', 'numbertitle', 'off');
+%! set (hobj, "name", "Original", "numbertitle", "off");
 %! hold on;
 %! x = 1:10;
 %! y = x.^2;
 %! dy = 2 * (.2 * x);
 %! y2 = (x - 3).^2;
 %! hg = errorbar (x, y, dy);
-%! set (hg, 'marker', '^', 'markerfacecolor', rand (1,3));
-%! plot (x, y2, 'ok-');
-%! legend ('errorbar', 'line');
+%! set (hg, "marker", "^", "markerfacecolor", rand (1,3));
+%! plot (x, y2, "ok-");
+%! legend ("errorbar", "line");
 %! drawnow ();
-%! pos = get (hobj, 'position');
-%! scrn = get (0, 'screensize');
-%! set (hobj, 'position', [scrn(3)/2-pos(3)-10, scrn(4)/2-pos(4)/2, pos(3:4)]);
+%! pos = get (hobj, "position");
+%! scrn = get (0, "screensize");
+%! set (hobj, "position", [scrn(3)/2-pos(3)-10, scrn(4)/2-pos(4)/2, pos(3:4)]);
 %! drawnow ();
 %! hnew = copyobj (hobj);
 %! drawnow ();
-%! set (hnew, 'name', 'Copyobj');
+%! set (hnew, "name", "Copyobj");
 %! drawnow ();
-%! set (hnew, 'position', [scrn(3)/2, scrn(4)/2-pos(4)/2, pos(3:4)]);
+%! set (hnew, "position", [scrn(3)/2, scrn(4)/2-pos(4)/2, pos(3:4)]);
 %! drawnow ();
 
 %!demo
 %! hobj = clf;
-%! set (hobj, 'name', 'Original', 'numbertitle', 'off');
+%! set (hobj, "name", "Original", "numbertitle", "off");
 %! subplot (2,2,1);
-%! hold on;
-%! contourf (rand (10, 10));
-%! colorbar ();
+%!  hold on;
+%!  contourf (rand (10, 10));
+%!  colorbar ();
 %! subplot (2,2,2);
-%! quiver (rand (10, 10), rand (10, 10));
+%!  quiver (rand (10, 10), rand (10, 10));
 %! subplot (2,2,3);
-%! colormap (jet (64));
-%! hold on;
-%! sombrero ();
-%! colorbar ('peer', gca, 'NorthOutside');
+%!  colormap (jet (64));
+%!  hold on;
+%!  sombrero ();
+%!  colorbar ("peer", gca, "NorthOutside");
 %! subplot (2,2,4);
-%! imagesc (rand (30, 30));
-%! text (15, 15, 'Rotated text', ...
-%!       'HorizontAlalignment', 'Center', 'Rotation', 30);
+%!  imagesc (rand (30, 30));
+%!  text (15, 15, "Rotated text", ...
+%!        "HorizontAlalignment", "Center", "Rotation", 30);
 %! drawnow ();
-%! pos = get (hobj, 'position');
-%! scrn = get (0, 'screensize');
-%! set (hobj, 'position', [scrn(3)/2-pos(3)-10, scrn(4)/2-pos(4)/2, pos(3:4)]);
+%! pos = get (hobj, "position");
+%! scrn = get (0, "screensize");
+%! set (hobj, "position", [scrn(3)/2-pos(3)-10, scrn(4)/2-pos(4)/2, pos(3:4)]);
 %! drawnow ();
 %! hnew = copyobj (hobj);
 %! drawnow ();
-%! set (hnew, 'name', 'Copyobj');
+%! set (hnew, "name", "Copyobj");
 %! drawnow ();
-%! set (hnew, 'position', [scrn(3)/2, scrn(4)/2-pos(4)/2, pos(3:4)]);
+%! set (hnew, "position", [scrn(3)/2, scrn(4)/2-pos(4)/2, pos(3:4)]);
 %! drawnow ();
 
 %!testif HAVE_MAGICK
 %! toolkit = graphics_toolkit ();
 %! graphics_toolkit ("gnuplot");
 %! unwind_protect
 %!   h1 = figure ("visible", "off");
 %!   x = 0:0.1:2*pi;
diff --git a/scripts/plot/util/hold.m b/scripts/plot/util/hold.m
--- a/scripts/plot/util/hold.m
+++ b/scripts/plot/util/hold.m
@@ -95,67 +95,67 @@ endfunction
 
 
 %!demo
 %! clf;
 %! t = linspace (0, 2*pi, 100);
 %! plot (t, sin (t));
 %! hold on;
 %! plot (t, cos (t));
-%! title ({'hold on', '2 plots shown on same graph'});
+%! title ({"hold on", "2 plots shown on same graph"});
 %! hold off;
 
 %!demo
 %! clf;
 %! A = rand (100);
 %! [X, Y] = find (A > 0.95);
 %! imshow (A);
 %! hold on;
-%! plot (X, Y, 'o');
+%! plot (X, Y, "o");
 %! hold off;
-%! title ('hold with image and plot');
+%! title ("hold with image and plot");
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! hold on;
 %! imagesc (1 ./ hilb (4));
-%! plot (1:4, '-s');
+%! plot (1:4, "-s");
 %! hold off;
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! hold on;
 %! imagesc (1 ./ hilb (2));
 %! imagesc (1 ./ hilb (4));
 %! hold off;
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! hold on;
-%! plot (1:4, '-s');
+%! plot (1:4, "-s");
 %! imagesc (1 ./ hilb (4));
 %! hold off;
 
 %!demo
 %! clf;
-%! colormap ('default');
+%! colormap ("default");
 %! t = linspace (-3, 3, 50);
 %! [x, y] = meshgrid (t, t);
 %! z = peaks (x, y);
 %! contourf (x, y, z, 10);
 %! hold on;
-%! plot (x(:), y(:), '^');
-%! patch ([-1.0 1.0 1.0 -1.0 -1.0], [-1.0 -1.0 1.0 1.0 -1.0], 'red');
+%! plot (x(:), y(:), "^");
+%! patch ([-1.0 1.0 1.0 -1.0 -1.0], [-1.0 -1.0 1.0 1.0 -1.0], "red");
 %! xlim ([-2.0 2.0]);
 %! ylim ([-2.0 2.0]);
-%! colorbar ('SouthOutside');
-%! title ('Test script for some plot functions');
+%! colorbar ("SouthOutside");
+%! title ("Test script for some plot functions");
 
 ## hold on test
 %!test
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   p = plot ([0 1]);
 %!   assert (! ishold);
 %!   hold on;
diff --git a/scripts/plot/util/linkaxes.m b/scripts/plot/util/linkaxes.m
--- a/scripts/plot/util/linkaxes.m
+++ b/scripts/plot/util/linkaxes.m
@@ -100,24 +100,24 @@ function linkaxes (hax, optstr = "xy")
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
 %! hax1 = subplot (3,1,1);
-%! bar (rand (4, 1), 'facecolor', 'r');
+%! bar (rand (4, 1), "facecolor", "r");
 %! hax2 = subplot (3,1,2);
-%! bar (5*rand (4, 1), 'facecolor', 'g');
+%! bar (5*rand (4, 1), "facecolor", "g");
 %! hax3 = subplot (3,1,3);
-%! bar (10*rand (4, 1), 'facecolor', 'b');
-%! input ('Type <RETURN> to link axes');
+%! bar (10*rand (4, 1), "facecolor", "b");
+%! input ("Type <RETURN> to link axes");
 %! linkaxes ([hax1, hax2, hax3]);
-%! input ('Type <RETURN> to change ylim');
+%! input ("Type <RETURN> to change ylim");
 %! ylim (hax3, [0 10]);
 
 %!test
 %! hf1 = figure ("visible", "off");
 %! hax1 = axes ();
 %! plot (1:10);
 %! hf2 = figure ("visible", "off");
 %! hax2 = axes ();
diff --git a/scripts/plot/util/linkprop.m b/scripts/plot/util/linkprop.m
--- a/scripts/plot/util/linkprop.m
+++ b/scripts/plot/util/linkprop.m
@@ -117,25 +117,26 @@ function delete_linkprop (hlist, prop)
 
 endfunction
 
 
 %!demo
 %! clf;
 %! x = 0:0.1:10;
 %! subplot (1,2,1);
-%! h1 = plot (x, sin (x), 'r');
+%!  h1 = plot (x, sin (x), "r");
 %! subplot (1,2,2);
-%! h2 = plot (x, cos (x), 'b');
-%! input ('Type <RETURN> to link plots');
-%! hlink = linkprop ([h1, h2], {'color', 'linestyle'});
-%! input ('Type <RETURN> to change color');
-%! set (h1, 'color', 'green');
-%! input ('Type <RETURN> to change linestyle');
-%! set (h2, 'linestyle', '--');
+%!  h2 = plot (x, cos (x), "b");
+%!
+%! input ("Type <RETURN> to link plots");
+%! hlink = linkprop ([h1, h2], {"color", "linestyle"});
+%! input ("Type <RETURN> to change color");
+%! set (h1, "color", "green");
+%! input ("Type <RETURN> to change linestyle");
+%! set (h2, "linestyle", "--");
 
 %!test
 %! hf1 = figure ("visible", "off");
 %! hl1 = plot (1:10, "or");
 %! hf2 = figure ("visible", "off");
 %! hl2 = plot (1:10, "-*g");
 %! hf3 = figure ("visible", "off");
 %! hl3 = plot (1:10, "-xb");
diff --git a/scripts/plot/util/printd.m b/scripts/plot/util/printd.m
--- a/scripts/plot/util/printd.m
+++ b/scripts/plot/util/printd.m
@@ -81,26 +81,26 @@ function pr_out = printd (obj, filename)
   delete (tempf);
   pr_out = sprintf ("%s file %s written\n", opt, filename);
 
 endfunction
 
 
 %!demo
 %! r2 = char ( ...
-%! 'stem step: 10, data: unsorted.', ...
-%! 'Hinges:    lo: 12, hi: 42'     , ...
-%! '   1 | 22118'                  , ...
-%! '   2 | 28'                     , ...
-%! '   3 | 98'                     , ...
-%! '   4 | 244'                    , ...
-%! '   5 | 2'                      );
-%! printd (r2, 'test_p.txt');
-%! system ('cat test_p.txt');
-%! delete ('test_p.txt');
+%! "stem step: 10, data: unsorted.", ...
+%! "Hinges:    lo: 12, hi: 42"     , ...
+%! "   1 | 22118"                  , ...
+%! "   2 | 28"                     , ...
+%! "   3 | 98"                     , ...
+%! "   4 | 244"                    , ...
+%! "   5 | 2"                      );
+%! printd (r2, "test_p.txt");
+%! system ("cat test_p.txt");
+%! delete ("test_p.txt");
 
 %!test
 %! r2 = char (
 %! "stem step: 10, data: unsorted.",
 %! "Hinges:    lo: 12, hi: 42"     ,
 %! "   1 | 22118"                  ,
 %! "   2 | 28"                     ,
 %! "   3 | 98"                     ,
diff --git a/scripts/plot/util/refreshdata.m b/scripts/plot/util/refreshdata.m
--- a/scripts/plot/util/refreshdata.m
+++ b/scripts/plot/util/refreshdata.m
@@ -104,17 +104,17 @@ function refreshdata (h, workspace)
 
 endfunction
 
 
 %!demo
 %! clf;
 %! x = 0:0.1:10;
 %! y = sin (x);
-%! plot (x, y, 'ydatasource', 'y');
-%! title ('refreshdata() showing moving sine curve');
+%! plot (x, y, "ydatasource", "y");
+%! title ("refreshdata() showing moving sine curve");
 %! axis manual;
 %! for i = 1 : 100
 %!   pause (0);
 %!   y = sin (x + 0.1 * i);
-%!   refreshdata (gcf, 'caller');
-%! end
+%!   refreshdata (gcf, "caller");
+%! endfor
 
diff --git a/scripts/plot/util/subplot.m b/scripts/plot/util/subplot.m
--- a/scripts/plot/util/subplot.m
+++ b/scripts/plot/util/subplot.m
@@ -450,106 +450,106 @@ function subplot_align (h, d, rmupdate =
 
 endfunction
 
 
 %!demo
 %! clf;
 %! r = 3;
 %! c = 3;
-%! fmt = {'horizontalalignment', 'center', 'verticalalignment', 'middle'};
+%! fmt = {"horizontalalignment", "center", "verticalalignment", "middle"};
 %! for n = 1 : r*c
 %!   subplot (r, c, n);
-%!   xlabel (sprintf ('xlabel #%d', n));
-%!   ylabel (sprintf ('ylabel #%d', n));
-%!   title (sprintf ('title #%d', n));
-%!   text (0.5, 0.5, sprintf ('subplot(%d,%d,%d)', r, c, n), fmt{:});
-%!   axis ([0 1 0 1]);
-%! end
+%!    xlabel (sprintf ("xlabel #%d", n));
+%!    ylabel (sprintf ("ylabel #%d", n));
+%!    title (sprintf ("title #%d", n));
+%!    text (0.5, 0.5, sprintf ("subplot(%d,%d,%d)", r, c, n), fmt{:});
+%!    axis ([0 1 0 1]);
+%! endfor
 %! subplot (r, c, 1:3);
-%! xlabel (sprintf ('xlabel #%d:%d', 1, 3));
-%! ylabel (sprintf ('ylabel #%d:%d', 1, 3));
-%! title (sprintf ('title #%d:%d', 1, 3));
-%! text (0.5, 0.5, sprintf ('subplot(%d,%d,%d:%d)', r, c, 1, 3), fmt{:});
+%!  xlabel (sprintf ("xlabel #%d:%d", 1, 3));
+%!  ylabel (sprintf ("ylabel #%d:%d", 1, 3));
+%!  title (sprintf ("title #%d:%d", 1, 3));
+%!  text (0.5, 0.5, sprintf ("subplot(%d,%d,%d:%d)", r, c, 1, 3), fmt{:});
 %! axis ([0 1 0 1]);
 
 %!demo
 %! clf;
 %! x = 0:1;
 %! for n = 1:4
-%!   subplot (2,2,n, 'align');
-%!   plot (x, x);
-%!   xlabel (sprintf ('xlabel (2,2,%d)', n));
-%!   ylabel (sprintf ('ylabel (2,2,%d)', n));
-%!   title (sprintf ('title (2,2,%d)', n));
-%! end
-%! subplot (1,2,1, 'align');
-%! plot (x, x);
-%! xlabel ('xlabel (1,2,1)');
-%! ylabel ('ylabel (1,2,1)');
-%! title ('title (1,2,1)');
+%!   subplot (2,2,n, "align");
+%!    plot (x, x);
+%!    xlabel (sprintf ("xlabel (2,2,%d)", n));
+%!    ylabel (sprintf ("ylabel (2,2,%d)", n));
+%!    title (sprintf ("title (2,2,%d)", n));
+%! endfor
+%! subplot (1,2,1, "align");
+%!  plot (x, x);
+%!  xlabel ("xlabel (1,2,1)");
+%!  ylabel ("ylabel (1,2,1)");
+%!  title ("title (1,2,1)");
 
 %!demo
 %! clf;
 %! x = 0:10;
 %! ax(1) = subplot (221);
-%! set (ax(1), 'tag', '1');
+%! set (ax(1), "tag", "1");
 %! plot (x, rand (3, 11));
-%! title ('x & y labels & ticklabels');
-%! xlabel xlabel
-%! ylabel ylabel
+%! title ("x & y labels & ticklabels");
+%! xlabel xlabel;
+%! ylabel ylabel;
 %! ax(2) = subplot (222);
-%! set (ax(2), 'tag', '2');
+%! set (ax(2), "tag", "2");
 %! plot (x, rand (3, 11));
-%! title ('no labels');
-%! axis ('nolabel','tic');
+%! title ("no labels");
+%! axis ("nolabel","tic");
 %! ax(3) = subplot (223);
-%! set (ax(3), 'tag', '3');
+%! set (ax(3), "tag", "3");
 %! plot (x, rand (3, 11));
-%! title ('no labels');
-%! axis ('nolabel','tic');
+%! title ("no labels");
+%! axis ("nolabel","tic");
 %! ax(4) = subplot (224);
-%! set (ax(4), 'tag', '4');
+%! set (ax(4), "tag", "4");
 %! plot (x, rand (3, 11));
-%! title ('x & y labels & ticklabels');
-%! xlabel xlabel
-%! ylabel ylabel
+%! title ("x & y labels & ticklabels");
+%! xlabel xlabel;
+%! ylabel ylabel;
 
 %!demo
 %! x = 0:10;
 %! subplot (221);
-%! plot (x, rand (3, 11));
-%! ylim ([0, 1]);
-%! text (0.5, 0.5, '{x,y}labels & {x,y}ticklabels', ...
-%!       'horizontalalignment', 'center', ...
-%!       'units', 'normalized');
-%! xlabel xlabel
-%! ylabel ylabel
-%! title title
+%!  plot (x, rand (3, 11));
+%!  ylim ([0, 1]);
+%!  text (0.5, 0.5, "{x,y}labels & {x,y}ticklabels", ...
+%!                  "horizontalalignment", "center", ...
+%!                  "units", "normalized");
+%!  xlabel xlabel;
+%!  ylabel ylabel;
+%!  title title;
 %! subplot (222);
-%! plot (x, rand (3, 11));
-%! axis ('labely');
-%! ylabel ylabel
-%! text (0.5, 0.5, 'no xlabels, xticklabels', ...
-%!       'horizontalalignment', 'center', ...
-%!       'units', 'normalized');
+%!  plot (x, rand (3, 11));
+%!  axis ("labely");
+%!  ylabel ylabel;
+%!  text (0.5, 0.5, "no xlabels, xticklabels", ...
+%!                  "horizontalalignment", "center", ...
+%!                  "units", "normalized");
 %! subplot (223);
-%! plot (x, rand (3, 11));
-%! axis ('labelx');
-%! text (0.5, 0.5, 'no ylabels, yticklabels', ...
-%!       'horizontalalignment', 'center', ...
-%!       'units', 'normalized');
-%! xlabel xlabel
-%! title title
+%!  plot (x, rand (3, 11));
+%!  axis ("labelx");
+%!  text (0.5, 0.5, "no ylabels, yticklabels", ...
+%!                  "horizontalalignment", "center", ...
+%!                  "units", "normalized");
+%!  xlabel xlabel;
+%!  title title;
 %! subplot (224);
-%! plot (x, rand (3, 11));
-%! axis ('nolabel','tic');
-%! text (0.5, 0.5, 'no {x,y}labels, {x,y}ticklabels', ...
-%!       'horizontalalignment', 'center', ...
-%!       'units', 'normalized');
+%!  plot (x, rand (3, 11));
+%!  axis ("nolabel", "tic");
+%!  text (0.5, 0.5, "no {x,y}labels, {x,y}ticklabels", ...
+%!                  "horizontalalignment", "center", ...
+%!                  "units", "normalized");
 
 ## Test recognition/deletion of previous axes
 ## Default mode
 %!test
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   for ii = 1:9
 %!     hax(ii) = subplot (3,3,ii);
diff --git a/scripts/plot/util/zoom.m b/scripts/plot/util/zoom.m
--- a/scripts/plot/util/zoom.m
+++ b/scripts/plot/util/zoom.m
@@ -176,25 +176,25 @@ function update_mouse_mode (hfig, arg)
 
 endfunction
 
 
 %!demo
 %! clf;
 %! sombrero ();
 %! pause (1);
-%! %% zoom in by a factor of 2
+%! ## zoom in by a factor of 2
 %! zoom (2);
 %! pause (1);
-%! %% return to original zoom level
+%! ## return to original zoom level
 %! zoom out;
 %! pause (1);
-%! %% zoom in by a factor of 2
+%! ## zoom in by a factor of 2
 %! zoom (2);
 %! pause (1);
-%! %% set this zoom level as the "initial zoom level"
-%! %% and zoom in some more
+%! ## set this zoom level as the "initial zoom level"
+%! ## and zoom in some more
 %! zoom reset;
 %! zoom (2);
 %! pause (1);
-%! %% return to zoom level set by last call to "zoom reset"
+%! ## return to zoom level set by last call to "zoom reset"
 %! zoom out;
 
diff --git a/scripts/sparse/pcr.m b/scripts/sparse/pcr.m
--- a/scripts/sparse/pcr.m
+++ b/scripts/sparse/pcr.m
@@ -341,17 +341,17 @@ endfunction
 %!
 %! N = 10;
 %! A = hilb (N); A(1,1) = -A(1,1); b = rand (N,1);
 %! X = A \ b;  # X is the true solution
 %! printf ("Condition number of A is   %g\n", cond (A));
 %! [x, flag, relres, iter, resvec] = pcr (A,b,[],200);
 %! if (flag == 3)
 %!   printf ("PCR breakdown.  System matrix is [close to] singular\n");
-%! end
+%! endif
 %! clf;
 %! title ("Convergence history");
 %! xlabel ("Iteration"); ylabel ("log(||b-Ax||)");
 %! semilogy ([0:iter], resvec, "o-g;absolute residual;");
 
 %!demo
 %! ## Full output from PCR
 %! ## We use an indefinite matrix based on the 1-D Laplacian matrix for A,
diff --git a/scripts/testfun/private/dump_demos.m b/scripts/testfun/private/dump_demos.m
--- a/scripts/testfun/private/dump_demos.m
+++ b/scripts/testfun/private/dump_demos.m
@@ -70,16 +70,24 @@ function dump_demos (dirs={"plot/appeara
   if (isempty (ext))
     output = [output ".m"];
   endif
 
   ## Create script beginning (close figures, etc.)
   fid = fopen (output, "w");
   fprintf (fid, "%% DO NOT EDIT!  Generated automatically by dump_demos.m\n");
   fprintf (fid, "function %s ()\n", funcname);
+  fprintf (fid, "set (0, 'DefaultAxesColorOrder', ...\n"); 
+  fprintf (fid, "  [ 0.00000   0.00000   1.00000 ;\n");
+  fprintf (fid, "    0.00000   0.50000   0.00000 ;\n");
+  fprintf (fid, "    1.00000   0.00000   0.00000 ;\n");
+  fprintf (fid, "    0.00000   0.75000   0.75000 ;\n");
+  fprintf (fid, "    0.75000   0.00000   0.75000 ;\n");
+  fprintf (fid, "    0.75000   0.75000   0.00000 ;\n");
+  fprintf (fid, "    0.25000   0.25000   0.25000 ]);\n");
   fprintf (fid, "close all\n");
   fprintf (fid, "more off\n");
   fprintf (fid, "diary diary.log\n");
 
   ## Run and print the demos in each directory
   for i = 1:numel (dirs)
     d = dirs{i};
     if (! is_absolute_filename (d))
@@ -93,17 +101,17 @@ function dump_demos (dirs={"plot/appeara
 
   ## Add helper functions like sombrero
   dump_helper_fcns (fid);
 
   ## Stop and flush diary
   fprintf (fid, "\ndiary off\n");
 
   ## Create script ending
-  fprintf (fid, "end\n\n")
+  fprintf (fid, "end\n\n");
 
   ## Close script
   fclose (fid);
 
 endfunction
 
 function dump_all_demos (directory, fid, fmt)
 
@@ -174,18 +182,18 @@ function retval = get_demos (fcn)
     retval{k} = oct2mat (code(idx(k):idx(k+1)-1));
   endfor
 
 endfunction
 
 function code = oct2mat (code)
 
   ## Simple hacks to make things Matlab compatible
-  code = strrep (code, "%!", "%%");
-  code = strrep (code, "!", "~");
+  code = strrep (code, "%!", "%%");    # system operator !
+  code = strrep (code, "!", "~");      # logical not operator
 
   ## Simply replacing double quotes with single quotes
   ## causes problems with strings like 'hello "world"' or transpose.
 
   ## Test input for double quote replacement:
   ## title ("bar");
   ## a'
   ## foo 'bar' "baz"
@@ -193,32 +201,31 @@ function code = oct2mat (code)
   ## fprintf ('File "brighten_01.png" already exists.\n');
   ## title ({'x^2 + y^2'; 'plotted over circular disk with "circ"'});
   ## annotation ('textbox', [0.1 0 0.8 1], 'string', ...
   ##             '"headstyle" property:', ...
 
   code = regexprep (code, "[(,;\n][ ]*'[^']*'(*SKIP)(*F)|\"", "'",
                           "lineanchors", "dotexceptnewline");
 
-  code = strrep (code, "#", "%");
+  code = strrep (code, "#", "%");      # comment character
   ## Fix the format specs for the errorbar demos changed by the line above
   code = strrep (code, "%r", "#r");
   code = strrep (code, "%~", "#~");
+  ## Shorten all long forms of endXXX to 'end'
   endkeywords = {"endfor", "endfunction", "endif", "endwhile", "end_try_catch"};
   for k = 1:numel (endkeywords)
     code = strrep (code, endkeywords{k}, "end");
   endfor
+  ## Comment keywords unknown to Matlab
   commentkeywords = {"unwind_protect", "end_unwind_protect"};
   for k = 1:numel (commentkeywords)
     code = strrep (code, commentkeywords{k}, ["%" commentkeywords{k}]);
   endfor
 
-  ## Fix up sombrero which now has default argument in Octave
-  code = strrep (code, "sombrero ()", "sombrero (41)");
-
 endfunction
 
 function dump_helper_fcns (fid)
 
   fprintf (fid, "\n%s\n", repmat ("%", [1, 60]));
   fdisp (fid, "% Helper functions");
   fprintf (fid, "%s\n", repmat ("%", [1, 60]));
 
