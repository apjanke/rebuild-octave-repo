# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1298407530 28800
#      Tue Feb 22 12:45:30 2011 -0800
# Node ID 0ee8d7d60c8239d6255a99ea7b323d51a31e0158
# Parent  46b3883d800c4db59b6286a0a21f93641d43bfe2
Use single quotes around regexp patterns.

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2010-02-22  Rik  <octave@nomad.inbox5.com>
+
+	* io/strread.m, plot/whitebg.m, strings/regexptranslate.m,
+	testfun/runtests.m: Use single quotes around regexp patterns.
+
 2010-02-20  Karsten Trulsen  <karstent@math.uio.no>
 
 	* signal/fftshift.m: Fix broken function.  Bug 32442.
 
 2010-02-21  Carlo de Falco  <kingcrimson@tiscali.it>
 
 	* pkg/get_forge_pkg.m: Fix typo in new PCRE style regular expression.
 
diff --git a/scripts/io/strread.m b/scripts/io/strread.m
--- a/scripts/io/strread.m
+++ b/scripts/io/strread.m
@@ -183,17 +183,17 @@ function varargout = strread (str, forma
     len = length (str);
     c2len = length (comment_specif{2});
     str = cellslices (str, [1, cstop + c2len], [cstart - 1, len]);
     str = [str{:}];
   endif
 
   ## Determine the number of words per line
   format = strrep (format, "%", " %");
-  [~, ~, ~, fmt_words] = regexp (format, "[^ ]+");
+  [~, ~, ~, fmt_words] = regexp (format, '[^ ]+');
 
   num_words_per_line = numel (fmt_words);
   for m = 1:numel(fmt_words)
     ## Convert formats such as "%Ns" to "%s" (see the FIXME below)
     if (length (fmt_words{m}) > 2)
       if (strcmp (fmt_words{m}(1:2), "%*"))
         fmt_words{m} = "%*";
       elseif (fmt_words{m}(1) == "%")
@@ -235,17 +235,17 @@ function varargout = strread (str, forma
           error ("strread: FORMAT does not match data");
         endif
     endswitch
   endfor
 endfunction
 
 function out = split_by (text, sep)
   sep = union (sep, "\n");
-  pat = sprintf ("[^%s]+", sep);
+  pat = sprintf ('[^%s]+', sep);
   [~, ~, ~, out] = regexp (text, pat);
   out(cellfun (@isempty, out)) = {""};
   out = strtrim (out);
 endfunction
 
 %!test
 %! [a, b] = strread ("1 2", "%f%f");
 %! assert (a == 1 && b == 2);
diff --git a/scripts/plot/whitebg.m b/scripts/plot/whitebg.m
--- a/scripts/plot/whitebg.m
+++ b/scripts/plot/whitebg.m
@@ -69,17 +69,17 @@ function whitebg (varargin)
 
   axes = findall (fig, "type", "axes");
   if (isnan (color))
     ## Root figure. Set the default axes and figure properties so that
     ## subsequent plots have the new color scheme
     if (isroot)
       fac = get (0, "factory");
       fields = fieldnames (fac);
-      fieldindex = intersect (find (!cellfun (@isempty, regexp(fields, '.*color.*'))), union (find (!cellfun (@isempty, regexp(fields, 'factoryaxes.*'))), find (!cellfun (@isempty, regexp(fields, 'factoryfigure.*')))));
+      fieldindex = intersect (find (!cellfun (@isempty, regexp(fields, 'color'))), union (find (!cellfun (@isempty, regexp(fields, 'factoryaxes.*'))), find (!cellfun (@isempty, regexp(fields, 'factoryfigure.*')))));
 
       ## Check whether the factory value has been replaced
       for nf = 1 : numel (fieldindex);
         defaultfield = strrep (fields {fieldindex (nf)}, "factory", "default");
         try
           defaultvalue = 1 - get (0, defaultfield {n});
         catch
           field = fields {fieldindex (nf)};
@@ -99,34 +99,34 @@ function whitebg (varargin)
       endfor
       handles = children;
       h = union (h, children);
     endwhile
 
     for nh = 1 : numel(h)
       p = get (h (nh));
       fields = fieldnames (p);
-      fieldindex = find (!cellfun (@isempty, regexp(fields, '.*color.*')));
+      fieldindex = find (!cellfun (@isempty, regexp(fields, 'color')));
       if (numel (fieldindex))
         for nf = 1 : numel (fieldindex);
           field = fields {fieldindex (nf)};
           c = subsref (p, struct ("type", ".", "subs", field));
           if (! ischar(c) && columns(c) == 3)
             set (h (nh), field, 1 - c);
           endif
         endfor
       endif
 
       ## If h(nh) is a figure or axes invert default color properties
       typ = subsref (p, struct ("type", ".", "subs", "type"));
       if (strcmp (typ, "axes") || strcmp (typ, "figure"))
         def = get (h (nh), "default");
         fields = fieldnames (def);
         if (! isempty (fields))
-          fieldindex = find (!cellfun (@isempty, regexp(fields, '.*color.*')));
+          fieldindex = find (!cellfun (@isempty, regexp(fields, 'color')));
           for nf = 1 : numel (fieldindex)
             defaultfield = fields {fieldindex (nf)};
             defaultvalue = 1 - subsref (def, struct ("type", ".", "subs", defaultfield));
             set (h (nh), defaultfield, defaultvalue);
           endfor
         endif
       endif
     endfor
diff --git a/scripts/strings/regexptranslate.m b/scripts/strings/regexptranslate.m
--- a/scripts/strings/regexptranslate.m
+++ b/scripts/strings/regexptranslate.m
@@ -55,18 +55,18 @@ function y = regexptranslate (op, s)
 
   if nargin != 2
     print_usage ();
   endif
 
   if (ischar (op))
     op = tolower (op);
     if (strcmp ("wildcard", op))
-      y = regexprep (regexprep (regexprep (s, "\\.", "\\."), "\\*",
-                                ".*"), "\\?", ".");
+      y = regexprep (regexprep (regexprep (s, '\.', '\.'), '\*',
+                                '.*'), '\?', '.');
     elseif (strcmp ("escape", op))
       ch = {'\$', '\.', '\?', '\[', '\]'};
       y = s;
       for i = 1 : length (ch)
         y = regexprep (y, ch{i}, ch{i});
       endfor
     else
       error ("regexptranslate: unexpected operation");
diff --git a/scripts/testfun/runtests.m b/scripts/testfun/runtests.m
--- a/scripts/testfun/runtests.m
+++ b/scripts/testfun/runtests.m
@@ -75,17 +75,17 @@ function run_all_tests (directory)
   endif
 endfunction
 
 function retval = has_tests (f)
   fid = fopen (f);
   if (fid >= 0)
     str = fread (fid, "*char")';
     fclose (fid);
-    retval = ! isempty (regexp (str, "^%!(test|assert|error|warning)", "lineanchors"));
+    retval = ! isempty (regexp (str, '^%!(test|assert|error|warning)', "lineanchors"));
   else
     error ("runtests: fopen failed: %s", f);
   endif
 endfunction
 
 function print_pass_fail (n, p)
   if (n > 0)
     printf (" PASS %4d/%-4d", p, n);
diff --git a/test/ChangeLog b/test/ChangeLog
--- a/test/ChangeLog
+++ b/test/ChangeLog
@@ -1,8 +1,12 @@
+2010-02-22  Rik  <octave@nomad.inbox5.com>
+
+	* fntests.m: Use single quotes around regexp patterns.
+
 2010-02-19  Rik  <octave@nomad.inbox5.com>
 
 	* fntests.m: Use PCRE regular expressions to simplify script.
 
 2010-02-02  Rik  <octave@nomad.inbox5.com>
 
 	* build_sparse_tests.sh: Use testif to only run some sparse tests when
 	necessary libraries are installed.
diff --git a/test/fntests.m b/test/fntests.m
--- a/test/fntests.m
+++ b/test/fntests.m
@@ -86,17 +86,17 @@ function retval = has_functions (f)
   endif
 endfunction
 
 function retval = has_tests (f)
   fid = fopen (f);
   if (fid >= 0)
     str = fread (fid, "*char")';
     fclose (fid);
-    retval = ! isempty (regexp (str, "^%!(test|assert|error|warning)", "lineanchors"));
+    retval = ! isempty (regexp (str, '^%!(test|assert|error|warning)', "lineanchors"));
   else
     error ("fopen failed: %s", f);
   endif
 endfunction
 
 function [dp, dn, dxf, dsk] = run_test_dir (fid, d);
   global files_with_tests;
   global files_with_no_tests;
