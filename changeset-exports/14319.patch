# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1328293317 -3600
#      Fri Feb 03 19:21:57 2012 +0100
# Branch gui
# Node ID 136ee6bcadc07adda5f9cd4b372d7061ba97dd3f
# Parent  df86157a49123fe23f21e494e1fb3489520a70d2
Guarded access to symbol_table with mutexes.

* symtab.h: Added mutex locker and an octave-mutex.

diff --git a/src/symtab.h b/src/symtab.h
--- a/src/symtab.h
+++ b/src/symtab.h
@@ -35,16 +35,18 @@ along with Octave; see the file COPYING.
 
 class tree_argument_list;
 class octave_user_function;
 
 #include "oct-obj.h"
 #include "oct-refcount.h"
 #include "ov.h"
 
+#include "oct-mutex.h"
+
 class
 OCTINTERP_API
 symbol_table
 {
 public:
 
   typedef int scope_id;
   typedef size_t context_id;
@@ -1956,16 +1958,19 @@ private:
 
   // Name for this table (usually the file name of the function
   // corresponding to the scope);
   std::string table_name;
 
   // Map from symbol names to symbol info.
   std::map<std::string, symbol_record> table;
 
+  // Mutex for symbol table access.
+  octave_mutex table_mutex;
+
   // The associated user code (may be null).
   octave_user_function *curr_fcn;
 
   // Map from names of global variables to values.
   static std::map<std::string, octave_value> global_table;
 
   // Map from names of persistent variables to values.
   std::map<std::string, octave_value> persistent_table;
@@ -2060,38 +2065,41 @@ private:
       error ("unable to %s symbol_table object for scope %d!",
              create ? "create" : "find", scope);
 
     return retval;
   }
 
   void insert_symbol_record (const symbol_record& sr)
   {
+    octave_autolock lock (table_mutex);
     table[sr.name ()] = sr;
   }
 
   void
   do_dup_scope (symbol_table& new_symbol_table) const
   {
+	octave_autolock lock (table_mutex);
     for (table_const_iterator p = table.begin (); p != table.end (); p++)
       new_symbol_table.insert_symbol_record (p->second.dup ());
   }
 
   symbol_record do_find_symbol (const std::string& name)
   {
     table_iterator p = table.find (name);
 
     if (p == table.end ())
       return do_insert (name);
     else
       return p->second;
   }
 
   void do_inherit (symbol_table& donor_table, context_id donor_context)
   {
+    octave_autolock lock (table_mutex);
     for (table_iterator p = table.begin (); p != table.end (); p++)
       {
         symbol_record& sr = p->second;
 
         if (! (sr.is_automatic () || sr.is_formal ()))
           {
             std::string nm = sr.name ();
 
@@ -2119,138 +2127,151 @@ private:
   octave_value
   do_find (const std::string& name, const octave_value_list& args,
            bool skip_variables, bool local_funcs);
 
   octave_value do_builtin_find (const std::string& name);
 
   symbol_record& do_insert (const std::string& name)
   {
+    octave_autolock lock (table_mutex);
     table_iterator p = table.find (name);
 
     return p == table.end ()
       ? (table[name] = symbol_record (name)) : p->second;
   }
 
   void do_force_variable (const std::string& name, context_id context)
   {
+    octave_autolock lock (table_mutex);
     table_iterator p = table.find (name);
 
     if (p == table.end ())
       {
         symbol_record& sr = do_insert (name);
 
         sr.force_variable (context);
       }
     else
       p->second.force_variable (context);
   }
 
   octave_value& do_varref (const std::string& name, context_id context)
   {
+    octave_autolock lock (table_mutex);
     table_iterator p = table.find (name);
 
     if (p == table.end ())
       {
         symbol_record& sr = do_insert (name);
 
         return sr.varref (context);
       }
     else
       return p->second.varref (context);
   }
 
   octave_value do_varval (const std::string& name, context_id context) const
   {
+    octave_autolock lock (table_mutex);
     table_const_iterator p = table.find (name);
 
     return (p != table.end ()) ? p->second.varval (context) : octave_value ();
   }
 
   octave_value& do_persistent_varref (const std::string& name)
   {
     persistent_table_iterator p = persistent_table.find (name);
 
     return (p == persistent_table.end ())
       ? persistent_table[name] : p->second;
   }
 
   octave_value do_persistent_varval (const std::string& name)
   {
+    octave_autolock lock (table_mutex);
     persistent_table_const_iterator p = persistent_table.find (name);
 
     return (p != persistent_table.end ()) ? p->second : octave_value ();
   }
 
   void do_erase_persistent (const std::string& name)
   {
+    octave_autolock lock (table_mutex);
     persistent_table_iterator p = persistent_table.find (name);
 
     if (p != persistent_table.end ())
       persistent_table.erase (p);
   }
 
   bool do_is_variable (const std::string& name) const
   {
+    octave_autolock lock (table_mutex);
     bool retval = false;
 
     table_const_iterator p = table.find (name);
 
     if (p != table.end ())
       {
         const symbol_record& sr = p->second;
 
         retval = sr.is_variable ();
       }
 
     return retval;
   }
 
   void do_push_context (void)
   {
+    octave_autolock lock (table_mutex);
     for (table_iterator p = table.begin (); p != table.end (); p++)
       p->second.push_context ();
   }
 
   void do_pop_context (void)
   {
+    octave_autolock lock (table_mutex);
     for (table_iterator p = table.begin (); p != table.end (); )
       {
         if (p->second.pop_context () == 0)
           table.erase (p++);
         else
           p++;
       }
   }
 
   void do_clear_variables (void)
   {
+    octave_autolock lock (table_mutex);
     for (table_iterator p = table.begin (); p != table.end (); p++)
       p->second.clear ();
   }
 
   void do_clear_objects (void)
   {
+    octave_autolock lock (table_mutex);
     for (table_iterator p = table.begin (); p != table.end (); p++)
       {
         symbol_record& sr = p->second;
         octave_value& val = sr.varref ();
         if (val.is_object())
           p->second.clear ();
       }
   }
 
  void do_unmark_forced_variables (void)
   {
+    octave_autolock lock (table_mutex);
     for (table_iterator p = table.begin (); p != table.end (); p++)
       p->second.unmark_forced ();
   }
 
   void do_clear_global (const std::string& name)
   {
+    octave_autolock lock (table_mutex);
     table_iterator p = table.find (name);
 
     if (p != table.end ())
       {
         symbol_record& sr = p->second;
 
         if (sr.is_global ())
           sr.unmark_global ();
@@ -2260,24 +2281,26 @@ private:
 
     if (q != global_table.end ())
       global_table.erase (q);
 
   }
 
   void do_clear_variable (const std::string& name)
   {
+    octave_autolock lock (table_mutex);
     table_iterator p = table.find (name);
 
     if (p != table.end ())
       p->second.clear ();
   }
 
   void do_clear_global_pattern (const std::string& pat)
   {
+    octave_autolock lock (table_mutex);
     glob_match pattern (pat);
 
     for (table_iterator p = table.begin (); p != table.end (); p++)
       {
         symbol_record& sr = p->second;
 
         if (sr.is_global () && pattern.match (sr.name ()))
           sr.unmark_global ();
@@ -2294,32 +2317,34 @@ private:
           q++;
       }
 
 
   }
 
   void do_clear_variable_pattern (const std::string& pat)
   {
+    octave_autolock lock (table_mutex);
     glob_match pattern (pat);
 
     for (table_iterator p = table.begin (); p != table.end (); p++)
       {
         symbol_record& sr = p->second;
 
         if (sr.is_defined () || sr.is_global ())
           {
             if (pattern.match (sr.name ()))
               sr.clear ();
           }
       }
   }
 
   void do_clear_variable_regexp (const std::string& pat)
   {
+    octave_autolock lock (table_mutex);
     ::regexp pattern (pat);
 
     for (table_iterator p = table.begin (); p != table.end (); p++)
       {
         symbol_record& sr = p->second;
 
         if (sr.is_defined () || sr.is_global ())
           {
@@ -2342,16 +2367,17 @@ private:
   void do_mark_global (const std::string& name)
   {
     do_insert (name).mark_global ();
   }
 
   std::list<symbol_record>
   do_all_variables (context_id context, bool defined_only) const
   {
+    octave_autolock lock (table_mutex);
     std::list<symbol_record> retval;
 
     for (table_const_iterator p = table.begin (); p != table.end (); p++)
       {
         const symbol_record& sr = p->second;
 
         if (defined_only && ! sr.is_defined (context))
           continue;
@@ -2360,16 +2386,17 @@ private:
       }
 
     return retval;
   }
 
   std::list<symbol_record> do_glob (const std::string& pattern,
                                     bool vars_only = false) const
   {
+    octave_autolock lock (table_mutex);
     std::list<symbol_record> retval;
 
     glob_match pat (pattern);
 
     for (table_const_iterator p = table.begin (); p != table.end (); p++)
       {
         if (pat.match (p->first))
           {
@@ -2383,16 +2410,17 @@ private:
       }
 
     return retval;
   }
 
   std::list<symbol_record> do_regexp (const std::string& pattern,
                                       bool vars_only = false) const
   {
+    octave_autolock lock (table_mutex);
     std::list<symbol_record> retval;
 
     ::regexp pat (pattern);
 
     for (table_const_iterator p = table.begin (); p != table.end (); p++)
       {
         if (pat.is_match (p->first))
           {
@@ -2405,16 +2433,17 @@ private:
           }
       }
 
     return retval;
   }
 
   std::list<std::string> do_variable_names (void)
   {
+    octave_autolock lock (table_mutex);
     std::list<std::string> retval;
 
     for (table_const_iterator p = table.begin (); p != table.end (); p++)
       {
         if (p->second.is_variable ())
           retval.push_back (p->first);
       }
 
@@ -2440,25 +2469,27 @@ private:
           retval[nm] = tmp.second;
       }
 
     return retval;
   }
 
   bool do_is_local_variable (const std::string& name) const
   {
+    octave_autolock lock (table_mutex);
     table_const_iterator p = table.find (name);
 
     return (p != table.end ()
             && ! p->second.is_global ()
             && p->second.is_defined ());
   }
 
   bool do_is_global (const std::string& name) const
   {
+    octave_autolock lock (table_mutex);
     table_const_iterator p = table.find (name);
 
     return p != table.end () && p->second.is_global ();
   }
 
   void do_dump (std::ostream& os);
 
   void do_cache_name (const std::string& name) { table_name = name; }
