# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1464025572 25200
#      Mon May 23 10:46:12 2016 -0700
# Node ID 7190a26977cbc8df1287341914eba978a5215ed4
# Parent  d16d137eb48567f26b93449ba6acd415a668e1e8
# Parent  f00204dae6ee2cc9e112e68ab1663b1ab5cc0a6e
maint: Periodic merge of stable to default.

diff --git a/libinterp/corefcn/__magick_read__.cc b/libinterp/corefcn/__magick_read__.cc
--- a/libinterp/corefcn/__magick_read__.cc
+++ b/libinterp/corefcn/__magick_read__.cc
@@ -1110,17 +1110,17 @@ encode_uint_image (std::vector<Magick::I
                                                       Magick::DirectClass);
 
             Magick::PixelPacket *pix = m_img.getPixels (0, 0, nCols, nRows);
             octave_idx_type GM_idx = 0;
             for (octave_idx_type col = 0; col < nCols; col++)
               {
                 for (octave_idx_type row = 0; row < nRows; row++)
                   {
-                    const double grey = double (*img_fvec) / divisor;
+                    const double grey = xround (double (*img_fvec) / divisor);
                     Magick::Color c (grey, grey, grey);
                     pix[GM_idx] = c;
                     img_fvec++;
                     GM_idx += nCols;
                   }
                 GM_idx -= nCols * nRows - 1;
               }
             // Save changes to underlying image.
@@ -1140,19 +1140,19 @@ encode_uint_image (std::vector<Magick::I
                                                       Magick::DirectClass);
 
             Magick::PixelPacket *pix = m_img.getPixels (0, 0, nCols, nRows);
             octave_idx_type GM_idx = 0;
             for (octave_idx_type col = 0; col < nCols; col++)
               {
                 for (octave_idx_type row = 0; row < nRows; row++)
                   {
-                    double grey = double (*img_fvec) / divisor;
+                    double grey = xround (double (*img_fvec) / divisor);
                     Magick::Color c (grey, grey, grey,
-                                     MaxRGB - (double (*a_fvec) / divisor));
+                                     MaxRGB - xround (double (*a_fvec) / divisor));
                     pix[GM_idx] = c;
                     img_fvec++;
                     a_fvec++;
                     GM_idx += nCols;
                   }
                 GM_idx -= nCols * nRows - 1;
               }
             // Save changes to underlying image.
@@ -1175,19 +1175,19 @@ encode_uint_image (std::vector<Magick::I
                                                       Magick::DirectClass);
 
             Magick::PixelPacket *pix = m_img.getPixels (0, 0, nCols, nRows);
             octave_idx_type GM_idx = 0;
             for (octave_idx_type col = 0; col < nCols; col++)
               {
                 for (octave_idx_type row = 0; row < nRows; row++)
                   {
-                    Magick::Color c (double (*img_fvec)          / divisor,
-                                     double (img_fvec[G_offset]) / divisor,
-                                     double (img_fvec[B_offset]) / divisor);
+                    Magick::Color c (xround (double (*img_fvec)          / divisor),
+                                     xround (double (img_fvec[G_offset]) / divisor),
+                                     xround (double (img_fvec[B_offset]) / divisor));
                     pix[GM_idx] = c;
                     img_fvec++;
                     GM_idx += nCols;
                   }
                 GM_idx -= nCols * nRows - 1;
               }
             // Save changes to underlying image.
             m_img.syncPixels ();
@@ -1210,20 +1210,20 @@ encode_uint_image (std::vector<Magick::I
                                                       Magick::DirectClass);
 
             Magick::PixelPacket *pix = m_img.getPixels (0, 0, nCols, nRows);
             octave_idx_type GM_idx = 0;
             for (octave_idx_type col = 0; col < nCols; col++)
               {
                 for (octave_idx_type row = 0; row < nRows; row++)
                   {
-                    Magick::Color c (double (*img_fvec)          / divisor,
-                                     double (img_fvec[G_offset]) / divisor,
-                                     double (img_fvec[B_offset]) / divisor,
-                                     MaxRGB - (double (*a_fvec) / divisor));
+                    Magick::Color c (xround (double (*img_fvec)          / divisor),
+                                     xround (double (img_fvec[G_offset]) / divisor),
+                                     xround (double (img_fvec[B_offset]) / divisor),
+                                     MaxRGB - xround (double (*a_fvec) / divisor));
                     pix[GM_idx] = c;
                     img_fvec++;
                     a_fvec++;
                     GM_idx += nCols;
                   }
                 GM_idx -= nCols * nRows - 1;
               }
             // Save changes to underlying image.
@@ -1248,20 +1248,20 @@ encode_uint_image (std::vector<Magick::I
                                                       Magick::DirectClass);
 
             Magick::PixelPacket *pix = m_img.getPixels (0, 0, nCols, nRows);
             octave_idx_type GM_idx = 0;
             for (octave_idx_type col = 0; col < nCols; col++)
               {
                 for (octave_idx_type row = 0; row < nRows; row++)
                   {
-                    Magick::Color c (double (*img_fvec)          / divisor,
-                                     double (img_fvec[M_offset]) / divisor,
-                                     double (img_fvec[Y_offset]) / divisor,
-                                     double (img_fvec[K_offset]) / divisor);
+                    Magick::Color c (xround (double (*img_fvec)          / divisor),
+                                     xround (double (img_fvec[M_offset]) / divisor),
+                                     xround (double (img_fvec[Y_offset]) / divisor),
+                                     xround (double (img_fvec[K_offset]) / divisor));
                     pix[GM_idx] = c;
                     img_fvec++;
                     GM_idx += nCols;
                   }
                 GM_idx -= nCols * nRows - 1;
               }
             // Save changes to underlying image.
             m_img.syncPixels ();
@@ -1286,22 +1286,22 @@ encode_uint_image (std::vector<Magick::I
 
             Magick::PixelPacket *pix = m_img.getPixels (0, 0, nCols, nRows);
             Magick::IndexPacket *ind = m_img.getIndexes ();
             octave_idx_type GM_idx = 0;
             for (octave_idx_type col = 0; col < nCols; col++)
               {
                 for (octave_idx_type row = 0; row < nRows; row++)
                   {
-                    Magick::Color c (double (*img_fvec)          / divisor,
-                                     double (img_fvec[M_offset]) / divisor,
-                                     double (img_fvec[Y_offset]) / divisor,
-                                     double (img_fvec[K_offset]) / divisor);
+                    Magick::Color c (xround (double (*img_fvec)          / divisor),
+                                     xround (double (img_fvec[M_offset]) / divisor),
+                                     xround (double (img_fvec[Y_offset]) / divisor),
+                                     xround (double (img_fvec[K_offset]) / divisor));
                     pix[GM_idx] = c;
-                    ind[GM_idx] = MaxRGB - (double (*a_fvec) / divisor);
+                    ind[GM_idx] = MaxRGB - xround (double (*a_fvec) / divisor);
                     img_fvec++;
                     a_fvec++;
                     GM_idx += nCols;
                   }
                 GM_idx -= nCols * nRows - 1;
               }
             // Save changes to underlying image.
             m_img.syncPixels ();
