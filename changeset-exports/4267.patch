# HG changeset patch
# User jwe
# Date 1041607626 0
#      Fri Jan 03 15:27:06 2003 +0000
# Node ID 7cd865a8c815e26de2c7f45e3119f962ebac1eb6
# Parent  1086ac09a411a121599b9ae18faeda5410c210a0
[project @ 2003-01-03 15:27:05 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,28 @@
 2003-01-03  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* pt-exp.h (tree_expression::has_magic_end): New pure virtual function.
+	* pt-id.h (tree_identifier::has_magic_end): New function.
+	* pt-colon.h (tree_colon_expression::has_magic_end): Likewise.
+	* pt-idx.h (tree_index_expression::has_magic_end): Likewise.
+	* pt-const.h (tree_constant::has_magic_end): Likewise.
+	* pt-unop.h (tree_unary_expression::has_magic_end): Likewise.
+	* pt-binop.h (tree_binary_expression::has_magic_end): Likewise.
+	* pt-assign.h (tree_multi_assignment::has_magic_end): Likewise.
+	(tree_simple_assignment::has_magic_end): Likewise.
+	* pt-mat.cc (tree_matrix::has_magic_end): Likewise.
+	* pt-arg-list.cc (tree_argument_list::has_magic_end): Likewise.
+
+	* pt-arg-list.cc (tree_argument_list::append): Check all
+	expression types for magic end token..
+
+	* file-io.cc (Ftmpnam): Improve error checking.
+	(symbols_of_file_io): Move definition of P_tmpdir here from dirfns.cc.
+
 	* dirfns.cc (symbols_of_dirfns): Install new built-in constant
 	P_tmpdir.
 
 2003-01-02  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* dirfns.cc (symbols_of_dirfns): New function.
 	Install new built-in constant filesep.
 
diff --git a/src/dirfns.cc b/src/dirfns.cc
--- a/src/dirfns.cc
+++ b/src/dirfns.cc
@@ -643,26 +643,15 @@ symbols_of_dirfns (void)
 {
   DEFCONST (filesep, file_ops::dir_sep_str,
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} filesep\n\
 The character used to separate directory names.  The value\n\
 of this variable is system dependent.\n\
 @end defvr");
 
-#if ! defined (P_tmpdir)
-#define P_tmpdir "/tmp"
-#endif
-
-  DEFCONSTX ("P_tmpdir", SBV_P_tmpdir, P_tmpdir,
-    "-*- texinfo -*-\n\
-@defvr {Built-in Variable} P_tmpdir\n\
-The default name of the directory for temporary files on this system.\n\
-of this variable is system dependent.\n\
-@end defvr");
-
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/file-io.cc b/src/file-io.cc
--- a/src/file-io.cc
+++ b/src/file-io.cc
@@ -1472,35 +1472,47 @@ use @code{fclose} for the same purpose.\
   else
     print_usage ("pclose");
 
   return retval;
 }
 
 DEFUN (tmpnam, args, ,
  "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} {} tmpnam ()\n\
+@deftypefn {Built-in Function} {} tmpnam (@var{dir}, @var{prefix})\n\
 Return a unique temporary file name as a string.\n\
 \n\
-Since the named file is not opened, by @code{tmpnam}, it\n\
-is possible (though relatively unlikely) that it will not be available\n\
-by the time your program attempts to open it.\n\
+If @var{prefix} is omitted, a value of @code{\"oct-\"} is used.\n\
+If @var{dir} is also omitted, the default directory for temporary files\n\
+is used.  If @var{dir} is provided, it must exist, otherwise the default\n\
+directory for temporary files is used.  Since the named file is not\n\
+opened, by @code{tmpnam}, it is possible (though relatively unlikely)\n\
+that it will not be available by the time your program attempts to open it.\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int len = args.length ();
 
   if (len < 3)
     {
       std::string dir = len > 0 ? args(0).string_value () : std::string ();
-      std::string pfx = len > 1 ? args(1).string_value () : std::string ("oct-");
 
       if (! error_state)
-	retval = file_ops::tempnam (dir, pfx);
+	{
+	  std::string pfx
+	    = len > 1 ? args(1).string_value () : std::string ("oct-");
+
+	  if (! error_state)
+	    retval = file_ops::tempnam (dir, pfx);
+	  else
+	    ::error ("expecting second argument to be a string");
+	}
+      else
+	::error ("expecting first argument to be a string");
     }
   else
     print_usage ("tmpnam");
 
   return retval;
 }
 
 DEFALIAS (octave_tmp_file_name, tmpnam);
@@ -1579,16 +1591,27 @@ Set the permission mask for file creatio
     retval(0) = status;
 
   return retval;
 }
 
 void
 symbols_of_file_io (void)
 {
+#if ! defined (P_tmpdir)
+#define P_tmpdir "/tmp"
+#endif
+
+  DEFCONSTX ("P_tmpdir", SBV_P_tmpdir, P_tmpdir,
+    "-*- texinfo -*-\n\
+@defvr {Built-in Variable} P_tmpdir\n\
+The default name of the directory for temporary files on this system.\n\
+of this variable is system dependent.\n\
+@end defvr");
+
   // NOTE: the values of SEEK_SET, SEEK_CUR, and SEEK_END have to be
   // this way for Matlab compatibility.
 
   DEFCONSTX ("SEEK_SET", SBV_SEEK_SET, -1,
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} SEEK_SET\n\
 @defvrx {Built-in Variable} SEEK_CUR\n\
 @defvrx {Built-in Variable} SEEK_END\n\
diff --git a/src/pt-arg-list.cc b/src/pt-arg-list.cc
--- a/src/pt-arg-list.cc
+++ b/src/pt-arg-list.cc
@@ -52,29 +52,37 @@ tree_argument_list::~tree_argument_list 
   while (! empty ())
     {
       iterator p = begin ();
       delete *p;
       erase (p);
     }
 }
 
+bool
+tree_argument_list::has_magic_end (void) const
+{
+  for (const_iterator p = begin (); p != end (); p++)
+    {
+      tree_expression *elt = *p;
+
+      if (elt && elt->has_magic_end ())
+	return true;
+    }
+
+  return false;
+}
+
 void
 tree_argument_list::append (const element_type& s)
 {
   octave_base_list<tree_expression *>::append (s);
 
-  // XXX FIXME XXX -- wait, it's not that simple!  The argument list
-  // may include expressions, so we will have to do some more work
-  // here.  We need a new function for all expression types that can
-  // tell us whether the expression includes the magic end token!
-
-  //  if (s && s->is_identifier () && s->name () == "__end__")
-
-  list_includes_magic_end = true;
+  if (! list_includes_magic_end && s && s->has_magic_end ())
+    list_includes_magic_end = true;
 }
 
 int
 tree_argument_list::nargout_count (void) const
 {
   int retval = 0;
 
   for (const_iterator p = begin (); p != end (); p++)
diff --git a/src/pt-arg-list.h b/src/pt-arg-list.h
--- a/src/pt-arg-list.h
+++ b/src/pt-arg-list.h
@@ -50,16 +50,18 @@ public:
   tree_argument_list (void)
     : list_includes_magic_end (false) { }
 
   tree_argument_list (tree_expression *t)
     : list_includes_magic_end (false) { append (t); }
 
   ~tree_argument_list (void);
 
+  bool has_magic_end (void) const;
+
   tree_expression *remove_front (void)
     {
       iterator p = begin ();
       tree_expression *retval = *p;
       erase (p);
       return retval;
     }
 
diff --git a/src/pt-assign.h b/src/pt-assign.h
--- a/src/pt-assign.h
+++ b/src/pt-assign.h
@@ -54,16 +54,18 @@ public:
   tree_simple_assignment (tree_expression *le, tree_expression *re,
 			  bool plhs = false, int l = -1, int c = -1,
 			  octave_value::assign_op t = octave_value::op_asn_eq)
     : tree_expression (l, c), lhs (le), rhs (re), preserve (plhs),
       etype (t) { }
 
   ~tree_simple_assignment (void);
 
+  bool has_magic_end (void) const { return (rhs && rhs->has_magic_end ()); }
+
   bool rvalue_ok (void) const { return true; }
 
   octave_value rvalue (void);
 
   octave_value_list rvalue (int nargout);
 
   bool is_assignment_expression (void) const { return true; }
 
@@ -120,16 +122,18 @@ public:
   tree_multi_assignment (tree_argument_list *lst, tree_expression *r,
 			 bool plhs = false, int l = -1, int c = -1,
 			  octave_value::assign_op t = octave_value::op_asn_eq)
     : tree_expression (l, c), lhs (lst), rhs (r), preserve (plhs),
       etype (t) { }
 
   ~tree_multi_assignment (void);
 
+  bool has_magic_end (void) const { return (rhs && rhs->has_magic_end ()); }
+
   bool is_assignment_expression (void) const { return true; }
 
   bool rvalue_ok (void) const { return true; }
 
   octave_value rvalue (void);
 
   octave_value_list rvalue (int nargout);
 
diff --git a/src/pt-binop.h b/src/pt-binop.h
--- a/src/pt-binop.h
+++ b/src/pt-binop.h
@@ -57,16 +57,22 @@ public:
     : tree_expression (l, c), op_lhs (a), op_rhs (b), etype (t) { }
 
   ~tree_binary_expression (void)
     {
       delete op_lhs;
       delete op_rhs;
     }
 
+  bool has_magic_end (void) const
+    {
+      return ((op_lhs && op_lhs->has_magic_end ())
+	      || (op_rhs && op_rhs->has_magic_end ()));
+    }
+
   bool is_binary_expression (void) const { return true; }
 
   bool rvalue_ok (void) const { return true; }
 
   octave_value rvalue (void);
 
   octave_value_list rvalue (int nargout);
 
diff --git a/src/pt-colon.h b/src/pt-colon.h
--- a/src/pt-colon.h
+++ b/src/pt-colon.h
@@ -56,16 +56,23 @@ public:
     {
       if (! save_base)
 	delete op_base;
 
       delete op_limit;
       delete op_increment;
     }
 
+  bool has_magic_end (void) const
+    {
+      return ((op_base && op_base->has_magic_end ())
+	      || (op_limit && op_limit->has_magic_end ())
+	      || (op_increment && op_increment->has_magic_end ()));
+    }
+
   void preserve_base (void) { save_base = true; }
 
   tree_colon_expression *append (tree_expression *t);
 
   bool rvalue_ok (void) const { return true; }
 
   octave_value rvalue (void);
 
diff --git a/src/pt-const.h b/src/pt-const.h
--- a/src/pt-const.h
+++ b/src/pt-const.h
@@ -49,16 +49,18 @@ public:
   tree_constant (int l = -1, int c = -1)
     : tree_expression (l, c), val (), orig_text () { }
 
   tree_constant (const octave_value& v, int l = -1, int c = -1)
     : tree_expression (l, c), val (v), orig_text () { }
 
   ~tree_constant (void) { }
 
+  bool has_magic_end (void) const { return false; }
+
   void *operator new (size_t size) { return allocator.alloc (size); }
 
   void operator delete (void *p, size_t size) { allocator.free (p, size); }
 
   // Type.  It would be nice to eliminate the need for this.
 
   bool is_constant (void) const { return true; }
 
diff --git a/src/pt-exp.h b/src/pt-exp.h
--- a/src/pt-exp.h
+++ b/src/pt-exp.h
@@ -42,16 +42,18 @@ tree_expression : public tree
 public:
 
   tree_expression (int l = -1, int c = -1)
     : tree (l, c), num_parens (0), postfix_indexed (false),
       print_flag (false) { }
 
   virtual ~tree_expression (void) { }
 
+  virtual bool has_magic_end (void) const = 0;
+
   virtual bool is_constant (void) const { return false; }
 
   virtual bool is_matrix_constant (void) const { return false; }
 
   virtual bool is_identifier (void) const { return false; }
 
   virtual bool is_index_expression (void) const { return false; }
 
diff --git a/src/pt-id.h b/src/pt-id.h
--- a/src/pt-id.h
+++ b/src/pt-id.h
@@ -51,16 +51,18 @@ public:
   tree_identifier (int l = -1, int c = -1)
     : tree_expression (l, c), sym (0) { }
 
   tree_identifier (symbol_record *s, int l = -1, int c = -1)
     : tree_expression (l, c), sym (s) { }
 
   ~tree_identifier (void) { }
 
+  bool has_magic_end (void) const { return (name () == "__end__"); }
+
   bool is_identifier (void) const { return true; }
 
   std::string name (void) const;
 
   tree_identifier *define (octave_function *f, unsigned int sym_type);
 
   void document (const std::string& s);
 
diff --git a/src/pt-idx.h b/src/pt-idx.h
--- a/src/pt-idx.h
+++ b/src/pt-idx.h
@@ -55,16 +55,18 @@ public:
   tree_index_expression (tree_expression *e, const std::string& n,
 			 int l = -1, int c = -1);
 
   tree_index_expression (tree_expression *e, tree_expression* df,
 			 int l = -1, int c = -1);
 
   ~tree_index_expression (void);
 
+  bool has_magic_end (void) const { return false; }
+
   void append (tree_argument_list *lst = 0, char t = '(');
 
   void append (const std::string& n);
 
   void append (tree_expression *df);
 
   bool is_index_expression (void) const { return true; }
 
diff --git a/src/pt-mat.cc b/src/pt-mat.cc
--- a/src/pt-mat.cc
+++ b/src/pt-mat.cc
@@ -404,16 +404,30 @@ tree_matrix::~tree_matrix (void)
     {
       iterator p = begin ();
       delete *p;
       erase (p);
     }
 }
 
 bool
+tree_matrix::has_magic_end (void) const
+{
+  for (const_iterator p = begin (); p != end (); p++)
+    {
+      tree_argument_list *elt = *p;
+
+      if (elt && elt->has_magic_end ())
+	return true;
+    }
+
+  return false;
+}
+
+bool
 tree_matrix::all_elements_are_constant (void) const
 {
   for (const_iterator p = begin (); p != end (); p++)
     {
       tree_argument_list *elt = *p;
 
       if (! elt->all_elements_are_constant ())
 	return false;
diff --git a/src/pt-mat.h b/src/pt-mat.h
--- a/src/pt-mat.h
+++ b/src/pt-mat.h
@@ -51,16 +51,18 @@ public:
     : tree_expression (line, column)
   {
     if (row)
       append (row);
   }
 
   ~tree_matrix (void);
 
+  bool has_magic_end (void) const;
+
   bool all_elements_are_constant (void) const;
 
   bool rvalue_ok (void) const { return true; }
 
   octave_value rvalue (void);
 
   octave_value_list rvalue (int nargout);
 
diff --git a/src/pt-unop.h b/src/pt-unop.h
--- a/src/pt-unop.h
+++ b/src/pt-unop.h
@@ -51,16 +51,18 @@ public:
 
   tree_unary_expression (tree_expression *e, int l = -1, int c = -1,
 			 octave_value::unary_op t
 			   = octave_value::unknown_unary_op)
     : tree_expression (l, c), op (e), etype (t) { }
 
   ~tree_unary_expression (void) { delete op; }
 
+  bool has_magic_end (void) const { return (op && op->has_magic_end ()); }
+
   tree_expression *operand (void) { return op; }
 
   std::string oper (void) const;
 
 protected:
 
   // The operand for the expression.
   tree_expression *op;
