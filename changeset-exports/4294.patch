# HG changeset patch
# User jwe
# Date 1042257724 0
#      Sat Jan 11 04:02:04 2003 +0000
# Node ID 755f6509bb015bb88379b74d4779474011f45777
# Parent  977f977fb2c37d5764b281785c79835bb08916d8
[project @ 2003-01-11 04:01:53 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,14 @@
+2003-01-10  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* oct-syscalls.cc (octave_syscalls::kill): New function.
+	* oct-syscalls.h: Provide decl.
+	
+
 2003-01-06  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* dMatrix.cc (Matrix::read): Set size and return immediately if
 	there is nothing to read.
 
 2003-01-05  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* lo-cutils.c: Define _XOPEN_SOURCE.
diff --git a/liboctave/oct-syscalls.cc b/liboctave/oct-syscalls.cc
--- a/liboctave/oct-syscalls.cc
+++ b/liboctave/oct-syscalls.cc
@@ -316,13 +316,42 @@ octave_syscalls::waitpid (pid_t pid, int
     }
 #else
   msg = NOT_SUPPORTED ("waitpid");
 #endif
 
   return status;
 }
 
+int
+octave_syscalls::kill (pid_t pid, int sig)
+{
+  std::string msg;
+  return kill (pid, sig, msg);
+}
+
+int
+octave_syscalls::kill (pid_t pid, int sig, std::string& msg)
+{
+  msg = std::string ();
+
+  int status = -1;
+
+#if defined (HAVE_KILL)
+  status = ::kill (pid, sig);
+
+  if (status < 0)
+    {
+      using namespace std;
+      msg = ::strerror (errno);
+    }
+#else
+  msg = NOT_SUPPORTED ("kill");
+#endif
+
+  return status;
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/oct-syscalls.h b/liboctave/oct-syscalls.h
--- a/liboctave/oct-syscalls.h
+++ b/liboctave/oct-syscalls.h
@@ -57,16 +57,19 @@ octave_syscalls
   static uid_t getuid (void);
   static uid_t geteuid (void);
 
   static int pipe (int *);
   static int pipe (int *, std::string&);
 
   static pid_t waitpid (pid_t, int);
   static pid_t waitpid (pid_t, int, std::string&);
+
+  static int kill (pid_t, int);
+  static int kill (pid_t, int, std::string&);
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2003-01-10  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* sighandlers.cc (make_sig_struct): New function.
+	(symbols_of_sighandlers): Add DEFCONST for SIG struct.
+
+	* syscalls.cc (Fkill): New function.
+
 2003-01-06  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* oct-stream.cc (get_size): If only one dimension is specified and
 	it is zero, also set the other dimension to zero instead of one.
 
 2003-01-04  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* sysdep.cc [__DECCXX]: Add a kluge for some missing template
diff --git a/src/sighandlers.cc b/src/sighandlers.cc
--- a/src/sighandlers.cc
+++ b/src/sighandlers.cc
@@ -37,16 +37,17 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include "cmd-edit.h"
 #include "quit.h"
 
 #include "defun.h"
 #include "error.h"
 #include "load-save.h"
+#include "oct-map.h"
 #include "pager.h"
 #include "pt-bp.h"
 #include "sighandlers.h"
 #include "syswait.h"
 #include "toplev.h"
 #include "utils.h"
 
 // Nonzero means we have already printed a message for this series of
@@ -488,16 +489,164 @@ install_signal_handlers (void)
   octave_set_signal_handler (SIGXCPU, generic_sig_handler);
 #endif
 
 #ifdef SIGXFSZ
   octave_set_signal_handler (SIGXFSZ, generic_sig_handler);
 #endif
 }
 
+static Octave_map
+make_sig_struct (void)
+{
+  Octave_map m;
+
+#ifdef SIGABRT
+  m ["ABRT"](0) = SIGABRT;
+#endif
+
+#ifdef SIGALRM
+  m ["ALRM"](0) = SIGALRM;
+#endif
+
+#ifdef SIGBUS
+  m ["BUS"](0) = SIGBUS;
+#endif
+
+#ifdef SIGCHLD
+  m ["CHLD"](0) = SIGCHLD;
+#endif
+
+#ifdef SIGCLD
+  m ["CLD"](0) = SIGCLD;
+#endif
+
+#ifdef SIGCONT
+  m ["CONT"](0) = SIGCONT;
+#endif
+
+#ifdef SIGEMT
+  m ["EMT"](0) = SIGEMT;
+#endif
+
+#ifdef SIGFPE
+  m ["FPE"](0) = SIGFPE;
+#endif
+
+#ifdef SIGHUP
+  m ["HUP"](0) = SIGHUP;
+#endif
+
+#ifdef SIGILL
+  m ["ILL"](0) = SIGILL;
+#endif
+
+#ifdef SIGINFO
+  m ["INFO"](0) = SIGINFO;
+#endif
+
+#ifdef SIGINT
+  m ["INT"](0) = SIGINT;
+#endif
+
+#ifdef SIGIOT
+  m ["IOT"](0) = SIGIOT;
+#endif
+
+#ifdef SIGLOST
+  m ["LOST"](0) = SIGLOST;
+#endif
+
+#ifdef SIGPIPE
+  m ["PIPE"](0) = SIGPIPE;
+#endif
+
+#ifdef SIGPOLL
+  m ["POLL"](0) = SIGPOLL;
+#endif
+
+#ifdef SIGPROF
+  m ["PROF"](0) = SIGPROF;
+#endif
+
+#ifdef SIGPWR
+  m ["PWR"](0) = SIGPWR;
+#endif
+
+#ifdef SIGQUIT
+  m ["QUIT"](0) = SIGQUIT;
+#endif
+
+#ifdef SIGSEGV
+  m ["SEGV"](0) = SIGSEGV;
+#endif
+
+#ifdef SIGSTOP
+  m ["STOP"](0) = SIGSTOP;
+#endif
+
+#ifdef SIGSYS
+  m ["SYS"](0) = SIGSYS;
+#endif
+
+#ifdef SIGTERM
+  m ["TERM"](0) = SIGTERM;
+#endif
+
+#ifdef SIGTRAP
+  m ["TRAP"](0) = SIGTRAP;
+#endif
+
+#ifdef SIGTSTP
+  m ["TSTP"](0) = SIGTSTP;
+#endif
+
+#ifdef SIGTTIN
+  m ["TTIN"](0) = SIGTTIN;
+#endif
+
+#ifdef SIGTTOU
+  m ["TTOU"](0) = SIGTTOU;
+#endif
+
+#ifdef SIGURG
+  m ["URG"](0) = SIGURG;
+#endif
+
+#ifdef SIGUSR1
+  m ["USR1"](0) = SIGUSR1;
+#endif
+
+#ifdef SIGUSR2
+  m ["USR2"](0) = SIGUSR2;
+#endif
+
+#ifdef SIGVTALRM
+  m ["VTALRM"](0) = SIGVTALRM;
+#endif
+
+#ifdef SIGIO
+  m ["IO"](0) = SIGIO;
+#endif
+
+#ifdef SIGWINCH
+  m ["WINCH"](0) = SIGWINCH;
+#endif
+
+#ifdef SIGXCPU
+  m ["XCPU"](0) = SIGXCPU;
+#endif
+
+#ifdef SIGXFSZ
+  m ["XFSZ"](0) = SIGXFSZ;
+#endif
+
+  return m;
+}
+
 octave_child_list *octave_child_list::instance = 0;
 
 bool
 octave_child_list::instance_ok (void)
 {
   bool retval = true;
 
   if (! instance)
@@ -629,15 +778,21 @@ symbols_of_sighandlers (void)
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} debug_on_interrupt\n\
 If @code{debug_on_interrupt} is nonzero, Octave will try to enter\n\
 debugging mode when it receives an interrupt signal (typically\n\
 generated with @kbd{C-c}).  If a second interrupt signal is received\n\
 before reaching the debugging mode, a normal interrupt will occur.\n\
 The default value is 0.\n\
 @end defvr");
+
+  DEFCONST (SIG, make_sig_struct (),
+    "-*- texinfo -*-\n\
+@defvr {Built-in Variable} SIG\n\
+Structure of Unix signal names and their defined values.\n\
+@end defvr");
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/syscalls.cc b/src/syscalls.cc
--- a/src/syscalls.cc
+++ b/src/syscalls.cc
@@ -96,17 +96,17 @@ Duplicate a file descriptor.\n\
 If successful, @var{fid} is greater than zero and contains the new file\n\
 ID.  Otherwise, @var{fid} is negative and @var{msg} contains a\n\
 system-dependent error message.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   retval(1) = std::string ();
-  retval(0) = -1.0;
+  retval(0) = -1;
 
   int nargin = args.length ();
 
   if (nargin == 2)
     {
       octave_stream old_stream
 	= octave_stream_list::lookup (args(0), "dup2");
 
@@ -157,17 +157,17 @@ will run @code{ls} and return you to you
 If successful, @code{exec} does not return.  If @code{exec} does return,\n\
 @var{err} will be nonzero, and @var{msg} will contain a system-dependent\n\
 error message.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   retval(1) = std::string ();
-  retval(0) = -1.0;
+  retval(0) = -1;
 
   int nargin = args.length ();
 
   if (nargin == 1 || nargin == 2)
     {
       std::string exec_file = args(0).string_value ();
 
       if (! error_state)
@@ -270,17 +270,17 @@ Set the file status flags for @var{fid} 
 If successful, @var{err} is 0 and @var{msg} is an empty string.\n\
 Otherwise, @var{err} is nonzero and @var{msg} contains a\n\
 system-dependent error message.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   retval(1) = std::string ();
-  retval(0) = -1.0;
+  retval(0) = -1;
 
   int nargin = args.length ();
 
   if (nargin == 3)
     {
       octave_stream strm = octave_stream_list::lookup (args (0), "fcntl");
 
       if (! error_state)
@@ -336,17 +336,17 @@ process.  If that fails, you should prob
 The call to @code{fork} failed for some reason.  You must take evasive\n\
 action.  A system dependent error message will be waiting in @var{msg}.\n\
 @end table\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   retval(1) = std::string ();
-  retval(0) = -1.0;
+  retval(0) = -1;
 
   int nargin = args.length ();
 
   if (nargin == 0)
     {
       std::string msg;
 
       pid_t pid = octave_syscalls::fork (msg);
@@ -364,17 +364,17 @@ DEFUN (getpgrp, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {pgid =} getpgrp ()\n\
 Return the process group id of the current process.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   retval(1) = std::string ();
-  retval(0) = -1.0;
+  retval(0) = -1;
 
   int nargin = args.length ();
 
   if (nargin == 0)
     {
       std::string msg;
 
       retval(0) = octave_syscalls::getpgrp (msg);
@@ -489,16 +489,68 @@ Return the real user id of the current p
   if (nargin == 0)
     retval = octave_syscalls::getuid ();
   else
     print_usage ("getuid");
 
   return retval;
 }
 
+DEFUN (kill, args, ,
+  "-*- textinfo -*-\n\
+@deftypefn {Built-in Function} {[@var{err}, @var{msg}] =} kill (@var{pid}, @var{sig})\n\
+Send signal @var{sig} to process @var{pid}.\n\
+\n\
+If @var{pid} is positive, then signal @var{sig} is sent to @var{pid}.\n\
+\n\
+If @var{pid} is 0, then signal @var{sig} is sent to every process\n\
+in the process group of the current process.\n\
+\n\
+If @var{pid} is -1, then signal @var{sig} is sent to every process\n\
+except process 1.\n\
+\n\
+If @var{pid} is less than -1, then signal @var{sig} is sent to every\n\
+process in the process group @var{-pid}.\n\
+\n\
+If @var{sig} is 0, then no signal is sent, but error checing is still\n\
+performed.\n\
+\n\
+Return 0 if sucessful, otherwise return -1.\n\
+@end deftypefn")
+{
+  octave_value_list retval;
+
+  retval(1) = std::string ();
+  retval(0) = -1;
+
+  if (args.length () == 2)
+    {
+      pid_t pid = args(0).int_value (true);
+
+      if (! error_state)
+	{
+	  int sig = args(1).int_value (true);
+
+	  if (! error_state)
+	    {
+	      std::string msg;
+
+	      int status = octave_syscalls::kill (pid, sig, msg);
+
+	      retval(1) = msg;
+	      retval(0) = status;
+	    }
+	}
+    }
+  else
+    print_usage ("kill");
+
+  return retval;
+}
+
 DEFUN (lstat, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {[@var{info}, @var{err}, @var{msg}] =} lstat (@var{file})\n\
 See stat.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
@@ -508,23 +560,23 @@ See stat.\n\
 
       if (! error_state)
 	{
 	  file_stat fs (fname, false);
 
 	  if (fs)
 	    {
 	      retval(2) = std::string ();
-	      retval(1) = 0.0;
+	      retval(1) = 0;
 	      retval(0) = mk_stat_map (fs);
 	    }
 	  else
 	    {
 	      retval(2) = fs.error ();
-	      retval(1) = -1.0;
+	      retval(1) = -1;
 	      retval(0) = Matrix ();
 	    }
 	}
     }
   else
     print_usage ("lstat");
 
   return retval;
@@ -540,17 +592,17 @@ Create a @var{fifo} special file named @
 If successful, @var{err} is 0 and @var{msg} is an empty string.\n\
 Otherwise, @var{err} is nonzero and @var{msg} contains a\n\
 system-dependent error message.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   retval(1) = std::string ();
-  retval(0) = -1.0;
+  retval(0) = -1;
 
   int nargin = args.length ();
 
   if (nargin == 2)
     {
       if (args(0).is_string ())
 	{
 	  std::string name = args(0).string_value ();
@@ -594,17 +646,17 @@ to the reading and writing ends of the p
 If successful, @var{err} is 0 and @var{msg} is an empty string.\n\
 Otherwise, @var{err} is nonzero and @var{msg} contains a\n\
 system-dependent error message.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   retval(2) = std::string ();
-  retval(1) = -1.0;
+  retval(1) = -1;
   retval(0) = Matrix ();
 
   int nargin = args.length ();
 
   if (nargin == 0)
     {
       int fid[2];
 
@@ -733,23 +785,23 @@ For example,\n\
 
       if (! error_state)
 	{
 	  file_stat fs (fname);
 
 	  if (fs)
 	    {
 	      retval(2) = std::string ();
-	      retval(1) = 0.0;
+	      retval(1) = 0;
 	      retval(0) = octave_value (mk_stat_map (fs));
 	    }
 	  else
 	    {
 	      retval(2) = fs.error ();
-	      retval(1) = -1.0;
+	      retval(1) = -1;
 	      retval(0) = Matrix ();
 	    }
 	}
     }
   else
     print_usage ("stat");
 
   return retval;
@@ -763,17 +815,17 @@ Delete the file named @var{file}.\n\
 If successful, @var{err} is 0 and @var{msg} is an empty string.\n\
 Otherwise, @var{err} is nonzero and @var{msg} contains a\n\
 system-dependent error message.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   retval(1) = std::string ();
-  retval(0) = -1.0;
+  retval(0) = -1;
 
   int nargin = args.length ();
 
   if (nargin == 1)
     {
       if (args(0).is_string ())
 	{
 	  std::string name = args(0).string_value ();
@@ -833,17 +885,17 @@ If the returned value of @var{pid} is gr
 ID of the child process that exited.  If an error occurs, @var{pid} will\n\
 be less than zero and @var{msg} will contain a system-dependent error\n\
 message.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   retval(1) = std::string ();
-  retval(0) = -1.0;
+  retval(0) = -1;
 
   int nargin = args.length ();
 
   if (nargin == 1 || nargin == 2)
     {
       pid_t pid = args(0).int_value (true);
   
       if (! error_state)
