# HG changeset patch
# User jwe
# Date 753181870 0
#      Sat Nov 13 09:11:10 1993 +0000
# Node ID e83d64b26659b2cf42875bfda7af0c6bb72e69e6
# Parent  cf3f13026ff66e60ae3ae1305ed5b23ee1b44c6f
[project @ 1993-11-13 09:04:18 by jwe]

diff --git a/src/colloc.cc b/src/colloc.cc
--- a/src/colloc.cc
+++ b/src/colloc.cc
@@ -43,38 +43,38 @@ builtin_colloc_2 (const tree_constant *a
 tree_constant *
 collocation_weights (const tree_constant *args, int nargin)
 {
   tree_constant *retval = NULL_TREE_CONST;
 
   if (args[1].const_type () != tree_constant_rep::complex_scalar_constant
       && args[1].const_type () != tree_constant_rep::scalar_constant)
     {
-      message ("colloc", "first argument must be a scalar");
+      error ("colloc: first argument must be a scalar");
       return retval;
     }
 
   int ncol = NINT (args[1].double_value ());
   if (ncol < 0)
     {
-      message ("colloc", "first argument must be non-negative");
+      error ("colloc: first argument must be non-negative");
       return retval;
     }
 
   int ntot = ncol;
   int left = 0;
   int right = 0;
 
   for (int i = 2; i < nargin; i++)
     {
       if (args[i].is_defined ())
 	{
 	  if (! args[i].is_string_type ())
 	    {
-	      message ("colloc", "expecting string argument");
+	      error ("colloc: expecting string argument");
 	      return retval;
 	    }
 
 	  char *s = args[i].string_value ();
 	  if (s != (char *) NULL
 	      && (((*s == 'R' || *s == 'r') && strlen (s) == 1)
 		  || strcmp (s, "right") == 0))
 	    {
@@ -83,30 +83,33 @@ collocation_weights (const tree_constant
 	  else if (s != (char *) NULL
 		   && (((*s == 'L' || *s == 'l') && strlen (s) == 1)
 		       || strcmp (s, "left") == 0))
 	    {
 	      left = 1;
 	    }
 	  else
 	    {
-	      message ("colloc", "unrecognized argument");
+	      error ("colloc: unrecognized argument");
 	      return retval;
 	    }
 	}
       else
 	{
-	  message ("colloc", "unexpected NULL argument");
+	  error ("colloc: unexpected NULL argument");
 	  return retval;
 	}
     }
 
   ntot += left + right;
   if (ntot < 1)
-    message ("colloc", "the total number of roots must be positive");
+    {
+      error ("colloc: the total number of roots must be positive");
+      return retval;
+    }
   
   CollocWt wts (ncol, left, right);
 
   ColumnVector r = wts.roots ();
   Matrix A = wts.first ();
   Matrix B = wts.second ();
   ColumnVector q = wts.quad_weights ();
 
diff --git a/src/dassl.cc b/src/dassl.cc
--- a/src/dassl.cc
+++ b/src/dassl.cc
@@ -123,17 +123,17 @@ dassl (const tree_constant *args, int na
   if (nargin > 5)
     {
       crit_times = args[5].to_vector ();
       crit_times_set = 1;
     }
 
   if (state.capacity () != deriv.capacity ())
     {
-      message ("dassl", "x and xdot must have the same size");
+      error ("dassl: x and xdot must have the same size");
       return retval;
     }
 
   double tzero = out_times.elem (0);
 
   DAEFunc func (dassl_user_function);
   DAE dae (state, deriv, tzero, func);
 
diff --git a/src/det.cc b/src/det.cc
--- a/src/det.cc
+++ b/src/det.cc
@@ -70,19 +70,18 @@ determinant (const tree_constant& a)
       {
 	Matrix m = tmp.matrix_value ();
 	if (m.rows () == m.columns ())
 	  {
 	    int info;
 	    double rcond = 0.0;
 	    DET det = m.determinant (info, rcond);
 	    if (info == -1)
-	      message ("det",
-		       "matrix singular to machine precision, rcond = %g",
-		       rcond);
+	      error ("det: matrix singular to machine precision, rcond = %g",
+		     rcond);
 	    else
 	      {
 		double d = det.value ();
 		retval = tree_constant (d);
 	      }
 	  }
 	else
 	  gripe_square_matrix_required ("det");
@@ -92,19 +91,18 @@ determinant (const tree_constant& a)
       {
 	ComplexMatrix m = tmp.complex_matrix_value ();
 	if (m.rows () == m.columns ())
 	  {
 	    int info;
 	    double rcond = 0.0;
 	    ComplexDET det = m.determinant (info, rcond);
 	    if (info == -1)
-	      message ("det",
-		       "matrix singular to machine precision, rcond = %g",
-		       rcond);
+	      error ("det: matrix singular to machine precision, rcond = %g",
+		     rcond);
 	    else
 	      {
 		Complex c = det.value ();
 		retval = tree_constant (c);
 	      }
 	  }
 	else
 	  gripe_square_matrix_required ("det");
diff --git a/src/fsolve.cc b/src/fsolve.cc
--- a/src/fsolve.cc
+++ b/src/fsolve.cc
@@ -126,20 +126,20 @@ fsolve (const tree_constant *args, int n
   fsolve_fcn = is_valid_function (args[1], "fsolve", 1);
   if (fsolve_fcn == NULL_TREE
       || takes_correct_nargs (fsolve_fcn, 2, "fsolve", 1) != 1)
     return retval;
 
   ColumnVector x = args[2].to_vector ();
 
   if (nargin > 3)
-    message ("fsolve", "ignoring optional arguments...");
+    warning ("fsolve: ignoring optional arguments");
 
   if (nargout > 2)
-    message ("fsolve", "can't compute path output yet...");
+    warning ("fsolve: can't compute path output yet");
 
   NLFunc foo_fcn (fsolve_user_function);
   NLEqn foo (x, foo_fcn);
 
   int info;
   ColumnVector soln = foo.solve (info);
 
   info = hybrd_info_to_fsolve_info (info);
diff --git a/src/fsqp.cc b/src/fsqp.cc
--- a/src/fsqp.cc
+++ b/src/fsqp.cc
@@ -74,17 +74,17 @@ Handle all of the following:
   7. fsqp (x, phi,         llb, c, lub)
   8. fsqp (x, phi,                      nllb, g, nlub)
 
 */
 
 // Assumes that we have been given the correct number of arguments.
 
   tree_constant *retval = NULL_TREE_CONST;
-  message ("fsqp", "not implemented yet...");
+  error ("fsqp: not implemented yet");
   return retval;
 }
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -1073,18 +1073,17 @@ grab_help_text (void)
 	      break;
 	    default:
 	      goto done;
 	    }
 	}
 
       if (len > max_len)
 	{
-	  message ("grab_help_text",
-		   "buffer overflow after caching %d characters",
+	  warning ("grab_help_text: buffer overflow after caching %d chars",
 		   max_len);
 
 	  goto done;
 	}
     }
 
  done:
 
diff --git a/src/lpsolve.cc b/src/lpsolve.cc
--- a/src/lpsolve.cc
+++ b/src/lpsolve.cc
@@ -40,17 +40,17 @@ builtin_lpsolve_2 (const tree_constant *
 #endif
 
 tree_constant *
 lpsolve (const tree_constant *args, int nargin, int nargout)
 {
 // Assumes that we have been given the correct number of arguments.
 
   tree_constant *retval = NULL_TREE_CONST;
-  message ("lpsolve", "sorry, not implemented yet");
+  error ("lpsolve: not implemented yet");
   return retval;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
diff --git a/src/quad.cc b/src/quad.cc
--- a/src/quad.cc
+++ b/src/quad.cc
@@ -121,32 +121,32 @@ do_quad (const tree_constant *args, int 
   Vector tol (2);
   Vector sing;
   int have_sing = 0;
   switch (nargin)
     {
     case 6:
       if (indefinite)
 	{
-	  message ("quad", "sorry, singularities not allowed on infinite intervals");
+	  error("quad: singularities not allowed on infinite intervals");
 	  return retval;
 	}
       have_sing = 1;
       sing = args[5].to_vector ();
     case 5:
       tol = args[4].to_vector ();
       switch (tol.capacity ())
 	{
 	case 2:
 	  reltol = tol.elem (1);
 	case 1:
 	  abstol = tol.elem (0);
 	  break;
 	default:
-	  message ("quad", "expecting tol to contain no more than two values");
+	  error ("quad: expecting tol to contain no more than two values");
 	  return retval;
 	}
     case 4:
       if (indefinite)
 	{
 	  IndefQuad iq (quad_user_function, bound, indef_type, abstol, reltol);
 	  val = iq.integrate (ier, nfun, abserr);
 	}
diff --git a/src/rand.cc b/src/rand.cc
--- a/src/rand.cc
+++ b/src/rand.cc
@@ -163,17 +163,17 @@ rand_internal (const tree_constant *args
 	  else if (strcmp (s_arg, "uniform") == 0)
 	    current_distribution = uniform;
 	  else if (strcmp (s_arg, "normal") == 0)
 	    current_distribution = normal;
 	  else
 	    {
 	      delete [] retval;
 	      retval = NULL_TREE_CONST;
-	      message ("rand", "unrecognized string argument");
+	      error ("rand: unrecognized string argument");
 	    }
 	  break;
 	case tree_constant_rep::scalar_constant:
 	case tree_constant_rep::complex_scalar_constant:
 	  n = NINT (args[1].double_value ());
 	  m = n;
 	  goto gen_matrix;
 	case tree_constant_rep::range_constant:
@@ -243,17 +243,17 @@ rand_internal (const tree_constant *args
 		panic_impossible ();
 		break;
 	      }
 	  }
 
       retval[0] = tree_constant (rand_mat);
     }
   else
-    message ("rand", "invalid negative argument");
+    error ("rand: invalid negative argument");
 
   return retval;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
