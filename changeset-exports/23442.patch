# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1493184050 14400
#      Wed Apr 26 01:20:50 2017 -0400
# Node ID 53f5f8231c371de425f03801c946860f245be94e
# Parent  6bd180614330b6876ddde2269da1dfe8487f73cf
allow most header files to be compiled separately

* build-aux/mk-opts.pl: Include <limits> in generated header files.

* file-io.h, ls-hdf5.h, ls-mat-ascii.h, ls-mat4.h, ls-mat5.h,
ls-oct-binary.h, ls-oct-text.h, ls-utils.h, mxarray.in.h,
octave-link.h, octave-preserve-stream-state.h, pt-check.h,
pt-tm-const.h, DAERTFunc.h, aepbalance.h, eigs-base.h,
Sparse-diag-op-defs.h, Sparse-op-defs.h, Sparse-perm-op-defs.h,
action-container.h, oct-rl-edit.h, url-transfer.h:
Include additional headers or use forward declarations to allow
successful compilation of the file by itself.

diff --git a/build-aux/mk-opts.pl b/build-aux/mk-opts.pl
--- a/build-aux/mk-opts.pl
+++ b/build-aux/mk-opts.pl
@@ -372,16 +372,18 @@ sub emit_opt_class_header
 // Generated automatically from $DEFN_FILE.
 
 #if ! defined (octave_${CLASS_NAME}_h)
 #define octave_${CLASS_NAME}_h 1
 
 #include <cfloat>
 #include <cmath>
 
+#include <limits>
+
 $INCLUDE
 
 class
 $CLASS_NAME
 {
 public:
 
   $CLASS_NAME (void)
diff --git a/libinterp/corefcn/file-io.h b/libinterp/corefcn/file-io.h
--- a/libinterp/corefcn/file-io.h
+++ b/libinterp/corefcn/file-io.h
@@ -22,16 +22,18 @@ along with Octave; see the file COPYING.
 
 // Written by John C. Campbell <jcc@bevo.che.wisc.edu>
 
 #if ! defined (octave_file_io_h)
 #define octave_file_io_h 1
 
 #include "octave-config.h"
 
+#include <string>
+
 extern OCTINTERP_API void initialize_file_io (void);
 
 extern OCTINTERP_API void close_files (void);
 
 extern OCTINTERP_API void mark_for_deletion (const std::string&);
 
 extern OCTINTERP_API void cleanup_tmp_files (void);
 
diff --git a/libinterp/corefcn/ls-hdf5.h b/libinterp/corefcn/ls-hdf5.h
--- a/libinterp/corefcn/ls-hdf5.h
+++ b/libinterp/corefcn/ls-hdf5.h
@@ -20,17 +20,20 @@ along with Octave; see the file COPYING.
 
 */
 
 #if ! defined (octave_ls_hdf5_h)
 #define octave_ls_hdf5_h 1
 
 #include "octave-config.h"
 
+#include <iostream>
+
 #include "oct-hdf5-types.h"
+#include "ov.h"
 
 // first, we need to define our own dummy stream subclass, since
 // HDF5 needs to do its own file i/o
 
 // hdf5_fstreambase is used for both input and output streams, modeled
 // on the fstreambase class in <fstream.h>
 
 class hdf5_fstreambase : virtual public std::ios
diff --git a/libinterp/corefcn/ls-mat-ascii.h b/libinterp/corefcn/ls-mat-ascii.h
--- a/libinterp/corefcn/ls-mat-ascii.h
+++ b/libinterp/corefcn/ls-mat-ascii.h
@@ -20,16 +20,21 @@ along with Octave; see the file COPYING.
 
 */
 
 #if ! defined (octave_ls_mat_ascii_h)
 #define octave_ls_mat_ascii_h 1
 
 #include "octave-config.h"
 
+#include <iosfwd>
+#include <string>
+
+class octave_value;
+
 extern std::string
 read_mat_ascii_data (std::istream& is, const std::string& filename,
                      octave_value& tc);
 
 extern bool
 save_mat_ascii_data (std::ostream& os, const octave_value& val_arg,
                      int precision, bool tabs = false);
 
diff --git a/libinterp/corefcn/ls-mat4.h b/libinterp/corefcn/ls-mat4.h
--- a/libinterp/corefcn/ls-mat4.h
+++ b/libinterp/corefcn/ls-mat4.h
@@ -20,16 +20,22 @@ along with Octave; see the file COPYING.
 
 */
 
 #if ! defined (octave_ls_mat4_h)
 #define octave_ls_mat4_h 1
 
 #include "octave-config.h"
 
+#include <iosfwd>
+
+#include "mach-info.h"
+
+class octave_value;
+
 extern octave::mach_info::float_format
 mopt_digit_to_float_format (int mach);
 
 extern int
 float_format_to_mopt_digit (octave::mach_info::float_format flt_fmt);
 
 extern int
 read_mat_file_header (std::istream& is, bool& swap, int32_t& mopt,
diff --git a/libinterp/corefcn/ls-mat5.h b/libinterp/corefcn/ls-mat5.h
--- a/libinterp/corefcn/ls-mat5.h
+++ b/libinterp/corefcn/ls-mat5.h
@@ -20,16 +20,21 @@ along with Octave; see the file COPYING.
 
 */
 
 #if ! defined (octave_ls_mat5_h)
 #define octave_ls_mat5_h 1
 
 #include "octave-config.h"
 
+#include <iosfwd>
+#include <string>
+
+class octave_value;
+
 enum mat5_data_type
 {
   miINT8 = 1,                 // 8 bit signed
   miUINT8,                    // 8 bit unsigned
   miINT16,                    // 16 bit signed
   miUINT16,                   // 16 bit unsigned
   miINT32,                    // 32 bit signed
   miUINT32,                   // 32 bit unsigned
diff --git a/libinterp/corefcn/ls-oct-binary.h b/libinterp/corefcn/ls-oct-binary.h
--- a/libinterp/corefcn/ls-oct-binary.h
+++ b/libinterp/corefcn/ls-oct-binary.h
@@ -20,16 +20,22 @@ along with Octave; see the file COPYING.
 
 */
 
 #if ! defined (octave_ls_oct_binary_h)
 #define octave_ls_oct_binary_h 1
 
 #include "octave-config.h"
 
+#include <iosfwd>
+
+#include "mach-info.h"
+
+class octave_value;
+
 extern OCTINTERP_API bool
 save_binary_data (std::ostream& os, const octave_value& tc,
                   const std::string& name, const std::string& doc,
                   bool mark_as_global, bool save_as_floats);
 
 extern OCTINTERP_API std::string
 read_binary_data (std::istream& is, bool swap,
                   octave::mach_info::float_format fmt,
diff --git a/libinterp/corefcn/ls-oct-text.h b/libinterp/corefcn/ls-oct-text.h
--- a/libinterp/corefcn/ls-oct-text.h
+++ b/libinterp/corefcn/ls-oct-text.h
@@ -29,16 +29,18 @@ along with Octave; see the file COPYING.
 
 #include <sstream>
 #include <string>
 
 #include "str-vec.h"
 
 #include "ls-ascii-helper.h"
 
+class octave_value;
+
 // Flag for cell elements
 #define CELL_ELT_TAG "<cell-element>"
 
 // Used when converting Inf to something that gnuplot can read.
 
 #if ! defined (OCT_RBV)
 #  define OCT_RBV (std::numeric_limits<double>::max () / 100.0)
 #endif
diff --git a/libinterp/corefcn/ls-utils.h b/libinterp/corefcn/ls-utils.h
--- a/libinterp/corefcn/ls-utils.h
+++ b/libinterp/corefcn/ls-utils.h
@@ -20,15 +20,17 @@ along with Octave; see the file COPYING.
 
 */
 
 #if ! defined (octave_ls_utils_h)
 #define octave_ls_utils_h 1
 
 #include "octave-config.h"
 
+#include "data-conv.h"
+
 extern save_type
 get_save_type (double max_val, double min_val);
 
 extern save_type
 get_save_type (float max_val, float min_val);
 
 #endif
diff --git a/libinterp/corefcn/mxarray.in.h b/libinterp/corefcn/mxarray.in.h
--- a/libinterp/corefcn/mxarray.in.h
+++ b/libinterp/corefcn/mxarray.in.h
@@ -95,16 +95,17 @@ typedef %OCTAVE_IDX_TYPE% mwIndex;
 typedef %OCTAVE_IDX_TYPE% mwSignedIndex;
 
 #if ! defined (MXARRAY_TYPEDEFS_ONLY)
 
 #include <cstring>
 #include "error.h"
 
 class octave_value;
+class dim_vector;
 
 #define DO_MUTABLE_METHOD(RET_T, METHOD_CALL)   \
   RET_T retval = rep->METHOD_CALL;              \
                                                 \
   if (rep->mutation_needed ())                  \
     {                                           \
       maybe_mutate ();                          \
       retval = rep->METHOD_CALL;                \
diff --git a/libinterp/corefcn/octave-link.h b/libinterp/corefcn/octave-link.h
--- a/libinterp/corefcn/octave-link.h
+++ b/libinterp/corefcn/octave-link.h
@@ -22,16 +22,17 @@ along with Octave; see the file COPYING.
 
 */
 
 #if ! defined (octave_octave_link_h)
 #define octave_octave_link_h 1
 
 #include "octave-config.h"
 
+#include <list>
 #include <string>
 
 #include "oct-mutex.h"
 
 #include "event-queue.h"
 
 class string_vector;
 class workspace_element;
diff --git a/libinterp/corefcn/octave-preserve-stream-state.h b/libinterp/corefcn/octave-preserve-stream-state.h
--- a/libinterp/corefcn/octave-preserve-stream-state.h
+++ b/libinterp/corefcn/octave-preserve-stream-state.h
@@ -20,16 +20,18 @@ along with Octave; see the file COPYING.
 
 */
 
 #if ! defined (octave_octave_preserve_stream_state_h)
 #define octave_octave_preserve_stream_state_h 1
 
 #include "octave-config.h"
 
+#include <ios>
+
 class
 octave_preserve_stream_state
 {
 public:
 
   octave_preserve_stream_state (std::ios& s)
     : stream (s), oflags (s.flags ()), oprecision (s.precision ()),
       owidth (s.width ()), ofill (s.fill ())
diff --git a/libinterp/parse-tree/pt-check.h b/libinterp/parse-tree/pt-check.h
--- a/libinterp/parse-tree/pt-check.h
+++ b/libinterp/parse-tree/pt-check.h
@@ -20,16 +20,18 @@ along with Octave; see the file COPYING.
 
 */
 
 #if ! defined (octave_pt_check_h)
 #define octave_pt_check_h 1
 
 #include "octave-config.h"
 
+#include <string>
+
 #include "pt-walk.h"
 
 namespace octave
 {
   class tree_decl_command;
 
   // How to check the semantics of the code that the parse trees represent.
 
diff --git a/libinterp/parse-tree/pt-tm-const.h b/libinterp/parse-tree/pt-tm-const.h
--- a/libinterp/parse-tree/pt-tm-const.h
+++ b/libinterp/parse-tree/pt-tm-const.h
@@ -31,20 +31,22 @@ along with Octave; see the file COPYING.
 #include "Sparse.h"
 #include "base-list.h"
 
 #include "data.h"
 #include "dim-vector.h"
 #include "oct-map.h"
 #include "ov.h"
 #include "ovl.h"
+#include "pt-arg-list.h"
 
 namespace octave
 {
   class tree_evaluator;
+  class tree_matrix;
 
   // General matrices.  This list type is much more work to handle than
   // constant matrices, but it allows us to construct matrices from
   // other matrices, variables, and functions.
 
   // But first, some internal classes that make our job much easier.
 
   class
diff --git a/liboctave/numeric/DAERTFunc.h b/liboctave/numeric/DAERTFunc.h
--- a/liboctave/numeric/DAERTFunc.h
+++ b/liboctave/numeric/DAERTFunc.h
@@ -20,16 +20,17 @@ along with Octave; see the file COPYING.
 
 */
 
 #if ! defined (octave_DAERTFunc_h)
 #define octave_DAERTFunc_h 1
 
 #include "octave-config.h"
 
+#include "DAEFunc.h"
 #include "dMatrix.h"
 
 class
 DAERTFunc : public DAEFunc
 {
 public:
 
   typedef ColumnVector (*DAERTConstrFunc) (const ColumnVector& x, double t);
diff --git a/liboctave/numeric/aepbalance.h b/liboctave/numeric/aepbalance.h
--- a/liboctave/numeric/aepbalance.h
+++ b/liboctave/numeric/aepbalance.h
@@ -21,16 +21,18 @@ along with Octave; see the file COPYING.
 
 */
 
 #if ! defined (octave_aepbalance_h)
 #define octave_aepbalance_h 1
 
 #include "octave-config.h"
 
+#include <algorithm>
+
 namespace octave
 {
   namespace math
   {
     template <typename MT>
     class aepbalance
     {
     public:
diff --git a/liboctave/numeric/eigs-base.h b/liboctave/numeric/eigs-base.h
--- a/liboctave/numeric/eigs-base.h
+++ b/liboctave/numeric/eigs-base.h
@@ -22,16 +22,18 @@ along with Octave; see the file COPYING.
 
 #if ! defined (octave_eigs_base_h)
 #define octave_eigs_base_h 1
 
 #include "octave-config.h"
 
 #include <iosfwd>
 
+#include "oct-cmplx.h"
+
 class ColumnVector;
 class ComplexColumnVector;
 class Matrix;
 class ComplexMatrix;
 
 typedef ColumnVector (*EigsFunc) (const ColumnVector& x, int& eigs_error);
 
 typedef ComplexColumnVector (*EigsComplexFunc) (const ComplexColumnVector& x,
diff --git a/liboctave/operators/Sparse-diag-op-defs.h b/liboctave/operators/Sparse-diag-op-defs.h
--- a/liboctave/operators/Sparse-diag-op-defs.h
+++ b/liboctave/operators/Sparse-diag-op-defs.h
@@ -20,16 +20,18 @@ along with Octave; see the file COPYING.
 
 */
 
 #if ! defined (octave_Sparse_diag_op_defs_h)
 #define octave_Sparse_diag_op_defs_h 1
 
 #include "octave-config.h"
 
+#include "lo-array-errwarn.h"
+
 // Matrix multiplication
 
 template <typename RT, typename DM, typename SM>
 RT do_mul_dm_sm (const DM& d, const SM& a)
 {
   const octave_idx_type nr = d.rows ();
   const octave_idx_type nc = d.cols ();
 
diff --git a/liboctave/operators/Sparse-op-defs.h b/liboctave/operators/Sparse-op-defs.h
--- a/liboctave/operators/Sparse-op-defs.h
+++ b/liboctave/operators/Sparse-op-defs.h
@@ -23,18 +23,19 @@ along with Octave; see the file COPYING.
 */
 
 #if ! defined (octave_Sparse_op_defs_h)
 #define octave_Sparse_op_defs_h 1
 
 #include "octave-config.h"
 
 #include "Array-util.h"
+#include "lo-array-errwarn.h"
+#include "mx-inlines.cc"
 #include "oct-locbuf.h"
-#include "mx-inlines.cc"
 
 // sparse matrix by scalar operations.
 
 #define SPARSE_SMS_BIN_OP_1(R, F, OP, M, S)                             \
   R                                                                     \
   F (const M& m, const S& s)                                            \
   {                                                                     \
     octave_idx_type nr = m.rows ();                                     \
diff --git a/liboctave/operators/Sparse-perm-op-defs.h b/liboctave/operators/Sparse-perm-op-defs.h
--- a/liboctave/operators/Sparse-perm-op-defs.h
+++ b/liboctave/operators/Sparse-perm-op-defs.h
@@ -20,16 +20,22 @@ along with Octave; see the file COPYING.
 
 */
 
 #if ! defined (octave_Sparse_perm_op_defs_h)
 #define octave_Sparse_perm_op_defs_h 1
 
 #include "octave-config.h"
 
+#include "PermMatrix.h"
+#include "lo-array-errwarn.h"
+#include "oct-locbuf.h"
+#include "oct-sort.h"
+#include "quit.h"
+
 // Matrix multiplication
 
 template <typename SM>
 SM octinternal_do_mul_colpm_sm (const octave_idx_type *pcol, const SM& a)
 // Relabel the rows according to pcol.
 {
   const octave_idx_type nr = a.rows ();
   const octave_idx_type nc = a.cols ();
diff --git a/liboctave/util/action-container.h b/liboctave/util/action-container.h
--- a/liboctave/util/action-container.h
+++ b/liboctave/util/action-container.h
@@ -21,16 +21,18 @@ along with Octave; see the file COPYING.
 
 */
 
 #if ! defined (octave_action_container_h)
 #define octave_action_container_h 1
 
 #include "octave-config.h"
 
+#include <cstddef>
+
 // This class allows registering actions in a list for later
 // execution, either explicitly or when the container goes out of
 // scope.
 
 // FIXME: is there a better name for this class?
 
 class
 action_container
diff --git a/liboctave/util/oct-rl-edit.h b/liboctave/util/oct-rl-edit.h
--- a/liboctave/util/oct-rl-edit.h
+++ b/liboctave/util/oct-rl-edit.h
@@ -20,16 +20,22 @@ along with Octave; see the file COPYING.
 
 */
 
 #if ! defined (octave_oct_rl_edit_h)
 #define octave_oct_rl_edit_h 1
 
 #include "octave-config.h"
 
+#if defined (__cplusplus)
+#  include <cstdio>
+#else
+#  include <stdio.h>
+#endif
+
 typedef int (*rl_startup_hook_fcn_ptr) (void);
 
 typedef int (*rl_pre_input_hook_fcn_ptr) (void);
 
 typedef int (*rl_event_hook_fcn_ptr) (void);
 
 typedef int (*rl_fcn_ptr) (int, int);
 
diff --git a/liboctave/util/url-transfer.h b/liboctave/util/url-transfer.h
--- a/liboctave/util/url-transfer.h
+++ b/liboctave/util/url-transfer.h
@@ -28,16 +28,20 @@ along with Octave; see the file COPYING.
 #if ! defined (octave_url_transfer_h)
 #define octave_url_transfer_h 1
 
 #include "octave-config.h"
 
 #include <iosfwd>
 #include <string>
 
+#include "str-vec.h"
+
+template <typename T> class Array;
+
 namespace octave
 {
   class
   OCTAVE_API
   base_url_transfer
   {
   private:
 
