# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1302820857 -7200
#      Fri Apr 15 00:40:57 2011 +0200
# Node ID e5156fd235f16cd5a0bf7d91b14ec2b577a4a23a
# Parent  604c37e8f38884ddfb408d61050f558842a64732
Added current folder address bar.

diff --git a/gui//src/FilesDockWidget.cpp b/gui//src/FilesDockWidget.cpp
--- a/gui//src/FilesDockWidget.cpp
+++ b/gui//src/FilesDockWidget.cpp
@@ -1,11 +1,12 @@
 #include "FilesDockWidget.h"
 
 #include <QApplication>
+#include <QFileInfo>
 
 FilesDockWidget::FilesDockWidget(QWidget *parent)
   : QDockWidget(parent) {
     setObjectName("FilesDockWidget");
     setWindowTitle("Current Folder");
     setWidget(new QWidget(this));
 
     // Create a toolbar
@@ -14,18 +15,20 @@ FilesDockWidget::FilesDockWidget(QWidget
     m_navigationToolBar->setMovable(false);
     m_navigationToolBar->setIconSize(QSize (20,20));
 
     // Add a button to the toolbar with the QT standard icon for up-directory
     // TODO: Maybe change this to be an up-directory icon that is OS specific???
     QStyle *style = QApplication::style();
     m_directoryIcon = style->standardIcon(QStyle::SP_FileDialogToParent);
     m_directoryUpAction = new QAction(m_directoryIcon, "", m_navigationToolBar);
+    m_currentDirectory = new QLineEdit(m_navigationToolBar);
 
     m_navigationToolBar->addAction(m_directoryUpAction);
+    m_navigationToolBar->addWidget(m_currentDirectory);
     connect(m_directoryUpAction, SIGNAL(triggered()), this, SLOT(onUpDirectory()));
 
     // TODO: Add other buttons for creating directories
 
     // Create the QFileSystemModel starting in the home directory
     QString homePath = QDir::homePath();
     // TODO: This should occur after Octave has been initialized and the startup directory of Octave is established
 
@@ -35,40 +38,61 @@ FilesDockWidget::FilesDockWidget(QWidget
 
     // Attach the model to the QTreeView and set the root index
     m_fileTreeView = new QTreeView(widget());
     m_fileTreeView->setModel(m_fileSystemModel);
     m_fileTreeView->setRootIndex(rootPathIndex);
     m_fileTreeView->setSortingEnabled(true);
     m_fileTreeView->setAlternatingRowColors(true);
     m_fileTreeView->setAnimated(true);
+    setCurrentDirectory(m_fileSystemModel->fileInfo(rootPathIndex).absoluteFilePath());
 
     connect(m_fileTreeView, SIGNAL(doubleClicked(const QModelIndex &)), this, SLOT(itemDoubleClicked(const QModelIndex &)));
 
     // Layout the widgets vertically with the toolbar on top
     QVBoxLayout *layout = new QVBoxLayout();
     layout->setSpacing(0);
     layout->addWidget(m_navigationToolBar);
     layout->addWidget(m_fileTreeView);
     widget()->setLayout(layout);
     // TODO: Add right-click contextual menus for copying, pasting, deleting files (and others)
+
+    connect(m_currentDirectory, SIGNAL(returnPressed()), this, SLOT(currentDirectoryEntered()));
+    //m_currentDirectory->setEnabled(false);
 }
 
 void FilesDockWidget::itemDoubleClicked(const QModelIndex &index)
 {
     QFileInfo fileInfo = m_fileSystemModel->fileInfo(index);
     if (fileInfo.isDir()) {
         m_fileSystemModel->setRootPath(fileInfo.absolutePath());
         m_fileTreeView->setRootIndex(index);
+        setCurrentDirectory(m_fileSystemModel->fileInfo(index).absoluteFilePath());
     } else {
         QFileInfo fileInfo = m_fileSystemModel->fileInfo(index);
         emit openFile(fileInfo.filePath());
     }
 }
 
-void FilesDockWidget::onUpDirectory(void)
-{
-    // Move up an index node
+void FilesDockWidget::setCurrentDirectory(QString currentDirectory) {
+    m_currentDirectory->setText(currentDirectory);
+}
+
+void FilesDockWidget::onUpDirectory(void) {
+    // Move up an inm_fileTreeView->setRootIndex(m_fileSystemModel->index(dir.absolutePath()));dex node
     QDir dir = QDir(m_fileSystemModel->filePath(m_fileTreeView->rootIndex()));
     dir.cdUp();
+    m_fileSystemModel->setRootPath(dir.absolutePath());
     m_fileTreeView->setRootIndex(m_fileSystemModel->index(dir.absolutePath()));
+    setCurrentDirectory(dir.absolutePath());
 }
 
+void FilesDockWidget::currentDirectoryEntered() {
+    QFileInfo fileInfo(m_currentDirectory->text());
+    if (fileInfo.isDir()) {
+        m_fileTreeView->setRootIndex(m_fileSystemModel->index(fileInfo.absolutePath()));
+        m_fileSystemModel->setRootPath(fileInfo.absolutePath());
+        setCurrentDirectory(fileInfo.absoluteFilePath());
+    } else {
+        if(QFile::exists(fileInfo.absoluteFilePath()))
+            emit openFile(fileInfo.absoluteFilePath());
+    }
+}
diff --git a/gui//src/FilesDockWidget.h b/gui//src/FilesDockWidget.h
--- a/gui//src/FilesDockWidget.h
+++ b/gui//src/FilesDockWidget.h
@@ -39,30 +39,33 @@
 #undef PACKAGE_STRING
 #undef PACKAGE_TARNAME
 #undef PACKAGE_VERSION
 #include "octave/config.h"
 #include "octave/octave.h"
 #include "octave/str-vec.h"
 #include "octave/cmd-hist.h"
 #include <QDockWidget>
+#include <QLineEdit>
 
 class FilesDockWidget : public QDockWidget {
     Q_OBJECT
 public :
     FilesDockWidget(QWidget *parent = 0);
-    void setDirectory(QString dir);
-
 public slots:
     /** Slot for handling a change in directory via double click. */
     void itemDoubleClicked(const QModelIndex &index);
 
     /** Slot for handling the up-directory button in the toolbar. */
     void onUpDirectory();
 
+    void setCurrentDirectory(QString currentDirectory);
+
+    void currentDirectoryEntered();
+
 signals:
     void openFile(QString fileName);
 
 private:
     // TODO: Add toolbar with buttons for navigating the path, creating dirs, etc
 
     /** Toolbar for file and directory manipulation. */
     QToolBar *m_navigationToolBar;
@@ -72,11 +75,12 @@ private:
     QAction *m_directoryUpAction;
     QToolButton *upDirectoryButton;
 
     /** The file system model. */
     QFileSystemModel *m_fileSystemModel;
 
     /** The file system view. */
     QTreeView *m_fileTreeView;
+    QLineEdit *m_currentDirectory;
 };
 
 #endif // FILESDOCKWIDGET_H
diff --git a/gui//src/MainWindow.h b/gui//src/MainWindow.h
--- a/gui//src/MainWindow.h
+++ b/gui//src/MainWindow.h
@@ -152,17 +152,17 @@ public:
           m_mainWindow(mainWindow) {
     }
 
 protected:
     void run() {
         while(m_mainWindow->isRunning()) {
 
         // Get a full variable list.
-        QList<SymbolRecord> symbolTable = OctaveLink::instance()->variableInfoList();
+        QList<SymbolRecord> symbolTable = OctaveLink::instance()->workspace();
         if(symbolTable.size()) {
             m_mainWindow->variablesDockWidget()->setVariablesList(symbolTable);
         }
 
         // Check whether any requested variables have been returned.
         QList<OctaveLink::RequestedVariable> reqVars
                 = OctaveLink::instance()->requestedVariables();
 
diff --git a/gui//src/OctaveLink.cpp b/gui//src/OctaveLink.cpp
--- a/gui//src/OctaveLink.cpp
+++ b/gui//src/OctaveLink.cpp
@@ -68,17 +68,17 @@ OctaveLink::~OctaveLink() {
 
 /*******************************************************************************
  *******************************************************************************
  * CLIENT SIDE FUNCTIONS
  *******************************************************************************
  *******************************************************************************/
 
 //*************************************************************************
-QList<SymbolRecord> OctaveLink::variableInfoList() {
+QList<SymbolRecord> OctaveLink::workspace() {
     QMutexLocker mutexLocker(&m_internalAccessMutex);
     return m_variableSymbolTableList;
 }
 
 
 //*************************************************************************
 QList<OctaveLink::RequestedVariable> OctaveLink::requestedVariables() {
     QMutexLocker mutexLocker(&m_internalAccessMutex);
diff --git a/gui//src/OctaveLink.h b/gui//src/OctaveLink.h
--- a/gui//src/OctaveLink.h
+++ b/gui//src/OctaveLink.h
@@ -170,17 +170,17 @@ public:
 
     /** TODO: Describe. */
     int	modifyBreakpoint(BreakPoint old_bp_info, BreakPoint new_bp_info);
 
     /** TODO: Describe. */
     int	setBreakpointAction(BreakPointAction action);
 
     /** Variable related methods. */
-    QList<SymbolRecord> variableInfoList(void);
+    QList<SymbolRecord> workspace(void);
 
     /** TODO: Describe. */
     QList<RequestedVariable> requestedVariables(void);
 
     /** TODO: Describe. */
     int	setRequestedVariableNames(QList<QString> variableNames);
 
     /**
