# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1238999629 -7200
#      Mon Apr 06 08:33:49 2009 +0200
# Node ID 8be05554bbd0b5a3d1185291cbe31ea8a3102047
# Parent  38c3a0f8c6d0c58909700c48814d9d39f4f65a7d
optimize vech

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2009-04-06  Jaroslav Hajek  <highegg@gmail.com>
+
+	* linear-algebra/vech.m: Optimize.
+
 2009-04-06  Jaroslav Hajek  <highegg@gmail.com>
 
 	* special-matrix/toeplitz.m: Optimize.
 
 2008-04-03  David Bateman  <dbateman@free.fr>
 
 	* plot/__scatter__.m: correct indexing of cdata.x
 
diff --git a/scripts/linear-algebra/vech.m b/scripts/linear-algebra/vech.m
--- a/scripts/linear-algebra/vech.m
+++ b/scripts/linear-algebra/vech.m
@@ -1,10 +1,11 @@
 ## Copyright (C) 1995, 1996, 1997, 1999, 2000, 2002, 2005, 2006, 2007, 2008
 ##               Kurt Hornik
+## Copyright (C) 2009 VZLU Prague
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 3 of the License, or (at
 ## your option) any later version.
 ##
@@ -36,26 +37,19 @@ function v = vech (x)
   if (nargin != 1)
     print_usage ();
   endif
 
   if (! issquare (x))
     error ("vech: x must be square");
   endif
 
-  ## This should be quicker than having an inner `for' loop as well.
-  ## Ideally, vech should be written in C++.
   n = rows (x);
-  v = zeros ((n+1)*n/2, 1);
-  count = 0;
-  for j = 1 : n
-    i = j : n;
-    v (count + i) = x (i, j);
-    count = count + n - j;
-  endfor
+  slices = cellslices (x(:), (1:n) + n*(0:n-1), n*(1:n));
+  v = vertcat (slices{:});
 
 endfunction
 
 %!assert(all (vech ([1, 2, 3; 4, 5, 6; 7, 8, 9]) == [1; 4; 7; 5; 8; 9]));
 
 %!error vech ();
 
 %!error vech (1, 2);
