# HG changeset patch
# User jwe
# Date 773506243 0
#      Wed Jul 06 14:50:43 1994 +0000
# Node ID 2d7f9d72170c5dafda44f78234923845a42b4f71
# Parent  101e1d4f2395ff9ceaa28ed4efc65281403a2ef6
[project @ 1994-07-06 14:50:43 by jwe]

diff --git a/src/pt-plot.cc b/src/pt-plot.cc
--- a/src/pt-plot.cc
+++ b/src/pt-plot.cc
@@ -27,16 +27,17 @@ Software Foundation, 675 Mass Ave, Cambr
 
 #include <iostream.h>
 #include <fstream.h>
 #include <strstream.h>
 
 #include "error.h"
 #include "utils.h"
 #include "tree.h"
+#include "tree-const.h"
 #include "tree-plot.h"
 
 extern "C"
 {
   char *tilde_expand (char *s); /* From readline's tilde.c */
 }
 
 // The number of lines we\'ve plotted so far.
@@ -134,17 +135,17 @@ tree_plot_command::eval (int print)
 	warning ("can't specify new plot ranges with `replot' or while\
  hold is on");
     }
 
   if (error_state)
     return retval;
 
   tree_subplot_list *ptr = plot_list;
-  for ( ; ptr != NULL_TREE ; ptr = ptr->next_elem ())
+  for ( ; ptr != (tree_subplot_list *) NULL; ptr = ptr->next_elem ())
     {
       plot_line_count++;
 
       if (ptr != plot_list)
 	plot_buf << ",\\\n  ";
 
       int status = ptr->print (ndim, plot_buf);
       if (status < 0)
@@ -173,62 +174,63 @@ tree_plot_command::eval (int print)
       delete [] message;
     }
 
   return retval;
 }
 
 tree_subplot_list::tree_subplot_list (void)
 {
-  plot_data = NULL_TREE;
+  plot_data = (tree_expression *) NULL;
   using = (tree_subplot_using *) NULL;
-  title = NULL_TREE;
+  title = (tree_expression *) NULL;
   style = (tree_subplot_style *) NULL;
   next = (tree_subplot_list *) NULL;
 }
 
-tree_subplot_list::tree_subplot_list (tree *data)
+tree_subplot_list::tree_subplot_list (tree_expression *data)
 {
   plot_data = data;
   using = (tree_subplot_using *) NULL;
-  title = NULL_TREE;
+  title = (tree_expression *) NULL;
   style = (tree_subplot_style *) NULL;
   next = (tree_subplot_list *) NULL;
 }
 
 tree_subplot_list::tree_subplot_list (tree_subplot_list *t)
 {
   plot_data = t->plot_data;
   using = t->using;
   title = t->title;
   style = t->style;
   next = t->next;
 }
 
-tree_subplot_list::tree_subplot_list (tree_subplot_using *u, tree *t,
+tree_subplot_list::tree_subplot_list (tree_subplot_using *u,
+				      tree_expression *t,
 				      tree_subplot_style *s)
 {
-  plot_data = NULL_TREE;
+  plot_data = (tree_expression *) NULL;
   using = u;
   title = t;
   style = s;
   next = (tree_subplot_list *) NULL;
 }
 
 tree_subplot_list::~tree_subplot_list (void)
 {
   delete plot_data;
   delete using;
   delete title;
   delete style;
   delete next;
 }
 
 tree_subplot_list *
-tree_subplot_list::set_data (tree *data)
+tree_subplot_list::set_data (tree_expression *data)
 {
   plot_data = data;
   return this;
 }
 
 tree_subplot_list *
 tree_subplot_list::chain (tree_subplot_list *t)
 {
@@ -265,17 +267,17 @@ tree_subplot_list::eval (int print)
 {
   return plot_data->eval (0);
 }
 
 int
 tree_subplot_list::print (int ndim, ostrstream& plot_buf)
 {
   int nc = 0;
-  if (plot_data != NULL_TREE)
+  if (plot_data != (tree_expression *) NULL)
     {
       tree_constant data = plot_data->eval (0);
       if (! error_state && data.is_defined ())
 	{
 	  char *file = (char *) NULL;
 	  if (data.is_string_type ())
 	    {
 	      file = tilde_expand (data.string_value ());
@@ -328,17 +330,17 @@ tree_subplot_list::print (int ndim, ostr
 
   if (using != (tree_subplot_using *) NULL)
     {
       int status = using->print (ndim, nc, plot_buf);
       if (status < 0)
 	return -1;
     }
 
-  if (title != NULL_TREE)
+  if (title != (tree_expression *) NULL)
     {
       tree_constant tmp = title->eval (0);
       if (! error_state && tmp.is_string_type ())
 	plot_buf << " title " << '"' << tmp.string_value () << '"';
       else
 	{
 	  warning ("line title must be a string");
 	  plot_buf << " title " << '"' << "line " << plot_line_count << '"';
@@ -419,21 +421,21 @@ tree_plot_limits::print (int ndim, ostrs
     }
 
   if (ndim == 3 && z_range != (tree_plot_range *) NULL)
     z_range->print (plot_buf);
 }
 
 tree_plot_range::tree_plot_range (void)
 {
-  lower = NULL_TREE;
-  upper = NULL_TREE;
+  lower = (tree_expression *) NULL;
+  upper = (tree_expression *) NULL;
 }
 
-tree_plot_range::tree_plot_range (tree *l, tree *u)
+tree_plot_range::tree_plot_range (tree_expression *l, tree_expression *u)
 {
   lower = l;
   upper = u;
 }
 
 tree_plot_range::~tree_plot_range (void)
 {
   delete lower;
@@ -447,34 +449,34 @@ tree_plot_range::eval (int print)
   return retval;
 }
 
 void
 tree_plot_range::print (ostrstream& plot_buf)
 {
   plot_buf << " [";
 
-  if (lower != NULL_TREE)
+  if (lower != (tree_expression *) NULL)
     {
       tree_constant lower_val = lower->eval (0);
       if (error_state)
 	{
 	  ::error ("evaluating lower bound of plot range");
 	  return;
 	}
       else
 	{
 	  double lo = lower_val.to_scalar ();
 	  plot_buf << lo;
 	}
     }
 
   plot_buf << ":";
 
-  if (upper != NULL_TREE)
+  if (upper != (tree_expression *) NULL)
     {
       tree_constant upper_val = upper->eval (0);
       if (error_state)
 	{
 	  ::error ("evaluating upper bound of plot range");
 	  return;
 	}
       else
@@ -485,47 +487,47 @@ tree_plot_range::print (ostrstream& plot
     }
 
   plot_buf << "]";
 }
 
 tree_subplot_using::tree_subplot_using (void)
 {
   qualifier_count = 0;
-  x[0] = NULL_TREE;
-  x[1] = NULL_TREE;
-  x[2] = NULL_TREE;
-  x[3] = NULL_TREE;
-  scanf_fmt = NULL_TREE;
+  x[0] = (tree_expression *) NULL;
+  x[1] = (tree_expression *) NULL;
+  x[2] = (tree_expression *) NULL;
+  x[3] = (tree_expression *) NULL;
+  scanf_fmt = (tree_expression *) NULL;
 }
 
-tree_subplot_using::tree_subplot_using (tree *fmt)
+tree_subplot_using::tree_subplot_using (tree_expression *fmt)
 {
   qualifier_count = 0;
-  x[0] = NULL_TREE;
-  x[1] = NULL_TREE;
-  x[2] = NULL_TREE;
-  x[3] = NULL_TREE;
+  x[0] = (tree_expression *) NULL;
+  x[1] = (tree_expression *) NULL;
+  x[2] = (tree_expression *) NULL;
+  x[3] = (tree_expression *) NULL;
   scanf_fmt = fmt;
 }
 
 tree_subplot_using::~tree_subplot_using (void)
 {
   delete scanf_fmt;
 }
 
 tree_subplot_using *
-tree_subplot_using::set_format (tree *fmt)
+tree_subplot_using::set_format (tree_expression *fmt)
 {
   scanf_fmt = fmt;
   return this;
 }
 
 tree_subplot_using *
-tree_subplot_using::add_qualifier (tree *t)
+tree_subplot_using::add_qualifier (tree_expression *t)
 {
   if (qualifier_count < 4)
     x[qualifier_count] = t;
 
   qualifier_count++;
 
   return this;
 }
@@ -541,17 +543,17 @@ int
 tree_subplot_using::print (int ndim, int n_max, ostrstream& plot_buf)
 {
   if ((ndim == 2 && qualifier_count > 4)
       || (ndim == 3 && qualifier_count > 3))
     return -1;
 
   for (int i = 0; i < qualifier_count; i++)
     {
-      if (x[i] != NULL_TREE)
+      if (x[i] != (tree_expression *) NULL)
 	{
 	  tree_constant tmp = x[i]->eval (0);
 	  if (error_state)
 	    {
 	      ::error ("evaluating plot using command");
 	      return -1;
 	    }
 
@@ -576,44 +578,45 @@ tree_subplot_using::print (int ndim, int
 	    }
 	  else
 	    return -1;
 	}
       else
 	return -1;
     }
 
-  if (scanf_fmt != NULL_TREE)
+  if (scanf_fmt != (tree_expression *) NULL)
     warning ("ignoring scanf format in plot command");
 
   return 0;
 }
 
 tree_subplot_style::tree_subplot_style (void)
 {
   style = (char *) NULL;
-  linetype = NULL_TREE;
-  pointtype = NULL_TREE;
+  linetype = (tree_expression *) NULL;
+  pointtype = (tree_expression *) NULL;
 }
 
 tree_subplot_style::tree_subplot_style (char *s)
 {
   style = strsave (s);
-  linetype = NULL_TREE;
-  pointtype = NULL_TREE;
+  linetype = (tree_expression *) NULL;
+  pointtype = (tree_expression *) NULL;
 }
 
-tree_subplot_style::tree_subplot_style (char *s, tree *lt)
+tree_subplot_style::tree_subplot_style (char *s, tree_expression *lt)
 {
   style = strsave (s);
   linetype = lt;
-  pointtype = NULL_TREE;
+  pointtype = (tree_expression *) NULL;
 }
 
-tree_subplot_style::tree_subplot_style (char *s, tree *lt, tree *pt)
+tree_subplot_style::tree_subplot_style (char *s, tree_expression *lt,
+					tree_expression *pt)
 {
   style = strsave (s);
   linetype = lt;
   pointtype = pt;
 }
 
 tree_subplot_style::~tree_subplot_style (void)
 { 
@@ -631,32 +634,32 @@ tree_subplot_style::eval (int print)
 
 int
 tree_subplot_style::print (ostrstream& plot_buf)
 {
   if (style != (char *) NULL)
     {
       plot_buf << " with " << style;
 
-      if (linetype != NULL_TREE)
+      if (linetype != (tree_expression *) NULL)
 	{
 	  tree_constant tmp = linetype->eval (0);
 	  if (! error_state && tmp.is_defined ())
 	    {
 	      double val = tmp.to_scalar ();
 	      plot_buf << " " << NINT (val);
 	    }
 	  else
 	    {
 	      ::error ("evaluating plot style command");
 	      return -1;
 	    }
 	}
 
-      if (pointtype != NULL_TREE)
+      if (pointtype != (tree_expression *) NULL)
 	{
 	  tree_constant tmp = pointtype->eval (0);
 	  if (! error_state && tmp.is_defined ())
 	    {
 	      double val = tmp.to_scalar ();
 	      plot_buf << " " << NINT (val);
 	    }
 	  else
diff --git a/src/pt-plot.h b/src/pt-plot.h
--- a/src/pt-plot.h
+++ b/src/pt-plot.h
@@ -34,17 +34,16 @@ class tree_subplot;
 class tree_subplot_using;
 class tree_subplot_style;
 class tree_subplot_list;
 class tree_plot_command;
 
 class ostream;
 
 #include "tree-base.h"
-#include "tree.h"
 
 class
 tree_plot_command : public tree_command
 {
  public:
   tree_plot_command (void);
   tree_plot_command (tree_subplot_list *plt, int nd);
   tree_plot_command (tree_subplot_list *plt, tree_plot_limits *rng, int nd);
@@ -59,39 +58,40 @@ tree_plot_command : public tree_command
   tree_subplot_list *plot_list;
 };
 
 class
 tree_subplot_list : public tree
 {
  public:
   tree_subplot_list (void);
-  tree_subplot_list (tree *data);
+  tree_subplot_list (tree_expression *data);
   tree_subplot_list (tree_subplot_list *t);
-  tree_subplot_list (tree_subplot_using *u, tree *t, tree_subplot_style *s);
+  tree_subplot_list (tree_subplot_using *u, tree_expression *t,
+		     tree_subplot_style *s);
 
   ~tree_subplot_list (void);
 
-  tree_subplot_list *set_data (tree *data);
+  tree_subplot_list *set_data (tree_expression *data);
 
   tree_subplot_list *chain (tree_subplot_list *t);
 
   tree_subplot_list *reverse (void);
 
   tree_subplot_list *next_elem (void);
 
   tree_constant eval (int print);
 //  tree_constant *eval (int print, int nargout);
 
   int print (int ndim, ostrstream& plot_buf);
 
  private:
-  tree *plot_data;
+  tree_expression *plot_data;
   tree_subplot_using *using;
-  tree *title;
+  tree_expression *title;
   tree_subplot_style *style;
   tree_subplot_list *next;
 };
 
 class
 tree_plot_limits : public tree
 {
  public:
@@ -113,71 +113,71 @@ tree_plot_limits : public tree
   tree_plot_range *z_range;
 };
 
 class
 tree_plot_range : public tree
 {
  public:
   tree_plot_range (void);
-  tree_plot_range (tree *l, tree *u);
+  tree_plot_range (tree_expression *l, tree_expression *u);
 
   ~tree_plot_range (void);
 
   tree_constant eval (int print);
 
   void print (ostrstream& plot_buf);
 
  private:
-  tree *lower;
-  tree *upper;
+  tree_expression *lower;
+  tree_expression *upper;
 };
 
 class
 tree_subplot_using : public tree
 {
  public:
   tree_subplot_using (void);
-  tree_subplot_using (tree *fmt);
+  tree_subplot_using (tree_expression *fmt);
 
   ~tree_subplot_using (void);
 
-  tree_subplot_using *set_format (tree *fmt);
+  tree_subplot_using *set_format (tree_expression *fmt);
 
-  tree_subplot_using *add_qualifier (tree *t);
+  tree_subplot_using *add_qualifier (tree_expression *t);
 
   tree_constant eval (int print);
 
   int print (int ndim, int n_max, ostrstream& plot_buf);
 
  private:
   int qualifier_count;
-  tree *x[4];
-  tree *scanf_fmt;
+  tree_expression *x[4];
+  tree_expression *scanf_fmt;
 };
 
 class
 tree_subplot_style : public tree
 {
  public:
   tree_subplot_style (void);
   tree_subplot_style (char *s);
-  tree_subplot_style (char *s, tree *lt);
-  tree_subplot_style (char *s, tree *lt, tree *pt);
+  tree_subplot_style (char *s, tree_expression *lt);
+  tree_subplot_style (char *s, tree_expression *lt, tree_expression *pt);
 
   ~tree_subplot_style (void);
 
   tree_constant eval (int print);
 
   int print (ostrstream& plot_buf);
 
  private:
   char *style;
-  tree *linetype;
-  tree *pointtype;
+  tree_expression *linetype;
+  tree_expression *pointtype;
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
