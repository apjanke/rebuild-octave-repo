# HG changeset patch
# User Rik <rik@octave.org>
# Date 1450935999 28800
#      Wed Dec 23 21:46:39 2015 -0800
# Node ID 1edf15793cac4719428b1c1a7769a24f1e0b0c28
# Parent  7af34656efed325d07001b67b629de1b409041a0
maint: Use is_empty rather than "numel () == 0" for clarity.

* daspk.cc, dasrt.cc, dassl.cc, gl-render.cc, lsode.cc, tril.cc,
txt-eng-ft.cc, ov-fcn-inline.cc, ov-java.cc, ov-range.cc, ov-struct.cc,
Array.cc, Range.cc, chNDArray.cc, dNDArray.cc, fNDArray.cc, DASPK.cc, DASRT.cc,
DASSL.cc, LSODE.cc, eigs-base.cc:
Use is_empty rather than "numel () == 0" for clarity.

diff --git a/libinterp/corefcn/daspk.cc b/libinterp/corefcn/daspk.cc
--- a/libinterp/corefcn/daspk.cc
+++ b/libinterp/corefcn/daspk.cc
@@ -93,17 +93,17 @@ daspk_user_function (const ColumnVector&
               warned_fcn_imaginary = true;
             }
 
           retval = tmp(0).vector_value ();
 
           if (tlen > 1)
             ires = tmp(1).int_value ();
 
-          if (retval.numel () == 0)
+          if (retval.is_empty ())
             gripe_user_supplied_eval ("daspk");
         }
       else
         gripe_user_supplied_eval ("daspk");
     }
 
   return retval;
 }
@@ -142,17 +142,17 @@ daspk_user_jacobian (const ColumnVector&
           if (! warned_jac_imaginary && tmp(0).is_complex_type ())
             {
               warning ("daspk: ignoring imaginary part returned from user-supplied jacobian function");
               warned_jac_imaginary = true;
             }
 
           retval = tmp(0).matrix_value ();
 
-          if (retval.numel () == 0)
+          if (retval.is_empty ())
             gripe_user_supplied_eval ("daspk");
         }
       else
         gripe_user_supplied_eval ("daspk");
     }
 
   return retval;
 }
diff --git a/libinterp/corefcn/dasrt.cc b/libinterp/corefcn/dasrt.cc
--- a/libinterp/corefcn/dasrt.cc
+++ b/libinterp/corefcn/dasrt.cc
@@ -89,17 +89,17 @@ dasrt_user_f (const ColumnVector& x, con
           if (! warned_fcn_imaginary && tmp(0).is_complex_type ())
             {
               warning ("dasrt: ignoring imaginary part returned from user-supplied function");
               warned_fcn_imaginary = true;
             }
 
           retval = tmp(0).vector_value ();
 
-          if (retval.numel () == 0)
+          if (retval.is_empty ())
             gripe_user_supplied_eval ("dasrt");
         }
       else
         gripe_user_supplied_eval ("dasrt");
     }
 
   return retval;
 }
@@ -132,17 +132,17 @@ dasrt_user_cf (const ColumnVector& x, do
           if (! warned_cf_imaginary && tmp(0).is_complex_type ())
             {
               warning ("dasrt: ignoring imaginary part returned from user-supplied constraint function");
               warned_cf_imaginary = true;
             }
 
           retval = tmp(0).vector_value ();
 
-          if (retval.numel () == 0)
+          if (retval.is_empty ())
             gripe_user_supplied_eval ("dasrt");
         }
       else
         gripe_user_supplied_eval ("dasrt");
     }
 
   return retval;
 }
@@ -181,17 +181,17 @@ dasrt_user_j (const ColumnVector& x, con
           if (! warned_jac_imaginary && tmp(0).is_complex_type ())
             {
               warning ("dasrt: ignoring imaginary part returned from user-supplied jacobian function");
               warned_jac_imaginary = true;
             }
 
           retval = tmp(0).matrix_value ();
 
-          if (retval.numel () == 0)
+          if (retval.is_empty ())
             gripe_user_supplied_eval ("dasrt");
         }
       else
         gripe_user_supplied_eval ("dasrt");
     }
 
   return retval;
 }
diff --git a/libinterp/corefcn/dassl.cc b/libinterp/corefcn/dassl.cc
--- a/libinterp/corefcn/dassl.cc
+++ b/libinterp/corefcn/dassl.cc
@@ -93,17 +93,17 @@ dassl_user_function (const ColumnVector&
               warned_fcn_imaginary = true;
             }
 
           retval = tmp(0).vector_value ();
 
           if (tlen > 1)
             ires = tmp(1).int_value ();
 
-          if (retval.numel () == 0)
+          if (retval.is_empty ())
             gripe_user_supplied_eval ("dassl");
         }
       else
         gripe_user_supplied_eval ("dassl");
     }
 
   return retval;
 }
@@ -142,17 +142,17 @@ dassl_user_jacobian (const ColumnVector&
           if (! warned_jac_imaginary && tmp(0).is_complex_type ())
             {
               warning ("dassl: ignoring imaginary part returned from user-supplied jacobian function");
               warned_jac_imaginary = true;
             }
 
           retval = tmp(0).matrix_value ();
 
-          if (retval.numel () == 0)
+          if (retval.is_empty ())
             gripe_user_supplied_eval ("dassl");
         }
       else
         gripe_user_supplied_eval ("dassl");
     }
 
   return retval;
 }
diff --git a/libinterp/corefcn/gl-render.cc b/libinterp/corefcn/gl-render.cc
--- a/libinterp/corefcn/gl-render.cc
+++ b/libinterp/corefcn/gl-render.cc
@@ -856,17 +856,17 @@ opengl_renderer::setup_opengl_transforma
 
   xform = props.get_transform ();
 }
 
 void
 opengl_renderer::draw_axes_planes (const axes::properties& props)
 {
   Matrix axe_color = props.get_color_rgb ();
-  if (axe_color.numel () == 0 || ! props.is_visible ())
+  if (axe_color.is_empty () || ! props.is_visible ())
     return;
 
   double xPlane = props.get_xPlane ();
   double yPlane = props.get_yPlane ();
   double zPlane = props.get_zPlane ();
   double xPlaneN = props.get_xPlaneN ();
   double yPlaneN = props.get_yPlaneN ();
   double zPlaneN = props.get_zPlaneN ();
@@ -2154,30 +2154,29 @@ opengl_renderer::draw_surface (const sur
 
       bool do_edge = ! props.markeredgecolor_is ("none");
       bool do_face = ! props.markerfacecolor_is ("none");
 
       Matrix mecolor = props.get_markeredgecolor_rgb ();
       Matrix mfcolor = props.get_markerfacecolor_rgb ();
       Matrix cc (1, 3, 0.0);
 
-      if (mecolor.numel () == 0 && props.markeredgecolor_is ("auto"))
+      if (mecolor.is_empty () && props.markeredgecolor_is ("auto"))
         {
           mecolor = props.get_edgecolor_rgb ();
           do_edge = ! props.edgecolor_is ("none");
         }
 
-      if (mfcolor.numel () == 0 && props.markerfacecolor_is ("auto"))
+      if (mfcolor.is_empty () && props.markerfacecolor_is ("auto"))
         {
           mfcolor = props.get_facecolor_rgb ();
           do_face = ! props.facecolor_is ("none");
         }
 
-      if ((mecolor.numel () == 0 || mfcolor.numel () == 0)
-          && c.numel () == 0)
+      if ((mecolor.is_empty () || mfcolor.is_empty ()) && c.is_empty ())
         c = props.get_color_data ().array_value ();
 
       init_marker (props.get_marker (), props.get_markersize (),
                    props.get_linewidth ());
 
       for (int i = 0; i < zc; i++)
         {
           if (y_mat)
@@ -2186,29 +2185,29 @@ opengl_renderer::draw_surface (const sur
           for (int j = 0; j < zr; j++)
             {
               if (clip(j,i))
                 continue;
 
               if (x_mat)
                 j1 = j;
 
-              if ((do_edge && mecolor.numel () == 0)
-                  || (do_face && mfcolor.numel () == 0))
+              if ((do_edge && mecolor.is_empty ())
+                  || (do_face && mfcolor.is_empty ()))
                 {
                   if (! xfinite (c(j,i)))
                     continue;  // Skip NaNs in color data
 
                   for (int k = 0; k < 3; k++)
                     cc(k) = c(j,i,k);
                 }
 
-              Matrix lc = (do_edge ? (mecolor.numel () == 0 ? cc : mecolor)
+              Matrix lc = (do_edge ? (mecolor.is_empty () ? cc : mecolor)
                                    : Matrix ());
-              Matrix fc = (do_face ? (mfcolor.numel () == 0 ? cc : mfcolor)
+              Matrix fc = (do_face ? (mfcolor.is_empty () ? cc : mfcolor)
                                    : Matrix ());
 
               draw_marker (x(j1,i), y(j,i1), z(j,i), lc, fc);
             }
         }
 
       end_marker ();
     }
@@ -2586,36 +2585,33 @@ opengl_renderer::draw_patch (const patch
       bool do_edge = ! props.markeredgecolor_is ("none");
       bool do_face = ! props.markerfacecolor_is ("none");
 
       Matrix mecolor = props.get_markeredgecolor_rgb ();
       Matrix mfcolor = props.get_markerfacecolor_rgb ();
 
       bool has_markerfacecolor = false;
 
-      if ((mecolor.numel () == 0 && ! props.markeredgecolor_is ("none"))
-          || (mfcolor.numel () == 0 && ! props.markerfacecolor_is ("none")))
+      if ((mecolor.is_empty () && ! props.markeredgecolor_is ("none"))
+          || (mfcolor.is_empty () && ! props.markerfacecolor_is ("none")))
         {
           Matrix mc = props.get_color_data ().matrix_value ();
 
           if (mc.rows () == 1)
             {
               // Single color specifications, we can simplify a little bit
-
-              if (mfcolor.numel () == 0
-                  && ! props.markerfacecolor_is ("none"))
+              if (mfcolor.is_empty () && ! props.markerfacecolor_is ("none"))
                 mfcolor = mc;
 
-              if (mecolor.numel () == 0
-                  && ! props.markeredgecolor_is ("none"))
+              if (mecolor.is_empty () && ! props.markeredgecolor_is ("none"))
                 mecolor = mc;
             }
           else
             {
-              if (c.numel () == 0)
+              if (c.is_empty ())
                 c = props.get_color_data ().matrix_value ();
               has_markerfacecolor = ((c.numel () > 0)
                                      && (c.rows () == f.rows ()));
             }
         }
 
 
       init_marker (props.get_marker (), props.get_markersize (),
@@ -2634,19 +2630,19 @@ opengl_renderer::draw_patch (const patch
               {
                 cc.resize (1, 3);
                 if (has_markerfacecolor)
                   cc(0) = c(i,0), cc(1) = c(i,1), cc(2) = c(i,2);
                 else
                   cc(0) = c(idx,0), cc(1) = c(idx,1), cc(2) = c(idx,2);
               }
 
-            Matrix lc = (do_edge ? (mecolor.numel () == 0 ? cc : mecolor)
+            Matrix lc = (do_edge ? (mecolor.is_empty () ? cc : mecolor)
                                  : Matrix ());
-            Matrix fc = (do_face ? (mfcolor.numel () == 0 ? cc : mfcolor)
+            Matrix fc = (do_face ? (mfcolor.is_empty () ? cc : mfcolor)
                                  : Matrix ());
 
             draw_marker (v(idx,0), v(idx,1), (has_z ? v(idx,2) : 0), lc, fc);
           }
 
       end_marker ();
     }
 }
diff --git a/libinterp/corefcn/lsode.cc b/libinterp/corefcn/lsode.cc
--- a/libinterp/corefcn/lsode.cc
+++ b/libinterp/corefcn/lsode.cc
@@ -86,17 +86,17 @@ lsode_user_function (const ColumnVector&
           if (! warned_fcn_imaginary && tmp(0).is_complex_type ())
             {
               warning ("lsode: ignoring imaginary part returned from user-supplied function");
               warned_fcn_imaginary = true;
             }
 
           retval = tmp(0).xvector_value ("lsode: expecting user supplied function to return numeric vector");
 
-          if (retval.numel () == 0)
+          if (retval.is_empty ())
             gripe_user_supplied_eval ("lsode");
         }
       else
         gripe_user_supplied_eval ("lsode");
     }
 
   return retval;
 }
@@ -128,17 +128,17 @@ lsode_user_jacobian (const ColumnVector&
           if (! warned_jac_imaginary && tmp(0).is_complex_type ())
             {
               warning ("lsode: ignoring imaginary part returned from user-supplied jacobian function");
               warned_jac_imaginary = true;
             }
 
           retval = tmp(0).xmatrix_value ("lsode: expecting user supplied jacobian function to return numeric array");
 
-          if (retval.numel () == 0)
+          if (retval.is_empty ())
             gripe_user_supplied_eval ("lsode");
         }
       else
         gripe_user_supplied_eval ("lsode");
     }
 
   return retval;
 }
diff --git a/libinterp/corefcn/tril.cc b/libinterp/corefcn/tril.cc
--- a/libinterp/corefcn/tril.cc
+++ b/libinterp/corefcn/tril.cc
@@ -260,17 +260,17 @@ do_trilu (const std::string& name,
       {
         // Generic code that works on octave-values, that is slow
         // but will also work on arbitrary user types
         if (pack) // FIXME
           error ("%s: \"pack\" not implemented for class %s",
                  name.c_str (), arg.class_name ().c_str ());
 
         octave_value tmp = arg;
-        if (arg.numel () == 0)
+        if (arg.is_empty ())
           return arg;
 
         octave_idx_type nr = dims(0);
         octave_idx_type nc = dims(1);
 
         // The sole purpose of this code is to force the correct matrix size.
         // This would not be necessary if the octave_value resize function
         // allowed a fill_value.  It also allows odd attributes in some user
diff --git a/libinterp/corefcn/txt-eng-ft.cc b/libinterp/corefcn/txt-eng-ft.cc
--- a/libinterp/corefcn/txt-eng-ft.cc
+++ b/libinterp/corefcn/txt-eng-ft.cc
@@ -1026,21 +1026,18 @@ ft_render::text_to_pixels (const std::st
   int rot_mode = rotation_to_mode (rotation);
 
   halign = _halign;
 
   text_element *elt = text_parser::parse (txt, interpreter);
   pixels_ = render (elt, box, rot_mode);
   delete elt;
 
-  if (pixels_.numel () == 0)
-    {
-      // nothing to render
-      return;
-    }
+  if (pixels_.is_empty ())
+    return;  // nothing to render
 
   switch (halign)
     {
     default: box(0) = 0; break;
     case 1: box(0) = -box(2)/2; break;
     case 2: box(0) = -box(2); break;
     }
   switch (valign)
diff --git a/libinterp/octave-value/ov-fcn-inline.cc b/libinterp/octave-value/ov-fcn-inline.cc
--- a/libinterp/octave-value/ov-fcn-inline.cc
+++ b/libinterp/octave-value/ov-fcn-inline.cc
@@ -765,17 +765,17 @@ functions from strings is through the us
               tmp_arg = std::string ();
               is_arg = false;
             }
         }
 
       // Sort the arguments into ascii order.
       fargs.sort ();
 
-      if (fargs.numel () == 0)
+      if (fargs.is_empty ())
         fargs.append (std::string ("x"));
 
     }
   else if (nargin == 2 && args(1).is_numeric_type ())
     {
       if (! args(1).is_scalar_type ())
         error ("inline: N must be an integer");
 
diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -1211,17 +1211,17 @@ box_more (JNIEnv* jni_env, jobject jobj,
                 {
                   Matrix m;
 
                   for (int r = 0; r < rows; r++)
                     {
                       jdoubleArray_ref row (jni_env,
                                             reinterpret_cast<jdoubleArray> (jni_env->GetObjectArrayElement (jarr, r)));
 
-                      if (m.numel () == 0)
+                      if (m.is_empty ())
                         {
                           cols = jni_env->GetArrayLength (row);
                           m.resize (cols, rows);
                         }
                       jni_env->GetDoubleArrayRegion (row, 0, cols, m.fortran_vec () + r * cols);
                     }
                   retval = m.transpose ();
                 }
diff --git a/libinterp/octave-value/ov-range.cc b/libinterp/octave-value/ov-range.cc
--- a/libinterp/octave-value/ov-range.cc
+++ b/libinterp/octave-value/ov-range.cc
@@ -268,17 +268,17 @@ octave_range::diag (octave_idx_type m, o
   return mat.diag (m, n);
 }
 
 bool
 octave_range::is_true (void) const
 {
   bool retval = false;
 
-  if (range.numel () != 0)
+  if (! range.numel () != 0)
     {
       // FIXME: this is a potential waste of memory.
 
       Matrix m ((range.matrix_value () . all ()) . all ());
 
       retval = (m.rows () == 1 && m.columns () == 1 && m (0, 0) != 0.0);
     }
 
diff --git a/libinterp/octave-value/ov-struct.cc b/libinterp/octave-value/ov-struct.cc
--- a/libinterp/octave-value/ov-struct.cc
+++ b/libinterp/octave-value/ov-struct.cc
@@ -78,17 +78,17 @@ octave_struct::dotref (const octave_valu
 
   std::string nm = idx(0).string_value ();
 
   octave_map::const_iterator p = map.seek (nm);
 
   if (p != map.end ())
     retval = map.contents (p);
   else if (auto_add)
-    retval = (numel () == 0) ? Cell (dim_vector (1, 1)) : Cell (dims ());
+    retval = (is_empty ()) ? Cell (dim_vector (1, 1)) : Cell (dims ());
   else
     error_with_id ("Octave:invalid-indexing",
                    "structure has no member '%s'", nm.c_str ());
 
   return retval;
 }
 
 static void
@@ -1842,17 +1842,17 @@ Implements @code{fieldnames()} for struc
 
   // Input validation has already been done in fieldnames.m.
   octave_value arg = args(0);
 
   octave_map m = arg.map_value ();
 
   string_vector keys = m.fieldnames ();
 
-  if (keys.numel () == 0)
+  if (keys.is_empty ())
     retval = Cell (0, 1);
   else
     retval = Cell (keys);
 
   return retval;
 }
 
 DEFUN (isfield, args, ,
diff --git a/liboctave/array/Array.cc b/liboctave/array/Array.cc
--- a/liboctave/array/Array.cc
+++ b/liboctave/array/Array.cc
@@ -2365,17 +2365,17 @@ Array<T>::nth_element (const idx_vector&
   octave_idx_type nn = n.length (ns);
 
   dv(dim) = std::min (nn, ns);
   dv.chop_trailing_singletons ();
   dim = std::min (dv.length (), dim);
 
   Array<T> m (dv);
 
-  if (m.numel () == 0)
+  if (m.is_empty ())
     return m;
 
   sortmode mode = UNSORTED;
   octave_idx_type lo = 0;
 
   switch (n.idx_class ())
     {
     case idx_vector::class_scalar:
diff --git a/liboctave/array/Range.cc b/liboctave/array/Range.cc
--- a/liboctave/array/Range.cc
+++ b/liboctave/array/Range.cc
@@ -46,17 +46,17 @@ Range::all_elements_are_ints (void) cons
   return (! (xisnan (rng_base) || xisnan (rng_inc))
           && (NINTbig (rng_base) == rng_base || rng_numel < 1)
           && (NINTbig (rng_inc) == rng_inc || rng_numel <= 1));
 }
 
 Matrix
 Range::matrix_value (void) const
 {
-  if (rng_numel > 0 && cache.numel () == 0)
+  if (rng_numel > 0 && cache.is_empty ())
     {
       cache.resize (1, rng_numel);
 
       // The first element must always be *exactly* the base.
       // E.g, -0 would otherwise become +0 in the loop (-0 + 0*increment).
       cache(0) = rng_base;
 
       double b = rng_base;
diff --git a/liboctave/array/chNDArray.cc b/liboctave/array/chNDArray.cc
--- a/liboctave/array/chNDArray.cc
+++ b/liboctave/array/chNDArray.cc
@@ -107,17 +107,17 @@ charNDArray::concat (const charNDArray& 
 }
 
 charNDArray
 charNDArray::concat (const NDArray& rb, const Array<octave_idx_type>& ra_idx)
 {
   charNDArray tmp (rb.dims ());
   octave_idx_type nel = rb.numel ();
 
-  if (rb.numel () == 0)
+  if (rb.is_empty ())
     return *this;
 
   for (octave_idx_type i = 0; i < nel; i++)
     {
       double d = rb.elem (i);
 
       if (xisnan (d))
         {
diff --git a/liboctave/array/dNDArray.cc b/liboctave/array/dNDArray.cc
--- a/liboctave/array/dNDArray.cc
+++ b/liboctave/array/dNDArray.cc
@@ -779,17 +779,17 @@ NDArray::concat (const charNDArray& rb, 
           if (ival < 0 || ival > std::numeric_limits<unsigned char>::max ())
             // FIXME: is there something better to do? Should we warn the user?
             ival = 0;
 
           retval.elem (i) = static_cast<char>(ival);
         }
     }
 
-  if (rb.numel () == 0)
+  if (rb.is_empty ())
     return retval;
 
   retval.insert (rb, ra_idx);
   return retval;
 }
 
 NDArray
 real (const ComplexNDArray& a)
diff --git a/liboctave/array/fNDArray.cc b/liboctave/array/fNDArray.cc
--- a/liboctave/array/fNDArray.cc
+++ b/liboctave/array/fNDArray.cc
@@ -748,17 +748,17 @@ FloatNDArray::concat (const charNDArray&
           if (ival < 0 || ival > std::numeric_limits<unsigned char>::max ())
             // FIXME: is there something better to do?  Should we warn the user?
             ival = 0;
 
           retval.elem (i) = static_cast<char>(ival);
         }
     }
 
-  if (rb.numel () == 0)
+  if (rb.is_empty ())
     return retval;
 
   retval.insert (rb, ra_idx);
   return retval;
 }
 
 FloatNDArray
 real (const FloatComplexNDArray& a)
diff --git a/liboctave/numeric/DASPK.cc b/liboctave/numeric/DASPK.cc
--- a/liboctave/numeric/DASPK.cc
+++ b/liboctave/numeric/DASPK.cc
@@ -86,17 +86,17 @@ ddaspk_f (const double& time, const doub
       tmp_deriv.elem (i) = deriv[i];
       tmp_state.elem (i) = state[i];
     }
 
   tmp_delta = user_fun (tmp_state, tmp_deriv, time, ires);
 
   if (ires >= 0)
     {
-      if (tmp_delta.numel () == 0)
+      if (tmp_delta.is_empty ())
         ires = -2;
       else
         {
           for (octave_idx_type i = 0; i < nn; i++)
             delta[i] = tmp_delta.elem (i);
         }
     }
 
diff --git a/liboctave/numeric/DASRT.cc b/liboctave/numeric/DASRT.cc
--- a/liboctave/numeric/DASRT.cc
+++ b/liboctave/numeric/DASRT.cc
@@ -82,17 +82,17 @@ ddasrt_f (const double& t, const double 
   for (octave_idx_type i = 0; i < nn; i++)
     {
       tmp_state(i) = state[i];
       tmp_deriv(i) = deriv[i];
     }
 
   ColumnVector tmp_fval = (*user_fsub) (tmp_state, tmp_deriv, t, ires);
 
-  if (tmp_fval.numel () == 0)
+  if (tmp_fval.is_empty ())
     ires = -2;
   else
     {
       for (octave_idx_type i = 0; i < nn; i++)
         delta[i] = tmp_fval(i);
     }
 
   END_INTERRUPT_WITH_EXCEPTIONS;
diff --git a/liboctave/numeric/DASSL.cc b/liboctave/numeric/DASSL.cc
--- a/liboctave/numeric/DASSL.cc
+++ b/liboctave/numeric/DASSL.cc
@@ -79,17 +79,17 @@ ddassl_f (const double& time, const doub
       tmp_deriv.elem (i) = deriv[i];
       tmp_state.elem (i) = state[i];
     }
 
   tmp_delta = user_fun (tmp_state, tmp_deriv, time, ires);
 
   if (ires >= 0)
     {
-      if (tmp_delta.numel () == 0)
+      if (tmp_delta.is_empty ())
         ires = -2;
       else
         {
           for (octave_idx_type i = 0; i < nn; i++)
             delta[i] = tmp_delta.elem (i);
         }
     }
 
diff --git a/liboctave/numeric/LSODE.cc b/liboctave/numeric/LSODE.cc
--- a/liboctave/numeric/LSODE.cc
+++ b/liboctave/numeric/LSODE.cc
@@ -69,17 +69,17 @@ lsode_f (const octave_idx_type& neq, con
   ColumnVector tmp_deriv;
 
   // NOTE: this won't work if LSODE passes copies of the state vector.
   //       In that case we have to create a temporary vector object
   //       and copy.
 
   tmp_deriv = (*user_fun) (*tmp_x, time);
 
-  if (tmp_deriv.numel () == 0)
+  if (tmp_deriv.is_empty ())
     ierr = -1;
   else
     {
       for (octave_idx_type i = 0; i < neq; i++)
         deriv[i] = tmp_deriv.elem (i);
     }
 
   END_INTERRUPT_WITH_EXCEPTIONS;
diff --git a/liboctave/numeric/eigs-base.cc b/liboctave/numeric/eigs-base.cc
--- a/liboctave/numeric/eigs-base.cc
+++ b/liboctave/numeric/eigs-base.cc
@@ -824,17 +824,17 @@ EigsRealSymmetricMatrix (const M& m, con
 
   if (p <= k || p >= n)
     {
       (*current_liboctave_error_handler)
         ("eigs: opts.p must be greater than k and less than n");
       return -1;
     }
 
-  if (have_b && cholB && permB.numel () != 0)
+  if (have_b && cholB && ! permB.is_empty ())
     {
       // Check the we really have a permutation vector
       if (permB.numel () != n)
         {
           (*current_liboctave_error_handler)
             ("eigs: permB vector invalid");
           return -1;
         }
@@ -875,17 +875,17 @@ EigsRealSymmetricMatrix (const M& m, con
   if (have_b)
     {
       // See Note 3 dsaupd
       note3 = true;
       if (cholB)
         {
           bt = b;
           b = b.transpose ();
-          if (permB.numel () == 0)
+          if (permB.is_empty ())
             {
               permB = ColumnVector (n);
               for (octave_idx_type i = 0; i < n; i++)
                 permB(i) = i;
             }
         }
       else
         {
@@ -1148,17 +1148,17 @@ EigsRealSymmetricMatrixShift (const M& m
 
   if (p <= k || p >= n)
     {
       (*current_liboctave_error_handler)
         ("eigs: opts.p must be greater than k and less than n");
       return -1;
     }
 
-  if (have_b && cholB && permB.numel () != 0)
+  if (have_b && cholB && ! permB.is_empty ())
     {
       // Check the we really have a permutation vector
       if (permB.numel () != n)
         {
           (*current_liboctave_error_handler) ("eigs: permB vector invalid");
           return -1;
         }
       else
@@ -1738,17 +1738,17 @@ EigsRealNonSymmetricMatrix (const M& m, 
 
   if (p <= k || p >= n)
     {
       (*current_liboctave_error_handler)
         ("eigs: opts.p must be greater than k and less than n");
       return -1;
     }
 
-  if (have_b && cholB && permB.numel () != 0)
+  if (have_b && cholB && ! permB.is_empty ())
     {
       // Check the we really have a permutation vector
       if (permB.numel () != n)
         {
           (*current_liboctave_error_handler)
             ("eigs: permB vector invalid");
           return -1;
         }
@@ -1789,17 +1789,17 @@ EigsRealNonSymmetricMatrix (const M& m, 
   if (have_b)
     {
       // See Note 3 dsaupd
       note3 = true;
       if (cholB)
         {
           bt = b;
           b = b.transpose ();
-          if (permB.numel () == 0)
+          if (permB.is_empty ())
             {
               permB = ColumnVector (n);
               for (octave_idx_type i = 0; i < n; i++)
                 permB(i) = i;
             }
         }
       else
         {
@@ -2111,17 +2111,17 @@ EigsRealNonSymmetricMatrixShift (const M
 
   if (p <= k || p >= n)
     {
       (*current_liboctave_error_handler)
         ("eigs: opts.p must be greater than k and less than n");
       return -1;
     }
 
-  if (have_b && cholB && permB.numel () != 0)
+  if (have_b && cholB && ! permB.is_empty ())
     {
       // Check that we really have a permutation vector
       if (permB.numel () != n)
         {
           (*current_liboctave_error_handler) ("eigs: permB vector invalid");
           return -1;
         }
       else
@@ -2806,17 +2806,17 @@ EigsComplexNonSymmetricMatrix (const M& 
 
   if (p <= k || p >= n)
     {
       (*current_liboctave_error_handler)
         ("eigs: opts.p must be greater than k and less than n");
       return -1;
     }
 
-  if (have_b && cholB && permB.numel () != 0)
+  if (have_b && cholB && ! permB.is_empty ())
     {
       // Check the we really have a permutation vector
       if (permB.numel () != n)
         {
           (*current_liboctave_error_handler)
             ("eigs: permB vector invalid");
           return -1;
         }
@@ -2857,17 +2857,17 @@ EigsComplexNonSymmetricMatrix (const M& 
   if (have_b)
     {
       // See Note 3 dsaupd
       note3 = true;
       if (cholB)
         {
           bt = b;
           b = b.hermitian ();
-          if (permB.numel () == 0)
+          if (permB.is_empty ())
             {
               permB = ColumnVector (n);
               for (octave_idx_type i = 0; i < n; i++)
                 permB(i) = i;
             }
         }
       else
         {
@@ -3131,17 +3131,17 @@ EigsComplexNonSymmetricMatrixShift (cons
 
   if (p <= k || p >= n)
     {
       (*current_liboctave_error_handler)
         ("eigs: opts.p must be greater than k and less than n");
       return -1;
     }
 
-  if (have_b && cholB && permB.numel () != 0)
+  if (have_b && cholB && ! permB.is_empty ())
     {
       // Check that we really have a permutation vector
       if (permB.numel () != n)
         {
           (*current_liboctave_error_handler) ("eigs: permB vector invalid");
           return -1;
         }
       else
