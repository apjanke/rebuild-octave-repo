# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1250835496 -7200
#      Fri Aug 21 08:18:16 2009 +0200
# Node ID 19d298e6f7e5c421792b2cb7aa08a7efbbf0ce34
# Parent  3d6a9aea2aeae1b31d33b7c36b87ea2f99d0ae98
make ! operator check for NaNs, simplify implementations in liboctave

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -3053,26 +3053,18 @@ ComplexMatrix::operator -= (const Matrix
   return *this;
 }
 
 // unary operations
 
 boolMatrix
 ComplexMatrix::operator ! (void) const
 {
-  octave_idx_type nr = rows ();
-  octave_idx_type nc = cols ();
-
-  boolMatrix b (nr, nc);
-
-  for (octave_idx_type j = 0; j < nc; j++)
-    for (octave_idx_type i = 0; i < nr; i++)
-      b.elem (i, j) = elem (i, j) == 0.0;
-
-  return b;
+  ND_LOGICAL_NAN_CHECK (*this);
+  return do_mx_unary_op<boolMatrix, ComplexMatrix> (*this, mx_inline_iszero);
 }
 
 // other operations
 
 Matrix
 ComplexMatrix::map (dmapper fcn) const
 {
   return MArray2<Complex>::map<double> (func_ptr (fcn));
diff --git a/liboctave/CNDArray.cc b/liboctave/CNDArray.cc
--- a/liboctave/CNDArray.cc
+++ b/liboctave/CNDArray.cc
@@ -492,22 +492,18 @@ ComplexNDArray::ifourierNd (void) const
 
 #endif
 
 // unary operations
 
 boolNDArray
 ComplexNDArray::operator ! (void) const
 {
-  boolNDArray b (dims ());
-
-  for (octave_idx_type i = 0; i < length (); i++)
-    b.elem (i) = elem (i) == 0.0;
-
-  return b;
+  ND_LOGICAL_NAN_CHECK (*this);
+  return do_mx_unary_op<boolNDArray, ComplexNDArray> (*this, mx_inline_iszero);
 }
 
 // FIXME -- this is not quite the right thing.
 
 bool
 ComplexNDArray::any_element_is_nan (void) const
 {
   octave_idx_type nel = nelem ();
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,19 @@
+2009-08-20  Jaroslav Hajek  <highegg@gmail.com>
+	
+	* dMatrix.cc (Matrix::operator!): Simplify & check for NaNs.
+	* fMatrix.cc (FloatMatrix::operator!): Ditto.
+	* CMatrix.cc (ComplexMatrix::operator!): Ditto.
+	* fCMatrix.cc (FloatComplexMatrix::operator!): Ditto.
+	* dNDArray.cc (NDArray::operator!): Ditto.
+	* fNDArray.cc (FloatNDArray::operator!): Ditto.
+	* CNDArray.cc (ComplexNDArray::operator!): Ditto.
+	* fCNDArray.cc (FloatComplexNDArray::operator!): Ditto.
+
 2009-08-20  Jaroslav Hajek  <highegg@gmail.com>
 
 	* mx-inlines.cc (mx_inline_add, mx_inline_sub, mx_inline_mul,
 	mx_inline_div, mx_inline_uminus, mx_inline_not, mx_inline_add2,
 	mx_inline_sub2, mx_inline_mul2, mx_inline_div2, mx_inline_iszero,
 	mx_inline_notzero, mx_inline_and, mx_inline_or, mx_inline_not_and,
 	mx_inline_not_or, mx_inline_and_not, mx_inline_or_not, 
 	mx_inline_lt, mx_inline_le, mx_inline_gt, mx_inline_ge,
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -2562,26 +2562,18 @@ Matrix::operator -= (const DiagMatrix& a
   return *this;
 }
 
 // unary operations
 
 boolMatrix
 Matrix::operator ! (void) const
 {
-  octave_idx_type nr = rows ();
-  octave_idx_type nc = cols ();
-
-  boolMatrix b (nr, nc);
-
-  for (octave_idx_type j = 0; j < nc; j++)
-    for (octave_idx_type i = 0; i < nr; i++)
-      b.elem (i, j) = ! elem (i, j);
-
-  return b;
+  ND_LOGICAL_NAN_CHECK (*this);
+  return do_mx_unary_op<boolMatrix, Matrix> (*this, mx_inline_iszero);
 }
 
 // column vector by row vector -> matrix operations
 
 Matrix
 operator * (const ColumnVector& v, const RowVector& a)
 {
   Matrix retval;
diff --git a/liboctave/dNDArray.cc b/liboctave/dNDArray.cc
--- a/liboctave/dNDArray.cc
+++ b/liboctave/dNDArray.cc
@@ -533,22 +533,18 @@ NDArray::ifourierNd (void) const
 
 #endif
 
 // unary operations
 
 boolNDArray
 NDArray::operator ! (void) const
 {
-  boolNDArray b (dims ());
-
-  for (octave_idx_type i = 0; i < length (); i++)
-    b.elem (i) = ! elem (i);
-
-  return b;
+  ND_LOGICAL_NAN_CHECK (*this);
+  return do_mx_unary_op<boolNDArray, NDArray> (*this, mx_inline_iszero);
 }
 
 bool
 NDArray::any_element_is_negative (bool neg_zero) const
 {
   octave_idx_type nel = nelem ();
 
   if (neg_zero)
diff --git a/liboctave/fCMatrix.cc b/liboctave/fCMatrix.cc
--- a/liboctave/fCMatrix.cc
+++ b/liboctave/fCMatrix.cc
@@ -3046,26 +3046,18 @@ FloatComplexMatrix::operator -= (const F
   return *this;
 }
 
 // unary operations
 
 boolMatrix
 FloatComplexMatrix::operator ! (void) const
 {
-  octave_idx_type nr = rows ();
-  octave_idx_type nc = cols ();
-
-  boolMatrix b (nr, nc);
-
-  for (octave_idx_type j = 0; j < nc; j++)
-    for (octave_idx_type i = 0; i < nr; i++)
-      b.elem (i, j) = elem (i, j) == static_cast<float> (0.0);
-
-  return b;
+  ND_LOGICAL_NAN_CHECK (*this);
+  return do_mx_unary_op<boolMatrix, FloatComplexMatrix> (*this, mx_inline_iszero);
 }
 
 // other operations
 
 FloatMatrix
 FloatComplexMatrix::map (dmapper fcn) const
 {
   return MArray2<FloatComplex>::map<float> (func_ptr (fcn));
diff --git a/liboctave/fCNDArray.cc b/liboctave/fCNDArray.cc
--- a/liboctave/fCNDArray.cc
+++ b/liboctave/fCNDArray.cc
@@ -487,22 +487,18 @@ FloatComplexNDArray::ifourierNd (void) c
 
 #endif
 
 // unary operations
 
 boolNDArray
 FloatComplexNDArray::operator ! (void) const
 {
-  boolNDArray b (dims ());
-
-  for (octave_idx_type i = 0; i < length (); i++)
-    b.elem (i) = elem (i) == static_cast<float> (0.0);
-
-  return b;
+  ND_LOGICAL_NAN_CHECK (*this);
+  return do_mx_unary_op<boolNDArray, FloatComplexNDArray> (*this, mx_inline_iszero);
 }
 
 // FIXME -- this is not quite the right thing.
 
 bool
 FloatComplexNDArray::any_element_is_nan (void) const
 {
   octave_idx_type nel = nelem ();
diff --git a/liboctave/fMatrix.cc b/liboctave/fMatrix.cc
--- a/liboctave/fMatrix.cc
+++ b/liboctave/fMatrix.cc
@@ -2561,26 +2561,18 @@ FloatMatrix::operator -= (const FloatDia
   return *this;
 }
 
 // unary operations
 
 boolMatrix
 FloatMatrix::operator ! (void) const
 {
-  octave_idx_type nr = rows ();
-  octave_idx_type nc = cols ();
-
-  boolMatrix b (nr, nc);
-
-  for (octave_idx_type j = 0; j < nc; j++)
-    for (octave_idx_type i = 0; i < nr; i++)
-      b.elem (i, j) = ! elem (i, j);
-
-  return b;
+  ND_LOGICAL_NAN_CHECK (*this);
+  return do_mx_unary_op<boolMatrix, FloatMatrix> (*this, mx_inline_iszero);
 }
 
 // column vector by row vector -> matrix operations
 
 FloatMatrix
 operator * (const FloatColumnVector& v, const FloatRowVector& a)
 {
   FloatMatrix retval;
diff --git a/liboctave/fNDArray.cc b/liboctave/fNDArray.cc
--- a/liboctave/fNDArray.cc
+++ b/liboctave/fNDArray.cc
@@ -491,22 +491,18 @@ FloatNDArray::ifourierNd (void) const
 
 #endif
 
 // unary operations
 
 boolNDArray
 FloatNDArray::operator ! (void) const
 {
-  boolNDArray b (dims ());
-
-  for (octave_idx_type i = 0; i < length (); i++)
-    b.elem (i) = ! elem (i);
-
-  return b;
+  ND_LOGICAL_NAN_CHECK (*this);
+  return do_mx_unary_op<boolNDArray, FloatNDArray> (*this, mx_inline_iszero);
 }
 
 bool
 FloatNDArray::any_element_is_negative (bool neg_zero) const
 {
   octave_idx_type nel = nelem ();
 
   if (neg_zero)
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2009-08-21  Jaroslav Hajek  <highegg@gmail.com>
+
+	* OPERATORS/op-s-s.cc: Check for NaN in ! operator.
+	* OPERATORS/op-fs-fs.cc: Ditto.
+	* OPERATORS/op-cs-cs.cc: Ditto.
+	* OPERATORS/op-fcs-fcs.cc: Ditto.
+
 2009-08-17  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ops.h (DEFNDASSIGNOP_FNOP): New macro.
 	* OPERATORS/op-bm-bm.cc: Define and install &= and |= operators.
 
 2009-08-17  Jaroslav Hajek  <highegg@gmail.com>
 
 	* OPERATORS/op-m-m.cc: Define and install += and -= operators.
diff --git a/src/OPERATORS/op-cs-cs.cc b/src/OPERATORS/op-cs-cs.cc
--- a/src/OPERATORS/op-cs-cs.cc
+++ b/src/OPERATORS/op-cs-cs.cc
@@ -20,16 +20,18 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
+#include "Array-util.h"
+
 #include "gripes.h"
 #include "oct-obj.h"
 #include "ov.h"
 #include "ov-complex.h"
 #include "ov-cx-mat.h"
 #include "ov-flt-cx-mat.h"
 #include "ov-typeinfo.h"
 #include "ov-null-mat.h"
@@ -37,18 +39,20 @@ along with Octave; see the file COPYING.
 #include "xdiv.h"
 #include "xpow.h"
 
 // unary complex scalar ops.
 
 DEFUNOP (not, complex)
 {
   CAST_UNOP_ARG (const octave_complex&);
-
-  return octave_value (v.complex_value () == 0.0);
+  Complex x = v.complex_value ();
+  if (xisnan (x))
+    gripe_nan_to_logical_conversion ();
+  return octave_value (x == 0.0);
 }
 
 DEFUNOP_OP (uplus, complex, /* no-op */)
 DEFUNOP_OP (uminus, complex, -)
 DEFUNOP_OP (transpose, complex, /* no-op */)
 
 DEFUNOP (hermitian, complex)
 {
diff --git a/src/OPERATORS/op-fcs-fcs.cc b/src/OPERATORS/op-fcs-fcs.cc
--- a/src/OPERATORS/op-fcs-fcs.cc
+++ b/src/OPERATORS/op-fcs-fcs.cc
@@ -37,18 +37,20 @@ along with Octave; see the file COPYING.
 #include "xdiv.h"
 #include "xpow.h"
 
 // unary complex scalar ops.
 
 DEFUNOP (not, float_complex)
 {
   CAST_UNOP_ARG (const octave_float_complex&);
-
-  return octave_value (v.float_complex_value () == 0.0);
+  FloatComplex x = v.float_complex_value ();
+  if (xisnan (x))
+    gripe_nan_to_logical_conversion ();
+  return octave_value (x == 0.0f);
 }
 
 DEFUNOP_OP (uplus, float_complex, /* no-op */)
 DEFUNOP_OP (uminus, float_complex, -)
 DEFUNOP_OP (transpose, float_complex, /* no-op */)
 
 DEFUNOP (hermitian, float_complex)
 {
diff --git a/src/OPERATORS/op-fs-fs.cc b/src/OPERATORS/op-fs-fs.cc
--- a/src/OPERATORS/op-fs-fs.cc
+++ b/src/OPERATORS/op-fs-fs.cc
@@ -20,31 +20,41 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
+#include "Array-util.h"
+
 #include "gripes.h"
 #include "oct-obj.h"
 #include "ov.h"
 #include "ov-scalar.h"
 #include "ov-float.h"
 #include "ov-flt-re-mat.h"
 #include "ov-typeinfo.h"
 #include "ov-null-mat.h"
 #include "ops.h"
 #include "xdiv.h"
 #include "xpow.h"
 
 // scalar unary ops.
 
-DEFUNOP_OP (not, float_scalar, !)
+DEFUNOP (not, float_scalar)
+{
+  CAST_UNOP_ARG (const octave_float_scalar&);
+  float x = v.float_value ();
+  if (xisnan (x))
+    gripe_nan_to_logical_conversion ();
+  return octave_value (x == 0.0f);
+}
+
 DEFUNOP_OP (uplus, float_scalar, /* no-op */)
 DEFUNOP_OP (uminus, float_scalar, -)
 DEFUNOP_OP (transpose, float_scalar, /* no-op */)
 DEFUNOP_OP (hermitian, float_scalar, /* no-op */)
 
 DEFNCUNOP_METHOD (incr, float_scalar, increment)
 DEFNCUNOP_METHOD (decr, float_scalar, decrement)
 
diff --git a/src/OPERATORS/op-s-s.cc b/src/OPERATORS/op-s-s.cc
--- a/src/OPERATORS/op-s-s.cc
+++ b/src/OPERATORS/op-s-s.cc
@@ -20,32 +20,42 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
+#include "Array-util.h"
+
 #include "gripes.h"
 #include "oct-obj.h"
 #include "ov.h"
 #include "ov-scalar.h"
 #include "ov-float.h"
 #include "ov-re-mat.h"
 #include "ov-flt-re-mat.h"
 #include "ov-typeinfo.h"
 #include "ov-null-mat.h"
 #include "ops.h"
 #include "xdiv.h"
 #include "xpow.h"
 
 // scalar unary ops.
 
-DEFUNOP_OP (not, scalar, !)
+DEFUNOP (not, scalar)
+{
+  CAST_UNOP_ARG (const octave_scalar&);
+  double x = v.scalar_value ();
+  if (xisnan (x))
+    gripe_nan_to_logical_conversion ();
+  return octave_value (x == 0.0);
+}
+
 DEFUNOP_OP (uplus, scalar, /* no-op */)
 DEFUNOP_OP (uminus, scalar, -)
 DEFUNOP_OP (transpose, scalar, /* no-op */)
 DEFUNOP_OP (hermitian, scalar, /* no-op */)
 
 DEFNCUNOP_METHOD (incr, scalar, increment)
 DEFNCUNOP_METHOD (decr, scalar, decrement)
 
