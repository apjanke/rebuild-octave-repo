# HG changeset patch
# User Rik <rik@octave.org>
# Date 1481303542 28800
#      Fri Dec 09 09:12:22 2016 -0800
# Branch stable
# Node ID 3bc6e9a71d9e5c5a53549785ad49b2789129a232
# Parent  7248717d456a1fe996947d325d7ee62893a4b023
display.m: Correctly display output for non-class objects (bug #49753, bug #49794).

* display.m: Check whether input is an instance of a class,
and error out if found.  If object is really a built-in,
display it using Octave's regular C++ formatter using
evalin() or disp().  Add BIST tests.

diff --git a/scripts/general/display.m b/scripts/general/display.m
--- a/scripts/general/display.m
+++ b/scripts/general/display.m
@@ -44,18 +44,35 @@
 
 function display (obj)
 
   if (nargin != 1)
     print_usage ();
   endif
 
   ## Only reason we got here is that there was no overloaded display function.
-  ## This may mean it is a built-in class.
-  str = disp (obj);
-  if (isempty (strfind (str, "<class ")))
-    disp (str);
+  ## If obj is truly an instance of a class then there is nothing to be done.
+  ## However, if obj is really a built-in like 'double' then we can display it.
+  if (isobject (obj))
+    error ('display: not defined for class "%s"', class (obj));
+  endif
+
+  varname = inputname (1);
+  if (! isempty (varname))
+    evalin ("caller", varname);
   else
-    error ('display: not defined for class "%s"', class (obj));
+    disp (obj);
   endif
 
 endfunction
 
+
+%!test
+%! str = evalc ("x = 1.1; display (x)");
+%! assert (str, "x =  1.1000\n");
+
+%!test
+%! str = evalc ("display (1.1)");
+%! assert (str, " 1.1000\n"); 
+
+## Test input validation
+%!error display ()
+%!error display (1,2)
