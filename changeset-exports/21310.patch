# HG changeset patch
# User Lachlan Andrew <lachlanbis@gmail.com>
# Date 1455416165 -39600
#      Sun Feb 14 13:16:05 2016 +1100
# Node ID fc6a9bd59094b9fb5554668ef0a0b224d6e418da
# Parent  7fbecef105caaa701a09f83b53240a25a2184632
backout changeset e8c3590da9ff

diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -56,24 +56,24 @@ along with Octave; see the file COPYING.
 #include <QTextCodec>
 #include <QStyle>
 #include <QTextBlock>
 #include <QLabel>
 #include <QCheckBox>
 #include <QDialogButtonBox>
 #include <QPushButton>
 
-#include "file-ops.h"
-
 #include "resource-manager.h"
 #include "file-editor-tab.h"
 #include "file-editor.h"
 #include "octave-txt-lexer.h"
 #include "marker.h"
 
+#include "file-ops.h"
+
 #include "debug.h"
 #include "octave-qt-link.h"
 #include "version.h"
 #include "utils.h"
 #include "defaults.h"
 #include "unwind-prot.h"
 #include <oct-map.h>
 
@@ -82,25 +82,23 @@ bool file_editor_tab::_cancelled = false
 /**
  A file_editor_tab object consists of a text area and three left margins.
  The first holds breakpoints, bookmarks, and the debug program counter.
  The second holds line numbers.
  The third holds "fold" marks, to hide sections of text.
  */
 // Make parent null for the file editor tab so that warning
 // WindowModal messages don't affect grandparents.
-file_editor_tab::file_editor_tab (octave_dock_widget *editor,
-                                  const QString& directory_arg)
+file_editor_tab::file_editor_tab (const QString& directory_arg)
 {
   _lexer_apis = 0;
   _is_octave_file = true;
   _lines_changed = false;
 
   _ced = directory_arg;
-  _main_win = static_cast<main_window*> (editor->parent ());
 
   _file_name = "";
   _file_system_watcher.setObjectName ("_qt_autotest_force_engine_poller");
 
   _edit_area = new octave_qscintilla (this);
   _line = 0;
   _col  = 0;
 
@@ -330,17 +328,17 @@ void
 file_editor_tab::handle_context_menu_break_condition (int linenr)
 {
   QString cond;
   bp_info info (_file_name, linenr);  // Get function name & dir from filename.
 
   // Ensure editor line numbers match Octave core's line numbers.
   // Give users the option to save modifications if necessary.
   if (! unchanged_or_saved ()
-     || !(_main_win->get_octave_qt_link ()->file_in_path (info.file, info.dir)))
+     || !(octave_qt_link::file_in_path (info.file, info.dir)))
     return;
 
   // Search for previous condition.  FIXME -- is there a more direct way?
   if (_edit_area->markersAtLine (linenr) & (1 << marker::cond_break))
     {
       emit report_marker_linenr (_bp_lines, _bp_conditions);
       for (int i = 0; i < _bp_lines.length (); i++)
         if (_bp_lines.value (i) == linenr)
@@ -924,34 +922,34 @@ file_editor_tab::remove_bookmark (const 
 }
 
 void
 file_editor_tab::add_breakpoint_callback (const bp_info& info)
 {
   bp_table::intmap line_info;
   line_info[0] = info.line;
 
-  if (_main_win->get_octave_qt_link ()->file_in_path (info.file, info.dir))
+  if (octave_qt_link::file_in_path (info.file, info.dir))
     bp_table::add_breakpoint (info.function_name, line_info, info.condition);
 }
 
 void
 file_editor_tab::remove_breakpoint_callback (const bp_info& info)
 {
   bp_table::intmap line_info;
   line_info[0] = info.line;
 
-  if (_main_win->get_octave_qt_link ()->file_in_path (info.file, info.dir))
+  if (octave_qt_link::file_in_path (info.file, info.dir))
     bp_table::remove_breakpoint (info.function_name, line_info);
 }
 
 void
 file_editor_tab::remove_all_breakpoints_callback (const bp_info& info)
 {
-  if (_main_win->get_octave_qt_link ()->file_in_path (info.file, info.dir))
+  if (octave_qt_link::file_in_path (info.file, info.dir))
     bp_table::remove_all_breakpoints_in_file (info.function_name, true);
 }
 
 file_editor_tab::bp_info::bp_info (const QString& fname, int l,
                                    const QString& cond)
   : line (l), file (fname.toStdString ()), condition (cond.toStdString ())
 {
   QFileInfo file_info (fname);
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -38,31 +38,30 @@ along with Octave; see the file COPYING.
 #ifdef HAVE_CONFIG_H
 #  include "config.h"
 #  include "ovl.h"
 #endif
 
 #include "find-dialog.h"
 #include "octave-qscintilla.h"
 #include "builtin-defun-decls.h"
-#include "main-window.h"
 
 #include "marker.h" /* Only needed for typedef of "QIntList", which may be
                        typedefed elsewhere.  Could use common location. */
 
 
 class file_editor;
 
 class file_editor_tab : public QWidget
 {
   Q_OBJECT
 
 public:
 
-  file_editor_tab (octave_dock_widget *editor, const QString& directory = "");
+  file_editor_tab (const QString& directory = "");
 
   ~file_editor_tab (void);
 
   octave_qscintilla *qsci_edit_area () { return _edit_area; }
 
   // Will initiate close if associated with the identifier tag.
   bool conditional_close (void);
 
@@ -253,17 +252,16 @@ private:
   QString get_function_name ();
 
   void do_smart_indent (void);
 
   QsciScintilla::EolMode detect_eol_mode ();
   void update_eol_indicator ();
 
   octave_qscintilla *_edit_area;
-  main_window *_main_win;
 
   QStatusBar *_status_bar;
   QLabel *_row_indicator;
   QLabel *_col_indicator;
   QLabel *_eol_indicator;
   QLabel *_enc_indicator;
 
   QsciScintilla::EolMode _save_as_desired_eol;
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -196,17 +196,17 @@ file_editor::request_new_file (const QSt
   // some initial contents and even without being sure a new file is opened
   if (call_custom_editor ())
     return;
 
   // New file isn't a file_editor_tab function since the file
   // editor tab has yet to be created and there is no object to
   // pass a signal to.  Hence, functionality is here.
 
-  file_editor_tab *fileEditorTab = new file_editor_tab (this, ced);
+  file_editor_tab *fileEditorTab = new file_editor_tab (ced);
   if (fileEditorTab)
     {
       add_file_editor_tab (fileEditorTab, "");  // new tab with empty title
       fileEditorTab->new_file (commands);       // title is updated here
       focus ();                                 // focus editor and new tab
     }
 }
 
@@ -449,17 +449,17 @@ file_editor::request_open_file (const QS
           if (! ((breakpoint_marker || debug_pointer) && is_editor_console_tabbed ()))
             {
               emit fetab_set_focus (tab);
               focus ();
             }
         }
       else
         {
-          file_editor_tab *fileEditorTab = new file_editor_tab (this);
+          file_editor_tab *fileEditorTab = new file_editor_tab ();
           if (fileEditorTab)
             {
               fileEditorTab->set_encoding (encoding);
               QString result = fileEditorTab->load_file (openFileName);
               if (result == "")
                 {
                   // Supply empty title then have the file_editor_tab update
                   // with full or short name.
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -333,17 +333,17 @@ main_window::run_file_in_terminal (const
   octave_link::post_event (this, &main_window::run_file_callback, info);
   if (focus_console_after_command ())
     focus_command_window ();
 }
 
 void
 main_window::run_file_callback (const QFileInfo& info)
 {
-  octave_cmd_eval *cmd = new octave_cmd_eval (info, _octave_qt_link);
+  octave_cmd_eval *cmd = new octave_cmd_eval (info);
   _cmd_queue.add_cmd (cmd);
 }
 
 void
 main_window::handle_new_figure_request (void)
 {
   octave_link::post_event (this, &main_window::new_figure_callback);
 }
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -77,18 +77,16 @@ public:
   main_window (QWidget *parent = 0, bool start_gui = true);
 
   ~main_window (void);
 
   bool command_window_has_focus (void) const;
 
   void focus_command_window (void);
 
-  octave_qt_link* get_octave_qt_link () { return _octave_qt_link; };
-
 signals:
 
   void active_dock_changed (octave_dock_widget *, octave_dock_widget *);
   void editor_focus_changed (bool);
 
   void settings_changed (const QSettings *);
   void init_terminal_size_signal (void);
   void new_file_signal (const QString&);
diff --git a/libgui/src/octave-cmd.cc b/libgui/src/octave-cmd.cc
--- a/libgui/src/octave-cmd.cc
+++ b/libgui/src/octave-cmd.cc
@@ -28,17 +28,16 @@ along with Octave; see the file COPYING.
 
 #include "octave-cmd.h"
 
 #include "octave-qt-link.h"
 #include "cmd-edit.h"
 #include "builtin-defun-decls.h"
 #include "utils.h"
 
-#include "main-window.h"
 
 // ---------------------------------------------------------------------
 //  class octave_cmd_exec: executing a command
 
 void
 octave_cmd_exec::execute ()
 {
   std::string pending_input = command_editor::get_current_line ();
@@ -61,17 +60,17 @@ octave_cmd_eval::execute ()
   std::string file_path = _info.absoluteFilePath ().toStdString ();
 
   std::string pending_input = command_editor::get_current_line ();
 
   if (valid_identifier (function_name.toStdString ()))
     {
       // valid identifier: call as function with possibility to debug
       std::string path = _info.absolutePath ().toStdString ();
-      if (_octave_qt_link->file_in_path (file_path, path))
+      if (octave_qt_link::file_in_path (file_path, path))
         command_editor::replace_line (function_name.toStdString ());
     }
   else
     {
       // no valid identifier: use Fsource (), no debug possible
       Fsource (ovl (file_path));
       command_editor::replace_line ("");
     }
diff --git a/libgui/src/octave-cmd.h b/libgui/src/octave-cmd.h
--- a/libgui/src/octave-cmd.h
+++ b/libgui/src/octave-cmd.h
@@ -61,28 +61,22 @@ protected:
 
 // ---------------------------------------------------------------------
 //  class octave_cmd_eval
 
 class octave_cmd_eval : public octave_cmd
 {
 public:
 
-  octave_cmd_eval (const QFileInfo& info,
-                   octave_qt_link* octave_qt_link) : octave_cmd ()
-    { _info = info;
-      _octave_qt_link = octave_qt_link;
-    };
-
+  octave_cmd_eval (const QFileInfo& info) : octave_cmd () { _info = info; };
   void execute ();
 
 protected:
 
   QFileInfo _info;
-  octave_qt_link *_octave_qt_link;
 };
 
 
 // ---------------------------------------------------------------------
 //  class octave_cmd_debug
 
 class octave_cmd_debug : public octave_cmd_exec
 {
diff --git a/libgui/src/octave-qt-link.cc b/libgui/src/octave-qt-link.cc
--- a/libgui/src/octave-qt-link.cc
+++ b/libgui/src/octave-qt-link.cc
@@ -605,17 +605,16 @@ octave_qt_link::file_in_path (const std:
 
   if (! ok)
     {
       int action = debug_cd_or_addpath_error (file, dir, addpath_option);
       switch (action)
         {
         case 1:
           Fcd (ovl (dir));
-          update_directory ();
           ok = true;
           break;
 
         case 2:
           load_path::prepend (dir);
           ok = true;
           break;
 
diff --git a/libgui/src/octave-qt-link.h b/libgui/src/octave-qt-link.h
--- a/libgui/src/octave-qt-link.h
+++ b/libgui/src/octave-qt-link.h
@@ -125,17 +125,17 @@ public:
   void do_exit_debugger_event (void);
 
   void do_update_breakpoint (bool insert, const std::string& file, int line,
                              const std::string& cond);
 
   void do_set_default_prompts (std::string& ps1, std::string& ps2,
                                std::string& ps4);
 
-  bool file_in_path (const std::string& file, const std::string& dir);
+  static bool file_in_path (const std::string& file, const std::string& dir);
 
   void do_show_preferences (void);
 
   void do_show_doc (const std::string& file);
 
   QMutex mutex;
   QWaitCondition waitcondition;
   void shutdown_confirmation (bool sd) {_shutdown_confirm_result = sd;}
