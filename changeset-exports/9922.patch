# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1260045047 -3600
#      Sat Dec 05 21:30:47 2009 +0100
# Node ID 3a8327d51ed447d07aec1a116672911dcf10ab1b
# Parent  7c8392a034e61a89f4585e5301fdf28cd5ef65d2
optimize issorted for doubles & floats

diff --git a/liboctave/Array-d.cc b/liboctave/Array-d.cc
--- a/liboctave/Array-d.cc
+++ b/liboctave/Array-d.cc
@@ -79,16 +79,86 @@ safe_comparator (sortmode mode, const Ar
         result = nan_ascending_compare;
       else if (mode == DESCENDING)
         result = nan_descending_compare;
     }
 
   return result;
 }
 
+// The default solution using NaN-safe comparator is OK, but almost twice as
+// slow than this code.
+template <>
+sortmode
+Array<double>::is_sorted (sortmode mode) const
+{
+  octave_idx_type n = numel ();
+
+  const double *el = data ();
+
+  if (n <= 1)
+    return mode ? mode : ASCENDING;
+
+  if (! mode)
+    {
+      // Auto-detect mode.
+      if (el[n-1] < el[0] || xisnan (el[0]))
+        mode = DESCENDING;
+      else
+        mode = ASCENDING;
+    }
+
+  if (mode == DESCENDING)
+    {
+      octave_idx_type j = 0;
+      double r;
+      // Sort out NaNs.
+      do
+        r = el[j++];
+      while (xisnan (r) && j < n);
+
+      // Orient the test so that NaN will not pass through. 
+      for (; j < n; j++)
+        {
+          if (r >= el[j])
+            r = el[j];
+          else
+            {
+              mode = UNSORTED;
+              break;
+            }
+        }
+
+    }
+  else if (mode == ASCENDING)
+    {
+      // Sort out NaNs.
+      while (n > 0 && xisnan (el[n-1]))
+        n--;
+
+      if (n > 0)
+        {
+          // Orient the test so that NaN will not pass through. 
+          double r = el[0];
+          for (octave_idx_type j = 1; j < n; j++)
+            {
+              if (r <= el[j])
+                r = el[j];
+              else
+                {
+                  mode = UNSORTED;
+                  break;
+                }
+            }
+        }
+    }
+
+  return mode;
+}
+
 INSTANTIATE_ARRAY_SORT (double);
 
 INSTANTIATE_ARRAY (double, OCTAVE_API);
 
 #include "Array2.h"
 
 template class OCTAVE_API Array2<double>;
 
diff --git a/liboctave/Array-f.cc b/liboctave/Array-f.cc
--- a/liboctave/Array-f.cc
+++ b/liboctave/Array-f.cc
@@ -79,16 +79,86 @@ safe_comparator (sortmode mode, const Ar
         result = nan_ascending_compare;
       else if (mode == DESCENDING)
         result = nan_descending_compare;
     }
 
   return result;
 }
 
+// The default solution using NaN-safe comparator is OK, but almost twice as
+// slow than this code.
+template <>
+sortmode
+Array<float>::is_sorted (sortmode mode) const
+{
+  octave_idx_type n = numel ();
+
+  const float *el = data ();
+
+  if (n <= 1)
+    return mode ? mode : ASCENDING;
+
+  if (! mode)
+    {
+      // Auto-detect mode.
+      if (el[n-1] < el[0] || xisnan (el[0]))
+        mode = DESCENDING;
+      else
+        mode = ASCENDING;
+    }
+
+  if (mode == DESCENDING)
+    {
+      octave_idx_type j = 0;
+      float r;
+      // Sort out NaNs.
+      do
+        r = el[j++];
+      while (xisnan (r) && j < n);
+
+      // Orient the test so that NaN will not pass through. 
+      for (; j < n; j++)
+        {
+          if (r >= el[j])
+            r = el[j];
+          else
+            {
+              mode = UNSORTED;
+              break;
+            }
+        }
+
+    }
+  else if (mode == ASCENDING)
+    {
+      // Sort out NaNs.
+      while (n > 0 && xisnan (el[n-1]))
+        n--;
+
+      if (n > 0)
+        {
+          // Orient the test so that NaN will not pass through. 
+          float r = el[0];
+          for (octave_idx_type j = 1; j < n; j++)
+            {
+              if (r <= el[j])
+                r = el[j];
+              else
+                {
+                  mode = UNSORTED;
+                  break;
+                }
+            }
+        }
+    }
+
+  return mode;
+}
+
 INSTANTIATE_ARRAY_SORT (float);
 
 INSTANTIATE_ARRAY (float, OCTAVE_API);
 
 #include "Array2.h"
 
 template class OCTAVE_API Array2<float>;
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2009-12-05  Jaroslav Hajek  <highegg@gmail.com>
+
+	* Array-d.cc (Array<double>::is_sorted): Optimized specialization.
+	* Array-f.cc (Array<float>::is_sorted): Ditto.
+
 2009-12-05  Jaroslav Hajek  <highegg@gmail.com>
 
 	* oct-sort.cc (lookup_binary): Remove.
 	(octave_sort<T>::lookup (const T*, octave_idx_type, const T&, comp)): Move
 	code here.
 	(octave_sort<T>::lookup (const T*, octave_idx_type, const T*,
 	octave_idx_type, octave_idx_type *, comp)): Remove offset parameter.
 	Use a simple sequence of lookups.
