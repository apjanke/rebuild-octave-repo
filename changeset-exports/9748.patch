# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1256133118 14400
#      Wed Oct 21 09:51:58 2009 -0400
# Node ID d6b2b708b6b0495d5dce5525507da36d49c93323
# Parent  7bda650b691a21434cddb2452a0fbc77c558a9ca
load-path: compare directory timestamps with tolerance

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,16 @@
+2009-10-21  John W. Eaton  <jwe@octave.org>
+
+	* oct-time.h 	(octave_time::octave_time (time_t t, int us)):
+	New constructor.
+	(operator + (const octave_time&, const octave_time&)): New function.
+
+	* file-stat.h (base_file_stat::time_resolution): New function.
+
 2009-10-20  Jaroslav Hajek  <highegg@gmail.com>
 
 	* bsxfun-decl.h, bsxfun-defs.cc: New sources.
 	* Makefile.in: Add them.
 	* dim-vector.h (dim_vector::compute_index,
 	dim_vector::increment_index): Fix.
 	* mx-inlines.cc (DEFMXMAPPER, DEFMXLOCALMAPPER): New macros.
 	(mx_inline_xmin, mx_inline_xmax): New loops.
diff --git a/liboctave/file-stat.h b/liboctave/file-stat.h
--- a/liboctave/file-stat.h
+++ b/liboctave/file-stat.h
@@ -74,16 +74,25 @@ public:
 	fs_blocks = fs.fs_blocks;
       }
 
     return *this;
   }
 
   ~base_file_stat (void) { }
 
+  // The minimum difference in file time stamp values.
+  // FIXME -- this value should come from the filesystem itself.  How
+  // can we get that info?
+  octave_time time_resolution (void) const
+  {
+    static octave_time resolution (1.0);
+    return resolution;
+  }
+
   // File status and info.  The is_XXX functions will return false for
   // file_stat objects that are not properly initialized.  The others
   // should all return 0 (or the equivalent, for the given object)
   // which is likely not meaningful.
 
   bool is_blk (void) const;
   bool is_chr (void) const;
   bool is_dir (void) const;
diff --git a/liboctave/oct-time.h b/liboctave/oct-time.h
--- a/liboctave/oct-time.h
+++ b/liboctave/oct-time.h
@@ -37,16 +37,38 @@ octave_time
 public:
 
   octave_time (void)
     : ot_unix_time (0), ot_usec (0) { stamp (); }
 
   octave_time (time_t t)
     : ot_unix_time (t), ot_usec (0) { }
 
+  octave_time (time_t t, int us)
+    : ot_unix_time (t), ot_usec ()
+  {
+    int rem, extra;
+
+    if (us >= 0)
+      {
+	rem = us % 1000000;
+	extra = (us - rem) / 1000000;
+      }
+    else
+      {
+	us = -us;
+	rem = us % 1000000;
+	extra = - (1 + (us - rem) / 1000000);
+	rem = 1000000 - us % 1000000;
+      }
+
+    ot_usec = rem;
+    ot_unix_time += extra;
+  }
+
   octave_time (double d)
     : ot_unix_time (static_cast<time_t> (d)), ot_usec (0)
   {
     double ip;
     ot_usec = static_cast<int> (std::modf (d, &ip) * 1e6);
   }
 
   octave_time (const octave_base_tm& tm);
@@ -131,16 +153,23 @@ operator > (const octave_time& t1, const
 }
 
 inline bool
 operator >= (const octave_time& t1, const octave_time& t2)
 {
   return (t1 > t2 || t1 == t2);
 }
 
+inline octave_time
+operator + (const octave_time& t1, const octave_time& t2)
+{
+  return octave_time (t1.unix_time () + t2.unix_time (),
+		      t1.usec () + t2.usec ());
+}
+
 class
 OCTAVE_API
 octave_base_tm
 {
 public:
 
   octave_base_tm (void)
     : tm_usec (0), tm_sec (0), tm_min (0), tm_hour (0),
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,19 @@
+2009-10-21  John W. Eaton  <jwe@octave.org>
+
+	* load-path.h (load_path::dir_path::dir_time_last_checked): New field.
+	(load_path::dir_path::dir_path, load_path::dir_path::operator=):
+	Initialize and copy dir_time_last_checked.
+	* load-path.cc 	(load_path::dir_info::initialize): Store time of
+	last update.
+	(load_path::dir_info::update): Check directory modification time
+	against time of last update, within resolution of filesystem time
+	stamps.  Suggested by Judd Storrs <storrsjm@email.uc.edu>.
+
 2009-10-20  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-base.h (builtin_type_t): Declare also btyp_num_types.
 	* DLD-FUNCTIONS/bsxfun.cc (bsxfun_builtin_op): New enum.
 	(bsxfun_handler): New typedef.
 	(bsxfun_builtin_names, bsxfun_handler_table): New variables.
 	(bsxfun_builtin_lookup, maybe_fill_table, maybe_optimized_builtin):
 	New static funcs.
diff --git a/src/load-path.cc b/src/load-path.cc
--- a/src/load-path.cc
+++ b/src/load-path.cc
@@ -71,53 +71,56 @@ load_path::dir_info::update (void)
 		  // we have visited (indexed by its absolute name).
 		  // If it is out of date, initialize it.  Otherwise,
 		  // copy the info from the cache.  By doing that, we
 		  // avoid unnecessary calls to stat that can slow
 		  // things down tremendously for large directories.
 
 		  const dir_info& di = p->second;
 
-		  if (fs.mtime () != di.dir_mtime)
+		  if (fs.mtime () + fs.time_resolution () > di.dir_time_last_checked)
 		    initialize ();
 		  else
 		    *this = di;
 
 		  return;
 		}
 	    }
 	  catch (octave_execution_exception)
 	    {
 	      // Skip updating if we don't know where we are, but
 	      // don't treat it as an error.
 
 	      error_state = 0;
 	    }
 	}
 
-      if (fs.mtime () != dir_mtime)
+      if (fs.mtime () + fs.time_resolution () > dir_time_last_checked)
 	initialize ();
     }
   else
     {
       std::string msg = fs.error ();
       warning ("load_path: %s: %s", dir_name.c_str (), msg.c_str ());
     }
 }
 
 void
 load_path::dir_info::initialize (void)
 {
   is_relative = ! octave_env::absolute_pathname (dir_name);
 
+  dir_time_last_checked = octave_time (static_cast<time_t> (0));
+
   file_stat fs (dir_name);
 
   if (fs)
     {
       dir_mtime = fs.mtime ();
+      dir_time_last_checked = octave_time ();
 
       get_file_list (dir_name);
 
       try
 	{
 	  std::string abs_name
 	    = octave_env::make_absolute (dir_name, octave_env::getcwd ());
 
diff --git a/src/load-path.h b/src/load-path.h
--- a/src/load-path.h
+++ b/src/load-path.h
@@ -269,46 +269,49 @@ private:
     // constructor for any other purpose.
     dir_info (void) { }
 
     dir_info (const std::string& d) : dir_name (d) { initialize (); }
 
     dir_info (const dir_info& di)
       : dir_name (di.dir_name), abs_dir_name (di.abs_dir_name),
 	is_relative (di.is_relative),
-	dir_mtime (di.dir_mtime), all_files (di.all_files),
-	fcn_files (di.fcn_files),
+	dir_mtime (di.dir_mtime),
+	dir_time_last_checked (di.dir_time_last_checked), 
+	all_files (di.all_files), fcn_files (di.fcn_files),
 	private_file_map (di.private_file_map),
 	method_file_map (di.method_file_map) { }
 
     ~dir_info (void) { }
 
     dir_info& operator = (const dir_info& di)
     {
       if (&di != this)
 	{
 	  dir_name = di.dir_name;
 	  abs_dir_name = di.abs_dir_name;
 	  is_relative = di.is_relative;
 	  dir_mtime = di.dir_mtime;
+	  dir_time_last_checked = di.dir_time_last_checked;
 	  all_files = di.all_files;
 	  fcn_files = di.fcn_files;
 	  private_file_map = di.private_file_map;
 	  method_file_map = di.method_file_map;
 	}
 
       return *this;
     }
 
     void update (void);
 
     std::string dir_name;
     std::string abs_dir_name;
     bool is_relative;
     octave_time dir_mtime;
+    octave_time dir_time_last_checked;
     string_vector all_files;
     string_vector fcn_files;
     fcn_file_map_type private_file_map;
     method_file_map_type method_file_map;
 
   private:
 
     void initialize (void);
