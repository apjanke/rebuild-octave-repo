# HG changeset patch
# User Rik <rik@octave.org>
# Date 1452794347 28800
#      Thu Jan 14 09:59:07 2016 -0800
# Node ID fd97ed44f2da32f5c89d0888e759088239393cbe
# Parent  a1aadf619e3c4fe8ffbb64e06d31662b2eae9011
doc: Use more coding conventions in Object Oriented reference example code.

* examples/code/@FIRfilter/FIRfilter.m,
examples/code/@FIRfilter/FIRfilter_aggregation.m,
examples/code/@FIRfilter/subsasgn.m, examples/code/@FIRfilter/subsref.m,
examples/code/@polynomial/display.m, examples/code/@polynomial/double.m,
examples/code/@polynomial/get.m, examples/code/@polynomial/mtimes.m,
examples/code/@polynomial/numel.m, examples/code/@polynomial/polynomial.m,
examples/code/@polynomial/polynomial_superiorto.m,
examples/code/@polynomial/polyval.m, examples/code/@polynomial/roots.m,
examples/code/@polynomial/set.m, examples/code/@polynomial/subsasgn.m,
examples/code/@polynomial/subsref.m:
Remove "Function File" from deftypefn.  Use names of variables in error
messages.  Surround invalid items in error messages with single quotes.
Use meaningful variable names.

diff --git a/examples/code/@FIRfilter/FIRfilter.m b/examples/code/@FIRfilter/FIRfilter.m
--- a/examples/code/@FIRfilter/FIRfilter.m
+++ b/examples/code/@FIRfilter/FIRfilter.m
@@ -1,22 +1,22 @@
 ## -*- texinfo -*-
-## @deftypefn  {Function File} {} FIRfilter ()
-## @deftypefnx {Function File} {} FIRfilter (@var{p})
+## @deftypefn  {} {} FIRfilter ()
+## @deftypefnx {} {} FIRfilter (@var{p})
 ## Create a FIR filter with polynomial @var{p} as coefficient vector.
 ## @end deftypefn
 
 function f = FIRfilter (p)
 
   if (nargin > 1)
     print_usage ();
   endif
 
   if (nargin == 0)
     p = @polynomial ([1]);
   elseif (! isa (p, "polynomial"))
-    error ("@FIRfilter: expecting polynomial as input argument");
+    error ("@FIRfilter: P must be a polynomial object");
   endif
 
   f.polynomial = [];
   f = class (f, "FIRfilter", p);
 
 endfunction
diff --git a/examples/code/@FIRfilter/FIRfilter_aggregation.m b/examples/code/@FIRfilter/FIRfilter_aggregation.m
--- a/examples/code/@FIRfilter/FIRfilter_aggregation.m
+++ b/examples/code/@FIRfilter/FIRfilter_aggregation.m
@@ -1,25 +1,25 @@
 ## -*- texinfo -*-
-## @deftypefn  {Function File} {} FIRfilter ()
-## @deftypefnx {Function File} {} FIRfilter (@var{p})
+## @deftypefn  {} {} FIRfilter ()
+## @deftypefnx {} {} FIRfilter (@var{p})
 ## Create a FIR filter with polynomial @var{p} as coefficient vector.
 ## @end deftypefn
 
 function f = FIRfilter (p)
 
   if (nargin > 1)
     print_usage ();
   endif
 
   if (nargin == 0)
     f.polynomial = @polynomial ([1]);
   else
     if (! isa (p, "polynomial"))
-      error ("FIRfilter: expecting polynomial as input argument");
+      error ("@FIRfilter: P must be a polynomial object");
     endif
 
     f.polynomial = p;
   endif
 
   f = class (f, "FIRfilter");
 
 endfunction
diff --git a/examples/code/@FIRfilter/subsasgn.m b/examples/code/@FIRfilter/subsasgn.m
--- a/examples/code/@FIRfilter/subsasgn.m
+++ b/examples/code/@FIRfilter/subsasgn.m
@@ -1,16 +1,16 @@
-function out = subsasgn (f, index, val)
+function fout = subsasgn (f, index, val)
 
   switch (index.type)
     case "."
       fld = index.subs;
       if (! strcmp (fld, "polynomial"))
-        error ('@FIRfilter/subsasgn: invalid property "%s"', fld);
+        error ("@FIRfilter/subsasgn: invalid property '%s'", fld);
       endif
-      out = f;
-      out.polynomial = val;
+      fout = f;
+      fout.polynomial = val;
 
     otherwise
       error ("@FIRfilter/subsasgn: Invalid index type")
   endswitch
 
 endfunction
diff --git a/examples/code/@FIRfilter/subsref.m b/examples/code/@FIRfilter/subsref.m
--- a/examples/code/@FIRfilter/subsref.m
+++ b/examples/code/@FIRfilter/subsref.m
@@ -1,20 +1,21 @@
-function out = subsref (f, x)
+function r = subsref (f, x)
 
   switch (x.type)
+
     case "()"
       n = f.polynomial;
-      out = filter (n.poly, 1, x.subs{1});
+      r = filter (n.poly, 1, x.subs{1});
 
     case "."
       fld = x.subs;
       if (! strcmp (fld, "polynomial"))
-        error ('@FIRfilter/subsref: invalid property "%s"', fld);
+        error ("@FIRfilter/subsref: invalid property '%s'", fld);
       endif
-      out = f.polynomial;
+      r = f.polynomial;
 
     otherwise
       error ("@FIRfilter/subsref: invalid subscript type for FIR filter");
 
   endswitch
 
 endfunction
diff --git a/examples/code/@polynomial/display.m b/examples/code/@polynomial/display.m
--- a/examples/code/@polynomial/display.m
+++ b/examples/code/@polynomial/display.m
@@ -1,27 +1,28 @@
 function display (p)
 
+  printf ("%s =", inputname (1));
+
   a = p.poly;
   first = true;
-  printf ("%s =", inputname (1));
   for i = 1 : length (a);
     if (a(i) != 0)
       if (first)
         first = false;
-      elseif (a(i) > 0)
+      elseif (a(i) > 0 || isnan (a(i)))
         printf (" +");
       endif
       if (a(i) < 0)
         printf (" -");
       endif
       if (i == 1)
-        printf (" %g", abs (a(i)));
-      elseif (abs(a(i)) != 1)
-        printf (" %g *", abs (a(i)));
+        printf (" %.5g", abs (a(i)));
+      elseif (abs (a(i)) != 1)
+        printf (" %.5g *", abs (a(i)));
       endif
       if (i > 1)
         printf (" X");
       endif
       if (i > 2)
         printf (" ^ %d", i - 1);
       endif
     endif
diff --git a/examples/code/@polynomial/double.m b/examples/code/@polynomial/double.m
--- a/examples/code/@polynomial/double.m
+++ b/examples/code/@polynomial/double.m
@@ -1,3 +1,3 @@
-function b = double (a)
-  b = a.poly;
+function a = double (p)
+  a = p.poly;
 endfunction
diff --git a/examples/code/@polynomial/get.m b/examples/code/@polynomial/get.m
--- a/examples/code/@polynomial/get.m
+++ b/examples/code/@polynomial/get.m
@@ -1,22 +1,22 @@
-function s = get (p, f)
+function val = get (p, prop)
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
   endif
 
   if (nargin == 1)
-    s.poly = p.poly;
+    val.poly = p.poly;
   else
-    if (! ischar (f))
-      error ("@polynomial/get: expecting the property to be a string");
+    if (! ischar (prop))
+      error ("@polynomial/get: PROPERTY must be a string");
     endif
 
-    switch (f)
+    switch (prop)
       case "poly"
-        s = p.poly;
+        val = p.poly;
       otherwise
-        error ("@polynomial/get: invalid property %s", f);
+        error ("@polynomial/get: invalid PROPERTY '%s'", prop);
     endswitch
   endif
 
 endfunction
diff --git a/examples/code/@polynomial/mtimes.m b/examples/code/@polynomial/mtimes.m
--- a/examples/code/@polynomial/mtimes.m
+++ b/examples/code/@polynomial/mtimes.m
@@ -1,3 +1,3 @@
-function y = mtimes (a, b)
-  y = polynomial (conv (double (a), double (b)));
+function p = mtimes (a, b)
+  p = polynomial (conv (double (a), double (b)));
 endfunction
diff --git a/examples/code/@polynomial/numel.m b/examples/code/@polynomial/numel.m
--- a/examples/code/@polynomial/numel.m
+++ b/examples/code/@polynomial/numel.m
@@ -1,4 +1,3 @@
 function n = numel (obj, idx)
   n = 1;  # always produce an array.
 endfunction
-
diff --git a/examples/code/@polynomial/polynomial.m b/examples/code/@polynomial/polynomial.m
--- a/examples/code/@polynomial/polynomial.m
+++ b/examples/code/@polynomial/polynomial.m
@@ -1,11 +1,11 @@
 ## -*- texinfo -*-
-## @deftypefn  {Function File} {} polynomial ()
-## @deftypefnx {Function File} {} polynomial (@var{a})
+## @deftypefn  {} {} polynomial ()
+## @deftypefnx {} {} polynomial (@var{a})
 ## Create a polynomial object representing the polynomial
 ##
 ## @example
 ## a0 + a1 * x + a2 * x^2 + @dots{} + an * x^n
 ## @end example
 ##
 ## @noindent
 ## from a vector of coefficients [a0 a1 a2 @dots{} an].
@@ -18,17 +18,17 @@ function p = polynomial (a)
   endif
 
   if (nargin == 0)
     p.poly = [0];
     p = class (p, "polynomial");
   else
     if (strcmp (class (a), "polynomial"))
       p = a;
-    elseif (isvector (a) && isreal (a))
+    elseif (isreal (a) && isvector (a))
       p.poly = a(:).';  # force row vector
       p = class (p, "polynomial");
     else
-      error ("@polynomial: expecting real vector");
+      error ("@polynomial: A must be a real vector");
     endif
   endif
 
 endfunction
diff --git a/examples/code/@polynomial/polynomial_superiorto.m b/examples/code/@polynomial/polynomial_superiorto.m
--- a/examples/code/@polynomial/polynomial_superiorto.m
+++ b/examples/code/@polynomial/polynomial_superiorto.m
@@ -1,11 +1,11 @@
 ## -*- texinfo -*-
-## @deftypefn  {Function File} {} polynomial ()
-## @deftypefnx {Function File} {} polynomial (@var{a})
+## @deftypefn  {} {} polynomial ()
+## @deftypefnx {} {} polynomial (@var{a})
 ## Create a polynomial object representing the polynomial
 ##
 ## @example
 ## a0 + a1 * x + a2 * x^2 + @dots{} + an * x^n
 ## @end example
 ##
 ## @noindent
 ## from a vector of coefficients [a0 a1 a2 @dots{} an].
@@ -18,19 +18,19 @@ function p = polynomial (a)
   endif
 
   if (nargin == 0)
     p.poly = [0];
     p = class (p, "polynomial");
   else
     if (strcmp (class (a), "polynomial"))
       p = a;
-    elseif (isvector (a) && isreal (a))
+    elseif (isreal (a) && isvector (a))
       p.poly = a(:).';  # force row vector
       p = class (p, "polynomial");
     else
-      error ("@polynomial: expecting real vector");
+      error ("@polynomial: A must be a real vector");
     endif
   endif
 
   superiorto ("double");
 
 endfunction
diff --git a/examples/code/@polynomial/polyval.m b/examples/code/@polynomial/polyval.m
--- a/examples/code/@polynomial/polyval.m
+++ b/examples/code/@polynomial/polyval.m
@@ -1,9 +1,9 @@
 function [y, dy] = polyval (p, varargin)
 
-  if (nargout == 2)
+  if (nargout > 1)
     [y, dy] = polyval (fliplr (p.poly), varargin{:});
   else
     y = polyval (fliplr (p.poly), varargin{:});
   endif
 
 endfunction
diff --git a/examples/code/@polynomial/roots.m b/examples/code/@polynomial/roots.m
--- a/examples/code/@polynomial/roots.m
+++ b/examples/code/@polynomial/roots.m
@@ -1,3 +1,3 @@
-function y = roots (p)
-  y = roots (fliplr (p.poly));
+function r = roots (p)
+  r = roots (fliplr (p.poly));
 endfunction
diff --git a/examples/code/@polynomial/set.m b/examples/code/@polynomial/set.m
--- a/examples/code/@polynomial/set.m
+++ b/examples/code/@polynomial/set.m
@@ -1,21 +1,21 @@
-function s = set (p, varargin)
+function pout = set (p, varargin)
 
   if (numel (varargin) < 2 || rem (numel (varargin), 2) != 0)
-    error ("@polynomial/set: expecting property/value pairs");
+    error ("@polynomial/set: expecting PROPERTY/VALUE pairs");
   endif
 
-  s = p;
+  pout = p;
   while (numel (varargin) > 1)
     prop = varargin{1};
     val  = varargin{2};
     varargin(1:2) = [];
     if (! ischar (prop) || ! strcmp (prop, "poly"))
-      error ("@polynomial/set: invalid property of polynomial class");
-    elseif (! (isvector (val) && isreal (val)))
-      error ("@polynomial/set: expecting the value to be a real vector");
+      error ("@polynomial/set: invalid PROPERTY for polynomial class");
+    elseif (! (isreal (val) && isvector (val)))
+      error ("@polynomial/set: VALUE must be a real vector");
     endif
 
-    s.poly = val(:).';  # force row vector
+    pout.poly = val(:).';  # force row vector
   endwhile
 
 endfunction
diff --git a/examples/code/@polynomial/subsasgn.m b/examples/code/@polynomial/subsasgn.m
--- a/examples/code/@polynomial/subsasgn.m
+++ b/examples/code/@polynomial/subsasgn.m
@@ -18,21 +18,22 @@ function p = subsasgn (p, s, val)
         p.poly(ind{1}+1) = val;
       else
         p.poly(ind{1}) = val;
       endif
 
     case "."
       fld = s(1).subs;
       if (! strcmp (fld, "poly"))
-        error ("@polynomial/subsasgn: invalid property \"%s\"", fld);
+        error ("@polynomial/subsasgn: invalid property '%s'", fld);
       endif
       if (numel (s) == 1)
         p.poly = val;
       else
         p.poly = subsasgn (p.poly, s(2:end), val);
       endif
 
     otherwise
       error ("@polynomial/subsasgn: invalid subscript type");
+
   endswitch
 
 endfunction
diff --git a/examples/code/@polynomial/subsref.m b/examples/code/@polynomial/subsref.m
--- a/examples/code/@polynomial/subsref.m
+++ b/examples/code/@polynomial/subsref.m
@@ -1,44 +1,44 @@
-function b = subsref (a, s)
+function r = subsref (a, s)
 
   if (isempty (s))
     error ("@polynomial/subsref: missing index");
   endif
 
   switch (s(1).type)
 
     case "()"
       ind = s(1).subs;
       if (numel (ind) != 1)
         error ("@polynomial/subsref: need exactly one index");
       endif
-      b = polyval (fliplr (a.poly), ind{1});
+      r = polyval (fliplr (a.poly), ind{1});
 
     case "{}"
       ind = s(1).subs;
       if (numel (ind) != 1)
         error ("@polynomial/subsref: need exactly one index");
       endif
 
       if (isnumeric (ind{1}))
-        b = a.poly(ind{1}+1);
+        r = a.poly(ind{1}+1);
       else
-        b = a.poly(ind{1});
+        r = a.poly(ind{1});
       endif
 
     case "."
       fld = s.subs;
       if (! strcmp (fld, "poly"))
-        error ("@polynomial/subsref: invalid property \"%s\"", fld);
+        error ("@polynomial/subsref: invalid property '%s'", fld);
       endif
-      b = a.poly;
+      r = a.poly;
 
     otherwise
       error ("@polynomial/subsref: invalid subscript type");
 
   endswitch
 
   if (numel (s) > 1)
-    b = subsref (b, s(2:end));
+    r = subsref (r, s(2:end));
   endif
 
 endfunction
