# HG changeset patch
# User jwe
# Date 1077035002 0
#      Tue Feb 17 16:23:22 2004 +0000
# Node ID 3dfdf6f36854c3713e5f33796f1d32a849c5ec66
# Parent  5f43d12f828762d9dad55d0c52a0f0d19bfa88b9
[project @ 2004-02-17 16:23:22 by jwe]

diff --git a/src/DLD-FUNCTIONS/fft.cc b/src/DLD-FUNCTIONS/fft.cc
--- a/src/DLD-FUNCTIONS/fft.cc
+++ b/src/DLD-FUNCTIONS/fft.cc
@@ -30,20 +30,18 @@ Software Foundation, 59 Temple Place - S
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
 #include "oct-obj.h"
 #include "utils.h"
 
 #if defined (HAVE_FFTW3)
 #define FFTSRC "@sc{Fftw}"
-#define WISDOM ", fft_wisdom"
 #else
 #define FFTSRC "@sc{Fftpack}"
-#define WISDOM 
 #endif
 
 static octave_value
 do_fft (const octave_value_list &args, const char *fcn, int type)
 {
   octave_value retval;
 
   int nargin = args.length ();
@@ -156,21 +154,19 @@ matrix to specify that its value should 
 larger than the dimension along which the FFT is calculated, then\n\
 @var{a} is resized and padded with zeros. Otherwise, if@var{n} is\n\
 smaller than the dimension along which the FFT is calculated, then\n\
 @var{a} is truncated.\n\
 \n\
 If called with three agruments, @var{dim} is an integer specifying the\n\
 dimension of the matrix along which the FFT is performed\n\
 @end deftypefn\n\
-@seealso {ifft, fft2, fftn"
-WISDOM
-"}")
+@seealso {ifft, fft2, fftn, fftw_wisdom}")
 {
-  return do_fft(args, "fft", 0);
+  return do_fft (args, "fft", 0);
 }
 
 
 DEFUN_DLD (ifft, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} ifft (@var{a}, @var{n}, @var{dim})\n\
 Compute the inverse FFT of @var{a} using subroutines from\n"
 FFTSRC
@@ -184,20 +180,18 @@ matrix to specify that its value should 
 larger than the dimension along which the inverse FFT is calculated, then\n\
 @var{a} is resized and padded with zeros. Otherwise, if@var{n} is\n\
 smaller than the dimension along which the inverse FFT is calculated,\n\
 then @var{a} is truncated.\n\
 \n\
 If called with three agruments, @var{dim} is an integer specifying the\n\
 dimension of the matrix along which the inverse FFT is performed\n\
 @end deftypefn\n\
-@seealso {fft, ifft2, ifftn"
-WISDOM
-"}")
+@seealso {fft, ifft2, ifftn, fftw_wisdom}")
 {
-  return do_fft(args, "ifft", 1);
+  return do_fft (args, "ifft", 1);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/DLD-FUNCTIONS/fft2.cc b/src/DLD-FUNCTIONS/fft2.cc
--- a/src/DLD-FUNCTIONS/fft2.cc
+++ b/src/DLD-FUNCTIONS/fft2.cc
@@ -32,20 +32,18 @@ Software Foundation, 59 Temple Place - S
 #include "gripes.h"
 #include "oct-obj.h"
 #include "utils.h"
 
 // This function should be merged with Fifft.
 
 #if defined (HAVE_FFTW3)
 #define FFTSRC "@sc{Fftw}"
-#define WISDOM ", fft_wisdom"
 #else
 #define FFTSRC "@sc{Fftpack}"
-#define WISDOM 
 #endif
 
 static octave_value
 do_fft2 (const octave_value_list &args, const char *fcn, int type)
 {
   octave_value retval;
 
   int nargin = args.length ();
@@ -146,41 +144,37 @@ FFTSRC
 ". The optional arguments @var{n} and @var{m} may be used specify the\n\
 number of rows and columns of @var{a} to use.  If either of these is\n\
 larger than the size of @var{a}, @var{a} is resized and padded with\n\
 zeros.\n\
 \n\
 If @var{a} is a multi-dimensional matrix, each two-dimensional sub-matrix\n\
 of @var{a} is treated seperately\n\
 @end deftypefn\n\
-@seealso {ifft2, fft, fftn"
-WISDOM
-"}")
+@seealso {ifft2, fft, fftn fftw_wisdom}")
 {
-  return do_fft2(args, "fft2", 0);
+  return do_fft2 (args, "fft2", 0);
 }
 
 
 DEFUN_DLD (ifft2, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} fft2 (@var{a}, @var{n}, @var{m})\n\
 Compute the inverse two dimensional FFT of @var{a} using subroutines from\n"
 FFTSRC
 ". The optional arguments @var{n} and @var{m} may be used specify the\n\
 number of rows and columns of @var{a} to use.  If either of these is\n\
 larger than the size of @var{a}, @var{a} is resized and padded with\n\
 zeros.\n\
 \n\
 If @var{a} is a multi-dimensional matrix, each two-dimensional sub-matrix\n\
 of @var{a} is treated seperately\n\
 @end deftypefn\n\
-@seealso {fft2, ifft, ifftn"
-WISDOM
-"}")
+@seealso {fft2, ifft, ifftn, fftw_wisdom}")
 {
-  return do_fft2(args, "ifft2", 1);
+  return do_fft2 (args, "ifft2", 1);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/DLD-FUNCTIONS/fftn.cc b/src/DLD-FUNCTIONS/fftn.cc
--- a/src/DLD-FUNCTIONS/fftn.cc
+++ b/src/DLD-FUNCTIONS/fftn.cc
@@ -31,20 +31,18 @@ Software Foundation, 59 Temple Place - S
 #include "gripes.h"
 #include "oct-obj.h"
 #include "utils.h"
 
 // This function should be merged with Fifft.
 
 #if defined (HAVE_FFTW3)
 #define FFTSRC "@sc{Fftw}"
-#define WISDOM ", fft_wisdom"
 #else
 #define FFTSRC "@sc{Fftpack}"
-#define WISDOM 
 #endif
 
 static octave_value
 do_fftn (const octave_value_list &args, const char *fcn, int type)
 {
   octave_value retval;
 
   int nargin = args.length ();
@@ -127,39 +125,35 @@ Compute the N dimensional FFT of @var{a}
 FFTSRC
 ". The optional vector argument @var{siz} may be used specify the\n\
 dimensions of the array to be used. If an element of @var{siz} is\n\
 smaller than the corresponding dimension, then the dimension is\n\
 truncated prior to performing the FFT. Otherwise if an element\n\
 of @var{siz} is larger than the corresponding dimension @var{a}\n\
 is resized and padded with zeros.\n\
 @end deftypefn\n\
-@seealso {ifftn, fft, fft2"
-WISDOM
-"}")
+@seealso {ifftn, fft, fft2, fftw_wisdom}")
 {
-  return do_fftn(args, "fftn", 0);
+  return do_fftn (args, "fftn", 0);
 }
 
 DEFUN_DLD (ifftn, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} ifftn (@var{a}, @var{siz})\n\
 Compute the invesre N dimensional FFT of @var{a} using subroutines from\n"
 FFTSRC
 ". The optional vector argument @var{siz} may be used specify the\n\
 dimensions of the array to be used. If an element of @var{siz} is\n\
 smaller than the corresponding dimension, then the dimension is\n\
 truncated prior to performing the inverse FFT. Otherwise if an element\n\
 of @var{siz} is larger than the corresponding dimension @var{a}\n\
 is resized and padded with zeros.\n\
 @end deftypefn\n\
-@seealso {fftn, ifft, ifft2"
-WISDOM
-"}")
+@seealso {fftn, ifft, ifft2, fftw_wisdom}")
 {
-  return do_fftn(args, "ifftn", 1);
+  return do_fftn (args, "ifftn", 1);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
