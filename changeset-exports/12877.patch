# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1311542131 25200
#      Sun Jul 24 14:15:31 2011 -0700
# Node ID ddea3962b024d2ef033e2639c73ae26cf6ae6829
# Parent  29cd5a828bb260541fb13aec2786e246a9163130
Various improvements to strread, textread, textscan functions
Eliminate redundant code, Do better input validation, use
one-line code idioms where possible, improve documentation.

* strread.m: Validate 'treatasempty' option.  Remove redundant
code to find nfields.  Initialize litptr

* textread.m: Only read enough of file to do format_repeat_count
operations.  Improve documentation and use one-line code idioms.
Add new tests.

* textscan.m: Only read enough of file to do format_repeat_count
operations.  Improve documentation and use one-line code idioms.
Add new tests.

diff --git a/scripts/io/strread.m b/scripts/io/strread.m
--- a/scripts/io/strread.m
+++ b/scripts/io/strread.m
@@ -21,20 +21,19 @@
 ## @deftypefnx {Function File} {[@var{a}, @dots{}] =} strread (@var{str}, @var{format})
 ## @deftypefnx {Function File} {[@var{a}, @dots{}] =} strread (@var{str}, @var{format}, @var{format_repeat})
 ## @deftypefnx {Function File} {[@var{a}, @dots{}] =} strread (@var{str}, @var{format}, @var{prop1}, @var{value1}, @dots{})
 ## @deftypefnx {Function File} {[@var{a}, @dots{}] =} strread (@var{str}, @var{format}, @var{format_repeat}, @var{prop1}, @var{value1}, @dots{})
 ## Read data from a string.
 ##
 ## The string @var{str} is split into words that are repeatedly matched to the
 ## specifiers in @var{format}.  The first word is matched to the first
-## specifier,
-## the second to the second specifier and so forth.  If there are more words
-## than
-## specifiers, the process is repeated until all words have been processed.
+## specifier, the second to the second specifier and so forth.  If there are
+## more words than specifiers, the process is repeated until all words have
+## been processed.
 ##
 ## The string @var{format} describes how the words in @var{str} should be
 ## parsed.
 ## It may contain any combination of the following specifiers:
 ## @table @code
 ## @item %s
 ## The word is parsed as a string.
 ##
@@ -219,31 +218,30 @@ function varargout = strread (str, forma
       case "whitespace"
         white_spaces = varargin{n+1};
       ## The following parameters are specific to textscan and textread
       case "endofline"
         eol_char = varargin{n+1};
       case "returnonerror"
         err_action = varargin{n+1};
       case "treatasempty"
-        empty_str = varargin{n+1};
-        if (ischar (empty_str))
-          empty_str = {empty_str};
+        if (iscellstr (varargin{n+1}))
+          empty_str = varargin{n+1};
+        elseif (ischar (varargin{n+1}))
+          empty_str = varargin(n+1);
+        else
+          error ('strread: "treatasempty" value must be string or cellstr');
         endif
       otherwise
         warning ('strread: unknown property "%s"', varargin{n});
     endswitch
   endfor
 
   ## Parse format string to compare nr. of conversion fields and nargout
-  idx = strfind (format, "%")';
-  specif = format([idx, idx+1]);
-  nspecif = length (idx);
-  idx_star = strfind (format, "%*");
-  nfields = length (idx) - length (idx_star);
+  nfields = length (strfind (format, "%")) - length (strfind (format, "%*"));
   ## If str only has numeric fields, a (default) format ("%f") will do.
   ## Otherwise:
   if ((max (nargout, 1) != nfields) && ! strcmp (format, "%f"))
     error ("strread: the number of output variables must match that specified by FORMAT");
   endif
 
   ## Remove comments
   if (comment_flag)
@@ -295,16 +293,17 @@ function varargout = strread (str, forma
         fmt_words{idy2(ii)+1} = fmt_words{idy2(ii)+1}(b{ii}+1:end);
       endif
     endfor
   endif
   num_words_per_line = numel (fmt_words);
 
   if (! isempty (white_spaces))
     ## Check for overlapping whitespaces and delimiters & trim whitespace
+    ## FIXME: Can this section be replaced by call to setdiff() ?
     if (! isempty (delimiter_str))
       [ovlp, iw] = intersect (white_spaces, delimiter_str);
       if (! isempty (ovlp))
         ## Remove delimiter chars from white_spaces
         white_spaces = cell2mat (strsplit (white_spaces, white_spaces(iw)));
       endif
     endif
   endif
@@ -357,16 +356,17 @@ function varargout = strread (str, forma
   endif
   num_words = numel (words);
   ## First guess at number of lines in file (ignoring leading/trailing literals)
   num_lines = ceil (num_words / num_words_per_line);
 
   ## Replace TreatAsEmpty char sequences by empty strings
   if (! isempty (empty_str))
     ## FIXME: There should be a simpler way to do this with cellfun
+    ##        or possibly with regexprep
     for ii = 1:numel (empty_str)
       idz = strmatch (empty_str{ii}, words, "exact");
       words(idz) = {""};
     endfor
   endif
   
   ## We now may have to cope with 3 cases:
   ## A: Trailing literals (%f<literal>) w/o delimiter in between.
@@ -388,17 +388,17 @@ function varargout = strread (str, forma
   ## If needed, split up columns in three steps:
   if (! isempty (idy))
     ## Try-catch because complexity of strings to read can be infinite    
     try
 
       ## 1. Assess "period" in the split-up words array ( < num_words_per_line).
       ## Could be done using EndOfLine but that prohibits EndOfLine = "" option.
       fmt_in_word = cell (num_words_per_line, 1);
-      words_period = 1;
+      words_period = litptr = 1;
       ## For each literal in turn
       for ii = 1:numel (idy)
         fmt_in_word(idy(ii)) = num_words;
         ## Find *current* "return period" for fmt_word{idy(ii)} in words 
         ## Search in first num_words_per_line of words
         litptrs = find (! cellfun ("isempty", strfind ...
                    (words(1:min (10*num_words_per_line, num_words)), ...
                    fmt_words{idy(ii)})));
diff --git a/scripts/io/textread.m b/scripts/io/textread.m
--- a/scripts/io/textread.m
+++ b/scripts/io/textread.m
@@ -14,17 +14,19 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {[@var{a}, @dots{}] =} textread (@var{filename})
 ## @deftypefnx {Function File} {[@var{a}, @dots{}] =} textread (@var{filename}, @var{format})
+## @deftypefnx {Function File} {[@var{a}, @dots{}] =} textread (@var{filename}, @var{format}, @var{n})
 ## @deftypefnx {Function File} {[@var{a}, @dots{}] =} textread (@var{filename}, @var{format}, @var{prop1}, @var{value1}, @dots{})
+## @deftypefnx {Function File} {[@var{a}, @dots{}] =} textread (@var{filename}, @var{format}, @var{n}, @var{prop1}, @var{value1}, @dots{})
 ## Read data from a text file.
 ##
 ## The file @var{filename} is read and parsed according to @var{format}.  The
 ## function behaves like @code{strread} except it works by parsing a file
 ## instead of a string.  See the documentation of @code{strread} for details.
 ##
 ## In addition to the options supported by @code{strread}, this function
 ## supports two more:
@@ -34,27 +36,30 @@
 ## The first @var{value} number of lines of @var{filename} are skipped.
 ##
 ## @item "endofline":
 ## Specify a single character or "\r\n".  If no value is given, it will be
 ## inferred from the file.  If set to "" (empty string) EOLs are ignored as
 ## delimiters.
 ## @end itemize
 ##
+## The optional input @var{n} specifes the number of times to use 
+## @var{format} when parsing, i.e., the format repeat count.
+##
 ## @seealso{strread, load, dlmread, fscanf, textscan}
 ## @end deftypefn
 
 function varargout = textread (filename, format = "%f", varargin)
 
   ## Check input
   if (nargin < 1)
     print_usage ();
   endif
 
-  if (!ischar (filename) || !ischar (format))
+  if (! ischar (filename) || ! ischar (format))
     error ("textread: FILENAME and FORMAT arguments must be strings");
   endif
 
   ## Read file
   fid = fopen (filename, "r");
   if (fid == -1)
     error ("textread: could not open '%s' for reading", filename);
   endif
@@ -62,57 +67,70 @@ function varargout = textread (filename,
   ## Skip header lines if requested
   headerlines = find (strcmpi (varargin, "headerlines"), 1);
   ## Beware of zero valued headerline, fskipl would skip to EOF
   if (! isempty (headerlines) && (varargin{headerlines + 1} > 0))
     fskipl (fid, varargin{headerlines + 1});
     varargin(headerlines:headerlines+1) = [];
   endif
 
-  str = fread (fid, "char=>char").';
+  if (nargin > 2 && isnumeric (varargin{1}))
+    nlines = varargin{1};
+  else
+    nlines = Inf;
+  endif
+
+  if (isfinite (nlines))
+    str = tmp_str = "";
+    n = 0;
+    ## FIXME: Can this be done without slow loop?
+    while (ischar (tmp_str) && n++ <= nlines)
+      str = strcat (str, tmp_str);
+      tmp_str = fgets (fid);
+    endwhile
+  else
+    str = fread (fid, "char=>char").';
+  endif
   fclose (fid);
 
   if (isempty (str))
     warning ("textread: empty file");
+    return;
+  endif
+
+  endofline = find (strcmpi (varargin, "endofline"), 1);
+  if (! isempty (endofline))
+    ## 'endofline' option set by user.  
+    if (! ischar (varargin{endofline + 1})); 
+      error ("textread: character value required for EndOfLine"); 
+    endif
   else
-    endofline = find (strcmpi (varargin, "endofline"), 1);
-    if (! isempty (endofline))
-      ## 'endofline' option set by user.  
-      endofline = find (strcmpi (varargin, "endofline"), 1);
-      if (! ischar (varargin{endofline + 1})); 
-        error ("textscan: character value required for EndOfLine"); 
-      endif
+    ## Determine EOL from file.  Search for EOL candidates in first 3000 chars
+    eol_srch_len = min (length (str), 3000);
+    ## First try DOS (CRLF)
+    if (! isempty (findstr ("\r\n", str(1 : eol_srch_len))))
+      eol_char = "\r\n";
+    ## Perhaps old Macintosh? (CR)
+    elseif (! isempty (findstr ("\r", str(1 : eol_srch_len))))
+      eol_char = "\r";
+    ## Otherwise, use plain UNIX (LF)
     else
-      ## Determine EOL from file.  Search for EOL candidates in first 3000 chars
-      eol_srch_len = min (length (str), 3000);
-      ## First try DOS (CRLF)
-      if (! isempty (findstr ("\r\n", str(1 : eol_srch_len))))
-        eol_char = "\r\n";
-      ## Perhaps old Macintosh? (CR)
-      elseif (! isempty (findstr ("\r", str(1 : eol_srch_len))))
-        eol_char = "\r";
-      ## Otherwise, use plain UNIX (LF)
-      else
-        eol_char = "\n";
-      endif
-      ## Set up default endofline param value
-      nargs = numel (varargin);
-      varargin(nargs+1:nargs+2) = {'endofline', eol_char};
+      eol_char = "\n";
     endif
+    ## Set up default endofline param value
+    varargin(end+1:end+2) = {'endofline', eol_char};
+  endif
 
-    ## Set up default whitespace param value if needed
-    if (isempty (find (strcmpi ('whitespace', varargin))))
-      nargs = numel (varargin);
-      varargin(nargs+1:nargs+2) = {'whitespace', " \b\t"};
-    endif
+  ## Set up default whitespace param value if needed
+  if (isempty (find (strcmpi ('whitespace', varargin))))
+    varargin(end+1:end+2) = {'whitespace', " \b\t"};
+  endif
 
-    ## Call strread to make it do the real work
-    [varargout{1:max (nargout, 1)}] = strread (str, format, varargin {:});
-
-  endif
+  ## Call strread to make it do the real work
+  [varargout{1:max (nargout, 1)}] = strread (str, format, varargin {:});
 
 endfunction
 
 
 %!test
 %! f = tmpnam();
 %! d = rand (5, 3);
 %! dlmwrite (f, d, 'precision', '%5.2f');
@@ -120,10 +138,11 @@ endfunction
 %! unlink(f);
 %! assert (a, d(4:5, 1), 1e-2);
 %! assert (b, d(4:5, 2), 1e-2);
 %! assert (c, d(4:5, 3), 1e-2);
 
 %% Test input validation
 %!error textread ()
 %!error textread (1)
-%!error textread ("fname", 1)
+%!error <arguments must be strings> textread (1, '%f')
+%!error <arguments must be strings> textread ("fname", 1)
 
diff --git a/scripts/io/textscan.m b/scripts/io/textscan.m
--- a/scripts/io/textscan.m
+++ b/scripts/io/textscan.m
@@ -17,45 +17,45 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{C} =} textscan (@var{fid}, @var{format})
 ## @deftypefnx {Function File} {@var{C} =} textscan (@var{fid}, @var{format}, @var{n})
 ## @deftypefnx {Function File} {@var{C} =} textscan (@var{fid}, @var{format}, @var{param}, @var{value}, @dots{})
 ## @deftypefnx {Function File} {@var{C} =} textscan (@var{fid}, @var{format}, @var{n}, @var{param}, @var{value}, @dots{})
 ## @deftypefnx {Function File} {@var{C} =} textscan (@var{str}, @dots{})
-## @deftypefnx {Function File} {[@var{C}, @var{position}] =} textscan (@dots{})
-## Read data from a text file.
+## @deftypefnx {Function File} {[@var{C}, @var{position}] =} textscan (@var{fid}, @dots{})
+## Read data from a text file or string.
 ##
 ## The file associated with @var{fid} is read and parsed according to
 ## @var{format}.  The function behaves like @code{strread} except it works by
 ## parsing a file instead of a string.  See the documentation of
 ## @code{strread} for details.  
 ##
 ## In addition to the options supported by
 ## @code{strread}, this function supports a few more:
 ##
 ## @itemize
 ## @item "headerlines":
-## The first @var{value} number of lines of @var{str} are skipped.
+## The first @var{value} number of lines of @var{fid} are skipped.
 ##
 ## @item "endofline":
 ## Specify a single character or "\r\n".  If no value is given, it will be
 ## inferred from the file.  If set to "" (empty string) EOLs are ignored as
 ## delimiters.
 ##
 ## @item "returnonerror":
 ## If set to numerical 1 or true (default), return normally when read errors
 ## have been encountered.  If set to 0 or false, return an error and no data.
 ## @end itemize
 ##
-## The optional input, @var{n}, specifes the number of lines to be read from
-## the file, associated with @var{fid}.
+## The optional input @var{n} specifes the number of times to use 
+## @var{format} when parsing, i.e., the format repeat count.
 ##
-## The output, @var{C}, is a cell array whose length is given by the number
+## The output @var{C} is a cell array whose length is given by the number
 ## of format specifiers.
 ##
 ## The second output, @var{position}, provides the position, in characters,
 ## from the beginning of the file.
 ##
 ## @seealso{dlmread, fscanf, load, strread, textread}
 ## @end deftypefn
 
@@ -70,69 +70,64 @@ function [C, position] = textscan (fid, 
     format = "%f";
   endif
 
   if (! (isa (fid, "double") && fid > 0) && ! ischar (fid))
     error ("textscan: first argument must be a file id or character string");
   endif
 
   if (! ischar (format))
-    error ("textscan: FORMAT must be a valid specification");
+    error ("textscan: FORMAT must be a string");
   endif
 
-  if (nargin > 2 && isnumeric (varargin{1}))
-    nlines = varargin{1};
-    args = varargin(2:end);
+  args = varargin;
+  if (nargin > 2 && isnumeric (args{1}))
+    nlines = args{1};
   else
     nlines = Inf;
-    args = varargin;
   endif
 
   if (! any (strcmpi (args, "emptyvalue")))
     ## Matlab returns NaNs for missing values
-    args{end+1} = "emptyvalue";
-    args{end+1} = NaN;
+    args(end+1:end+2) = {'emptyvalue', NaN};
   endif
 
   ## Check default parameter values that differ for strread & textread
 
   ipos = find (strcmpi (args, "whitespace"));
   if (isempty (ipos))
     ## Matlab default whitespace = " \b\t"
-    args{end+1} = "whitespace";
-    args{end+1} = " \b\t";
+    args(end+1:end+2) = {'whitespace', " \b\t"};
     whitespace = " \b\t";
   else
     ## Check if there's at least one string format specifier
     fmt = strrep (format, "%", " %");
-    [~, ~, ~, fmt] = regexp (fmt, '[^ ]+');
+    fmt = regexp (fmt, '[^ ]+', 'match');
     fmt = strtrim (fmt(strmatch ("%", fmt)))
     has_str_fmt = all (cellfun ("isempty", strfind (strtrim (fmt(strmatch ("%", fmt))), 's')));
     ## If there is a format, AND whitespace value = empty, 
     ## don't add a space (char(32)) to whitespace
     if (! (isempty (args{ipos+1}) &&  has_str_fmt))
-      args {ipos+1} = unique ([" " whitespace]);
+      args{ipos+1} = unique ([" ", whitespace]);
     endif
   endif
 
   if (! any (strcmpi (args, "delimiter")))
     ## Matlab says default delimiter = whitespace.  
     ## strread() will pick this up further
-    args{end+1} = "delimiter";
-    args{end+1} = "";
+    args(end+1:end+2) = {'delimiter', ""};
   endif
 
   if (any (strcmpi (args, "returnonerror")))
     ## Because of the way strread() reads data (columnwise) this parameter
     ## can't be neatly implemented.  strread() will pick it up anyway
-    warning ('ReturnOnError is not fully implemented');
+    warning ('textscan: ReturnOnError is not fully implemented');
   else
     ## Set default value (=true)
-    args{end+1} = "returnonerror";
-    args{end+1} = 1;
+    args(end+1:end+2) = {"returnonerror", 1};
   endif
 
   if (ischar (fid))
     ## Read from a text string
     if (nargout == 2)
       error ("textscan: cannot provide position information for character input");
     endif
     str = fid;
@@ -140,77 +135,74 @@ function [C, position] = textscan (fid, 
     ## Skip header lines if requested
     headerlines = find (strcmpi (args, "headerlines"), 1);
     ## Beware of zero valued headerline, fskipl would skip to EOF
     if (! isempty (headerlines) && (args{headerlines + 1} > 0))
       fskipl (fid, varargin{headerlines + 1});
       args(headerlines:headerlines+1) = []; 
     endif
     if (isfinite (nlines))
-      str = "";
-      ## FIXME: Can this be done without slow for loop?
-      for n = 1:nlines
-        str = strcat (str, fgets (fid));
-      endfor
+      str = tmp_str = "";
+      n = 0;
+      ## FIXME: Can this be done without slow loop?
+      while (ischar (tmp_str) && n++ <= nlines)
+        str = strcat (str, tmp_str);
+        tmp_str = fgets (fid);
+      endwhile
     else
       str = fread (fid, "char=>char").';
     endif
   endif
 
   ## Check for empty result
   if (isempty (str))
     warning ("textscan: no data read");
     C = [];
-  else
-    ## Check value of 'endofline'.  String or file doesn't seem to matter
-    endofline = find (strcmpi (args, "endofline"), 1);
-    if (! isempty (endofline))
-      if (! ischar (args{endofline + 1})) 
-        error ("textscan: character value required for EndOfLine"); 
-      endif
+    return;
+  endif
+
+  ## Check value of 'endofline'.  String or file doesn't seem to matter
+  endofline = find (strcmpi (args, "endofline"), 1);
+  if (! isempty (endofline))
+    if (ischar (args{endofline + 1})) 
+      eol_char = args{endofline + 1};
     else
-      ## Determine EOL from file.  Search for EOL candidates in first 3000 chars
-      BUFLEN = 3000;
-      ## First try DOS (CRLF)
-      eol_srch_len = min (length (str), 3000);
-      if (! isempty (findstr ("\r\n", str(1 : eol_srch_len))))
-        eol_char = "\r\n";
-      ## Perhaps old Macintosh? (CR)
-      elseif (! isempty (findstr ("\r", str(1 : eol_srch_len))))
-        eol_char = "\r";
-      ## Otherwise, use plain UNIX (LF)
-      else
-        eol_char = "\n";
-      endif
-      ## Set up the default endofline param value
-      args{end+1} = "endofline";
-      args{end+1} = eol_char;
+      error ("textscan: character value required for EndOfLine"); 
     endif
+  else
+    ## Determine EOL from file.  Search for EOL candidates in first 3000 chars
+    eol_srch_len = min (length (str), 3000);
+    ## First try DOS (CRLF)
+    if (! isempty (findstr ("\r\n", str(1 : eol_srch_len))))
+      eol_char = "\r\n";
+    ## Perhaps old Macintosh? (CR)
+    elseif (! isempty (findstr ("\r", str(1 : eol_srch_len))))
+      eol_char = "\r";
+    ## Otherwise, use plain UNIX (LF)
+    else
+      eol_char = "\n";
+    endif
+    ## Set up the default endofline param value
+    args(end+1:end+2) = {'endofline', eol_char};
+  endif
 
-    ## Determine the number of data fields
-    num_fields = numel (strfind (format, "%")) - ...
-                 numel (idx_star = strfind (format, "%*"));
-
-    ## Strip trailing EOL to avoid returning stray missing values (f. strread)
-    if (strcmp (str(end-length (eol_char) + 1 : end), eol_char));
-      str = str(1 : end-length (eol_char)); 
-    endif
+  ## Determine the number of data fields
+  num_fields = numel (strfind (format, "%")) - numel (strfind (format, "%*"));
 
-    ## Call strread to make it do the real work
-    C = cell (1, num_fields);
-    [C{:}] = strread (str, format, args{:});
+  ## Strip trailing EOL to avoid returning stray missing values (f. strread)
+  if (strcmp (str(end-length (eol_char) + 1 : end), eol_char));
+    str(end-length (eol_char) + 1 : end) = "";
+  endif
 
-    if (ischar (fid) && isfinite (nlines))
-      C = cellfun (@(x) x(1:nlines), C, "uniformoutput", false);
-    endif
+  ## Call strread to make it do the real work
+  C = cell (1, num_fields);
+  [C{:}] = strread (str, format, args{:});
 
-    if (nargout == 2)
-      position = ftell (fid);
-    endif
-
+  if (nargout == 2)
+    position = ftell (fid);
   endif
 
 endfunction
 
 
 %!test
 %! str = "1,  2,  3,  4\n 5,  ,  ,  8\n 9, 10, 11, 12";
 %! fmtstr = "%f %d %f %s";
@@ -244,8 +236,15 @@ endfunction
 %! str = [str "Km:2 = hhhRjjj miles3hour\r\n"];
 %! str = [str "Km:25 = hhhZ\r\n"];
 %! fmt = "Km:%d = hhh%1sjjj miles%dhour";
 %! a = textscan (str, fmt, 'delimiter', ' ');
 %! assert (a{1}', [10 15 2 25], 1e-5);
 %! assert (a{2}', {'B' 'J' 'R' 'Z'});
 %! assert (a{3}', [16 241 3 NaN], 1e-5);
 
+%% Test input validation
+%!error textscan ()
+%!error textscan (single (4))
+%!error textscan ({4})
+%!error <must be a string> textscan ("Hello World", 2)
+%!error <cannot provide position information> [C, pos] = textscan ("Hello World")
+%!error <character value required> textscan ("Hello World", '%s', 'EndOfLine', 3)
