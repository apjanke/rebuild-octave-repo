# HG changeset patch
# User Rik <rik@octave.org>
# Date 1435114859 25200
#      Tue Jun 23 20:00:59 2015 -0700
# Node ID 140ce5e857bfc484c2e4a212f2ee6e37cf842522
# Parent  c2206fda3986c552a41b62e9e53d7e54c9258199
# Parent  b8c1b3e9aa91d4070848a4212971b063e3334e9e
maint: Periodic merge of stable to default.

diff --git a/examples/code/myfeval.c b/examples/code/myfeval.c
--- a/examples/code/myfeval.c
+++ b/examples/code/myfeval.c
@@ -5,17 +5,17 @@ mexFunction (int nlhs, mxArray* plhs[],
              int nrhs, const mxArray* prhs[])
 {
   char *str;
 
   mexPrintf ("Starting file myfeval.mex\n");
 
   mexPrintf ("I have %d inputs and %d outputs\n", nrhs, nlhs);
 
-  if (nrhs < 1 || ! mxIsString (prhs[0]))
+  if (nrhs < 1 || ! mxIsChar (prhs[0]))
     mexErrMsgTxt ("ARG1 must be a function name");
 
   str = mxArrayToString (prhs[0]);
 
   mexPrintf ("I'm going to call the function %s\n", str);
 
   if (nlhs == 0)
     nlhs = 1;  // Octave's automatic 'ans' variable
diff --git a/examples/code/mypow2.c b/examples/code/mypow2.c
--- a/examples/code/mypow2.c
+++ b/examples/code/mypow2.c
@@ -3,18 +3,18 @@
 void
 mexFunction (int nlhs, mxArray* plhs[],
              int nrhs, const mxArray* prhs[])
 {
   mwSize n;
   mwIndex i;
   double *vri, *vro;
 
-  if (nrhs != 1 || ! mxIsNumeric (prhs[0]))
-    mexErrMsgTxt ("ARG1 must be a matrix");
+  if (nrhs != 1 || ! mxIsDouble (prhs[0]))
+    mexErrMsgTxt ("ARG1 must be a double matrix");
 
   n = mxGetNumberOfElements (prhs[0]);
   plhs[0] = mxCreateNumericArray (mxGetNumberOfDimensions (prhs[0]),
                                   mxGetDimensions (prhs[0]),
                                   mxGetClassID (prhs[0]),
                                   mxIsComplex (prhs[0]));
   vri = mxGetPr (prhs[0]);
   vro = mxGetPr (plhs[0]);
diff --git a/examples/code/myprop.c b/examples/code/myprop.c
--- a/examples/code/myprop.c
+++ b/examples/code/myprop.c
@@ -4,20 +4,20 @@ void
 mexFunction (int nlhs, mxArray* plhs[],
              int nrhs, const mxArray* prhs[])
 {
   double handle;
   char property[256];
 
   if (nrhs < 2 || nrhs > 3)
     mexErrMsgTxt ("incorrect number of arguments");
-  if (!mxIsDouble (prhs[0]))
-    mexErrMsgTxt ("handle expected to be a double scalar");
-  if (!mxIsChar (prhs[1]))
-    mexErrMsgTxt ("expected property to be a string");
+  if (! mxIsDouble (prhs[0]))
+    mexErrMsgTxt ("handle must be a double scalar");
+  if (! mxIsChar (prhs[1]))
+    mexErrMsgTxt ("property must be a string");
 
   handle = mxGetScalar (prhs[0]);
   mxGetString (prhs[1], property, 256);
   plhs[0] = mxDuplicateArray (mexGet (handle, property));
 
   if (nrhs == 3)
     if (mexSet (handle, property, mxDuplicateArray (prhs[2])))
       mexErrMsgTxt ("failed to set property");
diff --git a/examples/code/myset.c b/examples/code/myset.c
--- a/examples/code/myset.c
+++ b/examples/code/myset.c
@@ -1,34 +1,37 @@
 #include "mex.h"
 
 void
 mexFunction (int nlhs, mxArray* plhs[],
              int nrhs, const mxArray* prhs[])
 {
   char *str;
   mxArray *v;
+  int found = 0;
 
-  if (nrhs != 2 || ! mxIsString (prhs[0]))
-    mexErrMsgTxt ("expects symbol name and value");
+  if (nrhs != 2 || ! mxIsChar (prhs[0]))
+    mexErrMsgTxt ("Arguments must be a symbol name and a value");
 
   str = mxArrayToString (prhs[0]);
 
+  // FIXME: If variable does not exist, error is reported which prevents
+  //        subsequent mexGetArray function from working.
   v = mexGetArray (str, "global");
-
   if (v)
     {
       mexPrintf ("%s is a global variable with the following value:\n", str);
       mexCallMATLAB (0, NULL, 1, &v, "disp");
+      found = 1;
     }
 
-  v = mexGetArray (str, "caller");
+  if (! found)
+    v = mexGetArray (str, "caller");
 
-  if (v)
+  if (! found && v)
     {
       mexPrintf ("%s is a caller variable with the following value:\n", str);
       mexCallMATLAB (0, NULL, 1, &v, "disp");
     }
 
   // WARNING!! Can't do this in MATLAB!  Must copy variable first.
-  mxSetName (prhs[1], str);
-  mexPutArray (prhs[1], "caller");
+  mexPutVariable ("caller", str, prhs[1]);
 }
diff --git a/examples/code/mystruct.c b/examples/code/mystruct.c
--- a/examples/code/mystruct.c
+++ b/examples/code/mystruct.c
@@ -5,17 +5,17 @@ mexFunction (int nlhs, mxArray* plhs[],
              int nrhs, const mxArray* prhs[])
 {
   int i;
   mwIndex j;
   mxArray *v;
   const char *keys[] = { "this", "that" };
 
   if (nrhs != 1 || ! mxIsStruct (prhs[0]))
-    mexErrMsgTxt ("expects struct");
+    mexErrMsgTxt ("ARG1 must be a struct");
 
   for (i = 0; i < mxGetNumberOfFields (prhs[0]); i++)
     for (j = 0; j < mxGetNumberOfElements (prhs[0]); j++)
       {
         mexPrintf ("field %s(%d) = ", mxGetFieldNameByNumber (prhs[0], i), j);
         v = mxGetFieldByNumber (prhs[0], j, i);
         mexCallMATLAB (0, NULL, 1, &v, "disp");
       }
diff --git a/libgui/graphics/GLCanvas.cc b/libgui/graphics/GLCanvas.cc
--- a/libgui/graphics/GLCanvas.cc
+++ b/libgui/graphics/GLCanvas.cc
@@ -41,16 +41,17 @@ GLCanvas::GLCanvas (QWidget* xparent, co
 #if defined (Q_OS_WIN32)
   : QGLWidget (QGLFormat (QGL::SampleBuffers | QGL::IndirectRendering),
                xparent), Canvas (gh)
 #else
   : QGLWidget (QGLFormat (QGL::SampleBuffers), xparent), Canvas (gh)
 #endif
 {
   setFocusPolicy (Qt::ClickFocus);
+  setFocus();
 }
 
 GLCanvas::~GLCanvas (void)
 {
 }
 
 void
 GLCanvas::draw (const graphics_handle& gh)
diff --git a/libgui/graphics/gl-select.cc b/libgui/graphics/gl-select.cc
--- a/libgui/graphics/gl-select.cc
+++ b/libgui/graphics/gl-select.cc
@@ -201,21 +201,21 @@ opengl_selector::render_text (const std:
   return Matrix (1, 4, 0.0);
 #endif
 }
 
 void
 opengl_selector::draw_image (const image::properties& props)
 {
   Matrix xd = props.get_xdata ().matrix_value ();
-  octave_idx_type nc = props.get_cdata ().matrix_value ().columns ();
+  octave_idx_type nc = props.get_cdata ().columns ();
   double x_pix_size = (xd(1) - xd(0)) / (nc - 1);
 
   Matrix yd = props.get_ydata ().matrix_value ();
-  octave_idx_type nr = props.get_cdata ().matrix_value ().rows ();
+  octave_idx_type nr = props.get_cdata ().rows ();
   double y_pix_size = (yd(1) - yd(0)) / (nr - 1);
 
   ColumnVector p1(3, 0.0), p2(3, 0.0), p3(3, 0.0), p4(3, 0.0);
   p1(0) = xd(0) - x_pix_size/2;
   p1(1) = yd(0) - y_pix_size/2;
 
   p2(0) = xd(1) + x_pix_size/2;
   p2(1) = yd(0) - y_pix_size/2;
diff --git a/libgui/src/octave-gui.cc b/libgui/src/octave-gui.cc
--- a/libgui/src/octave-gui.cc
+++ b/libgui/src/octave-gui.cc
@@ -118,24 +118,23 @@ octave_start_gui (int argc, char *argv[]
   QTranslator gui_tr, qt_tr, qsci_tr;
 
   // Set the codec for all strings (before wizard)
 #if ! defined (Q_OS_WIN32)
   QTextCodec::setCodecForCStrings (QTextCodec::codecForName ("UTF-8"));
 #endif
 
   // show wizard if this is the first run
-  if (resource_manager::is_first_run ())
+  if (resource_manager::is_first_run () && start_gui)
     {
       // before wizard
       resource_manager::config_translators (&qt_tr, &qsci_tr, &gui_tr);
       application.installTranslator (&qt_tr);
       application.installTranslator (&gui_tr);
-      if (start_gui)
-        application.installTranslator (&qsci_tr);
+      application.installTranslator (&qsci_tr);
 
       welcome_wizard welcomeWizard;
 
       if (welcomeWizard.exec () == QDialog::Rejected)
         exit (1);
 
       resource_manager::reload_settings ();  // install settings file
     }
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -1456,16 +1456,17 @@ public:
   {
     array_property::add_constraint (dims);
   }
 
   void add_constraint (octave_idx_type len)
   {
     size_constraints.remove (dim_vector (1, -1));
     size_constraints.remove (dim_vector (-1, 1));
+    size_constraints.remove (dim_vector (0, 0));
 
     add_constraint (dim_vector (1, len));
     add_constraint (dim_vector (len, 1));
   }
 
   row_vector_property& operator = (const octave_value& val)
   {
     set (val);
@@ -4737,17 +4738,19 @@ public:
       radio_property xdatamode ha , "{auto}|manual"
       radio_property ydatamode ha , "{auto}|manual"
     END_PROPERTIES
 
   protected:
     void init (void)
     {
       xdata.add_constraint (2);
+      xdata.add_constraint (dim_vector (0, 0));
       ydata.add_constraint (2);
+      ydata.add_constraint (dim_vector (0, 0));
       cdata.add_constraint ("double");
       cdata.add_constraint ("single");
       cdata.add_constraint ("logical");
       cdata.add_constraint ("uint8");
       cdata.add_constraint ("uint16");
       cdata.add_constraint ("int16");
       cdata.add_constraint ("real");
       cdata.add_constraint (dim_vector (-1, -1));
diff --git a/libinterp/corefcn/mex.cc b/libinterp/corefcn/mex.cc
--- a/libinterp/corefcn/mex.cc
+++ b/libinterp/corefcn/mex.cc
@@ -612,18 +612,18 @@ protected:
 
   mxArray_matlab (mxClassID id_arg, mwSize ndims_arg, const mwSize *dims_arg)
     : mxArray_base (), class_name (0), id (id_arg),
       ndims (ndims_arg < 2 ? 2 : ndims_arg),
       dims (static_cast<mwSize *> (mxArray::malloc (ndims * sizeof (mwSize))))
   {
     if (ndims_arg < 2)
       {
-        dims[0] = 1;
-        dims[1] = 1;
+        dims[0] = 0;
+        dims[1] = 0;
       }
 
     for (mwIndex i = 0; i < ndims_arg; i++)
       dims[i] = dims_arg[i];
 
     for (mwIndex i = ndims - 1; i > 1; i--)
       {
         if (dims[i] == 1)
diff --git a/libinterp/corefcn/oct-hdf5.h b/libinterp/corefcn/oct-hdf5.h
--- a/libinterp/corefcn/oct-hdf5.h
+++ b/libinterp/corefcn/oct-hdf5.h
@@ -24,19 +24,17 @@ along with Octave; see the file COPYING.
 #define octave_hdf5_h 1
 
 #if defined (HAVE_HDF5_H)
 
 #include <hdf5.h>
 
 #include "oct-hdf5-types.h"
 
-#define HDF5_SAVE_TYPE H5T_NATIVE_UINT8
 
 #ifdef USE_64_BIT_IDX_T
 #define H5T_NATIVE_IDX H5T_NATIVE_INT64
 #else
 #define H5T_NATIVE_IDX H5T_NATIVE_INT
 #endif
-
 #endif
 
 #endif
diff --git a/libinterp/octave-value/ov-int16.cc b/libinterp/octave-value/ov-int16.cc
--- a/libinterp/octave-value/ov-int16.cc
+++ b/libinterp/octave-value/ov-int16.cc
@@ -35,16 +35,20 @@ along with Octave; see the file COPYING.
 #include "defun.h"
 #include "gripes.h"
 #include "oct-obj.h"
 #include "oct-lvalue.h"
 #include "oct-hdf5.h"
 #include "ops.h"
 #include "ov-base.h"
 
+#if defined (HAVE_HDF5)
+#define HDF5_SAVE_TYPE H5T_NATIVE_INT16
+#endif
+
 #include "ov-base-int.h"
 #include "ov-base-int.cc"
 #include "ov-int16.h"
 #include "ov-type-conv.h"
 #include "pr-output.h"
 #include "variables.h"
 
 #include "byte-swap.h"
diff --git a/libinterp/octave-value/ov-int32.cc b/libinterp/octave-value/ov-int32.cc
--- a/libinterp/octave-value/ov-int32.cc
+++ b/libinterp/octave-value/ov-int32.cc
@@ -35,16 +35,20 @@ along with Octave; see the file COPYING.
 #include "defun.h"
 #include "gripes.h"
 #include "oct-obj.h"
 #include "oct-lvalue.h"
 #include "oct-hdf5.h"
 #include "ops.h"
 #include "ov-base.h"
 
+#if defined (HAVE_HDF5)
+#define HDF5_SAVE_TYPE H5T_NATIVE_INT32
+#endif
+
 #include "ov-base-int.h"
 #include "ov-base-int.cc"
 #include "ov-int32.h"
 #include "ov-type-conv.h"
 #include "pr-output.h"
 #include "variables.h"
 
 #include "byte-swap.h"
diff --git a/libinterp/octave-value/ov-int64.cc b/libinterp/octave-value/ov-int64.cc
--- a/libinterp/octave-value/ov-int64.cc
+++ b/libinterp/octave-value/ov-int64.cc
@@ -35,16 +35,20 @@ along with Octave; see the file COPYING.
 #include "defun.h"
 #include "gripes.h"
 #include "oct-obj.h"
 #include "oct-lvalue.h"
 #include "oct-hdf5.h"
 #include "ops.h"
 #include "ov-base.h"
 
+#if defined (HAVE_HDF5)
+#define HDF5_SAVE_TYPE H5T_NATIVE_INT64
+#endif
+
 #include "ov-base-int.h"
 #include "ov-base-int.cc"
 #include "ov-int64.h"
 #include "ov-type-conv.h"
 #include "pr-output.h"
 #include "variables.h"
 
 #include "byte-swap.h"
diff --git a/libinterp/octave-value/ov-int8.cc b/libinterp/octave-value/ov-int8.cc
--- a/libinterp/octave-value/ov-int8.cc
+++ b/libinterp/octave-value/ov-int8.cc
@@ -35,16 +35,20 @@ along with Octave; see the file COPYING.
 #include "defun.h"
 #include "gripes.h"
 #include "oct-obj.h"
 #include "oct-lvalue.h"
 #include "oct-hdf5.h"
 #include "ops.h"
 #include "ov-base.h"
 
+#if defined (HAVE_HDF5)
+#define HDF5_SAVE_TYPE H5T_NATIVE_INT8
+#endif
+
 #include "ov-base-int.h"
 #include "ov-base-int.cc"
 #include "ov-int8.h"
 #include "ov-type-conv.h"
 #include "pr-output.h"
 #include "variables.h"
 
 #include "byte-swap.h"
diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -1276,16 +1276,30 @@ unbox (JNIEnv* jni_env, const octave_val
     }
   else if (val.is_string ())
     {
       std::string s = val.string_value ();
 
       jobj = jni_env->NewStringUTF (s.c_str ());
       jcls = jni_env->GetObjectClass (jobj);
     }
+  else if (val.is_cellstr ())
+    {
+      const Array<std::string> str_arr = val.cellstr_value ();
+      const octave_idx_type n = str_arr.numel ();
+      jclass_ref scls (jni_env, jni_env->FindClass ("java/lang/String"));
+      jobjectArray array = jni_env->NewObjectArray (n, scls, NULL);
+      for (octave_idx_type i = 0; i < n; i++)
+        {
+          jstring_ref jstr (jni_env, jni_env->NewStringUTF (str_arr(i).c_str ()));
+          jni_env->SetObjectArrayElement (array, i, jstr);
+        }
+      jobj = array;
+      jcls = jni_env->GetObjectClass (jobj);
+    }
   else if (val.numel () > 1 && val.dims ().is_vector ())
     {
 #define IF_UNBOX_PRIMITIVE_ARRAY(CHECK_TYPE, METHOD_TYPE, OCTAVE_TYPE, JAVA_TYPE, JAVA_TYPE_CAP) \
       if (val.is_ ## CHECK_TYPE ## _type ()) \
         { \
           const OCTAVE_TYPE ## NDArray v = val.METHOD_TYPE ## array_value (); \
           JAVA_TYPE ## Array jarr = jni_env->New ## JAVA_TYPE_CAP ## Array (v.numel ()); \
           const JAVA_TYPE* jv = reinterpret_cast<const JAVA_TYPE*> (v.data ()); \
@@ -1409,30 +1423,16 @@ unbox (JNIEnv* jni_env, const octave_val
           jcls = jni_env->GetObjectClass (jobj);
         }
       else
         {
           found = false;
           error ("cannot convert matrix of type '%s'", val.class_name ().c_str ());
         }
     }
-  else if (val.is_cellstr ())
-    {
-      Cell cellStr = val.cell_value ();
-      jclass_ref scls (jni_env, jni_env->FindClass ("java/lang/String"));
-      jobjectArray array = jni_env->NewObjectArray (cellStr.numel (), scls, 0);
-      for (int i = 0; i < cellStr.numel (); i++)
-        {
-          jstring_ref jstr (jni_env,
-                            jni_env->NewStringUTF (cellStr(i).string_value().c_str ()));
-          jni_env->SetObjectArrayElement (array, i, jstr);
-        }
-      jobj = array;
-      jcls = jni_env->GetObjectClass (jobj);
-    }
   else
     {
       jclass rcls = find_octave_class (jni_env, "org/octave/OctaveReference");
       jmethodID mID = jni_env->GetMethodID (rcls, "<init>", "(I)V");
       int ID = octave_java_refcount++;
 
       jobj = jni_env->NewObject (rcls, mID, ID);
       jcls = rcls;
@@ -2497,9 +2497,15 @@ Return true if @var{x} is a Java object.
 %! assert (javaMethod ("binarySearch", "java.util.Arrays", uint16 ([90 100 128]), uint16 (128)), 2);
 
 ## Check we can create objects that wrap java literals (bug #38821).
 %!testif HAVE_JAVA
 %! assert (class (javaObject ("java.lang.Byte", uint8 (1))), "java.lang.Byte");
 %! assert (class (javaObject ("java.lang.Byte", int8 (1))), "java.lang.Byte");
 %! assert (class (javaObject ("java.lang.Short", uint16 (1))), "java.lang.Short");
 %! assert (class (javaObject ("java.lang.Short", int16 (1))), "java.lang.Short");
+
+## Automatic conversion from string cell array into String[] (bug #45290)
+%!testif HAVE_JAVA
+%! assert (javaMethod ("binarySearch", "java.util.Arrays", {"aaa", "bbb", "ccc", "zzz"}, "aaa"), 0)
+%! assert (javaMethod ("binarySearch", "java.util.Arrays", {"aaa", "bbb", "ccc", "zzz"}, "zzz"), 3)
+%! assert (javaMethod ("binarySearch", "java.util.Arrays", {"aaa", "bbb", "ccc", "zzz"}, "hhh") < 0)
 */
diff --git a/libinterp/octave-value/ov-uint16.cc b/libinterp/octave-value/ov-uint16.cc
--- a/libinterp/octave-value/ov-uint16.cc
+++ b/libinterp/octave-value/ov-uint16.cc
@@ -35,16 +35,20 @@ along with Octave; see the file COPYING.
 #include "defun.h"
 #include "gripes.h"
 #include "oct-obj.h"
 #include "oct-lvalue.h"
 #include "oct-hdf5.h"
 #include "ops.h"
 #include "ov-base.h"
 
+#if defined (HAVE_HDF5)
+#define HDF5_SAVE_TYPE H5T_NATIVE_UINT16
+#endif
+
 #include "ov-base-int.h"
 #include "ov-base-int.cc"
 #include "ov-uint16.h"
 #include "ov-type-conv.h"
 #include "pr-output.h"
 #include "variables.h"
 
 #include "byte-swap.h"
diff --git a/libinterp/octave-value/ov-uint32.cc b/libinterp/octave-value/ov-uint32.cc
--- a/libinterp/octave-value/ov-uint32.cc
+++ b/libinterp/octave-value/ov-uint32.cc
@@ -35,16 +35,20 @@ along with Octave; see the file COPYING.
 #include "defun.h"
 #include "gripes.h"
 #include "oct-obj.h"
 #include "oct-lvalue.h"
 #include "oct-hdf5.h"
 #include "ops.h"
 #include "ov-base.h"
 
+#if defined (HAVE_HDF5)
+#define HDF5_SAVE_TYPE H5T_NATIVE_UINT32
+#endif
+
 #include "ov-base-int.h"
 #include "ov-base-int.cc"
 #include "ov-uint32.h"
 #include "ov-type-conv.h"
 #include "pr-output.h"
 #include "variables.h"
 
 #include "byte-swap.h"
diff --git a/libinterp/octave-value/ov-uint64.cc b/libinterp/octave-value/ov-uint64.cc
--- a/libinterp/octave-value/ov-uint64.cc
+++ b/libinterp/octave-value/ov-uint64.cc
@@ -35,16 +35,20 @@ along with Octave; see the file COPYING.
 #include "defun.h"
 #include "gripes.h"
 #include "oct-obj.h"
 #include "oct-lvalue.h"
 #include "oct-hdf5.h"
 #include "ops.h"
 #include "ov-base.h"
 
+#if defined (HAVE_HDF5)
+#define HDF5_SAVE_TYPE H5T_NATIVE_UINT64
+#endif
+
 #include "ov-base-int.h"
 #include "ov-base-int.cc"
 #include "ov-uint64.h"
 #include "ov-type-conv.h"
 #include "pr-output.h"
 #include "variables.h"
 
 #include "byte-swap.h"
diff --git a/libinterp/octave-value/ov-uint8.cc b/libinterp/octave-value/ov-uint8.cc
--- a/libinterp/octave-value/ov-uint8.cc
+++ b/libinterp/octave-value/ov-uint8.cc
@@ -35,16 +35,20 @@ along with Octave; see the file COPYING.
 #include "defun.h"
 #include "gripes.h"
 #include "oct-obj.h"
 #include "oct-lvalue.h"
 #include "oct-hdf5.h"
 #include "ops.h"
 #include "ov-base.h"
 
+#if defined (HAVE_HDF5)
+#define HDF5_SAVE_TYPE H5T_NATIVE_UINT8
+#endif
+
 #include "ov-base-int.h"
 #include "ov-base-int.cc"
 #include "ov-uint8.h"
 #include "ov-type-conv.h"
 #include "pr-output.h"
 #include "variables.h"
 
 #include "byte-swap.h"
diff --git a/scripts/specfun/ellipke.m b/scripts/specfun/ellipke.m
--- a/scripts/specfun/ellipke.m
+++ b/scripts/specfun/ellipke.m
@@ -89,17 +89,16 @@
 
 function [k, e] = ellipke (m, tol = [])
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
   endif
 
   sz = size (m);
-  m = m(:);
   if (! isreal (m))
     error ("ellipke: M must be real");
   elseif (any (m > 1))
     error ("ellipke: M must be <= 1");
   endif
 
   if (isempty (tol))
     tol = eps (class (m));
@@ -122,18 +121,18 @@ function [k, e] = ellipke (m, tol = [])
   ## ( Abramowitz and Stegun, Section 17.6 )
   Nmax = 16;
   idx = !idx_1 & !idx_neginf;
   if (any (idx))
     idx_neg = find (m < 0 & !idx_neginf);
     mult_k = 1./sqrt (1 - m(idx_neg));
     mult_e = sqrt (1 - m(idx_neg));
     m(idx_neg) = -m(idx_neg) ./ (1 - m(idx_neg));
-    a = ones (sum (idx), 1);
     b = sqrt (1 - m(idx));
+    a = ones (size (b));
     c = sqrt (m(idx));
     f = 0.5;
     sum = f*c.^2;
     n = 2;
     do
       t = (a + b)/2;
       c = (a - b)/2;
       b = sqrt (a .* b);
diff --git a/test/io.tst b/test/io.tst
--- a/test/io.tst
+++ b/test/io.tst
@@ -186,16 +186,45 @@
 %! [load_status, load_files] = testls (1);
 %!
 %! for f = [save_files, load_files]
 %!   unlink (f{1});
 %! endfor
 %!
 %! assert (save_status && load_status);
 
+%!testif HAVE_HDF5
+%!
+%! s8  =   int8 (fix ((2^8  - 1) * (rand (2, 2) - 0.5)));
+%! u8  =  uint8 (fix ((2^8  - 1) * (rand (2, 2) - 0.5)));
+%! s16 =  int16 (fix ((2^16 - 1) * (rand (2, 2) - 0.5)));
+%! u16 = uint16 (fix ((2^16 - 1) * (rand (2, 2) - 0.5)));
+%! s32 =  int32 (fix ((2^32 - 1) * (rand (2, 2) - 0.5)));
+%! u32 = uint32 (fix ((2^32 - 1) * (rand (2, 2) - 0.5)));
+%! s64 =  int64 (fix ((2^64 - 1) * (rand (2, 2) - 0.5)));
+%! u64 = uint64 (fix ((2^64 - 1) * (rand (2, 2) - 0.5)));
+%! s8t = s8; u8t = u8; s16t = s16; u16t = u16; s32t = s32; u32t = u32;
+%! s64t = s64; u64t = u64;
+%! h5file = tempname ();
+%! unwind_protect
+%!   eval (sprintf ("save -hdf5 %s %s", h5file, "s8 u8 s16 u16 s32 u32 s64 u64"));
+%!   clear s8 u8 s16 u16 s32 u32 s64 u64;
+%!   load (h5file);
+%!   assert (s8, s8t);
+%!   assert (u8, u8t);
+%!   assert (s16, s16t);
+%!   assert (u16, u16t);
+%!   assert (s32, s32t);
+%!   assert (u32, u32t);
+%!   assert (s64, s64t);
+%!   assert (u64, u64t);
+%! unwind_protect_cleanup
+%!   unlink (h5file);
+%! end_unwind_protect
+
 %!test
 %!
 %! STR.scalar_fld = 1;
 %! STR.matrix_fld = [1.1,2;3,4];
 %! STR.string_fld = "Octave";
 %! STR.struct_fld.x = 0;
 %! STR.struct_fld.y = 1;
 %!
@@ -634,8 +663,13 @@
 
 %!assert (sprintf ("|%d|", "foo"), "|102||111||111|");
 %!assert (sprintf ("|%s|", [102, 111, 111]), "|foo|");
 
 %!assert (sprintf ("%s %d ", [102, 1e5, 111, 1e5, 111]), "f 100000 o 100000 o ");
 
 %!assert (sprintf ("%c,%c,%c,%c", "abcd"), "a,b,c,d");
 %!assert (sprintf ("%s,%s,%s,%s", "abcd"), "abcd,");
+
+%!assert (sprintf ("|%x|", "Octave"), "|4f||63||74||61||76||65|");
+%!assert (sprintf ("|%X|", "Octave"), "|4F||63||74||61||76||65|");
+%!assert (sprintf ("|%o|", "Octave"), "|117||143||164||141||166||145|");
+
