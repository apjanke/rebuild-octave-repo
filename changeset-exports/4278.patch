# HG changeset patch
# User jwe
# Date 1041641028 0
#      Sat Jan 04 00:43:48 2003 +0000
# Node ID 2cc12970de72866cb72e55b202e0053b6fcbd2cd
# Parent  5ab4ac522fec5752d797007b2b0809044c1a3ee9
[project @ 2003-01-04 00:41:39 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,11 +1,12 @@
 2003-01-03  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* configure.in: Default value of BUILD_CXX is $CXX, not g++.
+	(AH_BOTTOM): Define __USE_STD_IOSTREAM if using Compaq C++ compiler.
 
 2003-01-02  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* configure.in: Fail on all gcc 1.x and 2.x versions.
 
 2002-12-30  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* configure.in (OCTAVE_LOCAL_BUFFER): New macro.
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -17,17 +17,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### for more details.
 ### 
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA. 
 
 AC_INIT
-AC_REVISION($Revision: 1.403 $)
+AC_REVISION($Revision: 1.404 $)
 AC_PREREQ(2.52)
 AC_CONFIG_SRCDIR([src/octave.cc])
 AC_CONFIG_HEADER(config.h)
 
 AC_DEFINE(OCTAVE_SOURCE, 1, [Define if this is Octave.])
   
 OCTAVE_HOST_TYPE
 
@@ -1349,16 +1349,20 @@ typedef int sig_atomic_t;
 #if defined (__GNUG__)
 #define OCTAVE_LOCAL_BUFFER(T, buf, size) \
   T buf[size]
 #else
 #define OCTAVE_LOCAL_BUFFER(T, buf, size) \
   std::auto_ptr<T> buf ## _auto_ptr (new T [size]); \
   T *buf = buf ## _auto_ptr.get ()
 #endif
+
+#if defined (__DECCXX)
+#define __USE_STD_IOSTREAM
+#endif
 ])
 
 ### Do the substitutions in all the Makefiles.
 
 AC_CONFIG_FILES([Makefile octMakefile Makeconf install-octave \
   test/Makefile dlfcn/Makefile \
   doc/Makefile doc/faq/Makefile doc/interpreter/Makefile \
   doc/liboctave/Makefile doc/refcard/Makefile emacs/Makefile \
diff --git a/libcruft/ChangeLog b/libcruft/ChangeLog
--- a/libcruft/ChangeLog
+++ b/libcruft/ChangeLog
@@ -1,10 +1,13 @@
 2003-01-03  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* odessa/odessa_rscom.f (ODESSA_RSCOM): Fix apparent typo (LODE2
+	should probably be LIODE2).
+
 	* Makerules.in (clean, mostlyclean): Also remove *.d.
 
 	* misc/quit.cc: Add std:: qualifiers to memcpy calls.
 
 2003-01-03  Paul Kienzle <pkienzle@users.sf.net>
 
 	* misc/quit.h: Move #include <new> outside extern "C" block.
 	* misc/f77-fcn.h: Move #include "quit.h" outside extern "C" block.
diff --git a/libcruft/odessa/odessa_rscom.f b/libcruft/odessa/odessa_rscom.f
--- a/libcruft/odessa/odessa_rscom.f
+++ b/libcruft/odessa/odessa_rscom.f
@@ -13,14 +13,14 @@ C---------------------------------------
 C
       DO 10 I = 1,LRODE1
  10     RODE1(I) = RSAV(I)
       DO 20 I = 1,LRODE2
         J = LRODE1 + I
  20     RODE2(I) = RSAV(J)
       DO 30 I = 1,LIODE1
  30     IODE1(I) = ISAV(I)
-      DO 40 I = 1,LODE2
+      DO 40 I = 1,LIODE2
         J = LIODE1 + I
  40     IODE2(I) = ISAV(J)
       RETURN
 C----------------------- END OF SUBROUTINE ODESSA_RSCOM -----------------------
       END
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,15 @@
 2003-01-03  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* dbleDET.cc (DET::value_will_overflow): We want det[1], not det[2].
+	(DET::value_will_underflow): Likewise.
+	* CmplxDET.cc (ComplexDET::value_will_overflow): Likewise.
+	(ComplexDET::value_will_underflow): Likewise.
+
 	* Makefile.in (distclean): Also remove stamp-prereq.
 
 	* Array2-idx.h (assign): If assignment conforms but the RHS and
 	index are empty matrices, don't do anything.
 
 2002-12-26  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* pathsearch.cc (make_retval, free_c_array, make_c_names,
diff --git a/liboctave/CmplxDET.cc b/liboctave/CmplxDET.cc
--- a/liboctave/CmplxDET.cc
+++ b/liboctave/CmplxDET.cc
@@ -32,23 +32,23 @@ Software Foundation, 59 Temple Place - S
 #include <cmath>
 
 #include "CmplxDET.h"
 #include "oct-cmplx.h"
 
 int
 ComplexDET::value_will_overflow (void) const
 {
-  return det[2].real () + 1 > log10 (DBL_MAX) ? 1 : 0;
+  return det[1].real () + 1 > log10 (DBL_MAX) ? 1 : 0;
 }
 
 int
 ComplexDET::value_will_underflow (void) const
 {
-  return det[2].real () - 1 < log10 (DBL_MIN) ? 1 : 0;
+  return det[1].real () - 1 < log10 (DBL_MIN) ? 1 : 0;
 }
 
 Complex
 ComplexDET::coefficient (void) const
 {
   return det[0];
 }
 
diff --git a/liboctave/dbleDET.cc b/liboctave/dbleDET.cc
--- a/liboctave/dbleDET.cc
+++ b/liboctave/dbleDET.cc
@@ -31,23 +31,23 @@ Software Foundation, 59 Temple Place - S
 #include <cfloat>
 #include <cmath>
 
 #include "dbleDET.h"
 
 int
 DET::value_will_overflow (void) const
 {
-  return det[2] + 1 > log10 (DBL_MAX) ? 1 : 0;
+  return det[1] + 1 > log10 (DBL_MAX) ? 1 : 0;
 }
 
 int
 DET::value_will_underflow (void) const
 {
-  return det[2] - 1 < log10 (DBL_MIN) ? 1 : 0;
+  return det[1] - 1 < log10 (DBL_MIN) ? 1 : 0;
 }
 
 double
 DET::coefficient (void) const
 {
   return det[0];
 }
 
