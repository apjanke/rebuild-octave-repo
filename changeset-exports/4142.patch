# HG changeset patch
# User jwe
# Date 1036159827 0
#      Fri Nov 01 14:10:27 2002 +0000
# Node ID 0739d46e778cab56a7fcb5469851115b749a949f
# Parent  8c710385c5723d64e30bd23eea707952cc759784
[project @ 2002-11-01 14:10:27 by jwe]

diff --git a/liboctave/Array2.cc b/liboctave/Array2.cc
--- a/liboctave/Array2.cc
+++ b/liboctave/Array2.cc
@@ -39,32 +39,32 @@ Software Foundation, 59 Temple Place - S
 #include "idx-vector.h"
 #include "Array2-idx.h"
 #endif
 
 #include "lo-error.h"
 
 // Two dimensional array class.
 
+// A guess (should be quite conservative).
+#define MALLOC_OVERHEAD 1024
+
 template <class T>
 int
 Array2<T>::get_size (int r, int c) const
 {
   // XXX KLUGE XXX
 
   // If an allocation of an array with r * c elements of type T
   // would cause an overflow in the allocator when computing the
   // size of the allocation, then return a value which, although
   // not equivalent to the actual request, should be too large for
   // most current hardware, but not so large to cause the
   // allocator to barf on computing retval * sizeof (T).
 
-  // A guess (should be quite conservative).
-  static const int MALLOC_OVERHEAD = 1024;
-
   static int nl;
   static double dl
     = frexp (static_cast<double>
 	     (INT_MAX - MALLOC_OVERHEAD) / sizeof (T), &nl);
 
   // This value should be an integer.  If we return this value and
   // things work the way we expect, we should be paying a visit to
   // new_handler in no time flat.
@@ -84,16 +84,18 @@ Array2<T>::get_size (int r, int c) const
 
       if (dt <= 0.5)
 	nt--;
     }
 
   return (nt < nl || (nt == nl && dt < dl)) ? r * c : max_items;
 }
 
+#undef MALLOC_OVERHEAD
+
 template <class T>
 T
 Array2<T>::range_error (const char *fcn, int i, int j) const
 {
   (*current_liboctave_error_handler)
     ("%s (%d, %d): range error", fcn, i, j);
   return T ();
 }
diff --git a/liboctave/ArrayN.cc b/liboctave/ArrayN.cc
--- a/liboctave/ArrayN.cc
+++ b/liboctave/ArrayN.cc
@@ -64,32 +64,32 @@ ArrayN<T>::compute_index (const Array<in
     }
   else
     (*current_liboctave_error_handler)
       ("ArrayN<T>::compute_index: invalid arr_idxing operation");
 
   return retval;
 }
 
+// A guess (should be quite conservative).
+#define MALLOC_OVERHEAD 1024
+
 template <class T>
 int
 ArrayN<T>::get_size (const Array<int>& arr_idx)
 {
   // XXX KLUGE XXX
 
   // If an allocation of an array with r * c elements of type T
   // would cause an overflow in the allocator when computing the
   // size of the allocation, then return a value which, although
   // not equivalent to the actual request, should be too large for
   // most current hardware, but not so large to cause the
   // allocator to barf on computing retval * sizeof (T).
 
-  // A guess (should be quite conservative).
-  static const int MALLOC_OVERHEAD = 1024;
-
   static int nl;
   static double dl
     = frexp (static_cast<double>
 	     (INT_MAX - MALLOC_OVERHEAD) / sizeof (T), &nl);
 
   // This value should be an integer.  If we return this value and
   // things work the way we expect, we should be paying a visit to
   // new_handler in no time flat.
@@ -126,16 +126,18 @@ ArrayN<T>::get_size (const Array<int>& a
 
       for (int i = 0; i < n; i++)
 	retval *= arr_idx(i);
     }
 
   return retval;
 }
 
+#undef MALLOC_OVERHEAD
+
 template <class T>
 T
 ArrayN<T>::range_error (const char *fcn, const Array<int>& arr_idx) const
 {
   // XXX FIXME XXX -- report index values too!
 
   (*current_liboctave_error_handler) ("range error in ArrayN");
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,14 @@
+2002-11-01  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* Array2.cc (Array2<T>::get_size): #define MALLOC_OVERHEAD to
+	avoid OS X linker bug.
+	* ArrayN.cc (ArrayN<T>::get_size): Likewise.
+
 2002-10-31  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* ODESFunc.h (ODESFunc::ODES_fsub, ODESFunc::ODES_bsub,
 	ODESFunc::ODES_jsub): Reorder args for consistency with other
 	solvers.
 	* ODESSA.cc: Fix all callers.
 
 	* mx-inlines.cc (MX_BASE_REDUCTION_OP): Also return scalar
