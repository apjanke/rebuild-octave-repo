# HG changeset patch
# User jwe
# Date 1114099409 0
#      Thu Apr 21 16:03:29 2005 +0000
# Node ID 7a51b27574bc41a7da7e1088c1dd5ec8d513d779
# Parent  b86a6fcc172108a057da27324ff6de315aa83901
[project @ 2005-04-21 16:03:29 by jwe]

diff --git a/src/DLD-FUNCTIONS/__qp__.cc b/src/DLD-FUNCTIONS/__qp__.cc
--- a/src/DLD-FUNCTIONS/__qp__.cc
+++ b/src/DLD-FUNCTIONS/__qp__.cc
@@ -15,25 +15,33 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
 #include <cfloat>
 
-#include <iostream>
+#include "dbleCHOL.h"
+#include "dbleSVD.h"
+#include "mx-m-dm.h"
+#include "EIG.h"
 
-#include <octave/oct.h>
-#include <octave/parse.h>
-#include <octave/EIG.h>
-#include <octave/dbleCHOL.h>
-#include <octave/dbleSVD.h>
+#include "defun-dld.h"
+#include "error.h"
+#include "gripes.h"
+#include "oct-obj.h"
+#include "pr-output.h"
+#include "utils.h"
 
 static inline double
 ABS (double x)
 {
   return x < 0 ? -x : x;
 }
 
 static Matrix
@@ -244,18 +252,16 @@ qp (const Matrix& H, const ColumnVector&
 	  Y = Aact.pseudo_inverse ();
 
 	  // Reduced Hessian
 	  Matrix Zt = Z.transpose ();
 	  Matrix rH = Zt * H * Z;
 
 	  int pR = 0;
 
-	  Matrix tR;
-
 	  if (dimZ > 0)
 	    {
 	      // Computing the Cholesky factorization (pR = 0 means
 	      // that the reduced Hessian was positive definite).
 
 	      CHOL cholrH (rH, pR);
 	      Matrix tR = cholrH.chol_matrix ();
 	      if (pR == 0)
