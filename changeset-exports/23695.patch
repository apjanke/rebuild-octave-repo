# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1498482141 14400
#      Mon Jun 26 09:02:21 2017 -0400
# Node ID 47c39af894018ac80ded0254d6660836b44a763b
# Parent  4a62da62af0946f50650459bb97b9c42a158e806
tag deprecated gl2ps_print wrapper function with OCTAVE_DEPRECATED attribute

* gl2ps-print.h (gl2ps_print): Tag deprecated wrapper function with
OCTAVE_DEPRECATED attribute.
* Canvas.cc, __init_fltk__.cc, __osmesa_print__.cc:
Outside of octave namespace, use octave::gl2ps_print.

diff --git a/libgui/graphics/Canvas.cc b/libgui/graphics/Canvas.cc
--- a/libgui/graphics/Canvas.cc
+++ b/libgui/graphics/Canvas.cc
@@ -106,17 +106,17 @@ namespace QtHandles
   {
     gh_manager::auto_lock lock;
     graphics_object obj = gh_manager::get_object (m_handle);
 
     if (obj.valid_object ())
       {
         graphics_object figObj (obj.get_ancestor ("figure"));
 
-        gl2ps_print (figObj, file_cmd.toStdString (), term.toStdString ());
+        octave::gl2ps_print (figObj, file_cmd.toStdString (), term.toStdString ());
       }
   }
 
   /*
      Two updateCurrentPoint() routines are required:
      1) Used for QMouseEvents where cursor position data is in callback from Qt.
      2) Used for QKeyEvents where cursor position must be determined.
   */
diff --git a/libinterp/corefcn/gl2ps-print.h b/libinterp/corefcn/gl2ps-print.h
--- a/libinterp/corefcn/gl2ps-print.h
+++ b/libinterp/corefcn/gl2ps-print.h
@@ -33,16 +33,17 @@ namespace octave
 {
   extern OCTINTERP_API void
   gl2ps_print (const graphics_object& fig, const std::string& stream,
                const std::string& term);
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
+OCTAVE_DEPRECATED (4.2, "use 'octave::gl2ps_print' instead")
 inline void
 gl2ps_print (const graphics_object& fig, const std::string& stream,
              const std::string& term)
 {
   return octave::gl2ps_print (fig, stream, term);
 }
 
 #endif
diff --git a/libinterp/dldfcn/__init_fltk__.cc b/libinterp/dldfcn/__init_fltk__.cc
--- a/libinterp/dldfcn/__init_fltk__.cc
+++ b/libinterp/dldfcn/__init_fltk__.cc
@@ -144,17 +144,17 @@ public:
 
   bool zoom (void) { return m_in_zoom; }
   void set_zoom_box (const Matrix& zb) { m_zoom_box = zb; }
 
   void print (const std::string& cmd, const std::string& term)
   {
     //std::cout << "OpenGL_fltk::print(cmd=" << cmd << ", term=" << term << ") canvas size = " << w () << "x" << h () << std::endl;
 
-    gl2ps_print (gh_manager::get_object (m_number), cmd, term);
+    octave::gl2ps_print (gh_manager::get_object (m_number), cmd, term);
   }
 
   uint8NDArray get_pixels (void)
   {
     m_renderer.draw (gh_manager::get_object (m_number));
     return m_renderer.get_pixels (w (), h ());
   }
 
diff --git a/libinterp/dldfcn/__osmesa_print__.cc b/libinterp/dldfcn/__osmesa_print__.cc
--- a/libinterp/dldfcn/__osmesa_print__.cc
+++ b/libinterp/dldfcn/__osmesa_print__.cc
@@ -157,17 +157,17 @@ instead.
       fp.set_visible ("off");
     }
 
   if (nargin == 3)
     {
       std::string file = args(1).string_value ();
       std::string term = args(2).string_value ();
 
-      gl2ps_print (fobj, file, term);
+      octave::gl2ps_print (fobj, file, term);
     }
   else
     {
       // return RGB image
       octave::opengl_renderer rend;
 
       // Draw and finish () or there may primitives missing in the
       // output.
