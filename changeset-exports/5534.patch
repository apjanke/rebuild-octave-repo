# HG changeset patch
# User jwe
# Date 1131731151 0
#      Fri Nov 11 17:45:51 2005 +0000
# Node ID e107161b8ca381147e70c5f34b3918f1b61e9aee
# Parent  667ad2becb638b99f9d9cf82d11f61adb97edeb9
[project @ 2005-11-11 17:44:05 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,27 @@
+2005-11-11  John W. Eaton  <jwe@octave.org>
+
+	* variables.cc (symbol_out_of_date): Check for autoloads here too.
+
+	* Makefile.in (PKG_ADD): Depend on $(DLD_DEF_FILES), not $(DLD_SRC).
+	(%.df : %.cc): Also insert PKG_ADD commands in .df files.
+	(install-oct): Generate PKG_ADD file for install directory here.
+	Don't depend on PKG-ADD. No need to make .oct file links.
+	(clean): No need to delete links.
+	(stamp-oct-links): Delete target.
+	(distclean): No need to remove stamp-oct-links.
+	(all): Depend on $(OCT_FILES), not stamp-oct-links.
+
+	* mk-pkg-add: New file.
+	* Makefile.in (DISTFILES): Add it to the list.
+
+	* mk-oct-links: Delete.
+	* Makefile.in (DISTFILES): Remove it from the list.
+
 2005-11-10  John W. Eaton  <jwe@octave.org>
 
 	* ov-str-mat.h (octave_char_matrix_str::permute,
 	octave_char_matrix_str::resize): New functions.
 	(octave_char_matrix_sq_str::reshape,
 	octave_char_matrix_sq_str::permute,
 	octave_char_matrix_sq_str::resize): New functions.
 
diff --git a/src/DLD-FUNCTIONS/sparse.cc b/src/DLD-FUNCTIONS/sparse.cc
--- a/src/DLD-FUNCTIONS/sparse.cc
+++ b/src/DLD-FUNCTIONS/sparse.cc
@@ -628,19 +628,19 @@ sparse_find (const SparseBoolMatrix& v)
       retval(1)= J;
       retval(2)= S;
     }
   retval(3)= (double) nr;
   retval(4)= (double) nc;
   return retval;
 }
 
-// PKG_ADD: dispatch ("find", "spfind", "sparse matrix")
-// PKG_ADD: dispatch ("find", "spfind", "sparse complex matrix")
-// PKG_ADD: dispatch ("find", "spfind", "sparse bool matrix")
+// PKG_ADD: dispatch ("find", "spfind", "sparse matrix");
+// PKG_ADD: dispatch ("find", "spfind", "sparse complex matrix");
+// PKG_ADD: dispatch ("find", "spfind", "sparse bool matrix");
 DEFUN_DLD (spfind, args, nargout ,
     "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {[...] =} spfind (...)\n\
 SPFIND: a sparse version of the find operator\n\
 @enumerate\n\
     @item\n\
 @var{x }= spfind( @var{a })\n\
     @itemize @w\n\
diff --git a/src/DLD-FUNCTIONS/spchol.cc b/src/DLD-FUNCTIONS/spchol.cc
--- a/src/DLD-FUNCTIONS/spchol.cc
+++ b/src/DLD-FUNCTIONS/spchol.cc
@@ -111,19 +111,19 @@ sparse_chol (const octave_value_list& ar
 	}
     }
   else
     gripe_wrong_type_arg (name.c_str(), arg);
 
   return retval;
 }
 
-// PKG_ADD: dispatch ("chol", "spchol", "sparse matrix")
-// PKG_ADD: dispatch ("chol", "spchol", "sparse complex matrix")
-// PKG_ADD: dispatch ("chol", "spchol", "sparse bool matrix")
+// PKG_ADD: dispatch ("chol", "spchol", "sparse matrix");
+// PKG_ADD: dispatch ("chol", "spchol", "sparse complex matrix");
+// PKG_ADD: dispatch ("chol", "spchol", "sparse bool matrix");
 DEFUN_DLD (spchol, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{r} =} spchol (@var{a})\n\
 @deftypefnx {Loadable Function} {[@var{r}, @var{p}] =} spchol (@var{a})\n\
 @deftypefnx {Loadable Function} {[@var{r}, @var{p}, @var{q}] =} spchol (@var{a})\n\
 @cindex Cholesky factorization\n\
 Compute the Cholesky factor, @var{r}, of the symmetric positive definite\n\
 sparse matrix @var{a}, where\n\
@@ -159,19 +159,19 @@ r' * r = q * a * q'.\n\
 \n\
 Note that @code{splchol} factorizations is faster and use less memory.\n\
 @end deftypefn\n\
 @seealso{spcholinv, spchol2inv, splchol}")
 {
   return sparse_chol (args, nargout, "spchol", false);
 }
 
-// PKG_ADD: dispatch ("lchol", "splchol", "sparse matrix")
-// PKG_ADD: dispatch ("lchol", "splchol", "sparse complex matrix")
-// PKG_ADD: dispatch ("lchol", "splchol", "sparse bool matrix")
+// PKG_ADD: dispatch ("lchol", "splchol", "sparse matrix");
+// PKG_ADD: dispatch ("lchol", "splchol", "sparse complex matrix");
+// PKG_ADD: dispatch ("lchol", "splchol", "sparse bool matrix");
 DEFUN_DLD (splchol, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{l} =} splchol (@var{a})\n\
 @deftypefnx {Loadable Function} {[@var{l}, @var{p}] =} splchol (@var{a})\n\
 @deftypefnx {Loadable Function} {[@var{l}, @var{p}, @var{q}] =} splchol (@var{a})\n\
 @cindex Cholesky factorization\n\
 Compute the Cholesky factor, @var{l}, of the symmetric positive definite\n\
 sparse matrix @var{a}, where\n\
@@ -209,19 +209,19 @@ Note that @code{splchol} factorizations 
 than @code{spchol}. @code{splchol(@var{a})} is equivalent to\n\
 @code{spchol(@var{a})'}.\n\
 @end deftypefn\n\
 @seealso{spcholinv, spchol2inv, splchol}")
 {
   return sparse_chol (args, nargout, "splchol", true);
 }
 
-// PKG_ADD: dispatch ("cholinv", "spcholinv", "sparse matrix")
-// PKG_ADD: dispatch ("cholinv", "spcholinv", "sparse complex matrix")
-// PKG_ADD: dispatch ("cholinv", "spcholinv", "sparse bool matrix")
+// PKG_ADD: dispatch ("cholinv", "spcholinv", "sparse matrix");
+// PKG_ADD: dispatch ("cholinv", "spcholinv", "sparse complex matrix");
+// PKG_ADD: dispatch ("cholinv", "spcholinv", "sparse bool matrix");
 DEFUN_DLD (spcholinv, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} spcholinv (@var{a})\n\
 Use the Cholesky factorization to compute the inverse of the\n\
 sparse symmetric positive definite matrix @var{a}.\n\
 @seealso{spchol, spchol2inv}\n\
 @end deftypefn")
 {
@@ -273,19 +273,19 @@ sparse symmetric positive definite matri
 	}
     }
   else
     print_usage ("spcholinv");
 
   return retval;
 }
 
-// PKG_ADD: dispatch ("chol2inv", "spchol2inv", "sparse matrix")
-// PKG_ADD: dispatch ("chol2inv", "spchol2inv", "sparse complex matrix")
-// PKG_ADD: dispatch ("chol2inv", "spchol2inv", "sparse bool matrix")
+// PKG_ADD: dispatch ("chol2inv", "spchol2inv", "sparse matrix");
+// PKG_ADD: dispatch ("chol2inv", "spchol2inv", "sparse complex matrix");
+// PKG_ADD: dispatch ("chol2inv", "spchol2inv", "sparse bool matrix");
 DEFUN_DLD (spchol2inv, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} spchol2inv (@var{u})\n\
 Invert a sparse symmetric, positive definite square matrix from its\n\
 Cholesky decomposition, @var{u}.  Note that @var{u} should be an\n\
 upper-triangular matrix with positive diagonal elements.\n\
 @code{chol2inv (@var{u})} provides @code{inv (@var{u}'*@var{u})} but\n\
 it is much faster than using @code{inv}.\n\
diff --git a/src/DLD-FUNCTIONS/spdet.cc b/src/DLD-FUNCTIONS/spdet.cc
--- a/src/DLD-FUNCTIONS/spdet.cc
+++ b/src/DLD-FUNCTIONS/spdet.cc
@@ -31,19 +31,19 @@ Boston, MA 02110-1301, USA.
 #include "utils.h"
 
 #include "dbleDET.h"
 #include "CmplxDET.h"
 
 #include "ov-re-sparse.h"
 #include "ov-cx-sparse.h"
 
-// PKG_ADD: dispatch ("det", "spdet", "sparse matrix")
-// PKG_ADD: dispatch ("det", "spdet", "sparse complex matrix")
-// PKG_ADD: dispatch ("det", "spdet", "sparse bool matrix")
+// PKG_ADD: dispatch ("det", "spdet", "sparse matrix");
+// PKG_ADD: dispatch ("det", "spdet", "sparse complex matrix");
+// PKG_ADD: dispatch ("det", "spdet", "sparse bool matrix");
 DEFUN_DLD (spdet, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {[@var{d}, @var{rcond}] = } spdet (@var{a})\n\
 Compute the determinant of sparse matrix @var{a} using UMFPACK.  Return\n\
 an estimate of the reciprocal condition number if requested.\n\
 @end deftypefn")
 {
   octave_value_list retval;
diff --git a/src/DLD-FUNCTIONS/spkron.cc b/src/DLD-FUNCTIONS/spkron.cc
--- a/src/DLD-FUNCTIONS/spkron.cc
+++ b/src/DLD-FUNCTIONS/spkron.cc
@@ -74,19 +74,19 @@ kron (const Sparse<T>& A, const Sparse<T
 }
 
 template void
 kron (const Sparse<double>&, const Sparse<double>&, Sparse<double>&);
 
 template void
 kron (const Sparse<Complex>&, const Sparse<Complex>&, Sparse<Complex>&);
 
-// PKG_ADD: dispatch ("kron", "spkron", "sparse matrix")
-// PKG_ADD: dispatch ("kron", "spkron", "sparse complex matrix")
-// PKG_ADD: dispatch ("kron", "spkron", "sparse bool matrix")
+// PKG_ADD: dispatch ("kron", "spkron", "sparse matrix");
+// PKG_ADD: dispatch ("kron", "spkron", "sparse complex matrix");
+// PKG_ADD: dispatch ("kron", "spkron", "sparse bool matrix");
 DEFUN_DLD (spkron, args,  nargout, "-*- texinfo -*-\n\
 @deftypefn {Function File} {} spkron (@var{a}, @var{b})\n\
 Form the kronecker product of two sparse matrices. This is defined\n\
 block by block as\n\
 \n\
 @example\n\
 x = [a(i, j) b]\n\
 @end example\n\
diff --git a/src/DLD-FUNCTIONS/splu.cc b/src/DLD-FUNCTIONS/splu.cc
--- a/src/DLD-FUNCTIONS/splu.cc
+++ b/src/DLD-FUNCTIONS/splu.cc
@@ -30,19 +30,19 @@ Boston, MA 02110-1301, USA.
 #include "oct-obj.h"
 #include "utils.h"
 
 #include "SparseCmplxLU.h"
 #include "SparsedbleLU.h"
 #include "ov-re-sparse.h"
 #include "ov-cx-sparse.h"
 
-// PKG_ADD: dispatch ("lu", "splu", "sparse matrix")
-// PKG_ADD: dispatch ("lu", "splu", "sparse complex matrix")
-// PKG_ADD: dispatch ("lu", "splu", "sparse bool matrix")
+// PKG_ADD: dispatch ("lu", "splu", "sparse matrix");
+// PKG_ADD: dispatch ("lu", "splu", "sparse complex matrix");
+// PKG_ADD: dispatch ("lu", "splu", "sparse bool matrix");
 DEFUN_DLD (splu, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {[@var{l}, @var{u}] =} splu (@var{a})\n\
 @deftypefnx {Loadable Function} {[@var{l}, @var{u}, @var{P}] =} splu (@var{a})\n\
 @deftypefnx {Loadable Function} {[@var{l}, @var{u}, @var{P}, @var{Q}] =} splu (@var{a})\n\
 @deftypefnx {Loadable Function} {[@var{l}, @var{u}, @var{P}, @var{Q}] =} splu (@dots{}, @var{thres})\n\
 @deftypefnx {Loadable Function} {[@var{l}, @var{u}, @var{P}] =} splu (@dots{}, @var{Q})\n\
 @cindex LU decomposition\n\
@@ -384,22 +384,22 @@ be square.\n\
   else
     {
       gripe_wrong_type_arg ("splu", arg);
     }
 
   return retval;
 }
 
-// PKG_ADD: dispatch ("inv", "spinv", "sparse matrix")
-// PKG_ADD: dispatch ("inv", "spinv", "sparse complex matrix")
-// PKG_ADD: dispatch ("inv", "spinv", "sparse bool matrix")
-// PKG_ADD: dispatch ("inverse", "spinv", "sparse matrix")
-// PKG_ADD: dispatch ("inverse", "spinv", "sparse complex matrix")
-// PKG_ADD: dispatch ("inverse", "spinv", "sparse bool matrix")
+// PKG_ADD: dispatch ("inv", "spinv", "sparse matrix");
+// PKG_ADD: dispatch ("inv", "spinv", "sparse complex matrix");
+// PKG_ADD: dispatch ("inv", "spinv", "sparse bool matrix");
+// PKG_ADD: dispatch ("inverse", "spinv", "sparse matrix");
+// PKG_ADD: dispatch ("inverse", "spinv", "sparse complex matrix");
+// PKG_ADD: dispatch ("inverse", "spinv", "sparse bool matrix");
 DEFUN_DLD (spinv, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {[@var{x}, @var{rcond}] = } spinv (@var{a}, @var{Q})\n\
 Compute the inverse of the sparse square matrix @var{a}.  Return an estimate\n\
 of the reciprocal condition number if requested, otherwise warn of an\n\
 ill-conditioned matrix if the reciprocal condition number is small.\n\
 This function takes advantage of the sparsity of the matrix to accelerate\n\
 the calculation of the inverse.\n\
diff --git a/src/Makefile.in b/src/Makefile.in
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -18,18 +18,19 @@ INSTALL = @INSTALL@
 INSTALL_PROGRAM = @INSTALL_PROGRAM@
 INSTALL_DATA = @INSTALL_DATA@
 
 PT_FLAGS = -fexternal-templates -fno-implicit-templates
 CXXFLAGS_NO_PT_FLAGS = $(filter-out $(PT_FLAGS), $(ALL_CXXFLAGS))
 
 %.df : %.cc
 	@echo making $@ from $<
-	@$(CXXCPP) $(CPPFLAGS) $(CXXFLAGS_NO_PT_FLAGS) -DMAKE_BUILTINS $< \
-	  | $(srcdir)/mkdefs > $@-t
+	@(egrep '^(///*|/\*) *PKG_ADD:' $< ; \
+	  $(CXXCPP) $(CPPFLAGS) $(CXXFLAGS_NO_PT_FLAGS) -DMAKE_BUILTINS $< \
+	    | $(srcdir)/mkdefs) > $@-t
 	@mv $@-t $@
 
 # How to make a .oct file from a .o file:
 
 ifeq ($(ENABLE_DYNAMIC_LINKING), true)
   ifdef CXXPICFLAG
     %.oct : pic/%.o octave$(EXEEXT)
 	  $(DL_LD) $(DL_LDFLAGS) -o $@ $< $(OCT_LINK_DEPS)
@@ -248,22 +249,22 @@ OCTINTERP_LINK_DEPS = \
   -L../liboctave $(LIBOCTAVE) -L../libcruft $(LIBCRUFT) $(LIBS) $(FLIBS)
 
 OCT_LINK_DEPS = \
   -L../libcruft $(LIBCRUFT) -L../liboctave $(LIBOCTAVE) \
   -L. $(LIBOCTINTERP) $(CHOLMOD_LIBS) $(UMFPACK_LIBS) $(AMD_LIBS) \
    $(COLAMD_LIBS) $(CCOLAMD_LIBS) $(BLAS_LIBS) $(FFTW_LIBS) $(LIBS) $(FLIBS)
 
 DISTFILES = Makefile.in ChangeLog mkdefs mkops mkgendoc \
-	DOCSTRINGS mkbuiltins mk-errno-list mk-oct-links \
+	DOCSTRINGS mkbuiltins mk-errno-list mk-pkg-add \
 	defaults.h.in oct-conf.h.in oct-errno.cc.in octave.gperf oct-gperf.h \
 	octave.cc parse.cc lex.cc y.tab.h gplot.cc \
 	$(INCLUDES) $(DIST_SRC) $(OPT_HANDLERS) $(EXTRAS)
 
-all: octave$(EXEEXT) stamp-oct-links PKG_ADD DOCSTRINGS
+all: octave$(EXEEXT) $(OCT_FILES) PKG_ADD DOCSTRINGS
 .PHONY: all
 
 objects: $(OBJECTS)
 
 XERBLA = ../libcruft/blas-xtra/xerbla.o
 ifdef FPICFLAG
   PIC_XERBLA = ../libcruft/blas-xtra/pic/xerbla.o
 else
@@ -296,22 +297,16 @@ liboctinterp.$(LIBEXT): $(OBJECTS) $(XER
 liboctinterp.$(SHLEXT_VER): liboctinterp.$(SHLEXT)
 	rm -f $@
 	$(LN_S) $< $@
 
 liboctinterp.$(SHLEXT): $(PICOBJ) $(PIC_XERBLA)
 	rm -f $@
 	$(SH_LD) $(SH_LDFLAGS) $(SONAME_FLAGS) -o $@ $^ $(OCTINTERP_LINK_DEPS)
 
-stamp-oct-links: $(OCT_FILES)
-	if [ -n "$(OCT_FILES)" ]; then \
-	  $(srcdir)/mk-oct-links . $(DLD_DEF_FILES); \
-	fi
-	touch stamp-oct-links
-
 stamp-prereq: defaults.h oct-conf.h oct-gperf.h parse.cc lex.cc gplot.cc $(OPT_HANDLERS)
 	touch stamp-prereq
 
 octave$(EXEEXT): stamp-prereq $(LIBRARIES) main.o $(DLD_STATIC_OBJ)
 	$(LD_CXX) $(CPPFLAGS) $(ALL_CXXFLAGS) $(RDYNAMIC_FLAG) \
 	$(ALL_LDFLAGS) -o $@ \
 	main.o $(DLD_STATIC_OBJ) \
 	$(OCTAVE_LFLAGS) \
@@ -342,20 +337,18 @@ builtins.cc: $(DEF_FILES) mkbuiltins
 	@echo making $@
 	@echo DEF_FILES = $(DEF_FILES)
 	@echo VAR_FILES = $(VAR_FILES)
 	@echo $(DEF_FILES) > def-files
 	@echo $(VAR_FILES) > var-files
 	@$(srcdir)/mkbuiltins def-files var-files > $@-t
 	@$(top_srcdir)/move-if-change $@-t $@
 
-PKG_ADD: $(DLD_SRC)
-	$(SED) -n -e 's,^//* *PKG_ADD: *,,p' \
-	          -e 's,^/\* *PKG_ADD: *\(.*\) \*/$$,\1,p' \
-	  $(addprefix $(srcdir)/, $(DLD_SRC)) > PKG_ADD-t
+PKG_ADD: $(DLD_DEF_FILES)
+	$(srcdir)/mk-pkg-add --prefix $(shell pwd) $(DLD_DEF_FILES) > PKG_ADD-t
 	mv PKG_ADD-t PKG_ADD
 
 DOCSTRINGS: gendoc$(BUILD_EXEEXT)
 	./gendoc > $@-t
 	mv $@-t $@
 
 doc-files: $(DOC_FILES)
 	@echo making $@
@@ -398,25 +391,24 @@ install-strip:
 
 install-bin:
 	$(top_srcdir)/mkinstalldirs $(DESTDIR)$(bindir)
 	rm -f $(DESTDIR)$(bindir)/octave$(EXEEXT)
 	$(INSTALL_PROGRAM) octave$(EXEEXT) $(DESTDIR)$(bindir)/octave-$(version)$(EXEEXT)
 	cd $(DESTDIR)$(bindir) ; $(LN_S) octave-$(version)$(EXEEXT) octave$(EXEEXT)
 .PHONY: install-bin
 
-install-oct: PKG_ADD
+install-oct:
 	$(top_srcdir)/mkinstalldirs $(DESTDIR)$(octfiledir)
-	$(INSTALL_DATA) PKG_ADD $(DESTDIR)$(octfiledir)/PKG_ADD
 	if [ -n "$(OCT_FILES)" ]; then \
 	  xfiles="$(OCT_FILES)"; \
 	  for f in $$xfiles; do \
 	    $(INSTALL_PROGRAM) $$f $(DESTDIR)$(octfiledir)/$$f; \
 	  done; \
-	  $(srcdir)/mk-oct-links $(DESTDIR)$(octfiledir) $(DLD_DEF_FILES); \
+	  $(srcdir)/mk-pkg-add --prefix $(octfiledir) $(DLD_DEF_FILES) > $(DESTDIR)$(octfiledir)/PKG_ADD
 	fi
 .PHONY: install-oct
 
 install-lib:
 	$(top_srcdir)/mkinstalldirs $(DESTDIR)$(octlibdir)
 	if $(STATIC_LIBS); then \
 	  rm -f $(DESTDIR)$(octlibdir)/liboctinterp.$(LIBEXT); \
 	  $(INSTALL_DATA) liboctinterp.$(LIBEXT) \
@@ -469,34 +461,31 @@ uninstall:
 
 tags: $(SOURCES) $(DLD_SRC)
 	ctags $(SOURCES) $(DLD_SRC)
 
 TAGS: $(SOURCES) $(DLD_SRC)
 	etags $(SOURCES) $(DLD_SRC)
 
 clean:
-	if [ -n "$(OCT_FILES)" ]; then \
-	  $(srcdir)/mk-oct-links --delete . $(DLD_DEF_FILES); \
-	fi
 	rm -f liboctinterp.$(LIBEXT)
 	rm -f liboctinterp.$(SHLEXT_VER) liboctinterp.$(SHLEXT)
 	rm -f $(OBJECTS) $(MAKEDEPS) $(DOC_FILES) $(OCT_FILES)
 	rm -f $(PICOBJ) $(DLD_PICOBJ) stmp-pic gendoc$(EXEEXT)
 	rm -f builtins.cc ops.cc defaults.h oct-conf.h def-files var-files
 	rm -f PKG_ADD
 	-rmdir pic
 .PHONY: clean
 
 mostlyclean: clean
 .PHONY: mostlyclean
 
 distclean: clean
 	rm -f Makefile octave$(EXEEXT) .fname so_locations oct-errno.cc
-	rm -f stamp-prereq stamp-liboctave-prereq stamp-oct-links
+	rm -f stamp-prereq stamp-liboctave-prereq
 	rm -f doc-files gendoc.cc DOCSTRINGS
 .PHONY: distclean
 
 maintainer-clean: distclean
 	rm -f tags TAGS y.tab.c y.tab.h y.output yy.lex.c lex.cc parse.cc
 	rm -f oct-gperf.h gplot.cc $(OPT_HANDLERS)
 .PHONY: maintainer-clean
 
diff --git a/src/mk-oct-links b/src/mk-oct-links
deleted file mode 100755
--- a/src/mk-oct-links
+++ /dev/null
@@ -1,53 +0,0 @@
-#! /bin/sh -e
-
-# Create additional links to .oct files that define more than one
-# function.
-
-# If the first arg is --print, only print the links we need to make.
-
-# The first non-option arg is taken as the directory where the .oct
-# files are installed.  The remaining arguments should be the list of
-# .df files corresponding to the source files that were used to
-# create the .oct files.
-
-SED=${SED:-'sed'}
-
-print_only=false
-delete_links=false
-if [ $1 = "--print" -o $1 = "-p" ]; then
-  print_only=true
-  shift
-elif [ $1 = "--delete" ]; then
-  delete_links=true
-  shift
-fi
-
-links_dir=$1
-shift
-
-for f in "$@"; do
-  if [ -f $f ]; then
-    base=`basename $f | $SED 's/\.df$//'`
-    fcns=`grep '^ *XDEFUN_DLD_INTERNAL' $f |\
-	  $SED -e 's/XDEFUN_DLD_INTERNAL *( *//' -e 's/ *,.*$//' |\
-	  sort -u`
-    if [ -n "$fcns" ]; then
-      for n in $fcns; do
-	if [ "$n" = "$base" ]; then
-	  true
-	else
-	  if $print_only; then
-	    echo $base.oct $n.oct
-	  elif $delete_links; then
-	    rm -f $links_dir/$n.oct
-	  else
-	    echo "creating link $n.oct -> $base.oct"
-	    ( cd $links_dir; rm -f $n.oct; ln $base.oct $n.oct )
-	  fi
-	fi
-      done
-    fi
-  fi
-done
-
-exit $?
diff --git a/src/mk-pkg-add b/src/mk-pkg-add
new file mode 100755
--- /dev/null
+++ b/src/mk-pkg-add
@@ -0,0 +1,53 @@
+#! /bin/sh -e
+
+# Create additional links to .oct files that define more than one
+# function.
+
+# If the first arg is --print, only print the links we need to make.
+
+# The first non-option arg is taken as the directory where the .oct
+# files are installed.  The remaining arguments should be the list of
+# .df files corresponding to the source files that were used to
+# create the .oct files.
+
+SED=${SED:-'sed'}
+
+if [ $1 = "--prefix" ]; then
+  shift
+  prefix="$1"
+  shift
+fi
+
+for f in "$@"; do
+  if [ -f $f ]; then
+
+    ## Compute and print the autoloads.
+  
+    base=`basename $f | $SED 's/\.df$//'`
+    fcns=`grep '^ *XDEFUN_DLD_INTERNAL' $f |\
+	  $SED -e 's/XDEFUN_DLD_INTERNAL *( *//' -e 's/ *,.*$//' |\
+	  sort -u`
+    if [ -n "$fcns" ]; then
+      for n in $fcns; do
+	if [ "$n" = "$base" ]; then
+	  true
+	else
+          if [ -n "$prefix" ]; then
+	    echo "autoload (\"$n\", \"$prefix/$base.oct\");"
+	  else
+	    echo "autoload (\"$n\", \"$base.oct\");"
+	  fi
+	fi
+      done
+    fi
+
+    ## Process PKG_ADD directives after autoloads so that all
+    ## necessary functions can be found before they are used.
+
+    $SED -n -e 's,^//* *PKG_ADD: *,,p' \
+            -e 's,^/\* *PKG_ADD: *\(.*\) *\*/ *$,\1,p' $f
+
+  fi
+done
+
+exit $?
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -1025,24 +1025,45 @@ symbol_out_of_date (symbol_record *sr)
 	  if (! ff.empty ())
 	    {
 	      if (fcn->time_checked () < Vlast_prompt_time)
 		{
 		  time_t tp = fcn->time_parsed ();
 
 		  std::string nm = fcn->name ();
 
+		  // XXX FIXME XXX -- the following code is repeated
+		  // in load_fcn_from_file in parse.y.
+
 		  string_vector names (2);
 
-		  names[0] = nm + ".oct";
-		  names[1] = nm + ".m";
-
-		  std::string file = octave_env::make_absolute
-		    (Vload_path_dir_path.find_first_of (names),
-		     octave_env::getcwd ());
+		  int nm_len = nm.length ();
+
+		  std::string file;
+
+		  if (octave_env::absolute_pathname (nm)
+		      && ((nm_len > 4 && nm.substr (nm_len-4) == ".oct")
+			  || (nm_len > 2 && nm.substr (nm_len-4) == ".m")))
+		    {
+		      file = nm;
+		    }
+		  else
+		    {
+		      file = lookup_autoload (nm);
+
+		      if (file.empty ())
+			{
+			  names[0] = nm + ".oct";
+			  names[1] = nm + ".m";
+
+			  file = octave_env::make_absolute
+			    (Vload_path_dir_path.find_first_of (names),
+			     octave_env::getcwd ());
+			}
+		    }
 
 		  if (same_file (file, ff))
 		    {
 		      retval = fcn_out_of_date (fcn, ff, tp);
 		    }
 		  else
 		    {
 		      // Check the full function name.  Maybe we alrady
