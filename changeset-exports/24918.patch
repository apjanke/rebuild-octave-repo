# HG changeset patch
# User Michele Ginesi <michele.ginesi@gmail.com>
# Date 1519155445 -3600
#      Tue Feb 20 20:37:25 2018 +0100
# Branch stable
# Node ID ea3edda05b6617f85d4445b7eb5417f1e5f7a36c
# Parent  509e78c26e82eb489a28f451ca9273ee56f500bb
Lentz, gammainc: added single precision

Duplicated the code of the algorithm in __gammainc_lentz__.cc to
handle both single and double precision

--
changed libinterp/corefcn/__gammainc_lentz__.cc
changed scripts/specfun/gammainc.m

diff --git a/libinterp/corefcn/__gammainc_lentz__.cc b/libinterp/corefcn/__gammainc_lentz__.cc
--- a/libinterp/corefcn/__gammainc_lentz__.cc
+++ b/libinterp/corefcn/__gammainc_lentz__.cc
@@ -17,84 +17,138 @@
 // You should have received a copy of the GNU General Public License
 // along with Octave; see the file COPYING.  If not, see
 // <http://www.gnu.org/licenses/>.
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 #include "defun.h"
+#include "fNDArray.h"
 
 DEFUN (__gammainc_lentz__, args, , "Continued fraction for incomplete gamma function")
 {
   int nargin = args.length ();
   octave_value_list outargs;
-  if (nargin != 2)
+  if (nargin != 3)
     print_usage ();
   else
     {
-      NDArray x_arg = args(0).array_value ();
-      NDArray a_arg = args(1).array_value ();
+      FloatNDArray x_arg_s = args(0).array_value ();
+      FloatNDArray a_arg_s = args(1).array_value ();
+      bool is_single = args(2).bool_value ();
 
       // total number of scenarios: get maximum of length of all vectors
-      int len_x = x_arg.rows ();
-      int len_a = a_arg.rows ();
+      int len_x = x_arg_s.rows ();
+      int len_a = a_arg_s.rows ();
       int len = std::max(len_x,len_a);
 
       // input checks
       if (len_x > 1 && len_x != len)
-        error("gammainc_lentz_vec: expecting x to be of length 1 or %d",len);
+        error("gammainc_lentz_vec: expecting x to be of length 1 or %d", len);
       if (len_a > 1 && len_a != len)
-        error("gammainc_lentz_vec: expecting a to be of length 1 or %d",len);
+        error("gammainc_lentz_vec: expecting a to be of length 1 or %d", len);
 
       // initialize scenario dependent output:
       dim_vector dim_scen (len, 1);
       ColumnVector f (dim_scen);
 
-      NDArray x (dim_scen);
-      NDArray a (dim_scen);
+      if (! is_single)
+        {
+          NDArray x_arg = args(0).array_value ();
+          NDArray a_arg = args(1).array_value ();
+          NDArray x (dim_scen);
+          NDArray a (dim_scen);
 
-      // initialize scenario dependent input values (idx either 0 or ii)
-      if ( len_x == 1 )
-        x.fill(x_arg(0));
-      else
-      x = x_arg;
-      //
-      if ( len_a == 1 )
-        a.fill(a_arg(0));
-      else
-        a = a_arg;
+          // initialize scenario dependent input values (idx either 0 or ii)
+          if (len_x == 1)
+            x.fill (x_arg(0));
+          else
+          x = x_arg;
+          //
+          if (len_a == 1)
+            a.fill (a_arg(0));
+          else
+            a = a_arg;
+          static const double tiny = pow (2, -100);
+          static const double eps = std::numeric_limits<double>::epsilon();
+          double y, Cj, Dj, bj, aj, Deltaj;
+          int j, maxit;
+          maxit = 200;
+          // loop via all scenarios
+          for (octave_idx_type ii = 0; ii < len; ++ii)
+            {
+              // catch ctrl + c
+              OCTAVE_QUIT;
+              y = tiny;
+              Cj = y;
+              Dj = 0;
+              bj = x(ii) - a(ii) + 1;
+              aj = a(ii);
+              Deltaj = 0;
+              j = 1;
 
-      static const double tiny = pow (2, -100);
-      static const double eps = std::numeric_limits<double>::epsilon();
-      double y, Cj, Dj, bj, aj, Deltaj;
-      int j, maxit;
-      maxit = 200;
-      // loop via all scenarios
-    for (octave_idx_type ii = 0; ii < len; ++ii)
-      {
-        // catch ctrl + c
-        OCTAVE_QUIT;
-        y = tiny;
-        Cj = y;
-        Dj = 0;
-        bj = x(ii) - a(ii) + 1;
-        aj = a(ii);
-        Deltaj = 0;
-        j = 1;
+              while((std::abs ((Deltaj - 1) / y)  > eps) & (j < maxit))
+                {
+                  Cj = bj + aj/Cj;
+                  Dj = 1 / (bj + aj*Dj);
+                  Deltaj = Cj * Dj;
+                  y *= Deltaj;
+                  bj += 2;
+                  aj = j * (a(ii) - j);
+                  j++;
+                }
+              if (! error_state)
+                  f(ii) = y;
+              outargs(0) = f;
+            }
+        }
+      else
+        {
+          FloatNDArray x_s (dim_scen);
+          FloatNDArray a_s (dim_scen);
 
-        while((std::abs((Deltaj - 1) / y)  > eps) & (j < maxit))
-          {
-            Cj = bj + aj/Cj;
-            Dj = 1 / (bj + aj*Dj);
-            Deltaj = Cj * Dj;
-            y *= Deltaj;
-            bj += 2;
-            aj = j * (a(ii) - j);
-            j++;
-          }
-        if (! error_state)
-            f(ii) = y;
-        outargs(0) = f;
+          // initialize scenario dependent input values (idx either 0 or ii)
+          if (len_x == 1)
+            x_s.fill (x_arg_s(0));
+          else
+          x_s = x_arg_s;
+          //
+          if (len_a == 1)
+            a_s.fill (a_arg_s(0));
+          else
+            a_s = a_arg_s;
+          static const float tiny = pow (2, -50);
+          static const float eps = std::numeric_limits<float>::epsilon();
+          float y, Cj, Dj, bj, aj, Deltaj;
+          int j, maxit;
+          maxit = 200;
+          // loop via all scenarios
+          for (octave_idx_type ii = 0; ii < len; ++ii)
+            {
+              // catch ctrl + c
+              OCTAVE_QUIT;
+              y = tiny;
+              Cj = y;
+              Dj = 0;
+              bj = x_s(ii) - a_s(ii) + 1;
+              aj = a_s(ii);
+              Deltaj = 0;
+              j = 1;
+
+              while((std::abs ((Deltaj - 1) / y)  > eps) & (j < maxit))
+                {
+                  Cj = bj + aj/Cj;
+                  Dj = 1 / (bj + aj*Dj);
+                  Deltaj = Cj * Dj;
+                  y *= Deltaj;
+                  bj += 2;
+                  aj = j * (a_s(ii) - j);
+                  j++;
+                }
+              if (! error_state)
+                  f(ii) = y;
+              outargs(0) = f;
+            }
         }
     }
   return octave_value (outargs);
 }
diff --git a/scripts/specfun/gammainc.m b/scripts/specfun/gammainc.m
--- a/scripts/specfun/gammainc.m
+++ b/scripts/specfun/gammainc.m
@@ -113,18 +113,19 @@ function y = gammainc (x, a, tail = "low
     error ("gammainc: x must be real");
   endif
 
   ## Initialize output array.
   if (isinteger (x))
     x = double (x);
   endif
 
-  if (strcmpi (class (a), "single"))
+  if (strcmpi (class (a), "single") || strcmpi (class (x), "single"))
     x = single (x);
+    a = single (a);
   endif
 
   y = zeros (size (x), class (x));
 
   ## Different x, a combinations are handled by different subfunctions.
   i_done = false (size (x)); # Track which elements have been calculated.
 
   ## Case 0: x == Inf, a == Inf
@@ -353,18 +354,17 @@ function y = gammainc_s (x, a, tail)
 endfunction
 
 ## x positive and large relative to a
 ## NRF77 (6.2.7)
 ## Gamma (a,x)/Gamma (a)
 ## Lentz's algorithm
 ## __gammainc_lentz__ in libinterp/corefcn/__gammainc_lentz__.cc
 function y = gammainc_l (x, a, tail)
-  % calling vectorizied version of c++ code
-  y = __gammainc_lentz__ (x, a);
+  y = __gammainc_lentz__ (x, a, strcmpi (class (x), "single"));
     if (strcmpi (tail, "upper"))
       y .*= D (x, a);
     elseif (strcmpi (tail,  "lower"))
       y = 1 - y .* D (x, a);
     elseif (strcmpi (tail, "scaledlower"))
       y = 1 ./ D (x, a) - y;
     endif
   endfunction
