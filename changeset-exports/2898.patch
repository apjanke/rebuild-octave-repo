# HG changeset patch
# User jwe
# Date 862260637 0
#      Mon Apr 28 20:50:37 1997 +0000
# Node ID 8303749672bea08be968aca78fb1cbfc977cc551
# Parent  64ff56723e751b339a0c2ac435ee8e350fc7ace6
[project @ 1997-04-28 20:50:36 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,25 @@
+Mon Apr 28 00:38:19 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* pt-misc.cc (Vsilent_functions, silent_functions):
+	Move here from oct-usr-fcn.cc.
+	(symbols_of_pt_misc): New function.  DEFVAR silent_functions.
+	(tree_statement_list::eval): Handle Vsilent_functions here instead
+	of in octave_user_function::eval.
+	(tree_statement::eval): New functions.
+	(tree_statement_list::eval): Use them.
+	Change print flag arg to silent flag.  Change all callers.
+	* variables.cc (install_builtin_variables): Call symbols_of_pt_misc.
+	* toplev.cc (parse_and_execute): Delete print arg.  Change all callers.
+	(eval_string): Change print flag arg to silent flag.  Change callers.
+
+	* dynamic-ld.h, dynamic-ld.cc: Rewrite to use singleton class.
+	* variables.cc (load_fcn_from_file): Use new dynamic linking class.
+
 Sun Apr 27 20:17:49 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* dynamic-ld.h (Octave_builtin_fcn): Delete typedef.
 	* dynamic-ld.cc: Simplify via the magic of function pointers.
 
 	* pt-fcn.h pt-fcn.cc pt-fvc.h pt-fvc.cc pt-fvc-base.h pt-fvc-base.cc:
 	Delete obsolete files.
 	* Makefile.in: Remove them from various lists.
diff --git a/src/oct-usr-fcn.cc b/src/oct-usr-fcn.cc
--- a/src/oct-usr-fcn.cc
+++ b/src/oct-usr-fcn.cc
@@ -49,20 +49,16 @@ Software Foundation, 59 Temple Place - S
 // If TRUE, variables returned from functions have default values even
 // if they are not explicitly initialized.
 static bool Vdefine_all_return_values;
 
 // If TRUE, the last computed value is returned from functions that
 // don't actually define any return variables.
 static bool Vreturn_last_computed_value;
 
-// If TRUE, turn off printing of results in functions (as if a
-// semicolon has been appended to each statement).
-static bool Vsilent_functions;
-
 // Nonzero means we're breaking out of a loop or function body.
 extern int breaking;
 
 // Nonzero means we're returning from a function.
 extern int returning;
 
 // User defined functions.
 
@@ -336,18 +332,17 @@ octave_user_function::eval (int nargout,
 
     bool echo_commands = (Vecho_executing_commands & ECHO_FUNCTIONS);
 
     if (echo_commands)
       print_code_function_header ();
 
     // Evaluate the commands that make up the function.
 
-    bool pf = ! Vsilent_functions;
-    octave_value last_computed_value = cmd_list->eval (pf);
+    octave_value last_computed_value = cmd_list->eval ();
 
     if (echo_commands)
       print_code_function_trailer ();
 
     if (returning)
       returning = 0;
 
     if (breaking)
@@ -531,42 +526,31 @@ static int
 return_last_computed_value (void)
 {
   Vreturn_last_computed_value
     = check_preference ("return_last_computed_value");
 
   return 0;
 }
 
-static int
-silent_functions (void)
-{
-  Vsilent_functions = check_preference ("silent_functions");
-
-  return 0;
-}
-
 void
 symbols_of_oct_usr_fcn (void)
 {
   DEFVAR (default_return_value, Matrix (), 0, 0,
     "the default for value for unitialized variables returned from\n\
 functions.  Only used if the variable initialize_return_values is\n\
 set to \"true\".");
 
   DEFVAR (define_all_return_values, 0.0, 0, define_all_return_values,
     "control whether values returned from functions should have a\n\
 value even if one has not been explicitly assigned.  See also\n\
 default_return_value");
 
   DEFVAR (return_last_computed_value, 0.0, 0, return_last_computed_value,
     "if a function does not return any values explicitly, return the\n\
   last computed value");
-
-  DEFVAR (silent_functions, 0.0, 0, silent_functions,
-    "suppress printing results in called functions");
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/pt-misc.cc b/src/pt-misc.cc
--- a/src/pt-misc.cc
+++ b/src/pt-misc.cc
@@ -32,43 +32,49 @@ Software Foundation, 59 Temple Place - S
 
 #ifdef HAVE_UNISTD_H
 #ifdef HAVE_SYS_TYPES_H
 #include <sys/types.h>
 #endif
 #include <unistd.h>
 #endif
 
+#include "defun.h"
 #include "error.h"
 #include "input.h"
 #include "oct-obj.h"
 #include "oct-usr-fcn.h"
 #include "ov.h"
 #include "pager.h"
 #include "pt-cmd.h"
 #include "pt-const.h"
 #include "pt-exp.h"
 #include "pt-id.h"
 #include "pt-indir.h"
 #include "pt-misc.h"
 #include "pt-mvr.h"
 #include "pt-pr-code.h"
 #include "pt-walk.h"
 #include "toplev.h"
+#include "utils.h"
 #include "variables.h"
 
 // Nonzero means we're breaking out of a loop or function body.
 extern int breaking;
 
 // Nonzero means we're jumping to the end of a loop.
 extern int continuing;
 
 // Nonzero means we're returning from a function.
 extern int returning;
 
+// If TRUE, turn off printing of results in functions (as if a
+// semicolon has been appended to each statement).
+static bool Vsilent_functions;
+
 // A list of commands to be executed.
 
 tree_statement::~tree_statement (void)
 {
   delete cmd;
   delete expr;
 }
 
@@ -91,126 +97,131 @@ tree_statement::maybe_echo_code (bool in
       && (Vecho_executing_commands & ECHO_FUNCTIONS))
     {
       tree_print_code tpc (octave_stdout, Vps4);
 
       accept (tpc);
     }
 }
 
+octave_value
+tree_statement::eval (bool silent, bool in_function_body)
+{
+  octave_value retval;
+
+  bool pf = silent ? false : print_flag;
+
+  if (cmd || expr)
+    {
+      maybe_echo_code (in_function_body);
+
+      if (cmd)
+	cmd->eval ();
+      else
+	retval = expr->eval (pf);
+    }
+
+  return retval;
+}
+
+octave_value_list
+tree_statement::eval (bool silent, int nargout, bool in_function_body)
+{
+  bool pf = silent ? false : print_flag;
+
+  octave_value_list retval;
+
+  if (cmd || expr)
+    {
+      maybe_echo_code (in_function_body);
+
+      if (cmd)
+	cmd->eval ();
+      else
+	{
+	  if (expr->is_multi_val_ret_expression ())
+	    {
+	      octave_value_list args;
+
+	      tree_multi_val_ret *t = static_cast<tree_multi_val_ret *> (expr);
+
+	      retval = t->eval (pf, nargout, args);
+	    }
+	  else
+	    retval = expr->eval (pf);
+	}
+    }
+
+  return retval;
+}
+
 void
 tree_statement::accept (tree_walker& tw)
 {
   tw.visit_statement (*this);
 }
 
 octave_value
-tree_statement_list::eval (bool print)
+tree_statement_list::eval (bool silent)
 {
-  bool pf;
   octave_value retval;
 
   if (error_state)
     return retval;
 
   for (Pix p = first (); p != 0; next (p))
     {
       tree_statement *elt = this->operator () (p);
 
-      if (! print)
-	pf = false;
-      else
-	pf = elt->print_flag;
+      bool silent_flag =
+	silent ? true : (function_body ? Vsilent_functions : false);
+
+      retval = elt->eval (silent_flag, function_body);
 
-      tree_command *cmd = elt->command ();
-      tree_expression *expr = elt->expression ();
+      if (error_state)
+	break;
+
+      if (breaking || continuing)
+	break;
+
+      if (returning)
+	break;
+    }
 
-      if (cmd || expr)
-	{
-	  elt->maybe_echo_code (function_body);
+  return retval;
+}
+
+octave_value_list
+tree_statement_list::eval (bool no_print, int nargout)
+{
+  octave_value_list retval;
 
-	  if (cmd)
-	    cmd->eval ();
-	  else
-	    retval = expr->eval (pf);
+  if (error_state)
+    return retval;
+
+  if (nargout > 1)
+    {
+      for (Pix p = first (); p != 0; next (p))
+	{
+	  tree_statement *elt = this->operator () (p);
+
+	  retval = elt->eval (no_print, nargout, function_body);
 
 	  if (error_state)
-	    return octave_value ();
+	    break;
 
 	  if (breaking || continuing)
 	    break;
 
 	  if (returning)
 	    break;
 	}
-      else
-	retval = octave_value ();
-    }
-  return retval;
-}
-
-octave_value_list
-tree_statement_list::eval (bool print, int nargout)
-{
-  octave_value_list retval;
-
-  if (nargout > 1)
-    {
-      bool pf;
-
-      if (error_state)
-	return retval;
-
-      for (Pix p = first (); p != 0; next (p))
-	{
-	  tree_statement *elt = this->operator () (p);
-
-	  if (! print)
-	    pf = false;
-	  else
-	    pf = elt->print_flag;
-
-	  tree_command *cmd = elt->command ();
-	  tree_expression *expr = elt->expression ();
-
-	  if (cmd || expr)
-	    {
-	      elt->maybe_echo_code (function_body);
-
-	      if (cmd)
-		cmd->eval ();
-	      else
-		{
-		  if (expr->is_multi_val_ret_expression ())
-		    {
-		      octave_value_list args;
-		      tree_multi_val_ret *t;
-		      t = static_cast<tree_multi_val_ret *> (expr);
-		      retval = t->eval (pf, nargout, args);
-		    }
-		  else
-		    retval = expr->eval (pf);
-		}
-
-	      if (error_state)
-		return octave_value ();
-
-	      if (breaking || continuing)
-		break;
-
-	      if (returning)
-		break;
-	    }
-	  else
-	    retval = octave_value_list ();
-	}
-      return retval;
     }
   else
-    retval = eval (print);
+    retval = eval (no_print);
 
   return retval;
 }
 
 void
 tree_statement_list::accept (tree_walker& tw)
 {
   tw.visit_statement_list (*this);
@@ -481,17 +492,17 @@ tree_if_clause::~tree_if_clause (void)
 }
 
 int
 tree_if_clause::eval (void)
 {
   if (is_else_clause () || expr->is_logically_true ("if"))
     {
       if (list)
-	list->eval (true);
+	list->eval ();
 
       return 1;
     }
 
   return 0;
 }
 
 void
@@ -564,17 +575,17 @@ tree_switch_case::label_matches (const o
 int
 tree_switch_case::eval (const octave_value& val)
 {
   int retval = 0;
 
   if (is_default_case () || label_matches (val))
     {
       if (list)
-	list->eval (true);
+	list->eval ();
 
       retval = 1;
     }
 
   return retval;
 }
 
 void
@@ -604,13 +615,28 @@ tree_switch_case_list::eval (const octav
 }
 
 void
 tree_switch_case_list::accept (tree_walker& tw)
 {
   tw.visit_switch_case_list (*this);
 }
 
+static int
+silent_functions (void)
+{
+  Vsilent_functions = check_preference ("silent_functions");
+
+  return 0;
+}
+
+void
+symbols_of_pt_misc (void)
+{
+  DEFVAR (silent_functions, 0.0, 0, silent_functions,
+    "suppress printing results in called functions");
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/pt-misc.h b/src/pt-misc.h
--- a/src/pt-misc.h
+++ b/src/pt-misc.h
@@ -57,18 +57,16 @@ class tree_walker;
 #include <SLList.h>
 
 // A statement is either a command to execute or an expression to
 // evaluate.
 
 class
 tree_statement
 {
-friend class tree_statement_list;
-
 public:
 
   tree_statement (void)
     : cmd (0), expr (0), print_flag (true) { }
 
   tree_statement (tree_command *c)
     : cmd (c), expr (0), print_flag (true) { }
 
@@ -84,22 +82,26 @@ public:
     { return cmd != 0; }
 
   bool is_expression (void)
     { return expr != 0; }
 
   int line (void);
   int column (void);
 
-  void maybe_echo_code (bool);
+  void maybe_echo_code (bool in_function_body);
 
   bool print_result (void) { return print_flag; }
 
   tree_command *command (void) { return cmd; }
 
+  octave_value eval (bool silent, bool in_function_body);
+
+  octave_value_list eval (bool silent, int nargout, bool in_function_body);
+
   tree_expression *expression (void) { return expr; }
 
   void accept (tree_walker& tw);
 
 private:
 
   // Only one of cmd or expr can be valid at once.
 
@@ -132,19 +134,19 @@ public:
 	{
 	  tree_statement *t = remove_front ();
 	  delete t;
 	}
     }
 
   void mark_as_function_body (void) { function_body = true; }
 
-  octave_value eval (bool print = false);
+  octave_value eval (bool silent = false);
 
-  octave_value_list eval (bool print, int nargout);
+  octave_value_list eval (bool silent, int nargout);
 
   void accept (tree_walker& tw);
 
 private:
 
   // Does this list of statements make up the body of a function?
   bool function_body;
 };
@@ -429,15 +431,17 @@ public:
 	}
     }
 
   void eval (const octave_value& val);
 
   void accept (tree_walker& tw);
 };
 
+extern void symbols_of_pt_misc (void);
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -136,17 +136,17 @@ int input_from_startup_file = 0;
 // Nonzero means that input is coming from a file that was named on
 // the command line.
 int input_from_command_line_file = 1;
 
 // Top level context (?)
 jmp_buf toplevel;
 
 void
-parse_and_execute (FILE *f, bool print)
+parse_and_execute (FILE *f)
 {
   begin_unwind_frame ("parse_and_execute");
   
   YY_BUFFER_STATE old_buf = current_buffer ();
   YY_BUFFER_STATE new_buf = create_buffer (f);
 
   add_unwind_protect (restore_input_buffer, old_buf);
   add_unwind_protect (delete_input_buffer, new_buf);
@@ -165,17 +165,17 @@ parse_and_execute (FILE *f, bool print)
   do
     {
       reset_parser ();
 
       retval = yyparse ();
 
       if (retval == 0 && global_command)
 	{
-	  global_command->eval (print);
+	  global_command->eval ();
 
 	  delete global_command;
 
 	  global_command = 0;
 
 	  bool quit = (returning || breaking);
 
 	  if (returning)
@@ -204,18 +204,17 @@ parse_and_execute (FILE *f, bool print)
 static void
 safe_fclose (void *f)
 {
   if (f)
     fclose (static_cast<FILE *> (f));
 }
 
 void
-parse_and_execute (const string& s, bool print, bool verbose,
-		   const char *warn_for)
+parse_and_execute (const string& s, bool verbose, const char *warn_for)
 {
   begin_unwind_frame ("parse_and_execute_2");
 
   unwind_protect_int (reading_script_file);
   unwind_protect_str (curr_fcn_file_full_name);
 
   reading_script_file = 1;
   curr_fcn_file_full_name = s;
@@ -234,17 +233,17 @@ parse_and_execute (const string& s, bool
 
       if (verbose)
 	{
 	  cout << "reading commands from " << s << " ... ";
 	  reading_startup_message_printed = 1;
 	  cout.flush ();
 	}
 
-      parse_and_execute (f, print);
+      parse_and_execute (f);
 
       if (verbose)
 	cout << "done." << endl;
     }
   else if (warn_for)
     error ("%s: unable to open file `%s'", warn_for, s.c_str ());
 
   run_unwind_frame ("parse_and_execute_2");
@@ -278,17 +277,17 @@ main_loop (void)
       curr_sym_tab = top_level_sym_tab;
 
       reset_parser ();
 
       retval = yyparse ();
 
       if (retval == 0 && global_command)
 	{
-	  global_command->eval (true);
+	  global_command->eval ();
 
 	  delete global_command;
 
 	  global_command = 0;
 
 	  if (! (interactive || forced_interactive))
 	    {
 	      bool quit = (returning || breaking);
@@ -335,17 +334,17 @@ script file but without requiring the fi
   if (nargin == 1)
     {
       string file = args(0).string_value ();
 
       if (! error_state)
 	{
 	  file = oct_tilde_expand (file);
 
-	  parse_and_execute (file, 1, 0, "source");
+	  parse_and_execute (file, false, "source");
 
 	  if (error_state)
 	    error ("source: error sourcing file `%s'", file.c_str ());
 	}
       else
 	error ("source: expecting file name as argument");
     }
   else
@@ -525,17 +524,17 @@ evaluate NAME as a function, passing ARG
     retval = feval (args, nargout);
   else
     print_usage ("feval");
 
   return retval;
 }
 
 static octave_value_list
-eval_string (const string& s, bool print, int& parse_status, int nargout)
+eval_string (const string& s, bool silent, int& parse_status, int nargout)
 {
   begin_unwind_frame ("eval_string");
 
   unwind_protect_int (get_input_from_eval_string);
   unwind_protect_int (input_from_command_line_file);
   unwind_protect_ptr (global_command);
   unwind_protect_str (current_eval_string);
 
@@ -564,48 +563,48 @@ eval_string (const string& s, bool print
   tree_statement_list *command = global_command;
 
   run_unwind_frame ("eval_string");
 
   octave_value_list retval;
 
   if (parse_status == 0 && command)
     {
-      retval = command->eval (print, nargout);
+      retval = command->eval (silent, nargout);
       delete command;
     }
 
   return retval;
 }
 
 octave_value
-eval_string (const string& s, bool print, int& parse_status)
+eval_string (const string& s, bool silent, int& parse_status)
 {
   octave_value retval;
 
-  octave_value_list tmp = eval_string (s, print, parse_status, 1);
+  octave_value_list tmp = eval_string (s, silent, parse_status, 1);
 
   retval = tmp(0);
 
   return retval;
 }
 
 static octave_value_list
-eval_string (const octave_value& arg, bool print, int& parse_status,
+eval_string (const octave_value& arg, bool silent, int& parse_status,
 	     int nargout)
 {
   string s = arg.string_value ();
 
   if (error_state)
     {
       error ("eval: expecting string argument");
       return -1.0;
     }
 
-  return eval_string (s, print, parse_status, nargout);
+  return eval_string (s, silent, parse_status, nargout);
 }
 
 DEFUN (eval, args, nargout,
   "eval (TRY, CATCH)\n\
 \n\
 Evaluate the string TRY as octave code.  If that fails, evaluate the\n\
 string CATCH.")
 {
@@ -620,17 +619,17 @@ string CATCH.")
       if (nargin > 1)
 	{
 	  unwind_protect_int (buffer_error_messages);
 	  buffer_error_messages = 1;
 	}
 
       int parse_status = 0;
 
-      retval = eval_string (args(0), Vdefault_eval_print_flag,
+      retval = eval_string (args(0), ! Vdefault_eval_print_flag,
 			    parse_status, nargout);
 
       if (nargin > 1 && (parse_status != 0 || error_state))
 	{
 	  error_state = 0;
 
 	  // Set up for letting the user print any messages from
 	  // errors that occurred in the first part of this eval().
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -75,16 +75,17 @@ Software Foundation, 59 Temple Place - S
 #include "oct-mapper.h"
 #include "oct-usr-fcn.h"
 #include "pt-const.h"
 #include "oct-obj.h"
 #include "pt-exp.h"
 #include "pt-id.h"
 #include "pt-indir.h"
 #include "pt-mat.h"
+#include "pt-misc.h"
 #include "pt-plot.h"
 #include "pr-output.h"
 #include "syscalls.h"
 #include "toplev.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
 #include <version.h>
@@ -295,17 +296,17 @@ extract_function (const octave_value& ar
       string cmd = header;
       cmd.append (s);
       cmd.append (trailer);
 
       if (! error_state)
 	{
 	  int parse_status;
 
-	  eval_string (cmd, 0, parse_status);
+	  eval_string (cmd, true, parse_status);
 
 	  if (parse_status == 0)
 	    {
 	      retval = is_valid_function (fname, warn_for, 0);
       
 	      if (! retval)
 		{
 		  error ("%s: `%s' is not valid as a function",
@@ -744,17 +745,17 @@ parse_fcn_file (bool exec_script, const 
 	  add_unwind_protect (restore_command_history, 0);
 
 	  unwind_protect_int (Vsaving_history);
 	  unwind_protect_int (reading_script_file);
 
 	  Vsaving_history = 0;
 	  reading_script_file = 1;
 
-	  parse_and_execute (ffile, 1);
+	  parse_and_execute (ffile);
 
 	  script_file_executed = 1;
 	}
     }
 
   run_unwind_frame ("parse_fcn_file");
 
   return script_file_executed;
@@ -1711,16 +1712,17 @@ install_builtin_variables (void)
   symbols_of_input ();
   symbols_of_lex ();
   symbols_of_load_save ();
   symbols_of_oct_usr_fcn ();
   symbols_of_pager ();
   symbols_of_parse ();
   symbols_of_pr_output ();
   symbols_of_pt_mat ();
+  symbols_of_pt_misc ();
   symbols_of_pt_plot ();
   symbols_of_syscalls ();
   symbols_of_toplev ();
   symbols_of_value ();
   symbols_of_variables ();
 }
 
 // Deleting names from the symbol tables.
