# HG changeset patch
# User Max Brister <max@2bass.com>
# Date 1340839181 18000
#      Wed Jun 27 18:19:41 2012 -0500
# Node ID 2d7c0c86e71290167c912a03bb2961fa4a6b5bf0
# Parent  95bfd032f4c7af0ff7c55a9e2d26b8e7a29c360d
In jit support A(idx) = v; where A is matrix, idx is a range, and v is a scalar

* src/pt-jit.cc (octave_jit_paren_subsasgn_impl): Use jit_range::update.
  (octave_jit_paren_subsasgn_matrix_range, jit_range::all_elements_are_ints):
    New function.
  (jit_typeinfo::jit_typeinfo): Add support for matrix range paren subsasgn.

* src/pt-jit.h (jit_range::all_elements_are_ints): New Declaration.
  (jit_range::jit_range): Use jit_range::update.
  (jit_range::update): New function.

diff --git a/src/pt-jit.cc b/src/pt-jit.cc
--- a/src/pt-jit.cc
+++ b/src/pt-jit.cc
@@ -244,20 +244,49 @@ octave_jit_paren_subsasgn_impl (jit_matr
 {
   NDArray *array = mat->array;
   if (array->nelem () < index)
     array->resize1 (index);
 
   double *data = array->fortran_vec ();
   data[index - 1] = value;
 
-  mat->ref_count = array->jit_ref_count ();
-  mat->slice_data = array->jit_slice_data () - 1;
-  mat->dimensions = array->jit_dimensions ();
-  mat->slice_len = array->nelem ();
+  mat->update ();
+}
+
+extern "C" void
+octave_jit_paren_subsasgn_matrix_range (jit_matrix *result, jit_matrix *mat,
+                                        jit_range *index, double value)
+{
+  NDArray *array = mat->array;
+  bool done = false;
+
+  // optimize for the simple case (no resizing and no errors)
+  if (*array->jit_ref_count () == 1
+      && index->all_elements_are_ints ())
+    {
+      octave_idx_type base = static_cast<octave_idx_type> (index->base);
+      octave_idx_type nelem = index->nelem;
+      if (base > 0 && base + nelem <= array->nelem ())
+        {
+          done = true;
+          double *data = array->jit_slice_data ();
+          std::fill (data + base - 1, data + base + nelem - 1, value);
+        }
+    }
+
+  if (! done)
+    {
+      idx_vector idx (*index);
+      NDArray avalue (dim_vector (1, 1));
+      avalue.xelem (0) = value;
+      array->assign (idx, avalue);
+    }
+
+  result->update (array);
 }
 
 extern "C" void
 octave_jit_print_matrix (jit_matrix *m)
 {
   std::cout << *m << std::endl;
 }
 
@@ -306,16 +335,23 @@ octave_jit_call (octave_builtin::fcn fn,
   if (! (ovl.length () == 0
          || (ovl.length () == 1 && ovl.xelem (0).is_undefined ())))
     gripe_bad_result ();
 
   return 0;
 }
 
 // -------------------- jit_range --------------------
+bool
+jit_range::all_elements_are_ints () const
+{
+  Range r (*this);
+  return r.all_elements_are_ints ();
+}
+
 std::ostream&
 operator<< (std::ostream& os, const jit_range& rng)
 {
   return os << "Range[" << rng.base << ", " << rng.limit << ", " << rng.inc
             << ", " << rng.nelem << "]";
 }
 
 // -------------------- jit_matrix --------------------
@@ -907,17 +943,22 @@ jit_typeinfo::jit_typeinfo (llvm::Module
     merge->addIncoming (mat, conv_error);
     merge->addIncoming (resize_result, bounds_error);
     merge->addIncoming (mat, success);
     builder.CreateRet (merge);
   }
   llvm::verifyFunction (*fn);
   paren_subsasgn_fn.add_overload (fn, true, matrix, matrix, scalar, scalar);
 
-  // paren_subsasgn
+  fn = create_function ("octave_jit_paren_subsasgn_matrix_range", void_t,
+                        matrix_t->getPointerTo (), matrix_t->getPointerTo (),
+                        range_t->getPointerTo (), scalar_t);
+  engine->addGlobalMapping (fn,
+                            reinterpret_cast<void *> (&octave_jit_paren_subsasgn_matrix_range));
+  paren_subsasgn_fn.add_overload (fn, true, matrix, matrix, range, scalar);
 
   casts[any->type_id ()].stash_name ("(any)");
   casts[scalar->type_id ()].stash_name ("(scalar)");
 
   // cast any <- matrix
   fn = create_function ("octave_jit_cast_any_matrix", any_t,
                         matrix_t->getPointerTo ());
   engine->addGlobalMapping (fn,
diff --git a/src/pt-jit.h b/src/pt-jit.h
--- a/src/pt-jit.h
+++ b/src/pt-jit.h
@@ -203,36 +203,49 @@ jit_range
                                   inc (from.inc ()), nelem (from.nelem ())
   {}
 
   operator Range () const
   {
     return Range (base, limit, inc);
   }
 
+  bool all_elements_are_ints () const;
+
   double base;
   double limit;
   double inc;
   octave_idx_type nelem;
 };
 
 std::ostream& operator<< (std::ostream& os, const jit_range& rng);
 
 // jit_array is compatable with the llvm array/matrix structures
 template <typename T, typename U>
 struct
 jit_array
 {
-  jit_array (T& from) : ref_count (from.jit_ref_count ()),
-                        slice_data (from.jit_slice_data () - 1),
-                        slice_len (from.capacity ()),
-                        dimensions (from.jit_dimensions ()),
-                        array (new T (from))
+  jit_array (T& from) : array (new T (from))
   {
     grab_dimensions ();
+    update ();
+  }
+
+  void update (void)
+  {
+    ref_count = array->jit_ref_count ();
+    slice_data = array->jit_slice_data () - 1;
+    slice_len = array->capacity ();
+    dimensions = array->jit_dimensions ();
+  }
+
+  void update (T *aarray)
+  {
+    array = aarray;
+    update ();
   }
 
   void grab_dimensions (void)
   {
     ++(dimensions[-2]);
   }
 
   operator T () const
