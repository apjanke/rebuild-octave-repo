# HG changeset patch
# User Rik <rik@octave.org>
# Date 1525407238 25200
#      Thu May 03 21:13:58 2018 -0700
# Node ID cea0b7e47a0e7de07f294052ee970c5b63aad7ac
# Parent  af3319d86a5f7fcceee40cd8a4dd1877076f07d2
# Parent  a8a4b6e6e754479c838cb3c294f23d5b8fe96b59
maint: merge stable to default.

diff --git a/liboctave/numeric/svd.cc b/liboctave/numeric/svd.cc
--- a/liboctave/numeric/svd.cc
+++ b/liboctave/numeric/svd.cc
@@ -217,22 +217,23 @@ namespace octave
     svd<ComplexMatrix>::gesdd (char& jobz, F77_INT m, F77_INT n,
                                Complex *tmp_data, F77_INT m1, double *s_vec,
                                Complex *u, Complex *vt, F77_INT nrow_vt1,
                                std::vector<Complex>& work, F77_INT& lwork,
                                F77_INT *iwork, F77_INT& info)
     {
 
       F77_INT min_mn = std::min (m, n);
+      F77_INT max_mn = std::max (m, n);
 
       F77_INT lrwork;
       if (jobz == 'N')
         lrwork = 7*min_mn;
       else
-        lrwork = 5*min_mn*min_mn + 5*min_mn;
+        lrwork = min_mn * std::max (5*min_mn+5, 2*max_mn+2*min_mn+1);
 
       std::vector<double> rwork (lrwork);
 
       GESDD_COMPLEX_STEP (zgesdd, ZGESDD, F77_DBLE_CMPLX_ARG);
 
       lwork = static_cast<F77_INT> (work[0].real ());
       work.reserve (lwork);
 
@@ -250,19 +251,19 @@ namespace octave
                                     F77_INT& lwork, F77_INT *iwork,
                                     F77_INT& info)
     {
       F77_INT min_mn = std::min (m, n);
       F77_INT max_mn = std::max (m, n);
 
       F77_INT lrwork;
       if (jobz == 'N')
-        lrwork = 5*min_mn;
+        lrwork = 7*min_mn;
       else
-        lrwork = min_mn * std::max (5*min_mn+7, 2*max_mn+2*min_mn+1);
+        lrwork = min_mn * std::max (5*min_mn+5, 2*max_mn+2*min_mn+1);
       std::vector<float> rwork (lrwork);
 
       GESDD_COMPLEX_STEP (cgesdd, CGESDD, F77_CMPLX_ARG);
 
       lwork = static_cast<F77_INT> (work[0].real ());
       work.reserve (lwork);
 
       GESDD_COMPLEX_STEP (cgesdd, CGESDD, F77_CMPLX_ARG);
diff --git a/scripts/image/lines.m b/scripts/image/lines.m
--- a/scripts/image/lines.m
+++ b/scripts/image/lines.m
@@ -25,35 +25,41 @@
 ##
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 function map = lines (n)
 
+  hf = get (groot, "currentfigure");
   if (nargin > 1)
     print_usage ();
   elseif (nargin == 1)
     if (! isscalar (n))
       error ("lines: N must be a scalar");
     endif
     n = double (n);
   else
-    hf = get (0, "currentfigure");
     if (! isempty (hf))
       n = rows (get (hf, "colormap"));
     else
       n = 64;
     endif
   endif
+
   if (n == 1)
     map = [0, 0, 1];
   elseif (n > 1)
-    C = get (gca, "colororder");
+    hax = get (hf, "currentaxes");
+    if (! isempty (hax))
+      C = get (hax, "colororder");
+    else
+      C = get (groot, "defaultaxescolororder");
+    endif
     nr = rows (C);
     map = C(rem (0:(n-1), nr) + 1, :);
   else
     map = zeros (0, 3);
   endif
 
 endfunction
 
