# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1209939307 14400
#      Sun May 04 18:15:07 2008 -0400
# Node ID e76a4a6e3c47589ce5831e30aa58ae0fa80dc826
# Parent  40c428ea34089bf9acc357df3cdf3371eaafac0e
initialize args_evaluated; delete useless statement

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,17 @@
 2008-05-04  John W. Eaton  <jwe@octave.org>
 
+	* symtab.h (symbol_table::fcn_info::fcn_info_rep::find_function):
+	Initialize args_evaluated.
+	* pt-id.cc (tree_identifier::rvalue): Likewise.
+	* variables.cc (symbol_exist): Likewise.
+
+	* pt-id.h (tree_identifier::tree_identifer): Delete useless statement.
+
 	* variables.cc (get_global_value): Use symbol_table::global_varval
 	instead of passing scope to symbol_table::varval.
 	(set_global_value): Use symbol_table::global_varref
 	instead of passing scope to symbol_table::varref.
 	(do_who): Use symbol_table::glob_global_variables
 	instead of passing scope to symbol_table::glob_variables.
 	(do_clear_globals):
 	Use symbol_table::global_variable_names and
diff --git a/src/pt-id.cc b/src/pt-id.cc
--- a/src/pt-id.cc
+++ b/src/pt-id.cc
@@ -58,17 +58,17 @@ tree_identifier::rvalue (int nargout)
   octave_value_list retval;
 
   MAYBE_DO_BREAKPOINT;
 
   if (error_state)
     return retval;
 
   octave_value_list evaluated_args;
-  bool args_evaluated;
+  bool args_evaluated = false;
 
   octave_value val = xsym().find (0, string_vector (), evaluated_args,
 				  args_evaluated);
 
   if (val.is_defined ())
     {
       // GAGME -- this would be cleaner if we required
       // parens to indicate function calls.
diff --git a/src/pt-id.h b/src/pt-id.h
--- a/src/pt-id.h
+++ b/src/pt-id.h
@@ -47,20 +47,17 @@ tree_identifier : public tree_expression
 public:
 
   tree_identifier (int l = -1, int c = -1)
     : tree_expression (l, c), sym (), scope (-1) { }
 
   tree_identifier (const symbol_table::symbol_record& s,
 		   int l = -1, int c = -1,
 		   symbol_table::scope_id sc = symbol_table::current_scope ())
-    : tree_expression (l, c), sym (s), scope (sc)
-  {
-    symbol_table::scope_id curr_scope = symbol_table::current_scope ();
-  }
+    : tree_expression (l, c), sym (s), scope (sc) { }
 
   ~tree_identifier (void) { }
 
   bool has_magic_end (void) const { return (name () == "__end__"); }
 
   bool is_identifier (void) const { return true; }
 
   // The name doesn't change with scope, so use sym instead of
diff --git a/src/symtab.h b/src/symtab.h
--- a/src/symtab.h
+++ b/src/symtab.h
@@ -396,17 +396,17 @@ public:
 
 	return find_function (args);
       }
 
       octave_value find_function (const octave_value_list& args)
       {
 	string_vector arg_names;
 	octave_value_list evaluated_args = args;
-	bool args_evaluated;
+	bool args_evaluated = false;
 
 	return find (0, arg_names, evaluated_args, args_evaluated);
       }
 
       void install_cmdline_function (const octave_value& f)
       {
 	cmdline_function = f;
       }
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -665,17 +665,17 @@ symbol_exist (const std::string& name, c
       symbol_name = name.substr (0, pos);
     }
 
   // We shouldn't need to look in the global symbol table, since any
   // name that is visible in the current scope will be in the local
   // symbol table.
 
   octave_value_list evaluated_args;
-  bool args_evaluated;
+  bool args_evaluated = false;
 
   octave_value val = symbol_table::find (symbol_name, 0, string_vector (),
 					 evaluated_args, args_evaluated);
 
   if (val.is_defined ())
     {
       bool not_a_struct = struct_elts.empty ();
       bool var_ok = not_a_struct /* || val.is_map_element (struct_elts) */;
