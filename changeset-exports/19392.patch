# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1418051754 18000
#      Mon Dec 08 10:15:54 2014 -0500
# Branch gui-release
# Node ID 1572b5276b9a64b0af9b8250703d76678873720e
# Parent  c1ce43276b8616108a8eefe0eec599fc6cc8de54
# Parent  616f2b22787b35ccf39699763285e4383f14d4db
maint: Periodic merge of stable to gui-release.

diff --git a/libinterp/corefcn/load-save.cc b/libinterp/corefcn/load-save.cc
--- a/libinterp/corefcn/load-save.cc
+++ b/libinterp/corefcn/load-save.cc
@@ -890,16 +890,21 @@ Force Octave to assume the file is in Oc
 
                   file.close ();
                 }
               else
                 error ("load: unable to open input file '%s'",
                        orig_fname.c_str ());
             }
         }
+      else
+        {
+          error ("load: unable to determine file format of '%s'",
+                 orig_fname.c_str ());
+        }
     }
 
   return retval;
 }
 
 // Return TRUE if PATTERN has any special globbing chars in it.
 
 static bool
diff --git a/scripts/general/interp1.m b/scripts/general/interp1.m
--- a/scripts/general/interp1.m
+++ b/scripts/general/interp1.m
@@ -324,25 +324,27 @@ function yi = interp1 (x, y, varargin)
   endswitch
 
   if (! ispp && ! ischar (extrap))
     ## determine which values are out of range and set them to extrap,
     ## unless extrap == "extrap".
     minx = min (x(1), x(nx));
     maxx = max (x(1), x(nx));
 
+    xi = reshape (xi, szx);
     outliers = xi < minx | ! (xi <= maxx); # this even catches NaNs
     if (size_equal (outliers, yi))
       yi(outliers) = extrap;
       yi = reshape (yi, szx);
     elseif (! isvector (yi))
       yi(outliers, :) = extrap;
     else
       yi(outliers.') = extrap;
     endif
+
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
 %! xf = 0:0.05:10;  yf = sin (2*pi*xf/5);
@@ -607,16 +609,18 @@ endfunction
 %!        interp1 (xp,yp,xi,style,"extrap"),10*eps)
 %!error interp1 (1,1,1, style)
 ## ENDBLOCK
 ## ENDBLOCKTEST
 
 ## test extrapolation (linear)
 %!assert (interp1 ([1:5],[3:2:11],[0,6],"linear","extrap"), [1, 13], eps)
 %!assert (interp1 (xp, yp, [-1, max(xp)+1],"linear",5), [5, 5])
+%!assert (interp1 ([0,1],[1,0],[0.1,0.9;0.2,1.1]), [0.9 0.1; 0.8 NA], eps)
+%!assert (interp1 ([0,1],[1,0],[0.1,0.9;0.2,1]), [0.9 0.1; 0.8 0], eps)
 
 ## Basic sanity checks
 %!assert (interp1 (1:2,1:2,1.4,"nearest"), 1)
 %!assert (interp1 (1:2,1:2,1.4,"linear"), 1.4)
 %!assert (interp1 (1:4,1:4,1.4,"cubic"), 1.4)
 %!assert (interp1 (1:2,1:2,1.1,"spline"), 1.1)
 %!assert (interp1 (1:3,1:3,1.4,"spline"), 1.4)
 
diff --git a/scripts/time/datevec.m b/scripts/time/datevec.m
--- a/scripts/time/datevec.m
+++ b/scripts/time/datevec.m
@@ -144,17 +144,17 @@ function [y, m, d, h, mi, s] = datevec (
       endfor
     endif
 
   else   # datenum input
 
     date = date(:);
 
     ## Move day 0 from midnight -0001-12-31 to midnight 0000-3-1
-    z = floor (date) - 60;
+    z = double (floor (date) - 60);
     ## Calculate number of centuries; K1 = 0.25 is to avoid rounding problems.
     a = floor ((z - 0.25) / 36524.25);
     ## Days within century; K2 = 0.25 is to avoid rounding problems.
     b = z - 0.25 + a - floor (a / 4);
     ## Calculate the year (year starts on March 1).
     y = floor (b / 365.25);
     ## Calculate day in year.
     c = fix (b - floor (365.25 * y)) + 1;
@@ -309,9 +309,11 @@ endfunction
 %% Test millisecond format FFF
 %!assert (datevec ("15:38:21.25", "HH:MM:SS.FFF"), [yr,1,1,15,38,21.025])
 
 # Other tests
 %!assert (datenum (datevec ([-1e4:1e4])), [-1e4:1e4]');
 %!test
 %! t = linspace (-2e5, 2e5, 10993);
 %! assert (all (abs (datenum (datevec (t)) - t') < 1e-5));
+%!assert (double (datevec (int64 (datenum ([2014 6 1])))), datevec (datenum ([2014 6 1])))
+%!assert (double (datevec (int64 (datenum ([2014 6 18])))), datevec (datenum ([2014 6 18])))
 
