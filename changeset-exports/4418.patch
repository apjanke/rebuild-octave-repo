# HG changeset patch
# User jwe
# Date 1053890037 0
#      Sun May 25 19:13:57 2003 +0000
# Node ID c57f599bf7ea34df8b3d6ed193c745bb4eb62e42
# Parent  5cca7b5d6b342a4bb919598184e039d77a523a7a
[project @ 2003-05-25 19:13:57 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2003-05-25  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* ov-cx-mat.cc (octave_complex_matrix::assign): Move definition here.
+	* ov-cx-mat.h: From here.
+
 2003-05-24  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* ov-range.cc (octave_range::try_narrowing_conversion): Convert to
 	[](1x0) instead of [](0x0) if range is empty.
 
 2003-05-14  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Makefile.in: Handle DESTDIR.
diff --git a/src/ov-cx-mat.cc b/src/ov-cx-mat.cc
--- a/src/ov-cx-mat.cc
+++ b/src/ov-cx-mat.cc
@@ -73,16 +73,23 @@ octave_complex_matrix::try_narrowing_con
   else if (matrix.all_elements_are_real ())
     retval = new octave_matrix (::real (matrix));
 
   return retval;
 }
 
 void
 octave_complex_matrix::assign (const octave_value_list& idx,
+			       const ComplexMatrix& rhs)
+{
+  octave_base_matrix<ComplexMatrix>::assign (idx, rhs);
+}
+
+void
+octave_complex_matrix::assign (const octave_value_list& idx,
 			       const Matrix& rhs)
 {
   int len = idx.length ();
 
   switch (len)
     {
     case 2:
       {
diff --git a/src/ov-cx-mat.h b/src/ov-cx-mat.h
--- a/src/ov-cx-mat.h
+++ b/src/ov-cx-mat.h
@@ -73,18 +73,17 @@ public:
 
   ~octave_complex_matrix (void) { }
 
   octave_value *clone (void) const { return new octave_complex_matrix (*this); }
   octave_value *empty_clone (void) const { return new octave_complex_matrix (); }
 
   octave_value *try_narrowing_conversion (void);
 
-  void assign (const octave_value_list& idx, const ComplexMatrix& rhs)
-    { octave_base_matrix<ComplexMatrix>::assign (idx, rhs); }
+  void assign (const octave_value_list& idx, const ComplexMatrix& rhs);
 
   void assign (const octave_value_list& idx, const Matrix& rhs);
 
   bool is_complex_matrix (void) const { return true; }
 
   bool is_complex_type (void) const { return true; }
 
   bool valid_as_scalar_index (void) const;
