# HG changeset patch
# User jwe
# Date 784261338 0
#      Tue Nov 08 02:22:18 1994 +0000
# Node ID a962376eac748e91df5eb50f7f6817a75bdb5082
# Parent  f514646473c7477d4c6a99ee84a76be033c943f8
[project @ 1994-11-08 02:21:29 by jwe]

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -1524,17 +1524,17 @@ ComplexMatrix&
 ComplexMatrix::operator += (const DiagMatrix& a)
 {
   int nr = rows ();
   int nc = cols ();
   if (nr != a.rows () || nc != a.cols ())
     {
       (*current_liboctave_error_handler)
 	("nonconformant matrix += operation attempted");
-      return ComplexMatrix ();
+      return *this;
     }
 
   for (int i = 0; i < a.length (); i++)
     elem (i, i) += a.elem (i, i);
 
   return *this;
 }
 
@@ -1542,17 +1542,17 @@ ComplexMatrix&
 ComplexMatrix::operator -= (const DiagMatrix& a)
 {
   int nr = rows ();
   int nc = cols ();
   if (nr != a.rows () || nc != a.cols ())
     {
       (*current_liboctave_error_handler)
 	("nonconformant matrix -= operation attempted");
-      return ComplexMatrix ();
+      return *this;
     }
 
   for (int i = 0; i < a.length (); i++)
     elem (i, i) -= a.elem (i, i);
 
   return *this;
 }
 
@@ -1560,17 +1560,17 @@ ComplexMatrix&
 ComplexMatrix::operator += (const ComplexDiagMatrix& a)
 {
   int nr = rows ();
   int nc = cols ();
   if (nr != a.rows () || nc != a.cols ())
     {
       (*current_liboctave_error_handler)
 	("nonconformant matrix += operation attempted");
-      return ComplexMatrix ();
+      return *this;
     }
 
   for (int i = 0; i < a.length (); i++)
     elem (i, i) += a.elem (i, i);
 
   return *this;
 }
 
@@ -1578,17 +1578,17 @@ ComplexMatrix&
 ComplexMatrix::operator -= (const ComplexDiagMatrix& a)
 {
   int nr = rows ();
   int nc = cols ();
   if (nr != a.rows () || nc != a.cols ())
     {
       (*current_liboctave_error_handler)
 	("nonconformant matrix -= operation attempted");
-      return ComplexMatrix ();
+      return *this;
     }
 
   for (int i = 0; i < a.length (); i++)
     elem (i, i) -= a.elem (i, i);
 
   return *this;
 }
 
diff --git a/liboctave/dColVector.cc b/liboctave/dColVector.cc
--- a/liboctave/dColVector.cc
+++ b/liboctave/dColVector.cc
@@ -196,17 +196,17 @@ ColumnVector::extract (int r1, int r2) c
 ColumnVector&
 ColumnVector::operator += (const ColumnVector& a)
 {
   int len = length ();
   if (len != a.length ())
     {
       (*current_liboctave_error_handler)
 	("nonconformant vector += operation attempted");
-      return ColumnVector ();
+      *this;
     }
 
   if (len == 0)
     return *this;
 
   double *d = fortran_vec (); // Ensures only one reference to my privates!
 
   add2 (d, a.data (), len);
@@ -216,17 +216,17 @@ ColumnVector::operator += (const ColumnV
 ColumnVector&
 ColumnVector::operator -= (const ColumnVector& a)
 {
   int len = length ();
   if (len != a.length ())
     {
       (*current_liboctave_error_handler)
 	("nonconformant vector -= operation attempted");
-      return ColumnVector ();
+      return *this;
     }
 
   if (len == 0)
     return *this;
 
   double *d = fortran_vec (); // Ensures only one reference to my privates!
 
   subtract2 (d, a.data (), len);
