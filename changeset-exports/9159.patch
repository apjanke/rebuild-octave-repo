# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1240985808 -7200
#      Wed Apr 29 08:16:48 2009 +0200
# Node ID c07cbffb82e3128c71988d685bda4f8ff35fb12b
# Parent  48ee8c73ff386dd3f5e500b31c0477bf0b51fcbf
update indexing docs

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,11 +1,12 @@
 2009-04-29  Jaroslav Hajek  <highegg@gmail.com>
 
 	* interpreter/numbers.txi: Update info on ranges.
+	* interpreter/expr.txi: Update some info on indexing.
 
 2009-04-26  Rik  <rdrider0-list@yahoo.com>
 	* interpreter/arith.txi: Update section 17.3 (Trigonometry) of arith.txi
 
 2009-04-24  Rik  <rdrider0-list@yahoo.com>
 	* interpreter/arith.txi: Update section 17.2 (Complex Arithmetic) of
 	arith.txi
 	Use Tex in more of the doc strings for pretty printing in pdf format.
diff --git a/doc/interpreter/expr.txi b/doc/interpreter/expr.txi
--- a/doc/interpreter/expr.txi
+++ b/doc/interpreter/expr.txi
@@ -88,49 +88,81 @@ a (1, [1, 2])
 a (1, 1:2)
 a (1, :)
 @end group
 @end example
 
 @noindent
 and select the first row of the matrix.
 
+In general, an array with @samp{n} dimensions can be indexed using @samp{m}
+indices.  If @code{n == m}, each index corresponds to its respective dimension.
+The set of index tuples determining the result is formed by the cartesian product
+of the index vectors (or ranges or scalars).
+If @code{n < m}, then the array is padded by trailing singleton dimensions.
+If @code{n > m}, the last @code{n-m+1} dimensions are folded into a single
+dimension with extent equal to product of extents of the original dimensions.
+
 @c FIXED -- sections on variable prefer_zero_one_indexing were removed
 
 Indexing a scalar with a vector of ones can be used to create a
 vector the same size as the index vector, with each element equal to
 the value of the original scalar.  For example, the following statements
 
 @example
 @group
 a = 13;
-a ([1, 1, 1, 1])
+a (ones (1, 4))
 @end group
 @end example
 
 @noindent
 produce a vector whose four elements are all equal to 13.
 
 Similarly, indexing a scalar with two vectors of ones can be used to
 create a matrix.  For example the following statements
 
 @example
 @group
 a = 13;
-a ([1, 1], [1, 1, 1])
+a (ones (1, 2), ones (1, 3))
 @end group
 @end example
 
 @noindent
 create a 2 by 3 matrix with all elements equal to 13.
 
-This is an obscure notation and should be avoided.  It is better to
-use the function @code{ones} to generate a matrix of the appropriate
-size whose elements are all one, and then to scale it to produce the
-desired result.  @xref{Special Utility Matrices}.
+The last example could also be written as
+
+@example
+@group
+13 (ones (2, 3))
+@end group
+@end example
+
+It should be, noted that @code{ones (1, n)} (a row vector of ones) results in a
+range (with zero increment), and is therefore more efficient when used in index
+expression than other forms of @dfn{ones}. In particular, when @samp{r} is a row
+vector, the expressions
+
+@example
+  r(ones (1, n), :)
+@end example
+
+@example
+  r(ones (n, 1), :)
+@end example
+
+will produce indentical results, but the first one will be significantly
+faster, at least for @samp{r} and @samp{n} large enough. The reason is that
+in the first case the index is kept in a compressed form, which allows Octave
+to choose a more efficient algorithm to handle the expression.
+
+In general, for an user unaware of these subtleties, it is best to use
+the function @dfn{repmat} for spreading arrays into bigger ones.
 
 It is also possible to create a matrix with different values.  The
 following example creates a 10 dimensional row vector @math{a} containing
 the values
 @iftex
 @tex
 $a_i = \sqrt{i}$.
 @end tex
