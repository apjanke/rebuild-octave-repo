# HG changeset patch
# User jwe
# Date 1069100347 0
#      Mon Nov 17 20:19:07 2003 +0000
# Node ID c0121a3b9cbe47b6e72256bd569bc5054540deba
# Parent  212fc2115e0953b7988579974ef97e329da46533
[project @ 2003-11-17 20:19:07 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,26 @@
+2003-11-17  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* DLD-FUNCTIONS/sort.cc (Fsort): Use const qualifier as appropriate.
+
+	* DLD-FUNCTIONS/balance.cc (balance): Use data() instead of
+	fortran_vec where appropriate in call to dggbak.
+
+	* DLD-FUNCTIONS/dasrt.cc (dasrt_user_j): Simplify inserting x and
+	xdot in arg vector.
+	(dasrt_user_f): Likewise.
+	(dasrt_user_cf): Likewise.
+	* DLD-FUNCTIONS/dassl.cc (dassl_user_function): Likewise.
+	(dassl_user_jacobian): Likewise.
+	* DLD-FUNCTIONS/lsode.cc (lsode_user_function): Likewise.
+	(lsode_user_jacobian): Likewise.
+	* DLD-FUNCTIONS/daspk.cc (daspk_user_function): Likewise.
+	(daspk_user_jacobian): Likewise.
+
 2003-11-16  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* ov-range.h (octave_range::reshape): New function.
 
 2003-11-15  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* version.h (OCTAVE_VERSION): Now 2.1.51.
 	(OCTAVE_API_VERSION): Now api-v2.
diff --git a/src/DLD-FUNCTIONS/balance.cc b/src/DLD-FUNCTIONS/balance.cc
--- a/src/DLD-FUNCTIONS/balance.cc
+++ b/src/DLD-FUNCTIONS/balance.cc
@@ -289,33 +289,33 @@ Generalized eigenvalue problem balancing
 
 	    Pl(ii,jj) = Pr(ii,jj) = (ii == jj ? 1.0 : 0.0);
 	  }
   
       // left first
       F77_XFCN (dggbak, DGGBAK,
 		(F77_CONST_CHAR_ARG2 (&job, 1),
 		 F77_CONST_CHAR_ARG2 ("L", 1),
-		 nn, ilo, ihi, lscale.fortran_vec (),
-		 rscale.fortran_vec(), nn, Pl.fortran_vec (), nn, info
+		 nn, ilo, ihi, lscale.data (), rscale.data (),
+		 nn, Pl.fortran_vec (), nn, info
 		 F77_CHAR_ARG_LEN (1)
 		 F77_CHAR_ARG_LEN (1)));
       
       if (f77_exception_encountered)
 	{
 	  error ("unrecoverable error in balance GEP(L)");
 	  return retval;
 	}
       
       // then right
       F77_XFCN (dggbak, DGGBAK,
 		(F77_CONST_CHAR_ARG2 (&job, 1),
 		 F77_CONST_CHAR_ARG2 ("R", 1),
-		 nn, ilo, ihi, lscale.fortran_vec (),
-		 rscale.fortran_vec (), nn, Pr.fortran_vec (), nn, info
+		 nn, ilo, ihi, lscale.data (), rscale.data (),
+		 nn, Pr.fortran_vec (), nn, info
 		 F77_CHAR_ARG_LEN (1)
 		 F77_CHAR_ARG_LEN (1)));
 
       if (f77_exception_encountered)
 	{
 	  error ("unrecoverable error in balance GEP(R)");
 	  return retval;
 	}
diff --git a/src/DLD-FUNCTIONS/daspk.cc b/src/DLD-FUNCTIONS/daspk.cc
--- a/src/DLD-FUNCTIONS/daspk.cc
+++ b/src/DLD-FUNCTIONS/daspk.cc
@@ -57,46 +57,23 @@ static bool warned_jac_imaginary = false
 static int call_depth = 0;
 
 ColumnVector
 daspk_user_function (const ColumnVector& x, const ColumnVector& xdot,
 		     double t, int& ires)
 {
   ColumnVector retval;
 
-  int nstates = x.capacity ();
-
-  assert (nstates == xdot.capacity ());
+  assert (x.capacity () == xdot.capacity ());
 
   octave_value_list args;
+
   args(2) = t;
-
-  if (nstates > 1)
-    {
-      Matrix m1 (nstates, 1);
-      Matrix m2 (nstates, 1);
-      for (int i = 0; i < nstates; i++)
-	{
-	  m1 (i, 0) = x (i);
-	  m2 (i, 0) = xdot (i);
-	}
-      octave_value state (m1);
-      octave_value deriv (m2);
-      args(1) = deriv;
-      args(0) = state;
-    }
-  else
-    {
-      double d1 = x (0);
-      double d2 = xdot (0);
-      octave_value state (d1);
-      octave_value deriv (d2);
-      args(1) = deriv;
-      args(0) = state;
-    }
+  args(1) = xdot;
+  args(0) = x;
 
   if (daspk_fcn)
     {
       octave_value_list tmp = daspk_fcn->do_multi_index_op (1, args);
 
       if (error_state)
 	{
 	  gripe_user_supplied_eval ("daspk");
@@ -128,48 +105,24 @@ daspk_user_function (const ColumnVector&
 }
 
 Matrix
 daspk_user_jacobian (const ColumnVector& x, const ColumnVector& xdot,
 		     double t, double cj)
 {
   Matrix retval;
 
-  int nstates = x.capacity ();
-
-  assert (nstates == xdot.capacity ());
+  assert (x.capacity () == xdot.capacity ());
 
   octave_value_list args;
 
   args(3) = cj;
   args(2) = t;
-
-  if (nstates > 1)
-    {
-      Matrix m1 (nstates, 1);
-      Matrix m2 (nstates, 1);
-      for (int i = 0; i < nstates; i++)
-	{
-	  m1 (i, 0) = x (i);
-	  m2 (i, 0) = xdot (i);
-	}
-      octave_value state (m1);
-      octave_value deriv (m2);
-      args(1) = deriv;
-      args(0) = state;
-    }
-  else
-    {
-      double d1 = x (0);
-      double d2 = xdot (0);
-      octave_value state (d1);
-      octave_value deriv (d2);
-      args(1) = deriv;
-      args(0) = state;
-    }
+  args(1) = xdot;
+  args(0) = x;
 
   if (daspk_jac)
     {
       octave_value_list tmp = daspk_jac->do_multi_index_op (1, args);
 
       if (error_state)
 	{
 	  gripe_user_supplied_eval ("daspk");
diff --git a/src/DLD-FUNCTIONS/dasrt.cc b/src/DLD-FUNCTIONS/dasrt.cc
--- a/src/DLD-FUNCTIONS/dasrt.cc
+++ b/src/DLD-FUNCTIONS/dasrt.cc
@@ -52,42 +52,28 @@ static octave_function *dasrt_cf;
 static bool warned_fcn_imaginary = false;
 static bool warned_jac_imaginary = false;
 static bool warned_cf_imaginary = false;
 
 // Is this a recursive call?
 static int call_depth = 0;
 
 static ColumnVector
-dasrt_user_f (const ColumnVector& x, const ColumnVector& xprime,
+dasrt_user_f (const ColumnVector& x, const ColumnVector& xdot,
 	      double t, int& ires)
 {
   ColumnVector retval;
 
-  octave_value_list args;
+  assert (x.capacity () == xdot.capacity ());
 
-  int n = x.length ();
+  octave_value_list args;
 
   args(2) = t;
-
-  if (n > 1)
-    {
-      args(1) = xprime;
-      args(0) = x;
-    }
-  else if (n == 1)
-    {
-      args(1) = xprime(0);
-      args(0) = x(0);
-    }
-  else
-    {
-      args(1) = Matrix ();
-      args(0) = Matrix ();
-    }
+  args(1) = xdot;
+  args(0) = x;
 
   if (dasrt_f)
     {
       octave_value_list tmp = dasrt_f->do_multi_index_op (1, args);
 
       if (error_state)
 	{
 	  gripe_user_supplied_eval ("dasrt");
@@ -116,26 +102,18 @@ dasrt_user_f (const ColumnVector& x, con
 
 static ColumnVector
 dasrt_user_cf (const ColumnVector& x, double t)
 {
   ColumnVector retval;
 
   octave_value_list args;
 
-  int n = x.length ();
-
-  if (n > 1)
-    args(0) = x;
-  else if (n == 1)
-    args(0) = x(0);
-  else
-    args(0) = Matrix ();
-
   args(1) = t;
+  args(0) = x;
 
   if (dasrt_cf)
     {
       octave_value_list tmp = dasrt_cf->do_multi_index_op (1, args);
 
       if (error_state)
 	{
 	  gripe_user_supplied_eval ("dasrt");
@@ -163,48 +141,24 @@ dasrt_user_cf (const ColumnVector& x, do
 }
 
 static Matrix
 dasrt_user_j (const ColumnVector& x, const ColumnVector& xdot,
 	      double t, double cj)
 {
   Matrix retval;
 
-  int nstates = x.capacity ();
-
-  assert (nstates == xdot.capacity ());
+  assert (x.capacity () == xdot.capacity ());
 
   octave_value_list args;
 
   args(3) = cj;
   args(2) = t;
-
-  if (nstates > 1)
-    {
-      Matrix m1 (nstates, 1);
-      Matrix m2 (nstates, 1);
-      for (int i = 0; i < nstates; i++)
-	{
-	  m1 (i, 0) = x (i);
-	  m2 (i, 0) = xdot (i);
-	}
-      octave_value state (m1);
-      octave_value deriv (m2);
-      args(1) = deriv;
-      args(0) = state;
-    }
-  else
-    {
-      double d1 = x (0);
-      double d2 = xdot (0);
-      octave_value state (d1);
-      octave_value deriv (d2);
-      args(1) = deriv;
-      args(0) = state;
-    }
+  args(1) = xdot;
+  args(0) = x;
 
   if (dasrt_j)
     {
       octave_value_list tmp = dasrt_j->do_multi_index_op (1, args);
 
       if (error_state)
 	{
 	  gripe_user_supplied_eval ("dasrt");
diff --git a/src/DLD-FUNCTIONS/dassl.cc b/src/DLD-FUNCTIONS/dassl.cc
--- a/src/DLD-FUNCTIONS/dassl.cc
+++ b/src/DLD-FUNCTIONS/dassl.cc
@@ -57,46 +57,23 @@ static bool warned_jac_imaginary = false
 static int call_depth = 0;
 
 ColumnVector
 dassl_user_function (const ColumnVector& x, const ColumnVector& xdot,
 		     double t, int& ires)
 {
   ColumnVector retval;
 
-  int nstates = x.capacity ();
-
-  assert (nstates == xdot.capacity ());
+  assert (x.capacity () == xdot.capacity ());
 
   octave_value_list args;
+
   args(2) = t;
-
-  if (nstates > 1)
-    {
-      Matrix m1 (nstates, 1);
-      Matrix m2 (nstates, 1);
-      for (int i = 0; i < nstates; i++)
-	{
-	  m1 (i, 0) = x (i);
-	  m2 (i, 0) = xdot (i);
-	}
-      octave_value state (m1);
-      octave_value deriv (m2);
-      args(1) = deriv;
-      args(0) = state;
-    }
-  else
-    {
-      double d1 = x (0);
-      double d2 = xdot (0);
-      octave_value state (d1);
-      octave_value deriv (d2);
-      args(1) = deriv;
-      args(0) = state;
-    }
+  args(1) = xdot;
+  args(0) = x;
 
   if (dassl_fcn)
     {
       octave_value_list tmp = dassl_fcn->do_multi_index_op (1, args);
 
       if (error_state)
 	{
 	  gripe_user_supplied_eval ("dassl");
@@ -128,48 +105,24 @@ dassl_user_function (const ColumnVector&
 }
 
 Matrix
 dassl_user_jacobian (const ColumnVector& x, const ColumnVector& xdot,
 		     double t, double cj)
 {
   Matrix retval;
 
-  int nstates = x.capacity ();
-
-  assert (nstates == xdot.capacity ());
+  assert (x.capacity () == xdot.capacity ());
 
   octave_value_list args;
 
   args(3) = cj;
   args(2) = t;
-
-  if (nstates > 1)
-    {
-      Matrix m1 (nstates, 1);
-      Matrix m2 (nstates, 1);
-      for (int i = 0; i < nstates; i++)
-	{
-	  m1 (i, 0) = x (i);
-	  m2 (i, 0) = xdot (i);
-	}
-      octave_value state (m1);
-      octave_value deriv (m2);
-      args(1) = deriv;
-      args(0) = state;
-    }
-  else
-    {
-      double d1 = x (0);
-      double d2 = xdot (0);
-      octave_value state (d1);
-      octave_value deriv (d2);
-      args(1) = deriv;
-      args(0) = state;
-    }
+  args(1) = xdot;
+  args(0) = x;
 
   if (dassl_jac)
     {
       octave_value_list tmp = dassl_jac->do_multi_index_op (1, args);
 
       if (error_state)
 	{
 	  gripe_user_supplied_eval ("dassl");
diff --git a/src/DLD-FUNCTIONS/find.cc b/src/DLD-FUNCTIONS/find.cc
--- a/src/DLD-FUNCTIONS/find.cc
+++ b/src/DLD-FUNCTIONS/find.cc
@@ -32,17 +32,17 @@ Software Foundation, 59 Temple Place - S
 #include "oct-obj.h"
 
 #define DO_FIND_OP(T) \
   do \
     { \
       T tmp (count); \
  \
       for (int i = 0; i < count; i++) \
-	tmp (i) = nr * (j_idx (i) - 1.0) + i_idx (i); \
+	tmp (i) = nr * (j_idx(i) - 1.0) + i_idx(i); \
  \
       retval(0) = tmp; \
     } \
   while (0)
 
 
 static octave_value_list
 find_to_fortran_idx (const ColumnVector i_idx, const ColumnVector j_idx,
@@ -56,19 +56,19 @@ find_to_fortran_idx (const ColumnVector 
     case 1:
       {
 	// If the original argument was a row vector, force a row
 	// vector of indices to be returned.
 
 	int count = i_idx.length ();
 
 	if (nr == 1)
-	  DO_FIND_OP(RowVector);
+	  DO_FIND_OP (RowVector);
 	else
-	  DO_FIND_OP(ColumnVector);
+	  DO_FIND_OP (ColumnVector);
       }
       break;
 
     case 3:
       retval(2) = val;
       // Fall through!
 
     case 2:
diff --git a/src/DLD-FUNCTIONS/fsolve.cc b/src/DLD-FUNCTIONS/fsolve.cc
--- a/src/DLD-FUNCTIONS/fsolve.cc
+++ b/src/DLD-FUNCTIONS/fsolve.cc
@@ -148,23 +148,23 @@ fsolve_user_jacobian (const ColumnVector
 
   octave_value_list args;
   args.resize (1);
 
   if (n > 1)
     {
       Matrix m (n, 1);
       for (int i = 0; i < n; i++)
-	m (i, 0) = x (i);
+	m(i,0) = x(i);
       octave_value vars (m);
       args(0) = vars;
     }
   else
     {
-      double d = x (0);
+      double d = x(0);
       octave_value vars (d);
       args(0) = vars;
     }
 
   if (fsolve_fcn)
     {
       octave_value_list tmp = fsolve_jac->do_multi_index_op (1, args);
 
diff --git a/src/DLD-FUNCTIONS/lsode.cc b/src/DLD-FUNCTIONS/lsode.cc
--- a/src/DLD-FUNCTIONS/lsode.cc
+++ b/src/DLD-FUNCTIONS/lsode.cc
@@ -62,22 +62,17 @@ ColumnVector
 lsode_user_function (const ColumnVector& x, double t)
 {
   ColumnVector retval;
 
   int nstates = x.capacity ();
 
   octave_value_list args;
   args(1) = t;
-
-  Matrix m (nstates, 1);
-  for (int i = 0; i < nstates; i++)
-    m (i, 0) = x (i);
-  octave_value state (m);
-  args(0) = state;
+  args(0) = x;
 
   if (lsode_fcn)
     {
       octave_value_list tmp = lsode_fcn->do_multi_index_op (1, args);
 
       if (error_state)
 	{
 	  gripe_user_supplied_eval ("lsode");
@@ -108,22 +103,17 @@ Matrix
 lsode_user_jacobian (const ColumnVector& x, double t)
 {
   Matrix retval;
 
   int nstates = x.capacity ();
 
   octave_value_list args;
   args(1) = t;
-
-  Matrix m (nstates, 1);
-  for (int i = 0; i < nstates; i++)
-    m (i, 0) = x (i);
-  octave_value state (m);
-  args(0) = state;
+  args(0) = x;
 
   if (lsode_jac)
     {
       octave_value_list tmp = lsode_jac->do_multi_index_op (1, args);
 
       if (error_state)
 	{
 	  gripe_user_supplied_eval ("lsode");
diff --git a/src/DLD-FUNCTIONS/odessa.cc b/src/DLD-FUNCTIONS/odessa.cc
--- a/src/DLD-FUNCTIONS/odessa.cc
+++ b/src/DLD-FUNCTIONS/odessa.cc
@@ -527,17 +527,17 @@ parameters for @code{lsode}.\n\
       if (error_state)
 	ODESSA_ABORT1
 	  ("expecting output time vector as %s argument 5");
 
       ColumnVector crit_times;
 
       bool crit_times_set = false;
 
-      if (nargin==6)
+      if (nargin == 6)
 	{
 	  crit_times = ColumnVector (args(5).vector_value ());
 
 	  if (error_state)
 	    ODESSA_ABORT1
 	      ("expecting critical time vector as argument 6");
 
 	  crit_times_set = true;
diff --git a/src/DLD-FUNCTIONS/sort.cc b/src/DLD-FUNCTIONS/sort.cc
--- a/src/DLD-FUNCTIONS/sort.cc
+++ b/src/DLD-FUNCTIONS/sort.cc
@@ -373,45 +373,45 @@ matrix.  For example,\n\
     retval.resize (2);
   else
     retval.resize (1);
 
   octave_value arg = args(0);
 
   if (arg.is_real_type ())
     {
-      Matrix m = arg.matrix_value ();
+      const Matrix m = arg.matrix_value ();
 
       if (! error_state)
 	{
 	  if (m.rows () == 1)
 	    {
 	      int nc = m.columns ();
 	      RowVector v (nc);
 	      for (int i = 0; i < nc; i++)
-		v (i) = m (0, i);
+		v(i) = m(0,i);
 
 	      retval = mx_sort (v);
 	    }
 	  else
 	    retval = mx_sort (m);
 	}
     }
   else if (arg.is_complex_type ())
     {
-      ComplexMatrix cm = arg.complex_matrix_value ();
+      const ComplexMatrix cm = arg.complex_matrix_value ();
 
       if (! error_state)
 	{
 	  if (cm.rows () == 1)
 	    {
 	      int nc = cm.columns ();
 	      ComplexRowVector cv (nc);
 	      for (int i = 0; i < nc; i++)
-		cv (i) = cm (0, i);
+		cv(i) = cm(0,i);
 
 	      retval = mx_sort (cv);
 	    }
 	  else
 	    retval = mx_sort (cm);
 	}
     }
   else
