# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1456443788 18000
#      Thu Feb 25 18:43:08 2016 -0500
# Node ID 28d9bce20aa7904d4eb19fac3bea9e028e7345bb
# Parent  06d15e4e611ab29fbbb433cd9a15d17e03850f40
eliminate HAVE_HDF5 macros from public header files

* ls-hdf5.h, ls-hdf5.cc: Always define hdf5_fstreambase and related
functions.  Check HAVE_HDF5 macros in individual functions.

* libinterp/corefcn/module.mk (NOINSTALL_COREFCN_SRC):
Move oct-hdf5.h here from COREFCN_INC.

diff --git a/libinterp/corefcn/ls-hdf5.cc b/libinterp/corefcn/ls-hdf5.cc
--- a/libinterp/corefcn/ls-hdf5.cc
+++ b/libinterp/corefcn/ls-hdf5.cc
@@ -70,62 +70,86 @@ along with Octave; see the file COPYING.
 #include "ov-lazy-idx.h"
 
 #include "ls-utils.h"
 #include "ls-hdf5.h"
 
 hdf5_fstreambase::hdf5_fstreambase (const char *name, int mode, int /* prot */)
   : file_id (-1), current_item (-1)
 {
+#if defined (HAVE_HDF5)
+
   if (mode & std::ios::in)
     file_id = H5Fopen (name, H5F_ACC_RDONLY, octave_H5P_DEFAULT);
   else if (mode & std::ios::out)
     {
       if (mode & std::ios::app && H5Fis_hdf5 (name) > 0)
         file_id = H5Fopen (name, H5F_ACC_RDWR, octave_H5P_DEFAULT);
       else
         file_id = H5Fcreate (name, H5F_ACC_TRUNC, octave_H5P_DEFAULT,
                              octave_H5P_DEFAULT);
     }
   if (file_id < 0)
     std::ios::setstate (std::ios::badbit);
 
   current_item = 0;
+
+#else
+  err_disabled_feature ("hdf5_fstreambase", "HDF5");
+#endif
 }
 
 void
 hdf5_fstreambase::close (void)
 {
+#if defined (HAVE_HDF5)
+
   if (file_id >= 0)
     {
       if (H5Fclose (file_id) < 0)
         std::ios::setstate (std::ios::badbit);
       file_id = -1;
     }
+
+#else
+  // This shouldn't happen because construction of hdf5_fstreambase
+  // objects is supposed to be impossible if HDF5 is not available.
+
+  panic_impossible ();
+#endif
 }
 
 void
 hdf5_fstreambase::open (const char *name, int mode, int)
 {
+#if defined (HAVE_HDF5)
+
   clear ();
 
   if (mode & std::ios::in)
     file_id = H5Fopen (name, H5F_ACC_RDONLY, octave_H5P_DEFAULT);
   else if (mode & std::ios::out)
     {
       if (mode & std::ios::app && H5Fis_hdf5 (name) > 0)
         file_id = H5Fopen (name, H5F_ACC_RDWR, octave_H5P_DEFAULT);
       else
         file_id = H5Fcreate (name, H5F_ACC_TRUNC, octave_H5P_DEFAULT,
                              octave_H5P_DEFAULT);
     }
   if (file_id < 0)
     std::ios::setstate (std::ios::badbit);
 
   current_item = 0;
+
+#else
+  // This shouldn't happen because construction of hdf5_fstreambase
+  // objects is supposed to be impossible if HDF5 is not available.
+
+  panic_impossible ();
+#endif
 }
 
 static std::string
 make_valid_identifier (const std::string& nm)
 {
   std::string retval;
 
   size_t nm_len = nm.length ();
@@ -148,16 +172,18 @@ make_valid_identifier (const std::string
 // Given two compound types t1 and t2, determine whether they
 // are compatible for reading/writing.  This function only
 // works for non-nested types composed of simple elements (ints, floats...),
 // which is all we need it for
 
 bool
 hdf5_types_compatible (octave_hdf5_id t1, octave_hdf5_id t2)
 {
+#if defined (HAVE_HDF5)
+
   int n;
   if ((n = H5Tget_nmembers (t1)) != H5Tget_nmembers (t2))
     return false;
 
   for (int i = 0; i < n; ++i)
     {
       hid_t mt1 = H5Tget_member_type (t1, i);
       hid_t mt2 = H5Tget_member_type (t2, i);
@@ -165,24 +191,30 @@ hdf5_types_compatible (octave_hdf5_id t1
       if (H5Tget_class (mt1) != H5Tget_class (mt2))
         return false;
 
       H5Tclose (mt2);
       H5Tclose (mt1);
     }
 
   return true;
+
+#else
+  err_disabled_feature ("hdf5_types_compatible", "HDF5");
+#endif
 }
 
 // Return true if loc_id has the attribute named attr_name, and false
 // otherwise.
 
 bool
 hdf5_check_attr (octave_hdf5_id loc_id, const char *attr_name)
 {
+#if defined (HAVE_HDF5)
+
   bool retval = false;
 
   // we have to pull some shenanigans here to make sure
   // HDF5 doesn't print out all sorts of error messages if we
   // call H5Aopen for a non-existing attribute
 
   H5E_auto_t err_func;
   void *err_func_data;
@@ -209,22 +241,28 @@ hdf5_check_attr (octave_hdf5_id loc_id, 
 
   // restore error reporting:
 #if defined (HAVE_HDF5_18)
   H5Eset_auto (octave_H5E_DEFAULT, err_func, err_func_data);
 #else
   H5Eset_auto (err_func, err_func_data);
 #endif
   return retval;
+
+#else
+  err_disabled_feature ("hdf5_check_attr", "HDF5");
+#endif
 }
 
 bool
 hdf5_get_scalar_attr (octave_hdf5_id loc_id, octave_hdf5_id type_id,
                       const char *attr_name, void *buf)
 {
+#if defined (HAVE_HDF5)
+
   bool retval = false;
 
   // we have to pull some shenanigans here to make sure
   // HDF5 doesn't print out all sorts of error messages if we
   // call H5Aopen for a non-existing attribute
 
   H5E_auto_t err_func;
   void *err_func_data;
@@ -255,51 +293,60 @@ hdf5_get_scalar_attr (octave_hdf5_id loc
 
   // restore error reporting:
 #if defined (HAVE_HDF5_18)
   H5Eset_auto (octave_H5E_DEFAULT, err_func, err_func_data);
 #else
   H5Eset_auto (err_func, err_func_data);
 #endif
   return retval;
+
+#else
+  err_disabled_feature ("hdf5_get_scalar_attr", "HDF5");
+#endif
 }
 
-
-
-
 // The following subroutines creates an HDF5 representations of the way
 // we will store Octave complex types (pairs of floating-point numbers).
 // NUM_TYPE is the HDF5 numeric type to use for storage (e.g.
 // H5T_NATIVE_DOUBLE to save as 'double'). Note that any necessary
 // conversions are handled automatically by HDF5.
 
 octave_hdf5_id
 hdf5_make_complex_type (octave_hdf5_id num_type)
 {
+#if defined (HAVE_HDF5)
+
   hid_t type_id = H5Tcreate (H5T_COMPOUND, sizeof (double) * 2);
 
   H5Tinsert (type_id, "real", 0 * sizeof (double), num_type);
   H5Tinsert (type_id, "imag", 1 * sizeof (double), num_type);
 
   return type_id;
+
+#else
+  err_disabled_feature ("hdf5_make_complex_type", "HDF5");
+#endif
 }
 
 // This function is designed to be passed to H5Giterate, which calls it
 // on each data item in an HDF5 file.  For the item whose name is NAME in
 // the group GROUP_ID, this function sets dv->tc to an Octave representation
 // of that item.  (dv must be a pointer to hdf5_callback_data.)  (It also
 // sets the other fields of dv).
 //
 // It returns 1 on success (in which case H5Giterate stops and returns),
 // -1 on error, and 0 to tell H5Giterate to continue on to the next item
 // (e.g. if NAME was a data type we don't recognize).
 
 octave_hdf5_err
 hdf5_read_next_data (octave_hdf5_id group_id, const char *name, void *dv)
 {
+#if defined (HAVE_HDF5)
+
   hdf5_callback_data *d = static_cast<hdf5_callback_data *> (dv);
   hid_t type_id = -1;
   hid_t type_class_id = -1;
   hid_t data_id = -1;
   hid_t subgroup_id = -1;
   hid_t space_id = -1;;
 
   H5G_stat_t info;
@@ -618,28 +665,34 @@ done:
           d->doc = name;
         }
 
       // copy name (actually, vname):
       d->name = vname;
     }
 
   return retval;
+
+#else
+  err_disabled_feature ("hdf5_read_next_data", "HDF5");
+#endif
 }
 
 // Read the next Octave variable from the stream IS, which must really be
 // an hdf5_ifstream.  Return the variable value in tc, its doc string
 // in doc, and whether it is global in global.  The return value is
 // the name of the variable, or NULL if none were found or there was
 // and error.
 std::string
 read_hdf5_data (std::istream& is, const std::string& /* filename */,
                 bool& global, octave_value& tc, std::string& doc,
                 const string_vector& argv, int argv_idx, int argc)
 {
+#if defined (HAVE_HDF5)
+
   check_hdf5_types ();
 
   std::string retval;
 
   doc.resize (0);
 
   hdf5_ifstream& hs = dynamic_cast<hdf5_ifstream&> (is);
   hdf5_callback_data d;
@@ -701,23 +754,29 @@ read_hdf5_data (std::istream& is, const 
       // more datasets print an error message if retval < 0?
       // hdf5_read_next_data already printed one, probably.
     }
 
   if (! d.name.empty ())
     retval = d.name;
 
   return retval;
+
+#else
+  err_disabled_feature ("read_hdf5_data", "HDF5");
+#endif
 }
 
 // Add an attribute named attr_name to loc_id (a simple scalar
 // attribute with value 1).  Return value is >= 0 on success.
 octave_hdf5_err
 hdf5_add_attr (octave_hdf5_id loc_id, const char *attr_name)
 {
+#if defined (HAVE_HDF5)
+
   herr_t retval = 0;
 
   hid_t as_id = H5Screate (H5S_SCALAR);
 
   if (as_id >= 0)
     {
 #if defined (HAVE_HDF5_18)
       hid_t a_id = H5Acreate (loc_id, attr_name, H5T_NATIVE_UCHAR,
@@ -738,22 +797,28 @@ hdf5_add_attr (octave_hdf5_id loc_id, co
         retval = a_id;
 
       H5Sclose (as_id);
     }
   else
     retval = as_id;
 
   return retval;
+
+#else
+  err_disabled_feature ("hdf5_add_attr", "HDF5");
+#endif
 }
 
 octave_hdf5_err
 hdf5_add_scalar_attr (octave_hdf5_id loc_id, octave_hdf5_id type_id,
                       const char *attr_name, void *buf)
 {
+#if defined (HAVE_HDF5)
+
   herr_t retval = 0;
 
   hid_t as_id = H5Screate (H5S_SCALAR);
 
   if (as_id >= 0)
     {
 #if defined (HAVE_HDF5_18)
       hid_t a_id = H5Acreate (loc_id, attr_name, type_id,
@@ -772,25 +837,31 @@ hdf5_add_scalar_attr (octave_hdf5_id loc
         retval = a_id;
 
       H5Sclose (as_id);
     }
   else
     retval = as_id;
 
   return retval;
+
+#else
+  err_disabled_feature ("hdf5_add_scalar_attr", "HDF5");
+#endif
 }
 
 // Save an empty matrix, if needed. Returns
 //    > 0  Saved empty matrix
 //    = 0  Not an empty matrix; did nothing
 //    < 0  Error condition
 int
 save_hdf5_empty (octave_hdf5_id loc_id, const char *name, const dim_vector d)
 {
+#if defined (HAVE_HDF5)
+
   hsize_t sz = d.length ();
   OCTAVE_LOCAL_BUFFER (octave_idx_type, dims, sz);
   bool empty = false;
   hid_t space_hid = -1;
   hid_t data_hid = -1;
   int retval;
   for (hsize_t i = 0; i < sz; i++)
     {
@@ -822,25 +893,31 @@ save_hdf5_empty (octave_hdf5_id loc_id, 
 
   H5Dclose (data_hid);
   H5Sclose (space_hid);
 
   if (retval >= 0)
     retval = hdf5_add_attr (loc_id, "OCTAVE_EMPTY_MATRIX");
 
   return (retval == 0 ? 1 : retval);
+
+#else
+  err_disabled_feature ("save_hdf5_empty", "HDF5");
+#endif
 }
 
 // Load an empty matrix, if needed. Returns
 //    > 0  loaded empty matrix, dimensions returned
 //    = 0  Not an empty matrix; did nothing
 //    < 0  Error condition
 int
 load_hdf5_empty (octave_hdf5_id loc_id, const char *name, dim_vector &d)
 {
+#if defined (HAVE_HDF5)
+
   if (! hdf5_check_attr (loc_id, "OCTAVE_EMPTY_MATRIX"))
     return 0;
 
   hsize_t hdims, maxdims;
 #if defined (HAVE_HDF5_18)
   hid_t data_hid = H5Dopen (loc_id, name, octave_H5P_DEFAULT);
 #else
   hid_t data_hid = H5Dopen (loc_id, name);
@@ -859,28 +936,33 @@ load_hdf5_empty (octave_hdf5_id loc_id, 
       for (hsize_t i = 0; i < hdims; i++)
         d(i) = dims[i];
     }
 
   H5Sclose (space_id);
   H5Dclose (data_hid);
 
   return (retval == 0 ? hdims : retval);
+
+#else
+  err_disabled_feature ("load_hdf5_empty", "HDF5");
+#endif
 }
 
 // save_type_to_hdf5 is not currently used, since hdf5 doesn't yet support
 // automatic float<->integer conversions:
 
-#if defined (HAVE_HDF5_INT2FLOAT_CONVERSIONS)
-
 // return the HDF5 type id corresponding to the Octave save_type
 
 octave_hdf5_id
 save_type_to_hdf5 (save_type st)
 {
+#if defined (HAVE_HDF5)
+#  if defined (HAVE_HDF5_INT2FLOAT_CONVERSIONS)
+
   switch (st)
     {
     case LS_U_CHAR:
       return H5T_NATIVE_UCHAR;
 
     case LS_U_SHORT:
       return H5T_NATIVE_USHORT;
 
@@ -898,29 +980,37 @@ save_type_to_hdf5 (save_type st)
 
     case LS_FLOAT:
       return H5T_NATIVE_FLOAT;
 
     case LS_DOUBLE:
     default:
       return H5T_NATIVE_DOUBLE;
     }
+
+#  else
+  return -1;
+#  endif
+#else
+  err_disabled_feature ("save_type_to_hdf5", "HDF5");
+#endif
 }
-#endif
 
 // Add the data from TC to the HDF5 location loc_id, which could
 // be either a file or a group within a file.  Return true if
 // successful.  This function calls itself recursively for lists
 // (stored as HDF5 groups).
 
 bool
 add_hdf5_data (octave_hdf5_id loc_id, const octave_value& tc,
                const std::string& name, const std::string& doc,
                bool mark_as_global, bool save_as_floats)
 {
+#if defined (HAVE_HDF5)
+
   hsize_t dims[3];
   hid_t type_id, space_id, data_id, data_type_id;
   type_id = space_id = data_id = data_type_id = -1;
 
   bool retval = false;
   octave_value val = tc;
   // FIXME: diagonal & permutation matrices currently don't know how to save
   // themselves, so we convert them first to normal matrices using A = A(:,:).
@@ -987,27 +1077,37 @@ error_cleanup:
 
   if (data_id >= 0)
     H5Gclose (data_id);
 
   if (! retval)
     error ("save: error while writing '%s' to hdf5 file", name.c_str ());
 
   return retval;
+
+#else
+  err_disabled_feature ("add_hdf5_data", "HDF5");
+#endif
 }
 
 // Write data from TC in HDF5 (binary) format to the stream OS,
 // which must be an hdf5_ofstream, returning true on success.
 
 bool
 save_hdf5_data (std::ostream& os, const octave_value& tc,
                 const std::string& name, const std::string& doc,
                 bool mark_as_global, bool save_as_floats)
 {
+#if defined (HAVE_HDF5)
+
   check_hdf5_types ();
 
   hdf5_ofstream& hs = dynamic_cast<hdf5_ofstream&> (os);
 
   return add_hdf5_data (hs.file_id, tc, name, doc,
                         mark_as_global, save_as_floats);
+
+#else
+  err_disabled_feature ("save_hdf5_data", "HDF5");
+#endif
 }
 
 #endif
diff --git a/libinterp/corefcn/ls-hdf5.h b/libinterp/corefcn/ls-hdf5.h
--- a/libinterp/corefcn/ls-hdf5.h
+++ b/libinterp/corefcn/ls-hdf5.h
@@ -20,18 +20,16 @@ along with Octave; see the file COPYING.
 
 */
 
 #if ! defined (octave_ls_hdf5_h)
 #define octave_ls_hdf5_h 1
 
 #include "octave-config.h"
 
-#if defined (HAVE_HDF5)
-
 #include "oct-hdf5-types.h"
 
 // first, we need to define our own dummy stream subclass, since
 // HDF5 needs to do its own file i/o
 
 // hdf5_fstreambase is used for both input and output streams, modeled
 // on the fstreambase class in <fstream.h>
 
@@ -107,20 +105,18 @@ hdf5_callback_data
 
   // the value of the variable, in Octave form
   octave_value tc;
 
   // a documentation string (NULL if none)
   std::string doc;
 };
 
-#if defined (HAVE_HDF5_INT2FLOAT_CONVERSIONS)
 extern OCTINTERP_API octave_hdf5_id
-save_type_to_hdf5 (save_type st)
-#endif
+save_type_to_hdf5 (save_type st);
 
 extern OCTINTERP_API octave_hdf5_id
 hdf5_make_complex_type (octave_hdf5_id num_type);
 
 extern OCTINTERP_API bool
 hdf5_types_compatible (octave_hdf5_id t1, octave_hdf5_id t2);
 
 extern OCTINTERP_API octave_hdf5_err
@@ -158,10 +154,8 @@ extern OCTINTERP_API octave_hdf5_err
 hdf5_add_attr (octave_hdf5_id loc_id, const char *attr_name);
 
 
 extern OCTINTERP_API octave_hdf5_err
 hdf5_add_scalar_attr (octave_hdf5_id loc_id, octave_hdf5_id type_id,
                       const char *attr_name, void *buf);
 
 #endif
-
-#endif
diff --git a/libinterp/corefcn/module.mk b/libinterp/corefcn/module.mk
--- a/libinterp/corefcn/module.mk
+++ b/libinterp/corefcn/module.mk
@@ -55,17 +55,16 @@ COREFCN_INC = \
   libinterp/corefcn/ls-oct-text.h \
   libinterp/corefcn/ls-oct-binary.h \
   libinterp/corefcn/ls-utils.h \
   libinterp/corefcn/mex.h \
   libinterp/corefcn/mexproto.h \
   libinterp/corefcn/oct-errno.h \
   libinterp/corefcn/oct-fstrm.h \
   libinterp/corefcn/oct-handle.h \
-  libinterp/corefcn/oct-hdf5.h \
   libinterp/corefcn/oct-hdf5-types.h \
   libinterp/corefcn/oct-hist.h \
   libinterp/corefcn/oct-iostrm.h \
   libinterp/corefcn/oct-lvalue.h \
   libinterp/corefcn/oct-map.h \
   libinterp/corefcn/oct-obj.h \
   libinterp/corefcn/oct-prcstrm.h \
   libinterp/corefcn/oct-procbuf.h \
@@ -102,16 +101,17 @@ JIT_SRC = \
   libinterp/corefcn/jit-typeinfo.cc \
   libinterp/corefcn/jit-ir.cc \
   libinterp/corefcn/pt-jit.cc
 
 C_COREFCN_SRC = \
   libinterp/corefcn/siglist.c
 
 NOINSTALL_COREFCN_INC = \
+  libinterp/corefcn/oct-hdf5.h \
   libinterp/corefcn/oct-opengl.h \
   libinterp/corefcn/siglist.h
 
 ## oct-tex-parser.h is in the SRC list so that it will be distributed
 ## but not installed.
 
 COREFCN_SRC = \
   libinterp/corefcn/Cell.cc \
