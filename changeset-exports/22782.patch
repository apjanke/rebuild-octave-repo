# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1479244502 18000
#      Tue Nov 15 16:15:02 2016 -0500
# Node ID af79b2a398edaac9eff68828f369d202a48600da
# Parent  449a5e84185a9b3489b50b1610d81148db16bcaf
eliminate some macros that are used only once or twice

* mx-inlines.cc (DEFMXUNOP, DEFMXUNOPEQ, DEFMXUNBOOLOP, DEFMXMAPPER,
DEFMXMAPPER2, DEFMXMAPPER2X): Replace uses with macro expansions,
delete macro definitions.

diff --git a/liboctave/operators/mx-inlines.cc b/liboctave/operators/mx-inlines.cc
--- a/liboctave/operators/mx-inlines.cc
+++ b/liboctave/operators/mx-inlines.cc
@@ -48,47 +48,49 @@ along with Octave; see the file COPYING.
 
 template <typename R, typename S>
 inline void mx_inline_fill (size_t n, R *r, S s) throw ()
 {
   for (size_t i = 0; i < n; i++)
     r[i] = s;
 }
 
-#define DEFMXUNOP(F, OP)                                \
-  template <typename R, typename X>                     \
-  inline void F (size_t n, R *r, const X *x) throw ()   \
-  {                                                     \
-    for (size_t i = 0; i < n; i++)                      \
-      r[i] = OP x[i];                                   \
-  }
+template <typename R, typename X>
+inline void
+mx_inline_uminus (size_t n, R *r, const X *x) throw ()
+{
+  for (size_t i = 0; i < n; i++)
+    r[i] = -x[i];
+}
 
-DEFMXUNOP (mx_inline_uminus, -)
+template <typename R>
+inline void
+mx_inline_uminus2 (size_t n, R *r) throw ()
+{
+  for (size_t i = 0; i < n; i++)
+    r[i] = -r[i];
+}
 
-#define DEFMXUNOPEQ(F, OP)                      \
-  template <typename R>                         \
-  inline void F (size_t n, R *r) throw ()       \
-  {                                             \
-    for (size_t i = 0; i < n; i++)              \
-      r[i] = OP r[i];                           \
-  }
-
-DEFMXUNOPEQ (mx_inline_uminus2, -)
+template <typename X>
+inline void
+mx_inline_iszero (size_t n, bool *r, const X *x) throw ()
+{
+  const X zero = X ();
+  for (size_t i = 0; i < n; i++)
+    r[i] = x[i] == zero;
+}
 
-#define DEFMXUNBOOLOP(F, OP)                                    \
-  template <typename X>                                         \
-  inline void F (size_t n, bool *r, const X *x) throw ()        \
-  {                                                             \
-    const X zero = X ();                                        \
-    for (size_t i = 0; i < n; i++)                              \
-      r[i] = x[i] OP zero;                                      \
-  }
-
-DEFMXUNBOOLOP (mx_inline_iszero, ==)
-DEFMXUNBOOLOP (mx_inline_notzero, !=)
+template <typename X>
+inline void
+mx_inline_notzero (size_t n, bool *r, const X *x) throw ()
+{
+  const X zero = X ();
+  for (size_t i = 0; i < n; i++)
+    r[i] = x[i] != zero;
+}
 
 #define DEFMXBINOP(F, OP)                                               \
   template <typename R, typename X, typename Y>                         \
   inline void F (size_t n, R *r, const X *x, const Y *y) throw ()       \
   {                                                                     \
     for (size_t i = 0; i < n; i++)                                      \
       r[i] = x[i] OP y[i];                                              \
   }                                                                     \
@@ -216,32 +218,47 @@ inline void mx_inline_not2 (size_t n, bo
 
 DEFMXBOOLOP (mx_inline_and, , &, )
 DEFMXBOOLOP (mx_inline_or, , |, )
 DEFMXBOOLOP (mx_inline_not_and, !, &, )
 DEFMXBOOLOP (mx_inline_not_or, !, |, )
 DEFMXBOOLOP (mx_inline_and_not, , &, !)
 DEFMXBOOLOP (mx_inline_or_not, , |, !)
 
-#define DEFMXBOOLOPEQ(F, OP)                                    \
-  template <typename X>                                         \
-  inline void F (size_t n, bool *r, const X *x) throw ()        \
-  {                                                             \
-    for (size_t i = 0; i < n; i++)                              \
-      r[i] OP logical_value (x[i]);                             \
-  }                                                             \
-  template <typename X>                                         \
-  inline void F (size_t n, bool *r, X x) throw ()               \
-  {                                                             \
-    for (size_t i = 0; i < n; i++)                              \
-      r[i] OP x;                                                \
-  }
+template <typename X>
+inline void
+mx_inline_and2 (size_t n, bool *r, const X *x) throw ()
+{
+  for (size_t i = 0; i < n; i++)
+    r[i] &= logical_value (x[i]);
+}
+
+template <typename X>
+inline void
+mx_inline_and2 (size_t n, bool *r, X x) throw ()
+{
+  for (size_t i = 0; i < n; i++)
+    r[i] &= x;
+}
 
-DEFMXBOOLOPEQ (mx_inline_and2, &=)
-DEFMXBOOLOPEQ (mx_inline_or2, |=)
+template <typename X>
+inline void
+mx_inline_or2 (size_t n, bool *r, const X *x) throw ()
+{
+  for (size_t i = 0; i < n; i++)
+    r[i] |= logical_value (x[i]);
+}
+
+template <typename X>
+inline void
+mx_inline_or2 (size_t n, bool *r, X x) throw ()
+{
+  for (size_t i = 0; i < n; i++)
+    r[i] |= x;
+}
 
 template <typename T>
 inline bool
 mx_inline_any_nan (size_t n, const T* x)  throw ()
 {
   for (size_t i = 0; i < n; i++)
     {
       if (octave::math::isnan (x[i]))
@@ -298,61 +315,77 @@ mx_inline_all_real (size_t n, const std:
     {
       if (x[i].imag () != 0)
         return false;
     }
 
   return true;
 }
 
-#define DEFMXMAPPER(F, FUN)                             \
-  template <typename T>                                 \
-  inline void F (size_t n, T *r, const T *x) throw ()   \
-  {                                                     \
-    for (size_t i = 0; i < n; i++)                      \
-      r[i] = FUN (x[i]);                                \
-  }
-
 template <typename T>
 inline void mx_inline_real (size_t n, T *r, const std::complex<T>* x) throw ()
 {
   for (size_t i = 0; i < n; i++)
     r[i] = x[i].real ();
 }
 
 template <typename T>
 inline void mx_inline_imag (size_t n, T *r, const std::complex<T>* x) throw ()
 {
   for (size_t i = 0; i < n; i++)
     r[i] = x[i].imag ();
 }
 
-// Pairwise minimums/maximums
-#define DEFMXMAPPER2(F, FUN)                                            \
-  template <typename T>                                                 \
-  inline void F (size_t n, T *r, const T *x, const T *y) throw ()       \
-  {                                                                     \
-    for (size_t i = 0; i < n; i++)                                      \
-      r[i] = FUN (x[i], y[i]);                                          \
-  }                                                                     \
-  template <typename T>                                                 \
-  inline void F (size_t n, T *r, const T *x, T y) throw ()              \
-  {                                                                     \
-    for (size_t i = 0; i < n; i++)                                      \
-      r[i] = FUN (x[i], y);                                             \
-  }                                                                     \
-  template <typename T>                                                 \
-  inline void F (size_t n, T *r, T x, const T *y) throw ()              \
-  {                                                                     \
-    for (size_t i = 0; i < n; i++)                                      \
-      r[i] = FUN (x, y[i]);                                             \
-  }
+template <typename T>
+inline void
+mx_inline_xmin (size_t n, T *r, const T *x, const T *y) throw ()
+{
+  for (size_t i = 0; i < n; i++)
+    r[i] = octave::math::min (x[i], y[i]);
+}
+
+template <typename T>
+inline void
+mx_inline_xmin (size_t n, T *r, const T *x, T y) throw ()
+{
+  for (size_t i = 0; i < n; i++)
+    r[i] = octave::math::min (x[i], y);
+}
+
+template <typename T>
+inline void
+mx_inline_xmin (size_t n, T *r, T x, const T *y) throw ()
+{
+  for (size_t i = 0; i < n; i++)
+    r[i] = octave::math::min (x, y[i]);
+}
 
-DEFMXMAPPER2 (mx_inline_xmin, octave::math::min)
-DEFMXMAPPER2 (mx_inline_xmax, octave::math::max)
+template <typename T>
+inline void
+mx_inline_xmax (size_t n, T *r, const T *x, const T *y) throw ()
+{
+  for (size_t i = 0; i < n; i++)
+    r[i] = octave::math::max (x[i], y[i]);
+}
+
+template <typename T>
+inline void
+mx_inline_xmax (size_t n, T *r, const T *x, T y) throw ()
+{
+  for (size_t i = 0; i < n; i++)
+    r[i] = octave::math::max (x[i], y);
+}
+
+template <typename T>
+inline void
+mx_inline_xmax (size_t n, T *r, T x, const T *y) throw ()
+{
+  for (size_t i = 0; i < n; i++)
+    r[i] = octave::math::max (x, y[i]);
+}
 
 // Specialize array-scalar max/min
 #define DEFMINMAXSPEC(T, F, OP)                                 \
   template <>                                                   \
   inline void F<T> (size_t n, T *r, const T *x, T y) throw ()   \
   {                                                             \
     if (octave::math::isnan (y))                                \
       std::memcpy (r, x, n * sizeof (T));                       \
@@ -370,41 +403,48 @@ DEFMXMAPPER2 (mx_inline_xmax, octave::ma
         r[i] = (y[i] OP x) ? y[i] : x;                          \
   }
 
 DEFMINMAXSPEC (double, mx_inline_xmin, <=)
 DEFMINMAXSPEC (double, mx_inline_xmax, >=)
 DEFMINMAXSPEC (float, mx_inline_xmin, <=)
 DEFMINMAXSPEC (float, mx_inline_xmax, >=)
 
-// Pairwise power
-#define DEFMXMAPPER2X(F, FUN)                                           \
-  template <typename R, typename X, typename Y>                         \
-  inline void F (size_t n, R *r, const X *x, const Y *y) throw ()       \
-  {                                                                     \
-    for (size_t i = 0; i < n; i++)                                      \
-      r[i] = FUN (x[i], y[i]);                                          \
-  }                                                                     \
-  template <typename R, typename X, typename Y>                         \
-  inline void F (size_t n, R *r, const X *x, Y y) throw ()              \
-  {                                                                     \
-    for (size_t i = 0; i < n; i++)                                      \
-      r[i] = FUN (x[i], y);                                             \
-  }                                                                     \
-  template <typename R, typename X, typename Y>                         \
-  inline void F (size_t n, R *r, X x, const Y *y) throw ()              \
-  {                                                                     \
-    for (size_t i = 0; i < n; i++)                                      \
-      r[i] = FUN (x, y[i]);                                             \
-  }
-
 // Let the compiler decide which pow to use, whichever best matches the
 // arguments provided.
-using std::pow;
-DEFMXMAPPER2X (mx_inline_pow, pow)
+
+template <typename R, typename X, typename Y>
+inline void
+mx_inline_pow (size_t n, R *r, const X *x, const Y *y) throw ()
+{
+  using std::pow;
+
+  for (size_t i = 0; i < n; i++)
+    r[i] = pow (x[i], y[i]);
+}
+
+template <typename R, typename X, typename Y>
+inline void
+mx_inline_pow (size_t n, R *r, const X *x, Y y) throw ()
+{
+  using std::pow;
+
+  for (size_t i = 0; i < n; i++)
+    r[i] = pow (x[i], y);
+}
+
+template <typename R, typename X, typename Y>
+inline void
+mx_inline_pow (size_t n, R *r, X x, const Y *y) throw ()
+{
+  using std::pow;
+
+  for (size_t i = 0; i < n; i++)
+    r[i] = pow (x, y[i]);
+}
 
 // Arbitrary function appliers.
 // The function is a template parameter to enable inlining.
 template <typename R, typename X, R fun (X x)>
 inline void mx_inline_map (size_t n, R *r, const X *x) throw ()
 {
   for (size_t i = 0; i < n; i++)
     r[i] = fun (x[i]);
