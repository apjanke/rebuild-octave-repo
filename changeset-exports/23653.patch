# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1497956279 14400
#      Tue Jun 20 06:57:59 2017 -0400
# Node ID 3bb0a937c071303d46d14cdd364d40a0fd63f026
# Parent  ccf3c11aab0642e7a5dcf51572ff553e0f0e634f
avoid possible memory errors when parsing function files

* ov-builtin.h (octave_builtin::call): Provide default values for
nargout and args in declaration.
* ov-mex-fcn.h (octave_mex_function::call): Likewise.
* ov-usr-fcn.h (octave_user_function::call): Likewise.

* parse.h, oct-parse.in.yy (parse_fcn_file, load_fcn_from_file):
Return octave_value object instead of raw pointer to octave_function.
Change all uses.

diff --git a/libinterp/corefcn/ls-mat5.cc b/libinterp/corefcn/ls-mat5.cc
--- a/libinterp/corefcn/ls-mat5.cc
+++ b/libinterp/corefcn/ls-mat5.cc
@@ -879,26 +879,22 @@ read_mat5_binary_element (std::istream& 
 
                     if (fs.exists ())
                       {
                         size_t xpos
                           = str.find_last_of (octave::sys::file_ops::dir_sep_chars ());
 
                         std::string dir_name = str.substr (0, xpos);
 
-                        octave_function *fcn
-                          = octave::load_fcn_from_file (str, dir_name, "", "", fname);
-
-                        if (fcn)
-                          {
-                            octave_value tmp (fcn);
-
-                            tc = octave_value (new octave_fcn_handle (tmp,
-                                                                      fname));
-                          }
+                        octave_value ov_fcn
+                          = octave::load_fcn_from_file (str, dir_name,
+                                                        "", "", fname);
+
+                        if (ov_fcn.is_defined ())
+                          tc = octave_value (new octave_fcn_handle (ov_fcn, fname));
                       }
                     else
                       {
                         // Next just search for it anywhere in the system path
                         std::list<std::string> names;
                         names.push_back (fname + ".oct");
                         names.push_back (fname + ".mex");
                         names.push_back (fname + ".m");
@@ -910,50 +906,43 @@ read_mat5_binary_element (std::istream& 
                         str =
                           octave::sys::env::make_absolute (p.find_first_of (names));
 
                         size_t xpos
                           = str.find_last_of (octave::sys::file_ops::dir_sep_chars ());
 
                         std::string dir_name = str.substr (0, xpos);
 
-                        octave_function *fcn
-                          = octave::load_fcn_from_file (str, dir_name, "", "", fname);
-
-                        if (fcn)
-                          {
-                            octave_value tmp (fcn);
-
-                            tc = octave_value (new octave_fcn_handle (tmp,
-                                                                      fname));
-                          }
+                        octave_value ov_fcn
+                          = octave::load_fcn_from_file (str, dir_name,
+                                                        "", "", fname);
+
+                        if (ov_fcn.is_defined ())
+                          tc = octave_value (new octave_fcn_handle (ov_fcn, fname));
                         else
                           {
                             warning ("load: can't find the file %s",
                                      fpath.c_str ());
                             goto skip_ahead;
                           }
                       }
                   }
                 else
                   {
                     size_t xpos
                       = fpath.find_last_of (octave::sys::file_ops::dir_sep_chars ());
 
                     std::string dir_name = fpath.substr (0, xpos);
 
-                    octave_function *fcn
-                      = octave::load_fcn_from_file (fpath, dir_name, "", "", fname);
-
-                    if (fcn)
-                      {
-                        octave_value tmp (fcn);
-
-                        tc = octave_value (new octave_fcn_handle (tmp, fname));
-                      }
+                    octave_value ov_fcn
+                      = octave::load_fcn_from_file (fpath, dir_name,
+                                                    "", "", fname);
+
+                    if (ov_fcn.is_defined ())
+                      tc = octave_value (new octave_fcn_handle (ov_fcn, fname));
                     else
                       {
                         warning ("load: can't find the file %s",
                                  fpath.c_str ());
                         goto skip_ahead;
                       }
                   }
               }
diff --git a/libinterp/corefcn/symtab.cc b/libinterp/corefcn/symtab.cc
--- a/libinterp/corefcn/symtab.cc
+++ b/libinterp/corefcn/symtab.cc
@@ -277,25 +277,25 @@ split_name_with_package (const std::stri
 static inline bool
 load_out_of_date_fcn (const std::string& ff, const std::string& dir_name,
                       octave_value& function,
                       const std::string& dispatch_type = "",
                       const std::string& package_name = "")
 {
   bool retval = false;
 
-  octave_function *fcn
+  octave_value ov_fcn
     = octave::load_fcn_from_file (ff, dir_name, dispatch_type,
                                   package_name);
 
-  if (fcn)
+  if (ov_fcn.is_defined ())
     {
       retval = true;
 
-      function = octave_value (fcn);
+      function = ov_fcn;
     }
   else
     function = octave_value ();
 
   return retval;
 }
 
 bool
@@ -479,72 +479,82 @@ out_of_date_check (octave_value& functio
 }
 
 octave_value
 symbol_table::fcn_info::fcn_info_rep::load_private_function
   (const std::string& dir_name)
 {
   octave_value retval;
 
-  octave::load_path& lp = octave::__get_load_path__ ("symbol_table::fcn_info::fcn_info_rep::load_private_function");
+  octave::load_path& lp
+    = octave::__get_load_path__ ("symbol_table::fcn_info::fcn_info_rep::load_private_function");
 
   std::string file_name = lp.find_private_fcn (dir_name, name);
 
-  if (! file_name.empty ())
-    {
-      octave_function *fcn = octave::load_fcn_from_file (file_name, dir_name);
+  if (file_name.empty ())
+    return retval;
+
+  octave_value ov_fcn = octave::load_fcn_from_file (file_name, dir_name);
 
-      if (fcn)
-        {
-          std::string class_name;
+  if (ov_fcn.is_undefined ())
+    return retval;
 
-          size_t pos = dir_name.find_last_of (octave::sys::file_ops::dir_sep_chars ());
+  octave_function *tmpfcn = ov_fcn.function_value ();
 
-          if (pos != std::string::npos)
-            {
-              std::string tmp = dir_name.substr (pos+1);
+  if (! tmpfcn)
+    return retval;
+
+  std::string class_name;
+
+  size_t pos = dir_name.find_last_of (octave::sys::file_ops::dir_sep_chars ());
 
-              if (tmp[0] == '@')
-                class_name = tmp.substr (1);
-            }
+  if (pos != std::string::npos)
+    {
+      std::string tmp = dir_name.substr (pos+1);
 
-          fcn->mark_as_private_function (class_name);
-
-          retval = octave_value (fcn);
-
-          private_functions[dir_name] = retval;
-        }
+      if (tmp[0] == '@')
+        class_name = tmp.substr (1);
     }
 
-  return retval;
+  tmpfcn->mark_as_private_function (class_name);
+
+  private_functions[dir_name] = ov_fcn;
+
+  return ov_fcn;
 }
 
 octave_value
 symbol_table::fcn_info::fcn_info_rep::load_class_constructor (void)
 {
   octave_value retval;
 
   std::string dir_name;
 
-  octave::load_path& lp = octave::__get_load_path__ ("symbol_table::fcn_info::fcn_info_rep::load_class_constructor");
+  octave::load_path& lp
+    = octave::__get_load_path__ ("symbol_table::fcn_info::fcn_info_rep::load_class_constructor");
 
   std::string file_name = lp.find_method (name, name, dir_name, package_name);
 
   if (! file_name.empty ())
     {
-      octave_function *fcn
+      octave_value ov_fcn
         = octave::load_fcn_from_file (file_name, dir_name, name,
                                       package_name);
 
-      if (fcn)
+      if (ov_fcn.is_defined ())
         {
-          retval = octave_value (fcn);
+          octave_function *tmpfcn = ov_fcn.function_value ();
 
-          class_constructors[name] = retval;
-          class_methods[name] = retval;
+          if (tmpfcn && tmpfcn->is_class_constructor (name))
+            {
+              retval = ov_fcn;
+
+              class_constructors[name] = retval;
+              class_methods[name] = retval;
+            }
         }
     }
   else
     {
       // Classdef constructors can be defined anywhere in the path, not
       // necessarily in @-folders.  Look for a normal function and load it.
       // If the loaded function is a classdef constructor, store it as such
       // and restore function_on_path to its previous value.
@@ -596,25 +606,30 @@ symbol_table::fcn_info::fcn_info_rep::lo
 
           octave::load_path& lp = octave::__get_load_path__ ("symbol_table::fcn_info::fcn_info_rep::load_class_method");
 
           std::string file_name = lp.find_method (dispatch_type, name,
                                                   dir_name);
 
           if (! file_name.empty ())
             {
-              octave_function *fcn
+              octave_value ov_fcn
                 = octave::load_fcn_from_file (file_name, dir_name,
                                               dispatch_type);
 
-              if (fcn)
+              if (ov_fcn.is_defined ())
                 {
-                  retval = octave_value (fcn);
+                  octave_function *tmpfcn = ov_fcn.function_value ();
 
-                  class_methods[dispatch_type] = retval;
+                  if (tmpfcn && tmpfcn->is_class_method (dispatch_type))
+                    {
+                      retval = ov_fcn;
+
+                      class_methods[dispatch_type] = retval;
+                    }
                 }
             }
 
           if (retval.is_undefined ())
             {
               // Search parent classes
 
               symbol_table& symtab
@@ -1131,22 +1146,22 @@ symbol_table::fcn_info::fcn_info_rep::fi
       std::string file_name = octave::lookup_autoload (name);
 
       if (! file_name.empty ())
         {
           size_t pos = file_name.find_last_of (octave::sys::file_ops::dir_sep_chars ());
 
           std::string dir_name = file_name.substr (0, pos);
 
-          octave_function *fcn
+          octave_value ov_fcn
             = octave::load_fcn_from_file (file_name, dir_name, "", "",
                                           name, true);
 
-          if (fcn)
-            autoload_function = octave_value (fcn);
+          if (ov_fcn.is_defined ())
+            autoload_function = octave_value (ov_fcn);
         }
     }
 
   return autoload_function;
 }
 
 octave_value
 symbol_table::fcn_info::fcn_info_rep::find_user_function (void)
@@ -1162,22 +1177,22 @@ symbol_table::fcn_info::fcn_info_rep::fi
 
       octave::load_path& lp = octave::__get_load_path__ ("symbol_table::fcn_info::fcn_info_rep::find_user_function");
 
 
       std::string file_name = lp.find_fcn (name, dir_name, package_name);
 
       if (! file_name.empty ())
         {
-          octave_function *fcn
+          octave_value ov_fcn
             = octave::load_fcn_from_file (file_name, dir_name, "",
                                           package_name);
 
-          if (fcn)
-            function_on_path = octave_value (fcn);
+          if (ov_fcn.is_defined ())
+            function_on_path = ov_fcn;
         }
     }
 
   return function_on_path;
 }
 
 octave_value
 symbol_table::fcn_info::fcn_info_rep::find_package (void)
diff --git a/libinterp/octave-value/ov-builtin.h b/libinterp/octave-value/ov-builtin.h
--- a/libinterp/octave-value/ov-builtin.h
+++ b/libinterp/octave-value/ov-builtin.h
@@ -82,18 +82,19 @@ public:
   ~octave_builtin (void) = default;
 
   std::string src_file_name (void) const { return file; }
 
   octave_function * function_value (bool = false) { return this; }
 
   bool is_builtin_function (void) const { return true; }
 
-  octave_value_list call (octave::tree_evaluator& tw, int nargout,
-                          const octave_value_list& args);
+  octave_value_list
+  call (octave::tree_evaluator& tw, int nargout = 0,
+        const octave_value_list& args = octave_value_list ());
 
   jit_type * to_jit (void) const;
 
   void stash_jit (jit_type& type);
 
   fcn function (void) const;
 
   meth method (void) const;
diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -2976,23 +2976,23 @@ cdef_method::cdef_method_rep::check_meth
             }
 
           std::string dir_name;
           std::string file_name = lp.find_method (cls_name, name,
                                                   dir_name, pack_name);
 
           if (! file_name.empty ())
             {
-              octave_function *fcn = octave::load_fcn_from_file (file_name, dir_name,
-                                                                 dispatch_type,
-                                                                 pack_name);
-
-              if (fcn)
+              octave_value ov_fcn
+                = octave::load_fcn_from_file (file_name, dir_name,
+                                              dispatch_type, pack_name);
+
+              if (ov_fcn.is_defined ())
                 {
-                  function = octave_value (fcn);
+                  function = ov_fcn;
 
                   make_function_of_class (dispatch_type, function);
                 }
             }
         }
       else
         {
           // FIXME: check out-of-date status
diff --git a/libinterp/octave-value/ov-fcn-handle.cc b/libinterp/octave-value/ov-fcn-handle.cc
--- a/libinterp/octave-value/ov-fcn-handle.cc
+++ b/libinterp/octave-value/ov-fcn-handle.cc
@@ -264,25 +264,23 @@ octave_fcn_handle::set_fcn (const std::s
       octave::sys::file_stat fs (str);
 
       if (fs.exists ())
         {
           size_t xpos = str.find_last_of (octave::sys::file_ops::dir_sep_chars ());
 
           std::string dir_name = str.substr (0, xpos);
 
-          octave_function *xfcn
+          octave_value ov_fcn
             = octave::load_fcn_from_file (str, dir_name, "", "", nm);
 
-          if (! xfcn)
+          if (ov_fcn.is_undefined ())
             error ("function handle points to non-existent function");
 
-          octave_value tmp (xfcn);
-
-          fcn = octave_value (new octave_fcn_handle (tmp, nm));
+          fcn = octave_value (new octave_fcn_handle (ov_fcn, nm));
         }
       else
         {
           // Next just search for it anywhere in the system path
           std::list<std::string> names;
           names.push_back (nm + ".oct");
           names.push_back (nm + ".mex");
           names.push_back (nm + ".m");
@@ -292,42 +290,40 @@ octave_fcn_handle::set_fcn (const std::s
           octave::directory_path p (lp.system_path ());
 
           str = octave::sys::env::make_absolute (p.find_first_of (names));
 
           size_t xpos = str.find_last_of (octave::sys::file_ops::dir_sep_chars ());
 
           std::string dir_name = str.substr (0, xpos);
 
-          octave_function *xfcn = octave::load_fcn_from_file (str, dir_name, "", "", nm);
+          octave_value ov_fcn
+            = octave::load_fcn_from_file (str, dir_name, "", "", nm);
 
-          if (! xfcn)
+          if (ov_fcn.is_undefined ())
             error ("function handle points to non-existent function");
 
-          octave_value tmp (xfcn);
-
-          fcn = octave_value (new octave_fcn_handle (tmp, nm));
+          fcn = octave_value (new octave_fcn_handle (ov_fcn, nm));
         }
     }
   else
     {
       if (fpath.length () > 0)
         {
           size_t xpos = fpath.find_last_of (octave::sys::file_ops::dir_sep_chars ());
 
           std::string dir_name = fpath.substr (0, xpos);
 
-          octave_function *xfcn = octave::load_fcn_from_file (fpath, dir_name, "", "", nm);
+          octave_value ov_fcn
+            = octave::load_fcn_from_file (fpath, dir_name, "", "", nm);
 
-          if (! xfcn)
+          if (ov_fcn.is_undefined ())
             error ("function handle points to non-existent function");
 
-          octave_value tmp (xfcn);
-
-          fcn = octave_value (new octave_fcn_handle (tmp, nm));
+          fcn = octave_value (new octave_fcn_handle (ov_fcn, nm));
         }
       else
         {
           symbol_table& symtab
             = octave::__get_symbol_table__ ("octave_fcn_handle::set_fcn");
 
           fcn = symtab.find_function (nm);
 
diff --git a/libinterp/octave-value/ov-mex-fcn.h b/libinterp/octave-value/ov-mex-fcn.h
--- a/libinterp/octave-value/ov-mex-fcn.h
+++ b/libinterp/octave-value/ov-mex-fcn.h
@@ -80,18 +80,19 @@ public:
   octave::sys::time time_checked (void) const { return m_time_checked; }
 
   bool is_system_fcn_file (void) const { return m_is_system_fcn_file; }
 
   bool is_builtin_function (void) const { return false; }
 
   bool is_mex_function (void) const { return true; }
 
-  octave_value_list call (octave::tree_evaluator& tw, int nargout,
-                          const octave_value_list& args);
+  octave_value_list
+  call (octave::tree_evaluator& tw, int nargout = 0,
+        const octave_value_list& args = octave_value_list ());
 
   void atexit (void (*fcn) (void)) { m_exit_fcn_ptr = fcn; }
 
   octave::dynamic_library get_shlib (void) const { return m_sh_lib; }
 
   void *mex_fcn_ptr (void) const { return m_mex_fcn_ptr; }
 
   bool is_fmex (void) const { return m_is_fmex; }
diff --git a/libinterp/octave-value/ov-usr-fcn.h b/libinterp/octave-value/ov-usr-fcn.h
--- a/libinterp/octave-value/ov-usr-fcn.h
+++ b/libinterp/octave-value/ov-usr-fcn.h
@@ -129,18 +129,19 @@ public:
   }
 
   std::string fcn_file_name (void) const { return file_name; }
 
   octave::sys::time time_parsed (void) const { return t_parsed; }
 
   octave::sys::time time_checked (void) const { return t_checked; }
 
-  octave_value_list call (octave::tree_evaluator& tw, int nargout,
-                          const octave_value_list& args);
+  octave_value_list
+  call (octave::tree_evaluator& tw, int nargout = 0,
+        const octave_value_list& args = octave_value_list ());
 
   octave::tree_statement_list * body (void) { return cmd_list; }
 
   void accept (octave::tree_walker& tw);
 
 private:
 
   // The list of commands that make up the body of this function.
@@ -336,18 +337,19 @@ public:
   void mark_as_class_method (void) { class_method = true; }
 
   bool is_class_method (const std::string& cname = "") const
   {
     return class_method
            ? (cname.empty () ? true : cname == dispatch_class ()) : false;
   }
 
-  octave_value_list call (octave::tree_evaluator& tw, int nargout,
-                          const octave_value_list& args);
+  octave_value_list
+  call (octave::tree_evaluator& tw, int nargout = 0,
+        const octave_value_list& args = octave_value_list ());
 
   octave::tree_parameter_list * parameter_list (void) { return param_list; }
 
   octave::tree_parameter_list * return_list (void) { return ret_list; }
 
   octave::tree_statement_list * body (void) { return cmd_list; }
 
   octave_comment_list * leading_comment (void) { return lead_comm; }
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -4299,23 +4299,25 @@ namespace octave
 
 static void
 safe_fclose (FILE *f)
 {
   if (f)
     fclose (static_cast<FILE *> (f));
 }
 
-static octave_function *
+static octave_value
 parse_fcn_file (const std::string& full_file, const std::string& file,
                 const std::string& dispatch_type,
                 const std::string& package_name,
                 bool require_file, bool force_script, bool autoload,
                 bool relative_lookup, const std::string& warn_for)
 {
+  octave_value retval;
+
   octave::unwind_protect frame;
 
   octave_function *fcn_ptr = 0;
 
   // Open function file and parse.
 
   FILE *in_stream = octave::command_editor::get_input_stream ();
 
@@ -4367,23 +4369,27 @@ parse_fcn_file (const std::string& full_
 
               bool is_at_folder = ! dispatch_type.empty ();
 
               octave::interpreter& interp
                 = octave::__get_interpreter__ ("parse_fcn_file");
 
               fcn_ptr
                 = parser.classdef_object->make_meta_class (interp, is_at_folder);
+              if (fcn_ptr)
+                retval = octave_value (fcn_ptr);
 
               delete (parser.classdef_object);
 
               parser.classdef_object = 0;
             }
           else if (fcn_ptr)
             {
+              retval = octave_value (fcn_ptr);
+
               fcn_ptr->maybe_relocate_end ();
 
               if (parser.parsing_subfunctions)
                 {
                   if (! parser.endfunction_found)
                     parser.subfunction_names.reverse ();
 
                   fcn_ptr->stash_subfunction_names (parser.subfunction_names);
@@ -4394,17 +4400,17 @@ parse_fcn_file (const std::string& full_
         error ("parse error while reading file %s", full_file.c_str ());
     }
   else if (require_file)
     error ("no such file, '%s'", full_file.c_str ());
   else if (! warn_for.empty ())
     error ("%s: unable to open file '%s'", warn_for.c_str (),
            full_file.c_str ());
 
-  return fcn_ptr;
+  return retval;
 }
 
 namespace octave
 {
   std::string
   get_help_from_file (const std::string& nm, bool& symbol_found,
                       std::string& full_file)
   {
@@ -4427,25 +4433,26 @@ namespace octave
         if (pos != std::string::npos)
           file = file.substr (pos+1);
       }
 
     if (! file.empty ())
       {
         symbol_found = true;
 
-        octave_function *fcn
+        octave_value ov_fcn
           = parse_fcn_file (full_file, file, "", "", true, false, false, false,
                             "");
 
-        if (fcn)
+        if (ov_fcn.is_defined ())
           {
-            retval = fcn->doc_string ();
-
-            delete fcn;
+            octave_function *fcn = ov_fcn.function_value ();
+
+            if (fcn)
+              retval = fcn->doc_string ();
           }
       }
 
     return retval;
   }
 
   std::string
   get_help_from_file (const std::string& nm, bool& symbol_found)
@@ -4492,23 +4499,23 @@ namespace octave
 
     for (const auto& fcn_fname : autoload_map)
       if (nm == fcn_fname.second)
         names.append (fcn_fname.first);
 
     return names;
   }
 
-  octave_function *
+  octave_value
   load_fcn_from_file (const std::string& file_name, const std::string& dir_name,
                       const std::string& dispatch_type,
                       const std::string& package_name,
                       const std::string& fcn_name, bool autoload)
   {
-    octave_function *retval = 0;
+    octave_value retval;
 
     octave::unwind_protect frame;
 
     std::string nm = file_name;
 
     size_t nm_len = nm.length ();
 
     std::string file;
@@ -4538,51 +4545,73 @@ namespace octave
       octave::dynamic_loader& dyn_loader
         = __get_dynamic_loader__ ("~octave_mex_function");
 
     if (len > 4 && file.substr (len-4, len-1) == ".oct")
       {
         if (autoload && ! fcn_name.empty ())
           nm = fcn_name;
 
-        retval = dyn_loader.load_oct (nm, file, relative_lookup);
+        octave_function *tmpfcn
+          = dyn_loader.load_oct (nm, file, relative_lookup);
+
+        retval = octave_value (tmpfcn);
       }
     else if (len > 4 && file.substr (len-4, len-1) == ".mex")
       {
         // Temporarily load m-file version of mex-file, if it exists,
         // to get the help-string to use.
 
-        octave_function *tmpfcn = parse_fcn_file (file.substr (0, len - 2),
-                                                  nm, dispatch_type,
-                                                  package_name, false,
-                                                  autoload, autoload,
-                                                  relative_lookup, "");
-
-        retval = dyn_loader.load_mex (nm, file, relative_lookup);
+        std::string doc_string;
+
+        octave_value ov_fcn
+          = parse_fcn_file (file.substr (0, len - 2), nm, dispatch_type,
+                            package_name, false, autoload, autoload,
+                            relative_lookup, "");
+
+        if (ov_fcn.is_defined ())
+          {
+            octave_function *tmpfcn = ov_fcn.function_value ();
+
+            if (tmpfcn)
+              doc_string = tmpfcn->doc_string ();
+          }
+
+        octave_function *tmpfcn
+          = dyn_loader.load_mex (nm, file, relative_lookup);
 
         if (tmpfcn)
-          retval->document (tmpfcn->doc_string ());
-        delete tmpfcn;
+          {
+            tmpfcn->document (doc_string);
+
+            retval = octave_value (tmpfcn);
+          }
       }
     else if (len > 2)
       {
         retval = parse_fcn_file (file, nm, dispatch_type, package_name, true,
                                  autoload, autoload, relative_lookup, "");
       }
 
-    if (retval)
+    if (retval.is_defined ())
       {
-        retval->stash_dir_name (dir_name);
-        retval->stash_package_name (package_name);
-
-        if (retval->is_user_function ())
+        octave_function *tmpfcn = retval.function_value ();
+
+        if (tmpfcn)
           {
-            symbol_table::scope *scope = retval->scope ();
-
-            scope->stash_dir_name_for_subfunctions (dir_name);
+            tmpfcn->stash_dir_name (dir_name);
+            tmpfcn->stash_package_name (package_name);
+
+            if (tmpfcn->is_user_function ())
+              {
+                symbol_table::scope *scope = tmpfcn->scope ();
+
+                if (scope)
+                  scope->stash_dir_name_for_subfunctions (dir_name);
+              }
           }
       }
 
     return retval;
   }
 }
 
 DEFMETHOD (autoload, interp, args, ,
@@ -4775,87 +4804,86 @@ namespace octave
         else if (context == "base")
           cs.goto_base_frame ();
         else
           error ("source: context must be \"caller\" or \"base\"");
 
         frame.add_method (cs, &octave::call_stack::pop);
       }
 
-    octave_function *fcn = 0;
-
     // Find symbol name that would be in symbol_table, if it were loaded.
     size_t dir_end
       = file_name.find_last_of (octave::sys::file_ops::dir_sep_chars ());
     dir_end = (dir_end == std::string::npos) ? 0 : dir_end + 1;
 
     size_t extension = file_name.find_last_of ('.');
     if (extension == std::string::npos)
       extension = file_name.length ();
 
     std::string symbol = file_name.substr (dir_end, extension - dir_end);
     std::string full_name = octave::sys::canonicalize_file_name (file_name);
 
     // Check if this file is already loaded (or in the path)
     symbol_table& symtab = octave::__get_symbol_table__ ("source_file");
     octave_value ov_code = symtab.find (symbol);
-    if (ov_code.is_function ())
+
+    if (ov_code.is_user_script ())
       {
-        fcn = ov_code.function_value ();
-
-        if (fcn)
+        octave_user_script *script = ov_code.user_script_value ();
+
+        if (! script
+            || (octave::sys::canonicalize_file_name (script->fcn_file_name ())
+                != full_name))
           {
-            if (octave::sys::canonicalize_file_name (fcn->fcn_file_name ())
-                != full_name)
-              {
-                // wrong file, so load it below.
-                fcn = 0;
-              }
+            // Wrong file, so load it below.
+            ov_code = octave_value ();
           }
       }
+    else
+      {
+        // Not a script, so load it below.
+        ov_code = octave_value ();
+      }
 
     // If no symbol of this name, or the symbol is for a different
     // file, load.
 
-    if (! fcn)
+    if (ov_code.is_undefined ())
       {
         try
           {
-            fcn = parse_fcn_file (file_full_name, file_name, "", "",
-                                  require_file, true, false, false, warn_for);
-
-            if (fcn)
-              {
-                // Ensure that FCN will be deleted.
-                ov_code = octave_value (fcn);
-              }
+            ov_code = parse_fcn_file (file_full_name, file_name, "", "",
+                                      require_file, true, false, false,
+                                      warn_for);
           }
         catch (octave::execution_exception& e)
           {
             error (e, "source: error sourcing file '%s'",
                    file_full_name.c_str ());
           }
       }
 
     // Return or error if we don't have a valid script
-    if (! fcn)
+    if (ov_code.is_undefined ())
       return;
 
-    if (! fcn->is_user_code ())
+    if (! ov_code.is_user_script ())
       error ("source: %s is not a script", full_name.c_str ());
 
     if (verbose)
       {
         std::cout << "executing commands from " << full_name << " ... ";
         std::cout.flush ();
       }
 
     tree_evaluator& tw = __get_evaluator__ ("source");
 
-    fcn->call (tw, 0);
+    octave_user_script *script = ov_code.user_script_value ();
+
+    script->call (tw, 0);
 
     if (verbose)
       std::cout << "done." << std::endl;
   }
 }
 
 DEFMETHOD (mfilename, interp, args, ,
            doc: /* -*- texinfo -*-
@@ -5740,17 +5768,14 @@ Undocumented internal function.
       size_t pos = file.find_last_of (octave::sys::file_ops::dir_sep_str ());
       if (pos != std::string::npos)
         file = file.substr (pos+1);
     }
 
   if (nargin == 2)
     octave_stdout << "parsing " << full_file << std::endl;
 
-  octave_function *fcn = parse_fcn_file (full_file, file, "", "",
-                                         true, false, false,
-                                         false, "__parse_file__");
-
-  if (fcn)
-    delete fcn;
+  octave_value ov_fcn
+    = parse_fcn_file (full_file, file, "", "", true, false, false,
+                      false, "__parse_file__");
 
   return retval;
 }
diff --git a/libinterp/parse-tree/parse.h b/libinterp/parse-tree/parse.h
--- a/libinterp/parse-tree/parse.h
+++ b/libinterp/parse-tree/parse.h
@@ -529,17 +529,17 @@ namespace octave
   std::string lookup_autoload (const std::string& nm);
 
   extern OCTINTERP_API string_vector
   autoloaded_functions (void);
 
   extern OCTINTERP_API string_vector
   reverse_lookup_autoload (const std::string& nm);
 
-  extern OCTINTERP_API octave_function *
+  extern OCTINTERP_API octave_value
   load_fcn_from_file (const std::string& file_name,
                       const std::string& dir_name = "",
                       const std::string& dispatch_type = "",
                       const std::string& package_name = "",
                       const std::string& fcn_name = "",
                       bool autoload = false);
 
   extern OCTINTERP_API void
@@ -609,29 +609,16 @@ autoloaded_functions (void)
 
 OCTAVE_DEPRECATED (4.4, "use 'octave::reverse_lookup_autoload' instead")
 static inline string_vector
 reverse_lookup_autoload (const std::string& nm)
 {
   return octave::reverse_lookup_autoload (nm);
 }
 
-OCTAVE_DEPRECATED (4.4, "use 'octave::load_fcn_from_file' instead")
-static inline octave_function *
-load_fcn_from_file (const std::string& file_name,
-                    const std::string& dir_name = "",
-                    const std::string& dispatch_type = "",
-                    const std::string& package_name = "",
-                    const std::string& fcn_name = "",
-                    bool autoload = false)
-{
-  return octave::load_fcn_from_file (file_name, dir_name, dispatch_type,
-                                     package_name, fcn_name, autoload);
-}
-
 OCTAVE_DEPRECATED (4.4, "use 'octave::source_file' instead")
 static inline void
 source_file (const std::string& file_name,
              const std::string& context = "",
              bool verbose = false, bool require_file = true,
              const std::string& warn_for = "")
 {
   octave::source_file (file_name, context, verbose, require_file, warn_for);
