# HG changeset patch
# User jwe
# Date 1194539144 0
#      Thu Nov 08 16:25:44 2007 +0000
# Node ID 1d0d7be2d0f882a2c57f57646b8a140c7aab4cd4
# Parent  b01db194c5267faed650f25125f62f28aa74c7b4
[project @ 2007-11-08 16:25:44 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,10 +1,19 @@
 2007-11-08  John W. Eaton  <jwe@octave.org>
 
+	* control/base/dcgain.m, control/base/dre.m,
+	control/base/impulse.m, control/base/step.m,
+	control/system/dmr2d.m, control/system/ord2.m,
+	control/system/sys2ss.m, control/system/sysdimensions.m,
+	control/system/sysgetsignals.m, control/system/sysout.m,
+	control/system/tfout.m, control/system/ugain.m,
+	control/system/zpout.m, control/util/strappend.m:
+	Don't fail with usage message if nargout is too large.
+
 	* control/hinf/h2syn.m, control/hinf/hinf_ctr.m,
 	control/hinf/hinfnorm.m, control/hinf/hinfsyn.m,
 	control/hinf/hinfsyn_chk.m, control/hinf/is_dgkf.m,
 	control/hinf/wgt1o.m, control/util/__outlist__.m,
 	control/util/__zgpbal__.m, control/util/axis2dlim.m,
 	control/util/prompt.m, control/util/sortcom.m,
 	control/util/zgfmul.m, control/util/zgfslv.m,
 	control/util/zginit.m, control/util/zgreduce.m,
diff --git a/scripts/control/base/dcgain.m b/scripts/control/base/dcgain.m
--- a/scripts/control/base/dcgain.m
+++ b/scripts/control/base/dcgain.m
@@ -25,17 +25,17 @@
 ## number of the @math{A} Matrix in @var{sys} (default @var{tol} = 1.0e-10)
 ## @end deftypefn
 
 ## Author: Kai P. Mueller <mueller@ifr.ing.tu-bs.de>
 ## Created: October 1, 1997
 
 function gm = dcgain (sys, tol)
 
-  if (nargin < 1 || nargin > 2 || nargout > 1)
+  if (nargin < 1 || nargin > 2)
     print_usage ();
   endif
   if (! isstruct (sys))
     error ("dcgain: first argument is not a system data structure.")
   endif
   sys = sysupdate (sys, "ss");
   [aa, bb, cc, dd] = sys2ss (sys);
   if (is_digital (sys))
diff --git a/scripts/control/base/dre.m b/scripts/control/base/dre.m
--- a/scripts/control/base/dre.m
+++ b/scripts/control/base/dre.m
@@ -92,17 +92,17 @@
 ## || Plist@{i@} - Plist@{i-1@} || < Ptol
 ## @end example
 ## @end ifinfo
 ## for every @var{i} between 2 and length(@var{tvals}).
 ## @end deftypefn
 
 function [tvals, Plist] = dre (sys, Q, R, Qf, t0, tf, Ptol, maxits)
 
-  if (nargin < 6 || nargin > 8 || nargout != 2)
+  if (nargin < 6 || nargin > 8)
     print_usage ();
   elseif (! isstruct (sys))
     error ("sys must be a system data structure")
   elseif (is_digital (sys))
     error ("sys must be a continuous time system")
   elseif (! ismatrix (Q) || ! ismatrix (R) || ! ismatrix (Qf))
     error ("Q, R, and Qf must be matrices");
   elseif (! isscalar (t0) || ! isscalar (tf))
diff --git a/scripts/control/base/impulse.m b/scripts/control/base/impulse.m
--- a/scripts/control/base/impulse.m
+++ b/scripts/control/base/impulse.m
@@ -51,17 +51,17 @@
 
 ## Author: Kai P. Mueller <mueller@ifr.ing.tu-bs.de>
 ## Created: October 2, 1997
 ## based on lsim.m of Scottedward Hodel
 ## modified by
 
 function [y, t] = impulse (sys, inp, tstop, n)
 
-  if (nargin < 1 || nargin > 4 || nargout > 2)
+  if (nargin < 1 || nargin > 4)
     print_usage ();
   endif
 
   if (! isstruct (sys))
     error ("impulse: sys must be a system data structure.");
   endif
 
   if (nargout == 0)
diff --git a/scripts/control/base/step.m b/scripts/control/base/step.m
--- a/scripts/control/base/step.m
+++ b/scripts/control/base/step.m
@@ -52,17 +52,17 @@
 ## @end deftypefn
 
 ## Author: Kai P. Mueller <mueller@ifr.ing.tu-bs.de>
 ## Created: September 30, 1997
 ## based on lsim.m of Scottedward Hodel
 
 function [y, t] = step (sys, inp, tstop, n)
 
-  if (nargin < 1 || nargin > 4 || nargout > 2)
+  if (nargin < 1 || nargin > 4)
     print_usage ();
   endif
 
   if (! isstruct (sys))
     error ("step: sys must be a system data structure.");
   endif
 
   if (nargout == 0)
diff --git a/scripts/control/system/dmr2d.m b/scripts/control/system/dmr2d.m
--- a/scripts/control/system/dmr2d.m
+++ b/scripts/control/system/dmr2d.m
@@ -71,17 +71,17 @@
 ## @var{cuflg} == 0.
 ## @end deftypefn
 
 ## Adapted from c2d by a.s.hodel@eng.auburn.edu
 
 function [dsys, fidx] = dmr2d (sys, idx, sprefix, Ts2, cuflg)
 
   ## parse input arguments
-  if(nargin != 4 | nargout > 2)
+  if (nargin != 4)
     print_usage ();
 
   elseif (!isstruct(sys))
     error("sys must be in system data structure form");
 
   elseif(!is_digital(sys))
     error("sys must be discrete-time; continuous time passed");
   
diff --git a/scripts/control/system/ord2.m b/scripts/control/system/ord2.m
--- a/scripts/control/system/ord2.m
+++ b/scripts/control/system/ord2.m
@@ -60,21 +60,19 @@
 
 ## Author: Kai P. Mueller <mueller@ifr.ing.tu-bs.de>
 ## Created: September 28, 1997
 
 function outsys = ord2 (nfreq, damp, gain)
 
   ## Updates
 
-  if(nargin != 2 & nargin != 3)
-    print_usage ();
-  endif
-  if (nargout > 1)
+  if (nargin == 2 || nargin == 3)
+    if (nargin == 2)
+      gain = 1.0;
+    endif
+    w = 2.0 * pi * nfreq;
+    outsys = ss ([-2.0*w*damp, -w; w, 0], [w; 0], [0, gain]);
+  else
     print_usage ();
   endif
-  if (nargin == 2)
-    gain = 1.0;
-  endif
 
-  w = 2.0 * pi * nfreq;
-  outsys = ss ([-2.0*w*damp, -w; w, 0], [w; 0], [0, gain]);
 endfunction
diff --git a/scripts/control/system/sys2ss.m b/scripts/control/system/sys2ss.m
--- a/scripts/control/system/sys2ss.m
+++ b/scripts/control/system/sys2ss.m
@@ -73,22 +73,17 @@
 ## @end deftypefn
 
 ## Author: David Clem
 ## Created: August 19, 1994
 ## Updates by John Ingram July 14, 1996
 
 function [a, b, c, d, tsam, n, nz, stname, inname, outname, yd] = sys2ss (sys)
 
-  if(nargin != 1)
-    print_usage ();
-  endif
-
-  if (nargout > 11)
-    warning(["sys2ss: ",num2str(nargout)," out arguments exceeds max=11"])
+  if (nargin != 1)
     print_usage ();
   endif
 
   if( ! isstruct(sys) )
     error("input argument must be a system data structure");
   endif
 
   sys = sysupdate(sys,"ss");        # make sure state space data is there
diff --git a/scripts/control/system/sysdimensions.m b/scripts/control/system/sysdimensions.m
--- a/scripts/control/system/sysdimensions.m
+++ b/scripts/control/system/sysdimensions.m
@@ -63,21 +63,21 @@
 ## discrete.
 ## @math{yd(ii) = 0} if output @var{ii} is continuous
 ## @end table
 ## @seealso{sysgetsignals, sysgettsam}
 ## @end deftypefn
 
 function [n, nz, m, p, yd] = sysdimensions (sys, opt)
 
-  if(nargout > 5 | nargin < 1 | nargin > 2)
+  if (nargin < 1 || nargin > 2)
     print_usage ();
-  elseif(!isstruct(sys))
-    print_usage ();
-  elseif(nargin == 1)
+  elseif (! isstruct (sys))
+    error ("sysdimensions: expecting system structure as first argument");
+  elseif (nargin == 1)
     opt = "all";
   endif
 
   n = sys.n;
   nz = sys.nz;
   m = length(sysgetsignals(sys,"in"));
   p = length(sysgetsignals(sys,"out"));
   yd = sys.yd;
diff --git a/scripts/control/system/sysgetsignals.m b/scripts/control/system/sysgetsignals.m
--- a/scripts/control/system/sysgetsignals.m
+++ b/scripts/control/system/sysgetsignals.m
@@ -141,19 +141,17 @@
 ## Aout = y_2
 ## @end example
 ## @end deftypefn
 
 function [stname, inname, outname, yd] = sysgetsignals (sys, sigid, signum, strflg)
 
   ## Adapted from ss
 
-  if(nargin < 1 | nargin > 4 | nargout > 4)
-    print_usage ();
-  elseif(nargin > 1 & nargout > 1)
+  if (nargin < 1 || nargin > 4)
     print_usage ();
   elseif( ! isstruct(sys) )
     error("input argument must be a system data structure");
   endif
   if(nargin < 4)  strflg = 0; endif
   if(nargin == 1)
     sys = sysupdate(sys,"ss");          #make sure ss is up to date
     stname = sysgetsignals(sys,"st");
diff --git a/scripts/control/system/sysout.m b/scripts/control/system/sysout.m
--- a/scripts/control/system/sysout.m
+++ b/scripts/control/system/sysout.m
@@ -138,15 +138,15 @@ function retsys = sysout (sys, opt)
            sysdimensions(sys,"st"));
     if(dmat) disp(cc);          endif
 
     printf("D matrix: %d x %d\n",sysdimensions(sys,"out"),
            sysdimensions(sys,"in"));
     if(dmat)       disp(dd);         endif
   endif
 
-  if(nargout >= 1)
+  if (nargout >= 1)
     retsys = sys;
   endif
 
   ## restore global variable
 
 endfunction
diff --git a/scripts/control/system/tfout.m b/scripts/control/system/tfout.m
--- a/scripts/control/system/tfout.m
+++ b/scripts/control/system/tfout.m
@@ -25,17 +25,17 @@
 ## filter, polyderiv, polyinteg, polyout}
 ## @end deftypefn
 
 ## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
 ## Created: June 1995
 
 function tfout (num, denom, x)
 
-  if (nargin < 2 ) | (nargin > 3) | (nargout != 0 )
+  if (nargin < 2 || nargin > 3)
     print_usage ();
   endif
 
   if ( (!isvector(num)) | (!isvector(denom)) )
     error("tfout: first two argument must be vectors");
   endif
 
   if (nargin == 2)
diff --git a/scripts/control/system/ugain.m b/scripts/control/system/ugain.m
--- a/scripts/control/system/ugain.m
+++ b/scripts/control/system/ugain.m
@@ -26,14 +26,14 @@
 ## @seealso{hinfdemo, jet707}
 ## @end deftypefn
 
 ## Author: Kai P. Mueller <mueller@ifr.ing.tu-bs.de>
 ## Created: April 1998
 
 function outsys = ugain (n)
 
-  if (nargin != 1 || nargout > 1)
+  if (nargin != 1)
     print_usage ();
   endif
   outsys = ss ([], [], [], eye (n));
 
 endfunction
diff --git a/scripts/control/system/zpout.m b/scripts/control/system/zpout.m
--- a/scripts/control/system/zpout.m
+++ b/scripts/control/system/zpout.m
@@ -25,17 +25,17 @@
 ## filter, polyderiv, polyinteg, polyout}
 ## @end deftypefn
 
 ## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
 ## Created: June 1995
 
 function zpout (zer, pol, k, x)
 
-  if (nargin < 3 ) | (nargin > 4) | (nargout != 0 )
+  if (nargin < 3 || nargin > 4)
     print_usage ();
   endif
 
   if( !(isvector(zer) | isempty(zer)) | !(isvector(pol) | isempty(pol)) )
     error("zer, pol must be vectors or empty");
   endif
 
   if(!isscalar(k))
diff --git a/scripts/control/util/strappend.m b/scripts/control/util/strappend.m
--- a/scripts/control/util/strappend.m
+++ b/scripts/control/util/strappend.m
@@ -19,17 +19,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} strappend (@var{strlist}, @var{suffix})
 ## Append string @var{suffix} to each string in the list @var{strlist}.
 ## @end deftypefn
 
 function retval = strappend (strlist, suffix);
 
-  if (nargin != 2 || nargout > 1)
+  if (nargin != 2)
     print_usage ();
   elseif (! is_signal_list (strlist))
     error ("strlist must be a list of strings (see is_signal_list)");
   elseif (! (ischar (suffix) && rows (suffix) == 1))
     error ("suffix must be a single string");
   endif
 
   retval = {};
