# HG changeset patch
# User jwe
# Date 1045759597 0
#      Thu Feb 20 16:46:37 2003 +0000
# Node ID db5e0814277a383a4e8ded3e088f2d2bcf3b1a6c
# Parent  813effe14ee185c5e4ba8267cdce43890b8ae318
[project @ 2003-02-20 16:44:16 by jwe]

diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -17,17 +17,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### for more details.
 ### 
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA. 
 
 AC_INIT
-AC_REVISION($Revision: 1.412 $)
+AC_REVISION($Revision: 1.413 $)
 AC_PREREQ(2.52)
 AC_CONFIG_SRCDIR([src/octave.cc])
 AC_CONFIG_HEADER(config.h)
 
 AC_DEFINE(OCTAVE_SOURCE, 1, [Define if this is Octave.])
   
 OCTAVE_HOST_TYPE
 
@@ -414,16 +414,39 @@ if test "$with_fftw" = "yes"; then
   fi
 fi
 
 if test "$with_fftw" = yes; then
   FFT_DIR=''
   AC_DEFINE(HAVE_FFTW, 1, [Define if the FFTW library is available.])
 fi
 
+WITH_MPI=true
+AC_ARG_WITH(mpi,
+  [  --without-mpi           don't use MPI],
+  with_mpi=$withval, with_mpi=yes)
+
+mpi_lib=
+if test "$with_mpi" = yes; then
+  mpi_lib="mpi"
+elif test "$with_mpi" != no; then
+  mpi_lib="$with_mpi"
+fi
+
+MPI_LIBS=
+WITH_MPI=false
+if test -n "$mpi_lib"; then
+  AC_CHECK_LIB($mpi_lib, MPI_Init, [
+    AC_CHECK_HEADERS(mpi.h, [
+      WITH_MPI=true
+      MPI_LIBS="-l$mpi_lib"
+      LIBS="$MPI_LIBS $LIBS"
+      AC_DEFINE(HAVE_MPI, 1, [Define if MPI is available.])])])
+fi
+
 # ----------------------------------------------------------------------
 
 ### We need these before trying to find libf2c.
 
 OCTAVE_PROG_AR
 
 AC_PROG_RANLIB
 
@@ -1404,16 +1427,17 @@ Octave is now configured for $canonical_
   Installation prefix:  $prefix
   C compiler:           $CC $XTRA_CFLAGS $CFLAGS
   C++ compiler:         $CXX $XTRA_CXXFLAGS $CXXFLAGS
   Fortran compiler:     $FORT
   Fortran libraries:    $FLIBS
   BLAS libraries:       $BLAS_LIBS
   FFTW libraries:       $FFTW_LIBS
   HDF5 libraries:       $HDF5_LIBS
+  MPI libraries:        $MPI_LIBS
   LIBS:                 $LIBS
   Default pager:        $DEFAULT_PAGER
   gnuplot:              $GNUPLOT_BINARY
 
   Do internal array bounds checking:  $BOUNDS_CHECKING
   Build static libraries:             $STATIC_LIBS
   Build shared libraries:             $SHARED_LIBS
   Dynamic Linking:                    $ENABLE_DYNAMIC_LINKING $DL_API_MSG
diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,16 @@
+2003-02-19  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* interpreter/Makefile.in (MAN_BASE): Add octave-config.1 to the list.
+
+2003-02-19  Dirk Eddelbuettel <edd@debian.org>
+
+	* octave-config.1: New file.
+
 2003-01-11  Paul Kienzle <pkienzle@users.sf.net>
 
 	* interpreter/Makefile.in (munge-texi$(BUILD_EXEEXT)): Pass
 	$(BUILD_CXXFLAGS) and $(BUILD_LDFLAGS) to compiler.
 	(%.o : %.cc): Delete pattern rule.
 
 2003-01-03  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
diff --git a/libcruft/ChangeLog b/libcruft/ChangeLog
--- a/libcruft/ChangeLog
+++ b/libcruft/ChangeLog
@@ -1,8 +1,12 @@
+2003-02-20  Paul Kienzle <pkienzle@users.sf.net>
+
+	* dassl/ddaslv.f: Fortran doesn't use ; in statements.
+
 2003-02-18  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* libcruft/blas/dtbsv.f: New file.
 	* libcruft/lapack/dlatrs.f, libcruft/lapack/dtrti2.f,
 	libcruft/lapack/dtrtri.f, libcruft/lapack/ztrti2.f,
 	libcruft/lapack/ztrtri.f: New files.
 
 2003-02-04  David Bateman <dbateman@free.fr>
diff --git a/libcruft/dassl/ddaslv.f b/libcruft/dassl/ddaslv.f
--- a/libcruft/dassl/ddaslv.f
+++ b/libcruft/dassl/ddaslv.f
@@ -51,12 +51,12 @@ 100   CALL DGETRS('N', NEQ, 1, WM(NPD), 
 C
 C     DUMMY SECTION FOR MTYPE=3
 300   CONTINUE
       RETURN
 C
 C     BANDED MATRIX
 400   MEBAND=2*IWM(LML)+IWM(LMU)+1
       CALL DGBTRS ('N', NEQ, IWM(LML), IWM(LMU), 1, WM(NPD), MEBAND, 
-     *     IWM(LIPVT), DELTA, NEQ, INLPCK);
+     *     IWM(LIPVT), DELTA, NEQ, INLPCK)
       RETURN
 C------END OF SUBROUTINE DDASLV------
       END
diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -45,16 +45,17 @@ Software Foundation, 59 Temple Place - S
 #include "ov-ch-mat.h"
 #include "ov-complex.h"
 #include "ov-cx-mat.h"
 #include "ov-list.h"
 #include "ov-range.h"
 #include "ov-re-mat.h"
 #include "ov-scalar.h"
 #include "ov-str-mat.h"
+#include "ov-fcn-handle.h"
 #include "variables.h"
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_base_value, "<unknown type>");
 
 octave_value
 octave_base_value::subsref (const std::string&,
 			    const std::list<octave_value_list>&)
 {
@@ -397,16 +398,27 @@ octave_base_value::function_value (bool 
   octave_function *retval = 0;
 
   if (! silent)
     gripe_wrong_type_arg ("octave_base_value::function_value()",
 			  type_name ());
   return retval;
 }
 
+octave_fcn_handle
+octave_base_value::fcn_handle_value (bool silent)
+{
+  octave_fcn_handle retval;
+
+  if (! silent)
+    gripe_wrong_type_arg ("octave_base_value::fcn_handle_value()",
+			  type_name ());
+  return retval;
+}
+
 octave_value_list
 octave_base_value::list_value (void) const
 {
   octave_value_list retval;
   gripe_wrong_type_arg ("octave_base_value::list_value()", type_name ());
   return retval;
 }
 
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -206,16 +206,18 @@ public:
   string_vector map_keys (void) const;
 
   octave_stream stream_value (void) const;
 
   int stream_number (void) const;
 
   octave_function *function_value (bool silent);
 
+  octave_fcn_handle fcn_handle_value (bool silent);
+
   octave_value_list list_value (void) const;
 
   bool bool_value (void) const;
 
   boolMatrix bool_matrix_value (void) const;
 
   octave_value convert_to_str (void) const;
 
diff --git a/src/ov-fcn-handle.cc b/src/ov-fcn-handle.cc
new file mode 100644
--- /dev/null
+++ b/src/ov-fcn-handle.cc
@@ -0,0 +1,177 @@
+/*
+
+Copyright (C) 2003 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 2, or (at your option) any
+later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, write to the Free
+Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+
+*/
+
+#if defined (__GNUG__) && defined (USE_PRAGMA_INTERFACE_IMPLEMENTATION)
+#pragma implementation
+#endif
+
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include <iostream>
+
+#include "defun.h"
+#include "oct-map.h"
+#include "ov-base.h"
+#include "ov-fcn-handle.h"
+#include "pr-output.h"
+#include "variables.h"
+
+DEFINE_OCTAVE_ALLOCATOR (octave_fcn_handle);
+
+DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_fcn_handle, "function handle");
+
+void
+octave_fcn_handle::print (std::ostream& os, bool pr_as_read_syntax) const
+{
+  print_raw (os, pr_as_read_syntax);
+  newline (os);
+}
+
+void
+octave_fcn_handle::print_raw (std::ostream& os, bool pr_as_read_syntax) const
+{
+  indent (os);
+  os << "@" << name ();
+}
+
+octave_value
+make_fcn_handle (const std::string& nm)
+{
+  octave_value retval;
+
+  octave_function *f = lookup_function (nm);
+
+  if (f)
+    {
+      octave_fcn_handle fh (f, nm);
+
+      retval = octave_value (fh);
+    }
+  else
+    error ("error creating function handle \"@%s\"", nm.c_str ());
+
+  return retval;
+}
+
+DEFUN (functions, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} functions (@var{fcn_handle})\n\
+Return a struct containing information about the function handle\n\
+@var{fcn_handle}.\n\
+@end deftypefn")
+{
+  octave_value retval;
+
+  if (args.length () == 1)
+    {
+      octave_fcn_handle fh = args(0).fcn_handle_value ();
+
+      if (! error_state)
+	{
+	  octave_function *fcn = fh.function_value (true);
+
+	  if (fcn)
+	    {
+	      Octave_map m;
+
+	      m ["function"](0) = fh.name ();
+
+	      if (fcn->is_nested_function ())
+		m ["type"](0) = "subfunction";
+	      else
+		m ["type"](0) = "simple";
+
+	      std::string nm = fcn->fcn_file_name ();
+
+	      if (nm.empty ())
+		m ["file"](0) = "built-in function";
+	      else
+		m ["file"](0) = nm;
+
+	      retval = m;
+	    }
+	  else
+	    error ("functions: invalid function handle object");
+	}
+      else
+	error ("functions: argument must be a function handle object");
+    }
+  else
+    print_usage ("functions");
+
+  return retval;
+}
+
+DEFUN (func2str, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} func2str (@var{fcn_handle})\n\
+Return a string containing the name of the function referenced by\n\
+the function handle @var{fcn_handle}.\n\
+@end deftypefn")
+{
+  octave_value retval;
+
+  if (args.length () == 1)
+    {
+      octave_fcn_handle fh = args(0).fcn_handle_value ();
+
+      if (! error_state)
+	retval = fh.name ();
+      else
+	error ("func2str: expecting function handle as first argument");
+    }
+  else
+    print_usage ("func2str");
+
+  return retval;
+}
+
+DEFUN (str2func, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} str2func (@var{fcn_name})\n\
+Return a function handle constructed from the string @var{fcn_name}.\n\
+@end deftypefn")
+{
+  octave_value retval;
+
+  if (args.length () == 1)
+    {
+      std::string nm = args(0).string_value ();
+
+      if (! error_state)
+	retval = make_fcn_handle (nm);
+      else
+	error ("str2func: expecting string as first argument");
+    }
+  else
+    print_usage ("str2func");
+
+  return retval;
+}
+
+/*
+;;; Local Variables: ***
+;;; mode: C++ ***
+;;; End: ***
+*/
diff --git a/src/ov-fcn-handle.h b/src/ov-fcn-handle.h
new file mode 100644
--- /dev/null
+++ b/src/ov-fcn-handle.h
@@ -0,0 +1,101 @@
+/*
+
+Copyright (C) 2003 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 2, or (at your option) any
+later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, write to the Free
+Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+
+*/
+
+#if !defined (octave_fcn_handle_h)
+#define octave_fcn_handle_h 1
+
+#if defined (__GNUG__) && defined (USE_PRAGMA_INTERFACE_IMPLEMENTATION)
+#pragma interface
+#endif
+
+#include <iostream>
+#include <string>
+
+#include "oct-alloc.h"
+
+#include "ov-base.h"
+#include "ov-fcn.h"
+#include "symtab.h"
+
+// Function handles.
+
+class
+octave_fcn_handle : public octave_base_value
+{
+public:
+
+  octave_fcn_handle (octave_function *f = 0,
+		     const std::string& n = std::string ())
+    : fcn (f), nm (n) { }
+
+  octave_fcn_handle (const octave_fcn_handle& fh)
+    : fcn (fh.fcn), nm (fh.nm) { }
+
+  octave_fcn_handle& operator = (const octave_fcn_handle& fh)
+    {
+      if (this != &fh)
+	{
+	  fcn = fh.fcn;
+	  nm  = fh.nm;
+	}
+
+      return *this;
+    }
+
+  ~octave_fcn_handle (void) { }
+
+  bool is_defined (void) const { return fcn; }
+
+  octave_function *function_value (bool) { return fcn; }
+
+  octave_fcn_handle fcn_handle_value (bool) { return *this; }
+
+  bool print_as_scalar (void) const { return true; }
+
+  void print (std::ostream& os, bool pr_as_read_syntax = false) const;
+
+  void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
+
+  std::string name (void) const { return nm; }
+
+private:
+
+  // The function we are handling.
+  octave_function *fcn;
+
+  // The name of the handle.
+  std::string nm;
+
+  DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
+
+  DECLARE_OCTAVE_ALLOCATOR
+};
+
+extern octave_value make_fcn_handle (const std::string& nm);
+
+#endif
+
+/*
+;;; Local Variables: ***
+;;; mode: C++ ***
+;;; End: ***
+*/
diff --git a/src/ov-fcn.h b/src/ov-fcn.h
--- a/src/ov-fcn.h
+++ b/src/ov-fcn.h
@@ -66,16 +66,18 @@ public:
   virtual void mark_fcn_file_up_to_date (const octave_time&) { }
 
   virtual octave_time time_parsed (void) const
     { return octave_time (static_cast<time_t> (0)); }
 
   virtual octave_time time_checked (void) const
     { return octave_time (static_cast<time_t> (0)); }
 
+  virtual bool is_nested_function (void) const { return false; }
+
   std::string name (void) const { return my_name; }
 
   std::string doc_string (void) const { return doc; }
 
   virtual void unload (void) { }
 
   virtual void accept (tree_walker&) { }
 
diff --git a/src/ov-usr-fcn.cc b/src/ov-usr-fcn.cc
--- a/src/ov-usr-fcn.cc
+++ b/src/ov-usr-fcn.cc
@@ -114,22 +114,19 @@ octave_user_function::define_ret_list (t
 
   if (ret_list && ret_list->takes_varargs ())
     vr_list = new tree_va_return_list;
  
   return this;
 }
 
 void
-octave_user_function::stash_fcn_file_name (void)
+octave_user_function::stash_fcn_file_name (const std::string& nm)
 {
-  if (fcn_name.empty ())
-    file_name = "";
-  else
-    file_name = fcn_file_in_path (fcn_name);
+  file_name = nm;
 }
 
 void
 octave_user_function::mark_as_system_fcn_file (void)
 {
   if (! file_name.empty ())
     {
       // We really should stash the whole path to the file we found,
diff --git a/src/ov-usr-fcn.h b/src/ov-usr-fcn.h
--- a/src/ov-usr-fcn.h
+++ b/src/ov-usr-fcn.h
@@ -62,17 +62,17 @@ public:
   ~octave_user_function (void);
 
   octave_function *function_value (bool) { return this; }
 
   octave_user_function *define_param_list (tree_parameter_list *t);
 
   octave_user_function *define_ret_list (tree_parameter_list *t);
 
-  void stash_fcn_file_name (void);
+  void stash_fcn_file_name (const std::string& nm);
 
   void stash_leading_comment (octave_comment_list *lc) { lead_comm = lc; }
 
   void stash_trailing_comment (octave_comment_list *tc) { trail_comm = tc; }
 
   void mark_fcn_file_up_to_date (const octave_time& t) { t_checked = t; }
 
   void stash_fcn_file_time (const octave_time& t)
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -796,16 +796,22 @@ octave_value::stream_number (void) const
 }
 
 octave_function *
 octave_value::function_value (bool silent)
 {
   return rep->function_value (silent);
 }
 
+octave_fcn_handle
+octave_value::fcn_handle_value (bool silent)
+{
+  return rep->fcn_handle_value (silent);
+}
+
 octave_value_list
 octave_value::list_value (void) const
 {
   return rep->list_value ();
 }
 
 ColumnVector
 octave_value::column_vector_value (bool force_string_conv,
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -479,16 +479,18 @@ public:
     { return rep->map_keys (); }
 
   virtual octave_stream stream_value (void) const;
 
   virtual int stream_number (void) const;
 
   virtual octave_function *function_value (bool silent = false);
 
+  virtual octave_fcn_handle fcn_handle_value (bool silent = false);
+
   virtual octave_value_list list_value (void) const;
 
   virtual bool bool_value (void) const
     { return rep->bool_value (); }
 
   virtual boolMatrix bool_matrix_value (void) const
     { return rep->bool_matrix_value (); }
 
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -2578,17 +2578,17 @@ frob_function (tree_identifier *id, octa
 	    return 0;
 
 	  id_name = id->name ();
 	}
 
       octave_time now;
 
       fcn->stash_function_name (id_name);
-      fcn->stash_fcn_file_name ();
+      fcn->stash_fcn_file_name (curr_fcn_file_full_name);
       fcn->stash_fcn_file_time (now);
       fcn->mark_as_system_fcn_file ();
 
       if (Vwarn_future_time_stamp)
 	{
 	  std::string nm = fcn->fcn_file_name ();
 
 	  file_stat fs (nm);
diff --git a/src/pt-fcn-handle.cc b/src/pt-fcn-handle.cc
new file mode 100644
--- /dev/null
+++ b/src/pt-fcn-handle.cc
@@ -0,0 +1,86 @@
+/*
+
+Copyright (C) 2003 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 2, or (at your option) any
+later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, write to the Free
+Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+
+*/
+
+#if defined (__GNUG__) && defined (USE_PRAGMA_INTERFACE_IMPLEMENTATION)
+#pragma implementation
+#endif
+
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include <iostream>
+
+#include "error.h"
+#include "oct-obj.h"
+#include "ov-fcn-handle.h"
+#include "pt-fcn-handle.h"
+#include "pager.h"
+#include "pt-walk.h"
+
+void
+tree_fcn_handle::print (std::ostream& os, bool pr_as_read_syntax,
+			bool pr_orig_text)
+{
+  print_raw (os, pr_as_read_syntax, pr_orig_text);
+}
+
+void
+tree_fcn_handle::print_raw (std::ostream& os, bool pr_as_read_syntax,
+			    bool pr_orig_text) 
+{
+  os << ((pr_as_read_syntax || pr_orig_text) ? "@" : "") << nm;
+}
+
+octave_value
+tree_fcn_handle::rvalue (void)
+{
+  MAYBE_DO_BREAKPOINT;
+
+  return make_fcn_handle (nm);
+}
+
+
+octave_value_list
+tree_fcn_handle::rvalue (int nargout)
+{
+  octave_value_list retval;
+
+  if (nargout > 1)
+    error ("invalid number of output arguments for function handle expression");
+  else
+    retval = rvalue ();
+
+  return retval;
+}
+
+void
+tree_fcn_handle::accept (tree_walker& tw)
+{
+  tw.visit_fcn_handle (*this);
+}
+
+/*
+;;; Local Variables: ***
+;;; mode: C++ ***
+;;; End: ***
+*/
diff --git a/src/pt-fcn-handle.h b/src/pt-fcn-handle.h
new file mode 100644
--- /dev/null
+++ b/src/pt-fcn-handle.h
@@ -0,0 +1,89 @@
+/*
+
+Copyright (C) 2003 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 2, or (at your option) any
+later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, write to the Free
+Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+
+*/
+
+#if !defined (octave_tree_fcn_handle_h)
+#define octave_fcn_handle_h 1
+
+#if defined (__GNUG__) && defined (USE_PRAGMA_INTERFACE_IMPLEMENTATION)
+#pragma interface
+#endif
+
+#include <iostream>
+#include <string>
+
+#include "pt-bp.h"
+#include "pt-exp.h"
+
+class octave_value_list;
+
+class tree_walker;
+
+#include "ov.h"
+
+class
+tree_fcn_handle : public tree_expression
+{
+public:
+
+  tree_fcn_handle (int l = -1, int c = -1)
+    : tree_expression (l, c), nm () { }
+
+  tree_fcn_handle (const std::string& n, int l = -1, int c = -1)
+    : tree_expression (l, c), nm (n) { }
+
+  ~tree_fcn_handle (void) { }
+
+  bool has_magic_end (void) const { return false; }
+
+  void print (std::ostream& os, bool pr_as_read_syntax = false,
+	      bool pr_orig_txt = true);
+
+  void print_raw (std::ostream& os, bool pr_as_read_syntax = false,
+		  bool pr_orig_txt = true);
+
+  bool rvalue_ok (void) const { return true; }
+
+  octave_value rvalue (void);
+
+  octave_value_list rvalue (int nargout);
+
+  void accept (tree_walker& tw);
+
+private:
+
+  // The name of this function handle.
+  std::string nm;
+
+  // No copying!
+
+  tree_fcn_handle (const tree_fcn_handle&);
+
+  tree_fcn_handle& operator = (const tree_fcn_handle&);
+};
+
+#endif
+
+/*
+;;; Local Variables: ***
+;;; mode: C++ ***
+;;; End: ***
+*/
