# HG changeset patch
# User Rik <rik@octave.org>
# Date 1479154322 28800
#      Mon Nov 14 12:12:02 2016 -0800
# Node ID c4d80b9d28986a74335f08111c531d3cf9f0eaaf
# Parent  39f39eb4e4768c5dfa61cee9c96b71f39c07715f
maint: Capitalize variable names appearing in error() messages of m-files.

* scripts/audio/@audioplayer/get.m, scripts/audio/@audiorecorder/get.m,
interp1.m, narginchk.m, nargoutchk.m, randi.m, __fltk_file_filter__.m,
imshow.m, rgbplot.m, javachk.m, usejava.m, condest.m, unpack.m, pqpnonneg.m,
savepath.m, default_prefix.m, get_forge_download.m, get_forge_pkg.m,
installed_packages.m, annotation.m, daspect.m, pbaspect.m, isocaps.m, pan.m,
printd.m, __gnuplot_draw_axes__.m, rotate.m, rotate3d.m, zoom.m, splinefit.m,
addpref.m, getpref.m, rmpref.m, eigs.m, normrnd.m, t_test_regression.m:
Capitalize variable names appearing in error() messages.

diff --git a/scripts/audio/@audioplayer/get.m b/scripts/audio/@audioplayer/get.m
--- a/scripts/audio/@audioplayer/get.m
+++ b/scripts/audio/@audioplayer/get.m
@@ -43,13 +43,13 @@ function retval = get (varargin)
     if (ischar (pnames))
       retval = getfield (properties, pnames);
     elseif (iscellstr (pnames))
       retval = cell (size (pnames));
       for i = 1:numel (pnames)
         retval{i} = getfield (properties, pnames{i});
       endfor
     else
-      error ("@audioplayer/get: invalid name argument");
+      error ("@audioplayer/get: invalid NAME argument");
     endif
   endif
 
 endfunction
diff --git a/scripts/audio/@audiorecorder/get.m b/scripts/audio/@audiorecorder/get.m
--- a/scripts/audio/@audiorecorder/get.m
+++ b/scripts/audio/@audiorecorder/get.m
@@ -43,13 +43,13 @@ function retval = get (varargin)
     if (ischar (pnames))
       retval = getfield (properties, pnames);
     elseif (iscellstr (pnames))
       retval = cell (size (pnames));
       for i = 1:numel (pnames)
         retval{i} = getfield (properties, pnames{i});
       endfor
     else
-      error ("@audiorecorder/get: invalid name argument");
+      error ("@audiorecorder/get: invalid NAME argument");
     endif
   endif
 
 endfunction
diff --git a/scripts/general/interp1.m b/scripts/general/interp1.m
--- a/scripts/general/interp1.m
+++ b/scripts/general/interp1.m
@@ -233,17 +233,17 @@ function yi = interp1 (x, y, varargin)
     jumps = x(1:end-1) == x(2:end);
     have_jumps = any (jumps);
     if (have_jumps)
       if (strcmp (method, "linear") || strcmp (method, ("nearest")))
         if (any (jumps(1:nx-2) & jumps(2:nx-1)))
           warning ("interp1: multiple discontinuities at the same X value");
         endif
       else
-        error ("interp1: discontinuities not supported for method '%s'",
+        error ("interp1: discontinuities not supported for METHOD '%s'",
                                                                    method);
       endif
     endif
   endif
 
   ## Proceed with interpolating by all methods.
   switch (method)
 
@@ -361,17 +361,17 @@ function yi = interp1 (x, y, varargin)
         y = shiftdim (y, 1);
         yi = spline (x, y, reshape (xi, szx));
         if (! isvector (y))
           yi = shiftdim (yi, 1);
         endif
       endif
 
     otherwise
-      error ("interp1: invalid method '%s'", method);
+      error ("interp1: invalid METHOD '%s'", METHOD);
 
   endswitch
 
   if (! ispp && isnumeric (extrap))
     ## determine which values are out of range and set them to extrap,
     ## unless extrap == "extrap".
     minx = min (x(1), x(nx));
     maxx = max (x(1), x(nx));
diff --git a/scripts/general/narginchk.m b/scripts/general/narginchk.m
--- a/scripts/general/narginchk.m
+++ b/scripts/general/narginchk.m
@@ -35,21 +35,21 @@
 
 ## Author: CarnÃ« Draug <carandraug+dev@gmail.com>
 
 function narginchk (minargs, maxargs)
 
   if (nargin != 2)
     print_usage;
   elseif (! isnumeric (minargs) || ! isscalar (minargs))
-    error ("narginchk: minargs must be a numeric scalar");
+    error ("narginchk: MINARGS must be a numeric scalar");
   elseif (! isnumeric (maxargs) || ! isscalar (maxargs))
-    error ("narginchk: maxargs must be a numeric scalar");
+    error ("narginchk: MAXARGS must be a numeric scalar");
   elseif (minargs > maxargs)
-    error ("narginchk: minargs cannot be larger than maxargs");
+    error ("narginchk: MINARGS cannot be larger than MAXARGS");
   endif
 
   args = evalin ("caller", "nargin;");
 
   if (args < minargs)
     error ("narginchk: not enough input arguments");
   elseif (args > maxargs)
     error ("narginchk: too many input arguments");
diff --git a/scripts/general/nargoutchk.m b/scripts/general/nargoutchk.m
--- a/scripts/general/nargoutchk.m
+++ b/scripts/general/nargoutchk.m
@@ -79,21 +79,21 @@ function msg = nargoutchk (minargs, maxa
     elseif (isempty (msg.message))
       ## Compatibility: Matlab returns a 0x1 empty struct when nargoutchk passes
       msg = resize (msg, 0, 1);
     endif
 
   elseif (nargout == 0 && nargin == 2)
 
     if (! isnumeric (minargs) || ! isscalar (minargs))
-      error ("nargoutchk: minargs must be a numeric scalar");
+      error ("nargoutchk: MINARGS must be a numeric scalar");
     elseif (! isnumeric (maxargs) || ! isscalar (maxargs))
-      error ("nargoutchk: maxargs must be a numeric scalar");
+      error ("nargoutchk: MAXARGS must be a numeric scalar");
     elseif (minargs > maxargs)
-      error ("nargoutchk: minargs cannot be larger than maxargs");
+      error ("nargoutchk: MINARGS cannot be larger than MAXARGS");
     endif
 
     args = evalin ("caller", "nargout;");
 
     if (args < minargs)
       error ("nargoutchk: Not enough output arguments.");
     elseif (args > maxargs)
       error ("nargoutchk: Too many output arguments.");
diff --git a/scripts/general/randi.m b/scripts/general/randi.m
--- a/scripts/general/randi.m
+++ b/scripts/general/randi.m
@@ -100,17 +100,17 @@ function ri = randi (bounds, varargin)
   if (! strcmp (rclass, "double"))
     if (strfind (rclass, "int"))
       maxval = double (intmax (rclass));
       minval = double (intmin (rclass));
     elseif (strcmp (rclass, "single"))
       maxval = double (flintmax (rclass));
       minval = -maxval;
     else
-      error ("randi: unknown requested output class '%s'", rclass);
+      error ("randi: unknown requested output CLASS '%s'", rclass);
     endif
     if (imax > maxval)
       warning (["randi: integer IMAX exceeds requested type.  ", ...
                 "Values might be truncated to requested type."]);
     elseif (imin < minval)
       warning (["randi: integer IMIN exceeds requested type.  ", ...
                 " Values might be truncated to requested type."]);
     endif
diff --git a/scripts/gui/private/__fltk_file_filter__.m b/scripts/gui/private/__fltk_file_filter__.m
--- a/scripts/gui/private/__fltk_file_filter__.m
+++ b/scripts/gui/private/__fltk_file_filter__.m
@@ -23,17 +23,17 @@
 
 ## Author: Michael Goffioul
 
 function retval = __fltk_file_filter__ (file_filter)
 
   retval = "";
   [r, c] = size (file_filter);
   if ((c == 0) || (c > 2))
-    error ("file filter cell must have 1 or 2 columns");
+    error ("file FILTER cell must have 1 or 2 columns");
   endif
   fltk_str = "";
   for idx = 1 : r
 
     curr_ext = file_filter{idx, 1};
     curr_ext = ostrsplit (curr_ext, ";");
 
     if (length (curr_ext) > 1)
diff --git a/scripts/image/imshow.m b/scripts/image/imshow.m
--- a/scripts/image/imshow.m
+++ b/scripts/image/imshow.m
@@ -86,17 +86,17 @@ function h = imshow (im, varargin)
     [im, map] = imread (im);
     indexed = true;
     colormap (map);
   endif
 
   nd = ndims (im);
 
   if (! ((isnumeric (im) || islogical (im)) && (nd == 2 || nd == 3)))
-    error ("imshow: IM must be an image or the filename of an image");
+    error ("imshow: IM must be an image or the FILENAME of an image");
   endif
 
   if (nd == 2)
     if (! indexed)
       colormap (gray ());
     endif
   elseif (size (im, 3) == 3)
     if (ismember (class (im), {"uint8", "uint16", "double", "single"}))
diff --git a/scripts/image/rgbplot.m b/scripts/image/rgbplot.m
--- a/scripts/image/rgbplot.m
+++ b/scripts/image/rgbplot.m
@@ -62,17 +62,17 @@ function h = rgbplot (cmap, style = "pro
       htmp = plot (x,cmap(:,1),"r", x,cmap(:,2),"g", x,cmap(:,3),"b");
       set (gca (), "ytick", 0:0.1:1);
       set (gca (), "xlim", [0 rows(cmap)]);
     case "composite"
       htmp = image (1:rows (cmap));
       set (gca, "ytick", []);
       colormap (cmap);
     otherwise
-      error ("rgbplot: unknown style '%s'", style);
+      error ("rgbplot: unknown STYLE '%s'", style);
   endswitch
   xlabel ("color index");
 
   if (nargout > 0)
     h = htmp;
   endif
 
 endfunction
diff --git a/scripts/java/javachk.m b/scripts/java/javachk.m
--- a/scripts/java/javachk.m
+++ b/scripts/java/javachk.m
@@ -104,17 +104,17 @@ function msg = javachk (feature, compone
         chk = true;
       end_try_catch
     case "swing"
       try
         dum = methods ("javax.swing.Popup");
         chk = true;
       end_try_catch
     otherwise
-      error ("javachk: unrecognized feature '%s', can be one of 'awt'|'desktop'|'jvm'|'swing'\n", feature);
+      error ("javachk: unrecognized FEATURE '%s', can be one of 'awt'|'desktop'|'jvm'|'swing'\n", feature);
   endswitch
 
   if (! chk)
     ## Desired feature not present
     if (nargout >= 1)
       msg.message = sprintf ("javachk: %s is not supported", feature);
       msg.identifier = component;
     else
diff --git a/scripts/java/usejava.m b/scripts/java/usejava.m
--- a/scripts/java/usejava.m
+++ b/scripts/java/usejava.m
@@ -72,17 +72,17 @@ function retval = usejava (feature)
         retval = true;
       end_try_catch
     case "swing"
       try
         dum = methods ("javax.swing.Popup");
         retval = ! javaMethod ("isHeadless", "java.awt.GraphicsEnvironment");
       end_try_catch
     otherwise
-      error ("usejava: unrecognized feature '%s'", feature);
+      error ("usejava: unrecognized FEATURE '%s'", feature);
   endswitch
 
 endfunction
 
 
 %!assert (usejava ("desktop"), false)
 
 %!testif HAVE_JAVA
diff --git a/scripts/linear-algebra/condest.m b/scripts/linear-algebra/condest.m
--- a/scripts/linear-algebra/condest.m
+++ b/scripts/linear-algebra/condest.m
@@ -226,30 +226,30 @@ function [est, v] = condest (varargin)
   [Ainv_norm, v, w] = normest1 (solve, t, [], varargin{4:end});
 
   est = Anorm * Ainv_norm;
   v = w / norm (w, 1);
 
 endfunction
 
 function value = solve_sparse (flag, x, n, real_op, L , U , P , Pc)
-  switch flag
+  switch (flag)
     case "dim"
       value = n;
     case "real"
       value = real_op;
     case "notransp"
       value = P' * (L' \ (U' \ (Pc * x)));
     case "transp"
       value = Pc' * (U \ (L \ (P * x)));
   endswitch
 endfunction
 
 function value = solve_not_sparse (flag, x, n, real_op, L, U, P)
-  switch flag
+  switch (flag)
     case "dim"
       value = n;
     case "real"
       value = real_op;
     case "notransp"
       value = P' * (L' \ (U' \ x));
     case "transp"
       value = U \ (L \ (P * x));
diff --git a/scripts/miscellaneous/unpack.m b/scripts/miscellaneous/unpack.m
--- a/scripts/miscellaneous/unpack.m
+++ b/scripts/miscellaneous/unpack.m
@@ -85,17 +85,17 @@ function filelist = unpack (file, dir = 
   if (ischar (file))
     file = cellstr (file);
   endif
   if (numel (file) == 1)
     if (isempty (strfind (file{1}, "://")))
       ## FIXME: The above code is not a perfect test for a URL
       gfile = glob (file);
       if (isempty (gfile))
-        error ('unpack: file "%s" not found', file{1});
+        error ('unpack: FILE "%s" not found', file{1});
       else
         file = gfile;
       endif
     endif
   endif
 
   ## Recursively unpack cellstr arrays one file at a time
   if (numel (file) > 1)
diff --git a/scripts/optimization/pqpnonneg.m b/scripts/optimization/pqpnonneg.m
--- a/scripts/optimization/pqpnonneg.m
+++ b/scripts/optimization/pqpnonneg.m
@@ -16,27 +16,31 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {} {@var{x} =} pqpnonneg (@var{c}, @var{d})
 ## @deftypefnx {} {@var{x} =} pqpnonneg (@var{c}, @var{d}, @var{x0})
+## @deftypefnx {} {@var{x} =} pqpnonneg (@var{c}, @var{d}, @var{x0}, @var{options})
 ## @deftypefnx {} {[@var{x}, @var{minval}] =} pqpnonneg (@dots{})
 ## @deftypefnx {} {[@var{x}, @var{minval}, @var{exitflag}] =} pqpnonneg (@dots{})
 ## @deftypefnx {} {[@var{x}, @var{minval}, @var{exitflag}, @var{output}] =} pqpnonneg (@dots{})
 ## @deftypefnx {} {[@var{x}, @var{minval}, @var{exitflag}, @var{output}, @var{lambda}] =} pqpnonneg (@dots{})
 ## Minimize @code{1/2*x'*c*x + d'*x} subject to @code{@var{x} >= 0}.
 ##
-## @var{c} ## and @var{d} must be real, and @var{c} must be symmetric and
+## @var{c} and @var{d} must be real, and @var{c} must be symmetric and
 ## positive definite.
 ##
 ## @var{x0} is an optional initial guess for @var{x}.
 ##
+## @var{options} is an options structure to change the behavior of the
+## algorithm.
+##
 ## Outputs:
 ##
 ## @itemize @bullet
 ## @item minval
 ##
 ## The minimum attained model value, 1/2*xmin'*c*xmin + d'*xmin
 ##
 ## @item exitflag
diff --git a/scripts/path/savepath.m b/scripts/path/savepath.m
--- a/scripts/path/savepath.m
+++ b/scripts/path/savepath.m
@@ -76,17 +76,17 @@ function retval = savepath (file)
     ## Insert in the middle.
     pre = filelines(1:startline-1);
     post = filelines(endline+1:end);
   endif
 
   ## Write the results.
   [fid, msg] = fopen (file, "wt");
   if (fid < 0)
-    error ("savepath: unable to open file for writing, %s, %s", file, msg);
+    error ("savepath: unable to open FILE for writing, %s, %s", file, msg);
   endif
   unwind_protect
     fprintf (fid, "%s\n", pre{:});
 
     ## Remove the portion of the path defined via the command line
     ## and/or the environment.
     workingpath = parsepath (path);
     cmd_line_path = parsepath (command_line_path ());
diff --git a/scripts/pkg/private/default_prefix.m b/scripts/pkg/private/default_prefix.m
--- a/scripts/pkg/private/default_prefix.m
+++ b/scripts/pkg/private/default_prefix.m
@@ -16,17 +16,17 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {} {[@var{prefix}, @var{archprefix} =} default_prefix (@var{global_install})
 ## Undocumented internal function.
 ## @end deftypefn
 
-function [prefix, archprefix] = default_prefix (global_install, desc)
+function [prefix, archprefix] = default_prefix (global_install)
 
   if (global_install)
     prefix = fullfile (OCTAVE_HOME (), "share", "octave", "packages");
     if (nargin == 2)
       archprefix = fullfile (__octave_config_info__ ("libdir"), "octave",
                              "packages", [desc.name "-" desc.version]);
     else
       archprefix = fullfile (__octave_config_info__ ("libdir"), "octave",
diff --git a/scripts/pkg/private/get_forge_download.m b/scripts/pkg/private/get_forge_download.m
--- a/scripts/pkg/private/get_forge_download.m
+++ b/scripts/pkg/private/get_forge_download.m
@@ -13,17 +13,17 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ## GNU General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {} {[@var{url}, @var{local_file}] =} list_forge_packages ()
+## @deftypefn {} {[@var{url}, @var{local_file}] =} get_forge_download (@var{name})
 ## Undocumented internal function.
 ## @end deftypefn
 
 function [url, local_file] = get_forge_download (name)
   [ver, url] = get_forge_pkg (name);
   local_file = [name "-" ver ".tar.gz"];
 endfunction
 
diff --git a/scripts/pkg/private/get_forge_pkg.m b/scripts/pkg/private/get_forge_pkg.m
--- a/scripts/pkg/private/get_forge_pkg.m
+++ b/scripts/pkg/private/get_forge_pkg.m
@@ -26,17 +26,17 @@
 ## @end deftypefn
 
 function [ver, url] = get_forge_pkg (name)
 
   ## Verify that name is valid.
   if (! (ischar (name) && rows (name) == 1 && ndims (name) == 2))
     error ("get_forge_pkg: package NAME must be a string");
   elseif (! all (isalnum (name) | name == "-" | name == "." | name == "_"))
-    error ("get_forge_pkg: invalid package name: %s", name);
+    error ("get_forge_pkg: invalid package NAME: %s", name);
   endif
 
   name = tolower (name);
 
   ## Try to download package's index page.
   [html, succ] = urlread (sprintf ("http://packages.octave.org/%s/index.html",
                                    name));
   if (succ)
diff --git a/scripts/pkg/private/installed_packages.m b/scripts/pkg/private/installed_packages.m
--- a/scripts/pkg/private/installed_packages.m
+++ b/scripts/pkg/private/installed_packages.m
@@ -13,17 +13,17 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ## GNU General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {} {[@var{out1}, @var{out2}] =} installed_packages (@var{local_list}, @var{global_list})
+## @deftypefn {} {[@var{out1}, @var{out2}] =} installed_packages (@var{local_list}, @var{global_list}, @var{pkgname})
 ## Undocumented internal function.
 ## @end deftypefn
 
 function [out1, out2] = installed_packages (local_list, global_list, pkgname = {})
 
   ## Get the list of installed packages.
   try
     local_packages = load (local_list).local_packages;
@@ -53,17 +53,17 @@ function [out1, out2] = installed_packag
       installed_pkgs_lst = {};
     else
       installed_names = installed_names(idx);
       installed_pkgs_lst = installed_pkgs_lst(idx);
     endif
   endif
 
   ## Now check if the package is loaded.
-  ## FIXME: couldn't dir_in_loadpath() be used here?
+  ## FIXME: Couldn't dir_in_loadpath() be used here?
   tmppath = strrep (path (), "\\", "/");
   for i = 1:numel (installed_pkgs_lst)
     if (strfind (tmppath, strrep (installed_pkgs_lst{i}.dir, '\', '/')))
       installed_pkgs_lst{i}.loaded = true;
     else
       installed_pkgs_lst{i}.loaded = false;
     endif
   endfor
diff --git a/scripts/plot/appearance/annotation.m b/scripts/plot/appearance/annotation.m
--- a/scripts/plot/appearance/annotation.m
+++ b/scripts/plot/appearance/annotation.m
@@ -203,17 +203,17 @@ function varargout = annotation (varargi
         lims = varargin{1};
         varargin(1) = [];
 
         if (! isvector (lims) || length (lims) != 4)
           error ("annotation: POS must be a 4-element vector");
         endif
       endif
     otherwise
-      error ("annotation: unknown annotation type %s", objtype);
+      error ("annotation: unknown annotation TYPE %s", objtype);
   endswitch
 
   ## options
   opts = varargin;
   nopts = numel (opts);
   if (! isempty (opts))
     if (fix (nopts/2) != nopts/2
         || ! all (cellfun (@ischar, opts(1:2:end))))
diff --git a/scripts/plot/appearance/daspect.m b/scripts/plot/appearance/daspect.m
--- a/scripts/plot/appearance/daspect.m
+++ b/scripts/plot/appearance/daspect.m
@@ -82,17 +82,17 @@ function daratio = daspect (varargin)
       switch (arg)
         case "auto"
           set (hax, "dataaspectratiomode", "auto");
         case "manual"
           set (hax, "dataaspectratiomode", "manual");
         case "mode"
           daratio = get (hax, "dataaspectratiomode");
         otherwise
-          error ("daspect: Invalid mode <%s>", arg);
+          error ("daspect: Invalid MODE <%s>", arg);
       endswitch
     else
       print_usage ();
     endif
   endif
 
 endfunction
 
diff --git a/scripts/plot/appearance/pbaspect.m b/scripts/plot/appearance/pbaspect.m
--- a/scripts/plot/appearance/pbaspect.m
+++ b/scripts/plot/appearance/pbaspect.m
@@ -83,17 +83,17 @@ function pbratio = pbaspect (varargin)
       switch (arg)
         case "auto"
           set (hax, "plotboxaspectratiomode", "auto");
         case "manual"
           set (hax, "plotboxaspectratiomode", "manual");
         case "mode"
           pbratio = get (hax, "plotboxaspectratiomode");
         otherwise
-          error ("pbaspect: Invalid mode <%s>", arg);
+          error ("pbaspect: Invalid MODE <%s>", arg);
       endswitch
     else
       print_usage ();
     endif
   endif
 
 endfunction
 
diff --git a/scripts/plot/draw/isocaps.m b/scripts/plot/draw/isocaps.m
--- a/scripts/plot/draw/isocaps.m
+++ b/scripts/plot/draw/isocaps.m
@@ -160,17 +160,17 @@ function varargout = isocaps (varargin)
   endif
 
   if (! isempty (vertices))
     ## interpolate data at the vertices for coloring of the end-cap
     fvcdata = interp3 (x, y, z, v,
                        vertices(:,1), vertices(:,2), vertices(:,3))';
   endif
 
-  switch nargout
+  switch (nargout)
     case 0
       hp = patch ("Faces", faces, "Vertices", vertices, ...
                   "FaceVertexCData", fvcdata, ...
                   "FaceColor", "interp", "EdgeColor", "none");
 
     case 1
       vfc.vertices = vertices;
       vfc.faces = faces;
@@ -264,17 +264,17 @@ function [x, y, z, v, isoval, which_caps
     y = 1:v_sz(1);
   endif
   if (isempty (z))
     z = 1:v_sz(3);
   endif
 
   ## check x
   if (isvector (x) && length (x) == v_sz(2))
-    x = repmat (x(:)', [v_sz(1) 1 v_sz(3)]);
+    x = repmat (x(:).', [v_sz(1) 1 v_sz(3)]);
   elseif (! size_equal (v, x))
     error ("isocaps: X must match the size of V");
   endif
 
   ## check y
   if (isvector (y) && length (y) == v_sz(1))
     y = repmat (y(:), [1 v_sz(2) v_sz(3)]);
   elseif (! size_equal (v, y))
diff --git a/scripts/plot/util/pan.m b/scripts/plot/util/pan.m
--- a/scripts/plot/util/pan.m
+++ b/scripts/plot/util/pan.m
@@ -91,17 +91,17 @@ function pan (varargin)
               pm.Motion = "horizontal";
             case "yon"
               pm.Enable = "on";
               pm.Motion = "vertical";
           endswitch
           set (hfig, "__pan_mode__", pm);
           update_mouse_mode (hfig, arg);
         otherwise
-          error ("pan: unrecognized option '%s'", arg);
+          error ("pan: unrecognized OPTION '%s'", arg);
       endswitch
     else
       error ("pan: wrong type argument '%s'", class (arg));
     endif
   endif
 
 endfunction
 
diff --git a/scripts/plot/util/printd.m b/scripts/plot/util/printd.m
--- a/scripts/plot/util/printd.m
+++ b/scripts/plot/util/printd.m
@@ -36,17 +36,17 @@
 
 function pr_out = printd (obj, filename)
   ## Convert any object acceptable to disp() into various display formats.
   ## obj is the input object.
   ## filename is the output file (with required suffix).
 
   ## Extract .suffix from filename
   if ((sufix = rindex (filename, ".")) <= 0)
-    error ("printd: output filename '%s' requires a suffix.\nOptions are: pdf ps eps txt jpg jpeg", filename);
+    error ("printd: output FILENAME '%s' requires a suffix.\nOptions are: pdf ps eps txt jpg jpeg", filename);
   endif
   opt = substr (filename, sufix+1);
   [pf, tempf, mag] = mkstemp ("oct-XXXXXX", 1);
   fprintf (pf, "%s", disp (obj));
   frewind (pf);
 
   ## It seems best to only use convert for image output.  Its ps and pdf
   ## are badly rendered.
diff --git a/scripts/plot/util/private/__gnuplot_draw_axes__.m b/scripts/plot/util/private/__gnuplot_draw_axes__.m
--- a/scripts/plot/util/private/__gnuplot_draw_axes__.m
+++ b/scripts/plot/util/private/__gnuplot_draw_axes__.m
@@ -697,17 +697,17 @@ function __gnuplot_draw_axes__ (h, plot_
           usingclause{data_idx} = ...
             sprintf ("record=%d using ($1):($2) axes %s%s",
                      rows (xdat), xaxisloc_using, yaxisloc_using);
         endif
 
         [style, sidx] = do_linestyle_command (obj, obj.color, data_idx,
                                               plot_stream);
 
-        if isempty (style{1})
+        if (isempty (style{1}))
           style{1} = "points";
           data{data_idx} = {};
         endif
         withclause{data_idx} = sprintf ("with %s linestyle %d",
                                         style{1}, sidx(1));
 
         if (length (style) > 1)
           data_idx += 1;
@@ -1378,17 +1378,17 @@ function __gnuplot_draw_axes__ (h, plot_
                 have_cdata(data_idx) = true;
               else
                 have_cdata(data_idx) = false;
               endif
               have_3d_patch(data_idx) = false;
               titlespec{data_idx} = tspec;
               usingclause{data_idx} = sprintf ("record=%dx1 using ($1):($2):($3)%s",
                                                yrec, ccol);
-              if isempty (style{i_stl})
+              if (isempty (style{i_stl}))
                 style{i_stl} = "points";
                 data{data_idx} = {};
               else
                 data{data_idx} = zz;
               endif
               withclause{data_idx} = sprintf ("with %s %s",
                                               style{i_stl}, sopt);
             endfor
diff --git a/scripts/plot/util/rotate.m b/scripts/plot/util/rotate.m
--- a/scripts/plot/util/rotate.m
+++ b/scripts/plot/util/rotate.m
@@ -73,17 +73,17 @@ function rotate (h, direction, alpha, or
   is_surface = strcmp (t, "surface");
 
   if (! all (is_image | is_line | is_patch | is_surface))
     error ("rotate: expecting image, line, patch, or surface objects");
   endif
 
   if (nargin == 4)
     if (! (isnumeric (origin) && numel (origin) == 3))
-       error ("rotate: invalid origin");
+       error ("rotate: invalid ORIGIN");
     endif
   else
     ## Should Z limit be considered when computing origin?
 
     use_zlim = any (is_patch | is_surface);
 
     if (! use_zlim && any (is_line))
       idx = find (is_line)';
diff --git a/scripts/plot/util/rotate3d.m b/scripts/plot/util/rotate3d.m
--- a/scripts/plot/util/rotate3d.m
+++ b/scripts/plot/util/rotate3d.m
@@ -80,17 +80,17 @@ function rotate3d (varargin)
           switch (arg)
             case {"on", "off"}
               rm.Enable = arg;
               rm.Motion = "both";
           endswitch
           set (hfig, "__rotate_mode__", rm);
           update_mouse_mode (hfig, arg);
         otherwise
-          error ("rotate3d: unrecognized option '%s'", arg);
+          error ("rotate3d: unrecognized OPTION '%s'", arg);
       endswitch
     else
       error ("rotate3d: wrong type argument '%s'", class (arg));
     endif
   endif
 
 endfunction
 
diff --git a/scripts/plot/util/zoom.m b/scripts/plot/util/zoom.m
--- a/scripts/plot/util/zoom.m
+++ b/scripts/plot/util/zoom.m
@@ -98,20 +98,20 @@ function zoom (varargin)
       factor = arg;
       switch (numel (factor))
         case 2
           xfactor = factor(1);
           yfactor = factor(2);
         case 1
           xfactor = yfactor = factor;
         otherwise
-          error ("zoom: invalid factor");
+          error ("zoom: invalid FACTOR");
       endswitch
       if (xfactor < 0 || yfactor < 0)
-        error ("zoom: factor must be greater than 1");
+        error ("zoom: FACTOR must be greater than 1");
       elseif (xfactor == 1 && yfactor == 1)
         return;
       endif
       cax = get (hfig, "currentaxes");
       if (! isempty (cax))
         if (xfactor != 1)
           if (yfactor != 1)
             mode = "both";
@@ -148,17 +148,17 @@ function zoom (varargin)
             __zoom__ (cax, "out");
           endif
         case "reset"
           cax = get (hfig, "currentaxes");
           if (! isempty (cax))
             __zoom__ (cax, "reset");
           endif
         otherwise
-          error ("zoom: unrecognized option '%s'", arg);
+          error ("zoom: unrecognized OPTION '%s'", arg);
       endswitch
     else
       error ("zoom: wrong type argument '%s'", class (arg));
     endif
   endif
 
 endfunction
 
diff --git a/scripts/polynomial/splinefit.m b/scripts/polynomial/splinefit.m
--- a/scripts/polynomial/splinefit.m
+++ b/scripts/polynomial/splinefit.m
@@ -122,24 +122,24 @@ function pp = splinefit (x, y, breaks, v
   endif
   if (isfield (props, "robust") && props.robust)
     args{end+1} = "r";
   endif
   if (isfield (props, "beta"))
     if (0 < props.beta && props.beta < 1)
       args{end+1} = props.beta;
     else
-      error ("splinefit:invalidbeta", "invalid beta parameter (0 < beta < 1)");
+      error ("splinefit:invalidbeta", "invalid beta parameter (0 < BETA < 1)");
     endif
   endif
   if (isfield (props, "order"))
     if (props.order >= 0)
       args{end+1} = props.order + 1;
     else
-      error ("splinefit:invalidorder", "invalid order");
+      error ("splinefit:invalidorder", "invalid ORDER");
     endif
   endif
   if (isfield (props, "constraints"))
     args{end+1} = props.constraints;
   endif
   if (nargin < 3)
     print_usage ();
   elseif (! isnumeric (breaks) || ! isvector (breaks))
diff --git a/scripts/prefs/addpref.m b/scripts/prefs/addpref.m
--- a/scripts/prefs/addpref.m
+++ b/scripts/prefs/addpref.m
@@ -47,27 +47,27 @@ function addpref (group, pref, val)
   elseif (! (ischar (pref) || iscellstr (pref)))
     error ("addpref: PREF must be a string or cellstr");
   endif
 
   prefs = loadprefs ();
 
   if (ischar (pref))
     if (isfield (prefs, group) && isfield (prefs.(group), pref))
-      error ("addpref: preference %s already exists in group %s", pref, group);
+      error ("addpref: preference %s already exists in GROUP %s", pref, group);
     else
       prefs.(group).(pref) = val;
     endif
   else
     if (! size_equal (pref, val))
       error ("addpref: size mismatch for PREF and VAL");
     endif
     for i = 1:numel (pref)
       if (isfield (prefs, group) && isfield (prefs.(group), pref{i}))
-        error ("addpref: preference %s already exists in group %s",
+        error ("addpref: preference %s already exists in GROUP %s",
                pref{i}, group);
       else
         prefs.(group).(pref{i}) = val{i};
       endif
     endfor
   endif
 
   saveprefs (prefs);
diff --git a/scripts/prefs/getpref.m b/scripts/prefs/getpref.m
--- a/scripts/prefs/getpref.m
+++ b/scripts/prefs/getpref.m
@@ -76,32 +76,32 @@ function retval = getpref (group, pref, 
 
     if (ischar (pref))
       if (isfield (grp, pref))
         retval = grp.(pref);
       elseif (nargin == 3)
         addpref (group, pref, default);
         retval = default;
       else
-        error ("getpref: preference %s does not exist in group %s",
+        error ("getpref: preference %s does not exist in GROUP %s",
                pref, group);
       endif
     else
       if (nargin != 2 && ! size_equal (pref, default))
         error ("getpref: size mismatch for PREF and DEFAULT");
       endif
 
       for i = 1:numel (pref)
         if (isfield (grp, pref{i}))
           retval{i} = grp.(pref{i});
         elseif (nargin == 3)
           addpref (group, pref{i}, default{i});
           retval{i} = default{i};
         else
-          error ("getpref: preference %s does not exist in group %s",
+          error ("getpref: preference %s does not exist in GROUP %s",
                  pref{i}, group);
         endif
       endfor
     endif
   endif
 
 endfunction
 
diff --git a/scripts/prefs/rmpref.m b/scripts/prefs/rmpref.m
--- a/scripts/prefs/rmpref.m
+++ b/scripts/prefs/rmpref.m
@@ -42,30 +42,30 @@ function rmpref (group, pref)
   elseif (! ischar (group))
     error ("rmpref: GROUP must be a string");
   elseif (nargin == 2 && ! (ischar (pref) || iscellstr (pref)))
     error ("rmpref: PREF must be a string or cell array of strings");
   endif
 
   if (nargin == 1)
     if (! ispref (group))
-      error ("rmpref: group %s does not exist", group);
+      error ("rmpref: GROUP %s does not exist", group);
     endif
     prefs = loadprefs ();
     prefs = rmfield (prefs, group);
     saveprefs (prefs);
   else
     valid = ispref (group, pref);
     if (all (valid))
       prefs = loadprefs ();
       prefs.(group) = rmfield (prefs.(group), pref);
       saveprefs (prefs);
     else
       if (! ispref (group))
-        error ("rmpref: group %s does not exist", group);
+        error ("rmpref: GROUP %s does not exist", group);
       elseif (ischar (pref))
         error ("rmpref: preference %s does not exist", pref);
       else
         idx = find (! valid, 1);
         error ("rmpref: preference %s does not exist", pref{idx});
       endif
     endif
   endif
diff --git a/scripts/sparse/eigs.m b/scripts/sparse/eigs.m
--- a/scripts/sparse/eigs.m
+++ b/scripts/sparse/eigs.m
@@ -282,63 +282,63 @@ function out = select (args, k, sigma, r
 
       case "sm"
         [~, idx] = sort (abs (d), "ascend");
 
       case "la"
         if (real_valued && symmetric)
           [~, idx] = sort (real (d), "descend");
         else
-          error ('eigs: sigma = "la" requires real symmetric problem');
+          error ('eigs: SIGMA = "la" requires real symmetric problem');
         endif
 
       case "sa"
         if (real_valued && symmetric)
           [~, idx] = sort (real (d), "ascend");
         else
-          error ('eigs: sigma = "sa" requires real symmetric problem');
+          error ('eigs: SIGMA = "sa" requires real symmetric problem');
         endif
 
       case "be"
         if (real_valued && symmetric)
           [~, idx] = sort (real (d), "ascend");
         else
-          error ('eigs: sigma = "be" requires real symmetric problem');
+          error ('eigs: SIGMA = "be" requires real symmetric problem');
         endif
 
       case "lr"
         if (! (real_valued || symmetric))
           [~, idx] = sort (real (d), "descend");
         else
-          error ('eigs: sigma = "lr" requires complex or unsymmetric problem');
+          error ('eigs: SIGMA = "lr" requires complex or unsymmetric problem');
         endif
 
       case "sr"
         if (! (real_valued || symmetric))
           [~, idx] = sort (real (d), "ascend");
         else
-          error ('eigs: sigma = "sr" requires complex or unsymmetric problem');
+          error ('eigs: SIGMA = "sr" requires complex or unsymmetric problem');
         endif
 
       case "li"
         if (! (real_valued || symmetric))
           [~, idx] = sort (imag (d), "descend");
         else
-          error ('eigs: sigma = "li" requires complex or unsymmetric problem');
+          error ('eigs: SIGMA = "li" requires complex or unsymmetric problem');
         endif
 
       case "si"
         if (! (real_valued || symmetric))
           [~, idx] = sort (imag (d), "ascend");
         else
-          error ('eigs: sigma = "si" requires complex or unsymmetric problem');
+          error ('eigs: SIGMA = "si" requires complex or unsymmetric problem');
         endif
 
       otherwise
-        error ("eigs: unrecognized value for sigma: %s", sigma);
+        error ("eigs: unrecognized value for SIGMA: %s", sigma);
     endswitch
   else
     ## numeric sigma, find k closest values
     [~, idx] = sort (abs (d - sigma));
   endif
 
   d = d(idx);
 
diff --git a/scripts/statistics/distributions/normrnd.m b/scripts/statistics/distributions/normrnd.m
--- a/scripts/statistics/distributions/normrnd.m
+++ b/scripts/statistics/distributions/normrnd.m
@@ -42,17 +42,17 @@ function rnd = normrnd (mu, sigma, varar
 
   if (nargin < 2)
     print_usage ();
   endif
 
   if (! isscalar (mu) || ! isscalar (sigma))
     [retval, mu, sigma] = common_size (mu, sigma);
     if (retval > 0)
-      error ("normrnd: mu and sigma must be of common size or scalars");
+      error ("normrnd: MU and SIGMA must be of common size or scalars");
     endif
   endif
 
   if (iscomplex (mu) || iscomplex (sigma))
     error ("normrnd: MU and SIGMA must not be complex");
   endif
 
   if (nargin == 2)
@@ -68,17 +68,17 @@ function rnd = normrnd (mu, sigma, varar
   elseif (nargin > 3)
     if (any (cellfun (@(x) (! isscalar (x) || x < 0), varargin)))
       error ("normrnd: dimensions must be non-negative integers");
     endif
     sz = [varargin{:}];
   endif
 
   if (! isscalar (mu) && ! isequal (size (mu), sz))
-    error ("normrnd: mu and sigma must be scalar or of size SZ");
+    error ("normrnd: MU and SIGMA must be scalar or of size SZ");
   endif
 
   if (isa (mu, "single") || isa (sigma, "single"))
     cls = "single";
   else
     cls = "double";
   endif
 
diff --git a/scripts/statistics/tests/t_test_regression.m b/scripts/statistics/tests/t_test_regression.m
--- a/scripts/statistics/tests/t_test_regression.m
+++ b/scripts/statistics/tests/t_test_regression.m
@@ -83,17 +83,17 @@ function [pval, t, df] = t_test_regressi
 
   if (strcmp (alt, "!=") || strcmp (alt, "<>"))
     pval = 2 * min (cdf, 1 - cdf);
   elseif (strcmp (alt, ">"))
     pval = 1 - cdf;
   elseif (strcmp (alt, "<"))
     pval = cdf;
   else
-    error ("t_test_regression: the value '%s' for alt is not possible", alt);
+    error ("t_test_regression: the value '%s' for ALT is not possible", alt);
   endif
 
   if (nargout == 0)
     printf ("pval: %g\n", pval);
   endif
 
 endfunction
 
