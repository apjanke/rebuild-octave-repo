# HG changeset patch
# User Marco Caliari <marco.caliari@univr.it>
# Date 1510648867 -3600
#      Tue Nov 14 09:41:07 2017 +0100
# Node ID 599fe61a5619b29a9e580dcaab6a0d249b633e4a
# Parent  f74678605da9640b4a42633c35dd4df99eed635e
Fix incorrect size of the solution of some singular systems (bug #52402).

* dMatrix.cc, fMatrix.cc, CMatrix.cc, fCMatrix.cc (lssolve): return a solution
with b_nc columns.

diff --git a/liboctave/array/CMatrix.cc b/liboctave/array/CMatrix.cc
--- a/liboctave/array/CMatrix.cc
+++ b/liboctave/array/CMatrix.cc
@@ -2554,17 +2554,17 @@ ComplexMatrix::lssolve (const ComplexMat
       work.resize (dim_vector (lwork, 1));
 
       anorm = xnorm (*this, 1);
 
       if (octave::math::isinf (anorm) || octave::math::isnan (anorm))
         {
           rcon = 0.0;
           octave::warn_singular_matrix ();
-          retval = Matrix (n, m, 0.0);
+          retval = Matrix (n, b_nc, 0.0);
         }
       else
         {
           F77_XFCN (zgelsd, ZGELSD, (m, n, nrhs, F77_DBLE_CMPLX_ARG (tmp_data),
                                      m, F77_DBLE_CMPLX_ARG (pretval),
                                      maxmn, ps, rcon, tmp_rank,
                                      F77_DBLE_CMPLX_ARG (work.fortran_vec ()),
                                      lwork, prwork, piwork, tmp_info));
diff --git a/liboctave/array/dMatrix.cc b/liboctave/array/dMatrix.cc
--- a/liboctave/array/dMatrix.cc
+++ b/liboctave/array/dMatrix.cc
@@ -2205,17 +2205,17 @@ Matrix::lssolve (const Matrix& b, octave
       work.resize (dim_vector (lwork, 1));
 
       anorm = xnorm (*this, 1);
 
       if (octave::math::isinf (anorm) || octave::math::isnan (anorm))
         {
           rcon = 0.0;
           octave::warn_singular_matrix ();
-          retval = Matrix (n, m, 0.0);
+          retval = Matrix (n, b_nc, 0.0);
         }
       else
         {
           F77_XFCN (dgelsd, DGELSD, (m, n, nrhs, tmp_data, m, pretval,
                                      maxmn, ps, rcon, tmp_rank,
                                      work.fortran_vec (), lwork,
                                      piwork, tmp_info));
 
diff --git a/liboctave/array/fCMatrix.cc b/liboctave/array/fCMatrix.cc
--- a/liboctave/array/fCMatrix.cc
+++ b/liboctave/array/fCMatrix.cc
@@ -2575,17 +2575,17 @@ FloatComplexMatrix::lssolve (const Float
       work.resize (dim_vector (lwork, 1));
 
       anorm = xnorm (*this, 1);
 
       if (octave::math::isinf (anorm) || octave::math::isnan (anorm))
         {
           rcon = 0.0;
           octave::warn_singular_matrix ();
-          retval = Matrix (n, m, 0.0);
+          retval = Matrix (n, b_nc, 0.0);
         }
       else
         {
           F77_XFCN (cgelsd, CGELSD, (m, n, nrhs, F77_CMPLX_ARG (tmp_data),
                                      m, F77_CMPLX_ARG (pretval),
                                      maxmn, ps, rcon, tmp_rank,
                                      F77_CMPLX_ARG (work.fortran_vec ()),
                                      lwork, prwork, piwork, tmp_info));
diff --git a/liboctave/array/fMatrix.cc b/liboctave/array/fMatrix.cc
--- a/liboctave/array/fMatrix.cc
+++ b/liboctave/array/fMatrix.cc
@@ -2228,17 +2228,17 @@ FloatMatrix::lssolve (const FloatMatrix&
       work.resize (dim_vector (lwork, 1));
 
       anorm = xnorm (*this, 1);
 
       if (octave::math::isinf (anorm) || octave::math::isnan (anorm))
         {
           rcon = 0.0;
           octave::warn_singular_matrix ();
-          retval = Matrix (n, m, 0.0);
+          retval = Matrix (n, b_nc, 0.0);
         }
       else
         {
           F77_XFCN (sgelsd, SGELSD, (m, n, nrhs, tmp_data, m, pretval,
                                      maxmn, ps, rcon, tmp_rank,
                                      work.fortran_vec (), lwork,
                                      piwork, tmp_info));
 
diff --git a/test/leftdiv.tst b/test/leftdiv.tst
new file mode 100644
--- /dev/null
+++ b/test/leftdiv.tst
@@ -0,0 +1,30 @@
+## Copyright (C) 2017 Rik Wehbring
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 3 of the License, or
+## (at your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+## GNU General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
+## <http://www.gnu.org/licenses/>.
+
+## There are many corner cases for left division operator
+%!assert (0 \ 1, Inf)
+%!assert (0 \ single (1), single (Inf))
+## FIXME: Should return Inf, but not coded correctly yet. 
+%#!assert (0 \ i, Inf)
+%#!assert (0 \ single (i), single (Inf))
+
+%!assert ([Inf, 0; 0, 0] \ [1; 1], zeros (2,1))
+%!assert ([Inf, 0; 0, 0] \ single ([1; 1]), zeros (2,1, "single"))
+%!assert ([Inf, 0; 0, 0] \ [i; 1], zeros (2,1))
+%!assert ([Inf, 0; 0, 0] \ single ([i; 1]), zeros (2,1, "single"))
+
diff --git a/test/module.mk b/test/module.mk
--- a/test/module.mk
+++ b/test/module.mk
@@ -21,16 +21,17 @@ TEST_FILES += \
   %reldir%/eval-catch.tst \
   %reldir%/for.tst \
   %reldir%/func.tst \
   %reldir%/global.tst \
   %reldir%/if.tst \
   %reldir%/index.tst \
   %reldir%/io.tst \
   %reldir%/jit.tst \
+  %reldir%/leftdiv.tst \
   %reldir%/line-continue.tst \
   %reldir%/logical-index.tst \
   %reldir%/null-assign.tst \
   %reldir%/parser.tst \
   %reldir%/prefer.tst \
   %reldir%/range.tst \
   %reldir%/recursion.tst \
   %reldir%/return.tst \
