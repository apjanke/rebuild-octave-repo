# HG changeset patch
# User jwe
# Date 1150127667 0
#      Mon Jun 12 15:54:27 2006 +0000
# Node ID 68f8017ef07717f137e10d588d2abb5b15af0de3
# Parent  169b5538840b2449d18a42e3fc4008551dd1f949
[project @ 2006-06-12 15:54:27 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,14 @@
+2006-06-12  John W. Eaton  <jwe@octave.org>
+
+	* aclocal.m4 (OCTAVE_CXX_BROKEN_REINTERPRET_CAST): New macro.
+	* configure.in: Use it.
+	* AH_BOTTOM: Conditionally define FCN_PTR_CAST here.
+
 2006-06-08  John W. Eaton  <jwe@octave.org>
 
 	* Makeconf.in (do-subst-default-vals): Also substitute
 	OCTAVE_DATAROOTDIR.
 
 2006-06-06  John W. Eaton  <jwe@octave.org>
 
 	* Makeconf.in (datarootdir): New variable.
diff --git a/aclocal.m4 b/aclocal.m4
--- a/aclocal.m4
+++ b/aclocal.m4
@@ -704,16 +704,37 @@ EOF
       cat conftest.$ac_ext >&AS_MESSAGE_LOG_FD
     fi
     AC_LANG_POP(C++)
   ])
   AC_MSG_RESULT($octave_cv_cxx_abi)
   AC_DEFINE_UNQUOTED(CXX_ABI, $octave_cv_cxx_abi, [Define to the C++ ABI your compiler uses.])
 ])
 dnl
+dnl Check to see if C++ reintrepret cast works for function pointers.
+dnl
+dnl OCTAVE_CXX_BROKEN_REINTERPRET_CAST
+dnl
+AC_DEFUN(OCTAVE_CXX_BROKEN_REINTERPRET_CAST, [
+  AC_REQUIRE([AC_PROG_CXX])
+  AC_LANG_PUSH(C++)
+  AC_CACHE_CHECK([for broken C++ reinterpret_cast],
+    octave_cv_cxx_broken_reinterpret_cast, [
+    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <cmath>]], [[
+      typedef double (*fptr) (double);
+      fptr psin = sin;
+      void *vptr = reinterpret_cast<void *> (psin);
+      psin = reinterpret_cast<fptr> (vptr);]])],
+      octave_cv_cxx_broken_reinterpret_cast=no,
+      octave_cv_cxx_broken_reinterpret_cast=yes)])
+  if test $octave_cv_cxx_broken_reinterpret_cast = yes ; then
+    AC_DEFINE(CXX_BROKEN_REINTERPRET_CAST, 1, [Define if C++ reinterpret_cast fails for function pointers.])
+fi
+  AC_LANG_POP(C++)])
+dnl
 dnl Determine if mkdir accepts only one argument instead dnl of the usual 2.
 dnl
 AC_DEFUN(OCTAVE_MKDIR_TAKES_ONE_ARG,
 [AC_CACHE_CHECK([if mkdir takes one argument], octave_cv_mkdir_takes_one_arg,
 [AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <sys/types.h>
 #ifdef HAVE_SYS_STAT_H
 # include <sys/stat.h>
 #endif
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -24,17 +24,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### Preserve CFLAGS and CXXFLAGS from the environment before doing
 ### anything else because we don't know which macros might call
 ### AC_PROG_CC or AC_PROG_CXX.
 
 EXTERN_CFLAGS="$CFLAGS"
 EXTERN_CXXFLAGS="$CXXFLAGS"
 
 AC_INIT
-AC_REVISION($Revision: 1.513 $)
+AC_REVISION($Revision: 1.514 $)
 AC_PREREQ(2.57)
 AC_CONFIG_SRCDIR([src/octave.cc])
 AC_CONFIG_HEADER(config.h)
 
 OCTAVE_HOST_TYPE
 
 AC_DEFINE(OCTAVE_SOURCE, 1, [Define if this is Octave.])
   
@@ -202,16 +202,17 @@ esac
 CXX_VERSION=
 if test -n "$gxx_version"; then
   CXX_VERSION="$gxx_version"
 fi
 AC_SUBST(CXX_VERSION)
 
 OCTAVE_CXX_NEW_FRIEND_TEMPLATE_DECL
 OCTAVE_CXX_ISO_COMPLIANT_LIBRARY
+OCTAVE_CXX_BROKEN_REINTERPRET_CAST
 
 # Determine the ABI used the C++ compiler, needed by the dynamic loading
 # code. Currently supported ABIs are GNU v2, GNU v3 and Sun Workshop.
 
 OCTAVE_CXX_ABI
 
 ### See which C compiler to use (we expect to find gcc).
 
@@ -1627,16 +1628,22 @@ AH_BOTTOM([
 #else
 #define GCC_ATTR_DEPRECATED
 #define GCC_ATTR_NORETURN
 #define GCC_ATTR_UNUSED
 #endif
 
 #define X_CAST(T, E) (T) (E)
 
+#if defined (CXX_BROKEN_REINTERPRET_CAST)
+#define FCN_PTR_CAST(T, E) (T) (E)
+#else
+#define FCN_PTR_CAST(T, E) reinterpret_cast<T> (E)
+#endif
+
 #if defined(HAVE_F2C) && !defined(F77_FUNC)
 #  define F77_FUNC(x,X) x ## _
 #  define F77_FUNC_(x,X) x ## __
 #endif
 
 #if !defined(HAVE_DEV_T)
 typedef short dev_t;
 #endif
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2006-06-12  John W. Eaton  <jwe@octave.org>
+
+	* unwind-prot.h (unwind_protect_fptr): New macro.
+	* load-path.cc (load_path::do_set): Use it instead of
+	unwind_protect_ptr when protecting add_hook function pointer.
+	* dynamic-ld.cc (octave_dynamic_loader::do_load): Use FCN_PTR_CAST
+	here instead of reinterpret_cast.
+
 2006-06-09  John W. Eaton  <jwe@octave.org>
 
 	* version.h (OCTAVE_VERSION): Now 2.9.5+.
 
 2006-06-09  John W. Eaton  <jwe@octave.org>
 
 	* version.h (OCTAVE_VERSION): Now 2.9.6.
 	(OCTAVE_API_VERSION): Now api-v19.
diff --git a/src/dynamic-ld.cc b/src/dynamic-ld.cc
--- a/src/dynamic-ld.cc
+++ b/src/dynamic-ld.cc
@@ -260,17 +260,17 @@ octave_dynamic_loader::do_load (const st
 		}
 	    }
 	}
     }
 
   if (function)
     {
       octave_dld_fcn_installer f
-	= reinterpret_cast<octave_dld_fcn_installer> (function);
+	= FCN_PTR_CAST (octave_dld_fcn_installer, function);
 
       retval = f (oct_file);
 
       if (! retval)
 	::error ("failed to install dld function `%s'", fcn_name.c_str ());
     }
   
   unwind_protect::run_frame ("octave_dynamic_loader::do_load");
diff --git a/src/load-path.cc b/src/load-path.cc
--- a/src/load-path.cc
+++ b/src/load-path.cc
@@ -419,17 +419,17 @@ void
 load_path::do_set (const std::string& p)
 {
   do_clear ();
 
   std::list<std::string> elts = split_path (p);
 
   // Temporarily disable add hook.
 
-  unwind_protect_ptr (add_hook);
+  unwind_protect_fptr (add_hook);
 
   add_hook = 0;
 
   for (std::list<std::string>::const_iterator i = elts.begin ();
        i != elts.end ();
        i++)
     do_append (*i);
 
diff --git a/src/unwind-prot.h b/src/unwind-prot.h
--- a/src/unwind-prot.h
+++ b/src/unwind-prot.h
@@ -120,16 +120,20 @@ public:
 
 #define unwind_protect_str(s) \
   unwind_protect::save_str (&(s), (s))
 
 #define unwind_protect_ptr(p) \
   unwind_protect::save_ptr (reinterpret_cast<void **> (&(p)), \
                             reinterpret_cast<void *> (p))
 
+#define unwind_protect_fptr(p) \
+  unwind_protect::save_ptr (reinterpret_cast<void **> (&(p)), \
+                            FCN_PTR_CAST (void *, p))
+
 #define unwind_protect_const_ptr(p) \
   unwind_protect::save_ptr (const_cast<void **> (reinterpret_cast<const void **> (&(p))), \
                             const_cast<void *> (reinterpret_cast<const void *> (p)))
 
 #endif
 
 /*
 ;;; Local Variables: ***
