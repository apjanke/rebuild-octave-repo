# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1227110147 -3600
#      Wed Nov 19 16:55:47 2008 +0100
# Node ID e02242c54c496e99ad820a6e2390cef4e09f93bc
# Parent  9813c07ca946de9bd60f97968005ea1c407482b8
reuse matrix type detected in det

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -1589,16 +1589,19 @@ ComplexMatrix::determinant (MatrixType& 
   octave_idx_type nc = cols ();
 
   if (nr != nc)
     (*current_liboctave_error_handler) ("matrix must be square");
   else
     {
       int typ = mattype.type ();
 
+      if (typ == MatrixType::Unknown)
+        typ = mattype.type (*this);
+
       if (typ == MatrixType::Lower || typ == MatrixType::Upper)
         {
           for (octave_idx_type i = 0; i < nc; i++) 
             retval *= elem (i,i);
         }
       else if (typ == MatrixType::Hermitian)
         {
           ComplexMatrix atmp = *this;
@@ -1631,17 +1634,17 @@ ComplexMatrix::determinant (MatrixType& 
                                          nr, tmp_data, nr, anorm,
                                          rcon, pz, prz, info
                                          F77_CHAR_ARG_LEN (1)));
 
               if (info != 0) 
                 rcon = 0.0;
 
               for (octave_idx_type i = 0; i < nc; i++) 
-                retval *= elem (i,i);
+                retval *= atmp (i,i);
 
               retval = retval.square ();
             }
         }
       else if (typ != MatrixType::Full)
         (*current_liboctave_error_handler) ("det: invalid dense matrix type");
 
       if (typ == MatrixType::Full)
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,16 @@
+2008-11-19  Jaroslav Hajek  <highegg@gmail.com>
+	
+	* dMatrix.cc (Matrix::determinant),
+	fMatrix.cc (FloatMatrix::determinant),
+	CMatrix.cc (ComplexMatrix::determinant),
+	fCMatrix.cc (FloatComplexMatrix::determinant):
+	Use atmp(i,i) instead of elem(i,i).
+
 2008-11-19  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DET.h (base_det<T>::square): New member function.
 	* dMatrix.cc (Matrix::determinant),
 	fMatrix.cc (FloatMatrix::determinant),
 	CMatrix.cc (ComplexMatrix::determinant),
 	fCMatrix.cc (FloatComplexMatrix::determinant):
 	Allow taking MatrixType argument.
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -1255,16 +1255,19 @@ Matrix::determinant (MatrixType& mattype
   octave_idx_type nc = cols ();
 
   if (nr != nc)
     (*current_liboctave_error_handler) ("matrix must be square");
   else
     {
       int typ = mattype.type ();
 
+      if (typ == MatrixType::Unknown)
+        typ = mattype.type (*this);
+
       if (typ == MatrixType::Lower || typ == MatrixType::Upper)
         {
           for (octave_idx_type i = 0; i < nc; i++) 
             retval *= elem (i,i);
         }
       else if (typ == MatrixType::Hermitian)
         {
           Matrix atmp = *this;
@@ -1297,17 +1300,17 @@ Matrix::determinant (MatrixType& mattype
                                          nr, tmp_data, nr, anorm,
                                          rcon, pz, piz, info
                                          F77_CHAR_ARG_LEN (1)));
 
               if (info != 0) 
                 rcon = 0.0;
 
               for (octave_idx_type i = 0; i < nc; i++) 
-                retval *= elem (i,i);
+                retval *= atmp (i,i);
 
               retval = retval.square ();
             }
         }
       else if (typ != MatrixType::Full)
         (*current_liboctave_error_handler) ("det: invalid dense matrix type");
 
       if (typ == MatrixType::Full)
diff --git a/liboctave/fCMatrix.cc b/liboctave/fCMatrix.cc
--- a/liboctave/fCMatrix.cc
+++ b/liboctave/fCMatrix.cc
@@ -1583,16 +1583,19 @@ FloatComplexMatrix::determinant (MatrixT
   octave_idx_type nc = cols ();
 
   if (nr != nc)
     (*current_liboctave_error_handler) ("matrix must be square");
   else
     {
       int typ = mattype.type ();
 
+      if (typ == MatrixType::Unknown)
+        typ = mattype.type (*this);
+
       if (typ == MatrixType::Lower || typ == MatrixType::Upper)
         {
           for (octave_idx_type i = 0; i < nc; i++) 
             retval *= elem (i,i);
         }
       else if (typ == MatrixType::Hermitian)
         {
           FloatComplexMatrix atmp = *this;
@@ -1625,17 +1628,17 @@ FloatComplexMatrix::determinant (MatrixT
                                          nr, tmp_data, nr, anorm,
                                          rcon, pz, prz, info
                                          F77_CHAR_ARG_LEN (1)));
 
               if (info != 0) 
                 rcon = 0.0;
 
               for (octave_idx_type i = 0; i < nc; i++) 
-                retval *= elem (i,i);
+                retval *= atmp (i,i);
 
               retval = retval.square ();
             }
         }
       else if (typ != MatrixType::Full)
         (*current_liboctave_error_handler) ("det: invalid dense matrix type");
 
       if (typ == MatrixType::Full)
diff --git a/liboctave/fMatrix.cc b/liboctave/fMatrix.cc
--- a/liboctave/fMatrix.cc
+++ b/liboctave/fMatrix.cc
@@ -1254,16 +1254,19 @@ FloatMatrix::determinant (MatrixType& ma
   octave_idx_type nc = cols ();
 
   if (nr != nc)
     (*current_liboctave_error_handler) ("matrix must be square");
   else
     {
       int typ = mattype.type ();
 
+      if (typ == MatrixType::Unknown)
+        typ = mattype.type (*this);
+
       if (typ == MatrixType::Lower || typ == MatrixType::Upper)
         {
           for (octave_idx_type i = 0; i < nc; i++) 
             retval *= elem (i,i);
         }
       else if (typ == MatrixType::Hermitian)
         {
           FloatMatrix atmp = *this;
@@ -1296,17 +1299,17 @@ FloatMatrix::determinant (MatrixType& ma
                                          nr, tmp_data, nr, anorm,
                                          rcon, pz, piz, info
                                          F77_CHAR_ARG_LEN (1)));
 
               if (info != 0) 
                 rcon = 0.0;
 
               for (octave_idx_type i = 0; i < nc; i++) 
-                retval *= elem (i,i);
+                retval *= atmp (i,i);
 
               retval = retval.square ();
             }
         }
       else if (typ != MatrixType::Full)
         (*current_liboctave_error_handler) ("det: invalid dense matrix type");
 
       if (typ == MatrixType::Full)
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,11 +1,12 @@
 2008-11-19  Jaroslav Hajek  <highegg@gmail.com>
 
-	* DLD_FUNCTIONS/det.cc: Include only DET.h.
+	* DLD_FUNCTIONS/det.cc: Include only DET.h. Retrieve & matrix type &
+	store it after calculation if possible.
 
 2008-11-17  John W. Eaton  <jwe@octave.org>
 
 	* load-path.cc (load_path::dir_info::update): Simplify previous
 	change.
 
 	* load-path.h (load_path::dir_info::abs_dir_name): New data member.
 	(load_path::dir_info::dir_info, load_path::dir_info::operator =):
diff --git a/src/DLD-FUNCTIONS/det.cc b/src/DLD-FUNCTIONS/det.cc
--- a/src/DLD-FUNCTIONS/det.cc
+++ b/src/DLD-FUNCTIONS/det.cc
@@ -28,16 +28,25 @@ along with Octave; see the file COPYING.
 #include "DET.h"
 
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
 #include "oct-obj.h"
 #include "utils.h"
 
+#include "ov-re-mat.h"
+#include "ov-cx-mat.h"
+#include "ov-flt-re-mat.h"
+#include "ov-flt-cx-mat.h"
+
+#define MAYBE_CAST(VAR, CLASS) \
+  const CLASS *VAR = arg.type_id () == CLASS::static_type_id () ? \
+   dynamic_cast<const CLASS *> (&arg.get_rep ()) : 0
+
 DEFUN_DLD (det, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {[@var{d}, @var{rcond}] =} det (@var{a})\n\
 Compute the determinant of @var{a} using @sc{Lapack} for full and UMFPACK\n\
 for sparse matrices.  Return an estimate of the reciprocal condition number\n\
 if requested.\n\
 @end deftypefn")
 {
@@ -63,16 +72,17 @@ if requested.\n\
     }
 
   int arg_is_empty = empty_arg ("det", nr, nc);
   if (arg_is_empty < 0)
     return retval;
   if (arg_is_empty > 0)
     return octave_value (Matrix (1, 1, 1.0));
 
+
   if (nr != nc)
     {
       gripe_square_matrix_required ("det");
       return retval;
     }
 
 
   if (arg.is_single_type ())
@@ -81,33 +91,39 @@ if requested.\n\
 	{
 	  octave_idx_type info;
 	  float rcond = 0.0;
 	  // Always compute rcond, so we can detect numerically
 	  // singular matrices.
 	  FloatMatrix m = arg.float_matrix_value ();
 	  if (! error_state)
 	    {
-	      FloatDET det = m.determinant (info, rcond);
+              MAYBE_CAST (rep, octave_float_matrix);
+              MatrixType mtype = rep ? rep -> matrix_type () : MatrixType ();
+	      FloatDET det = m.determinant (mtype, info, rcond);
 	      retval(1) = rcond;
 	      retval(0) = info == -1 ? static_cast<float>(0.0) : det.value ();
+              if (rep) rep->matrix_type (mtype);
 	    }
 	}
       else if (arg.is_complex_type ())
 	{
 	  octave_idx_type info;
 	  float rcond = 0.0;
 	  // Always compute rcond, so we can detect numerically
 	  // singular matrices.
 	  FloatComplexMatrix m = arg.float_complex_matrix_value ();
 	  if (! error_state)
 	    {
-	      FloatComplexDET det = m.determinant (info, rcond);
+              MAYBE_CAST (rep, octave_float_complex_matrix);
+              MatrixType mtype = rep ? rep -> matrix_type () : MatrixType ();
+	      FloatComplexDET det = m.determinant (mtype, info, rcond);
 	      retval(1) = rcond;
 	      retval(0) = info == -1 ? FloatComplex (0.0) : det.value ();
+              if (rep) rep->matrix_type (mtype);
 	    }
 	}
     }
   else
     {
       if (arg.is_real_type ())
 	{
 	  octave_idx_type info;
@@ -124,19 +140,22 @@ if requested.\n\
 		  retval(0) = info == -1 ? 0.0 : det.value ();
 		}
 	    }
 	  else
 	    {
 	      Matrix m = arg.matrix_value ();
 	      if (! error_state)
 		{
-		  DET det = m.determinant (info, rcond);
+                  MAYBE_CAST (rep, octave_matrix);
+                  MatrixType mtype = rep ? rep -> matrix_type () : MatrixType ();
+		  DET det = m.determinant (mtype, info, rcond);
 		  retval(1) = rcond;
 		  retval(0) = info == -1 ? 0.0 : det.value ();
+                  if (rep) rep->matrix_type (mtype);
 		}
 	    }
 	}
       else if (arg.is_complex_type ())
 	{
 	  octave_idx_type info;
 	  double rcond = 0.0;
 	  // Always compute rcond, so we can detect numerically
@@ -151,19 +170,22 @@ if requested.\n\
 		  retval(0) = info == -1 ? Complex (0.0) : det.value ();
 		}
 	    }
 	  else
 	    {
 	      ComplexMatrix m = arg.complex_matrix_value ();
 	      if (! error_state)
 		{
-		  ComplexDET det = m.determinant (info, rcond);
+                  MAYBE_CAST (rep, octave_complex_matrix);
+                  MatrixType mtype = rep ? rep -> matrix_type () : MatrixType ();
+		  ComplexDET det = m.determinant (mtype, info, rcond);
 		  retval(1) = rcond;
 		  retval(0) = info == -1 ? Complex (0.0) : det.value ();
+                  if (rep) rep->matrix_type (mtype);
 		}
 	    }
 	}
       else
 	gripe_wrong_type_arg ("det", arg);
     }
   return retval;
 }
