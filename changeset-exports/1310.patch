# HG changeset patch
# User jwe
# Date 804053312 0
#      Sun Jun 25 04:08:32 1995 +0000
# Node ID f62e82e0a2cec39496822519cfa50cd8df7a3d54
# Parent  c0187e1c02f9168ea1fa30b84e014615a7e34480
[project @ 1995-06-25 04:08:32 by jwe]

diff --git a/src/svd.cc b/src/svd.cc
--- a/src/svd.cc
+++ b/src/svd.cc
@@ -25,28 +25,32 @@ Software Foundation, 675 Mass Ave, Cambr
 #include <config.h>
 #endif
 
 #include "dbleSVD.h"
 #include "CmplxSVD.h"
 
 #include "tree-const.h"
 #include "user-prefs.h"
+#include "pr-output.h"
+#include "mappers.h"
 #include "gripes.h"
 #include "error.h"
 #include "utils.h"
 #include "help.h"
 #include "defun-dld.h"
 
 DEFUN_DLD_BUILTIN ("svd", Fsvd, Ssvd, 2, 3,
   "S = svd (X) or [U, S, V] = svd (X [, 0])\n\
 \n\
 Compute the singular value decomposition of X.  Given a second input\n\
 argument, an `economy' sized factorization is computed that omits\n\
-unnecessary rows and columns of U and V")
+unnecessary rows and columns of U and V.\n\
+\n\
+X may not contain any Inf or NaN values.")
 {
   Octave_object retval;
 
   int nargin = args.length ();
 
   if (nargin < 1 || nargin > 2 || nargout == 2 || nargout > 3)
     {
       print_usage ("svd");
@@ -65,16 +69,23 @@ unnecessary rows and columns of U and V"
   SVD::type type = (nargin == 2) ? SVD::economy : SVD::std;
 
   if (arg.is_real_type ())
     {
       Matrix tmp = arg.matrix_value ();
 
       if (! error_state)
 	{
+	  if (any_element_is_inf_or_nan (tmp))
+	    {
+	      error ("svd: cannot take SVD of matrix containing Inf or\
+ NaN values"); 
+	      return retval;
+	    }
+
 	  SVD result (tmp, type);
 
 	  DiagMatrix sigma = result.singular_values ();
 
 	  if (nargout == 0 || nargout == 1)
 	    {
 	      retval(0) = tree_constant (sigma.diag (), 1);
 	    }
@@ -87,16 +98,23 @@ unnecessary rows and columns of U and V"
 	}
     }
   else if (arg.is_complex_type ())
     {
       ComplexMatrix ctmp = arg.complex_matrix_value ();
 
       if (! error_state)
 	{
+	  if (any_element_is_inf_or_nan (ctmp))
+	    {
+	      error ("svd: cannot take SVD of matrix containing Inf or\
+ NaN values"); 
+	      return retval;
+	    }
+
 	  ComplexSVD result (ctmp, type);
 
 	  DiagMatrix sigma = result.singular_values ();
 
 	  if (nargout == 0 || nargout == 1)
 	    {
 	      retval(0) = tree_constant (sigma.diag (), 1);
 	    }
