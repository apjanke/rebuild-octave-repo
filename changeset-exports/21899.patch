# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1465926197 14400
#      Tue Jun 14 13:43:17 2016 -0400
# Node ID 7c053ad1c7ba03b892d1dd71a1176d835800c045
# Parent  b5313b6cbe7215a564eb0b2a11a561dec54d12e0
hide sys/select header

* liboctave/wrappers/wait-for-input.c,
liboctave/wrappers/wait-for-input.h: New files.

* liboctave/wrappers/module.mk: Update.

* toplev.cc: Use new octave_wait_for_input function.

diff --git a/libinterp/corefcn/toplev.cc b/libinterp/corefcn/toplev.cc
--- a/libinterp/corefcn/toplev.cc
+++ b/libinterp/corefcn/toplev.cc
@@ -30,29 +30,28 @@ along with Octave; see the file COPYING.
 #include <cstring>
 #include <new>
 
 #include <fstream>
 #include <iostream>
 #include <sstream>
 #include <string>
 
-#include <sys/select.h>
-
 #include "cmd-edit.h"
 #include "cmd-hist.h"
 #include "file-ops.h"
 #include "lo-error.h"
 #include "lo-mappers.h"
 #include "oct-env.h"
 #include "oct-fftw.h"
 #include "oct-locbuf.h"
 #include "quit.h"
 #include "singleton-cleanup.h"
 #include "str-vec.h"
+#include "wait-for-input.h"
 
 #include "build-env.h"
 #include "liboctinterp-build-info.h"
 #include "defaults.h"
 #include "defun.h"
 #include "error.h"
 #include "file-io.h"
 #include "graphics.h"
@@ -987,38 +986,16 @@ You should have received a copy of the G
 along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\
 \n";
 
   return ovl ();
 }
 
 // Execute a shell command.
 
-static int
-wait_for_input (int fid)
-{
-  int retval = -1;
-
-#if defined (HAVE_SELECT)
-  if (fid >= 0)
-    {
-      fd_set set;
-
-      FD_ZERO (&set);
-      FD_SET (fid, &set);
-
-      retval = gnulib::select (FD_SETSIZE, &set, 0, 0, 0);
-    }
-#else
-  retval = 1;
-#endif
-
-  return retval;
-}
-
 static octave_value_list
 run_command_and_return_output (const std::string& cmd_str)
 {
   octave_value_list retval;
   octave::unwind_protect frame;
 
   iprocstream *cmd = new iprocstream (cmd_str.c_str ());
 
@@ -1039,17 +1016,17 @@ run_command_and_return_output (const std
       if (cmd->get (ch))
         output_buf.put (ch);
       else
         {
           if (! cmd->eof () && errno == EAGAIN)
             {
               cmd->clear ();
 
-              if (wait_for_input (fid) != 1)
+              if (octave_wait_for_input (fid) != 1)
                 break;
             }
           else
             break;
         }
     }
 
   int cmd_status = cmd->close ();
diff --git a/liboctave/wrappers/module.mk b/liboctave/wrappers/module.mk
--- a/liboctave/wrappers/module.mk
+++ b/liboctave/wrappers/module.mk
@@ -9,17 +9,18 @@ NOINSTALL_WRAPPERS_INC = \
   liboctave/wrappers/nanosleep-wrapper.h \
   liboctave/wrappers/nproc-wrapper.h \
   liboctave/wrappers/putenv-wrapper.h \
   liboctave/wrappers/set-program-name-wrapper.h \
   liboctave/wrappers/strftime-wrapper.h \
   liboctave/wrappers/strptime-wrapper.h \
   liboctave/wrappers/uname-wrapper.h \
   liboctave/wrappers/unsetenv-wrapper.h \
-  liboctave/wrappers/vasprintf-wrapper.h
+  liboctave/wrappers/vasprintf-wrapper.h \
+  liboctave/wrappers/wait-for-input.h
 
 WRAPPERS_SRC = \
   liboctave/wrappers/areadlink-wrapper.c \
   liboctave/wrappers/base64-wrappers.c \
   liboctave/wrappers/canonicalize-file-name-wrapper.c \
   liboctave/wrappers/fpucw-wrapper.c \
   liboctave/wrappers/gen-tempname-wrapper.c \
   liboctave/wrappers/hash-wrappers.c \
@@ -27,17 +28,18 @@ WRAPPERS_SRC = \
   liboctave/wrappers/nanosleep-wrapper.c \
   liboctave/wrappers/nproc-wrapper.c \
   liboctave/wrappers/putenv-wrapper.c \
   liboctave/wrappers/set-program-name-wrapper.c \
   liboctave/wrappers/strftime-wrapper.c \
   liboctave/wrappers/strptime-wrapper.c \
   liboctave/wrappers/uname-wrapper.c \
   liboctave/wrappers/unsetenv-wrapper.c \
-  liboctave/wrappers/vasprintf-wrapper.c
+  liboctave/wrappers/vasprintf-wrapper.c \
+  liboctave/wrappers/wait-for-input.c
 
 noinst_LTLIBRARIES += liboctave/wrappers/libwrappers.la
 
 liboctave_wrappers_libwrappers_la_SOURCES = $(WRAPPERS_SRC)
 
 liboctave_wrappers_libwrappers_la_CPPFLAGS = \
   -Ilibgnu -I$(srcdir)/libgnu
 
diff --git a/liboctave/wrappers/wait-for-input.c b/liboctave/wrappers/wait-for-input.c
new file mode 100644
--- /dev/null
+++ b/liboctave/wrappers/wait-for-input.c
@@ -0,0 +1,58 @@
+/*
+
+Copyright (C) 2016 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+// select may be provided by gnulib.  We don't include gnulib headers
+// directly in Octave's C++ source files to avoid problems that may be
+// caused by the way that gnulib overrides standard library functions.
+
+// We don't need select directly, we just need to use it to wait for
+// input on an open file descriptor.
+
+#if defined (HAVE_CONFIG_H)
+#  include "config.h"
+#endif
+
+#include <sys/select.h>
+
+#include "wait-for-input.h"
+
+int
+octave_wait_for_input (int fid)
+{
+  int retval = -1;
+
+#if defined (HAVE_SELECT)
+  if (fid >= 0)
+    {
+      fd_set set;
+
+      FD_ZERO (&set);
+      FD_SET (fid, &set);
+
+      retval = select (FD_SETSIZE, &set, 0, 0, 0);
+    }
+#else
+  retval = 1;
+#endif
+
+  return retval;
+}
diff --git a/liboctave/wrappers/wait-for-input.h b/liboctave/wrappers/wait-for-input.h
new file mode 100644
--- /dev/null
+++ b/liboctave/wrappers/wait-for-input.h
@@ -0,0 +1,36 @@
+/*
+
+Copyright (C) 2016 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+#if ! defined (octave_wait_for_input_h)
+#define octave_wait_for_input_h 1
+
+#if defined __cplusplus
+extern "C" {
+#endif
+
+extern int octave_wait_for_input (int fid);
+
+#if defined __cplusplus
+}
+#endif
+
+#endif
