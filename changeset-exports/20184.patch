# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1431541028 14400
#      Wed May 13 14:17:08 2015 -0400
# Branch stable
# Node ID f185653b2f5ea6c8c98e33ce6eb285fb59b899a6
# Parent  4e7f12a763cdfadebe3f4586e3d189c4fed00bcc
don't crash if structure field is keyword (bug #45092)

* lex.ll (handle_identiier): Emit specific error if structure field is
a keyword.  Error instead of aborting if at_beginning_of_statement is
true when parsting a structure field.

diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -2888,41 +2888,52 @@ octave_base_lexer::handle_fq_identifier 
 
 int
 octave_base_lexer::handle_identifier (void)
 {
   char *yytxt = flex_yytext ();
 
   std::string tok = yytxt;
 
+  // If tok is a keyword token, then is_keyword_token will set
+  // at_beginning_of_statement.  For example, if tok is an IF
+  // token, then at_beginning_of_statement will be false.
+
+  int kw_token = is_keyword_token (tok);
+
   // If we are expecting a structure element, avoid recognizing
   // keywords and other special names and return STRUCT_ELT, which is
   // a string that is also a valid identifier.  But first, we have to
   // decide whether to insert a comma.
 
   if (looking_at_indirect_ref)
     {
       push_token (new token (STRUCT_ELT, tok, input_line_number,
                              current_input_column));
 
       looking_for_object_index = true;
 
       current_input_column += flex_yyleng ();
 
-      assert (! at_beginning_of_statement);
+      if (kw_token)
+        {
+          error ("structure fields may not be keywords");
+          return LEXICAL_ERROR;
+        }
+
+      if (at_beginning_of_statement)
+        {
+          error ("invalid syntax for structure reference");
+
+          return LEXICAL_ERROR;
+        }
 
       return STRUCT_ELT;
     }
 
-  // If tok is a keyword token, then is_keyword_token will set
-  // at_beginning_of_statement.  For example, if tok is and IF
-  // token, then at_beginning_of_statement will be false.
-
-  int kw_token = is_keyword_token (tok);
-
   if (looking_at_function_handle)
     {
       if (kw_token)
         {
           error ("function handles may not refer to keywords");
 
           return LEXICAL_ERROR;
         }
