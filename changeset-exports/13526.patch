# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1311194671 -7200
#      Wed Jul 20 22:44:31 2011 +0200
# Node ID 7b0a721d0ae870107002cf21541accae27683add
# Parent  2426dd43c593aac1c6c606736ee8f6a98be34eec
# Parent  8c143d6d0330dfb5688d44f477756bcf6ca93df3
Merge with bitbucket.

diff --git a/gui/src/FileEditorMdiSubWindow.cpp b/gui/src/FileEditorMdiSubWindow.cpp
--- a/gui/src/FileEditorMdiSubWindow.cpp
+++ b/gui/src/FileEditorMdiSubWindow.cpp
@@ -29,19 +29,31 @@
 FileEditorMdiSubWindow::FileEditorMdiSubWindow (QWidget * parent):QMdiSubWindow
   (parent)
 {
   construct ();
 }
 
 FileEditorMdiSubWindow::~FileEditorMdiSubWindow ()
 {
-  while (checkFileModified ("Close File"))
+}
+
+void
+FileEditorMdiSubWindow::closeEvent(QCloseEvent *event)
+{
+  // ignore close event if file is not saved and user cancels closing this window
+  // TODO: This does not work if the main window is closed!
+  if (checkFileModified ("Close File")==QMessageBox::Cancel)
     {
-    }				// don't close if something went wrong while saving the file
+      event->ignore();
+    }
+  else
+    {
+      event->accept();
+    }
 }
 
 void
 FileEditorMdiSubWindow::loadFile (QString fileName)
 {
   QFile file (fileName);
   if (!file.open (QFile::ReadOnly))
     {
@@ -54,55 +66,60 @@ FileEditorMdiSubWindow::loadFile (QStrin
   QTextStream in (&file);
   QApplication::setOverrideCursor (Qt::WaitCursor);
   m_editor->setText (in.readAll ());
   QApplication::restoreOverrideCursor ();
 
   m_fileName = fileName;
   setWindowTitle (fileName);
   m_statusBar->showMessage (tr ("File loaded."), 2000);
-  m_editor->setModified (false);
+  m_editor->setModified (false); // loaded file is not modified yet
 }
 
 void
 FileEditorMdiSubWindow::newFile ()
 {
-  if (checkFileModified ("Open New File"))
-    {
-      return;			// something went wrong while saving the old file
-    }
-  m_fileName = "<unnamed>";
-  setWindowTitle (m_fileName);
-  m_editor->setText ("");
-  m_editor->setModified (false);
+    if (checkFileModified ("Open New File")==QMessageBox::Cancel)
+      {
+        return; // existing file not saved and creating new file canceled by user
+      }
+    m_fileName = "<unnamed>";
+    setWindowTitle (m_fileName);
+    m_editor->setText ("");
+    m_editor->setModified (false); // new file is not modified yet
 }
 
 int
 FileEditorMdiSubWindow::checkFileModified (QString msg)
 {
+  int decision = QMessageBox::Yes;
   if (m_editor->isModified ())
     {
-      int decision = QMessageBox::question (this,
-					    msg,
-					    "Do you want to save the current file?",
-					    QMessageBox::Yes,
-					    QMessageBox::No);
+      // file is modified but not saved, aks user what to do
+      decision = QMessageBox::question (this,
+                                        msg,
+                                        tr ("Do you want to save the current file\n%1 ?").
+                                          arg (m_fileName),
+                                        QMessageBox::Cancel,
+                                        QMessageBox::No,
+                                        QMessageBox::Yes);
 
       if (decision == QMessageBox::Yes)
-	{
-	  saveFile ();
-	  if (m_editor->isModified ())
-	    {
-	      // If the user attempted to save the file, but it's still
-	      // modified, then probably something went wrong, so return error
-	      return (1);
-	    }
-	}
+        {
+          saveFile ();
+          if (m_editor->isModified ())
+            {
+              // If the user attempted to save the file, but it's still
+              // modified, then probably something went wrong, so return cancel
+              // for cancel this operation
+              return (QMessageBox::Cancel);
+            }
+        }
     }
-  return (0);
+  return (decision);
 }
 
 void
 FileEditorMdiSubWindow::saveFile ()
 {
   if (m_fileName.isEmpty ())
     {
       m_fileName =
@@ -120,16 +137,17 @@ FileEditorMdiSubWindow::saveFile ()
       return;
     }
 
   QTextStream out (&file);
   QApplication::setOverrideCursor (Qt::WaitCursor);
   out << m_editor->text ();
   QApplication::restoreOverrideCursor ();
   m_statusBar->showMessage (tr ("File saved"), 2000);
+  m_editor->setModified (false); // files is save -> not modified
 }
 
 void
 FileEditorMdiSubWindow::saveFileAs ()
 {				/*
 				   QString saveFileName = QFileDialog::getSaveFileName(this, "Save File", m_fileName);
 				   if(saveFileName.isEmpty())
 				   return;
diff --git a/gui/src/FileEditorMdiSubWindow.h b/gui/src/FileEditorMdiSubWindow.h
--- a/gui/src/FileEditorMdiSubWindow.h
+++ b/gui/src/FileEditorMdiSubWindow.h
@@ -17,39 +17,46 @@
  */
 
 #ifndef FILEEDITORMDISUBWINDOW_H
 #define FILEEDITORMDISUBWINDOW_H
 
 #include <QMdiSubWindow>
 #include <QToolBar>
 #include <QStatusBar>
+#include <QCloseEvent>
 #include <Qsci/qsciscintilla.h>
 // Not available in the Debian repos yet!
 // #include <Qsci/qscilexeroctave.h>
 #include <Qsci/qsciapis.h>
 
 class FileEditorMdiSubWindow:public QMdiSubWindow
 {
 Q_OBJECT public:
   FileEditorMdiSubWindow (QWidget * parent = 0);
   ~FileEditorMdiSubWindow ();
   void loadFile (QString fileName);
 
-  public slots:void newFile ();
+  public slots:
+
+  void newFile ();
   void saveFile ();
   void saveFileAs ();
 
   void showToolTipNew ();
   void showToolTipSave ();
   void showToolTipSaveAs ();
   void showToolTipUndo ();
   void showToolTipRedo ();
 
   void registerModified (bool modified);
+
+protected:
+  void closeEvent(QCloseEvent *event);
+
 private:
   int checkFileModified (QString msg);
   void construct ();
   QToolBar *m_toolBar;
   QsciScintilla *m_editor;
   QStatusBar *m_statusBar;
   QString m_fileName;
   bool m_modified;
