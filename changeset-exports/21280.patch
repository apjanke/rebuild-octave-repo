# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1455695640 18000
#      Wed Feb 17 02:54:00 2016 -0500
# Node ID ebdf74c15722ccc766ae2a8338e5fdced28bc4dc
# Parent  eb1524b07fe367bc26305df42e30ec4ad5d851a2
better use of templates for qrp classes

* liboctave/numeric/qrp.h, liboctave/numeric/qrp.cc: New files for qrp
classes generated from CmplxQRP.cc, CmplxQRP.h, dbleQRP.cc, dbleQRP.h,
fCmplxQRP.cc, fCmplxQRP.h, floatQRP.cc, and floatQRP.h with classes
converted to templates.

* liboctave/numeric/module.mk: Update.

* qr.cc, mx-defs.h: Use new classes.

diff --git a/libinterp/dldfcn/qr.cc b/libinterp/dldfcn/qr.cc
--- a/libinterp/dldfcn/qr.cc
+++ b/libinterp/dldfcn/qr.cc
@@ -21,21 +21,18 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #  include <config.h>
 #endif
 
-#include "CmplxQRP.h"
-#include "dbleQRP.h"
-#include "fCmplxQRP.h"
-#include "floatQRP.h"
 #include "qr.h"
+#include "qrp.h"
 #include "sparse-qr.h"
 
 
 #include "defun-dld.h"
 #include "error.h"
 #include "errwarn.h"
 #include "ovl.h"
 #include "utils.h"
@@ -299,17 +296,17 @@ x = @var{R} \\ @var{C}\n\
                   {
                     qr<FloatMatrix> fact (m, type);
                     retval = ovl (fact.Q (), get_qr_r (fact));
                   }
                   break;
 
                 default:
                   {
-                    FloatQRP fact (m, type);
+                    qrp<FloatMatrix> fact (m, type);
 
                     if (type == qr<FloatMatrix>::economy)
                       retval = ovl (fact.Q (), get_qr_r (fact), fact.Pvec ());
                     else
                       retval = ovl (fact.Q (), get_qr_r (fact), fact.P ());
                   }
                   break;
                 }
@@ -335,17 +332,17 @@ x = @var{R} \\ @var{C}\n\
                   {
                     qr<FloatComplexMatrix> fact (m, type);
                     retval = ovl (fact.Q (), get_qr_r (fact));
                   }
                   break;
 
                 default:
                   {
-                    FloatComplexQRP fact (m, type);
+                    qrp<FloatComplexMatrix> fact (m, type);
                     if (type == qr<FloatComplexMatrix>::economy)
                       retval = ovl (fact.Q (), get_qr_r (fact), fact.Pvec ());
                     else
                       retval = ovl (fact.Q (), get_qr_r (fact), fact.P ());
                   }
                   break;
                 }
             }
@@ -372,17 +369,17 @@ x = @var{R} \\ @var{C}\n\
                   {
                     qr<Matrix> fact (m, type);
                     retval = ovl (fact.Q (), get_qr_r (fact));
                   }
                   break;
 
                 default:
                   {
-                    QRP fact (m, type);
+                    qrp<Matrix> fact (m, type);
                     if (type == qr<Matrix>::economy)
                       retval = ovl (fact.Q (), get_qr_r (fact), fact.Pvec ());
                     else
                       retval = ovl (fact.Q (), get_qr_r (fact), fact.P ());
                   }
                   break;
                 }
             }
@@ -407,17 +404,17 @@ x = @var{R} \\ @var{C}\n\
                   {
                     qr<ComplexMatrix> fact (m, type);
                     retval = ovl (fact.Q (), get_qr_r (fact));
                   }
                   break;
 
                 default:
                   {
-                    ComplexQRP fact (m, type);
+                    qrp<ComplexMatrix> fact (m, type);
                     if (type == qr<ComplexMatrix>::economy)
                       retval = ovl (fact.Q (), get_qr_r (fact), fact.Pvec ());
                     else
                       retval = ovl (fact.Q (), get_qr_r (fact), fact.P ());
                   }
                   break;
                 }
             }
diff --git a/liboctave/numeric/CmplxQRP.cc b/liboctave/numeric/CmplxQRP.cc
deleted file mode 100644
--- a/liboctave/numeric/CmplxQRP.cc
+++ /dev/null
@@ -1,109 +0,0 @@
-/*
-
-Copyright (C) 1994-2015 John W. Eaton
-Copyright (C) 2009 VZLU Prague
-
-This file is part of Octave.
-
-Octave is free software; you can redistribute it and/or modify it
-under the terms of the GNU General Public License as published by the
-Free Software Foundation; either version 3 of the License, or (at your
-option) any later version.
-
-Octave is distributed in the hope that it will be useful, but WITHOUT
-ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
-for more details.
-
-You should have received a copy of the GNU General Public License
-along with Octave; see the file COPYING.  If not, see
-<http://www.gnu.org/licenses/>.
-
-*/
-
-#ifdef HAVE_CONFIG_H
-#  include <config.h>
-#endif
-
-#include <cassert>
-
-#include "CmplxQRP.h"
-#include "f77-fcn.h"
-#include "lo-error.h"
-#include "oct-locbuf.h"
-
-extern "C"
-{
-  F77_RET_T
-  F77_FUNC (zgeqp3, ZGEQP3) (const octave_idx_type&, const octave_idx_type&,
-                             Complex*, const octave_idx_type&,
-                             octave_idx_type*, Complex*, Complex*,
-                             const octave_idx_type&, double*,
-                             octave_idx_type&);
-}
-
-// It would be best to share some of this code with qr<ComplexMatrix> class...
-
-ComplexQRP::ComplexQRP (const ComplexMatrix& a, type qr_type)
-  : qr<ComplexMatrix> (), p ()
-{
-  init (a, qr_type);
-}
-
-void
-ComplexQRP::init (const ComplexMatrix& a, type qr_type)
-{
-  assert (qr_type != qr<ComplexMatrix>::raw);
-
-  octave_idx_type m = a.rows ();
-  octave_idx_type n = a.cols ();
-
-  octave_idx_type min_mn = m < n ? m : n;
-  OCTAVE_LOCAL_BUFFER (Complex, tau, min_mn);
-
-  octave_idx_type info = 0;
-
-  ComplexMatrix afact = a;
-  if (m > n && qr_type == qr<ComplexMatrix>::std)
-    afact.resize (m, m);
-
-  MArray<octave_idx_type> jpvt (dim_vector (n, 1), 0);
-
-  if (m > 0)
-    {
-      OCTAVE_LOCAL_BUFFER (double, rwork, 2*n);
-
-      // workspace query.
-      Complex clwork;
-      F77_XFCN (zgeqp3, ZGEQP3, (m, n, afact.fortran_vec (),
-                                 m, jpvt.fortran_vec (), tau,
-                                 &clwork, -1, rwork, info));
-
-      // allocate buffer and do the job.
-      octave_idx_type lwork = clwork.real ();
-      lwork = std::max (lwork, static_cast<octave_idx_type> (1));
-      OCTAVE_LOCAL_BUFFER (Complex, work, lwork);
-      F77_XFCN (zgeqp3, ZGEQP3, (m, n, afact.fortran_vec (),
-                                 m, jpvt.fortran_vec (), tau,
-                                 work, lwork, rwork, info));
-    }
-  else
-    for (octave_idx_type i = 0; i < n; i++) jpvt(i) = i+1;
-
-  // Form Permutation matrix (if economy is requested, return the
-  // indices only!)
-
-  jpvt -= static_cast<octave_idx_type> (1);
-  p = PermMatrix (jpvt, true);
-
-
-  form (n, afact, tau, qr_type);
-}
-
-RowVector
-ComplexQRP::Pvec (void) const
-{
-  Array<double> pa (p.col_perm_vec ());
-  RowVector pv (MArray<double> (pa) + 1.0);
-  return pv;
-}
diff --git a/liboctave/numeric/CmplxQRP.h b/liboctave/numeric/CmplxQRP.h
deleted file mode 100644
--- a/liboctave/numeric/CmplxQRP.h
+++ /dev/null
@@ -1,75 +0,0 @@
-/*
-
-Copyright (C) 1994-2015 John W. Eaton
-
-This file is part of Octave.
-
-Octave is free software; you can redistribute it and/or modify it
-under the terms of the GNU General Public License as published by the
-Free Software Foundation; either version 3 of the License, or (at your
-option) any later version.
-
-Octave is distributed in the hope that it will be useful, but WITHOUT
-ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
-for more details.
-
-You should have received a copy of the GNU General Public License
-along with Octave; see the file COPYING.  If not, see
-<http://www.gnu.org/licenses/>.
-
-*/
-
-#if ! defined (octave_CmplxQRP_h)
-#define octave_CmplxQRP_h 1
-
-#include "octave-config.h"
-
-#include <iosfwd>
-
-#include "PermMatrix.h"
-#include "CColVector.h"
-#include "CMatrix.h"
-#include "CRowVector.h"
-#include "qr.h"
-
-class
-OCTAVE_API
-ComplexQRP : public qr<ComplexMatrix>
-{
-public:
-
-  typedef qr<ComplexMatrix>::type type;
-
-  ComplexQRP (void) : qr<ComplexMatrix> (), p () { }
-
-  ComplexQRP (const ComplexMatrix&, type = qr<ComplexMatrix>::std);
-
-  ComplexQRP (const ComplexQRP& a) : qr<ComplexMatrix> (a), p (a.p) { }
-
-  ComplexQRP& operator = (const ComplexQRP& a)
-  {
-    if (this != &a)
-      {
-        qr<ComplexMatrix>::operator = (a);
-        p = a.p;
-      }
-    return *this;
-  }
-
-  ~ComplexQRP (void) { }
-
-  void init (const ComplexMatrix&, type = qr<ComplexMatrix>::std);
-
-  PermMatrix P (void) const { return p; }
-
-  RowVector Pvec (void) const;
-
-  friend std::ostream&  operator << (std::ostream&, const ComplexQRP&);
-
-private:
-
-  PermMatrix p;
-};
-
-#endif
diff --git a/liboctave/numeric/fCmplxQRP.cc b/liboctave/numeric/fCmplxQRP.cc
deleted file mode 100644
--- a/liboctave/numeric/fCmplxQRP.cc
+++ /dev/null
@@ -1,108 +0,0 @@
-/*
-
-Copyright (C) 1994-2015 John W. Eaton
-Copyright (C) 2009 VZLU Prague
-
-This file is part of Octave.
-
-Octave is free software; you can redistribute it and/or modify it
-under the terms of the GNU General Public License as published by the
-Free Software Foundation; either version 3 of the License, or (at your
-option) any later version.
-
-Octave is distributed in the hope that it will be useful, but WITHOUT
-ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
-for more details.
-
-You should have received a copy of the GNU General Public License
-along with Octave; see the file COPYING.  If not, see
-<http://www.gnu.org/licenses/>.
-
-*/
-
-#ifdef HAVE_CONFIG_H
-#  include <config.h>
-#endif
-
-#include <cassert>
-
-#include "fCmplxQRP.h"
-#include "f77-fcn.h"
-#include "lo-error.h"
-#include "oct-locbuf.h"
-
-extern "C"
-{
-  F77_RET_T
-  F77_FUNC (cgeqp3, CGEQP3) (const octave_idx_type&, const octave_idx_type&,
-                             FloatComplex*, const octave_idx_type&,
-                             octave_idx_type*, FloatComplex*, FloatComplex*,
-                             const octave_idx_type&, float*, octave_idx_type&);
-}
-
-// It would be best to share some of this code with qr<FloatComplexMatrix> class...
-
-FloatComplexQRP::FloatComplexQRP (const FloatComplexMatrix& a, type qr_type)
-  : qr<FloatComplexMatrix> (), p ()
-{
-  init (a, qr_type);
-}
-
-void
-FloatComplexQRP::init (const FloatComplexMatrix& a, type qr_type)
-{
-  assert (qr_type != qr<FloatComplexMatrix>::raw);
-
-  octave_idx_type m = a.rows ();
-  octave_idx_type n = a.cols ();
-
-  octave_idx_type min_mn = m < n ? m : n;
-  OCTAVE_LOCAL_BUFFER (FloatComplex, tau, min_mn);
-
-  octave_idx_type info = 0;
-
-  FloatComplexMatrix afact = a;
-  if (m > n && qr_type == qr<FloatComplexMatrix>::std)
-    afact.resize (m, m);
-
-  MArray<octave_idx_type> jpvt (dim_vector (n, 1), 0);
-
-  if (m > 0)
-    {
-      OCTAVE_LOCAL_BUFFER (float, rwork, 2*n);
-
-      // workspace query.
-      FloatComplex clwork;
-      F77_XFCN (cgeqp3, CGEQP3, (m, n, afact.fortran_vec (),
-                                 m, jpvt.fortran_vec (), tau,
-                                 &clwork, -1, rwork, info));
-
-      // allocate buffer and do the job.
-      octave_idx_type lwork = clwork.real ();
-      lwork = std::max (lwork, static_cast<octave_idx_type> (1));
-      OCTAVE_LOCAL_BUFFER (FloatComplex, work, lwork);
-      F77_XFCN (cgeqp3, CGEQP3, (m, n, afact.fortran_vec (),
-                                 m, jpvt.fortran_vec (), tau,
-                                 work, lwork, rwork, info));
-    }
-  else
-    for (octave_idx_type i = 0; i < n; i++) jpvt(i) = i+1;
-
-  // Form Permutation matrix (if economy is requested, return the
-  // indices only!)
-
-  jpvt -= static_cast<octave_idx_type> (1);
-  p = PermMatrix (jpvt, true);
-
-
-  form (n, afact, tau, qr_type);
-}
-
-FloatRowVector
-FloatComplexQRP::Pvec (void) const
-{
-  Array<float> pa (p.col_perm_vec ());
-  FloatRowVector pv (MArray<float> (pa) + 1.0f);
-  return pv;
-}
diff --git a/liboctave/numeric/fCmplxQRP.h b/liboctave/numeric/fCmplxQRP.h
deleted file mode 100644
--- a/liboctave/numeric/fCmplxQRP.h
+++ /dev/null
@@ -1,75 +0,0 @@
-/*
-
-Copyright (C) 1994-2015 John W. Eaton
-
-This file is part of Octave.
-
-Octave is free software; you can redistribute it and/or modify it
-under the terms of the GNU General Public License as published by the
-Free Software Foundation; either version 3 of the License, or (at your
-option) any later version.
-
-Octave is distributed in the hope that it will be useful, but WITHOUT
-ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
-for more details.
-
-You should have received a copy of the GNU General Public License
-along with Octave; see the file COPYING.  If not, see
-<http://www.gnu.org/licenses/>.
-
-*/
-
-#if ! defined (octave_fCmplxQRP_h)
-#define octave_fCmplxQRP_h 1
-
-#include "octave-config.h"
-
-#include <iosfwd>
-
-#include "PermMatrix.h"
-#include "fCColVector.h"
-#include "fCMatrix.h"
-#include "fCRowVector.h"
-#include "qr.h"
-
-class
-OCTAVE_API
-FloatComplexQRP : public qr<FloatComplexMatrix>
-{
-public:
-
-  typedef qr<FloatComplexMatrix>::type type;
-
-  FloatComplexQRP (void) : qr<FloatComplexMatrix> (), p () { }
-
-  FloatComplexQRP (const FloatComplexMatrix&, type = qr<FloatComplexMatrix>::std);
-
-  FloatComplexQRP (const FloatComplexQRP& a) : qr<FloatComplexMatrix> (a), p (a.p) { }
-
-  FloatComplexQRP& operator = (const FloatComplexQRP& a)
-  {
-    if (this != &a)
-      {
-        qr<FloatComplexMatrix>::operator = (a);
-        p = a.p;
-      }
-    return *this;
-  }
-
-  ~FloatComplexQRP (void) { }
-
-  void init (const FloatComplexMatrix&, type = qr<FloatComplexMatrix>::std);
-
-  PermMatrix P (void) const { return p; }
-
-  FloatRowVector Pvec (void) const;
-
-  friend std::ostream&  operator << (std::ostream&, const FloatComplexQRP&);
-
-private:
-
-  PermMatrix p;
-};
-
-#endif
diff --git a/liboctave/numeric/floatQRP.cc b/liboctave/numeric/floatQRP.cc
deleted file mode 100644
--- a/liboctave/numeric/floatQRP.cc
+++ /dev/null
@@ -1,106 +0,0 @@
-/*
-
-Copyright (C) 1994-2015 John W. Eaton
-Copyright (C) 2009 VZLU Prague
-
-This file is part of Octave.
-
-Octave is free software; you can redistribute it and/or modify it
-under the terms of the GNU General Public License as published by the
-Free Software Foundation; either version 3 of the License, or (at your
-option) any later version.
-
-Octave is distributed in the hope that it will be useful, but WITHOUT
-ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
-for more details.
-
-You should have received a copy of the GNU General Public License
-along with Octave; see the file COPYING.  If not, see
-<http://www.gnu.org/licenses/>.
-
-*/
-
-#ifdef HAVE_CONFIG_H
-#  include <config.h>
-#endif
-
-#include <cassert>
-
-#include "floatQRP.h"
-#include "f77-fcn.h"
-#include "lo-error.h"
-#include "oct-locbuf.h"
-
-extern "C"
-{
-  F77_RET_T
-  F77_FUNC (sgeqp3, SGEQP3) (const octave_idx_type&, const octave_idx_type&,
-                             float*, const octave_idx_type&, octave_idx_type*,
-                             float*, float*, const octave_idx_type&,
-                             octave_idx_type&);
-}
-
-// It would be best to share some of this code with QR class...
-
-FloatQRP::FloatQRP (const FloatMatrix& a, type qr_type)
-  : qr<FloatMatrix> (), p ()
-{
-  init (a, qr_type);
-}
-
-void
-FloatQRP::init (const FloatMatrix& a, type qr_type)
-{
-  assert (qr_type != qr<FloatMatrix>::raw);
-
-  octave_idx_type m = a.rows ();
-  octave_idx_type n = a.cols ();
-
-  octave_idx_type min_mn = m < n ? m : n;
-  OCTAVE_LOCAL_BUFFER (float, tau, min_mn);
-
-  octave_idx_type info = 0;
-
-  FloatMatrix afact = a;
-  if (m > n && qr_type == qr<FloatMatrix>::std)
-    afact.resize (m, m);
-
-  MArray<octave_idx_type> jpvt (dim_vector (n, 1), 0);
-
-  if (m > 0)
-    {
-      // workspace query.
-      float rlwork;
-      F77_XFCN (sgeqp3, SGEQP3, (m, n, afact.fortran_vec (),
-                                 m, jpvt.fortran_vec (), tau,
-                                 &rlwork, -1, info));
-
-      // allocate buffer and do the job.
-      octave_idx_type lwork = rlwork;
-      lwork = std::max (lwork, static_cast<octave_idx_type> (1));
-      OCTAVE_LOCAL_BUFFER (float, work, lwork);
-      F77_XFCN (sgeqp3, SGEQP3, (m, n, afact.fortran_vec (),
-                                 m, jpvt.fortran_vec (), tau,
-                                 work, lwork, info));
-    }
-  else
-    for (octave_idx_type i = 0; i < n; i++) jpvt(i) = i+1;
-
-  // Form Permutation matrix (if economy is requested, return the
-  // indices only!)
-
-  jpvt -= static_cast<octave_idx_type> (1);
-  p = PermMatrix (jpvt, true);
-
-
-  form (n, afact, tau, qr_type);
-}
-
-FloatRowVector
-FloatQRP::Pvec (void) const
-{
-  Array<float> pa (p.col_perm_vec ());
-  FloatRowVector pv (MArray<float> (pa) + 1.0f);
-  return pv;
-}
diff --git a/liboctave/numeric/floatQRP.h b/liboctave/numeric/floatQRP.h
deleted file mode 100644
--- a/liboctave/numeric/floatQRP.h
+++ /dev/null
@@ -1,76 +0,0 @@
-/*
-
-Copyright (C) 1994-2015 John W. Eaton
-
-This file is part of Octave.
-
-Octave is free software; you can redistribute it and/or modify it
-under the terms of the GNU General Public License as published by the
-Free Software Foundation; either version 3 of the License, or (at your
-option) any later version.
-
-Octave is distributed in the hope that it will be useful, but WITHOUT
-ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
-for more details.
-
-You should have received a copy of the GNU General Public License
-along with Octave; see the file COPYING.  If not, see
-<http://www.gnu.org/licenses/>.
-
-*/
-
-#if ! defined (octave_floatQRP_h)
-#define octave_floatQRP_h 1
-
-#include "octave-config.h"
-
-#include <iosfwd>
-
-#include "PermMatrix.h"
-#include "fColVector.h"
-#include "fMatrix.h"
-#include "fRowVector.h"
-#include "qr.h"
-
-class
-OCTAVE_API
-FloatQRP : public qr<FloatMatrix>
-{
-public:
-
-  typedef qr<FloatMatrix>::type type;
-
-  FloatQRP (void) : qr<FloatMatrix> (), p () { }
-
-  FloatQRP (const FloatMatrix&, type = qr<FloatMatrix>::std);
-
-  FloatQRP (const FloatQRP& a) : qr<FloatMatrix> (a), p (a.p) { }
-
-  FloatQRP& operator = (const FloatQRP& a)
-  {
-    if (this != &a)
-      {
-        qr<FloatMatrix>::operator = (a);
-        p = a.p;
-      }
-
-    return *this;
-  }
-
-  ~FloatQRP (void) { }
-
-  void init (const FloatMatrix&, type = qr<FloatMatrix>::std);
-
-  PermMatrix P (void) const { return p; }
-
-  FloatRowVector Pvec (void) const;
-
-  friend std::ostream&  operator << (std::ostream&, const FloatQRP&);
-
-protected:
-
-  PermMatrix p;
-};
-
-#endif
diff --git a/liboctave/numeric/module.mk b/liboctave/numeric/module.mk
--- a/liboctave/numeric/module.mk
+++ b/liboctave/numeric/module.mk
@@ -3,17 +3,16 @@ LIBOCTAVE_OPT_INC = \
   liboctave/numeric/DASRT-opts.h \
   liboctave/numeric/DASSL-opts.h \
   liboctave/numeric/LSODE-opts.h \
   liboctave/numeric/Quad-opts.h
 
 LIBOCTAVE_OPT_IN = $(LIBOCTAVE_OPT_INC:.h=.in)
 
 NUMERIC_INC = \
-  liboctave/numeric/CmplxQRP.h \
   liboctave/numeric/CollocWt.h \
   liboctave/numeric/DAE.h \
   liboctave/numeric/DAEFunc.h \
   liboctave/numeric/DAERT.h \
   liboctave/numeric/DAERTFunc.h \
   liboctave/numeric/DASPK.h \
   liboctave/numeric/DASRT.h \
   liboctave/numeric/DASSL.h \
@@ -27,75 +26,70 @@ NUMERIC_INC = \
   liboctave/numeric/Quad.h \
   liboctave/numeric/aepbalance.h \
   liboctave/numeric/base-dae.h \
   liboctave/numeric/base-de.h \
   liboctave/numeric/base-min.h \
   liboctave/numeric/bsxfun-decl.h \
   liboctave/numeric/bsxfun.h \
   liboctave/numeric/chol.h \
-  liboctave/numeric/dbleQRP.h \
   liboctave/numeric/eigs-base.h \
-  liboctave/numeric/fCmplxQRP.h \
   liboctave/numeric/fEIG.h \
-  liboctave/numeric/floatQRP.h \
   liboctave/numeric/gepbalance.h \
   liboctave/numeric/hess.h \
   liboctave/numeric/lo-mappers.h \
   liboctave/numeric/lo-specfun.h \
   liboctave/numeric/lu.h \
   liboctave/numeric/oct-convn.h \
   liboctave/numeric/oct-fftw.h \
   liboctave/numeric/oct-norm.h \
   liboctave/numeric/oct-rand.h \
   liboctave/numeric/oct-spparms.h \
   liboctave/numeric/qr.h \
+  liboctave/numeric/qrp.h \
   liboctave/numeric/randgamma.h \
   liboctave/numeric/randmtzig.h \
   liboctave/numeric/randpoisson.h \
   liboctave/numeric/schur.h \
   liboctave/numeric/sparse-chol.h \
   liboctave/numeric/sparse-dmsolve.h \
   liboctave/numeric/sparse-lu.h \
   liboctave/numeric/sparse-qr.h \
   liboctave/numeric/svd.h
 
 NUMERIC_C_SRC = \
   liboctave/numeric/randgamma.c \
   liboctave/numeric/randmtzig.c \
   liboctave/numeric/randpoisson.c
 
 NUMERIC_SRC = \
-  liboctave/numeric/CmplxQRP.cc \
   liboctave/numeric/CollocWt.cc \
   liboctave/numeric/DASPK.cc \
   liboctave/numeric/DASRT.cc \
   liboctave/numeric/DASSL.cc \
   liboctave/numeric/EIG.cc \
   liboctave/numeric/LSODE.cc \
   liboctave/numeric/ODES.cc \
   liboctave/numeric/Quad.cc \
   liboctave/numeric/aepbalance.cc \
   liboctave/numeric/chol.cc \
-  liboctave/numeric/dbleQRP.cc \
   liboctave/numeric/eigs-base.cc \
-  liboctave/numeric/fCmplxQRP.cc \
   liboctave/numeric/fEIG.cc \
-  liboctave/numeric/floatQRP.cc \
   liboctave/numeric/gepbalance.cc \
   liboctave/numeric/hess.cc \
   liboctave/numeric/lo-mappers.cc \
   liboctave/numeric/lo-specfun.cc \
   liboctave/numeric/lu.cc \
   liboctave/numeric/oct-convn.cc \
   liboctave/numeric/oct-fftw.cc \
   liboctave/numeric/oct-norm.cc \
   liboctave/numeric/oct-rand.cc \
   liboctave/numeric/oct-spparms.cc \
   liboctave/numeric/qr.cc \
+  liboctave/numeric/qrp.cc \
   liboctave/numeric/schur.cc \
   liboctave/numeric/sparse-chol.cc \
   liboctave/numeric/sparse-dmsolve.cc \
   liboctave/numeric/sparse-lu.cc \
   liboctave/numeric/sparse-qr.cc \
   liboctave/numeric/svd.cc \
   $(NUMERIC_C_SRC)
 
diff --git a/liboctave/numeric/dbleQRP.cc b/liboctave/numeric/qrp.cc
rename from liboctave/numeric/dbleQRP.cc
rename to liboctave/numeric/qrp.cc
--- a/liboctave/numeric/dbleQRP.cc
+++ b/liboctave/numeric/qrp.cc
@@ -1,11 +1,11 @@
 /*
 
-Copyright (C) 1994-2015 John W. Eaton
+Copyright (C) 1994-2015 John W. Eatonn
 Copyright (C) 2009 VZLU Prague
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 3 of the License, or (at your
 option) any later version.
@@ -22,40 +22,58 @@ along with Octave; see the file COPYING.
 */
 
 #ifdef HAVE_CONFIG_H
 #  include <config.h>
 #endif
 
 #include <cassert>
 
-#include "dbleQRP.h"
+#include "CMatrix.h"
+#include "dMatrix.h"
+#include "dRowVector.h"
 #include "f77-fcn.h"
+#include "fCMatrix.h"
+#include "fMatrix.h"
+#include "fRowVector.h"
 #include "lo-error.h"
 #include "oct-locbuf.h"
+#include "qrp.h"
 
 extern "C"
 {
   F77_RET_T
   F77_FUNC (dgeqp3, DGEQP3) (const octave_idx_type&, const octave_idx_type&,
                              double*, const octave_idx_type&,
                              octave_idx_type*, double*, double*,
                              const octave_idx_type&, octave_idx_type&);
+
+  F77_RET_T
+  F77_FUNC (sgeqp3, SGEQP3) (const octave_idx_type&, const octave_idx_type&,
+                             float*, const octave_idx_type&, octave_idx_type*,
+                             float*, float*, const octave_idx_type&,
+                             octave_idx_type&);
+  F77_RET_T
+  F77_FUNC (zgeqp3, ZGEQP3) (const octave_idx_type&, const octave_idx_type&,
+                             Complex*, const octave_idx_type&,
+                             octave_idx_type*, Complex*, Complex*,
+                             const octave_idx_type&, double*,
+                             octave_idx_type&);
+  F77_RET_T
+  F77_FUNC (cgeqp3, CGEQP3) (const octave_idx_type&, const octave_idx_type&,
+                             FloatComplex*, const octave_idx_type&,
+                             octave_idx_type*, FloatComplex*, FloatComplex*,
+                             const octave_idx_type&, float*, octave_idx_type&);
 }
 
-// It would be best to share some of this code with qr<Matrix> class...
+// Specialization.
 
-QRP::QRP (const Matrix& a, type qr_type)
-  : qr<Matrix> (), p ()
-{
-  init (a, qr_type);
-}
-
+template <>
 void
-QRP::init (const Matrix& a, type qr_type)
+qrp<Matrix>::init (const Matrix& a, type qr_type)
 {
   assert (qr_type != qr<Matrix>::raw);
 
   octave_idx_type m = a.rows ();
   octave_idx_type n = a.cols ();
 
   octave_idx_type min_mn = m < n ? m : n;
   OCTAVE_LOCAL_BUFFER (double, tau, min_mn);
@@ -92,15 +110,222 @@ QRP::init (const Matrix& a, type qr_type
 
   jpvt -= static_cast<octave_idx_type> (1);
   p = PermMatrix (jpvt, true);
 
 
   form (n, afact, tau, qr_type);
 }
 
+template <>
+qrp<Matrix>::qrp (const Matrix& a, type qr_type)
+  : qr<Matrix> (), p ()
+{
+  init (a, qr_type);
+}
+
+template <>
 RowVector
-QRP::Pvec (void) const
+qrp<Matrix>::Pvec (void) const
 {
   Array<double> pa (p.col_perm_vec ());
   RowVector pv (MArray<double> (pa) + 1.0);
   return pv;
 }
+
+template <>
+void
+qrp<FloatMatrix>::init (const FloatMatrix& a, type qr_type)
+{
+  assert (qr_type != qr<FloatMatrix>::raw);
+
+  octave_idx_type m = a.rows ();
+  octave_idx_type n = a.cols ();
+
+  octave_idx_type min_mn = m < n ? m : n;
+  OCTAVE_LOCAL_BUFFER (float, tau, min_mn);
+
+  octave_idx_type info = 0;
+
+  FloatMatrix afact = a;
+  if (m > n && qr_type == qr<FloatMatrix>::std)
+    afact.resize (m, m);
+
+  MArray<octave_idx_type> jpvt (dim_vector (n, 1), 0);
+
+  if (m > 0)
+    {
+      // workspace query.
+      float rlwork;
+      F77_XFCN (sgeqp3, SGEQP3, (m, n, afact.fortran_vec (),
+                                 m, jpvt.fortran_vec (), tau,
+                                 &rlwork, -1, info));
+
+      // allocate buffer and do the job.
+      octave_idx_type lwork = rlwork;
+      lwork = std::max (lwork, static_cast<octave_idx_type> (1));
+      OCTAVE_LOCAL_BUFFER (float, work, lwork);
+      F77_XFCN (sgeqp3, SGEQP3, (m, n, afact.fortran_vec (),
+                                 m, jpvt.fortran_vec (), tau,
+                                 work, lwork, info));
+    }
+  else
+    for (octave_idx_type i = 0; i < n; i++) jpvt(i) = i+1;
+
+  // Form Permutation matrix (if economy is requested, return the
+  // indices only!)
+
+  jpvt -= static_cast<octave_idx_type> (1);
+  p = PermMatrix (jpvt, true);
+
+
+  form (n, afact, tau, qr_type);
+}
+
+template <>
+qrp<FloatMatrix>::qrp (const FloatMatrix& a, type qr_type)
+  : qr<FloatMatrix> (), p ()
+{
+  init (a, qr_type);
+}
+
+template <>
+FloatRowVector
+qrp<FloatMatrix>::Pvec (void) const
+{
+  Array<float> pa (p.col_perm_vec ());
+  FloatRowVector pv (MArray<float> (pa) + 1.0f);
+  return pv;
+}
+
+template <>
+void
+qrp<ComplexMatrix>::init (const ComplexMatrix& a, type qr_type)
+{
+  assert (qr_type != qr<ComplexMatrix>::raw);
+
+  octave_idx_type m = a.rows ();
+  octave_idx_type n = a.cols ();
+
+  octave_idx_type min_mn = m < n ? m : n;
+  OCTAVE_LOCAL_BUFFER (Complex, tau, min_mn);
+
+  octave_idx_type info = 0;
+
+  ComplexMatrix afact = a;
+  if (m > n && qr_type == qr<ComplexMatrix>::std)
+    afact.resize (m, m);
+
+  MArray<octave_idx_type> jpvt (dim_vector (n, 1), 0);
+
+  if (m > 0)
+    {
+      OCTAVE_LOCAL_BUFFER (double, rwork, 2*n);
+
+      // workspace query.
+      Complex clwork;
+      F77_XFCN (zgeqp3, ZGEQP3, (m, n, afact.fortran_vec (),
+                                 m, jpvt.fortran_vec (), tau,
+                                 &clwork, -1, rwork, info));
+
+      // allocate buffer and do the job.
+      octave_idx_type lwork = clwork.real ();
+      lwork = std::max (lwork, static_cast<octave_idx_type> (1));
+      OCTAVE_LOCAL_BUFFER (Complex, work, lwork);
+      F77_XFCN (zgeqp3, ZGEQP3, (m, n, afact.fortran_vec (),
+                                 m, jpvt.fortran_vec (), tau,
+                                 work, lwork, rwork, info));
+    }
+  else
+    for (octave_idx_type i = 0; i < n; i++) jpvt(i) = i+1;
+
+  // Form Permutation matrix (if economy is requested, return the
+  // indices only!)
+
+  jpvt -= static_cast<octave_idx_type> (1);
+  p = PermMatrix (jpvt, true);
+
+
+  form (n, afact, tau, qr_type);
+}
+
+template <>
+qrp<ComplexMatrix>::qrp (const ComplexMatrix& a, type qr_type)
+  : qr<ComplexMatrix> (), p ()
+{
+  init (a, qr_type);
+}
+
+template <>
+RowVector
+qrp<ComplexMatrix>::Pvec (void) const
+{
+  Array<double> pa (p.col_perm_vec ());
+  RowVector pv (MArray<double> (pa) + 1.0);
+  return pv;
+}
+
+template <>
+void
+qrp<FloatComplexMatrix>::init (const FloatComplexMatrix& a, type qr_type)
+{
+  assert (qr_type != qr<FloatComplexMatrix>::raw);
+
+  octave_idx_type m = a.rows ();
+  octave_idx_type n = a.cols ();
+
+  octave_idx_type min_mn = m < n ? m : n;
+  OCTAVE_LOCAL_BUFFER (FloatComplex, tau, min_mn);
+
+  octave_idx_type info = 0;
+
+  FloatComplexMatrix afact = a;
+  if (m > n && qr_type == qr<FloatComplexMatrix>::std)
+    afact.resize (m, m);
+
+  MArray<octave_idx_type> jpvt (dim_vector (n, 1), 0);
+
+  if (m > 0)
+    {
+      OCTAVE_LOCAL_BUFFER (float, rwork, 2*n);
+
+      // workspace query.
+      FloatComplex clwork;
+      F77_XFCN (cgeqp3, CGEQP3, (m, n, afact.fortran_vec (),
+                                 m, jpvt.fortran_vec (), tau,
+                                 &clwork, -1, rwork, info));
+
+      // allocate buffer and do the job.
+      octave_idx_type lwork = clwork.real ();
+      lwork = std::max (lwork, static_cast<octave_idx_type> (1));
+      OCTAVE_LOCAL_BUFFER (FloatComplex, work, lwork);
+      F77_XFCN (cgeqp3, CGEQP3, (m, n, afact.fortran_vec (),
+                                 m, jpvt.fortran_vec (), tau,
+                                 work, lwork, rwork, info));
+    }
+  else
+    for (octave_idx_type i = 0; i < n; i++) jpvt(i) = i+1;
+
+  // Form Permutation matrix (if economy is requested, return the
+  // indices only!)
+
+  jpvt -= static_cast<octave_idx_type> (1);
+  p = PermMatrix (jpvt, true);
+
+
+  form (n, afact, tau, qr_type);
+}
+
+template <>
+qrp<FloatComplexMatrix>::qrp (const FloatComplexMatrix& a, type qr_type)
+  : qr<FloatComplexMatrix> (), p ()
+{
+  init (a, qr_type);
+}
+
+template <>
+FloatRowVector
+qrp<FloatComplexMatrix>::Pvec (void) const
+{
+  Array<float> pa (p.col_perm_vec ());
+  FloatRowVector pv (MArray<float> (pa) + 1.0f);
+  return pv;
+}
diff --git a/liboctave/numeric/dbleQRP.h b/liboctave/numeric/qrp.h
rename from liboctave/numeric/dbleQRP.h
rename to liboctave/numeric/qrp.h
--- a/liboctave/numeric/dbleQRP.h
+++ b/liboctave/numeric/qrp.h
@@ -1,11 +1,12 @@
 /*
 
 Copyright (C) 1994-2015 John W. Eaton
+Copyright (C) 2009 VZLU Prague
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 3 of the License, or (at your
 option) any later version.
 
@@ -15,62 +16,57 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, see
 <http://www.gnu.org/licenses/>.
 
 */
 
-#if ! defined (octave_dbleQRP_h)
-#define octave_dbleQRP_h 1
+#if ! defined (octave_qrp_h)
+#define octave_qrp_h 1
 
 #include "octave-config.h"
 
-#include <iosfwd>
-
 #include "PermMatrix.h"
-#include "dColVector.h"
-#include "dMatrix.h"
-#include "dRowVector.h"
 #include "qr.h"
 
+template <typename T>
 class
-OCTAVE_API
-QRP : public qr<Matrix>
+qrp : public qr<T>
 {
 public:
 
-  typedef qr<Matrix>::type type;
+  typedef typename T::real_row_vector_type RV_T;
 
-  QRP (void) : qr<Matrix> (), p () { }
+  typedef typename qr<T>::type type;
+
+  qrp (void) : qr<T> (), p () { }
 
-  QRP (const Matrix&, type = qr<Matrix>::std);
+  qrp (const T&, type = qr<T>::std);
 
-  QRP (const QRP& a) : qr<Matrix> (a), p (a.p) { }
+  qrp (const qrp& a) : qr<T> (a), p (a.p) { }
 
-  QRP& operator = (const QRP& a)
+  qrp& operator = (const qrp& a)
   {
     if (this != &a)
       {
-        qr<Matrix>::operator = (a);
+        qr<T>::operator = (a);
         p = a.p;
       }
 
     return *this;
   }
 
-  ~QRP (void) { }
+  ~qrp (void) { }
 
-  void init (const Matrix&, type = qr<Matrix>::std);
+  void init (const T&, type = qr<T>::std);
 
   PermMatrix P (void) const { return p; }
 
-  RowVector Pvec (void) const;
+  RV_T Pvec (void) const;
 
-  friend std::ostream&  operator << (std::ostream&, const QRP&);
-
-protected:
+private:
 
   PermMatrix p;
 };
 
 #endif
diff --git a/liboctave/operators/mx-defs.h b/liboctave/operators/mx-defs.h
--- a/liboctave/operators/mx-defs.h
+++ b/liboctave/operators/mx-defs.h
@@ -71,20 +71,17 @@ template <typename T> class hess;
 template <typename T> class schur;
 
 template <typename T> class svd;
 
 template <typename T> class lu;
 
 template <typename T> class qr;
 
-class QRP;
-class ComplexQRP;
-class FloatQRP;
-class FloatComplexQRP;
+template <typename T> class qrp;
 
 // Other data types we use but that don't always need to have full
 // declarations.
 
 #include "oct-cmplx.h"
 
 #ifndef MAPPER_FCN_TYPEDEFS
 #  define MAPPER_FCN_TYPEDEFS 1
