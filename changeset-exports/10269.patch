# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1265451103 -3600
#      Sat Feb 06 11:11:43 2010 +0100
# Node ID 217d36560dfafb0e60be64794c129ecb3972cae2
# Parent  9a16a61ed43d6e1064ef698f6d8c73ba6eef17eb
small fixes to accumarray

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2010-02-06  Jaroslav Hajek  <highegg@gmail.com>
+
+	* general/accumarray.m: Small fixes.
+
 2010-02-05  Jaroslav Hajek  <highegg@gmail.com>
 
 	* general/accumarray.m: Rewrite. Split sparse and dense case. Treat
 	cell-valued subs efficiently. Optimize dense case for @sum, @max and
 	@min. Optimize the @(x){x} reduction. Add tests.
 
 2010-02-04  Jaroslav Hajek  <highegg@gmail.com>
 
diff --git a/scripts/general/accumarray.m b/scripts/general/accumarray.m
--- a/scripts/general/accumarray.m
+++ b/scripts/general/accumarray.m
@@ -143,16 +143,18 @@ function A = accumarray (subs, val, sz =
         error ("accumarray: dimensions mismatch")
       endif
 
       ## Convert multidimensional subscripts.
       if (ismatrix (subs))
         subs = num2cell (subs, 1);
       endif
       subs = sub2ind (sz, subs{:});
+    elseif (length (sz) < 2)
+      error ("accumarray: needs at least 2 dimensions");
     endif
 
 
     ## Some built-in reductions handled efficiently.
 
     if (isempty (func) || func == @sum)
       ## Fast summation.
       if (isempty (sz))
@@ -169,16 +171,18 @@ function A = accumarray (subs, val, sz =
         mask(subs) = false;
         A(mask) = fillval;
       endif
     elseif (func == @max)
       ## Fast maximization.
 
       if (isinteger (val))
         zero = intmin (class (val));
+      elseif (islogical (val))
+        zero = false;
       elseif (fillval == 0 && all (val(:) >= 0))
         ## This is a common case - fillval is zero, all numbers nonegative.
         zero = 0;
       else
         zero = NaN; # Neutral value.
       endif
 
       if (isempty (sz))
@@ -193,16 +197,18 @@ function A = accumarray (subs, val, sz =
         mask(subs) = false;
         A(mask) = fillval;
       endif
     elseif (func == @min)
       ## Fast minimization.
 
       if (isinteger (val))
         zero = intmax (class (val));
+      elseif (islogical (val))
+        zero = true;
       else
         zero = NaN; # Neutral value.
       endif
 
       if (isempty (sz))
         A = __accumarray_min__ (subs, val, zero);
       else
         A = __accumarray_min__ (subs, val, zero, prod (sz));
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -6342,17 +6342,17 @@ Undocumented internal function.\n\
 
           if (vals.is_single_type ())
             {
               if (vals.is_complex_type ())
                 retval = do_accumarray_sum (idx, vals.float_complex_array_value (), n);
               else
                 retval = do_accumarray_sum (idx, vals.float_array_value (), n);
             }
-          else if (vals.is_numeric_type () || vals.is_bool_type () || vals.is_string ())
+          else if (vals.is_numeric_type () || vals.is_bool_type ())
             {
               if (vals.is_complex_type ())
                 retval = do_accumarray_sum (idx, vals.complex_array_value (), n);
               else
                 retval = do_accumarray_sum (idx, vals.array_value (), n);
             }
           else
             gripe_wrong_type_arg ("accumarray", vals);
