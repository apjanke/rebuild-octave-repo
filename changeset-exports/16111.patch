# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1361860451 18000
#      Tue Feb 26 01:34:11 2013 -0500
# Node ID 3ec4f6488569ab6ceb55163d079010d49fe58b46
# Parent  7302f8a4df832d9186f36862a1ba386487badf3d
move token stack to lexical_feedback class

* lex.h, lex.ll (token_stack): Move global variable to
lexical_feedback class.  Change all uses.
* lex.ll (lexical_feedback::~lexical_feedback): Move definition here
from lex.h.  Clean up token_stack.

diff --git a/libinterp/parse-tree/lex.h b/libinterp/parse-tree/lex.h
--- a/libinterp/parse-tree/lex.h
+++ b/libinterp/parse-tree/lex.h
@@ -49,16 +49,20 @@ extern OCTINTERP_API void clear_all_buff
 extern OCTINTERP_API void cleanup_parser (void);
 
 // Is the given string a keyword?
 extern bool is_keyword (const std::string& s);
 
 extern void prep_lexer_for_script_file (void);
 extern void prep_lexer_for_function_file (void);
 
+
+// Forward decl for lexical_feedback::token_stack.
+class token;
+
 // For communication between the lexer and parser.
 
 class
 lexical_feedback
 {
 public:
 
   // Did eat_whitespace or eat_continuation eat a space or tab, or a
@@ -170,17 +174,17 @@ public:
       looping (0), defining_func (0), looking_at_function_handle (0),
       block_comment_nesting_level (0),
       looking_at_object_index (), parsed_function_name (),
       pending_local_variables (), nesting_level ()
   {
     init ();
   }
 
-  ~lexical_feedback (void) { }
+  ~lexical_feedback (void);
 
   void init (void)
   {
     // The closest paren, brace, or bracket nesting is not an object
     // index.
     looking_at_object_index.push_front (false);
   }
 
@@ -275,16 +279,21 @@ public:
 
   // Set of identifiers that might be local variable names.
   std::set<std::string> pending_local_variables;
 
   // Is the closest nesting level a square bracket, squiggly brace or
   // a paren?
   bbp_nesting_level nesting_level;
 
+  // Stack to hold tokens so that we can delete them when the parser is
+  // reset and avoid growing forever just because we are stashing some
+  // information.
+  std::stack <token*> token_stack;
+
 private:
 
   // No copying!
 
   lexical_feedback (const lexical_feedback&);
 
   lexical_feedback& operator = (const lexical_feedback&);
 };
diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -155,27 +155,27 @@ along with Octave; see the file COPYING.
     } \
   while (0)
 
 #define TOK_PUSH_AND_RETURN(name, tok) \
   do \
     { \
       yylval.tok_val = new token (name, curr_lexer->input_line_number, \
                                   curr_lexer->current_input_column); \
-      token_stack.push (yylval.tok_val); \
+      curr_lexer->token_stack.push (yylval.tok_val); \
       TOK_RETURN (tok); \
     } \
   while (0)
 
 #define BIN_OP_RETURN_INTERNAL(tok, convert, bos, qit) \
   do \
     { \
       yylval.tok_val = new token (curr_lexer->input_line_number, \
                                   curr_lexer->current_input_column); \
-      token_stack.push (yylval.tok_val); \
+      curr_lexer->token_stack.push (yylval.tok_val); \
       curr_lexer->current_input_column += yyleng; \
       curr_lexer->quote_is_transpose = qit; \
       curr_lexer->convert_spaces_to_comma = convert; \
       curr_lexer->looking_for_object_index = false; \
       curr_lexer->at_beginning_of_statement = bos; \
       COUNT_TOK_AND_RETURN (tok); \
     } \
   while (0)
@@ -209,25 +209,16 @@ along with Octave; see the file COPYING.
       if (lexer_debug_flag) \
         lexer_debug (pattern, yytext); \
     } \
   while (0)
 
 // The state of the lexer.
 lexical_feedback *curr_lexer = 0;
 
-// Stack to hold tokens so that we can delete them when the parser is
-// reset and avoid growing forever just because we are stashing some
-// information.  This has to appear before lex.h is included, because
-// one of the macros defined there uses token_stack.
-//
-// FIXME -- this should really be static, but that causes
-// problems on some systems.
-std::stack <token*> token_stack;
-
 static bool Vdisplay_tokens = false;
 
 static unsigned int Vtoken_count = 0;
 
 // Internal variable for lexer debugging state.
 static bool lexer_debug_flag = false;
 
 // Forward declarations for functions defined at the bottom of this
@@ -1046,24 +1037,16 @@ reset_parser (void)
   // Start off on the right foot.
   BEGIN (INITIAL);
 
   parser_symtab_context.clear ();
 
   // We do want a prompt by default.
   promptflag = 1;
 
-  // Clear out the stack of token info used to track line and column
-  // numbers.
-  while (! token_stack.empty ())
-    {
-      delete token_stack.top ();
-      token_stack.pop ();
-    }
-
   // Only ask for input from stdin if we are expecting interactive
   // input.
 
   if (! quitting_gracefully
       && (interactive || forced_interactive)
       && ! (reading_fcn_file
             || reading_classdef_file
             || reading_script_file
@@ -1217,16 +1200,28 @@ display_character (char c)
         break;
 
       case 127:
         std::cerr << "DEL";
         break;
       }
 }
 
+lexical_feedback::~lexical_feedback (void)
+{
+  // Clear out the stack of token info used to track line and
+  // column numbers.
+
+  while (! token_stack.empty ())
+    {
+      delete token_stack.top ();
+      token_stack.pop ();
+    }
+}
+
 static int
 text_yyinput (void)
 {
   int c = yyinput ();
 
   if (lexer_debug_flag)
     {
       std::cerr << "I: ";
@@ -1593,17 +1588,17 @@ is_keyword_token (const std::string& s)
 
         default:
           panic_impossible ();
         }
 
       if (! yylval.tok_val)
         yylval.tok_val = new token (l, c);
 
-      token_stack.push (yylval.tok_val);
+      curr_lexer->token_stack.push (yylval.tok_val);
 
       return kw->tok;
     }
 
   return 0;
 }
 
 static bool
@@ -2351,17 +2346,17 @@ handle_number (void)
   curr_lexer->quote_is_transpose = true;
   curr_lexer->convert_spaces_to_comma = true;
   curr_lexer->looking_for_object_index = false;
   curr_lexer->at_beginning_of_statement = false;
 
   yylval.tok_val = new token (value, yytext, curr_lexer->input_line_number,
                               curr_lexer->current_input_column);
 
-  token_stack.push (yylval.tok_val);
+  curr_lexer->token_stack.push (yylval.tok_val);
 
   curr_lexer->current_input_column += yyleng;
 
   do_comma_insert_check ();
 }
 
 // We have seen a backslash and need to find out if it should be
 // treated as a continuation character.  If so, this eats it, up to
@@ -2566,17 +2561,17 @@ handle_string (char delim)
                     s = buf.str ();
                   else
                     s = do_string_escapes (buf.str ());
 
                   curr_lexer->quote_is_transpose = true;
                   curr_lexer->convert_spaces_to_comma = true;
 
                   yylval.tok_val = new token (s, bos_line, bos_col);
-                  token_stack.push (yylval.tok_val);
+                  curr_lexer->token_stack.push (yylval.tok_val);
 
                   if (delim == '"')
                     gripe_matlab_incompatible ("\" used as string delimiter");
                   else if (delim == '\'')
                     gripe_single_quote_string ();
 
                   curr_lexer->looking_for_object_index = true;
                   curr_lexer->at_beginning_of_statement = false;
@@ -3084,17 +3079,17 @@ handle_superclass_identifier (void)
     }
 
   yylval.tok_val
     = new token (meth.empty () ? 0 : &(symbol_table::insert (meth)),
                  cls.empty () ? 0 : &(symbol_table::insert (cls)),
                  pkg.empty () ? 0 : &(symbol_table::insert (pkg)),
                  curr_lexer->input_line_number,
                  curr_lexer->current_input_column);
-  token_stack.push (yylval.tok_val);
+  curr_lexer->token_stack.push (yylval.tok_val);
 
   curr_lexer->convert_spaces_to_comma = true;
   curr_lexer->current_input_column += yyleng;
 
   return SUPERCLASSREF;
 }
 
 static int
@@ -3120,17 +3115,17 @@ handle_meta_identifier (void)
     }
 
   yylval.tok_val
     = new token (cls.empty () ? 0 : &(symbol_table::insert (cls)),
                  pkg.empty () ? 0 : &(symbol_table::insert (pkg)),
                  curr_lexer->input_line_number,
                  curr_lexer->current_input_column);
 
-  token_stack.push (yylval.tok_val);
+  curr_lexer->token_stack.push (yylval.tok_val);
 
   curr_lexer->convert_spaces_to_comma = true;
   curr_lexer->current_input_column += yyleng;
 
   return METAQUERY;
 }
 
 // Figure out exactly what kind of token to return when we have seen
@@ -3159,17 +3154,17 @@ handle_identifier (void)
     {
       do_comma_insert_check ();
 
       maybe_unput_comma (spc_gobbled);
 
       yylval.tok_val = new token (tok, curr_lexer->input_line_number,
                                   curr_lexer->current_input_column);
 
-      token_stack.push (yylval.tok_val);
+      curr_lexer->token_stack.push (yylval.tok_val);
 
       curr_lexer->quote_is_transpose = true;
       curr_lexer->convert_spaces_to_comma = true;
       curr_lexer->looking_for_object_index = true;
 
       curr_lexer->current_input_column += yyleng;
 
       return STRUCT_ELT;
@@ -3196,17 +3191,17 @@ handle_identifier (void)
 
           return LEXICAL_ERROR;
         }
       else
         {
           yylval.tok_val = new token (tok, curr_lexer->input_line_number,
                                       curr_lexer->current_input_column);
 
-          token_stack.push (yylval.tok_val);
+          curr_lexer->token_stack.push (yylval.tok_val);
 
           curr_lexer->current_input_column += yyleng;
           curr_lexer->quote_is_transpose = false;
           curr_lexer->convert_spaces_to_comma = true;
           curr_lexer->looking_for_object_index = true;
 
           return FCN_HANDLE;
         }
@@ -3280,17 +3275,17 @@ handle_identifier (void)
 
   if (tok == "end")
     tok = "__end__";
 
   yylval.tok_val = new token (&(symbol_table::insert (tok)),
                               curr_lexer->input_line_number,
                               curr_lexer->current_input_column);
 
-  token_stack.push (yylval.tok_val);
+  curr_lexer->token_stack.push (yylval.tok_val);
 
   // After seeing an identifer, it is ok to convert spaces to a comma
   // (if needed).
 
   curr_lexer->convert_spaces_to_comma = true;
 
   if (! (next_tok_is_eq || YY_START == COMMAND_START))
     {
