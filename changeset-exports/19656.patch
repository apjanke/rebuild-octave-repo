# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1422995278 28800
#      Tue Feb 03 12:27:58 2015 -0800
# Node ID bf88eab464b8e14203992a1a8c424c7beab296b5
# Parent  af4ad21a82fc09dc81be5d77ceb31c4404d1b27d
Detect binary operations with a transposed matrix and forward to BLAS (bug #42716).

* pt-cbinop.cc (tree_compound_binary_expression::rvalue,
tree_compound_binary_expression::rvalue1): New functions.
::rvalue validates input and calls ::rvalue1.
rvalue1 calls do_binary_op with the correct transpose flag.

* pt-cbinop.h: Add new functions to header file.

diff --git a/libinterp/parse-tree/pt-cbinop.cc b/libinterp/parse-tree/pt-cbinop.cc
--- a/libinterp/parse-tree/pt-cbinop.cc
+++ b/libinterp/parse-tree/pt-cbinop.cc
@@ -27,16 +27,59 @@ along with Octave; see the file COPYING.
 #include "error.h"
 #include "oct-obj.h"
 #include "ov.h"
 #include "pt-cbinop.h"
 #include "pt-bp.h"
 #include "pt-unop.h"
 #include "pt-walk.h"
 
+octave_value_list
+tree_compound_binary_expression::rvalue (int nargout)
+{
+  octave_value_list retval;
+
+  if (nargout > 1)
+    error ("binary operator '%s': invalid number of output arguments",
+           oper () . c_str ());
+  else
+    retval = rvalue1 (nargout);
+
+  return retval;
+}
+
+octave_value
+tree_compound_binary_expression::rvalue1 (int)
+{
+  octave_value retval;
+
+  if (error_state)
+    return retval;
+
+  if (op_lhs)
+    {
+      octave_value a = op_lhs->rvalue1 ();
+
+      if (! error_state && a.is_defined () && op_rhs)
+        {
+          octave_value b = op_rhs->rvalue1 ();
+
+          if (! error_state && b.is_defined ())
+            {
+              retval = ::do_binary_op (etype, a, b);
+
+              if (error_state)
+                retval = octave_value ();
+            }
+        }
+    }
+
+  return retval;
+}
+
 // If a tree expression is a transpose or hermitian transpose, return
 // the argument and corresponding operator.
 
 static octave_value::unary_op
 strip_trans_herm (tree_expression *&exp)
 {
   if (exp->is_unary_expression ())
     {
diff --git a/libinterp/parse-tree/pt-cbinop.h b/libinterp/parse-tree/pt-cbinop.h
--- a/libinterp/parse-tree/pt-cbinop.h
+++ b/libinterp/parse-tree/pt-cbinop.h
@@ -47,16 +47,22 @@ public:
                                    octave_value::binary_op t,
                                    tree_expression *ca, tree_expression *cb,
                                    octave_value::compound_binary_op ct)
     : tree_binary_expression (a, b, l, c, t), op_lhs (ca), op_rhs (cb),
       etype (ct) { }
 
   octave_value::compound_binary_op cop_type (void) const { return etype; }
 
+  bool rvalue_ok (void) const { return true; }
+
+  octave_value rvalue1 (int nargout = 1);
+
+  octave_value_list rvalue (int nargout);
+
 private:
 
   tree_expression *op_lhs;
   tree_expression *op_rhs;
   octave_value::compound_binary_op etype;
 
   // No copying!
 
