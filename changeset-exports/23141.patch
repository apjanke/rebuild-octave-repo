# HG changeset patch
# User Rik <rik@octave.org>
# Date 1486097229 28800
#      Thu Feb 02 20:47:09 2017 -0800
# Node ID bfa4ad642fa0aadbd0b920bfd632d907596a74ac
# Parent  e66b3bfea38045dcfc7f9571f7fb6ccfe9ee1609
Disallow p-norm of -Inf for matrices (bug #50194).

* data.cc: Add BIST tests for matrices with p==3, Hamming norm of a vector, and
error case of p==-Inf for matrix.

* oct-norm.cc (p_less1_gripe): Change error message to "p must be >= 1" for
clarity.
* oct-norm.cc (svd_matrix_norm, matrix_norm): Only proceed to calculate matrix
Inf norm if p is infinite and p > 1, i.e., positive Inf.

diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -5655,64 +5655,71 @@ compute the norms of each column and ret
     }
 
   return retval;
 }
 
 /*
 %!shared x
 %! x = [1, -3, 4, 5, -7];
+%!assert (norm (x,0), 5)
 %!assert (norm (x,1), 20)
 %!assert (norm (x,2), 10)
 %!assert (norm (x,3), 8.24257059961711, -4*eps)
 %!assert (norm (x,Inf), 7)
 %!assert (norm (x,-Inf), 1)
 %!assert (norm (x,"inf"), 7)
 %!assert (norm (x,"fro"), 10, -eps)
 %!assert (norm (x), 10)
 %!assert (norm ([1e200, 1]), 1e200)
 %!assert (norm ([3+4i, 3-4i, sqrt(31)]), 9, -4*eps)
 %!shared m
 %! m = magic (4);
 %!assert (norm (m,1), 34)
 %!assert (norm (m,2), 34, -eps)
+%!assert (norm (m,3), 34, -sqrt (eps))
 %!assert (norm (m,Inf), 34)
 %!assert (norm (m,"inf"), 34)
 %!shared m2, flo, fhi
 %! m2 = [1,2;3,4];
 %! flo = 1e-300;
 %! fhi = 1e+300;
 %!assert (norm (flo*m2,"fro"), sqrt (30)*flo, -eps)
 %!assert (norm (fhi*m2,"fro"), sqrt (30)*fhi, -eps)
 
 %!shared x
 %! x = single ([1, -3, 4, 5, -7]);
+%!assert (norm (x,0), single (5))
 %!assert (norm (x,1), single (20))
 %!assert (norm (x,2), single (10))
 %!assert (norm (x,3), single (8.24257059961711), -4*eps ("single"))
 %!assert (norm (x,Inf), single (7))
 %!assert (norm (x,-Inf), single (1))
 %!assert (norm (x,"inf"), single (7))
 %!assert (norm (x,"fro"), single (10), -eps ("single"))
 %!assert (norm (x), single (10))
 %!assert (norm (single ([1e38, 1])), single (1e38))
 %!assert (norm (single ([3+4i, 3-4i, sqrt(31)])), single (9), -4*eps ("single"))
 %!shared m
 %! m = single (magic (4));
 %!assert (norm (m,1), single (34))
 %!assert (norm (m,2), single (34), -eps ("single"))
+%!assert (norm (m,3), single (34), -sqrt (eps ("single")))
 %!assert (norm (m,Inf), single (34))
 %!assert (norm (m,"inf"), single (34))
 %!shared m2, flo, fhi
 %! m2 = single ([1,2;3,4]);
 %! flo = single (1e-300);
 %! fhi = single (1e+300);
 %!assert (norm (flo*m2,"fro"), single (sqrt (30)*flo), -eps ("single"))
 %!assert (norm (fhi*m2,"fro"), single (sqrt (30)*fhi), -eps ("single"))
 
+## Hamming norm (p == 0)
+%!assert (norm ([1, 0, 0, 0, 1], 0), 2)
+
 %!shared q
 %! q = rand (1e3, 3);
 %!assert (norm (q, 3, "rows"), sum (q.^3, 2).^(1/3), sqrt (eps))
 %!assert (norm (q, "fro", "rows"), sum (q.^2, 2).^(1/2), sqrt (eps))
 %!assert (norm (q, "fro", "rows"), sqrt (sumsq (q, 2)), sqrt (eps))
 %!assert (norm (q, "fro", "cols"), sqrt (sumsq (q, 1)), sqrt (eps))
 %!assert (norm (q, 3, "cols"), sum (q.^3, 1).^(1/3), sqrt (eps))
 %!assert (norm (q, "inf", "rows"), norm (q, Inf, "rows"))
@@ -5729,16 +5736,17 @@ compute the norms of each column and ret
 ## Test input validation
 %!error norm ()
 %!error norm (1,2,3,4)
 %!error <unrecognized option> norm (1, "invalid")
 %!error <unrecognized option> norm (1, "rows", "invalid")
 %!error <unrecognized option> norm (1, "invalid", "rows")
 %!error <invalid combination of options> norm (1, "cols", "rows")
 %!error <invalid combination of options> norm (1, "rows", "rows")
+%!error <p must be .= 1> norm (ones (2,2), -Inf)
 */
 
 static octave_value
 unary_op_defun_body (octave_value::unary_op op,
                      const octave_value_list& args)
 {
   if (args.length () != 1)
     print_usage ();
diff --git a/liboctave/numeric/oct-norm.cc b/liboctave/numeric/oct-norm.cc
--- a/liboctave/numeric/oct-norm.cc
+++ b/liboctave/numeric/oct-norm.cc
@@ -466,17 +466,17 @@ R higham (const MatrixT& m, R p, R tol, 
       iter++;
     }
 
   return gamma;
 }
 
 // derive column vector and SVD types
 
-static const char *p_less1_gripe = "xnorm: p must be at least 1";
+static const char *p_less1_gripe = "xnorm: p must be >= 1";
 
 // Static constant to control the maximum number of iterations.  100 seems to
 // be a good value.  Eventually, we can provide a means to change this
 // constant from Octave.
 static int max_norm_iter = 100;
 
 // version with SVD for dense matrices
 template <typename MatrixT, typename VectorT, typename R>
@@ -486,17 +486,17 @@ R svd_matrix_norm (const MatrixT& m, R p
   if (p == 2)
     {
       octave::math::svd<MatrixT> fact
         (m, octave::math::svd<MatrixT>::Type::sigma_only);
       res = fact.singular_values () (0,0);
     }
   else if (p == 1)
     res = xcolnorms (m, 1).max ();
-  else if (lo_ieee_isinf (p))
+  else if (lo_ieee_isinf (p) && p > 1)
     res = xrownorms (m, 1).max ();
   else if (p > 1)
     {
       VectorT x;
       const R sqrteps = std::sqrt (std::numeric_limits<R>::epsilon ());
       res = higham (m, p, sqrteps, max_norm_iter, x);
     }
   else
@@ -507,17 +507,17 @@ R svd_matrix_norm (const MatrixT& m, R p
 
 // SVD-free version for sparse matrices
 template <typename MatrixT, typename VectorT, typename R>
 R matrix_norm (const MatrixT& m, R p, VectorT)
 {
   R res = 0;
   if (p == 1)
     res = xcolnorms (m, 1).max ();
-  else if (lo_ieee_isinf (p))
+  else if (lo_ieee_isinf (p) && p > 1)
     res = xrownorms (m, 1).max ();
   else if (p > 1)
     {
       VectorT x;
       const R sqrteps = std::sqrt (std::numeric_limits<R>::epsilon ());
       res = higham (m, p, sqrteps, max_norm_iter, x);
     }
   else
