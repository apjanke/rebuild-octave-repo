# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1254464864 -7200
#      Fri Oct 02 08:27:44 2009 +0200
# Node ID e793865ede6310232e3ba230eef97b962eb16dc4
# Parent  c5ff5f858cfdbbdc6ae5a55439ee16f2d1baeda0
implement builtin_type

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,12 @@
+2009-10-02  Jaroslav Hajek  <highegg@gmail.com>
+
+	* lo-traits.h (strip_template_param): New trait class.
+
 2009-10-01  Jaroslav Hajek  <highegg@gmail.com>
 
 	* Array.cc (Array<T>::permute): Fast case identity permutation.
 
 2009-09-27  Jaroslav Hajek  <highegg@gmail.com>
 
 	* oct-cmplx.h: Fix complex-real orderings.
 
diff --git a/liboctave/lo-traits.h b/liboctave/lo-traits.h
--- a/liboctave/lo-traits.h
+++ b/liboctave/lo-traits.h
@@ -76,16 +76,33 @@ public:
 template<typename T>
 class ref_param
 {
 public:
 
   typedef typename if_then_else<is_class_type<T>::no, T, T const&>::result type;
 };
 
+// Will turn TemplatedClass<T> to T, leave T otherwise.
+// Useful for stripping wrapper classes, like octave_int.
+
+template<template<typename> class TemplatedClass, typename T>
+class strip_template_param
+{
+public:
+  typedef T type;
+};
+
+template<template<typename> class TemplatedClass, typename T>
+class strip_template_param<TemplatedClass, TemplatedClass<T> >
+{
+public:
+  typedef T type;
+};
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,45 @@
+2009-10-02  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov.h: Define also diag matrix extractors.
+	(octave_type_traits, octave_array_type_traits): Remove.
+	(octave_value::builtin_type): New method.
+	* oct-stream.cc (do_read): Update.
+	* data.cc (identity_matrix): Update.
+	* ov-base.h (builtin_type_t): New enum.
+	(octave_base_value::builtin_type): New method.
+	* ov-re-mat.h (octave_matrix::builtin_type): New method.
+	* ov-flt-re-mat.h (octave_float_matrix::builtin_type): New method.
+	* ov-cx-mat.h (octave_complex_matrix::builtin_type): New method.
+	* ov-flt-cx-mat.h (octave_float_complex_matrix::builtin_type): New method.
+	* ov-bool-mat.h (octave_bool_matrix::builtin_type): New method.
+	* ov-ch-mat.h (octave_char_matrix::builtin_type): New method.
+	* ov-scalar.h (octave_scalar::builtin_type): New method.
+	* ov-float.h (octave_float::builtin_type): New method.
+	* ov-complex.h (octave_complex::builtin_type): New method.
+	* ov-bool.h (octave_bool::builtin_type): New method.
+	* ov-flt-complex.h (octave_float_complex::builtin_type): New method.
+	* ov-re-diag.h (octave_diag_matrix::builtin_type): New method.
+	* ov-flt-re-diag.h (octave_float_diag_matrix::builtin_type): New method.
+	* ov-cx-diag.h (octave_complex_diag_matrix::builtin_type): New method.
+	* ov-flt-cx-diag.h (octave_float_complex_diag_matrix::builtin_type): New method.
+	* ov-re-sparse.h (octave_sparse_matrix::builtin_type): New method.
+	* ov-cx-sparse.h (octave_sparse_complex_matrix::builtin_type): New method.
+	* ov-bool-sparse.h (octave_sparse_bool_matrix::builtin_type): New method.
+	* ov-intx.h (octave_int_matrix::builtin_type, octave_int_scalar::builtin_type): New methods.
+	* ov-int8.h: Define OCTAVE_INT_BTYP.
+	* ov-int16.h: Define OCTAVE_INT_BTYP.
+	* ov-int32.h: Define OCTAVE_INT_BTYP.
+	* ov-int64.h: Define OCTAVE_INT_BTYP.
+	* ov-uint8.h: Define OCTAVE_INT_BTYP.
+	* ov-uint16.h: Define OCTAVE_INT_BTYP.
+	* ov-uint32.h: Define OCTAVE_INT_BTYP.
+	* ov-uint64.h: Define OCTAVE_INT_BTYP.
+
 2009-10-01  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/cellfun.cc (Fcellfun): Fix initialization, add missing
 	break.
 
 2009-10-01  John W. Eaton  <jwe@octave.org>
 
 	* gl-render.cc (opengl_renderer::draw (const image::properties&)):
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -4155,25 +4155,25 @@ The arguments are handled the same as th
 }
 
 template <class MT>
 octave_value
 identity_matrix (int nr, int nc)
 {
   octave_value retval;
 
-  typename octave_array_type_traits<MT>::element_type one (1);
+  typename MT::element_type one (1);
 
   if (nr == 1 && nc == 1)
     retval = one;
   else
     {
       dim_vector dims (nr, nc);
 
-      typename octave_array_type_traits<MT>::element_type zero (0);
+      typename MT::element_type zero (0);
 
       MT m (dims, zero);
 
       if (nr > 0 && nc > 0)
 	{
 	  int n = std::min (nr, nc);
 
 	  for (int i = 0; i < n; i++)
diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -3067,20 +3067,20 @@ do_read (octave_stream& strm, octave_idx
 	 oct_mach_info::float_format from_flt_fmt, octave_idx_type& count)
 {
   octave_value retval;
 
   RET_T nda;
 
   count = 0;
 
-  typename octave_array_type_traits<RET_T>::element_type elt_zero
-    = typename octave_array_type_traits<RET_T>::element_type ();
-
-  typename octave_array_type_traits<RET_T>::element_type *dat = 0;
+  typename RET_T::element_type elt_zero
+    = typename RET_T::element_type ();
+
+  typename RET_T::element_type *dat = 0;
 
   octave_idx_type max_size = 0;
 
   octave_idx_type final_nr = 0;
   octave_idx_type final_nc = 1;
 
   if (nr > 0)
     {
@@ -3112,18 +3112,18 @@ do_read (octave_stream& strm, octave_idx
     swap = (from_flt_fmt == oct_mach_info::flt_fmt_ieee_little_endian
 	    || from_flt_fmt == oct_mach_info::flt_fmt_vax_g
 	    || from_flt_fmt == oct_mach_info::flt_fmt_vax_g);
   else
     swap = (from_flt_fmt == oct_mach_info::flt_fmt_ieee_big_endian);
 
   union
   {
-    char buf[sizeof (typename octave_type_traits<READ_T>::val_type)];
-    typename octave_type_traits<READ_T>::val_type val;
+    char buf[sizeof (typename strip_template_param<octave_int, READ_T>::type)];
+    typename strip_template_param<octave_int, READ_T>::type val;
   } u;
 
   std::istream *isp = strm.input_stream ();
 
   if (isp)
     {
       std::istream& is = *isp;
 
@@ -3139,32 +3139,32 @@ do_read (octave_stream& strm, octave_idx
 	      if (nr > 0 && nc > 0 && count == max_size)
 		{
 		  final_nr = nr;
 		  final_nc = nc;
 
 		  break;
 		}
 
-	      is.read (u.buf, sizeof (typename octave_type_traits<READ_T>::val_type));
+	      is.read (u.buf, sizeof (typename strip_template_param<octave_int, READ_T>::type));
 
 	      // We only swap bytes for integer types.  For float
 	      // types, the format conversion will also handle byte
 	      // swapping.
 
 	      if (swap)
-		swap_bytes<sizeof (typename octave_type_traits<READ_T>::val_type)> (u.buf);
+		swap_bytes<sizeof (typename strip_template_param<octave_int, READ_T>::type)> (u.buf);
 	      else if (do_float_fmt_conv)
 		do_float_format_conversion
 		  (u.buf,
-		   sizeof (typename octave_type_traits<READ_T>::val_type),
+		   sizeof (typename strip_template_param<octave_int, READ_T>::type),
 		   1, from_flt_fmt, oct_mach_info::float_format ());
 
-	      typename octave_array_type_traits<RET_T>::element_type tmp
-		= static_cast <typename octave_array_type_traits<RET_T>::element_type> (u.val);
+	      typename RET_T::element_type tmp
+		= static_cast <typename RET_T::element_type> (u.val);
 
 	      if (is)
 		{
 		  if (count == max_size)
 		    {
 		      max_size *= 2;
 
 		      if (nr > 0)
@@ -3409,23 +3409,23 @@ octave_stream::write (const octave_value
 
   return retval;
 }
 
 template <class T>
 void
 write_int (std::ostream& os, bool swap, const T& val)
 {
-  typename octave_type_traits<T>::val_type tmp = val.value ();
+  typename T::val_type tmp = val.value ();
 
   if (swap)
-    swap_bytes<sizeof (typename octave_type_traits<T>::val_type)> (&tmp);
+    swap_bytes<sizeof (typename T::val_type)> (&tmp);
 
   os.write (reinterpret_cast<const char *> (&tmp),
-	    sizeof (typename octave_type_traits<T>::val_type));
+	    sizeof (typename T::val_type));
 }
 
 template void write_int (std::ostream&, bool, const octave_int8&);
 template void write_int (std::ostream&, bool, const octave_uint8&);
 template void write_int (std::ostream&, bool, const octave_int16&);
 template void write_int (std::ostream&, bool, const octave_uint16&);
 template void write_int (std::ostream&, bool, const octave_int32&);
 template void write_int (std::ostream&, bool, const octave_uint32&);
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -50,16 +50,61 @@ class octave_user_script;
 class octave_user_code;
 class octave_fcn_handle;
 class octave_fcn_inline;
 class octave_value_list;
 class octave_lvalue;
 
 class tree_walker;
 
+enum builtin_type_t
+{
+  btyp_double,
+  btyp_float,
+  btyp_complex,
+  btyp_float_complex,
+  btyp_int8,
+  btyp_int16,
+  btyp_int32,
+  btyp_int64,
+  btyp_uint8,
+  btyp_uint16,
+  btyp_uint32,
+  btyp_uint64,
+  btyp_char,
+  btyp_bool,
+  btyp_unknown
+};
+
+template <class T>
+struct class_to_btyp
+{
+  static const builtin_type_t btyp = btyp_unknown;
+};
+
+#define DEF_CLASS_TO_BTYP(CLASS,BTYP) \
+template <> \
+struct class_to_btyp<CLASS> \
+{ static const builtin_type_t btyp = BTYP; }
+
+DEF_CLASS_TO_BTYP (double, btyp_double);
+DEF_CLASS_TO_BTYP (float, btyp_float);
+DEF_CLASS_TO_BTYP (Complex, btyp_complex);
+DEF_CLASS_TO_BTYP (FloatComplex, btyp_float_complex);
+DEF_CLASS_TO_BTYP (octave_int8, btyp_int8);
+DEF_CLASS_TO_BTYP (octave_int16, btyp_int16);
+DEF_CLASS_TO_BTYP (octave_int32, btyp_int32);
+DEF_CLASS_TO_BTYP (octave_int64, btyp_int64);
+DEF_CLASS_TO_BTYP (octave_uint8, btyp_uint8);
+DEF_CLASS_TO_BTYP (octave_uint16, btyp_uint16);
+DEF_CLASS_TO_BTYP (octave_uint32, btyp_uint32);
+DEF_CLASS_TO_BTYP (octave_uint64, btyp_uint64);
+DEF_CLASS_TO_BTYP (bool, btyp_bool);
+DEF_CLASS_TO_BTYP (char, btyp_char);
+
 // T_ID is the type id of struct objects, set by register_type().
 // T_NAME is the type name of struct objects.
 
 #define DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA \
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA2 (OCTAVE_EMPTY_CPP_ARG)
 
 #define DECLARE_OV_BASE_TYPEID_FUNCTIONS_AND_DATA \
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA2(virtual)
@@ -277,16 +322,18 @@ public:
   virtual bool is_magic_colon (void) const { return false; }
 
   virtual bool is_all_va_args (void) const { return false; }
 
   virtual octave_value all (int = 0) const;
 
   virtual octave_value any (int = 0) const;
 
+  virtual builtin_type_t builtin_type (void) const { return btyp_unknown; }
+
   virtual bool is_double_type (void) const { return false; }
 
   virtual bool is_single_type (void) const { return false; }
 
   virtual bool is_float_type (void) const { return false; }
 
   virtual bool is_int8_type (void) const { return false; }
 
diff --git a/src/ov-bool-mat.h b/src/ov-bool-mat.h
--- a/src/ov-bool-mat.h
+++ b/src/ov-bool-mat.h
@@ -75,16 +75,18 @@ public:
 
   type_conv_info numeric_conversion_function (void) const;
 
   octave_base_value *try_narrowing_conversion (void);
 
   idx_vector index_vector (void) const 
     { return idx_cache ? *idx_cache : set_idx_cache (idx_vector (matrix)); }
 
+  builtin_type_t builtin_type (void) const { return btyp_bool; }
+
   bool is_bool_matrix (void) const { return true; }
 
   bool is_bool_type (void) const { return true; }
 
   bool is_real_type (void) const { return true; }
 
   int8NDArray
   int8_array_value (void) const { return int8NDArray (matrix); }
diff --git a/src/ov-bool-sparse.h b/src/ov-bool-sparse.h
--- a/src/ov-bool-sparse.h
+++ b/src/ov-bool-sparse.h
@@ -83,16 +83,18 @@ public:
   type_conv_info numeric_conversion_function (void) const;
 
   octave_base_value *try_narrowing_conversion (void);
 
   // FIXME Adapt idx_vector to allow sparse logical indexing!!
   idx_vector index_vector (void) const 
     { return idx_vector (bool_array_value ()); }
 
+  builtin_type_t builtin_type (void) const { return btyp_bool; }
+
   bool is_bool_matrix (void) const { return true; }
 
   bool is_bool_type (void) const { return true; }
 
   bool is_real_type (void) const { return true; }
 
   double double_value (bool = false) const;
 
diff --git a/src/ov-bool.h b/src/ov-bool.h
--- a/src/ov-bool.h
+++ b/src/ov-bool.h
@@ -68,16 +68,18 @@ public:
 
   type_conv_info numeric_conversion_function (void) const;
 
   octave_value do_index_op (const octave_value_list& idx,
 			    bool resize_ok = false);
 
   idx_vector index_vector (void) const { return idx_vector (scalar); }
 
+  builtin_type_t builtin_type (void) const { return btyp_bool; }
+
   bool is_real_scalar (void) const { return true; }
 
   bool is_bool_scalar (void) const { return true; }
 
   bool is_bool_type (void) const { return true; }
 
   bool is_real_type (void) const { return true; }
 
diff --git a/src/ov-ch-mat.h b/src/ov-ch-mat.h
--- a/src/ov-ch-mat.h
+++ b/src/ov-ch-mat.h
@@ -77,16 +77,18 @@ public:
 
   ~octave_char_matrix (void) { }
 
   octave_base_value *clone (void) const { return new octave_char_matrix (*this); }
   octave_base_value *empty_clone (void) const { return new octave_char_matrix (); }
 
   idx_vector index_vector (void) const;
 
+  builtin_type_t builtin_type (void) const { return btyp_char; }
+
   bool is_char_matrix (void) const { return true; }
   bool is_real_matrix (void) const { return true; }
 
   bool is_real_type (void) const { return true; }
 
   double double_value (bool = false) const;
 
   float float_value (bool = false) const;
diff --git a/src/ov-complex.h b/src/ov-complex.h
--- a/src/ov-complex.h
+++ b/src/ov-complex.h
@@ -82,16 +82,18 @@ public:
 
   octave_value any (int = 0) const
     {
       return (scalar != Complex (0, 0)
 	      && ! (lo_ieee_isnan (std::real (scalar))
 		    || lo_ieee_isnan (std::imag (scalar))));
     }
 
+  builtin_type_t builtin_type (void) const { return btyp_complex; }
+
   bool is_complex_scalar (void) const { return true; }
 
   bool is_complex_type (void) const { return true; }
 
   bool is_double_type (void) const { return true; }
 
   bool is_float_type (void) const { return true; }
 
diff --git a/src/ov-cx-diag.h b/src/ov-cx-diag.h
--- a/src/ov-cx-diag.h
+++ b/src/ov-cx-diag.h
@@ -52,16 +52,18 @@ public:
   octave_base_value *empty_clone (void) const { return new octave_complex_diag_matrix (); }
 
   type_conv_info numeric_conversion_function (void) const;
 
   type_conv_info numeric_demotion_function (void) const;
 
   octave_base_value *try_narrowing_conversion (void);
 
+  builtin_type_t builtin_type (void) const { return btyp_complex; }
+
   bool is_complex_matrix (void) const { return true; }
 
   bool is_complex_type (void) const { return true; }
 
   bool is_double_type (void) const { return true; }
 
   bool is_float_type (void) const { return true; }
 
diff --git a/src/ov-cx-mat.h b/src/ov-cx-mat.h
--- a/src/ov-cx-mat.h
+++ b/src/ov-cx-mat.h
@@ -85,16 +85,18 @@ public:
 
   octave_base_value *clone (void) const { return new octave_complex_matrix (*this); }
   octave_base_value *empty_clone (void) const { return new octave_complex_matrix (); }
 
   type_conv_info numeric_demotion_function (void) const;
 
   octave_base_value *try_narrowing_conversion (void);
 
+  builtin_type_t builtin_type (void) const { return btyp_complex; }
+
   bool is_complex_matrix (void) const { return true; }
 
   bool is_complex_type (void) const { return true; }
 
   bool is_double_type (void) const { return true; }
 
   bool is_float_type (void) const { return true; }
 
diff --git a/src/ov-cx-sparse.h b/src/ov-cx-sparse.h
--- a/src/ov-cx-sparse.h
+++ b/src/ov-cx-sparse.h
@@ -92,16 +92,18 @@ public:
   octave_base_value *empty_clone (void) const { return new octave_sparse_complex_matrix (); }
 
   octave_base_value *try_narrowing_conversion (void);
 
   void assign (const octave_value_list& idx, const SparseComplexMatrix& rhs);
 
   void assign (const octave_value_list& idx, const SparseMatrix& rhs);
 
+  builtin_type_t builtin_type (void) const { return btyp_complex; }
+
   bool is_complex_matrix (void) const { return true; }
 
   bool is_complex_type (void) const { return true; }
 
   bool is_double_type (void) const { return true; }
 
   bool is_float_type (void) const { return true; }
 
diff --git a/src/ov-float.h b/src/ov-float.h
--- a/src/ov-float.h
+++ b/src/ov-float.h
@@ -77,16 +77,18 @@ public:
   octave_value do_index_op (const octave_value_list& idx,
 			    bool resize_ok = false);
 
   idx_vector index_vector (void) const { return idx_vector (scalar); }
 
   octave_value any (int = 0) const
     { return (scalar != 0 && ! lo_ieee_isnan (scalar)); }
 
+  builtin_type_t builtin_type (void) const { return btyp_float; }
+
   bool is_real_scalar (void) const { return true; }
 
   bool is_real_type (void) const { return true; }
 
   bool is_single_type (void) const { return true; }
 
   bool is_float_type (void) const { return true; }
 
diff --git a/src/ov-flt-complex.h b/src/ov-flt-complex.h
--- a/src/ov-flt-complex.h
+++ b/src/ov-flt-complex.h
@@ -80,16 +80,18 @@ public:
 
   octave_value any (int = 0) const
     {
       return (scalar != FloatComplex (0, 0)
 	      && ! (lo_ieee_isnan (std::real (scalar))
 		    || lo_ieee_isnan (std::imag (scalar))));
     }
 
+  builtin_type_t builtin_type (void) const { return btyp_float_complex; }
+
   bool is_complex_scalar (void) const { return true; }
 
   bool is_complex_type (void) const { return true; }
 
   bool is_single_type (void) const { return true; }
 
   bool is_float_type (void) const { return true; }
 
diff --git a/src/ov-flt-cx-diag.h b/src/ov-flt-cx-diag.h
--- a/src/ov-flt-cx-diag.h
+++ b/src/ov-flt-cx-diag.h
@@ -50,16 +50,18 @@ public:
 
   octave_base_value *clone (void) const { return new octave_float_complex_diag_matrix (*this); }
   octave_base_value *empty_clone (void) const { return new octave_float_complex_diag_matrix (); }
 
   type_conv_info numeric_conversion_function (void) const;
 
   octave_base_value *try_narrowing_conversion (void);
 
+  builtin_type_t builtin_type (void) const { return btyp_float_complex; }
+
   bool is_complex_matrix (void) const { return true; }
 
   bool is_complex_type (void) const { return true; }
 
   bool is_double_type (void) const { return true; }
 
   bool is_float_type (void) const { return true; }
 
diff --git a/src/ov-flt-cx-mat.h b/src/ov-flt-cx-mat.h
--- a/src/ov-flt-cx-mat.h
+++ b/src/ov-flt-cx-mat.h
@@ -83,16 +83,18 @@ public:
 
   ~octave_float_complex_matrix (void) { }
 
   octave_base_value *clone (void) const { return new octave_float_complex_matrix (*this); }
   octave_base_value *empty_clone (void) const { return new octave_float_complex_matrix (); }
 
   octave_base_value *try_narrowing_conversion (void);
 
+  builtin_type_t builtin_type (void) const { return btyp_float_complex; }
+
   bool is_complex_matrix (void) const { return true; }
 
   bool is_complex_type (void) const { return true; }
 
   bool is_single_type (void) const { return true; }
 
   bool is_float_type (void) const { return true; }
 
diff --git a/src/ov-flt-re-diag.h b/src/ov-flt-re-diag.h
--- a/src/ov-flt-re-diag.h
+++ b/src/ov-flt-re-diag.h
@@ -50,16 +50,18 @@ public:
 
   octave_base_value *clone (void) const { return new octave_float_diag_matrix (*this); }
   octave_base_value *empty_clone (void) const { return new octave_float_diag_matrix (); }
 
   type_conv_info numeric_conversion_function (void) const;
 
   octave_base_value *try_narrowing_conversion (void);
 
+  builtin_type_t builtin_type (void) const { return btyp_float; }
+
   bool is_real_matrix (void) const { return true; }
 
   bool is_real_type (void) const { return true; }
 
   bool is_single_type (void) const { return true; }
 
   bool is_float_type (void) const { return true; }
 
diff --git a/src/ov-flt-re-mat.h b/src/ov-flt-re-mat.h
--- a/src/ov-flt-re-mat.h
+++ b/src/ov-flt-re-mat.h
@@ -86,16 +86,18 @@ public:
   octave_base_value *clone (void) const { return new octave_float_matrix (*this); }
   octave_base_value *empty_clone (void) const { return new octave_float_matrix (); }
 
   octave_base_value *try_narrowing_conversion (void);
 
   idx_vector index_vector (void) const 
     { return idx_cache ? *idx_cache : set_idx_cache (idx_vector (matrix)); }
 
+  builtin_type_t builtin_type (void) const { return btyp_float; }
+
   bool is_real_matrix (void) const { return true; }
 
   bool is_real_type (void) const { return true; }
 
   bool is_single_type (void) const { return true; }
 
   bool is_float_type (void) const { return true; }
 
diff --git a/src/ov-int16.h b/src/ov-int16.h
--- a/src/ov-int16.h
+++ b/src/ov-int16.h
@@ -30,29 +30,33 @@ along with Octave; see the file COPYING.
 
 #define OCTAVE_VALUE_INT_SCALAR_T octave_int16_scalar
 #define OCTAVE_VALUE_INT_SCALAR_EXTRACTOR_FUNCTION int16_scalar_value
 
 #define OCTAVE_TYPE_PREDICATE_FUNCTION is_int16_type
 
 #define OCTAVE_INT_MX_CLASS mxINT16_CLASS
 
+#define OCTAVE_INT_BTYP btyp_int16
+
 #include "ov-intx.h"
 
 #undef OCTAVE_INT_T
 
 #undef OCTAVE_VALUE_INT_MATRIX_T
 #undef OCTAVE_VALUE_INT_NDARRAY_EXTRACTOR_FUNCTION
 
 #undef OCTAVE_VALUE_INT_SCALAR_T
 #undef OCTAVE_VALUE_INT_SCALAR_EXTRACTOR_FUNCTION
 
 #undef OCTAVE_TYPE_PREDICATE_FUNCTION
 
 #undef OCTAVE_INT_MX_CLASS
 
+#undef OCTAVE_INT_BTYP
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/ov-int32.h b/src/ov-int32.h
--- a/src/ov-int32.h
+++ b/src/ov-int32.h
@@ -30,29 +30,33 @@ along with Octave; see the file COPYING.
 
 #define OCTAVE_VALUE_INT_SCALAR_T octave_int32_scalar
 #define OCTAVE_VALUE_INT_SCALAR_EXTRACTOR_FUNCTION int32_scalar_value
 
 #define OCTAVE_TYPE_PREDICATE_FUNCTION is_int32_type
 
 #define OCTAVE_INT_MX_CLASS mxINT32_CLASS
 
+#define OCTAVE_INT_BTYP btyp_int32
+
 #include "ov-intx.h"
 
 #undef OCTAVE_INT_T
 
 #undef OCTAVE_VALUE_INT_MATRIX_T
 #undef OCTAVE_VALUE_INT_NDARRAY_EXTRACTOR_FUNCTION
 
 #undef OCTAVE_VALUE_INT_SCALAR_T
 #undef OCTAVE_VALUE_INT_SCALAR_EXTRACTOR_FUNCTION
 
 #undef OCTAVE_TYPE_PREDICATE_FUNCTION
 
 #undef OCTAVE_INT_MX_CLASS
 
+#undef OCTAVE_INT_BTYP
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/ov-int64.h b/src/ov-int64.h
--- a/src/ov-int64.h
+++ b/src/ov-int64.h
@@ -30,29 +30,33 @@ along with Octave; see the file COPYING.
 
 #define OCTAVE_VALUE_INT_SCALAR_T octave_int64_scalar
 #define OCTAVE_VALUE_INT_SCALAR_EXTRACTOR_FUNCTION int64_scalar_value
 
 #define OCTAVE_TYPE_PREDICATE_FUNCTION is_int64_type
 
 #define OCTAVE_INT_MX_CLASS mxINT64_CLASS
 
+#define OCTAVE_INT_BTYP btyp_int64
+
 #include "ov-intx.h"
 
 #undef OCTAVE_INT_T
 
 #undef OCTAVE_VALUE_INT_MATRIX_T
 #undef OCTAVE_VALUE_INT_NDARRAY_EXTRACTOR_FUNCTION
 
 #undef OCTAVE_VALUE_INT_SCALAR_T
 #undef OCTAVE_VALUE_INT_SCALAR_EXTRACTOR_FUNCTION
 
 #undef OCTAVE_TYPE_PREDICATE_FUNCTION
 
 #undef OCTAVE_INT_MX_CLASS
 
+#undef OCTAVE_INT_BTYP
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/ov-int8.h b/src/ov-int8.h
--- a/src/ov-int8.h
+++ b/src/ov-int8.h
@@ -30,29 +30,33 @@ along with Octave; see the file COPYING.
 
 #define OCTAVE_VALUE_INT_SCALAR_T octave_int8_scalar
 #define OCTAVE_VALUE_INT_SCALAR_EXTRACTOR_FUNCTION int8_scalar_value
 
 #define OCTAVE_TYPE_PREDICATE_FUNCTION is_int8_type
 
 #define OCTAVE_INT_MX_CLASS mxINT8_CLASS
 
+#define OCTAVE_INT_BTYP btyp_int8
+
 #include "ov-intx.h"
 
 #undef OCTAVE_INT_T
 
 #undef OCTAVE_VALUE_INT_MATRIX_T
 #undef OCTAVE_VALUE_INT_NDARRAY_EXTRACTOR_FUNCTION
 
 #undef OCTAVE_VALUE_INT_SCALAR_T
 #undef OCTAVE_VALUE_INT_SCALAR_EXTRACTOR_FUNCTION
 
 #undef OCTAVE_TYPE_PREDICATE_FUNCTION
 
 #undef OCTAVE_INT_MX_CLASS
 
+#undef OCTAVE_INT_BTYP
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/ov-intx.h b/src/ov-intx.h
--- a/src/ov-intx.h
+++ b/src/ov-intx.h
@@ -63,16 +63,18 @@ public:
 
   octave_base_value *empty_clone (void) const
     { return new OCTAVE_VALUE_INT_MATRIX_T (); }
 
   bool OCTAVE_TYPE_PREDICATE_FUNCTION (void) const { return true; }
 
   bool is_integer_type (void) const { return true; }
 
+  builtin_type_t builtin_type (void) const { return OCTAVE_INT_BTYP; }
+
 private:
 
   template <class IM>
   IM convert_gripe () const
     {
       typedef typename IM::element_type dest_el_type;
       typedef intNDArray<OCTAVE_INT_T>::element_type src_el_type;
       dest_el_type::clear_conv_flag ();
@@ -437,16 +439,18 @@ public:
 
       return tmp.do_index_op (idx, resize_ok);
     }
 
   bool OCTAVE_TYPE_PREDICATE_FUNCTION (void) const { return true; }
 
   bool is_integer_type (void) const { return true; }
 
+  builtin_type_t builtin_type (void) const { return OCTAVE_INT_BTYP; }
+
 private:
 
   template <class IS>
   IS convert_gripe () const
     {
       typedef IS dest_el_type;
       typedef OCTAVE_INT_T src_el_type;
       dest_el_type::clear_conv_flag ();
diff --git a/src/ov-range.h b/src/ov-range.h
--- a/src/ov-range.h
+++ b/src/ov-range.h
@@ -153,16 +153,18 @@ public:
     { return range.is_sorted (mode); }
 
   Array<octave_idx_type> sort_rows_idx (sortmode) const
     { return Array<octave_idx_type> (1, 0); }
 
   sortmode is_sorted_rows (sortmode mode = UNSORTED) const
     { return mode ? mode : ASCENDING; }
 
+  builtin_type_t builtin_type (void) const { return btyp_double; }
+
   bool is_real_type (void) const { return true; }
 
   bool is_double_type (void) const { return true; }
 
   bool is_float_type (void) const { return true; }
 
   bool is_numeric_type (void) const { return true; }
 
diff --git a/src/ov-re-diag.h b/src/ov-re-diag.h
--- a/src/ov-re-diag.h
+++ b/src/ov-re-diag.h
@@ -55,16 +55,18 @@ public:
 
   type_conv_info numeric_demotion_function (void) const;
 
   octave_base_value *try_narrowing_conversion (void);
 
   octave_value do_index_op (const octave_value_list& idx,
 			    bool resize_ok = false);
 
+  builtin_type_t builtin_type (void) const { return btyp_double; }
+
   bool is_real_matrix (void) const { return true; }
 
   bool is_real_type (void) const { return true; }
 
   bool is_double_type (void) const { return true; }
 
   bool is_float_type (void) const { return true; }
 
diff --git a/src/ov-re-mat.h b/src/ov-re-mat.h
--- a/src/ov-re-mat.h
+++ b/src/ov-re-mat.h
@@ -103,16 +103,18 @@ public:
 
   type_conv_info numeric_demotion_function (void) const;
 
   octave_base_value *try_narrowing_conversion (void);
 
   idx_vector index_vector (void) const
     { return idx_cache ? *idx_cache : set_idx_cache (idx_vector (matrix)); }
 
+  builtin_type_t builtin_type (void) const { return btyp_double; }
+
   bool is_real_matrix (void) const { return true; }
 
   bool is_real_type (void) const { return true; }
 
   bool is_double_type (void) const { return true; }
 
   bool is_float_type (void) const { return true; }
 
diff --git a/src/ov-re-sparse.h b/src/ov-re-sparse.h
--- a/src/ov-re-sparse.h
+++ b/src/ov-re-sparse.h
@@ -88,16 +88,18 @@ public:
 
   octave_base_value *clone (void) const { return new octave_sparse_matrix (*this); }
   octave_base_value *empty_clone (void) const { return new octave_sparse_matrix (); }
 
   octave_base_value *try_narrowing_conversion (void);
 
   idx_vector index_vector (void) const;
 
+  builtin_type_t builtin_type (void) const { return btyp_double; }
+
   bool is_real_matrix (void) const { return true; }
 
   bool is_real_type (void) const { return true; }
 
   bool is_double_type (void) const { return true; }
 
   bool is_float_type (void) const { return true; }
 
diff --git a/src/ov-scalar.h b/src/ov-scalar.h
--- a/src/ov-scalar.h
+++ b/src/ov-scalar.h
@@ -78,16 +78,18 @@ public:
 
   type_conv_info numeric_demotion_function (void) const;
 
   idx_vector index_vector (void) const { return idx_vector (scalar); }
 
   octave_value any (int = 0) const
     { return (scalar != 0 && ! lo_ieee_isnan (scalar)); }
 
+  builtin_type_t builtin_type (void) const { return btyp_double; }
+
   bool is_real_scalar (void) const { return true; }
 
   bool is_real_type (void) const { return true; }
 
   bool is_double_type (void) const { return true; }
 
   bool is_float_type (void) const { return true; }
 
diff --git a/src/ov-uint16.h b/src/ov-uint16.h
--- a/src/ov-uint16.h
+++ b/src/ov-uint16.h
@@ -30,29 +30,33 @@ along with Octave; see the file COPYING.
 
 #define OCTAVE_VALUE_INT_SCALAR_T octave_uint16_scalar
 #define OCTAVE_VALUE_INT_SCALAR_EXTRACTOR_FUNCTION uint16_scalar_value
 
 #define OCTAVE_TYPE_PREDICATE_FUNCTION is_uint16_type
 
 #define OCTAVE_INT_MX_CLASS mxUINT16_CLASS
 
+#define OCTAVE_INT_BTYP btyp_uint16
+
 #include "ov-intx.h"
 
 #undef OCTAVE_INT_T
 
 #undef OCTAVE_VALUE_INT_MATRIX_T
 #undef OCTAVE_VALUE_INT_NDARRAY_EXTRACTOR_FUNCTION
 
 #undef OCTAVE_VALUE_INT_SCALAR_T
 #undef OCTAVE_VALUE_INT_SCALAR_EXTRACTOR_FUNCTION
 
 #undef OCTAVE_TYPE_PREDICATE_FUNCTION
 
 #undef OCTAVE_INT_MX_CLASS
 
+#undef OCTAVE_INT_BTYP
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/ov-uint32.h b/src/ov-uint32.h
--- a/src/ov-uint32.h
+++ b/src/ov-uint32.h
@@ -30,29 +30,33 @@ along with Octave; see the file COPYING.
 
 #define OCTAVE_VALUE_INT_SCALAR_T octave_uint32_scalar
 #define OCTAVE_VALUE_INT_SCALAR_EXTRACTOR_FUNCTION uint32_scalar_value
 
 #define OCTAVE_TYPE_PREDICATE_FUNCTION is_uint32_type
 
 #define OCTAVE_INT_MX_CLASS mxUINT32_CLASS
 
+#define OCTAVE_INT_BTYP btyp_uint32
+
 #include "ov-intx.h"
 
 #undef OCTAVE_INT_T
 
 #undef OCTAVE_VALUE_INT_MATRIX_T
 #undef OCTAVE_VALUE_INT_NDARRAY_EXTRACTOR_FUNCTION
 
 #undef OCTAVE_VALUE_INT_SCALAR_T
 #undef OCTAVE_VALUE_INT_SCALAR_EXTRACTOR_FUNCTION
 
 #undef OCTAVE_TYPE_PREDICATE_FUNCTION
 
 #undef OCTAVE_INT_MX_CLASS
 
+#undef OCTAVE_INT_BTYP
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/ov-uint64.h b/src/ov-uint64.h
--- a/src/ov-uint64.h
+++ b/src/ov-uint64.h
@@ -30,29 +30,33 @@ along with Octave; see the file COPYING.
 
 #define OCTAVE_VALUE_INT_SCALAR_T octave_uint64_scalar
 #define OCTAVE_VALUE_INT_SCALAR_EXTRACTOR_FUNCTION uint64_scalar_value
 
 #define OCTAVE_TYPE_PREDICATE_FUNCTION is_uint64_type
 
 #define OCTAVE_INT_MX_CLASS mxUINT64_CLASS
 
+#define OCTAVE_INT_BTYP btyp_uint64
+
 #include "ov-intx.h"
 
 #undef OCTAVE_INT_T
 
 #undef OCTAVE_VALUE_INT_MATRIX_T
 #undef OCTAVE_VALUE_INT_NDARRAY_EXTRACTOR_FUNCTION
 
 #undef OCTAVE_VALUE_INT_SCALAR_T
 #undef OCTAVE_VALUE_INT_SCALAR_EXTRACTOR_FUNCTION
 
 #undef OCTAVE_TYPE_PREDICATE_FUNCTION
 
 #undef OCTAVE_INT_MX_CLASS
 
+#undef OCTAVE_INT_BTYP
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/ov-uint8.h b/src/ov-uint8.h
--- a/src/ov-uint8.h
+++ b/src/ov-uint8.h
@@ -30,29 +30,33 @@ along with Octave; see the file COPYING.
 
 #define OCTAVE_VALUE_INT_SCALAR_T octave_uint8_scalar
 #define OCTAVE_VALUE_INT_SCALAR_EXTRACTOR_FUNCTION uint8_scalar_value
 
 #define OCTAVE_TYPE_PREDICATE_FUNCTION is_uint8_type
 
 #define OCTAVE_INT_MX_CLASS mxUINT8_CLASS
 
+#define OCTAVE_INT_BTYP btyp_uint8
+
 #include "ov-intx.h"
 
 #undef OCTAVE_INT_T
 
 #undef OCTAVE_VALUE_INT_MATRIX_T
 #undef OCTAVE_VALUE_INT_NDARRAY_EXTRACTOR_FUNCTION
 
 #undef OCTAVE_VALUE_INT_SCALAR_T
 #undef OCTAVE_VALUE_INT_SCALAR_EXTRACTOR_FUNCTION
 
 #undef OCTAVE_TYPE_PREDICATE_FUNCTION
 
 #undef OCTAVE_INT_MX_CLASS
 
+#undef OCTAVE_INT_BTYP
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -545,16 +545,19 @@ public:
   // Are any or all of the elements in this constant nonzero?
 
   octave_value all (int dim = 0) const
     { return rep->all (dim); }
 
   octave_value any (int dim = 0) const
     { return rep->any (dim); }
 
+  builtin_type_t builtin_type (void) const
+    { return rep->builtin_type (); }
+
   // Floating point types.
 
   bool is_double_type (void) const
     { return rep->is_double_type (); }
 
   bool is_single_type (void) const
     { return rep->is_single_type (); }
 
@@ -1247,73 +1250,16 @@ OV_BINOP_FN (op_struct_ref)
 
 OV_COMP_BINOP_FN (op_trans_mul)
 OV_COMP_BINOP_FN (op_mul_trans)
 OV_COMP_BINOP_FN (op_herm_mul)
 OV_COMP_BINOP_FN (op_mul_herm)
 
 extern OCTINTERP_API void install_types (void);
 
-// FIXME -- these trait classes probably belong somehwere else...
-
-template <typename T>
-class
-octave_type_traits
-{
-public:
-  typedef T val_type;
-};
-
-#define OCTAVE_TYPE_TRAIT(T, VAL_T) \
-  template <> \
-  class \
-  octave_type_traits<T> \
-  { \
-  public: \
-    typedef VAL_T val_type; \
-  }
-
-OCTAVE_TYPE_TRAIT (octave_int8, octave_int8::val_type);
-OCTAVE_TYPE_TRAIT (octave_uint8, octave_uint8::val_type);
-OCTAVE_TYPE_TRAIT (octave_int16, octave_int16::val_type);
-OCTAVE_TYPE_TRAIT (octave_uint16, octave_uint16::val_type);
-OCTAVE_TYPE_TRAIT (octave_int32, octave_int32::val_type);
-OCTAVE_TYPE_TRAIT (octave_uint32, octave_uint32::val_type);
-OCTAVE_TYPE_TRAIT (octave_int64, octave_int64::val_type);
-OCTAVE_TYPE_TRAIT (octave_uint64, octave_uint64::val_type);
-
-template <typename T>
-class octave_array_type_traits
-{
-public:
-  typedef T element_type;
-};
-
-#define OCTAVE_ARRAY_TYPE_TRAIT(T, ELT_T) \
-  template <> \
-  class \
-  octave_array_type_traits<T> \
-  { \
-  public: \
-    typedef ELT_T element_type; \
-  }
-
-OCTAVE_ARRAY_TYPE_TRAIT (charNDArray, char);
-OCTAVE_ARRAY_TYPE_TRAIT (boolNDArray, bool);
-OCTAVE_ARRAY_TYPE_TRAIT (int8NDArray, octave_int8);
-OCTAVE_ARRAY_TYPE_TRAIT (uint8NDArray, octave_uint8);
-OCTAVE_ARRAY_TYPE_TRAIT (int16NDArray, octave_int16);
-OCTAVE_ARRAY_TYPE_TRAIT (uint16NDArray, octave_uint16);
-OCTAVE_ARRAY_TYPE_TRAIT (int32NDArray, octave_int32);
-OCTAVE_ARRAY_TYPE_TRAIT (uint32NDArray, octave_uint32);
-OCTAVE_ARRAY_TYPE_TRAIT (int64NDArray, octave_int64);
-OCTAVE_ARRAY_TYPE_TRAIT (uint64NDArray, octave_uint64);
-OCTAVE_ARRAY_TYPE_TRAIT (NDArray, double);
-OCTAVE_ARRAY_TYPE_TRAIT (FloatNDArray, float);
-
 // This will eventually go away, but for now it can be used to
 // simplify the transition to the new octave_value class hierarchy,
 // which uses octave_base_value instead of octave_value for the type
 // of octave_value::rep.
 #define OV_REP_TYPE octave_base_value
 
 // Templated value extractors.
 template<class Value>
@@ -1368,16 +1314,22 @@ DEF_VALUE_EXTRACTOR (FloatColumnVector, 
 DEF_VALUE_EXTRACTOR (ComplexColumnVector, complex_column_vector)
 DEF_VALUE_EXTRACTOR (FloatComplexColumnVector, float_complex_column_vector)
 
 DEF_VALUE_EXTRACTOR (RowVector, row_vector)
 DEF_VALUE_EXTRACTOR (FloatRowVector, float_row_vector)
 DEF_VALUE_EXTRACTOR (ComplexRowVector, complex_row_vector)
 DEF_VALUE_EXTRACTOR (FloatComplexRowVector, float_complex_row_vector)
 
+DEF_VALUE_EXTRACTOR (DiagMatrix, diag_matrix)
+DEF_VALUE_EXTRACTOR (FloatDiagMatrix, float_diag_matrix)
+DEF_VALUE_EXTRACTOR (ComplexDiagMatrix, complex_diag_matrix)
+DEF_VALUE_EXTRACTOR (FloatComplexDiagMatrix, float_complex_diag_matrix)
+DEF_VALUE_EXTRACTOR (PermMatrix, perm_matrix)
+
 #undef DEF_VALUE_EXTRACTOR
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
