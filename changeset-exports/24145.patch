# HG changeset patch
# User Rik <rik@octave.org>
# Date 1506699951 25200
#      Fri Sep 29 08:45:51 2017 -0700
# Node ID 196ea1ee99b8954f3dc16542b426b37fc70ee124
# Parent  8e034cb195f10889a682d7debed280175332fd89
Revamp input validation for bar functions (bug #52135).

* __bar__.m: Validate that first input is numeric.  Treat a second numeric
scalar input as width, rather than Y.  If Y is a vector, try both row and
column orientations to attempt to match X length.  Check that any X values are
unique, but don't require that they be in ascending order.  Remove old code
which had been commented out.

diff --git a/scripts/plot/draw/private/__bar__.m b/scripts/plot/draw/private/__bar__.m
--- a/scripts/plot/draw/private/__bar__.m
+++ b/scripts/plot/draw/private/__bar__.m
@@ -22,16 +22,20 @@
 ## @end deftypefn
 
 ## Author: jwe
 
 function varargout = __bar__ (vertical, func, varargin)
 
   [hax, varargin, nargin] = __plt_get_axis_arg__ (func, varargin{:});
 
+  if (! isnumeric (varargin{1}))
+    error ("%s: Y must be numeric", func);
+  endif
+
   width = 0.8;
   group = true;
   histc = NA;
   ## BaseValue
   if (strcmp (get (hax, "yscale"), "log"))
     bv = 1;
   else
     bv = 0;
@@ -41,26 +45,26 @@ function varargout = __bar__ (vertical, 
     x = varargin{1};
     if (isvector (x))
       x = x(:);
     endif
     y = varargin{2};
     if (isvector (y))
       y = y(:);
     endif
-    if (rows (x) != rows (y))
-      y = varargin{1};
-      if (isvector (y))
-        y = y(:);
-      endif
+    if (isscalar (y) && ! isscalar (x))
+      ## "y" is actually "width" argument
+      y = x;
       x = [1:rows(y)]';
       idx = 2;
     else
       if (! isvector (x))
         error ("%s: X must be a vector", func);
+      elseif (numel (unique (x)) != numel (x))
+        error ("%s: X vector values must be unique", func);
       endif
       idx = 3;
     endif
   else
     y = varargin{1};
     if (isvector (y))
       y = y(:);
     endif
@@ -110,22 +114,23 @@ function varargout = __bar__ (vertical, 
       else
         newargs = [newargs, varargin(idx:idx+1)];
         idx += 2;
       endif
     endif
   endwhile
 
   ngrp = rows (x);
+
+  if (isvector (y) && ngrp != rows (y))
+    y = y.';
+  endif
   if (ngrp != rows (y))
     error ("%s: length of X and Y must be equal", func);
   endif
-  if (any (x(2:end) < x(1:end-1)))
-    error ("%s: X vector values must be in ascending order", func);
-  endif
 
   nbars = columns (y);
 
   ## Column width is 1 for 'hist*' styles (bars touch).
   if (islogical (histc))
     cwidth = 1;
     if (nbars == 1)
       gwidth = 1;
@@ -367,17 +372,16 @@ endfunction
 
 function update_basevalue_logscale (hax, ~, hg)
   if (strcmp (get (hax, "yscale"), "log"))
     warning ("off", "Octave:negative-data-log-axis", "local");
     if (get (hg, "basevalue") == 0)
       set (hg, "basevalue", 1);
     endif
   else
-#    warning ("off", "Octave:negative-data-log-axis", "local");
     if (get (hg, "basevalue") == 1)
       set (hg, "basevalue", 0);
     endif
   endif
 endfunction
 
 function update_baseline (h, ~)
 
