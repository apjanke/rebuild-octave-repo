# HG changeset patch
# User John Donoghue <john.donoghue@ieee.org>
# Date 1376436719 14400
#      Tue Aug 13 19:31:59 2013 -0400
# Node ID 0b2a0acd03155dc8b3e39b2562a8cedcd4c887ac
# Parent  e993fa124b4602395be1aaaf4966f28928a43e38
Use keyPressEvent instead of winEvent for keyboard input

* QWinTerminalImpl.cpp, QWinTerminalImpl.h
(QWinTerminalImpl::winEvent): Delete.
(QWinTerminalImpl::keyPressEvent): Decode keypress to bytearray and
call to sendText to pass to console.
(translateKey): New function.

diff --git a/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp b/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp
--- a/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp
+++ b/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp
@@ -89,16 +89,76 @@ protected:
     { q->start (); }
 
 private:
   QWinTerminalImpl* q;
 };
 
 //////////////////////////////////////////////////////////////////////////////
 
+static QString translateKey (QKeyEvent *ev)
+{
+  QString s;
+
+  if (!ev->text ().isEmpty ())
+    s = ev->text ();
+  else
+    {
+      QString esc = "\x1b";
+
+      switch (ev->key ())
+        {
+        case Qt::Key_Up:
+          s = esc + "[A";
+          break;
+
+        case Qt::Key_Down:
+          s = esc + "[B";
+          break;
+
+        case Qt::Key_Right:
+          s = esc + "[C";
+          break;
+
+        case Qt::Key_Left:
+          s = esc + "[D";
+          break;
+
+        case Qt::Key_Home:
+          s = esc + "[1~";
+          break;
+
+        case Qt::Key_End:
+          s = esc + "[4~";
+          break;
+
+        case Qt::Key_Insert:
+          s = esc + "[2~";
+          break;
+
+        case Qt::Key_Delete:
+          s = esc + "[3~";
+          break;
+
+        case Qt::Key_PageUp:
+          s = esc + "[5~";
+          break;
+
+        case Qt::Key_PageDown:
+          s = esc + "[6~";
+          break;
+
+        default:
+          break;
+        }
+    }
+
+  return s;
+}
+
 class QConsolePrivate
 {
   friend class QWinTerminalImpl;
 
 public:
 
   enum KeyboardCursorType
     {
@@ -1289,39 +1349,16 @@ void QWinTerminalImpl::wheelEvent (QWhee
       d->m_inWheelEvent = true;
       QApplication::sendEvent (d->m_scrollBar, event);
       d->m_inWheelEvent = false;
     }
 }
 
 //////////////////////////////////////////////////////////////////////////////
 
-bool QWinTerminalImpl::winEvent (MSG* msg, long* result)
-{
-  switch (msg->message)
-    {
-    case WM_KEYDOWN:
-    case WM_KEYUP:
-    //case WM_CHAR:
-      if ( GetKeyState ('C') == 0 || GetKeyState (VK_CONTROL) == 0)
-        {
-          PostMessage (d->m_consoleWindow,
-                   msg->message,
-                   msg->wParam,
-                   msg->lParam);
-        }
-      // allow Qt to process messages as well, in case of shortcuts etc
-      return false;
-    default:
-      return false;
-    }
-}
-
-//////////////////////////////////////////////////////////////////////////////
-
 void QWinTerminalImpl::scrollValueChanged (int value)
 {
   d->setScrollValue (value);
 }
 
 //////////////////////////////////////////////////////////////////////////////
 
 void QWinTerminalImpl::monitorConsole (void)
@@ -1354,16 +1391,20 @@ void QWinTerminalImpl::focusOutEvent (QF
 
   setBlinkingCursorState (false);
 
   QWidget::focusOutEvent (event);
 }
 
 void QWinTerminalImpl::keyPressEvent (QKeyEvent* event)
 {
+  QString s = translateKey (event);
+  if (!s.isEmpty ())
+    sendText (s);
+
   if (d->m_hasBlinkingCursor)
     {
       d->m_blinkCursorTimer->start (d->BLINK_DELAY);
 
       if (d->m_cursorBlinking)
         blinkCursorEvent ();
     }
 
diff --git a/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.h b/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.h
--- a/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.h
+++ b/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.h
@@ -76,17 +76,16 @@ protected:
   void viewPaintEvent (QConsoleView*, QPaintEvent*);
   void setBlinkingCursor (bool blink);
   void setBlinkingCursorState (bool blink);
   void viewResizeEvent (QConsoleView*, QResizeEvent*);
   void wheelEvent (QWheelEvent*);
   void focusInEvent (QFocusEvent*);
   void focusOutEvent (QFocusEvent*);
   void keyPressEvent (QKeyEvent*);
-  bool winEvent (MSG*, long*);
   virtual void start (void);
   void mouseMoveEvent (QMouseEvent *event);
   void mousePressEvent (QMouseEvent *event);
   void mouseReleaseEvent (QMouseEvent *event);
 
 private slots:
   void scrollValueChanged (int value);
   void monitorConsole (void);
