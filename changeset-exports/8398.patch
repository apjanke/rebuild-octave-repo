# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1228989840 -3600
#      Thu Dec 11 11:04:00 2008 +0100
# Node ID d95282fa057941c06d2299cede744b32a34d9547
# Parent  4780279e809445e91a7cab8218a622ffa70d81cc
allow element assignment to diagonal matrices

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,27 @@
+2008-12-11  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov-base-diag.cc (octave_base_diag<DMT,MT>::subsasgn): New method.
+	* ov-base-diag.h (octave_base_diag<DMT,MT>::subsasgn): Declare it.
+	(octave_base_diag<DMT,MT>::chk_valid_scalar): New method decl.
+
+	* ov-re-diag.cc (octave_diag_matrix::chk_valid_scalar): New method
+	override.
+	* ov-re-diag.h: Declare it.
+	* ov-flt-re-diag.cc (octave_float_diag_matrix::chk_valid_scalar): New
+	method override.
+	* ov-flt-re-diag.h: Declare it.
+	* ov-cx-diag.cc (octave_complex_diag_matrix::chk_valid_scalar): New 
+	method override.
+	* ov-cx-diag.h: Declare it.
+	* ov-flt-cx-diag.cc (octave_float_complex_diag_matrix::chk_valid_scalar): 
+	New method override.
+	* ov-flt-cx-diag.h: Declare it.
+
 2008-12-10  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/expm.cc: Remove.
 	* Makefile.in: Update.
 
 2008-12-10  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-intx.h (OCTAVE_VALUE_INT_SCALAR_T::empty_clone): Construct an
diff --git a/src/ov-base-diag.cc b/src/ov-base-diag.cc
--- a/src/ov-base-diag.cc
+++ b/src/ov-base-diag.cc
@@ -123,16 +123,85 @@ octave_base_diag<DMT, MT>::do_index_op (
       else
         retval = to_dense ().do_index_op (idx, resize_ok);
     }
 
   return retval;
 }
 
 template <class DMT, class MT>
+octave_value 
+octave_base_diag<DMT, MT>::subsasgn (const std::string& type,
+                                     const std::list<octave_value_list>& idx,
+                                     const octave_value& rhs)
+{
+  octave_value retval;
+
+  switch (type[0])
+    {
+    case '(':
+      {
+	if (type.length () == 1)
+          {
+            octave_value_list jdx = idx.front ();
+            // Check for a simple element assignment. That means, if D is a diagonal matrix,
+            // `D(i,i) = x' will not destroy its diagonality (provided i is a valid index).
+            if (jdx.length () == 2 && jdx(0).is_scalar_type () && jdx(1).is_scalar_type ())
+              {
+                typename DMT::element_type val;
+                idx_vector i0 = jdx(0).index_vector (), i1 = jdx(1).index_vector ();
+                if (! error_state  && i0(0) == i1(0) 
+                    && i0(0) < matrix.rows () && i1(0) < matrix.cols ()
+                    && chk_valid_scalar (rhs, val))
+                  {
+                    matrix (i0(0), i1(0)) = val;                    
+                    retval = this;
+                    this->count++;
+                    // invalidate cache
+                    dense_cache = octave_value ();
+                  }
+              }
+
+            if (! error_state && ! retval.is_defined ())
+              retval = numeric_assign (type, idx, rhs);
+          }
+	else
+	  {
+	    std::string nm = type_name ();
+	    error ("in indexed assignment of %s, last lhs index must be ()",
+		   nm.c_str ());
+	  }
+      }
+      break;
+
+    case '{':
+    case '.':
+      {
+	if (is_empty ())
+	  {
+	    octave_value tmp = octave_value::empty_conv (type, rhs);
+
+	    retval = tmp.subsasgn (type, idx, rhs);
+	  }
+	else
+	  {
+	    std::string nm = type_name ();
+	    error ("%s cannot be indexed with %c", nm.c_str (), type[0]);
+	  }
+      }
+      break;
+
+    default:
+      panic_impossible ();
+    }
+
+  return retval;
+}
+
+template <class DMT, class MT>
 octave_value
 octave_base_diag<DMT, MT>::resize (const dim_vector& dv, bool fill) const
 {
   octave_value retval;
   if (dv.length () == 2)
     {
       DMT rm (matrix);
       rm.resize (dv(0), dv(1));
diff --git a/src/ov-base-diag.h b/src/ov-base-diag.h
--- a/src/ov-base-diag.h
+++ b/src/ov-base-diag.h
@@ -67,16 +67,20 @@ public:
 
   octave_value_list subsref (const std::string& type,
 			     const std::list<octave_value_list>& idx, int)
     { return subsref (type, idx); }
 
   octave_value do_index_op (const octave_value_list& idx,
 			    bool resize_ok = false);
 
+  octave_value subsasgn (const std::string& type,
+			 const std::list<octave_value_list>& idx,
+			 const octave_value& rhs);
+
   dim_vector dims (void) const { return matrix.dims (); }
 
   octave_idx_type nnz (void) const { return to_dense ().nnz (); }
 
   octave_value reshape (const dim_vector& new_dims) const
     { return to_dense ().reshape (new_dims); }
 
   octave_value permute (const Array<int>& vec, bool inv = false) const
@@ -239,17 +243,20 @@ public:
   octave_value isinf (void) const;
   octave_value isna (void) const;
   octave_value isnan (void) const;
 
 protected:
 
   DMT matrix;
 
-  octave_value to_dense () const;
+  octave_value to_dense (void) const;
+
+  virtual bool chk_valid_scalar (const octave_value&, 
+                                 typename DMT::element_type&) const = 0;
 
 private:
 
   mutable octave_value dense_cache;
 
 };
 
 #endif
diff --git a/src/ov-cx-diag.cc b/src/ov-cx-diag.cc
--- a/src/ov-cx-diag.cc
+++ b/src/ov-cx-diag.cc
@@ -215,8 +215,17 @@ octave_complex_diag_matrix::load_binary 
                 static_cast<save_type> (tmp), 2 * len, swap, fmt);
   if (error_state || ! is)
     return false;
   matrix = m;
 
   return true;
 }
 
+bool 
+octave_complex_diag_matrix::chk_valid_scalar (const octave_value& val, 
+                                              Complex& x) const
+{
+  bool retval = val.is_complex_scalar () || val.is_real_scalar ();
+  if (retval)
+    x = val.complex_value ();
+  return retval;
+}
diff --git a/src/ov-cx-diag.h b/src/ov-cx-diag.h
--- a/src/ov-cx-diag.h
+++ b/src/ov-cx-diag.h
@@ -79,14 +79,18 @@ public:
 		    oct_mach_info::float_format fmt);
 
   octave_value abs (void) const;
   octave_value conj (void) const;
   octave_value imag (void) const;
   octave_value real (void) const;
 
 private:
+
+  bool chk_valid_scalar (const octave_value&, 
+                         Complex&) const;
+
   DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
diff --git a/src/ov-flt-cx-diag.cc b/src/ov-flt-cx-diag.cc
--- a/src/ov-flt-cx-diag.cc
+++ b/src/ov-flt-cx-diag.cc
@@ -189,8 +189,18 @@ octave_float_complex_diag_matrix::load_b
   read_floats (is, reinterpret_cast<float *> (re), 
                static_cast<save_type> (tmp), 2 * len, swap, fmt);
   if (error_state || ! is)
     return false;
   matrix = m;
 
   return true;
 }
+
+bool 
+octave_float_complex_diag_matrix::chk_valid_scalar (const octave_value& val, 
+                                                    FloatComplex& x) const
+{
+  bool retval = val.is_complex_scalar () || val.is_real_scalar ();
+  if (retval)
+    x = val.float_complex_value ();
+  return retval;
+}
diff --git a/src/ov-flt-cx-diag.h b/src/ov-flt-cx-diag.h
--- a/src/ov-flt-cx-diag.h
+++ b/src/ov-flt-cx-diag.h
@@ -77,16 +77,20 @@ public:
 		    oct_mach_info::float_format fmt);
 
   octave_value abs (void) const;
   octave_value conj (void) const;
   octave_value imag (void) const;
   octave_value real (void) const;
 
 private:
+
+  bool chk_valid_scalar (const octave_value&, 
+                         FloatComplex&) const;
+
   DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
 
 /*
diff --git a/src/ov-flt-re-diag.cc b/src/ov-flt-re-diag.cc
--- a/src/ov-flt-re-diag.cc
+++ b/src/ov-flt-re-diag.cc
@@ -158,8 +158,18 @@ octave_float_diag_matrix::load_binary (s
   octave_idx_type len = m.length ();
   read_floats (is, re, static_cast<save_type> (tmp), len, swap, fmt);
   if (error_state || ! is)
     return false;
   matrix = m;
 
   return true;
 }
+
+bool 
+octave_float_diag_matrix::chk_valid_scalar (const octave_value& val, 
+                                            float& x) const
+{
+  bool retval = val.is_real_scalar ();
+  if (retval)
+    x = val.float_value ();
+  return retval;
+}
diff --git a/src/ov-flt-re-diag.h b/src/ov-flt-re-diag.h
--- a/src/ov-flt-re-diag.h
+++ b/src/ov-flt-re-diag.h
@@ -77,14 +77,18 @@ public:
 		    oct_mach_info::float_format fmt);
 
   octave_value abs (void) const;
   octave_value conj (void) const;
   octave_value imag (void) const;
   octave_value real (void) const;
 
 private:
+
+  bool chk_valid_scalar (const octave_value&, 
+                         float&) const;
+
   DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
diff --git a/src/ov-re-diag.cc b/src/ov-re-diag.cc
--- a/src/ov-re-diag.cc
+++ b/src/ov-re-diag.cc
@@ -184,8 +184,17 @@ octave_diag_matrix::load_binary (std::is
   read_doubles (is, re, static_cast<save_type> (tmp), len, swap, fmt);
   if (error_state || ! is)
     return false;
   matrix = m;
 
   return true;
 }
 
+bool 
+octave_diag_matrix::chk_valid_scalar (const octave_value& val, 
+                                      double& x) const
+{
+  bool retval = val.is_real_scalar ();
+  if (retval)
+    x = val.double_value ();
+  return retval;
+}
diff --git a/src/ov-re-diag.h b/src/ov-re-diag.h
--- a/src/ov-re-diag.h
+++ b/src/ov-re-diag.h
@@ -79,14 +79,18 @@ public:
 		    oct_mach_info::float_format fmt);
 
   octave_value abs (void) const;
   octave_value conj (void) const;
   octave_value imag (void) const;
   octave_value real (void) const;
 
 private:
+
+  bool chk_valid_scalar (const octave_value&, 
+                         double&) const;
+
   DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
