# HG changeset patch
# User jwe
# Date 811547908 0
#      Tue Sep 19 21:58:28 1995 +0000
# Node ID cd6c9be7337ce8103029cd32c54dd8e1e0cdcc44
# Parent  4f2e40ba7f772f5b3cfea2b2f6edb1143de1a20a
[project @ 1995-09-19 21:54:56 by jwe]

diff --git a/src/help.cc b/src/help.cc
--- a/src/help.cc
+++ b/src/help.cc
@@ -540,21 +540,21 @@ try_info (const char *string)
   if (string)
     cmd_buf << " --index-search " << string;
 
   cmd_buf << ends;
 
   cmd_str = cmd_buf.str ();
 
   volatile sig_handler *old_sigint_handler;
-  old_sigint_handler = signal (SIGINT, SIG_IGN);
+  old_sigint_handler = octave_set_signal_handler (SIGINT, SIG_IGN);
 
   status = system (cmd_str);
 
-  signal (SIGINT, old_sigint_handler);
+  octave_set_signal_handler (SIGINT, old_sigint_handler);
 
   if ((status & 0xff) == 0)
     status = (signed char) ((status & 0xff00) >> 8);
   else
     status = 127;
 
   return status;
 }
diff --git a/src/oct-hist.cc b/src/oct-hist.cc
--- a/src/oct-hist.cc
+++ b/src/oct-hist.cc
@@ -542,19 +542,22 @@ do_edit_history (int argc, char **argv)
 
   ostrstream buf;
   buf << user_pref.editor << " " << name << ends;
   char *cmd = buf.str ();
 
   // Ignore interrupts while we are off editing commands.  Should we
   // maybe avoid using system()?
 
-  volatile sig_handler *saved_sigint_handler = signal (SIGINT, SIG_IGN);
+  volatile sig_handler *saved_sigint_handler
+    = octave_set_signal_handler (SIGINT, SIG_IGN);
+
   system (cmd);
-  signal (SIGINT, saved_sigint_handler);
+
+  octave_set_signal_handler (SIGINT, saved_sigint_handler);
 
   // Write the commands to the history file since parse_and_execute
   // disables command line history while it executes.
 
   fstream file (name, ios::in);
 
   char *line;
   int first = 1;
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -695,28 +695,29 @@ main (int argc, char **argv)
       echo_input = 1;
     }
 
   if (! interactive)
     using_readline = 0;
 
   // Allow the user to interrupt us without exiting.
 
-  volatile sig_handler *saved_sigint_handler = signal (SIGINT, SIG_IGN);
+  volatile sig_handler *saved_sigint_handler
+    = octave_set_signal_handler (SIGINT, SIG_IGN);
 
   if (setjmp (toplevel) != 0)
     {
       raw_mode (0);
 
       cout << "\n";
     }
 
   can_interrupt = 1;
 
-  signal (SIGINT, saved_sigint_handler);
+  octave_set_signal_handler (SIGINT, saved_sigint_handler);
 
   // The big loop.
 
   int retval;
   do
     {
       curr_sym_tab = top_level_sym_tab;
 
diff --git a/src/pager.cc b/src/pager.cc
--- a/src/pager.cc
+++ b/src/pager.cc
@@ -145,24 +145,24 @@ flush_output_to_pager (void)
     {
       char *pgr = user_pref.pager_binary;
       if (pgr)
 	{
 	  oprocstream pager_stream (pgr);
 	  if (pager_stream)
 	    {
 	      volatile sig_handler *old_sigint_handler;
-	      old_sigint_handler = signal (SIGINT, SIG_IGN);
+	      old_sigint_handler = octave_set_signal_handler (SIGINT, SIG_IGN);
 
 	      pager_stream << message;
 	      delete [] message;
 	      pager_stream.flush ();
 	      pager_stream.close ();
 
-	      signal (SIGINT, old_sigint_handler);
+	      octave_set_signal_handler (SIGINT, old_sigint_handler);
 
 	      return;
 	    }
 	}
     }
 
   cout << message;
   delete [] message;
diff --git a/src/sighandlers.h b/src/sighandlers.h
--- a/src/sighandlers.h
+++ b/src/sighandlers.h
@@ -38,16 +38,18 @@ typedef RETSIGTYPE sig_handler (int);
 
 // Nonzero means we have already printed a message for this series of
 // SIGPIPES.  We assume that the writer will eventually give up.
 extern int pipe_handler_error_count;
 
 // Nonzero means we can be interrupted.
 extern int can_interrupt;
 
+extern sig_handler *octave_set_signal_handler (int, sig_handler *);
+
 extern void install_signal_handlers (void);
 
 // This is taken directly from Emacs 19:
 
 #ifndef SYS_SIGLIST_DECLARED
 extern char *sys_siglist[];
 #endif
 
