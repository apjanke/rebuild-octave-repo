# HG changeset patch
# User Daniel J Sebald <daniel.sebald@ieee.org>
# Date 1412407037 18000
#      Sat Oct 04 02:17:17 2014 -0500
# Node ID bdf90710dddfc1ca6858ff3ffb8d688699ffd222
# Parent  d9c0b08e3da697ffd391e7a64dfb58eaa1c44958
Map -pi to pi for principal argument used in complex operators (bug #43313).

* oct-cmplx.h: For all operator templates in file, use conditional tests on
arg() output to effectively map -pi to pi.

* Array-C.cc (nan_ascending_compare, nan_descending_compare) : Update sort
routines used by issorted to map -pi to pi.  Use intermediate variables for
a 40% speed-up in calculation.

* Array-fC.cc (nan_ascending_compare, nan_descending_compare) : Update sort
routines used by issorted to map -pi to pi.  Use intermediate variables for
a 40% speed-up in calculation.

* test/complex.tst: New test file to check behavior.

* test/Makefile.am: Add complex.tst to build system.

diff --git a/liboctave/array/Array-C.cc b/liboctave/array/Array-C.cc
--- a/liboctave/array/Array-C.cc
+++ b/liboctave/array/Array-C.cc
@@ -36,32 +36,64 @@ along with Octave; see the file COPYING.
 
 template <>
 inline bool
 sort_isnan<Complex> (const Complex& x)
 {
   return xisnan (x);
 }
 
+// Sort Criteria: 1) isnan, 2) magnitude of z, 3) phase of z in range (-pi, pi]
+
 static bool
 nan_ascending_compare (const Complex& x, const Complex& y)
 {
-  return (xisnan (y)
-          ? ! xisnan (x)
-          : ((std::abs (x) < std::abs (y))
-             || ((std::abs (x) == std::abs (y)) && (arg (x) < arg (y)))));
+  if (xisnan (y))
+    return (! xisnan (x));
+
+  double xabs = std::abs (x);
+  double yabs = std::abs (y);
+
+  if (xabs < yabs)
+    return true;
+  else if (xabs == yabs)
+    {
+      double xarg = arg (x);
+      double yarg = arg (y);
+      xarg = (xarg == -M_PI) ? M_PI : xarg; 
+      yarg = (yarg == -M_PI) ? M_PI : yarg; 
+
+      return xarg < yarg;
+    }
+  else
+    return false;
 }
 
 static bool
 nan_descending_compare (const Complex& x, const Complex& y)
 {
-  return (xisnan (x)
-          ? ! xisnan (y)
-          : ((std::abs (x) > std::abs (y))
-             || ((std::abs (x) == std::abs (y)) && (arg (x) > arg (y)))));
+  if (xisnan (x))
+    return (! xisnan (y));
+
+  double xabs = std::abs (x);
+  double yabs = std::abs (y);
+
+  if (xabs > yabs)
+    return true;
+  else if (xabs == yabs)
+    {
+      double xarg = arg (x);
+      double yarg = arg (y);
+      xarg = (xarg == -M_PI) ? M_PI : xarg; 
+      yarg = (yarg == -M_PI) ? M_PI : yarg; 
+
+      return xarg > yarg;
+    }
+  else
+    return false;
 }
 
 Array<Complex>::compare_fcn_type
 safe_comparator (sortmode mode, const Array<Complex>& a , bool allow_chk)
 {
   Array<Complex>::compare_fcn_type result = 0;
 
   if (allow_chk)
diff --git a/liboctave/array/Array-fC.cc b/liboctave/array/Array-fC.cc
--- a/liboctave/array/Array-fC.cc
+++ b/liboctave/array/Array-fC.cc
@@ -36,32 +36,64 @@ along with Octave; see the file COPYING.
 
 template <>
 inline bool
 sort_isnan<FloatComplex> (const FloatComplex& x)
 {
   return xisnan (x);
 }
 
+// Sort Criteria: 1) isnan, 2) magnitude of z, 3) phase of z in range (-pi, pi]
+
 static bool
 nan_ascending_compare (const FloatComplex& x, const FloatComplex& y)
 {
-  return (xisnan (y)
-          ? ! xisnan (x)
-          : ((std::abs (x) < std::abs (x))
-             || ((std::abs (x) == std::abs (y)) && (arg (x) < arg (y)))));
+  if (xisnan (y))
+    return (! xisnan (x));
+
+  float xabs = std::abs (x);
+  float yabs = std::abs (y);
+
+  if (xabs < yabs)
+    return true;
+  else if (xabs == yabs)
+    {
+      float xarg = arg (x);
+      float yarg = arg (y);
+      xarg = (xarg == -M_PI) ? M_PI : xarg; 
+      yarg = (yarg == -M_PI) ? M_PI : yarg; 
+
+      return xarg < yarg;
+    }
+  else
+    return false;
 }
 
 static bool
 nan_descending_compare (const FloatComplex& x, const FloatComplex& y)
 {
-  return (xisnan (x)
-          ? ! xisnan (y)
-          : ((std::abs (x) > std::abs (x))
-             || ((std::abs (x) == std::abs (y)) && (arg (x) > arg (y)))));
+  if (xisnan (x))
+    return (! xisnan (y));
+
+  float xabs = std::abs (x);
+  float yabs = std::abs (y);
+
+  if (xabs > yabs)
+    return true;
+  else if (xabs == yabs)
+    {
+      float xarg = arg (x);
+      float yarg = arg (y);
+      xarg = (xarg == -M_PI) ? M_PI : xarg; 
+      yarg = (yarg == -M_PI) ? M_PI : yarg; 
+
+      return xarg > yarg;
+    }
+  else
+    return false;
 }
 
 Array<FloatComplex>::compare_fcn_type
 safe_comparator (sortmode mode, const Array<FloatComplex>& a, bool allow_chk)
 {
   Array<FloatComplex>::compare_fcn_type result = 0;
 
   if (allow_chk)
diff --git a/liboctave/util/oct-cmplx.h b/liboctave/util/oct-cmplx.h
--- a/liboctave/util/oct-cmplx.h
+++ b/liboctave/util/oct-cmplx.h
@@ -31,52 +31,69 @@ typedef std::complex<float> FloatComplex
 
 // For complex-complex and complex-real comparisons, we use the following
 // ordering: compare absolute values first; if they match, compare phase angles.
 // This is partially inconsistent with M*b, which compares complex numbers only
 // by their real parts; OTOH, it uses the same definition for max/min and sort.
 // The abs/arg comparison is definitely more useful (the other one is emulated
 // rather trivially), so let's be consistent and use that all over.
 
+// The standard C library function arg() returns [-pi,pi], which creates a
+// non-unique representation for numbers along the negative real axis branch
+// cut.  Change this to principal value (-pi,pi] by mapping -pi to pi.
+
 #define DEF_COMPLEXR_COMP(OP, OPS) \
 template <class T> \
 inline bool operator OP (const std::complex<T>& a, const std::complex<T>& b) \
 { \
   FLOAT_TRUNCATE const T ax = std::abs (a); \
   FLOAT_TRUNCATE const T bx = std::abs (b); \
   if (ax == bx) \
     { \
       FLOAT_TRUNCATE const T ay = std::arg (a); \
       FLOAT_TRUNCATE const T by = std::arg (b); \
+      if (ay == -M_PI) \
+        { \
+          if (by != -M_PI) \
+            return M_PI OP by; \
+        } \
+      else if (by == -M_PI) \
+        { \
+          return ay OP M_PI; \
+        } \
       return ay OP by; \
     } \
   else \
     return ax OPS bx; \
 } \
 template <class T> \
 inline bool operator OP (const std::complex<T>& a, T b) \
 { \
   FLOAT_TRUNCATE const T ax = std::abs (a); \
   FLOAT_TRUNCATE const T bx = std::abs (b); \
   if (ax == bx) \
     { \
       FLOAT_TRUNCATE const T ay = std::arg (a); \
+      if (ay == -M_PI) \
+        return M_PI OP 0; \
       return ay OP 0; \
     } \
   else \
     return ax OPS bx; \
 } \
 template <class T> \
 inline bool operator OP (T a, const std::complex<T>& b) \
 { \
   FLOAT_TRUNCATE const T ax = std::abs (a); \
   FLOAT_TRUNCATE const T bx = std::abs (b); \
   if (ax == bx) \
     { \
       FLOAT_TRUNCATE const T by = std::arg (b); \
+      if (by == -M_PI) \
+        return 0 OP M_PI; \
       return 0 OP by; \
     } \
   else \
     return ax OPS bx; \
 }
 
 DEF_COMPLEXR_COMP (>, >)
 DEF_COMPLEXR_COMP (<, <)
diff --git a/test/Makefile.am b/test/Makefile.am
--- a/test/Makefile.am
+++ b/test/Makefile.am
@@ -20,17 +20,18 @@
 
 include $(top_srcdir)/build-aux/common.mk
 
 FCN_FILES = \
   fntests.m \
   args.tst \
   bug-31371.tst \
   bug-38576.tst \
- colormaps.tst \
+  colormaps.tst \
+  complex.tst \
   diag-perm.tst \
   error.tst \
   eval-catch.tst \
   for.tst \
   func.tst \
   global.tst \
   if.tst \
   index.tst \
diff --git a/test/complex.tst b/test/complex.tst
new file mode 100644
--- /dev/null
+++ b/test/complex.tst
@@ -0,0 +1,44 @@
+## Copyright (C) 2015 Rik Wehbring
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 3 of the License, or (at
+## your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+## General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
+## <http://www.gnu.org/licenses/>.
+
+## Test ordering of complex values by magnitude and then by phase
+%!test
+%! x = [0 i 1+i 2 3i 3+4i];
+%! assert (sort (x, "descend"), fliplr (x));
+
+%!test
+%! x = [1, -1, i, -i];
+%! xs = [-i, 1, i, -1];
+%! assert (sort (x), xs);
+%! assert (sort (x, "descend"), fliplr (xs));
+
+## bug #44071, issorted incorrect because it uses different sort routine.
+%!assert (issorted ([1, -1, i, -i]), false)
+
+## bug #43313, -1 is both '>' and '==' to (-1 - 0i)
+%!test
+%! assert (complex(-1,0) == complex(-1,-0), true);
+%! assert (complex(-1,0) > complex(-1,-0), false);
+%! assert (complex(-1,0) < complex(-1,-0), false);
+
+## Test that sort and issorted both agree on boundary case
+%!test
+%! x = [complex(-1,0), complex(-1,-0), i, -i, 1];
+%! xs = sort (x);
+%! assert (issorted (xs));
+
