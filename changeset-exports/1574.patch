# HG changeset patch
# User jwe
# Date 814077284 0
#      Thu Oct 19 04:34:44 1995 +0000
# Node ID dd7d27461567e09f88c06dae029f9a4721485c27
# Parent  403c60daa8c7c7eb7c12050248614348667a642b
[project @ 1995-10-19 04:34:20 by jwe]

diff --git a/liboctave/Array-C.cc b/liboctave/Array-C.cc
--- a/liboctave/Array-C.cc
+++ b/liboctave/Array-C.cc
@@ -30,18 +30,24 @@ Software Foundation, 59 Temple Place - S
 
 template class ArrayRep<Complex>;
 template class Array<Complex>;
 template class Array2<Complex>;
 template class DiagArray<Complex>;
 
 template void assign (Array<Complex>&, const Array<Complex>&);
 template void assign (Array<Complex>&, const Array<double>&);
+template void assign (Array<Complex>&, const Array<int>&);
+template void assign (Array<Complex>&, const Array<short>&);
+template void assign (Array<Complex>&, const Array<char>&);
 
 template void assign (Array2<Complex>&, const Array2<Complex>&);
 template void assign (Array2<Complex>&, const Array2<double>&);
+template void assign (Array2<Complex>&, const Array2<int>&);
+template void assign (Array2<Complex>&, const Array2<short>&);
+template void assign (Array2<Complex>&, const Array2<char>&);
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/Array-d.cc b/liboctave/Array-d.cc
--- a/liboctave/Array-d.cc
+++ b/liboctave/Array-d.cc
@@ -27,17 +27,23 @@ Software Foundation, 59 Temple Place - S
 #include "Array.cc"
 
 template class ArrayRep<double>;
 template class Array<double>;
 template class Array2<double>;
 template class DiagArray<double>;
 
 template void assign (Array<double>&, const Array<double>&);
+template void assign (Array<double>&, const Array<int>&);
+template void assign (Array<double>&, const Array<short>&);
+template void assign (Array<double>&, const Array<char>&);
 
 template void assign (Array2<double>&, const Array2<double>&);
+template void assign (Array2<double>&, const Array2<int>&);
+template void assign (Array2<double>&, const Array2<short>&);
+template void assign (Array2<double>&, const Array2<char>&);
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/Array-i.cc b/liboctave/Array-i.cc
--- a/liboctave/Array-i.cc
+++ b/liboctave/Array-i.cc
@@ -18,25 +18,35 @@ for more details.
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 // Instantiate Arrays of integer values.
 
+#define NO_DIAG_ARRAY 1
+
 #include "Array.h"
 #include "Array.cc"
 
 template class ArrayRep<int>;
 template class Array<int>;
+template class Array2<int>;
 
-// For now, we only need 1D arrays of integers.
-//
-// template class Array2<int>;
-// template class DiagArray<int>;
+#ifndef NO_DIAG_ARRAY
+template class DiagArray<int>;
+#endif
+
+template void assign (Array<int>&, const Array<int>&);
+template void assign (Array<int>&, const Array<short>&);
+template void assign (Array<int>&, const Array<char>&);
+
+template void assign (Array2<int>&, const Array2<int>&);
+template void assign (Array2<int>&, const Array2<short>&);
+template void assign (Array2<int>&, const Array2<char>&);
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/Array-idx.h b/liboctave/Array-idx.h
--- a/liboctave/Array-idx.h
+++ b/liboctave/Array-idx.h
@@ -288,44 +288,58 @@ Array2<T>::value (void)
   else if (n_idx == 1)
     {
       if (nr == 1 && nc == 1)
 	{
 	  Array<T> tmp = Array<T>::value ();
 
 	  int len = tmp.length ();
 
-	  if (pcv_flag)
-	    retval = Array2<T> (tmp, len, 1);
+	  if (len == 0)
+	    retval = Array2<T> (0, 0);
 	  else
-	    retval = Array2<T> (tmp, 1, len);
+	    {
+	      if (pcv_flag)
+		retval = Array2<T> (tmp, len, 1);
+	      else
+		retval = Array2<T> (tmp, 1, len);
+	    }
 	}
       else if (nr == 1 || nc == 1)
 	{
 	  int result_is_column_vector = (nc == 1);
 
 	  if (dfi_flag)
 	    {
 	      idx_vector *tmp = get_idx ();
 	      idx_vector idx = tmp[0];
 
-	      result_is_column_vector = idx.is_colon ();
+	      if (idx.is_colon ())
+		result_is_column_vector = 1;
 	    }
 
 	  Array<T> tmp = Array<T>::value ();
 
 	  int len = tmp.length ();
 
-	  if (result_is_column_vector)
-	    retval = Array2<T> (tmp, len, 1);
+	  if (len == 0)
+	    retval = Array2<T> (0, 0);
 	  else
-	    retval = Array2<T> (tmp, 1, len);
+	    {
+	      if (result_is_column_vector)
+		retval = Array2<T> (tmp, len, 1);
+	      else
+		retval = Array2<T> (tmp, 1, len);
+	    }
 	}
       else if (dfi_flag)
 	{
+	  // This code is only for indexing matrices.  The vector
+	  // cases are handled above.
+
 	  idx_vector *tmp = get_idx ();
 	  idx_vector idx = tmp[0];
 
 	  idx.freeze (nr * nc, "matrix", pzo_flag);
 
 	  if (idx)
 	    {
 	      int result_nr = idx.orig_rows ();
diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -476,16 +476,17 @@ template <class T>
 void
 Array3<T>::resize (int n, int m, int k, const T& val)
 {
   assert (0); // XXX FIXME XXX
 }
 
 // A two-dimensional array with diagonal elements only.
 
+#ifndef NO_DIAG_ARRAY
 #if 1
 template <class T>
 T&
 DiagArray<T>::elem (int r, int c)
 {
   static T foo (0);
   return (r == c) ? Array<T>::elem (r) : foo;
 }
@@ -635,15 +636,16 @@ DiagArray<T>::resize (int r, int c, cons
     }
 
   for (int i = min_len; i < new_len; i++)
     xelem (i, i) = val;
 
   if (--old_rep->count <= 0)
     delete old_rep;
 }
+#endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -37,17 +37,20 @@ Software Foundation, 59 Temple Place - S
 class idx_vector;
 
 // Classes we declare.
 
 template <class T> class ArrayRep;
 template <class T> class Array;
 template <class T> class Array2;
 template <class T> class Array3;
+
+#ifndef NO_DIAG_ARRAY
 template <class T> class DiagArray;
+#endif
 
 #ifdef HEAVYWEIGHT_INDEXING
 #define SET_MAX_INDICES(n) set_max_indices (n)
 #else
 #define SET_MAX_INDICES(n)
 #endif
 
 // The real representation of all arrays.
@@ -55,17 +58,20 @@ template <class T> class DiagArray;
 template <class T>
 class ArrayRep
 {
   // Rethink resize()?
 
   friend class Array<T>;
   friend class Array2<T>;
   friend class Array3<T>;
+
+#ifndef NO_DIAG_ARRAY
   friend class DiagArray<T>;
+#endif
 
 private:
 
   T *data;
   int count;
   int len;
 
 #ifdef HEAVYWEIGHT_INDEXING
@@ -281,23 +287,25 @@ public:
 
   Array2 (const Array<T>& a, int n, int m) : Array<T> (a)
     {
       d1 = n;
       d2 = m;
       set_max_indices (2);
     }
 
+#ifndef NO_DIAG_ARRAY
   Array2 (const DiagArray<T>& a) : Array<T> (a.rows () * a.cols (), T (0))
     {
       for (int i = 0; i < a.length (); i++)
 	elem (i, i) = a.elem (i, i);
 
       set_max_indices (2);
     }
+#endif
 
   ~Array2 (void) { }
 
   Array2<T>& operator = (const Array2<T>& a)
     {
       if (this != &a)
 	{
 	  Array<T>::operator = (a);
@@ -438,16 +446,17 @@ int assign (Array3<LT>& lhs, const Array
 // Subject: Re: How to overload [] to do READ/WRITE differently ?
 // Message-ID: <KANZE.93Nov29151407@slsvhdt.us-es.sel.de>
 // Sender: news@us-es.sel.de
 // Date: 29 Nov 1993 14:14:07 GMT
 // --
 // James Kanze                             email: kanze@us-es.sel.de
 // GABI Software, Sarl., 8 rue du Faisan, F-67000 Strasbourg, France
 
+#ifndef NO_DIAG_ARRAY
 template <class T>
 class DiagArray : public Array<T>
 {
 private:
   T get (int i) { return Array<T>::elem (i); }
   void set (const T& val, int i) { Array<T>::elem (i) = val; }
 
 #if 0
@@ -626,16 +635,17 @@ public:
   T checkelem (int r, int c) const;
   T operator () (int r, int c) const;
 
   void resize (int n, int m);
   void resize (int n, int m, const T& val);
 
   void maybe_delete_elements (idx_vector& i, idx_vector& j);
 };
+#endif
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
diff --git a/liboctave/CDiagMatrix.h b/liboctave/CDiagMatrix.h
--- a/liboctave/CDiagMatrix.h
+++ b/liboctave/CDiagMatrix.h
@@ -39,17 +39,17 @@ Software Foundation, 59 Temple Place - S
 
 class ComplexDiagMatrix : public MDiagArray<Complex>
 {
 public:
 
   ComplexDiagMatrix (void) : MDiagArray<Complex> () { }
   ComplexDiagMatrix (int n) : MDiagArray<Complex> (n) { }
   ComplexDiagMatrix (int n, const Complex& val)
-    : MDiagArray<Complex> (n, val) { }
+    : MDiagArray<Complex> (n, n, val) { }
   ComplexDiagMatrix (int r, int c) : MDiagArray<Complex> (r, c) { }
   ComplexDiagMatrix (int r, int c, const Complex& val)
     : MDiagArray<Complex> (r, c, val) { }
   ComplexDiagMatrix (const RowVector& a);
   ComplexDiagMatrix (const ComplexRowVector& a) : MDiagArray<Complex> (a) { }
   ComplexDiagMatrix (const ColumnVector& a);
   ComplexDiagMatrix (const ComplexColumnVector& a)
     : MDiagArray<Complex> (a) { }
diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -100,16 +100,26 @@ ComplexMatrix::ComplexMatrix (const Diag
 
 ComplexMatrix::ComplexMatrix (const ComplexDiagMatrix& a)
   : MArray2<Complex> (a.rows (), a.cols (), 0.0)
 {
   for (int i = 0; i < a.length (); i++)
     elem (i, i) = a.elem (i, i);
 }
 
+// XXX FIXME XXX -- could we use a templated mixed-type copy function
+// here?
+
+ComplexMatrix::ComplexMatrix (const charMatrix& a)
+{
+  for (int i = 0; i < a.cols (); i++)
+    for (int j = 0; j < a.rows (); j++)
+      elem (i, j) = a.elem (i, j);
+}
+
 int
 ComplexMatrix::operator == (const ComplexMatrix& a) const
 {
   if (rows () != a.rows () || cols () != a.cols ())
     return 0;
 
   return equal (data (), a.data (), length ());
 }
diff --git a/liboctave/CMatrix.h b/liboctave/CMatrix.h
--- a/liboctave/CMatrix.h
+++ b/liboctave/CMatrix.h
@@ -53,16 +53,18 @@ public:
     : MArray2<Complex> (r, c, val) { }
   ComplexMatrix (const Matrix& a);
   ComplexMatrix (const MArray2<Complex>& a) : MArray2<Complex> (a) { }
   ComplexMatrix (const ComplexMatrix& a) : MArray2<Complex> (a) { }
   ComplexMatrix (const DiagMatrix& a);
   ComplexMatrix (const MDiagArray<Complex>& a) : MArray2<Complex> (a) { }
   ComplexMatrix (const ComplexDiagMatrix& a);
 
+  ComplexMatrix (const charMatrix& a);
+
   ComplexMatrix& operator = (const ComplexMatrix& a)
     {
       MArray2<Complex>::operator = (a);
       return *this;
     }
 
   int operator == (const ComplexMatrix& a) const;
   int operator != (const ComplexMatrix& a) const;
diff --git a/liboctave/MArray.cc b/liboctave/MArray.cc
--- a/liboctave/MArray.cc
+++ b/liboctave/MArray.cc
@@ -217,23 +217,25 @@ MArray<T>
 operator - (const MArray<T>& a)
 {
   NEG_V;
   return MArray<T> (result, l);
 }
 
 // Two dimensional array with math ops.
 
+#ifndef NO_DIAG_ARRAY
 template <class T>
 MArray2<T>::MArray2 (const MDiagArray<T>& a)
   : Array2<T> (a.rows (), a.cols (), T (0))
 {
   for (int i = 0; i < a.length (); i++)
     elem (i, i) = a.elem (i, i);
 }
+#endif
 
 // Element by element MArray2 by scalar ops.
 
 template <class T>
 MArray2<T>&
 operator += (MArray2<T>& a, const T& s)
 {
   DO_VS_OP2 (+=)
@@ -360,16 +362,18 @@ MArray2<T>
 operator - (const MArray2<T>& a)
 {
   NEG_V;
   return MArray2<T> (result, a.rows (), a.cols ());
 }
 
 // Two dimensional diagonal array with math ops.
 
+#ifndef NO_DIAG_ARRAY
+
 // Element by element MDiagArray by MDiagArray ops.
 
 template <class T>
 MDiagArray<T>&
 operator += (MDiagArray<T>& a, const MDiagArray<T>& b)
 {
   int r = a.rows ();
   int c = a.cols ();
@@ -467,15 +471,16 @@ MARRAY_DADA_OP (product,    *, "product"
 
 template <class T>
 MDiagArray<T>
 operator - (const MDiagArray<T>& a)
 {
   NEG_V;
   return MDiagArray<T> (result, a.rows (), a.cols ());
 }
+#endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/MArray.h b/liboctave/MArray.h
--- a/liboctave/MArray.h
+++ b/liboctave/MArray.h
@@ -29,17 +29,20 @@ Software Foundation, 59 Temple Place - S
 #define octave_MArray_h 1
 
 #include "Array.h"
 
 // Classes we declare.
 
 template <class T> class MArray;
 template <class T> class MArray2;
+
+#ifndef NO_DIAG_ARRAY
 template <class T> class MDiagArray;
+#endif
 
 // One dimensional array with math ops.
 
 template <class T>
 class MArray : public Array<T>
 {
 protected:
 
@@ -108,17 +111,20 @@ protected:
 
 public:
 
   MArray2 (void) : Array2<T> () { }
   MArray2 (int n, int m) : Array2<T> (n, m) { }
   MArray2 (int n, int m, const T& val) : Array2<T> (n, m, val) { }
   MArray2 (const Array2<T>& a) : Array2<T> (a) { }
   MArray2 (const MArray2<T>& a) : Array2<T> (a) { }
+
+#ifndef NO_DIAG_ARRAY
   MArray2 (const MDiagArray<T>& a);
+#endif
 
   ~MArray2 (void) { }
 
   MArray2<T>& operator = (const MArray2<T>& a)
     {
       Array2<T>::operator = (a);
       return *this;
     }
@@ -155,28 +161,29 @@ public:
   friend MArray2<T> product (const MArray2<T>& a, const MArray2<T>& b);
   friend MArray2<T> quotient (const MArray2<T>& a, const MArray2<T>& b);
 
   friend MArray2<T> operator - (const MArray2<T>& a);
 };
 
 // Two dimensional diagonal array with math ops.
 
+#ifndef NO_DIAG_ARRAY
 template <class T>
 class MDiagArray : public DiagArray<T>
 {
 protected:
 
   MDiagArray (T *d, int r, int c) : DiagArray<T> (d, r, c) { }
 
 public:
   
   MDiagArray (void) : DiagArray<T> () { }
   MDiagArray (int n) : DiagArray<T> (n) { }
-  MDiagArray (int n, const T& val) : DiagArray<T> (n, val) { }
+//  MDiagArray (int n, const T& val) : DiagArray<T> (n, val) { }
   MDiagArray (int r, int c) : DiagArray<T> (r, c) { }
   MDiagArray (int r, int c, const T& val) : DiagArray<T> (r, c, val) { }
   MDiagArray (const DiagArray<T>& a) : DiagArray<T> (a) { }
   MDiagArray (const MDiagArray<T>& a) : DiagArray<T> (a) { }
   MDiagArray (const MArray<T>& a) : DiagArray<T> (a) { }
 
   ~MDiagArray (void) { }
 
@@ -208,16 +215,17 @@ public:
   friend MDiagArray<T> operator - (const MDiagArray<T>& a,
 				   const MDiagArray<T>& b);
 
   friend MDiagArray<T> product (const MDiagArray<T>& a,
 				const MDiagArray<T>& b);
 
   friend MDiagArray<T> operator - (const MDiagArray<T>& a);
 };
+#endif
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
diff --git a/liboctave/Makefile.in b/liboctave/Makefile.in
--- a/liboctave/Makefile.in
+++ b/liboctave/Makefile.in
@@ -17,38 +17,40 @@ include $(TOPDIR)/Makeconf
 INSTALL = @INSTALL@
 INSTALL_PROGRAM = @INSTALL_PROGRAM@
 INSTALL_DATA = @INSTALL_DATA@
 
 MATRIX_INC = Array.h Array-idx.h MArray.h Matrix.h mx-base.h \
 	mx-defs.h mx-ext.h CColVector.h CDiagMatrix.h CMatrix.h \
 	CRowVector.h CmplxAEPBAL.h CmplxCHOL.h CmplxDET.h CmplxHESS.h \
 	CmplxLU.h CmplxQR.h CmplxQRP.h CmplxSCHUR.h CmplxSVD.h EIG.h \
+	cMatrix.h \
 	dColVector.h dDiagMatrix.h dMatrix.h dRowVector.h dbleAEPBAL.h \
 	dbleCHOL.h dbleDET.h dbleGEPBAL.h dbleHESS.h dbleLU.h dbleQR.h \
 	dbleQRP.h dbleSCHUR.h dbleSVD.h
 
 INCLUDES = Bounds.h CollocWt.h DAE.h DAEFunc.h FEGrid.h	FSQP.h \
 	LinConst.h LP.h LPsolve.h NLConst.h NLEqn.h NLFunc.h NLP.h \
 	NPSOL.h ODE.h ODEFunc.h Objective.h QLD.h QP.h QPSOL.h \
 	Quad.h Range.h base-min.h f77-uscore.h idx-vector.h \
 	lo-error.h sun-utils.h \
 	$(MATRIX_INC)
 
 TEMPLATE_SRC = Array.cc MArray.cc
 
-TI_SRC = Array-C.cc Array-i.cc Array-d.cc MArray-C.cc MArray-d.cc
+TI_SRC = Array-C.cc Array-c.cc Array-i.cc Array-d.cc Array-s.cc \
+	 MArray-C.cc MArray-c.cc MArray-i.cc MArray-d.cc MArray-s.cc
 
 MATRIX_SRC = Array-ext.cc CColVector.cc CDiagMatrix.cc CMatrix.cc \
-	CRowVector.cc \
-	CmplxAEPBAL.cc CmplxCHOL.cc CmplxDET.cc CmplxHESS.cc CmplxLU.cc \
-	CmplxQR.cc CmplxQRP.cc CmplxSCHUR.cc CmplxSVD.cc EIG.cc \
-	dColVector.cc dDiagMatrix.cc dMatrix.cc dRowVector.cc \
-	dbleAEPBAL.cc dbleCHOL.cc dbleDET.cc dbleGEPBAL.cc dbleHESS.cc \
-	dbleLU.cc dbleQR.cc dbleQRP.cc dbleSCHUR.cc dbleSVD.cc
+	CRowVector.cc CmplxAEPBAL.cc CmplxCHOL.cc CmplxDET.cc \
+	CmplxHESS.cc CmplxLU.cc CmplxQR.cc CmplxQRP.cc CmplxSCHUR.cc \
+	CmplxSVD.cc EIG.cc cMatrix.cc dColVector.cc dDiagMatrix.cc \
+	dMatrix.cc dRowVector.cc dbleAEPBAL.cc dbleCHOL.cc \
+	dbleDET.cc dbleGEPBAL.cc dbleHESS.cc dbleLU.cc dbleQR.cc \
+	dbleQRP.cc dbleSCHUR.cc dbleSVD.cc
 
 SOURCES = Bounds.cc CollocWt.cc DAE.cc FEGrid.cc FSQP.cc LinConst.cc \
 	LPsolve.cc NLEqn.cc NPSOL.cc ODE.cc QLD.cc QPSOL.cc Quad.cc \
 	Range.cc idx-vector.cc lo-error.cc sun-utils.cc \
 	$(TEMPLATE_SRC) \
 	$(TI_SRC) \
 	$(MATRIX_SRC)
 
diff --git a/liboctave/dDiagMatrix.h b/liboctave/dDiagMatrix.h
--- a/liboctave/dDiagMatrix.h
+++ b/liboctave/dDiagMatrix.h
@@ -39,17 +39,17 @@ class DiagMatrix : public MDiagArray<dou
 {
 friend class SVD;
 friend class ComplexSVD;
 
 public:
 
   DiagMatrix (void) : MDiagArray<double> () { }
   DiagMatrix (int n) : MDiagArray<double> (n) { }
-  DiagMatrix (int n, double val) : MDiagArray<double> (n, val) { }
+  DiagMatrix (int n, double val) : MDiagArray<double> (n, n, val) { }
   DiagMatrix (int r, int c) : MDiagArray<double> (r, c) { }
   DiagMatrix (int r, int c, double val) : MDiagArray<double> (r, c, val) { }
   DiagMatrix (const RowVector& a) : MDiagArray<double> (a) { }
   DiagMatrix (const ColumnVector& a) : MDiagArray<double> (a) { }
   DiagMatrix (const MDiagArray<double>& a) : MDiagArray<double> (a) { }
   DiagMatrix (const DiagMatrix& a) : MDiagArray<double> (a) { }
 //  DiagMatrix (double a) : MDiagArray<double> (1, a) { }
 
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -88,16 +88,27 @@ extern "C"
 
 Matrix::Matrix (const DiagMatrix& a)
   : MArray2<double> (a.rows (), a.cols (), 0.0)
 {
   for (int i = 0; i < a.length (); i++)
     elem (i, i) = a.elem (i, i);
 }
 
+// XXX FIXME XXX -- could we use a templated mixed-type copy function
+// here?
+
+Matrix::Matrix (const charMatrix& a)
+  : MArray2<double> (a.rows (), a.cols ())
+{
+  for (int i = 0; i < a.rows (); i++)
+    for (int j = 0; j < a.cols (); j++)
+      elem (i, j) = a.elem (i, j);
+}
+
 int
 Matrix::operator == (const Matrix& a) const
 {
   if (rows () != a.rows () || cols () != a.cols ())
     return 0;
 
   return equal (data (), a.data (), length ());
 }
diff --git a/liboctave/dMatrix.h b/liboctave/dMatrix.h
--- a/liboctave/dMatrix.h
+++ b/liboctave/dMatrix.h
@@ -53,16 +53,18 @@ public:
   Matrix (void) : MArray2<double> () { }
   Matrix (int r, int c) : MArray2<double> (r, c) { }
   Matrix (int r, int c, double val) : MArray2<double> (r, c, val) { }
   Matrix (const MArray2<double>& a) : MArray2<double> (a) { }
   Matrix (const Matrix& a) : MArray2<double> (a) { }
   Matrix (const MDiagArray<double>& a) : MArray2<double> (a) { }
   Matrix (const DiagMatrix& a);
 
+  Matrix (const charMatrix& a);
+
   Matrix& operator = (const Matrix& a)
     {
       MArray2<double>::operator = (a);
       return *this;
     }
 
   int operator == (const Matrix& a) const;
   int operator != (const Matrix& a) const;
diff --git a/liboctave/mx-base.h b/liboctave/mx-base.h
--- a/liboctave/mx-base.h
+++ b/liboctave/mx-base.h
@@ -21,16 +21,17 @@ Software Foundation, 59 Temple Place - S
 
 */
 
 #if !defined (octave_mx_base_h)
 #define octave_mx_base_h 1
 
 // Matrix classes.
 
+#include "cMatrix.h"
 #include "dMatrix.h"
 #include "CMatrix.h"
 
 // Column Vector classes.
 
 #include "dColVector.h"
 #include "CColVector.h"
 
diff --git a/liboctave/mx-defs.h b/liboctave/mx-defs.h
--- a/liboctave/mx-defs.h
+++ b/liboctave/mx-defs.h
@@ -22,39 +22,53 @@ Software Foundation, 59 Temple Place - S
 */
 
 #if !defined (octave_mx_defs_h)
 #define octave_mx_defs_h 1
 
 // Classes we declare.
 
 class Matrix;
+class ComplexMatrix;
+class charMatrix;
+
 class ColumnVector;
+class ComplexColumnVector;
+
 class RowVector;
+class ComplexRowVector;
+
 class DiagMatrix;
-class ComplexMatrix;
-class ComplexColumnVector;
-class ComplexRowVector;
 class ComplexDiagMatrix;
+
 class AEPBALANCE;
 class ComplexAEPBALANCE;
+
 class GEPBALANCE;
+
 class CHOL;
 class ComplexCHOL;
+
 class DET;
 class ComplexDET;
+
 class EIG;
+
 class HESS;
 class ComplexHESS;
+
 class SCHUR;
 class ComplexSCHUR;
+
 class SVD;
 class ComplexSVD;
+
 class LU;
 class ComplexLU;
+
 class QR;
 class ComplexQR;
 
 // Other data types we use but that don't always need to have full
 // declarations.
 
 class Complex;
 
diff --git a/liboctave/mx-inlines.cc b/liboctave/mx-inlines.cc
--- a/liboctave/mx-inlines.cc
+++ b/liboctave/mx-inlines.cc
@@ -20,16 +20,27 @@ along with Octave; see the file COPYING.
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 #include <Complex.h>
 
 // But first, some helper functions...
 
+// XXX FIXME XXX -- these need to be done with templates...
+
+static inline int
+equal (const char *x, const char *y, int len)
+{
+  for (int i = 0; i < len; i++)
+    if (x[i] != y[i])
+      return 0;
+  return 1;
+}
+
 static inline double *
 add (const double *d, int len, double s)
 {
   double *result = 0;
   if (len > 0)
     {
       result = new double [len];
       for (int i = 0; i < len; i++)
