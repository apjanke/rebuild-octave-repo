# HG changeset patch
# User Michael Godfrey <michaeldgodfrey@gmail.com>
# Date 1389058604 18000
#      Mon Jan 06 20:36:44 2014 -0500
# Branch stable
# Node ID a4b4cf4c6ece3f62c470bbfe5f3690ea3188056d
# Parent  5b88b2cb431e754f4e4a036bc7c85f722651ef30
doc: update linear algebra chapter

diff --git a/doc/interpreter/linalg.txi b/doc/interpreter/linalg.txi
--- a/doc/interpreter/linalg.txi
+++ b/doc/interpreter/linalg.txi
@@ -15,45 +15,54 @@
 @c You should have received a copy of the GNU General Public License
 @c along with Octave; see the file COPYING.  If not, see
 @c <http://www.gnu.org/licenses/>.
 
 @node Linear Algebra
 @chapter Linear Algebra
 @cindex linear algebra
 
-This chapter documents the linear algebra functions of Octave.
-Reference material for many of these functions may be found in
-Golub and Van Loan, @cite{Matrix Computations, 2nd Ed.}, Johns Hopkins,
-1989, and in the @cite{@sc{lapack} Users' Guide}, SIAM, 1992.
+This chapter documents the linear algebra functions provided in Octave.
+Reference material for many of these functions may be found in Golub and
+Van Loan, @cite{Matrix Computations, 2nd Ed.}, Johns Hopkins, 1989, and
+in the @cite{@sc{lapack} Users' Guide}, SIAM, 1992. The
+@cite{@sc{lapack} Users' Guide} is available at:
+@cite{http://www.netlib.org/lapack/lug/}
+
+A common text for engineering courses is G. Strang, @cite{Linear Algebra
+and Its Applications, 4th Edition}. It has become a widespread reference
+for linear algebra. An alternative is P. Lax @cite{Linear Algebra and
+Its Applications}, and also is a good choice. It claims to be suitable
+for high school students with substantial mathematical interests as well
+as first-year undergraduates.
 
 @menu
 * Techniques Used for Linear Algebra::
 * Basic Matrix Functions::
 * Matrix Factorizations::
 * Functions of a Matrix::
 * Specialized Solvers::
 @end menu
 
 @node Techniques Used for Linear Algebra
 @section Techniques Used for Linear Algebra
 @cindex linear algebra, techniques
 
-Octave includes a polymorphic solver, that selects an appropriate
-matrix factorization depending on the properties of the matrix itself. 
-Generally, the cost of determining the matrix type is small relative to 
-the cost of factorizing the matrix itself, but in any case the matrix 
-type is cached once it is calculated, so that it is not re-determined 
-each time it is used in a linear equation.
+Octave includes a polymorphic solver that selects an appropriate matrix
+factorization depending on the properties of the matrix itself.
+Generally, the cost of determining the matrix type is small relative to
+the cost of factorizing the matrix itself. In any case the matrix type
+is cached once it is calculated so that it is not re-determined each
+time it is used in a linear equation.
 
-The selection tree for how the linear equation is solve or a matrix
-inverse is form is given by
+The selection tree for how the linear equation is solved or a matrix
+inverse is formed is given by:
 
 @enumerate 1
-@item If the matrix is upper or lower triangular sparse a forward or
+@item If the matrix is upper or lower triangular sparse use a forward or
 backward substitution using the @sc{lapack} xTRTRS function, and goto 4.
 
 @c Permuted triangular matrices currently disabled in the code
 @c
 @c @item If the matrix is a upper triangular matrix with column permutations
 @c or lower triangular matrix with row permutations, perform a forward or
 @c backward substitution, and goto 5.
 
@@ -71,20 +80,20 @@ the @sc{lapack} xGELSD function.
 
 The user can force the type of the matrix with the @code{matrix_type}
 function.  This overcomes the cost of discovering the type of the matrix.
 However, it should be noted that identifying the type of the matrix incorrectly
 will lead to unpredictable results, and so @code{matrix_type} should be
 used with care.
 
 It should be noted that the test for whether a matrix is a candidate for
-Cholesky@tie{}factorization, performed above and by the @code{matrix_type}
-function, does not give a certainty that the matrix is
+Cholesky@tie{}factorization, performed above, and by the @code{matrix_type}
+function, does not make certain that the matrix is
 Hermitian.  However, the attempt to factorize the matrix will quickly
-flag a non-Hermitian matrix.
+detect a non-Hermitian matrix.
 
 @node Basic Matrix Functions
 @section Basic Matrix Functions
 @cindex matrix functions, basic
 
 @DOCSTRING(balance)
 
 @DOCSTRING(cond)
