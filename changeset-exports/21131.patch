# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1453418296 18000
#      Thu Jan 21 18:18:16 2016 -0500
# Node ID 54527108599ae0b94c15a0dbdbe1ec4071db9a09
# Parent  9d7619605e5e78d06dac278b51781645526d0e8a
store more --enable-FEATURE info in octave_config_info

* configure.ac: (ENABLE_64, ENABLE_BOUNDS_CHECK, ENABLE_DOCS,
ENABLE_FLOAT_TRUNCATE, ENABLE_JIT, ENABLE_OPENMP): New variables.
macros.  Handle consistently and AC_DEFINE them.
* common.mk, toplev.cc, oct-conf.in.h: Substitute new variables and
store them in octave_config_info.
* oct-conf-post.in.h: Provide old macro names for compatibility.
* Array.cc, Array.h, DiagArray2.h, PermMatrix.h, Range.cc, Sparse.h,
dim-vector.h, idx-vector.h, oct-refcount.h: Fix uses of macros.

diff --git a/build-aux/common.mk b/build-aux/common.mk
--- a/build-aux/common.mk
+++ b/build-aux/common.mk
@@ -488,24 +488,36 @@ endef
 
 define cp_update_rule
   if [ "x$(srcdir)" != "x." ] && [ -f $(srcdir)/$@ ] && [ ! -f $@ ]; then \
     cp $(srcdir)/$@ $@; \
     touch -r $(srcdir)/$@ $@; \
   fi
 endef
 
+## The do_subst_config_vals and do_subst_cross_config_vals differ only in
+## the definitions of the following variables:
+##
+##   OCTAVE_CONF_MKOCTFILE_AR
+##   OCTAVE_CONF_MKOCTFILE_CC
+##   OCTAVE_CONF_MKOCTFILE_CXX
+##   OCTAVE_CONF_MKOCTFILE_DL_LD
+##   OCTAVE_CONF_MKOCTFILE_DL_LDFLAGS
+##   OCTAVE_CONF_MKOCTFILE_F77
+##   OCTAVE_CONF_MKOCTFILE_LD_CXX
+##   OCTAVE_CONF_MKOCTFILE_RANLIB
+
 ## To avoid shell command line limits, break the replacement patterns
 ## into two roughly equal sized parts.
 
 define do_subst_config_vals
   $(SED) < $< \
     -e "s|%NO_EDIT_WARNING%|DO NOT EDIT!  Generated automatically from $(<F) by Make.|" \
-    -e "s|%NO_OCT_FILE_STRIP%|${NO_OCT_FILE_STRIP}|" \
-    -e "s|%OCTAVE_BINDIR%|\"${bindir}\"|" \
+    -e "s|%NO_OCT_FILE_STRIP%|$NO_OCT_FILE_STRIP}|" \
+    -e "s|%OCTAVE_BINDIR%|\"$bindir}\"|" \
     -e "s|%OCTAVE_CONF_ALL_CFLAGS%|\"${ALL_CFLAGS}\"|" \
     -e "s|%OCTAVE_CONF_ALL_CXXFLAGS%|\"${ALL_CXXFLAGS}\"|" \
     -e "s|%OCTAVE_CONF_ALL_FFLAGS%|\"${ALL_FFLAGS}\"|" \
     -e "s|%OCTAVE_CONF_ALL_LDFLAGS%|\"${ALL_LDFLAGS}\"|" \
     -e "s|%OCTAVE_CONF_AMD_CPPFLAGS%|\"${AMD_CPPFLAGS}\"|" \
     -e "s|%OCTAVE_CONF_AMD_LDFLAGS%|\"${AMD_LDFLAGS}\"|" \
     -e "s|%OCTAVE_CONF_AMD_LIBS%|\"${AMD_LIBS}\"|" \
     -e "s|%OCTAVE_CONF_AR%|\"${AR}\"|" \
@@ -544,17 +556,23 @@ define do_subst_config_vals
     -e "s|%OCTAVE_CONF_CXXPICFLAG%|\"${CXXPICFLAG}\"|" \
     -e "s|%OCTAVE_CONF_DEFAULT_PAGER%|\"${DEFAULT_PAGER}\"|" \
     -e "s|%OCTAVE_CONF_DEFS%|\"${DEFS}\"|" \
     -e "s|%OCTAVE_CONF_DEPEND_FLAGS%|\"${DEPEND_FLAGS}\"|" \
     -e "s|%OCTAVE_CONF_DEPEND_EXTRA_SED_PATTERN%|\"${DEPEND_EXTRA_SED_PATTERN}\"|" \
     -e "s|%OCTAVE_CONF_DL_LD%|\"${DL_LD}\"|" \
     -e "s|%OCTAVE_CONF_DL_LDFLAGS%|\"${DL_LDFLAGS}\"|" \
     -e "s|%OCTAVE_CONF_DL_LIBS%|\"${DL_LIBS}\"|" \
+    -e "s|%OCTAVE_CONF_ENABLE_64%|\"${ENABLE_64}\"|" \
+    -e "s|%OCTAVE_CONF_ENABLE_BOUNDS_CHECK%|\"${ENABLE_BOUNDS_CHECK}\"|" \
+    -e "s|%OCTAVE_CONF_ENABLE_DOCS%|\"${ENABLE_DOCS}\"|" \
     -e "s|%OCTAVE_CONF_ENABLE_DYNAMIC_LINKING%|\"${ENABLE_DYNAMIC_LINKING}\"|" \
+    -e "s|%OCTAVE_CONF_ENABLE_FLOAT_TRUNCATE%|\"${ENABLE_FLOAT_TRUNCATE}\"|" \
+    -e "s|%OCTAVE_CONF_ENABLE_JIT%|\"${ENABLE_JIT}\"|" \
+    -e "s|%OCTAVE_CONF_ENABLE_OPENMP%|\"${ENABLE_OPENMP}\"|" \
     -e "s|%OCTAVE_CONF_EXEEXT%|\"${EXEEXT}\"|" \
     -e "s|%OCTAVE_CONF_GCC_VERSION%|\"${GCC_VERSION}\"|" \
     -e "s|%OCTAVE_CONF_GXX_VERSION%|\"${GXX_VERSION}\"|" \
     -e "s|%OCTAVE_CONF_F77%|\"${F77}\"|" \
     -e "s|%OCTAVE_CONF_F77_FLOAT_STORE_FLAG%|\"${F77_FLOAT_STORE_FLAG}\"|" \
     -e "s|%OCTAVE_CONF_F77_INTEGER_8_FLAG%|\"${F77_INTEGER_8_FLAG}\"|" \
     -e "s|%OCTAVE_CONF_FFLAGS%|\"${FFLAGS}\"|" \
     -e "s|%OCTAVE_CONF_FFTW3_CPPFLAGS%|\"${FFTW3_CPPFLAGS}\"|" \
@@ -713,17 +731,23 @@ define do_subst_cross_config_vals
     -e "s|%OCTAVE_CONF_CXXPICFLAG%|\"${CXXPICFLAG}\"|" \
     -e "s|%OCTAVE_CONF_DEFAULT_PAGER%|\"${DEFAULT_PAGER}\"|" \
     -e "s|%OCTAVE_CONF_DEFS%|\"${DEFS}\"|" \
     -e "s|%OCTAVE_CONF_DEPEND_FLAGS%|\"${DEPEND_FLAGS}\"|" \
     -e "s|%OCTAVE_CONF_DEPEND_EXTRA_SED_PATTERN%|\"${DEPEND_EXTRA_SED_PATTERN}\"|" \
     -e "s|%OCTAVE_CONF_DL_LD%|\"${DL_LD}\"|" \
     -e "s|%OCTAVE_CONF_DL_LDFLAGS%|\"${DL_LDFLAGS}\"|" \
     -e "s|%OCTAVE_CONF_DL_LIBS%|\"${DL_LIBS}\"|" \
+    -e "s|%OCTAVE_CONF_ENABLE_64%|\"${ENABLE_64}\"|" \
+    -e "s|%OCTAVE_CONF_ENABLE_BOUNDS_CHECK%|\"${ENABLE_BOUNDS_CHECK}\"|" \
+    -e "s|%OCTAVE_CONF_ENABLE_DOCS%|\"${ENABLE_DOCS}\"|" \
     -e "s|%OCTAVE_CONF_ENABLE_DYNAMIC_LINKING%|\"${ENABLE_DYNAMIC_LINKING}\"|" \
+    -e "s|%OCTAVE_CONF_ENABLE_FLOAT_TRUNCATE%|\"${ENABLE_FLOAT_TRUNCATE}\"|" \
+    -e "s|%OCTAVE_CONF_ENABLE_JIT%|\"${ENABLE_JIT}\"|" \
+    -e "s|%OCTAVE_CONF_ENABLE_OPENMP%|\"${ENABLE_OPENMP}\"|" \
     -e "s|%OCTAVE_CONF_EXEEXT%|\"${EXEEXT}\"|" \
     -e "s|%OCTAVE_CONF_GCC_VERSION%|\"${GCC_VERSION}\"|" \
     -e "s|%OCTAVE_CONF_GXX_VERSION%|\"${GXX_VERSION}\"|" \
     -e "s|%OCTAVE_CONF_F77%|\"${F77}\"|" \
     -e "s|%OCTAVE_CONF_F77_FLOAT_STORE_FLAG%|\"${F77_FLOAT_STORE_FLAG}\"|" \
     -e "s|%OCTAVE_CONF_F77_INTEGER_8_FLAG%|\"${F77_INTEGER_8_FLAG}\"|" \
     -e "s|%OCTAVE_CONF_FFLAGS%|\"${FFLAGS}\"|" \
     -e "s|%OCTAVE_CONF_FFTW3_CPPFLAGS%|\"${FFTW3_CPPFLAGS}\"|" \
diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -225,81 +225,80 @@ case $with_shell in
 esac
 AC_DEFINE_UNQUOTED([SHELL_PATH], ["$SHELL_PATH"],
   [Define this to be the path to the shell command interpreter.])
 
 ### Enable bounds checking on element references within Octave's array and
 ### matrix classes.  This slows down some operations a bit, so it is turned off
 ### by default.
 
-BOUNDS_CHECKING=no
+ENABLE_BOUNDS_CHECK=no
 AC_ARG_ENABLE([bounds-check],
   [AS_HELP_STRING([--enable-bounds-check],
     [enable bounds checking for indexing in internal array classes])],
-  [if test "$enableval" = yes; then BOUNDS_CHECKING=yes; fi], [])
-if test $BOUNDS_CHECKING = yes; then
-  AC_DEFINE(BOUNDS_CHECKING, 1, [Define to 1 to use internal bounds checking.])
+  [if test "$enableval" = yes; then ENABLE_BOUNDS_CHECK=yes; fi], [])
+if test $ENABLE_BOUNDS_CHECK = yes; then
+  AC_DEFINE(ENABLE_BOUNDS_CHECK, 1, [Define to 1 to use internal bounds checking.])
 fi
 
 ### Use atomic operations for internal reference counting.  This is required
 ### for thread-safe behavior (Qt Handles) but incurs a significant slowdown.
 ### Enabled by default until a higher performing solution can be found.
 
-USE_ATOMIC_REFCOUNT=yes
+ENABLE_ATOMIC_REFCOUNT=yes
 AC_ARG_ENABLE([atomic-refcount],
   [AS_HELP_STRING([--disable-atomic-refcount],
     [Do not use atomic operations for internal reference counting.  This option is required for thread-safe behavior as used in the GUI's Qt plotting toolkit.  Performance for CLI-only builds is improved by disabling this feature.])],
-  [if test "$enableval" = no; then USE_ATOMIC_REFCOUNT=no; fi], [])
-if test $USE_ATOMIC_REFCOUNT = yes; then
-  AC_DEFINE(USE_ATOMIC_REFCOUNT, 1,
+  [if test "$enableval" = no; then ENABLE_ATOMIC_REFCOUNT=no; fi], [])
+if test $ENABLE_ATOMIC_REFCOUNT = yes; then
+  AC_DEFINE(ENABLE_ATOMIC_REFCOUNT, 1,
     [Define to 1 to use atomic operations for reference counting.])
 fi
 
 ### Disable running Make in the doc directory.
 ### This is useful, for example, when building Octave on systems without TeX.
 
 ENABLE_DOCS=yes
 AC_ARG_ENABLE([docs],
   [AS_HELP_STRING([--disable-docs], [don't build documentation files])],
   [if test "$enableval" = no; then
      ENABLE_DOCS=no
      warn_docs="building documentation disabled; make dist will fail"
      OCTAVE_CONFIGURE_WARNING([warn_docs])
-   fi],
-  [])
+   fi], [])
 
 ### If possible, use a 64-bit integer type for array dimensions and indexing.
 
-USE_64_BIT_IDX_T=no
+ENABLE_64=no
 OCTAVE_IDX_TYPE=int
 AC_ARG_ENABLE(64,
   [AS_HELP_STRING([--enable-64],
     [(EXPERIMENTAL) use 64-bit integers for array dimensions and indexing])],
-  [if test "$enableval" = yes; then USE_64_BIT_IDX_T=yes; fi], [])
-if test $USE_64_BIT_IDX_T = yes; then
+  [if test "$enableval" = yes; then ENABLE_64=yes; fi], [])
+if test $ENABLE_64 = yes; then
   AC_CHECK_SIZEOF([void *])
   AC_CHECK_SIZEOF([int])
   AC_CHECK_SIZEOF([long])
   AC_CHECK_SIZEOF([int64_t])
   if test $ac_cv_sizeof_void_p -eq 8; then
     OCTAVE_IDX_TYPE=int64_t
   else
     warn_64_bit="pointers are not 64-bits wide; disabling 64-bit features"
     OCTAVE_CONFIGURE_WARNING([warn_64_bit])
-    USE_64_BIT_IDX_T=no
+    ENABLE_64=no
   fi
 fi
 AC_SUBST(OCTAVE_IDX_TYPE)
 AC_DEFINE_UNQUOTED(OCTAVE_IDX_TYPE, [$OCTAVE_IDX_TYPE],
   [Define to the type of octave_idx_type (64 or 32 bit signed integer).])
-if test $USE_64_BIT_IDX_T = yes; then
-  AC_DEFINE(USE_64_BIT_IDX_T, 1,
+if test $ENABLE_64 = yes; then
+  AC_DEFINE(ENABLE_64, 1,
     [Define to 1 if using 64-bit integers for array dimensions and indexing.])
 fi
-AC_SUBST(USE_64_BIT_IDX_T)
+AC_SUBST(ENABLE_64)
 
 ### It seems that there are some broken inline assembly functions in
 ### the GNU libc.  Since I'm not sure how to test whether we are using
 ### GNU libc, just disable them for all platforms.
 
 AC_MSG_NOTICE([defining __NO_MATH_INLINES avoids buggy GNU libc exp function])
 AC_DEFINE(__NO_MATH_INLINES, 1,
   [Define to 1 if your version of GNU libc has buggy inline assembly code for math functions like exp.])
@@ -430,61 +429,59 @@ XTRA_CXXFLAGS="$XTRA_CXXFLAGS $PTHREAD_C
 ## Set these for any other tests that may require them.  They will be
 ## reset before output files are generated.
 CFLAGS="$CFLAGS $PTHREAD_CFLAGS"
 CXXFLAGS="$CXXFLAGS $PTHREAD_CFLAGS"
 
 ### Test whether the compiler supports OpenMP.  This is enabled by default
 ### now to allow the option of using OpenMP in loadable modules.
 
-USE_OPENMP=no
+ENABLE_OPENMP=no
 check_for_openmp=yes
 AC_ARG_ENABLE([openmp],
   [AS_HELP_STRING([--disable-openmp],
     [disable OpenMP SMP multi-threading])],
   [if test "$enableval" = no; then check_for_openmp=no; fi], [])
 if test $check_for_openmp = yes; then
   AC_LANG_PUSH(C)
-  AX_OPENMP([XTRA_CFLAGS="$XTRA_CFLAGS $OPENMP_CFLAGS"; USE_OPENMP=yes], [])
+  AX_OPENMP([XTRA_CFLAGS="$XTRA_CFLAGS $OPENMP_CFLAGS"; ENABLE_OPENMP=yes], [])
   AC_LANG_POP(C)
   AC_LANG_PUSH(C++)
-  AX_OPENMP([XTRA_CXXFLAGS="$XTRA_CXXFLAGS $OPENMP_CXXFLAGS"; USE_OPENMP=yes], [])
+  AX_OPENMP([XTRA_CXXFLAGS="$XTRA_CXXFLAGS $OPENMP_CXXFLAGS"; ENABLE_OPENMP=yes], [])
   AC_LANG_POP(C++)
 fi
 dnl Define here since it is skipped if the first argument to
 dnl AX_OPENMP is not empty.
-if test $USE_OPENMP = yes; then
-  AC_DEFINE(HAVE_OPENMP, 1, [Define if OpenMP is enabled])
+if test $ENABLE_OPENMP = yes; then
+  AC_DEFINE(ENABLE_OPENMP, 1, [Define if OpenMP is enabled.])
 fi
 ## Set these for any other tests that may require them.  They will be
 ## reset before output files are generated.
 CFLAGS="$CFLAGS $OPENMP_CFLAGS"
 CXXFLAGS="$CXXFLAGS $OPENMP_CXXFLAGS"
 
 ### When compiling math for x87, problems may arise in some code comparing
 ### floating-point intermediate results.  The root cause is the extra precision
 ### (~80 bits) of x87 co-processor registers versus the IEEE standard 64 bits.
 ### Generally, storing the result in a local volatile variable forces a
 ### truncation back to 64 bits, but it also degrades performance.
 ### However, this performance degradation is very minimal, if indeed measurable.
 ### Therefore, it has been enabled for all platforms and compilers.
 ### Reported bugs indicate that --enable-float-truncate is required for MinGW
 ### and Cygwin platforms and for GCC compilers >= 5.0.  It should not be
 ### necessary for non-x87 targets or when using modern SSE math.
-ac_float_truncate=volatile
+ENABLE_FLOAT_TRUNCATE=yes
 AC_ARG_ENABLE([float-truncate],
   [AS_HELP_STRING([--disable-float-truncate],
     [truncate intermediate FP results])],
-  [if test "$enableval" = no; then
-     ac_float_truncate=
-   fi],
-  [])
-
-AC_DEFINE_UNQUOTED(FLOAT_TRUNCATE, [$ac_float_truncate],
-  [Define to volatile if you need to truncate intermediate FP results.])
+  [if test "$enableval" = no; then ENABLE_FLOAT_TRUNCATE=no; fi], [])
+if test $ENABLE_FLOAT_TRUNCATE = yes; then
+  AC_DEFINE(ENABLE_FLOAT_TRUNCATE, 1,
+    [Define to 1 if you need to truncate intermediate FP results.])
+fi
 
 ### Determine extra CFLAGS that may be necessary for Octave.
 
 ## On Intel systems with gcc, we may need to compile with -mieee-fp
 ## to get full support for IEEE floating point.
 ##
 ## On Alpha/OSF systems, we need -mieee.
 
@@ -656,17 +653,17 @@ F77_ISNAN_MACRO=
 if test $octave_cv_func_fortran_isnan = no; then
   AC_MSG_NOTICE([substituting ISNAN(X) with X.NE.X in Fortran sources])
   F77_ISNAN_MACRO="s|ISNAN(\(@<:@^)@:>@*\))|(\1.NE.\1)|"
 fi
 AC_SUBST(F77_ISNAN_MACRO)
 
 OCTAVE_CHECK_SIZEOF_FORTRAN_INTEGER
 if test $octave_cv_sizeof_fortran_integer = no; then
-  if test $USE_64_BIT_IDX_T = yes; then
+  if test $ENABLE_64 = yes; then
     case $F77 in
       *gfortran*)
         case $F77_INTEGER_8_FLAG in
           *-fdefault-integer-8*)
           ;;
           *)
             case $FFLAGS in
               *-fdefault-integer-8*)
@@ -767,31 +764,28 @@ OCTAVE_CHECK_LIB(z, ZLIB,
 
 ### Also define HAVE_ZLIB if libz is found.
 if test -z "$warn_z"; then
   AC_DEFINE(HAVE_ZLIB, 1, [Define to 1 if ZLIB is available.])
 fi
 
  ### Check for the LLVM library
 
-build_jit=no
+ENABLE_JIT=no
 AC_ARG_ENABLE([jit],
   [AS_HELP_STRING([--enable-jit],
     [(EXPERIMENTAL) enable JIT compiler])],
-  [if test "$enableval" = yes; then
-     build_jit=yes
-   fi],
-  [])
+  [if test "$enableval" = yes; then ENABLE_JIT=yes; fi], [])
 
 LLVM_CXXFLAGS=
 LLVM_CPPFLAGS=
 LLVM_LDFLAGS=
 LLVM_LIBS=
 
-if test $build_jit = yes; then
+if test $ENABLE_JIT = yes; then
 
   ## Find llvm-config program from environment variable or by searching
   AC_ARG_VAR([LLVM_CONFIG], [path to llvm-config utility])
   AC_CHECK_PROG([LLVM_CONFIG], llvm-config, llvm-config, [])
 
   if test -z "$LLVM_CONFIG"; then
     warn_llvm="llvm-config utility not found.  JIT compiler is disabled."
   else
@@ -858,29 +852,32 @@ if test $build_jit = yes; then
     CPPFLAGS="$save_CPPFLAGS"
     CXXFLAGS="$save_CXXFLAGS"
     LDFLAGS="$save_LDFLAGS"
   fi
 
   if test -z "$warn_llvm"; then
     AC_DEFINE(HAVE_LLVM, 1, [Define to 1 if LLVM is available.])
   else
-    build_jit=no
+    ENABLE_JIT=no
     LLVM_CPPFLAGS=
     LLVM_CXXFLAGS=
     LLVM_LDFLAGS=
     LLVM_LIBS=
     OCTAVE_CONFIGURE_WARNING([warn_llvm])
   fi
 dnl FIXME: Re-instate when JIT is enabled by default
 dnl else
 dnl   ## JIT build disabled
 dnl   warn_llvm="JIT compiler disabled, some performance loss for loops"
 dnl   OCTAVE_CONFIGURE_WARNING([warn_llvm])
 fi
+if test $ENABLE_JIT; then
+  AC_DEFINE(ENABLE_JIT, 1, [Define to 1 to enable JIT compiler.])
+fi
 
 AC_SUBST(LLVM_CPPFLAGS)
 AC_SUBST(LLVM_CXXFLAGS)
 AC_SUBST(LLVM_LDFLAGS)
 AC_SUBST(LLVM_LIBS)
 AM_CONDITIONAL([AMCOND_HAVE_LLVM], [test -z "$warn_llvm"])
 
 ### Check for HDF5 library.
@@ -1481,17 +1478,17 @@ if test $ax_blas_ok = no; then
         AC_DEFINE(USE_BLASWRAP, 1,
           [Define to 1 if BLAS functions need to be wrapped (potentially needed for 64-bit OSX only).])
       fi
     ;;
   esac
 fi
 
 if test $ax_blas_ok = no; then
-  if test $USE_64_BIT_IDX_T = yes && test "$ax_blas_integer_size_ok" = no; then
+  if test $ENABLE_64 = yes && test "$ax_blas_integer_size_ok" = no; then
     ## Attempt to be more informative.
     AC_MSG_ERROR([BLAS doesn't seem to support 64-bit integers.  This is incompatible with --enable-64.])
   else
     AC_MSG_ERROR([A BLAS library was detected but found incompatible with your Fortran 77 compiler settings.])
   fi
 fi
 
 if test $ax_blas_ok = no || test $ax_lapack_ok = no; then
@@ -1521,17 +1518,17 @@ if test -z "$warn_qrupdate"; then
     AC_LANG_POP([Fortran 77])
   ])
   if test $octave_cv_func_slup1up = yes; then
     AC_DEFINE(HAVE_QRUPDATE_LUU, 1, [Define to 1 if qrupdate supports LU updates.])
   fi
 fi
 LIBS="$save_LIBS"
 
-if test $USE_64_BIT_IDX_T = yes; then
+if test $ENABLE_64 = yes; then
   CHOLMOD_TAG="_l_"
   CXSPARSE_TAG="_dl_"
   UMFPACK_TAG="_zl_"
 else
   CHOLMOD_TAG="_"
   CXSPARSE_TAG="_di_"
   UMFPACK_TAG="_zi_"
 fi
@@ -2453,16 +2450,20 @@ if test $ENABLE_DOCS = yes; then
     OCTAVE_CONFIGURE_WARNING([warn_docs_gnuplot])
   fi
   if test -n "$warn_makeinfo"; then
     ENABLE_DOCS = no
     warn_docs_makeinfo="building documentation disabled because makeinfo was not found; make dist will fail"
     OCTAVE_CONFIGURE_WARNING([warn_docs_makeinfo])
   fi
 fi
+if test $ENABLE_DOCS = yes; then
+  AC_DEFINE(ENABLE_DOCS, 1,
+    [Define to 1 to build Octave documentation files.])
+fi
 AM_CONDITIONAL([AMCOND_BUILD_DOCS], [test $ENABLE_DOCS = yes])
 
 ### Maybe add -Wall, -W, and -Wshadow to compiler flags now that we're
 ### done feature testing.
 
 GCC_EXTRA_FLAGS="-Wall -W -Wshadow -Wformat -Wpointer-arith -Wmissing-prototypes -Wstrict-prototypes -Wwrite-strings -Wcast-align -Wcast-qual"
 GXX_EXTRA_FLAGS="-Wall -W -Wshadow -Wold-style-cast -Wformat -Wpointer-arith -Wwrite-strings -Wcast-align -Wcast-qual"
 
@@ -3170,42 +3171,43 @@ Octave is now configured for $canonical_
   Z CPPFLAGS:                  $Z_CPPFLAGS
   Z LDFLAGS:                   $Z_LDFLAGS
   Z libraries:                 $Z_LIBS
 
   Default pager:               $DEFAULT_PAGER
   gnuplot:                     $GNUPLOT
 
   Build Octave GUI:                   $build_gui
-  JIT compiler for loops:             $build_jit
+  JIT compiler for loops:             $ENABLE_JIT
   Build Java interface:               $build_java
-  Do internal array bounds checking:  $BOUNDS_CHECKING
+  Do internal array bounds checking:  $ENABLE_BOUNDS_CHECK
   Build static libraries:             $STATIC_LIBS
   Build shared libraries:             $SHARED_LIBS
   Dynamic Linking:                    $ENABLE_DYNAMIC_LINKING $DL_API_MSG
   Include support for GNU readline:   $USE_READLINE
-  64-bit array dims and indexing:     $USE_64_BIT_IDX_T
-  OpenMP SMP multithreading:          $USE_OPENMP
+  64-bit array dims and indexing:     $ENABLE_64
+  OpenMP SMP multithreading:          $ENABLE_OPENMP
   Build cross tools:                  $cross_tools
   Build docs:                         $ENABLE_DOCS
+  Truncate intermediate FP results:   $ENABLE_FLOAT_TRUNCATE
 ])
 
 warn_msg_printed=false
 
 OCTAVE_CONFIGURE_WARNING_SUMMARY
 
 if test $ENABLE_DYNAMIC_LINKING = yes; then
   if test $SHARED_LIBS = no; then
     AC_MSG_WARN([You used --enable-dl but not --enable-shared.])
     AC_MSG_WARN([Are you sure that is what you want to do?])
     warn_msg_printed=true
   fi
 fi
 
-if test $USE_64_BIT_IDX_T = yes; then
+if test $ENABLE_64 = yes; then
   AC_MSG_WARN([])
   AC_MSG_WARN([You used the EXPERIMENTAL --enable-64 option.])
   AC_MSG_WARN([Are you sure that is what you want to do?])
   AC_MSG_WARN([])
   AC_MSG_WARN([Your Fortran compiler must have an option to generate])
   AC_MSG_WARN([code with 8 byte signed INTEGER values.  This option])
   AC_MSG_WARN([should be specified in the F77_INTEGER_8_FLAG variable])
   AC_MSG_WARN([Make.  This should work automatically for gfortran.  If])
@@ -3247,17 +3249,17 @@ if test -n "$warn_gnuplot"; then
   AC_MSG_WARN([at the Octave prompt.])
   AC_MSG_WARN([])
   AC_MSG_WARN([Setting default value to $GNUPLOT])
   AC_MSG_WARN([])
 
   warn_msg_printed=true
 fi
 
-if test $USE_ATOMIC_REFCOUNT = no; then
+if test $ENABLE_ATOMIC_REFCOUNT = no; then
   AC_MSG_WARN([])
   AC_MSG_WARN([atomic reference counting disabled.])
   AC_MSG_WARN([This feature allows access to Octave data safely from])
   AC_MSG_WARN([another thread, and is required when using the GUI's Qt toolkit])
   AC_MSG_WARN([for plotting.])
   AC_MSG_WARN([])
 fi
 
diff --git a/libinterp/corefcn/toplev.cc b/libinterp/corefcn/toplev.cc
--- a/libinterp/corefcn/toplev.cc
+++ b/libinterp/corefcn/toplev.cc
@@ -1295,17 +1295,23 @@ specified option.\n\
     { false, "CXXPICFLAG", OCTAVE_CONF_CXXPICFLAG },
     { false, "DEFAULT_PAGER", OCTAVE_DEFAULT_PAGER },
     { false, "DEFS", OCTAVE_CONF_DEFS },
     { false, "DL_LD", OCTAVE_CONF_DL_LD },
     { false, "DL_LDFLAGS", OCTAVE_CONF_DL_LDFLAGS },
     { false, "DL_LIBS", OCTAVE_CONF_DL_LIBS },
     { false, "GCC_VERSION", OCTAVE_CONF_GCC_VERSION },
     { false, "GXX_VERSION", OCTAVE_CONF_GXX_VERSION },
+    { false, "ENABLE_64", OCTAVE_CONF_ENABLE_64 },
+    { false, "ENABLE_BOUNDS_CHECK", OCTAVE_CONF_ENABLE_BOUNDS_CHECK },
+    { false, "ENABLE_DOCS", OCTAVE_CONF_ENABLE_DOCS },
     { false, "ENABLE_DYNAMIC_LINKING", OCTAVE_CONF_ENABLE_DYNAMIC_LINKING },
+    { false, "ENABLE_FLOAT_TRUNCATE", OCTAVE_CONF_ENABLE_FLOAT_TRUNCATE },
+    { false, "ENABLE_JIT", OCTAVE_CONF_ENABLE_JIT },
+    { false, "ENABLE_OPENMP", OCTAVE_CONF_ENABLE_OPENMP },
     { false, "EXEEXT", OCTAVE_CONF_EXEEXT },
     { false, "F77", OCTAVE_CONF_F77 },
     { false, "F77_FLOAT_STORE_FLAG", OCTAVE_CONF_F77_FLOAT_STORE_FLAG },
     { false, "F77_INTEGER_8_FLAG", OCTAVE_CONF_F77_INTEGER_8_FLAG },
     { false, "FFLAGS", OCTAVE_CONF_FFLAGS },
     { false, "FFTW3_CPPFLAGS", OCTAVE_CONF_FFTW3_CPPFLAGS },
     { false, "FFTW3_LDFLAGS", OCTAVE_CONF_FFTW3_LDFLAGS },
     { false, "FFTW3_LIBS", OCTAVE_CONF_FFTW3_LIBS },
diff --git a/libinterp/oct-conf.in.h b/libinterp/oct-conf.in.h
--- a/libinterp/oct-conf.in.h
+++ b/libinterp/oct-conf.in.h
@@ -209,20 +209,44 @@ along with Octave; see the file COPYING.
 #ifndef OCTAVE_CONF_DL_LDFLAGS
 #define OCTAVE_CONF_DL_LDFLAGS %OCTAVE_CONF_DL_LDFLAGS%
 #endif
 
 #ifndef OCTAVE_CONF_DL_LIBS
 #define OCTAVE_CONF_DL_LIBS %OCTAVE_CONF_DL_LIBS%
 #endif
 
+#ifndef OCTAVE_CONF_ENABLE_64
+#define OCTAVE_CONF_ENABLE_64 %OCTAVE_CONF_ENABLE_64%
+#endif
+
+#ifndef OCTAVE_CONF_ENABLE_BOUNDS_CHECK
+#define OCTAVE_CONF_ENABLE_BOUNDS_CHECK %OCTAVE_CONF_ENABLE_BOUNDS_CHECK%
+#endif
+
+#ifndef OCTAVE_CONF_ENABLE_DOCS
+#define OCTAVE_CONF_ENABLE_DOCS %OCTAVE_CONF_ENABLE_DOCS%
+#endif
+
 #ifndef OCTAVE_CONF_ENABLE_DYNAMIC_LINKING
 #define OCTAVE_CONF_ENABLE_DYNAMIC_LINKING %OCTAVE_CONF_ENABLE_DYNAMIC_LINKING%
 #endif
 
+#ifndef OCTAVE_CONF_ENABLE_FLOAT_TRUNCATE
+#define OCTAVE_CONF_ENABLE_FLOAT_TRUNCATE %OCTAVE_CONF_ENABLE_FLOAT_TRUNCATE%
+#endif
+
+#ifndef OCTAVE_CONF_ENABLE_JIT
+#define OCTAVE_CONF_ENABLE_JIT %OCTAVE_CONF_ENABLE_JIT%
+#endif
+
+#ifndef OCTAVE_CONF_ENABLE_OPENMP
+#define OCTAVE_CONF_ENABLE_OPENMP %OCTAVE_CONF_ENABLE_OPENMP%
+#endif
+
 #ifndef OCTAVE_CONF_EXEEXT
 #define OCTAVE_CONF_EXEEXT %OCTAVE_CONF_EXEEXT%
 #endif
 
 #ifndef OCTAVE_CONF_GCC_VERSION
 #define OCTAVE_CONF_GCC_VERSION %OCTAVE_CONF_GCC_VERSION%
 #endif
 
diff --git a/liboctave/array/Array.cc b/liboctave/array/Array.cc
--- a/liboctave/array/Array.cc
+++ b/liboctave/array/Array.cc
@@ -253,44 +253,44 @@ Array<T>::checkelem (const Array<octave_
   return elem (compute_index (ra_idx));
 }
 
 template <class T>
 Array<T>
 Array<T>::column (octave_idx_type k) const
 {
   octave_idx_type r = dimensions(0);
-#ifdef BOUNDS_CHECKING
+#ifdef ENABLE_BOUNDS_CHECK
   if (k < 0 || k > dimensions.numel (1))
     err_index_out_of_range (2, 2, k+1, dimensions.numel (1), dimensions);
 #endif
 
   return Array<T> (*this, dim_vector (r, 1), k*r, k*r + r);
 }
 
 template <class T>
 Array<T>
 Array<T>::page (octave_idx_type k) const
 {
   octave_idx_type r = dimensions(0);
   octave_idx_type c = dimensions(1);
   octave_idx_type p = r*c;
-#ifdef BOUNDS_CHECKING
+#ifdef ENABLE_BOUNDS_CHECK
   if (k < 0 || k > dimensions.numel (2))
     err_index_out_of_range (3, 3, k+1, dimensions.numel (2), dimensions);
 #endif
 
   return Array<T> (*this, dim_vector (r, c), k*p, k*p + p);
 }
 
 template <class T>
 Array<T>
 Array<T>::linear_slice (octave_idx_type lo, octave_idx_type up) const
 {
-#ifdef BOUNDS_CHECKING
+#ifdef ENABLE_BOUNDS_CHECK
   if (lo < 0)
     err_index_out_of_range (1, 1, lo+1, numel (), dimensions);
   if (up > numel ())
     err_index_out_of_range (1, 1, up, numel (), dimensions);
 #endif
   if (up < lo) up = lo;
   return Array<T> (*this, dim_vector (up - lo, 1), lo, up);
 }
diff --git a/liboctave/array/Array.h b/liboctave/array/Array.h
--- a/liboctave/array/Array.h
+++ b/liboctave/array/Array.h
@@ -388,17 +388,17 @@ public:
   T& elem (octave_idx_type i, octave_idx_type j) { return elem (dim1 ()*j+i); }
 
   T& elem (octave_idx_type i, octave_idx_type j, octave_idx_type k)
   { return elem (i, dim2 ()*k+j); }
 
   T& elem (const Array<octave_idx_type>& ra_idx)
   { return Array<T>::elem (compute_index_unchecked (ra_idx)); }
 
-#if defined (BOUNDS_CHECKING)
+#if defined (ENABLE_BOUNDS_CHECK)
   T& operator () (octave_idx_type n) { return checkelem (n); }
   T& operator () (octave_idx_type i, octave_idx_type j)
   { return checkelem (i, j); }
   T& operator () (octave_idx_type i, octave_idx_type j, octave_idx_type k)
   { return checkelem (i, j, k); }
   T& operator () (const Array<octave_idx_type>& ra_idx)
   { return checkelem (ra_idx); }
 #else
@@ -422,17 +422,17 @@ public:
   { return xelem (i, j); }
 
   crefT elem (octave_idx_type i, octave_idx_type j, octave_idx_type k) const
   { return xelem (i, j, k); }
 
   crefT elem (const Array<octave_idx_type>& ra_idx) const
   { return Array<T>::xelem (compute_index_unchecked (ra_idx)); }
 
-#if defined (BOUNDS_CHECKING)
+#if defined (ENABLE_BOUNDS_CHECK)
   crefT operator () (octave_idx_type n) const { return checkelem (n); }
   crefT operator () (octave_idx_type i, octave_idx_type j) const
   { return checkelem (i, j); }
   crefT operator () (octave_idx_type i, octave_idx_type j,
                      octave_idx_type k) const
   { return checkelem (i, j, k); }
   crefT operator () (const Array<octave_idx_type>& ra_idx) const
   { return checkelem (ra_idx); }
@@ -443,17 +443,18 @@ public:
   crefT operator () (octave_idx_type i, octave_idx_type j,
                      octave_idx_type k) const
   { return elem (i, j, k); }
   crefT operator () (const Array<octave_idx_type>& ra_idx) const
   { return elem (ra_idx); }
 #endif
 
   // Fast extractors. All of these produce shallow copies.
-  // Warning: none of these do check bounds, unless BOUNDS_CHECKING is on!
+  // Warning: none of these do check bounds, unless
+  // ENABLE_BOUNDS_CHECK is defined!
 
   //! Extract column: A(:,k+1).
   Array<T> column (octave_idx_type k) const;
   //! Extract page: A(:,:,k+1).
   Array<T> page (octave_idx_type k) const;
 
   //! Extract a slice from this array as a column vector: A(:)(lo+1:up).
   //! Must be 0 <= lo && up <= numel. May be up < lo.
diff --git a/liboctave/array/DiagArray2.h b/liboctave/array/DiagArray2.h
--- a/liboctave/array/DiagArray2.h
+++ b/liboctave/array/DiagArray2.h
@@ -126,32 +126,32 @@ public:
 
   T checkelem (octave_idx_type r, octave_idx_type c) const
   {
     return check_idx (r, c) ? elem (r, c) : T (0);
   }
 
   T operator () (octave_idx_type r, octave_idx_type c) const
   {
-#if defined (BOUNDS_CHECKING)
+#if defined (ENABLE_BOUNDS_CHECK)
     return checkelem (r, c);
 #else
     return elem (r, c);
 #endif
   }
 
   T& checkelem (octave_idx_type r, octave_idx_type c)
   {
     static T zero (0);
     return check_idx (r, c) ? elem (r, c) : zero;
   }
 
   T& operator () (octave_idx_type r, octave_idx_type c)
   {
-#if defined (BOUNDS_CHECKING)
+#if defined (ENABLE_BOUNDS_CHECK)
     return checkelem (r, c);
 #else
     return elem (r, c);
 #endif
   }
 
   // No checking.
 
diff --git a/liboctave/array/PermMatrix.h b/liboctave/array/PermMatrix.h
--- a/liboctave/array/PermMatrix.h
+++ b/liboctave/array/PermMatrix.h
@@ -79,17 +79,17 @@ public:
   }
 
   octave_idx_type
   checkelem (octave_idx_type i, octave_idx_type j) const;
 
   octave_idx_type
   operator () (octave_idx_type i, octave_idx_type j) const
   {
-#if defined (BOUNDS_CHECKING)
+#if defined (ENABLE_BOUNDS_CHECK)
     return checkelem (i, j);
 #else
     return elem (i, j);
 #endif
   }
 
   // These are, in fact, super-fast.
   PermMatrix transpose (void) const;
diff --git a/liboctave/array/Range.cc b/liboctave/array/Range.cc
--- a/liboctave/array/Range.cc
+++ b/liboctave/array/Range.cc
@@ -82,17 +82,17 @@ Range::checkelem (octave_idx_type i) con
     return rng_base + i * rng_inc;
   else
     return rng_limit;
 }
 
 double
 Range::elem (octave_idx_type i) const
 {
-#if defined (BOUNDS_CHECKING)
+#if defined (ENABLE_BOUNDS_CHECK)
   return checkelem (i);
 #else
   if (i == 0)
     return rng_base;
   else if (i < rng_numel - 1)
     return rng_base + i * rng_inc;
   else
     return rng_limit;
diff --git a/liboctave/array/Sparse.h b/liboctave/array/Sparse.h
--- a/liboctave/array/Sparse.h
+++ b/liboctave/array/Sparse.h
@@ -371,17 +371,17 @@ public:
   {
     make_unique ();
     return xelem (i, j);
   }
 
   T& elem (const Array<octave_idx_type>& ra_idx)
   { return Sparse<T>::elem (compute_index (ra_idx)); }
 
-#if defined (BOUNDS_CHECKING)
+#if defined (ENABLE_BOUNDS_CHECK)
   T& operator () (octave_idx_type n)
   {
     return checkelem (n);
   }
 
   T& operator () (octave_idx_type i, octave_idx_type j)
   {
     return checkelem (i, j);
@@ -438,17 +438,17 @@ public:
 
   T elem (octave_idx_type n) const { return xelem (n); }
 
   T elem (octave_idx_type i, octave_idx_type j) const { return xelem (i, j); }
 
   T elem (const Array<octave_idx_type>& ra_idx) const
   { return Sparse<T>::elem (compute_index (ra_idx)); }
 
-#if defined (BOUNDS_CHECKING)
+#if defined (ENABLE_BOUNDS_CHECK)
   T operator () (octave_idx_type n) const { return checkelem (n); }
   T operator () (octave_idx_type i, octave_idx_type j) const
   {
     return checkelem (i, j);
   }
 
   T operator () (const Array<octave_idx_type>& ra_idx) const
   {
diff --git a/liboctave/array/dim-vector.h b/liboctave/array/dim-vector.h
--- a/liboctave/array/dim-vector.h
+++ b/liboctave/array/dim-vector.h
@@ -233,26 +233,26 @@ public:
   //! @see dim_vector(octave_idx_type d0, octave_idx_type d1)
   DIM_VECTOR_CTOR (7)
 
 #undef ASSIGN_REP
 #undef DIM_VECTOR_CTOR
 
   octave_idx_type& elem (int i)
   {
-#ifdef BOUNDS_CHECKING
+#ifdef ENABLE_BOUNDS_CHECK
     assert (i >= 0 && i < ndims ());
 #endif
     make_unique ();
     return rep[i];
   }
 
   octave_idx_type elem (int i) const
   {
-#ifdef BOUNDS_CHECKING
+#ifdef ENABLE_BOUNDS_CHECK
     assert (i >= 0 && i < ndims ());
 #endif
     return rep[i];
   }
 
   void chop_trailing_singletons (void)
   {
     int l = ndims ();
diff --git a/liboctave/array/idx-vector.h b/liboctave/array/idx-vector.h
--- a/liboctave/array/idx-vector.h
+++ b/liboctave/array/idx-vector.h
@@ -557,17 +557,17 @@ public:
   octave_idx_type xelem (octave_idx_type n) const
   { return rep->xelem (n); }
 
   octave_idx_type checkelem (octave_idx_type n) const
   { return rep->checkelem (n); }
 
   octave_idx_type operator () (octave_idx_type n) const
   {
-#if defined (BOUNDS_CHECKING)
+#if defined (ENABLE_BOUNDS_CHECK)
     return rep->checkelem (n);
 #else
     return rep->xelem (n);
 #endif
   }
 
   operator bool (void) const
   { return ! rep->err; }
diff --git a/liboctave/util/oct-refcount.h b/liboctave/util/oct-refcount.h
--- a/liboctave/util/oct-refcount.h
+++ b/liboctave/util/oct-refcount.h
@@ -22,17 +22,17 @@ along with Octave; see the file COPYING.
 
 #if ! defined (octave_oct_refcount_h)
 #define octave_oct_refcount_h 1
 
 #ifndef OCTAVE_CONFIG_INCLUDED
 # error "The file <octave/config.h> must be included before oct-refcount.h."
 #endif
 
-#if defined (USE_ATOMIC_REFCOUNT) && (defined (_MSC_VER) || defined (__GNUC__))
+#if defined (ENABLE_ATOMIC_REFCOUNT) && (defined (_MSC_VER) || defined (__GNUC__))
 # if defined (_MSC_VER)
 #  include <intrin.h>
 #  define OCTREFCOUNT_ATOMIC_INCREMENT(x) _InterlockedIncrement((long*)x)
 #  define OCTREFCOUNT_ATOMIC_DECREMENT(x) _InterlockedDecrement((long*)x)
 #  define OCTREFCOUNT_ATOMIC_INCREMENT_POST(x) _InterlockedExchangeAdd((long*)x,  1)
 #  define OCTREFCOUNT_ATOMIC_DECREMENT_POST(x) _InterlockedExchangeAdd((long*)x, -1)
 # elif defined (__GNUC__)
 #  define OCTREFCOUNT_ATOMIC_INCREMENT(x) __sync_add_and_fetch(x,  1)
diff --git a/oct-conf-post.in.h b/oct-conf-post.in.h
--- a/oct-conf-post.in.h
+++ b/oct-conf-post.in.h
@@ -170,16 +170,36 @@ typedef unsigned long ino_t;
 
 /* API macro for libgui */
 #ifdef OCTGUI_DLL
 #define OCTGUI_API OCTAVE_EXPORT
 #else
 #define OCTGUI_API OCTAVE_IMPORT
 #endif
 
+/* Backward compatibility */
+
+#if defined (ENABLE_ATOMIC_REFCOUNT)
+# define USE_ATOMIC_REFCOUNT 1
+#endif
+
+#if defined (ENABLE_64)
+# define USE_64_BIT_IDX_T
+#endif
+
+#if defined (ENABLE_OPENMP)
+# define HAVE_OPENMP
+#endif
+
+#if defined (ENABLE_FLOAT_TRUNCATE)
+# define FLOAT_TRUNCATE volatile
+#else
+# define FLOAT_TRUNCATE
+#endif
+
 /* oct-types.h */
 
 #include <stdint.h>
 
 typedef OCTAVE_IDX_TYPE octave_idx_type;
 
 /* Tag indicating Octave config.h has been included */
 #define OCTAVE_CONFIG_INCLUDED 1
