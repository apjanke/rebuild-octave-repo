# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1206473366 14400
#      Tue Mar 25 15:29:26 2008 -0400
# Node ID ba7a3e20ee3dbeb210c38a0bcf18f1420d7f9b82
# Parent  ae90e05ad2990b5b7f2c933931ec0a1d2a3325e6
add -struct modifier to save

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2008-03-25  Jaroslav Hajek <highegg@gmail.com>
+
+	* load-save.cc (save_vars): Handle -struct modifier.
+	(save_fields): New function.
+	(Fsave): Document new feature.
+
 2008-03-25  John W. Eaton  <jwe@octave.org>
 
 	* lex.h (lexical_feedback::looking_at_initializer_expression):
 	New data member.
 	* lex.l (lexical_feedback::init): Initialize it.
 	(handle_identifier): Don't unconditionally force identifiers to be
 	variables in the current scope.  Don't call force_local_variable
 	for symbols that appear in parameter initializer expressions.
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -960,16 +960,44 @@ do_save (std::ostream& os, const symbol_
       std::string name = sr.name ();
       std::string help;
       bool global = sr.is_global ();
 
       do_save (os, val, name, help, global, fmt, save_as_floats);
     }
 }
 
+// save fields of a scalar structure STR matching PATTERN on stream OS
+// in the format specified by FMT.
+
+static size_t
+save_fields (std::ostream& os, const Octave_map& m,
+	     const std::string& pattern,
+	     load_save_format fmt, bool save_as_floats)
+{
+  glob_match pat (pattern);
+  
+  size_t saved = 0;
+
+  for (Octave_map::const_iterator p = m.begin (); p != m.end (); p++)
+    {
+      std::string empty_str;
+
+      if (pat.match(p->first))
+        {
+          do_save (os, p->second(0), p->first, empty_str,
+		   0, fmt, save_as_floats);
+
+          saved++;
+        }
+    }
+
+  return saved;
+}
+
 // Save variables with names matching PATTERN on stream OS in the
 // format specified by FMT.
 
 static size_t
 save_vars (std::ostream& os, const std::string& pattern,
 	   load_save_format fmt, bool save_as_floats)
 {
   std::list<symbol_table::symbol_record> vars = symbol_table::glob (pattern);
@@ -1178,24 +1206,65 @@ save_vars (const string_vector& argv, in
 {
   if (write_header_info)
     write_header (os, fmt);
 
   if (argv_idx == argc)
     {
       save_vars (os, "*", fmt, save_as_floats);
     }
+  else if (argv[argv_idx] == "-struct")
+    {
+      if (++argv_idx >= argc) 
+        {
+          error ("save: missing struct name");
+          return;
+        }
+
+      std::string struct_name = argv[argv_idx];
+
+      if (! symbol_table::is_variable (struct_name))
+        {
+          error ("save: no such variable: `%s'", struct_name.c_str ());
+          return;
+        }
+
+      octave_value struct_var = symbol_table::varref (struct_name);
+
+      if (! struct_var.is_map () || struct_var.numel () != 1) 
+        {
+          error ("save: `%s' is not a scalar structure",
+		 struct_name.c_str ());
+          return;
+        }
+      Octave_map struct_var_map = struct_var.map_value ();
+
+      ++argv_idx;
+
+      if (argv_idx < argc) 
+        {
+          for (int i = argv_idx; i < argc; i++)
+            {
+              if (! save_fields (os, struct_var_map, argv[i], fmt,
+				 save_as_floats))
+                {
+                  warning ("save: no such field `%s.%s'", 
+			   struct_name.c_str (), argv[i].c_str ());
+                }
+            }
+        }
+      else
+	save_fields (os, struct_var_map, "*", fmt, save_as_floats);
+    }
   else
     {
       for (int i = argv_idx; i < argc; i++)
 	{
 	  if (! save_vars (os, argv[i], fmt, save_as_floats))
-	    {
-	      warning ("save: no such variable `%s'", argv[i].c_str ());
-	    }
+	    warning ("save: no such variable `%s'", argv[i].c_str ());
 	}
     }
 }
 
 static void
 dump_octave_core (std::ostream& os, const char *fname, load_save_format fmt,
 		  bool save_as_floats)
 {
@@ -1333,22 +1402,26 @@ dump_octave_core (void)
 #define HAVE_ZLIB_HELP_STRING "\n\
 This option is not available, as this Octave executable was not linked with\n\
 the zlib library."
 #endif /* ! HAVE ZLIB */
 
 DEFCMD (save, args, ,
   "-*- texinfo -*-\n\
 @deffn {Command} save options file @var{v1} @var{v2} @dots{}\n\
+@deffnx {Command} save options file -struct @var{STR} @var{f1} @var{f2} @dots{}\n\
 Save the named variables @var{v1}, @var{v2}, @dots{}, in the file\n\
-@var{file}.  The special filename @samp{-} can be used to write the\n\
+@var{file}.  The special filename @samp{-} may be used to write the\n\
 output to your terminal.  If no variable names are listed, Octave saves\n\
-all the variables in the current scope.  Valid options for the\n\
-@code{save} command are listed in the following table.  Options that\n\
-modify the output format override the format specified by\n\
+all the variables in the current scope.\n\
+If the @code{-struct} modifier is used, fields @var{f1} @var{f2} @dots{}\n\
+of the scalar structure @var{STR} are saved as if they were variables\n\
+with corresponding names.\n\
+Valid options for the @code{save} command are listed in the following table.\n\
+Options that modify the output format override the format specified by \n\
 @code{default_save_options}.\n\
 \n\
 If save is invoked using the functional form\n\
 \n\
 @example\n\
 save (\"-option1\", @dots{}, \"file\", \"v1\", @dots{})\n\
 @end example\n\
 \n\
@@ -1422,16 +1495,19 @@ Match any single character.\n\
 @item *\n\
 Match zero or more characters.\n\
 \n\
 @item [ @var{list} ]\n\
 Match the list of characters specified by @var{list}.  If the first\n\
 character is @code{!} or @code{^}, match all characters except those\n\
 specified by @var{list}.  For example, the pattern @samp{[a-zA-Z]} will\n\
 match all lower and upper case alphabetic characters. \n\
+\n\      
+Wildcards may also be used in the field names specifications when using\n\
+the @code{-struct} modifier (but not in the struct name itself).\n\
 \n\
 @item -text\n\
 Save the data in Octave's text data format.\n\
 @end table\n\
 \n\
 Except when using the @sc{Matlab} binary data file format, saving global\n\
 variables also saves the global status of the variable, so that if it is\n\
 restored at a later time using @samp{load}, it will be restored as a\n\
diff --git a/test/ChangeLog b/test/ChangeLog
--- a/test/ChangeLog
+++ b/test/ChangeLog
@@ -1,8 +1,12 @@
+2008-03-25  Jaroslav Hajek  <highegg@gmail.com>
+
+	* test_io.m: Add test for save with -struct modifier.
+
 2008-03-20  David Bateman  <dbateman@free.fr>
 
 	* test_func.m: Modify to test for char, cell and structure arrays.
 
 	* test_func.m: New test code that ensures that all operations
 	which work on dimensions alone (squeeze, triu, etc.) work for all
 	objects and preserve type.
 
diff --git a/test/test_io.m b/test/test_io.m
--- a/test/test_io.m
+++ b/test/test_io.m
@@ -181,16 +181,46 @@
 %! [save_status, save_files] = testls (0);
 %! [load_status, load_files] = testls (1);
 %! 
 %! for f = [save_files, load_files]
 %!   unlink (f{1});
 %! endfor
 %! 
 %! assert(save_status && load_status);
+%!
+%!test
+%! 
+%! STR.scalar_fld = 1;
+%! STR.matrix_fld = [1.1,2;3,4];
+%! STR.string_fld = "Octave";
+%! STR.struct_fld.x = 0;
+%! STR.struct_fld.y = 1;
+%! 
+%! save struct.dat -struct STR;
+%! STR = load struct.dat ;
+%!
+%! assert(STR.scalar_fld == 1 && ...
+%! 	STR.matrix_fld == [1.1,2;3,4] && ...
+%! 	STR.string_fld == "Octave" && ...
+%! 	STR.struct_fld.x == 0 && ...
+%! 	STR.struct_fld.y == 1 );
+%!
+%!
+%! save -binary struct.dat -struct STR matrix_fld str*_fld;
+%! STR = load struct.dat ;
+%!
+%! assert(!isfield(STR,"scalar_fld") && ...
+%! 	STR.matrix_fld == [1.1,2;3,4] && ...
+%! 	STR.string_fld == "Octave" && ...
+%! 	STR.struct_fld.x == 0 && ...
+%! 	STR.struct_fld.y == 1);
+%!
+%! delete struct.dat;
+%!
 
 %% FIXME Disable this test as it writes to stdout and there is no easy
 %% way to recover output. Need to spawn new octave process and pipe stdout
 %% somewhere to treat this case
 %% test/octave.test/io/puts-1.m
 %!#test
 %! puts ("foo\n");
 
