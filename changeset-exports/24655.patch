# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1517350681 18000
#      Tue Jan 30 17:18:01 2018 -0500
# Node ID 3ceee1910e1a93533cbe437c8eac40d145cc5863
# Parent  6daa29105d214f573a3c038de80e2b2afee97a12
allow single character strings to be edited (bug #51848)

* variable-editor-model.h, variable-editor-model.cc (get_quote_char):
New function.
(variable_editor_model::quote_char,
variable_editor_model::impl::quote_char): New functions.
(variable_editor_model::subscript_expression): New overload.  Handle
cells and strings.
(variable_editor_model::set_data_oct): Don't pass name as argument.
Change all uses.  Handle character strings.
(get_rows_and_columns): Special case for strings.
(variable_editor_model::impl): Special case for strings.
(variable_editor_model::impl::value_at): New overload.
(variable_editor_model::type_is_editable): Handle strings.

* ov-str-mat.h, ov-str-mat.cc (octave_char_matrix_str::edit_display):
New function.

* ov-cell.cc (octave_base_matrix<Cell>::edit_display): Don't handle
special cases here.

diff --git a/libgui/src/variable-editor-model.cc b/libgui/src/variable-editor-model.cc
--- a/libgui/src/variable-editor-model.cc
+++ b/libgui/src/variable-editor-model.cc
@@ -63,21 +63,33 @@ make_label (const std::string& name, con
                   + "]");
     }
   else
     lbl_txt += " [undefined]";
 
   return lbl_txt;
 }
 
+static char
+get_quote_char (const octave_value& val)
+{
+  if (val.is_sq_string ())
+    return '\'';
+
+  if (val.is_dq_string ())
+    return '"';
+
+  return 0;
+}
+
 static void
 get_rows_and_columns (const octave_value& val, int& rows, int& cols)
 {
   rows = val.rows ();
-  cols = val.columns ();
+  cols = (val.is_string () ? 1 : val.columns ());
 }
 
 struct variable_editor_model::impl
 {
   struct cell
   {
     cell (void) : m_defined (false) { }
 
@@ -87,17 +99,24 @@ struct variable_editor_model::impl
         m_editor_type (sub_none)
     {
       if (val.iscell ())
         {
           Cell cval = val.cell_value ();
 
           octave_value ov = cval(r,c);
 
-          if (! (ov.numel () == 1 && (ov.isnumeric () || ov.islogical ())))
+          if ((ov.numel () == 1 && (ov.isnumeric () || ov.islogical ()))
+              || (ov.rows () == 1 && ov.is_string ()))
+            {
+              m_data = QString::fromStdString (ov.edit_display (r, c));
+
+              return;
+            }
+          else
             m_requires_sub_editor = true;
         }
 
       m_data = QString::fromStdString (val.edit_display (r, c));
     }
 
     cell (const QString& d, const QString& s, const QString& t,
           bool rse, sub_editor_types edtype)
@@ -149,40 +168,76 @@ struct variable_editor_model::impl
   cell& elem (int i) { return m_table[i]; }
   cell& elem (int r, int c) { return elem (index (r, c)); }
   cell& elem (const QModelIndex& idx) { return elem (index (idx)); }
 
   const cell& elem (int i) const { return m_table[i]; }
   const cell& elem (int r, int c) const { return elem (index (r, c)); }
   const cell& elem (const QModelIndex& idx) const { return elem (index (idx)); }
 
+  char quote_char (int r, int c) const
+  {
+    if (m_value.is_string ())
+      return get_quote_char (m_value);
+    else if (m_value.iscell ())
+      {
+        Cell cval = m_value.cell_value ();
+
+        octave_value ov = cval(r,c);
+
+        if (ov.rows () == 1)
+          return get_quote_char (ov);
+      }
+
+    return 0;
+  }
+
+  QString subscript_expression (int r, int c) const
+  {
+    if (m_value.is_string ())
+      return "";
+    else if (m_value.iscell ())
+      return (QString ("{%1, %2}")
+              .arg (r + 1)
+              .arg (c + 1));
+    else
+      return (QString ("(%1, %2)")
+              .arg (r + 1)
+              .arg (c + 1));
+  }
+
   void update (const QModelIndex& idx)
   {
     if (is_defined (idx))
       return;
 
     if (idx.isValid ())
       {
         int r = idx.row ();
         int c = idx.column ();
 
         cell edit_cell (m_value, r, c);
 
         set (r, c, edit_cell);
       }
   }
 
-  octave_value value_at (const QModelIndex& idx) const
+  octave_value value_at (int r, int c) const
   {
     if (! m_value.iscell ())
       return octave_value ();
 
     Cell cval = m_value.cell_value ();
 
-    return cval.elem (idx.row (), idx.column ());
+    return cval.elem (r, c);
+  }
+
+  octave_value value_at (const QModelIndex& idx) const
+  {
+    return value_at (idx.row (), idx.column ());
   }
 
   void set (const QModelIndex& idx, const cell& dat)
   {
     if (idx.isValid ())
       elem (idx) = dat;
   }
 
@@ -235,17 +290,17 @@ struct variable_editor_model::impl
         m_validity = true;
 
         get_rows_and_columns (m_value, r, c);
       }
 
     m_rows = r;
     m_cols = c;
 
-    m_table.resize (r * c);
+    m_table.resize (m_rows * m_cols);
 
     m_label->setTextFormat (Qt::PlainText);
 
     m_validtext = make_label (m_name, m_value);
   }
 
   void invalidate (void)
   {
@@ -396,20 +451,18 @@ variable_editor_model::setData (const QM
 
   QString vstr = v.toString ();
 
   m_d->set (r, c, impl::cell (vstr, "", "", false, sub_none));
 
   // Evaluate the string that the user entered.  If that fails, we
   // will restore previous value.
 
-  octave_link::post_event<variable_editor_model,
-                          std::string, int, int, std::string>
-    (this, &variable_editor_model::set_data_oct,
-     m_d->m_name, r, c, vstr.toStdString ());
+  octave_link::post_event<variable_editor_model, int, int, std::string>
+    (this, &variable_editor_model::set_data_oct, r, c, vstr.toStdString ());
 
   // This is success so far...
 
   return true;
 }
 
 Qt::ItemFlags
 variable_editor_model::flags (const QModelIndex& idx) const
@@ -518,22 +571,32 @@ bool variable_editor_model::editor_type_
   return m_d->sub_editor_type (idx) == sub_matrix;
 }
 
 bool variable_editor_model::editor_type_string (const QModelIndex& idx) const
 {
   return m_d->sub_editor_type (idx) == sub_string;
 }
 
+char
+variable_editor_model::quote_char (int r, int c) const
+{
+  return m_d->quote_char (r, c);
+}
+
+QString
+variable_editor_model::subscript_expression (int r, int c) const
+{
+  return m_d->subscript_expression (r, c);
+}
+
 QString
 variable_editor_model::subscript_expression (const QModelIndex& idx) const
 {
-  return (QString (m_d->m_value.iscell () ? "{%1, %2}" : "(%1, %2)")
-          .arg (idx.row () + 1)
-          .arg (idx.column () + 1));
+  return subscript_expression (idx.row (), idx.column ());
 }
 
 // Private slots.
 
 void
 variable_editor_model::user_error (const QString& title, const QString& msg)
 {
   QMessageBox::critical (nullptr, title, msg);
@@ -599,30 +662,43 @@ variable_editor_model::update_data (cons
   emit maybe_resize_columns_signal ();
 }
 
 // Private.
 
 // val has to be copied!
 
 void
-variable_editor_model::set_data_oct (const std::string& name,
-                                     const int& row, const int& col,
+variable_editor_model::set_data_oct (const int& row, const int& col,
                                      const std::string& rhs)
 {
   // INTERPRETER THREAD
 
   std::string expr;
 
   try
     {
       int parse_status = 0;
 
       std::ostringstream os;
-      os << name << "(" << row+1 << "," << col+1 << ") = " << rhs;
+
+      std::string name = m_d->m_name;
+      os << name;
+
+      QString tmp = subscript_expression (row, col);
+      os << tmp.toStdString () << " = ";
+
+      char qc = quote_char (row, col);
+      if (qc)
+        os << qc;
+
+      os << rhs;
+
+      if (qc)
+        os << qc;
 
       expr = os.str ();
 
       octave::eval_string (expr, true, parse_status);
 
       octave_value val = retrieve_variable (name);
 
       emit update_data_signal (val);
@@ -749,18 +825,19 @@ variable_editor_model::clear_data_cell (
 {
   m_d->clear (r, c);
 }
 
 bool
 variable_editor_model::type_is_editable (const octave_value& val,
                                          bool display_error) const
 {
-  if ((val.isnumeric () || val.islogical () || val.iscell ())
-      && val.ndims () == 2)
+  if (((val.isnumeric () || val.islogical () || val.iscell ())
+       && val.ndims () == 2)
+      || (val.is_string () && val.rows () == 1))
     return true;
 
   if (display_error)
     {
       QString tname = QString::fromStdString (val.type_name ());
 
       dim_vector dv = val.dims ();
       QString dimstr = QString::fromStdString (dv.str ());
diff --git a/libgui/src/variable-editor-model.h b/libgui/src/variable-editor-model.h
--- a/libgui/src/variable-editor-model.h
+++ b/libgui/src/variable-editor-model.h
@@ -87,19 +87,24 @@ public:
   // Is cell at idx complex enough to require a sub editor?
   bool requires_sub_editor (const QModelIndex& idx) const;
 
   // If a sub editor is required, is it a standard type?
   bool editor_type_matrix (const QModelIndex& idx) const;
 
   bool editor_type_string (const QModelIndex& idx) const;
 
+  char quote_char (int r, int c) const;
+
   // Return a subscript expression as a string that can be used to
   // access a sub-element of a data structure.  For example "{1,3}"
   // for cell array element {1,3} or "(2,4)" for array element (2,4).
+
+  QString subscript_expression (int r, int c) const;
+
   QString subscript_expression (const QModelIndex& idx) const;
 
 signals: // private
 
   void update_data_signal (const octave_value& val);
 
   void clear_data_cell_signal (int r, int c);
 
@@ -117,18 +122,17 @@ private slots:
 
   // Change the display if the variable does not exist.
   void data_error (const QString& msg);
 
   void user_error (const QString& title, const QString& msg);
 
 private:
 
-  void set_data_oct (const std::string& v, const int& row, const int& col,
-                     const std::string& val);
+  void set_data_oct (const int& row, const int& col, const std::string& val);
 
   void init_from_oct (const std::string& x);
 
   void eval_oct (const std::string& name, const std::string& expr);
 
   octave_value retrieve_variable (const std::string& x);
 
   sub_editor_types editor_type (const QModelIndex& idx) const;
diff --git a/libinterp/octave-value/ov-cell.cc b/libinterp/octave-value/ov-cell.cc
--- a/libinterp/octave-value/ov-cell.cc
+++ b/libinterp/octave-value/ov-cell.cc
@@ -101,25 +101,20 @@ octave_base_matrix<Cell>::delete_element
 
 template <>
 std::string
 octave_base_matrix<Cell>::edit_display (octave_idx_type i,
                                         octave_idx_type j) const
 {
   octave_value val = matrix(i,j);
 
-  if (val.numel () == 1 && (val.isnumeric () || val.islogical ()))
-    return val.edit_display (0, 0);
-  else
-    {
-      std::string tname = val.type_name ();
-      dim_vector dv = val.dims ();
-      std::string dimstr = dv.str ();
-      return "[" + dimstr + " " + tname + "]";
-    }
+  std::string tname = val.type_name ();
+  dim_vector dv = val.dims ();
+  std::string dimstr = dv.str ();
+  return "[" + dimstr + " " + tname + "]";
 }
 
 template <>
 octave_value
 octave_base_matrix<Cell>::fast_elem_extract (octave_idx_type n) const
 {
   if (n < matrix.numel ())
     return Cell (matrix(n));
diff --git a/libinterp/octave-value/ov-str-mat.cc b/libinterp/octave-value/ov-str-mat.cc
--- a/libinterp/octave-value/ov-str-mat.cc
+++ b/libinterp/octave-value/ov-str-mat.cc
@@ -272,16 +272,37 @@ octave_char_matrix_str::short_disp (std:
 
       // FIXME: should this be configurable?
       size_t max_len = 100;
 
       os << (tmp.length () > max_len ? tmp.substr (0, 100) : tmp);
     }
 }
 
+std::string
+octave_char_matrix_str::edit_display (octave_idx_type i, octave_idx_type) const
+{
+  if (matrix.rows () == 1 && i == 0)
+    {
+      std::string retval = string_value ();
+
+      if (! is_sq_string ())
+        retval = undo_string_escapes (retval);
+
+      return retval;
+    }
+  else
+    {
+      std::string tname = type_name ();
+      dim_vector dv = matrix.dims ();
+      std::string dimstr = dv.str ();
+      return "[" + dimstr + " " + tname + "]";
+    }
+}
+
 bool
 octave_char_matrix_str::save_ascii (std::ostream& os)
 {
   dim_vector dv = dims ();
   if (dv.ndims () > 2)
     {
       charNDArray tmp = char_array_value ();
       os << "# ndims: " << dv.ndims () << "\n";
diff --git a/libinterp/octave-value/ov-str-mat.h b/libinterp/octave-value/ov-str-mat.h
--- a/libinterp/octave-value/ov-str-mat.h
+++ b/libinterp/octave-value/ov-str-mat.h
@@ -141,16 +141,18 @@ public:
   { return octave_value (matrix.sort (sidx, dim, mode)); }
 
   bool print_as_scalar (void) const { return (rows () <= 1); }
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   void short_disp (std::ostream& os) const;
 
+  std::string edit_display (octave_idx_type i, octave_idx_type j) const;
+
   bool save_ascii (std::ostream& os);
 
   bool load_ascii (std::istream& is);
 
   bool save_binary (std::ostream& os, bool& save_as_floats);
 
   bool load_binary (std::istream& is, bool swap,
                     octave::mach_info::float_format fmt);
