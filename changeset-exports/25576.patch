# HG changeset patch
# User Rik <rik@octave.org>
# Date 1531260241 25200
#      Tue Jul 10 15:04:01 2018 -0700
# Node ID 593a76595cf3b4f5d609943f0b39cc526bf4e2a3
# Parent  305147646ca9119ad91262c033d09e555ad50969
# Parent  b09ff039e6ff20c5799a00732a7050fc1ddb051f
maint: merge stable to default.

diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -2651,17 +2651,17 @@ Example 3: number of output arguments ==
 @example
 @group
 [nr, nc] = size ([1, 2; 3, 4; 5, 6])
     @result{} nr = 3
     @result{} nc = 2
 @end group
 @end example
 
-Example 4: number of output arguments != number of dimensions
+Example 4: number of output arguments < number of dimensions
 
 @example
 @group
 [nr, remainder] = size (ones (2, 3, 4, 5))
     @result{} nr = 2
     @result{} remainder = 60
 @end group
 @end example
diff --git a/scripts/general/trapz.m b/scripts/general/trapz.m
--- a/scripts/general/trapz.m
+++ b/scripts/general/trapz.m
@@ -67,23 +67,19 @@ function z = trapz (x, y, dim)
   endif
 
   have_xy = have_dim = false;
 
   if (nargin == 3)
     have_xy = true;
     have_dim = true;
   elseif (nargin == 2)
-    if (isvector (x) && isvector (y))
-      x = x(:);
-      y = y(:);
-    endif
-    if (! size_equal (x, y) && isscalar (y))
+    if (isscalar (y) && ! isscalar (x))
+      have_dim = true;
       dim = y;
-      have_dim = true;
     else
       have_xy = true;
     endif
   endif
 
   if (have_xy)
     nd = ndims (y);
     sz = size (y);
@@ -98,51 +94,64 @@ function z = trapz (x, y, dim)
   else
     if (!(isscalar (dim) && dim == fix (dim))
         || !(1 <= dim && dim <= nd))
       error ("trapz: DIM must be an integer and a valid dimension");
     endif
   endif
 
   n = sz(dim);
-  idx1 = idx2 = repmat ({':'}, [nd, 1]);
+  idx1 = idx2 = {':'}(ones (nd, 1));  # repmat ({':'}, [nd, 1]), but faster
   idx1{dim} = 2 : n;
   idx2{dim} = 1 : (n - 1);
 
   if (! have_xy)
     z = 0.5 * sum (x(idx1{:}) + x(idx2{:}), dim);
+  elseif (isscalar (x))
+    z = x * 0.5 * sum (y(idx1{:}) + y(idx2{:}), dim);
+  elseif (isvector (x))
+    if (length (x) != n)
+      error ("trapz: length of X and length of Y along DIM must match");
+    endif
+    ## Reshape spacing vector x to point along dimension DIM
+    shape = ones (nd, 1);
+    shape(dim) = n;
+    x = reshape (x, shape);
+    z = 0.5 * sum (diff (x) .* (y(idx1{:}) + y(idx2{:})), dim);
   else
-    if (isvector (x) && ! isvector (y))
-      if (length (x) != sz(dim))
-        error ("trapz: length of X and length of Y along DIM must match");
-      endif
-      ## Reshape vector to point along dimension DIM
-      shape = ones (nd, 1);
-      shape(dim) = sz(dim);
-      x = reshape (x, shape);
-      z = 0.5 * sum (diff (x) .* (y(idx1{:}) + y(idx2{:})), dim);
-    else
-      if (! size_equal (x, y))
-        error ("trapz: X and Y must have same shape");
-      endif
-      z = 0.5 * sum (diff (x, 1, dim) .* (y(idx1{:}) + y(idx2{:})), dim);
+    if (! size_equal (x, y))
+      error ("trapz: X and Y must have same shape");
     endif
+    z = 0.5 * sum (diff (x, 1, dim) .* (y(idx1{:}) + y(idx2{:})), dim);
   endif
 
 endfunction
 
 
 %!assert (trapz (1:5), 12)
+%!assert (trapz (1, 1:5), 12)
+%!assert (trapz (0.5, 1:5), 6)
 %!assert (trapz ([1:5], [1:5]), 12)
 %!assert (trapz ([1:5], [1:5]'), 12)
 %!assert (trapz ([1:5]', [1:5]'), 12)
 %!assert (trapz ([1:5]', [1:5]), 12)
 %!assert (trapz (0:0.5:2,1:5), 6)
-%!assert (trapz ([1:5;1:5].',1), [12,12])
-%!assert (trapz ([1:5;1:5],2), [12;12])
+%!assert (trapz ([1:5;1:5].', 1), [12, 12])
+%!assert (trapz ([1:5;1:5], 2), [12; 12])
 %!assert (trapz (repmat (reshape (1:5,1,1,5),2,2), 3), [12 12; 12 12])
-%!assert (trapz ([0:0.5:2;0:0.5:2].',[1:5;1:5].',1), [6, 6])
-%!assert (trapz ([0:0.5:2;0:0.5:2],[1:5;1:5],2), [6; 6])
+%!assert (trapz ([0:0.5:2;1:5].', [1:5;1:5].', 1), [6, 12])
+%!assert (trapz ([0:0.5:2;1:5], [1:5;1:5], 2), [6; 12])
 %!assert (trapz (repmat (reshape ([0:0.5:2],1,1,5),2,2), ...
 %!               repmat (reshape (1:5,1,1,5),2,2), 3), [6 6; 6 6])
-%!assert (trapz (0:0.5:2,[(1:5)',(1:5)']), [6, 6])
-%!assert (trapz (0:0.5:2,[(1:5);(1:5)],2), [6; 6])
-%!assert (trapz (0:0.5:2,repmat (reshape (1:5,1,1,5),2,2),3), [6 6; 6 6])
+%!assert (trapz (0:0.5:2, [(1:5)', (1:5)']), [6, 6])
+%!assert (trapz (0:0.5:2, [(1:5); (1:5)], 2), [6; 6])
+%!assert (trapz (0:0.5:2, repmat (reshape (1:5,1,1,5),2,2),3), [6 6; 6 6])
+%!assert <*54277> (trapz (ones (1,3), 1), zeros (1,3))
+%!assert <*54277> (trapz (ones (3,1), 2), zeros (3,1))
+
+## Test input validation
+%!error trapz ()
+%!error trapz (1,2,3,4)
+%!error <DIM must be an integer> trapz (1, 2, [1 2])
+%!error <DIM must be an integer> trapz (1, 2, 1.5)
+%!error <DIM must be .* a valid dimension> trapz (1, 2, 0)
+%!error <length of X and length of Y.*must match> trapz ([1 2], [1 2 3])
+%!error <X and Y must have same shape> trapz (ones (2,3), ones (2,4))
