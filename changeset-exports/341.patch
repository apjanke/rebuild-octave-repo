# HG changeset patch
# User jwe
# Date 760608018 0
#      Mon Feb 07 08:00:18 1994 +0000
# Node ID 4115f7713851251b7a6ad5542af08107ee06ada0
# Parent  57cdcf21c1df2acdd2a8ba50cc39e09ba7ce85e2
[project @ 1994-02-07 07:59:44 by jwe]

diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -1017,19 +1017,18 @@ is_keyword (char *s)
   else if (strcmp ("function", s) == 0)
     {
       if (defining_func)
 	{
 	  error ("function keyword invalid within a function body");
 
 	  if ((reading_fcn_file || reading_script_file)
 	      && curr_fcn_file_name != (char *) NULL)
-	    error ("defining new function near line %d of file `%s'",
-		   input_line_number,
-		   curr_fcn_file_name);
+	    error ("defining new function near line %d of file `%s.m'",
+		   input_line_number, curr_fcn_file_name);
 	  else
 	    error ("defining new function near line %d", input_line_number);
 
 	  jump_to_top_level ();  // XXX FIXME XXX
 	}
       else
 	{
 	  tmp_local_sym_tab = new symbol_table ();
@@ -1494,17 +1493,17 @@ check_for_garbage_after_fcn_def (void)
 	  in_comment = 1;
 	  break;
 	default:
 	  if (in_comment)
 	    break;
 	  else
 	    {
 	      warning ("ignoring trailing garbage after end of function\n\
-         near line %d of file `%s'", lineno, curr_fcn_file_name);
+         near line %d of file `%s.m'", lineno, curr_fcn_file_name);
 	      
 	      yyunput ('\n', yytext);
 	      return;
 	    }
 	}
     }
   yyunput ('\n', yytext);
 }
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -902,33 +902,33 @@ func_def2	: identifier safe local_symtab
 // file does not match the name of the function stated in the file.
 // Matlab doesn't provide a diagnostic (it ignores the stated name).
 
 		    if (reading_fcn_file)
 		      {
 			if (strcmp (curr_fcn_file_name, id_name) != 0)
 			  {
 			    warning ("function name `%s' does not agree\
- with function file name `%s'", id_name, curr_fcn_file_name);
+ with function file name `%s.m'", id_name, curr_fcn_file_name);
 
 			    $1->rename (curr_fcn_file_name);
 			    id_name = $1->name ();
 			  }
 
 			$4->stash_fcn_file_name (curr_fcn_file_name);
 			$4->stash_fcn_file_time (time ((time_t *) NULL));
 			$4->mark_as_system_fcn_file ();
 		      }
 		    else if (! (input_from_tmp_history_file
 				|| input_from_startup_file)
 			     && reading_script_file
 			     && strcmp (curr_fcn_file_name, id_name) == 0)
 		      {
 			warning ("function `%s' defined within\
- script file `%s'", id_name, curr_fcn_file_name);
+ script file `%s.m'", id_name, curr_fcn_file_name);
 		      }
 
 		    top_level_sym_tab->clear (id_name);
 
 		    $4->stash_function_name (id_name);
 
 		    $1->define ($4);
 		    $1->document (help_buf);
@@ -1113,17 +1113,17 @@ yyerror (char *s)
   if (err_col == 0 && line != (char *) NULL)
     err_col = strlen (line) + 1;
 
 // Print a message like `parse error'.
   fprintf (stderr, "\n%s", s);
 
 // Maybe print the line number and file name.
   if (reading_fcn_file || reading_script_file)
-    fprintf (stderr, " near line %d of file %s", input_line_number,
+    fprintf (stderr, " near line %d of file %s.m", input_line_number,
 	     curr_fcn_file_name);
 
   if (line != (char *) NULL)
     {
       int len = strlen (line);
       if (line[len-1] == '\n')
         {
           len--;
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -593,18 +593,17 @@ file_in_path (const char *name, const ch
 
 /*
  * See if there is an function file in the path.  If so, return the
  * full path to the file.
  */
 char *
 fcn_file_in_path (const char *name)
 {
-  char *fcn_file = file_in_path (name, (char *) NULL);
-  return (fcn_file) ? fcn_file : file_in_path (name, ".m");
+  return file_in_path (name, ".m");
 }
 
 /*
  * Return a pretty pathname.  If the first part of the pathname is the
  * same as $HOME, then replace that with `~'.
  */
 char *
 polite_directory_format (char *name)
