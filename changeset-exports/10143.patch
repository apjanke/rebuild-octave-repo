# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1263981535 -3600
#      Wed Jan 20 10:58:55 2010 +0100
# Node ID f3c34b518422e5675e2619bf5861a92a51c46267
# Parent  829e69ec3110baba158af8c4d59b7eae567df802
simplify pairwise min/max implementations

diff --git a/liboctave/CNDArray.cc b/liboctave/CNDArray.cc
--- a/liboctave/CNDArray.cc
+++ b/liboctave/CNDArray.cc
@@ -909,149 +909,50 @@ operator >> (std::istream& is, ComplexND
 	  }
     }
 
  done:
 
   return is;
 }
 
-// FIXME -- it would be nice to share code among the min/max
-// functions below.
-
-#define EMPTY_RETURN_CHECK(T) \
-  if (nel == 0)	\
-    return T (dv);
-
 ComplexNDArray
-min (const Complex& c, const ComplexNDArray& m)
+min (const Complex& s, const ComplexNDArray& m)
 {
-  dim_vector dv = m.dims ();
-  int nel = dv.numel ();
-
-  EMPTY_RETURN_CHECK (ComplexNDArray);
-
-  ComplexNDArray result (dv);
-
-  for (int i = 0; i < nel; i++)
-    {
-      octave_quit ();
-      result (i) = xmin (c, m (i));
-    }
-
-  return result;
+  return do_sm_binary_op<ComplexNDArray> (s, m, mx_inline_xmin);
 }
 
 ComplexNDArray
-min (const ComplexNDArray& m, const Complex& c)
+min (const ComplexNDArray& m, const Complex& s)
 {
-  dim_vector dv = m.dims ();
-  int nel = dv.numel ();
-
-  EMPTY_RETURN_CHECK (ComplexNDArray);
-
-  ComplexNDArray result (dv);
-
-  for (int i = 0; i < nel; i++)
-    {
-      octave_quit ();
-      result (i) = xmin (c, m (i));
-    }
-
-  return result;
+  return do_ms_binary_op<ComplexNDArray> (m, s, mx_inline_xmin);
 }
 
 ComplexNDArray
 min (const ComplexNDArray& a, const ComplexNDArray& b)
 {
-  dim_vector dv = a.dims ();
-  int nel = dv.numel ();
-
-  if (dv != b.dims ())
-    {
-      (*current_liboctave_error_handler)
-	("two-arg min expecting args of same size");
-      return ComplexNDArray ();
-    }
-
-  EMPTY_RETURN_CHECK (ComplexNDArray);
-
-  ComplexNDArray result (dv);
-
-  for (int i = 0; i < nel; i++)
-    {
-      octave_quit ();
-      result (i) = xmin (a (i), b (i));
-    }
-
-  return result;
+  return do_mm_binary_op<ComplexNDArray> (a, b, mx_inline_xmin, "min");
 }
 
 ComplexNDArray
-max (const Complex& c, const ComplexNDArray& m)
+max (const Complex& s, const ComplexNDArray& m)
 {
-  dim_vector dv = m.dims ();
-  int nel = dv.numel ();
-
-  EMPTY_RETURN_CHECK (ComplexNDArray);
-
-  ComplexNDArray result (dv);
-
-  for (int i = 0; i < nel; i++)
-    {
-      octave_quit ();
-      result (i) = xmax (c, m (i));
-    }
-
-  return result;
+  return do_sm_binary_op<ComplexNDArray> (s, m, mx_inline_xmax);
 }
 
 ComplexNDArray
-max (const ComplexNDArray& m, const Complex& c)
+max (const ComplexNDArray& m, const Complex& s)
 {
-  dim_vector dv = m.dims ();
-  int nel = dv.numel ();
-
-  EMPTY_RETURN_CHECK (ComplexNDArray);
-
-  ComplexNDArray result (dv);
-
-  for (int i = 0; i < nel; i++)
-    {
-      octave_quit ();
-      result (i) = xmax (c, m (i));
-    }
-
-  return result;
+  return do_ms_binary_op<ComplexNDArray> (m, s, mx_inline_xmax);
 }
 
 ComplexNDArray
 max (const ComplexNDArray& a, const ComplexNDArray& b)
 {
-  dim_vector dv = a.dims ();
-  int nel = dv.numel ();
-
-  if (dv != b.dims ())
-    {
-      (*current_liboctave_error_handler)
-	("two-arg max expecting args of same size");
-      return ComplexNDArray ();
-    }
-
-  EMPTY_RETURN_CHECK (ComplexNDArray);
-
-  ComplexNDArray result (dv);
-
-  for (int i = 0; i < nel; i++)
-    {
-      octave_quit ();
-      result (i) = xmax (a (i), b (i));
-    }
-
-  return result;
+  return do_mm_binary_op<ComplexNDArray> (a, b, mx_inline_xmax, "max");
 }
 
 NDS_CMP_OPS (ComplexNDArray, Complex)
 NDS_BOOL_OPS (ComplexNDArray, Complex)
 
 SND_CMP_OPS (Complex, ComplexNDArray)
 SND_BOOL_OPS (Complex, ComplexNDArray)
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,17 @@
+2010-01-20  Jaroslav Hajek  <highegg@gmail.com>
+
+	* mx-op-defs.h (SND_MINMAX_FCN, NDS_MINMAX_FCN, NDND_MINMAX_FCN):
+	Simplify using mx_inlines machinery. 
+	* dNDArray (min, max): Simplify.
+	* fNDArray (min, max): Simplify.
+	* CNDArray (min, max): Simplify.
+	* fCNDArray (min, max): Simplify.
+
 2010-01-20  Jaroslav Hajek  <highegg@gmail.com>
 
 	* Array.h: Substitute OCTAVE_QUIT -> octave_quit ().
 	* CMatrix.cc: Ditto.
 	* CNDArray.cc: Ditto.
 	* CSparse.cc: Ditto.
 	* CmplxGEPBAL.cc: Ditto.
 	* MArrayN.cc: Ditto.
diff --git a/liboctave/dNDArray.cc b/liboctave/dNDArray.cc
--- a/liboctave/dNDArray.cc
+++ b/liboctave/dNDArray.cc
@@ -976,149 +976,50 @@ operator >> (std::istream& is, NDArray& 
 	  }
     }
 
  done:
 
   return is;
 }
 
-// FIXME -- it would be nice to share code among the min/max
-// functions below.
-
-#define EMPTY_RETURN_CHECK(T) \
-  if (nel == 0)	\
-    return T (dv);
-
 NDArray
-min (double d, const NDArray& m)
+min (double s, const NDArray& m)
 {
-  dim_vector dv = m.dims ();
-  octave_idx_type nel = dv.numel ();
-
-  EMPTY_RETURN_CHECK (NDArray);
-
-  NDArray result (dv);
-
-  for (octave_idx_type i = 0; i < nel; i++)
-    {
-      octave_quit ();
-      result (i) = xmin (d, m (i));
-    }
-
-  return result;
+  return do_sm_binary_op<NDArray> (s, m, mx_inline_xmin);
 }
 
 NDArray
-min (const NDArray& m, double d)
+min (const NDArray& m, double s)
 {
-  dim_vector dv = m.dims ();
-  octave_idx_type nel = dv.numel ();
-
-  EMPTY_RETURN_CHECK (NDArray);
-
-  NDArray result (dv);
-
-  for (octave_idx_type i = 0; i < nel; i++)
-    {
-      octave_quit ();
-      result (i) = xmin (d, m (i));
-    }
-
-  return result;
+  return do_ms_binary_op<NDArray> (m, s, mx_inline_xmin);
 }
 
 NDArray
 min (const NDArray& a, const NDArray& b)
 {
-  dim_vector dv = a.dims ();
-  octave_idx_type nel = dv.numel ();
-
-  if (dv != b.dims ())
-    {
-      (*current_liboctave_error_handler)
-	("two-arg min expecting args of same size");
-      return NDArray ();
-    }
-
-  EMPTY_RETURN_CHECK (NDArray);
-
-  NDArray result (dv);
-
-  for (octave_idx_type i = 0; i < nel; i++)
-    {
-      octave_quit ();
-      result (i) = xmin (a (i), b (i));
-    }
-
-  return result;
+  return do_mm_binary_op<NDArray> (a, b, mx_inline_xmin, "min");
 }
 
 NDArray
-max (double d, const NDArray& m)
+max (double s, const NDArray& m)
 {
-  dim_vector dv = m.dims ();
-  octave_idx_type nel = dv.numel ();
-
-  EMPTY_RETURN_CHECK (NDArray);
-
-  NDArray result (dv);
-
-  for (octave_idx_type i = 0; i < nel; i++)
-    {
-      octave_quit ();
-      result (i) = xmax (d, m (i));
-    }
-
-  return result;
+  return do_sm_binary_op<NDArray> (s, m, mx_inline_xmax);
 }
 
 NDArray
-max (const NDArray& m, double d)
+max (const NDArray& m, double s)
 {
-  dim_vector dv = m.dims ();
-  octave_idx_type nel = dv.numel ();
-
-  EMPTY_RETURN_CHECK (NDArray);
-
-  NDArray result (dv);
-
-  for (octave_idx_type i = 0; i < nel; i++)
-    {
-      octave_quit ();
-      result (i) = xmax (d, m (i));
-    }
-
-  return result;
+  return do_ms_binary_op<NDArray> (m, s, mx_inline_xmax);
 }
 
 NDArray
 max (const NDArray& a, const NDArray& b)
 {
-  dim_vector dv = a.dims ();
-  octave_idx_type nel = dv.numel ();
-
-  if (dv != b.dims ())
-    {
-      (*current_liboctave_error_handler)
-	("two-arg max expecting args of same size");
-      return NDArray ();
-    }
-
-  EMPTY_RETURN_CHECK (NDArray);
-
-  NDArray result (dv);
-
-  for (octave_idx_type i = 0; i < nel; i++)
-    {
-      octave_quit ();
-      result (i) = xmax (a (i), b (i));
-    }
-
-  return result;
+  return do_mm_binary_op<NDArray> (a, b, mx_inline_xmax, "max");
 }
 
 NDS_CMP_OPS (NDArray, double)
 NDS_BOOL_OPS (NDArray, double)
 
 SND_CMP_OPS (double, NDArray)
 SND_BOOL_OPS (double, NDArray)
 
diff --git a/liboctave/fCNDArray.cc b/liboctave/fCNDArray.cc
--- a/liboctave/fCNDArray.cc
+++ b/liboctave/fCNDArray.cc
@@ -904,149 +904,50 @@ operator >> (std::istream& is, FloatComp
 	  }
     }
 
  done:
 
   return is;
 }
 
-// FIXME -- it would be nice to share code among the min/max
-// functions below.
-
-#define EMPTY_RETURN_CHECK(T) \
-  if (nel == 0)	\
-    return T (dv);
-
 FloatComplexNDArray
-min (const FloatComplex& c, const FloatComplexNDArray& m)
+min (const FloatComplex& s, const FloatComplexNDArray& m)
 {
-  dim_vector dv = m.dims ();
-  int nel = dv.numel ();
-
-  EMPTY_RETURN_CHECK (FloatComplexNDArray);
-
-  FloatComplexNDArray result (dv);
-
-  for (int i = 0; i < nel; i++)
-    {
-      octave_quit ();
-      result (i) = xmin (c, m (i));
-    }
-
-  return result;
+  return do_sm_binary_op<FloatComplexNDArray> (s, m, mx_inline_xmin);
 }
 
 FloatComplexNDArray
-min (const FloatComplexNDArray& m, const FloatComplex& c)
+min (const FloatComplexNDArray& m, const FloatComplex& s)
 {
-  dim_vector dv = m.dims ();
-  int nel = dv.numel ();
-
-  EMPTY_RETURN_CHECK (FloatComplexNDArray);
-
-  FloatComplexNDArray result (dv);
-
-  for (int i = 0; i < nel; i++)
-    {
-      octave_quit ();
-      result (i) = xmin (c, m (i));
-    }
-
-  return result;
+  return do_ms_binary_op<FloatComplexNDArray> (m, s, mx_inline_xmin);
 }
 
 FloatComplexNDArray
 min (const FloatComplexNDArray& a, const FloatComplexNDArray& b)
 {
-  dim_vector dv = a.dims ();
-  int nel = dv.numel ();
-
-  if (dv != b.dims ())
-    {
-      (*current_liboctave_error_handler)
-	("two-arg min expecting args of same size");
-      return FloatComplexNDArray ();
-    }
-
-  EMPTY_RETURN_CHECK (FloatComplexNDArray);
-
-  FloatComplexNDArray result (dv);
-
-  for (int i = 0; i < nel; i++)
-    {
-      octave_quit ();
-      result (i) = xmin (a (i), b (i));
-    }
-
-  return result;
+  return do_mm_binary_op<FloatComplexNDArray> (a, b, mx_inline_xmin, "min");
 }
 
 FloatComplexNDArray
-max (const FloatComplex& c, const FloatComplexNDArray& m)
+max (const FloatComplex& s, const FloatComplexNDArray& m)
 {
-  dim_vector dv = m.dims ();
-  int nel = dv.numel ();
-
-  EMPTY_RETURN_CHECK (FloatComplexNDArray);
-
-  FloatComplexNDArray result (dv);
-
-  for (int i = 0; i < nel; i++)
-    {
-      octave_quit ();
-      result (i) = xmax (c, m (i));
-    }
-
-  return result;
+  return do_sm_binary_op<FloatComplexNDArray> (s, m, mx_inline_xmax);
 }
 
 FloatComplexNDArray
-max (const FloatComplexNDArray& m, const FloatComplex& c)
+max (const FloatComplexNDArray& m, const FloatComplex& s)
 {
-  dim_vector dv = m.dims ();
-  int nel = dv.numel ();
-
-  EMPTY_RETURN_CHECK (FloatComplexNDArray);
-
-  FloatComplexNDArray result (dv);
-
-  for (int i = 0; i < nel; i++)
-    {
-      octave_quit ();
-      result (i) = xmax (c, m (i));
-    }
-
-  return result;
+  return do_ms_binary_op<FloatComplexNDArray> (m, s, mx_inline_xmax);
 }
 
 FloatComplexNDArray
 max (const FloatComplexNDArray& a, const FloatComplexNDArray& b)
 {
-  dim_vector dv = a.dims ();
-  int nel = dv.numel ();
-
-  if (dv != b.dims ())
-    {
-      (*current_liboctave_error_handler)
-	("two-arg max expecting args of same size");
-      return FloatComplexNDArray ();
-    }
-
-  EMPTY_RETURN_CHECK (FloatComplexNDArray);
-
-  FloatComplexNDArray result (dv);
-
-  for (int i = 0; i < nel; i++)
-    {
-      octave_quit ();
-      result (i) = xmax (a (i), b (i));
-    }
-
-  return result;
+  return do_mm_binary_op<FloatComplexNDArray> (a, b, mx_inline_xmax, "max");
 }
 
 NDS_CMP_OPS (FloatComplexNDArray, FloatComplex)
 NDS_BOOL_OPS (FloatComplexNDArray, FloatComplex)
 
 SND_CMP_OPS (FloatComplex, FloatComplexNDArray)
 SND_BOOL_OPS (FloatComplex, FloatComplexNDArray)
 
diff --git a/liboctave/fNDArray.cc b/liboctave/fNDArray.cc
--- a/liboctave/fNDArray.cc
+++ b/liboctave/fNDArray.cc
@@ -934,149 +934,50 @@ operator >> (std::istream& is, FloatNDAr
 	  }
     }
 
  done:
 
   return is;
 }
 
-// FIXME -- it would be nice to share code among the min/max
-// functions below.
-
-#define EMPTY_RETURN_CHECK(T) \
-  if (nel == 0)	\
-    return T (dv);
-
 FloatNDArray
-min (float d, const FloatNDArray& m)
+min (float s, const FloatNDArray& m)
 {
-  dim_vector dv = m.dims ();
-  octave_idx_type nel = dv.numel ();
-
-  EMPTY_RETURN_CHECK (FloatNDArray);
-
-  FloatNDArray result (dv);
-
-  for (octave_idx_type i = 0; i < nel; i++)
-    {
-      octave_quit ();
-      result (i) = xmin (d, m (i));
-    }
-
-  return result;
+  return do_sm_binary_op<FloatNDArray> (s, m, mx_inline_xmin);
 }
 
 FloatNDArray
-min (const FloatNDArray& m, float d)
+min (const FloatNDArray& m, float s)
 {
-  dim_vector dv = m.dims ();
-  octave_idx_type nel = dv.numel ();
-
-  EMPTY_RETURN_CHECK (FloatNDArray);
-
-  FloatNDArray result (dv);
-
-  for (octave_idx_type i = 0; i < nel; i++)
-    {
-      octave_quit ();
-      result (i) = xmin (d, m (i));
-    }
-
-  return result;
+  return do_ms_binary_op<FloatNDArray> (m, s, mx_inline_xmin);
 }
 
 FloatNDArray
 min (const FloatNDArray& a, const FloatNDArray& b)
 {
-  dim_vector dv = a.dims ();
-  octave_idx_type nel = dv.numel ();
-
-  if (dv != b.dims ())
-    {
-      (*current_liboctave_error_handler)
-	("two-arg min expecting args of same size");
-      return FloatNDArray ();
-    }
-
-  EMPTY_RETURN_CHECK (FloatNDArray);
-
-  FloatNDArray result (dv);
-
-  for (octave_idx_type i = 0; i < nel; i++)
-    {
-      octave_quit ();
-      result (i) = xmin (a (i), b (i));
-    }
-
-  return result;
+  return do_mm_binary_op<FloatNDArray> (a, b, mx_inline_xmin, "min");
 }
 
 FloatNDArray
-max (float d, const FloatNDArray& m)
+max (float s, const FloatNDArray& m)
 {
-  dim_vector dv = m.dims ();
-  octave_idx_type nel = dv.numel ();
-
-  EMPTY_RETURN_CHECK (FloatNDArray);
-
-  FloatNDArray result (dv);
-
-  for (octave_idx_type i = 0; i < nel; i++)
-    {
-      octave_quit ();
-      result (i) = xmax (d, m (i));
-    }
-
-  return result;
+  return do_sm_binary_op<FloatNDArray> (s, m, mx_inline_xmax);
 }
 
 FloatNDArray
-max (const FloatNDArray& m, float d)
+max (const FloatNDArray& m, float s)
 {
-  dim_vector dv = m.dims ();
-  octave_idx_type nel = dv.numel ();
-
-  EMPTY_RETURN_CHECK (FloatNDArray);
-
-  FloatNDArray result (dv);
-
-  for (octave_idx_type i = 0; i < nel; i++)
-    {
-      octave_quit ();
-      result (i) = xmax (d, m (i));
-    }
-
-  return result;
+  return do_ms_binary_op<FloatNDArray> (m, s, mx_inline_xmax);
 }
 
 FloatNDArray
 max (const FloatNDArray& a, const FloatNDArray& b)
 {
-  dim_vector dv = a.dims ();
-  octave_idx_type nel = dv.numel ();
-
-  if (dv != b.dims ())
-    {
-      (*current_liboctave_error_handler)
-	("two-arg max expecting args of same size");
-      return FloatNDArray ();
-    }
-
-  EMPTY_RETURN_CHECK (FloatNDArray);
-
-  FloatNDArray result (dv);
-
-  for (octave_idx_type i = 0; i < nel; i++)
-    {
-      octave_quit ();
-      result (i) = xmax (a (i), b (i));
-    }
-
-  return result;
+  return do_mm_binary_op<FloatNDArray> (a, b, mx_inline_xmax, "max");
 }
 
 NDS_CMP_OPS (FloatNDArray, float)
 NDS_BOOL_OPS (FloatNDArray, float)
 
 SND_CMP_OPS (float, FloatNDArray)
 SND_BOOL_OPS (float, FloatNDArray)
 
diff --git a/liboctave/mx-op-defs.h b/liboctave/mx-op-defs.h
--- a/liboctave/mx-op-defs.h
+++ b/liboctave/mx-op-defs.h
@@ -545,80 +545,31 @@ operator * (const DM& dm, const M& m) \
   DMDM_BIN_OP (R, product,    DM1, DM2, mx_inline_mul)
 
 // scalar by N-d array min/max ops
 
 #define SND_MINMAX_FCN(FCN, OP, T) \
 T ## NDArray \
 FCN (octave_ ## T d, const T ## NDArray& m) \
 { \
-  dim_vector dv = m.dims (); \
-  octave_idx_type nel = dv.numel (); \
-\
-  if (nel == 0)	\
-    return T ## NDArray (dv); \
-\
-  T ## NDArray result (dv); \
-\
-  for (octave_idx_type i = 0; i < nel; i++) \
-    { \
-      octave_quit (); \
-      result (i) = d OP m (i) ? d : m(i); \
-    } \
-\
-  return result; \
+  return do_sm_binary_op<T##NDArray, octave_##T, T##NDArray> (d, m, mx_inline_x##FCN); \
 }
 
 #define NDS_MINMAX_FCN(FCN, OP, T) \
 T ## NDArray \
 FCN (const T ## NDArray& m, octave_ ## T d) \
 { \
-  dim_vector dv = m.dims (); \
-  octave_idx_type nel = dv.numel (); \
-\
-  if (nel == 0)	\
-    return T ## NDArray (dv); \
-\
-  T ## NDArray result (dv); \
-\
-  for (octave_idx_type i = 0; i < nel; i++) \
-    { \
-      octave_quit (); \
-      result (i) = m (i) OP d ? m(i) : d; \
-    } \
-\
-  return result; \
+  return do_ms_binary_op<T##NDArray, T##NDArray, octave_##T> (m, d, mx_inline_x##FCN); \
 }
 
 #define NDND_MINMAX_FCN(FCN, OP, T) \
 T ## NDArray \
 FCN (const T ## NDArray& a, const T ## NDArray& b) \
 { \
-  dim_vector dv = a.dims (); \
-  octave_idx_type nel = dv.numel (); \
-\
-  if (dv != b.dims ()) \
-    { \
-      (*current_liboctave_error_handler) \
-	("two-arg min expecting args of same size"); \
-      return T ## NDArray (); \
-    } \
-\
-  if (nel == 0)	\
-    return T ## NDArray (dv); \
-\
-  T ## NDArray result (dv); \
-\
-  for (octave_idx_type i = 0; i < nel; i++) \
-    { \
-      octave_quit (); \
-      result (i) = a(i) OP b(i) ? a(i) : b(i); \
-    } \
-\
-  return result; \
+  return do_mm_binary_op<T##NDArray, T##NDArray, T##NDArray> (a, b, mx_inline_x##FCN, #FCN); \
 }
 
 #define MINMAX_FCNS(T) \
   SND_MINMAX_FCN (min, <, T) \
   NDS_MINMAX_FCN (min, <, T) \
   NDND_MINMAX_FCN (min, <, T) \
   SND_MINMAX_FCN (max, >, T) \
   NDS_MINMAX_FCN (max, >, T) \
