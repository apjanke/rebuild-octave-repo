# HG changeset patch
# User jwe
# Date 1091809098 0
#      Fri Aug 06 16:18:18 2004 +0000
# Node ID e63617efbd3f968e01313c673b24845f7ff518ed
# Parent  4fc993a4e0726a90e634549537195c74bc62d43f
[project @ 2004-08-06 16:18:17 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,21 @@
+2004-08-06  David Bateman  <dbateman@free.fr>
+
+	* OPERATORS/op-struct.cc: New file.
+	* ov-struct.h (octave_struct::resize (const dim_vector&)):
+	New function.
+	* oct-map.h (Octave_map::resize (const dim_vector&)): New function.
+	* ov-map.cc (Octave_map::reshape):
+	Correct return for same sized reshape.
+	(Octave_map::resize (const dim_vector&)): New function.
+	(concat (const Octave_map&, const Octave_map&, const Array<int>&)):
+	Complete concatenation function.
+	* Makefile.in (OP_XSRC): Include op-struct.cc in the list.
+
 2004-08-05  John W. Eaton  <jwe@octave.org>
 
 	* pt-stmt.h (tree_statement::set_command,
 	(tree_statement::set_expression): New functions.
 
 	* parse.y (param_list_beg): Handle pushing new symbol table
 	context for anonymous function handle parameter lists here.
 	(anon_fcn_handle): New non-terminal.
diff --git a/src/Makefile.in b/src/Makefile.in
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -107,17 +107,17 @@ INTTYPE_OP_XSRC := op-int-conv.cc op-dou
 OP_XSRC := op-b-b.cc op-b-bm.cc op-bm-b.cc op-bm-bm.cc \
 	op-cell.cc op-chm.cc op-cm-cm.cc op-cm-cs.cc op-cm-m.cc \
 	op-cm-s.cc op-cs-cm.cc op-cs-cs.cc op-cs-m.cc \
 	op-cs-s.cc op-fil-b.cc op-fil-bm.cc op-fil-cm.cc \
 	op-fil-cs.cc op-fil-m.cc op-fil-s.cc op-fil-lis.cc \
 	op-fil-rec.cc op-fil-str.cc op-list.cc op-m-cm.cc \
 	op-m-cs.cc op-m-m.cc op-m-s.cc op-range.cc op-s-cm.cc \
 	op-s-cs.cc op-s-m.cc op-s-s.cc op-str-m.cc \
-	op-str-s.cc op-str-str.cc op-streamoff.cc \
+	op-str-s.cc op-str-str.cc op-streamoff.cc op-struct.cc \
 	$(INTTYPE_OP_XSRC)
 
 OP_SRC := $(addprefix OPERATORS/, $(OP_XSRC))
 
 OV_INTTYPE_SRC := \
 	ov-int8.cc ov-int16.cc ov-int32.cc ov-int64.cc \
 	ov-uint8.cc ov-uint16.cc ov-uint32.cc ov-uint64.cc
 
diff --git a/src/oct-map.cc b/src/oct-map.cc
--- a/src/oct-map.cc
+++ b/src/oct-map.cc
@@ -61,18 +61,20 @@ Octave_map::reshape (const dim_vector& n
 {
   Octave_map retval;
 
   if (new_dims != dims ())
     {
       for (const_iterator p = begin (); p != end (); p++)
 	retval.assign (key(p), contents(p).reshape (new_dims));
 
-      dimensions = new_dims;
+      retval.dimensions = new_dims;
     }
+  else
+    retval = *this;
 
   return retval;
 }
 
 int
 Octave_map::numel (void) const
 {
   int retval;
@@ -83,23 +85,61 @@ Octave_map::numel (void) const
     {
       Cell tmp = contents (begin ());
       retval = tmp.numel ();
     }
 
   return retval;
 }
 
+Octave_map 
+Octave_map::resize (const dim_vector& dv) const
+{
+  Octave_map retval;
+
+  if (dv != dims ())
+    {
+      for (const_iterator p = begin (); p != end (); p++)
+	{
+	  Cell tmp = contents(p);
+	  tmp.resize(dv);
+	  retval.assign (key(p), tmp);
+	}
+      
+      retval.dimensions = dv;
+    }
+  else
+    retval = *this;
+
+
+  return retval;
+}
+
 Octave_map
 concat (const Octave_map& ra, const Octave_map& rb, const Array<int>& ra_idx)
 {
-  // XXX FIXME XXX
+  if (ra.length() != rb.length())
+    {
+      error ("field name mismatch in structure concatenation");
+      return Octave_map ();
+    }
+
   Octave_map retval;
-  //Octave_map retval (ra);
-  //::concat_ra (retval, rb, dim) 
+  for (Octave_map::const_iterator pa = ra.begin (); pa != ra.end (); pa++)
+    {
+      Octave_map::const_iterator pb = rb.seek (ra.key(pa));
+      if (pa == rb.end())
+	{
+	  error ("field name mismatch in structure concatenation");
+	  return Octave_map ();
+	}
+	
+      retval.assign (ra.key(pa), ra.contents(pa).insert(rb.contents(pb), 
+							ra_idx));
+    }
   return retval;
 }
 
 static string_vector
 equiv_keys (const Octave_map& a, const Octave_map& b)
 {
   string_vector retval;
 
diff --git a/src/oct-map.h b/src/oct-map.h
--- a/src/oct-map.h
+++ b/src/oct-map.h
@@ -111,16 +111,18 @@ Octave_map
   int rows (void) const { return dimensions(0); }
 
   int columns (void) const { return dimensions(1); }
 
   dim_vector dims (void) const { return dimensions; }
 
   Octave_map reshape (const dim_vector& new_dims) const;
 
+  Octave_map resize (const dim_vector& dv) const;
+
   int numel (void) const;
 
   friend Octave_map concat (const Octave_map& ra, const Octave_map& rb, 
 			    const Array<int>& ra_idx);
 
   Octave_map& assign (const octave_value_list& idx, const Octave_map& rhs);
 
   Octave_map& assign (const octave_value_list& idx, const std::string& k,
diff --git a/src/ov-struct.h b/src/ov-struct.h
--- a/src/ov-struct.h
+++ b/src/ov-struct.h
@@ -88,16 +88,19 @@ public:
 
   dim_vector dims (void) const { return map.dims (); }
 
   size_t byte_size (void) const;
 
   octave_value reshape (const dim_vector& new_dims) const
     { return map.reshape (new_dims); }
 
+  octave_value resize (const dim_vector& dv) const
+    { return map.resize (dv); }
+
   bool is_defined (void) const { return true; }
 
   bool is_constant (void) const { return true; }
 
   bool is_map (void) const { return true; }
 
   Octave_map map_value (void) const { return map; }
 
