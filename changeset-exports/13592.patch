# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1312447407 -7200
#      Thu Aug 04 10:43:27 2011 +0200
# Node ID 83e83a70438330ea7404584c5c63bfa58c97b3da
# Parent  b2ee41559bffe610f9b9e87db1dc54d374b4bf75
IRC traffic in console.

diff --git a/gui/src/qirc/IRCClientImpl.cpp b/gui/src/qirc/IRCClientImpl.cpp
--- a/gui/src/qirc/IRCClientImpl.cpp
+++ b/gui/src/qirc/IRCClientImpl.cpp
@@ -315,16 +315,17 @@ void
 IRCClientImpl::handleUserQuit (const QString &nick, const QString &reason)
 {
   emit userQuit (nick, reason);
 }
 
 void
 IRCClientImpl::handleIncomingLine (const QString &line)
 {
+  emit debugMessage (QString (">>>recv: \"%1\"").arg (line));
   if (m_connected && !line.isEmpty())
     {
       IRCServerMessage ircEvent(line);
       if (ircEvent.isNumericValue () == true)
         {
           switch (ircEvent.numericValue ())
             {
               case IRCReply::Welcome:
@@ -341,17 +342,17 @@ IRCClientImpl::handleIncomingLine (const
               case IRCReply::MessageOfTheDay:
               case IRCReply::MessageOfTheDayEnd:
               case IRCError::NoMessageOfTheDay:
                 break;
               case IRCReply::NoTopic:
               case IRCReply::Topic:
                 break;
               case IRCReply::NameReply:
-
+                emit debugMessage (QString ("LINKME: (NameReply) \'%1\'").arg (ircEvent.parameter (3)));
                 //m_nickList = event->getParam (3).split (QRegExp ("\\s+"), QString::SkipEmptyParts);
                 break;
             }
         }
       else
         {
           QString command = ircEvent.command ();
           if (command == IRCCommand::Nick)
@@ -423,16 +424,17 @@ IRCClientImpl::handleIncomingLine (const
             }
         }
     }
 }
 
 void
 IRCClientImpl::sendLine (const QString &line)
 {
+  emit debugMessage (QString ("<<<send: \"%1\"").arg (line));
   if (m_connected)
     m_tcpSocket.write ((line + "\r\n").toStdString ().c_str ());
 }
 
 void
 IRCClientImpl::sendIRCCommand (const QString &command, const QStringList &arguments)
 {
   QString line = command;
