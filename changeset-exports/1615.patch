# HG changeset patch
# User jwe
# Date 815412138 0
#      Fri Nov 03 15:22:18 1995 +0000
# Node ID da72f1fae389ec746defe19a93fa632c1c4ff203
# Parent  1c39163722ceac9b8c409db582a9b124441528e3
[project @ 1995-11-03 15:22:18 by jwe]

diff --git a/src/pt-const.cc b/src/pt-const.cc
--- a/src/pt-const.cc
+++ b/src/pt-const.cc
@@ -498,59 +498,97 @@ TC_REP::tree_constant_rep (const ColumnV
 	  type_tag = matrix_constant;
 	}
     }
   orig_text = 0;
 }
 
 TC_REP::tree_constant_rep (const Complex& c)
 {
-  complex_scalar = new Complex (c);
-  type_tag = complex_scalar_constant;
+  if (::imag (c) == 0.0)
+    {
+      scalar = ::real (c);
+      type_tag = scalar_constant;
+    }
+  else
+    {
+      complex_scalar = new Complex (c);
+      type_tag = complex_scalar_constant;
+    }
   orig_text = 0;
 }
 
 TC_REP::tree_constant_rep (const ComplexMatrix& m)
 {
   if (m.rows () == 1 && m.columns () == 1)
     {
-      complex_scalar = new Complex (m.elem (0, 0));
-      type_tag = complex_scalar_constant;
+      Complex c = m.elem (0, 0);
+
+      if (::imag (c) == 0.0)
+	{
+	  scalar = ::real (c);
+	  type_tag = scalar_constant;
+	}
+      else
+	{
+	  complex_scalar = new Complex (c);
+	  type_tag = complex_scalar_constant;
+	}
     }
   else
     {
       complex_matrix = new ComplexMatrix (m);
       type_tag = complex_matrix_constant;
     }
   orig_text = 0;
 }
 
 TC_REP::tree_constant_rep (const ComplexDiagMatrix& d)
 {
   if (d.rows () == 1 && d.columns () == 1)
     {
-      complex_scalar = new Complex (d.elem (0, 0));
-      type_tag = complex_scalar_constant;
+      Complex c = d.elem (0, 0);
+
+      if (::imag (c) == 0.0)
+	{
+	  scalar = ::real (c);
+	  type_tag = scalar_constant;
+	}
+      else
+	{
+	  complex_scalar = new Complex (c);
+	  type_tag = complex_scalar_constant;
+	}
     }
   else
     {
       complex_matrix = new ComplexMatrix (d);
       type_tag = complex_matrix_constant;
     }
   orig_text = 0;
 }
 
 TC_REP::tree_constant_rep (const ComplexRowVector& v,
 			   int prefer_column_vector) 
 {
   int len = v.capacity ();
   if (len == 1)
     {
-      complex_scalar = new Complex (v.elem (0));
-      type_tag = complex_scalar_constant;
+      Complex c = v.elem (0);
+
+      if (::imag (c) == 0.0)
+	{
+	  scalar = ::real (c);
+	  type_tag = scalar_constant;
+	}
+      else
+	{
+	  complex_scalar = new Complex (c);
+	  type_tag = complex_scalar_constant;
+	}
     }
   else
     {
       int pcv = (prefer_column_vector < 0)
 	? user_pref.prefer_column_vectors
 	  : prefer_column_vector;
 
       if (pcv)
@@ -574,18 +612,28 @@ TC_REP::tree_constant_rep (const Complex
 }
 
 TC_REP::tree_constant_rep (const ComplexColumnVector& v, int
 			   prefer_column_vector)
 {
   int len = v.capacity ();
   if (len == 1)
     {
-      complex_scalar = new Complex (v.elem (0));
-      type_tag = complex_scalar_constant;
+      Complex c = v.elem (0);
+
+      if (::imag (c) == 0.0)
+	{
+	  scalar = ::real (c);
+	  type_tag = scalar_constant;
+	}
+      else
+	{
+	  complex_scalar = new Complex (c);
+	  type_tag = complex_scalar_constant;
+	}
     }
   else
     {
       int pcv = (prefer_column_vector < 0)
 	? user_pref.prefer_column_vectors
 	  : prefer_column_vector;
 
       if (pcv)
@@ -2832,21 +2880,16 @@ TC_REP::do_index (const Octave_object& a
 	      retval = tree_constant (charMatrix (char_matrix->value ()), 1);
 	      break;
 
 	    default:
 	      error ("can't index %s variables", type_as_string ());
 	      break;
 	    }
 	}
-
-// This is a fairly expensive operation.
-
-      if (originally_scalar_type)
-	maybe_mutate ();
     }
 
   return retval;
 }
 
 void
 TC_REP::maybe_widen (TC_REP::constant_type rhs_type)
 {
