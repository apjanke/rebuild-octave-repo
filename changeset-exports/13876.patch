# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1321525276 18000
#      Thu Nov 17 05:21:16 2011 -0500
# Node ID c1b072ef1fc729e67216449b06e9985d73e61323
# Parent  c1b754d935724b27e7705f67413fceeb5bcab490
avoid writing outside bounds of matrix

* graphics.cc (convert_text_position): Resize retval for each case.

diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -559,17 +559,17 @@ convert_position (const Matrix& pos, con
 static Matrix
 convert_text_position (const Matrix& pos, const text::properties& props,
                        const caseless_str& from_units,
                        const caseless_str& to_units)
 {
   graphics_object go = gh_manager::get_object (props.get___myhandle__ ());
   graphics_object ax = go.get_ancestor ("axes");
 
-  Matrix retval (1, pos.numel (), 0);
+  Matrix retval;
 
   if (ax.valid_object ())
     {
       const axes::properties& ax_props =
           dynamic_cast<const axes::properties&> (ax.get_properties ());
       graphics_xform ax_xform = ax_props.get_transform ();
       bool is_rectangle = (pos.numel () == 4);
       Matrix ax_bbox = ax_props.get_boundingbox (true),
@@ -578,25 +578,29 @@ convert_text_position (const Matrix& pos
       if (from_units.compare ("data"))
         {
           if (is_rectangle)
             {
               ColumnVector v1 = ax_xform.transform (pos(0), pos(1), 0),
                            v2 = ax_xform.transform (pos(0) + pos(2),
                                                     pos(1) + pos(3), 0);
 
+              retval.resize (1, 4);
+
               retval(0) = v1(0) - ax_bbox(0) + 1;
               retval(1) = ax_bbox(1) + ax_bbox(3) - v1(1) + 1;
               retval(2) = v2(0) - v1(0);
               retval(3) = v1(1) - v2(1);
             }
           else
             {
               ColumnVector v = ax_xform.transform (pos(0), pos(1), pos(2));
 
+              retval.resize (1, 3);
+
               retval(0) = v(0) - ax_bbox(0) + 1;
               retval(1) = ax_bbox(1) + ax_bbox(3) - v(1) + 1;
               retval(2) = 0;
             }
         }
       else
         retval = convert_position (pos, from_units, "pixels", ax_size);
 
@@ -606,26 +610,30 @@ convert_text_position (const Matrix& pos
             {
               if (is_rectangle)
                 {
                   ColumnVector v1 = ax_xform.untransform (retval(0) + ax_bbox(0) - 1,
                                                           ax_bbox(1) + ax_bbox(3)  - retval(1) + 1),
                                v2 = ax_xform.untransform (retval(0) + retval(2) + ax_bbox(0) - 1,
                                                           ax_bbox(1) + ax_bbox(3)  - (retval(1) + retval(3)) + 1);
 
+                  retval.resize (1, 4);
+
                   retval(0) = v1(0);
                   retval(1) = v1(1);
                   retval(2) = v2(0) - v1(0);
                   retval(3) = v2(1) - v1(1);
                 }
               else
                 {
                   ColumnVector v = ax_xform.untransform (retval(0) + ax_bbox(0) - 1,
                                                          ax_bbox(1) + ax_bbox(3)  - retval(1) + 1);
 
+                  retval.resize (1, 3);
+
                   retval(0) = v(0);
                   retval(1) = v(1);
                   retval(2) = v(2);
                 }
             }
           else
             retval = convert_position (retval, "pixels", to_units, ax_size);
         }
