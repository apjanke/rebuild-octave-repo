# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1215615645 14400
#      Wed Jul 09 11:00:45 2008 -0400
# Node ID b3becd212f3fe2fa1ea098351d9995d4d8fb86a6
# Parent  bcacdcc726f73a91a9a7cc11f63752b2b55dfa61
Draw markers above lines

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,15 @@
 2008-07-09  Michael Goffioul  <michael.goffioul@gmail.com>
 
+	* gl-render.cc (opengl_renderer::set_polygon_offset): Also enable
+	polygon offseting in GL_LINE mode.
+	(opengl_renderer::draw_marker): Offset markers foward instead of
+	backward (to draw them above lines).
+
 	* Makefile.in: new substituted variables GL_RENDER_SRC and
 	FLTK_BACKEND_SRC.
 
 	* gl-render.cc (vertex_data::vertex_data_rep::vertex_data(void),
 	vertex_data::vertex_data(void), vertex_data::vertex_data(...)):
 	initialize reference counting correctly.
 
 2008-07-09  John W. Eaton  <jwe@octave.org>
diff --git a/src/gl-render.cc b/src/gl-render.cc
--- a/src/gl-render.cc
+++ b/src/gl-render.cc
@@ -2513,19 +2513,23 @@ opengl_renderer::set_color (const Matrix
 
 void
 opengl_renderer::set_polygon_offset (bool on, double offset)
 {
   if (on)
     {
       glPolygonOffset (offset, offset);
       glEnable (GL_POLYGON_OFFSET_FILL);
+      glEnable (GL_POLYGON_OFFSET_LINE);
     }
   else
-    glDisable (GL_POLYGON_OFFSET_FILL);
+    {
+      glDisable (GL_POLYGON_OFFSET_FILL);
+      glDisable (GL_POLYGON_OFFSET_LINE);
+    }
 }
 
 void
 opengl_renderer::set_linewidth (float w)
 {
   glLineWidth (w);
 }
 
@@ -2643,19 +2647,29 @@ opengl_renderer::draw_marker (double x, 
   ColumnVector tmp = xform.transform (x, y, z, false);
   
   glLoadIdentity ();
   glTranslated (tmp(0), tmp(1), -tmp(2));
 
   if (fc.numel () > 0)
     {
       glColor3dv (fc.data ());
-      set_polygon_offset (true, 1.0);
+      set_polygon_offset (true, -1.0);
       glCallList (filled_marker_id);
+      if (lc.numel () > 0)
+	{
+	  glColor3dv (lc.data ());
+	  glPolygonMode (GL_FRONT_AND_BACK, GL_LINE);
+	  glEdgeFlag (GL_TRUE);
+	  set_polygon_offset (true, -2.0);
+	  glCallList (filled_marker_id);
+	  glPolygonMode (GL_FRONT_AND_BACK, GL_FILL);
+	}
       set_polygon_offset (false);
+      return;
     }
 
   if (lc.numel () > 0)
     {
       glColor3dv (lc.data ());
       glCallList (marker_id);
     }
 }
@@ -2759,16 +2773,17 @@ opengl_renderer::make_marker_list (const
       glEnd ();
       break;
     case '<':
       glBegin ((filled ? GL_POLYGON : GL_LINE_LOOP));
       glVertex2f (-sz/2 ,0    );
       glVertex2f (sz/2  ,-sz/2);
       glVertex2f (sz/2  ,sz/2 );
       glEnd ();
+      break;
     default:
       warning ("opengl_renderer: unsupported marker `%s'",
 	       marker.c_str ());
       break;
     }
 
   glEndList ();
 
