# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1289979643 18000
#      Wed Nov 17 02:40:43 2010 -0500
# Node ID 795c97ace02c1215a62e88ab812769fadf2f1d29
# Parent  8d4c57258523f290191539cc5e5420e656ab65e9
eliminate some possible memory leaks

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,18 @@
+2010-11-17  John W. Eaton  <jwe@octave.org>
+
+	* oct-parse.yy (parse_fcn_file): Protect and set global_command
+	to 0 before calling yyparse.
+	* toplev.cc (main_loop): Likewise.
+
+	* oct-parse.yy (eval_string): Set global_command to 0 after
+	protecting it and before calling yyparse.
+	* input.cc (get_debug_input): Likewise.
+
 2010-11-14  Michael Goffioul  <michael.goffioul@gmail.com>
 
 	* graphics.h.in (graphics_object::get_ancestor): New method.
 	* graphics.cc (graphics_object::get_ancestor): Likewise.
 	(convert_text_position, convert_cdata): Use it.
 	(xget_ancestor): Remove obsolete function.
 	* DLD_FUNCTIONS/fltk_backend.cc (plot_window::uimenu_update,
 	fltk_backend::update): Replace xget_ancestor with
diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -732,16 +732,18 @@ get_debug_input (const std::string& prom
         {
           reset_error_handler ();
 
           reset_parser ();
 
           // Save current value of global_command.
           frame.protect_var (global_command);
 
+          global_command = 0;
+
           // Do this with an unwind-protect cleanup function so that the
           // forced variables will be unmarked in the event of an interrupt.
           symbol_table::scope_id scope = symbol_table::top_scope ();
           frame.add_fcn (symbol_table::unmark_forced_variables, scope);
 
           // This is the same as yyparse in parse.y.
           int retval = octave_parse ();
 
diff --git a/src/oct-parse.yy b/src/oct-parse.yy
--- a/src/oct-parse.yy
+++ b/src/oct-parse.yy
@@ -541,19 +541,17 @@ make_statement (T *arg)
 
 input           : input1
                   {
                     global_command = $1;
                     promptflag = 1;
                     YYACCEPT;
                   }
                 | function_file
-                  {
-                    YYACCEPT;
-                  }
+                  { YYACCEPT; }
                 | simple_list parse_error
                   { ABORT_PARSE; }
                 | parse_error
                   { ABORT_PARSE; }
                 ;
 
 input1          : '\n'
                   { $$ = 0; }
@@ -3571,18 +3569,24 @@ parse_fcn_file (const std::string& ff, c
 
           if (reading_script_file)
             prep_lexer_for_script_file ();
           else
             prep_lexer_for_function_file ();
 
           lexer_flags.parsing_class_method = ! dispatch_type.empty ();
 
+          frame.protect_var (global_command);
+
+          global_command = 0;
+
           int status = yyparse ();
 
+          delete global_command;
+
           fcn_ptr = primary_fcn_ptr;
 
           if (reading_fcn_file && endfunction_found && max_function_depth > 1)
             warning_with_id ("Octave:nested-functions-coerced",
                              "nested functions are coerced into subfunctions "
                              "in file %s", ff.c_str ());
 
           if (status != 0)
@@ -4313,16 +4317,18 @@ eval_string (const std::string& s, bool 
   switch_to_buffer (new_buf);
 
   do
     {
       reset_parser ();
 
       frame.protect_var (global_command);
 
+      global_command = 0;
+
       // Do this with an unwind-protect cleanup function so that the
       // forced variables will be unmarked in the event of an
       // interrupt.
       symbol_table::scope_id scope = symbol_table::top_scope ();
       frame.add_fcn (symbol_table::unmark_forced_variables, scope);
 
       parse_status = yyparse ();
 
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -555,16 +555,20 @@ main_loop (void)
             tree_evaluator::reset_debug_state ();
 
           // Do this with an unwind-protect cleanup function so that
           // the forced variables will be unmarked in the event of an
           // interrupt.
           symbol_table::scope_id scope = symbol_table::top_scope ();
           frame.add_fcn (symbol_table::unmark_forced_variables, scope);
 
+          frame.protect_var (global_command);
+
+          global_command = 0;
+
           // This is the same as yyparse in parse.y.
           retval = octave_parse ();
 
           if (retval == 0)
             {
               if (global_command)
                 {
                   global_command->accept (*current_evaluator);
