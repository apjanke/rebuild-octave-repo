# HG changeset patch
# User Rik <rik@octave.org>
# Date 1383195314 25200
#      Wed Oct 30 21:55:14 2013 -0700
# Node ID fffd0c0ca2dc99d8ebc0ecb43b923104522b4dc7
# Parent  ef4fc092c86b8b60660e03edf4cf2e65eee875b0
maint: A few Octave coding convention tweaks

* libinterp/corefcn/rand.cc: Use space before parentheses in %!test function call.

* liboctave/array/CSparse.cc: Change "found [...]" to "found[...]".

* liboctave/array/dSparse.cc: Change "found [...]" to "found[...]".
Use space before parentheses in %!test function call.

diff --git a/libinterp/corefcn/rand.cc b/libinterp/corefcn/rand.cc
--- a/libinterp/corefcn/rand.cc
+++ b/libinterp/corefcn/rand.cc
@@ -1240,17 +1240,17 @@ using std::unordered_map;
   return retval;
 }
 
 /*
 %!assert (sort (randperm (20)), 1:20)
 %!assert (length (randperm (20,10)), 10)
 
 ## Test biggish N (bug #39378)
-%!assert (length (randperm(30000^2, 100000)), 100000);
+%!assert (length (randperm (30000^2, 100000)), 100000)
 
 %!test
 %! rand ("seed", 0);
 %! for i = 1:100
 %!   p = randperm (305, 30);
 %!   assert (length (unique (p)), 30);
 %! endfor
 */
diff --git a/liboctave/array/CSparse.cc b/liboctave/array/CSparse.cc
--- a/liboctave/array/CSparse.cc
+++ b/liboctave/array/CSparse.cc
@@ -340,26 +340,26 @@ SparseComplexMatrix::max (Array<octave_i
       idx_arg.resize (dim_vector (nr, nc == 0 ? 0 : 1), 0);
 
       if (nr == 0 || nc == 0 || dim >= dv.length ())
         return SparseComplexMatrix (nr, nc == 0 ? 0 : 1);
 
       OCTAVE_LOCAL_BUFFER (octave_idx_type, found, nr);
 
       for (octave_idx_type i = 0; i < nr; i++)
-        found [i] = 0;
+        found[i] = 0;
 
       for (octave_idx_type j = 0; j < nc; j++)
         for (octave_idx_type i = cidx(j); i < cidx(j+1); i++)
-          if (found [ridx (i)] == -j)
-            found [ridx (i)] = -j - 1;
+          if (found[ridx (i)] == -j)
+            found[ridx (i)] = -j - 1;
 
       for (octave_idx_type i = 0; i < nr; i++)
-        if (found [i] > -nc && found [i] < 0)
-          idx_arg.elem (i) = -found [i];
+        if (found[i] > -nc && found[i] < 0)
+          idx_arg.elem (i) = -found[i];
 
       for (octave_idx_type j = 0; j < nc; j++)
         {
           for (octave_idx_type i = cidx (j); i < cidx (j+1); i++)
             {
               octave_idx_type ir = ridx (i);
               octave_idx_type ix = idx_arg.elem (ir);
               Complex tmp = data (i);
@@ -497,26 +497,26 @@ SparseComplexMatrix::min (Array<octave_i
       idx_arg.resize (dim_vector (nr, nc == 0 ? 0 : 1), 0);
 
       if (nr == 0 || nc == 0 || dim >= dv.length ())
         return SparseComplexMatrix (nr, nc == 0 ? 0 : 1);
 
       OCTAVE_LOCAL_BUFFER (octave_idx_type, found, nr);
 
       for (octave_idx_type i = 0; i < nr; i++)
-        found [i] = 0;
+        found[i] = 0;
 
       for (octave_idx_type j = 0; j < nc; j++)
         for (octave_idx_type i = cidx(j); i < cidx(j+1); i++)
-          if (found [ridx (i)] == -j)
-            found [ridx (i)] = -j - 1;
+          if (found[ridx (i)] == -j)
+            found[ridx (i)] = -j - 1;
 
       for (octave_idx_type i = 0; i < nr; i++)
-        if (found [i] > -nc && found [i] < 0)
-          idx_arg.elem (i) = -found [i];
+        if (found[i] > -nc && found[i] < 0)
+          idx_arg.elem (i) = -found[i];
 
       for (octave_idx_type j = 0; j < nc; j++)
         {
           for (octave_idx_type i = cidx (j); i < cidx (j+1); i++)
             {
               octave_idx_type ir = ridx (i);
               octave_idx_type ix = idx_arg.elem (ir);
               Complex tmp = data (i);
diff --git a/liboctave/array/dSparse.cc b/liboctave/array/dSparse.cc
--- a/liboctave/array/dSparse.cc
+++ b/liboctave/array/dSparse.cc
@@ -352,26 +352,26 @@ SparseMatrix::max (Array<octave_idx_type
       idx_arg.resize (dim_vector (nr, nc == 0 ? 0 : 1), 0);
 
       if (nr == 0 || nc == 0 || dim >= dv.length ())
         return SparseMatrix (nr, nc == 0 ? 0 : 1);
 
       OCTAVE_LOCAL_BUFFER (octave_idx_type, found, nr);
 
       for (octave_idx_type i = 0; i < nr; i++)
-        found [i] = 0;
+        found[i] = 0;
 
       for (octave_idx_type j = 0; j < nc; j++)
         for (octave_idx_type i = cidx(j); i < cidx(j+1); i++)
-          if (found [ridx (i)] == -j)
-            found [ridx (i)] = -j - 1;
+          if (found[ridx (i)] == -j)
+            found[ridx (i)] = -j - 1;
 
       for (octave_idx_type i = 0; i < nr; i++)
-        if (found [i] > -nc && found [i] < 0)
-          idx_arg.elem (i) = -found [i];
+        if (found[i] > -nc && found[i] < 0)
+          idx_arg.elem (i) = -found[i];
 
       for (octave_idx_type j = 0; j < nc; j++)
         {
           for (octave_idx_type i = cidx (j); i < cidx (j+1); i++)
             {
               octave_idx_type ir = ridx (i);
               octave_idx_type ix = idx_arg.elem (ir);
               double tmp = data (i);
@@ -503,26 +503,26 @@ SparseMatrix::min (Array<octave_idx_type
       idx_arg.resize (dim_vector (nr, nc == 0 ? 0 : 1), 0);
 
       if (nr == 0 || nc == 0 || dim >= dv.length ())
         return SparseMatrix (nr, nc == 0 ? 0 : 1);
 
       OCTAVE_LOCAL_BUFFER (octave_idx_type, found, nr);
 
       for (octave_idx_type i = 0; i < nr; i++)
-        found [i] = 0;
+        found[i] = 0;
 
       for (octave_idx_type j = 0; j < nc; j++)
         for (octave_idx_type i = cidx(j); i < cidx(j+1); i++)
-          if (found [ridx (i)] == -j)
-            found [ridx (i)] = -j - 1;
+          if (found[ridx (i)] == -j)
+            found[ridx (i)] = -j - 1;
 
       for (octave_idx_type i = 0; i < nr; i++)
-        if (found [i] > -nc && found [i] < 0)
-          idx_arg.elem (i) = -found [i];
+        if (found[i] > -nc && found[i] < 0)
+          idx_arg.elem (i) = -found[i];
 
       for (octave_idx_type j = 0; j < nc; j++)
         {
           for (octave_idx_type i = cidx (j); i < cidx (j+1); i++)
             {
               octave_idx_type ir = ridx (i);
               octave_idx_type ix = idx_arg.elem (ir);
               double tmp = data (i);
@@ -672,18 +672,18 @@ imag (const SparseComplexMatrix& a)
     }
 
   r.maybe_compress (true);
   return r;
 }
 
 /*
 
-%!assert(nnz(real(sparse([1i,1]))),1)
-%!assert(nnz(real(sparse([1i,1]))),1)
+%!assert (nnz (real (sparse ([1i,1]))), 1)
+%!assert (nnz (real (sparse ([1i,1]))), 1)
 
 */
 
 SparseMatrix
 atan2 (const double& x, const SparseMatrix& y)
 {
   octave_idx_type nr = y.rows ();
   octave_idx_type nc = y.cols ();
