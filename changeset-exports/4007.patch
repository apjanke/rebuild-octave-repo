# HG changeset patch
# User jwe
# Date 1027648052 0
#      Fri Jul 26 01:47:32 2002 +0000
# Node ID 31448e09d38ea74dcafe8a26f3da7e9bd70b7d84
# Parent  efac4b97bb09bc32d8de8c5b8ea2db04a4480da3
[project @ 2002-07-26 01:47:32 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,16 @@
+2002-07-25  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* plot/loglogerr.m: Likewise.
+
+	* plot/semilogyerr.m: Likewise.
+
+	* plot/semilogxerr.m: Use varargin instead of old style varargs.
+
 2002-07-25  Teemu Ikonen <tpikonen@pcu.helsinki.fi>
 
 	* plot/__errcomm__.m: New file.  Common functionality for error plots.
 	* plot/loglogerr.m: New file.  Double logarithm plots with errorbars.
 	* plot/semilogxerr.m: New file.  Semilogarithm plots with errorbars.
 	* plot/semilogyerr.m: New file.  Semilogarithm plots with errorbars
 
 	* plot/errorbar.m: Use __errcomm__.m.
diff --git a/scripts/plot/__errplot__.m b/scripts/plot/__errplot__.m
--- a/scripts/plot/__errplot__.m
+++ b/scripts/plot/__errplot__.m
@@ -1,9 +1,9 @@
-## Copyright (C) 2000-2002 Teemu Ikonen
+## Copyright (C) 2000, 2001, 2002 Teemu Ikonen
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 2, or (at your option)
 ## any later version.
 ##
@@ -15,17 +15,17 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} __errplot__ (@var{args})
 ## Really plot errorbar plots. User interface in function errorbar.
-## 
+##
 ## @example
 ## __errplot__ (@var{arg1}, @var{arg2}, ..., @var{fmt})
 ## @end example
 ##
 ## @end deftypefn
 ## @seealso{semilogx, semilogy, loglog, polar, mesh, contour, __pltopt__
 ## bar, stairs, errorbar, gplot, gsplot, replot, xlabel, ylabel, and title}
 
@@ -47,22 +47,22 @@ function __errplot__ (varargin)
     a = varargin{k++};
     if (! isstr (a))
       ndata++;
       eval (sprintf ("arg%d = a;", ndata));
     else
       fstr = a;
     endif
   endwhile
-  
+
   fmt = __pltopt__ ("__errplot__", fstr);
-  
+
   nplots = size (arg1, 2);
   len = size (arg1, 1);
-  
+
   if (ndata == 2)
     for i = 1:nplots,
       tmp = [(1:len)', arg1(:,i), arg2(:,i)];
       cmd = sprintf ("gplot tmp %s", fmt(min(i, rows(fmt)), :) );
       eval (cmd);
     endfor
   elseif (ndata == 3)
     for i = 1:nplots,
@@ -89,27 +89,23 @@ function __errplot__ (varargin)
       eval (cmd);
     endfor
   elseif (ndata == 6)
     for i = 1:nplots,
       tstr = "tmp = [arg1(:,i), arg2(:,i), arg1(:,i)-arg3(:,i), arg1(:,i)+arg4(:,i), arg2(:,i)-arg5(:,i), arg2(:,i)+arg6(:,i)];";
       eval (tstr);
       cmd = sprintf ("gplot tmp %s", fmt(min(i, rows(fmt)), :) );
       eval (cmd);
-    endfor    
-  else 
+    endfor
+  else
     for i = 1:nplots,
       tstr = "tmp = [arg1(:,i)";
       for j = 2:ndata,
        tstr = [tstr, sprintf(", arg%d(:,i)", j)];
       endfor
       tstr = [tstr, "];"];
       eval (tstr);
       cmd = sprintf ("gplot tmp %s", fmt(min(i, rows(fmt)), :) );
       eval (cmd);
     endfor
   endif
-    
-endfunction    
-    
 
-
-
+endfunction
diff --git a/scripts/plot/__pltopt1__.m b/scripts/plot/__pltopt1__.m
--- a/scripts/plot/__pltopt1__.m
+++ b/scripts/plot/__pltopt1__.m
@@ -67,19 +67,19 @@ function fmt = __pltopt1__ (caller, opt)
     error ("__pltopt1__: argument must be a string");
   endif
 
   while (more_opts)
 
     ## First get next char.
 
     if (max (size (opt)) > 1)
-#      [char, opt] = sscanf (opt, "%c %s", "C");
-       char = opt(1);
-       opt = opt(2:length(opt));
+      ## [char, opt] = sscanf (opt, "%c %s", "C");
+      char = opt(1);
+      opt = opt(2:length(opt));
     else
       char = opt;
       more_opts = 0;
     endif
 
     ## Now set flags based on char.
 
     if (strcmp (char, "-"))
@@ -101,17 +101,17 @@ function fmt = __pltopt1__ (caller, opt)
       set_points = 1;
     elseif (strcmp (char, "^"))
       set_impulses = 1;
     elseif (strcmp (char, "L"))
       set_steps = 1;
     elseif (strcmp (char, "~"))
       set_yerrbars = 1;
     elseif (strcmp (char, ">"))
-      set_xerrbars = 1;  
+      set_xerrbars = 1;
     elseif (strcmp (char, "#"))
       set_boxes = 1;
     elseif (strcmp (char, "0") || strcmp (char, "1") ...
             || strcmp (char, "2") || strcmp (char, "3") ...
             || strcmp (char, "4") || strcmp (char, "5") ...
             || strcmp (char, "6") || strcmp (char, "7") ...
             || strcmp (char, "8") || strcmp (char, "9"))
       if (set_color)
@@ -222,21 +222,21 @@ function fmt = __pltopt1__ (caller, opt)
     else
         fmt = strcat (fmt, " ", YERRORBARS);
     endif
   elseif (set_xerrbars)
     fmt = strcat (fmt, " ", XERRORBARS);
   endif
 
   if (strcmp (fmt, WITH))
-      if(strcmp (caller, "__errplot"))
-          fmt = strcat (fmt, " ", YERRORBARS);
-      else
-          fmt = strcat (fmt, " ", LINES);
-      endif      
+    if (strcmp (caller, "__errplot__"))
+      fmt = strcat (fmt, " ", YERRORBARS);
+    else
+      fmt = strcat (fmt, " ", LINES);
+    endif
   endif
 
   if (set_color)
     fmt = strcat (fmt, " ", color);
     if (set_symbol)
       fmt = strcat (fmt, " ", symbol);
     endif
   elseif (set_symbol)
diff --git a/scripts/plot/errorbar.m b/scripts/plot/errorbar.m
--- a/scripts/plot/errorbar.m
+++ b/scripts/plot/errorbar.m
@@ -1,9 +1,9 @@
-## Copyright (C) 2000-2002 Teemu Ikonen
+## Copyright (C) 2000, 2001, 2002 Teemu Ikonen
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 2, or (at your option)
 ## any later version.
 ##
@@ -114,12 +114,14 @@ function errorbar (varargin)
 
   if (nargin < 2)
     usage ("errorbar (...)");
   endif
 
   gset nologscale x;
   gset nologscale y;
   gset nopolar;
-    
-  __errcomm__ ("errorbar", varargin);
+
+  length (varargin)
+
+  __errcomm__ ("errorbar", varargin{:});
 
 endfunction
