# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1454450771 18000
#      Tue Feb 02 17:06:11 2016 -0500
# Node ID 3be6a07e8bad31ef1bb86718b487055976fbf46a
# Parent  a10f60e13243c231e07ae2970bbe4781331cca56
# Parent  5ecdcc6320d904a388bb8e69238bdb771d4e90fa
maint: Periodic merge of stable to default.

diff --git a/scripts/general/cart2pol.m b/scripts/general/cart2pol.m
--- a/scripts/general/cart2pol.m
+++ b/scripts/general/cart2pol.m
@@ -1,9 +1,9 @@
-## Copyright (C) 2000-2015 Kai Habel
+## Copyright (C) 2000-2016 Kai Habel
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 3 of the License, or (at
 ## your option) any later version.
 ##
@@ -44,36 +44,36 @@
 
 function [theta, r, z] = cart2pol (x, y, z = [])
 
   if (nargin < 1 || nargin > 3)
     print_usage ();
   endif
 
   if (nargin == 1)
-    if (ismatrix (x) && (columns (x) == 2 || columns (x) == 3))
-      if (columns (x) == 3)
-        z = x(:,3);
-      endif
-      y = x(:,2);
-      x = x(:,1);
-    else
+    if (! (isnumeric (x) && ismatrix (x)
+           && (columns (x) == 2 || columns (x) == 3)))
       error ("cart2pol: matrix input must have 2 or 3 columns [X, Y (, Z)]");
     endif
+    if (columns (x) == 3)
+      z = x(:,3);
+    endif
+    y = x(:,2);
+    x = x(:,1);
   elseif (nargin == 2)
-    if (! ((ismatrix (x) && ismatrix (y))
+    if (! ((isnumeric (x) && isnumeric (y))
             && (size_equal (x, y) || isscalar (x) || isscalar (y))))
-      error ("cart2pol: arguments must be matrices of same size, or scalar");
+      error ("cart2pol: X, Y must be numeric arrays of the same size, or scalar");
     endif
   elseif (nargin == 3)
-    if (! ((ismatrix (x) && ismatrix (y) && ismatrix (z))
+    if (! ((isnumeric (x) && isnumeric (y) && isnumeric (z))
             && (size_equal (x, y) || isscalar (x) || isscalar (y))
             && (size_equal (x, z) || isscalar (x) || isscalar (z))
             && (size_equal (y, z) || isscalar (y) || isscalar (z))))
-      error ("cart2pol: arguments must be matrices of same size, or scalar");
+      error ("cart2pol: X, Y, Z must be numeric arrays of the same size, or scalar");
     endif
   endif
 
   theta = atan2 (y, x);
   r = sqrt (x .^ 2 + y .^ 2);
 
   if (nargout <= 1)
     theta = [theta(:), r(:), z(:)];
@@ -137,8 +137,46 @@ endfunction
 %! P = [0, 0; pi/4, sqrt(2); pi/4, 2*sqrt(2)];
 %! assert (cart2pol (C), P, sqrt (eps));
 
 %!test
 %! C = [0, 0, 0; 1, 1, 1; 2, 2, 2];
 %! P = [0, 0, 0; pi/4, sqrt(2), 1; pi/4, 2*sqrt(2), 2];
 %! assert (cart2pol (C), P, sqrt (eps));
 
+%!test
+%! x = zeros (1, 1, 1, 2);
+%! x(1, 1, 1, 2) = sqrt (2);
+%! y = x;
+%! [t, r] = cart2pol (x, y);
+%! T = zeros (1, 1, 1, 2);
+%! T(1, 1, 1, 2) = pi/4;
+%! R = zeros (1, 1, 1, 2);
+%! R(1, 1, 1, 2) = 2;
+%! assert (t, T, eps);
+%! assert (r, R, eps);
+
+%!test
+%! [x, y, Z] = meshgrid ([0, 1], [0, 1], [0, 1]);
+%! [t, r, z] = cart2pol (x, y, Z);
+%! T(:, :, 1) = [0, 0; pi/2, pi/4];
+%! T(:, :, 2) = T(:, :, 1);
+%! R = sqrt (x.^2 + y.^2);
+%! assert (t, T, eps);
+%! assert (r, R, eps);
+%! assert (z, Z);
+
+## Test input validation
+%!error cart2pol ()
+%!error cart2pol (1,2,3,4)
+%!error <matrix input must have 2 or 3 columns> cart2pol ({1,2,3})
+%!error <matrix input must have 2 or 3 columns> cart2pol (ones (3,3,2))
+%!error <matrix input must have 2 or 3 columns> cart2pol ([1])
+%!error <matrix input must have 2 or 3 columns> cart2pol ([1,2,3,4])
+%!error <numeric arrays of the same size> cart2pol ({1,2,3}, [1,2,3])
+%!error <numeric arrays of the same size> cart2pol ([1,2,3], {1,2,3})
+%!error <numeric arrays of the same size> cart2pol (ones (3,3,3), ones (3,2,3))
+%!error <numeric arrays of the same size> cart2pol ({1,2,3}, [1,2,3], [1,2,3])
+%!error <numeric arrays of the same size> cart2pol ([1,2,3], {1,2,3}, [1,2,3])
+%!error <numeric arrays of the same size> cart2pol ([1,2,3], [1,2,3], {1,2,3})
+%!error <numeric arrays of the same size> cart2pol (ones (3,3,3), 1, ones (3,2,3))
+%!error <numeric arrays of the same size> cart2pol (ones (3,3,3), ones (3,2,3), 1)
+
diff --git a/scripts/general/cart2sph.m b/scripts/general/cart2sph.m
--- a/scripts/general/cart2sph.m
+++ b/scripts/general/cart2sph.m
@@ -1,9 +1,9 @@
-## Copyright (C) 2000-2015 Kai Habel
+## Copyright (C) 2000-2016 Kai Habel
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 3 of the License, or (at
 ## your option) any later version.
 ##
@@ -43,29 +43,28 @@
 
 function [theta, phi, r] = cart2sph (x, y, z)
 
   if (nargin != 1 && nargin != 3)
     print_usage ();
   endif
 
   if (nargin == 1)
-    if (ismatrix (x) && columns (x) == 3)
-      z = x(:,3);
-      y = x(:,2);
-      x = x(:,1);
-    else
+    if (! (isnumeric (x) && ismatrix (x) && columns (x) == 3))
       error ("cart2sph: matrix input must have 3 columns [X, Y, Z]");
     endif
-  elseif (nargin == 3)
-    if (! ((ismatrix (x) && ismatrix (y) && ismatrix (z))
+    z = x(:,3);
+    y = x(:,2);
+    x = x(:,1);
+  else
+    if (! ((isnumeric (x) && isnumeric (y) && isnumeric (z))
             && (size_equal (x, y) || isscalar (x) || isscalar (y))
             && (size_equal (x, z) || isscalar (x) || isscalar (z))
             && (size_equal (y, z) || isscalar (y) || isscalar (z))))
-      error ("cart2sph: X, Y, Z must be matrices of the same size, or scalar");
+      error ("cart2sph: X, Y, Z must be numeric arrays of the same size, or scalar");
     endif
   endif
 
   theta = atan2 (y, x);
   phi = atan2 (z, sqrt (x .^ 2 + y .^ 2));
   r = sqrt (x .^ 2 + y .^ 2 + z .^ 2);
 
   if (nargout <= 1)
@@ -111,8 +110,32 @@ endfunction
 %! assert (p, [0, 0, 0]);
 %! assert (r, [0, 1, 2] * sqrt (2));
 
 %!test
 %! C = [0, 0, 0; 1, 0, 1; 2, 0, 2];
 %! S = [0, 0, 0; 0, pi/4, sqrt(2); 0, pi/4, 2*sqrt(2)];
 %! assert (cart2sph (C), S, eps);
 
+%!test
+%! [x, y, z] = meshgrid ([0, 1], [0, 1], [0, 1]);
+%! [t, p, r] = cart2sph (x, y, z);
+%! T(:, :, 1) = [0, 0; pi/2, pi/4];
+%! T(:, :, 2) = T(:, :, 1);
+%! P(:, :, 1) = zeros (2, 2);
+%! P(:, :, 2) = [pi/2, pi/4; pi/4, acos(sqrt(2/3))];
+%! R = sqrt (x .^ 2 + y .^ 2 + z .^ 2);
+%! assert (t, T, eps);
+%! assert (p, P, eps);
+%! assert (r, R, eps);
+
+## Test input validation
+%!error cart2sph ()
+%!error cart2sph (1,2)
+%!error cart2sph (1,2,3,4)
+%!error <matrix input must have 3 columns> cart2sph ({1,2,3})
+%!error <matrix input must have 3 columns> cart2sph (ones (3,3,2))
+%!error <matrix input must have 3 columns> cart2sph ([1,2,3,4])
+%!error <numeric arrays of the same size> cart2sph ({1,2,3}, [1,2,3], [1,2,3])
+%!error <numeric arrays of the same size> cart2sph ([1,2,3], {1,2,3}, [1,2,3])
+%!error <numeric arrays of the same size> cart2sph ([1,2,3], [1,2,3], {1,2,3})
+%!error <numeric arrays of the same size> cart2sph (ones (3,3,3), 1, ones (3,2,3))
+%!error <numeric arrays of the same size> cart2sph (ones (3,3,3), ones (3,2,3), 1)
diff --git a/scripts/general/interp2.m b/scripts/general/interp2.m
--- a/scripts/general/interp2.m
+++ b/scripts/general/interp2.m
@@ -1,9 +1,9 @@
-## Copyright (C) 2000-2015 Kai Habel
+## Copyright (C) 2000-2016 Kai Habel
 ## Copyright (C) 2009 Jaroslav Hajek
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 3 of the License, or (at
 ## your option) any later version.
@@ -100,17 +100,17 @@ function ZI = interp2 (varargin)
     method = varargin{end};
     nargs -= 1;
   endif
   if (method(1) == "*")
     warning ("interp2: ignoring unsupported '*' flag to METHOD");
     method(1) = [];
   endif
   method = validatestring (method, ...
-    {"nearest", "linear", "pchip", "cubic", "spline"});
+                           {"nearest", "linear", "pchip", "cubic", "spline"});
 
   ## Read numeric input
   switch (nargs)
     case 1
       Z = varargin{1};
       n = 1;
     case 2
       [Z, n] = deal (varargin{1:nargs});
@@ -118,17 +118,17 @@ function ZI = interp2 (varargin)
       [Z, XI, YI] = deal (varargin{1:nargs});
     case 5
       [X, Y, Z, XI, YI] = deal (varargin{1:nargs});
     otherwise
       print_usage ();
   endswitch
 
   ## Type checking
-  if (! isnumeric (Z) || isscalar (Z) || ! ismatrix (Z) || ndims (Z) != 2)
+  if (! isnumeric (Z) || isscalar (Z) || ! ismatrix (Z))
     error ("interp2: Z must be a 2-D matrix");
   endif
   if (! isempty (n) && ! (isscalar (n) && n >= 0 && n == fix (n)))
     error ("interp2: N must be an integer >= 0");
   endif
 
   ## Define X, Y, XI, YI if needed
   [zr, zc] = size (Z);
@@ -558,18 +558,18 @@ endfunction
 %!assert (interp2 (z, [2 3 1], [2 2 2]', "cubic"), repmat ([5, 7, 3], [3, 1]), 10 * tol)
 %!assert (interp2 (z, [2 3 1], [2 2 2]', "spline"), repmat ([5, 7, 3], [3, 1]), tol)
 %!assert (interp2 (z, [2 3 1], [2 2 2], "linear"), [5 7 3], tol)
 %!assert (interp2 (z, [2 3 1], [2 2 2], "pchip"), [5 7 3], tol)
 %!assert (interp2 (z, [2 3 1], [2 2 2], "cubic"), [5 7 3], 10 * tol)
 %!assert (interp2 (z, [2 3 1], [2 2 2], "spline"), [5 7 3], tol)
 
 ## Test input validation
-%!error interp2 (1, 1, 1, 1, 1, 2)    #only 5 numeric inputs
-%!error interp2 (1, 1, 1, 1, 1, 2, 2) #only 5 numeric inputs
+%!error interp2 (1, 1, 1, 1, 1, 2)    # only 5 numeric inputs
+%!error interp2 (1, 1, 1, 1, 1, 2, 2) # only 5 numeric inputs
 %!error <Z must be a 2-D matrix> interp2 ({1})
 %!error <Z must be a 2-D matrix> interp2 (1,1,1)
 %!error <Z must be a 2-D matrix> interp2 (ones (2,2,2))
 %!error <N must be an integer .= 0> interp2 (ones (2), ones (2))
 %!error <N must be an integer .= 0> interp2 (ones (2), -1)
 %!error <N must be an integer .= 0> interp2 (ones (2), 1.5)
 %!warning <ignoring unsupported '\*' flag> interp2 (rand (3,3), 1, "*linear");
 %!error <EXTRAP must be a numeric scalar> interp2 (1, 1, 1, 1, 1, 'linear', {1})
diff --git a/scripts/general/pol2cart.m b/scripts/general/pol2cart.m
--- a/scripts/general/pol2cart.m
+++ b/scripts/general/pol2cart.m
@@ -1,9 +1,9 @@
-## Copyright (C) 2000-2015 Kai Habel
+## Copyright (C) 2000-2016 Kai Habel
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 3 of the License, or (at
 ## your option) any later version.
 ##
@@ -44,36 +44,36 @@
 
 function [x, y, z] = pol2cart (theta, r, z = [])
 
   if (nargin < 1 || nargin > 3)
     print_usage ();
   endif
 
   if (nargin == 1)
-    if (ismatrix (theta) && (columns (theta) == 2 || columns (theta) == 3))
-      if (columns (theta) == 3)
-        z = theta(:,3);
-      endif
-      r = theta(:,2);
-      theta = theta(:,1);
-    else
+    if (! (isnumeric (theta) && ismatrix (theta)
+           && (columns (theta) == 2 || columns (theta) == 3)))
       error ("pol2cart: matrix input must have 2 or 3 columns [THETA, R (, Z)]");
     endif
+    if (columns (theta) == 3)
+      z = theta(:,3);
+    endif
+    r = theta(:,2);
+    theta = theta(:,1);
   elseif (nargin == 2)
-    if (! ((ismatrix (theta) && ismatrix (r))
+    if (! ((isnumeric (theta) && isnumeric (r))
             && (size_equal (theta, r) || isscalar (theta) || isscalar (r))))
-      error ("pol2cart: arguments must be matrices of same size, or scalar");
+      error ("pol2cart: THETA, R must be numeric arrays of the same size, or scalar");
     endif
   elseif (nargin == 3)
-    if (! ((ismatrix (theta) && ismatrix (r) && ismatrix (z))
+    if (! ((isnumeric (theta) && isnumeric (r) && isnumeric (z))
             && (size_equal (theta, r) || isscalar (theta) || isscalar (r))
             && (size_equal (theta, z) || isscalar (theta) || isscalar (z))
             && (size_equal (r, z) || isscalar (r) || isscalar (z))))
-      error ("pol2cart: arguments must be matrices of same size, or scalar");
+      error ("pol2cart: THETA, R, Z must be numeric arrays of the same size, or scalar");
     endif
   endif
 
   x = r .* cos (theta);
   y = r .* sin (theta);
 
   if (nargout <= 1)
     x = [x(:), y(:), z(:)];
@@ -137,8 +137,48 @@ endfunction
 %! C = [0, 0; 1, 1; 2, 2];
 %! assert (pol2cart (P), C, sqrt (eps));
 
 %!test
 %! P = [0, 0, 0; pi/4, sqrt(2), 1; pi/4, 2*sqrt(2), 2];
 %! C = [0, 0, 0; 1, 1, 1; 2, 2, 2];
 %! assert (pol2cart (P), C, sqrt (eps));
 
+%!test
+%! r = ones (1, 1, 1, 2);
+%! r(1, 1, 1, 2) = 2;
+%! t = pi/2 * r;
+%! [x, y] = pol2cart (t, r);
+%! X = zeros (1, 1, 1, 2);
+%! X(1, 1, 1, 2) = -2;
+%! Y = zeros (1, 1, 1, 2);
+%! Y(1, 1, 1, 1) = 1;
+%! assert (x, X, 2*eps);
+%! assert (y, Y, 2*eps);
+
+%!test
+%! [t, r, Z] = meshgrid ([0, pi/2], [1, 2], [0, 1]);
+%! [x, y, z] = pol2cart (t, r, Z);
+%! X = zeros(2, 2, 2);
+%! X(:, 1, 1) = [1; 2];
+%! X(:, 1, 2) = [1; 2];
+%! Y = zeros(2, 2, 2);
+%! Y(:, 2, 1) = [1; 2];
+%! Y(:, 2, 2) = [1; 2];
+%! assert (x, X, eps);
+%! assert (y, Y, eps);
+%! assert (z, Z);
+
+## Test input validation
+%!error pol2cart ()
+%!error pol2cart (1,2,3,4)
+%!error <matrix input must have 2 or 3 columns> pol2cart ({1,2,3})
+%!error <matrix input must have 2 or 3 columns> pol2cart (ones (3,3,2))
+%!error <matrix input must have 2 or 3 columns> pol2cart ([1])
+%!error <matrix input must have 2 or 3 columns> pol2cart ([1,2,3,4])
+%!error <numeric arrays of the same size> pol2cart ({1,2,3}, [1,2,3])
+%!error <numeric arrays of the same size> pol2cart ([1,2,3], {1,2,3})
+%!error <numeric arrays of the same size> pol2cart (ones (3,3,3), ones (3,2,3))
+%!error <numeric arrays of the same size> pol2cart ({1,2,3}, [1,2,3], [1,2,3])
+%!error <numeric arrays of the same size> pol2cart ([1,2,3], {1,2,3}, [1,2,3])
+%!error <numeric arrays of the same size> pol2cart ([1,2,3], [1,2,3], {1,2,3})
+%!error <numeric arrays of the same size> pol2cart (ones (3,3,3), 1, ones (3,2,3))
+%!error <numeric arrays of the same size> pol2cart (ones (3,3,3), ones (3,2,3), 1)
diff --git a/scripts/general/sph2cart.m b/scripts/general/sph2cart.m
--- a/scripts/general/sph2cart.m
+++ b/scripts/general/sph2cart.m
@@ -1,9 +1,9 @@
-## Copyright (C) 2000-2015 Kai Habel
+## Copyright (C) 2000-2016 Kai Habel
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 3 of the License, or (at
 ## your option) any later version.
 ##
@@ -43,29 +43,28 @@
 
 function [x, y, z] = sph2cart (theta, phi, r)
 
   if (nargin != 1 && nargin != 3)
     print_usage ();
   endif
 
   if (nargin == 1)
-    if (ismatrix (theta) && columns (theta) == 3)
-      r = theta(:,3);
-      phi = theta(:,2);
-      theta = theta(:,1);
-    else
+    if (! (isnumeric (theta) && ismatrix (theta) && columns (theta) == 3))
       error ("sph2cart: matrix input must have 3 columns [THETA, PHI, R]");
     endif
-  elseif (nargin == 3)
-    if (! ((ismatrix (theta) && ismatrix (phi) && ismatrix (r))
+    r = theta(:,3);
+    phi = theta(:,2);
+    theta = theta(:,1);
+  else
+    if (! ((isnumeric (theta) && isnumeric (phi) && isnumeric (r))
             && (size_equal (theta, phi) || isscalar (theta) || isscalar (phi))
             && (size_equal (theta, r) || isscalar (theta) || isscalar (r))
             && (size_equal (phi, r) || isscalar (phi) || isscalar (r))))
-      error ("sph2cart: THETA, PHI, and R must be matrices of the same size, or scalar");
+      error ("sph2cart: THETA, PHI, R must be numeric arrays of the same size, or scalar");
     endif
   endif
 
   x = r .* cos (phi) .* cos (theta);
   y = r .* cos (phi) .* sin (theta);
   z = r .* sin (phi);
 
   if (nargout <= 1)
@@ -111,8 +110,34 @@ endfunction
 %! assert (y, [0, 1, 0], eps);
 %! assert (z, [0, 0, 0], eps);
 
 %!test
 %! S = [ 0, 0, 1; 0.5*pi, 0, 1; pi, 0, 1];
 %! C = [ 1, 0, 0; 0, 1, 0; -1, 0, 0];
 %! assert (sph2cart (S), C, eps);
 
+%!test
+%! [t, p, r] = meshgrid ([0, pi/2], [0, pi/2], [0, 1]);
+%! [x, y, z] = sph2cart (t, p, r);
+%! X = zeros(2, 2, 2);
+%! X(1, 1, 2) = 1;
+%! Y = zeros(2, 2, 2);
+%! Y(1, 2, 2) = 1;
+%! Z = zeros(2, 2, 2);
+%! Z(2, :, 2) = [1 1];
+%! assert (x, X, eps);
+%! assert (y, Y, eps);
+%! assert (z, Z);
+
+## Test input validation
+%!error sph2cart ()
+%!error sph2cart (1,2)
+%!error sph2cart (1,2,3,4)
+%!error <matrix input must have 3 columns> sph2cart ({1,2,3})
+%!error <matrix input must have 3 columns> sph2cart (ones (3,3,2))
+%!error <matrix input must have 3 columns> sph2cart ([1,2,3,4])
+%!error <numeric arrays of the same size> sph2cart ({1,2,3}, [1,2,3], [1,2,3])
+%!error <numeric arrays of the same size> sph2cart ([1,2,3], {1,2,3}, [1,2,3])
+%!error <numeric arrays of the same size> sph2cart ([1,2,3], [1,2,3], {1,2,3})
+%!error <numeric arrays of the same size> sph2cart (ones (3,3,3), 1, ones (3,2,3))
+%!error <numeric arrays of the same size> sph2cart (ones (3,3,3), ones (3,2,3), 1)
+
diff --git a/scripts/gui/inputdlg.m b/scripts/gui/inputdlg.m
--- a/scripts/gui/inputdlg.m
+++ b/scripts/gui/inputdlg.m
@@ -88,16 +88,20 @@ function cstr = inputdlg (prompt, title 
 
   ## specification of text field sizes as in Matlab
   ## Matlab requires a matrix for linespec, not a cell array...
   ## rc = [1,10; 2,20; 3,30];
   ##     c1  c2
   ## r1  1   10   first  text field is 1x10
   ## r2  2   20   second text field is 2x20
   ## r3  3   30   third  text field is 3x30
+  if (! isnumeric (linespec))
+    error ("inputdlg: ROWSCOLS must be numeric");
+  endif
+
   if (isscalar (linespec))
     ## only scalar value in lineTo, copy from linespec and add defaults
     rowscols = zeros (numel (prompt), 2);
     ## cols
     rowscols(:,2) = 25;
     rowscols(:,1) = linespec;
   elseif (isvector (linespec))
     if (numel (linespec) == numel (prompt))
diff --git a/scripts/gui/uigetfile.m b/scripts/gui/uigetfile.m
--- a/scripts/gui/uigetfile.m
+++ b/scripts/gui/uigetfile.m
@@ -152,17 +152,17 @@ function [retfile, retpath, retindex] = 
     if (rem (nargin - stridx + 1, 2))
       error ("uigetfile: PROPERTY/VALUE arguments must occur in pairs");
     endif
 
     for i = stridx : 2 : nargin
       prop = varargin{i};
       val = varargin{i + 1};
       if (strcmpi (prop, "position"))
-        if (ismatrix (val) && length (val) == 2)
+        if (isnumeric (val) && length (val) == 2)
           outargs{4} = val;
         else
           error ('uigetfile: "Position" must be a 2-element vector');
         endif
       elseif (strcmpi (prop, "multiselect"))
         if (ischar (val))
           outargs{5} = tolower (val);
         else
diff --git a/scripts/optimization/fminunc.m b/scripts/optimization/fminunc.m
--- a/scripts/optimization/fminunc.m
+++ b/scripts/optimization/fminunc.m
@@ -100,17 +100,17 @@ function [x, fval, info, output, grad, h
     x = optimset ("MaxIter", 400, "MaxFunEvals", Inf,
                   "GradObj", "off", "TolX", 1e-7, "TolFun", 1e-7,
                   "OutputFcn", [], "FunValCheck", "off",
                   "FinDiffType", "central",
                   "TypicalX", [], "AutoScaling", "off");
     return;
   endif
 
-  if (nargin < 2 || nargin > 3 || ! ismatrix (x0))
+  if (nargin < 2 || nargin > 3 || ! isnumeric (x0))
     print_usage ();
   endif
 
   if (ischar (fcn))
     fcn = str2func (fcn, "global");
   endif
 
   xsz = size (x0);
diff --git a/scripts/optimization/fsolve.m b/scripts/optimization/fsolve.m
--- a/scripts/optimization/fsolve.m
+++ b/scripts/optimization/fsolve.m
@@ -141,17 +141,17 @@ function [x, fvec, info, output, fjac] =
     x = optimset ("MaxIter", 400, "MaxFunEvals", Inf, ...
     "Jacobian", "off", "TolX", 1e-7, "TolFun", 1e-7,
     "OutputFcn", [], "Updating", "on", "FunValCheck", "off",
     "ComplexEqn", "off", "FinDiffType", "central",
     "TypicalX", [], "AutoScaling", "off");
     return;
   endif
 
-  if (nargin < 2 || nargin > 3 || ! ismatrix (x0))
+  if (nargin < 2 || nargin > 3 || ! isnumeric (x0))
     print_usage ();
   endif
 
   if (ischar (fcn))
     fcn = str2func (fcn, "global");
   elseif (iscell (fcn))
     fcn = @(x) make_fcn_jac (x, fcn{1}, fcn{2});
   endif
diff --git a/scripts/optimization/lsqnonneg.m b/scripts/optimization/lsqnonneg.m
--- a/scripts/optimization/lsqnonneg.m
+++ b/scripts/optimization/lsqnonneg.m
@@ -82,17 +82,19 @@
 function [x, resnorm, residual, exitflag, output, lambda] = lsqnonneg (c, d, x = [], options = struct ())
 
   if (nargin == 1 && ischar (c) && strcmp (c, 'defaults'))
     x = optimset ("MaxIter", 1e5);
     return;
   endif
 
   if (nargin < 2 || nargin > 4
-      || ! (ismatrix (c) && ismatrix (d) && isstruct (options)))
+      || ! (isnumeric (c) && ismatrix (c))
+      || ! (isnumeric (d) && ismatrix (d))
+      || ! isstruct (options))
     print_usage ();
   endif
 
   ## Lawson-Hanson Step 1 (LH1): initialize the variables.
   m = rows (c);
   n = columns (c);
   if (isempty (x))
     ## Initial guess is 0s.
diff --git a/scripts/optimization/pqpnonneg.m b/scripts/optimization/pqpnonneg.m
--- a/scripts/optimization/pqpnonneg.m
+++ b/scripts/optimization/pqpnonneg.m
@@ -74,17 +74,19 @@
 function [x, minval, exitflag, output, lambda] = pqpnonneg (c, d, x = [], options = struct ())
 
   if (nargin == 1 && ischar (c) && strcmp (c, 'defaults'))
     x = optimset ("MaxIter", 1e5);
     return;
   endif
 
   if (nargin < 2 || nargin > 4
-      || ! (ismatrix (c) && ismatrix (d) && isstruct (options)))
+      || ! (isnumeric (c) && ismatrix (c))
+      || ! (isnumeric (d) && ismatrix (d))
+      || ! isstruct (options))
     print_usage ();
   endif
 
   ## Lawson-Hanson Step 1 (LH1): initialize the variables.
   m = rows (c);
   n = columns (c);
   if (m != n)
     error ("pqpnonneg: matrix must be square");
diff --git a/scripts/plot/draw/isosurface.m b/scripts/plot/draw/isosurface.m
--- a/scripts/plot/draw/isosurface.m
+++ b/scripts/plot/draw/isosurface.m
@@ -1,9 +1,9 @@
-## Copyright (C) 2009-2015 Martin Helm
+## Copyright (C) 2009-2016 Martin Helm
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 3 of the License, or (at
 ## your option) any later version.
 ##
@@ -140,17 +140,17 @@ function varargout = isosurface (varargi
       colors = varargin{6};
       calc_colors = true;
     endif
   else
     val = varargin{1};
     [n2, n1, n3] = size (val);
     [x, y, z] = meshgrid (1:n1, 1:n2, 1:n3);
     iso = varargin{2};
-    if (nargin >= 3 && ismatrix (varargin{3}))
+    if (nargin >= 3 && isnumeric (varargin{3}))
         colors = varargin{3};
         calc_colors = true;
     endif
   endif
   if (calc_colors)
     if (nargout == 2)
       warning ("isosurface: colors will be calculated, but no output argument to receive it.");
     endif
@@ -227,8 +227,14 @@ endfunction
 %! assert (size (v), [3 3]);
 
 %!test
 %! [f, v, c] = isosurface (x, y, z, val, .3, y);
 %! assert (size (f), [1 3]);
 %! assert (size (v), [3 3]);
 %! assert (size (c), [3 1]);
 
+%!test
+%! [f, v, c] = isosurface (val, .3, y);
+%! assert (size (f), [1 3]);
+%! assert (size (v), [3 3]);
+%! assert (size (c), [3 1]);
+
diff --git a/scripts/sparse/bicg.m b/scripts/sparse/bicg.m
--- a/scripts/sparse/bicg.m
+++ b/scripts/sparse/bicg.m
@@ -76,17 +76,17 @@
 function [x, flag, res1, k, resvec] = bicg (A, b, tol, maxit, M1, M2, x0)
 
   if (nargin >= 2 && isvector (full (b)))
 
     if (ischar (A))
       fun = str2func (A);
       Ax  = @(x) feval (fun, x, "notransp");
       Atx = @(x) feval (fun, x, "transp");
-    elseif (isnumeric (A) && ismatrix (A))
+    elseif (isnumeric (A) && issquare (A))
       Ax  = @(x) A  * x;
       Atx = @(x) A' * x;
     elseif (isa (A, "function_handle"))
       Ax  = @(x) feval (A, x, "notransp");
       Atx = @(x) feval (A, x, "transp");
     else
       error ("bicg: A must be a square matrix or function");
     endif
@@ -110,34 +110,34 @@ function [x, flag, res1, k, resvec] = bi
       M1tm1x = @(x) feval (fun, x, "transp");
     elseif (isnumeric (M1) && ismatrix (M1))
       M1m1x  = @(x) M1  \ x;
       M1tm1x = @(x) M1' \ x;
     elseif (isa (M1, "function_handle"))
       M1m1x  = @(x) feval (M1, x, "notransp");
       M1tm1x = @(x) feval (M1, x, "transp");
     else
-      error ("bicg: preconditioner must be a function or matrix");
+      error ("bicg: preconditioner M1 must be a function or matrix");
     endif
 
     if (nargin < 6 || isempty (M2))
       M2m1x = @(x, ignore) x;
       M2tm1x = M2m1x;
     elseif (ischar (M2))
       fun = str2func (M2);
       M2m1x  = @(x) feval (fun, x, "notransp");
       M2tm1x = @(x) feval (fun, x, "transp");
     elseif (isnumeric (M2) && ismatrix (M2))
       M2m1x  = @(x) M2  \ x;
       M2tm1x = @(x) M2' \ x;
     elseif (isa (M2, "function_handle"))
       M2m1x  = @(x) feval (M2, x, "notransp");
       M2tm1x = @(x) feval (M2, x, "transp");
     else
-      error ("bicg: preconditioner must be a function or matrix");
+      error ("bicg: preconditioner M2 must be a function or matrix");
     endif
 
     Pm1x  = @(x) M2m1x  (M1m1x (x));
     Ptm1x = @(x) M1tm1x (M2tm1x (x));
 
     if (nargin < 7 || isempty (x0))
       x0 = zeros (size (b));
     endif
diff --git a/scripts/sparse/bicgstab.m b/scripts/sparse/bicgstab.m
--- a/scripts/sparse/bicgstab.m
+++ b/scripts/sparse/bicgstab.m
@@ -71,17 +71,17 @@
 
 function [x, flag, relres, iter, resvec] = bicgstab (A, b, tol, maxit,
                                                      M1, M2, x0)
 
   if (nargin >= 2 && nargin <= 7 && isvector (full (b)))
 
     if (ischar (A))
       A = str2func (A);
-    elseif (isnumeric(A) && ismatrix (A))
+    elseif (isnumeric(A) && issquare (A))
       Ax  = @(x) A  * x;
     elseif (isa (A, "function_handle"))
       Ax  = @(x) feval (A, x);
     else
       error ("bicgstab: A must be a square matrix or function");
     endif
 
     if (nargin < 3 || isempty (tol))
@@ -96,29 +96,29 @@ function [x, flag, relres, iter, resvec]
       M1m1x = @(x) x;
     elseif (ischar (M1))
       M1m1x = str2func (M1);
     elseif (isnumeric(M1) && ismatrix (M1))
       M1m1x = @(x) M1  \ x;
     elseif (isa (M1, "function_handle"))
       M1m1x = @(x) feval (M1, x);
     else
-      error ("bicgstab: preconditioner must be a function or matrix");
+      error ("bicgstab: preconditioner M1 must be a function or matrix");
     endif
 
     if (nargin < 6 || isempty (M2))
       M2m1x = @(x) x;
     elseif (ischar (M2))
       M2m1x = str2func (M2);
     elseif (isnumeric(M2) && ismatrix (M2))
       M2m1x = @(x) M2  \ x;
     elseif (isa (M2, "function_handle"))
       M2m1x = @(x) feval (M2, x);
     else
-      error ("bicgstab: preconditioner must be a function or matrix");
+      error ("bicgstab: preconditioner M2 must be a function or matrix");
     endif
 
     precon = @(x) M2m1x (M1m1x (x));
 
     if (nargin < 7 || isempty (x0))
       x0 = zeros (size (b));
     endif
 
diff --git a/scripts/sparse/cgs.m b/scripts/sparse/cgs.m
--- a/scripts/sparse/cgs.m
+++ b/scripts/sparse/cgs.m
@@ -69,17 +69,17 @@
 ## @end deftypefn
 
 function [x, flag, relres, iter, resvec] = cgs (A, b, tol, maxit, M1, M2, x0)
 
   if (nargin >= 2 && nargin <= 7 && isvector (full (b)))
 
     if (ischar (A))
       A = str2func (A);
-    elseif (isnumeric (A) && ismatrix (A))
+    elseif (isnumeric (A) && issquare (A))
       Ax = @(x) A * x;
     elseif (isa (A, "function_handle"))
       Ax = @(x) feval (A, x);
     else
       error ("cgs: A must be a square matrix or function");
     endif
 
     if (nargin < 3 || isempty (tol))
@@ -94,29 +94,29 @@ function [x, flag, relres, iter, resvec]
       M1m1x = @(x) x;
     elseif (ischar (M1))
       M1m1x = str2func (M1);
     elseif (isnumeric (M1) && ismatrix (M1))
       M1m1x = @(x) M1 \ x;
     elseif (isa (M1, "function_handle"))
       M1m1x = @(x) feval (M1, x);
     else
-      error ("cgs: preconditioner must be a function or matrix");
+      error ("cgs: preconditioner M1 must be a function or matrix");
     endif
 
     if (nargin < 6 || isempty (M2))
       M2m1x = @(x) x;
     elseif (ischar (M2))
       M2m1x = str2func (M2);
     elseif (isnumeric (M2) && ismatrix (M2))
       M2m1x = @(x) M2 \ x;
     elseif (isa (M2, "function_handle"))
       M2m1x = @(x) feval (M2, x);
     else
-      error ("cgs: preconditioner must be a function or matrix");
+      error ("cgs: preconditioner M2 must be a function or matrix");
     endif
 
     precon = @(x) M2m1x (M1m1x (x));
 
     if (nargin < 7 || isempty (x0))
       x0 = zeros (size (b));
     endif
 
diff --git a/scripts/sparse/gmres.m b/scripts/sparse/gmres.m
--- a/scripts/sparse/gmres.m
+++ b/scripts/sparse/gmres.m
@@ -74,22 +74,22 @@
 function [x, flag, relres, it, resvec] = gmres (A, b, restart, rtol, maxit, M1, M2, x0)
 
   if (nargin < 2 || nargin > 8)
     print_usage ();
   endif
 
   if (ischar (A))
     Ax = str2func (A);
-  elseif (isnumeric (A) && ismatrix (A))
+  elseif (isnumeric (A) && issquare (A))
     Ax = @(x) A*x;
   elseif (isa (A, "function_handle"))
     Ax = A;
   else
-    error ("gmres: A must be a function or matrix");
+    error ("gmres: A must be a function or square matrix");
   endif
 
   if (nargin < 3 || isempty (restart))
     restart = rows (b);
   endif
 
   if (nargin < 4 || isempty (rtol))
     rtol = 1e-6;
@@ -225,12 +225,12 @@ endfunction
 %!test
 %! x = gmres (@(x) A*x, b, dim, 1e-10, 1e6, @(x) x ./ diag (A), [], []);
 %! assert (x, A\b, 1e-7*norm (x, Inf));
 
 
 %!error gmres (1)
 %!error gmres (1,2,3,4,5,6,7,8,9)
 %!error <A must be> gmres ({1},2)
-%!error <A must be a function or matrix> gmres ({1},2)
+%!error <A must be a function or square matrix> gmres ({1},2)
 %!error <M1 must be a function or matrix> gmres (1,2,3,4,5,{6})
 %!error <M2 must be a function or matrix> gmres (1,2,3,4,5,6,{7})
 
diff --git a/scripts/sparse/qmr.m b/scripts/sparse/qmr.m
--- a/scripts/sparse/qmr.m
+++ b/scripts/sparse/qmr.m
@@ -92,17 +92,17 @@ function [x, flag, relres, iter, resvec]
 
     if (ischar (A))
       fun = str2func (A);
       Ax  = @(x) feval (fun, x, "notransp");
       Atx = @(x) feval (fun, x, "transp");
     elseif (isa (A, "function_handle"))
       Ax  = @(x) feval (A, x, "notransp");
       Atx = @(x) feval (A, x, "transp");
-    elseif (isnumeric (A) && ismatrix (A))
+    elseif (isnumeric (A) && issquare (A))
       Ax  = @(x) A  * x;
       Atx = @(x) A' * x;
     else
       error ("qmr: A must be a square matrix or function");
     endif
 
     if (nargin < 3 || isempty (tol))
       tol = 1e-6;
@@ -123,37 +123,36 @@ function [x, flag, relres, iter, resvec]
       M1tm1x = @(x) feval (fun, x, "transp");
     elseif (isa (M1, "function_handle"))
       M1m1x  = @(x) feval (M1, x, "notransp");
       M1tm1x = @(x) feval (M1, x, "transp");
     elseif (isnumeric (M1) && ismatrix (M1))
       M1m1x  = @(x) M1  \ x;
       M1tm1x = @(x) M1' \ x;
     else
-      error ("qmr: preconditioner must be a function or matrix");
+      error ("qmr: preconditioner M1 must be a function or matrix");
     endif
 
     if (nargin < 6 || isempty (M2))
       M2m1x = @(x, ignore) x;
       M2tm1x = M2m1x;
     elseif (ischar (M2))
       fun = str2func (M2);
       M2m1x  = @(x) feval (fun, x, "notransp");
       M2tm1x = @(x) feval (fun, x, "transp");
     elseif (isa (M2, "function_handle"))
       M2m1x  = @(x) feval (M2, x, "notransp");
       M2tm1x = @(x) feval (M2, x, "transp");
     elseif (isnumeric (M2) && ismatrix (M2))
       M2m1x  = @(x) M2  \ x;
       M2tm1x = @(x) M2' \ x;
     else
-      error ("qmr: preconditioner must be a function or matrix");
+      error ("qmr: preconditioner M2 must be a function or matrix");
     endif
 
-
     if (nargin < 7 || isempty (x0))
       x = zeros (size (b));
     else
       x = x0;
     endif
 
     r = b - Ax (x);
 
diff --git a/scripts/sparse/spconvert.m b/scripts/sparse/spconvert.m
--- a/scripts/sparse/spconvert.m
+++ b/scripts/sparse/spconvert.m
@@ -25,23 +25,28 @@
 ## row, column, real, and imaginary parts of the elements of the sparse
 ## matrix.  An element with a zero real and imaginary part can be used to
 ## force a particular matrix size.
 ## @seealso{sparse}
 ## @end deftypefn
 
 function s = spconvert (m)
 
+  if (nargin != 1)
+    print_usage ();
+  endif
+
   if (issparse (m))
     s = m;
   else
     sz = size (m);
-    if (nargin != 1 || ! ismatrix (m) || ! isreal (m)
+    if (! ismatrix (m) || ! isreal (m)
         || length (sz) != 2 || (sz(2) != 3 && sz(2) != 4))
-      error ("spconvert: argument must be sparse or real matrix with 3 or 4 columns");
+      error (["spconvert: argument must be sparse or real matrix" ...
+              "with 3 or 4 columns"]);
     elseif (sz(2) == 3)
       s = sparse (m(:,1), m(:,2), m(:,3));
     else
       s = sparse (m(:,1), m(:,2), m(:,3) + 1i*m(:,4));
     endif
   endif
 
 endfunction
diff --git a/scripts/sparse/treeplot.m b/scripts/sparse/treeplot.m
--- a/scripts/sparse/treeplot.m
+++ b/scripts/sparse/treeplot.m
@@ -32,18 +32,17 @@
 ## @end deftypefn
 
 function treeplot (tree, node_style = "ko", edge_style = "r")
 
   if (nargin < 1 || nargin > 3 || nargout > 0)
     print_usage ();
   endif
 
-  if (! ismatrix (tree) || rows (tree) != 1 || ! isnumeric (tree)
-      || ! isvector (tree) || any (tree > length (tree)))
+  if (! isnumeric (tree) || ! isrow (tree) || any (tree > length (tree)))
     error ("treeplot: TREE must be a vector of predecessors");
   endif
 
   ##  Verify node_style
   if (nargin > 1)
     if (isempty (regexp (node_style, '[ox+*]', 'once')))
       node_style = [node_style, "o"];
     endif
