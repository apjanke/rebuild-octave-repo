# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1499868407 14400
#      Wed Jul 12 10:06:47 2017 -0400
# Node ID 54aa9a3250b4a116c8c8674f5802269c3ee36941
# Parent  82886a27ce3a9219d7b53687c501f6060fd5016a
make root_figure::factory_properties local instead of global

* graphics.in.h, graphics.cc (root_figure::factory_properties):
Now a class data member instead of a static member.
(root_figure::root_figure): Initialize it.  Make constructor protected.
(class root_figure): Declare gh_manager as friend class.

diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -3680,19 +3680,16 @@ root_figure::properties::remove_child (c
 
   graphics_handle cf = gh_manager::current_figure ();
 
   xset (0, "currentfigure", cf.value ());
 
   base_properties::remove_child (h);
 }
 
-property_list
-root_figure::factory_properties = root_figure::init_factory_properties ();
-
 void
 root_figure::reset_default_properties (void)
 {
   // empty list of local defaults
   default_properties = property_list ();
 
   remove_all_listeners ();
   xreset_default_properties (get_handle (),
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -3249,16 +3249,22 @@ private:
   base_graphics_object *rep;
 };
 
 // ---------------------------------------------------------------------
 
 class OCTINTERP_API root_figure : public base_graphics_object
 {
 public:
+
+  // The gh_manager constructor creates the single instance of
+  // the root_figure object.
+
+  friend class gh_manager;
+
   class OCTINTERP_API properties : public base_properties
   {
   public:
     void remove_child (const graphics_handle& h);
 
     Matrix get_boundingbox (bool internal = false,
                             const Matrix& parent_pix_size = Matrix ()) const;
 
@@ -3292,25 +3298,34 @@ public:
     END_PROPERTIES
 
   private:
     std::list<graphics_handle> cbo_stack;
 
   };
 
 private:
+
   properties xproperties;
 
+protected:
+
+  root_figure (void)
+    : xproperties (0, graphics_handle ()), default_properties (),
+      factory_properties (init_factory_properties ())
+  { }
+
 public:
 
-  root_figure (void)
-    : xproperties (0, graphics_handle ()), default_properties () { }
-
   ~root_figure (void) = default;
 
+  root_figure (const root_figure&) = delete;
+
+  root_figure& operator = (const root_figure&) = delete;
+
   void mark_modified (void) { }
 
   void override_defaults (base_graphics_object& obj)
   {
     // Now override with our defaults.  If the default_properties
     // list includes the properties for all defaults (line,
     // surface, etc.) then we don't have to know the type of OBJ
     // here, we just call its set function and let it decide which
@@ -3401,19 +3416,20 @@ public:
   {
     bool retval = xproperties.has_readonly_property (pname);
     if (! retval)
       retval = base_properties::has_readonly_property (pname);
     return retval;
   }
 
 private:
+
   property_list default_properties;
 
-  static property_list factory_properties;
+  property_list factory_properties;
 
   static property_list::plist_map_type init_factory_properties (void);
 };
 
 // ---------------------------------------------------------------------
 
 class OCTINTERP_API figure : public base_graphics_object
 {
