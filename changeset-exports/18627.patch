# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1396724949 14400
#      Sat Apr 05 15:09:09 2014 -0400
# Branch stable
# Node ID 37c300acfcfdf0b05844e4809d75363304ec1aa7
# Parent  6535cb2b8e231b1e157eafff166c8fb22cab4b4d
don't truncate when casting char to uintN values (bug #42054)

* oct-inttypes.h (octave_int<T>::octave_int (char)):
New special case constructor.
* oct-inttypes.cc: New tests.

diff --git a/liboctave/util/oct-inttypes.h b/liboctave/util/oct-inttypes.h
--- a/liboctave/util/oct-inttypes.h
+++ b/liboctave/util/oct-inttypes.h
@@ -825,16 +825,21 @@ octave_int : public octave_int_base<T>
 {
 public:
   typedef T val_type;
 
   octave_int (void) : ival () { }
 
   octave_int (T i) : ival (i) { }
 
+  // Always treat characters as unsigned.
+  octave_int (char c)
+    : ival (octave_int_base<T>::truncate_int (static_cast<unsigned char> (c)))
+  { }
+
   octave_int (double d) : ival (octave_int_base<T>::convert_real (d)) { }
 
   octave_int (float d) : ival (octave_int_base<T>::convert_real (d)) { }
 
 #ifdef OCTAVE_INT_USE_LONG_DOUBLE
   octave_int (long double d) : ival (octave_int_base<T>::convert_real (d)) { }
 #endif
 
diff --git a/scripts/plot/draw/fplot.m b/scripts/plot/draw/fplot.m
--- a/scripts/plot/draw/fplot.m
+++ b/scripts/plot/draw/fplot.m
@@ -141,20 +141,20 @@ function [X, Y] = fplot (varargin)
   ## FIXME: This algorithm should really use adaptive scaling as the 
   ##        the numerical quadrature algorithms do so that extra points are
   ##        used where they are needed and not spread evenly over the entire
   ##        x-range.  Try any function with a discontinuity, such as
   ##        fplot (@tan, [-2, 2]) or fplot ("1./x", [-3, 2]), to see the
   ##        problems with the current solution.
 
   while (n < 2^18)    # Something is wrong if we need more than 250K points
-    yi = interp1 (x0, y0, x, "linear");
+    yi = interp1 (x0, y0, x, "linear")
     ## relative error calculation using average of [yi,y] as reference
     ## since neither estimate is known a priori to be better than the other.
-    err = 0.5 * max (abs ((yi - y) ./ (yi + y))(:));
+    err = 0.5 * max (abs ((yi - y) ./ (yi + y))(:))
     if (err < tol || abs (err - err0) < tol/2)
       ## Either relative tolerance has been met OR
       ## algorithm has stopped making any reasonable progress per iteration.
       break;
     endif
     x0 = x;
     y0 = y;
     err0 = err;
