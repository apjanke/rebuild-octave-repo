# HG changeset patch
# User jwe
# Date 847385296 0
#      Thu Nov 07 16:48:16 1996 +0000
# Node ID 3d905d3820a4e7de028c1a954a938bd43b1a883e
# Parent  4de4cebed08851de626c06cc9b7354b372d7d2ee
[project @ 1996-11-07 16:46:11 by jwe]

diff --git a/PROJECTS b/PROJECTS
--- a/PROJECTS
+++ b/PROJECTS
@@ -40,16 +40,19 @@ Numerical:
     Legendre polynomials.
 
   * Fix eig to also be able to solve the generalized eigenvalue
     problem, and to solve for eigenvalues and eigenvectors without
     performing a balancing step first.
 
   * Move rand, eye, xpow, xdiv, etc., functions to the matrix classes.
 
+  * Use octave_allocator for memory management in Array classes once
+    g++ supports static member templates.
+
   * Implement the following functions:
     -- ppval    -- cross    -- dot
 
   * Allow user-supplied gradient information to be passed to NPSOL.
 
   * Support for FSQP.
 
   * Convert FSQP style NLP statement to NPSOL style.
diff --git a/liboctave/Array2.cc b/liboctave/Array2.cc
--- a/liboctave/Array2.cc
+++ b/liboctave/Array2.cc
@@ -114,16 +114,17 @@ Array2<T>::resize (int r, int c, const T
       return;
     }
 
   if (r == dim1 () && c == dim2 ())
     return;
 
   ArrayRep *old_rep = rep;
   const T *old_data = data ();
+
   int old_d1 = dim1 ();
   int old_d2 = dim2 ();
   int old_len = length ();
 
   rep = new ArrayRep (r*c);
 
   d1 = r;
   d2 = c;
diff --git a/liboctave/Array3.cc b/liboctave/Array3.cc
--- a/liboctave/Array3.cc
+++ b/liboctave/Array3.cc
@@ -41,25 +41,118 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include "lo-error.h"
 
 // Three dimensional array class.
 
 template <class T>
 void
-Array3<T>::resize (int n, int m, int k)
+Array3<T>::resize (int r, int c, int p)
 {
-  assert (0); // XXX FIXME XXX
+  if (r < 0 || c < 0 || p < 0)
+    {
+      (*current_liboctave_error_handler)
+	("can't resize to negative dimension");
+      return;
+    }
+
+  if (r == dim1 () && c == dim2 () && p == dim3 ())
+    return;
+
+  ArrayRep *old_rep = rep;
+  const T *old_data = data ();
+
+  int old_d1 = dim1 ();
+  int old_d2 = dim2 ();
+  int old_d3 = dim3 ();
+  int old_len = length ();
+
+  rep = new ArrayRep (r*c*p);
+
+  d1 = r;
+  d2 = c;
+  d3 = p;
+
+  if (old_data && old_len > 0)
+    {
+      int min_r = old_d1 < r ? old_d1 : r;
+      int min_c = old_d2 < c ? old_d2 : c;
+      int min_p = old_d3 < p ? old_d3 : p;
+
+      for (int k = 0; k < min_p; k++)
+	for (int j = 0; j < min_c; j++)
+	  for (int i = 0; i < min_r; i++)
+	    xelem (i, j, k) = old_data[old_d1*(old_d2*k+j)+i];
+    }
+
+  if (--old_rep->count <= 0)
+    delete old_rep;
 }
 
 template <class T>
 void
 Array3<T>::resize (int n, int m, int k, const T& val)
 {
-  assert (0); // XXX FIXME XXX
+  if (r < 0 || c < 0 || p < 0)
+    {
+      (*current_liboctave_error_handler)
+	("can't resize to negative dimension");
+      return;
+    }
+
+  if (r == dim1 () && c == dim2 () && p == dim3 ())
+    return;
+
+  ArrayRep *old_rep = rep;
+  const T *old_data = data ();
+
+  int old_d1 = dim1 ();
+  int old_d2 = dim2 ();
+  int old_d3 = dim3 ();
+  int old_len = length ();
+
+  rep = new ArrayRep (r*c*p);
+
+  d1 = r;
+  d2 = c;
+  d3 = p;
+
+  if (old_data && old_len > 0)
+    {
+      int min_r = old_d1 < r ? old_d1 : r;
+      int min_c = old_d2 < c ? old_d2 : c;
+      int min_p = old_d3 < p ? old_d3 : p;
+
+      for (int k = 0; k < min_p; k++)
+	for (int j = 0; j < min_c; j++)
+	  for (int i = 0; i < min_r; i++)
+	    xelem (i, j, k) = old_data[old_d1*(old_d2*k+j)+i];
+    }
+
+  // If the copy constructor is expensive, this may win.  Otherwise,
+  // it may make more sense to just copy the value everywhere when
+  // making the new ArrayRep.
+
+  for (int k = 0; k < min_p; k++)
+    for (int j = min_c; j < c; j++)
+      for (int i = 0; i < min_r; i++)
+	xelem (i, j, k) = val;
+
+  for (int k = 0; k < min_p; k++)
+    for (int j = 0; j < c; j++)
+      for (int i = min_r; i < r; i++)
+	xelem (i, j, k) = val;
+
+  for (int k = min_p; k < p; k++)
+    for (int j = 0; j < c; j++)
+      for (int i = 0; i < r; i++)
+	xelem (i, j, k) = val;
+
+  if (--old_rep->count <= 0)
+    delete old_rep;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,18 @@
+Thu Nov  7 07:59:07 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* ov-struct.cc, ov-struct.h: Add hooks for custom memory management.
+	* ov-scalar.cc, ov-scalar.h: Likewise.
+	* ov-re-mat.cc, ov-re-mat.h: Likewise.
+	* ov-range.cc, ov-range.h: Likewise.
+	* ov-cx-mat.cc, ov-cx-mat.h: Likewise.
+	* ov-complex.cc, ov-complex.h: Likewise.
+	* ov-ch-mat.cc, ov-ch-mat.h: Likewise.
+
 Wed Nov  6 12:32:48 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* pager.cc (do_sync): Don't call clear_external_pager here.
 
 	* pt-const.h (tree_constant::allocator) New static member.
 	(tree_constant::operator new, tree_constant::operator delete):
 	Implement with custom allocator.
 
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -40,38 +40,35 @@ class ostream;
 #include "ov.h"
 #include "ov-typeinfo.h"
 
 class Octave_map;
 class octave_value_list;
 
 class tree_walker;
 
-// Real scalar values.
+// A base value type, so that derived types only have to redefine what
+// they need (if they are derived from octave_base_value instead of
+// octave_value).
 
 class
 octave_base_value : public octave_value
 {
 public:
 
   octave_base_value (void)
     : octave_value (octave_xvalue ()) { }
 
   octave_base_value (const octave_base_value&)
     : octave_value (octave_xvalue ()) { }
 
   ~octave_base_value (void) { }
 
   octave_value *clone (void) { return new octave_base_value (*this); }
 
-#if 0
-  void *operator new (size_t size);
-  void operator delete (void *p, size_t size);
-#endif
-
   type_conv_fcn numeric_conversion_function (void) const
     { return (type_conv_fcn) 0; }
 
   octave_value *try_narrowing_conversion (void)
     { return (octave_value *) 0; }
 
   octave_value index (const octave_value_list& idx) const;
 
@@ -177,18 +174,20 @@ public:
 
   static int static_type_id (void) { return t_id; }
 
   static void register_type (void)
     { t_id = octave_value_typeinfo::register_type (t_name); }
 
 private:
 
+  // Type id of base value objects, set by register_type().
   static int t_id;
 
+  // Type name of base value objects, defined in ov-base.cc.
   static const string t_name;
 };
 
 #endif
 
 extern void install_base_type_conversions (void);
 
 /*
diff --git a/src/ov-ch-mat.cc b/src/ov-ch-mat.cc
--- a/src/ov-ch-mat.cc
+++ b/src/ov-ch-mat.cc
@@ -30,19 +30,24 @@ Software Foundation, 59 Temple Place - S
 
 #include "lo-ieee.h"
 #include "mx-base.h"
 
 #include "ov-ch-mat.h"
 #include "gripes.h"
 #include "pr-output.h"
 
-int octave_char_matrix::t_id = -1;
+octave_allocator
+octave_char_matrix::allocator (sizeof (octave_char_matrix));
 
-const string octave_char_matrix::t_name ("char matrix");
+int
+octave_char_matrix::t_id (-1);
+
+const string
+octave_char_matrix::t_name ("char matrix");
 
 bool
 octave_char_matrix::valid_as_scalar_index (void) const
 {
   // XXX FIXME XXX
   return false;
 }
 
diff --git a/src/ov-ch-mat.h b/src/ov-ch-mat.h
--- a/src/ov-ch-mat.h
+++ b/src/ov-ch-mat.h
@@ -29,28 +29,29 @@ Software Foundation, 59 Temple Place - S
 
 #include <cstdlib>
 
 #include <string>
 
 class ostream;
 
 #include "mx-base.h"
+#include "oct-alloc.h"
 #include "str-vec.h"
 
 #include "error.h"
 #include "ov-base.h"
 #include "ov-typeinfo.h"
 
 class Octave_map;
 class octave_value_list;
 
 class tree_walker;
 
-// Real scalar values.
+// Character matrix values.
 
 class
 octave_char_matrix : public octave_base_value
 {
 public:
 
   octave_char_matrix (void)
     : octave_base_value () { }
@@ -69,20 +70,21 @@ public:
 
   octave_char_matrix (const octave_char_matrix& chm)
     : octave_base_value (), matrix (chm.matrix) { }
 
   ~octave_char_matrix (void) { }
 
   octave_value *clone (void) { return new octave_char_matrix (*this); }
 
-#if 0
-  void *operator new (size_t size);
-  void operator delete (void *p, size_t size);
-#endif
+  void *operator new (size_t size)
+    { return allocator.alloc (size); }
+
+  void operator delete (void *p, size_t size)
+    { allocator.free (p, size); }
 
   int rows (void) const { return matrix.rows (); }
   int columns (void) const { return matrix.columns (); }
 
   bool is_defined (void) const { return true; }
 
   bool is_char_matrix (void) const { return true; }
 
@@ -124,18 +126,22 @@ public:
 
   static void register_type (void)
     { t_id = octave_value_typeinfo::register_type (t_name); }
 
 protected:
 
   charMatrix matrix;
 
+  static octave_allocator allocator;
+
+  // Type id of character matrix objects, set by register_type().
   static int t_id;
 
+  // Type name of character matrix objects, defined in ov-ch-mat.cc.
   static const string t_name;
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/src/ov-colon.h b/src/ov-colon.h
--- a/src/ov-colon.h
+++ b/src/ov-colon.h
@@ -36,38 +36,33 @@ class ostream;
 #include "ov-base.h"
 #include "ov-typeinfo.h"
 
 class Octave_map;
 class octave_value_list;
 
 class tree_walker;
 
-// Real scalar values.
+// A type to represent `:' as used for indexing.
 
 class
 octave_magic_colon : public octave_base_value
 {
 public:
 
   octave_magic_colon (void)
     : octave_base_value () { }
 
   octave_magic_colon (const octave_magic_colon&)
     : octave_base_value () { }
 
   ~octave_magic_colon (void) { }
 
   octave_value *clone (void) { return new octave_magic_colon (*this); }
 
-#if 0
-  void *operator new (size_t size);
-  void operator delete (void *p, size_t size);
-#endif
-
   idx_vector index_vector (void) const { return idx_vector (':'); }
 
   bool is_defined (void) const { return true; }
 
   bool is_magic_colon (void) const { return true; }
 
   bool valid_as_scalar_index (void) const { return true; }
 
@@ -81,18 +76,20 @@ public:
 
   static int static_type_id (void) { return t_id; }
 
   static void register_type (void)
     { t_id = octave_value_typeinfo::register_type (t_name); }
 
 private:
 
+  // Type id of magic colon objects, set by register_type().
   static int t_id;
 
+  // Type name of magic colon objects, defined in ov-colon.cc.
   static const string t_name;
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/src/ov-complex.cc b/src/ov-complex.cc
--- a/src/ov-complex.cc
+++ b/src/ov-complex.cc
@@ -33,19 +33,24 @@ Software Foundation, 59 Temple Place - S
 #include "oct-obj.h"
 #include "ops.h"
 #include "ov-complex.h"
 #include "ov-cx-mat.h"
 #include "ov-scalar.h"
 #include "gripes.h"
 #include "pr-output.h"
 
-int octave_complex::t_id = -1;
+octave_allocator
+octave_complex::allocator (sizeof (octave_complex));
 
-const string octave_complex::t_name ("complex scalar");
+int
+octave_complex::t_id (-1);
+
+const string
+octave_complex::t_name ("complex scalar");
 
 octave_value *
 octave_complex::try_narrowing_conversion (void)
 {
   octave_value *retval = 0;
 
   if (imag (scalar) == 0.0)
     retval = new octave_scalar (::real (scalar));
diff --git a/src/ov-complex.h b/src/ov-complex.h
--- a/src/ov-complex.h
+++ b/src/ov-complex.h
@@ -29,28 +29,29 @@ Software Foundation, 59 Temple Place - S
 
 #include <cstdlib>
 
 #include <string>
 
 class ostream;
 
 #include "mx-base.h"
+#include "oct-alloc.h"
 #include "str-vec.h"
 
 #include "error.h"
 #include "ov-base.h"
 #include "ov-typeinfo.h"
 
 class Octave_map;
 class octave_value_list;
 
 class tree_walker;
 
-// Real scalar values.
+// Complex scalar values.
 
 class
 octave_complex : public octave_base_value
 {
 public:
 
   octave_complex (void)
     : octave_base_value () { }
@@ -60,20 +61,21 @@ public:
 
   octave_complex (const octave_complex& c)
     : octave_base_value (), scalar (c.scalar) { }
 
   ~octave_complex (void) { }
 
   octave_value *clone (void) { return new octave_complex (*this); }
 
-#if 0
-  void *operator new (size_t size);
-  void operator delete (void *p, size_t size);
-#endif
+  void *operator new (size_t size)
+    { return allocator.alloc (size); }
+
+  void operator delete (void *p, size_t size)
+    { allocator.free (p, size); }
 
   octave_value *try_narrowing_conversion (void);
 
   octave_value index (const octave_value_list& idx) const;
 
   int rows (void) const { return 1; }
   int columns (void) const { return 1; }
 
@@ -128,18 +130,22 @@ public:
 
   static void register_type (void)
     { t_id = octave_value_typeinfo::register_type (t_name); }
 
 private:
 
   Complex scalar;
 
+  static octave_allocator allocator;
+
+  // Type id of complex scalar objects, set in register_type().
   static int t_id;
 
+  // Type name of complex scalar objects, defined in ov-complex.cc.
   static const string t_name;
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/src/ov-cx-mat.cc b/src/ov-cx-mat.cc
--- a/src/ov-cx-mat.cc
+++ b/src/ov-cx-mat.cc
@@ -35,19 +35,24 @@ Software Foundation, 59 Temple Place - S
 #include "oct-obj.h"
 #include "ops.h"
 #include "ov-complex.h"
 #include "ov-cx-mat.h"
 #include "ov-re-mat.h"
 #include "ov-scalar.h"
 #include "pr-output.h"
 
-int octave_complex_matrix::t_id = -1;
+octave_allocator
+octave_complex_matrix::allocator (sizeof (octave_complex_matrix));
 
-const string octave_complex_matrix::t_name ("complex matrix");
+int
+octave_complex_matrix::t_id (-1);
+
+const string
+octave_complex_matrix::t_name ("complex matrix");
 
 octave_complex_matrix::octave_complex_matrix (const ComplexRowVector& v,
 					      int pcv)
   : octave_base_value (),
     matrix ((pcv < 0 && Vprefer_column_vectors) || pcv
 	    ? ComplexMatrix (v.transpose ()) : ComplexMatrix (v)) { }
 
 octave_complex_matrix::octave_complex_matrix (const ComplexColumnVector& v,
diff --git a/src/ov-cx-mat.h b/src/ov-cx-mat.h
--- a/src/ov-cx-mat.h
+++ b/src/ov-cx-mat.h
@@ -29,28 +29,29 @@ Software Foundation, 59 Temple Place - S
 
 #include <cstdlib>
 
 #include <string>
 
 class ostream;
 
 #include "mx-base.h"
+#include "oct-alloc.h"
 #include "str-vec.h"
 
 #include "error.h"
 #include "ov-base.h"
 #include "ov-typeinfo.h"
 
 class Octave_map;
 class octave_value_list;
 
 class tree_walker;
 
-// Real scalar values.
+// Complex matrix values.
 
 class
 octave_complex_matrix : public octave_base_value
 {
 public:
 
   octave_complex_matrix (void)
     : octave_base_value () { }
@@ -67,20 +68,21 @@ public:
 
   octave_complex_matrix (const octave_complex_matrix& cm)
     : octave_base_value (), matrix (cm.matrix) { }
 
   ~octave_complex_matrix (void) { }
 
   octave_value *clone (void) { return new octave_complex_matrix (*this); }
 
-#if 0
-  void *operator new (size_t size);
-  void operator delete (void *p, size_t size);
-#endif
+  void *operator new (size_t size)
+    { return allocator.alloc (size); }
+
+  void operator delete (void *p, size_t size)
+    { allocator.free (p, size); }
 
   octave_value *try_narrowing_conversion (void);
 
   octave_value index (const octave_value_list& idx) const;
 
   void assign (const octave_value_list& idx, const ComplexMatrix& rhs);
 
   void assign (const octave_value_list& idx, const Matrix& rhs);
@@ -140,18 +142,22 @@ public:
 
   static void register_type (void)
     { t_id = octave_value_typeinfo::register_type (t_name); }
 
 private:
 
   ComplexMatrix matrix;
 
+  static octave_allocator allocator;
+
+  // Type id of complex matrix objects, set by register_type().
   static int t_id;
 
+  // Type name of complex matrix objects, defined in ov-cx-mat.cc.
   static const string t_name;
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/src/ov-range.cc b/src/ov-range.cc
--- a/src/ov-range.cc
+++ b/src/ov-range.cc
@@ -33,19 +33,24 @@ Software Foundation, 59 Temple Place - S
 
 #include "gripes.h"
 #include "ops.h"
 #include "ov-range.h"
 #include "ov-re-mat.h"
 #include "ov-scalar.h"
 #include "pr-output.h"
 
-int octave_range::t_id = -1;
+octave_allocator
+octave_range::allocator (sizeof (octave_range));
 
-const string octave_range::t_name ("range");
+int
+octave_range::t_id (-1);
+
+const string
+octave_range::t_name ("range");
 
 static octave_value *
 default_numeric_conversion_function (const octave_value& a)
 {
   CAST_CONV_ARG (const octave_range&);
 
   return new octave_matrix (v.matrix_value ());
 }
diff --git a/src/ov-range.h b/src/ov-range.h
--- a/src/ov-range.h
+++ b/src/ov-range.h
@@ -32,16 +32,17 @@ Software Foundation, 59 Temple Place - S
 #include <string>
 
 class ostream;
 
 #include "Range.h"
 
 #include "lo-utils.h"
 #include "mx-base.h"
+#include "oct-alloc.h"
 #include "str-vec.h"
 
 #include "error.h"
 #include "mappers.h"
 #include "ov-base.h"
 #include "ov-typeinfo.h"
 
 class Octave_map;
@@ -75,20 +76,21 @@ public:
 
   octave_range (const octave_range& r)
     : octave_base_value (), range (r.range) { }
 
   ~octave_range (void) { }
 
   octave_value *clone (void) { return new octave_range (*this); }
 
-#if 0
-  void *operator new (size_t size);
-  void operator delete (void *p, size_t size);
-#endif
+  void *operator new (size_t size)
+    { return allocator.alloc (size); }
+
+  void operator delete (void *p, size_t size)
+    { allocator.free (p, size); }
 
   type_conv_fcn numeric_conversion_function (void) const;
 
   octave_value *try_narrowing_conversion (void);
 
   octave_value index (const octave_value_list& idx) const;
 
   idx_vector index_vector (void) const { return idx_vector (range); }
@@ -151,18 +153,22 @@ public:
 
   static void register_type (void)
     { t_id = octave_value_typeinfo::register_type (t_name); }
 
 private:
 
   Range range;
 
+  static octave_allocator allocator;
+
+  // Type id of range objects, set by register_type ().
   static int t_id;
 
+  // Type name of scalar objects, defined in ov-range.cc.
   static const string t_name;
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/src/ov-re-mat.cc b/src/ov-re-mat.cc
--- a/src/ov-re-mat.cc
+++ b/src/ov-re-mat.cc
@@ -35,19 +35,24 @@ Software Foundation, 59 Temple Place - S
 #include "gripes.h"
 #include "mappers.h"
 #include "oct-obj.h"
 #include "ops.h"
 #include "ov-scalar.h"
 #include "ov-re-mat.h"
 #include "pr-output.h"
 
-int octave_matrix::t_id = -1;
+octave_allocator
+octave_matrix::allocator (sizeof (octave_matrix));
 
-const string octave_matrix::t_name ("matrix");
+int
+octave_matrix::t_id (-1);
+
+const string
+octave_matrix::t_name ("matrix");
 
 octave_matrix::octave_matrix (const RowVector& v, int pcv)
   : octave_base_value (),
     matrix ((pcv < 0 && Vprefer_column_vectors) || pcv
 	    ? Matrix (v.transpose ()) : Matrix (v)) { }
 
 octave_matrix::octave_matrix (const ColumnVector& v, int pcv)
   : octave_base_value (),
diff --git a/src/ov-re-mat.h b/src/ov-re-mat.h
--- a/src/ov-re-mat.h
+++ b/src/ov-re-mat.h
@@ -29,16 +29,17 @@ Software Foundation, 59 Temple Place - S
 
 #include <cstdlib>
 
 #include <string>
 
 class ostream;
 
 #include "mx-base.h"
+#include "oct-alloc.h"
 #include "str-vec.h"
 
 #include "error.h"
 #include "ov-base.h"
 #include "ov-typeinfo.h"
 
 class Octave_map;
 class octave_value_list;
@@ -67,20 +68,21 @@ public:
 
   octave_matrix (const octave_matrix& m)
     : octave_base_value (), matrix (m.matrix) { }
 
   ~octave_matrix (void) { }
 
   octave_value *clone (void) { return new octave_matrix (*this); }
 
-#if 0
-  void *operator new (size_t size);
-  void operator delete (void *p, size_t size);
-#endif
+  void *operator new (size_t size)
+    { return allocator.alloc (size); }
+
+  void operator delete (void *p, size_t size)
+    { allocator.free (p, size); }
 
   octave_value *try_narrowing_conversion (void);
 
   octave_value index (const octave_value_list& idx) const;
 
   void assign (const octave_value_list& idx, const Matrix& rhs);
 
   idx_vector index_vector (void) const { return idx_vector (matrix); }
@@ -141,18 +143,22 @@ public:
 
   static void register_type (void)
     { t_id = octave_value_typeinfo::register_type (t_name); }
 
 private:
 
   Matrix matrix;
 
+  static octave_allocator allocator;
+
+  // Type id of matrix objects, set by register_type ().
   static int t_id;
 
+  // Type name of matrix objects, defined in ov-re-mat.cc.
   static const string t_name;
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/src/ov-scalar.cc b/src/ov-scalar.cc
--- a/src/ov-scalar.cc
+++ b/src/ov-scalar.cc
@@ -33,19 +33,24 @@ Software Foundation, 59 Temple Place - S
 #include "oct-obj.h"
 #include "ov-scalar.h"
 #include "ov-re-mat.h"
 #include "ov-typeinfo.h"
 #include "pr-output.h"
 #include "xdiv.h"
 #include "xpow.h"
 
-int octave_scalar::t_id = -1;
+octave_allocator
+octave_scalar::allocator (sizeof (octave_scalar));
 
-const string octave_scalar::t_name ("scalar");
+int
+octave_scalar::t_id (-1);
+
+const string
+octave_scalar::t_name ("scalar");
 
 static inline bool
 valid_scalar_indices (const octave_value_list& args)
 {
   int nargin = args.length ();
 
   for (int i = 0; i < nargin; i++)
     if (! args(i).valid_as_scalar_index ())
diff --git a/src/ov-scalar.h b/src/ov-scalar.h
--- a/src/ov-scalar.h
+++ b/src/ov-scalar.h
@@ -30,16 +30,17 @@ Software Foundation, 59 Temple Place - S
 #include <cstdlib>
 
 #include <string>
 
 class ostream;
 
 #include "lo-utils.h"
 #include "mx-base.h"
+#include "oct-alloc.h"
 #include "str-vec.h"
 
 #include "mappers.h"
 #include "ov-base.h"
 #include "ov-typeinfo.h"
 
 class Octave_map;
 class octave_value_list;
@@ -61,20 +62,21 @@ public:
 
   octave_scalar (const octave_scalar& s)
     : octave_base_value (), scalar (s.scalar) { }
 
   ~octave_scalar (void) { }
 
   octave_value *clone (void) { return new octave_scalar (*this); }
 
-#if 0
-  void *operator new (size_t size);
-  void operator delete (void *p, size_t size);
-#endif
+  void *operator new (size_t size)
+    { return allocator.alloc (size); }
+
+  void operator delete (void *p, size_t size)
+    { allocator.free (p, size); }
 
   octave_value index (const octave_value_list& idx) const;
 
   idx_vector index_vector (void) const { return idx_vector (scalar); }
 
   int rows (void) const { return 1; }
   int columns (void) const { return 1; }
 
@@ -127,20 +129,26 @@ public:
 
   static int static_type_id (void) { return t_id; }
 
   static void register_type (void)
     { t_id = octave_value_typeinfo::register_type (t_name); }
 
 private:
 
+  // The value of this scalar.
   double scalar;
 
+  // For custom memory management.
+  static octave_allocator allocator;
+
+  // Type id of scalar objects, set by register_type().
   static int t_id;
 
+  // Type name of scalar objects, defined in ov-scalar.cc.
   static const string t_name;
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/src/ov-str-mat.h b/src/ov-str-mat.h
--- a/src/ov-str-mat.h
+++ b/src/ov-str-mat.h
@@ -40,17 +40,18 @@ class ostream;
 #include "ov-ch-mat.h"
 #include "ov-typeinfo.h"
 
 class Octave_map;
 class octave_value_list;
 
 class tree_walker;
 
-// Real scalar values.
+// Character matrix values with special properties for use as
+// strings.
 
 class
 octave_char_matrix_str : public octave_char_matrix
 {
 public:
 
   octave_char_matrix_str (void)
     : octave_char_matrix () { }
@@ -72,21 +73,16 @@ public:
 
   octave_char_matrix_str (const octave_char_matrix_str& chms)
     : octave_char_matrix (chms) { }
 
   ~octave_char_matrix_str (void) { }
 
   octave_value *clone (void) { return new octave_char_matrix_str (*this); }
 
-#if 0
-  void *operator new (size_t size);
-  void operator delete (void *p, size_t size);
-#endif
-
   type_conv_fcn numeric_conversion_function (void) const;
 
   octave_value index (const octave_value_list& idx) const;
 
   void assign (const octave_value_list& idx, const charMatrix& rhs);
 
   octave_value all (void) const;
   octave_value any (void) const;
@@ -114,18 +110,20 @@ public:
 
   static int static_type_id (void) { return t_id; }
 
   static void register_type (void)
     { t_id = octave_value_typeinfo::register_type (t_name); }
 
 private:
 
+  // Type id of char_matrix_str objects, set by register_type().
   static int t_id;
 
+  // Type name of char_matrix_strXX objects, defined in ov-str-mat.cc.
   static const string t_name;
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/src/ov-struct.cc b/src/ov-struct.cc
--- a/src/ov-struct.cc
+++ b/src/ov-struct.cc
@@ -29,20 +29,24 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include <iostream.h>
 
 #include "error.h"
 #include "ov-struct.h"
 #include "unwind-prot.h"
 
-int octave_struct::t_id = -1;
+octave_allocator
+octave_struct::allocator (sizeof (octave_struct));
 
-const string octave_struct::t_name ("struct");
+int
+octave_struct::t_id (-1);
 
+const string
+octave_struct::t_name ("struct");
 
 octave_value
 octave_struct::struct_elt_val (const string& nm, bool silent) const
 {
   octave_value retval;
 
   Pix idx = map.seek (nm);
 
diff --git a/src/ov-struct.h b/src/ov-struct.h
--- a/src/ov-struct.h
+++ b/src/ov-struct.h
@@ -32,26 +32,27 @@ Software Foundation, 59 Temple Place - S
 #include <string>
 
 class ostream;
 
 #include "mx-base.h"
 #include "str-vec.h"
 
 #include "error.h"
+#include "oct-alloc.h"
 #include "oct-map.h"
 #include "ov-base.h"
 #include "ov-typeinfo.h"
 
 class Octave_map;
 class octave_value_list;
 
 class tree_walker;
 
-// Real scalar values.
+// Data structures.
 
 class
 octave_struct : public octave_base_value
 {
 public:
 
   octave_struct (void)
     : octave_base_value () { }
@@ -61,20 +62,21 @@ public:
 
   octave_struct (const octave_struct& s)
     : octave_base_value (), map (s.map) { }
 
   ~octave_struct (void) { }
 
   octave_value *clone (void) { return new octave_struct (*this); }
 
-#if 0
-  void *operator new (size_t size);
-  void operator delete (void *p, size_t size);
-#endif
+  void *operator new (size_t size)
+    { return allocator.alloc (size); }
+
+  void operator delete (void *p, size_t size)
+    { allocator.free (p, size); }
 
   octave_value struct_elt_val (const string& nm, bool silent) const;
 
   octave_value& struct_elt_ref (const string& nm);
 
   bool is_defined (void) const { return true; }
 
   bool is_map (void) const { return true; }
@@ -89,20 +91,26 @@ public:
 
   static int static_type_id (void) { return t_id; }
 
   static void register_type (void)
     { t_id = octave_value_typeinfo::register_type (t_name); }
 
 private:
 
+  // The associative array used to manage the structure data.
   Octave_map map;
 
+  // For custom memory management.
+  static octave_allocator allocator;
+
+  // Type id of struct objects, set by register_type().
   static int t_id;
 
+  // Type name of struct objects, defined in ov-struct.cc.
   static const string t_name;
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/src/ov-va-args.h b/src/ov-va-args.h
--- a/src/ov-va-args.h
+++ b/src/ov-va-args.h
@@ -36,38 +36,33 @@ class ostream;
 #include "ov-base.h"
 #include "ov-typeinfo.h"
 
 class Octave_map;
 class octave_value_list;
 
 class tree_walker;
 
-// Real scalar values.
+// A type to represent `all_va_args' as used in function calls.
 
 class
 octave_all_va_args : public octave_base_value
 {
 public:
 
   octave_all_va_args (void)
     : octave_base_value () { }
 
   octave_all_va_args (const octave_all_va_args&)
     : octave_base_value () { }
 
   ~octave_all_va_args (void) { }
 
   octave_value *clone (void) { return new octave_all_va_args (*this); }
 
-#if 0
-  void *operator new (size_t size);
-  void operator delete (void *p, size_t size);
-#endif
-
   bool is_defined (void) const { return true; }
 
   bool is_all_va_args (void) const { return true; }
 
   void print (ostream& os, bool pr_as_read_syntax = false);
 
   int type_id (void) const { return t_id; }
 
@@ -75,18 +70,20 @@ public:
 
   static int static_type_id (void) { return t_id; }
 
   static void register_type (void)
     { t_id = octave_value_typeinfo::register_type (t_name); }
 
 private:
 
+  // Type id of all_va_arg objects, set by register_type().
   static int t_id;
 
+  // Type name of all_va_arg objects, defined in ov-va-args.cc.
   static const string t_name;
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -46,16 +46,21 @@ Software Foundation, 59 Temple Place - S
 
 #include "defun.h"
 #include "gripes.h"
 #include "pager.h"
 #include "pr-output.h"
 #include "utils.h"
 #include "variables.h"
 
+// We are likely to have a lot of octave_value objects to allocate, so
+// make the grow_size large.
+octave_allocator
+octave_value::allocator (sizeof (octave_value), 1024);
+
 // If TRUE, allow assignments like
 //
 //   octave> A(1) = 3; A(2) = 5
 //
 // for A already defined and a matrix type.
 bool Vdo_fortran_indexing;
 
 // Should we allow things like:
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -33,16 +33,17 @@ Software Foundation, 59 Temple Place - S
 
 class ostream;
 
 #include <SLList.h>
 
 #include "Range.h"
 #include "idx-vector.h"
 #include "mx-base.h"
+#include "oct-alloc.h"
 #include "str-vec.h"
 
 #include "error.h"
 #include "pt-exp.h"
 
 class Octave_map;
 class octave_value_list;
 
@@ -153,20 +154,21 @@ public:
       if (rep->count > 1)
 	{
 	  --rep->count;
 	  rep = rep->clone ();
 	  rep->count = 1;
 	}
     }
 
-#if 0
-  void *operator new (size_t size);
-  void operator delete (void *p, size_t size);
-#endif
+  void *operator new (size_t size)
+    { return allocator.alloc (size); }
+
+  void operator delete (void *p, size_t size)
+    { allocator.free (p, size); }
 
   // Simple assignment.
 
   octave_value& operator = (const octave_value& a)
     {
       if (rep != a.rep)
 	{
 	  if (--rep->count == 0)
@@ -387,16 +389,18 @@ public:
   bool print_as_scalar (void);
 
 protected:
 
   octave_value (const octave_xvalue&) : rep (0) { }
 
 private:
 
+  static octave_allocator allocator;
+
   union
     {
       octave_value *freeptr;  // For custom memory management.
       octave_value *rep;      // The real representation.
       int count;              // A reference count.
     };
 
   bool convert_and_assign (const octave_value_list& idx,
diff --git a/src/pt-const.cc b/src/pt-const.cc
--- a/src/pt-const.cc
+++ b/src/pt-const.cc
@@ -55,19 +55,20 @@ Software Foundation, 59 Temple Place - S
 #include "pr-output.h"
 #include "sysdep.h"
 #include "pt-const.h"
 #include "pt-walk.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
 
-// We are likely to have a lot of tree_constants to allocate, so make
-// the grow_size large.
-octave_allocator tree_constant::allocator (sizeof (tree_constant), 1024);
+// We are likely to have a lot of tree_constant objects to allocate,
+// so make the grow_size large.
+octave_allocator
+tree_constant::allocator (sizeof (tree_constant), 1024);
 
 Octave_map
 tree_constant::map_value (void) const
 {
   return val.map_value ();
 }
 
 void
