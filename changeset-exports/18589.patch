# HG changeset patch
# User Eduardo Ramos (edu159) <eduradical951@gmail.com>
# Date 1395491021 -3600
#      Sat Mar 22 13:23:41 2014 +0100
# Node ID 35a5e7740a6dcd6f707551d27fc2763a7e960924
# Parent  5032ac119d52001a26e3bdf28abaf49b1d9a7f63
Added implementation for 4th argument of sprand/sprandn (bug #41839).

* __sprand_impl__.m: Implementation done here

* sprand.m: Added documentation and some tests.

* sprandn.m: Added documentation and some tests.

diff --git a/scripts/sparse/private/__sprand_impl__.m b/scripts/sparse/private/__sprand_impl__.m
--- a/scripts/sparse/private/__sprand_impl__.m
+++ b/scripts/sparse/private/__sprand_impl__.m
@@ -18,65 +18,124 @@
 ## <http://www.gnu.org/licenses/>.
 ##
 ## Original version by Paul Kienzle distributed as free software in the
 ## public domain.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} __sprand_impl__ (@var{s}, @var{randfun})
 ## @deftypefnx {Function File} {} __sprand_impl__ (@var{m}, @var{n}, @var{d}, @var{funname}, @var{randfun})
+## @deftypefnx {Function File} {} __sprand_impl__ (@var{m}, @var{n}, @var{d}, @var{rc}, @var{funname}, @var{randfun})
 ## Undocumented internal function.
 ## @end deftypefn
 
 ## Actual implementation of sprand and sprandn happens here.
 
 function S = __sprand_impl__ (varargin)
 
   if (nargin == 2)
     m = varargin{1};
     randfun = varargin{2};
     [i, j] = find (m);
     [nr, nc] = size (m);
     S = sparse (i, j, randfun (size (i)), nr, nc);
     return;
-  endif
-
-  [m, n, d, funname, randfun] = deal (varargin{:});
+  else
+    if (nargin == 5)
+      [m, n, d, funname, randfun] = deal(varargin{:});
+    else 
+      [m, n, d, rc, funname, randfun] = deal(varargin{:});
+    endif
 
-  if (!(isscalar (m) && m == fix (m) && m > 0))
-    error ("%s: M must be an integer greater than 0", funname);
-  endif
+    if (!(isscalar (m) && m == fix (m) && m > 0))
+      error ("%s: M must be an integer greater than 0", funname);
+    endif
+
+    if (!(isscalar (n) && n == fix (n) && n > 0))
+      error ("%s: N must be an integer greater than 0", funname);
+    endif
+
+    if (d < 0 || d > 1)
+      error ("%s: density D must be between 0 and 1", funname);
+    endif
+
 
-  if (!(isscalar (n) && n == fix (n) && n > 0))
-    error ("%s: N must be an integer greater than 0", funname);
-  endif
+    if (nargin == 5)
+      mn = m*n;
+      k = round (d*mn);
+      if (mn > sizemax ())
+        ## randperm will overflow, so use alternative methods
+
+        idx = unique (fix (rand (min (k*1.01, k+10), 1) * mn)) + 1;
 
-  if (d < 0 || d > 1)
-    error ("%s: density D must be between 0 and 1", funname);
-  endif
+        ## idx contains random numbers in [1,mn]
+        ## generate 1% or 10 more random values than necessary in order to
+        ## reduce the probability that there are less than k distinct
+        ## values; maybe a better strategy could be used but I don't think
+        ## it's worth the price
+        
+        ## actual number of entries in S
+        k = min (length (idx), k);
+        j = floor ((idx(1:k) - 1) / m);
+        i = idx(1:k) - j * m;
+        j++;
+      else
+        idx = randperm (mn, k);
+        [i, j] = ind2sub ([m, n], idx);
+      endif
 
-  mn = m*n;
-  k = round (d*mn);
-  if (mn > sizemax ())
-    ## randperm will overflow, so use alternative methods
+      S = sparse (i, j, randfun (k, 1), m, n);
+    elseif (nargin == 6)
+      ## We assume that we want to reverse A=U*S*V' so firstly S is constructed
+      ## and then U = U1*U2*..Un and V' = V1*V2*..Vn  are seen as Jacobi rotation matrices with angles and
+      ## planes of rotation randomized. In the nth step the density required for A is achieved.
 
-    idx = unique (fix (rand (min (k*1.01, k+10), 1) * mn)) + 1;
-
-    ## idx contains random numbers in [1,mn]
-    ## generate 1% or 10 more random values than necessary in order to
-    ## reduce the probability that there are less than k distinct
-    ## values; maybe a better strategy could be used but I don't think
-    ## it's worth the price
-    
-    ## actual number of entries in S
-    k = min (length (idx), k);
-    j = floor ((idx(1:k) - 1) / m);
-    i = idx(1:k) - j * m;
-    j++;
-  else
-    idx = randperm (mn, k);
-    [i, j] = ind2sub ([m, n], idx);
+      mynnz = round (m * n * d);
+      if (!isscalar(rc)) 
+        ## Only the min(m, n) greater singular values from rc vector are used. Needed to be compliant.
+        if (length (rc) > min (m,n))
+          rc = rc(1:min(m, n));
+        endif
+        S = sparse (diag (sort (rc, 'descend'), m, n));
+      else
+        if(rc < 0 || rc > 1)
+          error ("%s: reciprocal condition number rc must be between 0 and 1", funname);
+        endif
+        ## Generate the singular values randomly and sort them to build S
+        for (i = 1:min(m, n))
+          ## Randon singular values between 1 and rc.
+          v(i) = rand () * (1 - rc) + rc; 
+        endfor
+        v(1) = 1;
+        v(end) = rc;
+        v = sort (v, 'descend');
+        S = sparse (diag (v, m, n));
+      endif
+      while (nnz(S) < mynnz) 
+        [mm, nn] = size(S);
+        rot_angleu = 2 * randfun () * pi;
+        rot_anglev = 2 * randfun () * pi;
+        cu = cos (rot_angleu); cv = cos (rot_anglev); 
+        su = sin (rot_angleu); sv = sin (rot_anglev);
+        ## Rotation related with U
+        i = fix (rand () * m) + 1;
+        do
+          ## If j==i rotation matrix would be no longer that kind
+          j = fix (rand () * m) + 1;   
+        until (j != i)
+        U = sparse (eye (m,m));
+        U(i, i) = cu; U(i, j) = -su;
+        U(j, i) = su; U(j, j) = cu;
+        S = U * S;
+        ## Rotation related with V'
+        i = fix (rand () * nn) + 1;
+        do
+          j = fix (rand () * nn) + 1; 
+        until(j != i)
+        V = sparse (eye (n, n));
+        V(i, i) = cv; V(i, j) = sv;
+        V(j, i) = -sv; V(j, j) = cv;
+        S = S * V;
+      endwhile
+    endif
   endif
-
-  S = sparse (i, j, randfun (k, 1), m, n);
-
 endfunction
 
diff --git a/scripts/sparse/sprand.m b/scripts/sparse/sprand.m
--- a/scripts/sparse/sprand.m
+++ b/scripts/sparse/sprand.m
@@ -16,43 +16,51 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 ##
 ## Original version by Paul Kienzle distributed as free software in the
 ## public domain.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} sprand (@var{m}, @var{n}, @var{d})
+## @deftypefnx  {Function File} {} sprand (@var{m}, @var{n}, @var{d}, @var{rc})
 ## @deftypefnx {Function File} {} sprand (@var{s})
 ## Generate a random sparse matrix.  The size of the matrix will be
 ## @var{m} by @var{n}, with a density of values given by @var{d}.
 ## @var{d} should be between 0 and 1.  Values will be uniformly
 ## distributed between 0 and 1.
 ##
 ## If called with a single matrix argument, a random sparse matrix is
 ## generated wherever the matrix @var{S} is non-zero.
+##
+## If called with the rc parameter as a scalar, a random sparse matrix with a
+## reciprocal condition number rc is generated. If rc is a vector, then it 
+## contains the first singular values of the matrix generated (length(rc) <= min(m, n)).
+##
 ## @seealso{sprandn, sprandsym}
 ## @end deftypefn
 
 ## Author: Paul Kienzle <pkienzle@users.sf.net>
 ##
 ## Changelog:
 ##
 ## Piotr Krzyzanowski <przykry2004@users.sf.net>
 ##      2004-09-27      use Paul's hint to allow larger random matrices
 ##                      at the price of sometimes lower density than desired
 ## David Bateman
 ##      2004-10-20      Texinfo help and copyright message
 
-function S = sprand (m, n, d)
+function S = sprand (m, n, d, rc)
 
   if (nargin == 1 )
     S = __sprand_impl__ (m, @rand);
   elseif ( nargin == 3)
     S = __sprand_impl__ (m, n, d, "sprand", @rand);
+  elseif (nargin == 4)
+    S = __sprand_impl__ (m, n, d, rc, "sprand", @rand);
   else
     print_usage ();
   endif
 
 endfunction
 
 
 %!test
@@ -63,25 +71,40 @@ endfunction
 %% Test 1-input calling form
 %!test
 %! s = sprand (sparse ([1 2 3], [3 2 3], [2 2 2]));
 %! [i, j, v] = find (s);
 %! assert (sort (i), [1 2 3]');
 %! assert (sort (j), [2 3 3]');
 %! assert (all (v > 0 & v < 1));
 
+%% Test 4-input calling form
+%!test
+%! d = rand();
+%! s1 = sprand (100, 100, d, 0.4);
+%! rc = [5, 4, 3, 2, 1, 0.1];
+%! s2 = sprand (100, 100, d, rc);
+%! s3 = sprand (6, 4, d, rc);
+%! assert (svd (s2)'(1:length (rc)), rc, sqrt (eps)); 
+%! assert (1/cond (s1), 0.4, sqrt (eps));
+%! assert (nnz (s1) / (100*100), d, 0.02);
+%! assert (nnz (s2) / (100*100), d, 0.02); 
+%! assert (svd (s3)', [5 4 3 2], sqrt (eps));
+
 %% Test input validation
 %!error sprand ()
 %!error sprand (1, 2)
 %!error sprand (1, 2, 3, 4)
 %!error sprand (ones (3), 3, 0.5)
 %!error sprand (3.5, 3, 0.5)
 %!error sprand (0, 3, 0.5)
 %!error sprand (3, ones (3), 0.5)
 %!error sprand (3, 3.5, 0.5)
 %!error sprand (3, 0, 0.5)
 %!error sprand (3, 3, -1)
 %!error sprand (3, 3, 2)
+%!error sprand (2, 2, 0.2, -1)
+%!error sprand (2, 2, 0.2, 2)
 
 %% Test very large, very low density matrix doesn't fail 
 %!test
 %! s = sprand(1e6,1e6,1e-7);
 
diff --git a/scripts/sparse/sprandn.m b/scripts/sparse/sprandn.m
--- a/scripts/sparse/sprandn.m
+++ b/scripts/sparse/sprandn.m
@@ -16,35 +16,44 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 ##
 ## Original version by Paul Kienzle distributed as free software in the
 ## public domain.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} sprandn (@var{m}, @var{n}, @var{d})
+## @deftypefnx {Function File} {} sprandn (@var{m}, @var{n}, @var{d}, @var{rc})
 ## @deftypefnx {Function File} {} sprandn (@var{s})
 ## Generate a random sparse matrix.  The size of the matrix will be
 ## @var{m} by @var{n}, with a density of values given by @var{d}.
 ## @var{d} should be between 0 and 1.  Values will be normally
 ## distributed with mean of zero and variance 1.
 ##
 ## If called with a single matrix argument, a random sparse matrix is
 ## generated wherever the matrix @var{S} is non-zero.
+## 
+## If called with the rc parameter, then a random sparse matrix with a
+## reciprocal condition number rc is generated if rc is scalar. If rc 
+## is a vector, then it contains the first singular values of the matrix
+## generated (length(rc) <= min(m, n)).
+## 
 ## @seealso{sprand, sprandsym}
 ## @end deftypefn
 
 ## Author: Paul Kienzle <pkienzle@users.sf.net>
 
-function S = sprandn (m, n, d)
+function S = sprandn (m, n, d, rc)
 
   if (nargin == 1 )
     S = __sprand_impl__ (m, @randn);
   elseif ( nargin == 3)
     S = __sprand_impl__ (m, n, d, "sprandn", @randn);
+  elseif (nargin == 4)
+    S = __sprand_impl__ (m, n, d, rc, "sprandn", @randn);
   else
     print_usage ();
   endif
 
 endfunction
 
 
 %!test
@@ -54,25 +63,40 @@ endfunction
 
 %% Test 1-input calling form
 %!test
 %! s = sprandn (sparse ([1 2 3], [3 2 3], [2 2 2]));
 %! [i, j] = find (s);
 %! assert (sort (i), [1 2 3]');
 %! assert (sort (j), [2 3 3]');
 
+%% Test 4-input calling form
+%!test
+%! d = rand();
+%! s1 = sprandn (100, 100, d, 0.4);
+%! rc = [5, 4, 3, 2, 1, 0.1];
+%! s2 = sprandn (100, 100, d, rc);
+%! s3 = sprandn (6, 4, d, rc);
+%! assert (svd (s2)'(1:length (rc)), rc, sqrt (eps)); 
+%! assert (1/cond (s1), 0.4, sqrt (eps));
+%! assert (nnz (s1) / (100*100), d, 0.02); 
+%! assert (nnz (s2) / (100*100), d, 0.02); 
+%! assert (svd (s3)', [5 4 3 2], sqrt (eps));
+
 %% Test input validation
 %!error sprandn ()
 %!error sprandn (1, 2)
 %!error sprandn (1, 2, 3, 4)
 %!error sprandn (ones (3), 3, 0.5)
 %!error sprandn (3.5, 3, 0.5)
 %!error sprandn (0, 3, 0.5)
 %!error sprandn (3, ones (3), 0.5)
 %!error sprandn (3, 3.5, 0.5)
 %!error sprandn (3, 0, 0.5)
 %!error sprandn (3, 3, -1)
 %!error sprandn (3, 3, 2)
+%!error sprandn (2, 2, 0.2, -1)
+%!error sprandn (2, 2, 0.2, 2)
 
 %% Test very large, very low density matrix doesn't fail 
 %!test
 %! s = sprandn(1e6,1e6,1e-7);
 
