# HG changeset patch
# User jwe
# Date 879494355 0
#      Fri Nov 14 07:59:15 1997 +0000
# Node ID ff8b4d6371b313759165087f60ef90b91add7800
# Parent  528f4270e904b880c1f31b4d9f8ab9b1ee7f1db2
[project @ 1997-11-14 07:59:14 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,27 @@
+Fri Nov 14 01:53:13 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* lex.l (have_continuation, have_ellipsis_continuation): Declare
+	arg as bool, not int.  Change callers.
+
+	* lex.l (Vbackslash_escapes): New static variable.
+	(backslash_escapes): New function.
+	(do_string_escapes): Return immediately if ! Vbackslash_escapes.
+	(eat_whitespace, eat_continuation): Only call have_continuation if
+	Vbackslash_escapes.
+	(handle_string): Backslash is only special if Vbackslash_escapes.
+	(symbols_of_lex): Add DEFVAR for backslash_escapes.
+	* octave.cc (maximum_braindamage): Set backslash_escapes to 0.
+
 Thu Nov 13 16:20:40 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* variables.cc (Fexist): Also return 2 if NAME is a regular file
+	somewhere in the LOADPATH.
+
 	* data.cc (sumsq): Fix doc string.
 
 	* parse.y (Fsource): Call parse_fcn_file, not parse_and_execute.
 
 Tue Oct  7 16:51:01 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* defun-int.h (DEFINE_FUN_INSTALLER_FUN): Set installed to true
 	after installing the function.
diff --git a/src/defun-int.h b/src/defun-int.h
--- a/src/defun-int.h
+++ b/src/defun-int.h
@@ -95,17 +95,17 @@ alias_builtin (const string& alias, cons
   bool \
   FS ## name (void) \
   { \
     static bool installed = false; \
     if (! installed) \
       { \
 	check_version (OCTAVE_VERSION, #name); \
 	install_builtin_function (F ## name, #name, doc); \
-	installed = true;
+	installed = true; \
       } \
     return installed; \
   }
 
 #define DECLARE_FUN(name, args_name, nargout_name) \
   octave_value_list \
   F ## name (const octave_value_list& args_name, int nargout_name)
 
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -154,16 +154,19 @@ static brace_paren_nesting_level nesting
 // comma between identifiers and `('.  For example, the statement
 //
 //   [eye (2)]
 //
 // will result in a call to `eye' with the argument `2'.
 
 static int Vwhitespace_in_literal_matrix;
 
+// Should Octave treat backslashes in strings as escapes that
+// introduce special characters like newline (\n), tab (\t), etc.?
+static bool Vbackslash_escapes;
 
 // Forward declarations for functions defined at the bottom of this
 // file.
 
 static void do_string_escapes (char *s);
 static void fixup_column_count (char *s);
 static void do_comma_insert_check (void);
 static int is_plot_keyword (const string& s);
@@ -174,18 +177,18 @@ static void grab_help_text (void);
 static bool match_any (char c, const char *s);
 static bool next_token_is_bin_op (int spc_prev, char *yytext);
 static bool next_token_is_postfix_unary_op (int spc_prev, char *yytext);
 static string strip_trailing_whitespace (char *s);
 static void handle_number (char *yytext);
 static int handle_string (char delim, int text_style = 0);
 static int handle_close_brace (int spc_gobbled);
 static int handle_identifier (const string& tok, int spc_gobbled);
-static bool have_continuation (int trailing_comments_ok = 1);
-static bool have_ellipsis_continuation (int trailing_comments_ok = 1);
+static bool have_continuation (bool trailing_comments_ok = true);
+static bool have_ellipsis_continuation (bool trailing_comments_ok = true);
 static yum_yum eat_whitespace (void);
 static yum_yum eat_continuation (void);
 
 %}
 
 D	[0-9]
 S	[ \t]
 NL	((\n)|(\r\n))
@@ -716,16 +719,19 @@ reset_parser (void)
   lexer_flags.init ();
 }
 
 // Replace backslash escapes in a string with the real values.
 
 static void
 do_string_escapes (char *s)
 {
+  if (! Vbackslash_escapes)
+    return;
+
   char *p1 = s;
   char *p2 = s;
 
   while (*p2 != '\0')
     {
       if (*p2 == '\\' && *(p2+1) != '\0')
 	{
 	  switch (*++p2)
@@ -1362,17 +1368,17 @@ eat_whitespace (void)
 		goto done;
 	    }
 
 	case '\\':
 	  if (in_comment)
 	    break;
 	  else
 	    {
-	      if (have_continuation ())
+	      if (Vbackslash_escapes && have_continuation ())
 		break;
 	      else
 		goto done;
 	    }
 
 	default:
 	  if (in_comment)
 	    break;
@@ -1428,17 +1434,17 @@ handle_number (char *yytext)
 // and including the new line character.
 //
 // Match whitespace only, followed by a comment character or newline.
 // Once a comment character is found, discard all input until newline.
 // If non-whitespace characters are found before comment
 // characters, return 0.  Otherwise, return 1.
 
 static bool
-have_continuation (int trailing_comments_ok)
+have_continuation (bool trailing_comments_ok)
 {
   ostrstream buf;
 
   bool in_comment = false;
   char c;
   while ((c = yyinput ()) != EOF)
     {
       buf << (char) c;
@@ -1467,35 +1473,36 @@ have_continuation (int trailing_comments
 	    goto cleanup;
 	  break;
 	}
     }
 
   yyunput (c, yytext);
   return false;
 
- cleanup:
+cleanup:
   buf << ends;
   char *s = buf.str ();
   if (s)
     {
       int len = strlen (s);
       while (len--)
 	yyunput (s[len], yytext);
     }
   delete [] s;
+
   return false;
 }
 
 // We have seen a `.' and need to see if it is the start of a
 // continuation.  If so, this eats it, up to and including the new
 // line character.
 
 static bool
-have_ellipsis_continuation (int trailing_comments_ok)
+have_ellipsis_continuation (bool trailing_comments_ok)
 {
   char c1 = yyinput ();
   if (c1 == '.')
     {
       char c2 = yyinput ();
       if (c2 == '.' && have_continuation (trailing_comments_ok))
 	return true;
       else
@@ -1516,17 +1523,17 @@ have_ellipsis_continuation (int trailing
 // Return value is the same as described for eat_whitespace().
 
 static yum_yum
 eat_continuation (void)
 {
   int retval = ATE_NOTHING;
   int c = yyinput ();
   if ((c == '.' && have_ellipsis_continuation ())
-      || (c == '\\' && have_continuation ()))
+      || (c == '\\' && Vbackslash_escapes && have_continuation ()))
     retval = eat_whitespace ();
   else
     yyunput (c, yytext);
 
   return retval;
 }
 
 static int
@@ -1536,38 +1543,38 @@ handle_string (char delim, int text_styl
 
   int c;
   int escape_pending = 0;
 
   while ((c = yyinput ()) != EOF)
     {
       current_input_column++;
 
-      if (c == '\\')
+      if (c == '\\' && Vbackslash_escapes)
 	{
 	  if (escape_pending)
 	    {
 	      buf << (char) c;
 	      escape_pending = 0;
 	    }
 	  else
 	    {
-	      if (have_continuation (0))
+	      if (have_continuation (false))
 		escape_pending = 0;
 	      else
 		{
 		  buf << (char) c;
 		  escape_pending = 1;
 		}
 	    }
 	  continue;
 	}
       else if (c == '.')
 	{
-	  if (! have_ellipsis_continuation (0))
+	  if (! have_ellipsis_continuation (false))
 	    buf << (char) c;
 	}
       else if (c == '\n')
 	{
 	  error ("unterminated string constant");
 	  break;
 	}
       else if (c == delim)
@@ -1950,16 +1957,24 @@ lexical_feedback::init (void)
   // Not initially looking at indirect references.
   looking_at_indirect_ref = false;
 
   // Quote marks strings intially.
   quote_is_transpose = false;
 }
 
 int
+backslash_escapes (void)
+{
+  Vbackslash_escapes = check_preference ("backslash_escapes");
+
+  return 0;
+}
+
+int
 whitespace_in_literal_matrix (void)
 {
   int pref = 0;
 
   string val = builtin_string_variable ("whitespace_in_literal_matrix");
 
   if (! val.empty ())
     {
@@ -1972,16 +1987,20 @@ whitespace_in_literal_matrix (void)
   Vwhitespace_in_literal_matrix = pref;
 
   return 0;
 }
 
 void
 symbols_of_lex (void)
 {
+  DEFVAR (backslash_escapes, 1.0, 0, backslash_escapes,
+    "if nonzero, Octave recognizes backslashes in strings as escapes that\n\
+introduce special characters like newline (\\n), tab (\\t), etc.");
+
   DEFVAR (whitespace_in_literal_matrix, "", 0, whitespace_in_literal_matrix,
     "control auto-insertion of commas and semicolons in literal matrices");
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -320,16 +320,17 @@ initialize_error_handlers ()
 
 // What happens on --traditional.
 
 static void
 maximum_braindamage (void)
 {
   bind_builtin_variable ("PS1", ">> ");
   bind_builtin_variable ("PS2", "");
+  bind_builtin_variable ("backslash_escapes", 0.0);
   bind_builtin_variable ("beep_on_error", 1.0);
   bind_builtin_variable ("default_eval_print_flag", 0.0);
   bind_builtin_variable ("default_save_format", "mat-binary");
   bind_builtin_variable ("define_all_return_values", 1.0);
   bind_builtin_variable ("do_fortran_indexing", 1.0);
   bind_builtin_variable ("empty_list_elements_ok", 1.0);
   bind_builtin_variable ("implicit_str_to_num_ok", 1.0);
   bind_builtin_variable ("ok_to_lose_imaginary_part", 1.0);
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -393,17 +393,22 @@ DEFUN (exist, args, ,
   "exist (NAME): check if variable or file exists\n\
 \n\
 returns:\n\
 \n\
    0 : NAME is undefined\n\
    1 : NAME is a variable\n\
    2 : NAME is a function\n\
    3 : NAME is a .oct file in the current LOADPATH\n\
-   5 : NAME is a built-in function")
+   5 : NAME is a built-in function\n\
+\n\
+This function also returns 2 if a regular file called NAME exists in\n\
+Octave's LOADPATH.  If you want information about other types of\n\
+files, you should use some combination of the functions file_in_path\n\
+and stat instead.")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin != 1)
     {
       print_usage ("exist");
@@ -461,20 +466,25 @@ returns:\n\
 	  path = oct_file_in_path (name);
 
 	  if (path.length () > 0)
 	    {
 	      retval = 3.0;
 	    }
 	  else
 	    {
-	      file_stat fs (name);
+	      string file_name = file_in_path (name, "");
 
-	      if (fs && fs.is_reg ())
-		retval = 2.0;
+	      if (! file_name.empty ())
+		{
+		  file_stat fs (file_name);
+
+		  if (fs && fs.is_reg ())
+		    retval = 2.0;
+		}
 	    }
 	}
     }
 
   return retval;
 }
 
 // Is there a corresponding function file that is newer than the
