# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1285838111 14400
#      Thu Sep 30 05:15:11 2010 -0400
# Node ID 61a6c99d8ff791a4ba9fd767b70833d78b222e8b
# Parent  e378c0176a38203b1babb2c792a18e2565376d1a
gcd.cc: style fixes

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,14 +1,19 @@
+2010-09-30  John W. Eaton  <jwe@octave.org>
+
+	* DLD-FUNCTIONS/gcd.cc: Style fixes.
+
 2010-09-30  John W. Eaton  <jwe@octave.org>
 
 	* oct-errno.cc.in (octave_errno::do_list, octave_errno::list):
 	Use octave_scalar_map instead of Octave_map.
 
 2010-09-30  Jordi Guti√©rrez Hermoso  <jordigh@gmail.com>
+
 	* DLD-FUNCTIONS/gcd.cc (divide): New function, complex integer
 	division with remainder.
 	(simple_gcd): Overload for complex values.
 	(extended_gcd): Ditto.
 	(do_simple_gcd): Dispatch for complex gcd.
 	(do_extended_gcd): Ditto.
 	(Fgcd): Mention that complex gcd is now also possible.
 
diff --git a/src/DLD-FUNCTIONS/gcd.cc b/src/DLD-FUNCTIONS/gcd.cc
--- a/src/DLD-FUNCTIONS/gcd.cc
+++ b/src/DLD-FUNCTIONS/gcd.cc
@@ -38,169 +38,194 @@ along with Octave; see the file COPYING.
 
 static double
 simple_gcd (double a, double b)
 {
   if (! xisinteger (a) || ! xisinteger (b))
     (*current_liboctave_error_handler)
       ("gcd: all values must be integers");
 
-  double aa = fabs (a), bb = fabs (b);
+  double aa = fabs (a);
+  double bb = fabs (b);
+
   while (bb != 0)
     {
       double tt = fmod (aa, bb);
-      aa = bb; bb = tt;
+      aa = bb;
+      bb = tt;
     }
 
   return aa;
 }
 
 // Don't use the Complex and FloatComplex typedefs because we need to
 // refer to the actual float precision FP in the body (and when gcc
 // implements template aliases from C++0x, can do a small fix here).
 template <typename FP>
 static void
 divide(const std::complex<FP>& a, const std::complex<FP>& b,
        std::complex<FP>& q, std::complex<FP>& r)
 {
-  FP qr = floor((a/b).real() + 0.5);
-  FP qi = floor((a/b).imag() + 0.5);
-  q = std::complex<FP>(qr,qi);
+  FP qr = floor ((a/b).real () + 0.5);
+  FP qi = floor ((a/b).imag () + 0.5);
+
+  q = std::complex<FP> (qr, qi);
+
   r = a - q*b;
 }
 
 template <typename FP>
 static std::complex<FP>
 simple_gcd (const std::complex<FP>& a, const std::complex<FP>& b)
 {
-  if ( ! xisinteger (a.real ()) || ! xisinteger(a.imag ()) ||
-       ! xisinteger (b.real ()) || ! xisinteger(b.imag ()) )
+  if (! xisinteger (a.real ()) || ! xisinteger(a.imag ())
+      || ! xisinteger (b.real ()) || ! xisinteger(b.imag ()))
     (*current_liboctave_error_handler)
       ("gcd: all complex parts must be integers");
 
-  std::complex<FP> aa = a, bb = b;
+  std::complex<FP> aa = a;
+  std::complex<FP> bb = b;
 
-  if ( abs(aa) < abs(bb) )
-    {
-      std::swap(aa,bb);
-    }
+  if (abs (aa) < abs (bb))
+    std::swap (aa, bb);
 
-  while ( abs(bb) != 0)
+  while (abs (bb) != 0)
     {
       std::complex<FP> qq, rr;
       divide (aa, bb, qq, rr);
       aa = bb;
       bb = rr;
     }
 
   return aa;
 }
 
 template <class T>
 static octave_int<T>
 simple_gcd (const octave_int<T>& a, const octave_int<T>& b)
 {
-  T aa = a.abs ().value (), bb = b.abs ().value ();
+  T aa = a.abs ().value ();
+  T bb = b.abs ().value ();
+
   while (bb != 0)
     {
       T tt = aa % bb;
-      aa = bb; bb = tt;
+      aa = bb;
+      bb = tt;
     }
 
   return aa;
 }
 
 static double
 extended_gcd (double a, double b, double& x, double& y)
 {
   if (! xisinteger (a) || ! xisinteger (b))
     (*current_liboctave_error_handler)
       ("gcd: all values must be integers");
 
-  double aa = fabs (a), bb = fabs (b);
-  double xx = 0, lx = 1, yy = 1, ly = 0;
+  double aa = fabs (a);
+  double bb = fabs (b);
+
+  double xx = 0, yy = 1;
+  double lx = 1, ly = 0;
+
   while (bb != 0)
     {
       double qq = floor (aa / bb);
       double tt = fmod (aa, bb);
-      aa = bb; bb = tt;
+
+      aa = bb;
+      bb = tt;
 
       double tx = lx - qq*xx;
-      lx = xx; xx = tx;
+      lx = xx;
+      xx = tx;
 
       double ty = ly - qq*yy;
-      ly = yy; yy = ty;
+      ly = yy;
+      yy = ty;
     }
 
   x = a >= 0 ? lx : -lx;
   y = b >= 0 ? ly : -ly;
 
   return aa;
 }
 
 template <typename FP>
 static std::complex<FP>
 extended_gcd (const std::complex<FP>& a, const std::complex<FP>& b,
               std::complex<FP>& x, std::complex<FP>& y)
 {
-  if ( ! xisinteger (a.real ()) || ! xisinteger(a.imag ()) ||
-       ! xisinteger (b.real ()) || ! xisinteger(b.imag ()) )
+  if (! xisinteger (a.real ()) || ! xisinteger(a.imag ())
+      || ! xisinteger (b.real ()) || ! xisinteger(b.imag ()))
     (*current_liboctave_error_handler)
       ("gcd: all complex parts must be integers");
 
   std::complex<FP> aa = a, bb = b;
   bool swapped = false;
-  if ( abs(aa) < abs(bb) )
+  if (abs (aa) < abs (bb))
     {
-      std::swap(aa,bb);
+      std::swap (aa, bb);
       swapped = true;
     }
 
-  std::complex<FP> xx = 0, lx = 1, yy = 1, ly = 0;
-  while ( abs(bb) != 0)
+  std::complex<FP> xx = 0, lx = 1;
+  std::complex<FP> yy = 1, ly = 0;
+
+  while (abs(bb) != 0)
     {
       std::complex<FP> qq, rr;
       divide (aa, bb, qq, rr);
-      aa = bb; bb = rr;
+      aa = bb;
+      bb = rr;
 
       std::complex<FP> tx = lx - qq*xx;
-      lx = xx; xx = tx;
+      lx = xx;
+      xx = tx;
 
       std::complex<FP> ty = ly - qq*yy;
-      ly = yy; yy = ty;
+      ly = yy;
+      yy = ty;
     }
 
   x = lx;
   y = ly;
+
   if (swapped)
-    {
-      std::swap(x,y);
-    }
+    std::swap (x, y);
 
   return aa;
 }
 
 template <class T>
 static octave_int<T>
 extended_gcd (const octave_int<T>& a, const octave_int<T>& b,
               octave_int<T>& x, octave_int<T>& y)
 {
-  T aa = a.abs ().value (), bb = b.abs ().value ();
-  T xx = 0, lx = 1, yy = 1, ly = 0;
+  T aa = a.abs ().value ();
+  T bb = b.abs ().value ();
+  T xx = 0, lx = 1;
+  T yy = 1, ly = 0;
+
   while (bb != 0)
     {
       T qq = aa / bb;
       T tt = aa % bb;
-      aa = bb; bb = tt;
+      aa = bb;
+      bb = tt;
 
       T tx = lx - qq*xx;
-      lx = xx; xx = tx;
+      lx = xx;
+      xx = tx;
 
       T ty = ly - qq*yy;
-      ly = yy; yy = ty;
+      ly = yy;
+      yy = ty;
     }
 
   x = octave_int<T> (lx) * a.signum ();
   y = octave_int<T> (ly) * b.signum ();
 
   return aa;
 }
 
@@ -238,39 +263,46 @@ do_simple_gcd (const octave_value& a, co
   switch (btyp)
     {
     case btyp_double:
       if (a.is_sparse_type () && b.is_sparse_type ())
         {
           retval = do_simple_gcd<SparseMatrix> (a, b);
           break;
         }
-      else { } // fall through!
+      // fall through!
+
     case btyp_float:
       retval = do_simple_gcd<NDArray> (a, b);
       break;
+
 #define MAKE_INT_BRANCH(X) \
     case btyp_ ## X: \
       retval = do_simple_gcd<X ## NDArray> (a, b); \
       break
+
     MAKE_INT_BRANCH (int8);
     MAKE_INT_BRANCH (int16);
     MAKE_INT_BRANCH (int32);
     MAKE_INT_BRANCH (int64);
     MAKE_INT_BRANCH (uint8);
     MAKE_INT_BRANCH (uint16);
     MAKE_INT_BRANCH (uint32);
     MAKE_INT_BRANCH (uint64);
+
 #undef MAKE_INT_BRANCH
+
     case btyp_complex:
-      retval = do_simple_gcd<ComplexNDArray> (a,b);
+      retval = do_simple_gcd<ComplexNDArray> (a, b);
       break;
+
     case btyp_float_complex:
-      retval = do_simple_gcd<FloatComplexNDArray> (a,b);
+      retval = do_simple_gcd<FloatComplexNDArray> (a, b);
       break;
+
     default:
       error ("gcd: invalid class combination for gcd: %s and %s\n",
              a.class_name ().c_str (), b.class_name ().c_str ());
     }
 
   if (btyp == btyp_float)
     retval = retval.float_array_value ();
 
@@ -303,74 +335,85 @@ do_extended_gcd (const octave_value& a, 
       dim_vector dv = aa.dims ();
       if (aa.numel () == 1)
         dv = bb.dims ();
       else if (bb.numel () != 1 && bb.dims () != dv)
         gripe_nonconformant ("gcd", a.dims (), b.dims ());
 
       NDA gg (dv), xx (dv), yy (dv);
 
-      const T *aptr = aa.fortran_vec (), *bptr = bb.fortran_vec ();
+      const T *aptr = aa.fortran_vec ();
+      const T *bptr = bb.fortran_vec ();
 
-      bool inca = aa.numel () != 1, incb = bb.numel () != 1;
+      bool inca = aa.numel () != 1;
+      bool incb = bb.numel () != 1;
 
       T *gptr = gg.fortran_vec ();
       T *xptr = xx.fortran_vec (), *yptr = yy.fortran_vec ();
 
       octave_idx_type n = gg.numel ();
       for (octave_idx_type i = 0; i < n; i++)
         {
           octave_quit ();
 
           *gptr++ = extended_gcd (*aptr, *bptr, *xptr++, *yptr++);
+
           aptr += inca;
           bptr += incb;
         }
 
       x = xx;
       y = yy;
+
       retval = gg;
     }
 
   return retval;
 }
 
 // Dispatcher
 static octave_value
 do_extended_gcd (const octave_value& a, const octave_value& b,
                  octave_value& x, octave_value& y)
 {
   octave_value retval;
+
   builtin_type_t btyp = btyp_mixed_numeric (a.builtin_type (),
                                             b.builtin_type ());
   switch (btyp)
     {
     case btyp_double:
     case btyp_float:
       retval = do_extended_gcd<NDArray> (a, b, x, y);
       break;
+
 #define MAKE_INT_BRANCH(X) \
     case btyp_ ## X: \
       retval = do_extended_gcd<X ## NDArray> (a, b, x, y); \
       break
+
     MAKE_INT_BRANCH (int8);
     MAKE_INT_BRANCH (int16);
     MAKE_INT_BRANCH (int32);
     MAKE_INT_BRANCH (int64);
     MAKE_INT_BRANCH (uint8);
     MAKE_INT_BRANCH (uint16);
     MAKE_INT_BRANCH (uint32);
     MAKE_INT_BRANCH (uint64);
+
 #undef MAKE_INT_BRANCH
+
     case btyp_complex:
       retval = do_extended_gcd<ComplexNDArray> (a, b, x, y);
       break;
+
     case btyp_float_complex:
       retval = do_extended_gcd<FloatComplexNDArray> (a, b, x, y);
       break;
+
     default:
       error ("gcd: invalid class combination for gcd: %s and %s\n",
              a.class_name ().c_str (), b.class_name ().c_str ());
     }
 
   // For consistency.
   if (! error_state && a.is_sparse_type () && b.is_sparse_type ())
     {
@@ -384,17 +427,16 @@ do_extended_gcd (const octave_value& a, 
       retval = retval.float_array_value ();
       x = x.float_array_value ();
       y = y.float_array_value ();
     }
 
   return retval;
 }
 
-
 DEFUN_DLD (gcd, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{g} =} gcd (@var{a1}, @var{a2}, @dots{})\n\
 @deftypefnx {Loadable Function} {[@var{g}, @var{v1}, @dots{}] =} gcd (@var{a1}, @var{a2}, @dots{})\n\
 \n\
 Compute the greatest common divisor of @var{a1}, @var{a2}, @dots{}. If more\n\
 than one argument is given all arguments must be the same size or scalar.\n\
   In this case the greatest common divisor is calculated for each element\n\
@@ -426,41 +468,47 @@ that,\n\
 @end example\n\
 \n\
 @end ifnottex\n\
 \n\
 @seealso{lcm, factor}\n\
 @end deftypefn")
 {
   octave_value_list retval;
+
   int nargin = args.length ();
 
   if (nargin > 1)
     {
       if (nargout > 1)
         {
           retval.resize (nargin + 1);
+
           retval(0) = do_extended_gcd (args(0), args(1), retval(1), retval(2));
+
           for (int j = 2; j < nargin; j++)
             {
               octave_value x;
               retval(0) = do_extended_gcd (retval(0), args(j),
                                            x, retval(j+1));
               for (int i = 0; i < j; i++)
                 retval(i+1).assign (octave_value::op_el_mul_eq, x);
+
               if (error_state)
                 break;
             }
         }
       else
         {
           retval(0) = do_simple_gcd (args(0), args(1));
+
           for (int j = 2; j < nargin; j++)
             {
               retval(0) = do_simple_gcd (retval(0), args(j));
+
               if (error_state)
                 break;
             }
         }
     }
   else
     print_usage ();
 
