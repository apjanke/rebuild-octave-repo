# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1433892345 25200
#      Tue Jun 09 16:25:45 2015 -0700
# Branch stable
# Node ID 7fa170cc14fec67c0ef9d96eef2ae8faca77793c
# Parent  c4f436483e49180d1bb52b627fac3395d1d41d55
Return correct hex value for printf when used with string inputs (bug #45263).

* oct-stream.cc (ok_for_signed_int_conv): Return true for strings.

* ov-ch-mat.cc (int64_scalar_value, uint64_scalar_value): New functions to
return int64 or uint64 values from a character matrix octave_value.

ov-ch-mat.h: (int64_scalar_value, uint64_scalar_value): Declare new functions
in header file.

diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -2430,17 +2430,17 @@ is_nan_or_inf (const octave_value& val)
 }
 
 static bool
 ok_for_signed_int_conv (const octave_value& val)
 {
   uint64_t limit = std::numeric_limits<int64_t>::max ();
 
   if (val.is_string ())
-    return false;
+    return true;
   else if (val.is_integer_type ())
     {
       if (val.is_uint64_type ())
         {
           octave_uint64 ival = val.uint64_scalar_value ();
 
           if (ival.value () <= limit)
             return true;
@@ -2458,17 +2458,17 @@ ok_for_signed_int_conv (const octave_val
 
   return false;
 }
 
 static bool
 ok_for_unsigned_int_conv (const octave_value& val)
 {
   if (val.is_string ())
-    return false;
+    return true;
   else if (val.is_integer_type ())
     {
       // Easier than dispatching here...
 
       octave_value ov_is_ge_zero
         = do_binary_op (octave_value::op_ge, val, octave_value (0.0));
 
       return ov_is_ge_zero.is_true ();
diff --git a/libinterp/octave-value/ov-ch-mat.cc b/libinterp/octave-value/ov-ch-mat.cc
--- a/libinterp/octave-value/ov-ch-mat.cc
+++ b/libinterp/octave-value/ov-ch-mat.cc
@@ -82,16 +82,52 @@ octave_char_matrix::float_value (bool) c
       retval = static_cast<unsigned char> (matrix (0, 0));
     }
   else
     gripe_invalid_conversion ("character matrix", "real scalar");
 
   return retval;
 }
 
+octave_int64
+octave_char_matrix::int64_scalar_value () const
+{
+  octave_int64 retval = 0;
+
+  if (rows () > 0 && columns () > 0)
+    {
+      gripe_implicit_conversion ("Octave:array-to-scalar",
+                                 "character matrix", "int64 scalar");
+
+      retval = octave_int64 (matrix (0, 0));
+    }
+  else
+    gripe_invalid_conversion ("character matrix", "int64 scalar");
+
+  return retval;
+}
+
+octave_uint64
+octave_char_matrix::uint64_scalar_value () const
+{
+  octave_uint64 retval = 0;
+
+  if (rows () > 0 && columns () > 0)
+    {
+      gripe_implicit_conversion ("Octave:array-to-scalar",
+                                 "character matrix", "uint64 scalar");
+
+      retval = octave_uint64 (matrix (0, 0));
+    }
+  else
+    gripe_invalid_conversion ("character matrix", "uint64 scalar");
+
+  return retval;
+}
+
 Complex
 octave_char_matrix::complex_value (bool) const
 {
   double tmp = lo_ieee_nan_value ();
 
   Complex retval (tmp, tmp);
 
   if (rows () > 0 && columns () > 0)
diff --git a/libinterp/octave-value/ov-ch-mat.h b/libinterp/octave-value/ov-ch-mat.h
--- a/libinterp/octave-value/ov-ch-mat.h
+++ b/libinterp/octave-value/ov-ch-mat.h
@@ -31,16 +31,17 @@ along with Octave; see the file COPYING.
 
 #include "mx-base.h"
 #include "str-vec.h"
 
 #include "error.h"
 #include "ov.h"
 #include "ov-base.h"
 #include "ov-base-mat.h"
+#include "ov-int64.h"
 #include "ov-re-mat.h"
 #include "ov-typeinfo.h"
 
 class octave_value_list;
 
 class tree_walker;
 
 // Character matrix values.
@@ -100,16 +101,19 @@ public:
   float float_value (bool = false) const;
 
   double scalar_value (bool frc_str_conv = false) const
   { return double_value (frc_str_conv); }
 
   float float_scalar_value (bool frc_str_conv = false) const
   { return float_value (frc_str_conv); }
 
+  octave_int64 int64_scalar_value () const;
+  octave_uint64 uint64_scalar_value () const;
+
   Matrix matrix_value (bool = false) const
   { return Matrix (charMatrix (matrix)); }
 
   FloatMatrix float_matrix_value (bool = false) const
   { return FloatMatrix (charMatrix (matrix)); }
 
   NDArray array_value (bool = false) const
   { return NDArray (matrix); }
