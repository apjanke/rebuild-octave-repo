# HG changeset patch
# User Rik <rik@octave.org>
# Date 1531333258 25200
#      Wed Jul 11 11:20:58 2018 -0700
# Node ID 3858334e81c4677492f1842d2d419d8ea0df0bea
# Parent  0df6454f58ea92293e1f880e38d0fb093f8b12ac
# Parent  18148dc92122adaf6cbce1301712a137f891fb93
maint: merge stable to default.

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -2811,17 +2811,33 @@ if test $octave_cv_gcc_has_pragma_GCC_di
     [AC_DEFINE(HAVE_WARN_IMPLICIT_FALLTHROUGH, 1,
       [Define to 1 if GCC supports -Wimplicit-fallthrough warning])])
 fi
 
 ### These are recommended by the gnulib bootstrap script:
 
 GNULIB_LINK_DEPS="$FREXPF_LIBM $FREXP_LIBM $GETHOSTNAME_LIB $LIBSOCKET $LIB_CLOCK_GETTIME $LIB_CRYPTO $LIB_GETLOGIN $LIB_NANOSLEEP $LIB_SELECT $LTLIBICONV $LTLIBINTL $LTLIBTHREAD"
 
-MKOCTFILE_GNULIB_LINK_DEPS="$FREXPF_LIBM $FREXP_LIBM $GETHOSTNAME_LIB $LIBSOCKET $LIB_CLOCK_GETTIME $LIB_CRYPTO $LIB_GETLOGIN $LIB_NANOSLEEP $LIB_SELECT $LIBICONV $LIBINTL $LIBTHREAD"
+### FIXME: This is a kluge to transform $libdir/libiconv.dll.a to -liconv.
+### It would probably be better to fix gnulib to not give us an absolute
+### file name...
+
+case $host_os in
+  mingw*)
+    ## Don't use $libdir here because that's defined to be
+    ## ${exec_prefix}/lib and at this point, ${exec_prefix} is "NONE"!
+    tmp_libiconv_dll="$LIBICONV_PREFIX/lib/libiconv.dll.a"
+    MKOCTFILE_LIBICONV=`echo $LIBICONV | sed "s|$tmp_libiconv_dll|-liconv|"`
+  ;;
+  *)
+    MKOCTFILE_LIBICONV="$LIBICONV"
+  ;;
+esac
+
+MKOCTFILE_GNULIB_LINK_DEPS="$FREXPF_LIBM $FREXP_LIBM $GETHOSTNAME_LIB $LIBSOCKET $LIB_CLOCK_GETTIME $LIB_CRYPTO $LIB_GETLOGIN $LIB_NANOSLEEP $LIB_SELECT $MKOCTFILE_LIBICONV $LIBINTL $LIBTHREAD"
 
 AC_SUBST(GNULIB_LINK_DEPS)
 
 BASE_LIBOCTAVE_LINK_DEPS="$CURL_LIBS $SPARSE_XLIBS $ARPACK_LIBS $QRUPDATE_LIBS $FFTW_XLIBS $LAPACK_LIBS $BLAS_LIBS $READLINE_LIBS $TERM_LIBS $LIBGLOB $PCRE_LIBS $DL_LIBS $PTHREAD_LIBS $FLIBS $LIBS"
 
 LIBOCTAVE_LINK_DEPS="$BASE_LIBOCTAVE_LINK_DEPS $GNULIB_LINK_DEPS"
 
 MKOCTFILE_LIBOCTAVE_LINK_DEPS="$BASE_LIBOCTAVE_LINK_DEPS $MKOCTFILE_GNULIB_LINK_DEPS"
diff --git a/scripts/plot/util/private/__print_parse_opts__.m b/scripts/plot/util/private/__print_parse_opts__.m
--- a/scripts/plot/util/private/__print_parse_opts__.m
+++ b/scripts/plot/util/private/__print_parse_opts__.m
@@ -251,23 +251,25 @@ function arg_st = __print_parse_opts__ (
     ## Allow tests when no figures are present.
     __graphics_toolkit__ = get (0, "defaultfigure__graphics_toolkit__");
   endif
 
   if (strcmp (__graphics_toolkit__, "gnuplot"))
     suffixes(strncmp (dev_list, "epslatex", 8)) = {"eps"};
   endif
 
+  unknown_device = true;
+  default_suffix = "";
   match = strcmpi (dev_list, arg_st.devopt);
-  if (! any (match))
-    error ("print: unknown device %s", arg_st.devopt);
+  if (any (match))
+    unknown_device = false;
+    default_suffix = suffixes{match};
   endif
-  default_suffix = suffixes{match};
 
-  if (dot == 0 && ! isempty (arg_st.name))
+  if (dot == 0 && ! isempty (arg_st.name) && ! isempty (default_suffix))
     arg_st.name = [arg_st.name "." default_suffix];
   endif
 
   if (arg_st.append_to_file)
     if (isempty (arg_st.name))
       arg_st.append_to_file = false;
     elseif (any (strcmpi (arg_st.devopt, {"eps", "eps2", "epsc", "epsc2", ...
                                           "ps", "ps2", "psc", "psc2", "pdf"})))
@@ -294,40 +296,46 @@ function arg_st = __print_parse_opts__ (
 
   if (any (strcmp (arg_st.devopt, {"ps", "ps2", "psc", "psc2", "pdf"})))
     arg_st.formatted_for_printing = true;
   endif
 
   aliases = gs_aliases ();
   if (any (strcmp (arg_st.devopt, fieldnames (aliases))))
     arg_st.devopt = aliases.(arg_st.devopt);
+    unknown_device = false;
   endif
 
   if ((any (strcmp (arg_st.devopt, gs_device_list))
        && ! arg_st.formatted_for_printing)
       || any (strcmp (arg_st.devopt, {"pswrite", "ps2write", "pdfwrite"})))
+    unknown_device = false;
     ## Use ghostscript for graphic formats
     arg_st.ghostscript.device = arg_st.devopt;
     arg_st.ghostscript.output = arg_st.name;
     arg_st.ghostscript.antialiasing = true;
     if (arg_st.formatted_for_printing)
       arg_st.ghostscript.epscrop = ! arg_st.loose;
     else
       ## pstoedit throws errors if the EPS file isn't cropped
       arg_st.ghostscript.epscrop = true;
     endif
   elseif (all (! strcmp (arg_st.devopt, dev_list)))
-    ## Assume we are formating output for a printer
+    ## Assume we are formatting output for a printer
     arg_st.formatted_for_printing = true;
     arg_st.ghostscript.device = arg_st.devopt;
     arg_st.ghostscript.output = arg_st.name;
     arg_st.ghostscript.antialiasing = false;
     arg_st.ghostscript.epscrop = ! arg_st.loose;
   endif
 
+  if (unknown_device)
+    error ("print: unknown device %s", arg_st.devopt);
+  endif
+
   if (arg_st.send_to_printer)
     if (isempty (arg_st.name))
       ## Pipe the ghostscript output
       arg_st.name = "-";
     else
       error ("print: a filename may not specified when spooling to a printer");
     endif
     if (! any (strcmp (arg_st.devopt, gs_device_list)))
