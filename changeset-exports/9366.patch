# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1245391099 -7200
#      Fri Jun 19 07:58:19 2009 +0200
# Node ID 25b52645de34dead7c8903c19c4afa444e42eadb
# Parent  3cf6a0f9a7a7cea011bbc6a4c2223af54c53d8ea
improve lookup's inline docs

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2009-06-19  Jaroslav Hajek  <highegg@gmail.com>
+
+	* DLD-FUNCTIONS/lookup.cc: Update docs.
+
 2009-06-17  John W. Eaton  <jwe@octave.org>
 
 	* mex.cc (mxArray_octave_value::get_data):
 	If octave_value::mex_get_data returns a valid pointer, mark it as
 	foreign and return it instead of enumerating the types that can be
 	handled directly.
 
 	* ov-re-mat.h (octave_matrix::mex_get_data): New function.
diff --git a/src/DLD-FUNCTIONS/lookup.cc b/src/DLD-FUNCTIONS/lookup.cc
--- a/src/DLD-FUNCTIONS/lookup.cc
+++ b/src/DLD-FUNCTIONS/lookup.cc
@@ -134,28 +134,29 @@ do_numeric_lookup (const ArrayT& array, 
 }
 
 DEFUN_DLD (lookup, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{idx} =} lookup (@var{table}, @var{y}, @var{opt})\n\
 Lookup values in a sorted table.  Usually used as a prelude to\n\
 interpolation.\n\
 \n\
-If table is strictly increasing and @code{idx = lookup (table, y)}, then\n\
+If table is increasing and @code{idx = lookup (table, y)}, then\n\
 @code{table(idx(i)) <= y(i) < table(idx(i+1))} for all @code{y(i)}\n\
 within the table.  If @code{y(i) < table (1)} then\n\
 @code{idx(i)} is 0. If @code{y(i) >= table(end)} then\n\
 @code{idx(i)} is @code{n}.\n\
 \n\
-If the table is strictly decreasing, then the tests are reversed.\n\
-There are no guarantees for tables which are non-monotonic or are not\n\
-strictly monotonic.\n\
+If the table is decreasing, then the tests are reversed.\n\
+For non-strictly monotonic tables, empty intervals are always skipped.\n\
+The result is undefined if @var{table} is not monotonic, or if\n\
+@b{any} of @var{table} or @var{y} contains a NaN.\n\
 \n\
 The algorithm used by lookup is standard binary search, with optimizations\n\
-to speed up the case of partially ordered arrays (dense downsampling).\n\
+to speed up the case of arrays containing pre-ordered portions (sampling).\n\
 In particular, looking up a single entry is of logarithmic complexity\n\
 (unless a conversion occurs due to non-numeric or unequal types).\n\
 \n\
 @var{table} and @var{y} can also be cell arrays of strings\n\
 (or @var{y} can be a single string).  In this case, string lookup\n\
 is performed using lexicographical comparison.\n\
 \n\
 If @var{opts} is specified, it shall be a string with letters indicating\n\
