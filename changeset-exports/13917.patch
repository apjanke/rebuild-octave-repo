# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1322019735 18000
#      Tue Nov 22 22:42:15 2011 -0500
# Node ID 826f008c829b87596b0b01ed45afbd761aa07045
# Parent  0ec8413d4bbc554f08fd07d2f6246dc3d3ff77c4
* oct-obj.h, oct-obj.cc: Use macros to declare and define octave_allocator.

diff --git a/src/oct-obj.cc b/src/oct-obj.cc
--- a/src/oct-obj.cc
+++ b/src/oct-obj.cc
@@ -24,16 +24,20 @@ along with Octave; see the file COPYING.
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "error.h"
 #include "oct-obj.h"
 #include "Cell.h"
 
+// We are likely to have a lot of octave_value_list objects to allocate,
+// so make the grow_size large.
+DEFINE_OCTAVE_ALLOCATOR2(octave_value_list, 1024);
+
 octave_value_list::octave_value_list (const std::list<octave_value_list>& lst)
 {
   octave_idx_type n = 0, nel = 0;
 
   // Determine number.
   for (std::list<octave_value_list>::const_iterator p = lst.begin ();
        p != lst.end (); p++)
     {
@@ -54,19 +58,16 @@ octave_value_list::octave_value_list (co
           data.assign (idx_vector (k, k + p->length ()), p->data);
           k += p->length ();
         }
       assert (k == nel);
     }
 
 }
 
-octave_allocator
-octave_value_list::allocator (sizeof (octave_value_list));
-
 octave_value_list&
 octave_value_list::prepend (const octave_value& val)
 {
   octave_idx_type n = length ();
 
   resize (n + 1);
 
   while (n > 0)
diff --git a/src/oct-obj.h b/src/oct-obj.h
--- a/src/oct-obj.h
+++ b/src/oct-obj.h
@@ -61,36 +61,16 @@ public:
   octave_value_list (const octave_value_list& obj)
     : data (obj.data), names (obj.names) { }
 
   // Concatenation constructor.
   octave_value_list (const std::list<octave_value_list>&);
 
   ~octave_value_list (void) { }
 
-  void *operator new (size_t size)
-    { return allocator.alloc (size); }
-
-  void operator delete (void *p, size_t size)
-    { allocator.free (p, size); }
-
-  // FIXME -- without this, I have errors with the stack of
-  // octave_value_list objects in ov-usr-fcn.h.  Why?
-  void *operator new (size_t size, void *p)
-    { return ::operator new (size, p); }
-
-  void operator delete (void *p, void *)
-    {
-#if defined (HAVE_PLACEMENT_DELETE)
-      ::operator delete (p, static_cast<void *> (0));
-#else
-      ::operator delete (p);
-#endif
-    }
-
   octave_value_list& operator = (const octave_value_list& obj)
     {
       if (this != &obj)
         {
           data = obj.data;
           names = obj.names;
         }
 
@@ -162,29 +142,29 @@ public:
 
   void clear (void)
     {
       data.clear ();
     }
 
 private:
 
-  static octave_allocator allocator;
-
   Array<octave_value> data;
 
   // This list of strings can be used to tag each element of data with
   // a name.  By default, it is empty.
   string_vector names;
 
   octave_value& elem (octave_idx_type n)
     {
       if (n >= length ())
         resize (n + 1);
 
       return data(n);
     }
 
   const octave_value& elem (octave_idx_type n) const
     { return data(n); }
+
+  DECLARE_OCTAVE_ALLOCATOR
 };
 
 #endif
