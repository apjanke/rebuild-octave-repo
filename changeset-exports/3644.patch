# HG changeset patch
# User jwe
# Date 953899130 0
#      Fri Mar 24 11:58:50 2000 +0000
# Node ID 9add655e8b8cc13a281295eb4e5a4e115497c541
# Parent  3af6d00b82edb11f4665bd5691b6026117d27872
[project @ 2000-03-24 11:58:50 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,13 @@
 2000-03-24  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* sighandlers.cc (my_friendly_exit): Prefix failure messages with
+	panic instead of error.
+
 	* c-file-ptr-stream.cc (c_file_ptr_buf::~c_file_ptr_buf):
 	Avoid dereferencing NULL pointer.
 
 	* oct-stream.cc (printf_format_list::add_elt_to_list,
 	printf_format_list::process_conversion,
 	printf_format_list::finish_conversion): New args, flags, fw, and prec.
 	(printf_format_list::printf_format_list): Save more complete info.
 	(printf_format_list::printme): Print flags, fw, and prec.
diff --git a/src/c-file-ptr-stream.cc b/src/c-file-ptr-stream.cc
--- a/src/c-file-ptr-stream.cc
+++ b/src/c-file-ptr-stream.cc
@@ -48,47 +48,59 @@ c_file_ptr_buf::~c_file_ptr_buf (void)
     fflush (f);
 }
 
 // XXX FIXME XXX -- I'm sure there is room for improvement here...
 
 int
 c_file_ptr_buf::overflow (int c)
 {
-  return (c != EOF) ? fputc (c, f) : fflush (f);
+  if (f)
+    return (c != EOF) ? fputc (c, f) : fflush (f);
+  else
+    return EOF;
 }
 
 int
 c_file_ptr_buf::underflow (void)
 {
-  return fgetc (f);
+  if (f)
+    return fgetc (f);
+  else
+    return EOF;
 }
 
 int
 c_file_ptr_buf::uflow (void)
 {
   return underflow ();
 }
 
 int
 c_file_ptr_buf::pbackfail (int c)
 {
-  return (c != EOF) ? ungetc (c, f) : EOF;
+  return (c != EOF && f) ? ungetc (c, f) : EOF;
 }
 
 std::streamsize
 c_file_ptr_buf::xsputn (const char* s, std::streamsize n)
 {
-  return fwrite (s, 1, n, f);
+  if (f)
+    return fwrite (s, 1, n, f);
+  else
+    return 0;
 }
 
 std::streamsize
 c_file_ptr_buf::xsgetn (char *s, std::streamsize n)
 {
-  return fread (s, 1, n, f);
+  if (f)
+    return fread (s, 1, n, f);
+  else
+    return 0;
 }
 
 static inline int
 seekdir_to_whence (std::ios::seekdir dir)
 {
   return ((dir == std::ios::beg) ? SEEK_SET :
 	  (dir == std::ios::cur) ? SEEK_CUR :
 	  (dir == std::ios::end) ? SEEK_END :
@@ -96,29 +108,39 @@ seekdir_to_whence (std::ios::seekdir dir
 }
 
 std::streampos
 c_file_ptr_buf::seekoff (std::streamoff offset, std::ios::seekdir dir,
 			 std::ios::openmode)
 {
   // XXX FIXME XXX -- is this the right thing to do?
 
-  fseek (f, offset, seekdir_to_whence (dir));
+  if (f)
+    {
+      fseek (f, offset, seekdir_to_whence (dir));
 
-  return ftell (f);
+      return ftell (f);
+    }
+  else
+    return 0;
 }
 
 std::streampos
 c_file_ptr_buf::seekpos (std::streampos offset, std::ios::openmode)
 {
   // XXX FIXME XXX -- is this the right thing to do?
 
-  fseek (f, offset, SEEK_SET);
+  if (f)
+    {
+      fseek (f, offset, SEEK_SET);
 
-  return ftell (f);
+      return ftell (f);
+    }
+  else
+    return 0;
 }
 
 int
 c_file_ptr_buf::sync (void)
 {
   return 0;
 }
 
diff --git a/src/c-file-ptr-stream.h b/src/c-file-ptr-stream.h
--- a/src/c-file-ptr-stream.h
+++ b/src/c-file-ptr-stream.h
@@ -28,20 +28,16 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include <iostream>
 #include <stdio.h>
 
 class
 c_file_ptr_buf : public std::streambuf
 {
-protected:
-
-  FILE *f;
-
 public:
 
   FILE* stdiofile (void) const { return f; }
 
   c_file_ptr_buf (FILE *f_arg) : std::streambuf (), f (f_arg) { }
 
   ~c_file_ptr_buf (void);
 
@@ -59,46 +55,54 @@ public:
 
   std::streampos seekoff (std::streamoff, std::ios::seekdir,
 			  std::ios::openmode = std::ios::in | std::ios::out);
   
   std::streampos seekpos (std::streampos,
 			  std::ios::openmode = std::ios::in | std::ios::out);
 
   int sync (void);
+
+protected:
+
+  FILE *f;
 };
 
 class
 i_c_file_ptr_stream : public std::istream
 {
+public:
+
+  i_c_file_ptr_stream (FILE* f)
+    : std::istream (), buf (new c_file_ptr_buf (f)) { init (buf); }
+
+  ~i_c_file_ptr_stream (void) { delete buf; buf = 0; }
+
+  c_file_ptr_buf *rdbuf (void) { return buf; }
+
 private:
 
-  c_file_ptr_buf f;
-
-public:
-
-  i_c_file_ptr_stream (FILE* f_arg)
-    : std::istream (), f (f_arg) { init (&f); }
-
-  c_file_ptr_buf *rdbuf (void) { return &f; }
+  c_file_ptr_buf *buf;
 };
 
 class
 o_c_file_ptr_stream : public std::ostream
 {
+public:
+
+  o_c_file_ptr_stream (FILE* f)
+    : std::ostream (), buf (new c_file_ptr_buf (f)) { init (buf); }
+
+  ~o_c_file_ptr_stream (void) { delete buf; buf = 0; }
+
+  c_file_ptr_buf *rdbuf (void) { return buf; }
+
 private:
 
-  c_file_ptr_buf f;
-
-public:
-
-  o_c_file_ptr_stream (FILE* f_arg)
-    : std::ostream (), f (f_arg) { init (&f); }
-
-  c_file_ptr_buf *rdbuf (void) { return &f; }
+  c_file_ptr_buf *buf;
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/oct-procbuf.cc b/src/oct-procbuf.cc
--- a/src/oct-procbuf.cc
+++ b/src/oct-procbuf.cc
@@ -94,17 +94,24 @@ octave_procbuf::open (const char *comman
       if (child_end != child_std_end)
 	{
 	  ::dup2 (child_end, child_std_end);
 	  ::close (child_end);
 	}
 
       while (octave_procbuf_list)
 	{
-	  ::fclose (octave_procbuf_list->f);
+	  FILE *fp = octave_procbuf_list->f;
+
+	  if (fp)
+	    {
+	      ::fclose (fp);
+	      fp = 0;
+	    }
+
 	  octave_procbuf_list = octave_procbuf_list->next;
 	}
 
       execl ("/bin/sh", "sh", "-c", command, NULL);
 
       exit (127);
     }
 
@@ -135,41 +142,46 @@ octave_procbuf::open (const char *comman
 #endif
 }
 
 octave_procbuf *
 octave_procbuf::close (void)
 {
 #if defined (HAVE_SYS_WAIT_H)
 
-  pid_t wait_pid;
-
-  int status = -1;
+  if (f)
+    {
+      pid_t wait_pid;
 
-  for (octave_procbuf **ptr = &octave_procbuf_list;
-       *ptr != 0;
-       ptr = &(*ptr)->next)
-    {
-      if (*ptr == this)
+      int status = -1;
+
+      for (octave_procbuf **ptr = &octave_procbuf_list;
+	   *ptr != 0;
+	   ptr = &(*ptr)->next)
 	{
-	  *ptr = (*ptr)->next;
-	  status = 0;
-	  break;
+	  if (*ptr == this)
+	    {
+	      *ptr = (*ptr)->next;
+	      status = 0;
+	      break;
+	    }
 	}
-    }
 
-  if (status == 0 && ::fclose (f) == 0)
-    {
-      using namespace std;
+      if (status == 0 && ::fclose (f) == 0)
+	{
+	  using namespace std;
 
-      do
-	{
-	  wait_pid = ::waitpid (proc_pid, &wstatus, 0);
+	  do
+	    {
+	      wait_pid = ::waitpid (proc_pid, &wstatus, 0);
+	    }
+	  while (wait_pid == -1 && errno == EINTR);
 	}
-      while (wait_pid == -1 && errno == EINTR);
+
+      f = 0;
     }
 
   open_p = false;
 
   return this;
 
 #else
 
diff --git a/src/sighandlers.cc b/src/sighandlers.cc
--- a/src/sighandlers.cc
+++ b/src/sighandlers.cc
@@ -117,25 +117,24 @@ my_friendly_exit (const char *sig_name, 
   static bool been_there_done_that = false;
 
   if (been_there_done_that)
     {
 #if defined (SIGABRT)
       octave_set_signal_handler (SIGABRT, SIG_DFL);
 #endif
 
-      std::cerr << "error: attempted clean up apparently failed -- aborting...\n";
-
+      std::cerr << "panic: attempted clean up apparently failed -- aborting...\n";
       abort ();
     }
   else
     {
       been_there_done_that = true;
 
-      std::cerr << "error: " << sig_name << " -- stopping myself...\n";
+      std::cerr << "panic: " << sig_name << " -- stopping myself...\n";
 
       save_user_variables ();
 
       if (sig_number < 0)
 	exit (1);
       else
 	{
 	  octave_set_signal_handler (sig_number, SIG_DFL);
