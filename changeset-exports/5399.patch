# HG changeset patch
# User jwe
# Date 1119042982 0
#      Fri Jun 17 21:16:22 2005 +0000
# Node ID db34dff199473f37bdc7383c45e9303a09688d11
# Parent  1b6a837fe24d663cc98a3a9d4888c0e8cacd5c6a
[project @ 2005-06-17 21:16:20 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2005-06-17  Keith Goodman  <kwgoodman@gmail.com>
+
+	* miscellaneous/tic.m: Fix doc string.
+
 2005-06-15  John W. Eaton  <jwe@octave.org>
 
 	* polynomial/polyfit.m: Force return value to be a row vector.
 
 2005-06-15  Tom Holroyd  <tomh@kurage.nimh.nih.gov>
 
 	* general/isequal.m: Correct nargin check.
 
diff --git a/scripts/miscellaneous/tic.m b/scripts/miscellaneous/tic.m
--- a/scripts/miscellaneous/tic.m
+++ b/scripts/miscellaneous/tic.m
@@ -27,16 +27,20 @@
 ## # many computations later...
 ## elapsed_time = toc ();
 ## @end example
 ##
 ## @noindent
 ## will set the variable @code{elapsed_time} to the number of seconds since
 ## the most recent call to the function @code{tic}.
 ##
+## Nested timing with @code{tic} and @code{toc} is not supported.
+## Therefore @code{toc} will always return the elapsed time from the most
+## recent call to @code{tic}.
+##
 ## If you are more interested in the CPU time that your process used, you
 ## should use the @code{cputime} function instead.  The @code{tic} and
 ## @code{toc} functions report the actual wall clock time that elapsed
 ## between the calls.  This may include time spent processing other jobs or
 ## doing nothing at all.  For example,
 ##
 ## @example
 ## @group
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,25 @@
 2005-06-17  John W. Eaton  <jwe@octave.org>
 
+	* help.cc (help_from_list, help_from_symbol_table, 
+	help_from_file): New arg, symbol_found.
+	(builtin_help): Use symbol_found arg to determine whether help
+	text is empty or symbol is not available.
+
+	* symtab.cc (symbol_record::print_info): Print more info.
+
+	* DLD-FUNCTIONS/dispatch.cc (Fdispatch_help): Delete.
+	(dispatch_record): Don't prepend "<>" to help text.
+	(Fdispatch): Don't setup dispatched help.
+
+	* help.cc (extract_help_from_dispatch): New function.
+	(help_from_symbol_table): Use it.
+	* defun.cc (print_usage): Use it.
+
 	* toplev.cc (octave_config_info): Include localapifcnfiledir and
 	localapioctfiledir in the list.
 
 	* symtab.h (symbol_record::alias): New arg, mark_to_clear.
 	(symbol_record::aliases_to_clear): New data member.
 	(symbol_record::push_alias_to_clear): New function.
 	* symtab.cc (symbol_record::alias): If mark_to_clear is true, push
 	this pointer on aliases_to_clear stack for s.
@@ -13,21 +28,19 @@ 2005-06-17  John W. Eaton  <jwe@octave.o
 	* defun.cc (install_dld_function): Create full file name alias in
 	fbi_sym_tab and hide it from view.
 	Don't call protect or make_eternal on sym_rec.
 
 	* variables.cc (fcn_out_of_date): New function.
 	(symbol_out_of_date): Also check for symbol using full function
 	file name.
 
-	* symtab.h (symbol_record::symbol_def::visible): New data member.
-	(symbol_record::symbol_def::hide, symbol_record::symbol_def::show,
-	symbol_record::symbol_def::is_visible): New functions.
+	* symtab.h (symbol_record::visible): New data member.
 	(symbol_record::hide, symbol_record::show, symbol_record::is_visible):
-	New functions.
+	New functions. 
 
 	* symtab.h (symbol_record::maybe_delete_def): New private function.
 	* symtab.cc (symbol_record::clear, symbol_record::alias,
 	symbol_record::pop_context,
 	symbol_record::define (octave_function *, unsigned int)): Use it.
 	(symbol_table::symbol_list): Only include visible symbols in list.
 
 	* parse.y (frob_function): Hide nested function names.
diff --git a/src/DLD-FUNCTIONS/dispatch.cc b/src/DLD-FUNCTIONS/dispatch.cc
--- a/src/DLD-FUNCTIONS/dispatch.cc
+++ b/src/DLD-FUNCTIONS/dispatch.cc
@@ -213,17 +213,17 @@ builtin (const std::string& base)
       fcn = is_valid_function (base, "dispatch", 1);
       int cache_error = error_state;
       error_state = 0;
       curr_sym_tab->clear_function (base);
 
       // Move the builtin function out of the way and restore the
       // dispatch fuction.
       // XXX FIXME XXX what if builtin wants to protect itself?
-      symbol_record *found=fbi_sym_tab->lookup (base, 0);
+      symbol_record *found = fbi_sym_tab->lookup (base, 0);
       bool readonly = found->is_read_only ();
       found->unprotect ();
       fbi_sym_tab->rename (base, "builtin:" + base);
       fbi_sym_tab->rename ("dispatch:" + base, base);
       if (readonly)
 	found->protect ();
       dispatch->protect ();
 
@@ -241,17 +241,16 @@ any_arg_is_magic_colon (const octave_val
 
   for (int i = 0; i < nargin; i++)
     if (args(i).is_magic_colon ())
       return true;
 
   return false;
 }
 
-
 octave_value_list
 octave_dispatch::do_multi_index_op (int nargout, const octave_value_list& args)
 {
   octave_value_list retval;
 
   if (error_state) return retval;
 
   if (any_arg_is_magic_colon (args))
@@ -326,61 +325,16 @@ some other function for the given type s
 	error ("builtin: lookup for symbol `%s' failed", name.c_str ());
     }
   else
     print_usage ("builtin");
 
   return retval;
 }
 
-DEFUN_DLD (dispatch_help, args, nargout,
-  "-*- texinfo -*-\n\
-@deftypefn {Loadable Function} {} dispatch_help (@var{name}, @dots{})\n\
-Delayed loading of help messages for dispatched functions.\n\
-@end deftypefn\n\
-@seealso{builtin, dispatch}")
-{
-  octave_value_list retval;
-
-  int nargin = args.length ();
-
-  for (int i = 0; i < nargin; i++)
-    {
-      if (args(i).is_string ())
-	{
-	  const std::string name (args(i).string_value ());
-
-	  if (error_state)
-	    return retval;
-
-	  symbol_record *sr = fbi_sym_tab->lookup (name, false);
-
-	  if (sr)
-	    {
-	      std::string help = sr->help ();
-
-	      if (help[0] == '<' && help[1] == '>'
-		  && sr->def().type_id () == octave_dispatch::static_type_id ())
-		{
-		  builtin (name);
-
-		  symbol_record *builtin_record
-		    = fbi_sym_tab->lookup ("builtin:" + name, 0);
-
-		  help.replace (0, 2, builtin_record->help ());
-
-		  sr->document (help);
-		}
-	    }
-	}
-    }
-
-  return feval ("builtin:help", args, nargout);
-}
-
 static void
 dispatch_record (const std::string &f, const std::string &n, 
 		 const std::string &t)
 {
   // find the base function in the symbol table, loading it if it
   // is not already there; if it is already a dispatch, then bonus
 
   symbol_record *sr = fbi_sym_tab->lookup (f, true);
@@ -401,20 +355,20 @@ dispatch_record (const std::string &f, c
           sr->unprotect ();
           fbi_sym_tab->rename (f, "builtin:" + f);
   	  sr = fbi_sym_tab->lookup (f, true);
           sr->protect ();
 	}
       else 
         fbi_sym_tab->rename (f, "builtin:" + f);
 
-      std::string basedoc ("<>"); 
-
-      if (! sr->help().empty ())
-	basedoc = sr->help ();
+      // It would be good to hide the builtin:XXX name, but since the
+      // new XXX name in the symbol table is set to BUILTIN_FUNCTION,
+      // things don't work quite the way we would like.
+      // sr->hide ();
 
       // Problem:  when a function is first called a new record
       // is created for it in the current symbol table, so calling
       // dispatch on a function that has already been called, we
       // should also clear it from all existing symbol tables.
       // This is too much work, so we will only do it for the
       // top level symbol table.  We can't use the clear_function() 
       // method, because it won't clear builtin functions.  Instead 
@@ -431,17 +385,17 @@ dispatch_record (const std::string &f, c
   
       // Create a symbol record for the dispatch object.
       sr = fbi_sym_tab->lookup (f, true);
       sr->unprotect ();
       sr->define (octave_value (dispatch), symbol_record::BUILTIN_FUNCTION); 
       // std::cout << "iscommand('"<<f<<"')=" << iscommand << std::endl;
       if (iscommand)
 	sr->mark_as_command();
-      sr->document (basedoc + "\n\n@noindent\nOverloaded function:\n");
+      sr->document ("\n\n@noindent\nOverloaded function:\n");
       sr->make_eternal (); // XXX FIXME XXX why??
       sr->mark_as_static ();
       sr->protect ();
     }
 
   // clear/replace/extend the map with the new type-function pair
   const octave_dispatch& rep
     = reinterpret_cast<const octave_dispatch&> (sr->def().get_rep ());
@@ -515,18 +469,16 @@ for @var{f}\n\
   static bool register_type = true;
 
   // register dispatch function type if you have not already done so
   if (register_type)
     {
       octave_dispatch::register_type ();
       register_type = false;
       fbi_sym_tab->lookup("dispatch")->mark_as_static ();
-      dispatch_record ("help", "dispatch_help", "string");
-      dispatch_record ("help", "dispatch_help", "sq_string");
     }
 
   dispatch_record (f, n, t);
 
   return retval;
 }
 
 /*
diff --git a/src/defun.cc b/src/defun.cc
--- a/src/defun.cc
+++ b/src/defun.cc
@@ -36,31 +36,36 @@ 02110-1301, USA.
 #include "ov-builtin.h"
 #include "ov-dld-fcn.h"
 #include "ov-mapper.h"
 #include "oct-obj.h"
 #include "pager.h"
 #include "symtab.h"
 #include "variables.h"
 
+// XXX FIXME XXX -- this function could probably share some code with
+// the help functions.
+
 void
 print_usage (const std::string& nm, bool just_usage)
 {
   symbol_record *sym_rec = fbi_sym_tab->lookup (nm);
 
   if (sym_rec)
     {
       std::string h = sym_rec->help ();
 
       if (h.length () > 0)
 	{
 	  OSSTREAM buf;
 
 	  buf << "\n*** " << nm << ":\n\n";
 
+	  h = extract_help_from_dispatch (nm) + h;
+
 	  display_help_text (buf, h);
 
 	  buf << "\n";
 
 	  if (! just_usage)
 	    additional_help_message (buf);
 
 	  buf << OSSTREAM_ENDS;
diff --git a/src/help.cc b/src/help.cc
--- a/src/help.cc
+++ b/src/help.cc
@@ -605,17 +605,17 @@ help_from_info (const string_vector& arg
 	      if (status == 127)
 		{
 		  error ("help: unable to find info");
 		  error ("help: you need info 2.18 or later (texinfo 3.12)");
 		  break;
 		}
 	      else
 		{
-		  message ("help", "sorry, `%s' is not indexed in the manual",
+		  message ("help", "`%s' is not indexed in the manual",
 			   argv[i].c_str ());
 		}
 	    }
 	}
     }
 }
 
 static bool
@@ -714,109 +714,189 @@ display_help_text (std::ostream& os, con
 	os << msg;
     }
   else
     os << msg;
 }
 
 static bool
 help_from_list (std::ostream& os, const help_list *list,
-		const std::string& nm, int usage)
+		const std::string& nm, int usage, bool& symbol_found)
 {
+  bool retval = false;
+
   const char *name;
 
   while ((name = list->name) != 0)
     {
       if (strcmp (name, nm.c_str ()) == 0)
 	{
-	  if (usage)
-	    os << "\nusage: ";
-	  else
+	  symbol_found = true;
+
+	  std::string h = list->help;
+
+	  if (h.length () > 0)
 	    {
-	      os << "\n*** " << nm << ":\n\n";
+	      if (usage)
+		os << "\nusage: ";
+	      else
+		os << "\n*** " << nm << ":\n\n";
+
+	      display_help_text (os, h);
+
+	      os << "\n";
+
+	      retval = true;
 	    }
-
-	  display_help_text (os, list->help);
-
-	  os << "\n";
-
-	  return true;
+	  break;
 	}
       list++;
     }
 
-  return false;
+  return retval;;
+}
+
+std::string
+extract_help_from_dispatch (const std::string& nm)
+{
+  std::string retval;
+
+  symbol_record *builtin = fbi_sym_tab->lookup ("builtin:" + nm, 0);
+
+  if (builtin)
+    {
+      // Check that builtin is up to date.
+ 
+      // Don't try to fight octave's function name handling
+      // mechanism.  Instead, move dispatch record out of the way,
+      // and restore the builtin to its original name.
+      symbol_record *dispatch = fbi_sym_tab->lookup (nm, 0);
+
+      if (dispatch)
+	{
+	  dispatch->unprotect ();
+
+	  fbi_sym_tab->rename (nm, "dispatch:" + nm);
+	  fbi_sym_tab->rename ("builtin:" + nm, nm);
+
+	  // Check for updates to builtin function; ignore errors
+	  // that appear (they interfere with renaming), and remove
+	  // the updated name from the current symbol table.  XXX
+	  // FIXME XXX check that updating a function updates it in
+	  // all contexts --- it may be that it is updated only in the
+	  // current symbol table, and not the caller.  I believe this
+	  // won't be a problem because the caller will go through the
+	  // same logic and end up with the newer version.
+
+	  octave_function *f = is_valid_function (nm);
+
+	  if (f)
+	    retval = builtin->help ();
+
+	  curr_sym_tab->clear_function (nm);
+
+	  // Move the builtin function out of the way and restore the
+	  // dispatch fuction.  XXX FIXME XXX what if builtin wants to
+	  // protect itself?
+
+	  fbi_sym_tab->rename (nm, "builtin:" + nm);
+	  fbi_sym_tab->rename ("dispatch:" + nm, nm);
+
+	  dispatch->protect ();
+	}
+      else
+	error ("failed to find dispatch record for `builtin:%s'", nm.c_str ());
+    }
+
+  return retval;
 }
 
 static bool
-help_from_symbol_table (std::ostream& os, const std::string& nm)
+help_from_symbol_table (std::ostream& os, const std::string& nm,
+			bool& symbol_found)
 {
   bool retval = false;
 
   symbol_record *sym_rec = lookup_by_name (nm, 0);
 
   if (sym_rec && sym_rec->is_defined ())
     {
+      symbol_found = true;
+
       std::string h = sym_rec->help ();
 
       if (h.length () > 0)
 	{
 	  sym_rec->which (os);
 	  os << "\n";
+	  h = extract_help_from_dispatch (nm) + h;
 	  display_help_text (os, h);
 	  os << "\n";
 	  retval = true;
 	}
     }
 
   return retval;
 }
 
 static bool
-help_from_file (std::ostream& os, const std::string& nm)
+help_from_file (std::ostream& os, const std::string& nm, bool& symbol_found)
 {
   bool retval = false;
 
-  std::string path = fcn_file_in_path (nm);
+  std::string file = fcn_file_in_path (nm);
 
-  std::string h = get_help_from_file (path);
+  if (file.length () > 0)
+    {
+      symbol_found = true;
+
+      std::string h = get_help_from_file (file);
 
-  if (! h.empty ())
-    {
-      os << nm << " is the file: " << path << "\n\n";
-      display_help_text (os, h);
-      os << "\n";
-      retval = true;
+      if (h.length () > 0)
+	{
+	  os << nm << " is the file: " << file << "\n\n";
+	  display_help_text (os, h);
+	  os << "\n";
+	  retval = true;
+	}
     }
 
   return retval;
 }
 
 static void
 builtin_help (int argc, const string_vector& argv)
 {
   help_list *op_help_list = operator_help ();
   help_list *kw_help_list = keyword_help ();
 
   for (int i = 1; i < argc; i++)
     {
-      if (help_from_list (octave_stdout, op_help_list, argv[i], 0))
+      bool symbol_found = false;
+
+      if (help_from_list (octave_stdout, op_help_list, argv[i], 0,
+			  symbol_found))
 	continue;
 
-      if (help_from_list (octave_stdout, kw_help_list, argv[i], 0))
+      if (help_from_list (octave_stdout, kw_help_list, argv[i], 0,
+			  symbol_found))
 	continue;
 
-      if (help_from_symbol_table (octave_stdout, argv[i]))
+      if (help_from_symbol_table (octave_stdout, argv[i], symbol_found))
+	continue;
+
+      if (help_from_file (octave_stdout, argv[i], symbol_found))
 	continue;
 
-      if (help_from_file (octave_stdout, argv[i]))
-	continue;
-
-      octave_stdout << "\nhelp: sorry, `" << argv[i]
-		    << "' is not documented\n"; 
+      if (symbol_found)
+	octave_stdout << "\nhelp: `" << argv[i]
+		      << "' is not documented\n"; 
+      else
+	octave_stdout << "\nhelp: `" << argv[i]
+		      << "' not found\n"; 
     }
 
   additional_help_message (octave_stdout);
 }
 
 DEFCMD (help, args, ,
   "-*- texinfo -*-\n\
 @deffn {Command} help\n\
diff --git a/src/help.h b/src/help.h
--- a/src/help.h
+++ b/src/help.h
@@ -26,16 +26,18 @@ 02110-1301, USA.
 
 #include <iostream>
 #include <string>
 
 class string_vector;
 
 extern string_vector make_name_list (void);
 
+extern std::string extract_help_from_dispatch (const std::string&);
+
 extern void display_help_text (std::ostream&, const std::string&);
 
 extern void additional_help_message (std::ostream&);
 
 // Name of the info file specified on command line.
 // (--info-file file)
 extern std::string Vinfo_file;
 
diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -657,16 +657,22 @@ symbol_record::print_symbol_info_line (s
 	  i++;
 	}
     }
 }
 
 void
 symbol_record::print_info (std::ostream& os, const std::string& prefix) const
 {
+  os << prefix << "formal param:      " << formal_param << "\n"
+     << prefix << "linked to global:  " << linked_to_global << "\n"
+     << prefix << "tagged static:     " << tagged_static << "\n"
+     << prefix << "can hide function: " << can_hide_function << "\n"
+     << prefix << "visible:           " << visible << "\n";
+
   if (definition)
     definition->print_info (os, prefix);
   else
     os << prefix << "symbol " << name () << " is undefined\n";
 }
 
 bool
 symbol_record::read_only_error (const char *action)
@@ -1149,30 +1155,30 @@ symbol_table::symbol_list (const string_
     return symbols;
 
   for (unsigned int i = 0; i < table_size; i++)
     {
       symbol_record *ptr = table[i].next ();
 
       while (ptr)
 	{
-	  if (true || ptr->is_visible ())
+	  if (ptr->is_visible ())
 	    {
 	      assert (count < n);
 
 	      unsigned int my_scope = ptr->is_linked_to_global () + 1; // Tricky...
 
 	      unsigned int my_type = ptr->type ();
 
 	      std::string my_name = ptr->name ();
 
 	      if ((type & my_type) && (scope & my_scope) && (matches_patterns (my_name, pats)))
 		symbols(count++) = ptr;
 	    }
-	      
+
 	  ptr = ptr->next ();
 	}
     }
 
   symbols.resize (count);
 
   return symbols;
 }
diff --git a/src/symtab.h b/src/symtab.h
--- a/src/symtab.h
+++ b/src/symtab.h
@@ -85,17 +85,17 @@ private:
 
   class symbol_def
   {
   public:
 
     symbol_def (const octave_value& val = octave_value (),
 		unsigned int sym_type = 0)
       : symbol_type (sym_type), eternal (0), read_only (0), help_string (),
-	definition (val), visible (true), count (1) { }
+	definition (val), count (1) { }
 
     ~symbol_def (void) { }
 
     bool is_constant (void) const
       { return (symbol_type & symbol_record::BUILTIN_CONSTANT); }
 
     bool is_variable (void) const
       {
@@ -204,20 +204,16 @@ private:
       }
 
     void protect (void) { read_only = 1; }
 
     void unprotect (void) { read_only = 0; }
 
     void make_eternal (void) { eternal = 1; }
 
-    void hide (void) { visible = false; }
-    void show (void) { visible = true; }
-    bool is_visible (void) const { return visible; }
-
     octave_value& def (void) { return definition; }
 
     std::string help (void) const { return help_string; }
 
     void document (const std::string& h) { help_string = h; }
 
     unsigned int type (void) { return symbol_type; }
 
@@ -239,19 +235,16 @@ private:
     unsigned int read_only : 1;
 
     // The doc string associated with this variable.
     std::string help_string;
 
     // The value of this definition.  See ov.h and related files.
     octave_value definition;
 
-    // Should this symbol show up in listings?
-    bool visible;
-
     // Reference count.
     int count;
 
     void print_info (std::ostream& os,
 		     const std::string& prefix = std::string ()) const;
 
     // No copying!
 
@@ -260,26 +253,28 @@ private:
     symbol_def& operator = (const symbol_def& sd);
   };
 
 public:
 
   typedef int (*change_function) (void);
 
   symbol_record (void)
-    : formal_param (0), linked_to_global (0), tagged_static (0),
-      can_hide_function (1), nm (), chg_fcn (0),
+    : formal_param (false), linked_to_global (false),
+      tagged_static (false), can_hide_function (true),
+      visible (true), nm (), chg_fcn (0),
       definition (new symbol_def ()), next_elem (0) { }
 
   // XXX FIXME XXX -- kluge alert!  We obviously need a better way of
   // handling allow_shadow!
 
   symbol_record (const std::string& n, symbol_record *nxt)
-    : formal_param (0), linked_to_global (0), tagged_static (0),
-      can_hide_function (n != "__end__"), nm (n), chg_fcn (0),
+    : formal_param (false), linked_to_global (false),
+      tagged_static (false), can_hide_function (n != "__end__"),
+      visible (true), nm (n), chg_fcn (0),
       definition (new symbol_def ()), next_elem (nxt) { }
 
   ~symbol_record (void)
     {
       if (--definition->count <= 0)
 	delete definition;
     }
 
@@ -351,19 +346,19 @@ public:
   bool is_eternal (void) const { return definition->is_eternal (); }
 
   void protect (void) { definition->protect (); }
 
   void unprotect (void) { definition->unprotect (); }
 
   void make_eternal (void) { definition->make_eternal (); }
 
-  void hide (void) { definition->hide (); }
-  void show (void) { definition->show (); }
-  bool is_visible (void) const { return definition->is_visible  (); }
+  void hide (void) { visible = false; }
+  void show (void) { visible = true; }
+  bool is_visible (void) const { return visible; }
 
   void set_change_function (change_function f) { chg_fcn = f; }
 
   void define (const octave_value& v, unsigned int sym_type = USER_VARIABLE);
 
   void define_builtin_var (const octave_value& v);
 
   bool define_builtin_const (const octave_value& v);
@@ -439,16 +434,17 @@ public:
 		   const std::string& prefix = std::string ()) const;
 
 private:
 
   unsigned int formal_param : 1;
   unsigned int linked_to_global : 1;
   unsigned int tagged_static : 1;
   unsigned int can_hide_function : 1;
+  unsigned int visible : 1;
 
   std::string nm;
   change_function chg_fcn;
   symbol_def *definition;
   symbol_record *next_elem;
 
   // This should maybe be one stack with a structure containing all the
   // items we need to save for recursive calls...
