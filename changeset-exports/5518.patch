# HG changeset patch
# User jwe
# Date 1130560103 0
#      Sat Oct 29 04:28:23 2005 +0000
# Node ID a9bd6c31751fd818ad1bbeba3a83c0cc8e3b63b9
# Parent  947aa3464e1d140c6fab1c75ea3ea88b84a143eb
[project @ 2005-10-29 04:26:38 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,14 @@
+2005-10-28  John W. Eaton  <jwe@octave.org>
+
+	* configure.in (AC_ARG_WITH(cholmod, ...)): Fix typo.
+	From Quentin Spencer <qspencer@ieee.org> and
+	Andy Adler <adler@site.uOttawa.ca>.
+
 2005-10-26  John W. Eaton  <jwe@octave.org>
 
 	* configure.in, aclocal.m4: Don't quote "yes".
 
 	* configure.in: Print warning messages for umfpack, colamd,
 	ccolamd, and cholmod as we are searching.  Avoid multiple
 	definitions of message strings.
 
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -24,17 +24,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### Preserve CFLAGS and CXXFLAGS from the environment before doing
 ### anything else because we don't know which macros might call
 ### AC_PROG_CC or AC_PROG_CXX.
 
 EXTERN_CFLAGS="$CFLAGS"
 EXTERN_CXXFLAGS="$CXXFLAGS"
 
 AC_INIT
-AC_REVISION($Revision: 1.491 $)
+AC_REVISION($Revision: 1.492 $)
 AC_PREREQ(2.57)
 AC_CONFIG_SRCDIR([src/octave.cc])
 AC_CONFIG_HEADER(config.h)
 
 AC_DEFINE(OCTAVE_SOURCE, 1, [Define if this is Octave.])
   
 OCTAVE_HOST_TYPE
 
@@ -831,24 +831,24 @@ if test "$with_cholmod" = yes && test "$
       with_metis=no)
 
     if test "$with_metis" = yes; then
       AC_DEFINE(HAVE_METIS, 1, [Define if the METIS library is used.])
       AC_CHECK_LIB(cholmod, cholmod_start, [CHOLMOD_LIBS="-lcholmod -lmetis"; 
 	with_cholmod=yes], [
         AC_CHECK_LIB(cholmod_start, cholmod, 
 	  [CHOLMOD_LIBS="-lcholmod -cblas -lmetis"; with_cholmod=yes], [],
-          AMD_LIBS $COLAMD_LIBS $CCOLAMD_LIBS $BLAS_LIBS $FLIBS -lmetis)],
+          $AMD_LIBS $COLAMD_LIBS $CCOLAMD_LIBS $BLAS_LIBS $FLIBS -lmetis)],
 	$AMD_LIBS $COLAMD_LIBS $CCOLAMD_LIBS $BLAS_LIBS $FLIBS -lmetis)
     else
       AC_CHECK_LIB(cholmod, cholmod_start, [CHOLMOD_LIBS="-lcholmod"; 
 	with_cholmod=yes], [
         AC_CHECK_LIB(cholmod_start, cholmod, [CHOLMOD_LIBS="-lcholmod -cblas"; 
 	  with_cholmod=yes], [],
-          AMD_LIBS $COLAMD_LIBS $CCOLAMD_LIBS $BLAS_LIBS $FLIBS)],
+          $AMD_LIBS $COLAMD_LIBS $CCOLAMD_LIBS $BLAS_LIBS $FLIBS)],
 	$AMD_LIBS $COLAMD_LIBS $CCOLAMD_LIBS $BLAS_LIBS $FLIBS)
     fi
 
     if test "$with_cholmod" = yes; then
       AC_DEFINE(HAVE_CHOLMOD, 1, [Define if the CHOLMOD library is used.])
       warn_cholmod=
     fi
     break])
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,16 @@
+2005-10-28  John W. Eaton  <jwe@octave.org>
+
+	* oct-sparse.h: Fix typo in HAVE_UFSPARSE_UMFPACK_H.
+	From Quentin Spencer <qspencer@ieee.org>.
+
+	* sparse-base-chol.cc: Use C++ true/false instead of
+	preprocessor defined TRUE/FALSE.  Use 0 instead of NULL.
+
 2005-10-27  John W. Eaton  <jwe@octave.org>
 
 	* Array.cc (assignN): Reshape to final size instead of resizing.
 
 2005-10-26  John W. Eaton  <jwe@octave.org>
 
 	* oct-sparse.h: New file.
 	* oct-sparse.h.in: Delete.
diff --git a/liboctave/oct-sparse.h b/liboctave/oct-sparse.h
--- a/liboctave/oct-sparse.h
+++ b/liboctave/oct-sparse.h
@@ -27,17 +27,17 @@ 02110-1301, USA.
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #ifdef __cplusplus
 extern "C" {
 #endif
 
-#if defined (HAVE_UFSPARSE_UMFPACK_h)
+#if defined (HAVE_UFSPARSE_UMFPACK_H)
 #include <ufsparse/umfpack.h>
 #elif defined (HAVE_UMFPACK_UMFPACK_H)
 #include <umfpack/umfpack.h>
 #elif defined (HAVE_UMFPACK_H)
 #include <umfpack.h>
 #endif
 
 #if defined (HAVE_UFSPARSE_COLAMD_H)
diff --git a/liboctave/sparse-base-chol.cc b/liboctave/sparse-base-chol.cc
--- a/liboctave/sparse-base-chol.cc
+++ b/liboctave/sparse-base-chol.cc
@@ -39,17 +39,17 @@ void
 sparse_base_chol<chol_type, chol_elt, p_type>::sparse_base_chol_rep::drop_zeros 
   (const cholmod_sparse* S)
 {
   chol_elt sik;
   octave_idx_type *Sp, *Si;
   chol_elt *Sx;
   octave_idx_type pdest, k, ncol, p, pend;
 
-  if (S == NULL)
+  if (! S)
     return;
 
   Sp = static_cast<octave_idx_type *>(S->p);
   Si = static_cast<octave_idx_type *>(S->i);
   Sx = static_cast<chol_elt *>(S->x);
   pdest = 0;
   ncol = S->ncol;
 
@@ -92,23 +92,23 @@ sparse_base_chol<chol_type, chol_elt, p_
 	("SparseCHOL requires square matrix");
       return -1;
     }
 
   cholmod_common *cm = &Common;
 
   // Setup initial parameters
   CHOLMOD_NAME(start) (cm);
-  cm->prefer_zomplex = FALSE;
+  cm->prefer_zomplex = false;
 
   double spu = Voctave_sparse_controls.get_key ("spumoni");
   if (spu == 0.)
     {
       cm->print = -1;
-      cm->print_function = NULL;
+      cm->print_function = 0;
     }
   else
     {
       cm->print = (int)spu + 2;
       cm->print_function =&SparseCholPrint;
     }
 
   cm->error_handler = &SparseCholError;
@@ -130,35 +130,35 @@ sparse_base_chol<chol_type, chol_elt, p_
   // Turn off METIS memory guard.  It is not needed, because mxMalloc will
   // safely terminate the mexFunction and free any workspace without killing
   // all of MATLAB.
   cm->metis_memory   = 0.0;
 #endif
 #endif
 #endif
 
-  cm->final_asis = FALSE;
-  cm->final_super = FALSE;
-  cm->final_ll = TRUE;
-  cm->final_pack = TRUE;
-  cm->final_monotonic = TRUE;
-  cm->final_resymbol = FALSE;
+  cm->final_asis = false;
+  cm->final_super = false;
+  cm->final_ll = true;
+  cm->final_pack = true;
+  cm->final_monotonic = true;
+  cm->final_resymbol = false;
 
   cholmod_sparse A;
   cholmod_sparse *ac = &A;
   double dummy;
   ac->nrow = a_nr;
   ac->ncol = a_nc;
 
   ac->p = a.cidx();
   ac->i = a.ridx();
   ac->nzmax = a.nonzero();
-  ac->packed = TRUE;
-  ac->sorted = TRUE;
-  ac->nz = NULL;
+  ac->packed = true;
+  ac->sorted = true;
+  ac->nz = 0;
 #ifdef IDX_TYPE_LONG
   ac->itype = CHOLMOD_LONG;
 #else
   ac->itype = CHOLMOD_INT;
 #endif
   ac->dtype = CHOLMOD_DOUBLE;
   ac->stype = 1;
 #ifdef OCTAVE_CHOLMOD_TYPE
@@ -172,17 +172,17 @@ sparse_base_chol<chol_type, chol_elt, p_
   else
     ac->x = a.data();
 
   // use natural ordering if no q output parameter
   if (natural)
     {
       cm->nmethods = 1 ;
       cm->method [0].ordering = CHOLMOD_NATURAL ;
-      cm->postorder = FALSE ;
+      cm->postorder = false ;
     }
 
   cholmod_factor *Lfactor;
   BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
   Lfactor = CHOLMOD_NAME(analyze) (ac, cm);
   CHOLMOD_NAME(factorize) (ac, Lfactor, cm);
   cond = CHOLMOD_NAME(rcond) (Lfactor, cm);
   END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,15 @@
+2005-10-28  John W. Eaton  <jwe@octave.org>
+
+	* general/shiftdim.m: Compatibility fix for row vectors.
+	Correct check for non-scalar non-integer shift.  For positive
+	N, shift is remainder of N and number of dims.  Always return NS.
+	Simplify.
+
 2005-10-18  Keith Goodman  <kwgoodman@gmail.com>
 
 	* general/randperm.m: Improve compatibility by allowing input
 	value of zero.
 
 2005-10-13  John W. Eaton  <jwe@octave.org>
 
 	* plot/__plt__.m, plot/__errplot__.m, plot/replot.m:
diff --git a/scripts/general/ind2sub.m b/scripts/general/ind2sub.m
--- a/scripts/general/ind2sub.m
+++ b/scripts/general/ind2sub.m
@@ -61,16 +61,16 @@ function varargout = ind2sub (dims, ind)
 	  endfor
 	else
 	  error ("ind2sub: index out of range");
 	endif
       else
 	error ("ind2sub: expecting integer-valued index argument");
       endif
     else
-      error ("sub2ind: expecting dims to be an integer vector");
+      error ("ind2sub: expecting dims to be an integer vector");
     endif
   else
     usage ("ind2sub (dims, ind)");
   endif
 
 
 endfunction
diff --git a/scripts/general/shiftdim.m b/scripts/general/shiftdim.m
--- a/scripts/general/shiftdim.m
+++ b/scripts/general/shiftdim.m
@@ -46,39 +46,43 @@
 ## @end group
 ## @end example
 ## @end deftypefn
 ##
 ## @seealso {reshape, permute, ipermute, circshift, squeeze}
 
 function [y, ns]  = shiftdim (x, n)
 
+  if (nargin < 1 || nargin > 2)
+    usage ("shiftdim (x, n) or [b, ns] = shiftdim (x)");
+  endif
+
+  nd = ndims (x);
+  orig_dims = size (x);
+
   if (nargin == 1)
     ## Find the first singleton dimension.
-    nd = ndims (x);
-    orig_dims = size (x);
-    ns  = 1;
-    while (ns < nd + 1 && orig_dims(ns) == 1)
-      ns = ns + 1;
+    n = 0;
+    while (n < nd && orig_dims(n+1) == 1)
+      n++;
     endwhile
-    if (ns > nd)
-      ns = 1;
-    endif
-    y = reshape (x, orig_dims(ns:end));
-    ns = ns - 1;
-  elseif (nargin == 2)
-    if (! isscalar (n) && floor (n) != n)
-      error ("shiftdim: n must be an scalar integer");
-    endif
-    if (n < 0)
-      orig_dims = size (x);
-      singleton_dims = ones (1, -n);
-      y = reshape (x, [singleton_dims, orig_dims]);
-    elseif (n > 0)
-      ndims = length (size (x));
-      y = permute (x, [n+1:ndims, 1:n]);
-    else
-      y = x;
-    endif
+  endif
+
+  if (! isscalar (n) || floor (n) != n)
+    error ("shiftdim: n must be a scalar integer");
+  endif
+
+  if (n >= nd)
+    n = rem (n, nd);
+  endif
+
+  if (n < 0)
+    singleton_dims = ones (1, -n);
+    y = reshape (x, [singleton_dims, orig_dims]);
+  elseif (n > 0)
+    y = reshape (x, [orig_dims(n+1:nd), orig_dims(1:n)]);
   else
-    usage ("shiftdim (x, n) or [b, ns] = shiftdim (x)");
+    y = x;
   endif
+
+  ns = n;
+
 endfunction
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2005-10-27  James R. Van Zandt  <jrvz@comcast.net>
+
+	* mappers.cc: Doc fix for lgamma.
+	* DLD-FUNCTIONS/gammainc.cc (Fgammainc): Doc fix.
+
 2005-10-27  John W. Eaton  <jwe@octave.org>
 
 	* DLD-FUNCTIONS/__glpk__.cc (F__glpk__): Declare mrowsA volatile.
 
 	* pt-mat.cc (tm_row_const::tm_row_const_rep::tm_row_const_rep):
 	Ensure that we always have at least two dimensions here.
 	(tm_const::tm_const): Likewise.
 	(tm_const::rows, tm_const::columns): Simplify.
diff --git a/src/mappers.cc b/src/mappers.cc
--- a/src/mappers.cc
+++ b/src/mappers.cc
@@ -517,18 +517,18 @@ Return 1 for upper case letters.\n\
   DEFUN_MAPPER (isxdigit, xisxdigit, 0, 0, 0, 0, 0, 0.0, 0.0, 0, 0,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} isxdigit (@var{s})\n\
 Return 1 for characters that are hexadecimal digits.\n\
 @end deftypefn");
 
   DEFUN_MAPPER (lgamma, 0, 0, 0, xlgamma, 0, 0, 0.0, 0.0, 0, 0,
     "-*- texinfo -*-\n\
-@deftypefn {Mapping Function} {} lgamma (@var{a}, @var{x})\n\
-@deftypefnx {Mapping Function} {} gammaln (@var{a}, @var{x})\n\
+@deftypefn {Mapping Function} {} lgamma (@var{x})\n\
+@deftypefnx {Mapping Function} {} gammaln (@var{x})\n\
 Return the natural logarithm of the gamma function.\n\
 @end deftypefn\n\
 @seealso{gamma and gammai}");
 
   DEFUN_MAPPER (log, 0, 0, 0, log, 0, std::log, 0.0, octave_Inf, 0, 1,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} log (@var{x})\n\
 Compute the natural logarithm for each element of @var{x}.  To compute the\n\
