# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1249538178 -7200
#      Thu Aug 06 07:56:18 2009 +0200
# Node ID 079c06f37f17e04f401eed8e0378477feb560f3d
# Parent  0a427d3244bf5507c344a44e9d1a3b2e33f02665
optimize griddata

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2009-08-06  Jaroslav Hajek  <highegg@gmail.com>
+
+	* geometry/griddata.m: Optimize.
+
 2009-08-06  Olaf Till <olaf.till@uni-jena.de>
 
 	* geometry/griddata.m: Linearize arrays.
 
 2009-08-05  Olli Saarela  <olli.saarela@gmail.com>
 
 	* plot/__gnuplot_get_var__.m: If read fails to return data, sleep
 	before trying again.
diff --git a/scripts/geometry/griddata.m b/scripts/geometry/griddata.m
--- a/scripts/geometry/griddata.m
+++ b/scripts/geometry/griddata.m
@@ -78,37 +78,39 @@ function [rx, ry, rz] = griddata (x, y, 
     valid = !isnan (idx);
     zi(valid) = z(idx(valid));
 
   elseif (strcmp (method, "linear"))
     ## Search for every point the enclosing triangle.
     tri_list = tsearch (x, y, tri, xi(:), yi(:));
 
     ## Only keep the points within triangles.
-    valid = !isnan (reshape (tri_list, size (xi)));
-    tri_list = tri_list(!isnan (tri_list));
+    valid = !isnan (tri_list);
+    tri_list = tri_list(valid);
     nr_t = rows (tri_list);
 
+    tri = tri(tri_list,:);
+
     ## Assign x,y,z for each point of triangle.
-    x1 = x(tri(tri_list,1));
-    x2 = x(tri(tri_list,2));
-    x3 = x(tri(tri_list,3));
+    x1 = x(tri(:,1));
+    x2 = x(tri(:,2));
+    x3 = x(tri(:,3));
 
-    y1 = y(tri(tri_list,1));
-    y2 = y(tri(tri_list,2));
-    y3 = y(tri(tri_list,3));
+    y1 = y(tri(:,1));
+    y2 = y(tri(:,2));
+    y3 = y(tri(:,3));
 
-    z1 = z(tri(tri_list,1));
-    z2 = z(tri(tri_list,2));
-    z3 = z(tri(tri_list,3));
+    z1 = z(tri(:,1));
+    z2 = z(tri(:,2));
+    z3 = z(tri(:,3));
 
     ## Calculate norm vector.
     N = cross ([x2-x1, y2-y1, z2-z1], [x3-x1, y3-y1, z3-z1]);
-    N_norm = sqrt (sumsq (N, 2));
-    N = N ./ N_norm(:,[1,1,1]);
+    ## Normalize.
+    N = diag (norm (N, "rows")) \ N;
     
     ## Calculate D of plane equation
     ## Ax+By+Cz+D = 0;
     D = -(N(:,1) .* x1 + N(:,2) .* y1 + N(:,3) .* z1);
     
     ## Calculate zi by solving plane equation for xi, yi.
     zi(valid) = -(N(:,1).*xi(valid) + N(:,2).*yi(valid) + D) ./ N(:,3);
     
