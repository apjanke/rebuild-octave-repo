# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1483743991 18000
#      Fri Jan 06 18:06:31 2017 -0500
# Node ID 27e4ec3b0b49e228bf0c239d72e31e95c8e68de4
# Parent  6b4d2c8355f78f56f6b7e28737da1644fcf3ca28
move octave_refcount inside octave namespace

* oct-refcount.h (refcount): Move inside octave namespace and rename
from octave_refcount.  Change all uses.
(octave_refcount): Provide (deprecated) backward-compatible using
declaration.

diff --git a/libgui/src/thread-manager.h b/libgui/src/thread-manager.h
--- a/libgui/src/thread-manager.h
+++ b/libgui/src/thread-manager.h
@@ -42,17 +42,17 @@ public:
   virtual ~octave_base_thread_manager (void) = default;
 
   virtual void register_current_thread (void) = 0;
 
   virtual void interrupt (void) = 0;
 
 protected:
 
-  octave_refcount<int> count;
+  octave::refcount<int> count;
 };
 
 class octave_thread_manager
 {
 public:
 
   octave_thread_manager (void);
 
diff --git a/libinterp/corefcn/gl-render.cc b/libinterp/corefcn/gl-render.cc
--- a/libinterp/corefcn/gl-render.cc
+++ b/libinterp/corefcn/gl-render.cc
@@ -122,17 +122,17 @@ namespace octave
       void tex_coord (double q, double r) const
       { if (valid) glTexCoord2d (q*tx, r*ty); }
 
       GLuint id;
       int w, h;
       int tw, th;
       double tx, ty;
       bool valid;
-      octave_refcount<int> count;
+      octave::refcount<int> count;
     };
 
     texture_rep *rep;
 
   private:
     opengl_texture (texture_rep *_rep) : rep (_rep) { }
 
   public:
@@ -373,17 +373,17 @@ namespace octave
       double alpha;
       float ambient;
       float diffuse;
       float specular;
       float specular_exp;
       float specular_color_refl;
 
       // reference counter
-      octave_refcount<int> count;
+      octave::refcount<int> count;
 
       vertex_data_rep (void)
         : coords (), color (), normal (), alpha (),
           ambient (), diffuse (), specular (), specular_exp (),
           specular_color_refl (), count (1) { }
 
       vertex_data_rep (const Matrix& c, const Matrix& col, const Matrix& n,
                        double a, float as, float ds, float ss, float se,
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -400,17 +400,17 @@ private:
   typedef std::map<listener_mode, octave_value_list> listener_map;
   typedef std::map<listener_mode, octave_value_list>::iterator
     listener_map_iterator;
   typedef std::map<listener_mode, octave_value_list>::const_iterator
     listener_map_const_iterator;
 
 private:
   int id;
-  octave_refcount<int> count;
+  octave::refcount<int> count;
   std::string name;
   graphics_handle parent;
   bool hidden;
   listener_map listeners;
 };
 
 // ---------------------------------------------------------------------
 
@@ -2170,17 +2170,17 @@ public:
   void finalize (const graphics_handle&);
 
   // Close the graphics toolkit.
   virtual void close (void)
   { gripe_if_tkit_invalid ("base_graphics_toolkit::close"); }
 
 private:
   std::string name;
-  octave_refcount<int> count;
+  octave::refcount<int> count;
 
 private:
   void gripe_if_tkit_invalid (const std::string& fname) const
   {
     if (! is_valid ())
       error ("%s: invalid graphics toolkit", fname.c_str ());
   }
 };
@@ -2921,17 +2921,17 @@ protected:
   virtual void update (const graphics_object& go, int id)
   {
     if (toolkit_flag)
       get_toolkit ().update (go, id);
   }
 
 protected:
   // A reference count.
-  octave_refcount<int> count;
+  octave::refcount<int> count;
 
   // A flag telling whether this object is a valid object
   // in the backend context.
   bool toolkit_flag;
 };
 
 class OCTINTERP_API graphics_object
 {
@@ -6066,17 +6066,17 @@ public:
 
   base_graphics_event (void) : count (1) { }
 
   virtual ~base_graphics_event (void) = default;
 
   virtual void execute (void) = 0;
 
 private:
-  octave_refcount<int> count;
+  octave::refcount<int> count;
 };
 
 class
 graphics_event
 {
 public:
   typedef void (*event_fcn) (void*);
 
diff --git a/libinterp/corefcn/input.h b/libinterp/corefcn/input.h
--- a/libinterp/corefcn/input.h
+++ b/libinterp/corefcn/input.h
@@ -133,17 +133,17 @@ public:
   virtual bool input_from_terminal (void) const { return false; }
 
   virtual bool input_from_file (void) const { return false; }
 
   virtual bool input_from_eval_string (void) const { return false; }
 
 private:
 
-  octave_refcount<int> count;
+  octave::refcount<int> count;
 
   int pflag;
 
   octave::base_lexer *lexer;
 
   void do_input_echo (const std::string&) const;
 
   static const std::string in_src;
diff --git a/libinterp/corefcn/oct-map.h b/libinterp/corefcn/oct-map.h
--- a/libinterp/corefcn/oct-map.h
+++ b/libinterp/corefcn/oct-map.h
@@ -40,17 +40,17 @@ octave_fields
 {
   class fields_rep : public std::map<std::string, octave_idx_type>
   {
   public:
     fields_rep (void) : std::map<std::string, octave_idx_type> (), count (1) { }
     fields_rep (const fields_rep& other)
       : std::map<std::string, octave_idx_type> (other), count (1) { }
 
-    octave_refcount<int> count;
+    octave::refcount<int> count;
 
   private:
     fields_rep& operator = (const fields_rep&); // no assignment!
   };
 
   fields_rep *rep;
 
   static fields_rep *nil_rep (void);
diff --git a/libinterp/corefcn/oct-stream.h b/libinterp/corefcn/oct-stream.h
--- a/libinterp/corefcn/oct-stream.h
+++ b/libinterp/corefcn/oct-stream.h
@@ -160,17 +160,17 @@ protected:
 
   // Clear stream state.
 
   void clearerr (void);
 
 private:
 
   // A reference count.
-  octave_refcount<octave_idx_type> count;
+  octave::refcount<octave_idx_type> count;
 
   // The permission bits for the file.  Should be some combination of
   // std::ios::open_mode bits.
   int md;
 
   // Data format.
   octave::mach_info::float_format flt_fmt;
 
diff --git a/libinterp/corefcn/symtab.h b/libinterp/corefcn/symtab.h
--- a/libinterp/corefcn/symtab.h
+++ b/libinterp/corefcn/symtab.h
@@ -472,17 +472,17 @@ public:
       std::deque<octave_value> value_stack;
 
       unsigned int storage_class;
 
       fcn_info *finfo;
 
       bool valid;
 
-      octave_refcount<size_t> count;
+      octave::refcount<size_t> count;
     };
 
   public:
 
     symbol_record (scope_id s = xcurrent_scope,
                    const std::string& nm = "",
                    const octave_value& v = octave_value (),
                    unsigned int sc = local)
@@ -943,17 +943,17 @@ public:
       octave_value autoload_function;
 
       octave_value function_on_path;
 
       octave_value package;
 
       octave_value built_in_function;
 
-      octave_refcount<size_t> count;
+      octave::refcount<size_t> count;
 
     private:
 
       octave_value xfind (const octave_value_list& args, bool local_funcs);
 
       octave_value x_builtin_find (void);
     };
 
diff --git a/libinterp/octave-value/ov-base.h b/libinterp/octave-value/ov-base.h
--- a/libinterp/octave-value/ov-base.h
+++ b/libinterp/octave-value/ov-base.h
@@ -835,17 +835,17 @@ protected:
   void newline (std::ostream& os) const;
 
   void reset (void) const;
 
   // A reference count.
   // NOTE: the declaration is octave_idx_type because with 64-bit indexing,
   // it is well possible to have more than MAX_INT copies of a single value
   // (think of an empty cell array with >2G elements).
-  octave_refcount<octave_idx_type> count;
+  octave::refcount<octave_idx_type> count;
 
   static const char *get_umap_name (unary_mapper_t);
 
   void warn_load (const char *type) const;
   void warn_save (const char *type) const;
 
 private:
 
diff --git a/libinterp/octave-value/ov-classdef.h b/libinterp/octave-value/ov-classdef.h
--- a/libinterp/octave-value/ov-classdef.h
+++ b/libinterp/octave-value/ov-classdef.h
@@ -161,17 +161,17 @@ public:
     if (--refcount == static_count ())
       destroy ();
   }
 
   virtual dim_vector dims (void) const { return dim_vector (); }
 
 protected:
   // Reference count
-  octave_refcount<octave_idx_type> refcount;
+  octave::refcount<octave_idx_type> refcount;
 
 protected:
   // Restricted copying
   cdef_object_rep (const cdef_object_rep&)
     : refcount (1) { }
 
 private:
   // No assignment
@@ -735,17 +735,17 @@ private:
     bool handle_class;
 
     // The list of super-class constructors that are called implicitly by the
     // the classdef engine when creating an object.  These constructors are not
     // called explicitly by the class constructor.
     std::list<cdef_class> implicit_ctor_list;
 
     // The number of objects of this class.
-    octave_refcount<octave_idx_type> object_count;
+    octave::refcount<octave_idx_type> object_count;
 
     // TRUE if this class is a built-in meta class.
     bool meta;
 
     // Utility iterator typedef's.
     typedef std::map<std::string,cdef_method>::iterator method_iterator;
     typedef std::map<std::string,cdef_method>::const_iterator method_const_iterator;
     typedef std::map<std::string,cdef_property>::iterator property_iterator;
diff --git a/libinterp/parse-tree/pt-mat.cc b/libinterp/parse-tree/pt-mat.cc
--- a/libinterp/parse-tree/pt-mat.cc
+++ b/libinterp/parse-tree/pt-mat.cc
@@ -82,17 +82,17 @@ private:
         some_str (false), all_real (false), all_cmplx (false),
         all_mt (true), any_cell (false), any_sparse (false),
         any_class (false), all_1x1 (! row.empty ()),
         first_elem_is_struct (false), class_nm (), ok (false)
     { init (row); }
 
     ~tm_row_const_rep (void) = default;
 
-    octave_refcount<int> count;
+    octave::refcount<int> count;
 
     dim_vector dv;
 
     bool all_str;
     bool all_sq_str;
     bool all_dq_str;
     bool some_str;
     bool all_real;
diff --git a/liboctave/array/Array.h b/liboctave/array/Array.h
--- a/liboctave/array/Array.h
+++ b/liboctave/array/Array.h
@@ -130,17 +130,17 @@ protected:
 
   //! The real representation of all arrays.
   class ArrayRep
   {
   public:
 
     T *data;
     octave_idx_type len;
-    octave_refcount<int> count;
+    octave::refcount<int> count;
 
     ArrayRep (T *d, octave_idx_type l)
       : data (new T [l]), len (l), count (1)
     {
       std::copy (d, d+l, data);
     }
 
     template <typename U>
diff --git a/liboctave/array/Sparse.h b/liboctave/array/Sparse.h
--- a/liboctave/array/Sparse.h
+++ b/liboctave/array/Sparse.h
@@ -65,17 +65,17 @@ protected:
   public:
 
     T *d;
     octave_idx_type *r;
     octave_idx_type *c;
     octave_idx_type nzmx;
     octave_idx_type nrows;
     octave_idx_type ncols;
-    octave_refcount<int> count;
+    octave::refcount<int> count;
 
     SparseRep (void)
       : d (0), r (0), c (new octave_idx_type [1]), nzmx (0), nrows (0),
         ncols (0), count (1)
     {
       c[0] = 0;
     }
 
diff --git a/liboctave/array/idx-vector.h b/liboctave/array/idx-vector.h
--- a/liboctave/array/idx-vector.h
+++ b/liboctave/array/idx-vector.h
@@ -108,17 +108,17 @@ private:
     // The original dimensions of object (used when subscribing by matrices).
     virtual dim_vector orig_dimensions (void) const { return dim_vector (); }
 
     // i/o
     virtual std::ostream& print (std::ostream& os) const = 0;
 
     virtual Array<octave_idx_type> as_array (void);
 
-    octave_refcount<int> count;
+    octave::refcount<int> count;
 
     bool err;
   };
 
   // The magic colon index.
   class OCTAVE_API idx_colon_rep : public idx_base_rep
   {
   public:
diff --git a/liboctave/numeric/sparse-chol.cc b/liboctave/numeric/sparse-chol.cc
--- a/liboctave/numeric/sparse-chol.cc
+++ b/liboctave/numeric/sparse-chol.cc
@@ -105,17 +105,17 @@ namespace octave
       RowVector perm (void) const { return perms + 1; }
 
       SparseMatrix Q (void) const;
 
       bool is_positive_definite (void) const { return is_pd; }
 
       double rcond (void) const { return cond; }
 
-      octave_refcount<int> count;
+      octave::refcount<int> count;
 
     private:
 
       bool is_pd;
 
       octave_idx_type minor_p;
 
       RowVector perms;
diff --git a/liboctave/numeric/sparse-qr.cc b/liboctave/numeric/sparse-qr.cc
--- a/liboctave/numeric/sparse-qr.cc
+++ b/liboctave/numeric/sparse-qr.cc
@@ -101,17 +101,17 @@ namespace octave
       SPARSE_T R (bool econ) const;
 
       typename SPARSE_T::dense_matrix_type
       C (const typename SPARSE_T::dense_matrix_type& b) const;
 
       typename SPARSE_T::dense_matrix_type
       Q (void) const;
 
-      octave_refcount<int> count;
+      octave::refcount<int> count;
 
       octave_idx_type nrows;
       octave_idx_type ncols;
 
       typename cxsparse_types<SPARSE_T>::symbolic_type *S;
       typename cxsparse_types<SPARSE_T>::numeric_type *N;
 
       template <typename RHS_T, typename RET_T>
diff --git a/liboctave/util/oct-mutex.h b/liboctave/util/oct-mutex.h
--- a/liboctave/util/oct-mutex.h
+++ b/liboctave/util/oct-mutex.h
@@ -41,17 +41,17 @@ public:
 
   virtual void lock (void);
 
   virtual void unlock (void);
 
   virtual bool try_lock (void);
 
 private:
-  octave_refcount<int> count;
+  octave::refcount<int> count;
 };
 
 class
 OCTAVE_API
 octave_mutex
 {
 public:
   octave_mutex (void);
diff --git a/liboctave/util/oct-refcount.h b/liboctave/util/oct-refcount.h
--- a/liboctave/util/oct-refcount.h
+++ b/liboctave/util/oct-refcount.h
@@ -61,58 +61,65 @@ along with Octave; see the file COPYING.
 
 #  define OCTAVE_ATOMIC_INCREMENT(x) ++(*(x))
 #  define OCTAVE_ATOMIC_DECREMENT(x) --(*(x))
 #  define OCTAVE_ATOMIC_POST_INCREMENT(x) (*(x))++
 #  define OCTAVE_ATOMIC_POST_DECREMENT(x) (*(x))--
 
 #endif
 
-// Encapsulates a reference counter.
-template <typename T>
-class octave_refcount
+namespace octave
 {
-public:
+
+  // Encapsulates a reference counter.
 
-  typedef T count_type;
+  template <typename T>
+  class refcount
+  {
+  public:
+
+    typedef T count_type;
 
-  octave_refcount (count_type initial_count)
-    : count (initial_count)
-  { }
+    refcount (count_type initial_count)
+      : count (initial_count)
+    { }
 
-  // Increment/Decrement.  int is postfix.
-  count_type operator++ (void)
-  {
-    return OCTAVE_ATOMIC_INCREMENT (&count);
-  }
+    // Increment/Decrement.  int is postfix.
+    count_type operator++ (void)
+    {
+      return OCTAVE_ATOMIC_INCREMENT (&count);
+    }
 
-  count_type operator++ (int)
-  {
-    return OCTAVE_ATOMIC_POST_INCREMENT (&count);
-  }
+    count_type operator++ (int)
+    {
+      return OCTAVE_ATOMIC_POST_INCREMENT (&count);
+    }
 
-  count_type operator-- (void)
-  {
-    return OCTAVE_ATOMIC_DECREMENT (&count);
-  }
+    count_type operator-- (void)
+    {
+      return OCTAVE_ATOMIC_DECREMENT (&count);
+    }
 
-  count_type operator-- (int)
-  {
-    return OCTAVE_ATOMIC_POST_DECREMENT (&count);
-  }
+    count_type operator-- (int)
+    {
+      return OCTAVE_ATOMIC_POST_DECREMENT (&count);
+    }
 
-  operator count_type (void) const
-  {
-    return static_cast<count_type const volatile&> (count);
-  }
+    operator count_type (void) const
+    {
+      return static_cast<count_type const volatile&> (count);
+    }
 
-  count_type *get (void)
-  {
-    return &count;
-  }
+    count_type *get (void)
+    {
+      return &count;
+    }
+
+  private:
 
-private:
+    count_type count;
+  };
+}
 
-  count_type count;
-};
+template <typename T>
+using octave_refcount OCTAVE_DEPRECATED (("use 'octave::refcount' instead")) = octave::refcount<T>;
 
 #endif
-
diff --git a/liboctave/util/oct-shlib.h b/liboctave/util/oct-shlib.h
--- a/liboctave/util/oct-shlib.h
+++ b/liboctave/util/oct-shlib.h
@@ -85,17 +85,17 @@ namespace octave
       void add_fcn_name (const std::string&);
 
       bool remove_fcn_name (const std::string&);
 
       void do_close_hook (close_hook cl_hook);
 
     public:
 
-      octave_refcount<int> count;
+      octave::refcount<int> count;
 
     protected:
 
       void fake_reload (void);
 
       std::string file;
       octave::sys::time tm_loaded;
 
diff --git a/liboctave/util/url-transfer.h b/liboctave/util/url-transfer.h
--- a/liboctave/util/url-transfer.h
+++ b/liboctave/util/url-transfer.h
@@ -143,17 +143,17 @@ namespace octave
     virtual void http_post (const Array<std::string>& /* param */) { }
 
     virtual void http_action (const Array<std::string>& /* param */,
                               const std::string& /* action */) { }
 
   protected:
 
     // Reference count.
-    octave_refcount<size_t> count;
+    octave::refcount<size_t> count;
 
     // Host for ftp transfers or full URL for http requests.
     std::string host_or_url;
     bool valid;
     bool ftp;
     bool ascii_mode;
     bool ok;
     std::string errmsg;
