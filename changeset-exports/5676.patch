# HG changeset patch
# User jwe
# Date 1142482147 0
#      Thu Mar 16 04:09:07 2006 +0000
# Node ID 9c9eac3a6513aae8b7253b682841eac0e5ae35bc
# Parent  c5f6623514c4780410752e15f38be95cb635f80e
[project @ 2006-03-16 04:09:07 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,14 +1,16 @@
 2006-03-15  William Poetra Yoga Hadisoeseno  <williampoetra@gmail.com>
 
 	* strings/strcmpi.m: Simplify.
 	* strings/strncmpi.m: Import from octave-forge, simplify.
 	* strings/strtrunc.m: New function.
 
+	* strings/lower.m, strings/upper.m: Handle cellstr arguments.
+
 2006-03-15  John W. Eaton  <jwe@octave.org>
 
 	* miscellaneous/doc.m: New file.
 	From Soren Hauberg <soren@hauberg.org>.
 
 2006-03-15  Keith Goodman  <kwgoodman@gmail.com>
 
 	* miscellaneous/mkoctfile.m: New file.
diff --git a/scripts/strings/lower.m b/scripts/strings/lower.m
--- a/scripts/strings/lower.m
+++ b/scripts/strings/lower.m
@@ -14,23 +14,33 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} lower (@var{s})
-## Transform all letters in the string @var{s} to lower case.
-## @seealso{tolower}
+## Transform all letters in the character string (or cell array of
+## character strings) @var{s} to lower case.
+## @seealso{upper, tolower, toupper}
 ## @end deftypefn
 
 ## Author: jwe
 
 function retval = lower (s)
 
   if (nargin != 1)
     usage ("lower (s)");
   endif
 
-  retval = tolower (s);
+  if (ischar (s))
+    retval = tolower (s);
+  elseif (iscellstr (s))
+    retval = cell (size (s));
+    for i = 1:(numel (s))
+      retval{i} = tolower(s{i});
+    endfor
+  else
+    error ("lower: `s' must be a string or cell array of strings");
+  endif
 
 endfunction
diff --git a/scripts/strings/strcmpi.m b/scripts/strings/strcmpi.m
--- a/scripts/strings/strcmpi.m
+++ b/scripts/strings/strcmpi.m
@@ -35,14 +35,16 @@
 ## @end deftypefn
 
 ## Author: Bill Lash <lash@tellabs.com>
 ## Adapted-by: jwe
 
 function retval = strcmpi (s1, s2)
 
   if (nargin == 2)
-    retval = strcmp (tolower (s1), tolower (s2));
+    ## Note that we don't use tolower here because we need to be able to
+    ## handle cell arrays of strings.
+    retval = strcmp (lower (s1), lower (s2));
   else
     usage ("strcmpi (s1, s2)");
   endif
 
 endfunction
diff --git a/scripts/strings/strncmpi.m b/scripts/strings/strncmpi.m
--- a/scripts/strings/strncmpi.m
+++ b/scripts/strings/strncmpi.m
@@ -32,14 +32,16 @@
 ## function returns 1 if the character strings are equal, and 0 otherwise.
 ## This is just the opposite of the corresponding C library function.
 ## @seealso{strcmp, strcmpi, strncmp}
 ## @end deftypefn
 
 function retval = strncmpi (s1, s2, n)
 
   if (nargin == 3)
-    retval = strcmp (tolower (strtrunc (s1, n)), tolower (strtrunc (s2, n)));
+    ## Note that we don't use tolower here because we need to be able to
+    ## handle cell arrays of strings.
+    retval = strcmp (lower (strtrunc (s1, n)), lower (strtrunc (s2, n)));
   else
     usage ("strncmpi (s1, s2, n)");
   endif
 
 endfunction
diff --git a/scripts/strings/upper.m b/scripts/strings/upper.m
--- a/scripts/strings/upper.m
+++ b/scripts/strings/upper.m
@@ -14,23 +14,33 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} upper (@var{s})
-## Transform all letters in the string @var{s} to upper case.
-## @seealso{toupper}
+## Transform all letters in the character string (or cell array of
+## character strings) @var{s} to upper case.
+## @seealso{lower, tolower, toupper}
 ## @end deftypefn
 
 ## Author: jwe
 
 function retval = upper (s)
 
   if (nargin != 1)
     usage ("upper (s)");
   endif
 
-  retval = toupper (s);
+  if (ischar (s))
+    retval = toupper (s);
+  elseif (iscellstr (s))
+    retval = cell (size (s));
+    for i = 1:(numel (s))
+      retval{i} = toupper(s{i});
+    endfor
+  else
+    error ("upper: `s' must be a string or cell array of strings");
+  endif
 
 endfunction
