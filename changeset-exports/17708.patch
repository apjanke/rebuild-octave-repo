# HG changeset patch
# User Craig Hudson <c_hudson_phd@hotmail.com>
# Date 1372771053 -3600
#      Tue Jul 02 14:17:33 2013 +0100
# Node ID f10b7a578e2cb2cc5e89323a88c28201e73b6be6
# Parent  e26b47e9285e030acc807db56d19f9a7e011c94e
Correct return values of gamma() (see Numerical, item 3 on Projects page).

* liboctave/numeric/lo-specfun.cc(xgamma): Check for special cases of
NaN, -Inf, -integer and return NaN.  Check for special case of 0 and
return -Inf.

* libinterp/corefcn/mappers.cc(Fgamma): Add %!tests for exceptional values.

diff --git a/libinterp/corefcn/mappers.cc b/libinterp/corefcn/mappers.cc
--- a/libinterp/corefcn/mappers.cc
+++ b/libinterp/corefcn/mappers.cc
@@ -1051,18 +1051,19 @@ gamma (z) = | t^(z-1) exp (-t) dt.\n\
 %! assert (gamma (a), gamma (real (a)));
 
 %!test
 %! x = single ([.5, 1, 1.5, 2, 3, 4, 5]);
 %! v = single ([sqrt(pi), 1, .5*sqrt(pi), 1, 2, 6, 24]);
 %! assert (gamma (x), v, sqrt (eps ("single")));
 
 %!test
-%! x = [-1, 0, 1, Inf];
-%! v = [Inf, Inf, 1, Inf];
+%! ## Test exceptional values
+%! x = [-Inf, -1, -0, 0, 1, Inf, NaN];
+%! v = [NaN, NaN, -Inf, Inf, 1, Inf, NaN];
 %! assert (gamma (x), v);
 %! assert (gamma (single (x)), single (v));
 
 %!error gamma ()
 %!error gamma (1, 2)
 */
 
 DEFUN (imag, args, ,
diff --git a/liboctave/numeric/lo-specfun.cc b/liboctave/numeric/lo-specfun.cc
--- a/liboctave/numeric/lo-specfun.cc
+++ b/liboctave/numeric/lo-specfun.cc
@@ -361,26 +361,32 @@ dawson (const FloatComplex& x)
   return FloatComplex (real (ret), imag (ret));
 }
 
 double
 xgamma (double x)
 {
   double result;
 
-  if (xisnan (x))
-    result = x;
-  else if ((x <= 0 && D_NINT (x) == x) || xisinf (x))
+  if (xisnan (x) || (x < 0 && (xisinf (x) || D_NINT (x) == x)))
+    result = octave_NaN;
+  else if (x == 0 && xnegative_sign (x))
+    result = -octave_Inf;
+  else if (x == 0 || xisinf (x))
     result = octave_Inf;
   else
+    {
 #if defined (HAVE_TGAMMA)
-    result = tgamma (x);
+      result = tgamma (x);
 #else
-    F77_XFCN (xdgamma, XDGAMMA, (x, result));
+      F77_XFCN (xdgamma, XDGAMMA, (x, result));
 #endif
+      if (xisinf (result) && ((int)floor (x) % 2))
+        result = -octave_Inf;
+    }
 
   return result;
 }
 
 double
 xlgamma (double x)
 {
 #if defined (HAVE_LGAMMA)
@@ -426,26 +432,32 @@ rc_lgamma (double x)
     return result;
 }
 
 float
 xgamma (float x)
 {
   float result;
 
-  if (xisnan (x))
-    result = x;
-  else if ((x <= 0 && D_NINT (x) == x) || xisinf (x))
+  if (xisnan (x) || (x < 0 && (xisinf (x) || D_NINT (x) == x)))
+    result = octave_Float_NaN;
+  else if (x == 0 && xnegative_sign (x))
+    result = -octave_Float_Inf;
+  else if (x == 0 || xisinf (x))
     result = octave_Float_Inf;
   else
-#if defined (HAVE_TGAMMAF)
-    result = tgammaf (x);
+    {
+#if defined (HAVE_TGAMMA)
+      result = tgammaf (x);
 #else
-    F77_XFCN (xgamma, XGAMMA, (x, result));
+      F77_XFCN (xgamma, XGAMMA, (x, result));
 #endif
+      if (xisinf (result) && ((int)floor (x) % 2))
+        result = -octave_Float_Inf;
+    }
 
   return result;
 }
 
 float
 xlgamma (float x)
 {
 #if defined (HAVE_LGAMMAF)
