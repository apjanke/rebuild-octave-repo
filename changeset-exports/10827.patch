# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1280343459 25200
#      Wed Jul 28 11:57:39 2010 -0700
# Node ID 228cd18455a64e26fc6c797eaf24b135921c616c
# Parent  9e6aed3c670459921cfbbb357e1b0fd7088e1a4f
logm.m: Improve documentation string.  Add GPL header.  Add additional test block.

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2010-07-26  Rik <octave@nomad.inbox5.com>
+
+	* linear-algebra/logm.m: Improve documentation string.  Add GPL header.
+	Add additional test block.
+
 2010-07-28  Jaroslav Hajek  <highegg@gmail.com>
 
 	* linear-algebra/logm.m: Rewrite. Thanks to M. Caliari and R. T. Guy.
 
 2010-07-26  Rik <octave@nomad.inbox5.com>
 	* deprecated/complement.m, deprecated/intwarning.m, general/arrayfun.m,
 	general/circshift.m, general/colon.m, general/common_size.m,
 	general/del2.m, general/flipdim.m, general/fliplr.m, general/flipud.m,
diff --git a/scripts/linear-algebra/logm.m b/scripts/linear-algebra/logm.m
--- a/scripts/linear-algebra/logm.m
+++ b/scripts/linear-algebra/logm.m
@@ -1,26 +1,42 @@
 ## Copyright (C) 2010 Richard T. Guy <guyrt7@wfu.edu>
 ## Copyright (C) 2010 Marco Caliari <marco.caliari@univr.it>
 ## Copyright (C) 2008 N.J. Higham
 ##
 ## This file is part of Octave.
 ##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 3 of the License, or (at
+## your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+## General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {[@var{s}, @var{iters}] =} logm (@var{a}, @var{opt_iters})
-## Compute the matrix logarithm of the square matrix @var{a}.  Utilizes a Pade 
-## approximant and the identity
+## @deftypefn  {Function File} {@var{s} =} logm (@var{a})
+## @deftypefnx {Function File} {@var{s} =} logm (@var{a}, @var{opt_iters})
+## @deftypefnx {Function File} {[@var{s}, @var{iters}] =} logm (@dots{})
+## Compute the matrix logarithm of the square matrix @var{a}.  The
+## implementation utilizes a Pad@'e approximant and the identity
 ##
-## @code{ logm(@var{a}) = 2^k * logm(@var{a}^(1 / 2^k)) }.
+## @example
+## logm(@var{a}) = 2^k * logm(@var{a}^(1 / 2^k))
+## @end example
 ##
-## Optional argument @var{opt_iters} is the number of square roots computed
-## and defaults to 100.  Optional output @var{iters} is the number of square
-## roots actually computed.
+## The optional argument @var{opt_iters} is the maximum number of square roots
+## to compute and defaults to 100.  The optional output @var{iters} is the
+## number of square roots actually computed.
 ##
 ## @end deftypefn
 
 ## Reference: N. J. Higham, Functions of Matrices: Theory and Computation 
 ## 	 (SIAM, 2008.)
 ##
 
 function [s, iters] = logm (a, opt_iters)
@@ -40,18 +56,19 @@ function [s, iters] = logm (a, opt_iters
   [u, s] = schur (a);
 
   if (isreal (a))
     [u, s] = rsf2csf (u, s);
   endif
 
   if (any (diag (s) < 0))
     warning ("Octave:logm:non-principal",
-    ["logm: Matrix has nonegative eigenvalues.  Principal matrix logarithm is not defined.", ...
-    "Computing non-principal logarithm."]);
+    ["logm: Matrix has negative eigenvalues.", ...
+     "  Principal matrix logarithm is not defined.", ...
+     "  Computing non-principal logarithm."]);
   endif
 
   k = 0;
   ## Algorithm 11.9 in "Function of matrices", by N. Higham
   theta = [0, 0, 1.61e-2, 5.38e-2, 1.13e-1, 1.86e-1, 2.6429608311114350e-1];
   p = 0;
   m = 7;
   while (k < opt_iters)
@@ -113,21 +130,23 @@ endfunction
 ##   for N-point Gauss-Legendre quadrature.
 
 ## Reference:
 ## G. H. Golub and J. H. Welsch, Calculation of Gauss quadrature
 ## rules, Math. Comp., 23(106):221-230, 1969.
 
 function [x,w] = gauss_legendre(n)
   i = 1:n-1;
-  v = i./sqrt((2*i).^2-1);
-  [V,D] = eig( diag(v,-1)+diag(v,1) );
-  x = diag(D);
+  v = i./sqrt ((2*i).^2-1);
+  [V,D] = eig ( diag(v,-1)+diag(v,1) );
+  x = diag (D);
   w = 2*(V(1,:)'.^2);
 endfunction
 
 
 %!assert(norm(logm([1 -1;0 1]) - [0 -1; 0 0]) < 1e-5);
 %!assert(norm(expm(logm([-1 2 ; 4 -1])) - [-1 2 ; 4 -1]) < 1e-5);
+%!assert(logm([1 -1 -1;0 1 -1; 0 0 1]), [0 -1 -1.5; 0 0 -1; 0 0 0], 1e-5);
 %!
+%% Test input validation
 %!error logm ();
 %!error logm (1, 2, 3);
 %!error <logm: argument must be a square matrix.> logm([1 0;0 1; 2 2]);
