# HG changeset patch
# User Kai T. Ohlhus <k.ohlhus@gmail.com>
# Date 1492558087 -7200
#      Wed Apr 19 01:28:07 2017 +0200
# Node ID 705361dfe353c0de75f50349e0894f2edf5d416c
# Parent  907f8c3e1c8d7e5f8771dd439d382137785484f5
doc: disp rather than display should be overloaded (bug #50640, bug #50729).

* doc/interpreter/oop.txi: overhaul sections about object display.

* libinterp/corefcn/pr-output.cc(display): overhaul docstring to emphasize disp
should preferably be overloaded.

diff --git a/doc/interpreter/oop.txi b/doc/interpreter/oop.txi
--- a/doc/interpreter/oop.txi
+++ b/doc/interpreter/oop.txi
@@ -111,20 +111,20 @@ be obtained by using the constructor nam
 constructor @code{help polynomial} will return the help string.  Help can be
 restricted to a particular class by using the class directory name followed
 by the method.  For example, @code{help @@polynomial/polynomial} is another
 way of displaying the help string for the polynomial constructor.  This second
 means is the only way to obtain help for the overloaded methods and functions
 of a class.
 
 The same specification mechanism can be used wherever Octave expects a function
-name.  For example @code{type @@polynomial/display} will print the code of the
-display method of the polynomial class to the screen, and
-@code{dbstop @@polynomial/display} will set a breakpoint at the first
-executable line of the display method of the polynomial class.
+name.  For example @code{type @@polynomial/disp} will print the code of the
+@code{disp} method of the polynomial class to the screen, and
+@code{dbstop @@polynomial/disp} will set a breakpoint at the first executable
+line of the @code{disp} method of the polynomial class.
 
 To check whether a variable belongs to a user class, the @code{isobject} and
 @code{isa} functions can be used.  For example:
 
 @example
 @group
 p = polynomial ([1, 0, 1]);
 isobject (p)
@@ -159,36 +159,29 @@ ismethod (p, "roots")
 @end group
 @end example
 
 @node Class Methods
 @section Class Methods
 
 There are a number of basic class methods that can (and should) be defined to
 allow the contents of the classes to be queried and set.  The most basic of
-these is the @code{display} method.  The @code{display} method is used by
-Octave whenever a class should be displayed on the screen.  Usually this is the
-result of an Octave expression that doesn't end with a semicolon.  If this
-method is not defined, then Octave won't print anything when displaying the
-contents of a class which can be confusing.
-
-@DOCSTRING(display)
+these is the @code{disp} method.  The @code{disp} method is used by Octave
+whenever a class should be displayed on the screen.  Usually this is the result
+of an Octave expression that doesn't end with a semicolon.  If this method is
+not defined, then Octave won't print anything when displaying the contents of a
+class which can be confusing.
 
 @noindent
-An example of a display method for the polynomial class might be
+An example of a @code{disp} method for the polynomial class might be
 
 @example
 @EXAMPLEFILE(@polynomial/disp.m)
 @end example
 
-@noindent
-Note that in the display method it makes sense to start the method with the
-line @w{@code{printf ("%s =", inputname (1))}} to be consistent with the rest
-of Octave which prints the variable name to be displayed followed by the value.
-
 To be consistent with the Octave graphic handle classes, a class should also
 define the @code{get} and @code{set} methods.  The @code{get} method accepts
 one or two arguments.  The first argument is an object of the appropriate
 class.  If no second argument is given then the method should return a
 structure with all the properties of the class.  If the optional second
 argument is given it should be a property name and the specified property
 should be retrieved.
 
@@ -538,17 +531,17 @@ user class.
 @item @code{a.'} @tab @code{transpose (a)} @tab Transpose
 @item @code{a:b} @tab @code{colon (a, b)} @tab Two element range
 @item @code{a:b:c} @tab @code{colon (a, b, c)} @tab Three element range
 @item @code{[a,  b]} @tab @code{horzcat (a, b)} @tab Horizontal concatenation
 @item @code{[a; b]} @tab @code{vertcat (a, b)} @tab Vertical concatenation
 @item @code{a(s@math{_1},@dots{},s@math{_n})} @tab @code{subsref (a, s)} @tab Subscripted reference
 @item @code{a(s@math{_1},@dots{},s@math{_n}) = b} @tab @code{subsasgn (a, s, b)} @tab Subscripted assignment
 @item @code{b(a)} @tab @code{subsindex (a)} @tab Convert object to index
-@item @code{display} @tab @code{display (a)} @tab Object display
+@item @code{disp} @tab @code{disp (a)} @tab Object display
 @end multitable
 @caption{Available overloaded operators and their corresponding class method}
 @end float
 
 An example @code{mtimes} method for the polynomial class might look like
 
 @example
 @group
@@ -609,59 +602,70 @@ done by creating an object of the parent
 third argument of the class function.
 
 This is most easily demonstrated by example.  Suppose the programmer needs a
 FIR filter, i.e., a filter with a numerator polynomial but a denominator of 1.
 In traditional Octave programming this would be performed as follows.
 
 @example
 @group
-octave:1> x = [some data vector];
-octave:2> n = [some coefficient vector];
-octave:3> y = filter (n, 1, x);
+>> x = [some data vector];
+>> n = [some coefficient vector];
+>> y = filter (n, 1, x);
 @end group
 @end example
 
-The equivalent behavior can be implemented as a class @@FIRfilter.  The
+The equivalent behavior can be implemented as a class @code{@@FIRfilter}.  The
 constructor for this class is the file @file{FIRfilter.m} in the class
 directory @file{@@FIRfilter}.
 
 @example
 @EXAMPLEFILE(@FIRfilter/FIRfilter.m)
 @end example
 
 As before, the leading comments provide documentation for the class
 constructor.  This constructor is very similar to the polynomial class
 constructor, except that a polynomial object is passed as the third argument to
-the @code{class} function, telling Octave that the @w{FIRfilter} class will be
-derived from the polynomial class.  The FIR filter class itself does not have
-any data fields, but it must provide a struct to the @code{class} function.
-Given that the @@polynomial constructor will add an element named
-@var{polynomial} to the object struct, the @@FIRfilter just initializes a
-struct with a dummy field @var{polynomial} which will later be overwritten.
+the @code{class} function, telling Octave that the @code{FIRfilter} class will
+be derived from the polynomial class.  The FIR filter class itself does not
+have any data fields, but it must provide a struct to the @code{class}
+function.  Given that the @code{@@polynomial} constructor will add an element
+named @var{polynomial} to the object struct, the @code{@@FIRfilter} just
+initializes a struct with a dummy field @var{polynomial} which will later be
+overwritten.
 
 Note that the sample code always provides for the case in which no arguments
 are supplied.  This is important because Octave will call a constructor with
 no arguments when loading objects from saved files in order to determine the
 inheritance structure.
 
 A class may be a child of more than one class (@pxref{XREFclass,,class}), and
 inheritance may be nested.  There is no limitation to the number of parents or
 the level of nesting other than memory or other physical issues.
 
-As before, a class requires a @code{display} method.  A simple example might be
+For the @code{FIRfilter} class, more control about the object display is
+desired.  Therefore, the @code{display} method rather than the @code{disp}
+method is overloaded (@pxref{Class Methods}).  A simple example might be
 
 @example
 @group
 @EXAMPLEFILE(@FIRfilter/display.m)
 @end group
 @end example
 
-Note that the @w{FIRfilter}'s display method relies on the display method
-from the polynomial class to actually display the filter coefficients.
+Note that the @code{FIRfilter}'s display method relies on the @code{disp}
+method from the @code{polynomial} class to actually display the filter
+coefficients.  Furthermore, note that in the @code{display} method it makes
+sense to start the method with the line
+@code{@code{printf ("%s =", inputname (1))}} to be consistent with the
+rest of Octave which prints the variable name to be displayed followed by the
+value.  In general it is not recommended to overload the @code{display}
+function.
+
+@DOCSTRING(display)
 
 Once a constructor and display method exist, it is possible to create an
 instance of the class.  It is also possible to check the class type and examine
 the underlying structure.
 
 @example
 @group
 octave:1> f = FIRfilter (polynomial ([1 1 1]/3))
diff --git a/libinterp/corefcn/pr-output.cc b/libinterp/corefcn/pr-output.cc
--- a/libinterp/corefcn/pr-output.cc
+++ b/libinterp/corefcn/pr-output.cc
@@ -3586,28 +3586,33 @@ myclass (@dots{})
 @end example
 
 Or:
 
 @example
 myobj = myclass (@dots{})
 @end example
 
-User-defined classes should overload the @code{display} method and use
-@code{inputname} to access the name of the object.  Otherwise, Octave
-will report only that the object is an instance of its class.
+In general, user-defined classes should overload the @code{disp} method to
+avoid the default output:
 
 @example
 @group
 myobj = myclass (@dots{})
-  @result{} myobj = <class myclass>
+  @result{} myobj =
+
+  <class myclass>
 @end group
 @end example
 
-@seealso{class, subsref, subsasgn}
+When overloading the @code{display} method instead, one has to take care
+of properly displaying the object's name.  This can be done by using the
+@code{inputname} function.
+
+@seealso{disp, class, subsref, subsasgn}
 @end deftypefn */)
 {
   int nargin = args.length ();
 
   // Matlab apparently accepts two arguments with the second set to the
   // inputname of the first.  This is undocumented, but we'll use it.
   // However, we never call display methods for classes with more than
   // one argument.
