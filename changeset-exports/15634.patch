# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1327325642 -3600
#      Mon Jan 23 14:34:02 2012 +0100
# Node ID 3524352c7382ca0c7b8a292834ce1da322e70db5
# Parent  36110925f67b75e4359ce58e4ae1e232a39b745f
Changed color scheme.

diff --git a/libqterminal/CharacterColor.h b/libqterminal/CharacterColor.h
--- a/libqterminal/CharacterColor.h
+++ b/libqterminal/CharacterColor.h
@@ -98,33 +98,29 @@ public:
 
 #define DEFAULT_FORE_COLOR 0
 #define DEFAULT_BACK_COLOR 1
 
 //a standard set of colors using black text on a white background.
 //defined in TerminalDisplay.cpp
 
 static const ColorEntry base_color_table[TABLE_COLORS] =
-// The following are almost IBM standard color codes, with some slight
-// gamma correction for the dim colors to compensate for bright X screens.
-// It contains the 8 ansiterm/xterm colors in 2 intensities.
 {
-  // Fixme: could add faint colors here, also.
-  // normal
-  ColorEntry(QColor(0x00,0x00,0x00), 0, 0 ), ColorEntry( QColor(0xB2,0xB2,0xB2), 1, 0 ), // Dfore, Dback
-  ColorEntry(QColor(0x00,0x00,0x00), 0, 0 ), ColorEntry( QColor(0xB2,0x18,0x18), 0, 0 ), // Black, Red
-  ColorEntry(QColor(0x18,0xB2,0x18), 0, 0 ), ColorEntry( QColor(0xB2,0x68,0x18), 0, 0 ), // Green, Yellow
-  ColorEntry(QColor(0x18,0x18,0xB2), 0, 0 ), ColorEntry( QColor(0xB2,0x18,0xB2), 0, 0 ), // Blue, Magenta
-  ColorEntry(QColor(0x18,0xB2,0xB2), 0, 0 ), ColorEntry( QColor(0xB2,0xB2,0xB2), 0, 0 ), // Cyan, White
-  // intensiv
-  ColorEntry(QColor(0x00,0x00,0x00), 0, 1 ), ColorEntry( QColor(0xFF,0xFF,0xFF), 1, 0 ),
-  ColorEntry(QColor(0x68,0x68,0x68), 0, 0 ), ColorEntry( QColor(0xFF,0x54,0x54), 0, 0 ),
-  ColorEntry(QColor(0x54,0xFF,0x54), 0, 0 ), ColorEntry( QColor(0xFF,0xFF,0x54), 0, 0 ),
-  ColorEntry(QColor(0x54,0x54,0xFF), 0, 0 ), ColorEntry( QColor(0xFF,0x54,0xFF), 0, 0 ),
-  ColorEntry(QColor(0x54,0xFF,0xFF), 0, 0 ), ColorEntry( QColor(0xFF,0xFF,0xFF), 0, 0 )
+    // normal
+    ColorEntry(QColor(0xFF,0xFF,0xFF), 0, 0 ), ColorEntry( QColor(0x00,0x00,0x00), 1, 0 ), // Dfore, Dback
+    ColorEntry(QColor(0x00,0x00,0x00), 0, 0 ), ColorEntry( QColor(0xB2,0x18,0x18), 0, 0 ), // Black, Red
+    ColorEntry(QColor(0x18,0xB2,0x18), 0, 0 ), ColorEntry( QColor(0xB2,0x68,0x18), 0, 0 ), // Green, Yellow
+    ColorEntry(QColor(0x18,0x18,0xB2), 0, 0 ), ColorEntry( QColor(0xB2,0x18,0xB2), 0, 0 ), // Blue, Magenta
+    ColorEntry(QColor(0x18,0xB2,0xB2), 0, 0 ), ColorEntry( QColor(0xB2,0xB2,0xB2), 0, 0 ), // Cyan, White
+    // intensiv
+    ColorEntry(QColor(0x00,0x00,0x00), 0, 1 ), ColorEntry( QColor(0xFF,0xFF,0xFF), 1, 0 ),
+    ColorEntry(QColor(0x68,0x68,0x68), 0, 0 ), ColorEntry( QColor(0xFF,0x54,0x54), 0, 0 ),
+    ColorEntry(QColor(0x54,0xFF,0x54), 0, 0 ), ColorEntry( QColor(0xFF,0xFF,0x54), 0, 0 ),
+    ColorEntry(QColor(0x54,0x54,0xFF), 0, 0 ), ColorEntry( QColor(0xFF,0x54,0xFF), 0, 0 ),
+    ColorEntry(QColor(0x54,0xFF,0xFF), 0, 0 ), ColorEntry( QColor(0xFF,0xFF,0xFF), 0, 0 )
 };
 
 /* CharacterColor is a union of the various color spaces.
 
    Assignment is as follows:
 
    Type  - Space        - Values
 
diff --git a/libqterminal/DefaultTranslatorText.h b/libqterminal/DefaultTranslatorText.h
deleted file mode 100644
--- a/libqterminal/DefaultTranslatorText.h
+++ /dev/null
@@ -1,2 +0,0 @@
-"keyboard \"Fallback Key Translator\"\n"
-"key Tab : \"\\t\" \0"
diff --git a/libqterminal/KeyboardTranslator.cpp b/libqterminal/KeyboardTranslator.cpp
--- a/libqterminal/KeyboardTranslator.cpp
+++ b/libqterminal/KeyboardTranslator.cpp
@@ -25,35 +25,24 @@
 #include "KeyboardTranslator.h"
 
 // System
 #include <ctype.h>
 #include <stdio.h>
 
 // Qt
 #include <QtCore/QBuffer>
-//#include <KDebug>
 #include <QtCore/QFile>
 #include <QtCore/QFileInfo>
 #include <QtCore>
 #include <QtGui>
 
-// KDE
-//#include <KDebug>
-//#include <KLocale>
-//#include <KStandardDirs>
 
 using namespace Konsole;
 
-//this is for default REALLY fallback translator.
-
-//const char* KeyboardTranslatorManager::defaultTranslatorText =
-//#include "DefaultTranslatorText.h"
-//;
-
 //and this is default now translator - default.keytab from original Konsole
 const char* KeyboardTranslatorManager::defaultTranslatorText = 
 #include "ExtendedDefaultTranslator.h"
 ;
 
 KeyboardTranslatorManager::KeyboardTranslatorManager()
     : _haveLoadedAll(false)
 {
@@ -68,42 +57,42 @@ QString KeyboardTranslatorManager::findT
 }
 void KeyboardTranslatorManager::findTranslators()
 {
     QDir dir("kb-layouts/");
     QStringList filters;
     filters << "*.keytab";
     dir.setNameFilters(filters);
     QStringList list = dir.entryList(filters); //(".keytab"); // = KGlobal::dirs()->findAllResources("data",
-                        //                                 "konsole/*.keytab",
-                        //                                 KStandardDirs::NoDuplicates);
+    //                                 "konsole/*.keytab",
+    //                                 KStandardDirs::NoDuplicates);
     list = dir.entryList(filters);
     // add the name of each translator to the list and associated
     // the name with a null pointer to indicate that the translator
     // has not yet been loaded from disk
     QStringListIterator listIter(list);
     while (listIter.hasNext())
     {
         QString translatorPath = listIter.next();
 
         QString name = QFileInfo(translatorPath).baseName();
-       
+
         if ( !_translators.contains(name) ) {
             _translators.insert(name,0);
 	}
     }
     _haveLoadedAll = true;
 }
 
 const KeyboardTranslator* KeyboardTranslatorManager::findTranslator(const QString& name)
 {
     if ( name.isEmpty() )
         return defaultTranslator();
 
-//here was smth wrong in original Konsole source 
+    //here was smth wrong in original Konsole source
     findTranslators();
 
     if ( _translators.contains(name) && _translators[name] != 0 ) {
         return _translators[name];
     }
 
     KeyboardTranslator* translator = loadTranslator(name);
 
@@ -113,34 +102,34 @@ const KeyboardTranslator* KeyboardTransl
         qWarning() << "Unable to load translator" << name;
 
     return translator;
 }
 
 bool KeyboardTranslatorManager::saveTranslator(const KeyboardTranslator* translator)
 {
     const QString path = ".keytab";// = KGlobal::dirs()->saveLocation("data","konsole/")+translator->name()
-//           +".keytab";
+    //           +".keytab";
 
     qDebug() << "Saving translator to" << path;
 
     QFile destination(path);
     
     if (!destination.open(QIODevice::WriteOnly | QIODevice::Text))
     {
         qWarning() << "Unable to save keyboard translation:" 
                    << destination.errorString();
 
         return false;
     }
 
     {
         KeyboardTranslatorWriter writer(&destination);
         writer.writeHeader(translator->description());
-    
+
         QListIterator<KeyboardTranslator::Entry> iter(translator->entries());
         while ( iter.hasNext() )
             writer.writeEntry(iter.next());
     }
 
     destination.close();
 
     return true;
@@ -189,17 +178,17 @@ KeyboardTranslator* KeyboardTranslatorMa
     else
     {
         delete translator;
         return 0;
     }
 }
 
 KeyboardTranslatorWriter::KeyboardTranslatorWriter(QIODevice* destination)
-: _destination(destination)
+    : _destination(destination)
 {
     Q_ASSERT( destination && destination->isWritable() );
 
     _writer = new QTextStream(_destination);
 }
 KeyboardTranslatorWriter::~KeyboardTranslatorWriter()
 {
     delete _writer;
@@ -239,28 +228,28 @@ void KeyboardTranslatorWriter::writeEntr
 // (lines containing only whitespace are ignored, parseLine assumes that comments have
 // already been removed)
 //
 
 KeyboardTranslatorReader::KeyboardTranslatorReader( QIODevice* source )
     : _source(source)
     , _hasNext(false)
 {
-   // read input until we find the description
-   while ( _description.isEmpty() && !source->atEnd() )
-   {
+    // read input until we find the description
+    while ( _description.isEmpty() && !source->atEnd() )
+    {
         const QList<Token>& tokens = tokenize( QString(source->readLine()) );
-   
+
         if ( !tokens.isEmpty() && tokens.first().type == Token::TitleKeyword )
         {
             _description = (tokens[1].text.toUtf8());
         }
-   }
+    }
 
-   readNext();
+    readNext();
 }
 void KeyboardTranslatorReader::readNext() 
 {
     // find next entry
     while ( !_source->atEnd() )
     {
         const QList<Token>& tokens = tokenize( QString(_source->readLine()) );
         if ( !tokens.isEmpty() && tokens.first().type == Token::KeyKeyword )
@@ -285,18 +274,18 @@ void KeyboardTranslatorReader::readNext(
             // get text or command
             if ( tokens[2].type == Token::OutputText )
             {
                 text = tokens[2].text.toLocal8Bit();
             }
             else if ( tokens[2].type == Token::Command )
             {
                 // identify command
-				if (!parseAsCommand(tokens[2].text,command))
-					qWarning() << "Command" << tokens[2].text << "not understood.";
+                if (!parseAsCommand(tokens[2].text,command))
+                    qWarning() << "Command" << tokens[2].text << "not understood.";
             }
 
             KeyboardTranslator::Entry newEntry;
             newEntry.setKeyCode( keyCode );
             newEntry.setState( flags );
             newEntry.setStateMask( flagMask );
             newEntry.setModifiers( modifiers );
             newEntry.setModifierMask( modifierMask );
@@ -311,32 +300,32 @@ void KeyboardTranslatorReader::readNext(
         }
     } 
 
     _hasNext = false;
 }
 
 bool KeyboardTranslatorReader::parseAsCommand(const QString& text,KeyboardTranslator::Command& command) 
 {
-	if ( text.compare("erase",Qt::CaseInsensitive) == 0 )
-		command = KeyboardTranslator::EraseCommand;
+    if ( text.compare("erase",Qt::CaseInsensitive) == 0 )
+        command = KeyboardTranslator::EraseCommand;
     else if ( text.compare("scrollpageup",Qt::CaseInsensitive) == 0 )
         command = KeyboardTranslator::ScrollPageUpCommand;
     else if ( text.compare("scrollpagedown",Qt::CaseInsensitive) == 0 )
         command = KeyboardTranslator::ScrollPageDownCommand;
     else if ( text.compare("scrolllineup",Qt::CaseInsensitive) == 0 )
         command = KeyboardTranslator::ScrollLineUpCommand;
     else if ( text.compare("scrolllinedown",Qt::CaseInsensitive) == 0 )
         command = KeyboardTranslator::ScrollLineDownCommand;
     else if ( text.compare("scrolllock",Qt::CaseInsensitive) == 0 )
         command = KeyboardTranslator::ScrollLockCommand;
     else
     	return false;
 
-	return true;
+    return true;
 }
 
 bool KeyboardTranslatorReader::decodeSequence(const QString& text,
                                               int& keyCode,
                                               Qt::KeyboardModifiers& modifiers,
                                               Qt::KeyboardModifiers& modifierMask,
                                               KeyboardTranslator::States& flags,
                                               KeyboardTranslator::States& flagMask)
@@ -388,19 +377,19 @@ bool KeyboardTranslatorReader::decodeSeq
                 qDebug() << "Unable to parse key binding item:" << buffer;
 
             buffer.clear();
         }
 
         // check if this is a wanted / not-wanted flag and update the 
         // state ready for the next item
         if ( ch == '+' )
-           isWanted = true;
+            isWanted = true;
         else if ( ch == '-' )
-           isWanted = false; 
+            isWanted = false;
     } 
 
     modifiers = tempModifiers;
     modifierMask = tempModifierMask;
     flags = tempFlags;
     flagMask = tempFlagMask;
 
     return true;
@@ -411,18 +400,18 @@ bool KeyboardTranslatorReader::parseAsMo
     if ( item == "shift" )
         modifier = Qt::ShiftModifier;
     else if ( item == "ctrl" || item == "control" )
         modifier = Qt::ControlModifier;
     else if ( item == "alt" )
         modifier = Qt::AltModifier;
     else if ( item == "meta" )
         modifier = Qt::MetaModifier;
-	else if ( item == "keypad" )
-		modifier = Qt::KeypadModifier;
+    else if ( item == "keypad" )
+        modifier = Qt::KeypadModifier;
     else
         return false;
 
     return true;
 }
 bool KeyboardTranslatorReader::parseAsStateFlag(const QString& item , KeyboardTranslator::State& flag)
 {
     if ( item == "appcukeys" )
@@ -473,24 +462,24 @@ bool KeyboardTranslatorReader::hasNextEn
 }
 KeyboardTranslator::Entry KeyboardTranslatorReader::createEntry( const QString& condition , 
                                                                  const QString& result )
 {
     QString entryString("keyboard \"temporary\"\nkey ");
     entryString.append(condition);
     entryString.append(" : ");
 
-	// if 'result' is the name of a command then the entry result will be that command,
-	// otherwise the result will be treated as a string to echo when the key sequence
-	// specified by 'condition' is pressed
-	KeyboardTranslator::Command command;
-	if (parseAsCommand(result,command))
+    // if 'result' is the name of a command then the entry result will be that command,
+    // otherwise the result will be treated as a string to echo when the key sequence
+    // specified by 'condition' is pressed
+    KeyboardTranslator::Command command;
+    if (parseAsCommand(result,command))
     	entryString.append(result);
-	else
-		entryString.append('\"' + result + '\"');
+    else
+        entryString.append('\"' + result + '\"');
 
     QByteArray array = entryString.toUtf8();
 
     KeyboardTranslator::Entry entry;
 
     QBuffer buffer(&array);
     buffer.open(QIODevice::ReadOnly);
     KeyboardTranslatorReader reader(&buffer);
@@ -534,17 +523,17 @@ QList<KeyboardTranslatorReader::Token> K
     {
         return list;
     }
 
     if ( title.exactMatch(text) )
     {
         Token titleToken = { Token::TitleKeyword , QString() };
         Token textToken = { Token::TitleText , title.capturedTexts()[1] };
-    
+
         list << titleToken << textToken;
     }
     else if  ( key.exactMatch(text) )
     {
         Token keyToken = { Token::KeyKeyword , QString() };
         Token sequenceToken = { Token::KeySequence , key.capturedTexts()[1].remove(' ') };
 
         list << keyToken << sequenceToken;
@@ -553,18 +542,18 @@ QList<KeyboardTranslatorReader::Token> K
         {
             // capturedTexts()[2] is a command
             Token commandToken = { Token::Command , key.capturedTexts()[2] };
             list << commandToken;    
         }   
         else
         {
             // capturedTexts()[3] is the output string
-           Token outputToken = { Token::OutputText , key.capturedTexts()[3] };
-           list << outputToken;
+            Token outputToken = { Token::OutputText , key.capturedTexts()[3] };
+            list << outputToken;
         }     
     }
     else
     {
         qWarning() << "Line in keyboard translator file could not be understood:" << text;
     }
 
     return list;
@@ -576,34 +565,34 @@ QList<QString> KeyboardTranslatorManager
     {
         findTranslators();
     }
 
     return _translators.keys();
 }
 
 KeyboardTranslator::Entry::Entry()
-: _keyCode(0)
-, _modifiers(Qt::NoModifier)
-, _modifierMask(Qt::NoModifier)
-, _state(NoState)
-, _stateMask(NoState)
-, _command(NoCommand)
+    : _keyCode(0)
+    , _modifiers(Qt::NoModifier)
+    , _modifierMask(Qt::NoModifier)
+    , _state(NoState)
+    , _stateMask(NoState)
+    , _command(NoCommand)
 {
 }
 
 bool KeyboardTranslator::Entry::operator==(const Entry& rhs) const
 {
     return _keyCode == rhs._keyCode &&
-           _modifiers == rhs._modifiers &&
-           _modifierMask == rhs._modifierMask &&
-           _state == rhs._state &&
-           _stateMask == rhs._stateMask &&
-           _command == rhs._command &&
-           _text == rhs._text;
+            _modifiers == rhs._modifiers &&
+            _modifierMask == rhs._modifierMask &&
+            _state == rhs._state &&
+            _stateMask == rhs._stateMask &&
+            _command == rhs._command &&
+            _text == rhs._text;
 }
 
 bool KeyboardTranslator::Entry::matches(int keyCode , 
                                         Qt::KeyboardModifiers modifiers,
                                         States state) const
 {
     if ( _keyCode != keyCode )
         return false;
@@ -620,17 +609,17 @@ bool KeyboardTranslator::Entry::matches(
 
     // special handling for the 'Any Modifier' state, which checks for the presence of 
     // any or no modifiers.  In this context, the 'keypad' modifier does not count.
     bool anyModifiersSet = modifiers != 0 && modifiers != Qt::KeypadModifier;
     if ( _stateMask & KeyboardTranslator::AnyModifierState )
     {
         // test fails if any modifier is required but none are set
         if ( (_state & KeyboardTranslator::AnyModifierState) && !anyModifiersSet )
-           return false;
+            return false;
 
         // test fails if no modifier is allowed but one or more are set
         if ( !(_state & KeyboardTranslator::AnyModifierState) && anyModifiersSet )
             return false;
     }
 
     return true;
 }
@@ -640,27 +629,27 @@ QByteArray KeyboardTranslator::Entry::es
 
     for ( int i = 0 ; i < result.count() ; i++ )
     {
         char ch = result[i];
         char replacement = 0;
 
         switch ( ch )
         {
-            case 27 : replacement = 'E'; break;
-            case 8  : replacement = 'b'; break;
-            case 12 : replacement = 'f'; break;
-            case 9  : replacement = 't'; break;
-            case 13 : replacement = 'r'; break;
-            case 10 : replacement = 'n'; break;
-            default:
-                // any character which is not printable is replaced by an equivalent
-                // \xhh escape sequence (where 'hh' are the corresponding hex digits)
-                if ( !QChar(ch).isPrint() )
-                    replacement = 'x';
+        case 27 : replacement = 'E'; break;
+        case 8  : replacement = 'b'; break;
+        case 12 : replacement = 'f'; break;
+        case 9  : replacement = 't'; break;
+        case 13 : replacement = 'r'; break;
+        case 10 : replacement = 'n'; break;
+        default:
+            // any character which is not printable is replaced by an equivalent
+            // \xhh escape sequence (where 'hh' are the corresponding hex digits)
+            if ( !QChar(ch).isPrint() )
+                replacement = 'x';
         }
 
         if ( replacement == 'x' )
         {
             result.replace(i,1,"\\x"+QByteArray(1,ch).toInt(0, 16)); 
         } else if ( replacement != 0 )
         {
             result.remove(i,1);
@@ -676,54 +665,54 @@ QByteArray KeyboardTranslator::Entry::un
     QByteArray result(input);
 
     for ( int i = 0 ; i < result.count()-1 ; i++ )
     {
 
         QByteRef ch = result[i];
         if ( ch == '\\' )
         {
-           char replacement[2] = {0,0};
-           int charsToRemove = 2;
-		   bool escapedChar = true;
+            char replacement[2] = {0,0};
+            int charsToRemove = 2;
+            bool escapedChar = true;
 
-           switch ( result[i+1] )
-           {
-              case 'E' : replacement[0] = 27; break;
-              case 'b' : replacement[0] = 8 ; break;
-              case 'f' : replacement[0] = 12; break;
-              case 't' : replacement[0] = 9 ; break;
-              case 'r' : replacement[0] = 13; break;
-              case 'n' : replacement[0] = 10; break;
-              case 'x' :
-			  {
-                    // format is \xh or \xhh where 'h' is a hexadecimal
-                    // digit from 0-9 or A-F which should be replaced
-                    // with the corresponding character value
-                    char hexDigits[3] = {0};
+            switch ( result[i+1] )
+            {
+            case 'E' : replacement[0] = 27; break;
+            case 'b' : replacement[0] = 8 ; break;
+            case 'f' : replacement[0] = 12; break;
+            case 't' : replacement[0] = 9 ; break;
+            case 'r' : replacement[0] = 13; break;
+            case 'n' : replacement[0] = 10; break;
+            case 'x' :
+            {
+                // format is \xh or \xhh where 'h' is a hexadecimal
+                // digit from 0-9 or A-F which should be replaced
+                // with the corresponding character value
+                char hexDigits[3] = {0};
 
-                    if ( (i < result.count()-2) && isxdigit(result[i+2]) )
-                            hexDigits[0] = result[i+2];
-                    if ( (i < result.count()-3) && isxdigit(result[i+3]) )
-                            hexDigits[1] = result[i+3];
+                if ( (i < result.count()-2) && isxdigit(result[i+2]) )
+                    hexDigits[0] = result[i+2];
+                if ( (i < result.count()-3) && isxdigit(result[i+3]) )
+                    hexDigits[1] = result[i+3];
 
-                    int charValue = 0;
-                    sscanf(hexDigits,"%x",&charValue);
-                    
-                    replacement[0] = (char)charValue; 
+                int charValue = 0;
+                sscanf(hexDigits,"%x",&charValue);
+
+                replacement[0] = (char)charValue;
 
-                    charsToRemove = 2 + strlen(hexDigits);
-			  }
-              break;
-			  default:
-			  		escapedChar = false;
-           }
+                charsToRemove = 2 + strlen(hexDigits);
+            }
+            break;
+            default:
+                escapedChar = false;
+            }
 
-           if ( escapedChar )
-               result.replace(i,charsToRemove,replacement);
+            if ( escapedChar )
+                result.replace(i,charsToRemove,replacement);
         }
     }
     
     return result;
 }
 
 void KeyboardTranslator::Entry::insertModifier( QString& item , int modifier ) const
 {
@@ -738,18 +727,18 @@ void KeyboardTranslator::Entry::insertMo
     if ( modifier == Qt::ShiftModifier )
         item += "Shift";
     else if ( modifier == Qt::ControlModifier )
         item += "Ctrl";
     else if ( modifier == Qt::AltModifier )
         item += "Alt";
     else if ( modifier == Qt::MetaModifier )
         item += "Meta";
-	else if ( modifier == Qt::KeypadModifier )
-		item += "KeyPad";
+    else if ( modifier == Qt::KeypadModifier )
+        item += "KeyPad";
 }
 void KeyboardTranslator::Entry::insertState( QString& item , int state ) const
 {
     if ( !(state & _stateMask) )
         return;
 
     if ( state & _state )
         item += '+' ;
@@ -766,18 +755,18 @@ void KeyboardTranslator::Entry::insertSt
         item += "AppCuKeys";
     else if ( state == KeyboardTranslator::AnyModifierState )
         item += "AnyMod";
 }
 QString KeyboardTranslator::Entry::resultToString(bool expandWildCards,Qt::KeyboardModifiers modifiers) const
 {
     if ( !_text.isEmpty() )
         return escapedText(expandWildCards,modifiers);
-	else if ( _command == EraseCommand )
-		return "Erase";
+    else if ( _command == EraseCommand )
+        return "Erase";
     else if ( _command == ScrollPageUpCommand )
         return "ScrollPageUp";
     else if ( _command == ScrollPageDownCommand )
         return "ScrollPageDown";
     else if ( _command == ScrollLineUpCommand )
         return "ScrollLineUp";
     else if ( _command == ScrollLineDownCommand )
         return "ScrollLineDown";
@@ -802,17 +791,17 @@ QString KeyboardTranslator::Entry::condi
     insertState( result , KeyboardTranslator::AnsiState );
     insertState( result , KeyboardTranslator::CursorKeysState );
     insertState( result , KeyboardTranslator::AnyModifierState );
 
     return result;
 }
 
 KeyboardTranslator::KeyboardTranslator(const QString& name)
-: _name(name)
+    : _name(name)
 {
 }
 
 void KeyboardTranslator::setDescription(const QString& description) 
 {
     _description = description;
 }
 QString KeyboardTranslator::description() const
diff --git a/libqterminal/TerminalDisplay.cpp b/libqterminal/TerminalDisplay.cpp
--- a/libqterminal/TerminalDisplay.cpp
+++ b/libqterminal/TerminalDisplay.cpp
@@ -295,17 +295,16 @@ TerminalDisplay::TerminalDisplay(QWidget
   connect(_blinkTimer, SIGNAL(timeout()), this, SLOT(blinkEvent()));
   _blinkCursorTimer   = new QTimer(this);
   connect(_blinkCursorTimer, SIGNAL(timeout()), this, SLOT(blinkCursorEvent()));
 
 //  QCursor::setAutoHideCursor( this, true );
   
   setUsesMouse(true);
   setColorTable(base_color_table);
-//  setColorTable(blackonlightyellow_color_table); 
   setMouseTracking(true);
 
   // Enable drag and drop 
   setAcceptDrops(true); // attempt
   dragInfo.state = diNone;
 
   setFocusPolicy( Qt::WheelFocus );
 
diff --git a/libqterminal/libqterminal.pro b/libqterminal/libqterminal.pro
--- a/libqterminal/libqterminal.pro
+++ b/libqterminal/libqterminal.pro
@@ -5,49 +5,49 @@ TARGET		= qterminal
 
 CONFIG		+= staticlib
 
 QT += core gui
 
 DEFINES 	+= HAVE_POSIX_OPENPT	    
 #or DEFINES 	+= HAVE_GETPT
 
-HEADERS 	= TerminalCharacterDecoder.h \
-                Character.h \
-                CharacterColor.h \
-		KeyboardTranslator.h \
-		ExtendedDefaultTranslator.h \
-                Screen.h \
-                History.h \
-                BlockArray.h \
-                konsole_wcwidth.h \
-		ScreenWindow.h \
-		Emulation.h \
-                Vt102Emulation.h \
-                TerminalDisplay.h \
-                Filter.h LineFont.h \
-                Pty.h \
-                kpty.h \
-                kpty_p.h \
-                k3process.h \
-                k3processcontroller.h \
-                Session.h \
-                ShellCommand.h \
-    QTerminal.h
-
-SOURCES 	= TerminalCharacterDecoder.cpp \
-		KeyboardTranslator.cpp \
-                Screen.cpp \
-                History.cpp \
-                BlockArray.cpp \
-                konsole_wcwidth.cpp \
-		ScreenWindow.cpp \
-		Emulation.cpp \
-                Vt102Emulation.cpp \
-                TerminalDisplay.cpp \
-                Filter.cpp \
-                Pty.cpp \
-                kpty.cpp \
-                k3process.cpp \
-                k3processcontroller.cpp \
-                Session.cpp \
-                ShellCommand.cpp \
-    QTerminal.cpp
+HEADERS  = BlockArray.h \
+           Character.h \
+           CharacterColor.h \
+           Emulation.h \
+           ExtendedDefaultTranslator.h \
+           Filter.h \
+           History.h \
+           k3process.h \
+           k3processcontroller.h \
+           KeyboardTranslator.h \
+           konsole_wcwidth.h \
+           kpty.h \
+           kpty_p.h \
+           LineFont.h \
+           Pty.h \
+           QTerminal.h \
+           Screen.h \
+           ScreenWindow.h \
+           Session.h \
+           ShellCommand.h \
+           TerminalCharacterDecoder.h \
+           TerminalDisplay.h \
+           Vt102Emulation.h
+SOURCES  = BlockArray.cpp \
+           Emulation.cpp \
+           Filter.cpp \
+           History.cpp \
+           k3process.cpp \
+           k3processcontroller.cpp \
+           KeyboardTranslator.cpp \
+           konsole_wcwidth.cpp \
+           kpty.cpp \
+           Pty.cpp \
+           QTerminal.cpp \
+           Screen.cpp \
+           ScreenWindow.cpp \
+           Session.cpp \
+           ShellCommand.cpp \
+           TerminalCharacterDecoder.cpp \
+           TerminalDisplay.cpp \
+           Vt102Emulation.cpp
