# HG changeset patch
# User Rik <rik@octave.org>
# Date 1480306144 28800
#      Sun Nov 27 20:09:04 2016 -0800
# Node ID f574a38560e1babfd63c273109e0b8fc3e2ed8cd
# Parent  96228c17a66ab71988dcf15aea0d29323b05549b
# Parent  bb8b6fe70e8af472b1ce157bdd025b5410f42460
maint: merge away accidental extra head.

diff --git a/scripts/plot/draw/private/__marching_cube__.m b/scripts/plot/draw/private/__marching_cube__.m
--- a/scripts/plot/draw/private/__marching_cube__.m
+++ b/scripts/plot/draw/private/__marching_cube__.m
@@ -14,39 +14,33 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {} {[@var{t}, @var{p}] =} __marching_cube__ (@var{x}, @var{y}, @var{z}, @var{val}, @var{iso})
 ## @deftypefnx {} {[@var{t}, @var{p}, @var{c}] =} __marching_cube__ (@var{x}, @var{y}, @var{z}, @var{val}, @var{iso}, @var{col})
-## Undocumented internal function.
-## @end deftypefn
-
-## -*- texinfo -*-
-## @deftypefn  {} {[@var{t}, @var{p}] =} __marching_cube__ (@var{x}, @var{y}, @var{z}, @var{val}, @var{iso})
-## @deftypefnx {} {[@var{t}, @var{p}, @var{c}] =} __marching_cube__ (@var{x}, @var{y}, @var{z}, @var{val}, @var{iso}, @var{col})
 ##
-## Return the triangulation information @var{t} at points @var{p} for
-## the isosurface values resp. the volume data @var{val} and the iso
-## level @var{iso}.  It is considered that the volume data @var{val} is
-## given at the points @var{x}, @var{y} and @var{z} which are of type
-## three--dimensional numeric arrays.  The orientation of the triangles
-## is choosen such that the normals point from the higher values to the
-## lower values.
+## Return the triangulation information @var{t} at points @var{p} for the
+## isosurface values resp. the volume data @var{val} and the iso level
+## @var{iso}.  It is considered that the volume data @var{val} is given at
+## the points @var{x}, @var{y} and @var{z} which are of type
+## three-dimensional numeric arrays.  The orientation of the triangles is
+## choosen such that the normals point from the higher values to the lower
+## values.
 ##
 ## Optionally the color data @var{col} can be passed to this function
 ## whereas computed vertices color data @var{c} is returned as third
 ## argument.
 ##
 ## The marching cube algorithm is well known and described, for example, at
-## Wikipedia.  The triangulation lookup table and the edge table used
-## here are based on Cory Gene Bloyd's implementation and can be found
-## beyond other surface and geometry stuff at Paul Bourke's website
+## Wikipedia.  The triangulation lookup table and the edge table used here
+## are based on Cory Gene Bloyd's implementation and can be found beyond
+## other surface and geometry stuff at Paul Bourke's website
 ## @uref{http://local.wasp.uwa.edu.au/~pbourke/geometry/polygonise}.
 ##
 ## For example:
 ##
 ## @example
 ## @group
 ## N = 20;
 ## lin = linspace (0, 2, N);
@@ -55,117 +49,119 @@
 ## c = (x-.5).^2 + (y-.5).^2 + (z-.5).^2;
 ## [t, p] = __marching_cube__ (x, y, z, c, .5);
 ##
 ## figure ();
 ## trimesh (t, p(:,1), p(:,2), p(:,3));
 ## @end group
 ## @end example
 ##
-## Instead of the @code{trimesh} function the @code{patch}
-## function can be used to visualize the geometry.  For example:
+## Instead of the @code{trimesh} function the @code{patch} function can be
+## used to visualize the geometry.  For example:
 ##
 ## @example
 ## @group
-## figure (); view (-38, 20);
-## pa = patch ("Faces", t, "Vertices", p, "FaceVertexCData", p, ...
+## figure ();
+## view (-38, 20);
+## pa = patch ("Faces", t, "Vertices", p, "FaceVertexCData", p,
 ##             "FaceColor", "interp", "EdgeColor", "none");
 ##
 ## ## Revert normals
 ## set (pa, "VertexNormals", -get (pa, "VertexNormals"));
 ##
-## ## Set lightning (available with the JHandles package)
-## # set (pa, "FaceLighting", "gouraud");
-## # light ( "Position", [1 1 5]);
+## ## Set lighting
+## set (pa, "FaceLighting", "gouraud");
+## light ( "Position", [1 1 5]);
 ## @end group
 ## @end example
 ##
 ## @end deftypefn
 
 ## Author: Martin Helm <martin@mhelm.de>
 
 function [T, p, col] = __marching_cube__ (xx, yy, zz, c, iso, colors)
 
-  persistent edge_table=[];
-  persistent tri_table=[];
+  persistent edge_table = [];
+  persistent tri_table = [];
 
   calc_cols = false;
   lindex = 4;
 
   if (isempty (tri_table) || isempty (edge_table))
     [edge_table, tri_table] = init_mc ();
   endif
 
+  ## FIXME: Do we need all of the following validation on an internal function?
   if ((nargin != 5 && nargin != 6) || (nargout != 2 && nargout != 3))
     print_usage ();
   endif
 
   if (! isnumeric (xx) || ! isnumeric (yy) || ! isnumeric (zz)
       || ! isnumeric (c) || ndims (xx) != 3 || ndims (yy) != 3
       || ndims (zz) != 3 || ndims (c) != 3)
-    error ("__marching_cube__: XX, YY, ZZ, C must be matrices of dim 3");
+    error ("__marching_cube__: XX, YY, ZZ, C must be 3-D matrices");
   endif
 
   if (! size_equal (xx, yy, zz, c))
     error ("__marching_cube__: XX, YY, ZZ, C must be of equal size");
   endif
 
   if (any (size (xx) < [2 2 2]))
     error ("__marching_cube__: grid size must be at least 2x2x2");
   endif
 
   if (! isscalar (iso))
     error ("__marching_cube__: ISO must be scalar value");
   endif
 
   if (nargin == 6)
-    if ( ! isnumeric (colors) || ndims (colors) != 3 || size (colors) != size (c) )
-      error ( "COLORS must be a matrix of dim 3 and of same size as C" );
+    if (! isnumeric (colors) || ndims (colors) != 3 || ! size_equal (colors, c))
+      error ( "COLORS must be a 3-D matrix with the same size as C" );
     endif
     calc_cols = true;
     lindex = 5;
   endif
 
   n = size (c) - 1;
 
   ## phase I: assign information to each voxel which edges are intersected by
-  ## the isosurface
+  ## the isosurface.
   cc = zeros (n(1), n(2), n(3), "uint16");
   cedge = zeros (size (cc), "uint16");
 
   vertex_idx = {1:n(1), 1:n(2), 1:n(3); ...
-    2:n(1)+1, 1:n(2), 1:n(3); ...
-    2:n(1)+1, 2:n(2)+1, 1:n(3); ...
-    1:n(1), 2:n(2)+1, 1:n(3); ...
-    1:n(1), 1:n(2), 2:n(3)+1; ...
-    2:n(1)+1, 1:n(2), 2:n(3)+1; ...
-    2:n(1)+1, 2:n(2)+1, 2:n(3)+1; ...
-    1:n(1), 2:n(2)+1, 2:n(3)+1 };
+                2:n(1)+1, 1:n(2), 1:n(3); ...
+                2:n(1)+1, 2:n(2)+1, 1:n(3); ...
+                1:n(1), 2:n(2)+1, 1:n(3); ...
+                1:n(1), 1:n(2), 2:n(3)+1; ...
+                2:n(1)+1, 1:n(2), 2:n(3)+1; ...
+                2:n(1)+1, 2:n(2)+1, 2:n(3)+1; ...
+                1:n(1), 2:n(2)+1, 2:n(3)+1 };
 
   ## calculate which vertices have values higher than iso
-  for ii=1:8
+  for ii = 1:8
     idx = c(vertex_idx{ii, :}) > iso;
     cc(idx) = bitset (cc(idx), ii);
   endfor
 
-  cedge = edge_table(cc+1); # assign the info about intersected edges
-  id = find (cedge); # select only voxels which are intersected
+  cedge = edge_table(cc+1);  # assign the info about intersected edges
+  id = find (cedge);         # select only voxels which are intersected
   if (isempty (id))
     T = p = col = [];
     return;
   endif
 
   ## phase II: calculate the list of intersection points
-  xyz_off = [1, 1, 1; 2, 1, 1; 2, 2, 1; 1, 2, 1; 1, 1, 2;  2, 1, 2; 2, 2, 2; 1, 2, 2];
+  xyz_off = [1, 1, 1; 2, 1, 1; 2, 2, 1; 1, 2, 1; 1, 1, 2; 2, 1, 2; 2, 2, 2; 1, 2, 2];
   edges = [1 2; 2 3; 3 4; 4 1; 5 6; 6 7; 7 8; 8 5; 1 5; 2 6; 3 7; 4 8];
-  offset = sub2ind (size (c), xyz_off(:, 1), xyz_off(:, 2), xyz_off(:, 3)) -1;
+  offset = sub2ind (size (c), xyz_off(:, 1), xyz_off(:, 2), xyz_off(:, 3)) - 1;
   pp = zeros (length (id), lindex, 12);
   ccedge = [vec(cedge(id)), id];
   ix_offset=0;
-  for jj=1:12
+  for jj = 1:12
     id__ = bitget (ccedge(:, 1), jj);
     id_ = ccedge(id__, 2);
     [ix iy iz] = ind2sub (size (cc), id_);
     id_c = sub2ind (size (c), ix, iy, iz);
     id1 = id_c + offset(edges(jj, 1));
     id2 = id_c + offset(edges(jj, 2));
     if (calc_cols)
       pp(id__, 1:5, jj) = [vertex_interp(iso, xx(id1), yy(id1), zz(id1), ...
@@ -177,19 +173,19 @@ function [T, p, col] = __marching_cube__
         (1:rows (id_))' + ix_offset ];
     endif
     ix_offset += rows (id_);
   endfor
 
   ## phase III: calculate the triangulation from the point list
   T = [];
   tri = tri_table(cc(id)+1, :);
-  for jj=1:3:15
-    id_ = find (tri(:, jj)>0);
-    p = [id_, lindex*ones(rows (id_), 1),tri(id_, jj:jj+2)];
+  for jj = 1:3:15
+    id_ = find (tri(:, jj) > 0);
+    p = [id_, lindex*ones(rows (id_), 1), tri(id_, jj:jj+2)];
     if (! isempty (p))
       p1 = sub2ind (size (pp), p(:,1), p(:,2), p(:,3));
       p2 = sub2ind (size (pp), p(:,1), p(:,2), p(:,4));
       p3 = sub2ind (size (pp), p(:,1), p(:,2), p(:,5));
       T = [T; pp(p1), pp(p2), pp(p3)];
     endif
   endfor
 
@@ -202,24 +198,25 @@ function [T, p, col] = __marching_cube__
       if (calc_cols)
         col(pp(idp, lindex, jj),1) = pp(idp, 4, jj);
       endif
     endif
   endfor
 
 endfunction
 
-function p = vertex_interp (isolevel, p1x, p1y, p1z, ...
+function p = vertex_interp (isolevel, p1x, p1y, p1z,
                             p2x, p2y, p2z,valp1,valp2, col1, col2)
 
   if (nargin == 9)
     p = zeros (length (p1x), 3);
   elseif (nargin == 11)
     p = zeros (length (p1x), 4);
   else
+    ## FIXME: Do we need input validation on internal functions?
     error ("__marching_cube__: wrong number of arguments");
   endif
 
   id = abs (valp1-valp2) < (10*eps) .* (abs (valp1) .+ abs (valp2));
   if (any (id))
     p(id, 1:3) = [ p1x(id), p1y(id), p1z(id) ];
     if (nargin == 11)
       p(id, 4) = col1(id);
@@ -271,17 +268,17 @@ function [edge_table, tri_table] = init_
   0x4ac, 0x5a5, 0x6af, 0x7a6, 0xaa , 0x1a3, 0x2a9, 0x3a0, ...
   0xd30, 0xc39, 0xf33, 0xe3a, 0x936, 0x83f, 0xb35, 0xa3c, ...
   0x53c, 0x435, 0x73f, 0x636, 0x13a, 0x33 , 0x339, 0x230, ...
   0xe90, 0xf99, 0xc93, 0xd9a, 0xa96, 0xb9f, 0x895, 0x99c, ...
   0x69c, 0x795, 0x49f, 0x596, 0x29a, 0x393, 0x99 , 0x190, ...
   0xf00, 0xe09, 0xd03, 0xc0a, 0xb06, 0xa0f, 0x905, 0x80c, ...
   0x70c, 0x605, 0x50f, 0x406, 0x30a, 0x203, 0x109, 0x0   ];
 
-  tri_table =[
+  tri_table = [
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1;
   0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1;
   0, 1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1;
   1, 8, 3, 9, 8, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1;
   1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1;
   0, 8, 3, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1;
   9, 2, 10, 0, 2, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1;
   2, 8, 3, 2, 10, 8, 10, 9, 8, -1, -1, -1, -1, -1, -1, -1;
