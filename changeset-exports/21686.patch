# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1462993342 25200
#      Wed May 11 12:02:22 2016 -0700
# Node ID f07d6f57921480a55e1cebf05d6fefd5590dcca4
# Parent  fc8cc7730514ae28a19ba735191a6636bb321abd
scanf: use appropriate sized types for integer conversions (bug #47741)

* oct-stream.cc (octave_base_stream::do_scanf): Use sized types for integer
conversions to work in 32-bit environments and be Matlab compatible.
* io.tst: Add %!tests.

diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -4724,69 +4724,69 @@ octave_base_stream::do_scanf (scanf_form
                   break;
 
                 case 'd': case 'i':
                   {
                     switch (elt->modifier)
                       {
                       case 'h':
                         {
-                          short int tmp;
+                          int16_t tmp;
                           do_scanf_conv (is, *elt, &tmp, mval, data,
                                          data_index, conversion_count,
                                          nr, max_size, discard);
                         }
                         break;
 
                       case 'l':
                         {
-                          long int tmp;
+                          int64_t tmp;
                           do_scanf_conv (is, *elt, &tmp, mval, data,
                                          data_index, conversion_count,
                                          nr, max_size, discard);
                         }
                         break;
 
                       default:
                         {
-                          int tmp;
+                          int32_t tmp;
                           do_scanf_conv (is, *elt, &tmp, mval, data,
                                          data_index, conversion_count,
                                          nr, max_size, discard);
                         }
                         break;
                       }
                   }
                   break;
 
                 case 'o': case 'u': case 'x':
                   {
                     switch (elt->modifier)
                       {
                       case 'h':
                         {
-                          unsigned short int tmp;
+                          uint16_t tmp;
                           do_scanf_conv (is, *elt, &tmp, mval, data,
                                          data_index, conversion_count,
                                          nr, max_size, discard);
                         }
                         break;
 
                       case 'l':
                         {
-                          unsigned long int tmp;
+                          uint64_t tmp;
                           do_scanf_conv (is, *elt, &tmp, mval, data,
                                          data_index, conversion_count,
                                          nr, max_size, discard);
                         }
                         break;
 
                       default:
                         {
-                          unsigned int tmp;
+                          uint32_t tmp;
                           do_scanf_conv (is, *elt, &tmp, mval, data,
                                          data_index, conversion_count,
                                          nr, max_size, discard);
                         }
                         break;
                       }
                   }
                   break;
diff --git a/test/io.tst b/test/io.tst
--- a/test/io.tst
+++ b/test/io.tst
@@ -279,16 +279,30 @@
 %!assert (sscanf (['ab'; 'cd'], '%s'), 'acbd')
 
 %!assert (sscanf ('02:08:30', '%i:%i:%i'), [2; 0])
 %!assert (sscanf ('02:08:30', '%d:%d:%d'), [2; 8; 30])
 
 %!assert (sscanf ('0177 08', '%i'), [127; 0; 8])
 %!assert (sscanf ('0177 08', '%d'), [177; 8])
 
+## bug #47741
+%!assert (sscanf ('2147483647', '%d'), 2147483647)
+%!assert (sscanf ('2147483647', '%i'), 2147483647)
+%!assert (sscanf ('4294967295', '%u'), 4294967295)
+%!assert (sscanf ('37777777777', '%o'), 4294967295)
+%!assert (sscanf ('ffffffff', '%x'), 4294967295)
+## FIXME: scanf should return int64/uint64 if all conversions are %l[dioux].
+## Until then only test values that are within precision range of a double.
+%!assert (sscanf ('281474976710655', '%ld'), 281474976710655)
+%!assert (sscanf ('281474976710655', '%li'), 281474976710655)
+%!assert (sscanf ('281474976710655', '%lu'), 281474976710655)
+%!assert (sscanf ('7777777777777777', '%lo'), 281474976710655)
+%!assert (sscanf ('ffffffffffff', '%lx'), 281474976710655)
+
 %!test
 %! [val, count, msg, pos] = sscanf ("3I2", "%f");
 %! assert (val, 3);
 %! assert (count, 1);
 %! assert (msg, "");
 %! assert (pos, 2);
 
 %!test
