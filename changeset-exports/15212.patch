# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1345666591 14400
#      Wed Aug 22 16:16:31 2012 -0400
# Node ID 4bbd3bbb89126cff32bd1b572728a8c5c6c57d37
# Parent  efd2024c7d56e159f9ae422a327932acd9d9a712
reduce code duplication in too_large_for_float array functions

* lo-utils.h (any_all_test): New function.
* lo-utils.h, lo-utils.cc (xtoo_large_for_float (const Complex&)):
New function.

* Array.h (Array<T>::test): Call any_all_test.

* Sparse.h (Sparse<T>::test, Sparse<T>::test_any, Sparse<T>::test_all,
Sparse<T>::test_any, Sparse<T>::test_any, Sparse<T>::test_all,
Sparse<T>::test_all): New functions.

* CMatrix.cc (ComplexMatrix::too_large_for_float): Simplify with
test_any and xtoo_large_for_float.
* CNDArray.cc (ComplexNDArray::too_large_for_float): Likewise.
* CSparse.cc (SparseComplexMatrix::too_large_for_float): Likewise.
* dSparse.cc (SparseMatrix::too_large_for_float): Likewise.

* dMatrix.cc (Matrix::too_large_for_float): Use test_any, not test_all.
* dNDArray.cc (NDArray::too_large_for_float): Likewise.

* fCMatrix.cc (FloatComplexMatrix::too_large_for_float):
Unconditionlly return false.
* fCNDArray.cc (FloatComplexNDArray::too_large_for_float): Likewise.

diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -641,40 +641,17 @@ public:
   Array<U>
   map (U (&fcn) (const T&)) const
   { return map<U, U (&) (const T&)> (fcn); }
 
   // Generic any/all test functionality with arbitrary predicate.
   template <class F, bool zero>
   bool test (F fcn) const
   {
-    octave_idx_type len = length ();
-
-    const T *m = data ();
-
-    octave_idx_type i;
-    for (i = 0; i < len - 3; i += 4)
-      {
-        octave_quit ();
-
-        if (fcn (m[i]) != zero
-            || fcn (m[i+1]) != zero
-            || fcn (m[i+2]) != zero
-            || fcn (m[i+3]) != zero)
-           return ! zero;
-
-      }
-
-    octave_quit ();
-
-    for (; i < len; i++)
-       if (fcn (m[i]) != zero)
-          return ! zero;
-
-    return zero;
+    return any_all_test<F, T, zero> (fcn, data (), length ());
   }
 
   // Simpler calls.
   template <class F>
   bool test_any (F fcn) const
   { return test<F, false> (fcn); }
 
   template <class F>
diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -3157,35 +3157,17 @@ ComplexMatrix::all_integers (double& max
       }
 
   return true;
 }
 
 bool
 ComplexMatrix::too_large_for_float (void) const
 {
-  octave_idx_type nr = rows ();
-  octave_idx_type nc = cols ();
-
-  for (octave_idx_type j = 0; j < nc; j++)
-    for (octave_idx_type i = 0; i < nr; i++)
-      {
-        Complex val = elem (i, j);
-
-        double r_val = std::real (val);
-        double i_val = std::imag (val);
-
-        if ((! (xisnan (r_val) || xisinf (r_val))
-             && fabs (r_val) > FLT_MAX)
-            || (! (xisnan (i_val) || xisinf (i_val))
-                && fabs (i_val) > FLT_MAX))
-          return true;
-      }
-
-  return false;
+  return test_any (xtoo_large_for_float);
 }
 
 // FIXME Do these really belong here?  Maybe they should be
 // in a base class?
 
 boolMatrix
 ComplexMatrix::all (int dim) const
 {
diff --git a/liboctave/CNDArray.cc b/liboctave/CNDArray.cc
--- a/liboctave/CNDArray.cc
+++ b/liboctave/CNDArray.cc
@@ -579,33 +579,17 @@ ComplexNDArray::all_integers (double& ma
     }
 
   return true;
 }
 
 bool
 ComplexNDArray::too_large_for_float (void) const
 {
-  octave_idx_type nel = nelem ();
-
-  for (octave_idx_type i = 0; i < nel; i++)
-    {
-      Complex val = elem (i);
-
-      double r_val = std::real (val);
-      double i_val = std::imag (val);
-
-      if ((! (xisnan (r_val) || xisinf (r_val))
-           && fabs (r_val) > FLT_MAX)
-          || (! (xisnan (i_val) || xisinf (i_val))
-              && fabs (i_val) > FLT_MAX))
-        return true;
-    }
-
-  return false;
+  return test_any (xtoo_large_for_float);
 }
 
 boolNDArray
 ComplexNDArray::all (int dim) const
 {
   return do_mx_red_op<bool, Complex> (*this, dim, mx_inline_all);
 }
 
diff --git a/liboctave/CSparse.cc b/liboctave/CSparse.cc
--- a/liboctave/CSparse.cc
+++ b/liboctave/CSparse.cc
@@ -7294,33 +7294,17 @@ SparseComplexMatrix::all_integers (doubl
     }
 
   return true;
 }
 
 bool
 SparseComplexMatrix::too_large_for_float (void) const
 {
-  octave_idx_type nel = nnz ();
-
-  for (octave_idx_type i = 0; i < nel; i++)
-    {
-        Complex val = data (i);
-
-        double r_val = std::real (val);
-        double i_val = std::imag (val);
-
-        if (r_val > FLT_MAX
-            || i_val > FLT_MAX
-            || r_val < FLT_MIN
-            || i_val < FLT_MIN)
-          return true;
-    }
-
-  return false;
+  return test_any (xtoo_large_for_float);
 }
 
 // FIXME Do these really belong here?  Maybe they should be
 // in a base class?
 
 SparseBoolMatrix
 SparseComplexMatrix::all (int dim) const
 {
diff --git a/liboctave/Sparse.h b/liboctave/Sparse.h
--- a/liboctave/Sparse.h
+++ b/liboctave/Sparse.h
@@ -579,16 +579,45 @@ public:
   Sparse<T> diag (octave_idx_type k = 0) const;
 
   // dim = -1 and dim = -2 are special; see Array<T>::cat description.
   static Sparse<T>
   cat (int dim, octave_idx_type n, const Sparse<T> *sparse_list);
 
   Array<T> array_value (void) const;
 
+  // Generic any/all test functionality with arbitrary predicate.
+  template <class F, bool zero>
+  bool test (F fcn) const
+  {
+    return any_all_test<F, T, zero> (fcn, data (), nnz ());
+  }
+
+  // Simpler calls.
+  template <class F>
+  bool test_any (F fcn) const
+  { return test<F, false> (fcn); }
+
+  template <class F>
+  bool test_all (F fcn) const
+  { return test<F, true> (fcn); }
+
+  // Overloads for function references.
+  bool test_any (bool (&fcn) (T)) const
+  { return test<bool (&) (T), false> (fcn); }
+
+  bool test_any (bool (&fcn) (const T&)) const
+  { return test<bool (&) (const T&), false> (fcn); }
+
+  bool test_all (bool (&fcn) (T)) const
+  { return test<bool (&) (T), true> (fcn); }
+
+  bool test_all (bool (&fcn) (const T&)) const
+  { return test<bool (&) (const T&), true> (fcn); }
+
   template <class U, class F>
   Sparse<U>
   map (F fcn) const
   {
     Sparse<U> result;
     U f_zero = fcn (0.);
 
     if (f_zero != 0.)
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -2718,17 +2718,17 @@ Matrix::all_integers (double& max_val, d
     }
 
   return true;
 }
 
 bool
 Matrix::too_large_for_float (void) const
 {
-  return test_all (xtoo_large_for_float);
+  return test_any (xtoo_large_for_float);
 }
 
 // FIXME Do these really belong here?  Maybe they should be
 // in a base class?
 
 boolMatrix
 Matrix::all (int dim) const
 {
diff --git a/liboctave/dNDArray.cc b/liboctave/dNDArray.cc
--- a/liboctave/dNDArray.cc
+++ b/liboctave/dNDArray.cc
@@ -627,17 +627,17 @@ bool
 NDArray::all_integers (void) const
 {
   return test_all (xisinteger);
 }
 
 bool
 NDArray::too_large_for_float (void) const
 {
-  return test_all (xtoo_large_for_float);
+  return test_any (xtoo_large_for_float);
 }
 
 // FIXME -- this is not quite the right thing.
 
 boolNDArray
 NDArray::all (int dim) const
 {
   return do_mx_red_op<bool, double> (*this, dim, mx_inline_all);
diff --git a/liboctave/dSparse.cc b/liboctave/dSparse.cc
--- a/liboctave/dSparse.cc
+++ b/liboctave/dSparse.cc
@@ -7413,27 +7413,17 @@ SparseMatrix::all_integers (double& max_
     }
 
   return true;
 }
 
 bool
 SparseMatrix::too_large_for_float (void) const
 {
-  octave_idx_type nel = nnz ();
-
-  for (octave_idx_type i = 0; i < nel; i++)
-    {
-      double val = data (i);
-
-      if (val > FLT_MAX || val < FLT_MIN)
-        return true;
-    }
-
-  return false;
+  return test_any (xtoo_large_for_float);
 }
 
 SparseBoolMatrix
 SparseMatrix::operator ! (void) const
 {
   if (any_element_is_nan ())
     gripe_nan_to_logical_conversion ();
 
diff --git a/liboctave/fCMatrix.cc b/liboctave/fCMatrix.cc
--- a/liboctave/fCMatrix.cc
+++ b/liboctave/fCMatrix.cc
@@ -3153,34 +3153,16 @@ FloatComplexMatrix::all_integers (float&
       }
 
   return true;
 }
 
 bool
 FloatComplexMatrix::too_large_for_float (void) const
 {
-  octave_idx_type nr = rows ();
-  octave_idx_type nc = cols ();
-
-  for (octave_idx_type j = 0; j < nc; j++)
-    for (octave_idx_type i = 0; i < nr; i++)
-      {
-        FloatComplex val = elem (i, j);
-
-        float r_val = std::real (val);
-        float i_val = std::imag (val);
-
-        if ((! (xisnan (r_val) || xisinf (r_val))
-             && fabs (r_val) > FLT_MAX)
-            || (! (xisnan (i_val) || xisinf (i_val))
-                && fabs (i_val) > FLT_MAX))
-          return true;
-      }
-
   return false;
 }
 
 // FIXME Do these really belong here?  Maybe they should be
 // in a base class?
 
 boolMatrix
 FloatComplexMatrix::all (int dim) const
diff --git a/liboctave/fCNDArray.cc b/liboctave/fCNDArray.cc
--- a/liboctave/fCNDArray.cc
+++ b/liboctave/fCNDArray.cc
@@ -576,32 +576,16 @@ FloatComplexNDArray::all_integers (float
     }
 
   return true;
 }
 
 bool
 FloatComplexNDArray::too_large_for_float (void) const
 {
-  octave_idx_type nel = nelem ();
-
-  for (octave_idx_type i = 0; i < nel; i++)
-    {
-      FloatComplex val = elem (i);
-
-      float r_val = std::real (val);
-      float i_val = std::imag (val);
-
-      if ((! (xisnan (r_val) || xisinf (r_val))
-           && fabs (r_val) > FLT_MAX)
-          || (! (xisnan (i_val) || xisinf (i_val))
-              && fabs (i_val) > FLT_MAX))
-        return true;
-    }
-
   return false;
 }
 
 boolNDArray
 FloatComplexNDArray::all (int dim) const
 {
   return do_mx_red_op<bool, FloatComplex> (*this, dim, mx_inline_all);
 }
diff --git a/liboctave/lo-utils.cc b/liboctave/lo-utils.cc
--- a/liboctave/lo-utils.cc
+++ b/liboctave/lo-utils.cc
@@ -51,16 +51,22 @@ bool xis_one_or_zero (double x)
 { return x == 0 || x == 1; }
 
 bool xis_zero (double x)
 { return x == 0; }
 
 bool xtoo_large_for_float (double x)
 { return (! (xisnan (x) || xisinf (x)) && fabs (x) > FLT_MAX); }
 
+bool xtoo_large_for_float (const Complex& x)
+{
+  return (xtoo_large_for_float (x.real ())
+          || xtoo_large_for_float (x.imag ()));
+}
+
 bool xis_int_or_inf_or_nan (float x)
 { return xisnan (x) || D_NINT (x) == x; }
 
 bool xis_one_or_zero (float x)
 { return x == 0 || x == 1; }
 
 bool xis_zero (float x)
 { return x == 0; }
diff --git a/liboctave/lo-utils.h b/liboctave/lo-utils.h
--- a/liboctave/lo-utils.h
+++ b/liboctave/lo-utils.h
@@ -23,24 +23,56 @@ along with Octave; see the file COPYING.
 #if !defined (octave_liboctave_utils_h)
 #define octave_liboctave_utils_h 1
 
 #include <cstdio>
 
 #include <iostream>
 #include <string>
 
+#include "quit.h"
+
 #include "lo-cutils.h"
 #include "oct-cmplx.h"
 
+// Generic any/all test functionality with arbitrary predicate.
+
+template <class F, class T, bool zero>
+bool
+any_all_test (F fcn, const T *m, octave_idx_type len)
+{
+  octave_idx_type i;
+
+  for (i = 0; i < len - 3; i += 4)
+    {
+      octave_quit ();
+
+      if (fcn (m[i]) != zero
+          || fcn (m[i+1]) != zero
+          || fcn (m[i+2]) != zero
+          || fcn (m[i+3]) != zero)
+        return ! zero;
+    }
+
+  octave_quit ();
+
+  for (; i < len; i++)
+    if (fcn (m[i]) != zero)
+      return ! zero;
+
+  return zero;
+}
+
 extern OCTAVE_API bool xis_int_or_inf_or_nan (double x);
 extern OCTAVE_API bool xis_one_or_zero (double x);
 extern OCTAVE_API bool xis_zero (double x);
 extern OCTAVE_API bool xtoo_large_for_float (double x);
 
+extern OCTAVE_API bool xtoo_large_for_float (const Complex&  x);
+
 extern OCTAVE_API bool xis_int_or_inf_or_nan (float x);
 extern OCTAVE_API bool xis_one_or_zero (float x);
 extern OCTAVE_API bool xis_zero (float x);
 extern OCTAVE_API bool xtoo_large_for_float (float x);
 
 extern OCTAVE_API char *strsave (const char *);
 
 extern OCTAVE_API void
