# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1497620360 14400
#      Fri Jun 16 09:39:20 2017 -0400
# Node ID 7a97944f06e56357f2fe397688afec205c32db5f
# Parent  702db65be195b29b02e4f72e048e6e3f7ee13e30
delete functions deprecated prior to the 4.2 release

* variables.h, variables.cc (bind_internal_variable): Delete.

* ov.h, ov.cc
(octave_value::octave_value (const Array<char>&, char)): Delete.
(octave_value::octave_value (const charMatrix&, bool, char)): Delete.
(octave_value::octave_value (const charNDArray&, bool, char)): Delete.
(octave_value::octave_value (octave_base_value *, int)): Delete.

* DiagArray2.h, DiagArray2.cc
(DiagArray2<T>::diag (octave_idx_type) const): Delete.

* PermMatrix.h, PermMatrix.cc
(PermMatrix::PermMatrix (const Array<octave_idx_type>&)): Delete.
(PermMatrix::PermMatrix (const idx_vector&)): Delete.

* dSparse.h, dSparse.cc
(atan2 (const double&, const SparseMatrix&)): Delete.
(atan2 (const SparseMatrix&, const double&)): Delete.
(atan2 (const SparseMatrix&, const SparseMatrix&)): Delete.

* lo-mappers.h (octave_is_NaN_or_NA (const Complex&)): Delete.
(octave_is_NaN_or_NA (const FloatComplex&)): Delete.

* unwind-prot.h
(unwind_protect::add (void (*) (void *), void *)): Delete.
(unwind_protect::run_top (void)): Delete.
(unwind_protect::run_top (int)): Delete.
(unwind_protect::discard_top (void)): Delete.
(unwind_protect::discard_top (int)): Delete.

diff --git a/libinterp/corefcn/variables.cc b/libinterp/corefcn/variables.cc
--- a/libinterp/corefcn/variables.cc
+++ b/libinterp/corefcn/variables.cc
@@ -2012,26 +2012,16 @@ bind_ans (const octave_value& val, bool 
               args.stash_name_tags (string_vector (ans));
               octave::feval ("display", args);
             }
         }
     }
 }
 
 void
-bind_internal_variable (const std::string& fname, const octave_value& val)
-{
-  octave_value_list args;
-
-  args(0) = val;
-
-  octave::feval (fname, args, 0);
-}
-
-void
 mlock (void)
 {
   octave::call_stack& cs = octave::__get_call_stack__ ("mlock");
 
   octave_function *fcn = cs.current ();
 
   if (! fcn)
     error ("mlock: invalid use outside a function");
diff --git a/libinterp/corefcn/variables.h b/libinterp/corefcn/variables.h
--- a/libinterp/corefcn/variables.h
+++ b/libinterp/corefcn/variables.h
@@ -137,20 +137,16 @@ set_internal_variable (int& var, const o
 
 extern OCTINTERP_API std::string builtin_string_variable (const std::string&);
 extern OCTINTERP_API int builtin_real_scalar_variable (const std::string&,
                                                        double&);
 extern OCTINTERP_API octave_value builtin_any_variable (const std::string&);
 
 extern OCTINTERP_API void bind_ans (const octave_value& val, bool print);
 
-OCTAVE_DEPRECATED ("note: internal variables have been replaced by functions; use 'feval' instead")
-OCTINTERP_API extern void
-bind_internal_variable (const std::string& fname, const octave_value& val);
-
 extern OCTINTERP_API void mlock (void);
 extern OCTINTERP_API void munlock (const std::string&);
 extern OCTINTERP_API bool mislocked (const std::string&);
 
 extern OCTINTERP_API void clear_function (const std::string& nm);
 extern OCTINTERP_API void clear_variable (const std::string& nm);
 extern OCTINTERP_API void clear_symbol (const std::string& nm);
 
diff --git a/libinterp/octave-value/ov.cc b/libinterp/octave-value/ov.cc
--- a/libinterp/octave-value/ov.cc
+++ b/libinterp/octave-value/ov.cc
@@ -809,40 +809,16 @@ octave_value::octave_value (const charND
 octave_value::octave_value (const Array<char>& chm, char type)
   : rep (type == '"'
          ? new octave_char_matrix_dq_str (chm)
          : new octave_char_matrix_sq_str (chm))
 {
   maybe_mutate ();
 }
 
-octave_value::octave_value (const charMatrix& chm, bool, char type)
-  : rep (type == '"'
-         ? new octave_char_matrix_dq_str (chm)
-         : new octave_char_matrix_sq_str (chm))
-{
-  maybe_mutate ();
-}
-
-octave_value::octave_value (const charNDArray& chm, bool, char type)
-  : rep (type == '"'
-         ? new octave_char_matrix_dq_str (chm)
-         : new octave_char_matrix_sq_str (chm))
-{
-  maybe_mutate ();
-}
-
-octave_value::octave_value (const Array<char>& chm, bool, char type)
-  : rep (type == '"'
-         ? new octave_char_matrix_dq_str (chm)
-         : new octave_char_matrix_sq_str (chm))
-{
-  maybe_mutate ();
-}
-
 octave_value::octave_value (const SparseMatrix& m, const MatrixType& t)
   : rep (new octave_sparse_matrix (m, t))
 {
   maybe_mutate ();
 }
 
 octave_value::octave_value (const Sparse<double>& m, const MatrixType& t)
   : rep (new octave_sparse_matrix (m, t))
@@ -1139,22 +1115,16 @@ octave_value::octave_value (octave_value
 
 octave_value::octave_value (octave_base_value *new_rep, bool borrow)
   : rep (new_rep)
 {
   if (borrow)
     rep->count++;
 }
 
-octave_value::octave_value (octave_base_value *new_rep, int xcount)
-  : rep (new_rep)
-{
-  rep->count = xcount;
-}
-
 octave_base_value *
 octave_value::clone (void) const
 {
   return rep->clone ();
 }
 
 void
 octave_value::maybe_mutate (void)
diff --git a/libinterp/octave-value/ov.h b/libinterp/octave-value/ov.h
--- a/libinterp/octave-value/ov.h
+++ b/libinterp/octave-value/ov.h
@@ -234,25 +234,16 @@ public:
   octave_value (char c, char type = '\'');
   octave_value (const char *s, char type = '\'');
   octave_value (const std::string& s, char type = '\'');
   octave_value (const string_vector& s, char type = '\'');
   octave_value (const charMatrix& chm,  char type = '\'');
   octave_value (const charNDArray& chnda, char type = '\'');
   octave_value (const Array<char>& chnda, char type = '\'');
 
-  OCTAVE_DEPRECATED ("note: IS_STRING argument is ignored")
-  octave_value (const charMatrix& chm, bool is_string, char type = '\'');
-
-  OCTAVE_DEPRECATED ("note: IS_STRING argument is ignored")
-  octave_value (const charNDArray& chnda, bool is_string, char type = '\'');
-
-  OCTAVE_DEPRECATED ("note: IS_STRING argument is ignored")
-  octave_value (const Array<char>& chnda, bool is_string, char type = '\'');
-
   octave_value (const SparseMatrix& m, const MatrixType& t = MatrixType ());
   octave_value (const Sparse<double>& m, const MatrixType& t = MatrixType ());
   octave_value (const SparseComplexMatrix& m,
                 const MatrixType& t = MatrixType ());
   octave_value (const Sparse<Complex>& m, const MatrixType& t = MatrixType ());
   octave_value (const SparseBoolMatrix& bm,
                 const MatrixType& t = MatrixType ());
   octave_value (const Sparse<bool>& m, const MatrixType& t = MatrixType ());
@@ -297,19 +288,16 @@ public:
   octave_value (const octave_value_list& m, bool);
 
   octave_value (const octave_value_list& m);
 
   octave_value (octave_value::magic_colon);
 
   octave_value (octave_base_value *new_rep, bool borrow = false);
 
-  OCTAVE_DEPRECATED ("note: in the future there will be no way to directly set reference count")
-  octave_value (octave_base_value *new_rep, int xcount);
-
   // Copy constructor.
 
   octave_value (const octave_value& a)
   {
     rep = a.rep;
     rep->count++;
   }
 
diff --git a/liboctave/array/DiagArray2.cc b/liboctave/array/DiagArray2.cc
--- a/liboctave/array/DiagArray2.cc
+++ b/liboctave/array/DiagArray2.cc
@@ -42,23 +42,16 @@ DiagArray2<T>::DiagArray2 (const Array<T
 {
   octave_idx_type rcmin = std::min (r, c);
   if (rcmin != a.numel ())
     Array<T>::resize (dim_vector (rcmin, 1));
 }
 
 template <typename T>
 Array<T>
-DiagArray2<T>::diag (octave_idx_type k) const
-{
-  return extract_diag (k);
-}
-
-template <typename T>
-Array<T>
 DiagArray2<T>::extract_diag (octave_idx_type k) const
 {
   Array<T> d;
 
   if (k == 0)
     // The main diagonal is shallow-copied.
     d = *this;
   else if (k > 0 && k < cols ())
diff --git a/liboctave/array/DiagArray2.h b/liboctave/array/DiagArray2.h
--- a/liboctave/array/DiagArray2.h
+++ b/liboctave/array/DiagArray2.h
@@ -93,20 +93,18 @@ public:
   octave_idx_type length (void) const { return Array<T>::numel (); }
   octave_idx_type nelem (void) const { return dim1 () * dim2 (); }
   octave_idx_type numel (void) const { return nelem (); }
 
   size_t byte_size (void) const { return Array<T>::byte_size (); }
 
   dim_vector dims (void) const { return dim_vector (d1, d2); }
 
-  OCTAVE_DEPRECATED ("use 'extract_diag' instead")
-  Array<T> diag (octave_idx_type k = 0) const;
+  Array<T> extract_diag (octave_idx_type k = 0) const;
 
-  Array<T> extract_diag (octave_idx_type k = 0) const;
   DiagArray2<T> build_diag_matrix () const
   {
     return DiagArray2<T> (array_value ());
   }
 
   // Warning: the non-const two-index versions will silently ignore assignments
   // to off-diagonal elements.
 
diff --git a/liboctave/array/PermMatrix.cc b/liboctave/array/PermMatrix.cc
--- a/liboctave/array/PermMatrix.cc
+++ b/liboctave/array/PermMatrix.cc
@@ -44,22 +44,16 @@ PermMatrix::setup (const Array<octave_id
       if (! idx_vector (p).is_permutation (p.numel ()))
         err_invalid_permutation ();
     }
 
   if (! colp)
     *this = this->transpose ();
 }
 
-PermMatrix::PermMatrix (const Array<octave_idx_type>& p)
-  : Array<octave_idx_type> (p)
-{
-  setup (p, false, true);
-}
-
 PermMatrix::PermMatrix (const Array<octave_idx_type>& p, bool colp, bool check)
   : Array<octave_idx_type> (p)
 {
   setup (p, colp, check);
 }
 
 void
 PermMatrix::setup (const idx_vector& idx, bool colp, octave_idx_type n)
@@ -72,22 +66,16 @@ PermMatrix::setup (const idx_vector& idx
   Array<octave_idx_type> idxa (dim_vector (len, 1));
   for (octave_idx_type i = 0; i < len; i++) idxa(i) = idx(i);
   Array<octave_idx_type>::operator = (idxa);
 
   if (! colp)
     *this = this->transpose ();
 }
 
-PermMatrix::PermMatrix (const idx_vector& idx)
-  : Array<octave_idx_type> ()
-{
-  setup (idx, false, 0);
-}
-
 PermMatrix::PermMatrix (const idx_vector& idx, bool colp, octave_idx_type n)
   : Array<octave_idx_type> ()
 {
   setup (idx, colp, n);
 }
 
 PermMatrix::PermMatrix (octave_idx_type n)
   : Array<octave_idx_type> (dim_vector (n, 1))
diff --git a/liboctave/array/PermMatrix.h b/liboctave/array/PermMatrix.h
--- a/liboctave/array/PermMatrix.h
+++ b/liboctave/array/PermMatrix.h
@@ -34,26 +34,20 @@ along with Octave; see the file COPYING.
 class OCTAVE_API PermMatrix : protected Array<octave_idx_type>
 {
 public:
 
   PermMatrix (void) : Array<octave_idx_type> () { }
 
   PermMatrix (octave_idx_type n);
 
-  OCTAVE_DEPRECATED ("use 'PermMatrix (p, false, true)' instead")
-  PermMatrix (const Array<octave_idx_type>& p);
-
   PermMatrix (const Array<octave_idx_type>& p, bool colp, bool check = true);
 
   PermMatrix (const PermMatrix& m) : Array<octave_idx_type> (m) { }
 
-  OCTAVE_DEPRECATED ("use 'PermVector (idx, false, 0)' instead")
-  PermMatrix (const idx_vector& idx);
-
   PermMatrix (const idx_vector& idx, bool colp, octave_idx_type n = 0);
 
   octave_idx_type dim1 (void) const
   { return Array<octave_idx_type>::numel (); }
   octave_idx_type dim2 (void) const
   { return Array<octave_idx_type>::numel (); }
 
   octave_idx_type rows (void) const { return dim1 (); }
diff --git a/liboctave/array/dSparse.cc b/liboctave/array/dSparse.cc
--- a/liboctave/array/dSparse.cc
+++ b/liboctave/array/dSparse.cc
@@ -594,151 +594,16 @@ imag (const SparseComplexMatrix& a)
 /*
 
 %!assert (nnz (real (sparse ([1i,1]))), 1)
 %!assert (nnz (real (sparse ([1i,1]))), 1)
 
 */
 
 SparseMatrix
-atan2 (const double& x, const SparseMatrix& y)
-{
-  octave_idx_type nr = y.rows ();
-  octave_idx_type nc = y.cols ();
-
-  if (x == 0.)
-    return SparseMatrix (nr, nc);
-  else
-    {
-      // Its going to be basically full, so this is probably the
-      // best way to handle it.
-      Matrix tmp (nr, nc, atan2 (x, 0.));
-
-      for (octave_idx_type j = 0; j < nc; j++)
-        for (octave_idx_type i = y.cidx (j); i < y.cidx (j+1); i++)
-          tmp.elem (y.ridx (i), j) = atan2 (x, y.data (i));
-
-      return SparseMatrix (tmp);
-    }
-}
-
-SparseMatrix
-atan2 (const SparseMatrix& x, const double& y)
-{
-  octave_idx_type nr = x.rows ();
-  octave_idx_type nc = x.cols ();
-  octave_idx_type nz = x.nnz ();
-
-  SparseMatrix retval (nr, nc, nz);
-
-  octave_idx_type ii = 0;
-  retval.xcidx (0) = 0;
-  for (octave_idx_type i = 0; i < nc; i++)
-    {
-      for (octave_idx_type j = x.cidx (i); j < x.cidx (i+1); j++)
-        {
-          double tmp = atan2 (x.data (j), y);
-          if (tmp != 0.)
-            {
-              retval.xdata (ii) = tmp;
-              retval.xridx (ii++) = x.ridx (j);
-            }
-        }
-      retval.xcidx (i+1) = ii;
-    }
-
-  if (ii != nz)
-    {
-      SparseMatrix retval2 (nr, nc, ii);
-      for (octave_idx_type i = 0; i < nc+1; i++)
-        retval2.xcidx (i) = retval.cidx (i);
-      for (octave_idx_type i = 0; i < ii; i++)
-        {
-          retval2.xdata (i) = retval.data (i);
-          retval2.xridx (i) = retval.ridx (i);
-        }
-      return retval2;
-    }
-  else
-    return retval;
-}
-
-SparseMatrix
-atan2 (const SparseMatrix& x, const SparseMatrix& y)
-{
-  if ((x.rows () != y.rows ()) || (x.cols () != y.cols ()))
-    (*current_liboctave_error_handler) ("matrix size mismatch");
-
-  octave_idx_type x_nr = x.rows ();
-  octave_idx_type x_nc = x.cols ();
-
-  octave_idx_type y_nr = y.rows ();
-  octave_idx_type y_nc = y.cols ();
-
-  if (x_nr != y_nr || x_nc != y_nc)
-    octave::err_nonconformant ("atan2", x_nr, x_nc, y_nr, y_nc);
-
-  SparseMatrix r;
-
-  r = SparseMatrix (x_nr, x_nc, (x.nnz () + y.nnz ()));
-
-  octave_idx_type jx = 0;
-  r.cidx (0) = 0;
-  for (octave_idx_type i = 0 ; i < x_nc ; i++)
-    {
-      octave_idx_type ja = x.cidx (i);
-      octave_idx_type ja_max = x.cidx (i+1);
-      bool ja_lt_max = ja < ja_max;
-
-      octave_idx_type jb = y.cidx (i);
-      octave_idx_type jb_max = y.cidx (i+1);
-      bool jb_lt_max = jb < jb_max;
-
-      while (ja_lt_max || jb_lt_max)
-        {
-          octave_quit ();
-          if ((! jb_lt_max)
-              || (ja_lt_max && (x.ridx (ja) < y.ridx (jb))))
-            {
-              r.ridx (jx) = x.ridx (ja);
-              r.data (jx) = atan2 (x.data (ja), 0.);
-              jx++;
-              ja++;
-              ja_lt_max= ja < ja_max;
-            }
-          else if ((! ja_lt_max)
-                   || (jb_lt_max && (y.ridx (jb) < x.ridx (ja))))
-            {
-              jb++;
-              jb_lt_max= jb < jb_max;
-            }
-          else
-            {
-              double tmp = atan2 (x.data (ja), y.data (jb));
-              if (tmp != 0.)
-                {
-                  r.data (jx) = tmp;
-                  r.ridx (jx) = x.ridx (ja);
-                  jx++;
-                }
-              ja++;
-              ja_lt_max= ja < ja_max;
-              jb++;
-              jb_lt_max= jb < jb_max;
-            }
-        }
-      r.cidx (i+1) = jx;
-    }
-
-  r.maybe_compress ();
-
-  return r;
-}
-
-SparseMatrix
 SparseMatrix::inverse (void) const
 {
   octave_idx_type info;
   double rcond;
   MatrixType mattype (*this);
   return inverse (mattype, info, rcond, 0, 0);
 }
 
diff --git a/liboctave/array/dSparse.h b/liboctave/array/dSparse.h
--- a/liboctave/array/dSparse.h
+++ b/liboctave/array/dSparse.h
@@ -122,28 +122,16 @@ public:
   SparseMatrix concat (const SparseMatrix& rb,
                        const Array<octave_idx_type>& ra_idx);
   SparseComplexMatrix concat (const SparseComplexMatrix& rb,
                               const Array<octave_idx_type>& ra_idx);
 
   friend OCTAVE_API SparseMatrix real (const SparseComplexMatrix& a);
   friend OCTAVE_API SparseMatrix imag (const SparseComplexMatrix& a);
 
-  OCTAVE_DEPRECATED ("use 'Fatan2' instead")
-  OCTAVE_API friend
-  SparseMatrix atan2 (const double& x, const SparseMatrix& y);
-
-  OCTAVE_DEPRECATED ("use 'Fatan2' instead")
-  OCTAVE_API friend
-  SparseMatrix atan2 (const SparseMatrix& x, const double& y);
-
-  OCTAVE_DEPRECATED ("use 'Fatan2' instead")
-  OCTAVE_API friend
-  SparseMatrix atan2 (const SparseMatrix& x, const SparseMatrix& y);
-
   SparseMatrix transpose (void) const
   {
     return MSparse<double>::transpose ();
   }
   SparseMatrix hermitian (void) const { return transpose (); }
 
   // extract row or column i.
 
diff --git a/liboctave/numeric/lo-mappers.h b/liboctave/numeric/lo-mappers.h
--- a/liboctave/numeric/lo-mappers.h
+++ b/liboctave/numeric/lo-mappers.h
@@ -519,27 +519,16 @@ inline bool octave_is_NA (float x) { ret
 OCTAVE_DEPRECATED ("use 'octave::math::is_NA' instead")
 inline bool octave_is_NA (const Complex& x) { return octave::math::is_NA (x); }
 OCTAVE_DEPRECATED ("use 'octave::math::is_NA' instead")
 inline bool octave_is_NA (const FloatComplex& x)
 {
   return octave::math::is_NA (x);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::math::is_NaN_or_NA' instead")
-inline bool octave_is_NaN_or_NA (const Complex& x)
-{
-  return octave::math::is_NaN_or_NA (x);
-}
-OCTAVE_DEPRECATED ("use 'octave::math::is_NaN_or_NA' instead")
-inline bool octave_is_NaN_or_NA (const FloatComplex& x)
-{
-  return octave::math::is_NaN_or_NA (x);
-}
-
 OCTAVE_DEPRECATED ("use 'octave::math::acos' instead")
 inline Complex acos (const Complex& x) { return octave::math::acos (x); }
 OCTAVE_DEPRECATED ("use 'octave::math::acos' instead")
 inline FloatComplex acos (const FloatComplex& x)
 {
   return octave::math::acos (x);
 }
 
diff --git a/liboctave/util/unwind-prot.h b/liboctave/util/unwind-prot.h
--- a/liboctave/util/unwind-prot.h
+++ b/liboctave/util/unwind-prot.h
@@ -55,57 +55,39 @@ namespace octave
 
     ~unwind_protect (void) { run (); }
 
     virtual void add (elem *new_elem)
     {
       lifo.push (new_elem);
     }
 
-    OCTAVE_DEPRECATED ("use 'add (new fcn_arg_elem<void *> (fcn, ptr))' instead")
-    void add (void (*fcn) (void *), void *ptr = nullptr)
-    {
-      add (new fcn_arg_elem<void *> (fcn, ptr));
-    }
-
     operator bool (void) const { return ! empty (); }
 
-    OCTAVE_DEPRECATED ("use 'run_first' instead")
-    void run_top (void) { run_first (); }
-
     void run_first (void)
     {
       if (! empty ())
         {
           // No leak on exception!
           std::unique_ptr<elem> ptr (lifo.top ());
           lifo.pop ();
           ptr->run ();
         }
     }
 
-    OCTAVE_DEPRECATED ("use 'run' instead")
-    void run_top (int num) { run (num); }
-
-    OCTAVE_DEPRECATED ("use 'discard_first' instead")
-    void discard_top (void) { discard_first (); }
-
     void discard_first (void)
     {
       if (! empty ())
         {
           elem *ptr = lifo.top ();
           lifo.pop ();
           delete ptr;
         }
     }
 
-    OCTAVE_DEPRECATED ("use 'discard' instead")
-    void discard_top (int num) { discard (num); }
-
     size_t size (void) const { return lifo.size (); }
 
   protected:
 
     std::stack<elem *> lifo;
   };
 
   // Like unwind_protect, but this one will guard against the possibility
