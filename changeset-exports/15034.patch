# HG changeset patch
# User Rik <rik@octave.org>
# Date 1343405509 25200
#      Fri Jul 27 09:11:49 2012 -0700
# Node ID 1116864ee270defec328c89dba4f87cc3c566ccf
# Parent  208db887393213fbae79b36cfe319a6d5da8b585
doc: Fix for bad cross-referencing due to use of aliases in Texinfo.

* data.cc (FInf): Use NaN form instead of nan for consistency in documentation
and with cross-references.
* data.cc (FNaN): Use Inf form instead of inf for consistency in documentation
and with cross-references.
* data.cc (Fnzmax): Re-order Seealso links to find related functions faster.
* data.cc (Fmpower): Mention mtimes rather than times in Seealso links.

* arith.txi: Add comment about why doc-anchors are needed.  Remove anchors
to lowercase nan and inf.

diff --git a/doc/interpreter/arith.txi b/doc/interpreter/arith.txi
--- a/doc/interpreter/arith.txi
+++ b/doc/interpreter/arith.txi
@@ -304,24 +304,23 @@ cos (pi/2)
 
 @node Mathematical Constants
 @section Mathematical Constants
 
 @DOCSTRING(e)
 
 @DOCSTRING(pi)
 
+@c Provide a Seealso link location for these objects in the documentation
 @anchor{doc-i}
 @anchor{doc-j}
 @anchor{doc-J}
 @DOCSTRING(I)
 
-@anchor{doc-inf}
 @DOCSTRING(Inf)
 
-@anchor{doc-nan}
 @DOCSTRING(NaN)
 
 @DOCSTRING(eps)
 
 @DOCSTRING(realmax)
 
 @DOCSTRING(realmin)
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -2602,17 +2602,17 @@ Return the number of non zero elements i
 DEFUN (nzmax, args, ,
    "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{scalar} =} nzmax (@var{SM})\n\
 Return the amount of storage allocated to the sparse matrix @var{SM}.\n\
 Note that Octave tends to crop unused memory at the first opportunity\n\
 for sparse objects.  There are some cases of user created sparse objects\n\
 where the value returned by @dfn{nzmax} will not be the same as @dfn{nnz},\n\
 but in general they will give the same result.\n\
-@seealso{sparse, spalloc, nnz}\n\
+@seealso{nnz, spalloc, sparse}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 1)
     retval = args(0).nzmax ();
   else
     print_usage ();
@@ -3945,17 +3945,17 @@ produce infinity are division by zero an
 \n\
 When called with no arguments, return a scalar with the value @samp{Inf}.\n\
 When called with a single argument, return a square matrix with the dimension\n\
 specified.  When called with more than one scalar argument the first two\n\
 arguments are taken as the number of rows and columns and any further\n\
 arguments specify additional matrix dimensions.\n\
 The optional argument @var{class} specifies the return type and may be\n\
 either \"double\" or \"single\".\n\
-@seealso{isinf, nan}\n\
+@seealso{isinf, NaN}\n\
 @end deftypefn")
 {
   return fill_matrix (args, lo_ieee_inf_value (),
                       lo_ieee_float_inf_value (), "Inf");
 }
 
 DEFALIAS (inf, Inf);
 
@@ -4004,17 +4004,17 @@ find NaN values, use the @code{isnan} fu
 \n\
 When called with no arguments, return a scalar with the value @samp{NaN}.\n\
 When called with a single argument, return a square matrix with the dimension\n\
 specified.  When called with more than one scalar argument the first two\n\
 arguments are taken as the number of rows and columns and any further\n\
 arguments specify additional matrix dimensions.\n\
 The optional argument @var{class} specifies the return type and may be\n\
 either \"double\" or \"single\".\n\
-@seealso{isnan, inf}\n\
+@seealso{isnan, Inf}\n\
 @end deftypefn")
 {
   return fill_matrix (args, lo_ieee_nan_value (),
                       lo_ieee_float_nan_value (), "NaN");
 }
 
 DEFALIAS (nan, NaN);
 
@@ -4309,27 +4309,27 @@ Return a scalar, matrix, or N-dimensiona
 to the pure imaginary unit, defined as\n\
 @tex\n\
 $\\sqrt{-1}$.\n\
 @end tex\n\
 @ifnottex\n\
 @code{sqrt (-1)}.\n\
 @end ifnottex\n\
 \n\
-I, and its equivalents i, J, and j, are functions so any of the names may\n\
+I, and its equivalents i, j, and J, are functions so any of the names may\n\
 be reused for other purposes (such as i for a counter variable).\n\
 \n\
 When called with no arguments, return a scalar with the value @math{i}.  When\n\
 called with a single argument, return a square matrix with the dimension\n\
 specified.  When called with more than one scalar argument the first two\n\
 arguments are taken as the number of rows and columns and any further\n\
 arguments specify additional matrix dimensions.\n\
 The optional argument @var{class} specifies the return type and may be\n\
 either \"double\" or \"single\".\n\
-@seealso{log, exp, e, pi, i, j}\n\
+@seealso{e, pi, log, exp, i, j, J}\n\
 @end deftypefn")
 {
   return fill_matrix (args, Complex (0.0, 1.0), "I");
 }
 
 DEFALIAS (i, I);
 DEFALIAS (J, I);
 DEFALIAS (j, I);
@@ -5474,17 +5474,17 @@ This function and @w{@xcode{x / y}} are 
   return binary_op_defun_body (octave_value::op_div, args);
 }
 
 DEFUN (mpower, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} mpower (@var{x}, @var{y})\n\
 Return the matrix power operation of @var{x} raised to the @var{y} power.\n\
 This function and @w{@xcode{x ^ y}} are equivalent.\n\
-@seealso{power, times, plus, minus}\n\
+@seealso{power, mtimes, plus, minus}\n\
 @end deftypefn")
 {
   return binary_op_defun_body (octave_value::op_pow, args);
 }
 
 DEFUN (mldivide, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} mldivide (@var{x}, @var{y})\n\
