# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1327255347 28800
#      Sun Jan 22 10:02:27 2012 -0800
# Node ID c4fa5e0b6193da21e1e5b858e67024dd66d88fda
# Parent  8b220af26cfb3a8b87fad69552a3c0a1ac903942
test: Make surface demos reproducible by setting colormap to default at start of demo.

* bicubic.m, interp2.m, interpn.m, griddata.m, image.m, axis.m, clabel.m,
colorbar.m, contour.m, contourf.m, cylinder.m, ezcontour.m, ezcontourf.m,
ezmesh.m, ezmeshc.m, ezsurf.m, ezsurfc.m, hold.m, pcolor.m, plotyy.m,
quiver3.m, ribbon.m, shading.m, slice.m, sombrero.m, surf.m, surfc.m,
surfnorm.m, trisurf.m: Set colormap to default at start of demos to
make them reproducible.

diff --git a/scripts/general/bicubic.m b/scripts/general/bicubic.m
--- a/scripts/general/bicubic.m
+++ b/scripts/general/bicubic.m
@@ -196,16 +196,17 @@ function zi = bicubic (x, y, z, xi, yi, 
     zi([yfirst_ind; ylast_ind], :) = extrapval;
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
+%! colormap ("default");
 %! A = [13,-1,12;5,4,3;1,6,2];
 %! x = [0,1,4]+10;
 %! y = [-10,-9,-8];
 %! xi = linspace (min (x), max (x), 17);
 %! yi = linspace (min (y), max (y), 26)';
 %! mesh (xi, yi, bicubic (x,y,A,xi,yi));
 %! [x,y] = meshgrid (x,y);
 %! hold on; plot3 (x(:),y(:),A(:),"b*"); hold off;
diff --git a/scripts/general/interp2.m b/scripts/general/interp2.m
--- a/scripts/general/interp2.m
+++ b/scripts/general/interp2.m
@@ -441,97 +441,117 @@ function ind = sym_sub2ind(sz, Y, X)
     X (X > 2 * sz (2)) = round (X (X > 2 * sz (2)) / 2);
   endwhile
   X (X > sz (2)) = 1 + 2 * sz (2) - X (X > sz (2));
   ind = sub2ind(sz, Y, X);
 endfunction
 
 
 %!demo
+%! clf;
+%! colormap ("default");
 %! A = [13,-1,12;5,4,3;1,6,2];
 %! x = [0,1,4]; y = [10,11,12];
 %! xi = linspace (min(x), max(x), 17);
 %! yi = linspace (min(y), max(y), 26)';
 %! mesh (xi,yi,interp2 (x,y,A,xi,yi, "linear"));
 %! [x,y] = meshgrid (x,y);
 %! hold on; plot3 (x(:),y(:),A(:),"b*"); hold off;
 
 %!demo
+%! clf;
+%! colormap ("default");
 %! [x,y,A] = peaks (10);
 %! x = x(1,:)'; y = y(:,1);
 %! xi = linspace (min(x), max(x), 41);
 %! yi = linspace (min(y), max(y), 41)';
 %! mesh (xi,yi,interp2 (x,y,A,xi,yi, "linear"));
 %! [x,y] = meshgrid (x,y);
 %! hold on; plot3 (x(:),y(:),A(:),"b*"); hold off;
 
 %!demo
+%! clf;
+%! colormap ("default");
 %! A = [13,-1,12;5,4,3;1,6,2];
 %! x = [0,1,4]; y = [10,11,12];
 %! xi = linspace (min(x), max(x), 17);
 %! yi = linspace (min(y), max(y), 26)';
 %! mesh (xi,yi,interp2 (x,y,A,xi,yi, "nearest"));
 %! [x,y] = meshgrid (x,y);
 %! hold on; plot3 (x(:),y(:),A(:),"b*"); hold off;
 
 %!demo
+%! clf;
+%! colormap ("default");
 %! [x,y,A] = peaks (10);
 %! x = x(1,:)'; y = y(:,1);
 %! xi = linspace (min(x), max(x), 41);
 %! yi = linspace (min(y), max(y), 41)';
 %! mesh (xi,yi,interp2 (x,y,A,xi,yi, "nearest"));
 %! [x,y] = meshgrid (x,y);
 %! hold on; plot3 (x(:),y(:),A(:),"b*"); hold off;
 
 %!demo
+%! clf;
+%! colormap ("default");
 %! A = [13,-1,12;5,4,3;1,6,2];
 %! x = [0,1,2]; y = [10,11,12];
 %! xi = linspace (min(x), max(x), 17);
 %! yi = linspace (min(y), max(y), 26)';
 %! mesh (xi,yi,interp2 (x,y,A,xi,yi, "pchip"));
 %! [x,y] = meshgrid (x,y);
 %! hold on; plot3 (x(:),y(:),A(:),"b*"); hold off;
 
 %!demo
+%! clf;
+%! colormap ("default");
 %! [x,y,A] = peaks (10);
 %! x = x(1,:)'; y = y(:,1);
 %! xi = linspace (min(x), max(x), 41);
 %! yi = linspace (min(y), max(y), 41)';
 %! mesh (xi,yi,interp2 (x,y,A,xi,yi, "pchip"));
 %! [x,y] = meshgrid (x,y);
 %! hold on; plot3 (x(:),y(:),A(:),"b*"); hold off;
 
 %!demo
+%! clf;
+%! colormap ("default");
 %! A = [13,-1,12;5,4,3;1,6,2];
 %! x = [0,1,2]; y = [10,11,12];
 %! xi = linspace (min(x), max(x), 17);
 %! yi = linspace (min(y), max(y), 26)';
 %! mesh (xi,yi,interp2 (x,y,A,xi,yi, "cubic"));
 %! [x,y] = meshgrid (x,y);
 %! hold on; plot3 (x(:),y(:),A(:),"b*"); hold off;
 
 %!demo
+%! clf;
+%! colormap ("default");
 %! [x,y,A] = peaks (10);
 %! x = x(1,:)'; y = y(:,1);
 %! xi = linspace (min(x), max(x), 41);
 %! yi = linspace (min(y), max(y), 41)';
 %! mesh (xi,yi,interp2 (x,y,A,xi,yi, "cubic"));
 %! [x,y] = meshgrid (x,y);
 %! hold on; plot3 (x(:),y(:),A(:),"b*"); hold off;
 
 %!demo
+%! clf;
+%! colormap ("default");
 %! A = [13,-1,12;5,4,3;1,6,2];
 %! x = [0,1,2]; y = [10,11,12];
 %! xi = linspace (min(x), max(x), 17);
 %! yi = linspace (min(y), max(y), 26)';
 %! mesh (xi,yi,interp2 (x,y,A,xi,yi, "spline"));
 %! [x,y] = meshgrid (x,y);
 %! hold on; plot3 (x(:),y(:),A(:),"b*"); hold off;
 
 %!demo
+%! clf;
+%! colormap ("default");
 %! [x,y,A] = peaks (10);
 %! x = x(1,:)'; y = y(:,1);
 %! xi = linspace (min(x), max(x), 41);
 %! yi = linspace (min(y), max(y), 41)';
 %! mesh (xi,yi,interp2 (x,y,A,xi,yi, "spline"));
 %! [x,y] = meshgrid (x,y);
 %! hold on; plot3 (x(:),y(:),A(:),"b*"); hold off;
 
diff --git a/scripts/general/interpn.m b/scripts/general/interpn.m
--- a/scripts/general/interpn.m
+++ b/scripts/general/interpn.m
@@ -207,56 +207,61 @@ function vi = interpn (varargin)
     error ("interpn: unrecognized interpolation METHOD");
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
+%! colormap ("default");
 %! A = [13,-1,12;5,4,3;1,6,2];
 %! x = [0,1,4]; y = [10,11,12];
 %! xi = linspace (min(x), max(x), 17);
 %! yi = linspace (min(y), max(y), 26)';
 %! mesh (xi, yi, interpn (x,y,A.',xi,yi, "linear").');
 %! [x,y] = meshgrid (x,y);
 %! hold on; plot3 (x(:),y(:),A(:),"b*"); hold off;
 
 %!demo
 %! clf;
+%! colormap ("default");
 %! A = [13,-1,12;5,4,3;1,6,2];
 %! x = [0,1,4]; y = [10,11,12];
 %! xi = linspace (min(x), max(x), 17);
 %! yi = linspace (min(y), max(y), 26)';
 %! mesh (xi, yi, interpn (x,y,A.',xi,yi, "nearest").');
 %! [x,y] = meshgrid (x,y);
 %! hold on; plot3 (x(:),y(:),A(:),"b*"); hold off;
 
 %!#demo  # FIXME: Uncomment when support for "cubic" has been added
 %! clf;
+%! colormap ("default");
 %! A = [13,-1,12;5,4,3;1,6,2];
 %! x = [0,1,2]; y = [10,11,12];
 %! xi = linspace (min(x), max(x), 17);
 %! yi = linspace (min(y), max(y), 26)';
 %! mesh (xi, yi, interpn (x,y,A.',xi,yi, "cubic").');
 %! [x,y] = meshgrid (x,y);
 %! hold on; plot3 (x(:),y(:),A(:),"b*"); hold off;
 
 %!demo
 %! clf;
+%! colormap ("default");
 %! A = [13,-1,12;5,4,3;1,6,2];
 %! x = [0,1,2]; y = [10,11,12];
 %! xi = linspace (min(x), max(x), 17);
 %! yi = linspace (min(y), max(y), 26)';
 %! mesh (xi, yi, interpn (x,y,A.',xi,yi, "spline").');
 %! [x,y] = meshgrid (x,y);
 %! hold on; plot3 (x(:),y(:),A(:),"b*"); hold off;
 
 %!demo
 %! clf;
+%! colormap ("default");
 %! x = y = z = -1:1;
 %! f = @(x,y,z) x.^2 - y - z.^2;
 %! [xx, yy, zz] = meshgrid (x, y, z);
 %! v = f (xx,yy,zz);
 %! xi = yi = zi = -1:0.1:1;
 %! [xxi, yyi, zzi] = ndgrid (xi, yi, zi);
 %! vi = interpn (x, y, z, v, xxi, yyi, zzi, 'spline');
 %! mesh (yi, zi, squeeze (vi(1,:,:)));
diff --git a/scripts/geometry/griddata.m b/scripts/geometry/griddata.m
--- a/scripts/geometry/griddata.m
+++ b/scripts/geometry/griddata.m
@@ -138,38 +138,41 @@ function [rx, ry, rz] = griddata (x, y, 
   elseif (nargout == 0)
     mesh (xi, yi, zi);
   endif
 endfunction
 
 
 %!demo
 %! clf;
+%! colormap ("default");
 %! x = 2*rand (100,1) - 1;
 %! y = 2*rand (size (x)) - 1;
 %! z = sin (2*(x.^2 + y.^2));
 %! [xx,yy] = meshgrid (linspace (-1,1,32));
 %! griddata (x,y,z,xx,yy);
 %! title ("nonuniform grid sampled at 100 points");
 
 %!demo
 %! clf;
+%! colormap ("default");
 %! x = 2*rand (1000,1) - 1;
 %! y = 2*rand (size (x)) - 1;
 %! z = sin (2*(x.^2 + y.^2));
 %! [xx,yy] = meshgrid (linspace (-1,1,32));
 %! griddata (x,y,z,xx,yy);
 %! title ("nonuniform grid sampled at 1000 points");
 
 %!demo
 %! clf;
+%! colormap ("default");
 %! x = 2*rand (1000,1) - 1;
 %! y = 2*rand (size (x)) - 1;
 %! z = sin (2*(x.^2 + y.^2));
-%! [xx,yy] = meshgrid (linspace (-1, 1, 32));
+%! [xx,yy] = meshgrid (linspace (-1,1,32));
 %! griddata (x,y,z,xx,yy,"nearest");
 %! title ("nonuniform grid sampled at 1000 points with nearest neighbor");
 
 %!testif HAVE_QHULL
 %! [xx,yy] = meshgrid (linspace (-1,1,32));
 %! x = xx(:);
 %! x = x + 10*(2*round (rand (size(x))) - 1) * eps;
 %! y = yy(:);
diff --git a/scripts/image/image.m b/scripts/image/image.m
--- a/scripts/image/image.m
+++ b/scripts/image/image.m
@@ -173,16 +173,17 @@ function h = __img__ (x, y, img, varargi
     h = tmp;
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
+%! colormap ("default");
 %! img = 1 ./ hilb (11);
 %! x = -5:5;
 %! y = x;
 %! subplot (2,2,1);
 %!  h = image (abs(x), abs(y), img);
 %!  set (h, "cdatamapping", "scaled");
 %!  ylabel ("limits = [4.5, 15.5]");
 %!  title ("image (abs(x), abs(y), img)");
@@ -197,39 +198,42 @@ endfunction
 %!  ylabel ("limits = [-5.5, 5.5]");
 %! subplot (2,2,4);
 %!  h = image (-x, -y, img);
 %!  set (h, "cdatamapping", "scaled");
 %!  title ("image (-x, -y, img)");
 
 %!demo
 %! clf;
+%! colormap ("default");
 %! g = 0.1:0.1:10;
 %! h = g'*g;
 %! imagesc (g, g, sin (h));
 %! hold on;
 %! imagesc (g, g+12, cos (h/2));
 %! axis ([0 10 0 22]);
 %! hold off;
 %! title ("two consecutive images");
 
 %!demo
 %! clf;
+%! colormap ("default");
 %! g = 0.1:0.1:10;
 %! h = g'*g;
 %! imagesc (g, g, sin (h));
 %! hold all;
 %! plot (g, 11.0 * ones (size (g)));
 %! imagesc (g, g+12, cos (h/2));
 %! axis ([0 10 0 22]);
 %! hold off;
 %! title ("image, line, image");
 
 %!demo
 %! clf;
+%! colormap ("default");
 %! g = 0.1:0.1:10;
 %! h = g'*g;
 %! plot (g, 10.5 * ones (size (g)));
 %! hold all;
 %! imagesc (g, g, sin (h));
 %! plot (g, 11.0 * ones (size (g)));
 %! imagesc (g, g+12, cos (h/2));
 %! plot (g, 11.5 * ones (size (g)));
diff --git a/scripts/plot/axis.m b/scripts/plot/axis.m
--- a/scripts/plot/axis.m
+++ b/scripts/plot/axis.m
@@ -484,16 +484,17 @@ endfunction
 %! clf;
 %! x = 0:0.1:10;
 %! plot (x, sin(x));
 %! axis image;
 %! title ('image');
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! [x,y,z] = peaks (50);
 %! x1 = max (x(:));
 %! pcolor (x-x1, y-x1/2, z);
 %! hold on;
 %! [x,y,z] = sombrero ();
 %! s = x1 / max (x(:));
 %! pcolor (s*x+x1, s*y+x1/2, 5*z);
 %! axis tight;
diff --git a/scripts/plot/clabel.m b/scripts/plot/clabel.m
--- a/scripts/plot/clabel.m
+++ b/scripts/plot/clabel.m
@@ -128,16 +128,18 @@ function retval = clabel (c, varargin)
     retval =  __clabel__ (c, v, hparent, label_spacing, [], varargin{:});
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! [c, h] = contour (peaks (), -4:6);
 %! clabel (c, h, -4:2:6, 'fontsize', 12);
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! [c, h] = contourf (peaks (), -7:6);
 %! clabel (c, h, -6:2:6, 'fontsize', 12);
 
diff --git a/scripts/plot/colorbar.m b/scripts/plot/colorbar.m
--- a/scripts/plot/colorbar.m
+++ b/scripts/plot/colorbar.m
@@ -360,261 +360,290 @@ function [pos, cpos, vertical, mirr] = _
     endif
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! n = 64; x = kron (1:n, ones (n,1)); x = abs (x - x.');
 %! imagesc (x);
 %! colorbar ();
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! n = 64; x = kron (1:n, ones (n,1)); x = abs (x - x.');
 %! imagesc (x);
 %! colorbar ('westoutside');
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! n = 64; x = kron (1:n, ones (n,1)); x = abs (x - x.');
 %! imagesc (x);
 %! colorbar ('peer', gca (), 'northoutside');
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! n = 64; x = kron (1:n, ones (n,1)); x = abs (x - x.');
 %! imagesc (x);
 %! colorbar ('southoutside');
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! contour (peaks ());
 %! colorbar ('west');
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! subplot (2,2,1);
 %!  contour (peaks ());
 %!  colorbar ('east');
 %! subplot (2,2,2);
 %!  contour (peaks ());
 %!  colorbar ('west');
 %! subplot (2,2,3);
 %!  contour (peaks ());
 %!  colorbar ('north');
 %! subplot (2,2,4);
 %!  contour (peaks ());
 %!  colorbar ('south');
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! n = 64; x = kron (1:n, ones (n,1)); x = abs (x - x.');
 %! subplot (2,2,1);
 %!  imagesc (x);
 %!  colorbar ();
 %! subplot (2,2,2);
 %!  imagesc (x);
 %!  colorbar ('westoutside');
 %! subplot (2,2,3);
 %!  imagesc (x);
 %!  colorbar ('northoutside');
 %! subplot (2,2,4);
 %!  imagesc (x);
 %!  colorbar ('southoutside');
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! n = 64; x = kron (1:n, ones (n,1)); x = abs (x - x.');
 %! subplot (1,2,1);
 %!  imagesc (x);
 %!  axis square;
 %!  colorbar ();
 %! subplot (1,2,2);
 %!  imagesc (x);
 %!  axis square;
 %!  colorbar ('westoutside');
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! n = 64; x = kron (1:n, ones (n,1)); x = abs (x - x.');
 %! subplot (1,2,1);
 %!  imagesc (x);
 %!  axis square;
 %!  colorbar ('northoutside');
 %! subplot (1,2,2);
 %!  imagesc (x);
 %!  axis square;
 %!  colorbar ('southoutside');
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! n = 64; x = kron (1:n, ones (n,1)); x = abs (x - x.');
 %! subplot (2,1,1);
 %!  imagesc (x);
 %!  axis square;
 %!  colorbar ();
 %! subplot (2,1,2);
 %!  imagesc (x);
 %!  axis square;
 %!  colorbar ('westoutside');
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! n = 64; x = kron (1:n, ones (n,1)); x = abs (x - x.');
 %! subplot (2,1,1);
 %!  imagesc (x);
 %!  axis square;
 %!  colorbar ('northoutside');
 %! subplot (2,1,2);
 %!  imagesc (x);
 %!  axis square;
 %!  colorbar ('southoutside');
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! n = 64; x = kron (1:n, ones (n,1)); x = abs (x - x.');
 %! subplot (1,2,1);
 %!  imagesc (x);
 %!  colorbar ();
 %! subplot (1,2,2);
 %!  imagesc (x);
 %!  colorbar ('westoutside');
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! n = 64; x = kron (1:n, ones (n,1)); x = abs (x - x.');
 %! subplot (1,2,1);
 %!  imagesc (x);
 %!  colorbar ('northoutside');
 %! subplot (1,2,2);
 %!  imagesc (x);
 %!  colorbar ('southoutside');
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! n = 64; x = kron (1:n, ones (n,1)); x = abs (x - x.');
 %! subplot (2,1,1);
 %!  imagesc (x);
 %!  colorbar ();
 %! subplot (2,1,2);
 %!  imagesc (x);
 %!  colorbar ('westoutside');
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! n = 64; x = kron (1:n, ones (n,1)); x = abs (x - x.');
 %! subplot (2,1,1);
 %!  imagesc (x);
 %!  colorbar ('northoutside');
 %! subplot (2,1,2);
 %!  imagesc (x);
 %!  colorbar ('southoutside');
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! n = 64; x = kron (1:n, ones (n,1)); x = abs (x - x.');
 %! subplot (1,2,1);
 %!  contour (x);
 %!  axis square;
 %!  colorbar ('east');
 %!  xlim ([1, 64]);
 %!  ylim ([1, 64]);
 %! subplot (1,2,2);
 %!  contour (x);
 %!  colorbar ('west');
 %!  xlim ([1, 64]);
 %!  ylim ([1, 64]);
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! n = 64; x = kron (1:n, ones (n,1)); x = abs (x - x.');
 %! contour (x);
 %! xlim ([1, 64]);
 %! ylim ([1, 64]);
 %! colorbar ();
 %! colorbar off;
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! n = 64; x = kron (1:n, ones (n,1)); x = abs (x - x.');
 %! contour (x);
 %! xlim ([1, 64]);
 %! ylim ([1, 64]);
 %! colorbar ();
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! imagesc (1 ./ hilb (99));
 %! h = colorbar ();
 %! set (h, 'yscale', 'log');
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! imagesc (log10 (1 ./ hilb (99)));
 %! h = colorbar ();
 %! ytick = get (h, 'ytick');
 %! set (h, 'yticklabel', sprintf ('10^{%g}|', ytick));
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! n = 5; x = linspace (0,5,n); y = linspace (0,1,n);
 %! imagesc (1 ./ hilb (n));
 %! axis equal;
 %! colorbar ();
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! n = 5; x = linspace (0,5,n); y = linspace (0,1,n);
 %! imagesc (x, y, 1 ./ hilb (n));
 %! axis equal;
 %! colorbar ();
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! n = 5; x = linspace (0,5,n); y = linspace (0,1,n);
 %! imagesc (y, x, 1 ./ hilb (n));
 %! axis equal;
 %! colorbar ();
 
 ## This requires that the axes position be properly determined for 'axis equal'
 %!demo
 %! clf;
+%! colormap ('default');
 %! axes;
 %! colorbar ();
 %! hold on;
 %! contour (peaks ());
 %! hold off;
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! plot ([0, 2]);
 %! colorbar ('east');
 %! axis square;
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! plot ([0, 2]);
 %! colorbar ('eastoutside');
 %! axis square;
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! pcolor (peaks (20));
 %! shading interp;
 %! axis ('tight', 'square');
 %! colorbar ();
 #%! axes ('color','none','box','on','activepositionproperty','position');
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! plot ([0, 2]);
 %! colorbar ('east');
 %! axis equal;
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! plot ([0, 2]);
 %! colorbar ('eastoutside');
 %! axis equal;
 
diff --git a/scripts/plot/contour.m b/scripts/plot/contour.m
--- a/scripts/plot/contour.m
+++ b/scripts/plot/contour.m
@@ -68,26 +68,29 @@ function [c, h] = contour (varargin)
     h = htmp;
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! [x, y, z] = peaks ();
 %! contour (x, y, z);
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! [theta, r] = meshgrid (linspace (0,2*pi,64), linspace (0,1,64));
 %! [X, Y] = pol2cart (theta, r);
 %! Z = sin (2*theta) .* (1-r);
 %! contour (X, Y, abs(Z), 10);
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! x = linspace (-2, 2);
 %! [x, y] = meshgrid (x);
 %! z = sqrt (x.^2 + y.^2) ./ (x.^2 + y.^2 + 1);
 %! contourf (x, y, z, [0.4, 0.4]);
 %! title ('The hole should be filled with the background color');
 
diff --git a/scripts/plot/contourf.m b/scripts/plot/contourf.m
--- a/scripts/plot/contourf.m
+++ b/scripts/plot/contourf.m
@@ -79,18 +79,20 @@ function [c, h] = contourf (varargin)
     h = htmp;
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! [x, y, z] = peaks (50);
 %! contourf (x, y, z, -7:9);
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! [theta, r] = meshgrid (linspace (0,2*pi,64), linspace (0,1,64));
 %! [X, Y] = pol2cart (theta, r);
 %! Z = sin (2*theta) .* (1-r);
 %! contourf (X, Y, abs (Z), 10);
 
diff --git a/scripts/plot/cylinder.m b/scripts/plot/cylinder.m
--- a/scripts/plot/cylinder.m
+++ b/scripts/plot/cylinder.m
@@ -83,12 +83,13 @@ function [xx, yy, zz] = cylinder (vararg
     surf (ax, x, y, z);
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! [x, y, z] = cylinder (10:-1:0,50);
 %! surf (x, y, z);
 %! title ('a cone');
 
diff --git a/scripts/plot/ezcontour.m b/scripts/plot/ezcontour.m
--- a/scripts/plot/ezcontour.m
+++ b/scripts/plot/ezcontour.m
@@ -59,11 +59,12 @@ function retval = ezcontour (varargin)
     retval = h;
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! f = @(x,y) sqrt (abs (x .* y)) ./ (1 + x.^2 + y.^2);
 %! ezcontour (f, [-3, 3]);
 
diff --git a/scripts/plot/ezcontourf.m b/scripts/plot/ezcontourf.m
--- a/scripts/plot/ezcontourf.m
+++ b/scripts/plot/ezcontourf.m
@@ -59,11 +59,12 @@ function retval = ezcontourf (varargin)
     retval = h;
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! f = @(x,y) sqrt (abs (x .* y)) ./ (1 + x.^2 + y.^2);
 %! ezcontourf (f, [-3, 3]);
 
diff --git a/scripts/plot/ezmesh.m b/scripts/plot/ezmesh.m
--- a/scripts/plot/ezmesh.m
+++ b/scripts/plot/ezmesh.m
@@ -80,18 +80,20 @@ function retval = ezmesh (varargin)
     retval = h;
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! f = @(x,y) sqrt (abs (x .* y)) ./ (1 + x.^2 + y.^2);
 %! ezmesh (f, [-3, 3]);
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! fx = @(s,t) cos (s) .* cos(t);
 %! fy = @(s,t) sin (s) .* cos(t);
 %! fz = @(s,t) sin (t);
 %! ezmesh (fx, fy, fz, [-pi,pi,-pi/2,pi/2], 20);
 
diff --git a/scripts/plot/ezmeshc.m b/scripts/plot/ezmeshc.m
--- a/scripts/plot/ezmeshc.m
+++ b/scripts/plot/ezmeshc.m
@@ -70,11 +70,12 @@ function retval = ezmeshc (varargin)
     retval = h;
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! f = @(x,y) sqrt (abs (x .* y)) ./ (1 + x.^2 + y.^2);
 %! ezmeshc (f, [-3, 3]);
 
diff --git a/scripts/plot/ezsurf.m b/scripts/plot/ezsurf.m
--- a/scripts/plot/ezsurf.m
+++ b/scripts/plot/ezsurf.m
@@ -80,18 +80,20 @@ function retval = ezsurf (varargin)
     retval = h;
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! f = @(x,y) sqrt (abs (x .* y)) ./ (1 + x.^2 + y.^2);
 %! ezsurf (f, [-3, 3]);
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! fx = @(s,t) cos (s) .* cos(t);
 %! fy = @(s,t) sin (s) .* cos(t);
 %! fz = @(s,t) sin (t);
 %! ezsurf (fx, fy, fz, [-pi,pi,-pi/2,pi/2], 20);
 
diff --git a/scripts/plot/ezsurfc.m b/scripts/plot/ezsurfc.m
--- a/scripts/plot/ezsurfc.m
+++ b/scripts/plot/ezsurfc.m
@@ -70,11 +70,12 @@ function retval = ezsurfc (varargin)
     retval = h;
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! f = @(x,y) sqrt (abs (x .* y)) ./ (1 + x.^2 + y.^2);
 %! ezsurfc (f, [-3, 3]);
 
diff --git a/scripts/plot/hold.m b/scripts/plot/hold.m
--- a/scripts/plot/hold.m
+++ b/scripts/plot/hold.m
@@ -101,38 +101,41 @@ endfunction
 %! [X, Y] = find (A > 0.9);
 %! imshow (A);
 %! hold on;
 %! plot (X, Y, 'o');
 %! hold off;
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! hold on;
 %! imagesc (1 ./ hilb (4));
 %! plot (1:4, '-s');
 %! hold off;
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! hold on;
 %! imagesc (1 ./ hilb (2));
 %! imagesc (1 ./ hilb (4));
 %! hold off;
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! hold on;
 %! plot (1:4, '-s');
 %! imagesc (1 ./ hilb (4));
 %! hold off;
 
 %!demo
 %! clf;
-%! colormap (jet (64));
+%! colormap ('default');
 %! t = linspace (-3, 3, 50);
 %! [x, y] = meshgrid (t, t);
 %! z = peaks (x, y);
 %! contourf (x, y, z, 10);
 %! hold on;
 %! plot (vec (x), vec (y), '^');
 %! patch ([-1.0 1.0 1.0 -1.0 -1.0], [-1.0 -1.0 1.0 1.0 -1.0], 'red');
 %! xlim ([-2.0 2.0]);
diff --git a/scripts/plot/pcolor.m b/scripts/plot/pcolor.m
--- a/scripts/plot/pcolor.m
+++ b/scripts/plot/pcolor.m
@@ -79,18 +79,20 @@ function h = pcolor (x, y, c)
     h = tmp;
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! [~,~,Z] = peaks ();
 %! pcolor (Z);
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! [X,Y,Z] = sombrero ();
 %! [Fx,Fy] = gradient (Z);
 %! pcolor (X,Y,Fx+Fy);
 %! shading interp;
 
diff --git a/scripts/plot/plotyy.m b/scripts/plot/plotyy.m
--- a/scripts/plot/plotyy.m
+++ b/scripts/plot/plotyy.m
@@ -240,16 +240,17 @@ endfunction
 %! text (0.5, 0.5, 'Left Axis', ...
 %!       'color', [0 0 1], 'horizontalalignment', 'center');
 %! axes (ax(2));
 %! text (4.5, 80, 'Right Axis', ...
 %!       'color', [0 0.5 0], 'horizontalalignment', 'center');
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! x = linspace (-1, 1, 201);
 %! subplot (2,2,1);
 %!  plotyy (x,sin(pi*x), x,10*cos(pi*x));
 %! subplot (2,2,2);
 %!  surf (peaks (25));
 %! subplot (2,2,3);
 %!  contour (peaks (25));
 %! subplot (2,2,4);
diff --git a/scripts/plot/quiver3.m b/scripts/plot/quiver3.m
--- a/scripts/plot/quiver3.m
+++ b/scripts/plot/quiver3.m
@@ -82,37 +82,39 @@ function retval = quiver3 (varargin)
     retval = tmp;
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
-%! colormap (jet (64));
+%! colormap ('default');
 %! [x,y] = meshgrid (-1:0.1:1);
 %! z = sin (2*pi * sqrt (x.^2 + y.^2));
 %! theta = 2*pi * sqrt (x.^2 + y.^2) + pi/2;
 %! quiver3 (x, y, z, sin (theta), cos (theta), ones (size (z)));
 %! hold on;
 %! mesh (x,y,z);
 %! hold off;
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! [x, y, z] = peaks (25);
 %! surf (x, y, z);
 %! hold on;
 %! [u, v, w] = surfnorm (x, y, z / 10);
 %! h = quiver3 (x, y, z, u, v, w);
 %! set (h, 'maxheadsize', 0.33);
 %! hold off;
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! [x, y, z] = peaks (25);
 %! surf (x, y, z);
 %! hold on;
 %! [u, v, w] = surfnorm (x, y, z / 10);
 %! h = quiver3 (x, y, z, u, v, w);
 %! set (h, 'maxheadsize', 0.33);
 %! hold off;
 %! shading interp;
diff --git a/scripts/plot/ribbon.m b/scripts/plot/ribbon.m
--- a/scripts/plot/ribbon.m
+++ b/scripts/plot/ribbon.m
@@ -82,13 +82,14 @@ function h = ribbon (x, y, width = 0.75)
     h = htmp;
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! [x, y, z] = sombrero ();
 %! [x, y] = meshgrid (x, y);
 %! ribbon (y, z);
 
 %!FIXME: Could have some input validation tests here
diff --git a/scripts/plot/shading.m b/scripts/plot/shading.m
--- a/scripts/plot/shading.m
+++ b/scripts/plot/shading.m
@@ -71,43 +71,48 @@ function shading (varargin)
     endif
   endfor
 
 endfunction
 
 
 %!demo
 %! clf;
-%! colormap (jet (64));
+%! colormap ('default');
 %! sombrero ();
 %! shading faceted;
 %! title ('shading ''faceted''');
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! sombrero ();
 %! shading flat;
 %! title ('shading ''flat''');
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! sombrero ();
 %! shading interp;
 %! title ('shading ''interp''');
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! pcolor (peaks ());
 %! shading faceted;
 %! title ('shading ''faceted''');
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! pcolor (peaks ());
 %! shading flat;
 %! title ('shading ''flat''');
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! pcolor (peaks ());
 %! shading interp;
 %! title ('shading ''interp''');
 
diff --git a/scripts/plot/slice.m b/scripts/plot/slice.m
--- a/scripts/plot/slice.m
+++ b/scripts/plot/slice.m
@@ -178,20 +178,22 @@ function h = slice (varargin)
     h = tmp;
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! [x, y, z] = meshgrid (linspace (-8, 8, 32));
 %! v = sin (sqrt (x.^2 + y.^2 + z.^2)) ./ (sqrt (x.^2 + y.^2 + z.^2));
 %! slice (x, y, z, v, [], 0, []);
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! [x, y, z] = meshgrid (linspace (-8, 8, 32));
 %! v = sin (sqrt (x.^2 + y.^2 + z.^2)) ./ (sqrt (x.^2 + y.^2 + z.^2));
 %! [xi, yi] = meshgrid (linspace (-7, 7));
 %! zi = xi + yi;
 %! slice (x, y, z, v, xi, yi, zi);
 
diff --git a/scripts/plot/sombrero.m b/scripts/plot/sombrero.m
--- a/scripts/plot/sombrero.m
+++ b/scripts/plot/sombrero.m
@@ -59,10 +59,11 @@ function [x, y, z] = sombrero (n)
     print_usage ();
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! sombrero ();
 
diff --git a/scripts/plot/surf.m b/scripts/plot/surf.m
--- a/scripts/plot/surf.m
+++ b/scripts/plot/surf.m
@@ -62,25 +62,28 @@ function retval = surf (varargin)
     retval = tmp;
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! [~,~,Z] = peaks ();
 %! surf (Z);
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! [~,~,Z] = sombrero ();
 %! [Fx,Fy] = gradient (Z);
 %! surf (Z, Fx+Fy);
 %! shading interp;
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! [X,Y,Z] = sombrero ();
 %! [~,Fy] = gradient (Z);
 %! surf (X, Y, Z, Fy);
 %! shading interp;
 
diff --git a/scripts/plot/surfc.m b/scripts/plot/surfc.m
--- a/scripts/plot/surfc.m
+++ b/scripts/plot/surfc.m
@@ -72,25 +72,28 @@ function h = surfc (varargin)
     h = tmp;
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! [~,~,Z] = peaks ();
 %! surfc (Z);
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! [~,~,Z] = sombrero ();
 %! [Fx,Fy] = gradient (Z);
 %! surfc (Z, Fx+Fy);
 %! shading interp;
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! [X,Y,Z] = sombrero ();
 %! [~,Fy] = gradient (Z);
 %! surfc (X,Y,Z,Fy);
 %! shading interp;
 
diff --git a/scripts/plot/surfnorm.m b/scripts/plot/surfnorm.m
--- a/scripts/plot/surfnorm.m
+++ b/scripts/plot/surfnorm.m
@@ -139,21 +139,23 @@ function [Nx, Ny, Nz] = surfnorm (vararg
     Nz = nz;
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
-%! colormap (jet (64));
+%! colormap ('default');
 %! [x, y, z] = peaks (10);
 %! surfnorm (x, y, z);
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! surfnorm (peaks (10));
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! surfnorm (peaks (32));
 %! shading interp;
 
diff --git a/scripts/plot/trisurf.m b/scripts/plot/trisurf.m
--- a/scripts/plot/trisurf.m
+++ b/scripts/plot/trisurf.m
@@ -69,64 +69,70 @@ function h = trisurf (tri, x, y, z, vara
     endif
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! N = 31;
 %! [x, y] = meshgrid (1:N);
 %! tri = delaunay (x, y);
 %! z = peaks (N);
 %! h = trisurf (tri, x, y, z, 'facecolor', 'interp');
 %! axis tight;
 %! zlim auto;
 %! title (sprintf ('facecolor = %s', get (h, 'facecolor')));
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! N = 31;
 %! [x, y] = meshgrid (1:N);
 %! tri = delaunay (x, y);
 %! z = peaks (N);
 %! h = trisurf (tri, x, y, z, 'facecolor', 'flat');
 %! axis tight;
 %! zlim auto;
 %! title (sprintf ('facecolor = %s', get (h, 'facecolor')));
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! old_state = rand ('state');
 %! restore_state = onCleanup (@() rand ('state', old_state));
 %! rand ('state', 10);
 %! N = 10;
 %! x = 3 - 6 * rand (N, N);
 %! y = 3 - 6 * rand (N, N);
 %! z = peaks (x, y);
 %! tri = delaunay (x(:), y(:));
 %! trisurf (tri, x(:), y(:), z(:));
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! x = rand (100, 1);
 %! y = rand (100, 1);
 %! z = x.^2 + y.^2;
 %! tri = delaunay (x, y);
 %! trisurf (tri, x, y, z);
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! x = rand (100, 1);
 %! y = rand (100, 1);
 %! z = x.^2 + y.^2;
 %! tri = delaunay (x, y);
 %! trisurf (tri, x, y, z, 'facecolor', 'interp');
 
 %!demo
 %! clf;
+%! colormap ('default');
 %! x = rand (100, 1);
 %! y = rand (100, 1);
 %! z = x.^2 + y.^2;
 %! tri = delaunay (x, y);
 %! trisurf (tri, x, y, z, 'facecolor', 'interp', 'edgecolor', 'k');
 
