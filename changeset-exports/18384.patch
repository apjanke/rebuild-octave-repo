# HG changeset patch
# User Mike Miller <mtmiller@ieee.org>
# Date 1390629732 18000
#      Sat Jan 25 01:02:12 2014 -0500
# Branch stable
# Node ID bd9d34f28b0f5740212be0d37175eac56a80fa05
# Parent  abc78c10acb62a5a6dcef5b728b8a030d24b9eaf
Use std::ostream::fail instead of unsafe implicit bool conversion (bug #41335)

* ls-mat4.cc (save_mat_binary_data): Use std::ostream::fail to return stream
status instead of unsafe implicit bool conversion.
* ov-cell.cc (octave_cell::save_ascii) Likewise.
* ov-class.cc (octave_class::save_ascii, octave_class::save_binary) Likewise.
* ov-fcn-handle.cc (octave_fcn_handle::save_ascii,
octave_fcn_handle::save_binary) Likewise.
* ov-struct.cc (octave_struct::save_ascii, octave_struct::save_binary,
octave_scalar_struct::save_ascii, octave_scalar_struct::save_binary) Likewise.

diff --git a/libinterp/corefcn/ls-mat4.cc b/libinterp/corefcn/ls-mat4.cc
--- a/libinterp/corefcn/ls-mat4.cc
+++ b/libinterp/corefcn/ls-mat4.cc
@@ -580,10 +580,10 @@ save_mat_binary_data (std::ostream& os, 
       Matrix m = ::real (m_cmplx);
       os.write (reinterpret_cast<const char *> (m.data ()), 8 * len);
       m = ::imag (m_cmplx);
       os.write (reinterpret_cast<const char *> (m.data ()), 8 * len);
     }
   else
     gripe_wrong_type_arg ("save", tc, false);
 
-  return os;
+  return ! os.fail ();
 }
diff --git a/libinterp/octave-value/ov-cell.cc b/libinterp/octave-value/ov-cell.cc
--- a/libinterp/octave-value/ov-cell.cc
+++ b/libinterp/octave-value/ov-cell.cc
@@ -775,17 +775,17 @@ octave_cell::save_ascii (std::ostream& o
       for (octave_idx_type i = 0; i < d.numel (); i++)
         {
           octave_value o_val = tmp.elem (i);
 
           // Recurse to print sub-value.
           bool b = save_ascii_data (os, o_val, CELL_ELT_TAG, false, 0);
 
           if (! b)
-            return os;
+            return ! os.fail ();
         }
     }
   else
     {
       // Keep this case, rather than use generic code above for backward
       // compatiability. Makes load_ascii much more complex!!
       os << "# rows: " << rows () << "\n"
          << "# columns: " << columns () << "\n";
@@ -797,17 +797,17 @@ octave_cell::save_ascii (std::ostream& o
           for (octave_idx_type i = 0; i < tmp.rows (); i++)
             {
               octave_value o_val = tmp.elem (i, j);
 
               // Recurse to print sub-value.
               bool b = save_ascii_data (os, o_val, CELL_ELT_TAG, false, 0);
 
               if (! b)
-                return os;
+                return ! os.fail ();
             }
 
           os << "\n";
         }
     }
 
   return true;
 }
diff --git a/libinterp/octave-value/ov-class.cc b/libinterp/octave-value/ov-class.cc
--- a/libinterp/octave-value/ov-class.cc
+++ b/libinterp/octave-value/ov-class.cc
@@ -1350,17 +1350,17 @@ octave_class::save_ascii (std::ostream& 
   octave_map::iterator i = m.begin ();
   while (i != m.end ())
     {
       octave_value val = map.contents (i);
 
       bool b = save_ascii_data (os, val, m.key (i), false, 0);
 
       if (! b)
-        return os;
+        return ! os.fail ();
 
       i++;
     }
 
   return true;
 }
 
 bool
@@ -1479,17 +1479,17 @@ octave_class::save_binary (std::ostream&
   octave_map::iterator i = m.begin ();
   while (i != m.end ())
     {
       octave_value val = map.contents (i);
 
       bool b = save_binary_data (os, val, m.key (i), "", 0, save_as_floats);
 
       if (! b)
-        return os;
+        return ! os.fail ();
 
       i++;
     }
 
   return true;
 }
 
 bool
diff --git a/libinterp/octave-value/ov-fcn-handle.cc b/libinterp/octave-value/ov-fcn-handle.cc
--- a/libinterp/octave-value/ov-fcn-handle.cc
+++ b/libinterp/octave-value/ov-fcn-handle.cc
@@ -375,17 +375,17 @@ octave_fcn_handle::save_ascii (std::ostr
       if (varlen > 0)
         {
           os << "# length: " << varlen << "\n";
 
           for (std::list<symbol_table::symbol_record>::const_iterator
                p = vars.begin (); p != vars.end (); p++)
             {
               if (! save_ascii_data (os, p->varval (0), p->name (), false, 0))
-                return os;
+                return ! os.fail ();
             }
         }
     }
   else
     {
       octave_function *f = function_value ();
       std::string fnm = f ? f->fcn_file_name () : std::string ();
 
@@ -551,17 +551,17 @@ octave_fcn_handle::save_binary (std::ost
 
       if (varlen > 0)
         {
           for (std::list<symbol_table::symbol_record>::const_iterator
                p = vars.begin (); p != vars.end (); p++)
             {
               if (! save_binary_data (os, p->varval (0), p->name (),
                                       "", 0, save_as_floats))
-                return os;
+                return ! os.fail ();
             }
         }
     }
   else
     {
       std::ostringstream nmbuf;
 
       octave_function *f = function_value ();
diff --git a/libinterp/octave-value/ov-struct.cc b/libinterp/octave-value/ov-struct.cc
--- a/libinterp/octave-value/ov-struct.cc
+++ b/libinterp/octave-value/ov-struct.cc
@@ -764,17 +764,17 @@ octave_struct::save_ascii (std::ostream&
     {
       std::string key = keys(i);
 
       octave_value val = map.contents (key);
 
       bool b = save_ascii_data (os, val, key, false, 0);
 
       if (! b)
-        return os;
+        return ! os.fail ();
     }
 
   return true;
 }
 
 bool
 octave_struct::load_ascii (std::istream& is)
 {
@@ -889,17 +889,17 @@ octave_struct::save_binary (std::ostream
     {
       std::string key = keys(i);
 
       octave_value val = map.contents (key);
 
       bool b = save_binary_data (os, val, key, "", 0, save_as_floats);
 
       if (! b)
-        return os;
+        return ! os.fail ();
     }
 
   return true;
 }
 
 bool
 octave_struct::load_binary (std::istream& is, bool swap,
                             oct_mach_info::float_format fmt)
@@ -1466,17 +1466,17 @@ octave_scalar_struct::save_ascii (std::o
     {
       std::string key = keys(i);
 
       octave_value val = map.contents (key);
 
       bool b = save_ascii_data (os, val, key, false, 0);
 
       if (! b)
-        return os;
+        return ! os.fail ();
     }
 
   return true;
 }
 
 bool
 octave_scalar_struct::load_ascii (std::istream& is)
 {
@@ -1550,17 +1550,17 @@ octave_scalar_struct::save_binary (std::
     {
       std::string key = keys(i);
 
       octave_value val = map.contents (key);
 
       bool b = save_binary_data (os, val, key, "", 0, save_as_floats);
 
       if (! b)
-        return os;
+        return ! os.fail ();
     }
 
   return true;
 }
 
 bool
 octave_scalar_struct::load_binary (std::istream& is, bool swap,
                                    oct_mach_info::float_format fmt)
