# HG changeset patch
# User Kai T. Ohlhus <k.ohlhus@gmail.com>
# Date 1538684720 -7200
#      Thu Oct 04 22:25:20 2018 +0200
# Node ID ba937c3dce82720297a2479bb4c08414e8a235df
# Parent  3f2282954600d0b014ade7b3da97cb1e9396c434
Determine an object's shape by "size" (bug #51308, bug #44498, bug #43925).

* libinterp/corefcn/data.cc (Fndims, Frows, Fcolumns, Fisscalar, Fisvector,
Fisrow, Fiscolumn, Fismatrix, Fissquare): Make those functions dependend on the
output of "size".  The first reason for this is the Matlab compatibility, the
second and more important reason is, that "size" may be overloaded by a user-
definied class.  Improve documentation to make the depency on "size".

* NEWS: Document the behavior change.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -1,11 +1,17 @@
 Summary of important user-visible changes for version 5.0 (yyyy-mm-dd):
 ----------------------------------------------------------------------
 
+ ** The determination of an object's dimensions, size, and shape by the
+    functions ndims, rows, columns, isscalar, isvector, isrow, iscolumn,
+    ismatrix, and issquare now fully depends on the function size.  Thus
+    any user-defined object can ensure correct treatment by the aforementioned
+    functions by properly overloading the "size" function.
+
  ** The functions issymmetric and ishermitian accept an option "nonskew"
     or "skew" to calculate the symmetric or skew-symmetric property
     of a matrix.  Performance has also been increased.
 
  ** The issorted function now uses a direction option of "ascend" or
     "descend" to make it compatible with both the sort function and
     with Matlab.  Change all uses of "ascending" and "descending" in
     existing code to the new options.
diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -2532,32 +2532,49 @@ of elements along the largest dimension
 }
 
 DEFUN (ndims, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} ndims (@var{a})
 Return the number of dimensions of @var{a}.
 
 For any array, the result will always be greater than or equal to 2.
-Trailing singleton dimensions are not counted.
+Trailing singleton dimensions are not counted, i.e. tailing dimensions @var{d}
+greater than 2, for which @code{size (@var{a}, @var{d}) = 1}.
 
 @example
 @group
 ndims (ones (4, 1, 2, 1))
     @result{} 3
 @end group
 @end example
 @seealso{size}
 @end deftypefn */)
 {
   if (args.length () != 1)
     print_usage ();
 
-  return ovl (args(0).ndims ());
-}
+  // This function *must* use size() to determine the desired values to be
+  // compatible with Matlab and to allow user-defined class overloading.
+  Matrix sz = octave_value (args(0)).size ();
+
+  octave_idx_type ndims = sz.numel ();
+
+  // Don't count trailing ones.  Trailing zeros are *not* singleton dimension.
+  while ((ndims > 2) && (sz(ndims - 1) == 1))
+    ndims--;
+
+  return ovl (ndims);
+}
+
+/*
+%!assert (ndims (1:5), 2)
+%!assert (ndims (ones (4, 1, 2, 1)), 3)
+%!assert (ndims (ones (4, 1, 2, 0)), 4)
+*/
 
 DEFUN (numel, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {} numel (@var{a})
 @deftypefnx {} {} numel (@var{a}, @var{idx1}, @var{idx2}, @dots{})
 Return the number of elements in the object @var{a}.
 
 Optionally, if indices @var{idx1}, @var{idx2}, @dots{} are supplied,
@@ -2799,24 +2816,28 @@ same as @code{nnz} except for some cases
     print_usage ();
 
   return ovl (args(0).nzmax ());
 }
 
 DEFUN (rows, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} rows (@var{a})
-Return the number of rows of @var{a}.
+Return the number of rows of @var{a}.  This is equivalent to
+@code{size (@var{a}, 1)}.
 @seealso{columns, size, length, numel, isscalar, isvector, ismatrix}
 @end deftypefn */)
 {
   if (args.length () != 1)
     print_usage ();
 
-  return ovl (args(0).rows ());
+  // This function *must* use size() to determine the desired values to
+  // allow user-defined class overloading.
+
+  return ovl ((octave_value (args(0)).size ())(0));
 }
 
 /*
 %!assert (rows (ones (2,5)), 2)
 %!assert (rows (ones (5,2)), 5)
 %!assert (rows (ones (5,4,3,2)), 5)
 %!assert (rows (ones (3,4,5,2)), 3)
 
@@ -2839,24 +2860,28 @@ Return the number of rows of @var{a}.
 ## Test input validation
 %!error rows ()
 %!error rows (1,2)
 */
 
 DEFUN (columns, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} columns (@var{a})
-Return the number of columns of @var{a}.
+Return the number of columns of @var{a}.  This is equivalent to
+@code{size (@var{a}, 2)}.
 @seealso{rows, size, length, numel, isscalar, isvector, ismatrix}
 @end deftypefn */)
 {
   if (args.length () != 1)
     print_usage ();
 
-  return ovl (args(0).columns ());
+  // This function *must* use size() to determine the desired values to
+  // allow user-defined class overloading.
+
+  return ovl ((octave_value (args(0)).size ())(1));
 }
 
 DEFUN (sum, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {} sum (@var{x})
 @deftypefnx {} {} sum (@var{x}, @var{dim})
 @deftypefnx {} {} sum (@dots{}, "native")
 @deftypefnx {} {} sum (@dots{}, "double")
@@ -3615,24 +3640,29 @@ Logical and character arrays are not con
 %!assert (isnumeric (false), false)
 %!assert (isnumeric ([true, false]), false)
 %!assert (isnumeric (sparse ([true, false])), false)
 */
 
 DEFUN (isscalar, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} isscalar (@var{x})
-Return true if @var{x} is a scalar.
+Return true if @var{x} is a scalar, i.e., @code{size (@var{x})} returns
+@code{[1 1]}.
 @seealso{isvector, ismatrix}
 @end deftypefn */)
 {
   if (args.length () != 1)
     print_usage ();
 
-  return ovl (args(0).numel () == 1);
+  // This function *must* use size() to determine the desired values to be
+  // compatible with Matlab and to allow user-defined class overloading.
+  Matrix sz = octave_value (args(0)).size ();
+
+  return ovl (sz.numel () == 2 && sz(0) == 1 && sz(1) == 1);
 }
 
 /*
 %!assert (isscalar (1))
 %!assert (isscalar ([1, 2]), false)
 %!assert (isscalar ([]), false)
 %!assert (isscalar ([1, 2; 3, 4]), false)
 
@@ -3657,19 +3687,21 @@ Return true if @var{x} is a vector.
 A vector is a 2-D array where one of the dimensions is equal to 1.  As a
 consequence a 1x1 array, or scalar, is also a vector.
 @seealso{isscalar, ismatrix, size, rows, columns, length}
 @end deftypefn */)
 {
   if (args.length () != 1)
     print_usage ();
 
-  dim_vector sz = args(0).dims ();
-
-  return ovl (sz.ndims () == 2 && (sz(0) == 1 || sz(1) == 1));
+  // This function *must* use size() to determine the desired values to be
+  // compatible with Matlab and to allow user-defined class overloading.
+  Matrix sz = octave_value (args(0)).size ();
+
+  return ovl (sz.numel () == 2 && (sz(0) == 1 || sz(1) == 1));
 }
 
 /*
 %!assert (isvector (1), true)
 %!assert (isvector ([1; 2; 3]), true)
 %!assert (isvector ([1, 2, 3]), true)
 %!assert (isvector ([]), false)
 %!assert (isvector ([1, 2; 3, 4]), false)
@@ -3685,26 +3717,29 @@ consequence a 1x1 array, or scalar, is a
 ## Test input validation
 %!error isvector ()
 %!error isvector ([1, 2], 2)
 */
 
 DEFUN (isrow, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} isrow (@var{x})
-Return true if @var{x} is a row vector 1xN with non-negative N.
+Return true if @var{x} is a row vector, i.e., @code{size (@var{x})} returns
+@code{[1 N]} with non-negative N.
 @seealso{iscolumn, isscalar, isvector, ismatrix}
 @end deftypefn */)
 {
   if (args.length () != 1)
     print_usage ();
 
-  dim_vector sz = args(0).dims ();
-
-  return ovl (sz.ndims () == 2 && sz(0) == 1);
+  // This function *must* use size() to determine the desired values to be
+  // compatible with Matlab and to allow user-defined class overloading.
+  Matrix sz = octave_value (args(0)).size ();
+
+  return ovl (sz.numel () == 2 && sz(0) == 1);
 }
 
 /*
 %!assert (isrow ([1, 2, 3]))
 %!assert (isrow ([1; 2; 3]), false)
 %!assert (isrow (1))
 %!assert (isrow ([]), false)
 %!assert (isrow ([1, 2; 3, 4]), false)
@@ -3729,26 +3764,29 @@ Return true if @var{x} is a row vector 1
 ## Test input validation
 %!error isrow ()
 %!error isrow ([1, 2], 2)
 */
 
 DEFUN (iscolumn, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} iscolumn (@var{x})
-Return true if @var{x} is a column vector Nx1 with non-negative N.
+Return true if @var{x} is a column vector, i.e., @code{size (@var{x})} returns
+@code{[N 1]} with non-negative N.
 @seealso{isrow, isscalar, isvector, ismatrix}
 @end deftypefn */)
 {
   if (args.length () != 1)
     print_usage ();
 
-  dim_vector sz = args(0).dims ();
-
-  return ovl (sz.ndims () == 2 && sz(1) == 1);
+  // This function *must* use size() to determine the desired values to be
+  // compatible with Matlab and to allow user-defined class overloading.
+  Matrix sz = octave_value (args(0)).size ();
+
+  return ovl (sz.numel () == 2 && sz(1) == 1);
 }
 
 /*
 %!assert (iscolumn ([1, 2, 3]), false)
 %!assert (iscolumn ([1; 2; 3]), true)
 %!assert (iscolumn (1), true)
 %!assert (iscolumn ([]), false)
 %!assert (iscolumn ([1, 2; 3, 4]), false)
@@ -3773,26 +3811,29 @@ Return true if @var{x} is a column vecto
 ## Test input validation
 %!error iscolumn ()
 %!error iscolumn ([1, 2], 2)
 */
 
 DEFUN (ismatrix, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} ismatrix (@var{a})
-Return true if @var{a} is a 2-D array.
+Return true if @var{a} is a 2-D array, i.e., @code{size (@var{a})} returns
+@code{[M N]} with non-negative M and N.
 @seealso{isscalar, isvector, iscell, isstruct, issparse, isa}
 @end deftypefn */)
 {
   if (args.length () != 1)
     print_usage ();
 
-  dim_vector sz = args(0).dims ();
-
-  return ovl (sz.ndims () == 2 && sz(0) >= 0 && sz(1) >= 0);
+  // This function *must* use size() to determine the desired values to be
+  // compatible with Matlab and to allow user-defined class overloading.
+  Matrix sz = octave_value (args(0)).size ();
+
+  return ovl (sz.numel () == 2 && sz(0) >= 0 && sz(1) >= 0);
 }
 
 /*
 %!assert (ismatrix ([]), true)
 %!assert (ismatrix (1), true)
 %!assert (ismatrix ([1, 2, 3]), true)
 %!assert (ismatrix ([1, 2; 3, 4]), true)
 
@@ -3816,26 +3857,29 @@ Return true if @var{a} is a 2-D array.
 
 %!error ismatrix ()
 %!error ismatrix ([1, 2; 3, 4], 2)
 */
 
 DEFUN (issquare, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} issquare (@var{x})
-Return true if @var{x} is a square matrix.
+Return true if @var{x} is a square matrix, i.e., @code{size (@var{x})} returns
+@code{[N N]} with non-negative N.
 @seealso{isscalar, isvector, ismatrix, size}
 @end deftypefn */)
 {
   if (args.length () != 1)
     print_usage ();
 
-  dim_vector sz = args(0).dims ();
-
-  return ovl (sz.ndims () == 2 && sz(0) == sz(1));
+  // This function *must* use size() to determine the desired values to
+  // allow user-defined class overloading.
+  Matrix sz = octave_value (args(0)).size ();
+
+  return ovl (sz.numel () == 2 && sz(0) == sz(1));
 }
 
 /*
 %!assert (issquare ([]))
 %!assert (issquare (1))
 %!assert (! issquare ([1, 2]))
 %!assert (issquare ([1, 2; 3, 4]))
 %!assert (! issquare ([1, 2; 3, 4; 5, 6]))
