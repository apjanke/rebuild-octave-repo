# HG changeset patch
# User Michael Goffioul <michael.goffioul@gmail.com>
# Date 1369359711 14400
#      Thu May 23 21:41:51 2013 -0400
# Branch classdef
# Node ID 665fa0f621cc2d5c20a4f9617ed5fa119fce8c87
# Parent  2823f8e3da771d159b5c2921ff2ebfc076f4577e
Support combination of object array extension and multi-level indexing.

* libinterp/octave-value/ov-classdef.h
(octave_classdef::subsref(string, list<octave_value_list, bool)): New
method.
(cdef_object_array:subsref, cdef_object_scalar::subsref,
cdef_object_rep): Add boolean argument "auto_add".
(cdef_object_array::fill_empty_values(Array&)): New method.
(cdef_object_array::fill_empty_values()): Rewrite using the overload.
(cdef_object::subsasgn, cdef_object::make_unique): New boolean argument
"ignore_copies" for assignment optimization.

* libinterp/octave-value/ov-classdef.cc
(octave_classdef::subsref(string, list<octave_value_list, bool)): New
method.
(cdef_object_array::fill_empty_values()): Move implementation to the
overload version.
(cdef_object_array::subsasgn): Optimize assignment to avoir unnecessary
copies of value objects.
(cdef_object_array::subsref): New auto_add argument for automatic
extension of the array.
(cdef_object_scalar::subsref): New auto_add argument. Implement
(-indexing by delegating to a new array object.

diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -770,16 +770,38 @@ octave_classdef::subsref (const std::str
       if (type.length () > skip && idx.size () > skip)
 	retval = retval(0).next_subsref (nargout, type, idx, skip);
     }
 
   return retval;
 }
 
 octave_value
+octave_classdef::subsref (const std::string& type,
+                          const std::list<octave_value_list>& idx,
+                          bool auto_add)
+{
+  size_t skip = 0;
+  octave_value_list retval;
+
+  // FIXME: should check "subsref" method first
+  // ? not sure this still applied with auto_add version of subsref
+
+  retval = object.subsref (type, idx, 1, skip, cdef_class (), auto_add);
+
+  if (! error_state)
+    {
+      if (type.length () > skip && idx.size () > skip)
+	retval = retval(0).next_subsref (1, type, idx, skip);
+    }
+
+  return retval.length () > 0 ? retval(0) : octave_value ();
+}
+
+octave_value
 octave_classdef::subsasgn (const std::string& type,
                            const std::list<octave_value_list>& idx,
                            const octave_value& rhs)
 {
   // FIXME: should check "subsasgn" method first
 
   return object.subsasgn (type, idx, rhs);
 }
@@ -1023,17 +1045,17 @@ cdef_object_rep::map_keys (void) const
   
   return string_vector ();
 }
 
 octave_value_list
 cdef_object_scalar::subsref (const std::string& type,
                              const std::list<octave_value_list>& idx,
                              int nargout, size_t& skip,
-                             const cdef_class& context)
+                             const cdef_class& context, bool auto_add)
 {
   skip = 0;
 
   cdef_class cls = (context.ok () ? context : get_class ());
 
   octave_value_list retval;
 
   if (! cls.ok ())
@@ -1091,16 +1113,33 @@ cdef_object_scalar::subsref (const std::
 
                   skip = 1;
 		}
 	      else
 		error ("subsref: unknown method or property: %s", name.c_str ());
 	    }
 	  break;
 	}
+
+    case '(':
+        {
+          refcount++;
+
+          cdef_object this_obj (this);
+
+          Array<cdef_object> arr (dim_vector (1, 1), this_obj);
+
+          cdef_object new_obj = cdef_object (new cdef_object_array (arr));
+
+          new_obj.set_class (get_class ());
+
+          retval = new_obj.subsref (type, idx, nargout, skip, cls, auto_add);
+        }
+      break;
+
     default:
       error ("object cannot be indexed with `%c'", type[0]);
       break;
     }
 
   return retval;
 }
 
@@ -1216,17 +1255,17 @@ cdef_object_scalar::mark_for_constructio
         ctor_list[cls] = supcls_list;
     }
 }
 
 octave_value_list
 cdef_object_array::subsref (const std::string& type,
                             const std::list<octave_value_list>& idx,
                             int /* nargout */, size_t& skip,
-                            const cdef_class& /* context */)
+                            const cdef_class& /* context */, bool auto_add)
 {
   octave_value_list retval;
 
   skip = 1;
 
   switch (type[0])
     {
     case '(':
@@ -1239,20 +1278,27 @@ cdef_object_array::subsref (const std::s
             {
               iv(i) = ival(i).index_vector ();
               if (! error_state)
                 is_scalar = is_scalar && iv(i).is_scalar ();
             }
 
           if (! error_state)
             {
-              Array<cdef_object> ires = array.index (iv);
+              Array<cdef_object> ires = array.index (iv, auto_add);
 
               if (! error_state)
                 {
+                  // If resizing is enabled (auto_add = true), it's possible
+                  // indexing was out-of-bound and the result array contains
+                  // invalid cdef_objects.
+
+                  if (auto_add)
+                    fill_empty_values (ires);
+
                   if (is_scalar)
                     retval(0) = to_ov (ires(0));
                   else
                     {
                       cdef_object array_obj (new cdef_object_array (ires));
 
                       array_obj.set_class (get_class ());
 
@@ -1401,28 +1447,36 @@ cdef_object_array::subsasgn (const std::
               if (a.numel () != 1)
                 error ("subsasgn: invalid indexing for object array "
                        "assignment");
 
               if (! error_state)
                 {
                   cdef_object obj = a(0);
 
+                  int ignore_copies = 0;
+
                   // If the object in 'a' is not valid, this means the index
                   // was out-of-bound and we need to create a new object.
 
                   if (! obj.ok ())
                     obj = get_class ().construct_object (octave_value_list ());
+                  else
+                    // Optimize the subsasgn call to come. There are 2 copies
+                    // that we can safely ignore:
+                    // - 1 in "array"
+                    // - 1 in "a"
+                    ignore_copies = 2;
 
                   std::list<octave_value_list> next_idx (idx);
 
                   next_idx.erase (next_idx.begin ());
 
                   octave_value tmp = obj.subsasgn (type.substr (1), next_idx,
-                                                   rhs);
+                                                   rhs, ignore_copies);
 
                   if (! error_state)
                     {
                       cdef_object robj = to_cdef (tmp);
 
                       if (robj.ok ()
                           && ! robj.is_array ()
                           && robj.get_class () == get_class ())
@@ -1462,39 +1516,39 @@ cdef_object_array::subsasgn (const std::
                class_name ().c_str ());
       break;
     }
 
   return retval;
 }
 
 void
-cdef_object_array::fill_empty_values (void)
+cdef_object_array::fill_empty_values (Array<cdef_object>& arr)
 {
   cdef_class cls = get_class ();
 
   if (! error_state)
     {
       cdef_object obj;
 
-      int n = array.numel ();
+      int n = arr.numel ();
 
       for (int i = 0; ! error_state && i < n; i++)
         {
-          if (! array.xelem (i).ok ())
+          if (! arr.xelem (i).ok ())
             {
               if (! obj.ok ())
                 {
                   obj = cls.construct_object (octave_value_list ());
 
                   if (! error_state)
-                    array.xelem (i) = obj;
+                    arr.xelem (i) = obj;
                 }
               else
-                array.xelem (i) = obj.copy ();
+                arr.xelem (i) = obj.copy ();
             }
         }
     }
 }
   
 bool cdef_object_scalar::is_constructed_for (const cdef_class& cls) const
 {
   return (is_constructed ()
diff --git a/libinterp/octave-value/ov-classdef.h b/libinterp/octave-value/ov-classdef.h
--- a/libinterp/octave-value/ov-classdef.h
+++ b/libinterp/octave-value/ov-classdef.h
@@ -103,17 +103,17 @@ public:
   virtual octave_value get (const std::string&) const
     {
       gripe_invalid_object ("get");
       return octave_value ();
     }
 
   virtual octave_value_list
   subsref (const std::string&, const std::list<octave_value_list>&,
-           int, size_t&, const cdef_class&)
+           int, size_t&, const cdef_class&, bool)
     {
       gripe_invalid_object ("subsref");
       return octave_value_list ();
     }
 
   virtual octave_value
   subsasgn (const std::string&, const std::list<octave_value_list>&,
             const octave_value&)
@@ -251,24 +251,25 @@ public:
   void put (const std::string& pname, const octave_value& val)
     { rep->put (pname, val); }
 
   octave_value get (const std::string& pname) const
     { return rep->get (pname); }
 
   octave_value_list
   subsref (const std::string& type, const std::list<octave_value_list>& idx,
-           int nargout, size_t& skip, const cdef_class& context)
-    { return rep->subsref (type, idx, nargout, skip, context); }
+           int nargout, size_t& skip, const cdef_class& context,
+           bool auto_add = false)
+    { return rep->subsref (type, idx, nargout, skip, context, auto_add); }
 
   octave_value
   subsasgn (const std::string& type, const std::list<octave_value_list>& idx,
-            const octave_value& rhs)
+            const octave_value& rhs, int ignore_copies = 0)
     {
-      make_unique ();
+      make_unique (ignore_copies);
       return rep->subsasgn (type, idx, rhs);
     }
 
   string_vector map_keys (void) const { return rep->map_keys (); }
 
   const cdef_object_rep* get_rep (void) const { return rep; }
 
   bool ok (void) const { return rep->is_valid (); }
@@ -289,19 +290,19 @@ public:
   void mark_as_constructed (const cdef_class& cls)
     { rep->mark_as_constructed (cls); }
 
   bool is (const cdef_object& obj) const { return rep == obj.rep; }
 
 protected:
   cdef_object_rep* get_rep (void) { return rep; }
 
-  void make_unique (void)
+  void make_unique (int ignore_copies)
     {
-      if (rep->refcount > 1)
+      if (rep->refcount > ignore_copies + 1)
         *this = clone ();
     }
 
 private:
   cdef_object_rep *rep;
 };
 
 class
@@ -364,27 +365,30 @@ public:
   bool is_valid (void) const { return true; }
 
   bool is_array (void) const { return true; }
 
   Array<cdef_object> array_value (void) const { return array; }
 
   octave_value_list
   subsref (const std::string& type, const std::list<octave_value_list>& idx,
-           int nargout, size_t& skip, const cdef_class& context);
+           int nargout, size_t& skip, const cdef_class& context,
+           bool auto_add);
 
   octave_value
   subsasgn (const std::string& type, const std::list<octave_value_list>& idx,
             const octave_value& rhs);
 
 private:
   Array<cdef_object> array;
 
 private:
-  void fill_empty_values (void);
+  void fill_empty_values (void) { fill_empty_values (array); }
+
+  void fill_empty_values (Array<cdef_object>& arr);
 
   // Private copying!
   cdef_object_array (const cdef_object_array& obj)
     : cdef_object_base (obj), array (obj.array) { }
 
   // No assignment!
   cdef_object_array& operator = (const cdef_object_array&);
 };
@@ -412,17 +416,18 @@ public:
 	{
 	  error ("get: unknown slot: %s", pname.c_str ());
 	  return octave_value ();
 	}
     }
 
   octave_value_list
   subsref (const std::string& type, const std::list<octave_value_list>& idx,
-           int nargout, size_t& skip, const cdef_class& context);
+           int nargout, size_t& skip, const cdef_class& context,
+           bool auto_add);
 
   octave_value
   subsasgn (const std::string& type, const std::list<octave_value_list>& idx,
             const octave_value& rhs);
 
   void mark_for_construction (const cdef_class&);
 
   bool is_constructed_for (const cdef_class& cls) const;
@@ -1410,16 +1415,20 @@ public:
 
   octave_value subsref (const std::string& type,
 			const std::list<octave_value_list>& idx)
     {
       octave_value_list retval = subsref (type, idx, 1);
       return (retval.length () > 0 ? retval(0) : octave_value ());
     }
 
+  octave_value subsref (const std::string& type,
+			const std::list<octave_value_list>& idx,
+                        bool auto_add);
+
   octave_value subsasgn (const std::string& type,
                          const std::list<octave_value_list>& idx,
                          const octave_value& rhs);
 
   octave_value
   undef_subsasgn (const std::string& type,
                   const std::list<octave_value_list>& idx,
                   const octave_value& rhs);
