# HG changeset patch
# User Max Brister <max@2bass.com>
# Date 1346033179 21600
#      Sun Aug 26 20:06:19 2012 -0600
# Node ID a38d5ed5b3d894aa1812250b926f1490afd790cb
# Parent  c4779a18013441ef37b7c196fa747d1ae7aa8045
dot.cc: Segfault with integers (bug #37199)

diff --git a/libinterp/corefcn/dot.cc b/libinterp/corefcn/dot.cc
--- a/libinterp/corefcn/dot.cc
+++ b/libinterp/corefcn/dot.cc
@@ -210,17 +210,17 @@ but avoids forming a temporary array and
                                                  z.fortran_vec ()));
                       retval = z;
                     }
                 }
               else
                 {
                   // Non-optimized evaluation.
                   octave_value_list tmp;
-                  tmp(1) = args(2);
+                  tmp(1) = dim + 1;
                   tmp(0) = do_binary_op (octave_value::op_el_mul, argx, argy);
                   if (! error_state)
                     {
                       tmp = feval ("sum", tmp, 1);
                       if (! tmp.empty ())
                         retval = tmp(0);
                     }
                 }
@@ -242,16 +242,29 @@ but avoids forming a temporary array and
 %!test
 %! x = [2, 1; 2, 1];
 %! y = [-0.5, 2; 0.5, -2];
 %! assert (dot (x, y), [0 0]);
 
 %!test
 %! x = [1+i, 3-i; 1-i, 3-i];
 %! assert (dot (x, x), [4, 20]);
+
+%!test
+%! x = int8 ([1 2]);
+%! y = int8 ([2 3]);
+%! assert (dot (x, y), 8);
+
+%!test
+%! x = int8 ([1 2; 3 4]);
+%! y = int8 ([5 6; 7 8]);
+%! assert (dot (x, y), [26 44]);
+%! assert (dot (x, y, 2), [17; 53]);
+%! assert (dot (x, y, 3), [5 12; 21 32]);
+
 */
 
 DEFUN (blkmm, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} blkmm (@var{A}, @var{B})\n\
 Compute products of matrix blocks.  The blocks are given as\n\
 2-dimensional subarrays of the arrays @var{A}, @var{B}.\n\
 The size of @var{A} must have the form @code{[m,k,@dots{}]} and\n\
