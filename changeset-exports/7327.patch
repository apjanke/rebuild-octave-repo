# HG changeset patch
# User jwe
# Date 1198100342 0
#      Wed Dec 19 21:39:02 2007 +0000
# Node ID 9af6f0a214ee3088b47bb9541ba22a3bc77bd081
# Parent  fcc6d853df9e180356e59cb8c04e3cf89f6c5ca3
[project @ 2007-12-19 21:39:02 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2007-12-19  Alexander Barth  <barth.alexander@gmail.com>
+	    Peter A. Gustafson  <petegus@umich.edu>
+
+	* scripts/contourc.m: Allow usage of irregular spaced x, y data.
+
 2007-12-19  John W. Eaton  <jwe@octave.org>
 
 	* miscellaneous/edit.m: New function.
 	* miscellaneous/Makefile.in (SOURCES): Add it to the list.
 
 2007-12-19  Michael Goffioul <michael.goffioul@gmail.com>
 
 	* plot/__bar__.m: Handle "basevalue" option.
diff --git a/scripts/plot/contour.m b/scripts/plot/contour.m
--- a/scripts/plot/contour.m
+++ b/scripts/plot/contour.m
@@ -44,17 +44,17 @@
 ## Any markers defined by @var{style} are ignored.
 ##
 ## The optional input and output argument @var{h} allows an axis handle to 
 ## be passed to @code{contour} and the handles to the contour objects to be
 ## returned.
 ## @seealso{contourc, patch, plot}
 ## @end deftypefn
 
-## Author: shaia
+## Author: Shai Ayal <shaiay@users.sourceforge.net>
 
 function [c, h] = contour (varargin)
 
   [xh, varargin] = __plt_get_axis_arg__ ("contour", varargin{:});
 
   oldh = gca ();
   unwind_protect
     axes (xh);
@@ -69,8 +69,14 @@ function [c, h] = contour (varargin)
     h = htmp;
   endif
 
 endfunction
 
 %!demo
 %! [x, y, z] = peaks ();
 %! contour (x, y, z);
+
+%!demo
+%! [th, r] = meshgrid (linspace (0, 2*pi, 64), 0:.05:0.9);
+%! [X, Y] = pol2cart (th, r);
+%! f = ((X + i*Y).^4 - 1).^(1/4);
+%! contour(X, Y, abs(f), 16)
diff --git a/scripts/plot/contourc.m b/scripts/plot/contourc.m
--- a/scripts/plot/contourc.m
+++ b/scripts/plot/contourc.m
@@ -50,30 +50,32 @@
 ##      @result{}   2.0000   2.0000   1.0000   3.0000   1.5000   2.0000
 ##      2.0000   1.0000   2.0000   2.0000   2.0000   1.5000
 ##
 ## @end group
 ## @end example
 ## @seealso{contour}
 ## @end deftypefn
 
-## Author: shaia
+## Author: Shai Ayal <shaiay@users.sourceforge.net>
 
 function [c, lev] = contourc (varargin)
 
   if (nargin == 1)
     vn = 10;
     z = varargin{1};
-    x = 1:size(z,2);
-    y = 1:size(z,1);
+    [nr, nc] = size (z);
+    x = 1:nc;
+    y = 1:nr;
   elseif (nargin == 2)
     vn = varargin{2};
     z = varargin{1};
-    x = 1:size(z,2);
-    y = 1:size(z,1);
+    [nr, nc] = size (z);
+    x = 1:nc;
+    y = 1:nr;
   elseif (nargin == 3)
     vn = 10;
     x = varargin{1};
     y = varargin{2};
     z = varargin{3};
   elseif (nargin == 4)
     vn = varargin{4};
     x = varargin{1};
@@ -84,35 +86,52 @@ function [c, lev] = contourc (varargin)
   endif
 
   if (isscalar (vn))
     vv = linspace (min (z(:)), max (z(:)), vn+2)(2:end-1);
   else
     vv = unique (sort (vn));
   endif
 
-  ## Vectorize the x,y vectors, assuming they are output from meshgrid.
-  if (! isvector (x))
-    x = x(1,:);
-  endif
+  if (isvector (x) && isvector (y))
+    c = __contourc__ (x(:)', y(:)', z, vv);
+  else
+    ## Indexes x,y for the purpose of __contourc__.    
+    ii = 1:size (z,2);
+    jj = 1:size (z,1);
+  
+    ## Now call __contourc__ for the real work...
+    c = __contourc__ (ii, jj, z, vv);
+  
+    ## Map the contour lines from index space (i,j) back 
+    ## to the original grid (x,y)
+    i = 1;
 
-  if (! isvector (y))
-    y = y(:,1);
-  endif
+    while (i < size (c,2))
+      clen = c(2, i);      
+      ind = i + [1 : clen];
 
-  ## Make everyone the right dimensions.
-  if (size (x, 2) == 1)
-    x = x';
+      ci = c(1, ind);
+      cj = c(2,ind);
+
+      ## due to rounding errors some elements of ci and cj
+      ## can fall out of the range of ii and jj and interp2 would
+      ## return NA for those values. 
+      ## The permitted range is enforced here: 
+        
+      ci = max (ci, 1); ci = min (ci, size (z, 2));
+      cj = max (cj, 1); cj = min (cj, size (z, 1));
+        
+      c(1, ind) = interp2 (ii, jj, x, ci, cj);
+      c(2, ind) = interp2 (ii, jj, y, ci, cj);
+      
+      i = i + clen + 1;
+    endwhile
   endif
-  if (size (y, 2) == 1)
-    y = y';
-  endif
-
-  ## Now call __contourc__ for the real work...
-  c = __contourc__ (x, y, z, vv);
+    
   if (nargout == 2)
     lev = vv;
   endif
 
 endfunction
 
 %!demo
 %! x = 0:2;
diff --git a/scripts/plot/contourf.m b/scripts/plot/contourf.m
--- a/scripts/plot/contourf.m
+++ b/scripts/plot/contourf.m
@@ -50,17 +50,17 @@
 ## @example
 ## [x, y, z] = peaks (50);
 ## contourf (x, y, z, -7:9)
 ## @end example
 ## @seealso{contour, contourc, patch}
 ## @end deftypefn
 
 ## Author: Kai Habel <kai.habel@gmx.de>
-## Author: shaia
+## Author: Shai Ayal <shaiay@users.sourceforge.net>
 
 function varargout = contourf (varargin)
 
   [ax, varargin] = __plt_get_axis_arg__ ("contourf", varargin{:});
 
   [X, Y, Z, lvl, patch_props] = parse_args (varargin);
 
   [nr, nc] = size (Z);
@@ -253,8 +253,14 @@ function [X, Y, Z, lvl, patch_props] = p
     endif
   endif
 
 endfunction
 
 %!demo
 %! [x, y, z] = peaks (50);
 %! contourf (x, y, z, -7:9)
+
+%!demo
+%! [th, r] = meshgrid (linspace (0, 2*pi, 64), 0:.05:0.9);
+%! [X, Y] = pol2cart (th, r);
+%! f = ((X + i*Y).^4 - 1).^(1/4);
+%! contourf(X, Y, abs(f), 16)
