# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1235584596 18000
#      Wed Feb 25 12:56:36 2009 -0500
# Node ID fb1c929dbbb71d8fd9d67bd04ff5d90656ec2bbe
# Parent  eea0e1b45ec090fd50726316f3cccd8728b4749a
tests vs. 64-bit indexing

diff --git a/scripts/sparse/spaugment.m b/scripts/sparse/spaugment.m
--- a/scripts/sparse/spaugment.m
+++ b/scripts/sparse/spaugment.m
@@ -82,17 +82,17 @@ function s = spaugment (a, c)
   elseif (!isscalar (c))
     error ("spaugment: c must be a scalar");
   endif
 
   [m, n] = size (a);
   s = [ c * speye(m, m), a; a', sparse(n, n)];
 endfunction
 
-%!test
+%!testif HAVE_UMFPACK
 %! m = 11; n = 10; mn = max(m ,n);
 %! a = spdiags ([ones(mn,1), 10*ones(mn,1), -ones(mn,1)],[-1,0,1], m, n);
 %! x0 = a \ ones (m,1);
 %! s = spaugment (a);
 %! [L, U, P, Q] = lu (s);
 %! x1 = Q * (U \ (L \ (P  * [ones(m,1); zeros(n,1)])));
 %! x1 = x1(end - n + 1 : end);
 %! assert (x1, x0, 1e-6)
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,17 +1,24 @@
+2009-02-25  John W. Eaton  <jwe@octave.org>
+
+	* DLD-FUNCTIONS/rand.cc: Note that the tests for the old random
+	number generator will fail if using 64-bit indexing.
+
 2009-02-25  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/lu.cc (maybe_set_triangular): New function.
 	(Flu): Use it.
 	* DLD-FUNCTIONS/qr.cc (maybe_set_triangular): New function.
 	(Fqr): Use it.
 
 2009-02-25  John W. Eaton  <jwe@octave.org>
 
+	* DLD-FUNCTIONS/chol.cc: Fix tests for missing cholmod.
+
 	* input.cc (get_debug_input): Write debugging location info
 	directly to std::cerr instead of calling message.
 	* pt-eval.cc (tree_evaluator::do_breakpoint): Write debugging
 	location info directly to std::cerr, not octave_stdout.
 
 	* defaults.h.in (OCTAVE_DOC_CACHE_FILE): New macro.
 	* defaults.cc (set_default_doc_cache_file): New function.
 	(install_defaults): Call it.
diff --git a/src/DLD-FUNCTIONS/chol.cc b/src/DLD-FUNCTIONS/chol.cc
--- a/src/DLD-FUNCTIONS/chol.cc
+++ b/src/DLD-FUNCTIONS/chol.cc
@@ -190,17 +190,17 @@ sparse matrices.\n\
 		  if (nargout > 1 || info == 0)
 		    {
 		      retval(1) = fact.P();
 		      if (LLt)
 			retval(0) = fact.L();
 		      else
 			retval(0) = fact.R();
 		    }
-		  else
+p		  else
 		    error ("chol: matrix not positive definite");
 		}
 	    }
 	  else if (arg.is_complex_type ())
 	    {
 	      SparseComplexMatrix m = arg.sparse_complex_matrix_value ();
 
 	      if (! error_state)
@@ -465,26 +465,30 @@ symmetric positive definite matrix @var{
   else
     print_usage ();
 
   return retval;
 }
 
 /*
 
-%!test
+%!shared A, Ainv
 %! A = [2,0.2;0.2,1];
 %! Ainv = inv(A);
+%!test
 %! Ainv1 = cholinv(A);
+%! assert (norm(Ainv-Ainv1),0,1e-10)
+%!testif HAVE_CHOLMOD
 %! Ainv2 = inv(sparse(A));
+%! assert (norm(Ainv-Ainv2),0,1e-10)
+%!testif HAVE_CHOLDMOD
 %! Ainv3 = cholinv(sparse(A));
+%! assert (norm(Ainv-Ainv3),0,1e-10)
+%!testif HAVE_CHOLDMOD
 %! Ainv4 = spcholinv(sparse(A));
-%! assert (norm(Ainv-Ainv1),0,1e-10)
-%! assert (norm(Ainv-Ainv2),0,1e-10)
-%! assert (norm(Ainv-Ainv3),0,1e-10)
 %! assert (norm(Ainv-Ainv4),0,1e-10)
 
 */
 
 DEFUN_DLD (chol2inv, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} chol2inv (@var{u})\n\
 Invert a symmetric, positive definite square matrix from its Cholesky\n\
diff --git a/src/DLD-FUNCTIONS/rand.cc b/src/DLD-FUNCTIONS/rand.cc
--- a/src/DLD-FUNCTIONS/rand.cc
+++ b/src/DLD-FUNCTIONS/rand.cc
@@ -381,16 +381,19 @@ keyword \"state\" should be used to rese
 
   int nargin = args.length ();
 
   retval = do_rand (args, nargin, "rand");
 
   return retval;
 }
 
+// FIXME -- The old generator (selected when "seed" is set) will not
+// work properly if compiled to use 64-bit integers.
+
 /*
 %!test # 'state' can be a scalar
 %! rand('state',12); x = rand(1,4);
 %! rand('state',12); y = rand(1,4);
 %! assert(x,y);
 %!test # 'state' can be a vector
 %! rand('state',[12,13]); x=rand(1,4);
 %! rand('state',[12;13]); y=rand(1,4);
diff --git a/test/ChangeLog b/test/ChangeLog
--- a/test/ChangeLog
+++ b/test/ChangeLog
@@ -1,8 +1,13 @@
+2009-02-25  John W. Eaton  <jwe@octave.org>
+
+	* build_sparse_tests.sh: Note that saving sparse matrices to MAT
+	files fails when using 64-bit indexing.
+
 2009-02-22  John W. Eaton  <jwe@octave.org>
 
 	* build_sparse_tests.sh: Fix diag matrix divide by zero test.
 
 2009-02-18  John W. Eaton  <jwe@octave.org>
 
 	* test_args.m: Don't use assert to test for function handles.
 
diff --git a/test/build_sparse_tests.sh b/test/build_sparse_tests.sh
--- a/test/build_sparse_tests.sh
+++ b/test/build_sparse_tests.sh
@@ -881,16 +881,19 @@ gen_save_tests() {
 %! assert(as_save,sparse(af));
 %!testif HAVE_HDF5 # save hdf5
 %! savefile= tmpnam();
 %! as_save=as; save("-hdf5",savefile,"bf","as_save","af");
 %! clear as_save;
 %! load(savefile,"as_save");
 %! unlink(savefile);
 %! assert(as_save,sparse(af));
+## FIXME -- we should skip (or mark as an expected failure) the test for
+## saving sparse matrices to MAT files when using 64-bit indexing since
+## that is not implemented yet.
 %!test # save matlab
 %! savefile= tmpnam();
 %! as_save=as; save("-mat",savefile,"bf","as_save","af");
 %! clear as_save;
 %! load(savefile,"as_save");
 %! unlink(savefile);
 %! assert(as_save,sparse(af));
 EOF
diff --git a/test/test_io.m b/test/test_io.m
--- a/test/test_io.m
+++ b/test/test_io.m
@@ -13,16 +13,20 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 %% Automatically generated from DejaGNU files
 
+## FIXME -- we should skip (or mark as an expected failure) the test for
+## saving sparse matrices to MAT files when using 64-bit indexing since
+## that is not implemented yet.
+
 %% test/octave.test/io/load-save.m
 %!function [ret, files] = testls (input)
 %!  ## flag a1 global so as to test the storage of global flags
 %!  global a1;
 %!
 %!  ## Input or output, so as to be able to exchange between versions
 %!  if (nargin < 1)
 %!    input = 0;
