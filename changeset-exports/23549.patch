# HG changeset patch
# User Rik <rik@octave.org>
# Date 1496787093 25200
#      Tue Jun 06 15:11:33 2017 -0700
# Node ID c8daadf7543bc356099139d1bb559eaea74742fa
# Parent  05bbca224a147120a978152af0c9332ad405ec71
publish.m: Use Octave coding conventions.

* publish.m: use Octave coding conventions.  Use double quotes for strings
which contain escaped characters such as newlines.  Correct input validation
test when only one option of maxWidth or maxHeight is set.  Rename temporary
file to have extension ".var" rather than ".mat" since it is not a .mat file.

diff --git a/scripts/general/publish.m b/scripts/general/publish.m
--- a/scripts/general/publish.m
+++ b/scripts/general/publish.m
@@ -23,18 +23,18 @@
 ## @deftypefnx {} {} publish (@var{file}, @var{option1}, @var{value1}, @dots{})
 ## @deftypefnx {} {} publish (@var{file}, @var{options})
 ## @deftypefnx {} {@var{output_file} =} publish (@var{file}, @dots{})
 ##
 ## Generate a report from the Octave script file @var{file} in one of several
 ## output formats.
 ##
 ## The generated reports interpret any Publishing Markup in comments, which is
-## explained in detail in the GNU Octave manual.  Assume the following
-## example, using some Publishing Markup, to be the contents of the script file
+## explained in detail in the GNU Octave manual.  Assume the following example,
+## using some Publishing Markup, to be the contents of the script file
 ## @file{pub_example.m}:
 ##
 ## @example
 ## @group
 ## ## Headline title
 ## #
 ## # Some *bold*, _italic_, or |monospaced| Text with
 ## # a <http://www.octave.org link to *GNU Octave*>.
@@ -50,25 +50,25 @@
 ## %
 ## % # Numbered list item 1
 ## % # Numbered list item 2
 ## @end group
 ## @end example
 ##
 ## To publish this script file, type @code{publish ("pub_example.m")}.
 ##
-## With only @var{file} given, a HTML report is generated in a
-## subdirectory @file{html} relative to the current working directory.  The
-## Octave commands are evaluated in a separate context and any figures
-## created while executing the script file are included in the report.  All
-## formatting syntax of @var{file} is treated according to the specified
-## output format and included in the report.
+## With only @var{file} given, a HTML report is generated in a subdirectory
+## @file{html} relative to the current working directory.  The Octave commands
+## are evaluated in a separate context and any figures created while executing
+## the script file are included in the report.  All formatting syntax of
+## @var{file} is treated according to the specified output format and included
+## in the report.
 ##
-## Using @code{publish (@var{file}, @var{output_format})} is equivalent
-## to the function call using a structure
+## Using @code{publish (@var{file}, @var{output_format})} is equivalent to the
+## function call using a structure
 ##
 ## @example
 ## @group
 ## @var{options}.format = @var{output_format};
 ## publish (@var{file}, @var{options})
 ## @end group
 ## @end example
 ##
@@ -77,18 +77,18 @@
 ##
 ## @example
 ## @group
 ## @var{options}.@var{option1} = @var{value1};
 ## publish (@var{file}, @var{options})
 ## @end group
 ## @end example
 ##
-## The structure @var{options} can have the following field names.  If a
-## field name is not specified, the default value is used:
+## The structure @var{options} can have the following field names.  If a field
+## name is not specified, the default value is used:
 ##
 ## @itemize @bullet
 ## @item
 ## @samp{format} --- Output format of the published script file, one of
 ##
 ## @samp{html} (default), @samp{doc}, @samp{latex}, @samp{ppt},
 ## @samp{pdf}, or @samp{xml}.
 ##
@@ -204,18 +204,17 @@ function output_file = publish (file, va
   [file_path, file_name, file_ext] = fileparts (file);
   if (isempty (file_path))
     file_path = pwd;
   endif
   if (exist ([file_name, file_ext]) != 2)
     error (["publish: " file " is not in the load path"]);
   endif
 
-  ## Check file extension and for an Octave script
-
+  ## Check file extension and that file is an Octave script
   file_info = __which__ (file_name);
   if (! strcmp (file_ext, ".m") || ! strcmp (file_info.type, "script"))
     error ("publish: only script files can be published");
   endif
 
   ## Check file to be parsable
   __parse_file__ (file);
 
@@ -248,22 +247,22 @@ function output_file = publish (file, va
     ## FIXME: Implement remaining formats
     if (any (strcmpi (options.format, {"doc", "ppt", "xml"})))
       error ('publish: Output format "%s" is not yet supported',
              options.format);
     endif
     ## Supported or custom output format
     supported_formats = {"html", "doc", "latex", "ppt", "xml", "pdf"};
     if (! any (strcmpi (options.format, supported_formats)))
-      ## Check existance of custom formatter
+      ## Check existence of custom formatter
       custom_formatter = ["__publish_", options.format, "_output__"];
       if (! exist (custom_formatter, "file"))
         error (['publish: Custom output format "%s" requires the ', ...
-                'formatter function:\n\n\t%s\n\n', ...
-                '\tSee "help publish" for more information.'],
+                "formatter function:\n\n\t%s\n\n\t", ...
+                'See "help publish" for more information.'],
                 options.format, custom_formatter);
       endif
     else
       options.format = validatestring (options.format, supported_formats);
     endif
   endif
 
   if (! isfield (options, "outputDir"))
@@ -420,17 +419,17 @@ function doc = parse_m_source (doc)
 
   if (isempty (doc.m_source))
     return;  # Nothing to parse
   endif
 
   ## Parsing helper functions
   ##
   ## Checks line to have N "%" or "#" lines
-  ## followed either by a space or is end of string
+  ## followed either by a space or end of string
   is_publish_markup = @(cstr, N) ...
     any (strncmp (char (cstr), {"%%%", "##"}, N)) ...
     && ((length (char (cstr)) == N) || ((char (cstr))(N + 1) == " "));
   ## Checks line of cellstring to be a paragraph line
   is_paragraph = @(cstr) is_publish_markup (cstr, 1);
   ## Checks line of cellstring to be a section headline
   is_head = @(cstr) is_publish_markup (cstr, 2);
   ## Checks line of cellstring to be a headline without section break, using
@@ -609,28 +608,28 @@ function p_content = parse_paragraph_con
       p_content{end}.content = strjoin (block, "\n");
       continue;
     endif
 
     ## Bulleted list starts with "* "
     if (strncmp (block{1}, "* ", 2))
       p_content{end+1}.type = "bulleted_list";
       tmpstr = strjoin (block, "\n");
-      ## Revove first "* "
+      ## Remove first "* "
       tmpstr = tmpstr(3:end);
       ## Split items
       p_content{end}.content = strsplit (tmpstr, "\n* ");
       continue;
     endif
 
     ## Numbered list starts with "# "
     if (strncmp (block{1}, "# ", 2))
       p_content{end+1}.type = "numbered_list";
       tmpstr = strjoin (block, "\n");
-      ## Revove first "# "
+      ## Remove first "# "
       tmpstr = tmpstr(3:end);
       ## Split items
       p_content{end}.content = strsplit (tmpstr, "\n# ");
       continue;
     endif
 
     ## Include <include>fname.m</include>
     if (! isempty (fname = regexpi (strjoin (block, ""),
@@ -660,32 +659,32 @@ function p_content = parse_paragraph_con
       if (strcmpi (block{j}, "<html>"))
         start_html = j + 1;
         while (j < numel (block) && ! strcmpi (block{j}, "</html>"))
           j++;
         endwhile
         if (j == numel (block) && ! strcmpi (block{j}, "</html>"))
           warning ("publish: no closing </html> found");
         else
-          j++;  ## Skip closing tag
+          j++;  # Skip closing tag
         endif
         if (j > start_html)
           p_content{end+1}.type = "html";
           p_content{end}.content = strjoin (block(start_html:j-2), "\n");
         endif
       ## LaTeX markup
       elseif (strcmpi (block{j}, "<latex>"))
         start_latex = j + 1;
         while (j < numel (block) && ! strcmpi (block{j}, "</latex>"))
           j++;
         endwhile
         if (j == numel (block) && ! strcmpi (block{j}, "</latex>"))
           warning ("publish: no closing </latex> found");
         else
-          j++;  ## Skip closing tag
+          j++;  # Skip closing tag
         endif
         if (j > start_latex)
           p_content{end+1}.type = "latex";
           p_content{end}.content = strjoin (block(start_latex:j-2), "\n");
         endif
       ## Remaining normal text or markups belonging to normal text
       ## that are handled while output generation:
       ##
@@ -705,17 +704,17 @@ function p_content = parse_paragraph_con
         j++;
       endif
     endwhile
   endfor
 endfunction
 
 
 function m_source = read_file_to_cellstr (file)
-  ## READ_FILE_TO_CELLSTR reads a given file line by line to a cellstring
+  ## READ_FILE_TO_CELLSTR reads a given file line by line into a cellstring
 
   fid = fopen (file, "r");
   i = 0;
   do
     m_source{++i} = fgetl (fid);
   until (! ischar (m_source{i}))
   fclose (fid);
   m_source = m_source(1:end-1);  # No EOL
@@ -850,17 +849,17 @@ function str = format_text (str, formatt
         case 1
           ## Links "<http://www.someurl.com>"
           url = cstr{j};
           cstr{j} = formatter ("link", url(2:end-1), url(2:end-1));
         case 2
           ## Links "<octave:Function TEXT>"
           idx = strfind (cstr{j}, " ");
           url = cstr{j};
-          url = texinfo_esc(url(9:idx-1));
+          url = texinfo_esc (url(9:idx-1));
           v = version ();
           if (v(end) == '+')
             v = "interpreter";
           endif
           url = sprintf ( ...
             "https://www.gnu.org/software/octave/doc/%s/XREF%s.html", v, url);
           txt = cstr{j};
           txt = format_text (txt(idx+1:end-1), formatter);
@@ -916,18 +915,18 @@ function doc = eval_code (doc, options)
   page_screen_output (false, "local");
 
   ## Remember previously opened figures
   fig_ids = findall (0, "type", "figure");
   [~, fig_name] = fileparts (doc.m_source_file_name);
   fig_num = 1;
   fig_list = struct ();
 
-  ## mat-file used as temporary context
-  tmp_context = [tempname(), ".mat"];
+  ## File used as temporary context
+  tmp_context = [tempname() ".var"];
 
   ## Evaluate code, that does not appear in the output.
   eval_code_helper (tmp_context, options.codeToEvaluate);
 
   ## Create a new figure, if there are existing plots
   if (! isempty (fig_ids) && options.useNewFigure)
     figure ();
   endif
@@ -936,17 +935,17 @@ function doc = eval_code (doc, options)
     if (strcmp (doc.body{i}.type, "code"))
       r = doc.body{i}.lines;
       code_str = strjoin (doc.m_source(r(1):r(2)), "\n");
       if (options.catchError)
         try
           doc.body{i}.output = eval_code_helper (tmp_context, code_str);
          catch err
           doc.body{i}.output = cellstr (["error: ", err.message, ...
-                                                "\n\tin:\n\n", code_str]);
+                                                 "\n\tin:\n\n", code_str]);
         end_try_catch
       else
         doc.body{i}.output = eval_code_helper (tmp_context, code_str);
       endif
 
       ## Check for newly created figures ...
       fig_ids_new = setdiff (findall (0, "type", "figure"), fig_ids);
       ## ... and save them
@@ -960,21 +959,21 @@ function doc = eval_code (doc, options)
           fname = [fname ".eps"];
         else
           fname = [fname "." options.imageFormat];
         endif
         print_opts = {fig_ids_new(j), ...
                       fullfile(options.outputDir, fname), ...
                       ["-d" options.imageFormat], "-color"};
         if (! isempty (options.maxWidth) && ! isempty (options.maxHeight))
-          print_opts{end+1} = sprintf("-S%d,%d", options.maxWidth,
-                                                 options.maxHeight);
-        elseif (! isempty (options.maxWidth) || ! isempty (options.maxWidth))
+          print_opts{end+1} = sprintf ("-S%d,%d", options.maxWidth,
+                                                  options.maxHeight);
+        elseif (! isempty (options.maxWidth) || ! isempty (options.maxHeight))
           warning (["publish: specify both options.maxWidth ", ...
-                              "and options.maxWidth"]);
+                              "and options.maxHeight"]);
         endif
         print (print_opts{:});
         fig_num++;
         delete (fig_ids_new(j));
         fig_elem = cell ();
         fig_elem{1} = struct ("type", "graphic", "content", fname);
         if (isfield (fig_list, num2str (i)))
           fig_elem = [getfield(fig_list, sprintf ("%d", i)), fig_elem];
@@ -1016,16 +1015,17 @@ endfunction
 
 
 function ___cstr___ = eval_code_helper (___context___, ___code___)
   ## EVAL_CODE_HELPER evaluates a given string with Octave code in an extra
   ## temporary context and returns a cellstring with the eval output.
 
   ## FIXME: code may contain potential conflicting variables named ___code___,
   ## ___context___, or ___cstr___.  Is there a better solution?
+
   if (isempty (___code___))
     return;
   endif
 
   if (exist (___context___, "file") == 2)
     load (___context___);
   endif
 
