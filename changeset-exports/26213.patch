# HG changeset patch
# User Rik <rik@octave.org>
# Date 1544664128 28800
#      Wed Dec 12 17:22:08 2018 -0800
# Node ID ff0eadb417ec2886a8ff280c0c175f33351ef933
# Parent  2be1833a93a54d520eb3ff089a44dc8e8fb10179
Add BIST tests to sparse.cc (patch #9011).

* sparse.cc (Fissparse, Fspalloc): Add BIST tests for functions.
* sparse.cc (Fsparse): Add single assert to mark function as tested.
Real tests are in test/sparse.tst.

diff --git a/libinterp/corefcn/sparse.cc b/libinterp/corefcn/sparse.cc
--- a/libinterp/corefcn/sparse.cc
+++ b/libinterp/corefcn/sparse.cc
@@ -49,16 +49,37 @@ Return true if @var{x} is a sparse matri
 @end deftypefn */)
 {
   if (args.length () != 1)
     print_usage ();
 
   return ovl (args(0).issparse ());
 }
 
+/*
+%!assert (issparse (sparse (1)), true)
+%!assert (issparse (1), false)
+%!assert (issparse (sparse (false)), true)
+%!assert (issparse (true), false)
+%!assert (issparse (sparse (single ([1 2]))), true)
+%!assert (issparse (single ([1, 2])), false)
+%!assert (issparse (sparse ([1+i, 2]')), true)
+%!assert (issparse ([1+i, 2]'), false)
+
+%!assert (issparse ([]), false)
+%!assert (issparse (sparse([])), true)
+%!assert (issparse ("test"), false)
+%!assert (issparse (struct ("one", {1})), false)
+%!assert (issparse (cell (1)), false)
+
+## Test input validation
+%!error issparse ()
+%!error issparse (1,2)
+*/
+
 DEFUN (sparse, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {@var{s} =} sparse (@var{a})
 @deftypefnx {} {@var{s} =} sparse (@var{i}, @var{j}, @var{sv}, @var{m}, @var{n})
 @deftypefnx {} {@var{s} =} sparse (@var{i}, @var{j}, @var{sv})
 @deftypefnx {} {@var{s} =} sparse (@var{m}, @var{n})
 @deftypefnx {} {@var{s} =} sparse (@var{i}, @var{j}, @var{s}, @var{m}, @var{n}, "unique")
 @deftypefnx {} {@var{s} =} sparse (@var{i}, @var{j}, @var{sv}, @var{m}, @var{n}, @var{nzmax})
@@ -148,20 +169,20 @@ Compressed Column Sparse (rows = 3, cols
     }
   else if (nargin == 2)
     {
       octave_idx_type m = 0;
       octave_idx_type n = 0;
 
       octave::get_dimensions (args(0), args(1), "sparse", m, n);
 
-      if (m >= 0 && n >= 0)
-        retval = SparseMatrix (m, n);
-      else
+      if (m < 0 || n < 0)
         error ("sparse: dimensions must be non-negative");
+
+      retval = SparseMatrix (m, n);
     }
   else if (nargin >= 3)
     {
       bool summation = true;
       if (nargin > 3 && args(nargin-1).is_string ())
         {
           std::string opt = args(nargin-1).string_value ();
           if (opt == "unique")
@@ -215,16 +236,21 @@ Compressed Column Sparse (rows = 3, cols
           e.set_pos_if_unset (2, k+1);
           throw;
         }
     }
 
   return retval;
 }
 
+/*
+## Tests for sparse constructor are in test/sparse.tst
+%!assert (1);
+*/
+
 DEFUN (spalloc, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {@var{s} =} spalloc (@var{m}, @var{n}, @var{nz})
 Create an @var{m}-by-@var{n} sparse matrix with pre-allocated space for at
 most @var{nz} nonzero elements.
 
 This is useful for building a matrix incrementally by a sequence of indexed
 assignments.  Subsequent indexed assignments after @code{spalloc} will reuse
@@ -265,13 +291,33 @@ the function @code{nzmax}.
 
   octave_idx_type m = args(0).idx_type_value ();
   octave_idx_type n = args(1).idx_type_value ();
 
   octave_idx_type nz = 0;
   if (nargin == 3)
     nz = args(2).idx_type_value ();
 
-  if (m >= 0 && n >= 0 && nz >= 0)
-    return ovl (SparseMatrix (dim_vector (m, n), nz));
-  else
-    error ("spalloc: M,N,NZ must be non-negative");
+  if (m < 0 || n < 0 || nz < 0)
+    error ("spalloc: M, N, and NZ must be non-negative");
+
+  return ovl (SparseMatrix (dim_vector (m, n), nz));
 }
+
+/*
+%!assert (issparse (spalloc (1,1)))
+%!assert (spalloc (1,1), sparse (1,1))
+%!test
+%! s = spalloc (1,1,5);
+%! assert (s, sparse (1,1));
+%! assert (nzmax (s), 5);
+%!assert (spalloc (1,2), sparse (1,2))
+%!assert (spalloc (1,2,2), sparse (1,2))
+%!assert (spalloc (2,1), sparse (2,1))
+%!assert (spalloc (2,1,2), sparse (2,1))
+
+%!error spalloc ()
+%!error spalloc (1)
+%!error spalloc (1,2,3,4)
+%!error <M, N, and NZ must be non-negative> spalloc (-1, 1, 1)
+%!error <M, N, and NZ must be non-negative> spalloc (1, -1, 1)
+%!error <M, N, and NZ must be non-negative> spalloc (1, 1, -1)
+*/
