# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1518295522 18000
#      Sat Feb 10 15:45:22 2018 -0500
# Node ID edef866fba7b116ce6f6846f5a3d575ac8ce3c00
# Parent  fa60be0abc21f5a4cbfda6ece7bed81de3e03cb2
* gl-render.cc: Fix compilation error when HAVE_OPENGL is not defined.

diff --git a/libinterp/corefcn/gl-render.cc b/libinterp/corefcn/gl-render.cc
--- a/libinterp/corefcn/gl-render.cc
+++ b/libinterp/corefcn/gl-render.cc
@@ -35,20 +35,20 @@ along with Octave; see the file COPYING.
 #include "oct-locbuf.h"
 #include "oct-refcount.h"
 
 #include "errwarn.h"
 #include "gl-render.h"
 #include "oct-opengl.h"
 #include "text-renderer.h"
 
-#if defined (HAVE_OPENGL)
-
 namespace octave
 {
+#if defined (HAVE_OPENGL)
+
   static int
   next_power_of_2 (int n)
   {
     int m = 1;
 
     while (m < n && m < std::numeric_limits<int>::max ())
       m <<= 1;
 
@@ -584,39 +584,16 @@ namespace octave
   class
   opengl_renderer::patch_tesselator
   {
     // Dummy class.
   };
 
 #endif
 
-#if defined (HAVE_OPENGL)
-
-  static int
-  get_maxlights (void)
-  {
-    static int max_lights = 0;
-
-    // Check actual maximum number of lights possible
-    if (max_lights == 0)
-      {
-        for (max_lights = 0; max_lights < GL_MAX_LIGHTS; max_lights++)
-          {
-            glDisable (GL_LIGHT0 + max_lights);
-            if (glGetError ())
-              break;
-          }
-      }
-
-    return max_lights;
-  }
-
-#endif
-
   opengl_renderer::opengl_renderer (void)
     : toolkit (), xform (), xmin (), xmax (), ymin (), ymax (),
       zmin (), zmax (), xZ1 (), xZ2 (), marker_id (), filled_marker_id (),
       camera_pos (), camera_dir (), interpreter ("none"), txt_renderer (),
       selecting (false)
   {
     // This constructor will fail if we don't have OpenGL or if the data
     // types we assumed in our public interface aren't compatible with the
@@ -1991,16 +1968,39 @@ namespace octave
     // This shouldn't happen because construction of opengl_renderer
     // objects is supposed to be impossible if OpenGL is not available.
 
     panic_impossible ();
 
 #endif
   }
 
+#if defined (HAVE_OPENGL)
+
+  static int
+  get_maxlights (void)
+  {
+    static int max_lights = 0;
+
+    // Check actual maximum number of lights possible
+    if (max_lights == 0)
+      {
+        for (max_lights = 0; max_lights < GL_MAX_LIGHTS; max_lights++)
+          {
+            glDisable (GL_LIGHT0 + max_lights);
+            if (glGetError ())
+              break;
+          }
+      }
+
+    return max_lights;
+  }
+
+#endif
+
   void
   opengl_renderer::draw_axes_children (const axes::properties& props)
   {
 #if defined (HAVE_OPENGL)
     // list for non-light child objects
     std::list<graphics_object> obj_list;
     std::list<graphics_object>::iterator it;
 
