# HG changeset patch
# User Rik <rik@octave.org>
# Date 1489680141 25200
#      Thu Mar 16 09:02:21 2017 -0700
# Node ID 7a06a1a5a12ba7ed248afb5eaf00216e2f794acc
# Parent  aed81b364903be7c0c20d53ee4a0e9480fadd49d
Clean up implementation of eps (bug #50561).

* data.cc: Use Octave abs() member function on input.  Remove call to fabs()
function to take absolute value.  Use xelem() for fast access to Array member.
Rename variable "expon" to "exponent" for clarity.

diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -4480,64 +4480,61 @@ matrix dimensions.  The optional argumen
 type and may be either @qcode{"double"} or @qcode{"single"}.
 @seealso{realmax, realmin, intmax, flintmax}
 @end deftypefn */)
 {
   octave_value retval;
 
   if (args.length () == 1 && ! args(0).is_string ())
     {
-      octave_value arg0 = args(0);
-
-      if (arg0.is_complex_type ())
-        arg0 = arg0.abs ();
+      octave_value arg0 = args(0).abs ();
 
       if (arg0.is_single_type ())
         {
           Array<float> x = arg0.float_array_value ();
 
           Array<float> epsval (x.dims ());
 
           for (octave_idx_type i = 0; i < x.numel (); i++)
             {
-              float val = ::fabsf (x(i));
+              float val = x.xelem (i);
               if (octave::math::isnan (val) || octave::math::isinf (val))
                 epsval(i) = lo_ieee_nan_value ();
               else if (val < std::numeric_limits<float>::min ())
                 epsval(i) = powf (2.0, -149e0);
               else
                 {
-                  int expon;
-                  octave::math::frexp (val, &expon);
+                  int exponent;
+                  octave::math::frexp (val, &exponent);
                   epsval(i) = std::pow (2.0f,
-                                        static_cast<float> (expon - 24));
+                                        static_cast<float> (exponent - 24));
                 }
             }
 
           retval = epsval;
         }
       else
         {
           Array<double> x = arg0.array_value ();
 
           Array<double> epsval (x.dims ());
 
           for (octave_idx_type i = 0; i < x.numel (); i++)
             {
-              double val = ::fabs (x(i));
+              double val = x.xelem (i);
               if (octave::math::isnan (val) || octave::math::isinf (val))
                 epsval(i) = lo_ieee_nan_value ();
               else if (val < std::numeric_limits<double>::min ())
                 epsval(i) = pow (2.0, -1074e0);
               else
                 {
-                  int expon;
-                  octave::math::frexp (val, &expon);
+                  int exponent;
+                  octave::math::frexp (val, &exponent);
                   epsval(i) = std::pow (2.0,
-                                        static_cast<double> (expon - 53));
+                                        static_cast<double> (exponent - 53));
                 }
             }
 
           retval = epsval;
         }
     }
   else
     retval = fill_matrix (args, std::numeric_limits<double>::epsilon (),
