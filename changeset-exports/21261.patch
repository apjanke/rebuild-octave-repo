# HG changeset patch
# User Lachlan <lachlanbis@gmail.com>
# Date 1453783941 -39600
#      Tue Jan 26 15:52:21 2016 +1100
# Node ID f982cfe3df03b8348f26d6cf06dd5fc230643c93
# Parent  e5cf0a9df3a2b94bcef7426882659f89ee929a84
When concatenating cells, suppress empty matrices (bug #43511).

* pt-mat.cc (cellify): Replace [] by {}, not by {[]}.

* __patch__.m: Change concatenation to guarantee reproducibility.

diff --git a/libinterp/parse-tree/pt-mat.cc b/libinterp/parse-tree/pt-mat.cc
--- a/libinterp/parse-tree/pt-mat.cc
+++ b/libinterp/parse-tree/pt-mat.cc
@@ -422,17 +422,20 @@ tm_row_const::tm_row_const_rep::cellify 
   for (iterator p = begin (); p != end (); p++)
     {
       octave_quit ();
 
       if (! p->is_cell ())
         {
           elt_changed = true;
 
-          *p = Cell (*p);
+          if (p->is_empty ())
+            *p = Cell ();
+          else
+            *p = Cell (*p);
         }
     }
 
   if (elt_changed)
     {
       bool first_elem = true;
 
       for (iterator p = begin (); p != end (); p++)
@@ -1378,10 +1381,12 @@ The original variable value is restored 
 %! old_val  = string_fill_char ("X");
 %!test
 %! assert (orig_val, old_val);
 %! assert (string_fill_char (), "X");
 %! assert (["these"; "are"; "strings"], ["theseXX"; "areXXXX"; "strings"]);
 %! string_fill_char (orig_val);
 %! assert (string_fill_char (), orig_val);
 
+%!assert ( [ [], {1} ], {1} )
+
 %!error (string_fill_char (1, 2))
 */
diff --git a/scripts/plot/draw/private/__patch__.m b/scripts/plot/draw/private/__patch__.m
--- a/scripts/plot/draw/private/__patch__.m
+++ b/scripts/plot/draw/private/__patch__.m
@@ -37,17 +37,17 @@ function [h, failed] = __patch__ (p, var
   if (isempty (varargin))
     args = varargin;
   elseif (isstruct (varargin{1}))
     if (isfield (varargin{1}, "vertices") && isfield (varargin{1}, "faces"))
       fvs = varargin{1};
       fvc = cell (1, 2*numfields (fvs));
       fvc(1:2:end) = fieldnames (fvs);
       fvc(2:2:end) = struct2cell (fvs);
-      args = [fvc{:}, varargin(2:end)];
+      args = [fvc(:)', varargin(2:end)];
     else
       failed = true;
     endif
   elseif (is_numeric_arg(1))
     if (nargin < 3 || ! is_numeric_arg(2))
       failed = true;
     else
       if (nargin > 4 && all (is_numeric_arg(1:4)))
