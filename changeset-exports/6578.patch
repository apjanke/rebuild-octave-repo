# HG changeset patch
# User jwe
# Date 1177517099 0
#      Wed Apr 25 16:04:59 2007 +0000
# Node ID fbc16fe0e86a37f62c18a35e5cc6c3430a18ff73
# Parent  f72d6d4b735a1dbb9ef0d9e177335f33b85e469b
[project @ 2007-04-25 16:04:59 by jwe]

diff --git a/doc/interpreter/dynamic.txi b/doc/interpreter/dynamic.txi
--- a/doc/interpreter/dynamic.txi
+++ b/doc/interpreter/dynamic.txi
@@ -1,8 +1,20 @@
+@c Copyright (C) 2007 John W. Eaton, David Bateman
+@c This is part of the Octave manual.
+@c For copying conditions, see the file gpl.texi.
+
+@macro examplefile{file}
+@example
+@group
+@verbatiminclude @value{top_srcdir}/examples/\file\
+@end group
+@end example
+@end macro
+
 @node Dynamically Linked Functions
 @appendix Dynamically Linked Functions
 @cindex dynamic-linking
 
 Octave has the possibility of including compiled code as dynamically
 linked extensions and then using these extensions as if they were part
 of Octave itself.  Octave has the option of directly calling C++ code
 through its native oct-file interface or C code through its mex
@@ -74,21 +86,17 @@ will cause Octave to abort.
 
 The basic command to build oct-files is @code{mkoctfile} and it can be
 call from within octave or from the command line.
 
 @DOCSTRING(mkoctfile)
 
 Consider the short example
 
-@example
-@group
-@verbatiminclude @value{top_srcdir}/examples/helloworld.cc
-@end group
-@end example
+@examplefile{helloworld.cc}
 
 This example although short introduces the basics of writing a C++
 function that can be dynamically linked to Octave.  The easiest way to
 make available most of the definitions that might be necessary for an
 oct-file in Octave is to use the @code{#include <octave/oct.h>}
 header.
 
 The macro that defines the entry point into the dynamically loaded
@@ -260,21 +268,17 @@ an external library.
 Operators such an @code{+}, @code{-}, or @code{*} can be used on the
 majority of the above types.  In addition there are a number of methods
 that are of interest only for matrices such as @code{transpose},
 @code{hermitian}, @code{solve}, etc.
 
 The typical way to extract a matrix or array from the input arguments of
 @code{DEFUN_DLD} function is as follows
 
-@example
-@group
-@verbatiminclude @value{top_srcdir}/examples/addtwomatrices.cc
-@end group
-@end example
+@examplefile{addtwomatrices.cc}
 
 To avoid segmentation faults causing Octave to abort, this function
 explicitly checks that there are sufficient arguments available before
 accessing these arguments.  It then obtains two multi-dimensional arrays
 of type @code{NDArray} and adds these together.  Note that the array_value
 method is called without using the @code{is_matrix_type} type, and instead the
 error_state is checked before returning @code{A + B}.  The reason to
 prefer this is that the arguments might be a type that is not an
@@ -323,21 +327,17 @@ listed below.
 @end multitable
 
 @node Character Strings in Oct-Files
 @subsection Character Strings in Oct-Files
 
 In Octave a character string is just a special @code{Array} class.
 Consider the example 
 
-@example
-@group
-@verbatiminclude @value{top_srcdir}/examples/stringdemo.cc
-@end group
-@end example
+@examplefile{stringdemo.cc}
 
 An example of the of the use of this function is
 
 @example
 @group
 s0 = ["First String"; "Second String"];
 [s1,s2] = stringdemo (s0)
 @result{} s1 = Second String
@@ -386,21 +386,17 @@ retval(0) = octave_value (ch, true);
 @node Cell Arrays in Oct-Files
 @subsection Cell Arrays in Oct-Files
 
 Octave's cell type is equally accessible within an oct-files.  A cell
 array is just an array of @code{octave_value}s, and so each element of the cell
 array can then be treated just like any other @code{octave_value}.  A simple
 example is
 
-@example
-@group
-@verbatiminclude @value{top_srcdir}/examples/celldemo.cc
-@end group
-@end example
+@examplefile{celldemo.cc}
 
 Note that cell arrays are used less often in standard oct-files and so
 the @file{Cell.h} header file must be explicitly included.  The rest of this
 example extracts the @code{octave_value}s one by one from the cell array and
 returns be as individual return arguments.  For example consider
 
 @example
 @group
@@ -420,21 +416,17 @@ b3 = test
 
 A structure in Octave is map between a number of fields represented and
 their values.  The Standard Template Library @code{map} class is used,
 with the pair consisting of a @code{std::string} and an octave
 @code{Cell} variable.
 
 A simple example demonstrating the use of structures within oct-files is
 
-@example
-@group
-@verbatiminclude @value{top_srcdir}/examples/structdemo.cc
-@end group
-@end example
+@examplefile{structdemo.cc}
 
 An example of its use is
 
 @example
 @group
 x.a = 1; x.b = "test"; x.c = [1, 2];
 structdemo (x, "b")
 @result{} selected = test
@@ -800,21 +792,17 @@ Global variables allow variables in the 
 accessed.  Global variables can easily be accessed with oct-files using
 the support functions @code{get_global_value} and
 @code{set_global_value}.  @code{get_global_value} takes two arguments,
 the first is a string representing the variable name to obtain.  The
 second argument is a boolean argument specifying what to do in the case
 that no global variable of the desired name is found.  An example of the
 use of these two functions is
 
-@example
-@group
-@verbatiminclude @value{top_srcdir}/examples/globaldemo.cc
-@end group
-@end example
+@examplefile{globaldemo.cc}
 
 An example of its use is
 
 @example
 @group
 global a b
 b = 10;
 globaldemo ("b")
@@ -843,21 +831,17 @@ be passed as one of
 @item Anonymous Function Handle
 @item Inline Function
 @item String
 @end enumerate
 
 The example below demonstrates an example that accepts all four means of
 passing a function to an oct-file.
 
-@example
-@group
-@verbatiminclude @value{top_srcdir}/examples/funcdemo.cc
-@end group
-@end example
+@examplefile{funcdemo.cc}
 
 The first argument to this demonstration is the user supplied function
 and the following arguments are all passed to the user function.
 
 @example
 @group
 funcdemo (@@sin,1)
 @result{} 0.84147
@@ -942,30 +926,22 @@ There is no harm in using @code{F77_XFCN
 Fortran code that is short running and executes a large number of times,
 there is potentially an overhead in doing so.  However, if @code{F77_FCN}
 is used with code that calls @code{XSTOP}, Octave can generate a
 segmentation fault.
 
 An example of the inclusion of a Fortran function in an oct-file is
 given in the following example, where the C++ wrapper is
 
-@example
-@group
-@verbatiminclude @value{top_srcdir}/examples/fortdemo.cc
-@end group
-@end example
+@examplefile{fortdemo.cc}
 
 @noindent
 and the fortran function is
 
-@example
-@group
-@verbatiminclude @value{top_srcdir}/examples/fortsub.f
-@end group
-@end example
+@examplefile{fortsub.f}
 
 This example demonstrates most of the features needed to link to an
 external Fortran function, including passing arrays and strings, as well
 as exception handling.  An example of the behavior of this function is
 
 @example
 @group
 [b, s] = fortdemo (1:3)
@@ -1049,21 +1025,17 @@ allocate any memory that is needed by th
 fortran_vec method or the @code{OCTAVE_LOCAL_BUFFER} macro.
 
 The Octave unwind_protect mechanism (@ref{The unwind_protect Statement})
 can also be used in oct-files.  In conjunction with the exception
 handling of Octave, it is important to enforce that certain code is run
 to allow variables, etc to be restored even if an exception occurs.  An
 example of the use of this mechanism is
 
-@example
-@group
-@verbatiminclude @value{top_srcdir}/examples/unwinddemo.cc
-@end group
-@end example
+@examplefile{unwinddemo.cc}
 
 As can be seen in the example
 
 @example
 @group
 unwinddemo (1, 0)
 @result{} Inf
 1 / 0
@@ -1124,21 +1096,17 @@ products, the use of the command @code{m
 One important difference between the use of mex with other products and
 with Octave is that the header file "matrix.h" is implicitly included
 through the inclusion of "mex.h".  This is to avoid a conflict with the
 Octave file "Matrix.h" with operating systems and compilers that don't
 distinguish between filenames in upper and lower case
 
 Consider the short example
 
-@example
-@group
-@verbatiminclude @value{top_srcdir}/examples/firstmexdemo.c
-@end group
-@end example
+@examplefile{firstmexdemo.c}
 
 This simple example demonstrates the basics of writing a mex-file.
 
 WRITE ME
 
 @node Structures with Mex-Files
 @subsection Structures with Mex-Files
 
