# HG changeset patch
# User jwe
# Date 838244691 0
#      Wed Jul 24 21:44:51 1996 +0000
# Node ID d7592de300ea3816376e75065c659cd423a0e9ab
# Parent  95e511896bf5e836cf3f18045dd4303fb2f3d5d8
[project @ 1996-07-24 21:42:44 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+Wed Jul 24 16:39:16 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* LSODE.cc (do_integrate): Check to make sure that the state and
+	derivative vectors are the same size.
+
 Sun Jul 14 17:30:37 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* dMatrix.cc (Matrix::read, Matrix::write): Convert to use
 	iostreams and handler data format conversions.  Delete old methods
 	that used stdio.
 
 	* data-conv.h, data-conv.cc (oct_data_conv): New class.
 
diff --git a/liboctave/LSODE.cc b/liboctave/LSODE.cc
--- a/liboctave/LSODE.cc
+++ b/liboctave/LSODE.cc
@@ -66,16 +66,18 @@ LSODE::LSODE (void) : ODE (), LSODE_opti
 
   istate = 1;
   itol = 1;
   itask = 1;
   iopt = 0;
 
   liw = 20 + n;
   lrw = 22 + n * (9 + n);
+
+  sanity_checked = 0;
 }
 
 LSODE::LSODE (const ColumnVector& state, double time, const ODEFunc& f)
   : ODE (state, time, f), LSODE_options ()
 {
   n = size ();
 
   stop_time_set = 0;
@@ -86,16 +88,18 @@ LSODE::LSODE (const ColumnVector& state,
 
   istate = 1;
   itol = 1;
   itask = 1;
   iopt = 0;
 
   liw = 20 + n;
   lrw = 22 + n * (9 + n);
+
+  sanity_checked = 0;
 }
 
 void
 LSODE::force_restart (void)
 {
   restart = 1;
 }
 
@@ -111,17 +115,17 @@ LSODE::clear_stop_time (void)
 {
   stop_time_set = 0;
 }
 
 int
 lsode_f (const int& neq, const double& time, double *,
 	 double *deriv, int& ierr) 
 {
-  ColumnVector tmp_deriv (neq);
+  ColumnVector tmp_deriv;
 
   // NOTE: this won't work if LSODE passes copies of the state vector.
   //       In that case we have to create a temporary vector object
   //       and copy.
 
   tmp_deriv = (*user_fun) (*tmp_x, time);
 
   if (tmp_deriv.length () == 0)
@@ -193,16 +197,32 @@ LSODE::do_integrate (double tout)
   // NOTE: this won't work if LSODE passes copies of the state vector.
   //       In that case we have to create a temporary vector object
   //       and copy.
 
   tmp_x = &x;
   user_fun = function ();
   user_jac = jacobian_function ();
 
+  if (! sanity_checked)
+    {
+      ColumnVector xdot = (*user_fun) (x, t);
+
+      if (x.length () != xdot.length ())
+	{
+	  (*current_liboctave_error_handler)
+	    ("lsode: inconsistent sizes for state and derivative vectors");
+
+	  integration_error = 1;
+	  return retval;
+	}
+
+      sanity_checked = 1;
+    }
+
   // Try 5000 steps before giving up.
 
   iwork.elem (5) = 5000;
 
   if (stop_time_set)
     {
       itask = 4;
       rwork.elem (0) = stop_time;
diff --git a/liboctave/LSODE.h b/liboctave/LSODE.h
--- a/liboctave/LSODE.h
+++ b/liboctave/LSODE.h
@@ -160,16 +160,17 @@ private:
   Array<double> rwork;
   int istate;
   int itol;
   int itask;
   int iopt;
   int liw;
   int lrw;
   int working_too_hard;
+  int sanity_checked;
 
   friend int lsode_f (int *neq, double *t, double *y, double *ydot);
 
   friend int lsode_j (int *neq, double *t, double *y, int *ml, int *mu,
 		      double *pd, int *nrowpd);
 };
 
 #endif
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,13 @@
 Wed Jul 24 05:08:07 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* lsode.cc (Flsode): Don't set the return value if an error
+	occurred during integration.
+
 	* file-io.cc (symbols_of_file_io): Redefine values of SEEK_SET,
 	SEEK_CUR, and SEEK_END for Matlab compatibility.
 	* oct-stream.cc (seek): Check for compatible values of ORIGIN arg.
 	Also handle "bof", "cof", and "eof".
 
 Fri Jul 19 15:24:36 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* pt-const.cc: When creating octave_value_reps from ComplexMatrix
diff --git a/src/lsode.cc b/src/lsode.cc
--- a/src/lsode.cc
+++ b/src/lsode.cc
@@ -159,18 +159,22 @@ where xdot and x are vectors and t is a 
   int nstates = state.capacity ();
   Matrix output (nsteps, nstates + 1);
 
   if (crit_times_set)
     output = ode.integrate (out_times, crit_times);
   else
     output = ode.integrate (out_times);
 
-  retval.resize (1);
-  retval(0) = output;
+  if (! error_state)
+    {
+      retval.resize (1);
+      retval(0) = output;
+    }
+
   return retval;
 }
 
 typedef void (LSODE_options::*d_set_opt_mf) (double);
 typedef double (LSODE_options::*d_get_opt_mf) (void);
 
 #define MAX_TOKENS 3
 
