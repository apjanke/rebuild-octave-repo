# HG changeset patch
# User Rik <rik@octave.org>
# Date 1449944887 28800
#      Sat Dec 12 10:28:07 2015 -0800
# Node ID 9fbacc123a9120f860f28783a2474b9363e87291
# Parent  ead4100404180e4b52a180a2120b4b95e54b188f
2015 Code Sprint: svd.cc: use ovl ().

diff --git a/libinterp/corefcn/svd.cc b/libinterp/corefcn/svd.cc
--- a/libinterp/corefcn/svd.cc
+++ b/libinterp/corefcn/svd.cc
@@ -149,46 +149,46 @@ decomposition, eliminating the unnecessa
 
   if (nr == 0 || nc == 0)
     {
       if (isfloat)
         {
           switch (type)
             {
             case SVD::std:
-              retval(2) = FloatDiagMatrix (nc, nc, 1.0f);
-              retval(1) = FloatMatrix (nr, nc);
-              retval(0) = FloatDiagMatrix (nr, nr, 1.0f);
+              retval = ovl (FloatDiagMatrix (nr, nr, 1.0f),
+                            FloatMatrix (nr, nc),
+                            FloatDiagMatrix (nc, nc, 1.0f));
               break;
 
             case SVD::economy:
-              retval(2) = FloatDiagMatrix (0, nc, 1.0f);
-              retval(1) = FloatMatrix (0, 0);
-              retval(0) = FloatDiagMatrix (nr, 0, 1.0f);
+              retval = ovl (FloatDiagMatrix (nr, 0, 1.0f),
+                            FloatMatrix (0, 0),
+                            FloatDiagMatrix (0, nc, 1.0f));
               break;
 
             case SVD::sigma_only: default:
               retval(0) = FloatMatrix (0, 1);
               break;
             }
         }
       else
         {
           switch (type)
             {
             case SVD::std:
-              retval(2) = DiagMatrix (nc, nc, 1.0);
-              retval(1) = Matrix (nr, nc);
-              retval(0) = DiagMatrix (nr, nr, 1.0);
+              retval = ovl (DiagMatrix (nr, nr, 1.0),
+                            Matrix (nr, nc),
+                            DiagMatrix (nc, nc, 1.0));
               break;
 
             case SVD::economy:
-              retval(2) = DiagMatrix (0, nc, 1.0);
-              retval(1) = Matrix (0, 0);
-              retval(0) = DiagMatrix (nr, 0, 1.0);
+              retval = ovl (DiagMatrix (nr, 0, 1.0),
+                            Matrix (0, 0),
+                            DiagMatrix (0, nc, 1.0));
               break;
 
             case SVD::sigma_only: default:
               retval(0) = Matrix (0, 1);
               break;
             }
         }
     }
@@ -205,41 +205,37 @@ decomposition, eliminating the unnecessa
 
               FloatSVD result (tmp, type, driver);
 
               FloatDiagMatrix sigma = result.singular_values ();
 
               if (nargout == 0 || nargout == 1)
                 retval(0) = sigma.extract_diag ();
               else
-                {
-                  retval(2) = result.right_singular_matrix ();
-                  retval(1) = sigma;
-                  retval(0) = result.left_singular_matrix ();
-                }
+                retval = ovl (result.left_singular_matrix (),
+                              sigma,
+                              result.right_singular_matrix ());
             }
           else if (arg.is_complex_type ())
             {
               FloatComplexMatrix ctmp = arg.float_complex_matrix_value ();
 
               if (ctmp.any_element_is_inf_or_nan ())
                 error ("svd: cannot take SVD of matrix containing Inf or NaN values");
 
               FloatComplexSVD result (ctmp, type, driver);
 
               FloatDiagMatrix sigma = result.singular_values ();
 
               if (nargout == 0 || nargout == 1)
                 retval(0) = sigma.extract_diag ();
               else
-                {
-                  retval(2) = result.right_singular_matrix ();
-                  retval(1) = sigma;
-                  retval(0) = result.left_singular_matrix ();
-                }
+                retval = ovl (result.left_singular_matrix (),
+                              sigma,
+                              result.right_singular_matrix ());
             }
         }
       else
         {
           if (arg.is_real_type ())
             {
               Matrix tmp = arg.matrix_value ();
 
@@ -248,41 +244,37 @@ decomposition, eliminating the unnecessa
 
               SVD result (tmp, type, driver);
 
               DiagMatrix sigma = result.singular_values ();
 
               if (nargout == 0 || nargout == 1)
                 retval(0) = sigma.extract_diag ();
               else
-                {
-                  retval(2) = result.right_singular_matrix ();
-                  retval(1) = sigma;
-                  retval(0) = result.left_singular_matrix ();
-                }
+                retval = ovl (result.left_singular_matrix (),
+                              sigma,
+                              result.right_singular_matrix ());
             }
           else if (arg.is_complex_type ())
             {
               ComplexMatrix ctmp = arg.complex_matrix_value ();
 
               if (ctmp.any_element_is_inf_or_nan ())
                 error ("svd: cannot take SVD of matrix containing Inf or NaN values");
 
               ComplexSVD result (ctmp, type, driver);
 
               DiagMatrix sigma = result.singular_values ();
 
               if (nargout == 0 || nargout == 1)
                 retval(0) = sigma.extract_diag ();
               else
-                {
-                  retval(2) = result.right_singular_matrix ();
-                  retval(1) = sigma;
-                  retval(0) = result.left_singular_matrix ();
-                }
+                retval = ovl (result.left_singular_matrix (),
+                              sigma,
+                              result.right_singular_matrix ());
             }
           else
             gripe_wrong_type_arg ("svd", arg);
         }
     }
 
   return retval;
 }
