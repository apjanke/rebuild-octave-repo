# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1228551344 -3600
#      Sat Dec 06 09:15:44 2008 +0100
# Node ID ad8ed668e0a44e97983e2e05b80d3439be50ccb5
# Parent  7d0492aa522d5598b4ee51a57a46b6a3adba5bb2
allow initialized local buffers

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -1910,20 +1910,17 @@ Array<T>::sort (octave_idx_type dim, sor
       for (octave_idx_type j = 0; j < iter; j++)
 	{
 	  lsort.sort (v, ns);
 	  v += ns;
 	}
     }
   else
     {
-      // Don't use OCTAVE_LOCAL_BUFFER here as it doesn't work with bool
-      // on some compilers.
-      Array<T> vi (ns);
-      T *pvi = vi.fortran_vec ();
+      OCTAVE_LOCAL_BUFFER (T, pvi, ns);
 
       for (octave_idx_type j = 0; j < iter; j++) 
 	{
 	   octave_idx_type offset = j;
 	   octave_idx_type offset2 = 0;
 	  while (offset >= stride)
 	    {
 	      offset -= stride;
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,12 @@
+2008-12-06  Jaroslav Hajek  <highegg@gmail.com>
+
+	* oct-locbuf.h (OCTAVE_LOCAL_BUFFER_INIT): New macro.
+
 2008-10-29  Jaroslav Hajek  <highegg@gmail.com>
 
 	* oct-locbuf.h: New header file.
 	* Array-d.cc, Array-f.cc, Array.cc, CMatrix.cc, CNDArray.cc,
 	CSparse.cc, CmplxCHOL.cc, CmplxGEPBAL.cc, MatrixType.cc,
 	Sparse-op-defs.h, Sparse.cc, SparseCmplxLU.cc, SparseCmplxQR.cc,
 	SparseQR.cc, SparsedbleLU.cc, dMatrix.cc, dNDArray.cc, dSparse.cc,
 	data-conv.cc, dbleCHOL.cc, dbleGEPBAL.cc, fCMatrix.cc, fCNDArray.cc,
diff --git a/liboctave/idx-vector.cc b/liboctave/idx-vector.cc
--- a/liboctave/idx-vector.cc
+++ b/liboctave/idx-vector.cc
@@ -29,16 +29,17 @@ along with Octave; see the file COPYING.
 #include <cstdlib>
 
 #include <iostream>
 
 #include "idx-vector.h"
 #include "Array.h"
 #include "Range.h"
 
+#include "oct-locbuf.h"
 #include "lo-error.h"
 #include "lo-mappers.h"
 
 static void
 gripe_invalid_index (void)
 {
   (*current_liboctave_error_handler)
     ("subscript indices must be either positive integers or logicals.");
@@ -497,72 +498,64 @@ idx_vector::is_cont_range (octave_idx_ty
     }
 
   return res;
 }
 
 idx_vector
 idx_vector::complement (octave_idx_type n) const
 {
-
-  bool *left = new bool[n];
-
-  std::fill (left, left + n, true);
+  OCTAVE_LOCAL_BUFFER_INIT (bool, left, n, true);
 
   octave_idx_type cnt = n;
 
   for (octave_idx_type i = 0, len = length (); i < len; i++)
     { 
       octave_idx_type k = xelem (i);
       if (k < n && left[k])
         {
           left[k] = false;
           cnt--;
         }
     }
 
   octave_idx_type len = cnt, *data = new octave_idx_type[len];
   for (octave_idx_type i = 0, j = 0; i < n; i++)
     if (left[i]) data[j++] = i;
-  
-  delete [] left;
 
   return new idx_vector_rep (data, len, 
                              len ? data[len-1]+1 : 0, 
                              dim_vector (1, len), DIRECT);
 }
 
 bool
 idx_vector::is_permutation (octave_idx_type n) const
 {
   bool retval = false;
 
   if (is_colon_equiv (n))
     retval = true;
   else if (length (n) == n && extent(n) == n)
     {
-      bool *left = new bool[n];
-
-      std::fill (left, left + n, true);
+      OCTAVE_LOCAL_BUFFER_INIT (bool, left, n, true);
 
       retval = true;
 
       for (octave_idx_type i = 0, len = length (); i < len; i++)
         { 
           octave_idx_type k = xelem (i);
           if (left[k])
               left[k] = false;
           else
             {
               retval = false;
               break;
             }
         }
 
-      delete [] left;
     }
 
   return retval;
 }
 
 octave_idx_type 
 idx_vector::freeze (octave_idx_type z_len, const char *tag, bool resize_ok)
 {
diff --git a/liboctave/oct-locbuf.h b/liboctave/oct-locbuf.h
--- a/liboctave/oct-locbuf.h
+++ b/liboctave/oct-locbuf.h
@@ -60,22 +60,30 @@ private:
 // octave_local_buffer object, but only one of them will be nonempty.
 
 #define OCTAVE_LOCAL_BUFFER(T, buf, size) \
   const size_t _bufsize_ ## buf = size; \
   const bool _lbufaut_ ## buf = _bufsize_ ## buf * sizeof (T) \
      <= OCTAVE_LOCAL_BUFFER_MAX_STACK_SIZE; \
   T _bufaut_ ## buf [_lbufaut_ ## buf ? _bufsize_ ## buf : 0]; \
   octave_local_buffer<T> _bufheap_ ## buf (!_lbufaut_ ## buf ? _bufsize_ ## buf : 0); \
-  T *buf = _lbufaut_ ## buf ? _bufaut_ ## buf : static_cast<T *> (_bufheap_ ## buf);
+  T *buf = _lbufaut_ ## buf ? _bufaut_ ## buf : static_cast<T *> (_bufheap_ ## buf)
 
 #else
 
 // If we don't have automatic arrays, we simply always use octave_local_buffer.
 
 #define OCTAVE_LOCAL_BUFFER(T, buf, size) \
   octave_local_buffer<T> _buffer_ ## buf (size); \
-  T *buf = _buffer_ ## buf;
+  T *buf = _buffer_ ## buf
 
 #endif 
 
+// Yeah overloading macros would be nice.
+// Note: we use weird variables in the for loop to avoid warnings about
+// shadowed parameters.
+#define OCTAVE_LOCAL_BUFFER_INIT(T, buf, size, value) \
+  OCTAVE_LOCAL_BUFFER(T, buf, size); \
+  for (size_t _buf_iter = 0, _buf_size = size; \
+       _buf_iter < _buf_size; _buf_iter++) buf[_buf_iter] = value
+
 #endif
 
