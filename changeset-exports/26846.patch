# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1551771158 0
#      Tue Mar 05 07:32:38 2019 +0000
# Node ID 4ff25d9b1eec8ec7a16b8e4e1662cd95a41f85e3
# Parent  6322d51c655cca2e68e1d81feae1cbf39f837f56
set default scope in symbol_table find functions instead of fcn_info

* fcn-info.h, fcn-info.cc (fcn_info::find, fcn_info::builtin_find,
fcn_info::find_function): Don't allow search_scope arg to be omitted.
Don't set default value here.

* symtab.cc (symbol_table::builtin_find, symbol_table::find_function,
symbol_table::fcn_table_find): Set default search scope here if
argument is omitted or otherwise undefined.

diff --git a/libinterp/corefcn/fcn-info.cc b/libinterp/corefcn/fcn-info.cc
--- a/libinterp/corefcn/fcn-info.cc
+++ b/libinterp/corefcn/fcn-info.cc
@@ -340,44 +340,44 @@ namespace octave
   //   class constructor
   //   command-line function
   //   autoload function
   //   functions on the load_path (current directory is always first)
   //   package (FIXME: does this belong here?)
   //   built-in function
 
   octave_value
-  fcn_info::fcn_info_rep::find (const octave_value_list& args,
-                                const symbol_scope& scope)
+  fcn_info::fcn_info_rep::find (const symbol_scope& scope,
+                                const octave_value_list& args)
   {
     symbol_scope search_scope
       = (scope
          ? scope : __get_current_scope__("fcn_info::fcn_info_rep::find"));
 
-    octave_value retval = xfind (args, search_scope);
+    octave_value retval = xfind (search_scope, args);
 
     if (retval.is_undefined ())
       {
         // It is possible that the user created a file on the fly since
         // the last prompt or chdir, so try updating the load path and
         // searching again.
 
         load_path& lp = __get_load_path__ ("fcn_info::fcn_info_rep::find");
 
         lp.update ();
 
-        retval = xfind (args, search_scope);
+        retval = xfind (search_scope, args);
       }
 
     return retval;
   }
 
   octave_value
-  fcn_info::fcn_info_rep::xfind (const octave_value_list& args,
-                                 const symbol_scope& search_scope)
+  fcn_info::fcn_info_rep::xfind (const symbol_scope& search_scope,
+                                 const octave_value_list& args)
   {
     octave_user_function *current_fcn
       = search_scope ? search_scope.function () : nullptr;
 
     // Subfunction.  I think it only makes sense to check for
     // subfunctions if we are currently executing a function defined
     // from a .m file.
 
diff --git a/libinterp/corefcn/fcn-info.h b/libinterp/corefcn/fcn-info.h
--- a/libinterp/corefcn/fcn-info.h
+++ b/libinterp/corefcn/fcn-info.h
@@ -75,18 +75,18 @@ namespace octave
       ~fcn_info_rep (void) = default;
 
       octave_value load_private_function (const std::string& dir_name);
 
       octave_value load_class_constructor (void);
 
       octave_value load_class_method (const std::string& dispatch_type);
 
-      octave_value find (const octave_value_list& args,
-                         const symbol_scope& search_scope);
+      octave_value find (const symbol_scope& search_scope,
+                         const octave_value_list& args);
 
       octave_value builtin_find (const symbol_scope& search_scope);
 
       octave_value find_method (const std::string& dispatch_type);
 
       octave_value find_autoload (void);
 
       octave_value find_package (void);
@@ -98,20 +98,20 @@ namespace octave
         return function_on_path.is_defined ();
       }
 
       bool is_package_defined (void) const
       {
         return package.is_defined ();
       }
 
-      octave_value find_function (const octave_value_list& args,
-                                  const symbol_scope& search_scope)
+      octave_value find_function (const symbol_scope& search_scope,
+                                  const octave_value_list& args)
       {
-        return find (args, search_scope);
+        return find (search_scope, args);
       }
 
       void install_cmdline_function (const octave_value& f)
       {
         cmdline_function = f;
       }
 
       void install_local_function (const octave_value& f,
@@ -227,41 +227,41 @@ namespace octave
       octave_value function_on_path;
 
       octave_value package;
 
       octave_value built_in_function;
 
     private:
 
-      octave_value xfind (const octave_value_list& args,
-                          const symbol_scope& search_scope);
+      octave_value xfind (const symbol_scope& search_scope,
+                          const octave_value_list& args);
 
       octave_value x_builtin_find (const symbol_scope& search_scope);
     };
 
   public:
 
     fcn_info (const std::string& nm = "")
       : m_rep (new fcn_info_rep (nm)) { }
 
     fcn_info (const fcn_info&) = default;
 
     fcn_info& operator = (const fcn_info&) = default;
 
     ~fcn_info (void) = default;
 
-    octave_value find (const octave_value_list& args = octave_value_list (),
-                       const symbol_scope& search_scope = symbol_scope ())
+    octave_value find (const symbol_scope& search_scope,
+                       const octave_value_list& args = octave_value_list ())
     {
-      return m_rep->find (args, search_scope);
+      return m_rep->find (search_scope, args);
     }
 
     octave_value
-    builtin_find (const symbol_scope& search_scope = symbol_scope ())
+    builtin_find (const symbol_scope& search_scope)
     {
       return m_rep->builtin_find (search_scope);
     }
 
     octave_value find_method (const std::string& dispatch_type) const
     {
       return m_rep->find_method (dispatch_type);
     }
@@ -293,20 +293,20 @@ namespace octave
     }
 
     bool is_package_defined (void) const
     {
       return m_rep->is_package_defined ();
     }
 
     octave_value
-    find_function (const octave_value_list& args = octave_value_list (),
-                   const symbol_scope& search_scope = symbol_scope ())
+    find_function (const symbol_scope& search_scope,
+                   const octave_value_list& args = octave_value_list ())
     {
-      return m_rep->find_function (args, search_scope);
+      return m_rep->find_function (search_scope, args);
     }
 
     void install_cmdline_function (const octave_value& f)
     {
       m_rep->install_cmdline_function (f);
     }
 
     void install_local_function (const octave_value& f,
diff --git a/libinterp/corefcn/symtab.cc b/libinterp/corefcn/symtab.cc
--- a/libinterp/corefcn/symtab.cc
+++ b/libinterp/corefcn/symtab.cc
@@ -124,24 +124,28 @@ namespace octave
       return octave_value ();
 
     auto p = m_fcn_table.find (name);
 
     return (p != m_fcn_table.end ()
             ? p->second.find_autoload () : octave_value ());
   }
 
-  octave_value symbol_table::builtin_find (const std::string& name,
-                                           const symbol_scope& search_scope)
+  octave_value
+  symbol_table::builtin_find (const std::string& name,
+                              const symbol_scope& search_scope_arg)
   {
     if (name.empty ())
       return octave_value ();
 
     fcn_table_iterator p = m_fcn_table.find (name);
 
+    symbol_scope search_scope
+      = (search_scope_arg ? search_scope_arg : current_scope ());
+
     if (p != m_fcn_table.end ())
       return p->second.builtin_find (search_scope);
     else
       {
         fcn_info finfo (name);
 
         octave_value fcn = finfo.builtin_find (search_scope);
 
@@ -149,44 +153,49 @@ namespace octave
           m_fcn_table[name] = finfo;
 
         return fcn;
       }
 
     return octave_value ();
   }
 
-  octave_value symbol_table::fcn_table_find (const std::string& name,
-                                             const octave_value_list& args,
-                                             const symbol_scope& search_scope)
+  octave_value
+  symbol_table::fcn_table_find (const std::string& name,
+                                const octave_value_list& args,
+                                const symbol_scope& search_scope_arg)
   {
     if (name.empty ())
       return octave_value ();
 
     fcn_table_iterator p = m_fcn_table.find (name);
 
+    symbol_scope search_scope
+      = (search_scope_arg ? search_scope_arg : current_scope ());
+
     if (p != m_fcn_table.end ())
-      return p->second.find (args, search_scope);
+      return p->second.find (search_scope, args);
     else
       {
         fcn_info finfo (name);
 
-        octave_value fcn = finfo.find (args, search_scope);
+        octave_value fcn = finfo.find (search_scope, args);
 
         if (fcn.is_defined ())
           m_fcn_table[name] = finfo;
 
         return fcn;
       }
 
     return octave_value ();
   }
 
-  octave_value symbol_table::find_function (const std::string& name,
-                                            const symbol_scope& search_scope)
+  octave_value
+  symbol_table::find_function (const std::string& name,
+                               const symbol_scope& search_scope_arg)
   {
     if (name.empty ())
       return octave_value ();
 
     if (name[0] == '@')
       {
         size_t pos = name.find_first_of ('/');
 
@@ -194,27 +203,33 @@ namespace octave
           return octave_value ();
 
         std::string method = name.substr (pos+1);
         std::string dispatch_type = name.substr (1, pos-1);
 
         return find_method (method, dispatch_type);
       }
     else
-      return find_function (name, ovl (), search_scope);
+      {
+        symbol_scope search_scope
+          = (search_scope_arg ? search_scope_arg : current_scope ());
+
+        return find_function (name, ovl (), search_scope);
+      }
   }
 
-  octave_value symbol_table::find_function (const std::string& name,
-                                            const octave_value_list& args,
-                                            const symbol_scope& scope_arg)
+  octave_value
+  symbol_table::find_function (const std::string& name,
+                               const octave_value_list& args,
+                               const symbol_scope& search_scope)
   {
     if (name.empty ())
       return octave_value ();
 
-    return fcn_table_find (name, args, scope_arg);
+    return fcn_table_find (name, args, search_scope);
   }
 
   octave_value
   symbol_table::find_user_function (const std::string& name)
   {
     if (name.empty ())
       return octave_value ();
 
