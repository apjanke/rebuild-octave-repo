# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1347462294 14400
#      Wed Sep 12 11:04:54 2012 -0400
# Node ID d6ea3c0f80d8845eb0a6413d26b328854dd27289
# Parent  b135f013679ef6ae7b6b22629f3a5d3a5eff8e69
pass std::string objects by const reference, not value

* octave-event-listener.h, octave-event.cc, octave-event.h,
octave-qt-event-listener.cc, octave-qt-event-listener.h:
In all functions that pass std::string objects around, pass them by
const reference instead of by value.

diff --git a/libgui/src/octave-adapter/octave-event-listener.h b/libgui/src/octave-adapter/octave-event-listener.h
--- a/libgui/src/octave-adapter/octave-event-listener.h
+++ b/libgui/src/octave-adapter/octave-event-listener.h
@@ -26,16 +26,18 @@ along with Octave; see the file COPYING.
 #include <string>
 
 class octave_event_listener
 {
   public:
     octave_event_listener () { }
     virtual ~octave_event_listener () { }
 
-    virtual void current_directory_has_changed (std::string directory) = 0;
+    virtual void
+    current_directory_has_changed (const std::string& directory) = 0;
+
     virtual void about_to_exit () = 0;
 
     virtual void entered_debug_mode () = 0;
     virtual void quit_debug_mode () = 0;
 };
 
 #endif // OCTAVEEVENTLISTENER_H
diff --git a/libgui/src/octave-adapter/octave-event.cc b/libgui/src/octave-adapter/octave-event.cc
--- a/libgui/src/octave-adapter/octave-event.cc
+++ b/libgui/src/octave-adapter/octave-event.cc
@@ -36,23 +36,23 @@ along with Octave; see the file COPYING.
 #include "symtab.h"
 #include "toplev.h"
 
 #include "octave-event.h"
 
 #include <readline/readline.h>
 
 void
-octave_event::call_octave_function (std::string name)
+octave_event::call_octave_function (const std::string& name)
 {
   call_octave_function (name, octave_value_list ());
 }
 
 void
-octave_event::call_octave_function (std::string name,
+octave_event::call_octave_function (const std::string& name,
                                     const octave_value_list& args,
                                     int nargout)
 {
   try
     {
       feval (name, args, nargout);
     } catch (...) { } // Ignore exceptions. Crashes without that.
 }
diff --git a/libgui/src/octave-adapter/octave-event.h b/libgui/src/octave-adapter/octave-event.h
--- a/libgui/src/octave-adapter/octave-event.h
+++ b/libgui/src/octave-adapter/octave-event.h
@@ -68,19 +68,19 @@ class octave_event
     /**
       * Rejects this event. This allows the event observer to react properly
       * onto the event.
       */
     void reject ()
     { _octave_event_observer.event_reject (this); }
 
   protected:
-    void call_octave_function (std::string name);
+    void call_octave_function (const std::string& name);
 
-    void call_octave_function (std::string name,
+    void call_octave_function (const std::string& name,
                                const octave_value_list& args,
                                int nargout = 0);
 
     void finish_readline_event () const;
 
   private:
     octave_event_observer& _octave_event_observer;
 };
@@ -122,33 +122,33 @@ class octave_exit_event : public octave_
 };
 
 /** Implements an octave run file event. */
 class octave_run_file_event : public octave_event
 {
   public:
     /** Creates a new octave_run_file_event. */
     octave_run_file_event (octave_event_observer& o,
-                           std::string file)
+                           const std::string& file)
       : octave_event (o)
     { _file = file; }
 
     bool perform ();
 
   private:
     std::string _file;
 };
 
 /** Implements a change directory event. */
 class octave_change_directory_event : public octave_event
 {
   public:
     /** Creates a new octave_change_directory_event. */
     octave_change_directory_event (octave_event_observer& o,
-                                   std::string directory)
+                                   const std::string& directory)
       : octave_event (o)
     { _directory = directory; }
 
     bool perform ();
 
   private:
     std::string _directory;
 };
@@ -170,33 +170,33 @@ class octave_clear_workspace_event : pub
 };
 
 /** Implements a load workspace event. */
 class octave_load_workspace_event : public octave_event
 {
   public:
     /** Creates a new octave_change_directory_event. */
     octave_load_workspace_event (octave_event_observer& o,
-                                 std::string file)
+                                 const std::string& file)
       : octave_event (o)
     { _file = file; }
 
     bool perform ();
 
   private:
     std::string _file;
 };
 
 /** Implements a save workspace event. */
 class octave_save_workspace_event : public octave_event
 {
   public:
     /** Creates a new octave_change_directory_event. */
     octave_save_workspace_event (octave_event_observer& o,
-                                 std::string file)
+                                 const std::string& file)
       : octave_event (o)
     { _file = file; }
 
     bool perform ();
 
   private:
     std::string _file;
 };
@@ -211,18 +211,18 @@ class octave_clear_history_event : publi
 
   bool perform ();
 };
 
 class octave_add_breakpoint_event : public octave_event
 {
   public:
     octave_add_breakpoint_event (octave_event_observer& o,
-                                 std::string path,
-                                 std::string function_name,
+                                 const std::string& path,
+                                 const std::string& function_name,
                                  int line)
       : octave_event (o)
     {
       _path = path;
       _function_name = function_name;
       _line = line;
     }
 
@@ -248,18 +248,18 @@ class octave_add_breakpoint_event : publ
     std::string _function_name;
     int _line;
 };
 
 class octave_remove_breakpoint_event : public octave_event
 {
   public:
     octave_remove_breakpoint_event (octave_event_observer& o,
-                                    std::string path,
-                                    std::string function_name,
+                                    const std::string& path,
+                                    const std::string& function_name,
                                     int line)
       : octave_event (o)
     {
       _path = path;
       _function_name = function_name;
       _line = line;
     }
 
@@ -285,18 +285,18 @@ class octave_remove_breakpoint_event : p
     std::string _function_name;
     int _line;
 };
 
 class octave_remove_all_breakpoints_event : public octave_event
 {
   public:
     octave_remove_all_breakpoints_event (octave_event_observer& o,
-                                         std::string path,
-                                         std::string function_name)
+                                         const std::string& path,
+                                         const std::string& function_name)
       : octave_event (o)
     {
       _path = path;
       _function_name = function_name;
     }
 
     bool perform ();
 
diff --git a/libgui/src/octave-qt-event-listener.cc b/libgui/src/octave-qt-event-listener.cc
--- a/libgui/src/octave-qt-event-listener.cc
+++ b/libgui/src/octave-qt-event-listener.cc
@@ -28,17 +28,17 @@ along with Octave; see the file COPYING.
 #include <QApplication>
 
 octave_qt_event_listener::octave_qt_event_listener (QObject *parent)
   : QObject (parent), octave_event_listener ()
 {
 }
 
 void
-octave_qt_event_listener::current_directory_has_changed (std::string directory)
+octave_qt_event_listener::current_directory_has_changed (const std::string& directory)
 {
   emit current_directory_has_changed_signal
       (QString::fromStdString (directory));
 }
 
 void
 octave_qt_event_listener::about_to_exit ()
 {
diff --git a/libgui/src/octave-qt-event-listener.h b/libgui/src/octave-qt-event-listener.h
--- a/libgui/src/octave-qt-event-listener.h
+++ b/libgui/src/octave-qt-event-listener.h
@@ -29,17 +29,17 @@ along with Octave; see the file COPYING.
 
 class octave_qt_event_listener
     : public QObject, public octave_event_listener
 {
     Q_OBJECT
   public:
     octave_qt_event_listener (QObject *parent = 0);
 
-    void current_directory_has_changed (std::string directory);
+    void current_directory_has_changed (const std::string& directory);
     void about_to_exit ();
 
     void entered_debug_mode ();
     void quit_debug_mode ();
 
   signals:
     void current_directory_has_changed_signal (const QString& directory);
     void entered_debug_mode_signal ();
