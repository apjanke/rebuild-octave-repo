# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1284318635 -7200
#      Sun Sep 12 21:10:35 2010 +0200
# Node ID 2cc9b08bfd3981a190817e20853a63135ad5fca4
# Parent  409ceee18accef3e68ea1dea64ae6e343723d39e
fixes in binders code

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2010-09-12  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov-fcn-handle.cc (octave_fcn_binder::maybe_binder): Stash name tags
+	in the template.
+	(octave_fcn_binder::do_multi_index_op): Don't use xelem to ensure
+	proper unsharing. Make a shallow copy prior to call to ensure
+	consistency throughout recursive calls.
+
 2010-09-11  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-fcn-handle.h (octave_fcn_binder): New subclass.
 	* ov-fcn-handle.cc: Define methods.
 	* pt-fcn-handle.cc (tree_anon_fcn_handle::rvalue1): Call
 	octave_fcn_binder::maybe_binder.
 
 2010-09-11  John W. Eaton  <jwe@octave.org>
diff --git a/src/ov-fcn-handle.cc b/src/ov-fcn-handle.cc
--- a/src/ov-fcn-handle.cc
+++ b/src/ov-fcn-handle.cc
@@ -1895,16 +1895,21 @@ octave_fcn_binder::maybe_binder (const o
                           if (error_state)
                              bad = true;
                         }
                     }
                 }
 
               if (! bad)
                 {
+                  // Stash proper name tags.
+                  std::list<string_vector> arg_names = idx_expr->arg_names ();
+                  assert (arg_names.size () == 1);
+                  arg_template.stash_name_tags (arg_names.front ());
+
                   retval = new octave_fcn_binder (f, root_val, arg_template, 
                                                   arg_mask, npar);
                 }
             }
         }
     }
 
   if (! retval)
@@ -1928,18 +1933,21 @@ octave_fcn_binder::do_multi_index_op (in
   octave_value_list retval;
 
   if (args.length () == expected_nargin)
     {
       for (int i = 0; i < arg_template.length (); i++)
         {
           int j = arg_mask[i];
           if (j >= 0)
-             arg_template.xelem(i) = args(j);
+             arg_template(i) = args(j); // May force a copy...
         }
 
-      retval = root_handle.do_multi_index_op (nargout, arg_template, lvalue_list);
+      // Make a shallow copy of arg_template, to ensure consistency throughout the following
+      // call even if we happen to get back here.
+      octave_value_list tmp (arg_template);
+      retval = root_handle.do_multi_index_op (nargout, tmp, lvalue_list);
     }
   else
      retval = octave_fcn_handle::do_multi_index_op (nargout, args, lvalue_list);
 
   return retval;
 }
