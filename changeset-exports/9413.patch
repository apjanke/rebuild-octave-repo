# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1246437778 -7200
#      Wed Jul 01 10:42:58 2009 +0200
# Node ID 5cd879a0d8c4500a9450af50b0f25f71258e4c16
# Parent  ddcc0da700b8898d85dcbbee54b50006429e9076
speed-up function call by caching its name lookup

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2009-07-01  Jaroslav Hajek  <highegg@gmail.com>
+
+	* symtab.h (symbol_table::get_fcn_info): New private static method.
+	(symbol_record_rep::finfo): New field.
+	* symtab.cc (symbol_record::find): Use cached finfo if possible,
+	cache on successful queries.
+
 2008-07-01  David Bateman  <dbateman@free.fr>
 	
 	* pr-output.cc (static inline std::string rational_approx (double, 
 	int)): Test for underflow of fractional part of rational approximation
 	earlier in the loop.
 
 2009-07-01  Joe Rothweiler <octaveuser@sensicomm.com>
 
diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -99,27 +99,39 @@ octave_value
 symbol_table::symbol_record::find (tree_argument_list *args,
 				   const string_vector& arg_names,
 				   octave_value_list& evaluated_args,
 				   bool& args_evaluated) const
 {
   octave_value retval;
 
   if (is_global ())
-    return symbol_table::global_varref (name ());
+    retval = symbol_table::global_varref (name ());
   else
     {
-      octave_value val = varval ();
+      retval = varval ();
 
-      if (val.is_defined ())
-	return val;
+      if (retval.is_undefined ())
+        {
+          // Use cached fcn_info pointer if possible.
+          if (rep->finfo)
+            retval = rep->finfo->find (args, arg_names,
+                                       evaluated_args, args_evaluated);
+          else
+            { 
+              retval = symbol_table::find_function (name (), args, arg_names,
+                                                    evaluated_args, args_evaluated);
+
+              if (retval.is_defined ())
+                rep->finfo = get_fcn_info (name ());
+            }
+        }
     }
 
-  return symbol_table::find_function (name (), args, arg_names,
-				      evaluated_args, args_evaluated);
+  return retval;
 }
 
 // Check the load path to see if file that defined this is still
 // visible.  If the file is no longer visible, then erase the
 // definition and move on.  If the file is visible, then we also
 // need to check to see whether the file has changed since the the
 // function was loaded/parsed.  However, this check should only
 // happen once per prompt (for files found from relative path
diff --git a/src/symtab.h b/src/symtab.h
--- a/src/symtab.h
+++ b/src/symtab.h
@@ -150,16 +150,18 @@ public:
 	retval.push_back (*p);
 
       retval.sort ();
 
       return retval;
     }
   };
 
+  class fcn_info;
+
   class
   symbol_record
   {
   public:
 
     // generic variable
     static const unsigned int local = 1;
 
@@ -189,17 +191,17 @@ public:
 
     class
     symbol_record_rep
     {
     public:
 
       symbol_record_rep (const std::string& nm, const octave_value& v,
 			 unsigned int sc)
-	: name (nm), value_stack (), storage_class (sc), count (1)
+	: name (nm), value_stack (), storage_class (sc), finfo (), count (1)
       {
 	value_stack.push_back (v);
       }
 
       void force_variable (context_id context)
       {
 	octave_value& val = varref (context);
 
@@ -367,16 +369,18 @@ public:
       void dump (std::ostream& os, const std::string& prefix) const;
 
       std::string name;
 
       std::deque<octave_value> value_stack;
 
       unsigned int storage_class;
 
+      fcn_info *finfo;
+
       size_t count;
 
     private:
 
       // No copying!
 
       symbol_record_rep (const symbol_record_rep& ov);
 
@@ -1983,16 +1987,22 @@ private:
 
 		    sr.mark_inherited ();
 		  }
 	      }
 	  }
       }
   }
 
+  static fcn_info *get_fcn_info (const std::string& name)
+    {
+      fcn_table_iterator p = fcn_table.find (name);
+      return p != fcn_table.end () ? &p->second : 0;
+    }
+
   octave_value
   do_find (const std::string& name, tree_argument_list *args,
 	   const string_vector& arg_names,
 	   octave_value_list& evaluated_args, bool& args_evaluated,
 	   bool skip_variables);
 
   symbol_record& do_insert (const std::string& name)
   {
