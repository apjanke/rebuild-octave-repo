# HG changeset patch
# User jwe
# Date 1143218564 0
#      Fri Mar 24 16:42:44 2006 +0000
# Node ID edf82d02be754db06e3c33d3545f5195c6c91057
# Parent  24f6a13878c217084ac9b97c80143f79353e354d
[project @ 2006-03-24 16:42:43 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,19 @@
+2006-03-24  John W. Eaton  <jwe@octave.org>
+
+	* ov-cell.h (octave_cell::convert_to_str_internal):
+	Undo previous change for pad arg.
+	* ov-cell.cc (octave_cell::all_strings): Reinstate pad arg, pass
+	it on to all_strings.
+	* ov.h (octave_value::all_strings): Reinstate pad arg.
+	* ov-base.cc (octave_base_value::all_strings): Likewise.
+	* ov-str-mat.cc (octave_char_matrix_str::all_strings): Likewise.
+	* ov.h, ov-base.h, ov-cell.h, ov-str-mat.h: Fix all_strings decls.
+
 2005-10-25  David Bateman  <dbateman@free.fr>
 
         * data.cc (do_cat): With 1 arg, return [](0x0) for compatibility.
 
 2006-03-23  John W. Eaton  <jwe@octave.org>
 
 	* version.h (OCTAVE_VERSION): Now 2.9.5+.
 
diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -592,21 +592,21 @@ octave_base_value::uint64_array_value (v
 {
   uint64NDArray retval;
   gripe_wrong_type_arg ("octave_base_value::uint64_array_value()",
 			type_name ());
   return retval;
 }
 
 string_vector
-octave_base_value::all_strings (void) const
+octave_base_value::all_strings (bool pad) const
 {
   string_vector retval;
 
-  octave_value tmp = convert_to_str (false, true);
+  octave_value tmp = convert_to_str (pad, true);
 
   if (! error_state)
     retval = tmp.all_strings ();
 
   return retval;
 }
 
 std::string
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -260,17 +260,17 @@ public:
   uint8NDArray uint8_array_value (void) const;
 
   uint16NDArray uint16_array_value (void) const;
 
   uint32NDArray uint32_array_value (void) const;
 
   uint64NDArray uint64_array_value (void) const;
 
-  string_vector all_strings (void) const;
+  string_vector all_strings (bool pad = false) const;
 
   std::string string_value (bool force = false) const;
 
   Range range_value (void) const;
 
   Octave_map map_value (void) const;
 
   string_vector map_keys (void) const;
diff --git a/src/ov-cell.cc b/src/ov-cell.cc
--- a/src/ov-cell.cc
+++ b/src/ov-cell.cc
@@ -286,17 +286,17 @@ octave_cell::list_value (void) const
     }
   else
     error ("invalid conversion from cell array to list");
 
   return retval;
 }
 
 string_vector
-octave_cell::all_strings (void) const
+octave_cell::all_strings (bool pad) const
 {
   string_vector retval;
 
   octave_idx_type nr = rows ();
   octave_idx_type nc = columns ();
 
   int n_elts = 0;
 
@@ -328,17 +328,25 @@ octave_cell::all_strings (void) const
     {
       for (octave_idx_type i = 0; i < nr; i++)
 	{
 	  string_vector s = matrix(i,j).all_strings ();
 
 	  int n = s.length ();
 
 	  for (octave_idx_type ii = 0; ii < n; ii++)
-	    retval[k++] = s[ii];
+	    {
+	      std::string t = s[ii];
+	      int t_len = t.length ();
+
+	      if (pad && max_len > t_len)
+		t += std::string (max_len - t_len, ' ');
+
+	      retval[k++] = t;
+	    }
 	}
     }
 
   return retval;
 }
 
 bool
 octave_cell::print_as_scalar (void) const
diff --git a/src/ov-cell.h b/src/ov-cell.h
--- a/src/ov-cell.h
+++ b/src/ov-cell.h
@@ -96,20 +96,20 @@ public:
   bool is_constant (void) const { return false; }
 
   bool is_cell (void) const { return true; }
 
   Cell cell_value (void) const { return matrix; }
 
   octave_value_list list_value (void) const;
 
-  octave_value convert_to_str_internal (bool, bool, char type) const
-    { return octave_value (all_strings (), type); }
+  octave_value convert_to_str_internal (bool pad, bool, char type) const
+    { return octave_value (all_strings (pad), type); }
 
-  string_vector all_strings (void) const;
+  string_vector all_strings (bool pad = false) const;
 
   bool print_as_scalar (void) const;
 
   void print (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
 
diff --git a/src/ov-str-mat.cc b/src/ov-str-mat.cc
--- a/src/ov-str-mat.cc
+++ b/src/ov-str-mat.cc
@@ -205,17 +205,17 @@ octave_char_matrix_str::array_value (boo
 ComplexNDArray
 octave_char_matrix_str::complex_array_value (bool force_string_conv) const
 {
   CHAR_MATRIX_CONV (ComplexNDArray, , "complex N-d array",
 		    complex_array_value);
 }
 
 string_vector
-octave_char_matrix_str::all_strings (void) const
+octave_char_matrix_str::all_strings (bool) const
 {
   string_vector retval;
 
   if (matrix.ndims () == 2)
     {
       charMatrix chm = matrix.matrix_value ();
 
       octave_idx_type n = chm.rows ();
diff --git a/src/ov-str-mat.h b/src/ov-str-mat.h
--- a/src/ov-str-mat.h
+++ b/src/ov-str-mat.h
@@ -120,17 +120,17 @@ public:
   NDArray array_value (bool = false) const;
 
   Complex complex_value (bool = false) const;
 
   ComplexMatrix complex_matrix_value (bool = false) const;
 
   ComplexNDArray complex_array_value (bool = false) const;
 
-  string_vector all_strings (void) const;
+  string_vector all_strings (bool pad = false) const;
 
   std::string string_value (bool force = false) const;
 
   bool print_as_scalar (void) const { return (rows () <= 1); }
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   bool save_ascii (std::ostream& os, bool& infnan_warned,
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -646,18 +646,18 @@ public:
     { return rep->uint16_array_value (); }
 
   virtual uint32NDArray uint32_array_value (void) const
     { return rep->uint32_array_value (); }
 
   virtual uint64NDArray uint64_array_value (void) const
     { return rep->uint64_array_value (); }
 
-  virtual string_vector all_strings (void) const
-    { return rep->all_strings (); }
+  virtual string_vector all_strings (bool pad = false) const
+    { return rep->all_strings (pad); }
 
   virtual std::string string_value (bool force = false) const
     { return rep->string_value (force); }
 
   virtual Range range_value (void) const
     { return rep->range_value (); }
 
   virtual Octave_map map_value (void) const;
