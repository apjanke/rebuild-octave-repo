# HG changeset patch
# User jwe
# Date 823339898 0
#      Sat Feb 03 09:31:38 1996 +0000
# Node ID 5a579fa4492471a5b352090a6c43ae3d475866c0
# Parent  4221a133212e6a99afe1eadd8b23c558fae5625b
[project @ 1996-02-03 09:29:57 by jwe]

diff --git a/src/dassl.cc b/src/dassl.cc
--- a/src/dassl.cc
+++ b/src/dassl.cc
@@ -24,31 +24,31 @@ Software Foundation, 59 Temple Place - S
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <string>
 
 #include <strstream.h>
 
-#include "DAE.h"
+#include "DASSL.h"
 
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
 #include "help.h"
 #include "oct-obj.h"
 #include "pager.h"
 #include "utils.h"
 #include "variables.h"
 
 // Global pointer for user defined function required by dassl.
 static tree_fvc *dassl_fcn;
 
-static ODE_options dassl_opts;
+static DASSL_options dassl_opts;
 
 ColumnVector
 dassl_user_function (const ColumnVector& x, const ColumnVector& xdot, double t)
 {
   ColumnVector retval;
 
   int nstates = x.capacity ();
 
@@ -173,73 +173,73 @@ where x, xdot, and res are vectors, and 
     {
       error ("dassl: x and xdot must have the same size");
       return retval;
     }
 
   double tzero = out_times.elem (0);
 
   DAEFunc func (dassl_user_function);
-  DAE dae (state, deriv, tzero, func);
+  DASSL dae (state, deriv, tzero, func);
   dae.copy (dassl_opts);
 
   Matrix output;
   Matrix deriv_output;
 
   if (crit_times_set)
     output = dae.integrate (out_times, deriv_output, crit_times);
   else
     output = dae.integrate (out_times, deriv_output);
 
   retval.resize (2);
   retval(0) = output;
   retval(1) = deriv_output;
   return retval;
 }
 
-typedef void (ODE_options::*d_set_opt_mf) (double);
-typedef double (ODE_options::*d_get_opt_mf) (void);
+typedef void (DASSL_options::*d_set_opt_mf) (double);
+typedef double (DASSL_options::*d_get_opt_mf) (void);
 
 #define MAX_TOKENS 3
 
-struct DAE_OPTIONS
+struct DASSL_OPTIONS
 {
   const char *keyword;
   const char *kw_tok[MAX_TOKENS + 1];
   int min_len[MAX_TOKENS + 1];
   int min_toks_to_match;
   d_set_opt_mf d_set_fcn;
   d_get_opt_mf d_get_fcn;
 };
 
-static DAE_OPTIONS dassl_option_table [] =
+static DASSL_OPTIONS dassl_option_table [] =
 {
   { "absolute tolerance",
     { "absolute", "tolerance", 0, 0, },
     { 1, 0, 0, 0, }, 1,
-    ODE_options::set_absolute_tolerance,
-    ODE_options::absolute_tolerance, },
+    DASSL_options::set_absolute_tolerance,
+    DASSL_options::absolute_tolerance, },
 
   { "initial step size",
     { "initial", "step", "size", 0, },
     { 1, 0, 0, 0, }, 1,
-    ODE_options::set_initial_step_size,
-    ODE_options::initial_step_size, },
+    DASSL_options::set_initial_step_size,
+    DASSL_options::initial_step_size, },
 
   { "maximum step size",
     { "maximum", "step", "size", 0, },
     { 2, 0, 0, 0, }, 1,
-    ODE_options::set_maximum_step_size,
-    ODE_options::maximum_step_size, },
+    DASSL_options::set_maximum_step_size,
+    DASSL_options::maximum_step_size, },
 
   { "relative tolerance",
     { "relative", "tolerance", 0, 0, },
     { 1, 0, 0, 0, }, 1,
-    ODE_options::set_relative_tolerance,
-    ODE_options::relative_tolerance, },
+    DASSL_options::set_relative_tolerance,
+    DASSL_options::relative_tolerance, },
 
   { 0,
     { 0, 0, 0, 0, },
     { 0, 0, 0, 0, }, 0,
     0, 0, },
 };
 
 static void
@@ -249,17 +249,17 @@ print_dassl_option_list (void)
 
   print_usage ("dassl_options", 1);
 
   output_buf << "\n"
 	     << "Options for dassl include:\n\n"
 	     << "  keyword                                  value\n"
 	     << "  -------                                  -----\n\n";
 
-  DAE_OPTIONS *list = dassl_option_table;
+  DASSL_OPTIONS *list = dassl_option_table;
 
   const char *keyword;
   while ((keyword = list->keyword) != 0)
     {
       output_buf.form ("  %-40s ", keyword);
 
       double val = (dassl_opts.*list->d_get_fcn) ();
       if (val < 0.0)
@@ -273,17 +273,17 @@ print_dassl_option_list (void)
 
   output_buf << "\n" << ends;
   maybe_page_output (output_buf);
 }
 
 static void
 set_dassl_option (const string& keyword, double val)
 {
-  DAE_OPTIONS *list = dassl_option_table;
+  DASSL_OPTIONS *list = dassl_option_table;
 
   while (list->keyword != 0)
     {
       if (keyword_almost_match (list->kw_tok, list->min_len, keyword,
 				list->min_toks_to_match, MAX_TOKENS))
 	{
 	  (dassl_opts.*list->d_set_fcn) (val);
 
@@ -295,17 +295,17 @@ set_dassl_option (const string& keyword,
   warning ("dassl_options: no match for `%s'", keyword.c_str ());
 }
 
 static Octave_object
 show_dassl_option (const string& keyword)
 {
   Octave_object retval;
 
-  DAE_OPTIONS *list = dassl_option_table;
+  DASSL_OPTIONS *list = dassl_option_table;
 
   while (list->keyword != 0)
     {
       if (keyword_almost_match (list->kw_tok, list->min_len, keyword,
 				list->min_toks_to_match, MAX_TOKENS))
 	{
 	  return (dassl_opts.*list->d_get_fcn) ();
 	}
diff --git a/src/lsode.cc b/src/lsode.cc
--- a/src/lsode.cc
+++ b/src/lsode.cc
@@ -24,31 +24,31 @@ Software Foundation, 59 Temple Place - S
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <string>
 
 #include <strstream.h>
 
-#include "ODE.h"
+#include "LSODE.h"
 
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
 #include "help.h"
 #include "oct-obj.h"
 #include "pager.h"
 #include "utils.h"
 #include "variables.h"
 
 // Global pointer for user defined function required by lsode.
 static tree_fvc *lsode_fcn;
 
-static ODE_options lsode_opts;
+static LSODE_options lsode_opts;
 
 ColumnVector
 lsode_user_function (const ColumnVector& x, double t)
 {
   ColumnVector retval;
 
   int nstates = x.capacity ();
 
@@ -149,78 +149,78 @@ where xdot and x are vectors and t is a 
 
       crit_times_set = 1;
     }
 
   double tzero = out_times.elem (0);
   int nsteps = out_times.capacity ();
 
   ODEFunc func (lsode_user_function);
-  ODE ode (state, tzero, func);
+  LSODE ode (state, tzero, func);
   ode.copy (lsode_opts);
 
   int nstates = state.capacity ();
   Matrix output (nsteps, nstates + 1);
 
   if (crit_times_set)
     output = ode.integrate (out_times, crit_times);
   else
     output = ode.integrate (out_times);
 
   retval.resize (1);
   retval(0) = output;
   return retval;
 }
 
-typedef void (ODE_options::*d_set_opt_mf) (double);
-typedef double (ODE_options::*d_get_opt_mf) (void);
+typedef void (LSODE_options::*d_set_opt_mf) (double);
+typedef double (LSODE_options::*d_get_opt_mf) (void);
 
 #define MAX_TOKENS 3
 
-struct ODE_OPTIONS
+struct LSODE_OPTIONS
 {
   const char *keyword;
   const char *kw_tok[MAX_TOKENS + 1];
   int min_len[MAX_TOKENS + 1];
   int min_toks_to_match;
   d_set_opt_mf d_set_fcn;
   d_get_opt_mf d_get_fcn;
 };
 
-static ODE_OPTIONS lsode_option_table [] =
+static LSODE_OPTIONS lsode_option_table [] =
 {
   { "absolute tolerance",
     { "absolute", "tolerance", 0, 0, },
     { 1, 0, 0, 0, }, 1,
-    ODE_options::set_absolute_tolerance,
-    ODE_options::absolute_tolerance, },
+    LSODE_options::set_absolute_tolerance,
+    LSODE_options::absolute_tolerance, },
 
   { "initial step size",
     { "initial", "step", "size", 0, },
     { 1, 0, 0, 0, }, 1,
-    ODE_options::set_initial_step_size,
-    ODE_options::initial_step_size, },
+    LSODE_options::set_initial_step_size,
+    LSODE_options::initial_step_size, },
 
   { "maximum step size",
     { "maximum", "step", "size", 0, },
     { 2, 0, 0, 0, }, 1,
-    ODE_options::set_maximum_step_size,
-    ODE_options::maximum_step_size, },
+    LSODE_options::set_maximum_step_size,
+    LSODE_options::maximum_step_size, },
 
   { "minimum step size",
     { "minimum", "step", "size", 0, },
     { 2, 0, 0, 0, }, 1,
-    ODE_options::set_minimum_step_size,
-    ODE_options::minimum_step_size, },
+    LSODE_options::set_minimum_step_size,
+    LSODE_options::minimum_step_size, },
 
   { "relative tolerance",
     { "relative", "tolerance", 0, 0, },
     { 1, 0, 0, 0, }, 1,
-    ODE_options::set_relative_tolerance,
-    ODE_options::relative_tolerance, },
+    LSODE_options::set_relative_tolerance,
+    LSODE_options::relative_tolerance, },
 
   { 0,
     { 0, 0, 0, 0, },
     { 0, 0, 0, 0, }, 0,
     0, 0, },
 };
 
 static void
@@ -230,17 +230,17 @@ print_lsode_option_list (void)
 
   print_usage ("lsode_options", 1);
 
   output_buf << "\n"
 	     << "Options for lsode include:\n\n"
 	     << "  keyword                                  value\n"
 	     << "  -------                                  -----\n\n";
 
-  ODE_OPTIONS *list = lsode_option_table;
+  LSODE_OPTIONS *list = lsode_option_table;
 
   const char *keyword;
   while ((keyword = list->keyword) != 0)
     {
       output_buf.form ("  %-40s ", keyword);
 
       double val = (lsode_opts.*list->d_get_fcn) ();
       if (val < 0.0)
@@ -254,17 +254,17 @@ print_lsode_option_list (void)
 
   output_buf << "\n" << ends;
   maybe_page_output (output_buf);
 }
 
 static void
 set_lsode_option (const string& keyword, double val)
 {
-  ODE_OPTIONS *list = lsode_option_table;
+  LSODE_OPTIONS *list = lsode_option_table;
 
   while (list->keyword != 0)
     {
       if (keyword_almost_match (list->kw_tok, list->min_len, keyword,
 				list->min_toks_to_match, MAX_TOKENS))
 	{
 	  (lsode_opts.*list->d_set_fcn) (val);
 
@@ -276,17 +276,17 @@ set_lsode_option (const string& keyword,
   warning ("lsode_options: no match for `%s'", keyword.c_str ());
 }
 
 static Octave_object
 show_lsode_option (const string& keyword)
 {
   Octave_object retval;
 
-  ODE_OPTIONS *list = lsode_option_table;
+  LSODE_OPTIONS *list = lsode_option_table;
 
   while (list->keyword != 0)
     {
       if (keyword_almost_match (list->kw_tok, list->min_len, keyword,
 				list->min_toks_to_match, MAX_TOKENS))
 	{
 	  return (lsode_opts.*list->d_get_fcn) ();
 	}
