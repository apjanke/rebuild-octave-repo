# HG changeset patch
# User Rik <rik@octave.org>
# Date 1444071796 25200
#      Mon Oct 05 12:03:16 2015 -0700
# Node ID b7ac1e94266ecc1902f072c09e18846b06e557e5
# Parent  45151de7423f4bfbd14ba9d6f73ad432f5ee28c9
maint: Further clean up of functions in ode/private dir.

* AbsRel_Norm.m, fuzzy_compare.m, integrate_adaptive.m, integrate_const.m,
integrate_n_steps.m, ode_struct_value_check.m, odepkg_event_handle.m,
odepkg_structure_check.m, runge_kutta_45_dorpri.m:
Place latest copyright first in file.
Use two spaces before beginning single-line comment.
Use parentheses around variable to be tested in switch stmt.
Use space between function name and opening parenthesis.

diff --git a/scripts/ode/private/AbsRel_Norm.m b/scripts/ode/private/AbsRel_Norm.m
--- a/scripts/ode/private/AbsRel_Norm.m
+++ b/scripts/ode/private/AbsRel_Norm.m
@@ -1,10 +1,10 @@
+## Copyright (C) 2014, Jacopo Corno <jacopo.corno@gmail.com>
 ## Copyright (C) 2013, Roberto Porcu' <roberto.porcu@polimi.it>
-## Copyright (C) 2014, Jacopo Corno <jacopo.corno@gmail.com>
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 3 of the License, or (at
 ## your option) any later version.
 ##
diff --git a/scripts/ode/private/fuzzy_compare.m b/scripts/ode/private/fuzzy_compare.m
--- a/scripts/ode/private/fuzzy_compare.m
+++ b/scripts/ode/private/fuzzy_compare.m
@@ -116,17 +116,17 @@ function res = fuzzy_compare (string1, s
                              lower (string2),
                              minimus);
     ## update the upper_bound to speedup the computation
     minimus = min (minimus, values(i));
   endfor
 
   positions = find (values == minimus);
 
-  if (minimus == 0) # exact match
+  if (minimus == 0)  # exact match
     if (rows (positions) != 1)
       error ("OdePkg:InvalidArgument",
              "there are %d strings perfectly matching '%s'",
              rows (positions), string1);
     endif
     res = positions;
     return;
   endif
diff --git a/scripts/ode/private/integrate_adaptive.m b/scripts/ode/private/integrate_adaptive.m
--- a/scripts/ode/private/integrate_adaptive.m
+++ b/scripts/ode/private/integrate_adaptive.m
@@ -177,17 +177,17 @@ function solution = integrate_adaptive (
                   || (abs (z(i) - tspan(counter)) /
                       (max (abs (z(i)), abs (tspan(counter)))) < 8*eps)) )
             counter++;
           endif
           ## else, loop until there are requested values inside this subinterval
           while ((counter <= k)
                  && (vdirection * z(i) > vdirection * tspan(counter)))
             ## choose interpolation scheme according to order of the solver
-            switch order
+            switch (order)
               case 1
                 u_interp = linear_interpolation ([z(i-1) z(i)],
                                                  [u(:,i-1) u(:,i)],
                                                  tspan(counter));
               case 2
                 if (! isempty (k_vals))
                   der = k_vals(:,1);
                 else
@@ -281,36 +281,36 @@ function solution = integrate_adaptive (
       endif
       solution.vcntloop = solution.vcntloop + 1;
       vcntiter = 0;
       
       ## Call plot only if a valid result has been found, therefore this
       ## code fragment has moved here.  Stop integration if plot function
       ## returns false
       if (options.vhaveoutputfunction)
-        for vcnt = 0:options.Refine # Approximation between told and t
-          if (options.vhaverefine) # Do interpolation
+        for vcnt = 0:options.Refine  # Approximation between told and t
+          if (options.vhaverefine)   # Do interpolation
             vapproxtime = (vcnt + 1) / (options.Refine + 2);
             vapproxvals = (1 - vapproxtime) * vSaveVUForRefine ...
                           + (vapproxtime) * y(:,end);
             vapproxtime = s(end) + vapproxtime * dt;
           else
             vapproxvals = x(:,end);
             vapproxtime = t(end);
           endif
           if (options.vhaveoutputselection)
             vapproxvals = vapproxvals(options.OutputSel);
           endif
           vpltret = feval (options.OutputFcn, vapproxtime,
                            vapproxvals, [], options.vfunarguments{:});
-          if (vpltret) # Leave refinement loop
+          if (vpltret)  # Leave refinement loop
             break;
           endif
         endfor
-        if (vpltret) # Leave main loop
+        if (vpltret)  # Leave main loop
           solution.vunhandledtermination = false;
           break;
         endif
       endif
       
       ## Call event only if a valid result has been found, therefore this
       ## code fragment has moved here.  Stop integration if veventbreak is
       ## true
@@ -335,18 +335,18 @@ function solution = integrate_adaptive (
     
     ## Compute next timestep, formula taken from Hairer
     err += eps;    # adding an eps to avoid divisions by zero
     dt = dt * min (facmax,
                    max (facmin, fac * (1 / err)^(1 / (order + 1))));
     dt = vdirection * min (abs (dt), options.MaxStep);
     
     ## Update counters that count the number of iteration cycles
-    solution.vcntcycles += 1; # Needed for cost statistics
-    vcntiter += 1; # Needed to find iteration problems
+    solution.vcntcycles += 1;  # Needed for cost statistics
+    vcntiter += 1;  # Needed to find iteration problems
 
     ## Stop solving because in the last 1000 steps no successful valid
     ## value has been found
     if (vcntiter >= 5000)
       error (["Solving has not been successful.  The iterative",
               " integration loop exited at time t = %f before endpoint at",
               " tend = %f was reached.  This happened because the iterative",
               " integration loop does not find a valid solution at this time",
diff --git a/scripts/ode/private/integrate_const.m b/scripts/ode/private/integrate_const.m
--- a/scripts/ode/private/integrate_const.m
+++ b/scripts/ode/private/integrate_const.m
@@ -131,31 +131,31 @@ function solution = integrate_const (ste
 
     ## values on this interval for time and solution
     z = [t(end);s];
     u = [x(:,end),y];
 
     ## if next tspan value is caught, update counter
     if ((z(end) == tspan(counter))
         || (abs (z(end) - tspan(counter)) /
-            (max(abs (z(end)), abs(tspan(counter)))) < 8*eps) )
+            (max (abs (z(end)), abs (tspan(counter)))) < 8*eps) )
       counter++;
 
     ## if there is an element in time vector at which the solution is required
     ## the program must compute this solution before going on with next steps
     elseif (vdirection * z(end) > vdirection * tspan(counter) )
       ## initializing counter for the following cycle
       i = 2;
       while (i <= length (z))
 
         ## if next tspan value is caught, update counter
         if ((counter <= k)
             && (((z(i) == tspan(counter))
                  || (abs (z(i) - tspan(counter)) /
-                     (max(abs (z(i)), abs (tspan(counter)))) < 8*eps))) )
+                     (max (abs (z(i)), abs (tspan(counter)))) < 8*eps))) )
           counter++;
         endif
         ## else, loop until there are requested values inside this subinterval
         while ((counter <= k)
                && vdirection * z(i) > vdirection * tspan(counter) )
           ## add the interpolated value of the solution
           u = [u(:,1:i-1),u(:,i-1) + (tspan(counter)-z(i-1))/(z(i)-z(i-1))* ...
               (u(:,i)-u(:,i-1)),u(:,i:end)];
@@ -227,18 +227,18 @@ function solution = integrate_const (ste
         t(solution.vcntloop-1,:) = solution.vevent{3}(end,:);
         x(:,solution.vcntloop-1) = solution.vevent{4}(end,:)';
         solution.vunhandledtermination = false; 
         break;
       endif
     endif
     
     ## Update counters that count the number of iteration cycles
-    solution.vcntcycles = solution.vcntcycles + 1; # Needed for cost statistics
-    vcntiter = vcntiter + 1;     # Needed to find iteration problems
+    solution.vcntcycles = solution.vcntcycles + 1;  # Needed for cost statistics
+    vcntiter = vcntiter + 1;  # Needed to find iteration problems
 
     ## Stop solving because the last 1000 steps no successful valid
     ## value has been found
     if (vcntiter >= 5000)
       error (["Solving has not been successful.  The iterative",
               " integration loop exited at time t = %f before endpoint at",
               " tend = %f was reached.  This happened because the iterative",
               " integration loop does not find a valid solution at this time",
diff --git a/scripts/ode/private/integrate_n_steps.m b/scripts/ode/private/integrate_n_steps.m
--- a/scripts/ode/private/integrate_n_steps.m
+++ b/scripts/ode/private/integrate_n_steps.m
@@ -135,36 +135,36 @@ function solution = integrate_n_steps (s
       solution.vcntsave = solution.vcntsave + 1;    
     endif
     solution.vcntloop = solution.vcntloop + 1;
     vcntiter = 0;
       
     ## Call plot only if a valid result has been found, therefore this code
     ## fragment has moved here.  Stop integration if plot function returns false
     if (options.vhaveoutputfunction)
-      for vcnt = 0:options.Refine # Approximation between told and t
-        if (options.vhaverefine) # Do interpolation
+      for vcnt = 0:options.Refine  # Approximation between told and t
+        if (options.vhaverefine)  # Do interpolation
           vapproxtime = (vcnt + 1) / (options.Refine + 2);
           vapproxvals = (1 - vapproxtime) * vSaveVUForRefine ...
                         + (vapproxtime) * y(:,end);
           vapproxtime = s(end) + vapproxtime*dt;
         else
           vapproxvals = x(:,end);
           vapproxtime = t(end);
         endif
         if (options.vhaveoutputselection)
           vapproxvals = vapproxvals(options.OutputSel);
         endif
         vpltret = feval (options.OutputFcn, vapproxtime, vapproxvals, [],
                          options.vfunarguments{:});
-        if (vpltret) # Leave refinement loop
+        if (vpltret)  # Leave refinement loop
           break;
         endif
       endfor
-      if (vpltret) # Leave main loop
+      if (vpltret)  # Leave main loop
         solution.vunhandledtermination = false;
         break;
       endif
     endif
       
     ## Call event only if a valid result has been found, therefore this
     ## code fragment has moved here.  Stop integration if veventbreak is
     ## true
@@ -176,18 +176,18 @@ function solution = integrate_n_steps (s
         t(solution.vcntloop-1,:) = solution.vevent{3}(end,:);
         x(:,solution.vcntloop-1) = solution.vevent{4}(end,:)';
         solution.vunhandledtermination = false; 
         break;
       endif
     endif
     
     ## Update counters that count the number of iteration cycles
-    solution.vcntcycles = solution.vcntcycles + 1; # Needed for cost statistics
-    vcntiter = vcntiter + 1; # Needed to find iteration problems
+    solution.vcntcycles = solution.vcntcycles + 1;  # Needed for cost statistics
+    vcntiter = vcntiter + 1;  # Needed to find iteration problems
 
     ## Stop solving because the last 1000 steps no successful valid
     ## value has been found
     if (vcntiter >= 5000)
       error (["Solving has not been successful.  The iterative",
               " integration loop exited at time t = %f before endpoint at",
               " tend = %f was reached.  This happened because the iterative",
               " integration loop does not find a valid solution at this time",
diff --git a/scripts/ode/private/ode_struct_value_check.m b/scripts/ode/private/ode_struct_value_check.m
--- a/scripts/ode/private/ode_struct_value_check.m
+++ b/scripts/ode/private/ode_struct_value_check.m
@@ -1,10 +1,10 @@
+## Copyright (C) 2013, Roberto Porcu' <roberto.porcu@polimi.it>
 ## Copyright (C) 2006-2012, Thomas Treichl <treichl@users.sourceforge.net>
-## Copyright (C) 2013, Roberto Porcu' <roberto.porcu@polimi.it>
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 3 of the License, or (at
 ## your option) any later version.
 ##
@@ -172,17 +172,17 @@ function ode_struct_value_check (arg, so
               error ("OdePkg:InvalidArgument",
                      "value assigned to field %s is not a valid one",
                      fields{i});
             endif
           endif
         endif
 
       case "JConstant"
-        if (! isempty(arg.(fields{i})))
+        if (! isempty (arg.(fields{i})))
           if (! strcmp (arg.(fields{i}), "on")
               && ! strcmp (arg.(fields{i}), "off"))
             error ("OdePkg:InvalidArgument",
                    "value assigned to field %s is not a valid one", fields{i});
           endif
         endif
 
       case "JPattern"
diff --git a/scripts/ode/private/odepkg_event_handle.m b/scripts/ode/private/odepkg_event_handle.m
--- a/scripts/ode/private/odepkg_event_handle.m
+++ b/scripts/ode/private/odepkg_event_handle.m
@@ -79,17 +79,17 @@ function vretval = odepkg_event_handle (
   ## initialize the internal variables of the event function an to get
   ## a value for veveold
   if (strcmp (vflag, "init"))
 
     if (! iscell (vy))
       vinpargs = {vevefun, vt, vy};
     else
       vinpargs = {vevefun, vt, vy{1}, vy{2}};
-      vy = vy{1}; # Delete cell element 2
+      vy = vy{1};  # Delete cell element 2
     endif
     if (nargin > 4)
       vinpargs = {vinpargs{:}, varargin{:}};
     endif
     [veveold, vterm, vdir] = feval (vinpargs{:});
 
     ## We assume that all return values must be column vectors
     veveold = veveold(:)'; vterm = vterm(:)'; vdir = vdir(:)';
@@ -98,47 +98,47 @@ function vretval = odepkg_event_handle (
   ## Process the event, find the zero crossings either for a rising
   ## or for a falling edge
   elseif (isempty (vflag))
 
     if (! iscell (vy))
       vinpargs = {vevefun, vt, vy};
     else
       vinpargs = {vevefun, vt, vy{1}, vy{2}};
-      vy = vy{1}; # Delete cell element 2
+      vy = vy{1};  # Delete cell element 2
     endif
     if (nargin > 4)
       vinpargs = {vinpargs{:}, varargin{:}};
     endif
     [veve, vterm, vdir] = feval (vinpargs{:});
 
     ## We assume that all return values must be column vectors
     veve = veve(:)'; vterm = vterm(:)'; vdir = vdir(:)';
 
     ## Check if one or more signs of the event has changed
     vsignum = (sign (veveold) != sign (veve));
-    if (any (vsignum))         # One or more values have changed
-      vindex = find (vsignum); # Get the index of the changed values
+    if (any (vsignum))          # One or more values have changed
+      vindex = find (vsignum);  # Get the index of the changed values
 
       if (any (vdir(vindex) == 0))
         ## Rising or falling (both are possible)
         ## Don't change anything, keep the index
       elseif (any (vdir(vindex) == sign (veve(vindex))))
         ## Detected rising or falling, need a new index
         vindex = find (vdir == sign (veve));
       else
         ## Found a zero crossing but must not be notified
         vindex = [];
       endif
 
       ## Create new output values if a valid index has been found
       if (! isempty (vindex))
         ## Change the persistent result cell array
-        vretcell{1} = any (vterm(vindex));    # Stop integration or not
-        vretcell{2}(vevecnt,1) = vindex(1,1); # Take first event found
+        vretcell{1} = any (vterm(vindex));     # Stop integration or not
+        vretcell{2}(vevecnt,1) = vindex(1,1);  # Take first event found
         ## Calculate the time stamp when the event function returned 0 and
         ## calculate new values for the integration results, we do both by
         ## a linear interpolation
         vtnew = vt - veve(1,vindex) * (vt - vtold) / ...
                                       (veve(1,vindex) - veveold(1,vindex));
         vynew = (vy - (vt - vtnew) * (vy - vyold) / (vt - vtold))';
         vretcell{3}(vevecnt,1) = vtnew;
         vretcell{4}(vevecnt,:) = vynew;
diff --git a/scripts/ode/private/odepkg_structure_check.m b/scripts/ode/private/odepkg_structure_check.m
--- a/scripts/ode/private/odepkg_structure_check.m
+++ b/scripts/ode/private/odepkg_structure_check.m
@@ -1,24 +1,26 @@
+## Copyright (C) 2013, Roberto Porcu' <roberto.porcu@polimi.it>
 ## Copyright (C) 2006-2012, Thomas Treichl <treichl@users.sourceforge.net>
-## Copyright (C) 2013, Roberto Porcu' <roberto.porcu@polimi.it>
-## OdePkg - A package for solving ordinary differential equations and more
+##
+## This file is part of Octave.
 ##
-## This program is free software; you can redistribute it and/or modify
-## it under the terms of the GNU General Public License as published by
-## the Free Software Foundation; either version 2 of the License, or
-## (at your option) any later version.
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 3 of the License, or (at
+## your option) any later version.
 ##
-## This program is distributed in the hope that it will be useful,
-## but WITHOUT ANY WARRANTY; without even the implied warranty of
-## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-## GNU General Public License for more details.
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
-## along with this program; If not, see <http://www.gnu.org/licenses/>.
+## along with Octave; see the file COPYING.  If not, see
+## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{newstruct} =} odepkg_structure_check (@var{oldstruct})
 ## @deftypefnx {Function File} {@var{newstruct} =} odepkg_structure_check (@var{oldstruct}, @var{"solver"})
 ##
 ## If this function is called with one input argument of type structure array
 ## then check the field names and the field values of the OdePkg structure
 ## @var{oldstruct} and return the structure as @var{newstruct} if no error is
@@ -47,17 +49,17 @@
 function vret = odepkg_structure_check (varargin)
 
   ## Check the number of input arguments
   if (nargin == 0)
     help ("odepkg_structure_check");
     error ("OdePkg:InvalidArgument",
            "Number of input arguments must be greater than zero");
   elseif (nargin > 2)
-    print_usage;
+    print_usage ();
   elseif (nargin == 1 && isstruct (varargin{1}))
     vret = varargin{1};
     vsol = "";
     vfld = fieldnames (vret);
     vlen = length (vfld);
   elseif (nargin == 2 && isstruct (varargin{1}) && ischar (varargin{2}))
     vret = varargin{1};
     vsol = varargin{2};
@@ -324,149 +326,149 @@ function vret = odepkg_structure_check (
         else
           error ("OdePkg:InvalidParameter",
                  'Unknown parameter name "%s" or no valid parameter value',
                  vfld{vcntarg});
         endif
 
       ## new fields added
       case "Algorithm"
-        if ( isempty(vret.(vfld{vcntarg})) || ischar(vret.(vfld{vcntarg})) )
+        if ( isempty (vret.(vfld{vcntarg})) || ischar (vret.(vfld{vcntarg})) )
         else
           error ("OdePkg:InvalidParameter",
                  'Unknown parameter name "%s" or no valid parameter value',
                  vfld{vcntarg});
         endif
 
       case "Choice"
-        if ( isempty(vret.(vfld{vcntarg}))
-            || (isnumeric(vret.(vfld{vcntarg})) && (vret.(vfld{vcntarg})==1)
+        if ( isempty (vret.(vfld{vcntarg}))
+            || (isnumeric (vret.(vfld{vcntarg})) && (vret.(vfld{vcntarg})==1)
                 || vret.(vfld{vcntarg})==2 ) )
         else
           error ("OdePkg:InvalidParameter",
                  'Unknown parameter name "%s" or no valid parameter value',
                  vfld{vcntarg});
         endif
 
       case "Eta"
-        if ( isempty(vret.(vfld{vcntarg}))
-            || ( isreal(vret.(vfld{vcntarg}))
+        if ( isempty (vret.(vfld{vcntarg}))
+            || ( isreal (vret.(vfld{vcntarg}))
                 && vret.(vfld{vcntarg})>=0 && vret.(vfld{vcntarg})<1) )
         else
           error ("OdePkg:InvalidParameter",
                  'Unknown parameter name "%s" or no valid parameter value',
                  vfld{vcntarg});
         endif
 
       case "Explicit"
-        if ( isempty(vret.(vfld{vcntarg}))
-            || (ischar(vret.(vfld{vcntarg}))
-                && (strcmp(vret.(vfld{vcntarg}),"yes")
-                || strcmp(vret.(vfld{vcntarg}),"no"))) )
+        if ( isempty (vret.(vfld{vcntarg}))
+            || (ischar (vret.(vfld{vcntarg}))
+                && (strcmp (vret.(vfld{vcntarg}),"yes")
+                || strcmp (vret.(vfld{vcntarg}),"no"))) )
         else
           error ("OdePkg:InvalidParameter",
                  'Unknown parameter name "%s" or no valid parameter value',
                  vfld{vcntarg});
         endif
 
       case "InexactSolver"
-        if ( isempty(vret.(vfld{vcntarg})) || ischar(vret.(vfld{vcntarg})) )
+        if ( isempty (vret.(vfld{vcntarg})) || ischar (vret.(vfld{vcntarg})) )
         else
           error ("OdePkg:InvalidParameter",
                  'Unknown parameter name "%s" or no valid parameter value',
                  vfld{vcntarg});
         endif
 
       case "InitialSlope"
-        if ( isempty(vret.(vfld{vcntarg}))
-            || ( ischar(vret.(vfld{vcntarg}))
-                || (isnumeric(vret.(vfld{vcntarg}))
-                    && (isvector(vret.(vfld{vcntarg}))
-                        || isreal(vret.(vfld{vcntarg}))))) )
+        if ( isempty (vret.(vfld{vcntarg}))
+            || ( ischar (vret.(vfld{vcntarg}))
+                || (isnumeric (vret.(vfld{vcntarg}))
+                    && (isvector (vret.(vfld{vcntarg}))
+                        || isreal (vret.(vfld{vcntarg}))))) )
         else
           error ("OdePkg:InvalidParameter",
                  'Unknown parameter name "%s" or no valid parameter value',
                  vfld{vcntarg});
         endif
 
       case "JConstant"
-        if ( isempty(vret.(vfld{vcntarg}))
-            || (ischar(vret.(vfld{vcntarg}))
-                && (strcmp(vret.(vfld{vcntarg}),"yes")
-                    || strcmp(vret.(vfld{vcntarg}),"no"))) )
+        if ( isempty (vret.(vfld{vcntarg}))
+            || (ischar (vret.(vfld{vcntarg}))
+                && (strcmp (vret.(vfld{vcntarg}),"yes")
+                    || strcmp (vret.(vfld{vcntarg}),"no"))) )
         else
           error ("OdePkg:InvalidParameter",
                  'Unknown parameter name "%s" or no valid parameter value',
                  vfld{vcntarg});
         endif
 
       case "MassConstant"
-        if ( isempty(vret.(vfld{vcntarg}))
-            || (strcmp(vret.(vfld{vcntarg}),"on")
-                || strcmp(vret.(vfld{vcntarg}),"off")) )
+        if ( isempty (vret.(vfld{vcntarg}))
+            || (strcmp (vret.(vfld{vcntarg}),"on")
+                || strcmp (vret.(vfld{vcntarg}),"off")) )
         else
           error ("OdePkg:InvalidParameter",
                  'Unknown parameter name "%s" or no valid parameter value',
                  vfld{vcntarg});
         endif
 
       case "PolynomialDegree"
-        if ( isempty(vret.(vfld{vcntarg}))
-            || (isnumeric(vret.(vfld{vcntarg}))
+        if ( isempty (vret.(vfld{vcntarg}))
+            || (isnumeric (vret.(vfld{vcntarg}))
                 && mod(vret.(vfld{vcntarg}),1)==0 && vret.(vfld{vcntarg})>0) )
         else
           error ("OdePkg:InvalidParameter",
                  'Unknown parameter name "%s" or no valid parameter value',
                  vfld{vcntarg});
         endif
 
       case "QuadratureOrder"
-        if ( isempty(vret.(vfld{vcntarg}))
-            || (isnumeric(vret.(vfld{vcntarg}))
+        if ( isempty (vret.(vfld{vcntarg}))
+            || (isnumeric (vret.(vfld{vcntarg}))
                 && mod(vret.(vfld{vcntarg}),1)==0 && vret.(vfld{vcntarg})>0) )
         else
           error ("OdePkg:InvalidParameter",
                  'Unknown parameter name "%s" or no valid parameter value',
                  vfld{vcntarg});
         endif
 
       case "Restart"
-        if ( isempty(vret.(vfld{vcntarg}))
-            || (isnumeric(vret.(vfld{vcntarg}))
+        if ( isempty (vret.(vfld{vcntarg}))
+            || (isnumeric (vret.(vfld{vcntarg}))
                 && mod(vret.(vfld{vcntarg}),1)==0 && vret.(vfld{vcntarg})>0) )
         else
           error ("OdePkg:InvalidParameter",
                  'Unknown parameter name "%s" or no valid parameter value',
                  vfld{vcntarg});
         endif
 
       case "TimeStepNumber"
-        if ( isempty(vret.(vfld{vcntarg}))
-            || (isnumeric(vret.(vfld{vcntarg}))
+        if ( isempty (vret.(vfld{vcntarg}))
+            || (isnumeric (vret.(vfld{vcntarg}))
                 && mod(vret.(vfld{vcntarg}),1)==0 && vret.(vfld{vcntarg})>0) )
         else
           error ("OdePkg:InvalidParameter",
                  'Unknown parameter name "%s" or no valid parameter value',
                  vfld{vcntarg});
         endif
 
       case "TimeStepSize"
-        if ( isempty(vret.(vfld{vcntarg}))
-            || ( isreal(vret.(vfld{vcntarg})) && vret.(vfld{vcntarg})!=0) )
+        if ( isempty (vret.(vfld{vcntarg}))
+            || ( isreal (vret.(vfld{vcntarg})) && vret.(vfld{vcntarg})!=0) )
         else
           error ("OdePkg:InvalidParameter",
                  'Unknown parameter name "%s" or no valid parameter value',
                  vfld{vcntarg});
         endif
 
       case "UseJacobian"
-        if ( isempty(vret.(vfld{vcntarg}))
-            || (ischar(vret.(vfld{vcntarg}))
-                && (strcmp(vret.(vfld{vcntarg}),"yes")
-                    || strcmp(vret.(vfld{vcntarg}),"no"))) )
+        if ( isempty (vret.(vfld{vcntarg}))
+            || (ischar (vret.(vfld{vcntarg}))
+                && (strcmp (vret.(vfld{vcntarg}),"yes")
+                    || strcmp (vret.(vfld{vcntarg}),"no"))) )
         else
           error ("OdePkg:InvalidParameter",
                  'Unknown parameter name "%s" or no valid parameter value',
                  vfld{vcntarg});
         endif
 
       otherwise
           error ("OdePkg:InvalidParameter",
diff --git a/scripts/ode/private/runge_kutta_45_dorpri.m b/scripts/ode/private/runge_kutta_45_dorpri.m
--- a/scripts/ode/private/runge_kutta_45_dorpri.m
+++ b/scripts/ode/private/runge_kutta_45_dorpri.m
@@ -1,10 +1,10 @@
+## Copyright (C) 2015, Carlo de Falco
 ## Copyright (C) 2013, Roberto Porcu' <roberto.porcu@polimi.it>
-## Copyright (C) 2015, Carlo de Falco
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 3 of the License, or (at
 ## your option) any later version.
 ##
@@ -75,20 +75,20 @@ function [t_out, x_out, x_est, k] = ...
   persistent c_prime = [(5179/57600) 0 (7571/16695) (393/640), ...
                         (-92097/339200) (187/2100)  (1/40)];
 
   s = t + dt * b;
   cc = dt * c;
   aa = dt * a;
   k = zeros (rows (x), 7);
 
-  if (nargin >= 5) # options are passed
+  if (nargin >= 5)  # options are passed
     args = varargin{1}.vfunarguments;
-    if (nargin >= 6) # both the options and the k values are passed
-      k(:,1) = varargin{2}(:,end); # FSAL property
+    if (nargin >= 6)  # both the options and the k values are passed
+      k(:,1) = varargin{2}(:,end);  # FSAL property
     else      
       k(:,1) = feval (f, t, x, args{:});
     endif
   else
     args = {};
   endif
 
   k(:,2) = feval (f, s(2), x + k(:,1) * aa(2, 1).', args{:});
