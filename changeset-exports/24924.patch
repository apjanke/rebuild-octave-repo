# HG changeset patch
# User Michele Ginesi <michele.ginesi@gmail.com>
# Date 1519513404 -3600
#      Sun Feb 25 00:03:24 2018 +0100
# Branch stable
# Node ID 10d2fc9edaff611e2570d6f9055aad734bfa04eb
# Parent  40ab8be7d7ec78d9984fa74ec6274dbea48b2388
Added comments in Lentz's algorithm files

--
changed libinterp/corefcn/__betainc_lentz__.cc
changed libinterp/corefcn/__expint_lentz__.cc
changed libinterp/corefcn/__gammainc_lentz__.cc

diff --git a/libinterp/corefcn/__betainc_lentz__.cc b/libinterp/corefcn/__betainc_lentz__.cc
--- a/libinterp/corefcn/__betainc_lentz__.cc
+++ b/libinterp/corefcn/__betainc_lentz__.cc
@@ -26,16 +26,17 @@
 DEFUN (__betainc_lentz__, args, , "Continued fraction for incomplete beta function")
 {
   int nargin = args.length ();
   octave_value_list outargs;
   if (nargin != 4)
     print_usage ();
   else
     {
+      // Values initialized in single precision
       FloatNDArray x_arg_s = args(0).array_value ();
       FloatNDArray a_arg_s = args(1).array_value ();
       FloatNDArray b_arg_s = args(2).array_value ();
       bool is_single = args(3).bool_value ();
 
       // total number of scenarios: get maximum of length of all vectors
       int len_x = x_arg_s.rows ();
       int len_a = a_arg_s.rows ();
@@ -46,16 +47,17 @@ DEFUN (__betainc_lentz__, args, , "Conti
       // input checks
       if ((len_x != len) || (len_a != len) || (len_b != len))
         error("__betainc_lentz__: expecting arguments of same dimension");
 
       // initialize scenario dependent output:
       dim_vector dim_scen (len, 1);
       ColumnVector f (dim_scen);
 
+      // Lentz's algorithm in two cases: double and single precision
       if (! is_single)
         {
           NDArray x_arg = args(0).array_value ();
           NDArray a_arg = args(1).array_value ();
           NDArray b_arg = args(2).array_value ();
           NDArray x (dim_scen);
           NDArray a (dim_scen);
           NDArray b (dim_scen);
@@ -65,42 +67,45 @@ DEFUN (__betainc_lentz__, args, , "Conti
             x.fill (x_arg(0));
           else
             x = x_arg;
           //
           if (len_a == 1)
             a.fill (a_arg(0));
           else
             a = a_arg;
+          //
           if (len_b == 1)
             b.fill (b_arg(0));
           else
             b = b_arg;
+          // Variables initialization
           static const double tiny = pow (2, -100);
           static const double eps = std::numeric_limits<double>::epsilon();
           double xj, x2, y, Cj, Dj, aj, bj, Deltaj, alpha_j, beta_j;
           int j, maxit;
           maxit = 200;
           // loop via all scenarios
           for (octave_idx_type ii = 0; ii < len; ++ii)
             {
               // catch ctrl + c
               OCTAVE_QUIT;
+              // Variable initialization for the current element
               xj = x(ii);
               y = tiny;
               Cj = y;
               Dj = 0;
               aj = a(ii);
               bj = b(ii);
               Deltaj = 0;
               alpha_j = 1;
               beta_j = aj - (aj * (aj + bj)) / (aj + 1) * xj;
               x2 = xj * xj;
               j = 1;
-
+              //Lentz's algorithm
               while((std::abs ((Deltaj - 1))  > eps) & (j < maxit))
                 {
                   Dj = beta_j + alpha_j * Dj;
                   if (Dj == 0)
                     Dj = tiny;
                   Cj = beta_j + alpha_j / Cj;
                   if (Cj == 0)
                     Cj = tiny;
@@ -127,42 +132,45 @@ DEFUN (__betainc_lentz__, args, , "Conti
             x_s.fill (x_arg_s(0));
           else
             x_s = x_arg_s;
           //
           if (len_a == 1)
             a_s.fill (a_arg_s(0));
           else
             a_s = a_arg_s;
+          //
           if (len_b == 1)
             b_s.fill (b_arg_s(0));
           else
             b_s = b_arg_s;
+          // Variables initialization
           static const float tiny = pow (2, -50);
           static const float eps = std::numeric_limits<float>::epsilon();
           float xj, x2, y, Cj, Dj, aj, bj, Deltaj, alpha_j, beta_j;
           int j, maxit;
           maxit = 200;
           // loop via all scenarios
           for (octave_idx_type ii = 0; ii < len; ++ii)
             {
               // catch ctrl + c
               OCTAVE_QUIT;
+              // Variable initialization for the current element
               xj = x_s(ii);
               y = tiny;
               Cj = y;
               Dj = 0;
               aj = a_s(ii);
               bj = b_s(ii);
               Deltaj = 0;
               alpha_j = 1;
               beta_j = aj - (aj * (aj + bj)) / (aj + 1) * xj;
               x2 = xj * xj;
               j = 1;
-
+              //Lentz's algorithm
               while((std::abs ((Deltaj - 1))  > eps) & (j < maxit))
                 {
                   Dj = beta_j + alpha_j * Dj;
                   if (Dj == 0)
                     Dj = tiny;
                   Cj = beta_j + alpha_j / Cj;
                   if (Cj == 0)
                     Cj = tiny;
diff --git a/libinterp/corefcn/__expint_lentz__.cc b/libinterp/corefcn/__expint_lentz__.cc
--- a/libinterp/corefcn/__expint_lentz__.cc
+++ b/libinterp/corefcn/__expint_lentz__.cc
@@ -28,36 +28,39 @@
 DEFUN (__expint_lentz__, args, , "Continued fraction for the exponential integral")
 {
   int nargin = args.length ();
   octave_value_list outargs;
   if (nargin != 2)
     print_usage ();
   else
     {
+      // Value initialized in single precision
       FloatComplexNDArray x_arg_s = args(0).complex_array_value ();
       bool is_single = args(1).bool_value ();
 
       int len_x = x_arg_s.rows ();
 
       // initialize scenario dependent output:
       dim_vector dim_scen (len_x, 1);
+      ComplexColumnVector f (dim_scen);
+
+      // Lentz's algorithm in two cases: double and single precision
 
       if (! is_single)
         {
           ComplexNDArray x_arg = args(0).complex_array_value ();
           ComplexNDArray x (dim_scen);
 
-          ComplexColumnVector f (dim_scen);
-
           // initialize scenario dependent input values (idx either 0 or ii)
           if (len_x == 1)
             x.fill (x_arg(0));
           else
             x = x_arg;
+          // Variables initialization
           static const std::complex<double> tiny = pow (2, -100);
           static const double eps = std::numeric_limits<double>::epsilon();
           std::complex<double> cone(1.0, 0.0);
           std::complex<double> czero(0.0, 0.0);
           std::complex<double> xj = x(0);
           std::complex<double> y = tiny;
           std::complex<double> Cj = y;
           std::complex<double> Dj = czero;
@@ -66,24 +69,26 @@ DEFUN (__expint_lentz__, args, , "Contin
           std::complex<double> Deltaj = czero;
           int j = 1;
           int maxit = 200;
           // loop via all scenarios
           for (octave_idx_type ii = 0; ii < len_x; ++ii)
             {
               // catch ctrl + c
               OCTAVE_QUIT;
+              // Variable initialization for the current element
               xj = x(ii);
               y = tiny;
               Cj = y;
               Dj = czero;
               alpha_j = cone;
               beta_j = xj;
               Deltaj = czero;
               j = 1;
+              //Lentz's algorithm
               while((std::abs (Deltaj - cone)  > eps) & (j < maxit))
                 {
                   Dj = beta_j + alpha_j * Dj;
                   if (Dj == czero)
                     Dj = tiny;
                   Cj = beta_j + alpha_j / Cj;
                   if (Cj == czero)
                     Cj = tiny;
@@ -108,16 +113,17 @@ DEFUN (__expint_lentz__, args, , "Contin
 
           FloatComplexColumnVector f (dim_scen);
 
           // initialize scenario dependent input values (idx either 0 or ii)
           if (len_x == 1)
             x_s.fill (x_arg_s(0));
           else
             x_s = x_arg_s;
+          // Variables initialization
           static const std::complex<float> tiny = pow (2, -50);
           static const float eps = std::numeric_limits<float>::epsilon();
           std::complex<float> cone(1.0, 0.0);
           std::complex<float> czero(0.0, 0.0);
           std::complex<float> xj = x_s(0);
           std::complex<float> y = tiny;
           std::complex<float> Cj = y;
           std::complex<float> Dj = czero;
@@ -126,24 +132,26 @@ DEFUN (__expint_lentz__, args, , "Contin
           std::complex<float> Deltaj = czero;
           int j = 1;
           int maxit = 100;
           // loop via all scenarios
           for (octave_idx_type ii = 0; ii < len_x; ++ii)
             {
               // catch ctrl + c
               OCTAVE_QUIT;
+              // Variable initialization for the current element
               xj = x_s(ii);
               y = tiny;
               Cj = y;
               Dj = czero;
               alpha_j = cone;
               beta_j = xj;
               Deltaj = czero;
               j = 1;
+              //Lentz's algorithm
               while((std::abs (Deltaj - cone)  > eps) & (j < maxit))
                 {
                   Dj = beta_j + alpha_j * Dj;
                   if (Dj == czero)
                     Dj = tiny;
                   Cj = beta_j + alpha_j / Cj;
                   if (Cj == czero)
                     Cj = tiny;
diff --git a/libinterp/corefcn/__gammainc_lentz__.cc b/libinterp/corefcn/__gammainc_lentz__.cc
--- a/libinterp/corefcn/__gammainc_lentz__.cc
+++ b/libinterp/corefcn/__gammainc_lentz__.cc
@@ -27,16 +27,17 @@
 DEFUN (__gammainc_lentz__, args, , "Continued fraction for incomplete gamma function")
 {
   int nargin = args.length ();
   octave_value_list outargs;
   if (nargin != 3)
     print_usage ();
   else
     {
+      // Values initialized in single precision
       FloatNDArray x_arg_s = args(0).array_value ();
       FloatNDArray a_arg_s = args(1).array_value ();
       bool is_single = args(2).bool_value ();
 
       // total number of scenarios: get maximum of length of all vectors
       int len_x = x_arg_s.rows ();
       int len_a = a_arg_s.rows ();
       int len = std::max(len_x,len_a);
@@ -46,50 +47,55 @@ DEFUN (__gammainc_lentz__, args, , "Cont
         error("gammainc_lentz_vec: expecting x to be of length 1 or %d", len);
       if (len_a > 1 && len_a != len)
         error("gammainc_lentz_vec: expecting a to be of length 1 or %d", len);
 
       // initialize scenario dependent output:
       dim_vector dim_scen (len, 1);
       ColumnVector f (dim_scen);
 
+      // Lentz's algorithm in two cases: double and single precision
+
       if (! is_single)
         {
           NDArray x_arg = args(0).array_value ();
           NDArray a_arg = args(1).array_value ();
           NDArray x (dim_scen);
           NDArray a (dim_scen);
 
           // initialize scenario dependent input values (idx either 0 or ii)
           if (len_x == 1)
             x.fill (x_arg(0));
           else
             x = x_arg;
+          //
           if (len_a == 1)
             a.fill (a_arg(0));
           else
             a = a_arg;
+          // Variables initialization
           static const double tiny = pow (2, -100);
           static const double eps = std::numeric_limits<double>::epsilon();
           double y, Cj, Dj, bj, aj, Deltaj;
           int j, maxit;
           maxit = 200;
           // loop via all scenarios
           for (octave_idx_type ii = 0; ii < len; ++ii)
             {
               // catch ctrl + c
               OCTAVE_QUIT;
+              // Variable initialization for the current element
               y = tiny;
               Cj = y;
               Dj = 0;
               bj = x(ii) - a(ii) + 1;
               aj = a(ii);
               Deltaj = 0;
               j = 1;
-
+              //Lentz's algorithm
               while((std::abs ((Deltaj - 1) / y)  > eps) & (j < maxit))
                 {
                   Cj = bj + aj/Cj;
                   Dj = 1 / (bj + aj*Dj);
                   Deltaj = Cj * Dj;
                   y *= Deltaj;
                   bj += 2;
                   aj = j * (a(ii) - j);
@@ -105,38 +111,41 @@ DEFUN (__gammainc_lentz__, args, , "Cont
           FloatNDArray x_s (dim_scen);
           FloatNDArray a_s (dim_scen);
 
           // initialize scenario dependent input values (idx either 0 or ii)
           if (len_x == 1)
             x_s.fill (x_arg_s(0));
           else
           x_s = x_arg_s;
+          //
           if (len_a == 1)
             a_s.fill (a_arg_s(0));
           else
             a_s = a_arg_s;
+          // Variables initialization
           static const float tiny = pow (2, -50);
           static const float eps = std::numeric_limits<float>::epsilon();
           float y, Cj, Dj, bj, aj, Deltaj;
           int j, maxit;
           maxit = 200;
           // loop via all scenarios
           for (octave_idx_type ii = 0; ii < len; ++ii)
             {
               // catch ctrl + c
               OCTAVE_QUIT;
+              // Variable initialization for the current element
               y = tiny;
               Cj = y;
               Dj = 0;
               bj = x_s(ii) - a_s(ii) + 1;
               aj = a_s(ii);
               Deltaj = 0;
               j = 1;
-
+              //Lentz's algorithm
               while((std::abs ((Deltaj - 1) / y)  > eps) & (j < maxit))
                 {
                   Cj = bj + aj/Cj;
                   Dj = 1 / (bj + aj*Dj);
                   Deltaj = Cj * Dj;
                   y *= Deltaj;
                   bj += 2;
                   aj = j * (a_s(ii) - j);
