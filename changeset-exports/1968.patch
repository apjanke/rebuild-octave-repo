# HG changeset patch
# User jwe
# Date 824525836 0
#      Sat Feb 17 02:57:16 1996 +0000
# Node ID a2e206524aa08fd7c66b914453a09840c8f18fb6
# Parent  4cb6aaa0f2c78d298732d57ddc0622d26e0e66af
[project @ 1996-02-17 02:54:24 by jwe]

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -36,16 +36,17 @@ Software Foundation, 59 Temple Place - S
 #include <sys/types.h> // XXX FIXME XXX
 
 #include "CmplxAEPBAL.h"
 #include "CmplxDET.h"
 #include "CmplxSCHUR.h"
 #include "CmplxSVD.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
+#include "lo-utils.h"
 #include "mx-base.h"
 #include "mx-inlines.cc"
 #include "oct-cmplx.h"
 
 // Fortran functions we call.
 
 extern "C"
 {
@@ -2816,16 +2817,95 @@ map (c_c_Mapper f, const ComplexMatrix& 
 void
 ComplexMatrix::map (c_c_Mapper f)
 {
   for (int j = 0; j < cols (); j++)
     for (int i = 0; i < rows (); i++)
       elem (i, j) = f (elem (i, j));
 }
 
+// Return nonzero if any element of CM has a non-integer real or
+// imaginary part.  Also extract the largest and smallest (real or
+// imaginary) values and return them in MAX_VAL and MIN_VAL. 
+
+int
+ComplexMatrix::all_integers (double& max_val, double& min_val) const
+{
+  int nr = rows ();
+  int nc = columns ();
+
+  if (nr > 0 && nc > 0)
+    {
+      Complex val = elem (0, 0);
+
+      double r_val = real (val);
+      double i_val = imag (val);
+
+      max_val = r_val;
+      min_val = r_val;
+
+      if (i_val > max_val)
+	max_val = i_val;
+
+      if (i_val < max_val)
+	min_val = i_val;
+    }
+  else
+    return 0;
+
+  for (int j = 0; j < nc; j++)
+    for (int i = 0; i < nr; i++)
+      {
+	Complex val = elem (i, j);
+
+	double r_val = real (val);
+	double i_val = imag (val);
+
+	if (r_val > max_val)
+	  max_val = r_val;
+
+	if (i_val > max_val)
+	  max_val = i_val;
+
+	if (r_val < min_val)
+	  min_val = r_val;
+
+	if (i_val < min_val)
+	  min_val = i_val;
+
+	if (D_NINT (r_val) != r_val || D_NINT (i_val) != i_val)
+	  return 0;
+      }
+  return 1;
+}
+
+int
+ComplexMatrix::too_large_for_float (void) const
+{
+  int nr = rows ();
+  int nc = columns ();
+
+  for (int j = 0; j < nc; j++)
+    for (int i = 0; i < nr; i++)
+      {
+	Complex val = elem (i, j);
+
+	double r_val = real (val);
+	double i_val = imag (val);
+
+	if (r_val > FLT_MAX
+	    || i_val > FLT_MAX
+	    || r_val < FLT_MIN
+	    || i_val < FLT_MIN)
+	  return 1;
+      }
+
+  return 0;
+}
+
 Matrix
 ComplexMatrix::all (void) const
 {
   int nr = rows ();
   int nc = cols ();
   Matrix retval;
   if (nr > 0 && nc > 0)
     {
diff --git a/liboctave/Makefile.in b/liboctave/Makefile.in
--- a/liboctave/Makefile.in
+++ b/liboctave/Makefile.in
@@ -31,20 +31,21 @@ MATRIX_INC := Array.h Array-flags.h Arra
 	dColVector.h dDiagMatrix.h dMatrix.h dRowVector.h dbleAEPBAL.h \
 	dbleCHOL.h dbleDET.h dbleGEPBAL.h dbleHESS.h dbleLU.h dbleQR.h \
 	dbleQRP.h dbleSCHUR.h dbleSVD.h
 
 INCLUDES := Bounds.h CollocWt.h DAE.h DAEFunc.h DASSL.h FEGrid.h FSQP.h \
 	LinConst.h LP.h LPsolve.h LSODE.h NLConst.h NLEqn.h NLFunc.h \
 	NLP.h NPSOL.h ODE.h ODEFunc.h Objective.h QP.h QPSOL.h Quad.h \
 	Range.h base-de.h base-min.h byte-swap.h cmd-hist.h data-conv.h \
-	dir-ops.h file-ops.h float-fmt.h f77-fcn.h getopt.h idx-vector.h \
-	lo-error.h oct-cmplx.h oct-glob.h oct-math.h oct-term.h \
-	pathsearch.h prog-args.h statdefs.h str-vec.h sun-utils.h \
-	sysdir.h $(MATRIX_INC)
+	dir-ops.h file-ops.h float-fmt.h f77-fcn.h getopt.h \
+	idx-vector.h lo-error.h lo-ieee.h lo-mappers.h lo-utils.h \
+	oct-cmplx.h oct-glob.h oct-math.h oct-term.h pathsearch.h \
+	prog-args.h statdefs.h str-vec.h sun-utils.h sysdir.h \
+	$(MATRIX_INC)
 
 TEMPLATE_SRC := Array.cc MArray.cc
 
 TI_SRC := Array-C.cc Array-ch.cc Array-i.cc Array-d.cc Array-s.cc \
 	Array-str.cc \
 	MArray-C.cc MArray-ch.cc MArray-i.cc MArray-d.cc MArray-s.cc
 
 MATRIX_SRC := Array-flags.cc CColVector.cc CDiagMatrix.cc CMatrix.cc \
@@ -55,19 +56,19 @@ MATRIX_SRC := Array-flags.cc CColVector.
 	dbleDET.cc dbleGEPBAL.cc dbleHESS.cc dbleLU.cc dbleQR.cc \
 	dbleQRP.cc dbleSCHUR.cc dbleSVD.cc
 
 SOURCES := Bounds.cc CollocWt.cc DAE.cc DASSL.cc FEGrid.cc FSQP.cc \
 	LinConst.cc LPsolve.cc LSODE.cc NLEqn.cc NPSOL.cc QPSOL.cc \
 	Quad.cc Range.cc acosh.c asinh.c atanh.c cmd-hist.cc \
 	data-conv.cc dir-ops.cc erf.c erfc.c f77-fcn.c file-ops.cc \
 	filemode.c float-fmt.cc gamma.c getopt.c getopt1.c \
-	idx-vector.cc lgamma.c mkdir.c oct-glob.cc oct-term.cc \
-	pathsearch.cc prog-args.cc rename.c rmdir.c str-vec.cc \
-	sun-utils.cc tempname.c tempnam.c \
+	idx-vector.cc lgamma.c lo-ieee.cc lo-mappers.cc lo-utils.cc \
+	mkdir.c oct-glob.cc oct-term.cc pathsearch.cc prog-args.cc \
+	rename.c rmdir.c str-vec.cc sun-utils.cc tempname.c tempnam.c \
 	$(TEMPLATE_SRC) \
 	$(TI_SRC) \
 	$(MATRIX_SRC)
 
 EXTRAS := mx-inlines.cc
 
 DISTFILES := Makefile.in safe-xstat.cin safe-xstat.hin \
 	$(SOURCES) $(INCLUDES) $(EXTRAS)
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -38,16 +38,17 @@ Software Foundation, 59 Temple Place - S
 #include <sys/types.h>  // XXX FIXME XXX
 
 #include "dbleAEPBAL.h"
 #include "dbleDET.h"
 #include "dbleSCHUR.h"
 #include "dbleSVD.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
+#include "lo-utils.h"
 #include "mx-base.h"
 #include "mx-inlines.cc"
 #include "oct-cmplx.h"
 
 // Fortran functions we call.
 
 extern "C"
 {
@@ -1826,16 +1827,68 @@ void
 Matrix::map (d_d_Mapper f)
 {
   double *d = fortran_vec (); // Ensures only one reference to my privates!
 
   for (int i = 0; i < length (); i++)
     d[i] = f (d[i]);
 }
 
+// Return nonzero if any element of M is not an integer.  Also extract
+// the largest and smallest values and return them in MAX_VAL and MIN_VAL.
+
+int
+Matrix::all_integers (double& max_val, double& min_val) const
+{
+  int nr = rows ();
+  int nc = cols ();
+
+  if (nr > 0 && nc > 0)
+    {
+      max_val = elem (0, 0);
+      min_val = elem (0, 0);
+    }
+  else
+    return 0;
+
+  for (int j = 0; j < nc; j++)
+    for (int i = 0; i < nr; i++)
+      {
+	double val = elem (i, j);
+
+	if (val > max_val)
+	  max_val = val;
+
+	if (val < min_val)
+	  min_val = val;
+
+	if (D_NINT (val) != val)
+	  return 0;
+      }
+  return 1;
+}
+
+int
+Matrix::too_large_for_float (void) const
+{
+  int nr = rows ();
+  int nc = columns ();
+
+  for (int j = 0; j < nc; j++)
+    for (int i = 0; i < nr; i++)
+      {
+	double val = elem (i, j);
+
+	if (val > FLT_MAX || val < FLT_MIN)
+	  return 1;
+      }
+
+  return 0;
+}
+
 // XXX FIXME XXX Do these really belong here?  They should maybe be
 // cleaned up a bit, no?  What about corresponding functions for the
 // Vectors?
 
 Matrix
 Matrix::all (void) const
 {
   int nr = rows ();
diff --git a/liboctave/mach-info.h b/liboctave/mach-info.h
--- a/liboctave/mach-info.h
+++ b/liboctave/mach-info.h
@@ -44,9 +44,8 @@ extern int float_format_init (void);
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
-
diff --git a/src/help.cc b/src/help.cc
--- a/src/help.cc
+++ b/src/help.cc
@@ -677,17 +677,17 @@ DEFUN_TEXT (help, args, ,
 \n\
 print cryptic yet witty messages")
 #endif
 {
   Octave_object retval;
 
   int argc = args.length () + 1;
 
-  string_vector argv = make_argv (args, "help");
+  string_vector argv = args.make_argv ("help");
 
   if (error_state)
     return retval;
 
   if (argc == 1)
     {
       simple_help ();
     }
@@ -715,17 +715,17 @@ display the definition of each NAME that
 
   begin_unwind_frame ("Ftype");
 
   unwind_protect_str (user_pref.ps4);
   user_pref.ps4 = "";
 
   int argc = args.length () + 1;
 
-  string_vector argv = make_argv (args, "type");
+  string_vector argv = args.make_argv ("type");
 
   if (error_state)
     return retval;
 
   if (argc > 1)
     {
       // XXX FIXME XXX -- we should really use getopt ()
 
@@ -857,17 +857,17 @@ DEFUN_TEXT (which, args, nargout,
 \n\
 display the type of each NAME.  If NAME is defined from an function\n\
 file, print the full name of the file.")
 {
   Octave_object retval;
 
   int argc = args.length () + 1;
 
-  string_vector argv = make_argv (args, "which");
+  string_vector argv = args.make_argv ("which");
 
   if (error_state)
     return retval;
 
   if (argc > 1)
     {
       if (nargout > 0)
 	retval.resize (argc-1, Matrix ());
diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -1132,17 +1132,17 @@ DEFUN_TEXT(echo, args, ,
                            are executed in script files and functions\n\
 \n\
 Without any arguments, toggle the current echo state.")
 {
   Octave_object retval;
 
   int argc = args.length () + 1;
 
-  string_vector argv = make_argv (args, "echo");
+  string_vector argv = args.make_argv ("echo");
 
   if (error_state)
     return retval;
 
   switch (argc)
     {
     case 1:
       {
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -1375,17 +1375,17 @@ Octave text file.\n\
 \n\
 If the option -force is given, variables with the same names as those
 found in the file will be replaced with the values read from the file.")
 {
   Octave_object retval;
 
   int argc = args.length () + 1;
 
-  string_vector argv = make_argv (args, "load");
+  string_vector argv = args.make_argv ("load");
 
   if (error_state)
     return retval;
 
   int force = 0;
 
   // It isn't necessary to have the default load format stored in a
   // user preference variable since we can determine the type of file
@@ -2182,17 +2182,17 @@ DEFUN_TEXT (save, args, ,
      [-save-builtins] file [pattern ...]\n\
 \n\
 save variables in a file")
 {
   Octave_object retval;
 
   int argc = args.length () + 1;
 
-  string_vector argv = make_argv (args, "save");
+  string_vector argv = args.make_argv ("save");
 
   if (error_state)
     return retval;
 
   // Here is where we would get the default save format if it were
   // stored in a user preference variable.
 
   int save_builtins = 0;
diff --git a/src/mappers.h b/src/mappers.h
--- a/src/mappers.h
+++ b/src/mappers.h
@@ -21,16 +21,17 @@ Software Foundation, 59 Temple Place - S
 
 */
 
 #if !defined (octave_mappers_h)
 #define octave_mappers_h 1
 
 #include <string>
 
+#include "lo-mappers.h"
 #include "oct-cmplx.h"
 
 typedef double (*d_d_Mapper)(double);
 typedef double (*d_c_Mapper)(const Complex&);
 typedef Complex (*c_c_Mapper)(const Complex&);
 
 // If can_return_complex_for_real_arg is 1, lower_limit and
 // upper_limit specify the range of values for which a real arg
@@ -65,46 +66,16 @@ struct builtin_mapper_function
   double lower_limit;
   double upper_limit;
   d_d_Mapper d_d_mapper;
   d_c_Mapper d_c_mapper;
   c_c_Mapper c_c_mapper;
   string help_string;
 };
 
-extern double arg (double x);
-extern double conj (double x);
-extern double fix (double x);
-extern double imag (double x);
-extern double real (double x);
-extern double round (double x);
-extern double signum (double x);
-extern double xisnan (double x);
-extern double xfinite (double x);
-extern double xisinf (double x);
-
-extern double xisnan (const Complex& x);
-extern double xfinite (const Complex& x);
-extern double xisinf (const Complex& x);
-
-extern Complex acos (const Complex& x);
-extern Complex acosh (const Complex& x);
-extern Complex asin (const Complex& x);
-extern Complex asinh (const Complex& x);
-extern Complex atan (const Complex& x);
-extern Complex atanh (const Complex& x);
-extern Complex ceil (const Complex& x);
-extern Complex fix (const Complex& x);
-extern Complex floor (const Complex& x);
-extern Complex log10 (const Complex& x);
-extern Complex round (const Complex& x);
-extern Complex signum (const Complex& x);
-extern Complex tan (const Complex& x);
-extern Complex tanh (const Complex& x);
-
 extern void install_mapper_functions (void);
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
diff --git a/src/oct-hist.cc b/src/oct-hist.cc
--- a/src/oct-hist.cc
+++ b/src/oct-hist.cc
@@ -518,17 +518,17 @@ DEFUN_TEXT (edit_history, args, ,
   "edit_history [first] [last]\n\
 \n\
 edit commands from the history list")
 {
   Octave_object retval;
 
   int argc = args.length () + 1;
 
-  string_vector argv = make_argv (args, "edit_history");
+  string_vector argv = args.make_argv ("edit_history");
 
   if (error_state)
     return retval;
 
   do_edit_history (argc, argv);
 
   return retval;
 }
@@ -537,17 +537,17 @@ DEFUN_TEXT (history, args, ,
   "history [N] [-w file] [-r file] [-q]\n\
 \n\
 display, save, or load command history")
 {
   Octave_object retval;
 
   int argc = args.length () + 1;
 
-  string_vector argv = make_argv (args, "history");
+  string_vector argv = args.make_argv ("history");
 
   if (error_state)
     return retval;
 
   do_history (argc, argv);
 
   return retval;
 }
@@ -556,17 +556,17 @@ DEFUN_TEXT (run_history, args, ,
   "run_history [first] [last]\n\
 \n\
 run commands from the history list")
 {
   Octave_object retval;
 
   int argc = args.length () + 1;
 
-  string_vector argv = make_argv (args, "run_history");
+  string_vector argv = args.make_argv ("run_history");
 
   if (error_state)
     return retval;
 
   do_run_history (argc, argv);
 
   return retval;
 }
diff --git a/src/oct-obj.cc b/src/oct-obj.cc
--- a/src/oct-obj.cc
+++ b/src/oct-obj.cc
@@ -24,96 +24,49 @@ Software Foundation, 59 Temple Place - S
 #if defined (__GNUG__)
 #pragma implementation
 #endif
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
+#include "error.h"
 #include "oct-obj.h"
 
-// XXX FIXME XXX -- these can probably go in oct-obj.h now.
-
-Octave_object::Octave_object (double d)
-  : Array<tree_constant> (1, tree_constant (d)) { }
-
-Octave_object::Octave_object (const Matrix& m)
-  : Array<tree_constant> (1, tree_constant (m)) { }
-
-Octave_object::Octave_object (const DiagMatrix& d)
-  : Array<tree_constant> (1, tree_constant (d)) { }
-
-Octave_object::Octave_object (const RowVector& v, int pcv)
-  : Array<tree_constant> (1, tree_constant (v, pcv)) { }
-
-Octave_object::Octave_object (const ColumnVector& v, int pcv)
-  : Array<tree_constant> (1, tree_constant (v, pcv)) { }
-
-Octave_object::Octave_object (const Complex& c)
-  : Array<tree_constant> (1, tree_constant (c)) { }
-
-Octave_object::Octave_object (const ComplexMatrix& m)
-  : Array<tree_constant> (1, tree_constant (m)) { }
-
-Octave_object::Octave_object (const ComplexDiagMatrix& d)
-  : Array<tree_constant> (1, tree_constant (d)) { }
+int
+Octave_object::all_strings (void) const
+{
+  int n = length ();
 
-Octave_object::Octave_object (const ComplexRowVector& v, int pcv)
-  : Array<tree_constant> (1, tree_constant (v, pcv)) { }
-
-Octave_object::Octave_object (const ComplexColumnVector& v, int pcv)
-  : Array<tree_constant> (1, tree_constant (v, pcv)) { }
-
-Octave_object::Octave_object (const char *s)
-  : Array<tree_constant> (1, tree_constant (s)) { }
-
-Octave_object::Octave_object (const string& s)
-  : Array<tree_constant> (1, tree_constant (s)) { }
+  for (int i = 0; i < n; i++)
+    if (! elem(i).is_string ())
+      return 0;
 
-Octave_object::Octave_object (const string_vector& s)
-  : Array<tree_constant> (1, tree_constant (s)) { }
-
-Octave_object::Octave_object (double base, double limit, double inc)
-  : Array<tree_constant> (1, tree_constant (base, limit, inc)) { }
-
-Octave_object::Octave_object (const Range& r)
-  : Array<tree_constant> (1, tree_constant (r)) { }
-
-tree_constant&
-Octave_object::operator () (int n)
-{
-  maybe_resize (n);
-  return Array<tree_constant>::operator () (n);
+  return 1;
 }
 
-tree_constant
-Octave_object::operator () (int n) const
-{
-  return Array<tree_constant>::operator () (n);
-}
-
-tree_constant&
-Octave_object::elem (int n)
+string_vector
+Octave_object::make_argv (const string& fcn_name) const
 {
-  maybe_resize (n);
-  return Array<tree_constant>::elem (n);
-}
+  string_vector argv;
+
+  if (all_strings ())
+    {
+      int n = length ();
+      argv.resize (n+1);
+      argv[0] = fcn_name;
 
-tree_constant
-Octave_object::elem (int n) const
-{
-  return Array<tree_constant>::operator () (n);
-}
+      for (int i = 0; i < n; i++)
+	argv[i+1] = elem(i).string_value ();
+    }
+  else
+    error ("%s: expecting all arguments to be strings", fcn_name.c_str ());
 
-void
-Octave_object::maybe_resize (int n)
-{
-  if (n >= length ())
-    resize (n + 1, Matrix ());
+  return argv;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/src/oct-obj.h b/src/oct-obj.h
--- a/src/oct-obj.h
+++ b/src/oct-obj.h
@@ -23,66 +23,105 @@ Software Foundation, 59 Temple Place - S
 
 #if !defined (octave_oct_obj_h)
 #define octave_oct_obj_h 1
 
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
+#include <string>
+
 #include "Array.h"
+#include "str-vec.h"
 
 // Including this is all we need because pt-const.h gives us
 // declarations for all the data types Octave knows about.
 
 #include "pt-const.h"
 
 class
 Octave_object : public Array<tree_constant>
 {
 public:
 
-  Octave_object (void) : Array<tree_constant> () { }
+  Octave_object (void)
+    : Array<tree_constant> () { }
+
   Octave_object (int n, const tree_constant& val)
     : Array<tree_constant> (n, val) { }
 
-  Octave_object (const tree_constant& tc) : Array<tree_constant> (1, tc) { }
+  Octave_object (const tree_constant& tc)
+    : Array<tree_constant> (1, tc) { }
+
+  Octave_object (double d)
+    : Array<tree_constant> (1, tree_constant (d)) { }
+
+  Octave_object (const Matrix& m)
+    : Array<tree_constant> (1, tree_constant (m)) { }
+
+  Octave_object (const DiagMatrix& d)
+    : Array<tree_constant> (1, tree_constant (d)) { }
 
-  Octave_object (double d);
-  Octave_object (const Matrix& m);
-  Octave_object (const DiagMatrix& d);
-  Octave_object (const RowVector& v, int pcv = -1);
-  Octave_object (const ColumnVector& v, int pcv = -1);
+  Octave_object (const RowVector& v, int pcv)
+    : Array<tree_constant> (1, tree_constant (v, pcv)) { }
+
+  Octave_object (const ColumnVector& v, int pcv)
+    : Array<tree_constant> (1, tree_constant (v, pcv)) { }
+
+  Octave_object (const Complex& c)
+    : Array<tree_constant> (1, tree_constant (c)) { }
+
+  Octave_object (const ComplexMatrix& m)
+    : Array<tree_constant> (1, tree_constant (m)) { }
 
-  Octave_object (const Complex& c);
-  Octave_object (const ComplexMatrix& m);
-  Octave_object (const ComplexDiagMatrix& d);
-  Octave_object (const ComplexRowVector& v, int pcv = -1);
-  Octave_object (const ComplexColumnVector& v, int pcv = -1);
+  Octave_object (const ComplexDiagMatrix& d)
+    : Array<tree_constant> (1, tree_constant (d)) { }
+
+  Octave_object (const ComplexRowVector& v, int pcv)
+    : Array<tree_constant> (1, tree_constant (v, pcv)) { }
+
+  Octave_object (const ComplexColumnVector& v, int pcv)
+    : Array<tree_constant> (1, tree_constant (v, pcv)) { }
+
+  Octave_object (const char *s)
+    : Array<tree_constant> (1, tree_constant (s)) { }
 
-  Octave_object (const char *s);
-  Octave_object (const string& s);
-  Octave_object (const string_vector& s);
+  Octave_object (const string& s)
+    : Array<tree_constant> (1, tree_constant (s)) { }
+
+  Octave_object (const string_vector& s)
+    : Array<tree_constant> (1, tree_constant (s)) { }
 
-  Octave_object (double base, double limit, double inc);
-  Octave_object (const Range& r);
+  Octave_object (double base, double limit, double inc)
+    : Array<tree_constant> (1, tree_constant (base, limit, inc)) { }
 
-  Octave_object (const Octave_object& obj) : Array<tree_constant> (obj) { }
+  Octave_object (const Range& r)
+    : Array<tree_constant> (1, tree_constant (r)) { }
+
+  Octave_object (const Octave_object& obj)
+    : Array<tree_constant> (obj) { }
 
   Octave_object& operator = (const Octave_object& obj)
     {
-      Array<tree_constant>::operator = (obj);
+      if (this != &obj)
+	Array<tree_constant>::operator = (obj);
+
       return *this;
     }
 
 // Assignment will resize on range errors.
 
-  tree_constant& operator () (int n);
+  tree_constant& operator () (int n) { return elem (n); }
+
+  tree_constant operator () (int n) const { return elem (n); }
 
-  tree_constant operator () (int n) const;
+  int all_strings (void) const;
+
+  string_vector make_argv (const string&) const;
 
 private:
 
 // This constructor is private with no definition to keep statements
 // like
 //
 //   Octave_object foo = 5;
 //   Octave_object foo = 5.0;
@@ -91,24 +130,37 @@ private:
 // constructor
 //
 //   Octave_object (n, val);
 //
 // and supply a default value to create a vector-valued Octave_object.
 
   Octave_object (int n);
 
-  void maybe_resize (int n);
+  void maybe_resize (int n)
+    {
+      if (n >= length ())
+	resize (n + 1, Matrix ());
+    }
 
-  tree_constant& elem (int n);
+  tree_constant& elem (int n)
+    {
+      maybe_resize (n);
+      return Array<tree_constant>::elem (n);
+    }
+
   tree_constant& checkelem (int n);
 
   tree_constant& xelem (int n);
 
-  tree_constant elem (int n) const;
+  tree_constant elem (int n) const
+    {
+      return Array<tree_constant>::operator () (n);
+    }
+
   tree_constant checkelem (int n) const;
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/src/pr-output.cc b/src/pr-output.cc
--- a/src/pr-output.cc
+++ b/src/pr-output.cc
@@ -1710,17 +1710,17 @@ DEFUN_TEXT (format, args, ,
   "format [style]\n\
 \n\
 set output formatting style")
 {
   Octave_object retval;
 
   int argc = args.length () + 1;
 
-  string_vector argv = make_argv (args, "format");
+  string_vector argv = args.make_argv ("format");
 
   if (error_state)
     return retval;
 
   set_format_style (argc, argv);
 
   return retval;
 }
diff --git a/src/pt-plot.cc b/src/pt-plot.cc
--- a/src/pt-plot.cc
+++ b/src/pt-plot.cc
@@ -1028,17 +1028,17 @@ DEFUN_TEXT (hold, args, ,
 \n\
 determine whether the plot window is cleared before the next line is\n\
 drawn.  With no argument, toggle the current state.") 
 {
   Octave_object retval;
 
   int argc = args.length () + 1;
 
-  string_vector argv = make_argv (args, "hold");
+  string_vector argv = args.make_argv ("hold");
 
   if (error_state)
     return retval;
 
   switch (argc)
     {
     case 1:
       clear_before_plotting = ! clear_before_plotting;
@@ -1081,17 +1081,17 @@ DEFUN_TEXT (set, args, ,
   "set [options]\n\
 \n\
 set plotting options")
 {
   Octave_object retval;
 
   int argc = args.length () + 1;
 
-  string_vector argv = make_argv (args, "set");
+  string_vector argv = args.make_argv ("set");
 
   if (error_state)
     return retval;
 
   ostrstream plot_buf;
 
   if (argc > 1)
     {
@@ -1127,17 +1127,17 @@ DEFUN_TEXT (show, args, ,
   "show [options]\n\
 \n\
 show plotting options")
 {
   Octave_object retval;
 
   int argc = args.length () + 1;
 
-  string_vector argv = make_argv (args, "show");
+  string_vector argv = args.make_argv ("show");
 
   if (error_state)
     return retval;
 
   ostrstream plot_buf;
 
   for (int i = 0; i < argc; i++)
     plot_buf << argv[i] << " ";
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -291,71 +291,16 @@ get_fcn_file_names (int no_suffix)
 	retval[k++] = names[j++];
     }
 
   retval.resize (k);
 
   return retval;
 }
 
-// Convert X to the nearest integer value.  Should not pass NaN to
-// this function.
-
-int
-NINT (double x)
-{
-  if (x > INT_MAX)
-    return INT_MAX;
-  else if (x < INT_MIN)
-    return INT_MIN;
-  else
-    return (x > 0) ? ((int) (x + 0.5)) : ((int) (x - 0.5));
-}
-
-double
-D_NINT (double x)
-{
-  if (xisinf (x) || xisnan (x))
-    return x;
-  else
-    return floor (x + 0.5);
-}
-
-// XXX FIXME XXX --  put these in some file, and make them extern.
-
-static int
-all_strings (const Octave_object& args)
-{
-  int n = args.length ();
-  for (int i = 0; i < n; i++)
-    if (! args(i).is_string ())
-      return 0;
-  return 1;
-}
-
-string_vector
-make_argv (const Octave_object& args, const string& fcn_name)
-{
-  string_vector argv;
-
-  if (all_strings (args))
-    {
-      int n = args.length ();
-      argv.resize (n+1);
-      argv[0] = fcn_name;
-
-      for (int i = 0; i < n; i++)
-	argv[i+1] = args(i).string_value ();
-    }
-  else
-    error ("%s: expecting all arguments to be strings", fcn_name.c_str ());
-
-  return argv;
-}
-
 // Return non-zero if either NR or NC is zero.  Return -1 if this
 // should be considered fatal; return 1 if this is ok.
 
 int
 empty_arg (const char *name, int nr, int nc)
 {
   int is_empty = 0;
 
@@ -392,17 +337,17 @@ search_path_for_file (const string& path
 
 DEFUN (file_in_path, args, ,
   "file_in_path (PATH, NAME)")
 {
   Octave_object retval;
 
   int argc = args.length () + 1;
 
-  string_vector argv = make_argv (args, "file_in_path");
+  string_vector argv = args.make_argv ("file_in_path");
 
   if (error_state)
     return retval;
 
   if (argc == 3)
     {
       string fname = search_path_for_file (argv[1], argv[2]);
 
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -1194,17 +1194,17 @@ DEFUN_TEXT (document, args, ,
   "document symbol string ...\n\
 \n\
 Associate a cryptic message with a variable name.")
 {
   Octave_object retval;
 
   int argc = args.length () + 1;
 
-  string_vector argv = make_argv (args, "document");
+  string_vector argv = args.make_argv ("document");
 
   if (error_state)
     return retval;
 
   if (argc == 3)
     {
       string name = argv[1];
       string help = argv[2];
@@ -1337,17 +1337,17 @@ DEFUN_TEXT (who, args, ,
 \n\
 List currently defined symbol(s).  Options may be shortened to one\n\
 character, but may not be combined.")
 {
   Octave_object retval;
 
   int argc = args.length () + 1;
 
-  string_vector argv = make_argv (args, "who");
+  string_vector argv = args.make_argv ("who");
 
   if (error_state)
     return retval;
 
   retval = do_who (argc, argv);
 
   return retval;
 }
@@ -1364,17 +1364,17 @@ character, but may not be combined.")
 
   Octave_object tmp_args;
   for (int i = nargin; i > 0; i--)
     tmp_args(i) = args(i-1);
   tmp_args(0) = "-long";
 
   int argc = tmp_args.length () + 1;
 
-  string_vector argv = make_argv (tmp_args, "whos");
+  string_vector argv = args.make_argv ("whos");
 
   if (error_state)
     return retval;
 
   retval = do_who (argc, argv);
 
   return retval;
 }
@@ -1852,17 +1852,17 @@ If no arguments are given, clear all use
 functions.\n\
 \n\
 With -x, exclude the named variables")
 {
   Octave_object retval;
 
   int argc = args.length () + 1;
 
-  string_vector argv = make_argv (args, "clear");
+  string_vector argv = args.make_argv ("clear");
 
   if (error_state)
     return retval;
 
   // Always clear the local table, but don't clear currently compiled
   // functions unless we are at the top level.  (Allowing that to
   // happen inside functions would result in pretty odd behavior...)
 
