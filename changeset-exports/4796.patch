# HG changeset patch
# User jwe
# Date 1077550500 0
#      Mon Feb 23 15:35:00 2004 +0000
# Node ID 962457f25a6df5ef3da5d3b76c3cdd42d0ca3d3b
# Parent  0bae5ef79e66f4d6ede4e6196146648abaae3b68
[project @ 2004-02-23 15:35:00 by jwe]

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -886,21 +886,23 @@ Array<T>::resize_and_fill (const dim_vec
   int old_len = length ();
 
   int len = get_size (dv);
 
   rep = new typename Array<T>::ArrayRep (len);
 
   dim_vector dv_old = dimensions;
 
-  if (n > dv_old.length ())
+  int dv_old_orig_len = dv_old.length ();
+
+  if (n > dv_old_orig_len)
     {
       dv_old.resize (n);
 
-      for (int i = dv_old.length (); i < n; i++)
+      for (int i = dv_old_orig_len; i < n; i++)
 	dv_old.elem (i) = 1;
     }
 
   dimensions = dv;
 
   if (len > 0)
     {
       Array<int> ra_idx (dimensions.length (), 0);
@@ -2962,17 +2964,19 @@ assignN (Array<LT>& lhs, const Array<RT>
 		{
 		  for (int i = 0; i < n_idx-1; i++)
 		    final_lhs_dims(i) = new_dims(i);
 		}
 	      else
 		final_lhs_dims = new_dims;
 
 	      lhs.resize_and_fill (new_dims, rfv);
+
 	      lhs_dims = lhs.dims ();
+
 	      lhs_dims_len = lhs_dims.length ();
 
 	      frozen_len = freeze (idx, lhs_dims, true);
 
 	      if (rhs_is_scalar)
 		{
 		  if  (! final_lhs_dims.any_zero ())
 		    {
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2004-02-23  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* Array.cc (Array<T>::resize_and_fill (const dim_vector&, const T&)): 
+	Fix thinko in extending dimensions.
+
 2004-02-20  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Range.cc (Range::matrix_value, Range::min, Range::max):
 	Don't compute values beyond the limits of the range.
 	(operator << (std::ostream&, const Range&)): Likewise.
 
 2004-02-18  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
