# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1455722196 18000
#      Wed Feb 17 10:16:36 2016 -0500
# Node ID d3b265a83adcbde29b87f8fe70c5e2ac5e18ab45
# Parent  41e39c9b35d31854c7e1f1c01453ed723f3a771c
make building without qrupdate work again

diff --git a/liboctave/numeric/chol.cc b/liboctave/numeric/chol.cc
--- a/liboctave/numeric/chol.cc
+++ b/liboctave/numeric/chol.cc
@@ -41,20 +41,17 @@ along with Octave; see the file COPYING.
 #include "fColVector.h"
 #include "fMatrix.h"
 #include "fRowVector.h"
 #include "lo-error.h"
 #include "oct-locbuf.h"
 #include "oct-norm.h"
 
 #if ! defined (HAVE_QRUPDATE)
-#  include "CmplxQR.h"
-#  include "dbleQR.h"
-#  include "fCmplxQR.h"
-#  include "floatQR.h"
+#  include "qr.h"
 #endif
 
 extern "C"
 {
   F77_RET_T
   F77_FUNC (dpotrf, DPOTRF) (F77_CONST_CHAR_ARG_DECL,
                              const octave_idx_type&, double*,
                              const octave_idx_type&, octave_idx_type&
diff --git a/liboctave/numeric/qr.cc b/liboctave/numeric/qr.cc
--- a/liboctave/numeric/qr.cc
+++ b/liboctave/numeric/qr.cc
@@ -321,17 +321,16 @@ qr<T>::regular (void) const
 
   return retval;
 }
 
 #if ! defined (HAVE_QRUPDATE)
 
 // Replacement update methods.
 
-static
 void
 warn_qrupdate_once (void)
 {
   static bool warned = false;
 
   if (! warned)
     {
       (*current_liboctave_warning_with_id_handler)
@@ -370,31 +369,31 @@ qr<T>::update (const T& u, const T& v)
   octave_idx_type n = r.columns ();
 
   if (u.rows () != m || v.rows () != n || u.cols () != v.cols ())
     (*current_liboctave_error_handler) ("qrupdate: dimensions mismatch");
 
   init (q*r + u * v.hermitian (), get_type ());
 }
 
-template <typename T>
+template <typename T, typename CV_T>
 static
 T
 insert_col (const T& a, octave_idx_type i, const CV_T& x)
 {
   T retval (a.rows (), a.columns () + 1);
   retval.assign (idx_vector::colon, idx_vector (0, i),
                  a.index (idx_vector::colon, idx_vector (0, i)));
   retval.assign (idx_vector::colon, idx_vector (i), x);
   retval.assign (idx_vector::colon, idx_vector (i+1, retval.columns ()),
                  a.index (idx_vector::colon, idx_vector (i, a.columns ())));
   return retval;
 }
 
-template <typename T>
+template <typename T, typename RV_T>
 static
 T
 insert_row (const T& a, octave_idx_type i, const RV_T& x)
 {
   T retval (a.rows () + 1, a.columns ());
   retval.assign (idx_vector (0, i), idx_vector::colon,
                  a.index (idx_vector (0, i), idx_vector::colon));
   retval.assign (idx_vector (i), idx_vector::colon, x);
