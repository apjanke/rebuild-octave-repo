# HG changeset patch
# User jwe
# Date 1173291647 0
#      Wed Mar 07 18:20:47 2007 +0000
# Node ID e8c42df3d234b31c1b1f327fc5ac3fb51d3b89a2
# Parent  3f3e86e9fb57eb2de4ce60d0bc9e4731ff1688e8
[project @ 2007-03-07 18:20:46 by jwe]

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -2520,48 +2520,50 @@ assign1 (Array<LT>& lhs, const Array<RT>
 
       if (lhs_len == 0 && ! lhs_dims.all_zero ())
 	{
 	  (*current_liboctave_error_handler)
 	    ("A(I) = X: unable to resize A");
 
 	  retval = 0;
 	}
-
-      if (rhs_len == n || rhs_len == 1)
-	{
-	  octave_idx_type max_idx = lhs_idx.max () + 1;
-	  if (max_idx > lhs_len)
-	    lhs.resize_and_fill (max_idx, rfv);
-	}
-
-      if (rhs_len == n)
-	{
-	  for (octave_idx_type i = 0; i < n; i++)
-	    {
-	      octave_idx_type ii = lhs_idx.elem (i);
-	      lhs.elem (ii) = rhs.elem (i);
-	    }
-	}
-      else if (rhs_len == 1)
-	{
-	  RT scalar = rhs.elem (0);
-
-	  for (octave_idx_type i = 0; i < n; i++)
-	    {
-	      octave_idx_type ii = lhs_idx.elem (i);
-	      lhs.elem (ii) = scalar;
-	    }
-	}
       else
 	{
-	  (*current_liboctave_error_handler)
-	    ("A(I) = X: X must be a scalar or a vector with same length as I");
-
-	  retval = 0;
+	  if (rhs_len == n || rhs_len == 1)
+	    {
+	      octave_idx_type max_idx = lhs_idx.max () + 1;
+	      if (max_idx > lhs_len)
+		lhs.resize_and_fill (max_idx, rfv);
+	    }
+
+	  if (rhs_len == n)
+	    {
+	      for (octave_idx_type i = 0; i < n; i++)
+		{
+		  octave_idx_type ii = lhs_idx.elem (i);
+		  lhs.elem (ii) = rhs.elem (i);
+		}
+	    }
+	  else if (rhs_len == 1)
+	    {
+	      RT scalar = rhs.elem (0);
+
+	      for (octave_idx_type i = 0; i < n; i++)
+		{
+		  octave_idx_type ii = lhs_idx.elem (i);
+		  lhs.elem (ii) = scalar;
+		}
+	    }
+	  else
+	    {
+	      (*current_liboctave_error_handler)
+		("A(I) = X: X must be a scalar or a vector with same length as I");
+
+	      retval = 0;
+	    }
 	}
     }
   else if (lhs_idx.is_colon ())
     {
       dim_vector lhs_dims = lhs.dims ();
 
       if (lhs_dims.all_zero ())
 	{
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,12 @@
 2007-03-07  John W. Eaton  <jwe@octave.org>
 
+	* Array.cc (assign1): Avoid resizing if there is an error.
+
 	* dMatrix.cc, CMatrix.cc (operator *): Only check
 	f77_exception_encountered immediately after calls that use F77_XFCN.
 
 	* Array.cc (assign1 (Array<LT>&, const Array<RT>&, const LT&)):
 	Only allow resizing empty LHS if it is 0x0.
 
 	* Array.cc (Array<T>::maybe_delete_elements (Array<idx_vector>&,
 	const T&)): Handle case of more indices than dimensions.
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2007-03-07  John W. Eaton  <jwe@octave.org>
+
+	* testfun/assert.m: Check that number of dimensions match before
+	checking dimensions.
+
 2007-03-07  Muthiah Annamalai  <muthuspost@gmail.com>
 
 	* specfun/perms.m, specfun/factorial.m: Check args.
 
 2007-03-07  John W. Eaton  <jwe@octave.org>
 
 	* plot/mesh.m: Call newplot before doing anything.
 
diff --git a/scripts/testfun/assert.m b/scripts/testfun/assert.m
--- a/scripts/testfun/assert.m
+++ b/scripts/testfun/assert.m
@@ -95,18 +95,18 @@ function assert(cond, expected, tol)
 	  assert(cond{i},expected{i},tol);
 	endfor
       catch
 	iserror = 1;
       end
     endif
 
   elseif (isstruct (expected))
-    if (!isstruct (cond) || any(size(cond) != size(expected)) || ...
-	rows(struct_elements(cond)) != rows(struct_elements(expected)))
+    if (!isstruct (cond) || any(size(cond) != size(expected))
+	|| rows(struct_elements(cond)) != rows(struct_elements(expected)))
       iserror = 1;
     else
       try
 	empty=prod(size(cond))==0;
 	normal=prod(size(cond))==1;
 	for [v,k] = cond
 	  if !struct_contains(expected,k), error; endif
 	  if empty, v = cell(1,0); endif
@@ -116,17 +116,18 @@ function assert(cond, expected, tol)
       catch
 	iserror = 1;
       end
     endif
 
   elseif (isempty (expected))
     iserror = (any (size (cond) != size (expected)));
 
-  elseif (any (size (cond) != size (expected)))
+  elseif (ndims (cond) != ndims (expected)
+	  || any (size (cond) != size (expected)))
     iserror = 1;
     coda = "Dimensions don't match";
 
   elseif tol==0 && !strcmp(typeinfo(cond),typeinfo(expected))
     iserror = 1;
     coda = ["Type ",typeinfo(cond)," != ",typeinfo(expected)];
 
   else # numeric
