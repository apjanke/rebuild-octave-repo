# HG changeset patch
# User jwe
# Date 1172873287 0
#      Fri Mar 02 22:08:07 2007 +0000
# Node ID ac3d67504f85f354125eb37630422f9b3ec302f1
# Parent  41c1deed5613edd4bc007db303f0f0ce2407ee42
[project @ 2007-03-02 22:08:06 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,11 +1,12 @@
 2007-03-02  John W. Eaton  <jwe@octave.org>
 
 	* parse.y (Fautoload): Undo previous change.
+	Warn if FILE is not an absolute file name.
 
 	* utils.cc (make_absolute): Make copy of arg before 
 
 2007-03-01  John W. Eaton  <jwe@octave.org>
 
 	* ov-base-mat.h	(octave_base_matrix::octave_base_matrix (const MT&), 
 	(octave_base_matrix::octave_base_matrix (const MT&, const MatrixType&)):
 	Use common definition with default argument value.
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -3501,18 +3501,41 @@ load_fcn_from_file (symbol_record *sym_r
   return load_fcn_from_file (sym_rec->name (), exec_script);
 }
 
 DEFCMD (autoload, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} autoload (@var{function}, @var{file})\n\
 Define @var{function} to autoload from @var{file}.\n\
 \n\
-With no arguments, return a structure with information about all\n\
-currently autoloaded functions.\n\
+The second argument, @var{file}, should be an absolute file name and\n\
+should not depend on the Octave load path.\n\
+\n\
+Normally, calls to @code{autoload} appear in PKG_ADD script files that\n\
+are evaluated when a directory is added to the Octave's load path.  To\n\
+avoid having to hardcode directory names in @var{file}, it is customary\n\
+to use\n\
+\n\
+@example\n\
+autoload (\"foo\",\n\
+          fullfile (fileparts (mfilename (\"fullpath\")),\n\
+                    \"bar.oct\"));\n\
+@end example\n\
+\n\
+Uses like\n\
+\n\
+@example\n\
+autoload (\"foo\", file_in_loadpth (\"bar.oct\"))\n\
+@end example\n\
+\n\
+@noindent\n\
+are strongly discouraged.\n\
+\n\
+With no arguments, return a structure containing the curre autoload map.\n\
+@seealso{PKG_ADD}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin == 0)
     {
@@ -3536,17 +3559,25 @@ currently autoloaded functions.\n\
 
       retval = m;
     }
   else if (nargin == 2)
     {
       string_vector argv = args.make_argv ("autoload");
 
       if (! error_state)
-      	autoload_map[argv[1]] = argv[2];
+        {
+	  std::string nm = argv[2];
+
+	  if (! octave_env::absolute_pathname (nm))
+	    warning ("autoload: `%s' is not an absolute file name",
+		     nm.c_str ());
+
+	  autoload_map[argv[1]] = nm;
+	}
     }
   else
     print_usage ();
 
   return retval;
 }
 
 void
