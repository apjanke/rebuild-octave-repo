# HG changeset patch
# User jwe
# Date 941789519 0
#      Fri Nov 05 08:11:59 1999 +0000
# Node ID 14cfc9475fe4945af8366e26fc906587545da5c3
# Parent  585a8809fd9be9e5786957d09d357e32ee10c000
[project @ 1999-11-05 08:11:58 by jwe]

diff --git a/src/file-io.cc b/src/file-io.cc
--- a/src/file-io.cc
+++ b/src/file-io.cc
@@ -89,22 +89,16 @@ initialize_file_io (void)
 }
 
 void
 close_files (void)
 {
   octave_stream_list::clear ();
 }
 
-static void
-gripe_invalid_file_id (const char *fcn)
-{
-  ::error ("%s: invalid file id", fcn);
-}
-
 static int
 fopen_mode_to_ios_mode (const string& mode)
 {
   int retval = 0;
 
   if (! mode.empty ())
     {
       // Could probably be faster, but does it really matter?
@@ -156,22 +150,18 @@ DEFUN (is_stream, args, ,
 DEFUN (fclose, args, ,
   "fclose (FILENUM): close a file")
 {
   double retval = -1.0;
 
   int nargin = args.length ();
 
   if (nargin == 1)
-    {
-      retval = static_cast<double> (octave_stream_list::remove (args(0)));
-
-      if (retval < 0)
-	gripe_invalid_file_id ("fclose");
-    }
+    retval = static_cast<double> (octave_stream_list::remove (args(0),
+				  "fclose"));
   else
     print_usage ("fclose");
 
   return retval;
 }
 
 DEFUN (fflush, args, ,
   "fflush (FILENUM): flush buffered data to output file")
@@ -189,22 +179,20 @@ DEFUN (fflush, args, ,
       if (fid == 1)
 	{
 	  flush_octave_stdout ();
 
 	  retval = 0.0;
 	}
       else
 	{
-	  octave_stream os = octave_stream_list::lookup (fid);
+	  octave_stream os = octave_stream_list::lookup (fid, "fflush");
 
-	  if (os.is_valid ())
+	  if (! error_state)
 	    retval = static_cast<double> (os.flush ());
-	  else
-	    gripe_invalid_file_id ("fflush");
 	}
     }
   else
     print_usage ("fflush");
 
   return retval;
 }
 
@@ -217,35 +205,33 @@ read a string from a file")
 
   retval(1) = 0.0;
   retval(0) = -1.0;
 
   int nargin = args.length ();
 
   if (nargin == 1 || nargin == 2)
     {
-      octave_stream os = octave_stream_list::lookup (args(0));
+      octave_stream os = octave_stream_list::lookup (args(0), "fgetl");
 
-      if (os.is_valid ())
+      if (! error_state)
 	{
 	  octave_value len_arg = (nargin == 2)
 	    ? args(1) : octave_value (static_cast<double> (INT_MAX));
 
 	  bool err = false;
 
 	  string tmp = os.getl (len_arg, err);
 
 	  if (! err)
 	    {
 	      retval(1) = static_cast<double> (tmp.length ());
 	      retval(0) = tmp;
 	    }
 	}
-      else
-	gripe_invalid_file_id ("fgetl");
     }
   else
     print_usage ("fgetl");
 
   return retval;
 }
 
 DEFUN (fgets, args, ,
@@ -257,35 +243,33 @@ read a string from a file")
 
   retval(1) = 0.0;
   retval(0) = -1.0;
 
   int nargin = args.length ();
 
   if (nargin == 1 || nargin == 2)
     {
-      octave_stream os = octave_stream_list::lookup (args(0));
+      octave_stream os = octave_stream_list::lookup (args(0), "fgets");
 
-      if (os.is_valid ())
+      if (! error_state)
 	{
 	  octave_value len_arg = (nargin == 2)
 	    ? args(1) : octave_value (static_cast<double> (INT_MAX));
 
 	  bool err = false;
 
 	  string tmp = os.gets (len_arg, err);
 
 	  if (! err)
 	    {
 	      retval(1) = static_cast<double> (tmp.length ());
 	      retval(0) = tmp;
 	    }
 	}
-      else
-	gripe_invalid_file_id ("fgets");
     }
   else
     print_usage ("fgets");
 
   return retval;
 }
 
 static octave_stream
@@ -467,22 +451,20 @@ DEFUN (frewind, args, ,
   "frewind (FILENUM): set file position at beginning of file")
 {
   double retval = -1.0;
 
   int nargin = args.length ();
 
   if (nargin == 1)
     {
-      octave_stream os = octave_stream_list::lookup (args(0));
+      octave_stream os = octave_stream_list::lookup (args(0), "frewind");
 
-      if (os.is_valid ())
+      if (! error_state)
 	retval = static_cast<double> (os.rewind ());
-      else
-	gripe_invalid_file_id ("frewind");
     }
   else
     print_usage ("frewind");
 
   return retval;
 }
 
 DEFUN (fseek, args, ,
@@ -497,49 +479,45 @@ ORIGIN may be one of:\n\
   SEEK_END : offset is relative to the end of the file")
 {
   double retval = -1.0;
 
   int nargin = args.length ();
 
   if (nargin == 2 || nargin == 3)
     {
-      octave_stream os = octave_stream_list::lookup (args(0));
+      octave_stream os = octave_stream_list::lookup (args(0), "fseek");
 
-      if (os.is_valid ())
+      if (! error_state)
 	{
 	  octave_value origin_arg = (nargin == 3)
 	    ? args(2) : octave_value (-1.0);
 
 	  retval = static_cast<double> (os.seek (args(1), origin_arg));
 	}
-      else
-	::error ("fseek: invalid file id");
     }
   else
     print_usage ("fseek");
 
   return retval;
 }
 
 DEFUN (ftell, args, ,
   "POSITION = ftell (FILENUM): returns the current file position")
 {
   double retval = -1.0;
 
   int nargin = args.length ();
 
   if (nargin == 1)
     {
-      octave_stream os = octave_stream_list::lookup (args(0));
+      octave_stream os = octave_stream_list::lookup (args(0), "ftell");
 
-      if (os.is_valid ())
+      if (! error_state)
 	retval = static_cast<double> (os.tell ());
-      else
-	gripe_invalid_file_id ("ftell");
     }
   else
     print_usage ("ftell");
 
   return retval;
 }
 
 DEFUN (fprintf, args, ,
@@ -550,24 +528,24 @@ DEFUN (fprintf, args, ,
   int nargin = args.length ();
 
   if (nargin > 1 || (nargin > 0 && args(0).is_string ()))
     {
       octave_stream os;
       int fmt_n = 0;
 
       if (args(0).is_string ())
-	os = octave_stream_list::lookup (1);
+	os = octave_stream_list::lookup (1, "fprintf");
       else
 	{
 	  fmt_n = 1;
-	  os = octave_stream_list::lookup (args(0));
+	  os = octave_stream_list::lookup (args(0), "fprintf");
 	}
 
-      if (os.is_valid ())
+      if (! error_state)
 	{
 	  if (args(fmt_n).is_string ())
 	    {
 	      string fmt = args(fmt_n).string_value ();
 
 	      octave_value_list tmp_args;
 
 	      if (nargin > 1 + fmt_n)
@@ -578,40 +556,36 @@ DEFUN (fprintf, args, ,
 		    tmp_args(i-fmt_n-1) = args(i);
 		}
 
 	      retval = os.printf (fmt, tmp_args);
 	    }
 	  else
 	    ::error ("fprintf: format must be a string");
 	}
-      else
-	gripe_invalid_file_id ("fprintf");
     }
   else
     print_usage ("fprintf");
 
   return retval;
 }
 
 DEFUN (fputs, args, ,
   "fputs (FILENUM, STRING)")
 {
   double retval = -1.0;
 
   int nargin = args.length ();
 
   if (nargin == 2)
     {
-      octave_stream os = octave_stream_list::lookup (args(0));
+      octave_stream os = octave_stream_list::lookup (args(0), "fputs");
 
-      if (os.is_valid ())
+      if (! error_state)
 	retval = os.puts (args(1));
-      else
-	gripe_invalid_file_id ("fputs");
     }
   else
     print_usage ("fputs");
 
   return retval;
 }
 
 DEFUN (sprintf, args, ,
@@ -687,42 +661,40 @@ in FORMAT corresponding to a single scal
 more `C-like', and also compatible with previous versions of Octave")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 3 && args(2).is_string ())
     {
-      octave_stream os = octave_stream_list::lookup (args(0));
+      octave_stream os = octave_stream_list::lookup (args(0), "fscanf");
 
-      if (os.is_valid ())
+      if (! error_state)
 	{
 	  if (args(1).is_string ())
 	    {
 	      string fmt = args(1).string_value ();
 
 	      retval = os.oscanf (fmt);
 	    }
 	  else
 	    ::error ("fscanf: format must be a string");
 	}
-      else
-	gripe_invalid_file_id ("fscanf");
     }
   else
     {
       retval (1) = 0.0;
       retval (0) = Matrix ();
 
       if (nargin == 2 || nargin == 3)
 	{
-	  octave_stream os = octave_stream_list::lookup (args(0));
+	  octave_stream os = octave_stream_list::lookup (args(0), "fscanf");
 
-	  if (os.is_valid ())
+	  if (error_state)
 	    {
 	      if (args(1).is_string ())
 		{
 		  string fmt = args(1).string_value ();
 
 		  int count = 0;
 
 		  Matrix size = (nargin == 3)
@@ -734,18 +706,16 @@ more `C-like', and also compatible with 
 
 		      retval(1) = static_cast<double> (count);
 		      retval(0) = tmp;
 		    }
 		}
 	      else
 		::error ("fscanf: format must be a string");
 	    }
-	  else
-	    gripe_invalid_file_id ("fscanf");
 	}
       else
 	print_usage ("fscanf");
     }
 
   return retval;
 }
 
@@ -978,19 +948,19 @@ Reads data in binary form of type PRECIS
 
   int nargin = args.length ();
 
   if (nargin > 0 && nargin < 6)
     {
       retval(1) = -1.0;
       retval(0) = Matrix ();
 
-      octave_stream os = octave_stream_list::lookup (args(0));
+      octave_stream os = octave_stream_list::lookup (args(0), "fread");
 
-      if (os.is_valid ())
+      if (! error_state)
 	{
 	  octave_value size = (nargin > 1)
 	    ? args(1) : octave_value (octave_Inf);
 
 	  octave_value prec = (nargin > 2)
 	    ? args(2) : octave_value ("uchar");
 
 	  octave_value skip = (nargin > 3)
@@ -1001,18 +971,16 @@ Reads data in binary form of type PRECIS
 
 	  int count = -1;
 
 	  octave_value tmp = do_fread (os, size, prec, skip, arch, count);
 
 	  retval(1) = static_cast<double> (count);
 	  retval(0) = tmp;
 	}
-      else
-	gripe_invalid_file_id ("fread");
     }
   else
     print_usage ("fread");
 
   return retval;
 }
 
 static int
@@ -1106,37 +1074,35 @@ DEFUN (fwrite, args, ,
   COUNT     : number of elements written")
 {
   octave_value retval = -1.0;
 
   int nargin = args.length ();
 
   if (nargin > 1 && nargin < 6)
     {
-      octave_stream os = octave_stream_list::lookup (args(0));
+      octave_stream os = octave_stream_list::lookup (args(0), "fwrite");
 
-      if (os.is_valid ())
+      if (! error_state)
 	{
 	  octave_value data = args(1);
 
 	  octave_value prec = (nargin > 2)
 	    ? args(2) : octave_value ("uchar");
 
 	  octave_value skip = (nargin > 3)
 	    ? args(3) : octave_value (0.0);
 
 	  octave_value arch = (nargin > 4)
 	    ? args(4) : octave_value ("unknown");
 
 	  double status = do_fwrite (os, data, prec, skip, arch);
 
 	  retval = status;
 	}
-      else
-	gripe_invalid_file_id ("fwrite");
     }
   else
     print_usage ("fwrite");
 
   return retval;
 }
 
 DEFUN (feof, args, ,
@@ -1146,22 +1112,20 @@ DEFUN (feof, args, ,
  file specified by FILENUM from fopen")
 {
   double retval = -1.0;
 
   int nargin = args.length ();
 
   if (nargin == 1)
     {
-      octave_stream os = octave_stream_list::lookup (args(0));
+      octave_stream os = octave_stream_list::lookup (args(0), "feof");
 
-      if (os.is_valid ())
+      if (! error_state)
 	retval = os.eof () ? 1.0 : 0.0;
-      else
-	gripe_invalid_file_id ("feof");
     }
   else
     print_usage ("feof");
 
   return retval;
 }
 
 DEFUN (ferror, args, ,
@@ -1171,19 +1135,19 @@ DEFUN (ferror, args, ,
  file specified by FILENUM from fopen")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 1 || nargin == 2)
     {
-      octave_stream os = octave_stream_list::lookup (args(0));
+      octave_stream os = octave_stream_list::lookup (args(0), "ferror");
 
-      if (os.is_valid ())
+      if (! error_state)
 	{
 	  bool clear = false;
 
 	  if (nargin == 2)
 	    {
 	      string opt = args(1).string_value ();
 
 	      if (! error_state)
@@ -1194,18 +1158,16 @@ DEFUN (ferror, args, ,
 
 	  int error_number = 0;
 
 	  string error_message = os.error (clear, error_number);
 
 	  retval(1) = static_cast<double> (error_number);
 	  retval(0) = error_message;
 	}
-      else
-	gripe_invalid_file_id ("ferror");
     }
   else
     print_usage ("ferror");
 
   return retval;
 }
 
 DEFUN (popen, args, ,
@@ -1289,22 +1251,18 @@ Close a file identifier that was opened 
 use @code{fclose} for the same purpose.\n\
 @end deftypefn")
 {
   double retval = -1.0;
 
   int nargin = args.length ();
 
   if (nargin == 1)
-    {
-      retval = static_cast<double> (octave_stream_list::remove (args(0)));
-
-      if (retval < 0)
-	gripe_invalid_file_id ("pclose");
-    }
+    retval = static_cast<double> (octave_stream_list::remove (args(0),
+				  "pclose"));
   else
     print_usage ("pclose");
 
   return retval;
 }
 
 DEFUN (tmpnam, args, ,
  "tmpnam (DIR, PREFIX)\n\
diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -2633,37 +2633,37 @@ octave_stream_list::instance_ok (void)
 
 octave_value
 octave_stream_list::insert (const octave_stream& os)
 {
   return (instance_ok ()) ? instance->do_insert (os) : octave_value (-1.0);
 }
 
 octave_stream
-octave_stream_list::lookup (int fid)
+octave_stream_list::lookup (int fid, const string& who)
 {
-  return (instance_ok ()) ? instance->do_lookup (fid) : octave_stream ();
+  return (instance_ok ()) ? instance->do_lookup (fid, who) : octave_stream ();
 }
 
 octave_stream
-octave_stream_list::lookup (const octave_value& fid)
+octave_stream_list::lookup (const octave_value& fid, const string& who)
 {
-  return (instance_ok ()) ? instance->do_lookup (fid) : octave_stream ();
+  return (instance_ok ()) ? instance->do_lookup (fid, who) : octave_stream ();
 }
 
 int
-octave_stream_list::remove (int fid)
+octave_stream_list::remove (int fid, const string& who)
 {
-  return (instance_ok ()) ? instance->do_remove (fid) : -1;
+  return (instance_ok ()) ? instance->do_remove (fid, who) : -1;
 }
 
 int
-octave_stream_list::remove (const octave_value& fid)
+octave_stream_list::remove (const octave_value& fid, const string& who)
 {
-  return (instance_ok ()) ? instance->do_remove (fid) : -1;
+  return (instance_ok ()) ? instance->do_remove (fid, who) : -1;
 }
 
 void
 octave_stream_list::clear (void)
 {
   if (instance)
     instance->do_clear ();
 }
@@ -2731,71 +2731,87 @@ octave_stream_list::do_insert (const oct
       list(curr_len) = os;
       stream_number = curr_len;
       curr_len++;
     }
 
   return octave_value (os, stream_number);
 }
 
+static void
+gripe_invalid_file_id (int fid, const string& who)
+{
+  if (who.empty ())
+    ::error ("invalid stream number = %d", fid);
+  else
+    ::error ("%s: invalid stream number = %d", who.c_str (), fid);
+}
+
 octave_stream
-octave_stream_list::do_lookup (int fid) const
+octave_stream_list::do_lookup (int fid, const string& who) const
 {
   octave_stream retval;
 
   if (fid >= 0 && fid < curr_len)
     retval = list(fid);
+  else
+    gripe_invalid_file_id (fid, who);
 
   return retval;
 }
 
 octave_stream
-octave_stream_list::do_lookup (const octave_value& fid) const
+octave_stream_list::do_lookup (const octave_value& fid,
+			       const string& who) const
 {
   octave_stream retval;
 
   int i = get_file_number (fid);
 
   if (! error_state)
-    retval = do_lookup (i);
+    retval = do_lookup (i, who);
 
   return retval;
 }
 
 int
-octave_stream_list::do_remove (int fid)
+octave_stream_list::do_remove (int fid, const string& who)
 {
   int retval = -1;
 
   // Can't remove stdin (cin), stdout (cout), or stderr (cerr).
 
   if (fid > 2 && fid < curr_len)
     {
       octave_stream os = list(fid);
 
-      if (os)
+      if (os.is_valid ())
 	{
 	  os.close ();
 	  list(fid) = octave_stream ();
 	  retval = 0;
 	}
+      else
+	gripe_invalid_file_id (fid, who);
     }
+  else
+    gripe_invalid_file_id (fid, who);
 
   return retval;
 }
 
 int
-octave_stream_list::do_remove (const octave_value& fid)
+octave_stream_list::do_remove (const octave_value& fid, const string& who)
 {
   int retval = -1;
 
   int i = get_file_number (fid);
 
   if (! error_state)
-    retval = do_remove (i);
+    retval = do_remove (i, who);
 
   return retval;
 }
 
 void
 octave_stream_list::do_clear (void)
 {
   // Do flush stdout and stderr.
@@ -2811,26 +2827,26 @@ octave_stream_list::do_clear (void)
 
 string_vector
 octave_stream_list::do_get_info (int fid) const
 {
   string_vector retval;
 
   octave_stream os = do_lookup (fid);
 
-  if (os)
+  if (os.is_valid ())
     {
       retval.resize (3);
 
       retval(0) = os.name ();
       retval(1) = octave_stream::mode_as_string (os.mode ());
       retval(2) = oct_mach_info::float_format_as_string (os.float_format ());
     }
   else
-    ::error ("invalid file id");
+    ::error ("invalid file id = %d", fid);
 
   return retval;
 }
 
 string_vector
 octave_stream_list::do_get_info (const octave_value& fid) const
 {
   string_vector retval;
diff --git a/src/oct-stream.h b/src/oct-stream.h
--- a/src/oct-stream.h
+++ b/src/oct-stream.h
@@ -490,21 +490,23 @@ protected:
 public:
 
   ~octave_stream_list (void) { }
 
   static bool instance_ok (void);
 
   static octave_value insert (const octave_stream& os);
 
-  static octave_stream lookup (int fid);
-  static octave_stream lookup (const octave_value& fid);
+  static octave_stream lookup (int fid, const string& who = string ());
+  static octave_stream lookup (const octave_value& fid,
+			       const string& who = string ());
 
-  static int remove (int fid);
-  static int remove (const octave_value& fid);
+  static int remove (int fid, const string& who = string ());
+  static int remove (const octave_value& fid,
+		     const string& who = string ());
 
   static void clear (void);
 
   static string_vector get_info (int fid);
   static string_vector get_info (const octave_value& fid);
 
   static string list_open_files (void);
 
@@ -517,21 +519,22 @@ private:
   Array<octave_stream> list;
 
   int curr_len;
 
   static octave_stream_list *instance;
 
   octave_value do_insert (const octave_stream& os);
 
-  octave_stream do_lookup (int fid) const;
-  octave_stream do_lookup (const octave_value& fid) const;
+  octave_stream do_lookup (int fid, const string& who = string ()) const;
+  octave_stream do_lookup (const octave_value& fid,
+			   const string& who = string ()) const;
 
-  int do_remove (int fid);
-  int do_remove (const octave_value& fid);
+  int do_remove (int fid, const string& who = string ());
+  int do_remove (const octave_value& fid, const string& who = string ());
 
   void do_clear (void);
 
   string_vector do_get_info (int fid) const;
   string_vector do_get_info (const octave_value& fid) const;
 
   string do_list_open_files (void) const;
 
diff --git a/src/syscalls.cc b/src/syscalls.cc
--- a/src/syscalls.cc
+++ b/src/syscalls.cc
@@ -103,35 +103,39 @@ system-dependent error message.\n\
 
   retval(1) = string ();
   retval(0) = -1.0;
 
   int nargin = args.length ();
 
   if (nargin == 2)
     {
-      octave_stream old_stream = octave_stream_list::lookup (args(0));
-      octave_stream new_stream = octave_stream_list::lookup (args(1));
+      octave_stream old_stream
+	= octave_stream_list::lookup (args(0), "dup2");
 
-      if (old_stream.is_valid () && new_stream.is_valid ())
+      if (! error_state)
 	{
-	  int i_old = old_stream.file_number ();
-	  int i_new = new_stream.file_number ();
+	  octave_stream new_stream
+	    = octave_stream_list::lookup (args(1), "dup2");
 
-	  if (i_old >= 0 && i_new >= 0)
+	  if (! error_state)
 	    {
-	      string msg;
+	      int i_old = old_stream.file_number ();
+	      int i_new = new_stream.file_number ();
 
-	      int status = octave_syscalls::dup2 (i_old, i_new, msg);
+	      if (i_old >= 0 && i_new >= 0)
+		{
+		  string msg;
 
-	      retval(0) = static_cast<double> (status);
-	      retval(1) = msg;
+		  int status = octave_syscalls::dup2 (i_old, i_new, msg);
+
+		  retval(0) = static_cast<double> (status);
+		  retval(1) = msg;
+		}
 	    }
-	  else
-	    error ("dup2: invalid file id");
 	}
       else
 	error ("dup2: invalid stream");
     }
   else
     print_usage ("dup2");
 
   return retval;
