# HG changeset patch
# User Rik <rik@octave.org>
# Date 1533332768 25200
#      Fri Aug 03 14:46:08 2018 -0700
# Node ID 8eec0403a370318144c2a1bc3f0cc3fea9cbec19
# Parent  8cdaef4c6d44b488fb69138294633bb2a3f95ff2
fminsearch.m: Update default TolFun to 1e-4 for Matlab compatibility.

* NEWS: Announce change in the default value of TolFun.

* fminsearch.m: Redo parts of docstring to be clearer.  Change default TolFun
value to 1e-4.  Change reported optimset defaults for MaxFunEvals and MaxIter
to [] rather than 400.  Change optional output messages to be clearer.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -27,16 +27,20 @@ Summary of important user-visible change
           Option     |  New Default   |  Old Default
       ------------------------------------------------
         FinDiffType  |   "forward"    |   "central"
         MaxFunEvals  | 100*length(x0) |     Inf
         TolFun       |     1e-6       |     1e-7
         TolX         |     1e-6       |     1e-7
         Updating     |     "off"      |     "on"
 
+ ** The fminsearch function has changed default TolFun accuracy to 1e-4
+    from 1e-7.  This change was made for Matlab compatibility, but may
+    result in different results from existing code.
+
  ** Figure graphic objects have a new property "Number" which is
     read-only and will return the handle (number) of the figure.
     However, if the property "IntegerHandle" has been set to "off" then
     the property will return an empty matrix ([]).
 
  ** Printing using the -dtiff output device will now create compressed
     images using lzw compression.  This change was made for Matlab
     compatibility.  To produce uncompressed images use the -dtiffn
diff --git a/scripts/optimization/fminsearch.m b/scripts/optimization/fminsearch.m
--- a/scripts/optimization/fminsearch.m
+++ b/scripts/optimization/fminsearch.m
@@ -18,81 +18,99 @@
 ## <https://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {} {@var{x} =} fminsearch (@var{fun}, @var{x0})
 ## @deftypefnx {} {@var{x} =} fminsearch (@var{fun}, @var{x0}, @var{options})
 ## @deftypefnx {} {@var{x} =} fminsearch (@var{fun}, @var{x0}, @var{options}, @var{fun_arg1}, @var{fun_arg2}, @dots{})
 ## @deftypefnx {} {[@var{x}, @var{fval}, @var{exitflag}, @var{output}] =} fminsearch (@dots{})
 ##
-## Find a value of @var{x} which minimizes the function @var{fun}.
+## Find a value of @var{x} which minimizes the multi-variable function
+## @var{fun}.
 ##
 ## The search begins at the point @var{x0} and iterates using the
 ## @nospell{Nelder & Mead} Simplex algorithm (a derivative-free method).  This
 ## algorithm is better-suited to functions which have discontinuities or for
 ## which a gradient-based search such as @code{fminunc} fails.
 ##
 ## Options for the search are provided in the parameter @var{options} using the
 ## function @code{optimset}.  Currently, @code{fminsearch} accepts the options:
-## @qcode{"TolX"}, @qcode{"TolFun"}, @qcode{"MaxFunEvals"}, @qcode{"MaxIter"},
-## @qcode{"Display"}, @qcode{"FunValCheck"}, and @qcode{"OutputFcn"}.
-## For a description of these options, see @code{optimset}.
+## @qcode{"Display"}, @qcode{"FunValCheck"},@qcode{"MaxFunEvals"},
+## @qcode{"MaxIter"}, @qcode{"OutputFcn"}, @qcode{"TolFun"}, @qcode{"TolX"}. 
+##
+## @qcode{"MaxFunEvals"} proscribes the maximum number of function evaluations
+## before optimization is halted.  The default value is
+## @code{200 * number_of_variables}, i.e., @code{200 * length (@var{x0})}.
+## The value must be a positive integer.
+##
+## @qcode{"MaxIter"} proscribes the maximum number of algorithm iterations
+## before optimization is halted.  The default value is
+## @code{200 * number_of_variables}, i.e., @code{200 * length (@var{x0})}.
+## The value must be a positive integer.
+## 
+## For a description of the other options, see @code{optimset}.  To initialize
+## an options structure with default values for @code{fminsearch} use
+## @code{options = optimset ("fminsearch")}.
 ##
 ## Additional inputs for the function @var{fun} can be passed as the fourth
 ## and higher arguments.  To pass function arguments while using the default
 ## @var{options} values, use @code{[]} for @var{options}.
 ##
 ## On exit, the function returns @var{x}, the minimum point, and @var{fval},
 ## the function value at the minimum.
 ##
-## The third return value @var{exitflag} is
+## The third output @var{exitflag} reports whether the algorithm succeeded and
+## may take one of the following values:
 ##
 ## @table @asis
 ## @item 1
 ## if the algorithm converged
-## (size of the simplex is smaller than @code{@var{options}.TolX} @strong{AND}
-## the step in the function value between iterations is smaller than
-## @code{@var{options}.TolFun}).
+## (size of the simplex is smaller than @code{TolX} @strong{AND} the step in
+## function value between iterations is smaller than @code{TolFun}).
 ##
 ## @item 0
 ## if the maximum number of iterations or the maximum number of function
 ## evaluations are exceeded.
 ##
 ## @item -1
 ## if the iteration is stopped by the @qcode{"OutputFcn"}.
 ## @end table
 ##
-## The fourth return value is a structure @var{output} with the fields,
-## @code{funcCount} containing the number of function calls to @var{fun},
-## @code{iterations} containing the number of iteration steps,
-## @code{algorithm} with the name of the search algorithm (always:
+## The fourth output is a structure @var{output} containing runtime
+## about the algorithm.  Fields in the structure are @code{funcCount}
+## containing the number of function calls to @var{fun}, @code{iterations}
+## containing the number of iteration steps, @code{algorithm} with the name of
+## the search algorithm (always: 
 ## @nospell{@qcode{"Nelder-Mead simplex direct search"}}), and @code{message}
 ## with the exit message.
 ##
 ## Example:
 ##
 ## @example
 ## fminsearch (@@(x) (x(1)-5).^2+(x(2)-8).^4, [0;0])
 ## @end example
+##
+## Note: If you need to find the minimum of a single variable function it is
+## probably better to use @code{fminbnd}.
 ## @seealso{fminbnd, fminunc, optimset}
 ## @end deftypefn
 
 ## PKG_ADD: ## Discard result to avoid polluting workspace with ans at startup.
 ## PKG_ADD: [~] = __all_opts__ ("fminsearch");
 
 ## FIXME: Add support for output function with "state" set to "interrupt".
 
 function [x, fval, exitflag, output] = fminsearch (fun, x0, options, varargin)
 
   ## Get default options if requested.
   if (nargin == 1 && ischar (fun) && strcmp (fun, "defaults"))
     x = optimset ("Display", "notify", "FunValCheck", "off",
-                  "MaxFunEvals", 400, "MaxIter", 400,
+                  "MaxFunEvals", [], "MaxIter", [],
                   "OutputFcn", [],
-                  "TolFun", 1e-7, "TolX", 1e-4);
+                  "TolFun", 1e-4, "TolX", 1e-4);
     return;
   endif
 
   if (nargin < 2)
     print_usage ();
   endif
 
   if (nargin < 3 || isempty (options))
@@ -149,23 +167,23 @@ endfunction
 
 function [stopit, savit, dirn, trace, tol, maxiter, tol_f, outfcn] = ...
                                                      parse_options (options, x)
 
   ## Tolerance for cgce test based on relative size of simplex.
   stopit(1) = tol = optimget (options, "TolX", 1e-4);
 
   ## Tolerance for cgce test based on step in function value.
-  tol_f = optimget (options, "TolFun", 1e-7);
+  tol_f = optimget (options, "TolFun", 1e-4);
 
   ## Max number of function evaluations.
-  stopit(2) = optimget (options, "MaxFunEvals", length (x) * 200);
+  stopit(2) = optimget (options, "MaxFunEvals", 200 * length (x));
 
   ## Max number of iterations
-  maxiter = optimget (options, "MaxIter", length (x) * 200);
+  maxiter = optimget (options, "MaxIter", 200 * length (x));
 
   ## Default target for function values.
   stopit(3) = Inf;  # FIXME: expose this parameter to the outside
 
   ## Default initial simplex.
   stopit(4) = 0;    # FIXME: expose this parameter to the outside
 
   ## Default: show progress.
@@ -264,17 +282,17 @@ function [x, exitflag, output] = nmsmax 
   endif
 
   alpha = 1;  beta = 1/2;  gamma = 2;
 
   while (exitflag != -1)   # Outer (and only) loop.
     k += 1;
 
     if (k > maxiter)
-      msg = "Exceeded maximum iterations...quitting\n";
+      msg = "Exceeded maximum iterations\n";
       break;
     endif
 
     fmax = f(1);
     if (fmax > fmax_old)
       if (! isempty (savit))
         x(:) = V(:,1);
         eval (["save " savit " x fmax nf"]);
@@ -288,34 +306,35 @@ function [x, exitflag, output] = nmsmax 
     endif
     fmax_old = fmax;
 
     ## Three stopping tests from MDSMAX.M
 
     ## Stopping Test 1 - f reached target value?
     if (fmax >= stopit(3))
       msg = "Exceeded target...quitting\n";
-      ## FIXME: Add docu when stopit(3) gets exposed to the outside
+      ## FIXME: Add documentation when stopit(3) gets exposed to the outside
       exitflag = -1;
       break;
     endif
 
     ## Stopping Test 2 - too many f-evals?
     if (nf >= stopit(2))
-      msg = "Max no. of function evaluations exceeded...quitting\n";
+      msg = "Exceeded maximum number of function evaluations\n";
+      exitflag = 0;
       break;
     endif
 
     ## Stopping Test 3 - converged?   The first part is test (4.3) in [1].
     v1 = V(:,1);
     size_simplex = norm (V(:,2:n+1)-v1(:,ones (1,n)),1) / max (1, norm (v1,1));
     step_f = max (abs (f(1) - f(2:n+1)));
     if (size_simplex <= tol && step_f <= tol_f )
-      msg = sprintf (["Simplex size %9.4e <= %9.4e and ", ...
-                      "step in function value %9.4e <= %9.4e...quitting\n"], ...
+      msg = sprintf (["Algorithm converged.  Simplex size %9.4e <= %9.4e ", ...
+                      "and step in function value %9.4e <= %9.4e\n"], ...
                       size_simplex, tol, step_f, tol_f);
       exitflag = 1;
       break;
     endif
 
     ## Call OutputFcn
     if (! isempty (outfcn))
       optimvalues.funccount = nf;
@@ -485,9 +504,8 @@ endfunction
 %!error <NaN value encountered>
 %! fminsearch (@(x) (NaN), 0, optimset ("FunValCheck", "on"));
 %!error <Inf value encountered>
 %! fminsearch (@(x) (Inf), 0, optimset ("FunValCheck", "on"));
 
 ## Test input validation
 %!error fminsearch ()
 %!error fminsearch (1)
-
