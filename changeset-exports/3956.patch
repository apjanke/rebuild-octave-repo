# HG changeset patch
# User jwe
# Date 1022218198 0
#      Fri May 24 05:29:58 2002 +0000
# Node ID 8a5596d6f7c40913cdeff1e4dd0aad9015ffe574
# Parent  dc970f5941ee4001fe1f86240ea362d18e1cc4c7
[project @ 2002-05-24 05:29:57 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,16 @@
+2002-05-24  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* configure.in: Maybe add -fno-coalesce-templates to XTRA_CXXFLAGS
+	on darwin systems.
+	(SH_LDFLAGS): Set this on darwin systems.
+	(RDYNAMIC_FLAG): Never set this to -rdynamic on darwin systems.
+	(UGLY_DEFS): Cope with broken sed or shell quoting on darwin systems.
+
 2002-05-16  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* aclocal.m4 (OCTAVE_CXX_ISO_COMPLIANT_LIBRARY): Omit cwctype.
 
 2002-05-01  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* configure.in (AC_AIX): Move before AC_MINIX and AC_ISC_POSIX.
 	(AH_BOTTOM): Move contents of acconfig.h here.
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -17,17 +17,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### for more details.
 ### 
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA. 
 
 AC_INIT
-AC_REVISION($Revision: 1.358 $)
+AC_REVISION($Revision: 1.359 $)
 AC_PREREQ(2.52)
 AC_CONFIG_SRCDIR([src/octave.cc])
 AC_CONFIG_HEADER(config.h)
 
 AC_DEFINE(OCTAVE_SOURCE, 1, [Define if this is Octave.])
   
 OCTAVE_HOST_TYPE
 
@@ -285,16 +285,23 @@ case "$canonical_host_type" in
     OCTAVE_CXX_FLAG(-mminimal-toc, [
       XTRA_CXXFLAGS="$XTRA_CXXFLAGS -mminimal-toc"])
   ;;
 esac
 
 ### We do our own template instantiation for specific compilers.
 
 if test "$cxx_auto_instantiate_templates" = no; then
+  case "$canonical_host_type" in
+    *-*-darwin*)
+      OCTAVE_CXX_FLAG(-fno-coalesce-templates, [
+	XTRA_CXXFLAGS="$XTRA_CXXFLAGS -fno-coalesce-templates"
+	AC_MSG_RESULT([adding -fno-coalesce-templates to XTRA_CXXFLAGS])])
+    ;;
+  esac
   OCTAVE_CXX_FLAG(-fno-implicit-templates, [
     XTRA_CXXFLAGS="$XTRA_CXXFLAGS -fno-implicit-templates"
     AC_MSG_RESULT([adding -fno-implicit-templates to XTRA_CXXFLAGS])])
 fi
 
 AC_SUBST(XTRA_CFLAGS)
 AC_SUBST(XTRA_CXXFLAGS)
 
@@ -631,16 +638,19 @@ case "$canonical_host_type" in
   alpha*-dec-osf*)
     CPICFLAG=
     CXXPICFLAG=
     FPICFLAG=
     SH_LDFLAGS="-shared -Xlinker -expect_unresolved -Xlinker '*'"
     SONAME_FLAGS='-Xlinker -soname -Xlinker $@'
     RLD_FLAG='-Xlinker -rpath -Xlinker $(octlibdir)'
   ;;
+  *-*-darwin*)
+    SH_LDFLAGS='-bundle -bundle_loader $(bindir)/octave'
+  ;;
   *-*-linux* | *-*-gnu*)
     SONAME_FLAGS='-Xlinker -soname -Xlinker $@'
     RLD_FLAG='-Xlinker -rpath -Xlinker $(octlibdir)'
   ;;
   i[[3456]]86-*-sco3.2v5*)
     SONAME_FLAGS='-Xlinker -h -Xlinker $@'
     RLD_FLAG=
     SH_LDFLAGS=-G
@@ -883,17 +893,23 @@ if test "$WITH_DL" = yes || test "$WITH_
 	if test "$WITH_DL" = yes; then
 	  AC_MSG_ERROR([--enable-dl specified, but functions are missing!])
 	fi
 	WITH_DL=false
       fi
     ;;
   esac
   if $WITH_DL; then
-    OCTAVE_CXX_FLAG(-rdynamic, [RDYNAMIC_FLAG=-rdynamic])
+    case "$canonical_host_type" in
+      *-*-darwin*)
+      ;;
+      *)
+        OCTAVE_CXX_FLAG(-rdynamic, [RDYNAMIC_FLAG=-rdynamic])
+      ;;
+    esac
     AC_DEFINE(WITH_DL, 1, [Define if using dlopen/dlsym.])
   fi
 else
   WITH_DL=false
 fi
 AC_SUBST(WITH_DL)
 AC_SUBST(LIBDLFCN)
 AC_SUBST(DLFCN_INCFLAGS)
@@ -1117,17 +1133,29 @@ OCTAVE_PROG_GNUPLOT
 OCTAVE_PROG_PAGER
 OCTAVE_PROG_GPERF
 
 ### Even though we include config.h, we need to have the preprocessor
 ### defines available in a variable for the octave-bug script.  Use
 ### UGLY_DEFS for that.
 
 AC_OUTPUT_MAKE_DEFS
-UGLY_DEFS=`echo $DEFS | sed 's,\\",\\\\\\\\\\\\\\\\\\",g'`
+
+
+dnl Maybe this should really be conditional on "broken sed", or
+dnl "broken shell backslash quoting" or somesuch.
+dnl
+case "$canonical_host_type" in
+  *-*-darwin*)
+    UGLY_DEFS=`echo $DEFS | sed 's,\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",g'`
+  ;;
+  *)
+    UGLY_DEFS=`echo $DEFS | sed 's,\\",\\\\\\\\\\\\\\\\\\",g'`
+  ;;
+esac
 AC_MSG_RESULT([defining UGLY_DEFS to be $UGLY_DEFS])
 AC_SUBST(UGLY_DEFS)
 
 ### Maybe add -Wall to compiler flags now that we're done feature
 ### testing. 
 
 if test -z "$EXTERN_CFLAGS"; then
   OCTAVE_CC_FLAG(-Wall)
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,19 @@
+2002-05-24  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* load-save.cc (hdf5_import_multidim, hdf5_check_attr,
+	hdf5_callback_data, hdf5_read_next_data, read_hdf5_data,
+	add_hdf5_data): Use 0, not NULL in calls to HDF routines.
+
+	* oct-procbuf.cc (octave_procbuf::open): Use NULL, not 0 as last
+	arg in call to execl.xo
+
+	* debug.cc (get_user_function): Initialise dbg_fcn to 0, not NULL.
+
 2002-05-23  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* DLD-FUNCTIONS/lsode.cc (LSODE_options::da_set_opt_mf,
 	LSODE_options::da_get_opt_mf): New typedefs.
 	(LSODE_OPTIONS::da_set_fcn, LSODE_OPTIONS::da_get_fcn): New fields.
 	(lsode_option_table): Fill them in.
 	(set_lsode_option (const Array<double>&)): New function.
 	(print_lsode_option_list): Handle vector options.
diff --git a/src/debug.cc b/src/debug.cc
--- a/src/debug.cc
+++ b/src/debug.cc
@@ -47,17 +47,17 @@ Software Foundation, 59 Temple Place - S
 #include "pt-stmt.h"
 #include "toplev.h"
 #include "unwind-prot.h"
 #include "variables.h"
 
 static octave_user_function *
 get_user_function (std::string str = "")
 {
-  octave_user_function *dbg_fcn = NULL;
+  octave_user_function *dbg_fcn = 0;
 
   if (str.compare (""))
     {
       symbol_record *ptr = curr_sym_tab->lookup (str);
 
       if (ptr && ptr->is_user_function ())
 	{
 	  octave_value tmp = ptr->def ();
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -1180,26 +1180,26 @@ hdf5_import_multidim (hid_t data_id, hid
 
   if (curdim == 1)
     {
       // import 2d dataset for 1st 2 dims directly as a matrix
       int nr, nc;    // rows and columns
       nc = dims[0];  // octave uses column-major & HDF5 uses row-major
       nr = dims[1];
 
-      hid_t mem_space_id = H5Screate_simple (2, dims, NULL);
+      hid_t mem_space_id = H5Screate_simple (2, dims, 0);
 
       if (mem_space_id < 0)
 	return -1;
 
       if (H5Sselect_all (mem_space_id) < 0)
 	return -1;
     
       if (H5Sselect_hyperslab (space_id, H5S_SELECT_SET,
-			       start, NULL, count, NULL) < 0)
+			       start, 0, count, 0) < 0)
 	{
 	  H5Sclose (mem_space_id);
 	  return -1;
 	}
     
       if (type_id == H5T_NATIVE_DOUBLE)
 	{
 	  // real matrix
@@ -1264,17 +1264,17 @@ hdf5_check_attr (hid_t loc_id, const cha
 
   H5E_auto_t err_func;
   void *err_func_data;
 
   // turn off error reporting temporarily, but save the error
   // reporting function:
 
   H5Eget_auto (&err_func, &err_func_data);
-  H5Eset_auto (NULL, NULL);
+  H5Eset_auto (0, 0);
 
   hid_t attr_id = H5Aopen_name (loc_id, attr_name);
 
   if (attr_id >= 0)
     {
       // successful
       retval = 1;
       H5Aclose (attr_id);
@@ -1670,17 +1670,17 @@ hdf5_read_next_data (hid_t group_id, con
 
       // an HDF5 group is treated as an octave structure by
       // default (since that preserves name information), and an
       // octave list otherwise.
 
       bool is_list = hdf5_check_attr (subgroup_id, "OCTAVE_LIST");
 
       hdf5_callback_data dsub;
-      dsub.name = dsub.doc = (char*) NULL;
+      dsub.name = dsub.doc = (char*) 0;
       dsub.global = 0;
       dsub.complex_type = d->complex_type;
       dsub.range_type = d->range_type;
       dsub.import = d->import;
 
       herr_t retval2;
       octave_value_list lst;
       Octave_map m;
@@ -1728,32 +1728,32 @@ hdf5_read_next_data (hid_t group_id, con
  done:
 
   if (retval < 0)
     error ("load: error while reading hdf5 item %s", name);
 
   if (retval > 0)
     {
       // get documentation string, if any:
-      int comment_length = H5Gget_comment (group_id, name, 0, NULL);
+      int comment_length = H5Gget_comment (group_id, name, 0, 0);
 
       if (comment_length > 1)
 	{
 	  d->doc = new char[comment_length];
 	  H5Gget_comment (group_id, name, comment_length, d->doc);
 	}
       else if (strcmp (name, vname) != 0)
 	{
 	  // the name was changed by import; store the original name
 	  // as the documentation string:
 	  d->doc = new char [strlen (name) + 1];
 	  strcpy (d->doc, name);
 	}
       else
-	d->doc = (char *) NULL;
+	d->doc = (char *) 0;
 
       // copy name (actually, vname):
       d->name = new char [strlen (vname) + 1];
       strcpy (d->name, vname);
     }
 
   delete [] vname;
 
@@ -1799,19 +1799,19 @@ hdf5_make_range_type (hid_t num_type)
 static char *
 read_hdf5_data (std::istream& is,
 		const std::string& filename, bool& global,
 		octave_value& tc, char *&doc, bool import)
 {
   hdf5_ifstream& hs = (hdf5_ifstream&) is;
   hdf5_callback_data d;
 
-  d.name = (char *) NULL;
+  d.name = (char *) 0;
   d.global = 0;
-  d.doc = (char *) NULL;
+  d.doc = (char *) 0;
   d.complex_type = hdf5_make_complex_type (H5T_NATIVE_DOUBLE);
   d.range_type = hdf5_make_range_type (H5T_NATIVE_DOUBLE);
   d.import = import;
 
   // Versions of HDF5 prior to 1.2.2 had a bug in H5Giterate where it
   // would return the index of the last item processed instead of the
   // next item to be processed, forcing us to increment the index manually.
 
@@ -3649,17 +3649,17 @@ add_hdf5_data (hid_t loc_id, const octav
       int nc = chm.cols ();
 
       // create datatype for (null-terminated) string to write from:
       type_id = H5Tcopy (H5T_C_S1); H5Tset_size (type_id, nc + 1);
       if (type_id < 0)
 	goto error_cleanup;
 
       dims[0] = nr;
-      space_id = H5Screate_simple (nr > 0 ? 1 : 0, dims, (hsize_t*) NULL);
+      space_id = H5Screate_simple (nr > 0 ? 1 : 0, dims, (hsize_t*) 0);
       if (space_id < 0)
 	goto error_cleanup;
 
       data_id = H5Dcreate (loc_id, name.c_str (), 
 			   type_id, space_id, H5P_DEFAULT);
       if (data_id < 0)
 	goto error_cleanup;
 
@@ -3676,17 +3676,17 @@ add_hdf5_data (hid_t loc_id, const octav
 	delete [] s;
 	goto error_cleanup;
       }
 
       delete [] s;
     }
   else if (tc.is_range ())
     {
-      space_id = H5Screate_simple (0, dims, (hsize_t*) NULL);
+      space_id = H5Screate_simple (0, dims, (hsize_t*) 0);
       if (space_id < 0)
 	goto error_cleanup;
 
       type_id = hdf5_make_range_type (H5T_NATIVE_DOUBLE);
       if (type_id < 0)
 	goto error_cleanup;
 
       data_id = H5Dcreate (loc_id, name.c_str (), 
@@ -3701,17 +3701,17 @@ add_hdf5_data (hid_t loc_id, const octav
       range_vals[2] = r.inc ();
 
       if (H5Dwrite (data_id, type_id, H5S_ALL, H5S_ALL, H5P_DEFAULT,
 		    (void*) range_vals) < 0)
 	goto error_cleanup;
     }
   else if (tc.is_real_scalar ())
     {
-      space_id = H5Screate_simple (0, dims, (hsize_t*) NULL);
+      space_id = H5Screate_simple (0, dims, (hsize_t*) 0);
       if (space_id < 0) goto error_cleanup;
 
       data_id = H5Dcreate (loc_id, name.c_str (), 
 			   H5T_NATIVE_DOUBLE, space_id, H5P_DEFAULT);
       if (data_id < 0)
 	goto error_cleanup;
 
       double tmp = tc.double_value ();
@@ -3720,17 +3720,17 @@ add_hdf5_data (hid_t loc_id, const octav
 	goto error_cleanup;
     }
   else if (tc.is_real_matrix ())
     {
       Matrix m = tc.matrix_value ();
       dims[1] = m.rows ();    // Octave uses column-major, while
       dims[0] = m.columns (); // HDF5 uses row-major ordering
 
-      space_id = H5Screate_simple (dims[1] > 1 ?2:1, dims, (hsize_t*) NULL);
+      space_id = H5Screate_simple (dims[1] > 1 ?2:1, dims, (hsize_t*) 0);
       if (space_id < 0)
 	goto error_cleanup;
 
       hid_t save_type_id = H5T_NATIVE_DOUBLE;
 
       if (save_as_floats)
 	{
 	  if (m.too_large_for_float ())
@@ -3760,17 +3760,17 @@ add_hdf5_data (hid_t loc_id, const octav
     
       double *mtmp = m.fortran_vec ();
       if (H5Dwrite (data_id, H5T_NATIVE_DOUBLE, H5S_ALL, H5S_ALL,
 		    H5P_DEFAULT, (void*) mtmp) < 0)
 	goto error_cleanup;
     }
   else if (tc.is_complex_scalar ())
     {
-      space_id = H5Screate_simple (0, dims, (hsize_t*) NULL);
+      space_id = H5Screate_simple (0, dims, (hsize_t*) 0);
       if (space_id < 0)
 	goto error_cleanup;
 
       type_id = hdf5_make_complex_type (H5T_NATIVE_DOUBLE);
       if (type_id < 0)
 	goto error_cleanup;
 
       data_id = H5Dcreate (loc_id, name.c_str (), 
@@ -3785,17 +3785,17 @@ add_hdf5_data (hid_t loc_id, const octav
     }
   else if (tc.is_complex_matrix ())
     {
       ComplexMatrix m = tc.complex_matrix_value ();
 
       dims[1] = m.rows ();    // Octave uses column-major, while
       dims[0] = m.columns (); // HDF5 uses row-major ordering
 
-      space_id = H5Screate_simple (dims[1] > 1 ?2:1, dims, (hsize_t*) NULL);
+      space_id = H5Screate_simple (dims[1] > 1 ?2:1, dims, (hsize_t*) 0);
       if (space_id < 0)
 	goto error_cleanup;
 
       hid_t save_type_id = H5T_NATIVE_DOUBLE;
 
       if (save_as_floats)
 	{
 	  if (m.too_large_for_float ())
diff --git a/src/oct-procbuf.cc b/src/oct-procbuf.cc
--- a/src/oct-procbuf.cc
+++ b/src/oct-procbuf.cc
@@ -105,17 +105,17 @@ octave_procbuf::open (const char *comman
 	    {
 	      ::fclose (fp);
 	      fp = 0;
 	    }
 
 	  octave_procbuf_list = octave_procbuf_list->next;
 	}
 
-      execl ("/bin/sh", "sh", "-c", command, NULL);
+      execl ("/bin/sh", "sh", "-c", command, 0);
 
       exit (127);
     }
 
   if (Vkluge_procbuf_delay > 0)
     octave_usleep (Vkluge_procbuf_delay);
 
   ::close (child_end);
