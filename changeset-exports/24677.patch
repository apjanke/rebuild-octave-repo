# HG changeset patch
# User Markus MÃ¼tzel <markus.muetzel@gmx.de>
# Date 1517607089 -3600
#      Fri Feb 02 22:31:29 2018 +0100
# Node ID 69b89e81d3d3cb3f60d109ab60be45f687a30ab2
# Parent  b5dbcfa1e3e7419a389be2340ef8e149e2ec78d8
Fix unloading dynamic libraries (bug #50463).

* oct-shlib.cc, oct-shlib.h: Make search_all_loaded a protected property. Fix
destructors.

* gsvd.cc: Don't use a static dynamic_library object.

diff --git a/liboctave/numeric/gsvd.cc b/liboctave/numeric/gsvd.cc
--- a/liboctave/numeric/gsvd.cc
+++ b/liboctave/numeric/gsvd.cc
@@ -34,40 +34,55 @@ along with Octave; see the file COPYING.
 #include "fCMatrix.h"
 #include "fDiagMatrix.h"
 #include "fMatrix.h"
 #include "gsvd.h"
 #include "lo-error.h"
 #include "lo-lapack-proto.h"
 #include "oct-shlib.h"
 
-static octave::dynamic_library dyn_libs;
+static std::map<std::string, void *> gsvd_fcn;
 
 static bool have_DGGSVD3 = false;
 static bool gsvd_initialized = false;
 
 /* Hack to stringize macro results. */
 #define xSTRINGIZE(x) #x
 #define STRINGIZE(x) xSTRINGIZE(x)
 
 void initialize_gsvd (void)
 {
-  if (! dyn_libs)
+  if (gsvd_initialized)
+    return;
+
+  octave::dynamic_library libs ("");
+  if (! libs)
     {
-      dyn_libs = octave::dynamic_library ("");
-      if (! dyn_libs)
-        {
-          // FIXME: Should we throw an error if we cannot check the libraries?
-          have_DGGSVD3 = false;
-          return;
-        }
+      // FIXME: Should we throw an error if we cannot check the libraries?
+      have_DGGSVD3 = false;
+      return;
     }
-  have_DGGSVD3 = (dyn_libs.search (STRINGIZE (F77_FUNC (dggsvd3, DGGSVD3)))
+
+  have_DGGSVD3 = (libs.search (STRINGIZE (F77_FUNC (dggsvd3, DGGSVD3)))
                   != nullptr);
 
+  if (have_DGGSVD3)
+    {
+      gsvd_fcn["dg"] = libs.search (STRINGIZE (F77_FUNC (dggsvd3, DGGSVD3)));
+      gsvd_fcn["sg"] = libs.search (STRINGIZE (F77_FUNC (sggsvd3, SGGSVD3)));
+      gsvd_fcn["zg"] = libs.search (STRINGIZE (F77_FUNC (zggsvd3, ZGGSVD3)));
+      gsvd_fcn["cg"] = libs.search (STRINGIZE (F77_FUNC (cggsvd3, CGGSVD3)));
+    }
+  else
+    {
+      gsvd_fcn["dg"] = libs.search (STRINGIZE (F77_FUNC (dggsvd, DGGSVD)));
+      gsvd_fcn["sg"] = libs.search (STRINGIZE (F77_FUNC (sggsvd, SGGSVD)));
+      gsvd_fcn["zg"] = libs.search (STRINGIZE (F77_FUNC (zggsvd, ZGGSVD)));
+      gsvd_fcn["cg"] = libs.search (STRINGIZE (F77_FUNC (cggsvd, CGGSVD)));
+    }
   gsvd_initialized = true;
 }
 
 template<class T1>
 struct real_ggsvd_ptr
 {
   typedef F77_RET_T (*type)
     (F77_CONST_CHAR_ARG_DECL,   // JOBU
@@ -222,33 +237,31 @@ namespace octave
                          F77_INT nrow_q, Matrix& work, F77_INT lwork,
                          F77_INT *iwork, F77_INT& info)
     {
       if (! gsvd_initialized)
         initialize_gsvd ();
 
       if (have_DGGSVD3)
         {
-          dggsvd3_type f_ptr = reinterpret_cast<dggsvd3_type>
-            (dyn_libs.search (STRINGIZE (F77_FUNC (dggsvd3, DGGSVD3))));
+          dggsvd3_type f_ptr = reinterpret_cast<dggsvd3_type> (gsvd_fcn["dg"]);
           f_ptr (F77_CONST_CHAR_ARG2 (&jobu, 1),
                  F77_CONST_CHAR_ARG2 (&jobv, 1),
                  F77_CONST_CHAR_ARG2 (&jobq, 1),
                  m, n, p, k, l, tmp_dataA, m1, tmp_dataB, p1,
                  alpha.fortran_vec (), beta.fortran_vec (),
                  u, nrow_u, v, nrow_v, q, nrow_q,
                  work.fortran_vec (), lwork, iwork, info
                  F77_CHAR_ARG_LEN (1)
                  F77_CHAR_ARG_LEN (1)
                  F77_CHAR_ARG_LEN (1));
         }
       else
         {
-          dggsvd_type f_ptr = reinterpret_cast<dggsvd_type>
-            (dyn_libs.search (STRINGIZE (F77_FUNC (dggsvd, DGGSVD))));
+          dggsvd_type f_ptr = reinterpret_cast<dggsvd_type> (gsvd_fcn["dg"]);
           f_ptr (F77_CONST_CHAR_ARG2 (&jobu, 1),
                  F77_CONST_CHAR_ARG2 (&jobv, 1),
                  F77_CONST_CHAR_ARG2 (&jobq, 1),
                  m, n, p, k, l, tmp_dataA, m1, tmp_dataB, p1,
                  alpha.fortran_vec (), beta.fortran_vec (),
                  u, nrow_u, v, nrow_v, q, nrow_q,
                  work.fortran_vec (), iwork, info
                  F77_CHAR_ARG_LEN (1)
@@ -268,33 +281,31 @@ namespace octave
                               F77_INT nrow_q, FloatMatrix& work,
                               F77_INT lwork, F77_INT *iwork, F77_INT& info)
     {
       if (! gsvd_initialized)
         initialize_gsvd ();
 
       if (have_DGGSVD3)
         {
-          sggsvd3_type f_ptr = reinterpret_cast<sggsvd3_type>
-            (dyn_libs.search (STRINGIZE (F77_FUNC (sggsvd3, SGGSVD3))));
+          sggsvd3_type f_ptr = reinterpret_cast<sggsvd3_type> (gsvd_fcn["sg"]);
           f_ptr (F77_CONST_CHAR_ARG2 (&jobu, 1),
                  F77_CONST_CHAR_ARG2 (&jobv, 1),
                  F77_CONST_CHAR_ARG2 (&jobq, 1),
                  m, n, p, k, l, tmp_dataA, m1, tmp_dataB, p1,
                  alpha.fortran_vec (), beta.fortran_vec (),
                  u, nrow_u, v, nrow_v, q, nrow_q,
                  work.fortran_vec (), lwork, iwork, info
                  F77_CHAR_ARG_LEN (1)
                  F77_CHAR_ARG_LEN (1)
                  F77_CHAR_ARG_LEN (1));
         }
       else
         {
-          sggsvd_type f_ptr = reinterpret_cast<sggsvd_type>
-            (dyn_libs.search (STRINGIZE (F77_FUNC (sggsvd, SGGSVD))));
+          sggsvd_type f_ptr = reinterpret_cast<sggsvd_type> (gsvd_fcn["sg"]);
           f_ptr (F77_CONST_CHAR_ARG2 (&jobu, 1),
                  F77_CONST_CHAR_ARG2 (&jobv, 1),
                  F77_CONST_CHAR_ARG2 (&jobq, 1),
                  m, n, p, k, l, tmp_dataA, m1, tmp_dataB, p1,
                  alpha.fortran_vec (), beta.fortran_vec (),
                  u, nrow_u, v, nrow_v, q, nrow_q,
                  work.fortran_vec (), iwork, info
                  F77_CHAR_ARG_LEN (1)
@@ -315,18 +326,17 @@ namespace octave
                                 F77_INT lwork, F77_INT *iwork, F77_INT& info)
     {
       if (! gsvd_initialized)
         initialize_gsvd ();
 
       Matrix rwork(2*n, 1);
       if (have_DGGSVD3)
         {
-          zggsvd3_type f_ptr = reinterpret_cast<zggsvd3_type>
-            (dyn_libs.search (STRINGIZE (F77_FUNC (zggsvd3, ZGGSVD3))));
+          zggsvd3_type f_ptr = reinterpret_cast<zggsvd3_type> (gsvd_fcn["zg"]);
           f_ptr (F77_CONST_CHAR_ARG2 (&jobu, 1),
                  F77_CONST_CHAR_ARG2 (&jobv, 1),
                  F77_CONST_CHAR_ARG2 (&jobq, 1),
                  m, n, p, k, l,
                  F77_DBLE_CMPLX_ARG (tmp_dataA), m1,
                  F77_DBLE_CMPLX_ARG (tmp_dataB), p1,
                  alpha.fortran_vec (), beta.fortran_vec (),
                  F77_DBLE_CMPLX_ARG (u), nrow_u,
@@ -335,18 +345,17 @@ namespace octave
                  F77_DBLE_CMPLX_ARG (work.fortran_vec ()),
                  lwork, rwork.fortran_vec (), iwork, info
                  F77_CHAR_ARG_LEN (1)
                  F77_CHAR_ARG_LEN (1)
                  F77_CHAR_ARG_LEN (1));
         }
       else
         {
-          zggsvd_type f_ptr = reinterpret_cast<zggsvd_type>
-            (dyn_libs.search (STRINGIZE (F77_FUNC (zggsvd, ZGGSVD))));
+          zggsvd_type f_ptr = reinterpret_cast<zggsvd_type> (gsvd_fcn["zg"]);
           f_ptr (F77_CONST_CHAR_ARG2 (&jobu, 1),
                  F77_CONST_CHAR_ARG2 (&jobv, 1),
                  F77_CONST_CHAR_ARG2 (&jobq, 1),
                  m, n, p, k, l,
                  F77_DBLE_CMPLX_ARG (tmp_dataA), m1,
                  F77_DBLE_CMPLX_ARG (tmp_dataB), p1,
                  alpha.fortran_vec (), beta.fortran_vec (),
                  F77_DBLE_CMPLX_ARG (u), nrow_u,
@@ -375,18 +384,17 @@ namespace octave
                                      F77_INT *iwork, F77_INT& info)
     {
       if (! gsvd_initialized)
         initialize_gsvd ();
 
       FloatMatrix rwork(2*n, 1);
       if (have_DGGSVD3)
         {
-          cggsvd3_type f_ptr = reinterpret_cast<cggsvd3_type>
-            (dyn_libs.search (STRINGIZE (F77_FUNC (cggsvd3, CGGSVD3))));
+          cggsvd3_type f_ptr = reinterpret_cast<cggsvd3_type> (gsvd_fcn["cg"]);
           f_ptr (F77_CONST_CHAR_ARG2 (&jobu, 1),
                  F77_CONST_CHAR_ARG2 (&jobv, 1),
                  F77_CONST_CHAR_ARG2 (&jobq, 1),
                  m, n, p, k, l,
                  F77_CMPLX_ARG (tmp_dataA), m1,
                  F77_CMPLX_ARG (tmp_dataB), p1,
                  alpha.fortran_vec (), beta.fortran_vec (),
                  F77_CMPLX_ARG (u), nrow_u,
@@ -395,18 +403,17 @@ namespace octave
                  F77_CMPLX_ARG (work.fortran_vec ()), lwork,
                  rwork.fortran_vec (), iwork, info
                  F77_CHAR_ARG_LEN (1)
                  F77_CHAR_ARG_LEN (1)
                  F77_CHAR_ARG_LEN (1));
         }
       else
         {
-          cggsvd_type f_ptr = reinterpret_cast<cggsvd_type>
-            (dyn_libs.search (STRINGIZE (F77_FUNC (cggsvd, CGGSVD))));
+          cggsvd_type f_ptr = reinterpret_cast<cggsvd_type> (gsvd_fcn["cg"]);
           f_ptr (F77_CONST_CHAR_ARG2 (&jobu, 1),
                  F77_CONST_CHAR_ARG2 (&jobv, 1),
                  F77_CONST_CHAR_ARG2 (&jobq, 1),
                  m, n, p, k, l,
                  F77_CMPLX_ARG (tmp_dataA), m1,
                  F77_CMPLX_ARG (tmp_dataB), p1,
                  alpha.fortran_vec (), beta.fortran_vec (),
                  F77_CMPLX_ARG (u), nrow_u,
diff --git a/liboctave/util/oct-shlib.cc b/liboctave/util/oct-shlib.cc
--- a/liboctave/util/oct-shlib.cc
+++ b/liboctave/util/oct-shlib.cc
@@ -60,17 +60,17 @@ extern int dlclose (void *);
 #include "file-stat.h"
 #include "lo-error.h"
 #include "oct-shlib.h"
 #include "str-vec.h"
 
 namespace octave
 {
   dynamic_library::dynlib_rep::dynlib_rep (const std::string& f)
-    : count (1), file (f), tm_loaded (), fcn_names ()
+    : count (1), file (f), tm_loaded (), fcn_names (), search_all_loaded (false)
   {
     instances[f] = this;
 
     if (is_out_of_date ())
       (*current_liboctave_warning_with_id_handler)
         ("Octave:warn-future-time-stamp",
          "timestamp on file %s is in the future", file.c_str ());
   }
@@ -206,17 +206,17 @@ namespace octave
 #  endif
 
     // Use RTLD_GLOBAL to export symbols from loaded objects so they are
     // available to other subsequently loaded libraries.
 #  if defined (RTLD_GLOBAL)
     flags |= RTLD_GLOBAL;
 #  endif
 
-    if (file.empty())
+    if (file.empty ())
       {
         search_all_loaded = true;
         return;
       }
 
     library = dlopen (file.c_str (), flags);
 
     if (! library)
@@ -284,17 +284,17 @@ namespace octave
     bool is_open (void) const { return (search_all_loaded || library != 0); }
 
   private:
 
     shl_t library;
   };
 
   octave_shl_load_shlib::octave_shl_load_shlib (const std::string& f)
-    : dynamic_library::dynlib_rep (f), library (0), search_all_loaded (false)
+    : dynamic_library::dynlib_rep (f), library (0)
   {
     file = f;
 
     if (file.empty())
       {
         search_all_loaded = true;
         return;
       }
@@ -352,37 +352,35 @@ namespace octave
 
     octave_w32_shlib (const octave_w32_shlib&) = delete;
 
     octave_w32_shlib& operator = (const octave_w32_shlib&) = delete;
 
     ~octave_w32_shlib (void);
 
     void * search (const std::string& name,
-                   dynamic_library::name_mangler mangler = 0);
+                   dynamic_library::name_mangler mangler = nullptr);
 
     void * global_search (const std::string& sym_name);
 
-    bool is_open (void) const { return (search_all_loaded || handle != 0); }
+    bool is_open (void) const { return (search_all_loaded || handle != nullptr); }
 
   private:
 
     HINSTANCE handle;
-
-    bool search_all_loaded;
   };
 
   static void
   set_dll_directory (const std::string& dir = "")
   {
-    SetDllDirectory (dir.empty () ? 0 : dir.c_str ());
+    SetDllDirectory (dir.empty () ? nullptr : dir.c_str ());
   }
 
   octave_w32_shlib::octave_w32_shlib (const std::string& f)
-    : dynamic_library::dynlib_rep (f), handle (0)
+    : dynamic_library::dynlib_rep (f), handle (nullptr)
   {
     if (f.empty())
       {
         search_all_loaded = true;
         return;
       }
 
     std::string dir = sys::file_ops::dirname (f);
diff --git a/liboctave/util/oct-shlib.h b/liboctave/util/oct-shlib.h
--- a/liboctave/util/oct-shlib.h
+++ b/liboctave/util/oct-shlib.h
@@ -43,18 +43,18 @@ namespace octave
 
     typedef std::string (*name_mangler) (const std::string&);
 
     class dynlib_rep
     {
     public:
 
       dynlib_rep (void)
-        : count (1), search_all_loaded (false), file (), tm_loaded (time_t ()),
-          fcn_names ()
+        : count (1), file (), tm_loaded (time_t ()), fcn_names (),
+          search_all_loaded (false)
       { }
 
     protected:
 
       dynlib_rep (const std::string& f);
 
     public:
 
@@ -90,62 +90,62 @@ namespace octave
 
       bool remove_fcn_name (const std::string&);
 
       void clear_fcn_names (void) { fcn_names.clear (); }
 
     public:
 
       refcount<int> count;
-      bool search_all_loaded;
 
     protected:
 
       void fake_reload (void);
 
       std::string file;
       sys::time tm_loaded;
 
       // Set of hooked function names.
       typedef std::map<std::string, size_t>::iterator fcn_names_iterator;
       typedef std::map<std::string, size_t>::const_iterator fcn_names_const_iterator;
 
       std::map<std::string, size_t> fcn_names;
 
       static std::map<std::string, dynlib_rep *> instances;
+      bool search_all_loaded;
     };
 
   private:
 
     static dynlib_rep nil_rep;
 
   public:
 
     dynamic_library (void) : rep (&nil_rep) { rep->count++; }
 
     dynamic_library (const std::string& f, bool fake = true)
       : rep (dynlib_rep::get_instance (f, fake)) { }
 
     ~dynamic_library (void)
     {
-      if (--rep->count == 0 && ! file_name ().empty ())
+      if (--rep->count == 0)
         delete rep;
     }
 
     dynamic_library (const dynamic_library& sl)
       : rep (sl.rep)
     {
       rep->count++;
     }
 
     dynamic_library& operator = (const dynamic_library& sl)
     {
       if (rep != sl.rep)
         {
-          if (--rep->count == 0 && ! file_name ().empty ())
+          if (--rep->count == 0)
             delete rep;
 
           rep = sl.rep;
           rep->count++;
         }
 
       return *this;
     }
