# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1273470611 -7200
#      Mon May 10 07:50:11 2010 +0200
# Node ID d61caf612f1ec5edeec4707f003c77fa02183b36
# Parent  08050f37ba4976203732d5554efda6a2c2c30d53
optimize order of conditions in octave_range::index_vector

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2010-05-10  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov-range.cc (octave_range::index_vector): Optimize order of
+	conditions.
+
 2010-05-08  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov.cc (octave_value::do_non_const_unary_op): Always return *this as
 	octave_value&. Remove unused overload.
 	* oct-lvalue.cc (octave_lvalue::do_unary_op): Simplify.
 	* pt-unop.cc (tree_prefix_expression::rvalue1,
 	tree_postfix_expression::rvalue1): Remove dummy rvalue1 calls.
 
diff --git a/src/ov-range.cc b/src/ov-range.cc
--- a/src/ov-range.cc
+++ b/src/ov-range.cc
@@ -149,18 +149,18 @@ octave_range::do_index_op (const octave_
 
 idx_vector
 octave_range::index_vector (void) const
 {
   if (idx_cache)
     return *idx_cache;
   else
     {
-      if (range.all_elements_are_ints ()
-          || ! Vallow_noninteger_range_as_index)
+      if (! Vallow_noninteger_range_as_index
+          || range.all_elements_are_ints ())
         return set_idx_cache (idx_vector (range));
       else
         {
           warning_with_id ("Octave:noninteger-range-as-index",
                            "non-integer range used as index");
 
           return octave_value (matrix_value ()).round ().index_vector ();
         }
