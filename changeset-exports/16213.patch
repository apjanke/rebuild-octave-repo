# HG changeset patch
# User Rik <rik@octave.org>
# Date 1362677177 28800
#      Thu Mar 07 09:26:17 2013 -0800
# Node ID b1283d4c06c25dfa8d479364f396515a4b36ea53
# Parent  78365c56a7622a17718648ba621a6ce6c1ecfb39
test: Use Octave coding standards for scripts in test/ directory.

* test/bug-36025/@testclass/one.m, test/bug-36025/@testclass/testclass.m,
test/bug-36025/@testclass/two.m, test/build-bc-overload-tests.sh,
test/build-sparse-tests.sh, test/build_bc_overloads_expected.m,
test/classes/@Blork/Blork.m, test/classes/@Blork/bleek.m,
test/classes/@Blork/display.m, test/classes/@Blork/get.m,
test/classes/@Blork/set.m,
test/classes/@CPrecedenceTester1/CPrecedenceTester1.m,
test/classes/@CPrecedenceTester1/tattack.m,
test/classes/@CPrecedenceTester2/CPrecedenceTester2.m,
test/classes/@CPrecedenceTester2/tattack.m,
test/classes/@CPrecedenceTester3/CPrecedenceTester3.m,
test/classes/@CPrecedenceTester3/tattack.m, test/classes/@Cork/Cork.m,
test/classes/@Cork/click.m, test/classes/@Cork/display.m,
test/classes/@Cork/get.m, test/classes/@Cork/set.m, test/classes/@Dork/Dork.m,
test/classes/@Dork/bling.m, test/classes/@Dork/display.m,
test/classes/@Dork/gack.m, test/classes/@Dork/get.m,
test/classes/@Dork/getStash.m, test/classes/@Dork/private/myStash.m,
test/classes/@Dork/set.m, test/classes/@Gork/Gork.m, test/classes/@Gork/cork.m,
test/classes/@Gork/display.m, test/classes/@Gork/gark.m,
test/classes/@Gork/get.m, test/classes/@Gork/set.m,
test/classes/@Gork/subsasgn.m, test/classes/@Gork/subsref.m,
test/classes/@Pork/Pork.m, test/classes/@Pork/bling.m,
test/classes/@Pork/display.m, test/classes/@Pork/get.m,
test/classes/@Pork/gurk.m, test/classes/@Pork/private/myStash.m,
test/classes/@Pork/set.m, test/classes/@Sneetch/Sneetch.m,
test/classes/@Sneetch/display.m, test/classes/@Snork/Snork.m,
test/classes/@Snork/cack.m, test/classes/@Snork/display.m,
test/classes/@Snork/double.m, test/classes/@Snork/end.m,
test/classes/@Snork/eq.m, test/classes/@Snork/ge.m, test/classes/@Snork/get.m,
test/classes/@Snork/getStash.m, test/classes/@Snork/gick.m,
test/classes/@Snork/gt.m, test/classes/@Snork/horzcat.m,
test/classes/@Snork/ldivide.m, test/classes/@Snork/le.m,
test/classes/@Snork/loadobj.m, test/classes/@Snork/lt.m,
test/classes/@Snork/minus.m, test/classes/@Snork/mldivide.m,
test/classes/@Snork/mpower.m, test/classes/@Snork/mrdivide.m,
test/classes/@Snork/mtimes.m, test/classes/@Snork/ne.m,
test/classes/@Snork/plus.m, test/classes/@Snork/power.m,
test/classes/@Snork/private/myStash.m, test/classes/@Snork/rdivide.m,
test/classes/@Snork/saveobj.m, test/classes/@Snork/set.m,
test/classes/@Snork/subsasgn.m, test/classes/@Snork/subsindex.m,
test/classes/@Snork/subsref.m, test/classes/@Snork/tattack.m,
test/classes/@Snork/times.m, test/classes/@Snork/uminus.m,
test/classes/@Snork/uplus.m, test/classes/@Snork/vertcat.m,
test/classes/@Spork/Spork.m, test/classes/@Spork/cack.m,
test/classes/@Spork/display.m, test/classes/@Spork/geek.m,
test/classes/@Spork/get.m, test/classes/@Spork/getStash.m,
test/classes/@Spork/loadobj.m, test/classes/@Spork/private/myStash.m,
test/classes/@Spork/saveobj.m, test/classes/@Spork/set.m,
test/classes/classes.tst, test/ctor-vs-method/__trace__.m, test/error.tst,
test/eval-catch.tst,
test/fcn-handle-derived-resolution/@other/getsize_arrayfun.m, test/for.tst,
test/func.tst, test/global.tst, test/index.tst, test/io.tst, test/prefer.tst,
test/range.tst, test/recursion.tst, test/return.tst, test/slice.tst,
test/struct.tst, test/system.tst: Use Octave codings standards for scripts.

diff --git a/test/bug-36025/@testclass/one.m b/test/bug-36025/@testclass/one.m
--- a/test/bug-36025/@testclass/one.m
+++ b/test/bug-36025/@testclass/one.m
@@ -1,4 +1,5 @@
 % function ONE return item "X"
 
-function a=one(m)
-  a=m.x;
+function a = one (m)
+  a = m.x;
+endfunction
diff --git a/test/bug-36025/@testclass/testclass.m b/test/bug-36025/@testclass/testclass.m
--- a/test/bug-36025/@testclass/testclass.m
+++ b/test/bug-36025/@testclass/testclass.m
@@ -1,3 +1,4 @@
-function m=testclass(x,y)
-m=struct('x',x,'y',y); 
-m=class(m,"testclass"); 
+function m = testclass (x,y)
+  m = struct ('x',x,'y',y); 
+  m = class (m,"testclass"); 
+endfunction
diff --git a/test/bug-36025/@testclass/two.m b/test/bug-36025/@testclass/two.m
--- a/test/bug-36025/@testclass/two.m
+++ b/test/bug-36025/@testclass/two.m
@@ -1,4 +1,5 @@
 % function TWO returns item "Y"
 
-function a=one(m)
-  a=m.y;
+function a = one (m)
+  a = m.y;
+endfunction
diff --git a/test/build-bc-overload-tests.sh b/test/build-bc-overload-tests.sh
--- a/test/build-bc-overload-tests.sh
+++ b/test/build-bc-overload-tests.sh
@@ -89,17 +89,17 @@ fi
 
 cat > bc-overloads.tst << EOF
 ## !!! DO NOT EDIT !!!
 ## THIS IS AN AUTOMATICALLY GENERATED FILE
 ## modify build_bc_overload_tests.sh to generate the tests you need.
 
 %!shared ex
 %! ex.double = 1;
-%! ex.single = single(1);
+%! ex.single = single (1);
 %! ex.logical = true;
 %! ex.char = 'char';
 %! ex.int8  = int8 (1);
 %! ex.int16 = int16 (1);
 %! ex.int32 = int32 (1);
 %! ex.int64 = int64 (1);
 %! ex.uint8  = uint8 (1);
 %! ex.uint16 = uint16 (1);
diff --git a/test/build-sparse-tests.sh b/test/build-sparse-tests.sh
--- a/test/build-sparse-tests.sh
+++ b/test/build-sparse-tests.sh
@@ -170,24 +170,24 @@ cat >>$TESTS <<EOF
 EOF
 }
 
 gen_specific() {
 cat >>$TESTS <<EOF
 
 %!test # segfault test from edd@debian.org
 %! n = 510;
-%! sparse (kron ((1:n)', ones(n,1)), kron (ones(n,1), (1:n)'), ones (n)); 
+%! sparse (kron ((1:n)', ones (n,1)), kron (ones (n,1), (1:n)'), ones (n));
 
 %% segfault tests from Fabian@isas-berlin.de
 %% Note that the last four do not fail, but rather give a warning
 %% of a singular matrix, which is consistent with the full matrix
 %% behaviour.  They are therefore disabled.
 %!testif HAVE_UMFPACK
-%! assert (inv (sparse ([1,1;1,1+i])), sparse([1-1i,1i;1i,-1i]), 10*eps);
+%! assert (inv (sparse ([1,1;1,1+i])), sparse ([1-1i,1i;1i,-1i]), 10*eps);
 %#!error inv ( sparse ([1,1;1,1]  ) );
 %#!error inv ( sparse ([0,0;0,1]  ) );
 %#!error inv ( sparse ([0,0;0,1+i]) );
 %#!error inv ( sparse ([0,0;0,0]  ) );
 
 %% error handling in constructor
 %!error sparse (1,[2,3],[1,2,3])
 %!error sparse ([1,1],[1,1],[1,2],3,3,"bogus")
@@ -254,23 +254,23 @@ EOF
 ##    total_tests += tests;
 ##  end
 ##  The test log is appended to sprandomtest.log
 function [passes,total] = test_sprandom
   warning ("untested --- fix the source in build_sparse_tests.sh");
   disp ("appending test output to sprandomtest.log");
   fid = fopen ("sprandomtest.log", "at");
   test ("sprandom.tst", "normal", fid);
-  ##[passes, total] = test("sprandomtest","normal",fid);
+  ##[passes, total] = test ("sprandomtest", "normal", fid);
   fclose (fid);
 endfunction
 
 EOF
     fi
-    
+
 }
 
 
 # =======================================================
 # matrix ops
 
 # test ordered comparisons: uses as,af,bs,bf
 gen_ordering_tests() {
@@ -400,33 +400,33 @@ gen_matrixdiag_tests() {
 %!assert (diag (as(:)), sparse (diag (af(:))))
 %!assert (diag (as(:),1), sparse (diag (af(:),1)))
 %!assert (diag (as(:),-1), sparse (diag (af(:),-1)))
 %!assert (diag (as(:)'), sparse (diag (af(:)')))
 %!assert (diag (as(:)',1), sparse (diag (af(:)',1)))
 %!assert (diag (as(:)',-1), sparse (diag (af(:)',-1)))
 %!assert (spdiags (as,[0,1]), [diag(af,0), diag(af,1)])
 %!test
-%! [tb,tc]=spdiags(as); 
+%! [tb,tc] = spdiags (as); 
 %! assert (spdiags (tb,tc,sparse (zeros (size (as)))), as);
 %! assert (spdiags (tb,tc,size (as,1),size (as,2)), as);
 
 EOF
 }
 
 # test matrix reshape operations
 gen_matrixreshape_tests() {
     cat >>$TESTS <<EOF
 %% Matrix diagonal tests (uses af,as,bf,bs)
-%!assert(reshape(as,1,prod(size(as))),sparse(reshape(af,1,prod(size(af)))))
-%!assert(reshape(as,prod(size(as)),1),sparse(reshape(af,prod(size(af)),1)))
-%!assert(reshape(as,fliplr(size(as))),sparse(reshape(af,fliplr(size(af)))))
-%!assert(reshape(bs,1,prod(size(as))),sparse(reshape(bf,1,prod(size(af)))))
-%!assert(reshape(bs,prod(size(as)),1),sparse(reshape(bf,prod(size(af)),1)))
-%!assert(reshape(bs,fliplr(size(as))),sparse(reshape(bf,fliplr(size(af)))))
+%!assert (reshape (as,1,prod(size(as))), sparse (reshape (af,1,prod(size(af)))))
+%!assert (reshape (as,prod(size(as)),1), sparse (reshape (af,prod(size(af)),1)))
+%!assert (reshape (as,fliplr(size(as))), sparse (reshape (af,fliplr(size(af)))))
+%!assert (reshape (bs,1,prod(size(as))), sparse (reshape (bf,1,prod(size(af)))))
+%!assert (reshape (bs,prod(size(as)),1), sparse (reshape (bf,prod(size(af)),1)))
+%!assert (reshape (bs,fliplr(size(as))), sparse (reshape (bf,fliplr(size(af)))))
 
 EOF
 }
 
 # test mapper matrix operations: uses as,af
 print_mapper_test() {
 echo "%!assert ($1(as), sparse ($1(af)))" >>$TESTS
 }
@@ -547,17 +547,17 @@ gen_unaryop_tests() {
 %!assert (prod (as), sparse (prod (af)))
 %!assert (prod (as,1), sparse (prod (af,1)))
 %!assert (prod (as,2), sparse (prod (af,2)))
 %!assert (cumprod (as), sparse (cumprod (af)))
 %!assert (cumprod (as,1), sparse (cumprod (af,1)))
 %!assert (cumprod (as,2), sparse (cumprod (af,2)))
 
 %!assert (min (as), sparse (min (af)))
-%!assert (full (min (as(:))),min (af(:)))
+%!assert (full (min (as(:))), min (af(:)))
 %!assert (min (as,[],1), sparse (min (af,[],1)))
 %!assert (min (as,[],2), sparse (min (af,[],2)))
 %!assert (min (as,[],1), sparse (min (af,[],1)))
 %!assert (min (as,0), sparse (min (af,0)))
 %!assert (min (as,bs), sparse (min (af,bf)))
 %!assert (max (as), sparse (max (af)))
 %!assert (full (max (as(:))), max (af(:)))
 %!assert (max (as,[],1), sparse (max (af,[],1)))
@@ -577,18 +577,18 @@ gen_unaryop_tests() {
 %!assert (issparse (as.'))
 %!assert (issparse (as'))
 %!assert (issparse (-as))
 %!assert (~as, sparse (~af))
 %!assert (as.', sparse (af.'));
 %!assert (as',  sparse (af'));
 %!assert (-as, sparse (-af));
 %!assert (~as, sparse (~af));
-%!error [i,j]=size (af);as(i-1,j+1);
-%!error [i,j]=size (af);as(i+1,j-1);
+%!error [i,j] = size (af);as(i-1,j+1);
+%!error [i,j] = size (af);as(i+1,j-1);
 %!test
 %! [Is,Js,Vs] = find (as);
 %! [If,Jf,Vf] = find (af);
 %! assert (Is, If);
 %! assert (Js, Jf);
 %! assert (Vs, Vf);
 %!error as(0,1);
 %!error as(1,0);
@@ -630,17 +630,17 @@ EOF
 
 # operations which require square matrices.
 gen_square_tests() {
 # The \ and / operator tests on square matrices
     gen_square_divop_tests
 
     cat >>$TESTS <<EOF
 %!testif HAVE_UMFPACK
-%! assert(det(bs+speye(size(bs))),det(bf+eye(size(bf))),100*eps*abs(det(bf+eye(size(bf)))))
+%! assert(det(bs+speye(size(bs))), det(bf+eye(size(bf))), 100*eps*abs(det(bf+eye(size(bf)))))
 
 %!testif HAVE_UMFPACK 
 %! [l,u] = lu (sparse ([1,1;1,1]));
 %! assert (l*u, [1,1;1,1], 10*eps);
 
 %!testif HAVE_UMFPACK
 %! [l,u] = lu (sparse ([1,1;1,1+i]));
 %! assert (l, sparse ([1,2,2],[1,1,2],1), 10*eps);
@@ -722,29 +722,29 @@ gen_cholesky_tests() {
 %! assert (LS*LS', QS*bs*QS', 1e-10);
 %! assert (PS, 0);
 
 EOF
 }
 
 # test scalar operations: uses af and real scalar bf; modifies as,bf,bs
 gen_scalar_tests() {
-    echo '%!test as=sparse(af);' >> $TESTS
-    echo '%!test bs=bf;' >> $TESTS
+    echo '%!test as = sparse (af);' >> $TESTS
+    echo '%!test bs = bf;' >> $TESTS
     gen_elementop_tests
     gen_ordering_tests
-    echo '%!test bf=bf+1i;' >>$TESTS
-    echo '%!test bs=bf;' >> $TESTS
+    echo '%!test bf = bf+1i;' >>$TESTS
+    echo '%!test bs = bf;' >> $TESTS
     gen_elementop_tests
 }
 
 # test matrix operations: uses af and bf; modifies as,bs
 gen_rectangular_tests() {
-    echo '%!test as=sparse(af);' >> $TESTS
-    echo '%!test bs=sparse(bf);' >>$TESTS
+    echo '%!test as = sparse(af);' >> $TESTS
+    echo '%!test bs = sparse(bf);' >>$TESTS
     gen_mapper_tests
     gen_real_mapper_tests
     gen_unaryop_tests
     gen_elementop_tests
     gen_sparsesparse_elementop_tests
     gen_matrixop_tests
     # gen_divop_tests # Disable rectangular \ and / for now
     gen_matrixdiag_tests
@@ -801,17 +801,17 @@ gen_assembly_tests() {
 cat >>$TESTS <<EOF
 %%Assembly tests
 %!test
 %! m = max ([m;r(:)]);
 %! n = max ([n;c(:)]);
 %! funiq = fsum = zeros (m,n);
 %! funiq(r(:) + m*(c(:)-1) ) = ones (size (r(:)));
 %! funiq = sparse (funiq);
-%! for k=1:length(r)
+%! for k=1:length (r)
 %!   fsum(r(k),c(k)) += 1;
 %! endfor
 %! fsum = sparse (fsum);
 %!assert (sparse (r,c,1), sparse (fsum(1:max(r), 1:max(c))))
 %!assert (sparse (r,c,1,"sum"), sparse (fsum(1:max (r),1:max (c))))
 %!assert (sparse (r,c,1,"unique"), sparse (funiq(1:max (r),1:max (c))))
 %!assert (sparse (r,c,1,m,n), sparse (fsum))
 %!assert (sparse (r,c,1,m,n,"sum"), sparse (fsum))
@@ -842,17 +842,17 @@ gen_scalar_select_tests () {
     cat >>$TESTS <<EOF
 %!assert (sparse (42)([1,1]), sparse ([42,42]))
 %!assert (sparse (42*1i)([1,1]), sparse ([42,42].*1i))
 EOF
 }
 
 gen_select_tests() {
     cat >>$TESTS <<EOF
-%!test as=sparse(af);
+%!test as = sparse (af);
 
 %% Point tests
 %!test idx = ridx(:) + rows (as) * (cidx (:)-1);
 %!assert (sparse (as(idx)), sparse (af(idx)))
 %!assert (as(idx), sparse (af(idx)));
 %!assert (as(idx'), sparse (af(idx')));
 %!assert (as(flipud (idx(:))), sparse (af(flipud (idx(:)))))
 %!assert (as([idx,idx]), sparse (af([idx,idx])))
@@ -870,38 +870,38 @@ gen_select_tests() {
 %!assert (full (as([1,1],:)), af([1,1],:))
 %!assert (full (as(:,[1,1])), af(:,[1,1]))
 %!test
 %! [i,j,v] = find (as);
 %! assert (as(i(1),j(1))([1,1]), sparse ([v(1), v(1)]))
 
 %% Assignment test
 %!test
-%! ts=as; ts(:,:) = ts(fliplr (1:size (as,1)),:);
-%! tf=af; tf(:,:) = tf(fliplr (1:size (af,1)),:);
+%! ts = as; ts(:,:) = ts(fliplr (1:size (as,1)),:);
+%! tf = af; tf(:,:) = tf(fliplr (1:size (af,1)),:);
 %! assert (ts, sparse (tf));
 %!test
-%! ts=as; ts(fliplr (1:size (as,1)),:) = ts;
-%! tf=af; tf(fliplr (1:size (af,1)),:) = tf;
+%! ts = as; ts(fliplr (1:size (as,1)),:) = ts;
+%! tf = af; tf(fliplr (1:size (af,1)),:) = tf;
 %! assert (ts, sparse (tf));
 %!test
-%! ts=as; ts(:,fliplr (1:size (as,2))) = ts;
-%! tf=af; tf(:,fliplr (1:size (af,2))) = tf;
+%! ts = as; ts(:,fliplr (1:size (as,2))) = ts;
+%! tf = af; tf(:,fliplr (1:size (af,2))) = tf;
 %! assert (ts, sparse (tf));
 %!test
 %! ts(fliplr (1:size (as,1))) = as(:,1);
 %! tf(fliplr (1:size (af,1))) = af(:,1);
 %! assert (ts, sparse (tf));
 
 %% Deletion tests
 %!test
-%! ts=as; ts(1,:)=[]; tf=af; tf(1,:)=[];
+%! ts = as; ts(1,:) = []; tf = af; tf(1,:) = [];
 %! assert (ts, sparse (tf));
 %!test
-%! ts=as; ts(:,1)=[]; tf=af; tf(:,1)=[];
+%! ts = as; ts(:,1) = []; tf = af; tf(:,1) = [];
 %! assert (ts, sparse (tf));
 
 %% Test "end" keyword
 %!assert (full (as(end)), af(end))
 %!assert (full (as(1,end)), af(1,end))
 %!assert (full (as(end,1)), af(end,1))
 %!assert (full (as(end,end)), af(end,end))
 %!assert (as(2:end,2:end), sparse (af(2:end,2:end)))
@@ -916,44 +916,44 @@ gen_save_tests() {
     cat >>$TESTS <<EOF
 %!test # save ascii
 %! savefile = tmpnam ();
 %! as_save = as;
 %! save ("-text", savefile, "bf", "as_save", "af");
 %! clear as_save;
 %! load (savefile, "as_save");
 %! unlink (savefile);
-%! assert (as_save, sparse(af));
+%! assert (as_save, sparse (af));
 %!test # save binary
 %! savefile = tmpnam ();
 %! as_save = as;
 %! save ("-binary", savefile, "bf", "as_save", "af");
 %! clear as_save;
 %! load (savefile, "as_save");
 %! unlink (savefile);
-%! assert (as_save, sparse(af));
+%! assert (as_save, sparse (af));
 %!testif HAVE_HDF5   # save hdf5
 %! savefile = tmpnam ();
 %! as_save = as;
 %! save ("-hdf5", savefile, "bf", "as_save", "af");
 %! clear as_save;
 %! load (savefile, "as_save");
 %! unlink (savefile);
-%! assert (as_save, sparse(af));
+%! assert (as_save, sparse (af));
 ## FIXME: We should skip (or mark as an expected failure) the test for
 ## saving sparse matrices to MAT files when using 64-bit indexing since
 ## that is not implemented yet.
 %!test # save matlab
 %! savefile = tmpnam ();
 %! as_save = as;
 %! save ("-mat", savefile, "bf", "as_save", "af");
 %! clear as_save;
 %! load (savefile, "as_save");
 %! unlink (savefile);
-%! assert (as_save, sparse(af));
+%! assert (as_save, sparse (af));
 EOF
 }
 
 # =============================================================
 # Specific solver tests for matrices that will test all of the solver
 # code. Uses alpha and beta
 gen_solver_tests() {
 
@@ -970,21 +970,21 @@ else
 %! ls = tril (sprandn (8,8,0.2),-1).*alpha + n*speye (8); lf = full (ls);
 %! us = triu (sprandn (8,8,0.2),1).*alpha + n*speye (8); uf = full (us);
 %! ts = spdiags (randn (8,3),-1:1,8,8).*alpha; tf = full (ts);
 EOF
 fi
 
 cat >>$TESTS <<EOF
 %! df = diag (1:n).* alpha; ds = sparse (df);
-%! pdf = df(randperm (n),randperm (n));
+%! pdf = df(randperm (n), randperm (n));
 %! pds = sparse (pdf);
-%! plf = lf(randperm (n),randperm (n));
+%! plf = lf(randperm (n), randperm (n));
 %! pls = sparse (plf);
-%! puf = uf(randperm (n),randperm (n));
+%! puf = uf(randperm (n), randperm (n));
 %! pus = sparse (puf);
 %! bs = spdiags (repmat ([1:n]',1,4),-2:1,n,n).*alpha;
 %! bf = full (bs);
 %! cf = lf + lf'; cs = sparse (cf);
 %! bcf = bf + bf'; bcs = sparse (bcf);
 %! tcf = tf + tf'; tcs = sparse (tcf);
 %! xf = diag (1:n) + fliplr (diag (1:n)).*beta;
 %! xs = sparse (xf);
@@ -1019,38 +1019,38 @@ cat >>$TESTS <<EOF
 %!assert (tcs\xf, tcf\xf, 1e-10);
 %!assert (sparse (tcs\xs), sparse (tcf\xf), 1e-10);
 
 EOF
 
 cat >>$TESTS <<EOF
 %% QR solver tests
 
-%!function f(a, sz, feps)
+%!function f (a, sz, feps)
 %! b = randn (sz);
 %! x = a \ b; 
 %! assert (a * x, b, feps);
 %! b = randn (sz) + 1i*randn (sz);
 %! x = a \ b;  
 %! assert (a * x, b, feps);
 %! b = sprandn (sz(1),sz(2),0.2);
 %! x = a \ b;
 %! assert (sparse (a * x), b, feps);
 %! b = sprandn (sz(1),sz(2),0.2) + 1i*sprandn (sz(1),sz(2),0.2);
 %! x = a \ b; 
 %! assert (sparse (a * x), b, feps);
 %!endfunction
 %!testif HAVE_UMFPACK
 %! a = alpha*sprandn (10,11,0.2) + speye (10,11);
-%! f(a,[10,2],1e-10);
+%! f (a,[10,2],1e-10);
 %! ## Test this by forcing matrix_type, as can't get a certain 
 %! ## result for over-determined systems.
-%! a = alpha*sprandn(10,10,0.2) + speye(10,10);
+%! a = alpha*sprandn (10,10,0.2) + speye (10,10);
 %! matrix_type (a, "Singular");
-%! f(a,[10,2],1e-10);
+%! f (a,[10,2],1e-10);
 
 %% Rectanguar solver tests that don't use QR
 
 %!test
 %! ds = alpha * spdiags ([1:11]',0,10,11);
 %! df = full (ds);
 %! xf = beta * ones (10,2);
 %! xs = speye (10,10);
@@ -1189,35 +1189,35 @@ else
 %! bf = full (bs + 1i*sprandn (bs));
 EOF
 fi
 
 gen_rectangular_tests
 gen_section
 gen_save_tests
 gen_section
-echo '%!test bf=real(bf);' >> $TESTS
+echo '%!test bf = real (bf);' >> $TESTS
 gen_rectangular_tests
 gen_section
 gen_sparsesparse_ordering_tests
 gen_section
-echo '%!test af=real(af);' >> $TESTS
+echo '%!test af = real (af);' >> $TESTS
 gen_rectangular_tests
 gen_section
 gen_save_tests
 gen_section
-echo '%!test bf=bf+1i*(bf~=0);' >> $TESTS
+echo '%!test bf = bf+1i*(bf~=0);' >> $TESTS
 gen_rectangular_tests
 gen_section
 
 # square operations
 if $preset; then
-    echo '%!test af=[1+1i,2-1i,0,0;0,0,0,3+2i;0,0,0,4];' >> $TESTS
-    echo '%! as=sparse(af);' >> $TESTS
-    echo '%!test bf=[0,1-1i,0,0;2+1i,0,0,0;3-1i,2+3i,0,0];' >> $TESTS
+    echo '%!test af = [1+1i,2-1i,0,0;0,0,0,3+2i;0,0,0,4];' >> $TESTS
+    echo '%! as = sparse (af);' >> $TESTS
+    echo '%!test bf = [0,1-1i,0,0;2+1i,0,0,0;3-1i,2+3i,0,0];' >> $TESTS
 else
     cat >>$TESTS <<EOF
 %!test
 %! m = floor (lognrnd (8,2)+1);
 %! n = floor (lognrnd (8,2)+1);
 %! as = sprandn (m,n,0.3);
 %! af = full (as + 1i*sprandn (as));
 %! bs = sprandn (m,n,0.3);
@@ -1229,44 +1229,44 @@ cat >>$TESTS <<EOF
 %!test ;# invertible matrix
 %! bf = af'*bf+max (abs ([af(:);bf(:)]))*sparse (eye (columns (as)));
 %! bs = sparse (bf);
 
 EOF
 
 gen_square_tests
 gen_section
-echo '%!test bf=real(bf);' >> $TESTS
-echo '%! bs=sparse(bf);' >> $TESTS
+echo '%!test bf = real (bf);' >> $TESTS
+echo '%! bs = sparse (bf);' >> $TESTS
 gen_square_tests
 gen_section
-echo '%!test af=real(af);' >> $TESTS
-echo '%! as=sparse(af);' >> $TESTS
+echo '%!test af = real (af);' >> $TESTS
+echo '%! as = sparse (af);' >> $TESTS
 gen_square_tests
 gen_section
-echo '%!test bf=bf+1i*(bf~=0);' >> $TESTS
-echo '%! bs=sparse(bf);' >> $TESTS
+echo '%!test bf = bf+1i*(bf~=0);' >> $TESTS
+echo '%! bs = sparse (bf);' >> $TESTS
 gen_square_tests
 gen_section
 
 # cholesky tests
 if $preset; then
-  echo '%!test bf=[5,0,1+1i,0;0,5,0,1-2i;1-1i,0,5,0;0,1+2i,0,5];' >> $TESTS
-  echo '%! bs=sparse(bf);' >> $TESTS
+  echo '%!test bf = [5,0,1+1i,0;0,5,0,1-2i;1-1i,0,5,0;0,1+2i,0,5];' >> $TESTS
+  echo '%! bs = sparse (bf);' >> $TESTS
 else
   echo '# This has a small chance of failing to create a positive definite matrix' >> $TESTS
-  echo '%!test n=floor (lognrnd (8,2)+1)' >> $TESTS
+  echo '%!test n = floor (lognrnd (8,2)+1)' >> $TESTS
   echo '%! bs = n*speye (n,n) + sprandn (n,n,0.3);' >> $TESTS
   echo '%! bf = full (bs);' >> $TESTS
 fi
 
 gen_cholesky_tests
 gen_section
-echo '%!test bf=real(bf);' >> $TESTS
-echo '%! bs=sparse(bf);' >> $TESTS
+echo '%!test bf = real (bf);' >> $TESTS
+echo '%! bs = sparse (bf);' >> $TESTS
 gen_cholesky_tests
 gen_section
 
 # assembly tests
 echo '%!shared r,c,m,n,fsum,funiq' >>$TESTS
 if $use_preset; then
     cat >>$TESTS <<EOF
 %!test
@@ -1306,21 +1306,21 @@ else
 %! as = sprandn (m,n,0.3);
 %! af = full (as + 1i*sprandn (as));
 %! ridx = ceil (m*rand (1,ceil (rand*m));
 %! cidx = ceil (n*rand (1,ceil (rand*n));
 EOF
 fi
 gen_scalar_select_tests
 gen_select_tests
-echo '%!test af=real(af);' >> $TESTS
+echo '%!test af = real (af);' >> $TESTS
 gen_select_tests
 gen_section
 echo '%!shared alpha,beta,df,pdf,lf,plf,uf,puf,bf,cf,bcf,tf,tcf,xf,ds,pds,ls,pls,us,pus,bs,cs,bcs,ts,tcs,xs' >>$TESTS
-echo '%!test alpha=1;beta=1;' >> $TESTS
+echo '%!test alpha=1; beta=1;' >> $TESTS
 gen_solver_tests
-echo '%!test alpha=1;beta=1i;' >> $TESTS
+echo '%!test alpha=1; beta=1i;' >> $TESTS
 gen_solver_tests
-echo '%!test alpha=1i;beta=1;' >> $TESTS
+echo '%!test alpha=1i; beta=1;' >> $TESTS
 gen_solver_tests
-echo '%!test alpha=1i;beta=1i;' >> $TESTS
+echo '%!test alpha=1i; beta=1i;' >> $TESTS
 gen_solver_tests
 gen_section
diff --git a/test/build_bc_overloads_expected.m b/test/build_bc_overloads_expected.m
--- a/test/build_bc_overloads_expected.m
+++ b/test/build_bc_overloads_expected.m
@@ -1,17 +1,17 @@
 % this script is intended to be Matlab compatible
 % first, run the script
 %
 %   ./build_bc_overloads_tests.sh overloads_only
 %
 % to generate the overloaded functions.
 %
 ex.double = 1;
-ex.single = single(1);
+ex.single = single (1);
 ex.logical = true;
 ex.char = 'char';
 ex.int8  = int8 (1);
 ex.int16 = int16 (1);
 ex.int32 = int32 (1);
 ex.int64 = int64 (1);
 ex.uint8  = uint8 (1);
 ex.uint16 = uint16 (1);
diff --git a/test/classes/@Blork/Blork.m b/test/classes/@Blork/Blork.m
--- a/test/classes/@Blork/Blork.m
+++ b/test/classes/@Blork/Blork.m
@@ -1,16 +1,15 @@
-function [ s ] = Blork( bleek )
+function s = Blork (bleek)
 % Test class.
 
-    if (nargin==1) && isa(bleek, 'Blork')
-        s = bleek;
+  if (nargin == 1 && isa (bleek, 'Blork'))
+    s = bleek;
+  else
+    if (nargin == 0)
+      s.bleek = 1;
     else
-      if nargin==0
-        s.bleek = 1;
-      else
-        s.bleek = bleek;
-      end
-      s = class(s, 'Blork');
+      s.bleek = bleek;
+    end
+    s = class (s, 'Blork');
+  end
 
-    end
-        
 end
diff --git a/test/classes/@Blork/bleek.m b/test/classes/@Blork/bleek.m
--- a/test/classes/@Blork/bleek.m
+++ b/test/classes/@Blork/bleek.m
@@ -1,10 +1,10 @@
-function [ out ] = bleek( in, val )
+function out = bleek (in, val)
 
-  if (nargin==1) 
+  if (nargin == 1)
     out = in.bleek;
   else
     in.bleek = val;
     out = in;
   end
-        
+
 end
diff --git a/test/classes/@Blork/display.m b/test/classes/@Blork/display.m
--- a/test/classes/@Blork/display.m
+++ b/test/classes/@Blork/display.m
@@ -1,7 +1,7 @@
-function display( s )
+function display (s)
 
-  disp([inputname(1),'.bleek = '])
-  disp(' ');
-  disp(s.bleek);
+  disp ([inputname(1),'.bleek = ']);
+  disp (' ');
+  disp (s.bleek);
 
-end
\ No newline at end of file
+end
diff --git a/test/classes/@Blork/get.m b/test/classes/@Blork/get.m
--- a/test/classes/@Blork/get.m
+++ b/test/classes/@Blork/get.m
@@ -1,10 +1,10 @@
-function [ v ] = get( s, propName )
+function v = get (s, propName)
 
-    switch propName
-        case 'bleek'
-            v = s.bleek;
-        otherwise
-            error([propName, ' is not a valid Blork property']);
-    end
+  switch propName
+    case 'bleek'
+      v = s.bleek;
+    otherwise
+      error ([propName, ' is not a valid Blork property']);
+  end
 
 end
diff --git a/test/classes/@Blork/set.m b/test/classes/@Blork/set.m
--- a/test/classes/@Blork/set.m
+++ b/test/classes/@Blork/set.m
@@ -1,16 +1,16 @@
-function [ s ] = set( s, varargin )
+function s = set (s, varargin)
 
   propArgs = varargin;
-  while (length(propArgs) >= 2)
+  while (length (propArgs) >= 2)
     propName  = propArgs{1};
     propValue = propArgs{2};
     propArgs  = propArgs(3:end);
     switch propName
       case 'bleek'
         s.bleek = propValue;
       otherwise
-        error([propName, ' is not a valid Blork property']);
+        error ([propName, ' is not a valid Blork property']);
     end
   end
 
 end
diff --git a/test/classes/@CPrecedenceTester1/CPrecedenceTester1.m b/test/classes/@CPrecedenceTester1/CPrecedenceTester1.m
--- a/test/classes/@CPrecedenceTester1/CPrecedenceTester1.m
+++ b/test/classes/@CPrecedenceTester1/CPrecedenceTester1.m
@@ -1,8 +1,8 @@
-function x = CPrecedenceTester1()
+function x = CPrecedenceTester1 ()
 
-  x = struct('useless_data', pi);
-  x = class(x, 'CPrecedenceTester1');
+  x = struct ('useless_data', pi);
+  x = class (x, 'CPrecedenceTester1');
 
   % don't change anything as far as precedence is concerned
 
 end
diff --git a/test/classes/@CPrecedenceTester1/tattack.m b/test/classes/@CPrecedenceTester1/tattack.m
--- a/test/classes/@CPrecedenceTester1/tattack.m
+++ b/test/classes/@CPrecedenceTester1/tattack.m
@@ -1,5 +1,5 @@
-function s = tattack(x, y)
-  
+function s = tattack (x, y)
+
   s = 'CPrecedenceTester1';
-  
+
 end
diff --git a/test/classes/@CPrecedenceTester2/CPrecedenceTester2.m b/test/classes/@CPrecedenceTester2/CPrecedenceTester2.m
--- a/test/classes/@CPrecedenceTester2/CPrecedenceTester2.m
+++ b/test/classes/@CPrecedenceTester2/CPrecedenceTester2.m
@@ -1,15 +1,15 @@
-function x = CPrecedenceTester2(flag)
+function x = CPrecedenceTester2 (flag)
 
-  x = struct('useless_data', pi^2);
-  x = class(x, 'CPrecedenceTester2');
+  x = struct ('useless_data', pi^2);
+  x = class (x, 'CPrecedenceTester2');
 
   switch flag,
     case 1, % CPrecedencetester2 > Snork
-      superiorto('Snork');
+      superiorto ('Snork');
     case 2, % CPrecedencetester2 < Snork
-      inferiorto('Snork');
+      inferiorto ('Snork');
     otherwise,
-      error('Incorrect value for argument flag: %d', flag);
+      error ('Incorrect value for argument flag: %d', flag);
   end
 
 end
diff --git a/test/classes/@CPrecedenceTester2/tattack.m b/test/classes/@CPrecedenceTester2/tattack.m
--- a/test/classes/@CPrecedenceTester2/tattack.m
+++ b/test/classes/@CPrecedenceTester2/tattack.m
@@ -1,5 +1,5 @@
-function s = tattack(x, y)
-  
+function s = tattack (x, y)
+
   s = 'CPrecedenceTester2';
-  
+
 end
diff --git a/test/classes/@CPrecedenceTester3/CPrecedenceTester3.m b/test/classes/@CPrecedenceTester3/CPrecedenceTester3.m
--- a/test/classes/@CPrecedenceTester3/CPrecedenceTester3.m
+++ b/test/classes/@CPrecedenceTester3/CPrecedenceTester3.m
@@ -1,15 +1,15 @@
-function x = CPrecedenceTester3(flag)
+function x = CPrecedenceTester3 (flag)
 
-  x = struct('useless_data', pi^3);
-  x = class(x, 'CPrecedenceTester3');
+  x = struct ('useless_data', pi^3);
+  x = class (x, 'CPrecedenceTester3');
 
   switch flag,
     case 1, % CPrecedencetester3 > Snork
-      superiorto('Snork');
+      superiorto ('Snork');
     case 2, % CPrecedencetester3 < Snork
-      inferiorto('Snork');
+      inferiorto ('Snork');
     otherwise,
-      error('Incorrect value for argument flag: %d', flag);
+      error ('Incorrect value for argument flag: %d', flag);
   end
 
 end
diff --git a/test/classes/@CPrecedenceTester3/tattack.m b/test/classes/@CPrecedenceTester3/tattack.m
--- a/test/classes/@CPrecedenceTester3/tattack.m
+++ b/test/classes/@CPrecedenceTester3/tattack.m
@@ -1,5 +1,5 @@
-function s = tattack(x, y)
-  
+function s = tattack (x, y)
+
   s = 'CPrecedenceTester3';
-  
+
 end
diff --git a/test/classes/@Cork/Cork.m b/test/classes/@Cork/Cork.m
--- a/test/classes/@Cork/Cork.m
+++ b/test/classes/@Cork/Cork.m
@@ -1,16 +1,16 @@
-function [ s ] = Cork( click )
+function s = Cork (click)
 % Test class.
 
-  if ( (nargin==1) && (isa(click, 'Cork')) )
+  if (nargin == 1 && isa (click, 'Cork'))
     s = click;
     return;
   end
 
-  if( nargin<1 )
+  if (nargin < 1)
     s.click = 1;
   else
     s.click = click;
   end
-  s = class(s, 'Cork');
+  s = class (s, 'Cork');
 
 end
diff --git a/test/classes/@Cork/click.m b/test/classes/@Cork/click.m
--- a/test/classes/@Cork/click.m
+++ b/test/classes/@Cork/click.m
@@ -1,10 +1,10 @@
-function [ out ] = click( in, val )
+function out = click (in, val)
 
-  if (nargin==1) 
+  if (nargin == 1) 
     out = in.click;
   else
     in.click = val;
     out = in;
   end
-        
+
 end
diff --git a/test/classes/@Cork/display.m b/test/classes/@Cork/display.m
--- a/test/classes/@Cork/display.m
+++ b/test/classes/@Cork/display.m
@@ -1,7 +1,7 @@
-function display( s )
+function display (s)
 
-  disp([inputname(1),'.click = ']);
-  disp(' ');
-  disp(s.click);
+  disp ([inputname(1),'.click = ']);
+  disp (' ');
+  disp (s.click);
 
-end
\ No newline at end of file
+end
diff --git a/test/classes/@Cork/get.m b/test/classes/@Cork/get.m
--- a/test/classes/@Cork/get.m
+++ b/test/classes/@Cork/get.m
@@ -1,10 +1,10 @@
-function [ v ] = get( s, propName )
+function v = get (s, propName)
 
-    switch propName
-        case 'click'
-            v = s.click;
-        otherwise
-            error([propName, ' is not a valid Cork property']);
-    end
+  switch propName
+    case 'click'
+      v = s.click;
+    otherwise
+      error ([propName, ' is not a valid Cork property']);
+  end
 
 end
diff --git a/test/classes/@Cork/set.m b/test/classes/@Cork/set.m
--- a/test/classes/@Cork/set.m
+++ b/test/classes/@Cork/set.m
@@ -1,16 +1,16 @@
-function [ s ] = set( s, varargin )
+function s = set (s, varargin)
 
   propArgs = varargin;
-  while (length(propArgs) >= 2)
+  while (length (propArgs) >= 2)
     propName  = propArgs{1};
     propValue = propArgs{2};
     propArgs  = propArgs(3:end);
     switch propName
       case 'click'
         s.click = propValue;
       otherwise
-        error([propName, ' is not a valid Cork property']);
+        error ([propName, ' is not a valid Cork property']);
     end
   end
 
 end
diff --git a/test/classes/@Dork/Dork.m b/test/classes/@Dork/Dork.m
--- a/test/classes/@Dork/Dork.m
+++ b/test/classes/@Dork/Dork.m
@@ -1,18 +1,18 @@
-function [ s ] = Dork( gick, gack )
+function s = Dork (gick, gack)
 
-  if (nargin==1) && isa(gick,'Dork')
+  if (nargin == 1 && isa (gick, 'Dork'))
     s = gick;
   else
     s.gack = 0;
-    if nargin == 0
+    if (nargin == 0)
       s0 = Snork ();
-    elseif nargin==1
-      s0 = Snork(gick);
+    elseif (nargin == 1)
+      s0 = Snork (gick);
     else
-      s0 = Snork(gick);
+      s0 = Snork (gick);
       s.gack = gack;
     end
-    s = class(s,'Dork',s0);
+    s = class (s, 'Dork', s0);
    end 
-   
+
 end
diff --git a/test/classes/@Dork/bling.m b/test/classes/@Dork/bling.m
--- a/test/classes/@Dork/bling.m
+++ b/test/classes/@Dork/bling.m
@@ -1,5 +1,5 @@
-function [ out ] = bling( m1, m2 )
+function out = bling (m1, m2)
 
   out = 1;
-        
+
 end
diff --git a/test/classes/@Dork/display.m b/test/classes/@Dork/display.m
--- a/test/classes/@Dork/display.m
+++ b/test/classes/@Dork/display.m
@@ -1,13 +1,13 @@
-function display( s )
+function display (s) 
 %  Display the critical info for an amplifier
 
-   gick = get(s,'gick');
-   disp([inputname(1),'.gick = '])
-   disp(' ');
-   disp(gick);
-   disp(' ');
-   disp([inputname(1),'.gack = '])
-   disp(' ');
-   disp(s.gack);
+   gick = get (s, 'gick');
+   disp ([inputname(1),'.gick = ']);
+   disp (' ');
+   disp (gick);
+   disp (' ');
+   disp ([inputname(1),'.gack = ']);
+   disp (' ');
+   disp (s.gack);
 
 end
diff --git a/test/classes/@Dork/gack.m b/test/classes/@Dork/gack.m
--- a/test/classes/@Dork/gack.m
+++ b/test/classes/@Dork/gack.m
@@ -1,10 +1,10 @@
-function [ out ] = gack( in, val )
+function out = gack (in, val)
 
-  if (nargin==1) 
+  if (nargin == 1) 
     out = in.gack;
   else
     in.gack = val;
     out = in;
   end
-        
+
 end
diff --git a/test/classes/@Dork/get.m b/test/classes/@Dork/get.m
--- a/test/classes/@Dork/get.m
+++ b/test/classes/@Dork/get.m
@@ -1,10 +1,10 @@
-function [ v ] = get( s, propName )
+function v = get (s, propName)
 
   switch propName
     case 'gack'
       v = s.gack;
     otherwise
-      v = get(s.Snork,propName);
+      v = get (s.Snork,propName);
   end
 
 end
diff --git a/test/classes/@Dork/getStash.m b/test/classes/@Dork/getStash.m
--- a/test/classes/@Dork/getStash.m
+++ b/test/classes/@Dork/getStash.m
@@ -1,5 +1,5 @@
-function [ out ] = getStash(cls)
+function out = getStash (cls)
 
   out = myStash ();
-        
+
 end
diff --git a/test/classes/@Dork/private/myStash.m b/test/classes/@Dork/private/myStash.m
--- a/test/classes/@Dork/private/myStash.m
+++ b/test/classes/@Dork/private/myStash.m
@@ -1,5 +1,5 @@
-function [ out ] = myStash ()
+function out = myStash ()
 
   out = 2;
 
 end
diff --git a/test/classes/@Dork/set.m b/test/classes/@Dork/set.m
--- a/test/classes/@Dork/set.m
+++ b/test/classes/@Dork/set.m
@@ -1,16 +1,16 @@
-function [ s ] = set( s, varargin )
+function s = set (s, varargin)
 
   propArgs = varargin;
-  while (length(propArgs) >= 2)
+  while (length (propArgs) >= 2)
     propName  = propArgs{1};
     propValue = propArgs{2};
     propArgs  = propArgs(3:end);
     switch propName
       case 'gack'
         s.gack = propValue;
       otherwise
-        s.Snork = set(s.Snork, propName, propValue);
+        s.Snork = set (s.Snork, propName, propValue);
     end
   end
 
 end
diff --git a/test/classes/@Gork/Gork.m b/test/classes/@Gork/Gork.m
--- a/test/classes/@Gork/Gork.m
+++ b/test/classes/@Gork/Gork.m
@@ -1,15 +1,16 @@
-function [ s ] = Gork( g )
-  if (nargin==1) && isa(g,'Gork')
+function s = Gork (g)
+
+  if (nargin == 1 && isa (g, 'Gork'))
     s = sprk;
     return;
   end
 
   drk  = Dork ();
   prk  = Pork ();
   blrk = Blork ();
-  s.Cork = Cork(17);  % Aggregation.
+  s.Cork = Cork (17);  % Aggregation.
   s.gark = -2;
   s.gyrk = -3;
-  s = class(s,'Gork',drk,prk,blrk);
-   
+  s = class (s,'Gork',drk,prk,blrk);
+
 end
diff --git a/test/classes/@Gork/cork.m b/test/classes/@Gork/cork.m
--- a/test/classes/@Gork/cork.m
+++ b/test/classes/@Gork/cork.m
@@ -1,10 +1,10 @@
-function [ out ] = cork( in, val )
+function out = cork (in, val)
 
-  if (nargin==1) 
+  if (nargin == 1) 
     out = in.Cork;
   else
     in.Cork = val;
     out = in;
   end
-        
+
 end
diff --git a/test/classes/@Gork/display.m b/test/classes/@Gork/display.m
--- a/test/classes/@Gork/display.m
+++ b/test/classes/@Gork/display.m
@@ -1,16 +1,15 @@
-function display( s )
+function display (s)
 %  Display the critical info for a Gork.
 
    dork_base = s.Dork
    %pork_base = s.Pork
    %sprk = s.sprk;
-   gark = get(s,'gark');
-   disp([inputname(1),'.gark = '])
-   disp(' ');
-   disp(gark);
-   disp([inputname(1),'.Cork= '])
-   disp(' ');
-   disp(click(s.Cork));
-
+   gark = get (s, 'gark');
+   disp ([inputname(1),'.gark = ']);
+   disp (' ');
+   disp (gark);
+   disp ([inputname(1),'.Cork= ']);
+   disp (' ');
+   disp (click(s.Cork));
 
 end
diff --git a/test/classes/@Gork/gark.m b/test/classes/@Gork/gark.m
--- a/test/classes/@Gork/gark.m
+++ b/test/classes/@Gork/gark.m
@@ -1,10 +1,10 @@
-function [ out ] = gark( in, val )
+function out = gark (in, val)
 
-  if (nargin==1) 
+  if (nargin == 1) 
     out = in.gark;
   else
     in.gark = val;
     out = in;
   end
-        
+
 end
diff --git a/test/classes/@Gork/get.m b/test/classes/@Gork/get.m
--- a/test/classes/@Gork/get.m
+++ b/test/classes/@Gork/get.m
@@ -1,14 +1,14 @@
-function [ v ] = get( s, propName )
+function v = get (s, propName)
 
   switch propName
     case 'cork'
       v = s.Cork;
     case 'gark'
       v = s.gark;
     otherwise
       % Note that get/set for multiple parents is hard.  We only do one
       % branch of the parent tree just to test this stuff out.
-      v = get(s.Dork,propName);
+      v = get (s.Dork,propName);
   end
 
 end
diff --git a/test/classes/@Gork/set.m b/test/classes/@Gork/set.m
--- a/test/classes/@Gork/set.m
+++ b/test/classes/@Gork/set.m
@@ -1,24 +1,24 @@
-function [ s ] = set( s, varargin )
+function s = set (s, varargin)
 
   propArgs = varargin;
-  while (length(propArgs) >= 2)
+  while (length (propArgs) >= 2)
     propName  = propArgs{1};
     propValue = propArgs{2};
     propArgs  = propArgs(3:end);
     switch propName
       case 'cork'
-        if(isa(propValue,'Cork'))
+        if (isa (propValue, 'Cork'))
           s.Cork = propValue;
         else
-          s.Cork = set(s.Cork, 'click',propValue);
+          s.Cork = set (s.Cork, 'click', propValue);
         end
       case 'gark'
         s.gark = propValue;
       otherwise
         % Note that get/set for multiple parents is hard.  We only do one
         % branch of the parent tree just to test this stuff out.
-        s.Dork = set(s.Dork, propName, propValue);
+        s.Dork = set (s.Dork, propName, propValue);
     end
   end
 
 end
diff --git a/test/classes/@Gork/subsasgn.m b/test/classes/@Gork/subsasgn.m
--- a/test/classes/@Gork/subsasgn.m
+++ b/test/classes/@Gork/subsasgn.m
@@ -1,9 +1,10 @@
-function g = subsasgn(g, s, x)
+function g = subsasgn (g, s, x)
 
   switch s.type
   case '.'
     switch s.subs
     case 'gyrk'
       g.gyrk = x; 
   end
+
 end
diff --git a/test/classes/@Gork/subsref.m b/test/classes/@Gork/subsref.m
--- a/test/classes/@Gork/subsref.m
+++ b/test/classes/@Gork/subsref.m
@@ -1,9 +1,10 @@
-function x = subsref(g, s)
+function x = subsref (g, s)
 
   switch s.type
   case '.'
     switch s.subs
     case 'gyrk'
       x = g.gyrk;
   end
+
 end
diff --git a/test/classes/@Pork/Pork.m b/test/classes/@Pork/Pork.m
--- a/test/classes/@Pork/Pork.m
+++ b/test/classes/@Pork/Pork.m
@@ -1,19 +1,19 @@
-function [ s ] = Pork( geek, gurk )
+function s = Pork (geek, gurk)
 
-  if (nargin==1) && isa(geek,'Pork')
+  if (nargin == 1 && isa (geek, 'Pork'))
     s = geek;
   else
     s.gurk = 0;
-    if nargin == 0
+    if (nargin == 0)
       s0 = Spork ();
-    elseif nargin==1
-      s0 = Spork(geek);
+    elseif (nargin == 1)
+      s0 = Spork (geek);
     else
-      s0 = Spork(geek);
+      s0 = Spork (geek);
       s.gurk = gurk;
     end
-    s = class(s,'Pork',s0);
+    s = class (s, 'Pork', s0);
    end 
-   superiorto('Dork');
+   superiorto ('Dork');
 
 end
diff --git a/test/classes/@Pork/bling.m b/test/classes/@Pork/bling.m
--- a/test/classes/@Pork/bling.m
+++ b/test/classes/@Pork/bling.m
@@ -1,5 +1,5 @@
-function [ out ] = bling( m1, m2 )
+function out = bling (m1, m2)
 
   out = 2;
-        
+
 end
diff --git a/test/classes/@Pork/display.m b/test/classes/@Pork/display.m
--- a/test/classes/@Pork/display.m
+++ b/test/classes/@Pork/display.m
@@ -1,13 +1,13 @@
-function display( s )
+function display (s)
 %  Display the critical info for an amplifier
 
-   geek = get(s,'geek');
-   disp([inputname(1),'.geek = '])
-   disp(' ');
-   disp(geek);
-   disp(' ');
-   disp([inputname(1),'.gurk = '])
-   disp(' ');
-   disp(s.gurk);
+   geek = get (s, 'geek');
+   disp ([inputname(1),'.geek = ']);
+   disp (' ');
+   disp (geek);
+   disp (' ');
+   disp ([inputname(1),'.gurk = ']);
+   disp (' ');
+   disp (s.gurk);
 
 end
diff --git a/test/classes/@Pork/get.m b/test/classes/@Pork/get.m
--- a/test/classes/@Pork/get.m
+++ b/test/classes/@Pork/get.m
@@ -1,10 +1,10 @@
-function [ v ] = get( s, propName )
+function v = get (s, propName)
 
   switch propName
     case 'gurk'
       v = s.gurk;
     otherwise
-      v = get(s.Spork,propName);
+      v = get (s.Spork, propName);
   end
 
 end
diff --git a/test/classes/@Pork/gurk.m b/test/classes/@Pork/gurk.m
--- a/test/classes/@Pork/gurk.m
+++ b/test/classes/@Pork/gurk.m
@@ -1,10 +1,10 @@
-function [ out ] = gurk( in, val )
+function out = gurk (in, val)
 
-  if (nargin==1) 
+  if (nargin == 1) 
     out = in.gurk;
   else
     in.gurk = val;
     out = in;
   end
-        
+
 end
diff --git a/test/classes/@Pork/private/myStash.m b/test/classes/@Pork/private/myStash.m
--- a/test/classes/@Pork/private/myStash.m
+++ b/test/classes/@Pork/private/myStash.m
@@ -1,5 +1,5 @@
-function [ out ] = myStash ()
+function out = myStash ()
 
   out = 4;
 
 end
diff --git a/test/classes/@Pork/set.m b/test/classes/@Pork/set.m
--- a/test/classes/@Pork/set.m
+++ b/test/classes/@Pork/set.m
@@ -1,16 +1,16 @@
-function [ s ] = set( s, varargin )
+function s = set (s, varargin)
 
   propArgs = varargin;
-  while (length(propArgs) >= 2)
+  while (length (propArgs) >= 2)
     propName  = propArgs{1};
     propValue = propArgs{2};
     propArgs  = propArgs(3:end);
     switch propName
       case 'gurk'
         s.gurk = propValue;
       otherwise
-        s.Spork = set(s.Spork, propName, propValue);
+        s.Spork = set (s.Spork, propName, propValue);
     end
   end
 
 end
diff --git a/test/classes/@Sneetch/Sneetch.m b/test/classes/@Sneetch/Sneetch.m
--- a/test/classes/@Sneetch/Sneetch.m
+++ b/test/classes/@Sneetch/Sneetch.m
@@ -1,16 +1,16 @@
-function [ s ] = Sneetch( mcbean )
+function s = Sneetch (mcbean)
 % Test class: should produce error.
 
-  if (nargin==1) && isa(mcbean, 'Sneetch')
+  if (nargin == 1 && isa (mcbean, 'Sneetch'))
     s = mcbean;
   else
-    if nargin==0
+    if (nargin == 0)
       s.mcbean = 1;
     else
       s.mcbean = mcbean;
     end
-    s = class(s, 'Sneetch');
+    s = class (s, 'Sneetch');
     s.sylvester = 1;
   end
-        
+
 end
diff --git a/test/classes/@Sneetch/display.m b/test/classes/@Sneetch/display.m
--- a/test/classes/@Sneetch/display.m
+++ b/test/classes/@Sneetch/display.m
@@ -1,10 +1,10 @@
-function display( s )
+function display ( s )
 
-  disp([inputname(1),'.mcbean = '])
-  disp(' ');
-  disp(s.mcbean);
-  disp([inputname(1),'.sylvester = '])
-  disp(' ');
-  disp(s.sylvester);
+  disp ([inputname(1),'.mcbean = ']);
+  disp (' ');
+  disp (s.mcbean);
+  disp ([inputname(1),'.sylvester = ']);
+  disp (' ');
+  disp (s.sylvester);
 
-end
\ No newline at end of file
+end
diff --git a/test/classes/@Snork/Snork.m b/test/classes/@Snork/Snork.m
--- a/test/classes/@Snork/Snork.m
+++ b/test/classes/@Snork/Snork.m
@@ -1,17 +1,16 @@
-function [ s ] = Snork( gick )
+function s = Snork (gick)
 % Test class.
 
-  if ( (nargin==1) && (isa(gick, 'Snork')) )
+  if (nargin == 1 && isa (gick, 'Snork'))
     s = gick;
   else
     s.cack = [0 1 2 3];
-    if nargin==0
+    if (nargin == 0)
       s.gick = 1;
     else
       s.gick = gick;
     end
-    s = class(s, 'Snork');
-
+    s = class (s, 'Snork');
   end
-        
+
 end
diff --git a/test/classes/@Snork/cack.m b/test/classes/@Snork/cack.m
--- a/test/classes/@Snork/cack.m
+++ b/test/classes/@Snork/cack.m
@@ -1,5 +1,5 @@
-function [ out ] = cack( in )
+function out = cack (in)
 
   out = in.cack;
-        
+
 end
diff --git a/test/classes/@Snork/display.m b/test/classes/@Snork/display.m
--- a/test/classes/@Snork/display.m
+++ b/test/classes/@Snork/display.m
@@ -1,7 +1,7 @@
-function display( s )
+function display (s)
 
-  disp([inputname(1),'.gick = ']);
-  disp(' ');
-  disp(s.gick);
+  disp ([inputname(1),'.gick = ']);
+  disp (' ');
+  disp (s.gick);
 
-end
\ No newline at end of file
+end
diff --git a/test/classes/@Snork/double.m b/test/classes/@Snork/double.m
--- a/test/classes/@Snork/double.m
+++ b/test/classes/@Snork/double.m
@@ -1,6 +1,6 @@
-function x = double(snk)
+function x = double (snk)
 
   x = snk.gick;
 
 end
 
diff --git a/test/classes/@Snork/end.m b/test/classes/@Snork/end.m
--- a/test/classes/@Snork/end.m
+++ b/test/classes/@Snork/end.m
@@ -1,9 +1,9 @@
 function r = end (snk, index_pos, num_indices)
 
   if (num_indices ~= 1)
     error ('Snork object may only have one index')
   end
-  
+
   r = length (snk.cack);
 
 end
diff --git a/test/classes/@Snork/eq.m b/test/classes/@Snork/eq.m
--- a/test/classes/@Snork/eq.m
+++ b/test/classes/@Snork/eq.m
@@ -1,8 +1,8 @@
-function b = eq(s1, s2)
+function b = eq (s1, s2)
 
-  x1 = double(s1);
-  x2 = double(s2);
+  x1 = double (s1);
+  x2 = double (s2);
 
-  b = isequal(x1, x2);
+  b = isequal (x1, x2);
 
-end
\ No newline at end of file
+end
diff --git a/test/classes/@Snork/ge.m b/test/classes/@Snork/ge.m
--- a/test/classes/@Snork/ge.m
+++ b/test/classes/@Snork/ge.m
@@ -1,8 +1,8 @@
-function b = ge(s1, s2)
+function b = ge (s1, s2)
 
-  x1 = double(s1);
-  x2 = double(s2);
+  x1 = double (s1);
+  x2 = double (s2);
 
   b = (x1(1) >= x2(1));
 
 end
diff --git a/test/classes/@Snork/get.m b/test/classes/@Snork/get.m
--- a/test/classes/@Snork/get.m
+++ b/test/classes/@Snork/get.m
@@ -1,10 +1,10 @@
-function [ v ] = get( s, propName )
+function v = get (s, propName)
 
-    switch propName
-        case 'gick'
-            v = s.gick;
-        otherwise
-            error([propName, ' is not a valid Snork property']);
-    end
+  switch propName
+    case 'gick'
+      v = s.gick;
+    otherwise
+      error ([propName, ' is not a valid Snork property']);
+  end
 
 end
diff --git a/test/classes/@Snork/getStash.m b/test/classes/@Snork/getStash.m
--- a/test/classes/@Snork/getStash.m
+++ b/test/classes/@Snork/getStash.m
@@ -1,5 +1,5 @@
-function [ out ] = getStash(cls)
+function out = getStash (l)
 
   out = myStash ();
-        
+
 end
diff --git a/test/classes/@Snork/gick.m b/test/classes/@Snork/gick.m
--- a/test/classes/@Snork/gick.m
+++ b/test/classes/@Snork/gick.m
@@ -1,10 +1,10 @@
-function [ out ] = gick( in, val )
+function out = gick (in, val)
 
-  if (nargin==1) 
+  if (nargin == 1) 
     out = in.gick;
   else
     in.gick = val;
     out = in;
   end
-        
+
 end
diff --git a/test/classes/@Snork/gt.m b/test/classes/@Snork/gt.m
--- a/test/classes/@Snork/gt.m
+++ b/test/classes/@Snork/gt.m
@@ -1,8 +1,8 @@
-function b = gt(s1, s2)
+function b = gt (s1, s2)
 
-  x1 = double(s1);
-  x2 = double(s2);
+  x1 = double (s1);
+  x2 = double (s2);
 
   b = (x1(1) > x2(1));
 
 end
diff --git a/test/classes/@Snork/horzcat.m b/test/classes/@Snork/horzcat.m
--- a/test/classes/@Snork/horzcat.m
+++ b/test/classes/@Snork/horzcat.m
@@ -1,8 +1,8 @@
-function s = horzcat(s1, s2)
+function s = horzcat (s1, s2)
 
-  x1 = double(s1);
-  x2 = double(s2);
+  x1 = double (s1);
+  x2 = double (s2);
 
-  s = Snork([x1 x2]);
+  s = Snork ([x1 x2]);
 
 end
diff --git a/test/classes/@Snork/ldivide.m b/test/classes/@Snork/ldivide.m
--- a/test/classes/@Snork/ldivide.m
+++ b/test/classes/@Snork/ldivide.m
@@ -1,8 +1,8 @@
-function s = ldivide(s1, s2)
+function s = ldivide (s1, s2)
 
-  x1 = double(s1);
-  x2 = double(s2);
+  x1 = double (s1);
+  x2 = double (s2);
 
   s = Snork(x1 .\ x2);
 
 end
diff --git a/test/classes/@Snork/le.m b/test/classes/@Snork/le.m
--- a/test/classes/@Snork/le.m
+++ b/test/classes/@Snork/le.m
@@ -1,8 +1,8 @@
-function b = le(s1, s2)
+function b = le (s1, s2)
 
-  x1 = double(s1);
-  x2 = double(s2);
+  x1 = double (s1);
+  x2 = double (s2);
 
   b = (x1(1) <= x2(1));
 
 end
diff --git a/test/classes/@Snork/loadobj.m b/test/classes/@Snork/loadobj.m
--- a/test/classes/@Snork/loadobj.m
+++ b/test/classes/@Snork/loadobj.m
@@ -1,6 +1,6 @@
-function [ out ] = loadobj( in )
+function out = loadobj (in)
 
   out = in;
   out.cack = [-1 -2 -3 -4];
-        
+
 end
diff --git a/test/classes/@Snork/lt.m b/test/classes/@Snork/lt.m
--- a/test/classes/@Snork/lt.m
+++ b/test/classes/@Snork/lt.m
@@ -1,8 +1,8 @@
-function b = lt(s1, s2)
+function b = lt (s1, s2)
 
-  x1 = double(s1);
-  x2 = double(s2);
+  x1 = double (s1);
+  x2 = double (s2);
 
   b = (x1(1) < x2(1));
 
 end
diff --git a/test/classes/@Snork/minus.m b/test/classes/@Snork/minus.m
--- a/test/classes/@Snork/minus.m
+++ b/test/classes/@Snork/minus.m
@@ -1,8 +1,8 @@
-function s = minus(s1, s2)
+function s = minus (s1, s2)
 
-  x1 = double(s1);
-  x2 = double(s2);
+  x1 = double (s1);
+  x2 = double (s2);
 
-  s = Snork(x1 - x2);
+  s = Snork (x1 - x2);
 
 end
diff --git a/test/classes/@Snork/mldivide.m b/test/classes/@Snork/mldivide.m
--- a/test/classes/@Snork/mldivide.m
+++ b/test/classes/@Snork/mldivide.m
@@ -1,8 +1,8 @@
-function s = mldivide(s1, s2)
+function s = mldivide (s1, s2)
 
-  x1 = double(s1);
-  x2 = double(s2);
+  x1 = double (s1);
+  x2 = double (s2);
 
-  s = Snork(x1 \ x2);
+  s = Snork (x1 \ x2);
 
 end
diff --git a/test/classes/@Snork/mpower.m b/test/classes/@Snork/mpower.m
--- a/test/classes/@Snork/mpower.m
+++ b/test/classes/@Snork/mpower.m
@@ -1,10 +1,10 @@
-function s = mpower(s1, x)
+function s = mpower (s1, x)
 
-  if ~isa(s1, 'Snork') || isa(x, 'Snork')
-    error('mpower Snork!!!');
+  if (~isa (s1, 'Snork') || isa (x, 'Snork'))
+    error ('mpower Snork!!!');
   end
 
   s = s1;
   s.gick = s.gick ^ x;
 
 end
diff --git a/test/classes/@Snork/mrdivide.m b/test/classes/@Snork/mrdivide.m
--- a/test/classes/@Snork/mrdivide.m
+++ b/test/classes/@Snork/mrdivide.m
@@ -1,8 +1,8 @@
-function s = mrdivide(s1, s2)
+function s = mrdivide (s1, s2)
 
-  x1 = double(s1);
-  x2 = double(s2);
+  x1 = double (s1);
+  x2 = double (s2);
 
-  s = Snork(x1 / x2);
+  s = Snork (x1 / x2);
 
 end
diff --git a/test/classes/@Snork/mtimes.m b/test/classes/@Snork/mtimes.m
--- a/test/classes/@Snork/mtimes.m
+++ b/test/classes/@Snork/mtimes.m
@@ -1,8 +1,8 @@
-function s = mtimes(s1, s2)
+function s = mtimes (s1, s2)
 
-  x1 = double(s1);
-  x2 = double(s2);
+  x1 = double (s1);
+  x2 = double (s2);
 
-  s = Snork(x1 * x2);
+  s = Snork (x1 * x2);
 
 end
diff --git a/test/classes/@Snork/ne.m b/test/classes/@Snork/ne.m
--- a/test/classes/@Snork/ne.m
+++ b/test/classes/@Snork/ne.m
@@ -1,5 +1,5 @@
-function b = ne(s1, s2)
+function b = ne (s1, s2)
 
   b = ~(s1 == s2);
 
 end
diff --git a/test/classes/@Snork/plus.m b/test/classes/@Snork/plus.m
--- a/test/classes/@Snork/plus.m
+++ b/test/classes/@Snork/plus.m
@@ -1,8 +1,8 @@
-function s = plus(s1, s2)
+function s = plus (s1, s2)
 
-  x1 = double(s1);
-  x2 = double(s2);
+  x1 = double (s1);
+  x2 = double (s2);
 
-  s = Snork(x1 + x2);
+  s = Snork (x1 + x2);
 
-end
\ No newline at end of file
+end
diff --git a/test/classes/@Snork/power.m b/test/classes/@Snork/power.m
--- a/test/classes/@Snork/power.m
+++ b/test/classes/@Snork/power.m
@@ -1,10 +1,10 @@
-function s = power(s1, x)
+function s = power (s1, x)
 
-  if ~isa(s1, 'Snork') || isa(x, 'Snork')
-    error('power Snork!!!');
+  if (~isa (s1, 'Snork') || isa (x, 'Snork'))
+    error ('power Snork!!!');
   end
 
   s = s1;
   s.gick = s.gick .^ x;
 
 end
diff --git a/test/classes/@Snork/private/myStash.m b/test/classes/@Snork/private/myStash.m
--- a/test/classes/@Snork/private/myStash.m
+++ b/test/classes/@Snork/private/myStash.m
@@ -1,5 +1,5 @@
-function [ out ] = myStash ()
+function out = myStash ()
 
   out = 1;
-        
+
 end
diff --git a/test/classes/@Snork/rdivide.m b/test/classes/@Snork/rdivide.m
--- a/test/classes/@Snork/rdivide.m
+++ b/test/classes/@Snork/rdivide.m
@@ -1,8 +1,8 @@
-function s = rdivide(s1, s2)
+function s = rdivide (s1, s2)
 
-  x1 = double(s1);
-  x2 = double(s2);
+  x1 = double (s1);
+  x2 = double (s2);
 
   s = Snork(x1 ./ x2);
 
 end
diff --git a/test/classes/@Snork/saveobj.m b/test/classes/@Snork/saveobj.m
--- a/test/classes/@Snork/saveobj.m
+++ b/test/classes/@Snork/saveobj.m
@@ -1,6 +1,6 @@
-function [ out ] = saveobj( in )
+function out = saveobj (in)
 
   out = in;
   out.cack = [];
-        
+
 end
diff --git a/test/classes/@Snork/set.m b/test/classes/@Snork/set.m
--- a/test/classes/@Snork/set.m
+++ b/test/classes/@Snork/set.m
@@ -1,16 +1,16 @@
-function [ s ] = set( s, varargin )
+function s = set (s, varargin)
 
   propArgs = varargin;
-  while (length(propArgs) >= 2)
+  while (length (propArgs) >= 2)
     propName  = propArgs{1};
     propValue = propArgs{2};
     propArgs  = propArgs(3:end);
     switch propName
       case 'gick'
         s.gick = propValue;
       otherwise
-        error([propName, ' is not a valid Snork property']);
+        error ([propName, ' is not a valid Snork property']);
     end
   end
 
 end
diff --git a/test/classes/@Snork/subsasgn.m b/test/classes/@Snork/subsasgn.m
--- a/test/classes/@Snork/subsasgn.m
+++ b/test/classes/@Snork/subsasgn.m
@@ -1,9 +1,10 @@
 function snk = subsasgn (snk, s, val)
+
   if (length (s) < 1)
     error ('Snork: needs index');
   end
   switch (s(1).type)
     case '()'
       ind = s(1).subs;
       if (numel (ind) ~= 1)
         error ('Snork: need exactly one index');
@@ -30,9 +31,10 @@ function snk = subsasgn (snk, s, val)
       if (strcmp (fld, 'gick'))
         snk.gick = val;
       else
         error ('Snork/subsasgn: invalid property \"%s\"', fld);
       end
     otherwise
       error ('invalid subscript type');
   end
+
 end
diff --git a/test/classes/@Snork/subsindex.m b/test/classes/@Snork/subsindex.m
--- a/test/classes/@Snork/subsindex.m
+++ b/test/classes/@Snork/subsindex.m
@@ -1,5 +1,5 @@
-function [ out ] = subsindex( obj )
+function out = subsindex (obj)
 
   out = 0;
-        
+
 end
diff --git a/test/classes/@Snork/subsref.m b/test/classes/@Snork/subsref.m
--- a/test/classes/@Snork/subsref.m
+++ b/test/classes/@Snork/subsref.m
@@ -1,9 +1,10 @@
 function b = subsref (snk, s)
+
   if (isempty (s))
     error ('Snork: missing index');
   end
   switch (s(1).type)
     case '()'
       ind = s(1).subs;
       if (numel (ind) ~= 1)
         error ('Snork: need exactly one index');
@@ -22,9 +23,10 @@ function b = subsref (snk, s)
       if (strcmp (fld, 'gick'))
         b = snk.gick;
       else
         error ('Snork/subsref: invalid property \"%s\"', fld);
       end
     otherwise
       error ('invalid subscript type');
   end
+
 end
diff --git a/test/classes/@Snork/tattack.m b/test/classes/@Snork/tattack.m
--- a/test/classes/@Snork/tattack.m
+++ b/test/classes/@Snork/tattack.m
@@ -1,5 +1,5 @@
-function s = tattack(x, y)
-  
+function s = tattack (x, y)
+
   s = 'Snork';
-  
+
 end
diff --git a/test/classes/@Snork/times.m b/test/classes/@Snork/times.m
--- a/test/classes/@Snork/times.m
+++ b/test/classes/@Snork/times.m
@@ -1,8 +1,8 @@
-function s = times(s1, s2, s3)
+function s = times (s1, s2, s3)
 
-  x1 = double(s1);
-  x2 = double(s2);
+  x1 = double (s1);
+  x2 = double (s2);
 
-  s = Snork(x1 .* x2);
+  s = Snork (x1 .* x2);
 
 end
diff --git a/test/classes/@Snork/uminus.m b/test/classes/@Snork/uminus.m
--- a/test/classes/@Snork/uminus.m
+++ b/test/classes/@Snork/uminus.m
@@ -1,6 +1,6 @@
-function s = uminus(s1)
+function s = uminus (s1)
 
   s = s1;
   s.gick = - s.gick;
 
-end
\ No newline at end of file
+end
diff --git a/test/classes/@Snork/uplus.m b/test/classes/@Snork/uplus.m
--- a/test/classes/@Snork/uplus.m
+++ b/test/classes/@Snork/uplus.m
@@ -1,5 +1,5 @@
-function s = uplus(s1)
+function s = uplus (s1)
 
   s = s1;
 
 end
diff --git a/test/classes/@Snork/vertcat.m b/test/classes/@Snork/vertcat.m
--- a/test/classes/@Snork/vertcat.m
+++ b/test/classes/@Snork/vertcat.m
@@ -1,8 +1,8 @@
-function s = vertcat(s1, s2)
+function s = vertcat (s1, s2)
 
-  x1 = double(s1);
-  x2 = double(s2);
+  x1 = double (s1);
+  x2 = double (s2);
 
-  s = Snork([x1; x2]);
+  s = Snork ([x1; x2]);
 
 end
diff --git a/test/classes/@Spork/Spork.m b/test/classes/@Spork/Spork.m
--- a/test/classes/@Spork/Spork.m
+++ b/test/classes/@Spork/Spork.m
@@ -1,17 +1,16 @@
-function [ s ] = Spork( geek )
+function s = Spork (geek)
 % Test class.
 
-    if (nargin==1) && isa(geek, 'Spork')
-        s = geek;
+    if (nargin == 1 && isa (geek, 'Spork'))
+      s = geek;
     else
       s.cack = [-1 -2 -3 -4];
-      if nargin==0
+      if (nargin == 0)
         s.geek = 1;
       else
         s.geek = geek;
       end
-      s = class(s, 'Spork');
-
+      s = class (s, 'Spork');
     end
-        
+
 end
diff --git a/test/classes/@Spork/cack.m b/test/classes/@Spork/cack.m
--- a/test/classes/@Spork/cack.m
+++ b/test/classes/@Spork/cack.m
@@ -1,5 +1,5 @@
-function [ out ] = cack( in )
+function out = cack (in)
 
   out = in.cack;
-        
+
 end
diff --git a/test/classes/@Spork/display.m b/test/classes/@Spork/display.m
--- a/test/classes/@Spork/display.m
+++ b/test/classes/@Spork/display.m
@@ -1,7 +1,7 @@
-function display( s )
+function display (s)
 
-  disp([inputname(1),'.geek = '])
-  disp(' ');
-  disp(s.geek);
+  disp ([inputname(1),'.geek = ']);
+  disp (' ');
+  disp (s.geek);
 
-end
\ No newline at end of file
+end
diff --git a/test/classes/@Spork/geek.m b/test/classes/@Spork/geek.m
--- a/test/classes/@Spork/geek.m
+++ b/test/classes/@Spork/geek.m
@@ -1,10 +1,10 @@
-function [ out ] = geek( in, val )
+function out = geek (in, val)
 
-  if (nargin==1) 
+  if (nargin == 1) 
     out = in.geek;
   else
     in.geek = val;
     out = in;
   end
-        
+
 end
diff --git a/test/classes/@Spork/get.m b/test/classes/@Spork/get.m
--- a/test/classes/@Spork/get.m
+++ b/test/classes/@Spork/get.m
@@ -1,10 +1,10 @@
-function [ v ] = get( s, propName )
+function v = get (s, propName)
 
-    switch propName
-        case 'geek'
-            v = s.geek;
-        otherwise
-            error([propName, ' is not a valid Spork property']);
-    end
+  switch propName
+    case 'geek'
+      v = s.geek;
+    otherwise
+      error ([propName, ' is not a valid Spork property']);
+  end
 
 end
diff --git a/test/classes/@Spork/getStash.m b/test/classes/@Spork/getStash.m
--- a/test/classes/@Spork/getStash.m
+++ b/test/classes/@Spork/getStash.m
@@ -1,5 +1,5 @@
-function [ out ] = getStash(cls)
+function out = getStash (cls)
 
   out = myStash ();
-        
+
 end
diff --git a/test/classes/@Spork/loadobj.m b/test/classes/@Spork/loadobj.m
--- a/test/classes/@Spork/loadobj.m
+++ b/test/classes/@Spork/loadobj.m
@@ -1,8 +1,8 @@
-function [ out ] = loadobj( in )
+function out = loadobj (in)
 
   out = in;
-  if (~isa(in,'Spork'))
-    out.cack=[];
+  if (~isa (in, 'Spork'))
+    out.cack = [];
   end
-        
+
 end
diff --git a/test/classes/@Spork/private/myStash.m b/test/classes/@Spork/private/myStash.m
--- a/test/classes/@Spork/private/myStash.m
+++ b/test/classes/@Spork/private/myStash.m
@@ -1,5 +1,5 @@
-function [ out ] = myStash ()
+function out = myStash ()
 
   out = 3;
-        
+
 end
diff --git a/test/classes/@Spork/saveobj.m b/test/classes/@Spork/saveobj.m
--- a/test/classes/@Spork/saveobj.m
+++ b/test/classes/@Spork/saveobj.m
@@ -1,6 +1,6 @@
-function [ out ] = saveobj( in )
+function out = saveobj (in)
 
   out = in;
-  %rmfield(out,'cack');
-        
+  %rmfield (out,'cack');
+
 end
diff --git a/test/classes/@Spork/set.m b/test/classes/@Spork/set.m
--- a/test/classes/@Spork/set.m
+++ b/test/classes/@Spork/set.m
@@ -1,16 +1,16 @@
-function [ s ] = set( s, varargin )
+function s = set (s, varargin)
 
   propArgs = varargin;
-  while (length(propArgs) >= 2)
+  while (length (propArgs) >= 2)
     propName  = propArgs{1};
     propValue = propArgs{2};
     propArgs  = propArgs(3:end);
     switch propName
       case 'geek'
         s.geek = propValue;
       otherwise
-        error([propName, ' is not a valid Spork property']);
+        error ([propName, ' is not a valid Spork property']);
     end
   end
 
 end
diff --git a/test/classes/classes.tst b/test/classes/classes.tst
--- a/test/classes/classes.tst
+++ b/test/classes/classes.tst
@@ -36,17 +36,17 @@
 %% The classes provide the ability to test most of the major features
 %% of the legacy OOP facilities.  There are a number of classes, mostly
 %% kind of the same, that create a hierarchy.
 
 %% Test the Snork class.  The Snork class has a number of the standard
 %% methods that the others don't so we can test indexing and other
 %% features.
 %!shared snk, snk1, snk2
-%!test snk = Snork();
+%!test snk = Snork ();
 %! assert (isequal (gick (snk), 1));
 %! assert (isequal (snk.gick, 1));
 %! assert (isequal (snk(2), 1));
 %! assert (isequal (snk{end}, 3));
 %!test snk = gick (snk, 2);
 %! assert (isequal (gick (snk), 2));
 %!test snk = set (snk, 'gick', 7);
 %! assert (isequal (get (snk, 'gick'), 7));
@@ -59,118 +59,118 @@
 %! assert (isobject (snk));
 %! assert (isequal (class (snk), 'Snork'));
 %! assert (isa (snk, 'Snork'));
 %! assert (~isa (snk, 'Sneetch'));
 %! assert (ismethod (snk, 'gick'));
 %! assert (~ismethod (snk, 'bletch'));
 %! assert (exist ('snk') == 1);
 %! assert (exist ('blink') == 0);
-%!test snk1 = Snork(snk);
+%!test snk1 = Snork (snk);
 %! assert (isequal (class (snk1), 'Snork'));
 %! assert (isequal (gick (snk1), 4));
-%!test snk2 = Snork(-3);
+%!test snk2 = Snork (-3);
 %! assert (isequal (class (snk2), 'Snork'));
 %! assert (isequal (gick (snk2), -3));
 %!test x = [1 2 3 4];
 %! assert (isequal (x(snk), 1));
 
 %% x = methods ('Snork');                % Need to test the methods function.
 %% save temp snk;
 %% load temp                             % This load causes a segfault.
 %% assert (isequal (cack(snk), [-1 -2 -3 -4]));      % This is a major bug!
 
 %% The Spork class is a near clone of Snork but without as many standard
 %% methods.  We are testing no new octave features, but this is makes
 %% sure that we haven't bollixed up the Spork class if we should make
 %% changes.  We use Spork in the class hierarchy.
 %!shared sprk
-%!test sprk = Spork();
+%!test sprk = Spork ();
 %! assert (isequal (geek (sprk), 1));
 %!test sprk = geek (sprk, 3);
 %! assert (isequal (geek (sprk), 3));
 %!test sprk = set (sprk,'geek',7);
 %! assert (isequal (get (sprk, 'geek'), 7));
 %! assert (isequal (class (sprk), 'Spork'));
 %! assert (isa (sprk, 'Spork'));
 
 %%  The Blork class is a near clone of Snork but without as many standard
 %%  methods.  We are testing no new octave features, but this is makes
 %%  sure that we haven't bollixed up the Blork class if we should make
 %%  changes.  We use Blork in the class hierarchy.
 %!shared blrk
-%!test blrk = Blork();
+%!test blrk = Blork ();
 %! assert (isequal (bleek(blrk), 1));
 %!test blrk = bleek (blrk, 3);
 %! assert (isequal (bleek (blrk), 3));
 %!test blrk = set (blrk, 'bleek', 13);
 %! assert (isequal (get (blrk, 'bleek'), 13));
 %! assert (isequal (class (blrk), 'Blork'));
 %! assert (isa (blrk, 'Blork'));
 
 %%  The Cork class is a near clone of Snork but without as many standard
 %%  methods.  We are testing no new octave features, but this is makes
 %%  sure that we haven't bollixed up the Cork class if we should make
 %%  changes.  We use Cork in the class hierarchy.
 %!shared crk
-%!test crk = Cork(23);
+%!test crk = Cork (23);
 %! assert (isequal (click(crk), 23));
 %!test crk = click(crk,3);
 %! assert (isequal (click(crk), 3));
 %!test crk = set (crk, 'click', 13);
 %! assert (isequal (get (crk, 'click'), 13));
 %! assert (isequal (class (crk), 'Cork'));
 %! assert (isa (crk, 'Cork'));
 
 %%  The Dork class tests single inheritance.
 %!shared drk
-%!test drk = Dork();
+%!test drk = Dork ();
 %! assert (isequal (gack (drk),0));
 %!test drk = gack (drk,-2);
 %! assert (isequal (gack (drk),-2));
 %!test drk = gick (drk,2);
 %! assert (isequal (gick (drk),2));
 %!test drk = set (drk, 'gick',3, 'gack',-3);
 %! assert (isequal (get (drk, 'gick'), 3));
 %! assert (isequal (get (drk, 'gack'), -3));
 %! assert (isequal (class (drk), 'Dork'));
 %! assert (isa (drk, 'Dork'));
 %! assert (isa (drk, 'Snork'));
 %! assert (isequal (getStash (drk), 2));
-%!test drk1 = Dork(drk);
+%!test drk1 = Dork (drk);
 %! assert (isequal (class (drk1), 'Dork'));
 %! assert (isa (drk1, 'Snork'));
 %! assert (isequal (gick (drk1), 3));
 %! assert (isequal (gack (drk1), -3));
-%!test drk2 = Dork(-4, 4);
+%!test drk2 = Dork (-4, 4);
 %! assert (isequal (class (drk2), 'Dork'));
 %! assert (isa (drk2, 'Snork'));
 %! assert (isequal (gick (drk2), -4));
 %! assert (isequal (gack (drk2), 4));
 
 %%  The Pork class is essentially a clone of Dork.  It is used as part
 %%  of the multiple inheritance test.
 %!shared prk, drk
-%!test prk = Pork();
+%!test prk = Pork ();
 %! assert (isequal (geek (prk), 1));
 %! assert (isequal (gurk (prk), 0));
 %!test prk = gurk (prk,-3);
 %! assert (isequal (gurk (prk), -3));
 %!test prk = geek (prk,9);
 %! assert (isequal (geek (prk), 9));
 %! assert (isequal (class (prk), 'Pork'));
 %! assert (isa (prk, 'Pork'));
 %! assert (isa (prk, 'Spork'));
-%!test drk = Dork();                   % Precedence.
+%!test drk = Dork ();                   % Precedence.
 %! assert (isequal (bling (drk, prk), 2));
 %! assert (isequal (bling (prk, drk), 2));
 
 %%  The Gork class tests aggregation and multiple inheritance.
 %!shared grk
-%!test grk = Gork();
+%!test grk = Gork ();
 %! assert (isequal (gick (grk), 1));
 %! assert (isequal (geek (grk), 1));
 %! assert (isequal (gack (grk), 0));
 %! assert (isequal (gurk (grk), 0));
 %! assert (isequal (bleek (grk), 1));
 %! assert (isequal (gark(grk), -2));
 %! assert (isequal (click (cork (grk)), 17));
 %! assert (isequal (class (cork (grk)), 'Cork'));
@@ -184,17 +184,17 @@
 %! assert (isequal (gick (grk), 3));
 %! assert (isequal (geek (grk), 4));
 %! assert (isequal (gack (grk), -9));
 %! assert (isequal (gurk (grk), -8));
 %! assert (isequal (bleek (grk), -7));
 %! assert (isequal (gark (grk), -6));
 %! assert (isequal (click (cork (grk)), 23));
 %!test
-%! cork1 = Cork(13);
+%! cork1 = Cork (13);
 %! grk = set (grk, 'gick', -5, 'gack', -6, 'gark', -7, 'cork', cork1);
 %! assert (isequal (get (grk, 'gick'), -5));
 %! assert (isequal (get (grk, 'gack'), -6));
 %! assert (isequal (get (grk, 'gark'), -7));
 %! assert (isequal (click(get (grk, 'cork')), 13));
 %!test grk = set (grk, 'cork', 12);
 %! assert (isequal (click(get (grk, 'cork')),12));
 %! assert (isequal (class (cork(grk)), 'Cork'));
@@ -207,31 +207,31 @@
 %! assert (isa (grk, 'Spork'));
 
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %% Testing (some) overloaded operators %%
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 
 %% Common variables for testing overloaded operators
 %!shared x1, x2, x3, s1, s2, s3
-%!  x1 = 1 + rand(3);    s1 = Snork(x1);
-%!  x2 = 1 + rand(3);    s2 = Snork(x2);
-%!  x3 = diag([1 2 3]);  s3 = Snork(x3);
+%!  x1 = 1 + rand (3);    s1 = Snork (x1);
+%!  x2 = 1 + rand (3);    s2 = Snork (x2);
+%!  x3 = diag ([1 2 3]);  s3 = Snork (x3);
 
 %% Test overloaded plus (+) and uplus (unitary +) for the Snork class
 %!test  s = s1 + s2;  assert (isa (s, 'Snork') && isequal (s.gick, x1 + x2));
 %!test  s = s1 + x2;  assert (isa (s, 'Snork') && isequal (s.gick, x1 + x2));
 %!test  s = x1 + s2;  assert (isa (s, 'Snork') && isequal (s.gick, x1 + x2));
 %!test  s = +s1;      assert (isequal (s, s1));
 
 %% Test overloaded minus (-) for the Snork class
 %!test  s = s1 - s2;  assert (isa (s, 'Snork') && isequal (s.gick, x1 - x2));
 %!test  s = s1 - x2;  assert (isa (s, 'Snork') && isequal (s.gick, x1 - x2));
 %!test  s = x1 - s2;  assert (isa (s, 'Snork') && isequal (s.gick, x1 - x2));
-%!test  s = -s1;      assert (isequal (s, Snork(-x1)));
+%!test  s = -s1;      assert (isequal (s, Snork (-x1)));
 
 %% Test overloaded mtimes (*) for the Snork class
 %!test  s = s1 * s2;  assert (isa (s, 'Snork') && isequal (s.gick, x1 * x2));
 %!test  s = s1 * x2;  assert (isa (s, 'Snork') && isequal (s.gick, x1 * x2));
 %!test  s = x1 * s2;  assert (isa (s, 'Snork') && isequal (s.gick, x1 * x2));
 
 %% Test overloaded times (.*) for the Snork class
 %!test  s = s1 .* s2;  assert (isa (s, 'Snork') && isequal (s.gick, x1 .* x2));
@@ -317,17 +317,17 @@
 %% Test overloaded horzcat() for the Snork class
 %% See bug #38128 (http://savannah.gnu.org/bugs/?38128)
 %!test   s = [s1 s2];  assert (isa (s, 'Snork') && isequal (s.gick, [x1 x2]));
 %!xtest  s = [s1 x2];  assert (isa (s, 'Snork') && isequal (s.gick, [x1 x2]));
 %!xtest  s = [x1 s2];  assert (isa (s, 'Snork') && isequal (s.gick, [x1 x2]));
 
 %% Test with the Blork class, where neither vertcat() nor horzcat() is overloaded
 %!shared x1, x2, x3
-%!test x1 = Blork();
+%!test x1 = Blork ();
 %!test x2 = [x1 x1];
 %!assert (isa (x2, 'Blork') && isequal (size (x2), [1 2]));
 %!test x2 = [x1 51];
 %!assert (isa (x2, 'Blork') && isequal (size (x2), [1 2]));
 %!test x3 = [x2; x2];
 %!assert (isa (x3, 'Blork') && isequal (size (x3), [2 2]));
 %!test x3 = [x2; [51 x1]];
 %!assert (isa (x3, 'Blork') && isequal (size (x3), [2 2]));
@@ -335,28 +335,29 @@
 %!error <dimension mismatch> x4 = [x1; x3];
 
 %%%%%%%%%%%%%%%%%%%%%%%%
 %% Testing precedence %%
 %%%%%%%%%%%%%%%%%%%%%%%%
 
 %% default: leftmost object wins
 %!shared A, B
-%!test A = Snork(rand(2));
-%!test B = CPrecedenceTester1();  % no call to inferiorto/superiorto
+%!test A = Snork (rand (2));
+%!test B = CPrecedenceTester1 ();  % no call to inferiorto/superiorto
 %!assert (isequal (tattack (A, B), 'Snork'))
 %!assert (isequal (tattack (B, A), 'CPrecedenceTester1'))  % idem
 
 %!shared A, B
-%!test A = Snork(rand(2));
-%!test B = CPrecedenceTester2(1);  % CPrecedenceTester2 > Snork
+%!test A = Snork (rand (2));
+%!test B = CPrecedenceTester2 (1);  % CPrecedenceTester2 > Snork
 %!assert (isequal (tattack (A, B), 'CPrecedenceTester2'))
 %!assert (isequal (tattack (B, A), 'CPrecedenceTester2'))
 %% Trying to change to CPrecendenceTester < Snork
-%!error D = CPrecedenceTester2(2);
+%!error D = CPrecedenceTester2 (2);
 
 %!shared A, B
-%!test A = Snork(rand(2));
-%!test B = CPrecedenceTester3(2);  % CPrecedenceTester3 < Snork
+%!test A = Snork (rand (2));
+%!test B = CPrecedenceTester3 (2);  % CPrecedenceTester3 < Snork
 %!assert (isequal (tattack (A, B), 'Snork'))
 %!assert (isequal (tattack (B, A), 'Snork'))
 %% Trying to change to CPrecendenceTester3 > Snork
-%!error D = CPrecedenceTester3(1);
+%!error D = CPrecedenceTester3 (1);
+
diff --git a/test/ctor-vs-method/__trace__.m b/test/ctor-vs-method/__trace__.m
--- a/test/ctor-vs-method/__trace__.m
+++ b/test/ctor-vs-method/__trace__.m
@@ -1,18 +1,19 @@
 function r = __trace__ (t)
   persistent history
+
   if (isempty (history))
     history = {};
   end
   if (nargin == 0)
     if (nargout == 0)
       history = {};
     else
       r = history;
     end
   elseif (nargin == 1);
     history = [history; t];
   else
     error ('incorrect call to __trace__');
   end
+
 end
-    
\ No newline at end of file
diff --git a/test/error.tst b/test/error.tst
--- a/test/error.tst
+++ b/test/error.tst
@@ -54,20 +54,20 @@
 %!warning <foo> f ()
 
 %% test/octave.test/error/warning-2.m
 %!test
 %! st.identifier = "backtrace";
 %! ws = warning ("query", "backtrace");
 %! warning ("on", "backtrace");
 %! st.state = "on";
-%! assert(warning ("query", "backtrace"), st);
+%! assert (warning ("query", "backtrace"), st);
 %! warning ("off", "backtrace");
 %! st.state = "off";
-%! assert(warning ("query", "backtrace"), st);
+%! assert (warning ("query", "backtrace"), st);
 %! warning (ws.state, "backtrace");
 
 ## Test usage() function
 
 %% test/octave.test/error/usage-1.m
 %!function g () 
 %!  usage ("foo");
 %!endfunction
diff --git a/test/eval-catch.tst b/test/eval-catch.tst
--- a/test/eval-catch.tst
+++ b/test/eval-catch.tst
@@ -43,17 +43,17 @@
 
 %% test/octave.test/eval-catch/eval-catch-7.m
 %!function ms = mangle (s)
 %!  ## Wrap angle brackets around S.
 %!  ms = cstrcat ("<", s, ">");
 %!endfunction
 %!test
 %! eval ("clear a; a; str='';", "str = mangle (lasterr);");
-%! assert (mangle(lasterr)(1:14), "<'a' undefined");
+%! assert (mangle (lasterr)(1:14), "<'a' undefined");
 %! assert (str(1:14), "<'a' undefined");
 
 %% test/octave.test/eval-catch/eval-catch-8.m
 %!test
 %! eval ("eval (\"clear a; a;str1='';\", \"str1=lasterr;\"); clear b; b; str2='';",
 %! "str2 = lasterr;");
 %! assert (str1(1:13), "'a' undefined");
 %! assert (str2(1:13), "'b' undefined");
diff --git a/test/fcn-handle-derived-resolution/@other/getsize_arrayfun.m b/test/fcn-handle-derived-resolution/@other/getsize_arrayfun.m
--- a/test/fcn-handle-derived-resolution/@other/getsize_arrayfun.m
+++ b/test/fcn-handle-derived-resolution/@other/getsize_arrayfun.m
@@ -1,3 +1,3 @@
 function r = getsize_arrayfun (x)
-  r = arrayfun (@(i) numel (x(i).d), 1:numel(x), 'uniformoutput', true);
+  r = arrayfun (@(i) numel (x(i).d), 1:numel (x), 'uniformoutput', true);
 end
diff --git a/test/for.tst b/test/for.tst
--- a/test/for.tst
+++ b/test/for.tst
@@ -101,11 +101,11 @@
 %! j = 0;
 %! for i = cat (3, a, 4 + a)
 %!   assert (i, [1;2] + 2*j++)
 %! endfor
 
 %!test
 %! a = {1,3;2,4};
 %! j = 0;
-%! for i = cat (3, a, cellfun(@(x) 4 + x, a, "UniformOutput", 0))
+%! for i = cat (3, a, cellfun (@(x) 4 + x, a, "UniformOutput", 0))
 %!   assert (i, {1 + 2*j; 2 + 2*j++})
 %! endfor
diff --git a/test/func.tst b/test/func.tst
--- a/test/func.tst
+++ b/test/func.tst
@@ -88,31 +88,31 @@
 
 %!shared m0, m1, m2, m3
 %! m0 = [1:5];
 %! m1 = reshape ([1 : 30], [5, 6]);
 %! m2 = reshape ([1 : 30], [5, 1, 6]);
 %! m3 = [];
 
 %!test
-%! __fntestfunc__("triu", m1, {"struct"});
+%! __fntestfunc__ ("triu", m1, {"struct"});
 %!test
 %! __fntestfunc__ ("triu", m1, {"struct"}, -1);
 %!test
 %! __fntestfunc__ ("triu", m1, {"struct"}, 1);
 %!test
-%! __fntestfunc__("triu", m3, {"struct"});
+%! __fntestfunc__ ("triu", m3, {"struct"});
 %!test
 %! __fntestfunc__ ("tril", m1, {"struct"});
 %!test
 %! __fntestfunc__ ("tril", m1, {"struct"}, -1);
 %!test
 %! __fntestfunc__ ("tril", m1, {"struct"}, 1);
 %!test
-%! __fntestfunc__("tril", m3, {"struct"});
+%! __fntestfunc__ ("tril", m3, {"struct"});
 %!test
 %! __fntestfunc__ ("squeeze", m2);
 %!test
 %! __fntestfunc__ ("squeeze", m3);
 %!test
 %! __fntestfunc__ ("permute", m1, [2, 1]);
 %!test
 %! __fntestfunc__ ("permute", m2, {"sparse", "logical sparse", "complex sparse"}, [3, 1, 2]);
diff --git a/test/global.tst b/test/global.tst
--- a/test/global.tst
+++ b/test/global.tst
@@ -31,17 +31,17 @@
 %! f;
 
 %% test/octave.test/global/global-3.m
 %!function f ()
 %!  fail ("G");
 %!endfunction
 %!test
 %! global G = 1;
-%! f();
+%! f ();
 
 %% test/octave.test/global/global-4.m
 %!function f ()
 %!  global H = 1;
 %!endfunction
 %!test
 %!  f;
 %!  fail ("H");
@@ -49,29 +49,29 @@
 %% test/octave.test/global/global-5.m
 %!function f ()
 %!  global H = 1;
 %!endfunction
 %!test
 %!function g ()
 %!  fail ("H");
 %!test
-%! g();
+%! g ();
 
 %% test/octave.test/global/global-6.m
 %!function f ()
 %!  global H = 1;
 %!endfunction
 %!function g ()
 %!  global H;
 %!  assert (H,1);
 %!endfunction
 %!test
-%! f();
-%! g();
+%! f ();
+%! g ();
 
 %% test/octave.test/global/global-7.m
 %!test
 %!function f ()
 %!  global H = 1;
 %!endfunction
 %!test
 %! fail ("H");
diff --git a/test/index.tst b/test/index.tst
--- a/test/index.tst
+++ b/test/index.tst
@@ -21,17 +21,17 @@
 %! assert (isempty (a));
 
 %!shared a
 %! a = 1;
 %!assert (a(1), 1)
 %!assert (a(:), 1)
 %!assert (a(:,:), 1)
 %!assert (a(1,:), 1)
-%!assert (a(:,1),1)
+%!assert (a(:,1), 1)
 %!assert (isempty (a(logical (0))))
 %!error a(-1)
 %!error a(2)
 %!error a(2,:)
 %!error a(:,2)
 %!error a(-1,:)
 %!error a(:,-1)
 %!error a([1,2,3])
@@ -114,29 +114,29 @@
 
 %!test
 %! c (1:10,1) = 1:10;
 %! assert (c, [1:10]');
 
 %!assert (b(:), [1; 3; 2; 4; 5; 7; 6; 8])
 %!assert (b(:,:), [1, 2, 5, 6; 3, 4, 7, 8])
 %!assert (b(:,1), [1;3])
-%!assert (b(:,:,:), reshape ([1,3,2,4,5,7,6,8],[2,2,2]))
+%!assert (b(:,:,:), reshape ([1,3,2,4,5,7,6,8], [2,2,2]))
 %!assert (b(:,1,1), [1;3])
-%!assert (b(:,1,1,[1,1]),reshape ([1,3,1,3],[2,1,1,2]))
+%!assert (b(:,1,1,[1,1]),reshape ([1,3,1,3], [2,1,1,2]))
 %!assert (b(1,3), 5)
 %!assert (b(1,[3,4]), [5,6])
 %!assert (b(1,1:4), [1,2,5,6])
 %!assert (b(1,[],:), zeros (1,0,2))
-%!assert (b(1,[]), zeros(1,0))
+%!assert (b(1,[]), zeros (1,0))
 %!assert (b(:,3), [5;7])
 %!assert (b([1,2],3), [5;7])
-%!assert (b(true(2,1),3), [5;7])
-%!assert (b(false(2,1),3), zeros(0,1))
-%!assert (b([],3), zeros(0,1))
+%!assert (b(true (2,1), 3), [5;7])
+%!assert (b(false (2,1), 3), zeros (0,1))
+%!assert (b([],3), zeros (0,1))
 
 %!shared x
 %! # Dummy shared block to clear any previous definitions
 %! x = 1;
 
 %!test
 %! a(1,:) = [1,3];
 %! assert (a, [1,3]);
diff --git a/test/io.tst b/test/io.tst
--- a/test/io.tst
+++ b/test/io.tst
@@ -30,21 +30,21 @@
 %!    input = 0;
 %!  endif
 %!
 %!  ## Setup some variable to be saved or compared to loaded variables
 %!
 %!  ## scalar
 %!  a1 = 1;
 %!  ## matrix
-%!  persistent a2 = hilb(3);
+%!  persistent a2 = hilb (3);
 %!  ## complex scalar
 %!  persistent a3 = 1 + 1i;
 %!  ## complex matrix
-%!  persistent a4 = hilb(3) + 1i*hilb(3);
+%!  persistent a4 = hilb (3) + 1i*hilb (3);
 %!  ## bool
 %!  persistent a5 = (1 == 1);
 %!  ## bool matrix
 %!  persistent a6 = ([ones(1,5), zeros(1,5)] == ones (1,10));
 %!  ## range
 %!  persistent a7 = 1:10;
 %!  ## structure
 %!  persistent a8 = struct ("a", a1, "b", a3);
@@ -206,17 +206,17 @@
 %!         STR.string_fld == "Octave" && ...
 %!         STR.struct_fld.x == 0 && ...
 %!         STR.struct_fld.y == 1 );
 %!
 %!
 %! save -binary struct.dat -struct STR matrix_fld str*_fld;
 %! STR = load ("struct.dat");
 %!
-%! assert (!isfield(STR,"scalar_fld") && ...
+%! assert (!isfield (STR,"scalar_fld") && ...
 %!         STR.matrix_fld == [1.1,2;3,4] && ...
 %!         STR.string_fld == "Octave" && ...
 %!         STR.struct_fld.x == 0 && ...
 %!         STR.struct_fld.y == 1);
 %!
 %! delete struct.dat;
 
 %!test
@@ -300,23 +300,23 @@
 %!test
 %! [x, n] = sscanf ("   0.024000 0.200 0.200 2.000         1987           5           0  0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0    0 2 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 2 0 0 1 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0    0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 4 5 1 2    2 5 5 8 2 8 12 6 15 18 28 26 47 88 118 162 192 130 88 56 27 23 14 9 6 3 4 1 0    2 3 1 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0    0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0    1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0   0.026000 0.250 0.250 2.100         3115           3           0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0    0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 1 0 0 0 0    0 0 0 0 1 0 1 0 0 0 0 0 0 0 2 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 1 0 1    1 1 0 1 0 1 3 2 0 5 15 25 44 66 145 179 193 172 104 57 17 11 12 2 1 0 1 1 0 1    0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0    0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0    0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0   0.028000 0.300 0.300 2.200         4929           3           0  1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0    0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0    0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0    1 0 1 0 1 2 2 3 2 3 14 21 49 80 148 184 218 159 124 63 37 13 12 3 1 1 0 0 0 0    0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 1 0 0    0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0    0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0   0.030000 0.350 0.350 2.300         7051           5           0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 0 0    0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1    0 0 1 0 0 0 2 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 1    0 0 0 2 0 0 0 1 5 6 14 28 51 88 154 177 208 169 124 65 39 15 5 3 3 2 1 0 1 0 1   0 0 0 0 1 1 1 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 1 0 0 0    0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0    0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0   0.032000 0.400 0.400 2.400         9113           4           0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0    1 0 0 0 0 2 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0    0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0 0 2 0    1 0 0 1 1 0 2 3 5 3 17 30 60 117 156 189 209 129 102 64 56 16 11 4 2 2 0 0 0 0   1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0    1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0    0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0   0.034000 0.450 0.450 2.500        11811           6           0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0    0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0    0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0    0 0 2 1 0 0 1 0 5 5 15 21 57 99 149 190 195 159 130 69 41 16 10 2 5 3 0 1 0 0    0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0    0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0    0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0   0.036000 0.500 0.500 2.600        14985           3           0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0    0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0    0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 1 0 0 1 0 0 0 0    0 0 0 0 1 0 0 2 2 6 10 34 60 95 126 177 194 155 99 71 44 17 6 7 2 0 0 0 3 0 0    1 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0    0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0    0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0   0.038000 0.550 0.550 2.700        18391           3           0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 1 0 0 0 0    0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 2    1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 2 0 0 1 1 0 1    2 1 0 0 0 1 0 1 3 6 19 27 52 95 161 154 169 134 94 64 37 19 9 6 0 2 1 0 0 0 0    1 2 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 2 2 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0    0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0    0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0   0.040000 0.600 0.600 2.800        22933           5           0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0    0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 1 0 0 0 0 0 0 0 1 0    0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 1 0 1    0 0 0 0 0 2 0 3 4 7 18 27 47 82 134 163 133 138 101 58 34 26 10 5 2 1 2 1 1 0    2 1 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0    0 0 0 0 0 0 0 0 0 0 0 0 0 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0    0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0   0.042000 0.650 0.650 2.900        27719           5           0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0    0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 1 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0    0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0    0 0 1 0 0 0 1 1 2 8 16 37 51 87 128 153 146 123 105 62 35 24 8 3 5 0 1 2 1 0 0   0 1 1 1 0 0 0 1 0 1 0 0 2 1 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 1 0 0 0 0 0    0 0 1 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0    0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0   0.044000 0.700 0.700 3.000        32922           5           0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0    0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 0 0 0 2 0    0 0 0 0 0 0 0 2 1 0 0 0 0 1 1 1 1 0 0 1 0 0 0 1 0 0 0 0 0 0 1 1 0 0 0 1 0 1 1    1 1 0 0 0 1 4 3 5 5 15 35 54 88 132 168 149 105 92 62 30 16 17 4 5 1 0 0 1 0 1   1 0 1 1 0 0 0 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 1 0 0 0 0 0 0 0    0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0    0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0   0.046000 0.750 0.750 3.100        38973           3           0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0    0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1    0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0    0 0 0 1 0 0 0 4 3 5 20 37 56 94 110 135 149 124 84 58 36 17 14 7 1 0 2 0 1 0 0   1 1 0 0 0 0 0 1 1 0 0 0 1 0 1 1 0 0 1 1 1 0 0 0 0 1 1 0 0 1 0 0 0 0 1 0 0 0 1    1 0 1 0 1 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0    1 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0   0.048000 0.800 0.800 3.200        45376           5           0  1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0    0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0    0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 1 1 0 0 2 1 1 2 0 0 0 1 0 0 0 0 0 1 0 0 0 0 1 0    0 0 0 1 0 0 0 0 1 3 18 34 55 82 104 135 116 99 79 60 51 29 10 4 3 1 1 1 0 0 1    0 0 0 1 0 0 3 1 2 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 1    0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0    1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0   0.050000 0.850 0.850 3.300        52060           3           0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0    0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 1 0 0    0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 1 0 0 0 0 1 1 0 0 0 1    0 0 0 0 0 2 2 1 3 12 24 40 39 107 121 127 138 100 86 68 44 23 15 7 3 1 1 0 1 1   0 0 2 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 0 0 0 2 0 0 0 1 0 0 0    0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0    0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0   0.052000 0.900 0.900 3.400        59454           3           0  0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 1 0 0 0 1    0 0 0 1 0 1 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0    0 0 0 0 0 1 0 0 0 0 0 2 0 0 0 0 0 0 1 0 0 0 0 1 0 1 0 1 0 0 2 0 2 1 0 0 0 1 0    0 1 0 0 0 0 0 3 3 6 21 32 68 90 132 111 122 107 73 57 47 24 11 7 4 2 2 1 0 0 0   0 0 0 0 0 1 0 0 1 0 0 2 0 1 1 0 0 1 0 0 0 0 0 3 0 1 0 0 0 0 1 1 0 0 0 1 0 0 0    0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0    0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0   0.054000 0.950 0.950 3.500        67013           3           0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0    0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0    0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 1 0 1 0 0 0 0 1 0 0 1 1 0 0 0    1 0 1 0 1 2 4 3 7 9 28 31 71 94 115 96 108 78 82 60 38 17 12 11 4 3 1 1 0 2 1    0 0 0 2 1 3 0 0 0 0 3 0 0 1 0 0 0 0 0 0 0 2 0 0 0 1 0 2 0 1 0 2 0 1 0 0 1 0 0    0 1 0 0 0 1 0 0 1 0 1 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0    0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0   0.056000 1.000 1.000 3.600        75475           3           0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0    0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0    0 2 0 0 0 0 0 0 0 0 0 0 0 0 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 1 3 0 0 1    1 2 0 1 4 0 1 8 6 7 17 41 56 71 109 113 84 103 72 54 35 22 6 9 1 7 5 4 0 0 1 0   0 0 0 0 0 1 0 0 2 1 0 0 0 0 2 0 0 1 0 0 1 0 0 0 0 0 0 1 0 2 0 1 0 0 0 0 1 0 1    0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 3 0 0 0 1 0 0 0 0 0 0 1 1 0 0 2 0 0 0 0    0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0   0.058000 1.050 1.050 3.700        83558           3           0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0    0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0    0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 1 2 0 0    2 0 0 1 0 3 2 3 6 15 27 41 77 73 94 94 92 76 61 56 42 23 13 11 6 2 1 2 0 1 2 0   0 1 0 1 0 0 1 0 0 1 1 1 0 0 0 1 0 0 0 1 0 0 0 0 1 1 0 0 0 0 2 0 0 0 0 0 1 2 0    0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0    0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0   0.060000 1.100 1.100 3.800        93087           3           0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1    0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0    0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 1 2 2 0 0 0 1 0 1 1 0 0 0 1 1 0 4    0 0 1 2 0 3 1 3 5 13 33 31 65 75 77 96 97 80 59 45 36 32 18 2 5 0 1 0 0 1 0 0    3 0 0 0 0 1 0 0 0 0 0 1 0 0 1 2 0 0 0 0 1 0 0 0 0 1 0 1 1 1 0 0 2 0 0 2 0 1 0    0 0 0 0 0 0 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0    0 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0   0.062000 1.150 1.150 3.900       102829           3           0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0    0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0    0 0 0 0 0 1 1 1 0 0 0 0 1 1 0 0 1 0 1 0 0 0 0 0 1 1 1 0 1 0 1 1 0 1 1 0 2 0 2    1 2 0 0 2 4 3 5 11 9 23 43 53 68 65 87 83 77 59 49 34 18 15 9 4 2 3 2 0 0 0 4    0 1 1 0 0 2 0 0 1 0 0 0 0 1 1 1 0 1 0 0 0 0 2 0 0 0 0 1 0 0 1 1 1 1 0 0 0 1 0    0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 1 0 0 1 0 1 0 0 0 0 0 0 1 0 0 0    0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0   0.064000 1.200 1.200 4.000       113442           3           0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0    0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 1 0 1 0 0 1 0 0 0 1 0 0 0 0 0 1 0 0 0    0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 1 0 0 0 0 1 0 0 0 1 0 1 1 1 0 1 1 1 1 1 0 0 0 1    2 0 0 0 2 0 4 5 11 13 29 39 61 68 61 75 76 74 73 44 37 29 19 6 3 3 2 0 1 2 1 0   0 0 0 1 1 1 0 1 1 0 0 0 1 0 1 1 0 1 2 0 2 1 1 1 0 0 0 0 1 0 0 1 1 1 1 1 0 0 0    0 0 0 0 1 0 0 0 0 2 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0    0 1 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0   0.066000 1.250 1.250 4.100       126668           3           0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0    0 0 1 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 1    0 0 0 0 0 1 0 0 0 0 0 1 0 0 1 1 0 0 0 1 1 2 3 0 2 1 2 0 1 0 3 0 0 0 1 0 1 1 3    0 0 1 3 0 2 4 3 12 12 30 48 56 66 77 78 71 82 52 31 32 19 20 16 8 2 1 3 0 0 2    1 0 1 0 1 0 0 0 1 3 1 0 1 0 1 1 1 0 0 0 0 0 2 0 2 0 0 0 0 0 1 0 0 0 0 1 1 0 0    0 0 0 1 0 0 0 0 0 2 0 3 1 0 0 1 0 0 0 0 0 0 1 0 1 1 0 0 0 1 0 0 0 0 1 0 0 0 0    0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0   0.068000 1.300 1.300 4.200       138042           3           0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 0 2 0 0 1 0 1 0 0 0 0 0    0 0 0 1 0 0 2 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0    0 1 0 0 0 0 0 0 0 1 0 0 1 0 0 0 1 0 0 0 0 3 0 0 1 0 0 1 2 0 0 0 3 0 1 0 0 3 0    1 0 1 1 3 1 4 7 11 14 27 36 44 68 72 70 71 45 44 46 29 13 16 11 5 2 0 3 0 0 0    0 1 1 2 0 0 1 1 2 1 1 0 1 0 0 0 0 0 0 0 0 0 0 1 0 1 1 0 1 2 0 0 1 1 0 1 1 1 0    0 1 0 0 1 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0    0 0 0 1 0 0 1 0 0 0 0 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0   0.070000 1.350 1.350 4.300       152335           3           0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0    0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 2 0 0 0 1 0 0 0 0 0 0 0 0 1 0 1 0    1 0 0 0 2 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 2 0 0 0 0 1 1 1 0 1 1 0 1 1 1 1 0 2 0    0 0 0 0 2 0 1 7 14 19 34 35 54 72 68 72 68 58 48 36 37 27 25 17 1 4 1 0 0 0 1    2 2 0 0 1 1 1 2 1 0 3 1 0 1 0 2 1 0 0 0 1 1 1 2 0 0 0 0 1 1 0 1 1 0 2 1 1 1 1    0 0 0 1 1 0 0 2 0 0 1 0 0 0 1 1 0 2 1 1 0 0 0 0 2 0 0 0 0 0 0 0 1 1 0 0 0 0 1    0 0 1 0 0 0 0 0 0 0 0 2 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0   0.072000 1.400 1.400 4.400       166280           4           0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0    0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 1 0 1 1 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0    2 0 0 0 0 0 0 0 1 0 1 0 1 1 1 0 0 1 0 1 0 0 3 4 2 2 0 0 0 0 0 1 1 3 1 0 3 2 2    1 2 2 0 2 2 1 8 14 26 24 29 47 47 68 65 63 55 42 41 26 29 17 8 4 4 1 0 1 2 0 0   0 1 1 2 0 1 2 1 0 0 1 1 1 0 0 1 0 0 0 1 0 0 1 2 1 2 1 0 0 0 0 0 1 1 2 0 2 2 0    0 0 0 1 1 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 1 0 0    0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0   0.074000 1.450 1.450 4.500       179484           3           0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 0    1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 2 1 0 0 1 0 1 0 0 1 0 1 2 0 0 0 0 0 0 0 0 0 1 0    0 0 1 0 1 0 1 0 1 1 0 0 0 0 0 0 0 0 1 1 0 0 0 1 0 1 1 0 1 1 1 2 0 0 1 1 2 1 0    1 1 2 2 0 1 5 6 10 20 43 50 57 62 53 62 66 45 42 33 27 26 23 14 3 0 2 0 1 0 0    1 1 0 0 2 1 1 0 0 3 0 1 1 1 0 1 1 0 1 0 1 2 1 0 0 1 2 0 2 0 0 0 0 1 1 3 1 0 0    2 1 1 1 0 0 0 0 0 0 1 2 0 1 0 0 0 0 0 1 1 0 2 0 0 0 0 0 1 0 2 1 0 0 0 0 0 0 1    0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0   0.076000 1.500 1.500 4.600       197657           3           0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 2 0 0 0 1 1 0 0 0 0 0 0 1 0 1 0    0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 1 2 0 0 0 1 0 0 0 0    0 0 1 0 1 0 0 0 0 0 0 0 0 1 2 0 0 0 2 1 1 0 1 1 0 1 1 3 2 1 1 2 1 0 1 0 0 0 0    0 1 1 1 0 5 3 7 12 24 38 32 41 48 54 66 71 49 46 31 38 25 15 8 6 6 5 0 1 3 0 1   1 1 1 1 0 1 2 0 1 0 0 0 1 0 2 1 2 0 0 0 0 1 3 1 0 0 0 0 1 1 0 1 0 1 1 1 1 1 0    4 1 1 1 0 3 0 0 0 2 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0    0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0   0.078000 1.550 1.550 4.700       212054           3           0  0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 1 0 0 1 0 0 0 0    0 1 0 1 1 0 0 1 0 0 1 0 0 0 0 0 0 0 1 1 1 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1    0 0 2 0 0 0 1 0 0 1 0 1 1 0 1 3 1 0 0 1 2 0 0 0 1 0 0 0 0 0 2 1 2 1 1 1 0 0 1    5 1 1 2 3 5 7 9 11 22 31 37 48 50 52 54 57 37 38 38 33 24 11 19 11 3 1 2 0 3 3   2 1 0 1 3 0 1 1 1 1 1 2 0 0 0 1 1 2 0 1 1 3 0 1 1 0 0 1 0 2 0 1 0 0 1 3 0 2 0    1 0 1 2 0 1 1 1 1 1 0 3 0 1 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 1 1 0 0 0 0 0 1 0    0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 1 0 0 0 0 0 0 0 0   0.080000 1.600 1.600 4.800       231971           3           0  0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 2 0 0 0 1 1 1 0 1 0 0 0 0 1 0 1 1    0 0 0 0 2 0 0 0 1 0 0 0 0 0 1 0 0 0 0 1 2 1 0 1 1 1 0 1 0 0 1 0 1 3 0 0 0 1 0    0 0 1 1 1 0 0 4 1 1 0 2 0 1 1 1 2 0 0 0 1 0 1 2 1 2 3 2 0 1 0 4 3 1 1 1 1 3 1    0 0 0 2 1 0 2 7 17 13 29 47 58 59 52 38 51 51 38 34 35 21 14 13 4 1 0 1 1 1 0    2 2 4 1 0 1 1 4 0 0 0 2 0 2 2 2 0 0 1 3 2 1 1 2 2 2 2 1 0 3 0 2 1 2 1 2 2 0 0    1 1 0 2 0 2 2 0 1 0 2 2 3 1 2 3 1 1 0 1 0 2 0 1 2 1 2 0 2 1 0 0 3 0 0 1 1 1 1    0 0 1 0 0 1 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0   0.082000 1.650 1.650 4.900       252503           3           0  0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 2 0 0    0 0 0 0 0 1 0 0 0 1 1 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0    0 0 0 0 2 0 0 1 0 1 2 2 2 1 0 2 0 1 0 1 1 2 2 0 3 0 0 4 1 0 0 3 0 0 1 2 0 1 1    1 3 0 1 0 2 9 11 25 27 34 53 41 49 43 47 36 31 38 22 30 22 18 9 5 9 2 2 1 2 2    3 1 4 1 1 0 0 1 2 0 2 1 0 0 1 3 2 2 1 0 0 0 1 2 1 0 0 0 2 1 1 0 2 0 0 1 0 0 2    1 3 1 1 1 0 2 1 1 0 2 1 0 1 3 0 0 0 0 2 0 0 1 0 0 0 0 0 1 2 1 1 1 0 2 1 0 0 0    2 0 1 0 0 0 0 1 0 0 0 0 1 0 0 2 0 1 0 1 0 0 0 0 0 0 0 0 0 0   0.084000 1.700 1.700 5.000       267889           3           0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 1 0 1 1 0 0 0 0 0 0 0 1 0 1    0 1 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 1 0 0 0 1 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0    0 1 0 1 1 0 3 0 1 1 1 0 1 2 1 0 2 0 2 4 0 1 0 0 0 1 1 0 1 3 2 0 2 0 4 0 0 2 0    1 4 2 4 3 3 6 10 14 28 37 54 36 40 52 40 50 46 40 32 26 29 12 18 5 2 0 2 4 1 2   1 0 2 1 2 2 1 0 1 0 2 1 2 4 1 1 5 1 0 2 0 1 2 3 2 2 1 2 1 0 2 1 2 1 1 4 1 2 1    4 0 2 2 0 0 3 1 0 2 0 0 1 1 1 0 0 2 1 0 0 0 0 0 0 0 1 1 1 1 0 0 0 1 0 0 0 1 0    0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0   0.086000 1.750 1.750 5.100       290294           3           0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 2 0 0 0 1 0 0 0 0 1 0 1 0 0 1 0 0 0 0 0 0    0 0 0 0 1 0 0 0 0 1 0 0 0 1 1 3 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 0 0 2    1 0 1 0 1 0 0 2 2 0 1 2 2 0 2 0 2 0 1 0 0 1 1 1 3 1 1 1 1 3 4 1 1 2 2 2 1 0 3    0 0 0 2 4 5 6 16 18 20 31 40 54 55 46 41 52 35 27 21 28 27 20 15 8 6 7 1 0 0 3   0 0 2 2 0 3 1 3 1 1 2 0 0 1 2 1 3 2 0 1 2 1 3 1 1 1 1 1 2 0 2 1 0 1 1 1 3 1 1    2 0 1 0 1 0 2 1 1 0 0 1 2 0 3 1 1 0 0 0 1 3 1 1 1 0 0 1 2 1 0 0 1 1 1 0 0 1 0    0 0 0 0 0 2 0 1 0 0 0 2 1 0 2 0 0 0 0 1 1 0 1 0 0 0 0 0 0 0   0.088000 1.800 1.800 5.200       312476           6           0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 1 1 0 0 0 1 0 1 0 1 1 0 0 0 0    0 0 2 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 2 0 0 0 1 0 1 0 0 0 0 0 0 2    1 0 0 1 0 0 1 1 1 1 4 2 0 1 0 0 3 0 0 0 0 0 1 1 4 0 0 0 0 1 1 2 1 0 3 0 0 2 2    4 0 3 1 6 9 10 13 21 24 32 43 33 41 43 49 50 32 26 31 27 12 16 17 3 3 3 5 0 3    0 2 1 3 3 2 1 2 3 1 2 1 1 1 2 0 1 1 0 2 0 3 0 0 2 0 0 0 0 1 0 1 1 3 3 0 1 1 1    1 1 1 2 2 2 0 3 1 0 2 2 2 0 0 0 0 3 1 2 5 1 1 2 0 0 3 3 0 2 2 0 0 0 0 1 2 0 0    1 0 0 1 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0   0.090000 1.850 1.850 5.300       337348           3           0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 1 2 0 1 0 1 0 0 0 1 0 0 0    0 0 0 1 0 0 0 0 2 0 1 1 0 0 0 1 0 1 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 1 1 0 0 0 0    2 0 0 0 1 3 2 0 0 2 2 3 3 2 2 2 0 0 1 1 3 1 3 0 0 0 0 0 0 1 2 1 2 1 2 2 2 0 1    1 0 4 2 2 7 6 15 22 21 39 37 50 31 51 30 33 34 34 26 21 14 13 10 9 4 3 3 4 2 2   0 1 2 3 3 0 1 3 2 5 3 2 2 4 0 2 3 0 4 2 1 2 2 2 4 2 1 3 1 3 2 1 3 1 2 4 1 1 1    1 2 4 1 3 3 3 1 0 4 1 0 1 1 1 1 2 3 0 3 0 0 4 1 1 1 0 2 2 2 1 2 2 0 1 1 0 0 0    2 0 1 0 1 0 0 1 0 0 0 1 3 0 0 1 0 0 1 1 1 0 0 1 0 0 0 0 0 0   0.092000 1.900 1.900 5.400       357303           3           0  0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 0 1 1 0 1 0 0 1 0    0 0 0 0 0 0 1 1 0 0 1 0 0 0 0 0 0 1 3 1 0 1 0 0 0 0 1 0 0 1 0 0 1 1 2 2 0 0 2    2 1 1 1 1 1 1 0 1 0 0 1 1 1 3 1 1 1 1 1 0 1 4 0 1 1 1 3 0 1 1 2 2 2 0 2 3 2 2    2 2 1 2 1 3 8 22 14 32 36 46 39 42 39 29 36 38 26 24 26 18 16 19 10 9 3 6 5 0    3 2 1 1 1 2 0 2 1 1 0 1 1 3 1 0 2 4 2 2 1 4 1 2 2 1 1 0 1 2 0 2 2 2 4 2 1 1 0    2 1 3 1 2 3 4 2 3 2 3 0 1 2 1 0 0 0 4 1 1 1 2 1 3 1 0 5 1 0 0 0 0 0 0 1 0 2 0    1 2 1 0 1 0 0 0 0 0 1 1 0 1 0 1 4 0 0 0 1 0 1 0 0 0 0 0 0 0 0   0.094000 1.950 1.950 5.500       383138           3           0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 1 1 1 1 1 0 1 0 0 0 1 0 0 0 0 0 1 0    0 0 1 0 0 2 1 0 1 1 1 0 0 0 0 0 0 1 1 0 1 0 0 1 1 0 1 0 0 0 0 0 0 0 2 1 1 1 1    2 1 0 2 0 1 0 3 2 1 3 0 1 3 1 1 0 5 0 1 0 1 2 0 0 1 1 2 0 0 6 1 0 3 2 2 3 4 5    0 4 2 1 5 4 11 15 22 27 28 57 38 38 40 38 39 38 27 26 30 18 14 10 10 4 4 4 3 3   2 2 2 2 1 1 1 1 2 2 3 4 1 2 3 1 2 1 2 2 2 1 3 2 1 5 0 1 1 1 3 2 2 2 1 3 1 1 0    3 2 2 0 0 2 2 2 0 0 0 2 0 1 3 1 2 3 2 1 1 0 1 1 1 0 3 2 2 1 0 0 1 3 1 1 0 1 0    0 0 0 0 1 0 0 0 0 1 0 0 3 1 0 0 0 0 1 0 1 1 0 0 0 1 0 0 0 0 0   0.096000 2.000 2.000 5.600       409868           3           0  0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 1 0 0 0 1 0 0 0 0 0 0 1 0 1 0 1 0 2 0 0    1 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 2 0 1 0 0 2 0 2 0 0 0 0 1 0 0 2 1    2 2 2 1 2 1 1 1 1 1 2 0 0 1 1 0 1 0 2 1 2 0 2 0 3 1 2 1 3 1 5 0 2 2 1 2 4 1 2    0 3 1 4 7 5 9 13 22 19 31 27 28 41 34 39 37 22 23 21 22 17 23 15 8 9 3 8 0 3 1   2 2 2 3 1 0 4 2 4 2 2 2 2 4 2 1 1 0 2 0 3 0 3 2 2 1 2 2 1 4 1 2 2 1 1 5 2 1 2    1 2 2 1 0 2 4 3 2 1 2 2 3 2 3 1 2 1 1 1 1 2 1 1 2 2 1 2 3 2 1 1 0 2 2 4 0 1 1    1 1 1 0 0 1 1 3 0 0 0 0 0 1 0 0 2 0 1 2 0 1 1 1 0 1 0 1 0 0   0.098000 2.050 2.050 5.700       439102           3           0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 1 0 0 1 0 1 0 1 0 0 0 0 1 1 0 1 0 0 1 1 0    0 1 1 0 0 1 1 0 1 0 0 0 0 0 0 0 1 2 0 0 1 1 1 1 2 0 1 1 0 0 0 0 1 1 1 0 4 0 0    0 2 1 1 0 3 4 0 1 2 2 1 0 3 0 3 2 0 0 2 0 1 0 0 1 0 1 3 1 3 5 0 2 2 3 5 2 2 2    0 3 2 3 6 5 16 21 19 23 28 29 35 42 42 44 39 33 23 30 18 25 24 15 13 5 4 2 2 0   3 3 0 0 1 3 0 1 1 3 2 4 3 4 2 1 1 1 3 1 0 0 2 2 4 2 2 1 4 2 4 2 2 2 1 2 2 1 2    0 4 2 2 3 1 2 1 1 2 2 1 2 4 2 1 4 1 2 2 2 2 0 2 0 3 0 1 0 2 1 0 4 2 1 3 2 1 0    2 1 1 1 1 0 1 1 2 1 1 1 2 0 1 0 2 1 1 0 0 1 0 0 1 0 0 0 0 0 0   0.100000 2.100 2.100 5.800       467340           3           0  0 0 0 0 0 0 0 0 0 0 0 0 0 2 1 0 0 1 0 0 1 2 0 0 0 0 0 1 0 2 0 0 2 0 0 1 1 0 0    0 1 0 0 1 1 0 0 0 0 1 1 0 0 1 0 0 1 0 0 0 1 1 0 0 0 0 0 1 0 1 0 0 0 0 1 2 0 2    2 4 1 0 1 1 2 3 4 1 4 1 5 1 2 1 0 2 2 2 1 5 4 1 5 4 0 1 2 4 2 2 0 2 1 2 5 4 1    1 1 2 5 7 9 16 23 31 15 22 36 36 44 42 29 31 28 28 18 35 12 10 13 8 4 3 2 2 5    1 2 3 3 1 3 3 5 2 0 3 4 1 2 2 3 0 0 5 2 3 6 2 1 2 5 3 4 3 1 1 1 1 2 2 4 0 2 3    1 2 1 2 4 5 4 3 5 2 1 2 0 5 0 2 2 4 1 0 4 1 0 2 1 2 0 0 1 3 2 4 3 0 2 3 3 3 4    2 2 0 0 0 0 1 1 0 3 2 0 1 2 0 4 2 1 1 1 2 0 0 0 0 0 0 0 0 0 0   0.102000 2.150 2.150 5.900       497495           5           0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0 1 0 2 1 0 0 0 0 1 0 1 0 0 0 0 1 2    0 0 0 0 0 2 0 0 1 0 1 0 0 0 0 1 1 0 0 0 1 1 1 1 2 0 0 1 0 0 0 1 0 2 2 1 0 0 0    2 0 2 1 1 1 6 3 2 0 3 2 2 2 1 1 3 4 1 0 1 2 4 2 3 3 1 1 1 1 3 3 1 4 1 3 4 3 2    3 1 2 2 5 11 11 14 26 27 28 28 28 36 39 42 29 33 24 20 29 18 13 17 13 6 10 4 3   3 6 1 0 1 0 2 1 3 2 3 1 2 3 1 2 1 2 0 2 2 3 1 3 1 1 2 4 4 1 4 3 2 2 3 5 5 3 0    2 5 3 5 1 4 1 1 3 4 2 2 2 2 1 3 0 1 1 2 2 4 2 1 3 2 0 1 2 1 0 2 3 1 2 0 0 0 2    0 0 1 3 0 0 1 2 0 3 1 0 3 1 2 2 1 1 2 0 0 0 0 2 0 0 1 0 0 0 0 0   0.104000 2.200 2.200 6.000       529288           3           0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 2 0 0    0 0 1 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 2 1 0 0 1 3 0 2 0 2 0 0    3 2 2 0 4 0 3 2 2 1 3 1 7 3 1 1 0 4 3 2 1 0 0 3 2 3 5 2 1 4 1 5 1 0 3 2 3 0 1    2 4 7 3 7 8 12 15 20 24 34 39 34 35 27 36 34 23 22 26 15 24 12 12 14 5 3 0 7 1   1 3 5 1 2 2 2 4 3 1 2 5 2 2 3 1 1 4 2 1 3 0 4 5 4 6 4 5 3 3 3 3 1 1 5 0 6 1 2    4 2 3 2 1 3 2 0 0 0 1 3 3 0 1 4 0 3 2 3 0 3 3 0 2 3 4 3 1 1 1 2 5 3 1 2 1 1 2    4 1 0 2 4 1 3 0 0 3 0 1 3 0 1 0 0 1 1 1 0 1 1 1 0 0 0 0 0 0 0   0.106000 2.250 2.250 6.100       560628           3           0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 2 0 1 0 1 0 1 0 1 0 0 1 0 0 0 0 0 0 1 1 0 1    1 0 0 1 1 1 0 1 1 0 0 0 1 1 1 1 0 0 1 1 2 0 0 0 0 2 0 3 1 1 0 0 2 2 2 0 5 2 1    1 1 1 3 1 2 3 0 1 0 0 0 0 1 0 2 2 1 2 1 0 4 3 2 1 2 1 0 4 2 2 0 2 1 1 2 3 1 2    1 2 4 4 11 12 17 19 19 29 30 24 30 35 51 32 36 34 31 19 22 17 11 19 11 7 6 6 3   4 0 3 3 2 0 2 2 2 3 1 5 3 2 3 5 1 0 2 2 5 4 2 3 2 0 1 6 1 2 2 2 2 1 1 2 2 1 4    3 2 2 1 2 5 2 0 2 0 2 5 4 5 2 1 3 6 1 3 4 4 0 0 6 0 2 6 1 2 2 2 0 1 3 1 3 4 2    1 4 2 1 2 3 3 0 3 1 0 2 0 2 1 0 2 1 2 0 0 1 1 0 2 0 0 0 0 0 0 0   0.108000 2.300 2.300 6.200       593293           3           0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 2 0 2 2 1 0 0 2 0 1 0 1 0 0 1 2 2 1 0    0 1 0 2 0 0 0 0 0 1 1 1 1 1 0 0 1 1 0 0 1 1 1 2 2 1 0 1 1 0 1 5 0 2 4 1 0 1 4    2 1 3 2 2 3 2 3 2 0 0 3 4 3 1 3 2 2 0 3 0 2 4 0 3 2 5 1 2 1 4 6 1 2 4 0 3 6 1    7 6 4 5 4 10 16 24 22 20 40 37 44 34 29 21 28 36 36 27 23 24 14 10 4 5 2 5 3 6   2 3 3 1 4 2 1 5 1 3 5 3 2 1 2 2 6 2 3 1 1 0 5 3 3 3 4 5 2 2 3 3 5 5 1 6 2 3 2    6 0 5 2 4 3 5 1 2 2 5 1 2 3 1 2 2 2 4 2 5 5 2 2 2 5 0 1 2 5 2 3 2 3 1 1 2 4 0    2 1 4 2 1 1 1 0 1 2 0 0 1 3 1 0 2 1 1 3 3 2 0 0 0 1 2 0 0 0 0   0.110000 2.350 2.350 6.300       636559           3           0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1 0 0 0 1 1 2 0 0 1 0 0 0 0 0 0 0    1 2 0 0 1 1 1 0 0 0 0 1 0 1 1 0 0 1 0 0 2 0 1 0 1 0 1 0 0 1 1 3 0 1 2 2 0 2 1    1 1 1 0 1 0 1 3 0 3 2 3 4 3 3 4 3 3 2 6 3 1 1 1 2 4 2 3 1 5 1 3 1 4 5 3 3 2 1    3 7 4 3 10 19 17 19 23 27 28 33 39 36 23 23 32 32 16 19 35 23 12 11 12 8 4 5 7   1 2 2 1 2 3 5 4 2 3 2 6 4 4 2 4 1 2 2 1 2 3 0 4 2 1 2 6 2 2 1 3 3 1 6 4 8 5 2    3 5 2 3 0 3 2 3 1 2 2 3 4 3 8 6 2 1 4 6 3 1 2 0 2 0 2 5 0 3 3 3 3 1 3 3 2 5 4    2 1 4 2 2 4 4 1 3 2 5 2 3 1 2 0 4 0 1 0 6 3 1 2 0 2 0 1 0 0 0 0   0.112000 2.400 2.400 6.400       670484           3           0  0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 1 1 1 0 1 0 0 0 1 1 0 0 0 0 0 0 0 0 0 2    0 1 1 1 3 0 0 0 2 1 3 0 1 1 1 0 1 1 1 0 0 1 2 0 1 3 1 5 2 3 0 4 0 2 0 0 1 2 1    0 1 0 0 1 0 2 2 3 2 3 2 2 2 3 4 4 2 3 5 3 3 2 3 3 4 2 4 0 3 2 4 4 1 3 1 3 4 2    2 5 2 8 6 12 17 14 22 27 26 29 39 30 24 36 22 22 20 9 19 15 5 12 16 4 7 5 7 5    5 1 4 5 5 4 4 1 4 4 3 3 3 4 2 2 4 2 4 4 4 4 0 2 3 2 1 4 3 6 1 3 3 3 4 5 4 2 2    2 5 3 0 2 5 4 2 5 3 5 1 1 3 1 1 3 6 6 2 3 2 0 3 2 4 3 4 1 2 2 6 2 0 3 2 2 5 3    3 5 2 1 0 3 1 1 2 2 0 1 1 3 2 3 2 1 1 1 1 3 2 1 0 0 0 0 0 0 0   0.114000 2.450 2.450 6.500       711783           4           0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 1 0 0 1 0 2 1 2 0 1 0 0 1 0 0 1 1 1 1 0 0 0 1    1 2 0 1 1 0 0 0 2 1 1 1 1 1 2 1 2 3 3 1 1 1 2 3 1 3 2 2 1 0 1 1 4 4 4 1 0 4 0    0 1 1 2 1 3 2 0 3 4 1 1 1 1 3 2 0 1 3 2 1 2 1 0 3 3 2 5 4 2 5 3 4 2 2 5 3 3 3    3 5 5 8 7 14 12 28 22 24 23 36 33 26 32 27 26 18 30 24 15 13 19 15 17 6 5 7 5    4 3 5 3 1 4 4 9 5 3 1 4 0 0 6 2 5 3 3 3 1 2 3 2 4 1 5 5 3 8 2 1 1 4 1 7 5 6 6    4 4 3 2 6 3 3 3 3 1 3 4 5 4 3 4 3 1 2 3 1 2 1 2 2 6 5 2 2 2 4 2 2 0 2 3 3 2 7    4 4 1 4 2 0 3 1 1 2 1 2 3 1 3 2 2 4 3 1 4 0 0 4 2 2 2 1 0 0 0 0   0.116000 2.500 2.500 6.600       745364           5           0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 1 2 1 1 2 1 1 1 0 1 0 2 0 1 1    0 1 0 1 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 1 2 3 0 1 4 4 0 4 0 1 0 1 3 3 0 2 1 2 3    2 1 1 1 2 0 4 0 0 4 5 2 5 4 1 3 5 5 4 0 4 4 2 3 2 3 5 2 2 4 2 3 4 2 3 3 3 3 3    2 4 12 10 13 14 19 22 23 24 36 19 32 25 25 36 24 18 20 21 14 18 13 8 6 9 2 9 5   2 5 3 4 4 3 3 0 4 3 2 5 3 4 2 2 6 3 4 0 2 4 1 3 4 7 4 5 3 2 4 5 5 3 4 4 4 2 3    2 4 4 2 1 5 7 1 5 2 4 1 5 5 3 4 4 3 2 4 2 4 0 6 2 3 4 1 2 2 2 4 1 4 2 2 2 5 6    5 1 4 4 2 3 3 3 1 4 3 4 2 6 2 5 3 2 2 1 3 2 2 5 1 1 0 0 1 0 0 0   0.118000 2.550 2.550 6.700       791846           4           0  0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 2 1 1 0 0 0 0 0 1 0 0 0 1 1 0 1 0 1 0 1 1 0 1 0    1 4 1 2 3 0 3 1 0 1 1 1 0 3 1 2 1 1 1 0 0 1 1 1 3 1 3 2 3 1 2 2 1 3 2 4 1 4 0    2 4 1 4 3 2 1 1 2 1 3 2 3 3 2 1 1 5 3 3 3 3 2 3 4 3 5 3 1 1 2 2 3 5 1 2 1 1 4    4 6 9 6 6 13 17 21 20 24 22 25 20 29 23 28 30 26 27 18 20 17 16 17 12 10 8 5 6   6 6 4 3 1 2 4 6 9 2 2 3 5 7 6 2 3 8 5 4 5 6 4 6 5 3 5 3 2 5 3 2 8 3 5 4 5 3 5    4 3 4 8 4 3 8 3 3 3 1 1 2 2 5 4 7 3 2 3 3 2 2 3 6 3 2 2 1 1 5 2 5 6 3 5 3 4 1    3 1 2 1 0 4 1 4 2 2 2 3 1 1 1 1 3 2 0 1 6 1 1 0 2 1 0 1 0 0 0 0   0.120000 2.600 2.600 6.800       833394           3           0  0 0 0 0 0 0 0 0 0 0 0 1 0 0 2 2 1 1 1 2 1 0 0 0 1 0 1 0 0 0 1 0 0 1 1 2 1 0 0    0 0 0 2 2 0 3 1 0 0 2 1 1 1 1 0 1 2 1 5 0 1 0 2 2 1 2 0 4 2 1 4 3 4 2 2 1 2 1    5 2 3 1 3 0 2 2 2 2 3 4 0 4 2 3 3 4 5 2 2 6 3 4 5 5 5 3 4 6 5 1 3 0 5 4 5 1 3    2 2 6 18 13 17 27 27 21 28 28 24 26 27 29 23 21 16 17 19 22 14 11 9 5 14 7 7 6   4 4 12 3 6 4 5 4 6 4 2 0 1 8 1 6 8 5 2 3 4 5 6 4 2 5 8 3 1 1 6 3 7 8 4 1 6 5 2   8 11 5 6 5 6 2 4 5 1 2 7 2 2 5 5 6 3 3 2 3 8 5 1 9 3 3 2 3 6 3 5 3 2 4 6 3 1 3   5 4 4 4 6 3 3 5 0 2 2 5 1 3 2 2 1 4 2 0 2 2 2 2 4 1 2 1 2 1 1 0   0.122000 2.650 2.650 6.900       876007           3           0  0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 2 1 1 1 1 2 2 1 0 0 1 0 0 0 1 1 0 0 0 2 0 0    4 1 0 2 1 2 0 1 2 0 1 3 2 1 0 1 1 0 1 2 1 0 2 3 3 5 3 3 3 0 1 4 0 1 5 3 4 3 1    2 2 2 4 1 3 3 3 2 3 2 3 2 1 4 4 2 2 5 5 3 4 1 2 1 2 4 2 4 7 2 4 4 2 7 3 5 7 5    3 6 8 10 10 18 21 22 24 14 25 27 29 31 22 25 24 21 27 20 19 22 19 14 13 14 10    5 7 3 4 5 5 3 1 4 3 8 4 5 4 0 3 4 3 4 1 7 6 1 1 3 4 4 3 4 3 6 4 3 4 2 4 4 3 5    6 5 1 1 6 2 6 6 3 5 5 3 2 6 5 4 3 4 6 4 3 5 5 6 5 6 2 4 2 1 2 2 4 2 7 6 2 1 3    1 5 2 1 2 4 3 3 3 2 5 2 4 1 4 3 2 2 5 5 1 1 3 3 2 2 2 2 1 0 0 0 0 0   0.124000 2.700 2.700 7.000       925764           3           0  0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 2 1 3 0 1 1 0 0 0 0 0 1 1 1 1 0 0 0 1 1 0    1 2 0 0 3 2 0 1 2 1 1 2 0 2 1 2 2 0 0 2 3 2 3 2 2 3 2 2 4 0 2 0 5 1 3 2 3 1 2    3 2 0 6 4 3 6 2 5 0 5 2 1 4 4 5 7 4 2 3 5 2 0 2 5 2 4 7 4 4 4 8 5 3 1 7 2 2 1    5 5 5 14 19 16 22 18 30 29 25 36 23 23 22 25 25 27 26 23 14 20 16 16 10 6 6 6    4 2 6 6 6 6 6 4 6 1 0 3 4 4 5 2 4 3 2 4 4 5 5 5 6 10 6 3 6 8 5 5 8 7 4 6 4 3 4   8 5 5 7 4 6 3 5 8 4 3 4 4 3 4 3 1 3 3 7 2 4 8 3 6 4 3 3 2 5 4 4 3 7 4 5 4 4 3    4 7 2 3 3 4 3 0 2 2 4 3 4 2 4 2 2 6 4 4 6 6 1 5 1 1 2 1 0 0 0 0 0   0.126000 2.750 2.750 7.100       969560           3           0  0 0 0 0 0 0 0 0 0 0 0 0 0 2 1 1 1 0 1 2 0 2 0 2 2 0 1 1 1 0 0 1 0 1 1 1 1 2 0    1 2 2 1 2 0 0 1 0 1 0 2 1 0 1 0 1 1 2 0 3 0 3 4 3 1 3 2 0 4 0 1 2 0 3 1 1 2 3    2 2 2 5 1 7 1 5 1 5 4 2 0 0 1 2 1 3 2 3 3 5 4 10 10 2 5 11 4 1 2 1 7 3 5 4 4 1   5 10 8 7 9 9 20 20 21 33 21 28 20 27 32 21 29 22 20 24 15 13 27 14 13 15 10 9    3 11 6 7 5 3 6 8 5 4 4 1 3 3 5 2 7 3 6 6 1 6 4 6 5 3 4 2 4 3 3 9 4 5 4 4 5 2 3   10 4 3 2 6 10 6 3 6 5 5 5 4 8 8 5 4 3 6 4 4 2 4 4 4 5 7 4 4 4 4 5 2 2 3 4 5 2    1 3 2 6 2 7 7 1 6 4 4 6 5 5 4 0 2 2 3 2 7 5 0 4 1 1 4 6 1 0 3 2 0 0 1   0.128000 2.800 2.800 7.200      1022713           5           0  0 0 0 0 0 0 0 0 0 0 0 1 0 2 0 0 0 1 0 1 1 0 0 1 1 1 0 0 0 2 1 0 0 4 0 0 1 2 3    1 1 0 1 0 1 0 3 1 1 1 2 2 1 1 1 3 1 0 2 4 2 1 2 1 2 0 3 1 3 2 1 5 2 1 3 1 2 1    5 3 2 1 2 5 3 8 2 3 2 5 5 4 3 6 4 4 4 3 2 3 8 4 3 4 5 4 5 4 7 6 5 3 3 3 5 2 9    10 7 9 12 11 13 17 15 22 19 33 24 28 30 26 21 24 22 27 20 26 16 10 10 9 20 10    7 4 5 7 7 2 7 5 3 5 1 6 1 5 7 5 6 3 1 5 1 1 3 4 8 6 3 9 5 5 3 6 7 4 6 7 6 4 2    4 6 2 3 6 5 6 7 6 4 4 9 6 8 6 9 7 1 2 6 2 7 5 4 4 4 4 5 5 4 4 3 6 3 5 3 6 4 3    6 6 2 5 2 8 4 5 3 6 5 4 5 8 4 3 5 6 5 5 2 8 1 2 2 5 4 1 3 0 0 0 0 0   0.130000 2.850 2.850 7.300      1081669           3           0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 5 0 0 2 2 0 0 1 0 0 0 1 1 0 2 0 2 2 2 1 0    1 0 2 2 3 1 1 0 2 0 1 0 2 1 1 2 2 0 1 4 3 0 2 1 1 0 2 5 2 1 0 1 3 2 5 2 1 2 5    2 3 4 3 6 6 6 4 6 6 3 1 3 2 3 4 7 5 2 9 7 4 1 4 4 3 2 2 2 7 4 8 4 7 4 6 8 5 1    8 6 10 18 21 18 15 21 24 21 26 22 30 28 27 23 22 21 17 25 20 17 13 17 9 12 7 8   5 4 4 5 5 2 4 1 1 2 5 7 6 4 9 7 7 5 5 5 5 5 2 4 5 3 6 8 2 4 9 4 10 5 1 4 5 5 5   10 3 2 8 6 5 7 3 13 3 3 6 5 1 4 5 9 5 2 7 4 5 6 3 5 6 5 4 5 9 6 4 3 4 4 4 5 8    5 5 0 3 6 3 4 3 7 5 6 4 3 3 6 8 4 1 3 1 2 7 3 4 6 6 1 3 4 1 0 1 0 0   0.132000 2.900 2.900 7.400      1131887           3           0  0 0 0 0 0 0 0 0 1 0 0 1 2 1 1 0 0 0 1 2 2 1 1 0 2 1 1 0 1 1 1 0 2 2 3 1 0 1 0    1 0 2 0 2 0 1 4 0 1 2 2 0 0 0 2 3 0 1 2 3 0 1 2 3 5 6 2 2 3 1 4 4 8 4 3 3 3 7    2 2 5 7 4 1 2 4 8 1 5 2 7 3 4 2 9 6 5 5 6 2 2 3 6 2 5 6 7 7 2 8 3 3 3 3 6 6 5    3 10 15 15 17 19 13 29 20 23 22 34 28 28 33 20 20 22 17 22 18 15 19 14 11 9 13   6 6 13 4 2 9 8 8 7 6 5 6 4 4 9 6 2 8 9 7 2 6 3 7 3 6 3 7 4 4 5 4 5 6 4 7 5 4     10 2 6 6 8 3 6 6 9 5 8 8 7 6 4 8 5 7 5 5 7 3 5 5 5 10 7 3 8 7 5 7 2 4 4 6 4 10   7 6 4 4 4 4 3 2 4 2 6 5 9 7 3 2 6 2 5 1 5 6 2 2 1 9 2 5 2 5 1 0 0 0 1 1   0.134000 2.950 2.950 7.500      1185706           3           0  0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 3 2 1 0 1 1 0 0 0 0 0 1 0 1 1 2 0 1 0 1 2 0 0 0    1 1 0 1 1 1 0 2 2 0 1 3 3 2 3 0 0 2 2 3 2 1 1 3 0 0 1 1 3 4 3 1 1 9 1 4 0 1 3    4 1 3 2 6 4 7 7 3 2 8 5 2 5 2 4 6 7 3 7 7 8 4 7 2 4 7 7 9 9 2 5 5 8 3 5 7 3 6    10 6 10 15 10 13 14 29 21 23 37 26 20 28 20 16 24 25 16 19 21 20 20 17 11 10     12 8 7 7 5 5 5 4 5 6 7 3 6 5 7 5 11 9 6 8 11 6 4 6 8 8 7 7 7 4 5 4 8 5 4 3 4 8   10 7 9 4 7 6 8 9 7 3 5 7 7 6 2 6 4 7 3 9 8 12 7 6 6 6 4 5 7 2 4 7 3 2 4 4 7 1    4 5 0 4 6 3 10 8 5 4 3 4 5 7 5 7 5 7 3 5 2 5 6 4 5 2 4 1 6 6 2 4 2 0 0 1 0   0.136000 3.000 3.000 7.600      1238426           3           0  0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 2 4 0 2 0 2 2 0 1 1 1 0 2 1 1 2 1 0 1 1 0 3 1 0    0 1 0 1 0 0 2 1 1 0 4 0 2 6 3 3 4 0 3 1 2 4 0 4 4 0 1 5 2 2 5 1 3 4 3 3 5 2 4    4 6 2 5 3 4 5 4 5 6 7 5 6 2 8 3 4 7 2 4 4 3 7 6 5 1 4 8 3 7 10 3 3 6 1 5 3 8     11 5 7 15 11 15 17 21 23 21 24 28 16 21 29 15 22 27 28 20 13 19 13 7 15 10 11    9 6 8 8 4 7 5 4 6 5 10 6 7 8 9 3 5 5 9 5 9 4 4 4 3 5 7 4 10 6 8 4 9 8 4 6 7 9    11 6 8 3 5 8 12 3 6 9 7 11 9 6 7 4 7 7 7 2 5 4 5 0 2 9 5 5 5 10 7 5 6 3 9 4 4    13 2 7 5 7 4 7 2 0 4 5 4 4 6 8 1 2 5 6 4 7 3 11 4 3 3 5 5 4 4 3 1 4 2 2 1 1 0   0.138000 3.050 3.050 7.700      1299809           6           0  0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 0 1 2 1 1 0 0 1 0 0 2 0 1 2 0 0 3 0 0 1 3 1    2 0 2 0 1 1 2 1 2 3 2 1 2 5 2 2 2 4 3 2 5 3 0 3 2 4 5 4 3 0 5 4 1 4 3 8 6 4 4    7 4 5 4 3 6 5 6 10 3 6 6 2 6 3 4 4 3 6 7 6 8 3 4 7 5 4 9 2 4 8 5 9 8 3 7 5 7 7   13 7 11 15 17 16 18 18 18 20 17 26 25 19 20 26 31 22 18 20 18 14 11 16 4 7 11    10 8 9 9 6 3 8 8 7 5 6 10 3 5 6 6 3 12 7 8 8 2 10 4 13 9 9 12 4 5 9 7 9 5 7 4    8 9 6 7 8 10 8 7 5 7 11 6 4 4 4 6 4 9 4 5 9 10 7 4 12 7 4 9 5 10 10 6 8 4 7 2    4 7 2 6 8 4 11 3 3 9 7 6 7 3 8 7 4 8 5 3 7 4 5 5 7 4 6 7 5 5 3 5 2 5 4 1 2 0 0   1   0.140000 3.100 3.100 7.800      1361810           3           0  0 0 0 0 0 0 0 0 0 1 0 0 0 0 3 2 1 0 0 0 1 1 1 2 0 0 0 0 1 0 2 2 2 1 0 0 3 3 0    2 0 6 2 3 1 0 3 3 1 2 2 5 3 5 3 3 2 2 7 3 2 2 3 4 2 3 4 4 1 3 7 4 5 4 2 3 5 4    2 1 3 6 3 4 3 8 7 6 5 3 5 11 5 5 3 3 7 3 6 4 4 2 4 4 4 1 5 5 9 6 6 9 3 10 8 6    8 3 10 8 16 16 13 18 23 29 25 19 19 20 27 19 22 27 24 21 15 18 11 20 21 17 12    5 18 6 12 7 9 11 7 12 11 4 8 8 4 8 7 7 2 6 4 4 9 6 9 3 4 7 7 7 4 10 4 11 5 8 8   8 5 4 4 8 6 4 9 8 12 12 8 5 8 3 10 8 7 5 3 5 6 8 5 6 10 7 2 11 2 5 5 6 8 10 2    7 5 5 14 2 7 3 9 3 5 2 8 2 3 4 4 7 9 5 4 7 6 7 5 6 3 5 4 7 6 7 7 9 3 0 2 1 1 1   0 0   0.142000 3.150 3.150 7.900      1429499           3           0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 3 1 2 1 1 0 0 0 3 0 2 2 1 0 3 0 2 1 3 0 0 1    1 3 1 2 4 1 5 3 5 1 0 7 1 3 2 3 2 2 2 3 0 0 1 3 6 3 2 2 4 4 4 6 4 3 6 4 10 3 7   2 5 4 7 4 5 8 4 7 4 1 7 11 5 2 10 2 11 3 7 8 10 9 6 3 5 3 6 3 10 11 5 5 9 7 10   8 9 5 15 11 9 18 18 15 24 17 23 17 19 25 17 24 18 37 16 17 21 17 14 20 17 15     15 9 4 11 7 3 8 10 8 8 6 8 3 4 5 8 4 6 3 9 9 6 2 10 4 4 3 8 4 9 1 7 5 9 7 10 9   10 4 6 5 8 6 6 10 10 6 5 7 6 6 10 5 7 8 8 8 7 7 11 12 8 3 10 6 9 13 11 4 6 7 6   3 10 5 8 4 7 7 7 5 8 4 9 5 5 7 6 6 7 11 11 7 8 5 3 5 7 7 10 3 3 6 5 7 9 2 3 7    1 0 0 0 0 1   0.144000 3.200 3.200 8.000      1493946           3           0  0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 2 3 0 0 1 2 1 1 1 4 1 0 1 0 1 2 1 3 1 1 1 1 2    1 1 3 2 6 0 4 0 1 4 2 4 5 2 1 3 0 2 2 4 2 3 2 4 3 5 4 4 4 1 5 1 3 4 5 6 4 7 2    8 8 8 5 3 6 0 7 3 2 2 5 7 5 7 5 8 9 6 4 3 6 8 6 10 2 5 6 3 3 6 6 6 6 17 5 10 6   6 11 11 13 12 21 26 18 24 21 24 23 30 18 22 20 24 19 13 17 25 22 17 15 8 13 7    10 8 9 6 7 9 8 7 8 9 7 7 6 12 5 9 9 12 9 12 6 9 7 10 7 7 4 9 7 4 2 7 4 5 8 8 9   7 6 7 5 9 4 8 13 6 5 4 7 9 6 7 7 9 4 4 5 8 10 9 10 6 6 7 9 12 11 8 8 9 11 5 8    7 5 5 8 5 9 10 5 5 11 11 6 8 8 4 8 5 5 5 4 7 4 5 6 5 6 6 7 7 4 2 6 3 2 1 0 0 0   0 0   0.146000 3.250 3.250 8.100      1562352           5           0  0 0 0 0 0 0 0 0 0 0 0 0 0 2 2 0 2 0 1 2 1 1 0 0 1 0 1 2 0 0 0 3 1 2 0 4 4 2 0    0 2 3 2 0 1 3 3 4 0 1 4 3 3 4 5 5 4 2 1 4 2 5 3 2 7 6 3 5 6 5 5 5 1 5 2 7 4 8    7 4 6 5 7 5 3 5 8 1 6 4 6 8 7 6 7 6 3 4 6 3 5 8 4 10 3 3 11 6 5 3 9 6 4 3 17 9   11 11 24 13 15 14 25 26 26 21 17 32 32 22 18 25 29 29 27 24 21 12 23 14 12 11    9 17 7 9 11 3 7 6 5 5 12 3 6 8 7 4 7 11 10 8 9 5 8 2 10 9 8 10 10 7 7 4 7 5 7    7 9 10 8 7 7 16 6 8 10 5 6 6 12 12 7 11 11 8 9 7 8 12 10 7 8 7 11 8 9 7 7 4 9    4 7 14 9 8 8 13 9 8 7 13 5 9 5 7 4 9 5 7 8 7 8 7 3 10 9 3 4 4 4 5 2 6 6 3 5 10   4 4 2 3 0 1 0 0   0.148000 3.300 3.300 8.200      1630559           3           0  0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 4 2 1 1 1 2 1 2 0 2 1 5 0 1 1 4 0 2 1 4 5 3 0    1 1 1 2 1 3 3 3 1 1 1 1 1 3 4 6 6 8 8 4 3 2 7 2 2 1 7 4 4 5 1 10 6 4 4 4 3 3 3   6 11 6 4 5 4 8 5 5 9 4 5 5 7 6 4 13 12 3 6 7 5 2 7 9 7 8 8 4 7 6 4 10 6 8 9 9    9 13 15 17 23 25 13 16 24 22 26 21 27 24 24 21 21 21 15 17 22 25 21 22 17 14     11 8 12 5 9 7 8 5 11 10 6 6 5 9 13 10 9 8 8 8 6 4 9 10 9 9 7 8 7 5 7 8 14 13 5   14 5 12 11 8 9 6 5 4 9 13 7 10 13 11 11 8 5 9 10 8 7 6 7 13 3 13 8 7 13 17 5 8   5 10 7 12 7 6 6 9 7 8 8 11 8 11 9 11 11 8 5 6 10 4 9 3 10 8 7 10 8 7 8 10 10 7   4 11 5 7 8 2 4 3 0 0 1 0 1   0.150000 3.350 3.350 8.300      1707576           3           0  0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 2 1 2 1 0 2 0 2 3 1 3 2 2 2 2 0 2 1 4 3 2 2 3    1 2 1 0 2 2 4 2 5 3 3 5 2 8 4 5 4 2 3 6 7 6 1 0 7 4 7 7 6 5 4 3 4 6 6 7 6 2 7    4 4 2 5 5 6 9 3 3 3 6 6 5 3 5 7 8 8 6 8 8 6 8 3 9 6 6 8 8 6 4 8 6 6 10 4 11 6    11 15 23 16 8 17 20 21 19 24 15 14 19 21 30 25 21 15 19 16 18 21 21 15 14 12     16 8 10 12 7 10 9 8 10 10 7 9 8 10 12 6 6 9 11 6 5 9 12 6 7 12 7 5 6 8 5 9 4     11 9 8 8 10 7 6 10 7 11 13 7 4 13 11 8 11 9 16 6 12 11 10 10 19 2 9 11 8 7 8 8   6 13 6 10 12 12 9 12 9 9 8 7 7 9 6 12 8 4 9 9 8 5 7 8 9 5 12 5 7 5 9 10 9 10 3   6 6 8 7 11 3 5 5 4 2 0 0 0 0   0.152000 3.400 3.400 8.400      1777231           3           0  0 0 0 0 0 0 0 0 1 0 0 0 0 1 1 1 0 0 1 1 3 1 0 3 4 2 3 3 3 3 3 2 1 1 1 1 3 3 0    1 8 0 0 5 3 7 4 4 4 4 4 3 5 2 2 5 3 6 1 7 6 1 2 2 5 2 1 6 6 8 7 7 5 10 4 1 6 9   3 4 5 3 5 8 4 9 8 11 8 3 2 7 7 9 10 9 10 8 6 8 6 8 7 10 8 7 3 8 4 10 7 6 8 9 6   5 16 9 19 24 23 17 23 24 22 30 21 15 23 27 20 20 20 18 20 23 18 17 15 19 17 18   13 9 4 4 7 12 7 10 4 8 6 10 5 6 13 2 3 8 7 8 7 3 11 8 7 9 7 19 7 8 9 6 14 8 8    11 10 11 13 14 10 16 8 9 13 8 9 9 12 7 12 11 6 9 15 5 9 9 9 11 11 13 6 10 6 4    12 9 9 12 11 8 6 9 16 10 10 10 8 10 10 6 7 4 1 15 6 8 4 9 13 11 8 10 11 9 8 3    3 6 6 7 9 4 6 8 7 4 2 1 2 2 1 0   0.154000 3.450 3.450 8.500      1849489           6           0  0 0 0 0 0 0 0 0 0 0 1 1 3 0 1 2 2 0 1 4 1 1 0 1 0 2 1 0 0 1 1 1 1 6 3 6 1 3 1    3 3 0 6 0 4 2 7 4 6 4 4 3 7 4 5 7 5 5 2 3 9 9 2 5 5 3 9 4 2 7 6 2 8 2 5 7 12 6   5 4 5 10 4 12 10 6 4 14 7 9 10 11 7 7 7 7 3 9 7 4 3 8 7 5 7 9 6 8 9 6 8 8 12 6   5 11 12 13 11 13 21 26 19 23 25 18 23 22 23 23 18 27 20 15 20 25 24 19 18 12     14 13 15 8 15 10 11 7 9 13 11 12 13 11 11 7 11 13 6 5 10 6 6 10 8 14 5 14 11 8   5 9 7 10 10 8 7 15 13 3 13 12 18 15 7 10 9 10 8 15 9 6 8 9 10 10 9 5 7 7 5 10    11 13 12 12 12 10 6 17 10 11 9 4 8 7 6 6 9 12 8 16 18 7 5 10 8 12 10 15 6 13     11 6 10 16 10 11 16 8 9 5 11 10 14 11 5 2 5 7 3 1 1 0 1 0   0.156000 3.500 3.500 8.600      1920727           4           0  0 0 0 0 0 0 0 0 0 0 0 1 1 0 1 0 2 1 2 0 3 0 1 1 0 1 0 3 0 4 4 1 3 1 2 3 3 4 3    1 2 3 9 5 2 3 7 3 3 6 5 2 6 1 4 3 2 3 6 5 1 8 3 8 5 3 7 6 13 11 9 5 8 7 7 5 8    7 4 8 6 4 10 4 6 5 6 9 9 12 6 7 10 9 9 8 8 3 8 9 8 8 2 12 11 13 8 13 7 8 6 6 9   6 8 16 13 14 16 16 22 20 21 21 17 20 18 19 22 20 11 20 22 21 14 19 15 23 17 15   12 14 19 16 10 11 14 11 9 11 9 12 8 16 14 9 6 18 10 11 7 10 11 17 10 13 8 10     12 9 12 7 7 10 10 11 11 9 8 8 14 10 10 9 14 9 14 13 9 19 16 17 4 11 8 12 11 10   21 6 10 8 9 12 9 7 7 12 7 16 14 10 13 6 13 8 9 10 6 10 8 7 10 4 6 11 19 12 6 7   5 8 11 10 12 13 9 6 10 5 11 11 4 14 10 7 2 6 5 1 2 5 1 1 0 0   0.158000 3.550 3.550 8.700      1999833           3           0  0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 2 2 3 2 2 2 1 2 3 0 1 0 1 3 2 0 0 3 2 3 2 5 7 0    3 4 1 10 7 7 4 5 2 3 4 3 8 3 6 4 4 4 8 2 3 4 5 5 7 1 6 7 8 1 6 8 1 4 4 11 9 4    7 11 9 10 5 6 8 4 3 9 7 9 11 5 5 8 8 4 8 7 8 11 9 12 6 4 13 4 12 10 6 9 11 10    11 10 11 11 11 14 15 14 23 18 17 29 16 26 23 15 19 14 18 19 22 31 13 21 20 12    16 15 14 18 17 15 8 12 14 13 10 10 10 10 10 13 11 6 8 11 8 14 8 10 11 11 8 10    13 5 14 7 12 9 10 10 12 15 18 8 6 9 9 12 8 9 20 14 16 10 11 14 5 5 13 6 11 9     11 15 6 9 13 11 7 8 7 10 8 16 12 11 8 10 14 11 17 11 8 16 13 9 10 5 10 17 13     14 16 8 10 9 11 5 10 9 10 12 8 11 12 11 8 6 7 12 15 13 12 7 13 5 0 3 2 0 0 0 0   0.160000 3.600 3.600 8.800      2073149           3           0  0 0 0 0 0 0 0 0 0 1 0 0 0 0 2 1 2 1 2 2 1 0 2 2 1 0 3 6 4 5 5 2 2 2 5 5 3 6 4    6 4 5 2 4 4 3 2 4 6 3 3 6 5 7 4 5 7 5 3 5 6 13 5 3 10 5 9 7 4 5 6 5 10 6 5 5 6   6 4 14 7 6 11 6 9 10 9 8 5 3 8 10 10 6 6 8 9 5 6 14 7 11 10 9 9 11 13 8 4 5 10   12 6 16 8 8 7 19 20 23 10 16 27 25 23 19 26 21 16 20 21 24 18 25 8 11 13 16 18   13 22 18 9 16 4 16 10 12 13 9 7 9 8 17 11 10 13 10 14 4 9 12 16 8 9 16 17 13     11 14 8 8 13 9 11 15 10 11 14 8 6 4 9 11 18 9 9 8 9 15 11 11 11 9 6 13 13 10 7   8 10 15 14 9 7 4 10 12 17 10 14 13 10 10 12 20 9 7 6 11 15 11 10 8 9 6 10 13     17 6 8 9 6 13 13 16 10 15 5 11 14 11 12 6 5 12 9 4 9 2 4 1 1 0 0 0   0.162000 3.650 3.650 8.900      2156456           5           0  0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 2 0 1 1 3 2 3 4 3 3 2 1 3 6 5 2 3 4 4 3 6 2 3    4 4 5 5 3 4 1 4 5 9 3 3 4 3 3 8 5 6 12 2 10 3 4 6 8 9 8 8 2 2 7 5 8 2 8 9 7 2    6 8 6 5 8 2 7 5 6 13 5 6 8 11 6 10 5 6 3 8 10 11 10 10 14 10 11 8 11 8 12 6 12   5 15 12 13 10 13 13 18 23 12 21 18 21 23 20 30 20 23 26 24 24 21 21 29 19 21     16 23 20 13 19 13 16 11 15 13 13 11 8 11 14 14 13 4 16 15 18 13 9 19 8 11 6 9    14 8 13 12 13 10 13 10 14 11 13 11 8 10 13 11 11 14 11 8 14 11 10 9 14 12 14     18 8 12 7 13 12 10 14 14 8 12 17 11 13 9 12 12 15 7 9 13 17 11 11 11 12 17 12    11 16 15 8 9 12 7 13 15 11 16 7 10 7 14 5 18 10 10 8 8 6 6 13 14 6 9 11 9 9 3    5 1 1 3 0 0   0.164000 3.700 3.700 9.000      2234753           3           0  0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 4 1 4 2 1 3 1 1 3 2 3 3 1 3 6 2 4 4 3 3 3 6 5 2    6 4 1 3 3 7 1 4 4 6 12 4 5 2 6 4 9 3 1 8 11 5 2 7 6 3 8 4 7 3 8 3 9 6 7 8 9 2    7 6 9 6 15 6 9 5 9 4 9 17 15 10 2 10 6 8 12 12 11 12 10 9 7 11 8 7 5 11 10 14    16 7 7 7 13 15 10 16 17 21 19 14 18 24 19 27 27 24 20 22 24 21 20 14 24 17 17    18 32 15 12 13 15 12 8 14 11 11 19 11 14 15 18 10 5 12 11 11 9 15 9 7 9 16 12    9 12 10 15 9 18 7 11 12 14 7 20 8 10 13 14 11 6 6 9 11 8 10 16 8 17 13 17 9 16   11 10 9 13 20 17 14 12 10 13 11 9 9 17 20 10 16 8 14 13 14 18 15 15 8 10 12 11   22 12 13 9 12 9 11 14 19 12 12 8 8 12 11 19 11 11 12 15 11 15 13 9 9 10 9 4 9    4 2 1 0 0   0.166000 3.750 3.750 9.100      2327990           3           0  0 0 0 0 0 0 0 0 0 0 0 0 3 2 2 0 1 2 2 1 1 0 0 3 1 4 2 6 4 2 4 3 2 5 5 2 3 1 3    1 2 10 2 7 4 3 4 3 3 4 3 10 6 9 6 3 8 5 5 3 4 4 6 8 4 4 7 5 5 11 14 5 3 6 8 8    7 10 11 7 17 7 11 10 8 7 8 12 13 11 12 6 13 9 7 7 6 5 8 13 10 10 14 11 11 8 12   15 14 9 13 10 9 18 13 18 12 23 14 17 24 15 23 25 31 19 17 29 19 19 19 26 25 19   17 22 19 19 19 11 11 12 22 21 8 10 18 10 14 19 17 13 14 10 6 9 10 15 11 5 13     13 11 11 17 16 9 7 14 7 19 6 10 13 7 12 18 14 7 12 15 13 13 9 13 13 13 12 12     14 12 19 10 16 18 18 12 8 10 10 9 7 14 9 11 13 12 8 15 12 11 10 12 11 17 15 19   14 14 12 7 7 12 11 15 16 12 11 12 10 19 19 12 14 12 15 11 20 13 7 18 9 15 19     16 11 5 9 8 6 2 4 0 2 0 1   0.168000 3.800 3.800 9.200      2406866           3           0  0 0 0 0 0 0 0 0 0 1 0 2 0 1 0 2 3 2 3 1 2 1 2 2 5 2 1 2 3 2 2 2 5 3 5 3 3 1 3    6 8 6 1 3 9 6 3 6 10 5 5 7 4 5 7 12 9 5 7 5 6 6 8 3 5 4 7 8 5 6 5 8 13 4 10 2    10 9 7 7 16 9 10 9 13 8 12 9 13 15 9 15 9 10 11 6 6 6 7 7 6 8 15 9 8 9 6 12 12   11 14 12 11 13 8 17 18 18 11 14 19 14 25 21 15 10 15 19 27 23 22 24 17 19 18     12 16 22 21 25 9 25 15 19 15 21 15 8 11 13 12 10 12 7 13 11 17 11 13 10 16 19    14 23 11 8 12 13 10 9 17 4 14 10 7 10 17 14 11 11 20 18 13 8 12 6 8 13 12 23     15 14 15 16 9 14 9 13 14 17 11 17 11 10 15 17 11 6 12 12 14 15 17 12 16 16 8     17 15 15 10 15 11 10 15 12 13 9 12 9 12 15 12 6 18 7 15 14 12 21 18 11 10 18     11 19 11 7 11 3 2 5 4 0 1 1   0.170000 3.850 3.850 9.300      2508471           7           0  0 0 0 0 0 0 0 0 0 0 0 0 1 3 1 2 1 4 3 3 1 2 7 0 3 2 2 2 2 5 2 3 2 3 3 4 3 7 3    5 3 4 4 6 2 3 10 4 11 3 13 7 7 5 6 3 8 10 6 6 4 10 11 4 12 7 8 9 7 7 8 4 6 7 9   9 5 9 11 5 14 9 10 7 9 8 8 5 6 11 13 14 10 10 10 10 8 9 9 9 9 14 14 13 11 8 18   9 10 9 16 12 13 15 13 10 17 16 20 14 22 20 26 29 29 27 24 20 37 21 24 13 18 13   28 24 22 25 21 13 14 15 9 11 18 8 16 17 16 13 12 16 11 11 17 15 11 15 10 11 12   13 12 12 20 15 14 15 16 12 17 15 15 12 10 14 14 17 15 19 15 13 13 11 12 16 14    17 16 8 16 12 8 14 13 13 10 10 9 12 11 19 20 13 11 4 15 11 14 11 20 18 18 13     20 12 20 21 15 15 12 13 18 18 11 16 9 14 9 18 11 10 11 20 11 13 17 13 13 12 14   16 10 12 12 23 12 11 12 8 8 1 0 1 2 0   0.172000 3.900 3.900 9.400      2591210           3           0  0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 4 4 3 2 1 3 3 2 3 0 3 6 1 3 1 5 5 4 3 9 9 0 4 7    5 3 5 5 8 7 3 3 5 5 8 5 11 10 8 10 3 6 6 6 7 7 8 8 12 9 6 10 8 7 10 8 8 10 4 6   12 20 4 6 11 7 9 10 7 5 10 6 12 11 7 13 13 16 12 6 8 14 13 9 7 5 14 17 17 10     12 11 6 13 11 17 3 23 13 21 12 21 28 11 23 30 28 23 24 26 26 17 21 15 27 23 33   16 22 25 11 20 22 23 21 20 7 21 13 16 12 16 16 13 18 18 9 13 16 15 9 20 13 19    15 8 9 11 14 13 10 9 10 16 15 14 17 15 19 16 12 14 12 14 14 16 19 19 4 24 8 12   15 16 11 15 14 20 14 13 13 14 16 19 14 13 19 14 18 23 15 15 4 14 17 14 8 10 15   20 11 15 19 12 9 13 12 11 16 12 16 13 14 16 13 16 16 19 19 12 11 10 19 15 15     14 12 5 11 18 17 10 13 12 9 6 2 0 0 1 0   0.174000 3.950 3.950 9.500      2675515           3           0  0 0 0 0 0 0 0 0 0 0 2 0 1 1 0 2 1 2 3 3 1 3 1 3 7 5 3 6 4 3 9 4 5 2 5 3 3 3 6    9 5 5 2 6 8 5 8 4 8 5 6 5 6 4 6 3 7 11 6 9 9 3 6 6 7 6 8 7 9 12 18 6 9 8 11 11   8 14 15 15 11 15 13 9 19 10 15 14 9 4 18 5 8 10 8 10 13 9 12 11 8 8 12 6 15 8    9 9 18 7 17 21 9 13 18 14 21 24 18 22 17 26 15 21 23 25 19 26 23 20 27 17 27     20 26 15 22 15 19 15 16 24 12 15 24 13 13 17 11 7 10 21 15 15 16 13 20 22 12     16 12 16 15 14 18 11 12 14 14 24 10 13 16 19 8 11 18 19 15 15 23 16 16 11 12     18 11 13 14 16 10 14 13 18 12 15 15 14 8 11 17 12 22 13 12 14 15 10 11 15 19     15 12 17 8 21 23 13 19 11 8 12 15 11 14 15 19 15 10 17 9 16 14 18 14 16 14 14    23 14 14 13 16 12 14 15 14 9 14 7 5 2 3 1 1 1   0.176000 4.000 4.000 9.600      2779386           5           0  0 0 0 0 0 0 0 0 0 0 0 2 2 3 0 1 3 0 6 2 6 3 1 5 0 4 1 6 5 1 6 3 6 5 6 2 5 4 5    3 9 8 5 7 5 8 4 12 8 12 6 8 5 7 5 7 10 5 5 6 7 9 7 10 7 10 10 8 12 10 6 13 10    11 12 11 10 10 16 9 6 12 9 11 17 10 11 10 14 11 16 7 11 13 12 10 17 14 11 13     12 10 13 16 16 17 17 15 14 11 8 15 13 27 22 14 19 17 22 22 27 18 28 19 27 32     24 33 21 17 23 12 27 25 20 20 17 22 14 15 22 21 14 9 16 12 19 16 17 16 16 20     14 18 15 14 18 10 12 9 16 12 12 10 13 19 12 12 15 14 15 22 12 11 15 18 19 18     10 6 11 14 10 23 17 14 16 19 10 10 16 19 17 23 16 18 19 18 16 12 14 14 14 13     11 10 24 21 22 26 18 18 18 14 17 5 13 17 11 13 16 14 18 16 9 15 15 18 16 14 21   13 22 17 9 8 16 17 16 16 19 7 20 19 18 16 10 6 10 6 3 5 1 0 0 2   0.178000 4.050 4.050 9.700      2869617           3           0  0 0 0 0 0 0 0 0 0 0 2 2 2 0 1 4 1 3 2 2 1 2 3 2 2 4 4 7 5 6 5 3 6 6 5 7 8 1 5    2 3 5 5 8 10 7 6 10 9 6 8 9 7 8 10 15 4 10 5 8 8 6 11 8 8 11 7 5 8 14 5 11 7     13 10 9 7 8 9 14 12 10 9 11 6 14 15 14 13 11 9 18 18 10 14 14 10 12 16 12 9 8    14 15 6 11 11 12 10 14 12 11 18 13 13 27 16 23 23 20 21 32 20 18 25 22 24 32     25 34 19 23 21 25 22 25 19 23 19 21 16 19 16 18 9 18 6 13 12 13 18 12 8 19 14    14 11 16 13 15 14 21 11 14 14 13 11 20 14 14 26 10 22 16 18 15 20 24 18 19 19    16 14 14 14 21 13 19 18 20 13 17 11 17 14 22 17 15 15 20 8 21 15 16 16 23 17     13 19 21 20 12 15 18 15 19 15 18 17 20 15 13 14 24 18 15 15 14 18 20 19 17 19    20 21 21 15 19 19 17 11 16 16 11 23 10 20 13 10 5 10 2 3 1 1 0   0.180000 4.100 4.100 9.800      2975040           3           0  0 0 0 0 0 0 0 0 1 0 0 1 2 2 4 4 2 4 4 1 2 5 0 3 3 5 2 5 5 4 9 2 7 8 4 8 3 11 6   10 4 7 8 6 6 5 8 8 7 11 4 4 11 12 7 11 7 10 11 7 11 11 10 9 7 13 12 18 8 14 12   14 12 8 8 16 10 10 14 16 10 6 8 15 15 15 22 13 19 18 12 6 11 10 7 12 12 24 15    17 9 17 21 10 17 18 14 14 14 9 22 11 23 17 15 23 32 20 11 12 20 15 23 30 20 25   19 26 29 19 27 23 15 19 11 30 16 21 24 18 18 14 8 6 25 13 21 13 13 19 13 21 25   23 18 14 14 13 20 12 14 8 10 25 14 15 20 15 10 15 16 21 8 15 20 21 20 13 16 15   20 11 18 17 17 9 12 24 19 13 18 17 20 14 15 20 10 23 19 25 8 7 13 14 11 15 18    13 10 12 10 17 11 24 16 17 11 12 13 16 20 14 26 12 17 13 14 16 16 6 20 16 23     22 11 17 16 14 25 19 17 21 22 19 13 19 16 18 10 11 7 4 6 0 0 2   0.182000 4.150 4.150 9.900      3083416           6           0  0 0 0 0 0 0 0 0 0 0 2 1 1 4 1 3 4 3 5 6 2 1 4 2 3 5 6 6 7 2 4 1 11 7 5 2 6 6 8   9 8 12 7 11 9 6 12 7 8 9 6 6 8 11 6 6 8 11 8 11 12 11 13 9 10 7 9 6 11 9 13 12   12 8 14 15 8 9 8 8 11 22 16 6 11 16 15 9 13 12 12 13 11 15 9 9 16 14 14 12 21    12 12 12 16 19 10 15 18 8 16 14 16 16 21 30 22 9 25 19 19 26 23 33 25 22 21 19   21 20 20 21 20 26 20 29 27 25 25 21 20 25 21 21 18 14 19 15 6 20 18 16 20 16     13 13 15 15 15 15 22 16 15 15 11 21 19 11 19 13 14 15 17 21 12 18 12 22 18 21    18 13 23 15 18 9 21 11 14 23 18 21 25 18 22 15 21 23 15 15 16 19 21 18 19 21     17 13 24 23 22 19 14 20 22 15 14 14 20 20 23 13 18 15 18 20 20 24 9 12 17 21     21 12 16 17 16 16 21 26 19 15 21 22 24 15 11 13 13 6 8 1 4 0 1 0   0.184000 4.200 4.200 10.00      3174897           3           0  0 0 0 0 0 0 0 0 0 0 1 1 2 3 0 5 4 3 3 0 7 3 2 4 2 8 6 4 5 9 3 8 6 4 2 7 6 8 7    9 3 5 8 5 9 7 7 6 11 14 7 12 9 9 5 15 12 14 15 12 9 11 5 8 13 11 12 10 9 17 12   11 8 17 11 19 11 15 9 11 7 15 14 16 16 16 7 12 10 14 13 13 16 16 11 15 13 14     12 16 11 12 13 17 10 13 19 11 17 11 13 14 13 10 19 19 23 24 22 24 24 31 19 23    22 28 21 25 29 17 23 17 21 30 22 19 25 27 27 22 23 23 17 25 17 20 17 12 23 21    9 17 20 16 19 16 17 20 9 16 11 22 16 15 12 15 17 23 24 16 16 18 26 11 16 20 18   10 14 17 26 19 17 15 17 19 12 21 20 24 17 27 13 16 18 19 23 14 19 14 10 11 18    19 6 15 21 23 25 17 17 18 21 27 20 17 18 20 25 22 20 18 22 18 17 15 24 16 15     22 18 22 14 20 20 22 18 22 25 19 26 12 19 19 13 12 16 19 14 9 7 5 4 2 0 2   0.186000 4.250 4.250 10.10      3283256           3           0  0 0 0 0 0 0 0 1 0 0 1 1 4 1 5 2 5 5 3 4 6 3 2 4 7 8 2 6 6 4 10 7 8 7 5 4 4 9 8   18 10 7 6 6 13 12 10 13 10 7 15 4 7 10 13 12 8 8 13 5 14 6 9 14 9 10 16 12 13    11 8 12 11 10 13 9 11 15 17 23 18 13 10 12 11 12 14 14 14 10 12 12 16 13 15 13   13 14 18 10 13 17 14 14 14 12 12 8 18 14 23 20 16 19 16 16 16 27 18 21 19 20     19 37 22 21 22 28 24 26 18 21 28 21 22 21 21 22 16 15 13 22 22 27 22 11 13 20    10 17 16 19 20 30 18 25 8 7 22 18 17 14 23 16 17 11 16 24 19 18 22 15 15 23 16   13 15 22 14 8 12 18 13 15 22 17 15 15 17 27 21 19 21 24 17 10 12 14 19 17 22     18 19 17 28 19 15 14 16 28 17 20 15 11 22 18 19 16 21 17 24 19 22 22 20 10 20    18 18 18 21 18 23 18 32 26 21 21 22 20 22 16 17 20 22 21 17 13 13 11 9 5 0 1 1   1   0.188000 4.300 4.300 10.20      3396610           5           0  0 0 0 0 0 0 0 0 0 0 1 2 3 0 2 5 5 4 3 3 5 1 2 3 6 9 3 3 3 8 7 2 9 5 7 5 11 8 9   7 6 9 6 4 5 8 6 10 9 14 10 15 6 7 13 15 10 13 7 15 10 10 11 14 14 6 7 17 13 19   3 13 9 6 13 13 14 10 11 12 16 17 13 10 15 15 19 19 11 11 15 11 13 9 13 20 8 18   14 18 23 23 23 15 19 20 14 11 7 18 16 15 22 28 20 24 22 25 17 20 39 24 26 25     25 33 25 25 25 33 15 29 18 29 18 12 18 23 17 24 28 22 16 20 33 23 18 23 26 23    15 24 16 16 16 16 17 15 15 16 14 11 9 23 17 13 13 18 12 19 20 30 20 20 15 21     19 16 18 20 23 19 15 10 11 15 19 13 22 22 18 19 16 19 23 16 10 25 23 20 21 20    31 19 19 18 15 22 18 14 13 21 18 19 22 19 16 17 21 14 20 26 18 26 22 19 26 19    20 22 15 13 24 23 15 21 21 21 27 18 22 19 24 17 22 16 18 23 10 12 3 5 3 3 0 0   0.190000 4.350 4.350 10.30      3502025           3           0  0 0 0 0 0 0 0 0 0 0 0 3 0 3 2 3 4 4 3 4 5 10 7 6 6 4 5 12 10 6 6 13 10 6 7 14    9 6 13 10 12 16 3 9 9 7 5 6 13 11 10 8 11 19 12 14 13 16 13 14 9 12 14 13 14     16 10 14 7 16 18 16 9 15 11 20 15 10 14 14 11 14 17 10 6 16 10 15 12 17 17 20    15 7 12 23 15 8 13 12 8 16 15 20 16 16 20 14 11 20 24 23 20 16 18 27 25 31 27    27 25 21 31 27 20 23 24 32 17 21 34 27 17 19 19 25 30 27 21 24 28 30 19 26 21    14 16 21 23 27 8 17 21 17 11 23 15 22 15 18 10 17 20 23 18 18 17 19 22 15 22     21 19 23 18 18 26 17 18 26 18 24 15 22 23 23 19 23 25 23 24 26 10 21 16 32 23    18 19 24 21 28 26 22 19 19 14 30 21 24 23 22 21 13 27 20 27 24 15 20 22 22 13    25 14 19 32 21 18 18 23 22 22 14 18 20 24 14 19 20 18 17 24 29 27 20 12 18 17    11 9 2 3 2 1 0   0.192000 4.400 4.400 10.40      3593938           3           0  0 0 0 0 0 0 0 0 0 0 1 0 1 1 2 3 4 7 8 1 5 6 8 3 7 5 4 9 8 8 7 7 9 7 9 9 15 5 7   8 15 14 9 9 13 8 8 15 10 7 10 9 10 14 7 8 18 16 17 11 14 15 13 8 15 8 15 18 16   16 22 12 8 16 13 10 13 13 10 21 11 10 16 16 13 13 17 16 20 23 13 22 16 14 15     22 19 22 15 22 24 16 16 16 19 12 15 16 17 20 18 19 26 17 23 18 32 20 28 36 22    25 30 29 31 36 24 24 21 29 24 32 29 30 23 34 19 33 34 25 20 31 27 24 16 14 21    20 13 24 17 28 13 24 16 26 15 26 21 11 15 20 13 20 18 25 23 18 24 26 22 16 22    14 13 16 20 24 25 19 29 20 15 20 16 25 26 21 22 17 24 22 21 17 23 23 15 19 30    23 17 21 19 18 21 26 14 29 24 20 33 19 15 20 23 28 19 23 25 15 19 17 31 23 18    29 26 25 14 24 25 18 19 19 24 35 31 23 23 14 15 19 11 20 19 24 17 16 9 10 12 3   2 2 0 1   0.194000 4.450 4.450 10.50      3712573           7           0  0 0 0 0 0 0 0 0 0 0 0 1 1 1 5 3 5 4 3 11 3 10 4 6 7 8 5 5 5 8 9 12 7 7 11 8 6    7 9 10 13 10 6 13 9 9 9 11 14 14 12 13 10 6 13 13 15 12 13 19 8 14 13 16 11 13   14 15 9 15 16 13 16 17 17 17 23 18 16 19 10 13 18 16 10 9 21 11 22 14 20 14 18   13 15 12 13 14 16 14 15 20 29 17 14 18 8 15 21 15 19 15 22 20 17 15 23 26 16     26 24 23 23 23 23 30 24 29 28 26 35 33 31 22 23 22 20 37 22 27 33 26 27 26 17    16 18 27 22 21 24 18 18 18 17 15 18 14 19 24 22 15 20 21 15 19 25 15 16 26 19    22 29 20 16 13 15 16 32 24 23 13 33 17 22 18 18 23 24 22 21 20 26 21 16 22 18    18 16 15 26 26 17 22 21 13 25 24 13 23 18 18 25 32 20 24 21 17 19 24 24 23 33    19 19 21 32 18 22 23 19 23 32 18 31 22 25 23 23 31 29 21 16 20 20 15 22 14 12    5 10 9 2 1 0 1   0.196000 4.500 4.500 10.60      3829518           3           0  0 0 0 0 0 0 0 0 0 1 2 2 1 6 2 6 5 9 3 5 6 8 6 3 8 10 7 11 9 4 8 9 5 11 10 13 9   16 13 10 9 5 12 9 15 10 13 9 12 18 14 19 9 13 14 12 13 21 17 17 18 16 13 12 16   14 18 10 15 15 16 11 15 22 17 19 17 11 12 26 12 17 19 18 21 20 27 17 18 19 21    14 19 16 12 16 21 20 18 8 17 17 13 13 18 15 19 15 19 20 28 21 29 27 27 34 24     26 31 25 24 16 17 23 23 30 28 18 28 32 28 37 18 26 18 16 33 21 31 21 20 22 19    20 25 18 18 20 11 17 20 22 23 14 14 17 18 20 25 20 19 20 22 19 16 33 25 21 21    24 18 16 22 29 22 16 27 26 28 21 20 22 17 25 23 20 23 18 16 19 26 22 21 22 23    15 20 19 17 23 19 20 15 22 18 22 26 23 23 31 17 29 18 13 15 19 18 24 22 28 22    17 23 24 26 21 23 25 24 29 26 18 41 24 29 22 27 23 28 16 30 24 18 23 19 17 18    21 17 14 8 2 5 2 0 0   0.198000 4.550 4.550 10.70      3950740           3           0  0 0 0 0 0 0 0 0 1 1 1 2 1 3 7 5 6 7 7 7 4 5 6 4 1 8 9 10 9 8 10 8 12 6 10 8 10   8 11 9 10 15 7 11 8 13 11 13 15 15 17 12 10 8 17 12 9 14 12 14 11 14 21 14 15    20 18 16 8 15 22 24 14 10 18 14 15 16 12 10 16 21 16 25 17 20 17 17 20 15 24     15 17 22 25 17 13 22 18 20 19 11 21 22 21 16 21 24 16 22 17 21 17 24 22 24 35    27 24 28 24 32 37 34 25 24 29 37 37 25 28 21 23 24 22 21 20 25 22 32 19 21 22    24 20 21 20 22 18 27 17 14 20 22 22 22 14 19 20 20 21 23 22 14 20 21 23 20 18    23 20 25 31 24 18 22 14 23 22 21 23 27 27 20 21 18 22 23 24 23 21 18 22 17 22    21 35 15 24 24 12 27 30 27 28 22 31 24 24 19 27 24 28 23 25 26 35 27 22 29 21    24 18 19 26 33 29 31 23 25 19 24 26 21 10 23 24 26 28 20 27 26 17 29 22 18 14    22 8 10 11 4 4 1 2 0   0.200000 4.600 4.600 10.80      4068161           5           0  0 0 0 0 0 0 0 0 0 1 1 0 1 5 5 2 9 3 11 6 9 8 7 7 8 3 3 13 10 8 7 5 8 13 8 7 14   12 10 7 15 13 13 11 12 12 14 12 13 12 10 15 11 14 7 16 15 8 15 13 15 13 18 13    17 21 15 12 13 13 17 18 18 18 16 19 20 17 14 17 24 13 12 18 19 19 13 21 18 26    21 23 16 14 18 19 13 33 13 19 20 14 20 23 14 26 19 22 21 21 16 27 30 25 28 22    32 21 30 27 31 21 30 22 27 27 31 27 21 17 38 41 17 21 20 19 30 24 27 20 20 21    30 20 19 19 31 25 24 13 21 23 19 24 33 24 17 20 17 12 25 23 18 24 11 24 25 22    33 20 11 22 31 21 20 26 27 21 26 24 14 23 23 20 20 26 28 10 20 27 24 22 17 27    28 20 23 23 33 20 24 26 32 33 29 21 25 24 17 18 19 27 26 20 24 26 24 24 26 21    19 24 21 36 32 18 33 33 20 23 25 33 19 27 25 27 24 27 21 21 23 28 18 27 25 19    24 15 17 12 15 7 2 1 0 0 ", "%f ", Inf);
 %! assert (rows (x) == n);
 
 %% Note use fprintf so output not sent to stdout
 %% test/octave.test/io/printf-1.m
 %!test
 %! nm = tmpnam ();
-%! fid1 = fopen(nm,"w");
+%! fid1 = fopen (nm,"w");
 %! x = fprintf (fid1, "%s: %d\n", "test", 1);
-%! fclose(fid1);
-%! fid2 = fopen(nm,"r");
-%! str = fscanf(fid2,"%s");
-%! fclose(fid2);
-%! unlink(nm);
+%! fclose (fid1);
+%! fid2 = fopen (nm,"r");
+%! str = fscanf (fid2,"%s");
+%! fclose (fid2);
+%! unlink (nm);
 %! assert (x, 8);
 %! assert (str, "test:1");
 
 %% test/octave.test/io/printf-2.m
 %!error printf (1)
 
 %% test/octave.test/io/printf-3.m
 %!error <Invalid call to printf> printf ()
diff --git a/test/prefer.tst b/test/prefer.tst
--- a/test/prefer.tst
+++ b/test/prefer.tst
@@ -132,30 +132,30 @@
 %!assert (all (svd ([]) == zeros (0, 1)));
 
 %% test/octave.test/prefer/prefer-27.m
 %!test
 %! sp = save_precision ();
 %! save_precision (1);
 %! x = pi;
 %! nm = tmpnam ();
-%! save("-text", nm, "x");
+%! save ("-text", nm, "x");
 %! clear x;
 %! load (nm);
 %! unlink (nm);
 %! assert (x,3);
 %! save_precision (sp);
 
 %% test/octave.test/prefer/prefer-28.m
 %!test
 %! sp = save_precision ();
 %! save_precision (5);
 %! x = pi;
 %! nm = tmpnam ();
-%! save("-text", nm, "x");
+%! save ("-text", nm, "x");
 %! clear x;
 %! load (nm);
 %! unlink (nm);
 %! assert (x, 3.1416);
 %! save_precision (sp);
 
 %% FIXME: How to capture standard output for comparison? 
 %% test/octave.test/prefer/prefer-29.m
diff --git a/test/range.tst b/test/range.tst
--- a/test/range.tst
+++ b/test/range.tst
@@ -35,47 +35,47 @@
 %! r = 1:9;
 
 %!assert ([ r ; z                  ], expect)
 %!assert ([ r ; single(z)          ], single (expect))
 %!assert ([ r ; logical(z)         ], expect)
 %!assert ([ r ; sparse(z)          ], sparse (expect))
 %!assert ([ r ; sparse(logical(z)) ], sparse (expect))
 
-%!assert ([ r ; int8(z)            ], int8(expect))
-%!assert ([ r ; int16(z)           ], int16(expect))
-%!assert ([ r ; int32(z)           ], int32(expect))
-%!assert ([ r ; int64(z)           ], int64(expect))
-%!assert ([ r ; uint8(z)           ], uint8(expect))
-%!assert ([ r ; uint16(z)          ], uint16(expect))
-%!assert ([ r ; uint32(z)          ], uint32(expect))
-%!assert ([ r ; uint64(z)          ], uint64(expect))
+%!assert ([ r ; int8(z)            ], int8 (expect))
+%!assert ([ r ; int16(z)           ], int16 (expect))
+%!assert ([ r ; int32(z)           ], int32 (expect))
+%!assert ([ r ; int64(z)           ], int64 (expect))
+%!assert ([ r ; uint8(z)           ], uint8 (expect))
+%!assert ([ r ; uint16(z)          ], uint16 (expect))
+%!assert ([ r ; uint32(z)          ], uint32 (expect))
+%!assert ([ r ; uint64(z)          ], uint64 (expect))
 
 ## Test mixing non-integer range with other types
 
 %!shared expect, r, z
 %! expect = [ 1.0 1.4 1.8 2.2 2.6 3.0
 %!            0   0   0   0   0   0   ];
 %! z = zeros (1,6);
 %! r = 1:0.4:3;
 
 %!assert ([ r ; z                  ], expect)
 %!assert ([ r ; single(z)          ], single (expect))
 %!assert ([ r ; logical(z)         ], expect)
 %!assert ([ r ; sparse(z)          ], sparse (expect))
 %!assert ([ r ; sparse(logical(z)) ], sparse (expect))
 
-%!assert ([ r ; int8(z)            ], int8(expect))
-%!assert ([ r ; int16(z)           ], int16(expect))
-%!assert ([ r ; int32(z)           ], int32(expect))
-%!assert ([ r ; int64(z)           ], int64(expect))
-%!assert ([ r ; uint8(z)           ], uint8(expect))
-%!assert ([ r ; uint16(z)          ], uint16(expect))
-%!assert ([ r ; uint32(z)          ], uint32(expect))
-%!assert ([ r ; uint64(z)          ], uint64(expect))
+%!assert ([ r ; int8(z)            ], int8 (expect))
+%!assert ([ r ; int16(z)           ], int16 (expect))
+%!assert ([ r ; int32(z)           ], int32 (expect))
+%!assert ([ r ; int64(z)           ], int64 (expect))
+%!assert ([ r ; uint8(z)           ], uint8 (expect))
+%!assert ([ r ; uint16(z)          ], uint16 (expect))
+%!assert ([ r ; uint32(z)          ], uint32 (expect))
+%!assert ([ r ; uint64(z)          ], uint64 (expect))
 
 ## Test corner cases of ranges (base and limit)
 
 %!shared r, rrev, rneg
 %! r = -0:3;
 %! rrev = 3:-1:-0;
 %! rneg = -3:-0;
 
diff --git a/test/recursion.tst b/test/recursion.tst
--- a/test/recursion.tst
+++ b/test/recursion.tst
@@ -21,23 +21,24 @@
 %!  if (x == 1)
 %!    y = x;
 %!    return;
 %!  else
 %!    y = x * f (x-1);
 %!  endif
 %!endfunction
 %!
-%!assert(f (5), 120);
+%!assert (f (5), 120)
 
 %% test/octave.test/recursion/recursion-2.m
 %!function y = f (x)
 %!  if (x == 1)
 %!    y = x;
 %!    return;
 %!  else
 %!    y = f (x-1) * x;
 %!  endif
 %!endfunction
 %!
-%!assert(f (5), 120);
+%!assert (f (5), 120)
 
 %%FIXME: Need test for maximum recursion depth
+
diff --git a/test/return.tst b/test/return.tst
--- a/test/return.tst
+++ b/test/return.tst
@@ -18,14 +18,14 @@
 
 %% test/octave.test/return/return-1.m
 %!function y = f ()
 %!  y = 1;
 %!  return;
 %!  y = 2;
 %!endfunction
 %!
-%!assert(f(), 1)
+%!assert (f (), 1)
 
 %% test/octave.test/return/return-2.m
 %!test
 %! return;
 
diff --git a/test/slice.tst b/test/slice.tst
--- a/test/slice.tst
+++ b/test/slice.tst
@@ -27,17 +27,17 @@
 %!      x(:, slice) = 2;
 %!    case 31
 %!      x(slice, :, :) = 2;
 %!    case 32
 %!      x(:, slice, :) = 2;
 %!    case 33
 %!      x(:, :, slice) = 2;
 %!    otherwise
-%!      error("invalid dim, '%d'", dim);
+%!      error ("invalid dim, '%d'", dim);
 %!  endswitch
 %!endfunction
 
 ## size = [2 0]
 %!assert (set_slice ([2 0], 11, []), zeros ([2 0]))
 %!error id=Octave:invalid-resize set_slice ([2 0], 11, 1)
 %!error id=Octave:invalid-resize set_slice ([2 0], 11, 2)
 %!error id=Octave:invalid-resize set_slice ([2 0], 11, 3)
diff --git a/test/struct.tst b/test/struct.tst
--- a/test/struct.tst
+++ b/test/struct.tst
@@ -147,31 +147,31 @@
 %! c(3, 3, 3, 3).value = 1;
 %! assert (c(2,2,2,2), struct ("name", [], "value", []));
 
 ## assign to subrange of field in 4D struct array
 %!test
 %! c(4, 4, 4, 4).name  = "a";
 %! c(3, 3, 3, 3).value = 1;
 %! [c([1, 3], 2, :, [3, 4]).value] = deal (1);
-%! assert (length(find([c.value] == 1)), 17);
-%! assert (length(find([c.value])), 17);
+%! assert (length (find ([c.value] == 1)), 17);
+%! assert (length (find ([c.value])), 17);
 
 ## swap elements of struct array
 %!test
 %! b = struct ("name", {"a", "b", "c"; "d", "e", "f"}, "value", 0);
 %! [b([2, 1], [3, 1]).name] = deal (b([1, 2], [1, 2]).name);
 %! assert ({b.name}, {"e", "b", "b", "e", "d", "a"});
 
 ## test internal ordering of struct array fields
 %!test
 %! c(4, 4, 4, 4).value = 3;
 %! c(1, 2, 3, 4).value = 2;
 %! c(3, 3, 3, 3).value = 1;
-%! d = reshape ({c.value}, size(c));
+%! d = reshape ({c.value}, size (c));
 %! assert ([d{4, 4, 4, 4}, d{1, 2, 3, 4}, d{3, 3, 3, 3}],
 %!         [3, 2, 1]);
 
 ## test assignment to mixed cs-list of field element subranges
 %!test
 %! b = struct ("name", {"a", "b", "c"; "d", "e", "f"}, "value", 100);
 %! [b(1:2, [1, 3]).name, b(2, 1:3).value] = ...
 %!   deal (1, 2, 3, 4, "5", "6", "7");
diff --git a/test/system.tst b/test/system.tst
--- a/test/system.tst
+++ b/test/system.tst
@@ -356,17 +356,17 @@
 %! if (ispc () && ! isunix ())
 %!   # should be a drive letter
 %!   assert (length (d1), 3);
 %!   assert (d1(2), ":");
 %!   assert (d1(3), "\\");
 %! else
 %!   assert ("/", d1);
 %! endif
-%! assert (pwd(), xdir);
+%! assert (pwd (), xdir);
 
 %% test/octave.test/system/cd-2.m
 %!error cd (1)
 
 %% test/octave.test/system/pwd-1.m
 %!assert (ischar (pwd ()))
 
 %% test/octave.test/system/getpwent-1.m
