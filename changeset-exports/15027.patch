# HG changeset patch
# User Max Brister <max@2bass.com>
# Date 1343340195 18000
#      Thu Jul 26 17:03:15 2012 -0500
# Node ID 741d2dbcc1172c4c80d25399006c5022314d91a0
# Parent  ae42d5a67ed9ca580cdf73ed4630035eea18d547
Check trip count before compiling for loops.

* src/jit-typeinfo.cc (octave_jit_cast_any_range, octave_jit_cast_range_any):
New function.
(octave_jit_paren_subsasgn_impl): Add return argument.
(jit_typeinfo::jit_typeinfo): Update octave_jit_paren_subsasgn_impl call and add
any <-> range casts.

* src/pt-eval.cc (tree_evaluator::visit_simple_for_command): Try jit after
computing loop bounds.

* src/pt-jit.cc (jit_convert::jit_convert): Add and handle for bounds argument.
(jit_convert::visit_binary_expression): Use next_shortcircut_result.
(jit_convert::visit_simple_for_command): Use next_iterator and check for
precomputed bounds.
(jit_convert::find_variable, jit_convert::create_variable,
jit_convert::next_name, tree_jit::trip_count, jit_info::initialize,
jit_info::find): New function.
(jit_convert::get_variable): Use find_variable and create_variable.
(tree_jit::execute): Allow for precomputed loop bounds and check trip count.
(jit_info::jit_info): Added new overload and defer work to initialize.
(jit_info::execute): Support precomputed bounds.
(jit_info::match): Support precomputed bounds.

* src/pt-jit.h (jit_convert::jit_convert, jit_convert::execute,
jit_info::execute, jit_info::match): New parameter.
(jit_convert::find_variable, jit_convert::create_variable,
tree_jit::trip_count, jit_info::initialize, jit_info::find): New declaration.
(jit_convert::next_iterator, jit_convert::next_for_bounds,
jit_convert::next_shortcircut_result, jit_convert::next_name): New function.

diff --git a/src/jit-typeinfo.cc b/src/jit-typeinfo.cc
--- a/src/jit-typeinfo.cc
+++ b/src/jit-typeinfo.cc
@@ -133,16 +133,35 @@ octave_jit_cast_any_matrix (jit_matrix *
 extern "C" void
 octave_jit_cast_matrix_any (jit_matrix *ret, octave_base_value *obv)
 {
   NDArray m = obv->array_value ();
   *ret = m;
   obv->release ();
 }
 
+extern "C" octave_base_value *
+octave_jit_cast_any_range (jit_range *rng)
+{
+  Range temp (*rng);
+  octave_value ret (temp);
+  octave_base_value *rep = ret.internal_rep ();
+  rep->grab ();
+
+  return rep;
+}
+extern "C" void
+octave_jit_cast_range_any (jit_range *ret, octave_base_value *obv)
+{
+
+  jit_range r (obv->range_value ());
+  *ret = r;
+  obv->release ();
+}
+
 extern "C" double
 octave_jit_cast_scalar_any (octave_base_value *obv)
 {
   double ret = obv->double_value ();
   obv->release ();
   return ret;
 }
 
@@ -205,27 +224,28 @@ octave_jit_gindex_range (int nd, int dim
     }
   catch (const octave_execution_exception&)
     {
       gripe_library_execution_error ();
     }
 }
 
 extern "C" void
-octave_jit_paren_subsasgn_impl (jit_matrix *mat, octave_idx_type index,
-                                double value)
+octave_jit_paren_subsasgn_impl (jit_matrix *ret, jit_matrix *mat,
+                                octave_idx_type index, double value)
 {
   NDArray *array = mat->array;
   if (array->nelem () < index)
     array->resize1 (index);
 
   double *data = array->fortran_vec ();
   data[index - 1] = value;
 
   mat->update ();
+  *ret = *mat;
 }
 
 extern "C" void
 octave_jit_paren_subsasgn_matrix_range (jit_matrix *result, jit_matrix *mat,
                                         jit_range *index, double value)
 {
   NDArray *array = mat->array;
   bool done = false;
@@ -1286,17 +1306,18 @@ jit_typeinfo::jit_typeinfo (llvm::Module
   }
   paren_subsref_fn.add_overload (fn);
 
   // paren subsasgn
   paren_subsasgn_fn.stash_name ("()subsasgn");
 
   jit_function resize_paren_subsasgn
     = create_function (jit_convention::external,
-                       "octave_jit_paren_subsasgn_impl", matrix, index, scalar);
+                       "octave_jit_paren_subsasgn_impl", matrix, matrix, index,
+                       scalar);
   resize_paren_subsasgn.add_mapping (engine, &octave_jit_paren_subsasgn_impl);
   fn = create_function (jit_convention::internal, "octave_jit_paren_subsasgn",
                         matrix, matrix, scalar, scalar);
   fn.mark_can_error ();
   body = fn.new_block ();
   builder.SetInsertPoint (body);
   {
     llvm::Value *one = llvm::ConstantInt::get (index_t, 1);
@@ -1331,18 +1352,18 @@ jit_typeinfo::jit_typeinfo (llvm::Module
     cond = builder.CreateOr (cond0, cond1);
 
     llvm::BasicBlock *bounds_error = fn.new_block ("bounds_error", done);
     llvm::BasicBlock *success = fn.new_block ("success", done);
     builder.CreateCondBr (cond, bounds_error, success);
 
     // resize on out of bounds access
     builder.SetInsertPoint (bounds_error);
-    llvm::Value *resize_result = resize_paren_subsasgn.call (builder, int_idx,
-                                                             value);
+    llvm::Value *resize_result = resize_paren_subsasgn.call (builder, mat,
+                                                             int_idx, value);
     builder.CreateBr (done);
 
     builder.SetInsertPoint (success);
     llvm::Value *data = builder.CreateExtractValue (mat,
                                                     llvm::ArrayRef<unsigned> (1));
     llvm::Value *gep = builder.CreateInBoundsGEP (data, int_idx);
     builder.CreateStore (value, gep);
     builder.CreateBr (done);
@@ -1364,29 +1385,42 @@ jit_typeinfo::jit_typeinfo (llvm::Module
   fn.add_mapping (engine, &octave_jit_paren_subsasgn_matrix_range);
   fn.mark_can_error ();
   paren_subsasgn_fn.add_overload (fn);
 
   casts[any->type_id ()].stash_name ("(any)");
   casts[scalar->type_id ()].stash_name ("(scalar)");
   casts[complex->type_id ()].stash_name ("(complex)");
   casts[matrix->type_id ()].stash_name ("(matrix)");
+  casts[any->type_id ()].stash_name ("(range)");
 
   // cast any <- matrix
   fn = create_function (jit_convention::external, "octave_jit_cast_any_matrix",
                         any, matrix);
   fn.add_mapping (engine, &octave_jit_cast_any_matrix);
   casts[any->type_id ()].add_overload (fn);
 
   // cast matrix <- any
   fn = create_function (jit_convention::external, "octave_jit_cast_matrix_any",
                         matrix, any);
   fn.add_mapping (engine, &octave_jit_cast_matrix_any);
   casts[matrix->type_id ()].add_overload (fn);
 
+  // cast any <- range
+  fn = create_function (jit_convention::external, "octave_jit_cast_any_range",
+                        any, range);
+  fn.add_mapping (engine, &octave_jit_cast_any_range);
+  casts[any->type_id ()].add_overload (fn);
+
+  // cast range <- any
+  fn = create_function (jit_convention::external, "octave_jit_cast_range_any",
+                        range, any);
+  fn.add_mapping (engine, &octave_jit_cast_range_any);
+  casts[range->type_id ()].add_overload (fn);
+
   // cast any <- scalar
   fn = create_function (jit_convention::external, "octave_jit_cast_any_scalar",
                         any, scalar);
   fn.add_mapping (engine, &octave_jit_cast_any_scalar);
   casts[any->type_id ()].add_overload (fn);
 
   // cast scalar <- any
   fn = create_function (jit_convention::external, "octave_jit_cast_scalar_any",
diff --git a/src/pt-eval.cc b/src/pt-eval.cc
--- a/src/pt-eval.cc
+++ b/src/pt-eval.cc
@@ -291,34 +291,34 @@ void
 tree_evaluator::visit_simple_for_command (tree_simple_for_command& cmd)
 {
   if (error_state)
     return;
 
   if (debug_mode)
     do_breakpoint (cmd.is_breakpoint ());
 
-#if HAVE_LLVM
-  if (jiter.execute (cmd))
-    return;
-#endif
-
   // FIXME -- need to handle PARFOR loops here using cmd.in_parallel ()
   // and cmd.maxproc_expr ();
 
   unwind_protect frame;
 
   frame.protect_var (in_loop_command);
 
   in_loop_command = true;
 
   tree_expression *expr = cmd.control_expr ();
 
   octave_value rhs = expr->rvalue1 ();
 
+#if HAVE_LLVM
+  if (jiter.execute (cmd, rhs))
+    return;
+#endif
+
   if (error_state || rhs.is_undefined ())
     return;
 
   {
     tree_expression *lhs = cmd.left_hand_side ();
 
     octave_lvalue ult = lhs->lvalue ();
 
diff --git a/src/pt-jit.cc b/src/pt-jit.cc
--- a/src/pt-jit.cc
+++ b/src/pt-jit.cc
@@ -52,26 +52,31 @@ along with Octave; see the file COPYING.
 #include "symtab.h"
 #include "pt-all.h"
 
 static llvm::IRBuilder<> builder (llvm::getGlobalContext ());
 
 static llvm::LLVMContext& context = llvm::getGlobalContext ();
 
 // -------------------- jit_convert --------------------
-jit_convert::jit_convert (llvm::Module *module, tree &tee)
-  : iterator_count (0), short_count (0), breaking (false)
+jit_convert::jit_convert (llvm::Module *module, tree &tee,
+                          jit_type *for_bounds)
+  : iterator_count (0), for_bounds_count (0), short_count (0), breaking (false)
 {
   jit_instruction::reset_ids ();
 
   entry_block = create<jit_block> ("body");
   final_block = create<jit_block> ("final");
   append (entry_block);
   entry_block->mark_alive ();
   block = entry_block;
+
+  if (for_bounds)
+    create_variable (next_for_bounds (false), for_bounds);
+
   visit (tee);
 
   // FIXME: Remove if we no longer only compile loops
   assert (! breaking);
   assert (breaks.empty ());
   assert (continues.empty ());
 
   block->append (create<jit_branch> (final_block));
@@ -170,20 +175,17 @@ jit_convert::visit_binary_expression (tr
 {
   if (be.op_type () >= octave_value::num_binary_ops)
     {
       tree_boolean_expression *boole;
       boole = dynamic_cast<tree_boolean_expression *> (&be);
       assert (boole);
       bool is_and = boole->op_type () == tree_boolean_expression::bool_and;
 
-      std::stringstream ss;
-      ss << "#short_result" << short_count++;
-
-      std::string short_name = ss.str ();
+      std::string short_name = next_shortcircut_result ();
       jit_variable *short_result = create<jit_variable> (short_name);
       vmap[short_name] = short_result;
 
       jit_block *done = create<jit_block> (block->name ());
       tree_expression *lhs = be.lhs ();
       jit_value *lhsv = visit (lhs);
       lhsv = create_checked (&jit_typeinfo::logically_true, lhsv);
 
@@ -297,29 +299,31 @@ jit_convert::visit_simple_for_command (t
   unwind_protect prot;
   prot.protect_var (breaks);
   prot.protect_var (continues);
   prot.protect_var (breaking);
   breaks.clear ();
   continues.clear ();
 
   // we need a variable for our iterator, because it is used in multiple blocks
-  std::stringstream ss;
-  ss << "#iter" << iterator_count++;
-  std::string iter_name = ss.str ();
+  std::string iter_name = next_iterator ();
   jit_variable *iterator = create<jit_variable> (iter_name);
+  create<jit_variable> (iter_name);
   vmap[iter_name] = iterator;
 
   jit_block *body = create<jit_block> ("for_body");
   append (body);
 
   jit_block *tail = create<jit_block> ("for_tail");
 
   // do control expression, iter init, and condition check in prev_block (block)
-  jit_value *control = visit (cmd.control_expr ());
+  // if we are the top level for loop, the bounds is an input argument.
+  jit_value *control = find_variable (next_for_bounds ());
+  if (! control)
+    control = visit (cmd.control_expr ());
   jit_call *init_iter = create<jit_call> (jit_typeinfo::for_init, control);
   block->append (init_iter);
   block->append (create<jit_assign> (iterator, init_iter));
 
   jit_value *check = block->append (create<jit_call> (jit_typeinfo::for_check,
                                                       control, iterator));
   block->append (create<jit_cond_branch> (check, body, tail));
   block = body;
@@ -757,31 +761,53 @@ jit_convert::insert_before (block_iterat
 void
 jit_convert::insert_after (block_iterator iter, jit_block *ablock)
 {
   ++iter;
   insert_before (iter, ablock);
 }
 
 jit_variable *
+jit_convert::find_variable (const std::string& vname) const
+{
+  vmap_t::const_iterator iter;
+  iter = vmap.find (vname);
+  return iter != vmap.end () ? iter->second : 0;
+}
+
+jit_variable *
 jit_convert::get_variable (const std::string& vname)
 {
-  vmap_t::iterator iter;
-  iter = vmap.find (vname);
-  if (iter != vmap.end ())
-    return iter->second;
+  jit_variable *ret = find_variable (vname);
+  if (ret)
+    return ret;
 
-  jit_variable *var = create<jit_variable> (vname);
   octave_value val = symbol_table::find (vname);
   jit_type *type = jit_typeinfo::type_of (val);
+  return create_variable (vname, type);
+}
+
+jit_variable *
+jit_convert::create_variable (const std::string& vname, jit_type *type)
+{
+  jit_variable *var = create<jit_variable> (vname);
   jit_extract_argument *extract;
   extract = create<jit_extract_argument> (type, var);
   entry_block->prepend (extract);
+  return vmap[vname] = var;
+}
 
-  return vmap[vname] = var;
+std::string
+jit_convert::next_name (const char *prefix, size_t& count, bool inc)
+{
+  std::stringstream ss;
+  ss << prefix << count;
+  if (inc)
+    ++count;
+  return ss.str ();
 }
 
 std::pair<jit_value *, jit_value *>
 jit_convert::resolve (tree_index_expression& exp)
 {
   std::string type = exp.type_tags ();
   if (! (type.size () == 1 && type[0] == '('))
     throw jit_fail_exception ("Unsupported index operation");
@@ -1457,30 +1483,39 @@ jit_convert::convert_llvm::visit (jit_ar
 tree_jit::tree_jit (void) : module (0), engine (0)
 {
 }
 
 tree_jit::~tree_jit (void)
 {}
 
 bool
-tree_jit::execute (tree_simple_for_command& cmd)
+tree_jit::execute (tree_simple_for_command& cmd, const octave_value& bounds)
 {
-  if (! initialize ())
+  const size_t MIN_TRIP_COUNT = 1000;
+
+  size_t tc = trip_count (bounds);
+  if (! tc || ! initialize ())
     return false;
 
+  jit_info::vmap extra_vars;
+  extra_vars["#for_bounds0"] = &bounds;
+
   jit_info *info = cmd.get_info ();
-  if (! info || ! info->match ())
+  if (! info || ! info->match (extra_vars))
     {
+      if (tc < MIN_TRIP_COUNT)
+        return false;
+
       delete info;
-      info = new jit_info (*this, cmd);
+      info = new jit_info (*this, cmd, bounds);
       cmd.stash_info (info);
     }
 
-  return info->execute ();
+  return info->execute (extra_vars);
 }
 
 bool
 tree_jit::execute (tree_while_command& cmd)
 {
   if (! initialize ())
     return false;
 
@@ -1526,16 +1561,29 @@ tree_jit::initialize (void)
   pass_manager->add (llvm::createCFGSimplificationPass ());
   pass_manager->doInitialization ();
 
   jit_typeinfo::initialize (module, engine);
 
   return true;
 }
 
+size_t
+tree_jit::trip_count (const octave_value& bounds) const
+{
+  if (bounds.is_range ())
+    {
+      Range rng = bounds.range_value ();
+      return rng.nelem ();
+    }
+
+  // unsupported type
+  return 0;
+}
+
 
 void
 tree_jit::optimize (llvm::Function *fn)
 {
   module_pass_manager->run (*module);
   pass_manager->run (*fn);
 
 #ifdef OCTAVE_JIT_DEBUG
@@ -1543,104 +1591,141 @@ tree_jit::optimize (llvm::Function *fn)
   llvm::raw_fd_ostream fout ("test.bc", error,
                              llvm::raw_fd_ostream::F_Binary);
   llvm::WriteBitcodeToFile (module, fout);
 #endif
 }
 
 // -------------------- jit_info --------------------
 jit_info::jit_info (tree_jit& tjit, tree& tee)
-  : engine (tjit.get_engine ()), llvm_function (0)
+  : engine (tjit.get_engine ()), function (0), llvm_function (0)
 {
   try
     {
       jit_convert conv (tjit.get_module (), tee);
-      llvm_function = conv.get_function ();
-      arguments = conv.get_arguments ();
-      bounds = conv.get_bounds ();
+      initialize (tjit, conv);
     }
   catch (const jit_fail_exception& e)
     {
 #ifdef OCTAVE_JIT_DEBUG
       if (e.known ())
         std::cout << "jit fail: " << e.what () << std::endl;
 #endif
     }
-
-  if (! llvm_function)
-    {
-      function = 0;
-      return;
-    }
-
-  tjit.optimize (llvm_function);
+}
 
+jit_info::jit_info (tree_jit& tjit, tree& tee, const octave_value& for_bounds)
+  : engine (tjit.get_engine ()), function (0), llvm_function (0)
+{
+  try
+    {
+      jit_convert conv (tjit.get_module (), tee,
+                        jit_typeinfo::type_of (for_bounds));
+      initialize (tjit, conv);
+    }
+  catch (const jit_fail_exception& e)
+    {
 #ifdef OCTAVE_JIT_DEBUG
-  std::cout << "-------------------- optimized llvm ir --------------------\n";
-  llvm::raw_os_ostream llvm_cout (std::cout);
-  llvm_function->print (llvm_cout);
-  std::cout << std::endl;
+      if (e.known ())
+        std::cout << "jit fail: " << e.what () << std::endl;
 #endif
-
-  void *void_fn = engine->getPointerToFunction (llvm_function);
-  function = reinterpret_cast<jited_function> (void_fn);
+    }
 }
 
 jit_info::~jit_info (void)
 {
   if (llvm_function)
     llvm_function->eraseFromParent ();
 }
 
 bool
-jit_info::execute (void) const
+jit_info::execute (const vmap& extra_vars) const
 {
   if (! function)
     return false;
 
   std::vector<octave_base_value *> real_arguments (arguments.size ());
   for (size_t i = 0; i < arguments.size (); ++i)
     {
       if (arguments[i].second)
         {
-          octave_value &current = symbol_table::varref (arguments[i].first);
+          octave_value current = find (extra_vars, arguments[i].first);
           octave_base_value *obv = current.internal_rep ();
           obv->grab ();
           real_arguments[i] = obv;
-          current = octave_value ();
         }
     }
 
   function (&real_arguments[0]);
 
   for (size_t i = 0; i < arguments.size (); ++i)
-    symbol_table::varref (arguments[i].first) = real_arguments[i];
+    {
+      const std::string& name = arguments[i].first;
+
+      // do not store for loop bounds temporary
+      if (name.size () && name[0] != '#')
+        symbol_table::varref (arguments[i].first) = real_arguments[i];
+    }
 
   return true;
 }
 
 bool
-jit_info::match (void) const
+jit_info::match (const vmap& extra_vars) const
 {
   if (! function)
     return true;
 
   for (size_t i = 0; i < bounds.size (); ++i)
     {
       const std::string& arg_name = bounds[i].second;
-      octave_value value = symbol_table::find (arg_name);
+      octave_value value = find (extra_vars, arg_name);
       jit_type *type = jit_typeinfo::type_of (value);
 
       // FIXME: Check for a parent relationship
       if (type != bounds[i].first)
         return false;
     }
 
   return true;
 }
+
+void
+jit_info::initialize (tree_jit& tjit, jit_convert& conv)
+{
+  llvm_function = conv.get_function ();
+  arguments = conv.get_arguments ();
+  bounds = conv.get_bounds ();
+
+  if (llvm_function)
+    {
+      tjit.optimize (llvm_function);
+
+#ifdef OCTAVE_JIT_DEBUG
+      std::cout << "-------------------- optimized llvm ir "
+                << "--------------------\n";
+      llvm::raw_os_ostream llvm_cout (std::cout);
+      llvm_function->print (llvm_cout);
+      llvm_cout.flush ();
+      std::cout << std::endl;
+#endif
+
+      void *void_fn = engine->getPointerToFunction (llvm_function);
+      function = reinterpret_cast<jited_function> (void_fn);
+    }
+}
+
+octave_value
+jit_info::find (const vmap& extra_vars, const std::string& vname) const
+{
+  vmap::const_iterator iter = extra_vars.find (vname);
+  return iter == extra_vars.end () ? symbol_table::varval (vname)
+    : *iter->second;
+}
+
 #endif
 
 
 /*
 Test some simple cases that compile.
 
 %!test
 %! inc = 1e-5;
diff --git a/src/pt-jit.h b/src/pt-jit.h
--- a/src/pt-jit.h
+++ b/src/pt-jit.h
@@ -59,17 +59,17 @@ along with Octave; see the file COPYING.
 // cleaned up.
 class
 jit_convert : public tree_walker
 {
 public:
   typedef std::pair<jit_type *, std::string> type_bound;
   typedef std::vector<type_bound> type_bound_vector;
 
-  jit_convert (llvm::Module *module, tree &tee);
+  jit_convert (llvm::Module *module, tree &tee, jit_type *for_bounds = 0);
 
   ~jit_convert (void);
 
   llvm::Function *get_function (void) const { return function; }
 
   const std::vector<std::pair<std::string, bool> >& get_arguments(void) const
   { return arguments; }
 
@@ -240,16 +240,17 @@ private:
 
   std::list<jit_instruction *> worklist;
 
   std::list<jit_value *> constants;
 
   std::list<jit_value *> all_values;
 
   size_t iterator_count;
+  size_t for_bounds_count;
   size_t short_count;
 
   typedef std::map<std::string, jit_variable *> vmap_t;
   vmap_t vmap;
 
   jit_call *create_checked_impl (jit_call *ret)
   {
     block->append (ret);
@@ -263,18 +264,41 @@ private:
     jit_error_check *ret
       = block->append (create<jit_error_check> (call, normal, final_block));
     append (normal);
     block = normal;
 
     return ret;
   }
 
+  // get an existing vairable. If the variable does not exist, it will not be
+  // created
+  jit_variable *find_variable (const std::string& vname) const;
+
+  // get a variable, create it if it does not exist. The type will default to
+  // the variable's current type in the symbol table.
   jit_variable *get_variable (const std::string& vname);
 
+  // create a variable of the given name and given type. Will also insert an
+  // extract statement
+  jit_variable *create_variable (const std::string& vname, jit_type *type);
+
+  // The name of the next for loop iterator. If inc is false, then the iterator
+  // counter will not be incremented.
+  std::string next_iterator (bool inc = true)
+  { return next_name ("#iter", iterator_count, inc); }
+
+  std::string next_for_bounds (bool inc = true)
+  { return next_name ("#for_bounds", for_bounds_count, inc); }
+
+  std::string next_shortcircut_result (bool inc = true)
+  { return next_name ("#shortcircut_result", short_count, inc); }
+
+  std::string next_name (const char *prefix, size_t& count, bool inc);
+
   std::pair<jit_value *, jit_value *> resolve (tree_index_expression& exp);
 
   jit_value *do_assign (tree_expression *exp, jit_value *rhs,
                         bool artificial = false);
 
   jit_value *do_assign (const std::string& lhs, jit_value *rhs, bool print,
                         bool artificial = false);
 
@@ -399,52 +423,63 @@ class jit_info;
 class
 tree_jit
 {
 public:
   tree_jit (void);
 
   ~tree_jit (void);
 
-  bool execute (tree_simple_for_command& cmd);
+  bool execute (tree_simple_for_command& cmd, const octave_value& bounds);
 
   bool execute (tree_while_command& cmd);
 
   llvm::ExecutionEngine *get_engine (void) const { return engine; }
 
   llvm::Module *get_module (void) const { return module; }
 
   void optimize (llvm::Function *fn);
  private:
   bool initialize (void);
 
+  size_t trip_count (const octave_value& bounds) const;
+
   // FIXME: Temorary hack to test
   typedef std::map<tree *, jit_info *> compiled_map;
   llvm::Module *module;
   llvm::PassManager *module_pass_manager;
   llvm::FunctionPassManager *pass_manager;
   llvm::ExecutionEngine *engine;
 };
 
 class
 jit_info
 {
 public:
+  // we use a pointer here so we don't have to include ov.h
+  typedef std::map<std::string, const octave_value *> vmap;
+
   jit_info (tree_jit& tjit, tree& tee);
 
+  jit_info (tree_jit& tjit, tree& tee, const octave_value& for_bounds);
+
   ~jit_info (void);
 
-  bool execute (void) const;
+  bool execute (const vmap& extra_vars = vmap ()) const;
 
-  bool match (void) const;
+  bool match (const vmap& extra_vars = vmap ()) const;
 private:
   typedef jit_convert::type_bound type_bound;
   typedef jit_convert::type_bound_vector type_bound_vector;
   typedef void (*jited_function)(octave_base_value**);
 
+  void initialize (tree_jit& tjit, jit_convert& conv);
+
+  octave_value find (const vmap& extra_vars, const std::string& vname) const;
+
   llvm::ExecutionEngine *engine;
   jited_function function;
   llvm::Function *llvm_function;
 
   std::vector<std::pair<std::string, bool> > arguments;
   type_bound_vector bounds;
 };
 
