# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1281905441 25200
#      Sun Aug 15 13:50:41 2010 -0700
# Node ID 20ce631f0f1208e9296442c6d7f689fcea185592
# Parent  ff94219746bd9c5d0bcf038e875ecaa45c3706aa
Add new randi function for random integers.

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,12 @@
+2010-08-15  Rik <octave@nomad.inbox5.com>
+
+	* interpreter/matrx.txi: Add documentation for randi function.
+
 2010-08-13  Rik <octave@nomad.inbox5.com>
 
 	* interpreter/Makefile.am: Update @EXAMPLEFILE dependencies.
 
 2010-08-10  Rik <octave@nomad.inbox5.com>
 
 	* interpreter/Makefile.am: Change dependency to $(srcdir)/images.mk.
 
diff --git a/doc/interpreter/matrix.txi b/doc/interpreter/matrix.txi
--- a/doc/interpreter/matrix.txi
+++ b/doc/interpreter/matrix.txi
@@ -174,16 +174,18 @@ a (i, :)
 @DOCSTRING(zeros)
 
 @DOCSTRING(repmat)
 
 @DOCSTRING(repelems)
 
 @DOCSTRING(rand)
 
+@DOCSTRING(randi)
+
 @DOCSTRING(randn)
 
 @DOCSTRING(rande)
 
 @DOCSTRING(randp)
 
 @DOCSTRING(randg)
 
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,14 @@
+2010-08-15  Rik <octave@nomad.inbox5.com>
+
+	* general/randi.m: Add new script for random integers.
+	* general/module.mk: Add randi to build file list.
+	* miscellaneous/unimplemented.m: Remove randi from unimplemented list.
+
 2010-08-15  Rik <octave@nomad.inbox5.com>
 
 	* image/imwrite.m: Allow writing of 1-bit (B&W) images.
 	Improve documentation string.  Add input validation tests.
 
 2010-08-13  Ben Abbott <bpabbott@mac.com>
 
 	* plot/__print_parse_opts__.m: Double quote paths with spaces.
diff --git a/scripts/general/module.mk b/scripts/general/module.mk
--- a/scripts/general/module.mk
+++ b/scripts/general/module.mk
@@ -57,16 +57,17 @@ general_FCN_FILES = \
   general/perror.m \
   general/pol2cart.m \
   general/polyarea.m \
   general/postpad.m \
   general/prepad.m \
   general/quadgk.m \
   general/quadl.m \
   general/quadv.m \
+  general/randi.m \
   general/rat.m \
   general/repmat.m \
   general/rot90.m \
   general/rotdim.m \
   general/runlength.m \
   general/saveobj.m \
   general/shift.m \
   general/shiftdim.m \
diff --git a/scripts/general/randi.m b/scripts/general/randi.m
new file mode 100644
--- /dev/null
+++ b/scripts/general/randi.m
@@ -0,0 +1,137 @@
+## Copyright (C) 2010 Rik Wehbring
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 3 of the License, or (at
+## your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+## General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
+## <http://www.gnu.org/licenses/>.
+
+## -*- texinfo -*-
+## @deftypefn  {Function File} {} randi (@var{imax})
+## @deftypefnx {Function File} {} randi (@var{imax}, @var{n})
+## @deftypefnx {Function File} {} randi (@var{imax}, @var{m}, @var{n}, @dots{})
+## @deftypefnx {Function File} {} randi ([@var{imin}, @var{imax}], @dots{})
+## @deftypefnx {Function File} {} randi (@dots{}, "@var{class}")
+## Return random integers in the range 1:@var{imax}.  
+##
+## Additional arguments determine the shape of the return matrix.  When no
+## arguments are specified a single random integer is returned.  If one
+## argument @var{n} is specified then a square matrix @w{(@var{n} x @var{n})} is
+## returned.  Two or more arguments will return a multi-dimensional 
+## matrix @w{(@var{m} x @var{n} x @dots{})}.
+##
+## The integer range may optionally be described by a two element matrix
+## with a lower and upper bound in which case the returned integers will be
+## on the interval @w{[@var{imin}, @var{imax}]}.
+##
+## The optional argument "@var{class}" will return a matrix of the requested
+## type.  The default is "double".
+##
+## The following example returns 150 integers in the range 1-10.
+##
+## @example
+## ri = randi (10, 150, 1);
+## @end example
+##
+## Implementation Note: @code{randi} relies internally on @code{rand} which
+## uses class "double" to represent numbers.  This limits the maximum
+## integer (@var{imax}) and range (@var{imax} - @var{imin}) to the value 
+## returned by the @code{bitmax} function.  For IEEE floating point numbers
+## this value is @w{@code{2^53 - 1}}.
+##
+## @seealso{rand}
+## @end deftypefn
+
+## Author: Rik Wehbring
+
+function ri = randi (bounds, varargin)
+
+  if (nargin < 1)
+    print_usage();
+  endif
+
+  if (! (isnumeric (bounds) && isreal (bounds)))
+    error ("randi: IMIN and IMAX must be real numeric bounds");
+  endif
+
+  if (isscalar (bounds))
+    imin = 1;
+    imax = fix (bounds);
+    if (imax < 1)
+      error ("randi: require IMAX >= 1");
+    endif  
+  else
+    imin = fix (bounds(1));
+    imax = fix (bounds(2));
+    if (imax < imin)
+      error ("randi: require IMIN <= IMAX");
+    endif 
+  endif
+  
+  if (nargin > 1 && ischar (varargin{end}))
+    rclass = varargin{end};
+    varargin(end) = [];
+  else
+    rclass = "double";
+  endif
+
+  ## FIXME: No check for class "single"
+  if (strfind (rclass, "int"))
+    if (imax > intmax (rclass))
+      error ("randi: require IMAX < intmax (CLASS)");
+    endif
+  endif
+  ## Limit set by use of class double in rand()
+  if (imax > bitmax) 
+    error ("randi: maximum integer IMAX must be smaller than bitmax ()");
+  endif
+  if ((imax - imin) > bitmax)
+    error ("randi: maximum integer range must be smaller than bitmax ()");
+  endif
+
+
+  ri = imin + floor ( (imax-imin+1)*rand (varargin{:}) );
+
+  if (! strcmp (rclass, "double"))
+    ri = cast (ri, rclass);
+  endif
+
+endfunction
+
+%!test
+%! ri = randi (10, 1000, 1);
+%! assert(isequal(ri, fix (ri)));
+%! assert(min(ri) == 1);
+%! assert(max(ri) == 10);
+%! assert(rows(ri) == 1000);
+%! assert(columns(ri) == 1);
+%! assert(strcmp (class (ri), "double"));
+%!test
+%! ri = randi ([-5, 10], 1000, 1, "int8");
+%! assert(isequal(ri, fix (ri)));
+%! assert(min(ri) == -5);
+%! assert(max(ri) == 10);
+%! assert(strcmp (class (ri), "int8"));
+%!
+%!assert(size (randi(10, 3,1,2)) == [3, 1, 2])
+
+%% Test input validation
+%!error(randi())
+%!error(randi("test"))
+%!error(randi(10+2i))
+%!error(randi(0))
+%!error(randi([10, 1]))
+%!error(randi(256, "uint8"))
+%!error(randi(bitmax() + 1))
+%!error(randi([-1, bitmax()]))
+
diff --git a/scripts/miscellaneous/unimplemented.m b/scripts/miscellaneous/unimplemented.m
--- a/scripts/miscellaneous/unimplemented.m
+++ b/scripts/miscellaneous/unimplemented.m
@@ -329,17 +329,16 @@ function list = missing_functions ()
   "profile", 
   "profsave", 
   "propedit", 
   "propertyeditor", 
   "publish", 
   "qmr", 
   "quad2d", 
   "questdlg", 
-  "randi", 
   "rbbox", 
   "rectangle", 
   "recycle", 
   "reducepatch", 
   "reducevolume", 
   "resample", 
   "reset", 
   "rgbplot", 
