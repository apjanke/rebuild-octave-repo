# HG changeset patch
# User dbateman
# Date 1130361237 0
#      Wed Oct 26 21:13:57 2005 +0000
# Node ID e67d027ff4e3ab577bff9d2f776b95b382dcdf2b
# Parent  3fadccb05d5d057e59047e202887bcf150343bdf
[project @ 2005-10-26 21:13:56 by dbateman]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2005-10-26  David Bateman  <dbateman@free.fr>
+
+	* sparse-base-chol.h: Include cholmod specific code in HAVE_CHOLMOD
+	* sparse-base-chol.cc: ditto.
+
 2005-10-26  John W. Eaton  <jwe@octave.org>
 
 	Changes for GCC 4.1, tip from Arno J. Klaassen
 	<arno@heho.snv.jussieu.fr>:
 
 	* dSparse.h (real (const SparseComplexMatrix&)): 
 	Publish externally used friend function.
 	(imag (const SparseComplexMatrix&)): Likewise.
diff --git a/liboctave/sparse-base-chol.cc b/liboctave/sparse-base-chol.cc
--- a/liboctave/sparse-base-chol.cc
+++ b/liboctave/sparse-base-chol.cc
@@ -27,16 +27,17 @@ Boston, MA 02110-1301, USA.
 #include "sparse-base-chol.h"
 #include "sparse-util.h"
 #include "lo-error.h"
 #include "oct-sparse.h"
 #include "oct-spparms.h"
 #include "quit.h"
 #include "SparseType.h"
 
+#ifdef HAVE_CHOLMOD
 // Can't use CHOLMOD_NAME(drop)(0.0, S, cm). It doesn't treat complex matrices
 template <class chol_type, class chol_elt, class p_type>
 void 
 sparse_base_chol<chol_type, chol_elt, p_type>::sparse_base_chol_rep::drop_zeros 
   (const cholmod_sparse* S)
 {
   chol_elt sik;
   octave_idx_type *Sp, *Si;
@@ -68,16 +69,17 @@ sparse_base_chol<chol_type, chol_elt, p_
 		  Sx [pdest] = sik;
 		}
 	      pdest++;
 	    }
 	}
     }
   Sp [ncol] = pdest;
 }
+#endif
 
 template <class chol_type, class chol_elt, class p_type>
 octave_idx_type
 sparse_base_chol<chol_type, chol_elt, p_type>::sparse_base_chol_rep::init 
   (const chol_type& a, bool natural)
 {
   octave_idx_type info = 0;
 #ifdef HAVE_CHOLMOD
diff --git a/liboctave/sparse-base-chol.h b/liboctave/sparse-base-chol.h
--- a/liboctave/sparse-base-chol.h
+++ b/liboctave/sparse-base-chol.h
@@ -33,55 +33,58 @@ Boston, MA 02110-1301, USA.
 template <class chol_type, class chol_elt, class p_type>
 class
 sparse_base_chol
 {
 protected:
   class sparse_base_chol_rep
   {
   public:
+#ifdef HAVE_CHOLMOD
     sparse_base_chol_rep (void) : count (1), Lsparse (NULL), 
 				  is_pd (false), minor_p (0) { }
-
+#else
+    sparse_base_chol_rep (void) : count (1), is_pd (false), minor_p (0) { }
+#endif
     sparse_base_chol_rep (const chol_type& a, 
 			  const bool natural) : count (1)
       { init (a, natural); }
 
     sparse_base_chol_rep (const chol_type& a, octave_idx_type& info, 
 			  const bool natural) : count (1)
       { info = init (a, natural); }
 
-#ifndef HAVE_CHOLMOD
-    ~sparse_base_chol_rep (void) { }
-#else
+#ifdef HAVE_CHOLMOD
     ~sparse_base_chol_rep (void) 
       { CHOLMOD_NAME(free_sparse) (&Lsparse, &Common); }
-#endif
 
     cholmod_sparse * L (void) const { return Lsparse; }
-
+#else
+    ~sparse_base_chol_rep (void) { }
+#endif
     octave_idx_type P (void) const 
       { return (minor_p == static_cast<octave_idx_type>(Lsparse->ncol) ? 
 		0 : minor_p + 1); }
 
     ColumnVector perm (void) const { return perms + 1; }
 
     p_type Q (void) const;
 
     bool is_positive_definite (void) const { return is_pd; }
 
     double rcond (void) const { return cond; }
 
     int count;
 
   private:
+#ifdef HAVE_CHOLMOD
     cholmod_sparse *Lsparse;
 
     cholmod_common Common;
-
+#endif
     bool is_pd;
 
     octave_idx_type minor_p;
 
     ColumnVector perms;
 
     double cond;
 
