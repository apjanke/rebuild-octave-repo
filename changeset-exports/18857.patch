# HG changeset patch
# User Rik <rik@octave.org>
# Date 1403729141 25200
#      Wed Jun 25 13:45:41 2014 -0700
# Node ID 7bbe3658c5ef2d63274e06eefe034b718a68deef
# Parent  de8c67ba7ac41383d6bccfc16c696e98d9c81ee3
maint: Use "FIXME:" coding convention in m-files.

* flipdim.m, prepad.m, rotdim.m, doc.m, strread.m, textread.m, krylov.m,
colon.m, dump_prefs.m, fileattrib.m, getappdata.m, __xzip__.m, unpack.m,
fsolve.m, axis.m, meshc.m, print.m, __ghostscript__.m, __go_draw_axes__.m,
__print_parse_opts__.m, struct2hdl.m, unique.m, spstats.m, treeplot.m, test.m,
datestr.m: Use "FIXME:" coding convention in m-files.

diff --git a/scripts/general/flipdim.m b/scripts/general/flipdim.m
--- a/scripts/general/flipdim.m
+++ b/scripts/general/flipdim.m
@@ -57,13 +57,13 @@ function y = flipdim (x, dim)
 
 endfunction
 
 
 %!assert (flipdim ([1,2;3,4]), flipdim ([1,2 ; 3,4], 1))
 %!assert (flipdim ([1,2;3,4], 2), [2,1;4,3])
 %!assert (flipdim ([1,2;3,4], 3), [1,2;3,4])
 
-## FIXME -- we need tests for multidimensional arrays.
+## FIXME: We need tests for multidimensional arrays.
 
 %!error flipdim ()
 %!error flipdim (1, 2, 3)
 
diff --git a/scripts/general/prepad.m b/scripts/general/prepad.m
--- a/scripts/general/prepad.m
+++ b/scripts/general/prepad.m
@@ -92,17 +92,17 @@ endfunction
 %!assert (prepad ([1,2], 4, 2), [2,2,1,2])
 %!assert (prepad ([1;2], 4, 2), [2;2;1;2])
 
 %!assert (prepad ([1,2], 2, 2, 1), [2,2;1,2])
 
 %!assert (prepad ([1,2], 2, 2, 3), reshape ([2,2,1,2], 1, 2, 2))
 %!assert (prepad ([1;2], 2, 2, 3), reshape ([2;2;1;2], 2, 1, 2))
 
-## FIXME -- we need tests for multidimensional arrays.
+## FIXME: We need tests for multidimensional arrays.
 
 %!error prepad ()
 %!error prepad (1)
 %!error prepad (1,2,3,4,5)
 %!error <C must be empty or a scalar> prepad ([1,2], 2, ones (2))
 %!error <DIM must be an integer> prepad ([1,2], 2, 2, ones (3))
 %!error <DIM must be an integer> prepad ([1,2], 2, 2, 1.1)
 %!error <L must be a positive scalar> prepad ([1,2], ones (2))
diff --git a/scripts/general/rotdim.m b/scripts/general/rotdim.m
--- a/scripts/general/rotdim.m
+++ b/scripts/general/rotdim.m
@@ -147,14 +147,14 @@ endfunction
 %! m = [1,2;3,4];
 %!assert (rotdim (m, 0), m)
 %!assert (rotdim (m, 1), [2,4;1,3])
 %!assert (rotdim (m, 2), [4,3;2,1])
 %!assert (rotdim (m, 3), [3,1;4,2])
 %!assert (rotdim (m, 3), rotdim (m, -1))
 %!assert (rotdim (m, 1), rotdim (m))
 
-## FIXME -- we need tests for multidimensional arrays and different
-## values of PLANE.
+## FIXME: We need tests for multidimensional arrays
+##        and different values of PLANE.
 
 %!error rotdim ()
 %!error rotdim (1, 2, 3, 4)
 
diff --git a/scripts/help/doc.m b/scripts/help/doc.m
--- a/scripts/help/doc.m
+++ b/scripts/help/doc.m
@@ -37,17 +37,17 @@
 function retval = doc (fname)
 
   if (nargin == 0 || nargin == 1)
 
     ftype = 0;
 
     if (nargin == 1)
       ## Get the directory where the function lives.
-      ## FIXME -- maybe we should have a better way of doing this.
+      ## FIXME: Maybe we should have a better way of doing this?
 
       if (ischar (fname))
         ftype = exist (fname);
       else
         error ("doc: expecting argument to be a character string");
       endif
     else
       fname = "";
@@ -81,17 +81,17 @@ function retval = doc (fname)
         info_file_name = info_file ();
 
         if (! exist (info_file_name, "file")
             && ! exist ([info_file_name ".gz"], "file"))
           __gripe_missing_component__ ("doc", "info-file");
         endif
       endif
 
-      ## FIXME -- don't change the order of the arguments below because
+      ## FIXME: Don't change the order of the arguments below because
       ## the info-emacs-info script currently expects --directory DIR as
       ## the third and fourth arguments.  Someone should fix that.
 
       cmd = sprintf ("\"%s\" --file \"%s\" --directory \"%s\"",
                      info_program (), info_file_name, info_dir);
 
       have_fname = ! isempty (fname);
 
diff --git a/scripts/io/strread.m b/scripts/io/strread.m
--- a/scripts/io/strread.m
+++ b/scripts/io/strread.m
@@ -240,18 +240,18 @@ function varargout = strread (str, forma
             [comment_start, comment_end] = deal ("%" , "eol_char");
           otherwise
             if (ischar (varargin{n+1}) ||
                (numel (varargin{n+1}) == 1 && iscellstr (varargin{n+1})))
               [comment_start, comment_end] = deal (char (varargin{n+1}), "eol_char");
             elseif (iscellstr (varargin{n+1}) && numel (varargin{n+1}) == 2)
               [comment_start, comment_end] = deal (varargin{n+1}{:});
             else
-              ## FIXME - a user may have numeric values specified: {'//', 7}
-              ##         this will lead to an error in the warning message
+              ## FIXME: A user may have numeric values specified: {'//', 7}
+              ##        this will lead to an error in the warning message
               error ("strread: unknown or unrecognized comment style '%s'",
                       varargin{n+1});
             endif
         endswitch
       case "delimiter"
         delimiter_str = varargin{n+1};
         if (strcmp (typeinfo (delimiter_str), "sq_string"))
           delimiter_str = do_string_escapes (delimiter_str);
@@ -672,28 +672,28 @@ function varargout = strread (str, forma
         data = {};
       else
         lastline = ...
           min (num_words_per_line * format_repeat_count + m - 1, numel (words));
         data = words(m:num_words_per_line:lastline);
       endif
 
       ## Map to format
-      ## FIXME - add support for formats like "<%s>", "%[a-zA-Z]"
-      ##         Someone with regexp experience is needed.
+      ## FIXME: Add support for formats like "<%s>", "%[a-zA-Z]"
+      ##        Someone with regexp experience is needed.
       switch (fmt_words{m}(1:min (2, length (fmt_words{m}))))
         case "%s"
           if (pad_out)
             data(end+1:num_lines) = {""};
           endif
           varargout{k} = data';
           k++;
         case {"%d", "%u", "%f", "%n"}
           n = cellfun ("isempty", data);
-          ### FIXME - erroneously formatted data lead to NaN, not an error
+          ### FIXME: Erroneously formatted data lead to NaN, not an error
           data = str2double (data);
           if (! isempty (regexp (fmt_words{m}, "%[du]")))
             ## Cast to integer
             ## FIXME: NaNs will be transformed into zeros
             data = int32 (data);
           endif
           data(n) = numeric_fill_value;
           if (pad_out)
@@ -704,18 +704,18 @@ function varargout = strread (str, forma
         case {"%0", "%1", "%2", "%3", "%4", "%5", "%6", "%7", "%8", "%9"}
           sw = regexp (fmt_words{m}, '\d', "once");
           ew = regexp (fmt_words{m}, '[nfudsq]') - 1;
           nfmt = ostrsplit (fmt_words{m}(2:ew), ".");
           swidth = str2double (nfmt{1});
           switch (fmt_words{m}(ew+1))
             case {"d", "u", "f", "n"}
               n = cellfun ("isempty", data);
-              ### FIXME - erroneously formatted data lead to NaN, not an error
-              ###         => ReturnOnError can't be implemented for numeric data
+              ### FIXME: Erroneously formatted data lead to NaN, not an error
+              ###        => ReturnOnError can't be implemented for numeric data
               data = str2double (strtrunc (data, swidth));
               data(n) = numeric_fill_value;
               if (pad_out)
                 data(end+1:num_lines) = numeric_fill_value;
               endif
               if (numel (nfmt) > 1)
                 sprec = str2double (nfmt{2});
                 data = 10^-sprec * round (10^sprec * data);
diff --git a/scripts/io/textread.m b/scripts/io/textread.m
--- a/scripts/io/textread.m
+++ b/scripts/io/textread.m
@@ -130,17 +130,17 @@ function varargout = textread (filename,
     else
       eol_char = "\n";
     endif
     ## Set up default endofline param value
     varargin(end+1:end+2) = {"endofline", eol_char};
   endif
  
   ## Now that we know what EOL looks like, we can process format_repeat_count.
-  ## FIXME The below isn't ML-compatible: counts lines, not format string uses
+  ## FIXME: The below isn't ML-compatible: counts lines, not format string uses
   if (isfinite (nlines) && (nlines > 0))
     l_eol_char = length (eol_char);
     eoi = findstr (str, eol_char);
     n_eoi = length (eoi);
     nblks = 0;
     ## Avoid slow repeated str concatenation, first seek requested end of data
     while (n_eoi < nlines && count == BUFLENGTH)
       [nstr, count] = fscanf (fid, "%c", BUFLENGTH);
diff --git a/scripts/linear-algebra/krylov.m b/scripts/linear-algebra/krylov.m
--- a/scripts/linear-algebra/krylov.m
+++ b/scripts/linear-algebra/krylov.m
@@ -128,18 +128,18 @@ function [Uret, H, nu] = krylov (A, V, k
       q = V(:,jj);
       short_q = q(short_pv);
 
       if (norm (short_q) < eps1)
         ## Insignificant column; delete.
         nv = columns (V);
         if (jj != nv)
           [V(:,jj), V(:,nv)] = swap (V(:,jj), V(:,nv));
-          ## FIXME -- H columns should be swapped too.  Not done
-          ## since Block Hessenberg structure is lost anyway.
+          ## FIXME: H columns should be swapped too.
+          ##        Not done since Block Hessenberg structure is lost anyway.
         endif
         V = V(:,1:(nv-1));
         ## One less reflection.
         nu--;
       else
         ## New householder reflection.
         if (pflg)
           ## Locate max magnitude element in short_q.
@@ -162,17 +162,17 @@ function [Uret, H, nu] = krylov (A, V, k
 
         [hv, av, z] = housh (q(idx), 1, 0);
         alpha(nu) = av;
         U(idx,nu) = hv;
 
         ## Reduce V per the reflection.
         V(idx,:) = V(idx,:) - av*hv*(hv' * V(idx,:));
         if(iter > 1)
-          ## FIXME -- not done correctly for block case.
+          ## FIXME: not done correctly for block case.
           H(nu,nu-1) = V(pivot_vec(nu),jj);
         endif
 
         ## Advance to next column of V.
         jj++;
       endif
     endwhile
 
diff --git a/scripts/miscellaneous/colon.m b/scripts/miscellaneous/colon.m
--- a/scripts/miscellaneous/colon.m
+++ b/scripts/miscellaneous/colon.m
@@ -37,10 +37,10 @@ function r = colon (varargin)
   if (nargin != 0)
     error ('colon: not defined for class "%s"', class (varargin{1}));
   endif
 endfunction
 
 
 %!error colon (1)
 
-## FIXME -- what does colon () mean since it doesn't set a return value?
+## FIXME: What does colon () mean since it doesn't set a return value?
 
diff --git a/scripts/miscellaneous/dump_prefs.m b/scripts/miscellaneous/dump_prefs.m
--- a/scripts/miscellaneous/dump_prefs.m
+++ b/scripts/miscellaneous/dump_prefs.m
@@ -27,17 +27,17 @@
 ## Author: jwe
 
 function dump_prefs (file)
 
   if (nargin == 0)
     file = stdout;
   endif
 
-  ## FIXME -- it would be nice to be able to get the list of
+  ## FIXME: It would be nice to be able to get the list of
   ## built-in variables directly from Octave so that we wouldn't have to
   ## remember to update it each time the list of preference variables
   ## changes
 
   ## Note that these are no longer variables.
 
   sym_list = ["EDITOR";
               "EXEC_PATH";
diff --git a/scripts/miscellaneous/fileattrib.m b/scripts/miscellaneous/fileattrib.m
--- a/scripts/miscellaneous/fileattrib.m
+++ b/scripts/miscellaneous/fileattrib.m
@@ -103,17 +103,17 @@ function [status, msg, msgid] = fileattr
     for i = 1:nfiles
       [info, err, msg] = stat (files{i});
       if (! err)
         r_n{i} = canonicalize_file_name (files{i});
         r_a{i} = NaN;
         r_s{i} = NaN;
         r_h{i} = NaN;
         r_d{i} = S_ISDIR (info.mode);
-        ## FIXME -- maybe we should have S_IRUSR etc. masks?
+        ## FIXME: Maybe we should have S_IRUSR etc. masks?
         modestr = info.modestr;
         r_u_r{i} = modestr(2) == "r";
         r_u_w{i} = modestr(3) == "w";
         r_u_x{i} = modestr(4) == "x";
         r_g_r{i} = modestr(5) == "r";
         r_g_w{i} = modestr(6) == "w";
         r_g_x{i} = modestr(7) == "x";
         r_o_r{i} = modestr(8) == "r";
diff --git a/scripts/miscellaneous/getappdata.m b/scripts/miscellaneous/getappdata.m
--- a/scripts/miscellaneous/getappdata.m
+++ b/scripts/miscellaneous/getappdata.m
@@ -30,18 +30,18 @@
 ## @end deftypefn
 
 ## Author: Ben Abbott <bpabbott@mac.com>
 ## Created: 2010-07-15
 
 function val = getappdata (h, name)
 
   if (all (ishandle (h)) && nargin == 2 && ischar (name))
-    ## FIXME - Is there a better way to handle non-existent appdata
-    ## and missing fields?
+    ## FIXME: Is there a better way to handle non-existent appdata
+    ##        and missing fields?
     val = cell (numel (h), 1);
     appdata = struct ();
     for nh = 1:numel (h)
       try
         appdata = get (h(nh), "__appdata__");
       end_try_catch
       if (! isfield (appdata, name))
         appdata.(name) = [];
diff --git a/scripts/miscellaneous/private/__xzip__.m b/scripts/miscellaneous/private/__xzip__.m
--- a/scripts/miscellaneous/private/__xzip__.m
+++ b/scripts/miscellaneous/private/__xzip__.m
@@ -78,17 +78,17 @@ function entries = __xzip__ (commandname
         entries = cellfun(
             @(x) fullfile (outdir, sprintf ("%s.%s", x, extension)),
             f, "uniformoutput", false);
       endif
     else
       movefile (cellfun (@(x) sprintf ("%s.%s", x, extension), f,
                         "uniformoutput", false), cwd);
       if (nargout > 0)
-        ## FIXME this does not work when you try to compress directories
+        ## FIXME: This does not work when you try to compress directories
         entries  = cellfun (@(x) sprintf ("%s.%s", x, extension),
                             files, "uniformoutput", false);
       endif
     endif
 
   unwind_protect_cleanup
     cd (cwd);
     if (nargin == 4)
@@ -104,18 +104,17 @@ function [d, f] = myfileparts (files)
   f = cellfun (@(x, y) sprintf ("%s%s", x, y), f, ext,
                "uniformoutput", false);
   idx = cellfun ("isdir", files);
   d(idx) = "";
   f(idx) = files(idx);
 endfunction
 
 
-## FIXME -- reinstate these tests if we invent a way to test private
-## functions directly.
+## FIXME: Reinstate tests if we invent a way to test private functions directly.
 ##
 ## %!error <extension has to be a string with finite length>
 ## %!  __xzip__ ("gzip", "", "gzip -r %s", "bla");
 ## %!error <no files to move>
 ## %!  __xzip__ ("gzip", ".gz", "gzip -r %s", tmpnam);
 ## %!error <command failed with exit status>
 ## %!  # test __xzip__ with invalid compression command
 ## %!  unwind_protect
diff --git a/scripts/miscellaneous/unpack.m b/scripts/miscellaneous/unpack.m
--- a/scripts/miscellaneous/unpack.m
+++ b/scripts/miscellaneous/unpack.m
@@ -79,20 +79,20 @@ function filelist = unpack (file, dir = 
       if (strcmpi (tmpext, ".tar"))
         name = tmpname;
         ext = [tmpext ext];
       endif
     endif
 
     ## If the file is a URL, download it and then work with that file.
     if (! isempty (strfind (file, "://")))
-      ## FIXME -- the above is not a perfect test for a URL
+      ## FIXME: The above is not a perfect test for a URL
       urlfile = file;
-      ## FIXME -- should we name the file that we download with the
-      ## same file name as the URL requests?
+      ## FIXME: Should we name the file that we download with the
+      ##        same file name as the URL requests?
       tmpfile = [tmpnam() ext];
       [file, success, msg] = urlwrite (urlfile, tmpfile);
       if (! success)
         error ('unpack: could not get "%s": %s', urlfile, msg);
       endif
     endif
 
   endif
@@ -189,17 +189,17 @@ function filelist = unpack (file, dir = 
 
   if (status)
     error ("unpack: unarchiving program exited with status: %d\n%s",
            status, output);
   endif
 
   if (nargout > 0 || needmove)
     ## Trim the last CR if needed.
-    ## FIXME -- will this need to change to a check for "\r\n" for windows?
+    ## FIXME: Will this need to change to a check for "\r\n" for windows?
     if (output(end) == "\n")
       output(end) = [];
     endif
     files = parser (ostrsplit (output, "\n"))';
 
     ## Move files if necessary
     if (needmove)
       [st, msg, ~] = movefile (files, dir);
diff --git a/scripts/optimization/fsolve.m b/scripts/optimization/fsolve.m
--- a/scripts/optimization/fsolve.m
+++ b/scripts/optimization/fsolve.m
@@ -377,17 +377,17 @@ function [x, fvec, info, output, fjac] =
       ## can happen if you change something here...
 
       ## The rule of thumb (which I'm not sure M*b is quite following)
       ## is that for a tolerance that depends on scaling, only 0 makes
       ## sense as a default value. But 0 usually means uselessly long
       ## iterations, so we need scaling-independent tolerances wherever
       ## possible.
 
-      ## FIXME -- why tolf*n*xn? If abs (e) ~ abs(x) * eps is a vector
+      ## FIXME: Why tolf*n*xn? If abs (e) ~ abs(x) * eps is a vector
       ## of perturbations of x, then norm (fjac*e) <= eps*n*xn, i.e. by
       ## tolf ~ eps we demand as much accuracy as we can expect.
       if (fn <= tolf*n*xn)
         info = 1;
         ## The following tests done only after successful step.
       elseif (ratio >= 1e-4)
         ## This one is classic. Note that we use scaled variables again,
         ## but compare to scaled step, so nothing bad.
diff --git a/scripts/plot/appearance/axis.m b/scripts/plot/appearance/axis.m
--- a/scripts/plot/appearance/axis.m
+++ b/scripts/plot/appearance/axis.m
@@ -189,17 +189,17 @@ function limits = __axis__ (ca, ax, vara
       __axis__ (ca, "equal");
       set (ca, "plotboxaspectratiomode", "auto");
       __do_tight_option__ (ca);
     elseif (strcmpi (ax, "square"))
       set (ca, "dataaspectratiomode", "auto",
                "plotboxaspectratio", [1, 1, 1]);
     elseif (strcmp (ax, "equal"))
       if (strcmp (get (get (ca, "parent"), "__graphics_toolkit__"), "gnuplot"))
-        ## FIXME - gnuplot applies the aspect ratio activepostionproperty.
+        ## FIXME: gnuplot applies the aspect ratio activepostionproperty.
         set (ca, "activepositionproperty", "position");
         ## The following line is a trick used to trigger the recalculation of
         ## aspect related magnitudes even if the aspect ratio is the same
         ## (useful with the x11 gnuplot terminal after a window resize)
         set (ca, "dataaspectratiomode", "auto");
       endif
       set (ca, "dataaspectratio", [1, 1, 1], "plotboxaspectratio", [5 4 4]);
       
diff --git a/scripts/plot/draw/meshc.m b/scripts/plot/draw/meshc.m
--- a/scripts/plot/draw/meshc.m
+++ b/scripts/plot/draw/meshc.m
@@ -65,19 +65,19 @@ function h = meshc (varargin)
   if (! isempty (hax))
     oldfig = get (0, "currentfigure");
   endif
   unwind_protect
     hax = newplot (hax);
 
     htmp = surface (varargin{:});
 
-    ## FIXME - gnuplot does not support a filled surface and a
-    ## non-filled contour.  3D filled patches are also not supported.
-    ## Thus, the facecolor will be transparent for the gnuplot backend.
+    ## FIXME: gnuplot does not support a filled surface and a
+    ##        non-filled contour.  3D filled patches are also not supported.
+    ##        Thus, the facecolor will be transparent for the gnuplot backend.
     set (htmp, "facecolor", "w");
     set (htmp, "edgecolor", "flat");
     if (! ishold ())
       set (hax, "view", [-37.5, 30],
                 "xgrid", "on", "ygrid", "on", "zgrid", "on",
                 "xlimmode", "manual", "ylimmode", "manual");
     endif
 
diff --git a/scripts/plot/util/print.m b/scripts/plot/util/print.m
--- a/scripts/plot/util/print.m
+++ b/scripts/plot/util/print.m
@@ -614,17 +614,17 @@ endfunction
 
 function cmd = fig2dev (opts, devopt)
   if (nargin < 2)
     devopt =  opts.devopt;
   endif
   dos_shell = (ispc () && ! isunix ());
   if (! isempty (opts.fig2dev_binary))
     if (dos_shell)
-      ## FIXME - is this the right thing to do for DOS?
+      ## FIXME: Is this the right thing to do for DOS?
       cmd = sprintf ("%s -L %s 2> NUL", opts.fig2dev_binary, devopt);
     else
       cmd = sprintf ("%s -L %s 2> /dev/null", opts.fig2dev_binary, devopt);
     endif
   elseif (isempty (opts.fig2dev_binary))
     error ("print:nofig2dev", "print.m: 'fig2dev' not found in PATH");
   endif
   if (opts.debug)
@@ -712,17 +712,17 @@ function cmd = pstoedit (opts, devopt)
   if (nargin < 2)
     devopt =  opts.devopt;
   endif
   dos_shell = (ispc () && ! isunix ());
   if (! isempty (opts.pstoedit_binary))
     if (dos_shell)
       cmd = sprintf ("%s -f %s 2> NUL", opts.pstoedit_binary, devopt);
     else
-      ## FIXME - is this the right thing to do for DOS?
+      ## FIXME: Is this the right thing to do for DOS?
       cmd = sprintf ("%s -f %s 2> /dev/null", opts.pstoedit_binary, devopt);
     endif
   elseif (isempty (opts.pstoedit_binary))
     error ("print:nopstoedit", "print.m: 'pstoedit' not found in PATH");
   endif
   if (opts.debug)
     fprintf ("pstoedit command: '%s'\n", cmd);
   endif
diff --git a/scripts/plot/util/private/__ghostscript__.m b/scripts/plot/util/private/__ghostscript__.m
--- a/scripts/plot/util/private/__ghostscript__.m
+++ b/scripts/plot/util/private/__ghostscript__.m
@@ -138,19 +138,19 @@ function [gs_cmd, cleanup_cmd] = __ghost
     error ("print:no_ghostscript", "__ghostscript__.m: ghostscript is required.");
   elseif (isempty (opts.output))
     cmd = sprintf ("%s %s", opts.binary, gs_opts);
   else
     cmd = sprintf ("%s %s -sOutputFile=\"%s\"", opts.binary, gs_opts, opts.output);
   endif
   if (! isempty (opts.prepend)
       && any (strcmpi (opts.device, {"pswrite", "ps2write", "pdfwrite"})))
-    ## FIXME - Fonts get may be mangled when appending ps/ps2.
-    ##         See "How to concatenate several PS files" at the link,
-    ##         http://en.wikibooks.org/wiki/PostScript_FAQ
+    ## FIXME: Fonts get may be mangled when appending ps/ps2.
+    ##        See "How to concatenate several PS files" at the link,
+    ##        http://en.wikibooks.org/wiki/PostScript_FAQ
     cmd = sprintf ("%s %s", cmd, opts.prepend);
     if (isempty (cleanup_cmd))
       cleanup_cmd = sprintf ("rm %s", opts.prepend);
     else
       cleanup_cmd = sprintf ("%s ; rm %s", cleanup_cmd, opts.prepend);
     endif
   endif
   if (! isempty (offsetfile) && format_for_printer)
diff --git a/scripts/plot/util/private/__go_draw_axes__.m b/scripts/plot/util/private/__go_draw_axes__.m
--- a/scripts/plot/util/private/__go_draw_axes__.m
+++ b/scripts/plot/util/private/__go_draw_axes__.m
@@ -58,29 +58,29 @@ function __go_draw_axes__ (h, plot_strea
     ## All can't be "manual"
     axis_obj.plotboxaspectratiomode = "auto";
   endif
 
   if (strcmp (axis_obj.dataaspectratiomode, "manual")
       && strcmp (axis_obj.xlimmode, "manual")
       && strcmp (axis_obj.ylimmode, "manual")
       && (nd == 2 || all (mod (axis_obj.view, 90) == 0)))
-    ## FIXME - adjust plotboxaspectratio to respect other
+    ## FIXME: adjust plotboxaspectratio to respect other
     fpos = get (axis_obj.parent, "position");
     apos = axis_obj.position;
   endif
 
   pos = __actual_axis_position__ (h);
 
   if (strcmpi (axis_obj.dataaspectratiomode, "manual"))
     dr = axis_obj.dataaspectratio;
     if (nd == 2 || all (mod (axis_obj.view, 90) == 0))
       dr = dr(1) / dr(2);
     else
-      ## FIXME - need to properly implement 3D
+      ## FIXME: need to properly implement 3D
       dr = mean (dr(1:2)) / dr(3);
     endif
   else
     dr = 1;
   endif
 
   if (strcmp (axis_obj.activepositionproperty, "position"))
     if (__gnuplot_has_feature__ ("screen_coordinates_for_{lrtb}margin"))
@@ -101,17 +101,17 @@ function __go_draw_axes__ (h, plot_strea
       sz_str = "";
     else
       fprintf (plot_stream, "set tmargin 0;\n");
       fprintf (plot_stream, "set bmargin 0;\n");
       fprintf (plot_stream, "set lmargin 0;\n");
       fprintf (plot_stream, "set rmargin 0;\n");
 
       if (nd == 3 && all (axis_obj.view == [0, 90]))
-        ## FIXME -- Kludge to allow colorbar to be added to a pcolor() plot
+        ## FIXME: Kludge to allow colorbar to be added to a pcolor() plot
         pos(3:4) = pos(3:4) * 1.4;
         pos(1:2) = pos(1:2) - pos(3:4) * 0.125;
       endif
 
       fprintf (plot_stream, "set origin %.15g, %.15g;\n", pos(1), pos(2));
 
       if (strcmpi (axis_obj.dataaspectratiomode, "manual"))
         sz_str = sprintf ("set size ratio %.15g", -dr);
@@ -134,18 +134,18 @@ function __go_draw_axes__ (h, plot_strea
     endif
     sz_str = sprintf ("set size %s %g, %g;\n", sz_str, pos(3:4));
   endif
   if (! isempty (sz_str))
     fputs (plot_stream, sz_str);
   endif
 
   ## Reset all labels, axis-labels, tick-labels, and title
-  ## FIXME - We should have an function to initialize the axis.
-  ##         Presently, this is dispersed in this function.
+  ## FIXME: We should have an function to initialize the axis.
+  ##        Presently, this is dispersed in this function.
   fputs (plot_stream, "unset label;\n");
   fputs (plot_stream, "unset xtics;\n");
   fputs (plot_stream, "unset ytics;\n");
   fputs (plot_stream, "unset ztics;\n");
   fputs (plot_stream, "unset x2tics;\n");
   fputs (plot_stream, "unset x2tics;\n");
 
   if (! isempty (axis_obj.title))
@@ -318,19 +318,19 @@ function __go_draw_axes__ (h, plot_strea
 
   ## The grid front/back/layerdefault option also controls the
   ## appearance of tics, so it is used even if the grid is absent.
   if (strcmpi (axis_obj.layer, "top"))
     fputs (plot_stream, "set grid front;\n");
     fputs (plot_stream, "set border front;\n");
   else
     fputs (plot_stream, "set grid layerdefault;\n");
-    ## FIXME -- the gnuplot help says that "layerdefault" should work
-    ## for set border too, but it fails for me with gnuplot 4.2.5.  So
-    ## use "back" instead.
+    ## FIXME: The gnuplot help says that "layerdefault" should work
+    ##        for set border too, but it fails for me with gnuplot 4.2.5.
+    ##        So, use "back" instead.
     fputs (plot_stream, "set border back;\n");
   endif
 
   fprintf (plot_stream, "set grid linewidth %f, linewidth %f;\n",
            axis_obj.linewidth, axis_obj.linewidth);
 
   if (! have_grid)
     fputs (plot_stream, "unset grid;\n");
@@ -795,22 +795,21 @@ function __go_draw_axes__ (h, plot_strea
            titlespec{data_idx} = "title \"\"";
            usingclause{data_idx} = sprintf ("record=%d", numel (obj.xdata));
 
            if (isfield (obj, "markersize"))
              mdat = obj.markersize / 3;
            endif
 
            if (isfield (obj, "edgecolor"))
-             ## FIXME
-             ## This is the wrong thing to do as edgecolor, markeredgecolor
-             ## and markerfacecolor can have different values and we should
-             ## treat them seperately. However, the below allow the scatter
-             ## functions to work as expected, where only one of these values
-             ## is set
+             ## FIXME: This is the wrong thing to do as edgecolor,
+             ## markeredgecolor and markerfacecolor can have different values
+             ## and we should treat them seperately. However, the code below
+             ## allows the scatter functions to work as expected, where only
+             ## one of these values is set.
              if (strcmp (obj.edgecolor, "none"))
                if (strcmp (obj.markeredgecolor, "none"))
                  ec = obj.markerfacecolor;
                else
                  ec = obj.markeredgecolor;
                endif
              else
                ec = obj.edgecolor;
@@ -1964,45 +1963,45 @@ function [pt, pt2, obj] = gnuplot_pointt
         pt2 = "13";
       case "^"
         pt = "8";
         pt2 = "9";
       case "v"
         pt = "10";
         pt2 = "11";
       case ">"
-        ## FIXME: should be triangle pointing right, use triangle pointing up
+        ## FIXME: Should be triangle pointing right, use triangle pointing up
         pt = "8";
         pt2 = "9";
       case "<"
-        ## FIXME: should be triangle pointing left, use triangle pointing down
+        ## FIXME: Should be triangle pointing left, use triangle pointing down
         pt = "10";
         pt2 = "11";
       case {"pentagram", "p"}
-        ## FIXME: should be pentagram, using pentagon
+        ## FIXME: Should be pentagram, using pentagon
         pt = "14";
         pt2 = "15";
       case {"hexagram", "h"}
-        ## FIXME: should be 6 pt start, using "*" instead
+        ## FIXME: Should be 6 pt start, using "*" instead
         pt = pt2 = "3";
       case "none"
         pt = pt2 = "";
       otherwise
         pt = pt2 = "";
     endswitch
   else
     pt = pt2 = "";
   endif
 endfunction
 
 function __gnuplot_write_data__ (plot_stream, data, nd, parametric, cdata)
 
   ## DATA is already transposed.
 
-  ## FIXME -- this may need to be converted to C++ for speed.
+  ## FIXME: this may need to be converted to C++ for speed.
 
   ## Convert NA elements to normal NaN values because fprintf writes
   ## "NA" and that confuses gnuplot.
   idx = find (isna (data));
   if (any (idx))
     data(idx) = NaN;
   endif
 
@@ -2293,17 +2292,17 @@ function str = __tex2enhanced__ (str, fn
   for i = length (s) : -1 : 1
     ## special case for "\0"  and replace with "{/Symbol \306}'
     if (strncmp (m{i}, '\0', 2))
       str = [str(1:s(i) - 1) '{/Symbol \306}' str(s(i) + 2:end)];
     else
       f = m{i}(2:end);
       if (isfield (sym, f))
         g = getfield (sym, f);
-        ## FIXME The symbol font doesn't seem to support bold or italic
+        ## FIXME: The symbol font doesn't seem to support bold or italic
         ##if (bld)
         ##  if (it)
         ##    g = regexprep (g, '/Symbol', '/Symbol-bolditalic');
         ##  else
         ##    g = regexprep (g, '/Symbol', '/Symbol-bold');
         ##  endif
         ##elseif (it)
         ##  g = regexprep (g, '/Symbol', '/Symbol-italic');
@@ -2323,17 +2322,17 @@ function str = __tex2enhanced__ (str, fn
       elseif (strncmp (f, "bf", 2))
         bld = true;
         if (it)
           str = [str(1:s(i) - 1) '/' fnt '-bolditalic ' str(s(i) + 3:end)];
         else
           str = [str(1:s(i) - 1) '/' fnt '-bold ' str(s(i) + 3:end)];
         endif
       elseif (strcmpi (f, "color"))
-        ## FIXME Ignore \color but remove trailing {} block as well
+        ## FIXME: Ignore \color but remove trailing {} block as well
         d = strfind (str(e(i) + 1:end),'}');
         if (isempty (d))
           warning ('syntax error in \color argument');
         else
           str = [str(1:s(i) - 1) str(e(i) + d + 1:end)];
         endif
       elseif (strcmpi (f, "fontname"))
         b1 = strfind (str(e(i) + 1:end),'{');
@@ -2354,17 +2353,17 @@ function str = __tex2enhanced__ (str, fn
                  '{}', str(e(i) + b2(1) + 1:end)];
         endif
       else
         ## Last desperate attempt to treat the symbol. Look for things
         ## like \pix, that should be translated to the symbol Pi and x
         for j = 1 : length (flds)
           if (strncmp (flds{j}, f, length (flds{j})))
             g = getfield (sym, flds{j});
-            ## FIXME The symbol font doesn't seem to support bold or italic
+            ## FIXME: The symbol font doesn't seem to support bold or italic
             ##if (bld)
             ##  if (it)
             ##    g = regexprep (g, '/Symbol', '/Symbol-bolditalic');
             ##  else
             ##    g = regexprep (g, '/Symbol', '/Symbol-bold');
             ##  endif
             ##elseif (it)
             ##  g = regexprep (g, '/Symbol', '/Symbol-italic');
@@ -2378,17 +2377,17 @@ function str = __tex2enhanced__ (str, fn
   endfor
 
   ## Prepend @ to things  things like _0^x or _{-100}^{100} for
   ## alignment But need to put the shorter of the two arguments first.
   ## Carful of nested {} and unprinted characters when defining
   ## shortest.. Don't have to worry about things like ^\theta as they
   ## are already converted to ^{/Symbol q}.
 
-  ## FIXME -- This is a mess... Is it worth it just for a "@" character?
+  ## FIXME: This is a mess... Is it worth it just for a "@" character?
 
   [s, m] = regexp (str,'[_\^]','start','matches');
   i = 1;
   p = 0;
   while (i < length (s))
     if (i < length (s))
       if (str(s(i) + p + 1) == "{")
         s1 = strfind (str(s(i) + p + 2:end),'{');
diff --git a/scripts/plot/util/private/__print_parse_opts__.m b/scripts/plot/util/private/__print_parse_opts__.m
--- a/scripts/plot/util/private/__print_parse_opts__.m
+++ b/scripts/plot/util/private/__print_parse_opts__.m
@@ -293,17 +293,17 @@ function arg_st = __print_parse_opts__ (
     arg_st.formatted_for_printing = true;
   endif
 
   aliases = gs_aliases ();
   if (any (strcmp (arg_st.devopt, fieldnames (aliases))))
     arg_st.devopt = aliases.(arg_st.devopt);
   endif
 
-  ## FIXME - eps2 & epsc2 needs to be handled
+  ## FIXME: eps2 & epsc2 needs to be handled
   if (strcmp (arg_st.devopt, "pswrite"))
     arg_st.ghostscript.level = 1;
   elseif (strcmp (arg_st.devopt, "ps2write"))
     arg_st.ghostscript.level = 2;
   endif
 
   if ((any (strcmp (arg_st.devopt, gs_device_list))
        && ! arg_st.formatted_for_printing)
@@ -575,18 +575,18 @@ function [papersize, paperposition] = gs
   endif
 
   if (strcmp (paperunits, "normalized"))
     paperposition = paperposition .* papersize([1,2,1,2]);
   else
     paperposition = convert2points (paperposition, paperunits);
   endif
 
-  ## FIXME - This will be obsoleted by listeners for paper properties.
-  ##         Papersize is tall when portrait,and wide when landscape.
+  ## FIXME: This will be obsoleted by listeners for paper properties.
+  ##        Papersize is tall when portrait,and wide when landscape.
   if ((papersize(1) > papersize(2) && strcmpi (paperorientation, "portrait"))
       || (papersize(1) < papersize(2) && strcmpi (paperorientation, "landscape")))
     papersize = papersize([2,1]);
     paperposition = paperposition([2,1,4,3]);
   endif
 
   if ((! strcmp (papertype, "<custom>")) && (strcmp (paperorientation, "portrait")))
     ## For portrait use the ghostscript name
diff --git a/scripts/plot/util/struct2hdl.m b/scripts/plot/util/struct2hdl.m
--- a/scripts/plot/util/struct2hdl.m
+++ b/scripts/plot/util/struct2hdl.m
@@ -446,17 +446,17 @@ function [h, sout, pout] = createhg_hile
                                "xldata", "ldata", ...
                                "xudata", "udata", ...
                                "xldatasource", "ldatasource", ...
                                "xudatasource", "udatasource", ...
                                "format"});
 
   elseif (isfield (fields, "bargroup"))
     ## bar plot
-    ## FIXME - here we don't have access to brothers so we first create all
+    ## FIXME: Here we don't have access to brothers so we first create all
     ## the barseries of the bargroup (but the last), then retrieve information,
     ## and rebuild the whole bargroup.
     ## The duplicate are deleted after calling "setprops"
 
     bargroup = s.properties.bargroup;
     oldh = s.handle;
 
     temp = ismember ([p(1:2:end) oldh], bargroup);
diff --git a/scripts/set/unique.m b/scripts/set/unique.m
--- a/scripts/set/unique.m
+++ b/scripts/set/unique.m
@@ -71,17 +71,17 @@ function [y, i, j] = unique (x, varargin
       warning ('unique: "rows" is ignored for cell arrays');
       optrows = false;
     endif
   else
     optfirst = false;
     optrows = false;
   endif
 
-  ## FIXME -- the operations
+  ## FIXME: The operations
   ##
   ##   match = (y(1:n-1) == y(2:n));
   ##   y(idx) = [];
   ##
   ## are very slow on sparse matrices.  Until they are fixed to be as
   ## fast as for full matrices, operate on the nonzero elements of the
   ## sparse array as long as we are not operating on rows.
 
diff --git a/scripts/sparse/spstats.m b/scripts/sparse/spstats.m
--- a/scripts/sparse/spstats.m
+++ b/scripts/sparse/spstats.m
@@ -45,17 +45,17 @@ function [count, mean, var] = spstats (S
   endif
   [n, m] = size (S);
 
   count = sum (sparse (i, j, 1, n, m));
   if (nargout > 1)
     mean = sum (S) ./ count;
   endif
   if (nargout > 2)
-    ## FIXME Variance with count = 0 or 1?
+    ## FIXME: Variance with count = 0 or 1?
     diff = S - sparse (i, j, mean (j), n, m);
     var = sum (diff .* diff) ./ (count - 1);
   endif
 
 endfunction
 
 
 %!test
diff --git a/scripts/sparse/treeplot.m b/scripts/sparse/treeplot.m
--- a/scripts/sparse/treeplot.m
+++ b/scripts/sparse/treeplot.m
@@ -151,19 +151,19 @@ function treeplot (tree, node_style = "k
       x_coordinate_l(par_number) = left_most + 1;
     endif
   endwhile
 
   ## Calculate the x coordinates (the known values are the position
   ## of most left and most right descendants).
   x_coordinate = (x_coordinate_l + x_coordinate_r) / 2;
 
-  ## FIXME -- we should probably stuff all the arguments into a cell
-  ## array and make a single call to plot here so we can avoid
-  ## setting the hold state...
+  ## FIXME: We should probably stuff all the arguments into a cell
+  ##        array and make a single call to plot here so we can avoid
+  ##        setting the hold state...
 
   hold_is_on = ishold ();
   unwind_protect
     ## Plot graph nodes.
     plot (x_coordinate, y_coordinate, node_style);
 
     ## Helping command - usable for plotting edges
     skelet = [skelet; 0];
diff --git a/scripts/testfun/test.m b/scripts/testfun/test.m
--- a/scripts/testfun/test.m
+++ b/scripts/testfun/test.m
@@ -715,17 +715,17 @@ endfunction
 %!fail ('toeplitz ([1,2],[1,2;3,4])', msg2);
 %!fail ('toeplitz ([1,2;3,4],[1,2])', msg2);
 % !fail ('toeplitz','usage: toeplitz'); # usage doesn't generate an error
 % !fail ('toeplitz (1, 2, 3)', 'usage: toeplitz');
 %!test  assert (toeplitz ([1,2,3], [1,4]), [1,4; 2,1; 3,2]);
 %!demo  toeplitz ([1,2,3,4],[1,5,6])
 
 ### example from kron
-%!#error kron  # FIXME suppress these until we can handle output
+%!#error kron  # FIXME: suppress these until we can handle output
 %!#error kron(1,2,3)
 %!test assert (isempty (kron ([], rand (3, 4))))
 %!test assert (isempty (kron (rand (3, 4), [])))
 %!test assert (isempty (kron ([], [])))
 %!shared A, B
 %!test
 %! A = [1, 2, 3; 4, 5, 6];
 %! B = [1, -1; 2, -2];
diff --git a/scripts/time/datestr.m b/scripts/time/datestr.m
--- a/scripts/time/datestr.m
+++ b/scripts/time/datestr.m
@@ -262,17 +262,17 @@ function retval = datestr (date, f = [],
     tm.mon = vi(2) - 1;
     tm.mday = vi(3);
     tm.hour = vi(4);
     tm.min = vi(5);
     sec = vi(6);
     tm.sec = fix (sec);
     tm.usec = fix ((sec - tm.sec) * 1e6);
     tm.wday = wday - 1;
-    ## FIXME -- Do we need YDAY and DST?  How should they be computed?
+    ## FIXME: Do we need YDAY and DST?  How should they be computed?
     ## We don't want to use "localtime (mktime (tm))" because that
     ## doesn't correctly handle dates before 1970-01-01 on some systems.
     ## tm.yday = ?;
     ## tm.isdst = ?;
 
     str = strftime (df, tm);
 
     retval = [retval; str];
