# HG changeset patch
# User Philip Nienhuis <prnienhuis@users.sf.net>
# Date 1350854311 -7200
#      Sun Oct 21 23:18:31 2012 +0200
# Node ID e21b21c2a20d15263cf705466220399acb69ddde
# Parent  1f90fc84065a9c3b2a87b2add59b61161a3795dd
importdata.m: properly fall back to unimplemented.m & allow spreadheet I/O

diff --git a/scripts/io/importdata.m b/scripts/io/importdata.m
--- a/scripts/io/importdata.m
+++ b/scripts/io/importdata.m
@@ -45,16 +45,18 @@
 ##
 ## Importing ascii table using the specified number of header rows and
 ## the specified delimiter.
 ##
 ## @item Image file
 ##
 ## @item @sc{Matlab} file
 ##
+## @item Spreadsheet files (depending on external software)
+##
 ## @item Wav file
 ##
 ## @end itemize
 ##
 ## @seealso{textscan, dlmread, csvread, load}
 ## @end deftypefn
 
 ## Author: Erik Kjellson <erikiiofph7@users.sourceforge.net>
@@ -130,23 +132,27 @@ function [output, delimiter, header_rows
           ".tif", ".tiff", ".xwd"}
       delimiter  = NaN;
       header_rows = 0;
       [output.cdata, output.colormap, output.alpha] = imread (fname);
     case ".mat"
       delimiter  = NaN;
       header_rows = 0;
       output = load (fname);
-    case ".wk1"
-      error (sprintf ("importdata: not implemented for file format %s", 
-                      fileExt));
-    case {".xls", ".xlsx"}
-      ## FIXME: implement Excel import.
-      error (sprintf ("importdata: not implemented for file format %s", 
-                      fileExt));
+    case {".wk1", ".xls", ".xlsx", ".dbf", ".pxl"}
+      ## If there's no Excel file support simply fall back to unimplemented.m
+      output = xlsread (fname);
+    case {".ods", ".sxc", ".fods", ".uos", ".xml"}
+      ## unimplemented.m only knows ML functions; odsread isn't one but is in OF
+      try
+        output = odsread (fname);
+      catch
+        ## Fall back to unimplemented.m.
+        output = xlsread (fname);
+      end_try_catch
     case {".wav", ".wave"}
       delimiter  = NaN;
       header_rows = 0;
       [output.data, output.fs] = wavread (fname);
     otherwise
       ## Assume the file is in ascii format.
       [output, delimiter, header_rows]  = \
           importdata_ascii (fname, delimiter, header_rows);
@@ -261,17 +267,17 @@ function [output, delimiter, header_rows
 
 
   ## Go through the data and put it in either output.data or
   ## output.textdata depending on if it is numeric or not.
   output.data = NaN (length (file_content_rows) - header_rows, data_columns);
   for i=(header_rows+1):length(file_content_rows)
     ## Only use the row if it contains anything other than white-space
     ## characters.
-    if (length (regexp (file_content_rows{i}, "\S","match")) > 0)
+    if (length (regexp (file_content_rows{i}, "\\S","match")) > 0)
       row_data = regexp (file_content_rows{i}, delimiter_pattern, "split");
 
       for j=1:length(row_data)
         ## Try to convert the column to a number, if it works put it in
         ## output.data, otherwise in output.textdata
         if (length(str2num(row_data{j})) > 0)
           output.data ((i-header_rows), j) = str2num (row_data{j});
         else
