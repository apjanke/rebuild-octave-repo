# HG changeset patch
# User jwe
# Date 1067368423 0
#      Tue Oct 28 19:13:43 2003 +0000
# Node ID 802818bfac91e9f23e606bd523180f34399e3588
# Parent  239df9c618ef94f7aeb654e1c5f2b8b0c8ccab7c
[project @ 2003-10-28 19:13:43 by jwe]

diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -229,16 +229,17 @@ public:
       return *this;
     }
 
   void fill (const T& val) { make_unique (val); }
 
   int capacity (void) const { return rep->length (); }
   int length (void) const { return capacity (); }
   int nelem (void) const { return capacity (); }
+  int numel (void) const { return nelem (); }
 
   int dim1 (void) const { return dimensions(0); }
   int dim2 (void) const { return dimensions(1); }
   int dim3 (void) const { return dimensions(2); }
 
   int rows (void) const { return dim1 (); }
   int cols (void) const { return dim2 (); }
   int columns (void) const { return dim2 (); }
@@ -436,16 +437,18 @@ public:
     { resize_and_fill (dims, val); }
 
   Array<T>& insert (const Array<T>& a, int r, int c);
 
   Array<T>& insert (const Array<T>& a, const Array<int>& dims);
 
   bool is_square (void) const { return (dim1 () == dim2 ()); }
 
+  bool is_empty (void) const { return numel () == 0; }
+
   Array<T> transpose (void) const;
 
   const T *data (void) const { return rep->data; }
 
   const T *fortran_vec (void) const { return data (); }
 
   T *fortran_vec (void);
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,15 @@
+2003-10-28  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* dim-vector.h (dim_vector::any_zero): New function.
+	(dim_vector::str): New default arg, sep.
+
+	* Array.h (Array<T>::numel): New function.
+
 2003-10-27  Petter Risholm  <risholm@stud.ntnu.no>
 
 	* mx-inlines.cc (MX_ND_ALL_EXPR, MX_ND_ANY_EXPR,
 	MX_ND_ALL_EVAL, MX_ND_ANY_EVAL, MX_ND_ALL_ANY): New macros.
 	* dNDArray.h (NDArray::all, NDArray::any): Return type now boolNDArray.
 	* CNDArray.h (ComplexNDArray::all, ComplexNDArray::any): Likewise.
 	* boolNDArray.h (boolNDArray::all, boolNDArray::any): Likewise.
 	* chNDArray.h (charNDArray::all, charNDArray::any): Likewise.
diff --git a/liboctave/dim-vector.h b/liboctave/dim-vector.h
--- a/liboctave/dim-vector.h
+++ b/liboctave/dim-vector.h
@@ -194,26 +194,26 @@ public:
 	rep = new dim_vector_rep (n, old_rep);
 
 	if (--old_rep->count <= 0)
 	  delete old_rep;
       }
   }
 
 
-  std::string str (void) const
+  std::string str (char sep = 'x') const
   {
     OSSTREAM buf;
 
     for (int i = 0; i < length (); i++)
       {
 	buf << elem (i);
 
 	if (i < length () - 1)
-	  buf << "x";
+	  buf << sep;
       }
 
     buf << OSSTREAM_ENDS;
 
     std::string retval = OSSTREAM_STR (buf);
 
     OSSTREAM_FREEZE (buf);
 
@@ -230,16 +230,32 @@ public:
 	  {
 	    retval = false;
 	    break;
 	  }
       }
 
     return retval;
   }
+
+  bool any_zero (void) const
+  {
+    bool retval = false;
+
+    for (int i = 0; i < length (); i++)
+      {
+	if (elem (i) == 0)
+	  {
+	    retval = true;
+	    break;
+	  }
+      }
+
+    return retval;
+  }
 };
 
 static inline bool
 operator == (const dim_vector& a, const dim_vector& b)
 {
   bool retval = true;
 
   int a_len = a.length ();
@@ -270,9 +286,8 @@ operator != (const dim_vector& a, const 
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
-
diff --git a/liboctave/mx-inlines.cc b/liboctave/mx-inlines.cc
--- a/liboctave/mx-inlines.cc
+++ b/liboctave/mx-inlines.cc
@@ -379,22 +379,23 @@ OP_DUP_FCN (conj, mx_inline_conj_dup, Co
    } 
 
 #define MX_ND_ALL_ANY(EVAL_EXPR) \
  \
   boolNDArray retval; \
  \
   dim_vector dv = dims (); \
  /* Check to see if we have a empty matrix: [] */ \
-  if (dv.length () == 2 && dv (0) == 0 && dv (1) == 0) \
-    { \
-      dim_vector dv_temp (1,1); \
-      retval.resize (dv_temp,false); \
-      return retval; \
-    } \
+  for (int i = 0; i < dv.length (); i++)\
+    if (dv (i) == 0) \
+      { \
+        dim_vector dv_temp (1, 1); \
+        retval.resize (dv_temp, false); \
+        return retval; \
+      } \
   if (dim == -1)/* We need to find first non-singleton dim */ \
     { \
       /* Be sure to return a scalar if we have a vector */ \
       if (dv.length () == 2 && dv (0) == 1 && dv (1) >= 1) \
         dim = 1; \
       else \
         for (int i = 0; i < dv.length (); i++) \
 	  { \
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2003-10-28  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* general/numel.m: Delete.
+
 2003-10-15  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* miscellaneous/horzcat.m, miscellaneous/vartcat.m: New files.
 
 	* deprecated/isstr.m: New file.
 
 2003-10-04  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,23 @@
+2003-10-28  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* pr-output.cc 	(print_empty_nd_array): New static function.
+	(PRINT_ND_ARRAY): Use it.
+
+	* ov.h (octave_value::is_empty): No longer virtual.  Return value
+	based on numel.
+	* data.cc (Fisempty): Use it.
+	(Fnumel): New function.
+
+	* ov.h (octave_value::numel): New function.
+	* ov-base.h (octave_base_value::numel): Likewise.
+	* ov-base-mat.h (octave_base_matrix<T>::numel): Likewise.
+	* ov-base-scalar.h  (octave_base_scalar<T>::numel): Likewise.
+
 2003-10-27  Petter Risholm  <risholm@stud.ntnu.no>
 
 	* ov-base-mat.cc (octave_base_matrix<MT>::is_true):
 	Only work for 2-dimensional objects.
 	* data.cc (ANY_ALL (FCN)): Allow dim to take values large than 2.
 
 	* ov.h (octave_value::ndims): New function.
 	* ov-base.h (octave_base_value::ndims): Likewise.
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -706,16 +706,42 @@ Trailing singleton dimensions are not co
 	retval = n_dims;
     }
   else
     print_usage ("ndims");
 
   return retval;
 }
 
+DEFUN (numel, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} numel (@var{a})\n\
+Returns the number of elements in the object @var{a}.\n\
+@end deftypefn")
+{
+  octave_value retval;
+
+  if (args.length () == 1)
+    {
+      int numel = args(0).numel ();
+
+      if (! error_state)
+	{
+	  if (numel < 0)
+	    numel = 0;
+
+	  retval = numel;
+	}
+    }
+  else
+    print_usage ("numel");
+
+  return retval;
+}
+
 DEFUN (size, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} size (@var{a}, @var{n})\n\
 Return the number rows and columns of @var{a}.\n\
 \n\
 With one input argument and one output argument, the result is returned\n\
 in a 2 element row vector.  If there are two output arguments, the\n\
 number of rows is assigned to the first, and the number of columns to\n\
@@ -872,24 +898,17 @@ DEFUN (isempty, args, ,
 @deftypefn {Built-in Function} {} isempty (@var{a})\n\
 Return 1 if @var{a} is an empty matrix (either the number of rows, or\n\
 the number of columns, or both are zero).  Otherwise, return 0.\n\
 @end deftypefn")
 {
   octave_value retval = false;
 
   if (args.length () == 1)
-    {
-      octave_value arg = args(0);
-
-      if (arg.is_matrix_type ())
-	retval = (arg.rows () == 0 || arg.columns () == 0);
-      else if (arg.is_list () || arg.is_string ())
-	retval = (arg.length () == 0);
-    }
+    retval = args(0).is_empty ();
   else
     print_usage ("isempty");
 
   return retval;
 }
 
 DEFUN (isnumeric, args, ,
   "-*- texinfo -*-\n\
diff --git a/src/ov-base-mat.cc b/src/ov-base-mat.cc
--- a/src/ov-base-mat.cc
+++ b/src/ov-base-mat.cc
@@ -210,26 +210,28 @@ octave_base_matrix<MT>::length (void) co
 template <class MT>
 int
 octave_base_matrix<MT>::ndims (void) const
 {
   dim_vector dv = dims ();
 
   int n_dims = dv.length ();
      
-   // Remove trailing singleton dimensions
+   // Remove trailing singleton dimensions.
+
    for (int i = n_dims; i > 2; i--)
      {
        if (dv(i-1) == 1)
 	 n_dims--;
        else
 	 break;
      }
    
-   // The result is always >= 2
+   // The result is always >= 2.
+
    if (n_dims < 2)
      n_dims = 2;
 
    return n_dims;
 }
 
 template <class MT>
 bool
diff --git a/src/ov-base-mat.h b/src/ov-base-mat.h
--- a/src/ov-base-mat.h
+++ b/src/ov-base-mat.h
@@ -94,18 +94,21 @@ public:
   int columns (void) const { return matrix.columns (); }
 
   dim_vector dims (void) const { return matrix.dims (); }
 
   octave_value all (int dim = 0) const { return matrix.all (dim); }
   octave_value any (int dim = 0) const { return matrix.any (dim); }
 
   int length (void) const;
+
   int ndims (void) const;
 
+  int numel (void) const { return matrix.numel (); }
+
   bool is_matrix_type (void) const { return true; }
 
   bool is_numeric_type (void) const { return true; }
 
   bool is_defined (void) const { return true; }
 
   bool is_constant (void) const { return true; }
 
diff --git a/src/ov-base-scalar.h b/src/ov-base-scalar.h
--- a/src/ov-base-scalar.h
+++ b/src/ov-base-scalar.h
@@ -77,16 +77,18 @@ public:
   int rows (void) const { return 1; }
 
   int columns (void) const { return 1; }
 
   int length (void) const { return 1; }
 
   int ndims (void) const { return 2; }
 
+  int numel (void) const { return 1; }
+
   bool is_constant (void) const { return true; }
 
   bool is_defined (void) const { return true; }
 
   octave_value all (int = 0) const { return (scalar != 0.0); }
 
   octave_value any (int = 0) const { return (scalar != 0.0); }
 
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -99,16 +99,18 @@ public:
   int columns (void) const { return -1; }
 
   dim_vector dims (void) const { return dim_vector (rows (), columns ()); }
 
   int length (void) const { return -1; }
 
   int ndims (void) const { return -1; }
 
+  int numel (void) const { return -1; }
+
   bool is_defined (void) const { return false; }
 
   bool is_cell (void) const { return false; }
 
   bool is_real_scalar (void) const { return false; }
 
   bool is_real_matrix (void) const { return false; }
 
@@ -155,19 +157,16 @@ public:
   bool is_numeric_type (void) const { return false; }
 
   bool valid_as_scalar_index (void) const { return false; }
 
   bool valid_as_zero_index (void) const { return false; }
 
   bool is_true (void) const { return false; }
 
-  bool is_empty (void) const
-    { return (rows () == 0 || columns () == 0); }
-
   bool is_zero_by_zero (void) const
     { return (rows () == 0 && columns () == 0); }
 
   bool is_constant (void) const { return false; }
 
   bool is_function (void) const { return false; }
 
   bool is_builtin_function (void) const { return false; }
diff --git a/src/ov-list.h b/src/ov-list.h
--- a/src/ov-list.h
+++ b/src/ov-list.h
@@ -82,16 +82,18 @@ public:
   octave_value subsasgn (const std::string& type,
 			 const std::list<octave_value_list>& idx,
 			 const octave_value& rhs);
 
   void assign (const octave_value_list& idx, const octave_value& rhs);
 
   int length (void) const { return lst.length (); }
 
+  int nelem (void) const { return length (); }
+
   bool is_defined (void) const { return true; }
 
   bool is_constant (void) const { return true; }
 
   bool is_list (void) const { return true; }
 
   octave_value_list list_value (void) const { return lst; }
 
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -326,26 +326,32 @@ public:
     { return rep->dims (); }
 
   virtual int length (void) const
     { return rep->length (); }
 
   virtual int ndims (void) const
     { return rep->ndims (); }
 
+  virtual int numel (void) const
+    { return rep->numel (); }
+
   // Does this constant have a type?  Both of these are provided since
   // it is sometimes more natural to write is_undefined() instead of
   // ! is_defined().
 
   virtual bool is_defined (void) const
     { return rep->is_defined (); }
 
   bool is_undefined (void) const
     { return ! is_defined (); }
 
+  bool is_empty (void) const
+    { return numel () == 0; }
+
   virtual bool is_cell (void) const
     { return rep->is_cell (); }
 
   virtual bool is_real_scalar (void) const
     { return rep->is_real_scalar (); }
 
   virtual bool is_real_matrix (void) const
     { return rep->is_real_matrix (); }
@@ -420,21 +426,16 @@ public:
   virtual bool valid_as_zero_index (void) const
     { return rep->valid_as_zero_index (); }
 
   // Does this constant correspond to a truth value?
 
   virtual bool is_true (void) const
     { return rep->is_true (); }
 
-  // Is at least one of the dimensions of this constant zero?
-
-  virtual bool is_empty (void) const
-    { return rep->is_empty (); }
-
   // Are the dimensions of this constant zero by zero?
 
   virtual bool is_zero_by_zero (void) const
     { return rep->is_zero_by_zero (); }
 
   virtual bool is_constant (void) const
     { return rep->is_constant (); }
 
diff --git a/src/pr-output.cc b/src/pr-output.cc
--- a/src/pr-output.cc
+++ b/src/pr-output.cc
@@ -1268,22 +1268,40 @@ print_empty_matrix (std::ostream& os, in
       if (nr == 0 && nc == 0)
 	os << "[]";
       else
 	os << "zeros (" << nr << ", " << nc << ")";
     }
   else
     {
       os << "[]";
+
       if (Vprint_empty_dimensions)
 	os << "(" << nr << "x" << nc << ")";
     }
 }
 
 static void
+print_empty_nd_array (std::ostream& os, const dim_vector& dims,
+		      bool pr_as_read_syntax)
+{
+  assert (dims.any_zero ());
+
+  if (pr_as_read_syntax)
+    os << "zeros (" << dims.str (',') << ")";
+  else
+    {
+      os << "[]";
+
+      if (Vprint_empty_dimensions)
+	os << "(" << dims.str () << ")";
+    }
+}
+
+static void
 pr_scale_header (std::ostream& os, double scale)
 {
   if (Vfixed_point_format && ! print_g && scale != 1.0)
     {
       os << "  "
 	 << std::setw (8) << std::setprecision (1)
 	 << std::setiosflags (std::ios::scientific|std::ios::left)
 	 << scale
@@ -1483,73 +1501,79 @@ octave_print_internal (std::ostream& os,
 	    }
 	}
     }
 }
 
 #define PRINT_ND_ARRAY(os, nda, NDA_T, ELT_T, MAT_T) \
   do \
     { \
-      int ndims = nda.ndims (); \
- \
-      dim_vector dims = nda.dims (); \
- \
-      Array<int> ra_idx (ndims, 0); \
+      if (nda.is_empty ()) \
+        print_empty_nd_array (os, nda.dims (), pr_as_read_syntax); \
+      else \
+        { \
  \
-      int m = 1; \
+          int ndims = nda.ndims (); \
+ \
+          dim_vector dims = nda.dims (); \
  \
-      for (int i = 2; i < ndims; i++) \
-	m *= dims(i); \
+          Array<int> ra_idx (ndims, 0); \
  \
-      int nr = dims(0); \
-      int nc = dims(1); \
+          int m = 1; \
  \
-      for (int i = 0; i < m; i++) \
-	{ \
-	  std::string nm = "ans"; \
+          for (int i = 2; i < ndims; i++) \
+            m *= dims(i); \
+ \
+          int nr = dims(0); \
+          int nc = dims(1); \
  \
-	  if (m > 1) \
-	    { \
-	      nm += "(:,:,"; \
+          for (int i = 0; i < m; i++) \
+            { \
+              std::string nm = "ans"; \
  \
-	      OSSTREAM buf; \
+              if (m > 1) \
+                { \
+                  nm += "(:,:,"; \
  \
-	      for (int k = 2; k < ndims; k++) \
-		{ \
-		  buf << ra_idx(k) + 1; \
+                  OSSTREAM buf; \
  \
-		  if (k < ndims - 1) \
-		    buf << ","; \
-		  else \
-		    buf << ")"; \
-		} \
+                  for (int k = 2; k < ndims; k++) \
+                    { \
+                      buf << ra_idx(k) + 1; \
  \
-	      buf << OSSTREAM_ENDS; \
- \
-	      nm += OSSTREAM_STR (buf); \
+                      if (k < ndims - 1) \
+                        buf << ","; \
+                      else \
+                        buf << ")"; \
+                    } \
  \
-	      OSSTREAM_FREEZE (buf); \
-	    } \
+                  buf << OSSTREAM_ENDS; \
  \
-	  Array<idx_vector> idx (ndims); \
+                  nm += OSSTREAM_STR (buf); \
+ \
+                  OSSTREAM_FREEZE (buf); \
+                } \
  \
-	  idx(0) = idx_vector (':'); \
-	  idx(1) = idx_vector (':'); \
+              Array<idx_vector> idx (ndims); \
  \
-	  for (int k = 2; k < ndims; k++) \
-	    idx(k) = idx_vector (ra_idx(k) + 1); \
+              idx(0) = idx_vector (':'); \
+              idx(1) = idx_vector (':'); \
+ \
+              for (int k = 2; k < ndims; k++) \
+                idx(k) = idx_vector (ra_idx(k) + 1); \
  \
-          octave_value page \
-            = MAT_T (Array2<ELT_T> (nda.index (idx), nr, nc)); \
+              octave_value page \
+                = MAT_T (Array2<ELT_T> (nda.index (idx), nr, nc)); \
+ \
+              page.print_with_name (os, nm); \
  \
-	  page.print_with_name (os, nm); \
- \
-	  if (i < m) \
-	    NDA_T::increment_index (ra_idx, dims, 2); \
-	} \
+              if (i < m) \
+                NDA_T::increment_index (ra_idx, dims, 2); \
+            } \
+        } \
     } \
   while (0)
 
 void
 octave_print_internal (std::ostream& os, const NDArray& nda,
 		       bool pr_as_read_syntax, int extra_indent)
 {
   switch (nda.ndims ())
