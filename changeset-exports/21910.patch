# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1465942204 14400
#      Tue Jun 14 18:10:04 2016 -0400
# Node ID 4d723ba06b4aca92640f61a81a305617b7b5a2ef
# Parent  d7cac41df82a7bdfb6dd54b4c653d2c7606df648
provide wrappers for some unistd.h functions

* liboctave/wrappers/unistd-wrappers.c,
liboctave/wrappers/unistd-wrappers.h: New files.

* liboctave/wrappers/module.mk: Update.

* gl2ps-print.cc, oct-hist.cc, oct-procbuf.cc, oct-tex-lexer.in.ll,
sysdep.cc, octave.cc, parse-tree/lex.ll, file-ops.cc, lo-sysdep.cc,
oct-env.cc, oct-syscalls.cc, cmd-edit.cc, kpse.cc:
Use wrappers instead of calling unistd.h functions directly.

diff --git a/libinterp/corefcn/gl2ps-print.cc b/libinterp/corefcn/gl2ps-print.cc
--- a/libinterp/corefcn/gl2ps-print.cc
+++ b/libinterp/corefcn/gl2ps-print.cc
@@ -29,23 +29,21 @@ along with Octave; see the file COPYING.
 #include "gl2ps-print.h"
 
 #if defined (HAVE_GL2PS_H)
 
 #include <cstdio>
 
 #include <limits>
 
-#include <sys/types.h>
-#include <unistd.h>
-
 #include <gl2ps.h>
 
 #include "lo-mappers.h"
 #include "oct-locbuf.h"
+#include "unistd-wrappers.h"
 #include "unwind-prot.h"
 
 #include "gl-render.h"
 #include "oct-opengl.h"
 #include "sighandlers.h"
 #include "sysdep.h"
 #include "text-renderer.h"
 
@@ -207,17 +205,17 @@ gl2ps_renderer::draw (const graphics_obj
       GLint buffsize = 2*1024*1024;
       buffer_overflow = true;
 
       while (buffer_overflow)
         {
           buffer_overflow = false;
           buffsize *= 2;
           gnulib::fseek (tmpf, 0, SEEK_SET);
-          gnulib::ftruncate (fileno (tmpf), 0);
+          octave_ftruncate_wrapper (fileno (tmpf), 0);
 
           // For LaTeX output the fltk print process uses 2 drawnow() commands.
           // The first one is for the pdf/ps/eps graph to be included.  The
           // print_cmd is saved as old_print_cmd.  Then the second drawnow()
           // outputs the tex-file and the graphic filename to be included is
           // extracted from old_print_cmd.
 
           std::string include_graph;
diff --git a/libinterp/corefcn/oct-hist.cc b/libinterp/corefcn/oct-hist.cc
--- a/libinterp/corefcn/oct-hist.cc
+++ b/libinterp/corefcn/oct-hist.cc
@@ -33,30 +33,27 @@ Software Foundation, Inc.
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
 #include <cstdlib>
 #include <cstring>
 
+#include <fstream>
 #include <string>
 
-#include <fstream>
-
-#include <sys/types.h>
-#include <unistd.h>
-
 #include "cmd-hist.h"
 #include "file-ops.h"
 #include "lo-mappers.h"
 #include "octave-link.h"
 #include "oct-env.h"
 #include "oct-time.h"
 #include "str-vec.h"
+#include "unistd-wrappers.h"
 
 #include <defaults.h>
 #include "defun.h"
 #include "error.h"
 #include "errwarn.h"
 #include "input.h"
 #include "oct-hist.h"
 #include "ovl.h"
@@ -434,17 +431,17 @@ mk_tmp_hist_file (const octave_value_lis
   file.close ();
 
   return name;
 }
 
 static void
 unlink_cleanup (const char *file)
 {
-  gnulib::unlink (file);
+  octave_unlink_wrapper (file);
 }
 
 static void
 do_edit_history (const octave_value_list& args)
 {
   std::string name = mk_tmp_hist_file (args, false, "edit_history");
 
   if (name.empty ())
diff --git a/libinterp/corefcn/oct-procbuf.cc b/libinterp/corefcn/oct-procbuf.cc
--- a/libinterp/corefcn/oct-procbuf.cc
+++ b/libinterp/corefcn/oct-procbuf.cc
@@ -28,16 +28,17 @@ along with Octave; see the file COPYING.
 
 #include <iostream>
 
 #include "lo-mappers.h"
 #include "lo-utils.h"
 #include "oct-procbuf.h"
 #include "oct-syscalls.h"
 #include "sysdep.h"
+#include "unistd-wrappers.h"
 #include "variables.h"
 
 #include "defun.h"
 #include "errwarn.h"
 #include "utils.h"
 
 #if ! defined (SHELL_PATH)
 #  define SHELL_PATH "/bin/sh"
@@ -100,22 +101,22 @@ octave_procbuf::open (const char *comman
       parent_end = pipe_fds[1];
       child_end = pipe_fds[0];
     }
 
   proc_pid = ::fork ();
 
   if (proc_pid == 0)
     {
-      gnulib::close (parent_end);
+      octave_close_wrapper (parent_end);
 
       if (child_end != child_std_end)
         {
-          gnulib::dup2 (child_end, child_std_end);
-          gnulib::close (child_end);
+          octave_dup2_wrapper (child_end, child_std_end);
+          octave_close_wrapper (child_end);
         }
 
       while (octave_procbuf_list)
         {
           FILE *fp = octave_procbuf_list->f;
 
           if (fp)
             {
@@ -126,21 +127,21 @@ octave_procbuf::open (const char *comman
           octave_procbuf_list = octave_procbuf_list->next;
         }
 
       execl (SHELL_PATH, "sh", "-c", command, static_cast<void *> (0));
 
       exit (127);
     }
 
-  gnulib::close (child_end);
+  octave_close_wrapper (child_end);
 
   if (proc_pid < 0)
     {
-      gnulib::close (parent_end);
+      octave_close_wrapper (parent_end);
       return 0;
     }
 
   f = ::fdopen (parent_end, (mode & std::ios::in) ? "r" : "w");
 
   if (mode & std::ios::out)
     ::setvbuf (f, 0, _IOLBF, BUFSIZ);
 
diff --git a/libinterp/corefcn/oct-tex-lexer.in.ll b/libinterp/corefcn/oct-tex-lexer.in.ll
--- a/libinterp/corefcn/oct-tex-lexer.in.ll
+++ b/libinterp/corefcn/oct-tex-lexer.in.ll
@@ -53,46 +53,43 @@ along with Octave; see the file COPYING.
 %option noyyrealloc
 %option noyyfree
 
 %x NUM_MODE
 %x MAYBE_NUM_MODE
 
 %{
 
-// The generated code may include unistd.h.  We need that to happen
-// before defining isatty to be prefixed with the gnulib namespace
-// identifier.
-
-#include <sys/types.h>
-#include <unistd.h>
+#include "unistd-wrappers.h"
 
 #include "txt-eng.h"
 #include "oct-tex-parser.h"
 
 // FIXME: with bison 3.x, OCTAVE_TEX_STYPE appears in the generated
 // oct-parse.h file, but there is no definition for YYSTYPE, which is
 // needed by the code that is generated by flex.  I can't seem to find
 // a way to tell flex to use OCTAVE_TEX_STYPE instead of YYSTYPE in
 // the code it generates, or to tell bison to provide the definition
 // of YYSTYPE in the generated oct-parse.h file.
 
 #if defined (OCTAVE_TEX_STYPE_IS_DECLARED) && ! defined YYSTYPE
 #  define YYSTYPE OCTAVE_TEX_STYPE
 #endif
 
+#define YY_NO_UNISTD_H 1
+#define isatty octave_isatty_wrapper
+
 #if defined (GNULIB_NAMESPACE)
 // Calls to the following functions appear in the generated output
 // from flex without the namespace tag.  Redefine them so we will use
 // them via the gnulib namespace.
 #  define fprintf GNULIB_NAMESPACE::fprintf
 #  define fread GNULIB_NAMESPACE::fread
 #  define fwrite GNULIB_NAMESPACE::fwrite
 #  define getc GNULIB_NAMESPACE::getc
-#  define isatty GNULIB_NAMESPACE::isatty
 #  define malloc GNULIB_NAMESPACE::malloc
 #  define realloc GNULIB_NAMESPACE::realloc
 #endif
 
 %}
 
 D   [0-9]
 NUM (({D}+\.?{D}*)|(\.{D}+))
diff --git a/libinterp/corefcn/sysdep.cc b/libinterp/corefcn/sysdep.cc
--- a/libinterp/corefcn/sysdep.cc
+++ b/libinterp/corefcn/sysdep.cc
@@ -28,19 +28,16 @@ along with Octave; see the file COPYING.
 #include <cstddef>
 #include <cstdio>
 #include <cstdlib>
 #include <cstring>
 
 #include <iostream>
 #include <string>
 
-#include <sys/types.h>
-#include <unistd.h>
-
 #if defined (HAVE_TERMIOS_H)
 #  include <termios.h>
 #elif defined (HAVE_TERMIO_H)
 #  include <termio.h>
 #elif defined (HAVE_SGTTY_H)
 #  include <sgtty.h>
 #endif
 
@@ -66,16 +63,17 @@ along with Octave; see the file COPYING.
 
 #include "cmd-edit.h"
 #include "file-ops.h"
 #include "lo-mappers.h"
 #include "lo-math.h"
 #include "mach-info.h"
 #include "oct-env.h"
 #include "quit.h"
+#include "unistd-wrappers.h"
 #include "unsetenv-wrapper.h"
 
 #include "Cell.h"
 #include "builtins.h"
 #include "defun.h"
 #include "display.h"
 #include "error.h"
 #include "errwarn.h"
@@ -349,17 +347,17 @@ sysdep_cleanup (void)
 // It doesn't matter whether an input \n is mapped to \r, or vice versa.
 
 void
 raw_mode (bool on, bool wait)
 {
   static bool curr_on = false;
 
   int tty_fd = STDIN_FILENO;
-  if (! gnulib::isatty (tty_fd))
+  if (! octave_isatty_wrapper (tty_fd))
     {
       if (interactive && ! forced_interactive)
         error ("stdin is not a tty!");
     }
 
   if (on == curr_on)
     return;
 
diff --git a/libinterp/octave.cc b/libinterp/octave.cc
--- a/libinterp/octave.cc
+++ b/libinterp/octave.cc
@@ -39,16 +39,17 @@ along with Octave; see the file COPYING.
 
 #include "cmd-edit.h"
 #include "f77-fcn.h"
 #include "file-ops.h"
 #include "file-stat.h"
 #include "lo-error.h"
 #include "oct-env.h"
 #include "str-vec.h"
+#include "unistd-wrappers.h"
 
 #include "build-env.h"
 #include "builtins.h"
 #include "defaults.h"
 #include "Cell.h"
 #include "defun.h"
 #include "display.h"
 #include "error.h"
@@ -844,20 +845,20 @@ octave_initialize_interpreter (int argc,
 
   if (no_window_system)
     display_info::no_window_system ();
 
   // Is input coming from a terminal?  If so, we are probably interactive.
 
   // If stdin is not a tty, then we are reading commands from a pipe or
   // a redirected file.
-  bool stdin_is_tty = gnulib::isatty (fileno (stdin));
+  bool stdin_is_tty = octave_isatty_wrapper (fileno (stdin));
 
   interactive = (! embedded && ! an_octave_program && stdin_is_tty
-                 && gnulib::isatty (fileno (stdout)));
+                 && octave_isatty_wrapper (fileno (stdout)));
 
   // Check if the user forced an interactive session.  If he
   // unnecessarily did so, reset forced_interactive to false.
   if (forced_interactive)
     {
       if (interactive)
         forced_interactive = false;
       else
@@ -1034,17 +1035,17 @@ check_starting_gui (void)
   if (persist)
     return true;
 
   // If stdin is not a tty, then assume we are reading commands from a pipe or
   // a redirected file and the GUI should not start.  If this is not the case
   // (for example, starting from a desktop "launcher" with no terminal) and you
   // want to start the GUI, you may use the --force-gui option to start the GUI.
 
-  if (! gnulib::isatty (fileno (stdin)))
+  if (! octave_isatty_wrapper (fileno (stdin)))
     return false;
 
   // If we have code to eval or execute from a file, and we are going to exit
   // immediately after executing it, don't start the gui.
 
   int last_arg_idx = optind;
   int remaining_args = octave_cmdline_argc - last_arg_idx;
 
diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -84,22 +84,20 @@ object) relevant global values before an
 #include <stdint.h>
 
 #include <iostream>
 #include <set>
 #include <sstream>
 #include <string>
 #include <stack>
 
-#include <sys/types.h>
-#include <unistd.h>
-
 #include "cmd-edit.h"
+#include "lo-mappers.h"
 #include "quit.h"
-#include "lo-mappers.h"
+#include "unistd-wrappers.h"
 
 // These would be alphabetical, but oct-parse.h must be included before
 // oct-gperf.h and oct-parse.h must be included after token.h and the tree
 // class declarations.  We can't include oct-parse.h in oct-gperf.h
 // because it may not be protected to allow it to be included multiple
 // times.
 
 #include "Cell.h"
@@ -126,23 +124,25 @@ object) relevant global values before an
 // way to tell flex to use OCTAVE_STYPE instead of YYSTYPE in the code
 // it generates, or to tell bison to provide the definition of YYSTYPE
 // in the generated oct-parse.h file.
 
 #if defined (OCTAVE_STYPE_IS_DECLARED) && ! defined YYSTYPE
 #  define YYSTYPE OCTAVE_STYPE
 #endif
 
+#define YY_NO_UNISTD_H 1
+#define isatty octave_isatty_wrapper
+
 #if defined (GNULIB_NAMESPACE)
 // Calls to the following functions appear in the generated output from
 // flex without the namespace tag.  Redefine them so we will use them
 // via the gnulib namespace.
 #  define fprintf GNULIB_NAMESPACE::fprintf
 #  define fwrite GNULIB_NAMESPACE::fwrite
-#  define isatty GNULIB_NAMESPACE::isatty
 #  define malloc GNULIB_NAMESPACE::malloc
 #  define realloc GNULIB_NAMESPACE::realloc
 #endif
 
 #if ! (defined (FLEX_SCANNER) \
        && defined (YY_FLEX_MAJOR_VERSION) && YY_FLEX_MAJOR_VERSION >= 2 \
        && defined (YY_FLEX_MINOR_VERSION) && YY_FLEX_MINOR_VERSION >= 5)
 #error lex.l requires flex version 2.5.4 or later
diff --git a/liboctave/system/file-ops.cc b/liboctave/system/file-ops.cc
--- a/liboctave/system/file-ops.cc
+++ b/liboctave/system/file-ops.cc
@@ -31,32 +31,30 @@ along with Octave; see the file COPYING.
 
 #if (defined (OCTAVE_HAVE_WINDOWS_FILESYSTEM) && ! defined (OCTAVE_HAVE_POSIX_FILESYSTEM))
 #  include <algorithm>
 #endif
 
 #include <iostream>
 #include <vector>
 
-#include <sys/types.h>
-#include <unistd.h>
-
 #include "areadlink-wrapper.h"
 #include "canonicalize-file-name-wrapper.h"
 #include "dir-ops.h"
 #include "file-ops.h"
 #include "file-stat.h"
 #include "gen-tempname-wrapper.h"
 #include "oct-env.h"
 #include "oct-locbuf.h"
 #include "oct-passwd.h"
 #include "quit.h"
 #include "singleton-cleanup.h"
 #include "stat-wrappers.h"
 #include "str-vec.h"
+#include "unistd-wrappers.h"
 
 namespace octave
 {
   namespace sys
   {
     file_ops *octave::sys::file_ops::instance = 0;
 
     bool
@@ -451,17 +449,17 @@ namespace octave
     int
     link (const std::string& old_name, const std::string& new_name,
           std::string& msg)
     {
       msg = "";
 
       int status = -1;
 
-      status = gnulib::link (old_name.c_str (), new_name.c_str ());
+      status = octave_link_wrapper (old_name.c_str (), new_name.c_str ());
 
       if (status < 0)
         msg = gnulib::strerror (errno);
 
       return status;
     }
 
     int
@@ -474,17 +472,17 @@ namespace octave
     int
     symlink (const std::string& old_name,
                     const std::string& new_name, std::string& msg)
     {
       msg = "";
 
       int status = -1;
 
-      status = gnulib::symlink (old_name.c_str (), new_name.c_str ());
+      status = octave_symlink_wrapper (old_name.c_str (), new_name.c_str ());
 
       if (status < 0)
         msg = gnulib::strerror (errno);
 
       return status;
     }
 
     int
@@ -546,17 +544,17 @@ namespace octave
 
     int
     rmdir (const std::string& name, std::string& msg)
     {
       msg = "";
 
       int status = -1;
 
-      status = gnulib::rmdir (name.c_str ());
+      status = octave_rmdir_wrapper (name.c_str ());
 
       if (status < 0)
         msg = gnulib::strerror (errno);
 
       return status;
     }
 
     // And a version that works recursively.
@@ -651,17 +649,17 @@ namespace octave
 
     int
     unlink (const std::string& name, std::string& msg)
     {
       msg = "";
 
       int status = -1;
 
-      status = gnulib::unlink (name.c_str ());
+      status = octave_unlink_wrapper (name.c_str ());
 
       if (status < 0)
         msg = gnulib::strerror (errno);
 
       return status;
     }
 
     std::string
diff --git a/liboctave/system/lo-sysdep.cc b/liboctave/system/lo-sysdep.cc
--- a/liboctave/system/lo-sysdep.cc
+++ b/liboctave/system/lo-sysdep.cc
@@ -23,47 +23,45 @@ along with Octave; see the file COPYING.
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
 #include <iostream>
 #include <string>
 #include <vector>
 
-#include <sys/types.h>
-#include <unistd.h>
-
 #include <fcntl.h>
 
 #if defined (__WIN32__) && ! defined (__CYGWIN__)
 #  define WIN32_LEAN_AND_MEAN 1
 #  include <windows.h>
 #endif
 
 #include "file-ops.h"
 #include "lo-error.h"
+#include "lo-sysdep.h"
+#include "oct-locbuf.h"
 #include "pathlen.h"
-#include "lo-sysdep.h"
 #include "str-vec.h"
-#include "oct-locbuf.h"
+#include "unistd-wrappers.h"
 
 namespace octave
 {
   namespace sys
   {
     std::string
     getcwd (void)
     {
       std::string retval;
 
-      // Using the gnulib getcwd module ensures that we have a getcwd that
+      // Using octave_getcwd_wrapper ensures that we have a getcwd that
       // will allocate a buffer as large as necessary if buf and size are
       // both 0.
 
-      char *tmp = gnulib::getcwd (0, 0);
+      char *tmp = octave_getcwd_wrapper (0, 0);
 
       if (! tmp)
         (*current_liboctave_error_handler) ("unable to find current directory");
 
       retval = tmp;
       free (tmp);
 
       return retval;
@@ -74,17 +72,17 @@ namespace octave
     {
       std::string path = octave::sys::file_ops::tilde_expand (path_arg);
 
 #if defined (__WIN32__) && ! defined (__CYGWIN__)
       if (path.length () == 2 && path[1] == ':')
         path += "\\";
 #endif
 
-      return gnulib::chdir (path.c_str ());
+      return octave_chdir_wrapper (path.c_str ());
     }
 
 #if defined (__WIN32__) && ! defined (__CYGWIN__)
 
     pid_t
     win_popen2 (const std::string& cmd, const string_vector& args,
                 bool sync_mode, int *fildes, std::string& msg)
     {
diff --git a/liboctave/system/oct-env.cc b/liboctave/system/oct-env.cc
--- a/liboctave/system/oct-env.cc
+++ b/liboctave/system/oct-env.cc
@@ -41,28 +41,26 @@ Free Software Foundation, Inc.
 #endif
 
 #include <cctype>
 #include <cstdlib>
 #include <cstring>
 
 #include <string>
 
-#include <sys/types.h>
-#include <unistd.h>
-
 #include "file-ops.h"
 #include "lo-error.h"
 #include "lo-sysdep.h"
 #include "lo-utils.h"
 #include "oct-env.h"
 #include "oct-passwd.h"
 #include "oct-syscalls.h"
 #include "set-program-name-wrapper.h"
 #include "singleton-cleanup.h"
+#include "unistd-wrappers.h"
 
 namespace octave
 {
   namespace sys
   {
     env::env (void)
       : follow_symbolic_links (true), verbatim_pwd (true),
         current_directory (), prog_name (), prog_invocation_name (),
@@ -506,17 +504,17 @@ namespace octave
 
     std::string
     env::do_get_host_name (void) const
     {
       if (host_name.empty ())
         {
           char hostname[1024];
 
-          int status = gnulib::gethostname (hostname, 1023);
+          int status = octave_gethostname_wrapper (hostname, 1023);
 
           host_name = (status < 0) ? "unknown" : hostname;
         }
 
       return host_name;
     }
 
     std::string
diff --git a/liboctave/system/oct-syscalls.cc b/liboctave/system/oct-syscalls.cc
--- a/liboctave/system/oct-syscalls.cc
+++ b/liboctave/system/oct-syscalls.cc
@@ -24,30 +24,28 @@ along with Octave; see the file COPYING.
 #  include "config.h"
 #endif
 
 #include <cerrno>
 #include <cstdlib>
 
 #include <string.h>
 
-#include <sys/types.h>
-#include <unistd.h>
-
 #include <fcntl.h>
 
 // We can't use csignal as kill is not in the std namespace, and picky
 // compiler runtimes will also exclude it from global scope as well.
 
 #include <signal.h>
 
 #include "lo-utils.h"
 #include "lo-sysdep.h"
 #include "oct-syscalls.h"
 #include "str-vec.h"
+#include "unistd-wrappers.h"
 
 #define NOT_SUPPORTED(nm) \
   nm ": not supported on this system"
 
 namespace octave
 {
   namespace sys
   {
@@ -60,24 +58,20 @@ namespace octave
 
     int
     dup2 (int old_fd, int new_fd, std::string& msg)
     {
       msg = "";
 
       int status = -1;
 
-#if defined (HAVE_DUP2)
-      status = gnulib::dup2 (old_fd, new_fd);
+      status = octave_dup2_wrapper (old_fd, new_fd);
 
       if (status < 0)
         msg = gnulib::strerror (errno);
-#else
-      msg = NOT_SUPPORTED ("dup2");
-#endif
 
       return status;
     }
 
     int
     execvp (const std::string& file, const string_vector& argv)
     {
       std::string msg;
@@ -85,164 +79,128 @@ namespace octave
     }
 
     int
     execvp (const std::string& file, const string_vector& args,
             std::string& msg)
     {
       msg = "";
 
-      int status = -1;
-
-#if defined (HAVE_EXECVP)
       char **argv = args.c_str_vec ();
 
-      status = ::execvp (file.c_str (), argv);
+      int status = octave_execvp_wrapper (file.c_str (), argv);
 
       string_vector::delete_c_str_vec (argv);
 
       if (status < 0)
         msg = gnulib::strerror (errno);
-#else
-      msg = NOT_SUPPORTED ("execvp");
-#endif
 
       return status;
     }
 
     pid_t
     fork (std::string& msg)
     {
       pid_t status = -1;
 
 #if defined (HAVE_FORK)
-      status = ::fork ();
+      status = octave_fork_wrapper ();
 
       if (status < 0)
         msg = gnulib::strerror (errno);
 #else
-      msg = NOT_SUPPORTED ("fork");
+      msg = NOT_SUPPORTED ("vfork");
 #endif
 
       return status;
     }
 
     pid_t
     vfork (std::string& msg)
     {
       pid_t status = -1;
 
 #if defined (HAVE_VFORK) || defined (HAVE_FORK)
 #  if defined (HAVE_VFORK)
-      status = ::vfork ();
+      status = octave_vfork_wrapper ();
 #  else
-      status = ::fork ();
+      status = octave_fork_wrapper ();
 #  endif
 
       if (status < 0)
         msg = gnulib::strerror (errno);
 #else
       msg = NOT_SUPPORTED ("vfork");
 #endif
 
       return status;
     }
 
     pid_t
     getpgrp (std::string& msg)
     {
-      pid_t status = -1;
-
-#if defined (HAVE_GETPGRP)
-      status = ::getpgrp ();
+      pid_t status = octave_getpgrp_wrapper ();
 
       if (status < 0)
         msg = gnulib::strerror (errno);
-#else
-      msg = NOT_SUPPORTED ("getpgrp");
-#endif
 
       return status;
     }
 
     pid_t
     getpid (void)
     {
-#if defined (HAVE_GETPID)
-      return ::getpid ();
-#else
-      return 0;
-#endif
+      return octave_getpid_wrapper ();
     }
 
     pid_t
     getppid (void)
     {
-#if defined (HAVE_GETPPID)
-      return ::getppid ();
-#else
-      return 0;
-#endif
+      return octave_getppid_wrapper ();
     }
 
     gid_t
     getgid (void)
     {
-#if defined (HAVE_GETGID)
-      return ::getgid ();
-#else
-      return 0;
-#endif
+      return octave_getgid_wrapper ();
     }
 
     gid_t
     getegid (void)
     {
-#if defined (HAVE_GETEGID)
-      return ::getegid ();
-#else
-      return 0;
-#endif
+      return octave_getegid_wrapper ();
     }
 
     uid_t
     getuid (void)
     {
-#if defined (HAVE_GETUID)
-      return ::getuid ();
-#else
-      return 0;
-#endif
+      return octave_getuid_wrapper ();
     }
 
     uid_t
     geteuid (void)
     {
-#if defined (HAVE_GETEUID)
-      return ::geteuid ();
-#else
-      return 0;
-#endif
+      return octave_geteuid_wrapper ();
     }
 
     int
     pipe (int *fildes)
     {
       std::string msg;
       return octave::sys::pipe (fildes, msg);
     }
 
     int
     pipe (int *fildes, std::string& msg)
     {
       msg = "";
 
       int status = -1;
 
-      status = gnulib::pipe (fildes);
+      status = octave_pipe_wrapper (fildes);
 
       if (status < 0)
         msg = gnulib::strerror (errno);
 
       return status;
     }
 
     pid_t
@@ -336,65 +294,65 @@ namespace octave
                 msg = "popen2: process creation failed -- " + msg;
               else if (pid == 0)
                 {
                   std::string child_msg;
 
                   interactive = false;
 
                   // Child process
-                  gnulib::close (child_stdin[1]);
-                  gnulib::close (child_stdout[0]);
+                  octave_close_wrapper (child_stdin[1]);
+                  octave_close_wrapper (child_stdout[0]);
 
-                  if (dup2 (child_stdin[0], STDIN_FILENO) >= 0)
+                  if (dup2 (child_stdin[0], octave_stdin_fileno ()) >= 0)
                     {
-                      gnulib::close (child_stdin[0]);
-                      if (dup2 (child_stdout[1], STDOUT_FILENO) >= 0)
+                      octave_close_wrapper (child_stdin[0]);
+                      if (dup2 (child_stdout[1], octave_stdout_fileno ()) >= 0)
                         {
-                          gnulib::close (child_stdout[1]);
+                          octave_close_wrapper (child_stdout[1]);
                           if (execvp (cmd, args, child_msg) < 0)
                             child_msg = "popen2 (child): unable to start process -- " + child_msg;
                         }
                       else
                         child_msg = "popen2 (child): file handle duplication failed -- " + child_msg;
                     }
                   else
                     child_msg = "popen2 (child): file handle duplication failed -- " + child_msg;
 
                   (*current_liboctave_error_handler) (child_msg.c_str ());
 
                   exit (0);
                 }
               else
                 {
                   // Parent process
-                  gnulib::close (child_stdin[0]);
-                  gnulib::close (child_stdout[1]);
+                  octave_close_wrapper (child_stdin[0]);
+                  octave_close_wrapper (child_stdout[1]);
 
 #if defined (F_SETFL) && defined (O_NONBLOCK)
                   if (! sync_mode
                       && octave::sys::fcntl (child_stdout[0], F_SETFL,
                                                   O_NONBLOCK, msg) < 0)
                     msg = "popen2: error setting file mode -- " + msg;
                   else
 #endif
                     {
                       fildes[0] = child_stdin[1];
                       fildes[1] = child_stdout[0];
                       return pid;
                     }
                 }
-              gnulib::close (child_stdout[0]);
-              gnulib::close (child_stdout[1]);
+              octave_close_wrapper (child_stdout[0]);
+              octave_close_wrapper (child_stdout[1]);
             }
           else
             msg = "popen2: pipe creation failed -- " + msg;
 
-          gnulib::close (child_stdin[0]);
-          gnulib::close (child_stdin[1]);
+          octave_close_wrapper (child_stdin[0]);
+          octave_close_wrapper (child_stdin[1]);
         }
       else
         msg = "popen2: pipe creation failed -- " + msg;
 
       return -1;
 #endif
     }
 
diff --git a/liboctave/util/cmd-edit.cc b/liboctave/util/cmd-edit.cc
--- a/liboctave/util/cmd-edit.cc
+++ b/liboctave/util/cmd-edit.cc
@@ -24,35 +24,31 @@ along with Octave; see the file COPYING.
 #  include "config.h"
 #endif
 
 #include <cstdlib>
 #include <cstring>
 
 #include <string>
 
-#include <sys/types.h>
-#include <unistd.h>
-
-#include "quit.h"
-
 #include "cmd-edit.h"
 #include "cmd-hist.h"
 #include "file-ops.h"
 #include "file-stat.h"
 #include "lo-error.h"
 #include "lo-utils.h"
 #include "oct-env.h"
 #include "oct-mutex.h"
 #include "oct-time.h"
+#include "quit.h"
 #include "singleton-cleanup.h"
+#include "unistd-wrappers.h"
 
 #if defined (USE_READLINE)
 #include <cstdio>
-#include <cstdlib>
 
 #include "oct-rl-edit.h"
 #endif
 
 namespace octave
 {
   char *do_completer_word_break_hook ();
 
@@ -1814,22 +1810,17 @@ namespace octave
                   sprintf (number_buffer, "%d", command_number);
                   tmpstr = number_buffer;
 
                   break;
                 }
 
               case '$':
                 {
-#if defined (HAVE_GETEUID)
-                  tmpstr = (::geteuid () == 0 ? '#' : '$');
-#else
-                  tmpstr = '$';
-#endif
-
+                  tmpstr = (octave_geteuid_wrapper () == 0 ? '#' : '$');
                   break;
                 }
 
 #if defined (USE_READLINE)
               case '[':
               case ']':
                 {
                   tmpstr.resize (1);
diff --git a/liboctave/util/kpse.cc b/liboctave/util/kpse.cc
--- a/liboctave/util/kpse.cc
+++ b/liboctave/util/kpse.cc
@@ -35,28 +35,26 @@ along with Octave; see the file COPYING.
 #include <cstdlib>
 #include <ctime>
 
 #include <map>
 #include <fstream>
 #include <iostream>
 #include <string>
 
-#include <sys/types.h>
-#include <unistd.h>
-
 // Needed for NAME_MAX.
 #include <dirent.h>
 
 #include "file-ops.h"
 #include "file-stat.h"
 #include "kpse.h"
 #include "oct-env.h"
 #include "oct-passwd.h"
 #include "pathsearch.h"
+#include "unistd-wrappers.h"
 
 #if defined (__WIN32__) && ! defined (__CYGWIN__)
 #  define WIN32_LEAN_AND_MEAN 1
 #  include <windows.h>
 #endif
 
 // Define the characters which separate components of filenames and
 // environment variable paths.
@@ -198,17 +196,17 @@ READABLE (const std::string& fn)
 #else
 static inline bool
 READABLE (const std::string& fn)
 {
   bool retval = false;
 
   const char *t = fn.c_str ();
 
-  if (access (t, R_OK) == 0)
+  if (octave_access_wrapper (t, octave_access_r_ok ()) == 0)
     {
       octave::sys::file_stat fs (fn);
 
       retval = fs && ! fs.is_dir ();
     }
 
   return retval;
 }
diff --git a/liboctave/wrappers/module.mk b/liboctave/wrappers/module.mk
--- a/liboctave/wrappers/module.mk
+++ b/liboctave/wrappers/module.mk
@@ -10,16 +10,17 @@ NOINSTALL_WRAPPERS_INC = \
   liboctave/wrappers/nproc-wrapper.h \
   liboctave/wrappers/putenv-wrapper.h \
   liboctave/wrappers/set-program-name-wrapper.h \
   liboctave/wrappers/stat-wrappers.h \
   liboctave/wrappers/strftime-wrapper.h \
   liboctave/wrappers/strmode-wrapper.h \
   liboctave/wrappers/strptime-wrapper.h \
   liboctave/wrappers/uname-wrapper.h \
+  liboctave/wrappers/unistd-wrappers.h \
   liboctave/wrappers/unsetenv-wrapper.h \
   liboctave/wrappers/vasprintf-wrapper.h \
   liboctave/wrappers/wait-for-input.h
 
 WRAPPERS_SRC = \
   liboctave/wrappers/areadlink-wrapper.c \
   liboctave/wrappers/base64-wrappers.c \
   liboctave/wrappers/canonicalize-file-name-wrapper.c \
@@ -31,16 +32,17 @@ WRAPPERS_SRC = \
   liboctave/wrappers/nproc-wrapper.c \
   liboctave/wrappers/putenv-wrapper.c \
   liboctave/wrappers/set-program-name-wrapper.c \
   liboctave/wrappers/stat-wrappers.c \
   liboctave/wrappers/strftime-wrapper.c \
   liboctave/wrappers/strmode-wrapper.c \
   liboctave/wrappers/strptime-wrapper.c \
   liboctave/wrappers/uname-wrapper.c \
+  liboctave/wrappers/unistd-wrappers.c \
   liboctave/wrappers/unsetenv-wrapper.c \
   liboctave/wrappers/vasprintf-wrapper.c \
   liboctave/wrappers/wait-for-input.c \
   $(NOINSTALL_WRAPPERS_INC)
 
 noinst_LTLIBRARIES += liboctave/wrappers/libwrappers.la
 
 liboctave_wrappers_libwrappers_la_SOURCES = $(WRAPPERS_SRC)
diff --git a/liboctave/wrappers/unistd-wrappers.c b/liboctave/wrappers/unistd-wrappers.c
new file mode 100644
--- /dev/null
+++ b/liboctave/wrappers/unistd-wrappers.c
@@ -0,0 +1,209 @@
+/*
+
+Copyright (C) 2016 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+// These functions may be provided by gnulib.  We don't include gnulib
+// headers directly in Octave's C++ source files to avoid problems that
+// may be caused by the way that gnulib overrides standard library
+// functions.
+
+#if defined (HAVE_CONFIG_H)
+#  include "config.h"
+#endif
+
+#include <sys/types.h>
+#include <unistd.h>
+
+#include "unistd-wrappers.h"
+
+int
+octave_access_f_ok (void)
+{
+  return F_OK;
+}
+
+int
+octave_access_r_ok (void)
+{
+  return R_OK;
+}
+
+int
+octave_access_w_ok (void)
+{
+  return W_OK;
+}
+
+int
+octave_access_x_ok (void)
+{
+  return X_OK;
+}
+
+int
+octave_access_wrapper (const char *nm, int mode)
+{
+  return access (nm, mode);
+}
+
+int
+octave_chdir_wrapper (const char *nm)
+{
+  return chdir (nm);
+}
+
+int
+octave_close_wrapper (int fd)
+{
+  return close (fd);
+}
+
+int
+octave_dup2_wrapper (int fd1, int fd2)
+{
+  return dup2 (fd1, fd2);
+}
+
+int
+octave_execvp_wrapper (const char *file, char *const *argv)
+{
+  return execvp (file, argv);
+}
+
+pid_t
+octave_fork_wrapper (void)
+{
+  return fork ();
+}
+
+int
+octave_ftruncate_wrapper (int fd, off_t sz)
+{
+  return ftruncate (fd, sz);
+}
+
+char *
+octave_getcwd_wrapper (char *nm, size_t len)
+{
+  return getcwd (nm, len);
+}
+
+gid_t
+octave_getegid_wrapper (void)
+{
+  return getegid ();
+}
+
+uid_t
+octave_geteuid_wrapper (void)
+{
+  return geteuid ();
+}
+
+gid_t
+octave_getgid_wrapper (void)
+{
+  return getgid ();
+}
+
+int
+octave_gethostname_wrapper (char *nm, size_t len)
+{
+  return gethostname (nm, len);
+}
+
+pid_t
+octave_getpgrp_wrapper (void)
+{
+  return getpgrp ();
+}
+
+pid_t
+octave_getpid_wrapper (void)
+{
+  return getpid ();
+}
+
+pid_t
+octave_getppid_wrapper (void)
+{
+  return getppid ();
+}
+
+uid_t
+octave_getuid_wrapper (void)
+{
+  return getuid ();
+}
+
+int
+octave_isatty_wrapper (int fd)
+{
+  return isatty (fd);
+}
+
+int
+octave_link_wrapper (const char *nm1, const char *nm2)
+{
+  return link (nm1, nm2);
+}
+
+int
+octave_pipe_wrapper (int *fd)
+{
+  return pipe (fd);
+}
+
+int
+octave_rmdir_wrapper (const char *nm)
+{
+  return rmdir (nm);
+}
+
+int
+octave_stdin_fileno (void)
+{
+  return STDIN_FILENO;
+}
+
+int
+octave_stdout_fileno (void)
+{
+  return STDOUT_FILENO;
+}
+  
+int
+octave_symlink_wrapper (const char *nm1, const char *nm2)
+{
+  return symlink (nm1, nm2);
+}
+
+int
+octave_unlink_wrapper (const char *nm)
+{
+  return unlink (nm);
+}
+
+pid_t
+octave_vfork_wrapper (void)
+{
+  return vfork ();
+}
diff --git a/liboctave/wrappers/unistd-wrappers.h b/liboctave/wrappers/unistd-wrappers.h
new file mode 100644
--- /dev/null
+++ b/liboctave/wrappers/unistd-wrappers.h
@@ -0,0 +1,92 @@
+/*
+
+Copyright (C) 2016 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+#if ! defined (octave_unistd_wrappers_h)
+#define octave_unistd_wrappers_h 1
+
+#if defined __cplusplus
+extern "C" {
+#endif
+
+extern int octave_access_f_ok (void);
+
+extern int octave_access_r_ok (void);
+
+extern int octave_access_w_ok (void);
+
+extern int octave_access_x_ok (void);
+
+extern int octave_access_wrapper (const char *nm, int mode);
+
+extern int octave_chdir_wrapper (const char *nm);
+
+extern int octave_close_wrapper (int fd);
+
+extern int octave_dup2_wrapper (int fd1, int fd2);
+
+extern int octave_execvp_wrapper (const char *file, char *const *argv);
+
+extern pid_t octave_fork_wrapper (void);
+
+extern int octave_ftruncate_wrapper (int fd, off_t sz);
+
+extern char *octave_getcwd_wrapper (char *nm, size_t len);
+
+extern gid_t octave_getegid_wrapper (void);
+
+extern uid_t octave_geteuid_wrapper (void);
+
+extern gid_t octave_getgid_wrapper (void);
+
+extern int octave_gethostname_wrapper (char *nm, size_t len);
+
+extern pid_t octave_getpgrp_wrapper (void);
+
+extern pid_t octave_getpid_wrapper (void);
+
+extern pid_t octave_getppid_wrapper (void);
+
+extern uid_t octave_getuid_wrapper (void);
+
+extern int octave_isatty_wrapper (int fd);
+
+extern int octave_link_wrapper (const char *nm1, const char *nm2);
+
+extern int octave_pipe_wrapper (int *fd);
+
+extern int octave_rmdir_wrapper (const char *nm);
+
+extern int octave_stdin_fileno (void);
+
+extern int octave_stdout_fileno (void);
+  
+extern int octave_symlink_wrapper (const char *nm1, const char *nm2);
+
+extern int octave_unlink_wrapper (const char *nm);
+
+extern pid_t octave_vfork_wrapper (void);
+
+#if defined __cplusplus
+}
+#endif
+
+#endif
