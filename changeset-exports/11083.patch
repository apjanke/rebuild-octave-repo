# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1286435699 14400
#      Thu Oct 07 03:14:59 2010 -0400
# Node ID bb8bf77f22426375839c63613f461320731cd599
# Parent  4558aad4c41d7b59b30d8175d154e157550b9170
conv2.cc: style fixes; update docstrings

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2010-10-07  John W. Eaton  <jwe@octave.org>
+
+	* DLD-FUNCTIONS/conv2.cc (convn): Style fixes.  Edit docstring.
+
 2010-10-07  John W. Eaton  <jwe@octave.org>
 
 	* file-io.cc (do_stream_open): Use fileno instead of ::fileno to
 	avoid problems if fileno is a macro.
 
 2010-10-05  John W. Eaton  <jwe@octave.org>
 
 	* oct-stdstrm.h (octave_stdiostream::octave_stdiostream): Use
diff --git a/src/DLD-FUNCTIONS/conv2.cc b/src/DLD-FUNCTIONS/conv2.cc
--- a/src/DLD-FUNCTIONS/conv2.cc
+++ b/src/DLD-FUNCTIONS/conv2.cc
@@ -47,35 +47,34 @@ enum Shape { SHAPE_FULL, SHAPE_SAME, SHA
 %!assert (conv2 (1:3, 1:2, [1,2;3,4;5,6]),
 %!        [1,4,4;5,18,16;14,48,40;19,62,48;15,48,36;]);
 */
 
 
 DEFUN_DLD (conv2, args, ,
   "-*- texinfo -*-\n\
 @deftypefn  {Loadable Function} {y =} conv2 (@var{a}, @var{b}, @var{shape})\n\
-@deftypefnx {Loadable Function} {y =} conv2 (@var{v1}, @var{v2}, @var{M}, @var{shape})\n\
-\n\
-Returns 2D convolution of @var{a} and @var{b} where the size\n\
+@deftypefnx {Loadable Function} {y =} conv2 (@var{v1}, @var{v2}, @var{m}, @var{shape})\n\
+Return the 2-D convolution of @var{a} and @var{b} where the size\n\
 of @var{c} is given by\n\
 \n\
 @table @asis\n\
-@item @var{shape} = 'full'\n\
-returns full 2-D convolution\n\
+@item @var{shape} = \"full\"\n\
+Return the full convolution.\n\
 \n\
-@item @var{shape} = 'same'\n\
-same size as a. 'central' part of convolution\n\
+@item @var{shape} = \"same\"\n\
+Return central part of the convolution with the same size as @var{a}.\n\
 \n\
-@item @var{shape} = 'valid'\n\
-only parts which do not include zero-padded edges\n\
+@item @var{shape} = \"valid\"\n\
+Return only the parts which do not include zero-padded edges.\n\
 @end table\n\
 \n\
-By default @var{shape} is 'full'.  When the third argument is a matrix\n\
-returns the convolution of the matrix @var{M} by the vector @var{v1}\n\
-in the column direction and by vector @var{v2} in the row direction\n\
+By default @var{shape} is @samp{\"full\"}.  When the third argument\n\
+is a matrix, return the convolution of the matrix @var{m} by the vector\n\
+@var{v1} in the column direction and by vector @var{v2} in the row direction\n\
 @end deftypefn")
 {
   octave_value retval;
   octave_value tmp;
   int nargin = args.length ();
   std::string shape = "full"; //default
   bool separable = false;
   convn_type ct;
@@ -117,22 +116,20 @@ in the column direction and by vector @v
 
        if (! (1 == args(0).rows () || 1 == args(0).columns ())
            || ! (1 == args(1).rows () || 1 == args(1).columns ()))
          {
            print_usage ();
            return retval;
          }
 
-       if (args(0).is_single_type () || 
-           args(1).is_single_type () || 
-           args(2).is_single_type ())
+       if (args(0).is_single_type () || args(1).is_single_type ()
+           || args(2).is_single_type ())
          {
-           if (args(0).is_complex_type ()
-               || args(1).is_complex_type ()
+           if (args(0).is_complex_type () || args(1).is_complex_type ()
                || args(2).is_complex_type ())
              {
                FloatComplexMatrix a (args(2).float_complex_matrix_value ());
                if (args(1).is_real_type () && args(2).is_real_type ())
                  {
                    FloatColumnVector v1 (args(0).float_vector_value ());
                    FloatRowVector v2 (args(1).float_vector_value ());
                    retval = convn (a, v1, v2, ct);
@@ -149,18 +146,17 @@ in the column direction and by vector @v
                FloatColumnVector v1 (args(0).float_vector_value ());
                FloatRowVector v2 (args(1).float_vector_value ());
                FloatMatrix a (args(2).float_matrix_value ());
                retval = convn (a, v1, v2, ct);
              }
          }
        else
          {
-           if (args(0).is_complex_type ()
-               || args(1).is_complex_type ()
+           if (args(0).is_complex_type () || args(1).is_complex_type ()
                || args(2).is_complex_type ())
              {
                ComplexMatrix a (args(2).complex_matrix_value ());
                if (args(1).is_real_type () && args(2).is_real_type ())
                  {
                    ColumnVector v1 (args(0).vector_value ());
                    RowVector v2 (args(1).vector_value ());
                    retval = convn (a, v1, v2, ct);
@@ -178,21 +174,19 @@ in the column direction and by vector @v
                RowVector v2 (args(1).vector_value ());
                Matrix a (args(2).matrix_value ());
                retval = convn (a, v1, v2, ct);
              }
          }
      } // if (separable)
    else
      {
-       if (args(0).is_single_type () || 
-           args(1).is_single_type ())
+       if (args(0).is_single_type () || args(1).is_single_type ())
          {
-           if (args(0).is_complex_type ()
-               || args(1).is_complex_type ())
+           if (args(0).is_complex_type () || args(1).is_complex_type ())
              {
                FloatComplexMatrix a (args(0).float_complex_matrix_value ());
                if (args(1).is_real_type ())
                  {
                    FloatMatrix b (args(1).float_matrix_value ());
                    retval = convn (a, b, ct);
                  }
                else
@@ -205,18 +199,17 @@ in the column direction and by vector @v
              {
                FloatMatrix a (args(0).float_matrix_value ());
                FloatMatrix b (args(1).float_matrix_value ());
                retval = convn (a, b, ct);
              }
          }
        else
          {
-           if (args(0).is_complex_type ()
-               || args(1).is_complex_type ())
+           if (args(0).is_complex_type () || args(1).is_complex_type ())
              {
                ComplexMatrix a (args(0).complex_matrix_value ());
                if (args(1).is_real_type ())
                  {
                    Matrix b (args(1).matrix_value ());
                    retval = convn (a, b, ct);
                  }
                else
@@ -236,32 +229,31 @@ in the column direction and by vector @v
      } // if (separable)
 
    return retval;
 }
 
 DEFUN_DLD (convn, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {y =} conv2 (@var{a}, @var{b}, @var{shape})\n\
-\n\
-Returns n-D convolution of @var{a} and @var{b} where the size\n\
+Return the n-D convolution of @var{a} and @var{b} where the size\n\
 of @var{c} is given by\n\
 \n\
 @table @asis\n\
-@item @var{shape} = 'full'\n\
-returns full n-D convolution\n\
+@item @var{shape} = \"full\"\n\
+Return the full convolution.\n\
 \n\
-@item @var{shape} = 'same'\n\
-same size as a. 'central' part of convolution\n\
+@item @var{shape} = \"same\"\n\
+Return central part of the convolution with the same size as @var{a}.\n\
 \n\
-@item @var{shape} = 'valid'\n\
-only parts which do not include zero-padded edges\n\
+@item @var{shape} = \"valid\"\n\
+Return only the parts which do not include zero-padded edges.\n\
 @end table\n\
 \n\
-By default @var{shape} is 'full'.\n\
+By default @var{shape} is @samp{\"full\"}.\n\
 @end deftypefn")
 {
   octave_value retval;
   octave_value tmp;
   int nargin = args.length ();
   std::string shape = "full"; //default
   bool separable = false;
   convn_type ct;
@@ -287,21 +279,19 @@ By default @var{shape} is 'full'.\n\
     ct = convn_valid;
   else
     {
       error ("convn: shape type not valid");
       print_usage ();
       return retval;
     }
 
-  if (args(0).is_single_type () || 
-      args(1).is_single_type ())
+  if (args(0).is_single_type () || args(1).is_single_type ())
     {
-      if (args(0).is_complex_type ()
-          || args(1).is_complex_type ())
+      if (args(0).is_complex_type () || args(1).is_complex_type ())
         {
           FloatComplexNDArray a (args(0).float_complex_array_value ());
           if (args(1).is_real_type ())
             {
               FloatNDArray b (args(1).float_array_value ());
               retval = convn (a, b, ct);
             }
           else
@@ -314,18 +304,17 @@ By default @var{shape} is 'full'.\n\
         {
           FloatNDArray a (args(0).float_array_value ());
           FloatNDArray b (args(1).float_array_value ());
           retval = convn (a, b, ct);
         }
     }
   else
     {
-      if (args(0).is_complex_type ()
-          || args(1).is_complex_type ())
+      if (args(0).is_complex_type () || args(1).is_complex_type ())
         {
           ComplexNDArray a (args(0).complex_array_value ());
           if (args(1).is_real_type ())
             {
               NDArray b (args(1).array_value ());
               retval = convn (a, b, ct);
             }
           else
