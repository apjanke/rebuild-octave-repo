# HG changeset patch
# User jwe
# Date 748343172 0
#      Sat Sep 18 09:06:12 1993 +0000
# Node ID e122c49e9726c72333a36148454e1de89babd36d
# Parent  3438ee77fea27659414d5d2841701b5023bec5f2
[project @ 1993-09-18 09:06:01 by jwe]
Changes to make gplot smarter about distinguishing ranges and literal
matrices.

diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -438,55 +438,59 @@ EXPON	([DdEe][+-]?{D}+)
 			  convert_spaces_to_comma = 1;
 			  return ';';
 			}
 
 \]			{
 			  if (! in_brace_or_paren.empty ())
 			    in_brace_or_paren.pop ();
 
-			  if (plotting)
+			  if (plotting && ! past_plot_range)
 			    {
 			      in_plot_range = 0;
 			      RETURN (CLOSE_BRACE);
 			    }
 			  else
 			    RETURN (']');
 			}
 
 {D}+{EXPON}?{Im}	|
 {D}+\.{D}*{EXPON}?{Im}	|
 \.{D}+{EXPON}?{Im}	{
 			  int nread = sscanf (yytext, "%lf", &(yylval.number));
 			  assert (nread == 1);
 			  quote_is_transpose = 1;
 			  cant_be_identifier = 1;
 			  convert_spaces_to_comma = 1;
+			  if (plotting && ! in_plot_range)
+			    past_plot_range = 1;
 			  current_input_column += yyleng;
 			  DO_COMMA_INSERT_CHECK;
 			  return IMAG_NUM;
 			}
 
 {D}+{EXPON}?		|
 {D}+\.{D}*{EXPON}?	|
 \.{D}+{EXPON}?		|
 			{
 			  int nread = sscanf (yytext, "%lf", &(yylval.number));
 			  assert (nread == 1);
 			  quote_is_transpose = 1;
 			  cant_be_identifier = 1;
 			  convert_spaces_to_comma = 1;
+			  if (plotting && ! in_plot_range)
+			    past_plot_range = 1;
 			  current_input_column += yyleng;
 			  DO_COMMA_INSERT_CHECK;
 			  return NUM;
 			}
 
 \[{S}*		{
 		  in_brace_or_paren.push (1);
-		  if (plotting)
+		  if (plotting && ! past_plot_range)
 		    {
 		      in_plot_range = 1;
 		      RETURN (OPEN_BRACE);
 		    }
 
 		  if (do_comma_insert)
 		    {
 		      yyless (0);
@@ -539,16 +543,19 @@ EXPON	([DdEe][+-]?{D}+)
 			  quote_is_transpose = 0;
 			  cant_be_identifier = 0;
 			  convert_spaces_to_comma = 1;
 			  current_input_column += yyleng;
 			  return plot_option_kw;
 			}
 		    }
 
+		  if (plotting && ! in_plot_range)
+		    past_plot_range = 1;
+
 		  if (plotting && in_plot_style)
 		    {
 		      char *sty = plot_style_token (&tok[1]);
 		      if (sty != (char *) NULL)
 			{
 			  yylval.string = strsave (sty);
 			  if (in_plot_style)
 			    {
@@ -718,31 +725,49 @@ EXPON	([DdEe][+-]?{D}+)
 "~="		{ BIN_OP_RETURN (EXPR_NE); }
 "!="		{ BIN_OP_RETURN (EXPR_NE); }
 "<>"		{ BIN_OP_RETURN (EXPR_NE); }
 ">="		{ BIN_OP_RETURN (EXPR_GE); }
 "||"		{ BIN_OP_RETURN (EXPR_OR); }
 "&&"		{ BIN_OP_RETURN (EXPR_AND); }
 "|"		{ BIN_OP_RETURN (EXPR_OR); }
 "&"		{ BIN_OP_RETURN (EXPR_AND); }
-"!"		{ RETURN (EXPR_NOT); }
-"~"		{ BIN_OP_RETURN (EXPR_NOT); }
+"!"		{
+		  if (plotting && ! in_plot_range)
+		    past_plot_range = 1;
+		  RETURN (EXPR_NOT);
+		}
+"~"		{
+		  if (plotting && ! in_plot_range)
+		    past_plot_range = 1;
+		  BIN_OP_RETURN (EXPR_NOT);
+		}
 "<"		{ BIN_OP_RETURN (EXPR_LT); }
 ">"		{ BIN_OP_RETURN (EXPR_GT); }
-"+"		{ BIN_OP_RETURN ('+'); }
-"-"		{ BIN_OP_RETURN ('-'); }
+"+"		{ 
+		  if (plotting && ! in_plot_range)
+		    past_plot_range = 1;
+		  BIN_OP_RETURN ('+');
+		}
+"-"		{
+		  if (plotting && ! in_plot_range)
+		    past_plot_range = 1;
+		  BIN_OP_RETURN ('-');
+		}
 "**"		{ BIN_OP_RETURN (POW); }
 "*"		{ BIN_OP_RETURN ('*'); }
 "/"		{ BIN_OP_RETURN ('/'); }
 "\\"		{ BIN_OP_RETURN (LEFTDIV); }
 ";"		{ RETURN (';'); }
 ","		{ RETURN (','); }
 "^"		{ BIN_OP_RETURN (POW); }
 "="		{ RETURN ('='); }
 "("		{
+		  if (plotting && ! in_plot_range)
+		    past_plot_range = 1;
 		  in_brace_or_paren.push (0);
 		  RETURN ('(');
 		}
 ")"		{
 		  if (! in_brace_or_paren.empty ())
 		    in_brace_or_paren.pop ();
 		  DO_COMMA_INSERT_CHECK;
 		  current_input_column++;
@@ -793,16 +818,17 @@ reset_parser (void)
   mlnm.clear ();
   defining_func = 0;
   curr_sym_tab = top_level_sym_tab;
   get_input_from_eval_string = 0;
   quote_is_transpose = 0;
   current_input_column = 0;
   do_comma_insert = 0;
   plotting = 0;
+  past_plot_range = 0;
   in_plot_range = 0;
   in_plot_using = 0;
   in_plot_style = 0;
   cant_be_identifier = 0;
   convert_spaces_to_comma = 1;
   beginning_of_function = 0;
   in_brace_or_paren.clear ();
   yyrestart (stdin);
@@ -977,19 +1003,19 @@ plot_style_token (char *s)
 }
 
 static int
 is_plot_keyword (char *s)
 {
   if (almost_match ("title", s))
     return TITLE;
   else if (almost_match ("using", s))
-    { in_plot_using = 1; return USING; }
+    { in_plot_using = 1; past_plot_range = 1; return USING; }
   else if (almost_match ("with", s))
-    { in_plot_style = 1; return WITH; }
+    { in_plot_style = 1; past_plot_range = 1; return WITH; }
   else
     return 0;
 }
 
 /*
  * Handle keywords.  Could probably be more efficient...
  */
 static int
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -83,16 +83,20 @@ int current_input_column = 0;
 
 // Buffer for help text snagged from M-files.
 // Probably shouldn't be a fixed size...
 char help_buf [HELP_BUF_LENGTH];
 
 // Nonzero means we're working on a plot command.
 int plotting = 0;
 
+// Nonzero means we've seen something that means we must be past the
+// range part of a plot command.
+int past_plot_range = 0;
+
 // Nonzero means we're looking at the range part of a plot command.
 int in_plot_range = 0;
 
 // Nonzero means we're looking at the using part of a plot command.
 int in_plot_using = 0;
 
 // Nonzero means we're looking at the style part of a plot command.
 int in_plot_style = 0;
@@ -390,25 +394,27 @@ command		: plot_command
 		  { $$ = NULL_TREE; }
 		;
 
 plot_command	: PLOT plot_command1
 		  {
 		    tree_subplot_list *tmp = $2->reverse ();
 		    $$ = new tree_plot_command (tmp, $1);
 		    plotting = 0;
+		    past_plot_range = 0;
 		    in_plot_range = 0;
 		    in_plot_using = 0;
 		    in_plot_style = 0;
 		  }
 		| PLOT ranges plot_command1
 		  {
 		    tree_subplot_list *tmp = $3->reverse ();
 		    $$ = new tree_plot_command (tmp, $2, $1);
 		    plotting = 0;
+		    past_plot_range = 0;
 		    in_plot_range = 0;
 		    in_plot_using = 0;
 		    in_plot_style = 0;
 		  }
 		;
 
 ranges		: ranges1
 		  { $$ = new tree_plot_limits ($1); }
