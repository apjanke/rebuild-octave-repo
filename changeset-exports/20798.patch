# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1449173221 18000
#      Thu Dec 03 15:07:01 2015 -0500
# Node ID bb585db6dee2921c17feb16970a71aed1174a62f
# Parent  492738d32c606dd111f76c11ac41475a3f494a6c
eliminate return statements after calls to print_usage

* lex.ll, oct-parse.in.yy: Eliminate return statements after calls to
print_usage.

diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -1911,16 +1911,19 @@ If @var{name} is omitted, return a list 
 @end deftypefn")
 {
   octave_value retval;
 
   int argc = args.length () + 1;
 
   string_vector argv = args.make_argv ("iskeyword");
 
+  if (argc < 1 || argc > 2)
+    print_usage ();
+
   if (argc == 1)
     {
       // Neither set and get are keywords.  See the note in the
       // is_keyword function for additional details.
 
       string_vector lst (TOTAL_KEYWORDS);
 
       int j = 0;
@@ -1936,18 +1939,16 @@ If @var{name} is omitted, return a list 
       lst.resize (j);
 
       retval = Cell (lst.sort ());
     }
   else if (argc == 2)
     {
       retval = is_keyword (argv[1]);
     }
-  else
-    print_usage ();
 
   return retval;
 }
 
 /*
 
 %!assert (iskeyword ("for"))
 %!assert (iskeyword ("fort"), false)
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -4350,16 +4350,19 @@ not loaded anymore during the current Oc
 \n\
 @seealso{PKG_ADD}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
+  if (nargin == 1 || nargin > 3)
+    print_usage ();
+
   if (nargin == 0)
     {
       Cell func_names (dim_vector (autoload_map.size (), 1));
       Cell file_names (dim_vector (autoload_map.size (), 1));
 
       octave_idx_type i = 0;
       typedef std::map<std::string, std::string>::const_iterator am_iter;
       for (am_iter p = autoload_map.begin (); p != autoload_map.end (); p++)
@@ -4372,17 +4375,17 @@ not loaded anymore during the current Oc
 
       octave_map m;
 
       m.assign ("function", func_names);
       m.assign ("file", file_names);
 
       retval = m;
     }
-  else if (nargin == 2 || nargin == 3)
+  else
     {
       string_vector argv = args.make_argv ("autoload");
 
       std::string nm = argv[2];
 
       if (! octave_env::absolute_pathname (nm))
         {
           octave_user_code *fcn = octave_call_stack::caller_user_code ();
@@ -4420,18 +4423,16 @@ not loaded anymore during the current Oc
             error_with_id ("Octave:invalid-input-arg",
                            "autoload: third argument can only be 'remove'");
 
           // Remove function from symbol table and autoload map.
           symbol_table::clear_dld_function (argv[1]);
           autoload_map.erase (argv[1]);
         }
     }
-  else
-    print_usage ();
 
   return retval;
 }
 
 void
 source_file (const std::string& file_name, const std::string& context,
              bool verbose, bool require_file, const std::string& warn_for)
 {
@@ -4549,20 +4550,17 @@ Given the argument @qcode{\"fullpathext\
 the filename and the extension.\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin > 1)
-    {
-      print_usage ();
-      return retval;
-    }
+    print_usage ();
 
   std::string arg;
 
   if (nargin == 1)
     arg = args(0).xstring_value ("mfilename: expecting argument to be a character string");
 
   std::string fname;
 
@@ -4606,30 +4604,28 @@ This is equivalent to executing commands
 requiring the file to be named @file{@var{file}.m}.\n\
 @seealso{run}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
-  if (nargin == 1 || nargin == 2)
-    {
-      std::string file_name = args(0).xstring_value ("source: expecting filename as argument");
-
-      std::string context;
-
-      if (nargin == 2)
-        context = args(1).xstring_value ("source: expecting context to be character string");
-
-      source_file (file_name, context);
-    }
-  else
+  if (nargin < 1 || nargin > 2)
     print_usage ();
 
+  std::string file_name = args(0).xstring_value ("source: expecting filename as argument");
+
+  std::string context;
+
+  if (nargin == 2)
+    context = args(1).xstring_value ("source: expecting context to be character string");
+
+  source_file (file_name, context);
+
   return retval;
 }
 
 // Evaluate an Octave function (built-in or interpreted) and return
 // the list of result values.  NAME is the name of the function to
 // call.  ARGS are the arguments to the function.  NARGOUT is the
 // number of output arguments expected.
 
@@ -4750,26 +4746,22 @@ feval (@var{f}, 1)\n\
 \n\
 @noindent\n\
 are equivalent ways to call the function referred to by @var{f}.  If it\n\
 cannot be predicted beforehand whether @var{f} is a function handle,\n\
 function name in a string, or inline function then @code{feval} can be used\n\
 instead.\n\
 @end deftypefn")
 {
-  octave_value_list retval;
-
   int nargin = args.length ();
 
-  if (nargin > 0)
-    retval = feval (args, nargout);
-  else
+  if (nargin == 0)
     print_usage ();
 
-  return retval;
+  return feval (args, nargout);
 }
 
 DEFUN (builtin, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {[@dots{}] =} builtin (@var{f}, @dots{})\n\
 Call the base function @var{f} even if @var{f} is overloaded to another\n\
 function for the given type signature.\n\
 \n\
@@ -4792,29 +4784,27 @@ builtin (\"sin\", 0)\n\
 @end group\n\
 @end example\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
-  if (nargin > 0)
-    {
-      const std::string name (args(0).xstring_value ("builtin: function name (F) must be a string"));
-
-      octave_value fcn = symbol_table::builtin_find (name);
-
-      if (fcn.is_defined ())
-        retval = feval (fcn.function_value (), args.splice (0, 1), nargout);
-      else
-        error ("builtin: lookup for symbol '%s' failed", name.c_str ());
-    }
+  if (nargin == 0)
+    print_usage ();
+
+  const std::string name (args(0).xstring_value ("builtin: function name (F) must be a string"));
+
+  octave_value fcn = symbol_table::builtin_find (name);
+
+  if (fcn.is_defined ())
+    retval = feval (fcn.function_value (), args.splice (0, 1), nargout);
   else
-    print_usage ();
+    error ("builtin: lookup for symbol '%s' failed", name.c_str ());
 
   return retval;
 }
 
 octave_value_list
 eval_string (const std::string& eval_str, bool silent,
              int& parse_status, int nargout)
 {
@@ -4952,68 +4942,66 @@ blocks instead.  These techniques have h
 the security considerations that the evaluation of arbitrary code does.\n\
 @seealso{evalin}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
-  if (nargin > 0)
+  if (nargin == 0)
+    print_usage ();
+
+  unwind_protect frame;
+
+  if (nargin > 1)
+    {
+      frame.protect_var (buffer_error_messages);
+      buffer_error_messages++;
+    }
+
+  int parse_status = 0;
+
+  bool execution_error = false;
+
+  octave_value_list tmp;
+
+  try
     {
-      unwind_protect frame;
-
-      if (nargin > 1)
-        {
-          frame.protect_var (buffer_error_messages);
-          buffer_error_messages++;
-        }
-
-      int parse_status = 0;
-
-      bool execution_error = false;
-
-      octave_value_list tmp;
-
-      try
-        {
-          tmp = eval_string (args(0), nargout > 0, parse_status, nargout);
-        }
-      catch (const octave_execution_exception&)
-        {
-          recover_from_exception ();
-
-          execution_error = true;
-        }
-
-      if (nargin > 1 && (parse_status != 0 || execution_error))
-        {
-          // Set up for letting the user print any messages from
-          // errors that occurred in the first part of this eval().
-
-          buffer_error_messages--;
-
-          tmp = eval_string (args(1), nargout > 0, parse_status, nargout);
-
-          if (nargout > 0)
-            retval = tmp;
-        }
-      else
-        {
-          if (nargout > 0)
-            retval = tmp;
-
-          // FIXME: we should really be rethrowing whatever exception occurred,
-          // not just throwing an execution exception.
-          if (execution_error)
-            octave_throw_execution_exception ();
-        }
+      tmp = eval_string (args(0), nargout > 0, parse_status, nargout);
+    }
+  catch (const octave_execution_exception&)
+    {
+      recover_from_exception ();
+
+      execution_error = true;
+    }
+
+  if (nargin > 1 && (parse_status != 0 || execution_error))
+    {
+      // Set up for letting the user print any messages from
+      // errors that occurred in the first part of this eval().
+
+      buffer_error_messages--;
+
+      tmp = eval_string (args(1), nargout > 0, parse_status, nargout);
+
+      if (nargout > 0)
+        retval = tmp;
     }
   else
-    print_usage ();
+    {
+      if (nargout > 0)
+        retval = tmp;
+
+      // FIXME: we should really be rethrowing whatever exception occurred,
+      // not just throwing an execution exception.
+      if (execution_error)
+        octave_throw_execution_exception ();
+    }
 
   return retval;
 }
 
 /*
 
 %!shared x
 %! x = 1;
@@ -5058,40 +5046,38 @@ Assign @var{value} to @var{varname} in c
 may be either @qcode{\"base\"} or @qcode{\"caller\"}.\n\
 @seealso{evalin}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
-  if (nargin == 3)
-    {
-      std::string context = args(0).xstring_value ("assignin: CONTEXT must be a string");
-
-      unwind_protect frame;
-
-      if (context == "caller")
-        octave_call_stack::goto_caller_frame ();
-      else if (context == "base")
-        octave_call_stack::goto_base_frame ();
-      else
-        error ("assignin: CONTEXT must be \"caller\" or \"base\"");
-
-      frame.add_fcn (octave_call_stack::pop);
-
-      std::string nm = args(1).xstring_value ("assignin: VARNAME must be a string");
-
-      if (valid_identifier (nm))
-        symbol_table::assign (nm, args(2));
-      else
-        error ("assignin: invalid variable name in argument VARNAME");
-    }
+  if (nargin != 3)
+    print_usage ();
+
+  std::string context = args(0).xstring_value ("assignin: CONTEXT must be a string");
+
+  unwind_protect frame;
+
+  if (context == "caller")
+    octave_call_stack::goto_caller_frame ();
+  else if (context == "base")
+    octave_call_stack::goto_base_frame ();
   else
-    print_usage ();
+    error ("assignin: CONTEXT must be \"caller\" or \"base\"");
+
+  frame.add_fcn (octave_call_stack::pop);
+
+  std::string nm = args(1).xstring_value ("assignin: VARNAME must be a string");
+
+  if (valid_identifier (nm))
+    symbol_table::assign (nm, args(2));
+  else
+    error ("assignin: invalid variable name in argument VARNAME");
 
   return retval;
 }
 
 DEFUN (evalin, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} evalin (@var{context}, @var{try})\n\
 @deftypefnx {Built-in Function} {} evalin (@var{context}, @var{try}, @var{catch})\n\
@@ -5099,81 +5085,79 @@ Like @code{eval}, except that the expres
 @var{context}, which may be either @qcode{\"caller\"} or @qcode{\"base\"}.\n\
 @seealso{eval, assignin}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
-  if (nargin > 1)
+  if (nargin < 2)
+    print_usage ();
+
+  std::string context = args(0).xstring_value ("evalin: CONTEXT must be a string");
+
+  unwind_protect frame;
+
+  if (context == "caller")
+    octave_call_stack::goto_caller_frame ();
+  else if (context == "base")
+    octave_call_stack::goto_base_frame ();
+  else
+    error ("evalin: CONTEXT must be \"caller\" or \"base\"");
+
+  frame.add_fcn (octave_call_stack::pop);
+
+  if (nargin > 2)
     {
-      std::string context = args(0).xstring_value ("evalin: CONTEXT must be a string");
-
-      unwind_protect frame;
-
-      if (context == "caller")
-        octave_call_stack::goto_caller_frame ();
-      else if (context == "base")
-        octave_call_stack::goto_base_frame ();
-      else
-        error ("evalin: CONTEXT must be \"caller\" or \"base\"");
-
-      frame.add_fcn (octave_call_stack::pop);
-
-      if (nargin > 2)
-        {
-          frame.protect_var (buffer_error_messages);
-          buffer_error_messages++;
-        }
-
-      int parse_status = 0;
-
-      bool execution_error = false;
-
-      octave_value_list tmp;
-
-      try
-        {
-          tmp = eval_string (args(1), nargout > 0,
-                             parse_status, nargout);
-        }
-      catch (const octave_execution_exception&)
-        {
-          recover_from_exception ();
-
-          execution_error = true;
-        }
-
-      if (nargin > 2 && (parse_status != 0 || execution_error))
-        {
-          // Set up for letting the user print any messages from
-          // errors that occurred in the first part of this eval().
-
-          buffer_error_messages--;
-
-          tmp = eval_string (args(2), nargout > 0,
-                             parse_status, nargout);
-
-          retval = (nargout > 0) ? tmp : octave_value_list ();
-        }
-      else
-        {
-          if (nargout > 0)
-            retval = tmp;
-
-          // FIXME: we should really be rethrowing whatever
-          // exception occurred, not just throwing an
-          // execution exception.
-          if (execution_error)
-            octave_throw_execution_exception ();
-        }
+      frame.protect_var (buffer_error_messages);
+      buffer_error_messages++;
+    }
+
+  int parse_status = 0;
+
+  bool execution_error = false;
+
+  octave_value_list tmp;
+
+  try
+    {
+      tmp = eval_string (args(1), nargout > 0,
+                         parse_status, nargout);
+    }
+  catch (const octave_execution_exception&)
+    {
+      recover_from_exception ();
+
+      execution_error = true;
+    }
+
+  if (nargin > 2 && (parse_status != 0 || execution_error))
+    {
+      // Set up for letting the user print any messages from
+      // errors that occurred in the first part of this eval().
+
+      buffer_error_messages--;
+
+      tmp = eval_string (args(2), nargout > 0,
+                         parse_status, nargout);
+
+      retval = (nargout > 0) ? tmp : octave_value_list ();
     }
   else
-    print_usage ();
+    {
+      if (nargout > 0)
+        retval = tmp;
+
+      // FIXME: we should really be rethrowing whatever
+      // exception occurred, not just throwing an
+      // execution exception.
+      if (execution_error)
+        octave_throw_execution_exception ();
+    }
 
   return retval;
 }
 
 DEFUN (__parser_debug_flag__, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} __parser_debug_flag__ ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} __parser_debug_flag__ (@var{new_val})\n\
@@ -5199,43 +5183,41 @@ DEFUN (__parse_file__, args, ,
 @deftypefn {Built-in Function} {} __parse_file__ (@var{file}, @var{verbose})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
-  if (nargin == 1 || nargin == 2)
+  if (nargin < 1 || nargin > 2)
+    print_usage ();
+
+  std::string file = args(0).xstring_value ("__parse_file__: expecting filename as argument");
+
+  std::string full_file = octave_env::make_absolute (file);
+
+  size_t file_len = file.length ();
+
+  if ((file_len > 4 && file.substr (file_len-4) == ".oct")
+      || (file_len > 4 && file.substr (file_len-4) == ".mex")
+      || (file_len > 2 && file.substr (file_len-2) == ".m"))
     {
-      std::string file = args(0).xstring_value ("__parse_file__: expecting filename as argument");
-
-      std::string full_file = octave_env::make_absolute (file);
-
-      size_t file_len = file.length ();
-
-      if ((file_len > 4 && file.substr (file_len-4) == ".oct")
-          || (file_len > 4 && file.substr (file_len-4) == ".mex")
-          || (file_len > 2 && file.substr (file_len-2) == ".m"))
-        {
-          file = octave_env::base_pathname (file);
-          file = file.substr (0, file.find_last_of ('.'));
-
-          size_t pos = file.find_last_of (file_ops::dir_sep_str ());
-          if (pos != std::string::npos)
-            file = file.substr (pos+1);
-        }
-
-      if (nargin == 2)
-        octave_stdout << "parsing " << full_file << std::endl;
-
-      octave_function *fcn = parse_fcn_file (full_file, file, "", "",
-                                             true, false, false,
-                                             false, "__parse_file__");
-
-      if (fcn)
-        delete fcn;
+      file = octave_env::base_pathname (file);
+      file = file.substr (0, file.find_last_of ('.'));
+
+      size_t pos = file.find_last_of (file_ops::dir_sep_str ());
+      if (pos != std::string::npos)
+        file = file.substr (pos+1);
     }
-  else
-    print_usage ();
+
+  if (nargin == 2)
+    octave_stdout << "parsing " << full_file << std::endl;
+
+  octave_function *fcn = parse_fcn_file (full_file, file, "", "",
+                                         true, false, false,
+                                         false, "__parse_file__");
+
+  if (fcn)
+    delete fcn;
 
   return retval;
 }
