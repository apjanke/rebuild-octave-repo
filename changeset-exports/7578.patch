# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1205246973 14400
#      Tue Mar 11 10:49:33 2008 -0400
# Node ID 91f8446ce4ae9085763313060d576bdb8208e0cf
# Parent  ba8fcc115fee525b479d94ac5a53115ecf7ee257
handle possible error from EIG

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2008-03-11  John W. Eaton  <jwe@octave.org>
+
+	* DLD-FUNCTIONS/eig.cc (Feig): Handle possible error from EIG.
+	* DLD-FUNCTIONS/qp.cc (qp, Fqp): Likewise.
+	* xpow.cc (xpow): Likewise.
+
 2008-03-10  John W. Eaton  <jwe@octave.org>
 
 	* mex.cc (mxCreateLogicalScalar): Argument is now mxLogical.
 
 	* data.cc (Fisfloat): New function.
 	* ov.h (octave_value::is_float_type): Ditto.
 	* ov-base.h (octave_base_value::is_float_type): Ditto.
 	* ov-complex.h (octave_complex): Ditto.
diff --git a/src/DLD-FUNCTIONS/__qp__.cc b/src/DLD-FUNCTIONS/__qp__.cc
--- a/src/DLD-FUNCTIONS/__qp__.cc
+++ b/src/DLD-FUNCTIONS/__qp__.cc
@@ -132,16 +132,23 @@ qp (const Matrix& H, const ColumnVector&
 	      Wact.resize (n_act-n_eq, i);
 	    }
 	}
     }
 
   // Computing the ???
 
   EIG eigH (H);
+
+  if (error_state)
+    {
+      error ("qp: failed to compute eigenvalues of H");
+      return -1;
+    }
+
   ColumnVector eigenvalH = real (eigH.eigenvalues ());
   Matrix eigenvecH = real (eigH.eigenvectors ());
   double minReal = eigenvalH.min ();
   octave_idx_type indminR = 0;
   for (octave_idx_type i = 0; i < n; i++)
     {
       if (minReal == eigenvalH(i))
 	{
@@ -270,16 +277,23 @@ qp (const Matrix& H, const ColumnVector&
 	    }
 	  else
 	    {
 	      info = 1;
 
 	      // Searching for the most negative curvature.
 
 	      EIG eigrH (rH);
+
+	      if (error_state)
+		{
+		  error ("qp: failed to compute eigenvalues of rH");
+		  return -1;
+		}
+
 	      ColumnVector eigenvalrH = real (eigrH.eigenvalues ());
 	      Matrix eigenvecrH = real (eigrH.eigenvectors ());
 	      double mRrH = eigenvalrH.min ();
 	      indminR = 0;
 	      for (octave_idx_type i = 0; i < n; i++)
 		{
 		  if (mRrH == eigenvalH(i))
 		    {
@@ -491,20 +505,25 @@ Undocumented internal function.\n\
 	  // Copying the initial guess in the working variable
 	  ColumnVector x = x0;
 
 	  // Reordering the Lagrange multipliers
 	  ColumnVector lambda;
 
 	  int info = qp (H, q, Aeq, beq, Ain, bin, maxit, x, lambda, iter);
 
-	  retval(3) = iter;
-	  retval(2) = info;
-	  retval(1) = lambda;
-	  retval(0) = x;
+	  if (! error_state)
+	    {
+	      retval(3) = iter;
+	      retval(2) = info;
+	      retval(1) = lambda;
+	      retval(0) = x;
+	    }
+	  else
+	    error ("qp: internal error");
 	}
       else
 	error ("__qp__: invalid arguments");
     }
   else
     print_usage ();
 
   return retval;
diff --git a/src/DLD-FUNCTIONS/eig.cc b/src/DLD-FUNCTIONS/eig.cc
--- a/src/DLD-FUNCTIONS/eig.cc
+++ b/src/DLD-FUNCTIONS/eig.cc
@@ -96,28 +96,31 @@ The eigenvalues returned by @code{eig} a
 	result = EIG (ctmp, nargout > 1);
     }
   else
     {
       gripe_wrong_type_arg ("eig", tmp);
       return retval;
     }
 
-  if (nargout == 0 || nargout == 1)
-    {
-      retval(0) = result.eigenvalues ();
-    }
-  else
+  if (! error_state)
     {
-      // Blame it on Matlab.
+      if (nargout == 0 || nargout == 1)
+	{
+	  retval(0) = result.eigenvalues ();
+	}
+      else
+	{
+	  // Blame it on Matlab.
 
-      ComplexDiagMatrix d (result.eigenvalues ());
+	  ComplexDiagMatrix d (result.eigenvalues ());
 
-      retval(1) = d;
-      retval(0) = result.eigenvectors ();
+	  retval(1) = d;
+	  retval(0) = result.eigenvectors ();
+	}
     }
 
   return retval;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/src/xpow.cc b/src/xpow.cc
--- a/src/xpow.cc
+++ b/src/xpow.cc
@@ -96,30 +96,36 @@ xpow (double a, const Matrix& b)
   octave_idx_type nr = b.rows ();
   octave_idx_type nc = b.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
     error ("for x^A, A must be square");
   else
     {
       EIG b_eig (b);
-      ComplexColumnVector lambda (b_eig.eigenvalues ());
-      ComplexMatrix Q (b_eig.eigenvectors ());
 
-      for (octave_idx_type i = 0; i < nr; i++)
+      if (! error_state)
 	{
-	  Complex elt = lambda (i);
-	  if (std::imag (elt) == 0.0)
-	    lambda (i) = std::pow (a, std::real (elt));
-	  else
-	    lambda (i) = std::pow (a, elt);
+	  ComplexColumnVector lambda (b_eig.eigenvalues ());
+	  ComplexMatrix Q (b_eig.eigenvectors ());
+
+	  for (octave_idx_type i = 0; i < nr; i++)
+	    {
+	      Complex elt = lambda(i);
+	      if (std::imag (elt) == 0.0)
+		lambda(i) = std::pow (a, std::real (elt));
+	      else
+		lambda(i) = std::pow (a, elt);
+	    }
+	  ComplexDiagMatrix D (lambda);
+
+	  retval = ComplexMatrix (Q * D * Q.inverse ());
 	}
-      ComplexDiagMatrix D (lambda);
-
-      retval = ComplexMatrix (Q * D * Q.inverse ());
+      else
+	error ("xpow: matrix diagonalization failed");
     }
 
   return retval;
 }
 
 // -*- 3 -*-
 octave_value
 xpow (double a, const Complex& b)
@@ -139,30 +145,36 @@ xpow (double a, const ComplexMatrix& b)
   octave_idx_type nr = b.rows ();
   octave_idx_type nc = b.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
     error ("for x^A, A must be square");
   else
     {
       EIG b_eig (b);
-      ComplexColumnVector lambda (b_eig.eigenvalues ());
-      ComplexMatrix Q (b_eig.eigenvectors ());
 
-      for (octave_idx_type i = 0; i < nr; i++)
+      if (! error_state)
 	{
-	  Complex elt = lambda (i);
-	  if (std::imag (elt) == 0.0)
-	    lambda (i) = std::pow (a, std::real (elt));
-	  else
-	    lambda (i) = std::pow (a, elt);
+	  ComplexColumnVector lambda (b_eig.eigenvalues ());
+	  ComplexMatrix Q (b_eig.eigenvectors ());
+
+	  for (octave_idx_type i = 0; i < nr; i++)
+	    {
+	      Complex elt = lambda(i);
+	      if (std::imag (elt) == 0.0)
+		lambda(i) = std::pow (a, std::real (elt));
+	      else
+		lambda(i) = std::pow (a, elt);
+	    }
+	  ComplexDiagMatrix D (lambda);
+
+	  retval = ComplexMatrix (Q * D * Q.inverse ());
 	}
-      ComplexDiagMatrix D (lambda);
-
-      retval = ComplexMatrix (Q * D * Q.inverse ());
+      else
+	error ("xpow: matrix diagonalization failed");
     }
 
   return retval;
 }
 
 // -*- 5 -*-
 octave_value
 xpow (const Matrix& a, double b)
@@ -223,25 +235,31 @@ xpow (const Matrix& a, double b)
 		}
 
 	      retval = result;
 	    }
 	}
       else
 	{
 	  EIG a_eig (a);
-	  ComplexColumnVector lambda (a_eig.eigenvalues ());
-	  ComplexMatrix Q (a_eig.eigenvectors ());
+
+	  if (! error_state)
+	    {
+	      ComplexColumnVector lambda (a_eig.eigenvalues ());
+	      ComplexMatrix Q (a_eig.eigenvectors ());
 
-	  for (octave_idx_type i = 0; i < nr; i++)
-	    lambda (i) = std::pow (lambda (i), b);
+	      for (octave_idx_type i = 0; i < nr; i++)
+		lambda(i) = std::pow (lambda(i), b);
+
+	      ComplexDiagMatrix D (lambda);
 
-	  ComplexDiagMatrix D (lambda);
-
-	  retval = ComplexMatrix (Q * D * Q.inverse ());
+	      retval = ComplexMatrix (Q * D * Q.inverse ());
+	    }
+	  else
+	    error ("xpow: matrix diagonalization failed");
 	}
     }
 
   return retval;
 }
 
 // -*- 6 -*-
 octave_value
@@ -252,25 +270,31 @@ xpow (const Matrix& a, const Complex& b)
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
     error ("for A^b, A must be square");
   else
     {
       EIG a_eig (a);
-      ComplexColumnVector lambda (a_eig.eigenvalues ());
-      ComplexMatrix Q (a_eig.eigenvectors ());
+
+      if (! error_state)
+	{
+	  ComplexColumnVector lambda (a_eig.eigenvalues ());
+	  ComplexMatrix Q (a_eig.eigenvectors ());
 
-      for (octave_idx_type i = 0; i < nr; i++)
-	lambda (i) = std::pow (lambda (i), b);
+	  for (octave_idx_type i = 0; i < nr; i++)
+	    lambda(i) = std::pow (lambda(i), b);
+
+	  ComplexDiagMatrix D (lambda);
 
-      ComplexDiagMatrix D (lambda);
-
-      retval = ComplexMatrix (Q * D * Q.inverse ());
+	  retval = ComplexMatrix (Q * D * Q.inverse ());
+	}
+      else
+	error ("xpow: matrix diagonalization failed");
     }
 
   return retval;
 }
 
 // -*- 7 -*-
 octave_value
 xpow (const Complex& a, double b)
@@ -294,30 +318,36 @@ xpow (const Complex& a, const Matrix& b)
   octave_idx_type nr = b.rows ();
   octave_idx_type nc = b.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
     error ("for x^A, A must be square");
   else
     {
       EIG b_eig (b);
-      ComplexColumnVector lambda (b_eig.eigenvalues ());
-      ComplexMatrix Q (b_eig.eigenvectors ());
 
-      for (octave_idx_type i = 0; i < nr; i++)
+      if (! error_state)
 	{
-	  Complex elt = lambda (i);
-	  if (std::imag (elt) == 0.0)
-	    lambda (i) = std::pow (a, std::real (elt));
-	  else
-	    lambda (i) = std::pow (a, elt);
+	  ComplexColumnVector lambda (b_eig.eigenvalues ());
+	  ComplexMatrix Q (b_eig.eigenvectors ());
+
+	  for (octave_idx_type i = 0; i < nr; i++)
+	    {
+	      Complex elt = lambda(i);
+	      if (std::imag (elt) == 0.0)
+		lambda(i) = std::pow (a, std::real (elt));
+	      else
+		lambda(i) = std::pow (a, elt);
+	    }
+	  ComplexDiagMatrix D (lambda);
+
+	  retval = ComplexMatrix (Q * D * Q.inverse ());
 	}
-      ComplexDiagMatrix D (lambda);
-
-      retval = ComplexMatrix (Q * D * Q.inverse ());
+      else
+	error ("xpow: matrix diagonalization failed");
     }
 
   return retval;
 }
 
 // -*- 9 -*-
 octave_value
 xpow (const Complex& a, const Complex& b)
@@ -336,30 +366,36 @@ xpow (const Complex& a, const ComplexMat
   octave_idx_type nr = b.rows ();
   octave_idx_type nc = b.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
     error ("for x^A, A must be square");
   else
     {
       EIG b_eig (b);
-      ComplexColumnVector lambda (b_eig.eigenvalues ());
-      ComplexMatrix Q (b_eig.eigenvectors ());
 
-      for (octave_idx_type i = 0; i < nr; i++)
+      if (! error_state)
 	{
-	  Complex elt = lambda (i);
-	  if (std::imag (elt) == 0.0)
-	    lambda (i) = std::pow (a, std::real (elt));
-	  else
-	    lambda (i) = std::pow (a, elt);
+	  ComplexColumnVector lambda (b_eig.eigenvalues ());
+	  ComplexMatrix Q (b_eig.eigenvectors ());
+
+	  for (octave_idx_type i = 0; i < nr; i++)
+	    {
+	      Complex elt = lambda(i);
+	      if (std::imag (elt) == 0.0)
+		lambda(i) = std::pow (a, std::real (elt));
+	      else
+		lambda(i) = std::pow (a, elt);
+	    }
+	  ComplexDiagMatrix D (lambda);
+
+	  retval = ComplexMatrix (Q * D * Q.inverse ());
 	}
-      ComplexDiagMatrix D (lambda);
-
-      retval = ComplexMatrix (Q * D * Q.inverse ());
+      else
+	error ("xpow: matrix diagonalization failed");
     }
 
   return retval;
 }
 
 // -*- 11 -*-
 octave_value
 xpow (const ComplexMatrix& a, double b)
@@ -420,25 +456,31 @@ xpow (const ComplexMatrix& a, double b)
 		}
 
 	      retval = result;
 	    }
 	}
       else
 	{
 	  EIG a_eig (a);
-	  ComplexColumnVector lambda (a_eig.eigenvalues ());
-	  ComplexMatrix Q (a_eig.eigenvectors ());
+
+	  if (! error_state)
+	    {
+	      ComplexColumnVector lambda (a_eig.eigenvalues ());
+	      ComplexMatrix Q (a_eig.eigenvectors ());
 
-	  for (octave_idx_type i = 0; i < nr; i++)
-	    lambda (i) = std::pow (lambda (i), b);
+	      for (octave_idx_type i = 0; i < nr; i++)
+		lambda(i) = std::pow (lambda(i), b);
+
+	      ComplexDiagMatrix D (lambda);
 
-	  ComplexDiagMatrix D (lambda);
-
-	  retval = ComplexMatrix (Q * D * Q.inverse ());
+	      retval = ComplexMatrix (Q * D * Q.inverse ());
+	    }
+	  else
+	    error ("xpow: matrix diagonalization failed");
 	}
     }
 
   return retval;
 }
 
 // -*- 12 -*-
 octave_value
@@ -449,25 +491,31 @@ xpow (const ComplexMatrix& a, const Comp
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
     error ("for A^b, A must be square");
   else
     {
       EIG a_eig (a);
-      ComplexColumnVector lambda (a_eig.eigenvalues ());
-      ComplexMatrix Q (a_eig.eigenvectors ());
+
+      if (! error_state)
+	{
+	  ComplexColumnVector lambda (a_eig.eigenvalues ());
+	  ComplexMatrix Q (a_eig.eigenvectors ());
 
-      for (octave_idx_type i = 0; i < nr; i++)
-	lambda (i) = std::pow (lambda (i), b);
+	  for (octave_idx_type i = 0; i < nr; i++)
+	    lambda(i) = std::pow (lambda(i), b);
+
+	  ComplexDiagMatrix D (lambda);
 
-      ComplexDiagMatrix D (lambda);
-
-      retval = ComplexMatrix (Q * D * Q.inverse ());
+	  retval = ComplexMatrix (Q * D * Q.inverse ());
+	}
+      else
+	error ("xpow: matrix diagonalization failed");
     }
 
   return retval;
 }
 
 // Safer pow functions that work elementwise for matrices.
 //
 //       op2 \ op1:   s   m   cs   cm
