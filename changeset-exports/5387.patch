# HG changeset patch
# User jwe
# Date 1118769225 0
#      Tue Jun 14 17:13:45 2005 +0000
# Node ID 5b00a8beb5045be8c88169c1351b8ad1e85ae71e
# Parent  f64ec7b385861830f165f0e050d27a23dea28cde
[project @ 2005-06-14 17:13:45 by jwe]

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -2602,22 +2602,20 @@ ComplexMatrix::too_large_for_float (void
   for (octave_idx_type j = 0; j < nc; j++)
     for (octave_idx_type i = 0; i < nr; i++)
       {
 	Complex val = elem (i, j);
 
 	double r_val = std::real (val);
 	double i_val = std::imag (val);
 
-	if ((! octave_is_NaN_or_NA (r_val)
-	     && ! xisinf (r_val)
-	     && (r_val > FLT_MAX || r_val < FLT_MIN))
-	    || (! octave_is_NaN_or_NA (i_val)
-		&& ! xisinf (i_val)
-		&& (i_val > FLT_MAX || i_val < FLT_MIN)))
+	if ((! (octave_is_NaN_or_NA (r_val) || xisinf (r_val))
+	     && fabs (r_val) > FLT_MAX)
+	    || (! (octave_is_NaN_or_NA (i_val) || xisinf (i_val))
+		&& fabs (i_val) > FLT_MAX))
 	  return true;
       }
 
   return false;
 }
 
 // XXX FIXME XXX Do these really belong here?  Maybe they should be
 // in a base class?
diff --git a/liboctave/CNDArray.cc b/liboctave/CNDArray.cc
--- a/liboctave/CNDArray.cc
+++ b/liboctave/CNDArray.cc
@@ -589,20 +589,20 @@ ComplexNDArray::too_large_for_float (voi
 
   for (octave_idx_type i = 0; i < nel; i++)
     {
       Complex val = elem (i);
 
       double r_val = std::real (val);
       double i_val = std::imag (val);
 
-      if (r_val > FLT_MAX
-	  || i_val > FLT_MAX
-	  || r_val < FLT_MIN
-	  || i_val < FLT_MIN)
+      if ((! (octave_is_NaN_or_NA (r_val) || xisinf (r_val))
+	   && fabs (r_val) > FLT_MAX)
+	  || (! (octave_is_NaN_or_NA (i_val) || xisinf (i_val))
+	      && fabs (i_val) > FLT_MAX))
 	return true;
     }
 
   return false;
 }
 
 boolNDArray
 ComplexNDArray::all (int dim) const
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,17 +1,29 @@
 2005-06-14  John W. Eaton  <jwe@octave.org>
 
-    * dMatrix.cc (Matrix::too_large_for_float): Special case Inf values too.
-    * CMatrix.cc (ComplexMatrix::too_large_for_float): Ditto.
+	* dMatrix.cc (Matrix::too_large_for_float): Only check if abs
+	value is greater than FLT_MAX.
+	* CMatrix.cc (ComplexMatrix::too_large_for_float): Ditto.
+	* dNDArray.cc (NDArray::too_large_for_float): Ditto.
+	* CNDArray.cc (ComplexNDArray::too_large_for_float): Ditto.
+
+	* dMatrix.cc (Matrix::too_large_for_float): Special case Inf
+	values too.
+	* CMatrix.cc (ComplexMatrix::too_large_for_float): Ditto.
+
+	* dNDArray.cc (NDArray::too_large_for_float): Likewise for NaN,
+	NA, Inf values.
+	* CNDArray.cc (ComplexNDArray::too_large_for_float): Ditto.
 
 2005-06-14  David Bateman  <dbateman@free.fr>
 
-    * dMatrix.cc (Matrix::too_large_for_float): Special case NaN and NA values.
-    * CMatrix.cc (ComplexMatrix::too_large_for_float): Ditto.
+	* dMatrix.cc (Matrix::too_large_for_float): Special case NaN and
+	NA values.
+	* CMatrix.cc (ComplexMatrix::too_large_for_float): Ditto.
 
 2005-06-02  John W. Eaton  <jwe@octave.org>
 
 	* Array.cc (assignN): Try harder to correctly resize previously
 	empty LHS.
 
 2005-05-16  David Bateman  <dbateman@free.fr>
 
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -2109,19 +2109,18 @@ bool
 Matrix::too_large_for_float (void) const
 {
   octave_idx_type nel = nelem ();
 
   for (octave_idx_type i = 0; i < nel; i++)
     {
       double val = elem (i);
 
-      if (! octave_is_NaN_or_NA (val)
-	  && ! xisinf (val)
-	  && (val > FLT_MAX || val < FLT_MIN))
+      if (! (octave_is_NaN_or_NA (val) || xisinf (val))
+	  && fabs (val) > FLT_MAX)
 	return true;
     }
 
   return false;
 }
 
 // XXX FIXME XXX Do these really belong here?  Maybe they should be
 // in a base class?
diff --git a/liboctave/dNDArray.cc b/liboctave/dNDArray.cc
--- a/liboctave/dNDArray.cc
+++ b/liboctave/dNDArray.cc
@@ -584,17 +584,18 @@ bool
 NDArray::too_large_for_float (void) const
 {
   octave_idx_type nel = nelem ();
 
   for (octave_idx_type i = 0; i < nel; i++)
     {
       double val = elem (i);
 
-      if (val > FLT_MAX || val < FLT_MIN)
+      if (! (octave_is_NaN_or_NA (val) || xisinf (val))
+	  && fabs (val) > FLT_MAX)
 	return true;
     }
 
   return false;
 }
 
 // XXX FIXME XXX -- this is not quite the right thing.
 
