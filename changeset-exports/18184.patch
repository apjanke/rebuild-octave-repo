# HG changeset patch
# User Torsten <ttl@justmail.de>
# Date 1388596714 -3600
#      Wed Jan 01 18:18:34 2014 +0100
# Branch gui-release
# Node ID 5f7f5886692263efacc7141f0bbba341ae7804d1
# Parent  7eeaecac9b5b8a1826fb10b0bb945eab04397ee0
fix search and replace all in find dialog (bug #41051)

* find-dialog.cc (contructor): init flag for replace all with 0 (false);
  (find): fix cursor position when searching backwards, handle case when
  searching and replacing all;
  (replace): only replace when there is selected text and a find result;
  (replace_all): search and replace all only from the beginning to the end

* find-dialog.h: new flag _rep_all

diff --git a/libgui/src/m-editor/find-dialog.cc b/libgui/src/m-editor/find-dialog.cc
--- a/libgui/src/m-editor/find-dialog.cc
+++ b/libgui/src/m-editor/find-dialog.cc
@@ -152,16 +152,17 @@ find_dialog::find_dialog (QsciScintilla*
   main_layout->addLayout (left_layout, 0, 0);
   main_layout->addWidget (_button_box, 0, 1);
   main_layout->addWidget (_extension, 1, 0);
   setLayout (main_layout);
 
   _extension->hide ();
   _find_next_button->setDefault (true);
   _find_result_available = false;
+  _rep_all = 0;
 
   // move dialog to side of the parent if there is room on the desktop to do so.
   QWidget * desktop = QApplication::desktop ();
   int xp = p->x () + p->frameGeometry ().width ();
   int yp=  p->y ();
   if (desktop != 0 && sizeHint ().isValid ())
     {
       if (xp + sizeHint ().width () > desktop->width ())
@@ -207,39 +208,48 @@ find_dialog::find_prev ()
   find (_backward_check_box->isChecked ());
 }
 
 void
 find_dialog::find (bool forward)
 {
   int line = -1, col = -1;
   bool do_wrap = _wrap_check_box->isChecked ();
-  bool do_forward = true;
+  bool do_forward = forward;
 
-  if (_find_result_available)
-    {
-      // we found a match last time, cursor is at the end of the match
-      if (!forward)
-        {
-          // backward: go back one position or we will find the same again
-          do_forward = false;
-          _edit_area->getCursorPosition (&line,&col);
-          if (col > 0)
-            _edit_area->setCursorPosition (line,--col);
-        }
+  if (!forward && _find_result_available)
+    { // we found a match last time, cursor is at the end of the match
+      // backward: go to start of selection or we will find the same again
+      int line_end, col_end;
+      _edit_area->getSelection (&line,&col,&line_end,&col_end);
+      if (line > -1)
+        _edit_area->setCursorPosition (line,col);
     }
 
   _find_result_available = false;
 
-  if (_from_start_check_box->isChecked ())
+  if (_rep_all)
     {
-      line = 0;
-      col  = 0;
-      if (_backward_check_box->isChecked ())
-        do_wrap = true;
+      if (_rep_all == 1)
+        {
+          line = 0;
+          col = 0;
+        }
+      do_wrap = false;
+      do_forward = true;
+    }
+  else
+    {
+      if (_from_start_check_box->isChecked ())
+        {
+          line = 0;
+          col  = 0;
+          if (_backward_check_box->isChecked ())
+            do_wrap = true;
+        }
     }
 
   if (_edit_area)
     {
       _find_result_available
         = _edit_area->findFirst (_search_line_edit->text (),
                                 _regex_check_box->isChecked (),
                                 _case_check_box->isChecked (),
@@ -250,67 +260,58 @@ find_dialog::find (bool forward)
                                 true
 #ifdef HAVE_QSCI_VERSION_2_6_0
                                 , true
 #endif
                                 );
     }
   if (_find_result_available)
     _from_start_check_box->setChecked (0);
-  else
+  else if (! _rep_all)
     no_matches_message ();
 }
 
 
 void
 find_dialog::replace ()
 {
   if (_edit_area)
     {
-      _edit_area->replace (_replace_line_edit->text ());
-      if (!_edit_area->findNext())
-        no_matches_message ();
+      if (_find_result_available && _edit_area->hasSelectedText ())
+        _edit_area->replace (_replace_line_edit->text ());
+      find_next ();
     }
 }
 
 void
 find_dialog::replace_all ()
 {
-  int count = 0;
+  int line, col;
 
-  // check whether find & replace srings are different (avoid endless loop!)
-  int strDiff;
-  Qt::CaseSensitivity cs;
-  if (_case_check_box->isChecked())
+  if (_edit_area)
     {
-      cs = Qt::CaseSensitive;
-    }
-  else
-    {
-      cs = Qt::CaseInsensitive;
-    }
-  strDiff = QString::compare (_search_line_edit->text(),
-                              _replace_line_edit->text(), cs);
+      _edit_area->getCursorPosition (&line,&col);
 
-  // replace all if strings are different
-  if (_edit_area && strDiff )
-    {
-      find (!_backward_check_box->isChecked ());  // find first occurence
+      _rep_all = 1;
+      find_next ();  // find first occurence (forward)
       while (_find_result_available)   // while search string is found
         {
           _edit_area->replace (_replace_line_edit->text ());   // replace
-          count++;                                             // inc counter
-          _find_result_available = _edit_area->findNext();     // and find next
+          _rep_all++;                                          // inc counter
+          find_next ();                                        // find next
         }
+
       QMessageBox msg_box (QMessageBox::Information, tr ("Replace Result"),
-                           tr ("%1 items replaced").arg(count),
+                           tr ("%1 items replaced").arg(_rep_all-1),
                            QMessageBox::Ok, this);
       msg_box.exec ();
+
+      _rep_all = 0;
+      _edit_area->setCursorPosition (line,col);
     }
-  // TODO: Show number of replaced strings
 }
 
 void
 find_dialog::no_matches_message ()
 {
   QMessageBox msg_box (QMessageBox::Information, tr ("Find Result"),
                        tr ("No more matches found"), QMessageBox::Ok, this);
   msg_box.exec ();
diff --git a/libgui/src/m-editor/find-dialog.h b/libgui/src/m-editor/find-dialog.h
--- a/libgui/src/m-editor/find-dialog.h
+++ b/libgui/src/m-editor/find-dialog.h
@@ -103,12 +103,13 @@ private:
   QPushButton       *_find_next_button;
   QPushButton       *_find_prev_button;
   QPushButton       *_replace_button;
   QPushButton       *_replace_all_button;
   QPushButton       *_more_button;
   QWidget           *_extension;
   QsciScintilla     *_edit_area;
   bool               _find_result_available;
+  int                _rep_all;
 };
 
 #endif // FIND_DIALOG_H
 
