# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1458393605 14400
#      Sat Mar 19 09:20:05 2016 -0400
# Node ID 24aab5c342bf87007fd6e46fd5ab568eaddd11ba
# Parent  7a6589e2867aca3824ac31ed532f4053550260e2
more style fixes for textscan

diff --git a/libinterp/corefcn/textscan.cc b/libinterp/corefcn/textscan.cc
--- a/libinterp/corefcn/textscan.cc
+++ b/libinterp/corefcn/textscan.cc
@@ -91,17 +91,17 @@ public:
 
   // Read character that will be got by the next get.
   int peek_undelim (void);
 
   // Undo a 'get' or 'get_undelim'.  It is the caller's responsibility
   // to avoid overflow by calling putbacks only for a character got by
   // get() or get_undelim(), with no intervening
   // get, get_delim, field_done, refresh_buf, getline, read or seekg.
-  void putback (char /*ch*/ = 0)  { if (! eof ()) --idx; }
+  void putback (char /*ch*/ = 0) { if (! eof ()) --idx; }
 
   int getline  (std::string& dest, char delim);
 
   // int skipline (char delim);
 
   char *read (char *buffer, int size, char* &new_start);
 
   // Return a position suitable to "seekg", valid only within this
@@ -110,17 +110,17 @@ public:
 
   void seekg (char *old_idx) { idx = old_idx; }
 
   bool eof (void)
   {
     return (eob == buf && i_stream.eof ()) || (flags & std::ios_base::eofbit);
   }
 
-  operator const void* (void) { return (!eof () && !flags) ? this : 0; }
+  operator const void* (void) { return (! eof () && ! flags) ? this : 0; }
 
   bool fail (void) { return flags & std::ios_base::failbit; }
 
   std::ios_base::iostate rdstate (void) { return flags; }
 
   void setstate (std::ios_base::iostate m) { flags = flags | m; }
 
   void clear (std::ios_base::iostate m
@@ -1311,17 +1311,17 @@ textscan::do_scan (std::istream& isp, te
   octave_value retval;
 
   if (fmt_list.num_conversions () == -1)
     error ("textscan: invalid format specified");
 
   if (fmt_list.num_conversions () == 0)
     error ("textscan: no valid format conversion specifiers\n");
 
-  // skip the first  header_lines
+  // skip the first header_lines
   std::string dummy;
   for (int i = 0; i < header_lines && isp; i++)
     getline (isp, dummy, static_cast<char> (eol2));
 
   // Create our own buffered stream, for fast get/putback/tell/seek.
 
   // First, see how far ahead it should let us look.
   int max_lookahead = std::max (std::max (comment_len, treat_as_empty_len),
@@ -1461,18 +1461,18 @@ textscan::do_scan (std::istream& isp, te
 
           ra_idx(1) = i;
           retval = do_cat_op (retval, octave_value (Cell (col->resize (dv,0))),
                               ra_idx);
         }
     }
   else  // group adjacent cells of the same type into a single cell
     {
-      octave_value    cur;                // current cell, accumulating columns
-      octave_idx_type group_size = 0;     // columns in this cell
+      octave_value cur;                // current cell, accumulating columns
+      octave_idx_type group_size = 0;  // columns in this cell
       int prev_type = -1;
 
       conv = 0;
       retval = Cell ();
       for (std::list<octave_value>::iterator col = out.begin ();
            col != out.end (); col++)
         {
           if (! merge_with_prev [conv++])  // including first time
@@ -1496,17 +1496,17 @@ textscan::do_scan (std::istream& isp, te
         }
       ra_idx(1) = i;
       retval = do_cat_op (retval, octave_value (Cell (cur)), ra_idx);
     }
 
   return retval;
 }
 
-// Calculate x^n.  Used for ...e+nn  so that, for example, 1e2 is
+// Calculate x^n.  Used for ...e+nn so that, for example, 1e2 is
 // exactly 100 and 5e-1 is 1/2
 
 static double
 pown (double x, unsigned int n)
 {
   double retval = 1;
 
   for (unsigned int d = n; d; d >>= 1)
@@ -1514,18 +1514,18 @@ pown (double x, unsigned int n)
       if (d & 1)
         retval *= x;
       x *= x;
     }
 
   return retval;
 }
 
-// Read a double considering the "precision" field of  fmt  and the
-// exp_chars  option of  options.
+// Read a double considering the "precision" field of FMT and the
+// EXP_CHARS option of OPTIONS.
 
 double
 textscan::read_double (delimited_stream& is,
                        const textscan_format_elt& fmt) const
 {
   int sign = 1;
   unsigned int width_left = fmt.width;
   double retval = 0;
@@ -2588,17 +2588,17 @@ textscan::skip_whitespace (delimited_str
                 {
                   std::string end_c = comment_style(1).string_value ();
                   // last char of end-comment sequence
                   std::string last = end_c.substr (end_c.size () - 1);
                   std::string may_match ("");
                   do
                     {           // find sequence ending with last char
                       scan_caret (is, last, dummy);
-                      is.get_undelim ();        // (read   last  itself)
+                      is.get_undelim ();        // (read LAST itself)
 
                       may_match = may_match + dummy + last;
                       if (may_match.length () > end_c.length ())
                         {
                           size_t start = may_match.length () - end_c.length ();
                           may_match = may_match.substr (start);
                         }
                     }
diff --git a/libinterp/corefcn/textscan.h b/libinterp/corefcn/textscan.h
--- a/libinterp/corefcn/textscan.h
+++ b/libinterp/corefcn/textscan.h
@@ -166,19 +166,19 @@ private:
   std::string read_until (delimited_stream& is, const Cell& delimiters,
                           const std::string& ends) const;
 
   int lookahead (delimited_stream& is, const Cell& targets, int max_len,
                  bool case_sensitive = true) const;
 
   bool match_literal (delimited_stream& isp, const textscan_format_elt& elem);
 
-  int  skip_whitespace (delimited_stream& is, bool EOLstop = false);
+  int skip_whitespace (delimited_stream& is, bool EOLstop = false);
 
-  int  skip_delim (delimited_stream& is);
+  int skip_delim (delimited_stream& is);
 
   bool is_delim (unsigned char ch) const
   {
     return ((delim_table.empty () && (isspace (ch) || ch == eol1 || ch == eol2))
             || delim_table[ch] != '\0');
   }
 
   bool isspace (unsigned int ch) const { return whitespace_table[ch & 0xff]; }
