# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1347635667 14400
#      Fri Sep 14 11:14:27 2012 -0400
# Node ID 24b5348d38e7096b233e65f6bb470924304b402a
# Parent  f9ee3befcd6be0577e9df2bbbc1c49d95481302c
merge event_accepted and event_reject into a single function

* history-dockwidget.cc, history-dockwidget.h
(history_dock_widget::handle_event): New function from merging
history_dock_widget::event_accepted and
history_dock_widget::event_reject into single fucntion with argument.
* file-editor-tab.cc, file-editor-tab.h
(file_editor_tab::handle_event): Likewise.
* main-window.cc, main-window.h (main_window::handle_event):
Likewise.
* octave-event-observer.h (octave_event_observer::handle_event):
New pure virtual function.
(octave_event_observer::event_accepted,
octave_event_observer::event_reject): Delete.
* octave_link.cc, octave-link.h (octave_link::handle_event): Likewise.
* workspace-model.cc, workspace-model.h
(workspace_model::handle_event): Likewise.

* octave-link.cc (octave_link::do_process_events): Call
octave_event::handle_event with the return value from
octave_event::perform instead of calling octave_event::accept and
octave_event::reject.

* octave-event.h (octave_event:handle_event): New function.
(octave_event::accept, octave_event::reject): Delete.

diff --git a/libgui/src/history-dockwidget.cc b/libgui/src/history-dockwidget.cc
--- a/libgui/src/history-dockwidget.cc
+++ b/libgui/src/history-dockwidget.cc
@@ -35,66 +35,68 @@ along with Octave; see the file COPYING.
 history_dock_widget::history_dock_widget (QWidget * p)
   : QDockWidget (p), octave_event_observer ()
 {
   setObjectName ("HistoryDockWidget");
   construct ();
 }
 
 void
-history_dock_widget::event_accepted (octave_event *e)
+history_dock_widget::handle_event (octave_event *e, bool accept)
 {
   static bool scroll_window = false;
 
-  if (dynamic_cast <octave_update_history_event*> (e))
+  if (accept)
     {
-      // Determine the client's (our) history length and the one of the server.
-      int clientHistoryLength = _history_model->rowCount ();
-      int serverHistoryLength = command_history::length ();
-
-      // If were behind the server, iterate through all new entries and add
-      // them to our history.
-      if (clientHistoryLength < serverHistoryLength)
+      if (dynamic_cast <octave_update_history_event*> (e))
         {
-          int elts_to_add = serverHistoryLength - clientHistoryLength;
+          // Determine the client's (our) history length and the one of the server.
+          int clientHistoryLength = _history_model->rowCount ();
+          int serverHistoryLength = command_history::length ();
 
-          _history_model->insertRows (clientHistoryLength, elts_to_add);
-
-          for (int i = clientHistoryLength; i < serverHistoryLength; i++)
+          // If were behind the server, iterate through all new entries and add
+          // them to our history.
+          if (clientHistoryLength < serverHistoryLength)
             {
-              std::string entry = command_history::get_entry (i);
+              int elts_to_add = serverHistoryLength - clientHistoryLength;
+
+              _history_model->insertRows (clientHistoryLength, elts_to_add);
 
-              _history_model->setData (_history_model->index (i),
-                                       QString::fromStdString (entry));
-            }
+              for (int i = clientHistoryLength; i < serverHistoryLength; i++)
+                {
+                  std::string entry = command_history::get_entry (i);
+
+                  _history_model->setData (_history_model->index (i),
+                                           QString::fromStdString (entry));
+                }
 
-          // FIXME -- does this behavior make sense?  Calling
-          // _history_list_view->scrollToBottom () here doesn't seem to
-          // have any effect.  Instead, we need to request that action
-          // and wait until the next event occurs in which no items
-          // are added to the history list.
+              // FIXME -- does this behavior make sense?  Calling
+              // _history_list_view->scrollToBottom () here doesn't seem to
+              // have any effect.  Instead, we need to request that action
+              // and wait until the next event occurs in which no items
+              // are added to the history list.
 
-          scroll_window = true;
-        }
-      else if (scroll_window)
-        {
-          scroll_window = false;
+              scroll_window = true;
+            }
+          else if (scroll_window)
+            {
+              scroll_window = false;
 
-          _history_list_view->scrollToBottom ();
+              _history_list_view->scrollToBottom ();
+            }
         }
-    }
 
-  // Post a new update event in a given time. This prevents flooding the
-  // event queue.
-  _update_history_model_timer.start ();
-}
-
-void
-history_dock_widget::event_reject (octave_event *e)
-{
+      // Post a new update event in a given time. This prevents flooding the
+      // event queue.
+      _update_history_model_timer.start ();
+    }
+  else
+    {
+      // octave_event::perform failed to handle event.
+    }
 }
 
 void
 history_dock_widget::construct ()
 {
   _history_model = new QStringListModel ();
   _sort_filter_proxy_model.setSourceModel (_history_model);
   _history_list_view = new QListView (this);
diff --git a/libgui/src/history-dockwidget.h b/libgui/src/history-dockwidget.h
--- a/libgui/src/history-dockwidget.h
+++ b/libgui/src/history-dockwidget.h
@@ -34,18 +34,17 @@ along with Octave; see the file COPYING.
 #include "octave-event-observer.h"
 
 class history_dock_widget : public QDockWidget, public octave_event_observer
 {
   Q_OBJECT
   public:
   history_dock_widget (QWidget *parent = 0);
 
-  void event_accepted (octave_event *e);
-  void event_reject (octave_event *e);
+  void handle_event (octave_event *e, bool accept);
 
 public slots:
   void handle_visibility_changed (bool visible);
   void request_history_model_update ();
   void reset_model ();
 
 signals:
   void information (const QString& message);
diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -111,51 +111,52 @@ file_editor_tab::file_editor_tab(file_ed
 
 bool
 file_editor_tab::copy_available ()
 {
   return _copy_available;
 }
 
 void
-file_editor_tab::event_accepted (octave_event *e)
+file_editor_tab::handle_event (octave_event *e, bool accept)
 {
-  if (dynamic_cast<octave_run_file_event*> (e))
-    {
-      // File was run successfully.
-    }
-
-  if (octave_add_breakpoint_event *abe
-      = dynamic_cast<octave_add_breakpoint_event*> (e))
-    {
-      // TODO: Check file.
-      _edit_area->markerAdd (abe->get_line (), breakpoint);
-    }
-
-  if (octave_remove_breakpoint_event *rbe
-      = dynamic_cast<octave_remove_breakpoint_event*> (e))
+  if (accept)
     {
-      // TODO: Check file.
-      _edit_area->markerDelete (rbe->get_line (), breakpoint);
+      if (dynamic_cast<octave_run_file_event*> (e))
+        {
+          // File was run successfully.
+        }
+
+      if (octave_add_breakpoint_event *abe
+          = dynamic_cast<octave_add_breakpoint_event*> (e))
+        {
+          // TODO: Check file.
+          _edit_area->markerAdd (abe->get_line (), breakpoint);
+        }
+
+      if (octave_remove_breakpoint_event *rbe
+          = dynamic_cast<octave_remove_breakpoint_event*> (e))
+        {
+          // TODO: Check file.
+          _edit_area->markerDelete (rbe->get_line (), breakpoint);
+        }
+
+      if (octave_remove_all_breakpoints_event *rabe
+          = dynamic_cast<octave_remove_all_breakpoints_event*> (e))
+        {
+          Q_UNUSED (rabe);
+          _edit_area->markerDeleteAll (breakpoint);
+        }
     }
-
-  if (octave_remove_all_breakpoints_event *rabe
-      = dynamic_cast<octave_remove_all_breakpoints_event*> (e))
+  else
     {
-      Q_UNUSED (rabe);
-      _edit_area->markerDeleteAll (breakpoint);
-    }
-}
-
-void
-file_editor_tab::event_reject (octave_event *e)
-{
-  if (dynamic_cast<octave_run_file_event*> (e))
-    {
-      // Running file failed.
+      if (dynamic_cast<octave_run_file_event*> (e))
+        {
+          // Running file failed.
+        }
     }
 }
 
 void
 file_editor_tab::closeEvent (QCloseEvent *e)
 {
   if (_file_editor->get_main_window ()->is_closing ())
     {
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -32,18 +32,17 @@ along with Octave; see the file COPYING.
 class file_editor;
 class file_editor_tab : public QWidget, public octave_event_observer
 {
   Q_OBJECT
   public:
   file_editor_tab (file_editor *fileEditor);
   bool copy_available ();
 
-  void event_accepted (octave_event *e);
-  void event_reject (octave_event *e);
+  void handle_event (octave_event *e, bool accept);
 
 public slots:
   void update_window_title(bool modified);
   void handle_copy_available(bool enableCopy);
   void handle_margin_clicked (int line, int margin, Qt::KeyboardModifiers state);
   void comment_selected_text ();
   void uncomment_selected_text ();
   void find ();
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -49,28 +49,30 @@ main_window::main_window (QWidget *p)
   octave_link::launch_octave ();
 }
 
 main_window::~main_window ()
 {
 }
 
 void
-main_window::event_accepted (octave_event *e)
+main_window::handle_event (octave_event *e, bool accept)
 {
-  if (dynamic_cast<octave_clear_history_event*> (e))
+  if (accept)
     {
-      // After clearing the history, we need to reset the model.
-      _history_dock_widget->reset_model ();
+      if (dynamic_cast<octave_clear_history_event*> (e))
+        {
+          // After clearing the history, we need to reset the model.
+          _history_dock_widget->reset_model ();
+        }
     }
-}
-
-void
-main_window::event_reject (octave_event *e)
-{
+  else
+    {
+      // octave_event::perform failed to process event.
+    }
 }
 
 void
 main_window::new_file ()
 {
   _file_editor->request_new_file ();
   focus_editor ();
 }
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -60,18 +60,17 @@ along with Octave; see the file COPYING.
  */
 class main_window
   : public QMainWindow, public octave_event_observer
 {
   Q_OBJECT public:
   main_window (QWidget * parent = 0);
   ~main_window ();
 
-  void event_accepted (octave_event *e);
-  void event_reject (octave_event *e);
+  void handle_event (octave_event *e, bool accept);
 
   QTerminal *get_terminal_view () { return _terminal; }
   history_dock_widget *get_history_dock_widget ()
   {
     return _history_dock_widget;
   }
   files_dock_widget *get_files_dock_widget ()
   {
diff --git a/libgui/src/octave-adapter/octave-event-observer.h b/libgui/src/octave-adapter/octave-event-observer.h
--- a/libgui/src/octave-adapter/octave-event-observer.h
+++ b/libgui/src/octave-adapter/octave-event-observer.h
@@ -31,23 +31,18 @@ class octave_event;
   */
 class octave_event_observer
 {
   public:
     octave_event_observer () { }
     virtual ~octave_event_observer () { }
 
     /**
-      * This will be called when an event has been accepted. Operations
-      * in this routine will be processed in the octave thread.
+      * This will be called after the octave_event::perform function
+      * has processed an event.  ACCEPT will be true if the event was
+      * successfully handled and false otherwise.
       */
-    virtual void event_accepted (octave_event *e) = 0;
-
-    /**
-      * This will be called when an event has been rejected. Operations
-      * in this routine will be processed in the octave thread.
-      */
-    virtual void event_reject (octave_event *e) = 0;
+    virtual void handle_event (octave_event *e, bool accept) = 0;
 };
 
 #include "octave-event.h"
 
 #endif // OCTAVEEVENTOBSERVER_H
diff --git a/libgui/src/octave-adapter/octave-event.h b/libgui/src/octave-adapter/octave-event.h
--- a/libgui/src/octave-adapter/octave-event.h
+++ b/libgui/src/octave-adapter/octave-event.h
@@ -54,28 +54,24 @@ class octave_event
 
     /** Performs what is necessary to make this event happen. This
       * code is thread-safe since it will be executed in the octave
       * thread. However, you should take care to keep this code as
       * short as possible. */
     virtual bool perform () = 0;
 
     /**
-      * Accepts this event. This allows the event observer to react properly
-      * onto the event.
+      * Pass the event on to the class that posted the event.  ACCEPT
+      * will be true if the perform function was successful, and false
+      * otherwise.
       */
-    void accept ()
-    { _octave_event_observer.event_accepted (this); }
-
-    /**
-      * Rejects this event. This allows the event observer to react properly
-      * onto the event.
-      */
-    void reject ()
-    { _octave_event_observer.event_reject (this); }
+    void handle_event (bool accept)
+    {
+      _octave_event_observer.handle_event (this, accept);
+    }
 
   protected:
     void call_octave_function (const std::string& name);
 
     void call_octave_function (const std::string& name,
                                const octave_value_list& args,
                                int nargout = 0);
 
diff --git a/libgui/src/octave-adapter/octave-link.cc b/libgui/src/octave-adapter/octave-link.cc
--- a/libgui/src/octave-adapter/octave-link.cc
+++ b/libgui/src/octave-adapter/octave-link.cc
@@ -111,20 +111,19 @@ octave_link::do_process_events (void)
   event_queue_mutex->lock ();
 
   while (event_queue.size () > 0)
     {
       octave_event *e = event_queue.front ();
 
       event_queue.pop ();
 
-      if (e->perform ())
-        e->accept ();
-      else
-        e->reject ();
+      bool status = e->perform ();
+
+      e->handle_event (status);
 
       delete e;
     }
 
   event_queue_mutex->unlock ();
 }
 
 void
@@ -154,22 +153,17 @@ octave_link::do_about_to_exit (void)
 
 std::string
 octave_link::do_last_working_directory (void)
 {
   return last_cwd;
 }
 
 void
-octave_link::event_accepted (octave_event *e)
-{
-}
-
-void
-octave_link::event_reject (octave_event *e)
+octave_link::handle_event (octave_event *, bool)
 {
 }
 
 bool
 octave_link::instance_ok (void)
 {
   bool retval = true;
 
diff --git a/libgui/src/octave-adapter/octave-link.h b/libgui/src/octave-adapter/octave-link.h
--- a/libgui/src/octave-adapter/octave-link.h
+++ b/libgui/src/octave-adapter/octave-link.h
@@ -145,13 +145,12 @@ private:
 
   void do_about_to_exit (void);
 
   void do_entered_readline_hook (void) { }
   void do_finished_readline_hook (void) { }
 
   std::string do_last_working_directory (void);
 
-  void event_accepted (octave_event *e);
-  void event_reject (octave_event *e);
+  void handle_event (octave_event *e, bool accept);
 };
 
 #endif // OCTAVELINK_H
diff --git a/libgui/src/workspace-model.cc b/libgui/src/workspace-model.cc
--- a/libgui/src/workspace-model.cc
+++ b/libgui/src/workspace-model.cc
@@ -62,72 +62,74 @@ workspace_model::~workspace_model()
 
 void
 workspace_model::request_update_workspace ()
 {
   octave_link::post_event (new octave_update_workspace_event (*this));
 }
 
 void
-workspace_model::event_accepted (octave_event *e)
+workspace_model::handle_event (octave_event *e, bool accept)
 {
-  if (dynamic_cast <octave_update_workspace_event*> (e))
+  if (accept)
     {
-      std::list < symbol_table::symbol_record > symbolTable = symbol_table::all_variables ();
+      if (dynamic_cast <octave_update_workspace_event*> (e))
+        {
+          std::list < symbol_table::symbol_record > symbolTable = symbol_table::all_variables ();
 
-      _symbol_information.clear ();
-      for (std::list < symbol_table::symbol_record > ::iterator iterator = symbolTable.begin ();
-           iterator != symbolTable.end (); iterator++)
-        _symbol_information.push_back (symbol_information (*iterator));
+          _symbol_information.clear ();
+          for (std::list < symbol_table::symbol_record > ::iterator iterator = symbolTable.begin ();
+               iterator != symbolTable.end (); iterator++)
+            _symbol_information.push_back (symbol_information (*iterator));
 
-      beginResetModel();
-      top_level_item (0)->delete_child_items ();
-      top_level_item (1)->delete_child_items ();
-      top_level_item (2)->delete_child_items ();
+          beginResetModel();
+          top_level_item (0)->delete_child_items ();
+          top_level_item (1)->delete_child_items ();
+          top_level_item (2)->delete_child_items ();
 
-      foreach (const symbol_information& s, _symbol_information)
-        {
-          tree_item *child = new tree_item ();
+          foreach (const symbol_information& s, _symbol_information)
+            {
+              tree_item *child = new tree_item ();
 
-          child->set_data (0, s.symbol ());
-          child->set_data (1, s.class_name ());
-          child->set_data (2, s.dimension ());
-          child->set_data (3, s.value ());
+              child->set_data (0, s.symbol ());
+              child->set_data (1, s.class_name ());
+              child->set_data (2, s.dimension ());
+              child->set_data (3, s.value ());
 
-          switch (s.scope ())
-            {
-            case symbol_information::local:
-              top_level_item (0)->add_child (child);
-              break;
+              switch (s.scope ())
+                {
+                case symbol_information::local:
+                  top_level_item (0)->add_child (child);
+                  break;
 
-            case symbol_information::global:
-              top_level_item (1)->add_child (child);
-              break;
+                case symbol_information::global:
+                  top_level_item (1)->add_child (child);
+                  break;
+
+                case symbol_information::persistent:
+                  top_level_item (2)->add_child (child);
+                  break;
 
-            case symbol_information::persistent:
-              top_level_item (2)->add_child (child);
-              break;
+                default:
+                  break;
+                }
+            }
 
-            default:
-              break;
-            }
+          endResetModel();
+          emit model_changed();
         }
 
-      endResetModel();
-      emit model_changed();
+      // Post a new event in a given time.
+      // This prevents flooding the event queue when no events are being processed.
+      _update_workspace_model_timer.start ();
     }
-
-  // Post a new event in a given time.
-  // This prevents flooding the event queue when no events are being processed.
-  _update_workspace_model_timer.start ();
-}
-
-void
-workspace_model::event_reject (octave_event *e)
-{
+  else
+    {
+      // octave_event::perform failed to process event.
+    }
 }
 
 QModelIndex
 workspace_model::index(int row, int column, const QModelIndex &p) const
 {
   if (!hasIndex(row, column, p))
     return QModelIndex();
 
diff --git a/libgui/src/workspace-model.h b/libgui/src/workspace-model.h
--- a/libgui/src/workspace-model.h
+++ b/libgui/src/workspace-model.h
@@ -115,18 +115,17 @@ class workspace_model
   : public QAbstractItemModel, public octave_event_observer
 {
   Q_OBJECT
 
   public:
   workspace_model (QObject *parent = 0);
   ~workspace_model ();
 
-  void event_accepted (octave_event *e);
-  void event_reject (octave_event *e);
+  void handle_event (octave_event *e, bool accept);
 
   QVariant data (const QModelIndex &index, int role) const;
   Qt::ItemFlags flags (const QModelIndex &index) const;
   QVariant headerData (int section, Qt::Orientation orientation,
                        int role = Qt::DisplayRole) const;
   QModelIndex index (int row, int column,
                      const QModelIndex &parent = QModelIndex ()) const;
   QModelIndex parent (const QModelIndex &index) const;
