# HG changeset patch
# User Rik <rik@octave.org>
# Date 1478192800 25200
#      Thu Nov 03 10:06:40 2016 -0700
# Node ID f0b4e3903f7f6d26248616fed48ec628de11cf82
# Parent  074765d5c83b48998c229c1a426620f9b7780f4a
# Parent  c2f0e687471e6b639a9e4214d1a50b3f8281ec90
maint: Periodic merge of stable to default.

diff --git a/doc/interpreter/container.txi b/doc/interpreter/container.txi
--- a/doc/interpreter/container.txi
+++ b/doc/interpreter/container.txi
@@ -731,24 +731,24 @@ array.
 Using the @samp{(} and @samp{)} operators, indexing works for cell
 arrays like for multi-dimensional arrays.  As an example, all the rows
 of the first and third column of a cell array can be set to @code{0}
 with the following command:
 
 @example
 @group
 c(:, [1, 3]) = @{0@}
-     @result{}  =
+     @result{} =
         @{
           [1,1] = 0
           [2,1] = 0
           [3,1] = 0
           [1,2] = 2
-          [2,2] =  10
-          [3,2] =  20
+          [2,2] = y
+          [3,2] = 5
           [1,3] = 0
           [2,3] = 0
           [3,3] = 0
         @}
 @end group
 @end example
 
 Note, that the above can also be achieved like this:
diff --git a/examples/code/embedded.cc b/examples/code/embedded.cc
--- a/examples/code/embedded.cc
+++ b/examples/code/embedded.cc
@@ -1,13 +1,13 @@
 #include <iostream>
 #include <octave/oct.h>
 #include <octave/octave.h>
 #include <octave/parse.h>
-#include <octave/toplev.h>
+#include <octave/interpreter.h>
 
 int
 main (void)
 {
   string_vector argv (2);
   argv(0) = "embedded";
   argv(1) = "-q";
 
diff --git a/libinterp/corefcn/cellfun.cc b/libinterp/corefcn/cellfun.cc
--- a/libinterp/corefcn/cellfun.cc
+++ b/libinterp/corefcn/cellfun.cc
@@ -2357,20 +2357,24 @@ DEFUN (cellindexmat, args, ,
 Perform indexing of matrices in a cell array.
 
 Given a cell array of matrices @var{x}, this function computes
 
 @example
 @group
 Y = cell (size (X));
 for i = 1:numel (X)
-  Y@{i@} = X@{i@}(varargin@{:@});
+  Y@{i@} = X@{i@}(varargin@{1@}, varargin@{2@}, @dots{}, varargin@{N@});
 endfor
 @end group
 @end example
+
+The indexing arguments may be scalar (@code{2}), arrays (@code{[1, 3]}),
+ranges (@code{1:3}), or the colon operator (@qcode{":"}).  However, the
+indexing keyword @code{end} is not available.
 @seealso{cellslices, cellfun}
 @end deftypefn */)
 {
   if (args.length () == 0)
     print_usage ();
 
   const Cell x = args(0).xcell_value ("cellindexmat: X must be a cell");
 
diff --git a/libinterp/corefcn/syscalls.cc b/libinterp/corefcn/syscalls.cc
--- a/libinterp/corefcn/syscalls.cc
+++ b/libinterp/corefcn/syscalls.cc
@@ -201,17 +201,17 @@ error message.
 }
 
 DEFUNX ("popen2", Fpopen2, args, ,
         doc: /* -*- texinfo -*-
 @deftypefn {} {[@var{in}, @var{out}, @var{pid}] =} popen2 (@var{command}, @var{args})
 Start a subprocess with two-way communication.
 
 The name of the process is given by @var{command}, and @var{args} is an
-array of strings containing options for the command.
+array or cell array of strings containing options for the command.
 
 The file identifiers for the input and output streams of the subprocess are
 returned in @var{in} and @var{out}.  If execution of the command is
 successful, @var{pid} contains the process ID of the subprocess.  Otherwise,
 @var{pid} is @minus{}1.
 
 For example:
 
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -4781,26 +4781,17 @@ feval (const std::string& name, const oc
 {
   octave_value_list retval;
 
   octave_value fcn = symbol_table::find_function (name, args);
 
   if (fcn.is_defined ())
     retval = fcn.do_multi_index_op (nargout, args);
   else
-    {
-      try
-        {
-          maybe_missing_function_hook (name);
-        }
-      catch (octave::execution_exception& e)
-        {
-          error (e, "feval: function '%s' not found", name.c_str ());
-        }
-    }
+    error ("feval: function '%s' not found", name.c_str ());
 
   return retval;
 }
 
 octave_value_list
 feval (octave_function *fcn, const octave_value_list& args, int nargout)
 {
   octave_value_list retval;
