# HG changeset patch
# User jwe
# Date 1200644724 0
#      Fri Jan 18 08:25:24 2008 +0000
# Node ID f9df7f7520e7c981c8b4712ca16958ca7dd0f80b
# Parent  c1a3d6c7d2fbd8f152fa8b6e7814f4835d82cd35
[project @ 2008-01-18 08:25:24 by jwe]

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -2745,16 +2745,24 @@ static double padec [] =
   1.6666666666666667e-2,
   1.6025641025641026e-3,
   1.0683760683760684e-4,
   4.8562548562548563e-6,
   1.3875013875013875e-7,
   1.9270852604185938e-9,
 };
 
+static void
+solve_singularity_warning (double rcond)
+{
+  (*current_liboctave_warning_handler) 
+    ("singular matrix encountered in expm calculation, rcond = %g",
+     rcond);
+}
+
 ComplexMatrix
 ComplexMatrix::expm (void) const
 {
   ComplexMatrix retval;
 
   ComplexMatrix m = *this;
 
   octave_idx_type nc = columns ();
@@ -2838,16 +2846,19 @@ ComplexMatrix::expm (void) const
 
   // Check whether we need to square at all.
 
   if (sqpow < 0)
     sqpow = 0;
 
   if (sqpow > 0)
     {
+      if (sqpow > 1023)
+	sqpow = 1023;
+
       double scale_factor = 1.0;
       for (octave_idx_type i = 0; i < sqpow; i++)
 	scale_factor *= 2.0;
 
       m = m / scale_factor;
     }
 
   // npp, dpp: pade' approx polynomial matrices.
@@ -2884,18 +2895,22 @@ ComplexMatrix::expm (void) const
   for (octave_idx_type j = 0; j < nc; j++)
     {
       npp.elem (j, j) += 1.0;
       dpp.elem (j, j) += 1.0;
     }
 
   // Compute pade approximation = inverse (dpp) * npp.
 
-  retval = dpp.solve (npp);
-	
+  double rcond;
+  retval = dpp.solve (npp, info, rcond, solve_singularity_warning);
+
+  if (info < 0)
+    return retval;
+
   // Reverse preconditioning step 3: repeated squaring.
 
   while (sqpow)
     {
       retval = retval * retval;
       sqpow--;
     }
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,20 @@
+2008-01-18  John W. Eaton  <jwe@octave.org>
+
+	* dMatrix.cc (solve_singularity_warning): New function.
+	(Matrix::expm): Pass pointer to solve_singularity_warning to
+	Matrix::solve method.  Exit early if Matrix::solve fails.
+	Limit sqpow value to avoid overflowing scale factor.
+	* CMatrix.cc (solve_singularity_warning): New function.
+	(ComplexMatrix::expm): Pass pointer to solve_singularity_warning to
+	ComplexMatrix::solve method.  Exit early if ComplexMatrix::solve fails.
+	Limit sqpow value to avoid overflowing scale factor.
+	From Marco Caliari <mcaliari@math.unipd.it>.
+
 2008-01-10  Kim Hansen  <kimhanse@gmail.com>
 
 	* Sparse.cc: New tests for slicing of sparse matrices.
 
 2008-01-07  David Bateman  <dbateman@free.fr>
 
 	* Sparse-op-defs.h (SPARSE_ANY_ALL_OP_ROW_CODE): Don't break from
 	loop if this test succeeds.
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -2373,16 +2373,24 @@ static double padec [] =
   1.6666666666666667e-2,
   1.6025641025641026e-3,
   1.0683760683760684e-4,
   4.8562548562548563e-6,
   1.3875013875013875e-7,
   1.9270852604185938e-9,
 };
 
+static void
+solve_singularity_warning (double rcond)
+{
+  (*current_liboctave_warning_handler) 
+    ("singular matrix encountered in expm calculation, rcond = %g",
+     rcond);
+}
+
 Matrix
 Matrix::expm (void) const
 {
   Matrix retval;
 
   Matrix m = *this;
 
   if (numel () == 1)
@@ -2458,20 +2466,23 @@ Matrix::expm (void) const
   
   // Check whether we need to square at all.
   
   if (sqpow < 0)
     sqpow = 0;
   
   if (sqpow > 0)
     {
+      if (sqpow > 1023)
+	sqpow = 1023;
+
       double scale_factor = 1.0;
       for (octave_idx_type i = 0; i < sqpow; i++)
 	scale_factor *= 2.0;
-  
+
       m = m / scale_factor;
     }
   
   // npp, dpp: pade' approx polynomial matrices.
   
   Matrix npp (nc, nc, 0.0);
   double *pnpp = npp.fortran_vec ();
   Matrix dpp = npp;
@@ -2504,18 +2515,22 @@ Matrix::expm (void) const
   for (octave_idx_type j = 0; j < nc; j++)
     {
       npp.elem (j, j) += 1.0;
       dpp.elem (j, j) += 1.0;
     }
   
   // Compute pade approximation = inverse (dpp) * npp.
 
-  retval = dpp.solve (npp, info);
-  
+  double rcond;
+  retval = dpp.solve (npp, info, rcond, solve_singularity_warning);
+
+  if (info < 0)
+    return retval;
+
   // Reverse preconditioning step 3: repeated squaring.
   
   while (sqpow)
     {
       retval = retval * retval;
       sqpow--;
     }
   
