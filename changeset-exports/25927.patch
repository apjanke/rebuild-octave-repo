# HG changeset patch
# User Rik <rik@octave.org>
# Date 1539298131 25200
#      Thu Oct 11 15:48:51 2018 -0700
# Node ID d6581134daaa1a3cd3e633e93b9a5393aff70a11
# Parent  373fe1608f7c11cd2c435f5ec86d4a47f3e9bddf
Emit an error when utility matrices (zeros, ones, rand, etc.) are given a fractional dimension in a dimension vector (bug #54781).

* data.cc (Fones): Add BIST test with a fractional dimension in a dimension
vector.

* rand.cc (do_rand): Convert dimension vector to Array<octave_idx_type>, not an
Array<int>.  Call "octave_idx_type_vector_value (true)" to enable input
validation.
* rand.cc (Frand): Add BIST test with a fractional dimension in a dimension
vector.

* utils.cc (get_dimensions): Call "octave_idx_type_vector_value (true)" to
enable input validation.

* ov.cc (int_vector_value, octave_idx_type_vector_value): Change error message
when conversion fails to print the original value that failed.

diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -4304,16 +4304,17 @@ val = ones (m,n, "uint8")
 %!   assert (func (zeros (0, 1, 1)), zeros (0, 0));
 %!   fail ([func2str(func) " ([])"]);
 %!   fail ([func2str(func) " (zeros (0, 0, 1))"]);
 %! endfor
 
 ## Test input validation
 %!error <invalid data type specified> zeros (1, 1, "foobar")
 %!error <conversion of 1.1 .*failed> zeros (1, 1.1, 2)
+%!error <conversion of 1.1 .*failed> zeros ([1, 1.1, 2])
 
 */
 
 DEFUN (zeros, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {} zeros (@var{n})
 @deftypefnx {} {} zeros (@var{m}, @var{n})
 @deftypefnx {} {} zeros (@var{m}, @var{n}, @var{k}, @dots{})
diff --git a/libinterp/corefcn/rand.cc b/libinterp/corefcn/rand.cc
--- a/libinterp/corefcn/rand.cc
+++ b/libinterp/corefcn/rand.cc
@@ -202,21 +202,21 @@ do_rand (const octave_value_list& args, 
                 dims(i) = (base >= 0 ? base : 0);
                 base += incr;
               }
 
             goto gen_matrix;
           }
         else if (tmp.is_matrix_type ())
           {
-            Array<int> iv;
+            Array<octave_idx_type> iv;
 
             try
               {
-                iv = tmp.int_vector_value (true);
+                iv = tmp.octave_idx_type_vector_value (true);
               }
             catch (octave::execution_exception& e)
               {
                 error (e, "%s: dimensions must be a scalar or array of integers", fcn);
               }
 
             octave_idx_type len = iv.numel ();
 
@@ -536,16 +536,17 @@ classes.
 */
 
 /*
 ## Check that negative dimensions are treated as zero for Matlab compatibility
 %!assert (size (rand (1, -1, 2)), [1, 0, 2])
 
 ## Test input validation
 %!error <conversion of 1.1 to.* failed> rand (1, 1.1)
+%!error <dimensions must be .* array of integers> rand ([1, 1.1])
 */
 
 static std::string current_distribution = octave::rand::distribution ();
 
 DEFUN (randn, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {} randn (@var{n})
 @deftypefnx {} {} randn (@var{m}, @var{n}, @dots{})
diff --git a/libinterp/corefcn/utils.cc b/libinterp/corefcn/utils.cc
--- a/libinterp/corefcn/utils.cc
+++ b/libinterp/corefcn/utils.cc
@@ -1079,17 +1079,17 @@ namespace octave
                        dim_vector& dim)
   {
     // We support dimensions to be specified by any vector, even if it's a
     // vector of dimensions 0x1, 1x0, 1x1x0, or 1x1x6.  If the vector ends
     // up being empty, the final dimensions end up being 0x0.
     if (! a.dims ().isvector ())
       error ("%s (A): use %s (size (A)) instead", warn_for, warn_for);
 
-    const Array<octave_idx_type> v = a.octave_idx_type_vector_value ();
+    const Array<octave_idx_type> v = a.octave_idx_type_vector_value (true);
     const octave_idx_type n = v.numel ();
 
     dim.resize (n); // even if n < 2, resize sets it back to 2
     if (n == 0)
       {
         dim(0) = 0;
         dim(1) = 0;
       }
diff --git a/libinterp/octave-value/ov.cc b/libinterp/octave-value/ov.cc
--- a/libinterp/octave-value/ov.cc
+++ b/libinterp/octave-value/ov.cc
@@ -1800,17 +1800,17 @@ octave_value::int_vector_value (bool req
           for (octave_idx_type i = 0; i < a.numel (); i++)
             {
               double ai = a.elem (i);
               int v = static_cast<int> (ai);
               if (ai == v)
                 retval.xelem (i) = v;
               else
                 {
-                  error_with_cfn ("conversion to integer value failed");
+                  error_with_cfn ("conversion of %g to int value failed", ai);
                   break;
                 }
             }
         }
       else
         retval = Array<int> (a);
     }
 
@@ -1870,17 +1870,17 @@ octave_value::octave_idx_type_vector_val
           for (octave_idx_type i = 0; i < a.numel (); i++)
             {
               double ai = a.elem (i);
               octave_idx_type v = static_cast<octave_idx_type> (ai);
               if (ai == v)
                 retval.xelem (i) = v;
               else
                 {
-                  error_with_cfn ("conversion to integer value failed");
+                  error_with_cfn ("conversion of %g to octave_idx_type value failed", ai);
                   break;
                 }
             }
         }
       else
         retval = Array<octave_idx_type> (a);
     }
 
