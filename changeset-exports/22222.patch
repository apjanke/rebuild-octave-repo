# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1470685572 -3600
#      Mon Aug 08 20:46:12 2016 +0100
# Node ID 8a50ab960ae64ccbef653f8e0d9aeff89230fea6
# Parent  fddc5604d1fa2c8157b4c5391e96427380c9d5b1
dim-vector.h: remove duplicated code.

diff --git a/liboctave/array/dim-vector.h b/liboctave/array/dim-vector.h
--- a/liboctave/array/dim-vector.h
+++ b/liboctave/array/dim-vector.h
@@ -106,46 +106,40 @@ private:
   }
 
   //! Clone this->rep.
 
   octave_idx_type *clonerep (void)
   {
     int l = ndims ();
 
-    octave_idx_type *r = new octave_idx_type [l + 2];
-
-    *r++ = 1;
-    *r++ = l;
+    octave_idx_type* r = newrep (l);
 
     for (int i = 0; i < l; i++)
       r[i] = rep[i];
 
     return r;
   }
 
   //! Clone and resize this->rep to length n, filling by given value.
 
   octave_idx_type *resizerep (int n, octave_idx_type fill_value)
   {
     int l = ndims ();
 
     if (n < 2)
       n = 2;
 
-    octave_idx_type *r = new octave_idx_type [n + 2];
-
-    *r++ = 1;
-    *r++ = n;
+    octave_idx_type* r = newrep (n);
 
     if (l > n)
       l = n;
 
-    int j;
-    for (j = 0; j < l; j++)
+    int j = 0;
+    for (; j < l; j++)
       r[j] = rep[j];
     for (; j < n; j++)
       r[j] = fill_value;
 
     return r;
   }
 
   //! Free the rep.
@@ -469,29 +463,21 @@ public:
       {
         if (elem (i) != 1)
           return i;
       }
 
     return def;
   }
 
-  //! Compute a linear index from an index tuple.
+  //! Linear index from an index tuple.
+  octave_idx_type compute_index (const octave_idx_type* idx) const
+  { return compute_index (idx, ndims ()); }
 
-  octave_idx_type compute_index (const octave_idx_type *idx) const
-  {
-    octave_idx_type k = 0;
-    for (int i = ndims () - 1; i >= 0; i--)
-      k = rep[i] * k + idx[i];
-
-    return k;
-  }
-
-  //! Ditto, but the tuple may be incomplete (nidx < length ()).
-
+  //! Linear index from an incomplete index tuple (nidx < length ()).
   octave_idx_type compute_index (const octave_idx_type *idx, int nidx) const
   {
     octave_idx_type k = 0;
     for (int i = nidx - 1; i >= 0; i--)
       k = rep[i] * k + idx[i];
 
     return k;
   }
