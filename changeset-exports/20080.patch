# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1429188440 14400
#      Thu Apr 16 08:47:20 2015 -0400
# Node ID 908b68a98ba6a9484438d956f9e98f6c48892335
# Parent  27c0285828f8ef63e70840bedb9b4c86584b228d
initial implementation of text annotations with Qt plotting

* Canvas.h, Canvas.cc (Canvas::annotation_callback): New function.
(Canvas::canvasMousePressEvent): Handle TextMode case.
* MouseModeActionGroup.cc
(MouseModeActionGroup::MouseModeActionGroup): Don't disable text
annotation button.

diff --git a/libgui/graphics/Canvas.cc b/libgui/graphics/Canvas.cc
--- a/libgui/graphics/Canvas.cc
+++ b/libgui/graphics/Canvas.cc
@@ -22,28 +22,32 @@ along with Octave; see the file COPYING.
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <QApplication>
 #include <QBitmap>
 #include <QCursor>
+#include <QInputDialog>
 #include <QList>
 #include <QMouseEvent>
 #include <QWheelEvent>
 #include <QRectF>
 
 #include "Backend.h"
 #include "Canvas.h"
 #include "ContextMenu.h"
 #include "GLCanvas.h"
 #include "QtHandlesUtils.h"
 
 #include "gl2ps-renderer.h"
+#include "octave-qt-link.h"
+
+#include "builtin-defun-decls.h"
 
 namespace QtHandles
 {
 
 void
 Canvas::redraw (bool sync)
 {
   QWidget *w = qWidget ();
@@ -142,16 +146,24 @@ Canvas::updateCurrentPoint(const graphic
 
           gh_manager::post_set (childObj.get_handle (), "currentpoint", cp,
                                 false);
         }
     }
 }
 
 void
+Canvas::annotation_callback (const octave_value_list& args)
+{
+  Ffeval (ovl ("annotation").append (args));
+
+  redraw ();
+}
+  
+void
 Canvas::canvasToggleAxes (const graphics_handle& handle)
 {
   gh_manager::auto_lock lock;
 
   graphics_object go = gh_manager::get_object (handle);
 
   if (go.valid_object ())
     {
@@ -551,17 +563,49 @@ Canvas::canvasMousePressEvent (QMouseEve
                                      button_number (event));
 
           if (event->button () == Qt::RightButton)
             ContextMenu::executeAt (currentObj.get_properties (),
                                     event->globalPos ());
           break;
 
         case TextMode:
-          // Handle text insertion here.
+          {
+            QWidget *w = qWidget ();
+
+            if (! w)
+              break;
+
+            bool ok;
+
+            // FIXME: this dialog should allow multiple line text entry
+            // and also provide options for setting text properties of
+            // the text annotation.
+
+            QString text = QInputDialog::getText (w, "Annotation", "",
+                                                  QLineEdit::Normal, "", &ok);
+
+            if (! ok || text.isEmpty ())
+              break;
+
+            Matrix bb = axesObj.get_properties ().get_boundingbox (false);
+
+            QPoint pos = event->pos ();
+
+            Matrix position (1, 4);
+
+            position(0) = pos.x () / bb(2);
+            position(1) = 1.0 - (pos.y () / bb(3));
+            position(2) = pos.x () / bb(2);
+            position(3) = 1.0 - (pos.y () / bb(3));
+
+            octave_link::post_event (this, &Canvas::annotation_callback,
+                                     ovl ("textbox", position,
+                                          "string", text.toStdString ()));
+          }
           break;
 
         case PanMode:
         case RotateMode:
         case ZoomInMode:
         case ZoomOutMode:
           if (axesObj)
             {
diff --git a/libgui/graphics/Canvas.h b/libgui/graphics/Canvas.h
--- a/libgui/graphics/Canvas.h
+++ b/libgui/graphics/Canvas.h
@@ -29,16 +29,18 @@ along with Octave; see the file COPYING.
 
 #include "Figure.h"
 
 class QKeyEvent;
 class QMouseEvent;
 class QWheelEvent;
 class QWidget;
 
+class octave_value_list;
+
 namespace QtHandles
 {
 
 class Canvas
 {
 public:
   enum EventMask
     {
@@ -94,16 +96,18 @@ protected:
   void canvasMouseReleaseEvent (QMouseEvent* event);
   void canvasWheelEvent (QWheelEvent* event);
   bool canvasKeyPressEvent (QKeyEvent* event);
   bool canvasKeyReleaseEvent (QKeyEvent* event);
 
   void updateCurrentPoint (const graphics_object& fig,
                            const graphics_object& obj, QMouseEvent *event);
 
+  void annotation_callback (const octave_value_list& args);
+
 private:
   graphics_handle m_handle;
   bool m_redrawBlocked;
   MouseMode m_mouseMode;
   QPoint m_mouseAnchor;
   QPoint m_mouseCurrent;
   graphics_handle m_mouseAxes;
   int m_eventMask;
diff --git a/libgui/graphics/MouseModeActionGroup.cc b/libgui/graphics/MouseModeActionGroup.cc
--- a/libgui/graphics/MouseModeActionGroup.cc
+++ b/libgui/graphics/MouseModeActionGroup.cc
@@ -48,18 +48,16 @@ MouseModeActionGroup::MouseModeActionGro
 
   m_actions.append (new QAction (QIcon (":/images/pan.png"),
                                  tr ("Pan"), this));
   m_actions.append (new QAction (QIcon::fromTheme ("insert-text"),
                                  tr ("Insert Text"), this));
   m_actions.append (new QAction (QIcon (":/images/select.png"),
                                  tr ("Select"), this));
 
-  m_actions[4]->setEnabled (false);
-
   foreach (QAction* a, m_actions)
     {
       a->setCheckable (true);
       connect (a, SIGNAL (toggled (bool)), this, SLOT (actionToggled (bool)));
     }
 }
 
 MouseModeActionGroup::~MouseModeActionGroup (void)
