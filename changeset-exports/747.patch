# HG changeset patch
# User jwe
# Date 780937934 0
#      Fri Sep 30 15:12:14 1994 +0000
# Node ID 6182de8cb3b7b161d657c13d30c4034ca4799c4b
# Parent  46f6f6a4f5c647e8640f039a6973bf2045268775
[project @ 1994-09-30 15:09:36 by jwe]

diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -680,16 +680,19 @@ reset_parser (void)
 // Not initially doing any plotting or setting of plot attributes.
   plotting = 0;
   in_plot_range = 0;
   past_plot_range = 0;
   in_plot_using = 0;
   in_plot_style = 0;
   doing_set = 0;
 
+// Not initially looking at indirect references.
+  looking_at_indirect_ref = 0;
+
 // Error may have occurred inside some parentheses or braces.
   in_brace_or_paren.clear ();
 
 // Not initially defining a matrix list.
   braceflag = 0;
   ml.clear ();
   mlnm.clear ();
 
@@ -1352,16 +1355,26 @@ strip_trailing_whitespace (char *s)
 
 /*
  * Figure out exactly what kind of token to return when we have seen
  * an identifier.  Handles keywords.
  */
 static int
 handle_identifier (char *tok, int next_tok_is_eq)
 {
+// If we are expecting a structure element, we just want to return
+// TEXT_ID, which is a string that is also a valid identifier.
+
+  if (looking_at_indirect_ref)
+    {
+      yylval.tok_val = new token (tok);
+      token_stack.push (yylval.tok_val);
+      TOK_RETURN (TEXT_ID);
+    }
+
 // If we have a regular keyword, or a plot STYLE, return it.  STYLE is
 // special only because it can't be followed by an identifier.
 
   int kw_token = is_keyword (tok);
   if (kw_token)
     {
       if (kw_token == STYLE)
 	{
@@ -1464,17 +1477,17 @@ handle_identifier (char *tok, int next_t
       int spc_prev = (c0 == ' ' || c0 == '\t');
       int bin_op = next_token_is_bin_op (spc_prev, yytext);
 
       int postfix_un_op = next_token_is_postfix_unary_op (spc_prev,
 							  yytext);
 
       int c1 = yyinput ();
       unput (c1);
-      int other_op = match_any (c1, ",;\n]");
+      int other_op = match_any (c1, ".,;\n]");
       int index_op = (c1 == '('
 		      && (user_pref.commas_in_literal_matrix == 0
 			  || ! spc_prev));
 
       if (! (postfix_un_op || bin_op || other_op || index_op))
 	unput (',');
     }
 
diff --git a/src/pt-const.cc b/src/pt-const.cc
--- a/src/pt-const.cc
+++ b/src/pt-const.cc
@@ -30,16 +30,23 @@ Software Foundation, 675 Mass Ave, Cambr
 #endif
 
 #include <iostream.h>
 
 #include "tree-const.h"
 #include "error.h"
 #include "gripes.h"
 #include "user-prefs.h"
+#include "oct-map.h"
+
+Octave_map
+tree_constant::map_value (void) const
+{
+  return rep->map_value ();
+}
 
 tree_constant::~tree_constant (void)
 {
 #if defined (MDEBUG)
   cerr << "~tree_constant: rep: " << rep
        << " rep->count: " << rep->count << "\n";
 #endif
 
@@ -62,16 +69,180 @@ tree_constant::operator new (size_t size
 void
 tree_constant::operator delete (void *p, size_t size)
 {
   cerr << "tree_constant::delete(): " << p << "\n";
   ::delete p;
 }
 #endif
 
+// Simple assignment.
+
+tree_constant
+tree_constant::operator = (const tree_constant& a)
+{
+  if (rep != a.rep)
+    {
+      if (--rep->count <= 0)
+	delete rep;
+      rep = a.rep;
+      rep->count++;
+    }
+  return *this;  
+}
+
+tree_constant
+tree_constant::lookup_map_element (SLList<char*>& list)
+{
+  tree_constant retval;
+
+  tree_constant_rep *tmp_rep = rep;
+
+  Pix p = list.first ();
+  while (p)
+    {
+      char *elt = list (p);
+
+      list.next (p);
+
+      tree_constant tmp = tmp_rep->lookup_map_element (elt);
+
+      if (error_state)
+	break;
+
+      tmp_rep = tmp.rep;
+
+      if (! p)
+	retval = tmp;
+    }
+
+  return retval;
+}
+
+// Simple structure assignment.
+
+void
+tree_constant::make_unique (void)
+{
+  if (rep->count > 1)
+    {
+      --rep->count;
+      rep = new tree_constant_rep (*rep);
+      rep->count = 1;
+    }
+
+  if (rep->is_map ())
+    {
+      for (Pix p = rep->a_map->first (); p != 0; rep->a_map->next (p))
+	{
+	  rep->a_map->contents (p) . make_unique ();
+	}
+    }
+}
+
+tree_constant::tree_constant_rep *
+tree_constant::make_unique_map (void)
+{
+  if (! rep->is_map ())
+    {
+      if (--rep->count <= 0)
+	delete rep;
+
+      Octave_map m;
+      rep = new tree_constant_rep (m);
+      rep->count = 1;
+    }
+
+  make_unique ();
+
+  return rep;
+}
+
+tree_constant
+tree_constant::assign_map_element (SLList<char*>& list, tree_constant& rhs)
+{
+  tree_constant_rep *tmp_rep = make_unique_map ();
+
+  if (rhs.is_map ())
+    rhs.make_unique ();
+
+  Pix p = list.first ();
+  while (p)
+    {
+      char *elt = list (p);
+
+      list.next (p);
+
+      tree_constant& tmp = tmp_rep->lookup_map_element (elt, 1);
+
+      if (! p)
+	{
+	  tmp = rhs;
+	  return tmp;
+	}
+
+      tmp_rep = tmp.make_unique_map ();
+    }
+
+  return tree_constant ();
+}
+
+// Indexed structure assignment.
+
+tree_constant
+tree_constant::assign_map_element (SLList<char*>& list, tree_constant& rhs,
+				   const Octave_object& args)
+{
+  tree_constant_rep *tmp_rep = make_unique_map ();
+
+  if (rhs.is_map ())
+    rhs.make_unique ();
+
+  Pix p = list.first ();
+  while (p)
+    {
+      char *elt = list (p);
+
+      list.next (p);
+
+      tree_constant& tmp = tmp_rep->lookup_map_element (elt, 1);
+
+      if (! p)
+	{
+	  tmp.assign (rhs, args);
+	  return tmp;
+	}
+
+      tmp_rep = tmp.make_unique_map ();
+    }
+
+  return tree_constant ();
+}
+
+void
+tree_constant::print_code (ostream& os)
+{
+  print_code_indent (os);
+
+  if (in_parens)
+    os << "(";
+
+  if (rep)
+    rep->print_code (os);
+
+  if (in_parens)
+    os << ")";
+}
+
+void
+gripe_wrong_type_arg (const char *name, const tree_constant& tc)
+{
+  error ("%s: wrong type argument `%s'", name, tc.type_as_string ());
+}
+
 // Construct return vector of empty matrices.  Return empty matrices
 // and/or gripe when appropriate.
 
 Octave_object
 vector_of_empties (int nargout, const char *fcn_name)
 {
   Octave_object retval;
 
@@ -89,35 +260,14 @@ vector_of_empties (int nargout, const ch
 	retval(i) = m;
     }
   else
     gripe_empty_arg (fcn_name, 1);
 
   return retval;
 }
 
-void
-tree_constant::print_code (ostream& os)
-{
-  print_code_indent (os);
-
-  if (in_parens)
-    os << "(";
-
-  if (rep)
-    rep->print_code (os);
-
-  if (in_parens)
-    os << ")";
-}
-
-void
-gripe_wrong_type_arg (const char *name, const tree_constant& tc)
-{
-  error ("%s: wrong type argument `%s'", name, tc.type_as_string ());
-}
-
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/src/pt-const.h b/src/pt-const.h
--- a/src/pt-const.h
+++ b/src/pt-const.h
@@ -35,16 +35,17 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "mx-base.h"
 #include "Range.h"
 
 #include "tree-base.h"
 #include "tree-expr.h"
 #include "oct-obj.h"
 
 class idx_vector;
+class Octave_map;
 
 struct Mapper_fcn;
 
 // Constants.
 
 class
 tree_constant : public tree_fvc
 {
@@ -118,16 +119,19 @@ public:
     { rep = new tree_constant_rep (s); rep->count = 1; }
 
   tree_constant (double base, double limit, double inc) : tree_fvc ()
     { rep = new tree_constant_rep (base, limit, inc); rep->count = 1; }
 
   tree_constant (const Range& r) : tree_fvc ()
     { rep = new tree_constant_rep (r); rep->count = 1; }
 
+  tree_constant (const Octave_map& m) : tree_fvc ()
+    { rep = new tree_constant_rep (m); rep->count = 1; }
+
   tree_constant (tree_constant::magic_colon t) : tree_fvc ()
     {
       tree_constant_rep::constant_type tmp;
       tmp = tree_constant_rep::magic_colon;
       rep = new tree_constant_rep (tmp);
       rep->count = 1;
     }
 
@@ -143,40 +147,41 @@ public:
 
 #if defined (MDEBUG)
   void *operator new (size_t size);
   void operator delete (void *p, size_t size);
 #endif
 
 // Simple assignment.
 
-  tree_constant operator = (const tree_constant& a)
-    {
-      if (--rep->count <= 0 && rep != a.rep)
-	delete rep;
-
-      rep = a.rep;
-      rep->count++;
-      return *this;  
-    }
+  tree_constant operator = (const tree_constant& a);
 
 // Indexed assignment.
 
-  tree_constant assign (tree_constant& rhs, const Octave_object& args)
+  tree_constant assign (const tree_constant& rhs, const Octave_object& args)
     {
       if (rep->count > 1)
 	{
 	  --rep->count;
 	  rep = new tree_constant_rep (*rep);
 	  rep->count = 1;
 	}
       rep->assign (rhs, args);
       return *this;
     }
 
+// Simple structure assignment.
+
+  tree_constant assign_map_element (SLList<char*>& list, tree_constant& rhs);
+
+// Indexed structure assignment.
+
+  tree_constant assign_map_element (SLList<char*>& list, tree_constant& rhs,
+				    const Octave_object& args);
+
 // Type.  It would be nice to eliminate the need for this.
 
   int is_constant (void) const { return 1; }
 
 // Size.
 
   int rows (void) const { return rep->rows (); }
   int columns (void) const { return rep->columns (); }
@@ -192,16 +197,17 @@ public:
 
   int is_unknown (void) const { return rep->is_unknown (); }
   int is_real_scalar (void) const { return rep->is_real_scalar (); }
   int is_real_matrix (void) const { return rep->is_real_matrix (); }
   int is_complex_scalar (void) const { return rep->is_complex_scalar (); }
   int is_complex_matrix (void) const { return rep->is_complex_matrix (); }
   int is_string (void) const { return rep->is_string (); }
   int is_range (void) const { return rep->is_range (); }
+  int is_map (void) const { return rep->is_map (); }
   int is_magic_colon (void) const { return rep->is_magic_colon (); }
 
 // Are any or all of the elements in this constant nonzero?
 
   tree_constant all (void) const { return rep->all (); }
   tree_constant any (void) const { return rep->any (); }
 
   int is_real_type (void) const { return rep->is_real_type (); }
@@ -259,16 +265,20 @@ public:
     { return rep->complex_matrix_value (force_string_conversion); }
 
   char *string_value (void) const
     { return rep->string_value (); }
 
   Range range_value (void) const
     { return rep->range_value (); }
 
+  Octave_map map_value (void) const;
+
+  tree_constant lookup_map_element (SLList<char*>& list);
+
   ColumnVector vector_value (int force_string_conversion = 0,
 			     int force_vector_conversion = 0) const 
     { return rep->vector_value (); }
 
   ComplexColumnVector complex_vector_value (int force_string_conv = 0,
 					    int force_vec_conv = 0) const
     { return rep->complex_vector_value (); }
 
@@ -334,16 +344,26 @@ public:
 
 // Complain about unknown types used as args.
 
   friend void gripe_wrong_type_arg (const char *name, const tree_constant& tc);
 
   char *type_as_string (void) const
     { return rep->type_as_string (); }
 
+// We really do need this, and it should be private:
+
+private:
+
+  void make_unique (void);
+
+  tree_constant_rep *make_unique_map (void);
+
+public:
+
 // -------------------------------------------------------------------
 
 // These may not need to be member functions.
 
   tree_constant cumprod (void) const { return rep->cumprod (); }
   tree_constant cumsum (void) const { return rep->cumsum (); }
   tree_constant prod (void) const { return rep->prod (); }
   tree_constant sum (void) const { return rep->sum (); }
