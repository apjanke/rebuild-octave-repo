# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1470815682 14400
#      Wed Aug 10 03:54:42 2016 -0400
# Node ID 2fd4f1a3f4a8fa3799ebf44ce47e4ac2d88c1759
# Parent  da201af35c9720bf58c53936d6330cbff6416f8f
allow building with Qt5 (bug #40252)

* acinclude.m4 (OCTAVE_CHECK_QT_VERSION): Define HAVE_QT4 or HAVE_QT5.
Also check for Qt5PrintSupport when using Qt5.

* Canvas.cc, Object.cc, QTerminal.cc, TerminalView.cpp,
Vt102Emulation.cpp, konsole_wcwidth.h, find-files-dialog.cc,
file-editor-tab.cc, file-editor.cc, find-dialog.cc, octave-gui.cc,
resource-manager.cc, shortcut-manager.cc, workspace-model.cc,
workspace-view.cc: Adapt to Qt5 API changes.

diff --git a/libgui/graphics/Canvas.cc b/libgui/graphics/Canvas.cc
--- a/libgui/graphics/Canvas.cc
+++ b/libgui/graphics/Canvas.cc
@@ -388,17 +388,23 @@ Canvas::select_object (graphics_object o
         axesList.append (childObj);
       else if (childObj.isa ("uicontrol") || childObj.isa ("uipanel")
                || childObj.isa ("uibuttongroup"))
         {
           Matrix bb = childObj.get_properties ().get_boundingbox (false);
           QRectF r (bb(0), bb(1), bb(2), bb(3));
 
           r.adjust (-5, -5, 5, 5);
-          if (r.contains (event->posF ()))
+
+#if (HAVE_QT4)
+          bool rect_contains_pos = r.contains (event->posF ());
+#else
+          bool rect_contains_pos = r.contains (event->localPos ());
+#endif
+          if (rect_contains_pos)
             {
               currentObj = childObj;
               break;
             }
         }
     }
 
   if (axes_only)
@@ -437,17 +443,22 @@ Canvas::select_object (graphics_object o
             }
           // FIXME: is this really necessary? the axes object should
           //        have been selected through selectFromAxes anyway
           else if (it->get_properties ().is_hittest ())
             {
               Matrix bb = it->get_properties ().get_boundingbox (true);
               QRectF r (bb(0), bb(1), bb(2), bb(3));
 
-              if (r.contains (event->posF ()))
+#if defined (HAVE_QT4)
+              bool rect_contains_pos = r.contains (event->posF ());
+#else
+              bool rect_contains_pos = r.contains (event->localPos ());
+#endif
+              if (rect_contains_pos)
                 axesObj = *it;
             }
 
           if (axesObj && currentObj)
             break;
         }
     }
 }
diff --git a/libgui/graphics/Object.cc b/libgui/graphics/Object.cc
--- a/libgui/graphics/Object.cc
+++ b/libgui/graphics/Object.cc
@@ -178,14 +178,14 @@ Object::parentObject (const graphics_obj
 }
 
 Object*
 Object::fromQObject (QObject* obj)
 {
   QVariant v = obj->property ("QtHandles::Object");
 
   if (v.isValid ())
-    return reinterpret_cast<Object*> (qVariantValue<void*> (v));
+    return reinterpret_cast<Object*> (qvariant_cast<void*> (v));
 
   return 0;
 }
 
 }; // namespace QtHandles
diff --git a/libgui/qterminal/libqterminal/QTerminal.cc b/libgui/qterminal/libqterminal/QTerminal.cc
--- a/libgui/qterminal/libqterminal/QTerminal.cc
+++ b/libgui/qterminal/libqterminal/QTerminal.cc
@@ -78,19 +78,19 @@ QTerminal::set_global_shortcuts (bool fo
     if (focus_out)
       {
         _interrupt_action->setShortcut (QKeySequence ());
         _nop_action->setShortcut (QKeySequence ());
       }
     else
       {
         _interrupt_action->setShortcut (
-              QKeySequence (Qt::ControlModifier + Qt::Key_C));
+              QKeySequence (Qt::ControlModifier | Qt::Key_C));
         _nop_action->setShortcut (
-              QKeySequence (Qt::ControlModifier + Qt::Key_D));
+              QKeySequence (Qt::ControlModifier | Qt::Key_D));
       }
   }
 
 // slot for the terminal's context menu
 void
 QTerminal::handleCustomContextMenuRequested (const QPoint& at)
   {
     QClipboard * cb = QApplication::clipboard ();
@@ -189,16 +189,16 @@ QTerminal::notice_settings (const QSetti
   QKeySequence sc;
   sc = QKeySequence (settings->value ("shortcuts/main_edit:copy").toString ());
 
   // if sc is empty, shortcuts are not yet in the settings (take the default)
   if (sc.isEmpty ())         // QKeySequence::Copy as second argument in
     sc = QKeySequence::Copy; // settings->value () does not work!
 
   //  dis- or enable extra interrupt action
-  bool extra_ir_action = (sc != QKeySequence (Qt::ControlModifier + Qt::Key_C));
+  bool extra_ir_action = (sc != QKeySequence (Qt::ControlModifier | Qt::Key_C));
   _interrupt_action->setEnabled (extra_ir_action);
   has_extra_interrupt (extra_ir_action);
 
   // check whether shortcut Ctrl-D is in use by the main-window
   bool ctrld = settings->value ("shortcuts/main_ctrld",false).toBool ();
   _nop_action->setEnabled (! ctrld);
 }
diff --git a/libgui/qterminal/libqterminal/unix/TerminalView.cpp b/libgui/qterminal/libqterminal/unix/TerminalView.cpp
--- a/libgui/qterminal/libqterminal/unix/TerminalView.cpp
+++ b/libgui/qterminal/libqterminal/unix/TerminalView.cpp
@@ -36,16 +36,17 @@
 #include <QtCore/QFile>
 #include <QGridLayout>
 #include <QLabel>
 #include <QLayout>
 #include <QPainter>
 #include <QPixmap>
 #include <QScrollBar>
 #include <QStyle>
+#include <QToolTip>
 #include <QtCore>
 #include <QtGui>
 
 #include "unix/Filter.h"
 #include "unix/konsole_wcwidth.h"
 #include "unix/ScreenWindow.h"
 #include "unix/TerminalCharacterDecoder.h"
 
diff --git a/libgui/qterminal/libqterminal/unix/Vt102Emulation.cpp b/libgui/qterminal/libqterminal/unix/Vt102Emulation.cpp
--- a/libgui/qterminal/libqterminal/unix/Vt102Emulation.cpp
+++ b/libgui/qterminal/libqterminal/unix/Vt102Emulation.cpp
@@ -989,17 +989,17 @@ void Vt102Emulation::sendKeyEvent( QKeyE
         // print an error message to the terminal if no key translator has been
         // set
         QString translatorError =  ("No keyboard translator available.  "
                                          "The information needed to convert key presses "
                                          "into characters to send to the terminal "
                                          "is missing.");
 
         reset();
-        receiveData( translatorError.toAscii().constData() , translatorError.count() );
+        receiveData( translatorError.toLatin1().constData() , translatorError.count() );
     }
 }
 
 /* ------------------------------------------------------------------------- */
 /*                                                                           */
 /*                                VT100 Charsets                             */
 /*                                                                           */
 /* ------------------------------------------------------------------------- */
diff --git a/libgui/qterminal/libqterminal/unix/konsole_wcwidth.h b/libgui/qterminal/libqterminal/unix/konsole_wcwidth.h
--- a/libgui/qterminal/libqterminal/unix/konsole_wcwidth.h
+++ b/libgui/qterminal/libqterminal/unix/konsole_wcwidth.h
@@ -6,17 +6,16 @@
     Rewritten for QT4 by e_k <e_k at users.sourceforge.net>
 */
 
 
 #ifndef	_KONSOLE_WCWIDTH_H_
 #define	_KONSOLE_WCWIDTH_H_
 
 // Qt
-#include <QtCore/QBool>
 #include <QtCore/QString>
 
 int konsole_wcwidth(quint16 ucs);
 #if 0
 int konsole_wcwidth_cjk(Q_UINT16 ucs);
 #endif
 
 int string_width( const QString &txt );
diff --git a/libgui/src/find-files-dialog.cc b/libgui/src/find-files-dialog.cc
--- a/libgui/src/find-files-dialog.cc
+++ b/libgui/src/find-files-dialog.cc
@@ -120,17 +120,21 @@ find_files_dialog::find_files_dialog (QW
   _file_list->setSelectionBehavior (QAbstractItemView::SelectRows);
   _file_list->setSelectionMode (QAbstractItemView::SingleSelection);
   _file_list->setAlternatingRowColors (true);
   _file_list->setToolTip (tr ("Search results"));
   _file_list->setSortingEnabled (true);
   _file_list->horizontalHeader ()->restoreState (
     settings->value ("findfiles/column_state").toByteArray ());
   _file_list->horizontalHeader ()->setSortIndicatorShown (true);
+#if defined (HAVE_QT4)
   _file_list->horizontalHeader ()->setClickable (true);
+#else
+  _file_list->horizontalHeader ()->setSectionsClickable (true);
+#endif
   _file_list->horizontalHeader ()->setStretchLastSection (true);
   _file_list->sortByColumn (
                 settings->value ("findfiles/sort_files_by_column",0).toInt (),
                 static_cast<Qt::SortOrder>
                   (settings->value ("findfiles/sort_files_by_order",
                                     Qt::AscendingOrder).toUInt ()));
 
   connect (_file_list, SIGNAL (doubleClicked (const QModelIndex&)),
diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -47,16 +47,17 @@ along with Octave; see the file COPYING.
 #include <QApplication>
 #include <QFileDialog>
 #include <QMessageBox>
 #include <QTextStream>
 #include <QVBoxLayout>
 #include <QInputDialog>
 #include <QPrintDialog>
 #include <QDateTime>
+#include <QDesktopServices>
 #include <QTextCodec>
 #include <QStyle>
 #include <QTextBlock>
 #include <QLabel>
 #include <QCheckBox>
 #include <QDialogButtonBox>
 #include <QPushButton>
 
@@ -586,20 +587,25 @@ file_editor_tab::update_lexer ()
   // build information for auto completion (APIs)
   _lexer_apis = new QsciAPIs(lexer);
 
   if (_lexer_apis)
     {
       bool update_apis_file = false;  // flag, whether update of apis files
 
       // get path to prepared api info
-      QDesktopServices desktopServices;
+#if defined (HAVE_QT4)
       QString prep_apis_path
-        = desktopServices.storageLocation (QDesktopServices::HomeLocation)
+        = QDesktopServices::storageLocation (QDesktopServices::HomeLocation)
           + "/.config/octave/"  + QString(OCTAVE_VERSION) + "/qsci/";
+#else
+      QString prep_apis_path
+        = QStandardPaths::writableLocation (QStandardPaths::HomeLocation)
+          + "/.config/octave/"  + QString(OCTAVE_VERSION) + "/qsci/";
+#endif
 
       // get settings which infos are used for octave
       bool octave_builtins = settings->value (
                   "editor/codeCompletion_octave_builtins", true).toBool ();
       bool octave_functions = settings->value (
                   "editor/codeCompletion_octave_functions", true).toBool ();
 
       if (_is_octave_file)
@@ -622,19 +628,26 @@ file_editor_tab::update_lexer ()
           // function list depends on installed packages: check mod. date
           if (! update_apis_file && octave_functions)
             {
               // check whether package file is newer than apis_file
               QDateTime apis_date = apis_file.lastModified ();
 
               // compare to local package list
               // FIXME: How to get user chosen location?
-              QFileInfo local_pkg_list = QFileInfo (
-                desktopServices.storageLocation (QDesktopServices::HomeLocation)
-                + "/.octave_packages");
+#if defined (HAVE_QT4)
+              QFileInfo local_pkg_list
+                = QFileInfo (QDesktopServices::storageLocation (QDesktopServices::HomeLocation)
+                             + "/.octave_packages");
+#else
+              QFileInfo local_pkg_list
+                = QFileInfo (QStandardPaths::writableLocation (QStandardPaths::HomeLocation)
+                             + "/.octave_packages");
+#endif
+
               if (local_pkg_list.exists ()
                   & (apis_date < local_pkg_list.lastModified ()) )
                 update_apis_file = true;
 
               // compare to global package list
               // FIXME: How to get user chosen location?
               QFileInfo global_pkg_list = QFileInfo (
                                         QString::fromStdString (Voctave_home)
@@ -1573,17 +1586,17 @@ file_editor_tab::load_file (const QStrin
     file_to_load = fileName;
   QFile file (file_to_load);
   if (! file.open (QFile::ReadOnly))
     return file.errorString ();
 
   // read the file
   QTextStream in (&file);
   // set the desired codec
-  QTextCodec *codec = QTextCodec::codecForName (_encoding.toAscii ());
+  QTextCodec *codec = QTextCodec::codecForName (_encoding.toLatin1 ());
   in.setCodec(codec);
 
   QApplication::setOverrideCursor (Qt::WaitCursor);
   _edit_area->setText (in.readAll ());
   _edit_area->setEolMode (detect_eol_mode ());
   QApplication::restoreOverrideCursor ();
 
   _copy_available = false;     // no selection yet available
@@ -1612,17 +1625,17 @@ file_editor_tab::load_file (const QStrin
 */
 
   return QString ();
 }
 
 QsciScintilla::EolMode
 file_editor_tab::detect_eol_mode ()
 {
-  QByteArray text = _edit_area->text ().toAscii ();
+  QByteArray text = _edit_area->text ().toLatin1 ();
 
   QByteArray eol_lf = QByteArray (1,0x0a);
   QByteArray eol_cr = QByteArray (1,0x0d);
   QByteArray eol_crlf = eol_cr;
   eol_crlf.append (eol_lf);
 
   int count_crlf = text.count (eol_crlf);
   int count_lf = text.count (eol_lf) - count_crlf;  // isolated lf
@@ -1854,17 +1867,17 @@ file_editor_tab::save_file (const QStrin
       return;
     }
 
   // save the contents into the file
 
   _encoding = _new_encoding;    // consider a possible new encoding
 
   // set the desired codec (if suitable for contents)
-  QTextCodec *codec = QTextCodec::codecForName (_encoding.toAscii ());
+  QTextCodec *codec = QTextCodec::codecForName (_encoding.toLatin1 ());
 
   if (check_valid_codec (codec))
     {
       save_file_as (remove_on_success);
       return;
     }
 
   // write the file
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -25,27 +25,28 @@ along with Octave; see the file COPYING.
 #endif
 
 #if defined (HAVE_QSCINTILLA)
 
 #include "file-editor.h"
 #include "resource-manager.h"
 #include "shortcut-manager.h"
 
-#include <QVBoxLayout>
 #include <QApplication>
 #include <QFile>
+#include <QFileDialog>
 #include <QFont>
-#include <QFileDialog>
+#include <QInputDialog>
 #include <QMessageBox>
+#include <QMimeData>
+#include <QProcess>
 #include <QStyle>
+#include <QTabBar>
 #include <QTextStream>
-#include <QTabBar>
-#include <QProcess>
-#include <QInputDialog>
+#include <QVBoxLayout>
 #include <Qsci/qscicommandset.h>
 
 #include "octave-link.h"
 #include "utils.h"
 #include "main-window.h"
 #include <oct-map.h>
 
 file_editor::file_editor (QWidget *p)
diff --git a/libgui/src/m-editor/find-dialog.cc b/libgui/src/m-editor/find-dialog.cc
--- a/libgui/src/m-editor/find-dialog.cc
+++ b/libgui/src/m-editor/find-dialog.cc
@@ -60,18 +60,27 @@ along with Octave; see the file COPYING.
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
 #if defined (HAVE_QSCINTILLA)
 
-#include <QtGui>
+#include <QCheckBox>
+#include <QCheckBox>
+#include <QDialogButtonBox>
+#include <QGridLayout>
 #include <QIcon>
+#include <QLabel>
+#include <QLineEdit>
+#include <QMessageBox>
+#include <QPushButton>
+#include <QVBoxLayout>
+
 #include "find-dialog.h"
 
 find_dialog::find_dialog (QsciScintilla* edit_area,
                           QList<QAction *> find_actions, QWidget *p)
   : QDialog (p)
 {
   setWindowTitle (tr ("Find and Replace"));
   setWindowIcon (QIcon(":/actions/icons/find.png"));
diff --git a/libgui/src/octave-gui.cc b/libgui/src/octave-gui.cc
--- a/libgui/src/octave-gui.cc
+++ b/libgui/src/octave-gui.cc
@@ -23,16 +23,17 @@ along with Octave; see the file COPYING.
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
 #include <QApplication>
 #include <QTextCodec>
 #include <QThread>
 #include <QTranslator>
+#include <QtGlobal>
 
 #include <cstdio>
 
 #include <iostream>
 
 #if defined (HAVE_SYS_IOCTL_H)
 #  include <sys/ioctl.h>
 #endif
@@ -55,17 +56,21 @@ along with Octave; see the file COPYING.
 #include "resource-manager.h"
 #include "shortcut-manager.h"
 #include "thread-manager.h"
 #include "welcome-wizard.h"
 
 // Disable all Qt messages by default.
 
 static void
+#if defined (HAVE_QT4)
 message_handler (QtMsgType, const char *)
+#else
+message_handler (QtMsgType, const QMessageLogContext &, const QString &)
+#endif
 {
 }
 
 namespace octave
 {
   bool gui_application::start_gui_p (void) const
   {
     if (m_options.no_window_system ())
@@ -123,33 +128,39 @@ namespace octave
 
     set_application_id ();
 
     std::string show_gui_msgs = octave::sys::env::getenv ("OCTAVE_SHOW_GUI_MESSAGES");
 
     // Installing our handler suppresses the messages.
 
     if (show_gui_msgs.empty ())
-      qInstallMsgHandler (message_handler);
+      {
+#if defined (HAVE_QT4)
+        qInstallMsgHandler (message_handler);
+#else
+        qInstallMessageHandler (message_handler);
+#endif
+      }
 
 #if defined (HAVE_QT_GRAPHICS)
     install___init_qt___functions ();
 
     Fregister_graphics_toolkit (ovl ("qt"));
 #endif
 
     // If START_GUI is false, we still set up the QApplication so that
     // we can use Qt widgets for plot windows.
 
     QApplication qt_app (m_argc, m_argv);
     QTranslator gui_tr, qt_tr, qsci_tr;
 
     // Set the codec for all strings (before wizard or any GUI object)
 #if ! defined (Q_OS_WIN32)
-    QTextCodec::setCodecForCStrings (QTextCodec::codecForName ("UTF-8"));
+    QTextCodec::setCodecForLocale (QTextCodec::codecForName ("UTF-8"));
 #endif
 
     bool start_gui = start_gui_p ();
 
     // Show welcome wizard if this is the first run.
 
     if (resource_manager::is_first_run () && start_gui)
       {
diff --git a/libgui/src/resource-manager.cc b/libgui/src/resource-manager.cc
--- a/libgui/src/resource-manager.cc
+++ b/libgui/src/resource-manager.cc
@@ -26,16 +26,19 @@ along with Octave; see the file COPYING.
 
 #include <string>
 
 #include <QFile>
 #include <QDir>
 #include <QNetworkProxy>
 #include <QLibraryInfo>
 #include <QMessageBox>
+#if defined (HAVE_QT5)
+#  include <QStandardPaths>
+#endif
 #include <QTextCodec>
 
 #include "error.h"
 #include "file-ops.h"
 #include "help.h"
 #include "oct-env.h"
 
 #include "defaults.h"
@@ -56,20 +59,23 @@ default_qt_settings_file (void)
 
   return QString::fromStdString (dsf);
 }
 
 resource_manager::resource_manager (void)
   : settings_directory (), settings_file (), settings (0),
     default_settings (0)
 {
-  QDesktopServices desktopServices;
-
+#if defined (HAVE_QT4)
   QString home_path
-    = desktopServices.storageLocation (QDesktopServices::HomeLocation);
+    = QDesktopServices::storageLocation (QDesktopServices::HomeLocation);
+#else
+  QString home_path
+    = QStandardPaths::writableLocation (QStandardPaths::HomeLocation);
+#endif
 
   settings_directory = home_path + "/.config/octave";
 
   settings_file = settings_directory + "/qt-settings";
 
   default_settings = new QSettings (default_qt_settings_file (),
                                     QSettings::IniFormat);
 }
diff --git a/libgui/src/shortcut-manager.cc b/libgui/src/shortcut-manager.cc
--- a/libgui/src/shortcut-manager.cc
+++ b/libgui/src/shortcut-manager.cc
@@ -25,16 +25,17 @@ along with Octave; see the file COPYING.
 #endif
 
 #include <QtCore>
 #include <QMessageBox>
 #include <QDebug>
 #include <QGridLayout>
 #include <QVBoxLayout>
 #include <QDialogButtonBox>
+#include <QKeySequence>
 #include <QPushButton>
 #include <QLineEdit>
 #include <QCheckBox>
 #include <QHeaderView>
 #include <QAction>
 #include <QFileDialog>
 
 #include "error.h"
@@ -75,32 +76,32 @@ shortcut_manager::instance_ok (void)
     }
 
   return retval;
 }
 
 void
 shortcut_manager::do_init_data ()
 {
-  QKeySequence ctrl;
+  Qt::KeyboardModifier ctrl;
   int prefix;
 #if defined (Q_OS_MAC)
   // Use CMD key as an equivalent of Ctrl key on other platforms
   ctrl = Qt::MetaModifier;
   // Some of octave default shortcuts on windows/linux are already defined
   // as system wide shortcuts on Mac Os X (almost all Function keys).
   // Prefix those with Option (Alt) modifier to avoid conflicts.
   prefix = Qt::AltModifier;
 #else
   ctrl = Qt::ControlModifier;
   prefix = Qt::NoModifier;
 #endif
 
-  QKeySequence ctrl_shift = ctrl + Qt::ShiftModifier;
-  QKeySequence ctrl_alt = ctrl + Qt::AltModifier;
+  Qt::KeyboardModifiers ctrl_shift = ctrl | Qt::ShiftModifier;
+  Qt::KeyboardModifiers ctrl_alt = ctrl | Qt::AltModifier;
 
   // actions of the main window
 
   _settings->setValue ("shortcuts/main_ctrld",false); // reset use fo ctrl-d
 
   // file
   init (tr ("New File"), "main_file:new_file", QKeySequence::New);
   init (tr ("New Function"), "main_file:new_function",
@@ -357,17 +358,21 @@ shortcut_manager::init (QString descript
 }
 
 void
 shortcut_manager::do_fill_treewidget (QTreeWidget *tree_view)
 {
   _dialog = 0;
   _level_hash.clear ();
 
+#if defined (HAVE_QT4)
   tree_view->header ()->setResizeMode (QHeaderView::ResizeToContents);
+#else
+  tree_view->header ()->setSectionResizeMode (QHeaderView::ResizeToContents);
+#endif
 
   QTreeWidgetItem *main = new QTreeWidgetItem (tree_view);
   main->setText (0, tr ("Global"));
   main->setExpanded (true);
   QTreeWidgetItem *main_file = new QTreeWidgetItem (main);
   main_file->setText (0, tr ("File"));
   QTreeWidgetItem *main_edit = new QTreeWidgetItem (main);
   main_edit->setText (0, tr ("Edit"));
@@ -425,18 +430,18 @@ shortcut_manager::do_fill_treewidget (QT
 
       // set a slightly transparent foreground for default columns
       QColor fg = QColor (tree_item->foreground (1).color ());
       fg.setAlpha (128);
       tree_item->setForeground (1, QBrush (fg));
 
       // write the shortcuts
       tree_item->setText (0, sc.description);
-      tree_item->setText (1, sc.default_sc);
-      tree_item->setText (2, sc.actual_sc);
+      tree_item->setText (1, sc.default_sc.toString ());
+      tree_item->setText (2, sc.actual_sc.toString ());
 
       _item_index_hash[tree_item] = i + 1; // index+1 to avoid 0
       _index_item_hash[i] = tree_item;
     }
 
 }
 
 // write one or all actual shortcut set(s) into a settings file
@@ -550,18 +555,18 @@ shortcut_manager::shortcut_dialog (int i
 
       connect (direct, SIGNAL (stateChanged (int)),
                _edit_actual, SLOT (handle_direct_shortcut (int)));
       connect (_dialog, SIGNAL (finished (int)),
                this, SLOT (shortcut_dialog_finished (int)));
 
     }
 
-  _edit_actual->setText (_sc.at (index).actual_sc);
-  _label_default->setText (_sc.at (index).default_sc);
+  _edit_actual->setText (_sc.at (index).actual_sc.toString ());
+  _label_default->setText (_sc.at (index).default_sc.toString ());
   _handled_index = index;
 
   _edit_actual->setFocus ();
   _dialog->setFocusProxy (_edit_actual);
   _dialog->exec ();
 }
 
 void
@@ -584,29 +589,29 @@ shortcut_manager::shortcut_dialog_finish
                      .arg (_sc.at (double_index).description),
                   QMessageBox::Yes | QMessageBox::No, QMessageBox::Yes);
 
       if (ret == QMessageBox::Yes)
         {
           shortcut_t double_shortcut = _sc.at (double_index);
           double_shortcut.actual_sc = QKeySequence ();
           _sc.replace (double_index, double_shortcut);
-          _index_item_hash[double_index]->setText (2, QKeySequence ());
+          _index_item_hash[double_index]->setText (2, QString ());
         }
       else
         return;
     }
 
   shortcut_t shortcut = _sc.at (_handled_index);
   if (! shortcut.actual_sc.isEmpty ())
     _shortcut_hash.remove (shortcut.actual_sc.toString ());
   shortcut.actual_sc = _edit_actual->text();
   _sc.replace (_handled_index, shortcut);
 
-  _index_item_hash[_handled_index]->setText (2, shortcut.actual_sc);
+  _index_item_hash[_handled_index]->setText (2, shortcut.actual_sc.toString ());
 
   if (! shortcut.actual_sc.isEmpty ())
     _shortcut_hash[shortcut.actual_sc.toString ()] = _handled_index + 1;
 }
 
 void
 shortcut_manager::shortcut_dialog_set_default ()
 {
@@ -629,17 +634,17 @@ shortcut_manager::import_shortcuts (QSet
                           toString ());       // and use the old one as default
       else
         sc.actual_sc = QKeySequence (sc.default_sc); // get default shortcut
 
       _sc.replace (i,sc);                   // replace the old with the new one
 
       // update the tree view
       QTreeWidgetItem* tree_item = _index_item_hash[i]; // get related tree item
-      tree_item->setText (2, sc.actual_sc); // display new shortcut
+      tree_item->setText (2, sc.actual_sc.toString ()); // display new shortcut
     }
 }
 
 // ask the user whether to save the current shortcut set;
 // returns true to proceed with import action, false to abort it
 bool
 shortcut_manager::overwrite_all_shortcuts ()
 {
@@ -768,11 +773,11 @@ enter_shortcut::keyPressEvent (QKeyEvent
         key += Qt::SHIFT;
       if (modifiers & Qt::ControlModifier)
         key += Qt::CTRL;
       if (modifiers & Qt::AltModifier)
         key += Qt::ALT;
       if (modifiers & Qt::MetaModifier)
         key += Qt::META;
 
-      setText (QKeySequence(key));
+      setText (QKeySequence(key).toString ());
     }
 }
diff --git a/libgui/src/workspace-model.cc b/libgui/src/workspace-model.cc
--- a/libgui/src/workspace-model.cc
+++ b/libgui/src/workspace-model.cc
@@ -126,17 +126,17 @@ workspace_model::data (const QModelIndex
   QVariant retval;
 
   if (idx.isValid ())
     {
       if (role == Qt::BackgroundColorRole)
         {
           QString class_chars = resource_manager::storage_class_chars ();
           int actual_class
-            = class_chars.indexOf (_scopes[idx.row ()].toAscii ());
+            = class_chars.indexOf (_scopes[idx.row ()].toLatin1 ());
           if (actual_class >= 0)
             return QVariant (_storage_class_colors.at (actual_class));
           else
             return retval;
         }
 
       if (role == Qt::DisplayRole
           || (idx.column () == 0 && role == Qt::EditRole)
@@ -166,17 +166,17 @@ workspace_model::data (const QModelIndex
 
             case 4:
               {
                 QString sclass;
 
                 QString class_chars = resource_manager::storage_class_chars ();
 
                 int actual_class
-                  = class_chars.indexOf (_scopes[idx.row ()].toAscii ());
+                  = class_chars.indexOf (_scopes[idx.row ()].toLatin1 ());
 
                 if (actual_class >= 0)
                   {
                     QStringList class_names
                       = resource_manager::storage_class_names ();
 
                     sclass = class_names.at (actual_class);
                   }
diff --git a/libgui/src/workspace-view.cc b/libgui/src/workspace-view.cc
--- a/libgui/src/workspace-view.cc
+++ b/libgui/src/workspace-view.cc
@@ -103,19 +103,25 @@ workspace_view::workspace_view (QWidget 
       widget ()->setLayout (ws_layout);
 
       // Initialize collapse/expand state of the workspace subcategories.
 
       //enable sorting (setting column and order after model was set)
       view->setSortingEnabled (true);
       // Initialize column order and width of the workspace
       view->horizontalHeader ()->restoreState (settings->value ("workspaceview/column_state").toByteArray ());
+
       // Set header properties for sorting
+#if defined (HAVE_QT4)
       view->horizontalHeader ()->setClickable (true);
       view->horizontalHeader ()->setMovable (true);
+#else
+      view->horizontalHeader ()->setSectionsClickable (true);
+      view->horizontalHeader ()->setSectionsMovable (true);
+#endif
       view->horizontalHeader ()->setSortIndicator (settings->value ("workspaceview/sort_by_column",0).toInt (),
                                                    static_cast<Qt::SortOrder>
                                                    (settings->value ("workspaceview/sort_order", Qt::AscendingOrder).toUInt ()));
       view->horizontalHeader ()->setSortIndicatorShown (true);
 
       view->horizontalHeader ()->setContextMenuPolicy (Qt::CustomContextMenu);
       connect (view->horizontalHeader (),
                SIGNAL (customContextMenuRequested (const QPoint &)),
diff --git a/m4/acinclude.m4 b/m4/acinclude.m4
--- a/m4/acinclude.m4
+++ b/m4/acinclude.m4
@@ -1345,17 +1345,17 @@ AC_DEFUN([OCTAVE_CHECK_QT_VERSION], [AC_
 
   ## Check for Qt libraries
   case "$qt_version" in
     4)
       QT_MODULES="QtCore QtGui QtNetwork QtOpenGL"
       LIBQSCINTILLA=qscintilla2
     ;;
     5)
-      QT_MODULES="Qt5Core Qt5Gui Qt5Network Qt5OpenGL"
+      QT_MODULES="Qt5Core Qt5Gui Qt5Network Qt5OpenGL Qt5PrintSupport"
       LIBQSCINTILLA=qt5scintilla2
     ;;
     *)
       AC_MSG_ERROR([Unrecognized Qt version $qt_version])
     ;;
   esac
 
   PKG_CHECK_MODULES(QT, [$QT_MODULES],
@@ -1518,17 +1518,17 @@ AC_DEFUN([OCTAVE_CHECK_QT_VERSION], [AC_
     if test $octave_cv_lib_qscintilla = no; then
       warn_qscintilla="Qscintilla library not found; disabling built-in Qt GUI editor"
     else
       ## Let's assume Qscintilla library is at the same location as
       ## other regular Qt libraries.
       QT_LIBS="$QT_LIBS -l$LIBQSCINTILLA"
       OCTAVE_CHECK_QSCINTILLA_VERSION
       AC_DEFINE(HAVE_QSCINTILLA, 1,
-        [Define to 1 if the QScintilla library and header files are available])
+        [Define to 1 if the QScintilla library and header files are available.])
 
       save_CPPFLAGS="$CPPFLAGS"
       save_CXXFLAGS="$CXXFLAGS"
       CPPFLAGS="$QT_CPPFLAGS $CXXPICFLAG $CPPFLAGS"
       CXXFLAGS="$CXXPICFLAG $CXXFLAGS"
       AC_LANG_PUSH(C++)
       AC_CHECK_HEADERS([Qsci/qscilexeroctave.h Qsci/qscilexermatlab.h])
       AC_LANG_POP(C++)
@@ -1552,21 +1552,29 @@ dnl
 dnl OCTAVE_CHECK_QT
 dnl
 AC_DEFUN([OCTAVE_CHECK_QT], [
   octave_qt_versions="$1"
   if test $check_qt = yes; then
     for ver in $octave_qt_versions; do
       OCTAVE_CHECK_QT_VERSION([$ver])
       if test $build_qt_gui = yes; then
+        have_qt_version=$ver
         break
       fi
     done
 
-    if test $build_qt_gui = no; then
+    if test $build_qt_gui = yes; then
+      if test x"$have_qt_version" = x4; then
+        AC_DEFINE(HAVE_QT4, 1, [Define if you are using Qt version 4.])
+      fi
+      if test x"$have_qt_version" = x5; then
+        AC_DEFINE(HAVE_QT5, 1, [Define if you are using Qt version 5.])
+      fi
+    else
       if test -n "$warn_qt_libraries"; then
         OCTAVE_CONFIGURE_WARNING([warn_qt_libraries])
       fi
       if test -n "$warn_qt_version"; then
           OCTAVE_CONFIGURE_WARNING([warn_qt_version])
       fi
       if test -n "$warn_qt_tools"; then
           OCTAVE_CONFIGURE_WARNING([warn_qt_tools])
