# HG changeset patch
# User Guillaume Flandin
# Date 1491504758 14400
#      Thu Apr 06 14:52:38 2017 -0400
# Node ID 426b593b4b6b2e94f41de4060b04f1706f78c954
# Parent  ef20eee0247d4a6cbfcb05169229c1e2042edf42
fix key sorting for +containers.Map

* +containers/Map.m (Map): Set value type to any if values are not scalar.
(decode_keys): Ensure keys remain a row vector.
(sort_keys): Sort actual key values, not hex transformed keys.
New tests.

diff --git a/scripts/+containers/Map.m b/scripts/+containers/Map.m
--- a/scripts/+containers/Map.m
+++ b/scripts/+containers/Map.m
@@ -195,16 +195,19 @@ classdef Map < handle
           else
             error ("containers.Map: all keys must be the same data type");
           endif
         endif
 
         ## Determine ValueType
         vt = unique (cellfun (@class, vals, "UniformOutput", false));
         if (numel (vt) == 1
+            && (strcmp (vt{1}, "char")
+                || all (cellfun ("isreal", vals)
+                        & (cellfun ("numel", vals) == 1)))
             && any (strcmp (vt{1}, {"char", "logical", "double", "single", ...
                                     "int32", "uint32", "int64", "uint64"})))
           this.ValueType = vt{1};
         else
           this.ValueType = "any";
         endif
 
         ## Process UniformValues option
@@ -503,22 +506,28 @@ classdef Map < handle
           keytype = "single";
         else
           keytype = "double";
         endif
         keys = hex2num (keys, keytype);
         if (! strcmp (this.KeyType, keytype))
           keys = typecast (keys, this.KeyType);
         endif
-        keys = mat2cell (keys, ones (numel (keys), 1), 1);
+        keys = mat2cell (keys.', 1, ones (numel (keys), 1));
       endif
     endfunction
 
     function this = sort_keys (this)
-      this.map = orderfields (this.map);
+      keySet = keys (this);
+      if (this.numeric_keys)
+        [~, p] = sort (cell2mat (keySet));
+      else
+        [~, p] = sort (keySet);
+      endif
+      this.map = orderfields (this.map, p);
     endfunction
 
     function check_types (this)
       switch (this.KeyType)
         case {"char"}
           this.numeric_keys = false;
         case {"single", "double", "int32", "uint32", "int64", "uint64"}
           this.numeric_keys = true;
@@ -551,16 +560,20 @@ endclassdef
 
 %!test
 %! key = {"One", "Two", "Three", "Four"};
 %! val = [1, 2, 3, 4];
 %! m = containers.Map (key, val);
 %! assert (m.KeyType, "char");
 %! assert (m.ValueType, "double");
 %! assert (m.Count, uint64 (4));
+%! assert (iscell (keys (m)));
+%! assert (iscell (values (m)));
+%! assert (size (keys (m)), [1, 4]);
+%! assert (size (values (m)), [1, 4]);
 %! assert (m("Two"), 2);
 %! m("Five") = 5;
 %! key2 = {"Six", "Seven", "Eight"};
 %! val2 = [6, 7, 8];
 %! m2 = containers.Map (key2, val2);
 %! m = [m; m2];
 %! assert (m.Count, uint64 (8));
 %! k = keys (m);
@@ -579,16 +592,18 @@ endclassdef
 %! assert (m.ValueType, "char");
 
 %!test
 %! key = [2, 3, 4];
 %! val = {eye(2), eye(3), eye(4)};
 %! m = containers.Map (key, val);
 %! assert (m(3), eye(3));
 %! assert (m(2)(2,2), 1);
+%! assert (m.KeyType, "double");
+%! assert (m.ValueType, "any");
 
 %!test
 %! m = containers.Map ("KeyType","char", "ValueType","int32");
 %! assert (m.KeyType, "char");
 %! assert (m.ValueType, "int32");
 %! assert (m.Count, uint64 (0));
 %! assert (isempty (m));
 
@@ -625,16 +640,18 @@ endclassdef
 
 %!test
 %! key = {"a", "b"};
 %! val = {struct(), struct()};
 %! m = containers.Map (key, val);
 %! assert (m.ValueType, "any");
 %! m = containers.Map (key, val, "UniformValues", true);
 %! assert (m.ValueType, "any");
+%! m = containers.Map (key, {1, 2i});
+%! assert (m.ValueType, "any");
 
 %!test
 %! m = containers.Map ({"a","b","c"}, {1,2,3});
 %! assert (m.isKey("a"), true);
 %! assert (m.isKey({"a","d"}), [true, false]);
 %! m.remove("a");
 %! m.remove({"b","c"});
 %! assert (isempty (m));
@@ -665,16 +682,33 @@ endclassdef
 %!   assert (m.isKey (key));
 %!   assert (m.keys (), {key});
 %!   key = -realmax (keytype);
 %!   m = containers.Map (key, pi);
 %!   assert (m.isKey (key));
 %!   assert (m.keys (), {key});
 %! endfor
 
+## Check order of keys and values
+%!test
+%! key = {"d","a","b"};
+%! m = containers.Map (key, 1:numel (key));
+%! assert (keys (m), sort (key));
+%! assert (values (m), {2, 3, 1});
+%! m("c") = 4;
+%! assert (keys (m), sort ([key, "c"]));
+%! assert (values (m), {2, 3, 4, 1});
+%! key = [Inf, 2, 0, -Inf, -1];
+%! m = containers.Map (key, 1:numel (key));
+%! assert (keys (m), num2cell (sort (key)));
+%! assert (values (m), {4, 5, 3, 2, 1});
+%! m(-2) = 6;
+%! assert (keys (m), num2cell (sort ([key, -2])));
+%! assert (values (m), {4, 6, 5, 3, 2, 1});
+
 ## Test input validation
 %!error containers.Map (1,2,3)
 %!error containers.Map (1,2,3,4,5)
 %!error <empty keys are not allowed> containers.Map ([], 1)
 %!error <number of keys and values must match> containers.Map (1, {2, 3})
 %!error <keys must be real .* values> containers.Map ({{1}}, 2)
 %!error <keys must be .* scalar .* values> containers.Map ({magic(3)}, 2)
 %!warning <keys .* converted to double>
