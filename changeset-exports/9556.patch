# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1251057603 -7200
#      Sun Aug 23 22:00:03 2009 +0200
# Node ID 948795dc19747a05b45acde73e572ee6ae22f508
# Parent  76ecc571879ea37c14fffada007d7b204b099155
make a few Array methods inline

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -41,67 +41,28 @@ along with Octave; see the file COPYING.
 #include "idx-vector.h"
 #include "lo-error.h"
 #include "oct-locbuf.h"
 
 // One dimensional array class.  Handles the reference counting for
 // all the derived classes.
 
 template <class T>
-void
-Array<T>::make_unique (void)
-{
-  if (rep->count > 1)
-    {
-      --rep->count;
-      rep = new ArrayRep (slice_data, slice_len, true);
-      slice_data = rep->data;
-    }
-}
-
-template <class T>
 Array<T>::Array (const Array<T>& a, const dim_vector& dv)
   : rep (a.rep), dimensions (dv), 
     slice_data (a.slice_data), slice_len (a.slice_len)
 {
   rep->count++;
 
   if (a.numel () < dv.numel ())
     (*current_liboctave_error_handler)
       ("Array::Array (const Array&, const dim_vector&): dimension mismatch");
 }
 
 template <class T>
-Array<T>::~Array (void)
-{
-  if (--rep->count <= 0)
-    delete rep;
-}
-
-template <class T>
-Array<T>&
-Array<T>::operator = (const Array<T>& a)
-{
-  if (this != &a)
-    {
-      if (--rep->count <= 0)
-	delete rep;
-
-      rep = a.rep;
-      rep->count++;
-
-      dimensions = a.dimensions;
-      slice_data = a.slice_data;
-      slice_len = a.slice_len;
-    }
-
-  return *this;
-}
-
-template <class T>
 void
 Array<T>::fill (const T& val)
 {
   if (rep->count > 1)
     {
       --rep->count;
       rep = new ArrayRep (length (), val);
       slice_data = rep->data;
diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -93,17 +93,25 @@ protected:
 
     ArrayRep& operator = (const ArrayRep& a);
   };
 
   //--------------------------------------------------------------------
 
 public:
 
-  void make_unique (void);
+  void make_unique (void)
+    {
+      if (rep->count > 1)
+        {
+          --rep->count;
+          rep = new ArrayRep (slice_data, slice_len, true);
+          slice_data = rep->data;
+        }
+    }
 
   typedef T element_type;
 
   typedef bool (*compare_fcn_type) (typename ref_param<T>::type,
 				    typename ref_param<T>::type);
 
 protected:
 
@@ -228,19 +236,39 @@ public:
     {
       slice_data = rep->data;
       slice_len = rep->len;
       fill (val);
     }
 
   Array (const Array<T>& a, const dim_vector& dv);
 
-  virtual ~Array (void);
+  ~Array (void)
+    {
+      if (--rep->count <= 0)
+        delete rep;
+    }
 
-  Array<T>& operator = (const Array<T>& a);
+  Array<T>& operator = (const Array<T>& a)
+    {
+      if (this != &a)
+        {
+          if (--rep->count <= 0)
+            delete rep;
+
+          rep = a.rep;
+          rep->count++;
+
+          dimensions = a.dimensions;
+          slice_data = a.slice_data;
+          slice_len = a.slice_len;
+        }
+
+      return *this;
+    }
 
   void fill (const T& val); 
   void clear (void);
 
   octave_idx_type capacity (void) const { return slice_len; }
   octave_idx_type length (void) const { return capacity (); }
   octave_idx_type nelem (void) const { return capacity (); }
   octave_idx_type numel (void) const { return nelem (); }
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,14 @@
+2009-08-23  Jaroslav Hajek  <highegg@gmail.com>
+
+	* Array.h (Array::make_unique, Array::~Array, Array::operator =):
+	Move here to allow inlining.
+	* Array.cc: Remove from here.
+
 2009-08-20  Jaroslav Hajek  <highegg@gmail.com>
 
 	* mx-inlines.cc (logical_value): New overloaded template.
 	(DEFMXBOOL_OP): Use it in definitions.
 	(mx_inline_not): Also use logical_value.
 	* mx-op-defs.h (ND_LOGICAL_NAN_CHECK, SC_LOGICAL_NAN_CHECK): Remove
 	(also from all macros).
 
