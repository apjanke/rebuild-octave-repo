# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1492107916 14400
#      Thu Apr 13 14:25:16 2017 -0400
# Node ID d4ef04757ead7031ed3016fe391b1988a69a97c0
# Parent  5970860bc70c92bda686a8dd65214a3d4a8f412f
eliminate some compiler warnings

* oct-stream.cc (textscan::numeric_delim): Delete unused data member.
* pr-output.cc (set_format): Delete unused functions.
* xdiv.cc (result_ok): Delete unused function.
* oct-parse.in.yy: Tag token with octave:: as needed.
* pt-eval.cc: Tag tree_break_command with octave:: as needed.
* pt-loop.h (tree_while_command::compiled): Only define data member if
HAVE_LLVM is defined.
* Range.cc (tceil): Delete unused function.
* quit.cc (octave_throw_exit_exception, octave_rethrow_exception):
Avoid deprecated declaration warning.
* quit.h (octave_throw_exit_exception): Deprecate.

diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -1878,17 +1878,16 @@ namespace octave
 
     short eol1;
     short eol2;
     short return_on_error;
 
     bool collect_output;
     bool multiple_delims_as_one;
     bool default_exp;
-    bool numeric_delim;
 
     octave_idx_type lines;
 
     octave_value do_scan (std::istream& isp, textscan_format_list& fmt_list,
                           octave_idx_type ntimes);
 
     void parse_options (const octave_value_list& args,
                         textscan_format_list& fmt_list);
@@ -2545,18 +2544,17 @@ namespace octave
   textscan::textscan (const std::string& who_arg)
     : who (who_arg), buf (), whitespace_table (), delim_table (),
       delims (), comment_style (), comment_len (0), comment_char (-2),
       buffer_size (0), date_locale (), inf_nan (init_inf_nan ()),
       empty_value (octave::numeric_limits<double>::NaN ()), exp_chars ("edED"),
       header_lines (0), treat_as_empty (), treat_as_empty_len (0),
       whitespace (" \b\t"), eol1 ('\r'), eol2 ('\n'),
       return_on_error (1), collect_output (false),
-      multiple_delims_as_one (false), default_exp (true),
-      numeric_delim (false), lines (0)
+      multiple_delims_as_one (false), default_exp (true), lines (0)
   { }
 
   octave_value
   textscan::scan (std::istream& isp, const std::string& fmt,
                   octave_idx_type ntimes, const octave_value_list& options,
                   octave_idx_type& count)
   {
     textscan_format_list fmt_list (fmt);
diff --git a/libinterp/corefcn/pr-output.cc b/libinterp/corefcn/pr-output.cc
--- a/libinterp/corefcn/pr-output.cc
+++ b/libinterp/corefcn/pr-output.cc
@@ -827,24 +827,16 @@ set_format (const Matrix& m, int& fw, do
   int x_min = min_abs == 0.0 ? 0 : num_digits (min_abs);
 
   scale = (x_max == 0 || int_or_inf_or_nan)
           ? 1.0 : std::pow (10.0, calc_scale_exp (x_max - 1));
 
   set_real_matrix_format (x_max, x_min, inf_or_nan, int_or_inf_or_nan, fw);
 }
 
-static inline void
-set_format (const Matrix& m)
-{
-  int fw;
-  double scale;
-  set_format (m, fw, scale);
-}
-
 static void
 set_complex_format (int x_max, int x_min, int r_x, bool inf_or_nan,
                     int int_only, int& r_fw, int& i_fw)
 {
   static float_format r_fmt;
   static float_format i_fmt;
 
   int prec = Voutput_precision;
@@ -1247,24 +1239,16 @@ set_format (const ComplexMatrix& cm, int
 
   scale = (x_max == 0 || int_or_inf_or_nan)
           ? 1.0 : std::pow (10.0, calc_scale_exp (x_max - 1));
 
   set_complex_matrix_format (x_max, x_min, r_x_max, r_x_min, inf_or_nan,
                              int_or_inf_or_nan, r_fw, i_fw);
 }
 
-static inline void
-set_format (const ComplexMatrix& cm)
-{
-  int r_fw, i_fw;
-  double scale;
-  set_format (cm, r_fw, i_fw, scale);
-}
-
 static void
 set_range_format (int x_max, int x_min, int all_ints, int& fw)
 {
   static float_format fmt;
 
   int prec = Voutput_precision;
 
   int ld, rd;
@@ -1402,24 +1386,16 @@ set_format (const Range& r, int& fw, dou
   int x_min = min_abs == 0.0 ? 0 : num_digits (min_abs);
 
   scale = (x_max == 0 || all_ints)
           ? 1.0 : std::pow (10.0, calc_scale_exp (x_max - 1));
 
   set_range_format (x_max, x_min, all_ints, fw);
 }
 
-static inline void
-set_format (const Range& r)
-{
-  int fw;
-  double scale;
-  set_format (r, fw, scale);
-}
-
 union equiv
 {
   double d;
   unsigned char i[sizeof (double)];
 };
 
 #define PRINT_CHAR_BITS(os, c)                  \
   do                                            \
diff --git a/libinterp/corefcn/xdiv.cc b/libinterp/corefcn/xdiv.cc
--- a/libinterp/corefcn/xdiv.cc
+++ b/libinterp/corefcn/xdiv.cc
@@ -43,24 +43,16 @@ along with Octave; see the file COPYING.
 #include "CDiagMatrix.h"
 #include "fCDiagMatrix.h"
 #include "lo-array-errwarn.h"
 #include "quit.h"
 
 #include "error.h"
 #include "xdiv.h"
 
-static inline bool
-result_ok (octave_idx_type info)
-{
-  assert (info != -1);
-
-  return (info != -2);
-}
-
 static void
 solve_singularity_warning (double rcond)
 {
   octave::warn_singular_matrix (rcond);
 }
 
 template <typename T1, typename T2>
 bool
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -1556,22 +1556,22 @@ function2       : param_list opt_sep opt
                     $$ = parser.start_function (0, $2, $3);
                   }
                 ;
 
 function_end    : END
                   {
                     parser.endfunction_found = true;
 
-                    if (parser.end_token_ok ($1, token::function_end))
+                    if (parser.end_token_ok ($1, octave::token::function_end))
                       $$ = parser.make_end ("endfunction", false,
                                             $1->line (), $1->column ());
                     else
                       {
-                        parser.end_token_error ($1, token::function_end);
+                        parser.end_token_error ($1, octave::token::function_end);
                         YYABORT;
                       }
                   }
                 | END_OF_INPUT
                   {
 // A lot of tests are based on the assumption that this is OK
 //                  if (lexer.reading_script_file)
 //                    {
@@ -2192,75 +2192,75 @@ namespace octave
     yypstate_delete (static_cast<yypstate *> (parser_state));
     parser_state = yypstate_new ();
   }
 }
 
 // Error mesages for mismatched end tokens.
 
 static std::string
-end_token_as_string (token::end_tok_type ettype)
+end_token_as_string (octave::token::end_tok_type ettype)
 {
   std::string retval = "<unknown>";
 
   switch (ettype)
     {
-    case token::simple_end:
+    case octave::token::simple_end:
       retval = "end";
       break;
 
-    case token::classdef_end:
+    case octave::token::classdef_end:
       retval = "endclassdef";
       break;
 
-    case token::enumeration_end:
+    case octave::token::enumeration_end:
       retval = "endenumeration";
       break;
 
-    case token::events_end:
+    case octave::token::events_end:
       retval = "endevents";
       break;
 
-    case token::for_end:
+    case octave::token::for_end:
       retval = "endfor";
       break;
 
-    case token::function_end:
+    case octave::token::function_end:
       retval = "endfunction";
       break;
 
-    case token::if_end:
+    case octave::token::if_end:
       retval = "endif";
       break;
 
-    case token::methods_end:
+    case octave::token::methods_end:
       retval = "endmethods";
       break;
 
-    case token::parfor_end:
+    case octave::token::parfor_end:
       retval = "endparfor";
       break;
 
-    case token::properties_end:
+    case octave::token::properties_end:
       retval = "endproperties";
       break;
 
-    case token::switch_end:
+    case octave::token::switch_end:
       retval = "endswitch";
       break;
 
-    case token::try_catch_end:
+    case octave::token::try_catch_end:
       retval = "end_try_catch";
       break;
 
-    case token::unwind_protect_end:
+    case octave::token::unwind_protect_end:
       retval = "end_unwind_protect";
       break;
 
-    case token::while_end:
+    case octave::token::while_end:
       retval = "endwhile";
       break;
 
     default:
       panic_impossible ();
       break;
     }
 
diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -244,17 +244,17 @@ quit_loop_now (void)
 
   if (octave::tree_continue_command::continuing)
     octave::tree_continue_command::continuing--;
 
   bool quit = (octave::tree_return_command::returning
                || octave::tree_break_command::breaking
                || octave::tree_continue_command::continuing);
 
-  if (tree_break_command::breaking)
+  if (octave::tree_break_command::breaking)
     octave::tree_break_command::breaking--;
 
   return quit;
 }
 
 namespace octave
 {
   void
diff --git a/libinterp/parse-tree/pt-loop.h b/libinterp/parse-tree/pt-loop.h
--- a/libinterp/parse-tree/pt-loop.h
+++ b/libinterp/parse-tree/pt-loop.h
@@ -257,18 +257,20 @@ namespace octave
     tree_statement_list *list;
 
     // Comment preceding FOR token.
     octave_comment_list *lead_comm;
 
     // Comment preceding ENDFOR token.
     octave_comment_list *trail_comm;
 
+#if defined (HAVE_LLVM)
     // compiled version of the loop
     jit_info *compiled;
+#endif
   };
 
   class tree_complex_for_command : public tree_command
   {
   public:
 
     tree_complex_for_command (int l = -1, int c = -1)
       : tree_command (l, c), lhs (0), expr (0), list (0), lead_comm (0),
diff --git a/liboctave/array/Range.cc b/liboctave/array/Range.cc
--- a/liboctave/array/Range.cc
+++ b/liboctave/array/Range.cc
@@ -493,22 +493,16 @@ tfloor (double x, double ct)
   t1 = std::floor (x + t1);
 
   if (x <= 0.0 || (t1 - x) < rmax)
     return t1;
   else
     return t1 - 1.0;
 }
 
-static inline double
-tceil (double x, double ct)
-{
-  return -tfloor (-x, ct);
-}
-
 static inline bool
 teq (double u, double v,
      double ct = 3.0 * std::numeric_limits<double>::epsilon ())
 {
   double tu = fabs (u);
   double tv = fabs (v);
 
   return fabs (u - v) < ((tu > tv ? tu : tv) * ct);
diff --git a/liboctave/cruft/misc/quit.cc b/liboctave/cruft/misc/quit.cc
--- a/liboctave/cruft/misc/quit.cc
+++ b/liboctave/cruft/misc/quit.cc
@@ -84,17 +84,26 @@ octave_throw_bad_alloc (void)
   throw std::bad_alloc ();
 }
 
 void
 octave_throw_exit_exception (int exit_status, int safe_to_return)
 {
   octave_exception_state = octave_quit_exception;
 
+#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
+#endif
+
   throw octave_exit_exception (exit_status, safe_to_return);
+
+#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
+#pragma GCC diagnostic pop
+#endif
 }
 
 void
 octave_rethrow_exception (void)
 {
   if (octave_interrupt_state)
     {
       octave_interrupt_state = -1;
@@ -107,18 +116,27 @@ octave_rethrow_exception (void)
         case octave_exec_exception:
           octave_throw_execution_exception ();
           break;
 
         case octave_alloc_exception:
           octave_throw_bad_alloc ();
           break;
 
+#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
+#endif
+
         case octave_quit_exception:
           octave_throw_exit_exception (octave_exit_exception_status,
                                        octave_exit_exception_safe_to_return);
           break;
 
+#if defined (HAVE_PRAGMA_GCC_DIAGNOSTIC)
+#pragma GCC diagnostic pop
+#endif
+
         default:
           break;
         }
     }
 }
diff --git a/liboctave/cruft/misc/quit.h b/liboctave/cruft/misc/quit.h
--- a/liboctave/cruft/misc/quit.h
+++ b/liboctave/cruft/misc/quit.h
@@ -184,16 +184,17 @@ OCTAVE_API extern volatile sig_atomic_t 
 OCTAVE_API extern void octave_handle_signal (void);
 
 OCTAVE_NORETURN OCTAVE_API extern void octave_throw_interrupt_exception (void);
 
 OCTAVE_NORETURN OCTAVE_API extern void octave_throw_execution_exception (void);
 
 OCTAVE_NORETURN OCTAVE_API extern void octave_throw_bad_alloc (void);
 
+OCTAVE_DEPRECATED ("see the Octave documentation for other options")
 OCTAVE_NORETURN OCTAVE_API extern void
 octave_throw_exit_exception (int exit_status, int safe_to_return);
 
 OCTAVE_API extern void octave_rethrow_exception (void);
 
 #if defined (__cplusplus)
 
 OCTAVE_DEPRECATED ("see the Octave documentation for other options")
