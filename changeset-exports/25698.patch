# HG changeset patch
# User Rik <rik@octave.org>
# Date 1532541346 25200
#      Wed Jul 25 10:55:46 2018 -0700
# Node ID ac386820f2b678d0b21c194b40b343220edb5d27
# Parent  91f0416c2ba7ccb0f15f446ab81a08ee595acc2e
Return true when strncmp matches, but number of characters exceeds strlen (bug #54373)

* NEWS: Announce change in behavior.

* oct-string.cc (strncmp, strncmpi): Change templates to check length of
strings against neff (N effective) which is the smaller of the actual string
length or N itself.

* strfns.cc: Add new BIST tests, marked as regressions, for this behavior.
Change existing BIST tests to pass.

* publish.m (is_publish_markup): New nested function replacing an anonymous
function.  This version does not index past the length of the string when
checking if the N+1 character is a space.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -5,16 +5,24 @@ Summary of important user-visible change
     or "skew" to calculate the symmetric or skew-symmetric property
     of a matrix.  Performance has also been increased.
 
  ** The issorted function now uses a direction option of "ascend" or
     "descend" to make it compatible with both the sort function and
     with Matlab.  Change all uses of "ascending" and "descending" in
     existing code to the new options.
 
+ ** The strncmp and strncmpi functions now return true if the two input
+    strings match, even though the number of characters specified by N
+    exceeds the string length.  This behavior more closely matches
+    common sense and is Matlab compatible.  Example:
+
+      Octave 5.0 : strncmp ("abc", "abc", 100) => true
+      Previously : strncmp ("abc", "abc", 100) => false
+
  ** Figure graphic objects have a new property "Number" which is
     read-only and will return the handle (number) of the figure.
     However, if the property "IntegerHandle" has been set to "off" then
     the property will return an empty matrix ([]).
 
  ** Printing using the -dtiff output device will now create compressed
     images using lzw compression.  This change was made for Matlab
     compatibility.  To produce uncompressed images use the -dtiffn
diff --git a/libinterp/corefcn/strfns.cc b/libinterp/corefcn/strfns.cc
--- a/libinterp/corefcn/strfns.cc
+++ b/libinterp/corefcn/strfns.cc
@@ -653,21 +653,23 @@ This is just the opposite of the corresp
     error ("strncmp: N must be greater than 0");
 }
 
 /*
 %!assert (strncmp ("abce", "abc", 3), true)
 %!assert (strncmp ("abce", "aBc", 3), false)
 %!assert (strncmp (100, 100, 1), false)
 %!assert (strncmp ("abce", {"abcd", "bca", "abc"}, 3), logical ([1, 0, 1]))
-%!assert (strncmp ("abc",  {"abcd", "bca", "abc"}, 4), logical ([0, 0, 0]))
+%!assert (strncmp ("abc",  {"abcd", "bca", "abc"}, 4), logical ([0, 0, 1]))
 %!assert (strncmp ({"abcd", "bca", "abc"},"abce", 3), logical ([1, 0, 1]))
 %!assert (strncmp ({"abcd", "bca", "abc"},{"abcd", "bca", "abe"}, 3), logical ([1, 1, 0]))
 %!assert (strncmp ("abc", {"abcd", 10}, 2), logical ([1, 0]))
 
+%!assert <*54373> (strncmp ("abc", "abc", 100))
+
 %!error strncmp ()
 %!error strncmp ("abc", "def")
 */
 
 DEFUNX ("strcmpi", Fstrcmpi, args, ,
         doc: /* -*- texinfo -*-
 @deftypefn {} {} strcmpi (@var{s1}, @var{s2})
 Return 1 if the character strings @var{s1} and @var{s2} are the same,
@@ -728,16 +730,18 @@ This is just the opposite of the corresp
                                octave::string::strncmpi,
                                octave::string::strncmpi));
   else
     error ("strncmpi: N must be greater than 0");
 }
 
 /*
 %!assert (strncmpi ("abc123", "ABC456", 3), true)
+
+%!assert <*54373> (strncmpi ("abc", "abC", 100))
 */
 
 DEFUN (__native2unicode__, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {@var{utf8_str} =} __native2unicode__ (@var{native_bytes}, @var{codepage})
 Convert byte stream @var{native_bytes} to UTF-8 using @var{codepage}.
 
 @seealso{native2unicode, __unicode2native__}
diff --git a/liboctave/util/oct-string.cc b/liboctave/util/oct-string.cc
--- a/liboctave/util/oct-string.cc
+++ b/liboctave/util/oct-string.cc
@@ -141,46 +141,66 @@ octave::string::strcmpi (const T& str_a,
 }
 
 
 template<typename T>
 bool
 octave::string::strncmp (const T& str_a, const T& str_b,
                          const typename T::size_type n)
 {
-  return (numel (str_a) >= n && numel (str_b) >= n
-          && str_data_cmp<T> (str_a.data (), str_b.data (), n));
+  typename T::size_type neff;
+  auto len_a = numel (str_a);
+  auto len_b = numel (str_b);
+  neff = std::min (std::max (len_a, len_b), n); 
+
+  return (len_a >= neff && len_b >= neff
+          && str_data_cmp<T> (str_a.data (), str_b.data (), neff));
 }
 
 template<typename T>
 bool
 octave::string::strncmp (const T& str_a, const typename T::value_type *str_b,
                          const typename T::size_type n)
 {
-  return (numel (str_a) >= n && strlen<T> (str_b) >= n
-          && str_data_cmp<T> (str_a.data (), str_b, n));
+  typename T::size_type neff;
+  auto len_a = numel (str_a);
+  auto len_b = strlen<T> (str_b);
+  neff = std::min (std::max (len_a, len_b), n); 
+
+  return (len_a >= neff && len_b >= neff
+          && str_data_cmp<T> (str_a.data (), str_b, neff));
 }
 
 
 template<typename T>
 bool
 octave::string::strncmpi (const T& str_a, const T& str_b,
                           const typename T::size_type n)
 {
-  return (numel (str_a) >= n && numel (str_b) >= n
-          && str_data_cmpi<T> (str_a.data (), str_b.data (), n));
+  typename T::size_type neff;
+  auto len_a = numel (str_a);
+  auto len_b = numel (str_b);
+  neff = std::min (std::max (len_a, len_b), n); 
+
+  return (len_a >= neff && len_b >= neff
+          && str_data_cmpi<T> (str_a.data (), str_b.data (), neff));
 }
 
 template<typename T>
 bool
 octave::string::strncmpi (const T& str_a, const typename T::value_type *str_b,
                           const typename T::size_type n)
 {
-  return (numel (str_a) >= n && strlen<T> (str_b) >= n
-          && str_data_cmpi<T> (str_a.data (), str_b, n));
+  typename T::size_type neff;
+  auto len_a = numel (str_a);
+  auto len_b = strlen<T> (str_b);
+  neff = std::min (std::max (len_a, len_b), n); 
+
+  return (len_a >= neff && len_b >= neff
+          && str_data_cmpi<T> (str_a.data (), str_b, neff));
 }
 
 
 // Instantiations we need
 #define INSTANTIATE_OCTAVE_STRING(T)                                          \
   template bool octave::string::strcmp<T> (const T&, const T&);               \
   template bool octave::string::strcmp<T> (const T&,                          \
                                            const typename T::value_type*);    \
diff --git a/scripts/miscellaneous/publish.m b/scripts/miscellaneous/publish.m
--- a/scripts/miscellaneous/publish.m
+++ b/scripts/miscellaneous/publish.m
@@ -420,19 +420,33 @@ function doc = parse_m_source (doc)
   if (isempty (doc.m_source))
     return;  # Nothing to parse
   endif
 
   ## Parsing helper functions
   ##
   ## Checks line to have N "%" or "#" lines
   ## followed either by a space or end of string
-  is_publish_markup = @(cstr, N) ...
-    any (strncmp (char (cstr), {"%%%", "##"}, N)) ...
-    && ((length (char (cstr)) == N) || ((char (cstr))(N + 1) == " "));
+  function r = is_publish_markup (cstr, N)
+    str = char (cstr);
+
+    r = any (strncmp (str, {"%%%", "##"}, N));
+    if (r)
+      len = length (str);
+      if (len == N)
+        r = true;
+      elseif (len > N && str(N+1) == " ")
+        r = true;
+      else
+        r = false;
+      endif
+    endif
+
+    return;
+  endfunction
   ## Checks line of cellstring to be a paragraph line
   is_paragraph = @(cstr) is_publish_markup (cstr, 1);
   ## Checks line of cellstring to be a section headline
   is_head = @(cstr) is_publish_markup (cstr, 2);
   ## Checks line of cellstring to be a headline without section break, using
   ## the cell mode in Matlab (for compatibility), just treated as a new head.
   is_no_break_head = @(cstr) is_publish_markup (cstr, 3);
 
