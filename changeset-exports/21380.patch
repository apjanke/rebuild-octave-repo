# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1456813502 18000
#      Tue Mar 01 01:25:02 2016 -0500
# Node ID 46094355423375f9000a7f32e2daf967c5ae93dc
# Parent  93c489ca8a6be5f67b280a4a9adab3c47b180e0f
* ov-java.cc: Call error instead of throwing std::string objects.

diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -495,20 +495,20 @@ initial_class_path (void)
                       // File found.  Add its contents to the static classpath.
                       std::string classpath = read_classpath_txt (cp_file);
                       retval.append (classpath);
                     }
                 }
             }
         }
       else
-        throw std::string ("octave.jar does not exist: ") + jar_file;
+        error ("octave.jar does not exist: %s", jar_file.c_str ());
     }
   else
-    throw std::string ("initial java dir is empty");
+    error ("initial java dir is empty");
 
   return retval;
 }
 
 #ifndef _FPU_DEFAULT
 #  if defined __i386__ || defined __x86_64__
 #    define _FPU_DEFAULT 0x037f
 #  else
@@ -544,44 +544,46 @@ initialize_jvm (void)
 
   if (hMod)
     {
       // JVM seems to be already loaded, better to use that DLL instead
       // of looking in the registry, to avoid opening a different JVM.
       jvm_lib_path = get_module_filename (hMod);
 
       if (jvm_lib_path.empty ())
-        throw std::string ("unable to find Java Runtime Environment");
+        error ("unable to find Java Runtime Environment");
     }
   else
     {
       // In windows, find the location of the JRE from the registry
       // and load the symbol from the dll.
       std::string key, value;
 
       key = "software\\javasoft\\java runtime environment";
 
       value = octave_env::getenv ("JAVA_VERSION");
       if (value.empty ())
         {
           value = "Currentversion";
           std::string regval = read_registry_string (key,value);
 
           if (regval.empty ())
-            throw std::string ("unable to find Java Runtime Environment: ")
-                  + key + "::" + value;
+            error ("unable to find Java Runtime Environment: %s::%s",
+                   key.c_str (), value.c_str ());
+
           value = regval;
         }
 
       key = key + "\\" + value;
       value = "RuntimeLib";
       jvm_lib_path = read_registry_string (key, value);
+
       if (jvm_lib_path.empty ())
-        throw std::string ("unable to find Java Runtime Environment: ")
-              + key + "::" + value;
+        error ("unable to find Java Runtime Environment: %s::%s",
+               key.c_str (), value.c_str ());
 
       std::string jvm_bin_path;
 
       value = "JavaHome";
       jvm_bin_path = read_registry_string (key, value);
       if (! jvm_bin_path.empty ())
         {
           jvm_bin_path = (jvm_bin_path + std::string ("\\bin"));
@@ -606,39 +608,38 @@ initialize_jvm (void)
 
   jsize nVMs = 0;
 
 #if ! defined (__APPLE__) && ! defined (__MACH__)
 
   octave_shlib lib (jvm_lib_path);
 
   if (! lib)
-    throw std::string ("unable to load Java Runtime Environment from ")
-          + jvm_lib_path;
+    error ("unable to load Java Runtime Environment from %s",
+           jvm_lib_path.c_str ());
 
 #if defined (__WIN32__)
 
   set_dll_directory ();
 
   if (! old_cwd.empty ())
     octave_env::chdir (old_cwd);
 
 #endif
 
   JNI_CreateJavaVM_t create_vm =
     reinterpret_cast<JNI_CreateJavaVM_t> (lib.search ("JNI_CreateJavaVM"));
   JNI_GetCreatedJavaVMs_t get_vm =
     reinterpret_cast<JNI_GetCreatedJavaVMs_t> (lib.search ("JNI_GetCreatedJavaVMs"));
 
   if (! create_vm)
-    throw std::string ("unable to find JNI_CreateJavaVM in ") + jvm_lib_path;
+    error ("unable to find JNI_CreateJavaVM in %s", jvm_lib_path.c_str ());
 
   if (! get_vm)
-    throw std::string ("unable to find JNI_GetCreatedJavaVMs in ")
-          + jvm_lib_path;
+    error ("unable to find JNI_GetCreatedJavaVMs in %s", jvm_lib_path.c_str ());
 
   if (get_vm (&jvm, 1, &nVMs) == 0 && nVMs > 0)
 
 #else
 
   // FIXME: There exists a problem on the Mac platform that
   //   octave_shlib lib (jvm_lib_path)
   // doesn't work with 'not-bundled' *.oct files.
@@ -656,21 +657,21 @@ initialize_jvm (void)
         case JNI_EDETACHED:
           // Attach the current thread
           JavaVMAttachArgs vm_args;
           vm_args.version = JNI_VERSION_1_2;
           vm_args.name = const_cast<char *> ("octave");
           vm_args.group = 0;
           if (jvm->AttachCurrentThread (reinterpret_cast<void **> (&current_env),
                                         &vm_args) < 0)
-            throw std::string ("JVM internal error, unable to attach octave to existing JVM");
+            error ("JVM internal error, unable to attach octave to existing JVM");
           break;
 
         case JNI_EVERSION:
-          throw std::string ("JVM internal error, the required JNI version is not supported");
+          error ("JVM internal error, the required JNI version is not supported");
           break;
 
         case JNI_OK:
           // Don't do anything, the current thread is already attached to JVM
           break;
         }
 
       jvm_attached = true;
@@ -686,27 +687,26 @@ initialize_jvm (void)
       vm_args.add ("-Xrs");
       vm_args.add ("-Djava.system.class.loader=org.octave.OctClassLoader");
       vm_args.read_java_opts (initial_java_dir () + file_ops::dir_sep_str () +
                               "java.opts");
 
 #if ! defined (__APPLE__) && ! defined (__MACH__)
 
       if (create_vm (&jvm, &current_env, vm_args.to_args ()) != JNI_OK)
-        throw std::string ("unable to start Java VM in ")+jvm_lib_path;
-      //printf ("JVM created\n");
+        error ("unable to start Java VM in %s", jvm_lib_path.c_str ());
     }
 
   jvm_lib = lib;
 
 #else
 
       if (JNI_CreateJavaVM (&jvm, reinterpret_cast<void **> (&current_env),
                             vm_args.to_args ()) != JNI_OK)
-        throw std::string ("unable to start Java VM in ")+jvm_lib_path;
+        error ("unable to start Java VM in %s", jvm_lib_path.c_str ());
 
     }
 
 #endif
 
   setlocale (LC_ALL, locale.c_str ());
 }
 
