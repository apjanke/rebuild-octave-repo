# HG changeset patch
# User Rik <rik@octave.org>
# Date 1500831220 25200
#      Sun Jul 23 10:33:40 2017 -0700
# Node ID f864950f837c942b164b55adcc0895e558f76279
# Parent  9c573708d2b500f72f6e813fefeab2b8846dd77f
Use endianness detection that doesn't produce compiler warning.

* ls-mat5.cc (read_mat5_binary_element): Use endianness detection scheme based
on memcpy which is appropriate for C++ and does not generate compiler
warnings.  Add note to replace this when C++20 is available.

diff --git a/libinterp/corefcn/ls-mat5.cc b/libinterp/corefcn/ls-mat5.cc
--- a/libinterp/corefcn/ls-mat5.cc
+++ b/libinterp/corefcn/ls-mat5.cc
@@ -484,21 +484,25 @@ read_mat5_binary_element (std::istream& 
   // are first used to avoid errors from gcc about goto crossing
   // initialization of variable.
 
   bool imag;
   bool isclass = false;
   bool logicalvar;
   dim_vector dims;
   enum arrayclasstype arrayclass;
-  alignas (2) const uint8_t raw_number[2] {0x00, 0x01}; 
-  int16_t number = *(reinterpret_cast<const int16_t *> (&raw_number[0]));
   octave_idx_type nzmax;
   std::string classname;
 
+  // FIXME: Endianness determination in C++ is not easy.
+  // Until C++20 which introduces std::endian, use this hack.
+  int16_t number;
+  uint8_t raw_number[2] {0x00, 0x01}; 
+  std::memcpy (&number, raw_number, 2);
+
   // MAT files always use IEEE floating point
   octave::mach_info::float_format flt_fmt = octave::mach_info::flt_fmt_unknown;
   if ((number == 1) ^ swap)
     flt_fmt = octave::mach_info::flt_fmt_ieee_big_endian;
   else
     flt_fmt = octave::mach_info::flt_fmt_ieee_little_endian;
 
   // element type, length and small data element flag
