# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1225280470 -3600
#      Wed Oct 29 12:41:10 2008 +0100
# Node ID 4ceffd54031a05309a5430e728134eec0ff17b6a
# Parent  54c25dc5b17dd2ec689d917571016f421c6e3176
fix docs for cholinsert, choldelete, cholshift

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2008-10-29  Jaroslav Hajek  <highegg@gmail.com>
+
+	* DLD-FUNCTIONS/qr.cc (Fcholinsert, Fcholdelete, Fcholshift): Fix
+	inline docs.
+
 2008-10-28  John W. Eaton  <jwe@octave.org>
 
 	* parse.y (finish_function): Clear local variables in function scope.
 	* symtab.h (symbol_table::clear_variables): New argument, scope.
 
 2008-10-28  Brian Gough  <bjg@gnu.org>
 
 	* DLD-FUNCTIONS/besselj.cc: Added tests.
diff --git a/src/DLD-FUNCTIONS/chol.cc b/src/DLD-FUNCTIONS/chol.cc
--- a/src/DLD-FUNCTIONS/chol.cc
+++ b/src/DLD-FUNCTIONS/chol.cc
@@ -794,17 +794,17 @@ If @var{info} is not present, an error m
 %! assert(norm(R1 - R,Inf) < 2e1*eps('single'))
 */
 
 DEFUN_DLD (cholinsert, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {[@var{R1}, @var{info}] =} cholinsert (@var{R}, @var{j}, @var{u})\n\
 Given a Cholesky@tie{}factorization of a real symmetric or complex hermitian\n\
 positive definite matrix @w{@var{A} = @var{R}'*@var{R}}, @var{R}@tie{}upper triangular,\n\
-return the QR@tie{}factorization of\n\
+return the Cholesky@tie{}factorization of\n\
 @var{A1}, where @w{A1(p,p) = A}, @w{A1(:,j) = A1(j,:)' = u} and\n\
 @w{p = [1:j-1,j+1:n+1]}. @w{u(j)} should be positive.\n\
 On return, @var{info} is set to\n\
 @itemize\n\
 @item 0 if the insertion was successful,\n\
 @item 1 if @var{A1} is not positive definite,\n\
 @item 2 if @var{R} is singular.\n\
 @end itemize\n\
@@ -988,17 +988,17 @@ If @var{info} is not present, an error m
 %! 
 */
 
 DEFUN_DLD (choldelete, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{R1} =} choldelete (@var{R}, @var{j})\n\
 Given a Cholesky@tie{}factorization of a real symmetric or complex hermitian\n\
 positive definite matrix @w{@var{A} = @var{R}'*@var{R}}, @var{R}@tie{}upper triangular,\n\
-return the QR@tie{}factorization of @w{A(p,p)}, where @w{p = [1:j-1,j+1:n+1]}.\n\
+return the Cholesky@tie{}factorization of @w{A(p,p)}, where @w{p = [1:j-1,j+1:n+1]}.\n\
 @seealso{chol, cholupdate, cholinsert}\n\
 @end deftypefn")
 {
   octave_idx_type nargin = args.length ();
 
   octave_value_list retval;
 
   if (nargin != 2)
@@ -1120,17 +1120,17 @@ return the QR@tie{}factorization of @w{A
 %! assert(norm(R1'*R1 - single(Ac(p,p)),Inf) < 1e1*eps('single'))
 */
 
 DEFUN_DLD (cholshift, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{R1} =} cholshift (@var{R}, @var{i}, @var{j})\n\
 Given a Cholesky@tie{}factorization of a real symmetric or complex hermitian\n\
 positive definite matrix @w{@var{A} = @var{R}'*@var{R}}, @var{R}@tie{}upper triangular,\n\
-return the QR@tie{}factorization of\n\
+return the Cholesky@tie{}factorization of\n\
 @w{@var{A}(p,p)}, where @w{p} is the permutation @*\n\
 @code{p = [1:i-1, shift(i:j, 1), j+1:n]} if @w{@var{i} < @var{j}} @*\n\
  or @*\n\
 @code{p = [1:j-1, shift(j:i,-1), i+1:n]} if @w{@var{j} < @var{i}}. @*\n\
 \n\
 @seealso{chol, cholinsert, choldelete}\n\
 @end deftypefn")
 {
