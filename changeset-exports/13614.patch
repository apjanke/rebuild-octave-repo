# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1313587211 -7200
#      Wed Aug 17 15:20:11 2011 +0200
# Node ID 5cb93c6d8aab0fb6864d118f63a62a87bcfd2ddb
# Parent  8728061cd0ec016bd991002efebf2ee06b2f52bb
Important subwindows are not closable now. A close button is still displayed, which seems to be q Qt bug.

diff --git a/gui/src/IRCWidget.cpp b/gui/src/IRCWidget.cpp
--- a/gui/src/IRCWidget.cpp
+++ b/gui/src/IRCWidget.cpp
@@ -355,16 +355,26 @@ IRCWidget::sendMessage (QString message)
       message.replace (">", "&gt;");
       message.replace ("\n", "<br>");
       m_chatWindow->append (QString ("<b>%1:</b> %2").
                             arg (m_ircClientInterface->nickname ()).arg (message));
     }
 }
 
 void
+IRCWidget::maybeIdentifyOnNickServ ()
+{
+  if (m_autoIdentification)
+    {
+      m_ircClientInterface->sendPrivateMessage("NickServ", QString ("identify %1").
+                                          arg (m_nickServPassword));
+    }
+}
+
+void
 IRCWidget::focusInEvent (QFocusEvent *focusEvent)
 {
   Q_UNUSED (focusEvent);
   emit unreadMessages (false);
   QWidget::focusInEvent (focusEvent);
 
   m_chatMessageTextEdit->setFocus ();
 }
@@ -375,23 +385,16 @@ IRCWidget::handleLoggedIn (const QString
   m_chatWindow->
     append (QString
             ("<i><font color=\"#00AA00\"><b>Successfully logged in as %1.</b></font></i>").
             arg (nick));
   m_nickButton->setEnabled (true);
   m_chatMessageTextEdit->setEnabled (true);
   m_chatWindow->setEnabled (true);
   m_chatMessageTextEdit->setFocus ();
-
-
-  if (m_autoIdentification)
-    {
-      m_ircClientInterface->sendPrivateMessage("NickServ", QString ("identify %1").
-                                          arg (m_nickServPassword));
-    }
 }
 
 void
 IRCWidget::handleNickChange (const QString &oldNick, const QString &newNick)
 {
   m_chatWindow->append (QString ("%1 is now known as %2.").arg (oldNick).arg (newNick));
 }
 
@@ -408,9 +411,10 @@ IRCWidget::handleUserQuit (const QString
 }
 
 void
 IRCWidget::handleUserNicknameChanged (const QString &nick)
 {
   m_nickButton->setText (nick);
   QSettings *settings = ResourceManager::instance ()->settings ();
   settings->setValue ("IRCNick", nick);
+  maybeIdentifyOnNickServ ();
 }
diff --git a/gui/src/IRCWidget.h b/gui/src/IRCWidget.h
--- a/gui/src/IRCWidget.h
+++ b/gui/src/IRCWidget.h
@@ -72,16 +72,18 @@ public slots:
   void handleNickChange (const QString& oldNick, const QString& newNick);
   void handleUserJoined (const QString& nick, const QString& channel);
   void handleUserQuit (const QString& nick, const QString& reason);
   void handleUserNicknameChanged (const QString& nick);
 
   void showChangeUserNickPopup ();
   void sendMessage (QString);
 
+  void maybeIdentifyOnNickServ ();
+
 signals:
   void unreadMessages (bool yes);
 
 protected:
   void focusInEvent (QFocusEvent *focusEvent);
 
 private:
   IRCClientInterface *m_ircClientInterface;
diff --git a/gui/src/MainWindow.cpp b/gui/src/MainWindow.cpp
--- a/gui/src/MainWindow.cpp
+++ b/gui/src/MainWindow.cpp
@@ -282,45 +282,44 @@ MainWindow::construct ()
   // Setup essential MDI Windows.
   m_octaveTerminal = new OctaveTerminal (this);
   m_documentationWidget = new BrowserWidget (this);
   m_ircWidget = new IRCWidget (this);
 
   m_octaveTerminal->openTerminal ();
 
   // Octave Terminal subwindow.
-  m_octaveTerminalSubWindow =
-    m_centralMdiArea->addSubWindow (m_octaveTerminal,
-                                    Qt::WindowTitleHint | Qt::
-				    WindowMinMaxButtonsHint);
+  m_octaveTerminalSubWindow = new NonClosableMdiSubWindow (this);
+  m_octaveTerminalSubWindow->setWidget (m_octaveTerminal);
+  m_centralMdiArea->addSubWindow (m_octaveTerminalSubWindow, Qt::WindowTitleHint | Qt::WindowMinMaxButtonsHint);
+
   m_octaveTerminalSubWindow->setObjectName ("OctaveTerminalSubWindow");
   m_octaveTerminalSubWindow->setWindowTitle (tr ("Terminal"));
   m_octaveTerminalSubWindow
       ->setWindowIcon (ResourceManager::instance ()->icon (ResourceManager::Terminal));
   m_octaveTerminalSubWindow->setFocusProxy (m_octaveTerminal);
   m_octaveTerminalSubWindow->setStatusTip (tr ("Enter your commands into the Octave terminal."));
 
   // Documentation subwindow.
-  m_documentationWidgetSubWindow =
-    m_centralMdiArea->addSubWindow (m_documentationWidget,
-                                    Qt::WindowTitleHint | Qt::
-                                    WindowMinMaxButtonsHint);
+  m_documentationWidgetSubWindow = new NonClosableMdiSubWindow (this);
+  m_documentationWidgetSubWindow->setWidget (m_documentationWidget);
+  m_centralMdiArea->addSubWindow (m_documentationWidgetSubWindow, Qt::WindowTitleHint | Qt::WindowMinMaxButtonsHint);
+
   m_documentationWidgetSubWindow->setObjectName ("DocumentationWidgetSubWindow");
   m_documentationWidgetSubWindow->setWindowTitle (tr ("Documentation"));
   m_documentationWidgetSubWindow
       ->setWindowIcon (ResourceManager::instance ()->icon (ResourceManager::Documentation));
   m_documentationWidgetSubWindow->setFocusProxy (m_documentationWidget);
   m_documentationWidgetSubWindow->setStatusTip (tr ("Browse the Octave documentation for help."));
 
   // Chat subwindow.
-  m_ircWidgetSubWindow = m_centralMdiArea->addSubWindow (m_ircWidget,
-                                                         Qt::
-                                                         WindowTitleHint |
-                                                         Qt::
-                                                         WindowMinMaxButtonsHint);
+  m_ircWidgetSubWindow = new NonClosableMdiSubWindow (this);
+  m_ircWidgetSubWindow->setWidget (m_ircWidget);
+  m_centralMdiArea->addSubWindow (m_ircWidgetSubWindow, Qt::WindowTitleHint | Qt::WindowMinMaxButtonsHint);
+
   m_ircWidgetSubWindow->setObjectName ("ChatWidgetSubWindow");
   m_ircWidgetSubWindow->setWindowTitle (tr ("Chat"));
   m_ircWidgetSubWindow
       ->setWindowIcon (ResourceManager::instance ()->icon (ResourceManager::Chat));
   m_ircWidgetSubWindow->setStatusTip(tr ("Instantly chat with other Octave users for help."));
   m_ircWidgetSubWindow->setFocusProxy (m_ircWidget);
   connect (m_ircWidget, SIGNAL (unreadMessages (bool)), this, SLOT (handleUnreadMessages (bool)));
 
diff --git a/gui/src/MainWindow.h b/gui/src/MainWindow.h
--- a/gui/src/MainWindow.h
+++ b/gui/src/MainWindow.h
@@ -32,16 +32,30 @@
 #include "OctaveLink.h"
 #include "VariablesDockWidget.h"
 #include "HistoryDockWidget.h"
 #include "FilesDockWidget.h"
 #include "BrowserWidget.h"
 #include "IRCWidget.h"
 #include "lexer/lexeroctavegui.h"
 
+class NonClosableMdiSubWindow : public QMdiSubWindow
+{
+  Q_OBJECT
+public:
+  explicit NonClosableMdiSubWindow (QWidget *parent = 0)
+    : QMdiSubWindow (parent) { }
+  virtual ~NonClosableMdiSubWindow () { }
+protected:
+  void closeEvent (QCloseEvent *closeEvent)
+  {
+    closeEvent->ignore ();
+  }
+};
+
 /**
   * \class MainWindow
   *
   * Represents the main window.
   */
 class MainWindow:public QMainWindow
 {
 Q_OBJECT public:
@@ -96,19 +110,19 @@ private:
   void establishOctaveLink ();
   QMdiArea *m_centralMdiArea;
 
   // Mdi sub windows.
   OctaveTerminal *m_octaveTerminal;
   BrowserWidget *m_documentationWidget;
   IRCWidget *m_ircWidget;
 
-  QMdiSubWindow *m_octaveTerminalSubWindow;
-  QMdiSubWindow *m_documentationWidgetSubWindow;
-  QMdiSubWindow *m_ircWidgetSubWindow;
+  NonClosableMdiSubWindow *m_octaveTerminalSubWindow;
+  NonClosableMdiSubWindow *m_documentationWidgetSubWindow;
+  NonClosableMdiSubWindow *m_ircWidgetSubWindow;
 
   // Dock widgets.
   VariablesDockWidget *m_variablesDockWidget;
   HistoryDockWidget *m_historyDockWidget;
   FilesDockWidget *m_filesDockWidget;
 
   // Editor's lexer
   LexerOctaveGui *m_lexer;
