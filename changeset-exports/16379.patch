# HG changeset patch
# User Torsten <ttl@justmail.de>
# Date 1364410346 -3600
#      Wed Mar 27 19:52:26 2013 +0100
# Node ID 4bb1b82076e52116c3af2e313f11f002dedf1f00
# Parent  b28ae106e316a3feb10481ed1657788de22814ab
gui: provide defaults for all values read from the settings file

* files-dockwidget.cc(notice_settings): provide default values for settings
* file-editor-tab.cc(update_lexer,notice_settings): default font is Courier New
  instead of Courier
* main-window.cc(notice_settings): provide defaults for terminal font and cursor
* main-window.cc(construct): new default window geometry and widget placement
* resource-manager.cc(do_update_network_settings): default for port setting
* settings-dialog.cc(constructor): provide default values for settings

diff --git a/libgui/src/files-dockwidget.cc b/libgui/src/files-dockwidget.cc
--- a/libgui/src/files-dockwidget.cc
+++ b/libgui/src/files-dockwidget.cc
@@ -186,16 +186,18 @@ files_dock_widget::display_directory (co
 
 void
 files_dock_widget::notice_settings ()
 {
   QSettings *settings = resource_manager::get_settings ();
 
   // FIXME -- what should happen if settings is 0?
 
-  _file_tree_view->setColumnHidden (0, !settings->value ("showFilenames").toBool ());
-  _file_tree_view->setColumnHidden (1, !settings->value ("showFileSize").toBool ());
-  _file_tree_view->setColumnHidden (2, !settings->value ("showFileType").toBool ());
-  _file_tree_view->setColumnHidden (3, !settings->value ("showLastModified").toBool ());
-  _file_tree_view->setAlternatingRowColors (settings->value ("useAlternatingRowColors").toBool ());
-  //if (settings.value ("showHiddenFiles").toBool ())
-  // TODO: React on option for hidden files.
+  _file_tree_view->setColumnHidden (0, !settings->value ("showFilenames",true).toBool ());
+  _file_tree_view->setColumnHidden (1, !settings->value ("showFileSize",false).toBool ());
+  _file_tree_view->setColumnHidden (2, !settings->value ("showFileType",false).toBool ());
+  _file_tree_view->setColumnHidden (3, !settings->value ("showLastModified",false).toBool ());
+  _file_tree_view->setAlternatingRowColors (settings->value ("useAlternatingRowColors",true).toBool ());
+  if (settings->value ("showHiddenFiles",false).toBool ())
+    {
+      // TODO: React on option for hidden files.
+    }
 }
diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -242,17 +242,17 @@ file_editor_tab::update_lexer ()
     }
 
   QSettings *settings = resource_manager::get_settings ();
 
   // Editor font (default or from settings)
   if (settings)
     lexer->setDefaultFont (QFont (
                                   settings->value ("editor/fontName",
-                                                   "Courier").toString (),
+                                                   "Courier New").toString (),
                                   settings->value ("editor/fontSize",
                                                    10).toInt ()));
 
   // TODO: Autoindent not working as it should
   lexer->setAutoIndentStyle (QsciScintilla::AiMaintain ||
                              QsciScintilla::AiOpening  ||
                              QsciScintilla::AiClosing);
 
@@ -1038,17 +1038,17 @@ file_editor_tab::notice_settings ()
 
   _edit_area->setCaretLineVisible(settings->value ("editor/highlightCurrentLine",true).toBool ());
 
   if (settings->value ("editor/codeCompletion",true).toBool ())
     _edit_area->setAutoCompletionThreshold (1);
   else
     _edit_area->setAutoCompletionThreshold (-1);
 
-  QFont xfont (settings->value ("editor/fontName","Courier").toString (),
+  QFont xfont (settings->value ("editor/fontName","Courier New").toString (),
                settings->value ("editor/fontSize",10).toInt ());
 
   if (settings->value ("editor/showLineNumbers",true).toBool ())
     {
       _edit_area->setMarginLineNumbers (2, true);
       _edit_area->setMarginsFont (xfont);
       QFontMetrics metrics (xfont);
       _edit_area->setMarginWidth(2, metrics.width("9999"));
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -210,22 +210,22 @@ void
 main_window::notice_settings ()
 {
   QSettings *settings = resource_manager::get_settings ();
 
   // FIXME -- what should happen if settings is 0?
 
   // Set terminal font:
   QFont term_font = QFont();
-  term_font.setFamily(settings->value("terminal/fontName").toString());
-  term_font.setPointSize(settings->value("terminal/fontSize").toInt ());
+  term_font.setFamily(settings->value("terminal/fontName","Courier New").toString());
+  term_font.setPointSize(settings->value("terminal/fontSize",10).toInt ());
   _terminal->setTerminalFont (term_font);
 
-  QString cursorType = settings->value ("terminal/cursorType").toString ();
-  bool cursorBlinking = settings->value ("terminal/cursorBlinking").toBool ();
+  QString cursorType = settings->value ("terminal/cursorType","ibeam").toString ();
+  bool cursorBlinking = settings->value ("terminal/cursorBlinking",true).toBool ();
   if (cursorType == "ibeam")
     _terminal->setCursorType(QTerminalInterface::IBeamCursor, cursorBlinking);
   else if (cursorType == "block")
     _terminal->setCursorType(QTerminalInterface::BlockCursor, cursorBlinking);
   else if (cursorType == "underline")
     _terminal->setCursorType(QTerminalInterface::UnderlineCursor,
                              cursorBlinking);
 
@@ -1121,24 +1121,35 @@ main_window::construct ()
   connect (_debug_quit,                 SIGNAL (triggered ()),
            this,                        SLOT (debug_quit ()));
 
   connect (clear_command_history,       SIGNAL (triggered ()),
            this,                        SLOT (handle_clear_history_request ()));
 
   setWindowTitle ("Octave");
   setDockOptions(QMainWindow::AnimatedDocks | QMainWindow::AllowNestedDocks | QMainWindow::AllowTabbedDocks);
+  addDockWidget (Qt::RightDockWidgetArea, _terminal_dock_widget);
+  addDockWidget (Qt::RightDockWidgetArea, _documentation_dock_widget);
+  tabifyDockWidget(_terminal_dock_widget,_documentation_dock_widget);
+#ifdef HAVE_QSCINTILLA
+  addDockWidget (Qt::RightDockWidgetArea, _file_editor);
+  tabifyDockWidget(_terminal_dock_widget,_file_editor);
+#endif
+  addDockWidget (Qt::LeftDockWidgetArea, _files_dock_widget);
   addDockWidget (Qt::LeftDockWidgetArea, _workspace_view);
   addDockWidget (Qt::LeftDockWidgetArea, _history_dock_widget);
-  addDockWidget (Qt::RightDockWidgetArea, _files_dock_widget);
-#ifdef HAVE_QSCINTILLA
-  addDockWidget (Qt::RightDockWidgetArea, _file_editor);
-#endif
-  addDockWidget (Qt::BottomDockWidgetArea, _terminal_dock_widget);
-  addDockWidget (Qt::RightDockWidgetArea, _documentation_dock_widget);
+
+  int win_x = QApplication::desktop()->width();
+  int win_y = QApplication::desktop()->height();
+  if (win_x > 960)
+    win_x = 960;
+  if (win_y > 720)
+    win_y = 720;
+  setGeometry (0,0,win_x,win_y);
+
   setStatusBar (_status_bar);
 
   _octave_qt_event_listener = new octave_qt_event_listener ();
   octave_link::register_event_listener (_octave_qt_event_listener);
 
   connect (_octave_qt_event_listener,
            SIGNAL (current_directory_has_changed_signal (QString)),
            this,
diff --git a/libgui/src/resource-manager.cc b/libgui/src/resource-manager.cc
--- a/libgui/src/resource-manager.cc
+++ b/libgui/src/resource-manager.cc
@@ -160,31 +160,31 @@ resource_manager::do_is_first_run (void)
   return first_run;
 }
 
 void
 resource_manager::do_update_network_settings (void)
 {
   QNetworkProxy::ProxyType proxyType = QNetworkProxy::NoProxy;
 
-  if (settings->value ("useProxyServer").toBool ())
+  if (settings->value ("useProxyServer",false).toBool ())
     {
       QString proxyTypeString = settings->value ("proxyType").toString ();
 
       if (proxyTypeString == "Socks5Proxy")
         proxyType = QNetworkProxy::Socks5Proxy;
       else if (proxyTypeString == "HttpProxy")
         proxyType = QNetworkProxy::HttpProxy;
     }
 
   QNetworkProxy proxy;
 
   proxy.setType (proxyType);
   proxy.setHostName (settings->value ("proxyHostName").toString ());
-  proxy.setPort (settings->value ("proxyPort").toInt ());
+  proxy.setPort (settings->value ("proxyPort",80).toInt ());
   proxy.setUser (settings->value ("proxyUserName").toString ());
   proxy.setPassword (settings->value ("proxyPassword").toString ());
 
   QNetworkProxy::setApplicationProxy (proxy);
 }
 
 const char*
 resource_manager::octave_keywords (void)
diff --git a/libgui/src/settings-dialog.cc b/libgui/src/settings-dialog.cc
--- a/libgui/src/settings-dialog.cc
+++ b/libgui/src/settings-dialog.cc
@@ -61,38 +61,38 @@ settings_dialog::settings_dialog (QWidge
   // which icon has to be selected
   QString widget_icon_set =
       settings->value ("DockWidgets/widget_icon_set","NONE").toString ();
   ui->general_icon_octave-> setChecked (true);  // the default (if invalid set)
   ui->general_icon_octave-> setChecked (widget_icon_set == "NONE");
   ui->general_icon_graphic-> setChecked (widget_icon_set == "GRAPHIC");
   ui->general_icon_letter-> setChecked (widget_icon_set == "LETTER");
 
-  ui->useCustomFileEditor->setChecked (settings->value ("useCustomFileEditor").toBool ());
+  ui->useCustomFileEditor->setChecked (settings->value ("useCustomFileEditor",false).toBool ());
   ui->customFileEditor->setText (settings->value ("customFileEditor").toString ());
   ui->editor_showLineNumbers->setChecked (settings->value ("editor/showLineNumbers",true).toBool () );
   ui->editor_highlightCurrentLine->setChecked (settings->value ("editor/highlightCurrentLine",true).toBool () );
   ui->editor_codeCompletion->setChecked (settings->value ("editor/codeCompletion",true).toBool () );
-  ui->editor_fontName->setCurrentFont (QFont (settings->value ("editor/fontName","Courier").toString()) );
+  ui->editor_fontName->setCurrentFont (QFont (settings->value ("editor/fontName","Courier New").toString()) );
   ui->editor_fontSize->setValue (settings->value ("editor/fontSize",10).toInt ());
   ui->editor_longWindowTitle->setChecked (settings->value ("editor/longWindowTitle",false).toBool ());
   ui->editor_restoreSession->setChecked (settings->value ("editor/restoreSession",true).toBool ());
-  ui->terminal_fontName->setCurrentFont (QFont (settings->value ("terminal/fontName","Courier").toString()) );
+  ui->terminal_fontName->setCurrentFont (QFont (settings->value ("terminal/fontName","Courier New").toString()) );
   ui->terminal_fontSize->setValue (settings->value ("terminal/fontSize",10).toInt ());
-  ui->showFilenames->setChecked (settings->value ("showFilenames").toBool());
-  ui->showFileSize->setChecked (settings->value ("showFileSize").toBool());
-  ui->showFileType->setChecked (settings->value ("showFileType").toBool());
-  ui->showLastModified->setChecked (settings->value ("showLastModified").toBool());
-  ui->showHiddenFiles->setChecked (settings->value ("showHiddenFiles").toBool());
-  ui->useAlternatingRowColors->setChecked (settings->value ("useAlternatingRowColors").toBool());
-  ui->useProxyServer->setChecked (settings->value ("useProxyServer").toBool ());
+  ui->showFilenames->setChecked (settings->value ("showFilenames",true).toBool());
+  ui->showFileSize->setChecked (settings->value ("showFileSize",false).toBool());
+  ui->showFileType->setChecked (settings->value ("showFileType",false).toBool());
+  ui->showLastModified->setChecked (settings->value ("showLastModified",false).toBool());
+  ui->showHiddenFiles->setChecked (settings->value ("showHiddenFiles",false).toBool());
+  ui->useAlternatingRowColors->setChecked (settings->value ("useAlternatingRowColors",true).toBool());
+  ui->useProxyServer->setChecked (settings->value ("useProxyServer",false).toBool ());
   ui->proxyHostName->setText (settings->value ("proxyHostName").toString ());
-  ui->terminal_cursorBlinking->setChecked (settings->value ("terminal/cursorBlinking").toBool ());
+  ui->terminal_cursorBlinking->setChecked (settings->value ("terminal/cursorBlinking",true).toBool ());
 
-  QString cursorType = settings->value ("terminal/cursorType").toString ();
+  QString cursorType = settings->value ("terminal/cursorType","ibeam").toString ();
 
   QStringList items;
   items << QString("0") << QString("1") << QString("2");
   ui->terminal_cursorType->addItems(items);
   ui->terminal_cursorType->setItemText (0, "IBeam Cursor");
   ui->terminal_cursorType->setItemText (1, "Block Cursor");
   ui->terminal_cursorType->setItemText (2, "Underline Cursor");
 
