# HG changeset patch
# User jwe
# Date 1200019186 0
#      Fri Jan 11 02:39:46 2008 +0000
# Branch release-3-0-x
# Node ID 807cf4d677055e5174d9d8c80ee43ef6355d29b7
# Parent  14142d0843665c71191e489af691581271520c4d
[3-0-0-branch @ 2008-01-11 02:39:45 by jwe]

diff --git a/doc/interpreter/nonlin.txi b/doc/interpreter/nonlin.txi
--- a/doc/interpreter/nonlin.txi
+++ b/doc/interpreter/nonlin.txi
@@ -74,28 +74,33 @@ function y = f (x)
 endfunction
 @end example
 
 Then, call @code{fsolve} with a specified initial condition to find the
 roots of the system of equations.  For example, given the function
 @code{f} defined above,
 
 @example
-[x, info] = fsolve (@@f, [1; 2])
+[x, fval, info] = fsolve (@@f, [1; 2])
 @end example
 
 @noindent
 results in the solution
 
 @example
 x =
 
   0.57983
   2.54621
 
+fval =
+
+  -5.7184e-10
+   5.5460e-10
+
 info = 1
 @end example
 
 @noindent
 A value of @code{info = 1} indicates that the solution has converged.
 
 The function @code{perror} may be used to print English messages
 corresponding to the numeric error codes.  For example,
@@ -136,14 +141,14 @@ function J = jacobian(x)
   J(2,2) = -4*x(1)*x(2);
 endfunction
 @end example
 
 @noindent
 Using this Jacobian is done with the following code
 
 @example
-[x, info] = fsolve (@{@@f, @@jacobian@}, [1; 2]);
+[x, fval, info] = fsolve (@{@@f, @@jacobian@}, [1; 2]);
 @end example
 
 @noindent
 which gives the same solution as before.
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,13 @@
 2008-01-10  John W. Eaton  <jwe@octave.org>
 
+	* DLD-FUNCTIONS/fsolve.cc (Ffsolve): Doc fix.
+	(hybrd_info_to_fsolve_info): Swap return values for -1 and -2 inputs.
+
 	* mex.cc (calc_single_subscript_internal): New static function.
 	(mxArray_octave_value::calc_single_subscript): Use it.
 	(mxArray_matlab::calc_single_subscript): Use it.
 
 2008-01-07  John W. Eaton  <jwe@octave.org>
 
 	* src/pt-except.cc (tree_try_catch_command::eval):
 	Set Vdebug_on_error and Vdebug_on_warning to false while executing
diff --git a/src/DLD-FUNCTIONS/fsolve.cc b/src/DLD-FUNCTIONS/fsolve.cc
--- a/src/DLD-FUNCTIONS/fsolve.cc
+++ b/src/DLD-FUNCTIONS/fsolve.cc
@@ -60,21 +60,20 @@ static bool warned_jac_imaginary = false
 static int call_depth = 0;
 
 octave_idx_type
 hybrd_info_to_fsolve_info (octave_idx_type info)
 {
   switch (info)
     {
     case -1:
-      info = -2;
       break;
 
     case 0:
-      info = -1;
+      info = -2;
       break;
 
     case 1:
       break;
 
     case 2:
       info = 4;
       break;
@@ -223,16 +222,34 @@ fsolve_user_jacobian (const ColumnVector
 
 DEFUN_DLD (fsolve, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {[@var{x}, @var{fval}, @var{info}] =} fsolve (@var{fcn}, @var{x0})\n\
 Given @var{fcn}, the name of a function of the form @code{f (@var{x})}\n\
 and an initial starting point @var{x0}, @code{fsolve} solves the set of\n\
 equations such that @code{f(@var{x}) == 0}.\n\
 \n\
+On return, @var{fval} contains the value of the function @var{fcn}\n\
+evaluated at @var{x}, and @var{info} may be one of the following values:\n\
+\n\
+@table @asis\n\
+\n\
+@item -2\n\
+Invalid input parameters.\n\
+@item -1\n\
+Error in user-supplied function.\n\
+@item 1\n\
+Relative error between two consecutive iterates is at most the\n\
+specified tolerance (see @code{fsolve_options}).\n\
+@item 3\n\
+Algorithm failed to converge.\n\
+@item 4\n\
+Limit on number of function calls reached.\n\
+@end table\n\
+\n\
 If @var{fcn} is a two-element string array, or a two element cell array\n\
 containing either the function name or inline or function handle. The\n\
 first element names the function @math{f} described above, and the second\n\
 element names a function of the form @code{j (@var{x})} to compute the\n\
 Jacobian matrix with elements\n\
 @tex\n\
 $$ J = {\\partial f_i \\over \\partial x_j} $$\n\
 @end tex\n\
