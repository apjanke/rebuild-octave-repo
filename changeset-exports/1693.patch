# HG changeset patch
# User jwe
# Date 820979381 0
#      Sun Jan 07 01:49:41 1996 +0000
# Node ID 55699892527f21baf1e1ffb17c3424ec5bbbdd1e
# Parent  ddfed708d84233c273b197c54cc28fb7ebd284db
[project @ 1996-01-07 01:49:41 by jwe]

diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -69,24 +69,26 @@ private:
   int len;
 
 protected:
 
   ArrayRep (T *d, int l)
     {
       data = d;
       len = l;
+      count = 1;
     }
 
 public:
 
   ArrayRep (void)
     {
       data = 0;
       len = 0;
+      count = 1;
     }
 
   ArrayRep (int n);
 
   ArrayRep (const ArrayRep<T>& a);
 
   ~ArrayRep (void);
 
@@ -113,43 +115,40 @@ private:
 
 protected:
 
   ArrayRep<T> *rep;
 
   Array (T *d, int l)
     {
       rep = new ArrayRep<T> (d, l);
-      rep->count = 1;
 
 #ifdef HEAVYWEIGHT_INDEXING
       idx = 0;
       max_indices = 1;
       idx_count = 0;
 #endif
     }
 
 public:
 
   Array (void)
     {
       rep = new ArrayRep<T> ();
-      rep->count = 1;
 
 #ifdef HEAVYWEIGHT_INDEXING
       idx = 0;
       max_indices = 1;
       idx_count = 0;
 #endif
     }
 
   Array (int n)
     {
       rep = new ArrayRep<T> (n);
-      rep->count = 1;
 
 #ifdef HEAVYWEIGHT_INDEXING
       idx = 0;
       max_indices = 1;
       idx_count = 0;
 #endif
     }
 
@@ -175,17 +174,16 @@ public:
   int length (void) const { return rep->length (); }
 
   T& elem (int n)
     {
       if (rep->count > 1)
 	{
 	  --rep->count;
 	  rep = new ArrayRep<T> (*rep);
-	  rep->count = 1;
 	}
       return rep->elem (n);
     }
 
   T& checkelem (int n);
   T& operator () (int n) { return checkelem (n); }
 
   // No checking.
