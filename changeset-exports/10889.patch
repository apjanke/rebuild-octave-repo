# HG changeset patch
# User Ben Abbott <bpabbott@mac.com>
# Date 1281741407 14400
#      Fri Aug 13 19:16:47 2010 -0400
# Node ID 1d7a7fb5074be204ef24149637ec7149f31cf0f9
# Parent  f4fdd86377628f2c760bb75f347507447f8de2e8
__print_parse_opts__.m: Double quote paths with spaces.

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2010-08-13  Ben Abbott <bpabbott@mac.com>
+
+	* plot/__print_parse_opts__.m: Double quote paths with spaces.
+
 2010-08-11  Rik <octave@nomad.inbox5.com>
 
 	* set/unique.m: Handle corner case where sparse matrix is actually full.
 
 2010-08-10  Rik <octave@nomad.inbox5.com>
 
 	* set/unique.m: Check whether outputs are used before calculating.
 
diff --git a/scripts/plot/__print_parse_opts__.m b/scripts/plot/__print_parse_opts__.m
--- a/scripts/plot/__print_parse_opts__.m
+++ b/scripts/plot/__print_parse_opts__.m
@@ -27,30 +27,30 @@
 function arg_st = __print_parse_opts__ (varargin)
 
   arg_st.append_to_file = false;
   arg_st.canvas_size = [];
   arg_st.debug = false;
   arg_st.debug_file = "octave-print-commands.log";
   arg_st.devopt = "";
   arg_st.figure = get (0, "currentfigure");
-  arg_st.fig2dev_binary = __find_binary__ ("fig2dev");
+  arg_st.fig2dev_binary = __quote_path__ (__find_binary__ ("fig2dev"));
   arg_st.fontsize = "";
   arg_st.font = "";
   arg_st.force_solid = 0; # 0=default, -1=dashed, +1=solid
-  arg_st.ghostscript.binary = __ghostscript_binary__ ();
+  arg_st.ghostscript.binary = __quote_path__ (__ghostscript_binary__ ());
   arg_st.ghostscript.device = "";
   arg_st.ghostscript.output = "";
   arg_st.ghostscript.papersize = "";
   arg_st.ghostscript.pageoffset = [];
   arg_st.ghostscript.debug = false;
   arg_st.ghostscript.epscrop = false;
   arg_st.ghostscript.resolution = 150;
   arg_st.orientation = "";
-  arg_st.pstoedit_binary = __find_binary__ ("pstoedit");
+  arg_st.pstoedit_binary = __quote_path__ (__find_binary__ ("pstoedit"));
   arg_st.name = "";
   arg_st.printer = "";
   arg_st.special_flag = "textnormal";
   arg_st.tight_flag = false;
   arg_st.use_color = 0; # 0=default, -1=mono, +1=color
   arg_st.send_to_printer = false;
   
   if (isunix ())
@@ -90,22 +90,21 @@ function arg_st = __print_parse_opts__ (
         if (length (arg) > 7)
           arg_st.debug_file = arg(8:end);
         endif
       elseif (length (arg) > 2 && arg(1:2) == "-d")
         arg_st.devopt = tolower (arg(3:end));
       elseif (length (arg) > 2 && arg(1:2) == "-P")
         arg_st.printer = arg;
       elseif ((length (arg) > 2) && arg(1:2) == "-G")
-        arg_st.ghostscript.binary = arg(3:end);
-        if (exist (arg_st.ghostscript.binary, "file") != 2)
-          arg_st.ghostscript.binary = file_in_path (EXEC_PATH, arg_st.ghostscript.binary);
-        endif
+        arg_st.ghostscript.binary = file_in_path (EXEC_PATH, arg(3:end));
         if (isempty (arg_st.ghostscript.binary))
           error ("print: Ghostscript binary ""%s"" could not be located", arg(3:end))
+        else
+          arg_st.ghostscript_binary = __quote_path__ (arg_st.ghostscript_binary);
         endif
       elseif (length (arg) > 2 && arg(1:2) == "-F")
         idx = rindex (arg, ":");
         if (idx)
           arg_st.font = arg(3:idx-1);
           arg_st.fontsize = str2num (arg(idx+1:end));
         else
           arg_st.font = arg(3:end);
@@ -334,16 +333,22 @@ endfunction
 %! assert (strfind (opts.ghostscript.output, ".ljet3"))
 %! assert (opts.devopt, "ljet3")
 %! assert (opts.send_to_printer, true);
 %! assert (opts.figure, 5)
 %! for n = 1:numel(opts.unlink)
 %!   unlink (opts.unlink{n});
 %! endfor
 
+function cmd = __quote_path__ (cmd)
+  if (any (cmd == " ") && ! (cmd(1) == """" && cmd(end) == """"))
+    cmd = strcat ("""", strrep (cmd, """", """"""), """");
+  endif
+endfunction
+
 function gs = __ghostscript_binary__ ()
 
   persistent ghostscript_binary = ""
   persistent warn_on_no_ghostscript = true
   persistent warn_on_bad_gsc = true
 
   if (isempty (ghostscript_binary))
     GSC = getenv ("GSC");
