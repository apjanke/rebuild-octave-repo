# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1533090479 14400
#      Tue Jul 31 22:27:59 2018 -0400
# Node ID ca38400776bc96f6b48abf7963c6ec94024aaac3
# Parent  39fd627b2c5da4aa10d40be3b4f0f87d81814cca
track column count in lexer in a few more places (bug #34852)

* lex.ll (<MATRIX_START>{S}*): Increment column count.
(<MATRIX_START>\], <MATRIX_START>\}): Move common code into
handle_close_bracket function.
(base_lexer::handle_close_bracket): Increment m_current_input_column.
({NUMBER}{Im}): Fixup m_current_input_column after call to yyless.
({D}{D_}*/\.[\*/\\^\'] | {NUMBER}): Likewise.
("@"): Likewise.

diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -502,16 +502,18 @@ ANY_INCLUDING_NL (.|{NL})
 
     curr_lexer->m_string_text += yytext;
     curr_lexer->m_current_input_column += yyleng;
   }
 
 <MATRIX_START>{S}* {
     curr_lexer->lexer_debug ("<MATRIX_START>{S}*");
 
+    curr_lexer->m_current_input_column += yyleng;
+
     curr_lexer->mark_previous_token_trailing_space ();
   }
 
 <MATRIX_START>{NL} {
     curr_lexer->lexer_debug ("<MATRIX_START>{NL}");
 
     curr_lexer->m_input_line_number++;
     curr_lexer->m_current_input_column = 1;
@@ -543,41 +545,27 @@ ANY_INCLUDING_NL (.|{NL})
 // after seeing a ']' character...
 
 // FIXME: we need to handle block comments here.
 %}
 
 <MATRIX_START>\] {
     curr_lexer->lexer_debug ("<MATRIX_START>\\]");
 
-    curr_lexer->m_looking_at_object_index.pop_front ();
-
-    curr_lexer->m_looking_for_object_index = true;
-    curr_lexer->m_at_beginning_of_statement = false;
-
-    curr_lexer->handle_close_bracket (']');
-
-    return curr_lexer->count_token (']');
+    return curr_lexer->handle_close_bracket (']');
   }
 
 %{
 // FIXME: we need to handle block comments here.
 %}
 
 <MATRIX_START>\} {
     curr_lexer->lexer_debug ("<MATRIX_START>\\}*");
 
-    curr_lexer->m_looking_at_object_index.pop_front ();
-
-    curr_lexer->m_looking_for_object_index = true;
-    curr_lexer->m_at_beginning_of_statement = false;
-
-    curr_lexer->handle_close_bracket ('}');
-
-    return curr_lexer->count_token ('}');
+    return curr_lexer->handle_close_bracket ('}');
   }
 
 \[ {
     curr_lexer->lexer_debug ("\\[");
 
         bool unput_comma = false;
 
     if (curr_lexer->whitespace_is_significant ()
@@ -1137,16 +1125,18 @@ ANY_INCLUDING_NL (.|{NL})
 
         if (curr_lexer->whitespace_is_significant ()
             && curr_lexer->space_follows_previous_token ()
             && ! (tok == '[' || tok == '{'
                   || curr_lexer->previous_token_is_binop ()))
           {
             yyless (0);
             unput (',');
+            // Adjust for comma that was not really in the input stream.
+            curr_lexer->m_current_input_column--;
           }
         else
           {
             curr_lexer->handle_number ();
             return curr_lexer->count_token_internal (IMAG_NUM);
           }
       }
   }
@@ -1172,16 +1162,18 @@ ANY_INCLUDING_NL (.|{NL})
 
         if (curr_lexer->whitespace_is_significant ()
             && curr_lexer->space_follows_previous_token ()
             && ! (tok == '[' || tok == '{'
                   || curr_lexer->previous_token_is_binop ()))
           {
             yyless (0);
             unput (',');
+            // Adjust for comma that was not really in the input stream.
+            curr_lexer->m_current_input_column--;
           }
         else
           {
             curr_lexer->handle_number ();
             return curr_lexer->count_token_internal (NUM);
           }
       }
   }
@@ -1318,16 +1310,18 @@ ANY_INCLUDING_NL (.|{NL})
 
         if (curr_lexer->whitespace_is_significant ()
             && curr_lexer->space_follows_previous_token ()
             && ! (tok == '[' || tok == '{'
                   || curr_lexer->previous_token_is_binop ()))
           {
             yyless (0);
             unput (',');
+            // Adjust for comma that was not really in the input stream.
+            curr_lexer->m_current_input_column--;
           }
         else
           {
             curr_lexer->m_current_input_column++;
 
             curr_lexer->m_looking_at_function_handle++;
             curr_lexer->m_looking_for_object_index = false;
             curr_lexer->m_at_beginning_of_statement = false;
@@ -2918,33 +2912,38 @@ namespace octave
     m_comment_text = "";
 
     m_at_beginning_of_statement = true;
   }
 
   int
   base_lexer::handle_close_bracket (int bracket_type)
   {
-    int retval = bracket_type;
+    m_looking_at_object_index.pop_front ();
+
+    m_looking_for_object_index = true;
+    m_at_beginning_of_statement = false;
+
+    m_current_input_column++;
 
     if (! m_nesting_level.none ())
       {
         m_nesting_level.remove ();
 
         if (bracket_type == ']')
           m_bracketflag--;
         else if (bracket_type == '}')
           m_braceflag--;
         else
           panic_impossible ();
       }
 
     pop_start_state ();
 
-    return retval;
+    return count_token (bracket_type);
   }
 
   bool
   base_lexer::looks_like_command_arg (void)
   {
     bool space_before = space_follows_previous_token ();
     bool space_after = looking_at_space ();
 
