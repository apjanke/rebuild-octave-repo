# HG changeset patch
# User Max Brister <max@2bass.com>
# Date 1345088219 18000
#      Wed Aug 15 22:36:59 2012 -0500
# Node ID ed2b911a2fb3670871806472957c3d2d9c4d3ef1
# Parent  b1b22bc50aedf9b19cc12825360723212660b7b9
Rename jit_convert::convert_llvm to jit_convert_llvm

* pt-jit.cc (jit_convert::jit_convert): Use jit_convert_llvm.
(jit_convert::convert_llvm): Rename to jit_convert_llvm.
* pt-jit.h (jit_convert::convert_llvm): Rename to jit_convert_llvm.

diff --git a/src/interp-core/pt-jit.cc b/src/interp-core/pt-jit.cc
--- a/src/interp-core/pt-jit.cc
+++ b/src/interp-core/pt-jit.cc
@@ -134,17 +134,17 @@ jit_convert::jit_convert (llvm::Module *
   // for now just init arguments from entry, later we will have to do something
   // more interesting
   for (jit_block::iterator iter = entry_block->begin ();
        iter != entry_block->end (); ++iter)
     if (jit_extract_argument *extract
         = dynamic_cast<jit_extract_argument *> (*iter))
       arguments.push_back (std::make_pair (extract->name (), true));
 
-  convert_llvm to_llvm (*this);
+  jit_convert_llvm to_llvm (*this);
   function = to_llvm.convert (module, arguments, blocks, constants);
 
 #ifdef OCTAVE_JIT_DEBUG
   std::cout << "-------------------- llvm ir --------------------";
   llvm::raw_os_ostream llvm_cout (std::cout);
   function->print (llvm_cout);
   std::cout << std::endl;
   llvm::verifyFunction (*function);
@@ -1238,20 +1238,21 @@ jit_convert::finish_breaks (jit_block *d
     {
       jit_block *b = *iter;
       b->append (create<jit_branch> (dest));
     }
 }
 
 // -------------------- jit_convert::convert_llvm --------------------
 llvm::Function *
-jit_convert::convert_llvm::convert (llvm::Module *module,
-                                    const std::vector<std::pair< std::string, bool> >& args,
-                                    const std::list<jit_block *>& blocks,
-                                    const std::list<jit_value *>& constants)
+jit_convert_llvm::convert (llvm::Module *module,
+                           const std::vector<std::pair<std::string, bool> >&
+                           args,
+                           const std::list<jit_block *>& blocks,
+                           const std::list<jit_value *>& constants)
 {
   jit_type *any = jit_typeinfo::get_any ();
 
   // argument is an array of octave_base_value*, or octave_base_value**
   llvm::Type *arg_type = any->to_llvm (); // this is octave_base_value*
   arg_type = arg_type->getPointerTo ();
   llvm::FunctionType *ft = llvm::FunctionType::get (llvm::Type::getVoidTy (context),
                                                     arg_type, false);
@@ -1313,62 +1314,62 @@ jit_convert::convert_llvm::convert (llvm
       function->eraseFromParent ();
       throw;
     }
 
   return function;
 }
 
 void
-jit_convert::convert_llvm::finish_phi (jit_phi *phi)
+jit_convert_llvm::finish_phi (jit_phi *phi)
 {
   llvm::PHINode *llvm_phi = phi->to_llvm ();
   for (size_t i = 0; i < phi->argument_count (); ++i)
     {
       llvm::BasicBlock *pred = phi->incomming_llvm (i);
       llvm_phi->addIncoming (phi->argument_llvm (i), pred);
     }
 }
 
 void
-jit_convert::convert_llvm::visit (jit_const_string& cs)
+jit_convert_llvm::visit (jit_const_string& cs)
 {
   cs.stash_llvm (builder.CreateGlobalStringPtr (cs.value ()));
 }
 
 void
-jit_convert::convert_llvm::visit (jit_const_bool& cb)
+jit_convert_llvm::visit (jit_const_bool& cb)
 {
   cb.stash_llvm (llvm::ConstantInt::get (cb.type_llvm (), cb.value ()));
 }
 
 void
-jit_convert::convert_llvm::visit (jit_const_scalar& cs)
+jit_convert_llvm::visit (jit_const_scalar& cs)
 {
   cs.stash_llvm (llvm::ConstantFP::get (cs.type_llvm (), cs.value ()));
 }
 
 void
-jit_convert::convert_llvm::visit (jit_const_complex& cc)
+jit_convert_llvm::visit (jit_const_complex& cc)
 {
   llvm::Type *scalar_t = jit_typeinfo::get_scalar_llvm ();
   llvm::Constant *values[2];
   Complex value = cc.value ();
   values[0] = llvm::ConstantFP::get (scalar_t, value.real ());
   values[1] = llvm::ConstantFP::get (scalar_t, value.imag ());
   cc.stash_llvm (llvm::ConstantVector::get (values));
 }
 
-void jit_convert::convert_llvm::visit (jit_const_index& ci)
+void jit_convert_llvm::visit (jit_const_index& ci)
 {
   ci.stash_llvm (llvm::ConstantInt::get (ci.type_llvm (), ci.value ()));
 }
 
 void
-jit_convert::convert_llvm::visit (jit_const_range& cr)
+jit_convert_llvm::visit (jit_const_range& cr)
 {
   llvm::StructType *stype = llvm::cast<llvm::StructType>(cr.type_llvm ());
   llvm::Type *scalar_t = jit_typeinfo::get_scalar_llvm ();
   llvm::Type *idx = jit_typeinfo::get_index_llvm ();
   const jit_range& rng = cr.value ();
 
   llvm::Constant *constants[4];
   constants[0] = llvm::ConstantFP::get (scalar_t, rng.base);
@@ -1378,101 +1379,101 @@ jit_convert::convert_llvm::visit (jit_co
 
   llvm::Value *as_llvm;
   as_llvm = llvm::ConstantStruct::get (stype,
                                        llvm::makeArrayRef (constants, 4));
   cr.stash_llvm (as_llvm);
 }
 
 void
-jit_convert::convert_llvm::visit (jit_block& b)
+jit_convert_llvm::visit (jit_block& b)
 {
   llvm::BasicBlock *block = b.to_llvm ();
   builder.SetInsertPoint (block);
   for (jit_block::iterator iter = b.begin (); iter != b.end (); ++iter)
     visit (*iter);
 }
 
 void
-jit_convert::convert_llvm::visit (jit_branch& b)
+jit_convert_llvm::visit (jit_branch& b)
 {
   b.stash_llvm (builder.CreateBr (b.successor_llvm ()));
 }
 
 void
-jit_convert::convert_llvm::visit (jit_cond_branch& cb)
+jit_convert_llvm::visit (jit_cond_branch& cb)
 {
   llvm::Value *cond = cb.cond_llvm ();
   llvm::Value *br;
   br = builder.CreateCondBr (cond, cb.successor_llvm (0),
                              cb.successor_llvm (1));
   cb.stash_llvm (br);
 }
 
 void
-jit_convert::convert_llvm::visit (jit_call& call)
+jit_convert_llvm::visit (jit_call& call)
 {
   const jit_function& ol = call.overload ();
 
   std::vector<jit_value *> args (call.arguments ().size ());
   for (size_t i = 0; i < args.size (); ++i)
     args[i] = call.argument (i);
 
   llvm::Value *ret = ol.call (builder, args);
   call.stash_llvm (ret);
 }
 
 void
-jit_convert::convert_llvm::visit (jit_extract_argument& extract)
+jit_convert_llvm::visit (jit_extract_argument& extract)
 {
   llvm::Value *arg = arguments[extract.name ()];
   assert (arg);
   arg = builder.CreateLoad (arg);
 
   const jit_function& ol = extract.overload ();
   extract.stash_llvm (ol.call (builder, arg));
 }
 
 void
-jit_convert::convert_llvm::visit (jit_store_argument& store)
+jit_convert_llvm::visit (jit_store_argument& store)
 {
   const jit_function& ol = store.overload ();
   llvm::Value *arg_value = ol.call (builder, store.result ());
   llvm::Value *arg = arguments[store.name ()];
   store.stash_llvm (builder.CreateStore (arg_value, arg));
 }
 
 void
-jit_convert::convert_llvm::visit (jit_phi& phi)
+jit_convert_llvm::visit (jit_phi& phi)
 {
   // we might not have converted all incoming branches, so we don't
   // set incomming branches now
   llvm::PHINode *node = llvm::PHINode::Create (phi.type_llvm (),
                                                phi.argument_count ());
   builder.Insert (node);
   phi.stash_llvm (node);
 }
 
 void
-jit_convert::convert_llvm::visit (jit_variable&)
+jit_convert_llvm::visit (jit_variable&)
 {
   throw jit_fail_exception ("ERROR: SSA construction should remove all variables");
 }
 
 void
-jit_convert::convert_llvm::visit (jit_error_check& check)
+jit_convert_llvm::visit (jit_error_check& check)
 {
   llvm::Value *cond = jit_typeinfo::insert_error_check (builder);
   llvm::Value *br = builder.CreateCondBr (cond, check.successor_llvm (0),
                                           check.successor_llvm (1));
   check.stash_llvm (br);
 }
 
 void
-jit_convert::convert_llvm::visit (jit_assign& assign)
+jit_convert_llvm::visit (jit_assign& assign)
 {
   jit_value *new_value = assign.src ();
   assign.stash_llvm (new_value->to_llvm ());
 
   if (assign.artificial ())
     return;
 
   if (isa<jit_assign_base> (new_value))
@@ -1487,21 +1488,21 @@ jit_convert::convert_llvm::visit (jit_as
     {
       const jit_function& ol = jit_typeinfo::get_release (overwrite->type ());
       if (ol.valid ())
         ol.call (builder, overwrite);
     }
 }
 
 void
-jit_convert::convert_llvm::visit (jit_argument&)
+jit_convert_llvm::visit (jit_argument&)
 {}
 
 void
-jit_convert::convert_llvm::visit (jit_magic_end& me)
+jit_convert_llvm::visit (jit_magic_end& me)
 {
   const jit_function& ol = me.overload ();
 
   jit_magic_end::context ctx = me.resolve_context ();
   llvm::Value *ret = ol.call (builder, ctx.value, ctx.index, ctx.count);
   me.stash_llvm (ret);
 }
 
diff --git a/src/interp-core/pt-jit.h b/src/interp-core/pt-jit.h
--- a/src/interp-core/pt-jit.h
+++ b/src/interp-core/pt-jit.h
@@ -24,19 +24,17 @@ along with Octave; see the file COPYING.
 #define octave_tree_jit_h 1
 
 #ifdef HAVE_LLVM
 
 #include "jit-ir.h"
 
 #include "pt-walk.h"
 
-// convert between IRs
-// FIXME: Class relationships are messy from here on down. They need to be
-// cleaned up.
+// Convert from the parse tree (AST) to the low level Octave IR.
 class
 jit_convert : public tree_walker
 {
 public:
   typedef std::pair<jit_type *, std::string> type_bound;
   typedef std::vector<type_bound> type_bound_vector;
 
   jit_convert (llvm::Module *module, tree &tee, jit_type *for_bounds = 0);
@@ -349,55 +347,55 @@ private:
     std::cout << std::endl;
   }
 
   bool breaking; // true if we are breaking OR continuing
   block_list breaks;
   block_list continues;
 
   void finish_breaks (jit_block *dest, const block_list& lst);
+};
 
-  // this case is much simpler, just convert from the jit ir to llvm
-  class
-  convert_llvm : public jit_ir_walker
-  {
-  public:
-    convert_llvm (jit_convert& jc) : jthis (jc) {}
+// Convert from the low level Octave IR to LLVM
+class
+jit_convert_llvm : public jit_ir_walker
+{
+public:
+  jit_convert_llvm (jit_convert& jc) : jthis (jc) {}
 
-    llvm::Function *convert (llvm::Module *module,
-                             const std::vector<std::pair<std::string, bool> >& args,
-                             const std::list<jit_block *>& blocks,
-                             const std::list<jit_value *>& constants);
+  llvm::Function *convert (llvm::Module *module,
+                           const std::vector<std::pair<std::string, bool> >& args,
+                           const std::list<jit_block *>& blocks,
+                           const std::list<jit_value *>& constants);
 
 #define JIT_METH(clname)                        \
-    virtual void visit (jit_ ## clname&);
+  virtual void visit (jit_ ## clname&);
 
-    JIT_VISIT_IR_CLASSES;
+  JIT_VISIT_IR_CLASSES;
 
 #undef JIT_METH
-  private:
-    // name -> llvm argument
-    std::map<std::string, llvm::Value *> arguments;
+private:
+  // name -> llvm argument
+  std::map<std::string, llvm::Value *> arguments;
 
-    void finish_phi (jit_phi *phi);
+  void finish_phi (jit_phi *phi);
 
-    void visit (jit_value *jvalue)
-    {
-      return visit (*jvalue);
-    }
+  void visit (jit_value *jvalue)
+  {
+    return visit (*jvalue);
+  }
 
-    void visit (jit_value &jvalue)
-    {
-      jvalue.accept (*this);
-    }
-  private:
-    jit_convert &jthis;
-    llvm::Function *function;
-    llvm::BasicBlock *prelude;
-  };
+  void visit (jit_value &jvalue)
+  {
+    jvalue.accept (*this);
+  }
+private:
+  jit_convert &jthis;
+  llvm::Function *function;
+  llvm::BasicBlock *prelude;
 };
 
 class jit_info;
 
 class
 tree_jit
 {
 public:
