# HG changeset patch
# User jwe
# Date 822894945 0
#      Mon Jan 29 05:55:45 1996 +0000
# Node ID 024c75af53f1c33083c72e01fa3c73f667b42ced
# Parent  1881b2a7d1e28f08da668d15c146878641642037
[project @ 1996-01-29 05:55:45 by jwe]

diff --git a/src/xdiv.cc b/src/xdiv.cc
--- a/src/xdiv.cc
+++ b/src/xdiv.cc
@@ -27,17 +27,16 @@ Software Foundation, 59 Temple Place - S
 
 #include <cassert>
 
 #include "CMatrix.h"
 #include "dMatrix.h"
 #include "oct-cmplx.h"
 
 #include "error.h"
-#include "pt-const.h"
 #include "xdiv.h"
 
 static inline int
 result_ok (int info, double rcond, int warn = 1)
 {
   assert (info != -1);
 
   if (info == -2)
@@ -82,279 +81,271 @@ mx_div_conform (int b_nc, int a_nc)
 //       op2 / op1:   m   cm
 //            +--   +---+----+
 //   matrix         | 1 |  3 |
 //                  +---+----+
 //   complex_matrix | 2 |  4 |
 //                  +---+----+
 
 // -*- 1 -*-
-tree_constant
+Matrix
 xdiv (const Matrix& a, const Matrix& b)
 {
   if (! mx_div_conform (b.columns (), a.columns ()))
-    return tree_constant ();
+    return Matrix ();
 
   Matrix atmp = a.transpose ();
   Matrix btmp = b.transpose ();
 
   int info;
   if (btmp.rows () == btmp.columns ())
     {
       double rcond = 0.0;
       Matrix result = btmp.solve (atmp, info, rcond);
       if (result_ok (info, rcond))
-	return tree_constant (result.transpose ());
+	return Matrix (result.transpose ());
     }
 
   int rank;
   Matrix result = btmp.lssolve (atmp, info, rank);
 
-  return tree_constant (result.transpose ());
+  return result.transpose ();
 }
 
 // -*- 2 -*-
-tree_constant
+ComplexMatrix
 xdiv (const Matrix& a, const ComplexMatrix& b)
 {
   if (! mx_div_conform (b.columns (), a.columns ()))
-    return tree_constant ();
+    return ComplexMatrix ();
 
   Matrix atmp = a.transpose ();
   ComplexMatrix btmp = b.hermitian ();
 
   int info;
   if (btmp.rows () == btmp.columns ())
     {
       double rcond = 0.0;
       ComplexMatrix result = btmp.solve (atmp, info, rcond);
       if (result_ok (info, rcond))
-	return tree_constant (result.hermitian ());
+	return result.hermitian ();
     }
 
   int rank;
   ComplexMatrix result = btmp.lssolve (atmp, info, rank);
 
-  return tree_constant (result.hermitian ());
+  return result.hermitian ();
 }
 
 // -*- 3 -*-
-tree_constant
+ComplexMatrix
 xdiv (const ComplexMatrix& a, const Matrix& b)
 {
   if (! mx_div_conform (b.columns (), a.columns ()))
-    return tree_constant ();
+    return ComplexMatrix ();
 
   ComplexMatrix atmp = a.hermitian ();
   Matrix btmp = b.transpose ();
 
   int info;
   if (btmp.rows () == btmp.columns ())
     {
       double rcond = 0.0;
       ComplexMatrix result = btmp.solve (atmp, info, rcond);
       if (result_ok (info, rcond))
-	return tree_constant (result.hermitian ());
+	return result.hermitian ();
     }
 
   int rank;
   ComplexMatrix result = btmp.lssolve (atmp, info, rank);
 
-  return tree_constant (result.hermitian ());
+  return result.hermitian ();
 }
 
 // -*- 4 -*-
-tree_constant
+ComplexMatrix
 xdiv (const ComplexMatrix& a, const ComplexMatrix& b)
 {
   if (! mx_div_conform (b.columns (), a.columns ()))
-    return tree_constant ();
+    return ComplexMatrix ();
 
   ComplexMatrix atmp = a.hermitian ();
   ComplexMatrix btmp = b.hermitian ();
 
   int info;
   if (btmp.rows () == btmp.columns ())
     {
       double rcond = 0.0;
       ComplexMatrix result = btmp.solve (atmp, info, rcond);
       if (result_ok (info, rcond))
-	return tree_constant (result.hermitian ());
+	return result.hermitian ();
     }
 
   int rank;
   ComplexMatrix result = btmp.lssolve (atmp, info, rank);
 
-  return tree_constant (result.hermitian ());
+  return result.hermitian ();
 }
 
 // Funny element by element division operations.
 //
 //       op2 \ op1:   s   cs
 //            +--   +---+----+
 //   matrix         | 1 |  3 |
 //                  +---+----+
 //   complex_matrix | 2 |  4 |
 //                  +---+----+
 
-tree_constant
+Matrix
 x_el_div (double a, const Matrix& b)
 {
   int nr = b.rows ();
   int nc = b.columns ();
 
   Matrix result (nr, nc);
 
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
       result.elem (i, j) = a / b.elem (i, j);
 
-  return tree_constant (result);
+  return result;
 }
 
-tree_constant
+ComplexMatrix
 x_el_div (double a, const ComplexMatrix& b)
 {
   int nr = b.rows ();
   int nc = b.columns ();
 
   ComplexMatrix result (nr, nc);
 
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
       result.elem (i, j) = a / b.elem (i, j);
 
-  return tree_constant (result);
+  return result;
 }
 
-tree_constant
+ComplexMatrix
 x_el_div (const Complex a, const Matrix& b)
 {
   int nr = b.rows ();
   int nc = b.columns ();
 
   ComplexMatrix result (nr, nc);
 
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
       result.elem (i, j) = a / b.elem (i, j);
 
-  return tree_constant (result);
+  return result;
 }
 
-tree_constant
+ComplexMatrix
 x_el_div (const Complex a, const ComplexMatrix& b)
 {
   int nr = b.rows ();
   int nc = b.columns ();
 
   ComplexMatrix result (nr, nc);
 
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
       result.elem (i, j) = a / b.elem (i, j);
 
-  return tree_constant (result);
+  return result;
 }
 
 // Left division functions.
 //
 //       op2 \ op1:   m   cm
 //            +--   +---+----+
 //   matrix         | 1 |  3 |
 //                  +---+----+
 //   complex_matrix | 2 |  4 |
 //                  +---+----+
 
 // -*- 1 -*-
-tree_constant
+Matrix
 xleftdiv (const Matrix& a, const Matrix& b)
 {
   if (! mx_leftdiv_conform (a.rows (), b.rows ()))
-    return tree_constant ();
+    return Matrix ();
 
   int info;
   if (a.rows () == a.columns ())
     {
       double rcond = 0.0;
       Matrix result = a.solve (b, info, rcond);
       if (result_ok (info, rcond))
-	return tree_constant (result);
+	return result;
     }
 
   int rank;
-  Matrix result = a.lssolve (b, info, rank);
-
-  return tree_constant (result);
+  return a.lssolve (b, info, rank);
 }
 
 // -*- 2 -*-
-tree_constant
+ComplexMatrix
 xleftdiv (const Matrix& a, const ComplexMatrix& b)
 {
   if (! mx_leftdiv_conform (a.rows (), b.rows ()))
-    return tree_constant ();
+    return ComplexMatrix ();
 
   int info;
   if (a.rows () == a.columns ())
     {
       double rcond = 0.0;
       ComplexMatrix result = a.solve (b, info, rcond);
       if (result_ok (info, rcond))
-	return tree_constant (result);
+	return result;
     }
 
   int rank;
-  ComplexMatrix result = a.lssolve (b, info, rank);
-
-  return tree_constant (result);
+  return a.lssolve (b, info, rank);
 }
 
 // -*- 3 -*-
-tree_constant
+ComplexMatrix
 xleftdiv (const ComplexMatrix& a, const Matrix& b)
 {
   if (! mx_leftdiv_conform (a.rows (), b.rows ()))
-    return tree_constant ();
+    return ComplexMatrix ();
 
   int info;
   if (a.rows () == a.columns ())
     {
       double rcond = 0.0;
       ComplexMatrix result = a.solve (b, info, rcond);
       if (result_ok (info, rcond))
-	return tree_constant (result);
+	return result;
     }
 
   int rank;
-  ComplexMatrix result = a.lssolve (b, info, rank);
-
-  return tree_constant (result);
+  return a.lssolve (b, info, rank);
 }
 
 // -*- 4 -*-
-tree_constant
+ComplexMatrix
 xleftdiv (const ComplexMatrix& a, const ComplexMatrix& b)
 {
   if (! mx_leftdiv_conform (a.rows (), b.rows ()))
-    return tree_constant ();
+    return ComplexMatrix ();
 
   int info;
   if (a.rows () == a.columns ())
     {
       double rcond = 0.0;
       ComplexMatrix result = a.solve (b, info, rcond);
       if (result_ok (info, rcond))
-	return tree_constant (result);
+	return result;
     }
 
   int rank;
-  ComplexMatrix result = a.lssolve (b, info, rank);
-
-  return tree_constant (result);
+  return a.lssolve (b, info, rank);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/src/xdiv.h b/src/xdiv.h
--- a/src/xdiv.h
+++ b/src/xdiv.h
@@ -23,32 +23,31 @@ Software Foundation, 59 Temple Place - S
 
 #if !defined (octave_xdiv_h)
 #define octave_xdiv_h 1
 
 #include "oct-cmplx.h"
 
 class Matrix;
 class ComplexMatrix;
-class tree_constant;
 
-extern tree_constant xdiv (const Matrix& a, const Matrix& b);
-extern tree_constant xdiv (const Matrix& a, const ComplexMatrix& b);
-extern tree_constant xdiv (const ComplexMatrix& a, const Matrix& b);
-extern tree_constant xdiv (const ComplexMatrix& a, const ComplexMatrix& b);
+extern Matrix xdiv (const Matrix& a, const Matrix& b);
+extern ComplexMatrix xdiv (const Matrix& a, const ComplexMatrix& b);
+extern ComplexMatrix xdiv (const ComplexMatrix& a, const Matrix& b);
+extern ComplexMatrix xdiv (const ComplexMatrix& a, const ComplexMatrix& b);
 
-extern tree_constant x_el_div (double a, const Matrix& b);
-extern tree_constant x_el_div (double a, const ComplexMatrix& b);
-extern tree_constant x_el_div (const Complex a, const Matrix& b);
-extern tree_constant x_el_div (const Complex a, const ComplexMatrix& b);
+extern Matrix x_el_div (double a, const Matrix& b);
+extern ComplexMatrix x_el_div (double a, const ComplexMatrix& b);
+extern ComplexMatrix x_el_div (const Complex a, const Matrix& b);
+extern ComplexMatrix x_el_div (const Complex a, const ComplexMatrix& b);
 
-extern tree_constant xleftdiv (const Matrix& a, const Matrix& b);
-extern tree_constant xleftdiv (const Matrix& a, const ComplexMatrix& b);
-extern tree_constant xleftdiv (const ComplexMatrix& a, const Matrix& b);
-extern tree_constant xleftdiv (const ComplexMatrix& a, const ComplexMatrix& b);
+extern Matrix xleftdiv (const Matrix& a, const Matrix& b);
+extern ComplexMatrix xleftdiv (const Matrix& a, const ComplexMatrix& b);
+extern ComplexMatrix xleftdiv (const ComplexMatrix& a, const Matrix& b);
+extern ComplexMatrix xleftdiv (const ComplexMatrix& a, const ComplexMatrix& b);
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
