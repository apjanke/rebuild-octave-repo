# HG changeset patch
# User Janne Olavi Paanaj√§rvi <janne.paanajarvi@aalto.fi>
# Date 1361993515 -7200
#      Wed Feb 27 21:31:55 2013 +0200
# Node ID 752a5de459c2a3fde0d26073761ca9f8f9672f52
# Parent  2fd39ab122091adb1e824cb5f7ad2ff5632a5b39
Fix mex function reloading (bug 34861).

* dynamic-ld.cc(octave_dynamic_load::do_load_mex): remove use of
  octave_mex_file_list.
  (octave_dynamic_load::do_remove_mex): remove mex_file from octave_shlib_list
  instead of octave_mex_file_list.
  (octave_mex_file_list): delete class.

diff --git a/libinterp/interp-core/dynamic-ld.cc b/libinterp/interp-core/dynamic-ld.cc
--- a/libinterp/interp-core/dynamic-ld.cc
+++ b/libinterp/interp-core/dynamic-ld.cc
@@ -192,119 +192,16 @@ octave_shlib_list::find_file (const std:
 
 void
 octave_shlib_list::display (void)
 {
   if (instance_ok ())
     instance->do_display ();
 }
 
-class
-octave_mex_file_list
-{
-public:
-
-  typedef std::list<octave_shlib>::iterator iterator;
-  typedef std::list<octave_shlib>::const_iterator const_iterator;
-
-  static void append (const octave_shlib& shl);
-
-  static void remove (octave_shlib& shl, octave_shlib::close_hook cl_hook = 0);
-
-private:
-
-  octave_mex_file_list (void) : file_list () { }
-
-  ~octave_mex_file_list (void) { }
-
-  void do_append (const octave_shlib& shl);
-
-  void do_remove (octave_shlib& shl, octave_shlib::close_hook cl_hook = 0);
-
-  static octave_mex_file_list *instance;
-
-  static void cleanup_instance (void) { delete instance; instance = 0; }
-
-  static bool instance_ok (void);
-
-  // List of libraries we have loaded.
-  std::list<octave_shlib> file_list;
-
-  // No copying!
-
-  octave_mex_file_list (const octave_mex_file_list&);
-
-  octave_mex_file_list& operator = (const octave_mex_file_list&);
-};
-
-octave_mex_file_list *octave_mex_file_list::instance = 0;
-
-void
-octave_mex_file_list::do_append (const octave_shlib& shl)
-{
-  file_list.push_back (shl);
-}
-
-void
-octave_mex_file_list::do_remove (octave_shlib& shl,
-                                 octave_shlib::close_hook cl_hook)
-{
-  for (iterator p = file_list.begin (); p != file_list.end (); p++)
-    {
-      if (*p == shl)
-        {
-          // Erase first to avoid potentially invalidating the pointer by the
-          // following hooks.
-          file_list.erase (p);
-
-          shl.close (cl_hook);
-
-          break;
-        }
-    }
-}
-
-bool
-octave_mex_file_list::instance_ok (void)
-{
-  bool retval = true;
-
-  if (! instance)
-    {
-      instance = new octave_mex_file_list ();
-
-      if (instance)
-        singleton_cleanup_list::add (cleanup_instance);
-    }
-
-  if (! instance)
-    {
-      ::error ("unable to create shared library list object!");
-
-      retval = false;
-    }
-
-  return retval;
-}
-
-void
-octave_mex_file_list::append (const octave_shlib& shl)
-{
-  if (instance_ok ())
-    instance->do_append (shl);
-}
-
-void
-octave_mex_file_list::remove (octave_shlib& shl,
-                              octave_shlib::close_hook cl_hook)
-{
-  if (instance_ok ())
-    instance->do_remove (shl, cl_hook);
-}
-
 octave_dynamic_loader *octave_dynamic_loader::instance = 0;
 
 bool octave_dynamic_loader::doing_load = false;
 
 bool
 octave_dynamic_loader::instance_ok (void)
 {
   bool retval = true;
@@ -439,18 +336,16 @@ octave_dynamic_loader::do_load_mex (cons
   if (! error_state)
     {
       if (mex_file)
         {
           void *function = 0;
 
           bool have_fmex = false;
 
-          octave_mex_file_list::append (mex_file);
-
           function = mex_file.search (fcn_name, mex_mangler);
 
           if (! function)
             {
               // FIXME -- can we determine this C mangling scheme
               // automatically at run time or configure time?
 
               function = mex_file.search (fcn_name, mex_uscore_mangler);
@@ -508,17 +403,17 @@ octave_dynamic_loader::do_remove_mex (co
   // We don't need to do anything if this is called because we are in
   // the process of reloading a .oct file that has changed.
 
   if (! doing_load)
     {
       retval = shl.remove (fcn_name);
 
       if (shl.number_of_functions_loaded () == 0)
-        octave_mex_file_list::remove (shl);
+        octave_shlib_list::remove (shl);
     }
 
   return retval;
 }
 
 octave_function *
 octave_dynamic_loader::load_oct (const std::string& fcn_name,
                                   const std::string& file_name,
