# HG changeset patch
# User Rik <rik@octave.org>
# Date 1449937596 28800
#      Sat Dec 12 08:26:36 2015 -0800
# Node ID 1f4d6b1f50c1912dee8b9e46e2c2b730cf0c15e2
# Parent  d5733bbf2418b9ce1f6bd7a76715621fb9cc78ca
2015 Code Sprint: qr.cc: use ovl().

diff --git a/libinterp/dldfcn/qr.cc b/libinterp/dldfcn/qr.cc
--- a/libinterp/dldfcn/qr.cc
+++ b/libinterp/dldfcn/qr.cc
@@ -240,47 +240,44 @@ x = @var{R} \\ @var{C}\n\
       if (have_b && nargout < 2)
         error ("qr: incorrect number of output arguments");
       else if (is_cmplx)
         {
           SparseComplexQR q (arg.sparse_complex_matrix_value ());
 
           if (have_b > 0)
             {
-              retval(1) = q.R (economy);
-              retval(0) = q.C (args(have_b).complex_matrix_value ());
+              retval = ovl (q.C (args(have_b).complex_matrix_value ()),
+                            q.R (economy));
               if (arg.rows () < arg.columns ())
                 warning ("qr: non minimum norm solution for under-determined problem");
             }
           else if (nargout > 1)
             {
-              retval(1) = q.R (economy);
-              retval(0) = q.Q ();
+              retval = ovl (q.Q (), q.R (economy));
             }
           else
-            retval(0) = q.R (economy);
+            retval = ovl (q.R (economy));
         }
       else
         {
           SparseQR q (arg.sparse_matrix_value ());
 
           if (have_b > 0)
             {
-              retval(1) = q.R (economy);
-              retval(0) = q.C (args(have_b).matrix_value ());
+              retval = ovl (q.C (args(have_b).matrix_value ()), q.R (economy));
               if (args(0).rows () < args(0).columns ())
                 warning ("qr: non minimum norm solution for under-determined problem");
             }
           else if (nargout > 1)
             {
-              retval(1) = q.R (economy);
-              retval(0) = q.Q ();
+              retval = ovl (q.Q (), q.R (economy));
             }
           else
-            retval(0) = q.R (economy);
+            retval = ovl (q.R (economy));
         }
     }
   else
     {
       QR::type type = (nargout == 0 || nargout == 1) ? QR::raw
                                                      : nargin == 2
                                                        ? QR::economy : QR::std;
 
@@ -291,25 +288,24 @@ x = @var{R} \\ @var{C}\n\
               FloatMatrix m = arg.float_matrix_value ();
 
               switch (nargout)
                 {
                 case 0:
                 case 1:
                   {
                     FloatQR fact (m, type);
-                    retval(0) = fact.R ();
+                    retval = ovl (fact.R ());
                   }
                   break;
 
                 case 2:
                   {
                     FloatQR fact (m, type);
-                    retval(1) = get_qr_r (fact);
-                    retval(0) = fact.Q ();
+                    retval = ovl (fact.Q (), get_qr_r (fact));
                   }
                   break;
 
                 default:
                   {
                     FloatQRP fact (m, type);
                     if (type == QR::economy)
                       retval(2) = fact.Pvec ();
@@ -326,25 +322,24 @@ x = @var{R} \\ @var{C}\n\
               FloatComplexMatrix m = arg.float_complex_matrix_value ();
 
               switch (nargout)
                 {
                 case 0:
                 case 1:
                   {
                     FloatComplexQR fact (m, type);
-                    retval(0) = fact.R ();
+                    retval = ovl (fact.R ());
                   }
                   break;
 
                 case 2:
                   {
                     FloatComplexQR fact (m, type);
-                    retval(1) = get_qr_r (fact);
-                    retval(0) = fact.Q ();
+                    retval = ovl (fact.Q (), get_qr_r (fact));
                   }
                   break;
 
                 default:
                   {
                     FloatComplexQRP fact (m, type);
                     if (type == QR::economy)
                       retval(2) = fact.Pvec ();
@@ -364,25 +359,24 @@ x = @var{R} \\ @var{C}\n\
               Matrix m = arg.matrix_value ();
 
               switch (nargout)
                 {
                 case 0:
                 case 1:
                   {
                     QR fact (m, type);
-                    retval(0) = fact.R ();
+                    retval = ovl (fact.R ());
                   }
                   break;
 
                 case 2:
                   {
                     QR fact (m, type);
-                    retval(1) = get_qr_r (fact);
-                    retval(0) = fact.Q ();
+                    retval = ovl (fact.Q (), get_qr_r (fact));
                   }
                   break;
 
                 default:
                   {
                     QRP fact (m, type);
                     if (type == QR::economy)
                       retval(2) = fact.Pvec ();
@@ -399,25 +393,24 @@ x = @var{R} \\ @var{C}\n\
               ComplexMatrix m = arg.complex_matrix_value ();
 
               switch (nargout)
                 {
                 case 0:
                 case 1:
                   {
                     ComplexQR fact (m, type);
-                    retval(0) = fact.R ();
+                    retval = ovl (fact.R ());
                   }
                   break;
 
                 case 2:
                   {
                     ComplexQR fact (m, type);
-                    retval(1) = get_qr_r (fact);
-                    retval(0) = fact.Q ();
+                    retval = ovl (fact.Q (), get_qr_r (fact));
                   }
                   break;
 
                 default:
                   {
                     ComplexQRP fact (m, type);
                     if (type == QR::economy)
                       retval(2) = fact.Pvec ();
@@ -786,31 +779,29 @@ economized (R is square).\n\
               FloatMatrix Q = argq.float_matrix_value ();
               FloatMatrix R = argr.float_matrix_value ();
               FloatMatrix u = argu.float_matrix_value ();
               FloatMatrix v = argv.float_matrix_value ();
 
               FloatQR fact (Q, R);
               fact.update (u, v);
 
-              retval(1) = get_qr_r (fact);
-              retval(0) = fact.Q ();
+              retval = ovl (fact.Q (), get_qr_r (fact));
             }
           else
             {
               Matrix Q = argq.matrix_value ();
               Matrix R = argr.matrix_value ();
               Matrix u = argu.matrix_value ();
               Matrix v = argv.matrix_value ();
 
               QR fact (Q, R);
               fact.update (u, v);
 
-              retval(1) = get_qr_r (fact);
-              retval(0) = fact.Q ();
+              retval = ovl (fact.Q (), get_qr_r (fact));
             }
         }
       else
         {
           // complex case
           if (argq.is_single_type ()
               || argr.is_single_type ()
               || argu.is_single_type ()
@@ -819,31 +810,29 @@ economized (R is square).\n\
               FloatComplexMatrix Q = argq.float_complex_matrix_value ();
               FloatComplexMatrix R = argr.float_complex_matrix_value ();
               FloatComplexMatrix u = argu.float_complex_matrix_value ();
               FloatComplexMatrix v = argv.float_complex_matrix_value ();
 
               FloatComplexQR fact (Q, R);
               fact.update (u, v);
 
-              retval(1) = get_qr_r (fact);
-              retval(0) = fact.Q ();
+              retval = ovl (fact.Q (), get_qr_r (fact));
             }
           else
             {
               ComplexMatrix Q = argq.complex_matrix_value ();
               ComplexMatrix R = argr.complex_matrix_value ();
               ComplexMatrix u = argu.complex_matrix_value ();
               ComplexMatrix v = argv.complex_matrix_value ();
 
               ComplexQR fact (Q, R);
               fact.update (u, v);
 
-              retval(1) = get_qr_r (fact);
-              retval(0) = fact.Q ();
+              retval = ovl (fact.Q (), get_qr_r (fact));
             }
         }
     }
   else
     error ("qrupdate: Q and R dimensions don't match");
 
   return retval;
 }
@@ -985,36 +974,32 @@ If @var{orient} is @qcode{\"row\"}, full
 
                     FloatQR fact (Q, R);
 
                     if (col)
                       fact.insert_col (x, j-one);
                     else
                       fact.insert_row (x.row (0), j(0)-one);
 
-                    retval(1) = get_qr_r (fact);
-                    retval(0) = fact.Q ();
-
+                    retval = ovl (fact.Q (), get_qr_r (fact));
                   }
                 else
                   {
                     Matrix Q = argq.matrix_value ();
                     Matrix R = argr.matrix_value ();
                     Matrix x = argx.matrix_value ();
 
                     QR fact (Q, R);
 
                     if (col)
                       fact.insert_col (x, j-one);
                     else
                       fact.insert_row (x.row (0), j(0)-one);
 
-                    retval(1) = get_qr_r (fact);
-                    retval(0) = fact.Q ();
-
+                    retval = ovl (fact.Q (), get_qr_r (fact));
                   }
               }
             else
               {
                 // complex case
                 if (argq.is_single_type ()
                     || argr.is_single_type ()
                     || argx.is_single_type ())
@@ -1028,34 +1013,32 @@ If @var{orient} is @qcode{\"row\"}, full
 
                     FloatComplexQR fact (Q, R);
 
                     if (col)
                       fact.insert_col (x, j-one);
                     else
                       fact.insert_row (x.row (0), j(0)-one);
 
-                    retval(1) = get_qr_r (fact);
-                    retval(0) = fact.Q ();
+                    retval = ovl (fact.Q (), get_qr_r (fact));
                   }
                 else
                   {
                     ComplexMatrix Q = argq.complex_matrix_value ();
                     ComplexMatrix R = argr.complex_matrix_value ();
                     ComplexMatrix x = argx.complex_matrix_value ();
 
                     ComplexQR fact (Q, R);
 
                     if (col)
                       fact.insert_col (x, j-one);
                     else
                       fact.insert_row (x.row (0), j(0)-one);
 
-                    retval(1) = get_qr_r (fact);
-                    retval(0) = fact.Q ();
+                    retval = ovl (fact.Q (), get_qr_r (fact));
                   }
               }
 
           }
         else
           error ("qrinsert: invalid index J");
       }
     else
@@ -1193,33 +1176,31 @@ If @var{orient} is @qcode{\"row\"}, full
 
                     FloatQR fact (Q, R);
 
                     if (col)
                       fact.delete_col (j-one);
                     else
                       fact.delete_row (j(0)-one);
 
-                    retval(1) = get_qr_r (fact);
-                    retval(0) = fact.Q ();
+                    retval = ovl (fact.Q (), get_qr_r (fact));
                   }
                 else
                   {
                     Matrix Q = argq.matrix_value ();
                     Matrix R = argr.matrix_value ();
 
                     QR fact (Q, R);
 
                     if (col)
                       fact.delete_col (j-one);
                     else
                       fact.delete_row (j(0)-one);
 
-                    retval(1) = get_qr_r (fact);
-                    retval(0) = fact.Q ();
+                    retval = ovl (fact.Q (), get_qr_r (fact));
                   }
               }
             else
               {
                 // complex case
                 if (argq.is_single_type ()
                     || argr.is_single_type ())
                   {
@@ -1230,33 +1211,31 @@ If @var{orient} is @qcode{\"row\"}, full
 
                     FloatComplexQR fact (Q, R);
 
                     if (col)
                       fact.delete_col (j-one);
                     else
                       fact.delete_row (j(0)-one);
 
-                    retval(1) = get_qr_r (fact);
-                    retval(0) = fact.Q ();
+                    retval = ovl (fact.Q (), get_qr_r (fact));
                   }
                 else
                   {
                     ComplexMatrix Q = argq.complex_matrix_value ();
                     ComplexMatrix R = argr.complex_matrix_value ();
 
                     ComplexQR fact (Q, R);
 
                     if (col)
                       fact.delete_col (j-one);
                     else
                       fact.delete_row (j(0)-one);
 
-                    retval(1) = get_qr_r (fact);
-                    retval(0) = fact.Q ();
+                    retval = ovl (fact.Q (), get_qr_r (fact));
                   }
               }
           }
         else
           error ("qrdelete: invalid index J");
       }
     else
       error ("qrdelete: dimension mismatch");
@@ -1428,56 +1407,52 @@ of @w{@var{A}(:,p)}, where @w{p} is the 
                   && argr.is_single_type ())
                 {
                   FloatMatrix Q = argq.float_matrix_value ();
                   FloatMatrix R = argr.float_matrix_value ();
 
                   FloatQR fact (Q, R);
                   fact.shift_cols (i-1, j-1);
 
-                  retval(1) = get_qr_r (fact);
-                  retval(0) = fact.Q ();
+                  retval = ovl (fact.Q (), get_qr_r (fact));
                 }
               else
                 {
                   Matrix Q = argq.matrix_value ();
                   Matrix R = argr.matrix_value ();
 
                   QR fact (Q, R);
                   fact.shift_cols (i-1, j-1);
 
-                  retval(1) = get_qr_r (fact);
-                  retval(0) = fact.Q ();
+                  retval = ovl (fact.Q (), get_qr_r (fact));
                 }
             }
           else
             {
               // complex case
               if (argq.is_single_type ()
                   && argr.is_single_type ())
                 {
                   FloatComplexMatrix Q = argq.float_complex_matrix_value ();
                   FloatComplexMatrix R = argr.float_complex_matrix_value ();
 
                   FloatComplexQR fact (Q, R);
                   fact.shift_cols (i-1, j-1);
 
-                  retval(1) = get_qr_r (fact);
-                  retval(0) = fact.Q ();
+                  retval = ovl (fact.Q (), get_qr_r (fact));
                 }
               else
                 {
                   ComplexMatrix Q = argq.complex_matrix_value ();
                   ComplexMatrix R = argr.complex_matrix_value ();
 
                   ComplexQR fact (Q, R);
                   fact.shift_cols (i-1, j-1);
 
-                  retval(1) = get_qr_r (fact);
-                  retval(0) = fact.Q ();
+                  retval = ovl (fact.Q (), get_qr_r (fact));
                 }
             }
         }
       else
         error ("qrshift: invalid index I or J");
     }
   else
     error ("qrshift: dimensions mismatch");
