# HG changeset patch
# User Max Brister <max@2bass.com>
# Date 1339787424 18000
#      Fri Jun 15 14:10:24 2012 -0500
# Node ID 609dcc297db5b0644e2c06c67851b8be908dc37c
# Parent  2871d5f8d92243711cf6b48ea8aaddd12f1a1d01
src/pt-jit.cc (jit_info::~jit_info): New function

diff --git a/src/pt-jit.cc b/src/pt-jit.cc
--- a/src/pt-jit.cc
+++ b/src/pt-jit.cc
@@ -2815,50 +2815,55 @@ void
 tree_jit::optimize (llvm::Function *fn)
 {
   module_pass_manager->run (*module);
   pass_manager->run (*fn);
 }
 
 // -------------------- jit_info --------------------
 jit_info::jit_info (tree_jit& tjit, tree& tee)
-  : engine (tjit.get_engine ())
+  : engine (tjit.get_engine ()), llvm_function (0)
 {
-  llvm::Function *fun = 0;
   try
     {
       jit_convert conv (tjit.get_module (), tee);
-      fun = conv.get_function ();
+      llvm_function = conv.get_function ();
       arguments = conv.get_arguments ();
       bounds = conv.get_bounds ();
     }
   catch (const jit_fail_exception& e)
     {
 #ifdef OCTAVE_JIT_DEBUG
       if (e.known ())
         std::cout << "jit fail: " << e.what () << std::endl;
 #endif
     }
 
-  if (! fun)
+  if (! llvm_function)
     {
       function = 0;
       return;
     }
 
-  tjit.optimize (fun);
+  tjit.optimize (llvm_function);
 
 #ifdef OCTAVE_JIT_DEBUG
   std::cout << "-------------------- optimized llvm ir --------------------\n";
   llvm::raw_os_ostream llvm_cout (std::cout);
-  fun->print (llvm_cout);
+  llvm_function->print (llvm_cout);
   std::cout << std::endl;
 #endif
 
-  function = reinterpret_cast<jited_function>(engine->getPointerToFunction (fun));
+  function = reinterpret_cast<jited_function>(engine->getPointerToFunction (llvm_function));
+}
+
+jit_info::~jit_info (void)
+{
+  if (llvm_function)
+    llvm_function->eraseFromParent ();
 }
 
 bool
 jit_info::execute (void) const
 {
   if (! function)
     return false;
 
diff --git a/src/pt-jit.h b/src/pt-jit.h
--- a/src/pt-jit.h
+++ b/src/pt-jit.h
@@ -2268,26 +2268,29 @@ public:
 };
 
 class
 jit_info
 {
 public:
   jit_info (tree_jit& tjit, tree& tee);
 
+  ~jit_info (void);
+
   bool execute (void) const;
 
   bool match (void) const;
 private:
   typedef jit_convert::type_bound type_bound;
   typedef jit_convert::type_bound_vector type_bound_vector;
   typedef void (*jited_function)(octave_base_value**);
 
   llvm::ExecutionEngine *engine;
   jited_function function;
+  llvm::Function *llvm_function;
 
   std::vector<std::pair<std::string, bool> > arguments;
   type_bound_vector bounds;
 };
 
 // some #defines we use in the header, but not the cc file
 #undef JIT_VISIT_IR_CLASSES
 #undef JIT_VISIT_IR_CONST
