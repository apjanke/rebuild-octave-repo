# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1518070116 18000
#      Thu Feb 08 01:08:36 2018 -0500
# Node ID 8b346a19108e0a82f2c68bd6b163a5875649721a
# Parent  368a023261724d459d9a3e4aad1348c730fe6068
mark objects as nested or subfunctions when parsing

* oct-parse.in.yy (base_parser::finish_function): Mark functions as
nested functions and subfunctions here.

* symscope.h, symscope.cc (symbols_scope::install_subfunction,
symbol_scope_rep::install_subfunction): Not here.
(symbol_scope_rep::install_nestfunction): New function.
(symbols_scope::install_subfunction,
symbol_scope_rep::install_subfunction): Eliminate is_nested argument.
(symbol_scope::install_nestfunction): New argument, fcn_scope.
Call symbol_scope::install_subfunction with is_nested = true instead of
symbol_scope_rep::install_nestfunction.

diff --git a/libinterp/corefcn/symscope.cc b/libinterp/corefcn/symscope.cc
--- a/libinterp/corefcn/symscope.cc
+++ b/libinterp/corefcn/symscope.cc
@@ -128,41 +128,16 @@ namespace octave
         std::string nm = nm_sr.first;
         const symbol_record& sr = nm_sr.second;
         info_map[nm] = sr.dump (m_context);
       }
 
     return octave_value (info_map);
   }
 
-  void
-  symbol_scope_rep::install_subfunction (const std::string& name,
-                                         const octave_value& fval,
-                                         bool is_nested)
-  {
-    m_subfunctions[name] = fval;
-
-    // This can be simpler once the scope object is stored in the function
-    // object...
-    octave_user_function *fcn = fval.user_function_value ();
-
-    symbol_scope fcn_scope = fcn->scope ();
-
-    fcn_scope.set_parent (this);
-
-    if (is_nested)
-      {
-        m_children.push_back (fcn_scope);
-
-        fcn->mark_as_nested_function ();
-
-        fcn_scope.mark_nested ();
-      }
-  }
-
   octave_value
   symbol_scope_rep::find_subfunction (const std::string& name) const
   {
     subfunctions_const_iterator p = m_subfunctions.find (name);
 
     if (p != m_subfunctions.end ())
       return p->second;
 
diff --git a/libinterp/corefcn/symscope.h b/libinterp/corefcn/symscope.h
--- a/libinterp/corefcn/symscope.h
+++ b/libinterp/corefcn/symscope.h
@@ -443,23 +443,28 @@ namespace octave
     bool is_global (const std::string& name) const
     {
       table_const_iterator p = m_symbols.find (name);
 
       return p != m_symbols.end () && p->second.is_global ();
     }
 
     void install_subfunction (const std::string& name,
-                              const octave_value& fval,
-                              bool is_nested = false);
+                              const octave_value& fval)
+    {
+      m_subfunctions[name] = fval;
+    }
 
     void install_nestfunction (const std::string& name,
-                               const octave_value& fval)
+                               const octave_value& fval,
+                               const symbol_scope& fcn_scope)
     {
-      install_subfunction (name, fval, true);
+      m_subfunctions[name] = fval;
+
+      m_children.push_back (fcn_scope);
     }
 
     octave_value find_subfunction (const std::string& name) const;
 
     void lock_subfunctions (void)
     {
       for (auto& nm_sf : m_subfunctions)
         nm_sf.second.lock ();
@@ -797,28 +802,28 @@ namespace octave
     }
 
     bool is_global (const std::string& name) const
     {
       return m_rep ? m_rep->is_global (name) : false;
     }
 
     void install_subfunction (const std::string& name,
-                              const octave_value& fval,
-                              bool is_nested = false)
+                              const octave_value& fval)
     {
       if (m_rep)
-        m_rep->install_subfunction (name, fval, is_nested);
+        m_rep->install_subfunction (name, fval);
     }
 
     void install_nestfunction (const std::string& name,
-                               const octave_value& fval)
+                               const octave_value& fval,
+                               const symbol_scope& fcn_scope)
     {
       if (m_rep)
-        m_rep->install_nestfunction (name, fval);
+        m_rep->install_nestfunction (name, fval, fcn_scope);
     }
 
     octave_value find_subfunction (const std::string& name) const
     {
       return m_rep ? m_rep->find_subfunction (name) : octave_value ();
     }
 
     void lock_subfunctions (void)
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -3494,27 +3494,30 @@ namespace octave
         if (m_curr_fcn_depth > 1 || m_parsing_subfunctions)
           {
             fcn->stash_fcn_location (l, c);
 
             octave_value ov_fcn (fcn);
 
             if (m_endfunction_found && m_function_scopes.size () > 1)
               {
+                fcn->mark_as_nested_function ();
+                fcn_scope.mark_nested ();
+
                 symbol_scope pscope = m_function_scopes.parent_scope ();
-
-                pscope.install_nestfunction (nm, ov_fcn);
+                fcn_scope.set_parent (pscope);
+                pscope.install_nestfunction (nm, ov_fcn, fcn_scope);
               }
             else
               {
                 fcn->mark_as_subfunction ();
                 m_subfunction_names.push_back (nm);
-
+                fcn_scope.set_parent (m_primary_fcn_scope);
                 m_primary_fcn_scope.install_subfunction (nm, ov_fcn);
-               }
+              }
           }
 
         if (m_curr_fcn_depth == 1)
           fcn_scope.update_nest ();
 
         if (! m_lexer.reading_fcn_file && m_curr_fcn_depth == 1)
           {
             // We are either reading a script file or defining a function
