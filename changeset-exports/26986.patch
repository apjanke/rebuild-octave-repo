# HG changeset patch
# User Rik <rik@octave.org>
# Date 1553710537 25200
#      Wed Mar 27 11:15:37 2019 -0700
# Branch stable
# Node ID 16d4e3d142133e8a723c81513dac25d5c1fdeda0
# Parent  232102b1e920c2b160592233f204ab3d34010f32
dec2base.m: Correctly handle zero matrix input (bug #56005).

* dec2base.m: Use "columns" rather than "length" to determine whether there is
an extra column of zeros in retval.  Add BIST test for bug #56005.

diff --git a/scripts/strings/dec2base.m b/scripts/strings/dec2base.m
--- a/scripts/strings/dec2base.m
+++ b/scripts/strings/dec2base.m
@@ -107,17 +107,17 @@ function retval = dec2base (d, base, len
   retval = reshape (symbols(digits+1), size (digits));
 
   ## Check if the first element is the zero symbol.  It seems possible
   ## that LEN is provided, and is less than the computed MAX_LEN and
   ## MAX_LEN is computed to be one larger than necessary, so we would
   ## have a leading zero to remove.  But if LEN >= MAX_LEN, we should
   ## not remove any leading zeros.
   if ((nargin == 2 || (nargin == 3 && max_len > len))
-      && length (retval) != 1 && ! any (retval(:,1) != symbols(1)))
+      && columns (retval) != 1 && ! any (retval(:,1) != symbols(1)))
     retval = retval(:,2:end);
   endif
 
 endfunction
 
 
 %!test
 %! s0 = "";
@@ -151,16 +151,18 @@ endfunction
 %!assert (dec2base (uint64 (2)^63-1, 16), "7FFFFFFFFFFFFFFF")
 %!assert (dec2base ([1, 2; 3, 4], 2, 3), ["001"; "011"; "010"; "100"])
 %!assert (dec2base ({1, 2; 3, 4}, 2, 3), ["001"; "011"; "010"; "100"])
 
 %!test
 %! a = 0:3;
 %! assert (dec2base (! a, 2, 1), ["1"; "0"; "0"; "0"]);
 
+%!assert <*56005> (dec2base ([0, 0], 16), ["0"; "0"])
+
 ## Test input validation
 %!error dec2base ()
 %!error dec2base (1)
 %!error dec2base (1, 2, 3, 4)
 %!error dec2base ("A")
 %!error dec2base (2i)
 %!error dec2base (-1)
 %!error dec2base (1.1)
