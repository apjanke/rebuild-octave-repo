# HG changeset patch
# User Marco Caliari <marco.caliari@univr.it>
# Date 1533107471 -7200
#      Wed Aug 01 09:11:11 2018 +0200
# Node ID feaa2169cb36024c0e9e7deb5c4b5bfd71d511d3
# Parent  fc410b574693f935733c077bc6104b1b6504a4ec
Avoid shifting in eigs-base.cc when the shift is zero (bug #54399).

* eigs-base.cc (LuAminusSigmaB): do not shift by sigma * B when sigma is zero.

diff --git a/liboctave/numeric/eigs-base.cc b/liboctave/numeric/eigs-base.cc
--- a/liboctave/numeric/eigs-base.cc
+++ b/liboctave/numeric/eigs-base.cc
@@ -268,55 +268,58 @@ LuAminusSigmaB (const SparseMatrix& m, c
 {
   bool have_b = ! b.isempty ();
   octave_idx_type n = m.rows ();
 
   // Calculate LU decomposition of 'M = A - sigma * B'
   // P * (R \ M) * Q = L * U
   SparseMatrix AminusSigmaB (m);
 
-  if (have_b)
+  if (sigma != 0.0)
     {
-      if (cholB)
+      if (have_b)
         {
-          if (permB.numel ())
+          if (cholB)
             {
-              SparseMatrix tmp (n,n,n);
-              for (octave_idx_type i = 0; i < n; i++)
+              if (permB.numel ())
                 {
-                  tmp.xcidx (i) = i;
-                  tmp.xridx (i) =
-                    static_cast<octave_idx_type> (permB(i));
-                  tmp.xdata (i) = 1;
+                  SparseMatrix tmp (n,n,n);
+                  for (octave_idx_type i = 0; i < n; i++)
+                    {
+                      tmp.xcidx (i) = i;
+                      tmp.xridx (i) =
+                        static_cast<octave_idx_type> (permB(i));
+                      tmp.xdata (i) = 1;
+                    }
+                  tmp.xcidx (n) = n;
+
+                  AminusSigmaB -= sigma * tmp *
+                    b.transpose () * b * tmp.transpose ();
                 }
-              tmp.xcidx (n) = n;
-
-              AminusSigmaB -= sigma * tmp *
-                              b.transpose () * b * tmp.transpose ();
+              else
+                AminusSigmaB -= sigma * b.transpose () * b;
             }
           else
-            AminusSigmaB -= sigma * b.transpose () * b;
+            AminusSigmaB -= sigma * b;
         }
       else
-        AminusSigmaB -= sigma * b;
-    }
-  else
-    {
-      SparseMatrix sigmat (n, n, n);
-
-      // Create sigma * speye (n,n)
-      sigmat.xcidx (0) = 0;
-      for (octave_idx_type i = 0; i < n; i++)
         {
-          sigmat.xdata (i) = sigma;
-          sigmat.xridx (i) = i;
-          sigmat.xcidx (i+1) = i + 1;
+          SparseMatrix sigmat (n, n, n);
+
+          // Create sigma * speye (n,n)
+          sigmat.xcidx (0) = 0;
+          for (octave_idx_type i = 0; i < n; i++)
+            {
+              sigmat.xdata (i) = sigma;
+              sigmat.xridx (i) = i;
+              sigmat.xcidx (i+1) = i + 1;
+            }
+
+          AminusSigmaB -= sigmat;
         }
-
-      AminusSigmaB -= sigmat;
     }
 
   octave::math::sparse_lu<SparseMatrix> fact (AminusSigmaB, Matrix (), true);
 
   L = fact.L ();
   U = fact.U ();
   SparseMatrix R = fact.R ();
   for (octave_idx_type i = 0; i < n; i++)
@@ -365,45 +368,48 @@ LuAminusSigmaB (const Matrix& m, const M
 {
   bool have_b = ! b.isempty ();
   octave_idx_type n = m.cols ();
 
   // Calculate LU decomposition of 'M = A - sigma * B'
   // P * M = L * U
   Matrix AminusSigmaB (m);
 
-  if (have_b)
+  if (sigma != 0.0)
     {
-      if (cholB)
+      if (have_b)
         {
-          Matrix tmp = sigma * b.transpose () * b;
-          const double *pB = permB.fortran_vec ();
-          double *p = AminusSigmaB.fortran_vec ();
-
-          if (permB.numel ())
+          if (cholB)
             {
-              for (octave_idx_type j = 0;
-                   j < b.cols (); j++)
-                for (octave_idx_type i = 0;
-                     i < b.rows (); i++)
-                  *p++ -= tmp.xelem (static_cast<octave_idx_type> (pB[i]),
-                                     static_cast<octave_idx_type> (pB[j]));
+              Matrix tmp = sigma * b.transpose () * b;
+              const double *pB = permB.fortran_vec ();
+              double *p = AminusSigmaB.fortran_vec ();
+
+              if (permB.numel ())
+                {
+                  for (octave_idx_type j = 0;
+                       j < b.cols (); j++)
+                    for (octave_idx_type i = 0;
+                         i < b.rows (); i++)
+                      *p++ -= tmp.xelem (static_cast<octave_idx_type> (pB[i]),
+                                         static_cast<octave_idx_type> (pB[j]));
+                }
+              else
+                AminusSigmaB -= tmp;
             }
           else
-            AminusSigmaB -= tmp;
+            AminusSigmaB -= sigma * b;
         }
       else
-        AminusSigmaB -= sigma * b;
-    }
-  else
-    {
-      double *p = AminusSigmaB.fortran_vec ();
-
-      for (octave_idx_type i = 0; i < n; i++)
-        p[i*(n+1)] -= sigma;
+        {
+          double *p = AminusSigmaB.fortran_vec ();
+
+          for (octave_idx_type i = 0; i < n; i++)
+            p[i*(n+1)] -= sigma;
+        }
     }
 
   octave::math::lu<Matrix> fact (AminusSigmaB);
 
   L = fact. L ();
   U = fact.U ();
   ColumnVector P2 = fact.P_vec();
 
@@ -444,55 +450,58 @@ LuAminusSigmaB (const SparseComplexMatri
 {
   bool have_b = ! b.isempty ();
   octave_idx_type n = m.rows ();
 
   // Calculate LU decomposition of 'M = A - sigma * B'
   // P * (R \ M) * Q = L * U
   SparseComplexMatrix AminusSigmaB (m);
 
-  if (have_b)
+  if (std::real (sigma) != 0.0 || std::imag (sigma) != 0.0)
     {
-      if (cholB)
+      if (have_b)
         {
-          if (permB.numel ())
+          if (cholB)
             {
-              SparseMatrix tmp (n,n,n);
-              for (octave_idx_type i = 0; i < n; i++)
+              if (permB.numel ())
                 {
-                  tmp.xcidx (i) = i;
-                  tmp.xridx (i) =
-                    static_cast<octave_idx_type> (permB(i));
-                  tmp.xdata (i) = 1;
+                  SparseMatrix tmp (n,n,n);
+                  for (octave_idx_type i = 0; i < n; i++)
+                    {
+                      tmp.xcidx (i) = i;
+                      tmp.xridx (i) =
+                        static_cast<octave_idx_type> (permB(i));
+                      tmp.xdata (i) = 1;
+                    }
+                  tmp.xcidx (n) = n;
+
+                  AminusSigmaB -= tmp * b.hermitian () * b *
+                    tmp.transpose () * sigma;
                 }
-              tmp.xcidx (n) = n;
-
-              AminusSigmaB -= tmp * b.hermitian () * b *
-                              tmp.transpose () * sigma;
+              else
+                AminusSigmaB -= sigma * b.hermitian () * b;
             }
           else
-            AminusSigmaB -= sigma * b.hermitian () * b;
+            AminusSigmaB -= sigma * b;
         }
       else
-        AminusSigmaB -= sigma * b;
-    }
-  else
-    {
-      SparseComplexMatrix sigmat (n, n, n);
-
-      // Create sigma * speye (n,n)
-      sigmat.xcidx (0) = 0;
-      for (octave_idx_type i = 0; i < n; i++)
         {
-          sigmat.xdata (i) = sigma;
-          sigmat.xridx (i) = i;
-          sigmat.xcidx (i+1) = i + 1;
+          SparseComplexMatrix sigmat (n, n, n);
+
+          // Create sigma * speye (n,n)
+          sigmat.xcidx (0) = 0;
+          for (octave_idx_type i = 0; i < n; i++)
+            {
+              sigmat.xdata (i) = sigma;
+              sigmat.xridx (i) = i;
+              sigmat.xcidx (i+1) = i + 1;
+            }
+
+          AminusSigmaB -= sigmat;
         }
-
-      AminusSigmaB -= sigmat;
     }
 
   octave::math::sparse_lu<SparseComplexMatrix> fact (AminusSigmaB, Matrix(),
                                                      true);
 
   L = fact.L ();
   U = fact.U ();
   SparseMatrix R = fact.R ();
@@ -542,45 +551,48 @@ LuAminusSigmaB (const ComplexMatrix& m, 
 {
   bool have_b = ! b.isempty ();
   octave_idx_type n = m.cols ();
 
   // Calculate LU decomposition of 'M = A - sigma * B'
   // P * M = L * U
   ComplexMatrix AminusSigmaB (m);
 
-  if (have_b)
+  if (std::real (sigma) != 0.0 || std::imag (sigma) != 0.0)
     {
-      if (cholB)
+      if (have_b)
         {
-          ComplexMatrix tmp = sigma * b.hermitian () * b;
-          const double *pB = permB.fortran_vec ();
-          Complex *p = AminusSigmaB.fortran_vec ();
-
-          if (permB.numel ())
+          if (cholB)
             {
-              for (octave_idx_type j = 0;
-                   j < b.cols (); j++)
-                for (octave_idx_type i = 0;
-                     i < b.rows (); i++)
-                  *p++ -= tmp.xelem (static_cast<octave_idx_type> (pB[i]),
-                                     static_cast<octave_idx_type> (pB[j]));
+              ComplexMatrix tmp = sigma * b.hermitian () * b;
+              const double *pB = permB.fortran_vec ();
+              Complex *p = AminusSigmaB.fortran_vec ();
+
+              if (permB.numel ())
+                {
+                  for (octave_idx_type j = 0;
+                       j < b.cols (); j++)
+                    for (octave_idx_type i = 0;
+                         i < b.rows (); i++)
+                      *p++ -= tmp.xelem (static_cast<octave_idx_type> (pB[i]),
+                                         static_cast<octave_idx_type> (pB[j]));
+                }
+              else
+                AminusSigmaB -= tmp;
             }
           else
-            AminusSigmaB -= tmp;
+            AminusSigmaB -= sigma * b;
         }
       else
-        AminusSigmaB -= sigma * b;
-    }
-  else
-    {
-      Complex *p = AminusSigmaB.fortran_vec ();
-
-      for (octave_idx_type i = 0; i < n; i++)
-        p[i*(n+1)] -= sigma;
+        {
+          Complex *p = AminusSigmaB.fortran_vec ();
+
+          for (octave_idx_type i = 0; i < n; i++)
+            p[i*(n+1)] -= sigma;
+        }
     }
 
   octave::math::lu<ComplexMatrix> fact (AminusSigmaB);
 
   L = fact.L ();
   U = fact.U ();
   ColumnVector P2 = fact.P_vec ();
 
