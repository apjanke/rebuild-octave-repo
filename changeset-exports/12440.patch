# HG changeset patch
# User Konstantinos Poulios <logari81@googlemail.com>
# Date 1297606316 -3600
#      Sun Feb 13 15:11:56 2011 +0100
# Node ID 2ed62b9f949e88fccad10a0161c54525572c3177
# Parent  ab4c6bbff14ae39db182df9135a57d0ee34b4867
synchronization of axes position and outerposition

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2011-02-13  Konstantinos Poulios  <logari81@gmail.com>
+
+	* plot/legend.m: Ignore outerposition.
+
 2011-02-10  Ben Abbott <bpabbott@mac.com>
 
 	* plot/legend.m, plot/plotyy.m, plot/sombrero.m, plot/shading.m, 
 	plot/text.m: Modify demo scripts to allow conventient conversion
 	to Matlab compatible syntax.
 
 2011-02-08  Ben Abbott  <bpabbott@mac.com>
 
diff --git a/scripts/plot/legend.m b/scripts/plot/legend.m
--- a/scripts/plot/legend.m
+++ b/scripts/plot/legend.m
@@ -115,17 +115,17 @@ function [hlegend2, hobjects2, hplot2, t
     fig = get (0, "currentfigure");
     if (isempty (fig))
       fig = gcf ();
     endif
     ca = gca ();
   endif
 
   if (strcmp (get (ca, "tag"), "plotyy"))
-    plty = get(ca (strcmp (get (ca, "tag"), "plotyy")), "userdata");
+    plty = get(ca, "userdata");
     if (isscalar (plty))
       ca = [ca, plty];
     else
       ca = [ca, plty{:}];
     endif
   endif
 
   if (nargin > 0 && all (ishandle (varargin{1})))
@@ -487,17 +487,17 @@ function [hlegend2, hobjects2, hplot2, t
       unwind_protect
         ud = ancestor(hplots, "axes");
         if (!isscalar(ud))
           ud = unique ([ud{:}]);
         endif
         if (isempty (hlegend))
           addprops = true;
           hlegend = axes ("tag", "legend", "userdata", struct ("handle", ud),
-                          "box", box, "outerposition", [0, 0, 0, 0],
+                          "box", box,
                           "xtick", [], "ytick", [], "xticklabel", "",
                           "yticklabel", "", "zticklabel", "",
                           "xlim", [0, 1], "ylim", [0, 1], "visible", "off",
                           "activepositionproperty", "position");
         else
           addprops = false;
           axes (hlegend);
           delete (get (hlegend, "children"));
@@ -577,109 +577,93 @@ function [hlegend2, hobjects2, hplot2, t
         switch (position)
           case "north"
             if (outside)
               lpos = [ca_pos(1) + (ca_pos(3) - lpos(3)) / 2, ...
                       ca_outpos(2) + ca_outpos(4) - lpos(4) - ypad, lpos(3), ...
                       lpos(4)];
 
               new_pos = [ca_pos(1), ca_pos(2), ca_pos(3), ca_pos(4) - lpos(4)];
-              new_outpos = [ca_outpos(1), ca_outpos(2), ca_outpos(3), ...
-                            ca_outpos(4) - lpos(4)];
             else
               lpos = [ca_pos(1) + (ca_pos(3) - lpos(3)) / 2, ...
                       ca_pos(2) + ca_pos(4) - lpos(4) - ypad, lpos(3), lpos(4)];
             endif
           case "south"
             if (outside)
               lpos = [ca_pos(1) + (ca_pos(3) - lpos(3)) / 2, ...
                       ca_outpos(2) + ypad, lpos(3), lpos(4)];
               new_pos = [ca_pos(1), ca_pos(2) + lpos(4), ca_pos(3), ...
                          ca_pos(4) - lpos(4)];
-              new_outpos = [ca_outpos(1), ca_outpos(2) + lpos(4), ...
-                            ca_outpos(3), ca_outpos(4) - lpos(4)];
             else
               lpos = [ca_pos(1) + (ca_pos(3) - lpos(3)) / 2, ...
                       ca_pos(2) + ypad, lpos(3), lpos(4)];
             endif
           case "east"
             if (outside)
               lpos = [ca_outpos(1) + ca_outpos(3) - lpos(3) - ypad, ...
                       ca_pos(2) + (ca_pos(4) - lpos(4)) / 2, lpos(3), lpos(4)];
               new_pos = [ca_pos(1), ca_pos(2), ca_pos(3) - lpos(3), ca_pos(4)];
-              new_outpos = [ca_outpos(1), ca_outpos(2), ...
-                            ca_outpos(3) - lpos(3), ca_outpos(4)];
             else
               lpos = [ca_pos(1) + ca_pos(3) - lpos(3) - ypad, ...
                       ca_pos(2) + (ca_pos(4) - lpos(4)) / 2, lpos(3), lpos(4)];
             endif
           case "west"
             if (outside)
               lpos = [ca_outpos(1) + ypad, ...
                       ca_pos(2) + (ca_pos(4) - lpos(4)) / 2, ...
                       lpos(3), lpos(4)];
               new_pos = [ca_pos(1) + lpos(3), ca_pos(2), ...
                          ca_pos(3) - lpos(3), ca_pos(4)];
-              new_outpos = [ca_outpos(1) + lpos(3), ca_outpos(2), ...
-                            ca_outpos(3) - lpos(3), ca_outpos(4)];
             else
               lpos = [ca_pos(1) +  ypad, ...
                       ca_pos(2) + (ca_pos(4) - lpos(4)) / 2, lpos(3), lpos(4)];
             endif
           case "northeast"
             if (outside)
               lpos = [ca_outpos(1) + ca_outpos(3) - lpos(3) - ypad, ...
                       ca_pos(2) + ca_pos(4) - lpos(4), lpos(3), lpos(4)];
               new_pos = [ca_pos(1), ca_pos(2), ca_pos(3) - lpos(3), ca_pos(4)];
-              new_outpos = [ca_outpos(1), ca_outpos(2), ...
-                            ca_outpos(3) - lpos(3), ca_outpos(4)];
             else
               lpos = [ca_pos(1) + ca_pos(3) - lpos(3) - ypad, ...
                       ca_pos(2) + ca_pos(4) - lpos(4) - ypad, lpos(3), lpos(4)];
             endif
           case "northwest"
             if (outside)
               lpos = [ca_outpos(1) + ypad , ca_pos(2) + ca_pos(4) - lpos(4), ...
                       lpos(3), lpos(4)];
               new_pos = [ca_pos(1) + lpos(3), ca_pos(2), ...
                          ca_pos(3) - lpos(3), ca_pos(4)];
-              new_outpos = [ca_outpos(1) + lpos(3), ca_outpos(2), ...
-                            ca_outpos(3) - lpos(3), ca_outpos(4)];
             else
               lpos = [ca_pos(1) + ypad, ...
                       ca_pos(2) + ca_pos(4) - lpos(4) - ypad, lpos(3), lpos(4)];
             endif
           case "southeast"
             if (outside)
               lpos = [ca_outpos(1) + ca_outpos(3) - lpos(3) - ypad, ...
                       ca_pos(2), lpos(3), lpos(4)];
               new_pos = [ca_pos(1), ca_pos(2), ...
                          ca_pos(3) - lpos(3), ca_pos(4)];
-              new_outpos = [ca_outpos(1), ca_outpos(2), ...
-                            ca_outpos(3) - lpos(3), ca_outpos(4)];
             else
               lpos = [ca_pos(1) + ca_pos(3) - lpos(3) - ypad, ...
                       ca_pos(2) + ypad, lpos(3), lpos(4)];
             endif
           case "southwest"
             if (outside)
               lpos = [ca_outpos(1) + ypad, ca_pos(2), lpos(3), lpos(4)];
               new_pos = [ca_pos(1) + lpos(3), ca_pos(2), ...
                          ca_pos(3) - lpos(3), ca_pos(4)];
-              new_outpos = [ca_outpos(1) + lpos(3), ca_outpos(2), ...
-                            ca_outpos(3) - lpos(3), ca_outpos(4)];
             else
               lpos = [ca_pos(1) + ypad, ca_pos(2) + ypad, lpos(3), lpos(4)];
             endif
         endswitch
 
         units = get (hlegend, "units");
         unwind_protect
           set (hlegend, "units", "points");
-          set (hlegend, "position", lpos, "outerposition", lpos);
+          set (hlegend, "position", lpos);
         unwind_protect_cleanup
           set (hlegend, "units", units);
         end_unwind_protect
 
         ## Now write the line segments and place the text objects correctly
         xk = 0;
         yk = 0;
         for k = 1 : numel (hplots)
@@ -745,27 +729,26 @@ function [hlegend2, hobjects2, hplot2, t
         ## legend is "outside" the plot and create listener to
         ## resize axis to original size if the legend is deleted,
         ## hidden or shown
         if (outside)
           for i = 1 : numel (ca)
             units = get (ca(i), "units");
             unwind_protect
               set (ca(i), "units", "points");
-              set (ca (i), "position", new_pos, "outerposition", new_outpos);
+              set (ca (i), "position", new_pos);
             unwind_protect_cleanup
               set (ca(i), "units", units);
             end_unwind_protect
           endfor
 
           set (hlegend, "deletefcn", {@deletelegend2, ca, ...
                                       ca_pos, ca_outpos, t1, hplots});
           addlistener (hlegend, "visible", {@hideshowlegend, ca, ...
-                                            ca_pos, new_pos, ...
-                                            ca_outpos, new_outpos});
+                                            ca_pos, new_pos});
         else
           set (hlegend, "deletefcn", {@deletelegend2, ca, [], [], t1, hplots});
         endif
 
         if (addprops)
           addproperty ("edgecolor", hlegend, "color", [0, 0, 0]);
           addproperty ("textcolor", hlegend, "color", [0, 0, 0]);
           addproperty ("location", hlegend, "radio", "north|south|east|west|{northeast}|southeast|northwest|southwest|northoutside|southoutside|eastoutside|westoutside|northeastoutside|southeastoutside|northwestoutside|southwestoutside");
@@ -836,17 +819,17 @@ function updatelegendtext (h, d)
       set (kids (k), "interpreter", in, "color", tc);
       if (--k == 0)
         break;
       endif
     endif
   endwhile
 endfunction
 
-function hideshowlegend (h, d, ca, pos1, pos2, outpos1, outpos2)
+function hideshowlegend (h, d, ca, pos1, pos2)
   isvisible = strcmp (get (h, "visible"), "off");
   if (! isvisible)
     kids = get (h, "children");
     for i = 1 : numel (kids)
       if (! strcmp (get (kids(i), "visible"), "off"))
         isvisible = true;
         break;
       endif
@@ -856,19 +839,19 @@ function hideshowlegend (h, d, ca, pos1,
   for i = 1 : numel (ca)
     if (ishandle (ca(i)) && strcmp (get (ca(i), "type"), "axes")
         && (isempty (gcbf()) || strcmp (get (gcbf(), "beingdeleted"),"off"))
         && strcmp (get (ca(i), "beingdeleted"), "off"))
       units = get (ca(i), "units");
       unwind_protect
         set (ca(i), "units", "points");
         if (isvisible)
-          set (ca(i), "position", pos2, "outerposition", outpos2);
+          set (ca(i), "position", pos2);
         else
-          set (ca(i), "position", pos1, "outerposition", outpos1);
+          set (ca(i), "position", pos1);
         endif
       unwind_protect_cleanup
         set (ca(i), "units", units);
       end_unwind_protect
     endif
   endfor
 endfunction
 
@@ -884,17 +867,17 @@ function deletelegend2 (h, d, ca, pos, o
   for i = 1 : numel (ca)
     if (ishandle (ca(i)) && strcmp (get (ca(i), "type"), "axes")
         && (isempty (gcbf()) || strcmp (get (gcbf(), "beingdeleted"),"off"))
         && strcmp (get (ca(i), "beingdeleted"), "off"))
       if (!isempty (pos) && !isempty(outpos))
         units = get (ca(i), "units");
         unwind_protect
           set (ca(i), "units", "points");
-          set (ca(i), "position", pos, "outerposition", outpos, "deletefcn", "");
+          set (ca(i), "position", pos, "deletefcn", "");
         unwind_protect_cleanup
           set (ca(i), "units", units);
         end_unwind_protect
       endif
     endif
   endfor
   set (t1, "deletefcn", "");
   delete (t1);
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,35 @@
+2011-02-13  Konstantinos Poulios  <logari81@googlemail.com>
+
+	* graphics.h.in (axes::properties::get_extent,
+	axes::properties::calc_tightbox): New functions prototypes.
+	(axes::properties::update_view): Hook sync_positions.
+	(axes::properties::update_outerposition,
+	axes::properties::update_position): Set activepositionproperty
+	appropriately.
+	(text::properties::update_string): Call	update_text_extent after
+	request_autopos.
+	* graphics.cc (axes::properties::sync_positions): Enable
+	synchronization of position and outer position. Take label and
+	title extents in the calculation of outerposition into account.
+	Do iterative calculation of position when activepositionproperty
+	is set to outerposition.
+	(axes::properties::update_title_position): Use new function
+	get_extent.
+	(axes::properties::update_autopos): Handle new tag "sync".
+	(axes::properties::get_extent): New function calculating the
+	tight box which contains all axes labels and axes title.
+	(axes::properties::calc_tightbox): New function calculating axes
+	tight box.
+	(axes::properties::update_units): Don't call any hooks and listeners
+	for position, outerposition and tightset.
+	(text::properties::update_text_extent): Request axes positions
+	synchronization when axes labels or title extents change.
+
 2011-02-11  John W. Eaton  <jwe@octave.org>
 
 	* load-path.cc (strip_trailing_separators): Declare K as size_t
 	rather than octave_idx_type.
 
 2011-02-10  John W. Eaton  <jwe@octave.org>
 
 	* DLD-FUNCTIONS/regexp.cc (octregexp_list): Avoid deprecated
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -3224,48 +3224,119 @@ axes::properties::init (void)
   xset (title.handle_value (), "autopos_tag", "title");
 
   adopt (xlabel.handle_value ());
   adopt (ylabel.handle_value ());
   adopt (zlabel.handle_value ());
   adopt (title.handle_value ());
 }
 
+Matrix
+axes::properties::calc_tightbox (const Matrix& init_pos)
+{
+  Matrix pos = init_pos;
+  graphics_object obj = gh_manager::get_object (get_parent ());
+  Matrix parent_bb = obj.get_properties ().get_boundingbox (true);
+  Matrix ext = get_extent (true);
+  ext(1) = parent_bb(3) - ext(1) - ext(3);
+  ext(0)++;
+  ext(1)++;
+  ext = convert_position (ext, "pixels", get_units (),
+                          parent_bb.extract_n (0, 2, 1, 2));
+  if (ext(0) < pos(0))
+    {
+      pos(2) += pos(0)-ext(0);
+      pos(0) = ext(0);
+    }
+  if (ext(0)+ext(2) > pos(0)+pos(2))
+    pos(2) = ext(0)+ext(2)-pos(0);
+
+  if (ext(1) < pos(1))
+    {
+      pos(3) += pos(1)-ext(1);
+      pos(1) = ext(1);
+    }
+  if (ext(1)+ext(3) > pos(1)+pos(3))
+    pos(3) = ext(1)+ext(3)-pos(1);
+  return pos;
+}
+
 void
 axes::properties::sync_positions (void)
 {
-#if 0
-  // FIXME -- this should take font metrics into consideration,
-  // and also the fact that the colorbox leaves the outerposition
-  // alone but alters the position. For now just don't adjust the
-  // positions relative to each other.
+  Matrix defpos = default_axes_position ();
 
   if (activepositionproperty.is ("outerposition"))
     {
       Matrix outpos = outerposition.get ().matrix_value ();
-      Matrix defpos = default_axes_position ();
       Matrix pos(outpos);
       pos(0) = outpos(0) + defpos(0) * outpos(2);
       pos(1) = outpos(1) + defpos(1) * outpos(3);
       pos(2) = outpos(2) * defpos(2);
       pos(3) = outpos(3) * defpos(3);
+
       position = pos;
+      update_transform ();
+      Matrix tightpos = calc_tightbox (pos);
+
+      double thrshldx = 0.005*outpos(2);
+      double thrshldy = 0.005*outpos(3);
+      for (int i = 0; i < 10; i++)
+        {
+          double dt;
+          bool modified = false;
+          dt = outpos(0)+outpos(2)-tightpos(0)-tightpos(2);
+          if (dt < -thrshldx)
+            {
+              pos(2) += dt;
+              modified = true;
+            }
+          dt = outpos(1)+outpos(3)-tightpos(1)-tightpos(3);
+          if (dt < -thrshldy)
+            {
+              pos(3) += dt;
+              modified = true;
+            }
+          dt = outpos(0)-tightpos(0);
+          if (dt > thrshldx)
+            {
+              pos(0) += dt;
+              pos(2) -= dt;
+              modified = true;
+            }
+          dt = outpos(1)-tightpos(1);
+          if (dt > thrshldy)
+            {
+              pos(1) += dt;
+              pos(3) -= dt;
+              modified = true;
+            }
+
+          if (modified)
+            {
+              position = pos;
+              update_transform ();
+              tightpos = calc_tightbox (pos);
+            }
+          else
+            break;
+        }
     }
   else
     {
+      update_transform ();
+
       Matrix pos = position.get ().matrix_value ();
-      pos(0) -= pos(2)*0.05;
-      pos(1) -= pos(3)*0.05;
-      pos(2) *= 1.1;
-      pos(3) *= 1.1;
-      outerposition = pos;
-    }
-#endif
-
-  update_transform ();
+      pos(0) -= pos(2)*defpos(0)/defpos(2);
+      pos(1) -= pos(3)*defpos(1)/defpos(3);
+      pos(2) /= defpos(2);
+      pos(3) /= defpos(3);
+
+      outerposition = calc_tightbox (pos);
+    }
 }
 
 void
 axes::properties::set_text_child (handle_property& hp,
                                   const std::string& who,
                                   const octave_value& v)
 {
   graphics_handle val;
@@ -4403,37 +4474,17 @@ axes::properties::update_title_position 
     {
       title_props.set_autopos_tag ("none");
 
       if (title_props.positionmode_is ("auto"))
         {
           graphics_xform xform = get_transform ();
 
           // FIXME: bbox should be stored in axes::properties
-          ColumnVector bbox(4);
-          bbox(0) = octave_Inf;
-          bbox(1) = octave_Inf;
-          bbox(2) = -octave_Inf;
-          bbox(3) = -octave_Inf;
-          for (int i = 0; i <= 1; i++)
-            for (int j = 0; j <= 1; j++)
-              for (int k = 0; k <= 1; k++)
-                {
-                  ColumnVector p = xform.transform (i ? xPlaneN : xPlane,
-                                                    j ? yPlaneN : yPlane,
-                                                    k ? zPlaneN : zPlane, false);
-                  bbox(0) = std::min (bbox(0), p(0));
-                  bbox(1) = std::min (bbox(1), p(1));
-                  bbox(2) = std::max (bbox(2), p(0));
-                  bbox(3) = std::max (bbox(3), p(1));
-                }
-
-          bbox(2) = bbox(2)-bbox(0);
-          bbox(3) = bbox(3)-bbox(1);
-
+          Matrix bbox = get_extent (false);
           ColumnVector p = xform.untransform (bbox(0)+bbox(2)/2, (bbox(1)-10),
                                               (x_zlim(0)+x_zlim(1))/2, true);
 
           title_props.set_position (p.extract_n(0, 3).transpose ());
           title_props.set_positionmode ("auto");
         }
 
       title_props.set_autopos_tag ("title");
@@ -4446,16 +4497,18 @@ axes::properties::update_autopos (const 
   if (elem_type == "xlabel")
     update_xlabel_position ();
   else if (elem_type == "ylabel")
     update_ylabel_position ();
   else if (elem_type == "zlabel")
     update_zlabel_position ();
   else if (elem_type == "title")
     update_title_position ();
+  else if (elem_type == "sync")
+    sync_positions ();
 }
 
 static void
 normalized_aspectratios (Matrix& aspectratios, const Matrix& scalefactors,
                          double xlength, double ylength, double zlength)
 {
       double xval = xlength/scalefactors(0);
       double yval = ylength/scalefactors(1);
@@ -4610,27 +4663,86 @@ Matrix
 axes::properties::get_boundingbox (bool internal) const
 {
   graphics_object obj = gh_manager::get_object (get_parent ());
   Matrix parent_bb = obj.get_properties ().get_boundingbox (true);
   Matrix pos = (internal ?
                   get_position ().matrix_value ()
                   : get_outerposition ().matrix_value ());
 
-
   pos = convert_position (pos, get_units (), "pixels",
                           parent_bb.extract_n (0, 2, 1, 2));
 
   pos(0)--;
   pos(1)--;
   pos(1) = parent_bb(3) - pos(1) - pos(3);
 
   return pos;
 }
 
+Matrix
+axes::properties::get_extent (bool with_text) const
+{
+  graphics_xform xform = get_transform ();
+
+  Matrix ext (1, 4, 0.0);
+  ext(0) = octave_Inf;
+  ext(1) = octave_Inf;
+  ext(2) = -octave_Inf;
+  ext(3) = -octave_Inf;
+  for (int i = 0; i <= 1; i++)
+    for (int j = 0; j <= 1; j++)
+      for (int k = 0; k <= 1; k++)
+        {
+          ColumnVector p = xform.transform (i ? xPlaneN : xPlane,
+                                            j ? yPlaneN : yPlane,
+                                            k ? zPlaneN : zPlane, false);
+          ext(0) = std::min (ext(0), p(0));
+          ext(1) = std::min (ext(1), p(1));
+          ext(2) = std::max (ext(2), p(0));
+          ext(3) = std::max (ext(3), p(1));
+        }
+
+  if (with_text)
+    {
+      for (int i = 0; i < 4; i++)
+        {
+          graphics_handle text_handle;
+          if (i == 0)
+            text_handle = get_title ();
+          else if (i == 1)
+            text_handle = get_xlabel ();
+          else if (i == 2)
+            text_handle = get_ylabel ();
+          else if (i == 3)
+            text_handle = get_zlabel ();
+
+          text::properties& text_props = reinterpret_cast<text::properties&>
+            (gh_manager::get_object (text_handle).get_properties ());
+
+          if (! text_props.get_string ().empty ())
+            {
+              Matrix text_ext = text_props.get_extent_matrix ();
+              Matrix text_pos = text_props.get_position ().matrix_value ();
+              text_pos = xform.transform (text_pos(0), text_pos(1), text_pos(2));
+
+              ext(0) = std::min (ext(0), text_pos(0)+text_ext(0));
+              ext(1) = std::min (ext(1), text_pos(1)-text_ext(1)-text_ext(3));
+              ext(2) = std::max (ext(2), text_pos(0)+text_ext(0)+text_ext(2));
+              ext(3) = std::max (ext(3), text_pos(1)-text_ext(1));
+            }
+        }
+    }
+
+  ext(2) = ext(2)-ext(0);
+  ext(3) = ext(3)-ext(1);
+  
+  return ext;
+}
+
 void
 axes::properties::set_units (const octave_value& v)
 {
   if (! error_state)
     {
       caseless_str old_units = get_units ();
       if (units.set (v, true))
         {
@@ -4641,19 +4753,19 @@ axes::properties::set_units (const octav
 }
 
 void
 axes::properties::update_units (const caseless_str& old_units)
 {
   graphics_object obj = gh_manager::get_object (get_parent ());
   Matrix parent_bb = obj.get_properties ().get_boundingbox (true).extract_n (0, 2, 1, 2);
   caseless_str new_units = get_units ();
-  set_position (octave_value (convert_position (get_position().matrix_value(), old_units, new_units, parent_bb)));
-  set_outerposition (octave_value (convert_position (get_outerposition().matrix_value(), old_units, new_units, parent_bb)));
-  set_tightinset (octave_value (convert_position (get_tightinset().matrix_value(), old_units, new_units, parent_bb)));
+  position.set (octave_value (convert_position (get_position().matrix_value(), old_units, new_units, parent_bb)), false);
+  outerposition.set (octave_value (convert_position (get_outerposition().matrix_value(), old_units, new_units, parent_bb)), false);
+  tightinset.set (octave_value (convert_position (get_tightinset().matrix_value(), old_units, new_units, parent_bb)), false);
 }
 
 void
 axes::properties::set_fontunits (const octave_value& v)
 {
   if (! error_state)
     {
       caseless_str old_fontunits = get_fontunits ();
@@ -5719,16 +5831,20 @@ text::properties::update_text_extent (vo
 
   Matrix bbox;
   // FIXME: string should be parsed only when modified, for efficiency
   renderer.text_to_pixels (get_string (), pixels, bbox,
                            halign, valign, get_rotation ());
 
   set_extent (bbox);
 #endif
+
+  if (autopos_tag_is ("xlabel") || autopos_tag_is ("ylabel") ||
+      autopos_tag_is ("zlabel") || autopos_tag_is ("title"))
+    update_autopos ("sync");
 }
 
 void
 text::properties::request_autopos (void)
 {
   if (autopos_tag_is ("xlabel") || autopos_tag_is ("ylabel") ||
       autopos_tag_is ("zlabel") || autopos_tag_is ("title"))
     update_autopos (get_autopos_tag ());
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -3072,16 +3072,17 @@ public:
 
     void remove_child (const graphics_handle& h);
 
     const scaler& get_x_scaler (void) const { return sx; }
     const scaler& get_y_scaler (void) const { return sy; }
     const scaler& get_z_scaler (void) const { return sz; }
 
     Matrix get_boundingbox (bool internal = false) const;
+    Matrix get_extent (bool with_text = false) const;
 
     void update_boundingbox (void)
       {
         if (units_is ("normalized"))
           {
             update_transform ();
             base_properties::update_boundingbox ();
           }
@@ -3300,17 +3301,17 @@ public:
   protected:
     void init (void);
 
   private:
     void update_xscale (void) { sx = get_xscale (); }
     void update_yscale (void) { sy = get_yscale (); }
     void update_zscale (void) { sz = get_zscale (); }
 
-    void update_view (void) { update_camera (); update_axes_layout (); }
+    void update_view (void) { sync_positions (); }
     void update_dataaspectratio (void) { update_transform (); }
     void update_dataaspectratiomode (void) { update_transform (); }
     void update_plotboxaspectratio (void) { update_transform (); }
     void update_plotboxaspectratiomode (void) { update_transform (); }
 
     void update_layer (void) { update_axes_layout (); }
     void update_yaxislocation (void) { update_axes_layout (); }
     void update_xaxislocation (void) { update_axes_layout (); }
@@ -3376,18 +3377,27 @@ public:
       }
     void update_zticklabelmode (void)
       {
         if (zticklabelmode.is ("auto"))
           calc_ticklabels (ztick, zticklabel, zscale.is ("log"));
       }
 
     void sync_positions (void);
-    void update_outerposition (void) { sync_positions ();}
-    void update_position (void) { sync_positions (); }
+    void update_outerposition (void)
+    {
+      set_activepositionproperty ("outerposition");
+      sync_positions ();
+    }
+
+    void update_position (void)
+    {
+      set_activepositionproperty ("position");
+      sync_positions ();
+    }
 
     double calc_tick_sep (double minval, double maxval);
     void calc_ticks_and_lims (array_property& lims, array_property& ticks, array_property& mticks,
                               bool limmode_is_auto, bool is_logscale);
     void calc_ticklabels (const array_property& ticks, any_property& labels, bool is_logscale);
     Matrix get_ticklabel_extents (const Matrix& ticks,
                                   const string_vector& ticklabels,
                                   const Matrix& limits);
@@ -3407,16 +3417,18 @@ public:
       else if (l(0) == l(1))
         {
           l(0) -= 0.5;
           l(1) += 0.5;
           lims = l;
         }
     }
 
+    Matrix calc_tightbox (const Matrix& init_pos);
+
   public:
     Matrix get_axis_limits (double xmin, double xmax, double min_pos, bool logscale);
 
     void update_xlim (bool do_clr_zoom = true)
     {
       if (xtickmode.is ("auto"))
         calc_ticks_and_lims (xlim, xtick, xmtick, xlimmode.is ("auto"), xscale.is ("log"));
       if (xticklabelmode.is ("auto"))
@@ -3708,17 +3720,17 @@ public:
     void update_text_extent (void);
 
     void request_autopos (void);
     void update_positionmode (void) { request_autopos (); }
     void update_rotationmode (void) { request_autopos (); }
     void update_horizontalalignmentmode (void) { request_autopos (); }
     void update_verticalalignmentmode (void) { request_autopos (); }
 
-    void update_string (void) { update_text_extent ();  request_autopos ();}
+    void update_string (void) { request_autopos (); update_text_extent (); }
     void update_rotation (void) { update_text_extent (); }
     void update_fontname (void) { update_text_extent (); }
     void update_fontsize (void) { update_text_extent (); }
     void update_fontangle (void) { update_text_extent (); }
     void update_fontweight (void) { update_text_extent (); }
     void update_interpreter (void) { update_text_extent (); }
     void update_horizontalalignment (void) { update_text_extent (); }
     void update_verticalalignment (void) { update_text_extent (); }
