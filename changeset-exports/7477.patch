# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1202868801 18000
#      Tue Feb 12 21:13:21 2008 -0500
# Node ID 8b22207ef9ca72a3be34f331da6aeb039d07f9aa
# Parent  e9f10b4c05cf3e7ae35764e5186294079ee76ffd
ilaenv --> xilaenv

diff --git a/libcruft/ChangeLog b/libcruft/ChangeLog
--- a/libcruft/ChangeLog
+++ b/libcruft/ChangeLog
@@ -1,8 +1,12 @@
+2008-02-12  John W. Eaton  <jwe@octave.org>
+
+	* lapack-xtra/xilaenv.f: New wrapper for Fortran function ilaenv.
+
 2008-02-06  John W. Eaton  <jwe@octave.org>
 
 	* Makerules.in (%.def : %.f): Use mv instead of move-if-change.
 
 2008-02-05  John W. Eaton  <jwe@octave.org>
 
 	* misc/Makefile.in: Unconditionally include $(MAKEDEPS).
 	Mark $(MAKEDEPS) as .PHONY targets if omit_deps is true.
diff --git a/libcruft/lapack-xtra/xilaenv.f b/libcruft/lapack-xtra/xilaenv.f
new file mode 100644
--- /dev/null
+++ b/libcruft/lapack-xtra/xilaenv.f
@@ -0,0 +1,6 @@
+      subroutine xilaenv (ispec, name, opts, n1, n2, n3, n4, retval)
+      character*(*) name, opts
+      integer ilaenv, ispec, n1, n2, n3, n4, retval
+      retval = ilaenv (ispec, name, opts, n1, n2, n3, n4)
+      return
+      end
diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -58,22 +58,23 @@ along with Octave; see the file COPYING.
 #if defined (HAVE_FFTW3)
 #include "oct-fftw.h"
 #endif
 
 // Fortran functions we call.
 
 extern "C"
 {
-  octave_idx_type
-  F77_FUNC (ilaenv, ILAENV) (const octave_idx_type&, F77_CONST_CHAR_ARG_DECL,
-			     F77_CONST_CHAR_ARG_DECL,
-			     const octave_idx_type&, const octave_idx_type&,
-			     const octave_idx_type&, const octave_idx_type&
-			     F77_CHAR_ARG_LEN_DECL F77_CHAR_ARG_LEN_DECL);
+  F77_RET_T
+  F77_FUNC (xilaenv, XILAENV) (const octave_idx_type&, F77_CONST_CHAR_ARG_DECL,
+			       F77_CONST_CHAR_ARG_DECL,
+			       const octave_idx_type&, const octave_idx_type&,
+			       const octave_idx_type&, const octave_idx_type&
+			       F77_CHAR_ARG_LEN_DECL F77_CHAR_ARG_LEN_DECL,
+			       octave_idx_type&);
 
   F77_RET_T
   F77_FUNC (zgebal, ZGEBAL) (F77_CONST_CHAR_ARG_DECL,
 			     const octave_idx_type&, Complex*, const octave_idx_type&, octave_idx_type&,
 			     octave_idx_type&, double*, octave_idx_type&
 			     F77_CHAR_ARG_LEN_DECL);
 
   F77_RET_T
@@ -2494,22 +2495,22 @@ ComplexMatrix::lssolve (const ComplexMat
       Array<double> s (minmn);
       double *ps = s.fortran_vec ();
 
       // Ask ZGELSD what the dimension of WORK should be.
       octave_idx_type lwork = -1;
 
       Array<Complex> work (1);
 
-      const octave_idx_type smlsiz
-	= F77_FUNC (ilaenv, ILAENV) (9, F77_CONST_CHAR_ARG2 ("ZGELSD", 6),
-				     F77_CONST_CHAR_ARG2 (" ", 1),
-				     0, 0, 0, 0
-				     F77_CHAR_ARG_LEN (6)
-				     F77_CHAR_ARG_LEN (1));
+      octave_idx_type smlsiz;
+      F77_FUNC (xilaenv, XILAENV) (9, F77_CONST_CHAR_ARG2 ("ZGELSD", 6),
+				   F77_CONST_CHAR_ARG2 (" ", 1),
+				   0, 0, 0, 0
+				   F77_CHAR_ARG_LEN (6)
+				   F77_CHAR_ARG_LEN (1), smlsiz);
 
       // We compute the size of rwork and iwork because ZGELSD in
       // older versions of LAPACK does not return them on a query
       // call.
       double dminmn = static_cast<double> (minmn);
       double dsmlsizp1 = static_cast<double> (smlsiz+1);
 #if defined (HAVE_LOG2)
       double tmp = log2 (dminmn) / dsmlsizp1 + 1;
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2008-02-12  John W. Eaton  <jwe@octave.org>
+
+	* CMatrix.cc: Declare xilaenv instead of ilaenv.
+	(ComplexMatrix::lssolve): Call xilaenv instead of ilaenv.
+
 2008-02-12  Jason Riedy  <ejr@cs.berkeley.edu>
   
 	* dMatrix.cc (ILAENV): Declare LAPACK Fortran function.
 	(Matrix::lssolve): Use ILAENV to query smlsiz.  And add an ugly
 	workaround for DGELSD's broken lwork query.  The formula is from
 	LAPACK's dgelsd.f source and allocates enough workspace to use an
 	efficient algorithm in the short-and-fat case (n > m).
 	* CMatrix.cc (ILAENV): Declare LAPACK Fortran function.
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -55,21 +55,22 @@ along with Octave; see the file COPYING.
 #include "oct-fftw.h"
 #endif
 
 // Fortran functions we call.
 
 extern "C"
 {
   octave_idx_type
-  F77_FUNC (ilaenv, ILAENV) (const octave_idx_type&, F77_CONST_CHAR_ARG_DECL,
-			     F77_CONST_CHAR_ARG_DECL,
-			     const octave_idx_type&, const octave_idx_type&,
-			     const octave_idx_type&, const octave_idx_type&
-			     F77_CHAR_ARG_LEN_DECL F77_CHAR_ARG_LEN_DECL);
+  F77_FUNC (xilaenv, XILAENV) (const octave_idx_type&, F77_CONST_CHAR_ARG_DECL,
+			       F77_CONST_CHAR_ARG_DECL,
+			       const octave_idx_type&, const octave_idx_type&,
+			       const octave_idx_type&, const octave_idx_type&
+			       F77_CHAR_ARG_LEN_DECL F77_CHAR_ARG_LEN_DECL,
+			       octave_idx_type&);
 
   F77_RET_T
   F77_FUNC (dgebal, DGEBAL) (F77_CONST_CHAR_ARG_DECL,
 			     const octave_idx_type&, double*, const octave_idx_type&, octave_idx_type&,
 			     octave_idx_type&, double*, octave_idx_type&
 			     F77_CHAR_ARG_LEN_DECL);
 
   F77_RET_T
@@ -2105,22 +2106,22 @@ Matrix::lssolve (const Matrix& b, octave
       Array<double> s (minmn);
       double *ps = s.fortran_vec ();
 
       // Ask DGELSD what the dimension of WORK should be.
       octave_idx_type lwork = -1;
 
       Array<double> work (1);
 
-      const octave_idx_type smlsiz
-	= F77_FUNC (ilaenv, ILAENV) (9, F77_CONST_CHAR_ARG2 ("DGELSD", 6),
-				     F77_CONST_CHAR_ARG2 (" ", 1),
-				     0, 0, 0, 0
-				     F77_CHAR_ARG_LEN (6)
-				     F77_CHAR_ARG_LEN (1));
+      octave_idx_type smlsiz;
+      F77_FUNC (xilaenv, XILAENV) (9, F77_CONST_CHAR_ARG2 ("DGELSD", 6),
+				   F77_CONST_CHAR_ARG2 (" ", 1),
+				   0, 0, 0, 0
+				   F77_CHAR_ARG_LEN (6)
+				   F77_CHAR_ARG_LEN (1), smlsiz);
 
       // We compute the size of iwork because DGELSD in older versions
       // of LAPACK does not return it on a query call.
       double dminmn = static_cast<double> (minmn);
       double dsmlsizp1 = static_cast<double> (smlsiz+1);
 #if defined (HAVE_LOG2)
       double tmp = log2 (dminmn / dsmlsizp1);
 #else
