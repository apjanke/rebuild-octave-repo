# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1312233625 -7200
#      Mon Aug 01 23:20:25 2011 +0200
# Node ID 64a3a1f237181491aa017bed3a4a570f6207a2ec
# Parent  6568fccb8940bd84de3fe35bcd598e11ae5c723a
Further developed new IRC class.

diff --git a/gui/src/qirc/IRCClientImpl.cpp b/gui/src/qirc/IRCClientImpl.cpp
--- a/gui/src/qirc/IRCClientImpl.cpp
+++ b/gui/src/qirc/IRCClientImpl.cpp
@@ -1,13 +1,16 @@
 #include "IRCClientImpl.h"
 
 IRCClientImpl::IRCClientImpl ()
   : IRCClientInterface ()
 {
+  connect (&m_tcpSocket, SIGNAL (connected ()), this, SLOT (handleConnected ()));
+  connect (&m_tcpSocket, SIGNAL (disconnected ()), this, SLOT (handleDisconnected ()));
+  connect (&m_tcpSocket, SIGNAL (readyRead ()), this, SLOT (handleReadyRead ()));
 }
 
 void
 IRCClientImpl::connectToServer (const QHostAddress& server, int port)
 {
   m_tcpSocket.connectToHost(server, port);
 }
 
@@ -21,57 +24,93 @@ void
 IRCClientImpl::reconnect ()
 {
 
 }
 
 bool
 IRCClientImpl::isConnected ()
 {
-
+  return m_connected;
 }
 
 const QHostAddress&
 IRCClientImpl::host()
 {
-
+  return m_host;
 }
 
 int
 IRCClientImpl::port()
 {
-
+  return m_port;
 }
 
 void
 IRCClientImpl::enterChannel (const QString& channel)
 {
-
+  Q_UNUSED (channel);
 }
 
 void
 IRCClientImpl::leaveChannel (const QString& channel, const QString& reason)
 {
+  Q_UNUSED (channel);
+  Q_UNUSED (reason);
 }
 
 void
 IRCClientImpl::focusChannel (const QString& channel)
 {
-
+  Q_UNUSED (channel);
 }
 
 void
 IRCClientImpl::sendNicknameChangeRequest (const QString &nickname)
 {
-
+  Q_UNUSED (nickname);
 }
 
 void
 IRCClientImpl::sendMessage (const QString& message)
 {
-
+  Q_UNUSED (message);
 }
 
 const QString&
 IRCClientImpl::nickname ()
 {
+  return m_nickname;
+}
 
+void
+IRCClientImpl::handleConnected ()
+{
+  m_connected = true;
 }
+
+void
+IRCClientImpl::handleDisconnected ()
+{
+  m_connected = false;
+}
+
+void
+IRCClientImpl::handleReadyRead ()
+{
+  QByteArray line;
+  do
+    {
+      line = m_tcpSocket.readLine();
+      if (line.size ())
+        handleIncomingLine(QString(line));
+      else
+        break;
+    }
+  while (true);
+}
+
+void
+IRCClientImpl::handleIncomingLine (const QString &line)
+{
+  if (line.isEmpty())
+    return;
+}
diff --git a/gui/src/qirc/IRCClientImpl.h b/gui/src/qirc/IRCClientImpl.h
--- a/gui/src/qirc/IRCClientImpl.h
+++ b/gui/src/qirc/IRCClientImpl.h
@@ -23,17 +23,25 @@ public slots:
   void leaveChannel (const QString& channel, const QString& reason);
 
   void focusChannel (const QString& channel);
   void sendNicknameChangeRequest (const QString &nickname);
   void sendMessage (const QString& message);
 
   const QString& nickname ();
 
+private slots:
+  void handleConnected ();
+  void handleDisconnected ();
+  void handleReadyRead ();
+
 private:
-  QString     m_server;
-  int         m_port;
-  QString     m_nickname;
+  void handleIncomingLine (const QString& line);
 
-  QTcpSocket m_tcpSocket;
+  QHostAddress  m_host;
+  int           m_port;
+  QString       m_nickname;
+  bool          m_connected;
+
+  QTcpSocket    m_tcpSocket;
 };
 
 #endif // IRCCLIENTIMPL_H
