# HG changeset patch
# User jwe
# Date 867263850 0
#      Wed Jun 25 18:37:30 1997 +0000
# Node ID 1a5fe3010f09efcf57f2e34fe5f019e208d790b3
# Parent  9c6cd52f3f5a9089d58f0764281b4d6db176dbe3
[project @ 1997-06-25 18:36:19 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,17 @@
+Wed Jun 25 13:34:06 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* polynomial/polyfit.m: Return fit y values as second output.
+	Don't use QR factorization to solve least squares problem.
+
+Wed Jun 18 10:24:00 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* control/dlqr.m: Use ao, not a, to compute k.
+
 Tue Jun  3 12:16:00 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* miscellaneous/path.m: New file.
 
 Wed May 21 11:45:31 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* miscellaneous/bug_report.m: Pass file id to dump_prefs, not file
 	name.
diff --git a/scripts/control/dlqr.m b/scripts/control/dlqr.m
--- a/scripts/control/dlqr.m
+++ b/scripts/control/dlqr.m
@@ -87,15 +87,15 @@ function [k, p, e] = dlqr (a, b, q, r, z
     qo = q;
   endif
 
   ## Check that q, (r) are symmetric, positive (semi)definite
 
   if (is_symmetric (q) && is_symmetric (r) ...
       && all (eig (q) >= 0) && all (eig (r) > 0))
     p = dare (ao, b, qo, r);
-    k = (r+b'*p*b)\b'*p*a + r\zz';
+    k = (r+b'*p*b)\b'*p*ao + r\zz';
     e = eig (a - b*k);
   else
     error ("dlqr: q (r) must be symmetric positive (semi) definite");
   endif
 
 endfunction
diff --git a/scripts/polynomial/polyfit.m b/scripts/polynomial/polyfit.m
--- a/scripts/polynomial/polyfit.m
+++ b/scripts/polynomial/polyfit.m
@@ -12,27 +12,30 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
-## usage:  polyfit (x, y, n)
+## usage:  [p, yf] = polyfit (x, y, n)
 ##
 ## Returns the coefficients of a polynomial p(x) of degree n that
 ## minimizes sumsq (p(x(i)) - y(i)), i.e., that best fits the data
 ## in the least squares sense.
+##
+## If two outputs are requested, also return the values of the
+## polynomial for each value of x.
 
 ## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
 ## Created: 13 December 1994
 ## Adapted-By: jwe
 
-function p = polyfit (x, y, n)
+function [p, yf] = polyfit (x, y, n)
 
 
   if (nargin != 3)
     usage ("polyfit (x, y, n)");
   endif
 
   if (! (is_vector (x) && is_vector (y) && size (x) == size (y)))
     error ("polyfit: x and y must be vectors of the same size");
@@ -41,27 +44,31 @@ function p = polyfit (x, y, n)
   if (! (is_scalar (n) && n >= 0 && ! isinf (n) && n == round (n)))
     error ("polyfit: n must be a nonnegative integer");
   endif
 
   l = length (x);
   x = reshape (x, l, 1);
   y = reshape (y, l, 1);
 
-  X = ones (l, 1);
+  ## Unfortunately, the economy QR factorization doesn't really save
+  ## memory doing the computation -- the returned values are just
+  ## smaller.
 
-  if (n > 0)
-    tmp = (x * ones (1, n)) .^ (ones (l, 1) * (1 : n));
-    X = [X, tmp];
-  endif
+  ## [Q, R] = qr (X, 0);
+  ## p = flipud (R \ (Q' * y));
 
-  ## Compute polynomial coeffients, making returned value compatible
-  ## with Matlab.
+  ## XXX FIXME XXX -- this is probably not so good for extreme values of
+  ## N or X...
 
-  [Q, R] = qr (X, 0);
+  X = (x * ones (1, n+1)) .^ (ones (l, 1) * (0 : n));
 
-  p = flipud (R \ (Q' * y));
+  p = (X' * X) \ (X' * y);
 
   if (! prefer_column_vectors)
     p = p';
   endif
 
+  if (nargout == 2)
+    yf = X * p;
+  endif
+
 endfunction
