# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1235545708 18000
#      Wed Feb 25 02:08:28 2009 -0500
# Node ID 3149112b94128d79e39648a69ad033ad050b8c8e
# Parent  eace5649a8b5c77766b84034465cc986ab621cf0
improve lookfor performance

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,14 @@
+2009-02-25  John W. Eaton  <jwe@octave.org>
+
+	* help/lookfor.m: Split original path into cell array and compare
+	elements with strcmp.  Suppress warnings and errors when getting
+	help text from function files.
+
 2009-02-24  John W. Eaton  <jwe@octave.org>
 
 	* help/gen_doc_cache.m: Don't compress output file.  By default,
 	write to DOC, not DOC.gz.  Don't save empty cache.
 
 	* help/lookfor.m: Use doc_cache_file to get location of DOC file.
 
 2009-02-24  Jason Riedy  <jason@acm.org>
diff --git a/scripts/help/lookfor.m b/scripts/help/lookfor.m
--- a/scripts/help/lookfor.m
+++ b/scripts/help/lookfor.m
@@ -58,55 +58,84 @@ function [out_fun, out_help_text] = look
     [fun, help_text] = search_cache (str, cache_file, search_type);
     had_core_cache = true;
   else
     fun = help_text = {};
     had_core_cache = false;
   endif
   
   ## Search functions in path
-  pathorig = __pathorig__ ();
+  p = __pathorig__ ();
+  idx = find (p == pathsep ());
+  idx(end+1) = numel (p) + 1;
+  prev_idx = 1;
+  nelts = numel (idx);
+  orig_path = cell (nelts, 1);
+  for n = 1:nelts
+    orig_path{n} = p(prev_idx:idx(n)-1);
+    prev_idx = idx(n) + 1;
+  endfor
+
   p = path ();
   idx = find (p == pathsep ());
+  idx(end+1) = numel (p);
   prev_idx = 1;
-  for n = 1:length (idx)
-    f = p (prev_idx:idx (n)-1);
+  for n = 1:numel (idx)
+    elt = p(prev_idx:idx(n)-1);
+    prev_idx = idx(n) + 1;
     
     ## Should we search the directory or has it been covered by the cache?
-    if (!had_core_cache || isempty (findstr (f, pathorig)))
-      cache_file = fullfile (f, "DOC");
+    if (!had_core_cache || ! any (strcmp (elt, orig_path)))
+      cache_file = fullfile (elt, "DOC");
       if (exist (cache_file, "file"))
         ## We have a cache in the directory, then read it and search it!
         [funs, hts] = search_cache (str, cache_file, search_type);
         fun (end+1:end+length (funs)) = funs;
         help_text (end+1:end+length (hts)) = hts;
       else
       ## We don't have a cache. Search files
-        funs_in_f = __list_functions__ (f);
+        funs_in_f = __list_functions__ (elt);
         for m = 1:length (funs_in_f)
           fn = funs_in_f {m};
         
           ## Skip files that start with __
           if (length (fn) > 2 && strcmp (fn (1:2), "__"))
             continue;
           endif
         
           ## Extract first sentence
           try
-            first_sentence = get_first_help_sentence (fn);
-            status = 0;
+	    warn_state = warning ();
+	    unwind_protect
+	      warning ("off");
+              first_sentence = get_first_help_sentence (fn);
+              status = 0;
+	    unwind_protect_cleanup
+	      warning (warn_state);
+	    end_unwind_protect
           catch
             status = 1;
           end_try_catch
 
           if (search_type == 2) # search entire help text
-            [text, format] = get_help_text (fn);
+	    try
+	      warn_state = warning ();
+	      unwind_protect
+		warning ("off");
+		[text, fmt] = get_help_text (fn);
+		status = 0;
+	      unwind_protect_cleanup
+		warning (warn_state);
+	      end_unwind_protect
+	    catch
+	      status = 1;
+	    end_try_catch
     
-            ## Take action depending on help text format
-            switch (lower (format))
+            ## Take action depending on help text fmt
+            switch (lower (fmt))
               case "plain text"
                 status = 0;
               case "texinfo"
                 [text, status] = __makeinfo__ (text, "plain text");
               case "html"
                 [text, status] = strip_html_tags (text);
               otherwise
                 status = 1;
@@ -119,17 +148,16 @@ function [out_fun, out_help_text] = look
           ## Search the help text, if we can
           if (status == 0 && !isempty (strfind (text, str)))
             fun (end+1) = fn;
             help_text (end+1) = first_sentence;
           endif
         endfor
       endif
     endif
-    prev_idx = idx (n) + 1;
   endfor
   
   if (nargout == 0)
     ## Print the results (FIXME: improve this to make it look better.
     indent = 20;
     term_width = terminal_size() (2);
     desc_width = term_width - indent - 2;
     indent_space = repmat (" ", 1, indent);
@@ -159,9 +187,8 @@ function [funs, help_texts] = search_cac
     tmp = strfind (cache (search_type, :), str);
     cache_idx = find (!cellfun ("isempty", tmp));
     funs = cache (1, cache_idx);
     help_texts = cache (3, cache_idx);
   else
     funs = help_texts = {};
   endif
 endfunction
-
