# HG changeset patch
# User jwe
# Date 810332939 0
#      Tue Sep 05 20:28:59 1995 +0000
# Node ID 749071f4833665ac4ec046be5d81cd117076b9de
# Parent  8b51c17388825fd928e1b77024810f36df2424d5
[project @ 1995-09-05 20:28:59 by jwe]

diff --git a/src/balance.cc b/src/balance.cc
--- a/src/balance.cc
+++ b/src/balance.cc
@@ -70,18 +70,18 @@ where OPT is an optional single characte
     {
       print_usage ("balance");
       return retval;
     }
 
   char *bal_job;
   int my_nargin;		// # args w/o optional string arg
 
-// Determine if balancing option is listed.  Set my_nargin to the
-// number of matrix inputs.
+  // Determine if balancing option is listed.  Set my_nargin to the
+  // number of matrix inputs.
 
   if (args(nargin-1).is_string ())
     {
       bal_job = args(nargin-1).string_value ();
       my_nargin = nargin-1;
     }
   else
     {
@@ -89,50 +89,50 @@ where OPT is an optional single characte
       my_nargin = nargin;
     }
 
   tree_constant arg_a = args(0);
 
   int a_nr = arg_a.rows ();
   int a_nc = arg_a.columns ();
 
-// Check argument 1 dimensions.
+  // Check argument 1 dimensions.
 
   int arg_is_empty = empty_arg ("balance", a_nr, a_nc);
 
   if (arg_is_empty < 0)
     return retval;
   if (arg_is_empty > 0)
     return Octave_object (2, Matrix ());
 
   if (a_nr != a_nc)
     {
       gripe_square_matrix_required ("balance");
       return retval;
     }
 
-// Extract argument 1 parameter for both AEP and GEP.
+  // Extract argument 1 parameter for both AEP and GEP.
 
   Matrix aa;
   ComplexMatrix caa;
   if (arg_a.is_complex_type ())
     caa = arg_a.complex_matrix_value ();
   else
     aa = arg_a.matrix_value ();
 
   if (error_state)
     return retval;
 
-// Treat AEP/ GEP cases.
+  // Treat AEP/GEP cases.
 
   switch (my_nargin)
     {
     case 1:
       
-// Algebraic eigenvalue problem.
+      // Algebraic eigenvalue problem.
 
       if (arg_a.is_complex_type ())
 	{
 	  ComplexAEPBALANCE result (caa, bal_job);
 
 	  if (nargout == 0 || nargout == 1)
 	    retval(0) = result.balanced_matrix ();
 	  else
@@ -152,58 +152,58 @@ where OPT is an optional single characte
 	      retval(1) = result.balanced_matrix ();
 	      retval(0) = result.balancing_matrix ();
 	    }
 	}
       break;
 
     case 2:
       {
-// Generalized eigenvalue problem.
+	// Generalized eigenvalue problem.
 
-// 1st we have to check argument 2 dimensions and type...
+	// 1st we have to check argument 2 dimensions and type...
 
 	tree_constant arg_b = args(1);
 
 	int b_nr = arg_b.rows ();
 	int b_nc = arg_b.columns ();
       
-// Check argument 2 dimensions -- must match arg 1.
+	// Check argument 2 dimensions -- must match arg 1.
 
 	if (b_nr != b_nc || b_nr != a_nr)
 	  {
 	    gripe_nonconformant ();
 	    return retval;
 	  }
       
-// Now, extract the second matrix...
-// Extract argument 1 parameter for both AEP and GEP.
+	// Now, extract the second matrix...
+	// Extract argument 1 parameter for both AEP and GEP.
 
 	Matrix bb;
 	ComplexMatrix cbb;
 	if (arg_b.is_complex_type ())
 	  cbb = arg_b.complex_matrix_value ();
 	else
 	  bb = arg_b.matrix_value ();
 
 	if (error_state)
 	  return retval;
 
-// Both matrices loaded, now let's check what kind of arithmetic:
+	// Both matrices loaded, now let's check what kind of arithmetic:
 
 	if (arg_a.is_complex_type () || arg_b.is_complex_type ())
 	  {
 	    if (arg_a.is_real_type ())
 	      caa = aa;
 
 	    if (arg_b.is_real_type ())
 	      cbb = bb;
 
-// Compute magnitudes of elements for balancing purposes.
-// Surely there's a function I can call someplace!
+	    // Compute magnitudes of elements for balancing purposes.
+	    // Surely there's a function I can call someplace!
 
 	    for (int i = 0; i < a_nr; i++)
 	      for (int j = 0; j < a_nc; j++)
 		{
 		  aa.elem (i, j) = abs (caa.elem (i, j));
 		  bb.elem (i, j) = abs (cbb.elem (i, j));
 		}
 	  }
diff --git a/src/eig.cc b/src/eig.cc
--- a/src/eig.cc
+++ b/src/eig.cc
@@ -94,17 +94,17 @@ DEFUN_DLD_BUILTIN ("eig", Feig, Seig, 2,
     }
 
   if (nargout == 0 || nargout == 1)
     {
       retval(0) = result.eigenvalues (), 1;
     }
   else
     {
-// Blame it on Matlab.
+      // Blame it on Matlab.
 
       ComplexDiagMatrix d (result.eigenvalues ());
 
       retval(1) = d;
       retval(0) = result.eigenvectors ();
     }
 
   return retval;
diff --git a/src/expm.cc b/src/expm.cc
--- a/src/expm.cc
+++ b/src/expm.cc
@@ -65,17 +65,17 @@ DEFUN_DLD_BUILTIN ("expm", Fexpm, Sexpm,
   if (nargin != 1)
     {
       print_usage ("expm");
       return retval;
     }
 
   tree_constant arg = args(0);
 
-// Constants for matrix exponential calculation.
+  // Constants for matrix exponential calculation.
 
   static double padec [] =
     {
       5.0000000000000000e-1,
       1.1666666666666667e-1,
       1.6666666666666667e-2,
       1.6025641025641026e-3,
       1.0683760683760684e-4,
@@ -105,201 +105,201 @@ DEFUN_DLD_BUILTIN ("expm", Fexpm, Sexpm,
   char* balance_job = "B";	// variables for balancing
 
   int sqpow;		// power for scaling and squaring
   double inf_norm;	// norm of preconditioned matrix
   int minus_one_j;	// used in computing pade approx
 
   if (arg.is_real_type ())
     {
-
-// Compute the exponential.
+      // Compute the exponential.
 
       Matrix m = arg.matrix_value ();
 
       if (error_state)
 	return retval;
 
       double trshift = 0;		// trace shift value
 
-// Preconditioning step 1: trace normalization.
+      // Preconditioning step 1: trace normalization.
 
       for (i = 0; i < nc; i++)
 	trshift += m.elem (i, i);
       trshift /= nc;
       for (i = 0; i < nc; i++)
 	m.elem (i, i) -= trshift;
 
-// Preconditioning step 2: balancing.
+      // Preconditioning step 2: balancing.
 
       AEPBALANCE mbal (m, balance_job);
       m = mbal.balanced_matrix ();
       Matrix d = mbal.balancing_matrix ();
 
-// Preconditioning step 3: scaling.
+      // Preconditioning step 3: scaling.
 
       ColumnVector work(nc);
       inf_norm = F77_FCN (dlange, DLANGE) ("I", nc, nc,
 					   m.fortran_vec (), nc,
 					   work.fortran_vec ());
 
       sqpow = (int) (1.0 + log (inf_norm) / log (2.0));
 
-// Check whether we need to square at all.
+      // Check whether we need to square at all.
 
       if (sqpow < 0)
 	sqpow = 0;
       else
 	{
 	  for (inf_norm = 1.0, i = 0; i < sqpow; i++)
 	    inf_norm *= 2.0;
 
 	  m = m / inf_norm;
 	}
 
-// npp, dpp: pade' approx polynomial matrices.
+      // npp, dpp: pade' approx polynomial matrices.
 
       Matrix npp (nc, nc, 0.0);
       Matrix dpp = npp;
 
-// now powers a^8 ... a^1.
+      // Now powers a^8 ... a^1.
 
       minus_one_j = -1;
       for (j = 7; j >= 0; j--)
 	{
 	  npp = m * npp + m * padec[j];
 	  dpp = m * dpp + m * (minus_one_j * padec[j]);
 	  minus_one_j *= -1;
 	}
-// Zero power.
+
+      // Zero power.
 
       dpp = -dpp;
       for(j = 0; j < nc; j++)
 	{
 	  npp.elem (j, j) += 1.0;
 	  dpp.elem (j, j) += 1.0;
 	}
 
-// Compute pade approximation = inverse (dpp) * npp.
+      // Compute pade approximation = inverse (dpp) * npp.
 
       Matrix result = dpp.solve (npp);
 
-// Reverse preconditioning step 3: repeated squaring.
+      // Reverse preconditioning step 3: repeated squaring.
 
       while (sqpow)
 	{
 	  result = result * result;
 	  sqpow--;
 	}
 
-// Reverse preconditioning step 2: inverse balancing.
+      // Reverse preconditioning step 2: inverse balancing.
 
       result = result.transpose();
       d = d.transpose ();
       result = result * d;
       result = d.solve (result);
       result = result.transpose ();
 
-// Reverse preconditioning step 1: fix trace normalization.
+      // Reverse preconditioning step 1: fix trace normalization.
 
       result = result * exp (trshift);
 
       retval = result;
     }
   else if (arg.is_complex_type ())
     {
       ComplexMatrix m = arg.complex_matrix_value ();
 
       if (error_state)
 	return retval;
 
       Complex trshift = 0.0;		// trace shift value
 
-// Preconditioning step 1: trace normalization.
+      // Preconditioning step 1: trace normalization.
 
       for (i = 0; i < nc; i++)
 	trshift += m.elem (i, i);
       trshift /= nc;
       for (i = 0; i < nc; i++)
 	m.elem (i, i) -= trshift;
 
-// Preconditioning step 2: eigenvalue balancing.
+      // Preconditioning step 2: eigenvalue balancing.
 
       ComplexAEPBALANCE mbal (m, balance_job);
       m = mbal.balanced_matrix ();
       ComplexMatrix d = mbal.balancing_matrix ();
 
-// Preconditioning step 3: scaling.
+      // Preconditioning step 3: scaling.
 
       ColumnVector work (nc);
       inf_norm = F77_FCN (zlange, ZLANGE) ("I", nc, nc,
 					   m.fortran_vec (), nc,
 					   work.fortran_vec ());
 
       sqpow = (int) (1.0 + log (inf_norm) / log (2.0));
 
-// Check whether we need to square at all.
+      // Check whether we need to square at all.
 
       if (sqpow < 0)
 	sqpow = 0;
       else
 	{
 	  for (inf_norm = 1.0, i = 0; i < sqpow; i++)
 	    inf_norm *= 2.0;
 
 	  m = m / inf_norm;
 	}
 
-// npp, dpp: pade' approx polynomial matrices.
+      // npp, dpp: pade' approx polynomial matrices.
 
       ComplexMatrix npp (nc, nc, 0.0);
       ComplexMatrix dpp = npp;
 
-// Now powers a^8 ... a^1.
+      // Now powers a^8 ... a^1.
 
       minus_one_j = -1;
       for (j = 7; j >= 0; j--)
 	{
 	  npp = m * npp + m * padec[j];
 	  dpp = m * dpp + m * (minus_one_j * padec[j]);
 	  minus_one_j *= -1;
 	}
 
-// Zero power.
+      // Zero power.
 
       dpp = -dpp;
       for (j = 0; j < nc; j++)
 	{
 	  npp.elem (j, j) += 1.0;
 	  dpp.elem (j, j) += 1.0;
 	}
 
-// Compute pade approximation = inverse (dpp) * npp.
+      // Compute pade approximation = inverse (dpp) * npp.
 
       ComplexMatrix result = dpp.solve (npp);
 	
-// Reverse preconditioning step 3: repeated squaring.
+      // Reverse preconditioning step 3: repeated squaring.
 
       while (sqpow)
 	{
 	  result = result * result;
 	  sqpow--;
 	}
 
-// reverse preconditioning step 2: inverse balancing XXX FIXME XXX:
-// should probably do this with lapack calls instead of a complete
-// matrix inversion.
+      // Reverse preconditioning step 2: inverse balancing.
+      // XXX FIXME XXX -- should probably do this with Lapack calls
+      // instead of a complete matrix inversion.
 
       result = result.transpose ();
       d = d.transpose ();
       result = result * d;
       result = d.solve (result);
       result = result.transpose ();
 
-// Reverse preconditioning step 1: fix trace normalization.
+      // Reverse preconditioning step 1: fix trace normalization.
 
       result = result * exp (trshift);
 
       retval = result;
     }
   else
     {
       gripe_wrong_type_arg ("expm", arg);
diff --git a/src/find.cc b/src/find.cc
--- a/src/find.cc
+++ b/src/find.cc
@@ -42,33 +42,37 @@ find_to_fortran_idx (const ColumnVector 
     case 0:
     case 1:
       {
 	int count = i_idx.length ();
 	ColumnVector tmp (count);
 	for (int i = 0; i < count; i++)
 	  tmp (i) = nr * (j_idx (i) - 1.0) + i_idx (i);
 
-// If the original argument was a row vector, force a row vector of
-// indices to be returned.
+	// If the original argument was a row vector, force a row
+	// vector of indices to be returned.
 
 	retval(0) = tree_constant (tmp, (nr != 1));
       }
       break;
 
     case 3:
       retval(2) = val;
-// Fall through!
+      // Fall through!
 
     case 2:
       retval(1) = tree_constant (j_idx, 1);
       retval(0) = tree_constant (i_idx, 1);
-// If you want this to work more like Matlab, use the following line
-// instead of the previous one.
-//    retval(0) = tree_constant (i_idx, (nr != 1));
+
+      // If you want this to work more like Matlab, use
+      //
+      //    retval(0) = tree_constant (i_idx, (nr != 1));
+      //
+      // instead of the previous statement.
+
       break;
 
     default:
       panic_impossible ();
       break;
     }
 
   return retval;
diff --git a/src/givens.cc b/src/givens.cc
--- a/src/givens.cc
+++ b/src/givens.cc
@@ -86,61 +86,65 @@ such that G [x; y] = [*; 0]  (x, y scala
     }
   else 
     {
       x = arg_a.double_value ();
 
       if (error_state)
 	return retval;
 
-      cx = x;			// copy to complex just in case
+      // Convert to complex just in case...
+
+      cx = x;
     }
 
   if (arg_b.is_complex_type ())
     {
       cy = arg_b.complex_value ();
 
       if (error_state)
 	return retval;
     }
   else
     {
       y = arg_b.double_value ();
 
       if (error_state)
 	return retval;
 
-      cy = y;			// copy to complex just in case
+      // Convert to complex just in case...
+
+      cy = y;
     }
 
-// Now compute the rotation.
+  // Now compute the rotation.
 
   double cc;
   if (arg_a.is_complex_type () || arg_b.is_complex_type ())
     {
       Complex cs, temp_r;
  
       F77_FCN (zlartg, ZLARTG) (cx, cy, cc, cs, temp_r);
 
       switch (nargout)
 	{
-	case 0:		// output a matrix
+	case 0:
 	case 1:
 	  {
 	    ComplexMatrix g (2, 2);
 	    g.elem (0, 0) = cc;
 	    g.elem (1, 1) = cc;
 	    g.elem (0, 1) = cs;
 	    g.elem (1, 0) = -conj (cs);
 
 	    retval(0) = g;
 	  }
 	  break;
    
-	case 2:		// output scalar values
+	case 2:
 	  retval(0) = cc;
 	  retval(1) = cs;
 	  break;
 
 	default:  
 	  error ("givens: invalid number of output arguments");
 	  break;
 	}
@@ -148,30 +152,30 @@ such that G [x; y] = [*; 0]  (x, y scala
   else
     {
       double s, temp_r;
 
       F77_FCN (dlartg, DLARTG) (x, y, cc, s, temp_r);
 
       switch (nargout)
 	{
-	case 0:		// output a matrix
+	case 0:
 	case 1:
 	  {
 	    Matrix g (2, 2);
 	    g.elem (0, 0) = cc;
 	    g.elem (1, 1) = cc;
 	    g.elem (0, 1) = s;
 	    g.elem (1, 0) = -s;
 
 	    retval(0) = g;
 	  }
 	  break;
    
-	case 2:		// output scalar values
+	case 2:
 	  retval(0) = cc;
 	  retval(1) = s;
 	  break;
    
 	default:
 	  error ("givens: invalid number of output arguments");
 	  break;
 	}
diff --git a/src/log.cc b/src/log.cc
--- a/src/log.cc
+++ b/src/log.cc
@@ -30,17 +30,18 @@ Software Foundation, 59 Temple Place - S
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
 #include "help.h"
 #include "tree-const.h"
 #include "user-prefs.h"
 #include "utils.h"
 
-// XXX FIXME XXX -- the next two functions should really be just one...
+// XXX FIXME XXX -- the next two functions should really be just
+// one...
 
 DEFUN_DLD_BUILTIN ("logm", Flogm, Slogm, 2, 1,
   "logm (X): matrix logarithm")
 {
   Octave_object retval;
 
   int nargin = args.length ();
 
diff --git a/src/lpsolve.cc b/src/lpsolve.cc
--- a/src/lpsolve.cc
+++ b/src/lpsolve.cc
@@ -32,17 +32,18 @@ Software Foundation, 59 Temple Place - S
 #include "help.h"
 #include "tree-const.h"
 
 DEFUN_DLD_BUILTIN ("lp_solve", Flp_solve, Slp_solve, 11, 3,
   "lp_solve (): solve linear programs using lp_solve.")
 {
   Octave_object retval;
 
-// Force a bad value of inform, and empty matrices for x and phi.
+  // Force a bad value of inform, and empty matrices for x and phi.
+
   Matrix m;
   retval(2) = -1.0;
   retval(1) = m;
   retval(0) = m;
 
   error ("lp_solve: not implemented yet");
 
   return retval;
diff --git a/src/minmax.cc b/src/minmax.cc
--- a/src/minmax.cc
+++ b/src/minmax.cc
@@ -377,17 +377,17 @@ DEFUN_DLD_BUILTIN ("min", Fmin, Smin, 3,
 
   tree_constant arg1;
   tree_constant arg2;
 
   switch (nargin)
     {
     case 2:
       arg2 = args(1);
-// Fall through...
+      // Fall through...
 
     case 1:
       arg1 = args(0);
       break;
 
     default:
       panic_impossible ();
       break;
@@ -605,17 +605,17 @@ DEFUN_DLD_BUILTIN ("max", Fmax, Smax, 3,
 
   tree_constant arg1;
   tree_constant arg2;
 
   switch (nargin)
     {
     case 2:
       arg2 = args(1);
-// Fall through...
+      // Fall through...
 
     case 1:
       arg1 = args(0);
       break;
 
     default:
       panic_impossible ();
       break;
diff --git a/src/npsol.cc b/src/npsol.cc
--- a/src/npsol.cc
+++ b/src/npsol.cc
@@ -268,17 +268,18 @@ Handle all of the following:
   8. npsol (x, phi,                      nllb, g, nlub)
 
 */
 
   Octave_object retval;
 
 #if defined (NPSOL_MISSING)
 
-// Force a bad value of inform, and empty matrices for x, phi, and lambda.
+  // Force a bad value of inform, and empty matrices for x, phi, and
+  // lambda.
 
   retval.resize (4, Matrix ());
 
   retval(2) = -1.0;
 
   print_usage ("npsol");
 
 #else
@@ -440,16 +441,17 @@ Handle all of the following:
 	}
     }
 
   if (nargin == 8 || nargin == 10)
     {
       if (! npsol_constraints)
 	{
 	  // Produce error message.
+
 	  is_valid_function (args(nargin-2), "npsol", 1);
 	}
       else
 	{
 	  if (takes_correct_nargs (npsol_constraints, 1, "npsol", 1))
 	    {
 	      ColumnVector nlub = args(nargin-1).vector_value ();
 	      ColumnVector nllb = args(nargin-3).vector_value ();
diff --git a/src/qpsol.cc b/src/qpsol.cc
--- a/src/qpsol.cc
+++ b/src/qpsol.cc
@@ -74,17 +74,18 @@ Handle all of the following:
   4. qpsol (x, H, c,         llb, A, lub)
 
 */
 
   Octave_object retval;
 
 #if defined (QPSOL_MISSING)
 
-// Force a bad value of inform, and empty matrices for x, phi, and lambda.
+  // Force a bad value of inform, and empty matrices for x, phi, and
+  // lambda.
 
   retval.resize (4, Matrix ());
 
   retval(2) = -1.0;
 
   print_usage ("qpsol");
 
 #else
diff --git a/src/qzval.cc b/src/qzval.cc
--- a/src/qzval.cc
+++ b/src/qzval.cc
@@ -84,63 +84,63 @@ A and B must be real matrices.")
   int arg_a_is_empty = empty_arg ("qzval", a_nr, a_nc);
   int arg_b_is_empty = empty_arg ("qzval", b_nr, b_nc);
 
   if (arg_a_is_empty > 0 && arg_b_is_empty > 0)
     return Matrix ();
   else if (arg_a_is_empty || arg_b_is_empty)
     return retval;
 
-// Arguments are not empty, so check for correct dimensions.
+  // Arguments are not empty, so check for correct dimensions.
 
   if (a_nr != a_nc || b_nr != b_nc)
     {
       gripe_square_matrix_required ("qzval: first two parameters:");
       return retval;
     }
 
   if (a_nr != b_nr)
     {
       gripe_nonconformant ();
       return retval;
     }
   
-// Dimensions look o.k., let's solve the problem.
+  // Dimensions look o.k., let's solve the problem.
 
   if (arg_a.is_complex_type () || arg_b.is_complex_type ())
     {
       error ("qzval: cannot yet do complex matrix arguments\n");
       return retval;
     }
 
-// Do everything in real arithmetic.
+  // Do everything in real arithmetic.
 
   Matrix jnk (a_nr, a_nr, 0.0);
 
   ColumnVector alfr (a_nr);
   ColumnVector alfi (a_nr);
   ColumnVector beta (a_nr);
 
   long matz = 0;
   int info;
 
-// XXX FIXME ??? XXX
+  // XXX FIXME ??? XXX
   double eps = DBL_EPSILON;
 
   Matrix ca = arg_a.matrix_value ();
 
   if (error_state)
     return retval;
 
   Matrix cb = arg_b.matrix_value ();
 
   if (error_state)
     return retval;
 
-// Use EISPACK qz functions.
+  // Use EISPACK qz functions.
 
   F77_FCN (qzhes, QZHES) (a_nr, a_nr, ca.fortran_vec (),
 			  cb.fortran_vec (), matz,
 			  jnk.fortran_vec ()); 
 
   F77_FCN (qzit, QZIT) (a_nr, a_nr, ca.fortran_vec (),
 			cb.fortran_vec (), eps, matz,
 			jnk.fortran_vec (), info);
@@ -148,35 +148,34 @@ A and B must be real matrices.")
   if (info)
     error ("qzval: trouble in qzit, info = %d", info);
 
   F77_FCN (qzval, QZVAL) (a_nr, a_nr, ca.fortran_vec (),
 			  cb.fortran_vec (), alfr.fortran_vec (),
 			  alfi.fortran_vec (), beta.fortran_vec (),
 			  matz, jnk.fortran_vec ());
 
-// Count and extract finite generalized eigenvalues.
+  // Count and extract finite generalized eigenvalues.
 
   int i;
   int cnt = 0;
 
   Complex Im (0, 1);
 
   for (i = 0; i < a_nr; i++)
     if (beta (i) != 0)
       cnt++;
 
   ComplexColumnVector cx (cnt, 0.0);
 
   for (i = 0; i < a_nr; i++)
     {
       if (beta (i) != 0)
 	{
-
-// Finite generalized eigenvalue.
+	  // Finite generalized eigenvalue.
 
 	  cnt--;
 	  cx (cnt) = (alfr (i) + Im * alfi (i)) / beta (i);
 	}
     }
 
   retval = cx;
 
diff --git a/src/rand.cc b/src/rand.cc
--- a/src/rand.cc
+++ b/src/rand.cc
@@ -123,20 +123,21 @@ rand (SEED, N)        -- set seed")
     {
       print_usage ("rand");
       return retval;
     }
 
   static int initialized = 0;
   if (! initialized)
     {
-// Make the random number generator give us a different sequence every
-// time we start octave unless we specifically set the seed.  The
-// technique used below will cycle monthly, but it it does seem to
-// work ok to give fairly different seeds each time Octave starts.
+      // Make the random number generator give us a different sequence
+      // every time we start octave unless we specifically set the
+      // seed.  The technique used below will cycle monthly, but it it
+      // does seem to work ok to give fairly different seeds each time
+      // Octave starts.
 
 #if 0
       int s0 = 1234567890;
       int s1 = 123456789;
 #else
       time_t now;
       struct tm *tm;
  
@@ -209,17 +210,18 @@ rand (SEED, N)        -- set seed")
 	{
 	  Range r = tmp.range_value ();
 	  n = 1;
 	  m = r.nelem ();
 	  goto gen_matrix;
 	}
       else if (tmp.is_matrix_type ())
 	{
-// XXX FIXME XXX -- this should probably use the function from data.cc.
+	  // XXX FIXME XXX -- this should probably use the function
+	  // from data.cc.
 
 	  Matrix a = args(0).matrix_value ();
 
 	  if (error_state)
 	    return retval;
 
 	  n = a.rows ();
 	  m = a.columns ();
diff --git a/src/sort.cc b/src/sort.cc
--- a/src/sort.cc
+++ b/src/sort.cc
@@ -204,17 +204,18 @@ sort the columns of X, optionally return
 	      mx_sort (v, idx, return_idx);
 
 	      retval(0) = tree_constant (v, 0);
 	      if (return_idx)
 		retval(1) = tree_constant (idx, 0);
 	    }
 	  else
 	    {
-// Sorts m in place, optionally computes index Matrix.
+	      // Sorts m in place, optionally computes index Matrix.
+
 	      Matrix idx;
 	      mx_sort (m, idx, return_idx);
 
 	      retval(0) = m;
 	      if (return_idx)
 		retval(1) = idx;
 	    }
 	}
@@ -235,17 +236,18 @@ sort the columns of X, optionally return
 	      mx_sort (cv, idx, return_idx);
 
 	      retval(0) = tree_constant (cv, 0);
 	      if (return_idx)
 		retval(1) = tree_constant (idx, 0);
 	    }
 	  else
 	    {
-// Sorts cm in place, optionally computes index Matrix.
+	      // Sorts cm in place, optionally computes index Matrix.
+
 	      Matrix idx;
 	      mx_sort (cm, idx, return_idx);
 
 	      retval(0) = cm;
 	      if (return_idx)
 		retval(1) = idx;
 	    }
 	}
diff --git a/src/syl.cc b/src/syl.cc
--- a/src/syl.cc
+++ b/src/syl.cc
@@ -87,117 +87,117 @@ DEFUN_DLD_BUILTIN ("syl", Fsyl, Ssyl, 4,
   int arg_b_is_empty = empty_arg ("syl", b_nr, b_nc);
   int arg_c_is_empty = empty_arg ("syl", c_nr, c_nc);
 
   if (arg_a_is_empty > 0 && arg_b_is_empty > 0 && arg_c_is_empty > 0)
     return Matrix ();
   else if (arg_a_is_empty || arg_b_is_empty || arg_c_is_empty)
     return retval;
 
-// Arguments are not empty, so check for correct dimensions.
+  // Arguments are not empty, so check for correct dimensions.
 
   if (a_nr != a_nc || b_nr != b_nc)
     {
       gripe_square_matrix_required ("syl: first two parameters:");
       return retval;
     }
   else if (a_nr != c_nr || b_nr != c_nc)
     {
       gripe_nonconformant ();
       return retval;
     }
   
-// Dimensions look o.k., let's solve the problem.
+  // Dimensions look o.k., let's solve the problem.
 
     if (arg_a.is_complex_type ()
 	|| arg_b.is_complex_type ()
 	|| arg_c.is_complex_type ())
       {
-
-// Do everything in complex arithmetic;
+	// Do everything in complex arithmetic;
 
 	ComplexMatrix ca = arg_a.complex_matrix_value ();
 
 	if (error_state)
 	  return retval;
 
 	ComplexMatrix cb = arg_b.complex_matrix_value ();
 
 	if (error_state)
 	  return retval;
 
 	ComplexMatrix cc = arg_c.complex_matrix_value ();
 
 	if (error_state)
 	  return retval;
 
-// Compute Schur decompositions
+	// Compute Schur decompositions
 
 	ComplexSCHUR as (ca, "U");
 	ComplexSCHUR bs (cb, "U");
   
-// Transform cc to new coordinates.
+	// Transform cc to new coordinates.
 
 	ComplexMatrix ua = as.unitary_matrix ();
 	ComplexMatrix sch_a = as.schur_matrix ();
 	ComplexMatrix ub = bs.unitary_matrix ();
 	ComplexMatrix sch_b = bs.schur_matrix ();
   
 	ComplexMatrix cx = ua.hermitian () * cc * ub;
   
-// Solve the sylvester equation, back-transform, and return the solution.
+	// Solve the sylvester equation, back-transform, and return
+	// the solution.
   
 	double scale;
 	int info;
   
 	F77_FCN (ztrsyl, ZTRSYL) ("N", "N", 1, a_nr, b_nr,
 				  sch_a.fortran_vec (), a_nr,
 				  sch_b.fortran_vec (), b_nr,
 				  cx.fortran_vec (), a_nr, scale,
 				  info, 1L, 1L);
 
 	cx = -ua * cx * ub.hermitian ();
   
 	retval = cx;
       }
     else
       {
-
-// Do everything in real arithmetic;
+	// Do everything in real arithmetic.
 
 	Matrix ca = arg_a.matrix_value ();
 
 	if (error_state)
 	  return retval;
 
 	Matrix cb = arg_b.matrix_value ();
 
 	if (error_state)
 	  return retval;
 
 	Matrix cc = arg_c.matrix_value ();
 
 	if (error_state)
 	  return retval;
 
-// Compute Schur decompositions.
+	// Compute Schur decompositions.
 
 	SCHUR as (ca, "U");
 	SCHUR bs (cb, "U");
   
-// Transform cc to new coordinates.
+	// Transform cc to new coordinates.
 
 	Matrix ua = as.unitary_matrix ();
 	Matrix sch_a = as.schur_matrix ();
 	Matrix ub = bs.unitary_matrix ();
 	Matrix sch_b = bs.schur_matrix ();
   
 	Matrix cx = ua.transpose () * cc * ub;
   
-// Solve the sylvester equation, back-transform, and return the solution.
+	// Solve the sylvester equation, back-transform, and return
+	// the solution.
   
 	double scale;
 	int info;
 
 	F77_FCN (dtrsyl, DTRSYL) ("N", "N", 1, a_nr, b_nr,
 				  sch_a.fortran_vec (), a_nr, 
 				  sch_b.fortran_vec (), b_nr,
 				  cx.fortran_vec (), a_nr, scale,
