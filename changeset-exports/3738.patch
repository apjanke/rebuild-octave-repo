# HG changeset patch
# User jwe
# Date 974491823 0
#      Fri Nov 17 20:10:23 2000 +0000
# Node ID f20c30fa3a8d171de4096589ce096dab49f265d9
# Parent  b736f8b8f0a13048696bdc3c0f408c0ef0ec4b57
[project @ 2000-11-17 20:10:22 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,19 @@
+2000-11-17  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* load-save.cc (save_ascii_data_for_plotting): New function.
+	* pt-plot.cc (save_in_tmp_file): Use it instead of save_ascii_data.
+
+	* load-save.cc (save_ascii_data): Warn if saving Inf or NaN values.
+	New arg, infnan_warned.  Use it to warn just once per set.
+	Now static.
+	(do_save): New arg, infnan_warned.  Pass to save_ascii_data.
+	(save_vars): Initialize infnan_warned here, pass to do_save.
+
 2000-11-16  Paul Kienzle  <pkienzle@kienzle.powernet.co.uk>
 
 	* file-io.cc (Ffprintf): If no file id parameter, don't return
 	count of characters if nargout is 0 (for compatibility with
 	Matlab).
 
 2000-11-16  Ben Sapp  <bsapp@lanl.gov>
 
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -4443,20 +4443,21 @@ strip_infnan (const ComplexMatrix& m)
 // axis ranges, etc.).
 //
 // Assumes ranges and strings cannot contain Inf or NaN values.
 //
 // Returns 1 for success and 0 for failure.
 
 // XXX FIXME XXX -- should probably write the help string here too.
 
-bool
+static bool
 save_ascii_data (std::ostream& os, const octave_value& tc,
-		 const std::string& name, bool strip_nan_and_inf,
-		 bool mark_as_global, int precision) 
+		 const std::string& name, bool& infnan_warned,
+		 bool strip_nan_and_inf, bool mark_as_global,
+		 int precision)
 {
   bool success = true;
 
   if (! precision)
     precision = Vsave_precision;
 
   if (! name.empty ())
     os << "# name: " << name << "\n";
@@ -4489,49 +4490,66 @@ save_ascii_data (std::ostream& os, const
 	 << tmp.limit () << " "
 	 << tmp.inc () << "\n";
     }
   else if (tc.is_real_scalar ())
     {
       ascii_save_type (os, "scalar", mark_as_global);
 
       double d = tc.double_value ();
+
       if (strip_nan_and_inf)
 	{
 	  if (xisnan (d))
 	    {
 	      error ("only value to plot is NaN");
 	      success = false;
 	    }
 	  else
 	    {
 	      d = xisinf (d) ? (d > 0 ? OCT_RBV : -OCT_RBV) : d;
 	      os << d << "\n";
 	    }
 	}
       else
-	os << d << "\n";
+	{
+	  if (! infnan_warned && (xisnan (d) || xisinf (d)))
+	    {
+	      warning ("save: Inf or NaN values may not be reloadable");
+	      infnan_warned = true;
+	    }
+
+	  os << d << "\n";
+	}
     }
   else if (tc.is_real_matrix ())
     {
       ascii_save_type (os, "matrix", mark_as_global);
+
       os << "# rows: " << tc.rows () << "\n"
 	 << "# columns: " << tc.columns () << "\n";
 
       Matrix tmp = tc.matrix_value ();
+
       if (strip_nan_and_inf)
 	tmp = strip_infnan (tmp);
+      else if (! infnan_warned && tmp.any_element_is_inf_or_nan ())
+	{
+	  warning ("save: Inf or NaN values may not be reloadable");
+	  infnan_warned = true;
+	}
 
       os << tmp;
     }
   else if (tc.is_complex_scalar ())
     {
       ascii_save_type (os, "complex scalar", mark_as_global);
 
       Complex c = tc.complex_value ();
+
       if (strip_nan_and_inf)
 	{
 	  if (xisnan (c))
 	    {
 	      error ("only value to plot is NaN");
 	      success = false;
 	    }
 	  else
@@ -4543,43 +4561,67 @@ save_ascii_data (std::ostream& os, const
 	      im = xisinf (im) ? (im > 0 ? OCT_RBV : -OCT_RBV) : im;
 
 	      c = Complex (re, im);
 
 	      os << c << "\n";
 	    }
 	}
       else
-	os << c << "\n";
+	{
+	  if (! infnan_warned && (xisnan (c) || xisinf (c)))
+	    {
+	      warning ("save: Inf or NaN values may not be reloadable");
+	      infnan_warned = true;
+	    }
+
+	  os << c << "\n";
+	}
     }
   else if (tc.is_complex_matrix ())
     {
       ascii_save_type (os, "complex matrix", mark_as_global);
+
       os << "# rows: " << tc.rows () << "\n"
 	 << "# columns: " << tc.columns () << "\n";
 
       ComplexMatrix tmp = tc.complex_matrix_value ();
+
       if (strip_nan_and_inf)
 	tmp = strip_infnan (tmp);
+      else if (! infnan_warned && tmp.any_element_is_inf_or_nan ())
+	{
+	  warning ("save: Inf or NaN values may not be reloadable");
+	  infnan_warned = true;
+	}
 
       os << tmp;
     }
   else
     gripe_wrong_type_arg ("save", tc, false);
 
   os.precision (old_precision);
 
   return (os && success);
 }
 
+bool
+save_ascii_data_for_plotting (std::ostream& os, const octave_value& t,
+			      const std::string& name)
+{
+  bool infnan_warned = true;
+
+  save_ascii_data (os, t, name, infnan_warned, true, false, 0);
+}
+
 // Save the info from sr on stream os in the format specified by fmt.
 
 static void
 do_save (std::ostream& os, symbol_record *sr, load_save_format fmt,
-	 int save_as_floats)
+	 int save_as_floats, bool& infnan_warned)
 {
   if (! sr->is_variable ())
     {
       error ("save: can only save variables, not functions");
       return;
     }
 
   std::string name = sr->name ();
@@ -4589,17 +4631,17 @@ do_save (std::ostream& os, symbol_record
   octave_value tc = sr->def ();
 
   if (tc.is_undefined ())
     return;
 
   switch (fmt)
     {
     case LS_ASCII:
-      save_ascii_data (os, tc, name, false, global);
+      save_ascii_data (os, tc, name, infnan_warned, false, global, 0);
       break;
 
     case LS_BINARY:
       save_binary_data (os, tc, name, help, global, save_as_floats);
       break;
 
     case LS_MAT_BINARY:
       save_mat_binary_data (os, tc, name);
@@ -4629,36 +4671,38 @@ static int
 save_vars (std::ostream& os, const std::string& pattern, bool save_builtins,
 	   load_save_format fmt, int save_as_floats)
 {
   Array<symbol_record *> vars = curr_sym_tab->glob
     (pattern, symbol_record::USER_VARIABLE, SYMTAB_ALL_SCOPES);
 
   int saved = vars.length ();
 
+  bool infnan_warned = false;
+
   for (int i = 0; i < saved; i++)
     {
-      do_save (os, vars (i), fmt, save_as_floats);
+      do_save (os, vars (i), fmt, save_as_floats, infnan_warned);
 
       if (error_state)
 	break;
     }
 
   if (! error_state && save_builtins)
     {
       vars = global_sym_tab->glob
 	(pattern, symbol_record::BUILTIN_VARIABLE, SYMTAB_ALL_SCOPES);
 
       int count = vars.length ();
 
       saved += count;
 
       for (int i = 0; i < count; i++)
 	{
-	  do_save (os, vars (i), fmt, save_as_floats);
+	  do_save (os, vars (i), fmt, save_as_floats, infnan_warned);
 
 	  if (error_state)
 	    break;
 	}
     }
 
   return saved;
 }
diff --git a/src/load-save.h b/src/load-save.h
--- a/src/load-save.h
+++ b/src/load-save.h
@@ -24,21 +24,19 @@ Software Foundation, 59 Temple Place - S
 #define octave_load_save_h 1
 
 #include <iostream>
 
 #include <string>
 
 class octave_value;
 
-extern bool save_ascii_data (std::ostream& os, const octave_value& t,
-			     const std::string& name = std::string (),
-			     bool strip_nan_and_inf = false,
-			     bool mark_as_global = false,
-			     int precision = 0);
+extern bool
+save_ascii_data_for_plotting (std::ostream& os, const octave_value& t,
+			      const std::string& name = std::string ());
 
 extern bool save_three_d (std::ostream& os, const octave_value& t,
 			  bool parametric = false);
 
 extern void save_user_variables (void);
 
 #endif
 
diff --git a/src/pt-plot.cc b/src/pt-plot.cc
--- a/src/pt-plot.cc
+++ b/src/pt-plot.cc
@@ -867,17 +867,17 @@ save_in_tmp_file (octave_value& t, int n
     {
       std::ofstream file (name.c_str ());
 
       if (file)
 	{
 	  switch (ndim)
 	    {
 	    case 2:
-	      save_ascii_data (file, t, name, true);
+	      save_ascii_data_for_plotting (file, t, name);
 	      break;
 
 	    case 3:
 	      save_three_d (file, t, parametric);
 	      break;
 
 	    default:
 	      gripe_2_or_3_dim_plot ();
