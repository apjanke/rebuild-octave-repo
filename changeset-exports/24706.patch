# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1518080763 18000
#      Thu Feb 08 04:06:03 2018 -0500
# Node ID 30e1d0bf7ade11f308bdc915e3b2d509166c8dc7
# Parent  8b346a19108e0a82f2c68bd6b163a5875649721a
use weak_ptr for symbol_scope_rep and symbol_record_rep pointers (bug #53092)

* symrec.h, symrec.cc (symbol_record_rep::m_fwd_scope): Manage with
std::weak_ptr.  Change all uses.  Wrap symbol_record_rep and
symbol_scope_rep pointers in std::shared_ptr<>.

* symscope.h, symscope.cc (symbol_scope_rep::m_parent): Manage with
std::weak_ptr.  Change all uses.  Wrap symbol_record_rep and
symbol_scope_rep pointers in std::shared_ptr<>.
(symbol_scope_rep::m_parent_fcn): Delete.
(symbol_scope_rep::set_parent): Simplify.
(symbol_scope_rep): Derive from std::enable_shared_from_this.
(symbol_scope_rep::look_nonlocal): Use shared_from_this instead of raw
pointer to this.
(symbol_scope_rep::get_rep_ptr, symbol_scope_rep::parent_scope_rep,
symbol_scope_rep::parent_fcn, symbol_scope::parent_fcn): Delete.
Delete <, <=, >=, and > operators.

* call-stack.cc (call_stack::goto_frame, call_stack::backtrace):
Don't display or return pointer to symbol_scope_rep.


diff --git a/libinterp/corefcn/call-stack.cc b/libinterp/corefcn/call-stack.cc
--- a/libinterp/corefcn/call-stack.cc
+++ b/libinterp/corefcn/call-stack.cc
@@ -394,7 +394,6 @@ namespace octave
                         << " at line " << elt.m_line
                         << " column " << elt.m_column
                         << " [" << elt.fcn_file_name () << "] "
-                        << " (scope = " << elt.m_scope.get_rep_ptr ()
                         << "[context = " << elt.m_context << "])"
                         << std::endl;
       }
@@ -578,14 +577,12 @@ namespace octave
     Cell& name = retval.contents (1);
     Cell& line = retval.contents (2);
     Cell& column = retval.contents (3);
-    Cell& scope = retval.contents (4);
     Cell& context = retval.contents (5);

     octave_idx_type k = 0;

     for (const auto& frm : frames)
       {
-        scope(k)   = frm.m_scope.get_rep_ptr ();
         context(k) = frm.m_context;
         file(k)    = frm.fcn_file_name ();
         name(k)    = frm.fcn_name (print_subfn);
diff --git a/libinterp/corefcn/symrec.cc b/libinterp/corefcn/symrec.cc
--- a/libinterp/corefcn/symrec.cc
+++ b/libinterp/corefcn/symrec.cc
@@ -49,7 +49,8 @@ namespace octave
     // only in symbol_record::symbol_record_rep::varref and
     // symbol_record::symbol_record_rep::varval.

-    return m_fwd_scope ? m_fwd_scope->current_context () : 0;
+    auto t_fwd_scope = m_fwd_scope.lock ();
+    return t_fwd_scope ? t_fwd_scope->current_context () : 0;
   }

   void
@@ -64,8 +65,8 @@ namespace octave
     mark_persistent ();
   }

-  symbol_record::symbol_record_rep *
-  symbol_record::symbol_record_rep::dup (symbol_scope_rep *new_scope) const
+  std::shared_ptr<symbol_record::symbol_record_rep>
+  symbol_record::symbol_record_rep::dup (const std::shared_ptr<symbol_scope_rep>& new_scope) const
   {
     // FIXME: is this the right thing do to?
     if (auto t_fwd_rep = m_fwd_rep.lock ())
@@ -73,8 +74,9 @@ namespace octave

     static const context_id FIXME_CONTEXT = 0;

-    return new symbol_record_rep (m_name, varval (FIXME_CONTEXT),
-                                  m_storage_class);
+    return std::shared_ptr<symbol_record_rep>
+      (new symbol_record_rep (m_name, varval (FIXME_CONTEXT),
+                              m_storage_class));
   }

   octave_value
diff --git a/libinterp/corefcn/symrec.h b/libinterp/corefcn/symrec.h
--- a/libinterp/corefcn/symrec.h
+++ b/libinterp/corefcn/symrec.h
@@ -80,7 +80,7 @@ namespace octave

       symbol_record_rep (const std::string& nm, const octave_value& v,
                          unsigned int sc)
-        : m_storage_class (sc), m_name (nm), m_fwd_scope (nullptr),
+        : m_storage_class (sc), m_name (nm), m_fwd_scope (),
           m_fwd_rep (), m_value_stack ()
       {
         m_value_stack.push_back (v);
@@ -478,7 +478,7 @@ namespace octave

       void init_persistent (void);

-      void bind_fwd_rep (symbol_scope_rep *fwd_scope,
+      void bind_fwd_rep (const std::shared_ptr<symbol_scope_rep>& fwd_scope,
                          const std::shared_ptr<symbol_record_rep>& fwd_rep)
       {
         // If this object is already bound to another scope (for
@@ -504,11 +504,12 @@ namespace octave
         // global in a script remain linked as globals in the
         // enclosing scope.

-        m_fwd_scope = nullptr;
+        m_fwd_scope = std::weak_ptr<symbol_scope_rep> ();
         m_fwd_rep.reset ();
       }

-      symbol_record_rep * dup (symbol_scope_rep *new_scope) const;
+      std::shared_ptr<symbol_record_rep>
+      dup (const std::shared_ptr<symbol_scope_rep>& new_scope) const;

       octave_value dump (context_id context) const;

@@ -522,7 +523,7 @@ namespace octave

       std::string m_name;

-      symbol_scope_rep *m_fwd_scope;
+      std::weak_ptr<symbol_scope_rep> m_fwd_scope;

       std::weak_ptr<symbol_record_rep> m_fwd_rep;

@@ -543,7 +544,7 @@ namespace octave

     ~symbol_record (void) = default;

-    symbol_record dup (symbol_scope_rep *sid) const
+    symbol_record dup (const std::shared_ptr<symbol_scope_rep>& sid) const
     {
       return symbol_record (m_rep->dup (sid));
     }
@@ -652,7 +653,8 @@ namespace octave

     unsigned int storage_class (void) const { return m_rep->storage_class (); }

-    void bind_fwd_rep (symbol_scope_rep *fwd_scope, const symbol_record& sr)
+    void bind_fwd_rep (const std::shared_ptr<symbol_scope_rep>& fwd_scope,
+                       const symbol_record& sr)
     {
       m_rep->bind_fwd_rep (fwd_scope, sr.m_rep);
     }
@@ -669,7 +671,9 @@ namespace octave
     std::shared_ptr<symbol_record_rep> m_rep;

     // NEW_REP must be dynamically allocated or nullptr.
-    symbol_record (symbol_record_rep *new_rep) : m_rep (new_rep) { }
+    symbol_record (const std::shared_ptr<symbol_record_rep>& new_rep)
+      : m_rep (new_rep)
+    { }

     octave_value find_function (const std::string& name,
                                 const octave_value_list& args) const;
diff --git a/libinterp/corefcn/symscope.cc b/libinterp/corefcn/symscope.cc
--- a/libinterp/corefcn/symscope.cc
+++ b/libinterp/corefcn/symscope.cc
@@ -93,7 +93,9 @@ namespace octave
       {
         symbol_record ret (name);

-        if (m_is_nested && m_parent && m_parent->look_nonlocal (name, ret))
+        auto t_parent = m_parent.lock ();
+
+        if (m_is_nested && t_parent && t_parent->look_nonlocal (name, ret))
           return m_symbols[name] = ret;
         else
           {
@@ -141,8 +143,10 @@ namespace octave
     if (p != m_subfunctions.end ())
       return p->second;

-    if (m_parent)
-      return m_parent->find_subfunction (name);
+    auto t_parent = m_parent.lock ();
+
+    if (t_parent)
+      return t_parent->find_subfunction (name);

     return octave_value ();
   }
@@ -160,31 +164,17 @@ namespace octave
   }

   void
-  symbol_scope_rep::set_parent (symbol_scope_rep *p)
+  symbol_scope_rep::set_parent (const std::shared_ptr<symbol_scope_rep>& parent)
   {
-    m_parent = p;
-
-    if (m_parent)
-      {
-        // If m_parent is the top-level scope, there will be no parent
-        // function.
-
-        octave_function *current_fcn = function ();
-
-        if (current_fcn && current_fcn->is_anonymous_function ())
-          {
-            octave_function *parent_fcn = m_parent->function ();
-
-            if (parent_fcn)
-              m_parent_fcn = octave_value (parent_fcn, true);
-          }
-      }
+    m_parent = std::weak_ptr<symbol_scope_rep> (parent);
   }

   void
   symbol_scope_rep::update_nest (void)
   {
-    if (m_parent)
+    auto t_parent = m_parent.lock ();
+
+    if (t_parent)
       {
         // fix bad symbol_records
         for (auto& nm_sr : m_symbols)
@@ -192,7 +182,7 @@ namespace octave
             symbol_record& ours = nm_sr.second;

             if (! ours.is_formal ()
-                && m_is_nested && m_parent->look_nonlocal (nm_sr.first, ours))
+                && m_is_nested && t_parent->look_nonlocal (nm_sr.first, ours))
               {
                 if (ours.is_global () || ours.is_persistent ())
                   error ("global and persistent may only be used in the topmost level in which a nested variable is used");
@@ -219,12 +209,14 @@ namespace octave
     table_iterator p = m_symbols.find (name);
     if (p == m_symbols.end ())
       {
-        if (m_is_nested && m_parent)
-          return m_parent->look_nonlocal (name, result);
+        auto t_parent = m_parent.lock ();
+
+        if (m_is_nested && t_parent)
+          return t_parent->look_nonlocal (name, result);
       }
     else if (! p->second.is_automatic ())
       {
-        result.bind_fwd_rep (this, p->second);
+        result.bind_fwd_rep (shared_from_this (), p->second);
         return true;
       }

@@ -232,7 +224,8 @@ namespace octave
   }

   void
-  symbol_scope_rep::bind_script_symbols (symbol_scope_rep *curr_scope)
+  symbol_scope_rep::bind_script_symbols
+    (const std::shared_ptr<symbol_scope_rep>& curr_scope)
   {
     for (auto& nm_sr : m_symbols)
       nm_sr.second.bind_fwd_rep (curr_scope,
diff --git a/libinterp/corefcn/symscope.h b/libinterp/corefcn/symscope.h
--- a/libinterp/corefcn/symscope.h
+++ b/libinterp/corefcn/symscope.h
@@ -50,6 +50,7 @@ namespace octave
   class symbol_scope;

   class symbol_scope_rep
+    : public std::enable_shared_from_this<symbol_scope_rep>
   {
   public:

@@ -64,9 +65,8 @@ namespace octave
     subfunctions_iterator;

     symbol_scope_rep (const std::string& name = "")
-      : m_name (name), m_symbols (), m_subfunctions (),
-        m_fcn (nullptr), m_parent (nullptr), m_parent_fcn (),
-        m_children (), m_is_nested (false),
+      : m_name (name), m_symbols (), m_subfunctions (), m_fcn (nullptr),
+        m_parent (), m_children (), m_is_nested (false),
         m_is_static (false), m_context (0)
     { }

@@ -91,19 +91,20 @@ namespace octave

     void mark_static (void) { m_is_static = true; }

-    symbol_scope_rep * parent_scope_rep (void) const { return m_parent; }
-
-    octave_value parent_fcn (void) const { return m_parent_fcn; }
+    std::shared_ptr<symbol_scope_rep> parent_scope_rep (void) const
+    {
+      return m_parent.lock ();
+    }

-    symbol_scope_rep * dup (void) const
+    std::shared_ptr<symbol_scope_rep> dup (void) const
     {
-      symbol_scope_rep *new_sid = new symbol_scope_rep (m_name);
+      std::shared_ptr<symbol_scope_rep> new_sid
+        = std::shared_ptr<symbol_scope_rep> (new symbol_scope_rep (m_name));

       for (const auto& nm_sr : m_symbols)
         new_sid->insert_symbol_record (nm_sr.second.dup (new_sid));

       new_sid->m_parent = m_parent;
-      new_sid->m_parent_fcn = m_parent_fcn;

       return new_sid;
     }
@@ -128,7 +129,8 @@ namespace octave
         return p->second;
     }

-    void inherit_internal (symbol_scope_rep& donor_scope_rep)
+    void inherit_internal
+      (const std::shared_ptr<symbol_scope_rep>& donor_scope_rep)
     {
       for (auto& nm_sr : m_symbols)
         {
@@ -140,7 +142,7 @@ namespace octave

               if (nm != "__retval__")
                 {
-                  octave_value val = donor_scope_rep.varval (nm);
+                  octave_value val = donor_scope_rep->varval (nm);

                   if (val.is_defined ())
                     {
@@ -153,14 +155,16 @@ namespace octave
         }
     }

-    void inherit (symbol_scope_rep *donor_scope_rep)
+    void inherit (const std::shared_ptr<symbol_scope_rep>& donor_scope_rep)
     {
-      while (donor_scope_rep)
+      std::shared_ptr<symbol_scope_rep> dsr = donor_scope_rep;
+
+      while (dsr)
         {
-          inherit_internal (*donor_scope_rep);
+          inherit_internal (dsr);

-          if (donor_scope_rep->is_nested ())
-            donor_scope_rep = parent_scope_rep ();
+          if (dsr->is_nested ())
+            dsr = parent_scope_rep ();
           else
             break;
         }
@@ -513,13 +517,13 @@ namespace octave

     void set_function (octave_user_function *fcn) { m_fcn = fcn; }

-    void set_parent (symbol_scope_rep *p);
+    void set_parent (const std::shared_ptr<symbol_scope_rep>& parent);

     void update_nest (void);

     bool look_nonlocal (const std::string& name, symbol_record& result);

-    void bind_script_symbols (symbol_scope_rep *curr_scope);
+    void bind_script_symbols (const std::shared_ptr<symbol_scope_rep>& curr_scope);

     void unbind_script_symbols (void);

@@ -545,8 +549,7 @@ namespace octave
     octave_user_function *m_fcn;

     // Parent of nested function (may be null).
-    symbol_scope_rep *m_parent;
-    octave_value m_parent_fcn;
+    std::weak_ptr<symbol_scope_rep> m_parent;

     // Child nested functions.
     std::vector<symbol_scope> m_children;
@@ -571,7 +574,9 @@ namespace octave

     // NEW_REP must be dynamically allocated or nullptr.  If it is
     // nullptr, the scope is invalid.
-    symbol_scope (symbol_scope_rep *new_rep = nullptr) : m_rep (new_rep) { }
+    symbol_scope (const std::shared_ptr<symbol_scope_rep> new_rep = nullptr)
+      : m_rep (new_rep)
+    { }

     symbol_scope (const symbol_scope&) = default;

@@ -611,15 +616,17 @@ namespace octave
         m_rep->mark_static ();
     }

-    symbol_scope_rep * parent_scope (void) const
+    std::shared_ptr<symbol_scope_rep> parent_scope (void) const
     {
       return m_rep ? m_rep->parent_scope_rep () : nullptr;
     }

-    octave_value parent_fcn (void) const
+    octave_value parent_fcn (void) const;
+#if 0
     {
       return m_rep ? m_rep->parent_fcn () : octave_value ();
     }
+#endif

     symbol_scope dup (void) const
     {
@@ -906,12 +913,6 @@ namespace octave
         m_rep->set_parent (p.get_rep ());
     }

-    void set_parent (symbol_scope_rep *p)
-    {
-      if (m_rep)
-        m_rep->set_parent (p);
-    }
-
     void update_nest (void)
     {
       if (m_rep)
@@ -935,9 +936,9 @@ namespace octave
         m_rep->unbind_script_symbols ();
     }

-    symbol_scope_rep * get_rep (void) const
+    std::shared_ptr<symbol_scope_rep> get_rep (void) const
     {
-      return m_rep.get ();
+      return m_rep;
     }

     friend bool operator == (const symbol_scope& a, const symbol_scope& b)
@@ -950,28 +951,6 @@ namespace octave
       return a.m_rep != b.m_rep;
     }

-    friend bool operator < (const symbol_scope& a, const symbol_scope& b)
-    {
-      return a.m_rep < b.m_rep;
-    }
-
-    friend bool operator <= (const symbol_scope& a, const symbol_scope& b)
-    {
-      return a.m_rep <= b.m_rep;
-    }
-
-    friend bool operator >= (const symbol_scope& a, const symbol_scope& b)
-    {
-      return a.m_rep >= b.m_rep;
-    }
-
-    friend bool operator > (const symbol_scope& a, const symbol_scope& b)
-    {
-      return a.m_rep > b.m_rep;
-    }
-
-    symbol_scope_rep * get_rep_ptr (void) const { return m_rep.get (); }
-
   private:

     std::shared_ptr<symbol_scope_rep> m_rep;
@@ -980,11 +959,6 @@ namespace octave
     {
       return m_rep ? m_rep->dump_symbols_map () : octave_value ();
     }
-
-    symbol_scope_rep * parent_scope_rep (void) const
-    {
-      return m_rep ? m_rep->parent_scope_rep () : nullptr;
-    }
   };
 }

diff --git a/libinterp/corefcn/call-stack.cc b/libinterp/corefcn/call-stack.cc
--- a/libinterp/corefcn/call-stack.cc
+++ b/libinterp/corefcn/call-stack.cc
@@ -389,17 +389,16 @@ namespace octave
 
         symtab.set_scope_and_context (elt.m_scope, elt.m_context);
 
         if (verbose)
           octave_stdout << "stopped in " << elt.fcn_name ()
                         << " at line " << elt.m_line
                         << " column " << elt.m_column
                         << " [" << elt.fcn_file_name () << "] "
-                        << " (scope = " << elt.m_scope.get_rep_ptr ()
                         << "[context = " << elt.m_context << "])"
                         << std::endl;
       }
 
     return retval;
   }
 
   bool
@@ -573,24 +572,22 @@ namespace octave
     size_t nframes = frames.size ();
 
     octave_map retval (dim_vector (nframes, 1), bt_fields);
 
     Cell& file = retval.contents (0);
     Cell& name = retval.contents (1);
     Cell& line = retval.contents (2);
     Cell& column = retval.contents (3);
-    Cell& scope = retval.contents (4);
     Cell& context = retval.contents (5);
 
     octave_idx_type k = 0;
 
     for (const auto& frm : frames)
       {
-        scope(k)   = frm.m_scope.get_rep_ptr ();
         context(k) = frm.m_context;
         file(k)    = frm.fcn_file_name ();
         name(k)    = frm.fcn_name (print_subfn);
         line(k)    = frm.m_line;
         column(k)  = frm.m_column;
 
         k++;
       }
diff --git a/libinterp/corefcn/symrec.cc b/libinterp/corefcn/symrec.cc
--- a/libinterp/corefcn/symrec.cc
+++ b/libinterp/corefcn/symrec.cc
@@ -44,42 +44,44 @@ namespace octave
   symbol_record::context_id
   symbol_record::symbol_record_rep::get_fwd_scope_context (void) const
   {
     // This should NOT recurse.  We only want to know the current
     // context of the immediately forwarded rep object.  This is used
     // only in symbol_record::symbol_record_rep::varref and
     // symbol_record::symbol_record_rep::varval.
 
-    return m_fwd_scope ? m_fwd_scope->current_context () : 0;
+    auto t_fwd_scope = m_fwd_scope.lock ();
+    return t_fwd_scope ? t_fwd_scope->current_context () : 0;
   }
 
   void
   symbol_record::symbol_record_rep::init_persistent (void)
   {
     if (auto t_fwd_rep = m_fwd_rep.lock ())
       {
         t_fwd_rep->init_persistent ();
         return;
       }
 
     mark_persistent ();
   }
 
-  symbol_record::symbol_record_rep *
-  symbol_record::symbol_record_rep::dup (symbol_scope_rep *new_scope) const
+  std::shared_ptr<symbol_record::symbol_record_rep>
+  symbol_record::symbol_record_rep::dup (const std::shared_ptr<symbol_scope_rep>& new_scope) const
   {
     // FIXME: is this the right thing do to?
     if (auto t_fwd_rep = m_fwd_rep.lock ())
       return t_fwd_rep->dup (new_scope);
 
     static const context_id FIXME_CONTEXT = 0;
 
-    return new symbol_record_rep (m_name, varval (FIXME_CONTEXT),
-                                  m_storage_class);
+    return std::shared_ptr<symbol_record_rep>
+      (new symbol_record_rep (m_name, varval (FIXME_CONTEXT),
+                              m_storage_class));
   }
 
   octave_value
   symbol_record::symbol_record_rep::dump (context_id context) const
   {
     if (auto t_fwd_rep = m_fwd_rep.lock ())
       return t_fwd_rep->dump (context);
 
diff --git a/libinterp/corefcn/symrec.h b/libinterp/corefcn/symrec.h
--- a/libinterp/corefcn/symrec.h
+++ b/libinterp/corefcn/symrec.h
@@ -75,17 +75,17 @@ namespace octave
   private:
 
     class symbol_record_rep
     {
     public:
 
       symbol_record_rep (const std::string& nm, const octave_value& v,
                          unsigned int sc)
-        : m_storage_class (sc), m_name (nm), m_fwd_scope (nullptr),
+        : m_storage_class (sc), m_name (nm), m_fwd_scope (),
           m_fwd_rep (), m_value_stack ()
       {
         m_value_stack.push_back (v);
       }
 
       // No copying!
 
       symbol_record_rep (const symbol_record_rep& ov) = delete;
@@ -473,17 +473,17 @@ namespace octave
 
         m_storage_class &= ~added_static;
       }
 
       unsigned int storage_class (void) const { return m_storage_class; }
 
       void init_persistent (void);
 
-      void bind_fwd_rep (symbol_scope_rep *fwd_scope,
+      void bind_fwd_rep (const std::shared_ptr<symbol_scope_rep>& fwd_scope,
                          const std::shared_ptr<symbol_record_rep>& fwd_rep)
       {
         // If this object is already bound to another scope (for
         // example, a variable in a script or nested function is bound
         // to the enclosing scope), then bind that object to the next
         // scope.  FIXME: can this happen for any other reason than we
         // are making a variable in a script global?
 
@@ -499,35 +499,36 @@ namespace octave
 
       void unbind_fwd_rep (void)
       {
         // When unbinding an object, only break the immediate link.
         // By doing that, we ensure that any variables that are made
         // global in a script remain linked as globals in the
         // enclosing scope.
 
-        m_fwd_scope = nullptr;
+        m_fwd_scope = std::weak_ptr<symbol_scope_rep> ();
         m_fwd_rep.reset ();
       }
 
-      symbol_record_rep * dup (symbol_scope_rep *new_scope) const;
+      std::shared_ptr<symbol_record_rep>
+      dup (const std::shared_ptr<symbol_scope_rep>& new_scope) const;
 
       octave_value dump (context_id context) const;
 
       std::string name (void) const { return m_name; }
 
       void rename (const std::string& new_name) { m_name = new_name; }
 
     private:
 
       unsigned int m_storage_class;
 
       std::string m_name;
 
-      symbol_scope_rep *m_fwd_scope;
+      std::weak_ptr<symbol_scope_rep> m_fwd_scope;
 
       std::weak_ptr<symbol_record_rep> m_fwd_rep;
 
       std::deque<octave_value> m_value_stack;
     };
 
   public:
 
@@ -538,17 +539,17 @@ namespace octave
     { }
 
     symbol_record (const symbol_record& sr) = default;
 
     symbol_record& operator = (const symbol_record& sr) = default;
 
     ~symbol_record (void) = default;
 
-    symbol_record dup (symbol_scope_rep *sid) const
+    symbol_record dup (const std::shared_ptr<symbol_scope_rep>& sid) const
     {
       return symbol_record (m_rep->dup (sid));
     }
 
     std::string name (void) const { return m_rep->name (); }
 
     void rename (const std::string& new_name) { m_rep->rename (new_name); }
 
@@ -647,34 +648,37 @@ namespace octave
     void unmark_inherited (void) { m_rep->unmark_inherited (); }
     void unmark_persistent (void) { m_rep->unmark_persistent (); }
     void unmark_added_static (void) { m_rep->unmark_added_static (); }
 
     void init_persistent (void) { m_rep->init_persistent (); }
 
     unsigned int storage_class (void) const { return m_rep->storage_class (); }
 
-    void bind_fwd_rep (symbol_scope_rep *fwd_scope, const symbol_record& sr)
+    void bind_fwd_rep (const std::shared_ptr<symbol_scope_rep>& fwd_scope,
+                       const symbol_record& sr)
     {
       m_rep->bind_fwd_rep (fwd_scope, sr.m_rep);
     }
 
     void unbind_fwd_rep (void) { m_rep->unbind_fwd_rep (); }
 
     octave_value dump (context_id context) const
     {
       return m_rep->dump (context);
     }
 
   private:
 
     std::shared_ptr<symbol_record_rep> m_rep;
 
     // NEW_REP must be dynamically allocated or nullptr.
-    symbol_record (symbol_record_rep *new_rep) : m_rep (new_rep) { }
+    symbol_record (const std::shared_ptr<symbol_record_rep>& new_rep)
+      : m_rep (new_rep)
+    { }
 
     octave_value find_function (const std::string& name,
                                 const octave_value_list& args) const;
 
     static octave_value dummy_octave_value;
   };
 }
 
diff --git a/libinterp/corefcn/symscope.cc b/libinterp/corefcn/symscope.cc
--- a/libinterp/corefcn/symscope.cc
+++ b/libinterp/corefcn/symscope.cc
@@ -88,17 +88,19 @@ namespace octave
   symbol_scope_rep::insert (const std::string& name, bool force_add)
   {
     table_iterator p = m_symbols.find (name);
 
     if (p == m_symbols.end ())
       {
         symbol_record ret (name);
 
-        if (m_is_nested && m_parent && m_parent->look_nonlocal (name, ret))
+        auto t_parent = m_parent.lock ();
+
+        if (m_is_nested && t_parent && t_parent->look_nonlocal (name, ret))
           return m_symbols[name] = ret;
         else
           {
             if (m_is_static && ! force_add)
               ret.mark_added_static ();
 
             return m_symbols[name] = ret;
           }
@@ -136,18 +138,20 @@ namespace octave
   octave_value
   symbol_scope_rep::find_subfunction (const std::string& name) const
   {
     subfunctions_const_iterator p = m_subfunctions.find (name);
 
     if (p != m_subfunctions.end ())
       return p->second;
 
-    if (m_parent)
-      return m_parent->find_subfunction (name);
+    auto t_parent = m_parent.lock ();
+
+    if (t_parent)
+      return t_parent->find_subfunction (name);
 
     return octave_value ();
   }
 
   void
   symbol_scope_rep::mark_subfunctions_in_scope_as_private (const std::string& class_name)
   {
     for (auto& nm_sf : m_subfunctions)
@@ -155,49 +159,35 @@ namespace octave
         octave_function *fcn = nm_sf.second.function_value ();
 
         if (fcn)
           fcn->mark_as_private_function (class_name);
       }
   }
 
   void
-  symbol_scope_rep::set_parent (symbol_scope_rep *p)
+  symbol_scope_rep::set_parent (const std::shared_ptr<symbol_scope_rep>& parent)
   {
-    m_parent = p;
-
-    if (m_parent)
-      {
-        // If m_parent is the top-level scope, there will be no parent
-        // function.
-
-        octave_function *current_fcn = function ();
-
-        if (current_fcn && current_fcn->is_anonymous_function ())
-          {
-            octave_function *parent_fcn = m_parent->function ();
-
-            if (parent_fcn)
-              m_parent_fcn = octave_value (parent_fcn, true);
-          }
-      }
+    m_parent = std::weak_ptr<symbol_scope_rep> (parent);
   }
 
   void
   symbol_scope_rep::update_nest (void)
   {
-    if (m_parent)
+    auto t_parent = m_parent.lock ();
+
+    if (t_parent)
       {
         // fix bad symbol_records
         for (auto& nm_sr : m_symbols)
           {
             symbol_record& ours = nm_sr.second;
 
             if (! ours.is_formal ()
-                && m_is_nested && m_parent->look_nonlocal (nm_sr.first, ours))
+                && m_is_nested && t_parent->look_nonlocal (nm_sr.first, ours))
               {
                 if (ours.is_global () || ours.is_persistent ())
                   error ("global and persistent may only be used in the topmost level in which a nested variable is used");
               }
           }
 
         // The scopes of nested functions are static.
         m_is_static = true;
@@ -214,30 +204,33 @@ namespace octave
 
   bool
   symbol_scope_rep::look_nonlocal (const std::string& name,
                                    symbol_record& result)
   {
     table_iterator p = m_symbols.find (name);
     if (p == m_symbols.end ())
       {
-        if (m_is_nested && m_parent)
-          return m_parent->look_nonlocal (name, result);
+        auto t_parent = m_parent.lock ();
+
+        if (m_is_nested && t_parent)
+          return t_parent->look_nonlocal (name, result);
       }
     else if (! p->second.is_automatic ())
       {
-        result.bind_fwd_rep (this, p->second);
+        result.bind_fwd_rep (shared_from_this (), p->second);
         return true;
       }
 
     return false;
   }
 
   void
-  symbol_scope_rep::bind_script_symbols (symbol_scope_rep *curr_scope)
+  symbol_scope_rep::bind_script_symbols
+    (const std::shared_ptr<symbol_scope_rep>& curr_scope)
   {
     for (auto& nm_sr : m_symbols)
       nm_sr.second.bind_fwd_rep (curr_scope,
                                  curr_scope->find_symbol (nm_sr.first));
   }
 
   void
   symbol_scope_rep::unbind_script_symbols (void)
diff --git a/libinterp/corefcn/symscope.h b/libinterp/corefcn/symscope.h
--- a/libinterp/corefcn/symscope.h
+++ b/libinterp/corefcn/symscope.h
@@ -45,33 +45,33 @@ class octave_user_function;
 #include "ovl.h"
 #include "symrec.h"
 
 namespace octave
 {
   class symbol_scope;
 
   class symbol_scope_rep
+    : public std::enable_shared_from_this<symbol_scope_rep>
   {
   public:
 
     typedef std::map<std::string, symbol_record>::const_iterator
     table_const_iterator;
     typedef std::map<std::string, symbol_record>::iterator
     table_iterator;
 
     typedef std::map<std::string, octave_value>::const_iterator
     subfunctions_const_iterator;
     typedef std::map<std::string, octave_value>::iterator
     subfunctions_iterator;
 
     symbol_scope_rep (const std::string& name = "")
-      : m_name (name), m_symbols (), m_subfunctions (),
-        m_fcn (nullptr), m_parent (nullptr), m_parent_fcn (),
-        m_children (), m_is_nested (false),
+      : m_name (name), m_symbols (), m_subfunctions (), m_fcn (nullptr),
+        m_parent (), m_children (), m_is_nested (false),
         m_is_static (false), m_context (0)
     { }
 
     // No copying!
 
     symbol_scope_rep (const symbol_scope&) = delete;
 
     symbol_scope_rep& operator = (const symbol_scope&) = delete;
@@ -86,29 +86,30 @@ namespace octave
     bool is_nested (void) const { return m_is_nested; }
 
     void mark_nested (void) { m_is_nested = true; }
 
     bool is_static (void) const { return m_is_static; }
 
     void mark_static (void) { m_is_static = true; }
 
-    symbol_scope_rep * parent_scope_rep (void) const { return m_parent; }
-
-    octave_value parent_fcn (void) const { return m_parent_fcn; }
+    std::shared_ptr<symbol_scope_rep> parent_scope_rep (void) const
+    {
+      return m_parent.lock ();
+    }
 
-    symbol_scope_rep * dup (void) const
+    std::shared_ptr<symbol_scope_rep> dup (void) const
     {
-      symbol_scope_rep *new_sid = new symbol_scope_rep (m_name);
+      std::shared_ptr<symbol_scope_rep> new_sid
+        = std::shared_ptr<symbol_scope_rep> (new symbol_scope_rep (m_name));
 
       for (const auto& nm_sr : m_symbols)
         new_sid->insert_symbol_record (nm_sr.second.dup (new_sid));
 
       new_sid->m_parent = m_parent;
-      new_sid->m_parent_fcn = m_parent_fcn;
 
       return new_sid;
     }
 
     void set_context (symbol_record::context_id context)
     {
       m_context = context;
     }
@@ -123,49 +124,52 @@ namespace octave
       table_iterator p = m_symbols.find (name);
 
       if (p == m_symbols.end ())
         return insert (name);
       else
         return p->second;
     }
 
-    void inherit_internal (symbol_scope_rep& donor_scope_rep)
+    void inherit_internal
+      (const std::shared_ptr<symbol_scope_rep>& donor_scope_rep)
     {
       for (auto& nm_sr : m_symbols)
         {
           symbol_record& sr = nm_sr.second;
 
           if (! (sr.is_automatic () || sr.is_formal ()))
             {
               std::string nm = sr.name ();
 
               if (nm != "__retval__")
                 {
-                  octave_value val = donor_scope_rep.varval (nm);
+                  octave_value val = donor_scope_rep->varval (nm);
 
                   if (val.is_defined ())
                     {
                       sr.assign (val, m_context);
 
                       sr.mark_inherited ();
                     }
                 }
             }
         }
     }
 
-    void inherit (symbol_scope_rep *donor_scope_rep)
+    void inherit (const std::shared_ptr<symbol_scope_rep>& donor_scope_rep)
     {
-      while (donor_scope_rep)
+      std::shared_ptr<symbol_scope_rep> dsr = donor_scope_rep;
+
+      while (dsr)
         {
-          inherit_internal (*donor_scope_rep);
+          inherit_internal (dsr);
 
-          if (donor_scope_rep->is_nested ())
-            donor_scope_rep = parent_scope_rep ();
+          if (dsr->is_nested ())
+            dsr = parent_scope_rep ();
           else
             break;
         }
     }
 
     octave_value
     find (const std::string& name, const octave_value_list& args,
           bool skip_variables, bool local_funcs);
@@ -508,23 +512,23 @@ namespace octave
     std::string name (void) const { return m_name; }
 
     void cache_name (const std::string& name) { m_name = name; }
 
     octave_user_function *function (void) { return m_fcn; }
 
     void set_function (octave_user_function *fcn) { m_fcn = fcn; }
 
-    void set_parent (symbol_scope_rep *p);
+    void set_parent (const std::shared_ptr<symbol_scope_rep>& parent);
 
     void update_nest (void);
 
     bool look_nonlocal (const std::string& name, symbol_record& result);
 
-    void bind_script_symbols (symbol_scope_rep *curr_scope);
+    void bind_script_symbols (const std::shared_ptr<symbol_scope_rep>& curr_scope);
 
     void unbind_script_symbols (void);
 
     octave_value dump_symbols_map (void) const;
 
   private:
 
     // Name for this scope (usually the corresponding filename of the
@@ -540,18 +544,17 @@ namespace octave
     // The list of subfunctions (if any) in the order they appear in
     // the function file.
     std::list<std::string> m_subfunction_names;
 
     // The associated user code (may be null).
     octave_user_function *m_fcn;
 
     // Parent of nested function (may be null).
-    symbol_scope_rep *m_parent;
-    octave_value m_parent_fcn;
+    std::weak_ptr<symbol_scope_rep> m_parent;
 
     // Child nested functions.
     std::vector<symbol_scope> m_children;
 
     // If true, then this scope belongs to a nested function.
     bool m_is_nested;
 
     // If true then no variables can be added.
@@ -566,17 +569,19 @@ namespace octave
 
     // Create a valid but possibly unnamed scope.
     symbol_scope (const std::string& name)
       : m_rep (new symbol_scope_rep (name))
     { }
 
     // NEW_REP must be dynamically allocated or nullptr.  If it is
     // nullptr, the scope is invalid.
-    symbol_scope (symbol_scope_rep *new_rep = nullptr) : m_rep (new_rep) { }
+    symbol_scope (const std::shared_ptr<symbol_scope_rep> new_rep = nullptr)
+      : m_rep (new_rep)
+    { }
 
     symbol_scope (const symbol_scope&) = default;
 
     symbol_scope& operator = (const symbol_scope&) = default;
 
     ~symbol_scope (void) = default;
 
     bool is_valid (void) const { return bool (m_rep); }
@@ -606,26 +611,21 @@ namespace octave
     }
 
     void mark_static (void)
     {
       if (m_rep)
         m_rep->mark_static ();
     }
 
-    symbol_scope_rep * parent_scope (void) const
+    std::shared_ptr<symbol_scope_rep> parent_scope (void) const
     {
       return m_rep ? m_rep->parent_scope_rep () : nullptr;
     }
 
-    octave_value parent_fcn (void) const
-    {
-      return m_rep ? m_rep->parent_fcn () : octave_value ();
-    }
-
     symbol_scope dup (void) const
     {
       return symbol_scope (m_rep ? m_rep->dup () : nullptr);
     }
 
     void set_context (symbol_record::context_id context)
     {
       if (m_rep)
@@ -901,22 +901,16 @@ namespace octave
     }
 
     void set_parent (const symbol_scope& p)
     {
       if (m_rep)
         m_rep->set_parent (p.get_rep ());
     }
 
-    void set_parent (symbol_scope_rep *p)
-    {
-      if (m_rep)
-        m_rep->set_parent (p);
-    }
-
     void update_nest (void)
     {
       if (m_rep)
         m_rep->update_nest ();
     }
 
     bool look_nonlocal (const std::string& name, symbol_record& result)
     {
@@ -930,62 +924,35 @@ namespace octave
     }
 
     void unbind_script_symbols (void)
     {
       if (m_rep)
         m_rep->unbind_script_symbols ();
     }
 
-    symbol_scope_rep * get_rep (void) const
+    std::shared_ptr<symbol_scope_rep> get_rep (void) const
     {
-      return m_rep.get ();
+      return m_rep;
     }
 
     friend bool operator == (const symbol_scope& a, const symbol_scope& b)
     {
       return a.m_rep == b.m_rep;
     }
 
     friend bool operator != (const symbol_scope& a, const symbol_scope& b)
     {
       return a.m_rep != b.m_rep;
     }
 
-    friend bool operator < (const symbol_scope& a, const symbol_scope& b)
-    {
-      return a.m_rep < b.m_rep;
-    }
-
-    friend bool operator <= (const symbol_scope& a, const symbol_scope& b)
-    {
-      return a.m_rep <= b.m_rep;
-    }
-
-    friend bool operator >= (const symbol_scope& a, const symbol_scope& b)
-    {
-      return a.m_rep >= b.m_rep;
-    }
-
-    friend bool operator > (const symbol_scope& a, const symbol_scope& b)
-    {
-      return a.m_rep > b.m_rep;
-    }
-
-    symbol_scope_rep * get_rep_ptr (void) const { return m_rep.get (); }
-
   private:
 
     std::shared_ptr<symbol_scope_rep> m_rep;
 
     octave_value dump_symbols_map (void) const
     {
       return m_rep ? m_rep->dump_symbols_map () : octave_value ();
     }
-
-    symbol_scope_rep * parent_scope_rep (void) const
-    {
-      return m_rep ? m_rep->parent_scope_rep () : nullptr;
-    }
   };
 }
 
 #endif
