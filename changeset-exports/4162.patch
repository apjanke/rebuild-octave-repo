# HG changeset patch
# User jwe
# Date 1036888477 0
#      Sun Nov 10 00:34:37 2002 +0000
# Node ID bcdf1c264e087da6c709753e14e2f75e15a54b23
# Parent  8eb844b6349bdce5f15c4faa06527c09d83eee03
[project @ 2002-11-10 00:34:37 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,15 @@
+2002-11-09  Per Persson <persquare@mac.com>
+
+	* configure.in: Use $(TOPDIR)/src/octave, not $(bindir)/octave for
+	-bundle-loader argument.	
+
+	* aclocal.m4 (OCTAVE_CXX_PREPENDS_UNDERSCORE): Force result for OS X.
+
 2002-11-07  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* configure.in: Set FPICFLAG, Also set CXXPICFLAG, CPICFLAG,
 	FPICFLAG, and INCLUDE_LINK_DEPS for OS X.
 
 	* acx_blas.m4 (LIBS): Also check for Apple vecLib framework.
 
 2002-11-06  John W. Eaton  <jwe@bevo.che.wisc.edu>
diff --git a/aclocal.m4 b/aclocal.m4
--- a/aclocal.m4
+++ b/aclocal.m4
@@ -614,16 +614,21 @@ EOF
 ### XXX FIXME XXX -- Ignore test result on Windows.  Yes it prepends
 ### underscore, but LoadLibrary ignores it automatically.  The
 ### correct test is to build the shared library then try to grab the
 ### symbol from it with and without underscore.
     case "$canonical_host_type" in
       *-*-cygwin* | *-*-mingw*)
         octave_cv_cxx_prepends_underscore=no
       ;;
+### XXX FIXME XXX -- Ignore test result on OS X.  Yes it prepends
+### underscore, but also messes with the name so test fails (incorrectly).
+      *-*-darwin6*)
+        octave_cv_cxx_prepends_underscore=yes
+      ;;
     esac
   ])
   AC_MSG_RESULT($octave_cv_cxx_prepends_underscore)
   if test $octave_cv_cxx_prepends_underscore = yes; then
     AC_DEFINE(CXX_PREPENDS_UNDERSCORE, 1, [Define if your compiler prepends underscores to external names.])
   fi
 ])
 dnl
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -17,17 +17,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### for more details.
 ### 
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA. 
 
 AC_INIT
-AC_REVISION($Revision: 1.386 $)
+AC_REVISION($Revision: 1.387 $)
 AC_PREREQ(2.52)
 AC_CONFIG_SRCDIR([src/octave.cc])
 AC_CONFIG_HEADER(config.h)
 
 AC_DEFINE(OCTAVE_SOURCE, 1, [Define if this is Octave.])
   
 OCTAVE_HOST_TYPE
 
@@ -646,17 +646,17 @@ case "$canonical_host_type" in
     CPICFLAG=
     CXXPICFLAG=
     FPICFLAG=
     SH_LDFLAGS="-shared -Xlinker -expect_unresolved -Xlinker '*'"
     SONAME_FLAGS='-Xlinker -soname -Xlinker $@'
     RLD_FLAG='-Xlinker -rpath -Xlinker $(octlibdir)'
   ;;
   *-*-darwin*)
-    SH_LDFLAGS='-bundle -bundle_loader $(bindir)/octave'
+    SH_LDFLAGS='-bundle -bundle_loader $(TOPDIR)/src/octave'
     CXXPICFLAG=
     CPICFLAG=
     FPICFLAG=
     INCLUDE_LINK_DEPS=true
   ;;
   *-*-cygwin* | *-*-mingw*)
     CXXPICFLAG=
     CPICFLAG=
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2002-11-09  Per Persson <persquare@mac.com>
+
+	* oct-shlib.cc (octave_dyld_shlib): New class.
+	(make_shlib): Instantiate octave_dyld_shlib.
+
 2002-11-06  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* CMatrix.cc, dMatrix.cc: Sprinkle with OCTAVE_QUIT.
 
 	* ODESSA.cc (odessa_f, odessa_j, odessa_b): Abort on error.
 
 	* Array.h: Include <cstddef> here.
 
diff --git a/liboctave/oct-shlib.cc b/liboctave/oct-shlib.cc
--- a/liboctave/oct-shlib.cc
+++ b/liboctave/oct-shlib.cc
@@ -24,16 +24,20 @@ Software Foundation, 59 Temple Place - S
 #include <config.h>
 #endif
 
 #if defined (HAVE_SHL_LOAD_API)
 #include <cerrno>
 #include <cstring>
 #endif
 
+#if defined (HAVE_DYLD_API)
+#include <Mach-O/dyld.h>
+#endif
+
 extern "C"
 {
 #if defined (HAVE_DLOPEN_API)
 #if defined (HAVE_DLFCN_H)
 #include <dlfcn.h>
 #else
 extern void *dlopen (const char *, int);
 extern const char *dlerror (void);
@@ -519,27 +523,160 @@ octave_w32_shlib::close (octave_shlib::c
       FreeLibrary (handle);
 
       handle = 0;
 
       tabula_rasa ();
     }
 }
 
+#elif defined (HAVE_DYLD_API)
+
+class
+octave_dyld_shlib : public octave_base_shlib
+{
+public:
+
+  octave_dyld_shlib (void);
+
+  ~octave_dyld_shlib (void);
+
+  void open (const std::string& f, bool warn_future = false);
+
+  void *search (const std::string& name, name_mangler mangler = 0);
+
+  void close (octave_shlib::close_hook cl_hook = 0);
+
+  bool is_open (void) const {return (isOpen); }
+
+private:
+
+  // No copying!
+
+  octave_dyld_shlib (const octave_dyld_shlib&);
+
+  octave_dyld_shlib& operator = (const octave_dyld_shlib&);
+
+  bool isOpen;
+  NSObjectFileImage img;
+  NSModule handle;
+};
+
+octave_dyld_shlib::octave_dyld_shlib (void)
+  : octave_base_shlib (), isOpen (false), handle (0)
+{
+}
+
+octave_dyld_shlib::~octave_dyld_shlib (void)
+{
+  close ();
+}
+
+void
+octave_dyld_shlib::open (const std::string& f, bool warn_future)
+{
+  int returnCode;
+
+  if (! is_open ())
+    {
+      file = f;
+
+      returnCode = NSCreateObjectFileImageFromFile (file.c_str (), &img);
+
+      if (NSObjectFileImageSuccess == returnCode)
+	{
+	  handle = NSLinkModule (img, file.c_str (),
+				 (NSLINKMODULE_OPTION_RETURN_ON_ERROR
+				  | NSLINKMODULE_OPTION_PRIVATE));
+	  if (handle)
+	    {
+	      stamp_time (warn_future);
+	      isOpen = true;
+	    }
+	  else
+	    {
+	      (*current_liboctave_error_handler)
+		("couldn't link module %s", file.c_str ());	
+	    }
+	}
+      else
+	{
+	  (*current_liboctave_error_handler)
+	    ("got NSObjectFileImageReturnCode %d", returnCode);
+
+	  // XXX FIXME XXX -- should use NSLinkEditError () to get
+	  // more info on what went wrong.
+	}
+    }
+  else
+    {
+      (*current_liboctave_error_handler)
+	("bundle %s is already open", file.c_str ());
+    }
+}
+
+void *
+octave_dyld_shlib::search (const std::string& name,
+			   octave_shlib::name_mangler mangler)
+{
+  void *function = 0;
+
+  if (is_open ())
+    {
+      std::string sym_name = name;
+
+      if (mangler)
+	sym_name = mangler (name);
+
+      NSSymbol symbol = NSLookupSymbolInModule (handle, sym_name.c_str ());
+
+      if (symbol)
+	{
+	  function = NSAddressOfSymbol (symbol);
+	  add_to_fcn_names (name);
+	}
+    }
+  else
+    (*current_liboctave_error_handler)
+      ("bundle %s is not open", file.c_str ());
+
+  return function;
+}
+
+void
+octave_dyld_shlib::close (octave_shlib::close_hook cl_hook)
+{
+  if (is_open ())
+    {
+      do_close_hook (cl_hook);
+
+      NSUnLinkModule (handle, NSUNLINKMODULE_OPTION_RESET_LAZY_REFERENCES);
+
+      handle = 0;
+
+      if (NSDestroyObjectFileImage (img))
+	isOpen = false;
+
+      tabula_rasa ();
+    }
+}
+
 #endif
 
 octave_shlib *
 octave_shlib::make_shlib (void)
 {
 #if defined (HAVE_DLOPEN_API)
   return new octave_dlopen_shlib ();
 #elif defined (HAVE_SHL_LOAD_API)
   return new octave_shl_load_shlib ();
 #elif defined (HAVE_LOADLIBRARY_API)
   return new octave_w32_shlib ();
+#elif defined (HAVE_DYLD_API)
+  return new octave_dyld_shlib ();
 #else
   return new octave_base_shlib ();
 #endif
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
