# HG changeset patch
# User jwe
# Date 1142022420 0
#      Fri Mar 10 20:27:00 2006 +0000
# Node ID 1c334f7e7bef1d5e91ac367a2ff18bce7c4d8d3e
# Parent  13be36ec8279f85f5658eacc1075211218b19b12
[project @ 2006-03-10 20:27:00 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,12 @@
 2006-03-10  John W. Eaton  <jwe@octave.org>
 
+	* xpow.cc (elem_xpow): Only use complex pow if really necessary.
+
 	* symtab.cc (symbol_table::glob, symbol_table::symbol_list,
 	symbol_table::subsymbol_list): Force result to be a column
 	vector.
 
 	* oct-stream.h (octave_stream::stream_ok): Undo previous change.
 	Eliminate who parameter.  Change all callers.
 
 	* variables.cc (do_who): Return more info in structure array for
diff --git a/src/xpow.cc b/src/xpow.cc
--- a/src/xpow.cc
+++ b/src/xpow.cc
@@ -564,21 +564,25 @@ elem_xpow (const Matrix& a, double b)
 
   if (static_cast<int> (b) != b && a.any_element_is_negative ())
     {
       ComplexMatrix result (nr, nc);
 
       for (octave_idx_type j = 0; j < nc; j++)
 	for (octave_idx_type i = 0; i < nr; i++)
 	  {
-	    OCTAVE_QUIT; 
-      
-	    Complex atmp (a (i, j));
-
-	    result (i, j) = std::pow (atmp, b);
+	    OCTAVE_QUIT;
+	    double ax = a (i, j);
+	    if (ax < 0.0)
+	      {
+		Complex atmp (ax);
+		result (i, j) = std::pow (atmp, b);
+	      }
+	    else
+	      result (i, j) = std::pow (ax, b);
 	  }
 
       retval = result;
     }
   else
     {
       Matrix result (nr, nc);
 
@@ -632,19 +636,26 @@ done:
   if (convert_to_complex)
     {
       ComplexMatrix complex_result (nr, nc);
 
       for (octave_idx_type j = 0; j < nc; j++)
 	for (octave_idx_type i = 0; i < nr; i++)
 	  {
 	    OCTAVE_QUIT;
-	    Complex atmp (a (i, j));
-	    Complex btmp (b (i, j));
-	    complex_result (i, j) = std::pow (atmp, btmp);
+	    double ax = a (i, j);
+	    double bx = b (i, j);
+	    if (ax < 0.0 && static_cast<int> (bx) != bx)
+	      {
+		Complex atmp (ax);
+		Complex btmp (bx);
+		complex_result (i, j) = std::pow (atmp, btmp);
+	      }
+	    else
+	      complex_result (i, j) = std::pow (ax, bx);
 	  }
 
       retval = complex_result;
     }
   else
     {
       Matrix result (nr, nc);
 
@@ -948,20 +959,24 @@ elem_xpow (const NDArray& a, double b)
 
   if (static_cast<int> (b) != b && a.any_element_is_negative ())
     {
       ComplexNDArray result (a.dims ());
 
       for (octave_idx_type i = 0; i < a.length (); i++)
 	{
 	  OCTAVE_QUIT;
-
-	  Complex atmp (a (i));
-
-	  result(i) = std::pow (atmp, b);
+	  double ax = a (i);
+	  if (ax < 0.0)
+	    {
+	      Complex atmp (ax);
+	      result(i) = std::pow (atmp, b);
+	    }
+	  else
+	    result(i) = std::pow (ax, b);
 	}
 
       retval = result;
     }
   else
     {
       NDArray result (a.dims ());
 
@@ -1012,19 +1027,26 @@ done:
 
   if (convert_to_complex)
     {
       ComplexNDArray complex_result (a_dims);
 
       for (octave_idx_type i = 0; i < len; i++)
 	{
 	  OCTAVE_QUIT;
-	  Complex atmp (a(i));
-	  Complex btmp (b(i));
-	  complex_result(i) = std::pow (atmp, btmp);
+	  double ax = a(i);
+	  double bx = b(i);
+	  if (ax < 0.0 && static_cast<int> (bx) != bx)
+	    {
+	      Complex atmp (ax);
+	      Complex btmp (bx);
+	      complex_result(i) = std::pow (atmp, btmp);
+	    }
+	  else
+	    complex_result(i) = std::pow (ax, bx);
 	}
 
       retval = complex_result;
     }
   else
     {
       NDArray result (a_dims);
 
