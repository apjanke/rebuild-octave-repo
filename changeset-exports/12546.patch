# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1301355493 25200
#      Mon Mar 28 16:38:13 2011 -0700
# Node ID 39ca02387a320fade9682082c841eb2cdb6a3eb7
# Parent  e4a22302dc97d7b53189d735f4b653d7941a9b99
Improve docstrings for a number of functions.

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,16 @@
+2011-03-28  Rik  <octave@nomad.inbox5.com>
+
+	* interpreter/expr.txi: Eliminate space between variable and
+	parenthesis when using indexing.
+	* interpreter/intro.txi, interpreter/io.txi: Fix typos in docstring.
+	* interpreter/tips.txi: Add new recommendations for double spaces at
+	start of sentences and suggested variable names.
+
 2011-03-28  Rik  <octave@nomad.inbox5.com>
 
 	* interpreter/basics.txi: Add do_braindead_shortcircuit_evaluation to
 	the list of variables set by --traditional option.
 
 2011-03-27  Rik  <octave@nomad.inbox5.com>
 
 	* interpreter/expr.txi: Add allow_noninteger_range_as_index to
diff --git a/doc/interpreter/expr.txi b/doc/interpreter/expr.txi
--- a/doc/interpreter/expr.txi
+++ b/doc/interpreter/expr.txi
@@ -58,44 +58,44 @@ Indices may be scalars, vectors, ranges,
 Vectors are indexed using a single index expression.  Matrices may be
 indexed using one or two indices.  When using a single index
 expression, the elements of the matrix are taken in column-first order;
 the dimensions of the output match those of the index expression.  For
 example,
 
 @example
 @group
-a (2)       # a scalar
-a (1:2)     # a row vector
-a ([1; 2])  # a column vector
+a(2)       # a scalar
+a(1:2)     # a row vector
+a([1; 2])  # a column vector
 @end group
 @end example
 
 As a special case, when a colon is used as a single index, the output
 is a column vector containing all the elements of the vector or matrix.
 For example:
 
 @example
-a (:)       # a column vector
+a(:)       # a column vector
 @end example
 
 Given the matrix
 
 @example
 a = [1, 2; 3, 4]
 @end example
 
 @noindent
 all of the following expressions are equivalent
 
 @example
 @group
-a (1, [1, 2])
-a (1, 1:2)
-a (1, :)
+a(1, [1, 2])
+a(1, 1:2)
+a(1, :)
 @end group
 @end example
 
 @noindent
 and select the first row of the matrix.
 
 In general, an array with @samp{n} dimensions can be indexed using @samp{m}
 indices.  If @code{n == m}, each index corresponds to its respective dimension.
@@ -109,30 +109,30 @@ product of extents of the original dimen
 
 Indexing a scalar with a vector of ones can be used to create a
 vector the same size as the index vector, with each element equal to
 the value of the original scalar.  For example, the following statements
 
 @example
 @group
 a = 13;
-a (ones (1, 4))
+a(ones (1, 4))
 @end group
 @end example
 
 @noindent
 produce a vector whose four elements are all equal to 13.
 
 Similarly, indexing a scalar with two vectors of ones can be used to
 create a matrix.  For example the following statements
 
 @example
 @group
 a = 13;
-a (ones (1, 2), ones (1, 3))
+a(ones (1, 2), ones (1, 3))
 @end group
 @end example
 
 @noindent
 create a 2 by 3 matrix with all elements equal to 13.
 
 The last example could also be written as
 
diff --git a/doc/interpreter/intro.txi b/doc/interpreter/intro.txi
--- a/doc/interpreter/intro.txi
+++ b/doc/interpreter/intro.txi
@@ -380,17 +380,17 @@ in this manual in @ref{Command Line Edit
 
 Octave has an extensive help facility.  The same documentation that is
 available in printed form is also available from the Octave prompt,
 because both forms of the documentation are created from the same input
 file.
 
 In order to get good help you first need to know the name of the command
 that you want to use.  This name of the function may not always be
-obvious, but a good place to start is to just type @code{help --list}.
+obvious, but a good place to start is to type @code{help --list}.
 This will show you all the operators, keywords, built-in functions,
 and loadable functions available in the current session of Octave.  An
 alternative is to search the documentation using the @code{lookfor}
 function.  This function is described in @ref{Getting Help}.
 
 Once you know the name of the function you wish to use, you can get more
 help on the function by simply including the name as an argument to help.
 For example,
diff --git a/doc/interpreter/io.txi b/doc/interpreter/io.txi
--- a/doc/interpreter/io.txi
+++ b/doc/interpreter/io.txi
@@ -16,17 +16,17 @@
 @c along with Octave; see the file COPYING.  If not, see
 @c <http://www.gnu.org/licenses/>.
 
 @node Input and Output
 @chapter Input and Output
 
 Octave supports several ways of reading and writing data to or from the
 prompt or a file.  The simplest functions for data Input and Output
-(I/O) are easy to use, but only provides limited control of how
+(I/O) are easy to use, but only provide limited control of how
 data is processed.  For more control, a set of functions modelled
 after the C standard library are also provided by Octave.
 
 @menu
 * Basic Input and Output::      
 * C-Style I/O Functions::       
 * GUI Dialogs for I/O::       
 @end menu
diff --git a/doc/interpreter/tips.txi b/doc/interpreter/tips.txi
--- a/doc/interpreter/tips.txi
+++ b/doc/interpreter/tips.txi
@@ -458,39 +458,64 @@ if they have proper subjects.
 @item
 Write documentation strings in the active voice, not the passive, and in
 the present tense, not the future.  For instance, use ``Return a list
 containing A and B.'' instead of ``A list containing A and B will be
 returned.''
 
 @item
 Avoid using the word ``cause'' (or its equivalents) unnecessarily.
-Instead of, ``Cause Octave to display text in boldface,'' write just
+Instead of, ``Cause Octave to display text in boldface,'' just write
 ``Display text in boldface.''
 
 @item
+Use two spaces between the period marking the end of a sentence and the
+word which opens the next sentence.  This convention has no effect for
+typeset formats like @TeX{}, but improves the readability of the documentation
+in fixed-width environments such as the Info reader.
+
+@item
 Do not start or end a documentation string with whitespace.
 
 @item
-Format the documentation string so that it fits in an Emacs window on an
-80-column screen.  It is a good idea for most lines to be no wider than
-60 characters.
+Format the documentation string so that it fits within an 80-column screen.
+It is a good idea for most lines to be no wider than 60 characters.
 
 However, rather than simply filling the entire documentation string, you
 can make it much more readable by choosing line breaks with care.
 Use blank lines between topics if the documentation string is long.
  
 @item
 @strong{Do not} indent subsequent lines of a documentation string so
 that the text is lined up in the source code with the text of the first
 line.  This looks nice in the source code, but looks bizarre when users
 view the documentation.  Remember that the indentation before the
 starting double-quote is not part of the string!
 
 @item
+When choosing variable names try to adhere to the following guidelines.
+
+@table @asis
+@item 
+vectors : x,y,z,t,w
+
+@item
+matrices : A,B,M
+
+@item
+strings : str,s
+
+@item
+filenames : fname
+
+@item
+cells,cellstrs : c,cstr
+@end table
+
+@item
 The documentation string for a variable that is a yes-or-no flag should
 start with words such as ``Nonzero means@dots{}'', to make it clear that
 all nonzero values are equivalent and indicate explicitly what zero and
 nonzero mean.
 
 @item
 When a function's documentation string mentions the value of an argument
 of the function, use the argument name in capital letters as if it were
@@ -645,17 +670,17 @@ can be calculated.
 
 In many cases a function has multiple ways in which it can be called,
 and the @code{@@deftypefnx} macro can be used to give alternatives.  For
 example
 
 @example
 @group
 -*- texinfo -*-
-@@deftypefn@{Function File@} @{@@var@{a@} =@} fn (@@var@{x@}, @dots{})
+@@deftypefn @{Function File@} @{@@var@{a@} =@} fn (@@var@{x@}, @dots{})
 @@deftypefnx@{Function File@} @{@@var@{a@} =@} fn (@@var@{y@}, @dots{})
 Help text in Texinfo format.
 @@end deftypefn
 @end group
 @end example
 
 Many complete examples of Texinfo documentation can be taken from the
 help strings for the Octave functions themselves.  A relatively complete
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2011-03-28  Rik  <octave@nomad.inbox5.com>
+
+	* linear-algebra/cross.m, plot/ishold.m, signal/fftfilt.m: Improve
+	docstrings.
+
 2011-03-26  Robert T. Short  <octave@phaselockedsystems.com.com>
 
 	* signal/ifftshift.m: Add tests.
 
 2011-03-26  Robert T. Short  <octave@phaselockedsystems.com.com>
 
 	* signal/fftshift.m: Add tests.
 
diff --git a/scripts/linear-algebra/cross.m b/scripts/linear-algebra/cross.m
--- a/scripts/linear-algebra/cross.m
+++ b/scripts/linear-algebra/cross.m
@@ -28,17 +28,17 @@
 ##      @result{} [ 1; -1; 1 ]
 ## @end group
 ## @end example
 ##
 ## If @var{x} and @var{y} are matrices, the cross product is applied
 ## along the first dimension with 3 elements.  The optional argument
 ## @var{dim} forces the cross product to be calculated along
 ## the specified dimension.
-## @seealso{dot, curl}
+## @seealso{dot, curl, divergence}
 ## @end deftypefn
 
 ## Author: Kurt Hornik <Kurt.Hornik@wu-wien.ac.at>
 ## Created: 15 October 1994
 ## Adapted-By: jwe
 
 function z = cross (x, y, dim)
 
diff --git a/scripts/plot/ishold.m b/scripts/plot/ishold.m
--- a/scripts/plot/ishold.m
+++ b/scripts/plot/ishold.m
@@ -12,19 +12,23 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Command} {} ishold
+## @deftypefn  {Command} {} ishold
+## @deftypefnx {Function File} {} ishold (@var{h})
 ## Return true if the next plot will be added to the current plot, or
 ## false if the plot device will be cleared before drawing the next plot.
+##
+## Optionally, operate on the graphics handle @var{h} rather than the current
+## plot.
 ## @seealso{hold}
 ## @end deftypefn
 
 function retval = ishold (h)
 
   if (nargin == 0)
     ax = gca ();
     fig = gcf ();
diff --git a/scripts/signal/fftfilt.m b/scripts/signal/fftfilt.m
--- a/scripts/signal/fftfilt.m
+++ b/scripts/signal/fftfilt.m
@@ -21,16 +21,17 @@
 ##
 ## With two arguments, @code{fftfilt} filters @var{x} with the FIR filter
 ## @var{b} using the FFT.
 ##
 ## Given the optional third argument, @var{n}, @code{fftfilt} uses the
 ## overlap-add method to filter @var{x} with @var{b} using an N-point FFT.
 ##
 ## If @var{x} is a matrix, filter each column of the matrix.
+## @seealso{filter, filter2}
 ## @end deftypefn
 
 ## Author: Kurt Hornik <Kurt.Hornik@wu-wien.ac.at>
 ## Created: 3 September 1994
 ## Adapted-By: jwe
 
 function y = fftfilt (b, x, n)
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2011-03-28  Rik  <octave@nomad.inbox5.com>
+
+	* DLD-FUNCTIONS/inv.cc (inv, inverse), DLD-FUNCTIONS/tril.cc (tril),
+	data.cc (cumsum, szie), file-io.cc (fgets), ov-typeinfo.cc (typeinfo),
+	ov-usr-fcn.cc (nargout), utils.cc (make_absolute_filename), 
+	variables.cc (who): Improve docstrings
+
 2011-03-25  John W. Eaton  <jwe@octave.org>
 
 	* file-io.cc (Fmkstemp): Use gnulib::mkstemp.
 	* DLD-FUNCTIONS/__init_fltk__.cc (f): Use gnulib::floor.
 
 2011-03-18  Rik  <octave@nomad.inbox5.com>
 
 	* dot.cc: Improve seealso cross references in docstring.
diff --git a/src/DLD-FUNCTIONS/inv.cc b/src/DLD-FUNCTIONS/inv.cc
--- a/src/DLD-FUNCTIONS/inv.cc
+++ b/src/DLD-FUNCTIONS/inv.cc
@@ -33,17 +33,17 @@ along with Octave; see the file COPYING.
 #include "ov-cx-diag.h"
 #include "ov-flt-re-diag.h"
 #include "ov-flt-cx-diag.h"
 #include "ov-perm.h"
 #include "utils.h"
 
 DEFUN_DLD (inv, args, nargout,
   "-*- texinfo -*-\n\
-@deftypefn  {Loadable Function} {[@var{x} =} inv (@var{A})\n\
+@deftypefn  {Loadable Function} {@var{x} =} inv (@var{A})\n\
 @deftypefnx {Loadable Function} {[@var{x}, @var{rcond}] =} inv (@var{A})\n\
 Compute the inverse of the square matrix @var{A}.  Return an estimate\n\
 of the reciprocal condition number if requested, otherwise warn of an\n\
 ill-conditioned matrix if the reciprocal condition number is small.\n\
 \n\
 In general it is best to avoid calculating the inverse of a matrix\n\
 directly.  For example, it is both faster and more accurate to solve\n\
 systems of equations (@var{A}*@math{x} = @math{b}) with\n\
@@ -235,16 +235,18 @@ of a sparse matrix if possible.\n\
  */
 
 // FIXME -- this should really be done with an alias, but
 // alias_builtin() won't do the right thing if we are actually using
 // dynamic linking.
 
 DEFUN_DLD (inverse, args, nargout,
   "-*- texinfo -*-\n\
-@deftypefn  {Loadable Function} {[@var{x} =} inverse (@var{A})\n\
+@deftypefn  {Loadable Function} {@var{x} =} inverse (@var{A})\n\
 @deftypefnx {Loadable Function} {[@var{x}, @var{rcond}] =} inverse (@var{A})\n\
-This in an alias for @code{inv}.\n\
+Compute the inverse of the square matrix @var{A}.\n\
+\n\
+This is an alias for @code{inv}.\n\
 @seealso{inv}\n\
 @end deftypefn")
 {
   return Finv (args, nargout);
 }
diff --git a/src/DLD-FUNCTIONS/tril.cc b/src/DLD-FUNCTIONS/tril.cc
--- a/src/DLD-FUNCTIONS/tril.cc
+++ b/src/DLD-FUNCTIONS/tril.cc
@@ -395,17 +395,17 @@ other.\n\
   return do_trilu ("tril", args);
 }
 
 DEFUN_DLD (triu, args, ,
   "-*- texinfo -*-\n\
 @deftypefn  {Function File} {} triu (@var{A})\n\
 @deftypefnx {Function File} {} triu (@var{A}, @var{k})\n\
 @deftypefnx {Function File} {} triu (@var{A}, @var{k}, @var{pack})\n\
-@xref{tril}.\n\
+See the documentation for the @code{tril} function (@pxref{tril}).\n\
 @end deftypefn")
 {
   return do_trilu ("triu", args);
 }
 
 /*
 
 %!test
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -1071,22 +1071,23 @@ Cumulative product of elements along dim
 
  */
 
 DEFUN (cumsum, args, ,
   "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} cumsum (@var{x})\n\
 @deftypefnx {Built-in Function} {} cumsum (@var{x}, @var{dim})\n\
 @deftypefnx {Built-in Function} {} cumsum (@dots{}, 'native')\n\
+@deftypefnx {Built-in Function} {} cumsum (@dots{}, 'double')\n\
+@deftypefnx {Built-in Function} {} cumsum (@dots{}, 'extra')\n\
 Cumulative sum of elements along dimension @var{dim}.  If @var{dim}\n\
 is omitted, it defaults to the first non-singleton dimension.\n\
 \n\
-The \"native\" argument implies the summation is performed in native type.\n\
- See @code{sum} for a complete description and example of the use of\n\
-\"native\".\n\
+See @code{sum} for an explanation of the optional parameters 'native',\n\
+'double', and 'extra'.\n\
 @seealso{sum, cumprod}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   bool isnative = false;
@@ -2034,17 +2035,17 @@ indexing, i.e., @code{object@{@dots{}@}}
 
   return retval;
 }
 
 DEFUN (size, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} size (@var{a})\n\
 @deftypefnx {Built-in Function} {} size (@var{a}, @var{dim})\n\
-Return the number rows and columns of @var{a}.\n\
+Return the number of rows and columns of @var{a}.\n\
 \n\
 With one input argument and one output argument, the result is returned\n\
 in a row vector.  If there are multiple output arguments, the number of\n\
 rows is assigned to the first, and the number of columns to the second,\n\
 etc.  For example:\n\
 \n\
 @example\n\
 @group\n\
@@ -2250,17 +2251,16 @@ double type.  For example:\n\
 @group\n\
 sum ([true, true])\n\
   @result{} 2\n\
 sum ([true, true], 'native')\n\
   @result{} true\n\
 @end group\n\
 @end example\n\
 \n\
-  \n\
 On the contrary, if 'double' is given, the sum is performed in double\n\
 precision even for single precision inputs.\n\
 \n\
 For double precision inputs, 'extra' indicates that a more accurate algorithm\n\
 than straightforward summation is to be used.  For single precision inputs,\n\
 'extra' is the same as 'double'.  Otherwise, 'extra' has no effect.\n\
 @seealso{cumsum, sumsq, prod}\n\
 @end deftypefn")
diff --git a/src/file-io.cc b/src/file-io.cc
--- a/src/file-io.cc
+++ b/src/file-io.cc
@@ -340,17 +340,18 @@ If there are no more characters to read,
   else
     print_usage ();
 
   return retval;
 }
 
 DEFUN (fgets, args, ,
   "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} {} fgets (@var{fid}, @var{len})\n\
+@deftypefn  {Built-in Function} {} fgets (@var{fid})\n\
+@deftypefnx {Built-in Function} {} fgets (@var{fid}, @var{len})\n\
 Read characters from a file, stopping after a newline, or EOF,\n\
 or @var{len} characters have been read.  The characters read, including\n\
 the possible trailing newline, are returned as a string.\n\
 \n\
 If @var{len} is omitted, @code{fgets} reads until the next newline\n\
 character.\n\
 \n\
 If there are no more characters to read, @code{fgets} returns @minus{}1.\n\
diff --git a/src/ov-typeinfo.cc b/src/ov-typeinfo.cc
--- a/src/ov-typeinfo.cc
+++ b/src/ov-typeinfo.cc
@@ -586,17 +586,18 @@ octave_value_typeinfo::do_installed_type
   for (int i = 0; i < num_types; i++)
     retval(i) = types(i);
 
   return retval;
 }
 
 DEFUN (typeinfo, args, ,
   "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} {} typeinfo (@var{expr})\n\
+@deftypefn  {Built-in Function} {} typeinfo ()\n\
+@deftypefnx {Built-in Function} {} typeinfo (@var{expr})\n\
 \n\
 Return the type of the expression @var{expr}, as a string.  If\n\
 @var{expr} is omitted, return an array of strings containing all the\n\
 currently installed data types.\n\
 @end deftypefn")
 {
   octave_value retval;
 
diff --git a/src/ov-usr-fcn.cc b/src/ov-usr-fcn.cc
--- a/src/ov-usr-fcn.cc
+++ b/src/ov-usr-fcn.cc
@@ -676,17 +676,17 @@ will cause @code{nargout} to return 0 in
 [s, t] = f ()\n\
 @end example\n\
 \n\
 @noindent\n\
 will cause @code{nargout} to return 2 inside the function\n\
 @code{f}.\n\
 \n\
 At the top level, @code{nargout} is undefined.\n\
-@seealso{nargin, varargin, varargout}\n\
+@seealso{nargin, isargout, varargin, varargout}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin == 1)
     {
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -764,16 +764,17 @@ Return true if @var{file} is a rooted-re
 
   return retval;
 }
 
 DEFUN (make_absolute_filename, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} make_absolute_filename (@var{file})\n\
 Return the full name of @var{file}, relative to the current directory.\n\
+@seealso{is_absolute_filename, is_rooted_relative_filename, isdir}\n\
 @end deftypefn")
 {
   octave_value retval = std::string ();
 
   if (args.length () == 1)
     {
       std::string nm = args(0).string_value ();
 
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -1750,17 +1750,17 @@ the @code{regexp} function is used.\n\
 @item -file\n\
 The next argument is treated as a filename.  All variables found within the\n\
 specified file are listed.  No patterns are accepted when reading variables\n\
 from a file.\n\
 @end table\n\
 \n\
 If called as a function, return a cell array of defined variable names\n\
 matching the given patterns.\n\
-@seealso{whos, regexp}\n\
+@seealso{whos, isglobal, isvarname, exist, regexp}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (nargout < 2)
     {
       int argc = args.length () + 1;
 
