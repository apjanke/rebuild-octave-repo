# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1271069864 -7200
#      Mon Apr 12 12:57:44 2010 +0200
# Node ID ddbd812d09aafdd7839ccebe7d710cd94ad54469
# Parent  9a5e2d13fa5ad409f59e6f1ffb4129c3469a5d3b
properly compress sparse matrices after assembly

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2010-04-12  Jaroslav Hajek  <highegg@gmail.com>
+
+	* Sparse.cc (Sparse<T>::Sparse (const Array<T>&, const idx_vector&,
+	const idx_vector&, ...)): Call maybe_compress after matrix is created.
+
 2010-04-09  Jaroslav Hajek  <highegg@gmail.com>
 
 	* Sparse.cc (Sparse<T>::diag): Change nzmax to nnz where appropriate.
 	* MatrixType.cc (MatrixType::MatrixType): Ditto.
 	* SparseQR.cc: Ditto.
 	* SparseCmplxQR.cc: Ditto.
 	* boolSparse.cc: Ditto.
 
diff --git a/liboctave/Sparse.cc b/liboctave/Sparse.cc
--- a/liboctave/Sparse.cc
+++ b/liboctave/Sparse.cc
@@ -324,17 +324,21 @@ Sparse<T>::Sparse (const Array<T>& a, co
           for (octave_idx_type j = 0; j < nc; j++)
             xcidx(j+1) = j >= c(0);
         }
     }
   else if (a_scalar)
     {
       // This is completely specialized, because the sorts can be simplified.
       T a0 = a(0);
-      if (cl == 1)
+      if (a0 == T())
+        {
+          // Do nothing, it's an empty matrix.
+        }
+      else if (cl == 1)
         {
           // Sparse column vector. Sort row indices.
           idx_vector rs = r.sorted ();
 
           octave_quit ();
 
           const octave_idx_type *rd = rs.raw ();
           // Count unique indices.
@@ -511,16 +515,18 @@ Sparse<T>::Sparse (const Array<T>& a, co
           // Pick the last one.
           for (octave_idx_type i = 1; i < n; i++)
             {
               if (rd[i] != rd[i-1])
                 rri[++k] = rd[i];
               rrd[k] = a(rdi[i]);
             }
         }
+
+      maybe_compress (true);
     }
   else
     {
       idx_vector rr = r, cc = c;
       const octave_idx_type *rd = rr.raw (), *cd = cc.raw ();
       OCTAVE_LOCAL_BUFFER_INIT (octave_idx_type, ci, nc+1, 0);
       ci[0] = 0;
       // Bin counts of column indices.
@@ -601,16 +607,18 @@ Sparse<T>::Sparse (const Array<T>& a, co
                     {
                       l = k;
                       rri[++jj] = k;
                     }
                   rrd[jj] = a(spairs[i].second);
                 }
             }
         }
+
+      maybe_compress (true);
     }
 }
 
 template <class T>
 Sparse<T>::Sparse (const Array<T>& a)
   : dimensions (a.dims ()), idx (0), idx_count (0)
 {
   if (dimensions.length () > 2)
