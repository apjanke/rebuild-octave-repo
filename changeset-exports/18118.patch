# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1386428203 -3600
#      Sat Dec 07 15:56:43 2013 +0100
# Node ID ca84d3c9dc24dd527112580ac5a67468eaeb3df0
# Parent  95466a42bcba082b1b23926a43465b33c7df8498
set: allow retrieving allowed values for individual properties

* libinterp/corefcn/graphics.in.h: add "std::string value_as_string (std::string)" method to (base)graphics_object classes
* libinterp/corefcn/graphics.cc: implement base_graphics_object::value_as_string method.
* libinterp/corefcn/graphics.cc: set: when 2 arguments are provided, if the second is a property name, either return a cell array containing allowed values or print them.

diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -2980,16 +2980,44 @@ base_graphics_object::values_as_string (
         retval += "\n";
     }
   else
     error ("base_graphics_object::values_as_string: invalid graphics object");
 
   return retval;
 }
 
+std::string
+base_graphics_object::value_as_string (std::string prop)
+{
+  std::string retval;
+
+  if (valid_object ())
+    {
+      if (prop != "children")
+        {
+          property p = get_properties ().get_property (prop);
+
+          if (p.ok () && ! p.is_hidden ())
+            {
+              if (p.is_radio ())
+                {
+                  retval += p.values_as_string ();
+                }
+            }
+        }
+      if (retval != "")
+        retval += "\n";
+    }
+  else
+    error ("base_graphics_object::value_as_string: invalid graphics object");
+
+  return retval;
+}
+
 octave_scalar_map
 base_graphics_object::values_as_struct (void)
 {
   octave_scalar_map retval;
 
   if (valid_object ())
     {
       octave_scalar_map m = get ().scalar_map_value ();
@@ -8716,16 +8744,39 @@ the dimensions of @var{pv}.\n\
                           break;
 
                         }
                     }
                   else if (nargin == 2 && args(1).is_map ())
                     {
                       obj.set (args(1).map_value ());
                     }
+                  else if (nargin == 2 && args(1).is_string ())
+                    {
+                      std::string property = args(1).string_value ();
+                      
+                      octave_map pmap = obj.values_as_struct ();
+
+                      if (pmap.isfield (property))
+                        {
+                          if (nargout != 0)
+                            retval = pmap.getfield (property)(0);
+                          else
+                            {
+                              std::string s = obj.value_as_string (property);
+                              if (! error_state)
+                                octave_stdout << s;
+                            }
+                        }
+                      else
+                        {
+                          error ("set: unknown property");
+                          break;
+                        }
+                    }
                   else if (nargin == 1)
                     {
                       if (nargout != 0)
                         retval = obj.values_as_struct ();
                       else
                         {
                           std::string s = obj.values_as_string ();
                           if (! error_state)
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -2701,16 +2701,18 @@ public:
   virtual octave_value get_factory_defaults (void) const
   {
     error ("base_graphics_object::get_factory_defaults: invalid graphics object");
     return octave_value ();
   }
 
   virtual std::string values_as_string (void);
 
+  virtual std::string value_as_string (std::string prop);
+
   virtual octave_scalar_map values_as_struct (void);
 
   virtual graphics_handle get_parent (void) const
   {
     if (valid_object ())
       return get_properties ().get_parent ();
     else
       {
@@ -2972,16 +2974,21 @@ public:
 
   octave_value get_factory_defaults (void) const
   {
     return rep->get_factory_defaults ();
   }
 
   std::string values_as_string (void) { return rep->values_as_string (); }
 
+  std::string value_as_string (std::string prop) 
+  { 
+    return rep->value_as_string (prop); 
+  }
+
   octave_map values_as_struct (void) { return rep->values_as_struct (); }
 
   graphics_handle get_parent (void) const { return rep->get_parent (); }
 
   graphics_handle get_handle (void) const { return rep->get_handle (); }
 
   graphics_object get_ancestor (const std::string& type) const;
 
