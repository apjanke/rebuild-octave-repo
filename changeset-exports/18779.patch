# HG changeset patch
# User Rik <rik@octave.org>
# Date 1401038583 25200
#      Sun May 25 10:23:03 2014 -0700
# Branch gui-release
# Node ID a5286fb173cd8c5ef266b25204e0badbd9b33000
# Parent  095fdef3d67c18c015d0fa7c72cca1242e19b8f2
Match Matlab return dimensions for find on empty sparse matrices (bug #42408).

* find.cc (find_nonzero_elem_idx (const Sparse<T>& v)): Match Matlab return
dimensions for odd cases such as 0x1, 1x0, 1x1(empty) sparse matrices.  The
conditions are documented in Array.cc (Array<T>::find) and are already
implemented for other array types besides sparse.

* find.cc (find_nonzero_elem_idx (const PermMatrix& v)): Match Matlab return
dimensions for odd cases such as 0x1, 1x0, 1x1(empty) permutation matrices.

diff --git a/libinterp/corefcn/find.cc b/libinterp/corefcn/find.cc
--- a/libinterp/corefcn/find.cc
+++ b/libinterp/corefcn/find.cc
@@ -83,19 +83,18 @@ find_nonzero_elem_idx (const Array<T>& n
 
 template <typename T>
 octave_value_list
 find_nonzero_elem_idx (const Sparse<T>& v, int nargout,
                        octave_idx_type n_to_find, int direction)
 {
   octave_value_list retval ((nargout == 0 ? 1 : nargout), Matrix ());
 
-
+  octave_idx_type nr = v.rows ();
   octave_idx_type nc = v.cols ();
-  octave_idx_type nr = v.rows ();
   octave_idx_type nz = v.nnz ();
 
   // Search in the default range.
   octave_idx_type start_nc = -1;
   octave_idx_type end_nc = -1;
   octave_idx_type count;
 
   // Search for the range to search
@@ -133,68 +132,71 @@ find_nonzero_elem_idx (const Sparse<T>& 
               break;
             }
         }
     }
 
   count = (n_to_find > v.cidx (end_nc) - v.cidx (start_nc) ?
            v.cidx (end_nc) - v.cidx (start_nc) : n_to_find);
 
-  // If the original argument was a row vector, force a row vector of
-  // the overall indices to be returned.  But see below for scalar
-  // case...
+  octave_idx_type result_nr;
+  octave_idx_type result_nc;
 
-  octave_idx_type result_nr = count;
-  octave_idx_type result_nc = 1;
-
-  bool scalar_arg = false;
-
-  if (v.rows () == 1)
+  // Default case is to return a column vector, however, if the original
+  // argument was a row vector, then force return of a row vector.
+  if (nr == 1)
     {
       result_nr = 1;
       result_nc = count;
-
-      scalar_arg = (v.columns () == 1);
+    }
+  else
+    {
+      result_nr = count;
+      result_nc = 1;
     }
 
   Matrix idx (result_nr, result_nc);
 
   Matrix i_idx (result_nr, result_nc);
   Matrix j_idx (result_nr, result_nc);
 
   Array<T> val (dim_vector (result_nr, result_nc));
 
   if (count > 0)
     {
-      // Search for elements to return.  Only search the region where
-      // there are elements to be found using the count that we want
-      // to find.
+      // Search for elements to return.  Only search the region where there
+      // are elements to be found using the count that we want to find.
       for (octave_idx_type j = start_nc, cx = 0; j < end_nc; j++)
         for (octave_idx_type i = v.cidx (j); i < v.cidx (j+1); i++ )
           {
             OCTAVE_QUIT;
             if (direction < 0 && i < nz - count)
               continue;
             i_idx(cx) = static_cast<double> (v.ridx (i) + 1);
             j_idx(cx) = static_cast<double> (j + 1);
             idx(cx) = j * nr + v.ridx (i) + 1;
             val(cx) = v.data(i);
             cx++;
             if (cx == count)
               break;
           }
     }
-  else if (scalar_arg)
+  else
     {
-      idx.resize (0, 0);
+      // No items found.  Fixup return dimensions for Matlab compatibility.
+      // The behavior to match is documented in Array.cc (Array<T>::find).
+      if ((nr == 0 && nc == 0) || nr == 1 & nc == 1)
+        {
+          idx.resize (0, 0);
 
-      i_idx.resize (0, 0);
-      j_idx.resize (0, 0);
+          i_idx.resize (0, 0);
+          j_idx.resize (0, 0);
 
-      val.resize (dim_vector (0, 0));
+          val.resize (dim_vector (0, 0));
+        }
     }
 
   switch (nargout)
     {
     case 0:
     case 1:
       retval(0) = idx;
       break;
@@ -226,16 +228,17 @@ find_nonzero_elem_idx (const Sparse<T>& 
 
 octave_value_list
 find_nonzero_elem_idx (const PermMatrix& v, int nargout,
                        octave_idx_type n_to_find, int direction)
 {
   // There are far fewer special cases to handle for a PermMatrix.
   octave_value_list retval ((nargout == 0 ? 1 : nargout), Matrix ());
 
+  octave_idx_type nr = v.rows ();
   octave_idx_type nc = v.cols ();
   octave_idx_type start_nc, count;
 
   // Determine the range to search.
   if (n_to_find < 0 || n_to_find >= nc)
     {
       start_nc = 0;
       n_to_find = nc;
@@ -247,18 +250,16 @@ find_nonzero_elem_idx (const PermMatrix&
       count = n_to_find;
     }
   else
     {
       start_nc = nc - n_to_find;
       count = n_to_find;
     }
 
-  bool scalar_arg = (v.rows () == 1 && v.cols () == 1);
-
   Matrix idx (count, 1);
   Matrix i_idx (count, 1);
   Matrix j_idx (count, 1);
   // Every value is 1.
   Array<double> val (dim_vector (count, 1), 1.0);
 
   if (count > 0)
     {
@@ -286,23 +287,32 @@ find_nonzero_elem_idx (const PermMatrix&
               // j adjusted by the start point.
               const octave_idx_type koff = j - start_nc;
               i_idx(koff) = static_cast<double> (1+i);
               j_idx(koff) = static_cast<double> (1+j);
               idx(koff) = j * nc + i + 1;
             }
         }
     }
-  else if (scalar_arg)
+  else
     {
-      // Same odd compatibility case as the other overrides.
-      idx.resize (0, 0);
-      i_idx.resize (0, 0);
-      j_idx.resize (0, 0);
-      val.resize (dim_vector (0, 0));
+      // FIXME: Is this case even possible?  A scalar permutation matrix seems to devolve
+      //        to a scalar full matrix, at least from the Octave command line.  Perhaps
+      //        this function could be called internally from C++ with such a matrix.
+      // No items found.  Fixup return dimensions for Matlab compatibility.
+      // The behavior to match is documented in Array.cc (Array<T>::find).
+      if ((nr == 0 && nc == 0) || nr == 1 & nc == 1)
+        {
+          idx.resize (0, 0);
+
+          i_idx.resize (0, 0);
+          j_idx.resize (0, 0);
+
+          val.resize (dim_vector (0, 0));
+        }
     }
 
   switch (nargout)
     {
     case 0:
     case 1:
       retval(0) = idx;
       break;
