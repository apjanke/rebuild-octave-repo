# HG changeset patch
# User jwe
# Date 1098121635 0
#      Mon Oct 18 17:47:15 2004 +0000
# Node ID b65ec179786f90dfe74cecbbe0275004776ec11c
# Parent  a9f7f67e2b6e693453d1a4bace4e081376ee23e6
[project @ 2004-10-18 17:47:15 by jwe]

diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -1350,34 +1350,38 @@ symbol_table::parse_whos_line_format (Ar
   // Calculating necessary spacing for name column,
   // bytes column, elements column and class column
   for (i = 0; i < static_cast<int> (len); i++)
     {
       std::stringstream ss1, ss2;
       std::string str;
 
       str = symbols(i)->name ();
-      param_length(pos_n) = ((str.length () > static_cast<size_t> (param_length(pos_n))) ?
-			     str.length () : param_length(pos_n));
+      param_length(pos_n) = ((str.length ()
+			      > static_cast<size_t> (param_length(pos_n)))
+			     ? str.length () : param_length(pos_n));
 
       str = symbols(i)->type_name ();
-      param_length(pos_t) = ((str.length () > static_cast<size_t> (param_length(pos_t))) ?
-			     str.length () : param_length(pos_t));
+      param_length(pos_t) = ((str.length ()
+			      > static_cast<size_t> (param_length(pos_t)))
+			     ? str.length () : param_length(pos_t));
 
       elements1 = symbols(i)->numel ();
       ss1 << elements1;
       str = ss1.str ();
-      param_length(pos_e) = ((str.length () > static_cast<size_t> (param_length(pos_e))) ?
-			     str.length () : param_length(pos_e));
+      param_length(pos_e) = ((str.length ()
+			      > static_cast<size_t> (param_length(pos_e)))
+			     ? str.length () : param_length(pos_e));
 
       bytes1 = symbols(i)->byte_size ();
       ss2 << bytes1;
       str = ss2.str ();
-      param_length(pos_b) = ((str.length () > static_cast<size_t> (param_length(pos_b))) ?
-			     str.length () : param_length (pos_b));
+      param_length(pos_b) = ((str.length ()
+			      > static_cast<size_t> (param_length(pos_b)))
+			     ? str.length () : param_length (pos_b));
     }
 
   idx = 0;
   while (static_cast<size_t> (idx) < format_len)
     {
       whos_parameter param;
       param.command = '\0';
 
@@ -1421,24 +1425,22 @@ symbol_table::parse_whos_line_format (Ar
 
 	  // Insert data into parameter
 	  param.first_parameter_length = 0;
 	  pos = param_string.find (param.command);
 	  if (pos != NPOS)
 	    {
 	      param.parameter_length = param_length(pos);
 	      param.text = param_names(pos);
-	      param.line.assign (param_names (pos).length (), '=');
+	      param.line.assign (param_names(pos).length (), '=');
 
-	      param.parameter_length = (a > param.parameter_length ? 
-		                       a : param.parameter_length);
-	      if((param.command == 's') && (param.modifier == 'c') && (b > 0))
-	      {
+	      param.parameter_length = (a > param.parameter_length
+					? a : param.parameter_length);
+	      if (param.command == 's' && param.modifier == 'c' && b > 0)
 		param.first_parameter_length = b;
-	      }
 	    }
 	  else
 	    {
 	      error ("whos_line_format: '%c' is not a command",
 		     param.command);
 	      error_encountered = true;
 	    }
 
@@ -1484,24 +1486,25 @@ symbol_table::parse_whos_line_format (Ar
 	    {
 	      error ("whos_line_format: modifier 'c' not available for command '%c'",
 		     param.command);
 	      error_encountered = true;
 	    }
 
 	  // What happens if whos_line_format contains negative numbers
 	  // at param_length positions?
-	  param.balance = ((b < 0) ? 0 : param.balance);
-	  param.first_parameter_length = ((b < 0) ? 0 :
+	  param.balance = (b < 0 ? 0 : param.balance);
+	  param.first_parameter_length = (b < 0 ? 0 :
 					  param.first_parameter_length);
-	  param.parameter_length = ((a < 0) ? 0 :
-				    (param.parameter_length <
-				     param_length (pos_s)) ?
-				    param_length (pos_s) :
-				    param.parameter_length);
+	  param.parameter_length = (a < 0
+				    ? 0
+				    : (param.parameter_length
+				       < param_length(pos_s)
+				       ? param_length(pos_s)
+				       : param.parameter_length));
 
 	  // Parameter will not be pushed into parameter list if ...
 	  if (! error_encountered)
 	    params.push_back (param);
 	}
       else
         {
 	  // Text string, to be printed as it is ...
