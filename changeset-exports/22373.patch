# HG changeset patch
# User Rik <rik@octave.org>
# Date 1472046055 25200
#      Wed Aug 24 06:40:55 2016 -0700
# Node ID 59d66abc27d000c101aa01aede982470a3f29726
# Parent  0c0de2205d3899d79fa8a885cb36a0031bc7cf2b
Fix calculation of ticks when tick separation is very small (bug #48350).

* graphics.cc: Use type double for lo (i1) and hi (i2) limits.
Cast i1 and i2 to int when used in for loops.  Move declaration
of tmp variable to narrowest scope.

diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -6851,26 +6851,26 @@ axes::properties::calc_ticks_and_lims (a
   // FIXME: add log ticks and lims
 
   if (lims.get ().is_empty ())
     return;
 
   double lo = (lims.get ().matrix_value ())(0);
   double hi = (lims.get ().matrix_value ())(1);
   bool is_negative = lo < 0 && hi < 0;
-  double tmp;
+
   // FIXME: should this be checked for somewhere else? (i.e., set{x,y,z}lim)
   if (hi < lo)
     std::swap (hi, lo);
 
   if (is_logscale)
     {
       if (is_negative)
         {
-          tmp = hi;
+          double tmp = hi;
           hi = std::log10 (-lo);
           lo = std::log10 (-tmp);
         }
       else
         {
           hi = std::log10 (hi);
           lo = std::log10 (lo);
         }
@@ -6883,62 +6883,62 @@ axes::properties::calc_ticks_and_lims (a
       if (! (octave::math::isinf (hi) || octave::math::isinf (lo)))
         tick_sep = 1;  // Tick is every order of magnitude (bug #39449)
       else
         tick_sep = 0;
     }
   else
     tick_sep = calc_tick_sep (lo, hi);
 
-  int i1 = static_cast<int> (std::floor (lo / tick_sep));
-  int i2 = static_cast<int> (std::ceil (hi / tick_sep));
+  double i1 = std::floor (lo / tick_sep);
+  double i2 = std::ceil (hi / tick_sep);
 
   if (limmode_is_auto)
     {
       // Adjust limits to include min and max ticks
       Matrix tmp_lims (1,2);
       tmp_lims(0) = std::min (tick_sep * i1, lo);
       tmp_lims(1) = std::max (tick_sep * i2, hi);
 
       if (is_logscale)
         {
           tmp_lims(0) = std::pow (10., tmp_lims(0));
           tmp_lims(1) = std::pow (10., tmp_lims(1));
           if (tmp_lims(0) <= 0)
             tmp_lims(0) = std::pow (10., lo);
           if (is_negative)
             {
-              tmp = tmp_lims(0);
+              double tmp = tmp_lims(0);
               tmp_lims(0) = -tmp_lims(1);
               tmp_lims(1) = -tmp;
             }
         }
       lims = tmp_lims;
     }
   else
     {
       // adjust min and max ticks to be within limits
       if (i1*tick_sep < lo)
         i1++;
       if (i2*tick_sep > hi && i2 > i1)
         i2--;
     }
 
   Matrix tmp_ticks (1, i2-i1+1);
-  for (int i = 0; i <= i2-i1; i++)
+  for (int i = 0; i <= static_cast<int> (i2-i1); i++)
     {
       tmp_ticks(i) = tick_sep * (i+i1);
       if (is_logscale)
         tmp_ticks(i) = std::pow (10., tmp_ticks(i));
     }
   if (is_logscale && is_negative)
     {
       Matrix rev_ticks (1, i2-i1+1);
       rev_ticks = -tmp_ticks;
-      for (int i = 0; i <= i2-i1; i++)
+      for (int i = 0; i <= static_cast<int> (i2-i1); i++)
         tmp_ticks(i) = rev_ticks(i2-i1-i);
     }
 
   ticks = tmp_ticks;
 
   int n = is_logscale ? 8 : 4;
   Matrix tmp_mticks (1, n * (tmp_ticks.numel () - 1));
 
