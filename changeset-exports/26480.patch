# HG changeset patch
# User John Donoghue
# Date 1546093391 18000
#      Sat Dec 29 09:23:11 2018 -0500
# Branch stable
# Node ID 4203f6e0cd7dd1b5b8fef5865d913b414eb55b02
# Parent  6f22d0c91beb674ea926fb19fbb2c96d508027de
Allow indent of mid block keywords (#55276)

* libgui/src/m-editor/octave-qscintilla.cc
  (octave_qscintilla::smart_indent):
    add unwind_protect_cleanup, case and otherwise to mid block keys,
  (octave_qscintilla::smart_indent_line_or_selected_text):
    add processing of mid block keys

diff --git a/libgui/src/m-editor/octave-qscintilla.cc b/libgui/src/m-editor/octave-qscintilla.cc
--- a/libgui/src/m-editor/octave-qscintilla.cc
+++ b/libgui/src/m-editor/octave-qscintilla.cc
@@ -501,17 +501,17 @@ namespace octave
   // Do smart indendation after if, for, ...
   void octave_qscintilla::smart_indent (bool do_smart_indent,
                                         int do_auto_close, int line)
   {
     QString prevline = text (line);
 
     QRegExp bkey = QRegExp ("^[\t ]*(if|for|while|switch|case|otherwise"
                             "|do|function|properties|events|classdef"
-                            "|unwind_protect|unwind_protect_cleanup|try"
+                            "|unwind_protect|try"
                             "|parfor|methods)"
                             "[\r]?[\n\t #%]");
     // last word except for comments, assuming no ' or " in comment.
     // rx_end = QRegExp ("(\\w+)[ \t;\r\n]*([%#][^\"']*)?$");
 
     // last word except for comments,
     // allowing % and # in single or double quoted strings
     // FIXME This will get confused by transpose.
@@ -544,34 +544,35 @@ namespace octave
           {
             // Do auto close
             auto_close (do_auto_close, line, prevline, first_word);
           }
 
         return;
       }
 
-    QRegExp mkey = QRegExp ("^[\t ]*(else|elseif|catch)[\r]?[\t #%\n]");
+    QRegExp mkey = QRegExp ("^[\t ]*(else|elseif|catch|unwind_protect_cleanup"
+                            "|case|otherwise)[\r]?[\t #%\n]");
     if (prevline.contains (mkey))
       {
         int prev_ind = indentation (line-1);
         int act_ind = indentation (line);
 
         if (prev_ind == act_ind)
           unindent (line);
         else if (prev_ind > act_ind)
           {
             setIndentation (line+1, prev_ind);
             setCursorPosition (line+1, prev_ind);
           }
         return;
       }
 
     ekey = QRegExp ("^[\t ]*(end|endif|endfor|endwhile|until|endfunction"
-                    "|end_try_catch|end_unwind_protext)[\r]?[\t #%\n(;]");
+                    "|end_try_catch|end_unwind_protect)[\r]?[\t #%\n(;]");
     if (prevline.contains (ekey))
       {
         if (indentation (line-1) <= indentation (line))
           {
             unindent (line+1);
             unindent (line);
             setCursorPosition (line+1,
                                indentation (line));
@@ -590,16 +591,22 @@ namespace octave
       = QRegExp ("^([\t ]*)(if|elseif|else"
                  "|for|while|do|parfor"
                  "|switch|case|otherwise"
                  "|function"
                  "|classdef|properties|events|enumeration|methods"
                  "|unwind_protect|unwind_protect_cleanup|try|catch)"
                  "[\r\n\t #%]");
 
+    QRegExp mid_block_regexp
+      = QRegExp ("^([\t ]*)(elseif|else"
+                 "|otherwise"
+                 "|unwind_protect_cleanup|catch)"
+                 "[\r\n\t #%]");
+
     QRegExp end_block_regexp
       = QRegExp ("^([\t ]*)(end"
                  "|end(for|function|if|parfor|switch|while"
                  "|classdef|enumeration|events|methods|properties)"
                  "|end_(try_catch|unwind_protect)"
                  "|until)"
                  "[\r\n\t #%]");
 
@@ -631,16 +638,19 @@ namespace octave
 
     for (int line = lineFrom; line <= lineTo; line++)
       {
         QString line_text = text (line);
 
         if (end_block_regexp.indexIn (line_text) > -1)
           indent_column -= indent_increment;
 
+        if (mid_block_regexp.indexIn (line_text) > -1)
+            indent_column -= indent_increment;
+
         setIndentation (line, indent_column);
 
         if (begin_block_regexp.indexIn (line_text) > -1)
           indent_column += indent_increment;
       }
   }
 
   void octave_qscintilla::set_word_selection (const QString& word)
