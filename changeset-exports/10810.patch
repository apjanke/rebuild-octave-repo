# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1279653550 -7200
#      Tue Jul 20 21:19:10 2010 +0200
# Node ID 6683f0c9d742ea948e2b15ca427ff9f6adcc5768
# Parent  85cbd239fce2d856cee13b8797d102f1d112d818
make the maximum extent externally accessible

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2010-07-20  Jaroslav Hajek  <highegg@gmail.com>
+
+	* dim-vector.cc (dim_vector::dim_max): New static const member.
+	* dim-vector.h: Declare it.
+
 2010-07-20  Jaroslav Hajek  <highegg@gmail.com>
 
 	* dMatrix.cc (Matrix::extract, Matrix::extract_n): Reimplement using
 	index.
 	* fMatrix.cc (FloatMatrix::extract, FloatMatrix::extract_n): Ditto.
 	* CMatrix.cc (ComplexMatrix::extract, ComplexMatrix::extract_n): Ditto.
 	* fCMatrix.cc (FloatComplexMatrix::extract, FloatComplexMatrix::extract_n): Ditto.
 
diff --git a/liboctave/dim-vector.cc b/liboctave/dim-vector.cc
--- a/liboctave/dim-vector.cc
+++ b/liboctave/dim-vector.cc
@@ -24,16 +24,23 @@ along with Octave; see the file COPYING.
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <iostream>
 
 #include "dim-vector.h"
 
+// The maximum allowed value for a dimension extent. This will normally be a tiny bit
+// off the maximum value of octave_idx_type.
+// Currently 1 is subtracted to allow safe conversion of any 2D Array into Sparse,
+// but this offset may change in the future.
+const octave_idx_type
+dim_vector::dim_max = std::numeric_limits<octave_idx_type>::max () - 1;
+
 void
 dim_vector::chop_all_singletons (void)
 {
   make_unique ();
 
   int j = 0;
   int l = ndims();
 
@@ -77,17 +84,17 @@ dim_vector::num_ones (void) const
       retval++;
 
   return retval;
 }
 
 octave_idx_type
 dim_vector::safe_numel (void) const
 {
-  octave_idx_type idx_max = std::numeric_limits<octave_idx_type>::max () - 1;
+  octave_idx_type idx_max = dim_max;
   octave_idx_type n = 1;
   int n_dims = length ();
 
   for (int i = 0; i < n_dims; i++)
     {
       n *= rep[i];
       if (rep[i] != 0)
         idx_max /= rep[i];
diff --git a/liboctave/dim-vector.h b/liboctave/dim-vector.h
--- a/liboctave/dim-vector.h
+++ b/liboctave/dim-vector.h
@@ -214,16 +214,18 @@ private:
       return zv.rep;
     }
 
   explicit dim_vector (octave_idx_type *r)
     : rep (r) { }
 
 public:
 
+  static const octave_idx_type dim_max;
+
   explicit dim_vector (void) : rep (nil_rep ()) { count()++; }
 
   dim_vector (const dim_vector& dv) : rep (dv.rep) { count()++; }
 
   static dim_vector alloc (int n)
   {
     return dim_vector (newrep (n < 2 ? 2 : n));
   }
