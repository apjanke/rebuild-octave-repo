# HG changeset patch
# User Torsten <ttl@justmail.de>
# Date 1398596588 -7200
#      Sun Apr 27 13:03:08 2014 +0200
# Branch gui-release
# Node ID 86eca5d178a669afb7a3664270212804dee13d37
# Parent  c199304dfb2abea315c6f41b3d5d7aa8fb329453
disable some global shortcuts when editor gets focus to prevent conflicts

* file-editor-tab.cc (constructor): connect signal from the qscintilla edit
  area about focus with the related new slot;
  (edit_area_has_focus): new slot for the focus signal from qscintilla edit
  area emitting a signal for enabling/disabling the common edit shortcuts

* file-editor-tab.h: new slot edit_area_has_focus,
  new signal set_global_edit_shortcuts_signal

* file-editor.cc (add_file_editor_tab ): connect new tab signal
  set_global_edit_shortcuts_signal with the related slot in main_window;
  (copyClipboard, pasteClipboard, selectAll): removed these functions because
  the related actions are triggered editor shortcuts

* file-editor.h: remove copyClipboard, pasteClipboard, selectAll

* octave-qscintilla.cc (focusInEvent, focusOutEvent): handlers emitting the
  signal about the focus state of the edit area

* octave-qscintilla.h: new focus signal qsci_has_focus_signal, focus event
  handlers

* main-window.cc (set_global_edit_shortcuts): new slot dis-/enabling the common
  edit shortcuts depending on focus of edit area

* main-window.h: new slot set_global_edit_shortcuts

diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -149,16 +149,19 @@ file_editor_tab::file_editor_tab (const 
 
   // connect modified signal
   connect (_edit_area, SIGNAL (modificationChanged (bool)),
            this, SLOT (update_window_title (bool)));
 
   connect (_edit_area, SIGNAL (copyAvailable (bool)),
            this, SLOT (handle_copy_available (bool)));
 
+  connect (_edit_area, SIGNAL (qsci_has_focus_signal (bool)),
+           this, SLOT (edit_area_has_focus (bool)));
+
   connect (&_file_system_watcher, SIGNAL (fileChanged (const QString&)),
            this, SLOT (file_has_changed (const QString&)));
 
   QSettings *settings = resource_manager::get_settings ();
   if (settings)
     notice_settings (settings);
 }
 
@@ -1659,9 +1662,15 @@ file_editor_tab::handle_cursor_moved (in
 {
   if (_edit_area->SendScintilla (QsciScintillaBase::SCI_AUTOCACTIVE))
     show_auto_completion (this);
 
   _row_indicator->setNum (line+1);
   _col_indicator->setNum (col+1);
 }
 
+void
+file_editor_tab::edit_area_has_focus (bool focus)
+{
+  emit set_global_edit_shortcuts_signal (! focus);
+}
+
 #endif
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -116,28 +116,30 @@ public slots:
   void set_modified (bool modified = true);
 
   QString load_file (const QString& fileName);
   void new_file (const QString& commands = QString ());
 
   void file_has_changed (const QString& fileName);
 
   void execute_command_in_terminal (const QString& command);
+  void edit_area_has_focus (bool foucs);
 
 signals:
 
   void file_name_changed (const QString& fileName, const QString& toolTip);
   void editor_state_changed (bool copy_available, const QString& fileName);
   void tab_remove_request ();
   void add_filename_to_list (const QString&, QWidget *);
   void mru_add_file (const QString& file_name);
   void editor_check_conflict_save (const QString& saveFileName,
                                    bool remove_on_success);
   void run_file_signal (const QFileInfo& info);
   void execute_command_in_terminal_signal (const QString&);
+  void set_global_edit_shortcuts_signal (bool);
 
 protected:
 
   void closeEvent (QCloseEvent *event);
   void set_file_name (const QString& fileName);
 
 private slots:
 
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -1391,16 +1391,19 @@ file_editor::add_file_editor_tab (file_e
            this, SLOT (handle_mru_add_file (const QString&)));
 
   connect (f, SIGNAL (run_file_signal (const QFileInfo&)),
            main_win (), SLOT (run_file_in_terminal (const QFileInfo&)));
 
   connect (f, SIGNAL (execute_command_in_terminal_signal (const QString&)),
            main_win (), SLOT (execute_command_in_terminal (const QString&)));
 
+  connect (f, SIGNAL (set_global_edit_shortcuts_signal (bool)),
+           main_win (), SLOT (set_global_edit_shortcuts (bool)));
+
   // Signals from the file_editor non-trivial operations
   connect (this, SIGNAL (fetab_settings_changed (const QSettings *)),
            f, SLOT (notice_settings (const QSettings *)));
 
   connect (this, SIGNAL (fetab_close_request (const QWidget*,bool)),
            f, SLOT (conditional_close (const QWidget*,bool)));
 
   connect (this, SIGNAL (fetab_change_request (const QWidget*)),
@@ -1522,48 +1525,16 @@ file_editor::add_file_editor_tab (file_e
            f, SLOT (do_breakpoint_marker (bool, const QWidget*, int)));
 
   _tab_widget->setCurrentWidget (f);
 
   check_actions ();
 }
 
 void
-file_editor::copyClipboard ()
-{
-  QWidget * foc_w = focusWidget ();
-
-  if (foc_w && foc_w->inherits ("octave_qscintilla"))
-    {
-      request_copy (true);
-    }
-}
-void
-file_editor::pasteClipboard ()
-{
-  QWidget * foc_w = focusWidget ();
-
-  if (foc_w && foc_w->inherits ("octave_qscintilla"))
-    {
-      request_paste (true);
-    }
-}
-void
-file_editor::selectAll ()
-{
-  QWidget * foc_w = focusWidget ();
-
-  if (foc_w && foc_w->inherits ("octave_qscintilla"))
-    {
-      request_selectall (true);
-    }
-}
-
-
-void
 file_editor::set_shortcuts ()
 {
   // File menu
   shortcut_manager::set_shortcut (_edit_function_action, "editor_file:edit_function");
   shortcut_manager::set_shortcut (_save_action, "editor_file:save");
   shortcut_manager::set_shortcut (_save_as_action, "editor_file:save_as");
   shortcut_manager::set_shortcut (_close_action, "editor_file:close");
   shortcut_manager::set_shortcut (_close_all_action, "editor_file:close_all");
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -199,19 +199,16 @@ public slots:
   void notice_settings (const QSettings *settings);
 
   void set_shortcuts ();
 
   void handle_visibility (bool visible);
 
 
 protected slots:
-  void copyClipboard ();
-  void pasteClipboard ();
-  void selectAll ();
 
 private slots:
 
   void request_open_files (const QStringList&);
   void request_open_file (const QString& fileName, int line = -1,
                           bool debug_pointer = false,
                           bool breakpoint_marker = false, bool insert = true);
   void request_preferences (bool);
diff --git a/libgui/src/m-editor/octave-qscintilla.cc b/libgui/src/m-editor/octave-qscintilla.cc
--- a/libgui/src/m-editor/octave-qscintilla.cc
+++ b/libgui/src/m-editor/octave-qscintilla.cc
@@ -242,9 +242,23 @@ void
 octave_qscintilla::contextmenu_run (bool)
 {
   QStringList commands = selectedText ().split (QRegExp("[\r\n]"),
                                                 QString::SkipEmptyParts);
   for (int i = 0; i < commands.size (); i++ )
     emit execute_command_in_terminal_signal (commands.at (i));
 }
 
+void
+octave_qscintilla::focusInEvent (QFocusEvent *focusEvent)
+{
+  emit qsci_has_focus_signal (true);
+  QsciScintilla::focusInEvent(focusEvent);
+}
+
+void
+octave_qscintilla::focusOutEvent (QFocusEvent *focusEvent)
+{
+  emit qsci_has_focus_signal (false);
+  QsciScintilla::focusOutEvent(focusEvent);
+}
+
 #endif
diff --git a/libgui/src/m-editor/octave-qscintilla.h b/libgui/src/m-editor/octave-qscintilla.h
--- a/libgui/src/m-editor/octave-qscintilla.h
+++ b/libgui/src/m-editor/octave-qscintilla.h
@@ -45,24 +45,30 @@ public:
   void context_edit ();
   void context_run ();
   void get_global_textcursor_pos (QPoint *global_pos, QPoint *local_pos);
   bool get_actual_word ();
 
 signals:
 
   void execute_command_in_terminal_signal (const QString&);
+  void qsci_has_focus_signal (bool);
 
 private slots:
 
   void contextmenu_help (bool);
   void contextmenu_doc (bool);
   void contextmenu_help_doc (bool);
   void contextmenu_edit (bool);
   void contextmenu_run (bool);
 
+protected:
+
+  void focusInEvent (QFocusEvent *focusEvent);
+  void focusOutEvent (QFocusEvent *focusEvent);
+
 private:
 
   QString _word_at_cursor;
 
 };
 
 #endif
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -2273,16 +2273,36 @@ main_window::find_files (const QString &
 
 void
 main_window::find_files_finished (int)
 {
 
 }
 
 void
+main_window::set_global_edit_shortcuts (bool enable)
+{
+  if (enable)
+    {
+      shortcut_manager::set_shortcut (_copy_action, "main_edit:copy");
+      shortcut_manager::set_shortcut (_paste_action, "main_edit:paste");
+      shortcut_manager::set_shortcut (_undo_action, "main_edit:undo");
+      shortcut_manager::set_shortcut (_select_all_action, "main_edit:select_all");
+    }
+  else
+    {
+      QKeySequence no_key = QKeySequence ();
+      _copy_action->setShortcut (no_key);
+      _paste_action->setShortcut (no_key);
+      _undo_action->setShortcut (no_key);
+      _select_all_action->setShortcut (no_key);
+    }
+}
+
+void
 main_window::set_global_shortcuts (bool set_shortcuts)
 {
   if (set_shortcuts)
     {
 
       // file menu
       shortcut_manager::set_shortcut (_open_action, "main_file:open_file");
       shortcut_manager::set_shortcut (_new_script_action, "main_file:new_file");
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -189,16 +189,17 @@ public slots:
   void handle_octave_ready ();
 
   // find files dialog
   void find_files (const QString &startdir=QDir::currentPath ());
   void find_files_finished (int);
 
   // setting global shortcuts
   void set_global_shortcuts (bool enable);
+  void set_global_edit_shortcuts (bool enable);
 
   // handling the clipboard
   void clipboard_has_changed (QClipboard::Mode);
   void clear_clipboard ();
 
   // get the dockwidgets
   QList<octave_dock_widget *> get_dock_widget_list ()
     { return dock_widget_list (); }
