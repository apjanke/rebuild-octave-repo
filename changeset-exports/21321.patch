# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1456194502 18000
#      Mon Feb 22 21:28:22 2016 -0500
# Node ID 79a51b7e00b66d3068ce7c3441702be3c6cc5a67
# Parent  241666557fec5f2561461729c2003f98f321719e
eliminate some copy and paste code fragments in the Range class

* Range.h, Range.cc (Range::limit_internal, Range::init):
New functions.
(Range::Range, Range::set_base, Range::set_limit, Range::set_inc):
Use them to eliminate copy and paste code fragments.

diff --git a/liboctave/array/Range.cc b/liboctave/array/Range.cc
--- a/liboctave/array/Range.cc
+++ b/liboctave/array/Range.cc
@@ -304,73 +304,40 @@ Range::is_sorted (sortmode mode) const
 }
 
 void
 Range::set_base (double b)
 {
   if (rng_base != b)
     {
       rng_base = b;
-      rng_numel = numel_internal ();
 
-      double tmplimit = rng_limit;
-
-      if (rng_inc > 0)
-        tmplimit = max ();
-      else
-        tmplimit = min ();
-
-      if (tmplimit != rng_limit)
-        rng_limit = tmplimit;
-
-      clear_cache ();
+      init ();
     }
 }
 
 void
 Range::set_limit (double l)
 {
   if (rng_limit != l)
     {
       rng_limit = l;
-      rng_numel = numel_internal ();
 
-      double tmplimit = rng_limit;
-
-      if (rng_inc > 0)
-        tmplimit = max ();
-      else
-        tmplimit = min ();
-
-      if (tmplimit != rng_limit)
-        rng_limit = tmplimit;
-
-      clear_cache ();
+      init ();
     }
 }
 
 void
 Range::set_inc (double i)
 {
   if (rng_inc != i)
     {
       rng_inc = i;
-      rng_numel = numel_internal ();
 
-      double tmplimit = rng_limit;
-
-      if (rng_inc > 0)
-        tmplimit = max ();
-      else
-        tmplimit = min ();
-
-      if (tmplimit != rng_limit)
-        rng_limit = tmplimit;
-
-      clear_cache ();
+      init ();
     }
 }
 
 std::ostream&
 operator << (std::ostream& os, const Range& a)
 {
   double b = a.base ();
   double increment = a.inc ();
@@ -588,8 +555,30 @@ Range::numel_internal (void) const
         }
 
       retval = (n_elt < std::numeric_limits<octave_idx_type>::max () - 1)
                ? n_elt : -1;
     }
 
   return retval;
 }
+
+double
+Range::limit_internal (void) const
+{
+  double tmp_limit = rng_limit;
+
+  if (rng_inc > 0)
+    tmp_limit = max ();
+  else
+    tmp_limit = min ();
+
+  return (tmp_limit != rng_limit) ? tmp_limit : rng_limit;
+}
+
+void
+Range::init (void)
+{
+  rng_numel = numel_internal ();
+  rng_limit = limit_internal ();
+
+  clear_cache ();
+}
diff --git a/liboctave/array/Range.h b/liboctave/array/Range.h
--- a/liboctave/array/Range.h
+++ b/liboctave/array/Range.h
@@ -42,63 +42,40 @@ public:
   Range (const Range& r)
     : rng_base (r.rng_base), rng_limit (r.rng_limit), rng_inc (r.rng_inc),
       rng_numel (r.rng_numel), cache (r.cache) { }
 
   Range (double b, double l)
     : rng_base (b), rng_limit (l), rng_inc (1),
       rng_numel (numel_internal ()), cache ()
   {
-    double tmplimit = rng_limit;
-
-    if (rng_inc > 0)
-      tmplimit = max ();
-    else
-      tmplimit = min ();
-
-    if (tmplimit != rng_limit)
-      rng_limit = tmplimit;
+    rng_limit = limit_internal ();
   }
 
   Range (double b, double l, double i)
     : rng_base (b), rng_limit (l), rng_inc (i),
       rng_numel (numel_internal ()), cache ()
   {
-    double tmplimit = rng_limit;
-
-    if (rng_inc > 0)
-      tmplimit = max ();
-    else
-      tmplimit = min ();
-
-    if (tmplimit != rng_limit)
-      rng_limit = tmplimit;
+    rng_limit = limit_internal ();
   }
 
   // For operators' usage (to preserve element count).
   Range (double b, double i, octave_idx_type n)
     : rng_base (b), rng_limit (b + (n-1) * i), rng_inc (i),
       rng_numel (n), cache ()
   {
     if (! xfinite (b) || ! xfinite (i) || ! xfinite (rng_limit))
       rng_numel = -2;
     else
       {
         // Code below is only needed if the resulting range must be 100%
         // correctly constructed.  If the Range object created is only
         // a temporary one used by operators this may be unnecessary.
-        double tmplimit = rng_limit;
 
-        if (rng_inc > 0)
-          tmplimit = max ();
-        else
-          tmplimit = min ();
-
-        if (tmplimit != rng_limit)
-          rng_limit = tmplimit;
+        rng_limit = limit_internal ();
       }
   }
 
   double base (void) const { return rng_base; }
   double limit (void) const { return rng_limit; }
   double inc (void) const { return rng_inc; }
 
   OCTAVE_DEPRECATED ("use 'numel' instead")
@@ -160,16 +137,20 @@ private:
   double rng_inc;
 
   octave_idx_type rng_numel;
 
   mutable Matrix cache;
 
   octave_idx_type numel_internal (void) const;
 
+  double limit_internal (void) const;
+
+  void init (void);
+
   void clear_cache (void) const { cache.resize (0, 0); }
 
 protected:
 
   // For operators' usage (to allow all values to be set directly).
   Range (double b, double l, double i, octave_idx_type n)
     : rng_base (b), rng_limit (l), rng_inc (i),
       rng_numel (n), cache ()
