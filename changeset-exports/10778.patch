# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1278613517 -7200
#      Thu Jul 08 20:25:17 2010 +0200
# Node ID 6035bf68a7556f97e969182b8b4099f301cd58e8
# Parent  f2a8f68d9c2b6d768fa88653f5e3867647fc77b8
Support imread('file', 'frames', 'all') (Feature Request #30365)

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2010-07-08  David Bateman  <dbateman@free.fr>
+
+	* DLD-FUNCTIONS/__magick_read__,cc (F__magick_read__): Add the syntax
+	__magick_read__ ("file", "frames", "all").
+
 2010-07-08  Rik <octave@nomad.inbox5.com>
 
 	* DLD_FUNCTIONS/eigs.cc: Initialize random number generator in test
         blocks to get reproducible results.
 
 2010-07-08  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-cell.cc (Fstruct2cell): Use octave_map. Optimize.
diff --git a/src/DLD-FUNCTIONS/__magick_read__.cc b/src/DLD-FUNCTIONS/__magick_read__.cc
--- a/src/DLD-FUNCTIONS/__magick_read__.cc
+++ b/src/DLD-FUNCTIONS/__magick_read__.cc
@@ -398,27 +398,37 @@ Instead you should use @code{imread}.\n\
       Magick::InitializeMagick (program_name.c_str ());
 
       // Restore locale from before GraphicsMagick initialisation
       setlocale (LC_ALL, locale.c_str ());
 
       initialized = true;
     }
 
-  if (args.length () > 2 || args.length () < 1 || ! args(0).is_string ()
+  if (args.length () > 3 || args.length () < 1 || ! args(0).is_string ()
       || nargout > 3)
     {
       print_usage ();
       return output;
     }
 
   Array<int> frameidx;
+  bool all_frames = false;
 
   if (args.length () == 2 && args(1).is_real_type ())
     frameidx = args(1).int_vector_value();
+  else if (args.length () == 3 && args(1).is_string () 
+           && args(1).string_value() == "frames")
+    {
+      if (args(2).is_string () 
+          && args(2).string_value() == "all")
+        all_frames = true;
+      else if (args(2).is_real_type ())
+        frameidx = args(2).int_vector_value();
+    }
   else
     {
       frameidx = Array<int> (1, 1);
       frameidx(0) = 1;
     }
 
   std::vector<Magick::Image> imvec;
 
@@ -436,26 +446,34 @@ Instead you should use @code{imread}.\n\
       warning ("Magick++ coder error: %s", e.what ());
     }
   catch (Magick::Exception& e)
     {
       error ("Magick++ exception: %s", e.what ());
       return output;
     }
 
-  for (int i = 0; i < frameidx.length(); i++)
+  int nframes = imvec.size ();
+  if (all_frames)
     {
-      frameidx(i) = frameidx(i) - 1;
+      frameidx = Array<int> (1, nframes);
+      for (int i = 0; i < frameidx.length(); i++)
+        frameidx(i) = i;
+    }
+  else
+    {
+      for (int i = 0; i < frameidx.length(); i++)
+        {
+          frameidx(i) = frameidx(i) - 1;
 
-      int nframes = imvec.size ();
-
-      if (frameidx(i) >= nframes || frameidx(i) < 0)
-        {
-          error ("__magick_read__: invalid index vector");
-          return output;
+          if (frameidx(i) >= nframes || frameidx(i) < 0)
+            {
+              error ("__magick_read__: invalid index vector");
+              return output;
+            }
         }
     }
 
   Magick::ClassType klass = imvec[0].classType ();
 
   if (klass == Magick::PseudoClass && nargout > 1)
     output = read_indexed_images (imvec, frameidx, (nargout == 3));
   else
