# HG changeset patch
# User jwe
# Date 1068698285 0
#      Thu Nov 13 04:38:05 2003 +0000
# Node ID cba347c642e2df19741fbf8d02eace796871ea3b
# Parent  15ddd40fee90c878dd1246150eb54c7ca551bba2
[project @ 2003-11-13 04:38:05 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,21 @@
+2003-11-12  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* lo-ieee.cc (octave_ieee_init): Set octave_Inf, octave_NaN, and
+	octave_NA to DBL_MAX if native float format is vaxd, vaxg, or cray.
+
+	* cmd-edit.cc (gnu_readline::do_generate_filename_completions,
+	default_command_editor::do_generate_filename_completions,
+	command_editor::generate_filename_completions): New functions.
+	* cmd-edit.h: Provide decls.
+	* oct-rl-edit.c (octave_rl_filename_completion_function): New
+	function.
+	* oct-rl-edit.h: Provide decl.
+
 2003-11-11  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Array.h (INSTANTIATE_ARRAY_ASSIGN, INSTANTIATE_ARRAY_AND_ASSIGN,
 	INSTANTIATE_ARRAY): New macros.
 	* Array-C.cc, Array-b.cc, Array-ch.cc, Array-d.cc, Array-i.cc,
 	Array-idx-vec.cc, Array-s.cc, Array-str.cc, ODESSA.cc: Use them.
 
 	* Array.h (Array<T>::ipermute): New function.
diff --git a/liboctave/cmd-edit.cc b/liboctave/cmd-edit.cc
--- a/liboctave/cmd-edit.cc
+++ b/liboctave/cmd-edit.cc
@@ -100,16 +100,19 @@ public:
   void do_set_basic_quote_characters (const std::string& s);
 
   void do_set_completion_append_character (char c);
 
   void do_set_completion_function (completion_fcn f);
 
   completion_fcn do_get_completion_function (void) const;
 
+  string_vector
+  do_generate_filename_completions (const std::string& text);
+
   void do_insert_text (const std::string& text);
 
   void do_newline (void);
 
   void do_clear_undo_list (void);
 
   void do_set_startup_hook (startup_hook_fcn f);
 
@@ -315,16 +318,55 @@ gnu_readline::do_set_completion_function
 }
 
 gnu_readline::completion_fcn
 gnu_readline::do_get_completion_function (void) const
 {
   return completion_function;
 }
 
+string_vector
+gnu_readline::do_generate_filename_completions (const std::string& text)
+{
+  string_vector retval;
+
+  int n = 0;
+  int count = 0;
+
+  char *fn = 0;
+
+  while (1)
+    {
+      fn = ::octave_rl_filename_completion_function (text.c_str (), count);
+
+      if (fn)
+	{
+	  if (count == n)
+	    {
+	      // Famous last words:  Most large directories will not
+	      // have more than a few hundred files, so we should not
+	      // resize too many times even if the growth is linear...
+
+	      n += 100;
+	      retval.resize (n);
+	    }
+
+	  retval[count++] = fn;
+
+	  free (fn);
+	}
+      else
+	break;
+    }
+
+  retval.resize (count);
+
+  return retval;
+}
+
 void
 gnu_readline::do_insert_text (const std::string& text)
 {
   ::octave_rl_insert_text (text.c_str ());
 }
 
 void
 gnu_readline::do_newline (void)
@@ -462,16 +504,18 @@ public:
   void do_set_input_stream (FILE *f);
 
   FILE *do_get_input_stream (void);
 
   void do_set_output_stream (FILE *f);
 
   FILE *do_get_output_stream (void);
 
+  string_vector do_generate_filename_completions (const std::string& text);
+
   void do_insert_text (const std::string&);
 
   void do_newline (void);
 
 private:
 
   FILE *input_stream;
 
@@ -506,16 +550,23 @@ default_command_editor::do_set_output_st
 }
 
 FILE *
 default_command_editor::do_get_output_stream (void)
 {
   return output_stream;
 }
 
+string_vector
+default_command_editor::do_generate_filename_completions (const std::string& text)
+{
+  // XXX FIXME XXX
+  return string_vector ();
+}
+
 void
 default_command_editor::do_insert_text (const std::string&)
 {
   // XXX FIXME XXX
 }
 
 void
 default_command_editor::do_newline (void)
@@ -709,16 +760,23 @@ command_editor::set_completion_function 
 
 command_editor::completion_fcn
 command_editor::get_completion_function (void)
 {
   return (instance_ok ())
     ? instance->do_get_completion_function () : 0;
 }
 
+string_vector
+command_editor::generate_filename_completions (const std::string& text)
+{
+  return (instance_ok ())
+    ? instance->do_generate_filename_completions (text) : string_vector ();
+}
+
 void
 command_editor::insert_text (const std::string& text)
 {
   if (instance_ok ())
     instance->do_insert_text (text);
 }
 
 void
diff --git a/liboctave/cmd-edit.h b/liboctave/cmd-edit.h
--- a/liboctave/cmd-edit.h
+++ b/liboctave/cmd-edit.h
@@ -22,16 +22,18 @@ Software Foundation, 59 Temple Place - S
 
 #if !defined (octave_cmd_edit_h)
 #define octave_cmd_edit_h 1
 
 #include <cstdio>
 
 #include <string>
 
+#include "str-vec.h"
+
 class
 command_editor
 {
 protected:
 
   command_editor (void)
     : command_number (0) { }
 
@@ -80,16 +82,18 @@ public:
   static void set_basic_quote_characters (const std::string& s);
 
   static void set_completion_append_character (char c);
 
   static void set_completion_function (completion_fcn f);
 
   static completion_fcn get_completion_function (void);
 
+  static string_vector generate_filename_completions (const std::string& text);
+
   static void insert_text (const std::string& text);
 
   static void newline (void);
 
   static void clear_undo_list (void);
 
   static void set_startup_hook (startup_hook_fcn f);
 
@@ -172,16 +176,18 @@ protected:
   virtual void do_set_basic_quote_characters (const std::string&) { }
 
   virtual void do_set_completion_append_character (char) { }
 
   virtual void do_set_completion_function (completion_fcn) { }
 
   virtual completion_fcn do_get_completion_function (void) const { return 0; }
 
+  virtual string_vector do_generate_filename_completions (const std::string& text) = 0;
+
   virtual void do_insert_text (const std::string&) = 0;
 
   virtual void do_newline (void) = 0;
 
   virtual void do_clear_undo_list (void) { }
 
   virtual void do_set_startup_hook (startup_hook_fcn) { }
 
diff --git a/liboctave/oct-rl-edit.c b/liboctave/oct-rl-edit.c
--- a/liboctave/oct-rl-edit.c
+++ b/liboctave/oct-rl-edit.c
@@ -189,16 +189,22 @@ octave_rl_read_init_file (const char *f)
 int
 octave_rl_filename_completion_desired (int arg)
 {
   int retval = rl_filename_completion_desired;
   rl_filename_completion_desired = arg;
   return retval;
 }
 
+char *
+octave_rl_filename_completion_function (const char *text, int state)
+{
+  return rl_filename_completion_function (text, state);
+}
+
 void
 octave_rl_set_basic_word_break_characters (const char *s)
 {
   OCTAVE_RL_SAVE_STRING (ss, s);
 
   rl_basic_word_break_characters = ss;
 }
 
diff --git a/liboctave/oct-rl-edit.h b/liboctave/oct-rl-edit.h
--- a/liboctave/oct-rl-edit.h
+++ b/liboctave/oct-rl-edit.h
@@ -69,16 +69,18 @@ extern FILE *octave_rl_get_input_stream 
 extern void octave_rl_set_output_stream (FILE *);
 
 extern FILE *octave_rl_get_output_stream (void);
 
 extern void octave_rl_read_init_file (const char *);
 
 extern int octave_rl_filename_completion_desired (int);
 
+extern char *octave_rl_filename_completion_function (const char *, int);
+
 extern void octave_rl_set_basic_word_break_characters (const char *);
 
 extern void octave_rl_set_completer_word_break_characters (const char *);
 
 extern void octave_rl_set_basic_quote_characters (const char *);
 
 extern void octave_rl_set_completion_append_character (char);
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,35 @@
+2003-11-12  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* ov-cell.cc (print_as_scalar): New function.
+	* ov-cell.h: Provide decl.
+
+	* ov-cell.cc (octave_cell::print_name_tag): Delete.
+	* ov-cell.h: Delete decl.
+
+	* ov-base-mat.cc (octave_base_matrix::print_name_tag): Delete.
+	* ov-base-mat.h: Delete decl.
+
+	* ov-base.cc (octave_base_value::print_name_tag):
+	Use print_as_scalar here. 
+	* ov.h (octave_base_value::print_as_scalar): New virtual function.
+	* ov-base.h (octave_base_value::print_as_scalar):
+	New default implementation.
+	* ov-base-mat.h (octave_base_matrix::pirnt_as_scalar):
+	Don't declare as virtual here.
+
+	* ov-struct.cc (octave_struct::print_raw): If only printing keys,
+	also print dimensions of fields and overall array.
+
+	* sysdep.cc (Fnative_float_format): New function.
+
+	* input.cc (generate_possible_completions): Also append all
+	possible filename completions here.
+
 2003-11-11  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* oct-stream.cc: Explicitly instantiate octave_scan functions.
 
 	* TEMPLATE-INST/Array-c.cc, TEMPLATE-INST/Array-os.cc,
 	TEMPLATE-INST/Array-sym.cc, ov-typeinfo.cc:
 	Use new INSTANTIATE_ARRAY macro.
 
diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -381,23 +381,19 @@ get_input_from_stdin (void)
 // XXX FIXME XXX -- make this generate file names when appropriate.
 
 static string_vector
 generate_possible_completions (const std::string& text, std::string& prefix,
 			       std::string& hint)
 {
   string_vector names;
 
-  command_editor::filename_completion_desired (true);
-
   prefix = "";
 
-  if (! text.empty () && text != "." && text != ".."
-      && text.find_first_of (file_ops::dir_sep_chars) == NPOS
-      && text.rfind ('.') != NPOS)
+  if (looks_like_struct (text))
     names = generate_struct_completions (text, prefix, hint);
   else
     names = make_name_list ();
 
   // Sort and remove duplicates.
 
   names.qsort (true);
 
@@ -411,52 +407,60 @@ generate_completion (const std::string& 
 
   static std::string prefix;
   static std::string hint;
 
   static size_t hint_len = 0;
 
   static int list_index = 0;
   static int name_list_len = 0;
+  static int name_list_total_len = 0;
   static string_vector name_list;
+  static string_vector file_name_list;
 
   static int matches = 0;
 
   if (state == 0)
     {
       list_index = 0;
 
       prefix = "";
 
       hint = text;
 
       name_list = generate_possible_completions (text, prefix, hint);
 
       name_list_len = name_list.length ();
 
+      file_name_list = command_editor::generate_filename_completions (text);
+
+      name_list.append (file_name_list);
+
+      name_list_total_len = name_list.length ();
+
       hint_len = hint.length ();
 
       matches = 0;
 
       for (int i = 0; i < name_list_len; i++)
 	if (hint == name_list[i].substr (0, hint_len))
 	  matches++;
     }
 
-  if (name_list_len > 0 && matches > 0)
+  if (name_list_total_len > 0 && matches > 0)
     {
-      while (list_index < name_list_len)
+      while (list_index < name_list_total_len)
 	{
 	  std::string name = name_list[list_index];
 
 	  list_index++;
 
 	  if (hint == name.substr (0, hint_len))
 	    {
-	      if (! prefix.empty ())
+	      if (list_index <= name_list_len && ! prefix.empty ())
 		retval = prefix + "." + name;
 	      else
 		retval = name;
 
 	      // XXX FIXME XXX -- looks_like_struct is broken for now,
 	      // so it always returns false.
 
  	      if (matches == 1 && looks_like_struct (retval))
diff --git a/src/ov-base-mat.cc b/src/ov-base-mat.cc
--- a/src/ov-base-mat.cc
+++ b/src/ov-base-mat.cc
@@ -215,38 +215,16 @@ void
 octave_base_matrix<MT>::print_raw (std::ostream& os,
 				   bool pr_as_read_syntax) const
 {
   octave_print_internal (os, matrix, pr_as_read_syntax,
 			 current_print_indent_level ());
 }
 
 template <class MT>
-bool
-octave_base_matrix<MT>::print_name_tag (std::ostream& os,
-					const std::string& name) const
-{
-  bool retval = false;
-
-  indent (os);
-
-  if (print_as_scalar ())
-    os << name << " = ";
-  else
-    {
-      os << name << " =";
-      newline (os);
-      newline (os);
-      retval = true;
-    }
-
-  return retval;
-}
-
-template <class MT>
 void
 octave_base_matrix<MT>::print_info (std::ostream& os,
 				    const std::string& prefix) const
 {
   matrix.print_info (os, prefix);
 }
 
 /*
diff --git a/src/ov-base-mat.h b/src/ov-base-mat.h
--- a/src/ov-base-mat.h
+++ b/src/ov-base-mat.h
@@ -106,24 +106,22 @@ public:
   bool is_numeric_type (void) const { return true; }
 
   bool is_defined (void) const { return true; }
 
   bool is_constant (void) const { return true; }
 
   bool is_true (void) const;
 
-  virtual bool print_as_scalar (void) const;
+  bool print_as_scalar (void) const;
 
   void print (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
-  bool print_name_tag (std::ostream& os, const std::string& name) const;
-
   void print_info (std::ostream& os, const std::string& prefix) const;
 
 protected:
 
   MT matrix;
 };
 
 #endif
diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -213,21 +213,31 @@ void
 octave_base_value::print_raw (std::ostream&, bool) const
 {
   gripe_wrong_type_arg ("octave_base_value::print_raw ()", type_name ());
 }
 
 bool
 octave_base_value::print_name_tag (std::ostream& os, const std::string& name) const
 {
+  bool retval = false;
+
   indent (os);
-  os << name << " =";
-  newline (os);
-  newline (os);
-  return true;
+
+  if (print_as_scalar ())
+    os << name << " = ";
+  else
+    {
+      os << name << " =";
+      newline (os);
+      newline (os);
+      retval = true;
+    }
+
+  return retval;
 }
 
 void
 octave_base_value::print_info (std::ostream& os,
 			       const std::string& prefix) const
 {
   os << "no info for type: " << type_name () << "\n";
 }
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -229,16 +229,18 @@ public:
   octave_fcn_handle *fcn_handle_value (bool silent);
 
   octave_value_list list_value (void) const;
 
   octave_value convert_to_str_internal (bool pad, bool force) const;
 
   void convert_to_row_or_column_vector (void);
 
+  bool print_as_scalar (void) const { return false; }
+
   void print (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   bool print_name_tag (std::ostream& os, const std::string& name) const;
 
   void print_info (std::ostream& os, const std::string& prefix) const;
 
diff --git a/src/ov-cell.cc b/src/ov-cell.cc
--- a/src/ov-cell.cc
+++ b/src/ov-cell.cc
@@ -320,16 +320,22 @@ octave_cell::all_strings (bool pad, bool
 	}
     }
 
 
 
   return retval;
 }
 
+bool
+octave_cell::print_as_scalar (void) const
+{
+  return (ndims () > 2 || numel () == 0);
+}
+
 void
 octave_cell::print (std::ostream& os, bool) const
 {
   print_raw (os);
 }
 
 void
 octave_cell::print_raw (std::ostream& os, bool) const
@@ -384,35 +390,16 @@ octave_cell::print_raw (std::ostream& os
     {
       indent (os);
       dim_vector dv = matrix.dims ();
       os << "{" << dv.str () << " Cell Array}";
       newline (os);
     }
 }
 
-bool
-octave_cell::print_name_tag (std::ostream& os, const std::string& name) const
-{
-  indent (os);
-
-  int nr = rows ();
-  int nc = columns ();
-
-  if (nr > 0 && nc > 0)
-    {
-      os << name << " =";
-      newline (os);
-    }
-  else
-    os << name << " = ";
-
-  return false;
-}
-
 DEFUN (iscell, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} iscell (@var{x})\n\
 Return true if @var{x} is a cell array object.  Otherwise, return\n\
 false.\n\
 @end deftypefn")
 {
   octave_value retval;
diff --git a/src/ov-cell.h b/src/ov-cell.h
--- a/src/ov-cell.h
+++ b/src/ov-cell.h
@@ -98,22 +98,22 @@ public:
 
   octave_value_list list_value (void) const;
 
   octave_value convert_to_str_internal (bool pad, bool force) const
     { return all_strings (pad, force); }
 
   string_vector all_strings (bool pad = false, bool force = false) const;
 
+  bool print_as_scalar (void) const;
+
   void print (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
-  bool print_name_tag (std::ostream& os, const std::string& name) const;
-
 private:
   DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
 
diff --git a/src/ov-cs-list.cc b/src/ov-cs-list.cc
--- a/src/ov-cs-list.cc
+++ b/src/ov-cs-list.cc
@@ -48,16 +48,22 @@ octave_cs_list::octave_cs_list (const Ce
 
   lst.resize (n);
 
   for (int i = 0; i < n; i++)
     lst(i) = c(i);
 }
 
 void
+octave_cs_list::print (std::ostream& os, bool) const
+{
+  print_raw (os);
+}
+
+void
 octave_cs_list::print_raw (std::ostream& os, bool) const
 {
   unwind_protect::begin_frame ("octave_cs_list_print");
 
   int n = lst.length ();
 
   if (n > 0)
     {
diff --git a/src/ov-cs-list.h b/src/ov-cs-list.h
--- a/src/ov-cs-list.h
+++ b/src/ov-cs-list.h
@@ -72,16 +72,18 @@ public:
   bool is_defined (void) const { return true; }
 
   bool is_constant (void) const { return true; }
 
   bool is_cs_list (void) const { return true; }
 
   octave_value_list list_value (void) const { return lst; }
 
+  void print (std::ostream& os, bool) const;
+
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
 private:
 
   // The list of Octave values.
   octave_value_list lst;
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
diff --git a/src/ov-struct.cc b/src/ov-struct.cc
--- a/src/ov-struct.cc
+++ b/src/ov-struct.cc
@@ -371,33 +371,52 @@ octave_struct::print_raw (std::ostream& 
       indent (os);
       os << "{";
       newline (os);
 
       increment_indent_level ();
 
       int n = map.numel ();
 
+      if (n > 1 && print_keys_only)
+	{
+	  indent (os);
+	  dim_vector dv = dims ();
+	  os << dv.str () << " struct array containing the fields:";
+	  newline (os);
+	  newline (os);
+
+	  increment_indent_level ();
+	}
+
       for (Octave_map::const_iterator p = map.begin (); p != map.end (); p++)
 	{
 	  std::string key = map.key (p);
 	  Cell val = map.contents (p);
 
 	  octave_value tmp = (n == 1) ? val(0) : octave_value (val, true);
 
 	  if (print_keys_only)
 	    {
 	      indent (os);
-	      os << key << ": " << tmp.type_name ();
+	      os << key;
+	      if (n == 1)
+		{
+		  dim_vector dv = tmp.dims ();
+		  os << ": " << dv.str () << " " << tmp.type_name ();
+		}
 	      newline (os);
 	    }
 	  else
 	    tmp.print_with_name (os, key);
 	}
 
+      if (n > 1 && print_keys_only)
+	decrement_indent_level ();
+
       decrement_indent_level ();
 
       indent (os);
       os << "}";
       newline (os);
     }
   else
     {
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -579,16 +579,19 @@ public:
   octave_value convert_to_str (bool pad = false, bool force = false) const;
 
   virtual octave_value convert_to_str_internal (bool pad, bool force) const
     { return rep->convert_to_str_internal (pad, force); }
 
   virtual void convert_to_row_or_column_vector (void)
     { rep->convert_to_row_or_column_vector (); }
 
+  virtual bool print_as_scalar (void) const
+    { return rep->print_as_scalar (); }
+
   virtual void print (std::ostream& os, bool pr_as_read_syntax = false) const
     { rep->print (os, pr_as_read_syntax); }
 
   virtual void print_raw (std::ostream& os,
 			  bool pr_as_read_syntax = false) const
     { rep->print_raw (os, pr_as_read_syntax); }
 
   virtual bool print_name_tag (std::ostream& os, const std::string& name) const
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -27,16 +27,17 @@ Software Foundation, 59 Temple Place - S
 #include <cstdio>
 #include <cstring>
 
 #include <set>
 #include <string>
 
 #include "file-stat.h"
 #include "oct-env.h"
+#include "file-ops.h"
 #include "glob-match.h"
 #include "str-vec.h"
 
 #include <defaults.h>
 #include "Cell.h"
 #include "defun.h"
 #include "dirfns.h"
 #include "error.h"
@@ -461,17 +462,21 @@ generate_struct_completions (const std::
 }
 
 // XXX FIXME XXX -- this will have to be much smarter to work
 // "correctly".
 
 bool
 looks_like_struct (const std::string& text)
 {
-  bool retval = false;
+  bool retval = (! text.empty ()
+		 && text != "."
+		 && text.find_first_of (file_ops::dir_sep_chars) == NPOS
+		 && text.find ("..") == NPOS
+		 && text.rfind ('.') != NPOS);
 
 #if 0
   symbol_record *sr = curr_sym_tab->lookup (text);
 
   if (sr && ! sr->is_function ())
     {
       int parse_status;
 
