# HG changeset patch
# User Rik <rik@octave.org>
# Date 1545087403 28800
#      Mon Dec 17 14:56:43 2018 -0800
# Node ID 3a8094a7019352cdfde41312bf457cf606d22096
# Parent  6cd1752f21e945885dd068e9d687050f6cdbefe4
movfun.m: Optimize subfunction replaceval_bc() for 33% speed improvement.

* movfun.m: During input validation expand scalar WLEN to two-input form
[NB, NA] which makes later coding easier.
* movfun.m (replaceval_bc): Remove function calls to prepad, postpad
with direct padding of input array for performance.

diff --git a/scripts/signal/movfun.m b/scripts/signal/movfun.m
--- a/scripts/signal/movfun.m
+++ b/scripts/signal/movfun.m
@@ -196,16 +196,21 @@ function y = movfun (fcn, x, wlen, varar
     (dim = find (szx > 1, 1)) || (dim = 1);
   endif
 
   N = szx(dim);  
 
   ## Calculate slicing indices.  This call also validates WLEN input.
   [slc, C, Cpre, Cpos, win] = movslice (N, wlen);
 
+  ## Use [nb, na] format which makes replaceval_bc() simpler.
+  if (isscalar (wlen))
+    wlen = [wlen, wlen];
+  endif
+
   omitnan = strcmpi (nancond, "omitnan");
   if (omitnan)
     warning ('movfun: "omitnan" is not yet implemented, using "includenan"');
   endif
 
   ## Move the desired dim to be the 1st dimension (rows)
   nd    = length (szx);                  # number of dimensions
   dperm = [dim, 1:(dim-1), (dim+1):nd];  # permutation of dimensions
@@ -318,26 +323,27 @@ function y = replaceval_bc (fcn, x, idxp
   persistent substitute;
 
   ## In-band method to initialize substitute value
   if (islogical (fcn))
     substitute = x;
     return;
   endif
 
-  ## Pad beginning and end of window with specified value.
-  if (isscalar (wlen))
-    wlen = [wlen, wlen];
-  endif
-  N = length (x);
   if (min (idxp) == 1)
-    x = prepad (x, N + wlen(1), substitute);
+    ## pre-pad window
+    sz = size (x);
+    sz(1) = wlen(1);
+    x = [substitute(ones (sz)); x];
     idx = idxp + win + wlen(1);
-  elseif (max (idxp) == N)
-    x   = postpad (x, N + wlen(2), substitute);
+  else
+    ## post-pad window
+    sz = size (x);
+    sz(1) = wlen(2);
+    x = [x; substitute(ones (sz))];
     idx = idxp + win;
   endif
 
   y = fcn (x(idx));
 
 endfunction
 
 ## Apply "same" boundary conditions
