# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1259477380 -3600
#      Sun Nov 29 07:49:40 2009 +0100
# Node ID dd3fc8ba479692b7562d8b9509e4585ce2b8e244
# Parent  fed4aad2cdca289d9eed8a9da7747bbdd054ca52
support libcurl < 7.19

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2009-11-29  Jaroslav Hajek  <highegg@gmail.com>
+
+	* DLD-FUNCTIONS/urlwrite.cc (curl_handle::init): Use CURLOPT_USERPWD
+	if libcurl ver < 7.19.0.
+
 2009-11-28  Shai Ayal  <shaiay@users.sourceforge.net>
 
 	* gl-render.cc (opengl_renderer::draw_image): Handle indexed images.
 
 2009-11-28  Shai Ayal  <shaiay@users.sourceforge.net>
 
 	* gl-render.h (opengl_renderer::draw): Draw children from end of
 	list to preserve correct stacking order (first child should be on
diff --git a/src/DLD-FUNCTIONS/urlwrite.cc b/src/DLD-FUNCTIONS/urlwrite.cc
--- a/src/DLD-FUNCTIONS/urlwrite.cc
+++ b/src/DLD-FUNCTIONS/urlwrite.cc
@@ -46,16 +46,17 @@ along with Octave; see the file COPYING.
 #include "ov-cell.h"
 #include "pager.h"
 #include "oct-map.h"
 #include "unwind-prot.h"
 
 #if defined (HAVE_CURL)
 
 #include <curl/curl.h>
+#include <curl/curlver.h>
 #include <curl/types.h>
 #include <curl/easy.h>
 
 static int 
 write_data (void *buffer, size_t size, size_t nmemb, void *streamp)
 {
   std::ostream& stream = *(static_cast<std::ostream*> (streamp));
   stream.write (static_cast<const char*> (buffer), size*nmemb);
@@ -554,20 +555,33 @@ private:
 
   void init (const std::string& user, const std::string& passwd, 
 	     std::istream& is, std::ostream& os) 
     {
       // No data transfer by default
       setopt (CURLOPT_NOBODY, 1);
 
       // Set the username and password
+#if (LIBCURL_VERSION_NUM >= 0x071300)
+      // This is possible since cURL 7.19.
       if (user.length () != 0)
 	setopt (CURLOPT_USERNAME, user.c_str());
       if (passwd.length () != 0)
 	setopt (CURLOPT_PASSWORD, passwd.c_str());
+#else
+      // Probably needs to be static to remain valid long enough.
+      static std::string userpwd;
+      if (user.length () != 0)
+        {
+          userpwd = user;
+          if (passwd.length () != 0)
+            userpwd += ':' + passwd;
+          setopt (CURLOPT_USERPWD, userpwd.c_str ());
+        }
+#endif
 
       // Define our callback to get called when there's data to be written.
       setopt (CURLOPT_WRITEFUNCTION, write_data);
 
       // Set a pointer to our struct to pass to the callback.
       setopt (CURLOPT_WRITEDATA, static_cast<void*> (&os));
 
       // Define our callback to get called when there's data to be read
