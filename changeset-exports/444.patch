# HG changeset patch
# User jwe
# Date 770577307 0
#      Thu Jun 02 17:15:07 1994 +0000
# Node ID ba637cc5c5f3ea073de4de316719b22cd8471906
# Parent  25570b554bca4919f90f52eaee6891a8baa87ce2
[project @ 1994-06-02 17:15:07 by jwe]

diff --git a/src/builtins.cc b/src/builtins.cc
--- a/src/builtins.cc
+++ b/src/builtins.cc
@@ -34,16 +34,17 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "t-builtins.h"
 #include "g-builtins.h"
 #include "builtins.h"
 #include "octave.h"
 #include "utils.h"
 #include "tree.h"
 #include "help.h"
 #include "pager.h"
+#include "sysdep.h"
 #include "mappers.h"
 #include "variables.h"
 #include "user-prefs.h"
 #include "missing-math.h"
 
 // NOTE: nargin == 1 means that the function takes no arguments (just
 // like C, the first argument is (or should be, anyway) the function
 // name).  Also, -1 is shorthand for infinity.
@@ -299,16 +300,26 @@ where x, xdot, and res are vectors, and 
     "expm (X): matrix exponential, e^A", },
 
   { "eye", 3, 1, builtin_eye,
     "eye (n), eye (n, m), eye (X): create an identity matrix", },
 
   { "fclose", 2, 1, builtin_fclose,
     "fclose (\"filename\" or filenum): close a file", },
 
+  { "feof", 3, 1, builtin_feof,
+    "eof = feof (filenum)\n\n\
+ Returns a non zero eof for an end of file condition for the\n\
+ file specified by \"filenum\" from fopen", },
+
+  { "ferror", 3, 1, builtin_ferror,
+    "error = ferror (filenum)\n\n\
+ Returns a non zero \"error\" for an error condition on the\n\
+ file specified by \"filenum\" from fopen", },
+
   { "feval", -1, 1, builtin_feval,
     "feval (\"name\", args, ...): evaluate first argument as function", },
 
   { "fflush", 2, 1, builtin_fflush,
     "fflush (\"filename\" or filenum): flush buffered data to output file", },
 
   { "fft", 2, 1, builtin_fft,
     "fft (X): fast fourier transform of a vector", },
@@ -331,16 +342,27 @@ where x, xdot, and res are vectors, and 
    r+ : open text file for update (i.e., reading and writing)\n\
    w+ : create text file for update; discard previous contents if any\n\
    a+ : append; open or create text file for update, writing at end\n\n\
  Update mode permits reading from and writing to the same file.\n", },
 
   { "fprintf", -1, 1, builtin_fprintf,
     "fprintf (\"file\", \"fmt\", ...)", },
 
+  { "fread", 3, 1, builtin_fread,
+    "[data, count] = fread (filenum, size, \"precision\")\n\n\
+ Reads data in binary form of type \"precision\" from a file.\n\n\
+ filenum   : file number from fopen\n\
+ size      : size specification for the Data matrix\n\
+ precision : type of data to read, valid types are\n\n\
+               'char',   'schar', 'short',  'int',  'long', 'float'\n\
+               'double', 'uchar', 'ushort', 'uint', 'ulong'\n\n\
+ data      : matrix in which the data is stored\n\
+ count     : number of elements read", },
+
   { "freport", 1, 1, builtin_freport,
     "freport (): list open files and their status", },
 
   { "frewind", 2, 1, builtin_frewind,
     "frewind (\"filename\" or filenum): set file position at beginning of file", },
 
   { "fscanf", 3, -1, builtin_fscanf,
     "[a, b, c, ...] = fscanf (\"file\", \"fmt\")", },
@@ -385,24 +407,33 @@ where y and x are vectors.", },
     "fsqp_options (keyword, value)\n\n\
        Set or show options for fsqp.  Keywords may be abbreviated\n\
        to the shortest match.", },
 #endif
 
   { "ftell", 2, 1, builtin_ftell,
     "position = ftell (\"filename\" or filenum): returns the current file position", },
 
+  { "fwrite", 3, 1, builtin_fwrite,
+    "count = fwrite (filenum, Data, \"precision\")\n\n\
+ Writes data to a file in binary form of size \"precision\"\n\n\
+ filenum   : file number from fopen\n\
+ Data      : matrix of elements to be written\n\
+ precision : type of data to read, valid types are\n\n\
+               'char',   'schar', 'short',  'int',  'long', 'float'\n\
+               'double', 'uchar', 'ushort', 'uint', 'ulong'\n\n\
+ count     : number of elements written", },
+
   { "getenv", 2, 1, builtin_getenv,
     "getenv (\"string\"): get environment variable values", },
 
   { "givens", 3, 2, builtin_givens,
     "G = givens (x, y): compute orthogonal matrix G = [c s; -conj (s) c]\n\
       such that G [x; y] = [*; 0]  (x, y scalars)\n\n\
       [c, s] = givens (x, y) returns the (c, s) values themselves.", },
-  
 
   { "hess", 2, 2, builtin_hess,
     "[P, H] = hess (A) or H = hess (A): Hessenberg decomposition", },
 
   { "home", 1, 0, builtin_clc,
     "home (): clear screen", },
 
   { "input", 3, 1, builtin_input,
@@ -893,60 +924,27 @@ install_builtins (void)
   bind_builtin_variable ("stdin", tmp, 1, 1);
 
   tmp =  new tree_constant (1.0);
   bind_builtin_variable ("stdout", tmp, 1, 1);
 
   tmp =  new tree_constant (2.0);
   bind_builtin_variable ("stderr", tmp, 1, 1);
 
-// If using 1.0 / 0.0 doesn't work, you might also try using a very
-// large constant like 1.0e100000.
-
-#if defined (HAVE_ISINF) || defined (HAVE_FINITE)
-#ifdef linux
-  double tmp_inf = HUGE_VAL;
-#else
-  double tmp_inf = 1.0 / 0.0;
-#endif
-
-  tmp = new tree_constant (tmp_inf);
+  tmp = new tree_constant (octave_Inf);
   bind_builtin_variable ("Inf", tmp, 1, 1);
 
-  tmp = new tree_constant (tmp_inf);
+  tmp = new tree_constant (octave_Inf);
   bind_builtin_variable ("inf", tmp, 1, 1);
 
-#else
-
-// This is sort of cheesy, but what can we do, other than blowing it
-// off completely, or writing an entire IEEE emulation package?
-
-  tmp = new tree_constant (DBL_MAX);
-  bind_builtin_variable ("Inf", tmp, 1, 1);
-
-  tmp = new tree_constant (DBL_MAX);
-  bind_builtin_variable ("inf", tmp, 1, 1);
-#endif
-
-// If 0.0 / 0.0 fails to produce a NaN, you might also try
-// something like Inf / Inf.
-
-#if defined (HAVE_ISNAN)
-#ifdef linux
-  double tmp_nan = NAN;
-#else
-  double tmp_nan = 0.0 / 0.0;
-#endif
-
-  tmp = new tree_constant (tmp_nan);
+  tmp = new tree_constant (octave_NaN);
   bind_builtin_variable ("NaN", tmp, 1, 1);
 
-  tmp = new tree_constant (tmp_nan);
+  tmp = new tree_constant (octave_NaN);
   bind_builtin_variable ("nan", tmp, 1, 1);
-#endif
 }
 
 int
 is_text_function_name (const char *s)
 {
   int retval = 0;
 
   builtin_text_functions *tfptr = text_functions;
diff --git a/src/file-io.cc b/src/file-io.cc
--- a/src/file-io.cc
+++ b/src/file-io.cc
@@ -26,28 +26,33 @@ Software Foundation, 675 Mass Ave, Cambr
 #ifdef HAVE_CONFIG_H
 #include "config.h"
 #endif
 
 #include <DLList.h>
 #include <unistd.h>
 #include <string.h>
 #include <stdio.h>
+#include <errno.h>
 #include <stdlib.h>
 #include <strstream.h>
 #include <ctype.h>
 
+#include "Matrix.h"
+
 #include "statdefs.h"
 #include "file-io.h"
 #include "input.h"
 #include "octave-hist.h"
 #include "tree-const.h"
 #include "error.h"
 #include "utils.h"
 #include "pager.h"
+#include "sysdep.h"
+#include "mappers.h"
 
 // keeps a count of how many files are open and in the file list
 static int file_count = 0;
 
 // keeps a count of args sent to printf or scanf
 static int fmt_arg_count = 0;
 
 class file_info
@@ -61,16 +66,19 @@ class file_info
 
   ~file_info (void);
 
   int number (void) const;
   const char *name (void) const;
   FILE *fptr (void) const;
   const char *mode (void) const;
 
+  int eof (void) const;
+  int error (void) const;
+
  private:
   int file_number;
   char *file_name;
   FILE *file_fptr;
   char *file_mode;
 };
 
 file_info::file_info (void)
@@ -154,16 +162,20 @@ initialize_file_io (void)
 
   file_list.append (octave_stdin);
   file_list.append (octave_stdout);
   file_list.append (octave_stderr);
 
   file_count = 3;
 }
 
+/*
+ * Given a file name or number, return a pointer to the corresponding
+ * open file.  If the file has not already been opened, return NULL.
+ */
 Pix
 return_valid_file (const tree_constant& arg)
 {
   if (arg.is_string_type ())
     {
       Pix p = file_list.first ();
       file_info file;
       for (int i = 0; i < file_count; i++)
@@ -1191,13 +1203,389 @@ do_scanf (const char *type, const tree_c
 
   if (tmp_file_open)
     fclose (fptr);
 
   return retval;
 }
 
 /*
+ * Find out how many elements are left.
+ *
+ *   size is the size of the elements
+ *   nr is the number of rows or columns in the matrix
+ */
+static long
+get_whats_left (FILE *fptr, int size, int nn)
+{
+  long curr_pos = ftell (fptr);
+
+  fseek (fptr, 0, SEEK_END);
+  long end_of_file = ftell (fptr);
+
+  fseek (fptr, end_of_file, SEEK_SET);
+
+  long len = end_of_file - curr_pos;
+
+  long num_items = len / size / nn;
+
+  if (len > num_items * size * nn)
+    num_items++;
+
+  return num_items;
+}
+
+static void
+get_size_conv (const char *preci, int& size, Matrix::conversion& conv,
+	       const char *warn)
+{
+// Get type and number of bytes per element to read.
+
+  char *prec = strdup (preci);
+  char *ip = prec;
+
+  while (*ip > 0)
+    {
+      tolower (*ip);
+      ip++;
+    }
+
+  if (strcmp (prec, "uchar") == 0)
+    {
+      size = 1;
+      conv = Matrix::CNV_UCHAR;
+    }
+  else if (strcmp (prec, "char") == 0)
+    {
+      size = 1;
+      conv = Matrix::CNV_CHAR;
+    }
+  else if (strcmp (prec, "schar") == 0)
+    {
+      size = 1;
+      conv = Matrix::CNV_CHAR;
+// Some systems may need this??
+// size = 1;
+// conv = CNV_SCHAR;
+    }
+  else if (strcmp (prec, "short") == 0)
+    {
+      size = 2;
+      conv = Matrix::CNV_SHORT;
+    }
+  else if (strcmp (prec, "ushort") == 0)
+    {
+      size = 2;
+      conv = Matrix::CNV_USHORT;
+    }
+  else if (strcmp (prec, "int") == 0)
+    {
+      size = 4;
+      conv = Matrix::CNV_INT;
+    }
+  else if (strcmp (prec, "uint") == 0)
+    {
+      size = 4;
+      conv = Matrix::CNV_UINT;
+    }
+  else if (strcmp (prec, "long") == 0)
+    {
+      size = 4;
+      conv = Matrix::CNV_LONG;
+    }
+  else if (strcmp (prec, "ulong") == 0)
+    {
+      size = 4;
+      conv = Matrix::CNV_ULONG;
+    }
+  else if (strcmp (prec, "float") == 0)
+    {
+      size = 4;
+      conv = Matrix::CNV_FLOAT;
+    }
+  else if (strcmp (prec, "double") == 0)
+    {
+      size = 8;
+      conv = Matrix::CNV_DOUBLE;
+    }
+  else
+    {
+      error ("%s: precision: \'%s\' unknown", warn, prec);
+      size = -1;
+      conv = Matrix::CNV_UNKNOWN;
+    }
+
+  delete [] prec;
+
+  return;
+}
+
+/*
+ * Read binary data from a file.
+ *
+ *   [data, count] = fread (fid, size, 'precision')
+ *
+ *     fid       : the file id from fopen
+ *     size      : the size of the matrix or vector or scaler to read
+ *
+ *                 n	  : reads n elements of a column vector
+ *                 inf	  : reads to the end of file (default)
+ *                 [m, n] : reads enough elements to fill the matrix
+ *                          the number of columns can be inf
+ *
+ *     precision : type of the element.  Can be:
+ *
+ *                 char, uchar, schar, short, ushort, int, uint,
+ *                 long, ulong, float, double
+ *
+ *                 Default  is uchar.
+ *
+ *     data	 : output data
+ *     count	 : number of elements read
+ */
+tree_constant *
+fread_internal (const tree_constant *args, int nargin, int nargout)
+{
+  tree_constant *retval = NULL_TREE_CONST;
+
+  Pix p = file_io_get_file (args[1], "r", "fread");
+
+  if (p == (Pix) NULL)
+    return retval;
+
+// Get type and number of bytes per element to read.
+  char *prec = "uchar";
+  if (nargin > 3)
+    {
+      if (args[3].is_string_type ())
+	prec = args[3].string_value ();
+      else
+	{
+	  error ("fread: precision must be a specified as a string");
+	  return retval;
+	}
+    }
+
+  int size;
+  Matrix::conversion conv;
+  get_size_conv (prec, size, conv, "fread");
+  if (size < 0)
+    return retval;
+
+// Get file info.
+  file_info file = file_list (p);
+  FILE * fptr = file.fptr ();
+
+// Set up matrix to read into.  If specified in arguments use that
+// number, otherwise read everyting left in file.
+
+  double dnr = 1.0;
+  double dnc = 1.0;
+  int nr = 1;
+  int nc = 1;
+
+  if (nargin > 2)
+    {
+// tree_constant tmpa = args[2].make_numeric (); // ??
+
+      if (args[2].is_scalar_type ())
+	{
+	  tree_constant tmpa = args[2].make_numeric ();
+
+	  dnr = 1.0;
+	  dnc = tmpa.double_value ();
+	}
+      else if (args[2].is_matrix_type ())
+	{
+// tree_constant tmpa = args[2].make_numeric (); // ??
+      Matrix tmpm = args[2].to_matrix ();
+      nr = tmpm.rows ();
+      nc = tmpm.columns ();
+
+      if(nr != 1 || nc > 2)
+	{
+	  error ("fread: Illegal size specification\n");
+	  print_usage ("fread");
+	  return retval;
+	}
+      dnr = tmpm.elem (0, 0);
+      dnc = tmpm.elem (0, 1);
+    }
+
+    if ((xisinf (dnr)) && (xisinf (dnc)))
+      {
+	error ("fread: number of rows and columns cannot both be infinite\n");
+	return retval;
+      }
+
+    if (xisinf (dnr))
+      {
+	nc = NINT (dnc);
+	nr = get_whats_left (fptr, size, nc);
+      }
+    else if (xisinf (dnc))
+      {
+	nr = NINT (dnr);
+	nc = get_whats_left (fptr, size, nr);
+      }
+    else
+      {
+	nr = NINT (dnr);
+	nc = NINT (dnc);
+      }
+    }
+  else
+    {
+// No size parameter, read what's left of the file.
+      nr = 1;
+      nc = get_whats_left (fptr, size, nr);
+    }
+
+  Matrix m (nr, nc, octave_NaN);
+
+// Read data.
+
+  int count = m.read (fptr, size, conv);
+
+  if (nargout > 1)
+    {
+      retval = new tree_constant[3];
+      retval[1] = tree_constant ((double) count);
+    }
+  else
+    retval = new tree_constant[2];
+
+  retval[0] = tree_constant (m);
+
+  return retval;
+}
+
+/*
+ * Write binary data to a file.
+ *
+ *   count = fwrite (fid, data, 'precision')
+ *
+ *    fid	: file id from fopen
+ *    Data	: data to be written
+ *    precision	: type of output element.  Can be:
+ *
+ *                char, uchar, schar, short, ushort, int, uint,
+ *                long, float, double
+ *
+ *                 Default is uchar.
+ *
+ *    count     : the number of elements written
+ */
+tree_constant *
+fwrite_internal (const tree_constant *args, int nargin, int nargout)
+{
+  tree_constant *retval = NULL_TREE_CONST;
+
+  Pix p = file_io_get_file (args[1], "a+", "fwrite");
+
+  if (p == (Pix) NULL)
+    return retval;
+
+// Get type and number of bytes per element to read.
+  char *prec = "uchar";
+  if (nargin > 3)
+    {
+      if (args[3].is_string_type ())
+	prec = args[3].string_value ();
+      else
+	{
+	  error ("fwrite: precision must be a specified as a string");
+	  return retval;
+	}
+    }
+
+  int size;
+  Matrix::conversion conv;
+  get_size_conv(prec, size, conv, "fwrite");
+  if (size < 0)
+    return retval;
+
+// Get file info.
+  file_info file = file_list (p);
+
+// Write the matrix data.
+  tree_constant tmpa = args[2].make_numeric ();
+
+  Matrix tmpm = tmpa.to_matrix ();
+
+  int count = tmpm.write (file.fptr(), size, conv);
+
+  retval = new tree_constant[2];
+  retval[0] = tree_constant ((double) count);
+
+  return retval;
+}
+
+/*
+ * Check for an EOF condition on a file opened by fopen.
+ *
+ *   eof = feof (fid)
+ *
+ *     fid : file id from fopen
+ *     eof : non zero for an end of file condition
+ */
+tree_constant *
+feof_internal (const tree_constant *args, int nargin, int nargout)
+{
+  tree_constant *retval = NULL_TREE_CONST;
+
+// Get file info.
+  Pix p = return_valid_file (args[1]);
+
+  if (p == (Pix) NULL)
+    return retval;
+
+  file_info file = file_list (p);
+
+  retval = new tree_constant[2];
+  retval[0] = tree_constant (feof (file.fptr ()));
+
+  return retval;
+}
+
+/*
+ * Check for an error condition on a file opened by fopen.
+ *
+ *   [message, errnum] = ferror (fid)
+ *
+ *     fid     : file id from fopen
+ *     message : system error message
+ *     errnum  : error number
+ */
+tree_constant *
+ferror_internal (const tree_constant *args, int nargin, int nargout)
+{
+  tree_constant *retval = NULL_TREE_CONST;
+
+// Get file info.
+  Pix p = return_valid_file (args[1]);
+
+  if (p == (Pix) NULL)
+    return retval;
+
+  file_info file = file_list (p);
+
+  int ierr = ferror (file.fptr ());
+
+  if (nargout > 1)
+    {
+      retval = new tree_constant[3];
+      retval[1] = tree_constant ((double) ierr);
+    }
+  else
+    retval = new tree_constant[2];
+
+  retval[0] = tree_constant (strsave (strerror (ierr)));
+
+  return retval;
+}
+
+/*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/src/file-io.h b/src/file-io.h
--- a/src/file-io.h
+++ b/src/file-io.h
@@ -28,23 +28,31 @@ Software Foundation, 675 Mass Ave, Cambr
 
 #include <Pix.h>
 
 class tree_constant;
 
 extern Pix return_valid_file (const tree_constant& arg);
 
 extern tree_constant *fclose_internal (const tree_constant *args);
+extern tree_constant *feof_internal (const tree_constant *args,
+				     int nargin, int nargout);
+extern tree_constant *ferror_internal (const tree_constant *args,
+                                       int nargin, int nargout);
 extern tree_constant *fflush_internal (const tree_constant *args);
 extern tree_constant *fgets_internal (const tree_constant *args, int nargout);
 extern tree_constant *fopen_internal (const tree_constant *args);
+extern tree_constant *fread_internal (const tree_constant *args,
+				      int nargin, int nargout);
 extern tree_constant *freport_internal (void);
 extern tree_constant *frewind_internal (const tree_constant *args);
 extern tree_constant *fseek_internal (const tree_constant *args, int nargin);
 extern tree_constant *ftell_internal (const tree_constant *args);
+extern tree_constant *fwrite_internal (const tree_constant *args,
+				       int nargin, int nargout);
 
 extern void initialize_file_io (void);
 
 extern void close_files (void);
 
 extern tree_constant *do_printf (const char *type, const tree_constant *args,
 				 int nargin, int nargout);
 
diff --git a/src/g-builtins.cc b/src/g-builtins.cc
--- a/src/g-builtins.cc
+++ b/src/g-builtins.cc
@@ -577,49 +577,81 @@ builtin_fclose (const tree_constant *arg
     print_usage ("fclose");
   else
     retval = fclose_internal (args);
 
   return retval;
 }
 
 /*
+ * Check file for EOF condition.
+ */
+tree_constant *
+builtin_feof (const tree_constant *args, int nargin, int nargout)
+{
+  tree_constant *retval = NULL_TREE_CONST;
+
+  if (nargin < 1)
+    print_usage ("feof");
+  else
+    retval = feof_internal (args, nargin, nargout);
+
+  return retval;
+}
+
+/*
+ * Check file for error condition.
+ */
+tree_constant *
+builtin_ferror (const tree_constant *args, int nargin, int nargout)
+{
+  tree_constant *retval = NULL_TREE_CONST;
+
+  if (nargin < 1)
+    print_usage ("ferror");
+  else
+    retval = ferror_internal (args, nargin, nargout);
+
+  return retval;
+}
+
+/*
  * Evaluate first argument as a function.
  */
 tree_constant *
 builtin_feval (const tree_constant *args, int nargin, int nargout)
 {
   tree_constant *retval = NULL_TREE_CONST;
 
   if (nargin > 1)
     retval = feval (args, nargin, nargout);
   else
     print_usage ("feval");
 
   return retval;
 }
 
 /*
- * Flushing output to a file
+ * Flushing output to a file.
  */
 tree_constant *
 builtin_fflush (const tree_constant *args, int nargin, int nargout)
 {
   tree_constant *retval = NULL_TREE_CONST;
 
   if (nargin != 2)
     print_usage ("fflush");
   else
     retval = fflush_internal (args);
 
   return retval;
 }
 
 /*
- * Fast Fourier Transform
+ * Fast Fourier Transform.
  */
 tree_constant *
 builtin_fft (const tree_constant *args, int nargin, int nargout)
 {
   tree_constant *retval = NULL_TREE_CONST;
 
   if (nargin == 2)
     DLD_BUILTIN (args, nargin, nargout, fft,
@@ -629,17 +661,17 @@ builtin_fft (const tree_constant *args, 
 		 })
   else
     print_usage ("fft");
 
   return retval;
 }
 
 /*
- * get a string from a file
+ * Get a string from a file.
  */
 tree_constant *
 builtin_fgets (const tree_constant *args, int nargin, int nargout)
 {
   tree_constant *retval = NULL_TREE_CONST;
 
   if (nargin != 3  && nargout < 3)
     print_usage ("fgets");
@@ -716,33 +748,49 @@ builtin_fprintf (const tree_constant *ar
     print_usage ("fprintf");
   else
     retval = do_printf ("fprintf", args, nargin, nargout);
 
   return retval;
 }
 
 /*
- * rewind a file
+ * Read binary data from a file.
+ */
+tree_constant *
+builtin_fread (const tree_constant *args, int nargin, int nargout)
+{
+  tree_constant *retval = NULL_TREE_CONST;
+
+  if (nargin < 2)
+    print_usage ("fread");
+  else
+    retval = fread_internal (args, nargin, nargout);
+
+  return retval;
+}
+
+/*
+ * Rewind a file.
  */
 tree_constant *
 builtin_frewind (const tree_constant *args, int nargin, int nargout)
 {
   tree_constant *retval = NULL_TREE_CONST;
 
   if (nargin != 2)
     print_usage ("frewind");
   else
     retval = frewind_internal (args);
 
   return retval;
 }
 
 /*
- * report on open files
+ * Report on open files.
  */
 tree_constant *
 builtin_freport (const tree_constant *args, int nargin, int nargout)
 {
   tree_constant *retval = NULL_TREE_CONST;
 
   if (nargin > 1)
     warning ("freport: ignoring extra arguments");
@@ -764,17 +812,17 @@ builtin_fscanf (const tree_constant *arg
     print_usage ("fscanf");
   else
     retval = do_scanf ("fscanf", args, nargin, nargout);
 
   return retval;
 }
 
 /*
- * seek a point in a file for reading and/or writing 
+ * Seek a point in a file for reading and/or writing.
  */
 tree_constant *
 builtin_fseek (const tree_constant *args, int nargin, int nargout)
 {
   tree_constant *retval = NULL_TREE_CONST;
 
   if (nargin != 3 && nargin != 4)
     print_usage ("fseek");
@@ -846,32 +894,48 @@ builtin_fsqp_options (const tree_constan
   DLD_BUILTIN (args, nargin, nargout, fsqp_options,
 	       retval = fsqp_options (args, nargin, nargout);)
 #endif
 
   return retval;
 }
 
 /*
- * tell current position of file
+ * Tell current position of file.
  */
 tree_constant *
 builtin_ftell (const tree_constant *args, int nargin, int nargout)
 {
   tree_constant *retval = NULL_TREE_CONST;
 
   if (nargin != 2)
     print_usage ("ftell");
   else
     retval = ftell_internal (args);
 
   return retval;
 }
 
 /*
+ * Write binary data to a file.
+ */
+tree_constant *
+builtin_fwrite (const tree_constant *args, int nargin, int nargout)
+{
+  tree_constant *retval = NULL_TREE_CONST;
+
+  if (nargin < 3)
+    print_usage ("fwrite");
+  else
+    retval = fwrite_internal (args, nargin, nargout);
+
+  return retval;
+}
+
+/*
  * Get the value of an environment variable.
  */
 tree_constant *
 builtin_getenv (const tree_constant *args, int nargin, int nargout)
 {
   tree_constant *retval = NULL_TREE_CONST;
 
   if (nargin == 2 && args[1].is_string_type ())
@@ -885,17 +949,17 @@ builtin_getenv (const tree_constant *arg
     }
   else
     print_usage ("getenv");
 
   return retval;
 }
 
 /*
- * Inverse Fast Fourier Transform
+ * Inverse Fast Fourier Transform.
  */
 tree_constant *
 builtin_ifft (const tree_constant *args, int nargin, int nargout)
 {
   tree_constant *retval = NULL_TREE_CONST;
 
   if (nargin == 2)
     DLD_BUILTIN (args, nargin, nargout, ifft,
@@ -1716,50 +1780,50 @@ builtin_syl (const tree_constant *args, 
 		 retval = syl (args, nargin, nargout);)
   else
     print_usage ("syl");
 
   return retval;
 }
 
 /*
- * Schur Decomposition
+ * Schur Decomposition.
  */
 tree_constant *
 builtin_schur (const tree_constant *args, int nargin, int nargout)
 {
   tree_constant *retval = NULL_TREE_CONST;
 
   if ((nargin == 3 || nargin == 2) && (nargout == 1 || nargout == 2))
     DLD_BUILTIN (args, nargin, nargout, schur,
 		 retval = schur (args, nargin, nargout);)
   else
     print_usage ("schur");
 
   return retval;
 }
 
 /*
- * Givens rotation
+ * Givens rotation.
  */
 tree_constant *
 builtin_givens (const tree_constant *args, int nargin, int nargout)
 {
   tree_constant *retval = NULL_TREE_CONST;
 
   if (nargin == 3 && (nargout == 1 || nargout == 2 ))
     retval = givens (args, nargin, nargout);
   else
     print_usage ("givens");
 
   return retval;
 }
 
 /*
- * Hessenberg Decomposition
+ * Hessenberg Decomposition.
  */
 tree_constant *
 builtin_hess (const tree_constant *args, int nargin, int nargout)
 {
   tree_constant *retval = NULL_TREE_CONST;
 
   if (nargin == 2 && (nargout == 1 || nargout == 2))
     DLD_BUILTIN (args, nargin, nargout, hess,
diff --git a/src/g-builtins.h b/src/g-builtins.h
--- a/src/g-builtins.h
+++ b/src/g-builtins.h
@@ -53,45 +53,50 @@ extern tree_constant *builtin_diag (cons
 extern tree_constant *builtin_disp (tree_constant *, int, int);
 extern tree_constant *builtin_eig (const tree_constant *, int, int);
 extern tree_constant *builtin_error (tree_constant *, int, int);
 extern tree_constant *builtin_eval (const tree_constant *, int, int);
 extern tree_constant *builtin_exist (const tree_constant *, int, int);
 extern tree_constant *builtin_expm (const tree_constant *, int, int);
 extern tree_constant *builtin_eye (const tree_constant *, int, int);
 extern tree_constant *builtin_fclose (const tree_constant *, int, int);
+extern tree_constant *builtin_feof (const tree_constant *, int, int);
+extern tree_constant *builtin_ferror (const tree_constant *, int, int);
 extern tree_constant *builtin_feval (const tree_constant *, int, int);
 extern tree_constant *builtin_fflush (const tree_constant *, int, int);
 extern tree_constant *builtin_fft (const tree_constant *, int, int);
 extern tree_constant *builtin_fgets (const tree_constant *, int, int);
 extern tree_constant *builtin_find (const tree_constant *, int, int);
 extern tree_constant *builtin_flops (const tree_constant *, int, int);
 extern tree_constant *builtin_fopen (const tree_constant *, int, int);
 extern tree_constant *builtin_fprintf (const tree_constant *, int, int);
+extern tree_constant *builtin_fread (const tree_constant *, int, int);
 extern tree_constant *builtin_frewind (const tree_constant *, int, int);
 extern tree_constant *builtin_freport (const tree_constant *, int, int);
 extern tree_constant *builtin_fscanf (const tree_constant *, int, int);
 extern tree_constant *builtin_fseek (const tree_constant *, int, int);
 extern tree_constant *builtin_fsolve (const tree_constant *, int, int);
 extern tree_constant *builtin_fsolve_options (const tree_constant *, int, int);
 extern tree_constant *builtin_fsqp (const tree_constant *, int, int);
 extern tree_constant *builtin_fsqp_options (const tree_constant *, int, int);
 extern tree_constant *builtin_ftell (const tree_constant *, int, int);
+extern tree_constant *builtin_fwrite (const tree_constant *, int, int);
 extern tree_constant *builtin_getenv (const tree_constant *, int, int);
 extern tree_constant *builtin_givens (const tree_constant *, int, int);
 extern tree_constant *builtin_hess (const tree_constant *, int, int);
 extern tree_constant *builtin_input (const tree_constant *, int, int);
 extern tree_constant *builtin_ifft (const tree_constant *, int, int);
 extern tree_constant *builtin_inv (const tree_constant *, int, int);
 extern tree_constant *builtin_is_global (const tree_constant *, int, int);
 extern tree_constant *builtin_isstr (const tree_constant *, int, int);
 extern tree_constant *builtin_keyboard (const tree_constant *, int, int);
 extern tree_constant *builtin_logm (const tree_constant *, int, int);
 extern tree_constant *builtin_lpsolve (const tree_constant *, int, int);
-extern tree_constant *builtin_lpsolve_options (const tree_constant *, int, int);
+extern tree_constant *builtin_lpsolve_options (const tree_constant *,
+					       int, int);
 extern tree_constant *builtin_lsode (const tree_constant *, int, int);
 extern tree_constant *builtin_lsode_options (const tree_constant *, int, int);
 extern tree_constant *builtin_lu (const tree_constant *, int, int);
 extern tree_constant *builtin_max (const tree_constant *, int, int);
 extern tree_constant *builtin_min (const tree_constant *, int, int);
 extern tree_constant *builtin_npsol (const tree_constant *, int, int);
 extern tree_constant *builtin_npsol_options (const tree_constant *, int, int);
 extern tree_constant *builtin_ones (const tree_constant *, int, int);
diff --git a/src/sysdep.cc b/src/sysdep.cc
--- a/src/sysdep.cc
+++ b/src/sysdep.cc
@@ -23,16 +23,23 @@ Software Foundation, 675 Mass Ave, Cambr
 
 #ifdef HAVE_CONFIG_H
 #include "config.h"
 #endif
 
 #include <stdlib.h>
 
 #include "error.h"
+#include "sysdep.h"
+
+// Octave's idea of infinity.
+double octave_Inf;
+
+// Octave's idea of not a number.
+double octave_NaN;
 
 #if defined (__386BSD__) && defined (HAVE_FLOATINGPOINT_H)
 #include <floatingpoint.h>
 #endif
 
 #ifdef NeXT
 extern "C"
 {
@@ -53,27 +60,76 @@ malloc_handler (int code)
 
 static void
 NeXT_init (void)
 {
   malloc_error (malloc_handler);
 }
 #endif
 
+static void
+octave_ieee_init (void)
+{
+#if defined (HAVE_ISINF) || defined (HAVE_FINITE)
+
+// Some version of gcc on some old version of Linux used to crash when
+// trying to make Inf and NaN.
+
+#if defined (HAVE_INFINITY)
+  octave_Inf = infinity ();
+#else
+#ifdef linux
+  octave_Inf = HUGE_VAL;
+#else
+  double tmp = 1e+10;
+  octave_Inf = tmp;
+  for (;;)
+    {
+      octave_Inf *= 1e+10;
+      if (octave_Inf == tmp)
+	break;
+      tmp = octave_Inf;
+    }
+#endif
+#endif
+
+#if defined (HAVE_QUIET_NAN)
+  octave_NaN = quiet_nan ();
+#else
+#ifdef linux
+  octave_NaN = NAN;
+#else
+  octave_NaN = octave_Inf / octave_Inf;
+#endif
+#endif
+
+#else
+
+// This is sort of cheesy, but what can we do, other than blowing it
+// off completely, or writing an entire IEEE emulation package?
+
+  octave_Inf = DBL_MAX;
+  octave_NaN = DBL_MAX;
+
+#endif
+}
+
 void
 sysdep_init (void)
 {
 #if defined (__386BSD__) && defined (HAVE_FLOATINGPOINT_H)
 // Disable trapping on common exceptions.
   fpsetmask (~(FP_X_OFL|FP_X_INV|FP_X_DZ|FP_X_DNML|FP_X_UFL|FP_X_IMP));
 #endif
 
 #ifdef NeXT
   NeXT_init ();
 #endif
+
+  octave_ieee_init ();
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/src/sysdep.h b/src/sysdep.h
--- a/src/sysdep.h
+++ b/src/sysdep.h
@@ -21,16 +21,22 @@ Software Foundation, 675 Mass Ave, Cambr
 
 */
 
 #if !defined (octave_sysdep_h)
 #define octave_sysdep_h 1
 
 extern void sysdep_init (void);
 
+// Octave's idea of infinity.
+extern double octave_Inf;
+
+// Octave's idea of not a number.
+extern double octave_NaN;
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/src/utils.h b/src/utils.h
--- a/src/utils.h
+++ b/src/utils.h
@@ -74,17 +74,18 @@ extern void mark_for_deletion (const cha
 extern void cleanup_tmp_files (void);
 extern int send_to_plot_stream (const char *cmd);
 extern void close_plot_stream (void);
 extern int almost_match (const char *std, const char *s,
 			 int min_match_len = 1, int case_sens = 1);
 extern int keyword_almost_match (const char **std, int *min_len,
 				 const char *s, int min_toks_to_match,
 				 int max_toks);
-extern char **get_fcn_file_names (int& ffl_len, const char *dir, int no_suffix);
+extern char **get_fcn_file_names (int& ffl_len, const char *dir,
+				  int no_suffix); 
 extern char **get_fcn_file_names (int& ffl_len, int no_suffix);
 extern int NINT (double x);
 extern double D_NINT (double x);
 extern void delete_ppchar (char **);
 
 extern "C"
 {
 extern int gethostname ();
