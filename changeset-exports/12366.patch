# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1296713081 18000
#      Thu Feb 03 01:04:41 2011 -0500
# Branch release-3-4-x
# Node ID 3dd1b0b36f13df4b339ed5efeae169008fc366ec
# Parent  044ca61e6750e38e575e6281c4a8291e4b2f4c7d
require readline to provide working history control

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,18 @@
+2011-02-03  John W. Eaton  <jwe@octave.org>
+
+	* cmd-hist.cc (gnu_history::do_process_histcontrol):
+	Rename from command_history::do_process_histcontrol.
+	(gnu_history::do_histcontrol): Rename from
+	command_history::do_histcontrol.
+	* cmd-hist.h (command_history::do_histcontrol): Provide dummy version.
+	* cmd-hist.cc (command_history::do_process_histcontrol): Likewise.
+	Bug #32325.
+
 2011-02-02  John W. Eaton  <jwe@octave.org>
 
 	* Range.cc (Range::Range (double, double, octave_idx_type)):
 	Correctly compute limit from base, increment and number of
 	elements.  Bug #32321.
 
 2011-01-31  John W. Eaton  <jwe@octave.org>
 
diff --git a/liboctave/cmd-hist.cc b/liboctave/cmd-hist.cc
--- a/liboctave/cmd-hist.cc
+++ b/liboctave/cmd-hist.cc
@@ -55,16 +55,20 @@ gnu_history : public command_history
 {
 public:
 
   gnu_history (void)
     : command_history (), mark (0) { }
 
   ~gnu_history (void) { }
 
+  void do_process_histcontrol (const std::string&);
+
+  std::string do_histcontrol (void) const;
+
   void do_add (const std::string&);
 
   void do_remove (int);
 
   int do_where (void) const;
 
   int do_length (void) const;
 
@@ -103,16 +107,86 @@ public:
   void do_clean_up_and_save (const std::string&, int);
 
 private:
 
   int mark;
 };
 
 void
+gnu_history::do_process_histcontrol (const std::string& control_arg)
+{
+  history_control = 0;
+
+  size_t len = control_arg.length ();
+  size_t beg = 0;
+
+  while (beg < len)
+    {
+      if (control_arg[beg] == ':')
+        beg++;
+      else
+        {
+          size_t end = control_arg.find (":", beg);
+
+          if (end == std::string::npos)
+            end = len;
+
+          std::string tmp = control_arg.substr (beg, end-beg);
+
+          if (tmp == "erasedups")
+            history_control |= HC_ERASEDUPS;
+          else if (tmp == "ignoreboth")
+            history_control |= HC_IGNDUPS|HC_IGNSPACE;
+          else if (tmp == "ignoredups")
+            history_control |= HC_IGNDUPS;
+          else if (tmp == "ignorespace")
+            history_control |= HC_IGNSPACE;
+          else
+            (*current_liboctave_warning_handler)
+              ("unknown histcontrol directive %s", tmp.c_str ());
+
+          if (end != std::string::npos)
+            beg = end + 1;
+        }
+    }
+}
+
+std::string
+gnu_history::do_histcontrol (void) const
+{
+  // FIXME -- instead of reconstructing this value, should we just save
+  // the string we were given when constructing the command_history
+  // object?
+
+  std::string retval;
+
+  if (history_control & HC_IGNSPACE)
+    retval.append ("ignorespace");
+
+  if (history_control & HC_IGNDUPS)
+    {
+      if (retval.length() > 0)
+        retval.append (":");
+
+      retval.append ("ignoredups");
+    }
+
+  if (history_control & HC_ERASEDUPS)
+    {
+      if (retval.length() > 0)
+        retval.append (":");
+
+      retval.append ("erasedups");
+    }
+
+  return retval;
+}
+
+void
 gnu_history::do_add (const std::string& s)
 {
   if (! do_ignoring_entries ())
     {
       if (s.empty ()
           || (s.length () == 1 && (s[0] == '\r' || s[0] == '\n')))
         return;
 
@@ -649,16 +723,23 @@ command_history::replace_entry (int whic
 void
 command_history::clean_up_and_save (const std::string& f, int n)
 {
   if (instance_ok ())
     instance->do_clean_up_and_save (f, n);
 }
 
 void
+command_history::do_process_histcontrol (const std::string&)
+{
+  (*current_liboctave_warning_handler)
+    ("readline is not linked, so history control is not available");
+}
+
+void
 command_history::do_initialize (bool read_history_file,
                                 const std::string& f_arg, int sz,
                                 const std::string & control_arg)
 {
   command_history::set_file (f_arg);
   command_history::set_size (sz);
   command_history::process_histcontrol (control_arg);
 
@@ -675,87 +756,16 @@ command_history::do_is_initialized (void
 }
 
 void
 command_history::do_set_file (const std::string& f)
 {
   xfile = f;
 }
 
-void
-command_history::do_process_histcontrol (const std::string& control_arg)
-{
-  history_control = 0;
-
-  size_t len = control_arg.length ();
-  size_t beg = 0;
-
-  while (beg < len)
-    {
-      if (control_arg[beg] == ':')
-        beg++;
-      else
-        {
-          size_t end = control_arg.find (":", beg);
-
-          if (end == std::string::npos)
-            end = len;
-
-          std::string tmp = control_arg.substr (beg, end-beg);
-
-          if (tmp == "erasedups")
-            history_control |= HC_ERASEDUPS;
-          else if (tmp == "ignoreboth")
-            history_control |= HC_IGNDUPS|HC_IGNSPACE;
-          else if (tmp == "ignoredups")
-            history_control |= HC_IGNDUPS;
-          else if (tmp == "ignorespace")
-            history_control |= HC_IGNSPACE;
-          else
-            (*current_liboctave_warning_handler)
-              ("unknown histcontrol directive %s", tmp.c_str ());
-
-          if (end != std::string::npos)
-            beg = end + 1;
-        }
-    }
-}
-
-std::string
-command_history::do_histcontrol (void) const
-{
-  // FIXME -- instead of reconstructing this value, should we just save
-  // the string we were given when constructing the command_history
-  // object?
-
-  std::string retval;
-
-  if (history_control & HC_IGNSPACE)
-    retval.append ("ignorespace");
-
-  if (history_control & HC_IGNDUPS)
-    {
-      if (retval.length() > 0)
-        retval.append (":");
-
-      retval.append ("ignoredups");
-    }
-
-  if (history_control & HC_ERASEDUPS)
-    {
-      if (retval.length() > 0)
-        retval.append (":");
-
-      retval.append ("erasedups");
-    }
-
-  return retval;
-}
-
-
 std::string
 command_history::do_file (void)
 {
   return xfile;
 }
 
 void
 command_history::do_set_size (int n)
diff --git a/liboctave/cmd-hist.h b/liboctave/cmd-hist.h
--- a/liboctave/cmd-hist.h
+++ b/liboctave/cmd-hist.h
@@ -133,17 +133,17 @@ protected:
   // necessary, and make instance point to the new class.
 
   virtual void do_set_file (const std::string&);
 
   virtual std::string do_file (void);
 
   virtual void do_process_histcontrol (const std::string&);
 
-  virtual std::string do_histcontrol (void) const;
+  virtual std::string do_histcontrol (void) const { return std::string (); }
 
   virtual void do_initialize (bool, const std::string&, int, const std::string&);
 
   virtual bool do_is_initialized (void) const;
 
   virtual void do_set_size (int);
 
   virtual int do_size (void) const;
