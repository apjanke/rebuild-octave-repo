# HG changeset patch
# User Ben Abbott <bpabbott@mac.com>
# Date 1232816965 18000
#      Sat Jan 24 12:09:25 2009 -0500
# Node ID e6497be3f3d6c1280db2d951c0b38c7b4ede59b4
# Parent  848f7d3e589c07ac356832e7beebbd15ea7c8246
Skip tests if ARPACK is missing.

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2009-01-24 Ben Abbott <bpabbott@mac.com>
+
+	* sparse/svds.m: svds.m: skip tests if ARPACK is missing.
+
 2009-01-23  SÃ¸ren Hauberg  <hauberg@gmail.com>
 
 	* help/type.m: Make 'type X' work, when X is the name of a variable.
 
 2009-01-22  John W. Eaton  <jwe@octave.org>
 
 	* help/which.m: New function.
 	* help/Makefile.in (SOURCES): Add it to the list.
diff --git a/scripts/sparse/svds.m b/scripts/sparse/svds.m
--- a/scripts/sparse/svds.m
+++ b/scripts/sparse/svds.m
@@ -208,26 +208,26 @@ endfunction
 %! %%a = sparse([3:n,1:n,1:(n-2)],[1:(n-2),1:n,3:n],[ones(1,n-2),1:n,-ones(1,n-2)]);
 %! [u,s,v] = svd(full(a));
 %! s = diag(s);
 %! [dum, idx] = sort(abs(s));
 %! s = s(idx);
 %! u = u(:,idx);
 %! v = v(:,idx);
 %! randn('state',42)
-%!test
+%!testif HAVE_ARPACK
 %! [u2,s2,v2,flag] = svds(a,k);
 %! s2 = diag(s2);
 %! assert(flag,!1);
 %! assert(s(end:-1:end-k+1), s2, 1e-10); 
-%!test
+%!testif HAVE_ARPACK
 %! [u2,s2,v2,flag] = svds(a,k,0);
 %! s2 = diag(s2);
 %! assert(flag,!1);
 %! assert(s(k:-1:1), s2, 1e-10); 
-%!test
+%!testif HAVE_ARPACK
 %! idx = floor(n/2);
 %! % Don't put sigma right on a singular value or there are convergence 
 %! sigma = 0.99*s(idx) + 0.01*s(idx+1); 
 %! [u2,s2,v2,flag] = svds(a,k,sigma);
 %! s2 = diag(s2);
 %! assert(flag,!1);
 %! assert(s((idx+floor(k/2)):-1:(idx-floor(k/2))), s2, 1e-10); 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2009-01-24 Ben Abbott <bpabbott@mac.com>
+
+	* DLD-FUNCTIONS/eigs.cc: eigs.cc: skip tests if ARPACK is missing.
+
 2009-01-23  John W. Eaton  <jwe@octave.org>
 
 	* toplev.cc (octave_call_stack::do_goto_caller_frame):
 	Also allow caller frame to be base frame, not just user code.
 
 2009-01-23  Jaroslav Hajek  <highegg@gmail.com>
 
 	* gripes.cc (gripe_indexed_cs_list, gripe_invalid_inquiry_subscript):
diff --git a/src/DLD-FUNCTIONS/eigs.cc b/src/DLD-FUNCTIONS/eigs.cc
--- a/src/DLD-FUNCTIONS/eigs.cc
+++ b/src/DLD-FUNCTIONS/eigs.cc
@@ -756,17 +756,18 @@ K Maschhoff, D Sorensen and C Yang. For 
 %!testif HAVE_ARPACK
 %! d1 = eigs (A, k, 4.1);
 %! [dum,idx0] = sort (abs(d0 - 4.1));
 %! [dum,idx1] = sort (abs(d1 - 4.1));
 %! assert (d1(idx1), d0(idx0(1:k)), 1e-12);
 %!testif HAVE_ARPACK
 %! d1 = eigs(A, speye(n), k, 'lm');
 %! assert (abs(d1), abs(d0(end:-1:(end-k+1))), 1e-12);
-%!assert (eigs(A,k,4.1), eigs(A,speye(n),k,4.1), 1e-12);
+%!testif HAVE_ARPACK
+%! assert (eigs(A,k,4.1), eigs(A,speye(n),k,4.1), 1e-12);
 %!testif HAVE_ARPACK
 %! opts.cholB=true;
 %! d1 = eigs(A, speye(n), k, 'lm', opts);
 %! assert (abs(d1), abs(d0(end:-1:(end-k+1))), 1e-12);
 %!testif HAVE_ARPACK
 %! opts.cholB=true;
 %! q = [2:n,1];
 %! opts.permB=q;
@@ -777,17 +778,18 @@ K Maschhoff, D Sorensen and C Yang. For 
 %! d1 = eigs(A, speye(n), k, 4.1, opts);
 %! assert (abs(d1), eigs(A,k,4.1), 1e-12);
 %!testif HAVE_ARPACK
 %! opts.cholB=true;
 %! q = [2:n,1];
 %! opts.permB=q;
 %! d1 = eigs(A, speye(n)(q,q), k, 4.1, opts);
 %! assert (abs(d1), eigs(A,k,4.1), 1e-12);
-%!assert (eigs(A,k,4.1), eigs(A,speye(n),k,4.1), 1e-12);
+%!testif HAVE_ARPACK
+%! assert (eigs(A,k,4.1), eigs(A,speye(n),k,4.1), 1e-12);
 %!testif HAVE_ARPACK
 %! fn = @(x) A * x;
 %! opts.issym = 1; opts.isreal = 1;
 %! d1 = eigs (fn, n, k, 'lm', opts);
 %! assert (d1, d0(end:-1:(end-k+1)), 1e-12);
 %!testif HAVE_ARPACK
 %! fn = @(x) A \ x;
 %! opts.issym = 1; opts.isreal = 1;
@@ -897,18 +899,20 @@ K Maschhoff, D Sorensen and C Yang. For 
 %! d1 = eigs(A, speye(n), k, 4.1, opts);
 %! assert (abs(d1), eigs(A,k,4.1), 1e-12);
 %!testif HAVE_ARPACK
 %! opts.cholB=true;
 %! q = [2:n,1];
 %! opts.permB=q;
 %! d1 = eigs(A, speye(n)(q,q), k, 4.1, opts);
 %! assert (abs(d1), eigs(A,k,4.1), 1e-12);
-%!assert (abs(eigs(A,k,4.1)), abs(eigs(A,speye(n),k,4.1)), 1e-12);
-%!assert (sort(imag(eigs(A,k,4.1))), sort(imag(eigs(A,speye(n),k,4.1))), 1e-12);
+%!testif HAVE_ARPACK
+%! assert (abs(eigs(A,k,4.1)), abs(eigs(A,speye(n),k,4.1)), 1e-12);
+%!testif HAVE_ARPACK
+%! assert (sort(imag(eigs(A,k,4.1))), sort(imag(eigs(A,speye(n),k,4.1))), 1e-12);
 %!testif HAVE_ARPACK
 %! fn = @(x) A * x;
 %! opts.issym = 0; opts.isreal = 1;
 %! d1 = eigs (fn, n, k, 'lm', opts);
 %! assert (abs(d1), abs(d0(end:-1:(end-k+1))), 1e-12);
 %!testif HAVE_ARPACK
 %! fn = @(x) A \ x;
 %! opts.issym = 0; opts.isreal = 1;
@@ -1026,18 +1030,20 @@ K Maschhoff, D Sorensen and C Yang. For 
 %! assert (sort(imag(abs(d1))), sort(imag(eigs(A,k,4.1))), 1e-12);
 %!testif HAVE_ARPACK
 %! opts.cholB=true;
 %! q = [2:n,1];
 %! opts.permB=q;
 %! d1 = eigs(A, speye(n)(q,q), k, 4.1, opts);
 %! assert (abs(abs(d1)), abs(eigs(A,k,4.1)), 1e-12);
 %! assert (sort(imag(abs(d1))), sort(imag(eigs(A,k,4.1))), 1e-12);
-%!assert (abs(eigs(A,k,4.1)), abs(eigs(A,speye(n),k,4.1)), 1e-12);
-%!assert (sort(imag(eigs(A,k,4.1))), sort(imag(eigs(A,speye(n),k,4.1))), 1e-12);
+%!testif HAVE_ARPACK
+%! assert (abs(eigs(A,k,4.1)), abs(eigs(A,speye(n),k,4.1)), 1e-12);
+%!testif HAVE_ARPACK
+%! assert (sort(imag(eigs(A,k,4.1))), sort(imag(eigs(A,speye(n),k,4.1))), 1e-12);
 %!testif HAVE_ARPACK
 %! fn = @(x) A * x;
 %! opts.issym = 0; opts.isreal = 0;
 %! d1 = eigs (fn, n, k, 'lm', opts);
 %! assert (abs(d1), abs(d0(end:-1:(end-k+1))), 1e-12);
 %!testif HAVE_ARPACK
 %! fn = @(x) A \ x;
 %! opts.issym = 0; opts.isreal = 0;
@@ -1127,17 +1133,18 @@ K Maschhoff, D Sorensen and C Yang. For 
 %!testif HAVE_ARPACK
 %! d1 = eigs (A, k, 4.1);
 %! [dum,idx0] = sort (abs(d0 - 4.1));
 %! [dum,idx1] = sort (abs(d1 - 4.1));
 %! assert (d1(idx1), d0(idx0(1:k)), 1e-12);
 %!testif HAVE_ARPACK
 %! d1 = eigs(A, eye(n), k, 'lm');
 %! assert (abs(d1), abs(d0(end:-1:(end-k+1))), 1e-12);
-%!assert (eigs(A,k,4.1), eigs(A,eye(n),k,4.1), 1e-12);
+%!testif HAVE_ARPACK
+%! assert (eigs(A,k,4.1), eigs(A,eye(n),k,4.1), 1e-12);
 %!testif HAVE_ARPACK
 %! opts.cholB=true;
 %! d1 = eigs(A, eye(n), k, 'lm', opts);
 %! assert (abs(d1), abs(d0(end:-1:(end-k+1))), 1e-12);
 %!testif HAVE_ARPACK
 %! opts.cholB=true;
 %! q = [2:n,1];
 %! opts.permB=q;
@@ -1148,17 +1155,18 @@ K Maschhoff, D Sorensen and C Yang. For 
 %! d1 = eigs(A, eye(n), k, 4.1, opts);
 %! assert (abs(d1), eigs(A,k,4.1), 1e-12);
 %!testif HAVE_ARPACK
 %! opts.cholB=true;
 %! q = [2:n,1];
 %! opts.permB=q;
 %! d1 = eigs(A, eye(n)(q,q), k, 4.1, opts);
 %! assert (abs(d1), eigs(A,k,4.1), 1e-12);
-%!assert (eigs(A,k,4.1), eigs(A,eye(n),k,4.1), 1e-12);
+%!testif HAVE_ARPACK
+%! assert (eigs(A,k,4.1), eigs(A,eye(n),k,4.1), 1e-12);
 %!testif HAVE_ARPACK
 %! fn = @(x) A * x;
 %! opts.issym = 1; opts.isreal = 1;
 %! d1 = eigs (fn, n, k, 'lm', opts);
 %! assert (d1, d0(end:-1:(end-k+1)), 1e-12);
 %!testif HAVE_ARPACK
 %! fn = @(x) A \ x;
 %! opts.issym = 1; opts.isreal = 1;
@@ -1268,18 +1276,20 @@ K Maschhoff, D Sorensen and C Yang. For 
 %! d1 = eigs(A, eye(n), k, 4.1, opts);
 %! assert (abs(d1), eigs(A,k,4.1), 1e-12);
 %!testif HAVE_ARPACK
 %! opts.cholB=true;
 %! q = [2:n,1];
 %! opts.permB=q;
 %! d1 = eigs(A, eye(n)(q,q), k, 4.1, opts);
 %! assert (abs(d1), eigs(A,k,4.1), 1e-12);
-%!assert (abs(eigs(A,k,4.1)), abs(eigs(A,eye(n),k,4.1)), 1e-12);
-%!assert (sort(imag(eigs(A,k,4.1))), sort(imag(eigs(A,eye(n),k,4.1))), 1e-12);
+%!testif HAVE_ARPACK
+%! assert (abs(eigs(A,k,4.1)), abs(eigs(A,eye(n),k,4.1)), 1e-12);
+%!testif HAVE_ARPACK
+%! assert (sort(imag(eigs(A,k,4.1))), sort(imag(eigs(A,eye(n),k,4.1))), 1e-12);
 %!testif HAVE_ARPACK
 %! fn = @(x) A * x;
 %! opts.issym = 0; opts.isreal = 1;
 %! d1 = eigs (fn, n, k, 'lm', opts);
 %! assert (abs(d1), abs(d0(end:-1:(end-k+1))), 1e-12);
 %!testif HAVE_ARPACK
 %! fn = @(x) A \ x;
 %! opts.issym = 0; opts.isreal = 1;
@@ -1397,18 +1407,20 @@ K Maschhoff, D Sorensen and C Yang. For 
 %! assert (sort(imag(abs(d1))), sort(imag(eigs(A,k,4.1))), 1e-12);
 %!testif HAVE_ARPACK
 %! opts.cholB=true;
 %! q = [2:n,1];
 %! opts.permB=q;
 %! d1 = eigs(A, eye(n)(q,q), k, 4.1, opts);
 %! assert (abs(abs(d1)), abs(eigs(A,k,4.1)), 1e-12);
 %! assert (sort(imag(abs(d1))), sort(imag(eigs(A,k,4.1))), 1e-12);
-%!assert (abs(eigs(A,k,4.1)), abs(eigs(A,eye(n),k,4.1)), 1e-12);
-%!assert (sort(imag(eigs(A,k,4.1))), sort(imag(eigs(A,eye(n),k,4.1))), 1e-12);
+%!testif HAVE_ARPACK
+%! assert (abs(eigs(A,k,4.1)), abs(eigs(A,eye(n),k,4.1)), 1e-12);
+%!testif HAVE_ARPACK
+%! assert (sort(imag(eigs(A,k,4.1))), sort(imag(eigs(A,eye(n),k,4.1))), 1e-12);
 %!testif HAVE_ARPACK
 %! fn = @(x) A * x;
 %! opts.issym = 0; opts.isreal = 0;
 %! d1 = eigs (fn, n, k, 'lm', opts);
 %! assert (abs(d1), abs(d0(end:-1:(end-k+1))), 1e-12);
 %!testif HAVE_ARPACK
 %! fn = @(x) A \ x;
 %! opts.issym = 0; opts.isreal = 0;
