# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1267073672 18000
#      Wed Feb 24 23:54:32 2010 -0500
# Node ID f074aa6b2c804af4485815ba61df04b95831dd0e
# Parent  7ed1f2e831bafb4364070da82f5cd109f1a8a813
__contour__: don't fail if zlevel is a vector with all the same values

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,14 @@
+2010-02-24  John W. Eaton  <jwe@octave.org>
+
+	* plot/private/__contour__.m (get_lvl_eps): New function.
+	Handle case of single level value.  Use sqrt (eps) instead of 1e-6.
+	(update_text, add_patch_children): Use it.
+
 2010-02-19  Rik <octave@nomad.inbox5.com>
 
 	* optimization/fzero.m: Add test for discontinuity at the end.
 
 2010-02-18  John W. Eaton  <jwe@octave.org>
 
 	* image/imfinfo.m: Don't handle file time stamp here.
 
diff --git a/scripts/plot/private/__contour__.m b/scripts/plot/private/__contour__.m
--- a/scripts/plot/private/__contour__.m
+++ b/scripts/plot/private/__contour__.m
@@ -224,21 +224,18 @@ function add_patch_children (hg)
   ls = get (hg, "linestyle");
   filled = get (hg, "fill");
 
   if (strcmpi (lc, "auto"))
     lc = "flat";
   endif
 
   if (strcmpi (filled, "on"))
-    if (diff (lev) < 10*eps) 
-      lvl_eps = 1e-6;
-    else
-      lvl_eps = min (diff (lev)) / 1000.0;
-    endif
+
+    lvl_eps = get_lvl_eps (lev);
 
     ## Decode contourc output format.
     i1 = 1;
     ncont = 0;
     while (i1 < columns (c))
       ncont++;
       cont_lev(ncont) = c(1, i1);
       cont_len(ncont) = c(2, i1);
@@ -478,21 +475,17 @@ function update_text (h, d)
 
     delete (findobj (h, "type", "text"));
 
     if (strcmpi (get (h, "textlistmode"), "manual"))
       lvl = get (h, "textlist");
     elseif (strcmpi (get (h, "textstepmode"), "manual"))
       lev = get (h, "levellist");
 
-      if (diff (lev) < 10*eps) 
-	lvl_eps = 1e-6;
-      else
-	lvl_eps = min (abs (diff (lev))) / 1000.0;
-      endif
+      lvl_eps = get_lvl_eps (lev);
 
       stp = get (h, "textstep");
       t = [0, floor(cumsum(diff (lev)) / (abs(stp) - lvl_eps))];
       lvl = lev([true, t(1:end-1) != t(2:end)]);
       set (h, "textlist", lvl);
     else
       lvl = get (h, "levellist");
       set (h, "textlist", lvl, "textstep", get (h, "levelstep"));
@@ -510,8 +503,24 @@ function update_text (h, d)
 	  __clabel__ (get (h, "contourmatrix"), lvl, h,
 		      get (h, "labelspacing"), []);
       endswitch
     endif
   endif
 
   recursive = false;
 endfunction
+
+function lvl_eps = get_lvl_eps (lev)
+  ## FIXME -- is this the right thing to do for this tolerance?  Should
+  ## it be an absolute or relative tolerance, or switch from one to the
+  ## other depending on the value of lev?
+  if (isscalar (lev))
+    lvl_eps = abs (lev) * sqrt (eps);
+  else
+    tmp = min (abs (diff (lev)));
+    if (tmp < 10*eps) 
+      lvl_eps = sqrt (eps);
+    else
+      lvl_eps = tmp / 1000.0;
+    endif
+  endif
+endfunction
