# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1233251425 18000
#      Thu Jan 29 12:50:25 2009 -0500
# Node ID 1dce30ab0e72842a8db0738211826a23853c9c1f
# Parent  4d90d21a9cd93ffa4642d3bad3ec2e7204a5b5d7
don't convert NaN to logical in bool expressions

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,14 @@
+2009-01-29  John W. Eaton  <jwe@octave.org>
+
+	* intNDArray.h (intNDArray<T>:any_element_is_nan): New function.
+	* boolNDArrah.h (boolNDArray::any_element_is_nan): New function.
+	* chNDArray.h (charNDArray::any_element_is_nan): New function.
+
 2009-01-28  John W. Eaton  <jwe@octave.org>
 
 	* Makefile.in (LIBRARIES, install, uninstall): Use SHLLIBPRE
 	and SHLBINPRE library prefixes.
 	From Marco Atzeri <marco_atzeri@yahoo.it>.
 
 2009-01-28  Jaroslav Hajek  <highegg@gmail.com>
 
diff --git a/liboctave/boolNDArray.h b/liboctave/boolNDArray.h
--- a/liboctave/boolNDArray.h
+++ b/liboctave/boolNDArray.h
@@ -54,16 +54,18 @@ public:
       ArrayN<bool>::operator = (a);
       return *this;
     }
 
   // unary operations
 
   boolNDArray operator ! (void) const;
 
+  bool any_element_is_nan (void) const { return false; }
+
   // FIXME -- this is not quite the right thing.
 
   boolNDArray all (int dim = -1) const;
   boolNDArray any (int dim = -1) const;
 
   boolNDArray sum (int dim = -1) const;
 
   boolNDArray concat (const boolNDArray& rb, const Array<octave_idx_type>& ra_idx);
diff --git a/liboctave/chNDArray.h b/liboctave/chNDArray.h
--- a/liboctave/chNDArray.h
+++ b/liboctave/chNDArray.h
@@ -56,16 +56,18 @@ public:
   charNDArray (const ArrayN<char>& a) : MArrayN<char> (a) { }
 
   charNDArray& operator = (const charNDArray& a)
     {
       MArrayN<char>::operator = (a);
       return *this;
     }
 
+  bool any_element_is_nan (void) const { return false; }
+
   // FIXME -- this is not quite the right thing.
 
   boolNDArray all (int dim = -1) const;
   boolNDArray any (int dim = -1) const;
   charNDArray concat (const charNDArray& rb, const Array<octave_idx_type>& ra_idx);
   charNDArray concat (const NDArray& rb, const Array<octave_idx_type>& ra_idx);
 
   charNDArray& insert (const charNDArray& a, octave_idx_type r, octave_idx_type c);
diff --git a/liboctave/intNDArray.h b/liboctave/intNDArray.h
--- a/liboctave/intNDArray.h
+++ b/liboctave/intNDArray.h
@@ -58,16 +58,17 @@ public:
   intNDArray& operator = (const intNDArray<T>& a)
     {
       MArrayN<T>::operator = (a);
       return *this;
     }
 
   boolNDArray operator ! (void) const;
 
+  bool any_element_is_nan (void) const { return false; }
   bool any_element_not_one_or_zero (void) const;
 
   intNDArray diag (octave_idx_type k = 0) const;
 
   // FIXME -- this is not quite the right thing.
 
   boolNDArray all (int dim = -1) const;
   boolNDArray any (int dim = -1) const;
diff --git a/src/Cell.h b/src/Cell.h
--- a/src/Cell.h
+++ b/src/Cell.h
@@ -116,16 +116,17 @@ public:
   boolMatrix any (int /* dim */ = 0) const { return boolMatrix (); }
 
   Cell concat (const Cell& rb, const Array<octave_idx_type>& ra_idx);
 
   Cell& insert (const Cell& a, octave_idx_type r, octave_idx_type c);
   Cell& insert (const Cell& a, const Array<octave_idx_type>& ra_idx);
 
   // FIXME
+  bool any_element_is_nan (void) const { return false; }
   bool is_true (void) const { return false; }
 
   static octave_value resize_fill_value (void) { return Matrix (); }
 
   Cell diag (octave_idx_type k = 0) const;
 
   Cell xisalnum (void) const { return map (&octave_value::xisalnum); }
   Cell xisalpha (void) const { return map (&octave_value::xisalpha); }
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,17 @@
+2009-01-29  John W. Eaton  <jwe@octave.org>
+
+	* ov-base-scalar.cc (octave_base_scalar<ST>::is_true (void) const):
+	Error if scalar is NaN.
+	* ov-base-mat.cc (octave_base_matrix<MT>::is_true (void) const):
+	Likewise, if any element of matrix is NaN.
+	* ov-cell.cc (octave_cell::is_true): New function.
+	* Cell.h (Cell::any_element_is_nan): New function.
+
 2009-01-29  Jaroslav Hajek  <highegg@gmail.com>
 
 	* pr-output.cc:
 	(void octave_print_internal (..., const DiagMatrix& m,...),
 	(void octave_print_internal (..., const ComplexDiagMatrix& m,...),
 	(void octave_print_internal (..., const FloatDiagMatrix& m,...),
 	(void octave_print_internal (..., const FloatComplexDiagMatrix& m,...)):
 	New functions.
diff --git a/src/ov-base-mat.cc b/src/ov-base-mat.cc
--- a/src/ov-base-mat.cc
+++ b/src/ov-base-mat.cc
@@ -242,19 +242,24 @@ octave_base_matrix<MT>::is_true (void) c
   bool retval = false;
   dim_vector dv = matrix.dims ();
   int nel = dv.numel ();
 
   if (nel > 0)
     {
       MT t1 (matrix.reshape (dim_vector (nel, 1)));
 
-      boolNDArray t2 = t1.all ();
+      if (t1.any_element_is_nan ())
+	error ("invalid conversion from NaN to logical");
+      else
+	{
+	  boolNDArray t2 = t1.all ();
 
-      retval = t2(0);
+	  retval = t2(0);
+	}
     }
 
   return retval;
 }
 
 template <class MT>
 bool
 octave_base_matrix<MT>::print_as_scalar (void) const
diff --git a/src/ov-base-scalar.cc b/src/ov-base-scalar.cc
--- a/src/ov-base-scalar.cc
+++ b/src/ov-base-scalar.cc
@@ -96,16 +96,30 @@ octave_base_scalar<ST>::subsasgn (const 
     default:
       panic_impossible ();
     }
 
   return retval;
 }
 
 template <class ST>
+bool
+octave_base_scalar<ST>::is_true (void) const
+{
+  bool retval = false;
+
+  if (xisnan (scalar))
+    error ("invalid conversion from NaN to logical");
+  else
+    retval = (scalar != ST ());
+
+  return retval;
+}
+
+template <class ST>
 void
 octave_base_scalar<ST>::print (std::ostream& os, bool pr_as_read_syntax) const
 {
   print_raw (os, pr_as_read_syntax);
   newline (os);
 }
 
 template <class ST>
diff --git a/src/ov-base-scalar.h b/src/ov-base-scalar.h
--- a/src/ov-base-scalar.h
+++ b/src/ov-base-scalar.h
@@ -111,17 +111,17 @@ public:
   MatrixType matrix_type (void) const { return typ; }
   MatrixType matrix_type (const MatrixType& _typ) const
     { MatrixType ret = typ; typ = _typ; return ret; }
 
   bool is_scalar_type (void) const { return true; }
 
   bool is_numeric_type (void) const { return true; }
 
-  bool is_true (void) const { return (scalar != ST ()); }
+  bool is_true (void) const;
 
   void print (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   bool print_name_tag (std::ostream& os, const std::string& name) const;
 
   // Unsafe.  This function exists to support the MEX interface.
diff --git a/src/ov-cell.cc b/src/ov-cell.cc
--- a/src/ov-cell.cc
+++ b/src/ov-cell.cc
@@ -355,16 +355,23 @@ octave_cell::byte_size (void) const
   size_t retval = 0;
 
   for (octave_idx_type i = 0; i < numel (); i++)
     retval += matrix(i).byte_size ();
 
   return retval;
 }
 
+bool
+octave_cell::is_true (void) const
+{
+  error ("invalid conversion from cell array to logical value");
+  return false;
+}
+
 octave_value_list
 octave_cell::list_value (void) const
 {
   return octave_value_list (matrix);
 }
 
 string_vector
 octave_cell::all_strings (bool pad) const
diff --git a/src/ov-cell.h b/src/ov-cell.h
--- a/src/ov-cell.h
+++ b/src/ov-cell.h
@@ -97,16 +97,18 @@ public:
   bool is_defined (void) const { return true; }
 
   bool is_constant (void) const { return true; }
 
   bool is_cell (void) const { return true; }
 
   bool is_cellstr (void) const { return matrix.is_cellstr (); }
 
+  bool is_true (void) const;
+
   Cell cell_value (void) const { return matrix; }
 
   octave_value_list list_value (void) const;
 
   octave_value convert_to_str_internal (bool pad, bool, char type) const
     { return octave_value (all_strings (pad), type); }
 
   string_vector all_strings (bool pad = false) const;
