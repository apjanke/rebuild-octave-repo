# HG changeset patch
# User jwe
# Date 853546657 0
#      Sat Jan 18 00:17:37 1997 +0000
# Node ID 12bc9d0a50b5e52ad98f9fc812eb568d0574ce94
# Parent  bac14003d9bb1dd48c5ce35154e1d0e25c7532d1
[project @ 1997-01-18 00:17:36 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+Fri Jan 17 18:13:10 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* file-io.cc (Ffflush): Handle stdout as a special case.
+
+	* oct-stream.cc (octave_stream_list::do_get_file_number):
+	Do the work for octave_stream::get_file_number.
+	(octave_stream_list::get_file_number): Convert to static function.
+
 Wed Jan  8 11:42:44 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* log.cc (sqrtm): For complex arg case, compute sqrt, not log.
 
 Tue Jan  7 00:16:41 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Version 2.0.1 released.
 
diff --git a/src/file-io.cc b/src/file-io.cc
--- a/src/file-io.cc
+++ b/src/file-io.cc
@@ -163,22 +163,35 @@ DEFUN (fflush, args, ,
   "fflush (FILENUM): flush buffered data to output file")
 {
   double retval = -1.0;
 
   int nargin = args.length ();
 
   if (nargin == 1)
     {
-      octave_stream *os = octave_stream_list::lookup (args(0));
+      // XXX FIXME XXX -- any way to avoid special case for stdout?
+
+      int fid = octave_stream_list::get_file_number (args (0));
+
+      if (fid == 1)
+	{
+	  flush_octave_stdout ();
 
-      if (os)
-	retval = (double) os->flush ();
+	  retval = 0.0;
+	}
       else
-	gripe_invalid_file_id ("fflush");
+	{
+	  octave_stream *os = octave_stream_list::lookup (fid);
+
+	  if (os)
+	    retval = (double) os->flush ();
+	  else
+	    gripe_invalid_file_id ("fflush");
+	}
     }
   else
     print_usage ("fflush");
 
   return retval;
 }
 
 DEFUN (fgetl, args, ,
diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -2680,17 +2680,17 @@ octave_stream_list::open_file_numbers (v
 
   if (instance)
     retval = instance->do_open_file_numbers ();
 
   return retval;
 }
 
 int
-octave_stream_list::get_file_number (const octave_value& fid) const
+octave_stream_list::do_get_file_number (const octave_value& fid) const
 {
   int retval = -1;
 
   if (fid.is_string ())
     {
       string nm = fid.string_value ();
 
       // stdin (cin), stdout (cout), and stderr (cerr) are unnamed.
@@ -2716,13 +2716,24 @@ octave_stream_list::get_file_number (con
 	::error ("file id must be a string or integer value");
       else
 	retval = int_fid;
     }
 
   return retval;
 }
 
+int
+octave_stream_list::get_file_number (const octave_value& fid)
+{
+  int retval = -1;
+
+  if (instance)
+    retval = instance->do_get_file_number (fid);
+
+  return retval;
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/oct-stream.h b/src/oct-stream.h
--- a/src/oct-stream.h
+++ b/src/oct-stream.h
@@ -487,16 +487,18 @@ public:
 
   static string_vector get_info (int fid);
   static string_vector get_info (const octave_value& fid);
 
   static string list_open_files (void);
 
   static octave_value open_file_numbers (void);
 
+  static int get_file_number (const octave_value& fid);
+
 private:
 
   Array<octave_stream*> list;
 
   int curr_len;
 
   static octave_stream_list *instance;
 
@@ -512,17 +514,17 @@ private:
 
   string_vector do_get_info (int fid) const;
   string_vector do_get_info (const octave_value& fid) const;
 
   string do_list_open_files (void) const;
 
   octave_value do_open_file_numbers (void) const;
 
-  int get_file_number (const octave_value& fid) const;
+  int do_get_file_number (const octave_value& fid) const;
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
