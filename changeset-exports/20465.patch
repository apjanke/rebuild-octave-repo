# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1440619549 14400
#      Wed Aug 26 16:05:49 2015 -0400
# Node ID 44eb1102f8a8d3afba12e7a0ffeca490d67f5be3
# Parent  7fbba8c8efd5d919be9a7f05e7d7de78bd958fcf
don't recycle scanf format string if all conversions are done (bug #45808)

* oct-stream.cc, oct-stream.h (scanf_format_elt::special_conversion):
New enum value, no_conversion.
(scanf_format_list::next): If not cycling through the list, return
dummy scanf_format_elt after list has been exhausted.
(octave_base_stream::do_scanf): Only cycle through the format list
more than once if there are conversions to make and the limit on the
number of values to convert has not been reached.

diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -1598,21 +1598,29 @@ octave_base_stream::do_scanf (scanf_form
       octave_idx_type num_fmt_elts = fmt_list.length ();
 
       for (;;)
         {
           octave_quit ();
 
           if (elt)
             {
-              if (! (elt->type == scanf_format_elt::whitespace_conversion
-                     || elt->type == scanf_format_elt::literal_conversion
-                     || elt->type == '%')
-                  && max_conv > 0 && conversion_count == max_conv)
+              if (elt->type == scanf_format_elt::null
+                  || (! (elt->type == scanf_format_elt::whitespace_conversion
+                        || elt->type == scanf_format_elt::literal_conversion
+                        || elt->type == '%')
+                      && max_conv > 0 && conversion_count == max_conv))
                 {
+                  // We are done, either because we have reached the end
+                  // of the format string and are not cycling through
+                  // the format again or because we've converted all the
+                  // values that have been requested and the next format
+                  // element is a conversion.  Determine final array
+                  // size and exit.
+
                   if (all_char_conv && one_elt_size_spec)
                     {
                       final_nr = 1;
                       final_nc = data_index;
                     }
                   else
                     {
                       final_nr = nr;
@@ -1854,17 +1862,26 @@ octave_base_stream::do_scanf (scanf_form
                 {
                   final_nr = nr;
                   final_nc = (data_index - 1) / nr + 1;
                 }
 
               break;
             }
           else
-            elt = fmt_list.next (nconv > 0);
+            {
+              // Cycle through the format list more than once if we have
+              // some conversions to make and we haven't reached the
+              // limit on the number of values to convert (possibly
+              // because there is no specified limit).
+
+              elt = fmt_list.next (nconv > 0
+                                   && (max_conv == 0
+                                       || conversion_count < max_conv));
+            }
         }
     }
 
   if (ok ())
     {
       mval.resize (final_nr, final_nc, 0.0);
 
       retval = mval;
diff --git a/libinterp/corefcn/oct-stream.h b/libinterp/corefcn/oct-stream.h
--- a/libinterp/corefcn/oct-stream.h
+++ b/libinterp/corefcn/oct-stream.h
@@ -44,17 +44,18 @@ class
 OCTINTERP_API
 scanf_format_elt
 {
 public:
 
   enum special_conversion
   {
     whitespace_conversion = 1,
-    literal_conversion = 2
+    literal_conversion = 2,
+    null = 3
   };
 
   scanf_format_elt (const char *txt = 0, int w = 0, bool d = false,
                     char typ = '\0', char mod = '\0',
                     const std::string& ch_class = std::string ())
     : text (strsave (txt)), width (w), discard (d), type (typ),
       modifier (mod), char_class (ch_class) { }
 
@@ -124,25 +125,29 @@ public:
     return current ();
   }
 
   const scanf_format_elt *current (void) const
   { return list.numel () > 0 ? list.elem (curr_idx) : 0; }
 
   const scanf_format_elt *next (bool cycle = true)
   {
+    static scanf_format_elt dummy
+      (0, 0, false, scanf_format_elt::null, '\0', "");
+
     curr_idx++;
 
     if (curr_idx >= list.numel ())
       {
         if (cycle)
           curr_idx = 0;
         else
-          return 0;
+          return &dummy;
       }
+
     return current ();
   }
 
   void printme (void) const;
 
   bool ok (void) const { return (nconv >= 0); }
 
   operator bool () const { return ok (); }
