# HG changeset patch
# User jwe
# Date 753101493 0
#      Fri Nov 12 10:51:33 1993 +0000
# Node ID 7947b7a6b6dae3f35d0a3b9fc852023c6552bc38
# Parent  5869adaa6aea0dad8b850d8eb61982c89b46bf4d
[project @ 1993-11-12 10:51:10 by jwe]

diff --git a/liboctave/Matrix.cc b/liboctave/Matrix.cc
--- a/liboctave/Matrix.cc
+++ b/liboctave/Matrix.cc
@@ -1817,16 +1817,38 @@ Matrix::row_min (void) const
 	  result.elem (i) = res;
 	}
     }
 
   return result;
 }
 
 ColumnVector
+Matrix::row_min_loc (void) const
+{
+  ColumnVector result;
+
+  if (nr > 0 && nc > 0)
+    {
+      result.resize (nr);
+
+      for (int i = 0; i < nr; i++)
+        {
+          int res = 0;
+          for (int j = 0; j < nc; j++)
+            if (elem (i, j) < elem (i, res))
+              res = j;
+          result.elem (i) = (double) (res + 1);
+        }
+    }
+
+  return result;
+}
+
+ColumnVector
 Matrix::row_max (void) const
 {
   ColumnVector result;
 
   if (nr > 0 && nc > 0)
     {
       result.resize (nr);
 
@@ -1838,16 +1860,38 @@ Matrix::row_max (void) const
 	      res = elem (i, j);
 	  result.elem (i) = res;
 	}
     }
 
   return result;
 }
 
+ColumnVector
+Matrix::row_max_loc (void) const
+{
+  ColumnVector result;
+
+  if (nr > 0 && nc > 0)
+    {
+      result.resize (nr);
+
+      for (int i = 0; i < nr; i++)
+        {
+          int res = 0;
+          for (int j = 0; j < nc; j++)
+            if (elem (i, j) > elem (i, res))
+              res = j;
+          result.elem (i) = (double) (res + 1);
+        }
+    }
+
+  return result;
+}
+
 RowVector
 Matrix::column_min (void) const
 {
   RowVector result;
 
   if (nr > 0 && nc > 0)
     {
       result.resize (nc);
@@ -1859,16 +1903,38 @@ Matrix::column_min (void) const
 	    if (elem (i, j) < res)
 	      res = elem (i, j);
 	  result.elem (j) = res;
 	}
     }
 
   return result;
 }
+RowVector
+Matrix::column_min_loc (void) const
+{
+  RowVector result;
+
+  if (nr > 0 && nc > 0)
+    {
+      result.resize (nc);
+
+      for (int j = 0; j < nc; j++)
+        {
+          int res = 0.0;
+          for (int i = 0; i < nr; i++)
+            if (elem (i, j) < elem (res, j))
+              res = i;
+          result.elem (j) = (double) (res + 1);
+        }
+    }
+
+  return result;
+}
+
 
 RowVector
 Matrix::column_max (void) const
 {
   RowVector result;
 
   if (nr > 0 && nc > 0)
     {
@@ -1882,16 +1948,38 @@ Matrix::column_max (void) const
 	      res = elem (i, j);
 	  result.elem (j) = res;
 	}
     }
 
   return result;
 }
 
+RowVector
+Matrix::column_max_loc (void) const
+{
+  RowVector result;
+
+  if (nr > 0 && nc > 0)
+    {
+      result.resize (nc);
+
+      for (int j = 0; j < nc; j++)
+        {
+          int res = 0;
+          for (int i = 0; i < nr; i++)
+            if (elem (i, j) > elem (res, j))
+              res = i;
+          result.elem (j) = (double) (res + 1);
+        }
+    }
+
+  return result;
+}
+
 ostream&
 operator << (ostream& os, const Matrix& a)
 {
 //  int field_width = os.precision () + 7;
   for (int i = 0; i < a.nr; i++)
     {
       for (int j = 0; j < a.nc; j++)
 	os << " " /* setw (field_width) */ << a.elem (i, j);
@@ -4121,16 +4209,42 @@ ComplexMatrix::row_min (void) const
 	  result.elem (i) = res;
 	}
     }
 
   return result;
 }
 
 ComplexColumnVector
+ComplexMatrix::row_min_loc (void) const
+{
+  ComplexColumnVector result;
+
+  if (nr > 0 && nc > 0)
+    {
+      result.resize (nr);
+
+      for (int i = 0; i < nr; i++)
+        {
+          Complex res = 0;
+          double absres = abs (elem (i, 0));
+          for (int j = 0; j < nc; j++)
+            if (abs (elem (i, j)) < absres)
+              {
+                res = j;
+                absres = abs (elem (i, j));
+              }
+          result.elem (i) = res + 1;
+        }
+    }
+
+  return result;
+}
+
+ComplexColumnVector
 ComplexMatrix::row_max (void) const
 {
   ComplexColumnVector result;
 
   if (nr > 0 && nc > 0)
     {
       result.resize (nr);
 
@@ -4146,16 +4260,42 @@ ComplexMatrix::row_max (void) const
 	      }
 	  result.elem (i) = res;
 	}
     }
 
   return result;
 }
 
+ComplexColumnVector
+ComplexMatrix::row_max_loc (void) const
+{
+  ComplexColumnVector result;
+
+  if (nr > 0 && nc > 0)
+    {
+      result.resize (nr);
+
+      for (int i = 0; i < nr; i++)
+        {
+          Complex res = 0;
+          double absres = abs (elem (i, 0));
+          for (int j = 0; j < nc; j++)
+            if (abs (elem (i, j)) > absres)
+              {
+                res = j;
+                absres = abs (elem (i, j));
+              }
+          result.elem (i) = res + 1;
+        }
+    }
+
+  return result;
+}
+
 ComplexRowVector
 ComplexMatrix::column_min (void) const
 {
   ComplexRowVector result;
 
   if (nr > 0 && nc > 0)
     {
       result.resize (nc);
@@ -4173,16 +4313,42 @@ ComplexMatrix::column_min (void) const
 	  result.elem (j) = res;
 	}
     }
 
   return result;
 }
 
 ComplexRowVector
+ComplexMatrix::column_min_loc (void) const
+{
+  ComplexRowVector result;
+
+  if (nr > 0 && nc > 0)
+    {
+      result.resize (nc);
+
+      for (int j = 0; j < nc; j++)
+        {
+          Complex res = 0;
+          double absres = abs (elem (0, j));
+          for (int i = 0; i < nr; i++)
+            if (abs (elem (i, j)) < absres)
+              {
+                res = i;
+                absres = abs (elem (i, j));
+              }
+          result.elem (j) = res + 1;
+        }
+    }
+
+  return result;
+}
+
+ComplexRowVector
 ComplexMatrix::column_max (void) const
 {
   ComplexRowVector result;
 
   if (nr > 0 && nc > 0)
     {
       result.resize (nc);
 
@@ -4198,16 +4364,42 @@ ComplexMatrix::column_max (void) const
 	      }
 	  result.elem (j) = res;
 	}
     }
 
   return result;
 }
 
+ComplexRowVector
+ComplexMatrix::column_max_loc (void) const
+{
+  ComplexRowVector result;
+
+  if (nr > 0 && nc > 0)
+    {
+      result.resize (nc);
+
+      for (int j = 0; j < nc; j++)
+        {
+          Complex res = 0;
+          double absres = abs (elem (0, j));
+          for (int i = 0; i < nr; i++)
+            if (abs (elem (i, j)) > absres)
+              {
+                res = i;
+                absres = abs (elem (i, j));
+              }
+          result.elem (j) = res + 1;
+        }
+    }
+
+  return result;
+}
+
 // i/o
 
 ostream&
 operator << (ostream& os, const ComplexMatrix& a)
 {
 //  int field_width = os.precision () + 7;
   for (int i = 0; i < a.nr; i++)
     {
diff --git a/liboctave/Matrix.h b/liboctave/Matrix.h
--- a/liboctave/Matrix.h
+++ b/liboctave/Matrix.h
@@ -507,20 +507,26 @@ public:
   Matrix prod (void) const;
   Matrix sum (void) const;
   Matrix sumsq (void) const;
 
   ColumnVector diag (void) const;
   ColumnVector diag (int k) const;
 
   ColumnVector row_min (void) const;
+  ColumnVector row_min_loc (void) const;
+
   ColumnVector row_max (void) const;
+  ColumnVector row_max_loc (void) const;
 
   RowVector column_min (void) const;
+  RowVector column_min_loc (void) const;
+
   RowVector column_max (void) const;
+  RowVector column_max_loc (void) const;
 
 // i/o
 
   friend ostream& operator << (ostream& os, const Matrix& a);
   friend istream& operator >> (istream& is, Matrix& a);
 
 // conversions
 
@@ -1344,20 +1350,26 @@ public:
   ComplexMatrix prod (void) const;
   ComplexMatrix sum (void) const;
   ComplexMatrix sumsq (void) const;
 
   ComplexColumnVector diag (void) const;
   ComplexColumnVector diag (int k) const;
 
   ComplexColumnVector row_min (void) const;
+  ComplexColumnVector row_min_loc (void) const;
+
   ComplexColumnVector row_max (void) const;
+  ComplexColumnVector row_max_loc (void) const;
 
   ComplexRowVector column_min (void) const;
+  ComplexRowVector column_min_loc (void) const;
+
   ComplexRowVector column_max (void) const;
+  ComplexRowVector column_max_loc (void) const;
 
 // i/o
 
   friend ostream& operator << (ostream& os, const ComplexMatrix& a);
   friend istream& operator >> (istream& is, ComplexMatrix& a);
 
 // conversions
 
diff --git a/src/builtins.cc b/src/builtins.cc
--- a/src/builtins.cc
+++ b/src/builtins.cc
@@ -424,20 +424,16 @@ where xdot and x are vectors and t is a 
     "[L, U, P] = lu (A): LU factorization", },
 
   { "max", 3, 2, builtin_max,
     "max (x): maximum value(s) of a vector (matrix)", },
 
   { "min", 3, 2, builtin_min,
     "min (x): minimum value(s) of a vector (matrix)", },
 
-  { "get_next_arg", 1, 1, builtin_get_next_arg,
-    "get_next_arg (): return next argument in function taking varible\n\
-number of parameters", },
-
   { "npsol", 11, 3, builtin_npsol,
 #if defined (NPSOL_MISSING)
     "This function requires NPSOL, which is not freely\n\
        redistributable.  For more information, read the file\n\
        libcruft/npsol/README.MISSING in the source distribution.", },
 #else
     "[x, obj, info, lambda] = npsol (x, \"phi\" [, lb, ub] [, lb, A, ub] [, lb, \"g\", ub])\n\n\
   Groups of arguments surrounded in `[]' are optional, but\n\
@@ -560,16 +556,24 @@ at which the integrand is singular.\n", 
     "sumsq (X): sum of squares of elements", },
 
   { "svd", 2, 3, builtin_svd,
     "s = svd (x) or [u, s, v] = svd (x): return SVD of x", },
 
   { "syl", 4, 1, builtin_syl,
     "X = syl (A, B, C): solve the Sylvester equation A X + X B + C = 0", },
 
+  { "va_arg", 1, 1, builtin_va_arg,
+    "va_arg (): return next argument in function taking varible\n\
+number of parameters", },
+
+  { "va_start", 1, 0, builtin_va_start,
+    "va_start (): reset the pointer to the list of optional arguments\n\
+to the beginning", },
+
   { "warranty", 1, 0, builtin_warranty,
     "warranty (): describe copying conditions", },
 
   { "zeros", 3, 1, builtin_zeros,
     "zeros (n), zeros (n, m), zeros (x): create a matrix of all zeros", },
 
   { NULL, -1, -1, NULL, NULL, },
 };
diff --git a/src/g-builtins.cc b/src/g-builtins.cc
--- a/src/g-builtins.cc
+++ b/src/g-builtins.cc
@@ -813,45 +813,16 @@ builtin_ftell (const tree_constant *args
     print_usage ("ftell");
   else
     retval = ftell_internal (args);
 
   return retval;
 }
 
 /*
- * Variable argument lists.
- */
-tree_constant *
-builtin_get_next_arg (const tree_constant *args, int nargin, int nargout)
-{
-  tree_constant *retval = NULL_TREE_CONST;
-  if (nargin == 1)
-    {
-      if (curr_function != (tree_function *) NULL)
-	{
-	  if (curr_function->takes_varargs ())
-	    {
-	      retval = new tree_constant [2];
-	      retval[0] = curr_function->get_next_arg ();
-	    }
-	  else
-	    error ("next_arg only valid within function taking\
- variable number of arguments");
-	}
-      else
-	error ("next_arg only valid within function body");
-    }
-  else
-    print_usage ("get_next_arg");
-
-  return retval;
-}
-
-/*
  * Get the value of an environment variable.
  */
 tree_constant *
 builtin_getenv (const tree_constant *args, int nargin, int nargout)
 {
   tree_constant *retval = NULL_TREE_CONST;
 
   if (nargin == 2 && args[1].is_string_type ())
@@ -1683,16 +1654,68 @@ builtin_hess (const tree_constant *args,
 		 retval = hess (args, nargin, nargout);)
   else
     print_usage ("hess");
 
   return retval;
 }
 
 /*
+ * Variable argument lists.
+ */
+tree_constant *
+builtin_va_arg (const tree_constant *args, int nargin, int nargout)
+{
+  tree_constant *retval = NULL_TREE_CONST;
+  if (nargin == 1)
+    {
+      if (curr_function != (tree_function *) NULL)
+	{
+	  if (curr_function->takes_varargs ())
+	    {
+	      retval = new tree_constant [2];
+	      retval[0] = curr_function->va_arg ();
+	    }
+	  else
+	    error ("va_arg only valid within function taking\
+ variable number of arguments");
+	}
+      else
+	error ("va_arg only valid within function body");
+    }
+  else
+    print_usage ("va_arg");
+
+  return retval;
+}
+
+tree_constant *
+builtin_va_start (const tree_constant *args, int nargin, int nargout)
+{
+  tree_constant *retval = NULL_TREE_CONST;
+  if (nargin == 1)
+    {
+      if (curr_function != (tree_function *) NULL)
+	{
+	  if (curr_function->takes_varargs ())
+	    curr_function->va_start ();
+	  else
+	    error ("va_start only valid within function taking\
+ variable number of arguments");
+	}
+      else
+	error ("va_start only valid within function body");
+    }
+  else
+    print_usage ("va_start");
+
+  return retval;
+}
+
+/*
  * Copying information.
  */
 tree_constant *
 builtin_warranty (const tree_constant *args, int nargin, int nargout)
 {
   ostrstream output_buf;
   output_buf << "\n    Octave, version " << version_string
 	     << ".  Copyright (C) 1992, 1993, John W. Eaton\n"
diff --git a/src/g-builtins.h b/src/g-builtins.h
--- a/src/g-builtins.h
+++ b/src/g-builtins.h
@@ -71,17 +71,16 @@ extern tree_constant *builtin_fopen (con
 extern tree_constant *builtin_fprintf (const tree_constant *, int, int);
 extern tree_constant *builtin_frewind (const tree_constant *, int, int);
 extern tree_constant *builtin_freport (const tree_constant *, int, int);
 extern tree_constant *builtin_fscanf (const tree_constant *, int, int);
 extern tree_constant *builtin_fseek (const tree_constant *, int, int);
 extern tree_constant *builtin_fsolve (const tree_constant *, int, int);
 extern tree_constant *builtin_fsqp (const tree_constant *, int, int);
 extern tree_constant *builtin_ftell (const tree_constant *, int, int);
-extern tree_constant *builtin_get_next_arg (const tree_constant *, int, int);
 extern tree_constant *builtin_getenv (const tree_constant *, int, int);
 extern tree_constant *builtin_givens (const tree_constant *, int, int);
 extern tree_constant *builtin_hess (const tree_constant *, int, int);
 extern tree_constant *builtin_input (const tree_constant *, int, int);
 extern tree_constant *builtin_ifft (const tree_constant *, int, int);
 extern tree_constant *builtin_inv (const tree_constant *, int, int);
 extern tree_constant *builtin_is_global (const tree_constant *, int, int);
 extern tree_constant *builtin_isstr (const tree_constant *, int, int);
@@ -115,16 +114,18 @@ extern tree_constant *builtin_size (cons
 extern tree_constant *builtin_sort (const tree_constant *, int, int);
 extern tree_constant *builtin_sprintf (const tree_constant *, int, int);
 extern tree_constant *builtin_sqrtm (const tree_constant *, int, int);
 extern tree_constant *builtin_sscanf (const tree_constant *, int, int);
 extern tree_constant *builtin_sum (const tree_constant *, int, int);
 extern tree_constant *builtin_sumsq (const tree_constant *, int, int);
 extern tree_constant *builtin_svd (const tree_constant *, int, int);
 extern tree_constant *builtin_syl (const tree_constant *, int, int);
+extern tree_constant *builtin_va_arg (const tree_constant *, int, int);
+extern tree_constant *builtin_va_start (const tree_constant *, int, int);
 extern tree_constant *builtin_warranty (const tree_constant *, int, int);
 extern tree_constant *builtin_zeros (const tree_constant *, int, int);
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/src/tree.h.old b/src/tree.h.old
--- a/src/tree.h.old
+++ b/src/tree.h.old
@@ -247,17 +247,18 @@ public:
 
   char *m_file_name (void);
   time_t time_parsed (void);
 
   void mark_as_system_m_file (void);
   int is_system_m_file (void) const;
 
   int takes_varargs (void) const;
-  tree_constant get_next_arg (void);
+  void va_start (void);
+  tree_constant va_arg (void);
 
   void stash_function_name (char *s);
   char *function_name (void);
 
   tree_constant eval (int print);
 
   tree_constant *eval (int print, int nargout);
 
@@ -276,16 +277,17 @@ private:
   tree_parameter_list *ret_list;
   symbol_table *sym_tab;
   tree *cmd_list;
   char *file_name;
   char *fcn_name;
   time_t t_parsed;
   int system_m_file;
   int varargs_ok;
+  int num_named_args;
   const tree_constant *args_passed;
   int num_args_passed;
   int curr_arg_number;
 };
 
 /*
  * A base class for expressions.
  */
