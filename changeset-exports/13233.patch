# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1317062600 25200
#      Mon Sep 26 11:43:20 2011 -0700
# Branch stable
# Node ID 914c0b103a3ddc1984e501a0908b7ed39d71dae6
# Parent  9b98affe52b9f0e686a9f8f3834a734787c74547
fftshift.m: Better explain operation in docstring (Bug #33581).

* fftshift.m: Improve docstring.  Validate dimension input is truly a positive integer.

diff --git a/scripts/signal/fftshift.m b/scripts/signal/fftshift.m
--- a/scripts/signal/fftshift.m
+++ b/scripts/signal/fftshift.m
@@ -19,45 +19,45 @@
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} fftshift (@var{x})
 ## @deftypefnx {Function File} {} fftshift (@var{x}, @var{dim})
 ## Perform a shift of the vector @var{x}, for use with the @code{fft}
 ## and @code{ifft} functions, in order the move the frequency 0 to the
 ## center of the vector or matrix.
 ##
 ## If @var{x} is a vector of @math{N} elements corresponding to @math{N}
-## time samples spaced of @math{Dt} each, then @code{fftshift (fft
-## (@var{x}))} corresponds to frequencies
+## time samples spaced by @math{dt}, then
+## @code{fftshift (fft (@var{x}))} corresponds to frequencies
 ##
 ## @example
-## f = ((1:N) - ceil(N/2)) / N / Dt
+## f = [ -(ceil((N-1)/2):-1:1)*df 0 (1:floor((N-1)/2))*df ]
 ## @end example
 ##
+## where @math{df} = 1 / @math{dt}.
+##
 ## If @var{x} is a matrix, the same holds for rows and columns.  If
 ## @var{x} is an array, then the same holds along each dimension.
 ##
 ## The optional @var{dim} argument can be used to limit the dimension
 ## along which the permutation occurs.
 ## @end deftypefn
 
 ## Author: Vincent Cautaerts <vincent@comf5.comm.eng.osaka-u.ac.jp>
 ## Created: July 1997
 ## Adapted-By: jwe
 
 function retval = fftshift (x, dim)
 
-  retval = 0;
-
   if (nargin != 1 && nargin != 2)
     print_usage ();
   endif
 
   if (nargin == 2)
-    if (!isscalar (dim))
-      error ("fftshift: dimension must be an integer scalar");
+    if (! (isscalar (dim) && dim > 0 && dim == fix (dim)))
+      error ("fftshift: dimension DIM must be a positive integer");
     endif
     nd = ndims (x);
     sz = size (x);
     sz2 = ceil (sz(dim) / 2);
     idx = cell ();
     for i = 1:nd
       idx{i} = 1:sz(i);
     endfor
@@ -79,16 +79,17 @@ function retval = fftshift (x, dim)
       retval = x(idx{:});
     else
       error ("fftshift: expecting vector or matrix argument");
     endif
   endif
 
 endfunction
 
+
 %!test
 %!  x = [0:7];
 %!  y = fftshift (x);
 %!  assert(y, [4 5 6 7 0 1 2 3]);
 %!  assert(fftshift (y), x);
 
 %!test
 %!  x = [0:6];
