# HG changeset patch
# User Torsten <mttl@mailbox.org>
# Date 1502577205 -7200
#      Sun Aug 13 00:33:25 2017 +0200
# Node ID b41792547237f05c02f362304b6f4d02fe50fbb4
# Parent  5c588c422e75ac5cd0e34be096ac8c72fe62f5a7
fix editor behavior when files are externally changed/removed

* file-editor-tab.cc (file_has_changed): new boolean paramter for closing
  the file, string parameter is used by signal from file system watcher and
  must not be used for closing the file

* file-editor-tab.h: new boolean parameter for closing, per default false for
  the signals from the file system watcher

diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -2221,26 +2221,26 @@ file_editor_tab::handle_save_file_as_ans
 void
 file_editor_tab::handle_save_file_as_answer_cancel ()
 {
   // User canceled, allow editing again.
   _edit_area->setReadOnly (false);
 }
 
 void
-file_editor_tab::file_has_changed (const QString& do_close)
+file_editor_tab::file_has_changed (const QString&, bool do_close)
 {
   // Prevent popping up multiple message boxes when the file has
   // been changed multiple times by temporarily removing from the
   // file watcher.
   QStringList trackedFiles = _file_system_watcher.files ();
   if (! trackedFiles.isEmpty ())
     _file_system_watcher.removePath (_file_name);
 
-  if (QFile::exists (_file_name) && do_close.isEmpty ())
+  if (QFile::exists (_file_name) && ! do_close)
     {
       // The file is modified
       if (_always_reload_changed_files)
 
               load_file (_file_name);
 
       else
         {
@@ -2265,17 +2265,17 @@ file_editor_tab::file_has_changed (const
           msgBox->setAttribute (Qt::WA_DeleteOnClose);
           msgBox->show ();
         }
     }
   else
     {
       // If desired and if file is not modified,
       // close the file without any user interaction
-      if (! do_close.isEmpty () && ! _edit_area->isModified ())
+      if (do_close && ! _edit_area->isModified ())
         {
           handle_file_resave_answer (QMessageBox::Cancel);
           return;
         }
 
       // give editor and this tab the focus,
       // possibly making the editor visible  if it is hidden
       emit set_focus_editor_signal (this);
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -131,17 +131,17 @@ public slots:
   void set_modified (bool modified = true);
 
   void set_encoding (const QString& new_encoding);
 
   QString load_file (const QString& fileName);
 
   void new_file (const QString& commands = QString ());
 
-  void file_has_changed (const QString& do_close);
+  void file_has_changed (const QString& path, bool do_close = false);
 
   void handle_context_menu_edit (const QString&);
   void handle_context_menu_break_condition (int linenr);
 
   void handle_request_add_breakpoint (int line, const QString& cond);
   void handle_request_remove_breakpoint (int line);
 
   void handle_octave_result (QObject *requester, QString& command,
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -597,17 +597,17 @@ file_editor::handle_file_remove (const Q
 
       // Is old file open?
       file_editor_tab *editor_tab
         = static_cast<file_editor_tab *> (find_tab_widget (old_name));
 
       if (editor_tab)
         {
           _external_close_request = true;  // Remember for not focussing editor
-          editor_tab->file_has_changed ("close");  // Close the tab
+          editor_tab->file_has_changed (QString (), true);  // Close the tab
           _external_close_request = false;  // Back to normal
         }
     }
 }
 
 void
 file_editor::do_undo ()
 {
