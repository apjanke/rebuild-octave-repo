# HG changeset patch
# User jwe
# Date 1045966614 0
#      Sun Feb 23 02:16:54 2003 +0000
# Node ID 83d4452bc5224df7251debf222922de66d611c7e
# Parent  d700cfed902a2f8dd7a866ce5568278440574e21
[project @ 2003-02-23 02:16:53 by jwe]

diff --git a/doc/interpreter/container.txi b/doc/interpreter/container.txi
--- a/doc/interpreter/container.txi
+++ b/doc/interpreter/container.txi
@@ -28,9 +28,11 @@
 @DOCSTRING(islist)
 
 @node Cell Arrays
 @section Cell Arrays
 @cindex cell arrays
 
 @DOCSTRING(cell)
 
+@DOCSTRING(cellstr)
+
 @DOCSTRING(iscell)
diff --git a/doc/interpreter/strings.txi b/doc/interpreter/strings.txi
--- a/doc/interpreter/strings.txi
+++ b/doc/interpreter/strings.txi
@@ -122,22 +122,22 @@ Data Types}, for more information about 
 * Character Class Functions::   
 @end menu
 
 @node Creating Strings
 @section Creating Strings
 
 @DOCSTRING(blanks)
 
+@DOCSTRING(char)
+
 @DOCSTRING(int2str)
 
 @DOCSTRING(com2str)
 
-@DOCSTRING(setstr)
-
 @DOCSTRING(strcat)
 
 @DOCSTRING(string_fill_char)
 
 @DOCSTRING(str2mat)
 
 @DOCSTRING(isstr)
 
diff --git a/doc/interpreter/struct.txi b/doc/interpreter/struct.txi
--- a/doc/interpreter/struct.txi
+++ b/doc/interpreter/struct.txi
@@ -178,11 +178,11 @@ It is also possible to cycle through all
 a loop, using a special form of the @code{for} statement
 (@pxref{The for Statement})
 
 The following functions are available to give you information about
 structures.
 
 @DOCSTRING(isstruct)
 
-@DOCSTRING(struct_contains)
+@DOCSTRING(fieldnames)
 
-@DOCSTRING(struct_elements)
+@DOCSTRING(isfield)
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2003-02-22  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* deprecated/struct_contains.m, deprecated/struct_elements.m:
+	New files.
+
 2003-02-20  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* statistics/tests/kolmogorov_smirnov_test.m: Use str2func to make
 	function handle to pass to feval.
 	* statistics/base/qqplot.m: Likewise.
 	* statistics/base/ppplot.m: Likewise.
 	* signal/spectral_xdf.m: Likewise.
 	* signal/spectral_adf.m: Likewise.
diff --git a/scripts/deprecated/setstr.m b/scripts/deprecated/setstr.m
new file mode 100644
--- /dev/null
+++ b/scripts/deprecated/setstr.m
@@ -0,0 +1,31 @@
+## Copyright (C) 2003 John W. Eaton
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 2, or (at your option)
+## any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+## General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, write to the Free
+## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
+## 02111-1307, USA.
+
+## -*- texinfo -*-
+## @deftypefn {Function File} {} setstr (@var{s})
+## This function has been deprecated.  Use char instead.
+## @end deftypefn
+
+## Author: jwe
+
+function retval = setstr (varargin)
+
+  retval = char (varargin{:});
+
+endfunction
diff --git a/scripts/deprecated/struct_contains.m b/scripts/deprecated/struct_contains.m
new file mode 100644
--- /dev/null
+++ b/scripts/deprecated/struct_contains.m
@@ -0,0 +1,31 @@
+## Copyright (C) 2003 John W. Eaton
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 2, or (at your option)
+## any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+## General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, write to the Free
+## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
+## 02111-1307, USA.
+
+## -*- texinfo -*-
+## @deftypefn {Function File} {} struct_contains (@var{expr}, @var{name})
+## This function has been deprecated.  Use isfield instead.
+## @end deftypefn
+
+## Author: jwe
+
+function retval = struct_contains (varargin)
+
+  retval = isfield (varargin{:});
+
+endfunction
diff --git a/scripts/deprecated/struct_elements.m b/scripts/deprecated/struct_elements.m
new file mode 100644
--- /dev/null
+++ b/scripts/deprecated/struct_elements.m
@@ -0,0 +1,31 @@
+## Copyright (C) 2003 John W. Eaton
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 2, or (at your option)
+## any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+## General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, write to the Free
+## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
+## 02111-1307, USA.
+
+## -*- texinfo -*-
+## @deftypefn {Function File} {} struct_elements (@var{struct})
+## This function has been deprecated.  Use fieldnames instead.
+## @end deftypefn
+
+## Author: jwe
+
+function retval = struct_elements (varargin)
+
+  retval = char (fieldnames (varargin{:}));
+
+endfunction
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,23 @@
+2003-02-22  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* strfns.cc (Fchar): New function.
+
+	* ov-cell.cc (octave_cell::all_strings): Allow elements to be
+	string arrays.
+	* ov.cc (octave_value::all_strings, octave_value::convert_to_str):
+	New optional arg, pad.  Change all derived classes.
+
+	* ov-struct.cc (Ffieldnames, Fisfield): Move here from data.cc.
+
+	* data.cc (Ffieldnames): Rename from Fstruct_elements.  Return
+	cell array instead of a string array.
+	(Fisfield): Rename from struct_contains.
+
 2003-02-22  Paul Kienzle <pkienzle@users.sf.net>
 
 	* toplev.cc: Put config info in array of strings, then convert to map.
 
 2003-02-22  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* variables.cc (symbol_exist): For names like foo.bar, don't omit
 	the part after the dot.
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -31,17 +31,16 @@ Software Foundation, 59 Temple Place - S
 
 #include "lo-ieee.h"
 #include "str-vec.h"
 #include "quit.h"
 
 #include "defun.h"
 #include "error.h"
 #include "gripes.h"
-#include "oct-map.h"
 #include "ov.h"
 #include "ov-re-nd-array.h"
 #include "variables.h"
 #include "oct-obj.h"
 #include "utils.h"
 
 #ifndef MIN
 #define MIN(a,b) ((a) < (b) ? (a) : (b))
@@ -925,96 +924,16 @@ Return 1 if @var{a} is a matrix.  Otherw
 	retval = (arg.rows () >= 1 && arg.columns () >= 1);
     }
   else
     print_usage ("ismatrix");
 
   return retval;
 }
 
-DEFUN (isstruct, args, ,
-  "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} {} isstruct (@var{expr})\n\
-Return 1 if the value of the expression @var{expr} is a structure.\n\
-@end deftypefn")
-{
-  octave_value retval;
-
-  if (args.length () == 1)
-    retval = args(0).is_map ();
-  else
-    print_usage ("isstruct");
-
-  return retval;
-}
-
-DEFUN (struct_elements, args, ,
-  "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} {} struct_elements (@var{struct})\n\
-Return a list of strings naming the elements of the structure\n\
-@var{struct}.  It is an error to call @code{struct_elements} with an\n\
-argument that is not a structure.\n\
-@end deftypefn")
-{
-  octave_value retval;
-
-  int nargin = args.length ();
-
-  if (nargin == 1)
-    {
-      if (args (0).is_map ())
-	{
-	  Octave_map m = args(0).map_value ();
-	  retval = m.keys ();
-	}
-      else
-	gripe_wrong_type_arg ("struct_elements", args (0));
-    }
-  else
-    print_usage ("struct_elements");
-
-  return retval;
-}
-
-DEFUN (struct_contains, args, ,
-  "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} {} struct_contains (@var{expr}, @var{name})\n\
-Return 1 if the expression @var{expr} is a structure and it includes an\n\
-element named @var{name}.  The first argument must be a structure and\n\
-the second must be a string.\n\
-@end deftypefn")
-{
-  octave_value retval;
-
-  int nargin = args.length ();
-
-  if (nargin == 2)
-    {
-      retval = false;
-
-      // XXX FIXME XXX -- should this work for all types that can do
-      // structure reference operations?
-
-      if (args(0).is_map () && args(1).is_string ())
-	{
-	  std::string key = args(1).string_value ();
-
-	  Octave_map m = args(0).map_value ();
-
-	  retval = m.contains (key);
-	}
-      else
-	print_usage ("struct_contains");
-    }
-  else
-    print_usage ("struct_contains");
-
-  return retval;
-}
-
 static octave_value
 fill_matrix (const octave_value_list& args, double val, const char *fcn)
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   switch (nargin)
diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -150,17 +150,17 @@ octave_base_value::subsasgn (const std::
 
       retval = tmp.subsasgn (type, idx, rhs);
     }
 
   return retval;
 }
 
 octave_value
-octave_base_value::convert_to_str (void) const
+octave_base_value::convert_to_str (bool) const
 {
   gripe_wrong_type_arg ("octave_base_value::convert_to_str ()",
 			type_name ());
   return octave_value ();
 }
 
 void
 octave_base_value::convert_to_row_or_column_vector (void)
@@ -312,23 +312,23 @@ octave_base_value::char_matrix_value (bo
     }
   else
     gripe_wrong_type_arg ("octave_base_value::char_matrix_value()",
 			  type_name ());
   return retval;
 }
 
 string_vector
-octave_base_value::all_strings (void) const
+octave_base_value::all_strings (bool pad) const
 {
   string_vector retval;
 
   if (Vimplicit_num_to_str_ok)
     {
-      octave_value tmp = convert_to_str ();
+      octave_value tmp = convert_to_str (pad);
 
       if (! error_state)
 	retval = tmp.all_strings ();
     }
   else
     gripe_wrong_type_arg ("octave_base_value::all_strings()", type_name ());
 
   return retval;
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -190,17 +190,17 @@ public:
   Matrix matrix_value (bool = false) const;
 
   Complex complex_value (bool = false) const;
 
   ComplexMatrix complex_matrix_value (bool = false) const;
 
   charMatrix char_matrix_value (bool = false) const;
 
-  string_vector all_strings (void) const;
+  string_vector all_strings (bool pad = false) const;
 
   std::string string_value (void) const;
 
   Range range_value (void) const;
 
   Octave_map map_value (void) const;
 
   string_vector map_keys (void) const;
@@ -214,17 +214,17 @@ public:
   octave_fcn_handle *fcn_handle_value (bool silent);
 
   octave_value_list list_value (void) const;
 
   bool bool_value (void) const;
 
   boolMatrix bool_matrix_value (void) const;
 
-  octave_value convert_to_str (void) const;
+  octave_value convert_to_str (bool pad = false) const;
 
   void convert_to_row_or_column_vector (void);
 
   void print (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   bool print_name_tag (std::ostream& os, const std::string& name) const;
diff --git a/src/ov-bool-mat.h b/src/ov-bool-mat.h
--- a/src/ov-bool-mat.h
+++ b/src/ov-bool-mat.h
@@ -93,17 +93,17 @@ public:
   Complex complex_value (bool = false) const;
 
   ComplexMatrix complex_matrix_value (bool = false) const
     { return ComplexMatrix (matrix); }
 
   boolMatrix bool_matrix_value (void) const
     { return matrix; }
 
-  octave_value convert_to_str (void) const
+  octave_value convert_to_str (bool = false) const
     { return octave_value (matrix); }
 
 protected:
 
   DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
diff --git a/src/ov-bool.cc b/src/ov-bool.cc
--- a/src/ov-bool.cc
+++ b/src/ov-bool.cc
@@ -98,20 +98,20 @@ octave_bool::do_index_op (const octave_v
 
       retval = tmp.do_index_op (idx, resize_ok);
     }
 
   return retval;
 }
 
 octave_value
-octave_bool::convert_to_str (void) const
+octave_bool::convert_to_str (bool) const
 {
   char s[2];
-  s[0] = (char) scalar;
+  s[0] = static_cast<char> (scalar);
   s[1] = '\0';
 
   return octave_value (s);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/src/ov-bool.h b/src/ov-bool.h
--- a/src/ov-bool.h
+++ b/src/ov-bool.h
@@ -97,17 +97,17 @@ public:
   ComplexMatrix complex_matrix_value (bool = false) const
     { return  ComplexMatrix (1, 1, Complex (scalar)); }
 
   bool bool_value (void) const { return scalar; }
 
   boolMatrix bool_matrix_value (void) const
     { return boolMatrix (1, 1, scalar); }
 
-  octave_value convert_to_str (void) const;
+  octave_value convert_to_str (bool pad = false) const;
 
 private:
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 
   DECLARE_OCTAVE_ALLOCATOR
 };
 
diff --git a/src/ov-cell.cc b/src/ov-cell.cc
--- a/src/ov-cell.cc
+++ b/src/ov-cell.cc
@@ -244,36 +244,75 @@ octave_cell::list_value (void) const
     }
   else
     error ("invalid conversion from cell array to list");
 
   return retval;
 }
 
 string_vector
-octave_cell::all_strings (void) const
+octave_cell::all_strings (bool pad) const
 {
+  string_vector retval;
+
   int nr = rows ();
   int nc = columns ();
 
-  string_vector retval (nr * nc);
+  int n_elts = 0;
+
+  int max_len = 0;
+
+  if (pad)
+    {
+      for (int j = 0; j < nc; j++)
+	{
+	  for (int i = 0; i < nr; i++)
+	    {
+	      string_vector s = matrix(i,j).all_strings ();
+
+	      if (error_state)
+		return retval;
+
+	      n_elts += s.length ();
+
+	      int s_max_len = s.max_length ();
+
+	      if (s_max_len > max_len)
+		max_len = s_max_len;
+	    }
+	}
+    }
+
+  retval.resize (n_elts);
 
   int k = 0;
 
   for (int j = 0; j < nc; j++)
     {
       for (int i = 0; i < nr; i++)
 	{
-	  retval[k++] = matrix(i,j).string_value ();
+	  string_vector s = matrix(i,j).all_strings ();
+
+	  int n = s.length ();
 
-	  if (error_state)
-	    return string_vector ();
+	  for (int ii = 0; ii < n; ii++)
+	    {
+	      std::string t = s[ii];
+	      int t_len = t.length ();
+
+	      if (pad && max_len > t_len)
+		t += std::string (max_len - t_len, ' ');
+
+	      retval[k++] = t;
+	    }
 	}
     }
 
+
+
   return retval;
 }
 
 void
 octave_cell::print (std::ostream& os, bool) const
 {
   print_raw (os);
 }
@@ -401,13 +440,37 @@ rows and columns, respectively.\n\
     default:
       print_usage ("cell");
       break;
     }
 
   return retval;
 }
 
+DEFUN (cellstr, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} cellstr (@var{string})\n\
+Create a new cell array object from the elements of the string\n\
+array @var{string}.\n\
+@end deftypefn")
+{
+  octave_value retval;
+
+  if (args.length () == 1)
+    {
+      string_vector s = args(0).all_strings ();
+
+      if (! error_state)
+	retval = Cell (s);
+      else
+	error ("cellstr: expecting argument to be a string");
+    }
+  else
+    print_usage ("cellstr");
+
+  return retval;
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/ov-cell.h b/src/ov-cell.h
--- a/src/ov-cell.h
+++ b/src/ov-cell.h
@@ -91,17 +91,20 @@ public:
   bool is_defined (void) const { return true; }
 
   bool is_cell (void) const { return true; }
 
   Cell cell_value (void) const { return matrix; }
 
   octave_value_list list_value (void) const;
 
-  string_vector all_strings (void) const;
+  octave_value convert_to_str (bool pad = false) const
+    { return all_strings (pad); }
+
+  string_vector all_strings (bool pad = false) const;
 
   void print (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   bool print_name_tag (std::ostream& os, const std::string& name) const;
 
 private:
diff --git a/src/ov-ch-mat.h b/src/ov-ch-mat.h
--- a/src/ov-ch-mat.h
+++ b/src/ov-ch-mat.h
@@ -96,17 +96,17 @@ public:
   Complex complex_value (bool = false) const;
 
   ComplexMatrix complex_matrix_value (bool = false) const
     { return ComplexMatrix (matrix); }
 
   charMatrix char_matrix_value (bool = false) const
     { return matrix; }
 
-  octave_value convert_to_str (void) const
+  octave_value convert_to_str (bool = false) const
     { return octave_value (matrix, true); }
 
 protected:
 
   DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
diff --git a/src/ov-range.cc b/src/ov-range.cc
--- a/src/ov-range.cc
+++ b/src/ov-range.cc
@@ -200,20 +200,20 @@ octave_range::complex_value (bool) const
     retval = range.base ();
   else
     gripe_invalid_conversion ("range", "complex scalar");
 
   return retval;
 }
 
 octave_value
-octave_range::convert_to_str (void) const
+octave_range::convert_to_str (bool pad) const
 {
   octave_value tmp (range.matrix_value ());
-  return tmp.convert_to_str ();
+  return tmp.convert_to_str (pad);
 }
 
 void
 octave_range::print (std::ostream& os, bool pr_as_read_syntax) const
 {
   print_raw (os, pr_as_read_syntax);
   newline (os);
 }
diff --git a/src/ov-range.h b/src/ov-range.h
--- a/src/ov-range.h
+++ b/src/ov-range.h
@@ -149,17 +149,17 @@ public:
 
   Complex complex_value (bool = false) const;
 
   ComplexMatrix complex_matrix_value (bool = false) const
     { return ComplexMatrix (range.matrix_value ()); }
 
   Range range_value (void) const { return range; }
 
-  octave_value convert_to_str (void) const;
+  octave_value convert_to_str (bool pad = false) const;
 
   void print (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   bool print_name_tag (std::ostream& os, const std::string& name) const;
 
 private:
diff --git a/src/ov-re-mat.cc b/src/ov-re-mat.cc
--- a/src/ov-re-mat.cc
+++ b/src/ov-re-mat.cc
@@ -107,17 +107,17 @@ octave_matrix::complex_value (bool) cons
     retval = matrix (0, 0);
   else
     gripe_invalid_conversion ("real matrix", "complex scalar");
 
   return retval;
 }
 
 octave_value
-octave_matrix::convert_to_str (void) const
+octave_matrix::convert_to_str (bool) const
 {
   octave_value retval;
 
   int nr = matrix.rows ();
   int nc = matrix.columns ();
 
   if (nr == 0 && nc == 0)
     {
diff --git a/src/ov-re-mat.h b/src/ov-re-mat.h
--- a/src/ov-re-mat.h
+++ b/src/ov-re-mat.h
@@ -97,17 +97,17 @@ public:
 
   ComplexMatrix complex_matrix_value (bool = false) const
     { return ComplexMatrix (matrix); }
 
   void increment (void) { matrix += 1.0; }
 
   void decrement (void) { matrix -= 1.0; }
 
-  octave_value convert_to_str (void) const;
+  octave_value convert_to_str (bool pad = false) const;
 
 private:
 
   DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
diff --git a/src/ov-scalar.cc b/src/ov-scalar.cc
--- a/src/ov-scalar.cc
+++ b/src/ov-scalar.cc
@@ -72,17 +72,17 @@ octave_scalar::do_index_op (const octave
 
       retval = tmp.do_index_op (idx, resize_ok);
     }
 
   return retval;
 }
 
 octave_value
-octave_scalar::convert_to_str (void) const
+octave_scalar::convert_to_str (bool) const
 {
   octave_value retval;
 
   if (xisnan (scalar))
     ::error ("invalid conversion from NaN to character");
   else
     {
       int ival = NINT (scalar);
diff --git a/src/ov-scalar.h b/src/ov-scalar.h
--- a/src/ov-scalar.h
+++ b/src/ov-scalar.h
@@ -89,17 +89,17 @@ public:
   Matrix matrix_value (bool = false) const
     { return Matrix (1, 1, scalar); }
 
   Complex complex_value (bool = false) const { return scalar; }
 
   ComplexMatrix complex_matrix_value (bool = false) const
     { return  ComplexMatrix (1, 1, Complex (scalar)); }
 
-  octave_value convert_to_str (void) const;
+  octave_value convert_to_str (bool pad = false) const;
 
   void increment (void) { ++scalar; }
 
   void decrement (void) { --scalar; }
 
 private:
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
diff --git a/src/ov-str-mat.cc b/src/ov-str-mat.cc
--- a/src/ov-str-mat.cc
+++ b/src/ov-str-mat.cc
@@ -164,17 +164,17 @@ octave_char_matrix_str::matrix_value (bo
     retval = Matrix (matrix);
   else
     gripe_invalid_conversion ("string", "real matrix");
 
   return retval;
 }
 
 string_vector
-octave_char_matrix_str::all_strings (void) const
+octave_char_matrix_str::all_strings (bool) const
 {
   int n = matrix.rows ();
 
   string_vector retval (n);
 
   for (int i = 0; i < n; i++)
     retval[i] = matrix.row_as_string (i, true);
 
diff --git a/src/ov-str-mat.h b/src/ov-str-mat.h
--- a/src/ov-str-mat.h
+++ b/src/ov-str-mat.h
@@ -95,17 +95,17 @@ public:
   bool is_matrix_type (void) const { return false; }
 
   bool is_numeric_type (void) const { return false; }
 
   bool valid_as_scalar_index (void) const;
 
   Matrix matrix_value (bool = false) const;
 
-  string_vector all_strings (void) const;
+  string_vector all_strings (bool pad = false) const;
 
   std::string string_value (void) const;
 
   bool print_as_scalar (void) const { return (rows () <= 1); }
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
 private:
diff --git a/src/ov-struct.cc b/src/ov-struct.cc
--- a/src/ov-struct.cc
+++ b/src/ov-struct.cc
@@ -26,17 +26,19 @@ Software Foundation, 59 Temple Place - S
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <iostream>
 
 #include "Cell.h"
+#include "defun.h"
 #include "error.h"
+#include "gripes.h"
 #include "oct-lvalue.h"
 #include "ov-list.h"
 #include "ov-struct.h"
 #include "unwind-prot.h"
 #include "variables.h"
 
 DEFINE_OCTAVE_ALLOCATOR(octave_struct);
 
@@ -462,13 +464,93 @@ octave_struct::print_name_tag (std::ostr
       os << name << " =";
       newline (os);
       retval = true;
     }
 
   return retval;
 }
 
+DEFUN (isstruct, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} isstruct (@var{expr})\n\
+Return 1 if the value of the expression @var{expr} is a structure.\n\
+@end deftypefn")
+{
+  octave_value retval;
+
+  if (args.length () == 1)
+    retval = args(0).is_map ();
+  else
+    print_usage ("isstruct");
+
+  return retval;
+}
+
+DEFUN (fieldnames, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} fieldnames (@var{struct})\n\
+Return a cell array of strings naming the elements of the structure\n\
+@var{struct}.  It is an error to call @code{fieldnames} with an\n\
+argument that is not a structure.\n\
+@end deftypefn")
+{
+  octave_value retval;
+
+  int nargin = args.length ();
+
+  if (nargin == 1)
+    {
+      if (args(0).is_map ())
+	{
+	  Octave_map m = args(0).map_value ();
+	  retval = Cell (m.keys ());
+	}
+      else
+	gripe_wrong_type_arg ("fieldnames", args(0));
+    }
+  else
+    print_usage ("fieldnames");
+
+  return retval;
+}
+
+DEFUN (isfield, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} isfield (@var{expr}, @var{name})\n\
+Return true if the expression @var{expr} is a structure and it includes an\n\
+element named @var{name}.  The first argument must be a structure and\n\
+the second must be a string.\n\
+@end deftypefn")
+{
+  octave_value retval;
+
+  int nargin = args.length ();
+
+  if (nargin == 2)
+    {
+      retval = false;
+
+      // XXX FIXME XXX -- should this work for all types that can do
+      // structure reference operations?
+
+      if (args(0).is_map () && args(1).is_string ())
+	{
+	  std::string key = args(1).string_value ();
+
+	  Octave_map m = args(0).map_value ();
+
+	  retval = m.contains (key) != 0;
+	}
+      else
+	print_usage ("isfield");
+    }
+  else
+    print_usage ("isfield");
+
+  return retval;
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -473,18 +473,18 @@ public:
     { return rep->complex_value (frc_str_conv); }
 
   virtual ComplexMatrix complex_matrix_value (bool frc_str_conv = false) const
     { return rep->complex_matrix_value (frc_str_conv); }
 
   virtual charMatrix char_matrix_value (bool frc_str_conv = false) const
     { return rep->char_matrix_value (frc_str_conv); }
 
-  virtual string_vector all_strings (void) const
-    { return rep->all_strings (); }
+  virtual string_vector all_strings (bool pad = false) const
+    { return rep->all_strings (pad); }
 
   virtual std::string string_value (void) const
     { return rep->string_value (); }
 
   virtual Range range_value (void) const
     { return rep->range_value (); }
 
   virtual Octave_map map_value (void) const;
@@ -531,18 +531,18 @@ public:
 
   Array<Complex> complex_vector_value (bool frc_str_conv = false,
 				       bool frc_vec_conv = false) const;
 
   // Conversions.  These should probably be private.  If a user of this
   // class wants a certain kind of constant, he should simply ask for
   // it, and we should convert it if possible.
 
-  virtual octave_value convert_to_str (void) const
-    { return rep->convert_to_str (); }
+  virtual octave_value convert_to_str (bool pad = false) const
+    { return rep->convert_to_str (pad); }
 
   virtual void convert_to_row_or_column_vector (void)
     { rep->convert_to_row_or_column_vector (); }
 
   virtual void print (std::ostream& os, bool pr_as_read_syntax = false) const
     { rep->print (os, pr_as_read_syntax); }
 
   virtual void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const
diff --git a/src/strfns.cc b/src/strfns.cc
--- a/src/strfns.cc
+++ b/src/strfns.cc
@@ -30,16 +30,103 @@ Software Foundation, 59 Temple Place - S
 
 #include "defun.h"
 #include "error.h"
 #include "gripes.h"
 #include "ov.h"
 #include "oct-obj.h"
 #include "utils.h"
 
+DEFUN (char, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} char (@var{x})\n\
+@deftypefnx {Built-in Function} {} char (@var{cell_array})\n\
+@deftypefnx {Built-in Function} {} char (@var{s1}, @var{s2}, @dots{})\n\
+Create a string array from a numeric matrix, cell array, or list of\n\
+\n\
+If the argument is a numeric matrix, each element of the matrix is\n\
+converted to the corresponding ASCII character.  For example,\n\
+\n\
+@example\n\
+@group\n\
+setstr ([97, 98, 99])\n\
+     @result{} \"abc\"\n\
+@end group\n\
+@end example\n\
+\n\
+If the argument is a cell array of strings, the result is a string array\n\
+with each element corresponding to one element of the cell array.\n\
+\n\
+For multiple string arguments, the result is a string array with each\n\
+element corresponding to the arguments.\n\
+\n\
+The returned values are padded with blanks as needed to make each row\n\
+of the string array have the same length.\n\
+@end deftypefn")
+{
+  octave_value retval;
+
+  int nargin = args.length ();
+
+  if (nargin == 1)
+    retval = args(0).convert_to_str (true);
+  else if (nargin > 1)
+    {
+      int n_elts = 0;
+
+      int max_len = 0;
+
+      for (int i = 0; i < nargin; i++)
+	{
+	  string_vector s = args(i).all_strings ();
+
+	  if (error_state)
+	    {
+	      error ("char: expecting arguments to be strings");
+	      return retval;
+	    }
+
+	  n_elts += s.length ();
+
+	  int s_max_len = s.max_length ();
+
+	  if (s_max_len > max_len)
+	    max_len = s_max_len;
+	}
+
+      string_vector result (n_elts);
+
+      int k = 0;
+
+      for (int i = 0; i < nargin; i++)
+	{
+	  string_vector s = args(i).all_strings ();
+
+	  int n = s.length ();
+
+	  for (int j = 0; j < n; j++)
+	    {
+	      std::string t = s[j];
+	      int t_len = t.length ();
+
+	      if (max_len > t_len)
+		t += std::string (max_len - t_len, ' ');
+
+	      result[k++] = t;
+	    }
+	}
+
+      retval = result;
+    }
+  else
+    print_usage ("char");
+
+  return retval;
+}
+
 DEFUN (isstr, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} isstr (@var{a})\n\
 Return 1 if @var{a} is a string.  Otherwise, return 0.\n\
 @end deftypefn")
 {
   octave_value retval;
 
@@ -48,40 +135,13 @@ Return 1 if @var{a} is a string.  Otherw
   if (nargin == 1 && args(0).is_defined ())
     retval = args(0).is_string ();
   else
     print_usage ("isstr");
 
   return retval;
 }
 
-DEFUN (setstr, args, ,
-  "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} {} setstr (@var{x})\n\
-Convert a matrix to a string.  Each element of the matrix is converted\n\
-to the corresponding ASCII \n\
-character.  For example,\n\
-\n\
-@example\n\
-@group\n\
-setstr ([97, 98, 99])\n\
-     @result{} \"abc\"\n\
-@end group\n\
-@end example\n\
-@end deftypefn")
-{
-  octave_value retval;
-
-  int nargin = args.length ();
-
-  if (nargin == 1 && args(0).is_defined ())
-    retval = args(0).convert_to_str ();
-  else
-    print_usage ("setstr");
-
-  return retval;
-}
-
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
