# HG changeset patch
# User jwe
# Date 1200633123 0
#      Fri Jan 18 05:12:03 2008 +0000
# Node ID 26146201e68ef6ddd0a6311e6404c227f215ef28
# Parent  0114d8cd1587d2f2cbb23b4a619a2776021ca258
[project @ 2008-01-18 05:12:03 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2008-01-18  Juhani Saastamoinen  <juhani@cs.joensuu.fi>
+
+	* genprops.awk: Avoid using "default" as a variable name.
+
 2008-01-17  Michael Goffioul  <michael.goffioul@gmail.com>
 
 	* graphics.h.in (data_property::get_data_limits): Reset min/max values.
 
 2008-01-17  David Bateman  <dbateman@free.fr>
 
 	* ov-fcn-inline.cc: Add tests for Finline.
 
diff --git a/src/genprops.awk b/src/genprops.awk
--- a/src/genprops.awk
+++ b/src/genprops.awk
@@ -313,17 +313,17 @@ function emit_source ()
 
     ## constructor
 
     printf ("%s::properties::properties (const graphics_handle& mh, const graphics_handle& p)\n", class_name) >> filename;
     printf ("  : base_properties (go_name, mh, p),\n") >> filename;
 
     for (i = 1; i <= idx; i++)
     {
-      printf ("    %s (\"%s\", mh, %s)", name[i], name[i], default[i]) >> filename;
+      printf ("    %s (\"%s\", mh, %s)", name[i], name[i], defval[i]) >> filename;
       if (i < idx)
         printf (",") >> filename;
       printf ("\n") >> filename;
     }
 
     printf ("{\n") >> filename;
 
     for (i = 1; i <= idx; i++)
@@ -385,23 +385,23 @@ function emit_source ()
     ## factory defaults method
 
     printf ("property_list::pval_map_type\n%s::properties::factory_defaults (void)\n{\n",
             class_name) >> filename;
     printf ("  property_list::pval_map_type m;\n\n") >> filename;
 
     for (i = 1; i <= idx; i++)
     {
-      defval = default[i];
+      dval = defval[i];
       if (type[i] == "radio_property" || type[i] == "color_property")
-        defval = gensub (/^.*\{(.*)\}.*$/, "\"\\1\"", "g", defval);
-      if (! defval)
-        defval = "octave_value ()";
+        dval = gensub (/^.*\{(.*)\}.*$/, "\"\\1\"", "g", dval);
+      if (! dval)
+        dval = "octave_value ()";
       if (name[i] !~ /__.*/)
-        printf ("  m[\"%s\"] = %s%s;\n", name[i], defval,
+        printf ("  m[\"%s\"] = %s%s;\n", name[i], dval,
                 (type[i] == "handle_property" ? ".as_octave_value ()" : "")) >> filename;
     }
 
     printf ("\n  return m;\n}\n\n") >> filename;
 
     ## go_name static field
 
     printf ("std::string %s::properties::go_name (\"%s\");\n\n",
@@ -457,17 +457,17 @@ BEGIN {
     type[idx] = $(field++);
     name[idx] = $(field++);
 
     limits[idx] = 0;
     mode[idx] = 0;
 	hidden[idx] = 0;
     emit_get[idx] = "definition";
     emit_set[idx] = "definition";
-    default[idx] = "";
+    defval[idx] = "";
 ##    if (type[idx] == "octave_value")
 ##      emit_ov_set[idx] = "";
 ##    else
 ##      emit_ov_set[idx] = "definition";
 
     if (NF >= field)
     {
       if ($field != ",")
@@ -528,16 +528,16 @@ BEGIN {
 ##        }
       }
 
       if (NF > field && $field == ",")
       {
         field++;
 
         for (i = field; i <= NF; i++)
-          default[idx] = (default[idx] (i > field ? " " : "") $i);
+          defval[idx] = (defval[idx] (i > field ? " " : "") $i);
       }
     }
 
   }
   else
     print $0;
 }
