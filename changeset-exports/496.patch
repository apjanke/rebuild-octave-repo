# HG changeset patch
# User jwe
# Date 773506946 0
#      Wed Jul 06 15:02:26 1994 +0000
# Node ID e7c5b23b34d3fca8e793cf3624d62165c3537e3c
# Parent  36e25526fa9f6ac261e043fefa2cedf6647b5b5a
[project @ 1994-07-06 15:02:26 by jwe]

diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -101,27 +101,35 @@ int past_plot_range = 0;
 int in_plot_range = 0;
 
 // Nonzero means we're looking at the using part of a plot command.
 int in_plot_using = 0;
 
 // Nonzero means we're looking at the style part of a plot command.
 int in_plot_style = 0;
 
-// Check to see that end statements are properly matched.
-static int check_end (token *tok, token::end_tok_type expected);
+// Forward declarations for some functions defined at the bottom of
+// the file.
+
+// Generic error messages.
+static void yyerror (char *s);
 
 // Error mesages for mismatched end statements.
 static void end_error (char *type, token::end_tok_type ettype, int l, int c);
 
-// Generic error messages.
-static void yyerror (char *s);
+// Check to see that end statements are properly matched.
+static int check_end (token *tok, token::end_tok_type expected);
 
-static tree *maybe_convert_to_ans_assign (tree *expr);
-static void maybe_warn_assign_as_truth_value (tree *expr);
+// Try to figure out early if an expression should become an
+// assignment to the builtin variable ans.
+static tree_expression *maybe_convert_to_ans_assign (tree_expression *expr);
+
+// Maybe print a warning if an assignment expression is used as the
+// test in a logical expression.
+static void maybe_warn_assign_as_truth_value (tree_expression *expr);
 
 #define ABORT_PARSE \
   do \
     { \
       global_command = NULL_TREE; \
       reset_parser (); \
       yyerrok; \
       if (interactive) \
@@ -138,16 +146,17 @@ static void maybe_warn_assign_as_truth_v
  */
 %union
 {
 // The type of the basic tokens returned by the lexer.
   token *tok_val;
 
 // Types for the nonterminals we generate.
   tree *tree_type;
+  tree_expression *tree_expression_type;
   tree_constant *tree_constant_type;
   tree_matrix *tree_matrix_type;
   tree_identifier *tree_identifier_type;
   tree_function *tree_function_type;
   tree_index_expression *tree_index_expression_type;
   tree_colon_expression *tree_colon_expression_type;
   tree_argument_list *tree_argument_list_type;
   tree_parameter_list *tree_parameter_list_type;
@@ -181,18 +190,18 @@ static void maybe_warn_assign_as_truth_v
 %token FCN SCREW_TWO
 %token GLOBAL
 %token ELLIPSIS
 %token END_OF_INPUT
 %token USING TITLE WITH COLON OPEN_BRACE CLOSE_BRACE
 
 // Nonterminals we construct.
 %type <tree_type> input command 
-%type <tree_type> ans_expression expression simple_expr simple_expr1
-%type <tree_type> title
+%type <tree_expression_type> expression simple_expr simple_expr1
+%type <tree_expression_type> ans_expression title
 %type <tree_matrix_type> matrix
 %type <tree_identifier_type> identifier
 %type <tree_function_type> func_def func_def1 func_def2 func_def3
 %type <tree_index_expression_type> variable word_list_cmd
 %type <tree_colon_expression_type> colon_expr
 %type <tree_argument_list_type> arg_list arg_list1 word_list word_list1
 %type <tree_parameter_list_type> param_list param_list1 func_def1a 
 %type <tree_command_type> statement
@@ -322,16 +331,17 @@ comma_nl_sep	: ','
 semi_sep	: ';'
 		| semi_sep sep
 		;
 
 opt_list	: // empty
 		  { $$ = new tree_command_list (); }
 		| list
 		  { $$ = $1; }
+		;
 
 list		: list1
 		  { $$ = $1->reverse (); }
 		| list1 comma_nl_sep
 		  { $$ = $1->reverse (); }
 		| list1 semi_sep
 		  {
 		    $1->set_print_flag (0);
@@ -470,23 +480,23 @@ plot_options	: using
 		| style using title
 		  { $$ = new tree_subplot_list ($2, $3, $1); }
 		| style title using
 		  { $$ = new tree_subplot_list ($3, $2, $1); }
 		;
 
 using		: using1
 		  {
+		    in_plot_using = 0;
 		    $$ = $1;
-		    in_plot_using = 0;
 		  }
 		| using1 expression
 		  {
+		    in_plot_using = 0;
 		    $$ = $1->set_format ($2);
-		    in_plot_using = 0;
 		  }
 		;
 
 using1		: USING expression
 		  {
 		    tree_subplot_using *tmp = new tree_subplot_using ();
 		    $$ = tmp->add_qualifier ($2);
 		  }
@@ -791,24 +801,24 @@ simple_expr	: simple_expr1
 		;
 
 simple_expr1	: NUM
 		  { $$ = new tree_constant ($1->number ()); }
 		| IMAG_NUM
 		  { $$ = new tree_constant (Complex (0.0, $1->number ())); }
 		| TEXT
 		  { $$ = new tree_constant ($1->string ()); }
-		| word_list_cmd
-		  { $$ = $1; }
 		| '(' expression ')'
 		  {
 		    if ($2->is_assignment_expression ())
 		      ((tree_assignment_expression *) $2) -> in_parens++;
 		    $$ = $2;
 		  }
+		| word_list_cmd
+		  { $$ = $1; }
 		| variable
 		  { $$ = $1; }
 		| matrix
 		  { $$ = $1; }
 		| '[' ']'
 		  {
 		    mlnm.pop ();
 		    $$ = new tree_constant (Matrix ());
@@ -1174,16 +1184,44 @@ yyerror (char *s)
         fprintf (stderr, ":\n\n  %s\n\n", line);
       else
         fprintf (stderr, ":\n\n  %s\n  %*s\n\n", line, err_col, "^");
     }
   else
     fprintf (stderr, "\n\n");
 }
 
+static void
+end_error (char *type, token::end_tok_type ettype, int l, int c)
+{
+  static char *fmt = "%s command matched by `%s' near line %d column %d";
+
+  switch (ettype)
+    {
+    case token::simple_end:
+      error (fmt, type, "end", l, c);
+      break;
+    case token::for_end:
+      error (fmt, type, "endfor", l, c);
+      break;
+    case token::function_end:
+      error (fmt, type, "endfunction", l, c);
+      break;
+    case token::if_end:
+      error (fmt, type, "endif", l, c);
+      break;
+    case token::while_end:
+      error (fmt, type, "endwhile", l, c); 
+      break;
+    default:
+      panic_impossible ();
+      break;
+    }
+}
+
 static int
 check_end (token *tok, token::end_tok_type expected)
 {
   token::end_tok_type ettype = tok->ettype ();
   if (ettype != expected && ettype != token::simple_end)
     {
       yyerror ("parse error");
 
@@ -1209,59 +1247,31 @@ check_end (token *tok, token::end_tok_ty
 	  break;
 	}
       return 1;
     }
   else
     return 0;
 }
 
-static void
-end_error (char *type, token::end_tok_type ettype, int l, int c)
-{
-  static char *fmt = "%s command matched by `%s' near line %d column %d";
-
-  switch (ettype)
-    {
-    case token::simple_end:
-      error (fmt, type, "end", l, c);
-      break;
-    case token::for_end:
-      error (fmt, type, "endfor", l, c);
-      break;
-    case token::function_end:
-      error (fmt, type, "endfunction", l, c);
-      break;
-    case token::if_end:
-      error (fmt, type, "endif", l, c);
-      break;
-    case token::while_end:
-      error (fmt, type, "endwhile", l, c); 
-      break;
-    default:
-      panic_impossible ();
-      break;
-    }
-}
-
 /*
  * Need to make sure that the expression isn't already an identifier
  * that has a name, or an assignment expression.
  *
  * Note that an expression can't be just an identifier anymore -- it
  * must at least be an index expression (see the definition of the
  * non-terminal `variable' above).
  *
  * XXX FIXME XXX.  This isn't quite sufficient.  For example, try the
  * command `x = 4, x' for `x' previously undefined.
  *
  * XXX FIXME XXX -- we should probably delay doing this until eval-time.
  */
-tree *
-maybe_convert_to_ans_assign (tree *expr)
+static tree_expression *
+maybe_convert_to_ans_assign (tree_expression *expr)
 {
   if (expr->is_index_expression ())
     {
       expr->mark_for_possible_ans_assign ();
       return expr;
     }
   else if (expr->is_assignment_expression ()
 	   || expr->is_prefix_expression ())
@@ -1275,18 +1285,18 @@ maybe_convert_to_ans_assign (tree *expr)
       assert (sr != (symbol_record *) NULL);
       
       tree_identifier *ans = new tree_identifier (sr);
 
       return new tree_simple_assignment_expression (ans, expr);
     }
 }
 
-void
-maybe_warn_assign_as_truth_value (tree *expr)
+static void
+maybe_warn_assign_as_truth_value (tree_expression *expr)
 {
   if (user_pref.warn_assign_as_truth_value
       && expr->is_assignment_expression ()
       && ((tree_assignment_expression *) expr) -> in_parens < 2)
     {
       warning ("suggest parenthesis around assignment used as truth value");
     }
 }
