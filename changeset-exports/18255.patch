# HG changeset patch
# User Arun Giridhar <arungiridhar@gmail.com>
# Date 1387498232 18000
#      Thu Dec 19 19:10:32 2013 -0500
# Node ID f58a6cd3f9098a07a9b9735d9cc78a3ecedc1247
# Parent  79dc730b92ae14d62653af857ec71bb3543a6e3d
sqp.m: Fix return values in sqp (bug #32008).

sqp.m: Create new return value 104 for the situation where the algorithm has
not converged but is no longer making progress (stepsize is too small).

diff --git a/scripts/optimization/sqp.m b/scripts/optimization/sqp.m
--- a/scripts/optimization/sqp.m
+++ b/scripts/optimization/sqp.m
@@ -1,9 +1,10 @@
 ## Copyright (C) 2005-2013 John W. Eaton
+## Copyright (C) 2013 Arun Giridhar
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 3 of the License, or (at
 ## your option) any later version.
 ##
@@ -123,31 +124,34 @@
 ##
 ## The eighth argument @var{tol} specifies the tolerance for the
 ## stopping criteria.  The default value is @code{sqrt (eps)}.
 ##
 ## The value returned in @var{info} may be one of the following:
 ##
 ## @table @asis
 ## @item 101
-## The algorithm terminated normally.
-## Either all constraints meet the requested tolerance, or the stepsize,
+## The algorithm terminated normally. 
+## All constraints meet the specified tolerance.
+##
+## @item 102
+## The BFGS update failed.
+##
+## @item 103
+## The maximum number of iterations was reached.
+##
+## @item 104
+## The stepsize has become too small, i.e., 
 ## @tex
 ## $\Delta x,$
 ## @end tex
 ## @ifnottex
 ## delta @var{x},
 ## @end ifnottex
 ## is less than @code{@var{tol} * norm (x)}.
-##
-## @item 102
-## The BFGS update failed.
-##
-## @item 103
-## The maximum number of iterations was reached.
 ## @end table
 ##
 ## An example of calling @code{sqp}:
 ##
 ## @example
 ## function r = g (x)
 ##   r = [ sumsq(x)-10;
 ##         x(2)*x(3)-5*x(4)*x(5);
@@ -389,32 +393,34 @@ function [x, obj, info, iter, nf, lambda
     con = [ce; ci];
 
     t0 = norm (c - A' * lambda);
     t1 = norm (ce);
     t2 = all (ci >= 0);
     t3 = all (lambda_i >= 0);
     t4 = norm (lambda .* con);
 
+    ## Normal convergence.  All constraints are satisfied
+    ## and objective has converged.
     if (t2 && t3 && max ([t0; t1; t4]) < tol)
       info = 101;
       break;
     endif
 
     ## Compute search direction p by solving QP.
     g = -ce;
     d = -ci;
 
     [p, obj_qp, INFO, lambda] = qp (x, B, c, F, g, [], [], d, C,
                                     Inf (size (d)));
 
     info = INFO.info;
 
-    ## FIXME -- check QP solution and attempt to recover if it has
-    ## failed.  For now, just warn about possible problems.
+    ## FIXME: check QP solution and attempt to recover if it has failed.
+    ##        For now, just warn about possible problems.
     
     id = "Octave:SQP-QP-subproblem";
     switch (info)
       case 2
         warning (id, "sqp: QP subproblem is non-convex and unbounded");
       case 3
         warning (id, "sqp: QP subproblem failed to converge in %d iterations",
                  INFO.solveiter);
@@ -448,18 +454,19 @@ function [x, obj, info, iter, nf, lambda
 
     if (! isempty (A))
       t = ((A_new - A)'*lambda);
       y -= t;
     endif
 
     delx = x_new - x;
 
+    ## Check if step size has become too small (indicates lack of progress).
     if (norm (delx) < tol * norm (x))
-      info = 101;
+      info = 104;
       break;
     endif
 
     if (have_hess)
 
       B = feval (obj_hess, x);
 
     else
@@ -478,16 +485,18 @@ function [x, obj, info, iter, nf, lambda
       else
         theta = 1;
       endif
 
       r = theta*y + (1-theta)*B*delx;
 
       d2 = delxt*r;
 
+      ## Check if the next BFGS update will work properly.
+      ## If d1 or d2 vanish, the BFGS update will fail.
       if (d1 == 0 || d2 == 0)
         info = 102;
         break;
       endif
 
       B = B - B*delx*delxt*B/d1 + r*r'/d2;
 
     endif
@@ -505,16 +514,17 @@ function [x, obj, info, iter, nf, lambda
     C = C_new;
 
     A = A_new;
 
     # report (iter, qp_iter, alpha, __sqp_nfun__, obj);
 
   endwhile
 
+  ## Check if we've spent too many iterations without converging.
   if (iter >= iter_max)
     info = 103;
   endif
 
   nf = globals.nfun;
 
 endfunction
 
