# HG changeset patch
# User jwe
# Date 1142481549 0
#      Thu Mar 16 03:59:09 2006 +0000
# Node ID c5f6623514c4780410752e15f38be95cb635f80e
# Parent  86adc85cc471c98da332632355aa3e9c0830691c
[project @ 2006-03-16 03:59:09 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,12 @@
+2006-03-15  William Poetra Yoga Hadisoeseno  <williampoetra@gmail.com>
+
+	* oct-time.cc (octave_strptime::init): Return useful character count.
+
 2006-03-08  David Bateman  <dbateman@free.fr>
 
 	* SparseCmplxQR.cc: Updates for new upstream CXSPARSE release. Fix for
 	g++ 4.x stl_vector.h issue with C99 double _Complex type.
 	* SparseCmplxQR.h:  Updates for new upstream CXSPARSE release.
 	* SparseQR.cc: ditto.
 	* SparseQR.h: ditto.
 	* oct-sparse.h: ditto.
diff --git a/liboctave/oct-time.cc b/liboctave/oct-time.cc
--- a/liboctave/oct-time.cc
+++ b/liboctave/oct-time.cc
@@ -342,17 +342,20 @@ octave_strptime::init (const std::string
   char *ps = strsave ("");
   t.tm_zone = ps;
 #endif
 
   char *p = strsave (str.c_str ());
 
   char *q = oct_strptime (p, fmt.c_str (), &t);
 
-  nchars = p - q;
+  if (q)
+    nchars = q - p + 1;
+  else
+    nchars = 0;
 
   delete [] p;
 
   octave_base_tm::init (&t);
 
 #if defined (HAVE_STRUCT_TM_TM_ZONE)
   delete ps;
 #endif
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,11 +1,13 @@
 2006-03-15  William Poetra Yoga Hadisoeseno  <williampoetra@gmail.com>
 
-	* src/strfns.cc: Fixed help message.
+	* DLD-FUNCTIONS/time.cc (Fstrptime, Fstrftime): Fix docstring.
+
+	* strfns.cc (Fstrcmp): Fixed docstring.
 
 2006-03-15  John W. Eaton  <jwe@octave.org>
 
 	* pager.cc (Fterminal_size): New function.
 
 	* help.cc (help_from_info): Simplify.
 	(try_info): Use feval to call doc instead of executing info program.
 	(additional_help_message): Point users to doc instead of help -i.
diff --git a/src/DLD-FUNCTIONS/time.cc b/src/DLD-FUNCTIONS/time.cc
--- a/src/DLD-FUNCTIONS/time.cc
+++ b/src/DLD-FUNCTIONS/time.cc
@@ -212,18 +212,19 @@ mktime (localtime (time ())\n\
   else
     print_usage ("mktime");
 
   return retval;
 }
 
 DEFUN_DLD (strftime, args, ,
   "-*- texinfo -*-\n\
-@deftypefn {Loadable Function} {} strftime (@var{tm_struct})\n\
-Format a time structure in a flexible way using @samp{%} substitutions\n\
+@deftypefn {Loadable Function} {} strftime (@var{fmt}, @var{tm_struct})\n\
+Format the time structure @var{tm_struct} in a flexible way using the\n\
+format string @var{fmt} that contains @samp{%} substitutions\n\
 similar to those in @code{printf}.  Except where noted, substituted\n\
 fields have a fixed size; numeric fields are padded if necessary.\n\
 Padding is with zeros by default; for fields that display a single\n\
 number, padding can be changed or inhibited by following the @samp{%}\n\
 with one of the modifiers described below.  Unknown field specifiers are\n\
 copied as normal characters.  All other characters are copied to the\n\
 output without change.  For example,\n\
 \n\
@@ -359,16 +360,17 @@ Week number of year with Monday as first
 Locale's date representation (mm/dd/yy).\n\
 \n\
 @item %y\n\
 Last two digits of year (00-99).\n\
 \n\
 @item %Y\n\
 Year (1970-).\n\
 @end table\n\
+@seealso{strptime, localtime, time}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 2)
     {
       std::string fmt = args(0).string_value ();
 
@@ -395,18 +397,23 @@ Year (1970-).\n\
     print_usage ("strftime");
 
   return retval;
 }
 
 DEFUN_DLD (strptime, args, ,
  "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {[@var{tm_struct}, @var{nchars}] =} strptime (@var{str}, @var{fmt})\n\
-Convert the string @var{str} to a time structure under the control of\n\
-the format @var{fmt}.\n\
+Convert the string @var{str} to the time structure @var{tm_struct} under\n\
+the control of the format string @var{fmt}.\n\
+\n\
+If @var{fmt} fails to match, @var{nchars} is 0; otherwise it is set to the\n\
+position of last matched character plus 1. Always check for this unless\n\
+you're absolutely sure the date string will be parsed correctly.\n\
+@seealso{strftime, localtime, time}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   if (args.length () == 2)
     {
       std::string str = args(0).string_value ();
 
