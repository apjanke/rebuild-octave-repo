# HG changeset patch
# User jwe
# Date 949999805 0
#      Tue Feb 08 08:50:05 2000 +0000
# Node ID 48834d424048d976b65a4a3e45c22945ef95e254
# Parent  b11f9c33558f3119cca3b89b8a508a93ed632a7f
[project @ 2000-02-08 08:50:03 by jwe]

diff --git a/liboctave/CColVector.cc b/liboctave/CColVector.cc
--- a/liboctave/CColVector.cc
+++ b/liboctave/CColVector.cc
@@ -309,170 +309,16 @@ operator * (const ComplexMatrix& m, cons
 	    (*current_liboctave_error_handler)
 	      ("unrecoverable error in zgemv");
 	}
     }
 
   return retval;
 }
 
-// column vector by column vector -> column vector operations
-
-ComplexColumnVector
-operator + (const ComplexColumnVector& v, const ColumnVector& a)
-{
-  int len = v.length ();
-
-  int a_len = a.length ();
-
-  if (len != a_len)
-    {
-      gripe_nonconformant ("operator +", len, a_len);
-      return ComplexColumnVector ();
-    }
-
-  if (len == 0)
-    return ComplexColumnVector (0);
-
-  return ComplexColumnVector (add (v.data (), a.data (), len), len);
-}
-
-ComplexColumnVector
-operator - (const ComplexColumnVector& v, const ColumnVector& a)
-{
-  int len = v.length ();
-
-  int a_len = a.length ();
-
-  if (len != a_len)
-    {
-      gripe_nonconformant ("operator -", len, a_len);
-      return ComplexColumnVector ();
-    }
-
-  if (len == 0)
-    return ComplexColumnVector (0);
-
-  return ComplexColumnVector (subtract (v.data (), a.data (), len), len);
-}
-
-ComplexColumnVector
-operator + (const ColumnVector& v, const ComplexColumnVector& a)
-{
-  int len = v.length ();
-
-  int a_len = a.length ();
-
-  if (len != a_len)
-    {
-      gripe_nonconformant ("operator +", len, a_len);
-      return ComplexColumnVector ();
-    }
-
-  if (len == 0)
-    return ComplexColumnVector (0);
-
-  return ComplexColumnVector (add (v.data (), a.data (), len), len);
-}
-
-ComplexColumnVector
-operator - (const ColumnVector& v, const ComplexColumnVector& a)
-{
-  int len = v.length ();
-
-  int a_len = a.length ();
-
-  if (len != a_len)
-    {
-      gripe_nonconformant ("operator -", len, a_len);
-      return ComplexColumnVector ();
-    }
-
-  if (len == 0)
-    return ComplexColumnVector (0);
-
-  return ComplexColumnVector (subtract (v.data (), a.data (), len), len);
-}
-
-ComplexColumnVector
-product (const ComplexColumnVector& v, const ColumnVector& a)
-{
-  int len = v.length ();
-
-  int a_len = a.length ();
-
-  if (len != a_len)
-    {
-      gripe_nonconformant ("product", len, a_len);
-      return ComplexColumnVector ();
-    }
-
-  if (len == 0)
-    return ComplexColumnVector (0);
-
-  return ComplexColumnVector (multiply (v.data (), a.data (), len), len);
-}
-
-ComplexColumnVector
-quotient (const ComplexColumnVector& v, const ColumnVector& a)
-{
-  int len = v.length ();
-
-  int a_len = a.length ();
-
-  if (len != a_len)
-    {
-      gripe_nonconformant ("quotient", len, a_len);
-      return ComplexColumnVector ();
-    }
-
-  if (len == 0)
-    return ComplexColumnVector (0);
-
-  return ComplexColumnVector (divide (v.data (), a.data (), len), len);
-}
-
-ComplexColumnVector
-product (const ColumnVector& v, const ComplexColumnVector& a)
-{
-  int len = v.length ();
-
-  int a_len = a.length ();
-
-  if (len != a_len)
-    {
-      gripe_nonconformant ("product", len, a_len);
-      return ComplexColumnVector ();
-    }
-
-  if (len == 0)
-    return ComplexColumnVector (0);
-
-  return ComplexColumnVector (multiply (v.data (), a.data (), len), len);
-}
-
-ComplexColumnVector
-quotient (const ColumnVector& v, const ComplexColumnVector& a)
-{
-  int len = v.length ();
-
-  int a_len = a.length ();
-
-  if (len != a_len)
-    {
-      gripe_nonconformant ("quotient", len, a_len);
-      return ComplexColumnVector ();
-    }
-
-  if (len == 0)
-    return ComplexColumnVector (0);
-
-  return ComplexColumnVector (divide (v.data (), a.data (), len), len);
-}
-
 // matrix by column vector -> column vector operations
 
 ComplexColumnVector
 operator * (const Matrix& m, const ComplexColumnVector& a)
 {
   ComplexMatrix tmp (m);
   return tmp * a;
 }
diff --git a/liboctave/CColVector.h b/liboctave/CColVector.h
--- a/liboctave/CColVector.h
+++ b/liboctave/CColVector.h
@@ -91,38 +91,16 @@ public:
   // matrix by column vector -> column vector operations
 
   friend ComplexColumnVector operator * (const ComplexMatrix& a,
 					 const ColumnVector& b);
 
   friend ComplexColumnVector operator * (const ComplexMatrix& a,
 					 const ComplexColumnVector& b);
 
-  // column vector by column vector -> column vector operations
-
-  friend ComplexColumnVector operator + (const ComplexColumnVector& a,
-					 const ColumnVector& b);
-  friend ComplexColumnVector operator - (const ComplexColumnVector& a,
-					 const ColumnVector& b);
-
-  friend ComplexColumnVector operator + (const ColumnVector& a,
-					 const ComplexColumnVector& b);
-  friend ComplexColumnVector operator - (const ColumnVector& a,
-					 const ComplexColumnVector& b); 
-
-  friend ComplexColumnVector product (const ComplexColumnVector& a,
-				      const ColumnVector& b);
-  friend ComplexColumnVector quotient (const ComplexColumnVector& a,
-				       const ColumnVector& b);
-
-  friend ComplexColumnVector product (const ColumnVector& a,
-				      const ComplexColumnVector& b); 
-  friend ComplexColumnVector quotient (const ColumnVector& a,
-				       const ComplexColumnVector& b); 
-
   // matrix by column vector -> column vector operations
 
   friend ComplexColumnVector operator * (const Matrix& a,
 					 const ComplexColumnVector& b);
 
   // diagonal matrix by column vector -> column vector operations
 
   friend ComplexColumnVector operator * (const DiagMatrix& a,
diff --git a/liboctave/CRowVector.cc b/liboctave/CRowVector.cc
--- a/liboctave/CRowVector.cc
+++ b/liboctave/CRowVector.cc
@@ -314,170 +314,16 @@ operator * (const ComplexRowVector& v, c
 
 ComplexRowVector
 operator * (const RowVector& v, const ComplexMatrix& a)
 {
   ComplexRowVector tmp (v);
   return tmp * a;
 }
 
-// row vector by row vector -> row vector operations
-
-ComplexRowVector
-operator + (const ComplexRowVector& v, const RowVector& a)
-{
-  int len = v.length ();
-
-  int a_len = a.length ();
-
-  if (len != a_len)
-    {
-      gripe_nonconformant ("operator +", len, a_len);
-      return ComplexRowVector ();
-    }
-
-  if (len == 0)
-    return ComplexRowVector (0);
-
-  return ComplexRowVector (add (v.data (), a.data (), len), len);
-}
-
-ComplexRowVector
-operator - (const ComplexRowVector& v, const RowVector& a)
-{
-  int len = v.length ();
-
-  int a_len = a.length ();
-
-  if (len != a_len)
-    {
-      gripe_nonconformant ("operator -", len, a_len);
-      return ComplexRowVector ();
-    }
-
-  if (len == 0)
-    return ComplexRowVector (0);
-
-  return ComplexRowVector (subtract (v.data (), a.data (), len), len);
-}
-
-ComplexRowVector
-operator + (const RowVector& v, const ComplexRowVector& a)
-{
-  int len = v.length ();
-
-  int a_len = a.length ();
-
-  if (len != a_len)
-    {
-      gripe_nonconformant ("operator +", len, a_len);
-      return ComplexRowVector ();
-    }
-
-  if (len == 0)
-    return ComplexRowVector (0);
-
-  return ComplexRowVector (add (v.data (), a.data (), len), len);
-}
-
-ComplexRowVector
-operator - (const RowVector& v, const ComplexRowVector& a)
-{
-  int len = v.length ();
-
-  int a_len = a.length ();
-
-  if (len != a_len)
-    {
-      gripe_nonconformant ("operator -", len, a_len);
-      return ComplexRowVector ();
-    }
-
-  if (len == 0)
-    return ComplexRowVector (0);
-
-  return ComplexRowVector (subtract (v.data (), a.data (), len), len);
-}
-
-ComplexRowVector
-product (const ComplexRowVector& v, const RowVector& a)
-{
-  int len = v.length ();
-
-  int a_len = a.length ();
-
-  if (len != a_len)
-    {
-      gripe_nonconformant ("product", len, a_len);
-      return ComplexRowVector ();
-    }
-
-  if (len == 0)
-    return ComplexRowVector (0);
-
-  return ComplexRowVector (multiply (v.data (), a.data (), len), len);
-}
-
-ComplexRowVector
-quotient (const ComplexRowVector& v, const RowVector& a)
-{
-  int len = v.length ();
-
-  int a_len = a.length ();
-
-  if (len != a_len)
-    {
-      gripe_nonconformant ("quotient", len, a_len);
-      return ComplexRowVector ();
-    }
-
-  if (len == 0)
-    return ComplexRowVector (0);
-
-  return ComplexRowVector (divide (v.data (), a.data (), len), len);
-}
-
-ComplexRowVector
-product (const RowVector& v, const ComplexRowVector& a)
-{
-  int len = v.length ();
-
-  int a_len = a.length ();
-
-  if (len != a_len)
-    {
-      gripe_nonconformant ("product", len, a_len);
-      return ComplexRowVector ();
-    }
-
-  if (len == 0)
-    return ComplexRowVector (0);
-
-  return ComplexRowVector (multiply (v.data (), a.data (), len), len);
-}
-
-ComplexRowVector
-quotient (const RowVector& v, const ComplexRowVector& a)
-{
-  int len = v.length ();
-
-  int a_len = a.length ();
-
-  if (len != a_len)
-    {
-      gripe_nonconformant ("quotient", len, a_len);
-      return ComplexRowVector ();
-    }
-
-  if (len == 0)
-    return ComplexRowVector (0);
-
-  return ComplexRowVector (divide (v.data (), a.data (), len), len);
-}
-
 // other operations
 
 ComplexRowVector
 ComplexRowVector::map (c_c_Mapper f) const
 {
   ComplexRowVector b (*this);
   return b.apply (f);
 }
diff --git a/liboctave/CRowVector.h b/liboctave/CRowVector.h
--- a/liboctave/CRowVector.h
+++ b/liboctave/CRowVector.h
@@ -89,38 +89,16 @@ public:
   // row vector by matrix -> row vector
 
   friend ComplexRowVector operator * (const ComplexRowVector& a,
 				      const ComplexMatrix& b);
 
   friend ComplexRowVector operator * (const RowVector& a,
 				      const ComplexMatrix& b);
 
-  // row vector by row vector -> row vector operations
-
-  friend ComplexRowVector operator + (const ComplexRowVector& a,
-				      const RowVector& b);
-  friend ComplexRowVector operator - (const ComplexRowVector& a,
-				      const RowVector& b);
-
-  friend ComplexRowVector operator + (const RowVector& a,
-				      const ComplexRowVector& b);
-  friend ComplexRowVector operator - (const RowVector& a,
-				      const ComplexRowVector& b);
-
-  friend ComplexRowVector product (const ComplexRowVector& a,
-				   const RowVector& b);
-  friend ComplexRowVector quotient (const ComplexRowVector& a,
-				    const RowVector& b);
-
-  friend ComplexRowVector product (const RowVector& a,
-				   const ComplexRowVector& b);
-  friend ComplexRowVector quotient (const RowVector& a,
-				    const ComplexRowVector& b);
-
   // other operations
 
   ComplexRowVector map (c_c_Mapper f) const;
   RowVector map (d_c_Mapper f) const;
 
   ComplexRowVector& apply (c_c_Mapper f);
 
   Complex min (void) const;
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2000-02-08  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* CRowVector.cc, CRowVector.h, CColVector.cc, CColVector.h:
+	Delete declarations and definitions of mixed-type vector-vector ops.
+
 2000-02-07  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* CMatrix.h, CMatrix.cc: Add lssolve methods for real-valued RHS
 	matrix and vector objects.
 
 	* mx-op-defs.h (DMM_BIN_OP): Explicitly request conversion to
 	return type from second arg type.
 	(MDM_BIN_OP): Likewise, for first arg type.
diff --git a/src/version.h b/src/version.h
--- a/src/version.h
+++ b/src/version.h
@@ -40,17 +40,17 @@ This is free software with ABSOLUTELY NO
 For details, type `warranty'.\n\
 \n\
 *** This is a development version of Octave.  Development releases\n\
 *** are provided for people who want to help test, debug, and improve\n\
 *** Octave.\n\
 ***\n\
 *** If you want a stable, well-tested version of Octave, you should be\n\
 *** using one of the stable releases (when this development release\n\
-*** was made, the latest stable version was 2.0.15)."
+*** was made, the latest stable version was 2.0.16)."
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
