# HG changeset patch
# User jwe
# Date 845074623 0
#      Fri Oct 11 22:57:03 1996 +0000
# Node ID 5eb0af0730d659d3b2caa91a97640c7cc09e5f3b
# Parent  74f9c8283d318b060768a2204ff69a4cd1b878b8
[project @ 1996-10-11 22:57:03 by jwe]

diff --git a/src/xdiv.cc b/src/xdiv.cc
--- a/src/xdiv.cc
+++ b/src/xdiv.cc
@@ -46,54 +46,78 @@ result_ok (int info, double rcond, int w
 	error ("matrix singular to machine precision, rcond = %g", rcond);
 
       return 0;
     }
   else
     return 1;
 }
 
-static inline int
-mx_leftdiv_conform (int a_nr, int b_nr)
+template <class T1, class T2>
+bool
+mx_leftdiv_conform (T1 a, T2 b)
 {
+  int a_nr = a.rows ();
+  int b_nr = b.rows ();
+
   if (a_nr != b_nr)
     {
-      error ("number of rows must be the same for left division");
-      return 0;
+      int a_nc = a.cols ();
+      int b_nc = b.cols ();
+
+      gripe_nonconformant ("operator \\", a_nr, a_nc, b_nr, b_nc);
+      return false;
     }
 
-  return 1;
+  return true;
 }
 
-static inline int
-mx_div_conform (int b_nc, int a_nc)
+template bool mx_leftdiv_conform (const Matrix&, const Matrix&);
+template bool mx_leftdiv_conform (const Matrix&, const ComplexMatrix&);
+template bool mx_leftdiv_conform (const ComplexMatrix&, const ComplexMatrix&);
+template bool mx_leftdiv_conform (const ComplexMatrix&, const Matrix&);
+
+template <class T1, class T2>
+bool
+mx_div_conform (T1 a, T2 b)
 {
+  int a_nc = a.cols ();
+  int b_nc = b.cols ();
+
   if (a_nc != b_nc)
     {
-      error ("number of columns must be the same for right division");
-      return 0;
+      int a_nr = a.rows ();
+      int b_nr = b.rows ();
+
+      gripe_nonconformant ("operator /", a_nr, a_nc, b_nr, b_nc);
+      return false;
     }
 
-  return 1;
+  return true;
 }
 
+template bool mx_div_conform (const Matrix&, const Matrix&);
+template bool mx_div_conform (const Matrix&, const ComplexMatrix&);
+template bool mx_div_conform (const ComplexMatrix&, const ComplexMatrix&);
+template bool mx_div_conform (const ComplexMatrix&, const Matrix&);
+
 // Right division functions.
 //
 //       op2 / op1:   m   cm
 //            +--   +---+----+
 //   matrix         | 1 |  3 |
 //                  +---+----+
 //   complex_matrix | 2 |  4 |
 //                  +---+----+
 
 // -*- 1 -*-
 Matrix
 xdiv (const Matrix& a, const Matrix& b)
 {
-  if (! mx_div_conform (b.columns (), a.columns ()))
+  if (! mx_div_conform (a, b))
     return Matrix ();
 
   Matrix atmp = a.transpose ();
   Matrix btmp = b.transpose ();
 
   int info;
   if (btmp.rows () == btmp.columns ())
     {
@@ -108,17 +132,17 @@ xdiv (const Matrix& a, const Matrix& b)
 
   return result.transpose ();
 }
 
 // -*- 2 -*-
 ComplexMatrix
 xdiv (const Matrix& a, const ComplexMatrix& b)
 {
-  if (! mx_div_conform (b.columns (), a.columns ()))
+  if (! mx_div_conform (a, b))
     return ComplexMatrix ();
 
   Matrix atmp = a.transpose ();
   ComplexMatrix btmp = b.hermitian ();
 
   int info;
   if (btmp.rows () == btmp.columns ())
     {
@@ -133,17 +157,17 @@ xdiv (const Matrix& a, const ComplexMatr
 
   return result.hermitian ();
 }
 
 // -*- 3 -*-
 ComplexMatrix
 xdiv (const ComplexMatrix& a, const Matrix& b)
 {
-  if (! mx_div_conform (b.columns (), a.columns ()))
+  if (! mx_div_conform (a, b))
     return ComplexMatrix ();
 
   ComplexMatrix atmp = a.hermitian ();
   Matrix btmp = b.transpose ();
 
   int info;
   if (btmp.rows () == btmp.columns ())
     {
@@ -158,17 +182,17 @@ xdiv (const ComplexMatrix& a, const Matr
 
   return result.hermitian ();
 }
 
 // -*- 4 -*-
 ComplexMatrix
 xdiv (const ComplexMatrix& a, const ComplexMatrix& b)
 {
-  if (! mx_div_conform (b.columns (), a.columns ()))
+  if (! mx_div_conform (a, b))
     return ComplexMatrix ();
 
   ComplexMatrix atmp = a.hermitian ();
   ComplexMatrix btmp = b.hermitian ();
 
   int info;
   if (btmp.rows () == btmp.columns ())
     {
@@ -261,17 +285,17 @@ x_el_div (const Complex a, const Complex
 //                  +---+----+
 //   complex_matrix | 2 |  4 |
 //                  +---+----+
 
 // -*- 1 -*-
 Matrix
 xleftdiv (const Matrix& a, const Matrix& b)
 {
-  if (! mx_leftdiv_conform (a.rows (), b.rows ()))
+  if (! mx_leftdiv_conform (a, b))
     return Matrix ();
 
   int info;
   if (a.rows () == a.columns ())
     {
       double rcond = 0.0;
       Matrix result = a.solve (b, info, rcond);
       if (result_ok (info, rcond))
@@ -281,17 +305,17 @@ xleftdiv (const Matrix& a, const Matrix&
   int rank;
   return a.lssolve (b, info, rank);
 }
 
 // -*- 2 -*-
 ComplexMatrix
 xleftdiv (const Matrix& a, const ComplexMatrix& b)
 {
-  if (! mx_leftdiv_conform (a.rows (), b.rows ()))
+  if (! mx_leftdiv_conform (a, b))
     return ComplexMatrix ();
 
   int info;
   if (a.rows () == a.columns ())
     {
       double rcond = 0.0;
       ComplexMatrix result = a.solve (b, info, rcond);
       if (result_ok (info, rcond))
@@ -301,17 +325,17 @@ xleftdiv (const Matrix& a, const Complex
   int rank;
   return a.lssolve (b, info, rank);
 }
 
 // -*- 3 -*-
 ComplexMatrix
 xleftdiv (const ComplexMatrix& a, const Matrix& b)
 {
-  if (! mx_leftdiv_conform (a.rows (), b.rows ()))
+  if (! mx_leftdiv_conform (a, b))
     return ComplexMatrix ();
 
   int info;
   if (a.rows () == a.columns ())
     {
       double rcond = 0.0;
       ComplexMatrix result = a.solve (b, info, rcond);
       if (result_ok (info, rcond))
@@ -321,17 +345,17 @@ xleftdiv (const ComplexMatrix& a, const 
   int rank;
   return a.lssolve (b, info, rank);
 }
 
 // -*- 4 -*-
 ComplexMatrix
 xleftdiv (const ComplexMatrix& a, const ComplexMatrix& b)
 {
-  if (! mx_leftdiv_conform (a.rows (), b.rows ()))
+  if (! mx_leftdiv_conform (a, b))
     return ComplexMatrix ();
 
   int info;
   if (a.rows () == a.columns ())
     {
       double rcond = 0.0;
       ComplexMatrix result = a.solve (b, info, rcond);
       if (result_ok (info, rcond))
