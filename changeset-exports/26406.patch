# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1546539906 18000
#      Thu Jan 03 13:25:06 2019 -0500
# Node ID c3c9b9dc5cf693552455bfa1859d13f104818d3d
# Parent  8666ea5615fdc1abf10aebb4c15f39607baf43d6
# Parent  b352120504bc165d41cb12ab7e0ad2d689a1c287
maint: Merge stable to default.

diff --git a/libinterp/corefcn/mxarray.in.h b/libinterp/corefcn/mxarray.in.h
--- a/libinterp/corefcn/mxarray.in.h
+++ b/libinterp/corefcn/mxarray.in.h
@@ -527,18 +527,20 @@ public:
 
   static char * strsave (const char *str)
   {
     char *retval = nullptr;
 
     if (str)
       {
         mwSize sz = sizeof (mxChar) * (strlen (str) + 1);
+
         retval = static_cast<char *> (mxArray::malloc (sz));
-        if (! retval)
+
+        if (retval)
           strcpy (retval, str);
       }
 
     return retval;
   }
 
   static octave_value
   as_octave_value (const mxArray *ptr, bool null_is_empty = true);
diff --git a/libinterp/parse-tree/oct-parse.yy b/libinterp/parse-tree/oct-parse.yy
--- a/libinterp/parse-tree/oct-parse.yy
+++ b/libinterp/parse-tree/oct-parse.yy
@@ -2513,17 +2513,17 @@ namespace octave
 
     int l = base->line ();
     int c = base->column ();
 
     tree_colon_expression *e
       = new tree_colon_expression (base, limit, incr, l, c);
 
     if (base->is_constant () && limit->is_constant ()
-        && (! incr || (incr && incr->is_constant ())))
+        && (! incr || incr->is_constant ()))
       {
         try
           {
             tree_evaluator& tw
               = __get_evaluator__ ("finish_colon_expression");
 
             octave_value tmp = tw.evaluate (e);
 
@@ -3294,25 +3294,23 @@ namespace octave
   base_parser::make_function (token *fcn_tok,
                               tree_parameter_list *ret_list,
                               tree_identifier *id,
                               tree_parameter_list *param_list,
                               tree_statement_list *body,
                               tree_statement *end_fcn_stmt,
                               comment_list *lc)
   {
-    tree_function_def *retval = nullptr;
-
     int l = fcn_tok->line ();
     int c = fcn_tok->column ();
 
     octave_user_function *tmp_fcn
       = start_function (id, param_list, body, end_fcn_stmt);
 
-    retval = finish_function (ret_list, tmp_fcn, lc, l, c);
+    tree_function_def *retval = finish_function (ret_list, tmp_fcn, lc, l, c);
 
     recover_from_parsing_function ();
 
     return retval;
   }
 
   // Begin defining a function.
 
diff --git a/libinterp/parse-tree/pt-jit.cc b/libinterp/parse-tree/pt-jit.cc
--- a/libinterp/parse-tree/pt-jit.cc
+++ b/libinterp/parse-tree/pt-jit.cc
@@ -2924,12 +2924,12 @@ The original variable value is restored 
 @end deftypefn */)
 {
 #if defined (HAVE_LLVM)
   return SET_INTERNAL_VARIABLE_WITH_LIMITS (jit_startcnt, 1,
                                             std::numeric_limits<int>::max ());
 #else
   octave_unused_parameter (args);
   octave_unused_parameter (nargout);
-  warn_disabled_feature ("jit_enable", "JIT");
+  warn_disabled_feature ("jit_startcnt", "JIT");
   return ovl ();
 #endif
 }
diff --git a/libinterp/parse-tree/pt-mat.cc b/libinterp/parse-tree/pt-mat.cc
--- a/libinterp/parse-tree/pt-mat.cc
+++ b/libinterp/parse-tree/pt-mat.cc
@@ -80,19 +80,17 @@ namespace octave
              || c1_is_logical);
 
         bool c2_is_built_in_type
           = (c2_is_int || c2_is_char ||  c2_is_double || c2_is_single
              || c2_is_logical);
 
         // Order is important here...
 
-        if (c1 == "struct" && c2 == c1)
-          retval = c1;
-        else if (c1 == "cell" || c2 == "cell")
+        if (c1 == "cell" || c2 == "cell")
           retval = "cell";
         else if (c1_is_char && c2_is_built_in_type)
           retval = c1;
         else if (c2_is_char && c1_is_built_in_type)
           retval = c2;
         else if (c1_is_int && c2_is_built_in_type)
           retval = c1;
         else if (c2_is_int && c1_is_built_in_type)
