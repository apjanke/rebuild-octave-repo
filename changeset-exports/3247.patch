# HG changeset patch
# User jwe
# Date 929775075 0
#      Sat Jun 19 06:51:15 1999 +0000
# Node ID 256f98d262756cd2e56a3eda3a80513954e48464
# Parent  a41cc560087ab24b74a78325da821e2151371a56
[project @ 1999-06-19 06:51:10 by jwe]

diff --git a/scripts/control/bodquist.m b/scripts/control/bodquist.m
--- a/scripts/control/bodquist.m
+++ b/scripts/control/bodquist.m
@@ -91,37 +91,49 @@ function [f,w] = bodquist(sys,w,outputs,
 
       if(isempty(bigpts) )
         pcnt = 0;
       else
         pcnt = pcnt - 1;
         wnew = [];
         crossover_points = find ( phase(1:lp1).*phase(2:lp) < 0);
         pd(crossover_points) = abs(359.99+dphase - pd(crossover_points));
-        np_pts = ceil(pd/dphase)+2;		# phase points
-        nm_pts = ceil(log(fd./fm)/log(dmag))+2; 	# magnitude points
+        np_pts = max(3,ceil(pd/dphase)+2);		# phase points
+        nm_pts = max(3,ceil(log(fd./fm)/log(dmag))+2); 	# magnitude points
         npts = min(5,max(np_pts, nm_pts));
+
         w1 = log10(w(1:lp1));
         w2 = log10(w(2:lp));
         for ii=bigpts
           if(npts(ii))
-            wseg(ii,1:npts(ii)) = logspace(w1(ii),w2(ii),npts(ii));
+            wtmp = logspace(w1(ii),w2(ii),npts(ii));
+            wseg(ii,1:(npts(ii)-2)) = wtmp(2:(npts(ii)-1));
           endif
         endfor
-        wnew = reshape(wseg,1,rows(wseg)*columns(wseg)); # make a row vector
+        wnew = vec(wseg)'; # make a row vector
         wnew = wnew(find(wnew != 0));
         wnew = sort(wnew);
         wnew = create_set(wnew);
         if(isempty(wnew))   # all small crossovers
           pcnt = 0;
         else
           [fnew,wnew] = freqresp(sys,1,wnew);    # get new freq resp points
           w = [w,wnew];			# combine with old freq resp
           f = [f,fnew];
           [w,idx] = sort(w);		# sort into order
           f = f(idx);
           phase = arg(f)*180.0/pi;
         endif
       endif
     endwhile
   endif
+
+  # ensure unique frequency values
+  [w,idx] = sort(w);
+  f = f(idx);
+
+  w_diff = diff(w);
+  w_dup = find(w_diff == 0);
+  w_idx = complement(w_dup,1:length(w));
+  w = w(w_idx);
+  f = f(w_idx);
     
 endfunction
diff --git a/scripts/control/buildssic.m b/scripts/control/buildssic.m
--- a/scripts/control/buildssic.m
+++ b/scripts/control/buildssic.m
@@ -220,17 +220,17 @@ function [sys] = buildssic(Clst,Ulst,Ols
   # x = Ax + Bu
   #                            ~
   # y = Cx + Du   by   u = K*y+u
   #
   #            -1
   # R = (I-D*K)   must exist.
   # 
   R = eye(p) - D*K;
-  if (rank(R) < m)
+  if (rank(R) < p)
     error("---> singularity in algebraic loop.");
   else
     R = inv(R);
   endif
   A = A + B*K*R*C;
   B = B + B*K*R*D;
   C = R*C;
   D = R*D;
diff --git a/scripts/control/is_digital.m b/scripts/control/is_digital.m
--- a/scripts/control/is_digital.m
+++ b/scripts/control/is_digital.m
@@ -1,9 +1,9 @@
-# Copyright (C) 1996 A. Scottedward Hodel 
+# Copyright (C) 1996, 1999 A. Scottedward Hodel 
 #
 # This file is part of Octave. 
 #
 # Octave is free software; you can redistribute it and/or modify it 
 # under the terms of the GNU General Public License as published by the 
 # Free Software Foundation; either version 2, or (at your option) any 
 # later version. 
 # 
@@ -11,31 +11,59 @@
 # ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
 # FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License 
 # for more details.
 # 
 # You should have received a copy of the GNU General Public License 
 # along with Octave; see the file COPYING.  If not, write to the Free 
 # Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA. 
  
-function DIGITAL = is_digital(sys)
-# function DIGITAL = is_digital(sys)
-# retrurn nonzero if system is digital
+function DIGITAL = is_digital(sys,eflg)
+# function DIGITAL = is_digital(sys{,eflg})
+# return nonzero if system is digital
+# inputs:
+#   sys: system data structure
+#   eflg: 0 [default] exit with an error if system is mixed (continuous and
+#           discrete components)
+#       : 1 print a warning if system is mixed (continuous and discrete)
+#       : 2 silent operation
+# outputs:
+#   DIGITAL:  0: system is purely continuous
+#          :  1: system is purely discrete
+#          : -1: system is mixed continuous and discrete
 # exits with an error of sys is a mixed (continuous and discrete) system
 
 # a s hodel July 1996
-# SYS_INTERNAL accesses members of system structure
+
+  switch(nargin)
+  case(1),  eflg = 0;
+  case(2),  
+    if( isempty(find(eflg == [0 1 2])) )
+      error("Illegal value of eflg=%d (%e)",eflg,eflg);
+    endif
+  otherwise,
+    usage("DIGITAL = is_digital(sys{,eflg})");
+  endswitch
 
   # checked for sampled data system (mixed)
   # discrete system
   sysyd = sysgetsignals(sys,"yd");
   [nn,nz] = sysdimensions(sys);
   cont = sum(sysyd == 0) + nn;
   tsam = sysgettsam(sys);
   dig = sum(sysyd != 0) + nz + tsam;
+
+  # check for mixed system
   if( cont*dig != 0)
-   sysout(sys);
-   error("continuous/discrete system; use syscont, sysdisc, or c2d first");
+   switch(eflg)
+   case(0),
+     error("continuous/discrete system; use syscont, sysdisc, or c2d first");
+   case(1),
+     warning("is_digital: mixed continuous/discrete system");
+   endswitch
+   dig_sign = -1;
   else
-    DIGITAL = (tsam > 0);
+   dig_sign = 1;
   endif
+
+  DIGITAL = dig_sign*(tsam > 0);
  
 endfunction
diff --git a/scripts/control/stepimp.m b/scripts/control/stepimp.m
--- a/scripts/control/stepimp.m
+++ b/scripts/control/stepimp.m
@@ -182,17 +182,17 @@ function [y, t] = stepimp(sitype, sys, i
   y = zeros(NOUT, n);
   t = linspace(0, tstop, n);
 
   if (IMPULSE)
     if (!DIGITAL && (D'*D > 0))
       error("impulse: D matrix is nonzero, impulse response infinite.")
     endif
     if (DIGITAL)
-      y(:,1) = D;
+      y(:,1) = D / t_step;
       x = G / t_step;
     else
       x = B;
       y(:,1) = C * x;
       x = F * x;
     endif
     for i = 2:n
       y(:,i) = C * x;
diff --git a/scripts/control/syssetsignals.m b/scripts/control/syssetsignals.m
--- a/scripts/control/syssetsignals.m
+++ b/scripts/control/syssetsignals.m
@@ -104,57 +104,71 @@ function retsys = syssetsignals(sys,opt,
       if(jj < 1 | jj > nsigs | jj != floor(jj+0.5))
         error("opt=%s, sig_idx(%d)=%d, %e: must be an integer between 1 and %d", ...
           opt, ii, jj, jj, nsigs);
       endif
       sig_vals(jj) = nth(names,ii);
     endfor
 
   else
-    nsigs = length(sig_vals);
-    if(!is_vector(names))
-      error("syssetsignals: opt=yd, names(%dx%d) must be a vector", ...
-        rows(names), columns(names));
-    endif
-    if(nargin == 3)
-      if(length(names) != nsigs)
-        error("opt=yd, sig_idx omitted: names(%d) should be length(%d)", ...
-          length(names), nsigs);
+    # update yd
+    # 1st check pathological case: no outputs
+    nout = sysdimensions(sys,"out");
+    if(nout == 0)
+      if(nargin != 3)
+        error("opt=%s, %d outputs, sysgetsignals cannot take 4 arguments", ...
+          yd,nout);
+      endif
+      if(!isempty(names))
+        error("opt=%s, %d outputs, names is not empty");
+      endif
+      sigvals = [];
+    else
+      nsigs = length(sig_vals);
+      if(!is_vector(names))
+        error("syssetsignals: opt=yd, names(%dx%d) must be a vector", ...
+          rows(names), columns(names));
       endif
-      sig_idx = 1:nsigs;
-    elseif(length(names) != length(sig_idx))
-      error("opt=yd: length(names)=%d, length(sig_idx)=%d",length(names), ...
-        length(sig_idx) );
+      if(nargin == 3)
+        if(length(names) != nsigs)
+          error("opt=yd, sig_idx omitted: names(%d) should be length(%d)", ...
+            length(names), nsigs);
+        endif
+        sig_idx = 1:nsigs;
+      elseif(length(names) != length(sig_idx))
+        error("opt=yd: length(names)=%d, length(sig_idx)=%d",length(names), ...
+          length(sig_idx) );
+      endif
+  
+      badidx = find(names != 0 & names != 1);
+      if(! isempty(badidx) )
+        for ii=1:length(badidx)
+          warning("syssetsignals: opt=yd: names(%d)=%e, must be 0 or 1", ...
+            badidx(ii), names(badidx(ii)) );
+        endfor
+        error("opt=yd: illegal values in names");
+      endif
+  
+      for ii=1:length(sig_idx)
+        jj = sig_idx(ii);
+        if(jj < 1 | jj > nsigs | jj != floor(jj))
+          error("sig_idx(%d)=%d, %e: must be an integer between 1 and %d", ...
+            ii,jj, jj, nsigs);
+        endif
+        sig_vals(jj) = names(ii);
+      endfor
+      if(any(sig_vals == 1) & sysgettsam(sys) == 0)
+        warning("Setting system sampling time to 1");
+        printf("syssetsignals: original system sampling time=0 but output(s)\n");
+        disp(find(sig_vals==1))
+        printf("are digital\n");
+        sys = syschtsam(sys,1);
+      endif
+      
     endif
-
-    badidx = find(names != 0 & names != 1);
-    if(! isempty(badidx) )
-      for ii=1:length(badidx)
-        warning("syssetsignals: opt=yd: names(%d)=%e, must be 0 or 1", ...
-          badidx(ii), names(badidx(ii)) );
-      endfor
-      error("opt=yd: illegal values in names");
-    endif
-
-    for ii=1:length(sig_idx)
-      jj = sig_idx(ii);
-      if(jj < 1 | jj > nsigs | jj != floor(jj))
-        error("sig_idx(%d)=%d, %e: must be an integer between 1 and %d", ...
-          ii,jj, jj, nsigs);
-      endif
-      sig_vals(jj) = names(ii);
-    endfor
-    if(any(sig_vals == 1) & sysgettsam(sys) == 0)
-      warning("Setting system sampling time to 1");
-      printf("syssetsignals: original system sampling time=0 but output(s)\n");
-      disp(find(sig_vals==1))
-      printf("are digital\n");
-      sys = syschtsam(sys,1);
-    endif
-    
   endif
 
   if(strcmp(opt,"st"))
     sys.stname = sig_vals;
   elseif(strcmp(opt,"in"))
     sys.inname = sig_vals;
   elseif(strcmp(opt,"out"))
     sys.outname = sig_vals;
