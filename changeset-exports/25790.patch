# HG changeset patch
# User Torsten <mttl@mailbox.org>
# Date 1534276234 -7200
#      Tue Aug 14 21:50:34 2018 +0200
# Node ID 872111558bc0e68b7a9ef6d7eaf0af0689c0a9d6
# Parent  cc9da21511c15f159df90d4851d7735a7142cdf1
reload editor files when their path changes by using movefile (bug #43922)

* file-editor.cc (handle_file_remove): remove quotation marks from old names,
  split into a string list and loop over all old file/dir names, use
  octave::sys::env::make_absolute for creating the new file path;
  (handle_dir_remove): append old dir name and the relative path to the file
  within the old dir if new dir already exists, which my happen using movefile

* octave-link.cc (__octave_link_file_remove__, __octave_link_file_renamed__):
  new functions making octave_link::file_renamed and octave_link::file_removed
  available in m-files

* movefile.m: calling __octave_link_file_remove__ and
  __octave_link_file_renamed__ before and after moving files respectively

diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -41,16 +41,17 @@ along with Octave; see the file COPYING.
 #include <QStyle>
 #include <QTabBar>
 #include <QTextStream>
 #include <QVBoxLayout>
 #include <Qsci/qscicommandset.h>
 
 #include "main-window.h"
 #include "gui-preferences.h"
+#include "oct-env.h"
 #include "oct-map.h"
 #include "octave-link.h"
 #include "utils.h"
 
 namespace octave
 {
   // Functions of the the reimplemented tab widget
 
@@ -942,59 +943,86 @@ namespace octave
   // is going to be deleted/renamed
   void file_editor::handle_file_remove (const QString& old_name,
                                         const QString& new_name)
   {
     // Clear old list of file data and declare a structure for file data
     m_tmp_closed_files.clear ();
     session_data f_data;
 
-    // Check if old name is a file or directory
-    QFileInfo old (old_name);
-    if (old.isDir ())
-      {
-        // Call the function which handles directories and return
-        handle_dir_remove (old_name, new_name);
-      }
-    else
+    // Preprocessing old name(s)
+    QString old_name_clean = old_name.trimmed ();
+    int s = old_name_clean.size ();
+
+    if (old_name_clean.at (0) == QChar ('\"') &&
+        old_name_clean.at (s - 1) == QChar ('\"'))
+      old_name_clean = old_name_clean.mid (1, s - 2);
+
+    QStringList old_names = old_name_clean.split ("\" \"");
+
+    // Check if new name is a file or directory
+    QFileInfo newf (new_name);
+    bool new_is_dir = newf.isDir ();
+
+    // Now loop over all old files/dirs (several files by movefile ())
+    for (int i = 0; i < old_names.count (); i++)
       {
-        // It is a single file. Is it open?
-        file_editor_tab *editor_tab
-          = static_cast<file_editor_tab *> (find_tab_widget (old_name));
-
-        if (editor_tab)
+        // Check if old name is a file or directory
+        QFileInfo old (old_names.at (i));
+
+        if (old.isDir ())
+          {
+            // Call the function which handles directories and return
+            handle_dir_remove (old_names.at (i), new_name);
+          }
+        else
           {
-            // YES: Get and store the related encoding
-            for (editor_tab_map_const_iterator p = m_editor_tab_map.begin ();
-                  p != m_editor_tab_map.end (); p++)
+            // It is a single file. Is it open?
+            file_editor_tab *editor_tab
+              = static_cast<file_editor_tab *> (find_tab_widget (old_names.at (i)));
+
+            if (editor_tab)
               {
-                if (editor_tab == p->second.fet_ID)
+                // YES: Get and store the related encoding
+                for (editor_tab_map_const_iterator p = m_editor_tab_map.begin ();
+                      p != m_editor_tab_map.end (); p++)
                   {
-                    // Get index and line
-                    f_data.encoding = p->second.encoding;
-                    f_data.index = m_tab_widget->indexOf (editor_tab);
-                    int l, c;
-                    editor_tab->qsci_edit_area ()->getCursorPosition (&l, &c);
-                    f_data.line = l + 1;
-                    break;
+                    if (editor_tab == p->second.fet_ID)
+                      {
+                        // Get index and line
+                        f_data.encoding = p->second.encoding;
+                        f_data.index = m_tab_widget->indexOf (editor_tab);
+                        int l, c;
+                        editor_tab->qsci_edit_area ()->getCursorPosition (&l, &c);
+                        f_data.line = l + 1;
+                        break;
+                      }
                   }
+
+                // Close it silently
+                m_no_focus = true;  // Remember for not focussing editor
+                editor_tab->file_has_changed (QString (), true);  // Close the tab
+                m_no_focus = false;  // Back to normal
+
+                // For reloading old file if error while removing
+                f_data.file_name = old_names.at (i);
+                // For reloading new file (if new_file is not empty)
+                if (new_is_dir)
+                  {
+                    std::string ndir = new_name.toStdString ();
+                    std::string ofile = old.fileName ().toStdString ();
+                    f_data.new_file_name = QString::fromStdString (
+                      octave::sys::env::make_absolute (ofile, ndir));
+                  }
+                else
+                  f_data.new_file_name = new_name;
+
+                // Add file data to list
+                m_tmp_closed_files << f_data;
               }
-
-            // Close it silently
-            m_no_focus = true;  // Remember for not focussing editor
-            editor_tab->file_has_changed (QString (), true);  // Close the tab
-            m_no_focus = false;  // Back to normal
-
-            // For reloading old file if error while removing
-            f_data.file_name = old_name;
-            // For reloading new file (if new_fiel is not empty)
-            f_data.new_file_name = new_name;
-
-            // Add file data to list
-            m_tmp_closed_files << f_data;
           }
       }
   }
 
   // Slot for signal indicating that a file was renamed
   void file_editor::handle_file_renamed (bool load_new)
   {
     m_no_focus = true;  // Remember for not focussing editor
@@ -2418,17 +2446,31 @@ namespace octave
             // Store file for possible later reload
             f_data.file_name = p->first;
 
             // Add the new file path and the encoding for later reloading
             // if new_name is given
             if (! new_name.isEmpty ())
               {
                 QDir new_dir (new_name);
-                f_data.new_file_name = new_dir.absoluteFilePath (rel_path_to_file);
+                QString append_to_new_dir;
+                if (new_dir.exists ())
+                  {
+                    // The new directory already exists (movefile was used).
+                    // This means, we have to add the name (not the path)
+                    // of the old dir and the relative path to the file
+                    // to new dir.
+                    append_to_new_dir = old_dir.dirName () +
+                                        "/" + rel_path_to_file;
+                  }
+                else
+                  append_to_new_dir = rel_path_to_file;
+
+                f_data.new_file_name
+                        = new_dir.absoluteFilePath (append_to_new_dir);
               }
             else
               f_data.new_file_name = ""; // no new name, just removing this file
 
             f_data.encoding = p->second.encoding; // store the encoding
 
             // Store data in list for later reloading
             m_tmp_closed_files << f_data;
diff --git a/libinterp/corefcn/octave-link.cc b/libinterp/corefcn/octave-link.cc
--- a/libinterp/corefcn/octave-link.cc
+++ b/libinterp/corefcn/octave-link.cc
@@ -398,16 +398,57 @@ Undocumented internal function.
            "first argument must be the preference key");
 
   if (args.length () >= 2)
     value = args(1).string_value();
 
   return ovl (octave_link::gui_preference (key, value));
 }
 
+DEFUN (__octave_link_file_remove__, args, ,
+       doc: /* -*- texinfo -*-
+@deftypefn {} {} __octave_link_file_remove__ ()
+Undocumented internal function.
+@end deftypefn */)
+{
+  std::string old_name, new_name;
+
+  if (args.length () == 2)
+    {
+      old_name = args(0).string_value();
+      new_name = args(1).string_value();
+    }
+  else
+    error ("__octave_link_file_remove__: "
+           "old and new name expected as arguments");
+
+  octave_link::file_remove (old_name, new_name);
+
+  return ovl ();
+}
+
+DEFUN (__octave_link_file_renamed__, args, ,
+       doc: /* -*- texinfo -*-
+@deftypefn {} {} __octave_link_file_renamed__ ()
+Undocumented internal function.
+@end deftypefn */)
+{
+  bool load_new;
+
+  if (args.length () == 1)
+    load_new = args(0).bool_value();
+  else
+    error ("__octave_link_file_renamed__: "
+           "first argument must be boolean for reload new named file");
+
+  octave_link::file_renamed (load_new);
+
+  return ovl ();
+}
+
 DEFMETHOD (openvar, interp, args, ,
            doc: /* -*- texinfo -*-
 @deftypefn {} {} openvar (@var{name})
 Open the variable @var{name} in the graphical Variable Editor.
 @end deftypefn */)
 {
   if (args.length () != 1)
     print_usage ();
diff --git a/scripts/miscellaneous/movefile.m b/scripts/miscellaneous/movefile.m
--- a/scripts/miscellaneous/movefile.m
+++ b/scripts/miscellaneous/movefile.m
@@ -112,36 +112,44 @@ function [status, msg, msgid] = movefile
       endwhile
 
       if (ispc () && ! isunix ()
           && ! isempty (file_in_path (getenv ("PATH"), "cp.exe")))
         p1 = strrep (p1, '\', '/');
         p2 = strrep (p2, '\', '/');
       endif
 
+      ## Close old file(s) in editor
+      __octave_link_file_remove__ (p1, p2);
       ## Move the file(s).
       [err, msg] = system (sprintf ('%s %s "%s"', cmd, p1, p2));
       if (err != 0)
         status = false;
         msgid = "movefile";
       endif
+      ## Load new file(s) in editor
+      __octave_link_file_renamed__ (status);
     endwhile
   else
     if (ispc () && ! isunix ()
         && ! isempty (file_in_path (getenv ("PATH"), "cp.exe")))
       p1 = strrep (p1, '\', '/');
       p2 = strrep (p2, '\', '/');
     endif
 
+    ## Close old file(s) in editor
+    __octave_link_file_remove__ (p1, p2);
     ## Move the file(s).
     [err, msg] = system (sprintf ('%s %s "%s"', cmd, p1, p2));
     if (err != 0)
       status = false;
       msgid = "movefile";
     endif
+    ## Load new file(s) in editor
+    __octave_link_file_renamed__ (status);
   endif
 
 endfunction
 
 
 %!test
 %! unwind_protect
 %!   f1 = tempname;
