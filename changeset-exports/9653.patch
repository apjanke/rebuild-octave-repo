# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1253280429 -7200
#      Fri Sep 18 15:27:09 2009 +0200
# Node ID e087d7c77ff949dd4d16cedfe6ce676fad804373
# Parent  ecdb275bd41b9015aa7f067119292beed5adfe17
improve linspace in liboctave

diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -674,15 +674,48 @@ public:
   }
 
   template <class U> friend class Array;
 
 private:
   static void instantiation_guard ();
 };
 
+// This is a simple wrapper template that will subclass an Array<T> type or any
+// later type derived from it and override the default non-const operator() to
+// not check for the array's uniqueness. It is, however, the user's
+// responsibility to ensure the array is actually unaliased whenever elements
+// are accessed.
+
+template<class ArrayClass>
+class NoAlias : public ArrayClass
+{
+  typedef typename ArrayClass::element_type T;
+public:
+  NoAlias () : ArrayClass () { }
+
+  // FIXME: this would be simpler once C++0x is available
+  template <class X>
+    explicit NoAlias (X x) : ArrayClass (x) { }
+
+  template <class X, class Y>
+    explicit NoAlias (X x, Y y) : ArrayClass (x, y) { }
+
+  template <class X, class Y, class Z>
+    explicit NoAlias (X x, Y y, Z z) : ArrayClass (x, y, z) { }
+
+  T& operator () (octave_idx_type n)
+    { return ArrayClass::xelem (n); }
+  T& operator () (octave_idx_type i, octave_idx_type j)
+    { return ArrayClass::xelem (i, j); }
+  T& operator () (octave_idx_type i, octave_idx_type j, octave_idx_type k)
+    { return ArrayClass::xelem (i, j, k); }
+  T& operator () (const Array<octave_idx_type>& ra_idx)
+    { return ArrayClass::xelem (ra_idx); }
+};
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -4061,16 +4061,49 @@ max (const ComplexMatrix& a, const Compl
 	      result (i, j) = xmax (a (i, j), b (i, j));
 	    }
 	}
     }
 
   return result;
 }
 
+ComplexMatrix linspace (const ComplexColumnVector& x1, 
+                        const ComplexColumnVector& x2, 
+                        octave_idx_type n)
+
+{
+  if (n < 1) n = 1;
+
+  octave_idx_type m = x1.length ();
+
+  if (x2.length () != m)
+    (*current_liboctave_error_handler) ("linspace: vectors must be of equal length");
+
+  NoAlias<ComplexMatrix> retval;
+
+  retval.clear (m, n);
+  for (octave_idx_type i = 0; i < m; i++)
+    retval(i, 0) = x1(i);
+
+  // The last column is not needed while using delta.
+  Complex *delta = &retval(0, 1); 
+  for (octave_idx_type i = 0; i < m; i++)
+    delta[i] = (x2(i) - x1(i)) / (n - 1.0);
+
+  for (octave_idx_type j = 1; j < n-1; j++)
+    for (octave_idx_type i = 0; i < m; i++)
+      retval(i, j) = retval(i, j-1) + delta[i];
+
+  for (octave_idx_type i = 0; i < m; i++)
+    retval(i, n-1) = x2(i);
+
+  return retval;
+}
+
 MS_CMP_OPS (ComplexMatrix, Complex)
 MS_BOOL_OPS (ComplexMatrix, Complex)
 
 SM_CMP_OPS (Complex, ComplexMatrix)
 SM_BOOL_OPS (Complex, ComplexMatrix)
 
 MM_CMP_OPS (ComplexMatrix, ComplexMatrix)
 MM_BOOL_OPS (ComplexMatrix, ComplexMatrix)
diff --git a/liboctave/CMatrix.h b/liboctave/CMatrix.h
--- a/liboctave/CMatrix.h
+++ b/liboctave/CMatrix.h
@@ -403,16 +403,21 @@ extern OCTAVE_API ComplexMatrix operator
 extern OCTAVE_API ComplexMatrix min (const Complex& c, const ComplexMatrix& m);
 extern OCTAVE_API ComplexMatrix min (const ComplexMatrix& m, const Complex& c);
 extern OCTAVE_API ComplexMatrix min (const ComplexMatrix& a, const ComplexMatrix& b);
 
 extern OCTAVE_API ComplexMatrix max (const Complex& c, const ComplexMatrix& m);
 extern OCTAVE_API ComplexMatrix max (const ComplexMatrix& m, const Complex& c);
 extern OCTAVE_API ComplexMatrix max (const ComplexMatrix& a, const ComplexMatrix& b);
 
+extern OCTAVE_API ComplexMatrix linspace (const ComplexColumnVector& x1, 
+                                          const ComplexColumnVector& x2, 
+                                          octave_idx_type n);
+
+
 MS_CMP_OP_DECLS (ComplexMatrix, Complex, OCTAVE_API)
 MS_BOOL_OP_DECLS (ComplexMatrix, Complex, OCTAVE_API)
 
 SM_CMP_OP_DECLS (Complex, ComplexMatrix, OCTAVE_API)
 SM_BOOL_OP_DECLS (Complex, ComplexMatrix, OCTAVE_API)
 
 MM_CMP_OP_DECLS (ComplexMatrix, ComplexMatrix, OCTAVE_API)
 MM_BOOL_OP_DECLS (ComplexMatrix, ComplexMatrix, OCTAVE_API)
diff --git a/liboctave/CRowVector.cc b/liboctave/CRowVector.cc
--- a/liboctave/CRowVector.cc
+++ b/liboctave/CRowVector.cc
@@ -477,32 +477,25 @@ operator * (const ComplexRowVector& v, c
   return retval;
 }
 
 // other operations
 
 ComplexRowVector
 linspace (const Complex& x1, const Complex& x2, octave_idx_type n)
 {
-  ComplexRowVector retval;
+  if (n < 1) n = 1;
+
+  NoAlias<ComplexRowVector> retval (n);
 
-  if (n > 0)
-    {
-      retval.resize (n);
-      Complex delta = (x2 - x1) / (n - 1.0);
-      retval.elem (0) = x1;
-      for (octave_idx_type i = 1; i < n-1; i++)
-	retval.elem (i) = x1 + 1.0 * i * delta;
-      retval.elem (n-1) = x2;
-    }
-  else
-    {
-      retval.resize (1);
-      retval.elem (0) = x2;
-    }
+  Complex delta = (x2 - x1) / (n - 1.0);
+  Complex y = retval(0) = x1;
+  for (octave_idx_type i = 1; i < n-1; i++)
+    retval(i) = y += delta;
+  retval(n-1) = x2;
 
   return retval;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,24 @@
+2009-09-18  Jaroslav Hajek  <highegg@gmail.com>
+
+	* Array.h (NoAlias): New template class.
+	* dRowVector.cc (linspace): Rewrite.
+	* fRowVector.cc (linspace): Rewrite.
+	* CRowVector.cc (linspace): Rewrite.
+	* fCRowVector.cc (linspace): Rewrite.
+	* dMatrix.cc (linspace): New method.
+	* dMatrix.h (linspace): Declare it.
+	* fMatrix.cc (linspace): New method.
+	* fMatrix.h (linspace): Declare it.
+	* CMatrix.cc (linspace): New method.
+	* CMatrix.h (linspace): Declare it.
+	* fCMatrix.cc (linspace): New method.
+	* fCMatrix.h (linspace): Declare it.
+
 2009-09-17  John W. Eaton  <jwe@octave.org>
 
 	* oct-types.h.in: Delete.
 	* Makefile.in (BUILT_INCLUDES, DISTFILES): Remove oct-types.h.in
 	from the list.
 	(distclean, maintainer-clean): Don't remove oct-types.h
 	* DAEFunc.h, MatrixType.h, base-aepbal.h, dim-vector.h,
 	lo-specfun.h, lo-utils.h, mx-op-decl.h, oct-inttypes.h,
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -3390,16 +3390,49 @@ max (const Matrix& a, const Matrix& b)
       {
 	OCTAVE_QUIT;
 	result (i, j) = xmax (a (i, j), b (i, j));
       }
 
   return result;
 }
 
+Matrix linspace (const ColumnVector& x1, 
+                 const ColumnVector& x2, 
+                 octave_idx_type n)
+
+{
+  if (n < 1) n = 1;
+
+  octave_idx_type m = x1.length ();
+
+  if (x2.length () != m)
+    (*current_liboctave_error_handler) ("linspace: vectors must be of equal length");
+
+  NoAlias<Matrix> retval;
+
+  retval.clear (m, n);
+  for (octave_idx_type i = 0; i < m; i++)
+    retval(i, 0) = x1(i);
+
+  // The last column is not needed while using delta.
+  double *delta = &retval(0, 1); 
+  for (octave_idx_type i = 0; i < m; i++)
+    delta[i] = (x2(i) - x1(i)) / (n - 1);
+
+  for (octave_idx_type j = 1; j < n-1; j++)
+    for (octave_idx_type i = 0; i < m; i++)
+      retval(i, j) = retval(i, j-1) + delta[i];
+
+  for (octave_idx_type i = 0; i < m; i++)
+    retval(i, n-1) = x2(i);
+
+  return retval;
+}
+
 MS_CMP_OPS (Matrix, double)
 MS_BOOL_OPS (Matrix, double)
 
 SM_CMP_OPS (double, Matrix)
 SM_BOOL_OPS (double, Matrix)
 
 MM_CMP_OPS (Matrix, Matrix)
 MM_BOOL_OPS (Matrix, Matrix)
diff --git a/liboctave/dMatrix.h b/liboctave/dMatrix.h
--- a/liboctave/dMatrix.h
+++ b/liboctave/dMatrix.h
@@ -352,16 +352,20 @@ extern OCTAVE_API Matrix operator * (con
 extern OCTAVE_API Matrix min (double d, const Matrix& m);
 extern OCTAVE_API Matrix min (const Matrix& m, double d);
 extern OCTAVE_API Matrix min (const Matrix& a, const Matrix& b);
 
 extern OCTAVE_API Matrix max (double d, const Matrix& m);
 extern OCTAVE_API Matrix max (const Matrix& m, double d);
 extern OCTAVE_API Matrix max (const Matrix& a, const Matrix& b);
 
+extern OCTAVE_API Matrix linspace (const ColumnVector& x1, 
+                                   const ColumnVector& x2, 
+                                   octave_idx_type n);
+
 MS_CMP_OP_DECLS (Matrix, double, OCTAVE_API)
 MS_BOOL_OP_DECLS (Matrix, double, OCTAVE_API)
 
 SM_CMP_OP_DECLS (double, Matrix, OCTAVE_API)
 SM_BOOL_OP_DECLS (double, Matrix, OCTAVE_API)
 
 MM_CMP_OP_DECLS (Matrix, Matrix, OCTAVE_API)
 MM_BOOL_OP_DECLS (Matrix, Matrix, OCTAVE_API)
diff --git a/liboctave/dRowVector.cc b/liboctave/dRowVector.cc
--- a/liboctave/dRowVector.cc
+++ b/liboctave/dRowVector.cc
@@ -306,32 +306,25 @@ operator >> (std::istream& is, RowVector
   return is;
 }
 
 // other operations
 
 RowVector
 linspace (double x1, double x2, octave_idx_type n)
 {
-  RowVector retval;
+  if (n < 1) n = 1;
+
+  NoAlias<RowVector> retval (n);
 
-  if (n > 1)
-    {
-      retval.resize (n);
-      double delta = (x2 - x1) / (n - 1);
-      retval.elem (0) = x1;
-      for (octave_idx_type i = 1; i < n-1; i++)
-	retval.elem (i) = x1 + i * delta;
-      retval.elem (n-1) = x2;
-    }
-  else
-    {
-      retval.resize (1);
-      retval.elem (0) = x2;
-    }
+  double delta = (x2 - x1) / (n - 1);
+  double y = retval(0) = x1;
+  for (octave_idx_type i = 1; i < n-1; i++)
+    retval(i) = y += delta;
+  retval(n-1) = x2;
 
   return retval;
 }
 
 // row vector by column vector -> scalar
 
 double
 operator * (const RowVector& v, const ColumnVector& a)
diff --git a/liboctave/fCMatrix.cc b/liboctave/fCMatrix.cc
--- a/liboctave/fCMatrix.cc
+++ b/liboctave/fCMatrix.cc
@@ -4054,16 +4054,49 @@ max (const FloatComplexMatrix& a, const 
 	      result (i, j) = xmax (a (i, j), b (i, j));
 	    }
 	}
     }
 
   return result;
 }
 
+FloatComplexMatrix linspace (const FloatComplexColumnVector& x1, 
+                             const FloatComplexColumnVector& x2, 
+                             octave_idx_type n)
+
+{
+  if (n < 1) n = 1;
+
+  octave_idx_type m = x1.length ();
+
+  if (x2.length () != m)
+    (*current_liboctave_error_handler) ("linspace: vectors must be of equal length");
+
+  NoAlias<FloatComplexMatrix> retval;
+
+  retval.clear (m, n);
+  for (octave_idx_type i = 0; i < m; i++)
+    retval(i, 0) = x1(i);
+
+  // The last column is not needed while using delta.
+  FloatComplex *delta = &retval(0, 1); 
+  for (octave_idx_type i = 0; i < m; i++)
+    delta[i] = (x2(i) - x1(i)) / (n - 1.0f);
+
+  for (octave_idx_type j = 1; j < n-1; j++)
+    for (octave_idx_type i = 0; i < m; i++)
+      retval(i, j) = retval(i, j-1) + delta[i];
+
+  for (octave_idx_type i = 0; i < m; i++)
+    retval(i, n-1) = x2(i);
+
+  return retval;
+}
+
 MS_CMP_OPS (FloatComplexMatrix, FloatComplex)
 MS_BOOL_OPS (FloatComplexMatrix, FloatComplex)
 
 SM_CMP_OPS (FloatComplex, FloatComplexMatrix)
 SM_BOOL_OPS (FloatComplex, FloatComplexMatrix)
 
 MM_CMP_OPS (FloatComplexMatrix, FloatComplexMatrix)
 MM_BOOL_OPS (FloatComplexMatrix, FloatComplexMatrix)
diff --git a/liboctave/fCMatrix.h b/liboctave/fCMatrix.h
--- a/liboctave/fCMatrix.h
+++ b/liboctave/fCMatrix.h
@@ -403,16 +403,20 @@ extern OCTAVE_API FloatComplexMatrix ope
 extern OCTAVE_API FloatComplexMatrix min (const FloatComplex& c, const FloatComplexMatrix& m);
 extern OCTAVE_API FloatComplexMatrix min (const FloatComplexMatrix& m, const FloatComplex& c);
 extern OCTAVE_API FloatComplexMatrix min (const FloatComplexMatrix& a, const FloatComplexMatrix& b);
 
 extern OCTAVE_API FloatComplexMatrix max (const FloatComplex& c, const FloatComplexMatrix& m);
 extern OCTAVE_API FloatComplexMatrix max (const FloatComplexMatrix& m, const FloatComplex& c);
 extern OCTAVE_API FloatComplexMatrix max (const FloatComplexMatrix& a, const FloatComplexMatrix& b);
 
+extern OCTAVE_API FloatComplexMatrix linspace (const FloatComplexColumnVector& x1, 
+                                               const FloatComplexColumnVector& x2, 
+                                               octave_idx_type n);
+
 MS_CMP_OP_DECLS (FloatComplexMatrix, FloatComplex, OCTAVE_API)
 MS_BOOL_OP_DECLS (FloatComplexMatrix, FloatComplex, OCTAVE_API)
 
 SM_CMP_OP_DECLS (FloatComplex, FloatComplexMatrix, OCTAVE_API)
 SM_BOOL_OP_DECLS (FloatComplex, FloatComplexMatrix, OCTAVE_API)
 
 MM_CMP_OP_DECLS (FloatComplexMatrix, FloatComplexMatrix, OCTAVE_API)
 MM_BOOL_OP_DECLS (FloatComplexMatrix, FloatComplexMatrix, OCTAVE_API)
diff --git a/liboctave/fCRowVector.cc b/liboctave/fCRowVector.cc
--- a/liboctave/fCRowVector.cc
+++ b/liboctave/fCRowVector.cc
@@ -477,32 +477,25 @@ operator * (const FloatComplexRowVector&
   return retval;
 }
 
 // other operations
 
 FloatComplexRowVector
 linspace (const FloatComplex& x1, const FloatComplex& x2, octave_idx_type n)
 {
-  FloatComplexRowVector retval;
+  if (n < 1) n = 1;
+
+  NoAlias<FloatComplexRowVector> retval (n);
 
-  if (n > 0)
-    {
-      retval.resize (n);
-      FloatComplex delta = (x2 - x1) / static_cast<float> (n - 1.0);
-      retval.elem (0) = x1;
-      for (octave_idx_type i = 1; i < n-1; i++)
-	retval.elem (i) = x1 +  static_cast<float> (1.0) * i * delta;
-      retval.elem (n-1) = x2;
-    }
-  else
-    {
-      retval.resize (1);
-      retval.elem (0) = x2;
-    }
+  FloatComplex delta = (x2 - x1) / (n - 1.0f);
+  FloatComplex y = retval(0) = x1;
+  for (octave_idx_type i = 1; i < n-1; i++)
+    retval(i) = y += delta;
+  retval(n-1) = x2;
 
   return retval;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/liboctave/fMatrix.cc b/liboctave/fMatrix.cc
--- a/liboctave/fMatrix.cc
+++ b/liboctave/fMatrix.cc
@@ -3389,16 +3389,49 @@ max (const FloatMatrix& a, const FloatMa
       {
 	OCTAVE_QUIT;
 	result (i, j) = xmax (a (i, j), b (i, j));
       }
 
   return result;
 }
 
+FloatMatrix linspace (const FloatColumnVector& x1, 
+                      const FloatColumnVector& x2, 
+                      octave_idx_type n)
+
+{
+  if (n < 1) n = 1;
+
+  octave_idx_type m = x1.length ();
+
+  if (x2.length () != m)
+    (*current_liboctave_error_handler) ("linspace: vectors must be of equal length");
+
+  NoAlias<FloatMatrix> retval;
+
+  retval.clear (m, n);
+  for (octave_idx_type i = 0; i < m; i++)
+    retval(i, 0) = x1(i);
+
+  // The last column is not needed while using delta.
+  float *delta = &retval(0, 1); 
+  for (octave_idx_type i = 0; i < m; i++)
+    delta[i] = (x2(i) - x1(i)) / (n - 1);
+
+  for (octave_idx_type j = 1; j < n-1; j++)
+    for (octave_idx_type i = 0; i < m; i++)
+      retval(i, j) = retval(i, j-1) + delta[i];
+
+  for (octave_idx_type i = 0; i < m; i++)
+    retval(i, n-1) = x2(i);
+
+  return retval;
+}
+
 MS_CMP_OPS (FloatMatrix, float)
 MS_BOOL_OPS (FloatMatrix, float)
 
 SM_CMP_OPS (float, FloatMatrix)
 SM_BOOL_OPS (float, FloatMatrix)
 
 MM_CMP_OPS (FloatMatrix, FloatMatrix)
 MM_BOOL_OPS (FloatMatrix, FloatMatrix)
diff --git a/liboctave/fMatrix.h b/liboctave/fMatrix.h
--- a/liboctave/fMatrix.h
+++ b/liboctave/fMatrix.h
@@ -353,16 +353,21 @@ extern OCTAVE_API FloatMatrix operator *
 extern OCTAVE_API FloatMatrix min (float d, const FloatMatrix& m);
 extern OCTAVE_API FloatMatrix min (const FloatMatrix& m, float d);
 extern OCTAVE_API FloatMatrix min (const FloatMatrix& a, const FloatMatrix& b);
 
 extern OCTAVE_API FloatMatrix max (float d, const FloatMatrix& m);
 extern OCTAVE_API FloatMatrix max (const FloatMatrix& m, float d);
 extern OCTAVE_API FloatMatrix max (const FloatMatrix& a, const FloatMatrix& b);
 
+extern OCTAVE_API FloatMatrix linspace (const FloatColumnVector& x1, 
+                                        const FloatColumnVector& x2, 
+                                        octave_idx_type n);
+
+
 MS_CMP_OP_DECLS (FloatMatrix, float, OCTAVE_API)
 MS_BOOL_OP_DECLS (FloatMatrix, float, OCTAVE_API)
 
 SM_CMP_OP_DECLS (float, FloatMatrix, OCTAVE_API)
 SM_BOOL_OP_DECLS (float, FloatMatrix, OCTAVE_API)
 
 MM_CMP_OP_DECLS (FloatMatrix, FloatMatrix, OCTAVE_API)
 MM_BOOL_OP_DECLS (FloatMatrix, FloatMatrix, OCTAVE_API)
diff --git a/liboctave/fRowVector.cc b/liboctave/fRowVector.cc
--- a/liboctave/fRowVector.cc
+++ b/liboctave/fRowVector.cc
@@ -306,32 +306,25 @@ operator >> (std::istream& is, FloatRowV
   return is;
 }
 
 // other operations
 
 FloatRowVector
 linspace (float x1, float x2, octave_idx_type n)
 {
-  FloatRowVector retval;
+  if (n < 1) n = 1;
+
+  NoAlias<FloatRowVector> retval (n);
 
-  if (n > 1)
-    {
-      retval.resize (n);
-      float delta = (x2 - x1) / (n - 1);
-      retval.elem (0) = x1;
-      for (octave_idx_type i = 1; i < n-1; i++)
-	retval.elem (i) = x1 + i * delta;
-      retval.elem (n-1) = x2;
-    }
-  else
-    {
-      retval.resize (1);
-      retval.elem (0) = x2;
-    }
+  float delta = (x2 - x1) / (n - 1);
+  float y = retval(0) = x1;
+  for (octave_idx_type i = 1; i < n-1; i++)
+    retval(i) = y += delta;
+  retval(n-1) = x2;
 
   return retval;
 }
 
 // row vector by column vector -> scalar
 
 float
 operator * (const FloatRowVector& v, const FloatColumnVector& a)
