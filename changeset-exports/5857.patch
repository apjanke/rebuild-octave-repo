# HG changeset patch
# User jwe
# Date 1150217024 0
#      Tue Jun 13 16:43:44 2006 +0000
# Node ID 6a558a8763df809c02095347e61ff51ddb2229f2
# Parent  a4dc99e7175228b1c438590217539d7f634a1fad
[project @ 2006-06-13 16:43:44 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,14 @@
+2006-06-13  John W. Eaton  <jwe@octave.org>
+
+	* configure.in (--enable-64): Include "(EXPERIMENTAL)" in help text.
+	Also set warn_64_bit if no suitable type for octave_idx_type is found.
+	If --enable-64 is specified, print warning in summary message.
+
 2006-06-12  John W. Eaton  <jwe@octave.org>
 
 	* aclocal.m4 (OCTAVE_CXX_BROKEN_REINTERPRET_CAST): New macro.
 	* configure.in: Use it.
 	* AH_BOTTOM: Conditionally define FCN_PTR_CAST here.
 
 2006-06-08  John W. Eaton  <jwe@octave.org>
 
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -24,17 +24,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### Preserve CFLAGS and CXXFLAGS from the environment before doing
 ### anything else because we don't know which macros might call
 ### AC_PROG_CC or AC_PROG_CXX.
 
 EXTERN_CFLAGS="$CFLAGS"
 EXTERN_CXXFLAGS="$CXXFLAGS"
 
 AC_INIT
-AC_REVISION($Revision: 1.514 $)
+AC_REVISION($Revision: 1.515 $)
 AC_PREREQ(2.57)
 AC_CONFIG_SRCDIR([src/octave.cc])
 AC_CONFIG_HEADER(config.h)
 
 OCTAVE_HOST_TYPE
 
 AC_DEFINE(OCTAVE_SOURCE, 1, [Define if this is Octave.])
   
@@ -138,30 +138,31 @@ if $BOUNDS_CHECKING; then
 fi
 
 ### If possible, use a 64-bit integer type for array dimensions and indexing.
 
 USE_64_BIT_IDX_T=false
 OCTAVE_IDX_TYPE=int
 AC_ARG_ENABLE(64,
   [AS_HELP_STRING([--enable-64],
-     [use 64-bit integer for array dimensions and indexing])],
+     [(EXPERIMENTAL) use 64-bit integers for array dimensions and indexing])],
   [if test "$enableval" = yes; then USE_64_BIT_IDX_T=true; fi], [])
 if $USE_64_BIT_IDX_T; then
   AC_CHECK_SIZEOF(void *)
   AC_CHECK_SIZEOF(int)
   AC_CHECK_SIZEOF(long)
   if test $ac_cv_sizeof_void_p -eq 8; then
     if test $ac_cv_sizeof_int -eq 8; then
       OCTAVE_IDX_TYPE=int
     elif test $ac_cv_sizeof_long -eq 8; then
       OCTAVE_IDX_TYPE=long
       AC_DEFINE(IDX_TYPE_LONG, 1, [Define to 1 if octave index type is long])
     else
-      AC_MSG_WARN([no suitable type found for octave_idx_type so disabling 64-bit features])    
+      warn_64_bit="no suitable type found for octave_idx_type so disabling 64-bit features"
+      AC_MSG_WARN($warn_64_bit)
       USE_64_BIT_IDX_T=false
     fi
   else
     warn_64_bit="pointers are not 64-bits wide so disabling 64-bit features"
     AC_MSG_WARN($warn_64_bit)
     USE_64_BIT_IDX_T=false
   fi
 fi
@@ -1913,13 +1914,20 @@ if test -n "$warn_gnuplot"; then
   AC_MSG_WARN([tell Octave where to find it by typing the command])
   AC_MSG_WARN([])
   AC_MSG_WARN([gnuplot_binary = "/full/path/to/gnuplot/binary"])
   AC_MSG_WARN([])
   AC_MSG_WARN([at the Octave prompt.])
   warn_msg_printed=true
 fi
 
-if $warn_msg_printed; then
-  AC_MSG_NOTICE([])
+if $USE_64_BIT_IDX_T; then
+  AC_MSG_WARN([You used the EXPERIMENTAL --enable-64 option.])
+  AC_MSG_WARN([Are you sure that is what you want to do?])
+  AC_MSG_WARN([])
+  AC_MSG_WARN([You must ensure that the Fortran compiler generates])
+  AC_MSG_WARN([code with 8 byte signed INTEGER values, and that your])
+  AC_MSG_WARN([BLAS and LAPACK libraries are compiled to use 8 byte])
+  AC_MSG_WARN([signed integers for array indexing.])
+  warn_msg_printed=true
 fi
 
 ### End of configure.
