# HG changeset patch
# User Rik <rik@octave.org>
# Date 1418760452 28800
#      Tue Dec 16 12:07:32 2014 -0800
# Node ID c2f4f6eb590749f675b3b975e34d37e2d79e0558
# Parent  03067dab10ca55db6369f103a42612335ee2a87e
A few more instances of stricter input validation for strings (bug #42651).

* load-path.cc (Faddpath, Frmpath): Use is_string() to check string input.

* urlwrite.cc (Furlwrite, Furlread): Use is_string() to check string input.

* variables.cc (extract_function, set_internal_variable): Use is_string() to
check string input.

* ov-class.cc (Fclass): Use is_string() to check string input.

diff --git a/libinterp/corefcn/load-path.cc b/libinterp/corefcn/load-path.cc
--- a/libinterp/corefcn/load-path.cc
+++ b/libinterp/corefcn/load-path.cc
@@ -2432,20 +2432,20 @@ addpath (\"dir1:/dir2:~/dir3\")\n\
               return retval;
             }
         }
 
       bool need_to_update = false;
 
       for (int i = 0; i < nargin; i++)
         {
-          std::string arg = args(i).string_value ();
-
-          if (! error_state)
+          if (args(i).is_string ())
             {
+              std::string arg = args(i).string_value ();
+
               std::list<std::string> dir_elts = split_path (arg);
 
               if (! append)
                 std::reverse (dir_elts.begin (), dir_elts.end ());
 
               for (std::list<std::string>::const_iterator p = dir_elts.begin ();
                    p != dir_elts.end ();
                    p++)
@@ -2501,20 +2501,19 @@ rmpath (\"dir1:/dir2:~/dir3\")\n\
   int nargin = args.length ();
 
   if (nargin > 0)
     {
       bool need_to_update = false;
 
       for (int i = 0; i < nargin; i++)
         {
-          std::string arg = args(i).string_value ();
-
-          if (! error_state)
+          if (args(i).is_string ())
             {
+              std::string arg = args(i).string_value ();
               std::list<std::string> dir_elts = split_path (arg);
 
               for (std::list<std::string>::const_iterator p = dir_elts.begin ();
                    p != dir_elts.end ();
                    p++)
                 {
                   std::string dir = *p;
 
diff --git a/libinterp/corefcn/urlwrite.cc b/libinterp/corefcn/urlwrite.cc
--- a/libinterp/corefcn/urlwrite.cc
+++ b/libinterp/corefcn/urlwrite.cc
@@ -341,42 +341,47 @@ urlwrite (\"http://www.google.com/search
 
   // verify arguments
   if (nargin != 2 && nargin != 4)
     {
       print_usage ();
       return retval;
     }
 
-  std::string url = args(0).string_value ();
-
-  if (error_state)
+  if (! args(0).is_string ()) 
     {
       error ("urlwrite: URL must be a string");
       return retval;
     }
 
-  // name to store the file if download is succesful
-  // FIXME: Maybe use is_string () for better input validation.
-  std::string filename = args(1).string_value ();
+  std::string url = args(0).string_value ();
 
-  if (error_state)
+  if (! args(1).is_string ()) 
     {
       error ("urlwrite: LOCALFILE must be a string");
       return retval;
     }
 
+  // name to store the file if download is succesful
+  std::string filename = args(1).string_value ();
+
   std::string method;
   Array<std::string> param;
 
   if (nargin == 4)
     {
+      if (! args(2).is_string ()) 
+        {
+          error ("urlwrite: METHOD must be a string");
+          return retval;
+        }
+
       method = args(2).string_value ();
 
-      if (error_state || (method != "get" && method != "post"))
+      if (method != "get" && method != "post")
         {
           error ("urlwrite: METHOD must be \"get\" or \"post\"");
           return retval;
         }
 
       param = args(3).cellstr_value ();
 
       if (error_state)
@@ -493,34 +498,38 @@ s = urlread (\"http://www.google.com/sea
 
   // verify arguments
   if (nargin != 1 && nargin != 3)
     {
       print_usage ();
       return retval;
     }
 
-  // FIXME: Maybe use is_string () for better input validation.
-  std::string url = args(0).string_value ();
-
-  if (error_state)
+  if (! args(0).is_string ()) 
     {
       error ("urlread: URL must be a string");
       return retval;
     }
 
+  std::string url = args(0).string_value ();
+
   std::string method;
   Array<std::string> param;
 
   if (nargin == 3)
     {
-      // FIXME: Maybe use is_string () for better input validation.
+      if (! args(1).is_string ()) 
+        {
+          error ("urlread: METHOD must be a string");
+          return retval;
+        }
+
       method = args(1).string_value ();
 
-      if (error_state || (method != "get" && method != "post"))
+      if (method != "get" && method != "post")
         {
           error ("urlread: METHOD must be \"get\" or \"post\"");
           return retval;
         }
 
       param = args(2).cellstr_value ();
 
       if (error_state)
diff --git a/libinterp/corefcn/variables.cc b/libinterp/corefcn/variables.cc
--- a/libinterp/corefcn/variables.cc
+++ b/libinterp/corefcn/variables.cc
@@ -145,26 +145,24 @@ extract_function (const octave_value& ar
                   const std::string& trailer)
 {
   octave_function *retval = 0;
 
   retval = is_valid_function (arg, warn_for, 0);
 
   if (! retval)
     {
-      // FIXME: Should is_string () be used instead which will warn more
-      //        broadly about incorrect input?
-      std::string s = arg.string_value ();
-
-      std::string cmd = header;
-      cmd.append (s);
-      cmd.append (trailer);
-
-      if (! error_state)
+      if (arg.is_string ())
         {
+          std::string s = arg.string_value ();
+
+          std::string cmd = header;
+          cmd.append (s);
+          cmd.append (trailer);
+
           int parse_status;
 
           eval_string (cmd, true, parse_status, 0);
 
           if (parse_status == 0)
             {
               retval = is_valid_function (fname, warn_for, 0);
 
@@ -933,27 +931,27 @@ set_internal_variable (std::string& var,
   if (wants_local_change (args, nargin))
     {
       if (! try_local_protect (var))
         warning ("\"local\" has no effect outside a function");
     }
 
   if (nargin == 1)
     {
-      std::string sval = args(0).string_value ();
-
-      if (! error_state)
+      if (args(0).is_string ()) 
         {
+          std::string sval = args(0).string_value ();
+
           if (empty_ok || ! sval.empty ())
             var = sval;
           else
             error ("%s: value must not be empty", nm);
         }
       else
-        error ("%s: expecting arg to be a string", nm);
+        error ("%s: first argument must be a string", nm);
     }
   else if (nargin > 1)
     print_usage ();
 
   return retval;
 }
 
 octave_value
@@ -974,34 +972,34 @@ set_internal_variable (int& var, const o
   if (wants_local_change (args, nargin))
     {
       if (! try_local_protect (var))
         warning ("\"local\" has no effect outside a function");
     }
 
   if (nargin == 1)
     {
-      std::string sval = args(0).string_value ();
-
-      if (! error_state)
+      if (args(0).is_string ()) 
         {
+          std::string sval = args(0).string_value ();
+
           int i = 0;
           for (; i < nchoices; i++)
             {
               if (sval == choices[i])
                 {
                   var = i;
                   break;
                 }
             }
           if (i == nchoices)
             error ("%s: value not allowed (\"%s\")", nm, sval.c_str ());
         }
       else
-        error ("%s: expecting arg to be a string", nm);
+        error ("%s: first argument must be a string", nm);
     }
   else if (nargin > 1)
     print_usage ();
 
   return retval;
 }
 
 struct
diff --git a/libinterp/octave-value/ov-class.cc b/libinterp/octave-value/ov-class.cc
--- a/libinterp/octave-value/ov-class.cc
+++ b/libinterp/octave-value/ov-class.cc
@@ -1870,20 +1870,20 @@ derived.\n\
   else if (nargin == 1)
     // Called for class of object
     retval = args(0).class_name ();
   else
     {
       // Called as class constructor
       octave_function *fcn = octave_call_stack::caller ();
 
-      std::string id = args(1).string_value ();
+      if (args(1).is_string ())
+        {
+          std::string id = args(1).string_value ();
 
-      if (! error_state)
-        {
           if (fcn)
             {
               if (fcn->is_class_constructor (id) || fcn->is_class_method (id))
                 {
                   octave_map m = args(0).map_value ();
 
                   if (! error_state)
                     {
