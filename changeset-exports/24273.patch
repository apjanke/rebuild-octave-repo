# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1510940068 0
#      Fri Nov 17 17:34:28 2017 +0000
# Node ID 52023a3fe71394e6ef08cf33ee036eadf8f23104
# Parent  dd810f9d26e7955ea9cebe78c50f816048b02c2f
scripts/specfun/perms.m: support data of any indexable type (bug #52431)

* scripts/specfun/perms.m: anything that can be indexed can be permuted
  so extend to all types.  Also, order of output is only dependent on the
  actual values for numeric and character arrays for Matlab compatibility.

diff --git a/scripts/specfun/perms.m b/scripts/specfun/perms.m
--- a/scripts/specfun/perms.m
+++ b/scripts/specfun/perms.m
@@ -52,34 +52,37 @@
 ## a later version of Octave the index variables here can be made uint8.
 
 function A = perms (v)
 
   if (nargin != 1)
     print_usage ();
   endif
 
-  if (! (isreal (v) || iscomplex (v)))
-    error ("perms: V must be a numeric, char, or logical vector");
+  v = v(:).';
+  if (isnumeric (v) || ischar (v))
+    ## Order of output is only dependent on the actual values for
+    ## character and numeric arrays.
+    v = sort (v, "ascend");
   endif
-  v = sort (reshape (v, 1, []), "descend");
-  n = length (v);
+  n = numel (v);
 
   if (n < 4)    # special cases for small n
     switch (n)
       case 0
         A = reshape (v, 1, 0);
       case 1
         A = v;
       case 2
-        A = [v;v([2 1])];
+        A = [v([2 1]);v];
       case 3
-        A = v([1, 2, 3; 1, 3, 2; 2, 1, 3; 2, 3, 1; 3, 1, 2; 3, 2, 1]);
+        A = v([3 2 1; 3 1 2; 2 3 1; 2 1 3; 1 3 2; 1 2 3]);
     endswitch
   else
+    v = v(end:-1:1);
     n-= 1;
 
     idx = zeros (factorial (n), n);
     idx(1:6, n-2:n) = [1, 2, 3;1, 3, 2;2, 1, 3;2, 3, 1;3, 1, 2;3, 2, 1]+(n-3);
     f = 2;    # jump-start for efficiency with medium n
     for j = 3:n-1
       b = 1:n;
       f *= j;
@@ -94,17 +97,17 @@ function A = perms (v)
     n += 1;
     f *= n-1;
     A = v(1)(ones (factorial (n), n));
     A(:,1) = v(ones (f, 1),:)(:);
 
     for i = 1:n
       b = v([1:i-1 i+1:n]);
       A((1:f)+(i-1)*f, 2:end) = b(idx);
-    end
+    endfor
   endif
 
 endfunction
 
 
 %!assert (rows (perms (1:6)), factorial (6))
 %!assert (perms (pi), pi)
 %!assert (perms ([pi, e]), [pi, e; e, pi])
@@ -125,23 +128,39 @@ endfunction
 %! assert (perms ({0.1, "foo"}),
 %!         {"foo", 0.1; 0.1, "foo"})
 %! assert (perms ({"foo", 0.1}),
 %!         {0.1, "foo"; "foo", 0.1})
 %! assert (perms ({"foo"; 0.1}),
 %!         {0.1, "foo"; "foo", 0.1})
 %! assert (perms ({0.1; "foo"}),
 %!         {"foo", 0.1; 0.1, "foo"})
+%! assert (perms ({"foo", "bar"}),
+%!         {"bar", "foo"; "foo", "bar"})
+%! assert (perms ({"bar", "foo"}),
+%!         {"foo", "bar"; "bar", "foo"})
 %!
 %! assert (perms (struct ()), struct ())
 %! assert (perms (struct ("foo", {1, 2})),
 %!         struct ("foo", {2, 1; 1, 2}))
 %! assert (perms (struct ("foo", {1, 2}, "bar", {3, 4})),
 %!         struct ("foo", {2, 1; 1, 2}, "bar", {4, 3; 3, 4}))
 
+## Also sort logical input with order dependent on the input order and
+## not their values.
+%!test <52431>
+%! assert (perms (logical ([1 0])),
+%!         logical ([0 1;, 1 0]))
+%! assert (perms (logical ([0 1])),
+%!         logical ([1 0; 0 1]))
+%! assert (perms (logical ([0 1 0])),
+%!         logical ([0 1 0; 0 0 1; 1 0 0; 1 0 0; 0 0 1; 0 1 0]))
+%! assert (perms (logical ([0 1 1])),
+%!         logical ([1 1 0; 1 0 1; 1 1 0; 1 0 1; 0 1 1; 0 1 1]))
+
 %!test <52432>
 %! assert (perms ([]), reshape ([], 1, 0))
 %! assert (perms (single ([])), reshape (single ([]), 1, 0))
 %! assert (perms (int8 ([])), reshape (int8 ([]), 1, 0))
 %! assert (perms ({}), cell (1, 0))
 %!
 %! s = struct ();
 %! s(1) = [];
