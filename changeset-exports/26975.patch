# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1553568158 0
#      Tue Mar 26 02:42:38 2019 +0000
# Node ID de826e69a5ea56a4f9e7790e43472f30386ebec3
# Parent  aa50801747a935adc1cd6ee8a76c02189e3ad06a
make breakpoints in classdef methods work (bug #45404, bug #46451)

* bp-table.h, bp-table.cc (bp_table::add_breakpoint): New argument,
CLASS_NAME.  Change all uses.  Pass class name on to
tree_evaluator::get_user_code.

* cdef-class.h, cdef-class.cc (cdef_class::get_method,
cdef_class::cdef_class_rep::get_method): New functions.

* cdef-manager.h, cdef-manager.cc (cdef_manager::find_method):
New function.

* pt-eval.h, pt-eval.cc (tree_evaluator::get_user_code): New argument,
CLASS_NAME.  If given class name, look for classdef methods.

diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -1021,17 +1021,17 @@ namespace octave
   {
     bp_table::intmap line_info;
     line_info[0] = info.line;
 
     if (octave_qt_link::file_in_path (info.file, info.dir))
       {
         bp_table& bptab = __get_bp_table__ ("octave_qt_link::file_in_path");
 
-        bptab.add_breakpoint (info.function_name, line_info, info.condition);
+        bptab.add_breakpoint (info.function_name, "", line_info, info.condition);
       }
   }
 
   void file_editor_tab::remove_breakpoint_callback (const bp_info& info)
   {
     bp_table::intmap line_info;
     line_info[0] = info.line;
 
diff --git a/libinterp/corefcn/debug.cc b/libinterp/corefcn/debug.cc
--- a/libinterp/corefcn/debug.cc
+++ b/libinterp/corefcn/debug.cc
@@ -191,17 +191,18 @@ all breakpoints within the file are clea
       bptab.parse_dbfunction_params ("dbstop", args, symbol_name,
                                      class_name, lines, condition);
 
       if (lines.size () == 0)
         lines[0] = 1;
 
       if (symbol_name != "")
         {
-          retmap = bptab.add_breakpoint (symbol_name, lines, condition);
+          retmap = bptab.add_breakpoint (symbol_name, class_name,
+                                         lines, condition);
           retval = intmap_to_ov (retmap);
         }
     }
   else if (args.length () != 1)
     {
       print_usage ();
     }
   else  // structure of the form output by dbstatus
@@ -242,17 +243,17 @@ all breakpoints within the file are clea
           bool use_cond = mv.isfield ("cond");
           Cell name = mv.getfield ("name");
           Cell line = mv.getfield ("line");
           Cell cond = (use_cond ? mv.getfield ("cond") : Cell ());
           std::string unconditional = "";
           for (octave_idx_type i = 0; i < line.numel (); i++)
             {
               lines [0] = line(i).double_value ();
-              bptab.add_breakpoint (name(i).string_value (), lines,
+              bptab.add_breakpoint (name(i).string_value (), "", lines,
                                     (use_cond
                                      ? cond(i).string_value ()
                                      : unconditional));
             }
           retval = octave_value (line.numel ());
         }
     }
 
diff --git a/libinterp/octave-value/cdef-class.cc b/libinterp/octave-value/cdef-class.cc
--- a/libinterp/octave-value/cdef-class.cc
+++ b/libinterp/octave-value/cdef-class.cc
@@ -698,16 +698,28 @@ namespace octave
 
         obj = to_cdef (ctor_retval(0));
       }
 
     obj.mark_as_constructed (wrap ());
   }
 
   octave_value
+  cdef_class::cdef_class_rep::get_method (const std::string& name) const
+  {
+    auto p = method_map.find (name);
+
+    if (p == method_map.end ())
+      return octave_value ();
+
+    return p->second.get_function ();
+  }
+
+
+  octave_value
   cdef_class::cdef_class_rep::construct (const octave_value_list& args)
   {
     cdef_object obj = construct_object (args);
 
     if (obj.ok ())
       return to_ov (obj);
 
     return octave_value ();
diff --git a/libinterp/octave-value/cdef-class.h b/libinterp/octave-value/cdef-class.h
--- a/libinterp/octave-value/cdef-class.h
+++ b/libinterp/octave-value/cdef-class.h
@@ -107,16 +107,18 @@ namespace octave
 
       void meta_release (void);
 
       bool meta_accepts_postfix_index (char type) const
       {
         return (type == '(' || type == '.');
       }
 
+      octave_value get_method (const std::string& name) const;
+
       octave_value construct (const octave_value_list& args);
 
       cdef_object construct_object (const octave_value_list& args);
 
       void initialize_object (cdef_object& obj);
 
       void run_constructor (cdef_object& obj, const octave_value_list& args);
 
@@ -330,16 +332,21 @@ namespace octave
     //!
     //! will fail because each attempt to compute the metaclass of
     //! recursion_class will cause recursion_class to be parsed again.
 
     static cdef_class
     make_meta_class (interpreter& interp, tree_classdef *t,
                      bool is_at_folder = false);
 
+    octave_value get_method (const std::string& nm) const
+    {
+      return get_rep ()->get_method (nm);
+    }
+
     octave_function * get_method_function (const std::string& nm);
 
     octave_function * get_constructor_function (void)
     {
       return get_method_function (get_name ());
     }
 
     octave_value construct (const octave_value_list& args)
diff --git a/libinterp/octave-value/cdef-manager.cc b/libinterp/octave-value/cdef-manager.cc
--- a/libinterp/octave-value/cdef-manager.cc
+++ b/libinterp/octave-value/cdef-manager.cc
@@ -931,9 +931,18 @@ namespace octave
     else
       pack.put ("ContainingPackage", to_ov (find_package (parent)));
 
     if (! nm.empty ())
       register_package (pack);
 
     return pack;
   }
+
+  octave_value
+  cdef_manager::find_method (const std::string& class_name,
+                             const std::string& name) const
+  {
+    cdef_class cls = lookup_class (class_name);
+
+    return cls.get_method (name);
+  }
 }
diff --git a/libinterp/octave-value/cdef-manager.h b/libinterp/octave-value/cdef-manager.h
--- a/libinterp/octave-value/cdef-manager.h
+++ b/libinterp/octave-value/cdef-manager.h
@@ -125,16 +125,19 @@ namespace octave
       make_method (const cdef_class& cls, const std::string& name,
                    octave_builtin::meth mm,
                    const std::string& m_access = "public",
                    bool is_static = false);
 
     cdef_package
       make_package (const std::string& nm, const std::string& parent = "");
 
+    octave_value find_method (const std::string& class_name,
+                              const std::string& name) const;
+
   private:
 
     interpreter& m_interpreter;
 
     // All registered/loaded classes
     std::map<std::string, cdef_class> m_all_classes;
 
     // All registered/loaded packages
diff --git a/libinterp/parse-tree/bp-table.cc b/libinterp/parse-tree/bp-table.cc
--- a/libinterp/parse-tree/bp-table.cc
+++ b/libinterp/parse-tree/bp-table.cc
@@ -576,20 +576,21 @@ namespace octave
       *end_line = earliest_end;
 
     return retval;
   }
 
   // Given file name fname, find the subfunction at line and create
   // a breakpoint there.  Put the system into debug_mode.
   bp_table::intmap bp_table::add_breakpoint (const std::string& fname,
+                                             const std::string& class_name,
                                              const bp_table::intmap& line,
                                              const std::string& condition)
   {
-    octave_user_code *main_fcn = m_evaluator.get_user_code (fname);
+    octave_user_code *main_fcn = m_evaluator.get_user_code (fname, class_name);
 
     if (! main_fcn)
       error ("add_breakpoint: unable to find function '%s'\n", fname.c_str ());
 
     condition_valid (condition);  // Throw error if condition not valid.
 
     intmap retval;
 
diff --git a/libinterp/parse-tree/bp-table.h b/libinterp/parse-tree/bp-table.h
--- a/libinterp/parse-tree/bp-table.h
+++ b/libinterp/parse-tree/bp-table.h
@@ -70,16 +70,17 @@ namespace octave
     typedef fname_line_map::iterator fname_line_map_iterator;
 
     typedef std::map <std::string, std::list<bp_type>> fname_bp_map;
     typedef fname_bp_map::const_iterator const_fname_bp_map_iterator;
     typedef fname_bp_map::iterator fname_bp_map_iterator;
 
     // Add a breakpoint at the nearest executable line.
     intmap add_breakpoint (const std::string& fname = "",
+                           const std::string& class_name = "",
                            const intmap& lines = intmap (),
                            const std::string& condition = "");
 
     // Remove a breakpoint from a line in file.
     int remove_breakpoint (const std::string& fname = "",
                            const intmap& lines = intmap ());
 
     // Remove all the breakpoints in a specified file.
diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -31,16 +31,17 @@ along with Octave; see the file COPYING.
 #include <string>
 
 #include "cmd-edit.h"
 #include "file-ops.h"
 #include "oct-env.h"
 
 #include "bp-table.h"
 #include "call-stack.h"
+#include "cdef-manager.h"
 #include "defun.h"
 #include "error.h"
 #include "errwarn.h"
 #include "input.h"
 #include "interpreter-private.h"
 #include "interpreter.h"
 #include "ov-classdef.h"
 #include "ov-fcn-handle.h"
@@ -1340,17 +1341,18 @@ namespace octave
     return m_call_stack.variable_names ();
   }
 
   // Return a pointer to the user-defined function FNAME.  If FNAME is empty,
   // search backward for the first user-defined function in the
   // current call stack.
 
   octave_user_code *
-  tree_evaluator::get_user_code (const std::string& fname)
+  tree_evaluator::get_user_code (const std::string& fname,
+                                 const std::string& class_name)
   {
     octave_user_code *user_code = nullptr;
 
     if (fname.empty ())
       user_code = m_call_stack.debug_user_code ();
     else
       {
         std::string name = fname;
@@ -1368,33 +1370,43 @@ namespace octave
           name = name.substr (0, name_len-2);
 
         if (name.empty ())
           return nullptr;
 
         symbol_table& symtab = m_interpreter.get_symbol_table ();
 
         octave_value fcn;
-        size_t p2;
+        size_t p2 = std::string::npos;
 
         if (name[0] == '@')
           {
             size_t p1 = name.find (sys::file_ops::dir_sep_char (), 1);
 
             if (p1 == std::string::npos)
               return nullptr;
 
             std::string dispatch_type = name.substr (1, p1-1);
 
             p2 = name.find ('>', p1);
 
             std::string method = name.substr (p1+1, p2-1);
 
             fcn = symtab.find_method (method, dispatch_type);
           }
+        else if (! class_name.empty ())
+          {
+            cdef_manager& cdm = m_interpreter.get_cdef_manager ();
+
+            fcn = cdm.find_method (class_name, name);
+
+            // If there is no classdef method, then try legacy classes.
+            if (fcn.is_undefined ())
+              fcn = symtab.find_method (name, class_name);
+          }
         else
           {
             p2 = name.find ('>');
 
             std::string main_fcn = name.substr (0, p2);
 
             fcn = symtab.find_function (main_fcn);
           }
diff --git a/libinterp/parse-tree/pt-eval.h b/libinterp/parse-tree/pt-eval.h
--- a/libinterp/parse-tree/pt-eval.h
+++ b/libinterp/parse-tree/pt-eval.h
@@ -476,17 +476,18 @@ namespace octave
     void clear_symbol_pattern (const std::string& pattern);
 
     void clear_symbol_regexp (const std::string& pattern);
 
     std::list<std::string> global_variable_names (void) const;
 
     std::list<std::string> variable_names (void) const;
 
-    octave_user_code * get_user_code (const std::string& fname = "");
+    octave_user_code * get_user_code (const std::string& fname = "",
+                                      const std::string& class_name = "");
 
     int max_recursion_depth (void) const { return m_max_recursion_depth; }
 
     int max_recursion_depth (int n)
     {
       int val = m_max_recursion_depth;
       m_max_recursion_depth = n;
       return val;
