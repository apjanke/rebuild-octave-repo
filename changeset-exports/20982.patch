# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1451022481 18000
#      Fri Dec 25 00:48:01 2015 -0500
# Node ID d27f66b4b8e6a3bb31d61f1c44ccab8a8ed7dddf
# Parent  c11cea70b638d3d6f0746ca6170a3d64add36c08
maint: invert if/else/error instances.

* oct-map.cc, oct-stream.cc, sparse-xpow.cc, symtab.h, typecast.cc,
urlwrite.cc: Invert if/else/error instances.

diff --git a/libinterp/corefcn/oct-map.cc b/libinterp/corefcn/oct-map.cc
--- a/libinterp/corefcn/oct-map.cc
+++ b/libinterp/corefcn/oct-map.cc
@@ -260,26 +260,24 @@ octave_map::getfield (const std::string&
 }
 
 void
 octave_map::setfield (const std::string& k, const Cell& val)
 {
   if (nfields () == 0)
     dimensions = val.dims ();
 
-  if (val.dims () == dimensions)
-    {
-      octave_idx_type idx = xkeys.getfield (k);
-      if (idx < static_cast<octave_idx_type> (xvals.size ()))
-        xvals[idx] = val;
-      else
-        xvals.push_back (val);
-    }
+  if (val.dims () != dimensions)
+    error ("octave_map::setfield: internal error");
+
+  octave_idx_type idx = xkeys.getfield (k);
+  if (idx < static_cast<octave_idx_type> (xvals.size ()))
+    xvals[idx] = val;
   else
-    error ("octave_map::setfield: internal error");
+    xvals.push_back (val);
 }
 
 void
 octave_map::rmfield (const std::string& k)
 {
   octave_idx_type idx = xkeys.rmfield (k);
   if (idx >= 0)
     xvals.erase (xvals.begin () + idx);
diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -114,21 +114,21 @@ get_size (double d, const std::string& w
 
   if (lo_ieee_isnan (d))
     ::error ("%s: NaN is invalid as size specification", who.c_str ());
 
   if (xisinf (d))
     retval = -1;
   else
     {
-      if (d >= 0.0)
-        retval = NINT (d);
-      else
+      if (d < 0.0)
         ::error ("%s: negative value invalid as size specification",
                  who.c_str ());
+
+      retval = NINT (d);
     }
 
   return retval;
 }
 
 static void
 get_size (const Array<double>& size, octave_idx_type& nr, octave_idx_type& nc,
           bool& one_elt_size_spec, const std::string& who)
@@ -150,20 +150,20 @@ get_size (const Array<double>& size, oct
       dnr = size(0);
 
       dnc = (dnr == 0.0) ? 0.0 : 1.0;
     }
   else if (sz_len == 2)
     {
       dnr = size(0);
 
-      if (! xisinf (dnr))
-        dnc = size(1);
-      else
+      if (xisinf (dnr))
         ::error ("%s: invalid size specification", who.c_str ());
+
+      dnc = size(1);
     }
   else
     ::error ("%s: invalid size specification", who.c_str ());
 
   nr = get_size (dnr, who);
 
   if (dnc >= 0.0)
     nc = get_size (dnc, who);
@@ -2618,91 +2618,89 @@ octave_base_stream::do_printf (printf_fo
       const printf_format_elt *elt = fmt_list.first ();
 
       printf_value_cache val_cache (args, who);
 
       for (;;)
         {
           octave_quit ();
 
-          if (elt)
+          if (! elt)
+            ::error ("%s: internal error handling format", who.c_str ());
+
+          // NSA is the number of 'star' args to convert.
+          int nsa = (elt->fw == -2) + (elt->prec == -2);
+
+          int sa_1 = 0;
+          int sa_2 = 0;
+
+          if (nsa > 0)
             {
-              // NSA is the number of 'star' args to convert.
-              int nsa = (elt->fw == -2) + (elt->prec == -2);
-
-              int sa_1 = 0;
-              int sa_2 = 0;
-
-              if (nsa > 0)
+              sa_1 = val_cache.int_value ();
+
+              if (! val_cache)
+                break;
+              else
                 {
-                  sa_1 = val_cache.int_value ();
-
-                  if (! val_cache)
-                    break;
-                  else
+                  if (nsa > 1)
                     {
-                      if (nsa > 1)
-                        {
-                          sa_2 = val_cache.int_value ();
-
-                          if (! val_cache)
-                            break;
-                        }
+                      sa_2 = val_cache.int_value ();
+
+                      if (! val_cache)
+                        break;
                     }
                 }
-
-              if (elt->type == '%')
-                {
-                  os << "%";
-                  retval++;
-                }
-              else if (elt->args == 0 && elt->text)
-                {
-                  os << elt->text;
-                  retval += strlen (elt->text);
-                }
-              else if (elt->type == 's' || elt->type == 'c')
+            }
+
+          if (elt->type == '%')
+            {
+              os << "%";
+              retval++;
+            }
+          else if (elt->args == 0 && elt->text)
+            {
+              os << elt->text;
+              retval += strlen (elt->text);
+            }
+          else if (elt->type == 's' || elt->type == 'c')
+            {
+              octave_value val = val_cache.get_next_value (elt->type);
+
+              if (val_cache)
                 {
-                  octave_value val = val_cache.get_next_value (elt->type);
-
-                  if (val_cache)
+                  if (val.is_string ())
                     {
-                      if (val.is_string ())
-                        {
-                          std::string sval = val.string_value ();
-
-                          retval += do_printf_string (os, elt, nsa, sa_1,
-                                                      sa_2, sval, who);
-                        }
-                      else
-                        retval += do_numeric_printf_conv (os, elt, nsa, sa_1,
-                                                          sa_2, val, who);
+                      std::string sval = val.string_value ();
+
+                      retval += do_printf_string (os, elt, nsa, sa_1,
+                                                  sa_2, sval, who);
                     }
                   else
-                    break;
-                }
-              else
-                {
-                  octave_value val = val_cache.get_next_value ();
-
-                  if (val_cache)
                     retval += do_numeric_printf_conv (os, elt, nsa, sa_1,
                                                       sa_2, val, who);
-                  else
-                    break;
                 }
-
-              if (! os)
-                {
-                  error ("%s: write error", who.c_str ());
-                  break;
-                }
+              else
+                break;
             }
           else
-            ::error ("%s: internal error handling format", who.c_str ());
+            {
+              octave_value val = val_cache.get_next_value ();
+
+              if (val_cache)
+                retval += do_numeric_printf_conv (os, elt, nsa, sa_1,
+                                                  sa_2, val, who);
+              else
+                break;
+            }
+
+          if (! os)
+            {
+              error ("%s: write error", who.c_str ());
+              break;
+            }
 
           elt = fmt_list.next (nconv > 0 && ! val_cache.exhausted ());
 
           if (! elt || (val_cache.exhausted () && elt->args > 0))
             break;
         }
     }
 
@@ -3039,27 +3037,25 @@ octave_stream::seek (const octave_value&
             origin = SEEK_CUR;
           else if (xorigin == 1)
             origin = SEEK_END;
           else
             conv_err = -1;
         }
     }
 
-  if (! conv_err)
-    {
-      retval = seek (xoffset, origin);
-
-      if (retval != 0)
-        // Note: error is member fcn from octave_stream, not ::error.
-        error ("fseek: failed to seek to requested position");
-    }
-  else
+  if (conv_err)
     ::error ("fseek: invalid value for origin");
 
+  retval = seek (xoffset, origin);
+
+  if (retval != 0)
+    // Note: error is member fcn from octave_stream, not ::error.
+    error ("fseek: failed to seek to requested position");
+
   return retval;
 }
 
 off_t
 octave_stream::tell (void)
 {
   off_t retval = -1;
 
@@ -4146,103 +4142,92 @@ octave_stream_list::do_insert (octave_st
   // and respond with "error ("internal error: ...")"?  It should not
   // happen except for some bug or if the user has opened a stream with
   // an interpreted command, but closed it directly with a system call
   // in an oct-file; then the kernel knows the fd is free, but Octave
   // does not know.  If it happens, it should not do harm here to simply
   // overwrite this entry, although the wrong entry might have done harm
   // before.
 
-  if (list.size () < list.max_size ())
-    list[stream_number] = os;
-  else
+  if (list.size () >= list.max_size ())
     ::error ("could not create file id");
 
+  list[stream_number] = os;
+
   return stream_number;
-
 }
 
 static void
+gripe_invalid_file_id (int fid, const std::string& who) GCC_ATTR_NORETURN;
+
+static void
 gripe_invalid_file_id (int fid, const std::string& who)
 {
   if (who.empty ())
     ::error ("invalid stream number = %d", fid);
   else
     ::error ("%s: invalid stream number = %d", who.c_str (), fid);
 }
 
 octave_stream
 octave_stream_list::do_lookup (int fid, const std::string& who) const
 {
   octave_stream retval;
 
-  if (fid >= 0)
+  if (fid < 0)
+    gripe_invalid_file_id (fid, who);
+
+  if (lookup_cache != list.end () && lookup_cache->first == fid)
+    retval = lookup_cache->second;
+  else
     {
-      if (lookup_cache != list.end () && lookup_cache->first == fid)
-        retval = lookup_cache->second;
-      else
-        {
-          ostrl_map::const_iterator iter = list.find (fid);
-
-          if (iter != list.end ())
-            {
-              retval = iter->second;
-              lookup_cache = iter;
-            }
-          else
-            gripe_invalid_file_id (fid, who);
-        }
+      ostrl_map::const_iterator iter = list.find (fid);
+
+      if (iter == list.end ())
+        gripe_invalid_file_id (fid, who);
+
+      retval = iter->second;
+      lookup_cache = iter;
     }
-  else
-    gripe_invalid_file_id (fid, who);
 
   return retval;
 }
 
 octave_stream
 octave_stream_list::do_lookup (const octave_value& fid,
                                const std::string& who) const
 {
   int i = get_file_number (fid);
 
   return do_lookup (i, who);
 }
 
 int
 octave_stream_list::do_remove (int fid, const std::string& who)
 {
-  int retval = -1;
-
   // Can't remove stdin (std::cin), stdout (std::cout), or stderr (std::cerr).
   if (fid < 3)
     gripe_invalid_file_id (fid, who);
-  else
-    {
-      ostrl_map::iterator iter = list.find (fid);
-
-      if (iter == list.end ())
-        gripe_invalid_file_id (fid, who);
-      else
-        {
-          octave_stream os = iter->second;
-          list.erase (iter);
-          lookup_cache = list.end ();
-
-          // FIXME: is this check redundant?
-          if (os.is_valid ())
-            {
-              os.close ();
-              retval = 0;
-            }
-          else
-            gripe_invalid_file_id (fid, who);
-        }
-    }
-
-  return retval;
+
+  ostrl_map::iterator iter = list.find (fid);
+
+  if (iter == list.end ())
+    gripe_invalid_file_id (fid, who);
+
+  octave_stream os = iter->second;
+  list.erase (iter);
+  lookup_cache = list.end ();
+
+  // FIXME: is this check redundant?
+  if (! os.is_valid ())
+    gripe_invalid_file_id (fid, who);
+
+  os.close ();
+
+  return 0;
 }
 
 int
 octave_stream_list::do_remove (const octave_value& fid, const std::string& who)
 {
   int retval = -1;
 
   if (fid.is_string () && fid.string_value () == "all")
diff --git a/libinterp/corefcn/sparse-xpow.cc b/libinterp/corefcn/sparse-xpow.cc
--- a/libinterp/corefcn/sparse-xpow.cc
+++ b/libinterp/corefcn/sparse-xpow.cc
@@ -60,147 +60,139 @@ xpow (const SparseMatrix& a, double b)
 {
   octave_value retval;
 
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
     error ("for A^b, A must be a square matrix. Use .^ for elementwise power.");
+
+  if (static_cast<int> (b) != b)
+    error ("use full(a) ^ full(b)");
+
+  int btmp = static_cast<int> (b);
+  if (btmp == 0)
+    {
+      SparseMatrix tmp = SparseMatrix (nr, nr, nr);
+      for (octave_idx_type i = 0; i < nr; i++)
+        {
+          tmp.data (i) = 1.0;
+          tmp.ridx (i) = i;
+        }
+      for (octave_idx_type i = 0; i < nr + 1; i++)
+        tmp.cidx (i) = i;
+
+      retval = tmp;
+    }
   else
     {
-      if (static_cast<int> (b) == b)
+      SparseMatrix atmp;
+      if (btmp < 0)
         {
-          int btmp = static_cast<int> (b);
-          if (btmp == 0)
-            {
-              SparseMatrix tmp = SparseMatrix (nr, nr, nr);
-              for (octave_idx_type i = 0; i < nr; i++)
-                {
-                  tmp.data (i) = 1.0;
-                  tmp.ridx (i) = i;
-                }
-              for (octave_idx_type i = 0; i < nr + 1; i++)
-                tmp.cidx (i) = i;
-
-              retval = tmp;
-            }
-          else
-            {
-              SparseMatrix atmp;
-              if (btmp < 0)
-                {
-                  btmp = -btmp;
-
-                  octave_idx_type info;
-                  double rcond = 0.0;
-                  MatrixType mattyp (a);
+          btmp = -btmp;
 
-                  atmp = a.inverse (mattyp, info, rcond, 1);
-
-                  if (info == -1)
-                    warning ("inverse: matrix singular to machine\
- precision, rcond = %g", rcond);
-                }
-              else
-                atmp = a;
-
-              SparseMatrix result (atmp);
-
-              btmp--;
+          octave_idx_type info;
+          double rcond = 0.0;
+          MatrixType mattyp (a);
 
-              while (btmp > 0)
-                {
-                  if (btmp & 1)
-                    result = result * atmp;
-
-                  btmp >>= 1;
+          atmp = a.inverse (mattyp, info, rcond, 1);
 
-                  if (btmp > 0)
-                    atmp = atmp * atmp;
-                }
-
-              retval = result;
-            }
+          if (info == -1)
+            warning ("inverse: matrix singular to machine\
+ precision, rcond = %g", rcond);
         }
       else
-        error ("use full(a) ^ full(b)");
+        atmp = a;
+
+      SparseMatrix result (atmp);
+
+      btmp--;
+
+      while (btmp > 0)
+        {
+          if (btmp & 1)
+            result = result * atmp;
+
+          btmp >>= 1;
+
+          if (btmp > 0)
+            atmp = atmp * atmp;
+        }
+
+      retval = result;
     }
 
   return retval;
 }
 
 octave_value
 xpow (const SparseComplexMatrix& a, double b)
 {
   octave_value retval;
 
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
     error ("for A^b, A must be a square matrix. Use .^ for elementwise power.");
+
+  if (static_cast<int> (b) != b)
+    error ("use full(a) ^ full(b)");
+
+  int btmp = static_cast<int> (b);
+  if (btmp == 0)
+    {
+      SparseMatrix tmp = SparseMatrix (nr, nr, nr);
+      for (octave_idx_type i = 0; i < nr; i++)
+        {
+          tmp.data (i) = 1.0;
+          tmp.ridx (i) = i;
+        }
+      for (octave_idx_type i = 0; i < nr + 1; i++)
+        tmp.cidx (i) = i;
+
+      retval = tmp;
+    }
   else
     {
-      if (static_cast<int> (b) == b)
+      SparseComplexMatrix atmp;
+      if (btmp < 0)
         {
-          int btmp = static_cast<int> (b);
-          if (btmp == 0)
-            {
-              SparseMatrix tmp = SparseMatrix (nr, nr, nr);
-              for (octave_idx_type i = 0; i < nr; i++)
-                {
-                  tmp.data (i) = 1.0;
-                  tmp.ridx (i) = i;
-                }
-              for (octave_idx_type i = 0; i < nr + 1; i++)
-                tmp.cidx (i) = i;
-
-              retval = tmp;
-            }
-          else
-            {
-              SparseComplexMatrix atmp;
-              if (btmp < 0)
-                {
-                  btmp = -btmp;
-
-                  octave_idx_type info;
-                  double rcond = 0.0;
-                  MatrixType mattyp (a);
+          btmp = -btmp;
 
-                  atmp = a.inverse (mattyp, info, rcond, 1);
-
-                  if (info == -1)
-                    warning ("inverse: matrix singular to machine\
- precision, rcond = %g", rcond);
-                }
-              else
-                atmp = a;
-
-              SparseComplexMatrix result (atmp);
-
-              btmp--;
+          octave_idx_type info;
+          double rcond = 0.0;
+          MatrixType mattyp (a);
 
-              while (btmp > 0)
-                {
-                  if (btmp & 1)
-                    result = result * atmp;
-
-                  btmp >>= 1;
+          atmp = a.inverse (mattyp, info, rcond, 1);
 
-                  if (btmp > 0)
-                    atmp = atmp * atmp;
-                }
-
-              retval = result;
-            }
+          if (info == -1)
+            warning ("inverse: matrix singular to machine\
+ precision, rcond = %g", rcond);
         }
       else
-        error ("use full(a) ^ full(b)");
+        atmp = a;
+
+      SparseComplexMatrix result (atmp);
+
+      btmp--;
+
+      while (btmp > 0)
+        {
+          if (btmp & 1)
+            result = result * atmp;
+
+          btmp >>= 1;
+
+          if (btmp > 0)
+            atmp = atmp * atmp;
+        }
+
+      retval = result;
     }
 
   return retval;
 }
 
 // Safer pow functions that work elementwise for matrices.
 //
 //       op2 \ op1:   s   m   cs   cm
diff --git a/libinterp/corefcn/symtab.h b/libinterp/corefcn/symtab.h
--- a/libinterp/corefcn/symtab.h
+++ b/libinterp/corefcn/symtab.h
@@ -137,23 +137,21 @@ public:
 
       return retval;
     }
 
     void do_free (scope_id scope)
     {
       set_iterator p = in_use.find (scope);
 
-      if (p != in_use.end ())
-        {
-          in_use.erase (p);
-          free_list.insert (scope);
-        }
-      else
+      if (p == in_use.end ())
         error ("free_scope: scope %d not found!", scope);
+
+      in_use.erase (p);
+      free_list.insert (scope);
     }
 
     std::list<scope_id> do_scopes (void) const
     {
       std::list<scope_id> retval;
 
       for (set_const_iterator p = in_use.begin (); p != in_use.end (); p++)
         retval.push_back (*p);
@@ -390,25 +388,25 @@ public:
       void mark_automatic (void) { storage_class |= automatic; }
       void mark_formal (void) { storage_class |= formal; }
       void mark_hidden (void) { storage_class |= hidden; }
       void mark_inherited (void) { storage_class |= inherited; }
       void mark_global (void)
       {
         if (is_persistent ())
           error ("can't make persistent variable %s global", name.c_str ());
-        else
-          storage_class |= global;
+
+        storage_class |= global;
       }
       void mark_persistent (void)
       {
         if (is_global ())
           error ("can't make global variable %s persistent", name.c_str ());
-        else
-          storage_class |= persistent;
+
+        storage_class |= persistent;
       }
       void mark_added_static (void) { storage_class |= added_static; }
 
       void unmark_local (void) { storage_class &= ~local; }
       void unmark_automatic (void) { storage_class &= ~automatic; }
       void unmark_formal (void) { storage_class &= ~formal; }
       void unmark_hidden (void) { storage_class &= ~hidden; }
       void unmark_inherited (void) { storage_class &= ~inherited; }
@@ -1163,17 +1161,18 @@ public:
   static context_id current_context (void) { return xcurrent_context; }
 
   static scope_id alloc_scope (void) { return scope_id_cache::alloc (); }
 
   static void set_scope (scope_id scope)
   {
     if (scope == xglobal_scope)
       error ("can't set scope to global");
-    else if (scope != xcurrent_scope)
+
+    if (scope != xcurrent_scope)
       {
         all_instances_iterator p = all_instances.find (scope);
 
         if (p == all_instances.end ())
           {
             symbol_table *inst = new symbol_table (scope);
 
             if (inst)
@@ -1186,36 +1185,32 @@ public:
         xcurrent_context = 0;
       }
   }
 
   static void set_scope_and_context (scope_id scope, context_id context)
   {
     if (scope == xglobal_scope)
       error ("can't set scope to global");
-    else
+
+    if (scope != xcurrent_scope)
       {
-        if (scope != xcurrent_scope)
-          {
-            all_instances_iterator p = all_instances.find (scope);
-
-            if (p == all_instances.end ())
-              error ("scope not found!");
-            else
-              {
-                instance = p->second;
-
-                xcurrent_scope = scope;
-
-                xcurrent_context = context;
-              }
-          }
-        else
-          xcurrent_context = context;
+        all_instances_iterator p = all_instances.find (scope);
+
+        if (p == all_instances.end ())
+          error ("scope not found!");
+
+        instance = p->second;
+
+        xcurrent_scope = scope;
+
+        xcurrent_context = context;
       }
+    else
+      xcurrent_context = context;
   }
 
   static void erase_scope (scope_id scope)
   {
     assert (scope != xglobal_scope);
 
     erase_subfunctions_in_scope (scope);
 
@@ -1904,36 +1899,32 @@ public:
 
     return retval;
   }
 
   static void push_context (void)
   {
     if (xcurrent_scope == xglobal_scope || xcurrent_scope == xtop_scope)
       error ("invalid call to xymtab::push_context");
-    else
-      {
-        symbol_table *inst = get_instance (xcurrent_scope);
-
-        if (inst)
-          inst->do_push_context ();
-      }
+
+    symbol_table *inst = get_instance (xcurrent_scope);
+
+    if (inst)
+      inst->do_push_context ();
   }
 
   static void pop_context (void)
   {
     if (xcurrent_scope == xglobal_scope || xcurrent_scope == xtop_scope)
       error ("invalid call to xymtab::pop_context");
-    else
-      {
-        symbol_table *inst = get_instance (xcurrent_scope);
-
-        if (inst)
-          inst->do_pop_context ();
-      }
+
+    symbol_table *inst = get_instance (xcurrent_scope);
+
+    if (inst)
+      inst->do_pop_context ();
   }
 
   // For unwind_protect.
   static void pop_context (void *) { pop_context (); }
 
   static void mark_automatic (const std::string& name)
   {
     symbol_table *inst = get_instance (xcurrent_scope);
@@ -2240,18 +2231,18 @@ public:
 
     return retval;
   }
 
   static void free_scope (scope_id scope)
   {
     if (scope == xglobal_scope || scope == xtop_scope)
       error ("can't free global or top-level scopes!");
-    else
-      symbol_table::scope_id_cache::free (scope);
+
+    symbol_table::scope_id_cache::free (scope);
   }
 
   static void stash_dir_name_for_subfunctions (scope_id scope,
                                                const std::string& dir_name);
 
   static void add_to_parent_map (const std::string& classname,
                                  const std::list<std::string>& parent_list)
   {
diff --git a/libinterp/corefcn/typecast.cc b/libinterp/corefcn/typecast.cc
--- a/libinterp/corefcn/typecast.cc
+++ b/libinterp/corefcn/typecast.cc
@@ -67,28 +67,24 @@ get_data_and_bytesize (const ArrayType& 
 template <class ArrayType>
 static ArrayType
 reinterpret_copy (const void *data, octave_idx_type byte_size,
                   const dim_vector& old_dims)
 {
   typedef typename ArrayType::element_type T;
   octave_idx_type n = byte_size / sizeof (T);
 
-  if (n * static_cast<int> (sizeof (T)) == byte_size)
-    {
-      ArrayType retval (get_vec_dims (old_dims, n));
-      T *dest = retval.fortran_vec ();
-      std::memcpy (dest, data, n * sizeof (T));
-
-      return retval;
-    }
-  else
+  if (n * static_cast<int> (sizeof (T)) != byte_size)
     error ("typecast: incorrect number of input values to make output value");
 
-  return ArrayType ();
+  ArrayType retval (get_vec_dims (old_dims, n));
+  T *dest = retval.fortran_vec ();
+  std::memcpy (dest, data, n * sizeof (T));
+
+  return retval;
 }
 
 
 DEFUN (typecast, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {} {@var{y} =} typecast (@var{x}, \"@var{class}\")\n\
 Return a new array @var{y} resulting from interpreting the data of @var{x}\n\
 in memory as data of the numeric class @var{class}.\n\
@@ -263,42 +259,37 @@ typecast (@var{x}, \"uint8\")\n\
 template <class ArrayType>
 ArrayType
 do_bitpack (const boolNDArray& bitp)
 {
   typedef typename ArrayType::element_type T;
   octave_idx_type n
     = bitp.numel () / (sizeof (T) * std::numeric_limits<unsigned char>::digits);
 
-  if (n * static_cast<int> (sizeof (T)) * std::numeric_limits<unsigned char>::digits == bitp.numel ())
-    {
-
-      ArrayType retval (get_vec_dims (bitp.dims (), n));
-
-      const bool *bits = bitp.fortran_vec ();
-      char *packed = reinterpret_cast<char *> (retval.fortran_vec ());
-
-      octave_idx_type m = n * sizeof (T);
-
-      for (octave_idx_type i = 0; i < m; i++)
-        {
-          char c = bits[0];
-          for (int j = 1; j < std::numeric_limits<unsigned char>::digits; j++)
-            c |= bits[j] << j;
-
-          packed[i] = c;
-          bits += std::numeric_limits<unsigned char>::digits;
-        }
-
-      return retval;
-    }
-  else
+  if (n * static_cast<int> (sizeof (T)) * std::numeric_limits<unsigned char>::digits != bitp.numel ())
     error ("bitpack: incorrect number of bits to make up output value");
 
-  return ArrayType ();
+  ArrayType retval (get_vec_dims (bitp.dims (), n));
+
+  const bool *bits = bitp.fortran_vec ();
+  char *packed = reinterpret_cast<char *> (retval.fortran_vec ());
+
+  octave_idx_type m = n * sizeof (T);
+
+  for (octave_idx_type i = 0; i < m; i++)
+    {
+      char c = bits[0];
+      for (int j = 1; j < std::numeric_limits<unsigned char>::digits; j++)
+        c |= bits[j] << j;
+
+      packed[i] = c;
+      bits += std::numeric_limits<unsigned char>::digits;
+    }
+
+  return retval;
 }
 
 DEFUN (bitpack, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {} {@var{y} =} bitpack (@var{x}, @var{class})\n\
 Return a new array @var{y} resulting from interpreting the logical array\n\
 @var{x} as raw bit patterns for data of the numeric class @var{class}.\n\
 \n\
diff --git a/libinterp/corefcn/urlwrite.cc b/libinterp/corefcn/urlwrite.cc
--- a/libinterp/corefcn/urlwrite.cc
+++ b/libinterp/corefcn/urlwrite.cc
@@ -180,21 +180,21 @@ private:
                                    const std::string& user,
                                    const std::string& passwd,
                                    std::ostream& os)
   {
     curl_handle h = get_handle ();
 
     url_transfer obj (host, user, passwd, os);
 
-    if (obj.is_valid ())
-      handle_map[h] = obj;
-    else
+    if (! obj.is_valid ())
       error ("support for URL transfers was disabled when Octave was built");
 
+    handle_map[h] = obj;
+
     return h;
   }
 
   Matrix do_handle_list (void)
   {
     Matrix retval (1, handle_map.size ());
 
     octave_idx_type i = 0;
@@ -254,31 +254,29 @@ ch_manager::do_get_handle (void)
 
 void
 ch_manager::do_free (const curl_handle& h)
 {
   if (h.ok ())
     {
       iterator p = handle_map.find (h);
 
-      if (p != handle_map.end ())
-        {
-          // Curl handles are negative integers plus some random
-          // fractional part.  To avoid running out of integers, we
-          // recycle the integer part but tack on a new random part
-          // each time.
+      if (p == handle_map.end ())
+        error ("ch_manager::free: invalid object %g", h.value ());
 
-          handle_map.erase (p);
+      // Curl handles are negative integers plus some random
+      // fractional part.  To avoid running out of integers, we
+      // recycle the integer part but tack on a new random part
+      // each time.
 
-          if (h.value () < 0)
-            handle_free_list.insert
-             (std::ceil (h.value ()) - make_handle_fraction ());
-        }
-      else
-        error ("ch_manager::free: invalid object %g", h.value ());
+      handle_map.erase (p);
+
+      if (h.value () < 0)
+        handle_free_list.insert
+          (std::ceil (h.value ()) - make_handle_fraction ());
     }
 }
 
 ch_manager *ch_manager::instance = 0;
 
 DEFUN (urlwrite, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {} {} urlwrite (@var{url}, @var{localfile})\n\
