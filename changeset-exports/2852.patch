# HG changeset patch
# User jwe
# Date 859586674 0
#      Fri Mar 28 22:04:34 1997 +0000
# Node ID 2284b26520286fbfc5eb19d9400f704a7aed2878
# Parent  b960bd6cbfdfad8bea6e6723feba8277a21e4a78
[project @ 1997-03-28 22:04:30 by jwe]

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -1,11 +1,15 @@
 Summary of changes for version 2.1:
 ----------------------------------
 
+  * Commas in global statements are no longer special.  They are now
+    treated as command separators.  This removes a conflict in the
+    grammar and is consistent with the way Matlab behaves.
+
   * It is now possible to declare static variables that retain their
     values across function calls.  For example,
 
       function ncall = f () static n = 0; ncall = ++n; endfunction
 
     defines a function that returns the number of times that it has
     been called.
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,14 @@
 Fri Mar 28 15:33:11 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* parse.y (Vwarn_comma_in_declaration): Delete.
+	(symbols_of_parse): Delete DEFVAR for warn_comma_in_declaration.
+	(decl1): Don't allow commas in declarations.
+
 	* lsode.cc (struct LSODE_OPTIONS): Handle integer options.
 	(print_lsode_option_list, set_lsode_option, show_lsode_option): Ditto.
 	(lsode_option_table): Add element for step limit.
 	(lsode_user_jacobian): New function.
 	(Flsode): Allow function name arg to be a 2-element string array
 	specifying the function and jacobian function.
 
 	* variables.cc (get_global_value, set_global_value): New functions.
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -70,22 +70,16 @@ Software Foundation, 59 Temple Place - S
 //
 //   octave> if ((a = 2) < n)
 //
 static bool Vwarn_assign_as_truth_value;
 
 // If TRUE, generate a warning for variable swich labels.
 static bool Vwarn_variable_switch_label;
 
-// If TRUE, generate a warning for the comma in things like
-//
-//   octave> global a, b = 2
-//
-static bool Vwarn_comma_in_declaration;
-
 // If TRUE, generate warning if declared function name disagrees with
 // the name of the file in which it is defined.
 static bool Vwarn_function_name_clash;
 
 // If TRUE, generate warning if a statement in a function is not
 // terminated with a semicolon.  Useful for checking functions that
 // should only produce output using explicit printing statements.
 static bool Vwarn_missing_semicolon;
@@ -244,19 +238,16 @@ static tree_decl_command *make_decl_comm
 	(int tok, token *tok_val, tree_decl_init_list *lst);
 
 // Finish building a matrix list.
 static tree_expression *finish_matrix (tree_matrix *m);
 
 // Maybe print a warning.  Duh.
 static void maybe_warn_missing_semi (tree_statement_list *);
 
-// Maybe print a warning.  Duh.
-static void maybe_warn_comma_in_decl (void);
-
 // Set the print flag for a statement based on the separator type.
 static void set_stmt_print_flag (tree_statement_list *, char, bool);
 
 #define ABORT_PARSE \
   do \
     { \
       global_command = 0; \
       yyerrok; \
@@ -609,22 +600,16 @@ ans_expression	: expression
 
 decl1		: decl2
 		  { $$ = new tree_decl_init_list ($1); }
 		| decl1 decl2
 		  {
 		    $1->append ($2);
 		    $$ = $1;
 		  }
-		| decl1 ',' decl2
-		  {
-		    maybe_warn_comma_in_decl ();
-		    $1->append ($3);
-		    $$ = $1;
-		  }
 		;
 
 decl2		: identifier
 		  { $$ = new tree_decl_elt ($1); }
 		| identifier '=' expression
 		  {
 		    tree_simple_assignment_expression *tmp_ass;
 		    tmp_ass = new tree_simple_assignment_expression
@@ -2388,47 +2373,26 @@ set_stmt_print_flag (tree_statement_list
       break;
 
     default:
       warning ("unrecognized separator type!");
       break;
     }
 }
 
-static void
-maybe_warn_comma_in_decl (void)
-{
-  if (Vwarn_comma_in_declaration)\
-    {
-      warning ("comma in declaration not interpreted as a command separator"); 
-
-      if (reading_fcn_file || reading_script_file)
-	warning ("near line %d of file `%s'", input_line_number,
-		 curr_fcn_file_full_name.c_str ());
-    }
-}
-
 static int
 warn_assign_as_truth_value (void)
 {
   Vwarn_assign_as_truth_value
     = check_preference ("warn_assign_as_truth_value");
 
   return 0;
 }
 
 static int
-warn_comma_in_declaration (void)
-{
-  Vwarn_comma_in_declaration = check_preference ("warn_comma_in_declaration");
-
-  return 0;
-}
-
-static int
 warn_function_name_clash (void)
 {
   Vwarn_function_name_clash = check_preference ("warn_function_name_clash");
 
   return 0;
 }
 
 static int
@@ -2449,19 +2413,16 @@ warn_variable_switch_label (void)
 }
 
 void
 symbols_of_parse (void)
 {
   DEFVAR (warn_assign_as_truth_value, 1.0, 0, warn_assign_as_truth_value,
     "produce warning for assignments used as truth values");
 
-  DEFVAR (warn_comma_in_declaration, 1.0, 0, warn_comma_in_declaration,
-    "produce warning for commas in declaration statements");
-
   DEFVAR (warn_function_name_clash, 1.0, 0, warn_function_name_clash,
     "produce warning if function name conflicts with file name");
 
   DEFVAR (warn_missing_semicolon, 0.0, 0, warn_missing_semicolon,
     "produce a warning if a statement in a function file is not\n\
 terminated with a semicolon");
 
   DEFVAR (warn_variable_switch_label, 0.0, 0, warn_variable_switch_label,
