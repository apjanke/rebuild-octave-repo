# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1294686312 18000
#      Mon Jan 10 14:05:12 2011 -0500
# Node ID 8a40037533e2199e378501878b4e50265452c673
# Parent  44032aac5223795aee4463e197b4d151eaa87d6d
struct printing changes

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,13 @@
+2011-01-10  John W. Eaton  <jwe@octave.org>
+
+	* interpreter/container.txi (Basic Usage and Examples):
+	Document print_struct_array_contents.
+
 2011-01-05  Rik  <octave@nomad.inbox5.com>
 
 	* interpreter/octave.texi: Put statistics detailmenu in correct order.
 
 2011-01-05  Rik  <octave@nomad.inbox5.com>
 
 	* interpreter/numbers.txi, interpreter/obsolete.txi,
 	interpreter/oop.txi, interpreter/stats.txi: Use @headitem macro to
diff --git a/doc/interpreter/container.txi b/doc/interpreter/container.txi
--- a/doc/interpreter/container.txi
+++ b/doc/interpreter/container.txi
@@ -154,21 +154,25 @@ a
             @}
           @}
         @}
 @end group
 @end example
 
 @noindent
 This prevents long and confusing output from large deeply nested
-structures.  The number of levels to print for nested structures can be
-set with the function @code{struct_levels_to_print}:
+structures.  The number of levels to print for nested structures may be
+set with the function @code{struct_levels_to_print}, and the function
+@code{print_struct_array_contents} may be used to enable printing of the
+contents of structure arrays.
 
 @DOCSTRING(struct_levels_to_print)
 
+@DOCSTRING(print_struct_array_contents)
+
 Functions can return structures.  For example, the following function
 separates the real and complex parts of a matrix and stores them in two
 elements of the same structure variable.
 
 @example
 @group
 function y = f (x)
   y.re = real (x);
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,23 @@
+2011-01-10  John W. Eaton  <jwe@octave.org>
+
+	* ov-cell.cc (octave_cell::print_as_scalar): Always return true.
+	(octave_cell::print_raw): Handle extra newlines here.
+	* ov-struct.cc (Fstruct_levels_to_print): Move here from pr-output.cc
+	(Vstruct_levels_to_print): Move here from pr-output.cc.  Now static.
+	(Vprint_struct_array_contents): New static variable.
+	(Fprint_struct_array_contents): New function.
+	(octave_struct::print_raw): Use Vprint_struct_array_contents.
+	Simplify and improve output.
+	(octave_scalar_struct::print_raw): Simplify and improve output.
+	* pr-output.h (Vstruct_levels_to_print): Delete decl.
+	* ov-class.cc (octave_class::print_raw): Don't unwind_protect
+	Vstruct_levels_to_print.
+
 2011-01-09  David Bateman  <dbateman@free.fr>
 
 	* ls-mat5.cc (save_mat5_array_length (const float*, octave_idx_type,
         bool)): Take in to account the short tags for single data elements.
 	(int save_mat5_element_length (const octave_value&, const std::string&,
 	bool, bool)): Declare sparse matrices const to avoid a copy on read.
 	* ls-utils.cc (save_type get_save_type (float, float)): New function.
 	* ls-utils.h  (save_type get_save_type (float, float)): Declare it.
diff --git a/src/ov-cell.cc b/src/ov-cell.cc
--- a/src/ov-cell.cc
+++ b/src/ov-cell.cc
@@ -673,17 +673,17 @@ octave_cell::cellstr_value (void) const
     error ("invalid conversion from cell array to array of strings");
 
   return retval;
 }
 
 bool
 octave_cell::print_as_scalar (void) const
 {
-  return (ndims () > 2 || numel () == 0);
+  return true;
 }
 
 void
 octave_cell::print (std::ostream& os, bool) const
 {
   print_raw (os);
 }
 
@@ -694,16 +694,17 @@ octave_cell::print_raw (std::ostream& os
 
   if (nd == 2)
     {
       octave_idx_type nr = rows ();
       octave_idx_type nc = columns ();
 
       if (nr > 0 && nc > 0)
         {
+          newline (os);
           indent (os);
           os << "{";
           newline (os);
 
           increment_indent_level ();
 
           for (octave_idx_type j = 0; j < nc; j++)
             {
diff --git a/src/ov-class.cc b/src/ov-class.cc
--- a/src/ov-class.cc
+++ b/src/ov-class.cc
@@ -951,18 +951,16 @@ octave_class::print (std::ostream& os, b
   print_raw (os);
 }
 
 void
 octave_class::print_raw (std::ostream& os, bool) const
 {
   unwind_protect frame;
 
-  frame.protect_var (Vstruct_levels_to_print);
-
   indent (os);
   os << "  <class " << class_name () << ">";
   newline (os);
 }
 
 bool
 octave_class::print_name_tag (std::ostream& os, const std::string& name) const
 {
diff --git a/src/ov-struct.cc b/src/ov-struct.cc
--- a/src/ov-struct.cc
+++ b/src/ov-struct.cc
@@ -46,16 +46,23 @@ along with Octave; see the file COPYING.
 #include "ls-hdf5.h"
 #include "ls-utils.h"
 #include "pr-output.h"
 
 DEFINE_OCTAVE_ALLOCATOR(octave_struct);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA(octave_struct, "struct", "struct");
 
+// How many levels of structure elements should we print?
+static int Vstruct_levels_to_print = 2;
+
+// TRUE means print struct array contents, up to the number of levels
+// specified by struct_levels_to_print.
+static bool Vprint_struct_array_contents = false;
+
 octave_base_value *
 octave_struct::try_narrowing_conversion (void)
 {
   octave_base_value *retval = 0;
 
   if (numel () == 1)
     retval = new octave_scalar_struct (map.checkelem (0));
 
@@ -596,70 +603,58 @@ void
 octave_struct::print_raw (std::ostream& os, bool) const
 {
   unwind_protect frame;
 
   frame.protect_var (Vstruct_levels_to_print);
 
   if (Vstruct_levels_to_print >= 0)
     {
-      bool print_keys_only = Vstruct_levels_to_print-- == 0;
+      bool max_depth_reached = Vstruct_levels_to_print-- == 0;
 
-      indent (os);
-      os << "{";
-      newline (os);
+      bool print_fieldnames_only
+        = (max_depth_reached || ! Vprint_struct_array_contents);
 
       increment_indent_level ();
 
-      octave_idx_type n = map.numel ();
+      newline (os);
+      indent (os);
+      dim_vector dv = dims ();
+      os << dv.str () << " struct array containing the fields:";
+      newline (os);
 
-      if (n != 1 || print_keys_only)
-        {
-          indent (os);
-          dim_vector dv = dims ();
-          os << dv.str () << " struct array containing the fields:";
-          newline (os);
-          newline (os);
-
-          increment_indent_level ();
-        }
+      increment_indent_level ();
 
       string_vector key_list = map.fieldnames ();
 
       for (octave_idx_type i = 0; i < key_list.length (); i++)
         {
           std::string key = key_list[i];
 
           Cell val = map.contents (key);
 
-          octave_value tmp = (n == 1) ? val(0) : octave_value (val, true);
+          newline (os);
 
-          if (n != 1 || print_keys_only)
+          if (print_fieldnames_only)
             {
               indent (os);
               os << key;
-              if (n == 1)
-                {
-                  dim_vector dv = tmp.dims ();
-                  os << ": " << dv.str () << " " << tmp.type_name ();
-                }
-              newline (os);
             }
           else
-            tmp.print_with_name (os, key);
+            {
+              octave_value tmp (val);
+              tmp.print_with_name (os, key);
+            }
         }
 
-      if (n != 1 || print_keys_only)
-        decrement_indent_level ();
+      if (print_fieldnames_only)
+        newline (os);
 
       decrement_indent_level ();
-
-      indent (os);
-      os << "}";
-      newline (os);
+      decrement_indent_level ();
     }
   else
     {
       indent (os);
       os << "<structure>";
       newline (os);
     }
 }
@@ -1318,70 +1313,54 @@ void
 octave_scalar_struct::print_raw (std::ostream& os, bool) const
 {
   unwind_protect frame;
 
   frame.protect_var (Vstruct_levels_to_print);
 
   if (Vstruct_levels_to_print >= 0)
     {
-      bool print_keys_only = Vstruct_levels_to_print-- == 0;
+      bool max_depth_reached = Vstruct_levels_to_print-- == 0;
 
-      indent (os);
-      os << "{";
-      newline (os);
+      bool print_fieldnames_only = max_depth_reached;
 
       increment_indent_level ();
 
-      octave_idx_type n = 1;
+      newline (os);
+      indent (os);
+      os << "scalar structure containing the fields:";
+      newline (os);
+      newline (os);
 
-      if (n != 1 || print_keys_only)
-        {
-          indent (os);
-          dim_vector dv = dims ();
-          os << dv.str () << " struct array containing the fields:";
-          newline (os);
-          newline (os);
-
-          increment_indent_level ();
-        }
+      increment_indent_level ();
 
       string_vector key_list = map.fieldnames ();
 
       for (octave_idx_type i = 0; i < key_list.length (); i++)
         {
           std::string key = key_list[i];
 
           Cell val = map.contents (key);
 
-          octave_value tmp = (n == 1) ? val(0) : octave_value (val, true);
+          octave_value tmp = val(0);
 
-          if (n != 1 || print_keys_only)
+          if (print_fieldnames_only)
             {
               indent (os);
               os << key;
-              if (n == 1)
-                {
-                  dim_vector dv = tmp.dims ();
-                  os << ": " << dv.str () << " " << tmp.type_name ();
-                }
+              dim_vector dv = tmp.dims ();
+              os << ": " << dv.str () << " " << tmp.type_name ();
               newline (os);
             }
           else
             tmp.print_with_name (os, key);
         }
 
-      if (n != 1 || print_keys_only)
-        decrement_indent_level ();
-
       decrement_indent_level ();
-
-      indent (os);
-      os << "}";
-      newline (os);
+      decrement_indent_level ();
     }
   else
     {
       indent (os);
       os << "<structure>";
       newline (os);
     }
 }
@@ -2189,8 +2168,33 @@ the named fields.\n\
 %!# test rmfield
 %!test
 %!  x(3).d=1; x(2).a=2; x(1).b=3; x(2).c=3; x(6).f="abc123";
 %!  y = rmfield (x, {"a", "f"});
 %!  assert (fieldnames (y), {"d"; "b"; "c"});
 %!  assert (size (y), [1, 6]);
 */
 
+DEFUN (struct_levels_to_print, args, nargout,
+  "-*- texinfo -*-\n\
+@deftypefn  {Built-in Function} {@var{val} =} struct_levels_to_print ()\n\
+@deftypefnx {Built-in Function} {@var{old_val} =} struct_levels_to_print (@var{new_val})\n\
+Query or set the internal variable that specifies the number of\n\
+structure levels to display.\n\
+@end deftypefn")
+{
+  return SET_INTERNAL_VARIABLE_WITH_LIMITS (struct_levels_to_print,
+                                            -1, INT_MAX);
+}
+
+DEFUN (print_struct_array_contents, args, nargout,
+  "-*- texinfo -*-\n\
+@deftypefn  {Built-in Function} {@var{val} =} print_struct_array_contents ()\n\
+@deftypefnx {Built-in Function} {@var{old_val} =} print_struct_array_contents (@var{new_val})\n\
+Query or set the internal variable that specifies whether to print struct\n\
+array contents.  If true, values of struct array elements are printed.\n\
+This variable does not affect scalar structures.  Their elements\n\
+are always printed.  In both cases, however, printing will be limited to\n\
+the number of levels specified by @var{struct_levels_to_print}.\n\
+@end deftypefn")
+{
+  return SET_INTERNAL_VARIABLE (print_struct_array_contents);
+}
diff --git a/src/pr-output.cc b/src/pr-output.cc
--- a/src/pr-output.cc
+++ b/src/pr-output.cc
@@ -74,19 +74,16 @@ static int Voutput_precision = 5;
 // TRUE means that the dimensions of empty objects should be printed
 // like this: x = [](2x0).
 bool Vprint_empty_dimensions = true;
 
 // TRUE means that the rows of big matrices should be split into
 // smaller slices that fit on the screen.
 static bool Vsplit_long_rows = true;
 
-// How many levels of structure elements should we print?
-int Vstruct_levels_to_print = 2;
-
 // TRUE means don't do any fancy formatting.
 static bool free_format = false;
 
 // TRUE means print plus sign for nonzero, blank for zero.
 static bool plus_format = false;
 
 // First char for > 0, second for < 0, third for == 0.
 static std::string plus_format_chars = "+  ";
@@ -4023,20 +4020,8 @@ DEFUN (output_precision, args, nargout,
 @deftypefnx {Built-in Function} {@var{old_val} =} output_precision (@var{new_val})\n\
 Query or set the internal variable that specifies the minimum number of\n\
 significant figures to display for numeric output.\n\
 @seealso{format, output_max_field_width}\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE_WITH_LIMITS (output_precision, -1, INT_MAX);
 }
-
-DEFUN (struct_levels_to_print, args, nargout,
-  "-*- texinfo -*-\n\
-@deftypefn  {Built-in Function} {@var{val} =} struct_levels_to_print ()\n\
-@deftypefnx {Built-in Function} {@var{old_val} =} struct_levels_to_print (@var{new_val})\n\
-Query or set the internal variable that specifies the number of\n\
-structure levels to display.\n\
-@end deftypefn")
-{
-  return SET_INTERNAL_VARIABLE_WITH_LIMITS (struct_levels_to_print,
-                                            -1, INT_MAX);
-}
diff --git a/src/pr-output.h b/src/pr-output.h
--- a/src/pr-output.h
+++ b/src/pr-output.h
@@ -252,12 +252,9 @@ octave_print_internal (std::ostream& os,
                        bool pr_as_read_syntax = false,
                        int extra_indent = 0,
                        bool pr_as_string = false);
 
 // TRUE means that the dimensions of empty objects should be printed
 // like this: x = [](2x0).
 extern bool Vprint_empty_dimensions;
 
-// How many levels of structure elements should we print?
-extern OCTINTERP_API int Vstruct_levels_to_print;
-
 #endif
