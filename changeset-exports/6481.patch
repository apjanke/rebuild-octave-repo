# HG changeset patch
# User jwe
# Date 1175629152 0
#      Tue Apr 03 19:39:12 2007 +0000
# Node ID 89ed13fec6fe3d6802aa0aa6ab4a5aa5f5a1ae19
# Parent  23ed94dfbfa8fe447e2dccd7da8f6ada3f0ec184
[project @ 2007-04-03 19:39:11 by jwe]

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,14 @@
+2007-04-03  Rafael Laboissiere  <rafael@debian.org>
+
+	* interpreter/basics.txi: Clarified some limitations of the #!
+	script mechanism, in particular related to the parsing of the
+	arguments.
+
 2007-03-29  Rafael Laboissiere  <rafael@debian.org>
 
 	* faq/Octave-FAQ.texi, interpreter/basics.txi,
 	interpreter/emacs.txi, interpreter/func.tx, interpreter/var.txi:
 	Make it clear that the old built-in LOADPATH is an internal
 	variable, accessible through path ().
 	Drop references to DEFAULT_LOADPATH.
 	Chang references to the old built-in variables INFO_FILE and
diff --git a/doc/interpreter/basics.txi b/doc/interpreter/basics.txi
--- a/doc/interpreter/basics.txi
+++ b/doc/interpreter/basics.txi
@@ -759,32 +759,38 @@ error before trying again.
 @cindex self contained programs
 @cindex program, self contained
 @cindex @samp{#!}
 
 Once you have learned Octave, you may want to write self-contained
 Octave scripts, using the @samp{#!} script mechanism.  You can do this
 on GNU systems and on many Unix systems @footnote{The @samp{#!}
 mechanism works on Unix systems derived from Berkeley Unix, System V
-Release 4, and some System V Release 3 systems.}
+Release 4, and some System V Release 3 systems.}.
+
+Self-contained Octave scripts are useful when you want to write a
+program which users can invoke without knowing that the program is
+written in the Octave language.
 
 For example, you could create a text file named @file{hello}, containing
 the following lines:
 
 @example
 @group
 #! @var{octave-interpreter-name} -qf
 # a sample Octave program
 printf ("Hello, world!\n");
 @end group
 @end example
 
 @noindent
 (where @var{octave-interpreter-name} should be replaced with the full
-file name for your Octave binary).  After making this file executable
+file name for your Octave binary).  Note that this will only work if
+@samp{#!} appears at the very beginning of the file. After making this
+file executable
 (with the @code{chmod} command), you can simply type:
 
 @example
 hello
 @end example
 
 @noindent
 at the shell, and the system will arrange to run Octave as if you had
@@ -799,28 +805,52 @@ interpreter to be run, and an optional i
 pass to that interpreter.  The operating system then runs the
 interpreter with the given argument and the full argument list of the
 executed program.  The first argument in the list is the full file name
 of the Octave program. The rest of the argument list will either be
 options to Octave, or data files, or both.  The @samp{-qf} option is
 usually specified in stand-alone Octave programs to prevent them from
 printing the normal startup message, and to keep them from behaving
 differently depending on the contents of a particular user's
-@file{~/.octaverc} file.  @xref{Invoking Octave}.  Note that some
-operating systems may place a limit on the number of characters that are
-recognized after @samp{#!}.
+@file{~/.octaverc} file.  @xref{Invoking Octave}.
+
+Note that some operating systems may place a limit on the number of
+characters that are recognized after @samp{#!}.  Also, the various
+shells/systems parse differently the arguments appearing in a @samp{#!} 
+line.  The majority of them group together all the arguments in a string
+and pass it to the interepreter as a single argument.  In this case, the
+following script:
+
+@example
+@group
+#! @var{octave-interpreter-name} -q -f # comment
+@end group
+@end example
+
+@noindent
+is equivalent to type at the command line:
 
-Self-contained Octave scripts are useful when you want to write a
-program which users can invoke without knowing that the program is
-written in the Octave language.
+@example
+@group
+octave "-q -f # comment"
+@end group
+@end example
 
-The built-in function @code{argv} returns a cell array containing the
-command line arguments passed to an executable Octave script
-@xref{Command Line Options}.  For example, the following program will
-reproduce the command line that is used to execute it.
+@noindent
+which would obviously produce an error message.  Unfortunately, it is
+impossible for Octave to know whether it has been called from the command
+line or from a @samp{#!} script, so some care is needed when using the
+@samp{#!} mechanism.
+
+Note that when Octave is started from an executable script, the built-in
+function @code{argv} returns a cell array containing the command line
+arguments passed to an executable Octave script, not the arguments
+passed to the Octave interpreter on the @samp{#!} line of the script.
+For example, the following program will reproduce the command line that
+is used to execute script, not @samp{-qf}.
 
 @example
 @group
 #! /bin/octave -qf
 printf ("%s", program_name ());
 for i = 1:nargin
   arg_list = argv ();
   printf (" %s", arg_list@{i@});
diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -3089,17 +3089,19 @@ assignN (Array<LT>& lhs, const Array<RT>
 	    {
 	      // We didn't start out with all zero dimensions, so if
 	      // index is a colon, it refers to the current LHS
 	      // dimension.  Otherwise, it is OK to enlarge to a
 	      // dimension given by the largest index, but if that
 	      // index is a colon the new dimension is singleton.
 
 	      if (i < lhs_dims_len
-		  && (idx(i).is_colon () || idx(i).max () < lhs_dims(i)))
+		  && (idx(i).is_colon ()
+		      || idx(i).orig_empty ()
+		      || idx(i).max () < lhs_dims(i)))
 		new_dims(i) = lhs_dims(i);
 	      else if (! idx(i).is_colon ())
 		new_dims(i) = idx(i).max () + 1;
 	      else
 		new_dims(i) = 1;
 	    }
 	}
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2007-04-03  John W. Eaton  <jwe@octave.org>
+
+	* Array.cc (assignN): Don't resize dimension if corresponding
+	index is empty.
+
 2007-04-02  John W. Eaton  <jwe@octave.org>
 
 	* dMatrix.h (Matrix::inverse): Reinstate versions without
 	MatrixType argument.
 	* CMatrix.h (ComplexMatrix::inverse): Likewise.
 
 2007-03-27  John W. Eaton  <jwe@octave.org>
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2007-04-03  John W. Eaton  <jwe@octave.org>
+
+	* ov-fcn-handle.cc (make_fcn_handle): Pass ultimate parent
+	function name to lookup_function.
+
 2007-03-29  John W. Eaton  <jwe@octave.org>
 
 	* DLD-FUNCTIONS/filter.cc (filter): Fix typo in doc string.
 	From Utkarsh Upadhyay <musically.ut@gmail.com>.
 
 2007-03-28  Rafael Laboissiere  <rafael@debian.org>
 
 	* DLD-FUNCTIONS/__glpk__.cc: Fix #ifdef logic around GLPK_PRE_4_14.
diff --git a/src/ov-fcn-handle.cc b/src/ov-fcn-handle.cc
--- a/src/ov-fcn-handle.cc
+++ b/src/ov-fcn-handle.cc
@@ -609,17 +609,27 @@ octave_fcn_handle::print_raw (std::ostre
 
 octave_value
 make_fcn_handle (const std::string& nm)
 {
   octave_value retval;
 
   octave_function *fcn = octave_call_stack::current ();
 
-  octave_value f = lookup_function (nm, fcn ? fcn->name () : std::string ());
+  std::string parent_name = fcn ? fcn->name () : std::string ();
+
+  if (! parent_name.empty ())
+    {
+      size_t pos = parent_name.find (':');
+
+      if (pos != NPOS)
+	parent_name = parent_name.substr (0, pos);
+    }
+
+  octave_value f = lookup_function (nm, parent_name);
 
   if (f.is_function ())
     retval = octave_value (new octave_fcn_handle (f, nm));
   else
     error ("error creating function handle \"@%s\"", nm.c_str ());
 
   return retval;
 }
