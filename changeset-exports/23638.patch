# HG changeset patch
# User Rik <rik@octave.org>
# Date 1497821047 25200
#      Sun Jun 18 14:24:07 2017 -0700
# Node ID 799833716c7b8477aefefc1b4fb780b0b77c3151
# Parent  2208cc0e89a3de9dedaa0ae18d4fa1aaaf04086e
Use expm1, expm1f from C++ std library.
These functions are guaranteed to be part of C++11 standard library.

* configure.ac: Remove AC_CHECK_FUNCS for expm1, expm1f.

* lo-specfun.cc: Delegate to std::expm1 or std::expm1f for expm1.

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -2399,17 +2399,17 @@ AM_PROG_CC_C_O
 gl_INIT
 
 ### Checks for functions and variables.
 
 dnl These checks define/undefine HAVE_FUNCNAME in config.h.
 dnl Code tests HAVE_FUNCNAME and either uses function or provides workaround.
 dnl Use multiple AC_CHECKs to avoid line continuations '\' in list
 AC_CHECK_FUNCS([ctermid dup2])
-AC_CHECK_FUNCS([endgrent endpwent execvp expm1 expm1f fork])
+AC_CHECK_FUNCS([endgrent endpwent execvp fork])
 AC_CHECK_FUNCS([getegid geteuid getgid getgrent getgrgid getgrnam])
 AC_CHECK_FUNCS([getpgrp getpid getppid getpwent getpwuid getuid])
 AC_CHECK_FUNCS([isascii kill])
 AC_CHECK_FUNCS([lgamma lgammaf lgamma_r lgammaf_r])
 AC_CHECK_FUNCS([log1p log1pf])
 AC_CHECK_FUNCS([realpath resolvepath roundl])
 AC_CHECK_FUNCS([select setgrent setpwent setsid siglongjmp strsignal])
 AC_CHECK_FUNCS([tcgetattr tcsetattr tgammaf toascii])
diff --git a/liboctave/numeric/lo-specfun.cc b/liboctave/numeric/lo-specfun.cc
--- a/liboctave/numeric/lo-specfun.cc
+++ b/liboctave/numeric/lo-specfun.cc
@@ -376,53 +376,17 @@ namespace octave
 #endif
 
       if (sgngam < 0)
         return result + FloatComplex (0., M_PI);
       else
         return result;
     }
 
-    double
-    expm1 (double x)
-    {
-#if defined (HAVE_EXPM1)
-      return ::expm1 (x);
-#else
-      double retval;
-
-      double ax = fabs (x);
-
-      if (ax < 0.1)
-        {
-          ax /= 16;
-
-          // use Taylor series to calculate exp(x)-1.
-          double t = ax;
-          double s = 0;
-          for (int i = 2; i < 7; i++)
-            s += (t *= ax/i);
-          s += ax;
-
-          // use the identity (a+1)^2-1 = a*(a+2)
-          double e = s;
-          for (int i = 0; i < 4; i++)
-            {
-              s *= e + 2;
-              e *= e + 2;
-            }
-
-          retval = (x > 0) ? s : -s / (1+s);
-        }
-      else
-        retval = exp (x) - 1;
-
-      return retval;
-#endif
-    }
+    double expm1 (double x) { return std::expm1 (x); }
 
     Complex
     expm1 (const Complex& x)
     {
       Complex retval;
 
       if (std:: abs (x) < 1)
         {
@@ -433,53 +397,17 @@ namespace octave
           retval = Complex (u*v + u + v, (u+1) * sin (im));
         }
       else
         retval = std::exp (x) - Complex (1);
 
       return retval;
     }
 
-    float
-    expm1 (float x)
-    {
-#if defined (HAVE_EXPM1F)
-      return expm1f (x);
-#else
-      float retval;
-
-      float ax = fabs (x);
-
-      if (ax < 0.1)
-        {
-          ax /= 16;
-
-          // use Taylor series to calculate exp(x)-1.
-          float t = ax;
-          float s = 0;
-          for (int i = 2; i < 7; i++)
-            s += (t *= ax/i);
-          s += ax;
-
-          // use the identity (a+1)^2-1 = a*(a+2)
-          float e = s;
-          for (int i = 0; i < 4; i++)
-            {
-              s *= e + 2;
-              e *= e + 2;
-            }
-
-          retval = (x > 0) ? s : -s / (1+s);
-        }
-      else
-        retval = exp (x) - 1;
-
-      return retval;
-#endif
-    }
+    float expm1 (float x) { return std::expm1f (x); }
 
     FloatComplex
     expm1 (const FloatComplex& x)
     {
       FloatComplex retval;
 
       if (std:: abs (x) < 1)
         {
