# HG changeset patch
# User Rik <rik@octave.org>
# Date 1513819179 28800
#      Wed Dec 20 17:19:39 2017 -0800
# Node ID 9c684d270c79bf3ce69f5f96432b44c24fabdfa7
# Parent  e7624c23b1017d3ca4f194260a3dc7a2d4b28e5b
# Parent  8354b505ad6b6a3a8a5885496f7640c881c50e8c
maint: merge stable to default.

diff --git a/libinterp/corefcn/strfns.cc b/libinterp/corefcn/strfns.cc
--- a/libinterp/corefcn/strfns.cc
+++ b/libinterp/corefcn/strfns.cc
@@ -63,23 +63,23 @@ character.  A range error results if an 
 
 For cell arrays, each element is concatenated separately.  Cell arrays
 converted through @code{char} can mostly be converted back with
 @code{cellstr}.  For example:
 
 @example
 @group
 char ([97, 98, 99], "", @{"98", "99", 100@}, "str1", ["ha", "lf"])
-   @result{} ["abc    "
-       "       "
-       "98     "
-       "99     "
-       "d      "
-       "str1   "
-       "half   "]
+   @result{} ["abc  "
+       "     "
+       "98   "
+       "99   "
+       "d    "
+       "str1 "
+       "half "]
 @end group
 @end example
 @seealso{strvcat, cellstr}
 @end deftypefn */)
 {
   octave_value retval;
 
   int nargin = args.length ();
@@ -189,22 +189,22 @@ character.  A range error results if an 
 
 For cell arrays, each element is concatenated separately.  Cell arrays
 converted through @code{strvcat} can mostly be converted back with
 @code{cellstr}.  For example:
 
 @example
 @group
 strvcat ([97, 98, 99], "", @{"98", "99", 100@}, "str1", ["ha", "lf"])
-      @result{} ["abc    "
-          "98     "
-          "99     "
-          "d      "
-          "str1   "
-          "half   "]
+      @result{} ["abc "
+          "98  "
+          "99  "
+          "d   "
+          "str1"
+          "half"]
 @end group
 @end example
 @seealso{char, strcat, cstrcat}
 @end deftypefn */)
 {
   int nargin = args.length ();
   int n_elts = 0;
   size_t max_len = 0;
diff --git a/scripts/io/strread.m b/scripts/io/strread.m
--- a/scripts/io/strread.m
+++ b/scripts/io/strread.m
@@ -41,17 +41,19 @@
 ## @item  %f
 ## @itemx %n
 ## The word is parsed as a number and converted to double.
 ##
 ## @item  %d
 ## @itemx %u
 ## The word is parsed as a number and converted to int32.
 ##
-## @item %*', '%*f', '%*s
+## @item  %*
+## @itemx %*f
+## @itemx %*s
 ## The word is skipped.
 ##
 ## For %s and %d, %f, %n, %u and the associated %*s @dots{} specifiers an
 ## optional width can be specified as %Ns, etc.@: where N is an integer > 1.
 ## For %f, format specifiers like %N.Mf are allowed.
 ##
 ## @item literals
 ## In addition the format may contain literal character strings; these will be
