# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1207157359 14400
#      Wed Apr 02 13:29:19 2008 -0400
# Node ID a0ec02774303d1ba70952c1a6121f92806b4ce9d
# Parent  3c16e24145647e15720caaae59e02c1d65f54d6e
Use popen2 for communication with gnuplot

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,15 @@
+2008-04-02  David Bateman  <dbateman@free.fr>
+
+	* plot/__gnuplot_ginput__.m: Use the gnuplot stream itself for
+	communication rather than a chat file if mkfifo is not available.
+	* plot/gnuplot_drawnow.m: Open stream with popen2 to allow two way
+	communication with the gnuplot process.
+
 2008-04-01  Richard Bovey  <Richard.Bovey@baesystems.com>
 
 	* general/sortrows.m: Handle negative column arguments.
 
 2008-04-01  Julian Schnidder  <j.schnidder@gmx.de>
 
 	* miscellaneous/perl.m: New function.
 	* miscellaneous/Makefile.in (SOURCES): Add it to the list.
diff --git a/scripts/plot/__gnuplot_ginput__.m b/scripts/plot/__gnuplot_ginput__.m
--- a/scripts/plot/__gnuplot_ginput__.m
+++ b/scripts/plot/__gnuplot_ginput__.m
@@ -26,91 +26,102 @@
 
 ## This file initially bore the copyright statement
 ## Petr Mikulik
 ## History: June 2006; August 2005; June 2004; April 2004
 ## License: public domain
 
 function [x, y, button] = __gnuplot_ginput__ (f, n)
 
-  persistent have_mkfifo = ! ispc ();
-
-  stream = get (f, "__plot_stream__");
+  ostream = get (f, "__plot_stream__");
+  if (numel (ostream) < 1)
+    error ("ginput: stream to gnuplot not open");
+  elseif (ispc ())
+    if (numel (ostream) == 1)
+      error ("ginput: Need mkfifo that is not implemented under Windows");
+    endif
+    use_mkfifo = false;
+    istream = ostream(2);
+    ostream = ostream(1);
+  else
+    use_mkfifo = true;
+    ostream = ostream(1);
+  endif
 
   if (compare_versions (__gnuplot_version__ (), "4.0", "<="))
     error ("ginput: version %s of gnuplot not supported", gnuplot_version ());
   endif
 
   if (nargin == 1)
     x = zeros (100, 1);
     y = zeros (100, 1);
     button = zeros (100, 1);
   else
     x = zeros (n, 1);
     y = zeros (n, 1);
     button = zeros (n, 1);
   endif
 
-  gpin_name = tmpnam ();
+  if (use_mkfifo)
+    gpin_name = tmpnam ();
 
-  if (have_mkfifo)
-    ## Use pipes if not on Windows. Mode: 6*8*8 ==  0600
-    [err, msg] = mkfifo(gpin_name, 6*8*8);
+    ##Mode: 6*8*8 ==  0600
+    [err, msg] = mkfifo (gpin_name, 6*8*8);
 
     if (err != 0)
       error ("ginput: Can not open fifo (%s)", msg);
     endif
   endif
 
   unwind_protect
 
     k = 0;
     while (true)
       k++;
-      fprintf (stream, "set print \"%s\";\n", gpin_name);
-      fflush (stream);
-      if (have_mkfifo)
-	[gpin, err] = fopen (gpin_name, "r");
-	if (err != 0)
-	  error ("ginput: Can not open fifo (%s)", msg);
-	endif
-      endif
-      fputs (stream, "pause mouse any;\n\n");
 
       ## Notes: MOUSE_* can be undefined if user closes gnuplot by "q"
       ## or Alt-F4. Further, this abrupt close also requires the leading
       ## "\n" on the next line.
-      fputs (stream, "\nif (exists(\"MOUSE_KEY\") && exists(\"MOUSE_X\")) print MOUSE_X, MOUSE_Y, MOUSE_KEY; else print \"0 0 -1\"\n");
-
-      ## Close output file, otherwise all blocks (why?!).
-      fputs (stream, "set print;\n");
-      fflush (stream);
-
-      if (! have_mkfifo)
-	while (exist (gpin_name, "file") == 0)
-	endwhile
-	[gpin, msg] = fopen (gpin_name, "r");
+      if (use_mkfifo)
+	fprintf (ostream, "set print \"%s\";\n", gpin_name);
+	fflush (ostream);
+	[gpin, err] = fopen (gpin_name, "r");
+	if (err != 0)
+	  error ("ginput: Can not open fifo (%s)", msg);
+	endif
+	fputs (ostream, "pause mouse any;\n\n");
+	fputs (ostream, "\nif (exists(\"MOUSE_KEY\") && exists(\"MOUSE_X\")) print MOUSE_X, MOUSE_Y, MOUSE_KEY; else print \"0 0 -1\"\n");
 
-	if (gpin < 0)
-	  error ("ginput: Can not open file (%s)", msg);
-	endif
+	## Close output file, to force it to be flushed
+	fputs (ostream, "set print;\n");
+	fflush (ostream);
 
-	## Now read from file
-	count = 0;
-	while (count == 0)
-	  [xk, yk, buttonk, count] = fscanf (gpin, "%f %f %d", "C");
-	endwhile
-	x(k) = xk;
-	y(k) = yk;
-	button (k) = buttonk;
-      else
 	## Now read from fifo.
 	[x(k), y(k), button(k), count] = fscanf (gpin, "%f %f %d", "C");
+	fclose (gpin);
+      else
+	fprintf (ostream, "set print \"-\";\n");
+	fflush (ostream);
+	fputs (ostream, "pause mouse any;\n\n");
+	fputs (ostream, "\nif (exists(\"MOUSE_KEY\") && exists(\"MOUSE_X\")) print \"OCTAVE: \", MOUSE_X, MOUSE_Y, MOUSE_KEY; else print \"0 0 -1\"\n");
+
+	## Close output file, to force it to be flushed
+	fputs (ostream, "set print;\n");
+	fflush (ostream);
+
+	str = {};
+	while (isempty (str))
+	  str = char (fread (istream)');
+	  if (! isempty (str))
+	    str = regexp (str, 'OCTAVE:\s+[\d.\+-]+\s+[\d.\+-]+\s+\d*', 'match');
+	  endif
+	  fclear (istream);
+	endwhile
+        [x(k), y(k), button(k), count] = sscanf (str{end}(8:end), "%f %f %d", "C");
       endif
-      fclose (gpin);
 
       if ([x(k), y(k), button(k)] == [0, 0, -1])
 	## Mousing not active (no plot yet).
 	break;
       endif
 
       if (nargin > 1)
 	## Input argument n was given => stop when k == n.
@@ -127,13 +138,15 @@ function [x, y, button] = __gnuplot_ginp
 	  y(k:end) = [];
 	  button(k:end) = [];
 	  break;
 	endif
       endif
     endwhile
 
   unwind_protect_cleanup
-    unlink (gpin_name);
+    if (use_mkfifo)
+      unlink (gpin_name);
+    endif
   end_unwind_protect
 
 endfunction
 
diff --git a/scripts/plot/gnuplot_drawnow.m b/scripts/plot/gnuplot_drawnow.m
--- a/scripts/plot/gnuplot_drawnow.m
+++ b/scripts/plot/gnuplot_drawnow.m
@@ -33,17 +33,17 @@ function gnuplot_drawnow (h, term, file,
     mono = false;
   endif
 
   if (nargin >= 3 && nargin <= 5)
     f = __get__ (h);
     plot_stream = [];
     fid = [];
     unwind_protect
-      [plot_stream, enhanced] = open_gnuplot_stream ([], term, file);
+      [plot_stream, enhanced] = open_gnuplot_stream (1, [], term, file);
       __go_draw_figure__ (f, plot_stream, enhanced, mono);
       if (nargin == 5)
         fid = fopen (debug_file, "wb");
         enhanced = init_plot_stream (fid, [], term, file);
         __go_draw_figure__ (f, fid, enhanced, mono);
       endif
     unwind_protect_cleanup
       if (! isempty (plot_stream))
@@ -52,45 +52,50 @@ function gnuplot_drawnow (h, term, file,
       if (! isempty (fid))
         fclose (fid);
       endif
     end_unwind_protect
   elseif (nargin == 1)
     f = __get__ (h);
     plot_stream = f.__plot_stream__;
     if (isempty (plot_stream))
-      [plot_stream, enhanced] = open_gnuplot_stream (h);
+      [plot_stream, enhanced] = open_gnuplot_stream (2, h);
       set (h, "__enhanced__", enhanced);
     else
       enhanced = f.__enhanced__;
     endif
-    __go_draw_figure__ (f, plot_stream, enhanced, mono);
+    __go_draw_figure__ (f, plot_stream (1), enhanced, mono);
+    fflush (plot_stream (1));
   else
     print_usage ();
   endif
 
 endfunction
 
-function [plot_stream, enhanced] = open_gnuplot_stream (h, varargin)
+function [plot_stream, enhanced] = open_gnuplot_stream (npipes, h, varargin)
 
   cmd = gnuplot_binary ();
 
-  plot_stream = popen (cmd, "w");
-
-  if (plot_stream < 0)
-    error ("drawnow: failed to open connection to gnuplot");
+  if (npipes > 1)
+    [plot_stream(1), plot_stream(2), pid] = popen2 (cmd);
+    if (pid < 0)
+      error ("drawnow: failed to open connection to gnuplot");
+    endif
   else
+    plot_stream = popen (cmd, "w");
+    if (plot_stream < 0)
+      error ("drawnow: failed to open connection to gnuplot");
+    endif
+  endif
 
-    if (! isempty (h))
-      set (h, "__plot_stream__", plot_stream);
-    endif
+  if (! isempty (h))
+    set (h, "__plot_stream__", plot_stream);
+  endif
 
-    enhanced = init_plot_stream (plot_stream, h, varargin{:});
-
-  endif
+  enhanced = init_plot_stream (plot_stream (1), h, varargin{:});
 
 endfunction
 
 function enhanced = init_plot_stream (plot_stream, h, term, file)
 
   if (nargin == 4)
     enhanced = enhanced_term (term);
     if (! isempty (term))
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,14 +1,19 @@
 2008-04-01  John W. Eaton  <jwe@octave.org>
 
 	* pt-id.h (do_lookup (bool&, bool)): Delete.
 	(do_lookup (tree_argument_list *, const string_vector&,
 	octave_value_list&, bool&)): Call MAYBE_DO_BREAKPOINT here.
 
+2008-04-02  David Bateman  <dbateman@free.fr>
+
+	* graphics.cc (void gnuplot_backend::close_figure (const
+	octave_value&) const): Allow for an input and output stream.
+
 2008-03-28  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/lookup.cc: New file.
 	* Makefile.in (DLD_XSRC): Add it to the list.
 
 2008-03-28  David Bateman  <dbateman@free.fr>
 
 	* ov-complex.cc (SCALAR_MAPPER, CD_SCALAR_MAPPER): New macro for
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -1286,22 +1286,32 @@ public:
 
   bool is_valid (void) const { return true; }
  
   void close_figure (const octave_value& pstream) const
     {
       if (! pstream.is_empty())
 	{
 	  octave_value_list args;
-	  args(1) = "\nquit;\n";
-	  args(0) = pstream;
-	  feval ("fputs", args);
-	  args.resize (1);
-	  feval ("fflush", args);
-	  feval ("pclose", args);
+	  Matrix fids = pstream.matrix_value ();
+
+	  if (! error_state)
+	    {
+	      args(1) = "\nquit;\n";
+	      args(0) = octave_value (fids (0));
+	      feval ("fputs", args);
+	      args.resize (1);
+	      feval ("fflush", args);
+	      feval ("pclose", args);
+	      if (fids.numel () > 1)
+		{
+		  args(0) = octave_value (fids (1));
+		  feval ("pclose", args);
+		}
+	    }
 	}
     }
 
   void redraw_figure (const graphics_handle& fh) const
     {
       octave_value_list args;
       args(0) = fh.as_octave_value ();
       feval ("gnuplot_drawnow", args);
