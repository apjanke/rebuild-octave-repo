# HG changeset patch
# User jwe
# Date 1040490925 0
#      Sat Dec 21 17:15:25 2002 +0000
# Node ID 90e44267e8cfe116624153de5512e5357e33a6e9
# Parent  ccfdb55c8156f8a6facc4498bab5e303d7fe2aff
[project @ 2002-12-21 17:15:25 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,15 +1,44 @@
+2002-12-21  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* pt-arg-list.cc (indexed_object, indexed_position):
+	New file-scope static variables.
+	(tree_argument_list::convert_to_const_vector): New arg, object.
+	Protect and set indexed_object and indexed_position.
+	(F__end__): New function.
+
+	* octave-lvalue.h (octave_lvalue::object): New member function.
+	* pt-idx.cc (make_value_list): New arg, object.  Change all
+	callers.  Pass object to convert_to_const_vector.
+
+	* lex.h (lexical_feedback.looking_at_object_index): New data member.
+	* lex.l (lexical_feedback::init): Initialize it.
+	(is_keyword): If looking at object index, end is not a keyword.
+	(handle_identifier): If end is not a keyword, transform it to __end__.
+	* parse.y (begin_obj_idx): New non-terminal.
+	(postfix_expr): Use it.
+
+	* defun.cc (install_builtin_function): New arg, can_hide_function.
+	* defun-int.h: Fix decl.
+	(DEFCONSTFUN_INTERNAL): New macro.
+	* defun.h (DEFCONSTFUN): New macro.
+	* mkbuiltins (XDEFCONSTFUN_INTERNAL): New macro.
+	* mkgendoc: Likewise.
+	* Makefile.in (DEFUN_PATTERN): Make it work for DEFCONSTFUN too.
+	* symtab.h (symbol_record::can_hide_function): New data member.
+	(symbol_record::symbol_record): Initialize it.
+	* symtab.cc (symbol_record::variable_reference): Also check
+	can_hide_function flag.
+
 2002-12-20  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* DLD-FUNCTIONS/time.cc (extract_tm): Use int_value() instead of
 	casting double_value() to int.
 
-	* DLD-FUNCITONS/time.cc ()
-
 	* ov.cc (octave_value::next_subsref): Arg "skip" is now size_t.
 
 	* oct-obj.h (octave_value_list::octave_value_list (double),
 	octave_value_list::octave_value_list (const Matrix&),
 	octave_value_list::octave_value_list (const DiagMatrix&),
 	octave_value_list::octave_value_list (const RowVector&),
 	octave_value_list::octave_value_list (const ColumnVector&),
 	octave_value_list::octave_value_list (const Complex&),
diff --git a/src/Makefile.in b/src/Makefile.in
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -158,17 +158,17 @@ DEP_3 := $(patsubst %.l, %.cc, $(DEP_4))
 DEP_2 := $(patsubst %.y, %.cc, $(DEP_3))
 DEP_1 := $(patsubst %.c, %.d, $(DEP_2))
 MAKEDEPS := $(patsubst %.cc, %.d, $(DEP_1))
 
 # Some stupid egreps don't like empty elements in alternation patterns,
 # so we have to repeat ourselves because some stupid egreps don't like
 # empty elements in alternation patterns.
 
-DEFUN_PATTERN = "^[ \t]*DEF(CMD|UN|UN_DLD|UN_TEXT|UN_MAPPER)[ \t]*\\("
+DEFUN_PATTERN = "^[ \t]*DEF(CONSTFUN|CMD|UN|UN_DLD|UN_TEXT|UN_MAPPER)[ \t]*\\("
 
 DLD_DEF_FILES := $(patsubst %.cc, %.df, $(DLD_XSRC))
 
 DEF_4 := $(addprefix $(srcdir)/, $(SOURCES))
 DEF_3 := $(notdir $(shell egrep -l $(DEFUN_PATTERN) $(DEF_4)))
 DEF_2 := $(patsubst %.y, %.df, $(DEF_3))
 DEF_1 := $(patsubst %.l, %.df, $(DEF_2))
 DEF_FILES := $(patsubst %.cc, %.df, $(DEF_1)) $(DLD_DEF_FILES)
diff --git a/src/defun-int.h b/src/defun-int.h
--- a/src/defun-int.h
+++ b/src/defun-int.h
@@ -37,17 +37,18 @@ extern void print_usage (const std::stri
 
 extern void check_version (const std::string& version, const std::string& fcn);
 
 extern void
 install_builtin_mapper (octave_mapper *mf);
 
 extern void
 install_builtin_function (octave_builtin::fcn f, const std::string& name,
-			  const std::string& doc, bool is_text_fcn = false);
+			  const std::string& doc, bool is_text_fcn = false,
+			  bool can_hide_function = true);
 
 extern void
 install_builtin_variable (const std::string& n, const octave_value& v,
 			  bool p, bool e,
 			  symbol_record::change_function chg_fcn,
 			  const std::string& h);
 
 extern void
@@ -102,16 +103,21 @@ typedef bool (*octave_dld_fcn_installer)
 // mkdefs will create a .def file for every .cc file that uses DEFUN,
 // or DEFCMD.
 
 #define DEFUN_INTERNAL(name, args_name, nargout_name, is_text_fcn, doc) \
   BEGIN_INSTALL_BUILTIN \
     XDEFUN_INTERNAL (name, args_name, nargout_name, is_text_fcn, doc) \
   END_INSTALL_BUILTIN
 
+#define DEFCONSTFUN_INTERNAL(name, args_name, nargout_name, is_text_fcn, doc) \
+  BEGIN_INSTALL_BUILTIN \
+    XDEFCONSTFUN_INTERNAL (name, args_name, nargout_name, is_text_fcn, doc) \
+  END_INSTALL_BUILTIN
+
 #define DEFUNX_INTERNAL(name, fname, args_name, nargout_name, \
 			is_text_fcn, doc) \
   BEGIN_INSTALL_BUILTIN \
     XDEFUNX_INTERNAL (name, fname, args_name, nargout_name, is_text_fcn, doc) \
   END_INSTALL_BUILTIN
 
 // Generate code to install name in the symbol table.  The script
 // mkdefs will create a .def file for every .cc file that uses
@@ -156,16 +162,19 @@ typedef bool (*octave_dld_fcn_installer)
 #else /* ! MAKE_BUILTINS */
 
 // Generate the first line of the function definition.  This ensures
 // that the internal functions all have the same signature.
 
 #define DEFUN_INTERNAL(name, args_name, nargout_name, is_text_fcn, doc) \
   DECLARE_FUN (name, args_name, nargout_name)
 
+#define DEFCONSTFUN_INTERNAL(name, args_name, nargout_name, is_text_fcn, doc) \
+  DECLARE_FUN (name, args_name, nargout_name)
+
 #define DEFUNX_INTERNAL(name, fname, args_name, nargout_name, \
 			is_text_fcn, doc) \
   DECLARE_FUNX (fname, args_name, nargout_name)
 
 // No definition is required for an alias.
 
 #define DEFALIAS_INTERNAL(name, alias)
 
diff --git a/src/defun.cc b/src/defun.cc
--- a/src/defun.cc
+++ b/src/defun.cc
@@ -92,17 +92,18 @@ install_builtin_mapper (octave_mapper *m
   sym_rec->define (mf, t);
   sym_rec->document (mf->doc_string ());
   sym_rec->make_eternal ();
   sym_rec->protect ();
 }
 
 void
 install_builtin_function (octave_builtin::fcn f, const std::string& name,
-			  const std::string& doc, bool is_text_fcn)
+			  const std::string& doc, bool is_text_fcn,
+			  bool /* can_hide_function -- not yet implemented */)
 {
   symbol_record *sym_rec = fbi_sym_tab->lookup (name, true);
 
   unsigned int t = symbol_record::BUILTIN_FUNCTION;
 
   if (is_text_fcn)
     t |= symbol_record::COMMAND;
 
diff --git a/src/defun.h b/src/defun.h
--- a/src/defun.h
+++ b/src/defun.h
@@ -96,16 +96,20 @@ Software Foundation, 59 Temple Place - S
 
 #define DEFCMD(name, args_name, nargout_name, doc) \
   DEFUN_INTERNAL (name, args_name, nargout_name, true, doc)
 
 // For backward compatibility.
 
 #define DEFUN_TEXT DEFCMD
 
+// This is a function with a name that can't be hidden by a variable.
+#define DEFCONSTFUN(name, args_name, nargout_name, doc) \
+  DEFCONSTFUN_INTERNAL (name, args_name, nargout_name, true, doc)
+
 // Define a mapper function.
 //
 //   name is the name of the function, unquoqted.
 //
 //   ch_map is a pointer to a function that should be called for
 //     integer arguments that are expected to create integer results.
 //     (It's a kluge to handle character mappers like isalpha.)
 //
diff --git a/src/lex.h b/src/lex.h
--- a/src/lex.h
+++ b/src/lex.h
@@ -157,16 +157,19 @@ public:
 
   // TRUE means we're parsing the parameter list for a function.
   bool looking_at_parameter_list;
 
   // TRUE means we're parsing a matrix or the left hand side of
   // multi-value assignment statement.
   bool looking_at_matrix_or_assign_lhs;
 
+  // TRUE means we're parsing an indexing operation for an object.
+  bool looking_at_object_index;
+
   // GAG.  Stupid kludge so that [[1,2][3,4]] will work.
   bool do_comma_insert;
 
   // TRUE means we think we are looking at a set command.
   bool doing_set;
 
   // TRUE means we're looking at the range part of a plot command.
   bool in_plot_range;
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -1103,17 +1103,20 @@ is_keyword (const std::string& s)
 	case otherwise_kw:
 	case return_kw:
 	case static_kw:
 	case until_kw:
 	case unwind_protect_cleanup_kw:
  	  break;
 
 	case end_kw:
-	  yylval.tok_val = new token (token::simple_end, l, c);
+	  if (lexer_flags.looking_at_object_index)
+	    return 0;
+	  else
+	    yylval.tok_val = new token (token::simple_end, l, c);
 	  break;
 
 	case end_try_catch_kw:
 	  yylval.tok_val = new token (token::try_catch_end, l, c);
 	  break;
 
 	case end_unwind_protect_kw:
 	  yylval.tok_val = new token (token::unwind_protect_end, l, c);
@@ -2378,17 +2381,21 @@ handle_identifier (void)
 	{
 	  if (tok == "gset")
 	    lexer_flags.doing_set = true;
 
 	  BEGIN COMMAND_START;
 	}
     }
 
-  // Find the token in the symbol table.
+  // Find the token in the symbol table.  Beware the magic
+  // transformation of the end keyword...
+
+  if (tok == "end")
+    tok = "__end__";    
 
   yylval.tok_val = new token (lookup_identifier (tok),
 			      input_line_number,
 			      current_input_column);
 
   token_stack.push (yylval.tok_val);
 
   // After seeing an identifer, it is ok to convert spaces to a comma
@@ -2533,16 +2540,19 @@ lexical_feedback::init (void)
   // Not parsing a function return or parameter list.
   looking_at_return_list = false;
   looking_at_parameter_list = false;
 
   // Not parsing a matrix or the left hand side of multi-value
   // assignment statement.
   looking_at_matrix_or_assign_lhs = false;
 
+  // Not parsing an object index.
+  looking_at_object_index = false;
+
   // Next token can be identifier.
   cant_be_identifier = false;
 
   // No need to do comma insert or convert spaces to comma at
   // beginning of input. 
   convert_spaces_to_comma = true;
   do_comma_insert = false;
 
diff --git a/src/mkbuiltins b/src/mkbuiltins
--- a/src/mkbuiltins
+++ b/src/mkbuiltins
@@ -37,22 +37,27 @@ cat << \EOF
 #define XDEFUN_DLD_INTERNAL(name, args_name, nargout_name, is_text_fcn, doc)
 #else
 #define XDEFUN_DLD_INTERNAL(name, args_name, nargout_name, is_text_fcn, doc) \
   XDEFUN_INTERNAL(name, args_name, nargout_name, is_text_fcn, doc)
 #endif
 
 #define XDEFUN_INTERNAL(name, args_name, nargout_name, is_text_fcn, doc) \
   extern DECLARE_FUN (name, args_name, nargout_name); \
-    install_builtin_function (F ## name, #name, doc, is_text_fcn); \
+  install_builtin_function (F ## name, #name, doc, is_text_fcn); \
+
+#define XDEFCONSTFUN_INTERNAL(name, args_name, nargout_name, \
+			      is_text_fcn, doc) \
+  extern DECLARE_FUN (name, args_name, nargout_name); \
+  install_builtin_function (F ## name, #name, doc, is_text_fcn, false); \
 
 #define XDEFUNX_INTERNAL(name, fname, args_name, nargout_name, \
 			 is_text_fcn, doc) \
   extern DECLARE_FUNX (fname, args_name, nargout_name); \
-    install_builtin_function (fname, name, doc, is_text_fcn); \
+  install_builtin_function (fname, name, doc, is_text_fcn); \
 
 #define XDEFALIAS_INTERNAL(alias, name) \
   alias_builtin (#alias, #name);
 
 #define XDEFVAR_INTERNAL(name, sname, defn, protect, chg_fcn, doc)
 
 #define XDEFCONST_INTERNAL(name, defn, doc)
 
diff --git a/src/mkgendoc b/src/mkgendoc
--- a/src/mkgendoc
+++ b/src/mkgendoc
@@ -19,16 +19,20 @@ cat << \EOF
 #include <string>
 
 #define XDEFUN_DLD_INTERNAL(name, args_name, nargout_name, is_text_fcn, doc) \
   print_doc_string (#name, doc);
 
 #define XDEFUN_INTERNAL(name, args_name, nargout_name, is_text_fcn, doc) \
   print_doc_string (#name, doc);
 
+#define XDEFCONSTFUN_INTERNAL(name, args_name, nargout_name, \
+			      is_text_fcn, doc) \
+  print_doc_string (#name, doc);
+
 #define XDEFUNX_INTERNAL(name, fname, args_name, nargout_name, \
 			 is_text_fcn, doc) \
   print_doc_string (name, doc);
 
 #define XDEFALIAS_INTERNAL(alias, name)
 
 #define XDEFVAR_INTERNAL(name, sname, defn, protect, chg_fcn, doc) \
   print_doc_string (#name, doc);
diff --git a/src/oct-lvalue.h b/src/oct-lvalue.h
--- a/src/oct-lvalue.h
+++ b/src/oct-lvalue.h
@@ -80,16 +80,18 @@ public:
 
   void clear_index (void) { type = std::string (); idx.clear (); }
 
   void do_unary_op (octave_value::unary_op op);
 
   octave_value value (void)
     { return idx.empty () ? *val : val->subsref (type, idx); }
 
+  const octave_value *object (void) const { return val; }
+
 private:
 
   octave_value *val;
 
   std::string type;
 
   std::list<octave_value_list> idx;
 
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -700,26 +700,36 @@ arg_list	: expression
 		    $$ = $1;
 		  }
 		;
 
 indirect_ref_op	: '.'
 		  { lexer_flags.looking_at_indirect_ref = true; }
 		;
 
+begin_obj_idx	: // empty
+		  { lexer_flags.looking_at_object_index = true; }
+		;
+
 postfix_expr	: primary_expr
 		  { $$ = $1; }
-		| postfix_expr '(' ')'
+		| postfix_expr '(' begin_obj_idx ')'
 		  { $$ = make_index_expression ($1, 0, '('); }
-		| postfix_expr '(' arg_list ')'
-		  { $$ = make_index_expression ($1, $3, '('); }
-		| postfix_expr '{' '}'
+		| postfix_expr '(' begin_obj_idx arg_list ')'
+		  {
+		    $$ = make_index_expression ($1, $4, '(');
+		    lexer_flags.looking_at_object_index = false;
+		  }
+		| postfix_expr '{' begin_obj_idx '}'
 		  { $$ = make_index_expression ($1, 0, '{'); }
-		| postfix_expr '{' arg_list '}'
-		  { $$ = make_index_expression ($1, $3, '{'); }
+		| postfix_expr '{' begin_obj_idx arg_list '}'
+		  {
+		    $$ = make_index_expression ($1, $4, '{');
+		    lexer_flags.looking_at_object_index = false;
+		  }
 		| postfix_expr PLUS_PLUS
 		  { $$ = make_postfix_op (PLUS_PLUS, $1, $2); }
 		| postfix_expr MINUS_MINUS
 		  { $$ = make_postfix_op (MINUS_MINUS, $1, $2); }
 		| postfix_expr QUOTE
 		  { $$ = make_postfix_op (QUOTE, $1, $2); }
 		| postfix_expr TRANSPOSE
 		  { $$ = make_postfix_op (TRANSPOSE, $1, $2); }
diff --git a/src/pt-arg-list.cc b/src/pt-arg-list.cc
--- a/src/pt-arg-list.cc
+++ b/src/pt-arg-list.cc
@@ -28,25 +28,27 @@ Software Foundation, 59 Temple Place - S
 #include <config.h>
 #endif
 
 #include <iostream>
 #include <string>
 
 #include "str-vec.h"
 
+#include "defun.h"
 #include "error.h"
 #include "oct-obj.h"
 #include "ov.h"
 #include "ov-usr-fcn.h"
 #include "pt-arg-list.h"
 #include "pt-exp.h"
 #include "pt-pr-code.h"
 #include "pt-walk.h"
 #include "toplev.h"
+#include "unwind-prot.h"
 
 // Argument lists.
 
 tree_argument_list::~tree_argument_list (void)
 {
   while (! empty ())
     {
       iterator p = begin ();
@@ -83,33 +85,77 @@ tree_argument_list::all_elements_are_con
 
       if (! elt->is_constant ())
 	return false;
     }
 
   return true;
 }
 
+static const octave_value *indexed_object = 0;
+static int index_position = 0;
+
+DEFCONSTFUN (__end__, , ,
+  "internal function")
+{
+  octave_value retval;
+
+  if (indexed_object)
+    {
+      switch (index_position)
+	{
+	case -1:
+	  // XXX FIXME XXX -- we really want "numel" here.
+	  retval = indexed_object->rows () * indexed_object->columns ();
+	  break;
+
+	case 0:
+	  retval = indexed_object->rows ();
+	  break;
+
+	case 1:
+	  retval = indexed_object->columns ();
+	  break;
+
+	default:
+	  ::error ("__end__: internal error");
+	  break;
+	}
+    }
+  else
+    ::error ("__end__: internal error");
+
+  return retval;
+}
+
 octave_value_list
-tree_argument_list::convert_to_const_vector (void)
+tree_argument_list::convert_to_const_vector (const octave_value *object)
 {
+  unwind_protect::begin_frame ("convert_to_const_vector");
+
+  unwind_protect_ptr (indexed_object);
+
+  indexed_object = object;
+
   int len = length ();
 
   // XXX FIXME XXX -- would be nice to know in advance how largs args
   // needs to be even when we have a list containing an all_va_args
   // token.
 
   octave_value_list args;
   int args_len = len;
   args.resize (args_len);
 
   iterator p = begin ();
   int j = 0;
   for (int k = 0; k < len; k++)
     {
+      index_position = (len == 1) ? -1 : k;
+
       tree_expression *elt = *p++;
 
       if (elt)
 	{
 	  octave_value tmp = elt->rvalue ();
 
 	  if (error_state)
 	    {
@@ -155,16 +201,18 @@ tree_argument_list::convert_to_const_vec
 	{
 	  args(j++) = octave_value ();
 	  break;
 	}
     }
 
   args.resize (j);
 
+  unwind_protect::run_frame ("convert_to_const_vector");
+
   return args;
 }
 
 string_vector
 tree_argument_list::get_arg_names (void) const
 {
   int len = length ();
 
diff --git a/src/pt-arg-list.h b/src/pt-arg-list.h
--- a/src/pt-arg-list.h
+++ b/src/pt-arg-list.h
@@ -58,17 +58,17 @@ public:
       erase (p);
       return retval;
     }
 
   int nargout_count (void) const;
 
   bool all_elements_are_constant (void) const;
 
-  octave_value_list convert_to_const_vector (void);
+  octave_value_list convert_to_const_vector (const octave_value *object = 0);
 
   string_vector get_arg_names (void) const;
 
   void accept (tree_walker& tw);
 
 private:
 
   // No copying!
diff --git a/src/pt-idx.cc b/src/pt-idx.cc
--- a/src/pt-idx.cc
+++ b/src/pt-idx.cc
@@ -143,22 +143,23 @@ make_subs_cell (tree_argument_list *args
 	    retval(0,i) = arg_values(i);
 	}
     }
 
   return retval;
 }
 
 static inline octave_value_list
-make_value_list (tree_argument_list *args, const string_vector& arg_nm)
+make_value_list (tree_argument_list *args, const string_vector& arg_nm,
+		 const octave_value *object)
 {
   octave_value_list retval;
 
   if (args)
-    retval = args->convert_to_const_vector ();
+    retval = args->convert_to_const_vector (object);
 
   if (! error_state)
     {
       int n = retval.length ();
 
       if (n > 0)
 	retval.stash_name_tags (arg_nm);
     }
@@ -269,21 +270,21 @@ tree_index_expression::rvalue (int nargo
       std::list<string_vector>::iterator p_arg_nm = arg_nm.begin ();
       std::list<tree_expression *>::iterator p_dyn_field = dyn_field.begin ();
 
       for (int i = 0; i < n; i++)
 	{
 	  switch (type[i])
 	    {
 	    case '(':
-	      idx.push_back (make_value_list (*p_args, *p_arg_nm));
+	      idx.push_back (make_value_list (*p_args, *p_arg_nm, &tmp));
 	      break;
 
 	    case '{':
-	      idx.push_back (make_value_list (*p_args, *p_arg_nm));
+	      idx.push_back (make_value_list (*p_args, *p_arg_nm, &tmp));
 	      break;
 
 	    case '.':
 	      {
 		idx.push_back (octave_value (get_struct_index (p_arg_nm, p_dyn_field)));
 
 		if (error_state)
 		  eval_error ();
@@ -330,52 +331,54 @@ tree_index_expression::lvalue (void)
   std::list<octave_value_list> idx;
 
   int n = args.size ();
 
   std::list<tree_argument_list *>::iterator p_args = args.begin ();
   std::list<string_vector>::iterator p_arg_nm = arg_nm.begin ();
   std::list<tree_expression *>::iterator p_dyn_field = dyn_field.begin ();
 
-  for (int i = 0; i < n; i++)
-    {
-      switch (type[i])
-	{
-	case '(':
-	  idx.push_back (make_value_list (*p_args, *p_arg_nm));
-	  break;
-
-	case '{':
-	  idx.push_back (make_value_list (*p_args, *p_arg_nm));
-	  break;
-
-	case '.':
-	  {
-	    idx.push_back (octave_value (get_struct_index (p_arg_nm, p_dyn_field)));
-
-	    if (error_state)
-	      eval_error ();
-	  }
-	  break;
-
-	default:
-	  panic_impossible ();
-	}
-
-      if (error_state)
-	break;
-
-      p_args++;
-      p_arg_nm++;
-      p_dyn_field++;
-    }
+  retval = expr->lvalue ();
 
   if (! error_state)
     {
-      retval = expr->lvalue ();
+      const octave_value *tmp = retval.object ();
+
+      for (int i = 0; i < n; i++)
+	{
+	  switch (type[i])
+	    {
+	    case '(':
+	      idx.push_back (make_value_list (*p_args, *p_arg_nm, tmp));
+	      break;
+
+	    case '{':
+	      idx.push_back (make_value_list (*p_args, *p_arg_nm, tmp));
+	      break;
+
+	    case '.':
+	      {
+		idx.push_back (octave_value (get_struct_index (p_arg_nm, p_dyn_field)));
+
+		if (error_state)
+		  eval_error ();
+	      }
+	      break;
+
+	    default:
+	      panic_impossible ();
+	    }
+
+	  if (error_state)
+	    break;
+
+	  p_args++;
+	  p_arg_nm++;
+	  p_dyn_field++;
+	}
 
       if (! error_state)
 	retval.set_index (type, idx);
     }
 
   return retval;
 }
 
diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -327,25 +327,24 @@ inline void
 symbol_record::link_to_builtin_variable (void)
 {
   symbol_record *tmp_sym = fbi_sym_tab->lookup (name ());
 
   if (tmp_sym && tmp_sym->is_builtin_variable ())
     alias (tmp_sym);
 }
 
-
 octave_lvalue
 symbol_record::variable_reference (void)
 {
-  if (Vvariables_can_hide_functions <= 0
+  if ((Vvariables_can_hide_functions <= 0 || ! can_hide_function)
       && (is_function ()
 	  || (! is_defined () && is_valid_function (nm))))
     {
-      if (Vvariables_can_hide_functions < 0)
+      if (Vvariables_can_hide_functions < 0 && can_hide_function)
 	warning ("variable `%s' hides function", nm.c_str ());
       else
 	{
 	  error ("variable `%s' hides function", nm.c_str ());
 	  return octave_lvalue ();
 	}
     }
 
diff --git a/src/symtab.h b/src/symtab.h
--- a/src/symtab.h
+++ b/src/symtab.h
@@ -216,23 +216,26 @@ private:
   };
 
 public:
 
   typedef int (*change_function) (void);
 
   symbol_record (void)
     : formal_param (0), linked_to_global (0), tagged_static (0),
-      nm (), chg_fcn (0), definition (new symbol_def ()),
-      next_elem (0) { }
+      can_hide_function (1), nm (), chg_fcn (0),
+      definition (new symbol_def ()), next_elem (0) { }
+
+  // XXX FIXME XXX -- kluge alert!  We obviously need a better way of
+  // handling allow_shadow!
 
   symbol_record (const std::string& n, symbol_record *nxt)
     : formal_param (0), linked_to_global (0), tagged_static (0),
-      nm (n), chg_fcn (0), definition (new symbol_def ()),
-      next_elem (nxt) { }
+      can_hide_function (n != "__end__"), nm (n), chg_fcn (0),
+      definition (new symbol_def ()), next_elem (nxt) { }
 
   ~symbol_record (void) { }
 
   std::string name (void) const { return nm; }
 
   std::string help (void) const { return definition->help (); }
 
   octave_value& def (void) { return definition->def (); }
@@ -351,16 +354,17 @@ public:
   void print_info (std::ostream& os,
 		   const std::string& prefix = std::string ()) const;
 
 private:
 
   unsigned int formal_param : 1;
   unsigned int linked_to_global : 1;
   unsigned int tagged_static : 1;
+  unsigned int can_hide_function : 1;
 
   std::string nm;
   change_function chg_fcn;
   symbol_def *definition;
   symbol_record *next_elem;
 
   // This should maybe be one stack with a structure containing all the
   // items we need to save for recursive calls...
