# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1541450571 18000
#      Mon Nov 05 15:42:51 2018 -0500
# Node ID 920a4ad8043b49201ec63f3bf6684d7cadf845c6
# Parent  0af4653e48a4e8382cc3753726ebbe1b4c78cd01
remove called_from_builtin

This function is apparently obsolete now.  If that's not correct, then
this code can easily be restored, but I would like to have test cases
that show it is actually needed.

* ov-base.h, ov-base.cc (called_from_builtin): Delete.
* ov-class.cc (octave_class::size, octave_class::numel,
octave_class::subsref, octave_class::subsasgn):
Don't check called_from_builtin.
* ov-classdef.cc (octave_classdef::subsref, octave_classdef::subsasgn,
octave_classdef::numel): Likewise.

diff --git a/libinterp/octave-value/ov-base.cc b/libinterp/octave-value/ov-base.cc
--- a/libinterp/octave-value/ov-base.cc
+++ b/libinterp/octave-value/ov-base.cc
@@ -1456,32 +1456,16 @@ make_idx_args (const std::string& type,
   octave_map m;
 
   m.assign ("type", type_field);
   m.assign ("subs", subs_field);
 
   return m;
 }
 
-bool
-called_from_builtin (void)
-{
-  octave::call_stack& cs = octave::__get_call_stack__ ("called_from_builtin");
-
-  octave_function *fcn = cs.caller ();
-
-  // FIXME: we probably need a better check here, or some other
-  // mechanism to avoid overloaded functions when builtin is used.
-  // For example, what if someone overloads the builtin function?
-  // Also, are there other places where using builtin is not properly
-  // avoiding dispatch?
-
-  return (fcn && fcn->name () == "builtin");
-}
-
 void
 install_base_type_conversions (octave::type_info& ti)
 {
   INSTALL_ASSIGNCONV_TI (ti, octave_base_value, octave_scalar, octave_matrix);
   INSTALL_ASSIGNCONV_TI (ti, octave_base_value, octave_matrix, octave_matrix);
   INSTALL_ASSIGNCONV_TI (ti, octave_base_value, octave_complex,
                          octave_complex_matrix);
   INSTALL_ASSIGNCONV_TI (ti, octave_base_value, octave_complex_matrix,
diff --git a/libinterp/octave-value/ov-base.h b/libinterp/octave-value/ov-base.h
--- a/libinterp/octave-value/ov-base.h
+++ b/libinterp/octave-value/ov-base.h
@@ -883,13 +883,9 @@ extern OCTINTERP_API bool Vsparse_auto_m
 // Utility function to convert C++ arguments used in subsref/subsasgn into an
 // octave_value_list object that can be used to call a function/method in the
 // interpreter.
 extern OCTINTERP_API octave_value
 make_idx_args (const std::string& type,
                const std::list<octave_value_list>& idx,
                const std::string& who);
 
-// Tells whether some regular octave_value_base methods are being called from
-// within the "builtin" function.
-extern OCTINTERP_API bool called_from_builtin (void);
-
 #endif
diff --git a/libinterp/octave-value/ov-class.cc b/libinterp/octave-value/ov-class.cc
--- a/libinterp/octave-value/ov-class.cc
+++ b/libinterp/octave-value/ov-class.cc
@@ -289,17 +289,17 @@ octave_class::dotref (const octave_value
     error ("class has no member '%s'", nm.c_str ());
 
   return my_map.contents (p);
 }
 
 Matrix
 octave_class::size (void)
 {
-  if (in_class_method () || called_from_builtin ())
+  if (in_class_method ())
     return octave_base_value::size ();
 
   Matrix retval (1, 2, 1.0);
 
   octave::symbol_table& symtab =
     octave::__get_symbol_table__ ("octave_class::size");
 
   octave_value meth = symtab.find_method ("size", class_name ());
@@ -329,17 +329,17 @@ octave_class::size (void)
     }
 
   return retval;
 }
 
 octave_idx_type
 octave_class::numel (const octave_value_list& idx)
 {
-  if (in_class_method () || called_from_builtin ())
+  if (in_class_method ())
     return octave_base_value::numel (idx);
 
   octave_idx_type retval = -1;
   const std::string cn = class_name ();
 
   octave::symbol_table& symtab =
     octave::__get_symbol_table__ ("octave_class::numel");
 
@@ -369,17 +369,17 @@ octave_class::numel (const octave_value_
 
 octave_value_list
 octave_class::subsref (const std::string& type,
                        const std::list<octave_value_list>& idx,
                        int nargout)
 {
   octave_value_list retval;
 
-  if (in_class_method () || called_from_builtin ())
+  if (in_class_method ())
     {
       // FIXME: this block of code is the same as the body of
       // octave_struct::subsref.  Maybe it could be shared instead of
       // duplicated.
 
       int skip = 1;
 
       switch (type[0])
@@ -530,17 +530,17 @@ octave_class::undef_subsasgn (const std:
 octave_value
 octave_class::subsasgn_common (const octave_value& obj,
                                const std::string& type,
                                const std::list<octave_value_list>& idx,
                                const octave_value& rhs)
 {
   octave_value retval;
 
-  if (! (in_class_method () || called_from_builtin ()))
+  if (! in_class_method ())
     {
       octave::symbol_table& symtab
         = octave::__get_symbol_table__ ("octave_class::subsasgn_common");
 
       octave_value meth = symtab.find_method ("subsasgn", class_name ());
 
       if (meth.is_defined ())
         {
diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -860,17 +860,17 @@ octave_classdef::subsref (const std::str
                           const std::list<octave_value_list>& idx,
                           int nargout)
 {
   size_t skip = 0;
   octave_value_list retval;
 
   cdef_class cls = object.get_class ();
 
-  if (! in_class_method (cls) && ! called_from_builtin ())
+  if (! in_class_method (cls))
     {
       cdef_method meth = cls.find_method ("subsref");
 
       if (meth.ok ())
         {
           octave_value_list args;
 
           args(1) = make_idx_args (type, idx, "subsref");
@@ -919,17 +919,17 @@ octave_value
 octave_classdef::subsasgn (const std::string& type,
                            const std::list<octave_value_list>& idx,
                            const octave_value& rhs)
 {
   octave_value retval;
 
   cdef_class cls = object.get_class ();
 
-  if (! in_class_method (cls) && ! called_from_builtin ())
+  if (! in_class_method (cls))
     {
       cdef_method meth = cls.find_method ("subsasgn");
 
       if (meth.ok ())
         {
           octave_value_list args;
 
           args(1) = make_idx_args (type, idx, "subsasgn");
@@ -974,17 +974,17 @@ octave_classdef::undef_subsasgn (const s
 
 octave_idx_type
 octave_classdef::numel (const octave_value_list& idx)
 {
   octave_idx_type retval = -1;
 
   cdef_class cls = object.get_class ();
 
-  if (! in_class_method (cls) && ! called_from_builtin ())
+  if (! in_class_method (cls))
     {
       cdef_method meth = cls.find_method ("numel");
 
       if (meth.ok ())
         {
           octave_value_list args (idx.length () + 1, octave_value ());
 
           count++;
