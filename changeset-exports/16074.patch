# HG changeset patch
# User Rik <rik@octave.org>
# Date 1361401119 28800
#      Wed Feb 20 14:58:39 2013 -0800
# Node ID 821922270b66c35c6953c4441b36a24a8da573c0
# Parent  1c8234f0b6421404336a6ad0af20a23f131176a2
Fix saving binary matrices with up to 2^31 elements (Bug #38326).

* liboctave/util/data-conv.cc(LS_DO_READ, LS_DO_WRITE, read_doubles,
read_floats, write_doubles, write_floats): Calculate number of bytes
to read/write using std::streamsize variable rather than octave_idx_type.

diff --git a/liboctave/util/data-conv.cc b/liboctave/util/data-conv.cc
--- a/liboctave/util/data-conv.cc
+++ b/liboctave/util/data-conv.cc
@@ -482,17 +482,18 @@ oct_data_conv::data_type_as_string (oct_
 }
 
 #define LS_DO_READ(TYPE, swap, data, size, len, stream) \
   do \
     { \
       if (len > 0) \
         { \
           OCTAVE_LOCAL_BUFFER (TYPE, ptr, len); \
-          stream.read (reinterpret_cast<char *>  (ptr), size * len); \
+          std::streamsize n_bytes = size * len; \
+          stream.read (reinterpret_cast<char *> (ptr), n_bytes); \
           if (swap) \
             swap_bytes< size > (ptr, len); \
           for (octave_idx_type i = 0; i < len; i++) \
             data[i] = ptr[i]; \
         } \
     } \
   while (0)
 
@@ -504,17 +505,18 @@ oct_data_conv::data_type_as_string (oct_
     { \
       if (len > 0) \
         { \
           char tmp_type = type; \
           stream.write (&tmp_type, 1); \
           OCTAVE_LOCAL_BUFFER (TYPE, ptr, len); \
           for (octave_idx_type i = 0; i < len; i++) \
             ptr[i] = static_cast <TYPE> (data[i]);         \
-          stream.write (reinterpret_cast<char *> (ptr), size * len); \
+          std::streamsize n_bytes = size * len; \
+          stream.write (reinterpret_cast<char *> (ptr), n_bytes); \
         } \
     } \
   while (0)
 
 // Loading variables from files.
 
 static void
 gripe_unrecognized_float_fmt (void)
@@ -1003,17 +1005,16 @@ do_float_format_conversion (void *data, 
     default:
       (*current_liboctave_error_handler)
         ("impossible state reached in file '%s' at line %d",
          __FILE__, __LINE__);
       break;
     }
 }
 
-
 void
 read_doubles (std::istream& is, double *data, save_type type,
               octave_idx_type len, bool swap,
               oct_mach_info::float_format fmt)
 {
   switch (type)
     {
     case LS_U_CHAR:
@@ -1038,26 +1039,28 @@ read_doubles (std::istream& is, double *
 
     case LS_INT:
       LS_DO_READ (int32_t, swap, data, 4, len, is);
       break;
 
     case LS_FLOAT:
       {
         OCTAVE_LOCAL_BUFFER (float, ptr, len);
-        is.read (reinterpret_cast<char *> (ptr), 4 * len);
+        std::streamsize n_bytes = 4 * len;
+        is.read (reinterpret_cast<char *> (ptr), n_bytes);
         do_float_format_conversion (ptr, len, fmt);
         for (octave_idx_type i = 0; i < len; i++)
           data[i] = ptr[i];
       }
       break;
 
     case LS_DOUBLE: // No conversion necessary.
       {
-        is.read (reinterpret_cast<char *> (data), 8 * len);
+        std::streamsize n_bytes = 8 * static_cast<std::streamsize> (len);
+        is.read (reinterpret_cast<char *> (data), n_bytes);
         do_double_format_conversion (data, len, fmt);
 
         for (int i = 0; i < len; i++)
           data[i] = __lo_ieee_replace_old_NA (data[i]);
       }
       break;
 
     default:
@@ -1093,24 +1096,28 @@ read_floats (std::istream& is, float *da
       LS_DO_READ (int16_t, swap, data, 2, len, is);
       break;
 
     case LS_INT:
       LS_DO_READ (int32_t, swap, data, 4, len, is);
       break;
 
     case LS_FLOAT: // No conversion necessary.
-      is.read (reinterpret_cast<char *> (data), 4 * len);
-      do_float_format_conversion (data, len, fmt);
+      {
+        std::streamsize n_bytes = 4 * len;
+        is.read (reinterpret_cast<char *> (data), n_bytes);
+        do_float_format_conversion (data, len, fmt);
+      }
       break;
 
     case LS_DOUBLE:
       {
         OCTAVE_LOCAL_BUFFER (double, ptr, len);
-        is.read (reinterpret_cast<char *> (ptr), 8 * len);
+        std::streamsize n_bytes = 8 * len;
+        is.read (reinterpret_cast<char *> (ptr), n_bytes);
         do_double_format_conversion (ptr, len, fmt);
         for (octave_idx_type i = 0; i < len; i++)
           data[i] = ptr[i];
       }
       break;
 
     default:
       is.clear (std::ios::failbit|is.rdstate ());
@@ -1151,17 +1158,18 @@ write_doubles (std::ostream& os, const d
     case LS_FLOAT:
       LS_DO_WRITE (float, data, 4, len, os);
       break;
 
     case LS_DOUBLE: // No conversion necessary.
       {
         char tmp_type = static_cast<char> (type);
         os.write (&tmp_type, 1);
-        os.write (reinterpret_cast <const char *> (data), 8 * len);
+        std::streamsize n_bytes = 8 * static_cast<std::streamsize> (len);
+        os.write (reinterpret_cast <const char *> (data), n_bytes);
       }
       break;
 
     default:
       (*current_liboctave_error_handler)
         ("unrecognized data format requested");
       break;
     }
@@ -1196,17 +1204,18 @@ write_floats (std::ostream& os, const fl
     case LS_INT:
       LS_DO_WRITE (int32_t, data, 4, len, os);
       break;
 
     case LS_FLOAT: // No conversion necessary.
       {
         char tmp_type = static_cast<char> (type);
         os.write (&tmp_type, 1);
-        os.write (reinterpret_cast <const char *> (data), 4 * len);
+        std::streamsize n_bytes = 4 * len;
+        os.write (reinterpret_cast <const char *> (data), n_bytes);
       }
       break;
 
     case LS_DOUBLE:
       LS_DO_WRITE (double, data, 8, len, os);
       break;
 
     default:
