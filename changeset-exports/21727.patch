# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1463588074 14400
#      Wed May 18 12:14:34 2016 -0400
# Node ID e0da98857c196b52972230456d71d0700dd3b78e
# Parent  f05a00e611ffd164961af3f9a13d628e41f29fcb
rename octave::syscalls namespace to octave::sys

* oct-syscalls.h: Rename octave::syscalls namespace to octave::sys.
Change all uses.

diff --git a/libinterp/corefcn/oct-procbuf.cc b/libinterp/corefcn/oct-procbuf.cc
--- a/libinterp/corefcn/oct-procbuf.cc
+++ b/libinterp/corefcn/oct-procbuf.cc
@@ -85,17 +85,17 @@ octave_procbuf::open (const char *comman
 
   volatile int child_std_end = (mode & std::ios::in) ? 1 : 0;
 
   volatile int parent_end, child_end;
 
   if (is_open ())
     return 0;
 
-  if (octave::syscalls::pipe (pipe_fds) < 0)
+  if (octave::sys::pipe (pipe_fds) < 0)
     return 0;
 
   if (mode & std::ios::in)
     {
       parent_end = pipe_fds[0];
       child_end = pipe_fds[1];
     }
   else
@@ -197,17 +197,17 @@ octave_procbuf::close (void)
         }
 
       if (status == 0 && gnulib::fclose (f) == 0)
         {
           using namespace std;
 
           do
             {
-              wait_pid = octave::syscalls::waitpid (proc_pid, &wstatus, 0);
+              wait_pid = octave::sys::waitpid (proc_pid, &wstatus, 0);
             }
           while (wait_pid == -1 && errno == EINTR);
         }
 
       f = 0;
     }
 
   open_p = false;
diff --git a/libinterp/corefcn/sighandlers.cc b/libinterp/corefcn/sighandlers.cc
--- a/libinterp/corefcn/sighandlers.cc
+++ b/libinterp/corefcn/sighandlers.cc
@@ -1016,17 +1016,17 @@ OCL_REP::wait (void)
       octave_child& oc = *p;
 
       pid_t pid = oc.pid;
 
       if (pid > 0)
         {
           int status;
 
-          if (octave::syscalls::waitpid (pid, &status, WNOHANG) > 0)
+          if (octave::sys::waitpid (pid, &status, WNOHANG) > 0)
             {
               oc.have_status = 1;
 
               oc.status = status;
 
               retval = true;
 
               break;
diff --git a/libinterp/corefcn/syscalls.cc b/libinterp/corefcn/syscalls.cc
--- a/libinterp/corefcn/syscalls.cc
+++ b/libinterp/corefcn/syscalls.cc
@@ -117,17 +117,17 @@ error message.\n\
 
   int i_old = old_stream.file_number ();
   int i_new = new_stream.file_number ();
 
   if (i_old >= 0 && i_new >= 0)
     {
       std::string msg;
 
-      int status = octave::syscalls::dup2 (i_old, i_new, msg);
+      int status = octave::sys::dup2 (i_old, i_new, msg);
 
       return ovl (status, msg);
     }
   else
     return ovl (-1, "");
 }
 
 DEFUNX ("exec", Fexec, args, ,
@@ -182,17 +182,17 @@ error message.\n\
 
   octave_history_write_timestamp ();
 
   if (! command_history::ignoring_entries ())
     command_history::clean_up_and_save ();
 
   std::string msg;
 
-  int status = octave::syscalls::execvp (exec_file, exec_args, msg);
+  int status = octave::sys::execvp (exec_file, exec_args, msg);
 
   return ovl (status, msg);
 }
 
 DEFUNX ("popen2", Fpopen2, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {[@var{in}, @var{out}, @var{pid}] =} popen2 (@var{command}, @var{args})\n\
 Start a subprocess with two-way communication.\n\
@@ -269,17 +269,17 @@ exit status, it will linger until Octave
     }
 
   bool sync_mode = (nargin == 3 ? args(2).bool_value () : false);
 
   int filedesc[2];
   std::string msg;
   pid_t pid;
 
-  pid = octave::syscalls::popen2 (exec_file, arg_list, sync_mode,
+  pid = octave::sys::popen2 (exec_file, arg_list, sync_mode,
                                  filedesc, msg, interactive);
   if (pid < 0)
     error (msg.c_str ());
 
   FILE *ifile = fdopen (filedesc[1], "r");
   FILE *ofile = fdopen (filedesc[0], "w");
 
   octave_stream is = octave_stdiostream::create (exec_file + "-in",
@@ -435,17 +435,17 @@ message.\n\
   int arg = args(2).int_value (true);
 
   // FIXME: Need better checking here?
   if (fid < 0)
     error ("fcntl: invalid file id");
 
   std::string msg;
 
-  int status = octave::syscalls::fcntl (fid, req, arg, msg);
+  int status = octave::sys::fcntl (fid, req, arg, msg);
 
   return ovl (status, msg);
 }
 
 DEFUNX ("fork", Ffork, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {[@var{pid}, @var{msg}] =} fork ()\n\
 Create a copy of the current process.\n\
@@ -471,113 +471,113 @@ action.  A system dependent error messag
   if (args.length () != 0)
     print_usage ();
 
   if (symbol_table::at_top_level ())
     error ("fork: cannot be called from command line");
 
   std::string msg;
 
-  pid_t pid = octave::syscalls::fork (msg);
+  pid_t pid = octave::sys::fork (msg);
 
   return ovl (pid, msg);
 }
 
 DEFUNX ("getpgrp", Fgetpgrp, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {pgid =} getpgrp ()\n\
 Return the process group id of the current process.\n\
 @end deftypefn")
 {
   if (args.length () != 0)
     print_usage ();
 
   std::string msg;
 
-  pid_t pid = octave::syscalls::getpgrp (msg);
+  pid_t pid = octave::sys::getpgrp (msg);
 
   return ovl (pid, msg);
 }
 
 DEFUNX ("getpid", Fgetpid, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {pid =} getpid ()\n\
 Return the process id of the current process.\n\
 @seealso{getppid}\n\
 @end deftypefn")
 {
   if (args.length () != 0)
     print_usage ();
 
-  return ovl (octave::syscalls::getpid ());
+  return ovl (octave::sys::getpid ());
 }
 
 DEFUNX ("getppid", Fgetppid, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {pid =} getppid ()\n\
 Return the process id of the parent process.\n\
 @seealso{getpid}\n\
 @end deftypefn")
 {
   if (args.length () != 0)
     print_usage ();
 
-  return ovl (octave::syscalls::getppid ());
+  return ovl (octave::sys::getppid ());
 }
 
 DEFUNX ("getegid", Fgetegid, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {egid =} getegid ()\n\
 Return the effective group id of the current process.\n\
 @seealso{getgid}\n\
 @end deftypefn")
 {
   if (args.length () != 0)
     print_usage ();
 
-  return ovl (octave::syscalls::getegid ());
+  return ovl (octave::sys::getegid ());
 }
 
 DEFUNX ("getgid", Fgetgid, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {gid =} getgid ()\n\
 Return the real group id of the current process.\n\
 @seealso{getegid}\n\
 @end deftypefn")
 {
   if (args.length () != 0)
     print_usage ();
 
-  return ovl (octave::syscalls::getgid ());
+  return ovl (octave::sys::getgid ());
 }
 
 DEFUNX ("geteuid", Fgeteuid, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {euid =} geteuid ()\n\
 Return the effective user id of the current process.\n\
 @seealso{getuid}\n\
 @end deftypefn")
 {
   if (args.length () != 0)
     print_usage ();
 
-  return ovl (octave::syscalls::geteuid ());
+  return ovl (octave::sys::geteuid ());
 }
 
 DEFUNX ("getuid", Fgetuid, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {uid =} getuid ()\n\
 Return the real user id of the current process.\n\
 @seealso{geteuid}\n\
 @end deftypefn")
 {
   if (args.length () != 0)
     print_usage ();
 
-  return ovl (octave::syscalls::getuid ());
+  return ovl (octave::sys::getuid ());
 }
 
 DEFUNX ("kill", Fkill, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {[@var{err}, @var{msg}] =} kill (@var{pid}, @var{sig})\n\
 Send signal @var{sig} to process @var{pid}.\n\
 \n\
 If @var{pid} is positive, then signal @var{sig} is sent to @var{pid}.\n\
@@ -601,17 +601,17 @@ Return 0 if successful, otherwise return
     print_usage ();
 
   pid_t pid = args(0).int_value (true);
 
   int sig = args(1).int_value (true);
 
   std::string msg;
 
-  int status = octave::syscalls::kill (pid, sig, msg);
+  int status = octave::sys::kill (pid, sig, msg);
 
   return ovl (status, msg);
 }
 
 DEFUNX ("lstat", Flstat, args, ,
         "-*- texinfo -*-\n\
 @deftypefn  {} {@var{info} =} lstat (@var{symlink})\n\
 @deftypefnx {} {[@var{info}, @var{err}, @var{msg}] =} lstat (@var{symlink})\n\
@@ -720,17 +720,17 @@ error message.\n\
 @end deftypefn")
 {
   if (args.length () != 0)
     print_usage ();
 
   int fid[2];
   std::string msg;
 
-  int status = octave::syscalls::pipe (fid, msg);
+  int status = octave::sys::pipe (fid, msg);
 
   if (status < 0)
     return ovl (-1, -1, -1, msg);
   else
     {
       FILE *ifile = fdopen (fid[0], "r");
       FILE *ofile = fdopen (fid[1], "w");
 
@@ -1127,17 +1127,17 @@ about the subprocess that exited.\n\
   int options = 0;
 
   if (nargin == 2)
     options = args(1).xint_value ("waitpid: PID must be an integer value");
 
   std::string msg;
   int status;
 
-  pid_t result = octave::syscalls::waitpid (pid, &status, options, msg);
+  pid_t result = octave::sys::waitpid (pid, &status, options, msg);
 
   return ovl (result, status, msg);
 }
 
 DEFUNX ("WIFEXITED", FWIFEXITED, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} WIFEXITED (@var{status})\n\
 Given @var{status} from a call to @code{waitpid}, return\n\
diff --git a/liboctave/system/oct-env.cc b/liboctave/system/oct-env.cc
--- a/liboctave/system/oct-env.cc
+++ b/liboctave/system/oct-env.cc
@@ -474,30 +474,30 @@ octave_env::do_get_home_directory (void)
         hd = do_getenv ("HOMEPATH");
       else
         hd = drv + do_getenv ("HOMEPATH");
     }
 #endif
 
   if (hd.empty ())
     {
-      octave_passwd pw = octave_passwd::getpwuid (octave::syscalls::getuid ());
+      octave_passwd pw = octave_passwd::getpwuid (octave::sys::getuid ());
 
       hd = pw ? pw.dir () : std::string (file_ops::dir_sep_str ());
     }
 
   return hd;
 }
 
 std::string
 octave_env::do_get_user_name (void) const
 {
   if (user_name.empty ())
     {
-      octave_passwd pw = octave_passwd::getpwuid (octave::syscalls::getuid ());
+      octave_passwd pw = octave_passwd::getpwuid (octave::sys::getuid ());
 
       user_name = pw ? pw.name () : std::string ("unknown");
     }
 
   return user_name;
 }
 
 std::string
diff --git a/liboctave/system/oct-syscalls.cc b/liboctave/system/oct-syscalls.cc
--- a/liboctave/system/oct-syscalls.cc
+++ b/liboctave/system/oct-syscalls.cc
@@ -45,23 +45,23 @@ along with Octave; see the file COPYING.
 #include "str-vec.h"
 
 #define NOT_SUPPORTED(nm) \
   nm ": not supported on this system"
 
 namespace octave
 {
   namespace
-  syscalls
+  sys
   {
     int
     dup2 (int old_fd, int new_fd)
     {
       std::string msg;
-      return octave::syscalls::dup2 (old_fd, new_fd, msg);
+      return octave::sys::dup2 (old_fd, new_fd, msg);
     }
 
     int
     dup2 (int old_fd, int new_fd, std::string& msg)
     {
       msg = "";
 
       int status = -1;
@@ -77,17 +77,17 @@ namespace octave
 
       return status;
     }
 
     int
     execvp (const std::string& file, const string_vector& argv)
     {
       std::string msg;
-      return octave::syscalls::execvp (file, argv, msg);
+      return octave::sys::execvp (file, argv, msg);
     }
 
     int
     execvp (const std::string& file, const string_vector& args,
             std::string& msg)
     {
       msg = "";
 
@@ -223,17 +223,17 @@ namespace octave
       return 0;
 #endif
     }
 
     int
     pipe (int *fildes)
     {
       std::string msg;
-      return octave::syscalls::pipe (fildes, msg);
+      return octave::sys::pipe (fildes, msg);
     }
 
     int
     pipe (int *fildes, std::string& msg)
     {
       msg = "";
 
       int status = -1;
@@ -245,17 +245,17 @@ namespace octave
 
       return status;
     }
 
     pid_t
     waitpid (pid_t pid, int *status, int options)
     {
       std::string msg;
-      return octave::syscalls::waitpid (pid, status, options, msg);
+      return octave::sys::waitpid (pid, status, options, msg);
     }
 
     pid_t
     waitpid (pid_t pid, int *status, int options,
              std::string& msg)
     {
       pid_t retval = -1;
       msg = "";
@@ -271,17 +271,17 @@ namespace octave
 
       return retval;
     }
 
     int
     kill (pid_t pid, int sig)
     {
       std::string msg;
-      return octave::syscalls::kill (pid, sig, msg);
+      return octave::sys::kill (pid, sig, msg);
     }
 
     int
     kill (pid_t pid, int sig, std::string& msg)
     {
       msg = "";
 
       int status = -1;
@@ -299,26 +299,26 @@ namespace octave
     }
 
     pid_t
     popen2 (const std::string& cmd, const string_vector& args,
             bool sync_mode, int *fildes)
     {
       std::string msg;
       bool interactive = false;
-      return octave::syscalls::popen2 (cmd, args, sync_mode, fildes, msg,
+      return octave::sys::popen2 (cmd, args, sync_mode, fildes, msg,
                                        interactive);
     }
 
     pid_t
     popen2 (const std::string& cmd, const string_vector& args,
             bool sync_mode, int *fildes, std::string& msg)
     {
       bool interactive = false;
-      return octave::syscalls::popen2 (cmd, args, sync_mode, fildes, msg,
+      return octave::sys::popen2 (cmd, args, sync_mode, fildes, msg,
                                        interactive);
     }
 
     pid_t
     popen2 (const std::string& cmd, const string_vector& args,
             bool sync_mode, int *fildes, std::string& msg,
             bool &interactive)
     {
@@ -367,17 +367,17 @@ namespace octave
               else
                 {
                   // Parent process
                   gnulib::close (child_stdin[0]);
                   gnulib::close (child_stdout[1]);
 
 #if defined (F_SETFL) && defined (O_NONBLOCK)
                   if (! sync_mode
-                      && octave::syscalls::fcntl (child_stdout[0], F_SETFL,
+                      && octave::sys::fcntl (child_stdout[0], F_SETFL,
                                                   O_NONBLOCK, msg) < 0)
                     msg = "popen2: error setting file mode -- " + msg;
                   else
 #endif
                     {
                       fildes[0] = child_stdin[1];
                       fildes[1] = child_stdout[0];
                       return pid;
@@ -398,17 +398,17 @@ namespace octave
       return -1;
 #endif
     }
 
     int
     fcntl (int fd, int cmd, long arg)
     {
       std::string msg;
-      return octave::syscalls::fcntl (fd, cmd, arg, msg);
+      return octave::sys::fcntl (fd, cmd, arg, msg);
     }
 
     int
     fcntl (int fd, int cmd, long arg, std::string& msg)
     {
       msg = "";
 
       int status = -1;
diff --git a/liboctave/system/oct-syscalls.h b/liboctave/system/oct-syscalls.h
--- a/liboctave/system/oct-syscalls.h
+++ b/liboctave/system/oct-syscalls.h
@@ -30,17 +30,17 @@ along with Octave; see the file COPYING.
 class string_vector;
 
 #include <sys/types.h>
 
 namespace
 octave
 {
   namespace
-  syscalls
+  sys
   {
     extern OCTAVE_API int dup2 (int, int);
     extern OCTAVE_API int dup2 (int, int, std::string&);
 
     extern OCTAVE_API int execvp (const std::string&, const string_vector&);
     extern OCTAVE_API int execvp (const std::string&, const string_vector&,
                                   std::string&);
 
