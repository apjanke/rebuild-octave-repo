# HG changeset patch
# User jwe
# Date 790441622 0
#      Wed Jan 18 15:07:02 1995 +0000
# Node ID 7dbf5bb19bded57dbeef0f22d73c602da55d01e4
# Parent  ba91ca569177fd903d1b7bc58c78b7c8066ce110
[project @ 1995-01-18 15:06:19 by jwe]

diff --git a/src/Array-tc.cc b/src/Array-tc.cc
--- a/src/Array-tc.cc
+++ b/src/Array-tc.cc
@@ -23,16 +23,31 @@ Software Foundation, 675 Mass Ave, Cambr
 
 // Instantiate Arrays of tree_constants.
 
 #include "Array.h"
 #include "Array.cc"
 
 #include "tree-const.h"
 
+extern template class ArrayRep<int>;
+extern template class Array<int>;
+extern template class Array2<int>;
+extern template class DiagArray<int>;
+
+extern template class ArrayRep<double>;
+extern template class Array<double>;
+extern template class Array2<double>;
+extern template class DiagArray<double>;
+
+extern template class ArrayRep<Complex>;
+extern template class Array<Complex>;
+extern template class Array2<Complex>;
+extern template class DiagArray<Complex>;
+
 template class ArrayRep<tree_constant>;
 template class Array<tree_constant>;
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
diff --git a/src/SLStack-sym.cc b/src/SLStack-sym.cc
--- a/src/SLStack-sym.cc
+++ b/src/SLStack-sym.cc
@@ -23,16 +23,21 @@ Software Foundation, 675 Mass Ave, Cambr
 
 // Instantiate Stacks of symbol_def* values.
 
 #include "SLStack.h"
 #include "SLStack.cc"
 
 #include "symtab.h"
 
+extern template class SLNode<unsigned>;
+extern template class SLList<unsigned>;
+extern template class Stack<unsigned>;
+extern template class SLStack<unsigned>;
+
 template class SLNode<symbol_def *>;
 template class SLList<symbol_def *>;
 template class Stack<symbol_def *>;
 template class SLStack<symbol_def *>;
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/src/pt-const.h b/src/pt-const.h
--- a/src/pt-const.h
+++ b/src/pt-const.h
@@ -236,16 +236,21 @@ public:
   int is_numeric_or_range_type (void) const
     { return rep->is_numeric_or_range_type (); }
 
 // Is this constant valid as a scalar index?
 
   int valid_as_scalar_index (void) const
     { return rep->valid_as_scalar_index (); }
 
+// Is this constant valid as a zero scalar index?
+
+  int valid_as_zero_index (void) const
+    { return rep->valid_as_zero_index (); }
+
 // Does this constant correspond to a truth value?
 
   int is_true (void) const { return rep->is_true (); }
 
 // Is at least one of the dimensions of this constant zero?
 
   int is_empty (void) const
     {
diff --git a/src/tc-inlines.h b/src/tc-inlines.h
--- a/src/tc-inlines.h
+++ b/src/tc-inlines.h
@@ -288,14 +288,26 @@ valid_scalar_indices (const Octave_objec
 
   return ((nargin == 2
 	   && args(1).valid_as_scalar_index ()
 	   && args(0).valid_as_scalar_index ())
 	  || (nargin == 1
 	      && args(0).valid_as_scalar_index ()));
 }
 
+static inline int
+valid_zero_index (const Octave_object& args)
+{
+  int nargin = args.length ();
+
+  return ((nargin == 2
+	   && args(1).valid_as_zero_index ()
+	   && args(0).valid_as_zero_index ())
+	  || (nargin == 1
+	      && args(0).valid_as_zero_index ()));
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/src/tc-rep-ass.cc b/src/tc-rep-ass.cc
--- a/src/tc-rep-ass.cc
+++ b/src/tc-rep-ass.cc
@@ -99,28 +99,35 @@ TC_REP::do_scalar_assignment (const tree
 			      const Octave_object& args) 
 {
   assert (type_tag == unknown_constant
 	  || type_tag == scalar_constant
 	  || type_tag == complex_scalar_constant);
 
   int nargin = args.length ();
 
-  if ((rhs.is_scalar_type () || rhs.is_zero_by_zero ())
-      && valid_scalar_indices (args))
+  if (rhs.is_zero_by_zero ())
     {
-      if (rhs.is_zero_by_zero ())
+      if (valid_scalar_indices (args))
 	{
 	  if (type_tag == complex_scalar_constant)
 	    delete complex_scalar;
 
 	  matrix = new Matrix (0, 0);
 	  type_tag = matrix_constant;
 	}
-      else if (type_tag == unknown_constant || type_tag == scalar_constant)
+      else if (! valid_zero_index (args))
+	{
+	  ::error ("invalid assigment of empty matrix to scalar");
+	  return;
+	}
+    }
+  else if (rhs.is_scalar_type () && valid_scalar_indices (args))
+    {
+      if (type_tag == unknown_constant || type_tag == scalar_constant)
 	{
 	  if (rhs.const_type () == scalar_constant)
 	    {
 	      scalar = rhs.double_value ();
 	      type_tag = scalar_constant;
 	    }
 	  else if (rhs.const_type () == complex_scalar_constant)
 	    {
diff --git a/src/tc-rep-idx.cc b/src/tc-rep-idx.cc
--- a/src/tc-rep-idx.cc
+++ b/src/tc-rep-idx.cc
@@ -130,18 +130,18 @@ TC_REP::do_scalar_index (const Octave_ob
 	retval = *complex_scalar;
       else
 	panic_impossible ();
 
       return retval;
     }
   else
     {
-      int rows = 0;
-      int cols = 0;
+      int rows = -1;
+      int cols = -1;
 
       int nargin = args.length ();
 
       switch (nargin)
 	{
 	case 2:
 	  {
 	    tree_constant arg = args(1);
@@ -207,26 +207,33 @@ TC_REP::do_scalar_index (const Octave_ob
 	    else if (arg.is_scalar_type ()
 		     && NINT (arg.double_value ()) == 0)
 	      {
 		return Matrix ();
 	      }
 	    else
 	      break;
 
-// If only one index, cols will not be set.
+// If only one index, cols will not be set, so we set it.
+// If single index is [], rows will be zero, and we should set cols to
+// zero too.
 
-	    if (cols == 0)
+	    if (cols < 0)
 	      {
-		if (user_pref.prefer_column_vectors)
-		  cols = 1;
+		if (rows == 0)
+		  cols = 0;
 		else
 		  {
-		    cols = rows;
-		    rows = 1;
+		    if (user_pref.prefer_column_vectors)
+		      cols = 1;
+		    else
+		      {
+			cols = rows;
+			rows = 1;
+		      }
 		  }
 	      }
 
 	    if (type_tag == scalar_constant)
 	      {
 		return Matrix (rows, cols, scalar);
 	      }
 	    else if (type_tag == complex_scalar_constant)
diff --git a/src/tc-rep.cc b/src/tc-rep.cc
--- a/src/tc-rep.cc
+++ b/src/tc-rep.cc
@@ -647,16 +647,26 @@ TC_REP::valid_as_scalar_index (void) con
 {
   return (type_tag == magic_colon
 	  || (type_tag == scalar_constant && NINT (scalar) == 1)
 	  || (type_tag == range_constant
 	      && range->nelem () == 1 && NINT (range->base ()) == 1));
 }
 
 int
+TC_REP::valid_as_zero_index (void) const
+{
+  return ((type_tag == scalar_constant  && NINT (scalar) == 0)
+	  || (type_tag == matrix_constant
+	      && matrix->rows () == 0 && matrix->columns () == 0)
+	  || (type_tag == range_constant
+	      && range->nelem () == 1 && NINT (range->base ()) == 0));
+}
+
+int
 TC_REP::is_true (void) const
 {
   int retval = 0;
 
   if (error_state)
     return retval;
 
   if (! is_numeric_type ())
diff --git a/src/tc-rep.h b/src/tc-rep.h
--- a/src/tc-rep.h
+++ b/src/tc-rep.h
@@ -169,16 +169,17 @@ private:
       return (type_tag == scalar_constant
 	      || type_tag == matrix_constant
 	      || type_tag == complex_matrix_constant
 	      || type_tag == complex_scalar_constant
 	      || type_tag == range_constant);
     }
 
   int valid_as_scalar_index (void) const;
+  int valid_as_zero_index (void) const;
 
   int is_true (void) const;
 
   double double_value (int force_string_conversion = 0) const;
   Matrix matrix_value (int force_string_conversion = 0) const;
   Complex complex_value (int force_string_conversion = 0) const;
   ComplexMatrix complex_matrix_value (int force_string_conversion = 0) const;
   char *string_value (void) const;
