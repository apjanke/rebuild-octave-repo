# HG changeset patch
# User Rik <rdrider0-list@yahoo.com>
# Date 1241203056 25200
#      Fri May 01 11:37:36 2009 -0700
# Node ID 1231b1762a9a77a7a480e12954fbe7c5a699943c
# Parent  69088b7b139cb1c1c6cf48dc6fbff7eff453e18c
Simplify TeXinfo and eliminate use of @iftex in arith.txi

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,12 +1,15 @@
-2009-04-26  Rik  <rdrider0-list@yahoo.com>
+2009-05-01  Rik  <rdrider0-list@yahoo.com>
+	* interpreter/arith.txi: Simplify TeXinfo and eliminate use of @iftex in arith.txi
+
+2009-05-01  Rik  <rdrider0-list@yahoo.com>
 	* interpreter/arith.txi: Update section 17.5 (Utility Functions) of arith.txi
 
-2009-04-26  Rik  <rdrider0-list@yahoo.com>
+2009-04-30  Rik  <rdrider0-list@yahoo.com>
 	* interpreter/arith.txi: Update section 17.4 (Sums and Products) of arith.txi
 
 2009-04-29  Jaroslav Hajek  <highegg@gmail.com>
 
 	* interpreter/numbers.txi: Update info on ranges.
 	* interpreter/expr.txi: Update some info on indexing.
 
 2009-04-26  Rik  <rdrider0-list@yahoo.com>
diff --git a/doc/interpreter/arith.txi b/doc/interpreter/arith.txi
--- a/doc/interpreter/arith.txi
+++ b/doc/interpreter/arith.txi
@@ -100,24 +100,22 @@ defined as @code{sqrt (-1)}.
 
 @DOCSTRING(real)
 
 @node Trigonometry
 @section Trigonometry
 
 Octave provides the following trigonometric functions where angles are
 specified in radians.  To convert from degrees to radians multiply by
-@iftex
 @tex
 $\pi/180$
 @end tex
-@end iftex
-@ifinfo
+@ifnottex
 @code{pi/180}
-@end ifinfo
+@end ifnottex
 (e.g., @code{sin (30 * pi/180)} returns the sine of 30 degrees).  As
 an alternative, Octave provides a number of trigonometric functions
 which work directly on an argument specified in degrees.  These functions
 are named after the base trigonometric function with a @samp{d} suffix.  For
 example, @code{sin} expects an angle in radians while @code{sind} expects an
 angle in degrees.
 
 @DOCSTRING(sin)
diff --git a/scripts/general/del2.m b/scripts/general/del2.m
--- a/scripts/general/del2.m
+++ b/scripts/general/del2.m
@@ -24,17 +24,17 @@
 ##
 ## Calculate the discrete Laplace
 ## @tex
 ## operator $( \nabla^2 )$.
 ## @end tex
 ## @ifnottex
 ## operator.
 ## @end ifnottex
-##  For a 2-dimensional matrix @var{m} this is defined as
+## For a 2-dimensional matrix @var{m} this is defined as
 ##
 ## @tex
 ## $$d = {1 \over 4} \left( {d^2 \over dx^2} M(x,y) + {d^2 \over dy^2} M(x,y) \right)$$
 ## @end tex
 ## @ifnottex
 ## @example
 ## @group
 ##       1    / d^2            d^2         \
diff --git a/scripts/general/nextpow2.m b/scripts/general/nextpow2.m
--- a/scripts/general/nextpow2.m
+++ b/scripts/general/nextpow2.m
@@ -15,23 +15,21 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} nextpow2 (@var{x})
 ## If @var{x} is a scalar, return the first integer @var{n} such that
-## @iftex
 ## @tex
-##  $2^n \ge |x|$.
+## $2^n \ge |x|$.
 ## @end tex
-## @end iftex
 ## @ifnottex
-##  2^n >= abs (x).
+## 2^n >= abs (x).
 ## @end ifnottex
 ##
 ## If @var{x} is a vector, return @code{nextpow2 (length (@var{x}))}.
 ## @seealso{pow2, log2}
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Created: 7 October 1994
diff --git a/scripts/specfun/factor.m b/scripts/specfun/factor.m
--- a/scripts/specfun/factor.m
+++ b/scripts/specfun/factor.m
@@ -15,21 +15,22 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{p} =} factor (@var{q})
 ## @deftypefnx {Function File} {[@var{p}, @var{n}] =} factor (@var{q})
 ##
-## Return prime factorization of @var{q}.  That is @code{prod (@var{p})
-## == @var{q}}.  If @code{@var{q} == 1}, returns 1. 
+## Return prime factorization of @var{q}.  That is, @code{prod (@var{p})
+## == @var{q}} and every element of @var{p} is a prime number.  If
+## @code{@var{q} == 1}, returns 1. 
 ##
-## With two output arguments, returns the unique primes @var{p} and
-## their multiplicities.  That is @code{prod (@var{p} .^ @var{n}) ==
+## With two output arguments, return the unique primes @var{p} and
+## their multiplicities.  That is, @code{prod (@var{p} .^ @var{n}) ==
 ## @var{q}}.
 ## @seealso{gcd, lcm}
 ## @end deftypefn
 
 ## Author: Paul Kienzle
 
 ## 2002-01-28 Paul Kienzle
 ## * remove recursion; only check existing primes for multiplicity > 1
diff --git a/scripts/specfun/pow2.m b/scripts/specfun/pow2.m
--- a/scripts/specfun/pow2.m
+++ b/scripts/specfun/pow2.m
@@ -16,34 +16,30 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Mapping Function} {} pow2 (@var{x})
 ## @deftypefnx {Mapping Function} {} pow2 (@var{f}, @var{e})
 ## With one argument, computes
-## @iftex
 ## @tex
-##  $2^x$
+## $2^x$
 ## @end tex
-## @end iftex
 ## @ifnottex
-##  2 .^ x
+## 2 .^ x
 ## @end ifnottex
 ## for each element of @var{x}.
 ##
 ## With two arguments, returns
-## @iftex
 ## @tex
-##  $f \cdot 2^e$.
+## $f \cdot 2^e$.
 ## @end tex
-## @end iftex
 ## @ifnottex
-##  f .* (2 .^ e).
+## f .* (2 .^ e).
 ## @end ifnottex
 ## @seealso{log2, nextpow2}
 ## @end deftypefn
 
 ## Author: AW <Andreas.Weingessel@ci.tuwien.ac.at>
 ## Created: 17 October 1994
 ## Adapted-By: jwe
 
diff --git a/src/DLD-FUNCTIONS/gcd.cc b/src/DLD-FUNCTIONS/gcd.cc
--- a/src/DLD-FUNCTIONS/gcd.cc
+++ b/src/DLD-FUNCTIONS/gcd.cc
@@ -75,26 +75,24 @@ and\n\
 gcd ([15, 9], [20, 18])\n\
     @result{}  5  9\n\
 @end group\n\
 @end example\n\
 \n\
 Optional return arguments @var{v1}, etc., contain integer vectors such\n\
 that,\n\
 \n\
+@tex\n\
+$g = v_1 a_1 + v_2 a_2 + \\cdots$\n\
+@end tex\n\
 @ifnottex\n\
 @example\n\
 @var{g} = @var{v1} .* @var{a1} + @var{v2} .* @var{a2} + @dots{}\n\
 @end example\n\
 @end ifnottex\n\
-@iftex\n\
-@tex\n\
-$g = v_1 a_1 + v_2 a_2 + \\cdots$\n\
-@end tex\n\
-@end iftex\n\
 \n\
 For backward compatibility with previous versions of this function, when\n\
 all arguments are scalar, a single return argument @var{v1} containing\n\
 all of the values of @var{v1}, @dots{} is acceptable.\n\
 @seealso{lcm, factor}\n\
 @end deftypefn")
 {
   octave_value_list retval;
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -993,25 +993,29 @@ map_2_xlog2 (const Array<T>& x, Array<T>
 DEFUN (log2, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} log2 (@var{x})\n\
 @deftypefnx {Mapping Function} {[@var{f}, @var{e}] =} log2 (@var{x})\n\
 Compute the base-2 logarithm of each element of @var{x}.\n\
 \n\
 If called with two output arguments, split @var{x} into\n\
 binary mantissa and exponent so that\n\
-@iftex\n\
 @tex\n\
 ${1 \\over 2} \\le \\left| f \\right| < 1$\n\
 @end tex\n\
-@end iftex\n\
 @ifnottex\n\
 @code{1/2 <= abs(f) < 1}\n\
 @end ifnottex\n\
-and @var{e} is an integer.  If @code{x = 0}, @code{f = e = 0}.\n\
+and @var{e} is an integer.  If\n\
+@tex\n\
+$x = 0$, $f = e = 0$.\n\
+@end tex\n\
+@ifnottex\n\
+@code{x = 0}, @code{f = e = 0}.\n\
+@end ifnottex\n\
 @seealso{pow2, log, log10, exp}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   if (args.length () == 1)
     {
       if (nargout < 2)
diff --git a/src/mappers.cc b/src/mappers.cc
--- a/src/mappers.cc
+++ b/src/mappers.cc
@@ -35,21 +35,19 @@ along with Octave; see the file COPYING.
 #include "defun.h"
 #include "error.h"
 #include "variables.h"
 
 DEFUN (abs, args, ,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} abs (@var{z})\n\
 Compute the magnitude of @var{z}, defined as\n\
-@iftex\n\
 @tex\n\
 $|z| = \\sqrt{x^2 + y^2}$.\n\
 @end tex\n\
-@end iftex\n\
 @ifnottex\n\
 |@var{z}| = @code{sqrt (x^2 + y^2)}.\n\
 @end ifnottex\n\
 \n\
 For example,\n\
 \n\
 @example\n\
 @group\n\
@@ -172,21 +170,19 @@ See arg.\n\
   return retval;
 }
 
 DEFUN (arg, args, ,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} arg (@var{z})\n\
 @deftypefnx {Mapping Function} {} angle (@var{z})\n\
 Compute the argument of @var{z}, defined as,\n\
-@iftex\n\
 @tex\n\
 $\\theta = atan2 (y, x),$\n\
 @end tex\n\
-@end iftex\n\
 @ifnottex\n\
 @var{theta} = @code{atan2 (@var{y}, @var{x})},\n\
 @end ifnottex\n\
 in radians.\n\
 \n\
 For example,\n\
 \n\
 @example\n\
@@ -397,21 +393,19 @@ ceil ([-2.7, 2.7])\n\
 %!error ceil (1, 2);
 
 */
 
 DEFUN (conj, args, ,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} conj (@var{z})\n\
 Return the complex conjugate of @var{z}, defined as\n\
-@iftex\n\
 @tex\n\
 $\\bar{z} = x - iy$.\n\
 @end tex\n\
-@end iftex\n\
 @ifnottex\n\
 @code{conj (@var{z})} = @var{x} - @var{i}@var{y}.\n\
 @end ifnottex\n\
 @seealso{real, imag}\n\
 @end deftypefn")
 {
   octave_value retval;
   if (args.length () == 1)
@@ -607,21 +601,19 @@ Computes the complementary error functio
 %! assert (erfc(a), erfc(real(a)));
 
 */
 
 DEFUN (exp, args, ,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} exp (@var{x})\n\
 Compute\n\
-@iftex\n\
 @tex\n\
 $e^{x}$\n\
 @end tex\n\
-@end iftex\n\
 @ifnottex\n\
 @code{e^x}\n\
 @end ifnottex\n\
 for each element of @var{x}.  To compute the matrix\n\
 exponential, see @ref{Linear Algebra}.\n\
 @seealso{log}\n\
 @end deftypefn")
 {
@@ -647,22 +639,20 @@ exponential, see @ref{Linear Algebra}.\n
 %!assert(exp (Inf) == Inf && exp (-Inf) == 0 && isnan (exp (NaN)));
 %!assert(exp (Inf ('single')) == Inf('single') && exp (-Inf('single')) == 0 && isnan (exp (NaN('single'))));
 
 */
 
 DEFUN (expm1, args, ,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} expm1 (@var{x})\n\
-Compute \n\
-@iftex\n\
+Compute\n\
 @tex\n\
 $ e^{x} - 1 $\n\
 @end tex\n\
-@end iftex\n\
 @ifnottex\n\
 @code{exp (@var{x}) - 1}\n\
 @end ifnottex\n\
 accurately in the neighborhood of zero.\n\
 @seealso{exp}\n\
 @end deftypefn")
 {
   octave_value retval;
@@ -1216,21 +1206,19 @@ Return the natural logarithm of the gamm
 %!error lgamma(1,2);
 
 */
 
 DEFUN (log, args, ,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} log (@var{x})\n\
 Compute the natural logarithm,\n\
-@iftex\n\
 @tex\n\
 $\\ln{(x)},$\n\
 @end tex\n\
-@end iftex\n\
 @ifnottex\n\
 @code{ln (@var{x})},\n\
 @end ifnottex\n\
 for each element of @var{x}.  To compute the\n\
 matrix logarithm, see @ref{Linear Algebra}.\n\
 @seealso{exp, log1p, log2, log10, logspace}\n\
 @end deftypefn")
 {
@@ -1281,21 +1269,19 @@ Compute the base-10 logarithm of each el
 %!error log10 (1, 2);
 
 */
 
 DEFUN (log1p, args, ,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} log1p (@var{x})\n\
 Compute\n\
-@iftex\n\
 @tex\n\
 $\\ln{(1 + x)}$\n\
 @end tex\n\
-@end iftex\n\
 @ifnottex\n\
 @code{log (1 + @var{x})}\n\
 @end ifnottex\n\
 accurately in the neighborhood of zero.\n\
 @seealso{log, exp, expm1}\n\
 @end deftypefn")
 {
   octave_value retval;
@@ -1403,23 +1389,21 @@ return @code{roundb (real (@var{x})) + r
 
   return retval;
 }
 
 DEFUN (sign, args, ,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} sign (@var{x})\n\
 Compute the @dfn{signum} function, which is defined as\n\
-@iftex\n\
 @tex\n\
 $$\n\
 {\\rm sign} (@var{x}) = \\cases{1,&$x>0$;\\cr 0,&$x=0$;\\cr -1,&$x<0$.\\cr}\n\
 $$\n\
 @end tex\n\
-@end iftex\n\
 @ifnottex\n\
 \n\
 @example\n\
 @group\n\
            -1, x < 0;\n\
 sign (x) =  0, x = 0;\n\
             1, x > 0.\n\
 @end group\n\
