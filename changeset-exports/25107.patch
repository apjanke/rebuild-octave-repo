# HG changeset patch
# User Rik <rik@octave.org>
# Date 1522818725 25200
#      Tue Apr 03 22:12:05 2018 -0700
# Branch stable
# Node ID 13cd142c3f887ed73830b52e2f20a1762ff67f28
# Parent  d7ad543255c564a99f8f9b8e9f815788ca5752a0
Don't reset compact/loose spacing when changing numerical format (Bug #53427).

* pr-output.cc (init_format_state): Remove line to reset Vcompact_format to false.
* pr-output.cc (set_format_style): Set Vcompact_format to false if called with
no arguments (reset).
* pr-output.cc (Fformat): If called with outputs and inputs, emit a warning that
format cannot be both queried and set.  Perform only query operation.  Add new
BIST tests for bug #53427 and for new warning message.

diff --git a/libinterp/corefcn/pr-output.cc b/libinterp/corefcn/pr-output.cc
--- a/libinterp/corefcn/pr-output.cc
+++ b/libinterp/corefcn/pr-output.cc
@@ -3502,17 +3502,16 @@ static inline void
 init_format_state (void)
 {
   free_format = false;
   plus_format = false;
   rat_format = false;
   bank_format = false;
   hex_format = 0;
   bit_format = 0;
-  Vcompact_format = false;
   print_e = false;
   print_big_e = false;
   print_g = false;
   print_eng = false;
 }
 
 static std::string format_string ("short");
 
@@ -3746,16 +3745,17 @@ set_format_style (int argc, const string
       else
         error ("format: unrecognized format state '%s'", arg.c_str ());
     }
   else
     {
       init_format_state ();
       set_output_prec (5);
       format = "short";
+      Vcompact_format = false;
     }
 
   format_string = format;
 }
 
 DEFUN (format, args, nargout,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {} format
@@ -3933,16 +3933,19 @@ format and format spacing.
       int argc = args.length () + 1;
 
       string_vector argv = args.make_argv ("format");
 
       set_format_style (argc, argv);
     }
   else
     {
+      if (args.length () > 0)
+        warning ("format: cannot query and set format at the same time, ignoring set operation");
+
       if (nargout >= 2)
         retval(1) = (Vcompact_format ? "compact" : "loose");
 
       retval(0) = format_string;
     }
 
   return retval;
 }
@@ -3966,16 +3969,35 @@ format and format spacing.
 %!   format;
 %!   [new_fmt, new_spacing] = format ();
 %!   assert (new_fmt, "short");
 %!   assert (new_spacing, "loose");
 %! unwind_protect_cleanup
 %!   format (old_fmt);
 %!   format (old_spacing);
 %! end_unwind_protect
+
+%!test <*53427>
+%! [old_fmt, old_spacing] = format ();
+%! unwind_protect
+%!   format;          # reset format to short and loose
+%!   format compact;  # set compact format
+%!   format long;     # set long format
+%!   [fmt, spacing] = format ();
+%!   assert (fmt, "long");
+%!   assert (spacing, "compact");
+%! unwind_protect_cleanup
+%!   format (old_fmt);
+%!   format (old_spacing);
+%! end_unwind_protect
+
+## Test input validation
+%!test
+%! fail ("fmt = format ('long')", "warning", "cannot query and set format");
+
 */
 
 DEFUN (fixed_point_format, args, nargout,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {@var{val} =} fixed_point_format ()
 @deftypefnx {} {@var{old_val} =} fixed_point_format (@var{new_val})
 @deftypefnx {} {} fixed_point_format (@var{new_val}, "local")
 Query or set the internal variable that controls whether Octave will
