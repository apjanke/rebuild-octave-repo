# HG changeset patch
# User Markus MÃ¼tzel <markus.muetzel@gmx.de>
# Date 1549726991 -3600
#      Sat Feb 09 16:43:11 2019 +0100
# Node ID 29ea2369971d66b495feb7ac823dcd95aef74b59
# Parent  2dc190401eeb285f3e365dad9d6486105bf51fe6
Add basic backend for encodings in file streams (bug #55452).

* oct-stream.h (base_stream): Store encoding in class.
* oct-stream.cc (do_scanf_conv): Convert strings from encoding.
  (do_printf_string): Convert strings to encoding.
  (base_stream::printf): Convert format string to encoding.
* oct-stdstrm.h (octave_stdiostream, octave_tstdiostream, octave_zstdiostream,
  create): Pass  encoding through to base_stream.
* oct-prcstrm.[cc,h] (octave_iprocstream, octave_oprocstream, create): Pass
  encoding through to octave_stdiostream.
* oct-strstrm.[cc,h] (octave_istrstream, octave_ostrstream, create): Pass
  encoding through to base_stream.

diff --git a/libinterp/corefcn/oct-prcstrm.cc b/libinterp/corefcn/oct-prcstrm.cc
--- a/libinterp/corefcn/oct-prcstrm.cc
+++ b/libinterp/corefcn/oct-prcstrm.cc
@@ -26,43 +26,47 @@ along with Octave; see the file COPYING.
 
 #include <cstdio>
 
 #include "oct-prcstrm.h"
 #include "sysdep.h"
 
 octave::stream
 octave_iprocstream::create (const std::string& n, std::ios::openmode arg_md,
-                            octave::mach_info::float_format ff)
+                            octave::mach_info::float_format ff,
+                            const std::string& encoding)
 {
-  return octave::stream (new octave_iprocstream (n, arg_md, ff));
+  return octave::stream (new octave_iprocstream (n, arg_md, ff, encoding));
 }
 
 octave_iprocstream::octave_iprocstream (const std::string& n,
                                         std::ios::openmode arg_md,
-                                        octave::mach_info::float_format ff)
+                                        octave::mach_info::float_format ff,
+                                        const std::string& encoding)
   : octave_stdiostream (n, octave::popen (n.c_str (), "r"),
-                        arg_md, ff, octave::pclose)
+                        arg_md, ff, encoding, octave::pclose)
 { }
 
 octave_iprocstream::~octave_iprocstream (void)
 {
   do_close ();
 }
 
 octave::stream
 octave_oprocstream::create (const std::string& n, std::ios::openmode arg_md,
-                            octave::mach_info::float_format ff)
+                            octave::mach_info::float_format ff,
+                            const std::string& encoding)
 {
-  return octave::stream (new octave_oprocstream (n, arg_md, ff));
+  return octave::stream (new octave_oprocstream (n, arg_md, ff, encoding));
 }
 
 octave_oprocstream::octave_oprocstream (const std::string& n,
                                         std::ios::openmode arg_md,
-                                        octave::mach_info::float_format ff)
+                                        octave::mach_info::float_format ff,
+                                        const std::string& encoding)
   : octave_stdiostream (n, octave::popen (n.c_str (), "w"),
-                        arg_md, ff, octave::pclose)
+                        arg_md, ff, encoding, octave::pclose)
 { }
 
 octave_oprocstream::~octave_oprocstream (void)
 {
   do_close ();
 }
diff --git a/libinterp/corefcn/oct-prcstrm.h b/libinterp/corefcn/oct-prcstrm.h
--- a/libinterp/corefcn/oct-prcstrm.h
+++ b/libinterp/corefcn/oct-prcstrm.h
@@ -33,53 +33,57 @@ along with Octave; see the file COPYING.
 class
 octave_iprocstream : public octave_stdiostream
 {
 public:
 
   octave_iprocstream (const std::string& n,
                       std::ios::openmode arg_md = std::ios::in,
                       octave::mach_info::float_format flt_fmt
-                        = octave::mach_info::native_float_format ());
+                        = octave::mach_info::native_float_format (),
+                      const std::string& encoding = "utf-8");
 
   // No copying!
 
   octave_iprocstream (const octave_iprocstream&) = delete;
 
   octave_iprocstream& operator = (const octave_iprocstream&) = delete;
 
   static octave::stream
   create (const std::string& n, std::ios::openmode arg_md = std::ios::in,
           octave::mach_info::float_format flt_fmt
-            = octave::mach_info::native_float_format ());
+            = octave::mach_info::native_float_format (),
+          const std::string& encoding = "utf-8");
 
 protected:
 
   ~octave_iprocstream (void);
 };
 
 class
 octave_oprocstream : public octave_stdiostream
 {
 public:
 
   octave_oprocstream (const std::string& n,
                       std::ios::openmode arg_md = std::ios::out,
                       octave::mach_info::float_format flt_fmt
-                        = octave::mach_info::native_float_format ());
+                        = octave::mach_info::native_float_format (),
+                      const std::string& encoding = "utf-8");
 
   // No copying!
 
   octave_oprocstream (const octave_oprocstream&) = delete;
 
   octave_oprocstream& operator = (const octave_oprocstream&) = delete;
 
   static octave::stream
   create (const std::string& n, std::ios::openmode arg_md = std::ios::out,
           octave::mach_info::float_format flt_fmt
-            = octave::mach_info::native_float_format ());
+            = octave::mach_info::native_float_format (),
+          const std::string& encoding = "utf-8");
 
 protected:
 
   ~octave_oprocstream (void);
 };
 
 #endif
diff --git a/libinterp/corefcn/oct-stdstrm.h b/libinterp/corefcn/oct-stdstrm.h
--- a/libinterp/corefcn/oct-stdstrm.h
+++ b/libinterp/corefcn/oct-stdstrm.h
@@ -35,18 +35,19 @@ class
 octave_tstdiostream : public octave::base_stream
 {
 public:
 
   octave_tstdiostream (const std::string& n, FILE_T f = 0, int fid = 0,
                        std::ios::openmode m = std::ios::in | std::ios::out,
                        octave::mach_info::float_format ff
                          = octave::mach_info::native_float_format (),
+                       const std::string& encoding = "utf-8",
                        typename BUF_T::close_fcn cf = BUF_T::file_close)
-    : octave::base_stream (m, ff), nm (n), md (m),
+    : octave::base_stream (m, ff, encoding), nm (n), md (m),
       s (f ? new STREAM_T (f, cf) : nullptr), fnum (fid)
   { }
 
   // No copying!
 
   octave_tstdiostream (const octave_tstdiostream&) = delete;
 
   octave_tstdiostream& operator = (const octave_tstdiostream&) = delete;
@@ -103,28 +104,30 @@ octave_stdiostream
   : public octave_tstdiostream<c_file_ptr_buf, io_c_file_ptr_stream, FILE *>
 {
 public:
 
   octave_stdiostream (const std::string& n, FILE *f = nullptr,
                       std::ios::openmode m = std::ios::in | std::ios::out,
                       octave::mach_info::float_format ff
                         = octave::mach_info::native_float_format (),
+                      const std::string& encoding = "utf-8",
                       c_file_ptr_buf::close_fcn cf = c_file_ptr_buf::file_close)
     : octave_tstdiostream<c_file_ptr_buf, io_c_file_ptr_stream, FILE *>
-       (n, f, f ? fileno (f) : -1, m, ff, cf) { }
+       (n, f, f ? fileno (f) : -1, m, ff, encoding, cf) { }
 
   static octave::stream
   create (const std::string& n, FILE *f = nullptr,
           std::ios::openmode m = std::ios::in | std::ios::out,
           octave::mach_info::float_format ff
             = octave::mach_info::native_float_format (),
+          const std::string& encoding = "utf-8",
           c_file_ptr_buf::close_fcn cf = c_file_ptr_buf::file_close)
   {
-    return octave::stream (new octave_stdiostream (n, f, m, ff, cf));
+    return octave::stream (new octave_stdiostream (n, f, m, ff, encoding, cf));
   }
 
   // No copying!
 
   octave_stdiostream (const octave_stdiostream&) = delete;
 
   octave_stdiostream& operator = (const octave_stdiostream&) = delete;
 
@@ -140,29 +143,32 @@ octave_zstdiostream
   : public octave_tstdiostream<c_zfile_ptr_buf, io_c_zfile_ptr_stream, gzFile>
 {
 public:
 
   octave_zstdiostream (const std::string& n, gzFile f = nullptr, int fid = 0,
                        std::ios::openmode m = std::ios::in | std::ios::out,
                        octave::mach_info::float_format ff
                          = octave::mach_info::native_float_format (),
+                       const std::string& encoding = "utf-8",
                        c_zfile_ptr_buf::close_fcn cf
                          = c_zfile_ptr_buf::file_close)
     : octave_tstdiostream<c_zfile_ptr_buf, io_c_zfile_ptr_stream, gzFile>
-       (n, f, fid, m, ff, cf) { }
+       (n, f, fid, m, ff, encoding, cf) { }
 
   static octave::stream
   create (const std::string& n, gzFile f = nullptr, int fid = 0,
           std::ios::openmode m = std::ios::in | std::ios::out,
           octave::mach_info::float_format ff
             = octave::mach_info::native_float_format (),
+          const std::string& encoding = "utf-8",
           c_zfile_ptr_buf::close_fcn cf = c_zfile_ptr_buf::file_close)
   {
-    return octave::stream (new octave_zstdiostream (n, f, fid, m, ff, cf));
+    return octave::stream (new octave_zstdiostream (n, f, fid, m, ff, encoding,
+                                                    cf));
   }
 
   // No copying!
 
   octave_zstdiostream (const octave_zstdiostream&) = delete;
 
   octave_zstdiostream& operator = (const octave_zstdiostream&) = delete;
 
diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -49,16 +49,17 @@ along with Octave; see the file COPYING.
 
 #include "error.h"
 #include "errwarn.h"
 #include "input.h"
 #include "interpreter.h"
 #include "octave.h"
 #include "oct-iostrm.h"
 #include "oct-stdstrm.h"
+#include "oct-string.h"
 #include "oct-stream.h"
 #include "ov.h"
 #include "ovl.h"
 #include "pager.h"
 #include "utils.h"
 
 namespace octave
 {
@@ -4524,16 +4525,18 @@ namespace octave
         is.clear ();                                                    \
                                                                         \
     }                                                                   \
   while (0)
 
 #define FINISH_CHARACTER_CONVERSION()                                   \
   do                                                                    \
     {                                                                   \
+      if (encoding ().compare ("utf-8"))                                \
+        tmp = octave::string::u8_from_encoding (who, tmp, encoding ()); \
       width = tmp.length ();                                            \
                                                                         \
       if (is)                                                           \
         {                                                               \
           int i = 0;                                                    \
                                                                         \
           if (! discard)                                                \
             {                                                           \
@@ -5552,33 +5555,40 @@ namespace octave
       }
 
     return retval;
   }
 
   static size_t
   do_printf_string (std::ostream& os, const printf_format_elt *elt,
                     int nsa, int sa_1, int sa_2, const std::string& arg,
-                    const std::string& who)
+                    const std::string& encoding, const std::string& who)
   {
     if (nsa > 2)
       ::error ("%s: internal error handling format", who.c_str ());
 
     std::string flags = elt->flags;
 
     bool left = flags.find ('-') != std::string::npos;
 
     size_t len = arg.length ();
 
+    size_t prec = (nsa > 1 ? sa_2 : (elt->prec == -1 ? len : elt->prec));
+
+    std::string print_str = prec < arg.length () ? arg.substr (0, prec) : arg;
+    if (encoding.compare ("utf-8"))
+      {
+        size_t src_len = print_str.length ();
+        print_str = string::u8_to_encoding (who, print_str, encoding);
+        len -= src_len - print_str.length ();
+      }
+
     size_t fw = (nsa > 0 ? sa_1 : (elt->fw == -1 ? len : elt->fw));
-    size_t prec = (nsa > 1 ? sa_2 : (elt->prec == -1 ? len : elt->prec));
-
-    os << std::setw (fw)
-       << (left ? std::left : std::right)
-       << (prec < len ? arg.substr (0, prec) : arg);
+
+    os << std::setw (fw) << (left ? std::left : std::right) << print_str;
 
     return len > fw ? len : fw;
   }
 
   static bool
   is_nan_or_inf (const octave_value& val)
   {
     octave_value ov_isnan = val.isnan ();
@@ -5841,17 +5851,18 @@ namespace octave
 
                 if (val_cache)
                   {
                     if (val.is_string ())
                       {
                         std::string sval = val.string_value ();
 
                         retval += do_printf_string (os, elt, nsa, sa_1,
-                                                    sa_2, sval, who);
+                                                    sa_2, sval, encoding (),
+                                                    who);
                       }
                     else
                       retval += do_numeric_printf_conv (os, elt, nsa, sa_1,
                                                         sa_2, val, who);
                   }
                 else
                   break;
               }
@@ -5881,20 +5892,23 @@ namespace octave
               break;
           }
       }
 
     return retval;
   }
 
   int
-  base_stream::printf (const std::string& fmt,
+  base_stream::printf (std::string fmt,
                        const octave_value_list& args,
                        const std::string& who)
   {
+    if (encoding ().compare ("utf-8"))
+      fmt = string::u8_to_encoding (who, fmt, encoding ());
+
     printf_format_list fmt_list (fmt);
 
     if (fmt_list.num_conversions () == -1)
       ::error ("%s: invalid format specified", who.c_str ());
 
     return do_printf (fmt_list, args, who);
   }
 
diff --git a/libinterp/corefcn/oct-stream.h b/libinterp/corefcn/oct-stream.h
--- a/libinterp/corefcn/oct-stream.h
+++ b/libinterp/corefcn/oct-stream.h
@@ -62,19 +62,20 @@ namespace octave
   OCTINTERP_API
   base_stream
   {
     friend class stream;
 
   public:
 
     base_stream (std::ios::openmode arg_md = std::ios::in | std::ios::out,
-                 mach_info::float_format ff = mach_info::native_float_format ())
-      : count (0), md (arg_md), flt_fmt (ff), fail (false), open_state (true),
-        errmsg ()
+                 mach_info::float_format ff = mach_info::native_float_format (),
+                 const std::string& encoding = "utf-8")
+      : count (0), md (arg_md), flt_fmt (ff), mencoding (encoding),
+        fail (false), open_state (true), errmsg ()
     { }
 
     // No copying!
 
     base_stream (const base_stream&) = delete;
 
     base_stream& operator = (const base_stream&) = delete;
 
@@ -147,16 +148,18 @@ namespace octave
     std::string error (bool clear, int& err_num);
 
   protected:
 
     int mode (void) const { return md; }
 
     mach_info::float_format float_format (void) const { return flt_fmt; }
 
+    std::string encoding (void) const { return mencoding; }
+
     // Set current error state and set fail to TRUE.
 
     void error (const std::string& msg);
     void error (const std::string& who, const std::string& msg);
 
     // Clear any error message and set fail to FALSE.
 
     void clear (void);
@@ -172,16 +175,19 @@ namespace octave
 
     // The permission bits for the file.  Should be some combination of
     // std::ios::open_mode bits.
     int md;
 
     // Data format.
     mach_info::float_format flt_fmt;
 
+    // Code page
+    std::string mencoding;
+
     // TRUE if an error has occurred.
     bool fail;
 
     // TRUE if this stream is open.
     bool open_state;
 
     // Should contain error message if fail is TRUE.
     std::string errmsg;
@@ -224,17 +230,17 @@ namespace octave
     int do_numeric_printf_conv (std::ostream& os, const printf_format_elt *elt,
                                 int nsa, int sa_1, int sa_2,
                                 const octave_value& val,
                                 const std::string& who);
 
     int do_printf (printf_format_list& fmt_list, const octave_value_list& args,
                    const std::string& who /* = "printf" */);
 
-    int printf (const std::string& fmt, const octave_value_list& args,
+    int printf (std::string fmt, const octave_value_list& args,
                 const std::string& who /* = "printf" */);
 
     int puts (const std::string& s, const std::string& who /* = "puts" */);
 
     // We can always do this in terms of seek(), so the derived class
     // only has to provide that.
 
     void invalid_operation (const std::string& who, const char *rw);
@@ -357,16 +363,21 @@ namespace octave
 
     std::string name (void) const;
 
     int mode (void) const;
 
     mach_info::float_format float_format (void) const;
 
     static std::string mode_as_string (int mode);
+    
+    std::string encoding (void)
+    {
+      return rep ? rep->encoding () : std::string ();
+    }
 
     std::istream * input_stream (void)
     {
       return rep ? rep->input_stream () : nullptr;
     }
 
     std::ostream * output_stream (void)
     {
diff --git a/libinterp/corefcn/oct-strstrm.cc b/libinterp/corefcn/oct-strstrm.cc
--- a/libinterp/corefcn/oct-strstrm.cc
+++ b/libinterp/corefcn/oct-strstrm.cc
@@ -45,26 +45,32 @@ octave_base_strstream::tell (void)
   // Note: error is inherited from octave::base_stream, not ::error.
   // This error function does not halt execution so "return ..." must exist.
   error ("ftell: invalid operation");
   return -1;
 }
 
 octave::stream
 octave_istrstream::create (const char *data, std::ios::openmode arg_md,
-                           octave::mach_info::float_format flt_fmt)
+                           octave::mach_info::float_format flt_fmt,
+                           const std::string& encoding)
 {
-  return octave::stream (new octave_istrstream (data, arg_md, flt_fmt));
+  return octave::stream (new octave_istrstream (data, arg_md, flt_fmt,
+                                                encoding));
 }
 
 octave::stream
 octave_istrstream::create (const std::string& data, std::ios::openmode arg_md,
-                           octave::mach_info::float_format flt_fmt)
+                           octave::mach_info::float_format flt_fmt,
+                           const std::string& encoding)
 {
-  return octave::stream (new octave_istrstream (data, arg_md, flt_fmt));
+  return octave::stream (new octave_istrstream (data, arg_md, flt_fmt,
+                                                encoding));
 }
 
 octave::stream
 octave_ostrstream::create (std::ios::openmode arg_md,
-                           octave::mach_info::float_format flt_fmt)
+                           octave::mach_info::float_format flt_fmt,
+                           const std::string& encoding)
 {
-  return octave::stream (new octave_ostrstream (arg_md, flt_fmt));
+  return octave::stream (new octave_ostrstream (arg_md, flt_fmt,
+                                                encoding));
 }
diff --git a/libinterp/corefcn/oct-strstrm.h b/libinterp/corefcn/oct-strstrm.h
--- a/libinterp/corefcn/oct-strstrm.h
+++ b/libinterp/corefcn/oct-strstrm.h
@@ -32,18 +32,19 @@ along with Octave; see the file COPYING.
 
 class
 octave_base_strstream : public octave::base_stream
 {
 public:
 
   octave_base_strstream (std::ios::openmode m = std::ios::out,
                          octave::mach_info::float_format ff
-                           = octave::mach_info::native_float_format ())
-    : octave::base_stream (m, ff) { }
+                           = octave::mach_info::native_float_format (),
+                         const std::string& encoding = "utf-8")
+    : octave::base_stream (m, ff, encoding) { }
 
   // No copying!
 
   octave_base_strstream (const octave_base_strstream&) = delete;
 
   octave_base_strstream& operator = (const octave_base_strstream&) = delete;
 
 protected:
@@ -74,24 +75,26 @@ public:
 class
 octave_istrstream : public octave_base_strstream
 {
 public:
 
   octave_istrstream (const char *data,
                      std::ios::openmode arg_md = std::ios::out,
                      octave::mach_info::float_format ff
-                       = octave::mach_info::native_float_format ())
-    : octave_base_strstream (arg_md, ff), is (data) { }
+                       = octave::mach_info::native_float_format (),
+                     const std::string& encoding = "utf-8")
+    : octave_base_strstream (arg_md, ff, encoding), is (data) { }
 
   octave_istrstream (const std::string& data,
                      std::ios::openmode arg_md = std::ios::out,
                      octave::mach_info::float_format ff
-                       = octave::mach_info::native_float_format ())
-    : octave_base_strstream (arg_md, ff), is (data) { }
+                       = octave::mach_info::native_float_format (),
+                     const std::string& encoding = "utf-8")
+    : octave_base_strstream (arg_md, ff, encoding), is (data) { }
 
   // No copying!
 
   octave_istrstream (const octave_istrstream&) = delete;
 
   octave_istrstream& operator = (const octave_istrstream&) = delete;
 
 protected:
@@ -99,22 +102,24 @@ protected:
   ~octave_istrstream (void) = default;
 
 public:
 
 
   static octave::stream
   create (const char *data, std::ios::openmode arg_md = std::ios::out,
           octave::mach_info::float_format ff
-            = octave::mach_info::native_float_format ());
+            = octave::mach_info::native_float_format (),
+          const std::string& encoding = "utf-8");
 
   static octave::stream
   create (const std::string& data, std::ios::openmode arg_md = std::ios::out,
           octave::mach_info::float_format ff
-            = octave::mach_info::native_float_format ());
+            = octave::mach_info::native_float_format (),
+          const std::string& encoding = "utf-8");
 
   // Return nonzero if EOF has been reached on this stream.
 
   bool eof (void) const { return is.eof (); }
 
   std::istream * input_stream (void) { return &is; }
 
   std::ostream * output_stream (void) { return nullptr; }
@@ -134,35 +139,37 @@ private:
 
 class
 octave_ostrstream : public octave_base_strstream
 {
 public:
 
   octave_ostrstream (std::ios::openmode arg_md = std::ios::out,
                      octave::mach_info::float_format ff
-                       = octave::mach_info::native_float_format ())
-    : octave_base_strstream (arg_md, ff), os () { }
+                       = octave::mach_info::native_float_format (),
+                     const std::string& encoding = "utf-8")
+    : octave_base_strstream (arg_md, ff, encoding), os () { }
 
   // No copying!
 
   octave_ostrstream (const octave_ostrstream&) = delete;
 
   octave_ostrstream& operator = (const octave_ostrstream&) = delete;
 
 protected:
 
   ~octave_ostrstream (void) = default;
 
 public:
 
   static octave::stream
   create (std::ios::openmode arg_md = std::ios::out,
           octave::mach_info::float_format ff
-            = octave::mach_info::native_float_format ());
+            = octave::mach_info::native_float_format (),
+          const std::string& encoding = "utf-8");
 
   // Return nonzero if EOF has been reached on this stream.
 
   bool eof (void) const { return os.eof (); }
 
   std::istream * input_stream (void) { return nullptr; }
 
   std::ostream * output_stream (void) { return &os; }
