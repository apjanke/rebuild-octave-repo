# HG changeset patch
# User Rik <rik@octave.org>
# Date 1379963481 25200
#      Mon Sep 23 12:11:21 2013 -0700
# Node ID a5c6591d01e65f852f5b86b4aa83bd532715ade6
# Parent  c1e51a59f61e573d0a21cd0080ddbefe9408ecf9
__contour__.m: Overhaul function.

* scripts/plot/private/__contour__.m: Redo input validation and parsing.
Check for X and Y matrix inputs.  Change level calculation to match contourc.
Remove deprecated 'edgecolor' contour group property.  Remove unused code.
Use strcmp, not unnecessary strcmpi, on values returned from get().

diff --git a/scripts/plot/private/__contour__.m b/scripts/plot/private/__contour__.m
--- a/scripts/plot/private/__contour__.m
+++ b/scripts/plot/private/__contour__.m
@@ -21,95 +21,83 @@
 ## Undocumented internal function.
 ## @end deftypefn
 
 function [c, hg] = __contour__ (varargin)
   ax = varargin{1};
   zlevel = varargin{2};
   filled = "off";
 
+  linespec.color = "auto";
   linespec.linestyle = "-";
-  linespec.color = "auto";
-  edgecolor = "flat";
-  for i = 3 : nargin
-    arg = varargin {i};
-    if ((ischar (arg) || iscell (arg)))
-      [linespec, valid] = __pltopt__ ("__contour__", arg, false);
-      if (isempty (linespec.color))
-        linespec.color = "auto";
-      endif
-      if (isempty (linespec.linestyle))
-        linespec.linestyle = "-";
-      endif
+  for i = 3:2:nargin
+    arg = varargin{i};
+    if (ischar (arg) || iscellstr (arg))
+      [lspec, valid] = __pltopt__ ("__contour__", arg, false);
       if (valid)
         have_line_spec = true;
         varargin(i) = [];
+        linespec = lspec;
+        if (isempty (linespec.color))
+          linespec.color = "auto";
+        endif
+        if (isempty (linespec.linestyle))
+          linespec.linestyle = "-";
+        endif
         break;
       endif
     endif
   endfor
 
   opts = {};
   i = 3;
   while (i < length (varargin))
-    if (ischar (varargin {i}))
+    if (ischar (varargin{i}))
       if (strcmpi (varargin{i}, "fill"))
-        filled = varargin {i + 1};
+        filled = varargin{i+1};
         varargin(i:i+1) = [];
       elseif (strcmpi (varargin{i}, "linecolor"))
-        linespec.color = varargin {i + 1};
-        edgecolor = linespec.color;
-        if (ischar (edgecolor) && strcmpi (edgecolor, "auto"))
-          edgecolor = "flat";
-        endif
-        varargin(i:i+1) = [];
-      elseif (strcmpi (varargin{i}, "edgecolor"))
-        linespec.color = varargin {i + 1};
-        edgecolor = linespec.color;
-        if (ischar (edgecolor) && strcmpi (edgecolor, "flat"))
-          linespec.color = "auto";
-        endif
+        linespec.color = varargin{i+1};
         varargin(i:i+1) = [];
       else
-        opts{end+1} = varargin{i};
-        varargin(i) = [];
-        opts{end+1} = varargin{i};
-        varargin(i) = [];
+        opts(end+(1:2)) = varargin(i:i+1);
+        varargin(i:i+1) = [];
       endif
     else
       i++;
     endif
   endwhile
 
   if (length (varargin) < 5)
     z1 = varargin{3};
     x1 = 1 : columns (z1);
     y1 = 1 : rows (z1);
   else
     x1 = varargin{3};
     y1 = varargin{4};
     z1 = varargin{5};
   endif
-  if (!ismatrix (z1) || isvector (z1) || isscalar (z1))
-    error ("__contour__: z argument must be a matrix");
+  if (! ismatrix (z1) || ! ismatrix (x1) || ! ismatrix (y1))
+    error ("__contour__: X, Y, and Z must be matrices");
   endif
   if (length (varargin) == 4 || length (varargin) == 6)
     vn = varargin{end};
     vnauto = false;
   else
+    vn = 10;
     vnauto = true;
-    vn = 10;
   endif
 
   if (isscalar (vn))
-    ## FIXME - the levels should be determined similarly to {x,y,z}ticks
-    lvl = linspace (min (z1(!isinf (z1))), max (z1(!isinf (z1))),
-                    vn + 2)(1:end-1);
+    ## FIXME: The levels should be determined similarly to {x,y,z}ticks
+    ##        so that they aren't set at extremely odd values.
+    lvl = linspace (min (z1(!isinf (z1))), max (z1(!isinf (z1))), vn + 2);
+    lvl = lvl(2:end-1);  # Strip off max, min outliers
   else
-    lvl = vn;
+    lvl = unique (sort (vn));
   endif
 
   if (strcmpi (filled, "on"))
     if (isvector (x1) || isvector (y1))
       [x1, y1] = meshgrid (x1, y1);
     endif
     [nr, nc] = size (z1);
     x0 = prepad (x1, nc+1, 2 * x1(1, 1) - x1(1, 2), 2);
@@ -142,26 +130,20 @@ function [c, hg] = __contour__ (varargin
 
   ## The properties zlevel and zlevelmode don't exist in matlab, but allow the
   ## use of contourgroups with the contour3, meshc, and surfc functions.
   if (isnumeric (zlevel))
     addproperty ("zlevelmode", hg, "radio", "{none}|auto|manual", "manual");
     addproperty ("zlevel", hg, "data", zlevel);
   else
     addproperty ("zlevelmode", hg, "radio", "{none}|auto|manual", zlevel);
-    if (ischar (zlevel) && strcmpi (zlevel, "manual"))
-      z = varargin{3};
-      z = 2 * (min (z(:)) - max (z(:)));
-      addproperty ("zlevel", hg, "data", z);
-    else
-      addproperty ("zlevel", hg, "data", 0.);
-    endif
+    addproperty ("zlevel", hg, "data", 0.);
   endif
 
-  lvlstep = sum (abs (diff (lvl))) / (length (lvl) - 1);
+  lvlstep = sum (diff (lvl)) / (length (lvl) - 1);
 
   addproperty ("levellist", hg, "data", lev);
   addproperty ("levelstep", hg, "double", lvlstep);
   if (vnauto)
     addproperty ("levellistmode", hg, "radio", "{auto}|manual", "auto");
     addproperty ("levelstepmode", hg, "radio", "{auto}|manual", "auto");
   elseif (isscalar (vn))
     addproperty ("levellistmode", hg, "radio", "{auto}|manual", "auto");
@@ -177,20 +159,16 @@ function [c, hg] = __contour__ (varargin
   addproperty ("textstep", hg, "double", lvlstep);
   addproperty ("textstepmode", hg, "radio", "{auto}|manual", "auto");
   addproperty ("showtext", hg, "radio", "on|{off}", "off");
 
   addproperty ("linecolor", hg, "color", linespec.color, "{auto}|none");
   addproperty ("linestyle", hg, "linelinestyle", linespec.linestyle);
   addproperty ("linewidth", hg, "linelinewidth", 0.5);
 
-  ## FIXME: It would be good to hide this property which is just an
-  ##        undocumented alias for linecolor
-  addproperty ("edgecolor", hg, "color", edgecolor, "{flat}|none");
-
   addlistener (hg, "fill", @update_data);
 
   addlistener (hg, "zlevelmode", @update_zlevel);
   addlistener (hg, "zlevel", @update_zlevel);
 
   addlistener (hg, "levellist", {@update_data, "levellist"});
   addlistener (hg, "levelstep", {@update_data, "levelstep"});
   addlistener (hg, "levellistmode", @update_data);
@@ -202,18 +180,16 @@ function [c, hg] = __contour__ (varargin
   addlistener (hg, "textstep", @update_text);
   addlistener (hg, "textstepmode", @update_text);
   addlistener (hg, "showtext", @update_text);
 
   addlistener (hg, "linecolor", @update_line);
   addlistener (hg, "linestyle", @update_line);
   addlistener (hg, "linewidth", @update_line);
 
-  addlistener (hg, "edgecolor", @update_edgecolor);
-
   ## Set axis before adding patches so that each new patch does not trigger
   ## new axis calculation.  No need if mode is already "manual".
   if (all (strcmp (get (gca (), {"xlimmode", "ylimmode"}), "auto")))
     axis ([min(x1(:)) max(x1(:)) min(y1(:)) max(y1(:))]);
   endif
 
   add_patch_children (hg);
 
@@ -234,63 +210,59 @@ function add_patch_children (hg)
   ls = get (hg, "linestyle");
   filled = get (hg, "fill");
   ca = gca ();
 
   ## Turn off automatic updating of clim while adding patches
   climmode = get (ca, "climmode");
   set (ca, "climmode", "manual"); 
 
-  if (strcmpi (lc, "auto"))
+  if (strcmp (lc, "auto"))
     lc = "flat";
   endif
 
-  if (strcmpi (filled, "on"))
+  if (strcmp (filled, "on"))
 
     lvl_eps = get_lvl_eps (lev);
 
     ## Decode contourc output format.
-    i1 = 1;
+    i = 1;
     ncont = 0;
-    cont_lev = [];
-    cont_area = [];
-    while (i1 < columns (c))
+    while (i < columns (c))
       ncont++;
-      cont_lev(ncont) = c(1, i1);
-      cont_len(ncont) = c(2, i1);
-      cont_idx(ncont) = i1+1;
-      ii = i1+1:i1+cont_len(ncont);
+      cont_lev(ncont) = c(1, i);
+      cont_len(ncont) = c(2, i);
+      cont_idx(ncont) = i+1;
+      ii = i + (1:cont_len(ncont));
       cont_area(ncont) = polyarea (c(1, ii), c(2, ii));
-      i1 += c(2, i1) + 1;
+      i += cont_len(ncont) + 1;
     endwhile
 
     ## Handle for each level the case where we have (a) hole(s) in a patch.
     ## Those are to be filled with the color of level below or with the
     ## background colour.
     for k = 1:numel (lev)
       lvl_idx = find (abs (cont_lev - lev(k)) < lvl_eps);
       len = numel (lvl_idx);
       if (len > 1)
-        ## mark = logical (zeros (size (lvl_idx)));
         mark = false (size (lvl_idx));
         a = 1;
         while (a < len)
           ## take 1st patch
-          b = a + 1;
           pa_idx = lvl_idx(a);
           ## get pointer to contour start, and contour length
           curr_ct_idx = cont_idx(pa_idx);
           curr_ct_len = cont_len(pa_idx);
           ## get contour
           curr_ct = c(:, curr_ct_idx:curr_ct_idx+curr_ct_len-1);
           b_vec = (a+1):len;
           next_ct_pt_vec = c(:, cont_idx(lvl_idx(b_vec)));
           in = inpolygon (next_ct_pt_vec(1,:), next_ct_pt_vec(2,:),
                           curr_ct(1, :), curr_ct(2, :));
-          mark(b_vec(in)) = !mark(b_vec(in));
+          mark(b_vec(in)) = ! mark(b_vec(in));
           a++;
         endwhile
         if (numel (mark) > 0)
           ## All marked contours describe a hole in a larger contour of
           ## the same level and must be filled with colour of level below.
           ma_idx = lvl_idx(mark);
           if (k > 1)
             ## Find color of level below.
@@ -314,179 +286,161 @@ function add_patch_children (hg)
       ## delete double entries
       del_idx = max_idx(1:end-1);
       cont_area(del_idx) = cont_lev(del_idx) = [];
       cont_len(del_idx) = cont_idx(del_idx) = [];
     endif
 
     ## Now we have everything together and can start plotting the patches
     ## beginning with largest area.
-    [tmp, svec] = sort (cont_area);
+    [~, svec] = sort (cont_area);
     len = ncont - numel (del_idx);
     h = [];
-    for n = len:(-1):1
+    for n = len:-1:1
       idx = svec(n);
       ctmp = c(:, cont_idx(idx):cont_idx(idx) + cont_len(idx) - 1);
       if (all (ctmp(:,1) == ctmp(:,end)))
-        ctmp(:, end) = [];
-      else
-        ## Special case unclosed contours
+        ## patch() doesn't need/want closed contour.  It will do it itself.
+        ctmp(:,end) = [];
       endif
       if (isnan (cont_lev (idx)))
         fc = get (ca, "color");
         if (strcmp (fc, "none"))
           fc = get (ancestor (ca, "figure"), "color");
         endif
       else
         fc = "flat";
       endif
       h = [h; __go_patch__(ca, "xdata", ctmp(1, :)(:), "ydata", ctmp(2, :)(:),
                            "vertices", ctmp.', "faces", 1:(cont_len(idx)-1),
-                           "facevertexcdata", cont_lev(idx),
-                           "facecolor", fc, "cdata", cont_lev(idx),
-                           "edgecolor", lc, "linestyle", ls,
-                           "linewidth", lw, "parent", hg)];
+                           "facevertexcdata", cont_lev(idx), "facecolor", fc,
+                           "cdata", cont_lev(idx), "edgecolor", lc,
+                           "linestyle", ls, "linewidth", lw,
+                           "parent", hg)];
     endfor
 
     if (min (lev) == max (lev))
       set (ca, "clim", [min(lev)-1, max(lev)+1], "layer", "top");
     else
       set (ca, "clim", [min(lev), max(lev)], "layer", "top");
     endif
   else
     ## Decode contourc output format.
-    i1 = 1;
     h = [];
-    while (i1 < length (c))
-      clev = c(1,i1);
-      clen = c(2,i1);
+    i = 1;
+    while (i < length (c))
+      clev = c(1,i);
+      clen = c(2,i);
 
-      if (all (c(:,i1+1) == c(:,i1+clen)))
-        p = c(:, i1+1:i1+clen-1).';
+      if (all (c(:,i+1) == c(:,i+clen)))
+        p = c(:, i+1:i+clen-1).';
       else
-        p = [c(:, i1+1:i1+clen), NaN(2, 1)].';
+        p = [c(:, i+1:i+clen), NaN(2, 1)].';
       endif
 
       switch (zmode)
         case "none"
           h = [h; __go_patch__(ca, "xdata", p(:,1), "ydata", p(:,2),
-                               "zdata", [], "facecolor", "none",
-                               "vertices", p, "faces", 1:rows(p),
-                               "facevertexcdata", clev,
-                               "edgecolor", lc, "linestyle", ls,
-                               "linewidth", lw,
-                               "cdata", clev, "parent", hg)];
+                               "zdata", [],
+                               "vertices", p, "faces", 1:rows (p),
+                               "facevertexcdata", clev, "facecolor", "none",
+                               "cdata", clev, "edgecolor", lc,
+                               "linestyle", ls, "linewidth", lw,
+                               "parent", hg)];
         case "auto"
           h = [h; __go_patch__(ca, "xdata", p(:,1), "ydata", p(:,2),
-                               "zdata", clev * ones(rows(p),1),
+                               "zdata", clev * ones (rows (p),1),
                                "vertices", [p, clev * ones(rows(p),1)],
                                "faces", 1:rows(p),
-                               "facevertexcdata", clev,
-                               "facecolor", "none", "edgecolor", lc,
+                               "facevertexcdata", clev, "facecolor", "none",
+                               "cdata", clev, "edgecolor", lc,
                                "linestyle", ls, "linewidth", lw,
-                               "cdata", clev, "parent", hg)];
+                               "parent", hg)];
         otherwise
           h = [h; __go_patch__(ca, "xdata", p(:,1), "ydata", p(:,2),
-                               "zdata", zlev * ones (rows(p), 1),
+                               "zdata", zlev * ones (rows (p), 1),
                                "vertices", [p, zlev * ones(rows(p),1)],
-                               "faces", 1:rows(p),
-                               "facevertexcdata", clev,
-                               "facecolor", "none", "edgecolor", lc,
+                               "faces", 1:rows (p),
+                               "facevertexcdata", clev, "facecolor", "none",
+                               "cdata", clev, "edgecolor", lc,
                                "linestyle", ls, "linewidth", lw,
-                               "cdata", clev, "parent", hg)];
+                               "parent", hg)];
       endswitch
-      i1 += clen + 1;
+      i += clen + 1;
     endwhile
   endif
 
   set (ca, "climmode", climmode);
 
 endfunction
 
-function update_zlevel (h, d)
-
+function update_zlevel (h, ~)
   z = get (h, "zlevel");
   zmode = get (h, "zlevelmode");
   kids = get (h, "children");
 
   switch (zmode)
     case "none"
       set (kids, "zdata", []);
     case "auto"
       for i = 1 : length (kids)
-        set (kids(i), "zdata", get (kids (i), "cdata") .*
-             ones (size (get (kids (i), "xdata"))));
+        set (kids(i), "zdata", get (kids(i), "cdata") .*
+             ones (size (get (kids(i), "xdata"))));
       endfor
     otherwise
       for i = 1 : length (kids)
-        set (kids(i), "zdata", z .* ones (size (get (kids (i), "xdata"))));
+        set (kids(i), "zdata", z .* ones (size (get (kids(i), "xdata"))));
       endfor
   endswitch
 endfunction
 
-function update_edgecolor (h, d)
-  ec = get (h, "edgecolor");
+function update_line (h, ~)
   lc = get (h, "linecolor");
-  if (ischar (ec) && strcmpi (ec, "flat"))
-    if (! strcmpi (lc, "auto"))
-      set (h, "linecolor", "auto");
-    endif
-  elseif (! isequal (ec, lc))
-    set (h, "linecolor", ec);
-  endif
-endfunction
-
-function update_line (h, d)
-  lc = get (h, "linecolor");
-  ec = get (h, "edgecolor");
-  if (strcmpi (lc, "auto"))
+  if (strcmp (lc, "auto"))
     lc = "flat";
   endif
-  if (! isequal (ec, lc))
-    set (h, "edgecolor", lc);
-  endif
   set (findobj (h, "type", "patch"), "edgecolor", lc,
        "linewidth", get (h, "linewidth"), "linestyle", get (h, "linestyle"));
 endfunction
 
-function update_data (h, d, prop = "")
+function update_data (h, ~, prop = "")
   persistent recursive = false;
 
-  if (!recursive)
+  if (! recursive)
     recursive = true;
 
     delete (get (h, "children"));
 
     switch (prop)
       case "levellist"
         set (h, "levellistmode", "manual")
       case "levelstep"
         set (h, "levelstepmode", "manual")
     endswitch
 
-    if (strcmpi (get (h, "levellistmode"), "manual")
+    if (strcmp (get (h, "levellistmode"), "manual")
         && ! strcmp (prop, "levelstep"))
       lvl = get (h, "levellist");
-    elseif (strcmpi (get (h, "levelstepmode"), "manual"))
+    elseif (strcmp (get (h, "levelstepmode"), "manual"))
       z = get (h, "zdata");
       lvs = get (h, "levelstep");
       lvl(1) = ceil (min (z(:)) / lvs) * lvs;
       lvl(2) = floor (max (z(:)) / lvs) * lvs;
       if (lvl(1) >= lvl(2))
         lvl = median (z(:));
       else
         lvl = lvl(1) : lvs : lvl(2);
       endif
       set (h, "levellist", lvl);
       set (h, "levellistmode", "auto");
     else
       lvl = 10;
     endif
 
-    if (strcmpi (get (h, "fill"), "on"))
+    if (strcmp (get (h, "fill"), "on"))
       X = get (h, "xdata");
       Y = get (h, "ydata");
       Z = get (h, "zdata");
       if (isvector (X) || isvector (Y))
         [X, Y] = meshgrid (X, Y);
       endif
       [nr, nc] = size (Z);
       X0 = prepad (X, nc+1, 2 * X(1, 1) - X(1, 2), 2);
@@ -499,19 +453,19 @@ function update_data (h, d, prop = "")
       Z0(2:nr+1, 2:nc+1) = Z;
       [c, lev] = contourc (X0, Y0, Z0, lvl);
     else
       [c, lev] = contourc (get (h, "xdata"), get (h, "ydata"),
                            get (h, "zdata"), lvl);
     endif
     set (h, "contourmatrix", c);
 
-    if (strcmpi (get (h, "levellistmode"), "manual"))
+    if (strcmp (get (h, "levellistmode"), "manual"))
       ## Do nothing
-    elseif (strcmpi (get (h, "levelstepmode"), "manual"))
+    elseif (strcmp (get (h, "levelstepmode"), "manual"))
       set (h, "levellist", lev);
     else
       set (h, "levellist", lev);
       z = get (h, "zdata");
       lvlstep = (max (z(:)) - min (z(:))) / 10;
       set (h, "levelstep", lvlstep);
     endif
 
@@ -520,38 +474,38 @@ function update_data (h, d, prop = "")
     recursive = false;
   endif
 
 endfunction
 
 function update_text (h, d)
   persistent recursive = false;
 
-  if (!recursive)
+  if (! recursive)
     recursive = true;
 
     delete (findobj (h, "type", "text"));
 
-    if (strcmpi (get (h, "textlistmode"), "manual"))
+    if (strcmp (get (h, "textlistmode"), "manual"))
       lvl = get (h, "textlist");
-    elseif (strcmpi (get (h, "textstepmode"), "manual"))
+    elseif (strcmp (get (h, "textstepmode"), "manual"))
       lev = get (h, "levellist");
 
       lvl_eps = get_lvl_eps (lev);
 
       stp = get (h, "textstep");
       t = [0, floor(cumsum(diff (lev)) / (abs(stp) - lvl_eps))];
       lvl = lev([true, t(1:end-1) != t(2:end)]);
       set (h, "textlist", lvl);
     else
       lvl = get (h, "levellist");
       set (h, "textlist", lvl, "textstep", get (h, "levelstep"));
     endif
 
-    if (strcmpi (get (h, "showtext"), "on"))
+    if (strcmp (get (h, "showtext"), "on"))
       switch (get (h, "zlevelmode"))
         case "manual"
           __clabel__ (get (h, "contourmatrix"), lvl, h,
                       get (h, "labelspacing"), get (h, "zlevel"));
         case "auto"
           __clabel__ (get (h, "contourmatrix"), lvl, h,
                       get (h, "labelspacing"), "auto");
         otherwise
