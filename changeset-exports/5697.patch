# HG changeset patch
# User dbateman
# Date 1142956908 0
#      Tue Mar 21 16:01:48 2006 +0000
# Node ID 2fe20065a545777c62b9e80455bac8f9b47a82ea
# Parent  70cc04f9af41f71434919ab6cbf3ba2e917452b8
[project @ 2006-03-21 16:01:46 by dbateman]

diff --git a/liboctave/CSparse.cc b/liboctave/CSparse.cc
--- a/liboctave/CSparse.cc
+++ b/liboctave/CSparse.cc
@@ -6712,26 +6712,27 @@ ComplexMatrix
 SparseComplexMatrix::solve (SparseType &mattype, const Matrix& b, 
 			    octave_idx_type& info) const
 {
   double rcond;
   return solve (mattype, b, info, rcond, 0);
 }
 
 ComplexMatrix
-SparseComplexMatrix::solve (SparseType &mattype, const Matrix& b, octave_idx_type& info, 
-			    double& rcond) const
+SparseComplexMatrix::solve (SparseType &mattype, const Matrix& b,
+			    octave_idx_type& info, double& rcond) const
 {
   return solve (mattype, b, info, rcond, 0);
 }
 
 ComplexMatrix
-SparseComplexMatrix::solve (SparseType &mattype, const Matrix& b, octave_idx_type& err, 
-			    double& rcond, 
-			    solve_singularity_handler sing_handler) const
+SparseComplexMatrix::solve (SparseType &mattype, const Matrix& b,
+			    octave_idx_type& err, double& rcond, 
+			    solve_singularity_handler sing_handler,
+			    bool singular_fallback) const
 {
   ComplexMatrix retval;
   int typ = mattype.type (false);
 
   if (typ == SparseType::Unknown)
     typ = mattype.type (*this);
 
   if (typ == SparseType::Diagonal || typ == SparseType::Permuted_Diagonal)
@@ -6748,17 +6749,17 @@ SparseComplexMatrix::solve (SparseType &
   else if (typ == SparseType::Full || typ == SparseType::Hermitian)
     retval = fsolve (mattype, b, err, rcond, sing_handler, true);
   else if (typ != SparseType::Rectangular)
     {
       (*current_liboctave_error_handler) ("unknown matrix type");
       return ComplexMatrix ();
     }
 
-  if (mattype.type(false) == SparseType::Rectangular)
+  if (singular_fallback && mattype.type(false) == SparseType::Rectangular)
     {
       rcond = 1.;
 #ifdef USE_QRSOLVE
       retval = qrsolve (*this, b, err);
 #else
       retval = dmsolve<ComplexMatrix, SparseComplexMatrix,
 	Matrix> (*this, b, err);
 #endif
@@ -6788,17 +6789,18 @@ SparseComplexMatrix::solve (SparseType &
 		     octave_idx_type& info, double& rcond) const
 {
   return solve (mattype, b, info, rcond, 0);
 }
 
 SparseComplexMatrix
 SparseComplexMatrix::solve (SparseType &mattype, const SparseMatrix& b, 
 			    octave_idx_type& err, double& rcond,
-			    solve_singularity_handler sing_handler) const
+			    solve_singularity_handler sing_handler,
+			    bool singular_fallback) const
 {
   SparseComplexMatrix retval;
   int typ = mattype.type (false);
 
   if (typ == SparseType::Unknown)
     typ = mattype.type (*this);
 
   if (typ == SparseType::Diagonal || typ == SparseType::Permuted_Diagonal)
@@ -6815,17 +6817,17 @@ SparseComplexMatrix::solve (SparseType &
   else if (typ == SparseType::Full || typ == SparseType::Hermitian)
     retval = fsolve (mattype, b, err, rcond, sing_handler, true);
   else if (typ != SparseType::Rectangular)
     {
       (*current_liboctave_error_handler) ("unknown matrix type");
       return SparseComplexMatrix ();
     }
 
-  if (mattype.type(false) == SparseType::Rectangular)
+  if (singular_fallback && mattype.type(false) == SparseType::Rectangular)
     {
       rcond = 1.;
 #ifdef USE_QRSOLVE
       retval = qrsolve (*this, b, err);
 #else
       retval = dmsolve<SparseComplexMatrix, SparseComplexMatrix,
 	SparseMatrix> (*this, b, err);
 #endif
@@ -6847,25 +6849,26 @@ SparseComplexMatrix::solve (SparseType &
 			    octave_idx_type& info) const
 {
   double rcond;
   return solve (mattype, b, info, rcond, 0);
 }
 
 ComplexMatrix
 SparseComplexMatrix::solve (SparseType &mattype, const ComplexMatrix& b, 
-		     octave_idx_type& info, double& rcond) const
+			    octave_idx_type& info, double& rcond) const
 {
   return solve (mattype, b, info, rcond, 0);
 }
 
 ComplexMatrix
 SparseComplexMatrix::solve (SparseType &mattype, const ComplexMatrix& b, 
-		     octave_idx_type& err, double& rcond, 
-		     solve_singularity_handler sing_handler) const
+			    octave_idx_type& err, double& rcond, 
+			    solve_singularity_handler sing_handler,
+			    bool singular_fallback) const
 {
   ComplexMatrix retval;
   int typ = mattype.type (false);
 
   if (typ == SparseType::Unknown)
     typ = mattype.type (*this);
 
   if (typ == SparseType::Diagonal || typ == SparseType::Permuted_Diagonal)
@@ -6882,17 +6885,17 @@ SparseComplexMatrix::solve (SparseType &
   else if (typ == SparseType::Full || typ == SparseType::Hermitian)
     retval = fsolve (mattype, b, err, rcond, sing_handler, true);
   else if (typ != SparseType::Rectangular)
     {
       (*current_liboctave_error_handler) ("unknown matrix type");
       return ComplexMatrix ();
     }
 
-  if (mattype.type(false) == SparseType::Rectangular)
+  if (singular_fallback && mattype.type(false) == SparseType::Rectangular)
     {
       rcond = 1.;
 #ifdef USE_QRSOLVE
       retval = qrsolve (*this, b, err);
 #else
       retval = dmsolve<ComplexMatrix, SparseComplexMatrix,
 	ComplexMatrix> (*this, b, err);
 #endif
@@ -6907,33 +6910,34 @@ SparseComplexMatrix::solve (SparseType &
 {
   octave_idx_type info;
   double rcond;
   return solve (mattype, b, info, rcond, 0);
 }
 
 SparseComplexMatrix
 SparseComplexMatrix::solve (SparseType &mattype, const SparseComplexMatrix& b, 
-		     octave_idx_type& info) const
+			    octave_idx_type& info) const
 {
   double rcond;
   return solve (mattype, b, info, rcond, 0);
 }
 
 SparseComplexMatrix
 SparseComplexMatrix::solve (SparseType &mattype, const SparseComplexMatrix& b,
-		     octave_idx_type& info, double& rcond) const
+			    octave_idx_type& info, double& rcond) const
 {
   return solve (mattype, b, info, rcond, 0);
 }
 
 SparseComplexMatrix
 SparseComplexMatrix::solve (SparseType &mattype, const SparseComplexMatrix& b, 
 			    octave_idx_type& err, double& rcond,
-			    solve_singularity_handler sing_handler) const
+			    solve_singularity_handler sing_handler,
+			    bool singular_fallback) const
 {
   SparseComplexMatrix retval;
   int typ = mattype.type (false);
 
   if (typ == SparseType::Unknown)
     typ = mattype.type (*this);
 
   if (typ == SparseType::Diagonal || typ == SparseType::Permuted_Diagonal)
@@ -6950,17 +6954,17 @@ SparseComplexMatrix::solve (SparseType &
   else if (typ == SparseType::Full || typ == SparseType::Hermitian)
     retval = fsolve (mattype, b, err, rcond, sing_handler, true);
   else if (typ != SparseType::Rectangular)
     {
       (*current_liboctave_error_handler) ("unknown matrix type");
       return SparseComplexMatrix ();
     }
 
-  if (mattype.type(false) == SparseType::Rectangular)
+  if (singular_fallback && mattype.type(false) == SparseType::Rectangular)
     {
       rcond = 1.;
 #ifdef USE_QRSOLVE
       retval = qrsolve (*this, b, err);
 #else
       retval = dmsolve<SparseComplexMatrix, SparseComplexMatrix,
 	SparseComplexMatrix> (*this, b, err);
 #endif
diff --git a/liboctave/CSparse.h b/liboctave/CSparse.h
--- a/liboctave/CSparse.h
+++ b/liboctave/CSparse.h
@@ -268,121 +268,135 @@ private:
   SparseComplexMatrix fsolve (SparseType &typ, const SparseComplexMatrix& b,
 		octave_idx_type& info, double& rcond, 
 		solve_singularity_handler sing_handler,
 		bool calc_cond = false) const;
 
 public:
   // Generic interface to solver with no probing of type
   ComplexMatrix solve (SparseType &typ, const Matrix& b) const;
-  ComplexMatrix solve (SparseType &typ, const Matrix& b, octave_idx_type& info) const;
+  ComplexMatrix solve (SparseType &typ, const Matrix& b, 
+		       octave_idx_type& info) const;
   ComplexMatrix solve (SparseType &typ, const Matrix& b, octave_idx_type& info, 
-		double& rcond) const;
+		       double& rcond) const;
   ComplexMatrix solve (SparseType &typ, const Matrix& b, octave_idx_type& info, 
-		double& rcond, solve_singularity_handler sing_handler) const;
+		       double& rcond, solve_singularity_handler sing_handler,
+		       bool singular_fallback = true) const;
 
   ComplexMatrix solve (SparseType &typ, const ComplexMatrix& b) const;
   ComplexMatrix solve (SparseType &typ, const ComplexMatrix& b, 
 		       octave_idx_type& info) const;
-  ComplexMatrix solve (SparseType &typ, const ComplexMatrix& b, octave_idx_type& info, 
-		       double& rcond) const;
-  ComplexMatrix solve (SparseType &typ, const ComplexMatrix& b, octave_idx_type& info, 
-		double& rcond, solve_singularity_handler sing_handler) const;
+  ComplexMatrix solve (SparseType &typ, const ComplexMatrix& b, 
+		       octave_idx_type& info, double& rcond) const;
+  ComplexMatrix solve (SparseType &typ, const ComplexMatrix& b,
+		       octave_idx_type& info, double& rcond, 
+		       solve_singularity_handler sing_handler,
+		       bool singular_fallback = true) const;
 
   SparseComplexMatrix solve (SparseType &typ, const SparseMatrix& b) const;
   SparseComplexMatrix solve (SparseType &typ, const SparseMatrix& b, 
-		      octave_idx_type& info) const;
-  SparseComplexMatrix solve (SparseType &typ, const SparseMatrix& b, octave_idx_type& info, 
-		      double& rcond) const;
-  SparseComplexMatrix solve (SparseType &typ, const SparseMatrix& b, octave_idx_type& info, 
-		double& rcond, solve_singularity_handler sing_handler) const;
+			     octave_idx_type& info) const;
+  SparseComplexMatrix solve (SparseType &typ, const SparseMatrix& b, 
+			     octave_idx_type& info, double& rcond) const;
+  SparseComplexMatrix solve (SparseType &typ, const SparseMatrix& b, 
+			     octave_idx_type& info, double& rcond, 
+			     solve_singularity_handler sing_handler,
+			     bool singular_fallback = true) const;
 
   SparseComplexMatrix solve (SparseType &typ, 
 			     const SparseComplexMatrix& b) const;
   SparseComplexMatrix solve (SparseType &typ, const SparseComplexMatrix& b, 
 			     octave_idx_type& info) const;
   SparseComplexMatrix solve (SparseType &typ, const SparseComplexMatrix& b, 
 			     octave_idx_type& info, double& rcond) const;
-  SparseComplexMatrix solve (SparseType &typ, const SparseComplexMatrix& b, octave_idx_type& info, 
-	       double& rcond, solve_singularity_handler sing_handler) const;
+  SparseComplexMatrix solve (SparseType &typ, const SparseComplexMatrix& b,
+			     octave_idx_type& info, double& rcond, 
+			     solve_singularity_handler sing_handler,
+			     bool singular_fallback = true) const;
 
   ComplexColumnVector solve (SparseType &typ, const ColumnVector& b) const;
   ComplexColumnVector solve (SparseType &typ, const ColumnVector& b, 
-		      octave_idx_type& info) const;
+			     octave_idx_type& info) const;
   ComplexColumnVector solve (SparseType &typ, const ColumnVector& b, 
-		      octave_idx_type& info, double& rcond) const;
-  ComplexColumnVector solve (SparseType &typ, const ColumnVector& b, octave_idx_type& info,
-		double& rcond, solve_singularity_handler sing_handler) const;
+			     octave_idx_type& info, double& rcond) const;
+  ComplexColumnVector solve (SparseType &typ, const ColumnVector& b,
+			     octave_idx_type& info, double& rcond, 
+			     solve_singularity_handler sing_handler) const;
 
   ComplexColumnVector solve (SparseType &typ, 
 			     const ComplexColumnVector& b) const;
-  ComplexColumnVector solve (SparseType &typ, 
-			     const ComplexColumnVector& b, octave_idx_type& info) const;
+  ComplexColumnVector solve (SparseType &typ, const ComplexColumnVector& b, 
+			     octave_idx_type& info) const;
   ComplexColumnVector solve (SparseType &typ, const ComplexColumnVector& b,
 			     octave_idx_type& info, double& rcond) const;
   ComplexColumnVector solve (SparseType &typ, const ComplexColumnVector& b,
 			     octave_idx_type& info, double& rcond,
 			     solve_singularity_handler sing_handler) const;
 
   // Generic interface to solver with probing of type
   ComplexMatrix solve (const Matrix& b) const;
   ComplexMatrix solve (const Matrix& b, octave_idx_type& info) const;
-  ComplexMatrix solve (const Matrix& b, octave_idx_type& info, double& rcond) const;
+  ComplexMatrix solve (const Matrix& b, octave_idx_type& info, 
+		       double& rcond) const;
   ComplexMatrix solve (const Matrix& b, octave_idx_type& info, double& rcond, 
 		       solve_singularity_handler sing_handler) const;
 
   ComplexMatrix solve (const ComplexMatrix& b) const;
   ComplexMatrix solve (const ComplexMatrix& b, octave_idx_type& info) const;
   ComplexMatrix solve (const ComplexMatrix& b, octave_idx_type& info, 
 		       double& rcond) const;
-  ComplexMatrix solve (const ComplexMatrix& b, octave_idx_type& info, double& rcond,
-		       solve_singularity_handler sing_handler) const;
+  ComplexMatrix solve (const ComplexMatrix& b, octave_idx_type& info,
+		       double& rcond, solve_singularity_handler sing_handler) const;
 
   SparseComplexMatrix solve (const SparseMatrix& b) const;
   SparseComplexMatrix solve (const SparseMatrix& b, octave_idx_type& info) const;
   SparseComplexMatrix solve (const SparseMatrix& b, octave_idx_type& info, 
 			     double& rcond) const;
   SparseComplexMatrix solve (const SparseMatrix& b, octave_idx_type& info, 
 			     double& rcond, 
-		       solve_singularity_handler sing_handler) const;
+			     solve_singularity_handler sing_handler) const;
 
   SparseComplexMatrix solve (const SparseComplexMatrix& b) const;
-  SparseComplexMatrix solve (const SparseComplexMatrix& b, octave_idx_type& info) const;
-  SparseComplexMatrix solve (const SparseComplexMatrix& b, octave_idx_type& info, 
-			     double& rcond) const;
-  SparseComplexMatrix solve (const SparseComplexMatrix& b, octave_idx_type& info, 
-			     double& rcond,
+  SparseComplexMatrix solve (const SparseComplexMatrix& b, 
+			     octave_idx_type& info) const;
+  SparseComplexMatrix solve (const SparseComplexMatrix& b,
+			     octave_idx_type& info, double& rcond) const;
+  SparseComplexMatrix solve (const SparseComplexMatrix& b,
+			     octave_idx_type& info, double& rcond,
 			     solve_singularity_handler sing_handler) const;
 
   ComplexColumnVector solve (const ColumnVector& b) const;
   ComplexColumnVector solve (const ColumnVector& b, octave_idx_type& info) const;
   ComplexColumnVector solve (const ColumnVector& b, octave_idx_type& info,
 			     double& rcond) const;
-  ComplexColumnVector solve (const ColumnVector& b, octave_idx_type& info, double& rcond,
+  ComplexColumnVector solve (const ColumnVector& b, octave_idx_type& info, 
+			     double& rcond,
 			     solve_singularity_handler sing_handler) const;
 
   ComplexColumnVector solve (const ComplexColumnVector& b) const;
-  ComplexColumnVector solve (const ComplexColumnVector& b, octave_idx_type& info) const;
+  ComplexColumnVector solve (const ComplexColumnVector& b, 
+			     octave_idx_type& info) const;
   ComplexColumnVector solve (const ComplexColumnVector& b, octave_idx_type& info,
 			     double& rcond) const;
   ComplexColumnVector solve (const ComplexColumnVector& b, octave_idx_type& info,
 			     double& rcond,
 			     solve_singularity_handler sing_handler) const;
 
   SparseComplexMatrix squeeze (void) const;
 
   SparseComplexMatrix index (idx_vector& i, int resize_ok) const;
 
   SparseComplexMatrix index (idx_vector& i, idx_vector& j, int resize_ok) const;
   
   SparseComplexMatrix index (Array<idx_vector>& ra_idx, int resize_ok) const;
 
   SparseComplexMatrix reshape (const dim_vector& new_dims) const;
 
-  SparseComplexMatrix permute (const Array<octave_idx_type>& vec, bool inv = false) const;
+  SparseComplexMatrix permute (const Array<octave_idx_type>& vec, 
+			       bool inv = false) const;
 
   SparseComplexMatrix ipermute (const Array<octave_idx_type>& vec) const;
 
   SparseComplexMatrix map (c_c_Mapper f) const;
   SparseMatrix map (d_c_Mapper f) const;
   SparseBoolMatrix map (b_c_Mapper f) const;
 
   SparseComplexMatrix& apply (c_c_Mapper f);
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,19 @@
+2006-03-21  David Bateman  <dbateman@free.fr>
+
+	    * dSparse.cc (solve): Add argument singular_fallback, to allow
+	    fallback to QR solvers to be optional.
+	    * CSparse.cc (solve): ditto.
+	    * dSparse.h (solve): update declaration for new argument.
+	    * CSparse.h (solve): ditto.
+	    * sparse-dmsolve.cc (dmsolve): Use singular_fallback argument
+	    to bypass QR solvers when solving the well determined part of
+	    the problem.
+
 2006-03-17  John W. Eaton  <jwe@octave.org>
 
 	* str-vec.cc (vector::list_in_columns): New optional arg, width.
 
 2006-03-16  David Bateman  <dbateman@free.fr>
 
 	* CSparse.cc: Change use of nzmax to nnz to allow automatic
 	reduction of matrix size, except for a couple of cases where nzmax
diff --git a/liboctave/dSparse.cc b/liboctave/dSparse.cc
--- a/liboctave/dSparse.cc
+++ b/liboctave/dSparse.cc
@@ -6879,33 +6879,34 @@ Matrix
 SparseMatrix::solve (SparseType &mattype, const Matrix& b) const
 {
   octave_idx_type info;
   double rcond;
   return solve (mattype, b, info, rcond, 0);
 }
 
 Matrix
-SparseMatrix::solve (SparseType &mattype, const Matrix& b, octave_idx_type& info) const
+SparseMatrix::solve (SparseType &mattype, const Matrix& b, 
+		     octave_idx_type& info) const
 {
   double rcond;
   return solve (mattype, b, info, rcond, 0);
 }
 
 Matrix
 SparseMatrix::solve (SparseType &mattype, const Matrix& b, octave_idx_type& info, 
 		     double& rcond) const
 {
   return solve (mattype, b, info, rcond, 0);
 }
 
 Matrix
 SparseMatrix::solve (SparseType &mattype, const Matrix& b, octave_idx_type& err, 
-		     double& rcond, 
-		     solve_singularity_handler sing_handler) const
+		     double& rcond, solve_singularity_handler sing_handler,
+		     bool singular_fallback) const
 {
   Matrix retval;
   int typ = mattype.type (false);
 
   if (typ == SparseType::Unknown)
     typ = mattype.type (*this);
 
   // Only calculate the condition number for CHOLMOD/UMFPACK
@@ -6924,17 +6925,17 @@ SparseMatrix::solve (SparseType &mattype
     retval = fsolve (mattype, b, err, rcond, sing_handler, true);
   else if (typ != SparseType::Rectangular)
     {
       (*current_liboctave_error_handler) ("unknown matrix type");
       return Matrix ();
     }
 
   // Rectangular or one of the above solvers flags a singular matrix
-  if (mattype.type (false) == SparseType::Rectangular)
+  if (singular_fallback && mattype.type (false) == SparseType::Rectangular)
     {
       rcond = 1.;
 #ifdef USE_QRSOLVE
       retval = qrsolve (*this, b, err);
 #else
       retval = dmsolve<Matrix, SparseMatrix, Matrix> (*this, b, err);
 #endif
     }
@@ -6963,17 +6964,18 @@ SparseMatrix::solve (SparseType &mattype
 		     octave_idx_type& info, double& rcond) const
 {
   return solve (mattype, b, info, rcond, 0);
 }
 
 SparseMatrix
 SparseMatrix::solve (SparseType &mattype, const SparseMatrix& b, 
 		     octave_idx_type& err, double& rcond,
-		     solve_singularity_handler sing_handler) const
+		     solve_singularity_handler sing_handler,
+		     bool singular_fallback) const
 {
   SparseMatrix retval;
   int typ = mattype.type (false);
 
   if (typ == SparseType::Unknown)
     typ = mattype.type (*this);
 
   if (typ == SparseType::Diagonal || typ == SparseType::Permuted_Diagonal)
@@ -6990,17 +6992,17 @@ SparseMatrix::solve (SparseType &mattype
   else if (typ == SparseType::Full || typ == SparseType::Hermitian)
     retval = fsolve (mattype, b, err, rcond, sing_handler, true);
   else if (typ != SparseType::Rectangular)
     {
       (*current_liboctave_error_handler) ("unknown matrix type");
       return SparseMatrix ();
     }
 
-  if (mattype.type (false) == SparseType::Rectangular)
+  if (singular_fallback && mattype.type (false) == SparseType::Rectangular)
     {
       rcond = 1.;
 #ifdef USE_QRSOLVE
       retval = qrsolve (*this, b, err);
 #else
       retval = dmsolve<SparseMatrix, SparseMatrix, 
 	SparseMatrix> (*this, b, err);
 #endif
@@ -7030,17 +7032,18 @@ SparseMatrix::solve (SparseType &mattype
 		     octave_idx_type& info, double& rcond) const
 {
   return solve (mattype, b, info, rcond, 0);
 }
 
 ComplexMatrix
 SparseMatrix::solve (SparseType &mattype, const ComplexMatrix& b, 
 		     octave_idx_type& err, double& rcond, 
-		     solve_singularity_handler sing_handler) const
+		     solve_singularity_handler sing_handler,
+		     bool singular_fallback) const
 {
   ComplexMatrix retval;
   int typ = mattype.type (false);
 
   if (typ == SparseType::Unknown)
     typ = mattype.type (*this);
 
   if (typ == SparseType::Diagonal || typ == SparseType::Permuted_Diagonal)
@@ -7057,17 +7060,17 @@ SparseMatrix::solve (SparseType &mattype
   else if (typ == SparseType::Full || typ == SparseType::Hermitian)
     retval = fsolve (mattype, b, err, rcond, sing_handler, true);
   else if (typ != SparseType::Rectangular)
     {
       (*current_liboctave_error_handler) ("unknown matrix type");
       return ComplexMatrix ();
     }
 
-  if (mattype.type(false) == SparseType::Rectangular)
+  if (singular_fallback && mattype.type(false) == SparseType::Rectangular)
     {
       rcond = 1.;
 #ifdef USE_QRSOLVE
       retval = qrsolve (*this, b, err);
 #else
       retval = dmsolve<ComplexMatrix, SparseMatrix, 
 	ComplexMatrix> (*this, b, err);
 #endif
@@ -7097,17 +7100,18 @@ SparseMatrix::solve (SparseType &mattype
 		     octave_idx_type& info, double& rcond) const
 {
   return solve (mattype, b, info, rcond, 0);
 }
 
 SparseComplexMatrix
 SparseMatrix::solve (SparseType &mattype, const SparseComplexMatrix& b, 
 		     octave_idx_type& err, double& rcond,
-		     solve_singularity_handler sing_handler) const
+		     solve_singularity_handler sing_handler,
+		     bool singular_fallback) const
 {
   SparseComplexMatrix retval;
   int typ = mattype.type (false);
 
   if (typ == SparseType::Unknown)
     typ = mattype.type (*this);
 
   if (typ == SparseType::Diagonal || typ == SparseType::Permuted_Diagonal)
@@ -7124,17 +7128,17 @@ SparseMatrix::solve (SparseType &mattype
   else if (typ == SparseType::Full || typ == SparseType::Hermitian)
     retval = fsolve (mattype, b, err, rcond, sing_handler, true);
   else if (typ != SparseType::Rectangular)
     {
       (*current_liboctave_error_handler) ("unknown matrix type");
       return SparseComplexMatrix ();
     }
 
-  if (mattype.type(false) == SparseType::Rectangular)
+  if (singular_fallback && mattype.type(false) == SparseType::Rectangular)
     {
       rcond = 1.;
 #ifdef USE_QRSOLVE
       retval = qrsolve (*this, b, err);
 #else
       retval = dmsolve<SparseComplexMatrix, SparseMatrix, 
 	SparseComplexMatrix> (*this, b, err);
 #endif
diff --git a/liboctave/dSparse.h b/liboctave/dSparse.h
--- a/liboctave/dSparse.h
+++ b/liboctave/dSparse.h
@@ -260,56 +260,64 @@ private:
 		bool calc_cond = false) const;
 
 public:
   // Generic interface to solver with no probing of type
   Matrix solve (SparseType &typ, const Matrix& b) const;
   Matrix solve (SparseType &typ, const Matrix& b, octave_idx_type& info) const;
   Matrix solve (SparseType &typ, const Matrix& b, octave_idx_type& info, 
 		double& rcond) const;
-  Matrix solve (SparseType &typ, const Matrix& b, octave_idx_type& info, double& rcond,
-		solve_singularity_handler sing_handler) const;
+  Matrix solve (SparseType &typ, const Matrix& b, octave_idx_type& info,
+		double& rcond, solve_singularity_handler sing_handler,
+		bool singular_fallback = true) const;
 
   ComplexMatrix solve (SparseType &typ, const ComplexMatrix& b) const;
   ComplexMatrix solve (SparseType &typ, const ComplexMatrix& b, 
 		       octave_idx_type& info) const;
-  ComplexMatrix solve (SparseType &typ, const ComplexMatrix& b, octave_idx_type& info, 
-		       double& rcond) const;
-  ComplexMatrix solve (SparseType &typ, const ComplexMatrix& b, octave_idx_type& info, 
-		double& rcond, solve_singularity_handler sing_handler) const;
+  ComplexMatrix solve (SparseType &typ, const ComplexMatrix& b, 
+		       octave_idx_type& info, double& rcond) const;
+  ComplexMatrix solve (SparseType &typ, const ComplexMatrix& b,
+		       octave_idx_type& info, double& rcond, 
+		       solve_singularity_handler sing_handler,
+		       bool singular_fallback = true) const;
 
   SparseMatrix solve (SparseType &typ, const SparseMatrix& b) const;
   SparseMatrix solve (SparseType &typ, const SparseMatrix& b, 
 		      octave_idx_type& info) const;
-  SparseMatrix solve (SparseType &typ, const SparseMatrix& b, octave_idx_type& info, 
-		      double& rcond) const;
-  SparseMatrix solve (SparseType &typ, const SparseMatrix& b, octave_idx_type& info, 
-		double& rcond, solve_singularity_handler sing_handler) const;
+  SparseMatrix solve (SparseType &typ, const SparseMatrix& b,
+		      octave_idx_type& info, double& rcond) const;
+  SparseMatrix solve (SparseType &typ, const SparseMatrix& b,
+		      octave_idx_type& info, double& rcond, 
+		      solve_singularity_handler sing_handler,
+		      bool singular_fallback = true) const;
 
   SparseComplexMatrix solve (SparseType &typ, 
 			     const SparseComplexMatrix& b) const;
   SparseComplexMatrix solve (SparseType &typ, const SparseComplexMatrix& b, 
 			     octave_idx_type& info) const;
   SparseComplexMatrix solve (SparseType &typ, const SparseComplexMatrix& b, 
 			     octave_idx_type& info, double& rcond) const;
-  SparseComplexMatrix solve (SparseType &typ, const SparseComplexMatrix& b, octave_idx_type& info, 
-	       double& rcond, solve_singularity_handler sing_handler) const;
+  SparseComplexMatrix solve (SparseType &typ, const SparseComplexMatrix& b,
+			     octave_idx_type& info, double& rcond, 
+			     solve_singularity_handler sing_handler,
+			     bool singular_fallabck = true) const;
 
   ColumnVector solve (SparseType &typ, const ColumnVector& b) const;
   ColumnVector solve (SparseType &typ, const ColumnVector& b, 
 		      octave_idx_type& info) const;
   ColumnVector solve (SparseType &typ, const ColumnVector& b, 
 		      octave_idx_type& info, double& rcond) const;
-  ColumnVector solve (SparseType &typ, const ColumnVector& b, octave_idx_type& info,
-		double& rcond, solve_singularity_handler sing_handler) const;
+  ColumnVector solve (SparseType &typ, const ColumnVector& b,
+		      octave_idx_type& info, double& rcond, 
+		      solve_singularity_handler sing_handler) const;
 
   ComplexColumnVector solve (SparseType &typ, 
 			     const ComplexColumnVector& b) const;
-  ComplexColumnVector solve (SparseType &typ, 
-			     const ComplexColumnVector& b, octave_idx_type& info) const;
+  ComplexColumnVector solve (SparseType &typ, const ComplexColumnVector& b, 
+			     octave_idx_type& info) const;
   ComplexColumnVector solve (SparseType &typ, const ComplexColumnVector& b,
 			     octave_idx_type& info, double& rcond) const;
   ComplexColumnVector solve (SparseType &typ, const ComplexColumnVector& b,
 			     octave_idx_type& info, double& rcond,
 			     solve_singularity_handler sing_handler) const;
 
   // Generic interface to solver with probing of type
   Matrix solve (const Matrix& b) const;
diff --git a/liboctave/sparse-dmsolve.cc b/liboctave/sparse-dmsolve.cc
--- a/liboctave/sparse-dmsolve.cc
+++ b/liboctave/sparse-dmsolve.cc
@@ -390,17 +390,16 @@ dmsolve (const ST &a, const T &b, octave
       CXSPARSE_DNAME (d) *dm = CXSPARSE_DNAME(_dmperm) (&csm);
       octave_idx_type *p = dm->P;
       octave_idx_type *q = dm->Q;
       OCTAVE_LOCAL_BUFFER (octave_idx_type, pinv, nr);
       for (octave_idx_type i = 0; i < nr; i++)
 	pinv [p [i]] = i;
       RT btmp;
       dmsolve_permute (btmp, b, pinv);
-      SparseType mtyp (SparseType::Full);
       info = 0;
       retval.resize (nc, b_nc);
 
       // Leading over-determined block
       if (dm->rr [2] < nr && dm->cc [3] < nc)
 	{
 	  ST m = dmsolve_extract (a, pinv, q, dm->rr [2], nr, dm->cc [3], nc, 
 				  nnz_remaining, true);
@@ -426,18 +425,19 @@ dmsolve (const ST &a, const T &b, octave
 	  !info && !error_state)
 	{
 	  ST m = dmsolve_extract (a, pinv, q, dm->rr [1], dm->rr [2], 
 				  dm->cc [2], dm->cc [3], nnz_remaining, false);
 	  nnz_remaining -= m.nnz();
 	  RT btmp2 = dmsolve_extract (btmp, NULL, NULL, dm->rr [1], dm->rr [2], 
 				      0, b_nc);
 	  double rcond = 0.0;
+	  SparseType mtyp (SparseType::Full);
 	  RT mtmp = m.solve (mtyp, btmp2, info, rcond, 
-			     solve_singularity_warning);	
+			     solve_singularity_warning, false);	
 	  if (info != 0)
 	    {
 	      info = 0;
 	      mtmp = qrsolve (m, btmp2, info);
 	    }
 
 	  dmsolve_insert (retval, mtmp, q, dm->cc [2], 0);
 	  if (dm->rr [1] > 0 && !info && !error_state)
