# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1385414687 18000
#      Mon Nov 25 16:24:47 2013 -0500
# Node ID 79653c5b614716e9cda49be6b639de9f3ffe2d93
# Parent  b001d9e9fd1730802ebbb4d1d118561090d1c698
make int64 ops implemented with long double work again (bug #40607)

* oct-conf-post.in.h : Use SIZEOF_LONG_DOUBLE < 16 in condition used
to define OCTAVE_ENSURE_LONG_DOUBLE_OPERATIONS_ARE_NOT_TRUNCATED.
* oct-inttypes.h, oct-inttypes.cc: Return octave_int64 or
octave_uint64 from external long double operation functions instead of
returning long double.

diff --git a/liboctave/util/oct-inttypes.cc b/liboctave/util/oct-inttypes.cc
--- a/liboctave/util/oct-inttypes.cc
+++ b/liboctave/util/oct-inttypes.cc
@@ -106,35 +106,45 @@ octave_external_int64_int64_mul (int64_t
 
   int64_t retval = octave_int_arith_base<int64_t, true>::mul_internal (x, y);
 
   END_LONG_DOUBLE_ROUNDING ();
 
   return retval;
 }
 
-#define OCTAVE_LONG_DOUBLE_OP(OP, NAME) \
-  long double \
-  octave_external_long_double_ ## NAME (long double x, long double y) \
+// Note that if we return long double it is apparently possible for
+// truncation to happen at the point of storing the result in retval,
+// which can happen after we end long double rounding.  Attempt to avoid
+// that problem by storing the full precision temporary value in the
+// integer value before we end the long double rounding mode.
+
+#define OCTAVE_LONG_DOUBLE_OP(RT, OP, NAME) \
+  RT \
+  RT ## _external_long_double_ ## NAME (long double x, long double y) \
   { \
     DECL_LONG_DOUBLE_ROUNDING \
  \
     BEGIN_LONG_DOUBLE_ROUNDING (); \
  \
-    long double retval = x OP y; \
+    RT retval = RT (x OP y); \
  \
     END_LONG_DOUBLE_ROUNDING (); \
  \
     return retval; \
   }
 
-OCTAVE_LONG_DOUBLE_OP (+, add)
-OCTAVE_LONG_DOUBLE_OP (-, sub)
-OCTAVE_LONG_DOUBLE_OP (*, mul)
-OCTAVE_LONG_DOUBLE_OP (/, div)
+#define OCTAVE_LONG_DOUBLE_OPS(RT) \
+  OCTAVE_LONG_DOUBLE_OP (RT, +, add); \
+  OCTAVE_LONG_DOUBLE_OP (RT, -, sub); \
+  OCTAVE_LONG_DOUBLE_OP (RT, *, mul); \
+  OCTAVE_LONG_DOUBLE_OP (RT, /, div)
+
+OCTAVE_LONG_DOUBLE_OPS(octave_int64);
+OCTAVE_LONG_DOUBLE_OPS(octave_uint64);
 
 #endif
 
 #else
 
 // Define comparison operators
 
 template <class xop>
diff --git a/liboctave/util/oct-inttypes.h b/liboctave/util/oct-inttypes.h
--- a/liboctave/util/oct-inttypes.h
+++ b/liboctave/util/oct-inttypes.h
@@ -1032,27 +1032,32 @@ typedef octave_int<int16_t> octave_int16
 typedef octave_int<int32_t> octave_int32;
 typedef octave_int<int64_t> octave_int64;
 
 typedef octave_int<uint8_t> octave_uint8;
 typedef octave_int<uint16_t> octave_uint16;
 typedef octave_int<uint32_t> octave_uint32;
 typedef octave_int<uint64_t> octave_uint64;
 
-extern OCTAVE_API long double
-octave_external_long_double_add (long double x, long double y);
+#ifdef OCTAVE_ENSURE_LONG_DOUBLE_OPERATIONS_ARE_NOT_TRUNCATED
 
-extern OCTAVE_API long double
-octave_external_long_double_sub (long double x, long double y);
+#define DECLARE_EXTERNAL_LONG_DOUBLE_OP(RT, OP) \
+  extern OCTAVE_API RT \
+  RT ## _external_long_double_ ## OP (long double x, long double y)
 
-extern OCTAVE_API long double
-octave_external_long_double_mul (long double x, long double y);
+#define DECLARE_EXTERNAL_LONG_DOUBLE_OPS(RT) \
+  DECLARE_EXTERNAL_LONG_DOUBLE_OP (RT, add); \
+  DECLARE_EXTERNAL_LONG_DOUBLE_OP (RT, sub); \
+  DECLARE_EXTERNAL_LONG_DOUBLE_OP (RT, mul); \
+  DECLARE_EXTERNAL_LONG_DOUBLE_OP (RT, div)
 
-extern OCTAVE_API long double
-octave_external_long_double_div (long double x, long double y);
+DECLARE_EXTERNAL_LONG_DOUBLE_OPS (octave_int64);
+DECLARE_EXTERNAL_LONG_DOUBLE_OPS (octave_uint64);
+
+#endif
 
 #define OCTAVE_INT_DOUBLE_BIN_OP0(OP) \
   template <class T> \
   inline octave_int<T> \
   operator OP (const octave_int<T>& x, const double& y) \
   { return octave_int<T> (static_cast<double> (x) OP y); } \
   template <class T> \
   inline octave_int<T> \
@@ -1063,47 +1068,43 @@ octave_external_long_double_div (long do
 // Handle mixed op using long double
 #ifdef OCTAVE_ENSURE_LONG_DOUBLE_OPERATIONS_ARE_NOT_TRUNCATED
 #define OCTAVE_INT_DOUBLE_BIN_OP(OP, NAME) \
   OCTAVE_INT_DOUBLE_BIN_OP0(OP) \
   template <> \
   inline octave_int64 \
   operator OP (const double& x, const octave_int64& y) \
   { \
-    return octave_int64 \
-      (octave_external_long_double_ ## NAME \
-       (static_cast<long double> (x), \
-        static_cast<long double> (y.value ()))); \
+    return octave_int64_external_long_double_ ## NAME \
+     (static_cast<long double> (x), \
+      static_cast<long double> (y.value ())); \
   } \
   template <> \
   inline octave_uint64 \
   operator OP (const double& x, const octave_uint64& y) \
   { \
-    return octave_uint64 \
-      (octave_external_long_double_ ## NAME \
-       (static_cast<long double> (x), \
-        static_cast<long double> (y.value ()))); \
+    return octave_uint64_external_long_double_ ## NAME \
+     (static_cast<long double> (x), \
+      static_cast<long double> (y.value ())); \
   } \
   template <> \
   inline octave_int64 \
   operator OP (const octave_int64& x, const double& y) \
   { \
-    return octave_int64 \
-      (octave_external_long_double_ ## NAME \
-       (static_cast<long double> (x.value ()), \
-        static_cast<long double> (y))); \
+    return octave_int64_external_long_double_ ## NAME \
+     (static_cast<long double> (x.value ()), \
+      static_cast<long double> (y)); \
   } \
   template <> \
   inline octave_uint64 \
   operator OP (const octave_uint64& x, const double& y) \
   { \
-    return octave_uint64 \
-      (octave_external_long_double_ ## NAME \
-       (static_cast<long double> (x.value ()), \
-        static_cast<long double> (y))); \
+    return octave_uint64_external_long_double_ ## NAME \
+     (static_cast<long double> (x.value ()), \
+      static_cast<long double> (y)); \
   }
 #else
 #define OCTAVE_INT_DOUBLE_BIN_OP(OP, NAME) \
   OCTAVE_INT_DOUBLE_BIN_OP0(OP) \
   template <> \
   inline octave_int64 \
   operator OP (const double& x, const octave_int64& y) \
   { \
@@ -1149,16 +1150,18 @@ octave_external_long_double_div (long do
 
 OCTAVE_INT_DOUBLE_BIN_OP (+, add)
 OCTAVE_INT_DOUBLE_BIN_OP (-, sub)
 OCTAVE_INT_DOUBLE_BIN_OP (*, mul)
 OCTAVE_INT_DOUBLE_BIN_OP (/, div)
 
 #undef OCTAVE_INT_DOUBLE_BIN_OP0
 #undef OCTAVE_INT_DOUBLE_BIN_OP
+#undef DECLARE_EXTERNAL_LONG_DOUBLE_OP
+#undef DECLARE_EXTERNAL_LONG_DOUBLE_OPS
 
 #define OCTAVE_INT_DOUBLE_CMP_OP(OP,NAME) \
   template <class T> \
   inline bool \
   operator OP (const octave_int<T>& x, const double& y) \
   { return octave_int_cmp_op::mop<octave_int_cmp_op::NAME> (x.value (), y); } \
   template <class T> \
   inline bool \
diff --git a/oct-conf-post.in.h b/oct-conf-post.in.h
--- a/oct-conf-post.in.h
+++ b/oct-conf-post.in.h
@@ -103,17 +103,17 @@ typedef unsigned long ino_t;
 #define SIZEOF_OCTAVE_IDX_TYPE SIZEOF_INT
 #endif
 
 /* To be able to use long doubles for 64-bit mixed arithmetics, we need
    them at least 80 bits wide and we need roundl declared in math.h.
    FIXME: Maybe substitute this by a more precise check in the future?  */
 #if (SIZEOF_LONG_DOUBLE >= 10) && defined (HAVE_ROUNDL)
 # define OCTAVE_INT_USE_LONG_DOUBLE
-# if (SIZEOF_LONG_DOUBLE == 10 \
+# if (SIZEOF_LONG_DOUBLE < 16 \
       && (defined __i386__ || defined __x86_64__) && defined __GNUC__)
 #define OCTAVE_ENSURE_LONG_DOUBLE_OPERATIONS_ARE_NOT_TRUNCATED 1
 # endif
 #endif
 
 #define OCTAVE_EMPTY_CPP_ARG
 
 /* oct-dlldefs.h */
