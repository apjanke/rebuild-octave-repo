# HG changeset patch
# User Rik <rik@octave.org>
# Date 1546477033 28800
#      Wed Jan 02 16:57:13 2019 -0800
# Node ID c309bceb6774c8e59659404947c0995b39f0e6f3
# Parent  0e6cd97c0f685d4024bd29e722dcb425808825e2
chol.h: Fix static analyzer detected issues (bug #55347).

* chol.h (chol::chol (void)): Initialize private data member is_upper.
* chol.h (chol::chol (const chol& a)): Initialize private data member is_upper
from a.is_upper.
* chol.h (chol::operator =): Initialize private data member is_upper from
source chol matrix.

* chol.cc: Fix typo in FIXME comments.

diff --git a/liboctave/numeric/chol.cc b/liboctave/numeric/chol.cc
--- a/liboctave/numeric/chol.cc
+++ b/liboctave/numeric/chol.cc
@@ -66,17 +66,17 @@ chol2inv_internal (const Matrix& r, bool
     F77_XFCN (dpotri, DPOTRI, (F77_CONST_CHAR_ARG2 ("U", 1), n,
                                v, n, info
                                F77_CHAR_ARG_LEN (1)));
   else
     F77_XFCN (dpotri, DPOTRI, (F77_CONST_CHAR_ARG2 ("L", 1), n,
                                v, n, info
                                F77_CHAR_ARG_LEN (1)));
 
-  // FIXME: Should we check info exit value and possible report an error?
+  // FIXME: Should we check info exit value and possibly report an error?
 
   // If someone thinks of a more graceful way of doing this
   // (or faster for that matter :-)), please let me know!
 
   if (n > 1)
     {
       if (is_upper)
         for (octave_idx_type j = 0; j < r_nc; j++)
@@ -114,17 +114,17 @@ chol2inv_internal (const FloatMatrix& r,
     F77_XFCN (spotri, SPOTRI, (F77_CONST_CHAR_ARG2 ("U", 1), n,
                                v, n, info
                                F77_CHAR_ARG_LEN (1)));
   else
     F77_XFCN (spotri, SPOTRI, (F77_CONST_CHAR_ARG2 ("L", 1), n,
                                v, n, info
                                F77_CHAR_ARG_LEN (1)));
 
-  // FIXME: Should we check info exit value and possible report an error?
+  // FIXME: Should we check info exit value and possibly report an error?
 
   // If someone thinks of a more graceful way of doing this (or
   // faster for that matter :-)), please let me know!
 
   if (n > 1)
     {
       if (is_upper)
         for (octave_idx_type j = 0; j < r_nc; j++)
diff --git a/liboctave/numeric/chol.h b/liboctave/numeric/chol.h
--- a/liboctave/numeric/chol.h
+++ b/liboctave/numeric/chol.h
@@ -34,40 +34,41 @@ namespace octave
     class
     chol
     {
     public:
 
       typedef typename T::column_vector_type VT;
       typedef typename T::real_elt_type COND_T;
 
-      chol (void) : chol_mat (), xrcond (0) { }
+      chol (void) : chol_mat (), xrcond (0), is_upper (true) { }
 
       chol (const T& a, bool upper = true, bool calc_cond = false)
         : chol_mat (), xrcond (0)
       {
         init (a, upper, calc_cond);
       }
 
       chol (const T& a, octave_idx_type& info, bool upper = true,
             bool calc_cond = false)
         : chol_mat (), xrcond (0)
       {
         info = init (a, upper, calc_cond);
       }
 
       chol (const chol& a)
-        : chol_mat (a.chol_mat), xrcond (a.xrcond) { }
+        : chol_mat (a.chol_mat), xrcond (a.xrcond), is_upper (a.is_upper) { }
 
       chol& operator = (const chol& a)
       {
         if (this != &a)
           {
             chol_mat = a.chol_mat;
             xrcond = a.xrcond;
+            is_upper = a.is_upper;
           }
 
         return *this;
       }
 
       T chol_matrix (void) const { return chol_mat; }
 
       COND_T rcond (void) const { return xrcond; }
