# HG changeset patch
# User Rik <rik@octave.org>
# Date 1465684351 25200
#      Sat Jun 11 15:32:31 2016 -0700
# Node ID 5c67b16acc4ab1642a5c1c1ca9b4b1cf1dbe1565
# Parent  a55f1fa2c94a9b1031bdd7cbe94b2a0b3cc171a4
maint: Use C++ 'auto' keyword in some instances in liboctave.

* cmd-edit.cc, cmd-edit.h, oct-shlib.cc, singleton-cleanup.cc:
Use C++ 'auto' keyword in some instances in liboctave.

diff --git a/liboctave/util/cmd-edit.cc b/liboctave/util/cmd-edit.cc
--- a/liboctave/util/cmd-edit.cc
+++ b/liboctave/util/cmd-edit.cc
@@ -1085,35 +1085,33 @@ namespace octave
   command_editor::insert_initial_input (void)
   {
     return instance_ok () ? instance->do_insert_initial_input () : 0;
   }
 
   int
   command_editor::startup_handler (void)
   {
-    for (startup_hook_set_iterator p = startup_hook_set.begin ();
-         p != startup_hook_set.end (); p++)
+    for (auto fcnptr : startup_hook_set)
       {
-        startup_hook_fcn f = *p;
+        startup_hook_fcn f = *fcnptr;
 
         if (f)
           f ();
       }
 
     return 0;
   }
 
   int
   command_editor::pre_input_handler (void)
   {
-    for (pre_input_hook_set_iterator p = pre_input_hook_set.begin ();
-         p != pre_input_hook_set.end (); p++)
+    for (auto fcnptr : pre_input_hook_set)
       {
-        pre_input_hook_fcn f = *p;
+        pre_input_hook_fcn f = *fcnptr;
 
         if (f)
           f ();
       }
 
     return 0;
   }
 
@@ -1121,20 +1119,19 @@ namespace octave
   command_editor::event_handler (void)
   {
     event_hook_lock.lock ();
 
     std::set<event_hook_fcn> hook_set (event_hook_set);
 
     event_hook_lock.unlock ();
 
-    for (event_hook_set_iterator p = hook_set.begin ();
-         p != hook_set.end (); p++)
+    for (auto fcnptr : hook_set)
       {
-        event_hook_fcn f = *p;
+        event_hook_fcn f = *fcnptr;
 
         if (f)
           f ();
       }
 
     return 0;
   }
 
@@ -1477,17 +1474,17 @@ namespace octave
       }
   }
 
   void
   command_editor::remove_startup_hook (startup_hook_fcn f)
   {
     if (instance_ok ())
       {
-        startup_hook_set_iterator p = startup_hook_set.find (f);
+        auto p = startup_hook_set.find (f);
 
         if (p != startup_hook_set.end ())
           startup_hook_set.erase (p);
 
         if (startup_hook_set.empty ())
           instance->restore_startup_hook ();
       }
   }
@@ -1503,17 +1500,17 @@ namespace octave
       }
   }
 
   void
   command_editor::remove_pre_input_hook (pre_input_hook_fcn f)
   {
     if (instance_ok ())
       {
-        pre_input_hook_set_iterator p = pre_input_hook_set.find (f);
+        auto p = pre_input_hook_set.find (f);
 
         if (p != pre_input_hook_set.end ())
           pre_input_hook_set.erase (p);
 
         if (pre_input_hook_set.empty ())
           instance->restore_pre_input_hook ();
       }
   }
@@ -1533,17 +1530,17 @@ namespace octave
 
   void
   command_editor::remove_event_hook (event_hook_fcn f)
   {
     octave_autolock guard (event_hook_lock);
 
     if (instance_ok ())
       {
-        event_hook_set_iterator p = event_hook_set.find (f);
+        auto p = event_hook_set.find (f);
 
         if (p != event_hook_set.end ())
           event_hook_set.erase (p);
 
         if (event_hook_set.empty ())
           instance->restore_event_hook ();
       }
   }
diff --git a/liboctave/util/cmd-edit.h b/liboctave/util/cmd-edit.h
--- a/liboctave/util/cmd-edit.h
+++ b/liboctave/util/cmd-edit.h
@@ -208,25 +208,16 @@ namespace octave
     static int event_handler (void);
 
     static std::set<startup_hook_fcn> startup_hook_set;
 
     static std::set<pre_input_hook_fcn> pre_input_hook_set;
 
     static std::set<event_hook_fcn> event_hook_set;
 
-    typedef std::set<startup_hook_fcn>::iterator startup_hook_set_iterator;
-    typedef std::set<startup_hook_fcn>::const_iterator startup_hook_set_const_iterator;
-
-    typedef std::set<pre_input_hook_fcn>::iterator pre_input_hook_set_iterator;
-    typedef std::set<pre_input_hook_fcn>::const_iterator pre_input_hook_set_const_iterator;
-
-    typedef std::set<event_hook_fcn>::iterator event_hook_set_iterator;
-    typedef std::set<event_hook_fcn>::const_iterator event_hook_set_const_iterator;
-
     // The real thing.
     static command_editor *instance;
 
     static void cleanup_instance (void) { delete instance; instance = 0; }
 
   protected:
 
     // To use something other than the GNU readline library, derive a new
diff --git a/liboctave/util/oct-shlib.cc b/liboctave/util/oct-shlib.cc
--- a/liboctave/util/oct-shlib.cc
+++ b/liboctave/util/oct-shlib.cc
@@ -111,44 +111,44 @@ namespace octave
       retval = new_instance (f);
 
     return retval;
   }
 
   void
   dynamic_library::dynlib_rep::add_fcn_name (const std::string& name)
   {
-    fcn_names_iterator p = fcn_names.find (name);
+    auto p = fcn_names.find (name);
 
     if (p == fcn_names.end ())
       fcn_names[name] = 1;
     else
       ++(p->second);
   }
 
   bool
   dynamic_library::dynlib_rep::remove_fcn_name (const std::string& fcn_name)
   {
     bool retval = false;
 
-    fcn_names_iterator p = fcn_names.find (fcn_name);
+    auto p = fcn_names.find (fcn_name);
 
     if (p != fcn_names.end () && --(p->second) == 0)
       {
         fcn_names.erase (fcn_name);
         retval = true;
       }
 
     return retval;
   }
 
   void
   dynamic_library::dynlib_rep::do_close_hook (dynamic_library::close_hook cl_hook)
   {
-    for (fcn_names_iterator p = fcn_names.begin (); p != fcn_names.end (); p++)
+    for (auto p = fcn_names.begin (); p != fcn_names.end (); p++)
       cl_hook (p->first);
 
     fcn_names.clear ();
   }
 
   std::map<std::string, dynamic_library::dynlib_rep *> dynamic_library::dynlib_rep::instances;
 
   dynamic_library::dynlib_rep dynamic_library::nil_rep;
diff --git a/liboctave/util/singleton-cleanup.cc b/liboctave/util/singleton-cleanup.cc
--- a/liboctave/util/singleton-cleanup.cc
+++ b/liboctave/util/singleton-cleanup.cc
@@ -26,20 +26,19 @@ along with Octave; see the file COPYING.
 
 #include <lo-error.h>
 #include <singleton-cleanup.h>
 
 singleton_cleanup_list *singleton_cleanup_list::instance = 0;
 
 singleton_cleanup_list::~singleton_cleanup_list (void)
 {
-  for (std::set<fptr>::iterator p = fcn_list.begin ();
-       p != fcn_list.end (); p++)
+  for (auto fcnptr : fcn_list)
     {
-      fptr fcn = *p;
+      fptr fcn = *fcnptr;
 
       fcn ();
     }
 }
 
 bool
 singleton_cleanup_list::instance_ok (void)
 {
