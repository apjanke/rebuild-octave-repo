# HG changeset patch
# User jwe
# Date 1097512312 0
#      Mon Oct 11 16:31:52 2004 +0000
# Node ID 50140aa23b32f1e4a338f785725cdf746ed8fe09
# Parent  a0da258f64e6faeb2f261e6465369e35735ac5a7
[project @ 2004-10-11 16:31:51 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,15 @@
+2004-10-11  David Bateman <dbateman@free.fr>
+
+	* oct-fftw.cc (class octave_fftw_planner): Add inplace[2] to
+	flag whether transform in- or out-of-place.
+	(octave_fftw_planner::octave_fftw_planner): Initialize it.
+	(octave_fftw_planner::create_plan): Use it.
+
 2004-09-24  John W. Eaton  <jwe@octave.org>
 
 	* Array.cc (assign2, assignN): If index is empty, allow RHS to be
 	any empty matrix, not just [].
 
 2004-09-23  John W. Eaton  <jwe@octave.org>
 
 	* mx-ops: Include scalar zero value in type definitions.
diff --git a/liboctave/oct-fftw.cc b/liboctave/oct-fftw.cc
--- a/liboctave/oct-fftw.cc
+++ b/liboctave/oct-fftw.cc
@@ -84,17 +84,17 @@ private:
 
   // howmany
   int h[2];
 
   // dims
   dim_vector n[2];
 
   bool simd_align[2];
-
+  bool inplace[2];
 
   // Plan for fft of real values
   fftw_plan rplan;
 
   // dist
   int rd;
 
   // stride
@@ -114,23 +114,24 @@ private:
 
 octave_fftw_planner::octave_fftw_planner (void)
 {
   plan_flags = FFTW_ESTIMATE;
 
   plan[0] = plan[1] = 0;
   d[0] = d[1] = s[0] = s[1] = r[0] = r[1] = h[0] = h[1] = 0;
   simd_align[0] = simd_align[1] = false;
+  inplace[0] = inplace[1] = false;
   n[0] = n[1] = dim_vector ();
 
   rplan = 0;
   rd = rs = rr = rh = 0;
   rsimd_align = false;
   rn = dim_vector ();
-
+  
   // If we have a system wide wisdom file, import it.
   fftw_import_system_wisdom ();
 }
 
 #define CHECK_SIMD_ALIGNMENT(x) \
   ((reinterpret_cast<ptrdiff_t> (x)) & 0xF == 0)
 
 fftw_plan
@@ -138,23 +139,25 @@ octave_fftw_planner::create_plan (int di
 				  const dim_vector dims, int howmany,
 				  int stride, int dist, 
 				  const Complex *in, Complex *out)
 {
   int which = (dir == FFTW_FORWARD) ? 0 : 1;
   fftw_plan *cur_plan_p = &plan[which];
   bool create_new_plan = false;
   bool ioalign = CHECK_SIMD_ALIGNMENT (in) && CHECK_SIMD_ALIGNMENT (out);
+  bool ioinplace = (in == out);
 
   // Don't create a new plan if we have a non SIMD plan already but
   // can do SIMD.  This prevents endlessly recreating plans if we
   // change the alignment.
 
   if (plan[which] == 0 || d[which] != dist || s[which] != stride
-      || r[which] != rank || h[which] != howmany
+      || r[which] != rank || h[which] != howmany 
+      || ioinplace != inplace[which]
       || ((ioalign != simd_align[which]) ? !ioalign : false))
     create_new_plan = true;
   else
     {
       // We still might not have the same shape of array.
 
       for (int i = 0; i < rank; i++)
 	if (dims(i) != n[which](i))
@@ -166,16 +169,17 @@ octave_fftw_planner::create_plan (int di
 
   if (create_new_plan)
     {
       d[which] = dist;
       s[which] = stride;
       r[which] = rank;
       h[which] = howmany;
       simd_align[which] = ioalign;
+      inplace[which] = ioinplace;
       n[which] = dims;
 
       if (ioalign)
 	plan_flags &= ~FFTW_UNALIGNED;
       else
 	plan_flags |= FFTW_UNALIGNED;
 
       if (*cur_plan_p)
