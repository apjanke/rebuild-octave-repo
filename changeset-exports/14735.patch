# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1338932942 14400
#      Tue Jun 05 17:49:02 2012 -0400
# Node ID 295bd3efc065dd6774bb4c349710a20ff3f06834
# Parent  4b8bfb4edf92604099c48bcfc2f8e64e830bbc1f
fix configure test for bit functions

* m4/acinclude.m4 (OCTAVE_CXX_BITWISE_OP_TEMPLATES): Use int in test,
not double.

diff --git a/m4/acinclude.m4 b/m4/acinclude.m4
--- a/m4/acinclude.m4
+++ b/m4/acinclude.m4
@@ -108,17 +108,21 @@ dnl
 dnl See if the C++ library has the bit_and, bit_or and bit_xor
 dnl templates defined.
 dnl
 AC_DEFUN([OCTAVE_CXX_BITWISE_OP_TEMPLATES],
 [AC_CACHE_CHECK([whether bit_and, bit_or and bit_xor are defined in the c++ library],
 octave_cv_cxx_bitwise_op_templates,
 [AC_LANG_PUSH(C++)
 AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <functional>]],
-[[double x = 0.0, y = 1.0; double z1 = bit_and<double> (x, y); double z2 = bit_or<double> (x, y); double z1 = bit_xor<double> (x, y);]])],
+[[int x = 0;
+int y = 1;
+int z1 = std::bit_and<int>() (x, y);
+int z2 = std::bit_or<int>() (x, y);
+int z3 = std::bit_xor<int>() (x, y);]])],
 octave_cv_cxx_bitwise_op_templates=yes, octave_cv_cxx_bitwise_op_templates=no)])
 if test $octave_cv_cxx_bitwise_op_templates = yes; then
 AC_DEFINE(HAVE_CXX_BITWISE_OP_TEMPLATES,1,[Define if C++ library has templated bitwise operators])
 fi
 AC_LANG_POP(C++)
 ])
 
 dnl
