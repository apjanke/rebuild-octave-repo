# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1224085959 14400
#      Wed Oct 15 11:52:39 2008 -0400
# Node ID f8a885ccd5b47ed6a8f8ef08a22b8e9e257dbbf1
# Parent  8a5fbd656f554acfaa1ff5ea4894589dba26dc61
allow multiple args for inferiorto and superiorto

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2008-10-15  David Bateman  <dbateman@free.fr>
+
+	* ov-class.c (Fsuperiorto, Finferiorto): Allow more than one class
+	to be defined at a time.
+
 2008-10-12  David Bateman  <dbateman@free.fr>
 
 	* pt-colon.cc (octave_value tree_colon_expression::make_range 
 	(const octave_value&, const octave_value&, const octave_value&)):
 	Treating class overloading of colon operator.
 	(octave_value tree_colon_expression::rvalue (void)): Ditto.
 
 2008-10-10  John W. Eaton  <jwe@octave.org>
diff --git a/src/ov-class.cc b/src/ov-class.cc
--- a/src/ov-class.cc
+++ b/src/ov-class.cc
@@ -1337,101 +1337,114 @@ is_built_in_class (const std::string& cn
       built_in_class_names.insert ("uint64");
     }
 
   return built_in_class_names.find (cn) != built_in_class_names.end ();
 }
 
 DEFUN (superiorto, args, ,
   "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} {} superiorto (@var{class_name})\n\
+@deftypefn {Built-in Function} {} superiorto (@var{class_name}, @dots{})\n\
 When called from a class constructor, mark the object currently\n\
 constructed as having a higher precedence than @var{class_name}.\n\
+More that one such class can be specified in a single call.\n\
 This function may only be called from a class constructor.\n\
 @end deftypefn")
 {
   octave_value retval;
 
   octave_function *fcn = octave_call_stack::caller ();
 
   if (fcn && fcn->is_class_constructor ())
     {
-      if (args.length () == 1)
+      for (int i = 0; i < args.length(); i++)
 	{
-	  std::string class_name = args(0).string_value ();
+	  std::string class_name = args(i).string_value ();
 
 	  if (! error_state)
 	    {
 	      if (! is_built_in_class (class_name))
 		{
 		  std::string this_class_name = fcn->name ();
 
 		  if (! symbol_table::set_class_relationship (this_class_name,
 							      class_name))
-		    error ("superiorto: precedence already set for %s and %s",
-			   this_class_name.c_str (), class_name.c_str ());
+		    {
+		      error ("superiorto: precedence already set for %s and %s",
+			     this_class_name.c_str (), class_name.c_str ());
+		      break;
+		    }
 		}
 	      else
 		{
 		  // User defined classes always have higher precedence
 		  // than built-in classes.
 		}
 	    }
 	  else
-	    error ("superiorto: expecting argument to be class name");
+	    {
+	      error ("superiorto: expecting argument to be class name");
+	      break;
+	    }
 	}
-      else
-	print_usage ();
     }
   else
     error ("superiorto: invalid call from outside class constructor");
 
   return retval;
 }
 
 DEFUN (inferiorto, args, ,
   "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} {} inferiorto (@var{class_name})\n\
+@deftypefn {Built-in Function} {} inferiorto (@var{class_name}, @dots{})\n\
 When called from a class constructor, mark the object currently\n\
 constructed as having a lower precedence than @var{class_name}.\n\
+More that one such class can be specified in a single call.\n\
 This function may only be called from a class constructor.\n\
 @end deftypefn")
 {
   octave_value retval;
 
   octave_function *fcn = octave_call_stack::caller ();
 
   if (fcn && fcn->is_class_constructor ())
     {
-      if (args.length () == 1)
+      for (int i = 0; i < args.length(); i++)
 	{
-	  std::string class_name = args(0).string_value ();
+	  std::string class_name = args(i).string_value ();
 
 	  if (! error_state)
 	    {
 	      if (! is_built_in_class (class_name))
 		{
 		  std::string this_class_name = fcn->name ();
 
 		  symbol_table::set_class_relationship (class_name,
 							this_class_name);
 
 		  if (! symbol_table::set_class_relationship (this_class_name,
 							      class_name))
-		    error ("inferiorto: precedence already set for %s and %s",
-			   this_class_name.c_str (), class_name.c_str ());
+		    {
+		      error ("inferiorto: precedence already set for %s and %s",
+			     this_class_name.c_str (), class_name.c_str ());
+		      break;
+		    }
 		}
 	      else
-		error ("inferiorto: cannot give user-defined class lower precedence than built-in class");
+		{
+		  error ("inferiorto: cannot give user-defined class lower precedence than built-in class");
+		  break;
+		}
 	    }
 	  else
-	    error ("inferiorto: expecting argument to be class name");
+	    {
+	      error ("inferiorto: expecting argument to be class name");
+	      break;
+	    }
 	}
-      else
-	print_usage ();
     }
   else
     error ("inferiorto: invalid call from outside class constructor");
 
   return retval;
 }
 
 /*
