# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1323033465 18000
#      Sun Dec 04 16:17:45 2011 -0500
# Node ID e1f76bfe0452a6a9f789ca1a209e5cfb4616cf66
# Parent  051a8f94b6f8419ecbf7efa22c3a06b766125c1c
apply singleton_cleanup to a few more classes

* ft-manager.cc (ft_manager::cleanup_instance): New function.
(ft_manager::instance_ok): Add instance to singleton_cleanup_list.

* graphics.h.in, graphics.cc (gh_mananger::create_instance,
gh_manager::cleanup_instance): New functions.
(gh_manager::instance_ok): Call create_instance.

* oct-errno.h (octave_errno::cleanup_instance): New function.
* oct-errno.cc.in (octave_errno::instance_ok): Add instance to
singleton_cleanup_list.

diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -31,28 +31,29 @@ along with Octave; see the file COPYING.
 
 #include <algorithm>
 #include <list>
 #include <map>
 #include <set>
 #include <string>
 #include <sstream>
 
+#include "cmd-edit.h"
 #include "file-ops.h"
 #include "file-stat.h"
-
-#include "cmd-edit.h"
+#include "oct-locbuf.h"
+#include "singleton-cleanup.h"
+
 #include "cutils.h"
 #include "defun.h"
 #include "display.h"
 #include "error.h"
 #include "graphics.h"
 #include "input.h"
 #include "ov.h"
-#include "oct-locbuf.h"
 #include "oct-obj.h"
 #include "oct-map.h"
 #include "ov-fcn-handle.h"
 #include "pager.h"
 #include "parse.h"
 #include "toplev.h"
 #include "txt-eng-ft.h"
 #include "unwind-prot.h"
@@ -7390,16 +7391,24 @@ gh_manager::gh_manager (void)
     callback_objects (), event_processing (0)
 {
   handle_map[0] = graphics_object (new root_figure ());
 
   // Make sure the default graphics toolkit is registered.
   graphics_toolkit::default_toolkit ();
 }
 
+void
+gh_manager::create_instance (void)
+{
+  instance = new gh_manager ();
+
+  singleton_cleanup_list::add (cleanup_instance);
+}
+
 graphics_handle
 gh_manager::do_make_graphics_handle (const std::string& go_name,
                                      const graphics_handle& p,
                                      bool integer_figure_handle,
                                      bool do_createfcn,
                                      bool do_notify_toolkit)
 {
   graphics_handle h = get_handle (integer_figure_handle);
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -5165,33 +5165,37 @@ private:
 class OCTINTERP_API gh_manager
 {
 protected:
 
   gh_manager (void);
 
 public:
 
+  static void create_instance (void);
+
   static bool instance_ok (void)
   {
     bool retval = true;
 
     if (! instance)
-      instance = new gh_manager ();
+      create_instance ();
 
     if (! instance)
       {
         ::error ("unable to create gh_manager!");
 
         retval = false;
       }
 
     return retval;
   }
 
+  static void cleanup_instance (void) { delete instance; instance = 0; }
+
   static graphics_handle get_handle (bool integer_figure_handle)
   {
     return instance_ok ()
       ? instance->do_get_handle (integer_figure_handle) : graphics_handle ();
   }
 
   static void free (const graphics_handle& h)
   {
diff --git a/src/oct-errno.cc.in b/src/oct-errno.cc.in
--- a/src/oct-errno.cc.in
+++ b/src/oct-errno.cc.in
@@ -22,16 +22,18 @@ along with Octave; see the file COPYING.
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cerrno>
 
+#include "singleton-cleanup.h"
+
 #include "oct-errno.h"
 #include "oct-map.h"
 #include "error.h"
 
 octave_errno *octave_errno::instance = 0;
 
 octave_errno::octave_errno (void)
 {
@@ -287,17 +289,22 @@ octave_errno::octave_errno (void)
 }
 
 bool
 octave_errno::instance_ok (void)
 {
   bool retval = true;
 
   if (! instance)
-    instance = new octave_errno ();
+    {
+      instance = new octave_errno ();
+
+      if (instance)
+        singleton_cleanup_list::add (cleanup_instance);
+    }
 
   if (! instance)
     {
       ::error ("unable to create errno object!");
 
       retval = false;
     }
 
diff --git a/src/oct-errno.h b/src/oct-errno.h
--- a/src/oct-errno.h
+++ b/src/oct-errno.h
@@ -38,16 +38,18 @@ protected:
   octave_errno (void);
 
 public:
 
   ~octave_errno (void) { }
 
   static bool instance_ok (void);
 
+  static void cleanup_instance (void) { delete instance; instance = 0; }
+
   static int lookup (const std::string& name);
 
   static octave_scalar_map list (void);
 
   static int get (void) { return errno; }
 
   static int set (int val)
   {
diff --git a/src/txt-eng-ft.cc b/src/txt-eng-ft.cc
--- a/src/txt-eng-ft.cc
+++ b/src/txt-eng-ft.cc
@@ -27,16 +27,18 @@ along with Octave; see the file COPYING.
 #if HAVE_FREETYPE
 
 #if HAVE_FONTCONFIG
 #include <fontconfig/fontconfig.h>
 #endif
 
 #include <iostream>
 
+#include "singleton-cleanup.h"
+
 #include "error.h"
 #include "pr-output.h"
 #include "txt-eng-ft.h"
 
 // FIXME -- maybe issue at most one warning per glyph/font/size/weight
 // combination.
 
 static void
@@ -67,28 +69,35 @@ class
 ft_manager
 {
 public:
   static bool instance_ok (void)
     {
       bool retval = true;
 
       if (! instance)
-        instance = new ft_manager ();
+        {
+          instance = new ft_manager ();
+
+          if (instance)
+            singleton_cleanup_list::add (cleanup_instance);
+        }
 
       if (! instance)
         {
           ::error ("unable to create ft_manager!");
 
           retval = false;
         }
 
       return retval;
     }
 
+  static void cleanup_instance (void) { delete instance; instance = 0; }
+
   static FT_Face get_font (const std::string& name, const std::string& weight,
                            const std::string& angle, double size)
     { return (instance_ok ()
               ? instance->do_get_font (name, weight, angle, size)
               : 0); }
 
 private:
 
