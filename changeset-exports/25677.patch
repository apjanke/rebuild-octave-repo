# HG changeset patch
# User Markus Mützel <markus.muetzel@gmx.de>
# Date 1532627548 -7200
#      Thu Jul 26 19:52:28 2018 +0200
# Node ID 5401dfadd2f6368e5432b5abef1516c29181ed76
# Parent  a6af9578c18a8e0fa996b8fe5bf46c63e3a2e684
Improve error message if iconv is not available (bug #54384).

* strfns.cc (__native2unicode__, __unicode2native__): More specific error
message if u8_conv_from_encoding fails with ENOSYS.

* native2unicode.m, unicode2native.m: Run BISTs conditionally on HAVE_ICONV.

diff --git a/libinterp/corefcn/strfns.cc b/libinterp/corefcn/strfns.cc
--- a/libinterp/corefcn/strfns.cc
+++ b/libinterp/corefcn/strfns.cc
@@ -763,18 +763,24 @@ Convert byte stream @var{native_bytes} t
   size_t length;
   uint8_t *utf8_str = nullptr;
 
   octave::unwind_protect frame;
 
   utf8_str = octave_u8_conv_from_encoding (codepage, src, srclen, &length);
 
   if (! utf8_str)
-    error ("native2unicode: converting from codepage '%s' to UTF-8: %s",
-           codepage, std::strerror (errno));
+    {
+      if (errno == ENOSYS)
+        error ("native2unicode: iconv() is not supported. Installing GNU "
+               "libiconv and then re-compiling Octave could fix this.");
+      else
+        error ("native2unicode: converting from codepage '%s' to UTF-8: %s",
+               codepage, std::strerror (errno));
+    }
 
   frame.add_fcn (::free, static_cast<void *> (utf8_str));
 
   octave_idx_type len = length;
 
   charNDArray retval (dim_vector (1, len));
 
   for (octave_idx_type i = 0; i < len; i++)
@@ -809,18 +815,24 @@ Convert UTF-8 string @var{utf8_str} to b
   size_t length;
   char *native_bytes = nullptr;
 
   octave::unwind_protect frame;
 
   native_bytes = octave_u8_conv_to_encoding (codepage, src, srclen, &length);
 
   if (! native_bytes)
-    error ("native2unicode: converting from UTF-8 to codepage '%s': %s",
-           codepage, std::strerror (errno));
+    {
+      if (errno == ENOSYS)
+        error ("unicode2native: iconv() is not supported. Installing GNU "
+               "libiconv and then re-compiling Octave could fix this.");
+      else
+        error ("unicode2native: converting from UTF-8 to codepage '%s': %s",
+                codepage, std::strerror (errno));
+    }
 
   frame.add_fcn (::free, static_cast<void *> (native_bytes));
 
   octave_idx_type len = length;
 
   uint8NDArray retval (dim_vector (1, len));
 
   for (octave_idx_type i = 0; i < len; i++)
diff --git a/scripts/strings/native2unicode.m b/scripts/strings/native2unicode.m
--- a/scripts/strings/native2unicode.m
+++ b/scripts/strings/native2unicode.m
@@ -68,24 +68,28 @@ function utf8_str = native2unicode (nati
   if (iscolumn (native_bytes))
     utf8_str = utf8_str';
   endif
 
 endfunction
 
 
 ## "ЄЅІЇЈЉЊ"
-%!assert <54384> (double (native2unicode (164:170, 'ISO-8859-5')),
-%!        [208 132 208 133 208 134 208 135 208 136 208 137 208 138]);
+%!testif HAVE_ICONV
+%! assert (double (native2unicode (164:170, 'ISO-8859-5')),
+%!         [208 132 208 133 208 134 208 135 208 136 208 137 208 138]);
 ## ["ЄЅІ" 0 "ЇЈЉЊ"]
-%!assert <54384> (double (native2unicode ([164:166 0 167:170], 'ISO-8859-5')),
-%!        [208 132 208 133 208 134 0 208 135 208 136 208 137 208 138]);
+%!testif HAVE_ICONV
+%! assert (double (native2unicode ([164:166 0 167:170], 'ISO-8859-5')),
+%!         [208 132 208 133 208 134 0 208 135 208 136 208 137 208 138]);
 
 %!assert (native2unicode ("foobar"), "foobar");
 %!assert <54384> (double (native2unicode ([0 0 120.3 0 0 122.6 0 0])),
 %!        [0 0 120 0 0 123 0 0]);
 
 %!error <Invalid call> native2unicode ()
 %!error <Invalid call> native2unicode (1, 'ISO-8859-1', 'test')
 %!error <NATIVE_BYTES must be a numeric vector> native2unicode ([1 2; 3 4])
 %!error <NATIVE_BYTES must be a numeric vector> native2unicode ({1 2 3 4})
 %!error <CODEPAGE must be a string> native2unicode (164:170, 123)
-%!error <converting from codepage 'foo' to UTF-8> native2unicode (234, 'foo')
+%!testif HAVE_ICONV
+%! fail ("native2unicode (234, 'foo')",
+%!       "converting from codepage 'foo' to UTF-8");
diff --git a/scripts/strings/unicode2native.m b/scripts/strings/unicode2native.m
--- a/scripts/strings/unicode2native.m
+++ b/scripts/strings/unicode2native.m
@@ -54,17 +54,22 @@ function native_bytes = unicode2native (
 
   if (iscolumn (utf8_str))
     native_bytes = native_bytes';
   endif
 
 endfunction
 
 
-%!assert <54384> (unicode2native ("ЄЅІЇЈЉЊ", "ISO-8859-5"), uint8 (164:170));
-%!assert <54384> (unicode2native (["ЄЅІ" 0 "ЇЈЉЊ"], "ISO-8859-5"), uint8 ([164:166 0 167:170]));
+%!testif HAVE_ICONV
+%! assert (unicode2native ("ЄЅІЇЈЉЊ", "ISO-8859-5"), uint8 (164:170));
+%!testif HAVE_ICONV
+%! assert (unicode2native (["ЄЅІ" 0 "ЇЈЉЊ"], "ISO-8859-5"),
+%!         uint8 ([164:166 0 167:170]));
 
 %!error <Invalid call> unicode2native ()
 %!error <Invalid call> unicode2native ('a', 'ISO-8859-1', 'test')
 %!error <UTF8_STR must be a character vector> unicode2native (['ab'; 'cd'])
 %!error <UTF8_STR must be a character vector> unicode2native ({1 2 3 4})
 %!error <CODEPAGE must be a string> unicode2native ('ЄЅІЇЈЉЊ', 123)
-%!error <converting from UTF-8 to codepage 'foo'> unicode2native ('a', 'foo')
+%!testif HAVE_ICONV
+%! fail ("unicode2native ('a', 'foo')",
+%!       "converting from UTF-8 to codepage 'foo'");
