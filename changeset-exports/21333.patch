# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1456330125 18000
#      Wed Feb 24 11:08:45 2016 -0500
# Node ID c4690d9ff56685d4d8b262492291d483ee148b2a
# Parent  db574711df785997cd2352f69249606cb5a9ec60
avoid warnings about overloading virtual functions from a base class

* pt-id.h (tree_black_hole::dup): Fix decl.
* pt.h (tree::set_breakpoint): Fix decl.
* audiodevinfo.cc (audioplayer::print, audiorecorder::print):
Fix decl.

* gl2ps-print.cc, ov-base-mat.h, ov-base-sparse.h, pt-array-list.h:
Import virtual functions from base class that are overloaded in the
derived class.

diff --git a/libinterp/corefcn/gl2ps-print.cc b/libinterp/corefcn/gl2ps-print.cc
--- a/libinterp/corefcn/gl2ps-print.cc
+++ b/libinterp/corefcn/gl2ps-print.cc
@@ -51,16 +51,23 @@ public:
 
   gl2ps_renderer (FILE *_fp, const std::string& _term)
     : opengl_renderer () , fp (_fp), term (_term), fontsize (),
       fontname (), buffer_overflow (false)
   { }
 
   ~gl2ps_renderer (void) { }
 
+  // FIXME: should we import the functions from the base class and
+  // overload them here, or should we use a different name so we don't
+  // have to do this?  Without the using declaration or a name change,
+  // the base class functions will be hidden.  That may be OK, but it
+  // can also cause some confusion.
+  using opengl_renderer::draw;
+
   void draw (const graphics_object& go, const std::string& print_cmd);
 
 protected:
 
   Matrix render_text (const std::string& txt,
                       double x, double y, double z,
                       int halign, int valign, double rotation = 0.0);
 
diff --git a/libinterp/dldfcn/audiodevinfo.cc b/libinterp/dldfcn/audiodevinfo.cc
--- a/libinterp/dldfcn/audiodevinfo.cc
+++ b/libinterp/dldfcn/audiodevinfo.cc
@@ -455,17 +455,17 @@ class audioplayer : public octave_base_v
 {
 public:
   audioplayer (void);
   ~audioplayer (void);
 
   // Overloaded base functions
   double player_value (void) const { return 0; }
   virtual double scalar_value (bool = false) const { return 0; }
-  void print (std::ostream& os, bool pr_as_read_syntax = false) const;
+  void print (std::ostream& os, bool pr_as_read_syntax = false);
   void print_raw (std::ostream& os, bool pr_as_read_syntax) const;
 
   // Properties
   bool is_constant (void) const { return true; }
   bool is_defined (void) const { return true; }
   bool print_as_scalar (void) const { return true; }
 
   void init (void);
@@ -827,17 +827,17 @@ audioplayer::~audioplayer (void)
     {
       warning ("Octave:audio-interrupt",
                "interrupting playing audioplayer");
       stop ();
     }
 }
 
 void
-audioplayer::print (std::ostream& os, bool pr_as_read_syntax) const
+audioplayer::print (std::ostream& os, bool pr_as_read_syntax)
 {
   print_raw (os, pr_as_read_syntax);
   newline (os);
 }
 
 void
 audioplayer::print_raw (std::ostream& os, bool) const
 {
@@ -1214,17 +1214,17 @@ class audiorecorder : public octave_base
 {
 public:
   audiorecorder (void);
   ~audiorecorder (void);
 
   // Overloaded base functions
   double player_value (void) const { return 0; }
   virtual double scalar_value (bool = false) const { return 0; }
-  void print (std::ostream& os, bool pr_as_read_syntax = false) const;
+  void print (std::ostream& os, bool pr_as_read_syntax = false);
   void print_raw (std::ostream& os, bool pr_as_read_syntax) const;
 
   // Properties
   bool is_constant (void) const { return true; }
   bool is_defined (void) const { return true; }
   bool print_as_scalar (void) const { return true; }
 
   void init (void);
@@ -1462,17 +1462,17 @@ audiorecorder::~audiorecorder (void)
     {
       warning ("Octave:audio-interrupt",
                "interrupting recording audiorecorder");
       stop ();
     }
 }
 
 void
-audiorecorder::print (std::ostream& os, bool pr_as_read_syntax) const
+audiorecorder::print (std::ostream& os, bool pr_as_read_syntax)
 {
   print_raw (os, pr_as_read_syntax);
   newline (os);
 }
 
 void
 audiorecorder::print_raw (std::ostream& os, bool) const
 {
diff --git a/libinterp/octave-value/ov-base-mat.h b/libinterp/octave-value/ov-base-mat.h
--- a/libinterp/octave-value/ov-base-mat.h
+++ b/libinterp/octave-value/ov-base-mat.h
@@ -89,16 +89,23 @@ public:
                          const octave_value& rhs);
 
   octave_value do_index_op (const octave_value_list& idx,
                             bool resize_ok = false);
 
   octave_value_list do_multi_index_op (int, const octave_value_list& idx)
   { return do_index_op (idx); }
 
+  // FIXME: should we import the functions from the base class and
+  // overload them here, or should we use a different name so we don't
+  // have to do this?  Without the using declaration or a name change,
+  // the base class functions will be hidden.  That may be OK, but it
+  // can also cause some confusion.
+  using octave_base_value::assign;
+
   void assign (const octave_value_list& idx, const MT& rhs);
 
   void assign (const octave_value_list& idx, typename MT::element_type rhs);
 
   void delete_elements (const octave_value_list& idx);
 
   dim_vector dims (void) const { return matrix.dims (); }
 
diff --git a/libinterp/octave-value/ov-base-sparse.h b/libinterp/octave-value/ov-base-sparse.h
--- a/libinterp/octave-value/ov-base-sparse.h
+++ b/libinterp/octave-value/ov-base-sparse.h
@@ -92,16 +92,23 @@ public:
   octave_value_list subsref (const std::string& type,
                              const std::list<octave_value_list>& idx, int)
   { return subsref (type, idx); }
 
   octave_value subsasgn (const std::string& type,
                          const std::list<octave_value_list>& idx,
                          const octave_value& rhs);
 
+  // FIXME: should we import the functions from the base class and
+  // overload them here, or should we use a different name so we don't
+  // have to do this?  Without the using declaration or a name change,
+  // the base class functions will be hidden.  That may be OK, but it
+  // can also cause some confusion.
+  using octave_base_value::assign;
+
   void assign (const octave_value_list& idx, const T& rhs);
 
   void delete_elements (const octave_value_list& idx);
 
   dim_vector dims (void) const { return matrix.dims (); }
 
   octave_value do_index_op (const octave_value_list& idx,
                             bool resize_ok = false);
diff --git a/libinterp/parse-tree/pt-array-list.h b/libinterp/parse-tree/pt-array-list.h
--- a/libinterp/parse-tree/pt-array-list.h
+++ b/libinterp/parse-tree/pt-array-list.h
@@ -49,16 +49,23 @@ public:
   }
 
   ~tree_array_list (void);
 
   bool all_elements_are_constant (void) const;
 
   bool has_magic_end (void) const;
 
+  // FIXME: should we import the functions from the base class and
+  // overload them here, or should we use a different name so we don't
+  // have to do this?  Without the using declaration or a name change,
+  // the base class functions will be hidden.  That may be OK, but it
+  // can also cause some confusion.
+  using tree_expression::copy_base;
+
   void copy_base (const tree_array_list& array_list);
 
   void copy_base (const tree_array_list& array_list,
                   symbol_table::scope_id scope,
                   symbol_table::context_id context);
 
   tree_expression *dup (symbol_table::scope_id scope,
                         symbol_table::context_id context) const;
diff --git a/libinterp/parse-tree/pt-id.h b/libinterp/parse-tree/pt-id.h
--- a/libinterp/parse-tree/pt-id.h
+++ b/libinterp/parse-tree/pt-id.h
@@ -153,18 +153,21 @@ public:
     : tree_identifier (l, c) { }
 
   std::string name (void) const { return "~"; }
 
   bool is_variable (void) const { return false; }
 
   bool is_black_hole (void) { return true; }
 
-  tree_black_hole *dup (void) const
-  { return new tree_black_hole; }
+  tree_black_hole *dup (symbol_table::scope_id,
+                        symbol_table::context_id) const
+  {
+    return new tree_black_hole;
+  }
 
   octave_lvalue lvalue (void)
   {
     return octave_lvalue (); // black hole lvalue
   }
 };
 
 #endif
diff --git a/libinterp/parse-tree/pt.h b/libinterp/parse-tree/pt.h
--- a/libinterp/parse-tree/pt.h
+++ b/libinterp/parse-tree/pt.h
@@ -55,17 +55,17 @@ public:
   void column (int c) { column_num = c; }
 
   void set_location (int l, int c)
   {
     line_num = l;
     column_num = c;
   }
 
-  virtual void set_breakpoint (std::string condition)
+  virtual void set_breakpoint (const std::string& condition)
     { if (bp)
         *bp = condition;
       else
         bp = new std::string(condition);
     }
 
   virtual void delete_breakpoint (void) { if (bp) delete bp; bp = NULL; }
 
