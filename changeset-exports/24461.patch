# HG changeset patch
# User Rik <rik@octave.org>
# Date 1514259423 28800
#      Mon Dec 25 19:37:03 2017 -0800
# Node ID 0a034d34a68618bd0b283f0f3d0aed45be798740
# Parent  892f7f096ffb24ddf061d206c328f76af37605af
Modify BIST tests to pass when string_fill_char is not ' '.

* str2double.cc, strfns.cc, cstrcat.m, deblank.m, ostrsplit.m, strcat.m,
strjust.m, strtrim.m, io.tst: Harden BIST tests to pass when string_fill_char
is not the default value of a space.

diff --git a/libinterp/corefcn/str2double.cc b/libinterp/corefcn/str2double.cc
--- a/libinterp/corefcn/str2double.cc
+++ b/libinterp/corefcn/str2double.cc
@@ -384,17 +384,17 @@ risk of using @code{eval} on unknown dat
 %!assert (str2double (char ("1", "2 3", "4i")), [1; NaN; 4i])
 %!assert (str2double ("1,222.5"), 1222.5)
 %!assert (str2double ("i"), i)
 %!assert (str2double ("2j"), 2i)
 %!assert (str2double ("2 + j"), 2+j)
 %!assert (str2double ("i*2 + 3"), 3+2i)
 %!assert (str2double (".5*i + 3.5"), 3.5+0.5i)
 %!assert (str2double ("1e-3 + i*.25"), 1e-3 + 0.25i)
-%!assert (str2double (["2 + j";"1.25e-3";"-05"]), [2+i; 1.25e-3; -5])
+%!assert (str2double (char ("2 + j","1.25e-3","-05")), [2+i; 1.25e-3; -5])
 %!assert (str2double ({"2 + j","1.25e-3","-05"}), [2+i, 1.25e-3, -5])
 %!assert (str2double (1), NaN)
 %!assert (str2double ("1 2 3 4"), NaN)
 %!assert (str2double ("Hello World"), NaN)
 %!assert (str2double ("NaN"), NaN)
 %!assert (str2double ("NA"), NA)
 %!assert (str2double ("Inf"), Inf)
 %!assert (str2double ("iNF"), Inf)
diff --git a/libinterp/corefcn/strfns.cc b/libinterp/corefcn/strfns.cc
--- a/libinterp/corefcn/strfns.cc
+++ b/libinterp/corefcn/strfns.cc
@@ -153,17 +153,17 @@ char ([97, 98, 99], "", @{"98", "99", 10
 %!assert (char (100), "d")
 %!assert (char (100,100), ["d";"d"])
 %!assert (char ({100,100}), ["d";"d"])
 %!assert (char ([100,100]), ["dd"])
 %!assert (char ({100,{100}}), ["d";"d"])
 %!assert (char (100, [], 100), ["d";" ";"d"])
 %!assert (char ({100, [], 100}), ["d";" ";"d"])
 %!assert (char ({100,{100, {""}}}), ["d";"d";" "])
-%!assert (char (["a";"be"], {"c", 100}), ["a";"be";"c";"d"])
+%!assert (char (["a ";"be"], {"c", 100}), ["a ";"be";"c ";"d "])
 %!assert (char ("a", "bb", "ccc"), ["a  "; "bb "; "ccc"])
 %!assert (char ([65, 83, 67, 73, 73]), "ASCII")
 
 %!test
 %! x = char ("foo", "bar", "foobar");
 %! assert (x(1,:), "foo   ");
 %! assert (x(2,:), "bar   ");
 %! assert (x(3,:), "foobar");
@@ -272,17 +272,17 @@ strvcat ([97, 98, 99], "", @{"98", "99",
 %!assert (strvcat (100) == "d")
 %!assert (strvcat (100,100), ["d";"d"])
 %!assert (strvcat ({100,100}), ["d";"d"])
 %!assert (strvcat ([100,100]), ["dd"])
 %!assert (strvcat ({100,{100}}), ["d";"d"])
 %!assert (strvcat (100, [], 100), ["d";"d"])
 %!assert (strvcat ({100, [], 100}), ["d";"d"])
 %!assert (strvcat ({100,{100, {""}}}), ["d";"d"])
-%!assert (strvcat (["a";"be"], {"c", 100}), ["a";"be";"c";"d"])
+%!assert (strvcat (["a ";"be"], {"c", 100}), ["a ";"be";"c ";"d "])
 %!assert (strvcat ("a", "bb", "ccc"), ["a  "; "bb "; "ccc"])
 %!assert (strvcat (), "")
 */
 
 DEFUN (ischar, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} ischar (@var{x})
 Return true if @var{x} is a character array.
@@ -889,21 +889,21 @@ whos ans
 }
 
 /*
 %!test
 %! input  = {"abc", "def", "ghijkl", "mnop", "qrs", "tuv"};
 %! result = "abc     mnop\ndef     qrs\nghijkl  tuv\n";
 %! assert (list_in_columns (input, 20), result);
 %!test
-%! input  = ["abc"; "def"; "ghijkl"; "mnop"; "qrs"; "tuv"];
+%! input  = char ("abc", "def", "ghijkl", "mnop", "qrs", "tuv");
 %! result = "abc     mnop  \ndef     qrs   \nghijkl  tuv   \n";
 %! assert (list_in_columns (input, 20), result);
 %!test
-%! input  = ["abc"; "def"; "ghijkl"; "mnop"; "qrs"; "tuv"];
+%! input  = char ("abc", "def", "ghijkl", "mnop", "qrs", "tuv");
 %! result = "  abc     mnop  \n  def     qrs   \n  ghijkl  tuv   \n";
 %! assert (list_in_columns (input, 20, "  "), result);
 
 %!error list_in_columns ()
 %!error list_in_columns (["abc", "def"], 20, 2)
 %!error list_in_columns (["abc", "def"], 20, "  ", 3)
 %!error <list_in_columns: WIDTH must be an integer> list_in_columns (["abc", "def"], "a")
 */
diff --git a/scripts/strings/cstrcat.m b/scripts/strings/cstrcat.m
--- a/scripts/strings/cstrcat.m
+++ b/scripts/strings/cstrcat.m
@@ -60,14 +60,14 @@ endfunction
 
 ## Test the dimensionality
 ## 1d
 %!assert (cstrcat ("ab ", "ab "), "ab ab ")
 ## 2d
 %!assert (cstrcat (["ab ";"cde"], ["ab ";"cde"]), ["ab ab ";"cdecde"])
 
 %!assert (cstrcat ("foo", "bar"), "foobar")
-%!assert (cstrcat (["a"; "bb"], ["foo"; "bar"]), ["a foo"; "bbbar"])
+%!assert (cstrcat (["a "; "bb"], ["foo"; "bar"]), ["a foo"; "bbbar"])
 
 %!assert (cstrcat (), "")
 
 ## Test input validation
 %!error cstrcat (1, 2)
diff --git a/scripts/strings/deblank.m b/scripts/strings/deblank.m
--- a/scripts/strings/deblank.m
+++ b/scripts/strings/deblank.m
@@ -81,17 +81,17 @@ function s = deblank (s)
     error ("deblank: S argument must be a string or cellstring");
   endif
 
 endfunction
 
 
 %!assert (deblank (" f o o \0"), " f o o")
 %!assert (deblank (" \t f o o \t \0"), " \t f o o")
-%!assert (deblank ([" abc   "; "   def   "]), [" abc  " ; "   def"])
+%!assert (deblank (char (" abc   ", "   def   ")), [" abc  " ; "   def"])
 %!assert (deblank (["   "; "   "]), "")
 %!assert (deblank ('   '), '')
 %!assert (deblank ("   "), "")
 %!assert (deblank (""), "")
 %!assert (deblank ([]), [])
 %!assert (deblank ({}), {})
 %!assert (deblank ({[]}), {[]})
 %!assert (deblank ({[], []}), {[], []})
diff --git a/scripts/strings/ostrsplit.m b/scripts/strings/ostrsplit.m
--- a/scripts/strings/ostrsplit.m
+++ b/scripts/strings/ostrsplit.m
@@ -101,19 +101,20 @@ function cstr = ostrsplit (s, sep, strip
   endif
 
 endfunction
 
 
 %!assert (ostrsplit ("road to hell", " "), {"road", "to", "hell"})
 %!assert (ostrsplit ("road to^hell", " ^"), {"road", "to", "hell"})
 %!assert (ostrsplit ("road   to--hell", " -", true), {"road", "to", "hell"})
-%!assert (ostrsplit (["a,bc";",de"], ","), {"a", "bc", char(ones(1,0)), "de "})
-%!assert (ostrsplit (["a,bc";",de"], ",", true), {"a", "bc", "de "})
-%!assert (ostrsplit (["a,bc";",de"], ", ", true), {"a", "bc", "de"})
+%!assert (ostrsplit (char ("a,bc", ",de"), ","),
+%!        {"a", "bc", char(ones(1,0)), "de "})
+%!assert (ostrsplit (char ("a,bc", ",de"), ",", true), {"a", "bc", "de "})
+%!assert (ostrsplit (char ("a,bc", ",de"), ", ", true), {"a", "bc", "de"})
 
 ## Test input validation
 %!error ostrsplit ()
 %!error ostrsplit ("abc")
 %!error ostrsplit ("abc", "b", true, 4)
 %!error <S and SEP must be string values> ostrsplit (123, "b")
 %!error <S and SEP must be string values> ostrsplit ("abc", 1)
 %!error <STRIP_EMPTY must be a scalar value> ostrsplit ("abc", "def", ones (3,3))
diff --git a/scripts/strings/strcat.m b/scripts/strings/strcat.m
--- a/scripts/strings/strcat.m
+++ b/scripts/strings/strcat.m
@@ -133,17 +133,17 @@ endfunction
 %!assert (strcat ({"ab "}, {"ab "}), {"ab ab "})
 %!assert (strcat ("", "ab"), "ab")
 %!assert (strcat ("", {"ab"}, {""}), {"ab"})
 ## 2d
 %!assert (strcat (["ab ";"cde"], ["ab ";"cde"]), ["abab  ";"cdecde"])
 
 ## test for deblanking implied trailing spaces of character input
 %!assert (strcat ("foo", "bar"), "foobar")
-%!assert (strcat (["a"; "bb"], ["foo"; "bar"]), ["afoo "; "bbbar"])
+%!assert (strcat (["a "; "bb"], ["foo"; "bar"]), ["afoo "; "bbbar"])
 
 ## test for mixing character and cell inputs
 %!assert (strcat ("a", {"bc", "de"}, "f"), {"abcf", "adef"})
 
 ## test for scalar strings with vector strings
 %!assert (strcat (["a"; "b"], "c"), ["ac"; "bc"])
 
 ## test with cells with strings of differing lengths
diff --git a/scripts/strings/strjust.m b/scripts/strings/strjust.m
--- a/scripts/strings/strjust.m
+++ b/scripts/strings/strjust.m
@@ -92,21 +92,21 @@ function y = strjust (s, pos = "right")
 
   ## Create a blank matrix and position the nonblank characters.
   y = repmat (" ", nr, nc);
   y(sub2ind ([nr, nc], idx, jdx)) = s(nonbl);
 
 endfunction
 
 
-%!assert (strjust (["a"; "ab"; "abc"; "abcd"]),
+%!assert (strjust (char ("a", "ab", "abc", "abcd")),
 %!        ["   a";"  ab"; " abc"; "abcd"])
-%!assert (strjust ([" a"; "  ab"; "abc"; "abcd"], "left"),
+%!assert (strjust (char (" a", "  ab", "abc", "abcd"), "left"),
 %!        ["a   "; "ab  "; "abc "; "abcd"])
-%!assert (strjust (["a"; "ab"; "abc"; "abcd"], "CENTER"),
-%!        [" a  "; " ab"; "abc "; "abcd"])
+%!assert (strjust (char ("a", "ab", "abc", "abcd"), "CENTER"),
+%!        [" a  "; " ab "; "abc "; "abcd"])
 %!assert (strjust (["";""]), "")
 
 ## Test input validation
 %!error <Invalid call to strjust> strjust ()
 %!error <Invalid call to strjust> strjust (["a";"ab"], "center", 1)
 %!error <S must be a string> strjust (ones (3,3))
 %!error <S must be a string> strjust (char (ones (3,3,3)))
diff --git a/scripts/strings/strtrim.m b/scripts/strings/strtrim.m
--- a/scripts/strings/strtrim.m
+++ b/scripts/strings/strtrim.m
@@ -75,16 +75,16 @@ function s = strtrim (s)
   endif
 
 endfunction
 
 
 %!assert (strtrim ("    abc  "), "abc")
 %!assert (strtrim ("  "), "")
 %!assert (strtrim ("abc"), "abc")
-%!assert (strtrim ([" abc   "; "   def   "]), ["abc  "; "  def"])
+%!assert (strtrim (char (" abc   ", "   def   ")), ["abc  "; "  def"])
 %!assert (strtrim ({" abc   "; "   def   "}), {"abc"; "def"})
 %!assert (strtrim ({" abc   ", {"   def   "}}), {"abc", {"def"}})
 
 %!error <Invalid call to strtrim> strtrim ()
 %!error <Invalid call to strtrim> strtrim ("abc", "def")
 %!error <argument must be a string> strtrim (1)
 %!error <argument must be a string> strtrim ({[]})
diff --git a/test/io.tst b/test/io.tst
--- a/test/io.tst
+++ b/test/io.tst
@@ -471,38 +471,38 @@
 %!assert (ischar (tempname ()))
 
 %!error <DIR must be a string> tempname (1)
 %!error <PREFIX must be a string> tempname ("foo", 1)
 
 %!error <Invalid call to tempname> tempname (1, 2, 3)
 
 %!test
-%! type_list = ["char"; "char*1"; "integer*1"; "int8";
+%! type_list = {"char"; "char*1"; "integer*1"; "int8";
 %! "schar"; "signed char"; "uchar"; "unsigned char";
 %! "short"; "ushort"; "unsigned short"; "int";
 %! "uint"; "unsigned int"; "long"; "ulong"; "unsigned long";
 %! "float"; "float32"; "real*4"; "double"; "float64";
-%! "real*8"; "int16"; "integer*2"; "int32"; "integer*4"];
+%! "real*8"; "int16"; "integer*2"; "int32"; "integer*4"};
 %!
 %! n = rows (type_list);
 %! nm = tempname ();
 %! id = fopen (nm, "wb");
 %! if (id > 0)
 %!   for i = 1:n
-%!     fwrite (id, i, deblank (type_list(i,:)));
+%!     fwrite (id, i, type_list{i});
 %!   endfor
 %!
 %!   fclose (id);
 %!
 %!   id = fopen (nm, "rb");
 %!   if (id > 0)
 %!     x = zeros (1, n);
 %!     for i = 1:n
-%!       x(i) = fread (id, [1, 1], deblank (type_list(i,:)));
+%!       x(i) = fread (id, [1, 1], type_list{i});
 %!     endfor
 %!
 %!     if (x == 1:n)
 %!       __printf_assert__ ("ok\n");
 %!     endif
 %!   endif
 %! endif
 %!
