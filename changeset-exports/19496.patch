# HG changeset patch
# User Vytautas Janƒçauskas <unaudio@gmail.com>
# Date 1379627176 -10800
#      Fri Sep 20 00:46:16 2013 +0300
# Node ID a9c67ed90fc0b64f604a85d4db1b3c77b91e310d
# Parent  da6173d4e384c29ac88f974d811a459b325fd972
fix audioplayer docstrings to work with new texinfo

* audioplayer.m, get.m, play.m, playblocking.m, set.m: fix docstrings using
stand alone deftypefnx tags

diff --git a/scripts/audio/@audioplayer/audioplayer.m b/scripts/audio/@audioplayer/audioplayer.m
--- a/scripts/audio/@audioplayer/audioplayer.m
+++ b/scripts/audio/@audioplayer/audioplayer.m
@@ -1,25 +1,33 @@
 ## -*- texinfo -*-
 ## @deftypefn{Function File} player = audioplayer (@var{Y}, @var{Fs})
 ## Create an audioplayer object that will play back data @var{Y} at sample rate @var{Fs}.
-## @deftypefnx{Function File} player = audioplayer (@var{Y}, @var{Fs}, @var{nBytes})
+## @end deftypefn
+## @deftypefn{Function File} player = audioplayer (@var{Y}, @var{Fs}, @var{nBytes})
 ## Create an audioplayer object that will play back data @var{Y} at sample rate @var{Fs} and bit depth @var{nBytes}.
-## @deftypefnx{Function File} player = audioplayer (@var{Y}, @var{Fs}, @var{nBytes}, @var{ID})
+## @end deftypefn
+## @deftypefn{Function File} player = audioplayer (@var{Y}, @var{Fs}, @var{nBytes}, @var{ID})
 ## Create an audioplayer object that will play back data @var{Y} at sample rate @var{Fs}, bit depth @var{nBytes} and using a device with @var{ID} that you can get using the audiodevinfo function.
-## @deftypefnx{Function File} player = audioplayer (@var{function}, @var{Fs})
+## @end deftypefn
+## @deftypefn{Function File} player = audioplayer (@var{function}, @var{Fs})
 ## Argument @var{function} is a function handle, inline function or a string value of a function name that will get called to process audio. Audio will be played at @var{Fs} sampling rate.
-## @deftypefnx{Function File} player = audioplayer (@var{function}, @var{Fs}, @var{nBytes})
+## @end deftypefn
+## @deftypefn{Function File} player = audioplayer (@var{function}, @var{Fs}, @var{nBytes})
 ## Same as above but also allows you to specify the number of bytes per sample.
-## @deftypefnx{Function File} player = audioplayer (@var{function}, @var{Fs}, @var{nBytes}, @var{ID})
+## @end deftypefn
+## @deftypefn{Function File} player = audioplayer (@var{function}, @var{Fs}, @var{nBytes}, @var{ID})
 ## Same as above but also allows you to specify device ID that will be used.
-## @deftypefnx{Function File} player = audioplayer (@var{recorder})
+## @end deftypefn
+## @deftypefn{Function File} player = audioplayer (@var{recorder})
 ## Create an audioplayer object that will use data and other information such as sample rate from an audiorecorder object.
-## @deftypefnx{Function File} player = audioplayer (@var{recorder}, @var{ID})
+## @end deftypefn
+## @deftypefn{Function File} player = audioplayer (@var{recorder}, @var{ID})
 ## Create an audioplayer object that will use data and other information from an audiorecorder object and that will use a device with the given @var{ID}.
+## @end deftypefn
 ##
 ## The signal @var{Y} can be a vector or a two dimensional array.
 ##
 ## The following example will create an audioplayer object that will play back one second of white noise at 44100 sample rate using 8 bits per sample.
 ##
 ## @example
 ## @group
 ## @code{y = randn (2, 44100) - 0.5;}
@@ -47,17 +55,16 @@
 ## @code{  rphase = rphase + nr;}
 ## @code{endfunction}
 ## @code{player = audioplayer(@@callback_sine, 44100);}
 ## @code{play (player);}
 ## @code{# play for as long as you want}
 ## @code{stop (player);}
 ## @end group
 ## @end example
-## @end deftypefn
 
 function player = audioplayer (varargin)
   if (nargin < 1 || nargin > 4)
     print_usage ();
   endif
   if ((isa(varargin{1}, 'function_handle') || ischar(varargin{1})) && nargin < 2)
     print_usage ();
   endif
diff --git a/scripts/audio/@audioplayer/get.m b/scripts/audio/@audioplayer/get.m
--- a/scripts/audio/@audioplayer/get.m
+++ b/scripts/audio/@audioplayer/get.m
@@ -1,14 +1,16 @@
 ## -*- texinfo -*-
 ## @deftypefn{Function File} @var{Value} = get (@var{playerObj}, @var{Name})
 ## Returns the @var{Value} of the property identified by @var{Name}.
-## @deftypefnx{Function File} @var{Values} = get (@var{playerObj}, @{@var{Name1}, ... , @var{NameN}@})
+## @end deftypefn
+## @deftypefn{Function File} @var{Values} = get (@var{playerObj}, @{@var{Name1}, ... , @var{NameN}@})
 ## Returns the @var{Values} of the properties identified by @var{Name1} to @var{NameN}.
-## @deftypefnx{Function File} @var{Values} = get (@var{playerObj})
+## @end deftypefn
+## @deftypefn{Function File} @var{Values} = get (@var{playerObj})
 ## Returns a scalar structure with values of all properties of @var{playerObj}. 
 ## The field names correspond to property names.
 ## @end deftypefn
 
 function result = get (varargin)
   player = varargin{1};
   properties = __get_properties__ (player);
   if nargin == 1
diff --git a/scripts/audio/@audioplayer/play.m b/scripts/audio/@audioplayer/play.m
--- a/scripts/audio/@audioplayer/play.m
+++ b/scripts/audio/@audioplayer/play.m
@@ -1,14 +1,16 @@
 ## -*- texinfo -*-
 ## @deftypefn{Function File} play (@var{playerObj})
 ## Play back audio stored in an audioplayer object without blocking.
-## @deftypefnx{Function File} play  (@var{playerObj}, @var{start})
+## @end deftypefn
+## @deftypefn{Function File} play  (@var{playerObj}, @var{start})
 ## Play back audio stored in an audioplayer object starting at the time in seconds specified by @var{start}.
-## @deftypefnx{Function File} play (@var{playerObj}, [@var{start}, @var{end}])
+## @end deftypefn
+## @deftypefn{Function File} play (@var{playerObj}, [@var{start}, @var{end}])
 ## Play back audio stored in an audioplayer object starting at the time in seconds specified by @var{start} and ending at the time specified by @var{end}.
 ## @end deftypefn
 
 function play(varargin)
   if (nargin < 1 || nargin > 2)
     print_usage ();
   endif 
   __player_play__(struct(varargin{1}).player, varargin{2:end});
diff --git a/scripts/audio/@audioplayer/playblocking.m b/scripts/audio/@audioplayer/playblocking.m
--- a/scripts/audio/@audioplayer/playblocking.m
+++ b/scripts/audio/@audioplayer/playblocking.m
@@ -1,14 +1,16 @@
 ## -*- texinfo -*-
 ## @deftypefn{Function File} playblocking (@var{playerObj})
 ## Play back audio stored in the audioplayer object with blocking.
-## @deftypefnx{Function File} playblocking (@var{playerObj}, @var{start})
+## @end deftypefn
+## @deftypefn{Function File} playblocking (@var{playerObj}, @var{start})
 ## Play back audio stored in the audioplayer object starting at the time in seconds specified by @var{start}.
-## @deftypefnx{Function File} playblocking (@var{playerObj}, [@var{start}, @var{end}])
+## @end deftypefn
+## @deftypefn{Function File} playblocking (@var{playerObj}, [@var{start}, @var{end}])
 ## Play back audio stored in the audioplayer object starting at the time in seconds specified by @var{start} and ending at the time specified by @var{end}.
 ## @end deftypefn
 
 function playblocking(varargin)
   if (nargin < 1 || nargin > 2)
     print_usage ();
   endif 
   __player_playblocking__(struct(varargin{1}).player, varargin{2:end});
diff --git a/scripts/audio/@audioplayer/set.m b/scripts/audio/@audioplayer/set.m
--- a/scripts/audio/@audioplayer/set.m
+++ b/scripts/audio/@audioplayer/set.m
@@ -1,16 +1,19 @@
 ## -*- texinfo -*-
 ## @deftypefn{Function File} set (@var{playerObj}, @var{Name}, @var{Value})
 ## Set the value of property specified by @var{Name} to a given @var{Value}.
-## @deftypefnx{Function File} set (@var{playerObj}, @var{CellOfNames}, @var{CellOfValues})
+## @end deftypefn
+## @deftypefn{Function File} set (@var{playerObj}, @var{CellOfNames}, @var{CellOfValues})
 ## Given a cell array of property names and a cell array of values, set each property to a corresponding value.
-## @deftypefnx{Function File} set (@var{playerObj}, @var{StructOfProperties})
+## @end deftypefn
+## @deftypefn{Function File} set (@var{playerObj}, @var{StructOfProperties})
 ## Given a structure where fields are property names, set the value of those properties for an audioplayer object to corresponding values.
-## @deftypefnx{Function File} @var{settableProperties} = set (@var{playerObj})
+## @end deftypefn
+## @deftypefn{Function File} @var{settableProperties} = set (@var{playerObj})
 ## Returns a structure of settable properties.
 ## @end deftypefn
 
 function settable = set (varargin)
   if nargin < 1 || nargin > 3
     print_usage();
   endif
   player = struct (varargin{1}).player;
