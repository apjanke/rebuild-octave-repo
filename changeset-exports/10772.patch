# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1278570389 -7200
#      Thu Jul 08 08:26:29 2010 +0200
# Node ID 687586b99f9d19c1a79af20ad79a32e44b1b6232
# Parent  82d9efde7e96f6b68c78a6bd71447563c29f5eee
improve struct2cell

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2010-07-08  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov-cell.cc (Fstruct2cell): Use octave_map. Optimize.
+
 2010-07-07  Rik <octave@nomad.inbox5.com>
 
 	* pr-output.cc (calc_scale_exp): Avoid use of % operator on negative
         operands for portability between C++ compilers.
         (engineering_exponent): Avoid use of % operator.  Keep calculation of
         exponent within pr_engineering_float class.  (encapsulation).
         (num_digits): Rename from calc_digits.  Return true number of digits =
         1 + calc_digits.
diff --git a/src/ov-cell.cc b/src/ov-cell.cc
--- a/src/ov-cell.cc
+++ b/src/ov-cell.cc
@@ -1397,57 +1397,48 @@ cell array will have a dimension vector 
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin == 1)
     {
-      Octave_map m = args(0).map_value ();
+      const octave_map m = args(0).map_value ();
 
       if (! error_state)
         {
-          dim_vector m_dv = m.dims ();
+          const dim_vector m_dv = m.dims ();
 
-          string_vector keys = m.keys ();
-
-          octave_idx_type num_fields = keys.length ();
+          octave_idx_type num_fields = m.nfields ();
 
           // The resulting dim_vector should have dimensions:
           // [numel(fields) size(struct)]
           // except if the struct is a column vector.
 
           dim_vector result_dv;
           if (m_dv (m_dv.length () - 1) == 1)
               result_dv.resize (m_dv.length ());
           else
               result_dv.resize (m_dv.length () + 1); // Add 1 for the fields.
 
           result_dv(0) = num_fields;
 
           for (int i = 1; i < result_dv.length (); i++)
             result_dv(i) = m_dv(i-1);
 
-          Cell c (result_dv);
+          NoAlias<Cell> c (result_dv);
 
           octave_idx_type n_elts = m.numel ();
 
-          for (octave_idx_type j = 0; j < num_fields; j++)
-            {
-              octave_idx_type k = j;
-
-              const Cell vals = m.contents (keys(j));
-
-              for (octave_idx_type i = 0; i < n_elts; i++)
-                {
-                  c(k) = vals(i);
-                  k += num_fields;
-                }
-            }
+          // Fill c in one sweep. Note that thanks to octave_map structure,
+          // we don't need a key lookup at all.
+          for (octave_idx_type j = 0; j < n_elts; j++)
+            for (octave_idx_type i = 0; i < num_fields; i++)
+              c(i,j) = m.contents(i)(j);
 
           retval = c;
         }
       else
         error ("struct2cell: expecting argument to be a cell array");
     }
   else
     print_usage ();
