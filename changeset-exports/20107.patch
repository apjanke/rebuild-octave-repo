# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1429560789 -7200
#      Mon Apr 20 22:13:09 2015 +0200
# Node ID f1f6d5eab46f5a58c42fa58c5b66b6b8a9b2420e
# Parent  8eb72c4ed457bb0c15faff9bc9aa29fa50253144
Draw a zoom-like box when creating an annotation interactively

* Canvas.h: new private state variable m_rectMode
* Canvas.cc (Canvas::canvasMousePressEvent): in text mode, initialize m_mouseAnchor, m_mouseCurrent, m_mouseAxes m_mouseMode = newMouseMode, m_rectMode = true for drawing the box; Remove call to anno_dlg.
* Canvas.cc (Canvas::canvasMouseMoveEvent): track mouse position as in zoom mode
* Canvas.cc (Canvas::canvasMouseReleaseEvent): use the anchor and current mouse coordoinates to define the position, and then call annot_dlg.
* annotation-dialog.ui: allow negative values for width and height

diff --git a/libgui/graphics/Canvas.cc b/libgui/graphics/Canvas.cc
--- a/libgui/graphics/Canvas.cc
+++ b/libgui/graphics/Canvas.cc
@@ -273,17 +273,17 @@ void
 Canvas::canvasPaintEvent (void)
 {
   if (! m_redrawBlocked)
     {
       gh_manager::auto_lock lock;
 
       draw (m_handle);
 
-      if (m_mouseMode == ZoomInMode && m_mouseAxes.ok ())
+      if ((m_mouseMode == ZoomInMode && m_mouseAxes.ok ()) || m_rectMode)
         drawZoomBox (m_mouseAnchor, m_mouseCurrent);
     }
 }
 
 static bool
 pan_enabled (const graphics_object figObj)
 {
   // Getting pan mode property:
@@ -374,17 +374,17 @@ Canvas::canvasMouseMoveEvent (QMouseEven
 
             // Update current mouse position
             m_mouseCurrent = event->pos ();
 
             // Force immediate redraw
             redraw (true);
           }
           break;
-
+        case TextMode:
         case ZoomInMode:
         case ZoomOutMode:
           m_mouseCurrent = event->pos ();
           redraw (true);
           break;
 
         case PanMode:
           {
@@ -566,42 +566,28 @@ Canvas::canvasMousePressEvent (QMouseEve
 
           if (event->button () == Qt::RightButton)
             ContextMenu::executeAt (currentObj.get_properties (),
                                     event->globalPos ());
           break;
 
         case TextMode:
           {
-            QWidget *w = qWidget ();
-
-            if (! w)
-              break;
-
-            Matrix bb = axesObj.get_properties ().get_boundingbox (false);
-            Matrix position (1, 4);
-
-            QPoint pos = event->pos ();
-
-            position(0) = pos.x () / bb(2);
-            position(1) = 1.0 - (pos.y () / bb(3));
-            position(2) = pos.x () / bb(2);
-            position(3) = 1.0 - (pos.y () / bb(3));
-
-            octave_value_list props = ovl("textbox", position);
-
-            annotation_dialog anno_dlg (w, props);
-            
-            if (anno_dlg.exec () == QDialog::Accepted)
+            if (event->modifiers () == Qt::NoModifier)
               {
-                props = anno_dlg.get_properties ();
-
-                octave_link::post_event (this, &Canvas::annotation_callback,
-                  props);
+                switch (event->buttons ())
+                  {
+                  case Qt::LeftButton:
+                    m_mouseAnchor = m_mouseCurrent = event->pos ();
+                    m_mouseAxes = axesObj.get_handle ();
+                    m_mouseMode = newMouseMode;
+                    m_rectMode = true;
+                  }
               }
+            redraw (false);
           }
           break;
 
         case PanMode:
         case RotateMode:
         case ZoomInMode:
         case ZoomOutMode:
           if (axesObj && axesObj.get_properties ().handlevisibility_is ("on"))
@@ -746,17 +732,48 @@ Canvas::canvasMouseReleaseEvent (QMouseE
         {
           graphics_object figObj (obj.get_ancestor ("figure"));
 
           updateCurrentPoint (figObj, obj, event);
           gh_manager::post_callback (figObj.get_handle (),
                                      "windowbuttonupfcn");
         }
     }
+  else if (m_mouseMode == TextMode)
+    {
+      gh_manager::auto_lock lock;
+      
+      graphics_object figObj = 
+        gh_manager::get_object (m_handle).get_ancestor ("figure");
+      if (figObj.valid_object ())
+        {          
+          QWidget *w = qWidget ();
+          if (w)
+            {
+              Matrix bb = figObj.get ("position").matrix_value ();
+              bb(0) = m_mouseAnchor.x () / bb(2);
+              bb(1) = 1.0 - (m_mouseAnchor.y () / bb(3));
+              bb(2) = (event->x () - m_mouseAnchor.x ()) / bb(2);
+              bb(3) = (m_mouseAnchor.y () - event->y ()) / bb(3);
 
+              octave_value_list props = ovl("textbox", bb);
+
+              annotation_dialog anno_dlg (w, props);
+            
+              if (anno_dlg.exec () == QDialog::Accepted)
+                {
+                  props = anno_dlg.get_properties ();
+
+                  octave_link::post_event (this, &Canvas::annotation_callback,
+                                           props);
+                }
+            }
+        }
+    }
+  m_rectMode = false;
   m_mouseAxes = graphics_handle ();
   m_mouseMode = NoMode;
 }
 
 void
 Canvas::canvasWheelEvent (QWheelEvent* event)
 {
   gh_manager::auto_lock lock;
diff --git a/libgui/graphics/Canvas.h b/libgui/graphics/Canvas.h
--- a/libgui/graphics/Canvas.h
+++ b/libgui/graphics/Canvas.h
@@ -79,17 +79,18 @@ protected:
                                           const QPoint& pt) = 0;
 
 protected:
   Canvas (const graphics_handle& handle)
     : m_handle (handle),
       m_redrawBlocked (false),
       m_mouseMode (NoMode),
       m_clickMode (false),
-      m_eventMask (0)
+      m_eventMask (0),
+      m_rectMode (false)
     { }
 
   void canvasToggleAxes (const graphics_handle& handle);
   void canvasToggleGrid (const graphics_handle& handle);
   void canvasAutoAxes (const graphics_handle& handle);
   void canvasPaintEvent (void);
   void canvasMouseDoubleClickEvent (QMouseEvent* event);
   void canvasMouseMoveEvent (QMouseEvent* event);
@@ -108,13 +109,14 @@ private:
   graphics_handle m_handle;
   bool m_redrawBlocked;
   MouseMode m_mouseMode;
   bool m_clickMode;              // True: ZoomIn, False: ZoomOut
   QPoint m_mouseAnchor;
   QPoint m_mouseCurrent;
   graphics_handle m_mouseAxes;
   int m_eventMask;
+  bool m_rectMode;
 };
 
 }; // namespace QtHandles
 
 #endif
diff --git a/libgui/graphics/annotation-dialog.ui b/libgui/graphics/annotation-dialog.ui
--- a/libgui/graphics/annotation-dialog.ui
+++ b/libgui/graphics/annotation-dialog.ui
@@ -4,18 +4,18 @@
  <widget class="QDialog" name="annotation_dialog">
   <property name="windowModality">
    <enum>Qt::WindowModal</enum>
   </property>
   <property name="geometry">
    <rect>
     <x>0</x>
     <y>0</y>
-    <width>450</width>
-    <height>368</height>
+    <width>621</width>
+    <height>401</height>
    </rect>
   </property>
   <property name="windowTitle">
    <string>Annotation</string>
   </property>
   <layout class="QVBoxLayout" name="verticalLayout">
    <item>
     <widget class="QGroupBox" name="groupBox">
@@ -620,50 +620,78 @@
          <string>X</string>
         </property>
         <property name="alignment">
          <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>
         </property>
        </widget>
       </item>
       <item row="0" column="1">
-       <widget class="QDoubleSpinBox" name="sb_x"/>
+       <widget class="QDoubleSpinBox" name="sb_x">
+        <property name="minimum">
+         <double>0.000000000000000</double>
+        </property>
+        <property name="singleStep">
+         <double>0.010000000000000</double>
+        </property>
+       </widget>
       </item>
       <item row="0" column="2">
        <widget class="QLabel" name="label_22">
         <property name="text">
          <string>Y</string>
         </property>
         <property name="alignment">
          <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>
         </property>
        </widget>
       </item>
       <item row="0" column="3">
-       <widget class="QDoubleSpinBox" name="sb_y"/>
+       <widget class="QDoubleSpinBox" name="sb_y">
+        <property name="minimum">
+         <double>0.000000000000000</double>
+        </property>
+        <property name="singleStep">
+         <double>0.010000000000000</double>
+        </property>
+       </widget>
       </item>
       <item row="0" column="4">
        <widget class="QLabel" name="label_23">
         <property name="text">
          <string>Width</string>
         </property>
        </widget>
       </item>
       <item row="0" column="5">
-       <widget class="QDoubleSpinBox" name="sb_width"/>
+       <widget class="QDoubleSpinBox" name="sb_width">
+        <property name="minimum">
+         <double>-99.989999999999995</double>
+        </property>
+        <property name="singleStep">
+         <double>0.010000000000000</double>
+        </property>
+       </widget>
       </item>
       <item row="0" column="6">
        <widget class="QLabel" name="label_24">
         <property name="text">
          <string>Height</string>
         </property>
        </widget>
       </item>
       <item row="0" column="7">
-       <widget class="QDoubleSpinBox" name="sb_height"/>
+       <widget class="QDoubleSpinBox" name="sb_height">
+        <property name="minimum">
+         <double>-99.000000000000000</double>
+        </property>
+        <property name="singleStep">
+         <double>0.010000000000000</double>
+        </property>
+       </widget>
       </item>
       <item row="1" column="0">
        <widget class="QLabel" name="label_18">
         <property name="text">
          <string>units</string>
         </property>
         <property name="alignment">
          <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>
