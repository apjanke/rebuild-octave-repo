# HG changeset patch
# User jwe
# Date 1079118782 0
#      Fri Mar 12 19:13:02 2004 +0000
# Node ID 81f78a2ff8a63dc86fa01060d59d07f58c0ba86f
# Parent  518e495e489fb04f73ffd977fb2e89eb4312323c
[project @ 2004-03-12 19:13:01 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2004-03-12  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* ov-cell.cc (octave_cell::save_hdf5): Handle empty cells.
+	(octave_cell::load_hdf5): Likewise.
+
 2004-03-11  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* ov-base-mat.cc (octave_base_matrix<MT>::subsasgn): If empty,
 	allow type conversion when indexing with "{" and ".".
 
 2004-03-10  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* pr-output.cc (init_format_state): Also set compact_format.
diff --git a/src/ov-bool-mat.cc b/src/ov-bool-mat.cc
--- a/src/ov-bool-mat.cc
+++ b/src/ov-bool-mat.cc
@@ -338,31 +338,31 @@ octave_bool_matrix::load_binary (std::is
   return true;
 }
 
 #if defined (HAVE_HDF5)
 bool
 octave_bool_matrix::save_hdf5 (hid_t loc_id, const char *name,
 			       bool /* save_as_floats */)
 {
-  dim_vector d = dims ();
-  int empty = save_hdf5_empty (loc_id, name, d);
-  if (empty != 0)
+  dim_vector dv = dims ();
+  int empty = save_hdf5_empty (loc_id, name, dv);
+  if (empty)
     return (empty > 0);
 
-  int rank = d.length ();
+  int rank = dv.length ();
   hid_t space_hid = -1, data_hid = -1;
   bool retval = true;
   boolNDArray m = bool_array_value ();
 
   OCTAVE_LOCAL_BUFFER (hsize_t, hdims, rank);
 
   // Octave uses column-major, while HDF5 uses row-major ordering
   for (int i = 0; i < rank; i++)
-    hdims[i] = d (rank-i-1);
+    hdims[i] = dv (rank-i-1);
 
   space_hid = H5Screate_simple (rank, hdims, 0);
   if (space_hid < 0) return false;
 
   data_hid = H5Dcreate (loc_id, name, H5T_NATIVE_HBOOL, space_hid, 
 			H5P_DEFAULT);
   if (data_hid < 0)
     {
@@ -377,31 +377,33 @@ octave_bool_matrix::save_hdf5 (hid_t loc
   for (int i = 0; i < nel; i++)
     htmp[i] = mtmp[i];
 
   retval = H5Dwrite (data_hid, H5T_NATIVE_HBOOL, H5S_ALL, H5S_ALL,
 		     H5P_DEFAULT, htmp) >= 0;
 
   H5Dclose (data_hid);
   H5Sclose (space_hid);
+
   return retval;
 }
 
 bool
 octave_bool_matrix::load_hdf5 (hid_t loc_id, const char *name,
 			       bool /* have_h5giterate_bug */)
 {
+  bool retval = false;
+
   dim_vector dv;
   int empty = load_hdf5_empty (loc_id, name, dv);
   if (empty > 0)
     matrix.resize(dv);
-  if (empty != 0)
-      return (empty > 0);
+  if (empty)
+    return (empty > 0);
 
-  bool retval = false;
   hid_t data_hid = H5Dopen (loc_id, name);
   hid_t space_id = H5Dget_space (data_hid);
 
   hsize_t rank = H5Sget_simple_extent_ndims (space_id);
   
   if (rank < 1)
     {
       H5Dclose (data_hid);
@@ -437,16 +439,17 @@ octave_bool_matrix::load_hdf5 (hid_t loc
       boolNDArray btmp (dv);
       for (int i = 0; i < nel; i++)
 	  btmp.elem (i) = htmp[i];
 
       matrix = btmp;
     }
 
   H5Dclose (data_hid);
+
   return retval;
 }
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/ov-bool.cc b/src/ov-bool.cc
--- a/src/ov-bool.cc
+++ b/src/ov-bool.cc
@@ -182,16 +182,17 @@ octave_bool::save_hdf5 (hid_t loc_id, co
     }
 
   double tmp = double_value ();
   retval = H5Dwrite (data_hid, H5T_NATIVE_DOUBLE, H5S_ALL, H5S_ALL,
 		     H5P_DEFAULT, &tmp) >= 0;
 
   H5Dclose (data_hid);
   H5Sclose (space_hid);
+
   return retval;
 }
 
 bool
 octave_bool::load_hdf5 (hid_t loc_id, const char *name,
 			bool /* have_h5giterate_bug */)
 {
   hid_t data_hid = H5Dopen (loc_id, name);
@@ -209,17 +210,19 @@ octave_bool::load_hdf5 (hid_t loc_id, co
   if (H5Dread (data_hid, H5T_NATIVE_DOUBLE, H5S_ALL, H5S_ALL, 
 	       H5P_DEFAULT, &dtmp) < 0)
     { 
       H5Dclose (data_hid);
       return false;
     }
 
   scalar = (dtmp != 0.);
+
   H5Dclose (data_hid);
+
   return true;
 }
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/ov-cell.cc b/src/ov-cell.cc
--- a/src/ov-cell.cc
+++ b/src/ov-cell.cc
@@ -687,16 +687,20 @@ octave_cell::load_binary (std::istream& 
 }
 
 #if defined (HAVE_HDF5)
 
 bool
 octave_cell::save_hdf5 (hid_t loc_id, const char *name, bool save_as_floats)
 {
   dim_vector dv = dims ();
+  int empty = save_hdf5_empty (loc_id, name, dv);
+  if (empty)
+    return (empty > 0);
+
   hsize_t rank = dv.length (); 
   hid_t space_hid = -1, data_hid = -1, size_hid = -1;
 
   data_hid = H5Gcreate (loc_id, name, 0);
 
   if (data_hid < 0)
     return false;
 
@@ -760,48 +764,55 @@ octave_cell::save_hdf5 (hid_t loc_id, co
   return true;
 }
 
 bool
 octave_cell::load_hdf5 (hid_t loc_id, const char *name,
 			bool have_h5giterate_bug)
 {
   bool retval = false;
+
+  dim_vector dv;
+  int empty = load_hdf5_empty (loc_id, name, dv);
+  if (empty > 0)
+    matrix.resize(dv);
+  if (empty)
+    return (empty > 0);
+
   hid_t group_id = H5Gopen (loc_id, name);
 
   if (group_id < 0)
     return false;
 
   hid_t data_hid = H5Dopen (group_id, "dims");
   hid_t space_hid = H5Dget_space (data_hid);
   hsize_t rank = H5Sget_simple_extent_ndims (space_hid);
   if (rank != 1) 
     {
-      H5Dclose(data_hid);
-      H5Gclose(group_id);
+      H5Dclose (data_hid);
+      H5Gclose (group_id);
       return false;
     }
 
   OCTAVE_LOCAL_BUFFER (hsize_t, hdims, rank);
   OCTAVE_LOCAL_BUFFER (hsize_t, maxdims, rank);
 
   H5Sget_simple_extent_dims (space_hid, hdims, maxdims);
 
   // Octave uses column-major, while HDF5 uses row-major ordering.
 
-  dim_vector dv;
   dv.resize (hdims[0]);
 
   OCTAVE_LOCAL_BUFFER (int, tmp, hdims[0]);
   
   if (H5Dread (data_hid, H5T_NATIVE_INT, H5S_ALL, H5S_ALL, 
 	       H5P_DEFAULT, tmp) < 0)
     {
-      H5Dclose(data_hid);
-      H5Gclose(group_id);
+      H5Dclose (data_hid);
+      H5Gclose (group_id);
       return false;
     }
 
   H5Dclose (data_hid);
   H5Gclose (group_id);
 
   for (hsize_t i = 0, j = hdims[0] - 1; i < hdims[0]; i++, j--)
     dv(j) = tmp[i];
diff --git a/src/ov-complex.cc b/src/ov-complex.cc
--- a/src/ov-complex.cc
+++ b/src/ov-complex.cc
@@ -240,17 +240,18 @@ bool
 octave_complex::save_hdf5 (hid_t loc_id, const char *name,
 			   bool /* save_as_floats */)
 {
   hsize_t dimens[3];
   hid_t space_hid = -1, type_hid = -1, data_hid = -1;
   bool retval = true;
 
   space_hid = H5Screate_simple (0, dimens, 0);
-  if (space_hid < 0) return false;
+  if (space_hid < 0)
+    return false;
 
   type_hid = hdf5_make_complex_type (H5T_NATIVE_DOUBLE);
   if (type_hid < 0) 
     {
       H5Sclose (space_hid);
       return false;
     }
 
@@ -264,59 +265,61 @@ octave_complex::save_hdf5 (hid_t loc_id,
 
   Complex tmp = complex_value ();
   retval = H5Dwrite (data_hid, type_hid, H5S_ALL, H5S_ALL, H5P_DEFAULT, 
 		     &tmp) >= 0;
 
   H5Dclose (data_hid);
   H5Tclose (type_hid);
   H5Sclose (space_hid);
+
   return retval;
 }
 
 bool
 octave_complex::load_hdf5 (hid_t loc_id, const char *name,
 			   bool /* have_h5giterate_bug */)
 {
   bool retval = false;
   hid_t data_hid = H5Dopen (loc_id, name);
   hid_t type_hid = H5Dget_type (data_hid);
 
   hid_t complex_type = hdf5_make_complex_type (H5T_NATIVE_DOUBLE);
 
   if (! hdf5_types_compatible (type_hid, complex_type))
     {
-      H5Tclose(complex_type);
+      H5Tclose (complex_type);
       H5Dclose (data_hid);
       return false;
     }
 
   hid_t space_id = H5Dget_space (data_hid);
   hsize_t rank = H5Sget_simple_extent_ndims (space_id);
 
   if (rank != 0) 
     {
-      H5Tclose(complex_type);
+      H5Tclose (complex_type);
       H5Sclose (space_id);
       H5Dclose (data_hid);
       return false;
     }
 
   // complex scalar:
   Complex ctmp;
   if (H5Dread (data_hid, complex_type, H5S_ALL, H5S_ALL, H5P_DEFAULT,
 	       &ctmp) >= 0)
     {
       retval = true;
       scalar = ctmp;
     }
 
-  H5Tclose(complex_type);
+  H5Tclose (complex_type);
   H5Sclose (space_id);
   H5Dclose (data_hid);
+
   return retval;
 }
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/ov-cx-mat.cc b/src/ov-cx-mat.cc
--- a/src/ov-cx-mat.cc
+++ b/src/ov-cx-mat.cc
@@ -440,31 +440,31 @@ octave_complex_matrix::load_binary (std:
   return true;
 }
 
 #if defined (HAVE_HDF5)
 bool
 octave_complex_matrix::save_hdf5 (hid_t loc_id, const char *name,
 				  bool save_as_floats)
 {
-  dim_vector d = dims ();
-  int empty = save_hdf5_empty (loc_id, name, d);
-  if (empty != 0)
+  dim_vector dv = dims ();
+  int empty = save_hdf5_empty (loc_id, name, dv);
+  if (empty)
     return (empty > 0);
 
-  int rank = d.length ();
+  int rank = dv.length ();
   hid_t space_hid = -1, data_hid = -1, type_hid = -1;
   bool retval = true;
   ComplexNDArray m = complex_array_value ();
 
   OCTAVE_LOCAL_BUFFER (hsize_t, hdims, rank);
 
   // Octave uses column-major, while HDF5 uses row-major ordering
   for (int i = 0; i < rank; i++)
-    hdims[i] = d (rank-i-1);
+    hdims[i] = dv (rank-i-1);
  
   space_hid = H5Screate_simple (rank, hdims, 0);
   if (space_hid < 0) return false;
 
   hid_t save_type_hid = H5T_NATIVE_DOUBLE;
 
   if (save_as_floats)
     {
@@ -516,50 +516,52 @@ octave_complex_matrix::save_hdf5 (hid_t 
 	  retval = false;
 	}
     }
 
   H5Tclose (complex_type_hid);
   H5Dclose (data_hid);
   H5Tclose (type_hid);
   H5Sclose (space_hid);
+
   return retval;
 }
 
 bool 
 octave_complex_matrix::load_hdf5 (hid_t loc_id, const char *name,
 				  bool /* have_h5giterate_bug */)
 {
+  bool retval = false;
+
   dim_vector dv;
   int empty = load_hdf5_empty (loc_id, name, dv);
   if (empty > 0)
     matrix.resize(dv);
-  if (empty != 0)
+  if (empty)
       return (empty > 0);
 
-  bool retval = false;
   hid_t data_hid = H5Dopen (loc_id, name);
   hid_t type_hid = H5Dget_type (data_hid);
 
   hid_t complex_type = hdf5_make_complex_type (H5T_NATIVE_DOUBLE);
 
   if (! hdf5_types_compatible (type_hid, complex_type))
     {
-      H5Tclose(complex_type);
+      H5Tclose (complex_type);
       H5Dclose (data_hid);
       return false;
     }
 
   hid_t space_id = H5Dget_space (data_hid);
 
   hsize_t rank = H5Sget_simple_extent_ndims (space_id);
   
   if (rank < 1)
     {
-      H5Tclose(complex_type);
+      H5Tclose (complex_type);
       H5Sclose (space_id);
       H5Dclose (data_hid);
       return false;
     }
 
   OCTAVE_LOCAL_BUFFER (hsize_t, hdims, rank);
   OCTAVE_LOCAL_BUFFER (hsize_t, maxdims, rank);
 
@@ -583,19 +585,20 @@ octave_complex_matrix::load_hdf5 (hid_t 
   Complex *reim = m.fortran_vec ();
   if (H5Dread (data_hid, complex_type, H5S_ALL, H5S_ALL, H5P_DEFAULT,
 	       reim) >= 0) 
     {
       retval = true;
       matrix = m;
     }
 
-  H5Tclose(complex_type);
+  H5Tclose (complex_type);
   H5Sclose (space_id);
   H5Dclose (data_hid);
+
   return retval;
 }
 #endif
 
 void
 octave_complex_matrix::print_raw (std::ostream& os,
 				  bool pr_as_read_syntax) const
 {
diff --git a/src/ov-list.cc b/src/ov-list.cc
--- a/src/ov-list.cc
+++ b/src/ov-list.cc
@@ -677,16 +677,17 @@ octave_list::save_hdf5 (hid_t loc_id, co
       sprintf (s, "_%d", i);
       bool retval2 = add_hdf5_data (data_hid, lst (i), s, "",
 				    false, save_as_floats);
       if (! retval2)
 	break;
     }
 
   H5Gclose (data_hid);
+
   return true;
 }
 
 bool
 octave_list::load_hdf5 (hid_t loc_id,  const char *name,
 			bool have_h5giterate_bug)
 {
   bool retval = false;
diff --git a/src/ov-range.cc b/src/ov-range.cc
--- a/src/ov-range.cc
+++ b/src/ov-range.cc
@@ -408,61 +408,63 @@ octave_range::save_hdf5 (hid_t loc_id, c
   range_vals[2] = r.inc ();
 
   retval = H5Dwrite (data_hid, type_hid, H5S_ALL, H5S_ALL, H5P_DEFAULT,
 		     range_vals) >= 0;
 
   H5Dclose (data_hid);
   H5Tclose (type_hid);
   H5Sclose (space_hid);
+
   return retval;
 }
 
 bool 
 octave_range::load_hdf5 (hid_t loc_id, const char *name,
 			 bool /* have_h5giterate_bug */)
 {
   bool retval = false;
+
   hid_t data_hid = H5Dopen (loc_id, name);
   hid_t type_hid = H5Dget_type (data_hid);
 
   hid_t range_type = hdf5_make_range_type (H5T_NATIVE_DOUBLE);
 
   if (! hdf5_types_compatible (type_hid, range_type))
     {
-      H5Tclose(range_type);
+      H5Tclose (range_type);
       H5Dclose (data_hid);
       return false;
     }
 
   hid_t space_hid = H5Dget_space (data_hid);
   hsize_t rank = H5Sget_simple_extent_ndims (space_hid);
 
   if (rank != 0)
     {
-      H5Tclose(range_type);
+      H5Tclose (range_type);
       H5Sclose (space_hid);
       H5Dclose (data_hid);
       return false;
     }
 
   double rangevals[3];
   if (H5Dread (data_hid, range_type, H5S_ALL, H5S_ALL, H5P_DEFAULT, 
 	       rangevals) >= 0)
     {
       retval = true;
       Range r (rangevals[0], rangevals[1], rangevals[2]);
       range = r;
     }
 
-  H5Tclose(range_type);
+  H5Tclose (range_type);
   H5Sclose (space_hid);
   H5Dclose (data_hid);
+
   return retval;
-
 }
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/ov-re-mat.cc b/src/ov-re-mat.cc
--- a/src/ov-re-mat.cc
+++ b/src/ov-re-mat.cc
@@ -503,31 +503,31 @@ octave_matrix::load_binary (std::istream
     }
   return true;
 }
 
 #if defined (HAVE_HDF5)
 bool
 octave_matrix::save_hdf5 (hid_t loc_id, const char *name, bool save_as_floats)
 {
-  dim_vector d = dims ();
-  int empty = save_hdf5_empty (loc_id, name, d);
-  if (empty != 0)
+  dim_vector dv = dims ();
+  int empty = save_hdf5_empty (loc_id, name, dv);
+  if (empty)
     return (empty > 0);
 
-  int rank = d.length ();
+  int rank = dv.length ();
   hid_t space_hid = -1, data_hid = -1;
   bool retval = true;
   NDArray m = array_value ();
 
   OCTAVE_LOCAL_BUFFER (hsize_t, hdims, rank);
 
   // Octave uses column-major, while HDF5 uses row-major ordering
   for (int i = 0; i < rank; i++)
-    hdims[i] = d (rank-i-1);
+    hdims[i] = dv (rank-i-1);
  
   space_hid = H5Screate_simple (rank, hdims, 0);
 
   if (space_hid < 0) return false;
 
   hid_t save_type_hid = H5T_NATIVE_DOUBLE;
 
   if (save_as_floats)
@@ -561,31 +561,33 @@ octave_matrix::save_hdf5 (hid_t loc_id, 
     }
 
   double *mtmp = m.fortran_vec ();
   retval = H5Dwrite (data_hid, H5T_NATIVE_DOUBLE, H5S_ALL, H5S_ALL,
 		     H5P_DEFAULT, mtmp) >= 0;
 
   H5Dclose (data_hid);
   H5Sclose (space_hid);
+
   return retval;
 }
 
 bool
 octave_matrix::load_hdf5 (hid_t loc_id, const char *name,
 			  bool /* have_h5giterate_bug */)
 {
+  bool retval = false;
+
   dim_vector dv;
   int empty = load_hdf5_empty (loc_id, name, dv);
   if (empty > 0)
     matrix.resize(dv);
-  if (empty != 0)
+  if (empty)
       return (empty > 0);
 
-  bool retval = false;
   hid_t data_hid = H5Dopen (loc_id, name);
   hid_t space_id = H5Dget_space (data_hid);
 
   hsize_t rank = H5Sget_simple_extent_ndims (space_id);
   
   if (rank < 1)
     {
       H5Sclose (space_id);
@@ -618,16 +620,17 @@ octave_matrix::load_hdf5 (hid_t loc_id, 
 	       H5P_DEFAULT, re) >= 0) 
     {
       retval = true;
       matrix = m;
     }
 
   H5Sclose (space_id);
   H5Dclose (data_hid);
+
   return retval;
 }
 #endif
 
 void
 octave_matrix::print_raw (std::ostream& os,
 			  bool pr_as_read_syntax) const
 {
diff --git a/src/ov-scalar.cc b/src/ov-scalar.cc
--- a/src/ov-scalar.cc
+++ b/src/ov-scalar.cc
@@ -228,16 +228,17 @@ octave_scalar::save_hdf5 (hid_t loc_id, 
     }
 
   double tmp = double_value ();
   retval = H5Dwrite (data_hid, H5T_NATIVE_DOUBLE, H5S_ALL, H5S_ALL,
 		     H5P_DEFAULT, &tmp) >= 0;
 
   H5Dclose (data_hid);
   H5Sclose (space_hid);
+
   return retval;
 }
 
 bool
 octave_scalar::load_hdf5 (hid_t loc_id, const char *name,
 			  bool /* have_h5giterate_bug */)
 {
   hid_t data_hid = H5Dopen (loc_id, name);
@@ -255,17 +256,19 @@ octave_scalar::load_hdf5 (hid_t loc_id, 
   if (H5Dread (data_hid, H5T_NATIVE_DOUBLE, H5S_ALL, H5S_ALL, 
 	       H5P_DEFAULT, &dtmp) < 0)
     { 
       H5Dclose (data_hid);
       return false;
     }
 
   scalar = dtmp;
+
   H5Dclose (data_hid);
+
   return true;
 }
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/ov-str-mat.cc b/src/ov-str-mat.cc
--- a/src/ov-str-mat.cc
+++ b/src/ov-str-mat.cc
@@ -491,77 +491,79 @@ octave_char_matrix_str::load_binary (std
   return true;
 }
 
 #if defined (HAVE_HDF5)
 bool
 octave_char_matrix_str::save_hdf5 (hid_t loc_id, const char *name,
 				   bool /* save_as_floats */)
 {
-  dim_vector d = dims ();
-  int empty = save_hdf5_empty (loc_id, name, d);
-  if (empty != 0)
+  dim_vector dv = dims ();
+  int empty = save_hdf5_empty (loc_id, name, dv);
+  if (empty)
     return (empty > 0);
 
-  int rank = d.length ();
+  int rank = dv.length ();
   hid_t space_hid = -1, data_hid = -1;
   bool retval = true;
   charNDArray m = char_array_value ();
 
   OCTAVE_LOCAL_BUFFER (hsize_t, hdims, rank);
 
   // Octave uses column-major, while HDF5 uses row-major ordering
   for (int i = 0; i < rank; i++)
-    hdims[i] = d (rank-i-1);
+    hdims[i] = dv (rank-i-1);
  
   space_hid = H5Screate_simple (rank, hdims, 0);
   if (space_hid < 0)
     return false;
 
   data_hid = H5Dcreate (loc_id, name, H5T_NATIVE_CHAR, space_hid, 
 			H5P_DEFAULT);
   if (data_hid < 0)
     {
       H5Sclose (space_hid);
       return false;
     }
 
-  OCTAVE_LOCAL_BUFFER (char, s, d.numel ());
+  OCTAVE_LOCAL_BUFFER (char, s, dv.numel ());
 
-  for (int i = 0; i < d.numel(); ++i)
+  for (int i = 0; i < dv.numel (); ++i)
     s[i] = m(i);
 
   retval = H5Dwrite (data_hid, H5T_NATIVE_CHAR, H5S_ALL, H5S_ALL, 
 		     H5P_DEFAULT, s) >= 0;
 
   H5Dclose (data_hid);
   H5Sclose (space_hid);
+
   return retval;
 }
 
 bool 
 octave_char_matrix_str::load_hdf5 (hid_t loc_id, const char *name,
 				   bool /* have_h5giterate_bug */)
 {
+  bool retval = false;
+
   dim_vector dv;
   int empty = load_hdf5_empty (loc_id, name, dv);
   if (empty > 0)
     matrix.resize(dv);
-  if (empty != 0)
-      return (empty > 0);
+  if (empty)
+    return (empty > 0);
 
   hid_t data_hid = H5Dopen (loc_id, name);
   hid_t space_hid = H5Dget_space (data_hid);
   hsize_t rank = H5Sget_simple_extent_ndims (space_hid);
   hid_t type_hid = H5Dget_type (data_hid);
   hid_t type_class_hid = H5Tget_class (type_hid);
 
   if (type_class_hid == H5T_INTEGER)
     {
-      bool retval = false;
       if (rank < 1)
 	{
 	  H5Tclose (type_hid);
 	  H5Sclose (space_hid);
 	  H5Dclose (data_hid);
 	  return false;
 	}
 
@@ -693,16 +695,18 @@ octave_char_matrix_str::load_hdf5 (hid_t
       else
 	{
 	  H5Tclose (type_hid);
 	  H5Sclose (space_hid);
 	  H5Dclose (data_hid);
 	  return false;
 	}
     }
+
+  return retval;
 }
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/ov-struct.cc b/src/ov-struct.cc
--- a/src/ov-struct.cc
+++ b/src/ov-struct.cc
@@ -1146,16 +1146,17 @@ octave_struct::save_hdf5 (hid_t loc_id, 
 
       if (! retval2)
 	break;
 
       i++;
     }
 
   H5Gclose (data_hid);
+
   return true;
 }
 
 bool 
 octave_struct::load_hdf5 (hid_t loc_id, const char *name,
 			  bool have_h5giterate_bug)
 {
   bool retval = false;
