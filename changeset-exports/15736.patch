# HG changeset patch
# User Rik <rik@octave.org>
# Date 1354819074 28800
#      Thu Dec 06 10:37:54 2012 -0800
# Node ID 6faa01ff29678f8a231d50f4a2ac17c3ddd4107f
# Parent  487ecfde7feb4015465105bb61319eae432593ce
build: Add --disable-java option to configure (bug #37838).

* configure.ac: Use AC_ARG_ENABLE macro to add --disable-java option.
Use AC_ARG_VAR to grab JAVA_HOME value from environment if it exists.
Set Automake Conditional AMCOND_HAVE_JAVA if Java Interface is being built.

* libinterp/dldfcn/__java__.cc: Include <config.h> and wrap file in
#ifdef HAVE_JAVA.

* scripts/Makefile.am: Use AMCOND_HAVE_JAVA to control building of Java
interface.

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -733,116 +733,16 @@ dnl   warn_llvm="JIT compiler disabled, 
 dnl   OCTAVE_CONFIGURE_WARNING([warn_llvm])
 fi
 
 AC_SUBST(LLVM_CPPFLAGS)
 AC_SUBST(LLVM_CXXFLAGS)
 AC_SUBST(LLVM_LDFLAGS)
 AC_SUBST(LLVM_LIBS)
 
-### Check for Java.
-
-warn_java=
-
-if test -z "$JAVA_HOME"; then
-  AC_CHECK_PROG(JAVA, java, java)
-  AC_CHECK_PROG(JAVAC, javac, javac)
-  AC_CHECK_PROG(JAR, jar, jar)
-else
-  AC_PATH_PROG(JAVA, java, [], [$JAVA_HOME/bin$PATH_SEPARATOR$PATH])
-  AC_PATH_PROG(JAVAC, javac, [], [$JAVA_HOME/bin$PATH_SEPARATOR$PATH])
-  AC_PATH_PROG(JAR, jar, [], [$JAVA_HOME/bin$PATH_SEPARATOR$PATH])
-fi
-HAVE_JAVA=no
-if test -n "$JAVAC" -a -n "$JAR"; then
-  AC_MSG_CHECKING([for Java version])
-  java_version=[`$JAVA -version 2>&1 | sed -n -e 's/^java version[^0-9"]*"\([^"]*\)"/\1/p'`]
-  AC_MSG_RESULT($java_version)
-  java_major=[`echo $java_version | sed -e 's/^\([0-9][0-9]*\)\.\([0-9][0-9]*\)\..*$/\1/'`]
-  java_minor=[`echo $java_version | sed -e 's/^\([0-9][0-9]*\)\.\([0-9][0-9]*\)\..*$/\2/'`]
-  if test $java_major -ge 1 -a $java_minor -ge 5; then
-    case "$canonical_host_type" in
-      *-msdosmsvc*)
-        HAVE_JAVA=yes
-        JAVA_LIBS=-ladvapi32
-      ;;
-      *)
-        if test -z "$JAVA_HOME"; then
-          # This is the location of Java on an OS X box. In this
-          # directory we can find the various versions of a
-          # JavaVMs. Check for the newest version set the JAVA_HOME
-          # variable.
-          if test -d "/System/Library/Frameworks/JavaVM.framework"; then
-            # Sneak the -framework flag into mkoctfile via LFLAGS
-            LFLAGS="$LFLAGS -framework JavaVM"
-            JAVA_TEMP="/System/Library/Frameworks/JavaVM.framework"
-            JAVA_HOME="${JAVA_TEMP}/Home"
-            JAVA_ARCH="${JAVA_TEMP}/Libraries/libjvm_compat.dylib"
-            JAVA_LIBS="-framework JavaVM"
-            # According to:
-            #   http://developer.apple.com/unix/crossplatform.html
-            # you need to explicitely set the include path
-            JAVA_CPPFLAGS="-I${JAVA_HOME}/include"
-            HAVE_JAVA=yes
-          # This is the Debian default path
-          elif test -d "/usr/lib/jvm/default-java"; then
-            JAVA_HOME=/usr/lib/jvm/default-java
-          # This is the path of java 6 on debian
-          elif test -d "/usr/lib/jvm/java-6-sun"; then
-            JAVA_HOME=//usr/lib/jvm/java-6-sun
-          else
-            JAVA_HOME=/usr/lib/jvm
-          fi
-        fi
-        JAVA_HOME=[`echo $JAVA_HOME | sed -e 's|/$||'`]
-        if test -z "$JAVA_ARCH"; then
-          if test -d "${JAVA_HOME}/jre/lib/i386"; then
-            JAVA_ARCH="i386";
-          elif test -d "${JAVA_HOME}/jre/lib/amd64"; then
-            JAVA_ARCH="amd64"
-          elif test -d "${JAVA_HOME}/jre/lib/mac"; then
-            JAVA_ARCH="mac"
-          elif test -d "${JAVA_HOME}/jre/lib/maci"; then
-            JAVA_ARCH="maci"
-          elif test -d "${JAVA_HOME}/jre/lib/solaris"; then
-            JAVA_ARCH="solaris"
-          elif test -d "${JAVA_HOME}/jre/lib/solarisv9"; then
-            JAVA_ARCH="solarisv9"
-          fi
-        fi
-        if test -n "$JAVA_ARCH"; then
-          HAVE_JAVA=yes
-          case "$canonical_host_type" in
-            *-mingw* | *-cygwin*)
-              JAVA_LIBS=-ladvapi32
-              JAVA_CPPFLAGS="-I${JAVA_HOME}/include -I${JAVA_HOME}/include/win32"
-            ;;
-            *)
-              JAVA_CPPFLAGS="-I${JAVA_HOME}/include -I${JAVA_HOME}/include/linux"
-            ;;
-          esac
-        fi
-      ;;
-    esac
-    if test "$HAVE_JAVA" = "yes"; then
-      AC_DEFINE(HAVE_JAVA, 1,
-        [Define to 1 if Java is available and is at least version 1.5])
-    fi
-  else
-    warn_java="Java 1.5 or later not found.  Octave will not be able to call Java methods."
-  fi
-fi
-
-AC_SUBST(JAVAC)
-AC_SUBST(JAR)
-AC_SUBST(JAVA_CPPFLAGS)
-AC_SUBST(JAVA_LIBS)
-AC_DEFINE_UNQUOTED([JAVA_HOME], ["$JAVA_HOME"], [Java home.])
-AC_DEFINE_UNQUOTED([JAVA_ARCH], ["$JAVA_ARCH"], [Java arch.])
-
 ### Check for HDF5 library.
 
 save_CPPFLAGS="$CPPFLAGS"
 save_LIBS="$LIBS"
 CPPFLAGS="$Z_CPPFLAGS $CPPFLAGS"
 LIBS="$Z_LDFLAGS $Z_LIBS $LIBS"
 OCTAVE_CHECK_LIB(hdf5, HDF5,
   [HDF5 library not found.  Octave will not be able to save or load HDF5 data files.],
@@ -2280,16 +2180,141 @@ if $try_strict_warning_flags; then
       WARN_CXXFLAGS="$WARN_CXXFLAGS $flag";
       AC_MSG_RESULT([adding $flag to WARN_CXXFLAGS])])
   done
 fi
 
 AC_SUBST(WARN_CFLAGS)
 AC_SUBST(WARN_CXXFLAGS)
 
+### Check for Java.
+
+build_java=true
+AC_ARG_ENABLE([java],
+  [AS_HELP_STRING([--disable-java],
+    [disable Java interface])],
+  [if test "$enableval" = no; then
+     build_java=false
+   fi],
+  [])
+
+HAVE_JAVA=no
+## Grab JAVA_HOME from environment variable if it exists
+AC_ARG_VAR([JAVA_HOME], [path to Java installation])
+JAVA_ARCH=
+JAVAC=
+JAR=
+JAVA_CPPFLAGS=
+JAVA_LIBS=
+
+if test $build_java = true; then
+
+  warn_java=
+
+  if test -z "$JAVA_HOME"; then
+    AC_CHECK_PROG(JAVA, java, java)
+    AC_CHECK_PROG(JAVAC, javac, javac)
+    AC_CHECK_PROG(JAR, jar, jar)
+  else
+    AC_PATH_PROG(JAVA, java, [], [$JAVA_HOME/bin$PATH_SEPARATOR$PATH])
+    AC_PATH_PROG(JAVAC, javac, [], [$JAVA_HOME/bin$PATH_SEPARATOR$PATH])
+    AC_PATH_PROG(JAR, jar, [], [$JAVA_HOME/bin$PATH_SEPARATOR$PATH])
+  fi
+  if test -n "$JAVAC" -a -n "$JAR"; then
+    AC_MSG_CHECKING([for Java version])
+    java_version=[`$JAVA -version 2>&1 | sed -n -e 's/^java version[^0-9"]*"\([^"]*\)"/\1/p'`]
+    AC_MSG_RESULT($java_version)
+    java_major=[`echo $java_version | sed -e 's/^\([0-9][0-9]*\)\.\([0-9][0-9]*\)\..*$/\1/'`]
+    java_minor=[`echo $java_version | sed -e 's/^\([0-9][0-9]*\)\.\([0-9][0-9]*\)\..*$/\2/'`]
+    if test $java_major -ge 1 -a $java_minor -ge 5; then
+      case "$canonical_host_type" in
+        *-msdosmsvc*)
+          HAVE_JAVA=yes
+          JAVA_LIBS=-ladvapi32
+        ;;
+        *)
+          if test -z "$JAVA_HOME"; then
+            # This is the location of Java on an OS X box. In this
+            # directory we can find the various versions of a
+            # JavaVMs. Check for the newest version set the JAVA_HOME
+            # variable.
+            if test -d "/System/Library/Frameworks/JavaVM.framework"; then
+              # Sneak the -framework flag into mkoctfile via LFLAGS
+              LFLAGS="$LFLAGS -framework JavaVM"
+              JAVA_TEMP="/System/Library/Frameworks/JavaVM.framework"
+              JAVA_HOME="${JAVA_TEMP}/Home"
+              JAVA_ARCH="${JAVA_TEMP}/Libraries/libjvm_compat.dylib"
+              JAVA_LIBS="-framework JavaVM"
+              # According to:
+              #   http://developer.apple.com/unix/crossplatform.html
+              # you need to explicitly set the include path
+              JAVA_CPPFLAGS="-I${JAVA_HOME}/include"
+              HAVE_JAVA=yes
+            # This is the Debian default path
+            elif test -d "/usr/lib/jvm/default-java"; then
+              JAVA_HOME=/usr/lib/jvm/default-java
+            # This is the path of java 6 on debian
+            elif test -d "/usr/lib/jvm/java-6-sun"; then
+              JAVA_HOME=//usr/lib/jvm/java-6-sun
+            else
+              JAVA_HOME=/usr/lib/jvm
+            fi
+          fi
+          JAVA_HOME=[`echo $JAVA_HOME | sed -e 's|/$||'`]
+          if test -z "$JAVA_ARCH"; then
+            if test -d "${JAVA_HOME}/jre/lib/i386"; then
+              JAVA_ARCH="i386";
+            elif test -d "${JAVA_HOME}/jre/lib/amd64"; then
+              JAVA_ARCH="amd64"
+            elif test -d "${JAVA_HOME}/jre/lib/mac"; then
+              JAVA_ARCH="mac"
+            elif test -d "${JAVA_HOME}/jre/lib/maci"; then
+              JAVA_ARCH="maci"
+            elif test -d "${JAVA_HOME}/jre/lib/solaris"; then
+              JAVA_ARCH="solaris"
+            elif test -d "${JAVA_HOME}/jre/lib/solarisv9"; then
+              JAVA_ARCH="solarisv9"
+            fi
+          fi
+          if test -n "$JAVA_ARCH"; then
+            HAVE_JAVA=yes
+            case "$canonical_host_type" in
+              *-mingw* | *-cygwin*)
+                JAVA_LIBS=-ladvapi32
+                JAVA_CPPFLAGS="-I${JAVA_HOME}/include -I${JAVA_HOME}/include/win32"
+              ;;
+              *)
+                JAVA_CPPFLAGS="-I${JAVA_HOME}/include -I${JAVA_HOME}/include/linux"
+              ;;
+            esac
+          fi
+        ;;
+      esac
+      if test "$HAVE_JAVA" = "yes"; then
+        AC_DEFINE(HAVE_JAVA, 1,
+          [Define to 1 if Java is available and is at least version 1.5])
+      fi
+    else
+      warn_java="Java 1.5 or later not found.  Octave will not be able to call Java methods."
+    fi
+  fi
+fi
+
+## For later reporting in configure summary
+if test $HAVE_JAVA = no; then
+  build_java=false
+fi
+AM_CONDITIONAL([AMCOND_HAVE_JAVA], [test $HAVE_JAVA = yes])
+AC_SUBST(JAVAC)
+AC_SUBST(JAR)
+AC_SUBST(JAVA_CPPFLAGS)
+AC_SUBST(JAVA_LIBS)
+AC_DEFINE_UNQUOTED([JAVA_HOME], ["$JAVA_HOME"], [Java home.])
+AC_DEFINE_UNQUOTED([JAVA_ARCH], ["$JAVA_ARCH"], [Java arch.])
+
 ### GUI/Qt related tests.
 
 HAVE_QT=false
 QT_CPPFLAGS=
 QT_LDFLAGS=
 QT_LIBS=
 win32_terminal=no
 build_gui=true
@@ -2639,18 +2664,18 @@ Octave is now configured for $canonical_
   GLPK CPPFLAGS:               $GLPK_CPPFLAGS
   GLPK LDFLAGS:                $GLPK_LDFLAGS
   GLPK libraries:              $GLPK_LIBS
   graphics CFLAGS:             $GRAPHICS_CFLAGS
   graphics libraries:          $GRAPHICS_LIBS
   HDF5 CPPFLAGS:               $HDF5_CPPFLAGS
   HDF5 LDFLAGS:                $HDF5_LDFLAGS
   HDF5 libraries:              $HDF5_LIBS
+  Java home:                   $JAVA_HOME
   Java arch:                   $JAVA_ARCH
-  Java home:                   $JAVA_HOME
   Java CPPFLAGS:               $JAVA_CPPFLAGS
   Java libraries:              $JAVA_LIBS
   LAPACK libraries:            $LAPACK_LIBS
   LLVM CPPFLAGS:               $LLVM_CPPFLAGS
   LLVM LDFLAGS:                $LLVM_LDFLAGS
   LLVM libraries:              $LLVM_LIBS
   Magick++ CPPFLAGS:           $MAGICK_CPPFLAGS
   Magick++ LDFLAGS:            $MAGICK_LDFLAGS
@@ -2679,16 +2704,17 @@ Octave is now configured for $canonical_
   Z LDFLAGS:                   $Z_LDFLAGS
   Z libraries:                 $Z_LIBS
 
   Default pager:               $DEFAULT_PAGER
   gnuplot:                     $GNUPLOT
 
   Build Octave GUI:                   $build_gui
   JIT compiler for loops:             $build_jit
+  Build Java interface:               $build_java
   Do internal array bounds checking:  $BOUNDS_CHECKING
   Use octave_allocator:               $USE_OCTAVE_ALLOCATOR
   Build static libraries:             $STATIC_LIBS
   Build shared libraries:             $SHARED_LIBS
   Dynamic Linking:                    $ENABLE_DYNAMIC_LINKING $DL_API_MSG
   Include support for GNU readline:   $USE_READLINE
   64-bit array dims and indexing:     $USE_64_BIT_IDX_T
 ])
diff --git a/libinterp/dldfcn/__java__.cc b/libinterp/dldfcn/__java__.cc
--- a/libinterp/dldfcn/__java__.cc
+++ b/libinterp/dldfcn/__java__.cc
@@ -9,16 +9,21 @@
 ** but WITHOUT ANY WARRANTY; without even the implied warranty of
 ** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ** GNU General Public License for more details.
 **
 ** You should have received a copy of the GNU General Public License
 ** along with this program; If not, see <http://www.gnu.org/licenses/>.
 */
 
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#ifdef HAVE_JAVA
 #include "__java__.h"
 
 #include "parse.h"
 #include "Cell.h"
 #include "file-stat.h"
 #include "file-ops.h"
 #include "cmd-edit.h"
 #ifdef __WIN32__
@@ -2032,8 +2037,11 @@ octave_value octave_java::do_java_set (J
           jstring_ref cName (jni_env, jni_env->NewStringUTF (class_name.c_str ()));
           jstring_ref fName (jni_env, jni_env->NewStringUTF (name.c_str ()));
           jni_env->CallStaticObjectMethod (helperClass, mID, jstring (cName), jstring (fName), jobject (jobj));
           check_exception (jni_env);
         }
     }
   return retval;
 }
+
+#endif
+
diff --git a/scripts/Makefile.am b/scripts/Makefile.am
--- a/scripts/Makefile.am
+++ b/scripts/Makefile.am
@@ -43,17 +43,19 @@ include @ftp/module.mk
 include audio/module.mk
 include deprecated/module.mk
 include elfun/module.mk
 include general/module.mk
 include geometry/module.mk
 include help/module.mk
 include image/module.mk
 include io/module.mk
+if AMCOND_HAVE_JAVA
 include java/module.mk
+endif
 include linear-algebra/module.mk
 include miscellaneous/module.mk
 include optimization/module.mk
 include path/module.mk
 include pkg/module.mk
 include plot/module.mk
 include polynomial/module.mk
 include prefs/module.mk
@@ -116,19 +118,21 @@ help/PKG_ADD: $(help_FCN_FILES) $(help_G
 image/PKG_ADD: $(image_FCN_FILES) $(image_GEN_FCN_FILES) image/$(octave_dirstamp) mk-pkg-add
 	$(srcdir)/mk-pkg-add $(srcdir) $(image_FCN_FILES) -- $(image_GEN_FCN_FILES) > $@-t
 	mv $@-t $@
 
 io/PKG_ADD: $(io_FCN_FILES) $(io_GEN_FCN_FILES) io/$(octave_dirstamp) mk-pkg-add
 	$(srcdir)/mk-pkg-add $(srcdir) $(io_FCN_FILES) -- $(io_GEN_FCN_FILES) > $@-t
 	mv $@-t $@
 
+if AMCOND_HAVE_JAVA
 java/PKG_ADD: $(java_FCN_FILES) $(java_GEN_FCN_FILES) java/$(octave_dirstamp) mk-pkg-add
 	$(srcdir)/mk-pkg-add $(srcdir) $(java_FCN_FILES) -- $(java_GEN_FCN_FILES) > $@-t
 	mv $@-t $@
+endif
 
 linear-algebra/PKG_ADD: $(linear_algebra_FCN_FILES) $(linear_algebra_GEN_FCN_FILES) linear-algebra/$(octave_dirstamp) mk-pkg-add
 	$(srcdir)/mk-pkg-add $(srcdir) $(linear_algebra_FCN_FILES) -- $(linear_algebra_GEN_FCN_FILES) > $@-t
 	mv $@-t $@
 
 miscellaneous/PKG_ADD: $(miscellaneous_FCN_FILES) $(miscellaneous_GEN_FCN_FILES) miscellaneous/$(octave_dirstamp) mk-pkg-add
 	$(srcdir)/mk-pkg-add $(srcdir) $(miscellaneous_FCN_FILES) -- $(miscellaneous_GEN_FCN_FILES) > $@-t
 	mv $@-t $@
@@ -213,17 +217,19 @@ time/PKG_ADD: $(time_FCN_FILES) $(time_G
 $(audio_GEN_FCN_FILES): audio/$(octave_dirstamp)
 $(deprecated_GEN_FCN_FILES): deprecated/$(octave_dirstamp)
 $(elfun_GEN_FCN_FILES): elfun/$(octave_dirstamp)
 $(general_GEN_FCN_FILES): general/$(octave_dirstamp)
 $(geometry_GEN_FCN_FILES): geometry/$(octave_dirstamp)
 $(help_GEN_FCN_FILES): help/$(octave_dirstamp)
 $(image_GEN_FCN_FILES): image/$(octave_dirstamp)
 $(io_GEN_FCN_FILES): io/$(octave_dirstamp)
+if AMCOND_HAVE_JAVA
 $(java_GEN_FCN_FILES): java/$(octave_dirstamp)
+endif
 $(linear_algebra_GEN_FCN_FILES): linear-algebra/$(octave_dirstamp)
 $(miscellaneous_GEN_FCN_FILES): miscellaneous/$(octave_dirstamp)
 $(optimization_GEN_FCN_FILES): optimization/$(octave_dirstamp)
 $(path_GEN_FCN_FILES): path/$(octave_dirstamp)
 $(pkg_GEN_FCN_FILES): pkg/$(octave_dirstamp)
 $(plot_GEN_FCN_FILES): plot/$(octave_dirstamp)
 $(polynomial_GEN_FCN_FILES): polynomial/$(octave_dirstamp)
 $(prefs_GEN_FCN_FILES): prefs/$(octave_dirstamp)
@@ -263,19 +269,21 @@ help/$(octave_dirstamp):
 	$(MKDIR_P) help
 	: > help/$(octave_dirstamp)
 image/$(octave_dirstamp):
 	$(MKDIR_P) image
 	: > image/$(octave_dirstamp)
 io/$(octave_dirstamp):
 	$(MKDIR_P) io
 	: > io/$(octave_dirstamp)
+if AMCOND_HAVE_JAVA
 java/$(octave_dirstamp):
 	$(MKDIR_P) java
 	: > java/$(octave_dirstamp)
+endif
 linear-algebra/$(octave_dirstamp):
 	$(MKDIR_P) linear-algebra
 	: > linear-algebra/$(octave_dirstamp)
 miscellaneous/$(octave_dirstamp):
 	$(MKDIR_P) miscellaneous
 	: > miscellaneous/$(octave_dirstamp)
 optimization/$(octave_dirstamp):
 	$(MKDIR_P) optimization
