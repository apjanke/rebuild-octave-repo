# HG changeset patch
# User Rik <rik@octave.org>
# Date 1541916038 28800
#      Sat Nov 10 22:00:38 2018 -0800
# Node ID afc3d1da58e533989abdb6f350ecd4c2da7f515a
# Parent  df3f2e11994426ccdcd1343149211c5c57388dfc
Expand flintmax to accept a floating point variable as input.

* bitfcns.cc (Fflintmax): Redo docstring to document new calling form.
Add Example Code to documentation showing how to call function with a
variable as input.  Use isfloat() to check for a floating point input and call
class_name() to find the class of variable.  Redo BIST tests.

diff --git a/libinterp/corefcn/bitfcns.cc b/libinterp/corefcn/bitfcns.cc
--- a/libinterp/corefcn/bitfcns.cc
+++ b/libinterp/corefcn/bitfcns.cc
@@ -655,52 +655,77 @@ bitshift (10, [-2, -1, 0, 1, 2])
 %!error <N must be positive> bitshift (10, [-2 -1 0 1 2], -1)
 */
 
 DEFUN (flintmax, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {} flintmax ()
 @deftypefnx {} {} flintmax ("double")
 @deftypefnx {} {} flintmax ("single")
+@deftypefnx {} {} flintmax (@var{var})
 Return the largest integer that can be represented consecutively in a
 floating point value.
 
-The default class is @qcode{"double"}, but @qcode{"single"} is a valid
-option.  On IEEE 754 compatible systems, @code{flintmax} is
-@w{@math{2^{53}}} for @qcode{"double"} and @w{@math{2^{24}}} for
-@qcode{"single"}.
+The input is either a string specifying a floating point type, or it is an
+existing floating point variable @var{var}.
+
+The default type is @qcode{"double"}, but @qcode{"single"} is a valid option.
+On IEEE 754 compatible systems, @code{flintmax} is @w{@math{2^{53}}} for
+@qcode{"double"} and @w{@math{2^{24}}} for @qcode{"single"}.
+
+Example Code - query an existing variable
+
+@example
+@group
+x = single (1);
+flintmax (x)
+  @result{} 16777216
+@end group
+@end example
+
 @seealso{intmax, realmax, realmin}
 @end deftypefn */)
 {
   int nargin = args.length ();
 
   if (nargin > 1)
     print_usage ();
 
   std::string cname = "double";
   if (nargin == 1)
-    cname = args(0).xstring_value ("flintmax: argument must be a string");
+    {
+      if (args(0).is_string ())
+        cname = args(0).string_value ();
+      else if (args(0).isfloat ())
+        cname = args(0).class_name ();
+      else
+        error ("intmin: argument must be a string or floating point variable");
+    }
 
   if (cname == "double")
     return ovl (static_cast<double> (max_mantissa_value<double> () + 1));
   else if (cname == "single")
     return ovl (static_cast<float> (max_mantissa_value<float> () + 1));
   else
     error ("flintmax: not defined for class '%s'", cname.c_str ());
 }
 
 /*
 %!assert (flintmax (), 2^53)
 %!assert (flintmax ("double"), 2^53)
 %!assert (flintmax ("single"), single (2^24))
 
-%!error flintmax (0)
+%!test
+%! x = single (1);
+%! assert (flintmax (x), single (16777216));
+
 %!error flintmax ("double", 0)
-%!error flintmax ("int32")
-%!error flintmax ("char")
+%!error <must be a string or floating point variable> flintmax (int8 (1))
+%!error <not defined for class 'int8'> flintmax ("int8")
+%!error <not defined for class 'char'> flintmax ("char")
 */
 
 DEFUN (intmax, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {} intmax ()
 @deftypefnx {} {} intmax ("@var{type}")
 @deftypefnx {} {} intmax (@var{var})
 Return the largest integer that can be represented by a specific integer type.
