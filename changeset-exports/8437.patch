# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1230393712 -3600
#      Sat Dec 27 17:01:52 2008 +0100
# Node ID f00578b495e9512e5c829b0097f9b08efe9667be
# Parent  342f72c1df1aef5ff2e5f4b1fd9342d8271263f7
remove valid_as_scalar_index

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,24 @@
+2008-12-27  Jaroslav Hajek <highegg@gmail.com>
+
+	* oct-obj.h, oct-obj.cc (octave_value_list::valid_scalar_indices): Remove.
+	* ov-base-diag.cc, ov-base-diag.h, ov-base-scalar.cc, ov-base.h,
+	ov-bool-mat.cc, ov-bool-mat.h, ov-bool-sparse.cc, ov-bool-sparse.h,
+	ov-bool.cc, ov-bool.h, ov-ch-mat.cc, ov-ch-mat.h, ov-colon.h,
+	ov-complex.cc, ov-complex.h, ov-cx-mat.cc, ov-cx-mat.h,
+	ov-cx-sparse.cc, ov-cx-sparse.h, ov-float.cc, ov-float.h,
+	ov-flt-complex.cc, ov-flt-complex.h, ov-flt-cx-mat.cc,
+	ov-flt-cx-mat.h, ov-flt-re-mat.cc, ov-flt-re-mat.h, ov-intx.h,
+	ov-perm.cc, ov-perm.h, ov-range.h, ov-re-mat.cc, ov-re-mat.h,
+	ov-re-sparse.cc, ov-re-sparse.h, ov-scalar.cc, ov-scalar.h,
+	ov-str-mat.cc, ov-str-mat.h, ov.h:
+	Remove valid_as_scalar_index and valid_as_zero_index methods
+	from octave_value, octave_base_value and all of its subclasses.
+
 2008-12-26  Francesco Potort√¨  <pot@gnu.org>
 
 	* data.cc (resize): Add cross reference to postpad.
 
 2008-12-25  Jaroslav Hajek <highegg@gmail.com>
 
 	* load-save.h (load_save_format_type, load_save_format_options): New
 	enums.
diff --git a/src/oct-obj.cc b/src/oct-obj.cc
--- a/src/oct-obj.cc
+++ b/src/oct-obj.cc
@@ -26,28 +26,16 @@ along with Octave; see the file COPYING.
 #endif
 
 #include "error.h"
 #include "oct-obj.h"
 
 octave_allocator
 octave_value_list::allocator (sizeof (octave_value_list));
 
-bool
-octave_value_list::valid_scalar_indices (void) const
-{
-  octave_idx_type n = length ();
-
-  for (octave_idx_type i = 0; i < n; i++)
-    if (! data[i].valid_as_scalar_index ())
-      return false;
-
-  return true;
-}
-
 void
 octave_value_list::resize (octave_idx_type n, const octave_value& val)
 {
   octave_idx_type len = length ();
 
   if (n > len)
     {
       data.resize (n);
diff --git a/src/oct-obj.h b/src/oct-obj.h
--- a/src/oct-obj.h
+++ b/src/oct-obj.h
@@ -78,18 +78,16 @@ public:
 	{
 	  data = obj.data;
 	  names = obj.names;
 	}
 
       return *this;
     }
 
-  bool valid_scalar_indices (void) const;
-
   // Assignment will resize on range errors.
 
   octave_value& operator () (octave_idx_type n) { return elem (n); }
 
   octave_value operator () (octave_idx_type n) const { return elem (n); }
 
   octave_idx_type length (void) const { return data.size (); }
 
diff --git a/src/ov-base-diag.cc b/src/ov-base-diag.cc
--- a/src/ov-base-diag.cc
+++ b/src/ov-base-diag.cc
@@ -214,24 +214,16 @@ octave_base_diag<DMT, MT>::resize (const
 
 template <class DMT, class MT>
 bool
 octave_base_diag<DMT, MT>::is_true (void) const
 {
   return to_dense ().is_true ();
 }
 
-template <class DMT, class MT>
-bool
-octave_base_diag<DMT, MT>::valid_as_scalar_index (void) const
-{
-  // FIXME
-  return false;
-}
-
 // FIXME: this should be achieveable using ::real
 template <class T> inline T helper_getreal (T x) { return x; }
 template <class T> inline T helper_getreal (std::complex<T> x) { return x.real (); }
 // FIXME: we really need some traits so that ad hoc hooks like this are not necessary
 template <class T> inline T helper_iscomplex (T) { return false; }
 template <class T> inline T helper_iscomplex (std::complex<T>) { return true; }
 
 template <class DMT, class MT>
diff --git a/src/ov-base-diag.h b/src/ov-base-diag.h
--- a/src/ov-base-diag.h
+++ b/src/ov-base-diag.h
@@ -111,18 +111,16 @@ public:
   bool is_defined (void) const { return true; }
 
   bool is_constant (void) const { return true; }
 
   bool is_true (void) const;
 
   bool is_diag_matrix (void) const { return true; }
 
-  bool valid_as_scalar_index (void) const;
-
   double double_value (bool = false) const;
 
   float float_value (bool = false) const;
 
   double scalar_value (bool frc_str_conv = false) const
     { return double_value (frc_str_conv); }
 
   idx_vector index_vector (void) const;
diff --git a/src/ov-base-scalar.cc b/src/ov-base-scalar.cc
--- a/src/ov-base-scalar.cc
+++ b/src/ov-base-scalar.cc
@@ -70,24 +70,17 @@ octave_base_scalar<ST>::subsasgn (const 
 {
   octave_value retval;
 
   switch (type[0])
     {
     case '(':
       {
 	if (type.length () == 1)
-	  {
-	    if (idx.front().valid_scalar_indices ()
-		&& rhs.is_scalar_type ()
-		&& rhs.is_numeric_type ())
-	      retval = rhs;
-	    else
-	      retval = numeric_assign (type, idx, rhs);
-	  }
+          retval = numeric_assign (type, idx, rhs);
 	else
 	  {
 	    std::string nm = type_name ();
 	    error ("in indexed assignment of %s, last rhs index must be ()",
 		   nm.c_str ());
 	  }
       }
       break;
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -297,20 +297,16 @@ public:
   virtual bool is_scalar_type (void) const { return false; }
 
   virtual bool is_matrix_type (void) const { return false; }
 
   virtual bool is_numeric_type (void) const { return false; }
 
   virtual bool is_sparse_type (void) const { return false; }
 
-  virtual bool valid_as_scalar_index (void) const { return false; }
-
-  virtual bool valid_as_zero_index (void) const { return false; }
-
   virtual bool is_true (void) const { return false; }
 
   virtual bool is_null_value (void) const { return false; }
 
   virtual bool is_constant (void) const { return false; }
 
   virtual bool is_function_handle (void) const { return false; }
 
diff --git a/src/ov-bool-mat.cc b/src/ov-bool-mat.cc
--- a/src/ov-bool-mat.cc
+++ b/src/ov-bool-mat.cc
@@ -84,23 +84,16 @@ octave_bool_matrix::try_narrowing_conver
 
       if (nr == 1 && nc == 1)
 	retval = new octave_bool (bm (0, 0));
     }
 
   return retval;
 }
 
-bool
-octave_bool_matrix::valid_as_scalar_index (void) const
-{
-  // FIXME
-  return false;
-}
-
 double
 octave_bool_matrix::double_value (bool) const
 {
   double retval = lo_ieee_nan_value ();
 
   if (rows () > 0 && columns () > 0)
     {
       gripe_implicit_conversion ("Octave:array-as-scalar",
diff --git a/src/ov-bool-mat.h b/src/ov-bool-mat.h
--- a/src/ov-bool-mat.h
+++ b/src/ov-bool-mat.h
@@ -80,18 +80,16 @@ public:
   idx_vector index_vector (void) const { return idx_vector (matrix); }
 
   bool is_bool_matrix (void) const { return true; }
 
   bool is_bool_type (void) const { return true; }
 
   bool is_real_type (void) const { return true; }
 
-  bool valid_as_scalar_index (void) const;
-
   int8NDArray
   int8_array_value (void) const { return int8NDArray (matrix); }
 
   int16NDArray
   int16_array_value (void) const { return int16NDArray (matrix); }
 
   int32NDArray
   int32_array_value (void) const { return int32NDArray (matrix); }
diff --git a/src/ov-bool-sparse.cc b/src/ov-bool-sparse.cc
--- a/src/ov-bool-sparse.cc
+++ b/src/ov-bool-sparse.cc
@@ -87,23 +87,16 @@ octave_sparse_bool_matrix::try_narrowing
 	       double (matrix.byte_size ()) > double (matrix.rows ()) *
 	       double (matrix.cols ()) * sizeof (bool))
 	retval = new octave_bool_matrix (matrix.matrix_value ());
     }
 
   return retval;
 }
 
-bool
-octave_sparse_bool_matrix::valid_as_scalar_index (void) const
-{
-  // FIXME
-  return false;
-}
-
 double
 octave_sparse_bool_matrix::double_value (bool) const
 {
   double retval = lo_ieee_nan_value ();
 
   if (numel () > 0)
     {
       if (numel () > 1)
diff --git a/src/ov-bool-sparse.h b/src/ov-bool-sparse.h
--- a/src/ov-bool-sparse.h
+++ b/src/ov-bool-sparse.h
@@ -89,18 +89,16 @@ public:
     { return idx_vector (bool_array_value ()); }
 
   bool is_bool_matrix (void) const { return true; }
 
   bool is_bool_type (void) const { return true; }
 
   bool is_real_type (void) const { return true; }
 
-  bool valid_as_scalar_index (void) const;
-
   double double_value (bool = false) const;
 
   double scalar_value (bool frc_str_conv = false) const
     { return double_value (frc_str_conv); }
 
   Matrix matrix_value (bool = false) const;
 
   NDArray array_value (bool = false) const;
diff --git a/src/ov-bool.cc b/src/ov-bool.cc
--- a/src/ov-bool.cc
+++ b/src/ov-bool.cc
@@ -61,53 +61,32 @@ default_numeric_conversion_function (con
 octave_base_value::type_conv_info
 octave_bool::numeric_conversion_function (void) const
 {
   return octave_base_value::type_conv_info (default_numeric_conversion_function,
                                             octave_scalar::static_type_id ());
 
 }
 
-static inline bool
-valid_scalar_indices (const octave_value_list& args)
-{
-  int nargin = args.length ();
-
-  for (int i = 0; i < nargin; i++)
-    if (! args(i).valid_as_scalar_index ())
-      return false;
-
-  return true;
-}
-
 octave_value
 octave_bool::do_index_op (const octave_value_list& idx, bool resize_ok)
 {
-  octave_value retval;
+  // FIXME -- this doesn't solve the problem of
+  //
+  //   a = 1; a([1,1], [1,1], [1,1])
+  //
+  // and similar constructions.  Hmm...
 
-  if (valid_scalar_indices (idx))
-    retval = scalar;
-  else
-    {
-      // FIXME -- this doesn't solve the problem of
-      //
-      //   a = 1; a([1,1], [1,1], [1,1])
-      //
-      // and similar constructions.  Hmm...
+  // FIXME -- using this constructor avoids narrowing the
+  // 1x1 matrix back to a scalar value.  Need a better solution
+  // to this problem.
 
-      // FIXME -- using this constructor avoids narrowing the
-      // 1x1 matrix back to a scalar value.  Need a better solution
-      // to this problem.
+  octave_value tmp (new octave_bool_matrix (bool_matrix_value ()));
 
-      octave_value tmp (new octave_bool_matrix (bool_matrix_value ()));
-
-      retval = tmp.do_index_op (idx, resize_ok);
-    }
-
-  return retval;
+  return tmp.do_index_op (idx, resize_ok);
 }
 
 octave_value 
 octave_bool::resize (const dim_vector& dv, bool fill) const
 { 
   if (fill)
     {
       boolNDArray retval (dv, false); 
diff --git a/src/ov-bool.h b/src/ov-bool.h
--- a/src/ov-bool.h
+++ b/src/ov-bool.h
@@ -76,20 +76,16 @@ public:
   bool is_real_scalar (void) const { return true; }
 
   bool is_bool_scalar (void) const { return true; }
 
   bool is_bool_type (void) const { return true; }
 
   bool is_real_type (void) const { return true; }
 
-  bool valid_as_scalar_index (void) const { return scalar; }
-
-  bool valid_as_zero_index (void) const { return ! scalar; }
-
   bool is_true (void) const { return scalar; }
 
   int8NDArray
   int8_array_value (void) const
     { return int8NDArray (dim_vector (1, 1), scalar); }
 
   int16NDArray
   int16_array_value (void) const
diff --git a/src/ov-ch-mat.cc b/src/ov-ch-mat.cc
--- a/src/ov-ch-mat.cc
+++ b/src/ov-ch-mat.cc
@@ -49,24 +49,16 @@ octave_char_matrix::index_vector (void) 
 { 
   const char *p = matrix.data ();
   if (numel () == 1 && *p == ':')
     return idx_vector (':');
   else
     return idx_vector (array_value (true)); 
 }
 
-bool
-octave_char_matrix::valid_as_scalar_index (void) const
-{
-  bool retval = false;
-  error ("octave_char_matrix::valid_as_scalar_index(): not implemented");
-  return retval;
-}
-
 double
 octave_char_matrix::double_value (bool) const
 {
   double retval = lo_ieee_nan_value ();
 
   if (rows () > 0 && columns () > 0)
     {
       gripe_implicit_conversion ("Octave:array-as-scalar",
diff --git a/src/ov-ch-mat.h b/src/ov-ch-mat.h
--- a/src/ov-ch-mat.h
+++ b/src/ov-ch-mat.h
@@ -82,18 +82,16 @@ public:
 
   idx_vector index_vector (void) const;
 
   bool is_char_matrix (void) const { return true; }
   bool is_real_matrix (void) const { return true; }
 
   bool is_real_type (void) const { return true; }
 
-  bool valid_as_scalar_index (void) const;
-
   double double_value (bool = false) const;
 
   float float_value (bool = false) const;
 
   double scalar_value (bool frc_str_conv = false) const
     { return double_value (frc_str_conv); }
 
   float float_scalar_value (bool frc_str_conv = false) const
diff --git a/src/ov-colon.h b/src/ov-colon.h
--- a/src/ov-colon.h
+++ b/src/ov-colon.h
@@ -62,20 +62,16 @@ public:
   idx_vector index_vector (void) const { return idx_vector (':'); }
 
   bool is_defined (void) const { return true; }
 
   bool is_constant (void) const { return true; }
 
   bool is_magic_colon (void) const { return true; }
 
-  bool valid_as_scalar_index (void) const { return true; }
-
-  bool valid_as_zero_index (void) const { return false; }
-
   void print (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
 private:
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
diff --git a/src/ov-complex.cc b/src/ov-complex.cc
--- a/src/ov-complex.cc
+++ b/src/ov-complex.cc
@@ -81,38 +81,29 @@ octave_complex::try_narrowing_conversion
     retval = new octave_scalar (std::real (scalar));
 
   return retval;
 }
 
 octave_value
 octave_complex::do_index_op (const octave_value_list& idx, bool resize_ok)
 {
-  octave_value retval;
+  // FIXME -- this doesn't solve the problem of
+  //
+  //   a = i; a([1,1], [1,1], [1,1])
+  //
+  // and similar constructions.  Hmm...
 
-  if (idx.valid_scalar_indices ())
-    retval = scalar;
-  else
-    {
-      // FIXME -- this doesn't solve the problem of
-      //
-      //   a = i; a([1,1], [1,1], [1,1])
-      //
-      // and similar constructions.  Hmm...
+  // FIXME -- using this constructor avoids narrowing the
+  // 1x1 matrix back to a scalar value.  Need a better solution
+  // to this problem.
 
-      // FIXME -- using this constructor avoids narrowing the
-      // 1x1 matrix back to a scalar value.  Need a better solution
-      // to this problem.
+  octave_value tmp (new octave_complex_matrix (complex_matrix_value ()));
 
-      octave_value tmp (new octave_complex_matrix (complex_matrix_value ()));
-
-      retval = tmp.do_index_op (idx, resize_ok);
-    }
-
-  return retval;
+  return tmp.do_index_op (idx, resize_ok);
 }
 
 double
 octave_complex::double_value (bool force_conversion) const
 {
   double retval = lo_ieee_nan_value ();
 
   if (! force_conversion)
diff --git a/src/ov-complex.h b/src/ov-complex.h
--- a/src/ov-complex.h
+++ b/src/ov-complex.h
@@ -90,20 +90,16 @@ public:
   bool is_complex_scalar (void) const { return true; }
 
   bool is_complex_type (void) const { return true; }
 
   bool is_double_type (void) const { return true; }
 
   bool is_float_type (void) const { return true; }
 
-  // FIXME ???
-  bool valid_as_scalar_index (void) const { return false; }
-  bool valid_as_zero_index (void) const { return false; }
-
   double double_value (bool = false) const;
 
   float float_value (bool = false) const;
 
   double scalar_value (bool frc_str_conv = false) const
     { return double_value (frc_str_conv); }
 
   float float_scalar_value (bool frc_str_conv = false) const
diff --git a/src/ov-cx-mat.cc b/src/ov-cx-mat.cc
--- a/src/ov-cx-mat.cc
+++ b/src/ov-cx-mat.cc
@@ -127,23 +127,16 @@ octave_complex_matrix::assign (const oct
   Array<idx_vector> ra_idx (len);
 
   for (octave_idx_type i = 0; i < len; i++)
     ra_idx(i) = idx(i).index_vector ();
 
   matrix.assign (ra_idx, rhs);
 }
 
-bool
-octave_complex_matrix::valid_as_scalar_index (void) const
-{
-  // FIXME
-  return false;
-}
-
 double
 octave_complex_matrix::double_value (bool force_conversion) const
 {
   double retval = lo_ieee_nan_value ();
 
   if (! force_conversion)
     gripe_implicit_conversion ("Octave:imag-to-real",
 			       "complex matrix", "real scalar");
diff --git a/src/ov-cx-mat.h b/src/ov-cx-mat.h
--- a/src/ov-cx-mat.h
+++ b/src/ov-cx-mat.h
@@ -97,18 +97,16 @@ public:
   bool is_complex_matrix (void) const { return true; }
 
   bool is_complex_type (void) const { return true; }
 
   bool is_double_type (void) const { return true; }
 
   bool is_float_type (void) const { return true; }
 
-  bool valid_as_scalar_index (void) const;
-
   double double_value (bool = false) const;
 
   float float_value (bool = false) const;
 
   double scalar_value (bool frc_str_conv = false) const
     { return double_value (frc_str_conv); }
 
   float float_scalar_value (bool frc_str_conv = false) const
diff --git a/src/ov-cx-sparse.cc b/src/ov-cx-sparse.cc
--- a/src/ov-cx-sparse.cc
+++ b/src/ov-cx-sparse.cc
@@ -115,23 +115,16 @@ octave_sparse_complex_matrix::assign (co
   int len = idx.length ();
 
   for (int i = 0; i < len; i++)
     matrix.set_index (idx(i).index_vector ());
 
   ::assign (matrix, rhs);
 }
 
-bool
-octave_sparse_complex_matrix::valid_as_scalar_index (void) const
-{
-  // FIXME
-  return false;
-}
-
 double
 octave_sparse_complex_matrix::double_value (bool force_conversion) const
 {
   double retval = lo_ieee_nan_value ();
 
   if (! force_conversion)
     gripe_implicit_conversion ("Octave:imag-to-real",
 			       "complex sparse matrix", "real scalar");
diff --git a/src/ov-cx-sparse.h b/src/ov-cx-sparse.h
--- a/src/ov-cx-sparse.h
+++ b/src/ov-cx-sparse.h
@@ -100,18 +100,16 @@ public:
   bool is_complex_matrix (void) const { return true; }
 
   bool is_complex_type (void) const { return true; }
 
   bool is_double_type (void) const { return true; }
 
   bool is_float_type (void) const { return true; }
 
-  bool valid_as_scalar_index (void) const;
-
   double double_value (bool = false) const;
 
   double scalar_value (bool frc_str_conv = false) const
     { return double_value (frc_str_conv); }
 
   Matrix matrix_value (bool = false) const;
 
   Complex complex_value (bool = false) const;
diff --git a/src/ov-float.cc b/src/ov-float.cc
--- a/src/ov-float.cc
+++ b/src/ov-float.cc
@@ -55,38 +55,29 @@ template class octave_base_scalar<float>
 
 DEFINE_OCTAVE_ALLOCATOR (octave_float_scalar);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_float_scalar, "float scalar", "single");
 
 octave_value
 octave_float_scalar::do_index_op (const octave_value_list& idx, bool resize_ok)
 {
-  octave_value retval;
+  // FIXME -- this doesn't solve the problem of
+  //
+  //   a = 1; a([1,1], [1,1], [1,1])
+  //
+  // and similar constructions.  Hmm...
 
-  if (idx.valid_scalar_indices ())
-    retval = scalar;
-  else
-    {
-      // FIXME -- this doesn't solve the problem of
-      //
-      //   a = 1; a([1,1], [1,1], [1,1])
-      //
-      // and similar constructions.  Hmm...
+  // FIXME -- using this constructor avoids narrowing the
+  // 1x1 matrix back to a scalar value.  Need a better solution
+  // to this problem.
 
-      // FIXME -- using this constructor avoids narrowing the
-      // 1x1 matrix back to a scalar value.  Need a better solution
-      // to this problem.
+  octave_value tmp (new octave_matrix (matrix_value ()));
 
-      octave_value tmp (new octave_matrix (matrix_value ()));
-
-      retval = tmp.do_index_op (idx, resize_ok);
-    }
-
-  return retval;
+  return tmp.do_index_op (idx, resize_ok);
 }
 
 octave_value 
 octave_float_scalar::resize (const dim_vector& dv, bool fill) const
 {
   if (fill)
     {
       FloatNDArray retval (dv, NDArray::resize_fill_value());
diff --git a/src/ov-float.h b/src/ov-float.h
--- a/src/ov-float.h
+++ b/src/ov-float.h
@@ -85,30 +85,16 @@ public:
   bool is_real_scalar (void) const { return true; }
 
   bool is_real_type (void) const { return true; }
 
   bool is_single_type (void) const { return true; }
 
   bool is_float_type (void) const { return true; }
 
-  bool valid_as_scalar_index (void) const
-    {
-      return (! xisnan (scalar)
-	      && F_NINT (scalar) == scalar
-	      && NINTbig (scalar) == 1);
-    }
-
-  bool valid_as_zero_index (void) const
-    {
-      return (! xisnan (scalar)
-	      && F_NINT (scalar) == scalar
-	      && NINTbig (scalar) == 0);
-    }
-
   int8NDArray
   int8_array_value (void) const
     { return int8NDArray (dim_vector (1, 1), scalar); }
 
   int16NDArray
   int16_array_value (void) const
     { return int16NDArray (dim_vector (1, 1), scalar); }
 
diff --git a/src/ov-flt-complex.cc b/src/ov-flt-complex.cc
--- a/src/ov-flt-complex.cc
+++ b/src/ov-flt-complex.cc
@@ -66,38 +66,29 @@ octave_float_complex::try_narrowing_conv
     retval = new octave_float_scalar (std::real (scalar));
 
   return retval;
 }
 
 octave_value
 octave_float_complex::do_index_op (const octave_value_list& idx, bool resize_ok)
 {
-  octave_value retval;
+  // FIXME -- this doesn't solve the problem of
+  //
+  //   a = i; a([1,1], [1,1], [1,1])
+  //
+  // and similar constructions.  Hmm...
 
-  if (idx.valid_scalar_indices ())
-    retval = scalar;
-  else
-    {
-      // FIXME -- this doesn't solve the problem of
-      //
-      //   a = i; a([1,1], [1,1], [1,1])
-      //
-      // and similar constructions.  Hmm...
+  // FIXME -- using this constructor avoids narrowing the
+  // 1x1 matrix back to a scalar value.  Need a better solution
+  // to this problem.
 
-      // FIXME -- using this constructor avoids narrowing the
-      // 1x1 matrix back to a scalar value.  Need a better solution
-      // to this problem.
+  octave_value tmp (new octave_float_complex_matrix (float_complex_matrix_value ()));
 
-      octave_value tmp (new octave_float_complex_matrix (float_complex_matrix_value ()));
-
-      retval = tmp.do_index_op (idx, resize_ok);
-    }
-
-  return retval;
+  return tmp.do_index_op (idx, resize_ok);
 }
 
 double
 octave_float_complex::double_value (bool force_conversion) const
 {
   double retval = lo_ieee_nan_value ();
 
   if (! force_conversion)
diff --git a/src/ov-flt-complex.h b/src/ov-flt-complex.h
--- a/src/ov-flt-complex.h
+++ b/src/ov-flt-complex.h
@@ -88,20 +88,16 @@ public:
   bool is_complex_scalar (void) const { return true; }
 
   bool is_complex_type (void) const { return true; }
 
   bool is_single_type (void) const { return true; }
 
   bool is_float_type (void) const { return true; }
 
-  // FIXME ???
-  bool valid_as_scalar_index (void) const { return false; }
-  bool valid_as_zero_index (void) const { return false; }
-
   double double_value (bool = false) const;
 
   float float_value (bool = false) const;
 
   double scalar_value (bool frc_str_conv = false) const
     { return double_value (frc_str_conv); }
 
   float float_scalar_value (bool frc_str_conv = false) const
diff --git a/src/ov-flt-cx-mat.cc b/src/ov-flt-cx-mat.cc
--- a/src/ov-flt-cx-mat.cc
+++ b/src/ov-flt-cx-mat.cc
@@ -116,23 +116,16 @@ octave_float_complex_matrix::assign (con
   Array<idx_vector> ra_idx (len);
 
   for (octave_idx_type i = 0; i < len; i++)
     ra_idx(i) = idx(i).index_vector ();
 
   matrix.assign (ra_idx, rhs);
 }
 
-bool
-octave_float_complex_matrix::valid_as_scalar_index (void) const
-{
-  // FIXME
-  return false;
-}
-
 double
 octave_float_complex_matrix::double_value (bool force_conversion) const
 {
   double retval = lo_ieee_nan_value ();
 
   if (! force_conversion)
     gripe_implicit_conversion ("Octave:imag-to-real",
 			       "complex matrix", "real scalar");
diff --git a/src/ov-flt-cx-mat.h b/src/ov-flt-cx-mat.h
--- a/src/ov-flt-cx-mat.h
+++ b/src/ov-flt-cx-mat.h
@@ -95,18 +95,16 @@ public:
   bool is_complex_matrix (void) const { return true; }
 
   bool is_complex_type (void) const { return true; }
 
   bool is_single_type (void) const { return true; }
 
   bool is_float_type (void) const { return true; }
 
-  bool valid_as_scalar_index (void) const;
-
   double double_value (bool = false) const;
 
   float float_value (bool = false) const;
 
   double scalar_value (bool frc_str_conv = false) const
     { return double_value (frc_str_conv); }
 
   float float_scalar_value (bool frc_str_conv = false) const
diff --git a/src/ov-flt-re-mat.cc b/src/ov-flt-re-mat.cc
--- a/src/ov-flt-re-mat.cc
+++ b/src/ov-flt-re-mat.cc
@@ -85,23 +85,16 @@ octave_float_matrix::try_narrowing_conve
   octave_base_value *retval = 0;
 
   if (matrix.nelem () == 1)
     retval = new octave_float_scalar (matrix (0));
 
   return retval;
 }
 
-bool
-octave_float_matrix::valid_as_scalar_index (void) const
-{
-  // FIXME
-  return false;
-}
-
 double
 octave_float_matrix::double_value (bool) const
 {
   double retval = lo_ieee_nan_value ();
 
   if (numel () > 0)
     {
       gripe_implicit_conversion ("Octave:array-as-scalar",
diff --git a/src/ov-flt-re-mat.h b/src/ov-flt-re-mat.h
--- a/src/ov-flt-re-mat.h
+++ b/src/ov-flt-re-mat.h
@@ -93,18 +93,16 @@ public:
   bool is_real_matrix (void) const { return true; }
 
   bool is_real_type (void) const { return true; }
 
   bool is_single_type (void) const { return true; }
 
   bool is_float_type (void) const { return true; }
 
-  bool valid_as_scalar_index (void) const;
-
   int8NDArray
   int8_array_value (void) const { return int8NDArray (matrix); }
 
   int16NDArray
   int16_array_value (void) const { return int16NDArray (matrix); }
 
   int32NDArray
   int32_array_value (void) const { return int32NDArray (matrix); }
diff --git a/src/ov-intx.h b/src/ov-intx.h
--- a/src/ov-intx.h
+++ b/src/ov-intx.h
@@ -402,40 +402,31 @@ public:
     { return new OCTAVE_VALUE_INT_SCALAR_T (*this); }
 
   octave_base_value *empty_clone (void) const
     { return new OCTAVE_VALUE_INT_MATRIX_T (); }
 
   octave_value do_index_op (const octave_value_list& idx,
 			    bool resize_ok = false)
     {
-      octave_value retval;
-
-      if (idx.valid_scalar_indices ())
-	retval = scalar;
-      else
-	{
-	  // FIXME -- this doesn't solve the problem of
-	  //
-	  //   a = 1; a([1,1], [1,1], [1,1])
-	  //
-	  // and similar constructions.  Hmm...
+      // FIXME -- this doesn't solve the problem of
+      //
+      //   a = 1; a([1,1], [1,1], [1,1])
+      //
+      // and similar constructions.  Hmm...
 
-	  // FIXME -- using this constructor avoids narrowing the
-	  // 1x1 matrix back to a scalar value.  Need a better solution
-	  // to this problem.
+      // FIXME -- using this constructor avoids narrowing the
+      // 1x1 matrix back to a scalar value.  Need a better solution
+      // to this problem.
 
-	  octave_value tmp
-	    (new OCTAVE_VALUE_INT_MATRIX_T
-	     (OCTAVE_VALUE_INT_NDARRAY_EXTRACTOR_FUNCTION ())); 
+      octave_value tmp
+        (new OCTAVE_VALUE_INT_MATRIX_T
+         (OCTAVE_VALUE_INT_NDARRAY_EXTRACTOR_FUNCTION ())); 
 
-	  retval = tmp.do_index_op (idx, resize_ok);
-	}
-
-      return retval;
+      return tmp.do_index_op (idx, resize_ok);
     }
 
   bool OCTAVE_TYPE_PREDICATE_FUNCTION (void) const { return true; }
 
   bool is_integer_type (void) const { return true; }
 
 private:
 
diff --git a/src/ov-perm.cc b/src/ov-perm.cc
--- a/src/ov-perm.cc
+++ b/src/ov-perm.cc
@@ -118,22 +118,16 @@ octave_perm_matrix::do_index_op (const o
 }
 
 bool
 octave_perm_matrix::is_true (void) const
 {
   return to_dense ().is_true ();
 }
 
-bool
-octave_perm_matrix::valid_as_scalar_index (void) const
-{
-  return false;
-}
-
 double
 octave_perm_matrix::double_value (bool) const
 {
   double retval = lo_ieee_nan_value ();
 
   if (numel () > 0)
     {
       gripe_implicit_conversion ("Octave:array-as-scalar",
diff --git a/src/ov-perm.h b/src/ov-perm.h
--- a/src/ov-perm.h
+++ b/src/ov-perm.h
@@ -106,18 +106,16 @@ public:
   bool is_real_type (void) const { return true; }
 
   bool is_double_type (void) const { return true; }
 
   bool is_float_type (void) const { return true; }
 
   bool is_true (void) const;
 
-  bool valid_as_scalar_index (void) const;
-
   double double_value (bool = false) const;
 
   float float_value (bool = false) const;
 
   double scalar_value (bool frc_str_conv = false) const
     { return double_value (frc_str_conv); }
 
   idx_vector index_vector (void) const;
diff --git a/src/ov-range.h b/src/ov-range.h
--- a/src/ov-range.h
+++ b/src/ov-range.h
@@ -139,30 +139,16 @@ public:
     { return range.sort (sidx, dim, mode); }
 
   bool is_real_type (void) const { return true; }
 
   bool is_double_type (void) const { return true; }
 
   bool is_float_type (void) const { return true; }
 
-  bool valid_as_scalar_index (void) const
-    {
-      double b = range.base ();
-      return (range.nelem () == 1
-	      && ! xisnan (b) && D_NINT (b) == b && NINTbig (b) == 1);
-    }
-
-  bool valid_as_zero_index (void) const
-    {
-      double b = range.base ();
-      return (range.nelem () == 1
-	      && ! xisnan (b) && D_NINT (b) == b && NINTbig (b) == 0);
-    }
-
   bool is_numeric_type (void) const { return true; }
 
   bool is_true (void) const;
 
   double double_value (bool = false) const;
 
   float float_value (bool = false) const;
 
diff --git a/src/ov-re-mat.cc b/src/ov-re-mat.cc
--- a/src/ov-re-mat.cc
+++ b/src/ov-re-mat.cc
@@ -98,23 +98,16 @@ octave_matrix::try_narrowing_conversion 
   octave_base_value *retval = 0;
 
   if (matrix.nelem () == 1)
     retval = new octave_scalar (matrix (0));
 
   return retval;
 }
 
-bool
-octave_matrix::valid_as_scalar_index (void) const
-{
-  // FIXME
-  return false;
-}
-
 double
 octave_matrix::double_value (bool) const
 {
   double retval = lo_ieee_nan_value ();
 
   if (numel () > 0)
     {
       gripe_implicit_conversion ("Octave:array-as-scalar",
diff --git a/src/ov-re-mat.h b/src/ov-re-mat.h
--- a/src/ov-re-mat.h
+++ b/src/ov-re-mat.h
@@ -95,18 +95,16 @@ public:
   bool is_real_matrix (void) const { return true; }
 
   bool is_real_type (void) const { return true; }
 
   bool is_double_type (void) const { return true; }
 
   bool is_float_type (void) const { return true; }
 
-  bool valid_as_scalar_index (void) const;
-
   int8NDArray
   int8_array_value (void) const { return int8NDArray (matrix); }
 
   int16NDArray
   int16_array_value (void) const { return int16NDArray (matrix); }
 
   int32NDArray
   int32_array_value (void) const { return int32NDArray (matrix); }
diff --git a/src/ov-re-sparse.cc b/src/ov-re-sparse.cc
--- a/src/ov-re-sparse.cc
+++ b/src/ov-re-sparse.cc
@@ -87,23 +87,16 @@ octave_sparse_matrix::try_narrowing_conv
 	       double (matrix.byte_size ()) > double (matrix.rows ()) *
 	       double (matrix.cols ()) * sizeof (double))
 	retval = new octave_matrix (matrix.matrix_value ());
     }
 
   return retval;
 }
 
-bool
-octave_sparse_matrix::valid_as_scalar_index (void) const
-{
-  // FIXME
-  return false;
-}
-
 double
 octave_sparse_matrix::double_value (bool) const
 {
   double retval = lo_ieee_nan_value ();
 
   if (numel () > 0)
     {
       if (numel () > 1)
diff --git a/src/ov-re-sparse.h b/src/ov-re-sparse.h
--- a/src/ov-re-sparse.h
+++ b/src/ov-re-sparse.h
@@ -96,18 +96,16 @@ public:
   bool is_real_matrix (void) const { return true; }
 
   bool is_real_type (void) const { return true; }
 
   bool is_double_type (void) const { return true; }
 
   bool is_float_type (void) const { return true; }
 
-  bool valid_as_scalar_index (void) const;
-
   double double_value (bool = false) const;
 
   double scalar_value (bool frc_str_conv = false) const
     { return double_value (frc_str_conv); }
 
   Matrix matrix_value (bool = false) const;
 
   Complex complex_value (bool = false) const;
diff --git a/src/ov-scalar.cc b/src/ov-scalar.cc
--- a/src/ov-scalar.cc
+++ b/src/ov-scalar.cc
@@ -70,38 +70,29 @@ octave_scalar::numeric_demotion_function
 {
   return octave_base_value::type_conv_info(default_numeric_demotion_function,
                                            octave_float_scalar::static_type_id ());
 }
 
 octave_value
 octave_scalar::do_index_op (const octave_value_list& idx, bool resize_ok)
 {
-  octave_value retval;
+  // FIXME -- this doesn't solve the problem of
+  //
+  //   a = 1; a([1,1], [1,1], [1,1])
+  //
+  // and similar constructions.  Hmm...
 
-  if (idx.valid_scalar_indices ())
-    retval = scalar;
-  else
-    {
-      // FIXME -- this doesn't solve the problem of
-      //
-      //   a = 1; a([1,1], [1,1], [1,1])
-      //
-      // and similar constructions.  Hmm...
+  // FIXME -- using this constructor avoids narrowing the
+  // 1x1 matrix back to a scalar value.  Need a better solution
+  // to this problem.
 
-      // FIXME -- using this constructor avoids narrowing the
-      // 1x1 matrix back to a scalar value.  Need a better solution
-      // to this problem.
+  octave_value tmp (new octave_matrix (matrix_value ()));
 
-      octave_value tmp (new octave_matrix (matrix_value ()));
-
-      retval = tmp.do_index_op (idx, resize_ok);
-    }
-
-  return retval;
+  return tmp.do_index_op (idx, resize_ok);
 }
 
 octave_value 
 octave_scalar::resize (const dim_vector& dv, bool fill) const
 {
   if (fill)
     {
       NDArray retval (dv, NDArray::resize_fill_value());
diff --git a/src/ov-scalar.h b/src/ov-scalar.h
--- a/src/ov-scalar.h
+++ b/src/ov-scalar.h
@@ -86,30 +86,16 @@ public:
   bool is_real_scalar (void) const { return true; }
 
   bool is_real_type (void) const { return true; }
 
   bool is_double_type (void) const { return true; }
 
   bool is_float_type (void) const { return true; }
 
-  bool valid_as_scalar_index (void) const
-    {
-      return (! xisnan (scalar)
-	      && D_NINT (scalar) == scalar
-	      && NINTbig (scalar) == 1);
-    }
-
-  bool valid_as_zero_index (void) const
-    {
-      return (! xisnan (scalar)
-	      && D_NINT (scalar) == scalar
-	      && NINTbig (scalar) == 0);
-    }
-
   int8NDArray
   int8_array_value (void) const
     { return int8NDArray (dim_vector (1, 1), scalar); }
 
   int16NDArray
   int16_array_value (void) const
     { return int16NDArray (dim_vector (1, 1), scalar); }
 
diff --git a/src/ov-str-mat.cc b/src/ov-str-mat.cc
--- a/src/ov-str-mat.cc
+++ b/src/ov-str-mat.cc
@@ -137,24 +137,16 @@ octave_char_matrix_str::resize (const di
   charNDArray retval (matrix);
   if (fill)
     retval.resize (dv, charNDArray::resize_fill_value());
   else
     retval.resize (dv);
   return octave_value (retval, true);
 }
 
-bool
-octave_char_matrix_str::valid_as_scalar_index (void) const
-{
-  bool retval = false;
-  error ("octave_char_matrix_str::valid_as_scalar_index(): not implemented");
-  return retval;
-}
-
 #define CHAR_MATRIX_CONV(T, INIT, TNAME, FCN) \
   T retval INIT; \
  \
   if (! force_string_conv) \
     gripe_invalid_conversion ("string", TNAME); \
   else \
     { \
       warning_with_id ("Octave:str-to-num", \
diff --git a/src/ov-str-mat.h b/src/ov-str-mat.h
--- a/src/ov-str-mat.h
+++ b/src/ov-str-mat.h
@@ -102,18 +102,16 @@ public:
   bool is_string (void) const { return true; }
 
   bool is_real_type (void) const { return false; }
 
   bool is_matrix_type (void) const { return false; }
 
   bool is_numeric_type (void) const { return false; }
 
-  bool valid_as_scalar_index (void) const;
-
   double double_value (bool = false) const;
 
   Matrix matrix_value (bool = false) const;
 
   NDArray array_value (bool = false) const;
 
   Complex complex_value (bool = false) const;
 
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -565,22 +565,16 @@ public:
     { return rep->is_matrix_type (); }
 
   bool is_numeric_type (void) const
     { return rep->is_numeric_type (); }
 
   bool is_sparse_type (void) const
     { return rep->is_sparse_type (); }
 
-  bool valid_as_scalar_index (void) const
-    { return rep->valid_as_scalar_index (); }
-
-  bool valid_as_zero_index (void) const
-    { return rep->valid_as_zero_index (); }
-
   // Does this constant correspond to a truth value?
 
   bool is_true (void) const
     { return rep->is_true (); }
 
   // Do two constants match (in a switch statement)?
   
   bool is_equal (const octave_value&) const;
