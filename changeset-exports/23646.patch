# HG changeset patch
# User Rik <rik@octave.org>
# Date 1497893455 25200
#      Mon Jun 19 10:30:55 2017 -0700
# Node ID 0a5c6836c4998a6b80623ab73f8c9a1519c2fdca
# Parent  e553b7b2fe395332003d7b2caa5aa0060485d51b
Use tgamma, tgammaf from C++ std library.
These functions are guaranteed to be part of C++11 standard library.

* configure.ac: Remove AC_CHECK_FUNCS for tgamma, tgammaf.
Remove AC_CHECK_DECLS for tgamma.

* lo-specfun.cc: Delegate to std::tgamma or std::tgammaf.

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -2406,41 +2406,24 @@ dnl Use multiple AC_CHECKs to avoid line
 AC_CHECK_FUNCS([ctermid dup2])
 AC_CHECK_FUNCS([endgrent endpwent execvp fork])
 AC_CHECK_FUNCS([getegid geteuid getgid getgrent getgrgid getgrnam])
 AC_CHECK_FUNCS([getpgrp getpid getppid getpwent getpwuid getuid])
 AC_CHECK_FUNCS([isascii kill])
 AC_CHECK_FUNCS([lgamma lgammaf lgamma_r lgammaf_r])
 AC_CHECK_FUNCS([realpath resolvepath])
 AC_CHECK_FUNCS([select setgrent setpwent setsid siglongjmp strsignal])
-AC_CHECK_FUNCS([tcgetattr tcsetattr tgammaf toascii])
+AC_CHECK_FUNCS([tcgetattr tcsetattr toascii])
 AC_CHECK_FUNCS([umask waitpid])
 AC_CHECK_FUNCS([_getch _kbhit])
 
 dnl There are no workarounds in the code for missing these functions.
 AC_CHECK_FUNCS([sqrt sqrtf], [],
                [AC_MSG_ERROR([Missing function required to build Octave])])
 
-## exp2, round, tgamma function checks
-AC_LANG_PUSH(C++)
-AC_CHECK_DECLS([tgamma], [], [], [[#include <cmath>]])
-AC_CHECK_FUNCS([tgamma])
-AH_VERBATIM([Z_FUNCS_AND_DECLS], [
-#if defined (__cplusplus)
-extern "C" {
-#endif
-#if HAVE_TGAMMA && ! HAVE_DECL_TGAMMA
-double tgamma (double);
-#endif
-#if defined (__cplusplus)
-}
-#endif
-])
-AC_LANG_POP(C++)
-
 ## Look in <complex> for C++ variants of math functions that we need.
 
 OCTAVE_CHECK_FUNC_COMPLEX(acos)
 OCTAVE_CHECK_FUNC_COMPLEX(acosh)
 OCTAVE_CHECK_FUNC_COMPLEX(asin)
 OCTAVE_CHECK_FUNC_COMPLEX(asinh)
 OCTAVE_CHECK_FUNC_COMPLEX(atan)
 OCTAVE_CHECK_FUNC_COMPLEX(atanh)
diff --git a/liboctave/numeric/lo-specfun.cc b/liboctave/numeric/lo-specfun.cc
--- a/liboctave/numeric/lo-specfun.cc
+++ b/liboctave/numeric/lo-specfun.cc
@@ -227,35 +227,30 @@ namespace octave
       return FloatComplex (ret.real (), ret.imag ());
     }
 
     double
     gamma (double x)
     {
       double result;
 
-      // Special cases for (near) compatibility with Matlab instead of
-      // tgamma.  Matlab does not have -0.
+      // Special cases for (near) compatibility with Matlab instead of tgamma.
+      // Matlab does not have -0.
 
       if (x == 0)
         result = (octave::math::negative_sign (x)
                   ? -octave::numeric_limits<double>::Inf ()
                   : octave::numeric_limits<double>::Inf ());
-      else if ((x < 0 && octave::math::x_nint (x) == x) || octave::math::isinf (x))
+      else if ((x < 0 && octave::math::x_nint (x) == x)
+               || octave::math::isinf (x))
         result = octave::numeric_limits<double>::Inf ();
       else if (octave::math::isnan (x))
         result = octave::numeric_limits<double>::NaN ();
       else
-        {
-#if defined (HAVE_TGAMMA)
-          result = tgamma (x);
-#else
-          F77_XFCN (xdgamma, XDGAMMA, (x, result));
-#endif
-        }
+        result = std::tgamma (x);
 
       return result;
     }
 
     double
     lgamma (double x)
     {
 #if defined (HAVE_LGAMMA)
@@ -304,35 +299,30 @@ namespace octave
         return result;
     }
 
     float
     gamma (float x)
     {
       float result;
 
-      // Special cases for (near) compatibility with Matlab instead of
-      // tgamma.  Matlab does not have -0.
+      // Special cases for (near) compatibility with Matlab instead of tgamma.
+      // Matlab does not have -0.
 
       if (x == 0)
         result = (octave::math::negative_sign (x)
                   ? -octave::numeric_limits<float>::Inf ()
                   : octave::numeric_limits<float>::Inf ());
-      else if ((x < 0 && octave::math::x_nint (x) == x) || octave::math::isinf (x))
+      else if ((x < 0 && octave::math::x_nint (x) == x)
+               || octave::math::isinf (x))
         result = octave::numeric_limits<float>::Inf ();
       else if (octave::math::isnan (x))
         result = octave::numeric_limits<float>::NaN ();
       else
-        {
-#if defined (HAVE_TGAMMA)
-          result = tgammaf (x);
-#else
-          F77_XFCN (xgamma, XGAMMA, (x, result));
-#endif
-        }
+        result = std::tgammaf (x);
 
       return result;
     }
 
     float
     lgamma (float x)
     {
 #if defined (HAVE_LGAMMAF)
