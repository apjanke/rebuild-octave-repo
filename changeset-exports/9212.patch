# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1242632809 -7200
#      Mon May 18 09:46:49 2009 +0200
# Node ID 6feb27c38da13e5d02d2897495c8d8213753a94e
# Parent  f0c3d3fc49039c26bba3bc04ccf86f2eb4edf491
support central differences in fminunc and fsolve

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,15 @@
+2009-05-14  Jaroslav Hajek  <highegg@gmail.com>
+
+	* optimization/__fdjac__.m: Support central differences.
+	* optimization/fsolve.m: Support central differences. Add FinDiffType
+	option.
+	* optimization/fminunc.m: Ditto.
+
 2009-05-17  Rik Wehbring  <rdrider0-list@yahoo.com>
 
 	* *.m: Simplify Texinfo documentation in .m scripts by removing 
 	redundant @iftex calls
 
 2009-05-17  Jaroslav Hajek  <highegg@gmail.com>
 
 	* optimization/fminunc.m: Improve TR updating strategy.
diff --git a/scripts/optimization/__fdjac__.m b/scripts/optimization/__fdjac__.m
--- a/scripts/optimization/__fdjac__.m
+++ b/scripts/optimization/__fdjac__.m
@@ -16,22 +16,33 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn{Function File} {} __fdjac__ (@var{fcn}, @var{x}, @var{fvec}, @var{err})
 ## Undocumented internal function.
 ## @end deftypefn
 
-function fjac = __fdjac__ (fcn, x, fvec, err = 0)
-  err = sqrt (max (eps, err));
-  h = abs (x(:))*err;
-  h(h == 0) = err;
-  fjac = zeros (length (fvec), numel (x));
-  for i = 1:numel (x)
-    x1 = x;
-    x1(i) += h(i);
-    fjac(:,i) = (fcn (x1)(:) - fvec) / h(i);
-  endfor
+function fjac = __fdjac__ (fcn, x, fvec, cdif, err = 0)
+  if (cdif)
+    err = (max (eps, err)) ^ (1/3);
+    h = max (abs (x), 1)*err; # FIXME?
+    fjac = zeros (length (fvec), numel (x));
+    for i = 1:numel (x)
+      x1 = x2 = x;
+      x1(i) += h(i);
+      x2(i) -= h(i);
+      fjac(:,i) = (fcn (x1)(:) - fcn (x2)(:)) / (x1(i) - x2(i));
+    endfor
+  else
+    err = sqrt (max (eps, err));
+    h = max (abs (x), 1)*err; # FIXME?
+    fjac = zeros (length (fvec), numel (x));
+    for i = 1:numel (x)
+      x1 = x;
+      x1(i) += h(i);
+      fjac(:,i) = (fcn (x1)(:) - fvec) / (x1(i) - x(i));
+    endfor
+  endif
 endfunction
 
 
 
diff --git a/scripts/optimization/fminunc.m b/scripts/optimization/fminunc.m
--- a/scripts/optimization/fminunc.m
+++ b/scripts/optimization/fminunc.m
@@ -24,20 +24,20 @@
 ## Solve a unconstrained optimization problem defined by the function @var{fcn}.
 ## @var{fcn} should accepts a vector (array) defining the unknown variables,
 ## and return the objective function value, optionally with gradient.
 ## In other words, this function attempts to determine a vector @var{x} such 
 ## that @code{@var{fcn} (@var{x})} is a local minimum.
 ## @var{x0} determines a starting guess. The shape of @var{x0} is preserved
 ## in all calls to @var{fcn}, but otherwise it is treated as a column vector.
 ## @var{options} is a structure specifying additional options.
-## Currently, @code{fsolve} recognizes these options:
+## Currently, @code{fminunc} recognizes these options:
 ## @code{"FunValCheck"}, @code{"OutputFcn"}, @code{"TolX"},
 ## @code{"TolFun"}, @code{"MaxIter"}, @code{"MaxFunEvals"}, 
-## @code{"GradObj"}.
+## @code{"GradObj"}, @code{"FinDiffType"}.
 ##
 ## If @code{"GradObj"} is @code{"on"}, it specifies that @var{fcn},
 ## called with 2 output arguments, also returns the Jacobian matrix
 ## of right-hand sides at the requested point.  @code{"TolX"} specifies
 ## the termination tolerance in the unknown variables, while 
 ## @code{"TolFun"} is a tolerance for equations. Default is @code{1e-7}
 ## for both @code{"TolX"} and @code{"TolFun"}.
 ## 
@@ -69,32 +69,33 @@
 
 function [x, fval, info, output, grad, hess] = fminunc (fcn, x0, options = struct ())
 
   ## Get default options if requested.
   if (nargin == 1 && ischar (fcn) && strcmp (fcn, 'defaults'))
     x = optimset ("MaxIter", 400, "MaxFunEvals", Inf, \
     "GradObj", "off", "TolX", 1.5e-8, "TolFun", 1.5e-8,
     "OutputFcn", [], "FunValCheck", "off",
-    "ComplexEqn", "off");
+    "FinDiffType", "central");
     return;
   endif
 
   if (nargin < 2 || nargin > 3 || ! ismatrix (x0))
     print_usage ();
   endif    
 
   if (ischar (fcn))
     fcn = str2func (fcn);
   endif
 
   xsiz = size (x0);
   n = numel (x0);
 
   has_grad = strcmpi (optimget (options, "GradObj", "off"), "on");
+  cdif = strcmpi (optimget (options, "FinDiffType", "central"), "central");
   maxiter = optimget (options, "MaxIter", 400);
   maxfev = optimget (options, "MaxFunEvals", Inf);
   outfcn = optimget (options, "OutputFcn");
 
   funvalchk = strcmpi (optimget (options, "FunValCheck", "off"), "on");
 
   if (funvalchk)
     ## Replace fcn with a guarded version.
@@ -147,18 +148,18 @@ function [x, fval, info, output, grad, h
     grad0 = grad;
 
     ## Calculate function value and gradient (possibly via FD).
     if (has_grad)
       [fval, grad] = fcn (reshape (x, xsiz));
       grad = grad(:);
       nfev ++;
     else
-      grad = __fdjac__ (fcn, reshape (x, xsiz), fval)(:);
-      nfev += length (x);
+      grad = __fdjac__ (fcn, reshape (x, xsiz), fval, cdif)(:);
+      nfev += (1 + cdif) * length (x);
     endif
 
     if (niter == 1)
       ## Initialize by identity matrix. 
       hesr = eye (n);
     else
       ## Use the damped BFGS formula.
       y = grad - grad0;
diff --git a/scripts/optimization/fsolve.m b/scripts/optimization/fsolve.m
--- a/scripts/optimization/fsolve.m
+++ b/scripts/optimization/fsolve.m
@@ -121,32 +121,33 @@
 
 function [x, fvec, info, output, fjac] = fsolve (fcn, x0, options = struct ())
 
   ## Get default options if requested.
   if (nargin == 1 && ischar (fcn) && strcmp (fcn, 'defaults'))
     x = optimset ("MaxIter", 400, "MaxFunEvals", Inf, \
     "Jacobian", "off", "TolX", 1.5e-8, "TolFun", 1.5e-8,
     "OutputFcn", [], "Updating", "on", "FunValCheck", "off",
-    "ComplexEqn", "off");
+    "ComplexEqn", "off", "FinDiffType", "central");
     return;
   endif
 
   if (nargin < 2 || nargin > 3 || ! ismatrix (x0))
     print_usage ();
   endif    
 
   if (ischar (fcn))
     fcn = str2func (fcn);
   endif
 
   xsiz = size (x0);
   n = numel (x0);
 
   has_jac = strcmpi (optimget (options, "Jacobian", "off"), "on");
+  cdif = strcmpi (optimget (options, "FinDiffType", "central"), "central");
   maxiter = optimget (options, "MaxIter", 400);
   maxfev = optimget (options, "MaxFunEvals", Inf);
   outfcn = optimget (options, "OutputFcn");
   updating = strcmpi (optimget (options, "Updating", "on"), "on");
   complexeqn = strcmpi (optimget (options, "ComplexEqn", "off"), "on");
 
   funvalchk = strcmpi (optimget (options, "FunValCheck", "off"), "on");
 
@@ -203,18 +204,18 @@ function [x, fvec, info, output, fjac] =
       [fvec, fjac] = fcn (reshape (x, xsiz));
       ## If the jacobian is sparse, disable Broyden updating.
       if (issparse (fjac))
         updating = false;
       endif
       fvec = fvec(:);
       nfev ++;
     else
-      fjac = __fdjac__ (fcn, reshape (x, xsiz), fvec);
-      nfev += length (x);
+      fjac = __fdjac__ (fcn, reshape (x, xsiz), fvec, cdif);
+      nfev += (1 + cdif) * length (x);
     endif
 
     ## For square and overdetermined systems, we update a QR
     ## factorization of the jacobian to avoid solving a full system in each
     ## step. In this case, we pass a triangular matrix to __dogleg__.
     useqr = updating && m >= n && n > 10;
 
     if (useqr)
