# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1255947178 -7200
#      Mon Oct 19 12:12:58 2009 +0200
# Node ID 78ac37d735577196763c36249727557a1e9ce3da
# Parent  13b57eec944075b67a6b201df1599f36eb349069
fix cellslices to handle empty ranges with non-positive bounds

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2009-10-19  Jaroslav Hajek  <highegg@gmail.com>
+
+	* DLD-FUNCTIONS/cellfun.cc (Fcellslices): Allow non-positive indices
+	as bounds.
+
 2009-10-17  Jaroslav Hajek  <highegg@gmail.com>
 
 	* data.cc (Fnth_element): Clarify docstring.
 
 2009-10-16  Jaroslav Hajek  <highegg@gmail.com>
 
 	* Cell.cc: Remove traces of ArrayN.
 	* Cell.h: Ditto.
diff --git a/src/DLD-FUNCTIONS/cellfun.cc b/src/DLD-FUNCTIONS/cellfun.cc
--- a/src/DLD-FUNCTIONS/cellfun.cc
+++ b/src/DLD-FUNCTIONS/cellfun.cc
@@ -1325,39 +1325,42 @@ mat2cell (reshape(1:16,4,4),[3,1],[3,1])
 %!test
 %! x = 'abcdefghij';
 %! c = mat2cell(x,1,[0,4,2,0,4,0]);
 %! empty1by0str = resize('',1,0);
 %! assert(c,{empty1by0str,'abcd','ef',empty1by0str,'ghij',empty1by0str})
 
 */
 
+// FIXME: it would be nice to allow ranges being handled without a conversion.
 template <class NDA>
 static Cell 
-do_cellslices_nda (const NDA& array, const idx_vector& lb, const idx_vector& ub)
+do_cellslices_nda (const NDA& array, 
+                   const Array<octave_idx_type>& lb, 
+                   const Array<octave_idx_type>& ub)
 {
-  octave_idx_type n = lb.length (0);
+  octave_idx_type n = lb.length ();
   Cell retval (1, n);
   if (array.is_vector ())
     {
       for (octave_idx_type i = 0; i < n && ! error_state; i++)
-        retval(i) = array.index (idx_vector (lb(i), ub(i) + 1));
+        retval(i) = array.index (idx_vector (lb(i) - 1, ub(i)));
     }
   else
     {
       dim_vector dv = array.dims ();
       octave_idx_type nl = 1;
       for (int i = 0; i < dv.length () - 1; i++) nl *= dv(i);
       for (octave_idx_type i = 0; i < n && ! error_state; i++)
         {
           // Do it with a single index to speed things up.
           dv = array.dims ();
           dv(dv.length () - 1) = ub(i) + 1 - lb(i);
           dv.chop_trailing_singletons ();
-          retval(i) = array.index (idx_vector (nl*lb(i), nl*(ub(i) + 1))).reshape (dv);
+          retval(i) = array.index (idx_vector (nl*(lb(i) - 1), nl*ub(i))).reshape (dv);
         }
     }
 
   return retval;
 }
 
 DEFUN_DLD (cellslices, args, ,
   "-*- texinfo -*-\n\
@@ -1380,22 +1383,21 @@ If @var{X} is a matrix or array, indexin
 @seealso{mat2cell}\n\
 @end deftypefn")
 {
   octave_value retval;
   int nargin = args.length ();
   if (nargin == 3)
     {
       octave_value x = args(0);
-      idx_vector lb = args(1).index_vector (), ub = args(2).index_vector ();
+      Array<octave_idx_type> lb = args(1).octave_idx_type_vector_value ();
+      Array<octave_idx_type> ub = args(2).octave_idx_type_vector_value ();
       if (! error_state)
         {
-          if (lb.is_colon () || ub.is_colon ())
-            error ("cellslices: invalid use of colon");
-          else if (lb.length (0) != ub.length (0))
+          if (lb.length () != ub.length ())
             error ("cellslices: the lengths of lb and ub must match");
           else
             {
               Cell retcell;
               if (! x.is_sparse_type () && x.is_matrix_type ())
                 {
                   // specialize for some dense arrays.
                   if (x.is_bool_type ())
@@ -1434,24 +1436,23 @@ If @var{X} is a matrix or array, indexin
                         retcell = do_cellslices_nda (x.float_array_value (), lb, ub);
                       else
                         retcell = do_cellslices_nda (x.array_value (), lb, ub);
                     }
                 }
               else
                 {
                   // generic code.
-                  octave_idx_type n = lb.length (0);
+                  octave_idx_type n = lb.length ();
                   retcell = Cell (1, n);
                   octave_idx_type nind = x.dims ().is_vector () ? 1 : x.ndims ();
                   octave_value_list idx (nind, octave_value::magic_colon_t);
                   for (octave_idx_type i = 0; i < n && ! error_state; i++)
                     {
-                      idx(nind-1) = Range (static_cast<double> (lb(i)) + 1,
-                                           static_cast<double> (ub(i)) + 1);
+                      idx(nind-1) = Range (lb(i), ub(i));
                       retcell(i) = x.do_index_op (idx);
                     }
                 }
               if (! error_state)
                 retval = retcell;
             }
         }
     }
