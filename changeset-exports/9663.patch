# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1253700830 -7200
#      Wed Sep 23 12:13:50 2009 +0200
# Node ID 7e5b4de5fbfe03b6c85bfe6342587b040350be40
# Parent  0d3b248f4ab6775cbd7a1d56c8b235e5e977296b
improve mixed real x complex ops

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -294,16 +294,27 @@ ComplexMatrix::ComplexMatrix (const bool
 ComplexMatrix::ComplexMatrix (const charMatrix& a)
   : MArray2<Complex> (a.rows (), a.cols (), 0.0)
 {
   for (octave_idx_type i = 0; i < a.rows (); i++)
     for (octave_idx_type j = 0; j < a.cols (); j++)
       elem (i, j) = static_cast<unsigned char> (a.elem (i, j));
 }
 
+ComplexMatrix::ComplexMatrix (const Matrix& re, const Matrix& im)
+  : MArray2<Complex> (re.rows (), re.cols ())
+{
+  if (im.rows () != rows () || im.cols () != cols ())
+    (*current_liboctave_error_handler) ("complex: internal error");
+
+  octave_idx_type nel = numel ();
+  for (octave_idx_type i = 0; i < nel; i++)
+    xelem (i) = Complex (re(i), im(i));
+}
+
 bool
 ComplexMatrix::operator == (const ComplexMatrix& a) const
 {
   if (rows () != a.rows () || cols () != a.cols ())
     return false;
 
   return mx_inline_equal (length (), data (), a.data ());
 }
@@ -3722,25 +3733,29 @@ Sylvester (const ComplexMatrix& a, const
   retval = -ua * cx * ub.hermitian ();
 
   return retval;
 }
 
 ComplexMatrix
 operator * (const ComplexMatrix& m, const Matrix& a)
 {
-  ComplexMatrix tmp (a);
-  return m * tmp;
+  if (m.columns () > std::min (m.rows (), a.columns ()) / 10)
+    return ComplexMatrix (real (m) * a, imag (m) * a);
+  else
+    return m * ComplexMatrix (a);
 }
 
 ComplexMatrix
 operator * (const Matrix& m, const ComplexMatrix& a)
 {
-  ComplexMatrix tmp (m);
-  return tmp * a;
+  if (a.rows () > std::min (m.rows (), a.columns ()) / 10)
+    return ComplexMatrix (m * real (a), m * imag (a));
+  else
+    return m * ComplexMatrix (a);
 }
 
 /* Simple Dot Product, Matrix-Vector and Matrix-Matrix Unit tests
 %!assert([1+i 2+i 3+i] * [ 4+i ; 5+i ; 6+i], 29+21i, 1e-14)
 %!assert([1+i 2+i ; 3+i 4+i ] * [5+i ; 6+i], [15 + 14i ; 37 + 18i], 1e-14)
 %!assert([1+i 2+i ; 3+i 4+i ] * [5+i 6+i ; 7+i 8+i], [17 + 15i 20 + 17i; 41 + 19i 48 + 21i], 1e-14)
 %!assert([1 i]*[i 0]', -i);
 */
diff --git a/liboctave/CMatrix.h b/liboctave/CMatrix.h
--- a/liboctave/CMatrix.h
+++ b/liboctave/CMatrix.h
@@ -59,16 +59,18 @@ public:
   ComplexMatrix (const ComplexMatrix& a) : MArray2<Complex> (a) { }
 
   template <class U>
   ComplexMatrix (const MArray2<U>& a) : MArray2<Complex> (a) { }
 
   template <class U>
   ComplexMatrix (const Array2<U>& a) : MArray2<Complex> (a) { }
 
+  ComplexMatrix (const Matrix& re, const Matrix& im);
+
   explicit ComplexMatrix (const Matrix& a);
 
   explicit ComplexMatrix (const RowVector& rv);
 
   explicit ComplexMatrix (const ColumnVector& cv);
 
   explicit ComplexMatrix (const DiagMatrix& a);
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,19 @@
+2009-09-23  Jaroslav Hajek  <highegg@gmail.com>
+
+	* CMatrix.cc (ComplexMatrix::ComplexMatrix (const Matrix&, const
+	Matrix&)): New constructor.
+	(operator * (Matrix, ComplexMatrix), operator * (ComplexMatrix,
+	Matrix)): Optimize.
+	* fCMatrix.cc (FloatComplexMatrix::FloatComplexMatrix (const FloatMatrix&, const
+	FloatMatrix&)): New constructor.
+	(operator * (FloatMatrix, FloatComplexMatrix), operator * (FloatComplexMatrix,
+	FloatMatrix)): Optimize.
+
 2009-09-23  Jaroslav Hajek  <highegg@gmail.com>
 
 	* dMatrix.cc (stack_complex_matrix, unstack_complex_matrix): New
 	static funcs.
 	(Matrix::solve (..., const ComplexMatrix&, ...)): Use the above funcs.
 	Improve forwarding.
 	* fMatrix.cc (stack_complex_matrix, unstack_complex_matrix): New
 	static funcs.
diff --git a/liboctave/fCMatrix.cc b/liboctave/fCMatrix.cc
--- a/liboctave/fCMatrix.cc
+++ b/liboctave/fCMatrix.cc
@@ -293,16 +293,27 @@ FloatComplexMatrix::FloatComplexMatrix (
 FloatComplexMatrix::FloatComplexMatrix (const charMatrix& a)
   : MArray2<FloatComplex> (a.rows (), a.cols (), 0.0)
 {
   for (octave_idx_type i = 0; i < a.rows (); i++)
     for (octave_idx_type j = 0; j < a.cols (); j++)
       elem (i, j) = static_cast<unsigned char> (a.elem (i, j));
 }
 
+FloatComplexMatrix::FloatComplexMatrix (const FloatMatrix& re, const FloatMatrix& im)
+  : MArray2<FloatComplex> (re.rows (), re.cols ())
+{
+  if (im.rows () != rows () || im.cols () != cols ())
+    (*current_liboctave_error_handler) ("complex: internal error");
+
+  octave_idx_type nel = numel ();
+  for (octave_idx_type i = 0; i < nel; i++)
+    xelem (i) = FloatComplex (re(i), im(i));
+}
+
 bool
 FloatComplexMatrix::operator == (const FloatComplexMatrix& a) const
 {
   if (rows () != a.rows () || cols () != a.cols ())
     return false;
 
   return mx_inline_equal (length (), data (), a.data ());
 }
@@ -3715,25 +3726,29 @@ Sylvester (const FloatComplexMatrix& a, 
   retval = -ua * cx * ub.hermitian ();
 
   return retval;
 }
 
 FloatComplexMatrix
 operator * (const FloatComplexMatrix& m, const FloatMatrix& a)
 {
-  FloatComplexMatrix tmp (a);
-  return m * tmp;
+  if (m.columns () > std::min (m.rows (), a.columns ()) / 10)
+    return FloatComplexMatrix (real (m) * a, imag (m) * a);
+  else
+    return m * FloatComplexMatrix (a);
 }
 
 FloatComplexMatrix
 operator * (const FloatMatrix& m, const FloatComplexMatrix& a)
 {
-  FloatComplexMatrix tmp (m);
-  return tmp * a;
+  if (a.rows () > std::min (m.rows (), a.columns ()) / 10)
+    return FloatComplexMatrix (m * real (a), m * imag (a));
+  else
+    return m * FloatComplexMatrix (a);
 }
 
 /* Simple Dot Product, Matrix-Vector and Matrix-Matrix Unit tests
 %!assert(single([1+i 2+i 3+i]) * single([ 4+i ; 5+i ; 6+i]), single(29+21i), 5e-7)
 %!assert(single([1+i 2+i ; 3+i 4+i ]) * single([5+i ; 6+i]), single([15 + 14i ; 37 + 18i]), 5e-7)
 %!assert(single([1+i 2+i ; 3+i 4+i ]) * single([5+i 6+i ; 7+i 8+i]), single([17 + 15i 20 + 17i; 41 + 19i 48 + 21i]), 5e-7)
 %!assert(single([1 i])*single([i 0])', single(-i));
 */
diff --git a/liboctave/fCMatrix.h b/liboctave/fCMatrix.h
--- a/liboctave/fCMatrix.h
+++ b/liboctave/fCMatrix.h
@@ -77,16 +77,18 @@ public:
   explicit FloatComplexMatrix (const FloatComplexColumnVector& cv);
 
   explicit FloatComplexMatrix (const FloatComplexDiagMatrix& a);
 
   explicit FloatComplexMatrix (const boolMatrix& a);
 
   explicit FloatComplexMatrix (const charMatrix& a);
 
+  FloatComplexMatrix (const FloatMatrix& re, const FloatMatrix& im);
+
   FloatComplexMatrix& operator = (const FloatComplexMatrix& a)
     {
       MArray2<FloatComplex>::operator = (a);
       return *this;
     }
 
   bool operator == (const FloatComplexMatrix& a) const;
   bool operator != (const FloatComplexMatrix& a) const;
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2009-09-23  Jaroslav Hajek  <highegg@gmail.com>
+
+	* OPERATORS/op-m-cm.cc: Declare and install trans_mul operator.
+	* OPERATORS/op-fm-fcm.cc: Ditto.
+	* OPERATORS/op-cm-m.cc: Declare and install mul_trans operator.
+	* OPERATORS/op-fcm-fm.cc: Ditto.
+
 2009-09-23  Jaroslav Hajek  <highegg@gmail.com>
 
 	* OPERATORS/op-m-cm.cc: Declare and install trans_ldiv operator.
 	* OPERATORS/op-fm-fcm.cc: Ditto.
 
 2009-09-23  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov.h (octave_value::op_trans_ldiv, op_herm_ldiv): New enum constants.
diff --git a/src/OPERATORS/op-cm-m.cc b/src/OPERATORS/op-cm-m.cc
--- a/src/OPERATORS/op-cm-m.cc
+++ b/src/OPERATORS/op-cm-m.cc
@@ -42,16 +42,27 @@ along with Octave; see the file COPYING.
 
 // complex matrix by matrix ops.
 
 DEFNDBINOP_OP (add, complex_matrix, matrix, complex_array, array, +)
 DEFNDBINOP_OP (sub, complex_matrix, matrix, complex_array, array, -)
 
 DEFBINOP_OP (mul, complex_matrix, matrix, *)
 
+DEFBINOP (mul_trans, complex_matrix, matrix)
+{
+  CAST_BINOP_ARGS (const octave_complex_matrix&, const octave_matrix&);
+
+  ComplexMatrix m1 = v1.complex_matrix_value ();
+  Matrix m2 = v2.matrix_value ();
+
+  return ComplexMatrix (xgemm (false, real (m1), true, m2),
+                        xgemm (false, imag (m1), true, m2));
+}
+
 DEFBINOP (div, complex_matrix, matrix)
 {
   CAST_BINOP_ARGS (const octave_complex_matrix&, const octave_matrix&);
   MatrixType typ = v2.matrix_type ();
   
   ComplexMatrix ret = xdiv (v1.complex_matrix_value (), 
 			    v2.matrix_value (), typ);
 
@@ -119,16 +130,18 @@ install_cm_m_ops (void)
   INSTALL_BINOP (op_gt, octave_complex_matrix, octave_matrix, gt);
   INSTALL_BINOP (op_ne, octave_complex_matrix, octave_matrix, ne);
   INSTALL_BINOP (op_el_mul, octave_complex_matrix, octave_matrix, el_mul);
   INSTALL_BINOP (op_el_div, octave_complex_matrix, octave_matrix, el_div);
   INSTALL_BINOP (op_el_pow, octave_complex_matrix, octave_matrix, el_pow);
   INSTALL_BINOP (op_el_ldiv, octave_complex_matrix, octave_matrix, el_ldiv);
   INSTALL_BINOP (op_el_and, octave_complex_matrix, octave_matrix, el_and);
   INSTALL_BINOP (op_el_or, octave_complex_matrix, octave_matrix, el_or);
+  INSTALL_BINOP (op_mul_trans, octave_complex_matrix, octave_matrix, mul_trans);
+  INSTALL_BINOP (op_mul_herm, octave_complex_matrix, octave_matrix, mul_trans);
 
   INSTALL_CATOP (octave_complex_matrix, octave_matrix, cm_m);
 
   INSTALL_ASSIGNOP (op_asn_eq, octave_complex_matrix, octave_matrix, assign);
 }
 
 /*
 ;;; Local Variables: ***
diff --git a/src/OPERATORS/op-fcm-fm.cc b/src/OPERATORS/op-fcm-fm.cc
--- a/src/OPERATORS/op-fcm-fm.cc
+++ b/src/OPERATORS/op-fcm-fm.cc
@@ -44,16 +44,27 @@ along with Octave; see the file COPYING.
 
 // complex matrix by matrix ops.
 
 DEFNDBINOP_OP (add, float_complex_matrix, float_matrix, float_complex_array, float_array, +)
 DEFNDBINOP_OP (sub, float_complex_matrix, float_matrix, float_complex_array, float_array, -)
 
 DEFBINOP_OP (mul, float_complex_matrix, float_matrix, *)
 
+DEFBINOP (mul_trans, float_complex_matrix, float_matrix)
+{
+  CAST_BINOP_ARGS (const octave_float_complex_matrix&, const octave_float_matrix&);
+
+  FloatComplexMatrix m1 = v1.float_complex_matrix_value ();
+  FloatMatrix m2 = v2.float_matrix_value ();
+
+  return FloatComplexMatrix (xgemm (false, real (m1), true, m2),
+                             xgemm (false, imag (m1), true, m2));
+}
+
 DEFBINOP (div, float_complex_matrix, float_matrix)
 {
   CAST_BINOP_ARGS (const octave_float_complex_matrix&, 
 		   const octave_float_matrix&);
   MatrixType typ = v2.matrix_type ();
   
   FloatComplexMatrix ret = xdiv (v1.float_complex_matrix_value (), 
 				 v2.float_matrix_value (), typ);
@@ -152,16 +163,20 @@ install_fcm_fm_ops (void)
   INSTALL_BINOP (op_el_pow, octave_float_complex_matrix, 
 		 octave_float_matrix, el_pow);
   INSTALL_BINOP (op_el_ldiv, octave_float_complex_matrix, 
 		 octave_float_matrix, el_ldiv);
   INSTALL_BINOP (op_el_and, octave_float_complex_matrix, 
 		 octave_float_matrix, el_and);
   INSTALL_BINOP (op_el_or, octave_float_complex_matrix, 
 		 octave_float_matrix, el_or);
+  INSTALL_BINOP (op_mul_trans, octave_float_complex_matrix, 
+                 octave_float_matrix, mul_trans);
+  INSTALL_BINOP (op_mul_herm, octave_float_complex_matrix, 
+                 octave_float_matrix, mul_trans);
 
   INSTALL_CATOP (octave_float_complex_matrix, octave_float_matrix, fcm_fm);
   INSTALL_CATOP (octave_complex_matrix, octave_float_matrix, cm_fm);
   INSTALL_CATOP (octave_float_complex_matrix, octave_matrix, fcm_m);
 
   INSTALL_ASSIGNOP (op_asn_eq, octave_float_complex_matrix, 
 		    octave_float_matrix, assign);
   INSTALL_ASSIGNOP (op_asn_eq, octave_complex_matrix, 
diff --git a/src/OPERATORS/op-fm-fcm.cc b/src/OPERATORS/op-fm-fcm.cc
--- a/src/OPERATORS/op-fm-fcm.cc
+++ b/src/OPERATORS/op-fm-fcm.cc
@@ -46,16 +46,27 @@ along with Octave; see the file COPYING.
 
 DEFNDBINOP_OP (add, float_matrix, float_complex_matrix, float_array, 
 	       float_complex_array, +)
 DEFNDBINOP_OP (sub, float_matrix, float_complex_matrix, float_array, 
 	       float_complex_array, -)
 
 DEFBINOP_OP (mul, float_matrix, float_complex_matrix, *)
 
+DEFBINOP (trans_mul, float_matrix, float_complex_matrix)
+{
+  CAST_BINOP_ARGS (const octave_float_matrix&, const octave_float_complex_matrix&);
+
+  FloatMatrix m1 = v1.float_matrix_value ();
+  FloatComplexMatrix m2 = v2.float_complex_matrix_value ();
+
+  return FloatComplexMatrix (xgemm (true, m1, false, real (m2)),
+                             xgemm (true, m1, false, imag (m2)));
+}
+
 DEFBINOP (div, float_matrix, float_complex_matrix)
 {
   CAST_BINOP_ARGS (const octave_float_matrix&, 
 		   const octave_float_complex_matrix&);
   MatrixType typ = v2.matrix_type ();
   
   FloatComplexMatrix ret = xdiv (v1.float_matrix_value (), 
 				 v2.float_complex_matrix_value (), typ);
@@ -168,16 +179,24 @@ install_fm_fcm_ops (void)
   INSTALL_BINOP (op_el_pow, octave_float_matrix, 
 		 octave_float_complex_matrix, el_pow);
   INSTALL_BINOP (op_el_ldiv, octave_float_matrix, 
 		 octave_float_complex_matrix, el_ldiv);
   INSTALL_BINOP (op_el_and, octave_float_matrix, 
 		 octave_float_complex_matrix, el_and);
   INSTALL_BINOP (op_el_or, octave_float_matrix, 
 		 octave_float_complex_matrix, el_or);
+  INSTALL_BINOP (op_trans_mul, octave_float_matrix, 
+                 octave_float_complex_matrix, trans_mul);
+  INSTALL_BINOP (op_herm_mul, octave_float_matrix, 
+                 octave_float_complex_matrix, trans_mul);
+  INSTALL_BINOP (op_trans_ldiv, octave_float_matrix, 
+                 octave_float_complex_matrix, trans_ldiv);
+  INSTALL_BINOP (op_herm_ldiv, octave_float_matrix, 
+                 octave_float_complex_matrix, trans_ldiv);
 
   INSTALL_CATOP (octave_float_matrix, octave_float_complex_matrix, fm_fcm);
   INSTALL_CATOP (octave_matrix, octave_float_complex_matrix, m_fcm);
   INSTALL_CATOP (octave_float_matrix, octave_complex_matrix, fm_cm);
 
   INSTALL_ASSIGNCONV (octave_float_matrix, octave_float_complex_matrix, 
 		      octave_float_complex_matrix);
   INSTALL_ASSIGNCONV (octave_matrix, octave_float_complex_matrix, 
diff --git a/src/OPERATORS/op-m-cm.cc b/src/OPERATORS/op-m-cm.cc
--- a/src/OPERATORS/op-m-cm.cc
+++ b/src/OPERATORS/op-m-cm.cc
@@ -44,16 +44,27 @@ along with Octave; see the file COPYING.
 
 // matrix by complex matrix ops.
 
 DEFNDBINOP_OP (add, matrix, complex_matrix, array, complex_array, +)
 DEFNDBINOP_OP (sub, matrix, complex_matrix, array, complex_array, -)
 
 DEFBINOP_OP (mul, matrix, complex_matrix, *)
 
+DEFBINOP (trans_mul, matrix, complex_matrix)
+{
+  CAST_BINOP_ARGS (const octave_matrix&, const octave_complex_matrix&);
+
+  Matrix m1 = v1.matrix_value ();
+  ComplexMatrix m2 = v2.complex_matrix_value ();
+
+  return ComplexMatrix (xgemm (true, m1, false, real (m2)),
+                        xgemm (true, m1, false, imag (m2)));
+}
+
 DEFBINOP (div, matrix, complex_matrix)
 {
   CAST_BINOP_ARGS (const octave_matrix&, const octave_complex_matrix&);
   MatrixType typ = v2.matrix_type ();
   
   ComplexMatrix ret = xdiv (v1.matrix_value (), 
 			    v2.complex_matrix_value (), typ);
 
@@ -137,16 +148,18 @@ install_m_cm_ops (void)
   INSTALL_BINOP (op_gt, octave_matrix, octave_complex_matrix, gt);
   INSTALL_BINOP (op_ne, octave_matrix, octave_complex_matrix, ne);
   INSTALL_BINOP (op_el_mul, octave_matrix, octave_complex_matrix, el_mul);
   INSTALL_BINOP (op_el_div, octave_matrix, octave_complex_matrix, el_div);
   INSTALL_BINOP (op_el_pow, octave_matrix, octave_complex_matrix, el_pow);
   INSTALL_BINOP (op_el_ldiv, octave_matrix, octave_complex_matrix, el_ldiv);
   INSTALL_BINOP (op_el_and, octave_matrix, octave_complex_matrix, el_and);
   INSTALL_BINOP (op_el_or, octave_matrix, octave_complex_matrix, el_or);
+  INSTALL_BINOP (op_trans_mul, octave_matrix, octave_complex_matrix, trans_mul);
+  INSTALL_BINOP (op_herm_mul, octave_matrix, octave_complex_matrix, trans_mul);
   INSTALL_BINOP (op_trans_ldiv, octave_matrix, octave_complex_matrix, trans_ldiv);
   INSTALL_BINOP (op_herm_ldiv, octave_matrix, octave_complex_matrix, trans_ldiv);
 
   INSTALL_CATOP (octave_matrix, octave_complex_matrix, m_cm);
 
   INSTALL_ASSIGNCONV (octave_matrix, octave_complex_matrix, octave_complex_matrix);
   INSTALL_ASSIGNCONV (octave_float_matrix, octave_complex_matrix, octave_float_complex_matrix);
 
