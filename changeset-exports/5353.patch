# HG changeset patch
# User jwe
# Date 1116382704 0
#      Wed May 18 02:18:24 2005 +0000
# Node ID df230b7df93c3253f320411c5251946abe56aabd
# Parent  ac4a7df431d4e929c66021026d05c899665533b7
[project @ 2005-05-18 02:18:24 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,34 @@
+2005-05-17  John W. Eaton  <jwe@octave.org>
+
+	* ov.cc (install_types): Don't call octave_stream::register_type.
+	* ov.h, ov.cc (octave_value::octave_value (const octave_stream&,
+	int): Delete constructor.
+	(octave_value::is_stream, octave_value::stream_value,
+	octave_value::stream_number): Delete functions.
+	* ov-base.h (octave_base_value::is_stream): Delete function.
+	* ov-base.h, ov-base.cc (octave_base_value::stream_value,
+	octave_base_value::stream_number): Delete functions.
+	* file-io.cc (Fisstream): Delete function.
+	* op-file.h, op-file.cc, OPERATORS/op-fil-sbm.cc,
+	OPERATORS/op-fil-scm.cc, OPERATORS/op-fil-sm.cc,
+	* OPERATORS/op-fil-b.cc, OPERATORS/op-fil-bm.cc,
+	OPERATORS/op-fil-cm.cc, OPERATORS/op-fil-cs.cc,
+	OPERATORS/op-fil-m.cc, OPERATORS/op-fil-s.cc,
+	OPERATORS/op-fil-lis.cc, OPERATORS/op-fil-rec.cc,
+	OPERATORS/op-fil-str.cc: Delete files.
+	* Makefile.in (OP_XSRC, SPARSE_OP_XSRC): Delete op-fil-*.cc from
+	the lists.
+	(OV_INCLUDES): Delete op-file.h from the list.
+	(OV_SRC): Delete op-file.cc from the list.
+	* oct-stream.cc, oct-stream.h (octave_stream_list::insert,
+	octave_stream_list::do_insert): Return stream number instead of
+	octave_value.
+
 2005-05-16  David Bateman  <dbateman@free.fr>
 
 	* ls-mat.cc (save_mat5_binary_element): Increase size of 
 	compression buffer.
 	(load_mat5_binary_element): Allow ASCII encoded as UTF8,
 	and give error messages for multi-byte UTF8 and UTF16 and UTF32
 	encodings.
 
diff --git a/src/Makefile.in b/src/Makefile.in
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -71,17 +71,17 @@ endif
 OV_INTTYPE_INC := ov-base-int.h ov-int-traits.h ov-intx.h \
 	ov-int8.h ov-int16.h ov-int32.h ov-int64.h \
 	ov-uint8.h ov-uint16.h ov-uint32.h ov-uint64.h
 
 OV_INCLUDES := ov-re-mat.h ov-cx-mat.h ov-ch-mat.h ov-cs-list.h ov-list.h \
 	ov-struct.h ov-scalar.h ov-range.h ov-complex.h ov-va-args.h \
 	ov-colon.h ov-base.h ov-base-mat.h ov-base-scalar.h \
 	ov-streamoff.h ov-str-mat.h ov-bool-mat.h ov-bool.h \
-	ov-file.h ov-cell.h ov.h ov-fcn.h ov-builtin.h ov-dld-fcn.h \
+	ov-cell.h ov.h ov-fcn.h ov-builtin.h ov-dld-fcn.h \
 	ov-mapper.h ov-usr-fcn.h ov-fcn-handle.h ov-fcn-inline.h \
 	ov-typeinfo.h ov-type-conv.h \
 	$(OV_INTTYPE_INC)
 
 OV_SPARSE_INCLUDES := \
 	ov-base-sparse.h ov-bool-sparse.h ov-cx-sparse.h ov-re-sparse.h
 
 PT_INCLUDES := pt.h pt-all.h pt-arg-list.h pt-assign.h pt-binop.h \
@@ -110,29 +110,26 @@ TI_XSRC := Array-os.cc Array-sym.cc Arra
 
 TI_SRC := $(addprefix TEMPLATE-INST/, $(TI_XSRC))
 
 INTTYPE_OP_XSRC := op-int-concat.cc op-int-conv.cc op-double-conv.cc \
 	op-i8-i8.cc op-i16-i16.cc op-i32-i32.cc op-i64-i64.cc \
 	op-ui8-ui8.cc op-ui16-ui16.cc op-ui32-ui32.cc op-ui64-ui64.cc
 
 SPARSE_OP_XSRC := op-bm-sbm.cc op-b-sbm.cc op-cm-scm.cc op-cm-sm.cc \
-	op-cs-scm.cc op-cs-sm.cc op-fil-sbm.cc op-fil-scm.cc \
-	op-fil-sm.cc op-m-scm.cc op-m-sm.cc op-sbm-b.cc op-sbm-bm.cc \
-	op-sbm-sbm.cc op-scm-cm.cc op-scm-cs.cc op-scm-m.cc \
+	op-cs-scm.cc op-cs-sm.cc op-m-scm.cc op-m-sm.cc op-sbm-b.cc \
+	op-sbm-bm.cc op-sbm-sbm.cc op-scm-cm.cc op-scm-cs.cc op-scm-m.cc \
 	op-scm-s.cc op-scm-scm.cc op-scm-sm.cc op-sm-cm.cc \
 	op-sm-cs.cc op-sm-m.cc op-sm-s.cc op-sm-scm.cc op-sm-sm.cc \
 	op-s-scm.cc op-s-sm.cc
 
 OP_XSRC := op-b-b.cc op-b-bm.cc op-bm-b.cc op-bm-bm.cc \
 	op-cell.cc op-chm.cc op-cm-cm.cc op-cm-cs.cc op-cm-m.cc \
 	op-cm-s.cc op-cs-cm.cc op-cs-cs.cc op-cs-m.cc \
-	op-cs-s.cc op-fil-b.cc op-fil-bm.cc op-fil-cm.cc \
-	op-fil-cs.cc op-fil-m.cc op-fil-s.cc op-fil-lis.cc \
-	op-fil-rec.cc op-fil-str.cc op-list.cc op-m-cm.cc \
+	op-cs-s.cc op-list.cc op-m-cm.cc \
 	op-m-cs.cc op-m-m.cc op-m-s.cc op-range.cc op-s-cm.cc \
 	op-s-cs.cc op-s-m.cc op-s-s.cc op-str-m.cc \
 	op-str-s.cc op-str-str.cc op-streamoff.cc op-struct.cc \
 	$(INTTYPE_OP_XSRC) \
 	$(SPARSE_OP_XSRC)
 
 OP_SRC := $(addprefix OPERATORS/, $(OP_XSRC))
 
@@ -144,17 +141,17 @@ OV_INTTYPE_SRC := \
 
 OV_SPARSE_SRC := \
 	ov-base-sparse.cc ov-bool-sparse.cc ov-cx-sparse.cc ov-re-sparse.cc
 
 OV_SRC := ov-base.cc ov-ch-mat.cc \
 	ov-cs-list.cc ov-list.cc ov-re-mat.cc ov-cx-mat.cc \
 	ov-range.cc ov-scalar.cc ov-complex.cc ov-str-mat.cc \
 	ov-streamoff.cc ov-struct.cc ov-va-args.cc \
-	ov-colon.cc ov-bool-mat.cc ov-bool.cc ov-file.cc ov-cell.cc \
+	ov-colon.cc ov-bool-mat.cc ov-bool.cc ov-cell.cc \
 	ov.cc ov-fcn.cc ov-builtin.cc ov-dld-fcn.cc ov-mapper.cc \
 	ov-usr-fcn.cc ov-fcn-handle.cc ov-fcn-inline.cc ov-typeinfo.cc \
 	$(OV_INTTYPE_SRC) \
 	$(OV_SPARSE_SRC)
 
 PT_SRC := pt.cc pt-arg-list.cc pt-assign.cc pt-bp.cc pt-binop.cc \
 	pt-cell.cc pt-check.cc pt-cmd.cc pt-colon.cc pt-const.cc \
 	pt-decl.cc pt-except.cc pt-exp.cc pt-fcn-handle.cc pt-id.cc \
diff --git a/src/file-io.cc b/src/file-io.cc
--- a/src/file-io.cc
+++ b/src/file-io.cc
@@ -182,32 +182,16 @@ fopen_mode_to_ios_mode (const std::strin
 	  else
 	    ::error ("invalid mode specified");
 	}
     }
 
   return retval;
 }
 
-DEFUN (isstream, args, ,
-  "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} {} isstream (@var{x})\n\
-Return true if @var{x} is a stream object.  Otherwise, return false.\n\
-@end deftypefn")
-{
-  octave_value retval;
-
-  if (args.length () == 1)
-    retval = args(0).is_stream ();
-  else
-    print_usage ("isstream");
-
-  return retval;
-}
-
 DEFUN (fclose, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} fclose (@var{fid})\n\
 Closes the specified file.  If successful, @code{fclose} returns 0,\n\
 otherwise, it returns -1.\n\
 @end deftypefn\n\
 @seealso{fopen, fseek, ftell}")
 {
@@ -476,32 +460,32 @@ do_stream_open (const octave_value& tc_n
 
   return retval;
 }
 
 DEFUN (fopen, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {[@var{fid}, @var{msg}] =} fopen (@var{name}, @var{mode}, @var{arch})\n\
 @deftypefnx {Built-in Function} {@var{fid_list} =} fopen (\"all\")\n\
-@deftypefnx {Built-in Function} {@var{file} =} fopen (@var{fid})\n\
+@deftypefnx {Built-in Function} {[@var{file}, @var{mode}, @var{arch}] =} fopen (@var{fid})\n\
 The first form of the @code{fopen} function opens the named file with\n\
 the specified mode (read-write, read-only, etc.) and architecture\n\
 interpretation (IEEE big endian, IEEE little endian, etc.), and returns\n\
 an integer value that may be used to refer to the file later.  If an\n\
 error occurs, @var{fid} is set to @minus{}1 and @var{msg} contains the\n\
 corresponding system error message.  The @var{mode} is a one or two\n\
 character string that specifies whether the file is to be opened for\n\
 reading, writing, or both.\n\
 \n\
 The second form of the @code{fopen} function returns a vector of file ids\n\
 corresponding to all the currently open files, excluding the\n\
 @code{stdin}, @code{stdout}, and @code{stderr} streams.\n\
 \n\
-The third form of the @code{fopen} function returns the name of a\n\
-currently open file given its file id.\n\
+The third form of the @code{fopen} function returns information about the\n\
+open file given its file id.\n\
 \n\
 For example,\n\
 \n\
 @example\n\
 myfile = fopen (\"splat.dat\", \"r\", \"ieee-le\");\n\
 @end example\n\
 \n\
 @noindent\n\
diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -3855,20 +3855,20 @@ octave_stream_list::instance_ok (void)
       ::error ("unable to create stream list object!");
 
       retval = false;
     }
 
   return retval;
 }
 
-octave_value
+int
 octave_stream_list::insert (const octave_stream& os)
 {
-  return (instance_ok ()) ? instance->do_insert (os) : octave_value (-1.0);
+  return (instance_ok ()) ? instance->do_insert (os) : -1;
 }
 
 octave_stream
 octave_stream_list::lookup (int fid, const std::string& who)
 {
   return (instance_ok ()) ? instance->do_lookup (fid, who) : octave_stream ();
 }
 
@@ -3923,17 +3923,17 @@ octave_stream_list::open_file_numbers (v
 }
 
 int
 octave_stream_list::get_file_number (const octave_value& fid)
 {
   return (instance_ok ()) ? instance->do_get_file_number (fid) : -1;
 }
 
-octave_value
+int
 octave_stream_list::do_insert (const octave_stream& os)
 {
   octave_value retval;
 
   int stream_number = -1;
 
   // Insert item in first open slot, increasing size of list if
   // necessary.
@@ -3957,17 +3957,17 @@ octave_stream_list::do_insert (const oct
       if (curr_len == total_len)
 	list.resize (total_len * 2);
 
       list(curr_len) = os;
       stream_number = curr_len;
       curr_len++;
     }
 
-  return octave_value (os, stream_number);
+  return stream_number;
 }
 
 static void
 gripe_invalid_file_id (int fid, const std::string& who)
 {
   if (who.empty ())
     ::error ("invalid stream number = %d", fid);
   else
diff --git a/src/oct-stream.h b/src/oct-stream.h
--- a/src/oct-stream.h
+++ b/src/oct-stream.h
@@ -626,17 +626,17 @@ protected:
   octave_stream_list (void) : list (32), curr_len (0) { }
 
 public:
 
   ~octave_stream_list (void) { }
 
   static bool instance_ok (void);
 
-  static octave_value insert (const octave_stream& os);
+  static int insert (const octave_stream& os);
 
   static octave_stream
   lookup (int fid, const std::string& who = std::string ());
 
   static octave_stream
   lookup (const octave_value& fid, const std::string& who = std::string ());
 
   static int remove (int fid, const std::string& who = std::string ());
@@ -657,17 +657,17 @@ public:
 private:
 
   Array<octave_stream> list;
 
   int curr_len;
 
   static octave_stream_list *instance;
 
-  octave_value do_insert (const octave_stream& os);
+  int do_insert (const octave_stream& os);
 
   octave_stream do_lookup (int fid, const std::string& who = std::string ()) const;
   octave_stream do_lookup (const octave_value& fid,
 			   const std::string& who = std::string ()) const;
 
   int do_remove (int fid, const std::string& who = std::string ());
   int do_remove (const octave_value& fid, const std::string& who = std::string ());
 
diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -627,24 +627,16 @@ octave_base_value::map_value (void) cons
 string_vector
 octave_base_value::map_keys (void) const
 {
   string_vector retval;
   gripe_wrong_type_arg ("octave_base_value::map_keys()", type_name ());
   return retval;
 }
 
-octave_stream
-octave_base_value::stream_value (void) const
-{
-  octave_stream retval;
-  gripe_wrong_type_arg ("octave_base_value::stream_value()", type_name ());
-  return retval;
-}
-
 std::streamoff
 octave_base_value::streamoff_value (void) const
 {
   std::streamoff retval (-1);
   gripe_wrong_type_arg ("octave_base_value::streamoff_value()", type_name ());
   return retval;
 }
 
@@ -652,24 +644,16 @@ streamoff_array
 octave_base_value::streamoff_array_value (void) const
 {
   streamoff_array retval;
   gripe_wrong_type_arg ("octave_base_value::streamoff_array_value()",
 			type_name ());
   return retval;
 }
 
-int
-octave_base_value::stream_number (void) const
-{
-  int retval = -1;
-  gripe_wrong_type_arg ("octave_base_value::stream_number()", type_name ());
-  return retval;
-}
-
 octave_function *
 octave_base_value::function_value (bool silent)
 {
   octave_function *retval = 0;
 
   if (! silent)
     gripe_wrong_type_arg ("octave_base_value::function_value()",
 			  type_name ());
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -126,18 +126,16 @@ public:
   bool is_string (void) const { return false; }
 
   bool is_sq_string (void) const { return false; }
 
   bool is_range (void) const { return false; }
 
   bool is_map (void) const { return false; }
 
-  bool is_stream (void) const { return false; }
-
   bool is_streamoff (void) const { return false; }
 
   bool is_cs_list (void) const { return false; }
 
   bool is_list (void) const { return false; }
 
   bool is_magic_colon (void) const { return false; }
 
@@ -266,20 +264,16 @@ public:
   std::string string_value (bool force = false) const;
 
   Range range_value (void) const;
 
   Octave_map map_value (void) const;
 
   string_vector map_keys (void) const;
 
-  octave_stream stream_value (void) const;
-
-  int stream_number (void) const;
-
   std::streamoff streamoff_value (void) const;
 
   streamoff_array streamoff_array_value (void) const;
 
   octave_function *function_value (bool silent = false);
 
   octave_user_function *user_function_value (bool silent = false);
 
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -768,22 +768,16 @@ octave_value::octave_value (const Range&
 }
 
 octave_value::octave_value (const Octave_map& m)
   : rep (new octave_struct (m))
 {
   rep->count = 1;
 }
 
-octave_value::octave_value (const octave_stream& s, int n)
-  : rep (new octave_file (s, n))
-{
-  rep->count = 1;
-}
-
 octave_value::octave_value (const streamoff_array& off)
   : rep (new octave_streamoff (off))
 {
   rep->count = 1;
 }
 
 octave_value::octave_value (const octave_value_list& l, bool is_csl)
   : rep (0)
@@ -1103,28 +1097,16 @@ octave_value::cell_value (void) const
 }
 
 Octave_map
 octave_value::map_value (void) const
 {
   return rep->map_value ();
 }
 
-octave_stream
-octave_value::stream_value (void) const
-{
-  return rep->stream_value ();
-}
-
-int
-octave_value::stream_number (void) const
-{
-  return rep->stream_number ();
-}
-
 std::streamoff
 octave_value::streamoff_value (void) const
 {
   return rep->streamoff_value ();
 }
 
 streamoff_array
 octave_value::streamoff_array_value (void) const
@@ -2211,17 +2193,16 @@ install_types (void)
   octave_uint8_matrix::register_type ();
   octave_uint16_matrix::register_type ();
   octave_uint32_matrix::register_type ();
   octave_uint64_matrix::register_type ();
   octave_sparse_bool_matrix::register_type ();
   octave_sparse_matrix::register_type ();
   octave_sparse_complex_matrix::register_type ();
   octave_struct::register_type ();
-  octave_file::register_type ();
   octave_list::register_type ();
   octave_cs_list::register_type ();
   octave_all_va_args::register_type ();
   octave_magic_colon::register_type ();
   octave_builtin::register_type ();
   octave_mapper::register_type ();
   octave_user_function::register_type ();
   octave_dld_function::register_type ();
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -238,17 +238,16 @@ public:
   octave_value (const int64NDArray& inda);
   octave_value (const uint8NDArray& inda);
   octave_value (const uint16NDArray& inda);
   octave_value (const uint32NDArray& inda);
   octave_value (const uint64NDArray& inda);
   octave_value (double base, double limit, double inc);
   octave_value (const Range& r);
   octave_value (const Octave_map& m);
-  octave_value (const octave_stream& s, int n);
   octave_value (const streamoff_array& off);
   octave_value (const octave_value_list& m, bool is_cs_list = false);
   octave_value (octave_value::magic_colon);
   octave_value (octave_value::all_va_args);
 
   octave_value (octave_value *new_rep, int count = 1);
 
   // Copy constructor.
@@ -436,19 +435,16 @@ public:
     { return rep->is_string () && ! rep->is_sq_string (); }
 
   virtual bool is_range (void) const
     { return rep->is_range (); }
 
   virtual bool is_map (void) const
     { return rep->is_map (); }
 
-  virtual bool is_stream (void) const
-    { return rep->is_stream (); }
-
   virtual bool is_streamoff (void) const
     { return rep->is_streamoff (); }
 
   virtual bool is_cs_list (void) const
     { return rep->is_cs_list (); }
 
   virtual bool is_list (void) const
     { return rep->is_list (); }
@@ -656,20 +652,16 @@ public:
   virtual Range range_value (void) const
     { return rep->range_value (); }
 
   virtual Octave_map map_value (void) const;
 
   virtual string_vector map_keys (void) const
     { return rep->map_keys (); }
 
-  virtual octave_stream stream_value (void) const;
-
-  virtual int stream_number (void) const;
-
   virtual std::streamoff streamoff_value (void) const;
 
   virtual streamoff_array streamoff_array_value (void) const;
 
   virtual octave_function *function_value (bool silent = false);
 
   virtual octave_user_function *user_function_value (bool silent = false);
 
