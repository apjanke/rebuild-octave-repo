# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1331832522 14400
#      Thu Mar 15 13:28:42 2012 -0400
# Node ID 16164cb3b7138549736b6f68afd80d7d0310f1af
# Parent  bec37a92cb3bd070d7c0dceb9d9f39235287b114
# Parent  21ac4b576003cfee0d571d257a4c7f64bec408b0
maint: periodic merge of stable to default

diff --git a/scripts/polynomial/pchip.m b/scripts/polynomial/pchip.m
--- a/scripts/polynomial/pchip.m
+++ b/scripts/polynomial/pchip.m
@@ -120,17 +120,16 @@ function ret = pchip (x, y, xi)
   ret = mkpp (x, coeffs, szy(1:end-1));
 
   if (nargin == 3)
     ret = ppval (ret, xi);
   endif
 
 endfunction
 
-
 %!demo
 %! x = 0:8;
 %! y = [1, 1, 1, 1, 0.5, 0, 0, 0, 0];
 %! xi = 0:0.01:8;
 %! yspline = spline (x,y,xi);
 %! ypchip = pchip (x,y,xi);
 %! title ("pchip and spline fit to discontinuous function");
 %! plot (xi,yspline, xi,ypchip,"-", x,y,"+");
@@ -164,8 +163,10 @@ endfunction
 %!assert (pp.dim, [3,2])
 %!assert (ppval (pp,pi), [0,-1;1,0;-1,-2], 1e-14)
 %!assert (yi3(:,:,2), ppval (pp,pi), 1e-14)
 %!assert (yi3(:,:,1), [1,0;2,1;0,-1], 1e-14)
 %!assert (squeeze (yi1(1,2,:)), [1/sqrt(2); 0; -1/sqrt(2);-1], 1e-14)
 %!assert (size (yi2), [3,2,5,4])
 %!assert (squeeze (yi2(1,2,3,:)), [1/sqrt(2); 0; -1/sqrt(2);-1], 1e-14)
 
+%!error (pchip (1,2));
+%!error (pchip (1,2,3));
diff --git a/src/DLD-FUNCTIONS/__pchip_deriv__.cc b/src/DLD-FUNCTIONS/__pchip_deriv__.cc
--- a/src/DLD-FUNCTIONS/__pchip_deriv__.cc
+++ b/src/DLD-FUNCTIONS/__pchip_deriv__.cc
@@ -64,16 +64,23 @@ Undocumented internal function.\n\
   if (nargin >= 2)
     {
       if (args(0).is_single_type () || args(1).is_single_type ())
         {
           FloatColumnVector xvec (args(0).float_vector_value ());
           FloatMatrix ymat (args(1).float_matrix_value ());
 
           octave_idx_type nx = xvec.length ();
+
+          if (nx < 2)
+            {
+              error ("__pchip_deriv__: X must be at least of length 2");
+              return retval;
+            }
+
           octave_idx_type nyr = ymat.rows ();
           octave_idx_type nyc = ymat.columns ();
 
           if (nx != (rows ? nyc : nyr))
             {
               error ("__pchip_deriv__: X and Y dimension mismatch");
               return retval;
             }
@@ -104,16 +111,23 @@ Undocumented internal function.\n\
           retval = dmat;
         }
       else
         {
           ColumnVector xvec (args(0).vector_value ());
           Matrix ymat (args(1).matrix_value ());
 
           octave_idx_type nx = xvec.length ();
+
+          if (nx < 2)
+            {
+              error ("__pchip_deriv__: X must be at least of length 2");
+              return retval;
+            }
+
           octave_idx_type nyr = ymat.rows ();
           octave_idx_type nyc = ymat.columns ();
 
           if (nx != (rows ? nyc : nyr))
             {
               error ("__pchip_deriv__: X and Y dimension mismatch");
               return retval;
             }
diff --git a/src/ov-base-scalar.h b/src/ov-base-scalar.h
--- a/src/ov-base-scalar.h
+++ b/src/ov-base-scalar.h
@@ -66,16 +66,19 @@ public:
   octave_value_list subsref (const std::string& type,
                              const std::list<octave_value_list>& idx, int)
     { return subsref (type, idx); }
 
   octave_value subsasgn (const std::string& type,
                          const std::list<octave_value_list>& idx,
                          const octave_value& rhs);
 
+  octave_value_list do_multi_index_op (int, const octave_value_list& idx)
+    { return do_index_op (idx); }
+
   bool is_constant (void) const { return true; }
 
   bool is_defined (void) const { return true; }
 
   dim_vector dims (void) const { static dim_vector dv (1, 1); return dv; }
 
   octave_idx_type numel (void) const { return 1; }
 
