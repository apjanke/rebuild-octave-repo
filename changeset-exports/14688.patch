# HG changeset patch
# User Jordi Guti√©rrez Hermoso <jordigh@octave.org>
# Date 1337959442 14400
#      Fri May 25 11:24:02 2012 -0400
# Branch stable
# Node ID 42edbe6f6a8dfdf392dca54d0a1fdcb84a515d09
# Parent  847ed7f603cfc48aee0546ec1a7007184e797772
Fix bad two-arg call of randperm (bug #36535)

* rand.cc (Frandperm): Rewrite algorithm for short_shuffle. Add another test.

diff --git a/src/DLD-FUNCTIONS/rand.cc b/src/DLD-FUNCTIONS/rand.cc
--- a/src/DLD-FUNCTIONS/rand.cc
+++ b/src/DLD-FUNCTIONS/rand.cc
@@ -1081,24 +1081,29 @@ using std::unordered_map;
 
               // Perform the Knuth shuffle only keeping track of moved
               // entries in the map
               for (octave_idx_type i = 0; i < m; i++)
                 {
                   octave_idx_type k = i +
                     gnulib::floor (rvec[i] * (n - i));
 
-                  if (map.find(k) == map.end())
+                  //For shuffling first m entries, no need to use extra
+                  //storage
+                  if (k < m)
                     {
-                      map[k] = ivec[i];
-                      ivec[i] = k;
+                      std::swap (ivec[i], ivec[k]);
                     }
                   else
-                    std::swap (ivec[i], map[k]);
+                    {
+                      if (map.find (k) == map.end ())
+                        map[k] = k;
 
+                      std::swap (ivec[i], map[k]);
+                    }
                 }
             }
           else
             {
 
               // Perform the Knuth shuffle of the first m entries
               for (octave_idx_type i = 0; i < m; i++)
                 {
@@ -1121,11 +1126,18 @@ using std::unordered_map;
     }
   else
     print_usage ();
 
   return retval;
 }
 
 /*
-%!assert(sort (randperm (20)),1:20)
-%!assert(length (randperm (20,10)), 10)
+%!assert (sort (randperm (20)), 1:20)
+%!assert (length (randperm (20,10)), 10)
+
+%!test
+%! rand ("seed", 0);
+%! for i = 1:100
+%!   p = randperm (305, 30);
+%!   assert (length (unique (p)), 30);
+%! endfor
 */
