# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1246515597 -7200
#      Thu Jul 02 08:19:57 2009 +0200
# Node ID 79c4dd83d07fbd171b465bc6006b16b6ab6882dd
# Parent  5cd879a0d8c4500a9450af50b0f25f71258e4c16
fix sparse +- diag operations

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2009-07-02  Jaroslav Hajek  <highegg@gmail.com>
+
+	* Sparse-diag-op-defs.h (inner_do_add_sm_dm): Rewrite to ensure
+	ordering of row indices.
+
 2009-06-30  Jaroslav Hajek  <highegg@gmail.com>
 
 	* oct-sort.cc (octave_sort<T>::lookupb<Comp>): Fix typo.
 
 2009-06-29  Jaroslav Hajek  <highegg@gmail.com>
 
 	* oct-sort.cc (octave_sort<T>::lookup_merge): Delete.
 	(octave_sort<T>::lookup<Comp>,
diff --git a/liboctave/Sparse-diag-op-defs.h b/liboctave/Sparse-diag-op-defs.h
--- a/liboctave/Sparse-diag-op-defs.h
+++ b/liboctave/Sparse-diag-op-defs.h
@@ -129,36 +129,48 @@ RT inner_do_add_sm_dm (const SM& a, cons
   const octave_idx_type nz = a.nnz ();
   RT r (a_nr, a_nc, nz + n);
   octave_idx_type k = 0;
 
   for (octave_idx_type j = 0; j < nc; ++j)
     {
       OCTAVE_QUIT;
       const octave_idx_type colend = a.cidx (j+1);
-      bool found_diag = false;
       r.xcidx (j) = k;
-      for (octave_idx_type k_src = a.cidx (j); k_src < colend; ++k_src, ++k)
-	{
-	  const octave_idx_type i = a.ridx (k_src);
-	  r.xridx (k) = i;
-	  if (i != j)
-	    r.xdata (k) = opa (a.data (k_src));
-	  else
-	    {
-	      r.xdata (k) = opa (a.data (k_src)) + opd (d.dgelem (j));
-	      found_diag = true;
-	    }
-	}
-      if (!found_diag)
-	{
-	  r.xridx (k) = j;
-	  r.xdata (k) = opd (d.dgelem (j));
-	  ++k;
-	}
+      octave_idx_type k_src = a.cidx (j), k_split;
+
+      for (k_split = k_src; k_split < colend; k_split++)
+        if (a.ridx (k_split) >= j)
+          break;
+
+      for (; k_src < k_split; k_src++, k++)
+        {
+          r.xridx (k) = a.ridx (k_src);
+          r.xdata (k) = opa (a.data (k_src));
+        }
+
+      if (k_src < colend && a.ridx (k_src) == j)
+        {
+          r.xridx (k) = j;
+          r.xdata (k) = opa (a.data (k_src)) + opd (d.dgelem (j));
+          k++; k_src++;
+        }
+      else
+        {
+          r.xridx (k) = j;
+          r.xdata (k) = opd (d.dgelem (j));
+          k++;
+        }
+
+      for (; k_src < colend; k_src++, k++)
+        {
+          r.xridx (k) = a.ridx (k_src);
+          r.xdata (k) = opa (a.data (k_src));
+        }
+
     }
   r.xcidx (nc) = k;
 
   r.maybe_compress (true);
   return r;
 }
 
 template <typename RT, typename DM, typename SM>
