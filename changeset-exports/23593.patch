# HG changeset patch
# User Rik <rik@octave.org>
# Date 1497416703 25200
#      Tue Jun 13 22:05:03 2017 -0700
# Node ID a8361bc2361a1665eb0494429159224227a56f51
# Parent  80e3bfb7bd5ad64c98e5192480dcd06de60359d6
maint: Deprecate is_square and replace with issquare.

* Array.h (is_square): Use OCTAVE_DEPRECATED macro around function.
* Array.h (issquare): New function.

* Sparse.h (is_square): Use OCTAVE_DEPRECATED macro around function.
* Sparse.h (issquare): New function.

* lu.cc, qr.cc, CMatrix.cc, dMatrix.cc, fCMatrix.cc, fMatrix.cc, chol.cc,
qr.cc: Replace instances of is_square with issquare.

diff --git a/libinterp/corefcn/lu.cc b/libinterp/corefcn/lu.cc
--- a/libinterp/corefcn/lu.cc
+++ b/libinterp/corefcn/lu.cc
@@ -34,28 +34,28 @@ along with Octave; see the file COPYING.
 #include "ov-re-sparse.h"
 #include "ov-cx-sparse.h"
 
 template <typename MT>
 static octave_value
 get_lu_l (const octave::math::lu<MT>& fact)
 {
   MT L = fact.L ();
-  if (L.is_square ())
+  if (L.issquare ())
     return octave_value (L, MatrixType (MatrixType::Lower));
   else
     return L;
 }
 
 template <typename MT>
 static octave_value
 get_lu_u (const octave::math::lu<MT>& fact)
 {
   MT U = fact.U ();
-  if (U.is_square () && fact.regular ())
+  if (U.issquare () && fact.regular ())
     return octave_value (U, MatrixType (MatrixType::Upper));
   else
     return U;
 }
 
 DEFUN (lu, args, nargout,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {[@var{L}, @var{U}] =} lu (@var{A})
diff --git a/libinterp/dldfcn/qr.cc b/libinterp/dldfcn/qr.cc
--- a/libinterp/dldfcn/qr.cc
+++ b/libinterp/dldfcn/qr.cc
@@ -40,17 +40,17 @@ along with Octave; see the file COPYING.
 #include "ov.h"
 #include "ovl.h"
 
 template <typename MT>
 static octave_value
 get_qr_r (const octave::math::qr<MT>& fact)
 {
   MT R = fact.R ();
-  if (R.is_square () && fact.regular ())
+  if (R.issquare () && fact.regular ())
     return octave_value (R, MatrixType (MatrixType::Upper));
   else
     return R;
 }
 
 template <typename T>
 static typename octave::math::qr<T>::type
 qr_type (int nargin, int nargout)
diff --git a/liboctave/array/Array.h b/liboctave/array/Array.h
--- a/liboctave/array/Array.h
+++ b/liboctave/array/Array.h
@@ -551,17 +551,21 @@ public:
 
   Array<T> reshape (const dim_vector& new_dims) const
   { return Array<T> (*this, new_dims); }
 
   Array<T> permute (const Array<octave_idx_type>& vec, bool inv = false) const;
   Array<T> ipermute (const Array<octave_idx_type>& vec) const
   { return permute (vec, true); }
 
-  bool is_square (void) const { return (dim1 () == dim2 ()); }
+  bool issquare (void) const { return (dim1 () == dim2 ()); }
+
+  OCTAVE_DEPRECATED ("use 'issquare' instead")
+  bool is_square (void) const
+  { return issquare (); }
 
   bool isempty (void) const { return numel () == 0; }
 
   OCTAVE_DEPRECATED ("use 'isempty' instead")
   bool is_empty (void) const
   { return isempty (); }
 
   bool isvector (void) const { return dimensions.isvector (); }
diff --git a/liboctave/array/CMatrix.cc b/liboctave/array/CMatrix.cc
--- a/liboctave/array/CMatrix.cc
+++ b/liboctave/array/CMatrix.cc
@@ -170,17 +170,17 @@ ComplexMatrix::operator != (const Comple
 }
 
 bool
 ComplexMatrix::is_hermitian (void) const
 {
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
 
-  if (is_square () && nr > 0)
+  if (issquare () && nr > 0)
     {
       for (octave_idx_type i = 0; i < nr; i++)
         for (octave_idx_type j = i; j < nc; j++)
           if (elem (i, j) != conj (elem (j, i)))
             return false;
 
       return true;
     }
diff --git a/liboctave/array/Sparse.h b/liboctave/array/Sparse.h
--- a/liboctave/array/Sparse.h
+++ b/liboctave/array/Sparse.h
@@ -462,17 +462,21 @@ public:
     if (nz < nnz ())
       make_unique (); // Unshare now because elements will be truncated.
     rep->change_length (nz);
   }
 
   Sparse<T>& insert (const Sparse<T>& a, octave_idx_type r, octave_idx_type c);
   Sparse<T>& insert (const Sparse<T>& a, const Array<octave_idx_type>& idx);
 
-  bool is_square (void) const { return (dim1 () == dim2 ()); }
+  bool issquare (void) const { return (dim1 () == dim2 ()); }
+
+  OCTAVE_DEPRECATED ("use 'issquare' instead")
+  bool is_square (void) const
+  { return issquare (); }
 
   bool isempty (void) const { return (rows () < 1 && cols () < 1); }
 
   OCTAVE_DEPRECATED ("use 'isempty' instead")
   bool is_empty (void) const
   { return isempty (); }
 
   Sparse<T> transpose (void) const;
diff --git a/liboctave/array/dMatrix.cc b/liboctave/array/dMatrix.cc
--- a/liboctave/array/dMatrix.cc
+++ b/liboctave/array/dMatrix.cc
@@ -129,17 +129,17 @@ bool
 Matrix::operator != (const Matrix& a) const
 {
   return !(*this == a);
 }
 
 bool
 Matrix::is_symmetric (void) const
 {
-  if (is_square () && rows () > 0)
+  if (issquare () && rows () > 0)
     {
       for (octave_idx_type i = 0; i < rows (); i++)
         for (octave_idx_type j = i+1; j < cols (); j++)
           if (elem (i, j) != elem (j, i))
             return false;
 
       return true;
     }
diff --git a/liboctave/array/fCMatrix.cc b/liboctave/array/fCMatrix.cc
--- a/liboctave/array/fCMatrix.cc
+++ b/liboctave/array/fCMatrix.cc
@@ -170,17 +170,17 @@ FloatComplexMatrix::operator != (const F
 }
 
 bool
 FloatComplexMatrix::is_hermitian (void) const
 {
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
 
-  if (is_square () && nr > 0)
+  if (issquare () && nr > 0)
     {
       for (octave_idx_type i = 0; i < nr; i++)
         for (octave_idx_type j = i; j < nc; j++)
           if (elem (i, j) != conj (elem (j, i)))
             return false;
 
       return true;
     }
diff --git a/liboctave/array/fMatrix.cc b/liboctave/array/fMatrix.cc
--- a/liboctave/array/fMatrix.cc
+++ b/liboctave/array/fMatrix.cc
@@ -131,17 +131,17 @@ bool
 FloatMatrix::operator != (const FloatMatrix& a) const
 {
   return !(*this == a);
 }
 
 bool
 FloatMatrix::is_symmetric (void) const
 {
-  if (is_square () && rows () > 0)
+  if (issquare () && rows () > 0)
     {
       for (octave_idx_type i = 0; i < rows (); i++)
         for (octave_idx_type j = i+1; j < cols (); j++)
           if (elem (i, j) != elem (j, i))
             return false;
 
       return true;
     }
diff --git a/liboctave/numeric/chol.cc b/liboctave/numeric/chol.cc
--- a/liboctave/numeric/chol.cc
+++ b/liboctave/numeric/chol.cc
@@ -251,17 +251,17 @@ namespace octave
     {
       return chol2inv_internal (chol_mat, is_upper);
     }
 
     template <typename T>
     void
     chol<T>::set (const T& R)
     {
-      if (! R.is_square ())
+      if (! R.issquare ())
         (*current_liboctave_error_handler) ("chol: requires square matrix");
 
       chol_mat = R;
     }
 
 #if ! defined (HAVE_QRUPDATE)
 
     template <typename T>
diff --git a/liboctave/numeric/qr.cc b/liboctave/numeric/qr.cc
--- a/liboctave/numeric/qr.cc
+++ b/liboctave/numeric/qr.cc
@@ -68,19 +68,19 @@ namespace octave
     }
 
     template <typename T>
     typename qr<T>::type
     qr<T>::get_type (void) const
     {
       type retval;
 
-      if (! q.isempty () && q.is_square ())
+      if (! q.isempty () && q.issquare ())
         retval = qr<T>::std;
-      else if (q.rows () > q.cols () && r.is_square ())
+      else if (q.rows () > q.cols () && r.issquare ())
         retval = qr<T>::economy;
       else
         retval = qr<T>::raw;
 
       return retval;
     }
 
     template <typename T>
@@ -327,34 +327,34 @@ namespace octave
     void
     qr<T>::insert_row (const RV_T& u, octave_idx_type j)
     {
       warn_qrupdate_once ();
 
       octave_idx_type m = r.rows ();
       octave_idx_type n = r.cols ();
 
-      if (! q.is_square () || u.numel () != n)
+      if (! q.issquare () || u.numel () != n)
         (*current_liboctave_error_handler) ("qrinsert: dimensions mismatch");
 
       if (j < 0 || j > m)
         (*current_liboctave_error_handler) ("qrinsert: index out of range");
 
       init (octave::math::insert_row (q*r, j, u), get_type ());
     }
 
     template <typename T>
     void
     qr<T>::delete_row (octave_idx_type j)
     {
       warn_qrupdate_once ();
 
       octave_idx_type m = r.rows ();
 
-      if (! q.is_square ())
+      if (! q.issquare ())
         (*current_liboctave_error_handler) ("qrdelete: dimensions mismatch");
 
       if (j < 0 || j > m-1)
         (*current_liboctave_error_handler) ("qrdelete: index out of range");
 
       init (octave::math::delete_row (q*r, j), get_type ());
     }
 
@@ -713,17 +713,17 @@ namespace octave
       F77_INT j = octave::to_f77_int (j_arg);
 
       F77_INT m = octave::to_f77_int (r.rows ());
       F77_INT n = octave::to_f77_int (r.cols ());
       F77_INT k = std::min (m, n);
 
       F77_INT u_nel = octave::to_f77_int (u.numel ());
 
-      if (! q.is_square () || u_nel != n)
+      if (! q.issquare () || u_nel != n)
         (*current_liboctave_error_handler) ("qrinsert: dimensions mismatch");
 
       if (j < 0 || j > m)
         (*current_liboctave_error_handler) ("qrinsert: index out of range");
 
       q.resize (m + 1, m + 1);
       r.resize (m + 1, n);
 
@@ -742,17 +742,17 @@ namespace octave
     void
     qr<Matrix>::delete_row (octave_idx_type j_arg)
     {
       F77_INT j = octave::to_f77_int (j_arg);
 
       F77_INT m = octave::to_f77_int (r.rows ());
       F77_INT n = octave::to_f77_int (r.cols ());
 
-      if (! q.is_square ())
+      if (! q.issquare ())
         (*current_liboctave_error_handler) ("qrdelete: dimensions mismatch");
 
       if (j < 0 || j > m-1)
         (*current_liboctave_error_handler) ("qrdelete: index out of range");
 
       F77_INT ldq = octave::to_f77_int (q.rows ());
       F77_INT ldr = octave::to_f77_int (r.rows ());
 
@@ -1130,17 +1130,17 @@ namespace octave
       F77_INT j = octave::to_f77_int (j_arg);
 
       F77_INT m = octave::to_f77_int (r.rows ());
       F77_INT n = octave::to_f77_int (r.cols ());
       F77_INT k = std::min (m, n);
 
       F77_INT u_nel = octave::to_f77_int (u.numel ());
 
-      if (! q.is_square () || u_nel != n)
+      if (! q.issquare () || u_nel != n)
         (*current_liboctave_error_handler) ("qrinsert: dimensions mismatch");
 
       if (j < 0 || j > m)
         (*current_liboctave_error_handler) ("qrinsert: index out of range");
 
       q.resize (m + 1, m + 1);
       r.resize (m + 1, n);
 
@@ -1159,17 +1159,17 @@ namespace octave
     void
     qr<FloatMatrix>::delete_row (octave_idx_type j_arg)
     {
       F77_INT j = octave::to_f77_int (j_arg);
 
       F77_INT m = octave::to_f77_int (r.rows ());
       F77_INT n = octave::to_f77_int (r.cols ());
 
-      if (! q.is_square ())
+      if (! q.issquare ())
         (*current_liboctave_error_handler) ("qrdelete: dimensions mismatch");
 
       if (j < 0 || j > m-1)
         (*current_liboctave_error_handler) ("qrdelete: index out of range");
 
       F77_INT ldq = octave::to_f77_int (q.rows ());
       F77_INT ldr = octave::to_f77_int (r.rows ());
 
@@ -1572,17 +1572,17 @@ namespace octave
       F77_INT j = octave::to_f77_int (j_arg);
 
       F77_INT m = octave::to_f77_int (r.rows ());
       F77_INT n = octave::to_f77_int (r.cols ());
       F77_INT k = std::min (m, n);
 
       F77_INT u_nel = octave::to_f77_int (u.numel ());
 
-      if (! q.is_square () || u_nel != n)
+      if (! q.issquare () || u_nel != n)
         (*current_liboctave_error_handler) ("qrinsert: dimensions mismatch");
 
       if (j < 0 || j > m)
         (*current_liboctave_error_handler) ("qrinsert: index out of range");
 
       q.resize (m + 1, m + 1);
       r.resize (m + 1, n);
 
@@ -1602,17 +1602,17 @@ namespace octave
     void
     qr<ComplexMatrix>::delete_row (octave_idx_type j_arg)
     {
       F77_INT j = octave::to_f77_int (j_arg);
 
       F77_INT m = octave::to_f77_int (r.rows ());
       F77_INT n = octave::to_f77_int (r.cols ());
 
-      if (! q.is_square ())
+      if (! q.issquare ())
         (*current_liboctave_error_handler) ("qrdelete: dimensions mismatch");
 
       if (j < 0 || j > m-1)
         (*current_liboctave_error_handler) ("qrdelete: index out of range");
 
       F77_INT ldq = octave::to_f77_int (q.rows ());
       F77_INT ldr = octave::to_f77_int (r.rows ());
 
@@ -2010,17 +2010,17 @@ namespace octave
       F77_INT j = octave::to_f77_int (j_arg);
 
       F77_INT m = octave::to_f77_int (r.rows ());
       F77_INT n = octave::to_f77_int (r.cols ());
       F77_INT k = std::min (m, n);
 
       F77_INT u_nel = octave::to_f77_int (u.numel ());
 
-      if (! q.is_square () || u_nel != n)
+      if (! q.issquare () || u_nel != n)
         (*current_liboctave_error_handler) ("qrinsert: dimensions mismatch");
 
       if (j < 0 || j > m)
         (*current_liboctave_error_handler) ("qrinsert: index out of range");
 
       q.resize (m + 1, m + 1);
       r.resize (m + 1, n);
 
@@ -2040,17 +2040,17 @@ namespace octave
     void
     qr<FloatComplexMatrix>::delete_row (octave_idx_type j_arg)
     {
       F77_INT j = octave::to_f77_int (j_arg);
 
       F77_INT m = octave::to_f77_int (r.rows ());
       F77_INT n = octave::to_f77_int (r.cols ());
 
-      if (! q.is_square ())
+      if (! q.issquare ())
         (*current_liboctave_error_handler) ("qrdelete: dimensions mismatch");
 
       if (j < 0 || j > m-1)
         (*current_liboctave_error_handler) ("qrdelete: index out of range");
 
       F77_INT ldq = octave::to_f77_int (q.rows ());
       F77_INT ldr = octave::to_f77_int (r.rows ());
 
