# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1285830300 -7200
#      Thu Sep 30 09:05:00 2010 +0200
# Node ID 4ffa19147604dcc218b257b348dd86312e7756ff
# Parent  3329616444f0df91fb35e2faf9a50a984477dd21
replace Octave_map->octave_scalar_map in help.cc and load-save.cc

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2010-09-30  Jaroslav Hajek  <highegg@gmail.com>
+
+	* help.cc (F__which__): Use octave_map instead of Octave_map.
+	* load-save.cc (do_load, save_fields, save_vars): Use 
+	octave_scalar_map instead of Octave_map.
+
 2010-09-30  Jaroslav Hajek  <highegg@gmail.com>
 
 	* debug.cc (Fdbstatus, Fdbstack): Use octave_map instead of
 	Octave_map.
 	* error.cc (warning_options, initialize_warning_options,
 	pr_where, Frethrow, Ferror, Fwarning, Flasterror): Use
 	octave_scalar_map or octave_map instead of Octave_map.
 
diff --git a/src/help.cc b/src/help.cc
--- a/src/help.cc
+++ b/src/help.cc
@@ -945,17 +945,17 @@ Undocumented internal function.\n\
   string_vector argv = args.make_argv ("which");
 
   if (! error_state)
     {
       int argc = argv.length ();
 
       if (argc > 1)
         {
-          Octave_map m (dim_vector (1, argc-1));
+          octave_map m (dim_vector (1, argc-1));
 
           Cell names (1, argc-1);
           Cell files (1, argc-1);
           Cell types (1, argc-1);
 
           for (int i = 1; i < argc; i++)
             {
               std::string name = argv[i];
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -332,17 +332,17 @@ get_file_format (const std::string& fnam
 octave_value
 do_load (std::istream& stream, const std::string& orig_fname,
          load_save_format format, oct_mach_info::float_format flt_fmt,
          bool list_only, bool swap, bool verbose,
          const string_vector& argv, int argv_idx, int argc, int nargout)
 {
   octave_value retval;
 
-  Octave_map retstruct;
+  octave_scalar_map retstruct;
 
   std::ostringstream output_buf;
   std::list<std::string> symbol_names;
 
   octave_idx_type count = 0;
 
   for (;;)
     {
@@ -982,31 +982,31 @@ do_save (std::ostream& os, const symbol_
       do_save (os, val, name, help, global, fmt, save_as_floats);
     }
 }
 
 // save fields of a scalar structure STR matching PATTERN on stream OS
 // in the format specified by FMT.
 
 static size_t
-save_fields (std::ostream& os, const Octave_map& m,
+save_fields (std::ostream& os, const octave_scalar_map& m,
              const std::string& pattern,
              load_save_format fmt, bool save_as_floats)
 {
   glob_match pat (pattern);
   
   size_t saved = 0;
 
-  for (Octave_map::const_iterator p = m.begin (); p != m.end (); p++)
+  for (octave_scalar_map::const_iterator p = m.begin (); p != m.end (); p++)
     {
       std::string empty_str;
 
-      if (pat.match(p->first))
+      if (pat.match(m.key (p)))
         {
-          do_save (os, p->second(0), p->first, empty_str,
+          do_save (os, m.contents (p), m.key (p), empty_str,
                    0, fmt, save_as_floats);
 
           saved++;
         }
     }
 
   return saved;
 }
@@ -1274,17 +1274,17 @@ save_vars (const string_vector& argv, in
       octave_value struct_var = symbol_table::varref (struct_name);
 
       if (! struct_var.is_map () || struct_var.numel () != 1) 
         {
           error ("save: `%s' is not a scalar structure",
                  struct_name.c_str ());
           return;
         }
-      Octave_map struct_var_map = struct_var.map_value ();
+      octave_scalar_map struct_var_map = struct_var.scalar_map_value ();
 
       ++argv_idx;
 
       if (argv_idx < argc) 
         {
           for (int i = argv_idx; i < argc; i++)
             {
               if (! save_fields (os, struct_var_map, argv[i], fmt,
