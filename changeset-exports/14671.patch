# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1337700574 -7200
#      Tue May 22 17:29:34 2012 +0200
# Branch gui
# Node ID f346343654a49605005745e72fb79a637425b8e5
# Parent  7fbea449737d1ac580c3867f1171e7299ee7fd34
Settings readline event hook and fixed race condition.
* WorkspaceModel: Decoupled writing and reading the symbol table.
* OctaveLink: Added timer to periodically query for symbol table changes.

diff --git a/gui/src/WorkspaceModel.cpp b/gui/src/WorkspaceModel.cpp
--- a/gui/src/WorkspaceModel.cpp
+++ b/gui/src/WorkspaceModel.cpp
@@ -20,16 +20,17 @@
 #include <QTime>
 
 WorkspaceModel::WorkspaceModel(QObject *parent)
   : QAbstractItemModel(parent)
 {
   QList<QVariant> rootData;
   rootData << tr ("Name") << tr ("Type") << tr ("Value");
   _rootItem = new TreeItem(rootData);
+  _cachedSymbolTableSemaphore = new QSemaphore (1);
 }
 
 WorkspaceModel::~WorkspaceModel()
 {
   delete _rootItem;
 }
 
 QModelIndex
@@ -130,36 +131,44 @@ WorkspaceModel::data(const QModelIndex &
   if (role != Qt::DisplayRole)
     return QVariant();
 
   TreeItem *item = static_cast<TreeItem*>(index.internalPointer());
 
   return item->data(index.column());
 }
 
+
 void
-WorkspaceModel::updateTreeEntry (TreeItem * treeItem, symbol_table::symbol_record *symbolRecord)
+WorkspaceModel::cacheSymbolTable ()
 {
-  treeItem->setData (0, QString (symbolRecord->name ().c_str ()));
-  treeItem->setData (1, QString (symbolRecord->varval ().type_name ().c_str ()));
-  treeItem->setData (2, octaveValueAsQString (symbolRecord->varval ()));
+  std::list < symbol_table::symbol_record > symbolTable = symbol_table::all_variables ();
+
+  _cachedSymbolTableSemaphore->acquire (1);
+  _cachedSymbolTable.clear();
+  for (std::list < symbol_table::symbol_record > ::iterator iterator = symbolTable.begin ();
+       iterator != symbolTable.end (); iterator++)
+    {
+      _cachedSymbolTable.push_back((*iterator).dup(symbol_table::global_scope()));
+    }
+  _cachedSymbolTableSemaphore->release (1);
 }
 
 void
 WorkspaceModel::updateFromSymbolTable ()
 {
-  std::list < symbol_table::symbol_record > allVariables = symbol_table::all_variables ();
   // Split the symbol table into its different categories.
   QList < symbol_table::symbol_record* > localSymbolTable;
   QList < symbol_table::symbol_record* > globalSymbolTable;
   QList < symbol_table::symbol_record* > persistentSymbolTable;
   QList < symbol_table::symbol_record* > hiddenSymbolTable;
 
-  for (std::list < symbol_table::symbol_record > ::iterator iterator = allVariables.begin ();
-       iterator != allVariables.end (); iterator++)
+  _cachedSymbolTableSemaphore->acquire (1);
+  for (std::list < symbol_table::symbol_record > ::iterator iterator = _cachedSymbolTable.begin ();
+       iterator != _cachedSymbolTable.end (); iterator++)
     {
       // It's true that being global or hidden includes it's can mean it's also locally visible,
       // but we want to distinguish that here.
       if (iterator->is_local () && !iterator->is_global () && !iterator->is_hidden ())
         {
           localSymbolTable.append (&(*iterator));
         }
 
@@ -178,36 +187,46 @@ WorkspaceModel::updateFromSymbolTable ()
           hiddenSymbolTable.append (&(*iterator));
         }
     }
 
   updateCategory (0, localSymbolTable);
   updateCategory (1, globalSymbolTable);
   updateCategory (2, persistentSymbolTable);
   updateCategory (3, hiddenSymbolTable);
+ _cachedSymbolTableSemaphore->release (1);
   reset();
-
   emit expandRequest();
 }
 
 void
 WorkspaceModel::updateCategory (int topLevelItemIndex, const QList < symbol_table::symbol_record* > &symbolTable)
 {
   TreeItem *treeItem = topLevelItem (topLevelItemIndex);
+
+  QModelIndex mi = index(treeItem->row(), 0);
   treeItem->deleteChildItems();
 
   int symbolTableSize = symbolTable.size ();
   for(int j = 0; j < symbolTableSize; j++)
     {
       TreeItem *child = new TreeItem ();
       updateTreeEntry (child, symbolTable[j]);
       treeItem->addChild (child);
     }
 }
 
+void
+WorkspaceModel::updateTreeEntry (TreeItem * treeItem, symbol_table::symbol_record *symbolRecord)
+{
+  treeItem->setData (0, QString (symbolRecord->name ().c_str ()));
+  treeItem->setData (1, QString (symbolRecord->varval ().type_name ().c_str ()));
+  treeItem->setData (2, octaveValueAsQString (symbolRecord->varval ()));
+}
+
 QString
 WorkspaceModel::octaveValueAsQString (const octave_value& octaveValue)
 {
   // Convert single qouted string.
   if (octaveValue.is_sq_string ())
     {
       return QString ("\'%1\'").arg (octaveValue.string_value ().c_str ());
 
diff --git a/gui/src/WorkspaceModel.h b/gui/src/WorkspaceModel.h
--- a/gui/src/WorkspaceModel.h
+++ b/gui/src/WorkspaceModel.h
@@ -52,16 +52,17 @@
 #include "octave/ov.h"
 #include "octave/unwind-prot.h"
 #include "octave/utils.h"
 #include "octave/variables.h"
 
 // Qt includes
 #include <QAbstractItemModel>
 #include <QVector>
+#include <QSemaphore>
 
 class TreeItem
 {
 public:
   TreeItem(const QList<QVariant> &data, TreeItem *parent = 0) {
     _parentItem = parent;
     _itemData = data;
   }
@@ -153,21 +154,27 @@ public:
                     const QModelIndex &parent = QModelIndex()) const;
   QModelIndex parent(const QModelIndex &index) const;
   int rowCount(const QModelIndex &parent = QModelIndex()) const;
   int columnCount(const QModelIndex &parent = QModelIndex()) const;
 
   void insertTopLevelItem (int at, TreeItem *treeItem);
   TreeItem *topLevelItem (int at);
 
-  void updateFromSymbolTable ();
+
+  void cacheSymbolTable ();
   void updateTreeEntry (TreeItem * treeItem, symbol_table::symbol_record *symbolRecord);
   void updateCategory (int topLevelItemIndex, const QList < symbol_table::symbol_record *> &symbolTable);
   QString octaveValueAsQString (const octave_value &octaveValue);
 
+public slots:
+  void updateFromSymbolTable ();
+
 signals:
   void expandRequest();
 
 private:
+  QSemaphore *_cachedSymbolTableSemaphore;
+  std::list < symbol_table::symbol_record > _cachedSymbolTable;
   TreeItem *_rootItem;
 };
 
 #endif // WORKSPACEMODEL_H
diff --git a/gui/src/backend/OctaveLink.cpp b/gui/src/backend/OctaveLink.cpp
--- a/gui/src/backend/OctaveLink.cpp
+++ b/gui/src/backend/OctaveLink.cpp
@@ -12,48 +12,54 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program. If not, see <http://www.gnu.org/licenses/>.
  */
 
 #include "OctaveLink.h"
 
-void octave_loop_hook_impl()
+int update_hook_impl()
 {
   OctaveLink::instance()->triggerUpdateHistoryModel();
-  OctaveLink::instance()->triggerUpdateSymbolTable();
+  OctaveLink::instance()->triggerCacheSymbolTable();
+  return 0;
 }
 
-
 OctaveLink OctaveLink::m_singleton;
 
 OctaveLink::OctaveLink ():QObject ()
 {
   m_historyModel = new QStringListModel (this);
   m_workspaceModel = new WorkspaceModel (this);
 
   m_workspaceModel->insertTopLevelItem(0, new TreeItem ("Local"));
   m_workspaceModel->insertTopLevelItem(1, new TreeItem ("Global"));
   m_workspaceModel->insertTopLevelItem(2, new TreeItem ("Persistent"));
   m_workspaceModel->insertTopLevelItem(3, new TreeItem ("Hidden"));
+
+  _updateWorkspaceModelTimer.setInterval (1000);
+  _updateWorkspaceModelTimer.setSingleShot (false);
+  connect(&_updateWorkspaceModelTimer, SIGNAL (timeout ()),
+    m_workspaceModel, SLOT (updateFromSymbolTable ()));
 }
 
 OctaveLink::~OctaveLink ()
 {
 }
 
 void
 OctaveLink::launchOctave ()
 {
   // Create both threads.
   m_octaveMainThread = new OctaveMainThread (this);
-  octave_loop_hook = octave_loop_hook_impl;
+  command_editor::add_event_hook(update_hook_impl);
   // Start the first one.
   m_octaveMainThread->start ();
+  _updateWorkspaceModelTimer.start ();
 }
 
 void
 OctaveLink::terminateOctave ()
 {
   m_octaveMainThread->terminate ();
   quit_allowed = true;
   m_octaveMainThread->wait();
@@ -73,19 +79,19 @@ OctaveLink::triggerUpdateHistoryModel ()
         {
           m_historyModel->insertRow (0);
           m_historyModel->setData (m_historyModel->index (0), QString (command_history::get_entry (i).c_str ()));
         }
     }
 }
 
 void
-OctaveLink::triggerUpdateSymbolTable ()
+OctaveLink::triggerCacheSymbolTable ()
 {
-  m_workspaceModel->updateFromSymbolTable();
+  m_workspaceModel->cacheSymbolTable();
 }
 
 QStringListModel *
 OctaveLink::historyModel ()
 {
   return m_historyModel;
 }
 
diff --git a/gui/src/backend/OctaveLink.h b/gui/src/backend/OctaveLink.h
--- a/gui/src/backend/OctaveLink.h
+++ b/gui/src/backend/OctaveLink.h
@@ -66,16 +66,17 @@
 #include <QFileInfo>
 #include <QList>
 #include <QString>
 #include <QStringList>
 #include <QVector>
 #include <QSemaphore>
 #include <QObject>
 #include <QStringListModel>
+#include <QTimer>
 
 #include "WorkspaceModel.h"
 #include "OctaveMainThread.h"
 
 /**
   * \class OctaveLink
   * Manages a link to an octave instance.
   */
@@ -90,23 +91,24 @@ public:
   }
 
   void launchOctave ();
   void terminateOctave ();
   QStringListModel *historyModel ();
   WorkspaceModel *workspaceModel ();
 
   void triggerUpdateHistoryModel ();
-  void triggerUpdateSymbolTable ();
+  void triggerCacheSymbolTable ();
 
 private:
   OctaveLink ();
   ~OctaveLink ();
 
   QStringListModel *m_historyModel;
   WorkspaceModel *m_workspaceModel;
 
   // Threads for running octave and managing the data interaction.
   OctaveMainThread *m_octaveMainThread;
+  QTimer _updateWorkspaceModelTimer;
 
   static OctaveLink m_singleton;
 };
 #endif // OCTAVELINK_H
