# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1466017953 14400
#      Wed Jun 15 15:12:33 2016 -0400
# Node ID e4a53d9b28bde1e401e3406b8b4a43b0939b5ca9
# Parent  f500cde065f7c5e00829fb167b2a7990cdf2977f
remove code specific to obsolete version of GCC

* thread-manager.cc, sighandlers.cc: Delete code to work around bug in
GCC 4.1.2 and possibly earlier versions.

diff --git a/libgui/src/thread-manager.cc b/libgui/src/thread-manager.cc
--- a/libgui/src/thread-manager.cc
+++ b/libgui/src/thread-manager.cc
@@ -94,44 +94,32 @@ private:
 };
 
 #endif
 
 octave_thread_manager::octave_thread_manager (void)
   : rep (octave_thread_manager::create_rep ())
 { }
 
-// The following is a workaround for an apparent bug in GCC 4.1.2 and
-// possibly earlier versions.  See Octave bug report #30685 for details.
-#if defined (__GNUC__)
-#  if ! (__GNUC__ > 4 \
-         || (__GNUC__ == 4 && (__GNUC_MINOR__ > 1 \
-                               || (__GNUC_MINOR__ == 1 && __GNUC_PATCHLEVEL__ > 2))))
-#    undef GNULIB_NAMESPACE
-#    define GNULIB_NAMESPACE
-#    warning "disabling GNULIB_NAMESPACE for signal functions -- consider upgrading to a current version of GCC"
-#  endif
-#endif
-
 static void
 block_or_unblock_signal (int how, int sig)
 {
 #if ! defined (__WIN32__) || defined (__CYGWIN__)
   // Blocking/unblocking signals at thread level is only supported
   // on platform with fully compliant POSIX threads. This is not
   // supported on Win32. Moreover, we have to make sure that SIGINT
   // handler is not installed before calling AllocConsole: installing
   // a SIGINT handler internally calls SetConsoleCtrlHandler, which
   // must be called after AllocConsole to be effective.
 
   sigset_t signal_mask;
 
-  GNULIB_NAMESPACE::sigemptyset (&signal_mask);
+  gnulib::sigemptyset (&signal_mask);
 
-  GNULIB_NAMESPACE::sigaddset (&signal_mask, sig);
+  gnulib::sigaddset (&signal_mask, sig);
 
   pthread_sigmask (how, &signal_mask, 0);
 #endif
 }
 
 void
 octave_thread_manager::block_interrupt_signal (void)
 {
diff --git a/libinterp/corefcn/sighandlers.cc b/libinterp/corefcn/sighandlers.cc
--- a/libinterp/corefcn/sighandlers.cc
+++ b/libinterp/corefcn/sighandlers.cc
@@ -222,44 +222,32 @@ void w32_raise_sigint (void)
 
 #endif
 
 // Signal handler return type.
 #if ! defined (BADSIG)
 #  define BADSIG (void (*)(int))-1
 #endif
 
-// The following is a workaround for an apparent bug in GCC 4.1.2 and
-// possibly earlier versions.  See Octave bug report #30685 for details.
-#if defined (__GNUC__)
-#  if ! (__GNUC__ > 4 \
-         || (__GNUC__ == 4 && (__GNUC_MINOR__ > 1 \
-                               || (__GNUC_MINOR__ == 1 && __GNUC_PATCHLEVEL__ > 2))))
-#    undef GNULIB_NAMESPACE
-#    define GNULIB_NAMESPACE
-#    warning "disabling GNULIB_NAMESPACE for signal functions -- consider upgrading to a current version of GCC"
-#  endif
-#endif
-
 #define BLOCK_SIGNAL(sig, nvar, ovar) \
   do \
     { \
-      GNULIB_NAMESPACE::sigemptyset (&nvar); \
-      GNULIB_NAMESPACE::sigaddset (&nvar, sig); \
-      GNULIB_NAMESPACE::sigemptyset (&ovar); \
-      GNULIB_NAMESPACE::sigprocmask (SIG_BLOCK, &nvar, &ovar); \
+      gnulib::sigemptyset (&nvar); \
+      gnulib::sigaddset (&nvar, sig); \
+      gnulib::sigemptyset (&ovar); \
+      gnulib::sigprocmask (SIG_BLOCK, &nvar, &ovar); \
     } \
   while (0)
 
 #if ! defined (SIGCHLD) && defined (SIGCLD)
 #  define SIGCHLD SIGCLD
 #endif
 
 #define BLOCK_CHILD(nvar, ovar) BLOCK_SIGNAL (SIGCHLD, nvar, ovar)
-#define UNBLOCK_CHILD(ovar) GNULIB_NAMESPACE::sigprocmask (SIG_SETMASK, &ovar, 0)
+#define UNBLOCK_CHILD(ovar) gnulib::sigprocmask (SIG_SETMASK, &ovar, 0)
 
 // Called from octave_quit () to actually do something about the signals
 // we have caught.
 
 void
 octave_signal_handler (void)
 {
   // The list of signals is relatively short, so we will just go
@@ -340,17 +328,17 @@ my_friendly_exit (const char *sig_name, 
           MINGW_SIGNAL_CLEANUP ();
 
           exit (1);
         }
       else
         {
           octave_set_signal_handler (sig_number, SIG_DFL);
 
-          GNULIB_NAMESPACE::raise (sig_number);
+          gnulib::raise (sig_number);
         }
     }
 }
 
 sig_handler *
 octave_set_signal_handler (int sig, sig_handler *handler,
                            bool restart_syscalls)
 {
@@ -371,20 +359,20 @@ octave_set_signal_handler (int sig, sig_
 #  if defined (SIGALRM)
   else
 #  endif
   // FIXME: Do we also need to explicitly disable SA_RESTART?
   if (restart_syscalls)
     act.sa_flags |= SA_RESTART;
 #endif
 
-  GNULIB_NAMESPACE::sigemptyset (&act.sa_mask);
-  GNULIB_NAMESPACE::sigemptyset (&oact.sa_mask);
+  gnulib::sigemptyset (&act.sa_mask);
+  gnulib::sigemptyset (&oact.sa_mask);
 
-  GNULIB_NAMESPACE::sigaction (sig, &act, &oact);
+  gnulib::sigaction (sig, &act, &oact);
 
   return oact.sa_handler;
 }
 
 static void
 generic_sig_handler (int sig)
 {
   my_friendly_exit (strsignal (sig), sig);
