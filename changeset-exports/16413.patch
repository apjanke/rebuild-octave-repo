# HG changeset patch
# User Daniel J Sebald <daniel.sebald@ieee.org>
# Date 1364962256 14400
#      Wed Apr 03 00:10:56 2013 -0400
# Node ID 28136851099a13f78663b30949a858ff0a88dd09
# Parent  61989cde13aed9d3c644cbba3e2919400f9dd4dc
remove _terminal pointer from main_window, it is contained by other Qt object

* main-window.cc, main-window.h (main_window::_terminal):
Delete member variable.
(main_window::get_terminal_view, main_window::get_history_dock_widget,
main_window::get_files_dock_widget, main_window::is_closing):
Delete unused functions.
(main_window::notice_settings): New argument settings.
(main_window::handle_command_double_clicked): Don't sent terminal a
command here.
(main_window::process_settings_dialog_request): New argument, settings.
(main_window::read_settings): New argument, settings.
Produce debug message if settings is nul.
(main_window::write_settings): Produce debug message if settings is nul.
(main_window::construct): Make _terminal a local variable and rename
to terminal.  Change all uses.

* QTerminal.cc: New file.
(QTerminal::relay_command): New slot.

* QTerminal.h (QTerminal::notice_settings,
QTerminal::notice_settings): New slots.

* QTerminal: Delete.

* files_dockwidget.cc, files_dockwidget.h
(files_dock_widget::notice_settings): New argument, settings.

* file_editor_tab.cc, file_editor_tab.h (file_editor_tab::notice_settings):
Changed the slot to accept QSettings pointer rather than retrieve from
resource_manager. (file_editor_tabl::file_editor_tab,
file_editor_tab::update_lexer): Check that settings is not null
before using.

* file_editor.cc, file_editor.h (file_editor::notice_settings,
file_editor::fetab_settings_changed): New argument, settings.
(file_editor::update_lexer, file_editor::file_editor_tab): Check that
settings is not null before using.

* qterminal-module.mk (qterminal_libqterminal_la_SOURCES): Add
QTerminal.cc to the list.

diff --git a/libgui/qterminal-module.mk b/libgui/qterminal-module.mk
--- a/libgui/qterminal-module.mk
+++ b/libgui/qterminal-module.mk
@@ -41,17 +41,18 @@ qterminal_libqterminal_la_CPPFLAGS = \
 qterminal_libqterminal_la_CFLAGS = $(AM_CFLAGS)
 
 qterminal_libqterminal_la_CXXFLAGS = $(AM_CXXFLAGS)
 
 if WIN32_TERMINAL
 
 qterminal_libqterminal_la_SOURCES = \
   qterminal/libqterminal/win32/QTerminalColors.cpp \
-  qterminal/libqterminal/win32/QWinTerminalImpl.cpp
+  qterminal/libqterminal/win32/QWinTerminalImpl.cpp \
+  qterminal/libqterminal/QTerminal.cc
 
 qterminal_libqterminal_la_MOC += \
   qterminal/libqterminal/win32/moc-QWinTerminalImpl.cc
 
 qterminal_libqterminal_la_CPPFLAGS += -DUNICODE
 
 # This flag is required to let MOC know about Q_OS_WIN32.
 MOC_CPPFLAGS += -DQ_OS_WIN32
@@ -68,17 +69,18 @@ qterminal_libqterminal_la_SOURCES = \
   qterminal/libqterminal/unix/kpty.cpp \
   qterminal/libqterminal/unix/QUnixTerminalImpl.cpp \
   qterminal/libqterminal/unix/Screen.cpp \
   qterminal/libqterminal/unix/ScreenWindow.cpp \
   qterminal/libqterminal/unix/TerminalCharacterDecoder.cpp \
   qterminal/libqterminal/unix/Vt102Emulation.cpp \
   qterminal/libqterminal/unix/SelfListener.cpp \
   qterminal/libqterminal/unix/TerminalModel.cpp \
-  qterminal/libqterminal/unix/TerminalView.cpp
+  qterminal/libqterminal/unix/TerminalView.cpp \
+  qterminal/libqterminal/QTerminal.cc
 
 qterminal_libqterminal_la_MOC += \
   qterminal/libqterminal/unix/moc-Emulation.cc \
   qterminal/libqterminal/unix/moc-Filter.cc \
   qterminal/libqterminal/unix/moc-QUnixTerminalImpl.cc \
   qterminal/libqterminal/unix/moc-ScreenWindow.cc \
   qterminal/libqterminal/unix/moc-SelfListener.cc \
   qterminal/libqterminal/unix/moc-TerminalModel.cc \
diff --git a/libgui/qterminal/libqterminal/QTerminal b/libgui/qterminal/libqterminal/QTerminal
deleted file mode 100644
--- a/libgui/qterminal/libqterminal/QTerminal
+++ /dev/null
@@ -1,23 +0,0 @@
-/*
-
-Copyright (C) 2012 Michael Goffioul.
-Copyright (C) 2012 Jacob Dawid.
-
-This file is part of QTerminal.
-
-Foobar is free software: you can redistribute it and/or modify
-it under the terms of the GNU General Public License as published by
-the Free Software Foundation, either version 3 of the License, or
-(at your option) any later version.
-
-QTerminal is distributed in the hope that it will be useful,
-but WITHOUT ANY WARRANTY; without even the implied warranty of
-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU General Public License for more details.
-
-You should have received a copy of the GNU General Public License
-along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
-
-*/
-
-#include "QTerminal.h"
diff --git a/libgui/qterminal/libqterminal/QTerminal.cc b/libgui/qterminal/libqterminal/QTerminal.cc
new file mode 100644
--- /dev/null
+++ b/libgui/qterminal/libqterminal/QTerminal.cc
@@ -0,0 +1,52 @@
+/*
+
+Copyright (C) 2012 Michael Goffioul.
+Copyright (C) 2012 Jacob Dawid.
+
+This file is part of QTerminal.
+
+Foobar is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
+(at your option) any later version.
+
+QTerminal is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
+
+*/
+
+#include "QTerminal.h"
+
+#include <QSettings>
+
+void
+QTerminal::notice_settings (const QSettings *settings)
+{
+  // QSettings pointer is checked before emitting.
+
+  // Set terminal font:
+  QFont term_font = QFont();
+  term_font.setFamily(settings->value("terminal/fontName","Courier New").toString());
+  term_font.setPointSize(settings->value("terminal/fontSize",10).toInt ());
+  setTerminalFont (term_font);
+
+  QString cursorType = settings->value ("terminal/cursorType","ibeam").toString ();
+  bool cursorBlinking = settings->value ("terminal/cursorBlinking",true).toBool ();
+  if (cursorType == "ibeam")
+    setCursorType(QTerminalInterface::IBeamCursor, cursorBlinking);
+  else if (cursorType == "block")
+    setCursorType(QTerminalInterface::BlockCursor, cursorBlinking);
+  else if (cursorType == "underline")
+    setCursorType(QTerminalInterface::UnderlineCursor, cursorBlinking);
+}
+
+void
+QTerminal::relay_command (const QString& command)
+{
+  sendText (command);
+}
diff --git a/libgui/qterminal/libqterminal/QTerminal.h b/libgui/qterminal/libqterminal/QTerminal.h
--- a/libgui/qterminal/libqterminal/QTerminal.h
+++ b/libgui/qterminal/libqterminal/QTerminal.h
@@ -29,22 +29,30 @@ along with Foobar.  If not, see <http://
     #include "win32/QWinTerminalImpl.h"
     class QTerminal : public QWinTerminalImpl
     {
         Q_OBJECT
     public:
         QTerminal(QWidget *xparent = 0)
             : QWinTerminalImpl(xparent) { }
         ~QTerminal() { }
+
+    public slots:
+        void notice_settings (const QSettings *settings);
+        void relay_command (const QString& text);
     };
 #else
     #include "unix/QUnixTerminalImpl.h"
     class QTerminal : public QUnixTerminalImpl
     {
         Q_OBJECT
     public:
         QTerminal(QWidget *xparent = 0)
             : QUnixTerminalImpl(xparent) { }
         ~QTerminal() { }
+
+    public slots:
+        void notice_settings (const QSettings *settings);
+        void relay_command (const QString& command);
     };
 #endif
 
 #endif // QTERMINAL_H
diff --git a/libgui/src/files-dockwidget.cc b/libgui/src/files-dockwidget.cc
--- a/libgui/src/files-dockwidget.cc
+++ b/libgui/src/files-dockwidget.cc
@@ -177,21 +177,20 @@ files_dock_widget::display_directory (co
         {
           if (QFile::exists (fileInfo.absoluteFilePath ()))
             emit open_file (fileInfo.absoluteFilePath ());
         }
     }
 }
 
 void
-files_dock_widget::notice_settings ()
+files_dock_widget::notice_settings (const QSettings *settings)
 {
-  QSettings *settings = resource_manager::get_settings ();
+  // Qsettings pointer is checked before emitting.
 
-  // FIXME -- what should happen if settings is 0?
   // file names are always shown, other columns can be hidden by settings
   _file_tree_view->setColumnHidden (0, false);
   _file_tree_view->setColumnHidden (1, !settings->value ("showFileSize",false).toBool ());
   _file_tree_view->setColumnHidden (2, !settings->value ("showFileType",false).toBool ());
   _file_tree_view->setColumnHidden (3, !settings->value ("showLastModified",false).toBool ());
   _file_tree_view->setAlternatingRowColors (settings->value ("useAlternatingRowColors",true).toBool ());
   if (settings->value ("showHiddenFiles",false).toBool ())
     {
diff --git a/libgui/src/files-dockwidget.h b/libgui/src/files-dockwidget.h
--- a/libgui/src/files-dockwidget.h
+++ b/libgui/src/files-dockwidget.h
@@ -29,16 +29,17 @@ along with Octave; see the file COPYING.
 #include <QWidget>
 #include <QListWidget>
 #include <QFileSystemModel>
 #include <QToolBar>
 #include <QToolButton>
 #include <QVBoxLayout>
 #include <QAction>
 #include <QTreeView>
+#include <QSettings>
 
 #include <QLineEdit>
 #include "octave-dock-widget.h"
 
 /**
    \class files_dock_widget
    \brief Dock widget to display files in the current directory.
 */
@@ -62,17 +63,17 @@ public slots:
   void set_current_directory (const QString& currentDirectory);
 
   /** Accepts user input a the line edit for the current directory. */
   void handle_directory_entered ();
 
   void display_directory (const QString& directory);
 
   /** Tells the widget to react on changed settings. */
-  void notice_settings ();
+  void notice_settings (const QSettings *settings);
 
 signals:
   /** Emitted, whenever the user requested to open a file. */
   void open_file (const QString& fileName);
 
   /** Emitted, whenever the currently displayed directory changed. */
   void displayed_directory_changed (const QString& directory);
 
diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -111,17 +111,19 @@ file_editor_tab::file_editor_tab (QStrin
   // connect modified signal
   connect (_edit_area, SIGNAL (modificationChanged (bool)),
            this, SLOT (update_window_title (bool)));
   connect (_edit_area, SIGNAL (copyAvailable (bool)),
            this, SLOT (handle_copy_available (bool)));
   connect (&_file_system_watcher, SIGNAL (fileChanged (QString)),
            this, SLOT (file_has_changed (QString)));
 
-  notice_settings ();
+  QSettings *settings = resource_manager::get_settings ();
+  if (settings)
+    notice_settings (settings);
 }
 
 file_editor_tab::~file_editor_tab ()
 {
   // Destroy items attached to _edit_area.
   QsciLexer *lexer = _edit_area->lexer ();
   if (lexer)
     {
@@ -237,17 +239,18 @@ file_editor_tab::update_lexer ()
       lexer = new QsciLexerDiff ();
     }
   else // Default to bash lexer.
     {
       lexer = new QsciLexerBash ();
     }
 
   QSettings *settings = resource_manager::get_settings ();
-  lexer->readSettings (*settings);
+  if (settings)
+    lexer->readSettings (*settings);
   _edit_area->setLexer (lexer);
 
 }
 
 // slot for fetab_set_focus: sets the focus to the current edit area
 void
 file_editor_tab::set_focus (const QWidget* ID)
 {
@@ -998,24 +1001,22 @@ file_editor_tab::file_has_changed (const
                this, SLOT (handle_file_resave_answer (int)));
       msgBox->setWindowModality (Qt::WindowModal);
       msgBox->setAttribute (Qt::WA_DeleteOnClose);
       msgBox->show ();
     }
 }
 
 void
-file_editor_tab::notice_settings ()
+file_editor_tab::notice_settings (const QSettings *settings)
 {
+  // QSettings pointer is checked before emitting.
+
   update_lexer ();
   QFontMetrics lexer_font_metrics (_edit_area->lexer ()->defaultFont (0));
-  QSettings *settings = resource_manager::get_settings ();
-
-  if (settings==NULL)
-    return; // this shouldn't happen!
 
   _edit_area->setCaretLineVisible(settings->value ("editor/highlightCurrentLine",true).toBool ());
 
   if (settings->value ("editor/codeCompletion",true).toBool ())
     _edit_area->setAutoCompletionThreshold (1);
   else
     _edit_area->setAutoCompletionThreshold (-1);
 
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -22,16 +22,17 @@ along with Octave; see the file COPYING.
 
 #ifndef FILEEDITORTAB_H
 #define FILEEDITORTAB_H
 
 #include <Qsci/qsciscintilla.h>
 #include <QWidget>
 #include <QCloseEvent>
 #include <QFileSystemWatcher>
+#include <QSettings>
 
 #include "find-dialog.h"
 
 class file_editor;
 class file_editor_tab : public QWidget
 {
   Q_OBJECT
   public:
@@ -39,17 +40,17 @@ class file_editor_tab : public QWidget
   ~file_editor_tab ();
 
 public slots:
   void update_window_title(bool modified);
   void handle_copy_available(bool enableCopy);
   void handle_margin_clicked (int line, int margin, Qt::KeyboardModifiers state);
 
   /** Tells the editor tab to react on changed settings. */
-  void notice_settings ();
+  void notice_settings (const QSettings *settings);
   /** Will initiate close if associated with the identifier tag. */
   void conditional_close (const QWidget* ID);
   /** Change to a different editor tab by identifier tag. */
   void change_editor_state (const QWidget* ID);
   /** Simply transmit file name. */
   void file_name_query (const QWidget* ID);
 
   void set_focus (const QWidget* ID);
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -589,20 +589,20 @@ file_editor::handle_editor_state_changed
               ced = ced.left (lastslash);
             }
         }
       setFocusProxy (_tab_widget->currentWidget ());
     }
 }
 
 void
-file_editor::notice_settings ()
+file_editor::notice_settings (const QSettings *settings)
 {
   // Relay signal to file editor tabs.
-  emit fetab_settings_changed ();
+  emit fetab_settings_changed (settings);
 }
 
 void
 file_editor::construct ()
 {
   QWidget *editor_widget = new QWidget (this);
 
   // FIXME -- what was the intended purpose of this unused variable?
@@ -869,18 +869,18 @@ file_editor::add_file_editor_tab (file_e
   connect (f, SIGNAL (editor_check_conflict_save (const QString&, bool)),
            this, SLOT (check_conflict_save (const QString&, bool)));
   connect (f, SIGNAL (mru_add_file (const QString&)),
            this, SLOT (handle_mru_add_file (const QString&)));
   connect (f, SIGNAL (process_octave_code (const QString&)),
            parent (), SLOT (handle_command_double_clicked (const QString&)));
   
   // Signals from the file_editor non-trivial operations
-  connect (this, SIGNAL (fetab_settings_changed ()),
-           f, SLOT (notice_settings ()));
+  connect (this, SIGNAL (fetab_settings_changed (const QSettings *)),
+           f, SLOT (notice_settings (const QSettings *)));
   connect (this, SIGNAL (fetab_close_request (const QWidget*)),
            f, SLOT (conditional_close (const QWidget*)));
   connect (this, SIGNAL (fetab_change_request (const QWidget*)),
            f, SLOT (change_editor_state (const QWidget*)));
   connect (this, SIGNAL (fetab_file_name_query (const QWidget*)),
            f, SLOT (file_name_query (const QWidget*)));
   connect (this, SIGNAL (fetab_save_file (const QWidget*, const QString&, bool)),
            f, SLOT (save_file (const QWidget*, const QString&, bool)));
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -24,16 +24,17 @@ along with Octave; see the file COPYING.
 #define FILEEDITORMDISUBWINDOW_H
 
 #include <QToolBar>
 #include <QAction>
 #include <QMenuBar>
 #include <QStatusBar>
 #include <QCloseEvent>
 #include <QTabWidget>
+#include <QSettings>
 
 #include <map>
 
 #include "file-editor-interface.h"
 #include "file-editor-tab.h"
 
 enum editor_markers
   {
@@ -55,17 +56,17 @@ class file_editor : public file_editor_i
   QMenu *           debug_menu ();
   QToolBar *        toolbar ();
 
   void set_focus ();
   void handle_entered_debug_mode ();
   void handle_quit_debug_mode ();
 
 signals:
-  void fetab_settings_changed ();
+  void fetab_settings_changed (const QSettings *settings);
   void fetab_close_request (const QWidget* ID);
   void fetab_change_request (const QWidget* ID);
   void fetab_file_name_query (const QWidget* ID);
   // Save is a ping-pong type of communication
   void fetab_save_file (const QWidget* ID, const QString& fileName, bool remove_on_success);
   // No fetab_open, functionality in editor
   // No fetab_new, functionality in editor
   void fetab_undo (const QWidget* ID);
@@ -133,17 +134,17 @@ public slots:
 
   void handle_insert_debugger_pointer_request (const QString& file, int line);
   void handle_delete_debugger_pointer_request (const QString& file, int line);
   void handle_update_dbstop_marker_request (bool insert, const QString& file,
                                             int line);
   void handle_edit_file_request (const QString& file);
 
   /** Tells the editor to react on changed settings. */
-  void notice_settings ();
+  void notice_settings (const QSettings *settings);
 
 private slots:
   void request_open_file (const QString& fileName, int line = -1,
                           bool debug_pointer = false,
                           bool dbstop_marker = false, bool insert = true);
 
 private:
   void construct ();
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -156,19 +156,18 @@ main_window::handle_clear_workspace_requ
 
 void
 main_window::handle_clear_history_request()
 {
   octave_link::post_event (this, &main_window::clear_history_callback);
 }
 
 void
-main_window::handle_command_double_clicked (const QString& command)
+main_window::handle_command_double_clicked (const QString&)
 {
-  _terminal->sendText (command);
   focus_command_window ();
 }
 
 void
 main_window::open_online_documentation_page ()
 {
   QDesktopServices::openUrl (QUrl ("http://gnu.org/software/octave/doc/interpreter"));
 }
@@ -194,44 +193,28 @@ main_window::open_agora_page ()
 void
 main_window::process_settings_dialog_request ()
 {
   settings_dialog *settingsDialog = new settings_dialog (this);
   int change_settings = settingsDialog->exec ();
   if (change_settings == QDialog::Accepted)
     {
       settingsDialog->write_changed_settings ();
-      emit settings_changed ();
+      QSettings *settings = resource_manager::get_settings ();
+      if (settings)
+        emit settings_changed (settings);
     }
   delete settingsDialog;
 }
 
 
 void
-main_window::notice_settings ()
+main_window::notice_settings (const QSettings *settings)
 {
-  QSettings *settings = resource_manager::get_settings ();
-
-  // FIXME -- what should happen if settings is 0?
-
-  // Set terminal font:
-  QFont term_font = QFont();
-  term_font.setFamily(settings->value("terminal/fontName","Courier New").toString());
-  term_font.setPointSize(settings->value("terminal/fontSize",10).toInt ());
-  _terminal->setTerminalFont (term_font);
-
-  QString cursorType = settings->value ("terminal/cursorType","ibeam").toString ();
-  bool cursorBlinking = settings->value ("terminal/cursorBlinking",true).toBool ();
-  if (cursorType == "ibeam")
-    _terminal->setCursorType(QTerminalInterface::IBeamCursor, cursorBlinking);
-  else if (cursorType == "block")
-    _terminal->setCursorType(QTerminalInterface::BlockCursor, cursorBlinking);
-  else if (cursorType == "underline")
-    _terminal->setCursorType(QTerminalInterface::UnderlineCursor,
-                             cursorBlinking);
+  // QSettings pointer is checked before emitting.
 
   // the widget's icons (when floating)
   QString icon_set = settings->value ("DockWidgets/widget_icon_set","NONE").
                                       toString ();
   static struct
     {
       QString name;
       QString path;
@@ -360,19 +343,19 @@ main_window::focus_command_window ()
     {
       _terminal_dock_widget->setVisible (true);
     }
 
   _terminal_dock_widget->setFocus ();
   _terminal_dock_widget->activateWindow ();
   _terminal_dock_widget->raise ();
 
-  _terminal->setFocus ();
-  _terminal->activateWindow ();
-  _terminal->raise ();
+  _terminal_dock_widget->widget ()->setFocus ();
+  _terminal_dock_widget->widget ()->activateWindow ();
+  _terminal_dock_widget->widget ()->raise ();
 }
 
 void
 main_window::focus_command_history ()
 {
   if (!_history_dock_widget->isVisible ())
     {
       _history_dock_widget->setVisible (true);
@@ -587,18 +570,21 @@ main_window::closeEvent (QCloseEvent *e)
   e->ignore ();
   octave_link::post_event (this, &main_window::exit_callback);
 }
 
 void
 main_window::read_settings ()
 {
   QSettings *settings = resource_manager::get_settings ();
-
-  // FIXME -- what should happen if settings is 0?
+  if (!settings)
+    {
+      qDebug("Error: QSettings pointer from resource manager is NULL.");
+      return;
+    }
 
   restoreState (settings->value ("MainWindow/windowState").toByteArray ());
   settings->beginGroup ("DockWidgets");
   // restoring the geometry of all dock-widgets
   foreach (QObject *obj, children ())
     {
       QString name = obj->objectName ();
       if (obj->inherits("QDockWidget") && ! name.isEmpty ())
@@ -616,25 +602,28 @@ main_window::read_settings ()
   settings->endGroup();
   restoreGeometry (settings->value ("MainWindow/geometry").toByteArray ());
   // restore the list of the last directories
   QStringList curr_dirs = settings->value ("MainWindow/current_directory_list").toStringList ();
   for (int i=0; i < curr_dirs.size (); i++)
     {
       _current_directory_combo_box->addItem (curr_dirs.at (i));
     }
-  emit settings_changed ();
+  emit settings_changed (settings);
 }
 
 void
 main_window::write_settings ()
 {
   QSettings *settings = resource_manager::get_settings ();
-
-  // FIXME -- what should happen if settings is 0?
+  if (!settings)
+    {
+      qDebug("Error: QSettings pointer from resource manager is NULL.");
+      return;
+    }
 
   settings->setValue ("MainWindow/geometry", saveGeometry ());
   settings->beginGroup ("DockWidgets");
   // saving the geometry of all widgets
   foreach (QObject *obj, children())
     {
       QString name = obj->objectName ();
       if (obj->inherits ("QDockWidget") && ! name.isEmpty ())
@@ -714,20 +703,20 @@ main_window::construct ()
 
   QToolButton *current_directory_tool_button = new QToolButton (this);
   current_directory_tool_button->setIcon (QIcon(":/actions/icons/search.png"));
 
   QToolButton *current_directory_up_tool_button = new QToolButton (this);
   current_directory_up_tool_button->setIcon (QIcon(":/actions/icons/up.png"));
 
   // Octave Terminal subwindow.
-  _terminal = new QTerminal (this);
-  _terminal->setObjectName ("OctaveTerminal");
-  _terminal->setFocusPolicy (Qt::StrongFocus);
-  _terminal_dock_widget = new terminal_dock_widget (_terminal, this);
+  QTerminal *terminal = new QTerminal (this);
+  terminal->setObjectName ("OctaveTerminal");
+  terminal->setFocusPolicy (Qt::StrongFocus);
+  _terminal_dock_widget = new terminal_dock_widget (terminal, this);
 
   // Create and set the central widget.  QMainWindow takes ownership of
   // the widget (pointer) so there is no need to delete the object upon
   // destroying this main_window.
   QWidget *dummyWidget = new QWidget ();
   dummyWidget->setObjectName ("CentralDummyWidget");
   dummyWidget->resize (10, 10);
   dummyWidget->setSizePolicy (QSizePolicy::Minimum, QSizePolicy::Minimum);
@@ -1096,45 +1085,49 @@ main_window::construct ()
   connect (documentation_action,        SIGNAL (triggered ()),
            this,                        SLOT (focus_documentation ()));
   connect (ondisk_documentation_action, SIGNAL (triggered ()),
            this,                        SLOT (focus_documentation ()));
 
   connect (reset_windows_action,        SIGNAL (triggered ()),
            this,                        SLOT   (reset_windows ()));
 #ifdef HAVE_QSCINTILLA
-  connect (this,                        SIGNAL (settings_changed ()),
-           _file_editor,                SLOT   (notice_settings ()));
+  connect (this,                        SIGNAL (settings_changed (const QSettings *)),
+           _file_editor,                SLOT   (notice_settings (const QSettings *)));
 #endif
-  connect (this,                        SIGNAL (settings_changed ()),
-           _files_dock_widget,          SLOT   (notice_settings ()));
-  connect (this,                        SIGNAL (settings_changed ()),
-           this,                        SLOT   (notice_settings ()));
+  connect (this,                        SIGNAL (settings_changed (const QSettings *)),
+           terminal,                    SLOT   (notice_settings (const QSettings *)));
+  connect (this,                        SIGNAL (settings_changed (const QSettings *)),
+           _files_dock_widget,          SLOT   (notice_settings (const QSettings *)));
+  connect (this,                        SIGNAL (settings_changed (const QSettings *)),
+           this,                        SLOT   (notice_settings (const QSettings *)));
   connect (_files_dock_widget,          SIGNAL (open_file (QString)),
            this,                        SLOT   (open_file (QString)));
   connect (_files_dock_widget,          SIGNAL (displayed_directory_changed(QString)),
            this,                        SLOT   (set_current_working_directory(QString)));
   connect (_history_dock_widget,        SIGNAL (information (QString)),
            this,                        SLOT   (report_status_message (QString)));
-  connect (_history_dock_widget,        SIGNAL (command_double_clicked (QString)),
-           this,                        SLOT   (handle_command_double_clicked (QString)));
+  connect (_history_dock_widget,        SIGNAL (command_double_clicked (const QString&)),
+           this,                        SLOT   (handle_command_double_clicked (const QString&)));
+  connect (_history_dock_widget,        SIGNAL (command_double_clicked (const QString&)),
+           terminal,                    SLOT   (relay_command (const QString&)));
   connect (save_workspace_action,       SIGNAL (triggered ()),
            this,                        SLOT   (handle_save_workspace_request ()));
   connect (load_workspace_action,       SIGNAL (triggered ()),
            this,                        SLOT   (handle_load_workspace_request ()));
   connect (clear_workspace_action,      SIGNAL (triggered ()),
            this,                        SLOT   (handle_clear_workspace_request ()));
   connect (current_directory_tool_button, SIGNAL (clicked ()),
            this,                        SLOT   (change_current_working_directory ()));
   connect (current_directory_up_tool_button, SIGNAL (clicked ()),
            this,                        SLOT   (current_working_directory_up()));
   connect (copy_action,                 SIGNAL (triggered()),
-           _terminal,                   SLOT   (copyClipboard ()));
+           terminal,                    SLOT   (copyClipboard ()));
   connect (paste_action,                SIGNAL (triggered()),
-           _terminal,                   SLOT   (pasteClipboard ()));
+           terminal,                    SLOT   (pasteClipboard ()));
   connect (_current_directory_combo_box, SIGNAL (activated (QString)),
            this,                        SLOT (set_current_working_directory (QString)));
   connect (_current_directory_line_edit, SIGNAL (returnPressed ()),
            this,                        SLOT (current_working_directory_entered ()));
   connect (_debug_continue,             SIGNAL (triggered ()),
            this,                        SLOT (debug_continue ()));
   connect (_debug_step_into,            SIGNAL (triggered ()),
            this,                        SLOT (debug_step_into ()));
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -57,29 +57,18 @@ along with Octave; see the file COPYING.
  * Represents the main window.
  */
 class main_window : public QMainWindow
 {
   Q_OBJECT public:
   main_window (QWidget * parent = 0);
   ~main_window ();
 
-  QTerminal *get_terminal_view () { return _terminal; }
-  history_dock_widget *get_history_dock_widget ()
-  {
-    return _history_dock_widget;
-  }
-  files_dock_widget *get_files_dock_widget ()
-  {
-    return _files_dock_widget;
-  }
-  bool is_closing () { return _closing; }
-
 signals:
-  void settings_changed ();
+  void settings_changed (const QSettings *);
 
 public slots:
   void report_status_message (const QString& statusMessage);
   void handle_save_workspace_request ();
   void handle_load_workspace_request ();
   void handle_clear_workspace_request ();
   void handle_clear_history_request ();
   void handle_command_double_clicked (const QString& command);
@@ -87,17 +76,17 @@ public slots:
   void open_file ();
   void open_file (const QString& file_name);
   void open_online_documentation_page ();
   void open_bug_tracker_page ();
   void open_octave_forge_page ();
   void open_agora_page ();
   void process_settings_dialog_request ();
   void show_about_octave ();
-  void notice_settings ();
+  void notice_settings (const QSettings *settings);
   void prepare_for_quit ();
   void reset_windows ();
   void current_working_directory_has_changed (const QString& directory);
   void update_workspace (void);
   void update_history (void);
   void change_current_working_directory ();
   void set_current_working_directory (const QString& directory);
   void current_working_directory_up ();
@@ -156,17 +145,16 @@ private:
   void debug_step_over_callback (void);
 
   void debug_step_out_callback (void);
 
   void debug_quit_callback (void);
 
   void exit_callback (void);
 
-  QTerminal *               _terminal;
 #ifdef HAVE_QSCINTILLA
   file_editor_interface *   _file_editor;
 #endif
   QMenu *                   _debug_menu;
 
   QAction *                 _debug_continue;
   QAction *                 _debug_step_into;
   QAction *                 _debug_step_over;
