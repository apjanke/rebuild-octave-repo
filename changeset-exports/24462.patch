# HG changeset patch
# User Rik <rik@octave.org>
# Date 1514268821 28800
#      Mon Dec 25 22:13:41 2017 -0800
# Node ID 8ff3c13d14c12417c7cd3e1a4f5ddeb3b1885e60
# Parent  0a034d34a68618bd0b283f0f3d0aed45be798740
groot.m: New function to return handle of graphics root object.

* scripts/plot/util/groot.m: New function

* scripts/plot/util/module.mk: Add function to build system.

* NEWS: Announce new function

* plot.txi: Add docstring to manual.  Update instances of get/set (0) in this
chapter to use groot.

* gcf.m: Update example code in documentation to use groot.

* genpropdoc.m, geometryimages.m, interpimages.m, plotimages.m,
sparseimages.m, splineimages.m: Use groot rather than hardcoded constant of 0
in scripts to generate figures for manual.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -87,16 +87,17 @@ Summary of important user-visible change
       camroll
       camtarget
       camup
       camva
       camzoom
       corrcoef
       erase
       getframe
+      groot
       gsvd
       hgtransform
       humps
       integral
       integral2
       integral3
       isgraphics
       openvar
diff --git a/doc/interpreter/genpropdoc.m b/doc/interpreter/genpropdoc.m
--- a/doc/interpreter/genpropdoc.m
+++ b/doc/interpreter/genpropdoc.m
@@ -146,17 +146,17 @@ text rendering.";
 
       case "clipping"
         s.doc = "If __prop__ is @qcode{\"on\"}, the __objname__ is \
 clipped in its parent axes limits.";
 
       case "createfcn"
         s.doc = "Callback function executed immediately after __objname__ \
 has been created.  Function is set by using default property on root object, \
-e.g., @code{set (0, \"default__objname__createfcn\", \
+e.g., @code{set (groot, \"default__objname__createfcn\", \
 'disp (\"__objname__ created!\")')}.\n\n__fcnmsg__";
         s.valid = valid_fcn;
 
       case "deletefcn"
         s.doc = "Callback function executed immediately before __objname__ \
 is deleted.\n\n__fcnmsg__";
         s.valid = valid_fcn;
 
diff --git a/doc/interpreter/geometryimages.m b/doc/interpreter/geometryimages.m
--- a/doc/interpreter/geometryimages.m
+++ b/doc/interpreter/geometryimages.m
@@ -17,17 +17,17 @@
 ## <http://www.gnu.org/licenses/>.
 
 function geometryimages (d, nm, typ)
   set_graphics_toolkit ();
   set_print_size ();
   hide_output ();
   outfile = fullfile (d, [nm "." typ]);
   if (strcmp (typ, "png"))
-    set (0, "defaulttextfontname", "*");
+    set (groot, "defaulttextfontname", "*");
   endif
   if (strcmp (typ, "eps"))
     d_typ = "-depsc2";
   else
     d_typ = ["-d" typ];
   endif
 
   if (! __have_feature__ ("QHULL")
@@ -150,22 +150,22 @@ function set_graphics_toolkit ()
       graphics_toolkit ("gnuplot");
     endif
   endif
 endfunction
 
 function set_print_size ()
   image_size = [8.0, 6.0]; # in inches, 4:3 format
   border = 0;              # For postscript use 50/72
-  set (0, "defaultfigurepapertype", "<custom>");
-  set (0, "defaultfigurepaperorientation", "landscape");
-  set (0, "defaultfigurepapersize", image_size + 2*border);
-  set (0, "defaultfigurepaperposition", [border, border, image_size]);
+  set (groot, "defaultfigurepapertype", "<custom>");
+  set (groot, "defaultfigurepaperorientation", "landscape");
+  set (groot, "defaultfigurepapersize", image_size + 2*border);
+  set (groot, "defaultfigurepaperposition", [border, border, image_size]);
   ## FIXME: Required until listener for legend exists (bug #39697)
-  set (0, "defaultfigureposition", [ 72*[border, border, image_size] ]);
+  set (groot, "defaultfigureposition", [ 72*[border, border, image_size] ]);
 endfunction
 
 ## Use this function before plotting commands and after every call to print
 ## since print() resets output to stdout (unfortunately, gnuplot can't pop
 ## output as it can the terminal type).
 function hide_output ()
   hf = figure (1, "visible", "off");
 endfunction
diff --git a/doc/interpreter/interpimages.m b/doc/interpreter/interpimages.m
--- a/doc/interpreter/interpimages.m
+++ b/doc/interpreter/interpimages.m
@@ -17,17 +17,17 @@
 ## <http://www.gnu.org/licenses/>.
 
 function interpimages (d, nm, typ)
   set_graphics_toolkit ();
   set_print_size ();
   hide_output ();
   outfile = fullfile (d, [nm "." typ]);
   if (strcmp (typ, "png"))
-    set (0, "defaulttextfontname", "*");
+    set (groot, "defaulttextfontname", "*");
   endif
   if (strcmp (typ, "eps"))
     d_typ = "-depsc2";
   else
     d_typ = ["-d", typ];
   endif
 
   if (strcmp (typ, "txt"))
@@ -93,22 +93,22 @@ function set_graphics_toolkit ()
       graphics_toolkit ("gnuplot");
     endif
   endif
 endfunction
 
 function set_print_size ()
   image_size = [8.0, 6.0]; # in inches, 4:3 format
   border = 0;              # For postscript use 50/72
-  set (0, "defaultfigurepapertype", "<custom>");
-  set (0, "defaultfigurepaperorientation", "landscape");
-  set (0, "defaultfigurepapersize", image_size + 2*border);
-  set (0, "defaultfigurepaperposition", [border, border, image_size]);
+  set (groot, "defaultfigurepapertype", "<custom>");
+  set (groot, "defaultfigurepaperorientation", "landscape");
+  set (groot, "defaultfigurepapersize", image_size + 2*border);
+  set (groot, "defaultfigurepaperposition", [border, border, image_size]);
   ## FIXME: Required until listener for legend exists (bug #39697)
-  set (0, "defaultfigureposition", [ 72*[border, border, image_size] ]);
+  set (groot, "defaultfigureposition", [ 72*[border, border, image_size] ]);
 endfunction
 
 ## Use this function before plotting commands and after every call to print
 ## since print() resets output to stdout (unfortunately, gnuplot can't pop
 ## output as it can the terminal type).
 function hide_output ()
   hf = figure (1, "visible", "off");
 endfunction
diff --git a/doc/interpreter/plot.txi b/doc/interpreter/plot.txi
--- a/doc/interpreter/plot.txi
+++ b/doc/interpreter/plot.txi
@@ -1166,22 +1166,23 @@ the functions @code{area}, @code{bar}, @
 @code{contourf}, @code{contour3}, @code{surf}, @code{mesh}, @code{surfc},
 @code{meshc}, @code{errorbar}, @code{quiver}, @code{quiver3}, @code{scatter},
 @code{scatter3}, @code{stair}, @code{stem}, @code{stem3} each return a handle
 to a complex data structure as documented in
 @ref{XREFdatasources,,Data Sources}.
 
 The graphics objects are arranged in a hierarchy:
 
-1. The root is at 0.  In other words, @code{get (0)} returns the properties of
+1. The root object is returned by @code{groot} (historically, equivalent to
+the handle 0).  In other words, @code{get (groot)} returns the properties of
 the root object.
 
 2. Below the root are @code{figure} objects.
 
-3. Below the @code{figure} objects are @code{axes} objects.
+3. Below the @code{figure} objects are @code{axes} or @code{hggroup} objects.
 
 4. Below the @code{axes} objects are @code{line}, @code{text}, @code{patch},
 @code{surface}, @code{image}, and @code{light} objects.
 
 Graphics handles may be distinguished from function handles
 (@pxref{Function Handles}) by means of the function @code{ishghandle}.
 @code{ishghandle} returns true if its argument is a handle of a graphics object.
 In addition, a figure or axes object may be tested using @code{isfigure} or
@@ -1247,18 +1248,18 @@ colormap               papertype        
 createfcn              paperunits             wvisual
 currentaxes            parent                 wvisualmode
 currentcharacter       pointer                xdisplay
 currentobject          pointershapecdata      xvisual
 currentpoint           pointershapehotspot    xvisualmode
 deletefcn              position
 @end smallexample
 
-The root figure has index 0.  Its properties may be displayed by:
-@code{get (0, "")}.
+The properties of the root figure may be displayed by:
+@code{get (groot, "")}.
 
 The uses of @code{get} and @code{set} are further explained in
 @ref{XREFget,,get}, @ref{XREFset,,set}.
 
 @DOCSTRING(isprop)
 
 @node Graphics Objects
 @subsection Graphics Objects
@@ -1271,18 +1272,18 @@ these objects are discussed.  Keep in mi
 graphics objects are always referenced by @dfn{handle}.
 
 @table @asis
 @c @group
 
 @item root figure
 @cindex root figure graphics object
 @cindex graphics object, root figure
-the top level of the hierarchy and the parent of all figure objects.
-The handle index of the root figure is 0.
+The top level of the hierarchy and the parent of all figure objects.
+Use @code{groot} to obtain the handle of the root graphics object.
 
 @item figure
 @cindex figure graphics object
 @cindex graphics object, figure
 A figure window.
 
 @item axes
 @cindex axes graphics object
@@ -1326,17 +1327,17 @@ A light object used for lighting effects
 @cindex creating graphics objects
 
 You can create any graphics object primitive by calling the function of the
 same name as the object; In other words, @code{figure}, @code{axes},
 @code{line}, @code{text}, @code{image}, @code{patch}, @code{surface}, and
 @code{light} functions.  These fundamental graphic objects automatically become
 children of the current axes object as if @code{hold on} was in place.
 Separately, axes will automatically become children of the current figure
-object and figures will become children of the root object 0.
+object and figures will become children of the root object.
 
 If this auto-joining feature is not desired then it is important to call
 @code{newplot} first to prepare a new figure and axes for plotting.
 Alternatively, the easier way is to call a high-level graphics routine which
 will both create the plot and then populate it with low-level graphics objects.
 Instead of calling @code{line}, use @code{plot}.  Or use @code{surf} instead of
 @code{surface}.  Or use @code{fill} instead of @code{patch}.
 
@@ -1367,28 +1368,30 @@ to an axes or figure, use the functions 
 
 @DOCSTRING(isfigure)
 
 The function @code{gcf} returns an index to the current figure object,
 or creates one if none exists.  Similarly, @code{gca} returns the
 current axes object, or creates one (and its parent figure object) if
 none exists.
 
+@DOCSTRING(groot)
+
 @DOCSTRING(gcf)
 
 @DOCSTRING(gca)
 
 @DOCSTRING(gco)
 
 The @code{get} and @code{set} functions may be used to examine and set
 properties for graphics objects.  For example,
 
 @example
 @group
-get (0)
+get (groot)
     @result{} ans =
        @{
          type = root
          currentfigure = [](0x0)
          children = [](0x0)
          visible = on
          @dots{}
        @}
@@ -1676,41 +1679,41 @@ may override the factory defaults.
 Although default values may be set for any object, they are set in
 parent objects and apply to child objects, of the specified object type.
 For example, setting the default @code{color} property of @code{line}
 objects to @qcode{"green"}, for the @code{root} object, will result in all
 @code{line} objects inheriting the @code{color} @qcode{"green"} as the default
 value.
 
 @example
-set (0, "defaultlinecolor", "green");
+set (groot, "defaultlinecolor", "green");
 @end example
 
 @noindent
 sets the default line color for all objects.  The rule for constructing
 the property name to set a default value is
 
 @example
 default + @var{object-type} + @var{property-name}
 @end example
 
 This rule can lead to some strange looking names, for example
 @code{defaultlinelinewidth"} specifies the default @code{linewidth}
 property for @code{line} objects.
 
-The example above used the root figure object, 0, so the default
+The example above used the root figure object so the default
 property value will apply to all line objects.  However, default values
 are hierarchical, so defaults set in a figure objects override those
 set in the root figure object.  Likewise, defaults set in axes objects
 override those set in figure or root figure objects.  For example,
 
 @example
 @group
 subplot (2, 1, 1);
-set (0, "defaultlinecolor", "red");
+set (groot, "defaultlinecolor", "red");
 set (1, "defaultlinecolor", "green");
 set (gca (), "defaultlinecolor", "blue");
 line (1:10, rand (1, 10));
 subplot (2, 1, 2);
 line (1:10, rand (1, 10));
 figure (2)
 line (1:10, rand (1, 10));
 @end group
@@ -1748,17 +1751,17 @@ get (gca (), "default");
 @noindent
 returns a list of user-defined default values for the current axes
 object.
 
 Factory default values are stored in the root figure object.  The
 command
 
 @example
-get (0, "factory");
+get (groot, "factory");
 @end example
 
 @noindent
 returns a list of factory defaults.
 
 @node Advanced Plotting
 @section Advanced Plotting
 
diff --git a/doc/interpreter/plotimages.m b/doc/interpreter/plotimages.m
--- a/doc/interpreter/plotimages.m
+++ b/doc/interpreter/plotimages.m
@@ -17,17 +17,17 @@
 ## <http://www.gnu.org/licenses/>.
 
 function plotimages (d, nm, typ)
   set_graphics_toolkit ();
   set_print_size ();
   hide_output ();
   outfile = fullfile (d, [nm "." typ]);
   if (strcmp (typ, "png"))
-    set (0, "defaulttextfontname", "*");
+    set (groot, "defaulttextfontname", "*");
   endif
   if (strcmp (typ, "eps"))
     d_typ = "-depsc2";
   else
     d_typ = ["-d", typ];
   endif
 
   if (strcmp (typ , "txt"))
@@ -131,20 +131,20 @@ function set_graphics_toolkit ()
       graphics_toolkit ("gnuplot");
     endif
   endif
 endfunction
 
 function set_print_size ()
   image_size = [5.0, 3.5]; # in inches, 16:9 format
   border = 0;              # For postscript use 50/72
-  set (0, "defaultfigurepapertype", "<custom>");
-  set (0, "defaultfigurepaperorientation", "landscape");
-  set (0, "defaultfigurepapersize", image_size + 2*border);
-  set (0, "defaultfigurepaperposition", [border, border, image_size]);
+  set (groot, "defaultfigurepapertype", "<custom>");
+  set (groot, "defaultfigurepaperorientation", "landscape");
+  set (groot, "defaultfigurepapersize", image_size + 2*border);
+  set (groot, "defaultfigurepaperposition", [border, border, image_size]);
 endfunction
 
 ## Use this function before plotting commands and after every call to print
 ## since print() resets output to stdout (unfortunately, gnuplot can't pop
 ## output as it can the terminal type).
 function hide_output ()
   hf = figure (1, "visible", "off");
 endfunction
diff --git a/doc/interpreter/sparseimages.m b/doc/interpreter/sparseimages.m
--- a/doc/interpreter/sparseimages.m
+++ b/doc/interpreter/sparseimages.m
@@ -17,17 +17,17 @@
 ## <http://www.gnu.org/licenses/>.
 
 function sparseimages (d, nm, typ)
   set_graphics_toolkit ();
   set_print_size ();
   hide_output ();
   outfile = fullfile (d, [nm "." typ]);
   if (strcmp (typ, "png"))
-    set (0, "defaulttextfontname", "*");
+    set (groot, "defaulttextfontname", "*");
   endif
   if (strcmp (typ, "eps"))
     d_typ = "-depsc2";
   else
     d_typ = ["-d" typ];
   endif
 
   if (! (__have_feature__ ("COLAMD")
@@ -252,20 +252,20 @@ function set_graphics_toolkit ()
       graphics_toolkit ("gnuplot");
     endif
   endif
 endfunction
 
 function set_print_size ()
   image_size = [5.0, 3.5]; # in inches, 16:9 format
   border = 0;              # For postscript use 50/72
-  set (0, "defaultfigurepapertype", "<custom>");
-  set (0, "defaultfigurepaperorientation", "landscape");
-  set (0, "defaultfigurepapersize", image_size + 2*border);
-  set (0, "defaultfigurepaperposition", [border, border, image_size]);
+  set (groot, "defaultfigurepapertype", "<custom>");
+  set (groot, "defaultfigurepaperorientation", "landscape");
+  set (groot, "defaultfigurepapersize", image_size + 2*border);
+  set (groot, "defaultfigurepaperposition", [border, border, image_size]);
 endfunction
 
 ## Use this function before plotting commands and after every call to print
 ## since print() resets output to stdout (unfortunately, gnuplot can't pop
 ## output as it can the terminal type).
 function hide_output ()
   hf = figure (1, "visible", "off");
 endfunction
diff --git a/doc/interpreter/splineimages.m b/doc/interpreter/splineimages.m
--- a/doc/interpreter/splineimages.m
+++ b/doc/interpreter/splineimages.m
@@ -17,17 +17,17 @@
 ## <http://www.gnu.org/licenses/>.
 
 function splineimages (d, nm, typ)
   set_graphics_toolkit ();
   set_print_size ();
   hide_output ();
   outfile = fullfile (d, [nm "." typ]);
   if (strcmp (typ, "png"))
-    set (0, "defaulttextfontname", "*");
+    set (groot, "defaulttextfontname", "*");
   endif
   if (strcmp (typ, "eps"))
     d_typ = "-depsc2";
   else
     d_typ = ["-d" typ];
   endif
 
   if (strcmp (typ, "txt"))
@@ -183,22 +183,22 @@ function set_graphics_toolkit ()
       graphics_toolkit ("gnuplot");
     endif
   endif
 endfunction
 
 function set_print_size ()
   image_size = [8.0, 6.0]; # in inches, 4:3 format
   border = 0;              # For postscript use 50/72
-  set (0, "defaultfigurepapertype", "<custom>");
-  set (0, "defaultfigurepaperorientation", "landscape");
-  set (0, "defaultfigurepapersize", image_size + 2*border);
-  set (0, "defaultfigurepaperposition", [border, border, image_size]);
+  set (groot, "defaultfigurepapertype", "<custom>");
+  set (groot, "defaultfigurepaperorientation", "landscape");
+  set (groot, "defaultfigurepapersize", image_size + 2*border);
+  set (groot, "defaultfigurepaperposition", [border, border, image_size]);
   ## FIXME: Required until listener for legend exists (bug #39697)
-  set (0, "defaultfigureposition", [ 72*[border, border, image_size] ]);
+  set (groot, "defaultfigureposition", [ 72*[border, border, image_size] ]);
 endfunction
 
 ## Use this function before plotting commands and after every call to print
 ## since print() resets output to stdout (unfortunately, gnuplot can't pop
 ## output as it can the terminal type).
 function hide_output ()
   hf = figure (1, "visible", "off");
 endfunction
diff --git a/scripts/plot/util/gcf.m b/scripts/plot/util/gcf.m
--- a/scripts/plot/util/gcf.m
+++ b/scripts/plot/util/gcf.m
@@ -40,17 +40,17 @@
 ## plots a sine wave, finds the handle of the current figure, and then
 ## renames the figure window to describe the contents.
 ##
 ## Note: To find the current figure without creating a new one if it does not
 ## exist, query the @qcode{"CurrentFigure"} property of the root graphics
 ## object.
 ##
 ## @example
-## get (0, "currentfigure");
+## get (groot, "currentfigure");
 ## @end example
 ##
 ## @seealso{gca, gco, gcbf, gcbo, get, set}
 ## @end deftypefn
 
 ## Author: jwe, Bill Denney
 
 function h = gcf ()
diff --git a/scripts/plot/util/groot.m b/scripts/plot/util/groot.m
new file mode 100644
--- /dev/null
+++ b/scripts/plot/util/groot.m
@@ -0,0 +1,66 @@
+## Copyright (C) 2017 Rik Wehbring
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 3 of the License, or
+## (at your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+## GNU General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
+## <http://www.gnu.org/licenses/>.
+
+## -*- texinfo -*-
+## @deftypefn {} {@var{h} =} groot ()
+## Return a handle to the root graphics object.
+##
+## The root graphics object is the ultimate parent of all graphics objects.
+##
+## In addition, the root object contains information about the graphics
+## system as a whole such as the @code{ScreenSize}.  Use @w{@code{get (groot)}}
+## to find out what information is available.
+##
+## Defaults for the graphic system as a whole are specified by setting
+## properties of the root graphics object that begin with @qcode{"Default"}.
+## For example, to set the default font for all text objects to FreeSans use
+##
+## @example
+## set (groot, "DefaultTextFontName", "FreeSans")
+## @end example
+##
+## Default properties can be deleted by using @code{set} with the special
+## property value of @qcode{"remove"}.  To undo the default font assignment
+## above use
+##
+## @example
+## set (groot, "DefaultTextFontName", "remove")
+## @end example
+##
+## Programming Note: The root graphics object is identified by the special
+## handle value of 0.  At some point this unique value may change, but code can
+## be made resistant to future changes by using @code{groot} which is
+## guaranteed to always return the root graphics object.
+## @seealso{gcf, gca, get, set}
+## @end deftypefn
+
+function h = groot ()
+
+  if (nargin != 0)
+    print_usage ();
+  endif
+
+  h = 0;
+
+endfunction
+
+
+%!assert (groot (), 0)
+
+## Test input validation
+%!error groot (1)
diff --git a/scripts/plot/util/module.mk b/scripts/plot/util/module.mk
--- a/scripts/plot/util/module.mk
+++ b/scripts/plot/util/module.mk
@@ -47,16 +47,17 @@ GEN_FCN_FILES += $(%canon_reldir%_GEN_FC
   %reldir%/findobj.m \
   %reldir%/gca.m \
   %reldir%/gcbf.m \
   %reldir%/gcbo.m \
   %reldir%/gcf.m \
   %reldir%/gco.m \
   %reldir%/ginput.m \
   %reldir%/graphics_toolkit.m \
+  %reldir%/groot.m \
   %reldir%/hdl2struct.m \
   %reldir%/hggroup.m \
   %reldir%/hgload.m \
   %reldir%/hgsave.m \
   %reldir%/hgtransform.m \
   %reldir%/hold.m \
   %reldir%/isaxes.m \
   %reldir%/isfigure.m \
