# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1285921847 14400
#      Fri Oct 01 04:30:47 2010 -0400
# Node ID e40e19761d0680d39cd1877d14a104dd4252a842
# Parent  b0eec300d3fc7975af826434f0db3a5de4f1c31b
variables.cc: Octave_map to octave_map and octave_scalar_map conversion

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2010-10-01  John W. Eaton  <jwe@octave.org>
+
+	* variables.cc (symbol_info_list::map_value): Use
+	octave_scalar_map and octave_map instead of Octave_map.
+
 2010-09-30  Jaroslav Hajek  <highegg@gmail.com>
 
 	* oct-map.h (octave_fields::nil_rep): Make a static function.
 	(octave_fields::octave_fields (void)): Use it here.
 
 2010-09-30  John W. Eaton  <jwe@octave.org>
 
 	* toplev.cc (octave_config_info): Use Octave_scalar_map instead
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -1213,17 +1213,17 @@ public:
   {
     lst.push_back (symbol_info (sr, expr_str, expr_val));
   }
 
   size_t size (void) const { return lst.size (); }
 
   bool empty (void) const { return lst.empty (); }
 
-  Octave_map
+  octave_map
   map_value (const std::string& caller_function_name, int nesting_level) const
   {
     size_t len = lst.size ();
 
     Cell name_info (len, 1);
     Cell size_info (len, 1);
     Cell bytes_info (len, 1);
     Cell class_info (len, 1);
@@ -1234,17 +1234,17 @@ public:
     Cell persistent_info (len, 1);
 
     std::list<symbol_info>::const_iterator p = lst.begin ();
 
     for (size_t j = 0; j < len; j++)
       {
         const symbol_info& si = *p++;
 
-        Octave_map ni;
+        octave_scalar_map ni;
 
         ni.assign ("function", caller_function_name);
         ni.assign ("level", nesting_level);
 
         name_info(j) = si.name;
         global_info(j) = si.is_global;
         persistent_info(j) = si.is_persistent;
 
@@ -1253,17 +1253,17 @@ public:
         size_info(j) = val.size ();
         bytes_info(j) = val.byte_size ();
         class_info(j) = val.class_name ();
         sparse_info(j) = val.is_sparse_type ();
         complex_info(j) = val.is_complex_type ();
         nesting_info(j) = ni;
       }
 
-    Octave_map info;
+    octave_map info;
 
     info.assign ("name", name_info);
     info.assign ("size", size_info);
     info.assign ("bytes", bytes_info);
     info.assign ("class", class_info);
     info.assign ("global", global_info);
     info.assign ("sparse", sparse_info);
     info.assign ("complex", complex_info);
