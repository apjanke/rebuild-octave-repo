# HG changeset patch
# User Torsten <mttl@mailbox.org>
# Date 1543060986 -3600
#      Sat Nov 24 13:03:06 2018 +0100
# Node ID 22edc076543e00eb1adfca01e74406ff7d8c1e3f
# Parent  5b5122fea9e915e0c221a506236e11a37c19f2a7
restore line/column when reloading externally changed editor files (bug #54961)

* file-editor-tab.cc (load_file): save and restore current line and column
  if the file to load is the current one

diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -1732,16 +1732,24 @@ namespace octave
     if (file_info.exists ())
       file_to_load = file_info.canonicalFilePath ();
     else
       file_to_load = fileName;
     QFile file (file_to_load);
     if (!file.open(QIODevice::ReadOnly))
       return file.errorString ();
 
+    int col = 0, line = 0;
+    if (fileName == _file_name)
+      {
+        // We have to reload the current file, thus get current cursor position
+        line = _line;
+        col = _col;
+      }
+
     QApplication::setOverrideCursor (Qt::WaitCursor);
 
     // read the file binary, decoding later
     const QByteArray text_data = file.readAll ();
 
     // decode
     QTextCodec::ConverterState st;
     QTextCodec *codec = QTextCodec::codecForName (_encoding.toLatin1 ());
@@ -1784,16 +1792,18 @@ namespace octave
 
     _copy_available = false;     // no selection yet available
     set_file_name (file_to_load);
     update_window_title (false); // window title (no modification)
     _edit_area->setModified (false); // loaded file is not modified yet
 
     update_eol_indicator ();
 
+    _edit_area->setCursorPosition (line, col);
+
     // FIXME: (BREAKPOINTS) At this point it would be nice to put any set
     // breakpoints on the margin.  In order to do this, somehow the
     // "dbstatus" command needs to be accessed.  All it would require is a
     // routine that does "res = feval ("dbstatus") and signals that result
     // to some slot.
     //
     // See patch #8016 for a general way to get Octave results from
     // commands processed in the background.
