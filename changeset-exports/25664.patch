# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1478188345 14400
#      Thu Nov 03 11:52:25 2016 -0400
# Node ID fc6081e9607b6e52b6e0f2ae4471d0d5974f3cc8
# Parent  2de707ae8de4fd57f9eeb91b930aa82fef274741
eliminate unused conversions from type specs and operator macros

* Sparse-op-defs.h (SPARSE_SMS_CMP_OP, SPARSE_SMS_CMP_OPS,
SPARSE_SMS_EQNE_OPS, SPARSE_SSM_CMP_OP, SPARSE_SSM_CMP_OPS,
SPARSE_SSM_EQNE_OPS, SPARSE_SMSM_CMP_OP, SPARSE_SMSM_CMP_OPS,
SPARSE_SMSM_EQNE_OPS, SPARSE_MSM_CMP_OP, SPARSE_MSM_CMP_OPS,
SPARSE_MSM_EQNE_OPS, SPARSE_SMM_CMP_OP, SPARSE_SMM_CMP_OPS,
SPARSE_SMM_EQNE_OPS): Eliminate unused conversions.
Change all uses.

* mx-ops.awk: Eliminate unused conversions in use of macros.

* mx-ops, smx-ops: Eliminate conversions from type ane operator
specifications.

diff --git a/liboctave/array/CSparse.cc b/liboctave/array/CSparse.cc
--- a/liboctave/array/CSparse.cc
+++ b/liboctave/array/CSparse.cc
@@ -7928,20 +7928,16 @@ max (const SparseComplexMatrix& a, const
         r.resize (b_nr, b_nc);
       else
         octave::err_nonconformant ("max", a_nr, a_nc, b_nr, b_nc);
     }
 
   return r;
 }
 
-SPARSE_SMS_CMP_OPS (SparseComplexMatrix, 0.0, real, Complex,
-                    0.0, real)
+SPARSE_SMS_CMP_OPS (SparseComplexMatrix, 0.0, Complex, 0.0)
 SPARSE_SMS_BOOL_OPS (SparseComplexMatrix, Complex)
 
-SPARSE_SSM_CMP_OPS (Complex, 0.0, real, SparseComplexMatrix,
-                    0.0, real)
+SPARSE_SSM_CMP_OPS (Complex, 0.0, SparseComplexMatrix, 0.0)
 SPARSE_SSM_BOOL_OPS (Complex, SparseComplexMatrix)
 
-SPARSE_SMSM_CMP_OPS (SparseComplexMatrix, 0.0, real, SparseComplexMatrix,
-                     0.0, real)
-
+SPARSE_SMSM_CMP_OPS (SparseComplexMatrix, 0.0, SparseComplexMatrix, 0.0)
 SPARSE_SMSM_BOOL_OPS (SparseComplexMatrix, SparseComplexMatrix)
diff --git a/liboctave/array/boolSparse.cc b/liboctave/array/boolSparse.cc
--- a/liboctave/array/boolSparse.cc
+++ b/liboctave/array/boolSparse.cc
@@ -316,16 +316,16 @@ SparseBoolMatrix::permute (const Array<o
 }
 
 SparseBoolMatrix
 SparseBoolMatrix::ipermute (const Array<octave_idx_type>& vec) const
 {
   return Sparse<bool>::ipermute (vec);
 }
 
-SPARSE_SMS_EQNE_OPS (SparseBoolMatrix, false, , bool, false, )
+SPARSE_SMS_EQNE_OPS (SparseBoolMatrix, false, bool, false)
 SPARSE_SMS_BOOL_OPS (SparseBoolMatrix, bool)
 
-SPARSE_SSM_EQNE_OPS (bool, false, , SparseBoolMatrix, false, )
+SPARSE_SSM_EQNE_OPS (bool, false, SparseBoolMatrix, false)
 SPARSE_SSM_BOOL_OPS (bool, SparseBoolMatrix)
 
-SPARSE_SMSM_EQNE_OPS (SparseBoolMatrix, false, , SparseBoolMatrix, false, )
+SPARSE_SMSM_EQNE_OPS (SparseBoolMatrix, false, SparseBoolMatrix, false)
 SPARSE_SMSM_BOOL_OPS (SparseBoolMatrix, SparseBoolMatrix)
diff --git a/liboctave/array/dSparse.cc b/liboctave/array/dSparse.cc
--- a/liboctave/array/dSparse.cc
+++ b/liboctave/array/dSparse.cc
@@ -7919,16 +7919,16 @@ max (const SparseMatrix& a, const Sparse
         r.resize (b_nr, b_nc);
       else
         octave::err_nonconformant ("max", a_nr, a_nc, b_nr, b_nc);
     }
 
   return r;
 }
 
-SPARSE_SMS_CMP_OPS (SparseMatrix, 0.0, , double, 0.0, )
+SPARSE_SMS_CMP_OPS (SparseMatrix, 0.0, double, 0.0)
 SPARSE_SMS_BOOL_OPS (SparseMatrix, double)
 
-SPARSE_SSM_CMP_OPS (double, 0.0, , SparseMatrix, 0.0, )
+SPARSE_SSM_CMP_OPS (double, 0.0, SparseMatrix, 0.0)
 SPARSE_SSM_BOOL_OPS (double, SparseMatrix)
 
-SPARSE_SMSM_CMP_OPS (SparseMatrix, 0.0, , SparseMatrix, 0.0, )
+SPARSE_SMSM_CMP_OPS (SparseMatrix, 0.0, SparseMatrix, 0.0)
 SPARSE_SMSM_BOOL_OPS (SparseMatrix, SparseMatrix)
diff --git a/liboctave/operators/Sparse-op-defs.h b/liboctave/operators/Sparse-op-defs.h
--- a/liboctave/operators/Sparse-op-defs.h
+++ b/liboctave/operators/Sparse-op-defs.h
@@ -72,64 +72,64 @@ along with Octave; see the file COPYING.
   }
 
 #define SPARSE_SMS_BIN_OPS(R1, R2, M, S)        \
   SPARSE_SMS_BIN_OP_1 (R1, operator +, +, M, S) \
   SPARSE_SMS_BIN_OP_1 (R1, operator -, -, M, S) \
   SPARSE_SMS_BIN_OP_2 (R2, operator *, *, M, S) \
   SPARSE_SMS_BIN_OP_2 (R2, operator /, /, M, S)
 
-#define SPARSE_SMS_CMP_OP(F, OP, M, MZ, MC, S, SZ, SC)                  \
+#define SPARSE_SMS_CMP_OP(F, OP, M, MZ, S, SZ)                          \
   SparseBoolMatrix                                                      \
   F (const M& m, const S& s)                                            \
   {                                                                     \
     octave_idx_type nr = m.rows ();                                     \
     octave_idx_type nc = m.cols ();                                     \
     SparseBoolMatrix r;                                                 \
                                                                         \
-    if (MC (MZ) OP SC (s))                                              \
+    if (MZ OP s)                                                        \
       {                                                                 \
         r = SparseBoolMatrix (nr, nc, true);                            \
         for (octave_idx_type j = 0; j < nc; j++)                        \
           for (octave_idx_type i = m.cidx (j); i < m.cidx (j+1); i++)   \
-            if (! (MC (m.data (i)) OP SC (s)))                          \
+            if (! (m.data (i) OP s))                                    \
               r.data (m.ridx (i) + j * nr) = false;                     \
         r.maybe_compress (true);                                        \
       }                                                                 \
     else                                                                \
       {                                                                 \
         r = SparseBoolMatrix (nr, nc, m.nnz ());                        \
         r.cidx (0) = static_cast<octave_idx_type> (0);                  \
         octave_idx_type nel = 0;                                        \
         for (octave_idx_type j = 0; j < nc; j++)                        \
           {                                                             \
             for (octave_idx_type i = m.cidx (j); i < m.cidx (j+1); i++) \
-              if (MC (m.data (i)) OP SC (s))                            \
+              if (m.data (i) OP s)                                      \
                 {                                                       \
                   r.ridx (nel) = m.ridx (i);                            \
                   r.data (nel++) = true;                                \
                 }                                                       \
             r.cidx (j + 1) = nel;                                       \
           }                                                             \
         r.maybe_compress (false);                                       \
       }                                                                 \
     return r;                                                           \
   }
 
-#define SPARSE_SMS_CMP_OPS(M, MZ, CM, S, SZ, CS)                \
-  SPARSE_SMS_CMP_OP (mx_el_lt, <,  M, MZ,   , S, SZ,   )        \
-  SPARSE_SMS_CMP_OP (mx_el_le, <=, M, MZ,   , S, SZ,   )        \
-  SPARSE_SMS_CMP_OP (mx_el_ge, >=, M, MZ,   , S, SZ,   )        \
-  SPARSE_SMS_CMP_OP (mx_el_gt, >,  M, MZ,   , S, SZ,   )        \
-  SPARSE_SMS_CMP_OP (mx_el_eq, ==, M, MZ,   , S, SZ,   )        \
-  SPARSE_SMS_CMP_OP (mx_el_ne, !=, M, MZ,   , S, SZ,   )
+#define SPARSE_SMS_CMP_OPS(M, MZ, S, SZ)                \
+  SPARSE_SMS_CMP_OP (mx_el_lt, <,  M, MZ, S, SZ)        \
+  SPARSE_SMS_CMP_OP (mx_el_le, <=, M, MZ, S, SZ)        \
+  SPARSE_SMS_CMP_OP (mx_el_ge, >=, M, MZ, S, SZ)        \
+  SPARSE_SMS_CMP_OP (mx_el_gt, >,  M, MZ, S, SZ)        \
+  SPARSE_SMS_CMP_OP (mx_el_eq, ==, M, MZ, S, SZ)        \
+  SPARSE_SMS_CMP_OP (mx_el_ne, !=, M, MZ, S, SZ)
 
-#define SPARSE_SMS_EQNE_OPS(M, MZ, CM, S, SZ, CS)               \
-  SPARSE_SMS_CMP_OP (mx_el_eq, ==, M, MZ,   , S, SZ,   )        \
-  SPARSE_SMS_CMP_OP (mx_el_ne, !=, M, MZ,   , S, SZ,   )
+#define SPARSE_SMS_EQNE_OPS(M, MZ, S, SZ)               \
+  SPARSE_SMS_CMP_OP (mx_el_eq, ==, M, MZ, S, SZ)        \
+  SPARSE_SMS_CMP_OP (mx_el_ne, !=, M, MZ, S, SZ)
 
 #define SPARSE_SMS_BOOL_OR_OP(M, S)                                     \
   SparseBoolMatrix                                                      \
   mx_el_or (const M& m, const S& s)                                     \
   {                                                                     \
     octave_idx_type nr = m.rows ();                                     \
     octave_idx_type nc = m.cols ();                                     \
     SparseBoolMatrix r;                                                 \
@@ -243,64 +243,64 @@ along with Octave; see the file COPYING.
   }
 
 #define SPARSE_SSM_BIN_OPS(R1, R2, S, M)        \
   SPARSE_SSM_BIN_OP_1 (R1, operator +, +, S, M) \
   SPARSE_SSM_BIN_OP_1 (R1, operator -, -, S, M) \
   SPARSE_SSM_BIN_OP_2 (R2, operator *, *, S, M) \
   SPARSE_SSM_BIN_OP_2 (R2, operator /, /, S, M)
 
-#define SPARSE_SSM_CMP_OP(F, OP, S, SZ, SC, M, MZ, MC)                  \
+#define SPARSE_SSM_CMP_OP(F, OP, S, SZ, M, MZ)                          \
   SparseBoolMatrix                                                      \
   F (const S& s, const M& m)                                            \
   {                                                                     \
     octave_idx_type nr = m.rows ();                                     \
     octave_idx_type nc = m.cols ();                                     \
     SparseBoolMatrix r;                                                 \
                                                                         \
-    if (SC (s) OP SC (MZ))                                              \
+    if (s OP MZ)                                                        \
       {                                                                 \
         r = SparseBoolMatrix (nr, nc, true);                            \
         for (octave_idx_type j = 0; j < nc; j++)                        \
           for (octave_idx_type i = m.cidx (j); i < m.cidx (j+1); i++)   \
-            if (! (SC (s) OP MC (m.data (i))))                          \
+            if (! (s OP m.data (i)))                                    \
               r.data (m.ridx (i) + j * nr) = false;                     \
         r.maybe_compress (true);                                        \
       }                                                                 \
     else                                                                \
       {                                                                 \
         r = SparseBoolMatrix (nr, nc, m.nnz ());                        \
         r.cidx (0) = static_cast<octave_idx_type> (0);                  \
         octave_idx_type nel = 0;                                        \
         for (octave_idx_type j = 0; j < nc; j++)                        \
           {                                                             \
             for (octave_idx_type i = m.cidx (j); i < m.cidx (j+1); i++) \
-              if (SC (s) OP MC (m.data (i)))                            \
+              if (s OP m.data (i))                                      \
                 {                                                       \
                   r.ridx (nel) = m.ridx (i);                            \
                   r.data (nel++) = true;                                \
                 }                                                       \
             r.cidx (j + 1) = nel;                                       \
           }                                                             \
         r.maybe_compress (false);                                       \
       }                                                                 \
     return r;                                                           \
   }
 
-#define SPARSE_SSM_CMP_OPS(S, SZ, SC, M, MZ, MC)                \
-  SPARSE_SSM_CMP_OP (mx_el_lt, <,  S, SZ,   , M, MZ,   )        \
-  SPARSE_SSM_CMP_OP (mx_el_le, <=, S, SZ,   , M, MZ,   )        \
-  SPARSE_SSM_CMP_OP (mx_el_ge, >=, S, SZ,   , M, MZ,   )        \
-  SPARSE_SSM_CMP_OP (mx_el_gt, >,  S, SZ,   , M, MZ,   )        \
-  SPARSE_SSM_CMP_OP (mx_el_eq, ==, S, SZ,   , M, MZ,   )        \
-  SPARSE_SSM_CMP_OP (mx_el_ne, !=, S, SZ,   , M, MZ,   )
+#define SPARSE_SSM_CMP_OPS(S, SZ, M, MZ)                \
+  SPARSE_SSM_CMP_OP (mx_el_lt, <,  S, SZ, M, MZ)        \
+  SPARSE_SSM_CMP_OP (mx_el_le, <=, S, SZ, M, MZ)        \
+  SPARSE_SSM_CMP_OP (mx_el_ge, >=, S, SZ, M, MZ)        \
+  SPARSE_SSM_CMP_OP (mx_el_gt, >,  S, SZ, M, MZ)        \
+  SPARSE_SSM_CMP_OP (mx_el_eq, ==, S, SZ, M, MZ)        \
+  SPARSE_SSM_CMP_OP (mx_el_ne, !=, S, SZ, M, MZ)
 
-#define SPARSE_SSM_EQNE_OPS(S, SZ, SC, M, MZ, MC)               \
-  SPARSE_SSM_CMP_OP (mx_el_eq, ==, S, SZ,   , M, MZ,   )        \
-  SPARSE_SSM_CMP_OP (mx_el_ne, !=, S, SZ,   , M, MZ,   )
+#define SPARSE_SSM_EQNE_OPS(S, SZ, M, MZ)               \
+  SPARSE_SSM_CMP_OP (mx_el_eq, ==, S, SZ, M, MZ)        \
+  SPARSE_SSM_CMP_OP (mx_el_ne, !=, S, SZ, M, MZ)
 
 #define SPARSE_SSM_BOOL_OR_OP(S, M)                                     \
   SparseBoolMatrix                                                      \
   mx_el_or (const S& s, const M& m)                                     \
   {                                                                     \
     octave_idx_type nr = m.rows ();                                     \
     octave_idx_type nc = m.cols ();                                     \
     SparseBoolMatrix r;                                                 \
@@ -713,116 +713,116 @@ along with Octave; see the file COPYING.
   SPARSE_SMSM_BIN_OP_1 (R1, operator +,  +, M1, M2)     \
   SPARSE_SMSM_BIN_OP_1 (R1, operator -,  -, M1, M2)     \
   SPARSE_SMSM_BIN_OP_2 (R2, product,     *, M1, M2)     \
   SPARSE_SMSM_BIN_OP_3 (R2, quotient,    /, M1, M2)
 
 // FIXME: this macro duplicates the bodies of the template functions
 // defined in the SPARSE_SSM_CMP_OP and SPARSE_SMS_CMP_OP macros.
 
-#define SPARSE_SMSM_CMP_OP(F, OP, M1, Z1, C1, M2, Z2, C2)               \
+#define SPARSE_SMSM_CMP_OP(F, OP, M1, Z1, M2, Z2)                       \
   SparseBoolMatrix                                                      \
   F (const M1& m1, const M2& m2)                                        \
   {                                                                     \
     SparseBoolMatrix r;                                                 \
                                                                         \
     octave_idx_type m1_nr = m1.rows ();                                 \
     octave_idx_type m1_nc = m1.cols ();                                 \
                                                                         \
     octave_idx_type m2_nr = m2.rows ();                                 \
     octave_idx_type m2_nc = m2.cols ();                                 \
                                                                         \
     if (m1_nr == 1 && m1_nc == 1)                                       \
       {                                                                 \
-        if (C1 (m1.elem (0,0)) OP C2 (Z2))                              \
+        if (m1.elem (0,0) OP Z2)                                        \
           {                                                             \
             r = SparseBoolMatrix (m2_nr, m2_nc, true);                  \
             for (octave_idx_type j = 0; j < m2_nc; j++)                 \
               for (octave_idx_type i = m2.cidx (j); i < m2.cidx (j+1); i++) \
-                if (! (C1 (m1.elem (0,0)) OP C2 (m2.data (i))))         \
+                if (! (m1.elem (0,0) OP m2.data (i)))                   \
                   r.data (m2.ridx (i) + j * m2_nr) = false;             \
             r.maybe_compress (true);                                    \
           }                                                             \
         else                                                            \
           {                                                             \
             r = SparseBoolMatrix (m2_nr, m2_nc, m2.nnz ());             \
             r.cidx (0) = static_cast<octave_idx_type> (0);              \
             octave_idx_type nel = 0;                                    \
             for (octave_idx_type j = 0; j < m2_nc; j++)                 \
               {                                                         \
                 for (octave_idx_type i = m2.cidx (j); i < m2.cidx (j+1); i++) \
-                  if (C1 (m1.elem (0,0)) OP C2 (m2.data (i)))           \
+                  if (m1.elem (0,0) OP m2.data (i))                     \
                     {                                                   \
                       r.ridx (nel) = m2.ridx (i);                       \
                       r.data (nel++) = true;                            \
                     }                                                   \
                 r.cidx (j + 1) = nel;                                   \
               }                                                         \
             r.maybe_compress (false);                                   \
           }                                                             \
       }                                                                 \
     else if (m2_nr == 1 && m2_nc == 1)                                  \
       {                                                                 \
-        if (C1 (Z1) OP C2 (m2.elem (0,0)))                              \
+        if (Z1 OP m2.elem (0,0))                                        \
           {                                                             \
             r = SparseBoolMatrix (m1_nr, m1_nc, true);                  \
             for (octave_idx_type j = 0; j < m1_nc; j++)                 \
               for (octave_idx_type i = m1.cidx (j); i < m1.cidx (j+1); i++) \
-                if (! (C1 (m1.data (i)) OP C2 (m2.elem (0,0))))         \
+                if (! (m1.data (i) OP m2.elem (0,0)))                   \
                   r.data (m1.ridx (i) + j * m1_nr) = false;             \
             r.maybe_compress (true);                                    \
           }                                                             \
         else                                                            \
           {                                                             \
             r = SparseBoolMatrix (m1_nr, m1_nc, m1.nnz ());             \
             r.cidx (0) = static_cast<octave_idx_type> (0);              \
             octave_idx_type nel = 0;                                    \
             for (octave_idx_type j = 0; j < m1_nc; j++)                 \
               {                                                         \
                 for (octave_idx_type i = m1.cidx (j); i < m1.cidx (j+1); i++) \
-                  if (C1 (m1.data (i)) OP C2 (m2.elem (0,0)))           \
+                  if (m1.data (i) OP m2.elem (0,0))                     \
                     {                                                   \
                       r.ridx (nel) = m1.ridx (i);                       \
                       r.data (nel++) = true;                            \
                     }                                                   \
                 r.cidx (j + 1) = nel;                                   \
               }                                                         \
             r.maybe_compress (false);                                   \
           }                                                             \
       }                                                                 \
     else if (m1_nr == m2_nr && m1_nc == m2_nc)                          \
       {                                                                 \
         if (m1_nr != 0 || m1_nc != 0)                                   \
           {                                                             \
-            if (C1 (Z1) OP C2 (Z2))                                     \
+            if (Z1 OP Z2)                                               \
               {                                                         \
                 r = SparseBoolMatrix (m1_nr, m1_nc, true);              \
                 for (octave_idx_type j = 0; j < m1_nc; j++)             \
                   {                                                     \
                     octave_idx_type i1 = m1.cidx (j);                   \
                     octave_idx_type e1 = m1.cidx (j+1);                 \
                     octave_idx_type i2 = m2.cidx (j);                   \
                     octave_idx_type e2 = m2.cidx (j+1);                 \
                     while (i1 < e1 || i2 < e2)                          \
                       {                                                 \
                         if (i1 == e1 || (i2 < e2 && m1.ridx (i1) > m2.ridx (i2))) \
                           {                                             \
-                            if (! (C1 (Z1) OP C2 (m2.data (i2))))       \
+                            if (! (Z1 OP m2.data (i2)))                 \
                               r.data (m2.ridx (i2) + j * m1_nr) = false; \
                             i2++;                                       \
                           }                                             \
                         else if (i2 == e2 || m1.ridx (i1) < m2.ridx (i2)) \
                           {                                             \
-                            if (! (C1 (m1.data (i1)) OP C2 (Z2)))       \
+                            if (! (m1.data (i1) OP Z2))                 \
                               r.data (m1.ridx (i1) + j * m1_nr) = false; \
                             i1++;                                       \
                           }                                             \
                         else                                            \
                           {                                             \
-                            if (! (C1 (m1.data (i1)) OP C2 (m2.data (i2)))) \
+                            if (! (m1.data (i1) OP m2.data (i2)))       \
                               r.data (m1.ridx (i1) + j * m1_nr) = false; \
                             i1++;                                       \
                             i2++;                                       \
                           }                                             \
                       }                                                 \
                   }                                                     \
                 r.maybe_compress (true);                                \
               }                                                         \
@@ -836,35 +836,35 @@ along with Octave; see the file COPYING.
                     octave_idx_type i1 = m1.cidx (j);                   \
                     octave_idx_type e1 = m1.cidx (j+1);                 \
                     octave_idx_type i2 = m2.cidx (j);                   \
                     octave_idx_type e2 = m2.cidx (j+1);                 \
                     while (i1 < e1 || i2 < e2)                          \
                       {                                                 \
                         if (i1 == e1 || (i2 < e2 && m1.ridx (i1) > m2.ridx (i2))) \
                           {                                             \
-                            if (C1 (Z1) OP C2 (m2.data (i2)))           \
+                            if (Z1 OP m2.data (i2))                     \
                               {                                         \
                                 r.ridx (nel) = m2.ridx (i2);            \
                                 r.data (nel++) = true;                  \
                               }                                         \
                             i2++;                                       \
                           }                                             \
                         else if (i2 == e2 || m1.ridx (i1) < m2.ridx (i2)) \
                           {                                             \
-                            if (C1 (m1.data (i1)) OP C2 (Z2))           \
+                            if (m1.data (i1) OP Z2)                     \
                               {                                         \
                                 r.ridx (nel) = m1.ridx (i1);            \
                                 r.data (nel++) = true;                  \
                               }                                         \
                             i1++;                                       \
                           }                                             \
                         else                                            \
                           {                                             \
-                            if (C1 (m1.data (i1)) OP C2 (m2.data (i2))) \
+                            if (m1.data (i1) OP m2.data (i2))           \
                               {                                         \
                                 r.ridx (nel) = m1.ridx (i1);            \
                                 r.data (nel++) = true;                  \
                               }                                         \
                             i1++;                                       \
                             i2++;                                       \
                           }                                             \
                       }                                                 \
@@ -877,27 +877,27 @@ along with Octave; see the file COPYING.
     else                                                                \
       {                                                                 \
         if ((m1_nr != 0 || m1_nc != 0) && (m2_nr != 0 || m2_nc != 0))   \
           octave::err_nonconformant (#F, m1_nr, m1_nc, m2_nr, m2_nc);           \
       }                                                                 \
     return r;                                                           \
   }
 
-#define SPARSE_SMSM_CMP_OPS(M1, Z1, C1, M2, Z2, C2)             \
-  SPARSE_SMSM_CMP_OP (mx_el_lt, <,  M1, Z1,   , M2, Z2,   )     \
-  SPARSE_SMSM_CMP_OP (mx_el_le, <=, M1, Z1,   , M2, Z2,   )     \
-  SPARSE_SMSM_CMP_OP (mx_el_ge, >=, M1, Z1,   , M2, Z2,   )     \
-  SPARSE_SMSM_CMP_OP (mx_el_gt, >,  M1, Z1,   , M2, Z2,   )     \
-  SPARSE_SMSM_CMP_OP (mx_el_eq, ==, M1, Z1,   , M2, Z2,   )     \
-  SPARSE_SMSM_CMP_OP (mx_el_ne, !=, M1, Z1,   , M2, Z2,   )
+#define SPARSE_SMSM_CMP_OPS(M1, Z1, M2, Z2)             \
+  SPARSE_SMSM_CMP_OP (mx_el_lt, <,  M1, Z1, M2, Z2)     \
+  SPARSE_SMSM_CMP_OP (mx_el_le, <=, M1, Z1, M2, Z2)     \
+  SPARSE_SMSM_CMP_OP (mx_el_ge, >=, M1, Z1, M2, Z2)     \
+  SPARSE_SMSM_CMP_OP (mx_el_gt, >,  M1, Z1, M2, Z2)     \
+  SPARSE_SMSM_CMP_OP (mx_el_eq, ==, M1, Z1, M2, Z2)     \
+  SPARSE_SMSM_CMP_OP (mx_el_ne, !=, M1, Z1, M2, Z2)
 
-#define SPARSE_SMSM_EQNE_OPS(M1, Z1, C1, M2, Z2, C2)            \
-  SPARSE_SMSM_CMP_OP (mx_el_eq, ==, M1, Z1,   , M2, Z2,   )     \
-  SPARSE_SMSM_CMP_OP (mx_el_ne, !=, M1, Z1,   , M2, Z2,   )
+#define SPARSE_SMSM_EQNE_OPS(M1, Z1, M2, Z2)            \
+  SPARSE_SMSM_CMP_OP (mx_el_eq, ==, M1, Z1, M2, Z2)     \
+  SPARSE_SMSM_CMP_OP (mx_el_ne, !=, M1, Z1, M2, Z2)
 
 #define SPARSE_SMSM_BOOL_AND_OP(M1, M2)                                 \
   extern SparseBoolMatrix mx_el_and (const M1&, const M2::element_type&); \
   extern SparseBoolMatrix mx_el_and (const M1::element_type&, const M2&); \
   SparseBoolMatrix                                                      \
   mx_el_and (const M1& m1, const M2& m2)                                \
   {                                                                     \
     SparseBoolMatrix r;                                                 \
@@ -1116,17 +1116,17 @@ along with Octave; see the file COPYING.
 
 // FIXME: Pass a specific ZERO value
 #define SPARSE_MSM_BIN_OPS(R1, R2, M1, M2)              \
   SPARSE_MSM_BIN_OP_1 (R1, operator +,  +, M1, M2)      \
   SPARSE_MSM_BIN_OP_1 (R1, operator -,  -, M1, M2)      \
   SPARSE_MSM_BIN_OP_2 (R2, product,     *, M1, M2)      \
   SPARSE_MSM_BIN_OP_1 (R2, quotient,    /, M1, M2)
 
-#define SPARSE_MSM_CMP_OP(F, OP, M1, C1, M2, C2)                        \
+#define SPARSE_MSM_CMP_OP(F, OP, M1, M2)                                \
   SparseBoolMatrix                                                      \
   F (const M1& m1, const M2& m2)                                        \
   {                                                                     \
     SparseBoolMatrix r;                                                 \
                                                                         \
     octave_idx_type m1_nr = m1.rows ();                                 \
     octave_idx_type m1_nc = m1.cols ();                                 \
                                                                         \
@@ -1138,28 +1138,28 @@ along with Octave; see the file COPYING.
     else if (m1_nr == m2_nr && m1_nc == m2_nc)                          \
       {                                                                 \
         if (m1_nr != 0 || m1_nc != 0)                                   \
           {                                                             \
             /* Count num of nonzero elements */                         \
             octave_idx_type nel = 0;                                    \
             for (octave_idx_type j = 0; j < m1_nc; j++)                 \
               for (octave_idx_type i = 0; i < m1_nr; i++)               \
-                if (C1 (m1.elem (i, j)) OP C2 (m2.elem (i, j)))         \
+                if (m1.elem (i, j) OP m2.elem (i, j))                   \
                   nel++;                                                \
                                                                         \
             r = SparseBoolMatrix (m1_nr, m1_nc, nel);                   \
                                                                         \
             octave_idx_type ii = 0;                                     \
             r.cidx (0) = 0;                                             \
             for (octave_idx_type j = 0; j < m1_nc; j++)                 \
               {                                                         \
                 for (octave_idx_type i = 0; i < m1_nr; i++)             \
                   {                                                     \
-                    bool el = C1 (m1.elem (i, j)) OP C2 (m2.elem (i, j)); \
+                    bool el = m1.elem (i, j) OP m2.elem (i, j);         \
                     if (el)                                             \
                       {                                                 \
                         r.data (ii) = el;                               \
                         r.ridx (ii++) = i;                              \
                       }                                                 \
                   }                                                     \
                 r.cidx (j+1) = ii;                                      \
               }                                                         \
@@ -1168,27 +1168,27 @@ along with Octave; see the file COPYING.
     else                                                                \
       {                                                                 \
         if ((m1_nr != 0 || m1_nc != 0) && (m2_nr != 0 || m2_nc != 0))   \
           octave::err_nonconformant (#F, m1_nr, m1_nc, m2_nr, m2_nc);           \
       }                                                                 \
     return r;                                                           \
   }
 
-#define SPARSE_MSM_CMP_OPS(M1, Z1, C1, M2, Z2, C2)      \
-  SPARSE_MSM_CMP_OP (mx_el_lt, <,  M1,   , M2,   )      \
-  SPARSE_MSM_CMP_OP (mx_el_le, <=, M1,   , M2,   )      \
-  SPARSE_MSM_CMP_OP (mx_el_ge, >=, M1,   , M2,   )      \
-  SPARSE_MSM_CMP_OP (mx_el_gt, >,  M1,   , M2,   )      \
-  SPARSE_MSM_CMP_OP (mx_el_eq, ==, M1,   , M2,   )      \
-  SPARSE_MSM_CMP_OP (mx_el_ne, !=, M1,   , M2,   )
+#define SPARSE_MSM_CMP_OPS(M1, Z1, M2, Z2)      \
+  SPARSE_MSM_CMP_OP (mx_el_lt, <,  M1, M2)      \
+  SPARSE_MSM_CMP_OP (mx_el_le, <=, M1, M2)      \
+  SPARSE_MSM_CMP_OP (mx_el_ge, >=, M1, M2)      \
+  SPARSE_MSM_CMP_OP (mx_el_gt, >,  M1, M2)      \
+  SPARSE_MSM_CMP_OP (mx_el_eq, ==, M1, M2)      \
+  SPARSE_MSM_CMP_OP (mx_el_ne, !=, M1, M2)
 
-#define SPARSE_MSM_EQNE_OPS(M1, Z1, C1, M2, Z2, C2)     \
-  SPARSE_MSM_CMP_OP (mx_el_eq, ==, M1,   , M2,   )      \
-  SPARSE_MSM_CMP_OP (mx_el_ne, !=, M1,   , M2,   )
+#define SPARSE_MSM_EQNE_OPS(M1, Z1, M2, Z2)     \
+  SPARSE_MSM_CMP_OP (mx_el_eq, ==, M1, M2)      \
+  SPARSE_MSM_CMP_OP (mx_el_ne, !=, M1, M2)
 
 #define SPARSE_MSM_BOOL_OP(F, OP, M1, M2)                               \
   SparseBoolMatrix                                                      \
   F (const M1& m1, const M2& m2)                                        \
   {                                                                     \
     SparseBoolMatrix r;                                                 \
                                                                         \
     octave_idx_type m1_nr = m1.rows ();                                 \
@@ -1329,17 +1329,17 @@ along with Octave; see the file COPYING.
   }
 
 #define SPARSE_SMM_BIN_OPS(R1, R2, M1, M2)              \
   SPARSE_SMM_BIN_OP_1 (R1, operator +,  +, M1, M2)      \
   SPARSE_SMM_BIN_OP_1 (R1, operator -,  -, M1, M2)      \
   SPARSE_SMM_BIN_OP_2 (R2, product,     *, M1, M2)      \
   SPARSE_SMM_BIN_OP_2 (R2, quotient,    /, M1, M2)
 
-#define SPARSE_SMM_CMP_OP(F, OP, M1, C1, M2, C2)                        \
+#define SPARSE_SMM_CMP_OP(F, OP, M1, M2)                                \
   SparseBoolMatrix                                                      \
   F (const M1& m1, const M2& m2)                                        \
   {                                                                     \
     SparseBoolMatrix r;                                                 \
                                                                         \
     octave_idx_type m1_nr = m1.rows ();                                 \
     octave_idx_type m1_nc = m1.cols ();                                 \
                                                                         \
@@ -1351,28 +1351,28 @@ along with Octave; see the file COPYING.
     else if (m1_nr == m2_nr && m1_nc == m2_nc)                          \
       {                                                                 \
         if (m1_nr != 0 || m1_nc != 0)                                   \
           {                                                             \
             /* Count num of nonzero elements */                         \
             octave_idx_type nel = 0;                                    \
             for (octave_idx_type j = 0; j < m1_nc; j++)                 \
               for (octave_idx_type i = 0; i < m1_nr; i++)               \
-                if (C1 (m1.elem (i, j)) OP C2 (m2.elem (i, j)))         \
+                if (m1.elem (i, j) OP m2.elem (i, j))                   \
                   nel++;                                                \
                                                                         \
             r = SparseBoolMatrix (m1_nr, m1_nc, nel);                   \
                                                                         \
             octave_idx_type ii = 0;                                     \
             r.cidx (0) = 0;                                             \
             for (octave_idx_type j = 0; j < m1_nc; j++)                 \
               {                                                         \
                 for (octave_idx_type i = 0; i < m1_nr; i++)             \
                   {                                                     \
-                    bool el = C1 (m1.elem (i, j)) OP C2 (m2.elem (i, j)); \
+                    bool el = m1.elem (i, j) OP m2.elem (i, j);         \
                     if (el)                                             \
                       {                                                 \
                         r.data (ii) = el;                               \
                         r.ridx (ii++) = i;                              \
                       }                                                 \
                   }                                                     \
                 r.cidx (j+1) = ii;                                      \
               }                                                         \
@@ -1381,27 +1381,27 @@ along with Octave; see the file COPYING.
     else                                                                \
       {                                                                 \
         if ((m1_nr != 0 || m1_nc != 0) && (m2_nr != 0 || m2_nc != 0))   \
           octave::err_nonconformant (#F, m1_nr, m1_nc, m2_nr, m2_nc);           \
       }                                                                 \
     return r;                                                           \
   }
 
-#define SPARSE_SMM_CMP_OPS(M1, Z1, C1, M2, Z2, C2)      \
-  SPARSE_SMM_CMP_OP (mx_el_lt, <,  M1,   , M2,   )      \
-  SPARSE_SMM_CMP_OP (mx_el_le, <=, M1,   , M2,   )      \
-  SPARSE_SMM_CMP_OP (mx_el_ge, >=, M1,   , M2,   )      \
-  SPARSE_SMM_CMP_OP (mx_el_gt, >,  M1,   , M2,   )      \
-  SPARSE_SMM_CMP_OP (mx_el_eq, ==, M1,   , M2,   )      \
-  SPARSE_SMM_CMP_OP (mx_el_ne, !=, M1,   , M2,   )
+#define SPARSE_SMM_CMP_OPS(M1, Z1, M2, Z2)      \
+  SPARSE_SMM_CMP_OP (mx_el_lt, <,  M1, M2)      \
+  SPARSE_SMM_CMP_OP (mx_el_le, <=, M1, M2)      \
+  SPARSE_SMM_CMP_OP (mx_el_ge, >=, M1, M2)      \
+  SPARSE_SMM_CMP_OP (mx_el_gt, >,  M1, M2)      \
+  SPARSE_SMM_CMP_OP (mx_el_eq, ==, M1, M2)      \
+  SPARSE_SMM_CMP_OP (mx_el_ne, !=, M1, M2)
 
-#define SPARSE_SMM_EQNE_OPS(M1, Z1, C1, M2, Z2, C2)     \
-  SPARSE_SMM_CMP_OP (mx_el_eq, ==, M1,   , M2,   )      \
-  SPARSE_SMM_CMP_OP (mx_el_ne, !=, M1,   , M2,   )
+#define SPARSE_SMM_EQNE_OPS(M1, Z1, M2, Z2)     \
+  SPARSE_SMM_CMP_OP (mx_el_eq, ==, M1, M2)      \
+  SPARSE_SMM_CMP_OP (mx_el_ne, !=, M1, M2)
 
 #define SPARSE_SMM_BOOL_OP(F, OP, M1, M2)                               \
   SparseBoolMatrix                                                      \
   F (const M1& m1, const M2& m2)                                        \
   {                                                                     \
     SparseBoolMatrix r;                                                 \
                                                                         \
     octave_idx_type m1_nr = m1.rows ();                                 \
diff --git a/liboctave/operators/mk-ops.awk b/liboctave/operators/mk-ops.awk
--- a/liboctave/operators/mk-ops.awk
+++ b/liboctave/operators/mk-ops.awk
@@ -118,28 +118,16 @@ BEGIN {
           rhs_tag = $(++n);
           op_type = $(++n);
 
           bin_ops = index (op_type, "B") != 0;
           cmp_ops = index (op_type, "C") != 0;
           eqne_ops = index (op_type, "E") != 0;
           bool_ops = index (op_type, "L") != 0;
 
-          if (cmp_ops)
-            {
-              lhs_conv = $(++n);
-              rhs_conv = $(++n);
-            }
-
-          if (lhs_conv == "NONE")
-            lhs_conv = "";
-
-          if (rhs_conv == "NONE")
-            rhs_conv = "";
-
           k = 0
           while (NF > n)
             bool_headers[k++] = $(++n);
 
           cc_file = sprintf ("%s-%s-%s.cc", prefix, lhs_tag, rhs_tag);
           h_file = sprintf ("%s-%s-%s.h", prefix, lhs_tag, rhs_tag);
 
           if (list_cc_files)
@@ -388,22 +376,22 @@ BEGIN {
                 printf ("#include \"%s\"\n", rhs_header);
 
               if (bin_ops)
                 emit_bin_ops(sparse, lhs_class, rhs_class,
                              result_type_1, result_type_2, lhs_type, rhs_type);
 
               if (cmp_ops)
                 emit_cmp_ops(sparse, lhs_class, rhs_class,
-                             lhs_type, rhs_type, lhs_conv, rhs_conv,
+                             lhs_type, rhs_type,
                              lhs_scalar_zero_val, rhs_scalar_zero_val);
 
               if (eqne_ops)
                 emit_eqne_ops(sparse, lhs_class, rhs_class,
-                              lhs_type, rhs_type, lhs_conv, rhs_conv,
+                              lhs_type, rhs_type,
                               lhs_scalar_zero_val, rhs_scalar_zero_val);
 
               if (bool_ops)
                 emit_bool_ops(sparse, lhs_class, rhs_class,
                               lhs_type, rhs_type);
 
               exit (0);
             }
@@ -653,38 +641,37 @@ function emit_bin_ops (sparse, lhs_class
   else if (lhs_class == "M" && rhs_class == "M")
     emit_mm_bin_ops(result_type_1, lhs_type, rhs_type);
   else
     printf ("%s%s_BIN_OPS (%s, %s, %s)\n",
             lhs_class, rhs_class, result_type_1, lhs_type, rhs_type);
 }
 
 function emit_cmp_ops (sparse, lhs_class, rhs_class,
-                       lhs_type, rhs_type, lhs_conv, rhs_conv,
+                       lhs_type, rhs_type,
                        lhs_scalar_zero_val, rhs_scalar_zero_val)
 {
   if (sparse)
-    printf ("SPARSE_%s%s_CMP_OPS (%s, %s, %s, %s, %s, %s)\n",
+    printf ("SPARSE_%s%s_CMP_OPS (%s, %s, %s, %s)\n",
             lhs_class, rhs_class, lhs_type,
-            lhs_scalar_zero_val, lhs_conv, rhs_type,
-            rhs_scalar_zero_val, rhs_conv);
+            lhs_scalar_zero_val, rhs_type,
+            rhs_scalar_zero_val);
   else
     printf ("%s%s_CMP_OPS (%s, %s)\n",
             lhs_class, rhs_class, lhs_type, rhs_type);
 }
 
-function emit_eqne_ops (sparse, lhs_class, rhs_class,
-                        lhs_type, rhs_type, lhs_conv, rhs_conv,
+function emit_eqne_ops (sparse, lhs_class, rhs_class, lhs_type, rhs_type,
                         lhs_scalar_zero_val, rhs_scalar_zero_val)
 {
   if (sparse)
-    printf ("SPARSE_%s%s_EQNE_OPS (%s, %s, %s, %s, %s, %s)\n",
+    printf ("SPARSE_%s%s_EQNE_OPS (%s, %s, %s, %s)\n",
             lhs_class, rhs_class, lhs_type,
-            lhs_scalar_zero_val, lhs_conv, rhs_type,
-            rhs_scalar_zero_val, rhs_conv);
+            lhs_scalar_zero_val, rhs_type,
+            rhs_scalar_zero_val);
 
   ## No separate eqne ops for full-matrix or vector.
 }
 
 function emit_bool_ops (sparse, lhs_class, rhs_class, lhs_type, rhs_type)
 {
   if (sparse)
     printf ("SPARSE_%s%s_BOOL_OPS (%s, %s)\n",
diff --git a/liboctave/operators/mx-ops b/liboctave/operators/mx-ops
--- a/liboctave/operators/mx-ops
+++ b/liboctave/operators/mx-ops
@@ -72,369 +72,369 @@ ui16nda uint16NDArray ND uint16NDArray.h
 i32nda int32NDArray ND int32NDArray.h YES octave_int32::zero int32_t
 ui32nda uint32NDArray ND uint32NDArray.h YES octave_uint32::zero uint32_t
 i64nda int64NDArray ND int64NDArray.h YES octave_int64::zero int64_t
 ui64nda uint64NDArray ND uint64NDArray.h YES octave_uint64::zero uint64_t
 pm PermMatrix PM PermMatrix.h YES static_cast<octave_idx_type>(0)
 #
 # full-matrix operators
 #
-# result_t lhs_t rhs_t op-type lhs_conv rhs_conv headers ...
+# result_t lhs_t rhs_t op-type headers ...
 #
 # op-type is one of
 #
 #   B: binary ops, + - * /
 #   C: comparison ops, < <= == != >= >
 #   L: logical ops, & |
 #
 cdm cdm dm B
 cdm dm cdm B
 cdm cs dm B
-cm cs m BCL real NONE boolMatrix.h
-cnda cs nda BCL real NONE boolMatrix.h boolNDArray.h
+cm cs m BCL boolMatrix.h
+cnda cs nda BCL boolMatrix.h boolNDArray.h
 cm cdm cm B
 cm cdm m B
 cdm cdm s B
 cm cm cdm B
 cm cm dm B
-cm cm m BCL real NONE boolMatrix.h
-cnda cnda nda BCL real NONE boolMatrix.h boolNDArray.h
-cm cm s BCL real NONE boolMatrix.h
-cnda cnda s BCL real NONE boolMatrix.h boolNDArray.h
+cm cm m BCL boolMatrix.h
+cnda cnda nda BCL boolMatrix.h boolNDArray.h
+cm cm s BCL boolMatrix.h
+cnda cnda s BCL boolMatrix.h boolNDArray.h
 cdm dm cs B
 cm dm cm B
-cm m cs BCL NONE real boolMatrix.h
-cnda nda cs BCL NONE real boolMatrix.h boolNDArray.h
+cm m cs BCL boolMatrix.h
+cnda nda cs BCL boolMatrix.h boolNDArray.h
 cm m cdm B
-cm m cm BCL NONE real boolMatrix.h
-cnda nda cnda BCL NONE real boolMatrix.h boolNDArray.h
+cm m cm BCL boolMatrix.h
+cnda nda cnda BCL boolMatrix.h boolNDArray.h
 cdm s cdm B
-cm s cm BCL NONE real boolMatrix.h
-cnda s cnda BCL NONE real boolMatrix.h boolNDArray.h
+cm s cm BCL boolMatrix.h
+cnda s cnda BCL boolMatrix.h boolNDArray.h
 m dm m B
 m m dm B
 #
 fcdm fcdm fdm B
 fcdm fdm fcdm B
 fcdm fcs fdm B
-fcm fcs fm BCL real NONE boolMatrix.h
-fcnda fcs fnda BCL real NONE boolMatrix.h boolNDArray.h
+fcm fcs fm BCL boolMatrix.h
+fcnda fcs fnda BCL boolMatrix.h boolNDArray.h
 fcm fcdm fcm B
 fcm fcdm fm B
 fcdm fcdm fs B
 fcm fcm fcdm B
 fcm fcm fdm B
-fcm fcm fm BCL real NONE boolMatrix.h
-fcnda fcnda fnda BCL real NONE boolMatrix.h boolNDArray.h
-fcm fcm fs BCL real NONE boolMatrix.h
-fcnda fcnda fs BCL real NONE boolMatrix.h boolNDArray.h
+fcm fcm fm BCL boolMatrix.h
+fcnda fcnda fnda BCL boolMatrix.h boolNDArray.h
+fcm fcm fs BCL boolMatrix.h
+fcnda fcnda fs BCL boolMatrix.h boolNDArray.h
 fcdm fdm fcs B
 fcm fdm fcm B
-fcm fm fcs BCL NONE real boolMatrix.h
-fcnda fnda fcs BCL NONE real boolMatrix.h boolNDArray.h
+fcm fm fcs BCL boolMatrix.h
+fcnda fnda fcs BCL boolMatrix.h boolNDArray.h
 fcm fm fcdm B
-fcm fm fcm BCL NONE real boolMatrix.h
-fcnda fnda fcnda BCL NONE real boolMatrix.h boolNDArray.h
+fcm fm fcm BCL boolMatrix.h
+fcnda fnda fcnda BCL boolMatrix.h boolNDArray.h
 fcdm fs fcdm B
-fcm fs fcm BCL NONE real boolMatrix.h
-fcnda fs fcnda BCL NONE real boolMatrix.h boolNDArray.h
+fcm fs fcm BCL boolMatrix.h
+fcnda fs fcnda BCL boolMatrix.h boolNDArray.h
 fm fdm fm B
 fm fm fdm B
 #
 m pm m B
 m m pm B
 cm pm cm B
 cm cm pm B
 fm pm fm B
 fm fm pm B
 fcm pm fcm B
 fcm fcm pm B
 #
-i8nda s i8nda BCL NONE NONE boolMatrix.h boolNDArray.h
-i8nda i8nda s BCL NONE NONE boolMatrix.h boolNDArray.h
-ui8nda s ui8nda BCL NONE NONE boolMatrix.h boolNDArray.h
-ui8nda ui8nda s BCL NONE NONE boolMatrix.h boolNDArray.h
-i16nda s i16nda BCL NONE NONE boolMatrix.h boolNDArray.h
-i16nda i16nda s BCL NONE NONE boolMatrix.h boolNDArray.h
-ui16nda s ui16nda BCL NONE NONE boolMatrix.h boolNDArray.h
-ui16nda ui16nda s BCL NONE NONE boolMatrix.h boolNDArray.h
-i32nda s i32nda BCL NONE NONE boolMatrix.h boolNDArray.h
-i32nda i32nda s BCL NONE NONE boolMatrix.h boolNDArray.h
-ui32nda s ui32nda BCL NONE NONE boolMatrix.h boolNDArray.h
-ui32nda ui32nda s BCL NONE NONE boolMatrix.h boolNDArray.h
-i64nda s i64nda BCL NONE NONE boolMatrix.h boolNDArray.h
-i64nda i64nda s BCL NONE NONE boolMatrix.h boolNDArray.h
-ui64nda s ui64nda BCL NONE NONE boolMatrix.h boolNDArray.h
-ui64nda ui64nda s BCL NONE NONE boolMatrix.h boolNDArray.h
-i8nda fs i8nda BCL NONE NONE boolMatrix.h boolNDArray.h
-i8nda i8nda fs BCL NONE NONE boolMatrix.h boolNDArray.h
-ui8nda fs ui8nda BCL NONE NONE boolMatrix.h boolNDArray.h
-ui8nda ui8nda fs BCL NONE NONE boolMatrix.h boolNDArray.h
-i16nda fs i16nda BCL NONE NONE boolMatrix.h boolNDArray.h
-i16nda i16nda fs BCL NONE NONE boolMatrix.h boolNDArray.h
-ui16nda fs ui16nda BCL NONE NONE boolMatrix.h boolNDArray.h
-ui16nda ui16nda fs BCL NONE NONE boolMatrix.h boolNDArray.h
-i32nda fs i32nda BCL NONE NONE boolMatrix.h boolNDArray.h
-i32nda i32nda fs BCL NONE NONE boolMatrix.h boolNDArray.h
-ui32nda fs ui32nda BCL NONE NONE boolMatrix.h boolNDArray.h
-ui32nda ui32nda fs BCL NONE NONE boolMatrix.h boolNDArray.h
-i64nda fs i64nda BCL NONE NONE boolMatrix.h boolNDArray.h
-i64nda i64nda fs BCL NONE NONE boolMatrix.h boolNDArray.h
-ui64nda fs ui64nda BCL NONE NONE boolMatrix.h boolNDArray.h
-ui64nda ui64nda fs BCL NONE NONE boolMatrix.h boolNDArray.h
+i8nda s i8nda BCL boolMatrix.h boolNDArray.h
+i8nda i8nda s BCL boolMatrix.h boolNDArray.h
+ui8nda s ui8nda BCL boolMatrix.h boolNDArray.h
+ui8nda ui8nda s BCL boolMatrix.h boolNDArray.h
+i16nda s i16nda BCL boolMatrix.h boolNDArray.h
+i16nda i16nda s BCL boolMatrix.h boolNDArray.h
+ui16nda s ui16nda BCL boolMatrix.h boolNDArray.h
+ui16nda ui16nda s BCL boolMatrix.h boolNDArray.h
+i32nda s i32nda BCL boolMatrix.h boolNDArray.h
+i32nda i32nda s BCL boolMatrix.h boolNDArray.h
+ui32nda s ui32nda BCL boolMatrix.h boolNDArray.h
+ui32nda ui32nda s BCL boolMatrix.h boolNDArray.h
+i64nda s i64nda BCL boolMatrix.h boolNDArray.h
+i64nda i64nda s BCL boolMatrix.h boolNDArray.h
+ui64nda s ui64nda BCL boolMatrix.h boolNDArray.h
+ui64nda ui64nda s BCL boolMatrix.h boolNDArray.h
+i8nda fs i8nda BCL boolMatrix.h boolNDArray.h
+i8nda i8nda fs BCL boolMatrix.h boolNDArray.h
+ui8nda fs ui8nda BCL boolMatrix.h boolNDArray.h
+ui8nda ui8nda fs BCL boolMatrix.h boolNDArray.h
+i16nda fs i16nda BCL boolMatrix.h boolNDArray.h
+i16nda i16nda fs BCL boolMatrix.h boolNDArray.h
+ui16nda fs ui16nda BCL boolMatrix.h boolNDArray.h
+ui16nda ui16nda fs BCL boolMatrix.h boolNDArray.h
+i32nda fs i32nda BCL boolMatrix.h boolNDArray.h
+i32nda i32nda fs BCL boolMatrix.h boolNDArray.h
+ui32nda fs ui32nda BCL boolMatrix.h boolNDArray.h
+ui32nda ui32nda fs BCL boolMatrix.h boolNDArray.h
+i64nda fs i64nda BCL boolMatrix.h boolNDArray.h
+i64nda i64nda fs BCL boolMatrix.h boolNDArray.h
+ui64nda fs ui64nda BCL boolMatrix.h boolNDArray.h
+ui64nda ui64nda fs BCL boolMatrix.h boolNDArray.h
 #
-i8nda nda i8 BCL NONE NONE boolMatrix.h boolNDArray.h
-i8nda i8 nda BCL NONE NONE boolMatrix.h boolNDArray.h
-ui8nda nda ui8 BCL NONE NONE boolMatrix.h boolNDArray.h
-ui8nda ui8 nda BCL NONE NONE boolMatrix.h boolNDArray.h
-i16nda nda i16 BCL NONE NONE boolMatrix.h boolNDArray.h
-i16nda i16 nda BCL NONE NONE boolMatrix.h boolNDArray.h
-ui16nda nda ui16 BCL NONE NONE boolMatrix.h boolNDArray.h
-ui16nda ui16 nda BCL NONE NONE boolMatrix.h boolNDArray.h
-i32nda nda i32 BCL NONE NONE boolMatrix.h boolNDArray.h
-i32nda i32 nda BCL NONE NONE boolMatrix.h boolNDArray.h
-ui32nda nda ui32 BCL NONE NONE boolMatrix.h boolNDArray.h
-ui32nda ui32 nda BCL NONE NONE boolMatrix.h boolNDArray.h
-i64nda nda i64 BCL NONE NONE boolMatrix.h boolNDArray.h
-i64nda i64 nda BCL NONE NONE boolMatrix.h boolNDArray.h
-ui64nda nda ui64 BCL NONE NONE boolMatrix.h boolNDArray.h
-ui64nda ui64 nda BCL NONE NONE boolMatrix.h boolNDArray.h
-i8nda fnda i8 BCL NONE NONE boolMatrix.h boolNDArray.h
-i8nda i8 fnda BCL NONE NONE boolMatrix.h boolNDArray.h
-ui8nda fnda ui8 BCL NONE NONE boolMatrix.h boolNDArray.h
-ui8nda ui8 fnda BCL NONE NONE boolMatrix.h boolNDArray.h
-i16nda fnda i16 BCL NONE NONE boolMatrix.h boolNDArray.h
-i16nda i16 fnda BCL NONE NONE boolMatrix.h boolNDArray.h
-ui16nda fnda ui16 BCL NONE NONE boolMatrix.h boolNDArray.h
-ui16nda ui16 fnda BCL NONE NONE boolMatrix.h boolNDArray.h
-i32nda fnda i32 BCL NONE NONE boolMatrix.h boolNDArray.h
-i32nda i32 fnda BCL NONE NONE boolMatrix.h boolNDArray.h
-ui32nda fnda ui32 BCL NONE NONE boolMatrix.h boolNDArray.h
-ui32nda ui32 fnda BCL NONE NONE boolMatrix.h boolNDArray.h
-i64nda fnda i64 BCL NONE NONE boolMatrix.h boolNDArray.h
-i64nda i64 fnda BCL NONE NONE boolMatrix.h boolNDArray.h
-ui64nda fnda ui64 BCL NONE NONE boolMatrix.h boolNDArray.h
-ui64nda ui64 fnda BCL NONE NONE boolMatrix.h boolNDArray.h
+i8nda nda i8 BCL boolMatrix.h boolNDArray.h
+i8nda i8 nda BCL boolMatrix.h boolNDArray.h
+ui8nda nda ui8 BCL boolMatrix.h boolNDArray.h
+ui8nda ui8 nda BCL boolMatrix.h boolNDArray.h
+i16nda nda i16 BCL boolMatrix.h boolNDArray.h
+i16nda i16 nda BCL boolMatrix.h boolNDArray.h
+ui16nda nda ui16 BCL boolMatrix.h boolNDArray.h
+ui16nda ui16 nda BCL boolMatrix.h boolNDArray.h
+i32nda nda i32 BCL boolMatrix.h boolNDArray.h
+i32nda i32 nda BCL boolMatrix.h boolNDArray.h
+ui32nda nda ui32 BCL boolMatrix.h boolNDArray.h
+ui32nda ui32 nda BCL boolMatrix.h boolNDArray.h
+i64nda nda i64 BCL boolMatrix.h boolNDArray.h
+i64nda i64 nda BCL boolMatrix.h boolNDArray.h
+ui64nda nda ui64 BCL boolMatrix.h boolNDArray.h
+ui64nda ui64 nda BCL boolMatrix.h boolNDArray.h
+i8nda fnda i8 BCL boolMatrix.h boolNDArray.h
+i8nda i8 fnda BCL boolMatrix.h boolNDArray.h
+ui8nda fnda ui8 BCL boolMatrix.h boolNDArray.h
+ui8nda ui8 fnda BCL boolMatrix.h boolNDArray.h
+i16nda fnda i16 BCL boolMatrix.h boolNDArray.h
+i16nda i16 fnda BCL boolMatrix.h boolNDArray.h
+ui16nda fnda ui16 BCL boolMatrix.h boolNDArray.h
+ui16nda ui16 fnda BCL boolMatrix.h boolNDArray.h
+i32nda fnda i32 BCL boolMatrix.h boolNDArray.h
+i32nda i32 fnda BCL boolMatrix.h boolNDArray.h
+ui32nda fnda ui32 BCL boolMatrix.h boolNDArray.h
+ui32nda ui32 fnda BCL boolMatrix.h boolNDArray.h
+i64nda fnda i64 BCL boolMatrix.h boolNDArray.h
+i64nda i64 fnda BCL boolMatrix.h boolNDArray.h
+ui64nda fnda ui64 BCL boolMatrix.h boolNDArray.h
+ui64nda ui64 fnda BCL boolMatrix.h boolNDArray.h
 #
-i8nda nda i8nda BCL NONE NONE boolMatrix.h boolNDArray.h
-i8nda i8nda nda BCL NONE NONE boolMatrix.h boolNDArray.h
-ui8nda nda ui8nda BCL NONE NONE boolMatrix.h boolNDArray.h
-ui8nda ui8nda nda BCL NONE NONE boolMatrix.h boolNDArray.h
-i16nda nda i16nda BCL NONE NONE boolMatrix.h boolNDArray.h
-i16nda i16nda nda BCL NONE NONE boolMatrix.h boolNDArray.h
-ui16nda nda ui16nda BCL NONE NONE boolMatrix.h boolNDArray.h
-ui16nda ui16nda nda BCL NONE NONE boolMatrix.h boolNDArray.h
-i32nda nda i32nda BCL NONE NONE boolMatrix.h boolNDArray.h
-i32nda i32nda nda BCL NONE NONE boolMatrix.h boolNDArray.h
-ui32nda nda ui32nda BCL NONE NONE boolMatrix.h boolNDArray.h
-ui32nda ui32nda nda BCL NONE NONE boolMatrix.h boolNDArray.h
-i64nda nda i64nda BCL NONE NONE boolMatrix.h boolNDArray.h
-i64nda i64nda nda BCL NONE NONE boolMatrix.h boolNDArray.h
-ui64nda nda ui64nda BCL NONE NONE boolMatrix.h boolNDArray.h
-ui64nda ui64nda nda BCL NONE NONE boolMatrix.h boolNDArray.h
-i8nda fnda i8nda BCL NONE NONE boolMatrix.h boolNDArray.h
-i8nda i8nda fnda BCL NONE NONE boolMatrix.h boolNDArray.h
-ui8nda fnda ui8nda BCL NONE NONE boolMatrix.h boolNDArray.h
-ui8nda ui8nda fnda BCL NONE NONE boolMatrix.h boolNDArray.h
-i16nda fnda i16nda BCL NONE NONE boolMatrix.h boolNDArray.h
-i16nda i16nda fnda BCL NONE NONE boolMatrix.h boolNDArray.h
-ui16nda fnda ui16nda BCL NONE NONE boolMatrix.h boolNDArray.h
-ui16nda ui16nda fnda BCL NONE NONE boolMatrix.h boolNDArray.h
-i32nda fnda i32nda BCL NONE NONE boolMatrix.h boolNDArray.h
-i32nda i32nda fnda BCL NONE NONE boolMatrix.h boolNDArray.h
-ui32nda fnda ui32nda BCL NONE NONE boolMatrix.h boolNDArray.h
-ui32nda ui32nda fnda BCL NONE NONE boolMatrix.h boolNDArray.h
-i64nda fnda i64nda BCL NONE NONE boolMatrix.h boolNDArray.h
-i64nda i64nda fnda BCL NONE NONE boolMatrix.h boolNDArray.h
-ui64nda fnda ui64nda BCL NONE NONE boolMatrix.h boolNDArray.h
-ui64nda ui64nda fnda BCL NONE NONE boolMatrix.h boolNDArray.h
+i8nda nda i8nda BCL boolMatrix.h boolNDArray.h
+i8nda i8nda nda BCL boolMatrix.h boolNDArray.h
+ui8nda nda ui8nda BCL boolMatrix.h boolNDArray.h
+ui8nda ui8nda nda BCL boolMatrix.h boolNDArray.h
+i16nda nda i16nda BCL boolMatrix.h boolNDArray.h
+i16nda i16nda nda BCL boolMatrix.h boolNDArray.h
+ui16nda nda ui16nda BCL boolMatrix.h boolNDArray.h
+ui16nda ui16nda nda BCL boolMatrix.h boolNDArray.h
+i32nda nda i32nda BCL boolMatrix.h boolNDArray.h
+i32nda i32nda nda BCL boolMatrix.h boolNDArray.h
+ui32nda nda ui32nda BCL boolMatrix.h boolNDArray.h
+ui32nda ui32nda nda BCL boolMatrix.h boolNDArray.h
+i64nda nda i64nda BCL boolMatrix.h boolNDArray.h
+i64nda i64nda nda BCL boolMatrix.h boolNDArray.h
+ui64nda nda ui64nda BCL boolMatrix.h boolNDArray.h
+ui64nda ui64nda nda BCL boolMatrix.h boolNDArray.h
+i8nda fnda i8nda BCL boolMatrix.h boolNDArray.h
+i8nda i8nda fnda BCL boolMatrix.h boolNDArray.h
+ui8nda fnda ui8nda BCL boolMatrix.h boolNDArray.h
+ui8nda ui8nda fnda BCL boolMatrix.h boolNDArray.h
+i16nda fnda i16nda BCL boolMatrix.h boolNDArray.h
+i16nda i16nda fnda BCL boolMatrix.h boolNDArray.h
+ui16nda fnda ui16nda BCL boolMatrix.h boolNDArray.h
+ui16nda ui16nda fnda BCL boolMatrix.h boolNDArray.h
+i32nda fnda i32nda BCL boolMatrix.h boolNDArray.h
+i32nda i32nda fnda BCL boolMatrix.h boolNDArray.h
+ui32nda fnda ui32nda BCL boolMatrix.h boolNDArray.h
+ui32nda ui32nda fnda BCL boolMatrix.h boolNDArray.h
+i64nda fnda i64nda BCL boolMatrix.h boolNDArray.h
+i64nda i64nda fnda BCL boolMatrix.h boolNDArray.h
+ui64nda fnda ui64nda BCL boolMatrix.h boolNDArray.h
+ui64nda ui64nda fnda BCL boolMatrix.h boolNDArray.h
 #
-x i8nda ui8 CL NONE NONE boolMatrix.h boolNDArray.h
-x i8nda i16 CL NONE NONE boolMatrix.h boolNDArray.h
-x i8nda ui16 CL NONE NONE boolMatrix.h boolNDArray.h
-x i8nda i32 CL NONE NONE boolMatrix.h boolNDArray.h
-x i8nda ui32 CL NONE NONE boolMatrix.h boolNDArray.h
-x i8nda i64 CL NONE NONE boolMatrix.h boolNDArray.h
-x i8nda ui64 CL NONE NONE boolMatrix.h boolNDArray.h
+x i8nda ui8 CL boolMatrix.h boolNDArray.h
+x i8nda i16 CL boolMatrix.h boolNDArray.h
+x i8nda ui16 CL boolMatrix.h boolNDArray.h
+x i8nda i32 CL boolMatrix.h boolNDArray.h
+x i8nda ui32 CL boolMatrix.h boolNDArray.h
+x i8nda i64 CL boolMatrix.h boolNDArray.h
+x i8nda ui64 CL boolMatrix.h boolNDArray.h
 #
-x i16nda i8 CL NONE NONE boolMatrix.h boolNDArray.h
-x i16nda ui8 CL NONE NONE boolMatrix.h boolNDArray.h
-x i16nda ui16 CL NONE NONE boolMatrix.h boolNDArray.h
-x i16nda i32 CL NONE NONE boolMatrix.h boolNDArray.h
-x i16nda ui32 CL NONE NONE boolMatrix.h boolNDArray.h
-x i16nda i64 CL NONE NONE boolMatrix.h boolNDArray.h
-x i16nda ui64 CL NONE NONE boolMatrix.h boolNDArray.h
+x i16nda i8 CL boolMatrix.h boolNDArray.h
+x i16nda ui8 CL boolMatrix.h boolNDArray.h
+x i16nda ui16 CL boolMatrix.h boolNDArray.h
+x i16nda i32 CL boolMatrix.h boolNDArray.h
+x i16nda ui32 CL boolMatrix.h boolNDArray.h
+x i16nda i64 CL boolMatrix.h boolNDArray.h
+x i16nda ui64 CL boolMatrix.h boolNDArray.h
 #
-x i32nda i8 CL NONE NONE boolMatrix.h boolNDArray.h
-x i32nda ui8 CL NONE NONE boolMatrix.h boolNDArray.h
-x i32nda i16 CL NONE NONE boolMatrix.h boolNDArray.h
-x i32nda ui16 CL NONE NONE boolMatrix.h boolNDArray.h
-x i32nda ui32 CL NONE NONE boolMatrix.h boolNDArray.h
-x i32nda i64 CL NONE NONE boolMatrix.h boolNDArray.h
-x i32nda ui64 CL NONE NONE boolMatrix.h boolNDArray.h
+x i32nda i8 CL boolMatrix.h boolNDArray.h
+x i32nda ui8 CL boolMatrix.h boolNDArray.h
+x i32nda i16 CL boolMatrix.h boolNDArray.h
+x i32nda ui16 CL boolMatrix.h boolNDArray.h
+x i32nda ui32 CL boolMatrix.h boolNDArray.h
+x i32nda i64 CL boolMatrix.h boolNDArray.h
+x i32nda ui64 CL boolMatrix.h boolNDArray.h
 #
-x i64nda i8 CL NONE NONE boolMatrix.h boolNDArray.h
-x i64nda ui8 CL NONE NONE boolMatrix.h boolNDArray.h
-x i64nda i16 CL NONE NONE boolMatrix.h boolNDArray.h
-x i64nda ui16 CL NONE NONE boolMatrix.h boolNDArray.h
-x i64nda i32 CL NONE NONE boolMatrix.h boolNDArray.h
-x i64nda ui32 CL NONE NONE boolMatrix.h boolNDArray.h
-x i64nda ui64 CL NONE NONE boolMatrix.h boolNDArray.h
+x i64nda i8 CL boolMatrix.h boolNDArray.h
+x i64nda ui8 CL boolMatrix.h boolNDArray.h
+x i64nda i16 CL boolMatrix.h boolNDArray.h
+x i64nda ui16 CL boolMatrix.h boolNDArray.h
+x i64nda i32 CL boolMatrix.h boolNDArray.h
+x i64nda ui32 CL boolMatrix.h boolNDArray.h
+x i64nda ui64 CL boolMatrix.h boolNDArray.h
 #
-x ui8nda i8 CL NONE NONE boolMatrix.h boolNDArray.h
-x ui8nda i16 CL NONE NONE boolMatrix.h boolNDArray.h
-x ui8nda ui16 CL NONE NONE boolMatrix.h boolNDArray.h
-x ui8nda i32 CL NONE NONE boolMatrix.h boolNDArray.h
-x ui8nda ui32 CL NONE NONE boolMatrix.h boolNDArray.h
-x ui8nda i64 CL NONE NONE boolMatrix.h boolNDArray.h
-x ui8nda ui64 CL NONE NONE boolMatrix.h boolNDArray.h
+x ui8nda i8 CL boolMatrix.h boolNDArray.h
+x ui8nda i16 CL boolMatrix.h boolNDArray.h
+x ui8nda ui16 CL boolMatrix.h boolNDArray.h
+x ui8nda i32 CL boolMatrix.h boolNDArray.h
+x ui8nda ui32 CL boolMatrix.h boolNDArray.h
+x ui8nda i64 CL boolMatrix.h boolNDArray.h
+x ui8nda ui64 CL boolMatrix.h boolNDArray.h
 #
-x ui16nda i8 CL NONE NONE boolMatrix.h boolNDArray.h
-x ui16nda ui8 CL NONE NONE boolMatrix.h boolNDArray.h
-x ui16nda i16 CL NONE NONE boolMatrix.h boolNDArray.h
-x ui16nda i32 CL NONE NONE boolMatrix.h boolNDArray.h
-x ui16nda ui32 CL NONE NONE boolMatrix.h boolNDArray.h
-x ui16nda i64 CL NONE NONE boolMatrix.h boolNDArray.h
-x ui16nda ui64 CL NONE NONE boolMatrix.h boolNDArray.h
+x ui16nda i8 CL boolMatrix.h boolNDArray.h
+x ui16nda ui8 CL boolMatrix.h boolNDArray.h
+x ui16nda i16 CL boolMatrix.h boolNDArray.h
+x ui16nda i32 CL boolMatrix.h boolNDArray.h
+x ui16nda ui32 CL boolMatrix.h boolNDArray.h
+x ui16nda i64 CL boolMatrix.h boolNDArray.h
+x ui16nda ui64 CL boolMatrix.h boolNDArray.h
 #
-x ui32nda i8 CL NONE NONE boolMatrix.h boolNDArray.h
-x ui32nda ui8 CL NONE NONE boolMatrix.h boolNDArray.h
-x ui32nda i16 CL NONE NONE boolMatrix.h boolNDArray.h
-x ui32nda ui16 CL NONE NONE boolMatrix.h boolNDArray.h
-x ui32nda i32 CL NONE NONE boolMatrix.h boolNDArray.h
-x ui32nda i64 CL NONE NONE boolMatrix.h boolNDArray.h
-x ui32nda ui64 CL NONE NONE boolMatrix.h boolNDArray.h
+x ui32nda i8 CL boolMatrix.h boolNDArray.h
+x ui32nda ui8 CL boolMatrix.h boolNDArray.h
+x ui32nda i16 CL boolMatrix.h boolNDArray.h
+x ui32nda ui16 CL boolMatrix.h boolNDArray.h
+x ui32nda i32 CL boolMatrix.h boolNDArray.h
+x ui32nda i64 CL boolMatrix.h boolNDArray.h
+x ui32nda ui64 CL boolMatrix.h boolNDArray.h
 #
-x ui64nda i8 CL NONE NONE boolMatrix.h boolNDArray.h
-x ui64nda ui8 CL NONE NONE boolMatrix.h boolNDArray.h
-x ui64nda i16 CL NONE NONE boolMatrix.h boolNDArray.h
-x ui64nda ui16 CL NONE NONE boolMatrix.h boolNDArray.h
-x ui64nda i32 CL NONE NONE boolMatrix.h boolNDArray.h
-x ui64nda ui32 CL NONE NONE boolMatrix.h boolNDArray.h
-x ui64nda i64 CL NONE NONE boolMatrix.h boolNDArray.h
+x ui64nda i8 CL boolMatrix.h boolNDArray.h
+x ui64nda ui8 CL boolMatrix.h boolNDArray.h
+x ui64nda i16 CL boolMatrix.h boolNDArray.h
+x ui64nda ui16 CL boolMatrix.h boolNDArray.h
+x ui64nda i32 CL boolMatrix.h boolNDArray.h
+x ui64nda ui32 CL boolMatrix.h boolNDArray.h
+x ui64nda i64 CL boolMatrix.h boolNDArray.h
 #
-x i8 ui8nda CL NONE NONE boolMatrix.h boolNDArray.h
-x i8 i16nda CL NONE NONE boolMatrix.h boolNDArray.h
-x i8 ui16nda CL NONE NONE boolMatrix.h boolNDArray.h
-x i8 i32nda CL NONE NONE boolMatrix.h boolNDArray.h
-x i8 ui32nda CL NONE NONE boolMatrix.h boolNDArray.h
-x i8 i64nda CL NONE NONE boolMatrix.h boolNDArray.h
-x i8 ui64nda CL NONE NONE boolMatrix.h boolNDArray.h
+x i8 ui8nda CL boolMatrix.h boolNDArray.h
+x i8 i16nda CL boolMatrix.h boolNDArray.h
+x i8 ui16nda CL boolMatrix.h boolNDArray.h
+x i8 i32nda CL boolMatrix.h boolNDArray.h
+x i8 ui32nda CL boolMatrix.h boolNDArray.h
+x i8 i64nda CL boolMatrix.h boolNDArray.h
+x i8 ui64nda CL boolMatrix.h boolNDArray.h
 #
-x i16 i8nda CL NONE NONE boolMatrix.h boolNDArray.h
-x i16 ui8nda CL NONE NONE boolMatrix.h boolNDArray.h
-x i16 ui16nda CL NONE NONE boolMatrix.h boolNDArray.h
-x i16 i32nda CL NONE NONE boolMatrix.h boolNDArray.h
-x i16 ui32nda CL NONE NONE boolMatrix.h boolNDArray.h
-x i16 i64nda CL NONE NONE boolMatrix.h boolNDArray.h
-x i16 ui64nda CL NONE NONE boolMatrix.h boolNDArray.h
+x i16 i8nda CL boolMatrix.h boolNDArray.h
+x i16 ui8nda CL boolMatrix.h boolNDArray.h
+x i16 ui16nda CL boolMatrix.h boolNDArray.h
+x i16 i32nda CL boolMatrix.h boolNDArray.h
+x i16 ui32nda CL boolMatrix.h boolNDArray.h
+x i16 i64nda CL boolMatrix.h boolNDArray.h
+x i16 ui64nda CL boolMatrix.h boolNDArray.h
 #
-x i32 i8nda CL NONE NONE boolMatrix.h boolNDArray.h
-x i32 ui8nda CL NONE NONE boolMatrix.h boolNDArray.h
-x i32 i16nda CL NONE NONE boolMatrix.h boolNDArray.h
-x i32 ui16nda CL NONE NONE boolMatrix.h boolNDArray.h
-x i32 ui32nda CL NONE NONE boolMatrix.h boolNDArray.h
-x i32 i64nda CL NONE NONE boolMatrix.h boolNDArray.h
-x i32 ui64nda CL NONE NONE boolMatrix.h boolNDArray.h
+x i32 i8nda CL boolMatrix.h boolNDArray.h
+x i32 ui8nda CL boolMatrix.h boolNDArray.h
+x i32 i16nda CL boolMatrix.h boolNDArray.h
+x i32 ui16nda CL boolMatrix.h boolNDArray.h
+x i32 ui32nda CL boolMatrix.h boolNDArray.h
+x i32 i64nda CL boolMatrix.h boolNDArray.h
+x i32 ui64nda CL boolMatrix.h boolNDArray.h
 #
-x i64 i8nda CL NONE NONE boolMatrix.h boolNDArray.h
-x i64 ui8nda CL NONE NONE boolMatrix.h boolNDArray.h
-x i64 i16nda CL NONE NONE boolMatrix.h boolNDArray.h
-x i64 ui16nda CL NONE NONE boolMatrix.h boolNDArray.h
-x i64 i32nda CL NONE NONE boolMatrix.h boolNDArray.h
-x i64 ui32nda CL NONE NONE boolMatrix.h boolNDArray.h
-x i64 ui64nda CL NONE NONE boolMatrix.h boolNDArray.h
+x i64 i8nda CL boolMatrix.h boolNDArray.h
+x i64 ui8nda CL boolMatrix.h boolNDArray.h
+x i64 i16nda CL boolMatrix.h boolNDArray.h
+x i64 ui16nda CL boolMatrix.h boolNDArray.h
+x i64 i32nda CL boolMatrix.h boolNDArray.h
+x i64 ui32nda CL boolMatrix.h boolNDArray.h
+x i64 ui64nda CL boolMatrix.h boolNDArray.h
 #
-x ui8 i8nda CL NONE NONE boolMatrix.h boolNDArray.h
-x ui8 i16nda CL NONE NONE boolMatrix.h boolNDArray.h
-x ui8 ui16nda CL NONE NONE boolMatrix.h boolNDArray.h
-x ui8 i32nda CL NONE NONE boolMatrix.h boolNDArray.h
-x ui8 ui32nda CL NONE NONE boolMatrix.h boolNDArray.h
-x ui8 i64nda CL NONE NONE boolMatrix.h boolNDArray.h
-x ui8 ui64nda CL NONE NONE boolMatrix.h boolNDArray.h
+x ui8 i8nda CL boolMatrix.h boolNDArray.h
+x ui8 i16nda CL boolMatrix.h boolNDArray.h
+x ui8 ui16nda CL boolMatrix.h boolNDArray.h
+x ui8 i32nda CL boolMatrix.h boolNDArray.h
+x ui8 ui32nda CL boolMatrix.h boolNDArray.h
+x ui8 i64nda CL boolMatrix.h boolNDArray.h
+x ui8 ui64nda CL boolMatrix.h boolNDArray.h
 #
-x ui16 i8nda CL NONE NONE boolMatrix.h boolNDArray.h
-x ui16 ui8nda CL NONE NONE boolMatrix.h boolNDArray.h
-x ui16 i16nda CL NONE NONE boolMatrix.h boolNDArray.h
-x ui16 i32nda CL NONE NONE boolMatrix.h boolNDArray.h
-x ui16 ui32nda CL NONE NONE boolMatrix.h boolNDArray.h
-x ui16 i64nda CL NONE NONE boolMatrix.h boolNDArray.h
-x ui16 ui64nda CL NONE NONE boolMatrix.h boolNDArray.h
+x ui16 i8nda CL boolMatrix.h boolNDArray.h
+x ui16 ui8nda CL boolMatrix.h boolNDArray.h
+x ui16 i16nda CL boolMatrix.h boolNDArray.h
+x ui16 i32nda CL boolMatrix.h boolNDArray.h
+x ui16 ui32nda CL boolMatrix.h boolNDArray.h
+x ui16 i64nda CL boolMatrix.h boolNDArray.h
+x ui16 ui64nda CL boolMatrix.h boolNDArray.h
 #
-x ui32 i8nda CL NONE NONE boolMatrix.h boolNDArray.h
-x ui32 ui8nda CL NONE NONE boolMatrix.h boolNDArray.h
-x ui32 i16nda CL NONE NONE boolMatrix.h boolNDArray.h
-x ui32 ui16nda CL NONE NONE boolMatrix.h boolNDArray.h
-x ui32 i32nda CL NONE NONE boolMatrix.h boolNDArray.h
-x ui32 i64nda CL NONE NONE boolMatrix.h boolNDArray.h
-x ui32 ui64nda CL NONE NONE boolMatrix.h boolNDArray.h
+x ui32 i8nda CL boolMatrix.h boolNDArray.h
+x ui32 ui8nda CL boolMatrix.h boolNDArray.h
+x ui32 i16nda CL boolMatrix.h boolNDArray.h
+x ui32 ui16nda CL boolMatrix.h boolNDArray.h
+x ui32 i32nda CL boolMatrix.h boolNDArray.h
+x ui32 i64nda CL boolMatrix.h boolNDArray.h
+x ui32 ui64nda CL boolMatrix.h boolNDArray.h
 #
-x ui64 i8nda CL NONE NONE boolMatrix.h boolNDArray.h
-x ui64 ui8nda CL NONE NONE boolMatrix.h boolNDArray.h
-x ui64 i16nda CL NONE NONE boolMatrix.h boolNDArray.h
-x ui64 ui16nda CL NONE NONE boolMatrix.h boolNDArray.h
-x ui64 i32nda CL NONE NONE boolMatrix.h boolNDArray.h
-x ui64 ui32nda CL NONE NONE boolMatrix.h boolNDArray.h
-x ui64 i64nda CL NONE NONE boolMatrix.h boolNDArray.h
+x ui64 i8nda CL boolMatrix.h boolNDArray.h
+x ui64 ui8nda CL boolMatrix.h boolNDArray.h
+x ui64 i16nda CL boolMatrix.h boolNDArray.h
+x ui64 ui16nda CL boolMatrix.h boolNDArray.h
+x ui64 i32nda CL boolMatrix.h boolNDArray.h
+x ui64 ui32nda CL boolMatrix.h boolNDArray.h
+x ui64 i64nda CL boolMatrix.h boolNDArray.h
 #
-x i8nda ui8nda CL NONE NONE boolMatrix.h boolNDArray.h
-x i8nda i16nda CL NONE NONE boolMatrix.h boolNDArray.h
-x i8nda ui16nda CL NONE NONE boolMatrix.h boolNDArray.h
-x i8nda i32nda CL NONE NONE boolMatrix.h boolNDArray.h
-x i8nda ui32nda CL NONE NONE boolMatrix.h boolNDArray.h
-x i8nda i64nda CL NONE NONE boolMatrix.h boolNDArray.h
-x i8nda ui64nda CL NONE NONE boolMatrix.h boolNDArray.h
+x i8nda ui8nda CL boolMatrix.h boolNDArray.h
+x i8nda i16nda CL boolMatrix.h boolNDArray.h
+x i8nda ui16nda CL boolMatrix.h boolNDArray.h
+x i8nda i32nda CL boolMatrix.h boolNDArray.h
+x i8nda ui32nda CL boolMatrix.h boolNDArray.h
+x i8nda i64nda CL boolMatrix.h boolNDArray.h
+x i8nda ui64nda CL boolMatrix.h boolNDArray.h
 #
-x i16nda i8nda CL NONE NONE boolMatrix.h boolNDArray.h
-x i16nda ui8nda CL NONE NONE boolMatrix.h boolNDArray.h
-x i16nda ui16nda CL NONE NONE boolMatrix.h boolNDArray.h
-x i16nda i32nda CL NONE NONE boolMatrix.h boolNDArray.h
-x i16nda ui32nda CL NONE NONE boolMatrix.h boolNDArray.h
-x i16nda i64nda CL NONE NONE boolMatrix.h boolNDArray.h
-x i16nda ui64nda CL NONE NONE boolMatrix.h boolNDArray.h
+x i16nda i8nda CL boolMatrix.h boolNDArray.h
+x i16nda ui8nda CL boolMatrix.h boolNDArray.h
+x i16nda ui16nda CL boolMatrix.h boolNDArray.h
+x i16nda i32nda CL boolMatrix.h boolNDArray.h
+x i16nda ui32nda CL boolMatrix.h boolNDArray.h
+x i16nda i64nda CL boolMatrix.h boolNDArray.h
+x i16nda ui64nda CL boolMatrix.h boolNDArray.h
 #
-x i32nda i8nda CL NONE NONE boolMatrix.h boolNDArray.h
-x i32nda ui8nda CL NONE NONE boolMatrix.h boolNDArray.h
-x i32nda i16nda CL NONE NONE boolMatrix.h boolNDArray.h
-x i32nda ui16nda CL NONE NONE boolMatrix.h boolNDArray.h
-x i32nda ui32nda CL NONE NONE boolMatrix.h boolNDArray.h
-x i32nda i64nda CL NONE NONE boolMatrix.h boolNDArray.h
-x i32nda ui64nda CL NONE NONE boolMatrix.h boolNDArray.h
+x i32nda i8nda CL boolMatrix.h boolNDArray.h
+x i32nda ui8nda CL boolMatrix.h boolNDArray.h
+x i32nda i16nda CL boolMatrix.h boolNDArray.h
+x i32nda ui16nda CL boolMatrix.h boolNDArray.h
+x i32nda ui32nda CL boolMatrix.h boolNDArray.h
+x i32nda i64nda CL boolMatrix.h boolNDArray.h
+x i32nda ui64nda CL boolMatrix.h boolNDArray.h
 #
-x i64nda i8nda CL NONE NONE boolMatrix.h boolNDArray.h
-x i64nda ui8nda CL NONE NONE boolMatrix.h boolNDArray.h
-x i64nda i16nda CL NONE NONE boolMatrix.h boolNDArray.h
-x i64nda ui16nda CL NONE NONE boolMatrix.h boolNDArray.h
-x i64nda i32nda CL NONE NONE boolMatrix.h boolNDArray.h
-x i64nda ui32nda CL NONE NONE boolMatrix.h boolNDArray.h
-x i64nda ui64nda CL NONE NONE boolMatrix.h boolNDArray.h
+x i64nda i8nda CL boolMatrix.h boolNDArray.h
+x i64nda ui8nda CL boolMatrix.h boolNDArray.h
+x i64nda i16nda CL boolMatrix.h boolNDArray.h
+x i64nda ui16nda CL boolMatrix.h boolNDArray.h
+x i64nda i32nda CL boolMatrix.h boolNDArray.h
+x i64nda ui32nda CL boolMatrix.h boolNDArray.h
+x i64nda ui64nda CL boolMatrix.h boolNDArray.h
 #
-x ui8nda i8nda CL NONE NONE boolMatrix.h boolNDArray.h
-x ui8nda i16nda CL NONE NONE boolMatrix.h boolNDArray.h
-x ui8nda ui16nda CL NONE NONE boolMatrix.h boolNDArray.h
-x ui8nda i32nda CL NONE NONE boolMatrix.h boolNDArray.h
-x ui8nda ui32nda CL NONE NONE boolMatrix.h boolNDArray.h
-x ui8nda i64nda CL NONE NONE boolMatrix.h boolNDArray.h
-x ui8nda ui64nda CL NONE NONE boolMatrix.h boolNDArray.h
+x ui8nda i8nda CL boolMatrix.h boolNDArray.h
+x ui8nda i16nda CL boolMatrix.h boolNDArray.h
+x ui8nda ui16nda CL boolMatrix.h boolNDArray.h
+x ui8nda i32nda CL boolMatrix.h boolNDArray.h
+x ui8nda ui32nda CL boolMatrix.h boolNDArray.h
+x ui8nda i64nda CL boolMatrix.h boolNDArray.h
+x ui8nda ui64nda CL boolMatrix.h boolNDArray.h
 #
-x ui16nda i8nda CL NONE NONE boolMatrix.h boolNDArray.h
-x ui16nda ui8nda CL NONE NONE boolMatrix.h boolNDArray.h
-x ui16nda i16nda CL NONE NONE boolMatrix.h boolNDArray.h
-x ui16nda i32nda CL NONE NONE boolMatrix.h boolNDArray.h
-x ui16nda ui32nda CL NONE NONE boolMatrix.h boolNDArray.h
-x ui16nda i64nda CL NONE NONE boolMatrix.h boolNDArray.h
-x ui16nda ui64nda CL NONE NONE boolMatrix.h boolNDArray.h
+x ui16nda i8nda CL boolMatrix.h boolNDArray.h
+x ui16nda ui8nda CL boolMatrix.h boolNDArray.h
+x ui16nda i16nda CL boolMatrix.h boolNDArray.h
+x ui16nda i32nda CL boolMatrix.h boolNDArray.h
+x ui16nda ui32nda CL boolMatrix.h boolNDArray.h
+x ui16nda i64nda CL boolMatrix.h boolNDArray.h
+x ui16nda ui64nda CL boolMatrix.h boolNDArray.h
 #
-x ui32nda i8nda CL NONE NONE boolMatrix.h boolNDArray.h
-x ui32nda ui8nda CL NONE NONE boolMatrix.h boolNDArray.h
-x ui32nda i16nda CL NONE NONE boolMatrix.h boolNDArray.h
-x ui32nda ui16nda CL NONE NONE boolMatrix.h boolNDArray.h
-x ui32nda i32nda CL NONE NONE boolMatrix.h boolNDArray.h
-x ui32nda i64nda CL NONE NONE boolMatrix.h boolNDArray.h
-x ui32nda ui64nda CL NONE NONE boolMatrix.h boolNDArray.h
+x ui32nda i8nda CL boolMatrix.h boolNDArray.h
+x ui32nda ui8nda CL boolMatrix.h boolNDArray.h
+x ui32nda i16nda CL boolMatrix.h boolNDArray.h
+x ui32nda ui16nda CL boolMatrix.h boolNDArray.h
+x ui32nda i32nda CL boolMatrix.h boolNDArray.h
+x ui32nda i64nda CL boolMatrix.h boolNDArray.h
+x ui32nda ui64nda CL boolMatrix.h boolNDArray.h
 #
-x ui64nda i8nda CL NONE NONE boolMatrix.h boolNDArray.h
-x ui64nda ui8nda CL NONE NONE boolMatrix.h boolNDArray.h
-x ui64nda i16nda CL NONE NONE boolMatrix.h boolNDArray.h
-x ui64nda ui16nda CL NONE NONE boolMatrix.h boolNDArray.h
-x ui64nda i32nda CL NONE NONE boolMatrix.h boolNDArray.h
-x ui64nda ui32nda CL NONE NONE boolMatrix.h boolNDArray.h
-x ui64nda i64nda CL NONE NONE boolMatrix.h boolNDArray.h
+x ui64nda i8nda CL boolMatrix.h boolNDArray.h
+x ui64nda ui8nda CL boolMatrix.h boolNDArray.h
+x ui64nda i16nda CL boolMatrix.h boolNDArray.h
+x ui64nda ui16nda CL boolMatrix.h boolNDArray.h
+x ui64nda i32nda CL boolMatrix.h boolNDArray.h
+x ui64nda ui32nda CL boolMatrix.h boolNDArray.h
+x ui64nda i64nda CL boolMatrix.h boolNDArray.h
diff --git a/liboctave/operators/smx-ops b/liboctave/operators/smx-ops
--- a/liboctave/operators/smx-ops
+++ b/liboctave/operators/smx-ops
@@ -36,33 +36,33 @@ b bool S NONE NO false
 bm boolMatrix M boolMatrix.h YES false
 s double S NONE NO 0.0
 cs Complex S oct-cmplx.h NO 0.0
 m Matrix M dMatrix.h YES 0.0
 cm ComplexMatrix M CMatrix.h YES 0.0
 #
 # sparse-matrix operators
 #
-# result_t_1 result_t_2 lhs_t rhs_t op-type lhs_conv rhs_conv headers ...
+# result_t_1 result_t_2 lhs_t rhs_t op-type headers ...
 #
 # op-type is one of
 #
 #   B: binary ops, + - * /
 #   C: comparison ops, < <= == != >= >
 #   E: == != (Only one of C or E can be used!!)
 #   L: logical ops, & |
 #
-cm scm sm cs BCL NONE real boolSparse.h
-cm scm cs sm BCL real NONE boolSparse.h
-cm scm scm s BCL real NONE boolSparse.h
-cm scm s scm BCL NONE real boolSparse.h
-scm scm scm sm BCL real NONE boolSparse.h
-scm scm sm scm BCL NONE real boolSparse.h
-m sm m sm BCL NONE NONE boolSparse.h
-cm scm m scm BCL NONE real boolSparse.h
-cm scm cm sm BCL real NONE boolSparse.h
-cm scm cm scm BCL real real boolSparse.h
-m sm sm m BCL NONE NONE boolSparse.h
-cm scm scm m BCL real NONE boolSparse.h
-cm scm sm cm BCL NONE real boolSparse.h
-cm scm scm cm BCL real real boolSparse.h
+cm scm sm cs BCL boolSparse.h
+cm scm cs sm BCL boolSparse.h
+cm scm scm s BCL boolSparse.h
+cm scm s scm BCL boolSparse.h
+scm scm scm sm BCL boolSparse.h
+scm scm sm scm BCL boolSparse.h
+m sm m sm BCL boolSparse.h
+cm scm m scm BCL boolSparse.h
+cm scm cm sm BCL boolSparse.h
+cm scm cm scm BCL boolSparse.h
+m sm sm m BCL boolSparse.h
+cm scm scm m BCL boolSparse.h
+cm scm sm cm BCL boolSparse.h
+cm scm scm cm BCL boolSparse.h
 bm sbm bm sbm EL
 bm sbm sbm bm EL
