# HG changeset patch
# User Torsten <ttl@justmail.de>
# Date 1393966707 -3600
#      Tue Mar 04 21:58:27 2014 +0100
# Branch stable
# Node ID 17baa684892c1cd7adcb8d740afd1f6966c48d19
# Parent  e0cc67d5a462ef71b1a73358b5bdbd449e436a56
fix flashing while debuggung and editor is tabbed behind console (bug #41757)

* file-editor.cc (is_editor_console_tabbed): new function returning true
  if editor is tabbed together with console;
  (request_open_file): do not give focus to editor if debug pointer or
  breakpoint marker is added and editor is tabbed with console

* file-editor.h: new function is_editor_console_tabbed

* main-window.h: new function get_dock_widget_list () returning the internal
  list of all dock widgets

diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -36,16 +36,17 @@ along with Octave; see the file COPYING.
 #include <QMessageBox>
 #include <QStyle>
 #include <QTextStream>
 #include <QProcess>
 #include <QInputDialog>
 
 #include "octave-link.h"
 #include "utils.h"
+#include "main-window.h"
 
 file_editor::file_editor (QWidget *p)
   : file_editor_interface (p)
 {
   // Set current editing directory before construct because loaded
   // files will change ced accordingly.
   ced = QDir::currentPath ();
 
@@ -259,16 +260,33 @@ file_editor::call_custom_editor (const Q
         handle_mru_add_file (QFileInfo (file_name).canonicalFilePath ());
 
       return true;
     }
 
   return false;
 }
 
+bool
+file_editor::is_editor_console_tabbed ()
+{
+  main_window *w = static_cast<main_window *>(main_win ());
+  QList<QDockWidget *> w_list = w->tabifiedDockWidgets (this);
+  QDockWidget *console =
+    static_cast<QDockWidget *> (w->get_dock_widget_list ().at (0));
+
+  for (int i = 0; i < w_list.count (); i++)
+    {
+      if (w_list.at (i) == console)
+        return true;
+    }
+
+  return false;
+}
+
 void
 file_editor::request_open_file (const QString& openFileName, int line,
                                 bool debug_pointer,
                                 bool breakpoint_marker, bool insert)
 {
   if (call_custom_editor (openFileName, line))
     return;   // custom editor called
 
@@ -297,18 +315,21 @@ file_editor::request_open_file (const QS
 
               if (debug_pointer)
                 emit fetab_insert_debugger_pointer (tab, line);
 
               if (breakpoint_marker)
                 emit fetab_do_breakpoint_marker (insert, tab, line);
             }
 
-          emit fetab_set_focus (tab);
-          set_focus ();
+          if (! ((breakpoint_marker || debug_pointer) && is_editor_console_tabbed ()))
+            {
+              emit fetab_set_focus (tab);
+              set_focus ();
+            }
         }
       else
         {
           file_editor_tab *fileEditorTab = new file_editor_tab ();
           if (fileEditorTab)
             {
               QString result = fileEditorTab->load_file (openFileName);
               if (result == "")
@@ -397,19 +418,22 @@ file_editor::request_open_file (const QS
                               file.close ();
                               request_open_file (openFileName);
                             }
                         }
                     }
                 }
             }
 
-          // really show editor and the current editor tab
-          set_focus ();
-          emit file_loaded_signal ();
+          if (! ((breakpoint_marker || debug_pointer) && is_editor_console_tabbed ()))
+            {
+              // really show editor and the current editor tab
+              set_focus ();
+              emit file_loaded_signal ();
+            }
         }
     }
 }
 
 // open a file from the mru list
 void
 file_editor::request_mru_open_file (QAction *action)
 {
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -177,16 +177,17 @@ private slots:
                           bool debug_pointer = false,
                           bool breakpoint_marker = false, bool insert = true);
   void request_preferences (bool);
   void request_styles_preferences (bool);
   void restore_create_file_setting ();
 
 private:
 
+  bool is_editor_console_tabbed ();
   void construct (void);
   void add_file_editor_tab (file_editor_tab *f, const QString& fn);
   void save_file_as (QWidget *fetabID = 0);
   void mru_menu_update (void);
   bool call_custom_editor (const QString& file_name = QString (), int line = -1);
 
   QWidget *find_tab_widget (const QString& openFileName) const;
 
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -191,16 +191,19 @@ public slots:
 
   // setting global shortcuts
   void set_global_shortcuts (bool enable);
 
   // handling the clipboard
   void clipboard_has_changed (QClipboard::Mode);
   void clear_clipboard ();
 
+  // get the dockwidgets
+  QList<octave_dock_widget *> get_dock_widget_list ()
+    { return dock_widget_list (); }
 
 protected:
   void closeEvent (QCloseEvent * closeEvent);
 
 private:
 
   void construct (void);
 
