# HG changeset patch
# User jwe
# Date 1175753610 0
#      Thu Apr 05 06:13:30 2007 +0000
# Node ID bcfdc9f0d2670910b7b42ad0fff3a524ba2e1d93
# Parent  95e9ba7cb502c3f9d6a20ea623b495414c6a099d
[project @ 2007-04-05 06:13:30 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2007-04-05  John W. Eaton  <jwe@octave.org>
+
+	* oct-stream.cc (DO_DOUBLE_CONV): New macro.
+	(do_printf): Use it.
+
 2007-04-04  John W. Eaton  <jwe@octave.org>
 
 	* input.cc (octave_yes_or_no): Force interactive_input to use readline.
 
 	* octave.cc (execute_eval_option_code): Catch bad::alloc here.
 
 2007-04-03  John W. Eaton  <jwe@octave.org>
 
diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -2474,16 +2474,55 @@ do_printf_conv (std::ostream&, const cha
 template int
 do_printf_conv (std::ostream&, const char*, int, int, int, double,
 		const std::string&);
 
 template int
 do_printf_conv (std::ostream&, const char*, int, int, int, const char*,
 		const std::string&);
 
+#define DO_DOUBLE_CONV(TQUAL) \
+  do \
+    { \
+      if (elt->modifier == 'l') \
+	{ \
+	  if (val > std::numeric_limits<TQUAL long>::max () \
+	      || val < std::numeric_limits<TQUAL long>::min ()) \
+	    { \
+	      std::string tfmt = fmt; \
+ \
+	      tfmt.replace (tfmt.rfind (elt->type), 1, ".f"); \
+	      tfmt.replace (tfmt.rfind (elt->modifier), 1, ""); \
+ \
+	      retval += do_printf_conv (os, tfmt.c_str (), nsa, sa_1, sa_2, \
+					val, who); \
+	    } \
+	  else \
+	    retval += do_printf_conv (os, fmt, nsa, sa_1, sa_2, \
+				      static_cast<TQUAL long> (val), who); \
+	} \
+      else \
+	{ \
+	  if (val > std::numeric_limits<TQUAL int>::max () \
+	      || val < std::numeric_limits<TQUAL int>::min ()) \
+	    { \
+	      std::string tfmt = fmt; \
+ \
+	      tfmt.replace (tfmt.rfind (elt->type), 1, ".f"); \
+ \
+	      retval += do_printf_conv (os, tfmt.c_str (), nsa, sa_1, sa_2, \
+					val, who); \
+	    } \
+	  else \
+	    retval += do_printf_conv (os, fmt, nsa, sa_1, sa_2, \
+				      static_cast<TQUAL int> (val), who); \
+	} \
+    } \
+  while (0)
+
 int
 octave_base_stream::do_printf (printf_format_list& fmt_list,
 			       const octave_value_list& args,
 			       const std::string& who)
 {
   int retval = 0;
 
   int nconv = fmt_list.num_conversions ();
@@ -2552,78 +2591,42 @@ octave_base_stream::do_printf (printf_fo
 		    break;
 		}
 	      else
 		{
 		  double val = val_cache.double_value ();
 
 		  if (val_cache)
 		    {
-		      if (lo_ieee_isnan (val) || xisinf (val)
-			  || ((val > INT_MAX || val < INT_MIN)
-			      && (elt->type == 'd'
-				  || elt->type == 'i'
-				  || elt->type == 'c'
-				  || elt->type == 'o'
-				  || elt->type == 'x'
-				  || elt->type == 'X'
-				  || elt->type == 'u')))
+		      if (lo_ieee_isnan (val) || xisinf (val))
 			{
 			  std::string tfmt = fmt;
 
-			  if (lo_ieee_isnan (val) || xisinf (val))
-			    {
-			      tfmt.replace (tfmt.rfind (elt->type), 1, 1, 's');
-
-			      const char *tval = xisinf (val)
-				? (val < 0 ? "-Inf" : "Inf")
-				: (lo_ieee_is_NA (val) ? "NA" : "NaN");
-
-			      retval += do_printf_conv (os, tfmt.c_str (),
-							nsa, sa_1, sa_2,
-							tval, who);
-			    }
-			  else
-			    {
-			      tfmt.replace (tfmt.rfind (elt->type), 1, ".f");
-
-			      retval += do_printf_conv (os, tfmt.c_str (),
-							nsa, sa_1, sa_2,
-							val, who);
-			    }
+			  tfmt.replace (tfmt.rfind (elt->type), 1, 1, 's');
+
+			  const char *tval = xisinf (val)
+			    ? (val < 0 ? "-Inf" : "Inf")
+			    : (lo_ieee_is_NA (val) ? "NA" : "NaN");
+
+			  retval += do_printf_conv (os, tfmt.c_str (),
+						    nsa, sa_1, sa_2,
+						    tval, who);
 			}
 		      else
 			{
-			  switch (elt->type)
+			  char type = elt->type;
+
+			  switch (type)
 			    {
 			    case 'd': case 'i': case 'c':
-			      {
-				if (elt->modifier == 'l')
-				  retval += do_printf_conv
-				    (os, fmt, nsa, sa_1, sa_2,
-				     static_cast<long int> (val), who);
-				else
-				  retval += do_printf_conv
-				    (os, fmt, nsa, sa_1, sa_2,
-				     static_cast<int> (val), who);
-			      }
+			      DO_DOUBLE_CONV ( );
 			      break;
 
 			    case 'o': case 'x': case 'X': case 'u':
-			      {
-				if (elt->modifier == 'l')
-				  retval += do_printf_conv
-				    (os, fmt, nsa, sa_1, sa_2,
-				     static_cast<unsigned long int> (val),
-				     who);
-				else
-				  retval += do_printf_conv
-				    (os, fmt, nsa, sa_1, sa_2,
-				     static_cast<unsigned int> (val), who);
-			      }
+			      DO_DOUBLE_CONV (unsigned);
 			      break;
 
 			    case 'f': case 'e': case 'E':
 			    case 'g': case 'G':
 			      retval
 				+= do_printf_conv (os, fmt, nsa, sa_1, sa_2,
 						   val, who);
 			      break;
