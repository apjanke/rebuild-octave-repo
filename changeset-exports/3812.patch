# HG changeset patch
# User jwe
# Date 987619432 0
#      Wed Apr 18 18:43:52 2001 +0000
# Node ID 23994b10c8b7a133e3d4c46ec7cd7116464d9692
# Parent  855bf76e1fe16b38e3c373b0564ae2fe0ce72569
[project @ 2001-04-18 18:43:51 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2001-04-18  Mumit Khan  <khan@nanotech.wisc.edu>
+
+	* load-save.cc (read_mat5_binary_element): Cast arguments to the
+	correct type when adding stream positions.
+	* DLD-FUNCTIONS/det.cc (det): Explicity create a Complex value to
+	work around a Sun C++ type conversion bug.
+
 2001-04-17  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* symtab.cc (define_builtin_const): Don't call replace_all_defs
 	here.
 
 	* error.cc (error_message_buffer): Now static.
 	* error.h (error_message_buffer): Delete extern declaration.
 
diff --git a/src/DLD-FUNCTIONS/det.cc b/src/DLD-FUNCTIONS/det.cc
--- a/src/DLD-FUNCTIONS/det.cc
+++ b/src/DLD-FUNCTIONS/det.cc
@@ -99,17 +99,17 @@ of the reciprocal condition number if re
 	  int info;
 	  double rcond = 0.0;
 
 	  ComplexDET det = m.determinant (info, rcond);
 
 	  if (nargout > 1)
 	    retval(1) = rcond;
 
-	  retval(0) = (info == -1 ? 0.0 : det.value ());
+	  retval(0) = (info == -1 ? Complex (0.0) : det.value ());
 	}
     }
   else
     {
       gripe_wrong_type_arg ("det", arg);
     }
 
   return retval;
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -2540,17 +2540,17 @@ read_mat5_binary_element (std::istream& 
 
     pos = is.tellg ();
     read_int (is, swap, nr);
     read_int (is, swap, nc);
     re.resize (nr, nc);
 
     // delay checking for a multidimensional array until we have read
     // the variable name
-    is.seekg (pos + dimension_length);
+    is.seekg (pos + static_cast<std::streamoff> (dimension_length));
   }
 
   // array name subelement
   {
     std::streampos pos;
       
     if (read_mat5_tag (is, swap, type, len) || type != miINT8)
       {
@@ -2562,17 +2562,17 @@ read_mat5_binary_element (std::istream& 
     name = new char[len+1];
 
     if (len)			// structure field subelements have
 				// zero-length array name subelements
       {
 	if (! is.read (X_CAST (char *, name), len ))
 	  goto data_read_error;
 	
-	is.seekg (pos + PAD (len));
+	is.seekg (pos + static_cast<std::streamoff> (PAD (len)));
       }
 
     name[len] = '\0';
   }  
 
   if (dimension_length != 8)
     {
       error ("load: multidimension arrays are not implemented");
@@ -2677,17 +2677,17 @@ read_mat5_binary_element (std::istream& 
 			       (enum mat5_data_type) type, flt_fmt);
 
 	if (! is || error_state)
 	  {
 	    error ("load: reading matrix data for `%s'", name);
 	    goto data_read_error;
 	  }
 
-	is.seekg (pos + PAD (len));
+	is.seekg (pos + static_cast<std::streamoff> (PAD (len)));
       }
       
       // imaginary data subelement
       if (imag)
 	{
 	  Matrix im (nr, nc);
 	  
 	  if (read_mat5_tag (is, swap, type, len))
@@ -2715,31 +2715,31 @@ read_mat5_binary_element (std::istream& 
 	}
       else
 	tc = re;
 
       if (arrayclass == mxCHAR_CLASS)
 	tc = tc.convert_to_str ();
     }
 
-  is.seekg (pos + element_length);
+  is.seekg (pos + static_cast<std::streamoff> (element_length));
 
   return name;
 
  data_read_error:
   delete [] name;
 
  early_read_error:
   error ("load: trouble reading binary file `%s'", filename.c_str ());
   return 0;
 
  skip_ahead:
   warning ("      skipping over `%s'", name);
   delete [] name;
-  is.seekg (pos + element_length);
+  is.seekg (pos + static_cast<std::streamoff> (element_length));
   return read_mat5_binary_element (is, filename, swap, global, tc);
 }
 
 static int
 read_mat5_binary_file_header (std::istream& is, bool& swap,
 			      bool quiet = false)
 {
   TWO_BYTE_INT version=0, magic=0;
