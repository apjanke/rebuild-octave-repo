# HG changeset patch
# User Rik <rik@octave.org>
# Date 1533857589 25200
#      Thu Aug 09 16:33:09 2018 -0700
# Node ID 826b45c1c4275ad15060736ee6f1a3f9d5cd8ba3
# Parent  8dc8edbffa17405b82abd7d7e60714e7418c1043
textread.m: Make m-file a legacy function.

* NEWS: Announce change.

* scripts/legacy/module.mk, scripts/io/module.mk: Move findstr.m
from io/ dir to legacy/ dir.

* textread.m: Add Octave:legacy-function warning at top of function.
Change docstring to note that this function is obsolete.  Add an initial
BIST test to trigger legacy-function warning which is then suppressed.

* dlmread.cc (Fdlmread): Remove textread from @seealso list.

* csvread.m, fileread.m: Remove textread from @seealso list.

* debug.cc (Fdbstop): Change documentation to use an example in axis.m rather
than textread.m

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -78,16 +78,17 @@ Summary of important user-visible change
       ---------------------|------------------
       findstr              | strfind
       flipdim              | flip
       isequalwithequalnans | isequaln
       isstr                | ischar
       setstr               | char
       strmatch             | strncmp or strcmp
       strread              | textscan
+      textread             | textscan
 
  ** Deprecated functions.
 
     The following functions have been deprecated in Octave 5.0 and will
     be removed from Octave 7 (or whatever version is the second major
     release after 5.0):
 
       Function             | Replacement
diff --git a/libinterp/corefcn/dlmread.cc b/libinterp/corefcn/dlmread.cc
--- a/libinterp/corefcn/dlmread.cc
+++ b/libinterp/corefcn/dlmread.cc
@@ -187,17 +187,17 @@ lowest alphabetical index @qcode{'A'} re
 lowest row index is 1.
 
 @var{file} should be a filename or a file id given by @code{fopen}.  In the
 latter case, the file is read until end of file is reached.
 
 The @qcode{"emptyvalue"} option may be used to specify the value used to
 fill empty fields.  The default is zero.  Note that any non-numeric values,
 such as text, are also replaced by the @qcode{"emptyvalue"}.
-@seealso{csvread, textscan, textread, dlmwrite}
+@seealso{csvread, textscan, dlmwrite}
 @end deftypefn */)
 {
   int nargin = args.length ();
 
   double empty_value = 0.0;
 
   if (nargin > 2 && args(nargin-2).is_string ()
       && args(nargin-2).string_value () == "emptyvalue")
diff --git a/scripts/io/csvread.m b/scripts/io/csvread.m
--- a/scripts/io/csvread.m
+++ b/scripts/io/csvread.m
@@ -27,17 +27,17 @@
 ## This function is equivalent to
 ##
 ## @example
 ## @var{x} = dlmread (@var{filename}, "," , @var{dlm_opt1}, @dots{})
 ## @end example
 ##
 ## Any optional arguments are passed directly to @code{dlmread}
 ## (@pxref{XREFdlmread,,dlmread}).
-## @seealso{dlmread, textread, textscan, csvwrite, dlmwrite}
+## @seealso{dlmread, textscan, csvwrite, dlmwrite}
 ## @end deftypefn
 
 function x = csvread (filename, varargin)
   x = dlmread (filename, ",", varargin{:});
 endfunction
 
 
 ## Tests for csvread() are in csvwrite()
diff --git a/scripts/io/fileread.m b/scripts/io/fileread.m
--- a/scripts/io/fileread.m
+++ b/scripts/io/fileread.m
@@ -14,17 +14,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <https://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {} {@var{str} =} fileread (@var{filename})
 ## Read the contents of @var{filename} and return it as a string.
-## @seealso{fread, textread, sscanf}
+## @seealso{fread, fscanf, importdata, textscan, type}
 ## @end deftypefn
 
 function str = fileread (filename)
 
   if (nargin != 1)
     print_usage ();
   endif
 
diff --git a/scripts/io/module.mk b/scripts/io/module.mk
--- a/scripts/io/module.mk
+++ b/scripts/io/module.mk
@@ -2,18 +2,17 @@ FCN_FILE_DIRS += scripts/io
 
 %canon_reldir%_FCN_FILES = \
   %reldir%/beep.m \
   %reldir%/csvread.m \
   %reldir%/csvwrite.m \
   %reldir%/dlmwrite.m \
   %reldir%/fileread.m \
   %reldir%/importdata.m \
-  %reldir%/is_valid_file_id.m \
-  %reldir%/textread.m
+  %reldir%/is_valid_file_id.m
 
 %canon_reldir%dir = $(fcnfiledir)/io
 
 %canon_reldir%_DATA = $(%canon_reldir%_FCN_FILES)
 
 FCN_FILES += $(%canon_reldir%_FCN_FILES)
 
 PKG_ADD_FILES += %reldir%/PKG_ADD
diff --git a/scripts/legacy/module.mk b/scripts/legacy/module.mk
--- a/scripts/legacy/module.mk
+++ b/scripts/legacy/module.mk
@@ -2,17 +2,18 @@ FCN_FILE_DIRS += scripts/legacy
 
 %canon_reldir%_FCN_FILES = \
   %reldir%/findstr.m \
   %reldir%/flipdim.m \
   %reldir%/isequalwithequalnans.m \
   %reldir%/isstr.m \
   %reldir%/setstr.m \
   %reldir%/strmatch.m \
-  %reldir%/strread.m
+  %reldir%/strread.m \
+  %reldir%/textread.m
 
 %canon_reldir%dir = $(fcnfiledir)/legacy
 
 %canon_reldir%_DATA = $(%canon_reldir%_FCN_FILES)
 
 FCN_FILES += $(%canon_reldir%_FCN_FILES)
 
 PKG_ADD_FILES += %reldir%/PKG_ADD
diff --git a/scripts/io/textread.m b/scripts/legacy/textread.m
rename from scripts/io/textread.m
rename to scripts/legacy/textread.m
--- a/scripts/io/textread.m
+++ b/scripts/legacy/textread.m
@@ -17,16 +17,19 @@
 ## <https://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {} {[@var{a}, @dots{}] =} textread (@var{filename})
 ## @deftypefnx {} {[@var{a}, @dots{}] =} textread (@var{filename}, @var{format})
 ## @deftypefnx {} {[@var{a}, @dots{}] =} textread (@var{filename}, @var{format}, @var{n})
 ## @deftypefnx {} {[@var{a}, @dots{}] =} textread (@var{filename}, @var{format}, @var{prop1}, @var{value1}, @dots{})
 ## @deftypefnx {} {[@var{a}, @dots{}] =} textread (@var{filename}, @var{format}, @var{n}, @var{prop1}, @var{value1}, @dots{})
+##
+## This function is obsolete.  Use @code{textscan} instead.
+##
 ## Read data from a text file.
 ##
 ## The file @var{filename} is read and parsed according to @var{format}.  The
 ## function behaves like @code{strread} except it works by parsing a file
 ## instead of a string.  See the documentation of @code{strread} for details.
 ##
 ## In addition to the options supported by @code{strread}, this function
 ## supports two more:
@@ -100,22 +103,27 @@
 ##   returns a = 1 and b = @{"a"@}; i.e., the format string is used
 ##   only once because the format string refers to 2 lines of the
 ##   data file.  To obtain 2x1 data output columns, specify N = 4
 ##   (number of data lines containing all requested data) rather
 ##   than 2.
 ## @end group
 ## @end example
 ##
-## @seealso{strread, load, dlmread, fscanf, textscan}
+## @seealso{textscan, load, dlmread, fscanf, strread}
 ## @end deftypefn
 
 function varargout = textread (filename, format = "%f", varargin)
 
-  BUFLENGTH = 4096;       # Read buffer to speed up processing @var{n}
+  persistent warned = false;
+  if (! warned)
+    warned = true;
+    warning ("Octave:legacy-function",
+             "textread is obsolete; use textscan instead\n");
+  endif
 
   ## Check input
   if (nargin < 1)
     print_usage ();
   endif
 
   if (! ischar (filename) || ! ischar (format))
     error ("textread: FILENAME and FORMAT arguments must be strings");
@@ -127,16 +135,18 @@ function varargout = textread (filename,
     nlines = Inf;
   endif
   if (nlines < 1)
     printf ("textread: N = 0, no data read\n");
     varargout = cell (1, nargout);
     return;
   endif
 
+  BUFLENGTH = 4096;       # Read buffer to speed up processing @var{n}
+
   ## Read file
   fid = fopen (filename, "r");
   if (fid == -1)
     error ("textread: could not open '%s' for reading", filename);
   endif
 
   ## Skip header lines if requested
   headerlines = find (strcmpi (varargin, "headerlines"), 1);
@@ -285,16 +295,25 @@ function varargout = textread (filename,
     varargout{1} = reshape (varargout{1}, ncols, nrows)';
     ## ML replaces empty values with NaNs
     varargout{1}(find (isnan (varargout{1}))) = 0;
   endif
 
 endfunction
 
 
+## First test is necessary to provoke 1-time legacy warning
+%!test
+%! warning ("off", "Octave:legacy-function", "local");
+%! try
+%!   textread ("");
+%! catch
+%!   ## Nothing to do, just wanted to suppress error.
+%! end_try_catch
+
 %!test
 %! f = tempname ();
 %! d = rand (5, 3);
 %! dlmwrite (f, d, "precision", "%5.2f");
 %! [a, b, c] = textread (f, "%f %f %f", "delimiter", ",", "headerlines", 3);
 %! unlink (f);
 %! assert (a, d(4:5, 1), 1e-2);
 %! assert (b, d(4:5, 2), 1e-2);
