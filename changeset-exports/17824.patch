# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1383330647 14400
#      Fri Nov 01 14:30:47 2013 -0400
# Node ID 86e8dbccf7c7c240905957d879395772e9172909
# Parent  eaf5c3ef3e8dba64a9de257d38a52f19bcdbc651
show when variables are complex in workspace view (bug #40445)

* octave-qt-link.h, octave-qt-link.cc
(octave_qt_link::do_set_workspace,
octave_qt_link::set_workspace_signal):
Pass complex info in set_workspace_signal.
* main-window.cc (main_window::construct_octave_qt_link): Update
set_workspace_signal signal to set_workspace slot connection.
* workspace-model.h, workspace-model.cc (workspace_model::data):
Display whether variables are complex in "Storage Class" column.
(workspace_model::_complex_flags): New data member.
(workspace_model::set_workspace): Store _complex_flags.
(workspace_model::clear_data): Clear _complex_flags.

* workspace-element.h (workspace_element::xcomplex_flags):
New data member.
* symtab.cc (symbol_table::do_workspace_info):
Also stash complex flag.

diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -982,22 +982,22 @@ main_window::construct_octave_qt_link (v
 
   connect (_octave_qt_link, SIGNAL (exit_signal (int)),
            this, SLOT (exit (int)));
 
   connect (_octave_qt_link,
            SIGNAL (set_workspace_signal
                    (bool, const QString&, const QStringList&,
                     const QStringList&, const QStringList&,
-                    const QStringList&)),
+                    const QStringList&, const QIntList&)),
            _workspace_model,
            SLOT (set_workspace
                  (bool, const QString&, const QStringList&,
                   const QStringList&, const QStringList&,
-                  const QStringList&)));
+                  const QStringList&, const QIntList&)));
 
   connect (_octave_qt_link, SIGNAL (clear_workspace_signal ()),
            _workspace_model, SLOT (clear_workspace ()));
 
   connect (_octave_qt_link, SIGNAL (change_directory_signal (QString)),
            this, SLOT (change_directory (QString)));
 
   connect (_octave_qt_link,
diff --git a/libgui/src/octave-qt-link.cc b/libgui/src/octave-qt-link.cc
--- a/libgui/src/octave-qt-link.cc
+++ b/libgui/src/octave-qt-link.cc
@@ -320,29 +320,31 @@ void
 octave_qt_link::do_set_workspace (bool top_level,
                                   const std::list<workspace_element>& ws)
 {
   QString scopes;
   QStringList symbols;
   QStringList class_names;
   QStringList dimensions;
   QStringList values;
+  QIntList complex_flags;
 
   for (std::list<workspace_element>::const_iterator it = ws.begin ();
        it != ws.end (); it++)
     {
       scopes.append (it->scope ());
       symbols.append (QString::fromStdString (it->symbol ()));
       class_names.append (QString::fromStdString (it->class_name ()));
       dimensions.append (QString::fromStdString (it->dimension ()));
       values.append (QString::fromStdString (it->value ()));
+      complex_flags.append (it->complex_flag ());
     }
 
   emit set_workspace_signal (top_level, scopes, symbols, class_names,
-                             dimensions, values);
+                             dimensions, values, complex_flags);
 }
 
 void
 octave_qt_link::do_clear_workspace (void)
 {
   emit clear_workspace_signal ();
 }
 
diff --git a/libgui/src/octave-qt-link.h b/libgui/src/octave-qt-link.h
--- a/libgui/src/octave-qt-link.h
+++ b/libgui/src/octave-qt-link.h
@@ -30,16 +30,19 @@ along with Octave; see the file COPYING.
 
 #include <QList>
 #include <QObject>
 #include <QString>
 
 #include "octave-link.h"
 #include "octave-main-thread.h"
 
+// Defined for purposes of sending QList<int> as part of signal.
+typedef QList<int> QIntList;
+
 // \class OctaveLink
 // \brief Provides threadsafe access to octave.
 // \author Jacob Dawid
 //
 // This class is a wrapper around octave and provides thread safety by
 // buffering access operations to octave and executing them in the
 // readline event hook, which lives in the octave thread.
 
@@ -148,17 +151,18 @@ signals:
 
   void execute_command_in_terminal_signal (const QString& command);
 
   void set_workspace_signal (bool top_level,
                              const QString& scopes,
                              const QStringList& symbols,
                              const QStringList& class_names,
                              const QStringList& dimensions,
-                             const QStringList& values);
+                             const QStringList& values,
+                             const QIntList& complex_flags);
 
   void clear_workspace_signal (void);
 
   void set_history_signal (const QStringList& hist);
   void append_history_signal (const QString& hist_entry);
   void clear_history_signal (void);
 
   void enter_debugger_signal (void);
diff --git a/libgui/src/workspace-model.cc b/libgui/src/workspace-model.cc
--- a/libgui/src/workspace-model.cc
+++ b/libgui/src/workspace-model.cc
@@ -161,26 +161,17 @@ workspace_model::data (const QModelIndex
               retval = QVariant (_dimensions[idx.row ()]);
               break;
 
             case 3:
               retval = QVariant (_values[idx.row ()]);
               break;
 
             case 4:
-              retval = QVariant ();
-              QString class_chars = resource_manager::storage_class_chars ();
-              int actual_class
-                = class_chars.indexOf (_scopes[idx.row ()].toAscii ());
-              if (actual_class >= 0)
-                {
-                  QStringList class_names
-                    = resource_manager::storage_class_names ();
-                  retval = QVariant (class_names.at (actual_class));
-                }
+              retval = QVariant (_complex_flags[idx.row ()] ? "complex" : "");
               break;
 
             }
         }
     }
 
   return retval;
 }
@@ -212,24 +203,26 @@ workspace_model::setData (const QModelIn
 
 
 void
 workspace_model::set_workspace (bool top_level,
                                 const QString& scopes,
                                 const QStringList& symbols,
                                 const QStringList& class_names,
                                 const QStringList& dimensions,
-                                const QStringList& values)
+                                const QStringList& values,
+                                const QIntList& complex_flags)
 {
   _top_level = top_level;
   _scopes = scopes;
   _symbols = symbols;
   _class_names = class_names;
   _dimensions = dimensions;
   _values = values;
+  _complex_flags = complex_flags;
 
   update_table ();
 
   emit model_changed ();
 }
 
 void
 workspace_model::clear_workspace (void)
@@ -244,16 +237,17 @@ void
 workspace_model::clear_data (void)
 {
   _top_level = false;
   _scopes = QString ();
   _symbols = QStringList ();
   _class_names = QStringList ();
   _dimensions = QStringList ();
   _values = QStringList ();
+  _complex_flags = QIntList ();
 }
 
 void
 workspace_model::update_table (void)
 {
   beginResetModel ();
 
   // Nothing to do except tell the world to recalc.
diff --git a/libgui/src/workspace-model.h b/libgui/src/workspace-model.h
--- a/libgui/src/workspace-model.h
+++ b/libgui/src/workspace-model.h
@@ -28,16 +28,19 @@ along with Octave; see the file COPYING.
 #include <QVector>
 #include <QSemaphore>
 #include <QStringList>
 #include <QChar>
 #include <QList>
 #include <QColor>
 #include <QSettings>
 
+// Defined for purposes of sending QList<int> as part of signal.
+typedef QList<int> QIntList;
+
 class workspace_model
   : public QAbstractTableModel
 {
   Q_OBJECT
 
 public:
 
   workspace_model (QObject *parent = 0);
@@ -69,17 +72,18 @@ public:
 
 public slots:
 
   void set_workspace (bool top_level,
                       const QString& scopes,
                       const QStringList& symbols,
                       const QStringList& class_names,
                       const QStringList& dimensions,
-                      const QStringList& values);
+                      const QStringList& values,
+                      const QIntList& complex_flags);
 
   void clear_workspace (void);
 
   void notice_settings (const QSettings *);
 
 signals:
 
   void model_changed (void);
@@ -92,16 +96,17 @@ private:
   void update_table (void);
 
   bool _top_level;
   QString _scopes;
   QStringList _symbols;
   QStringList _class_names;
   QStringList _dimensions;
   QStringList _values;
+  QIntList _complex_flags;
 
   QStringList _columnNames;
 
   QList<QColor>  _storage_class_colors;
 
 };
 
 #endif
diff --git a/libinterp/corefcn/symtab.cc b/libinterp/corefcn/symtab.cc
--- a/libinterp/corefcn/symtab.cc
+++ b/libinterp/corefcn/symtab.cc
@@ -1414,17 +1414,18 @@ symbol_table::do_workspace_info (void) c
               else if (sr.is_formal ())
                 storage = 'f';
               else if (sr.is_hidden ())
                 storage = 'h';
               else if (sr.is_inherited ())
                 storage = 'i';
 
               workspace_element elt (storage, nm, val.class_name (),
-                                     val.short_disp (), dv.str ());
+                                     val.short_disp (), dv.str (),
+                                     val.is_complex_type ());
 
               retval.push_back (elt);
             }
         }
     }
 
   return retval;
 }
diff --git a/libinterp/corefcn/workspace-element.h b/libinterp/corefcn/workspace-element.h
--- a/libinterp/corefcn/workspace-element.h
+++ b/libinterp/corefcn/workspace-element.h
@@ -28,37 +28,39 @@ along with Octave; see the file COPYING.
 class workspace_element
 {
 public:
 
   workspace_element (char scope_arg = 'l',
                      const std::string& symbol_arg = "<name>",
                      const std::string& class_name_arg = "<class>",
                      const std::string& value_arg = "<value>",
-                     const std::string& dimension_arg = "<dimension>")
+                     const std::string& dimension_arg = "<dimension>",
+                     bool complex_flag_arg = false)
     : xscope (scope_arg), xsymbol (symbol_arg),
       xclass_name (class_name_arg), xvalue (value_arg),
-      xdimension (dimension_arg)
+      xdimension (dimension_arg), xcomplex_flag (complex_flag_arg)
   { }
 
   workspace_element (const workspace_element& ws_elt)
     : xscope (ws_elt.xscope), xsymbol (ws_elt.xsymbol),
       xclass_name (ws_elt.xclass_name), xvalue (ws_elt.xvalue),
-      xdimension (ws_elt.xdimension)
+      xdimension (ws_elt.xdimension), xcomplex_flag (ws_elt.xcomplex_flag)
   { }
 
   workspace_element operator = (const workspace_element& ws_elt)
   {
     if (this != &ws_elt)
       {
         xscope = ws_elt.xscope;
         xsymbol = ws_elt.xsymbol;
         xclass_name = ws_elt.xclass_name;
         xvalue = ws_elt.xvalue;
         xdimension = ws_elt.xdimension;
+        xcomplex_flag = ws_elt.xcomplex_flag;
       }
 
     return *this;
   }
 
   ~workspace_element (void) { }
 
   char scope (void) const { return xscope; }
@@ -66,19 +68,22 @@ public:
   std::string symbol (void) const { return xsymbol; }
 
   std::string class_name (void) const { return xclass_name; }
 
   std::string value (void) const { return xvalue; }
 
   std::string dimension (void) const { return xdimension; }
 
+  bool complex_flag (void) const { return xcomplex_flag; }
+
 private:
 
   // [g]lobal, [p]ersistent, [l]ocal
   char xscope;
   std::string xsymbol;
   std::string xclass_name;
   std::string xvalue;
   std::string xdimension;
+  bool xcomplex_flag;
 };
 
 #endif
