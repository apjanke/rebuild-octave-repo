# HG changeset patch
# User Michael Goffioul <michael.goffioul@gmail.com>
# Date 1358048497 18000
#      Sat Jan 12 22:41:37 2013 -0500
# Branch classdef
# Node ID da4cd4ab36db33ffc4bf9f1ad65a74be800cd312
# Parent  0cbac4d3a81c5ac034e826562de403c27cc13d95
Report correct size for object of classdef objects.

* libinterp/octave-value/ov-classdef.h (cdef_object_rep::dims): New method.
(cdef_object::dims): Likewise.
(cdef_object_scalar::dims, cdef_object_array::dims): Likewise.
(octave_classdef::dims): Use it.
(octave_classdef::print_raw): Report array of objects as such.

diff --git a/libinterp/octave-value/ov-classdef.h b/libinterp/octave-value/ov-classdef.h
--- a/libinterp/octave-value/ov-classdef.h
+++ b/libinterp/octave-value/ov-classdef.h
@@ -160,16 +160,18 @@ public:
   virtual void destroy (void) { delete this; }
 
   void release (void)
     {
       if (--refcount == static_count ())
         destroy ();
     }
 
+  virtual dim_vector dims (void) const { return dim_vector (); }
+
 protected:
   /* reference count */
   octave_refcount<octave_idx_type> refcount;
 
 protected:
   /* Restricted copying */
   cdef_object_rep (const cdef_object_rep&)
     : refcount (1) { }
@@ -223,16 +225,18 @@ public:
     { return rep->class_name (); }
 
   cdef_object clone (void) const
     { return cdef_object (rep->clone ()); }
 
   cdef_object empty_clone (void) const
     { return cdef_object (rep->empty_clone ()); }
 
+  dim_vector dims (void) const { return rep->dims (); }
+
   cdef_object make_array (void) const
     { return cdef_object (rep->make_array ()); }
 
   cdef_object copy (void) const
     { return cdef_object (rep->copy ()); }
 
   bool is_array (void) const { return rep->is_array (); }
 
@@ -350,16 +354,18 @@ public:
   cdef_object_array (void) : cdef_object_base () { }
 
   cdef_object_array (const Array<cdef_object>& a)
     : cdef_object_base (), array (a) { }
 
   cdef_object_rep* clone (void) const
     { return new cdef_object_array (*this); }
 
+  dim_vector dims (void) const { return array.dims (); }
+
   bool is_valid (void) const { return true; }
 
   bool is_array (void) const { return true; }
 
   Array<cdef_object> array_value (void) const { return array; }
 
   octave_value_list
   subsref (const std::string& type, const std::list<octave_value_list>& idx,
@@ -386,16 +392,18 @@ private:
 class
 cdef_object_scalar : public cdef_object_base
 {
 public:
   cdef_object_scalar (void) : cdef_object_base () { }
 
   ~cdef_object_scalar (void) { }
 
+  dim_vector dims (void) const { return dim_vector (1, 1); }
+
   void put (const std::string& pname, const octave_value& val)
     { map.assign (pname, val); }
 
   octave_value get (const std::string& pname) const
     {
       Cell val = map.contents (pname);
 
       if (val.numel () > 0)
@@ -1229,17 +1237,21 @@ public:
     {
       // FIXME: should call "display" method
       print_raw(os, pr_as_read_syntax);
       newline(os);
     }
 
   void print_raw(std::ostream& os, bool /* pr_as_read_syntax */ = false) const
     {
-      os << object.class_name () << " object";
+      if (object.is_array ())
+        os << "array (" << object.dims ().str () << ") of "
+          << object.class_name () << " objects";
+      else
+        os << object.class_name () << " object";
     }
 
   octave_value_list subsref (const std::string& type,
 			     const std::list<octave_value_list>& idx, int nargout);
 
   octave_value subsref (const std::string& type,
 			const std::list<octave_value_list>& idx)
     {
@@ -1253,17 +1265,17 @@ public:
 
   octave_value
   undef_subsasgn (const std::string& type,
                   const std::list<octave_value_list>& idx,
                   const octave_value& rhs);
 
   string_vector map_keys (void) const { return object.map_keys (); }
 
-  dim_vector dims (void) const { return dim_vector (1, 1); }
+  dim_vector dims (void) const { return object.dims (); }
 
 private:
   cdef_object object;
 
 private:
   DECLARE_OCTAVE_ALLOCATOR
 
 public:
