# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1245821449 -7200
#      Wed Jun 24 07:30:49 2009 +0200
# Branch release-3-2-x
# Node ID 4e2138bc11520fc0c0a659a74f5d3ca839b02e3d
# Parent  d5c5927d7d117e2427bf2aa509dadbcb0b868a77
oct-map.cc: preserve key order

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2009-06-23  John W. Eaton  <jwe@octave.org>
+
+	* oct-map.cc (Octave_map::squeeze, Octave_map::permute,
+	Octave_map::transpose, Octave_map::reshape, Octave_map::resize,
+	Octave_map::concat): Preserve key order.
+
 2009-06-22  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-cell.cc (octave_cell::all_strings): Avoid duplicate conversions.
 
 2009-06-20  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov.cc (Fsubsasgn): Uniquify shared value before assigning to it.
 
diff --git a/src/oct-map.cc b/src/oct-map.cc
--- a/src/oct-map.cc
+++ b/src/oct-map.cc
@@ -59,16 +59,19 @@ Octave_map::squeeze (void) const
       Cell tmp = contents (pa).squeeze ();
 
       if (error_state)
 	break;
 
       retval.assign (key (pa), tmp);
     }
 
+  // Preserve order of keys.
+  retval.key_list = key_list;
+
   return retval;
 }
 
 Octave_map
 Octave_map::permute (const Array<int>& vec, bool inv) const
 {
   Octave_map retval (dims ());
 
@@ -77,16 +80,19 @@ Octave_map::permute (const Array<int>& v
       Cell tmp = contents (pa).permute (vec, inv);
 
       if (error_state)
 	break;
 
       retval.assign (key (pa), tmp);
     }
 
+  // Preserve order of keys.
+  retval.key_list = key_list;
+
   return retval;
 }
 
 Cell&
 Octave_map::contents (const std::string& k)
 {
   maybe_add_to_key_list (k);
 
@@ -148,30 +154,36 @@ Octave_map::transpose (void) const
 
   dim_vector new_dims (nc, nr);
 
   Octave_map retval (new_dims);
 
   for (const_iterator p = begin (); p != end (); p++)
     retval.assign (key(p), Cell (contents(p).transpose ()));
 
+  // Preserve order of keys.
+  retval.key_list = key_list;
+
   return retval;
 }
 
 Octave_map
 Octave_map::reshape (const dim_vector& new_dims) const
 {
   Octave_map retval;
 
   if (new_dims != dims ())
     {
       for (const_iterator p = begin (); p != end (); p++)
 	retval.assign (key(p), contents(p).reshape (new_dims));
 
       retval.dimensions = new_dims;
+
+      // Preserve order of keys.
+      retval.key_list = key_list;
     }
   else
     retval = *this;
 
   return retval;
 }
 
 void
@@ -191,16 +203,19 @@ Octave_map::resize (const dim_vector& dv
 		tmp.resize(dv, Cell::resize_fill_value ());
 	      else
 		tmp.resize(dv);
 
 	      dimensions = dv;
 
 	      assign (key(p), tmp);
 	    }
+
+	  // Preserve order of keys.
+	  retval.key_list = key_list;
 	}
     }
 }
 
 Octave_map
 Octave_map::concat (const Octave_map& rb, const Array<octave_idx_type>& ra_idx)
 {
   Octave_map retval;
@@ -215,16 +230,19 @@ Octave_map::concat (const Octave_map& rb
 	    {
 	      error ("field name mismatch in structure concatenation");
 	      break;
 	    }
 	
 	  retval.assign (key(pa),
 			 contents(pa).insert (rb.contents(pb), ra_idx));
 	}
+
+      // Preserve order of keys.
+      retval.key_list = key_list;
     }
   else
     {
       dim_vector dv = dims ();
 
       if (dv.all_zero ())
 	retval = rb;
       else
@@ -431,33 +449,36 @@ Octave_map::assign (const std::string& k
 
   return *this;
 }
 
 Octave_map
 Octave_map::index (const octave_value_list& idx, bool resize_ok) const
 {
   Octave_map retval;
+
   octave_idx_type n_idx = idx.length ();
+
   if (n_idx > 0)
     {
       Array<idx_vector> ra_idx (n_idx);
+
       for (octave_idx_type i = 0; i < n_idx; i++)
         {
           ra_idx(i) = idx(i).index_vector ();
           if (error_state)
             break;
         }
 
       if (! error_state)
         {
           for (const_iterator p = begin (); p != end (); p++)
             {
+              Cell tmp = contents (p);
 
-              Cell tmp = contents (p);
               tmp = tmp.ArrayN<octave_value>::index (ra_idx, resize_ok);
 
               if (error_state)
                 break;
 
               retval.assign (key(p), tmp);
             }
 
