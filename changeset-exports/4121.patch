# HG changeset patch
# User jwe
# Date 1035344051 0
#      Wed Oct 23 03:34:11 2002 +0000
# Node ID a0c710c20da585bed79032782bd0a3c50d20ebfb
# Parent  29f648e1cd467674fedb281aff18cb850f824eb0
[project @ 2002-10-23 03:34:11 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,21 @@
 2002-10-22  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* oct-map.cc (Octave_map::assign): Fix typo in resizing.
+
+	* pt-loop.cc (tree_complex_for_command::eval): Only return list
+	for val if struct array has more than one element.
+	(tree_simple_for_command::eval): Likewise.
+
+	* ov-struct.cc (octave_struct::print_raw): Don't create
+	octave_list directly, use octave_value (const octave_value_list&)
+	constructor instead.
+	Call print_with_name for tmp, not val(0).
+
 	* version.h (OCTAVE_VERSION): Now 2.1.37.
 	(OCTAVE_CONTRIB_STATEMENT): New macro.
 	(OCTAVE_STARTUP_MESSAGE): Use it.
 
 2002-10-17  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* data.cc (fill_matrix): If nargin is zero, use val, not 0.0.
 
diff --git a/src/oct-map.cc b/src/oct-map.cc
--- a/src/oct-map.cc
+++ b/src/oct-map.cc
@@ -51,16 +51,17 @@ Octave_map::keys (void) const
 int
 Octave_map::array_length (void) const
 {
   if (array_len == 0 && length () != 0)
     {
       Pix p = first ();
       array_len = contents(p).length ();
     }
+
   return array_len;
 }
 
 Octave_map&
 Octave_map::assign (const idx_vector& idx, const std::string& key,
 		    const octave_value_list& rhs)
 {
   octave_value_list tmp = map[key];
@@ -77,19 +78,19 @@ Octave_map::assign (const idx_vector& id
 
       if (rhs_len < len)
 	{
 	  tmp.resize (len, fill_value);
 	}
       else if (rhs_len > len)
 	{
 	  for (Pix p = first (); p != 0; next (p))
-	    contents(p).resize (len, fill_value);
+	    contents(p).resize (rhs_len, fill_value);
 
-	  array_len = len;
+	  array_len = rhs_len;
 	}
 
       map[key] = tmp;
     }
 
   return *this;
 }
 
diff --git a/src/ov-struct.cc b/src/ov-struct.cc
--- a/src/ov-struct.cc
+++ b/src/ov-struct.cc
@@ -397,26 +397,26 @@ octave_struct::print_raw (std::ostream& 
 
       int n = map.array_length ();
 
       for (Pix p = map.first (); p; map.next (p))
 	{
 	  std::string key = map.key (p);
 	  octave_value_list val = map.contents (p);
 
-	  octave_value tmp = (n == 1) ? val(0) : octave_list (val);
+	  octave_value tmp = (n == 1) ? val(0) : octave_value (val);
 
 	  if (print_keys_only)
 	    {
 	      indent (os);
 	      os << key << ": " << tmp.type_name ();
 	      newline (os);
 	    }
 	  else
-	    val(0).print_with_name (os, key);
+	    tmp.print_with_name (os, key);
 	}
 
       decrement_indent_level ();
 
       indent (os);
       os << "}";
       newline (os);
     }
diff --git a/src/pt-loop.cc b/src/pt-loop.cc
--- a/src/pt-loop.cc
+++ b/src/pt-loop.cc
@@ -368,17 +368,20 @@ tree_simple_for_command::eval (void)
     else if (rhs.is_map ())
       {
 	Octave_map tmp_val (rhs.map_value ());
 
 	for (Pix p = tmp_val.first (); p != 0; tmp_val.next (p))
 	  {
 	    MAYBE_DO_BREAKPOINT;
 
-	    octave_value val = tmp_val.contents (p);
+	    octave_value_list val_lst = tmp_val.contents (p);
+
+	    octave_value val
+	      = (val_lst.length () == 1) ? val_lst(0) : octave_value (val_lst);
 
 	    bool quit = false;
 
 	    do_for_loop_once (ult, val, quit);
 
 	    if (quit)
 	      break;
 	  }
@@ -477,17 +480,22 @@ tree_complex_for_command::eval (void)
       elt = lhs->operator () (p);
       octave_lvalue key_ref = elt->lvalue ();
 
       Octave_map tmp_val (rhs.map_value ());
 
       for (p = tmp_val.first (); p != 0; tmp_val.next (p))
 	{
 	  octave_value key = tmp_val.key (p);
-	  octave_value val = tmp_val.contents (p);
+
+	  octave_value_list val_lst = tmp_val.contents (p);
+
+	  int n = tmp_val.array_length ();
+
+	  octave_value val = (n == 1) ? val_lst(0) : octave_value (val_lst);
 
 	  MAYBE_DO_BREAKPOINT;
 
 	  bool quit = false;
 
 	  do_for_loop_once (key_ref, val_ref, key, val, quit);
 
 	  if (quit)
