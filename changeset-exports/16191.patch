# HG changeset patch
# User Rik <rik@octave.org>
# Date 1362452400 28800
#      Mon Mar 04 19:00:00 2013 -0800
# Node ID 049c769b11c56287ae7396db2d69941e3a0ca42b
# Parent  2825897a0c27e22d3e56fef115ed64a3abf9b40b
celldisp.m: Tweak docstring and error message.

* scripts/general/celldisp.m: Tweak docstring and error message.

diff --git a/scripts/general/celldisp.m b/scripts/general/celldisp.m
--- a/scripts/general/celldisp.m
+++ b/scripts/general/celldisp.m
@@ -12,17 +12,18 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} celldisp (@var{c}, @var{name})
+## @deftypefn  {Function File} {} celldisp (@var{c})
+## @deftypefnx {Function File} {} celldisp (@var{c}, @var{name})
 ## Recursively display the contents of a cell array.  By default the values
 ## are displayed with the name of the variable @var{c}.  However, this name
 ## can be replaced with the variable @var{name}.  For example:
 ##
 ## @example
 ## @group
 ## c = @{1, 2, @{31, 32@}@};
 ## celldisp (c, "b")
@@ -39,22 +40,23 @@
 ## @end example
 ##
 ## @seealso{disp}
 ## @end deftypefn
 
 ## This is ugly, but seems to be what matlab does..
 
 function celldisp (c, name)
+
   if (nargin < 1 || nargin > 2)
     print_usage ();
   endif
 
   if (! iscell (c))
-    error ("celldisp: argument must be a cell array");
+    error ("celldisp: C must be a cell array");
   endif
 
   if (nargin == 1)
     name = inputname (1);
   endif
 
   for i = 1: numel (c)
     if (iscell (c{i}))
@@ -78,12 +80,12 @@ function s = indices (dv, i)
   endif
 endfunction
 
 
 %!demo
 %! c = {1, 2, {31, 32}};
 %! celldisp (c, "b")
 
+## Test input validation
 %!error celldisp ()
 %!error celldisp ({}, "name", 1)
-%!error celldisp (1)
-
+%!error <C must be a cell array> celldisp (1)
