# HG changeset patch
# User Rik <rik@octave.org>
# Date 1398543155 25200
#      Sat Apr 26 13:12:35 2014 -0700
# Node ID 8c537222f1e5941e19e30130b822906d615cb851
# Parent  99d1ef340de42b3eb067b3a1294fd439ab10e70a
gl-render.cc: Use class prefix, opengl_renderer or opengl_texture, when printing warning.

* gl-render.cc (draw_axes, draw_surface, draw_image, render_text) : Use class
prefix, opengl_renderer or opengl_texture, when printing warning.

diff --git a/libinterp/corefcn/gl-render.cc b/libinterp/corefcn/gl-render.cc
--- a/libinterp/corefcn/gl-render.cc
+++ b/libinterp/corefcn/gl-render.cc
@@ -1419,17 +1419,17 @@ opengl_renderer::draw_axes (const axes::
   double y_min = props.get_y_min ();
   double y_max = props.get_y_max ();
   double z_min = props.get_z_min ();
   double z_max = props.get_z_max ();
 
   if (x_max > floatmax || y_max > floatmax || z_max > floatmax
       || x_min < -floatmax || y_min < -floatmax || z_min < -floatmax)
     {
-      warning ("gl-render: data values greater than float capacity.  (1) Scale data, or (2) Use gnuplot");
+      warning ("opengl_renderer: data values greater than float capacity.  (1) Scale data, or (2) Use gnuplot");
       return;
     }
 
   setup_opengl_transformation (props);
 
   // draw axes object
 
   draw_axes_planes (props);
@@ -1584,17 +1584,17 @@ opengl_renderer::draw_surface (const sur
 
   NDArray c;
   const NDArray n = props.get_vertexnormals ().array_value ();
 
   // FIXME: handle transparency
   Matrix a;
 
   if (props.facelighting_is ("phong") || props.edgelighting_is ("phong"))
-    warning ("opengl_renderer::draw: phong light model not supported");
+    warning ("opengl_renderer: phong light model not supported");
 
   int fc_mode = (props.facecolor_is_rgb () ? 0 :
                  (props.facecolor_is ("flat") ? 1 :
                   (props.facecolor_is ("interp") ? 2 :
                    (props.facecolor_is ("texturemap") ? 3 : -1))));
   int fl_mode = (props.facelighting_is ("none") ? 0 :
                  (props.facelighting_is ("flat") ? 1 : 2));
   int fa_mode = (props.facealpha_is_double () ? 0 :
@@ -2616,17 +2616,17 @@ opengl_renderer::draw_image (const image
   if (h > 1 && y(1) == y(0))
     y(1) = y(1) + (h-1);
 
   const ColumnVector p0 = xform.transform (x(0), y(0), 0);
   const ColumnVector p1 = xform.transform (x(1), y(1), 0);
 
   if (xisnan (p0(0)) || xisnan (p0(1)) || xisnan (p1(0)) || xisnan (p1(1)))
     {
-      warning ("gl-render: image X,Y data too large to draw");
+      warning ("opengl_renderer: image X,Y data too large to draw");
       return;
     }
 
   // image pixel size in screen pixel units
   float pix_dx, pix_dy;
   // image pixel size in normalized units
   float nor_dx, nor_dy;
 
@@ -2649,19 +2649,18 @@ opengl_renderer::draw_image (const image
     }
   else
     {
       const ColumnVector p1h = xform.transform (x(1), y(1) + 1, 0);
       pix_dy = p1h(1) - p0(1);
       nor_dy = 1;
     }
 
-  // OpenGL won't draw the image if it's origin is outside the
-  // viewport/clipping plane so we must do the clipping ourselves--only draw
-  // part of the image.
+  // OpenGL won't draw any of the image if it's origin is outside the
+  // viewport/clipping plane so we must do the clipping ourselves.
 
   int j0, j1, i0, i1;
   j0 = 0, j1 = w;
   i0 = 0, i1 = h;
 
   float im_xmin = x(0) - nor_dx/2;
   float im_xmax = x(1) + nor_dx/2;
   float im_ymin = y(0) - nor_dy/2;
@@ -2750,20 +2749,20 @@ opengl_renderer::draw_image (const image
                   a[idx+1] = xcdata(i,j,1);
                   a[idx+2] = xcdata(i,j,2);
                 }
             }
 
           draw_pixels (j1-j0, i1-i0, GL_RGB, GL_UNSIGNED_BYTE, a);
         }
       else
-        warning ("opengl_texture::draw: invalid image data type (expected double, uint16, or uint8)");
+        warning ("opengl_renderer: invalid image data type (expected double, uint8, or uint16)");
     }
   else
-    warning ("opengl_texture::draw: invalid image size (expected n*m*3 or n*m)");
+    warning ("opengl_renderer: invalid image size (expected MxNx3 or MxN)");
 
   glPixelZoom (1, 1);
 }
 
 void
 opengl_renderer::set_viewport (int w, int h)
 {
   glViewport (0, 0, w, h);
@@ -3149,14 +3148,14 @@ opengl_renderer::render_text (const std:
   glDrawPixels (bbox(2), bbox(3),
                 GL_RGBA, GL_UNSIGNED_BYTE, pixels.data ());
   glDisable (GL_ALPHA_TEST);
   if (! blend)
     glDisable (GL_BLEND);
 
   return bbox;
 #else
-  ::warning ("render_text: cannot render text, FreeType library not available");
+  warning ("opengl_renderer: cannot render text, FreeType library not available");
   return Matrix (1, 4, 0.0);
 #endif
 }
 
 #endif
