# HG changeset patch
# User jwe
# Date 1178084203 0
#      Wed May 02 05:36:43 2007 +0000
# Node ID c2b700808e0a5bb27813846d29396c1eaffebe59
# Parent  629844711f494f751c082e1ac6a860fcfc416870
[project @ 2007-05-02 05:36:43 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2007-05-02  G. D. McBain  <geordie.mcbain@aeromech.usyd.edu.au>
+
+	* contour.m: Rewrite help string.
+
 2007-04-28  John W. Eaton  <jwe@octave.org>
 
 	* miscellaneous/unzip.m, miscellaneous/untar.m,
 	miscellaneous/bunzip2.m, miscellaneous/gunzip.m:
 	Special case nargout == 0.
 
 2007-04-27  Kim Hansen  <kimhanse@gmail.com>
 
diff --git a/scripts/plot/contour.m b/scripts/plot/contour.m
--- a/scripts/plot/contour.m
+++ b/scripts/plot/contour.m
@@ -13,41 +13,34 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} {@var{c} =} contour (@var{x}, @var{y}, @var{z}, @var{vv})
-## Compute isolines (countour lines) of the matrix @var{z}. 
-## parameters @var{x}, @var{y} and @var{vn} are optional.
+## @deftypefn {Function File} {} {@var{c} =} contour (@var{z})
+## @deftypefnx {Function File} {} {@var{c} =} contour (@var{z}, @var{vn})
+## @deftypefnx {Function File} {} {@var{c} =} contour (@var{x}, @var{y}, @var{z})
+## @deftypefnx {Function File} {} {@var{c} =} contour (@var{x}, @var{y}, @var{z}, @var{vn})
 ##
-## The return value @var{c} is a 2 by @var{n} matrix containing the
-## contour lines in the following format
+## Plot level curves (contour lines) of the matrix @var{z}, using the
+## contour matrix @var{c} computed by @code{contourc} from the same
+## arguments; see the latter for their interpretation.  @var{c} is only
+## returned if requested.  For example:
 ##
 ## @example
-## @var{c} = [lev1, x1, x2, ..., levn, x1, x2, ... 
-##      len1, y1, y2, ..., lenn, y1, y2, ...]
-## @end example
+## @group
+## x = 0:2;
+## y = x;
+## z = x' * y;
+## contour (x, y, z, 2:3)
 ##
-## @noindent
-## in which contour line @var{n} has a level (height) of @var{levn} and
-## length of @var{lenn}.
-## 
-## If @var{x} and @var{y} are omitted they are taken as the row/column 
-## index of @var{z}.  @var{vn} is either a scalar denoting the number of
-## lines to compute or a vector containing the values of the lines.  If
-## only one value is wanted, set @code{@var{vn} = [val, val]}.  If
-## @var{vn} is omitted it defaults to 10.
-##
-## @example
-## levels = linspace (0, 2*pi, 10);
-## @var{c} = contourc (@var{x}, @var{y}, @var{z}, levels);
+## @end group
 ## @end example
 ## @seealso{contourc, line, plot}
 ## @end deftypefn
 
 ## Author: shaia
 
 function retval = contour (varargin)
 
