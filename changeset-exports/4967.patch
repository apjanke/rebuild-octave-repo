# HG changeset patch
# User jwe
# Date 1094569754 0
#      Tue Sep 07 15:09:14 2004 +0000
# Node ID 0355f2f7d19350396b3993538b592642eaa1697c
# Parent  91b61d27b9b4c1dd1522637897d1c4e982ca9673
[project @ 2004-09-07 15:09:14 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,20 @@
+2004-09-07  John W. Eaton  <jwe@octave.org>
+
+	* ov-fcn-inline.h (octave_fcn_inline::octave_fcn_inline): New copy
+	constructor.
+	(octave_fcn_inline::clone, octave_fcn_inline::empty_clone):
+	New functions.
+
+	* ov-fcn-handle.h (octave_fcn_handle::octave_fcn_handle): New copy
+	constructor.
+	(octave_fcn_handle::clone, octave_fcn_handle::empty_clone):
+	New functions.
+
 2004-09-06  John W. Eaton  <jwe@octave.org>
 
 	* ov.cc (install_types): Call octave_fcn_inline::register_type.
 
 	* version.h (OCTAVE_API_VERSION): Now api-v10.
 
 	* OPERATORS/op-b-b.cc, OPERATORS/op-bm-bm.cc: Define and install
 	unary plus and unary minus operators.
diff --git a/src/ov-fcn-handle.h b/src/ov-fcn-handle.h
--- a/src/ov-fcn-handle.h
+++ b/src/ov-fcn-handle.h
@@ -44,18 +44,24 @@ octave_fcn_handle : public octave_base_v
 {
 public:
   octave_fcn_handle (void)
     : fcn (), nm () { }
 
   octave_fcn_handle (const octave_value& f,  const std::string& n)
     : fcn (f), nm (n) { }
 
+  octave_fcn_handle (const octave_fcn_handle& fh)
+    : octave_base_value (fh), fcn (fh.fcn), nm (fh.nm) { }
+
   ~octave_fcn_handle (void) { }
 
+  octave_value *clone (void) const { return new octave_fcn_handle (*this); }
+  octave_value *empty_clone (void) const { return new octave_fcn_handle (); }
+
   octave_value subsref (const std::string&,
 			const std::list<octave_value_list>&)
     {
       panic_impossible ();
       return octave_value ();
     }
 
   octave_value_list subsref (const std::string& type,
@@ -74,22 +80,16 @@ public:
   std::string fcn_name (void) const { return nm; }
 
   void print (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
 private:
 
-  // No copying!
-
-  octave_fcn_handle (const octave_fcn_handle& fh);
-
-  octave_fcn_handle& operator = (const octave_fcn_handle& fh);
-
   DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 
 protected:
 
   // The function we are handling.
   octave_value fcn;
diff --git a/src/ov-fcn-inline.h b/src/ov-fcn-inline.h
--- a/src/ov-fcn-inline.h
+++ b/src/ov-fcn-inline.h
@@ -45,45 +45,45 @@ Open Source Initiative (www.opensource.o
 // Inline functions.
 
 class
 octave_fcn_inline : public octave_fcn_handle
 {
 public:
 
   octave_fcn_inline (void)
-    : octave_fcn_handle(), iftext (), ifargs () { }
+    : octave_fcn_handle (), iftext (), ifargs () { }
 
   octave_fcn_inline (const std::string& f, const string_vector& a, 
 		     const std::string& n = std::string ());
 
+  octave_fcn_inline (const octave_fcn_inline& fi)
+    : octave_fcn_handle (fi), iftext (fi.iftext), ifargs (fi.ifargs) { }
+
   ~octave_fcn_inline (void) { }
 
+  octave_value *clone (void) const { return new octave_fcn_inline (*this); }
+  octave_value *empty_clone (void) const { return new octave_fcn_inline (); }
+
   bool is_inline_function (void) const { return true; }
 
   octave_fcn_inline *fcn_inline_value (bool = false) { return this; }
 
   std::string fcn_text (void) const { return iftext; }
 
   string_vector fcn_arg_names (void) const { return ifargs; }
 
   octave_value convert_to_str_internal (bool, bool) const;
 
   void print (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
 private:
 
-  // No copying!
-
-  octave_fcn_inline (const octave_fcn_inline& fh);
-
-  octave_fcn_inline& operator = (const octave_fcn_inline& fh);
-
   DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 
   // The expression of an inline function.
   std::string iftext;
 
   // The args of an inline function.
