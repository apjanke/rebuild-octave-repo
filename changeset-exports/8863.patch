# HG changeset patch
# User Jason Riedy <jason@acm.org>
# Date 1235540500 18000
#      Wed Feb 25 00:41:40 2009 -0500
# Node ID 34a8218549610c6adb5e1ddeddd3f24d6f5b5b94
# Parent  f71b749be1c1fc7efe49baf92772478abb268802
pkg.m (generate_lookfor_cache): generate a DOC file for each directory

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,16 +1,20 @@
 2009-02-24  John W. Eaton  <jwe@octave.org>
 
 	* help/gen_doc_cache.m: Don't compress output file.  By default,
-	write to DOC, not DOC.gz.
+	write to DOC, not DOC.gz.  Don't save empty cache.
+
 	* help/lookfor.m: Use doc_cache_file to get location of DOC file.
 
 2009-02-24  Jason Riedy  <jason@acm.org>
 
+	* pkg/pkg.m (generate_lookfor_cache): Generate a DOC file for each
+	directory.
+
 	* help/gen_doc_cache.m: Call __makeinfo__, not makeinfo.
 
 2009-02-24  Jaroslav Hajek  <highegg@gmail.com>
 
 	* optimization/fsolve.m: Update niter after each iteration, not just
 	a succesful one.
 
 2009-02-08  Thorsten Meyer  <thorsten.meyier@gmx.de>
diff --git a/scripts/help/gen_doc_cache.m b/scripts/help/gen_doc_cache.m
--- a/scripts/help/gen_doc_cache.m
+++ b/scripts/help/gen_doc_cache.m
@@ -39,17 +39,19 @@ function gen_doc_cache (out_file = "DOC"
     cache = gen_builtin_cache ();
   elseif (ischar (directory))
     cache = gen_doc_cache_in_dir (directory);
   else
     error ("gen_doc_cache: second input argument must be a string");
   endif
   
   ## Save cache
-  save ("-text", out_file, "cache");
+  if (! isempty (cache))
+    save ("-text", out_file, "cache");
+  endif
 endfunction
 
 function [text, first_sentence, status] = handle_function (f, text, format)
   first_sentence = "";
   ## Skip functions that start with __ as these shouldn't be searched by lookfor
   if (length (f) > 2 && all (f (1:2) == "_"))
     status = 1;
     return;
diff --git a/scripts/pkg/pkg.m b/scripts/pkg/pkg.m
--- a/scripts/pkg/pkg.m
+++ b/scripts/pkg/pkg.m
@@ -1580,17 +1580,20 @@ function finish_installation (desc, pack
       rm_rf (desc.dir);
       rm_rf (getarchdir (desc), global_install);
       rethrow (lasterror ());
     end_try_catch
   endif
 endfunction
 
 function generate_lookfor_cache (desc)
-  gen_doc_cache (genpath (desc.dir));
+  dirs = split_by (genpath (desc.dir), pathsep ());
+  for i = 1 : length (dirs)
+    gen_doc_cache (fullfile (dirs{i}, "DOC"), dirs{i});
+  endfor
 endfunction
 
 ## Make sure the package contains the essential files.
 function verify_directory (dir)
   needed_files = {"COPYING", "DESCRIPTION"};
   for f = needed_files
     if (! exist (fullfile (dir, f{1}), "file"))
       error ("package is missing file: %s", f{1});
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,15 +1,15 @@
 2009-02-25  John W. Eaton  <jwe@octave.org>
 
+	* help.cc (__list_functions__): Simplify
+
 	* input.cc (get_debug_input): Don't pass arbitrary input to
 	message as a format string.
 
-	* help.cc (__list_functions__): Simplify
-
 2009-02-24  John W. Eaton  <jwe@octave.org>
 
 	* help.cc, help.h (Vdoc_cache_file): New global variable.
 	(Fdoc_cache_file): New function.
 	* octave.cc (DOC_CACHE_FILE_OPTION): New option tag.
 	(long_opts): Include doc-cache-file in the list.
 	(octave_main): Handle DOC_CACHE_FILE_OPTION.
 
diff --git a/src/help.cc b/src/help.cc
--- a/src/help.cc
+++ b/src/help.cc
@@ -930,70 +930,37 @@ file_is_in_dir (const std::string filena
 
 DEFUN (__list_functions__, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Function File} {@var{retval} =} __list_functions__ ()\n\
 @deftypefnx{Function File} {@var{retval} =} __list_functions__ (@var{directory})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
-  octave_value_list retval;
+  octave_value retval;
 
   // Get list of functions
-  const string_vector ffl = load_path::fcn_names ();
-  const int ffl_len = ffl.length ();
-  const string_vector afl = autoloaded_functions ();
-  const int afl_len = afl.length ();
+  string_vector ffl = load_path::fcn_names ();
+  string_vector afl = autoloaded_functions ();
   
   if (args.length () == 0)
-    {
-      Cell C (ffl_len + afl_len, 1);
-      int j = 0;
-      for (int i = 0; i < ffl_len; i++)
-        C (j++, 0) = octave_value (ffl [i]);
-      for (int i = 0; i < afl_len; i++)
-        C (j++, 0) = octave_value (afl [i]);
-            
-      retval.append (octave_value (C));
-    }
+    retval = Cell (ffl.append (afl));
   else
     {
-      // Get input
       std::string dir = args (0).string_value ();
-      if (error_state)
-        error ("__list_functions__: input must be a string");
+
+      if (! error_state)
+	{
+	  string_vector fl = load_path::files (dir);
+
+	  if (! error_state)
+	    retval = Cell (fl);
+	}
       else
-        {
-          dir = file_ops::canonicalize_file_name (dir);
-          
-          // FIXME -- This seems very inefficient. Is there a better way?
-          std::list<std::string> list;
-          for (int i = 0; i < ffl_len; i++)
-            {
-              const std::string filename = do_which (ffl [i]);
-              if (file_is_in_dir (filename, dir))
-                list.push_back (ffl [i]);
-            }
-          for (int i = 0; i < afl_len; i++)
-            {
-              const std::string filename = do_which (afl [i]);
-              if (file_is_in_dir (filename, dir))
-                list.push_back (afl [i]);
-            }
-            
-          Cell C (list.size (), 1);
-          int j = 0;
-          for (std::list<std::string>::const_iterator iter = list.begin ();
-               iter != list.end (); iter++)
-            {
-              C (j++, 0) = octave_value (*iter);
-            }
-
-          retval.append (octave_value (C));
-        }
+        error ("__list_functions__: input must be a string");
     }  
 
   return retval;
 }
 
 DEFUN (doc_cache_file, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{val} =} doc_cache_file ()\n\
