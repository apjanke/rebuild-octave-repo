# HG changeset patch
# User Markus Muetzel <markus.muetzel@gmx.de>
# Date 1495571837 25200
#      Tue May 23 13:37:17 2017 -0700
# Node ID 7c278572db66d16a6a2da04ef21073bd2dc73d55
# Parent  d2748870db4eb09fad3a67688be80ff04c9424f8
Implement colormap property for axes objects (bug #48667).

* graphics.cc (convert_cdata): Get colormap map data from axes ancestor to
current object rather than figure ancestor.
* graphics.cc (axes::properties::get_colormap): get colormap from hidden axes
property __colormap__.  If it is empty, get colormap from figure ancestor.

* graphics.in.h (axes): Add colormap property which can be queried or set.
Add hidden __colormap__ property to hold colormap data.

* colormap.m: Update to allow setting colormap on axes, not just figure object.
Update documentation.

* imshow.m: Apply any map for indexed images to the current axes rather than
current figure.

diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -910,30 +910,25 @@ convert_cdata (const base_properties& pr
   // TrueColor data doesn't require conversion
   if (dv.ndims () == cdim && dv(cdim-1) == 3)
     return cdata;
 
   Matrix cmap (1, 3, 0.0);
   Matrix clim (1, 2, 0.0);
 
   graphics_object go = gh_manager::get_object (props.get___myhandle__ ());
-  graphics_object fig = go.get_ancestor ("figure");
-
-  if (fig.valid_object ())
-    {
-      Matrix _cmap = fig.get (caseless_str ("colormap")).matrix_value ();
+  graphics_object ax = go.get_ancestor ("axes");
+
+  if (ax.valid_object ())
+    {
+      Matrix _cmap = ax.get (caseless_str ("colormap")).matrix_value ();
 
       cmap = _cmap;
-    }
-
-  if (is_scaled)
-    {
-      graphics_object ax = go.get_ancestor ("axes");
-
-      if (ax.valid_object ())
+
+      if (is_scaled)
         {
           Matrix _clim = ax.get (caseless_str ("clim")).matrix_value ();
 
           clim = _clim;
         }
     }
 
   dv.resize (cdim);
@@ -5190,16 +5185,31 @@ axes::properties::set_defaults (base_gra
   xset (title.handle_value (), "fontsize", octave_value (fs));
   xset (title.handle_value (), "fontweight", titlefontweight.get ());
 
   update_transform ();
   sync_positions ();
   override_defaults (bgo);
 }
 
+octave_value
+axes::properties::get_colormap (void) const
+{
+  if (__colormap__.get ().is_empty ())
+    {
+      graphics_object go (gh_manager::get_object (get___myhandle__ ()));
+      graphics_object go_f (go.get_ancestor ("figure"));
+      figure::properties& figure_props
+        = reinterpret_cast<figure::properties&> (go_f.get_properties ());
+      return figure_props.get_colormap ();
+    }
+
+  return get___colormap__ ();
+}
+
 void
 axes::properties::delete_text_child (handle_property& hp)
 {
   graphics_handle h = hp.handle_value ();
 
   if (h.ok ())
     {
       graphics_object go = gh_manager::get_object (h);
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -3966,16 +3966,17 @@ public:
       row_vector_property cameraupvector m , Matrix (1, 3, 0.0)
       radio_property cameraupvectormode , "{auto}|manual"
       double_property cameraviewangle m , 6.6086
       radio_property cameraviewanglemode , "{auto}|manual"
       row_vector_property clim m , default_lim ()
       radio_property climmode al , "{auto}|manual"
       radio_property clippingstyle , "{3dbox}|rectangle"
       color_property color , color_property (color_values (1, 1, 1), radio_values ("none"))
+      array_property colormap sg , Matrix ()
       array_property colororder , default_colororder ()
       double_property colororderindex , 1.0
       array_property currentpoint , Matrix (2, 3, 0.0)
       row_vector_property dataaspectratio mu , Matrix (1, 3, 1.0)
       radio_property dataaspectratiomode u , "{auto}|manual"
       radio_property drawmode hd , "{normal}|fast"
       radio_property fontangle u , "{normal}|italic"
       string_property fontname u , OCTAVE_DEFAULT_FONTNAME
@@ -4065,16 +4066,17 @@ public:
       bool_property zminortick , "off"
       radio_property zscale alu , "{linear}|log"
       row_vector_property ztick mu , default_axes_tick ()
       any_property zticklabel S , ""
       radio_property zticklabelmode u , "{auto}|manual"
       double_property zticklabelrotation , 0.0
       radio_property ztickmode u , "{auto}|manual"
       // Octave-specific properties
+      array_property __colormap__ h , Matrix ()
       double_property mousewheelzoom , 0.5
       // hidden properties for alignment of subplots
       radio_property __autopos_tag__ h , "{none}|subplot"
       // hidden properties for inset
       array_property looseinset hu , Matrix (1, 4, 0.0)
       // hidden properties for transformation computation
       array_property x_viewtransform h , Matrix (4, 4, 0.0)
       array_property x_projectiontransform h , Matrix (4, 4, 0.0)
@@ -4433,16 +4435,23 @@ public:
           l(0) -= 0.5;
           l(1) += 0.5;
           lims = l;
         }
     }
 
     Matrix calc_tightbox (const Matrix& init_pos);
 
+    void set_colormap (const octave_value& val)
+    {
+      set___colormap__ (val);
+    }
+
+    octave_value get_colormap (void) const;
+
   public:
     Matrix get_axis_limits (double xmin, double xmax,
                             double min_pos, double max_neg,
                             bool logscale);
 
     void update_xlim ()
     {
       calc_ticks_and_lims (xlim, xtick, xminortickvalues, xlimmode.is ("auto"),
diff --git a/scripts/image/colormap.m b/scripts/image/colormap.m
--- a/scripts/image/colormap.m
+++ b/scripts/image/colormap.m
@@ -35,17 +35,17 @@
 ##
 ## @code{colormap (@qcode{"default"})} restores the default colormap (the
 ## @code{viridis} map with 64 entries).  The default colormap is returned.
 ##
 ## The map may also be specified by a string, @var{map_name}, which
 ## is the name of a function that returns a colormap.
 ##
 ## If the first argument @var{hax} is an axes handle, then the colormap for
-## the parent figure of @var{hax} is queried or set.
+## those axes is queried or set.
 ##
 ## For convenience, it is also possible to use this function with the
 ## command form, @code{colormap @var{map_name}}.
 ##
 ## The list of built-in colormaps is:
 ##
 ## @c FIXME: It would be nice to display the actual colormap as an image
 ## @c        in the PDF version of the documentation.
@@ -88,17 +88,17 @@ function cmap = colormap (varargin)
 
   [hax, varargin, nargin] = __plt_get_axis_arg__ ("colormap", varargin{:});
 
   if (nargin > 1)
     print_usage ();
   endif
 
   if (! isempty (hax))
-    cf = ancestor (hax, "figure");
+    cf = hax;
   else
     cf = get (0, "currentfigure");
   endif
 
   if (nargin == 1)
     map = varargin{1};
     if (ischar (map))
       if (strcmp (map, "default"))
diff --git a/scripts/image/imshow.m b/scripts/image/imshow.m
--- a/scripts/image/imshow.m
+++ b/scripts/image/imshow.m
@@ -80,28 +80,28 @@ function h = imshow (im, varargin)
   indexed = false;
   xdata = ydata = [];
   prop_val_args = {};
 
   ## Get the image.
   if (ischar (im))
     [im, map] = imread (im);
     indexed = true;
-    colormap (map);
+    colormap (gca, map);
   endif
 
   nd = ndims (im);
 
   if (! ((isnumeric (im) || islogical (im)) && (nd == 2 || nd == 3)))
     error ("imshow: IM must be an image or the FILENAME of an image");
   endif
 
   if (nd == 2)
     if (! indexed)
-      colormap (gray ());
+      colormap (gca, gray ());
     endif
   elseif (size (im, 3) == 3)
     if (ismember (class (im), {"uint8", "uint16", "double", "single"}))
       truecolor = true;
     else
       error ("imshow: TrueColor image must be uint8, uint16, double, or single");
     endif
   else
@@ -112,32 +112,32 @@ function h = imshow (im, varargin)
   while (narg <= numel (varargin))
     arg = varargin{narg++};
     if (isnumeric (arg))
       if (numel (arg) == 2 || isempty (arg))
         display_range = arg;
       elseif (columns (arg) == 3)
         indexed = true;
         if (iscolormap (arg) && min (arg) >= 0 || max (arg) <= 1)
-          colormap (arg);
+          colormap (gca,  arg);
         else
           error ("imshow: invalid colormap MAP");
         endif
       elseif (! isempty (arg))
         error ("imshow: argument number %d is invalid", narg);
       endif
     elseif (ischar (arg))
       switch (tolower (arg))
         case "border"
           warning ("imshow: border argument is not implemented");
           narg += 1;
         case "colormap"
           map = varargin{narg++};
           if (iscolormap (map) && min (map) >= 0 || max (map) <= 1)
-            colormap (map);
+            colormap (gca, map);
           else
             error ("imshow: invalid colormap");
           endif
         case "displayrange"
           display_range = varargin{narg++};
         case {"initialmagnification"}
           warning ("imshow: zoom argument ignored -- use GUI features");
           narg += 1;
