# HG changeset patch
# User Marco Caliari <marco.caliari@univr.it>
# Date 1523342364 -7200
#      Tue Apr 10 08:39:24 2018 +0200
# Branch stable
# Node ID b3ee0179d7b005a29bea15bc9451e0e0ab85d39c
# Parent  8cff7eceee87ffb96f46821e7c47051eb04ed069
bicg.m: Check for denominators much smaller than numerators bicg.m (bug #53589).

* bicg.m: Set flag = 4 if the denominators are much smaller than the
numerators, not just if they are equal to zero.

diff --git a/scripts/sparse/bicg.m b/scripts/sparse/bicg.m
--- a/scripts/sparse/bicg.m
+++ b/scripts/sparse/bicg.m
@@ -101,17 +101,18 @@
 ## iterations.
 ##
 ## @item 2: The preconditioner matrix is singular.
 ##
 ## @item 3: The algorithm stagnated, i.e., the absolute value of the
 ## difference between the current iteration @var{x} and the previous is less
 ## than @code{eps * norm (@var{x},2)}.
 ##
-## @item 4: The algorithm can't continue due to a division by zero.
+## @item 4: The algorithm could not continue because intermediate values
+## became too small or too large for reliable computation.
 ## @end itemize
 ##
 ## @item
 ## @var{relres} is the ratio of the final residual to its initial value,
 ## measured in the Euclidean norm.
 ##
 ## @item
 ## @var{iter} is the iteration which @var{x} is computed.
@@ -266,45 +267,47 @@ function [x_min, flag, relres, iter_min,
     q = prec_s0;  # Direction of the "dual system"
   catch
     flag = 2;
   end_try_catch
 
   while ((flag != 2) && (iter < maxit) && (resvec(iter+1) >= norm_b * tol))
     v = Afun (p, "notransp", varargin{:});
     prod_qv = q' * v;
-    if (prod_qv == 0)
+    alpha = (s0' * prec_r0);
+    if (abs (prod_qv) <= eps * abs (alpha))
       flag = 4;
       break
     endif
-    alpha = (s0' * prec_r0) / prod_qv;
+    alpha ./= prod_qv;
     x += alpha * p;
     prod_rs = (s0' * prec_r0);  # Product between r0 and s0
     r0 -= alpha * v;
     s0 -= conj (alpha) * Afun (q, "transp", varargin{:});
     prec_r0 = M1fun (r0, "notransp", varargin{:});
     prec_s0 = s0;
     prec_r0 = M2fun (prec_r0, "notransp", varargin{:});
+    beta = s0' * prec_r0;
+    if (abs (prod_rs) <= abs (beta))
+      flag = 4;
+      break;
+    endif
+    beta ./= prod_rs;
     prec_s0 = M2fun (prec_s0, "transp", varargin{:});
     prec_s0 = M1fun (prec_s0, "transp", varargin{:});
     iter += 1;
     resvec(iter+1) = norm (r0);
     if (resvec(iter+1) <= resvec(iter_min+1))
       x_min = x;
       iter_min = iter;
     endif
     if (norm (x - x_pr) <= norm (x) * eps)
       flag = 3;
       break;
     endif
-    if (prod_rs == 0)
-      flag = 4;
-      break;
-    endif
-    beta = (s0' * prec_r0) / prod_rs;
     p = prec_r0 + beta*p;
     q = prec_s0 + conj (beta) * q;
   endwhile
   resvec = resvec(1:iter+1,1);
 
   if (flag == 2)
     relres = 1;
   else
