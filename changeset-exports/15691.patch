# HG changeset patch
# User CarnÃ« Draug <carandraug+dev@gmail.com>
# Date 1352698322 0
#      Mon Nov 12 05:32:02 2012 +0000
# Node ID dffb28f47ea8c1f7b1de2064c0f0e52e88124c85
# Parent  7d21456c09d1491b6df4a7ea3d62ea59f8e4ab26
gray2ind: return indexed image as integer for matlab compatibility

diff --git a/scripts/image/gray2ind.m b/scripts/image/gray2ind.m
--- a/scripts/image/gray2ind.m
+++ b/scripts/image/gray2ind.m
@@ -19,17 +19,19 @@
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {[@var{img} =} gray2ind (@var{I})
 ## @deftypefnx {Function File} {[@var{img} =} gray2ind (@var{I}, @var{n})
 ## @deftypefnx {Function File} {[@var{img}, @var{map} =} gray2ind (@dots{})
 ## Convert a gray scale or binary image to an indexed image.
 ##
 ## The indexed image will consist of @var{n} different intensity values.
 ## If not given @var{n} defaults to 64 and 2 for gray scale and binary images
-## respectively.
+## respectively.  Its class will be uint8, uint16 or double in order of which
+## one is necessary to fit @var{n} different intensities.
+##
 ## @seealso{ind2gray, rgb2ind} 
 ## @end deftypefn
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: July 1994
 ## Adapted-By: jwe
 
 function [X, map] = gray2ind (I, n = 64)
@@ -62,11 +64,18 @@ function [X, map] = gray2ind (I, n = 64)
   ## Convert data
   map = gray (n);
   ## If @var{I} is an integer matrix convert it to a double matrix with values in [0, 1]
   if (ismember (C, ints))
     low = double (intmin (C));
     high = double (intmax (C));
     I = (double (I) - low) / (high - low);
   endif
-  X = round (I*(n-1)) + 1;
-
+  X = round (I*(n-1));
+  if (n < 256)
+    X = uint8 (X);
+  elseif (n < 65536)
+    X = uint16 (X);
+  else
+    ## if uint16 is not enough, we return double in which case there's no 0
+    X += 1;
+  endif
 endfunction
