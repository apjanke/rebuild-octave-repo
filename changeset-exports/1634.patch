# HG changeset patch
# User jwe
# Date 816390886 0
#      Tue Nov 14 23:14:46 1995 +0000
# Node ID 8cb99fcbb3575efbc2db3f1e76d5b7ee5e9c0614
# Parent  4a4440aa12621c43daabf20ad6a1e05870e92efa
[project @ 1995-11-14 23:14:46 by jwe]

diff --git a/liboctave/Array-idx.h b/liboctave/Array-idx.h
--- a/liboctave/Array-idx.h
+++ b/liboctave/Array-idx.h
@@ -152,17 +152,17 @@ Array<T>::maybe_delete_elements (idx_vec
 		delete rep;
 
 	      rep = new ArrayRep<T> (new_data, new_len);
 	      rep->count = 1;
 	      set_max_indices (1);
 	    }
 	  else
 	    (*current_liboctave_error_handler)
-	      ("%s: %d: internal indexing error", __FILE__, __LINE__);
+	      ("A(idx) = []: index out of range");
 	}
     }
 }
 
 // ??? FIXME ??? -- this doesn't handle assignment of empty vectors
 // to delete elements.  Should it?
 
 template <class LT, class RT>
@@ -435,17 +435,17 @@ Array2<T>::maybe_delete_elements (idx_ve
 
 		      rep = new ArrayRep<T> (new_data, nr * new_nc);
 		      rep->count = 1;
 		      d2 = new_nc;
 		      set_max_indices (2);
 		    }
 		  else
 		    (*current_liboctave_error_handler)
-		      ("%s: %d: internal indexing error", __FILE__, __LINE__);
+		      ("A(idx) = []: index out of range");
 		}
 	    }
 	}
     }
   else if (idx_j.is_colon_equiv (nr, 1))
     {
       if (idx_i.is_colon_equiv (nc, 1))
 	resize (0, 0);
@@ -483,17 +483,17 @@ Array2<T>::maybe_delete_elements (idx_ve
 
 		      rep = new ArrayRep<T> (new_data, new_nr * nc);
 		      rep->count = 1;
 		      d1 = new_nr;
 		      set_max_indices (2);
 		    }
 		  else
 		    (*current_liboctave_error_handler)
-		      ("%s: %d: internal indexing error", __FILE__, __LINE__);
+		      ("A(idx) = []: index out of range");
 		}
 	    }
 	}
     }
 }
 
 template <class LT, class RT>
 int
