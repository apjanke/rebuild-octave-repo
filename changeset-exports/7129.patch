# HG changeset patch
# User jwe
# Date 1194535211 0
#      Thu Nov 08 15:20:11 2007 +0000
# Node ID 363ffc8a5c80f3fbcba054c3d26f211fd9e3fa23
# Parent  73308b8f8777b16118488e44933a55c8bc1360ae
[project @ 2007-11-08 15:20:11 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,12 +1,12 @@
 2007-11-07  Ben Abbott  <bpabbott@mac.com>
 
 	* set/ismember.m: Call cell_ismember to handle cellstr args.
-	New tests.
+	Handle "rows" argument.  New tests.
 	(cell_ismember): New function.
 
 2007-11-07  John W. Eaton  <jwe@octave.org>
 
 	* control/base/__bodquist__.m, control/base/__freqresp__.m,
 	control/base/__stepimp__.m, control/base/are.m,
 	control/base/ctrb.m, control/base/damp.m, control/base/dare.m,
 	control/base/dcgain.m, control/base/dgram.m, control/base/dlqr.m,
diff --git a/scripts/set/ismember.m b/scripts/set/ismember.m
--- a/scripts/set/ismember.m
+++ b/scripts/set/ismember.m
@@ -13,19 +13,20 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{tf}, @var{a_idx}] =} ismember (@var{A}, @var{S}) 
+## @deftypefnx {Function File} {[@var{tf}, @var{a_idx}] =} ismember (@var{A}, @var{S}, "rows")
 ## Return a matrix @var{tf} the same shape as @var{A} which has 1 if 
 ## @code{A(i,j)} is in @var{S} or 0 if it isn't. If a second output argument 
-## is requested, the indexes into  @var{S} of the matching elements is 
+## is requested, the indexes into @var{S} of the matching elements are
 ## also returned. 
 ##
 ## @example
 ## @group
 ## a = [3, 10, 1];
 ## s = [0:9];
 ## [tf, a_idx] = residue (a, s);
 ##      @result{} tf = [1, 0, 1]
@@ -40,96 +41,96 @@
 ## a = @{'abc'@};
 ## s = @{'abc', 'def'@};
 ## [tf, a_idx] = residue (a, s);
 ##      @result{} tf = [1, 0]
 ##      @result{} a_idx = [1, 0]
 ## @end group
 ## @end example
 ##
-## @deftypefnx {Function File} {[@var{tf}, @var{a_idx}] =} ismember (@var{A}, @var{S}, 'rows')
-## When @var{A} and @var{S} are matrices with the same number of columes,
-## the row vectors may matched.
+## With the optional third argument @code{"rows"}, and matrices 
+## @var{A} and @var{S} with the same number of columns, compare rows in
+## @var{A} with the rows in @var{S}.
 ##
 ## @example
 ## @group
 ## a = [1:3; 5:7; 4:6];
 ## s = [0:2; 1:3; 2:4; 3:5; 4:6];
 ## [tf, a_idx] = ismember(a, s, 'rows');
 ##      @result{} tf = logical ([1; 0; 1])
 ##      @result{} a_idx = [2; 0; 5];
 ## @end group
 ## @end example
 ##
 ## @seealso{unique, union, intersection, setxor, setdiff}
 ## @end deftypefn
 
-## Author: Paul Kienzle
-## Author: Søren Hauberg
-## Author: Ben Abbott
+## Author: Paul Kienzle <pkienzle@users.sf.net>
+## Author: Søren Hauberg <hauberg@gmail.com>
+## Author: Ben Abbott <bpabbott@mac.com>
 ## Adapted-by: jwe
 
 function [tf, a_idx] = ismember (a, s, rows_opt) 
 
   if (nargin == 2 || nargin == 3) 
-    if (iscell(a) || iscell(s))
+    if (iscell (a) || iscell (s))
       if (nargin == 3)
         error ("ismember: with 'rows' both sets must be matrices"); 
       else
         [tf, a_idx] = cell_ismember (a, s);
       endif
     else
       if (nargin == 3) 
         ## The 'rows' argument is handled in a fairly ugly way. A better
         ## solution would be to vectorize this loop over 'r' below.
-        if (strcmpi (rows_opt, "rows") && ismatrix (a) && ismatrix (s) && ...
-            columns (a) == columns (s)) 
+        if (strcmpi (rows_opt, "rows") && ismatrix (a) && ismatrix (s)
+	    && columns (a) == columns (s)) 
           rs = rows (s);
           ra = rows (a);
           a_idx = zeros (ra, 1);
           for r = 1:ra
            tmp = ones (rs, 1) * a(r,:);
             f = find (all (tmp' == s'), 1);
-            if ! isempty (f)
+            if (! isempty (f))
               a_idx(r) = f;
             endif
           endfor
           tf = logical (a_idx);
-        elseif strcmpi (rows_opt, "rows")
+        elseif (strcmpi (rows_opt, "rows"))
           error ("ismember: with 'rows' both sets must be matrices with an equal number of columns"); 
         else
           error ("ismember: invalid input"); 
         endif
       else
         ## Input checking 
-        if ( ! isa (a, class (s)) ) 
+        if (! isa (a, class (s))) 
           error ("ismember: both input arguments must be the same type");
-        elseif ( ! ischar (a) && ! isnumeric (a) )
+        elseif (! ischar (a) && ! isnumeric (a))
           error ("ismember: input arguments must be arrays, cell arrays, or strings"); 
-        elseif ( ischar (a) && ischar (s) ) 
+        elseif (ischar (a) && ischar (s))
           a = uint8 (a);
           s = uint8 (s);
         endif
-        ## Convert matrices to vectors 
+        ## Convert matrices to vectors.
         if (all (size (a) > 1))
           a = a(:);
         endif 
         if (all (size (s) > 1))
           s = s(:);
         endif 
-        ## Do the actual work
+        ## Do the actual work.
         if (isempty (a) || isempty (s))
           tf = zeros (size (a), "logical");
           a_idx = []; 
         elseif (numel (s) == 1) 
           tf = (a == s);
           a_idx = double (tf);
         elseif (numel (a) == 1) 
           f = find (a == s, 1); 
-          tf = !isempty (f); 
+          tf = !isempty (f);
           a_idx = f; 
           if (isempty (a_idx))
             a_idx = 0;
           endif 
         else
           ## Magic:  the following code determines for each a, the index i 
           ## such that s(i)<= a < s(i+1).  It does this by sorting the a 
           ## into s and remembering the source index where each element came 
@@ -181,23 +182,23 @@ function [tf, a_idx] = ismember (a, s, r
 endfunction
 
 function [tf, a_idx] = cell_ismember (a, s)
   if (nargin == 2)
     if (ischar (a) && iscellstr (s)) 
       if (isempty (a)) # Work around bug in 'cellstr' 
         a = {''};
       else
-        a = cellstr(a);
+        a = cellstr (a);
       endif
     elseif (iscellstr (a) && ischar (s))
       if (isempty (s)) # Work around bug in 'cellstr' 
         s = {''};
       else
-        s = cellstr(s);
+        s = cellstr (s);
       endif
     endif 
     if (iscellstr (a) && iscellstr (s))
       ## Do the actual work
       if (isempty (a) || isempty (s))
         tf = zeros (size (a), "logical");
         a_idx = []; 
       elseif (numel (s) == 1) 
@@ -206,36 +207,36 @@ function [tf, a_idx] = cell_ismember (a,
       elseif (numel (a) == 1) 
         f = find (strcmp (a, s), 1); 
         tf = !isempty (f);
         a_idx = f; 
         if (isempty (a_idx))
           a_idx = 0;
         endif 
       else 
-        lt = numel(s);
+        lt = numel (s);
         [s, sidx] = sort (s);
         [v, p] = sort ([s(2:lt)(:); a(:)]);
         idx(p) = cumsum (p <= lt-1) + 1;
         idx = idx(lt:end);
         tf = (cellfun ("length", a) 
-            == reshape (cellfun ("length", s(idx)), size (a)));
+              == reshape (cellfun ("length", s(idx)), size (a)));
         idx2 = find (tf);
-        tf(idx2) = all (char (a(idx2)) == char (s(idx)(idx2)), 2);
+        tf(idx2) = (all (char (a(idx2)) == char (s(idx)(idx2)), 2));
         a_idx = zeros (size (tf));
         a_idx(tf) = sidx(idx(tf));
       endif
     else
       error ("cell_ismember: arguments must be cell arrays of character strings");
     endif
   else
     print_usage ();
   endif
   ## Resize result to the original size of 'a' 
-  size_a = size(a);
+  size_a = size (a);
   tf = reshape (tf, size_a); 
   a_idx = reshape (a_idx, size_a); 
 endfunction
 
 %!assert (ismember ({''}, {'abc', 'def'}), false);
 %!assert (ismember ('abc', {'abc', 'def'}), true);
 %!assert (isempty (ismember ([], [1, 2])), true);
 %!assert (isempty (ismember ({}, {'a', 'b'})), true);
