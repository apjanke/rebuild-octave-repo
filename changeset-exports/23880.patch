# HG changeset patch
# User Rik <rik@octave.org>
# Date 1502463901 25200
#      Fri Aug 11 08:05:01 2017 -0700
# Node ID 1b232c0c19e65d16418a0dc2570fe54911aa4f9d
# Parent  92a3b165689e765c90dacdf0626dd50fb8ce66d2
Empty indexing of a struct should return the entire struct (bug #51633).

* ov-struct.cc (do_index_op): Check size of idx list.  If it is zero, return
the struct itself, otherwise continue and perform indexing operation.

* test/struct.tst: Add test for proper behavior.

diff --git a/libinterp/octave-value/ov-struct.cc b/libinterp/octave-value/ov-struct.cc
--- a/libinterp/octave-value/ov-struct.cc
+++ b/libinterp/octave-value/ov-struct.cc
@@ -532,18 +532,20 @@ octave_struct::subsasgn (const std::stri
   retval.maybe_mutate ();
 
   return retval;
 }
 
 octave_value
 octave_struct::do_index_op (const octave_value_list& idx, bool resize_ok)
 {
-  // octave_map handles indexing itself.
-  return map.index (idx, resize_ok);
+  if (idx.length () == 0)
+    return map;
+  else  // octave_map handles indexing itself.
+    return map.index (idx, resize_ok);
 }
 
 size_t
 octave_struct::byte_size (void) const
 {
   // Neglect the size of the fieldnames.
 
   size_t retval = 0;
diff --git a/test/struct.tst b/test/struct.tst
--- a/test/struct.tst
+++ b/test/struct.tst
@@ -225,19 +225,29 @@
 %! assert (a.m.c.b.m.i.j.k.l, struct ("b", 1));
 
 ## test indexed assignment into empty struct array
 %!test
 %! s = resize (struct (), 3,2);
 %! s(3).foo = 42;
 %! assert (s(3), struct ("foo", 42));
 
+## empty index should return entire struct
+%!test <51633>
+%! x.a = 1:10;
+%! y = x;
+%! assert (! isempty (y));
+%! assert (y, x);
+%! z = x();
+%! assert (! isempty (z));
+%! assert (z, x);
+%! assert (z, y);
+
 ## test assigning to multi-dim struct with trailing singleton dimensions,
-## Bug #35841.
-%!test
+%!test <35841>
 %! a(1,1,1).b(1) = 1;
 %! a(1,1,1).b(1) = 2;
 %! a(1,1,:).b(1) = 3;
 %! assert (a(1,1,1).b(1) == 3);
 
 %!error id=Octave:index-out-of-bounds
 %! s = resize (struct (),3,2);
 %! s(3).foo = 42;
