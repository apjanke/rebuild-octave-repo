# HG changeset patch
# User jwe
# Date 1037392427 0
#      Fri Nov 15 20:33:47 2002 +0000
# Node ID 4d1d7c51205cfa51905346a1cfa91e8e2adb26ad
# Parent  dd2abf428f5d2a40b3084864f6683262c09790e1
[project @ 2002-11-15 20:33:47 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,12 @@
+2002-11-15  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* configure.in (USE_EXCEPTIONS_FOR_INTERRUPTS): No need to define.
+
 2002-11-14  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* configure.in: Check for sigsetjmp and siglongjmp.
 	(AH_BOTTOM): If both are found, define OCTAVE_HAVE_SIG_JUMP.
 	Also check for sig_atomic_t, typedef it if not available.
 
 2002-11-10  Per Persson <persquare@mac.com>
 
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -17,17 +17,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### for more details.
 ### 
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA. 
 
 AC_INIT
-AC_REVISION($Revision: 1.389 $)
+AC_REVISION($Revision: 1.390 $)
 AC_PREREQ(2.52)
 AC_CONFIG_SRCDIR([src/octave.cc])
 AC_CONFIG_HEADER(config.h)
 
 AC_DEFINE(OCTAVE_SOURCE, 1, [Define if this is Octave.])
   
 OCTAVE_HOST_TYPE
 
@@ -1327,18 +1327,16 @@ typedef int sig_atomic_t;
 #endif
 #endif
 
 /* Define if we expect to have <windows.h>, Sleep, etc. */
 #if defined (__WIN32__) && ! defined (__CYGWIN__)
 #define OCTAVE_USE_WINDOWS_API 1
 #endif
 
-#define USE_EXCEPTIONS_FOR_INTERRUPTS 1
-
 /* sigsetjmp is a macro, not a function. */
 #if defined (sigsetjmp) && defined (HAVE_SIGLONGJMP)
 #define OCTAVE_HAVE_SIG_JUMP
 #endif
 ])
 
 ### Do the substitutions in all the Makefiles.
 
diff --git a/libcruft/ChangeLog b/libcruft/ChangeLog
--- a/libcruft/ChangeLog
+++ b/libcruft/ChangeLog
@@ -1,8 +1,21 @@
+2002-11-15  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* misc/quit.h, misc/quit.cc [! USE_EXCEPTIONS_FOR_INTERRUPTS]):
+	Always use exceptions for handling interrupts.
+	(BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE): 
+
+	* misc/quit.h (OCTAVE_TRY_WITH_INTERRUPTS, OCTAVE_THROW_BAD_ALLOC,
+	OCTAVE_CATCH_INTERRUPTS, SAVE_OCTAVE_INTERRUPT_IMMEDIATELY,
+	INCREMENT_OCTAVE_INTERRUPT_IMMEDIATELY, OCTAVE_THROW_TO_TOP_LEVEL,
+	DECREMENT_OCTAVE_INTERRUPT_IMMEDIATELY, OCTAVE_JUMP_TO_TOP_LEVEL,
+	SET_OCTAVE_INTERRUPT_IMMEDIATELY): Replace all uses with
+	definitions, delete macros.
+
 2002-11-14  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* misc/quit.cc (octave_allocation_error): New variable.
 	(octave_throw_bad_alloc): New function.
 	* misc/quit.h: Provide decls.
 	(OCTAVE_THROW_BAD_ALLOC): New macro.
 	(END_INTERRUPT_WITH_EXCEPTIONS): Also catch bad_alloc.
 	* misc/f77-fcn.h (F77_XFCN): Handle allocation errors.
diff --git a/libcruft/misc/f77-fcn.h b/libcruft/misc/f77-fcn.h
--- a/libcruft/misc/f77-fcn.h
+++ b/libcruft/misc/f77-fcn.h
@@ -46,34 +46,34 @@ extern "C" {
    end up here if an interrupt is processed when the Fortran
    subroutine is called.  In that case, we resotre the context and go
    to the top level.  The error_state should be checked immediately
    after this macro is used. */
 
 #define F77_XFCN(f, F, args) \
   do \
     { \
-      jmp_buf saved_context; \
+      octave_jmp_buf saved_context; \
       f77_exception_encountered = 0; \
       octave_save_current_context ((char *) saved_context); \
       if (octave_set_current_context) \
 	{ \
           octave_restore_current_context ((char *) saved_context); \
 	  if (f77_exception_encountered) \
 	    F77_XFCN_ERROR (f, F); \
           else if (octave_allocation_error) \
-            OCTAVE_THROW_BAD_ALLOC; \
+            octave_throw_bad_alloc (); \
           else \
-            OCTAVE_THROW_TO_TOP_LEVEL; \
+            octave_throw_interrupt_exception (); \
 	} \
       else \
         { \
-	  INCREMENT_OCTAVE_INTERRUPT_IMMEDIATELY; \
+	  octave_interrupt_immediately++; \
 	  F77_FUNC (f, F) args; \
-	  DECREMENT_OCTAVE_INTERRUPT_IMMEDIATELY; \
+	  octave_interrupt_immediately--; \
           octave_restore_current_context ((char *) saved_context); \
         } \
     } \
   while (0)
 
 /* So we can check to see if an exception has occurred. */
 extern int f77_exception_encountered;
 
diff --git a/libcruft/misc/quit.cc b/libcruft/misc/quit.cc
--- a/libcruft/misc/quit.cc
+++ b/libcruft/misc/quit.cc
@@ -82,18 +82,16 @@ octave_save_signal_mask (void)
 void
 octave_restore_signal_mask (void)
 {
 #if defined (HAVE_POSIX_SIGNALS)
   sigprocmask (SIG_SETMASK, &octave_signal_mask, 0);
 #endif
 }
 
-#if defined (USE_EXCEPTIONS_FOR_INTERRUPTS)
-
 sig_atomic_t octave_interrupt_immediately = 0;
 
 sig_atomic_t octave_interrupt_state = 0;
 
 sig_atomic_t octave_allocation_error = 0;
 
 void
 octave_throw_interrupt_exception (void)
@@ -102,15 +100,13 @@ octave_throw_interrupt_exception (void)
 }
 
 void
 octave_throw_bad_alloc (void)
 {
   throw std::bad_alloc ();
 }
 
-#endif
-
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/libcruft/misc/quit.h b/libcruft/misc/quit.h
--- a/libcruft/misc/quit.h
+++ b/libcruft/misc/quit.h
@@ -53,18 +53,16 @@ extern void octave_save_current_context 
 extern void octave_restore_current_context (void *);
 
 extern void octave_jump_to_enclosing_context (void) GCC_ATTR_NORETURN;
 
 extern void octave_save_signal_mask (void);
 
 extern void octave_restore_signal_mask (void);
 
-#if defined (USE_EXCEPTIONS_FOR_INTERRUPTS)
-
 #ifdef __cplusplus
 class
 octave_interrupt_exception
 {
 };
 #endif
 
 extern sig_atomic_t octave_interrupt_immediately;
@@ -83,116 +81,61 @@ extern void octave_throw_bad_alloc (void
       if (octave_interrupt_state) \
         { \
           octave_interrupt_state = 0; \
           octave_throw_interrupt_exception (); \
         } \
     } \
   while (0)
 
-#define OCTAVE_JUMP_TO_TOP_LEVEL \
-  do { octave_interrupt_state = 1; } while (0)
-
-#define OCTAVE_THROW_TO_TOP_LEVEL octave_throw_interrupt_exception ()
-
-#define OCTAVE_THROW_BAD_ALLOC octave_throw_bad_alloc ()
-
-#define OCTAVE_TRY_WITH_INTERRUPTS try
-
-#define OCTAVE_CATCH_INTERRUPTS catch (octave_interrupt_exception)
-
-#define SAVE_OCTAVE_INTERRUPT_IMMEDIATELY(var) \
-  sig_atomic_t var = octave_interrupt_immediately
-
-#define INCREMENT_OCTAVE_INTERRUPT_IMMEDIATELY \
-  do { octave_interrupt_immediately++; } while (0)
-
-#define DECREMENT_OCTAVE_INTERRUPT_IMMEDIATELY \
-  do { octave_interrupt_immediately--; } while (0)
-
-#define SET_OCTAVE_INTERRUPT_IMMEDIATELY(x) \
-  do { octave_interrupt_immediately = x; } while (0)
-
 #define BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE \
   do \
     { \
-      jmp_buf saved_context; \
+      octave_jmp_buf saved_context; \
  \
       octave_save_current_context ((char *) saved_context); \
  \
       if (octave_set_current_context) \
 	{ \
 	  octave_restore_current_context ((char *) saved_context); \
-	  OCTAVE_THROW_TO_TOP_LEVEL; \
+	  octave_throw_interrupt_exception (); \
 	} \
       else \
 	{ \
-	  INCREMENT_OCTAVE_INTERRUPT_IMMEDIATELY
+	  octave_interrupt_immediately++
 
 #define END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE \
-	  DECREMENT_OCTAVE_INTERRUPT_IMMEDIATELY; \
+	  octave_interrupt_immediately--; \
           octave_restore_current_context ((char *) saved_context); \
         } \
     } \
   while (0)
 
 #define BEGIN_INTERRUPT_WITH_EXCEPTIONS \
-  SAVE_OCTAVE_INTERRUPT_IMMEDIATELY (saved_octave_interrupt_immediately); \
+  sig_atomic_t saved_octave_interrupt_immediately = octave_interrupt_immediately; \
  \
-  OCTAVE_TRY_WITH_INTERRUPTS \
+  try \
     { \
-      SET_OCTAVE_INTERRUPT_IMMEDIATELY (0)
+      octave_interrupt_immediately = 0;
 
 #define END_INTERRUPT_WITH_EXCEPTIONS \
     } \
-  OCTAVE_CATCH_INTERRUPTS \
+  catch (octave_interrupt_exception) \
     { \
-      SET_OCTAVE_INTERRUPT_IMMEDIATELY (saved_octave_interrupt_immediately); \
+      octave_interrupt_immediately = saved_octave_interrupt_immediately; \
       octave_jump_to_enclosing_context (); \
     } \
   catch (std::bad_alloc) \
     { \
-      SET_OCTAVE_INTERRUPT_IMMEDIATELY (saved_octave_interrupt_immediately); \
+      octave_interrupt_immediately = saved_octave_interrupt_immediately; \
       octave_allocation_error = 1; \
       octave_jump_to_enclosing_context (); \
     } \
  \
-  SET_OCTAVE_INTERRUPT_IMMEDIATELY (saved_octave_interrupt_immediately)
-
-#else
-
-#define OCTAVE_QUIT do { } while (0)
-
-#define OCTAVE_JUMP_TO_TOP_LEVEL octave_jump_to_enclosing_context ()
-
-#define OCTAVE_THROW_TO_TOP_LEVEL OCTAVE_JUMP_TO_TOP_LEVEL
-
-#define OCTAVE_THROW_BAD_ALLOC OCTAVE_JUMP_TO_TOP_LEVEL
-
-#define OCTAVE_TRY_WITH_INTERRUPTS
-
-#define OCTAVE_CATCH_INTERRUPTS if (0)
-
-#define SAVE_OCTAVE_INTERRUPT_IMMEDIATELY(var) do { } while (0)
-
-#define SET_OCTAVE_INTERRUPT_IMMEDIATELY(x) do { } while (0)
-
-#define INCREMENT_OCTAVE_INTERRUPT_IMMEDIATELY do { } while (0)
-
-#define DECREMENT_OCTAVE_INTERRUPT_IMMEDIATELY do { } while (0)
-
-#define BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE do { } while (0)
-
-#define END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE do { } while (0)
-
-#define BEGIN_INTERRUPT_WITH_EXCEPTIONS do { } while (0)
-
-#define END_INTERRUPT_WITH_EXCEPTIONS do { } while (0)
-
-#endif
+  octave_interrupt_immediately = saved_octave_interrupt_immediately
 
 #ifdef __cplusplus
 }
 #endif
 
 #endif
 
 /*
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,14 @@
 2002-11-15  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* lex.h (YY_FATAL_ERROR): Use OCTAVE_QUIT here.
+
+	* utils.cc (toplevel): Delete variable.
+
 	* sighandlers.cc (OCTAVE_MEMORY_EXHAUSTED_ERROR): Delete.
 
 2002-11-14  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* sighandlers.cc (octave_new_handler): Delete.
 	(install_signal_handlers): Don't call set_new_handler.
 	* toplev.cc (main_loop): Handle bad_alloc exception here.
 
diff --git a/src/lex.h b/src/lex.h
--- a/src/lex.h
+++ b/src/lex.h
@@ -38,17 +38,17 @@ Software Foundation, 59 Temple Place - S
 
 #ifdef YY_FATAL_ERROR
 #undef YY_FATAL_ERROR
 #endif
 #define YY_FATAL_ERROR(msg) \
   do \
     { \
       error (msg); \
-      OCTAVE_JUMP_TO_TOP_LEVEL; \
+      OCTAVE_QUIT; \
       yy_fatal_error (msg); \
     } \
   while (0)
 
 #define TOK_RETURN(tok) \
   do \
     { \
       current_input_column += yyleng; \
diff --git a/src/sighandlers.cc b/src/sighandlers.cc
--- a/src/sighandlers.cc
+++ b/src/sighandlers.cc
@@ -212,24 +212,21 @@ static RETSIGTYPE
 sigfpe_handler (int /* sig */)
 {
   MAYBE_ACK_SIGNAL (SIGFPE);
 
   MAYBE_REINSTALL_SIGHANDLER (SIGFPE, sigfpe_handler);
 
   std::cerr << "error: floating point exception -- trying to return to prompt\n";
 
+  // XXX FIXME XXX -- will setting octave_interrupt_state really help
+  // here?
+
   if (can_interrupt)
-    {
-      // XXX FIXME XXX -- this may simply set the interrupt state.  We
-      // can only hope for the best after returning?  We probably need
-      // to throw an exception.
-
-      OCTAVE_OCTAVE_JUMP_TO_TOP_LEVEL;
-    }
+    octave_interrupt_state = 1;
 
   SIGHANDLER_RETURN (0);
 }
 #endif /* defined(__alpha__) */
 #endif /* defined(SIGFPE) */
 
 #if 0
 #if defined (SIGWINCH)
@@ -270,17 +267,17 @@ sigint_handler (int)
   if (can_interrupt)
     {
 #if defined (USE_EXCEPTIONS_FOR_INTERRUPTS)
       octave_interrupt_state = 1;
 
       if (octave_interrupt_immediately)
 	octave_jump_to_enclosing_context ();
 #else
-      OCTAVE_JUMP_TO_TOP_LEVEL;
+      octave_interrupt_state = 1;
       panic_impossible ();
 #endif
     }
 
   SIGHANDLER_RETURN (0);
 }
 
 #ifdef SIGPIPE
@@ -291,18 +288,21 @@ sigpipe_handler (int /* sig */)
 
   MAYBE_REINSTALL_SIGHANDLER (SIGPIPE, sigpipe_handler);
 
   if (pipe_handler_error_count++ == 0)
     std::cerr << "warning: broken pipe\n";
 
   // Don't loop forever on account of this.
 
+  // XXX FIXME XXX -- will setting octave_interrupt_state really help
+  // here?
+
   if (pipe_handler_error_count  > 100)
-    OCTAVE_JUMP_TO_TOP_LEVEL;
+    octave_interrupt_state = 1;
 
   SIGHANDLER_RETURN (0);
 }
 #endif /* defined(SIGPIPE) */
 
 octave_interrupt_handler
 octave_catch_interrupts (void)
 {
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -90,17 +90,17 @@ octave_user_function *curr_function = 0;
 // Original value of TEXMFDBS environment variable.
 std::string octave_original_texmfdbs;
 
 static void
 recover_from_exception (void)
 {
   unwind_protect::run_all ();
   can_interrupt = true;
-  SET_OCTAVE_INTERRUPT_IMMEDIATELY (0);
+  octave_interrupt_immediately = 0;
   octave_interrupt_state = 0;
   octave_allocation_error = 0;
   octave_restore_signal_mask ();
   octave_catch_interrupts ();
 }
 
 int
 main_loop (void)
@@ -181,17 +181,17 @@ main_loop (void)
 		      else
 			command_editor::increment_current_command_number ();
 		    }
 		}
 	      else if (parser_end_of_input)
 		break;
 	    }
 	}
-      OCTAVE_CATCH_INTERRUPTS
+      catch (octave_interrupt_exception)
 	{
 	  recover_from_exception ();
 	  std::cout << "\n";
 	}
       catch (std::bad_alloc)
 	{
 	  recover_from_exception ();
 	  std::cerr
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -71,19 +71,16 @@ Software Foundation, 59 Temple Place - S
 #include "variables.h"
 
 // Should expressions like ones (-1, 5) result in an empty matrix or
 // an error?  A positive value means yes.  A negative value means
 // yes, but print a warning message.  Zero means it should be
 // considered an error.
 static int Vtreat_neg_dim_as_zero;
 
-// Top level context (?)
-extern jmp_buf toplevel;
-
 // Return TRUE if S is a valid identifier.
 
 bool
 valid_identifier (const char *s)
 {
   if (! s || ! (isalnum (*s) || *s == '_'))
      return false;
 
