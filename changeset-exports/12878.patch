# HG changeset patch
# User Ben Abbott  <bpabbott@mac.com>
# Date 1311548656 18000
#      Sun Jul 24 18:04:16 2011 -0500
# Node ID 875c735c0929e3a994334b3401f86ab6dc1d05dd
# Parent  ddea3962b024d2ef033e2639c73ae26cf6ae6829
Limit the output of strread to the specified length.

* strread.m: Limit the length of output to the number of repeated formats.
Add a test.

diff --git a/scripts/io/strread.m b/scripts/io/strread.m
--- a/scripts/io/strread.m
+++ b/scripts/io/strread.m
@@ -21,19 +21,20 @@
 ## @deftypefnx {Function File} {[@var{a}, @dots{}] =} strread (@var{str}, @var{format})
 ## @deftypefnx {Function File} {[@var{a}, @dots{}] =} strread (@var{str}, @var{format}, @var{format_repeat})
 ## @deftypefnx {Function File} {[@var{a}, @dots{}] =} strread (@var{str}, @var{format}, @var{prop1}, @var{value1}, @dots{})
 ## @deftypefnx {Function File} {[@var{a}, @dots{}] =} strread (@var{str}, @var{format}, @var{format_repeat}, @var{prop1}, @var{value1}, @dots{})
 ## Read data from a string.
 ##
 ## The string @var{str} is split into words that are repeatedly matched to the
 ## specifiers in @var{format}.  The first word is matched to the first
-## specifier, the second to the second specifier and so forth.  If there are
-## more words than specifiers, the process is repeated until all words have
-## been processed.
+## specifier,
+## the second to the second specifier and so forth.  If there are more words
+## than
+## specifiers, the process is repeated until all words have been processed.
 ##
 ## The string @var{format} describes how the words in @var{str} should be
 ## parsed.
 ## It may contain any combination of the following specifiers:
 ## @table @code
 ## @item %s
 ## The word is parsed as a string.
 ##
@@ -218,30 +219,31 @@ function varargout = strread (str, forma
       case "whitespace"
         white_spaces = varargin{n+1};
       ## The following parameters are specific to textscan and textread
       case "endofline"
         eol_char = varargin{n+1};
       case "returnonerror"
         err_action = varargin{n+1};
       case "treatasempty"
-        if (iscellstr (varargin{n+1}))
-          empty_str = varargin{n+1};
-        elseif (ischar (varargin{n+1}))
-          empty_str = varargin(n+1);
-        else
-          error ('strread: "treatasempty" value must be string or cellstr');
+        empty_str = varargin{n+1};
+        if (ischar (empty_str))
+          empty_str = {empty_str};
         endif
       otherwise
         warning ('strread: unknown property "%s"', varargin{n});
     endswitch
   endfor
 
   ## Parse format string to compare nr. of conversion fields and nargout
-  nfields = length (strfind (format, "%")) - length (strfind (format, "%*"));
+  idx = strfind (format, "%")';
+  specif = format([idx, idx+1]);
+  nspecif = length (idx);
+  idx_star = strfind (format, "%*");
+  nfields = length (idx) - length (idx_star);
   ## If str only has numeric fields, a (default) format ("%f") will do.
   ## Otherwise:
   if ((max (nargout, 1) != nfields) && ! strcmp (format, "%f"))
     error ("strread: the number of output variables must match that specified by FORMAT");
   endif
 
   ## Remove comments
   if (comment_flag)
@@ -293,17 +295,16 @@ function varargout = strread (str, forma
         fmt_words{idy2(ii)+1} = fmt_words{idy2(ii)+1}(b{ii}+1:end);
       endif
     endfor
   endif
   num_words_per_line = numel (fmt_words);
 
   if (! isempty (white_spaces))
     ## Check for overlapping whitespaces and delimiters & trim whitespace
-    ## FIXME: Can this section be replaced by call to setdiff() ?
     if (! isempty (delimiter_str))
       [ovlp, iw] = intersect (white_spaces, delimiter_str);
       if (! isempty (ovlp))
         ## Remove delimiter chars from white_spaces
         white_spaces = cell2mat (strsplit (white_spaces, white_spaces(iw)));
       endif
     endif
   endif
@@ -351,22 +352,25 @@ function varargout = strread (str, forma
   ## Split 'str' into words
   words = split_by (str, delimiter_str);
   if (! isempty (white_spaces))
     ## Trim leading and trailing white_spaces
     words = strtrim (words);
   endif
   num_words = numel (words);
   ## First guess at number of lines in file (ignoring leading/trailing literals)
-  num_lines = ceil (num_words / num_words_per_line);
+  if (format_repeat_count > 0)
+    num_lines = format_repeat_count;
+  else
+    num_lines = ceil (num_words / num_words_per_line);
+  endif
 
   ## Replace TreatAsEmpty char sequences by empty strings
   if (! isempty (empty_str))
     ## FIXME: There should be a simpler way to do this with cellfun
-    ##        or possibly with regexprep
     for ii = 1:numel (empty_str)
       idz = strmatch (empty_str{ii}, words, "exact");
       words(idz) = {""};
     endfor
   endif
   
   ## We now may have to cope with 3 cases:
   ## A: Trailing literals (%f<literal>) w/o delimiter in between.
@@ -388,31 +392,33 @@ function varargout = strread (str, forma
   ## If needed, split up columns in three steps:
   if (! isempty (idy))
     ## Try-catch because complexity of strings to read can be infinite    
     try
 
       ## 1. Assess "period" in the split-up words array ( < num_words_per_line).
       ## Could be done using EndOfLine but that prohibits EndOfLine = "" option.
       fmt_in_word = cell (num_words_per_line, 1);
-      words_period = litptr = 1;
+      words_period = 1;
       ## For each literal in turn
       for ii = 1:numel (idy)
         fmt_in_word(idy(ii)) = num_words;
         ## Find *current* "return period" for fmt_word{idy(ii)} in words 
         ## Search in first num_words_per_line of words
         litptrs = find (! cellfun ("isempty", strfind ...
                    (words(1:min (10*num_words_per_line, num_words)), ...
                    fmt_words{idy(ii)})));
         if (length (litptrs) > 1)
           litptr = sum (unique (litptrs(2:end) .- litptrs(1:end-1)));
         endif
       endfor
       words_period = max (words_period, litptr);
-      num_lines = ceil (num_words / words_period);
+      if (format_repeat_count < 0)
+        num_lines = ceil (num_words / words_period);
+      endif
 
       ## 2. Pad words array so that it can be reshaped
       tmp_lines = ceil (num_words / words_period);
       num_words_padded = tmp_lines * words_period - num_words;
       if (num_words_padded)
         words = [words'; cell(num_words_padded, 1)]; 
       endif
       words = reshape (words, words_period, tmp_lines);
@@ -487,17 +493,17 @@ function varargout = strread (str, forma
       words = reshape (words, 1, numel (words))(1 : end-num_words_padded);
 
     catch
       warning ("strread: unable to parse text or file with given format string");
       return;
 
     end_try_catch
   endif
-  
+ 
   ## For each specifier, process corresponding column
   k = 1;
   for m = 1:num_words_per_line
     try
       if (format_repeat_count < 0)
         data = words(m:num_words_per_line:end);
       elseif (format_repeat_count == 0)
         data = {};
@@ -686,8 +692,10 @@ endfunction
 %! assert (isempty (c{2}{3}), true);
 
 %!test
 %! # No delimiters at all besides EOL.  Skip fields, even empty fields
 %! str = "Text1Text2Text\nTextText4Text\nText57Text";
 %! c = textscan (str, "Text%*dText%dText");
 %! assert (c{1}, [2; 4; NaN]);
 
+%!assert (isequal (strread ("1 2 3 4", "%d", 2), [1; 2]))
+
