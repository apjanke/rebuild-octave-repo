# HG changeset patch
# User Rik <rik@octave.org>
# Date 1489343272 25200
#      Sun Mar 12 11:27:52 2017 -0700
# Branch stable
# Node ID afa48a26e684d7c2641ec6e262038532a17de087
# Parent  b53dfa60f045670dece3b059b1358d584fb2a13f
datenum.m: Accept legal input of vectors with fractional months (bug #50508).

* datenum.m: Accept vector inputs which contain fractional months.  Include the
effects of leap years for fractional February months.  Add BIST tests for February
calculations.

diff --git a/scripts/time/datenum.m b/scripts/time/datenum.m
--- a/scripts/time/datenum.m
+++ b/scripts/time/datenum.m
@@ -118,29 +118,27 @@ function [days, secs] = datenum (year, m
   endif
 
   if (! (isa (year, "double") && isa (month, "double")
          && isa (day, "double") && isa (hour, "double")
          && isa (minute, "double") && isa (second, "double")))
     error ("datenum: all inputs must be of class double");
   endif
 
-  month(month < 1) = 1;  # For compatibility.  Otherwise allow negative months.
+  ## For Matlab compatibility.  Otherwise, could allow negative months.
+  month(month < 1) = 1;
 
   ## Treat fractional months, by converting the fraction to days
-  if (floor (month) != month)
+  if (any (month != fix (month)))
     fracmonth = month - floor (month);
     month = floor (month);
-    if ((mod (month-1,12) + 1) == 2
-        && (floor (year/4) - floor (year/100) + floor (year/400)) != 0)
-      ## leap year
-      day += fracmonth * 29;
-    else
-      day += fracmonth * monthlength ((mod (month-1,12) + 1));
-    endif
+    ## Separate regular months from leap months
+    idx = mod (month-1,12) + 1 != 2 | ! is_leap_year (floor (year));
+    day(idx) += fracmonth(idx) .* monthlength ((mod (month(idx)-1,12) + 1));
+    day(! idx) += fracmonth(! idx) * 29;
   endif
 
   ## Set start of year to March by moving Jan. and Feb. to previous year.
   ## Correct for months > 12 by moving to subsequent years.
   year += ceil ((month-14)/12);
 
   ## Lookup number of days since start of the current year.
   if (numel (month) == 1 || numel (day) == 1)
@@ -171,45 +169,52 @@ endfunction
 
 %!shared part
 %! part = 0.514623842592593;
 %!assert (datenum (2001,5,19), 730990)
 %!assert (datenum ([1417,6,12]), 517712)
 %!assert (datenum ([2001,5,19;1417,6,12]), [730990;517712])
 %!assert (datenum (2001,5,19,12,21,3.5), 730990+part, eps)
 %!assert (datenum ([1417,6,12,12,21,3.5]), 517712+part, eps)
+
 ## Test vector inputs
 %!test
 %! t = [2001,5,19,12,21,3.5; 1417,6,12,12,21,3.5];
 %! n = [730990; 517712] + part;
 %! assert (datenum (t), n, 2*eps);
 %! ## Check that vectors can have either orientation
 %! t = t';
 %! n = n';
 %! assert (datenum (t(1,:), t(2,:), t(3,:), t(4,:), t(5,:), t(6,:)), n, 2*eps);
 
+## Test fractional months including leap months
+%!assert (fix (datenum ([2001 1.999 1; 2001 2.999 1])), [730882; 730910])
+%!assert (fix (datenum ([2004 1.999 1; 2004 2.999 1])), [731977; 732006])
+
 ## Test mixed vectors and scalars
 %!assert (datenum ([2008;2009],1,1), [datenum(2008,1,1);datenum(2009,1,1)])
 %!assert (datenum (2008, [1;2], 1), [datenum(2008,1,1);datenum(2008,2,1)])
 %!assert (datenum (2008, 1, [1;2]), [datenum(2008,1,1);datenum(2008,1,2)])
 %!assert (datenum ([2008;2009], [1;2], 1), [datenum(2008,1,1);datenum(2009,2,1)])
 %!assert (datenum ([2008;2009], 1, [1;2]), [datenum(2008,1,1);datenum(2009,1,2)])
 %!assert (datenum (2008, [1;2], [1;2]), [datenum(2008,1,1);datenum(2008,2,2)])
 ## And the other orientation
 %!assert (datenum ([2008 2009], 1, 1), [datenum(2008,1,1) datenum(2009,1,1)])
 %!assert (datenum (2008, [1 2], 1), [datenum(2008,1,1) datenum(2008,2,1)])
 %!assert (datenum (2008, 1, [1 2]), [datenum(2008,1,1) datenum(2008,1,2)])
 %!assert (datenum ([2008 2009], [1 2], 1), [datenum(2008,1,1) datenum(2009,2,1)])
 %!assert (datenum ([2008 2009], 1, [1 2]), [datenum(2008,1,1) datenum(2009,1,2)])
 %!assert (datenum (2008, [1 2], [1 2]), [datenum(2008,1,1) datenum(2008,2,2)])
+
 ## Test string and cellstr inputs
 %!assert (datenum ("5/19/2001"), 730990)
 %!assert (datenum ({"5/19/2001"}), 730990)
 %!assert (datenum (char ("5/19/2001", "6/6/1944")), [730990; 710189])
 %!assert (datenum ({"5/19/2001", "6/6/1944"}), [730990; 710189])
+
 ## Test string input with format string
 %!assert (datenum ("5-19, 2001", "mm-dd, yyyy"), 730990)
 
 ## Test input validation
 %!error datenum ()
 %!error datenum (1,2,3,4,5,6,7)
 %!error <expected date vector containing> datenum ([1, 2])
 %!error <expected date vector containing> datenum ([1,2,3,4,5,6,7])
