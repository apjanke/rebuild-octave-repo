# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1497638555 14400
#      Fri Jun 16 14:42:35 2017 -0400
# Node ID 0a6e87804cabfbd80b903b952f1da84b98603067
# Parent  fea9218bd43dc0b2022c4830fcff1871969d8e72
don't use singleton pattern for dynamic_loader class

* dynamic-ld.h, dynamic-ld.cc (dynamic_loader): Don't use singleton.
Use Octave coding standard for member names.  Change all uses.

* interpreter.h, interpreter.cc (interpreter::m_dynamic_loader):
New data member.
(interpreter::get_dynamic_loader): New access function.

* interpreter-private.h interpreter-private.cc
(__get_dynamic_loader__): New function.

diff --git a/libinterp/corefcn/dynamic-ld.cc b/libinterp/corefcn/dynamic-ld.cc
--- a/libinterp/corefcn/dynamic-ld.cc
+++ b/libinterp/corefcn/dynamic-ld.cc
@@ -31,164 +31,148 @@ along with Octave; see the file COPYING.
 #include "oct-env.h"
 #include "oct-time.h"
 #include "singleton-cleanup.h"
 
 #include "defaults.h"
 #include "defun.h"
 #include "dynamic-ld.h"
 #include "interpreter-private.h"
+#include "interpreter.h"
 #include "ov-fcn.h"
 #include "ov-dld-fcn.h"
 #include "ov-mex-fcn.h"
 #include "parse.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
 
 #define STRINGIFY(s) STRINGIFY1(s)
 #define STRINGIFY1(s) #s
 
 namespace octave
 {
   void
   dynamic_loader::shlibs_list::append (const dynamic_library& shl)
   {
-    lib_list.push_back (shl);
+    m_lib_list.push_back (shl);
   }
 
   std::list<std::string>
   dynamic_loader::shlibs_list::remove (dynamic_library& shl)
   {
     std::list<std::string> removed_fcns;
 
-    for (iterator p = lib_list.begin (); p != lib_list.end (); p++)
+    for (iterator p = m_lib_list.begin (); p != m_lib_list.end (); p++)
       {
         if (*p == shl)
           {
-            lib_list.erase (p);
+            m_lib_list.erase (p);
 
             removed_fcns = shl.close ();
 
             break;
           }
       }
 
     return removed_fcns;
   }
 
   dynamic_library
   dynamic_loader::shlibs_list::find_file (const std::string& file_name) const
   {
     dynamic_library retval;
 
-    for (const auto& lib : lib_list)
+    for (const auto& lib : m_lib_list)
       {
         if (lib.file_name () == file_name)
           {
             retval = lib;
             break;
           }
       }
 
     return retval;
   }
 
   void
   dynamic_loader::shlibs_list::display (void) const
   {
     std::cerr << "current shared libraries:" << std::endl;
-    for (const auto& lib : lib_list)
+    for (const auto& lib : m_lib_list)
       std::cerr << "  " << lib.file_name () << std::endl;
   }
 
-  dynamic_loader *dynamic_loader::instance = nullptr;
-
-  bool dynamic_loader::doing_load = false;
-
-  bool
-  dynamic_loader::instance_ok (void)
-  {
-    bool retval = true;
-
-    if (! instance)
-      {
-        instance = new dynamic_loader ();
-
-        if (instance)
-          singleton_cleanup_list::add (cleanup_instance);
-      }
-
-    if (! instance)
-      error ("unable to create dynamic loader object!");
-
-    return retval;
-  }
-
   void
-  dynamic_loader::do_clear_function (const std::string& fcn_name)
+  dynamic_loader::clear_function (const std::string& fcn_name)
   {
     warning_with_id ("Octave:reload-forces-clear", "  %s", fcn_name.c_str ());
 
-    symbol_table& symtab
-      = __get_symbol_table__ ("dynamic_loader::do_clear_function");
+    // FIXME: is there a way to avoid this?  Can we manage the list of
+    // functions that are loaded in the symbol table completely outside
+    // of the dynamic_loader class?
+
+    symbol_table& symtab = m_interpreter.get_symbol_table ();
 
     symtab.clear_dld_function (fcn_name);
   }
 
   void
-  dynamic_loader::do_clear (dynamic_library& oct_file)
+  dynamic_loader::clear (dynamic_library& oct_file)
   {
     if (oct_file.number_of_functions_loaded () > 1)
       {
         warning_with_id ("Octave:reload-forces-clear",
                          "reloading %s clears the following functions:",
                          oct_file.file_name ().c_str ());
 
-        std::list<std::string> removed_fcns = loaded_shlibs.remove (oct_file);
+        std::list<std::string> removed_fcns = m_loaded_shlibs.remove (oct_file);
 
         for (const auto& fcn_name : removed_fcns)
-          do_clear_function (fcn_name);
+          clear_function (fcn_name);
       }
     else
       {
-        std::list<std::string> removed_fcns = loaded_shlibs.remove (oct_file);
+        std::list<std::string> removed_fcns = m_loaded_shlibs.remove (oct_file);
 
-        symbol_table& symtab
-          = __get_symbol_table__ ("dynamic_loader::do_clear");
+        // FIXME: is there a way to avoid this?  Can we manage the list
+        // of functions that are loaded in the symbol table completely
+        // outside of the dynamic_loader class?
+
+        symbol_table& symtab = m_interpreter.get_symbol_table ();
 
         for (const auto& fcn_name : removed_fcns)
           symtab.clear_dld_function (fcn_name);
       }
   }
 
   octave_function *
-  dynamic_loader::do_load_oct (const std::string& fcn_name,
-                               const std::string& file_name,
-                               bool relative)
+  dynamic_loader::load_oct (const std::string& fcn_name,
+                            const std::string& file_name,
+                            bool relative)
   {
     octave_function *retval = nullptr;
 
     unwind_protect frame;
 
-    frame.protect_var (dynamic_loader::doing_load);
+    frame.protect_var (m_doing_load);
 
-    doing_load = true;
+    m_doing_load = true;
 
-    dynamic_library oct_file = loaded_shlibs.find_file (file_name);
+    dynamic_library oct_file = m_loaded_shlibs.find_file (file_name);
 
     if (oct_file && oct_file.is_out_of_date ())
-      do_clear (oct_file);
+      clear (oct_file);
 
     if (! oct_file)
       {
         oct_file.open (file_name);
 
         if (oct_file)
-          loaded_shlibs.append (oct_file);
+          m_loaded_shlibs.append (oct_file);
       }
 
     if (! oct_file)
       error ("%s is not a valid shared library", file_name.c_str ());
 
     void *function = oct_file.search (fcn_name, name_mangler);
 
     if (! function)
@@ -210,39 +194,39 @@ namespace octave
           error ("failed to install .oct file function '%s'",
                  fcn_name.c_str ());
       }
 
     return retval;
   }
 
   octave_function *
-  dynamic_loader::do_load_mex (const std::string& fcn_name,
-                               const std::string& file_name,
-                               bool /*relative*/)
+  dynamic_loader::load_mex (const std::string& fcn_name,
+                            const std::string& file_name,
+                            bool /*relative*/)
   {
     octave_function *retval = nullptr;
 
     unwind_protect frame;
 
-    frame.protect_var (dynamic_loader::doing_load);
+    frame.protect_var (m_doing_load);
 
-    doing_load = true;
+    m_doing_load = true;
 
-    dynamic_library mex_file = loaded_shlibs.find_file (file_name);
+    dynamic_library mex_file = m_loaded_shlibs.find_file (file_name);
 
     if (mex_file && mex_file.is_out_of_date ())
-      do_clear (mex_file);
+      clear (mex_file);
 
     if (! mex_file)
       {
         mex_file.open (file_name);
 
         if (mex_file)
-          loaded_shlibs.append (mex_file);
+          m_loaded_shlibs.append (mex_file);
       }
 
     if (! mex_file)
       error ("%s is not a valid shared library", file_name.c_str ());
 
     void *function = nullptr;
 
     bool have_fmex = false;
@@ -269,85 +253,53 @@ namespace octave
       retval = new octave_mex_function (function, have_fmex, mex_file, fcn_name);
     else
       error ("failed to install .mex file function '%s'", fcn_name.c_str ());
 
     return retval;
   }
 
   bool
-  dynamic_loader::do_remove_oct (const std::string& fcn_name,
-                                 dynamic_library& shl)
-  {
-    bool retval = false;
-
-    // We don't need to do anything if this is called because we are in
-    // the process of reloading a .oct file that has changed.
-
-    if (! doing_load)
-      {
-        retval = shl.remove (fcn_name);
-
-        if (shl.number_of_functions_loaded () == 0)
-          loaded_shlibs.remove (shl);
-      }
-
-    return retval;
-  }
-
-  bool
-  dynamic_loader::do_remove_mex (const std::string& fcn_name,
-                                 dynamic_library& shl)
+  dynamic_loader::remove_oct (const std::string& fcn_name,
+                              dynamic_library& shl)
   {
     bool retval = false;
 
     // We don't need to do anything if this is called because we are in
     // the process of reloading a .oct file that has changed.
 
-    if (! doing_load)
+    if (! m_doing_load)
       {
         retval = shl.remove (fcn_name);
 
         if (shl.number_of_functions_loaded () == 0)
-          loaded_shlibs.remove (shl);
+          m_loaded_shlibs.remove (shl);
       }
 
     return retval;
   }
 
-  octave_function *
-  dynamic_loader::load_oct (const std::string& fcn_name,
-                            const std::string& file_name,
-                            bool relative)
-  {
-    return (instance_ok ())
-      ? instance->do_load_oct (fcn_name, file_name, relative) : 0;
-  }
-
-  octave_function *
-  dynamic_loader::load_mex (const std::string& fcn_name,
-                            const std::string& file_name,
-                            bool relative)
-  {
-    return (instance_ok ())
-      ? instance->do_load_mex (fcn_name, file_name, relative) : 0;
-  }
-
-  bool
-  dynamic_loader::remove_oct (const std::string& fcn_name,
-                              dynamic_library& shl)
-  {
-    return (instance_ok ()) ? instance->do_remove_oct (fcn_name, shl) : false;
-  }
-
   bool
   dynamic_loader::remove_mex (const std::string& fcn_name,
                               dynamic_library& shl)
   {
-    return (instance_ok ()) ? instance->do_remove_mex (fcn_name, shl) : false;
+    bool retval = false;
+
+    // We don't need to do anything if this is called because we are in
+    // the process of reloading a .oct file that has changed.
+
+    if (! m_doing_load)
+      {
+        retval = shl.remove (fcn_name);
+
+        if (shl.number_of_functions_loaded () == 0)
+          m_loaded_shlibs.remove (shl);
+      }
+
+    return retval;
   }
 
   std::string
   dynamic_loader::name_mangler (const std::string& name)
   {
     return "G" + name;
   }
 
diff --git a/libinterp/corefcn/dynamic-ld.h b/libinterp/corefcn/dynamic-ld.h
--- a/libinterp/corefcn/dynamic-ld.h
+++ b/libinterp/corefcn/dynamic-ld.h
@@ -29,114 +29,97 @@ along with Octave; see the file COPYING.
 #include <string>
 
 #include "oct-shlib.h"
 
 class octave_function;
 
 namespace octave
 {
+  class interpreter;
+
   class
   dynamic_loader
   {
   private:
 
     class
     shlibs_list
     {
     public:
 
       typedef std::list<octave::dynamic_library>::iterator iterator;
       typedef std::list<octave::dynamic_library>::const_iterator const_iterator;
 
-      shlibs_list (void) : lib_list () { }
+      shlibs_list (void) : m_lib_list () { }
+
+      // No copying!
+
+      shlibs_list (const shlibs_list&) = delete;
+
+      shlibs_list& operator = (const shlibs_list&) = delete;
 
       ~shlibs_list (void) = default;
 
       void append (const octave::dynamic_library& shl);
 
       std::list<std::string> remove (octave::dynamic_library& shl);
 
       octave::dynamic_library find_file (const std::string& file_name) const;
 
       void display (void) const;
 
     private:
 
-      // No copying!
-
-      shlibs_list (const shlibs_list&) = delete;
-
-      shlibs_list& operator = (const shlibs_list&) = delete;
-
       // List of libraries we have loaded.
-      std::list<octave::dynamic_library> lib_list;
+      std::list<octave::dynamic_library> m_lib_list;
     };
 
-  protected:
-
-    dynamic_loader (void) : loaded_shlibs () { }
 
   public:
 
+    dynamic_loader (interpreter& interp)
+      : m_interpreter (interp), m_loaded_shlibs (), m_doing_load (false)
+    { }
+
     // No copying!
 
     dynamic_loader (const dynamic_loader&) = delete;
 
     dynamic_loader& operator = (const dynamic_loader&) = delete;
 
     virtual ~dynamic_loader (void) = default;
 
-    static octave_function *
+    octave_function *
     load_oct (const std::string& fcn_name,
               const std::string& file_name = "",
               bool relative = false);
 
-    static octave_function *
+    octave_function *
     load_mex (const std::string& fcn_name,
               const std::string& file_name = "",
               bool relative = false);
 
-    static bool remove_oct (const std::string& fcn_name,
+    bool remove_oct (const std::string& fcn_name,
                             octave::dynamic_library& shl);
 
-    static bool remove_mex (const std::string& fcn_name,
+    bool remove_mex (const std::string& fcn_name,
                             octave::dynamic_library& shl);
 
   private:
 
-    static dynamic_loader *instance;
-
-    static void cleanup_instance (void) { delete instance; instance = 0; }
-
-    static bool instance_ok (void);
+    void clear_function (const std::string& fcn_name);
 
-    static void do_clear_function (const std::string& fcn_name);
-
-    void do_clear (octave::dynamic_library& oct_file);
-
-    octave_function *
-    do_load_oct (const std::string& fcn_name,
-                 const std::string& file_name = "",
-                 bool relative = false);
+    void clear (octave::dynamic_library& oct_file);
 
-    octave_function *
-    do_load_mex (const std::string& fcn_name,
-                 const std::string& file_name = "",
-                 bool relative = false);
-
-    bool do_remove_oct (const std::string& fcn_name, octave::dynamic_library& shl);
+    interpreter& m_interpreter;
 
-    bool do_remove_mex (const std::string& fcn_name, octave::dynamic_library& shl);
-
-    static bool doing_load;
+    shlibs_list m_loaded_shlibs;
 
-  protected:
-
-    shlibs_list loaded_shlibs;
+    bool m_doing_load;
 
     static std::string name_mangler (const std::string& name);
 
     static std::string name_uscore_mangler (const std::string& name);
 
     static std::string mex_mangler (const std::string& name);
 
     static std::string mex_uscore_mangler (const std::string& name);
diff --git a/libinterp/corefcn/interpreter-private.cc b/libinterp/corefcn/interpreter-private.cc
--- a/libinterp/corefcn/interpreter-private.cc
+++ b/libinterp/corefcn/interpreter-private.cc
@@ -43,16 +43,23 @@ namespace octave
       {
         abort ();
         error ("%s: interpreter context missing", who.c_str ());
       }
 
     return *interp;
   }
 
+  dynamic_loader& __get_dynamic_loader__ (const std::string& who)
+  {
+    interpreter& interp = __get_interpreter__ (who);
+
+    return interp.get_dynamic_loader ();
+  }
+
   load_path& __get_load_path__ (const std::string& who)
   {
     interpreter& interp = __get_interpreter__ (who);
 
     return interp.get_load_path ();
   }
 
   symbol_table& __get_symbol_table__ (const std::string& who)
diff --git a/libinterp/corefcn/interpreter-private.h b/libinterp/corefcn/interpreter-private.h
--- a/libinterp/corefcn/interpreter-private.h
+++ b/libinterp/corefcn/interpreter-private.h
@@ -28,21 +28,24 @@ along with Octave; see the file COPYING.
 #include <string>
 
 #include "symtab.h"
 
 namespace octave
 {
   class call_stack;
   class interpreter;
+  class dynamic_loader;
   class load_path;
   class tree_evaluator;
 
   extern interpreter& __get_interpreter__ (const std::string& who);
 
+  extern dynamic_loader& __get_dynamic_loader__ (const std::string& who);
+
   extern load_path& __get_load_path__ (const std::string& who);
 
   extern symbol_table& __get_symbol_table__ (const std::string& who);
 
   extern symbol_table::scope *__get_current_scope__ (const std::string& who);
 
   extern symbol_table::scope *
   __require_current_scope__ (const std::string& who);
diff --git a/libinterp/corefcn/interpreter.cc b/libinterp/corefcn/interpreter.cc
--- a/libinterp/corefcn/interpreter.cc
+++ b/libinterp/corefcn/interpreter.cc
@@ -367,21 +367,28 @@ execute_pkg_add (const std::string& dir)
 
 namespace octave
 {
   // Create an interpreter object and perform initialization up to the
   // point of setting reading command history and setting the load
   // path.
 
   interpreter::interpreter (application *app_context)
-    : m_app_context (app_context), m_load_path (), m_symbol_table (),
-      m_evaluator (new tree_evaluator (*this)), m_interactive (false),
-      m_read_site_files (true), m_read_init_files (m_app_context != 0),
-      m_verbose (false), m_inhibit_startup_message (false),
-      m_load_path_initialized (false), m_history_initialized (false),
+    : m_app_context (app_context),
+      m_dynamic_loader (*this),
+      m_load_path (),
+      m_symbol_table (),
+      m_evaluator (new tree_evaluator (*this)),
+      m_interactive (false),
+      m_read_site_files (true),
+      m_read_init_files (m_app_context != 0),
+      m_verbose (false),
+      m_inhibit_startup_message (false),
+      m_load_path_initialized (false),
+      m_history_initialized (false),
       m_initialized (false)
   {
     if (instance)
       throw std::runtime_error
         ("only one Octave interpreter object may be active");
 
     instance = this;
 
diff --git a/libinterp/corefcn/interpreter.h b/libinterp/corefcn/interpreter.h
--- a/libinterp/corefcn/interpreter.h
+++ b/libinterp/corefcn/interpreter.h
@@ -25,16 +25,17 @@ along with Octave; see the file COPYING.
 
 #include "octave-config.h"
 
 #include <string>
 
 #include "quit.h"
 #include "str-vec.h"
 
+#include "dynamic-ld.h"
 #include "load-path.h"
 #include "symtab.h"
 
 extern OCTINTERP_API bool quit_allowed;
 
 // TRUE means we are ready to interpret commands, but not everything
 // is ready for interactive use.
 extern OCTINTERP_API bool octave_interpreter_ready;
@@ -129,16 +130,21 @@ namespace octave
       m_inhibit_startup_message = flag;
     }
 
     bool initialized (void) const
     {
       return m_initialized;
     }
 
+    dynamic_loader& get_dynamic_loader (void)
+    {
+      return m_dynamic_loader;
+    }
+
     load_path& get_load_path (void)
     {
       return m_load_path;
     }
 
     symbol_table& get_symbol_table (void)
     {
       return m_symbol_table;
@@ -176,16 +182,18 @@ namespace octave
     int execute_command_line_file (void);
 
     int main_loop (void);
 
     void cleanup (void);
 
     application *m_app_context;
 
+    dynamic_loader m_dynamic_loader;
+
     load_path m_load_path;
 
     symbol_table m_symbol_table;
 
     tree_evaluator *m_evaluator;
 
     // TRUE means this is an interactive interpreter (forced or not).
     bool m_interactive;
diff --git a/libinterp/octave-value/ov-dld-fcn.cc b/libinterp/octave-value/ov-dld-fcn.cc
--- a/libinterp/octave-value/ov-dld-fcn.cc
+++ b/libinterp/octave-value/ov-dld-fcn.cc
@@ -24,16 +24,17 @@ along with Octave; see the file COPYING.
 #  include "config.h"
 #endif
 
 #include "oct-shlib.h"
 
 #include "defaults.h"
 #include "dynamic-ld.h"
 #include "error.h"
+#include "interpreter-private.h"
 #include "ovl.h"
 #include "ov-dld-fcn.h"
 #include "ov.h"
 
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_dld_function,
                                      "dynamically-linked function",
                                      "dynamically-linked function");
@@ -63,17 +64,20 @@ octave_dld_function::octave_dld_function
 
   system_fcn_file
     = (! file_name.empty ()
        && Voct_file_dir == file_name.substr (0, Voct_file_dir.length ()));
 }
 
 octave_dld_function::~octave_dld_function (void)
 {
-  octave::dynamic_loader::remove_oct (my_name, sh_lib);
+  octave::dynamic_loader& dyn_loader
+    = octave::__get_dynamic_loader__ ("~octave_dld_function");
+
+  dyn_loader.remove_oct (my_name, sh_lib);
 }
 
 std::string
 octave_dld_function::fcn_file_name (void) const
 {
   return sh_lib.file_name ();
 }
 
diff --git a/libinterp/octave-value/ov-mex-fcn.cc b/libinterp/octave-value/ov-mex-fcn.cc
--- a/libinterp/octave-value/ov-mex-fcn.cc
+++ b/libinterp/octave-value/ov-mex-fcn.cc
@@ -58,17 +58,20 @@ octave_mex_function::octave_mex_function
        && Voct_file_dir == file_name.substr (0, Voct_file_dir.length ()));
 }
 
 octave_mex_function::~octave_mex_function (void)
 {
   if (m_exit_fcn_ptr)
     (*m_exit_fcn_ptr) ();
 
-  octave::dynamic_loader::remove_mex (my_name, m_sh_lib);
+  octave::dynamic_loader& dyn_loader
+    = octave::__get_dynamic_loader__ ("~octave_mex_function");
+
+  dyn_loader.remove_mex (my_name, m_sh_lib);
 }
 
 std::string
 octave_mex_function::fcn_file_name (void) const
 {
   return m_sh_lib.file_name ();
 }
 
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -4530,35 +4530,38 @@ namespace octave
       }
 
     relative_lookup = ! octave::sys::env::absolute_pathname (file);
 
     file = octave::sys::env::make_absolute (file);
 
     int len = file.length ();
 
+      octave::dynamic_loader& dyn_loader
+        = __get_dynamic_loader__ ("~octave_mex_function");
+
     if (len > 4 && file.substr (len-4, len-1) == ".oct")
       {
         if (autoload && ! fcn_name.empty ())
           nm = fcn_name;
 
-        retval = octave::dynamic_loader::load_oct (nm, file, relative_lookup);
+        retval = dyn_loader.load_oct (nm, file, relative_lookup);
       }
     else if (len > 4 && file.substr (len-4, len-1) == ".mex")
       {
         // Temporarily load m-file version of mex-file, if it exists,
         // to get the help-string to use.
 
         octave_function *tmpfcn = parse_fcn_file (file.substr (0, len - 2),
                                                   nm, dispatch_type,
                                                   package_name, false,
                                                   autoload, autoload,
                                                   relative_lookup, "");
 
-        retval = octave::dynamic_loader::load_mex (nm, file, relative_lookup);
+        retval = dyn_loader.load_mex (nm, file, relative_lookup);
 
         if (tmpfcn)
           retval->document (tmpfcn->doc_string ());
         delete tmpfcn;
       }
     else if (len > 2)
       {
         retval = parse_fcn_file (file, nm, dispatch_type, package_name, true,
