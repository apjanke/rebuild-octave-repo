# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1519955838 28800
#      Thu Mar 01 17:57:18 2018 -0800
# Branch stable
# Node ID 261d23b8933b561de97ee4577f674dc117ffb39c
# Parent  e098b0fb11abfcaa4b0ae7d37175f3e71277f9f8
test: ensure all unit tests restore global random state after setting it

* conv2.cc: Restore the rand "seed" and "state" after setting a fixed "seed".
* rand.cc: Restore the "seed" and "state" parameters for all rand functions
after completing all unit tests.
* eigs.m: Restore the rand "state" after setting a fixed "state" for each
block of tests.
* median.m: Restore the rand "state" after setting a fixed "state".

diff --git a/libinterp/corefcn/conv2.cc b/libinterp/corefcn/conv2.cc
--- a/libinterp/corefcn/conv2.cc
+++ b/libinterp/corefcn/conv2.cc
@@ -259,17 +259,33 @@ When the third argument is a matrix, ret
 %!                [4 7 10 13 10; 4 7 10 13 10])
 %!assert <34893> (conv2 ([1:5;1:5]', [1:2]', "same"),
 %!                [4 7 10 13 10; 4 7 10 13 10]')
 %!assert <34893> (conv2 ([1:5;1:5], [1:2], "valid"),
 %!                [4 7 10 13; 4 7 10 13])
 %!assert <34893> (conv2 ([1:5;1:5]', [1:2]', "valid"),
 %!                [4 7 10 13; 4 7 10 13]')
 
+%% Restore the rand "seed" and "state" values in order, so that the
+%% new "state" algorithm remains active after these tests complete.
+%!function restore_rand_state (seed, state)
+%!  rand ("seed", seed);
+%!  rand ("state", state);
+%!endfunction
+
+%% FIXME: This test only passes when using the "old" random number
+%%        generator by setting the "seed" parameter to any value.  If
+%%        the "state" parameter is used, the test fails.  This probably
+%%        indicates that this test is particularly fragile.  This might
+%%        need further investigation or a rewrite, for example using
+%%        random integer values to avoid precision overflow.
 %!test
+%! old_seed = rand ("seed");
+%! old_state = rand ("state");
+%! restore_state = onCleanup (@() restore_rand_state (old_seed, old_state));
 %! rand ("seed", 42);
 %! x = rand (100);
 %! y = ones (5);
 %! A = conv2 (x, y)(5:end-4,5:end-4);
 %! B = conv2 (x, y, "valid");
 %! assert (B, A);   # Yes, this test is for *exact* equivalence.
 
 %% Test input validation
diff --git a/libinterp/corefcn/rand.cc b/libinterp/corefcn/rand.cc
--- a/libinterp/corefcn/rand.cc
+++ b/libinterp/corefcn/rand.cc
@@ -39,19 +39,47 @@ along with Octave; see the file COPYING.
 #include "error.h"
 #include "errwarn.h"
 #include "ovl.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "ov-re-mat.h"
 
 /*
-%!shared __random_statistical_tests__
+%% Restore all rand* "seed" and "state" values in order, so that the
+%% new "state" algorithm remains active after these tests complete.
+%!function restore_rand_states (seed, state)
+%!  rand ("seed", seed.rand);
+%!  rande ("seed", seed.rande);
+%!  randg ("seed", seed.randg);
+%!  randn ("seed", seed.randn);
+%!  randp ("seed", seed.randp);
+%!  rand ("state", state.rand);
+%!  rande ("state", state.rande);
+%!  randg ("state", state.randg);
+%!  randn ("state", state.randn);
+%!  randp ("state", state.randp);
+%!endfunction
+
+%!shared __random_statistical_tests__, old_seed, old_state, restore_state
 %! ## Flag whether the statistical tests should be run in "make check" or not
 %! __random_statistical_tests__ = 0;
+%! ## Save and restore the states of each of the random number generators
+%! ## that are tested by the unit tests in this file.
+%! old_seed.rand = rand ("seed");
+%! old_seed.rande = rande ("seed");
+%! old_seed.randg = randg ("seed");
+%! old_seed.randn = randn ("seed");
+%! old_seed.randp = randp ("seed");
+%! old_state.rand = rand ("state");
+%! old_state.rande = rande ("state");
+%! old_state.randg = randg ("state");
+%! old_state.randn = randn ("state");
+%! old_state.randp = randp ("state");
+%! restore_state = onCleanup (@() restore_rand_states (old_seed, old_state));
 */
 
 static octave_value
 do_rand (const octave_value_list& args, int nargin, const char *fcn,
          const std::string& distribution, bool additional_arg = false)
 {
   NDArray a;
   int idx = 0;
@@ -428,26 +456,26 @@ classes.
 %! rand ("state", [12,13]);  x = rand (1,4);
 %! rand ("state", [12;13]);  y = rand (1,4);
 %! assert (x, y);
 %!test  # querying "state" doesn't disturb sequence
 %! rand ("state", 12);  rand (1,2);  x = rand (1,2);
 %! rand ("state", 12);  rand (1,2);
 %! s = rand ("state");  y = rand (1,2);
 %! assert (x, y);
-%! rand ("state", s);  z = rand (1,2);
+%! rand ("state", s);   z = rand (1,2);
 %! assert (x, z);
 %!test  # "seed" must be a scalar
 %! rand ("seed", 12);  x = rand (1,4);
 %! rand ("seed", 12);  y = rand (1,4);
 %! assert (x, y);
 %!error <seed must be a real scalar> rand ("seed", [12,13])
 %!test  # querying "seed" returns a value which can be used later
 %! s = rand ("seed");  x = rand (1,2);
-%! rand ("seed", s);  y = rand (1,2);
+%! rand ("seed", s);   y = rand (1,2);
 %! assert (x, y);
 %!test  # querying "seed" doesn't disturb sequence
 %! rand ("seed", 12);  rand (1,2);  x = rand (1,2);
 %! rand ("seed", 12);  rand (1,2);
 %! s = rand ("seed");  y = rand (1,2);
 %! assert (x, y);
 %! rand ("seed", s);  z = rand (1,2);
 %! assert (x, z);
diff --git a/scripts/sparse/eigs.m b/scripts/sparse/eigs.m
--- a/scripts/sparse/eigs.m
+++ b/scripts/sparse/eigs.m
@@ -368,24 +368,26 @@ function out = select (args, k, sigma, r
   endif
 
 endfunction
 
 
 #### SPARSE MATRIX VERSIONS ####
 
 ## Real positive definite tests, n must be even
-%!shared n, k, A, d0, d2
+%!shared n, k, A, d0, d2, old_state, restore_state
 %! n = 20;
 %! k = 4;
 %! A = sparse ([3:n,1:n,1:(n-2)],[1:(n-2),1:n,3:n],[ones(1,n-2),4*ones(1,n),ones(1,n-2)]);
 %! d0 = eig (A);
 %! d2 = sort (d0);
 %! [~, idx] = sort (abs (d0));
 %! d0 = d0(idx);
+%! old_state = rand ("state");
+%! restore_state = onCleanup (@() rand ("state", old_state));
 %! rand ("state", 42); # initialize generator to make eigs behavior reproducible
 %!testif HAVE_ARPACK
 %! d1 = eigs (A, k);
 %! assert (d1, d0(end:-1:(end-k+1)), 1e-11);
 %!testif HAVE_ARPACK
 %! d1 = eigs (A, k+1);
 %! assert (d1, d0(end:-1:(end-k)), 1e-11);
 %!testif HAVE_ARPACK
@@ -485,23 +487,25 @@ endfunction
 %!testif HAVE_ARPACK
 %! [v1,d1] = eigs (A, k, "be");
 %! d1 = diag (d1);
 %! for i=1:k
 %!   assert (max (abs ((A - d1(i)*speye (n))*v1(:,i))), 0, 1e-11);
 %! endfor
 
 ## Real unsymmetric tests
-%!shared n, k, A, d0
+%!shared n, k, A, d0, old_state, restore_state
 %! n = 20;
 %! k = 4;
 %! A = sparse ([3:n,1:n,1:(n-2)],[1:(n-2),1:n,3:n],[ones(1,n-2),1:n,-ones(1,n-2)]);
 %! d0 = eig (A);
 %! [~, idx] = sort (abs (d0));
 %! d0 = d0(idx);
+%! old_state = rand ("state");
+%! restore_state = onCleanup (@() rand ("state", old_state));
 %! rand ("state", 42); # initialize generator to make eigs behavior reproducible
 %!testif HAVE_ARPACK
 %! d1 = eigs (A, k);
 %! assert (abs (d1), abs (d0(end:-1:(end-k+1))), 1e-11);
 %!testif HAVE_ARPACK
 %! d1 = eigs (A, k+1);
 %! assert (abs (d1), abs (d0(end:-1:(end-k))),1e-11);
 %!testif HAVE_ARPACK
@@ -612,23 +616,25 @@ endfunction
 %! [v1,d1] = eigs (A, k, "si");
 %! d1 = diag (d1);
 %! for i=1:k
 %!   assert (max (abs ((A - d1(i)*speye (n))*v1(:,i))), 0, 1e-11);
 %! endfor
 
 
 ## Complex hermitian tests
-%!shared n, k, A, d0
+%!shared n, k, A, d0, old_state, restore_state
 %! n = 20;
 %! k = 4;
 %! A = sparse ([3:n,1:n,1:(n-2)],[1:(n-2),1:n,3:n],[1i*ones(1,n-2),4*ones(1,n),-1i*ones(1,n-2)]);
 %! d0 = eig (A);
 %! [~, idx] = sort (abs (d0));
 %! d0 = d0(idx);
+%! old_state = rand ("state");
+%! restore_state = onCleanup (@() rand ("state", old_state));
 %! rand ("state", 42); # initialize generator to make eigs behavior reproducible
 %!testif HAVE_ARPACK
 %! d1 = eigs (A, k);
 %! assert (abs (d1), abs (d0(end:-1:(end-k+1))), 1e-11);
 %!testif HAVE_ARPACK
 %! d1 = eigs (A, k+1);
 %! assert (abs (d1), abs (d0(end:-1:(end-k))),1e-11);
 %!testif HAVE_ARPACK
@@ -860,24 +866,26 @@ endfunction
 %! for i = 1:5
 %!   assert (A * v(:,i), d(i, i) * B * v(:,i), 1e-12)
 %! endfor
 
 
 #### FULL MATRIX VERSIONS ####
 
 ## Real positive definite tests, n must be even
-%!shared n, k, A, d0, d2
+%!shared n, k, A, d0, d2, old_state, restore_state
 %! n = 20;
 %! k = 4;
 %! A = full (sparse ([3:n,1:n,1:(n-2)],[1:(n-2),1:n,3:n],[ones(1,n-2),4*ones(1,n),ones(1,n-2)]));
 %! d0 = eig (A);
 %! d2 = sort (d0);
 %! [~, idx] = sort (abs (d0));
 %! d0 = d0(idx);
+%! old_state = rand ("state");
+%! restore_state = onCleanup (@() rand ("state", old_state));
 %! rand ("state", 42); # initialize generator to make eigs behavior reproducible
 %!testif HAVE_ARPACK
 %! d1 = eigs (A, k);
 %! assert (d1, d0(end:-1:(end-k+1)), 1e-11);
 %!testif HAVE_ARPACK
 %! d1 = eigs (A, k+1);
 %! assert (d1, d0(end:-1:(end-k)),1e-11);
 %!testif HAVE_ARPACK
@@ -972,23 +980,25 @@ endfunction
 %!testif HAVE_ARPACK
 %! [v1,d1] = eigs (A, k, "be");
 %! d1 = diag (d1);
 %! for i=1:k
 %!   assert (max (abs ((A - d1(i)*eye (n))*v1(:,i))), 0, 1e-11);
 %! endfor
 
 ## Real unsymmetric tests
-%!shared n, k, A, d0
+%!shared n, k, A, d0, old_state, restore_state
 %! n = 20;
 %! k = 4;
 %! A = full (sparse ([3:n,1:n,1:(n-2)],[1:(n-2),1:n,3:n],[ones(1,n-2),1:n,-ones(1,n-2)]));
 %! d0 = eig (A);
 %! [~, idx] = sort (abs (d0));
 %! d0 = d0(idx);
+%! old_state = rand ("state");
+%! restore_state = onCleanup (@() rand ("state", old_state));
 %! rand ("state", 42); # initialize generator to make eigs behavior reproducible
 %!testif HAVE_ARPACK
 %! d1 = eigs (A, k);
 %! assert (abs (d1), abs (d0(end:-1:(end-k+1))), 1e-11);
 %!testif HAVE_ARPACK
 %! d1 = eigs (A, k+1);
 %! assert (abs (d1), abs (d0(end:-1:(end-k))),1e-11);
 %!testif HAVE_ARPACK
@@ -1098,23 +1108,25 @@ endfunction
 %!testif HAVE_ARPACK
 %! [v1,d1] = eigs (A, k, "si");
 %! d1 = diag (d1);
 %! for i=1:k
 %!   assert (max (abs ((A - d1(i)*eye (n))*v1(:,i))), 0, 1e-11);
 %! endfor
 
 ## Complex hermitian tests
-%!shared n, k, A, d0
+%!shared n, k, A, d0, old_state, restore_state
 %! n = 20;
 %! k = 4;
 %! A = full (sparse ([3:n,1:n,1:(n-2)],[1:(n-2),1:n,3:n],[1i*ones(1,n-2),4*ones(1,n),-1i*ones(1,n-2)]));
 %! d0 = eig (A);
 %! [~, idx] = sort (abs (d0));
 %! d0 = d0(idx);
+%! old_state = rand ("state");
+%! restore_state = onCleanup (@() rand ("state", old_state));
 %! rand ("state", 42); # initialize generator to make eigs behavior reproducible
 %!testif HAVE_ARPACK
 %! d1 = eigs (A, k);
 %! assert (abs (d1), abs (d0(end:-1:(end-k+1))), 1e-11);
 %!testif HAVE_ARPACK
 %! d1 = eigs (A, k+1);
 %! assert (abs (d1), abs (d0(end:-1:(end-k))),1e-11);
 %!testif HAVE_ARPACK
diff --git a/scripts/statistics/base/median.m b/scripts/statistics/base/median.m
--- a/scripts/statistics/base/median.m
+++ b/scripts/statistics/base/median.m
@@ -111,17 +111,19 @@ endfunction
 %! assert (median ([y2, 3*y2]), [4, 12]);
 
 %!assert (median (single ([1,2,3])), single (2))
 %!assert (median ([1,2,NaN;4,5,6;NaN,8,9]), [NaN, 5, NaN])
 %!assert (median ([1,2], 3), [1,2])
 
 ## Test multidimensional arrays
 %!shared a, b, x, y
-%! rand ("seed", 2);
+%! old_state = rand ("state");
+%! restore_state = onCleanup (@() rand ("state", old_state));
+%! rand ("state", 2);
 %! a = rand (2,3,4,5);
 %! b = rand (3,4,6,5);
 %! x = sort (a, 4);
 %! y = sort (b, 3);
 %!assert <35679> (median (a, 4), x(:, :, :, 3))
 %!assert <35679> (median (b, 3), (y(:, :, 3, :) + y(:, :, 4, :))/2)
 
 ## Test non-floating point types
