# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1322555740 18000
#      Tue Nov 29 03:35:40 2011 -0500
# Node ID c510048901cc3ce162b8e8784f3592dc487ecca9
# Parent  5fe75fb673ff312d10570f9b7ac20d8473930aec
set cross compile defaults for AC_RUN_IFELSE

* acinclude.m4 (OCTAVE_CHECK_FORTRAN_INTEGER_SIZE): If cross
compiling, assume integer size is OK.
(OCTAVE_IEEE754_DATA_FORMAT): If cross compiling, assume we have
IEEE 754 data format.
(OCTAVE_UMFPACK_SEPERATE_SPLIT): If cross compiling, assume we have
modern UMFPACK.
(OCTAVE_CHECK_QHULL_OK): If cross compiling, assume Qhull library
works.
(OCTAVE_FAST_INT_OPS): If cross compiling, assume fast int ops are
possible.  Use AC_CACHE_CHECK.

diff --git a/m4/acinclude.m4 b/m4/acinclude.m4
--- a/m4/acinclude.m4
+++ b/m4/acinclude.m4
@@ -365,17 +365,18 @@ AC_DEFUN([OCTAVE_CHECK_FORTRAN_INTEGER_S
   octave_idx_type in[2];
   octave_idx_type out[2];
   in[0] = 13;
   in[0] = 42;
   F77_FUNC(foo,FOO) (&n, &in, &out);
   assert (in[0] == out[0] && in[1] == out[1]);
 ]])],
   [octave_cv_fortran_integer_size=yes],
-  [octave_cv_fortran_integer_size=no])
+  [octave_cv_fortran_integer_size=no],
+  [octave_cv_fortran_integer_size=yes])
   AC_LANG_POP(C)dnl
   LIBS="$octave_fintsize_save_LIBS"
 rm -f conftest.$ac_objext fintsize.$ac_objext
 ], [
   rm -f conftest.$ac_objext
   AC_MSG_FAILURE([cannot compile a simple Fortran program])
   octave_cv_fortran_integer_size=no])])
   AC_LANG_POP(Fortran 77)
@@ -813,17 +814,17 @@ main (void)
    
   ieeebytes l = {0x1c, 0xbc, 0x6e, 0xf2, 0x54, 0x8b, 0x11, 0x43};
   ieeebytes b = {0x43, 0x11, 0x8b, 0x54, 0xf2, 0x6e, 0xbc, 0x1c};
 
   return l.d != 1234567891234567.0 && b.d != 1234567891234567.0;
 }]])],
   octave_cv_ieee754_data_format=yes,
   octave_cv_ieee754_data_format=no,
-  octave_cv_ieee754_data_format=no)])
+  octave_cv_ieee754_data_format=yes)])
 if test "$cross_compiling" = yes; then
   AC_MSG_RESULT([$octave_cv_ieee754_data_format assumed for cross compilation])
 else
   AC_MSG_RESULT([$octave_cv_ieee754_data_format])
 fi
 if test "$octave_cv_ieee754_data_format" = yes; then
   AC_DEFINE(HAVE_IEEE754_DATA_FORMAT, 1, [Define if your system uses IEEE 754 data format.])
 else
@@ -876,17 +877,17 @@ int main (void)
   for (i = 0; i < n; i++, x+=2) 
     if (fabs(*x - i - 1.) > 1.e-13)
       return (1);
   return (0) ;
 }
 ]])],
   octave_cv_umfpack_seperate_split=yes,
   octave_cv_umfpack_seperate_split=no,
-  octave_cv_umfpack_seperate_split=no)])
+  octave_cv_umfpack_seperate_split=yes)])
 if test "$cross_compiling" = yes; then
   AC_MSG_RESULT([$octave_cv_umfpack_seperate_split assumed for cross compilation])
 else
   AC_MSG_RESULT([$octave_cv_umfpack_seperate_split])
 fi
 if test "$octave_cv_umfpack_seperate_split" = yes; then
   AC_DEFINE(UMFPACK_SEPARATE_SPLIT, 1, [Define if the UMFPACK Complex solver allow matrix and RHS to be split independently])
 fi
@@ -957,17 +958,20 @@ AC_DEFUN([OCTAVE_CHECK_QHULL_OK],
 char *qh_version = "version";
 #endif
 ]], [[
 int dim = 2;
 int n = 4;
 coordT points[8] = { -0.5, -0.5, -0.5, 0.5, 0.5, -0.5, 0.5, 0.5 };
 boolT ismalloc = 0;
 return qh_new_qhull (dim, n, points, ismalloc, "qhull ", 0, stderr); 
-]])], [octave_cv_lib_qhull_ok=yes], [octave_cv_lib_qhull_ok=no])])
+]])],
+  [octave_cv_lib_qhull_ok=yes],
+  [octave_cv_lib_qhull_ok=no],
+  [octave_cv_lib_qhull_ok=yes])])
   if test "$octave_cv_lib_qhull_ok" = "yes"; then
     $1
   else
     $2
   fi
 ])
 dnl
 dnl Check for OpenGL.  If found, define OPENGL_LIBS
@@ -1332,19 +1336,20 @@ dnl    (see <http://en.wikipedia.org/wik
 dnl 2. static_cast to unsigned int counterpart works like interpreting
 dnl    the signed bit pattern as unsigned (and is thus zero-cost).
 dnl 3. Signed addition and subtraction yield the same bit results as unsigned.
 dnl    (We use casts to prevent optimization interference, so there is no
 dnl     need for things like -ftrapv).
 dnl 4. Bit operations on signed integers work like on unsigned integers,
 dnl    except for the shifts. Shifts are arithmetic.
 dnl
-AC_DEFUN([OCTAVE_FAST_INT_OPS],[
-AC_MSG_CHECKING([whether fast integer arithmetics is usable])
-AC_LANG_PUSH(C++)
+AC_DEFUN([OCTAVE_FAST_INT_OPS],
+[AC_CACHE_CHECK([whether fast integer arithmetics is usable],
+octave_cv_fast_int_ops,
+[AC_LANG_PUSH(C++)
 AC_RUN_IFELSE([AC_LANG_PROGRAM([[
 #include <limits>
 template<class UT, class ST>
 static bool 
 do_test (UT, ST)
 {
   volatile ST s = std::numeric_limits<ST>::min () / 3;
   volatile UT u = static_cast<UT> (s);
@@ -1378,20 +1383,25 @@ if (do_test (static_cast<unsigned T> (0)
   DO_TEST(char)
   DO_TEST(short)
   DO_TEST(int)
   DO_TEST(long)
 #if (defined(HAVE_LONG_LONG_INT) && defined(HAVE_UNSIGNED_LONG_LONG_INT))
   DO_TEST(long long)
 #endif
 ]])],
-[AC_MSG_RESULT([yes])
- AC_DEFINE(HAVE_FAST_INT_OPS,1,[Define if signed integers use two's complement])],
-[AC_MSG_RESULT([no])])
+   [octave_cv_fast_int_ops=yes],
+   [octave_cv_fast_int_ops=no],
+   [octave_cv_fast_int_ops=yes])
 AC_LANG_POP(C++)])
+if test $octave_cv_fast_int_ops = yes; then
+  AC_DEFINE(HAVE_FAST_INT_OPS, 1,
+    [Define if signed integers use two's complement])
+fi
+])
 dnl
 dnl Check to see if the compiler and the linker can handle the flags
 dnl "-framework $1" for the given prologue $2 and the given body $3 of
 dnl a source file.  Arguments 2 and 3 optionally can also be empty.
 dnl Add options (lower case letters $1) "--with-framework-$1" and
 dnl "--without-framework-$1". If this test is successful then perform
 dnl $4, otherwise do $5.
 dnl
