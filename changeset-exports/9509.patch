# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1249891690 -7200
#      Mon Aug 10 10:08:10 2009 +0200
# Node ID c5330ef7aecde74f4300fdde64f8259fa6501ea3
# Parent  e5e4e404a59df70d336ce18993e3724d73103961
fix handles to private functions, simplify out-of-date checks in symtab

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,17 @@
+2009-08-10  Jaroslav Hajek  <highegg@gmail.com>
+
+	* symtab.cc (out_of_date_check): Remove overloads. Add check_relative
+	parameter.
+	(out_of_date_check_internal): Remove.
+	* symtab.h: Update.
+	* ov-fcn-handle.cc (octave_fcn_handle::do_index_op): Call
+	out_of_date_check with check_relative = false.
+
 2009-08-09  John W. Eaton  <jwe@octave.org>
 
 	* parse.y (Fevalin): Also return output from CATCH expression.
 
 2009-08-08  Jaroslav Hajek  <highegg@gmail.com>
 
 	* data.cc (Fifelse): Rename to Fmerge, alias to Fifelse.
 
diff --git a/src/ov-fcn-handle.cc b/src/ov-fcn-handle.cc
--- a/src/ov-fcn-handle.cc
+++ b/src/ov-fcn-handle.cc
@@ -118,17 +118,17 @@ octave_fcn_handle::subsref (const std::s
 
 octave_value_list
 octave_fcn_handle::do_multi_index_op (int nargout, 
                                       const octave_value_list& args)
 {
   octave_value_list retval;
 
   if (fcn.is_defined ())
-    out_of_date_check (fcn);
+    out_of_date_check (fcn, std::string (), false);
 
   if (disp.get () && ! args.empty ())
     {
       // Possibly overloaded function.
       octave_value ovfcn = fcn;
 
       // Get dynamic (class) dispatch type.
       std::string ddt = get_dispatch_type (args);
@@ -137,27 +137,27 @@ octave_fcn_handle::do_multi_index_op (in
         {
           // Static dispatch (class of 1st arg)?
           if (! disp->empty ())
             {
               std::string sdt = args(0).class_name ();
               str_ov_map::iterator pos = disp->find (sdt);
               if (pos != disp->end ())
                 {
-                  out_of_date_check (pos->second, sdt);
+                  out_of_date_check (pos->second, sdt, false);
                   ovfcn = pos->second;
                 }
             }
         }
       else
         {
           str_ov_map::iterator pos = disp->find (ddt);
           if (pos != disp->end ())
             {
-              out_of_date_check (pos->second, ddt);
+              out_of_date_check (pos->second, ddt, false);
               ovfcn = pos->second;
             }
           else
             {
               octave_value method = symbol_table::find_method (nm, ddt);
               if (method.is_defined ())
                 (*disp)[ddt] = ovfcn = method;
             }
@@ -1568,16 +1568,18 @@ Return a struct containing information a
 		  if (fcn->is_nested_function ())
 		    {
 		      m.assign ("type", "subfunction");
 		      Cell parentage (dim_vector (1, 2));
 		      parentage.elem(0) = fh_nm;
 		      parentage.elem(1) = fcn->parent_fcn_name ();
 		      m.assign ("parentage", octave_value (parentage)); 
 		    }
+                  else if (fcn->is_private_function ())
+		    m.assign ("type", "private");
                   else if (fh->is_overloaded ())
 		    m.assign ("type", "overloaded");
 		  else
 		    m.assign ("type", "simple");
 		}
 
 	      std::string nm = fcn->fcn_file_name ();
 
diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -151,76 +151,92 @@ load_out_of_date_fcn (const std::string&
       function = octave_value (fcn);
     }
   else
     function = octave_value ();
 
   return retval;
 }
 
-static inline bool
-out_of_date_check_internal (octave_function *fcn, octave_value& function,
-			    const std::string& dispatch_type = std::string ())
+bool
+out_of_date_check (octave_value& function,
+                   const std::string& dispatch_type,
+                   bool check_relative)
 {
   bool retval = false;
 
+  octave_function *fcn = function.function_value (true);
+
   if (fcn)
     {
       // FIXME -- we need to handle nested functions properly here.
 
       if (! fcn->is_nested_function ())
 	{
 	  std::string ff = fcn->fcn_file_name ();
 
 	  if (! ff.empty ())
 	    {
 	      octave_time tc = fcn->time_checked ();
 
-	      bool relative = fcn->is_relative ();
+	      bool relative = check_relative && fcn->is_relative ();
 
 	      if (tc < Vlast_prompt_time
 		  || (relative && tc < Vlast_chdir_time))
 		{
 		  bool clear_breakpoints = false;
-		  std::string nm = fcn->name ();
+                  std::string nm = fcn->name ();
+
+                  bool is_same_file = false;
 
-		  int nm_len = nm.length ();
+                  std::string file;
+                  std::string dir_name;
 
-		  std::string file;
-		  std::string dir_name;
+                  if (check_relative)
+                    {
+                      int nm_len = nm.length ();
 
-		  if (octave_env::absolute_pathname (nm)
-		      && ((nm_len > 4 && (nm.substr (nm_len-4) == ".oct"
-					  || nm.substr (nm_len-4) == ".mex"))
-			  || (nm_len > 2 && nm.substr (nm_len-2) == ".m")))
-		    file = nm;
-		  else
-		    {
-		      // We don't want to make this an absolute name,
-		      // because load_fcn_file looks at the name to
-		      // decide whether it came from a relative lookup.
+                      if (octave_env::absolute_pathname (nm)
+                          && ((nm_len > 4 && (nm.substr (nm_len-4) == ".oct"
+                                              || nm.substr (nm_len-4) == ".mex"))
+                              || (nm_len > 2 && nm.substr (nm_len-2) == ".m")))
+                        file = nm;
+                      else
+                        {
+                          // We don't want to make this an absolute name,
+                          // because load_fcn_file looks at the name to
+                          // decide whether it came from a relative lookup.
 
-		      if (! dispatch_type.empty ())
-			file = load_path::find_method (dispatch_type, nm,
-						       dir_name);
+                          if (! dispatch_type.empty ())
+                            file = load_path::find_method (dispatch_type, nm,
+                                                           dir_name);
+
+                          if (file.empty ())
+                            file = load_path::find_fcn (nm, dir_name);
+                        }
 
-		      if (file.empty ())
-			file = load_path::find_fcn (nm, dir_name);
-		    }
+                      if (! file.empty ())
+                        is_same_file = same_file (file, ff);
+                    }
+                  else
+                    {
+                      is_same_file = true;
+                      file = ff;
+                    }
 
 		  if (file.empty ())
 		    {
 		      // Can't see this function from current
 		      // directory, so we should clear it.
 
 		      function = octave_value ();
 
 		      clear_breakpoints = true;
 		    }
-		  else if (same_file (file, ff))
+		  else if (is_same_file)
 		    {
 		      // Same file.  If it is out of date, then reload it.
 
 		      octave_time ottp = fcn->time_parsed ();
 		      time_t tp = ottp.unix_time ();
 
 		      fcn->mark_fcn_file_up_to_date (octave_time ());
 
@@ -267,39 +283,16 @@ out_of_date_check_internal (octave_funct
 		}
 	    }
 	}
     }
 
   return retval;
 }
 
-static inline bool
-out_of_date_check_internal (octave_value& function,
-			    const std::string& dispatch_type = std::string ())
-{
-  return out_of_date_check_internal (function.function_value (true),
-				     function, dispatch_type);
-}
-
-bool
-out_of_date_check (octave_value& function,
-                   const std::string& dispatch_type)
-{
-  return out_of_date_check_internal (function, dispatch_type);
-}
-
-bool
-out_of_date_check (octave_function* fcn,
-                   const std::string& dispatch_type)
-{
-  octave_value function;
-  return out_of_date_check_internal (fcn, function, dispatch_type);
-}
-
 octave_value
 symbol_table::fcn_info::fcn_info_rep::load_private_function
   (const std::string& dir_name)
 {
   octave_value retval;
 
   std::string file_name = load_path::find_private_fcn (dir_name, name);
 
@@ -563,17 +556,17 @@ symbol_table::fcn_info::fcn_info_rep::xf
                   if (val.is_defined ())
                     return val;
                 }
               else
                 {
                   octave_value& fval = q->second;
 
                   if (fval.is_defined ())
-                    out_of_date_check_internal (fval);
+                    out_of_date_check (fval);
 
                   if (fval.is_defined ())
                     return fval;
                   else
                     {
                       octave_value val = load_private_function (dir_name);
 
                       if (val.is_defined ())
@@ -595,17 +588,17 @@ symbol_table::fcn_info::fcn_info_rep::xf
       if (val.is_defined ())
 	return val;
     }
   else
     {
       octave_value& fval = q->second;
 
       if (fval.is_defined ())
-	out_of_date_check_internal (fval, name);
+	out_of_date_check (fval, name);
 
       if (fval.is_defined ())
 	return fval;
       else
 	{
 	  octave_value val = load_class_constructor ();
 
 	  if (val.is_defined ())
@@ -760,17 +753,17 @@ symbol_table::fcn_info::fcn_info_rep::x_
 	      if (val.is_defined ())
 		return val;
 	    }
 	  else
 	    {
 	      octave_value& fval = q->second;
 
 	      if (fval.is_defined ())
-		out_of_date_check_internal (fval);
+		out_of_date_check (fval);
 
 	      if (fval.is_defined ())
 		return fval;
 	      else
 		{
 		  octave_value val = load_private_function (dir_name);
 
 		  if (val.is_defined ())
@@ -826,17 +819,17 @@ symbol_table::fcn_info::fcn_info_rep::fi
       if (val.is_defined ())
 	return val;
     }
   else
     {
       octave_value& fval = q->second;
 
       if (fval.is_defined ())
-	out_of_date_check_internal (fval, dispatch_type);
+	out_of_date_check (fval, dispatch_type);
 
       if (fval.is_defined ())
 	return fval;
       else
 	{
 	  octave_value val = load_class_method (dispatch_type);
 
 	  if (val.is_defined ())
@@ -850,17 +843,17 @@ symbol_table::fcn_info::fcn_info_rep::fi
 octave_value
 symbol_table::fcn_info::fcn_info_rep::find_autoload (void)
 {
   octave_value retval;
 
   // Autoloaded function.
 
   if (autoload_function.is_defined ())
-    out_of_date_check_internal (autoload_function);
+    out_of_date_check (autoload_function);
 
   if (! autoload_function.is_defined ())
     {
       std::string file_name = lookup_autoload (name);
 
       if (! file_name.empty ())
 	{
 	  size_t pos = file_name.find_last_of (file_ops::dir_sep_chars ());
@@ -879,17 +872,17 @@ symbol_table::fcn_info::fcn_info_rep::fi
 }
 
 octave_value
 symbol_table::fcn_info::fcn_info_rep::find_user_function (void)
 {
   // Function on the path.
 
   if (function_on_path.is_defined ())
-    out_of_date_check_internal (function_on_path);
+    out_of_date_check (function_on_path);
 
   if (! function_on_path.is_defined ())
     {
       std::string dir_name;
 
       std::string file_name = load_path::find_fcn (name, dir_name);
 
       if (! file_name.empty ())
diff --git a/src/symtab.h b/src/symtab.h
--- a/src/symtab.h
+++ b/src/symtab.h
@@ -2298,20 +2298,18 @@ private:
   }
 
   void do_dump (std::ostream& os);
 
   void do_cache_name (const std::string& name) { table_name = name; }
 };
 
 extern bool out_of_date_check (octave_value& function,
-                               const std::string& dispatch_type = std::string ());
-
-extern bool out_of_date_check (octave_function* fcn,
-                               const std::string& dispatch_type = std::string ());
+                               const std::string& dispatch_type = std::string (),
+                               bool check_relative = true);
 
 extern std::string get_dispatch_type (const octave_value_list& args);
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
