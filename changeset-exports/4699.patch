# HG changeset patch
# User jwe
# Date 1074639887 0
#      Tue Jan 20 23:04:47 2004 +0000
# Node ID 5e2c68946f307deeae29fe5d4beee481a40750a2
# Parent  737fd5c0ae061d15b00767638707be28a273f48e
[project @ 2004-01-20 23:04:46 by jwe]

diff --git a/doc/interpreter/errors.txi b/doc/interpreter/errors.txi
--- a/doc/interpreter/errors.txi
+++ b/doc/interpreter/errors.txi
@@ -7,18 +7,16 @@
 
 Octave includes several functions for printing error and warning
 messages.  When you write functions that need to take special action
 when they encounter abnormal conditions, you should print the error
 messages using the functions described in this chapter.
 
 @DOCSTRING(error)
 
-@DOCSTRING(error_text)
-
 @DOCSTRING(beep_on_error)
 
 @DOCSTRING(warning)
 
 @DOCSTRING(usage)
 
 @DOCSTRING(lasterr)
 
diff --git a/doc/interpreter/stmt.txi b/doc/interpreter/stmt.txi
--- a/doc/interpreter/stmt.txi
+++ b/doc/interpreter/stmt.txi
@@ -709,23 +709,22 @@ end_try_catch
 @end example
 
 Where @var{body} and @var{cleanup} are both optional and may contain any
 Octave expressions or commands.  The statements in @var{cleanup} are
 only executed if an error occurs in @var{body}.
 
 No warnings or error messages are printed while @var{body} is
 executing.  If an error does occur during the execution of @var{body},
-@var{cleanup} can access the text of the message that would have been
-printed in the builtin constant @code{__error_text__}.  This is the same
-as @code{eval (@var{try}, @var{catch})} (which may now also use
-@code{__error_text__}) but it is more efficient since the commands do
-not need to be parsed each time the @var{try} and @var{catch} statements
-are evaluated.  @xref{Error Handling}, for more information about the
-@code{__error_text__} variable.
+@var{cleanup} can use the function @code{lasterr} to access the text
+of the message that would have been printed.  This is the same
+as @code{eval (@var{try}, @var{catch})} but it is more efficient since
+the commands do not need to be parsed each time the @var{try} and
+@var{catch} statements are evaluated.  @xref{Error Handling}, for more
+information about the @code{lasterr} function.
 
 Octave's @var{try} block is a very limited variation on the Lisp
 condition-case form (limited because it cannot handle different classes
 of errors separately).  Perhaps at some point Octave can have some sort
 of classification of errors and try-catch can be improved to be as
 powerful as condition-case in Lisp.
 
 @cindex continuation lines
diff --git a/emacs/octave-mod.el b/emacs/octave-mod.el
--- a/emacs/octave-mod.el
+++ b/emacs/octave-mod.el
@@ -131,17 +131,17 @@ All Octave abbrevs start with a grave ac
     "LOADPATH" "NaN" "OCTAVE_VERSION" "O_APPEND" "O_CREAT" "O_EXCL"
     "O_NONBLOCK" "O_RDONLY" "O_RDWR" "O_TRUNC" "O_WRONLY" "PAGER" "PS1"
     "PS2" "PS4" "PWD" "SEEK_CUR" "SEEK_END" "SEEK_SET" "__F_DUPFD__"
     "__F_GETFD__" "__F_GETFL__" "__F_SETFD__" "__F_SETFL__" "__I__"
     "__Inf__" "__J__" "__NaN__" "__OCTAVE_VERSION__" "__O_APPEND__"
     "__O_CREAT__" "__O_EXCL__" "__O_NONBLOCK__" "__O_RDONLY__"
     "__O_RDWR__" "__O_TRUNC__" "__O_WRONLY__" "__PWD__" "__SEEK_CUR__"
     "__SEEK_END__" "__SEEK_SET__" "__argv__" "__e__" "__eps__"
-    "__error_text__" "__i__" "__inf__" "__j__" "__nan__" "__pi__"
+    "__i__" "__inf__" "__j__" "__nan__" "__pi__"
     "__program_invocation_name__" "__program_name__" "__realmax__"
     "__realmin__" "__stderr__" "__stdin__" "__stdout__" "ans" "argv"
     "automatic_replot" "beep_on_error" "completion_append_char"
     "crash_dumps_octave_core" "default_save_format"
     "e" "echo_executing_commands" "eps"
     "error_text" "gnuplot_binary" "history_file"
     "history_size" "ignore_function_time_stamp"
     "inf" "nan" "nargin" "output_max_field_width" "output_precision"
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,34 @@
+2004-01-20  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* ov-re-mat.cc (complex_array_value): New function.
+	* ov-re-mat.h: Provide decl.
+
+	* ov-cell.cc (Fiscellstr): Don't return value on usage error.
+
+	* error.cc: (symbols_of_error): Delete DEFVAR for error_text.
+	Define __error_text__ and error_text as aliases for lasterr.
+
+	* error.cc (bind_global_error_variable,	clear_global_error_variable):
+	Delete.
+	* variables.h: Delete decls.
+
+	* parse.y (Feval, Fevalin): Don't call bind_global_error_variable.
+	Don't add clear_global_error_variable to the unwind_protect stack.
+	Increment buffer_error_messages before evaluating "eval" code,
+	decrement it before evaluating "catch" code.	
+
+	* pt-except.cc (do_catch_code): Don't call bind_global_error_variable.
+	Don't add clear_global_error_variable to the unwind_protect stack.
+	Decrement buffer_error_messages here.
+	(tree_try_catch_command::eval): Increment buffer_error_messages here.
+
+	* error.cc, error.h (buffer_error_messages): Now an int.
+
 2004-01-16  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* toplev.cc (octave_config_info): Add float_format,
 	words_big_endian, and words_little_endian to the struct.
 
 2004-01-14  David Bateman  <dbateman@free.fr>
 	
 	* ov-cell.cc (octave_cell::load_hdf5): Fix for HDF5 version 1.6
diff --git a/src/defun-int.h b/src/defun-int.h
--- a/src/defun-int.h
+++ b/src/defun-int.h
@@ -171,17 +171,17 @@ typedef bool (*octave_dld_fcn_installer)
   DECLARE_FUN (name, args_name, nargout_name)
 
 #define DEFUNX_INTERNAL(name, fname, args_name, nargout_name, \
 			is_text_fcn, doc) \
   DECLARE_FUNX (fname, args_name, nargout_name)
 
 // No definition is required for an alias.
 
-#define DEFALIAS_INTERNAL(name, alias)
+#define DEFALIAS_INTERNAL(alias, name)
 
 // How builtin variables are actually installed.
 
 #define DEFVAR_INTERNAL(name, sname, defn, protect, chg_fcn, doc) \
   install_builtin_variable (name, octave_value (defn), protect, \
 			    (chg_fcn != 0), chg_fcn, doc)
 
 // How builtin variables are actually installed.
diff --git a/src/defun.h b/src/defun.h
--- a/src/defun.h
+++ b/src/defun.h
@@ -152,18 +152,18 @@ Software Foundation, 59 Temple Place - S
   DEFUN_MAPPER_INTERNAL (name, ch_map, d_b_map, c_b_map, d_d_map, \
 			 d_c_map, c_c_map, lo, hi, ch_map_flag, \
 			 can_ret_cmplx_for_real, doc)
 
 // Make alias another name for the existing function name.  This macro
 // must be used in the same file where name is defined, after the
 // definition for name.
 
-#define DEFALIAS(name, alias) \
-  DEFALIAS_INTERNAL (name, alias)
+#define DEFALIAS(alias, name) \
+  DEFALIAS_INTERNAL (alias, name)
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/error.cc b/src/error.cc
--- a/src/error.cc
+++ b/src/error.cc
@@ -90,33 +90,33 @@ int error_state = 0;
 //    0: no warning
 //    1: a warning has occurred
 //
 int warning_state = 0;
 
 // Tell the error handler whether to print messages, or just store
 // them for later.  Used for handling errors in eval() and
 // the `unwind_protect' statement.
-bool buffer_error_messages = false;
+int buffer_error_messages = 0;
 
 // TRUE means error messages are turned off.
 bool discard_error_messages = false;
 
 // TRUE means warning messages are turned off.
 bool discard_warning_messages = false;
 
 // The message buffer.
 static OSSTREAM *error_message_buffer = 0;
 
 void
 reset_error_handler (void)
 {
   error_state = 0;
   warning_state = 0;
-  buffer_error_messages = false;
+  buffer_error_messages = 0;
   discard_error_messages = false;
 }
 
 // Warning messages are never buffered.
 
 static void
 vwarning (const char *name, const char *fmt, va_list args)
 {
@@ -195,17 +195,17 @@ verror (const char *name, const char *fm
       std::string tmp = msg_string;
 
       if (! error_message_buffer)
 	{
 	  error_message_buffer = new OSSTREAM;
 
 	  // XXX FIXME XXX -- this is ugly, but it prevents
 	  //
-	  //   eval ("error (\"msg\")", "error (__error_text__)");
+	  //   eval ("error (\"msg\")", "error (lasterr ())");
 	  //
 	  // from printing `error: ' twice.  Assumes that the NAME we
 	  // have been given doesn't contain `:'.
 
 	  size_t pos = msg_string.find (':');
 
 	  if (pos != NPOS && pos < Vlast_error_message.length () - 2)
 	    tmp = msg_string.substr (pos+2);
@@ -423,17 +423,17 @@ parse_error (const char *fmt, ...)
   va_end (args);
 }
 
 void
 panic (const char *fmt, ...)
 {
   va_list args;
   va_start (args, fmt);
-  buffer_error_messages = false;
+  buffer_error_messages = 0;
   discard_error_messages = false;
   verror ("panic", fmt, args);
   va_end (args);
   abort ();
 }
 
 typedef void (*error_fun)(const char *, ...);
 
@@ -664,16 +664,20 @@ argument, set the last warning message t
   else if (argc == 2)
     Vlast_error_message = argv(1);
   else
     print_usage ("lasterr");
 
   return retval;  
 }
 
+// For backward compatibility.
+DEFALIAS (error_text, lasterr);
+DEFALIAS (__error_text__, lasterr);
+
 DEFUN (lastwarn, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} lastwarn ()\n\
 @deftypefnx {Built-in Function} {} lastwarn (@var{msg})\n\
 Without any arguments, return the last warning message.  With one\n\
 argument, set the last error message to @var{msg}.\n\
 @end deftypefn")
 {
@@ -722,47 +726,16 @@ endif\n\
 to check for the proper number of arguments.\n\
 @end deftypefn")
 {
   octave_value_list retval;
   handle_message (usage, "unknown", args);
   return retval;
 }
 
-void
-bind_global_error_variable (void)
-{
-  if (error_message_buffer)
-    {
-      *error_message_buffer << OSSTREAM_ENDS;
-
-      bind_builtin_variable ("__error_text__",
-			     OSSTREAM_STR (*error_message_buffer),
-			     true);
-
-      OSSTREAM_FREEZE (*error_message_buffer);
-
-      delete error_message_buffer;
-
-      error_message_buffer = 0;
-    }
-  else
-    bind_builtin_variable ("__error_text__", "", true);
-}
-
-void
-clear_global_error_variable (void *)
-{
-  delete error_message_buffer;
-
-  error_message_buffer = 0;
-
-  bind_builtin_variable ("__error_text__", "", true);
-}
-
 static int
 beep_on_error (void)
 {
   Vbeep_on_error = check_preference ("beep_on_error");
 
   return 0;
 }
 
@@ -804,34 +777,15 @@ the top-level error message).  The defau
 
   DEFVAR (debug_on_warning, false, debug_on_warning,
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} debug_on_warning\n\
 If the value of @code{debug_on_warning} is nonzero, Octave will try\n\
 to enter the debugger when a warning is encountered.  The default\n\
 value is 0.\n\
 @end defvr");
-
-  DEFCONST (error_text, "",
-    "-*- texinfo -*-\n\
-@defvr {Built-in Variable} error_text\n\
-This variable contains the text of error messages that would have\n\
-been printed in the body of the most recent @code{unwind_protect} or\n\
-@code{try} statement or the @var{try} part of the most recent call to\n\
-the @code{eval} function.  Outside of the @code{unwind_protect} and\n\
-@code{try} statements or the @code{eval} function, or if no error has\n\
-occurred within them, the value of @code{error_text} is guaranteed to be\n\
-the empty string.\n\
-\n\
-Note that the message does not include the first @samp{error: } prefix,\n\
-so that it may easily be passed to the @code{error} function without\n\
-additional processing@footnote{Yes, it's a kluge, but it seems to be a\n\
-reasonably useful one.}.\n\
-\n\
-@xref{The try Statement}, and @ref{The unwind_protect Statement}.\n\
-@end defvr");
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/error.h b/src/error.h
--- a/src/error.h
+++ b/src/error.h
@@ -42,17 +42,17 @@ extern void panic (const char *fmt, ...)
 extern int error_state;
 
 // Current warning state.
 extern int warning_state;
 
 // Tell the error handler whether to print messages, or just store
 // them for later.  Used for handling errors in eval() and
 // the `unwind_protect' statement.
-extern bool buffer_error_messages;
+extern int buffer_error_messages;
 
 // TRUE means error messages are turned off.
 extern bool discard_error_messages;
 
 // TRUE means warning messages are turned off.
 extern bool discard_warning_messages;
 
 // The current warning state.  Valid values are "on", "off",
diff --git a/src/ov-cell.cc b/src/ov-cell.cc
--- a/src/ov-cell.cc
+++ b/src/ov-cell.cc
@@ -975,20 +975,22 @@ array @var{string}.\n\
 
 DEFUN (iscellstr, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} iscellstr (@var{cell})\n\
 Return true if every element of the cell array @var{cell} is a\n\
 character string\n\
 @end deftypefn")
 {
-  octave_value retval = true;
+  octave_value retval;
 
   if (args.length () == 1)
     {
+      retval = true;
+
       octave_value arg = args (0);
 
       if (arg.is_cell ())
 	{
 	  Cell c = args(0).cell_value ();
 
 	  if (! error_state)
 	    {
diff --git a/src/ov-re-mat.cc b/src/ov-re-mat.cc
--- a/src/ov-re-mat.cc
+++ b/src/ov-re-mat.cc
@@ -133,16 +133,22 @@ octave_matrix::complex_value (bool) cons
 // XXX FIXME XXX
 
 ComplexMatrix
 octave_matrix::complex_matrix_value (bool) const
 {
   return ComplexMatrix (matrix.matrix_value ());
 }
 
+ComplexNDArray
+octave_matrix::complex_array_value (bool) const
+{
+  return ComplexNDArray (matrix);
+}
+
 streamoff_array
 octave_matrix::streamoff_array_value (void) const
 {
   streamoff_array retval (dims ());
 
   int nel = numel ();
 
   for (int i = 0; i < nel; i++)
diff --git a/src/ov-re-mat.h b/src/ov-re-mat.h
--- a/src/ov-re-mat.h
+++ b/src/ov-re-mat.h
@@ -96,16 +96,18 @@ public:
     { return double_value (frc_str_conv); }
 
   Matrix matrix_value (bool = false) const;
 
   Complex complex_value (bool = false) const;
 
   ComplexMatrix complex_matrix_value (bool = false) const;
 
+  ComplexNDArray complex_array_value (bool = false) const;
+
   NDArray array_value (bool = false) const { return matrix; }
 
   streamoff_array streamoff_array_value (void) const;
 
   void increment (void) { matrix += 1.0; }
 
   void decrement (void) { matrix -= 1.0; }
 
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -3775,18 +3775,18 @@ so any results remain available after @c
   int nargin = args.length ();
 
   if (nargin > 0)
     {
       unwind_protect::begin_frame ("Feval");
 
       if (nargin > 1)
 	{
-	  unwind_protect_bool (buffer_error_messages);
-	  buffer_error_messages = true;
+	  unwind_protect_int (buffer_error_messages);
+	  buffer_error_messages++;
 	}
 
       int parse_status = 0;
 
       octave_value_list tmp = eval_string (args(0), nargout > 0,
 					   parse_status, nargout);
 
       if (nargout > 0)
@@ -3794,21 +3794,17 @@ so any results remain available after @c
 
       if (nargin > 1 && (parse_status != 0 || error_state))
 	{
 	  error_state = 0;
 
 	  // Set up for letting the user print any messages from
 	  // errors that occurred in the first part of this eval().
 
-	  buffer_error_messages = false;
-
-	  bind_global_error_variable ();
-
-	  unwind_protect::add (clear_global_error_variable, 0);
+	  buffer_error_messages--;
 
 	  eval_string (args(1), 0, parse_status, nargout);
 
 	  retval = octave_value_list ();
 	}
 
       unwind_protect::run_frame ("Feval");
     }
@@ -3912,18 +3908,18 @@ context @var{context}, which may be eith
 	    curr_sym_tab = top_level_sym_tab;
 	  else
 	    error ("evalin: context must be \"caller\" or \"base\"");
 
 	  if (! error_state)
 	    {
 	      if (nargin > 2)
 	        {
-		  unwind_protect_bool (buffer_error_messages);
-		  buffer_error_messages = true;
+		  unwind_protect_int (buffer_error_messages);
+		  buffer_error_messages++;
 		}
 
 	      int parse_status = 0;
 
 	      octave_value_list tmp = eval_string (args(1), nargout > 0,
 						   parse_status, nargout);
 
 	      if (nargout > 0)
@@ -3931,21 +3927,17 @@ context @var{context}, which may be eith
 
 	      if (nargin > 2 && (parse_status != 0 || error_state))
 		{
 		  error_state = 0;
 
 		  // Set up for letting the user print any messages from
 		  // errors that occurred in the first part of this eval().
 
-		  buffer_error_messages = false;
-
-		  bind_global_error_variable ();
-
-		  unwind_protect::add (clear_global_error_variable, 0);
+		  buffer_error_messages--;
 
 		  eval_string (args(2), 0, parse_status, nargout);
 
 		  retval = octave_value_list ();
 		}
 	    }
 
 	  unwind_protect::run_frame ("Fevalin");
diff --git a/src/pt-except.cc b/src/pt-except.cc
--- a/src/pt-except.cc
+++ b/src/pt-except.cc
@@ -57,61 +57,55 @@ tree_try_catch_command::~tree_try_catch_
 static void
 do_catch_code (void *ptr)
 {
   if (octave_interrupt_immediately)
     return;
 
   tree_statement_list *list = static_cast<tree_statement_list *> (ptr);
 
-  unwind_protect::begin_frame ("do_catch_code");
-
   // Set up for letting the user print any messages from errors that
   // occurred in the body of the try_catch statement.
 
-  unwind_protect_bool (buffer_error_messages);
-  buffer_error_messages = false;
-
-  bind_global_error_variable ();
-
-  unwind_protect::add (clear_global_error_variable, 0);
+  buffer_error_messages--;
 
   if (list)
     list->eval ();
-
-  unwind_protect::run_frame ("do_catch_code");
 }
 
 void
 tree_try_catch_command::eval (void)
 {
   unwind_protect::begin_frame ("tree_try_catch::eval");
   
   MAYBE_DO_BREAKPOINT;
 
   if (catch_code)
     {
-      unwind_protect_bool (buffer_error_messages);
-      buffer_error_messages = true;
+      unwind_protect_int (buffer_error_messages);
+      buffer_error_messages++;
     }
 
   unwind_protect::add (do_catch_code, catch_code);
 
   if (try_code)
     try_code->eval ();
 
   if (catch_code && error_state)
     {
       error_state = 0;
       unwind_protect::run_frame ("tree_try_catch::eval");
     }
   else
     {
       error_state = 0;
 
+      // Unwind stack elements must be cleared or run in the reverse
+      // order in which they were added to the stack.
+
       // For clearing the do_catch_code cleanup function.
       unwind_protect::discard ();
 
       // For restoring buffer_error_messages.
       if (catch_code)
 	unwind_protect::run ();
 
       // Also clear the frame marker.
diff --git a/src/variables.h b/src/variables.h
--- a/src/variables.h
+++ b/src/variables.h
@@ -93,20 +93,16 @@ extern octave_value builtin_any_variable
 
 extern void link_to_global_variable (symbol_record *sr);
 extern void link_to_builtin_or_function (symbol_record *sr);
 
 extern void force_link_to_function (const std::string&);
 
 extern void bind_ans (const octave_value& val, bool print);
 
-extern void bind_global_error_variable (void);
-
-extern void clear_global_error_variable (void *);
-
 extern void
 bind_builtin_constant (const std::string&, const octave_value&,
 		       bool protect = false, bool eternal = false,
 		       const std::string& help = std::string ());
 
 extern void
 bind_builtin_variable (const std::string&, const octave_value&,
 		       bool protect = false, bool eternal = false,
diff --git a/test/octave.test/arith/acot-1.m b/test/octave.test/arith/acot-1.m
--- a/test/octave.test/arith/acot-1.m
+++ b/test/octave.test/arith/acot-1.m
@@ -1,7 +1,7 @@
 rt2 = sqrt (2);
 rt3 = sqrt (3);
-v = [pi/6, pi/4, pi/3, pi/2, 2*pi/3, 3*pi/4, 5*pi/6];
 x = [rt3, 1, rt3/3, 0, -rt3/3, -1, -rt3];
+v = [pi/6, pi/4, pi/3, pi/2, -pi/3, -pi/4, -pi/6];
 all (abs (acot (x) - v) < sqrt (eps))
 
 
diff --git a/test/octave.test/eval-catch/eval-catch-10.m b/test/octave.test/eval-catch/eval-catch-10.m
--- a/test/octave.test/eval-catch/eval-catch-10.m
+++ b/test/octave.test/eval-catch/eval-catch-10.m
@@ -1,2 +1,2 @@
-eval ("eval (\"clear a; a;\", \"error (strcat (\\\"rethrow: \\\", __error_text__));\");",
-      "__error_text__");
+eval ("eval (\"clear a; a;\", \"error (strcat (\\\"rethrow: \\\", lasterr));\");",
+      "lasterr");
diff --git a/test/octave.test/eval-catch/eval-catch-5.m b/test/octave.test/eval-catch/eval-catch-5.m
--- a/test/octave.test/eval-catch/eval-catch-5.m
+++ b/test/octave.test/eval-catch/eval-catch-5.m
@@ -1,2 +1,2 @@
-eval ("clear a; a;", "__error_text__");
-__error_text__
+eval ("clear a; a;", "lasterr");
+lasterr
diff --git a/test/octave.test/eval-catch/eval-catch-6.m b/test/octave.test/eval-catch/eval-catch-6.m
--- a/test/octave.test/eval-catch/eval-catch-6.m
+++ b/test/octave.test/eval-catch/eval-catch-6.m
@@ -1,2 +1,2 @@
-eval ("error (\"user-defined error\");", "__error_text__");
-__error_text__
+eval ("error (\"user-defined error\");", "lasterr");
+lasterr
diff --git a/test/octave.test/eval-catch/eval-catch-7.m b/test/octave.test/eval-catch/eval-catch-7.m
--- a/test/octave.test/eval-catch/eval-catch-7.m
+++ b/test/octave.test/eval-catch/eval-catch-7.m
@@ -1,5 +1,5 @@
 function ms = mangle (s)
   ## Wrap angle brackets around S.
   ms = strcat ("<", s, ">");
 endfunction
-eval ("clear a; a;", "mangle (__error_text__)");
+eval ("clear a; a;", "mangle (lasterr)");
diff --git a/test/octave.test/eval-catch/eval-catch-8.m b/test/octave.test/eval-catch/eval-catch-8.m
--- a/test/octave.test/eval-catch/eval-catch-8.m
+++ b/test/octave.test/eval-catch/eval-catch-8.m
@@ -1,2 +1,2 @@
-eval ("eval (\"clear a; a;\", \"__error_text__\"); clear b; b;",
-      "__error_text__");
+eval ("eval (\"clear a; a;\", \"lasterr\"); clear b; b;",
+      "lasterr");
diff --git a/test/octave.test/eval-catch/eval-catch-9.m b/test/octave.test/eval-catch/eval-catch-9.m
--- a/test/octave.test/eval-catch/eval-catch-9.m
+++ b/test/octave.test/eval-catch/eval-catch-9.m
@@ -1,2 +1,2 @@
 eval ("clear a; a;",
-      "eval (\"clear b; b;\", \"__error_text__\"); __error_text__");
+      "eval (\"clear b; b;\", \"lasterr\"); lasterr");
diff --git a/test/octave.test/eval-catch/eval-catch.exp b/test/octave.test/eval-catch/eval-catch.exp
--- a/test/octave.test/eval-catch/eval-catch.exp
+++ b/test/octave.test/eval-catch/eval-catch.exp
@@ -1,8 +1,9 @@
+
 ## parse empty try string
 set test eval-catch-1
 set prog_output "^$"
 do_test eval-catch-1.m
 
 ## parse empty catch string
 set test eval-catch-2
 set prog_output "^$"
@@ -13,40 +14,37 @@ set test eval-catch-3
 set prog_output "^ans = 2"
 do_test eval-catch-3.m
 
 ## execute catch clause
 set test eval-catch-4
 set prog_output "^ans = 1"
 do_test eval-catch-4.m
 
-## define __error_text__ *only* within catch-string
+## lasterr works in and out of the catch string.
 set test eval-catch-5
-set prog_output "__error_text__ = `a' undefined.*\n\n__error_text__ = $"
+set prog_output "ans = error: `a' undefined.*\n\nans = error: `a' undefined"
 do_test eval-catch-5.m
 
 ## throw a user-defined error
 set test eval-catch-6
-set prog_output "__error_text__ = user-defined error\n\n__error_text__ = $"
+set prog_output "ans = error: user-defined error\n\nans = error: user-defined error"
 do_test eval-catch-6.m
 
-## pass __error_text__ to user-defined subroutine
+## pass lasterr to user-defined subroutine
 set test eval-catch-7
-set prog_output "^ans = <`a' undefined.*\n>"
+set prog_output "^ans = <error: `a' undefined.*\n>"
 do_test eval-catch-7.m
 
 ## handle nested eval: eval in try-string
 set test eval-catch-8
-set prog_output "__error_text__ = `a' undefined.*\n\n__error_text__ = `b' undefined.*\n$"
+set prog_output "ans = error: `a' undefined.*\n\nans = error: `b' undefined.*\n$"
 do_test eval-catch-8.m
 
 ## handle nested eval: eval nested in catch-string
 set test eval-catch-9
-set prog_output "__error_text__ = `a' undefined.*\n\n__error_text__ = `b' undefined.*\n$"
-setup_xfail *-*-*
+set prog_output "ans = error: `b' undefined.*\n\nans = error: `b' undefined.*\n$"
 do_test eval-catch-9.m
 
 ## re-throw an error
 set test eval-catch-10
-set prog_output "__error_text__ = rethrow: `a' undefined.*\n"
-setup_xfail *-*-*
+set prog_output "ans = error: rethrow: error: `a' undefined.*\n"
 do_test eval-catch-10.m
-
diff --git a/test/octave.test/system/glob-1.m b/test/octave.test/system/glob-1.m
--- a/test/octave.test/system/glob-1.m
+++ b/test/octave.test/system/glob-1.m
@@ -1,1 +1,1 @@
-isstr (glob ("/*"))
+iscell (glob ("/*"))
diff --git a/test/octave.test/system/readdir-1.m b/test/octave.test/system/readdir-1.m
--- a/test/octave.test/system/readdir-1.m
+++ b/test/octave.test/system/readdir-1.m
@@ -1,2 +1,2 @@
 [files, status, msg] = readdir ("/");
-isstr (files) && status == 0 && msg == ""
+iscell (files) && status == 0 && msg == ""
diff --git a/test/octave.test/try/try-10.m b/test/octave.test/try/try-10.m
--- a/test/octave.test/try/try-10.m
+++ b/test/octave.test/try/try-10.m
@@ -1,10 +1,10 @@
 try
   try
     clear a
     a;
   catch
-    error (strcat ("rethrow: ", __error_text__));
+    error (strcat ("rethrow: ", lasterr));
   end_try_catch
 catch
-  __error_text__
+  lasterr
 end_try_catch
diff --git a/test/octave.test/try/try-5.m b/test/octave.test/try/try-5.m
--- a/test/octave.test/try/try-5.m
+++ b/test/octave.test/try/try-5.m
@@ -1,7 +1,7 @@
 try
   clear a;
   a;
 catch
-  __error_text__
+  lasterr
 end_try_catch
-__error_text__
+lasterr
diff --git a/test/octave.test/try/try-6.m b/test/octave.test/try/try-6.m
--- a/test/octave.test/try/try-6.m
+++ b/test/octave.test/try/try-6.m
@@ -1,5 +1,5 @@
 try
   error ("user-defined error")
 catch
-  __error_text__
+  lasterr
 end_try_catch
diff --git a/test/octave.test/try/try-7.m b/test/octave.test/try/try-7.m
--- a/test/octave.test/try/try-7.m
+++ b/test/octave.test/try/try-7.m
@@ -1,10 +1,10 @@
 function ms = mangle (s)
   ## Wrap angle brackets around S.
   ms = strcat ("<", s, ">");
 endfunction
 try
   clear a
   a;
 catch
-  mangle (__error_text__)
+  mangle (lasterr)
 end_try_catch
diff --git a/test/octave.test/try/try-8.m b/test/octave.test/try/try-8.m
--- a/test/octave.test/try/try-8.m
+++ b/test/octave.test/try/try-8.m
@@ -1,12 +1,12 @@
 try
   try
     clear a
     a;
   catch
-    __error_text__
+    lasterr
   end_try_catch
   clear b
   b;
 catch
-  __error_text__
+  lasterr
 end_try_catch
diff --git a/test/octave.test/try/try-9.m b/test/octave.test/try/try-9.m
--- a/test/octave.test/try/try-9.m
+++ b/test/octave.test/try/try-9.m
@@ -1,12 +1,12 @@
 try
   clear a
   a;
 catch
   try
     clear b
     b;
   catch
-    __error_text__
+    lasterr
   end_try_catch
-  __error_text__
+  lasterr
 end_try_catch
diff --git a/test/octave.test/try/try.exp b/test/octave.test/try/try.exp
--- a/test/octave.test/try/try.exp
+++ b/test/octave.test/try/try.exp
@@ -13,39 +13,37 @@ set test try-3
 set prog_output "^ans = 2"
 do_test try-3.m
 
 ## execute catch-clause
 set test try-4
 set prog_output "^ans = 1"
 do_test try-4.m
 
-## define __error_text__ *only* within catch-clause
+## lasterr works in and out of the catch string.
 set test try-5
-set prog_output "__error_text__ = `a' undefined.*\n\n__error_text__ = $"
+set prog_output "ans = error: `a' undefined.*\n\nans = error: `a' undefined"
 do_test try-5.m
 
 ## throw user-defined error
 set test try-6
-set prog_output "__error_text__ = user-defined error\n"
+set prog_output "ans = error: user-defined error\n"
 do_test try-6.m
 
-## pass __error_text__ to user-defined subroutine
+## pass lasterr to user-defined subroutine
 set test try-7
-set prog_output "^ans = <`a' undefined.*\n>"
+set prog_output "^ans = <error: `a' undefined.*\n>"
 do_test try-7.m
 
 ## handle nested try-catch-block: try nested in try
 set test try-8
-set prog_output "__error_text__ = `a' undefined.*\n\n__error_text__ = `b' undefined.*\n$"
+set prog_output "ans = error: `a' undefined.*\n\nans = error: `b' undefined.*\n$"
 do_test try-8.m
 
 ## handle nested try-catch-block: try nested in catch
 set test try-9
-set prog_output "__error_text__ = `a' undefined.*\n\n__error_text__ = `b' undefined.*\n$"
-setup_xfail *-*-*
+set prog_output "ans = error: `b' undefined.*\n\nans = error: `b' undefined.*\n$"
 do_test try-9.m
 
 ## re-throw an error
 set test try-10
-set prog_output "__error_text__ = rethrow: `a' undefined.*\n"
-setup_xfail *-*-*
+set prog_output "ans = error: rethrow: error: `a' undefined.*\n"
 do_test try-10.m
