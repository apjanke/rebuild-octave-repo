# HG changeset patch
# User jwe
# Date 1194630994 0
#      Fri Nov 09 17:56:34 2007 +0000
# Node ID fdb3840cec66c936e602cf901193e7718b198deb
# Parent  c7e5e638a8d03bfafa517363d19b81f4441c1b83
[project @ 2007-11-09 17:56:34 by jwe]

diff --git a/scripts/plot/__area__.m b/scripts/plot/__area__.m
--- a/scripts/plot/__area__.m
+++ b/scripts/plot/__area__.m
@@ -14,20 +14,26 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## Undocumented internal function.
 
 function retval = __area__ (ax, x, y, bv, varargin)
+
   colors = [1, 0, 0; 0, 1, 0; 0, 0, 1; 1, 1, 0; 1, 0, 1; 0, 1, 1];
-  x = [x(1,:) ; x ; x(end,:)];
-  y = cumsum ([[bv, ones(1, size (y, 2) - 1)] ; y ; ...
+
+  x = [x(1,:); x; x(end,:)];
+
+  y = cumsum ([[bv, ones(1, size (y, 2) - 1)]; y;
 	       [bv, ones(1, size (y, 2) - 1)]], 2);
 
-  retval = patch (ax, x(:, 1), y (:, 1), colors (1,:), varargin{:});
-  for i = 2 : size(y, 2)
-    retval = [retval; patch(ax, [x(:,i); flipud(x(:,i))], ...
-			    [y(:, i) ; flipud(y(:, i-1))], colors(i,:),
-			    varargin{:})];
+  retval = patch (ax, x(:,1), y(:,1), colors(1,:), varargin{:});
+
+  for i = 2:size(y,2)
+    tmp = patch (ax, [x(:,i); flipud(x(:,i))],
+		 [y(:,i) ; flipud(y(:, i-1))], colors(i,:), varargin{:});
+
+    retval = [retval; tmp];
   endfor
+
 endfunction
diff --git a/scripts/plot/area.m b/scripts/plot/area.m
--- a/scripts/plot/area.m
+++ b/scripts/plot/area.m
@@ -33,31 +33,31 @@
 ## where the base level of the shading under the curve should be defined.
 ##
 ## Additional arguments to the @code{area} function are passed to the 
 ## @code{patch}. The optional return value @var{h} provides a handle to 
 ## the list of patch objects.
 ## @seealso{plot, patch}
 ## @end deftypefn
 
-function [ h ] = area (varargin)
+function h = area (varargin)
 
   if (nargin > 0)
     idx = 1;
     ax = [];
     x = y = [];
     bv = 0;
     args = {};
-    # check for axes parent
-    if (ishandle (varargin{idx}) &&
-	strcmp (get (varargin{idx}, "type"), "axes"))
+    ## Check for axes parent.
+    if (ishandle (varargin{idx})
+	&& strcmp (get (varargin{idx}, "type"), "axes"))
       ax = varargin{idx};
       idx++;
     endif
-    # check for (X) or (X,Y) arguments and possible base value
+    ## Check for (X) or (X,Y) arguments and possible base value.
     if (nargin >= idx && ismatrix (varargin{idx}))
       y = varargin{idx};
       idx++;
       if (nargin >= idx)
         if (isscalar (varargin{idx}))
           bv = varargin{idx};
           idx++;
         elseif (ismatrix (varargin{idx}))
@@ -68,17 +68,17 @@ function [ h ] = area (varargin)
             bv = varargin{idx};
             idx++;
           endif
         endif
       endif
     else
       print_usage ();
     endif
-    # check for additional args
+    ## Check for additional args.
     if (nargin >= idx)
       args = {varargin{idx:end}};
     endif
     newplot ();
     if (isvector (y))
       y = y(:);
     endif
     if (isempty (x))
