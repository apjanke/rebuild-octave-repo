# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1495055286 14400
#      Wed May 17 17:08:06 2017 -0400
# Node ID 973adfdd2b85892c5bf71ac3193858ea9aad106f
# Parent  6a2fed2d39ac0067a76f56cca32c6c2e4dff40e6
remoave obsolete README files in etc directory

* README.Cygwin, README.Linux, README.MacOS, README.MinGW,
README.Windows, README.gnuplot, README.kpathsea: Delete.

* module.mk: Update.

diff --git a/etc/README.Cygwin b/etc/README.Cygwin
deleted file mode 100644
--- a/etc/README.Cygwin
+++ /dev/null
@@ -1,89 +0,0 @@
-Starting with version 3.0.1, Octave is once again part of the normal
-net distribution of Cygwin, available from http://www.cygwin.com.
-
-It is possible to build Octave from source on Windows systems with Cygwin,
-but with the old gcc-3.4.4-3 compiler there are some performance
-problems related to the way C++ exception handling is implemented.
-This is a known problem with a long history and it is STRONGLY
-encouraged to use gcc-4.3.2-1 or later.
-
-Current binary versions are built with gcc-4.5.3-3.
-
-
-------- SUGGESTED CONFIGURATION  ---------------------------
-
-The latest development Octave development sources (octave-3.5.91+)
-are built with:
-
-configure --enable-shared \
-          --enable-float-truncate \
-          CC=gcc-4 F77=gfortran-4 CXX=g++-4 CPP=cpp-4
-          lt_cv_deplibs_check_method=pass_all \
-          LDFLAGS=-Wl,-no-undefined
-
-"--enable-float-truncate" is needed for the following bug:
-http://thread.gmane.org/gmane.comp.gnu.octave.bugs/12361/focus=12404
-Without it, one of the quadgk test will fail as
-"a=a" could be false due to truncation problems with
-complex numbers.
-
-"lt_cv_deplibs_check_method=pass_all"  is needed to bypass
-incorrect libtool detection of system capabilities and
-to allow shared libs building.
-
-"LDFLAGS=-Wl,-no-undefined" is better than previous
-"LDFLAGS=-no-undefined" as gcc-4 is now complaining about
-unknown command and the "undefined" is for the linker.
-
-The additional patch used for 3.4.3-3 package can also be
-needed for 3.6.x (see below).
-
-------- SUGGESTION FOR FORK ISSUE --------------------------
-
-The build process can fails in building images for documentation
-due to fork issue of the octave dll just built. In such case
-I suggest to rebase the built dll's with:
-
-$ find build_tree -name "*.dll"  > rebase_list
-
-and after closing all cygwin process, from a dash shell
-
-$ rebaseall -s 'dll|so|oct' -T /full_path/rebase_list
-
-After rebasing the "make" should be able to complete the
-creation of the images and the documentation.
-
-------------------------------------------------------
-
-Octave-3.4.3-3 package was built using:
-
-configure --libexecdir=/usr/lib \
-          --enable-shared \
-          --enable-float-truncate \
-          F77=gfortran-4 \
-          lt_cv_deplibs_check_method=pass_all \
-          LDFLAGS=-no-undefined
-
-plus and additional patch to solve a specific cygwin
-fltk print issue, see:
-https://savannah.gnu.org/bugs/?31641
-
-Octave-3.2.4 was built using:
-
-configure --enable-shared \
-          --without-fltk \
-          --without-framework-opengl \
-          CC=gcc-4 F77=gfortran-4 CXX=g++-4 CPP=cpp-4
-          CFLAGS="-Dtimezone=_timezone"
-
-------------------------------------------------------
-Current Cygwin package maintainer for Octave:
-
-  Marco Atzeri
-  http://matzeri.altervista.org
-
-Marco Atzeri
-marco.atzeri@gmail.com
-Italy
-
-Last updated: Tue Jan  3 14:40:58 WEST 2012
diff --git a/etc/README.Linux b/etc/README.Linux
deleted file mode 100644
--- a/etc/README.Linux
+++ /dev/null
@@ -1,10 +0,0 @@
-There are binary packages for Debian, Fedora, and other GNU/Linux
-distributions.
-
-Octave should build cleanly from source on most GNU/Linux systems.
-
-
-John W. Eaton
-jwe@octave.org
-
-Last updated: Wed, 31 Oct 2007 16:22:26 EDT
diff --git a/etc/README.MacOS b/etc/README.MacOS
deleted file mode 100644
--- a/etc/README.MacOS
+++ /dev/null
@@ -1,422 +0,0 @@
-1. Easy to install Binary Releases
-==================================
-
-A MacOS bundle is available from sourceforge.
-
-  http://octave.sourceforge.net/index.html
-
-There are also Octave packages available from both Fink and MacPorts.  Each
-of these package managers handle the details of compiling Octave from source.
-
-  http://www.finkproject.com
-  http://www.macports.org/
-
-
-2. Building from Source
-=======================
-
-Stable releases, development snapshots as well as the current developers
-sources are available. The sources for stable releases are available from
-the links below.
-
-  ftp://ftp.gnu.org/pub/gnu/octave/
-  http://ftp.gnu.org/pub/gnu/octave/
-
-Development snapshots, intended for testing, are available from the link
-below.
-
-  ftp://alpha.gnu.org/gnu/octave
-
-Links to the stable releases, snap shots, and instructions for obtaining
-the current development sources using mercurial can be found on Octave's
-web-site below.
-
-  http://www.octave.org/download.html
-
-Building on MacOS can vary significantly between versions.  These
-instructions document the procedure for MacOS 10.6.X.
-
-
-2.1 Developer's Tools
----------------------
-
-Apple's Xcode Developer's Tools must be installed to build Octave on MacOS X.
-
-A fortran compiler is also required to build Octave.
-
-AT&T Research provides versions of gfortran which have been patched to work
-with gcc tool set bundled with Xcode.
-
-  http://r.research.att.com/tools/
-
-Alternatively, the Fink and MacPorts package managers provide more recent
-versions of gcc which include gfortan.  Those may be used to build the sources
-as well.  However, care must be taken.
-
-  * The same compiler must be used to build all all of Octave's sources.  This
-    is necessary to avoid conflicts between the compiler libraries such as
-    libstdc++.  For a successful build the first file in LDFLAGS must refer to
-    this library.  For example, if building with gcc-4.5 obtained from MacPorts
-    LDFLAGS would begin as,
-
-      export LDFLAGS="/opt/local/lib/gcc45/libstdc++.6.dylib [...]"
-
-  * As of MacOS 10.6.6, the 64-bit BLAS routines that are part of Apple's vecLib
-    (framework accelerate) are not functioning correctly.  As a work around, an
-    alternative BLAS/LAPACK library, such as ATLAS, must be used.  A bug report
-    has been filed with Apple.
-
-      http://bugreport.apple.com
-      Title: "64 bit ABI issue with libBLAS.dylib"
-      Problem ID: 7850167
-      Date: April 11, 2010 at 12:04 AM
-
-
-2.2 Manual Package Management
------------------------------
-
-Instructions for building Octave are available on the web at the link below.
-
-    http://wiki.octave.org/Build_from_source
-
-In addition, those wishing to build on MacOS X (10.6.x) should read section
-2.1 above.
-
-2.2.1 Critical Dependencies
----------------------------
-
-The minimal dependencies needed to build Octave's snap-shots are listed below.
-
-  * Xcode
-
-  * Xcode-compatible gfortran: Available from http://r.reseach.att.com/tools
-
-  * gnu sed: Available from http://www.gnu.org/software/sed/
-
-      ./configure --prefix=/usr
-      make
-      sudo make install
-
-  * gnu pcre: Available from ftp://ftp.gnu.org/
-      The following build instructions will produce a universal binary,
-      allowing both 32- and 64-bit code to link to pcre.  Whenever replacing
-      libraries which came with the OS, it is necessary to compile them as
-      universal binaries (even if you are only going to use one architecture)
-      to avoid disrupting unrelated code which might also link to the library.
-
-      export CFLAGS="-arch i686 -arch x86_64"
-      export LDFLAGS="-arch i686 -arch x86_64"
-      ./configure --prefix=/usr --disable-dependency-tracking
-      make
-      sudo make install
-
-  * flex: Available from http://flex.sourceforge.net/
-
-      ./configure --prefix=/usr
-      make
-      sudo make install
-
-  * blas/lapack
-
-    - The Apple/Intel-provided BLAS works out of the box in 32-bit as long as
-      the -ff2c flag is used.  Alternatively, a wrapper for Apple's vecLib
-      framework may be used, enabling 64-bit.
-
-      https://mailman.cae.wisc.edu/pipermail/octave-maintainers/2011-January/022541.html
-
-A fully functional Octave requires additional dependencies.  Here is an example
- of how to compile one of them as a universal binary:
-
-  * fftw3: Available from http://www.fftw.org/download.html
-
-      export F77="/usr/bin/gfortran"
-      export CFLAGS="-arch i686 -arch x86_64"
-      export FFLAGS="$CFLAGS"
-      export LDFLAGS="$CFLAGS"
-      ./configure --disable-dependency-tracking
-      make
-      sudo make install
-      make clean
-      ./configure --enable-float --disable-dependency-tracking
-      make
-      sudo make install
-
-See the link below for additional details about optional dependencies.
-
-    http://wiki.octave.org/Build_from_source
-
-TODO - Modify the configure script to test for 64 bit vecLib bug.  When the bug
-       is present, apply the wrapper solution.
-
-
-2.2.2 Building Octave as a 32-bit Application
---------------------------------------------
-
-The commands below are sufficient to build a 32-bit Octave.
-
-  export FC="/usr/bin/gfortran"
-  export CFLAGS="-m32"
-  export FFLAGS="$CFLAGS -ff2c"
-  export CPPFLAGS="$CFLAGS -D_REENTRANT -D__LISTS__"
-  export LDFLAGS="$CFLAGS"
-  ./configure --disable-readline --disable-docs
-  make
-
-Octave provides an integrated tests suite.
-
-  make check
-
-Octave may be run without installing the application using the utility below.
-
-  ./run-octave
-
-2.2.3 Building Octave as a 64-bit Application
---------------------------------------------
-
-The commands below are sufficient to build a 64-bit Octave.
-
-  export FC="/usr/bin/gfortran"
-  export CFLAGS="-arch x86_64"
-  export FFLAGS="$CFLAGS"
-  export CPPFLAGS="$CFLAGS -D_REENTRANT -D__LISTS__"
-  export LDFLAGS="$CFLAGS"
-  ./configure --disable-readline --disable-docs
-  make
-
-Octave provides an integrated tests suite.
-
-  make check
-
-Octave may be run without installing the application using the utility below.
-
-  ./run-octave
-
-
-2.3 Building With Dependencies Satisfied by Fink
-------------------------------------------------
-
-To install and setup the Fink package manager see the on line documentation.
-
-  http://www.finkproject.org/
-
-Currently, Fink does not have a package available for Octave versions above
-3.0.x.  These instructions will allow the developers sources to be build and
-run, but will not permit Octave to be installed in the usual Fink way.
-
-TODO - When a Fink package is developed for Octave 3.4.x, modify these
-       instructions to model the MacPorts section.
-
-
-2.3.1 Dependencies
-------------------
-
-To build Octave's sources the list of Fink packages below need to be installed.
-
-  aquaterm
-  arpack
-  autoconf (>= 2.6.0)
-  automake (>= 1.11)
-  fftw3 (>= 3.1.1)
-  fftw3-shlibs (>= 3.1.1)
-  flex >= 2.5.30
-  fltk-aqua-shlibs
-  glpk-dev
-  glpk-shlibs
-  gnuplot (>= 4.4)
-  graphicsmagick (<= 1.3.7)
-  graphicsmagick-shlibs (<= 1.3.7)
-  hdf5 (>= 1.6.5)
-  hdf5-shlibs (>= 1.6.5)
-  libcurl4
-  libcurl4-shlibs
-  libncurses5
-  libncurses5-shlibs
-  libtool >= 2.2.2
-  ncurses
-  pcre
-  pcre-shlibs
-  qhull
-  qrupdate [1]
-  readline5
-  readline5-shlibs
-  sed
-  suitesparse (= 3.1.0-1 )
-
-Some of Octave's dependencies are among the default packages for Fink.  These
-include the list below, and possibly others as well.
-
-  tetex
-  texinfo
-
-For fully functional printing (graphics output), the following packages must
-be installed.
-
-  epstool
-  ghostscript
-  pstoedit
-  transfig [2]
-
-[1] Fink does not yet have a package for qrupdate.  However, one is available
-    in the tracker at the link below.
-
-    http://sourceforge.net/tracker/index.php?func=detail&aid=2861045&group_id=17203&atid=414256
-
-[2] Optionally the "xfig" package may be installed.
-
-
-2.3.2 Building With Dependencies Satisfied by Fink
---------------------------------------------------
-
-After installing each of the dependencies, the sources are compiled by
-setting the proper environment variables and then following the standard build
-sequence.  The following is an example set of variables for a 32-bit build
-using gcc-4.2.  When building from the sources obtained from the Mercurial
-archive, ./bootstrap must be run prior to ./configure.
-
-  export FINK_PREFIX="/sw"
-  export PREFIX="/usr/local/bin"
-
-  export OPTFLAGS="-O2 -g"
-  export LDFLAGS="-L$FINK_PREFIX/lib -L/usr/lib -m32"
-  export CFLAGS="-I$FINK_PREFIX/include $OPTFLAGS -m32"
-  export CXXFLAGS=$CFLAGS
-  export CPPFLAGS="$CXXFLAGS -D__LISTS__"
-  export ACLOCAL_FLAGS="-I$FINK_PREFIX/share/aclocal"
-  export PKG_CONFIG_PATH="$FINK_PREFIX/lib/pkgconfig"
-  export PATH="$FINK_PREFIX/var/lib/fink/path-prefix-10.6/:$PATH"
-  export MACOSX_DEPLOYMENT_TARGET=10.5
-  export PATH="$FINK_PREFIX/lib/flex/bin:$PATH"
-  export CPPFLAGS="-I$FINK_PREFIX/lib/flex/include $CPPFLAGS"
-  export LDFLAGS="-L$FINK_PREFIX/lib/flex/lib $LDFLAGS"
-  export CC="gcc-4.2"
-  export CPP="cpp-4.2"
-  export CXX="g++-4.2"
-  export F77="/usr/bin/gfortran-4.2"
-  export FLIBS="-lgfortran -lgfortranbegin"
-  export FFLAGS="-ff2c $OPTFLAGS -m32"
-  export CPPFLAGS="$CPPFLAGS -I$FINK_PREFIX/include/freetype2 \
-                             -I$FINK_PREFIX/include/qhull \
-                             -I/usr/include"
-  export CXXFLAGS="$CXXFLAGS -D_THREAD_SAFE -D_REENTRANT"
-
-  ./configure --prefix=$PREFIX \
-              --libexecdir='${prefix}/lib' \
-              --with-blas="-Wl,-framework -Wl,vecLib"
-  make
-
-Note: This approach to building Octave does not support "make install".
-
-TODO - Develop a Fink package for Octave 3.4.x.
-
-
-2.4 Building With Dependencies Satisfied by MacPorts
-----------------------------------------------------
-
-To install and setup the MacPorts package manager see the online documentation
-
-    http://guide.macports.org/
-
-Using MacPorts, two approaches are described.  The first describes how to build
-and locally install Octave from a formal snapshot of the developer's sources or
-from the developer's sources themselves.  This is intended to the casual Octave
-developer, or for users who want to live on the bleeding edge.
-
-The second describes an approach for building Octave which is intended for
-active developers.  In this case, MacPorts is used to satisfy Octave's
-dependencies, but MacPorts does not build Octave.  Further a direct install of
-Octave is not possible (i.e., cannot "make install").
-
-
-2.4.1 Building and Installing Octave
-------------------------------------
-
-With MacPorts building the developer's sources is convenient.  MacPorts
-includes a port file for octave-devel.  To build and run the most recent
-development snapshots, enter the commands below.
-
-  sudo port selfupdate
-  sudo port install octave-devel
-
-To build the developers sources in one's own way, or if MacPorts' version is
-outdated, a custom port file can be added.  This requires setting up a local
-port file repository (link below).
-
-  http://guide.macports.org/#development.local-repositories
-
-The octave-devel port file may be used as an initial starting point.  The port
-file is accessible from the web at the link below.
-
-  http://trac.macports.org/browser/trunk/dports/math/octave-devel/Portfile
-
-It is also available locally at the location below.  The parameter ${prefix} is
-corresponds to where MacPorts is install, which by default is "/opt/local".
-
-  ${prefix}/var/macports/sources/rsync.macports.org/release/ports/math/octave-devel/Portfile
-
-If the Portfile is missing the dependencies, epstools, epstoedit, and transfig,
-those should be installed manually or added to the Portfile. To install
-manually, type the command below.
-
-  sudo port install epstools epstoedit transfig
-
-The local source tarball must be placed in the location below, where ${name}
-and ${distname} are each specified in the port file.
-
-  ${prefix}/var/macports/distfiles/${name}/${disname}.tar.gz
-
-
-2.4.2 Building for Active Development of Octave
------------------------------------------------
-
-To satisfy most of Octave's dependencies, first install the octave-devel port.
-
-  sudo port selfupdate
-  sudo port install octave-devel
-
-Now uninstall the Octave port.
-
-  sudo port deactivate octave-devel
-
-This will remove Octave and leave its dependencies in place. Some additional
-dependencies may be needed.
-
-  sudo port install epstools epstoedit transfig
-
-Octave may now be built from a local mercurial archive by typing the commands
-below (these assume gcc-4.4 is installed by macports).
-
-  ./bootstrap
-  export PREFIX=/opt/local
-  export CC=/opt/local/bin/gcc-mp-4.4
-  export CXX=/opt/local/bin/g++-mp-4.4
-  export CXXCPP="/opt/local/bin/g++-mp-4.4 -E"
-  export F77=/opt/local/bin/gfortran-mp-4.4
-  export FC=/opt/local/bin/gfortran-mp-4.4
-  export CXXFLAGS="-pipe -O2 -m64"
-  export FFLAGS="$CXXFLAGS -D_THREAD_SAFE -pthread"
-  export CFLAGS="$FFLAGS -lstdc++"
-  export LDFLAGS=-L$PREFIX/lib
-  export CPPFLAGS=-I$PREFIX/include
-  export BLAS_LIBS="-lcblas -lf77blas -latlas"
-  export LAPACK_LIBS=-llapack
-  ./configure --prefix="/opt/local" --without-framework-carbon --with-x
-  make
-
-Octave's integrated tests may be run.
-
-  make check
-
-"make install" should not be run as it will bypass the macports package
-management.  To run Octave, type the command below from the root of the
-mercurial archive.
-
-  ./run-octave
-
-
-John W. Eaton
-jwe@octave.org
-
-Ben Abbott
-bpabbott@mac.com
-
-Last updated: Sat Feb 19 14:15:04 PST 2011
diff --git a/etc/README.MinGW b/etc/README.MinGW
deleted file mode 100644
--- a/etc/README.MinGW
+++ /dev/null
@@ -1,108 +0,0 @@
-1. General Users
-================
-
-A MInGW bundle is available from sourceforge.
-
- http://octave.sourceforge.net/index.html
-
-2. Developers
-=============
-
-The process for building Octave from source is as follows.
-
- * Install development tools and compiler
- * Install or compile dependencies of Octave
- * Download Octave source
- * Configure and compile source
-
-We strongly encourage experienced users to build Octave from the
-testing and development snapshots to try the latest features of Octave.
-
-A good tutorial on building Octave for version 3.2 is available from
-http://octave.svn.sourceforge.net/viewvc/octave/trunk/octave-forge/admin/Windows/mingw32/HOWTO.txt
-
-Additional information beyond the tutorial is summarized below.
-
- 2.1 Development tools and compiler
- ----------------------
- Msys + MinGW development Tools
-
- The Msys + MinGW development Tools are required to build Octave from source.
-
- The latest version of the Msys system is 1.0.16.  For MinGW, search and use
- the most recent version available.  Note: The Howto.txt file describing
- the development tools is rather old.
-
- The latest GCC (GNU Complier Collection) for MinGW is gcc-4.5.0.  Earlier
- versions are not recommended for building Octave 3.4.xx.
-
- The latest Msys, MinGW, and GCC tools can be downloaded from
- http://sourceforge.net/projects/mingw/files/
-
- (Compiling for 64-bit binaries requires mingw-64 toolkits.  This has not been
-  tested.)
-
- 2.2 Dependencies
- ----------------------
-
- External program dependencies
-
-  * gnuplot (you can build this with the shell script mentioned in Howto.txt)
-  * MikTeX
-  * ghostscript
-  * pstoedit (required for printing using FLTK (OpenGL) graphics)
-  * fig2dev (Optional; better quality for FLTK printing in some file formats)
-  * sed
-  * less
-
- The tools below are required for building the development sources from
- the Mercurial archive, but not for simply building Octave from a snapshot
- tar.gz file.
-
-  * Mercurial
-  * git
-  * automake
-  * autoconf
-
- Library dependencies
-
-  Please read Howto.txt carefully on how to build them.  The Howto.txt is old
-  so some revisions will be required when using GCC-4.5.0
-
- 2.3 Download Octave source
- ----------------------
-
-  The source for testing snapshots can be downloaded from the official Octave
-  web site.  http://www.octave.org/download.html
-
-  The very latest development code is also available via anonymous access to a
-  read-only Mercurial archive.  The method of download is described on the web
-  site.  You will also need to install gnulib as another dependency.  Please
-  visit http://www.gnu.org/software/gnulib/ and download sources using git.
-
- 2.4 Configure and compile source
- ----------------------
-
-  Building from source can be carried out using the script described in
-  Howto.txt.
-
-  When using GCC-4.5.0, remove flags for shared libstdc++ because a shared
-  build is already the default.
-
-  When running './configure', you must add '--enable-float-truncate' option.
-  Please see the following thread for more information:
-  http://thread.gmane.org/gmane.comp.gnu.octave.bugs/12361/focus=12404
-
-  To build development sources from the Mercurial repository you must run
-  bootstrap before running configure and make.  This requires
-  that automake and autoconf tools be installed.
-
-
-Tatsuro MATSUOKA
-tmacchant@yahoo.co.jp
-
-Benjamin Lindner
-bjmldn@gmail.com
-
-
-Last updated: Sat Jan 22 17:29:12 PST 2011
diff --git a/etc/README.Windows b/etc/README.Windows
deleted file mode 100644
--- a/etc/README.Windows
+++ /dev/null
@@ -1,11 +0,0 @@
-See the file README.Cygwin for information about installing the binary
-package of Octave for Cygwin.
-
-See the file README.MinGW for information about Octave on the MinGW platform
-including installation of binaries or compiling Octave from source.
-
-
-John W. Eaton
-jwe@octave.org
-
-Last updated: Sat Jan 22 16:56:05 PST 2011
diff --git a/etc/README.gnuplot b/etc/README.gnuplot
deleted file mode 100644
--- a/etc/README.gnuplot
+++ /dev/null
@@ -1,7 +0,0 @@
-Octave requires gnuplot 4.4 or higher, which is available from
-http://www.gnuplot.info.
-
-John W. Eaton
-jwe@octave.org
-
-Last updated: Wed Sep 14 12:25:25 PDT 2016
diff --git a/etc/README.kpathsea b/etc/README.kpathsea
deleted file mode 100644
--- a/etc/README.kpathsea
+++ /dev/null
@@ -1,171 +0,0 @@
-The code in the files
-
-  liboctave/kpse.cc
-  liboctave/kpse-xfns.h
-  liboctave/kpse-xfns.c
-
-was adapted from the kpathsearch library.  We don't use kpathsearch
-directly now because it has too many TeX-specific things that are not
-necessary for Octave, and it also does not implement all the special
-kinds of file searches that Octave needs (mainly for compatibility
-with Matlab).
-
-Original authors of the kpathsearch library
--------------------------------------------
-
-Karl Berry wrote all files not otherwise marked, with help from Kathryn
-Hargreaves on some of the original versions.
-
-Thomas Esser originated most of the MakeTeX... scripts.
-
-The brace expansion code in expand.c was written by Brian Fox and Chet
-Ramey for Bash, the GNU shell.
-
-The implementation of the link trick in pathsearch.c is taken from GNU
-find, implemented by David MacKenzie from Matthew Farwell's suggestion.
-
-Debugging
----------
-
-  Kpathsea provides a number of runtime debugging options, detailed
-below by their names and corresponding numeric values.  When the files
-you expect aren't being found, the thing to do is enable these options
-and examine the output.
-
-  You can set these with some runtime argument (e.g., `-d') to the
-program; in that case, you should use the numeric values described in
-the program's documentation (which, for Dvipsk and Xdvik, are different
-than those below).  It's best to give the `-d' (or whatever) option
-first, for maximal output.  Dvipsk and Xdvik have additional
-program-specific debugging options as well.
-
-  You can also set the environment variable `KPATHSEA_DEBUG'; in this
-case, you should use the numbers below.  If you run the program under a
-debugger and set the variable `kpathsea_debug', also use the numbers
-below.
-
-  In any case, by far the simplest value to use is `-1', which will
-turn on all debugging output.  This is usually better than guessing
-which particular values will yield the output you need.
-
-  Debugging output always goes to standard error, so you can redirect it
-easily.  For example, in Bourne-compatible shells:
-     dvips -d -1 ... 2>/tmp/debug
-
-  It is sometimes helpful to run the standalone Kpsewhich utility
-(*note Invoking kpsewhich::.), instead of the original program.
-
-  In any case, you can *not* use the *names* below; you must always use
-somebody's numbers.  (Sorry.)  To set more than one option, just sum
-the corresponding numbers.
-
-`KPSE_DEBUG_STAT (1)'
-     Report `stat'(2) calls.  This is useful for verifying that your
-     directory structure is not forcing Kpathsea to do many additional
-     file tests (*note Slow path searching::., and *note Subdirectory
-     expansion::.).  If you are using an up-to-date `ls-R' database
-     (*note Filename database::.), this should produce no output unless
-     a nonexistent file that must exist is searched for.
-
-`KPSE_DEBUG_HASH (2)'
-     Report lookups in all hash tables: `ls-R' and `aliases' (*note
-     Filename database::.); font aliases (*note Fontmap::.); and config
-     file values (*note Config files::.).  Useful when expected values
-     are not being found, e.g.., file searches are looking at the disk
-     instead of using `ls-R'.
-
-`KPSE_DEBUG_FOPEN (4)'
-     Report file openings and closings.  Especially useful when your
-     system's file table is full, for seeing which files have been
-     opened but never closed.  In case you want to set breakpoints in a
-     debugger: this works by redefining `fopen' (`fclose') to be
-     `kpse_fopen_trace' (`kpse_fclose_trace').
-
-`KPSE_DEBUG_PATHS (8)'
-     Report general path information for each file type Kpathsea is
-     asked to search.  This is useful when you are trying to track down
-     how a particular path got defined--from `texmf.cnf', `config.ps',
-     an environment variable, the compile-time default, etc.  This is
-     the contents of the `kpse_format_info_type' structure defined in
-     `tex-file.h'.
-
-`KPSE_DEBUG_EXPAND (16)'
-     Report the directory list corresponding to each path element
-     Kpathsea searches.  This is only relevant when Kpathsea searches
-     the disk, since `ls-R' searches don't look through directory lists
-     in this way.
-
-`KPSE_DEBUG_SEARCH (32)'
-     Report on each file search: the name of the file searched for, the
-     path searched in, whether or not the file must exist (when drivers
-     search for `cmr10.vf', it need not exist), and whether or not we
-     are collecting all occurrences of the file in the path (as with,
-     e.g., `texmf.cnf' and `texfonts.map'), or just the first (as with
-     most lookups).  This can help you correlate what Kpathsea is doing
-     with what is in your input file.
-
-`KPSE_DEBUG_VARS (64)'
-     Report the value of each variable Kpathsea looks up.  This is
-     useful for verifying that variables do indeed obtain their correct
-     values.
-
-`GSFTOPK_DEBUG (128)'
-     Activates debugging printout specific to `gsftopk' program.
-
-`MAKETEX_DEBUG (512)'
-     If you use the optional `mktex' programs instead of the
-     traditional shell scripts, this will report the name of the site
-     file (`mktex.cnf' by default) which is read, directories created by
-     `mktexdir', the full path of the `ls-R' database built by
-     `mktexlsr', font map searches, `MT_FEATURES' in effect, parameters
-     from `mktexnam', filenames added by `mktexupd', and some
-     subsidiary commands run by the programs.
-
-`MAKETEX_FINE_DEBUG (1024)'
-     When the optional `mktex' programs are used, this will print
-     additional debugging info from functions internal to these
-     programs.
-
-  Debugging output from Kpathsea is always written to standard error,
-and begins with the string `kdebug:'.  (Except for hash table buckets,
-which just start with the number, but you can only get that output
-running under a debugger.  See comments at the `hash_summary_only'
-variable in `kpathsea/db.c'.)
-
-Logging
--------
-
-  Kpathsea can record the time and filename found for each successful
-search.  This may be useful in finding good candidates for deletion when
-your filesystem is full, or in discovering usage patterns at your site.
-
-  To do this, define the environment or config file variable
-`TEXMFLOG'.  The value is the name of the file to append the
-information to.  The file is created if it doesn't exist, and appended
-to if it does.
-
-  Each successful search turns into one line in the log file: two words
-separated by a space.  The first word is the time of the search, as the
-integer number of seconds since "the epoch", i.e., UTC midnight 1
-January 1970 (more precisely, the result of the `time' system call).
-The second word is the filename.
-
-  For example, after `setenv TEXMFLOG /tmp/log', running Dvips on
-`story.dvi' appends the following lines:
-
-     774455887 /usr/local/share/texmf/dvips/config.ps
-     774455887 /usr/local/share/texmf/dvips/psfonts.map
-     774455888 /usr/local/share/texmf/dvips/texc.pro
-     774455888 /usr/local/share/texmf/fonts/pk/ljfour/public/cm/cmbx10.600pk
-     774455889 /usr/local/share/texmf/fonts/pk/ljfour/public/cm/cmsl10.600pk
-     774455889 /usr/local/share/texmf/fonts/pk/ljfour/public/cm/cmr10.600pk
-     774455889 /usr/local/share/texmf/dvips/texc.pro
-
-Only filenames that are absolute are recorded, to preserve some
-semblance of privacy.
-
-
-John W. Eaton
-jwe@octave.org
-
-Last updated: Wed, 31 Oct 2007 16:33:13 EDT
diff --git a/etc/module.mk b/etc/module.mk
--- a/etc/module.mk
+++ b/etc/module.mk
@@ -4,23 +4,16 @@
 %canon_reldir%_DISTCLEANFILES =
 %canon_reldir%_MAINTAINERCLEANFILES =
 
 %canon_reldir%_EXTRA_DIST += \
   %reldir%/NEWS.1 \
   %reldir%/NEWS.2 \
   %reldir%/NEWS.3 \
   %reldir%/PROJECTS \
-  %reldir%/README.Cygwin \
-  %reldir%/README.Linux \
-  %reldir%/README.MacOS \
-  %reldir%/README.MinGW \
-  %reldir%/README.Windows \
-  %reldir%/README.gnuplot \
-  %reldir%/README.kpathsea \
   %reldir%/gdbinit
 
 %canon_reldir%_EXTRA_DIST += \
   %reldir%/OLD-ChangeLogs/ChangeLog \
   %reldir%/OLD-ChangeLogs/ChangeLog.1 \
   %reldir%/OLD-ChangeLogs/doc-ChangeLog \
   %reldir%/OLD-ChangeLogs/libcruft-ChangeLog \
   %reldir%/OLD-ChangeLogs/liboctave-ChangeLog \
