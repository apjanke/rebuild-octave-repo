# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1205937513 14400
#      Wed Mar 19 10:38:33 2008 -0400
# Node ID 7bfaa9611558fc84e653c12fb7cd9f233f1a070b
# Parent  8a939b21786329cab992c0e1136a4c7e90d0128a
Rewrite sparse mappers in terms of a functor template function

diff --git a/liboctave/CSparse.cc b/liboctave/CSparse.cc
--- a/liboctave/CSparse.cc
+++ b/liboctave/CSparse.cc
@@ -34,16 +34,17 @@ along with Octave; see the file COPYING.
 #include "lo-ieee.h"
 #include "lo-mappers.h"
 #include "f77-fcn.h"
 #include "dRowVector.h"
 
 #include "CSparse.h"
 #include "boolSparse.h"
 #include "dSparse.h"
+#include "functor.h"
 #include "oct-spparms.h"
 #include "SparseCmplxLU.h"
 #include "oct-sparse.h"
 #include "sparse-util.h"
 #include "SparseCmplxCHOL.h"
 #include "SparseCmplxQR.h"
 
 // Define whether to use a basic QR solver or one that uses a Dulmange
@@ -7440,174 +7441,29 @@ SparseComplexMatrix::diag (octave_idx_ty
       ("diag: requested diagonal out of range");
 
   return d;
 }
 
 SparseMatrix
 SparseComplexMatrix::map (dmapper fcn) const
 {
-  SparseMatrix result;
-  double f_zero = fcn (0.);
-
-  if (f_zero != 0.)
-    {
-      octave_idx_type nr = rows ();
-      octave_idx_type nc = cols ();
-      
-      result = SparseMatrix (nr, nc, f_zero);
-
-      for (octave_idx_type j = 0; j < nc; j++)
-	for (octave_idx_type i = cidx(j); i < cidx (j+1); i++)
-	  {
-	    OCTAVE_QUIT;
-	    /* Use data instead of elem for better performance.  */
-	    result.data (ridx (i) + j * nr) = fcn (data(i));
-	  }
-
-      result.maybe_compress (true);
-    }
-  else
-    {
-      octave_idx_type nz = nnz ();
-      octave_idx_type nr = rows ();
-      octave_idx_type nc = cols ();
-
-      result = SparseMatrix (nr, nc, nz);
-      octave_idx_type ii = 0;
-      result.cidx (ii) = 0;
-
-      for (octave_idx_type j = 0; j < nc; j++)
-	{
-	  for (octave_idx_type i = cidx(j); i < cidx (j+1); i++)
-	    {
-	      double val = fcn (data (i));
-	      if (val != 0.0)
-		{
-		  result.data (ii) = val;
-		  result.ridx (ii++) = ridx (i);
-		}
-	      OCTAVE_QUIT;
-	    }
-	  result.cidx (j+1) = ii;
-	}
-
-      result.maybe_compress (false);
-    }
-
-  return result;
+  return MSparse<Complex>::map<double> (func_ptr (fcn));
 }
 
 SparseComplexMatrix
 SparseComplexMatrix::map (cmapper fcn) const
 {
-  SparseComplexMatrix result;
-  Complex f_zero = fcn (0.);
-
-  if (f_zero != 0.)
-    {
-      octave_idx_type nr = rows ();
-      octave_idx_type nc = cols ();
-      
-      result = SparseComplexMatrix (nr, nc, f_zero);
-
-      for (octave_idx_type j = 0; j < nc; j++)
-	for (octave_idx_type i = cidx(j); i < cidx (j+1); i++)
-	  {
-	    OCTAVE_QUIT;
-	    /* Use data instead of elem for better performance.  */
-	    result.data (ridx (i) + j * nr) = fcn (data(i));
-	  }
-
-      result.maybe_compress (true);
-    }
-  else
-    {
-      octave_idx_type nz = nnz ();
-      octave_idx_type nr = rows ();
-      octave_idx_type nc = cols ();
-
-      result = SparseComplexMatrix (nr, nc, nz);
-      Complex zero = Complex (0.0, 0.0);
-      octave_idx_type ii = 0;
-      result.cidx (ii) = 0;
-
-      for (octave_idx_type j = 0; j < nc; j++)
-	{
-	  for (octave_idx_type i = cidx(j); i < cidx (j+1); i++)
-	    {
-	      Complex val = fcn (data (i));
-	      if (val != zero)
-		{
-		  result.data (ii) = val;
-		  result.ridx (ii++) = ridx (i);
-		}
-	      OCTAVE_QUIT;
-	    }
-	  result.cidx (j+1) = ii;
-	}
-
-      result.maybe_compress (false);
-    }
-
-  return result;
+  return MSparse<Complex>::map<Complex> (func_ptr (fcn));
 }
 
 SparseBoolMatrix
 SparseComplexMatrix::map (bmapper fcn) const
 {
-  SparseBoolMatrix result;
-  bool f_zero = fcn (0.);
-
-  if (f_zero)
-    {
-      octave_idx_type nr = rows ();
-      octave_idx_type nc = cols ();
-      
-      result = SparseBoolMatrix (nr, nc, f_zero);
-
-      for (octave_idx_type j = 0; j < nc; j++)
-	for (octave_idx_type i = cidx(j); i < cidx (j+1); i++)
-	  {
-	    OCTAVE_QUIT;
-	    /* Use data instead of elem for better performance.  */
-	    result.data (ridx (i) + j * nr) = fcn (data(i));
-	  }
-
-      result.maybe_compress (true);
-    }
-  else
-    {
-      octave_idx_type nz = nnz ();
-      octave_idx_type nr = rows ();
-      octave_idx_type nc = cols ();
-
-      result = SparseBoolMatrix (nr, nc, nz);
-      octave_idx_type ii = 0;
-      result.cidx (ii) = 0;
-
-      for (octave_idx_type j = 0; j < nc; j++)
-	{
-	  for (octave_idx_type i = cidx(j); i < cidx (j+1); i++)
-	    {
-	      bool val = fcn (data (i));
-	      if (val)
-		{
-		  result.data (ii) = val;
-		  result.ridx (ii++) = ridx (i);
-		}
-	      OCTAVE_QUIT;
-	    }
-	  result.cidx (j+1) = ii;
-	}
-
-      result.maybe_compress (false);
-    }
-
-  return result;
+  return MSparse<Complex>::map<bool> (func_ptr (fcn));
 }
 
 std::ostream&
 operator << (std::ostream& os, const SparseComplexMatrix& a)
 {
   octave_idx_type nc = a.cols ();
 
    // add one to the printed indices to go from
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,22 @@
+2008-03-19  David Bateman  <dbateman@free.fr>
+
+	* Sparse.h (template <class U, class F> Sparse<U> map (F fcn)
+	const): New template function.
+	* MSparse.h (template <class U, class F> MSparse<U> map (F fcn)
+	const): ditto.
+	* dSparse.cc (SparseMatrix SparseMatrix::map (dmapper) const,
+	SparseComplexMatrix SparseMatrix::map (cmapper) const,
+	SparseBoolMatrix SparseMatrix::map (bmapper) const): Rewrite in
+	terms of the new template functor.
+	* CSparse.cc (SparseMatrix SparseComplexMatrix::map (dmapper) const,
+	SparseComplexMatrix SparseComplexMatrix::map (cmapper) const,
+	SparseBoolMatrix SparseComplexMatrix::map (bmapper) const): ditto.
+	
 2008-03-18  David Bateman  <dbateman@free.fr>
 
 	* lo-specfun.cc (Complex xlgamma (const Complex&)): New function.
 	* lo-specfun.h (Complex xlgamma (const Complex&)): Declare it.
 	* randpoison.c (xlgamma): Use lgamma if HAVE_LGAMMA is defined.
 	
 	* dNDArray.cc (NDArray::min, NDArraymax): chop trailing singletons.
 	* CNDarray.cc (ComplexNDArray::min, CompelxNDArray::max): ditto.
diff --git a/liboctave/MSparse.h b/liboctave/MSparse.h
--- a/liboctave/MSparse.h
+++ b/liboctave/MSparse.h
@@ -107,16 +107,22 @@ public:
      
   MSparse<T> permute (const Array<octave_idx_type>& vec, bool inv = false) const
     { return Sparse<T>::permute (vec, inv); }
 
   MSparse<T> ipermute (const Array<octave_idx_type>& vec) const
     { return Sparse<T>::ipermute (vec); }
 
 
+  template <class U, class F>
+  MSparse<U> map (F fcn) const
+  {
+    return Sparse<T>::template map<U> (fcn);
+  }
+
   // Currently, the OPS functions don't need to be friends, but that
   // may change.
 
   // SPARSE_OPS_FRIEND_DECLS (MSparse, MArray2)
 };
 
 #endif
 
diff --git a/liboctave/Sparse.h b/liboctave/Sparse.h
--- a/liboctave/Sparse.h
+++ b/liboctave/Sparse.h
@@ -516,16 +516,71 @@ public:
 
   octave_idx_type *mex_get_ir (void) const { return const_cast<octave_idx_type *> (ridx ()); }
 
   octave_idx_type *mex_get_jc (void) const { return const_cast<octave_idx_type *> (cidx ()); }
 
   Sparse<T> sort (octave_idx_type dim = 0, sortmode mode = ASCENDING) const;
   Sparse<T> sort (Array<octave_idx_type> &sidx, octave_idx_type dim = 0,
 		 sortmode mode = ASCENDING) const;
+
+  template <class U, class F>
+  Sparse<U>
+  map (F fcn) const
+  {
+    Sparse<U> result;
+    U f_zero = fcn (0.);
+
+    if (f_zero != 0.)
+      {
+	octave_idx_type nr = rows ();
+	octave_idx_type nc = cols ();
+      
+	result = Sparse<U> (nr, nc, f_zero);
+
+	for (octave_idx_type j = 0; j < nc; j++)
+	  for (octave_idx_type i = cidx(j); i < cidx (j+1); i++)
+	    {
+	      OCTAVE_QUIT;
+	      /* Use data instead of elem for better performance.  */
+	      result.data (ridx (i) + j * nr) = fcn (data(i));
+	    }
+
+	result.maybe_compress (true);
+      }
+    else
+      {
+	octave_idx_type nz = nnz ();
+	octave_idx_type nr = rows ();
+	octave_idx_type nc = cols ();
+
+	result = Sparse<U> (nr, nc, nz);
+	octave_idx_type ii = 0;
+	result.cidx (ii) = 0;
+
+	for (octave_idx_type j = 0; j < nc; j++)
+	  {
+	    for (octave_idx_type i = cidx(j); i < cidx (j+1); i++)
+	      {
+		U val = fcn (data (i));
+		if (val != 0.0)
+		  {
+		    result.data (ii) = val;
+		    result.ridx (ii++) = ridx (i);
+		  }
+		OCTAVE_QUIT;
+	      }
+	    result.cidx (j+1) = ii;
+	  }
+
+	result.maybe_compress (false);
+      }
+
+    return result;
+  }
 };
 
 // NOTE: these functions should be friends of the Sparse<T> class and
 // Sparse<T>::dimensions should be protected, not public, but we can't
 // do that because of bugs in gcc prior to 3.3.
 
 template <class LT, class RT>
 /* friend */ int
diff --git a/liboctave/dSparse.cc b/liboctave/dSparse.cc
--- a/liboctave/dSparse.cc
+++ b/liboctave/dSparse.cc
@@ -34,16 +34,17 @@ along with Octave; see the file COPYING.
 #include "lo-ieee.h"
 #include "lo-mappers.h"
 #include "f77-fcn.h"
 #include "dRowVector.h"
 
 #include "CSparse.h"
 #include "boolSparse.h"
 #include "dSparse.h"
+#include "functor.h"
 #include "oct-spparms.h"
 #include "SparsedbleLU.h"
 #include "MatrixType.h"
 #include "oct-sparse.h"
 #include "sparse-util.h"
 #include "SparsedbleCHOL.h"
 #include "SparseQR.h"
 
@@ -7532,174 +7533,29 @@ SparseMatrix::matrix_value (void) const
       retval.elem (ridx(i), j) = data (i);
 
   return retval;
 }
 
 SparseMatrix
 SparseMatrix::map (dmapper fcn) const
 {
-  SparseMatrix result;
-  double f_zero = fcn (0.);
-
-  if (f_zero != 0.)
-    {
-      octave_idx_type nr = rows ();
-      octave_idx_type nc = cols ();
-      
-      result = SparseMatrix (nr, nc, f_zero);
-
-      for (octave_idx_type j = 0; j < nc; j++)
-	for (octave_idx_type i = cidx(j); i < cidx (j+1); i++)
-	  {
-	    OCTAVE_QUIT;
-	    /* Use data instead of elem for better performance.  */
-	    result.data (ridx (i) + j * nr) = fcn (data(i));
-	  }
-
-      result.maybe_compress (true);
-    }
-  else
-    {
-      octave_idx_type nz = nnz ();
-      octave_idx_type nr = rows ();
-      octave_idx_type nc = cols ();
-
-      result = SparseMatrix (nr, nc, nz);
-      octave_idx_type ii = 0;
-      result.cidx (ii) = 0;
-
-      for (octave_idx_type j = 0; j < nc; j++)
-	{
-	  for (octave_idx_type i = cidx(j); i < cidx (j+1); i++)
-	    {
-	      double val = fcn (data (i));
-	      if (val != 0.0)
-		{
-		  result.data (ii) = val;
-		  result.ridx (ii++) = ridx (i);
-		}
-	      OCTAVE_QUIT;
-	    }
-	  result.cidx (j+1) = ii;
-	}
-
-      result.maybe_compress (false);
-    }
-
-  return result;
+  return MSparse<double>::map<double> (func_ptr (fcn));
 }
 
 SparseComplexMatrix
 SparseMatrix::map (cmapper fcn) const
 {
-  SparseComplexMatrix result;
-  Complex f_zero = fcn (0.);
-
-  if (f_zero != 0.)
-    {
-      octave_idx_type nr = rows ();
-      octave_idx_type nc = cols ();
-      
-      result = SparseComplexMatrix (nr, nc, f_zero);
-
-      for (octave_idx_type j = 0; j < nc; j++)
-	for (octave_idx_type i = cidx(j); i < cidx (j+1); i++)
-	  {
-	    OCTAVE_QUIT;
-	    /* Use data instead of elem for better performance.  */
-	    result.data (ridx (i) + j * nr) = fcn (Complex (data(i), 0.0));
-	  }
-
-      result.maybe_compress (true);
-    }
-  else
-    {
-      octave_idx_type nz = nnz ();
-      octave_idx_type nr = rows ();
-      octave_idx_type nc = cols ();
-
-      result = SparseComplexMatrix (nr, nc, nz);
-      Complex zero = Complex (0.0, 0.0);
-      octave_idx_type ii = 0;
-      result.cidx (ii) = 0;
-
-      for (octave_idx_type j = 0; j < nc; j++)
-	{
-	  for (octave_idx_type i = cidx(j); i < cidx (j+1); i++)
-	    {
-	      Complex val = fcn (Complex (data (i), 0.0));
-	      if (val != zero)
-		{
-		  result.data (ii) = val;
-		  result.ridx (ii++) = ridx (i);
-		}
-	      OCTAVE_QUIT;
-	    }
-	  result.cidx (j+1) = ii;
-	}
-
-      result.maybe_compress (false);
-    }
-
-  return result;
+  return MSparse<double>::map<Complex> (func_ptr (fcn));
 }
 
 SparseBoolMatrix
 SparseMatrix::map (bmapper fcn) const
 {
-  SparseBoolMatrix result;
-  bool f_zero = fcn (0.);
-
-  if (f_zero)
-    {
-      octave_idx_type nr = rows ();
-      octave_idx_type nc = cols ();
-      
-      result = SparseBoolMatrix (nr, nc, f_zero);
-
-      for (octave_idx_type j = 0; j < nc; j++)
-	for (octave_idx_type i = cidx(j); i < cidx (j+1); i++)
-	  {
-	    OCTAVE_QUIT;
-	    /* Use data instead of elem for better performance.  */
-	    result.data (ridx (i) + j * nr) = fcn (data(i));
-	  }
-
-      result.maybe_compress (true);
-    }
-  else
-    {
-      octave_idx_type nz = nnz ();
-      octave_idx_type nr = rows ();
-      octave_idx_type nc = cols ();
-
-      result = SparseBoolMatrix (nr, nc, nz);
-      octave_idx_type ii = 0;
-      result.cidx (ii) = 0;
-
-      for (octave_idx_type j = 0; j < nc; j++)
-	{
-	  for (octave_idx_type i = cidx(j); i < cidx (j+1); i++)
-	    {
-	      bool val = fcn (data (i));
-	      if (val)
-		{
-		  result.data (ii) = val;
-		  result.ridx (ii++) = ridx (i);
-		}
-	      OCTAVE_QUIT;
-	    }
-	  result.cidx (j+1) = ii;
-	}
-
-      result.maybe_compress (false);
-    }
-
-  return result;
+  return MSparse<double>::map<bool> (func_ptr (fcn));
 }
 
 std::ostream&
 operator << (std::ostream& os, const SparseMatrix& a)
 {
   octave_idx_type nc = a.cols ();
 
    // add one to the printed indices to go from
