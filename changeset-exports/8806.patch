# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1234982720 18000
#      Wed Feb 18 13:45:20 2009 -0500
# Node ID c7864bb7491429c30ca5447cad00d2d3c7fda42c
# Parent  065a05eb148aeeb1cb2653fc6d9867610d914de5
avoid some GCC warnings

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -1548,28 +1548,29 @@ ComplexDET
 ComplexMatrix::determinant (octave_idx_type& info, double& rcon, int calc_cond) const
 {
   MatrixType mattype (*this);
   return determinant (mattype, info, rcon, calc_cond);
 }
 
 ComplexDET
 ComplexMatrix::determinant (MatrixType& mattype,
-                            octave_idx_type& info, double& rcon, int calc_cond) const
+                            octave_idx_type& info, double& rcon,
+			    int calc_cond) const
 {
   ComplexDET retval (1.0);
 
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
 
   if (nr != nc)
     (*current_liboctave_error_handler) ("matrix must be square");
   else
     {
-      int typ = mattype.type ();
+      volatile int typ = mattype.type ();
 
       if (typ == MatrixType::Unknown)
         typ = mattype.type (*this);
 
       if (typ == MatrixType::Lower || typ == MatrixType::Upper)
         {
           for (octave_idx_type i = 0; i < nc; i++) 
             retval *= elem (i,i);
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,24 @@
 2009-02-18  John W. Eaton  <jwe@octave.org>
 
+	* dMatrix.cc (Matrix::determinant):
+	Declare local variables volatile as needed to avoid "maybe
+	clobbered by vfork" warning from GCC.
+	* fMatrix.cc (FloatMatrix::determinant): Likewise.
+	* CMatrix.cc (ComplexMatrix::determinant): Likewise.
+	* fCMatrix.cc (FloatComplexMatrix::determinant): Likewise.
+	* dbleQR.cc (QR::update, QR::insert_col, QR::delete_col): Likewise.
+	* floatQR.cc (FloatQR::update, FloatQR::insert_col,
+	FloatQR::delete_col): Likewise.
+	* CmplxQR.cc (ComplexQR::update, ComplexQR::insert_col,
+	ComplexQR::delete_col): Likewise.
+	* fCmplxQR.cc (FloatComplexQR::update, FloatComplexQR::insert_col,
+	FloatComplexQR::delete_col): Likewise.
+
 	* dMatrix.cc (padec, solve_singularity_warning): Delete unused
 	static variable and function.
 	* CMatrix.cc (padec, solve_singularity_warning): Ditto.
 	* fMatrix.cc (padec, solve_singularity_warning): Ditto.
 	* fCMatrix.cc (padec, solve_singularity_warning): Ditto.
 
 2009-02-18  Jaroslav Hajek  <highegg@gmail.com>
 
diff --git a/liboctave/CmplxQR.cc b/liboctave/CmplxQR.cc
--- a/liboctave/CmplxQR.cc
+++ b/liboctave/CmplxQR.cc
@@ -238,17 +238,17 @@ ComplexQR::update (const ComplexMatrix& 
   octave_idx_type m = q.rows ();
   octave_idx_type n = r.columns ();
   octave_idx_type k = q.columns ();
 
   if (u.rows () == m && v.rows () == n && u.cols () == v.cols ())
     {
       OCTAVE_LOCAL_BUFFER (Complex, w, k);
       OCTAVE_LOCAL_BUFFER (double, rw, k);
-      for (octave_idx_type i = 0; i < u.cols (); i++)
+      for (volatile octave_idx_type i = 0; i < u.cols (); i++)
         {
           ComplexColumnVector utmp = u.column (i), vtmp = v.column (i);
           F77_XFCN (zqr1up, ZQR1UP, (m, n, k, q.fortran_vec (), m, r.fortran_vec (), k,
                                      utmp.fortran_vec (), vtmp.fortran_vec (), w, rw));
         }
     }
   else
     (*current_liboctave_error_handler) ("qrupdate: dimensions mismatch");
@@ -314,17 +314,17 @@ ComplexQR::insert_col (const ComplexMatr
           r.resize (kmax, n + nj);
         }
       else
         {
           r.resize (k, n + nj);
         }
 
       OCTAVE_LOCAL_BUFFER (double, rw, kmax);
-      for (octave_idx_type i = 0; i < js.length (); i++)
+      for (volatile octave_idx_type i = 0; i < js.length (); i++)
         {
           ComplexColumnVector utmp = u.column (jsi(i));
           F77_XFCN (zqrinc, ZQRINC, (m, n + i, std::min (kmax, k + i), 
                                      q.fortran_vec (), q.rows (),
                                      r.fortran_vec (), r.rows (), js(i) + 1, 
                                      utmp.data (), rw));
         }
     }
@@ -373,17 +373,17 @@ ComplexQR::delete_col (const Array<octav
 
   if (dups)
     (*current_liboctave_error_handler) ("qrinsert: duplicate index detected");
   else if (nj > 0 && (js(0) > n-1 || js(nj-1) < 0))
     (*current_liboctave_error_handler) ("qrinsert: index out of range");
   else if (nj > 0)
     {
       OCTAVE_LOCAL_BUFFER (double, rw, k);
-      for (octave_idx_type i = 0; i < js.length (); i++)
+      for (volatile octave_idx_type i = 0; i < js.length (); i++)
         {
           F77_XFCN (zqrdec, ZQRDEC, (m, n - i, k == m ? k : k - i, 
                                      q.fortran_vec (), q.rows (),
                                      r.fortran_vec (), r.rows (), js(i) + 1, rw));
         }
       if (k < m)
         {
           q.resize (m, k - nj);
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -1234,17 +1234,17 @@ Matrix::determinant (MatrixType& mattype
 
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
 
   if (nr != nc)
     (*current_liboctave_error_handler) ("matrix must be square");
   else
     {
-      int typ = mattype.type ();
+      volatile int typ = mattype.type ();
 
       if (typ == MatrixType::Unknown)
         typ = mattype.type (*this);
 
       if (typ == MatrixType::Lower || typ == MatrixType::Upper)
         {
           for (octave_idx_type i = 0; i < nc; i++) 
             retval *= elem (i,i);
diff --git a/liboctave/dbleQR.cc b/liboctave/dbleQR.cc
--- a/liboctave/dbleQR.cc
+++ b/liboctave/dbleQR.cc
@@ -234,17 +234,17 @@ QR::update (const Matrix& u, const Matri
 {
   octave_idx_type m = q.rows ();
   octave_idx_type n = r.columns ();
   octave_idx_type k = q.columns ();
 
   if (u.rows () == m && v.rows () == n && u.cols () == v.cols ())
     {
       OCTAVE_LOCAL_BUFFER (double, w, 2*k);
-      for (octave_idx_type i = 0; i < u.cols (); i++)
+      for (volatile octave_idx_type i = 0; i < u.cols (); i++)
         {
           ColumnVector utmp = u.column (i), vtmp = v.column (i);
           F77_XFCN (dqr1up, DQR1UP, (m, n, k, q.fortran_vec (), m, r.fortran_vec (), k,
                                      utmp.fortran_vec (), vtmp.fortran_vec (), w));
         }
     }
   else
     (*current_liboctave_error_handler) ("qrupdate: dimensions mismatch");
@@ -310,17 +310,17 @@ QR::insert_col (const Matrix& u, const A
           r.resize (kmax, n + nj);
         }
       else
         {
           r.resize (k, n + nj);
         }
 
       OCTAVE_LOCAL_BUFFER (double, w, kmax);
-      for (octave_idx_type i = 0; i < js.length (); i++)
+      for (volatile octave_idx_type i = 0; i < js.length (); i++)
         {
           ColumnVector utmp = u.column (jsi(i));
           F77_XFCN (dqrinc, DQRINC, (m, n + i, std::min (kmax, k + i), 
                                      q.fortran_vec (), q.rows (),
                                      r.fortran_vec (), r.rows (), js(i) + 1, 
                                      utmp.data (), w));
         }
     }
@@ -369,17 +369,17 @@ QR::delete_col (const Array<octave_idx_t
 
   if (dups)
     (*current_liboctave_error_handler) ("qrinsert: duplicate index detected");
   else if (nj > 0 && (js(0) > n-1 || js(nj-1) < 0))
     (*current_liboctave_error_handler) ("qrinsert: index out of range");
   else if (nj > 0)
     {
       OCTAVE_LOCAL_BUFFER (double, w, k);
-      for (octave_idx_type i = 0; i < js.length (); i++)
+      for (volatile octave_idx_type i = 0; i < js.length (); i++)
         {
           F77_XFCN (dqrdec, DQRDEC, (m, n - i, k == m ? k : k - i, 
                                      q.fortran_vec (), q.rows (),
                                      r.fortran_vec (), r.rows (), js(i) + 1, w));
         }
       if (k < m)
         {
           q.resize (m, k - nj);
diff --git a/liboctave/fCMatrix.cc b/liboctave/fCMatrix.cc
--- a/liboctave/fCMatrix.cc
+++ b/liboctave/fCMatrix.cc
@@ -1553,17 +1553,17 @@ FloatComplexMatrix::determinant (MatrixT
 
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
 
   if (nr != nc)
     (*current_liboctave_error_handler) ("matrix must be square");
   else
     {
-      int typ = mattype.type ();
+      volatile int typ = mattype.type ();
 
       if (typ == MatrixType::Unknown)
         typ = mattype.type (*this);
 
       if (typ == MatrixType::Lower || typ == MatrixType::Upper)
         {
           for (octave_idx_type i = 0; i < nc; i++) 
             retval *= elem (i,i);
diff --git a/liboctave/fCmplxQR.cc b/liboctave/fCmplxQR.cc
--- a/liboctave/fCmplxQR.cc
+++ b/liboctave/fCmplxQR.cc
@@ -238,17 +238,17 @@ FloatComplexQR::update (const FloatCompl
   octave_idx_type m = q.rows ();
   octave_idx_type n = r.columns ();
   octave_idx_type k = q.columns ();
 
   if (u.rows () == m && v.rows () == n && u.cols () == v.cols ())
     {
       OCTAVE_LOCAL_BUFFER (FloatComplex, w, k);
       OCTAVE_LOCAL_BUFFER (float, rw, k);
-      for (octave_idx_type i = 0; i < u.cols (); i++)
+      for (volatile octave_idx_type i = 0; i < u.cols (); i++)
         {
           FloatComplexColumnVector utmp = u.column (i), vtmp = v.column (i);
           F77_XFCN (cqr1up, CQR1UP, (m, n, k, q.fortran_vec (), m, r.fortran_vec (), k,
                                      utmp.fortran_vec (), vtmp.fortran_vec (), w, rw));
         }
     }
   else
     (*current_liboctave_error_handler) ("qrupdate: dimensions mismatch");
@@ -314,17 +314,17 @@ FloatComplexQR::insert_col (const FloatC
           r.resize (kmax, n + nj);
         }
       else
         {
           r.resize (k, n + nj);
         }
 
       OCTAVE_LOCAL_BUFFER (float, rw, kmax);
-      for (octave_idx_type i = 0; i < js.length (); i++)
+      for (volatile octave_idx_type i = 0; i < js.length (); i++)
         {
           F77_XFCN (cqrinc, CQRINC, (m, n + i, std::min (kmax, k + i), 
                                      q.fortran_vec (), q.rows (),
                                      r.fortran_vec (), r.rows (), js(i) + 1, 
                                      u.column (jsi(i)).data (), rw));
         }
     }
 }
@@ -372,17 +372,17 @@ FloatComplexQR::delete_col (const Array<
 
   if (dups)
     (*current_liboctave_error_handler) ("qrinsert: duplicate index detected");
   else if (nj > 0 && (js(0) > n-1 || js(nj-1) < 0))
     (*current_liboctave_error_handler) ("qrinsert: index out of range");
   else if (nj > 0)
     {
       OCTAVE_LOCAL_BUFFER (float, rw, k);
-      for (octave_idx_type i = 0; i < js.length (); i++)
+      for (volatile octave_idx_type i = 0; i < js.length (); i++)
         {
           F77_XFCN (cqrdec, CQRDEC, (m, n - i, k == m ? k : k - i, 
                                      q.fortran_vec (), q.rows (),
                                      r.fortran_vec (), r.rows (), js(i) + 1, rw));
         }
       if (k < m)
         {
           q.resize (m, k - nj);
diff --git a/liboctave/fMatrix.cc b/liboctave/fMatrix.cc
--- a/liboctave/fMatrix.cc
+++ b/liboctave/fMatrix.cc
@@ -1233,17 +1233,17 @@ FloatMatrix::determinant (MatrixType& ma
 
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
 
   if (nr != nc)
     (*current_liboctave_error_handler) ("matrix must be square");
   else
     {
-      int typ = mattype.type ();
+      volatile int typ = mattype.type ();
 
       if (typ == MatrixType::Unknown)
         typ = mattype.type (*this);
 
       if (typ == MatrixType::Lower || typ == MatrixType::Upper)
         {
           for (octave_idx_type i = 0; i < nc; i++) 
             retval *= elem (i,i);
diff --git a/liboctave/floatQR.cc b/liboctave/floatQR.cc
--- a/liboctave/floatQR.cc
+++ b/liboctave/floatQR.cc
@@ -234,17 +234,17 @@ FloatQR::update (const FloatMatrix& u, c
 {
   octave_idx_type m = q.rows ();
   octave_idx_type n = r.columns ();
   octave_idx_type k = q.columns ();
 
   if (u.rows () == m && v.rows () == n && u.cols () == v.cols ())
     {
       OCTAVE_LOCAL_BUFFER (float, w, 2*k);
-      for (octave_idx_type i = 0; i < u.cols (); i++)
+      for (volatile octave_idx_type i = 0; i < u.cols (); i++)
         {
           FloatColumnVector utmp = u.column (i), vtmp = v.column (i);
           F77_XFCN (sqr1up, SQR1UP, (m, n, k, q.fortran_vec (), m, r.fortran_vec (), k,
                                      utmp.fortran_vec (), vtmp.fortran_vec (), w));
         }
     }
   else
     (*current_liboctave_error_handler) ("qrupdate: dimensions mismatch");
@@ -310,17 +310,17 @@ FloatQR::insert_col (const FloatMatrix& 
           r.resize (kmax, n + nj);
         }
       else
         {
           r.resize (k, n + nj);
         }
 
       OCTAVE_LOCAL_BUFFER (float, w, kmax);
-      for (octave_idx_type i = 0; i < js.length (); i++)
+      for (volatile octave_idx_type i = 0; i < js.length (); i++)
         {
           FloatColumnVector utmp = u.column (jsi(i));
           F77_XFCN (sqrinc, SQRINC, (m, n + i, std::min (kmax, k + i), 
                                      q.fortran_vec (), q.rows (),
                                      r.fortran_vec (), r.rows (), js(i) + 1, 
                                      utmp.data (), w));
         }
     }
@@ -369,17 +369,17 @@ FloatQR::delete_col (const Array<octave_
 
   if (dups)
     (*current_liboctave_error_handler) ("qrinsert: duplicate index detected");
   else if (nj > 0 && (js(0) > n-1 || js(nj-1) < 0))
     (*current_liboctave_error_handler) ("qrinsert: index out of range");
   else if (nj > 0)
     {
       OCTAVE_LOCAL_BUFFER (float, w, k);
-      for (octave_idx_type i = 0; i < js.length (); i++)
+      for (volatile octave_idx_type i = 0; i < js.length (); i++)
         {
           F77_XFCN (sqrdec, SQRDEC, (m, n - i, k == m ? k : k - i, 
                                      q.fortran_vec (), q.rows (),
                                      r.fortran_vec (), r.rows (), js(i) + 1, w));
         }
       if (k < m)
         {
           q.resize (m, k - nj);
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,13 @@
 2009-02-18  John W. Eaton  <jwe@octave.org>
 
+	* mex.cc (call_mex): Declare local nargout variable volatile to
+	avoid "maybe clobbered by vfork" warning from GCC.
+
 	* ov-cx-mat.cc (xabs): Comment out unused static function.
 	* ov-flt-cx-mat.cc (xabs): Ditto.
 
 	* c-file-ptr-stream.cc (c_file_ptr_buf::seekoff,
 	c_file_ptr_buf::seepos, c_zfile_ptr_buf::seekoff,
 	c_zfile_ptr_buf::seepos): Avoid unused paramter warnings.
 
 2009-02-18  Jaroslav Hajek  <highegg@gmail.com>
diff --git a/src/mex.cc b/src/mex.cc
--- a/src/mex.cc
+++ b/src/mex.cc
@@ -3017,21 +3017,23 @@ mxGetElementSize (const mxArray *ptr)
 
 // ------------------------------------------------------------------
 
 typedef void (*cmex_fptr) (int nlhs, mxArray **plhs, int nrhs, mxArray **prhs);
 typedef F77_RET_T (*fmex_fptr) (int& nlhs, mxArray **plhs, int& nrhs, mxArray **prhs);
 
 octave_value_list
 call_mex (bool have_fmex, void *f, const octave_value_list& args,
-	  int nargout, octave_mex_function *curr_mex_fcn)
+	  int nargout_arg, octave_mex_function *curr_mex_fcn)
 {
   // Use at least 1 for nargout since even for zero specified args,
   // still want to be able to return an ans.
 
+  volatile int nargout = nargout_arg;
+
   int nargin = args.length ();
   OCTAVE_LOCAL_BUFFER (mxArray *, argin, nargin);
   for (int i = 0; i < nargin; i++)
     argin[i] = 0;
 
   int nout = nargout == 0 ? 1 : nargout;
   OCTAVE_LOCAL_BUFFER (mxArray *, argout, nout);
   for (int i = 0; i < nout; i++)
diff --git a/src/ov-mex-fcn.cc b/src/ov-mex-fcn.cc
--- a/src/ov-mex-fcn.cc
+++ b/src/ov-mex-fcn.cc
@@ -116,16 +116,17 @@ octave_mex_function::subsref (const std:
   // for exmaple?
 
   if (idx.size () > 1)
     retval = retval(0).next_subsref (nargout, type, idx);
 
   return retval;
 }
 
+// FIXME -- shouldn't this declaration be a header file somewhere?
 extern octave_value_list
 call_mex (bool have_fmex, void *f, const octave_value_list& args,
 	  int nargout, octave_mex_function *curr_mex_fcn);
 
 octave_value_list
 octave_mex_function::do_multi_index_op (int nargout,
 					const octave_value_list& args)
 {
