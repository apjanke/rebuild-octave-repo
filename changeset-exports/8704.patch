# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1234203789 18000
#      Mon Feb 09 13:23:09 2009 -0500
# Node ID 236ff50db90f61a093d13cbc35bd1d2d9eeb9882
# Parent  c953a6977be6e25f38a846de366894b0fe03cc1b
load-path.cc: catch execution exception in getcwd

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,15 @@
 2009-02-09  John W. Eaton  <jwe@octave.org>
 
+	* load-path.cc (dir_info::update, dir_info::initialize):
+	Likewise, to allow some functionality if getcwd fails.
+
+	* toplev.cc (main_loop): Also catch octave_execution_exception.
+
 	* DLD-FUNCTIONS/dispatch.cc: Comment out troublesome tests.
 
 	* DLD-FUNCTIONS/eigs.cc: Increase tolerance to 1e-11 on all tests.
 
 	* lex.l (lexical_feedback::looking_at_decl_list): New data member.
 	* lex.l (lexical_feedback::init): Initialize it.
 	(handle_identifier): Also force local variable if looking_at_decl_list.
 	* parse.y (parsing_decl_list): New non-terminal.
diff --git a/src/load-path.cc b/src/load-path.cc
--- a/src/load-path.cc
+++ b/src/load-path.cc
@@ -53,38 +53,48 @@ void
 load_path::dir_info::update (void)
 {
   file_stat fs (dir_name);
 
   if (fs)
     {
       if (is_relative)
 	{
-	  std::string abs_name
-	    = octave_env::make_absolute (dir_name, octave_env::getcwd ());
-
-	  abs_dir_cache_iterator p = abs_dir_cache.find (abs_name);
-
-	  if (p != abs_dir_cache.end ())
+	  try
 	    {
-	      // The directory is in the cache of all directories we have
-	      // visited (indexed by its absolute name).  If it is out of
-	      // date, initialize it.  Otherwise, copy the info from the
-	      // cache.  By doing that, we avoid unnecessary calls to stat
-	      // that can slow things down tremendously for large
-	      // directories.
+	      std::string abs_name
+		= octave_env::make_absolute (dir_name, octave_env::getcwd ());
+
+	      abs_dir_cache_iterator p = abs_dir_cache.find (abs_name);
+
+	      if (p != abs_dir_cache.end ())
+		{
+		  // The directory is in the cache of all directories
+		  // we have visited (indexed by its absolute name).
+		  // If it is out of date, initialize it.  Otherwise,
+		  // copy the info from the cache.  By doing that, we
+		  // avoid unnecessary calls to stat that can slow
+		  // things down tremendously for large directories.
 
-	      const dir_info& di = p->second;
+		  const dir_info& di = p->second;
+
+		  if (fs.mtime () != di.dir_mtime)
+		    initialize ();
+		  else
+		    *this = di;
 
-	      if (fs.mtime () != di.dir_mtime)
-		initialize ();
-	      else
-		*this = di;
+		  return;
+		}
+	    }
+	  catch (octave_execution_exception)
+	    {
+	      // Skip updating if we don't know where we are, but
+	      // don't treat it as an error.
 
-	      return;
+	      error_state = 0;
 	    }
 	}
 
       if (fs.mtime () != dir_mtime)
 	initialize ();
     }
   else
     {
@@ -101,24 +111,31 @@ load_path::dir_info::initialize (void)
   file_stat fs (dir_name);
 
   if (fs)
     {
       dir_mtime = fs.mtime ();
 
       get_file_list (dir_name);
 
-      std::string abs_name
-	= octave_env::make_absolute (dir_name, octave_env::getcwd ());
+      try
+	{
+	  std::string abs_name
+	    = octave_env::make_absolute (dir_name, octave_env::getcwd ());
 
-      // FIXME -- nothing is ever removed from this cache of directory
-      // information, so there could be some resource problems.
-      // Perhaps it should be pruned from time to time.
+	  // FIXME -- nothing is ever removed from this cache of
+	  // directory information, so there could be some resource
+	  // problems.  Perhaps it should be pruned from time to time.
 
-      abs_dir_cache[abs_name] = *this;      
+	  abs_dir_cache[abs_name] = *this;
+	}
+      catch (octave_execution_exception)
+	{
+	  // Skip updating if we don't know where we are.
+	}
     }
   else
     {
       std::string msg = fs.error ();
       warning ("load_path: %s: %s", dir_name.c_str (), msg.c_str ());
     }
 }
 
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -600,16 +600,23 @@ main_loop (void)
 		break;
 	    }
 	}
       catch (octave_interrupt_exception)
 	{
 	  recover_from_exception ();
 	  octave_stdout << "\n";
 	}
+      catch (octave_execution_exception)
+	{
+	  recover_from_exception ();
+	  std::cerr
+	    << "error: unhandled execution exception -- trying to return to prompt"
+	    << std::endl;
+	}
       catch (std::bad_alloc)
 	{
 	  recover_from_exception ();
 	  std::cerr
 	    << "error: memory exhausted or requested size too large for range of Octave's index type -- trying to return to prompt"
 	    << std::endl;
 	}
     }
