# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1345387840 14400
#      Sun Aug 19 10:50:40 2012 -0400
# Node ID f3b5cadfd6d5537f0da29f373f7ab0d4819e43df
# Parent  efac5593b1de83a3339824f1881eccafdc87d9f4
fix missing semicolons in various .m files

* playaudio.m, accumarray.m, accumdim.m, bicubic.m, narginchk.m,
nargoutchk.m, nthargout.m, image.m, pkg.m, colorbar.m, hdl2struct.m,
legend.m, plotyy.m, private/__go_draw_axes__.m,
private/__print_parse_opts__.m, shrinkfaces.m, pchip.m, polyval.m,
rundemos.m: Fix lines with missing semicolons.

diff --git a/scripts/audio/playaudio.m b/scripts/audio/playaudio.m
--- a/scripts/audio/playaudio.m
+++ b/scripts/audio/playaudio.m
@@ -42,37 +42,37 @@ function playaudio (name, ext)
     X = name(:) + 127;
     unwind_protect
       file = tmpnam ();
       fid = fopen (file, "wb");
       fwrite (fid, X, "uchar");
       fclose (fid);
       [status, out] = system (sprintf ('cat "%s" > /dev/dsp', file));
       if (status != 0)
-        system (sprintf ("paplay --raw \"%s\"", file))
+        system (sprintf ("paplay --raw \"%s\"", file));
       endif
     unwind_protect_cleanup
       unlink (file);
     end_unwind_protect
   elseif (nargin >= 1 && ischar (name))
     ## play a file
     if (nargin == 1)
       name = [name ".lin"];
     elseif (nargin == 2)
       name = [name "." ext];
     endif
     if (any (strcmp (ext, {"lin", "raw"})))
       [status, out] = system (sprintf ('cat "%s" > /dev/dsp', name));
       if (status != 0)
-        system (sprintf ('paplay --raw "%s"', name))
+        system (sprintf ('paplay --raw "%s"', name));
       endif
     elseif (any (strcmp (ext, {"mu", "au" "snd", "ul"})))
       [status, out] = system (sprintf ('cat "%s" > /dev/audio', name));
       if (status != 0)
-        system (sprintf ('paplay "%s"', name))
+        system (sprintf ('paplay "%s"', name));
       endif
     else
       error ("playaudio: unsupported extension '%s'", ext);
     endif
   else
     print_usage ();
   endif
 
diff --git a/scripts/general/accumarray.m b/scripts/general/accumarray.m
--- a/scripts/general/accumarray.m
+++ b/scripts/general/accumarray.m
@@ -145,17 +145,17 @@ function A = accumarray (subs, vals, sz 
     if (any (lensubs != lensubs(1)) || 
         (lenvals > 1 && lenvals != lensubs(1)))
       error ("accumarray: dimension mismatch");
     endif
 
   else
     ndims = columns (subs);
     if (lenvals > 1 && lenvals != rows (subs))
-      error ("accumarray: dimension mismatch")
+      error ("accumarray: dimension mismatch");
     endif
   endif
 
   if (isempty (fillval))
     fillval = 0;
   endif
 
   if (isempty (issparse))
diff --git a/scripts/general/accumdim.m b/scripts/general/accumdim.m
--- a/scripts/general/accumdim.m
+++ b/scripts/general/accumdim.m
@@ -88,17 +88,17 @@ function A = accumdim (subs, vals, dim, 
   elseif (! isindex (dim))
     error ("accumdim: DIM must be a valid dimension");
   elseif (dim > length (sz))
     sz(end+1:dim) = 1;
   endif
   sz(dim) = n;
 
   if (length (subs) != size (vals, dim))
-    error ("accumdim: dimension mismatch")
+    error ("accumdim: dimension mismatch");
   endif
 
   if (isempty (func) || func == @sum)
     ## Fast summation case.
     A = __accumdim_sum__ (subs, vals, dim, n);
 
     ## Fill in nonzero fill value
     if (fillval != 0)
diff --git a/scripts/general/bicubic.m b/scripts/general/bicubic.m
--- a/scripts/general/bicubic.m
+++ b/scripts/general/bicubic.m
@@ -89,25 +89,25 @@ function zi = bicubic (x, y, z, xi, yi, 
     endif
 
     if (all (diff (x) < 0))
       flipx = true;
       x = fliplr (x);
     elseif (all (diff (x) > 0))
       flipx = false;
     else
-      error ("bicubic:nonmonotonic", "bicubic: X values must be monotonic")
+      error ("bicubic:nonmonotonic", "bicubic: X values must be monotonic");
     endif
     if (all (diff (y) < 0))
       flipy = true;
       y = flipud (y);
     elseif (all (diff (y) > 0))
       flipy = false;
     else
-      error ("bicubic:nonmonotonic", "bicubic: Y values must be monotonic")
+      error ("bicubic:nonmonotonic", "bicubic: Y values must be monotonic");
     endif
 
     ## Mark values outside the lookup table.
     xfirst_ind = find (xi < x(1));
     xlast_ind  = find (xi > x(cz));
     yfirst_ind = find (yi < y(1));
     ylast_ind  = find (yi > y(rz));
     ## Set value outside the table preliminary to min max index.
diff --git a/scripts/general/narginchk.m b/scripts/general/narginchk.m
--- a/scripts/general/narginchk.m
+++ b/scripts/general/narginchk.m
@@ -37,17 +37,17 @@ function narginchk (minargs, maxargs)
 
   if (nargin != 2)
     print_usage;
   elseif (!isnumeric (minargs) || !isscalar (minargs))
     error ("minargs must be a numeric scalar");
   elseif (!isnumeric (maxargs) || !isscalar (maxargs))
     error ("maxargs must be a numeric scalar");
   elseif (minargs > maxargs)
-    error ("minargs cannot be larger than maxargs")
+    error ("minargs cannot be larger than maxargs");
   endif
 
   args = evalin ("caller", "nargin;");
 
   if (args < minargs)
     error ("not enough input arguments");
   elseif (args > maxargs)
     error ("too many input arguments");
diff --git a/scripts/general/nargoutchk.m b/scripts/general/nargoutchk.m
--- a/scripts/general/nargoutchk.m
+++ b/scripts/general/nargoutchk.m
@@ -82,17 +82,17 @@ function msg = nargoutchk (minargs, maxa
 
   elseif (nargout == 0 && nargin == 2)
 
     if (!isnumeric (minargs) || !isscalar (minargs))
       error ("minargs must be a numeric scalar");
     elseif (!isnumeric (maxargs) || !isscalar (maxargs))
       error ("maxargs must be a numeric scalar");
     elseif (minargs > maxargs)
-      error ("minargs cannot be larger than maxargs")
+      error ("minargs cannot be larger than maxargs");
     endif
 
     args = evalin ("caller", "nargout;");
 
     if (args < minargs)
       error ("Not enough output arguments.");
     elseif (args > maxargs)
       error ("Too many output arguments.");
diff --git a/scripts/general/nthargout.m b/scripts/general/nthargout.m
--- a/scripts/general/nthargout.m
+++ b/scripts/general/nthargout.m
@@ -79,17 +79,17 @@ function out = nthargout (n, varargin)
     ntot = varargin{1};
     func = varargin{2};
     args = varargin(3:end);
   else
     print_usage ();
   endif
 
   if (any (n != fix (n))  || ntot != fix (ntot) || any (n <= 0) || ntot <= 0)
-    error ("nthargout: N and NTOT must consist of positive integers")
+    error ("nthargout: N and NTOT must consist of positive integers");
   endif
 
   outargs = cell (1, ntot);
 
   try
     [outargs{:}] = feval (func, args{:});
     if (numel (n) > 1)
       out = outargs(n);
diff --git a/scripts/image/image.m b/scripts/image/image.m
--- a/scripts/image/image.m
+++ b/scripts/image/image.m
@@ -122,17 +122,17 @@ function h = __img__ (x, y, img, varargi
   ydata = [y(1), y(end)];
 
   dx = diff (x);
   dy = diff (y);
   dx = std (dx) / mean (abs (dx));
   dy = std (dy) / mean (abs (dy));
   tol = 100*eps;
   if (any (dx > tol) || any (dy > tol))
-    warning ("Image does not map to non-linearly spaced coordinates")
+    warning ("Image does not map to non-linearly spaced coordinates");
   endif
 
   ca = gca ();
 
   tmp = __go_image__ (ca, "cdata", img, "xdata", xdata, "ydata", ydata,
                     "cdatamapping", "direct", varargin {:});
 
   px = __image_pixel_size__ (tmp);
diff --git a/scripts/pkg/pkg.m b/scripts/pkg/pkg.m
--- a/scripts/pkg/pkg.m
+++ b/scripts/pkg/pkg.m
@@ -313,17 +313,17 @@ function [local_packages, global_package
       case "-auto"
         auto = 1;
       case "-verbose"
         verbose = true;
         ## Send verbose output to pager immediately.  Change setting locally.
         page_output_immediately (true, "local");
       case "-forge"
         if (! octave_config_info ("CURL_LIBS"))
-          error ("pkg: can't download from forge without the cURL library")
+          error ("pkg: can't download from forge without the cURL library");
         endif
         octave_forge = true;
       case "-local"
         global_install = false;
         if (! user_prefix)
           prefix = tilde_expand (fullfile ("~", "octave"));
           archprefix = prefix;
         endif
diff --git a/scripts/plot/colorbar.m b/scripts/plot/colorbar.m
--- a/scripts/plot/colorbar.m
+++ b/scripts/plot/colorbar.m
@@ -192,23 +192,23 @@ function deletecolorbar (h, d, hc, orig_
                             "outerposition", orig_props.outerposition, ...
                     "activepositionproperty", orig_props.activepositionproperty);
     endif
   endif
 endfunction
 
 function resetaxis (cax, d, ax, orig_props)
   if (ishandle (ax) && strcmp (get (ax, "type"), "axes"))
-    dellistener (ax, "position")
+    dellistener (ax, "position");
     units = get (ax, "units");
-    set (ax, "units", orig_props.units)
+    set (ax, "units", orig_props.units);
     set (ax, "position", orig_props.position, ...
              "outerposition", orig_props.outerposition, ...
              "activepositionproperty", orig_props.activepositionproperty);
-    set (ax, "units", units)
+    set (ax, "units", units);
   endif
 endfunction
 
 function update_colorbar_clim (h, d, hi, vert)
   if (ishandle (h) && strcmp (get (h, "type"), "image")
       && (isempty (gcbf ()) || strcmp (get (gcbf (), "beingdeleted"),"off")))
     clen = rows (get (get (h, "parent"), "colormap"));
     cext = get (h, "clim");
diff --git a/scripts/plot/hdl2struct.m b/scripts/plot/hdl2struct.m
--- a/scripts/plot/hdl2struct.m
+++ b/scripts/plot/hdl2struct.m
@@ -86,48 +86,48 @@ function s = hdl2struct (h)
       idx = arrayfun (@(x) get(x).userdata.handle(end) == h, lg);
       lg = lg(find (idx));
     endif
     nlg = length (lg);
     if (nlg == 1)
       ii++;
       s.children(ii) = hdl2struct (lg);
     elseif (nlg > 1)
-      error ("hdl2struct: more than one legend found")
+      error ("hdl2struct: more than one legend found");
     endif
 
     cb = findobj (par, "-depth", 1, "tag", "colorbar");
     if (! isempty (cb))
       idx = arrayfun (@(x) get(x).axes == h, cb);
       cb = cb(find (idx));
     endif
 
     ncb = length (cb);
     if (ncb == 1)
       ii++;
       s.children(ii) = hdl2struct (cb);
     elseif (nlg > 1)
-      error ("hdl2struct: more than one colorbar found")
+      error ("hdl2struct: more than one colorbar found");
     endif
   endif
 
   set (0, "showhiddenhandles", hiddenh);
 
 endfunction
 
 function hdlist = getspecial (h)
   obj = get (h);
   ## return handles to special children
   fields = fieldnames (obj);
   hdlist = [];
 
   regkids = get ( h, "children");
-  set (0, "showhiddenhandles", "on")
+  set (0, "showhiddenhandles", "on");
   allkids = get ( h, "children");
-  set (0, "showhiddenhandles", "off")
+  set (0, "showhiddenhandles", "off");
   speckids = arrayfun (@(x) ! any (x == regkids), allkids);
   hdlist = allkids (find (speckids));
   hdlist = reshape (hdlist, 1, numel (hdlist));
 
 endfunction
 
 function prpstr = getprops (h)
   obj = get (h);
diff --git a/scripts/plot/legend.m b/scripts/plot/legend.m
--- a/scripts/plot/legend.m
+++ b/scripts/plot/legend.m
@@ -126,17 +126,17 @@ function [hlegend2, hobjects2, hplot2, t
     plty = get (ca, "__plotyy_axes__");
     if (isscalar (plty) && ishandle (plty))
       ca = [ca, plty];
     elseif (iscell (plty))
       ca = [ca, plty{:}];
     elseif (all (ishandle (plty)))
       ca = [ca, plty(:).'];
     else
-      error ("legend.m: This should not happen. File a bug report.")
+      error ("legend.m: This should not happen. File a bug report.");
     endif
     ## Remove duplicates while preserving order
     [~, n] = unique (ca);
     ca = ca (sort (n));
   endif
 
   if (nargin > 0 && all (ishandle (varargin{1})))
     kids = flipud (varargin{1}(:));
diff --git a/scripts/plot/plotyy.m b/scripts/plot/plotyy.m
--- a/scripts/plot/plotyy.m
+++ b/scripts/plot/plotyy.m
@@ -86,17 +86,17 @@ function [Ax, H1, H2] = plotyy (varargin
     endif
     if (length (ax) > 2)
       for i = 3 : length (ax)
         delete (ax (i));
       endfor
       ax = ax(1:2);
     elseif (length (ax) == 1)
       ax(2) = axes ();
-      set (ax(2), "nextplot", get (ax(1), "nextplot"))
+      set (ax(2), "nextplot", get (ax(1), "nextplot"));
     elseif (isempty (ax))
       ax(1) = axes ();
       ax(2) = axes ();
       ca = ax(2);
     endif
     if (nargin < 2)
       varargin = {};
     endif
@@ -152,17 +152,17 @@ function [ax, h1, h2] = __plotyy__ (ax, 
 
   cf = gcf ();
   set (cf, "nextplot", "add");
 
   if (ishandle (ax(2)) && strcmp (get (ax(2), "type"), "axes"))
     axes (ax(2));
   else
     ax(2) = axes ();
-    set (ax(2), "nextplot", get (ax(1), "nextplot"))
+    set (ax(2), "nextplot", get (ax(1), "nextplot"));
   endif
   newplot ();
 
   colors = get (ax(1), "colororder");
   set (ax(2), "colororder", [colors(2:end,:); colors(1,:)]);
 
   if (strcmp (get (ax(1), "autopos_tag"), "subplot"))
     set (ax(2), "autopos_tag", "subplot");
@@ -213,24 +213,24 @@ function [ax, h1, h2] = __plotyy__ (ax, 
   addlistener (ax(2), "nextplot", {@update_nextplot, ax(1)});
 
   ## Store the axes handles for the sister axes.
   if (ishandle (ax(1)) && ! isprop (ax(1), "__plotyy_axes__"))
     addproperty ("__plotyy_axes__", ax(1), "data", ax);
   elseif (ishandle (ax(1)))
     set (ax(1), "__plotyy_axes__", ax);
   else
-    error ("plotyy.m: This shouldn't happen. File a bug report.")
+    error ("plotyy.m: This shouldn't happen. File a bug report.");
   endif
   if (ishandle (ax(2)) && ! isprop (ax(2), "__plotyy_axes__"))
     addproperty ("__plotyy_axes__", ax(2), "data", ax);
   elseif (ishandle (ax(2)))
     set (ax(2), "__plotyy_axes__", ax);
   else
-    error ("plotyy.m: This shouldn't happen. File a bug report.")
+    error ("plotyy.m: This shouldn't happen. File a bug report.");
   endif
 endfunction
 
 
 %!demo
 %! clf;
 %! x = 0:0.1:2*pi;
 %! y1 = sin (x);
diff --git a/scripts/plot/private/__go_draw_axes__.m b/scripts/plot/private/__go_draw_axes__.m
--- a/scripts/plot/private/__go_draw_axes__.m
+++ b/scripts/plot/private/__go_draw_axes__.m
@@ -43,17 +43,17 @@ function __go_draw_axes__ (h, plot_strea
     ymirror = true;
     if (isfield (axis_obj, "__plotyy_axes__"))
       if (all (ishandle (axis_obj.__plotyy_axes__)))
         ymirror = false;
       else
         h = axis_obj.__plotyy_axes__;
         h = h(ishandle (h));
         h = h(isprop (h, "__ploty_axes__"));
-        rmappdata (h, "__plotyy_axes__")
+        rmappdata (h, "__plotyy_axes__");
       endif
     endif
 
     nd = __calc_dimensions__ (h);
 
     if (strcmp (axis_obj.dataaspectratiomode, "manual")
         && strcmp (axis_obj.xlimmode, "manual")
         && strcmp (axis_obj.ylimmode, "manual"))
diff --git a/scripts/plot/private/__print_parse_opts__.m b/scripts/plot/private/__print_parse_opts__.m
--- a/scripts/plot/private/__print_parse_opts__.m
+++ b/scripts/plot/private/__print_parse_opts__.m
@@ -120,24 +120,24 @@ function arg_st = __print_parse_opts__ (
         arg_st.fig2dev_binary = arg{10:end};
       elseif (strncmp (arg, "-PSTOEDIT:", 9))
         arg_st.pstoedit_binary = arg{10:end};
       elseif (strncmpi (arg, "-textalphabits=", 15))
         n = find (arg == "=");
         if (! isempty (n) && n == numel (arg) - 1 && ismember (arg(end), "124"))
           arg_st.ghostscript.antialiasing_textalphabits = str2num (arg(end));
         else
-          error ("print: improper syntax, or value, for TextAlphaBits")
+          error ("print: improper syntax, or value, for TextAlphaBits");
         endif
       elseif (strncmpi (arg, "-graphicsalphabits=", 19))
         n = find (arg == "=");
         if (! isempty (n) && n == numel (arg) - 1 && ismember (arg(end), "124"))
           arg_st.ghostscript.antialiasing_graphicsalphabits = str2num (arg(end));
         else
-          error ("print: improper syntax, or value, for GraphicsAlphaBits")
+          error ("print: improper syntax, or value, for GraphicsAlphaBits");
         endif
       elseif ((length (arg) > 2) && arg(1:2) == "-G")
         arg_st.ghostscript.binary = file_in_path (getenv ("PATH"), arg(3:end));
         if (isempty (arg_st.ghostscript.binary))
           error ("print: Ghostscript binary ""%s"" could not be located",
                  arg(3:end));
         else
           arg_st.ghostscript_binary = __quote_path__ (arg_st.ghostscript_binary);
diff --git a/scripts/plot/shrinkfaces.m b/scripts/plot/shrinkfaces.m
--- a/scripts/plot/shrinkfaces.m
+++ b/scripts/plot/shrinkfaces.m
@@ -96,27 +96,27 @@ function [nf, nv] = shrinkfaces (varargi
     if (nargin == 3)
       sf = varargin{3};
     endif
   else
     print_usage ();
   endif
   
   if (! isscalar (sf) || sf <= 0)
-    error ("shrinkfaces: scale factor must be a positive scalar")
+    error ("shrinkfaces: scale factor must be a positive scalar");
   endif
 
   n = columns (vertices);
   if (n < 2 || n > 3)
-    error ("shrinkfaces: only 2D and 3D patches are supported")
+    error ("shrinkfaces: only 2D and 3D patches are supported");
   endif
 
   m = columns (faces);
   if (m < 3)
-    error ("shrinkfaces: faces must consist of at least 3 vertices")
+    error ("shrinkfaces: faces must consist of at least 3 vertices");
   endif
 
   v = vertices(faces'(:), :);
   if (isempty (colors) || rows (colors) == rows (faces))
     c = colors;
   elseif (rows (colors) == rows (vertices))
     c = colors(faces'(:), :);
   else
@@ -129,18 +129,19 @@ function [nf, nv] = shrinkfaces (varargi
   ## barycentric coordinates.
   midpoints = full (kron ( speye (sv / m), ones (m, m) / m) * sparse (v));
   v = sqrt (sf) * (v - midpoints) + midpoints;
   f = reshape (1:sv, m, sv / m)';
   
   switch (nargout)
     case 0
       if (ishandle (p))
-        set (p, "FaceVertexCData", [], "CData", []) # avoid exceptions
-        set (p, "Vertices", v, "Faces", f, "FaceVertexCData", c)
+        ## avoid exceptions
+        set (p, "FaceVertexCData", [], "CData", []);
+        set (p, "Vertices", v, "Faces", f, "FaceVertxCData", c);
       else
         nf = struct ("faces", f, "vertices", v, "facevertexcdata", c);
       endif
     case 1
       nf = struct ("faces", f, "vertices", v, "facevertexcdata", c);
     case 2
       nf = f;
       nv = v;
diff --git a/scripts/polynomial/pchip.m b/scripts/polynomial/pchip.m
--- a/scripts/polynomial/pchip.m
+++ b/scripts/polynomial/pchip.m
@@ -75,22 +75,22 @@ function ret = pchip (x, y, xi)
   x = x(:).';
   n = length (x);
 
   ## Check the size and shape of y
   if (isvector (y))
     y = y(:).'; ##row vector
     szy = size (y);
     if (! size_equal (x, y))
-      error ("pchip: length of X and Y must match")
+      error ("pchip: length of X and Y must match");
     endif
   else
     szy = size (y);
     if (n != szy(end))
-      error ("pchip: length of X and last dimension of Y must match")
+      error ("pchip: length of X and last dimension of Y must match");
     endif
     y = reshape (y, [prod(szy(1:end-1)), szy(end)]);
   endif
 
   h = diff (x);
   if (all (h < 0))
     x = fliplr (x);
     h = diff (x);
diff --git a/scripts/polynomial/polyval.m b/scripts/polynomial/polyval.m
--- a/scripts/polynomial/polyval.m
+++ b/scripts/polynomial/polyval.m
@@ -74,20 +74,20 @@ function [y, dy] = polyval (p, x, s = []
     ## This is because finv (0.5, n, n) = 1.0 for any n.
     try
       k = numel (x);
       A = (x(:) * ones (1, n+1)) .^ (ones (k, 1) * (n:-1:0));
       dy = sqrt (1 + sumsq (A/s.R, 2)) * s.normr / sqrt (s.df);
       dy = reshape (dy, size (x));
     catch
       if (isempty (s))
-        error ("polyval: third input is required.")
+        error ("polyval: third input is required.");
       elseif (isstruct (s)
               && all (ismember ({"R", "normr", "df"}, fieldnames (s))))
-        error (lasterr ())
+        error (lasterr ());
       elseif (isstruct (s))
         error ("polyval: third input is missing the required fields.");
       else
         error ("polyval: third input is not a structure.");
       endif
     end_try_catch
   endif
 
diff --git a/scripts/testfun/rundemos.m b/scripts/testfun/rundemos.m
--- a/scripts/testfun/rundemos.m
+++ b/scripts/testfun/rundemos.m
@@ -60,17 +60,17 @@ function run_all_demos (directory)
   for i = 1:numel (flist)
     f = flist{i};
     if (length (f) > 2 && strcmp (f((end-1):end), ".m"))
       f = fullfile (directory, f);
       if (has_demos (f))
         try
           demo (f);
         catch
-          printf ("error: %s\n\n", lasterror().message)
+          printf ("error: %s\n\n", lasterror().message);
         end_try_catch
         if (i != numel (flist))
           input ("Press <enter> to continue: ", "s");
         endif
       endif
     endif
   endfor
 endfunction
