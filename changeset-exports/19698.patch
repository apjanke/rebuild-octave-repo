# HG changeset patch
# User Massimiliano Fasi <massimiliano.fasi@gmail.com>
# Date 1422605197 -3600
#      Fri Jan 30 09:06:37 2015 +0100
# Node ID 4aa17069a0071dd00b23eafbd4bf8e11ec8e2fcb
# Parent  4197fc428c7d89932d2c4a4602bc1d94eefa9f33
Fix incorrect strread behavior with option "commentstyle" (bug #43972)

* scripts/io/strread.m: Added a check to prevent the last char of a comment
                        to be considered not part of the comment itself.

diff --git a/scripts/io/strread.m b/scripts/io/strread.m
--- a/scripts/io/strread.m
+++ b/scripts/io/strread.m
@@ -368,16 +368,20 @@ function varargout = strread (str, forma
       [idx, cidx] = unique (lookup (cstart, cstop), "first");
       if (idx(1) == 0)
         cidx(1) = []; # Drop the first one if orphaned.
       endif
       cstop = cstop(cidx);
     endif
     len = length (str);
     c2len = length (comment_end);
+    if (cstop + c2len == len)
+      ## Ignore last char of to-the-end-of-line comments
+      c2len++;
+    end
     str = cellslices (str, [1, cstop + c2len], [cstart - 1, len]);
     str = [str{:}];
   endif
 
   if (! isempty (white_spaces))
     ## For numeric fields, whitespace is always a delimiter, but not for text
     ## fields
     if (isempty (strfind (format, "%s")))
@@ -839,16 +843,27 @@ endfunction
 
 %!test
 %! str = "# comment\n# comment\n1 2 3";
 %! [a, b] = strread (str, "%n %s", "commentstyle", "shell", "endofline", "\n");
 %! assert (a, [1; 3]);
 %! assert (b, {"2"});
 
 %!test
+%! assert (strread ("Hello World! // this is comment", "%s",...
+%! "commentstyle", "c++"), ...
+%! {"Hello"; "World!"}); 
+%! assert (strread ("Hello World! % this is comment", "%s",...
+%! "commentstyle", "matlab"), ...
+%! {"Hello"; "World!"});
+%! assert (strread ("Hello World! # this is comment", "%s",...
+%! "commentstyle", "shell"), ...
+%! {"Hello"; "World!"});
+
+%!test
 %! str = sprintf ("Tom 100 miles/hr\nDick 90 miles/hr\nHarry 80 miles/hr");
 %! fmt = "%s %f miles/hr";
 %! c = cell (1, 2);
 %! [c{:}] = strread (str, fmt);
 %! assert (c{1}, {"Tom"; "Dick"; "Harry"})
 %! assert (c{2}, [100; 90; 80])
 
 %!test
