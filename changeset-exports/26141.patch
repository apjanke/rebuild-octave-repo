# HG changeset patch
# User Rik <rik@octave.org>
# Date 1543272543 28800
#      Mon Nov 26 14:49:03 2018 -0800
# Node ID 42a06f8e69662e7fe4f93c042490acde2e86d115
# Parent  8fb8cb4a03f85b454aadd642fa8f04365ec772c1
convhull.m: Calculate second output (Volume of hull) for compatibility (bug #55106).

* convhull.m: Add second-output calling form to docstring.  Document second
output is Volume of convex hull.  Change function prototype to have a second
output 'V'.  Check whether (nargout > 1) and call convhulln with either
one output argument or two output arguments.  Add BIST test for second output.

diff --git a/scripts/geometry/convhull.m b/scripts/geometry/convhull.m
--- a/scripts/geometry/convhull.m
+++ b/scripts/geometry/convhull.m
@@ -16,16 +16,17 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <https://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {} {@var{H} =} convhull (@var{x}, @var{y})
 ## @deftypefnx {} {@var{H} =} convhull (@var{x}, @var{y}, @var{z})
 ## @deftypefnx {} {@var{H} =} convhull (@var{x})
 ## @deftypefnx {} {@var{H} =} convhull (@dots{}, @var{options})
+## @deftypefnx {} {[@var{H}, @var{V}] =} convhull (@dots{})
 ## Compute the convex hull of a 2-D or 3-D set of points.
 ##
 ## The hull @var{H} is a linear index vector into the original set of points
 ## that specifies which points form the enclosing hull.  For 2-D inputs only,
 ## the output is ordered in a counter-clockwise manner around the hull.
 ##
 ## The input @var{x} may also be a matrix with two or three columns where the
 ## first column contains x-data, the second y-data, and the optional third
@@ -37,20 +38,23 @@
 ## @url{http://www.qhull.org/html/qh-quick.htm#options}.
 ## The default option is @code{@{"Qt"@}}.
 ##
 ## If @var{options} is not present or @code{[]} then the default arguments are
 ## used.  Otherwise, @var{options} replaces the default argument list.
 ## To append user options to the defaults it is necessary to repeat the
 ## default arguments in @var{options}.  Use a null string to pass no arguments.
 ##
+## If the second output @var{V} is requested the volume of the enclosing
+## convex hull is calculated.
+##
 ## @seealso{convhulln, delaunay, voronoi}
 ## @end deftypefn
 
-function H = convhull (varargin)
+function [H, V] = convhull (varargin)
 
   if (nargin < 1 || nargin > 4)
     print_usage ();
   endif
 
   z = [];
   options = [];
 
@@ -114,23 +118,31 @@ function H = convhull (varargin)
 
   endswitch
 
   if (isempty (z))
     x = x(:);  y = y(:);
     if (! size_equal (x, y))
       error ("convhull: X and Y must be the same size");
     endif
-    Htmp = convhulln ([x, y], options);
+    if (nargout > 1)
+      [Htmp, V] = convhulln ([x, y], options);
+    else
+      Htmp = convhulln ([x, y], options);
+    endif
   else
     x = x(:);  y = y(:);  z = z(:);
     if (! size_equal (x, y, z))
       error ("convhull: X, Y, and Z must be the same size");
     endif
-    H = convhulln ([x, y, z], options);
+    if (nargout > 1)
+      [H, V] = convhulln ([x, y, z], options);
+    else
+      H = convhulln ([x, y, z], options);
+    endif
   endif
 
   if (isempty (z))
     ## Order 2-D convex hull in a counter-clockwise manner.
     n = rows (Htmp);
     Htmp = Htmp.'(:);
     H = zeros (n + 1, 1);
 
@@ -164,16 +176,20 @@ endfunction
 %! plot (x(k),y(k),"r-;convex hull;", x,y,"b+;points;");
 %! axis ([-3.05, 3.05, -0.05, 1.05]);
 
 %!testif HAVE_QHULL
 %! x = -3:0.5:3;
 %! y = abs (sin (x));
 %! assert (convhull (x, y), [1;7;13;12;11;10;4;3;2;1]);
 
+%!testif HAVE_QHULL
+%! [~, V] = convhull ([0,2,2,0], [0,0,1,1]);
+%! assert (V == 2);
+
 ## Input validation tests
 %!error convhull ()
 %!error convhull (1,2,3,4,5)
 %!error <X must be a matrix with 2 or 3 columns> convhull (ones (2,4))
 %!error <OPTIONS must be a string or cell array> convhull (ones (2,2), struct())
 %!error <X must be a matrix with 2 or 3 columns> convhull (ones (2,4), "")
 %!error <OPTIONS must be a string or cell array> convhull (ones (2,2), ones (2,2), struct())
 %!error <OPTIONS must be a string or cell array> convhull (ones (2,2), ones (2,2), ones (2,2), struct())
