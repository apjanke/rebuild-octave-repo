# HG changeset patch
# User Rik <rik@octave.org>
# Date 1381551710 25200
#      Fri Oct 11 21:21:50 2013 -0700
# Node ID cd5a6008ae72f1b7bd2dcacba95a789d25b9ee4c
# Parent  482222fe5b35c051215d5d5cbf4d7303f777e537
Fix recursion segfault when setting axis parent to be child hggroup (bug #37927).

* libinterp/corefcn/graphics.cc(set_parent): Check that new parent's parent is
not object which is being reparented to avoid recursion.  When condition occurs
use object's current parent as parent property for new parent.  If this sounds
convoluted, it's because it is.

diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -2730,42 +2730,50 @@ base_properties::get_property_dynamic (c
     }
   else
     return it->second;
 }
 
 void
 base_properties::set_parent (const octave_value& val)
 {
-  double tmp = val.double_value ();
+  double hnp = val.double_value ();
 
   graphics_handle new_parent = octave_NaN;
 
   if (! error_state)
     {
-      if (tmp == __myhandle__)
+      if (hnp == __myhandle__)
         error ("set: can not set object parent to be object itself");
       else
         {
-          new_parent = gh_manager::lookup (tmp);
+          new_parent = gh_manager::lookup (hnp);
 
           if (new_parent.ok ())
             {
-              graphics_object parent_obj;
-
-              parent_obj = gh_manager::get_object (get_parent ());
-
-              parent_obj.remove_child (__myhandle__);
-
+              // Remove child from current parent
+              graphics_object old_parent_obj;
+              old_parent_obj = gh_manager::get_object (get_parent ());
+              old_parent_obj.remove_child (__myhandle__);
+
+              // Check new parent's parent is not this child to avoid recursion
+              graphics_object new_parent_obj;
+              new_parent_obj = gh_manager::get_object (new_parent);
+              if (new_parent_obj.get_parent () == __myhandle__)
+                {
+                  // new parent's parent gets child's original parent
+                  new_parent_obj.get_properties ().set_parent (get_parent ().as_octave_value ());
+                }
+
+              // Set parent property to new_parent and do adoption
               parent = new_parent.as_octave_value ();
-
               ::adopt (parent.handle_value (), __myhandle__);
             }
           else
-            error ("set: invalid graphics handle (= %g) for parent", tmp);
+            error ("set: invalid graphics handle (= %g) for parent", hnp);
         }
     }
   else
     error ("set: expecting parent to be a graphics handle");
 }
 
 void
 base_properties::mark_modified (void)
