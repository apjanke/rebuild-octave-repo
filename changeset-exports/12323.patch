# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1296593744 18000
#      Tue Feb 01 15:55:44 2011 -0500
# Node ID c8da31f12c1d692ec543a05e8955908b912c287f
# Parent  11427f71699b86014454ee2e79fc11d27a7240a6
avoid using new to create temporary gl2ps_renderer object

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2011-02-01  John W. Eaton  <jwe@octave.org>
+
+	* gl2ps-renderer.h: Remove virtual tag for derived virtual functions.
+	(opengl_renderer (const graphics_handle&)): New function.
+	* DLD-FUNCTIONS/__init_fltk__.cc (OpenGL_fltk::Fl_Gl_Window):
+	Don't use new to create temporary glps_renderer object.
+
 2011-02-01  Michael Godfrey  <godfrey@isl.stanford.edu>
 
 	* gl2ps-renderer.cc (glps_renderer::draw):
 	Return immediately if fdopen fails.
 
 2011-02-01  John W. Eaton  <jwe@octave.org>
 
 	* gl-render.cc:	(opengl_renderer::setup_opengl_transformation,
diff --git a/src/DLD-FUNCTIONS/__init_fltk__.cc b/src/DLD-FUNCTIONS/__init_fltk__.cc
--- a/src/DLD-FUNCTIONS/__init_fltk__.cc
+++ b/src/DLD-FUNCTIONS/__init_fltk__.cc
@@ -148,22 +148,23 @@ private:
   void draw (void)
   {
     if (! valid ())
       {
         valid (1);
         setup_viewport (w (), h ());
       }
 
-    if ( print_fid > 0 )
+    if (print_fid > 0)
       {
-        opengl_renderer *rend = new glps_renderer (print_fid, print_term);
-        rend->draw (gh_manager::lookup (number));
+        glps_renderer rend (print_fid, print_term);
+
+        rend.draw (gh_manager::lookup (number));
+
         print_fid = -1;
-        delete rend;
       }
     else
       {
         renderer.draw (gh_manager::lookup (number));
 
         if (zoom ())
           overlay ();
       }
diff --git a/src/gl2ps-renderer.h b/src/gl2ps-renderer.h
--- a/src/gl2ps-renderer.h
+++ b/src/gl2ps-renderer.h
@@ -32,50 +32,55 @@ glps_renderer : public opengl_renderer
 {
 public:
   glps_renderer (const int _fid, const std::string& _term)
     : opengl_renderer () , fid (_fid), term (_term),
     fontsize (), fontname () { }
 
   ~glps_renderer (void) { }
 
-  virtual void draw (const graphics_object& go);
+  void draw (const graphics_handle& h)
+  {
+    draw (gh_manager::get_object (h));
+  }
+
+  void draw (const graphics_object& go);
 
 protected:
 
-  virtual Matrix render_text (const std::string& txt,
-                              double x, double y, double z,
-                              int halign, int valign, double rotation = 0.0);
+  Matrix render_text (const std::string& txt,
+                      double x, double y, double z,
+                      int halign, int valign, double rotation = 0.0);
 
 
-  virtual void set_font (const base_properties& props);
+  void set_font (const base_properties& props);
 
-  virtual void draw_text (const text::properties& props);
-  virtual void draw_pixels (GLsizei w, GLsizei h, GLenum format,
-                            GLenum type, const GLvoid *data);
+  void draw_text (const text::properties& props);
+  void draw_pixels (GLsizei w, GLsizei h, GLenum format,
+                    GLenum type, const GLvoid *data);
 
-  virtual void set_linestyle (const std::string& s, bool use_stipple)
+  void set_linestyle (const std::string& s, bool use_stipple)
   {
     opengl_renderer::set_linestyle (s, use_stipple);
     if (use_stipple)
       gl2psEnable (GL2PS_LINE_STIPPLE);
     else
       gl2psDisable (GL2PS_LINE_STIPPLE);
   }
 
-  virtual void set_polygon_offset (bool on, double offset = 0.0)
+  void set_polygon_offset (bool on, double offset = 0.0)
   {
     opengl_renderer::set_polygon_offset (on, offset);
     if (on)
       gl2psEnable (GL2PS_POLYGON_OFFSET_FILL);
     else
       gl2psDisable (GL2PS_POLYGON_OFFSET_FILL);
   }
 
-  virtual void set_linewidth (float w)
+  void set_linewidth (float w)
   {
     gl2psLineWidth (w);
   }
 
 private:
   int alignment_to_mode (int ha, int va) const;
   int fid;
   caseless_str term;
