# HG changeset patch
# User Rik <rik@octave.org>
# Date 1482073820 28800
#      Sun Dec 18 07:10:20 2016 -0800
# Node ID b150be19734dc4a25878c0e2c459ba1de89cf82c
# Parent  b28801182c0885b3b2d02ff1c2d1f16171557129
# Parent  426325aa8ee91dd3ddfaf0480c3f9b3b132e067f
maint: periodic merge of stable to default.

diff --git a/libinterp/dldfcn/gzip.cc b/libinterp/dldfcn/gzip.cc
--- a/libinterp/dldfcn/gzip.cc
+++ b/libinterp/dldfcn/gzip.cc
@@ -350,24 +350,28 @@ namespace octave
           throw std::runtime_error ("failed to open zlib stream");
 
         deflateSetHeader (strm, &header);
 
         const std::size_t buf_len = 8192;
         unsigned char buf_in[buf_len];
         unsigned char buf_out[buf_len];
 
-        while ((strm->avail_in = std::fread (buf_in, sizeof (buf_in[0]),
-                                             buf_len, source.fp)) != 0)
+        int flush;
+
+        do
           {
+            strm->avail_in = std::fread (buf_in, sizeof (buf_in[0]),
+                                         buf_len, source.fp);
+
             if (std::ferror (source.fp))
               throw std::runtime_error ("failed to read source file");
 
             strm->next_in = buf_in;
-            const int flush = std::feof (source.fp) ? Z_FINISH : Z_NO_FLUSH;
+            flush = std::feof (source.fp) ? Z_FINISH : Z_NO_FLUSH;
 
             // If deflate returns Z_OK and with zero avail_out, it must be
             // called again after making room in the output buffer because
             // there might be more output pending.
             do
               {
                 strm->avail_out = buf_len;
                 strm->next_out = buf_out;
@@ -378,18 +382,22 @@ namespace octave
                 std::fwrite (buf_out, sizeof (buf_out[0]),
                              buf_len - strm->avail_out, dest.fp);
                 if (std::ferror (dest.fp))
                   throw std::runtime_error ("failed to write file");
               }
             while (strm->avail_out == 0);
 
             if (strm->avail_in != 0)
-              throw std::runtime_error ("failed to wrote file");
-          }
+              throw std::runtime_error ("failed to write file");
+
+          } while (flush != Z_FINISH);
+
+          if (status != Z_STREAM_END)
+            throw std::runtime_error ("failed to write file");
       }
 
       void
       close (void)
       {
         if (deflateEnd (strm) != Z_OK)
           throw std::runtime_error ("failed to close zlib stream");
         strm = nullptr;
