# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1249524665 14400
#      Wed Aug 05 22:11:05 2009 -0400
# Node ID ca95d991a65ac70c7570b706d060140145e4bccb
# Parent  9035e668ca96beaa60ddcc1a8837507aa17e603f
use key list order for iterating through map with for loop

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,13 @@
 2009-08-05  John W. Eaton  <jwe@octave.org>
 
+	* pt-eval.cc (tree_evaluator::visit_complex_for_command):
+	Use key_list order for iterating through map.
+
 	* Makefile.in (OCT_LINK_DEPS): Also include $(RLD_FLAG) in the list.
 
 2009-08-05  John W. Eaton  <jwe@octave.org>
 
 	* Makefile.in (octave$(EXEEXT)): Clean up link flags and library list.
 	(OCTINTERP_LINK_DEPS): Omit -L../libcruft $(LIBCRUFT) $(LIBS)
 	$(FLIBS) from the list.  Include $(RLD_FLAG) in the list.
 	(OCT_LINK_DEPS): Only include -L. $(LIBOCTINTERP) in the list.
diff --git a/src/pt-eval.cc b/src/pt-eval.cc
--- a/src/pt-eval.cc
+++ b/src/pt-eval.cc
@@ -427,27 +427,31 @@ tree_evaluator::visit_complex_for_comman
       tree_expression *elt = *p++;
 
       octave_lvalue val_ref = elt->lvalue ();
 
       elt = *p;
 
       octave_lvalue key_ref = elt->lvalue ();
 
-      const Octave_map tmp_val (rhs.map_value ());
+      const Octave_map tmp_val = rhs.map_value ();
 
       tree_statement_list *loop_body = cmd.body ();
 
-      for (Octave_map::const_iterator q = tmp_val.begin (); q != tmp_val.end (); q++)
-	{
-	  octave_value key = tmp_val.key (q);
+      string_vector keys = tmp_val.keys ();
+
+      octave_idx_type nel = keys.numel ();
 
-	  const Cell val_lst = tmp_val.contents (q);
+      for (octave_idx_type i = 0; i < nel; i++)
+	{
+	  std::string key = keys[i];
 
-	  octave_idx_type n = tmp_val.numel ();
+	  const Cell val_lst = tmp_val.contents (key);
+
+	  octave_idx_type n = val_lst.numel ();
 
 	  octave_value val = (n == 1) ? val_lst(0) : octave_value (val_lst);
 
 	  val_ref.assign (octave_value::op_asn_eq, val);
 	  key_ref.assign (octave_value::op_asn_eq, key);
 
 	  if (! error_state && loop_body)
 	    loop_body->accept (*this);
