# HG changeset patch
# User jwe
# Date 1190141893 0
#      Tue Sep 18 18:58:13 2007 +0000
# Node ID f779c83d6ccf638cea421a86102ff89639063b03
# Parent  66c7da4ee7a1b01fda43ec77bb379b772d872d7b
[project @ 2007-09-18 18:58:12 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,13 @@
+2007-07-20  Thomas Treichl  <Thomas.Treichl@gmx.net>
+
+	* aclocal.m4 (OCTAVE_CHECK_STRPTIME): New macro.
+	* configure.in: Use it.
+
 2007-09-06  John W. Eaton  <jwe@octave.org>
 
 	* configure.in: Avoid broken strptime function on Cygwin systems.
 
 2007-09-01  David Bateman  <dbateman@free.fr>
 
 	* configure.in: AC_SUBST and check the variable TEXINFO_QHULL.
 	* Makeconf.in: Use it.
diff --git a/aclocal.m4 b/aclocal.m4
--- a/aclocal.m4
+++ b/aclocal.m4
@@ -982,16 +982,77 @@ AC_DEFUN([OCTAVE_HDF5_DLL], [
       CFLAGS="$CFLAGS -DWIN32 -D_HDF5USEDLL_"
       AC_TRY_LINK([#include <hdf5.h>], [hid_t x = H5T_NATIVE_DOUBLE; return x],
         octave_cv_hdf5_dll=yes,
 	octave_cv_hdf5_dll=no)
       CFLAGS=$CFLAGS_old])])
   if test "$octave_cv_hdf5_dll" = yes; then
     AC_DEFINE(_HDF5USEDLL_, 1, [Define if using HDF5 dll (Win32)])
   fi])
+dnl 
+dnl Check to see if the function 'strptime' fills all fields of the tm
+dnl structure correctly or if some systems maybe forget about the tm_wday
+dnl and tm_yday fields (see inline comments below)
+dnl
+AC_DEFUN([OCTAVE_CHECK_STRPTIME],[
+  AC_CHECK_FUNC(strptime)
+  if test "$ac_cv_func_strptime" == yes; then
+    AC_MSG_CHECKING([whether strptime works])
+    AC_CACHE_VAL([octave_cv_strptime],[
+      AC_TRY_RUN([#include <stdio.h>
+      #include <time.h>
+
+      int main (int argc, char *argv[]) {
+
+        struct tm tm;
+        time_t t;
+
+        /* Checks for a handle error if return value == NULL, if so then
+           return an error number immediately */
+        if (strptime("17-09-2007 12:10:20", "%d-%m-%Y %H:%M:%S", &tm) == NULL) {
+          /* printf ("strptime: An handle error occured\n"); */
+          return (1);
+        }
+        /* printf("year: %d; month: %d; day: %d;\n", 
+             tm.tm_year, tm.tm_mon, tm.tm_mday);
+           printf("hour: %d; minute: %d; second: %d\n", 
+             tm.tm_hour, tm.tm_min, tm.tm_sec);
+           printf("strptime: week day: %d, year day: %d\n",
+             tm.tm_wday, tm.tm_yday); */
+
+        /* The hard coded date from above is a 'Monday' and the day
+           number '259' of the year 2007, so tm_wday == 1 and
+           tm_yday == 259, if these values are not set then return 
+           the error number 1 */
+        if (tm.tm_year != 107) return (1);
+        if (tm.tm_mon  != 8)   return (1);
+        if (tm.tm_mday != 17)  return (1);
+        if (tm.tm_hour != 12)  return (1);
+        if (tm.tm_min  != 10)  return (1);
+        if (tm.tm_sec  != 20)  return (1);
+        /* On some system eg. MacOSX and Cygwin the following two fields
+           may be zero, ie. the function does not work as expected */
+        if (tm.tm_wday != 1)   return (1);
+        if (tm.tm_yday != 259) return (1);
+
+        /* If not already returned from this test program then function
+           seems to work correctly */
+        return (0);
+      }],[octave_cv_strptime=yes],[octave_cv_strptime=no],[octave_cv_strptime=no]
+      ) # end of TRY_RUN
+    ])  # end of CACHE_VAL
+
+    AC_MSG_RESULT([$octave_cv_strptime])
+    if test x$octave_cv_strptime = xyes
+    then
+      AC_DEFINE(HAVE_STRPTIME, 1,
+         [Define to 1 if you have a working `strptime' function.])
+    fi
+  fi # if test "$ac_cv_func_strptime" == yes; then
+]) # end of AC_DEFUN of OCTAVE_CHECK_STRPTIME
 dnl
 dnl Check for the QHull version.
 dnl
 AC_DEFUN(AC_CHECK_QHULL_VERSION,
 [AC_MSG_CHECKING([for qh_qhull in -lqhull with qh_version])
 AC_CACHE_VAL(octave_cv_lib_qhull_version,  [
 cat > conftest.c <<EOF
 #include <stdio.h>
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -24,17 +24,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### Preserve CFLAGS and CXXFLAGS from the environment before doing
 ### anything else because we don't know which macros might call
 ### AC_PROG_CC or AC_PROG_CXX.
 
 EXTERN_CFLAGS="$CFLAGS"
 EXTERN_CXXFLAGS="$CXXFLAGS"
 
 AC_INIT
-AC_REVISION($Revision: 1.574 $)
+AC_REVISION($Revision: 1.575 $)
 AC_PREREQ(2.57)
 AC_CONFIG_SRCDIR([src/octave.cc])
 AC_CONFIG_HEADER(config.h)
 
 OCTAVE_HOST_TYPE
 
 AC_DEFINE(OCTAVE_SOURCE, 1, [Define if this is Octave.])
   
@@ -1447,27 +1447,17 @@ case "$canonical_host_type" in
     ## so use our version.  We could use an actual configure test
     ## for this.
   ;;
   *)
     AC_CHECK_FUNCS(strftime)
   ;;
 esac
 
-case "$canonical_host_type" in
-  *-apple-darwin* | *-*-cygwin*)
-    ## The weekday function, which uses strptime, is broken because
-    ## strptime is apparently not setting wday correctly for formats
-    ## like "%d-%m-%Y", so use our version.  We could use an actual
-    ## configure test for this.
-  ;;
-  *)
-    AC_CHECK_FUNCS(strptime)
-  ;;
-esac
+OCTAVE_CHECK_STRPTIME
 
 OCTAVE_SMART_PUTENV
 
 case "$canonical_host_type" in
   *-*-msdosmsvc | *-*-mingw*)
     AC_MSG_CHECKING([for required _WIN32_WINNT])
     AC_COMPILE_IFELSE(AC_LANG_PROGRAM([[
 #include <windows.h>
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,29 @@
+2007-09-18  John W. Eaton  <jwe@octave.org>
+
+	* cmd-edit.h, cmd-edit.cc (command_editor::startup_hook_set,
+	command_editor::event_hook_set): New static data.
+	(default_command_editor::set_startup_hook,
+	gnu_readline::set_startup_hook,
+	default_command_editor::restore_startup_hook,
+	gnu_readline_restore_event_hook):
+	Rename from do_set_startup_hook and do_set_event_hook.
+	(gnu_readline::operate_and_get_next): Call
+	command_editor::add_startup_hook, not
+	command_editor::set_startup_hook.
+	(command_editor::startup_handler, command_editor::event_handler):
+	New functions.
+	(command_editor::add_startup_hook, command_editor::add_event_hook,
+	command_editor::remove_startup_hook,
+	command_editor::remove_event_hook): Rename from set_startup_hook
+	and restore_startup_hook.  Handle hook sets here.
+	* cmd-edit.cc (gnu_history::do_goto_mark):
+	Call remove_startup_hook instead of restore_startup_hook.
+
 2007-09-17  John W. Eaton  <jwe@octave.org>
 
 	* lo-utils.cc (octave_read_complex, octave_read_double): Skip
 	leading whitespace.
 
 2007-09-13  John W. Eaton  <jwe@octave.org>
 
 	* lo-utils.cc (read_inf_nan_na, octave_read_double,
diff --git a/liboctave/cmd-edit.cc b/liboctave/cmd-edit.cc
--- a/liboctave/cmd-edit.cc
+++ b/liboctave/cmd-edit.cc
@@ -44,31 +44,35 @@ 02110-1301, USA.
 #include "file-ops.h"
 #include "lo-error.h"
 #include "lo-utils.h"
 #include "oct-env.h"
 #include "oct-time.h"
 
 command_editor *command_editor::instance = 0;
 
+std::set<command_editor::startup_hook_fcn> command_editor::startup_hook_set;
+
+std::set<command_editor::event_hook_fcn> command_editor::event_hook_set;
+
 #if defined (USE_READLINE)
 
 #include <cstdio>
 #include <cstdlib>
 
 #include "oct-rl-edit.h"
 
 class
 gnu_readline : public command_editor
 {
 public:
 
   typedef command_editor::startup_hook_fcn startup_hook_fcn;
 
-  typedef command_editor::event_hook_fcn event_hook_hook_fcn;
+  typedef command_editor::event_hook_fcn event_hook_fcn;
 
   typedef command_editor::completion_fcn completion_fcn;
 
   gnu_readline (void);
 
   ~gnu_readline (void) { }
 
   void do_set_name (const std::string& n);
@@ -113,21 +117,23 @@ public:
   do_generate_filename_completions (const std::string& text);
 
   void do_insert_text (const std::string& text);
 
   void do_newline (void);
 
   void do_clear_undo_list (void);
 
-  void do_set_startup_hook (startup_hook_fcn f);
+  void set_startup_hook (startup_hook_fcn f);
+
+  void restore_startup_hook (void);
 
-  void do_restore_startup_hook (void);
+  void set_event_hook (event_hook_fcn f);
 
-  void do_set_event_hook (event_hook_fcn f);
+  void restore_event_hook (void);
 
   void do_restore_event_hook (void);
 
   void do_read_init_file (const std::string& file);
 
   bool do_filename_completion_desired (bool);
 
   static int operate_and_get_next (int, int);
@@ -388,39 +394,39 @@ gnu_readline::do_newline (void)
 
 void
 gnu_readline::do_clear_undo_list ()
 {
   ::octave_rl_clear_undo_list ();
 }
 
 void
-gnu_readline::do_set_startup_hook (startup_hook_fcn f)
+gnu_readline::set_startup_hook (startup_hook_fcn f)
 {
   previous_startup_hook = ::octave_rl_get_startup_hook ();
 
   ::octave_rl_set_startup_hook (f);
 }
 
 void
-gnu_readline::do_restore_startup_hook (void)
+gnu_readline::restore_startup_hook (void)
 {
   ::octave_rl_set_startup_hook (previous_startup_hook);
 }
 
 void
-gnu_readline::do_set_event_hook (event_hook_fcn f)
+gnu_readline::set_event_hook (event_hook_fcn f)
 {
   previous_event_hook = octave_rl_get_event_hook ();
 
   ::octave_rl_set_event_hook (f);
 }
 
 void
-gnu_readline::do_restore_event_hook (void)
+gnu_readline::restore_event_hook (void)
 {
   ::octave_rl_set_event_hook (previous_event_hook);
 }
 
 void
 gnu_readline::do_read_init_file (const std::string& file)
 {
   ::octave_rl_read_init_file (file.c_str ());
@@ -447,17 +453,17 @@ gnu_readline::operate_and_get_next (int 
 
   if ((command_history::is_stifled ()
        && (x_length >= command_history::max_input_history ()))
       || (x_where >= x_length - 1))
     command_history::set_mark (x_where);
   else
     command_history::set_mark (x_where + 1);
 
-  command_editor::set_startup_hook (command_history::goto_mark);
+  command_editor::add_startup_hook (command_history::goto_mark);
 
   return 0;
 }
 
 int
 gnu_readline::history_search_backward (int count, int c)
 {
   return octave_rl_history_search_backward (count, c);
@@ -610,16 +616,46 @@ command_editor::make_command_editor (voi
 {
 #if defined (USE_READLINE)
   instance = new gnu_readline ();
 #else
   instance = new default_command_editor ();
 #endif
 }
 
+int
+command_editor::startup_handler (void)
+{
+  for (startup_hook_set_iterator p = startup_hook_set.begin ();
+       p != startup_hook_set.end (); p++)
+    {
+      startup_hook_fcn f = *p;
+
+      if (f)
+	f ();
+    }
+
+  return 0;
+}
+
+int
+command_editor::event_handler (void)
+{
+  for (event_hook_set_iterator p = event_hook_set.begin ();
+       p != event_hook_set.end (); p++)
+    {
+      event_hook_fcn f = *p;
+
+      if (f)
+	f ();
+    }
+
+  return 0;
+}
+
 void
 command_editor::set_name (const std::string& n)
 {
   if (instance_ok ())
     instance->do_set_name (n);
 }
 
 std::string
@@ -801,41 +837,65 @@ command_editor::newline (void)
 void
 command_editor::clear_undo_list (void)
 {
   if (instance_ok ())
     instance->do_clear_undo_list ();
 }
 
 void
-command_editor::set_startup_hook (startup_hook_fcn f)
+command_editor::add_startup_hook (startup_hook_fcn f)
 {
   if (instance_ok ())
-    instance->do_set_startup_hook (f);
+    {
+      startup_hook_set.insert (f);
+
+      instance->set_startup_hook (startup_handler);
+    }
 }
 
 void
-command_editor::restore_startup_hook (void)
+command_editor::remove_startup_hook (startup_hook_fcn f)
 {
   if (instance_ok ())
-    instance->do_restore_startup_hook ();
+    {
+      startup_hook_set_iterator p = startup_hook_set.find (f);
+
+      if (p != startup_hook_set.end ())
+	event_hook_set.erase (p);
+
+      if (startup_hook_set.empty ())
+	instance->restore_startup_hook ();
+    }
 }
 
 void
-command_editor::set_event_hook (event_hook_fcn f)
+command_editor::add_event_hook (event_hook_fcn f)
 {
   if (instance_ok ())
-    instance->do_set_event_hook (f);
+    {
+      event_hook_set.insert (f);
+
+      instance->set_event_hook (event_handler);
+    }
 }
 
 void
-command_editor::restore_event_hook (void)
+command_editor::remove_event_hook (event_hook_fcn f)
 {
   if (instance_ok ())
-    instance->do_restore_event_hook ();
+    {
+      event_hook_set_iterator p = event_hook_set.find (f);
+
+      if (p != event_hook_set.end ())
+	event_hook_set.erase (p);
+
+      if (event_hook_set.empty ())
+	instance->restore_event_hook ();
+    }
 }
 
 void
 command_editor::read_init_file (const std::string& file_arg)
 {
   if (instance_ok ())
     {
       std::string file = file_ops::tilde_expand (file_arg);
diff --git a/liboctave/cmd-edit.h b/liboctave/cmd-edit.h
--- a/liboctave/cmd-edit.h
+++ b/liboctave/cmd-edit.h
@@ -21,16 +21,17 @@ 02110-1301, USA.
 
 */
 
 #if !defined (octave_cmd_edit_h)
 #define octave_cmd_edit_h 1
 
 #include <cstdio>
 
+#include <set>
 #include <string>
 
 #include "str-vec.h"
 
 class
 OCTAVE_API
 command_editor
 {
@@ -92,23 +93,23 @@ public:
   static string_vector generate_filename_completions (const std::string& text);
 
   static void insert_text (const std::string& text);
 
   static void newline (void);
 
   static void clear_undo_list (void);
 
-  static void set_startup_hook (startup_hook_fcn f);
+  static void add_startup_hook (startup_hook_fcn f);
 
-  static void restore_startup_hook (void);
+  static void remove_startup_hook (startup_hook_fcn f);
 
-  static void set_event_hook (event_hook_fcn f);
+  static void add_event_hook (event_hook_fcn f);
 
-  static void restore_event_hook (void);
+  static void remove_event_hook (event_hook_fcn f);
 
   static void read_init_file (const std::string& file = std::string ());
 
   static bool filename_completion_desired (bool);
 
   static int current_command_number (void);
 
   static void reset_current_command_number (int n);
@@ -122,16 +123,30 @@ private:
   command_editor (const command_editor&);
 
   command_editor& operator = (const command_editor&);
 
   static bool instance_ok (void);
 
   static void make_command_editor (void);
 
+  static int startup_handler (void);
+
+  static int event_handler (void);
+
+  static std::set<startup_hook_fcn> startup_hook_set;
+
+  static std::set<event_hook_fcn> event_hook_set;
+
+  typedef std::set<startup_hook_fcn>::iterator startup_hook_set_iterator;
+  typedef std::set<startup_hook_fcn>::const_iterator startup_hook_set_const_iterator;
+
+  typedef std::set<event_hook_fcn>::iterator event_hook_set_iterator;
+  typedef std::set<event_hook_fcn>::const_iterator event_hook_set_const_iterator;
+
   // The real thing.
   static command_editor *instance;
 
 protected:
 
   // To use something other than the GNU readline library, derive a new
   // class from command_editor, overload these functions as
   // necessary, and make instance point to the new class.
@@ -186,23 +201,23 @@ protected:
   virtual string_vector do_generate_filename_completions (const std::string& text) = 0;
 
   virtual void do_insert_text (const std::string&) = 0;
 
   virtual void do_newline (void) = 0;
 
   virtual void do_clear_undo_list (void) { }
 
-  virtual void do_set_startup_hook (startup_hook_fcn) { }
+  virtual void set_startup_hook (startup_hook_fcn) { }
 
-  virtual void do_restore_startup_hook (void) { }
+  virtual void restore_startup_hook (void) { }
 
-  virtual void do_set_event_hook (event_hook_fcn) { }
+  virtual void set_event_hook (startup_hook_fcn) { }
 
-  virtual void do_restore_event_hook (void) { }
+  virtual void restore_event_hook (void) { }
 
   virtual void do_read_init_file (const std::string&) { }
 
   virtual bool do_filename_completion_desired (bool) { return false; }
 
   int read_octal (const std::string& s);
 
   void error (int);
diff --git a/liboctave/cmd-hist.cc b/liboctave/cmd-hist.cc
--- a/liboctave/cmd-hist.cc
+++ b/liboctave/cmd-hist.cc
@@ -202,17 +202,17 @@ gnu_history::do_goto_mark (void)
 
 	  command_editor::clear_undo_list ();
 	}
     }
 
   mark = 0;
 
   // FIXME -- for operate_and_get_next.
-  command_editor::restore_startup_hook ();
+  command_editor::remove_startup_hook (command_history::goto_mark);
 
   return 0;
 }
 
 void
 gnu_history::do_read (const std::string& f, bool must_exist)
 {
   if (! f.empty ())
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2007-09-18  John W. Eaton  <jwe@octave.org>
+
+	* input.cc (input_event_hook, Finput_event_hook): Call
+	command_editor::add_event_hook and
+	command_editor::remove_event_hook intstead of
+	command_editor::set_event_hook and
+	command_editor::restore_event_hook.
+
 2007-09-17  John W. Eaton  <jwe@octave.org>
 
 	* version.h (OCTAVE_VERSION): Now 2.9.14+.
 
 2007-09-17  John W. Eaton  <jwe@octave.org>
 
 	* version.h (OCTAVE_VERSION): Now 2.9.14.
 	(OCTAVE_API_VERSION): Now api-v26.
diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -1096,17 +1096,17 @@ input_event_hook (void)
       else
 	feval (hook_fcn, octave_value_list (), 0);
     }
   else
     {
       hook_fcn = std::string ();
       user_data = octave_value ();
 
-      command_editor::set_event_hook (0);
+      command_editor::remove_event_hook (input_event_hook);
     }
 
   return 0;
 }
 
 DEFUN (input_event_hook, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {[@var{ofcn}, @var{odata}] =} input_event_hook (@var{fcn}, @var{data})\n\
@@ -1143,21 +1143,21 @@ and the user data are returned.\n\
 	  tmp_hook_fcn = args(0).string_value ();
 
 	  if (error_state)
 	    {
 	      error ("input_event_hook: expecting string as first arg");
 	      return retval;
 	    }
 
-	  command_editor::set_event_hook (input_event_hook);
+	  command_editor::add_event_hook (input_event_hook);
 	}
 
       if (nargin == 0)
-	command_editor::set_event_hook (0);
+	command_editor::remove_event_hook (input_event_hook);
 
       retval(1) = user_data;
       retval(0) = hook_fcn;
 
       hook_fcn = tmp_hook_fcn;
       user_data = tmp_user_data;
     }
 
