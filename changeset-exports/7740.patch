# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1209540634 14400
#      Wed Apr 30 03:30:34 2008 -0400
# Node ID 39930366b7098845df918a1a49facd1dd3ac5a62
# Parent  ca9bfe159144bce7a6e9bbe0bd4c5b9ea4d281ac
implement builtin log2

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,15 @@
+2008-04-30  Jaroslav Hajek <highegg@gmail.com>
+
+	* lo-mappers.cc (xlog2 (double)): Compute log (2), not log2 (2).
+	(xlog2 (Complex), xlog2 (double, int&), xlog2 (Complex, int&)):
+	New functions.
+	* lo-mappers.h: Provide decls.
+
 2008-04-25  Michael Goffioul <michael.goffioul@gmail.com>
 
 	* oct-lookup.h (seq_lookup): Do not use output value of fill_n (MSVC
 	does not support it).
 
 2008-04-24  Michael Goffioul  <michael.goffioul@gmail.com>
 
 	* lo-sysdep.cc (octave_popen2): Don't set PIPE_NOWAIT for parentWrite.
diff --git a/liboctave/lo-mappers.cc b/liboctave/lo-mappers.cc
--- a/liboctave/lo-mappers.cc
+++ b/liboctave/lo-mappers.cc
@@ -134,39 +134,65 @@ double
 xlog2 (double x)
 {
 #if defined (HAVE_LOG2)
   return log2 (x);
 #else
 #if defined (M_LN2)
   static double ln2 = M_LN2;
 #else
-  static double ln2 = log2 (2);
+  static double ln2 = log (2);
 #endif
 
   return log (x) / ln2;
 #endif
 }
 
+Complex
+xlog2 (const Complex& x)
+{
+#if defined (M_LN2)
+  static double ln2 = M_LN2;
+#else
+  static double ln2 = log (2);
+#endif
+
+  return std::log (x) / ln2;
+}
+
 double
 xexp2 (double x)
 {
 #if defined (HAVE_EXP2)
   return exp2 (x);
 #else
 #if defined (M_LN2)
   static double ln2 = M_LN2;
 #else
-  static double ln2 = log2 (2);
+  static double ln2 = log (2);
 #endif
 
   return exp (x * ln2);
 #endif
 }
 
+double
+xlog2 (double x, int& exp)
+{
+  return frexp (x, &exp);
+}
+
+Complex
+xlog2 (const Complex& x, int& exp)
+{
+  double ax = std::abs (x);
+  double lax = xlog2 (ax, exp);
+  return (exp == 0) ? x : (x / ax) * lax;
+}
+
 // double -> bool mappers.
 
 bool
 xisnan (double x)
 {
   return lo_ieee_isnan (x);
 }
 
diff --git a/liboctave/lo-mappers.h b/liboctave/lo-mappers.h
--- a/liboctave/lo-mappers.h
+++ b/liboctave/lo-mappers.h
@@ -31,16 +31,19 @@ extern OCTAVE_API double conj (double x)
 extern OCTAVE_API double fix (double x);
 extern OCTAVE_API double imag (double x);
 extern OCTAVE_API double real (double x);
 extern OCTAVE_API double xround (double x);
 extern OCTAVE_API double xroundb (double x);
 extern OCTAVE_API double signum (double x);
 extern OCTAVE_API double xtrunc (double x);
 extern OCTAVE_API double xlog2 (double x); 
+extern OCTAVE_API Complex xlog2 (const Complex& x); 
+extern OCTAVE_API double xlog2 (double x, int& exp);
+extern OCTAVE_API Complex xlog2 (const Complex& x, int& exp);
 extern OCTAVE_API double xexp2 (double x);
 
 extern OCTAVE_API bool xisnan (double x);
 extern OCTAVE_API bool xfinite (double x);
 extern OCTAVE_API bool xisinf (double x);
 
 extern OCTAVE_API bool octave_is_NA (double x);
 extern OCTAVE_API bool octave_is_NaN_or_NA (double x) GCC_ATTR_DEPRECATED;
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2008-04-30  Jaroslav Hajek <highegg@gmail.com>
+
+	* specfun/log2.m: Delete. 
+	* specfun/Makefile.in (SOURCES): Delete it from the list.
+
 2008-04-29  David Bateman  <dbateman@free.fr>
 
 	pkg/pkg.m: Also set archprefix with the -local and -global options.
 
 2008-04-29  Jonathan Stickel  <jjstickel@vcn.com>
 
 	* statistics/distributions/tcdf.m, statistics/distributions/tinv.m:
 	Doc fix.
diff --git a/scripts/specfun/Makefile.in b/scripts/specfun/Makefile.in
--- a/scripts/specfun/Makefile.in
+++ b/scripts/specfun/Makefile.in
@@ -29,17 +29,17 @@ VPATH = @srcdir@
 
 include $(TOPDIR)/Makeconf
 
 INSTALL = @INSTALL@
 INSTALL_PROGRAM = @INSTALL_PROGRAM@
 INSTALL_DATA = @INSTALL_DATA@
 
 SOURCES = bessel.m beta.m betai.m betaln.m erfinv.m factor.m \
-  factorial.m gammai.m isprime.m legendre.m log2.m nchoosek.m \
+  factorial.m gammai.m isprime.m legendre.m nchoosek.m \
   perms.m pow2.m primes.m reallog.m realpow.m realsqrt.m
 
 DISTFILES = $(addprefix $(srcdir)/, Makefile.in $(SOURCES))
 
 FCN_FILES = $(addprefix $(srcdir)/, $(SOURCES))
 FCN_FILES_NO_DIR = $(notdir $(FCN_FILES))
 
 all: PKG_ADD
diff --git a/scripts/specfun/log2.m b/scripts/specfun/log2.m
deleted file mode 100644
--- a/scripts/specfun/log2.m
+++ /dev/null
@@ -1,73 +0,0 @@
-## Copyright (C) 1995, 1996, 1999, 2000, 2002, 2004, 2005, 2006, 2007
-##               Kurt Hornik
-##
-## This file is part of Octave.
-##
-## Octave is free software; you can redistribute it and/or modify it
-## under the terms of the GNU General Public License as published by
-## the Free Software Foundation; either version 3 of the License, or (at
-## your option) any later version.
-##
-## Octave is distributed in the hope that it will be useful, but
-## WITHOUT ANY WARRANTY; without even the implied warranty of
-## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-## General Public License for more details.
-##
-## You should have received a copy of the GNU General Public License
-## along with Octave; see the file COPYING.  If not, see
-## <http://www.gnu.org/licenses/>.
-
-## -*- texinfo -*-
-## @deftypefn {Mapping Function} {} log2 (@var{x})
-## @deftypefnx {Mapping Function} {[@var{f}, @var{e}] =} log2 (@var{x})
-## Compute the base-2 logarithm of @var{x}.  With two outputs, returns
-## @var{f} and @var{e} such that
-## @iftex
-## @tex
-##  $1/2 <= |f| < 1$ and $x = f \cdot 2^e$.
-## @end tex
-## @end iftex
-## @ifinfo
-##  1/2 <= abs(f) < 1 and x = f * 2^e.
-## @end ifinfo
-## @seealso{log, log10, logspace, exp}
-## @end deftypefn
-
-## Author: AW <Andreas.Weingessel@ci.tuwien.ac.at>
-## Created: 17 October 1994
-## Adapted-By: jwe
-
-function [f, e] = log2 (x)
-
-  if (nargin != 1)
-    print_usage ();
-  endif
-
-  if (nargout < 2)
-    f = log (x) / log (2);
-  elseif (nargout == 2)
-    ## Only deal with the real parts ...
-    x = real (x);
-    ## Since log (0) gives problems, 0 entries are replaced by 1.
-    ## This is corrected later by multiplication with the sign.
-    f = abs (x) + (x == 0);
-    e = (floor (log (f) / log (2)) + 1) .* (x != 0);
-    f = sign (x) .* f ./ (2 .^ e);
-    ## Workaround to cases of f == 1 (due to precision issues).
-    idx = abs (f) >= 1;
-    if (any (idx))
-      f(idx) /= 2;
-      e(idx)++;
-    endif
-  else
-    error ("log2 takes at most 2 output arguments");
-  endif
-
-endfunction
-
-%!assert(all (abs (log2 ([1/4, 1/2, 1, 2, 4]) - [-2, -1, 0, 1, 2]) < sqrt (eps)));
-
-%!error log2 ();
-
-%!error log2 (1, 2);
-
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,22 @@
+2008-04-30  John W. Eaton  <jwe@octave.org>
+
+	* ov-fcn-handle.cc: Create handle pointing to flops instead of log2.
+
+2008-04-30  Jaroslav Hajek <highegg@gmail.com>
+
+	* ov-base.cc, ov-base.h, ov-bool-mat.h, ov-bool-sparse.h,
+	ov-bool.h, ov-complex.cc, ov-complex.h, ov-cx-mat.cc, ov-cx-mat.h,
+	ov-cx-sparse.cc, ov-cx-sparse.h, ov-intx.h, ov-range.h,
+	ov-re-mat.cc, ov-re-mat.h, ov-re-sparse.cc, ov-re-sparse.h,
+	ov-scalar.cc, ov-scalar.h, ov.h:
+ 	Provide log2 mapper function.
+	* data.cc (Flog2): New function.
+
 2008-04-25  John W. Eaton  <jwe@octave.org>
 
 	* pt-stmt.h (tree_statement_list::function_body): New data member.
 	(tree_statement_list::tree_statement_list): Initialize it.
 	(tree_statement_list::mark_as_script_body): New function.
 	(tree_statement::maybe_echo_code, tree_statement::eval):
 	Rename in_function_body argument to in_function_or_script_body.
 	* pt-stmt.cc (tree_statement::eval): Only set statement in call
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -681,16 +681,92 @@ values of @var{x} or @var{y}.\n\
 %! assert (size (hypot (zeros (0, 2), zeros (0, 2))), [0, 2])
 %! assert (size (hypot (rand (2, 3, 4), zeros (2, 3, 4))), [2, 3, 4])
 %! assert (size (hypot (rand (2, 3, 4), 1), [2, 3, 4])
 %! assert (size (hypot (1, rand (2, 3, 4)), [2, 3, 4])
 %! assert (size (hypot (1, 2), [1, 1])
 %! assert (hypot (1:10,1:10), sqrt(2) * [1:10]);
 */
 
+template<typename T, typename ET>
+void 
+map_2_xlog2 (const Array<T>& x, Array<T>& f, Array<ET>& e)
+{
+  f = Array<T>(x.dims ());
+  e = Array<ET>(x.dims ());
+  for (octave_idx_type i = 0; i < x.numel (); i++)
+    {
+      int exp;
+      f.xelem (i) = xlog2 (x(i), exp);
+      e.xelem (i) = exp;
+    }
+}
+
+DEFUN (log2, args, nargout,
+  "-*- texinfo -*-\n\
+@deftypefn {Mapping Function} {} log2 (@var{x})\n\
+@deftypefnx {Mapping Function} {[@var{f}, @var{e}] = } log2 (@var{x})\n\
+Compute the base-2 logarithm for each element of @var{x}.\n\
+If called with two output arguments, split @var{x} to\n\
+binary mantissa and exponent so that @code{1/2 <= abs(f) < 1} and\n\
+@var{e} is an integer. If @code{x = 0}, @code{f = e = 0}.\n\
+@seealso{log, log10, log2, exp}\n\
+@end deftypefn")
+{
+  octave_value_list retval;
+
+  if (args.length () == 1)
+    {
+      if (nargout < 2)
+        retval(0) = args(0).log2 ();
+      else if (args(0).is_real_type ())
+        {
+          NDArray f;
+          NDArray x = args(0).array_value ();
+          // FIXME -- should E be an int value?
+          Matrix e;
+          map_2_xlog2 (x, f, e);
+          retval (1) = e;
+          retval (0) = f;
+        }
+      else if (args(0).is_complex_type ())
+        {
+          ComplexNDArray f;
+          ComplexNDArray x = args(0).complex_array_value ();
+          // FIXME -- should E be an int value?
+          NDArray e;
+          map_2_xlog2 (x, f, e);
+          retval (1) = e;
+          retval (0) = f;
+        }
+      else
+        gripe_wrong_type_arg ("log2", args(0));
+    }
+  else
+    print_usage ();
+
+  return retval;
+}
+
+/*
+%! assert(log2 ([1/4, 1/2, 1, 2, 4]), [-2, -1, 0, 1, 2]);
+%! assert(log2(Inf), Inf);
+%! assert(isnan(log2(NaN)));
+%! assert(log2(4*i), 2 + log2(1*i));
+%! assert(log2(complex(0,Inf)), Inf + log2(i));
+%!test
+%! [f, e] = log2 ([0,-1; 2,-4; Inf,-Inf]);
+%! assert (f, [0,-0.5; 0.5,-0.5; Inf,-Inf]);
+%! assert (e, [0,1;2,3;0,0])
+%!test
+%! [f, e] = log2 (complex (zeros (3, 2), [0,-1; 2,-4; Inf,-Inf]));
+%! assert (f, complex (zeros (3, 2), [0,-0.5; 0.5,-0.5; Inf,-Inf]));
+%! assert (e, [0,1; 2,3; 0,0]);
+*/
+
 DEFUN (fmod, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} fmod (@var{x}, @var{y})\n\
 Compute the floating point remainder of dividing @var{x} by @var{y}\n\
 using the C library function @code{fmod}.  The result has the same\n\
 sign as @var{x}.  If @var{y} is zero, the result is implementation-defined.\n\
 @end deftypefn")
 {
diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -955,16 +955,17 @@ UNDEFINED_MAPPER (fix)
 UNDEFINED_MAPPER (floor)
 UNDEFINED_MAPPER (gamma)
 UNDEFINED_MAPPER (imag)
 UNDEFINED_MAPPER (isinf)
 UNDEFINED_MAPPER (isna)
 UNDEFINED_MAPPER (isnan)
 UNDEFINED_MAPPER (lgamma)
 UNDEFINED_MAPPER (log)
+UNDEFINED_MAPPER (log2)
 UNDEFINED_MAPPER (log10)
 UNDEFINED_MAPPER (log1p)
 UNDEFINED_MAPPER (real)
 UNDEFINED_MAPPER (round)
 UNDEFINED_MAPPER (roundb)
 UNDEFINED_MAPPER (signum)
 UNDEFINED_MAPPER (sin)
 UNDEFINED_MAPPER (sinh)
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -502,16 +502,17 @@ public:
   virtual octave_value floor (void) const;
   virtual octave_value gamma (void) const;
   virtual octave_value imag (void) const;
   virtual octave_value isinf (void) const;
   virtual octave_value isna (void) const;
   virtual octave_value isnan (void) const;
   virtual octave_value lgamma (void) const;
   virtual octave_value log (void) const;
+  virtual octave_value log2 (void) const;
   virtual octave_value log10 (void) const;
   virtual octave_value log1p (void) const;
   virtual octave_value real (void) const;
   virtual octave_value round (void) const;
   virtual octave_value roundb (void) const;
   virtual octave_value signum (void) const;
   virtual octave_value sin (void) const;
   virtual octave_value sinh (void) const;
diff --git a/src/ov-bool-mat.h b/src/ov-bool-mat.h
--- a/src/ov-bool-mat.h
+++ b/src/ov-bool-mat.h
@@ -214,16 +214,17 @@ public:
   BOOL_MAT_MAPPER (floor)
   BOOL_MAT_MAPPER (gamma)
   BOOL_MAT_MAPPER (imag)
   BOOL_MAT_MAPPER (isinf)
   BOOL_MAT_MAPPER (isna)
   BOOL_MAT_MAPPER (isnan)
   BOOL_MAT_MAPPER (lgamma)
   BOOL_MAT_MAPPER (log)
+  BOOL_MAT_MAPPER (log2)
   BOOL_MAT_MAPPER (log10)
   BOOL_MAT_MAPPER (log1p)
   BOOL_MAT_MAPPER (real)
   BOOL_MAT_MAPPER (round)
   BOOL_MAT_MAPPER (roundb)
   BOOL_MAT_MAPPER (signum)
   BOOL_MAT_MAPPER (sin)
   BOOL_MAT_MAPPER (sinh)
diff --git a/src/ov-bool-sparse.h b/src/ov-bool-sparse.h
--- a/src/ov-bool-sparse.h
+++ b/src/ov-bool-sparse.h
@@ -170,16 +170,17 @@ public:
   BOOL_SPARSE_MAPPER (floor)
   BOOL_SPARSE_MAPPER (gamma)
   BOOL_SPARSE_MAPPER (imag)
   BOOL_SPARSE_MAPPER (isinf)
   BOOL_SPARSE_MAPPER (isna)
   BOOL_SPARSE_MAPPER (isnan)
   BOOL_SPARSE_MAPPER (lgamma)
   BOOL_SPARSE_MAPPER (log)
+  BOOL_SPARSE_MAPPER (log2)
   BOOL_SPARSE_MAPPER (log10)
   BOOL_SPARSE_MAPPER (log1p)
   BOOL_SPARSE_MAPPER (real)
   BOOL_SPARSE_MAPPER (round)
   BOOL_SPARSE_MAPPER (roundb)
   BOOL_SPARSE_MAPPER (signum)
   BOOL_SPARSE_MAPPER (sin)
   BOOL_SPARSE_MAPPER (sinh)
diff --git a/src/ov-bool.h b/src/ov-bool.h
--- a/src/ov-bool.h
+++ b/src/ov-bool.h
@@ -222,16 +222,17 @@ public:
   BOOL_MAPPER (floor)
   BOOL_MAPPER (gamma)
   BOOL_MAPPER (imag)
   BOOL_MAPPER (isinf)
   BOOL_MAPPER (isna)
   BOOL_MAPPER (isnan)
   BOOL_MAPPER (lgamma)
   BOOL_MAPPER (log)
+  BOOL_MAPPER (log2)
   BOOL_MAPPER (log10)
   BOOL_MAPPER (log1p)
   BOOL_MAPPER (real)
   BOOL_MAPPER (round)
   BOOL_MAPPER (roundb)
   BOOL_MAPPER (signum)
   BOOL_MAPPER (sin)
   BOOL_MAPPER (sinh)
diff --git a/src/ov-complex.cc b/src/ov-complex.cc
--- a/src/ov-complex.cc
+++ b/src/ov-complex.cc
@@ -408,16 +408,17 @@ COMPLEX_MAPPER (conj, std::conj)
 COMPLEX_MAPPER (cos, std::cos)
 COMPLEX_MAPPER (cosh, std::cosh)
 COMPLEX_MAPPER (exp, std::exp)
 COMPLEX_MAPPER (expm1, ::expm1)
 COMPLEX_MAPPER (fix, ::fix)
 COMPLEX_MAPPER (floor, ::floor)
 COMPLEX_MAPPER (imag, ximag)
 COMPLEX_MAPPER (log, std::log)
+COMPLEX_MAPPER (log2, xlog2)
 COMPLEX_MAPPER (log10, std::log10)
 COMPLEX_MAPPER (log1p, ::log1p)
 COMPLEX_MAPPER (real, xreal)
 COMPLEX_MAPPER (round, xround)
 COMPLEX_MAPPER (roundb, xroundb)
 COMPLEX_MAPPER (signum, ::signum)
 COMPLEX_MAPPER (sin, std::sin)
 COMPLEX_MAPPER (sinh, std::sinh)
diff --git a/src/ov-complex.h b/src/ov-complex.h
--- a/src/ov-complex.h
+++ b/src/ov-complex.h
@@ -168,16 +168,17 @@ public:
   octave_value cos (void) const;
   octave_value cosh (void) const;
   octave_value exp (void) const;
   octave_value expm1 (void) const;
   octave_value fix (void) const;
   octave_value floor (void) const;
   octave_value imag (void) const;
   octave_value log (void) const;
+  octave_value log2 (void) const;
   octave_value log10 (void) const;
   octave_value log1p (void) const;
   octave_value real (void) const;
   octave_value round (void) const;
   octave_value roundb (void) const;
   octave_value signum (void) const;
   octave_value sin (void) const;
   octave_value sinh (void) const;
diff --git a/src/ov-cx-mat.cc b/src/ov-cx-mat.cc
--- a/src/ov-cx-mat.cc
+++ b/src/ov-cx-mat.cc
@@ -776,16 +776,17 @@ ARRAY_MAPPER (conj, ComplexNDArray::cmap
 ARRAY_MAPPER (cos, ComplexNDArray::cmapper, std::cos)
 ARRAY_MAPPER (cosh, ComplexNDArray::cmapper, std::cosh)
 ARRAY_MAPPER (exp, ComplexNDArray::cmapper, std::exp)
 ARRAY_MAPPER (expm1, ComplexNDArray::cmapper, ::expm1)
 ARRAY_MAPPER (fix, ComplexNDArray::cmapper, ::fix)
 ARRAY_MAPPER (floor, ComplexNDArray::cmapper, ::floor)
 ARRAY_MAPPER (imag, ComplexNDArray::dmapper, ximag)
 ARRAY_MAPPER (log, ComplexNDArray::cmapper, std::log)
+ARRAY_MAPPER (log2, ComplexNDArray::cmapper, xlog2)
 ARRAY_MAPPER (log10, ComplexNDArray::cmapper, std::log10)
 ARRAY_MAPPER (log1p, ComplexNDArray::cmapper, ::log1p)
 ARRAY_MAPPER (real, ComplexNDArray::dmapper, xreal)
 ARRAY_MAPPER (round, ComplexNDArray::cmapper, xround)
 ARRAY_MAPPER (roundb, ComplexNDArray::cmapper, xroundb)
 ARRAY_MAPPER (signum, ComplexNDArray::cmapper, ::signum)
 ARRAY_MAPPER (sin, ComplexNDArray::cmapper, std::sin)
 ARRAY_MAPPER (sinh, ComplexNDArray::cmapper, std::sinh)
diff --git a/src/ov-cx-mat.h b/src/ov-cx-mat.h
--- a/src/ov-cx-mat.h
+++ b/src/ov-cx-mat.h
@@ -171,16 +171,17 @@ public:
   octave_value cos (void) const;
   octave_value cosh (void) const;
   octave_value exp (void) const;
   octave_value expm1 (void) const;
   octave_value fix (void) const;
   octave_value floor (void) const;
   octave_value imag (void) const;
   octave_value log (void) const;
+  octave_value log2 (void) const;
   octave_value log10 (void) const;
   octave_value log1p (void) const;
   octave_value real (void) const;
   octave_value round (void) const;
   octave_value roundb (void) const;
   octave_value signum (void) const;
   octave_value sin (void) const;
   octave_value sinh (void) const;
diff --git a/src/ov-cx-sparse.cc b/src/ov-cx-sparse.cc
--- a/src/ov-cx-sparse.cc
+++ b/src/ov-cx-sparse.cc
@@ -949,16 +949,17 @@ SPARSE_MAPPER (conj, SparseComplexMatrix
 SPARSE_MAPPER (cos, SparseComplexMatrix::cmapper, std::cos)
 SPARSE_MAPPER (cosh, SparseComplexMatrix::cmapper, std::cosh)
 SPARSE_MAPPER (exp, SparseComplexMatrix::cmapper, std::exp)
 SPARSE_MAPPER (expm1, SparseComplexMatrix::cmapper, ::expm1)
 SPARSE_MAPPER (fix, SparseComplexMatrix::cmapper, ::fix)
 SPARSE_MAPPER (floor, SparseComplexMatrix::cmapper, ::floor)
 SPARSE_MAPPER (imag, SparseComplexMatrix::dmapper, ximag)
 SPARSE_MAPPER (log, SparseComplexMatrix::cmapper, std::log)
+SPARSE_MAPPER (log2, SparseComplexMatrix::cmapper, xlog2)
 SPARSE_MAPPER (log10, SparseComplexMatrix::cmapper, std::log10)
 SPARSE_MAPPER (log1p, SparseComplexMatrix::cmapper, ::log1p)
 SPARSE_MAPPER (real, SparseComplexMatrix::dmapper, xreal)
 SPARSE_MAPPER (round, SparseComplexMatrix::cmapper, xround)
 SPARSE_MAPPER (roundb, SparseComplexMatrix::cmapper, xroundb)
 SPARSE_MAPPER (signum, SparseComplexMatrix::cmapper, ::signum)
 SPARSE_MAPPER (sin, SparseComplexMatrix::cmapper, std::sin)
 SPARSE_MAPPER (sinh, SparseComplexMatrix::cmapper, std::sinh)
diff --git a/src/ov-cx-sparse.h b/src/ov-cx-sparse.h
--- a/src/ov-cx-sparse.h
+++ b/src/ov-cx-sparse.h
@@ -170,16 +170,17 @@ public:
   octave_value cos (void) const;
   octave_value cosh (void) const;
   octave_value exp (void) const;
   octave_value expm1 (void) const;
   octave_value fix (void) const;
   octave_value floor (void) const;
   octave_value imag (void) const;
   octave_value log (void) const;
+  octave_value log2 (void) const;
   octave_value log10 (void) const;
   octave_value log1p (void) const;
   octave_value real (void) const;
   octave_value round (void) const;
   octave_value roundb (void) const;
   octave_value signum (void) const;
   octave_value sin (void) const;
   octave_value sinh (void) const;
diff --git a/src/ov-fcn-handle.cc b/src/ov-fcn-handle.cc
--- a/src/ov-fcn-handle.cc
+++ b/src/ov-fcn-handle.cc
@@ -376,17 +376,17 @@ octave_fcn_handle::load_ascii (std::istr
 }
 
 /* 
 
 %!test
 %! a = 2;
 %! f = @(x) a + x;
 %! g = @(x) 2 * x;
-%! h = @log2;
+%! h = @flops;
 %! f2 = f;
 %! g2 = g;
 %! h2 = h;
 %! nm = tmpnam();
 %! unwind_protect
 %!   save ("-text", nm, "f2", "g2", "h2");
 %!   clear f2 g2 h2
 %!   load (nm);
@@ -573,17 +573,17 @@ octave_fcn_handle::load_binary (std::ist
 }
 
 /* 
 
 %!test
 %! a = 2;
 %! f = @(x) a + x;
 %! g = @(x) 2 * x;
-%! h = @log2;
+%! h = @flops;
 %! f2 = f;
 %! g2 = g;
 %! h2 = h;
 %! nm = tmpnam();
 %! unwind_protect
 %!   save ("-binary", nm, "f2", "g2", "h2");
 %!   clear f2 g2 h2
 %!   load (nm);
@@ -1114,17 +1114,17 @@ octave_fcn_handle::load_hdf5 (hid_t loc_
 
 /* 
 
 %!test
 %! if (!isempty(findstr(octave_config_info ("DEFS"),"HAVE_HDF5")))
 %!   a = 2;
 %!   f = @(x) a + x;
 %!   g = @(x) 2 * x;
-%!   h = @log2;
+%!   h = @flops;
 %!   f2 = f;
 %!   g2 = g;
 %!   h2 = h;
 %!   nm = tmpnam();
 %!   unwind_protect
 %!     save ("-hdf5", nm, "f2", "g2", "h2");
 %!     clear f2 g2 h2
 %!     load (nm);
diff --git a/src/ov-range.h b/src/ov-range.h
--- a/src/ov-range.h
+++ b/src/ov-range.h
@@ -294,16 +294,17 @@ public:
   RANGE_MAPPER (floor)
   RANGE_MAPPER (gamma)
   RANGE_MAPPER (imag)
   RANGE_MAPPER (isinf)
   RANGE_MAPPER (isna)
   RANGE_MAPPER (isnan)
   RANGE_MAPPER (lgamma)
   RANGE_MAPPER (log)
+  RANGE_MAPPER (log2)
   RANGE_MAPPER (log10)
   RANGE_MAPPER (log1p)
   RANGE_MAPPER (real)
   RANGE_MAPPER (round)
   RANGE_MAPPER (roundb)
   RANGE_MAPPER (signum)
   RANGE_MAPPER (sin)
   RANGE_MAPPER (sinh)
diff --git a/src/ov-re-mat.cc b/src/ov-re-mat.cc
--- a/src/ov-re-mat.cc
+++ b/src/ov-re-mat.cc
@@ -730,16 +730,17 @@ ARRAY_MAPPER (conj, NDArray::dmapper, xc
 ARRAY_MAPPER (cos, NDArray::dmapper, ::cos)
 ARRAY_MAPPER (cosh, NDArray::dmapper, ::cosh)
 ARRAY_MAPPER (exp, NDArray::dmapper, ::exp)
 ARRAY_MAPPER (expm1, NDArray::dmapper, ::expm1)
 ARRAY_MAPPER (fix, NDArray::dmapper, ::fix)
 ARRAY_MAPPER (floor, NDArray::dmapper, ::floor)
 ARRAY_MAPPER (imag, NDArray::dmapper, ::imag)
 CD_ARRAY_MAPPER (log, ::log, std::log, 0.0, octave_Inf)
+CD_ARRAY_MAPPER (log2, xlog2, xlog2, 0.0, octave_Inf)
 CD_ARRAY_MAPPER (log10, ::log10, std::log10, 0.0, octave_Inf)
 CD_ARRAY_MAPPER (log1p, ::log1p, ::log1p, -1.0, octave_Inf)
 ARRAY_MAPPER (real, NDArray::dmapper, ::real)
 ARRAY_MAPPER (round, NDArray::dmapper, xround)
 ARRAY_MAPPER (roundb, NDArray::dmapper, xroundb)
 ARRAY_MAPPER (signum, NDArray::dmapper, ::signum)
 ARRAY_MAPPER (sin, NDArray::dmapper, ::sin)
 ARRAY_MAPPER (sinh, NDArray::dmapper, ::sinh)
diff --git a/src/ov-re-mat.h b/src/ov-re-mat.h
--- a/src/ov-re-mat.h
+++ b/src/ov-re-mat.h
@@ -198,16 +198,17 @@ public:
   octave_value cos (void) const;
   octave_value cosh (void) const;
   octave_value exp (void) const;
   octave_value expm1 (void) const;
   octave_value fix (void) const;
   octave_value floor (void) const;
   octave_value imag (void) const;
   octave_value log (void) const;
+  octave_value log2 (void) const;
   octave_value log10 (void) const;
   octave_value log1p (void) const;
   octave_value real (void) const;
   octave_value round (void) const;
   octave_value roundb (void) const;
   octave_value signum (void) const;
   octave_value sin (void) const;
   octave_value sinh (void) const;
diff --git a/src/ov-re-sparse.cc b/src/ov-re-sparse.cc
--- a/src/ov-re-sparse.cc
+++ b/src/ov-re-sparse.cc
@@ -920,16 +920,17 @@ SPARSE_MAPPER (conj, SparseMatrix::dmapp
 SPARSE_MAPPER (cos, SparseMatrix::dmapper, ::cos)
 SPARSE_MAPPER (cosh, SparseMatrix::dmapper, ::cosh)
 SPARSE_MAPPER (exp, SparseMatrix::dmapper, ::exp)
 SPARSE_MAPPER (expm1, SparseMatrix::dmapper, ::expm1)
 SPARSE_MAPPER (fix, SparseMatrix::dmapper, ::fix)
 SPARSE_MAPPER (floor, SparseMatrix::dmapper, ::floor)
 SPARSE_MAPPER (imag, SparseMatrix::dmapper, ::imag)
 CD_SPARSE_MAPPER (log, ::log, std::log, 0.0, octave_Inf)
+CD_SPARSE_MAPPER (log2, xlog2, xlog2, 0.0, octave_Inf)
 CD_SPARSE_MAPPER (log10, ::log10, std::log10, 0.0, octave_Inf)
 CD_SPARSE_MAPPER (log1p, ::log1p, ::log1p, 0.0, octave_Inf)
 SPARSE_MAPPER (real, SparseMatrix::dmapper, ::real)
 SPARSE_MAPPER (round, SparseMatrix::dmapper, xround)
 SPARSE_MAPPER (roundb, SparseMatrix::dmapper, xroundb)
 SPARSE_MAPPER (signum, SparseMatrix::dmapper, ::signum)
 SPARSE_MAPPER (sin, SparseMatrix::dmapper, ::sin)
 SPARSE_MAPPER (sinh, SparseMatrix::dmapper, ::sinh)
diff --git a/src/ov-re-sparse.h b/src/ov-re-sparse.h
--- a/src/ov-re-sparse.h
+++ b/src/ov-re-sparse.h
@@ -171,16 +171,17 @@ public:
   octave_value cos (void) const;
   octave_value cosh (void) const;
   octave_value exp (void) const;
   octave_value expm1 (void) const;
   octave_value fix (void) const;
   octave_value floor (void) const;
   octave_value imag (void) const;
   octave_value log (void) const;
+  octave_value log2 (void) const;
   octave_value log10 (void) const;
   octave_value log1p (void) const;
   octave_value real (void) const;
   octave_value round (void) const;
   octave_value roundb (void) const;
   octave_value signum (void) const;
   octave_value sin (void) const;
   octave_value sinh (void) const;
diff --git a/src/ov-scalar.cc b/src/ov-scalar.cc
--- a/src/ov-scalar.cc
+++ b/src/ov-scalar.cc
@@ -325,16 +325,17 @@ SCALAR_MAPPER (conj, xconj)
 SCALAR_MAPPER (cos, ::cos)
 SCALAR_MAPPER (cosh, ::cosh)
 SCALAR_MAPPER (exp, ::exp)
 SCALAR_MAPPER (expm1, ::expm1)
 SCALAR_MAPPER (fix, ::fix)
 SCALAR_MAPPER (floor, ::floor)
 SCALAR_MAPPER (imag, ::imag)
 CD_SCALAR_MAPPER (log, ::log, std::log, 0.0, octave_Inf)
+CD_SCALAR_MAPPER (log2, xlog2, xlog2, 0.0, octave_Inf)
 CD_SCALAR_MAPPER (log10, ::log10, std::log10, 0.0, octave_Inf)
 CD_SCALAR_MAPPER (log1p, ::log1p, ::log1p, -1.0, octave_Inf)
 SCALAR_MAPPER (real, ::real)
 SCALAR_MAPPER (round, xround)
 SCALAR_MAPPER (roundb, xroundb)
 SCALAR_MAPPER (signum, ::signum)
 SCALAR_MAPPER (sin, ::sin)
 SCALAR_MAPPER (sinh, ::sinh)
diff --git a/src/ov-scalar.h b/src/ov-scalar.h
--- a/src/ov-scalar.h
+++ b/src/ov-scalar.h
@@ -239,16 +239,17 @@ public:
   octave_value cos (void) const;
   octave_value cosh (void) const;
   octave_value exp (void) const;
   octave_value expm1 (void) const;
   octave_value fix (void) const;
   octave_value floor (void) const;
   octave_value imag (void) const;
   octave_value log (void) const;
+  octave_value log2 (void) const;
   octave_value log10 (void) const;
   octave_value log1p (void) const;
   octave_value real (void) const;
   octave_value round (void) const;
   octave_value roundb (void) const;
   octave_value signum (void) const;
   octave_value sin (void) const;
   octave_value sinh (void) const;
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -915,16 +915,17 @@ public:
   MAPPER_FORWARD (floor)
   MAPPER_FORWARD (gamma)
   MAPPER_FORWARD (imag)
   MAPPER_FORWARD (isinf)
   MAPPER_FORWARD (isna)
   MAPPER_FORWARD (isnan)
   MAPPER_FORWARD (lgamma)
   MAPPER_FORWARD (log)
+  MAPPER_FORWARD (log2)
   MAPPER_FORWARD (log10)
   MAPPER_FORWARD (log1p)
   MAPPER_FORWARD (real)
   MAPPER_FORWARD (round)
   MAPPER_FORWARD (roundb)
   MAPPER_FORWARD (signum)
   MAPPER_FORWARD (sin)
   MAPPER_FORWARD (sinh)
