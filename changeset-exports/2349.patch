# HG changeset patch
# User jwe
# Date 838454362 0
#      Sat Jul 27 07:59:22 1996 +0000
# Node ID b369227ce3d2b60c22f091b79753176125bedf57
# Parent  a88c5cc51f623cc422400e1b5e7c495502233cda
[project @ 1996-07-27 07:59:20 by jwe]

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -102,23 +102,51 @@ extern "C"
 ComplexMatrix::ComplexMatrix (const Matrix& a)
   : MArray2<Complex> (a.rows (), a.cols ())
 {
   for (int j = 0; j < cols (); j++)
     for (int i = 0; i < rows (); i++)
       elem (i, j) = a.elem (i, j);
 }
 
+ComplexMatrix::ComplexMatrix (const RowVector& rv)
+  : MArray2<Complex> (1, rv.length (), 0.0)
+{
+  for (int i = 0; i < rv.length (); i++)
+    elem (0, i) = rv.elem (i);
+}
+
+ComplexMatrix::ComplexMatrix (const ColumnVector& cv)
+  : MArray2<Complex> (cv.length (), 1, 0.0)
+{
+  for (int i = 0; i < cv.length (); i++)
+    elem (i, 0) = cv.elem (i);
+}
+
 ComplexMatrix::ComplexMatrix (const DiagMatrix& a)
   : MArray2<Complex> (a.rows (), a.cols (), 0.0)
 {
   for (int i = 0; i < a.length (); i++)
     elem (i, i) = a.elem (i, i);
 }
 
+ComplexMatrix::ComplexMatrix (const ComplexRowVector& rv)
+  : MArray2<Complex> (1, rv.length (), 0.0)
+{
+  for (int i = 0; i < rv.length (); i++)
+    elem (0, i) = rv.elem (i);
+}
+
+ComplexMatrix::ComplexMatrix (const ComplexColumnVector& cv)
+  : MArray2<Complex> (cv.length (), 1, 0.0)
+{
+  for (int i = 0; i < cv.length (); i++)
+    elem (i, 0) = cv.elem (i);
+}
+
 ComplexMatrix::ComplexMatrix (const ComplexDiagMatrix& a)
   : MArray2<Complex> (a.rows (), a.cols (), 0.0)
 {
   for (int i = 0; i < a.length (); i++)
     elem (i, i) = a.elem (i, i);
 }
 
 // XXX FIXME XXX -- could we use a templated mixed-type copy function
diff --git a/liboctave/CMatrix.h b/liboctave/CMatrix.h
--- a/liboctave/CMatrix.h
+++ b/liboctave/CMatrix.h
@@ -48,18 +48,22 @@ public:
  
   ComplexMatrix (void) : MArray2<Complex> () { }
   ComplexMatrix (int r, int c) : MArray2<Complex> (r, c) { }
   ComplexMatrix (int r, int c, const Complex& val)
     : MArray2<Complex> (r, c, val) { }
   ComplexMatrix (const Matrix& a);
   ComplexMatrix (const MArray2<Complex>& a) : MArray2<Complex> (a) { }
   ComplexMatrix (const ComplexMatrix& a) : MArray2<Complex> (a) { }
+  ComplexMatrix (const RowVector& rv);
+  ComplexMatrix (const ColumnVector& cv);
   ComplexMatrix (const DiagMatrix& a);
   //  ComplexMatrix (const MDiagArray2<Complex>& a) : MArray2<Complex> (a) { }
+  ComplexMatrix (const ComplexRowVector& rv);
+  ComplexMatrix (const ComplexColumnVector& cv);
   ComplexMatrix (const ComplexDiagMatrix& a);
 
   ComplexMatrix (const charMatrix& a);
 
   ComplexMatrix& operator = (const ComplexMatrix& a)
     {
       MArray2<Complex>::operator = (a);
       return *this;
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,22 @@
+Sat Jul 27 02:54:44 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* dMatrix.cc (Matrix::Matrix (const RowVector&),
+	Matrix::Matrix (const ColumnVector&)): New constructors.
+
+	* CMatrix.cc (ComplexMatrix::ComplexMatrix (const RowVector&),
+	ComplexMatrix::ComplexMatrix (const ColumnVector&),
+	ComplexMatrix::ComplexMatrix (const ComplexRowVector&),
+	ComplexMatrix::ComplexMatrix (const ComplexColumnVector&)):
+	New constructors.
+
+	* chMatrix.cc (charMatrix::charMatrix (const string_vector&)):
+	New constructor.
+
 Wed Jul 24 16:39:16 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* LSODE.cc (do_integrate): Check to make sure that the state and
 	derivative vectors are the same size.
 	* DASSL.cc (do_integrate): Likewise.
 
 Sun Jul 14 17:30:37 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
diff --git a/liboctave/chMatrix.cc b/liboctave/chMatrix.cc
--- a/liboctave/chMatrix.cc
+++ b/liboctave/chMatrix.cc
@@ -34,16 +34,17 @@ Software Foundation, 59 Temple Place - S
 
 #include <string>
 
 #include <iostream.h>
 
 // #include <sys/types.h>  // XXX FIXME XXX
 
 #include "lo-error.h"
+#include "str-vec.h"
 #include "mx-base.h"
 #include "mx-inlines.cc"
 
 // charMatrix class.
 
 charMatrix::charMatrix (const char *s)
   : MArray2<char> ((s ? 1 : 0), (s ? strlen (s) : 0))
 {
@@ -55,16 +56,28 @@ charMatrix::charMatrix (const char *s)
 charMatrix::charMatrix (const string& s)
   : MArray2<char> (1, s.length ())
 {
   int nc = cols ();
   for (int i = 0; i < nc; i++)
     elem (0, i) = s[i];
 }
 
+charMatrix::charMatrix (const string_vector& s)
+  : MArray2<char> (s.length (), s.max_length ())
+{
+  for (int i = 0; i < nr; i++)
+    {
+      int nc = s[i].length ();
+
+      for (int j = 0; j < nc; j++)
+	elem (i, j) = s[i][j];
+    }
+}
+
 int
 charMatrix::operator == (const charMatrix& a) const
 {
   if (rows () != a.rows () || cols () != a.cols ())
     return 0;
 
   return equal (data (), a.data (), length ());
 }
diff --git a/liboctave/chMatrix.h b/liboctave/chMatrix.h
--- a/liboctave/chMatrix.h
+++ b/liboctave/chMatrix.h
@@ -30,31 +30,33 @@ Software Foundation, 59 Temple Place - S
 // For FILE...
 #include <cstdio>
 
 #include <string>
 
 #include "MArray2.h"
 
 #include "mx-defs.h"
+#include "str-vec.h"
 
 class
 charMatrix : public MArray2<char>
 {
 friend class ComplexMatrix;
 
 public:
 
   charMatrix (void) : MArray2<char> () { }
   charMatrix (int r, int c) : MArray2<char> (r, c) { }
   charMatrix (int r, int c, char val) : MArray2<char> (r, c, val) { }
   charMatrix (const MArray2<char>& a) : MArray2<char> (a) { }
   charMatrix (const charMatrix& a) : MArray2<char> (a) { }
   charMatrix (const char *s);
   charMatrix (const string& s);
+  charMatrix (const string_vector& s);
 
   charMatrix& operator = (const charMatrix& a)
     {
       MArray2<char>::operator = (a);
       return *this;
     }
 
   int operator == (const charMatrix& a) const;
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -104,16 +104,30 @@ extern "C"
  
   int F77_FCN (qzval, QZVAL) (const int&, const int&, double*,
 			      double*, double*, double*, double*,
 			      const long&, double*);
 }
 
 // Matrix class.
 
+Matrix::Matrix (const RowVector& rv)
+  : MArray2<double> (1, rv.length (), 0.0)
+{
+  for (int i = 0; i < rv.length (); i++)
+    elem (0, i) = rv.elem (i);
+}
+
+Matrix::Matrix (const ColumnVector& cv)
+  : MArray2<double> (cv.length (), 1, 0.0)
+{
+  for (int i = 0; i < cv.length (); i++)
+    elem (i, 0) = cv.elem (i);
+}
+
 Matrix::Matrix (const DiagMatrix& a)
   : MArray2<double> (a.rows (), a.cols (), 0.0)
 {
   for (int i = 0; i < a.length (); i++)
     elem (i, i) = a.elem (i, i);
 }
 
 // XXX FIXME XXX -- could we use a templated mixed-type copy function
diff --git a/liboctave/dMatrix.h b/liboctave/dMatrix.h
--- a/liboctave/dMatrix.h
+++ b/liboctave/dMatrix.h
@@ -50,16 +50,18 @@ friend class SVD;
 
 public:
 
   Matrix (void) : MArray2<double> () { }
   Matrix (int r, int c) : MArray2<double> (r, c) { }
   Matrix (int r, int c, double val) : MArray2<double> (r, c, val) { }
   Matrix (const MArray2<double>& a) : MArray2<double> (a) { }
   Matrix (const Matrix& a) : MArray2<double> (a) { }
+  Matrix (const RowVector& rv);
+  Matrix (const ColumnVector& cv);
   //  Matrix (const MDiagArray2<double>& a) : MArray2<double> (a) { }
   Matrix (const DiagMatrix& a);
 
   Matrix (const charMatrix& a);
 
   Matrix& operator = (const Matrix& a)
     {
       MArray2<double>::operator = (a);
