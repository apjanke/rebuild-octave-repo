# HG changeset patch
# User jwe
# Date 1125415230 0
#      Tue Aug 30 15:20:30 2005 +0000
# Node ID 2f51d6d65fb2b1b77ec7d69c1cff8e62c0bb730d
# Parent  a42806a03f8fd6a62cd7aeb79e008687f2b3d5bb
[project @ 2005-08-30 15:20:30 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2005-08-30  John W. Eaton  <jwe@octave.org>
+
+	* ov-struct.cc (octave_struct::load_ascii,
+	octave_struct::load_binary, octave_struct::load_hdf5): Try harder
+	to read old-style files correctly.
+
 2005-08-25  David Bateman <dbateman@free.fr>
 
         * OPERATORS/op-sm-m.cc, OPERATORS/op-sm-cm.cc, OPERATORS/op-scm-m.cc,
 	OPERATORS/op-scm-cm.cc, OPERATORS/op-m-sm.cc, OPERATORS/op-m-scm.cc,
 	OPERATORS/op-cm-sm.cc, OPERATORS/op-cm-scm.cc: Use mixed matrix/sparse
 	multiply operator rather than casting sparse to matrix.
 
 2005-07-18  John W. Eaton  <jwe@octave.org>
diff --git a/src/ov-struct.cc b/src/ov-struct.cc
--- a/src/ov-struct.cc
+++ b/src/ov-struct.cc
@@ -1021,25 +1021,30 @@ octave_struct::load_ascii (std::istream&
 	      // recurse to read cell elements
 	      std::string nm
 		= read_ascii_data (is, std::string (), dummy, t2, count);
 
 	      if (!is)
 		break;
 
 	      // Try for some backward compatibility...
-	      Cell tcell = t2.is_cell () ? t2.cell_value () : Cell (t2);
-
-	      if (error_state)
+	      if (t2.is_cell () && t2.length() > 1)
+		m.assign (nm, t2);
+	      else
 		{
-		  error ("load: internal error loading struct elements");
-		  return false;
+		  Cell tcell = t2.is_cell () ? t2.cell_value () : Cell (t2);
+
+		  if (error_state)
+		    {
+		      error ("load: internal error loading struct elements");
+		      return false;
+		    }
+
+		  m.assign (nm, tcell);
 		}
-
-	      m.assign (nm, tcell);
 	    }
 
 	  if (is) 
 	    map = m;
 	  else
 	    {
 	      error ("load: failed to load structure");
 	      success = false;
@@ -1106,25 +1111,30 @@ octave_struct::load_binary (std::istream
 	  // recurse to read cell elements
 	  std::string nm = read_binary_data (is, swap, fmt, std::string (), 
 					     dummy, t2, doc);
 
 	  if (!is)
 	    break;
 
 	  // Try for some backward compatibility...
-	  Cell tcell = t2.is_cell () ? t2.cell_value () : Cell (t2);
-
-	  if (error_state)
+	  if (t2.is_cell () && t2.length() > 1)
+	    m.assign (nm, t2);
+	  else
 	    {
-	      error ("load: internal error loading struct elements");
-	      return false;
+	      Cell tcell = t2.is_cell () ? t2.cell_value () : Cell (t2);
+ 
+	      if (error_state)
+		{
+		  error ("load: internal error loading struct elements");
+		  return false;
+		}
+
+	      m.assign (nm, tcell);
 	    }
-
-	  m.assign (nm, tcell);
 	}
 
       if (is) 
 	map = m;
       else
 	{
 	  error ("load: failed to load structure");
 	  success = false;
@@ -1192,26 +1202,31 @@ octave_struct::load_hdf5 (hid_t loc_id, 
 #else
   while ((retval2 = H5Giterate (loc_id, name, &current_item,
 				hdf5_read_next_data, &dsub)) > 0)
 #endif
     {
       octave_value t2 = dsub.tc;
 
       // Try for some backward compatibility...
-      Cell tcell = t2.is_cell () ? t2.cell_value () : Cell (t2);
-
-      if (error_state)
+      if (t2.is_cell () && t2.length() > 1)
+	m.assign (dsub.name, t2);
+      else
 	{
-	  error ("load: internal error loading struct elements");
-	  return false;
+	  Cell tcell = t2.is_cell () ? t2.cell_value () : Cell (t2);
+ 
+	  if (error_state)
+	    {
+	      error ("load: internal error loading struct elements");
+	      return false;
+	    }
+
+	  m.assign (dsub.name, tcell);
 	}
 
-      m.assign (dsub.name, tcell);
-
       if (have_h5giterate_bug)
 	current_item++;  // H5Giterate returned the last index processed
     }
 
   if (retval2 >= 0)
     {
       map = m;
       retval = true;
