# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1217343703 -7200
#      Tue Jul 29 17:01:43 2008 +0200
# Node ID 23c248d415b570b13723e3a9af39ad8973627b4d
# Parent  21904fe299c82174c93d650d67920fec685f4384
Various doc fixes. Readd cellidx

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,10 +1,13 @@
 2008-07-29  David Bateman  <dbateman@free.fr>
 
+	* interpreter/numbers.txi, interpreter/plot.txi,
+	interpreter/quad.txi: Miscellaneous documentation fixes.
+
 	* control.txi, finance.txi, quaternion.txi: Delete.
 	* octave.texi: Remove all references to the above.
 	* Makefile.in: ditto.
 
 2008-07-28  David Bateman  <dbateman@free.fr>
 
 	* interpreter/arith.txi: Document reallog, realpow and realsqrt.
 	* interpreter/dbug.txi: Document the means of setting a breakpoint
diff --git a/doc/interpreter/numbers.txi b/doc/interpreter/numbers.txi
--- a/doc/interpreter/numbers.txi
+++ b/doc/interpreter/numbers.txi
@@ -676,48 +676,49 @@ values where a mixed operation such as
 single (1) + 1
     @result{} 2
 @end example
 
 @noindent
 returns a single precision value. The mixed operations that are valid
 and their returned data types are
 
-@multitable @columnfraction .2 .3 .3 .2
+@multitable @columnfractions .2 .3 .3 .2
 @item @tab Mixed Operation @tab  Result @tab 
 @item @tab double OP single @tab single @tab
 @item @tab double OP integer @tab integer @tab
 @item @tab double OP char @tab double @tab
 @item @tab double OP logical @tab double @tab
 @item @tab single OP integer @tab integer @tab
 @item @tab single OP char @tab single @tab
 @item @tab single OP logical @tab single @tab
+@end multitable
 
 The same logic applies to functions with mixed arguments such as
 
 @example
 min (single (1), 0)
-   @result 0
+   @result{} 0
 @end example
 
 @noindent
 where the returned value is single precision.
 
 In the case of mixed type indexed assignments, the type is not
 changed. For example
 
 @example
 x = ones (2, 2);
 x (1, 1) = single (2)
     @result{} x = 2   1
-            1   1
+           1   1
 @end example
 
 @noindent
-where @code{x} remains of the double precision. 
+where @code{x} remains of the double precision type. 
 
 @node Predicates for Numeric Objects
 @section Predicates for Numeric Objects
 
 Since the type of a variable may change during the execution of a
 program, it can be necessary to type checking at run-time. Doing this
 also allows you to change the behaviour of a function depending on the
 type of the input. As an example, this naive implementation of @code{abs}
diff --git a/doc/interpreter/plot.txi b/doc/interpreter/plot.txi
--- a/doc/interpreter/plot.txi
+++ b/doc/interpreter/plot.txi
@@ -176,16 +176,20 @@ plot.
 
 @DOCSTRING(axis)
 
 Similarly the axis limits of the colormap can be changed with the caxis
 function.
 
 @DOCSTRING(caxis)
 
+@menu
+* Two-dimensional Function Plotting::
+@end menu
+
 @node Two-dimensional Function Plotting
 @subsubsection Two-dimensional Function Plotting
 
 Octave can plot a function from a function handle inline function or
 string defining the function without the user needing to explicitly
 create the data to be plotted. The function @code{fplot} also generates
 two-dimensional plots with linear axes using a function name and limits
 for the range of the x-coordinate instead of the x and y data.  For
@@ -279,18 +283,22 @@ three-dimensional plots.
 @DOCSTRING(ndgrid)
 
 @DOCSTRING(plot3)
 
 @DOCSTRING(view)
 
 @DOCSTRING(shading)
 
-@node Two-dimensional Function Plotting
-@subsubsection Two-dimensional Function Plotting
+@menu
+* Three-dimensional Function Plotting::
+@end menu
+
+@node Three-dimensional Function Plotting
+@subsubsection Three-dimensional Function Plotting
 
 @DOCSTRING(ezplot3)
 
 @DOCSTRING(ezmesh)
 
 @DOCSTRING(ezmeshc)
 
 @DOCSTRING(ezsurf)
diff --git a/doc/interpreter/quad.txi b/doc/interpreter/quad.txi
--- a/doc/interpreter/quad.txi
+++ b/doc/interpreter/quad.txi
@@ -225,17 +225,17 @@ I = quadl("g", 0, 1)
       @result{} 0.30022
 @end example
 
 The above process can be simplified with the @code{dblquad} and
 @code{triplequad} functions for integrals over two and three
 variables. For example
 
 @example
-I =  dblquad (@(x, y) sin(pi.*x.*y).*sqrt(x.*y), 0, 1, 0, 1)
+I =  dblquad (@@(x, y) sin(pi.*x.*y).*sqrt(x.*y), 0, 1, 0, 1)
       @result{} 0.30022
 @end example
 
 @DOCSTRING(dblquad)
 
 @DOCSTRING(triplequad)
 
 The above mentioned approach works but is fairly slow, and that problem
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,10 +1,16 @@
 2008-07-29  David Bateman  <dbateman@free.fr>
 
+	* general/cellidx.m: reinclude from control toolbox, as used by
+	print command. Replace is_signal_list with iscellstr.
+	* general/quadqk.m, linear-algebra/planeror.m,
+	miscellaneous/namelengthmax.m, specfun/realpow.m: Miscellaneous
+	documentation fixes.
+
 	* control, finance, quaternion: Remove directories and all of the
 	files they contain.
 	* Makefile.in: Remove all references to the above directories.
 	* configure.in: ditto.
 
 2008-07-28  Ben Abbott <bpabbott@mac.com>
 
 	* plot/hold.m: Clarify help text.
diff --git a/scripts/general/cellidx.m b/scripts/general/cellidx.m
new file mode 100644
--- /dev/null
+++ b/scripts/general/cellidx.m
@@ -0,0 +1,100 @@
+## Copyright (C) 2000, 2004, 2005, 2006, 2007
+##               Auburn University.  All rights reserved.
+##
+## This file is part of Octave.
+##
+## Octave program is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 3 of the License, or (at
+## your option) any later version.
+##
+## Octave program is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+## General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
+## <http://www.gnu.org/licenses/>.
+
+## -*- texinfo -*-
+## @deftypefn {Function File} {[@var{idxvec}, @var{errmsg}] =} cellidx (@var{listvar}, @var{strlist})
+## Return indices of string entries in @var{listvar} that match strings
+## in @var{strlist}.
+##
+## Both @var{listvar} and @var{strlist} may be passed as strings or
+## string matrices.  If they are passed as string matrices, each entry
+## is processed by @code{deblank} prior to searching for the entries.
+##
+## The first output is the vector of indices in @var{listvar}.
+##
+## If @var{strlist} contains a string not in @var{listvar}, then
+## an error message is returned in @var{errmsg}.  If only one output
+## argument is requested, then @var{cellidx} prints @var{errmsg} to the
+## screen and exits with an error.
+## @end deftypefn
+
+function [idxvec,errmsg]  = cellidx (listvar, strlist)
+
+  if (nargin != 2)
+    print_usage ();
+  endif
+
+  if (ischar (strlist))
+    tmp = strlist;
+    strlist = {};
+    for kk = 1:rows(tmp)
+      strlist{kk} = deblank (tmp(kk,:));
+    endfor
+  endif
+
+  if (ischar (listvar))
+    tmp = listvar;
+    listvar = {};
+    for kk = 1:rows(tmp)
+      listvar{kk} = deblank (tmp(kk,:));
+    endfor
+  endif
+
+  ## initialize size of idxvec (for premature return)
+  idxvec = zeros (length(strlist), 1);
+
+  errmsg = "";
+  if (! iscellstr (listvar))
+    errmsg = "listvar must be a list of strings";
+  elseif (! iscellstr (strlist))
+    errmsg = "strlist must be a list of strings";
+  endif
+
+  if (length (errmsg))
+    if (nargout < 2)
+      error (errmsg);
+    else
+      return;
+    endif
+  endif
+
+  nsigs = length(listvar);
+  for idx = 1:length(strlist)
+    signame = strlist{idx};
+    for jdx = 1:nsigs
+      if (strcmp (signame, listvar{jdx}) )
+	if (idxvec(idx) != 0)
+	  warning ("Duplicate signal name %s (%d,%d)\n",
+		   listvar{jdx}, jdx, idxvec(idx));
+	else
+	  idxvec(idx) = jdx;
+	endif
+      endif
+    endfor
+    if (idxvec(idx) == 0)
+      errmsg = sprintf ("Did not find %s", signame);
+      if (nargout == 1)
+	error (errmsg);
+      else
+	break;
+      endif
+    endif
+  endfor
+
+endfunction
diff --git a/scripts/general/quadgk.m b/scripts/general/quadgk.m
--- a/scripts/general/quadgk.m
+++ b/scripts/general/quadgk.m
@@ -27,17 +27,17 @@
 ## Feb 2008} where all function evalutions at an iteration are
 ## calculated with a single call to @var{f}. Therefore the function
 ## @var{f} must be of the form @code{@var{f} (@var{x})} and accept
 ## vector values of @var{x} and return a vector of the same length
 ## representing the function evalutaions at the given values of @var{x}.
 ## The function @var{f} can be defined in terms of a function handle,
 ## inline function or string.
 ##
-## The bounds of the quadrature @code{[@var{a}, @var{b}] can be finite
+## The bounds of the quadrature @code{[@var{a}, @var{b}]} can be finite
 ## or infinite and contain weak end singularities. Variable
 ## transformation will be used to treat infinite intervals and weaken
 ## the singularities. For example
 ##
 ## @example
 ## quadgk(@@(x) 1 ./ (sqrt (x) .* (x + 1)), 0, Inf)
 ## @end example
 ##
diff --git a/scripts/linear-algebra/planerot.m b/scripts/linear-algebra/planerot.m
--- a/scripts/linear-algebra/planerot.m
+++ b/scripts/linear-algebra/planerot.m
@@ -16,17 +16,17 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{g}, @var{y}] =} planerot (@var{x})
 ## Given a two-element column vector, returns the
 ## @iftex
 ## @tex
-## $2\\times 2$ orthogonal matrix
+## $2 \times 2$ orthogonal matrix
 ## @end tex
 ## @end iftex
 ## @ifnottex
 ## 2 by 2 orthogonal matrix
 ## @end ifnottex
 ## @var{G} such that
 ## @code{@var{y} = @var{g} * @var{x}} and @code{@var{y}(2) = 0}.
 ## @seealso{givens}
diff --git a/scripts/miscellaneous/namelengthmax.m b/scripts/miscellaneous/namelengthmax.m
--- a/scripts/miscellaneous/namelengthmax.m
+++ b/scripts/miscellaneous/namelengthmax.m
@@ -19,17 +19,17 @@
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} namelengthmax ()
 ## Returns the matlab compatible maximum variable name length. Octave is
 ## capable of storing strings up to 
 ## @iftex
 ## @tex
 ## $2^{31} - 1$
 ## @end tex
-## @end iftext
+## @end iftex
 ## @ifnottex
 ## @code{2 ^ 31 - 1}
 ## @end ifnottex
 ## in length. However for matlab compatibility all variable, function
 ## and structure field names should be shorter than the length supplied by
 ## @code{namelengthmax}. In particular variables stored to a matlab file
 ## format will have their names truncated to this length.
 ## @end deftypefn
diff --git a/scripts/specfun/realpow.m b/scripts/specfun/realpow.m
--- a/scripts/specfun/realpow.m
+++ b/scripts/specfun/realpow.m
@@ -14,19 +14,19 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} realpow (@var{x}, @var{y})
 ## Return the element by element power operator. This is equivalent to
-## @code{@var{x} .^ @var{y}), except that if the return value
+## @code{@var{x} .^ @var{y}}, except that if the return value
 ## is complex @code{realpow} produces an error.
-## @seealso{log, reallog, realsqrt}
+## @seealso{pow, reallog, realsqrt}
 ## @end deftypefn
 
 function z = realpow (x, y)
   if (nargin != 2)
     print_usage ();
   else
     z = x .^ y;
     if (iscomplex (z))
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2008-07-29  David Bateman  <dbateman@free.fr>
+
+	* ov-flt-re-mat.cc (Fsingle): Documentation fix.
+
 2008-07-28  David Bateman  <dbateman@free.fr>
 
 	* error.cc (last_error_id, last_error_message, last_warning_id,
 	last_warning_message): New functions to return the error/warning
 	message and id without exposing the internal values.
 	* error.h  (last_error_id, last_error_message, last_warning_id,
 	last_warning_message): Declare them.
 	* DLD-FUNCTIONS/cellfun.cc (Fcellfun): Use them to pass the error
diff --git a/src/ov-flt-re-mat.cc b/src/ov-flt-re-mat.cc
--- a/src/ov-flt-re-mat.cc
+++ b/src/ov-flt-re-mat.cc
@@ -775,17 +775,17 @@ ARRAY_MAPPER (tan, FloatNDArray::dmapper
 ARRAY_MAPPER (tanh, FloatNDArray::dmapper, ::tanhf)
 ARRAY_MAPPER (finite, FloatNDArray::bmapper, xfinite)
 ARRAY_MAPPER (isinf, FloatNDArray::bmapper, xisinf)
 ARRAY_MAPPER (isna, FloatNDArray::bmapper, octave_is_NA)
 ARRAY_MAPPER (isnan, FloatNDArray::bmapper, xisnan)
 
 DEFUN (single, args, ,
   "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} {} double (@var{x})\n\
+@deftypefn {Built-in Function} {} single (@var{x})\n\
 Convert @var{x} to single precision type.\n\
 @end deftypefn")
 {
   // The OCTAVE_TYPE_CONV_BODY3 macro declares retval, so they go
   // inside their own scopes, and we don't declare retval here to
   // avoid a shadowed declaration warning.
 
   if (args.length () == 1)
