# HG changeset patch
# User jwe
# Date 822470957 0
#      Wed Jan 24 08:09:17 1996 +0000
# Node ID b17d014b6926c22d6dcb3cb687adfe24a3b381cc
# Parent  e090f89bf2f5f68fefc5062e91ecc59b1f663bc5
[project @ 1996-01-24 08:09:17 by jwe]
Initial revision

diff --git a/liboctave/dir-ops.cc b/liboctave/dir-ops.cc
new file mode 100644
--- /dev/null
+++ b/liboctave/dir-ops.cc
@@ -0,0 +1,116 @@
+// dir-ops.cc                                           -*- C++ -*-
+/*
+
+Copyright (C) 1996 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 2, or (at your option) any
+later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, write to the Free
+Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+
+*/
+
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include <cerrno>
+#include <cstring>
+
+#include "sysdir.h"
+
+#include "dir-ops.h"
+#include "str-vec.h"
+
+bool
+dir_entry::open (const string& n)
+{
+  fail = true;
+
+  if (! n.empty ())
+    name = n;
+
+  if (! name.empty ())
+    {
+      close ();
+
+      dir = opendir (name.c_str ());
+
+      if (dir)
+	fail = false;
+      else
+	errmsg = strerror (errno);
+    }
+  else
+    errmsg = "dir_entry::open: empty file name";
+
+  return ! fail;
+}
+
+string_vector
+dir_entry::read (void)
+{
+  string_vector dirlist;
+
+  if (ok ())
+    {
+      int count = 0;
+
+      struct dirent *dir_ent;
+
+      while ((dir_ent = readdir (dir)))
+	count++;
+
+      rewinddir (dir);
+
+      dirlist.resize (count);
+
+      for (int i = 0; i < count; i++)
+	{
+	  dir_ent = readdir (dir);
+
+	  if (dir_ent)
+	    dirlist[i] = dir_ent->d_name;
+	  else
+	    break;
+	}
+    }
+
+  return dirlist;
+}
+
+void
+dir_entry::close (void)
+{
+  if (dir)
+    closedir (dir);
+
+  dir = 0;
+}
+
+void
+dir_entry::copy (const dir_entry& de)
+{
+  name = de.name;
+  dir = de.dir;
+  fail = de.fail;
+  errmsg = de.errmsg;
+}
+
+/*
+;;; Local Variables: ***
+;;; mode: C++ ***
+;;; page-delimiter: "^/\\*" ***
+;;; End: ***
+*/
diff --git a/liboctave/dir-ops.h b/liboctave/dir-ops.h
new file mode 100644
--- /dev/null
+++ b/liboctave/dir-ops.h
@@ -0,0 +1,90 @@
+// dir-ops.h                                            -*- C++ -*-
+/*
+
+Copyright (C) 1996 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 2, or (at your option) any
+later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, write to the Free
+Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+
+*/
+
+#if !defined (octave_dir_ops_h)
+#define octave_dir_ops_h 1
+
+#include <string>
+
+#include "str-vec.h"
+
+struct DIR;
+
+class
+dir_entry
+{
+public:
+
+  dir_entry (const string& n = string ()) : name (n), dir (0)
+      {
+	if (! name.empty ())
+	  open ();
+      }
+
+  dir_entry (const dir_entry& d) { copy (d); }
+
+  dir_entry& operator = (const dir_entry& d)
+    {
+      copy (d);
+      return *this;
+    }
+
+  ~dir_entry (void) { close (); }
+
+  bool open (const string& = string ());
+
+  string_vector read (void);
+
+  void close (void);
+
+  bool ok (void) const { return dir && ! fail; }
+
+  operator void* () const { return ok () ? (void *) -1 : (void *) 0; }
+
+  string error (void) const { return ok () ? string () : errmsg; }
+
+private:
+
+  // Name of the directory.
+  string name;
+
+  // A pointer to the contents of the directory.
+  DIR *dir;
+
+  // TRUE means the open for this directory failed.
+  bool fail;
+
+  // If a failure occurs, this contains the system error text.
+  string errmsg;
+
+  void copy (const dir_entry&);
+};
+
+#endif
+
+/*
+;;; Local Variables: ***
+;;; mode: C++ ***
+;;; page-delimiter: "^/\\*" ***
+;;; End: ***
+*/
