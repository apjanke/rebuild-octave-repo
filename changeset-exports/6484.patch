# HG changeset patch
# User jwe
# Date 1175656937 0
#      Wed Apr 04 03:22:17 2007 +0000
# Node ID 1ece41c144a69df4d85c8fae5cd16129419883e8
# Parent  d00da2148c53ed22c8de5a468e100ff36eae038c
[project @ 2007-04-04 03:22:16 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,12 +1,19 @@
 2007-04-03  John W. Eaton  <jwe@octave.org>
 
+	* DLD-FUNCTIONS/urlwrite.cc (Furlwrite, Furlread):
+	Use && for logical, not &.
+
+	* DLD-FUNCTIONS/qr.cc (Fqr): Clarify nargin check.
+
 	* error.cc (Frethrow): Add braces to avoid ambiguous if/else.
 	* oct-stream.cc (octave_scan<>): Likewise.
+	* DLD-FUNCTIONS/colamd.cc (Fetree): Likewise.
+	* DLD-FUNCTIONS/sort.cc (mx_sort, mx_sort_indexed): Likewise.
 
 	* ov-fcn-handle.cc (make_fcn_handle): Pass ultimate parent
 	function name to lookup_function.
 
 2007-03-29  John W. Eaton  <jwe@octave.org>
 
 	* DLD-FUNCTIONS/filter.cc (filter): Fix typo in doc string.
 	From Utkarsh Upadhyay <musically.ut@gmail.com>.
diff --git a/src/DLD-FUNCTIONS/__glpk__.cc b/src/DLD-FUNCTIONS/__glpk__.cc
--- a/src/DLD-FUNCTIONS/__glpk__.cc
+++ b/src/DLD-FUNCTIONS/__glpk__.cc
@@ -252,17 +252,18 @@ glpk (int sense, int n, int m, double *c
       lpx_set_row_bnds (lp, i+1, typx, b[i], b[i]);
 
     }
 
   lpx_load_matrix (lp, nz, rn, cn, a);
 
   if (save_pb)
     {
-      if (lpx_write_cpxlp (lp, "outpb.lp") != 0)
+      static char tmp[] = "outpb.lp";
+      if (lpx_write_cpxlp (lp, tmp) != 0)
 	{
 	  error ("__glpk__: unable to write problem");
 	  longjmp (mark, -1);
 	}
     }
 
   //-- scale the problem data (if required)
   //-- if (scale && (!presol || method == 1)) lpx_scale_prob(lp);
@@ -303,17 +304,18 @@ glpk (int sense, int n, int m, double *c
     case 'T':
       errnum = lpx_interior(lp);
       break;
 
     default:
 #ifdef GLPK_PRE_4_14
       insist (method != method);
 #else
-      glpk_fault_hook (0, "method != method");
+      static char tmp[] = "method != method";
+      glpk_fault_hook (0, tmp);
 #endif
     }
 
   /*  errnum assumes the following results:
       errnum = 0 <=> No errors
       errnum = 1 <=> Iteration limit exceeded.
       errnum = 2 <=> Numerical problems with basis matrix.
   */
diff --git a/src/DLD-FUNCTIONS/cellfun.cc b/src/DLD-FUNCTIONS/cellfun.cc
--- a/src/DLD-FUNCTIONS/cellfun.cc
+++ b/src/DLD-FUNCTIONS/cellfun.cc
@@ -215,17 +215,17 @@ cellfun (@@factorial, @{-1,2@},'ErrorHan
     {
       if (nargin == 3)
         {
           int d = args(2).nint_value () - 1;
 
           if (d < 0)
 	    error ("cellfun: third argument must be a postive integer");
 
-	  if (!error_state)
+	  if (! error_state)
             {
               NDArray result (f_args.dims ());
               for (octave_idx_type count = 0; count < k ; count++)
                 {
                   dim_vector dv = f_args.elem(count).dims ();
                   if (d < dv.length ())
 	            result(count) = static_cast<double> (dv(d));
                   else
@@ -269,20 +269,20 @@ cellfun (@@factorial, @{-1,2@},'ErrorHan
 	}
 
       if (! func)
 	error ("unknown function");
       else
 	{
 	  octave_value_list idx;
 	  octave_value_list inputlist;
-	  bool UniformOutput = true;
-	  bool haveErrorHandler = false;
+	  bool uniform_output = true;
+	  bool have_error_handler = false;
 	  std::string err_name;
-	  octave_function *ErrorHandler;
+	  octave_function *error_handler = 0;
 	  int offset = 1;
 	  int i = 1;
 	  OCTAVE_LOCAL_BUFFER (Cell, inputs, nargin);
 
 	  while (i < nargin)
 	    {
 	      if (args(i).is_string())
 		{
@@ -292,42 +292,42 @@ cellfun (@@factorial, @{-1,2@},'ErrorHan
 		      error ("cellfun: parameter value is missing");
 		      goto cellfun_err;
 		    }
 
 		  std::transform (arg.begin (), arg.end (), 
 				  arg.begin (), tolower);
 
 		  if (arg == "uniformoutput")
-		    UniformOutput = args(i++).bool_value();
+		    uniform_output = args(i++).bool_value();
 		  else if (arg == "errorhandler")
 		    {
 		      if (args(i).is_function_handle () || 
 			  args(i).is_inline_function ())
 			{
-			  ErrorHandler = args(i).function_value ();
+			  error_handler = args(i).function_value ();
 
 			  if (error_state)
 			    goto cellfun_err;
 			}
 		      else if (args(i).is_string ())
 			{
 			  err_name = unique_symbol_name ("__cellfun_fcn_");
 			  std::string fname = "function y = ";
 			  fname.append (fcn_name);
 			  fname.append ("(x) y = ");
-			  ErrorHandler = extract_function (args(i), "cellfun", 
-							   err_name, fname,
-							   "; endfunction");
+			  error_handler = extract_function (args(i), "cellfun", 
+							    err_name, fname,
+							    "; endfunction");
 			}
 
-		      if (!ErrorHandler)
+		      if (! error_handler)
 			goto cellfun_err;
 
-		      haveErrorHandler = true;
+		      have_error_handler = true;
 		      i++;
 		    }
 		  else
 		    {
 		      error ("cellfun: unrecognized parameter %s", 
 			     arg.c_str());
 		      goto cellfun_err;
 		    }
@@ -343,44 +343,44 @@ cellfun (@@factorial, @{-1,2@},'ErrorHan
 
 		    }
 		  i++;
 		}
 	    }
 
 	  inputlist.resize(nargin-offset);
 
-	  if (haveErrorHandler)
+	  if (have_error_handler)
 	    buffer_error_messages++;
 
-	  if (UniformOutput)
+	  if (uniform_output)
 	    {
 	      retval.resize(nargout);
 
 	      for (octave_idx_type count = 0; count < k ; count++)
 		{
 		  for (int j = 0; j < nargin-offset; j++)
 		    inputlist(j) = inputs[j](count);
 
 		  octave_value_list tmp = feval (func, inputlist, nargout);
 
-		  if (error_state && haveErrorHandler)
+		  if (error_state && have_error_handler)
 		    {
 		      octave_value_list errtmp = 
 			Flasterr (octave_value_list (), 2);
 
 		      Octave_map msg;
 		      msg.assign ("identifier", errtmp(1));
 		      msg.assign ("message", errtmp(0));
 		      msg.assign ("index", octave_value(double (count)));
 		      octave_value_list errlist = inputlist;
 		      errlist.prepend (msg);
 		      buffer_error_messages--;
 		      error_state = 0;
-		      tmp = feval (ErrorHandler, errlist, nargout);
+		      tmp = feval (error_handler, errlist, nargout);
 		      buffer_error_messages++;
 
 		      if (error_state)
 			goto cellfun_err;
 		    }
 
 		  if (tmp.length() < nargout)
 		    {
@@ -436,30 +436,30 @@ cellfun (@@factorial, @{-1,2@},'ErrorHan
 
 	      for (octave_idx_type count = 0; count < k ; count++)
 		{
 		  for (int j = 0; j < nargin-offset; j++)
 		    inputlist(j) = inputs[j](count);
 
 		  octave_value_list tmp = feval (func, inputlist, nargout);
 
-		  if (error_state && haveErrorHandler)
+		  if (error_state && have_error_handler)
 		    {
 		      octave_value_list errtmp = 
 			Flasterr (octave_value_list (), 2);
 
 		      Octave_map msg;
 		      msg.assign ("identifier", errtmp(1));
 		      msg.assign ("message", errtmp(0));
 		      msg.assign ("index", octave_value(double (count)));
 		      octave_value_list errlist = inputlist;
 		      errlist.prepend (msg);
 		      buffer_error_messages--;
 		      error_state = 0;
-		      tmp = feval (ErrorHandler, errlist, nargout);
+		      tmp = feval (error_handler, errlist, nargout);
 		      buffer_error_messages++;
 
 		      if (error_state)
 			goto cellfun_err;
 		    }
 
 		  if (tmp.length() < nargout)
 		    {
diff --git a/src/DLD-FUNCTIONS/colamd.cc b/src/DLD-FUNCTIONS/colamd.cc
--- a/src/DLD-FUNCTIONS/colamd.cc
+++ b/src/DLD-FUNCTIONS/colamd.cc
@@ -688,28 +688,29 @@ permutations on the tree.\n\
 	}
       else
 	{
 	  error ("etree: must be called with a sparse matrix");
 	  return retval;
 	}
 
       if (nargin == 2)
-	if (args(1).is_string ())
-	  {
-	    std::string str = args(1).string_value ();
-	    if (str.find("C") == 0 || str.find("c") == 0)
-	      is_sym = false;
-	  }
-	else
-	  {
-	    error ("etree: second argument must be a string");
-	    return retval;
-	  }
-
+	{
+	  if (args(1).is_string ())
+	    {
+	      std::string str = args(1).string_value ();
+	      if (str.find ("C") == 0 || str.find ("c") == 0)
+		is_sym = false;
+	    }
+	  else
+	    {
+	      error ("etree: second argument must be a string");
+	      return retval;
+	    }
+	}
       // column elimination tree post-ordering (reuse variables)
       OCTAVE_LOCAL_BUFFER (octave_idx_type, etree, n_col + 1);
       
 
       if (is_sym)
 	{
 	  if (n_row != n_col)
 	    {
diff --git a/src/DLD-FUNCTIONS/fftw.cc b/src/DLD-FUNCTIONS/fftw.cc
--- a/src/DLD-FUNCTIONS/fftw.cc
+++ b/src/DLD-FUNCTIONS/fftw.cc
@@ -137,17 +137,18 @@ the wisdom is lost.\n\
 	    {
 	      std::string arg1 = args(1).string_value ();
 	      if (!error_state)
 		{
 		  if (arg0 == "planner")
 		    {
 		      std::transform (arg1.begin (), arg1.end (), 
 				      arg1.begin (), tolower);
-		      octave_fftw_planner::FftwMethod meth;
+		      octave_fftw_planner::FftwMethod meth
+			= octave_fftw_planner::UNKNOWN;
 
 		      if (arg1 == "estimate")
 			meth = fftw_planner.method
 			  (octave_fftw_planner::ESTIMATE);
 		      else if (arg1 == "measure")
 			meth = fftw_planner.method 
 			  (octave_fftw_planner::MEASURE);
 		      else if (arg1 == "patient")
diff --git a/src/DLD-FUNCTIONS/qr.cc b/src/DLD-FUNCTIONS/qr.cc
--- a/src/DLD-FUNCTIONS/qr.cc
+++ b/src/DLD-FUNCTIONS/qr.cc
@@ -148,17 +148,17 @@ The permuted @code{qr} factorization @co
 factorization allows the construction of an orthogonal basis of\n\
 @code{span (a)}.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
-  if (nargin != 1 && nargin != 2 || nargout > 3)
+  if (nargin < 1 || nargin > 2 || nargout > 3)
     {
       print_usage ();
       return retval;
     }
 
   octave_value arg = args(0);
 
   int arg_is_empty = empty_arg ("qr", arg.rows (), arg.columns ());
diff --git a/src/DLD-FUNCTIONS/sort.cc b/src/DLD-FUNCTIONS/sort.cc
--- a/src/DLD-FUNCTIONS/sort.cc
+++ b/src/DLD-FUNCTIONS/sort.cc
@@ -342,36 +342,38 @@ mx_sort (ArrayN<double> &m, int dim, sor
 	    p[i] = IFloatFlip (p[i]);
 
 	  // There are two representations of NaN.  One will be
 	  // sorted to the beginning of the vector and the other
 	  // to the end.  If it will be sorted incorrectly, fix
 	  // things up.
 
 	  if (lo_ieee_signbit (octave_NaN))
-	    if (mode == UNDEFINED || mode == ASCENDING)
-	      {
-		octave_idx_type i = 0;
-		double *vtmp = reinterpret_cast<double *> (p);
-		while (xisnan (vtmp[i++]) && i < ns);
-		for (octave_idx_type l = 0; l < ns - i + 1; l++)
-		  vtmp[l] = vtmp[l+i-1];
-		for (octave_idx_type l = ns - i + 1; l < ns; l++)
-		  vtmp[l] = octave_NaN;
-	      }
-	    else
-	      {
-		octave_idx_type i = ns;
-		double *vtmp = reinterpret_cast<double *> (p);
-		while (xisnan (vtmp[--i]) && i > 0);
-		for (octave_idx_type l = i; l >= 0; l--)
-		  vtmp[l-i+ns-1] = vtmp[l];
-		for (octave_idx_type l = 0; l < ns - i - 1; l++)
-		  vtmp[l] = octave_NaN;
-	      }
+	    {
+	      if (mode == UNDEFINED || mode == ASCENDING)
+		{
+		  octave_idx_type i = 0;
+		  double *vtmp = reinterpret_cast<double *> (p);
+		  while (xisnan (vtmp[i++]) && i < ns);
+		  for (octave_idx_type l = 0; l < ns - i + 1; l++)
+		    vtmp[l] = vtmp[l+i-1];
+		  for (octave_idx_type l = ns - i + 1; l < ns; l++)
+		    vtmp[l] = octave_NaN;
+		}
+	      else
+		{
+		  octave_idx_type i = ns;
+		  double *vtmp = reinterpret_cast<double *> (p);
+		  while (xisnan (vtmp[--i]) && i > 0);
+		  for (octave_idx_type l = i; l >= 0; l--)
+		    vtmp[l-i+ns-1] = vtmp[l];
+		  for (octave_idx_type l = 0; l < ns - i - 1; l++)
+		    vtmp[l] = octave_NaN;
+		}
+	    }
 
 	  p += ns;
 	}
     }
   else
     {
       OCTAVE_LOCAL_BUFFER (uint64_t, vi, ns);
 
@@ -401,34 +403,36 @@ mx_sort (ArrayN<double> &m, int dim, sor
 	    p[i*stride + offset] = IFloatFlip (vi[i]);
 	      
 	  // There are two representations of NaN. One will be
 	  // sorted to the beginning of the vector and the other
 	  // to the end. If it will be sorted to the beginning,
 	  // fix things up.
 
 	  if (lo_ieee_signbit (octave_NaN))
-	    if (mode == UNDEFINED || mode == ASCENDING)
-	      {
-		 octave_idx_type i = 0;
-		while (xisnan (v[i++*stride + offset]) && i < ns);
-		for (octave_idx_type l = 0; l < ns - i + 1; l++)
-		  v[l*stride + offset] = v[(l+i-1)*stride + offset];
-		for (octave_idx_type l = ns - i + 1; l < ns; l++)
-		  v[l*stride + offset] = octave_NaN;
-	      }
-	    else
-	      {
-		 octave_idx_type i = ns;
-		while (xisnan (v[--i*stride + offset]) && i > 0);
-		for (octave_idx_type l = i; l >= 0; l--)
-		  v[(l-i+ns-1)*stride + offset] = v[l*stride + offset];
-		for (octave_idx_type l = 0; l < ns - i - 1; l++)
-		  v[l*stride + offset] = octave_NaN;
-	      }
+	    {
+	      if (mode == UNDEFINED || mode == ASCENDING)
+		{
+		   octave_idx_type i = 0;
+		  while (xisnan (v[i++*stride + offset]) && i < ns);
+		  for (octave_idx_type l = 0; l < ns - i + 1; l++)
+		    v[l*stride + offset] = v[(l+i-1)*stride + offset];
+		  for (octave_idx_type l = ns - i + 1; l < ns; l++)
+		    v[l*stride + offset] = octave_NaN;
+		}
+	      else
+		{
+		   octave_idx_type i = ns;
+		  while (xisnan (v[--i*stride + offset]) && i > 0);
+		  for (octave_idx_type l = i; l >= 0; l--)
+		    v[(l-i+ns-1)*stride + offset] = v[l*stride + offset];
+		  for (octave_idx_type l = 0; l < ns - i - 1; l++)
+		    v[l*stride + offset] = octave_NaN;
+		}
+	    }
 	}
     }
 
   retval = m;
 
   return retval;
 }
 
@@ -504,52 +508,54 @@ mx_sort_indexed (ArrayN<double> &m, int 
 	  idx(i*stride + offset) = vi[i]->indx;
 	}
 
       // There are two representations of NaN.  One will be sorted
       // to the beginning of the vector and the other to the end.
       // If it will be sorted to the beginning, fix things up.
 
       if (lo_ieee_signbit (octave_NaN))
-	if (mode == UNDEFINED || mode == ASCENDING)
-	  {
-	    octave_idx_type i = 0;
-	    while (xisnan (v[i++*stride+offset]) && i < ns);
-	    OCTAVE_LOCAL_BUFFER (double, itmp, i - 1);
-	    for (octave_idx_type l = 0; l < i -1; l++)
-	      itmp[l] = idx(l*stride + offset);
-	    for (octave_idx_type l = 0; l < ns - i + 1; l++)
-	      {
-		v[l*stride + offset] = v[(l+i-1)*stride + offset];
-		idx(l*stride + offset) = idx((l+i-1)*stride + offset);
-	      }
-	    for (octave_idx_type k = 0, l = ns - i + 1; l < ns; l++, k++)
-	      {
-		v[l*stride + offset] = octave_NaN;
-		idx(l*stride + offset) = itmp[k];
-	      }
-	  }
-	else 
-	  {
-	     octave_idx_type i = ns;
-	    while (xisnan (v[--i*stride+offset]) && i > 0);
-	    OCTAVE_LOCAL_BUFFER (double, itmp, ns - i - 1);
-	    for (octave_idx_type l = 0; l < ns - i -1; l++)
-	      itmp[l] = idx((l+i+1)*stride + offset);
-	    for (octave_idx_type l = i; l >= 0; l--)
-	      {
-		v[(l-i+ns-1)*stride + offset] = v[l*stride + offset];
-		idx((l-i+ns-1)*stride + offset) = idx(l*stride + offset);
-	      }
-	    for (octave_idx_type k = 0, l = 0; l < ns - i - 1; l++, k++)
-	      {
-		v[l*stride + offset] = octave_NaN;
-		idx(l*stride + offset) = itmp[k];
-	      }
-	  }
+	{
+	  if (mode == UNDEFINED || mode == ASCENDING)
+	    {
+	      octave_idx_type i = 0;
+	      while (xisnan (v[i++*stride+offset]) && i < ns);
+	      OCTAVE_LOCAL_BUFFER (double, itmp, i - 1);
+	      for (octave_idx_type l = 0; l < i -1; l++)
+		itmp[l] = idx(l*stride + offset);
+	      for (octave_idx_type l = 0; l < ns - i + 1; l++)
+		{
+		  v[l*stride + offset] = v[(l+i-1)*stride + offset];
+		  idx(l*stride + offset) = idx((l+i-1)*stride + offset);
+		}
+	      for (octave_idx_type k = 0, l = ns - i + 1; l < ns; l++, k++)
+		{
+		  v[l*stride + offset] = octave_NaN;
+		  idx(l*stride + offset) = itmp[k];
+		}
+	    }
+	  else 
+	    {
+	      octave_idx_type i = ns;
+	      while (xisnan (v[--i*stride+offset]) && i > 0);
+	      OCTAVE_LOCAL_BUFFER (double, itmp, ns - i - 1);
+	      for (octave_idx_type l = 0; l < ns - i -1; l++)
+		itmp[l] = idx((l+i+1)*stride + offset);
+	      for (octave_idx_type l = i; l >= 0; l--)
+		{
+		  v[(l-i+ns-1)*stride + offset] = v[l*stride + offset];
+		  idx((l-i+ns-1)*stride + offset) = idx(l*stride + offset);
+		}
+	      for (octave_idx_type k = 0, l = 0; l < ns - i - 1; l++, k++)
+		{
+		  v[l*stride + offset] = octave_NaN;
+		  idx(l*stride + offset) = itmp[k];
+		}
+	    }
+	}
     }
 
   retval(1) = idx;
   retval(0) = m;
 
   return retval;
 }
 
diff --git a/src/DLD-FUNCTIONS/urlwrite.cc b/src/DLD-FUNCTIONS/urlwrite.cc
--- a/src/DLD-FUNCTIONS/urlwrite.cc
+++ b/src/DLD-FUNCTIONS/urlwrite.cc
@@ -308,17 +308,17 @@ urlwrite ('http://www.google.com/search'
       // FIXME: urlwrite should return full file path
       retval(0) = octave_env::make_absolute (filename, octave_env::getcwd ());
       //      retval(0) = filename;
       retval(1) = res == CURLE_OK;
       // return empty string if no error occured
       retval(2) = std::string (res == CURLE_OK ? "" : curl_easy_strerror (res));
     }
 
-  if (nargout < 2 & res != CURLE_OK)
+  if (nargout < 2 && res != CURLE_OK)
     error ("urlwrite: curl: %s", curl_easy_strerror (res));
 
 #else
   retval(2) = "urlwrite: not available in this version of Octave";
   retval(1) = 0;
   retval(0) = "";
 #endif
 
@@ -425,17 +425,17 @@ s = urlread ('http://www.google.com/sear
   if (nargout > 0)
     {
       retval(0) = stream.str ();
       retval(1) = res == CURLE_OK;
       // return empty string if no error occured
       retval(2) = std::string (res == CURLE_OK ? "" : curl_easy_strerror (res));
     }
 
-  if (nargout < 2 & res != CURLE_OK)
+  if (nargout < 2 && res != CURLE_OK)
     error ("urlread: curl: %s", curl_easy_strerror (res));
 
 #else
   retval(2) = "urlread: not available in this version of Octave";
   retval(1) = 0;
   retval(0) = "";
 #endif
 
