# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1271163389 -7200
#      Tue Apr 13 14:56:29 2010 +0200
# Node ID 189274f6c7c42dc037d77278ab2ef53579ccd2da
# Parent  40c58502a78b7fedfdeb27326f3a7bedf72dfaea
omissions from last patch

diff --git a/liboctave/CSparse.cc b/liboctave/CSparse.cc
--- a/liboctave/CSparse.cc
+++ b/liboctave/CSparse.cc
@@ -116,29 +116,18 @@ extern "C"
                            Complex*, const octave_idx_type&, octave_idx_type&);
 
   F77_RET_T
   F77_FUNC (zgtsv, ZGTSV) (const octave_idx_type&, const octave_idx_type&, Complex*, Complex*,
                            Complex*, Complex*, const octave_idx_type&, octave_idx_type&);
 }
 
 SparseComplexMatrix::SparseComplexMatrix (const SparseMatrix& a)
-  : MSparse<Complex> (a.rows (), a.cols (), a.nnz ())
-{
-  octave_idx_type nc = cols ();
-  octave_idx_type nz = a.nnz ();
-
-  for (octave_idx_type i = 0; i < nc + 1; i++)
-    cidx (i) = a.cidx (i);
-
-  for (octave_idx_type i = 0; i < nz; i++)
-    {
-      data (i) = Complex (a.data (i));
-      ridx (i) = a.ridx (i);
-    }
+  : MSparse<Complex> (a)
+{
 }
 
 SparseComplexMatrix::SparseComplexMatrix (const SparseBoolMatrix& a)
   : MSparse<Complex> (a.rows (), a.cols (), a.nnz ())
 {
   octave_idx_type nc = cols ();
   octave_idx_type nz = a.nnz ();
 
diff --git a/liboctave/Sparse.h b/liboctave/Sparse.h
--- a/liboctave/Sparse.h
+++ b/liboctave/Sparse.h
@@ -99,27 +99,16 @@ protected:
       nzmx (a.nzmx), nrows (a.nrows), ncols (a.ncols), count (1)
       {
         octave_idx_type nz = a.nnz ();
         copy_or_memcpy (nz, a.d, d);
         copy_or_memcpy (nz, a.r, r);
         copy_or_memcpy (ncols + 1, a.c, c);
       }
  
-    template <class U>
-    SparseRep (const Sparse<U>::SparseRep& a)
-      : d (new T [a.nzmx]), r (new octave_idx_type [a.nzmx]), c (new octave_idx_type [a.ncols + 1]), 
-      nzmx (a.nzmx), nrows (a.nrows), ncols (a.ncols), count (1)
-      {
-        octave_idx_type nz = a.nnz ();
-        std::copy (a.d, a.d + nz, d);
-        copy_or_memcpy (nz, a.r, r);
-        copy_or_memcpy (ncols + 1, a.c, c);
-      }
- 
     ~SparseRep (void) { delete [] d; delete [] r; delete [] c; }
 
     octave_idx_type length (void) const { return nzmx; }
 
     octave_idx_type nnz (void) const { return c [ncols]; }
 
     T& elem (octave_idx_type _r, octave_idx_type _c);
 
@@ -201,19 +190,26 @@ public:
     : rep (new typename Sparse<T>::SparseRep (dv(0), dv(1), nz)),
     dimensions (dv) { }
 
   Sparse (octave_idx_type nr, octave_idx_type nc, octave_idx_type nz)
     : rep (new typename Sparse<T>::SparseRep (nr, nc, nz)),
       dimensions (dim_vector (nr, nc)) { }
 
   // Type conversion case. Preserves capacity ().
-  template <class U> Sparse (const Sparse<U>& a)
-    : rep (new typename Sparse<T>::SparseRep (a.rep)),
-    dimensions (a.dimensions) { }
+  template <class U> 
+  Sparse (const Sparse<U>& a)
+    : rep (new typename Sparse<T>::SparseRep (a.rep->nrows, a.rep->ncols, a.rep->nzmx)),
+    dimensions (a.dimensions) 
+    { 
+      octave_idx_type nz = a.nnz ();
+      std::copy (a.rep->d, a.rep->d + nz, rep->d);
+      copy_or_memcpy (nz, a.rep->r, rep->r);
+      copy_or_memcpy (rep->ncols + 1, a.rep->c, rep->c);
+    }
 
   // No type conversion case.
   Sparse (const Sparse<T>& a)
     : rep (a.rep), dimensions (a.dimensions)
     {
       rep->count++;
     }
 
