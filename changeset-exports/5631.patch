# HG changeset patch
# User dbateman
# Date 1140639360 0
#      Wed Feb 22 20:16:00 2006 +0000
# Node ID 7171d19706df9cedee41b196bd6081f6eb94dc75
# Parent  512d0d11ae396e0e3bb79818f59e7ab9e5dfabea
[project @ 2006-02-22 20:15:06 by dbateman]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,21 @@
 2006-02-20  David Bateman  <dbateman@free.fr>
 
+	* ov.h (virtual bool is_sparse_type (bool)): New virtual function
+	* ov-base.h (bool is_sparse_type (bool)): New function
+	* ov-base-sparse.h (bool is_sparse_type (bool)): New function
+	* DLD-FUNCTIONS/ccolamd.cc, DLD-FUNCTION/colamd.cc, 
+	DLD-FUNCTIONS/__glpk__.cc, DLD-FUNCTIONS/splu.cc,
+	DLD-FUNCTIONS/sparse.cc, DLD-FUNCTIONS/matrix_type.cc, pt-mat.cc:
+	Replace us of 'arg.class_name () == "sparse"' with
+	'arg.is_sparse_type ()'
+	
+2006-02-20  David Bateman  <dbateman@free.fr>
+	
 	* pt-mat.cc (class tm_row_const): Add any_sparse bool variable.
 	(tm_row_const::tm_row_const_rep::do_init_element): Initialize
 	any_sparse variable if any matrice is sparse.
 	(class tm_const): Add any_sparse bool variable.
 	(tm_const::init): Initialize any_sparse variable.
 	(tree_matrix::rvalue): If any matrix is sparse use sparse matrix
 	as initial matrix for concatenation
 	* DLD-FUNCTIONS/matrix_type.cc: Add tests for new rectangular
diff --git a/src/DLD-FUNCTIONS/__glpk__.cc b/src/DLD-FUNCTIONS/__glpk__.cc
--- a/src/DLD-FUNCTIONS/__glpk__.cc
+++ b/src/DLD-FUNCTIONS/__glpk__.cc
@@ -445,47 +445,17 @@ You should be using using the @code{glpk
   Array<int> rn;
   Array<int> cn;
   ColumnVector a;
   volatile int mrowsA;
   volatile int nz = 0;
 
   //-- 2nd Input. A matrix containing the constraints coefficients.
   // If matrix A is NOT a sparse matrix
-  if( args(1).class_name () != "sparse")
-    {
-      Matrix A (args(1).matrix_value ()); // get the matrix
-
-      if (error_state)
-	{
-	  error ("__glpk__: invalid value of A");
-	  return retval;
-	}
-
-      mrowsA = A.rows ();
-      rn.resize (mrowsA*mrowsc+1);
-      cn.resize (mrowsA*mrowsc+1);
-      a.resize (mrowsA*mrowsc+1, 0.0);
-
-      for (int i = 0; i < mrowsA; i++)
-	{
-	  for (int j = 0; j < mrowsc; j++)
-	    {
-	      if (A(i,j) != 0)
-		{
-		  nz++;
-		  rn(nz) = i + 1;
-		  cn(nz) = j + 1;
-		  a(nz) = A(i,j);
-		}
-	    }
-	}
-
-    }
-  else
+  if (args(1).is_sparse_type ())
     {
       SparseMatrix A = args(1).sparse_matrix_value (); // get the sparse matrix
 
       if (error_state)
 	{
 	  error ("__glpk__: invalid value of A");
 	  return retval;
 	}
@@ -507,16 +477,46 @@ You should be using using the @code{glpk
 	for (octave_idx_type i = A.cidx(j); i < A.cidx(j+1); i++)
 	  {
 	    nz++;
 	    rn(nz) = A.ridx(i) + 1;
 	    cn(nz) = j + 1;
 	    a(nz) = A.data(i);
 	  }
     }
+  else
+    {
+      Matrix A (args(1).matrix_value ()); // get the matrix
+
+      if (error_state)
+	{
+	  error ("__glpk__: invalid value of A");
+	  return retval;
+	}
+
+      mrowsA = A.rows ();
+      rn.resize (mrowsA*mrowsc+1);
+      cn.resize (mrowsA*mrowsc+1);
+      a.resize (mrowsA*mrowsc+1, 0.0);
+
+      for (int i = 0; i < mrowsA; i++)
+	{
+	  for (int j = 0; j < mrowsc; j++)
+	    {
+	      if (A(i,j) != 0)
+		{
+		  nz++;
+		  rn(nz) = i + 1;
+		  cn(nz) = j + 1;
+		  a(nz) = A(i,j);
+		}
+	    }
+	}
+
+    }
 
   //-- 3rd Input. A column array containing the right-hand side value
   //	           for each constraint in the constraint matrix.
   Matrix B (args(2).matrix_value ());
 
   if (error_state)
     {
       error ("__glpk__: invalid value of b");
diff --git a/src/DLD-FUNCTIONS/ccolamd.cc b/src/DLD-FUNCTIONS/ccolamd.cc
--- a/src/DLD-FUNCTIONS/ccolamd.cc
+++ b/src/DLD-FUNCTIONS/ccolamd.cc
@@ -206,17 +206,17 @@ colamd, symamd, and other related orderi
 	    }
 	}
       
       octave_idx_type n_row, n_col, nnz;
       octave_idx_type *ridx, *cidx;
       SparseComplexMatrix scm;
       SparseMatrix sm;
 
-      if (args(0).class_name () == "sparse")
+      if (args(0).is_sparse_type ())
 	{
 	  if (args(0).is_complex_type ())
 	    {
 	      scm = args(0). sparse_complex_matrix_value ();
 	      n_row = scm.rows ();
 	      n_col = scm.cols ();
 	      nnz = scm.nzmax ();
 	      ridx = scm.xridx ();
@@ -442,17 +442,17 @@ colamd, symamd, and other related orderi
 	    }
 	}
       
       octave_idx_type n_row, n_col, nnz;
       octave_idx_type *ridx, *cidx;
       SparseMatrix sm;
       SparseComplexMatrix scm;
 
-      if (args(0).class_name () == "sparse")
+      if (args(0).is_sparse_type ())
 	{
 	  if (args(0).is_complex_type ())
 	    {
 	      scm = args(0).sparse_complex_matrix_value ();
 	      n_row = scm.rows ();
 	      n_col = scm.cols ();
 	      nnz = scm.nzmax ();
 	      ridx = scm.xridx ();
diff --git a/src/DLD-FUNCTIONS/colamd.cc b/src/DLD-FUNCTIONS/colamd.cc
--- a/src/DLD-FUNCTIONS/colamd.cc
+++ b/src/DLD-FUNCTIONS/colamd.cc
@@ -325,17 +325,17 @@ Ng, Oak Ridge National Laboratory. (see\
 	    }
 	}
       
       octave_idx_type n_row, n_col, nnz;
       octave_idx_type *ridx, *cidx;
       SparseComplexMatrix scm;
       SparseMatrix sm;
 
-      if (args(0).class_name () == "sparse")
+      if (args(0).is_sparse_type ())
 	{
 	  if (args(0).is_complex_type ())
 	    {
 	      scm = args(0). sparse_complex_matrix_value ();
 	      n_row = scm.rows ();
 	      n_col = scm.cols ();
 	      nnz = scm.nzmax ();
 	      ridx = scm.xridx ();
@@ -534,17 +534,17 @@ Ng, Oak Ridge National Laboratory. (see\
 	octave_stdout << "symamd: dense row/col fraction: " 
 		      << knobs [COLAMD_DENSE_ROW] << std::endl;
       
       octave_idx_type n_row, n_col, nnz;
       octave_idx_type *ridx, *cidx;
       SparseMatrix sm;
       SparseComplexMatrix scm;
 
-      if (args(0).class_name () == "sparse")
+      if (args(0).is_sparse_type ())
 	{
 	  if (args(0).is_complex_type ())
 	    {
 	      scm = args(0).sparse_complex_matrix_value ();
 	      n_row = scm.rows ();
 	      n_col = scm.cols ();
 	      nnz = scm.nzmax ();
 	      ridx = scm.xridx ();
@@ -659,17 +659,17 @@ permutations on the tree.\n\
   else
     {
       octave_idx_type n_row, n_col, nnz;
       octave_idx_type *ridx, *cidx;
       bool is_sym = true;
       SparseMatrix sm;
       SparseComplexMatrix scm;
 
-      if (args(0).class_name () == "sparse")
+      if (args(0).is_sparse_type ())
 	{
 	  if (args(0).is_complex_type ())
 	    {
 	      scm = args(0).sparse_complex_matrix_value ();
 	      n_row = scm.rows ();
 	      n_col = scm.cols ();
 	      nnz = scm.nzmax ();
 	      ridx = scm.xridx ();
diff --git a/src/DLD-FUNCTIONS/matrix_type.cc b/src/DLD-FUNCTIONS/matrix_type.cc
--- a/src/DLD-FUNCTIONS/matrix_type.cc
+++ b/src/DLD-FUNCTIONS/matrix_type.cc
@@ -99,17 +99,17 @@ matrix type.\n\
   octave_value retval;
 
   if (nargin == 0)
     print_usage ("matrix_type");
   else if (nargin > 4)
     error ("matrix_type: incorrect number of arguments");
   else
     {
-      if (args(0).class_name () == "sparse") 
+      if (args(0).is_sparse_type ())
 	{
 	  if (nargin == 1)
 	    {
 	      SparseType mattyp;
 	      const octave_value& rep = args(0).get_rep ();
 
 	      if (args(0).type_name () == "sparse complex matrix" ) 
 		{
diff --git a/src/DLD-FUNCTIONS/sparse.cc b/src/DLD-FUNCTIONS/sparse.cc
--- a/src/DLD-FUNCTIONS/sparse.cc
+++ b/src/DLD-FUNCTIONS/sparse.cc
@@ -36,17 +36,17 @@ Boston, MA 02110-1301, USA.
 
 #include "ov-re-sparse.h"
 #include "ov-cx-sparse.h"
 #include "ov-bool-sparse.h"
 
 static bool
 is_sparse (const octave_value& arg)
 {
-  return (arg.class_name () == "sparse");
+  return (arg.is_sparse_type ());
 }
 
 DEFUN_DLD (issparse, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} issparse (@var{expr})\n\
 Return 1 if the value of the expression @var{expr} is a sparse matrix.\n\
 @end deftypefn") 
 {
@@ -380,17 +380,17 @@ DEFUN_DLD (full, args, ,
 {
   octave_value retval;
 
   if (args.length() < 1) {
      print_usage ("full");
      return retval;
   }
 
-  if (args(0).class_name () == "sparse")
+  if (args(0).is_sparse_type ())
     {
       if (args(0).type_name () == "sparse matrix") 
 	retval = args(0).matrix_value ();
       else if (args(0).type_name () == "sparse complex matrix")
 	retval = args(0).complex_matrix_value ();
       else if (args(0).type_name () == "sparse bool matrix")
 	retval = args(0).bool_matrix_value ();
     } 
@@ -558,17 +558,17 @@ returns column vectors @var{i},@var{j},@
      {
        print_usage ("spfind");
        return retval;
      }
       
 
    octave_value arg = args(0);
 
-   if (arg.class_name () == "sparse")
+   if (arg.is_sparse_type ())
      {
        if (arg.type_name () == "sparse matrix")
 	 retval = sparse_find (args(0).sparse_matrix_value ());
        else if (arg.type_name () == "sparse complex matrix" ) 
 	 retval = sparse_find (args(0).sparse_complex_matrix_value ());
        else if (arg.type_name () == "sparse bool matrix" ) 
 	 retval = sparse_find (args(0).sparse_bool_matrix_value ());
        else 
diff --git a/src/DLD-FUNCTIONS/splu.cc b/src/DLD-FUNCTIONS/splu.cc
--- a/src/DLD-FUNCTIONS/splu.cc
+++ b/src/DLD-FUNCTIONS/splu.cc
@@ -94,17 +94,17 @@ be square.\n\
     return octave_value_list (3, SparseMatrix ());
 
   ColumnVector Qinit;
   bool have_Qinit = false;
   double thres = -1.;
 
   for (int k = 1; k < nargin; k++)
     {
-      if (args(k).class_name () == "sparse") 
+      if (args(k).is_sparse_type ())
 	{
 	  SparseMatrix tmp = args (k).sparse_matrix_value ();
 	  
 	  if (error_state)
 	    {
 	      error ("splu: Not a valid permutation/threshold");
 	      return retval;
 	    }
diff --git a/src/ov-base-sparse.h b/src/ov-base-sparse.h
--- a/src/ov-base-sparse.h
+++ b/src/ov-base-sparse.h
@@ -121,16 +121,18 @@ octave_base_sparse : public octave_base_
   SparseType sparse_type (void) const { return typ; }
   SparseType sparse_type (const SparseType& _typ) 
     { SparseType ret = typ; typ = _typ; return ret; }
 
   bool is_matrix_type (void) const { return true; }
 
   bool is_numeric_type (void) const { return true; }
 
+  bool is_sparse_type (void) const { return true; }
+
   bool is_defined (void) const { return true; }
 
   bool is_constant (void) const { return true; }
 
   bool is_true (void) const;
 
   octave_idx_type capacity (void) const { return matrix.capacity (); }
 
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -158,16 +158,18 @@ public:
   // Would be nice to get rid of the next four functions:
 
   bool is_scalar_type (void) const { return false; }
 
   bool is_matrix_type (void) const { return false; }
 
   bool is_numeric_type (void) const { return false; }
 
+  bool is_sparse_type (void) const { return false; }
+
   bool valid_as_scalar_index (void) const { return false; }
 
   bool valid_as_zero_index (void) const { return false; }
 
   bool is_true (void) const { return false; }
 
   bool is_zero_by_zero (void) const
     { return (rows () == 0 && columns () == 0); }
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -482,16 +482,19 @@ public:
     { return rep->is_scalar_type (); }
 
   virtual bool is_matrix_type (void) const
     { return rep->is_matrix_type (); }
 
   virtual bool is_numeric_type (void) const
     { return rep->is_numeric_type (); }
 
+  virtual bool is_sparse_type (void) const
+    { return rep->is_sparse_type (); }
+
   virtual bool valid_as_scalar_index (void) const
     { return rep->valid_as_scalar_index (); }
 
   virtual bool valid_as_zero_index (void) const
     { return rep->valid_as_zero_index (); }
 
   // Does this constant correspond to a truth value?
 
diff --git a/src/pt-mat.cc b/src/pt-mat.cc
--- a/src/pt-mat.cc
+++ b/src/pt-mat.cc
@@ -341,17 +341,17 @@ tm_row_const::tm_row_const_rep::do_init_
     some_str = true;
 
   if (all_real && ! val.is_real_type ())
     all_real = false;
 
   if (all_cmplx && ! (val.is_complex_type () || val.is_real_type ()))
     all_cmplx = false;
 
-  if (!any_sparse && val.class_name() == "sparse")
+  if (!any_sparse && val.is_sparse_type ())
     any_sparse = true;
 
   return true;
 }
 
 void
 tm_row_const::tm_row_const_rep::init (const tree_argument_list& row)
 {
