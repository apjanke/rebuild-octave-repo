# HG changeset patch
# User jwe
# Date 1126724105 0
#      Wed Sep 14 18:55:05 2005 +0000
# Node ID ebe5d7d15522169efcfd807db2212cd55a0e18ed
# Parent  051ddd7a6681a0d10b20dae2b55c2c038485d6a9
[project @ 2005-09-14 18:55:04 by jwe]

diff --git a/libcruft/ChangeLog b/libcruft/ChangeLog
--- a/libcruft/ChangeLog
+++ b/libcruft/ChangeLog
@@ -1,8 +1,13 @@
+2005-09-14  Daniel  <durbano@shbano.com>
+
+	* lapack/zbdsqr.f: Fix typo in docs.
+	From Jorge Barros de Abreu <ficmatin01@solar.com.br>.
+
 2005-05-06  John W. Eaton  <jwe@octave.org>
 
 	* lapack/dpotri.f, lapack/dlauum.f, lapack/dlauu2.f,
 	lapack/zpotri.f, lapack/zlauum.f, lapack/zlauu2.f: New files.
 
 2005-04-08  John W. Eaton  <jwe@octave.org>
 
 	* Makefile.in, Makerules.in (clean, distclean, maintainer-clean):
diff --git a/libcruft/lapack/zbdsqr.f b/libcruft/lapack/zbdsqr.f
--- a/libcruft/lapack/zbdsqr.f
+++ b/libcruft/lapack/zbdsqr.f
@@ -57,17 +57,17 @@
 *
 *  D       (input/output) DOUBLE PRECISION array, dimension (N)
 *          On entry, the n diagonal elements of the bidiagonal matrix B.
 *          On exit, if INFO=0, the singular values of B in decreasing
 *          order.
 *
 *  E       (input/output) DOUBLE PRECISION array, dimension (N)
 *          On entry, the elements of E contain the
-*          offdiagonal elements of of the bidiagonal matrix whose SVD
+*          offdiagonal elements of the bidiagonal matrix whose SVD
 *          is desired. On normal exit (INFO = 0), E is destroyed.
 *          If the algorithm does not converge (INFO > 0), D and E
 *          will contain the diagonal and superdiagonal elements of a
 *          bidiagonal matrix orthogonally equivalent to the one given
 *          as input. E(N) is used for workspace.
 *
 *  VT      (input/output) COMPLEX*16 array, dimension (LDVT, NCVT)
 *          On entry, an N-by-NCVT matrix VT.
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,15 @@
+2005-09-14  Daniel  <durbano@shbano.com>
+
+	* statistics/tests/bartlett_test.m, linear-algebra/cross.m,
+	statistics/distributions/discrete_cdf.m, general/fliplr.m:
+	Doc string fixes.
+	From Jorge Barros de Abreu <ficmatin01@solar.com.br>.
+
 2005-09-12  Stefan van der Walt <stefan@sun.ac.za>
 
 	* saveimage.m: Do not ignore most significant bit when writing
 	black and white images to file.
 
 2005-09-07  Bill Denney  <denney@seas.upenn.edu>
 
 	* audio/playaudio.m, control/base/__bodquist__.m,
diff --git a/scripts/general/fliplr.m b/scripts/general/fliplr.m
--- a/scripts/general/fliplr.m
+++ b/scripts/general/fliplr.m
@@ -25,17 +25,17 @@
 ## @example
 ## @group
 ## fliplr ([1, 2; 3, 4])
 ##      @result{}  2  1
 ##          4  3
 ## @end group
 ## @end example
 ##
-## Note that @code{fliplr} only workw with 2-D arrays.  To flip N-d arrays
+## Note that @code{fliplr} only work with 2-D arrays.  To flip N-d arrays
 ## use @code{flipdim} instead.
 ## @end deftypefn
 ##
 ## @seealso{flipud, flipdim, rot90 and rotdim}
 
 ## Author: jwe
 
 function y = fliplr (x)
diff --git a/scripts/linear-algebra/cross.m b/scripts/linear-algebra/cross.m
--- a/scripts/linear-algebra/cross.m
+++ b/scripts/linear-algebra/cross.m
@@ -27,17 +27,17 @@
 ## cross ([1,1,0], [0,1,1])
 ##      @result{} [ 1; -1; 1 ]
 ## @end group
 ## @end example
 ##
 ## If @var{x} and @var{y} are matrices, the cross product is applied 
 ## along the first dimension with 3 elements. The optional argument 
 ## @var{dim} is used to force the cross product to be calculated along
-## the dimension defiend by @var{dim}.
+## the dimension defined by @var{dim}.
 ## @end deftypefn
 
 ## Author: Kurt Hornik <Kurt.Hornik@wu-wien.ac.at>
 ## Created: 15 October 1994
 ## Adapted-By: jwe
 
 function z = cross (x, y, dim)
 	
diff --git a/scripts/statistics/distributions/discrete_cdf.m b/scripts/statistics/distributions/discrete_cdf.m
--- a/scripts/statistics/distributions/discrete_cdf.m
+++ b/scripts/statistics/distributions/discrete_cdf.m
@@ -16,17 +16,17 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} discrete_cdf (@var{x}, @var{v}, @var{p})
 ## For each element of @var{x}, compute the cumulative distribution
 ## function (CDF) at @var{x} of a univariate discrete distribution which
-## assumes the values in v with probabilities @var{p}.
+## assumes the values in @var{v} with probabilities @var{p}.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: CDF of a discrete distribution
 
 function cdf = discrete_cdf (x, v, p)
 
   if (nargin != 3)
diff --git a/scripts/statistics/tests/bartlett_test.m b/scripts/statistics/tests/bartlett_test.m
--- a/scripts/statistics/tests/bartlett_test.m
+++ b/scripts/statistics/tests/bartlett_test.m
@@ -18,17 +18,17 @@
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{pval}, @var{chisq}, @var{df}] =} bartlett_test (@var{x1}, @dots{}) 
 ## Perform a Bartlett test for the homogeneity of variances in the data
 ## vectors @var{x1}, @var{x2}, @dots{}, @var{xk}, where @var{k} > 1.
 ##
 ## Under the null of equal variances, the test statistic @var{chisq}
-## approximately ollows a chi-square distribution with @var{df} degrees of
+## approximately follows a chi-square distribution with @var{df} degrees of
 ## freedom.
 ##
 ## The p-value (1 minus the CDF of this distribution at @var{chisq}) is
 ## returned in @var{pval}.
 ##
 ## If no output argument is given, the p-value is displayed.
 ## @end deftypefn
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2005-09-14  Daniel  <durbano@shbano.com>
+
+	* DLD-FUNCTIONS/besselj.cc, DLD-FUNCTIONS/chol.cc,
+	DLD-FUNCTIONS/fft.cc, DLD-FUNCTIONS/fftw_wisdom.cc, utils.cc:
+	Doc string fixes.
+	From Jorge Barros de Abreu <ficmatin01@solar.com.br>.
+
 2005-09-14  David Bateman  <dbateman@free.fr>
 
 	* help.cc (Flookfor, print_lookfor, first_help_sentence):
 	New functions.
 
 2005-09-07  Bill Denney  <denney@seas.upenn.edu>
 
 	* dirfns.cc (Fglob): Doc fix.
diff --git a/src/DLD-FUNCTIONS/besselj.cc b/src/DLD-FUNCTIONS/besselj.cc
--- a/src/DLD-FUNCTIONS/besselj.cc
+++ b/src/DLD-FUNCTIONS/besselj.cc
@@ -440,17 +440,17 @@ Input error, return @code{NaN}.\n\
 Overflow, return @code{Inf}.\n\
 @item\n\
 Loss of significance by argument reduction results in less than half\n\
  of machine accuracy.\n\
 @item\n\
 Complete loss of significance by argument reduction, return @code{NaN}.\n\
 @item\n\
 Error---no computation, algorithm termination condition not met,\n\
-return @code{NaN}\n\
+return @code{NaN}.\n\
 @end enumerate\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin > 0 && nargin < 4)
diff --git a/src/DLD-FUNCTIONS/chol.cc b/src/DLD-FUNCTIONS/chol.cc
--- a/src/DLD-FUNCTIONS/chol.cc
+++ b/src/DLD-FUNCTIONS/chol.cc
@@ -116,17 +116,17 @@ r' * r = a.\n\
     }
 
   return retval;
 }
 
 DEFUN_DLD (cholinv, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} cholinv (@var{a})\n\
-Use the Cholesky factorization to compute the inverse of of the\n\
+Use the Cholesky factorization to compute the inverse of the\n\
 symmetric positive definite matrix @var{a}.\n\
 @seealso{chol, chol2inv}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
diff --git a/src/DLD-FUNCTIONS/fft.cc b/src/DLD-FUNCTIONS/fft.cc
--- a/src/DLD-FUNCTIONS/fft.cc
+++ b/src/DLD-FUNCTIONS/fft.cc
@@ -155,21 +155,21 @@ FFTSRC
 ". The FFT is calculated along the first non-singleton dimension of the\n\
 array. Thus if @var{a} is a matrix, @code{fft (@var{a})} computes the\n\
 FFT for each column of @var{a}.\n\
 \n\
 If called with two arguments, @var{n} is expected to be an integer\n\
 specifying the number of elements of @var{a} to use, or an empty\n\
 matrix to specify that its value should be ignored. If @var{n} is\n\
 larger than the dimension along which the FFT is calculated, then\n\
-@var{a} is resized and padded with zeros. Otherwise, if@var{n} is\n\
+@var{a} is resized and padded with zeros. Otherwise, if @var{n} is\n\
 smaller than the dimension along which the FFT is calculated, then\n\
 @var{a} is truncated.\n\
 \n\
-If called with three agruments, @var{dim} is an integer specifying the\n\
+If called with three arguments, @var{dim} is an integer specifying the\n\
 dimension of the matrix along which the FFT is performed\n\
 @end deftypefn\n\
 @seealso {ifft, fft2, fftn, fftw_wisdom}")
 {
   return do_fft (args, "fft", 0);
 }
 
 
diff --git a/src/DLD-FUNCTIONS/fftw_wisdom.cc b/src/DLD-FUNCTIONS/fftw_wisdom.cc
--- a/src/DLD-FUNCTIONS/fftw_wisdom.cc
+++ b/src/DLD-FUNCTIONS/fftw_wisdom.cc
@@ -68,17 +68,17 @@ absent dimension. That is\n\
 fftw_wisdom ([102, 0, 0; 103, 103, 0; 102, 103, 105]);\n\
 a = fft (rand (1,102));\n\
 b = fft (rand (103,103));\n\
 c = fftn (rand ([102, 103, 105]));\n\
 @end example\n\
 \n\
 calculates the wisdom necessary to accelerate the 103, 102x102 and\n\
 the 102x103x105 FFTs. Note that calculated wisdom will be lost when\n\
-when restarting Octave. However, if it is saved as discussed above, it\n\
+restarting Octave. However, if it is saved as discussed above, it\n\
 can be reloaded. Also, any system-wide wisdom file that has been found\n\
 will also be used. Saved wisdom files should not be used on different\n\
 platforms since they will not be efficient and the point of calculating\n\
 the wisdom is lost.\n\
 \n\
 Note that the program @code{fftw-wisdom} supplied with FFTW can equally\n\
 be used to create a file containing wisdom that can be imported into\n\
 Octave.\n\
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -274,21 +274,21 @@ make_absolute (const string_vector& sv)
   return sv;
 }
 
 DEFUN (file_in_loadpath, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} file_in_loadpath (@var{file})\n\
 @deftypefnx {Built-in Function} {} file_in_loadpath (@var{file}, \"all\")\n\
 \n\
-Return the absolute name name of @var{file} if it can be found in\n\
+Return the absolute name of @var{file} if it can be found in\n\
 the list of directories specified by @code{LOADPATH}.\n\
 If no file is found, return an empty matrix.\n\
 \n\
-If the first argument is a cell array of of strings, search each\n\
+If the first argument is a cell array of strings, search each\n\
 directory of the loadpath for element of the cell array and return\n\
 the first that matches.\n\
 \n\
 If the second optional argument @code{\"all\"} is supplied, return\n\
 a cell array containing the list of all files that have the same\n\
 name in the path.  If no files are found, return an empty cell array.\n\
 @end deftypefn\n\
 @seealso{file_in_path}")
@@ -332,28 +332,28 @@ name in the path.  If no files are found
 
   return retval;
 }
 
 DEFUN (file_in_path, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} file_in_path (@var{path}, @var{file})\n\
 @deftypefnx {Built-in Function} {} file_in_path (@var{path}, @var{file}, \"all\")\n\
-Return the absolute name name of @var{file} if it can be found in\n\
+Return the absolute name of @var{file} if it can be found in\n\
 @var{path}.  The value of @var{path} should be a colon-separated list of\n\
 directories in the format described for the built-in variable\n\
 @code{LOADPATH}.  If no file is found, return an empty matrix.\n\
 For example,\n\
 \n\
 @example\n\
 file_in_path (LOADPATH, \"nargchk.m\")\n\
      @result{} \"@value{OCTAVEHOME}/share/octave/2.0/m/general/nargchk.m\"\n\
 @end example\n\
 \n\
-If the second argument is a cell array of of strings, search each\n\
+If the second argument is a cell array of strings, search each\n\
 directory of the path for element of the cell array and return\n\
 the first that matches.\n\
 \n\
 If the third optional argument @code{\"all\"} is supplied, return\n\
 a cell array containing the list of all files that have the same\n\
 name in the path.  If no files are found, return an empty cell array.\n\
 @seealso{file_in_loadpath}\n\
 @end deftypefn")
