# HG changeset patch
# User Rik <rdrider0-list@yahoo.com>
# Date 1237758024 25200
#      Sun Mar 22 14:40:24 2009 -0700
# Node ID dbd0c77e575e56269babc70e970cd440fae61294
# Parent  51dc9691f23f11f6fd9f62cac074bd267cff812b
Cleanup documentation file plot.texi

Spellcheck
Stylecheck (Mostly double spaces after periods)

diff --git a/doc/interpreter/plot.txi b/doc/interpreter/plot.txi
--- a/doc/interpreter/plot.txi
+++ b/doc/interpreter/plot.txi
@@ -220,17 +220,17 @@ get or set individual axis limits.  Each
 * Two-dimensional Function Plotting::
 @end menu
 
 @node Two-dimensional Function Plotting
 @subsubsection Two-dimensional Function Plotting
 
 Octave can plot a function from a function handle inline function or
 string defining the function without the user needing to explicitly
-create the data to be plotted. The function @code{fplot} also generates
+create the data to be plotted.  The function @code{fplot} also generates
 two-dimensional plots with linear axes using a function name and limits
 for the range of the x-coordinate instead of the x and y data.  For
 example,
 
 @example
 @group
 fplot (@@sin, [-10, 10], 201);
 @end group
@@ -471,17 +471,17 @@ writes the current figure to an encapsul
 @DOCSTRING(print)
 
 @DOCSTRING(orient)
 
 @node Interacting with plots
 @subsection Interacting with plots
 
 The user can select points on a plot with the @code{ginput} function or
-selction the position at which to place text on the plot with the
+selection the position at which to place text on the plot with the
 @code{gtext} function using the mouse.
 
 @DOCSTRING(ginput)
 
 @DOCSTRING(waitforbuttonpress)
 
 @DOCSTRING(gtext)
 
@@ -663,17 +663,17 @@ become children of the current axes obje
 @DOCSTRING(surface)
 
 By default, Octave refreshes the plot window when a prompt is printed,
 or when waiting for input.  To force an update at other times, call the
 @code{drawnow} function.
 
 @DOCSTRING(drawnow)
 
-Only figures that are modified will be updated. The @code{refresh}
+Only figures that are modified will be updated.  The @code{refresh}
 function can also be to force an update of the current figure, even if
 it is nor modified.
 
 @DOCSTRING(refresh)
 
 Normally, high-level plot functions like @code{plot} or @code{mesh} call
 @code{newplot} to initialize the state of the current axes so that the
 next plot is drawn in a blank window with default property settings.  To
@@ -697,17 +697,17 @@ plot.
 
 @DOCSTRING(newplot)
 
 @DOCSTRING(hold)
 
 @DOCSTRING(ishold)
 
 To clear the current figure, call the @code{clf} function.  To clear the
-current axis, call the @code{cla} function. To bring the current fingure
+current axis, call the @code{cla} function.  To bring the current figure
 to the top of the window stack, call the @code{shg} function.  To delete
 a graphics object, call @code{delete} on its index.  To close the
 figure window, call the @code{close} function.
 
 @DOCSTRING(clf)
 
 @DOCSTRING(cla)
 
@@ -978,74 +978,74 @@ The color of the text.  @xref{Colors}.
 
 @item fontname
 The font used for the text.
 
 @item fontsize
 The size of the font, in points to use.
 
 @item fontangle
-Flag whether the font is italic or normal. Valid values are 'normal',
+Flag whether the font is italic or normal.  Valid values are 'normal',
 'italic' and 'oblique'.
 
 @item fontweight
-Flag whether the font is bold, etc. Valid values are 'normal', 'bold',
+Flag whether the font is bold, etc.  Valid values are 'normal', 'bold',
 'demi' or 'light'.
 
 @item interpreter
-Determines how the text is rendered. Valid values are 'none', 'tex' or
+Determines how the text is rendered.  Valid values are 'none', 'tex' or
 'latex'.
 @end table
 
 All text objects, including titles, labels, legends, and text, include
 the property 'interpreter', this property determines the manner in which
-special control sequences in the text are rendered. If the interpreter
-is set to 'none', then no rendering occurs. At this point the 'latex'
+special control sequences in the text are rendered.  If the interpreter
+is set to 'none', then no rendering occurs.  At this point the 'latex'
 option is not implemented and so the 'latex' interpreter also does not
 interpret the text.
 
 The 'tex' option implements a subset of @sc{TeX} functionality in the
-rendering of the text. This allows the insertion of special characters
-such as Greek or mathematical symbols within the text. The special
+rendering of the text.  This allows the insertion of special characters
+such as Greek or mathematical symbols within the text.  The special
 characters are also inserted with a code starting with the back-slash
 (\) character, as in the table @ref{tab:extended}. 
 
 In addition, the formatting of the text can be changed within the string
 with the codes 
 
 @multitable @columnfractions .2 .2 .6 .2
 @item @tab \bf @tab Bold font @tab
 @item @tab \it @tab Italic font @tab
 @item @tab \sl @tab Oblique Font @tab
 @item @tab \rm @tab Normal font @tab
 @end multitable
 
 These are be used in conjunction with the @{ and @} characters to limit
-the change in the font to part of the string. For example
+the change in the font to part of the string.  For example
 
 @example
 xlabel ('@{\bf H@} = a @{\bf V@}')
 @end example
 
-where the character 'a' will not appear in a bold font. Note that to
+where the character 'a' will not appear in a bold font.  Note that to
 avoid having Octave interpret the backslash characters in the strings,
 the strings should be in single quotes.
 
 It is also possible to change the fontname and size within the text 
 
 @multitable @columnfractions .1 .4 .6 .1
 @item @tab \fontname@{@var{fontname}@} @tab Specify the font to use @tab
 @item @tab \fontsize@{@var{size}@} @tab Specify the size of the font to
 use @tab
 @end multitable
 
 Finally, the superscript and subscripting can be controlled with the '^'
-and '_' characters. If the '^' or '_' is followed by a @{ character,
+and '_' characters.  If the '^' or '_' is followed by a @{ character,
 then all of the block surrounded by the @{ @} pair is super- or
-sub-scripted. Without the @{ @} pair, only the character immediately
+sub-scripted.  Without the @{ @} pair, only the character immediately
 following the '^' or '_' is super- or sub-scripted.
 
 @float Table,tab:extended
 @iftex
 @tex
 \vskip 6pt
 {\hbox to \hsize {\hfill\vbox{\offinterlineskip \tabskip=0pt 
 \halign{
@@ -1459,68 +1459,68 @@ A number specifying the size of the mark
 of 2 is twice as large as the default, etc.
 @end table
 
 @node Callbacks
 @subsection Callbacks
 @cindex callbacks
 
 Callback functions can be associated with graphics objects and triggered
-after certain events occur. The basic structure of all callback function
+after certain events occur.  The basic structure of all callback function
 is 
 
 @example
 @group
 function mycallback (src, data)
 @dots{}
 endfunction
 @end group
 @end example
 
 where @code{src} gives a handle to the source of the callback, and
-@code{code} gives some event specific data. This can then be associated
+@code{code} gives some event specific data.  This can then be associated
 with an object either at the objects creation or later with the
-@code{set} function. For example
+@code{set} function.  For example
 
 @example
 plot (x, "DeleteFcn", @@(s, e) disp("Window Deleted"))
 @end example
 
 @noindent
 where at the moment that the plot is deleted, the message "Window
 Deleted" will be displayed.
 
 Additional user arguments can be passed to callback functions, and will
-be passed after the 2 default arguments. For example
+be passed after the 2 default arguments.  For example
 
 @example
 plot (x, "DeleteFcn", @{@@mycallback, "1"@})
 @dots{}
 function mycallback (src, data, a1)
   fprintf ("Closing plot %d\n", a1);
 endfunction
 @end example
 
 The basic callback functions that are available for all graphics objects
 are
 
 @itemize @bullet
 @item CreateFcn
 This is the callback that is called at the moment of the objects
-creation. It is not called if the object is altered in any way, and so
+creation.  It is not called if the object is altered in any way, and so
 it only makes sense to define this callback in the function call that
-defines the object. Callbacks that are added to @code{CreateFcn} later with
+defines the object.  Callbacks that are added to @code{CreateFcn} later with
 the @code{set} function will never be executed.
 
 @item DeleteFcn
 This is the callback that is called at the moment an object is deleted.
 
 @item ButtonDownFcn
 This is the callback that is called if a mouse button is pressed while
-the pointer is over this object. Note, that the gnuplot interface does
+the pointer is over this object.  Note, that the gnuplot interface does
 not respect this callback.
 @end itemize
 
 The object and figure that the event occurred in that resulted in the
 callback being called can be found with the @code{gcbo} and @code{gcbf}
 functions.
 
 @DOCSTRING(gcbo)
@@ -1532,17 +1532,17 @@ function described below.
 
 @node Object Groups
 @subsection Object Groups
 @cindex object groups
 
 A number of Octave high level plot functions return groups of other
 graphics objects or they return graphics objects that are have their
 properties linked in such a way that changes to one of the properties
-results in changes in the others. A graphic object that groups other
+results in changes in the others.  A graphic object that groups other
 objects is an @code{hggroup}
 
 @DOCSTRING(hggroup)
 
 For example a simple use of a @code{hggroup} might be
 
 @example
 @group
@@ -1551,27 +1551,27 @@ hg = hggroup ();
 plot (x, sin (x), "color", [1, 0, 0], "parent", hg);
 hold on
 plot (x, cos (x), "color", [0, 1, 0], "parent", hg);
 set (hg, "visible", "off");
 @end group
 @end example
 
 @noindent
-which groups the two plots into a single object and contols their
-visiblity directly. The default properties of an @code{hggroup} are
+which groups the two plots into a single object and controls their
+visibility directly.  The default properties of an @code{hggroup} are
 the same as the set of common properties for the other graphics
-objects. Additional properties can be added with the @code{addproperty}
+objects.  Additional properties can be added with the @code{addproperty}
 function. 
 
 @DOCSTRING(addproperty)
 
 Once a property in added to an @code{hggroup}, it is not linked to any
 other property of either the children of the group, or any other
-graphics object. Add so to control the way in which this newly added
+graphics object.  Add so to control the way in which this newly added
 property is used, the @code{addlistener} function is used to define a
 callback function that is executed when the property is altered.
 
 @DOCSTRING(addlistener)
 
 @DOCSTRING(dellistener)
 
 An example of the use of these two functions might be
@@ -1589,17 +1589,17 @@ plot (x, cos (x), "color", [0, 1, 0], "p
 function update_props (h, d)
   set (get (h, "children"), "linestyle", get (h, "linestyle"));
 endfunction
 @end group
 @end example
 
 @noindent
 that adds a @code{linestyle} property to the @code{hggroup} and
-propagating any changes its its value to the children of the group. The
+propagating any changes its value to the children of the group.  The
 @code{linkprop} function can be used to simplify the above to be
 
 @example
 @group
 x = 0:0.1:10;
 hg = hggroup ();
 h1 = plot (x, sin (x), "color", [1, 0, 0], "parent", hg);
 addproperty ("linestyle", hg, "linelinestyle", get (h, "linestyle"));
@@ -1619,43 +1619,43 @@ one or more graphics object and are used
 @item group together multiple graphics objects,
 @item create linked properties between different graphics objects, and
 @item to hide the nominal user data, from the actual data of the objects.
 @end itemize
 
 @noindent
 For example the @code{stem} function creates a stem series where each
 @code{hggroup} of the stem series contains two line objects representing
-the body and head of the stem. The @code{ydata} property of the
+the body and head of the stem.  The @code{ydata} property of the
 @code{hggroup} of the stem series represents the head of the stem,
-whereas the body of the stem is between the baseline and this value. For
+whereas the body of the stem is between the baseline and this value.  For
 example
 
 @example
 @group
 h = stem (1:4)
 get (h, "xdata")
 @result{} [  1   2   3   4]'
 get (get (h, "children")(1), "xdata")
 @result{} [  1   1 NaN   2   2 NaN   3   3 NaN   4   4 NaN]'
 @end group
 @end example
 
 @noindent
-shows the the difference between the @code{xdata} of the @code{hggroup}
+shows the difference between the @code{xdata} of the @code{hggroup}
 of a stem series object and the underlying line.
 
 The basic properties of such group objects is that they consist of one 
 or more linked @code{hggroup}, and that changes in certain properties of
-these groups are propagated to other members of the group. Whereas,
+these groups are propagated to other members of the group.  Whereas,
 certain properties of the members of the group only apply to the current
 member.
 
 In addition the members of the group can also be linked to other
-graphics objects through callback functions. For example the baseline of
+graphics objects through callback functions.  For example the baseline of
 the @code{bar} or @code{stem} functions is a line object, whose length
 and position are automatically adjusted, based on changes to the
 corresponding hggroup elements.
 
 @menu
 * Data sources in object groups::
 * Area series::
 * Bar series::
@@ -1668,49 +1668,49 @@ corresponding hggroup elements.
 * Stem Series::
 * Surface group::
 @end menu
 
 @node Data sources in object groups
 @subsubsection Data sources in object groups
 @cindex data sources in object groups
 
-All of the group objects contain data source parameters. There are
+All of the group objects contain data source parameters.  There are
 string parameters that contain an expression that is evaluated to update
 the relevant data property of the group when the @code{refreshdata}
 function is called. 
 
 @DOCSTRING(refreshdata)
 
 @anchor{doc-linkdata}
 @c add the description of the linkdata function here when it is written
 @c remove the explicit anchor when you add the corresponding @DOCSTRING
 @c command
 
 @node Area series
 @subsubsection Area series
 @cindex series objects
 @cindex area series
 
-Area series objects are created by the @code{area} function. Each of the
-@code{hggroup} elements contains a single patch object. The properties
+Area series objects are created by the @code{area} function.  Each of the
+@code{hggroup} elements contains a single patch object.  The properties
 of the area series are
 
 @table @code
 @item basevalue
 The value where the base of the area plot is drawn.
 
 @item linewidth
 @itemx linestyle
 The line width and style of the edge of the patch objects making up the
-areas. @xref{Line Styles}.
+areas.  @xref{Line Styles}.
 
 @item edgecolor
 @itemx facecolor
-The line and fill color of the patch objects making up the areas. @xref{Colors}.
+The line and fill color of the patch objects making up the areas.  @xref{Colors}.
 
 @item xdata
 @itemx ydata
 The x and y coordinates of the original columns of the data passed to
 @code{area} prior to the cumulative summation used in the @code{area}
 function. 
 
 @item xdatasource
@@ -1719,129 +1719,129 @@ Data source variables.
 @end table
 
 @node Bar series
 @subsubsection Bar series
 @cindex series objects
 @cindex bar series
 
 Bar series objects are created by the @code{bar} or @code{barh}
-functions. Each @code{hgrroup} element contains a single patch object. 
+functions.  Each @code{hggroup} element contains a single patch object. 
 The properties of the bar series are
 
 @table @code
 @item showbaseline
 @itemx baseline
 @itemx basevalue
 The property @code{showbaseline} flags whether the baseline of the bar
-series is displayed (default is "on"). The handle of the graphics object
+series is displayed (default is "on").  The handle of the graphics object
 representing the baseline is given by the @code{baseline} property and
 the y-value of the baseline by the @code{basevalue} property. 
 
 Changes to any of these property are propagated to the other members of
-the bar series and to the baseline itself. Equally changes in the
+the bar series and to the baseline itself.  Equally changes in the
 properties of the base line itself are propagated to the members of the
 corresponding bar series.
 
 @item barwidth
 @itemx barlayout
 @itemx horizontal
 The property @code{barwidth} is the width of the bar corresponding to
-the @var{width} variable passed to @code{bar} or @var{barh}. Whether the
+the @var{width} variable passed to @code{bar} or @var{barh}.  Whether the
 bar series is "grouped" or "stacked" is determined by the
 @code{barlayout} property and whether the bars are horizontal or
 vertical by the @code{horizontal} property.
 
 Changes to any of these property are propagated to the other members of
 the bar series.
 
 @item linewidth
 @itemx linestyle
 The line width and style of the edge of the patch objects making up the
-bars. @xref{Line Styles}.
+bars.  @xref{Line Styles}.
 
 @item edgecolor
 @itemx facecolor
-The line and fill color of the patch objects making up the bars. @xref{Colors}.
+The line and fill color of the patch objects making up the bars.  @xref{Colors}.
 
 @item xdata
-The nominal x positions of the bars. Changes in this property and
+The nominal x positions of the bars.  Changes in this property and
 propagated to the other members of the bar series. 
 
 @item ydata
 The y value of the bars in the @code{hggroup}.
 
 @item xdatasource
 @itemx ydatasource
 Data source variables.
 @end table
 
 @node Contour groups
 @subsubsection Contour groups
 @cindex series objects
 @cindex contour series
 
 Contour group objects are created by the @code{contour}, @code{contourf}
-and @code{contour3} functions. The are equally one of the handles returned
-by the @code{surfc} and @code{meshc} functions. The properties of the contour
+and @code{contour3} functions.  The are equally one of the handles returned
+by the @code{surfc} and @code{meshc} functions.  The properties of the contour
 group are
 
 @table @code
 @item contourmatrix
 A read only property that contains the data return by @code{contourc} used to
 create the contours of the plot.
 
 @item fill
 A radio property that can have the values "on" or "off" that flags whether the
 contours to plot are to be filled.
 
 @item zlevelmode
 @itemx zlevel
 The radio property @code{zlevelmode} can have the values "none", "auto" or 
-"manual". When its value is "none" there is no z component to the plotted
-contours. When its value is "auto" the z value of the plotted contours is 
-at the same value as the contour itself. If the value is "manual", then the
+"manual".  When its value is "none" there is no z component to the plotted
+contours.  When its value is "auto" the z value of the plotted contours is 
+at the same value as the contour itself.  If the value is "manual", then the
 z value at which to plot the contour is determined by the @code{zlevel}
 property.
 
 @item levellistmode
 @itemx levellist
 @itemx levelstepmode
 @itemx levelstep
-If @code{levellistmode} is "manual", then the levels at whch to plot the 
-contours is determined by @code{levellist}. If @code{levellistmode} is
+If @code{levellistmode} is "manual", then the levels at which to plot the 
+contours is determined by @code{levellist}.  If @code{levellistmode} is
 set to "auto", then the distance between contours is determined by 
-@code{levelstep}. If both @code{levellistmode} and @code{levelstepmode}
+@code{levelstep}.  If both @code{levellistmode} and @code{levelstepmode}
 are set to "auto", then there are assumed to be 10 equal spaced contours.
 
 @item textlistmode
 @itemx textlist
 @itemx textstepmode
 @itemx textstep
 If @code{textlistmode} is "manual", then the labelled contours 
-is determined by @code{textlist}. If @code{textlistmode} is set to 
+is determined by @code{textlist}.  If @code{textlistmode} is set to 
 "auto", then the distance between labelled contours is determined by 
-@code{textstep}. If both @code{textlistmode} and @code{textstepmode}
+@code{textstep}.  If both @code{textlistmode} and @code{textstepmode}
 are set to "auto", then there are assumed to be 10 equal spaced 
 labelled contours.
 
 @item showtext
 Flag whether the contour labels are shown or not.
 
 @item labelspacing
 The distance between labels on a single contour in points.
 
 @item linewidth
 @item linestyle
 @item linecolor
-The properties of the contour lines. The properties @code{linewidth} and
-@code{linestyle} are similar to the correponding properties for lines. The
+The properties of the contour lines.  The properties @code{linewidth} and
+@code{linestyle} are similar to the corresponding properties for lines.  The
 property @code{linecolor} is a color property (@pxref{Colors}), that can also
-have the values of "none" or "auto". If @code{linecolor} is "none", then no
-contour line is drawn. If @code{linecolor} is "auto" then the line color is
+have the values of "none" or "auto".  If @code{linecolor} is "none", then no
+contour line is drawn.  If @code{linecolor} is "auto" then the line color is
 determined by the colormap.
 
 @item xdata
 @itemx ydata
 @itemx zdata
 The original x, y, and z data of the contour lines.
 
 @item xdatasource
@@ -1850,33 +1850,33 @@ The original x, y, and z data of the con
 Data source variables.
 @end table
 
 @node Error bar series
 @subsubsection Error bar series
 @cindex series objects
 @cindex error bar series
 
-Error bar series are created by the @code{errorbar} function. Each 
-@code{hgrroup} element contains two line objects represnting the data and
-the errorbars separately. The properties of the error bar series are
+Error bar series are created by the @code{errorbar} function.  Each 
+@code{hggroup} element contains two line objects representing the data and
+the errorbars separately.  The properties of the error bar series are
 
 @table @code
 @item color
-The RGB color or color name of the line objects of the error bars. @xref{Colors}.
+The RGB color or color name of the line objects of the error bars.  @xref{Colors}.
 
 @item linewidth
 @itemx linestyle
-The line width and style of the line objects of the error bars. @xref{Line Styles}.
+The line width and style of the line objects of the error bars.  @xref{Line Styles}.
 
 @item marker
 @itemx markeredgecolor
 @itemx markerfacecolor
 @itemx markersize
-The line and fill color of the markers on the error bars. @xref{Colors}.
+The line and fill color of the markers on the error bars.  @xref{Colors}.
 
 @item xdata
 @itemx ydata
 @itemx ldata
 @itemx udata
 @itemx xldata
 @itemx xudata
 The original x, y, l, u, xl, xu data of the error bars.
@@ -1891,32 +1891,32 @@ Data source variables.
 @end table
 
 @node Line series
 @subsubsection Line series
 @cindex series objects
 @cindex line series
 
 Line series objects are created by the @code{plot}  and @code{plot3}
-functions and are of the type @code{line}. The properties of the
+functions and are of the type @code{line}.  The properties of the
 line series with the ability to add data sources.
 
 @table @code
 @item color
-The RGB color or color name of the line objects. @xref{Colors}.
+The RGB color or color name of the line objects.  @xref{Colors}.
 
 @item linewidth
 @itemx linestyle
-The line width and style of the line objects. @xref{Line Styles}.
+The line width and style of the line objects.  @xref{Line Styles}.
 
 @item marker
 @itemx markeredgecolor
 @itemx markerfacecolor
 @itemx markersize
-The line and fill color of the markers. @xref{Colors}.
+The line and fill color of the markers.  @xref{Colors}.
 
 @item xdata
 @itemx ydata
 @itemx zdata
 The original x, y and z data.
 
 @item xdatasource
 @itemx ydatasource
@@ -1925,48 +1925,48 @@ Data source variables.
 @end table
 
 @node Quiver group
 @subsubsection Quiver group
 @cindex group objects
 @cindex quiver group
 
 Quiver series objects are created by the @code{quiver} or @code{quiver3}
-functions. Each @code{hggroup} element of the series contains three line
+functions.  Each @code{hggroup} element of the series contains three line
 objects as children representing the body and head of the arrow,
-together with a marker as the point of original of the arrows. The 
+together with a marker as the point of original of the arrows.  The 
 properties of the quiver series are
 
 @table @code
 @item autoscale
 @itemx autoscalefactor
 Flag whether the length of the arrows is scaled or defined directly from
-the @var{u}, @var{v} and @var{w} data. If the arrow length is falgged
+the @var{u}, @var{v} and @var{w} data.  If the arrow length is flagged
 as being scaled by the @code{autoscale} property, then the length of the
 autoscaled arrow is controlled by the @code{autoscalefactor}. 
 
 @item maxheadsize
 This property controls the size of the head of the arrows in the quiver
-series. The default value is 0.2.
+series.  The default value is 0.2.
 
 @item showarrowhead
 Flag whether the arrow heads are displayed in the quiver plot.
 
 @item color
-The RGB color or color name of the line objects of the quiver. @xref{Colors}.
+The RGB color or color name of the line objects of the quiver.  @xref{Colors}.
 
 @item linewidth
 @itemx linestyle
-The line width and style of the line objects of the quiver. @xref{Line Styles}.
+The line width and style of the line objects of the quiver.  @xref{Line Styles}.
 
 @item marker
 @itemx markerfacecolor
 @itemx markersize
 The line and fill color of the marker objects at the original of the
-arrows. @xref{Colors}.
+arrows.  @xref{Colors}.
 
 @item xdata
 @itemx ydata
 @itemx zdata
 The origins of the values of the vector field.
 
 @item udata
 @itemx vdata
@@ -1983,119 +1983,119 @@ Data source variables.
 @end table
 
 @node Scatter group
 @subsubsection Scatter group
 @cindex group objects
 @cindex scatter group
 
 Scatter series objects are created by the @code{scatter} or @code{scatter3}
-functions. A single hggroup element contains as many children as there are
+functions.  A single hggroup element contains as many children as there are
 points in the scatter plot, with each child representing one of the points.
 The properties of the stem series are
 
 @table @code
 @item linewidth
-The line width of the line objects of the points. @xref{Line Styles}.
+The line width of the line objects of the points.  @xref{Line Styles}.
 
 @item marker
 @itemx markeredgecolor
 @itemx markerfacecolor
-The line and fill color of the markers of the points. @xref{Colors}.
+The line and fill color of the markers of the points.  @xref{Colors}.
 
 @item xdata
 @itemx ydata
 @itemx zdata
 The original x, y and z data of the stems.
 
 @item cdata
-The color data for the points of the plot. Each point can have a separate
+The color data for the points of the plot.  Each point can have a separate
 color, or a unique color can be specified.
 
 @item sizedata
-The size data for the points of the plot. Each point can its own size or a 
+The size data for the points of the plot.  Each point can its own size or a 
 unique size can be specified.
 
 @item xdatasource
 @itemx ydatasource
 @itemx zdatasource
 @itemx cdatasource
 @itemx sizedatasource
 Data source variables.
 @end table
 
 @node Stair group
 @subsubsection Stair group
 @cindex group objects
 @cindex stair group
 
-Stair series objects are created by the @code{stair} function. Each
+Stair series objects are created by the @code{stair} function.  Each
 @code{hggroup} element of the series contains a single line object as a
-child representing the stair. The properties of the stair series are
+child representing the stair.  The properties of the stair series are
 
 @table @code
 @item color
-The RGB color or color name of the line objects of the stairs. @xref{Colors}.
+The RGB color or color name of the line objects of the stairs.  @xref{Colors}.
 
 @item linewidth
 @itemx linestyle
-The line width and style of the line objects of the stairs. @xref{Line Styles}.
+The line width and style of the line objects of the stairs.  @xref{Line Styles}.
 
 @item marker
 @itemx markeredgecolor
 @itemx markerfacecolor
 @itemx markersize
-The line and fill color of the markers on the stairs. @xref{Colors}.
+The line and fill color of the markers on the stairs.  @xref{Colors}.
 
 @item xdata
 @itemx ydata
 The original x and y data of the stairs.
 
 @item xdatasource
 @itemx ydatasource
 Data source variables.
 @end table
 
 @node Stem Series
 @subsubsection Stem Series
 @cindex series objects
 @cindex stem series
 
 Stem series objects are created by the @code{stem} or @code{stem3}
-functions. Each @code{hgrroup} element contains a single line object
-as a child respresenting the stems. The properties of the stem series
+functions.  Each @code{hggroup} element contains a single line object
+as a child representing the stems.  The properties of the stem series
 are
 
 @table @code
 @item showbaseline
 @itemx baseline
 @itemx basevalue
 The property @code{showbaseline} flags whether the baseline of the
-stem series is displayed (default is "on"). The handle of the graphics
+stem series is displayed (default is "on").  The handle of the graphics
 object representing the baseline is given by the @code{baseline}
 property and the y-value (or z-value for @code{stem3}) of the baseline
 by the @code{basevalue} property.
 
 Changes to any of these property are propagated to the other members of
-the stem series and to the baseline itself. Equally changes in the
+the stem series and to the baseline itself.  Equally changes in the
 properties of the base line itself are propagated to the members of the
 corresponding stem series.
 
 @item color
-The RGB color or color name of the line objects of the stems. @xref{Colors}.
+The RGB color or color name of the line objects of the stems.  @xref{Colors}.
 
 @item linewidth
 @itemx linestyle
-The line width and style of the line objects of the stems. @xref{Line Styles}.
+The line width and style of the line objects of the stems.  @xref{Line Styles}.
 
 @item marker
 @itemx markeredgecolor
 @itemx markerfacecolor
 @itemx markersize
-The line and fill color of the markers on the stems. @xref{Colors}.
+The line and fill color of the markers on the stems.  @xref{Colors}.
 
 @item xdata
 @itemx ydata
 @itemx zdata
 The original x, y and z data of the stems.
 
 @item xdatasource
 @itemx ydatasource
@@ -2105,34 +2105,34 @@ Data source variables.
 
 @node Surface group
 @subsubsection Surface group
 @cindex group objects
 @cindex surface group
 
 Surface group objects are created by the @code{surf} or @code{mesh}
 functions, but are equally one of the handles returned by the @code{surfc}
-or @code{meshc} functions. The surface group is of the type @code{surface}.
+or @code{meshc} functions.  The surface group is of the type @code{surface}.
 
 The properties of the surface group are
 
 @table @code
 @item edgecolor
 @item facecolor
-The RGB color or color name of the edges or faces of the surface. @xref{Colors}.
+The RGB color or color name of the edges or faces of the surface.  @xref{Colors}.
 
 @item linewidth
 @itemx linestyle
-The line width and style of the lines on the surface. @xref{Line Styles}.
+The line width and style of the lines on the surface.  @xref{Line Styles}.
 
 @item marker
 @itemx markeredgecolor
 @itemx markerfacecolor
 @itemx markersize
-The line and fill color of the markers on the surface. @xref{Colors}.
+The line and fill color of the markers on the surface.  @xref{Colors}.
 
 @item xdata
 @itemx ydata
 @itemx zdata
 @item cdata
 The original x, y, z and c data.
 
 @item xdatasource
diff --git a/scripts/plot/ancestor.m b/scripts/plot/ancestor.m
--- a/scripts/plot/ancestor.m
+++ b/scripts/plot/ancestor.m
@@ -15,17 +15,17 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{parent} =} ancestor (@var{h}, @var{type})
 ## @deftypefnx {Function File} {@var{parent} =} ancestor (@var{h}, @var{type}, 'toplevel')
 ## Return the first ancestor of handle object @var{h} whose type matches
-## @var{type}, where @var{type} is a character string. If @var{type} is a
+## @var{type}, where @var{type} is a character string.  If @var{type} is a
 ## cell array of strings, return the first parent whose type matches
 ## any of the given type strings.
 ##
 ## If the handle object @var{h} is of type @var{type}, return @var{h}.
 ##
 ## If @code{"toplevel"} is given as a 3rd argument, return the highest
 ## parent in the object hierarchy that matches the condition, instead
 ## of the first (nearest) one.
diff --git a/scripts/plot/area.m b/scripts/plot/area.m
--- a/scripts/plot/area.m
+++ b/scripts/plot/area.m
@@ -18,27 +18,27 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} area (@var{x}, @var{y})
 ## @deftypefnx {Function File} {} area (@var{x}, @var{y}, @var{lvl})
 ## @deftypefnx {Function File} {} area (@dots{}, @var{prop}, @var{val}, @dots{})
 ## @deftypefnx {Function File} {} area (@var{y}, @dots{})
 ## @deftypefnx {Function File} {} area (@var{h}, @dots{})
 ## @deftypefnx {Function File} {@var{h} =} area (@dots{})
-## Area plot of cumulative sum of the columns of @var{y}. This shows the
+## Area plot of cumulative sum of the columns of @var{y}.  This shows the
 ## contributions of a value to a sum, and is functionally similar to 
 ## @code{plot (@var{x}, cumsum (@var{y}, 2))}, except that the area under 
 ## the curve is shaded.
 ##
 ## If the @var{x} argument is omitted it is assumed to be given by
-## @code{1 : rows (@var{y})}. A value @var{lvl} can be defined that determines
+## @code{1 : rows (@var{y})}.  A value @var{lvl} can be defined that determines
 ## where the base level of the shading under the curve should be defined.
 ##
 ## Additional arguments to the @code{area} function are passed to the 
-## @code{patch}. The optional return value @var{h} provides a handle to 
+## @code{patch}.  The optional return value @var{h} provides a handle to 
 ## area series object representing the patches of the areas.
 ## @seealso{plot, patch}
 ## @end deftypefn
 
 function h = area (varargin)
 
   [ax, varargin, nargin] = __plt_get_axis_arg__ ("area", varargin{:});
 
diff --git a/scripts/plot/backend.m b/scripts/plot/backend.m
--- a/scripts/plot/backend.m
+++ b/scripts/plot/backend.m
@@ -14,21 +14,21 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} backend (@var{name})
 ## @deftypefnx {Function File} backend (@var{hlist}, @var{name})
-## Change the default graphics backend to @var{name}. If the backend is
+## Change the default graphics backend to @var{name}.  If the backend is
 ## not already loaded, it is first initialized (initialization is done
 ## through the execution of __init_@var{name}__).
 ##
-## @var{hlist} is a list of figure handles. When given, this function
+## @var{hlist} is a list of figure handles.  When given, this function
 ## only switches the default backend for the corresponding figures.
 ## @seealso{available_backends}
 ## @end deftypefn
 
 function backend (varargin)
 
   name = "";
   hlist = [];
diff --git a/scripts/plot/bar.m b/scripts/plot/bar.m
--- a/scripts/plot/bar.m
+++ b/scripts/plot/bar.m
@@ -27,26 +27,26 @@
 ## Produce a bar graph from two vectors of x-y data.
 ##
 ## If only one argument is given, it is taken as a vector of y-values
 ## and the x coordinates are taken to be the indices of the elements.
 ##
 ## The default width of 0.8 for the bars can be changed using @var{w}. 
 ##
 ## If @var{y} is a matrix, then each column of @var{y} is taken to be a
-## separate bar graph plotted on the same graph. By default the columns
-## are plotted side-by-side. This behavior can be changed by the @var{style}
+## separate bar graph plotted on the same graph.  By default the columns
+## are plotted side-by-side.  This behavior can be changed by the @var{style}
 ## argument, which can take the values @code{"grouped"} (the default),
 ## or @code{"stacked"}.
 ##
 ## The optional return value @var{h} provides a handle to the "bar series"
-## object with one handle per column of the variable @var{y}. This
+## object with one handle per column of the variable @var{y}.  This
 ## series allows common elements of the group of bar series objects to
 ## be changed in a single bar series and the same properties are changed
-## in the other "bar series". For example
+## in the other "bar series".  For example
 ##
 ## @example
 ## @group
 ## h = bar (rand (5, 10));
 ## set (h(1), "basevalue", 0.5);
 ## @end group
 ## @end example
 ##
diff --git a/scripts/plot/barh.m b/scripts/plot/barh.m
--- a/scripts/plot/barh.m
+++ b/scripts/plot/barh.m
@@ -26,23 +26,23 @@
 ## Produce a horizontal bar graph from two vectors of x-y data.
 ##
 ## If only one argument is given, it is taken as a vector of y-values
 ## and the x coordinates are taken to be the indices of the elements.
 ##
 ## The default width of 0.8 for the bars can be changed using @var{w}. 
 ##
 ## If @var{y} is a matrix, then each column of @var{y} is taken to be a
-## separate bar graph plotted on the same graph. By default the columns
-## are plotted side-by-side. This behavior can be changed by the @var{style}
+## separate bar graph plotted on the same graph.  By default the columns
+## are plotted side-by-side.  This behavior can be changed by the @var{style}
 ## argument, which can take the values @code{"grouped"} (the default),
 ## or @code{"stacked"}.
 ##
 ## The optional return value @var{h} provides a handle to the bar series
-## object. See @code{bar} for a description of the use of the bar series.
+## object.  See @code{bar} for a description of the use of the bar series.
 ##
 ## The optional input handle @var{h} allows an axis handle to be passed.
 ## Properties of the patch graphics object can be changed using
 ## @var{prop}, @var{val} pairs.
 ##
 ## @seealso{bar, plot}
 ## @end deftypefn
 
diff --git a/scripts/plot/caxis.m b/scripts/plot/caxis.m
--- a/scripts/plot/caxis.m
+++ b/scripts/plot/caxis.m
@@ -18,17 +18,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} caxis (@var{limits})
 ## @deftypefnx {Function File} {} caxis (@var{h}, @dots{})
 ## Set color axis limits for plots.
 ##
 ## The argument @var{limits} should be a 2 element vector specifying the 
 ## lower and upper limits to assign to the first and last value in the
-## colormap. Values outside this range are clamped to the first and last
+## colormap.  Values outside this range are clamped to the first and last
 ## colormap entries. 
 ##
 ## If @var{limits} is 'auto', then automatic colormap scaling is applied,
 ## whereas if @var{limits} is 'manual' the colormap scaling is set to manual.
 ##
 ## Called without any arguments to current color axis limits are returned.
 ##
 ## If an axes handle is passed as the first argument, then operate on
diff --git a/scripts/plot/clabel.m b/scripts/plot/clabel.m
--- a/scripts/plot/clabel.m
+++ b/scripts/plot/clabel.m
@@ -19,33 +19,33 @@
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} clabel (@var{c}, @var{h})
 ## @deftypefnx {Function File} {} clabel (@var{c}, @var{h}, @var{v})
 ## @deftypefnx {Function File} {} clabel (@var{c}, @var{h}, "manual")
 ## @deftypefnx {Function File} {} clabel (@var{c})
 ## @deftypefnx {Function File} {} clabel (@var{c}, @var{h})
 ## @deftypefnx {Function File} {} clabel (@dots{}, @var{prop}, @var{val}, @dots{})
 ## @deftypefnx {Function File} {@var{h} =} clabel (@dots{})
-## Adds labels to the contours of a contour plot. The contour plot is specified
+## Adds labels to the contours of a contour plot.  The contour plot is specified
 ## by the contour matrix @var{c} and optionally the contourgroup object @var{h}
 ## that are returned by @code{contour}, @code{contourf} and @code{contour3}.
 ## The contour labels are rotated and placed in the contour itself.
 ##
-## By default, all contours are labelled. However, the contours to label can be
-## specified by the vector @var{v}. If the "manual" argument is given then
+## By default, all contours are labelled.  However, the contours to label can be
+## specified by the vector @var{v}.  If the "manual" argument is given then
 ## the contours to label can be selected with the mouse.
 ##
 ## Additional property/value pairs that are valid properties of text objects
-## can be given and are passed to the underlying text objects. Additionally,
+## can be given and are passed to the underlying text objects.  Additionally,
 ## the property "LabelSpacing" is available allowing the spacing between labels
-## on a contour (in points) to be specified. The default is 144 points, or 2
+## on a contour (in points) to be specified.  The default is 144 points, or 2
 ## inches.
 ##
 ## The returned value @var{h} is the set of text object that represent the
-## contour labels. The "userdata" property of the text objects contains the
+## contour labels.  The "userdata" property of the text objects contains the
 ## numerical value of the contour label.
 ##
 ## An example of the use of @code{clabel} is
 ##
 ## @example
 ## @group
 ## [c, h] = contour (peaks(), -4 : 6);
 ## clabel (c, h, -4 : 2 : 6, 'fontsize', 12);
diff --git a/scripts/plot/colorbar.m b/scripts/plot/colorbar.m
--- a/scripts/plot/colorbar.m
+++ b/scripts/plot/colorbar.m
@@ -14,21 +14,21 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} colorbar (@var{s})
 ## @deftypefnx {Function File} {} colorbar ("peer", @var{h}, @dots{})
-## Adds a colorbar to the current axes. Valid values for @var{s} are
+## Adds a colorbar to the current axes.  Valid values for @var{s} are
 ##
 ## @table @asis
 ## @item "EastOutside"
-## Place the colorbar outside the plot to the right. This is the default.
+## Place the colorbar outside the plot to the right.  This is the default.
 ## @item "East"
 ## Place the colorbar inside the plot to the right.
 ## @item "WestOutside"
 ## Place the colorbar outside the plot to the left.
 ## @item "West"
 ## Place the colorbar inside the plot to the left.
 ## @item "NorthOutside"
 ## Place the colorbar above the plot.
diff --git a/scripts/plot/comet.m b/scripts/plot/comet.m
--- a/scripts/plot/comet.m
+++ b/scripts/plot/comet.m
@@ -15,24 +15,24 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} comet (@var{y})
 ## @deftypefnx {Function File} {} comet (@var{x}, @var{y})
 ## @deftypefnx {Function File} {} comet (@var{x}, @var{y}, @var{p})
 ## @deftypefnx {Function File} {} comet (@var{ax}, @dots{})
 ## Produce a simple comet style animation along the trajectory provided by 
-## the input coordinate vecors (@var{x}, @var{y}), where @var{x} will default
+## the input coordinate vectors (@var{x}, @var{y}), where @var{x} will default
 ## to the indices of @var{y}.
 ##
 ## The speed of the comet may be controlled by @var{p}, which represents the
-## time which passes as the animation passes from one point to the next. The
+## time which passes as the animation passes from one point to the next.  The
 ## default for @var{p} is 0.1 seconds.
 ##
-## If @var{ax} is specified the animition is produced in that axis rather than
+## If @var{ax} is specified the animation is produced in that axis rather than
 ## the @code{gca}.
 ## @end deftypefn
 
 ## Author: Ben Abbott bpabbott@mac.com
 ## Created: 2008-09-21
 
 function comet (varargin)
 
diff --git a/scripts/plot/compass.m b/scripts/plot/compass.m
--- a/scripts/plot/compass.m
+++ b/scripts/plot/compass.m
@@ -19,17 +19,17 @@
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} compass (@var{u}, @var{v})
 ## @deftypefnx {Function File} {} compass (@var{z})
 ## @deftypefnx {Function File} {} compass (@dots{}, @var{style})
 ## @deftypefnx {Function File} {} compass (@var{h}, @dots{})
 ## @deftypefnx {Function File} {@var{h} =} compass (@dots{})
 ##
 ## Plot the @code{(@var{u}, @var{v})} components of a vector field emanating
-## from the origin of a polar polt. If a single complex argument @var{z} is 
+## from the origin of a polar plot.  If a single complex argument @var{z} is 
 ## given, then @code{@var{u} = real (@var{z})} and @code{@var{v} = imag 
 ## (@var{z})}.
 ##
 ## The style to use for the plot can be defined with a line style @var{style}
 ## in a similar manner to the line styles used with the @code{plot} command.
 ##
 ## The optional return value @var{h} provides a list of handles to the 
 ## the parts of the vector field (body, arrow and marker).
diff --git a/scripts/plot/contour3.m b/scripts/plot/contour3.m
--- a/scripts/plot/contour3.m
+++ b/scripts/plot/contour3.m
@@ -22,17 +22,17 @@
 ## @deftypefnx {Function File} {} contour3 (@var{x}, @var{y}, @var{z})
 ## @deftypefnx {Function File} {} contour3 (@var{x}, @var{y}, @var{z}, @var{vn})
 ## @deftypefnx {Function File} {} contour3 (@dots{}, @var{style})
 ## @deftypefnx {Function File} {} contour3 (@var{h}, @dots{})
 ## @deftypefnx {Function File} {[@var{c}, @var{h}] =} contour3 (@dots{})
 ## Plot level curves (contour lines) of the matrix @var{z}, using the
 ## contour matrix @var{c} computed by @code{contourc} from the same
 ## arguments; see the latter for their interpretation.  The contours are
-## ploted at the Z level corresponding to their contour. The set of
+## plotted at the Z level corresponding to their contour.  The set of
 ## contour levels, @var{c}, is only returned if requested.  For example:
 ##
 ## @example
 ## @group
 ## contour3 (peaks (19));
 ## hold on
 ## surface (peaks (19), "facecolor", "none", "EdgeColor", "black")
 ## colormap hot
diff --git a/scripts/plot/contourc.m b/scripts/plot/contourc.m
--- a/scripts/plot/contourc.m
+++ b/scripts/plot/contourc.m
@@ -21,27 +21,27 @@
 ## Compute isolines (contour lines) of the matrix @var{z}. 
 ## Parameters @var{x}, @var{y} and @var{vn} are optional.
 ##
 ## The return value @var{lev} is a vector of the contour levels.
 ## The return value @var{c} is a 2 by @var{n} matrix containing the
 ## contour lines in the following format
 ##
 ## @example
-## @var{c} = [lev1, x1, x2, ..., levn, x1, x2, ... 
-##      len1, y1, y2, ..., lenn, y1, y2, ...]
+## @var{c} = [lev1, x1, x2, @dots{}, levn, x1, x2, @dots{} 
+##      len1, y1, y2, @dots{}, lenn, y1, y2, @dots{}]
 ## @end example
 ##
 ## @noindent
 ## in which contour line @var{n} has a level (height) of @var{levn} and
 ## length of @var{lenn}.
 ## 
 ## If @var{x} and @var{y} are omitted they are taken as the row/column 
 ## index of @var{z}.  @var{vn} is either a scalar denoting the number of lines 
-## to compute or a vector containing the values of the lines. If only one 
+## to compute or a vector containing the values of the lines.  If only one 
 ## value is wanted, set @code{@var{vn} = [val, val]};
 ## If @var{vn} is omitted it defaults to 10.
 ##
 ## For example,
 ## @example
 ## @group
 ## x = 0:2;
 ## y = x;
diff --git a/scripts/plot/contourf.m b/scripts/plot/contourf.m
--- a/scripts/plot/contourf.m
+++ b/scripts/plot/contourf.m
@@ -30,20 +30,20 @@
 ## Parameters @var{x}, @var{y} and @var{n} or @var{lvl} are optional.
 ##
 ## The return value @var{c} is a 2xn matrix containing the contour lines
 ## as described in the help to the contourc function.
 ##
 ## The return value @var{h} is handle-vector to the patch objects creating
 ## the filled contours.
 ##
-## If @var{x} and @var{y} are ommited they are taken as the row/column
+## If @var{x} and @var{y} are omitted they are taken as the row/column
 ## index of @var{z}.  @var{n} is a scalar denoting the number of lines
 ## to compute.  Alternatively @var{lvl} is a vector containing the
-## contour levels. If only one value (e.g. lvl0) is wanted, set
+## contour levels.  If only one value (e.g., lvl0) is wanted, set
 ## @var{lvl} to [lvl0, lvl0].  If both @var{n} or @var{lvl} are omitted
 ## a default value of 10 contour level is assumed.
 ##
 ## If provided, the filled contours are added to the axes object
 ## @var{ax} instead of the current axis.
 ##
 ## The following example plots filled contours of the @code{peaks}
 ## function.
diff --git a/scripts/plot/cylinder.m b/scripts/plot/cylinder.m
--- a/scripts/plot/cylinder.m
+++ b/scripts/plot/cylinder.m
@@ -25,17 +25,17 @@
 ## Generates three matrices in @code{meshgrid} format, such that
 ## @code{surf (@var{x}, @var{y}, @var{z})} generates a unit cylinder.
 ## The matrices are of size @code{@var{n}+1}-by-@code{@var{n}+1}. 
 ## @var{r} is a vector containing the radius along the z-axis.
 ## If @var{n} or @var{r} are omitted then default values of 20 or [1 1]
 ## are assumed.
 ##
 ## Called with no return arguments, @code{cylinder} calls directly
-## @code{surf (@var{x}, @var{y}, @var{z})}. If an axes handle @var{ax}
+## @code{surf (@var{x}, @var{y}, @var{z})}.  If an axes handle @var{ax}
 ## is passed as the first argument, the surface is plotted to this set
 ## of axes.
 ##
 ## Examples:
 ## @example
 ## disp ("plotting a cone")
 ## [x, y, z] = cylinder (10:-1:0,50);
 ## surf (x, y, z);
diff --git a/scripts/plot/diffuse.m b/scripts/plot/diffuse.m
--- a/scripts/plot/diffuse.m
+++ b/scripts/plot/diffuse.m
@@ -15,17 +15,17 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} diffuse (@var{sx}, @var{sy}, @var{sz}, @var{l})
 ## Calculate diffuse reflection strength of a surface defined by the normal
 ## vector elements @var{sx}, @var{sy}, @var{sz}. 
-## The light vector can be specified using parameter @var{L}. It can be
+## The light vector can be specified using parameter @var{L}.  It can be
 ## given as 2-element vector [azimuth, elevation] in degrees or as 3-element
 ## vector [lx, ly, lz]. 
 ## @seealso{specular, surfl}
 ## @end deftypefn
 
 ## Author: Kai Habel <kai.habel@gmx.de>
 
 function retval = diffuse (sx, sy, sz, lv)
diff --git a/scripts/plot/ellipsoid.m b/scripts/plot/ellipsoid.m
--- a/scripts/plot/ellipsoid.m
+++ b/scripts/plot/ellipsoid.m
@@ -15,19 +15,19 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{x}, @var{y}, @var{z}] =} ellipsoid (@var{xc},@var{yc}, @var{zc}, @var{xr}, @var{yr}, @var{zr}, @var{n})
 ## @deftypefnx {Function File} {} ellipsoid (@var{h}, @dots{})
 ## Generate three matrices in @code{meshgrid} format that define an
-## ellipsoid.   Called with no return arguments, @code{ellipsoid} calls
+## ellipsoid.  Called with no return arguments, @code{ellipsoid} calls
 ## directly @code{surf (@var{x}, @var{y}, @var{z})}.  If an axes handle
-## is passed as the first argument, the the surface is plotted to this
+## is passed as the first argument, the surface is plotted to this
 ## set of axes.
 ## @seealso{sphere}
 ## @end deftypefn
 
 ## Author: Sylvain Pelissier <sylvain.pelissier@gmail.com>
 
 function [xx, yy, zz] = ellipsoid (varargin)
 
diff --git a/scripts/plot/errorbar.m b/scripts/plot/errorbar.m
--- a/scripts/plot/errorbar.m
+++ b/scripts/plot/errorbar.m
@@ -13,50 +13,50 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} errorbar (@var{args})
-## This function produces two-dimensional plots with errorbars. Many
+## This function produces two-dimensional plots with errorbars.  Many
 ## different combinations of arguments are possible.  The simplest form is
 ##
 ## @example
 ## errorbar (@var{y}, @var{ey})
 ## @end example
 ##
 ## @noindent
 ## where the first argument is taken as the set of @var{y} coordinates
 ## and the second argument @var{ey} is taken as the errors of the
-## @var{y} values. @var{x} coordinates are taken to be the indices
+## @var{y} values.  @var{x} coordinates are taken to be the indices
 ## of the elements, starting with 1.
 ##
 ## If more than two arguments are given, they are interpreted as
 ##
 ## @example
 ## errorbar (@var{x}, @var{y}, @dots{}, @var{fmt}, @dots{})
 ## @end example
 ##
 ## @noindent
 ## where after @var{x} and @var{y} there can be up to four error
 ## parameters such as @var{ey}, @var{ex}, @var{ly}, @var{uy} etc.,
-## depending on the plot type. Any number of argument sets may appear,
+## depending on the plot type.  Any number of argument sets may appear,
 ## as long as they are separated with a format string @var{fmt}.
 ##
 ## If @var{y} is a matrix, @var{x} and error parameters must also be matrices
-## having same dimensions. The columns of @var{y} are plotted versus the
+## having same dimensions.  The columns of @var{y} are plotted versus the
 ## corresponding columns of @var{x} and errorbars are drawn from
 ## the corresponding columns of error parameters.
 ##
 ## If @var{fmt} is missing, yerrorbars ("~") plot style is assumed.
 ##
 ## If the @var{fmt} argument is supplied, it is interpreted as in
-## normal plots. In addition the following plot styles are supported by
+## normal plots.  In addition the following plot styles are supported by
 ## errorbar:
 ##
 ## @table @samp
 ## @item ~
 ## Set yerrorbars plot style (default).
 ##
 ## @item >
 ## Set xerrorbars plot style.
diff --git a/scripts/plot/ezcontour.m b/scripts/plot/ezcontour.m
--- a/scripts/plot/ezcontour.m
+++ b/scripts/plot/ezcontour.m
@@ -18,23 +18,23 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} ezcontour (@var{f})
 ## @deftypefnx {Function File} {} ezcontour (@dots{}, @var{dom})
 ## @deftypefnx {Function File} {} ezcontour (@dots{}, @var{n})
 ## @deftypefnx {Function File} {} ezcontour (@var{h}, @dots{})
 ## @deftypefnx {Function File} {@var{h} =} ezcontour (@dots{})
 ##
-## Plots the contour lines of a function. @var{f} is a string, inline function
-## or function handle with two arguments defining the function. By default the
+## Plots the contour lines of a function.  @var{f} is a string, inline function
+## or function handle with two arguments defining the function.  By default the
 ## plot is over the domain @code{-2*pi < @var{x} < 2*pi} and @code{-2*pi < 
 ## @var{y} < 2*pi} with 60 points in each dimension. 
 ##
 ## If @var{dom} is a two element vector, it represents the minimum and maximum
-## value of both @var{x} and @var{y}. If @var{dom} is a four element vector,
+## value of both @var{x} and @var{y}.  If @var{dom} is a four element vector,
 ## then the minimum and maximum value of @var{x} and @var{y} are specify
 ## separately.
 ##
 ## @var{n} is a scalar defining the number of points to use in each dimension.
 ##
 ## The optional return value @var{h} provides a list of handles to the 
 ## the parts of the vector field (body, arrow and marker).
 ##
diff --git a/scripts/plot/ezcontourf.m b/scripts/plot/ezcontourf.m
--- a/scripts/plot/ezcontourf.m
+++ b/scripts/plot/ezcontourf.m
@@ -18,23 +18,23 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} ezcontourf (@var{f})
 ## @deftypefnx {Function File} {} ezcontourf (@dots{}, @var{dom})
 ## @deftypefnx {Function File} {} ezcontourf (@dots{}, @var{n})
 ## @deftypefnx {Function File} {} ezcontourf (@var{h}, @dots{})
 ## @deftypefnx {Function File} {@var{h} =} ezcontourf (@dots{})
 ##
-## Plots the filled contour lines of a function. @var{f} is a string, inline 
-## function or function handle with two arguments defining the function. By 
+## Plots the filled contour lines of a function.  @var{f} is a string, inline 
+## function or function handle with two arguments defining the function.  By 
 ## default the plot is over the domain @code{-2*pi < @var{x} < 2*pi} and 
 ## @code{-2*pi < @var{y} < 2*pi} with 60 points in each dimension. 
 ##
 ## If @var{dom} is a two element vector, it represents the minimum and maximum
-## value of both @var{x} and @var{y}. If @var{dom} is a four element vector,
+## value of both @var{x} and @var{y}.  If @var{dom} is a four element vector,
 ## then the minimum and maximum value of @var{x} and @var{y} are specify
 ## separately.
 ##
 ## @var{n} is a scalar defining the number of points to use in each dimension.
 ##
 ## The optional return value @var{h} provides a list of handles to the 
 ## the parts of the vector field (body, arrow and marker).
 ##
diff --git a/scripts/plot/ezmesh.m b/scripts/plot/ezmesh.m
--- a/scripts/plot/ezmesh.m
+++ b/scripts/plot/ezmesh.m
@@ -20,23 +20,23 @@
 ## @deftypefn {Function File} {} ezmesh (@var{f})
 ## @deftypefnx {Function File} {} ezmesh (@var{fx}, @var{fy}, @var{fz})
 ## @deftypefnx {Function File} {} ezmesh (@dots{}, @var{dom})
 ## @deftypefnx {Function File} {} ezmesh (@dots{}, @var{n})
 ## @deftypefnx {Function File} {} ezmesh (@dots{}, 'circ')
 ## @deftypefnx {Function File} {} ezmesh (@var{h}, @dots{})
 ## @deftypefnx {Function File} {@var{h} =} ezmesh (@dots{})
 ##
-## Plots the mesh defined by a function. @var{f} is a string, inline
-## function or function handle with two arguments defining the function. By 
+## Plots the mesh defined by a function.  @var{f} is a string, inline
+## function or function handle with two arguments defining the function.  By 
 ## default the plot is over the domain @code{-2*pi < @var{x} < 2*pi} and
 ## @code{-2*pi < @var{y} < 2*pi} with 60 points in each dimension. 
 ##
 ## If @var{dom} is a two element vector, it represents the minimum and maximum
-## value of both @var{x} and @var{y}. If @var{dom} is a four element vector,
+## value of both @var{x} and @var{y}.  If @var{dom} is a four element vector,
 ## then the minimum and maximum value of @var{x} and @var{y} are specify
 ## separately.
 ##
 ## @var{n} is a scalar defining the number of points to use in each dimension.
 ##
 ## If three functions are passed, then plot the parametrically defined 
 ## function @code{[@var{fx} (@var{s}, @var{t}), @var{fy} (@var{s}, @var{t}), 
 ## @var{fz} (@var{s}, @var{t})]}. 
diff --git a/scripts/plot/ezmeshc.m b/scripts/plot/ezmeshc.m
--- a/scripts/plot/ezmeshc.m
+++ b/scripts/plot/ezmeshc.m
@@ -20,23 +20,23 @@
 ## @deftypefn {Function File} {} ezmeshc (@var{f})
 ## @deftypefnx {Function File} {} ezmeshc (@var{fx}, @var{fy}, @var{fz})
 ## @deftypefnx {Function File} {} ezmeshc (@dots{}, @var{dom})
 ## @deftypefnx {Function File} {} ezmeshc (@dots{}, @var{n})
 ## @deftypefnx {Function File} {} ezmeshc (@dots{}, 'circ')
 ## @deftypefnx {Function File} {} ezmeshc (@var{h}, @dots{})
 ## @deftypefnx {Function File} {@var{h} =} ezmeshc (@dots{})
 ##
-## Plots the mesh and contour lines defined by a function. @var{f} is a string,
+## Plots the mesh and contour lines defined by a function.  @var{f} is a string,
 ## inline function or function handle with two arguments defining the function.
 ## By default the plot is over the domain @code{-2*pi < @var{x} < 2*pi} and
 ## @code{-2*pi < @var{y} < 2*pi} with 60 points in each dimension. 
 ##
 ## If @var{dom} is a two element vector, it represents the minimum and maximum
-## value of both @var{x} and @var{y}. If @var{dom} is a four element vector,
+## value of both @var{x} and @var{y}.  If @var{dom} is a four element vector,
 ## then the minimum and maximum value of @var{x} and @var{y} are specify
 ## separately.
 ##
 ## @var{n} is a scalar defining the number of points to use in each dimension.
 ##
 ## If three functions are passed, then plot the parametrically defined 
 ## function @code{[@var{fx} (@var{s}, @var{t}), @var{fy} (@var{s}, @var{t}), 
 ## @var{fz} (@var{s}, @var{t})]}. 
diff --git a/scripts/plot/ezplot.m b/scripts/plot/ezplot.m
--- a/scripts/plot/ezplot.m
+++ b/scripts/plot/ezplot.m
@@ -19,25 +19,25 @@
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} ezplot (@var{f})
 ## @deftypefnx {Function File} {} ezplot (@var{fx}, @var{fy})
 ## @deftypefnx {Function File} {} ezplot (@dots{}, @var{dom})
 ## @deftypefnx {Function File} {} ezplot (@dots{}, @var{n})
 ## @deftypefnx {Function File} {} ezplot (@var{h}, @dots{})
 ## @deftypefnx {Function File} {@var{h} =} ezplot (@dots{})
 ##
-## Plots in two-dimensions the curve defined by @var{f}. The function
+## Plots in two-dimensions the curve defined by @var{f}.  The function
 ## @var{f} may be a string, inline function or function handle and can
-## have either one or two variables. If @var{f} has one variable, then 
+## have either one or two variables.  If @var{f} has one variable, then 
 ## the function is plotted over the domain @code{-2*pi < @var{x} < 2*pi}  
 ## with 500 points. 
 ##
 ## If @var{f} has two variables then @code{@var{f}(@var{x},@var{y}) = 0}
 ## is calculated over the meshed domain @code{-2*pi < @var{x} | @var{y}
-## < 2*pi} with 60 by 60 in the mesh. For example
+## < 2*pi} with 60 by 60 in the mesh.  For example
 ##
 ## @example
 ## ezplot (@@(@var{x}, @var{y}) @var{x} .^ 2 - @var{y} .^ 2 - 1)
 ## @end example
 ##
 ## If two functions are passed as strings, inline functions or function
 ## handles, then the parametric function
 ##
@@ -47,17 +47,17 @@
 ## @var{y} = @var{fy} (@var{t})
 ## @end group
 ## @end example
 ##
 ## is plotted over the domain @code{-2*pi < @var{t} < 2*pi} with 500
 ## points. 
 ##
 ## If @var{dom} is a two element vector, it represents the minimum and maximum
-## value of @var{x}, @var{y} and @var{t}. If it is a four element
+## value of @var{x}, @var{y} and @var{t}.  If it is a four element
 ## vector, then the minimum and maximum values of @var{x} and @var{t}
 ## are determined by the first two elements and the minimum and maximum
 ## of @var{y} by the second pair of elements.
 ##
 ## @var{n} is a scalar defining the number of points to use in plotting
 ## the function.
 ##
 ## The optional return value @var{h} provides a list of handles to the 
diff --git a/scripts/plot/ezplot3.m b/scripts/plot/ezplot3.m
--- a/scripts/plot/ezplot3.m
+++ b/scripts/plot/ezplot3.m
@@ -20,22 +20,22 @@
 ## @deftypefn {Function File} {} ezplot3 (@var{fx}, @var{fy}, @var{fz})
 ## @deftypefnx {Function File} {} ezplot3 (@dots{}, @var{dom})
 ## @deftypefnx {Function File} {} ezplot3 (@dots{}, @var{n})
 ## @deftypefnx {Function File} {} ezplot3 (@var{h}, @dots{})
 ## @deftypefnx {Function File} {@var{h} =} ezplot3 (@dots{})
 ##
 ## Plots in three-dimensions the curve defined parametrically. 
 ## @var{fx}, @var{fy}, and @var{fz} are strings, inline functions
-## or function handles with one arguments defining the function. By 
+## or function handles with one arguments defining the function.  By 
 ## default the plot is over the domain @code{-2*pi < @var{x} < 2*pi}  
 ## with 60 points. 
 ##
 ## If @var{dom} is a two element vector, it represents the minimum and maximum
-## value of @var{t}. @var{n} is a scalar defining the number of points to use.
+## value of @var{t}.  @var{n} is a scalar defining the number of points to use.
 ##
 ## The optional return value @var{h} provides a list of handles to the 
 ## the parts of the vector field (body, arrow and marker).
 ##
 ## @example
 ## @group
 ## fx = @@(t) cos (t);
 ## fy = @@(t) sin (t);
diff --git a/scripts/plot/ezpolar.m b/scripts/plot/ezpolar.m
--- a/scripts/plot/ezpolar.m
+++ b/scripts/plot/ezpolar.m
@@ -18,23 +18,23 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} ezpolar (@var{f})
 ## @deftypefnx {Function File} {} ezpolar (@dots{}, @var{dom})
 ## @deftypefnx {Function File} {} ezpolar (@dots{}, @var{n})
 ## @deftypefnx {Function File} {} ezpolar (@var{h}, @dots{})
 ## @deftypefnx {Function File} {@var{h} =} ezpolar (@dots{})
 ##
-## Plots in polar plot defined by a function. The function @var{f} is either
+## Plots in polar plot defined by a function.  The function @var{f} is either
 ## a string, inline function or function handle with one arguments defining 
-## the function. By default the plot is over the domain @code{0 < @var{x} < 
+## the function.  By default the plot is over the domain @code{0 < @var{x} < 
 ## 2*pi} with 60 points. 
 ##
 ## If @var{dom} is a two element vector, it represents the minimum and maximum
-## value of both @var{t}. @var{n} is a scalar defining the number of points to 
+## value of both @var{t}.  @var{n} is a scalar defining the number of points to 
 ## use.
 ##
 ## The optional return value @var{h} provides a list of handles to the 
 ## the parts of the vector field (body, arrow and marker).
 ##
 ## @example
 ## ezpolar (@@(t) 1 + sin (t));
 ## @end example
diff --git a/scripts/plot/ezsurf.m b/scripts/plot/ezsurf.m
--- a/scripts/plot/ezsurf.m
+++ b/scripts/plot/ezsurf.m
@@ -20,23 +20,23 @@
 ## @deftypefn {Function File} {} ezsurf (@var{f})
 ## @deftypefnx {Function File} {} ezsurf (@var{fx}, @var{fy}, @var{fz})
 ## @deftypefnx {Function File} {} ezsurf (@dots{}, @var{dom})
 ## @deftypefnx {Function File} {} ezsurf (@dots{}, @var{n})
 ## @deftypefnx {Function File} {} ezsurf (@dots{}, 'circ')
 ## @deftypefnx {Function File} {} ezsurf (@var{h}, @dots{})
 ## @deftypefnx {Function File} {@var{h} =} ezsurf (@dots{})
 ##
-## Plots the surface defined by a function. @var{f} is a string, inline
-## function or function handle with two arguments defining the function. By 
+## Plots the surface defined by a function.  @var{f} is a string, inline
+## function or function handle with two arguments defining the function.  By 
 ## default the plot is over the domain @code{-2*pi < @var{x} < 2*pi} and
 ## @code{-2*pi < @var{y} < 2*pi} with 60 points in each dimension. 
 ##
 ## If @var{dom} is a two element vector, it represents the minimum and maximum
-## value of both @var{x} and @var{y}. If @var{dom} is a four element vector,
+## value of both @var{x} and @var{y}.  If @var{dom} is a four element vector,
 ## then the minimum and maximum value of @var{x} and @var{y} are specify
 ## separately.
 ##
 ## @var{n} is a scalar defining the number of points to use in each dimension.
 ##
 ## If three functions are passed, then plot the parametrically defined 
 ## function @code{[@var{fx} (@var{s}, @var{t}), @var{fy} (@var{s}, @var{t}), 
 ## @var{fz} (@var{s}, @var{t})]}. 
diff --git a/scripts/plot/ezsurfc.m b/scripts/plot/ezsurfc.m
--- a/scripts/plot/ezsurfc.m
+++ b/scripts/plot/ezsurfc.m
@@ -20,23 +20,23 @@
 ## @deftypefn {Function File} {} ezsurfc (@var{f})
 ## @deftypefnx {Function File} {} ezsurfc (@var{fx}, @var{fy}, @var{fz})
 ## @deftypefnx {Function File} {} ezsurfc (@dots{}, @var{dom})
 ## @deftypefnx {Function File} {} ezsurfc (@dots{}, @var{n})
 ## @deftypefnx {Function File} {} ezsurfc (@dots{}, 'circ')
 ## @deftypefnx {Function File} {} ezsurfc (@var{h}, @dots{})
 ## @deftypefnx {Function File} {@var{h} =} ezsurfc (@dots{})
 ##
-## Plots the surface and contour lines defined by a function. @var{f} is a
+## Plots the surface and contour lines defined by a function.  @var{f} is a
 ## string, inline function or function handle with two arguments defining the
-## function. By default the plot is over the domain @code{-2*pi < @var{x} <
+## function.  By default the plot is over the domain @code{-2*pi < @var{x} <
 ## 2*pi} and @code{-2*pi < @var{y} < 2*pi} with 60 points in each dimension. 
 ##
 ## If @var{dom} is a two element vector, it represents the minimum and maximum
-## value of both @var{x} and @var{y}. If @var{dom} is a four element vector,
+## value of both @var{x} and @var{y}.  If @var{dom} is a four element vector,
 ## then the minimum and maximum value of @var{x} and @var{y} are specify
 ## separately.
 ##
 ## @var{n} is a scalar defining the number of points to use in each dimension.
 ##
 ## If three functions are passed, then plot the parametrically defined 
 ## function @code{[@var{fx} (@var{s}, @var{t}), @var{fy} (@var{s}, @var{t}), 
 ## @var{fz} (@var{s}, @var{t})]}. 
diff --git a/scripts/plot/feather.m b/scripts/plot/feather.m
--- a/scripts/plot/feather.m
+++ b/scripts/plot/feather.m
@@ -19,17 +19,17 @@
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} feather (@var{u}, @var{v})
 ## @deftypefnx {Function File} {} feather (@var{z})
 ## @deftypefnx {Function File} {} feather (@dots{}, @var{style})
 ## @deftypefnx {Function File} {} feather (@var{h}, @dots{})
 ## @deftypefnx {Function File} {@var{h} =} feather (@dots{})
 ##
 ## Plot the @code{(@var{u}, @var{v})} components of a vector field emanating
-## from equidistant points on the x-axis. If a single complex argument
+## from equidistant points on the x-axis.  If a single complex argument
 ## @var{z} is given, then @code{@var{u} = real (@var{z})} and
 ## @code{@var{v} = imag (@var{z})}.
 ##
 ## The style to use for the plot can be defined with a line style @var{style}
 ## in a similar manner to the line styles used with the @code{plot} command.
 ##
 ## The optional return value @var{h} provides a list of handles to the 
 ## the parts of the vector field (body, arrow and marker).
diff --git a/scripts/plot/findobj.m b/scripts/plot/findobj.m
--- a/scripts/plot/findobj.m
+++ b/scripts/plot/findobj.m
@@ -19,43 +19,43 @@
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{h} =} findobj ()
 ## @deftypefnx {Function File} {@var{h} =} findobj (@var{prop_name}, @var{prop_value})
 ## @deftypefnx {Function File} {@var{h} =} findobj ('-property', @var{prop_name})
 ## @deftypefnx {Function File} {@var{h} =} findobj ('-regexp', @var{prop_name}, @var{pattern})
 ## @deftypefnx {Function File} {@var{h} =} findobj ('flat', @dots{})
 ## @deftypefnx {Function File} {@var{h} =} findobj (@var{h}, @dots{})
 ## @deftypefnx {Function File} {@var{h} =} findobj (@var{h}, '-depth', @var{d}, @dots{})
-## Find object with specified property values. The simplest form is
+## Find object with specified property values.  The simplest form is
 ##
 ## @example
 ## findobj (@var{prop_name}, @var{prop_Value})
 ## @end example
 ##
 ## @noindent
 ## which returns all of the handles to the objects with the name 
-## @var{prop_name} and the name @var{prop_Value}. The search can be limited
+## @var{prop_name} and the name @var{prop_Value}.  The search can be limited
 ## to a particular object or set of objects and their descendants by 
 ## passing a handle or set of handles @var{h} as the first argument to 
 ## @code{findobj}.
 ##
 ## The depth of hierarchy of objects to which to search to can be limited
-## with the '-depth' argument. To limit the number depth of the hierarchy
+## with the '-depth' argument.  To limit the number depth of the hierarchy
 ## to search to @var{d} generations of children, and example is
 ##
 ## @example
 ## findobj (@var{h}, '-depth', @var{d}, @var{prop_Name}, @var{prop_Value})
 ## @end example
 ##
 ## Specifying a depth @var{d} of 0, limits the search to the set of object
-## passed in @var{h}. A depth @var{d} of 0 is equivalent to the '-flat'
+## passed in @var{h}.  A depth @var{d} of 0 is equivalent to the '-flat'
 ## argument. 
 ##
 ## A specified logical operator may be applied to the pairs of @var{prop_Name}
-## and @var{prop_Value}. The supported logical operators are '-and', '-or', 
+## and @var{prop_Value}.  The supported logical operators are '-and', '-or', 
 ## '-xor', '-not'.
 ##
 ## The objects may also be matched by comparing a regular expression to the 
 ## property values, where property values that match @code{regexp 
 ## (@var{prop_Value}, @var{pattern})} are returned.  Finally, objects may be 
 ## matched by property name only, using the '-property' option.
 ## @seealso{get, set}
 ## @end deftypefn
diff --git a/scripts/plot/fplot.m b/scripts/plot/fplot.m
--- a/scripts/plot/fplot.m
+++ b/scripts/plot/fplot.m
@@ -20,17 +20,17 @@
 ## @deftypefn {Function File} {} fplot (@var{fn}, @var{limits})
 ## @deftypefnx {Function File} {} fplot (@var{fn}, @var{limits}, @var{tol})
 ## @deftypefnx {Function File} {} fplot (@var{fn}, @var{limits}, @var{n})
 ## @deftypefnx {Function File} {} fplot (@dots{}, @var{fmt})
 ## Plot a function @var{fn}, within the defined limits.  @var{fn}
 ## an be either a string, a function handle or an inline function.
 ## The limits of the plot are given by @var{limits} of the form
 ## @code{[@var{xlo}, @var{xhi}]} or @code{[@var{xlo}, @var{xhi},
-## @var{ylo}, @var{yhi}]}. @var{tol} is the default tolerance to use for the
+## @var{ylo}, @var{yhi}]}.  @var{tol} is the default tolerance to use for the
 ## plot, and if @var{tol} is an integer it is assumed that it defines the 
 ## number points to use in the plot.  The @var{fmt} argument is passed
 ## to the plot command.
 ##
 ## @example
 ##    fplot ("cos", [0, 2*pi])
 ##    fplot ("[cos(x), sin(x)]", [0, 2*pi])
 ## @end example
diff --git a/scripts/plot/gcbf.m b/scripts/plot/gcbf.m
--- a/scripts/plot/gcbf.m
+++ b/scripts/plot/gcbf.m
@@ -14,18 +14,18 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{fig} =} gcbf ()
 ## Return a handle to the figure containing the object whose callback
-## is currently executing. If no callback is executing, this function
-## returns the empty matrix. The handle returned by this function is
+## is currently executing.  If no callback is executing, this function
+## returns the empty matrix.  The handle returned by this function is
 ## the same as the second output argument of gcbo.
 ##
 ##@seealso{gcf, gca, gcbo}
 ##@end deftypefn
 
 function fig = gcbf ()
 
   [dummy, fig] = gcbo ();
diff --git a/scripts/plot/gcbo.m b/scripts/plot/gcbo.m
--- a/scripts/plot/gcbo.m
+++ b/scripts/plot/gcbo.m
@@ -15,22 +15,22 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{h} =} gcbo ()
 ## @deftypefnx {Function File} {[@var{h}, @var{fig}] =} gcbo ()
 ## Return a handle to the object whose callback is currently
-## executing. If no callback is executing, this function returns the
-## empty matrix. This handle is obtained from the root object property
+## executing.  If no callback is executing, this function returns the
+## empty matrix.  This handle is obtained from the root object property
 ## "CallbackObject".
 ##
 ## Additionally return the handle of the figure containing the
-## object whose callback is currently executing. If no callback is
+## object whose callback is currently executing.  If no callback is
 ## executing, the second output is also set to the empty matrix.
 ##
 ##@seealso{gcf, gca, gcbf}
 ##@end deftypefn
 
 function [h, fig] = gcbo ()
 
   h = get (0, "callbackobject");
diff --git a/scripts/plot/ginput.m b/scripts/plot/ginput.m
--- a/scripts/plot/ginput.m
+++ b/scripts/plot/ginput.m
@@ -14,18 +14,18 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{x}, @var{y}, @var{buttons}] =} ginput (@var{n})
 ## Return which mouse buttons were pressed and keys were hit on the current
-## figure. If @var{n} is defined, then wait for @var{n} mouse clicks
-## before returning. If @var{n} is not defined, then @code{ginput} will
+## figure.  If @var{n} is defined, then wait for @var{n} mouse clicks
+## before returning.  If @var{n} is not defined, then @code{ginput} will
 ## loop until the return key is pressed.
 ## @end deftypefn
 
 function varargout = ginput (n)
 
   if (nargin > 1)
     print_usage ();
   endif
diff --git a/scripts/plot/gtext.m b/scripts/plot/gtext.m
--- a/scripts/plot/gtext.m
+++ b/scripts/plot/gtext.m
@@ -14,18 +14,18 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} gtext (@var{s})
 ## @deftypefnx {Function File} {} gtext (@dots{}, @var{prop}, @var{val})
-## Place text on the current figure. The text can be defined by the
-## string @var{s}. If @var{s} is a cell array, each element of the cell
+## Place text on the current figure.  The text can be defined by the
+## string @var{s}.  If @var{s} is a cell array, each element of the cell
 ## array is written to a separate line.
 ##
 ## Additional arguments are passed to the underlying text object as
 ## properties.
 ## @seealso{ginput}
 ## @end deftypefn
 
 function gtext (s, varargin)
diff --git a/scripts/plot/hggroup.m b/scripts/plot/hggroup.m
--- a/scripts/plot/hggroup.m
+++ b/scripts/plot/hggroup.m
@@ -15,18 +15,18 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} hggroup ()
 ## @deftypefnx {Function File} {} hggroup (@var{h})
 ## @deftypefnx {Function File} {} hggroup (@dots{}, @var{property}, @var{value}, @dots{})
-## Create group object with parent @var{h}. If no parent is specified,
-## the group is created in the current axes. Return the handle of the
+## Create group object with parent @var{h}.  If no parent is specified,
+## the group is created in the current axes.  Return the handle of the
 ## group object created.
 ##
 ## Multiple property-value pairs may be specified for the group, but they
 ## must appear in pairs.
 ## @end deftypefn
 
 ## Author: goffioul
 
diff --git a/scripts/plot/hidden.m b/scripts/plot/hidden.m
--- a/scripts/plot/hidden.m
+++ b/scripts/plot/hidden.m
@@ -14,18 +14,18 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} hidden (@var{mode})
 ## @deftypefnx {Function File} {} hidden ()
-## Manipulation the mesh hidden line removal. Called with no argument
-## the hidden line removal is toggled. The argument @var{mode} can be either
+## Manipulation the mesh hidden line removal.  Called with no argument
+## the hidden line removal is toggled.  The argument @var{mode} can be either
 ## 'on' or 'off' and the set of the hidden line removal is set accordingly.
 ## @seealso{mesh, meshc, surf}
 ## @end deftypefn
 
 function retval = hidden (mode)
 
   if (nargin == 0)
     mode = "swap";
diff --git a/scripts/plot/hist.m b/scripts/plot/hist.m
--- a/scripts/plot/hist.m
+++ b/scripts/plot/hist.m
@@ -18,26 +18,26 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} hist (@var{y}, @var{x}, @var{norm})
 ## Produce histogram counts or plots.
 ##
 ## With one vector input argument, plot a histogram of the values with
 ## 10 bins.  The range of the histogram bins is determined by the range
-## of the data.  With one matrix input argument, plot a hystogram where
+## of the data.  With one matrix input argument, plot a histogram where
 ## each bin contains a bar per input column.
 ##
 ## Given a second scalar argument, use that as the number of bins.
 ##
 ## Given a second vector argument, use that as the centers of the bins,
 ## with the width of the bins determined from the adjacent values in
 ## the vector.
 ##
-## If third argument is provided, the histogram is normalised such that
+## If third argument is provided, the histogram is normalized such that
 ## the sum of the bars is equal to @var{norm}.
 ##
 ## Extreme values are lumped in the first and last bins.
 ##
 ## With two output arguments, produce the values @var{nn} and @var{xx} such
 ## that @code{bar (@var{xx}, @var{nn})} will plot the histogram.
 ## @seealso{bar}
 ## @end deftypefn
diff --git a/scripts/plot/linkprop.m b/scripts/plot/linkprop.m
--- a/scripts/plot/linkprop.m
+++ b/scripts/plot/linkprop.m
@@ -14,17 +14,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{hlink} =} linkprop (@var{h}, @var{prop})
 ## Links graphics object properties, such that a change in one is
-## propagated to the others. The properties to link are given as a
+## propagated to the others.  The properties to link are given as a
 ## string of cell string array by @var{prop} and the objects containing
 ## these properties by the handle array @var{h}.
 ##
 ## An example of the use of linkprops is
 ##
 ## @example
 ## @group
 ## x = 0:0.1:10;
diff --git a/scripts/plot/loglogerr.m b/scripts/plot/loglogerr.m
--- a/scripts/plot/loglogerr.m
+++ b/scripts/plot/loglogerr.m
@@ -24,17 +24,17 @@
 ##
 ## @example
 ## loglogerr (@var{x}, @var{y}, @var{ey}, @var{fmt})
 ## @end example
 ##
 ## @noindent
 ## which produces a double logarithm plot of @var{y} versus @var{x} 
 ## with errors in the @var{y}-scale defined by @var{ey} and the plot
-## format defined by @var{fmt}. See errorbar for available formats and 
+## format defined by @var{fmt}.  See errorbar for available formats and 
 ## additional information.
 ## @seealso{errorbar, semilogxerr, semilogyerr}
 ## @end deftypefn
 
 ## Created: 20.2.2001
 ## Author: Teemu Ikonen <tpikonen@pcu.helsinki.fi>
 ## Keywords: errorbar, plotting
 
diff --git a/scripts/plot/ndgrid.m b/scripts/plot/ndgrid.m
--- a/scripts/plot/ndgrid.m
+++ b/scripts/plot/ndgrid.m
@@ -15,17 +15,17 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{y1}, @var{y2}, @dots{},  @var{y}n] =} ndgrid (@var{x1}, @var{x2}, @dots{}, @var{x}n)
 ## @deftypefnx {Function File} {[@var{y1}, @var{y2}, @dots{},  @var{y}n] =} ndgrid (@var{x})
 ## Given n vectors @var{x1}, @dots{} @var{x}n, @code{ndgrid} returns
-## n arrays of dimension n.  The elements of the i-th output argument
+## n arrays of dimension n. The elements of the i-th output argument
 ## contains the elements of the vector @var{x}i repeated over all
 ## dimensions different from the i-th dimension.  Calling ndgrid with
 ## only one input argument @var{x} is equivalent of calling ndgrid with
 ## all n input arguments equal to @var{x}:
 ##
 ## [@var{y1}, @var{y2}, @dots{},  @var{y}n] = ndgrid (@var{x}, @dots{}, @var{x})
 ## @seealso{meshgrid}
 ## @end deftypefn
diff --git a/scripts/plot/pareto.m b/scripts/plot/pareto.m
--- a/scripts/plot/pareto.m
+++ b/scripts/plot/pareto.m
@@ -17,40 +17,40 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} pareto (@var{x})
 ## @deftypefnx {Function File} {} pareto (@var{x}, @var{y})
 ## @deftypefnx {Function File} {} pareto (@var{h}, @dots{})
 ## @deftypefnx {Function File} {@var{h} =} pareto (@dots{})
-## Draw a Pareto chart, also called ABC chart. A Pareto chart is a bar graph 
+## Draw a Pareto chart, also called ABC chart.  A Pareto chart is a bar graph 
 ## used to arrange information in such a way that priorities for process 
-## improvement can be established. It organizes and displays information 
-## to show the relative importance of data. The chart is similar to the 
+## improvement can be established.  It organizes and displays information 
+## to show the relative importance of data.  The chart is similar to the 
 ## histogram or bar chart, except that the bars are arranged in decreasing 
 ## order from left to right along the abscissa.
 ## 
 ## The fundamental idea (Pareto principle) behind the use of Pareto 
 ## diagrams is that the majority of an effect is due to a small subset of the
 ## causes, so for quality improvement the first few (as presented on the 
 ## diagram) contributing causes to a problem usually account for the majority 
-## of the result. Thus, targeting these "major causes" for elimination 
+## of the result.  Thus, targeting these "major causes" for elimination 
 ## results in the most cost-effective improvement scheme.
 ##
-## The data are passed as @var{x} and the abscissa as @var{y}. If @var{y} is
+## The data are passed as @var{x} and the abscissa as @var{y}.  If @var{y} is
 ## absent, then the abscissa are assumed to be @code{1 : length (@var{x})}.
 ## @var{y} can be a string array, a cell array of strings or a numerical
 ## vector.
 ##
 ## An example of the use of @code{pareto} is
 ##
 ## @example
 ## @group
-## Cheese = @{"Cheddar", "Swiss", "Camembert", "Munster", "Stilton", ...
+## Cheese = @{"Cheddar", "Swiss", "Camembert", "Munster", "Stilton", @dots{}
 ##    "Blue"@};
 ## Sold = [105, 30, 70, 10, 15, 20];
 ## pareto(Sold, Cheese);
 ## @end group
 ## @end example
 ## @end deftypefn
 
 function h = pareto (varargin)
diff --git a/scripts/plot/pcolor.m b/scripts/plot/pcolor.m
--- a/scripts/plot/pcolor.m
+++ b/scripts/plot/pcolor.m
@@ -16,33 +16,33 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} pcolor (@var{x}, @var{y}, @var{c})
 ## @deftypefnx {Function File} {} pcolor (@var{c})
 ## Density plot for given matrices @var{x}, and @var{y} from @code{meshgrid} and
 ## a matrix @var{c} corresponding to the @var{x} and @var{y} coordinates of
-## the mesh's vertices. If @var{x} and @var{y} are vectors, then a typical vertex
+## the mesh's vertices.  If @var{x} and @var{y} are vectors, then a typical vertex
 ## is (@var{x}(j), @var{y}(i), @var{c}(i,j)).  Thus, columns of @var{c}
 ## correspond to different @var{x} values and rows of @var{c} correspond
 ## to different @var{y} values.
 ##
 ## The @code{colormap} is scaled to the extents of @var{c}.
 ## Limits may be placed on the color axis by the
 ## command @code{caxis}, or by setting the @code{clim} property of the
 ## parent axis.
 ##
 ## The face color of each cell of the mesh is determined by interpolating
-## the values of @var{c} for the cell's vertices. Contrast this with 
+## the values of @var{c} for the cell's vertices.  Contrast this with 
 ## @code{imagesc} which renders one cell for each element of @var{c}.
 ##
 ## @code{shading} modifies an attribute determining the manner by which the
 ## face color of each cell is interpolated from the values of @var{c},
-## and the visibility of the cells' edges. By default the attribute is
+## and the visibility of the cells' edges.  By default the attribute is
 ## "faceted", which renders a single color for each cell's face with the edge
 ## visible.
 ##
 ## @var{h} is the handle to the surface object.
 ##
 ## @seealso{caxis, contour, meshgrid, imagesc, shading}
 ## @end deftypefn
 
diff --git a/scripts/plot/peaks.m b/scripts/plot/peaks.m
--- a/scripts/plot/peaks.m
+++ b/scripts/plot/peaks.m
@@ -17,39 +17,39 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} peaks ()
 ## @deftypefnx {Function File} {} peaks (@var{n})
 ## @deftypefnx {Function File} {} peaks (@var{x}, @var{y})
 ## @deftypefnx {Function File} {@var{z} =} peaks (@dots{})
 ## @deftypefnx {Function File} {[@var{x}, @var{y}, @var{z}] =} peaks (@dots{})
-## Generate a function with lots of local maxima and minima. The function
+## Generate a function with lots of local maxima and minima.  The function
 ## has the form
 ##
 ## @iftex
 ## @tex
 ## $f(x,y) = 3 (1 - x) ^ 2 e ^ {\left(-x^2 - (y+1)^2\right)} - 10 \left({x \over 5} - x^3 - y^5)\right) - {1 \over 3} e^{\left(-(x+1)^2 - y^2\right)}$
 ## @end tex
 ## @end iftex
 ## @ifnottex
 ## @verbatim
 ## f(x,y) = 3*(1-x)^2*exp(-x^2 - (y+1)^2) ...
 ##          - 10*(x/5 - x^3 - y^5)*exp(-x^2-y^2) ...
 ##          - 1/3*exp(-(x+1)^2 - y^2)
 ## @end verbatim
 ## @end ifnottex
 ##
 ## Called without a return argument, @code{peaks} plots the surface of the 
-## above function using @code{mesh}. If @var{n} is a scalar, the @code{peaks}
+## above function using @code{mesh}.  If @var{n} is a scalar, the @code{peaks}
 ## returns the values of the above function on a @var{n}-by-@var{n} mesh over
-## the range @code{[-3,3]}. The default value for @var{n} is 49.
+## the range @code{[-3,3]}.  The default value for @var{n} is 49.
 ##
 ## If @var{n} is a vector, then it represents the @var{x} and @var{y} values
-## of the grid on which to calculate the above function. The @var{x} and 
+## of the grid on which to calculate the above function.  The @var{x} and 
 ## @var{y} values can be specified separately.
 ## @seealso{surf, mesh, meshgrid}
 ## @end deftypefn
 
 ## Expression for the peaks function was taken from the following paper:
 ## http://www.control.hut.fi/Kurssit/AS-74.115/Material/GENALGgoga.pdf
 
 function [X_out, Y_out, Z_out] = peaks (x, y)
diff --git a/scripts/plot/plot.m b/scripts/plot/plot.m
--- a/scripts/plot/plot.m
+++ b/scripts/plot/plot.m
@@ -129,17 +129,17 @@
 ## @itemx x
 ## @itemx ^
 ## Used in combination with the points or linespoints styles, set the point
 ## style.
 ## @end table
 ##
 ## The @var{fmt} argument may also be used to assign key titles.
 ## To do so, include the desired title between semi-colons after the
-## formatting sequence described above, e.g. "+3;Key Title;"
+## formatting sequence described above, e.g., "+3;Key Title;"
 ## Note that the last semi-colon is required and will generate an error if
 ## it is left out.
 ##
 ## Here are some plot examples:
 ##
 ## @example
 ## plot (x, y, "@@12", x, y2, x, y3, "4", x, y4, "+")
 ## @end example
diff --git a/scripts/plot/plot3.m b/scripts/plot/plot3.m
--- a/scripts/plot/plot3.m
+++ b/scripts/plot/plot3.m
@@ -22,18 +22,18 @@
 ## arguments are possible.  The simplest form is
 ##
 ## @example
 ## plot3 (@var{x}, @var{y}, @var{z})
 ## @end example
 ##
 ## @noindent
 ## in which the arguments are taken to be the vertices of the points to
-## be plotted in three dimensions. If all arguments are vectors of the
-## same length, then a single continuous line is drawn. If all arguments
+## be plotted in three dimensions.  If all arguments are vectors of the
+## same length, then a single continuous line is drawn.  If all arguments
 ## are matrices, then each column of the matrices is treated as a
 ## separate line.  No attempt is made to transpose the arguments to make
 ## the number of rows match.
 ##
 ## If only two arguments are given, as
 ##
 ## @example
 ## plot3 (@var{x}, @var{c})
diff --git a/scripts/plot/plotmatrix.m b/scripts/plot/plotmatrix.m
--- a/scripts/plot/plotmatrix.m
+++ b/scripts/plot/plotmatrix.m
@@ -17,17 +17,17 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} plotmatrix (@var{x}, @var{y})
 ## @deftypefnx {Function File} {} plotmatrix (@var{x})
 ## @deftypefnx {Function File} {} plotmatrix (@dots{}, @var{style})
 ## @deftypefnx {Function File} {} plotmatrix (@var{h}, @dots{})
 ## @deftypefnx {Function File} {[@var{h}, @var{ax}, @var{bigax}, @var{p}, @var{pax}] =} plotmatrix (@dots{})
-## Scatter plot of the columns of one matrix against another. Given the
+## Scatter plot of the columns of one matrix against another.  Given the
 ## arguments @var{x} and @var{y}, that have a matching number of rows,
 ## @code{plotmatrix} plots a set of axes corresponding to
 ##
 ## @example
 ## plot (@var{x} (:, i), @var{y} (:, j)
 ## @end example
 ##
 ## Given a single argument @var{x}, then this is equivalent to 
@@ -37,25 +37,25 @@
 ## @end example
 ##
 ## @noindent
 ## except that the diagonal of the set of axes will be replaced with the
 ## histogram @code{hist (@var{x} (:, i))}.
 ##
 ## The marker to use can be changed with the @var{style} argument, that is a 
 ## string defining a marker in the same manner as the @code{plot}
-## command. If a leading axes handle @var{h} is passed to
+## command.  If a leading axes handle @var{h} is passed to
 ## @code{plotmatrix}, then this axis will be used for the plot.
 ##
 ## The optional return value @var{h} provides handles to the individual
 ## graphics objects in the scatter plots, whereas @var{ax} returns the
-## handles to the scatter plot axis objects. @var{bigax} is a hidden
+## handles to the scatter plot axis objects.  @var{bigax} is a hidden
 ## axis object that surrounds the other axes, such that the commands 
 ## @code{xlabel}, @code{title}, etc, will be associated with this hidden
-## axis. Finally @var{p} returns the graphics objects associated with
+## axis.  Finally @var{p} returns the graphics objects associated with
 ## the histogram and @var{pax} the corresponding axes objects.
 ##
 ## @example
 ## @group
 ## plotmatrix (randn (100, 3), 'g+')
 ## @end group
 ## @end example
 ##
diff --git a/scripts/plot/plotyy.m b/scripts/plot/plotyy.m
--- a/scripts/plot/plotyy.m
+++ b/scripts/plot/plotyy.m
@@ -17,32 +17,32 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} plotyy (@var{x1}, @var{y1}, @var{x2}, @var{y2})
 ## @deftypefnx {Function File} {} plotyy (@dots{}, @var{fun})
 ## @deftypefnx {Function File} {} plotyy (@dots{}, @var{fun1}, @var{fun2})
 ## @deftypefnx {Function File} {} plotyy (@var{h}, @dots{})
 ## @deftypefnx {Function File} {[@var{ax}, @var{h1}, @var{h2}] =} plotyy (@dots{})
-## Plots two sets of data with independent y-axes. The arguments @var{x1} and
+## Plots two sets of data with independent y-axes.  The arguments @var{x1} and
 ## @var{y1} define the arguments for the first plot and @var{x1} and @var{y2}
 ## for the second. 
 ##
 ## By default the arguments are evaluated with 
-## @code{feval (@@plot, @var{x}, @var{y})}. However the type of plot can be
+## @code{feval (@@plot, @var{x}, @var{y})}.  However the type of plot can be
 ## modified with the @var{fun} argument, in which case the plots are
-## generated by @code{feval (@var{fun}, @var{x}, @var{y})}. @var{fun} can be 
+## generated by @code{feval (@var{fun}, @var{x}, @var{y})}.  @var{fun} can be 
 ## a function handle, an inline function or a string of a function name.
 ##
 ## The function to use for each of the plots can be independently defined 
 ## with @var{fun1} and @var{fun2}.
 ##
 ## If given, @var{h} defines the principal axis in which to plot the @var{x1}
-## and @var{y1} data. The return value @var{ax} is a two element vector with
-## the axis handles of the two plots. @var{h1} and @var{h2} are handles to
+## and @var{y1} data.  The return value @var{ax} is a two element vector with
+## the axis handles of the two plots.  @var{h1} and @var{h2} are handles to
 ## the objects generated by the plot commands.
 ##
 ## @example
 ## @group
 ## x = 0:0.1:2*pi; 
 ## y1 = sin (x);
 ## y2 = exp (x - 1);
 ## ax = plotyy (x, y1, x - 1, y2, @@plot, @@semilogy);
diff --git a/scripts/plot/print.m b/scripts/plot/print.m
--- a/scripts/plot/print.m
+++ b/scripts/plot/print.m
@@ -17,30 +17,30 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} print (@var{filename}, @var{options})
 ## @deftypefnx {Function File} {} print (@var{h}, @var{filename}, @var{options})
 ## Print a graph, or save it to a file
 ##
-## @var{filename} defines the file name of the output file. If no
+## @var{filename} defines the file name of the output file.  If no
 ## filename is specified, output is sent to the printer.
 ##
-## @var{h} specifies the figure handle. If no handle is specified
+## @var{h} specifies the figure handle.  If no handle is specified
 ## the handle for the current figure is used.
 ##
 ## @var{options}:
 ## @table @code
 ## @item -P@var{printer}
 ##   Set the @var{printer} name to which the graph is sent if no
 ##   @var{filename} is specified.
 ## @item -color
 ## @itemx -mono
-##   Monochrome or colour lines.
+##   Monochrome or color lines.
 ## @item -solid
 ## @itemx -dashed
 ##   Solid or dashed lines.
 ## @item -portrait
 ## @itemx -landscape
 ##   Plot orientation, as returned by "orient".
 ## @item -d@var{device}
 ##   Output device, where @var{device} is one of:
@@ -112,19 +112,19 @@
 ##   Plot size in pixels for PNG and SVG.  If using the command form of
 ##   the print function, you must quote the @var{xsize},@var{ysize}
 ##   option.  For example, by writing @code{"-S640,480"}.
 ##
 ## @item -F@var{fontname}
 ## @itemx -F@var{fontname}:@var{size}
 ## @itemx -F:@var{size}
 ##   @var{fontname} set the postscript font (for use with postscript,
-##   aifm, corel and fig). By default, 'Helvetica' is set for PS/Aifm,
-##   and 'SwitzerlandLight' for Corel. It can also be 'Times-Roman'.
-##   @var{size} is given in points. @var{fontname} is ignored for the
+##   aifm, corel and fig).  By default, 'Helvetica' is set for PS/Aifm,
+##   and 'SwitzerlandLight' for Corel.  It can also be 'Times-Roman'.
+##   @var{size} is given in points.  @var{fontname} is ignored for the
 ##   fig device.
 ## @end table
 ##
 ## The filename and options can be given in any order.
 ## @end deftypefn
 
 ## Author: Daniel Heiserer <Daniel.heiserer@physik.tu-muenchen.de>
 ## Adapted-By: jwe
diff --git a/scripts/plot/quiver.m b/scripts/plot/quiver.m
--- a/scripts/plot/quiver.m
+++ b/scripts/plot/quiver.m
@@ -21,31 +21,31 @@
 ## @deftypefnx {Function File} {} quiver (@var{x}, @var{y}, @var{u}, @var{v})
 ## @deftypefnx {Function File} {} quiver (@dots{}, @var{s})
 ## @deftypefnx {Function File} {} quiver (@dots{}, @var{style})
 ## @deftypefnx {Function File} {} quiver (@dots{}, 'filled')
 ## @deftypefnx {Function File} {} quiver (@var{h}, @dots{})
 ## @deftypefnx {Function File} {@var{h} =} quiver (@dots{})
 ##
 ## Plot the @code{(@var{u}, @var{v})} components of a vector field in 
-## an @code{(@var{x}, @var{y})} meshgrid. If the grid is uniform, you can 
+## an @code{(@var{x}, @var{y})} meshgrid.  If the grid is uniform, you can 
 ## specify @var{x} and @var{y} as vectors.
 ##
 ## If @var{x} and @var{y} are undefined they are assumed to be
 ## @code{(1:@var{m}, 1:@var{n})} where @code{[@var{m}, @var{n}] = 
 ## size(@var{u})}.
 ##
 ## The variable @var{s} is a scalar defining a scaling factor to use for
-##  the arrows of the field relative to the mesh spacing. A value of 0 
-## disables all scaling. The default value is 1.
+##  the arrows of the field relative to the mesh spacing.  A value of 0 
+## disables all scaling.  The default value is 1.
 ##
 ## The style to use for the plot can be defined with a line style @var{style}
 ## in a similar manner to the line styles used with the @code{plot} command.
 ## If a marker is specified then markers at the grid points of the vectors are
-## printed rather than arrows. If the argument 'filled' is given then the
+## printed rather than arrows.  If the argument 'filled' is given then the
 ## markers as filled.
 ##
 ## The optional return value @var{h} provides a quiver group that
 ## regroups the components of the quiver plot (body, arrow and marker),
 ## and allows them to be changed together
 ##
 ## @example
 ## @group
diff --git a/scripts/plot/quiver3.m b/scripts/plot/quiver3.m
--- a/scripts/plot/quiver3.m
+++ b/scripts/plot/quiver3.m
@@ -21,31 +21,31 @@
 ## @deftypefnx {Function File} {} quiver3 (@var{x}, @var{y}, @var{z}, @var{u}, @var{v}, @var{w})
 ## @deftypefnx {Function File} {} quiver3 (@dots{}, @var{s})
 ## @deftypefnx {Function File} {} quiver3 (@dots{}, @var{style})
 ## @deftypefnx {Function File} {} quiver3 (@dots{}, 'filled')
 ## @deftypefnx {Function File} {} quiver3 (@var{h}, @dots{})
 ## @deftypefnx {Function File} {@var{h} =} quiver3 (@dots{})
 ##
 ## Plot the @code{(@var{u}, @var{v}, @var{w})} components of a vector field in 
-## an @code{(@var{x}, @var{y}), @var{z}} meshgrid. If the grid is uniform, you 
+## an @code{(@var{x}, @var{y}), @var{z}} meshgrid.  If the grid is uniform, you 
 ## can specify @var{x}, @var{y} @var{z} as vectors.
 ##
 ## If @var{x}, @var{y} and @var{z} are undefined they are assumed to be
 ## @code{(1:@var{m}, 1:@var{n}, 1:@var{p})} where @code{[@var{m}, @var{n}] = 
 ## size(@var{u})} and @code{@var{p} = max (size (@var{w}))}.
 ##
 ## The variable @var{s} is a scalar defining a scaling factor to use for
-##  the arrows of the field relative to the mesh spacing. A value of 0 
-## disables all scaling. The default value is 1.
+##  the arrows of the field relative to the mesh spacing.  A value of 0 
+## disables all scaling.  The default value is 1.
 ##
 ## The style to use for the plot can be defined with a line style @var{style}
 ## in a similar manner to the line styles used with the @code{plot} command.
 ## If a marker is specified then markers at the grid points of the vectors are
-## printed rather than arrows. If the argument 'filled' is given then the
+## printed rather than arrows.  If the argument 'filled' is given then the
 ## markers as filled.
 ##
 ## The optional return value @var{h} provides a quiver group that
 ## regroups the components of the quiver plot (body, arrow and marker),
 ## and allows them to be changed together
 ##
 ## @example
 ## @group
diff --git a/scripts/plot/refresh.m b/scripts/plot/refresh.m
--- a/scripts/plot/refresh.m
+++ b/scripts/plot/refresh.m
@@ -14,17 +14,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} refresh ()
 ## @deftypefnx {Function File} {} refresh (@var{h})
-## Refresh a figure, forcing it to be redrawn. Called without an
+## Refresh a figure, forcing it to be redrawn.  Called without an
 ## argument the current figure is redrawn, otherwise the figure pointed
 ## to by @var{h} is redrawn.
 ## @seealso{drawnow}
 ## @end deftypefn
 
 function refresh (h)
 
   if (nargin == 1)
diff --git a/scripts/plot/refreshdata.m b/scripts/plot/refreshdata.m
--- a/scripts/plot/refreshdata.m
+++ b/scripts/plot/refreshdata.m
@@ -16,18 +16,18 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} refreshdata ()
 ## @deftypefnx {Function File} {} refreshdata (@var{h})
 ## @deftypefnx {Function File} {} refreshdata (@var{h}, @var{ws})
 ## Evaluates any datasource properties of the current figure and updates
-## the corresponding data. If call with one or more arguments @var{h} is
-## a scalar or array of figure handles which to refresh. The data
+## the corresponding data.  If call with one or more arguments @var{h} is
+## a scalar or array of figure handles which to refresh.  The data
 ## sources are by default evaluated in the "base" workspace but can also
 ## be set in the "caller" workspace.
 ##
 ## An example of the use of refreshdata is
 ##
 ## @example
 ## @group
 ## x = 0:0.1:10;
diff --git a/scripts/plot/ribbon.m b/scripts/plot/ribbon.m
--- a/scripts/plot/ribbon.m
+++ b/scripts/plot/ribbon.m
@@ -15,17 +15,17 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File}  ribbon (@var{x}, @var{y}, @var{width})
 ## @deftypefnx {Function File}  ribbon (@var{y})
 ## @deftypefnx {Function File}  {@var{h} =} ribbon (@dots{})
-## Plot a ribbon plot for the columns of @var{y} vs. @var{x}. The
+## Plot a ribbon plot for the columns of @var{y} vs.  @var{x}.  The
 ## optional parameter @var{width} specifies the width of a single ribbon
 ## (default is 0.75).  If @var{x} is omitted, a vector containing the
 ## row numbers is assumed (1:rows(Y)).  If requested, return a vector
 ## @var{h} of the handles to the surface objects.
 ## @seealso{gca, colorbar}
 ## @end deftypefn
 
 ## Author: Kai Habel <kai.habel at gmx.de>
diff --git a/scripts/plot/rose.m b/scripts/plot/rose.m
--- a/scripts/plot/rose.m
+++ b/scripts/plot/rose.m
@@ -17,22 +17,22 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} rose (@var{th}, @var{r})
 ## @deftypefnx {Function File} {} rose (@var{h}, @dots{})
 ## @deftypefnx {Function File} {@var{h} =} rose (@dots{})
 ## @deftypefnx {Function File} {[@var{r}, @var{th}] =} rose (@dots{})
 ##
-## Plot an angular histogram. With one vector argument @var{th}, plots the
-## histogram with 20 angular bins. If @var{th} is a matrix, then each column
+## Plot an angular histogram.  With one vector argument @var{th}, plots the
+## histogram with 20 angular bins.  If @var{th} is a matrix, then each column
 ## of @var{th} produces a separate histogram.
 ##
 ## If @var{r} is given and is a scalar, then the histogram is produced with
-## @var{r} bins. If @var{r} is a vector, then the center of each bin are 
+## @var{r} bins.  If @var{r} is a vector, then the center of each bin are 
 ## defined by the values of @var{r}.
 ##
 ## The optional return value @var{h} provides a list of handles to the 
 ## the parts of the vector field (body, arrow and marker).
 ##
 ## If two output arguments are requested, then rather than plotting the 
 ## histogram, the polar vectors necessary to plot the histogram are 
 ## returned.
diff --git a/scripts/plot/scatter.m b/scripts/plot/scatter.m
--- a/scripts/plot/scatter.m
+++ b/scripts/plot/scatter.m
@@ -19,31 +19,31 @@
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} scatter (@var{x}, @var{y}, @var{s}, @var{c})
 ## @deftypefnx {Function File} {} scatter (@dots{}, 'filled')
 ## @deftypefnx {Function File} {} scatter (@dots{}, @var{style})
 ## @deftypefnx {Function File} {} scatter (@dots{}, @var{prop}, @var{val})
 ## @deftypefnx {Function File} {} scatter (@var{h}, @dots{})
 ## @deftypefnx {Function File} {@var{h} =} scatter (@dots{})
 ##
-## Plot a scatter plot of the data. A marker is ploted at each point 
-## defined by the points in the vectors @var{x} and @var{y}. The size of
+## Plot a scatter plot of the data.  A marker is plotted at each point 
+## defined by the points in the vectors @var{x} and @var{y}.  The size of
 ## the markers used is determined by the @var{s}, which can be a scalar, 
-## a vector of the same length of @var{x} and @var{y}. If @var{s} is not 
+## a vector of the same length of @var{x} and @var{y}.  If @var{s} is not 
 ## given or is an empty matrix, then the default value of 8 points is used.
 ##
 ## The color of the markers is determined by @var{c}, which can be a string
 ## defining a fixed color, a 3 element vector giving the red, green and blue 
 ## components of the color, a vector of the same length as @var{x} that gives
 ## a scaled index into the current colormap, or a @var{n}-by-3 matrix defining
 ## the colors of each of the markers individually.
 ##
 ## The marker to use can be changed with the @var{style} argument, that is a 
 ## string defining a marker in the same manner as the @code{plot} command. 
-## If the argument 'filled' is given then the markers as filled. All 
+## If the argument 'filled' is given then the markers as filled.  All 
 ## additional arguments are passed to the underlying patch command.
 ##
 ## The optional return value @var{h} provides a handle to the patch object
 ##
 ## @example
 ## @group
 ## x = randn (100, 1);
 ## y = randn (100, 1);
diff --git a/scripts/plot/scatter3.m b/scripts/plot/scatter3.m
--- a/scripts/plot/scatter3.m
+++ b/scripts/plot/scatter3.m
@@ -19,31 +19,31 @@
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} scatter3 (@var{x}, @var{y}, @var{z}, @var{s}, @var{c})
 ## @deftypefnx {Function File} {} scatter3 (@dots{}, 'filled')
 ## @deftypefnx {Function File} {} scatter3 (@dots{}, @var{style})
 ## @deftypefnx {Function File} {} scatter3 (@dots{}, @var{prop}, @var{val})
 ## @deftypefnx {Function File} {} scatter3 (@var{h}, @dots{})
 ## @deftypefnx {Function File} {@var{h} =} scatter3 (@dots{})
 ##
-## Plot a scatter plot of the data in 3D. A marker is plotted at each point 
-## defined by the points in the vectors @var{x}, @var{y} and @var{z}. The size
+## Plot a scatter plot of the data in 3D.  A marker is plotted at each point 
+## defined by the points in the vectors @var{x}, @var{y} and @var{z}.  The size
 ## of the markers used is determined by @var{s}, which can be a scalar or
-## a vector of the same length of @var{x}, @var{y} and @var{z}. If @var{s} is
+## a vector of the same length of @var{x}, @var{y} and @var{z}.  If @var{s} is
 ## not given or is an empty matrix, then the default value of 8 points is used.
 ##
 ## The color of the markers is determined by @var{c}, which can be a string
 ## defining a fixed color, a 3 element vector giving the red, green and blue 
 ## components of the color, a vector of the same length as @var{x} that gives
 ## a scaled index into the current colormap, or a @var{n}-by-3 matrix defining
 ## the colors of each of the markers individually.
 ##
 ## The marker to use can be changed with the @var{style} argument, that is a 
 ## string defining a marker in the same manner as the @code{plot} command. 
-## If the argument 'filled' is given then the markers as filled. All 
+## If the argument 'filled' is given then the markers as filled.  All 
 ## additional arguments are passed to the underlying patch command.
 ##
 ## The optional return value @var{h} provides a handle to the patch object
 ##
 ## @example
 ## @group
 ## [x, y, z] = peaks (20);
 ## scatter3 (x(:), y(:), z(:), [], z(:));
diff --git a/scripts/plot/semilogxerr.m b/scripts/plot/semilogxerr.m
--- a/scripts/plot/semilogxerr.m
+++ b/scripts/plot/semilogxerr.m
@@ -24,17 +24,17 @@
 ##
 ## @example
 ## semilogxerr (@var{x}, @var{y}, @var{ey}, @var{fmt})
 ## @end example
 ##
 ## @noindent
 ## which produces a semi-logarithm plot of @var{y} versus @var{x}
 ## with errors in the @var{y}-scale defined by @var{ey} and the plot
-## format defined by @var{fmt}. See errorbar for available formats and 
+## format defined by @var{fmt}.  See errorbar for available formats and 
 ## additional information.
 ## @seealso{errorbar, loglogerr semilogyerr}
 ## @end deftypefn
 
 ## Created: 20.2.2001
 ## Author: Teemu Ikonen <tpikonen@pcu.helsinki.fi>
 ## Keywords: errorbar, plotting
 
diff --git a/scripts/plot/shading.m b/scripts/plot/shading.m
--- a/scripts/plot/shading.m
+++ b/scripts/plot/shading.m
@@ -14,17 +14,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} shading (@var{type})
 ## @deftypefnx {Function File} {} shading (@var{ax}, @dots{})
-## Set the shading of surface or patch graphic objects. Valid arguments
+## Set the shading of surface or patch graphic objects.  Valid arguments
 ## for @var{type} are
 ##
 ## @table @code
 ## @item "flat"
 ## Single colored patches with invisible edges.
 ##
 ## @item "faceted"
 ## Single colored patches with visible edges.
diff --git a/scripts/plot/slice.m b/scripts/plot/slice.m
--- a/scripts/plot/slice.m
+++ b/scripts/plot/slice.m
@@ -18,39 +18,39 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} slice (@var{x}, @var{y}, @var{z}, @var{v}, @var{sx}, @var{sy}, @var{sz})
 ## @deftypefnx {Function File} {} slice (@var{x}, @var{y}, @var{z}, @var{v}, @var{xi}, @var{yi}, @var{zi})
 ## @deftypefnx {Function File} {} slice (@var{v}, @var{sx}, @var{sy}, @var{sz})
 ## @deftypefnx {Function File} {} slice (@var{v}, @var{xi}, @var{yi}, @var{zi})
 ## @deftypefnx {Function File} {@var{h} =} slice (@dots{})
 ## @deftypefnx {Function File} {@var{h} =} slice (@dots{}, @var{method})
-## Plot slices of 3D data/scalar fields. Each element of the 3-dimensional 
+## Plot slices of 3D data/scalar fields.  Each element of the 3-dimensional 
 ## array @var{v} represents a scalar value at a location given by the
-## parameters @var{x}, @var{y}, and @var{z}. The parameters @var{x},
+## parameters @var{x}, @var{y}, and @var{z}.  The parameters @var{x},
 ## @var{x}, and @var{z} are either 3-dimensional arrays of the same size
-## as the array @var{v} in the "meshgrid" format or vectors. The
+## as the array @var{v} in the "meshgrid" format or vectors.  The
 ## parameters @var{xi}, etc respect a similar format to @var{x}, etc,
 ## and they represent the points at which the array @var{vi} is
 ## interpolated using interp3. The vectors @var{sx}, @var{sy}, and
 ## @var{sz} contain points of orthogonal slices of the respective axes.
 ##
 ## If @var{x}, @var{y}, @var{z} are omitted, they are assumed to be 
 ## @code{x = 1:size (@var{v}, 2)}, @code{y = 1:size (@var{v}, 1)} and
 ## @code{z = 1:size (@var{v}, 3)}. 
 ##
 ## @var{Method} is one of:
 ##
 ## @table @code
 ## @item "nearest"
-## Return the nearest neighbour.
+## Return the nearest neighbor.
 ## @item "linear"
-## Linear interpolation from nearest neighbours.
+## Linear interpolation from nearest neighbors.
 ## @item "cubic"
-## Cubic interpolation from four nearest neighbours (not implemented yet).
+## Cubic interpolation from four nearest neighbors (not implemented yet).
 ## @item "spline"
 ## Cubic spline interpolation---smooth first and second derivatives
 ## throughout the curve.
 ## @end table
 ##
 ## The default method is @code{"linear"}.
 ## The optional return value @var{h} is a vector of handles to the
 ## surface graphic objects.
diff --git a/scripts/plot/specular.m b/scripts/plot/specular.m
--- a/scripts/plot/specular.m
+++ b/scripts/plot/specular.m
@@ -18,17 +18,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} specular (@var{sx}, @var{sy}, @var{sz}, @var{l}, @var{v})
 ## @deftypefnx {Function File} {} specular (@var{sx}, @var{sy}, @var{sz}, @var{l}, @var{v}, @var{se})
 ## Calculate specular reflection strength of a surface defined by the normal
 ## vector elements @var{sx}, @var{sy}, @var{sz} using Phong's approximation. 
 ## The light and view vectors can be specified using parameter @var{L} and @var{V} respectively.
 ## Both can be given as 2-element vectors [azimuth, elevation] in degrees or as 3-element
-## vector [x, y, z]. An optional 6th argument describes the specular exponent (spread) @var{se}.
+## vector [x, y, z].  An optional 6th argument describes the specular exponent (spread) @var{se}.
 ## @seealso{surfl, diffuse}
 ## @end deftypefn
 
 ## Author: Kai Habel <kai.habel@gmx.de>
 
 function retval = specular (sx, sy, sz, lv, vv, se)
 
   if (nargin < 5 || nargin > 6)
diff --git a/scripts/plot/sphere.m b/scripts/plot/sphere.m
--- a/scripts/plot/sphere.m
+++ b/scripts/plot/sphere.m
@@ -16,22 +16,22 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{x}, @var{y}, @var{z}] =} sphere (@var{n})
 ## @deftypefnx {Function File} {} sphere (@var{h}, @dots{})
 ## Generates three matrices in @code{meshgrid} format, such that 
 ## @code{surf (@var{x}, @var{y}, @var{z})} generates a unit sphere. 
-## The matrices of @code{@var{n}+1}-by-@code{@var{n}+1}. If @var{n} is 
+## The matrices of @code{@var{n}+1}-by-@code{@var{n}+1}.  If @var{n} is 
 ## omitted then a default value of 20 is assumed.
 ##
 ## Called with no return arguments, @code{sphere} call directly 
-## @code{surf (@var{x}, @var{y}, @var{z})}. If an axes handle is passed
-## as the first argument, the the surface is plotted to this set of axes.
+## @code{surf (@var{x}, @var{y}, @var{z})}.  If an axes handle is passed
+## as the first argument, the surface is plotted to this set of axes.
 ## @seealso{peaks}
 ## @end deftypefn
 
 function [xx, yy, zz] = sphere (varargin)
 
   [h, varargin, nargin] = __plt_get_axis_arg__ ((nargout > 0), "sphere", 
 						varargin{:});
   if (nargin > 1)
diff --git a/scripts/plot/spinmap.m b/scripts/plot/spinmap.m
--- a/scripts/plot/spinmap.m
+++ b/scripts/plot/spinmap.m
@@ -14,17 +14,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File}  spinmap (@var{t}, @var{inc})
 ## Cycle the colormap for @var{t} seconds with an increment
-## of @var{inc}.  Both parameters are optional.   The default cycle time
+## of @var{inc}.  Both parameters are optional.  The default cycle time
 ## is 5 seconds and the default increment is 2.
 ##
 ## A higher value of @var{inc} causes a faster cycle through the
 ## colormap.
 ## @seealso{gca, colorbar}
 ## @end deftypefn
 
 ## Author: Kai Habel <kai.habel at gmx.de>
diff --git a/scripts/plot/stem.m b/scripts/plot/stem.m
--- a/scripts/plot/stem.m
+++ b/scripts/plot/stem.m
@@ -14,46 +14,46 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{h} =} stem (@var{x}, @var{y}, @var{linespec})
 ## @deftypefnx {Function File} {@var{h} =} stem (@dots{}, "filled")
-## Plot a stem graph from two vectors of x-y data. If only one argument
+## Plot a stem graph from two vectors of x-y data.  If only one argument
 ## is given, it is taken as the y-values and the x coordinates are taken
-## from the indicies of the elements.
+## from the indices of the elements.
 ##
 ## If @var{y} is a matrix, then each column of the matrix is plotted as
-## a separate stem graph. In this case @var{x} can either be a vector,
+## a separate stem graph.  In this case @var{x} can either be a vector,
 ## the same length as the number of rows in @var{y}, or it can be a
 ## matrix of the same size as @var{y}.
 ##
-## The default color is @code{"r"} (red). The default line style is
-## @code{"-"} and the default marker is @code{"o"}. The line style can
+## The default color is @code{"r"} (red).  The default line style is
+## @code{"-"} and the default marker is @code{"o"}.  The line style can
 ## be altered by the @code{linespec} argument in the same manner as the
-## @code{plot} command. For example
+## @code{plot} command.  For example
 ##
 ## @example
 ## @group
 ## x = 1:10;
 ## y = ones (1, length (x))*2.*x;
 ## stem (x, y, "b");
 ## @end group
 ## @end example
 ##
 ## @noindent
 ## plots 10 stems with heights from 2 to 20 in blue;
 ## 
 ## The return value of @code{stem} is a vector if "stem series" graphics
-## handles, with one handle per column of the variable @var{y}. This
+## handles, with one handle per column of the variable @var{y}.  This
 ## handle regroups the elements of the stem graph together as the
 ## children of the "stem series" handle, allowing them to be altered
-## together. For example
+## together.  For example
 ##
 ## @example
 ## @group
 ## x = [0 : 10].';
 ## y = [sin(x), cos(x)]
 ## h = stem (x, y);
 ## set (h(2), "color", "g");
 ## set (h(1), "basevalue", -1)
diff --git a/scripts/plot/stem3.m b/scripts/plot/stem3.m
--- a/scripts/plot/stem3.m
+++ b/scripts/plot/stem3.m
@@ -25,17 +25,17 @@
 ##
 ## For example,
 ## @example
 ## theta = 0:0.2:6; 
 ## stem3 (cos (theta), sin (theta), theta) 
 ## @end example
 ##
 ## @noindent
-## plots 31 stems with heights from 0 to 6 lying on a circle. Color 
+## plots 31 stems with heights from 0 to 6 lying on a circle.  Color 
 ## definitions with rgb-triples are not valid!
 ## @seealso{bar, barh, stem, plot}
 ## @end deftypefn
 
 function h = stem3 (varargin)
 
   if (nargin < 1 || nargin > 4)
     print_usage ();
diff --git a/scripts/plot/surface.m b/scripts/plot/surface.m
--- a/scripts/plot/surface.m
+++ b/scripts/plot/surface.m
@@ -25,17 +25,17 @@
 ## @deftypefnx {Function File} {} surface (@dots{}, @var{prop}, @var{val})
 ## @deftypefnx {Function File} {} surface (@var{h}, @dots{})
 ## @deftypefnx {Function File} {@var{h} =} surface (@dots{})
 ## Plot a surface graphic object given matrices @var{x}, and @var{y} from 
 ## @code{meshgrid} and a matrix @var{z} corresponding to the @var{x} and 
 ## @var{y} coordinates of the surface.  If @var{x} and @var{y} are vectors,
 ## then a typical vertex  is (@var{x}(j), @var{y}(i), @var{z}(i,j)).  Thus, 
 ## columns of @var{z} correspond to different @var{x} values and rows of 
-## @var{z} correspond to different @var{y} values. If @var{x} and @var{y}
+## @var{z} correspond to different @var{y} values.  If @var{x} and @var{y}
 ## are missing, they are constructed from size of the matrix @var{z}.
 ##
 ## Any additional properties passed are assigned to the surface.
 ## @seealso{surf, mesh, patch, line}
 ## @end deftypefn
 
 ## Author: jwe
 
diff --git a/scripts/plot/surfl.m b/scripts/plot/surfl.m
--- a/scripts/plot/surfl.m
+++ b/scripts/plot/surfl.m
@@ -16,41 +16,41 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} surfl (@var{x}, @var{y}, @var{z})
 ## @deftypefnx {Function File} {} surfl (@var{z})
 ## @deftypefnx {Function File} {} surfl (@var{x}, @var{y}, @var{z}, @var{L})
 ## @deftypefnx {Function File} {} surfl (@var{x}, @var{y}, @var{z}, @var{L}, @var{P})
-## @deftypefnx {Function File} {} surfl (...,"light")
+## @deftypefnx {Function File} {} surfl (@dots{},"light")
 ## Plot a lighted surface given matrices @var{x}, and @var{y} from @code{meshgrid} and
 ## a matrix @var{z} corresponding to the @var{x} and @var{y} coordinates of
 ## the mesh.  If @var{x} and @var{y} are vectors, then a typical vertex
 ## is (@var{x}(j), @var{y}(i), @var{z}(i,j)).  Thus, columns of @var{z}
 ## correspond to different @var{x} values and rows of @var{z} correspond
 ## to different @var{y} values.
 ##
-## The light direction can be specified using @var{L}. It can be
+## The light direction can be specified using @var{L}.  It can be
 ## given as 2-element vector [azimuth, elevation] in degrees or as 3-element vector [lx, ly, lz].
 ## The default value is rotated 45° counter-clockwise from the current view.
 ##
 ## The material properties of the surface can specified using a 4-element vector
 ## @var{P} = [@var{AM} @var{D} @var{SP} @var{exp}] which defaults to
 ## @var{p} = [0.55 0.6 0.4 10]. 
 ## @table @code
 ## @item "AM" strength of ambient light
 ## @item "D" strength of diffuse reflection
 ## @item "SP" strength of specular reflection
 ## @item "EXP" specular exponent
 ## @end table
 ## 
 ## The default lighting mode "cdata", changes the cdata property to give the impression
-## of a lighted surface. Please note: the alternative "light" mode, which creates a light
-## object to iluminate the the surface is not implemented (yet).
+## of a lighted surface.  Please note: the alternative "light" mode, which creates a light
+## object to illuminate the surface is not implemented (yet).
 ##
 ## Example:
 ##
 ## @example
 ## colormap(bone);
 ## surfl(peaks);
 ## shading interp;
 ## @end example
diff --git a/scripts/plot/surfnorm.m b/scripts/plot/surfnorm.m
--- a/scripts/plot/surfnorm.m
+++ b/scripts/plot/surfnorm.m
@@ -16,33 +16,33 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} surfnorm (@var{x}, @var{y}, @var{z})
 ## @deftypefnx {Function File} {} surfnorm (@var{z})
 ## @deftypefnx {Function File} {[@var{nx}, @var{ny}, @var{nz}] =} surfnorm (@dots{})
 ## @deftypefnx {Function File} {} surfnorm (@var{h}, @dots{})
-## Find the vectors normal to a meshgridded surface. The meshed gridded 
-## surface is defined by @var{x}, @var{y}, and @var{z}. If @var{x} and 
+## Find the vectors normal to a meshgridded surface.  The meshed gridded 
+## surface is defined by @var{x}, @var{y}, and @var{z}.  If @var{x} and 
 ## @var{y} are not defined, then it is assumed that they are given by
 ##
 ## @example
 ## [@var{x}, @var{y}] = meshgrid (1:size(@var{z}, 1), 
 ##                      1:size(@var{z}, 2));
 ## @end example
 ##
 ## If no return arguments are requested, a surface plot with the normal 
-## vectors to the surface is plotted. Otherwise the componets of the normal
+## vectors to the surface is plotted.  Otherwise the components of the normal
 ## vectors at the mesh gridded points are returned in @var{nx}, @var{ny},
 ## and @var{nz}.
 ##
 ## The normal vectors are calculated by taking the cross product of the 
-## diagonals of eash of teh quadrilaterals in the meshgrid to find the 
-## normal vectors of the centers of these quadrilaterals. The four nearest
+## diagonals of each of the quadrilaterals in the meshgrid to find the 
+## normal vectors of the centers of these quadrilaterals.  The four nearest
 ## normal vectors to the meshgrid points are then averaged to obtain the 
 ## normal to the surface at the meshgridded points.
 ##
 ## An example of the use of @code{surfnorm} is
 ##
 ## @example
 ## surfnorm (peaks (25));
 ## @end example
diff --git a/scripts/plot/waitforbuttonpress.m b/scripts/plot/waitforbuttonpress.m
--- a/scripts/plot/waitforbuttonpress.m
+++ b/scripts/plot/waitforbuttonpress.m
@@ -13,17 +13,17 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{b} =} waitforbuttonpress ()
-## Wait for button or mouse press.over a figure window. The value of
+## Wait for button or mouse press.over a figure window.  The value of
 ## @var{b} returns 0 if a mouse button was pressed or 1 is a key was
 ## pressed.
 ## @seealso{ginput}
 ## @end deftypefn
 
 ## The original version of this code bore the copyright
 ## Author: Petr Mikulik
 ## License: public domain
diff --git a/scripts/plot/xlabel.m b/scripts/plot/xlabel.m
--- a/scripts/plot/xlabel.m
+++ b/scripts/plot/xlabel.m
@@ -17,17 +17,17 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} xlabel (@var{string})
 ## @deftypefnx {Function File} {} ylabel (@var{string})
 ## @deftypefnx {Function File} {} zlabel (@var{string})
 ## @deftypefnx {Function File} {} xlabel (@var{h}, @var{string})
-## Specify x, y, and z axis labels for the current figure. If @var{h} is
+## Specify x, y, and z axis labels for the current figure.  If @var{h} is
 ## specified then label the axis defined by @var{h}.
 ## @seealso{plot, semilogx, semilogy, loglog, polar, mesh, contour,
 ## bar, stairs, title}
 ## @end deftypefn
 
 ## Author: jwe
 
 function retval = xlabel (varargin)
diff --git a/scripts/plot/xlim.m b/scripts/plot/xlim.m
--- a/scripts/plot/xlim.m
+++ b/scripts/plot/xlim.m
@@ -17,23 +17,23 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{xl} =} xlim ()
 ## @deftypefnx {Function File} {} xlim (@var{xl})
 ## @deftypefnx {Function File} {@var{m} =} xlim ('mode')
 ## @deftypefnx {Function File} {} xlim (@var{m})
 ## @deftypefnx {Function File} {} xlim (@var{h}, @dots{})
-## Get or set the limits of the x axis of the current plot. Called without
+## Get or set the limits of the x axis of the current plot.  Called without
 ## arguments @code{xlim} returns the x axis limits of the current plot.
 ## If passed a two element vector @var{xl}, the limits of the x axis are set
 ## to this value.
 ##
 ## The current mode for calculation of the x axis can be returned with a
-## call @code{xlim ('mode')}, and can be either 'auto' or 'manual'. The 
+## call @code{xlim ('mode')}, and can be either 'auto' or 'manual'.  The 
 ## current plotting mode can be set by passing either 'auto' or 'manual' 
 ## as the argument.
 ##
 ## If passed an handle as the first argument, then operate on this handle
 ## rather than the current axes handle.
 ## @seealso{ylim, zlim, set, get, gca}
 ## @end deftypefn
 
diff --git a/scripts/plot/ylim.m b/scripts/plot/ylim.m
--- a/scripts/plot/ylim.m
+++ b/scripts/plot/ylim.m
@@ -17,23 +17,23 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{xl} =} ylim ()
 ## @deftypefnx {Function File} {} ylim (@var{xl})
 ## @deftypefnx {Function File} {@var{m} =} ylim ('mode')
 ## @deftypefnx {Function File} {} ylim (@var{m})
 ## @deftypefnx {Function File} {} ylim (@var{h}, @dots{})
-## Get or set the limits of the y axis of the current plot. Called without
+## Get or set the limits of the y axis of the current plot.  Called without
 ## arguments @code{ylim} returns the y axis limits of the current plot.
 ## If passed a two element vector @var{xl}, the limits of the y axis are set
 ## to this value.
 ##
 ## The current mode for calculation of the y axis can be returned with a
-## call @code{ylim ('mode')}, and can be either 'auto' or 'manual'. The 
+## call @code{ylim ('mode')}, and can be either 'auto' or 'manual'.  The 
 ## current plotting mode can be set by passing either 'auto' or 'manual' 
 ## as the argument.
 ##
 ## If passed an handle as the first argument, then operate on this handle
 ## rather than the current axes handle.
 ## @seealso{xlim, zlim, set, get, gca}
 ## @end deftypefn
 
diff --git a/scripts/plot/zlim.m b/scripts/plot/zlim.m
--- a/scripts/plot/zlim.m
+++ b/scripts/plot/zlim.m
@@ -17,23 +17,23 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{xl} =} zlim ()
 ## @deftypefnx {Function File} {} zlim (@var{xl})
 ## @deftypefnx {Function File} {@var{m} =} zlim ('mode')
 ## @deftypefnx {Function File} {} zlim (@var{m})
 ## @deftypefnx {Function File} {} zlim (@var{h}, @dots{})
-## Get or set the limits of the z axis of the current plot. Called without
+## Get or set the limits of the z axis of the current plot.  Called without
 ## arguments @code{zlim} returns the z axis limits of the current plot.
 ## If passed a two element vector @var{xl}, the limits of the z axis are set
 ## to this value.
 ##
 ## The current mode for calculation of the z axis can be returned with a
-## call @code{zlim ('mode')}, and can be either 'auto' or 'manual'. The 
+## call @code{zlim ('mode')}, and can be either 'auto' or 'manual'.  The 
 ## current plotting mode can be set by passing either 'auto' or 'manual' 
 ## as the argument.
 ##
 ## If passed an handle as the first argument, then operate on this handle
 ## rather than the current axes handle.
 ## @seealso{xlim, ylim, set, get, gca}
 ## @end deftypefn
 
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -5088,29 +5088,29 @@ Undocumented internal function.\n\
 
   return retval;
 }
 
 DEFUN (addlistener, args, ,
    "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} addlistener (@var{h}, @var{prop}, @var{fcn})\n\
 Register @var{fcn} as listener for the property @var{prop} of the graphics\n\
-object @var{h}. Property listeners are executed (in order of registration)\n\
-when the property is set. The new value is already available when the\n\
+object @var{h}.  Property listeners are executed (in order of registration)\n\
+when the property is set.  The new value is already available when the\n\
 listeners are executed.\n\
 \n\
 @var{prop} must be a string naming a valid property in @var{h}.\n\
 \n\
 @var{fcn} can be a function handle, a string or a cell array whose first\n\
-element is a function handle. If @var{fcn} is a function handle, the\n\
+element is a function handle.  If @var{fcn} is a function handle, the\n\
 corresponding function should accept at least 2 arguments, that will be\n\
-set to the object handle and the empty matrix respectively. If @var{fcn}\n\
-is a string, it must be any valid octave expression. If @var{fcn} is a cell\n\
+set to the object handle and the empty matrix respectively.  If @var{fcn}\n\
+is a string, it must be any valid octave expression.  If @var{fcn} is a cell\n\
 array, the first element must be a function handle with the same signature\n\
-as described above. The next elements of the cell array are passed\n\
+as described above.  The next elements of the cell array are passed\n\
 as additional arguments to the function.\n\
 \n\
 Example:\n\
 \n\
 @example\n\
 function my_listener (h, dummy, p1)\n\
   fprintf (\"my_listener called with p1=%s\\n\", p1);\n\
 endfunction\n\
@@ -5157,17 +5157,17 @@ addlistener (gcf, \"position\", @{@@my_l
 
   return retval;
 }
 
 DEFUN (dellistener, args, ,
    "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} dellistener (@var{h}, @var{prop}, @var{fcn})\n\
 Remove the registration of @var{fcn} as a listener for the property\n\
-@var{prop} of the graphics object @var{h}. The function @var{fcn} must\n\
+@var{prop} of the graphics object @var{h}.  The function @var{fcn} must\n\
 be the same variable (not just the same value), as was passed to the\n\
 original call to @code{addlistener}.\n\
 \n\
 If @var{fcn} is not defined then all listener functions of @var{prop}\n\
 are removed.\n\
 \n\
 Example:\n\
 \n\
@@ -5223,60 +5223,60 @@ dellistener (gcf, \"position\", c);\n\
 
   return retval;
 }
 
 DEFUN (addproperty, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} addproperty (@var{name}, @var{h}, @var{type}, [@var{arg}, @dots{}])\n\
 Create a new property named @var{name} in graphics object @var{h}.\n\
-@var{type} determines the type of the property to create. @var{args}\n\
+@var{type} determines the type of the property to create.  @var{args}\n\
 usually contains the default value of the property, but additional\n\
 arguments might be given, depending on the type of the property.\n\
 \n\
 The supported property types are:\n\
 \n\
 @table @code\n\
 @item string\n\
-A string property. @var{arg} contains the default string value.\n\
+A string property.  @var{arg} contains the default string value.\n\
 @item any\n\
-An un-typed property. This kind of property can hold any octave\n\
-value. @var{args} contains the default value.\n\
+An un-typed property.  This kind of property can hold any octave\n\
+value.  @var{args} contains the default value.\n\
 @item radio\n\
-A string property with a limited set of accepted values. The first\n\
+A string property with a limited set of accepted values.  The first\n\
 argument must be a string with all accepted values separated by\n\
-a vertical bar ('|'). The default value can be marked by enclosing\n\
-it with a '@{' '@}' pair. The default value may also be given as\n\
+a vertical bar ('|').  The default value can be marked by enclosing\n\
+it with a '@{' '@}' pair.  The default value may also be given as\n\
 an optional second string argument.\n\
 @item boolean\n\
-A boolean property. This property type is equivalent to a radio\n\
-property with \"on|off\" as accepted values. @var{arg} contains\n\
+A boolean property.  This property type is equivalent to a radio\n\
+property with \"on|off\" as accepted values.  @var{arg} contains\n\
 the default property value.\n\
 @item double\n\
-A scalar double property. @var{arg} contains the default value.\n\
+A scalar double property.  @var{arg} contains the default value.\n\
 @item handle\n\
-A handle property. This kind of property holds the handle of a\n\
-graphics object. @var{arg} contains the default handle value.\n\
+A handle property.  This kind of property holds the handle of a\n\
+graphics object.  @var{arg} contains the default handle value.\n\
 When no default value is given, the property is initialized to\n\
 the empty matrix.\n\
 @item data\n\
-A data (matrix) property. @var{arg} contains the default data\n\
-value. When no default value is given, the data is initialized to\n\
+A data (matrix) property.  @var{arg} contains the default data\n\
+value.  When no default value is given, the data is initialized to\n\
 the empty matrix.\n\
 @item color\n\
-A color property. @var{arg} contains the default color value.\n\
+A color property.  @var{arg} contains the default color value.\n\
 When no default color is given, the property is set to black.\n\
 An optional second string argument may be given to specify an\n\
 additional set of accepted string values (like a radio property).\n\
 @end table\n\
 \n\
 @var{type} may also be the concatenation of a core object type and\n\
-a valid property name for that object type. The property created\n\
+a valid property name for that object type.  The property created\n\
 then has the same characteristics as the referenced property (type,\n\
-possible values, hidden state@dots{}). This allows to clone an existing\n\
+possible values, hidden state@dots{}).  This allows to clone an existing\n\
 property into the graphics object @var{h}.\n\
 \n\
 Examples:\n\
 \n\
 @example\n\
 addproperty (\"my_property\", gcf, \"string\", \"a string value\");\n\
 addproperty (\"my_radio\", gcf, \"radio\", \"val_1|val_2|@{val_3@}\");\n\
 addproperty (\"my_style\", gcf, \"linelinestyle\", \"--\");\n\
