# HG changeset patch
# User Rik <rik@octave.org>
# Date 1444444085 25200
#      Fri Oct 09 19:28:05 2015 -0700
# Node ID 5fc798a9b32cc020f57ec9e4d1ac7df4bf1a8688
# Parent  7c0e10f035bd74dbfe9451c72bbd083f4917d418
# Parent  45759620a9a541c5e512d64d39d33ff851b8bb96
maint: Periodic merge of stable to default.

diff --git a/doc/interpreter/contributors.in b/doc/interpreter/contributors.in
--- a/doc/interpreter/contributors.in
+++ b/doc/interpreter/contributors.in
@@ -18,16 +18,17 @@ Ben Barrowes
 Alexander Barth
 David Bateman
 Heinz Bauschke
 Julien Bect
 Stefan Beller
 Roman Belov
 Markus Bergholz
 Karl Berry
+Ethan Biery
 David Billinghurst
 Don Bindner
 Jakub Bogusz
 Moritz Borgmann
 Paul Boven
 Richard Bovey
 John Bradshaw
 Marcus Brinkmann
diff --git a/doc/interpreter/stmt.txi b/doc/interpreter/stmt.txi
--- a/doc/interpreter/stmt.txi
+++ b/doc/interpreter/stmt.txi
@@ -536,17 +536,17 @@ executed.
 The following example shows another way to create a vector containing
 the first ten elements of the Fibonacci sequence, this time using the
 @code{for} statement:
 
 @example
 @group
 fib = ones (1, 10);
 for i = 3:10
-  fib (i) = fib (i-1) + fib (i-2);
+  fib(i) = fib(i-1) + fib(i-2);
 endfor
 @end group
 @end example
 
 @noindent
 This code works by first evaluating the expression @code{3:10}, to
 produce a range of values from 3 to 10 inclusive.  Then the variable
 @code{i} is assigned the first element of the range and the body of the
diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -482,24 +482,24 @@ DEFUN (log2, args, nargout,
 Compute the base-2 logarithm of each element of @var{x}.\n\
 \n\
 If called with two output arguments, split @var{x} into\n\
 binary mantissa and exponent so that\n\
 @tex\n\
 ${1 \\over 2} \\le \\left| f \\right| < 1$\n\
 @end tex\n\
 @ifnottex\n\
-@code{1/2 <= abs(f) < 1}\n\
+@w{@code{1/2 <= abs(f) < 1}}\n\
 @end ifnottex\n\
 and @var{e} is an integer.  If\n\
 @tex\n\
 $x = 0$, $f = e = 0$.\n\
 @end tex\n\
 @ifnottex\n\
-@code{x = 0}, @code{f = e = 0}.\n\
+@w{@code{x = 0}}, @w{@code{f = e = 0}}.\n\
 @end ifnottex\n\
 @seealso{pow2, log, log10, exp}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   if (args.length () == 1)
     {
@@ -2588,19 +2588,18 @@ do_permute (const octave_value_list& arg
 }
 
 DEFUN (permute, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} permute (@var{A}, @var{perm})\n\
 Return the generalized transpose for an N-D array object @var{A}.\n\
 \n\
 The permutation vector @var{perm} must contain the elements\n\
-@code{1:ndims (A)} (in any order, but each element must appear only once).\n\
-\n\
-The @var{N}th dimension of @var{A} gets remapped to dimension\n\
+@w{@code{1:ndims (A)}} (in any order, but each element must appear only\n\
+once).  The @var{N}th dimension of @var{A} gets remapped to dimension\n\
 @code{@var{PERM}(@var{N})}.  For example:\n\
 \n\
 @example\n\
 @group\n\
 @var{x} = zeros ([2, 3, 5, 7]);\n\
 size (@var{x})\n\
    @result{}  2   3   5   7\n\
 \n\
@@ -2697,28 +2696,40 @@ Return the number of elements in the obj
 \n\
 Optionally, if indices @var{idx1}, @var{idx2}, @dots{} are supplied,\n\
 return the number of elements that would result from the indexing\n\
 \n\
 @example\n\
 @var{a}(@var{idx1}, @var{idx2}, @dots{})\n\
 @end example\n\
 \n\
-Note that the indices do not have to be numerical.  For example,\n\
+Note that the indices do not have to be scalar numbers.  For example,\n\
 \n\
 @example\n\
 @group\n\
 @var{a} = 1;\n\
 @var{b} = ones (2, 3);\n\
 numel (@var{a}, @var{b})\n\
 @end group\n\
 @end example\n\
 \n\
 @noindent\n\
 will return 6, as this is the number of ways to index with @var{b}.\n\
+Or the index could be the string @qcode{\":\"} which represents the colon\n\
+operator.  For example,\n\
+\n\
+@example\n\
+@group\n\
+@var{a} = ones (5, 3);\n\
+numel (@var{a}, 2, \":\")\n\
+@end group\n\
+@end example\n\
+\n\
+@noindent\n\
+will return 3 as the second row has three column entries.\n\
 \n\
 This method is also called when an object appears as lvalue with cs-list\n\
 indexing, i.e., @code{object@{@dots{}@}} or @code{object(@dots{}).field}.\n\
 @seealso{size}\n\
 @end deftypefn")
 {
   octave_value retval;
   octave_idx_type nargin = args.length ();
@@ -3293,21 +3304,23 @@ Objects of class double or single are fl
 // octave_value member function?
 
 DEFUN (complex, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} complex (@var{x})\n\
 @deftypefnx {Built-in Function} {} complex (@var{re}, @var{im})\n\
 Return a complex value from real arguments.\n\
 \n\
-With 1 real argument @var{x}, return the complex result @code{@var{x} + 0i}.\n\
-\n\
-With 2 real arguments, return the complex result @code{@var{re} + @var{im}}.\n\
+With 1 real argument @var{x}, return the complex result\n\
+@w{@code{@var{x} + 0i}}.\n\
+\n\
+With 2 real arguments, return the complex result\n\
+@w{@code{@var{re} + @var{im}}}.\n\
 @code{complex} can often be more convenient than expressions such as\n\
-@code{a + i*b}.\n\
+@w{@code{a + i*b}}.\n\
 For example:\n\
 \n\
 @example\n\
 @group\n\
 complex ([1, 2], [3, 4])\n\
   @result{} [ 1 + 3i   2 + 4i ]\n\
 @end group\n\
 @end example\n\
@@ -4815,17 +4828,17 @@ DEFUN (I, args, ,
 @deftypefnx {Built-in Function} {} I (@var{n}, @var{m}, @var{k}, @dots{})\n\
 @deftypefnx {Built-in Function} {} I (@dots{}, @var{class})\n\
 Return a scalar, matrix, or N-dimensional array whose elements are all equal\n\
 to the pure imaginary unit, defined as\n\
 @tex\n\
 $\\sqrt{-1}$.\n\
 @end tex\n\
 @ifnottex\n\
-@code{sqrt (-1)}.\n\
+@w{@code{sqrt (-1)}}.\n\
 @end ifnottex\n\
 \n\
 I, and its equivalents i, j, and J, are functions so any of the names may\n\
 be reused for other purposes (such as i for a counter variable).\n\
 \n\
 When called with no arguments, return a scalar with the value @math{i}.\n\
 \n\
 When called with a single argument, return a square matrix with the dimension\n\
@@ -5668,17 +5681,17 @@ or a range.\n\
 
 DEFUN (norm, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} norm (@var{A})\n\
 @deftypefnx {Built-in Function} {} norm (@var{A}, @var{p})\n\
 @deftypefnx {Built-in Function} {} norm (@var{A}, @var{p}, @var{opt})\n\
 Compute the p-norm of the matrix @var{A}.\n\
 \n\
-If the second argument is missing, @code{p = 2} is assumed.\n\
+If the second argument is missing, @w{@code{p = 2}} is assumed.\n\
 \n\
 If @var{A} is a matrix (or sparse matrix):\n\
 \n\
 @table @asis\n\
 @item @var{p} = @code{1}\n\
 1-norm, the largest column sum of the absolute values of @var{A}.\n\
 \n\
 @item @var{p} = @code{2}\n\
@@ -6569,18 +6582,19 @@ matrix.  For example:\n\
          2  1\n\
          3  2\n\
 @end group\n\
 @end example\n\
 \n\
 For equal elements, the indices are such that equal elements are listed\n\
 in the order in which they appeared in the original list.\n\
 \n\
-Sorting of complex entries is done first by magnitude (@code{abs (@var{z})})\n\
-and for any ties by phase angle (@code{angle (z)}).  For example:\n\
+Sorting of complex entries is done first by magnitude\n\
+(@w{@code{abs (@var{z})}}) and for any ties by phase angle\n\
+(@w{@code{angle (z)}}).  For example:\n\
 \n\
 @example\n\
 @group\n\
 sort ([1+i; 1; 1-i])\n\
     @result{} 1 + 0i\n\
        1 - 1i\n\
        1 + 1i\n\
 @end group\n\
@@ -7715,39 +7729,39 @@ do_diff (const octave_value& array, octa
   return retval;
 }
 
 DEFUN (diff, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} diff (@var{x})\n\
 @deftypefnx {Built-in Function} {} diff (@var{x}, @var{k})\n\
 @deftypefnx {Built-in Function} {} diff (@var{x}, @var{k}, @var{dim})\n\
-If @var{x} is a vector of length @math{n}, @code{diff (@var{x})} is the\n\
+If @var{x} is a vector of length @math{n}, @w{@code{diff (@var{x})}} is the\n\
 vector of first differences\n\
 @tex\n\
  $x_2 - x_1, \\ldots{}, x_n - x_{n-1}$.\n\
 @end tex\n\
 @ifnottex\n\
  @var{x}(2) - @var{x}(1), @dots{}, @var{x}(n) - @var{x}(n-1).\n\
 @end ifnottex\n\
 \n\
-If @var{x} is a matrix, @code{diff (@var{x})} is the matrix of column\n\
+If @var{x} is a matrix, @w{@code{diff (@var{x})}} is the matrix of column\n\
 differences along the first non-singleton dimension.\n\
 \n\
-The second argument is optional.  If supplied, @code{diff (@var{x},\n\
-@var{k})}, where @var{k} is a non-negative integer, returns the\n\
-@var{k}-th differences.  It is possible that @var{k} is larger than\n\
-the first non-singleton dimension of the matrix.  In this case,\n\
+The second argument is optional.  If supplied,\n\
+@w{@code{diff (@var{x}, @var{k})}}, where @var{k} is a non-negative integer,\n\
+returns the @var{k}-th differences.  It is possible that @var{k} is larger\n\
+than the first non-singleton dimension of the matrix.  In this case,\n\
 @code{diff} continues to take the differences along the next\n\
 non-singleton dimension.\n\
 \n\
 The dimension along which to take the difference can be explicitly\n\
 stated with the optional variable @var{dim}.  In this case the\n\
 @var{k}-th order differences are calculated along this dimension.\n\
-In the case where @var{k} exceeds @code{size (@var{x}, @var{dim})}\n\
+In the case where @var{k} exceeds @w{@code{size (@var{x}, @var{dim})}}\n\
 an empty matrix is returned.\n\
 @seealso{sort, merge}\n\
 @end deftypefn")
 {
   int nargin = args.length ();
   octave_value retval;
 
   if (nargin < 1 || nargin > 3)
diff --git a/scripts/general/methods.m b/scripts/general/methods.m
--- a/scripts/general/methods.m
+++ b/scripts/general/methods.m
@@ -42,20 +42,24 @@ function mtds = methods (obj)
     ## Could be a classname for an Octave class or Java class.
     ## Try Octave class first.
     mtds_list = __methods__ (obj);
     if (isempty (mtds_list))
       mtds_str = javaMethod ("getMethods", "org.octave.ClassHelper", obj);
       mtds_list = ostrsplit (mtds_str, ';');
     endif
   elseif (isjava (obj))
-    ## FIXME: Function prototype that excepts java obj exists, but doesn't
-    ##        work if obj is java.lang.String.  Convert obj to classname.
-    obj = class (obj);
-    mtds_str = javaMethod ("getMethods", "org.octave.ClassHelper", obj);
+    ## FIXME: Function prototype accepts java obj, but doesn't work if obj
+    ##        is e.g., java.lang.String.  Convert obj to classname then.
+    try
+      mtds_str = javaMethod ("getMethods", "org.octave.ClassHelper", obj);
+    catch
+      obj = class (obj);
+      mtds_str = javaMethod ("getMethods", "org.octave.ClassHelper", obj);
+    end_try_catch
     mtds_list = strsplit (mtds_str, ';');
   else
     error ("methods: Invalid input argument");
   endif
 
   if (nargout == 0)
     classname = ifelse (ischar (obj), obj, class (obj));
     printf ("Methods for class %s:\n", classname);
diff --git a/scripts/io/textread.m b/scripts/io/textread.m
--- a/scripts/io/textread.m
+++ b/scripts/io/textread.m
@@ -138,20 +138,20 @@ function varargout = textread (filename,
        || ! isnumeric (varargin{headerlines + 1}))
       error ("missing or illegal value for 'headerlines'" );
     endif
     ## Avoid conveying floats to fskipl
     varargin{headerlines + 1} = round (varargin{headerlines + 1});
     ## Beware of zero valued headerline, fskipl would skip to EOF
     if (varargin{headerlines + 1} > 0)
       fskipl (fid, varargin{headerlines + 1});
-      varargin(headerlines:headerlines+1) = [];
     elseif (varargin{headerlines + 1} < 0)
       warning ("textread: negative headerline value ignored");
     endif
+    varargin(headerlines:headerlines+1) = [];
   endif
   st_pos = ftell (fid);
 
   ## Read a first file chunk. Rest follows after endofline processing
   [str, count] = fscanf (fid, "%c", BUFLENGTH);
   if (isempty (str) || count < 1)
     warning ("textread: empty file");
     varargout = cell (1, nargout);
diff --git a/scripts/io/textscan.m b/scripts/io/textscan.m
--- a/scripts/io/textscan.m
+++ b/scripts/io/textscan.m
@@ -197,21 +197,21 @@ function [C, position] = textscan (fid, 
          || ! isnumeric (args{headerlines + 1}))
         error ("Missing or illegal value for 'headerlines'" );
       endif
       ## Avoid conveying floats to fskipl
       args{headerlines + 1} = round (args{headerlines + 1});
       if (args{headerlines + 1} > 0)
         ## Beware of zero valued headerline, fskipl would skip to EOF
         fskipl (fid, args{headerlines + 1});
-        args(headerlines:headerlines+1) = [];
         st_pos = ftell (fid);
       elseif (args{headerlines + 1} < 0)
         warning ("textscan.m: negative headerline value ignored");
       endif
+      args(headerlines:headerlines+1) = [];
     endif
     ## Read a first file chunk. Rest follows after endofline processing
     [str, count] = fscanf (fid, "%c", BUFLENGTH);
 
   endif
 
   ## Check for empty result
   if (isempty (str))
diff --git a/scripts/plot/util/__gnuplot_drawnow__.m b/scripts/plot/util/__gnuplot_drawnow__.m
--- a/scripts/plot/util/__gnuplot_drawnow__.m
+++ b/scripts/plot/util/__gnuplot_drawnow__.m
@@ -180,18 +180,18 @@ function enhanced = gnuplot_set_term (pl
           set (h, "units", units);
         end_unwind_protect
         gnuplot_pos = position_in_pixels(1:2);
         gnuplot_size = position_in_pixels(3:4);
         if (! (output_to_screen (term)
                || any (strcmp (term, {"canvas", "emf", "gif", "jpeg", ...
                                       "pbm", "png", "pngcairo", "svg"}))))
           ## Convert to inches
-          gnuplot_pos /= 72;
-          gnuplot_size /= 72;
+          gnuplot_pos = gnuplot_pos / get (0, "screenpixelsperinch");
+          gnuplot_size = gnuplot_size / get (0, "screenpixelsperinch");
         endif
         if (all (gnuplot_size > 0))
           terminals_with_size = {"canvas", "emf", "epslatex", "fig", ...
                                  "gif", "jpeg", "latex", "pbm", "pdf", ...
                                  "pdfcairo", "postscript", "png", ...
                                  "pngcairo", "pstex", "pslatex", "svg", "tikz"};
           if (__gnuplot_has_feature__ ("windows_figure_position"))
             terminals_with_size{end+1} = "windows";
diff --git a/scripts/statistics/base/quantile.m b/scripts/statistics/base/quantile.m
--- a/scripts/statistics/base/quantile.m
+++ b/scripts/statistics/base/quantile.m
@@ -108,18 +108,18 @@
 ##              distribution.
 
 function q = quantile (x, p = [], dim, method = 5)
 
   if (nargin < 1 || nargin > 4)
     print_usage ();
   endif
 
-  if (! (isnumeric (x) || islogical (x)))
-    error ("quantile: X must be a numeric vector or matrix");
+  if (! (isnumeric (x) || islogical (x)) || isempty (x))
+    error ("quantile: X must be a non-empty numeric vector or matrix");
   endif
 
   if (isempty (p))
     p = [0.00 0.25, 0.50, 0.75, 1.00];
   endif
 
   if (! (isnumeric (p) && isvector (p)))
     error ("quantile: P must be a numeric vector");
@@ -316,16 +316,19 @@ endfunction
 %! sx = [2, 3, 4];
 %! x = rand (sx);
 %! dim = 2;
 %! p = 0.5;
 %! yobs = quantile (x, p, dim);
 %! yexp = median (x, dim);
 %! assert (yobs, yexp);
 
+## Bug #45455 
+%!assert (quantile ([1 3 2], 0.5, 1), [1 3 2])
+
 ## Test input validation
 %!error quantile ()
 %!error quantile (1, 2, 3, 4, 5)
 %!error quantile (['A'; 'B'], 10)
 %!error quantile (1:10, [true, false])
 %!error quantile (1:10, ones (2,2))
 %!error quantile (1, 1, 1.5)
 %!error quantile (1, 1, 0)
@@ -353,18 +356,17 @@ function inv = __quantile__ (x, p, metho
   if (isinteger (x) || islogical (x))
     x = double (x);
   endif
 
   ## set shape of quantiles to column vector.
   p = p(:);
 
   ## Save length and set shape of samples.
-  ## FIXME: does sort guarantee that NaN's come at the end?
-  x = sort (x);
+  x = sort (x, 1);
   m = sum (! isnan (x));
   [xr, xc] = size (x);
 
   ## Initialize output values.
   inv = Inf (class (x)) * (-(p < 0) + (p > 1));
   inv = repmat (inv, 1, xc);
 
   ## Do the work.
@@ -426,17 +428,17 @@ function inv = __quantile__ (x, p, metho
             ## Approximately unbiased respecting order statistics.
             p = kron (p, m+0.25) + 0.375;
 
           otherwise
             error ("quantile: Unknown METHOD, '%d'", method);
         endswitch
 
         ## Duplicate single values.
-        imm1 = (mm == 1);
+        imm1 = (mm(1,:) == 1);
         x(2,imm1) = x(1,imm1);
 
         ## Interval indices.
         pi = max (min (floor (p), mm-1), 1);
         pr = max (min (p - pi, 1), 0);
         pi += pcd;
         inv(k,:) = (1-pr) .* x(pi) + pr .* x(pi+1);
     endswitch
