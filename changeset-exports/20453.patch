# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1440014556 14400
#      Wed Aug 19 16:02:36 2015 -0400
# Node ID 92ac2e05f393048a46e6ad8acff54f2dd4b05c18
# Parent  962724eae09112e261e7eb0099a38ba3475fa2fe
* lo-specfun.cc: Reindent comments.

diff --git a/liboctave/numeric/lo-specfun.cc b/liboctave/numeric/lo-specfun.cc
--- a/liboctave/numeric/lo-specfun.cc
+++ b/liboctave/numeric/lo-specfun.cc
@@ -2999,21 +2999,23 @@ FloatComplex rc_log1p (float x)
 {
   const float pi = 3.14159265358979323846f;
   return (x < -1.0f
           ? FloatComplex (gnulib::logf (-(1.0f + x)), pi)
           : FloatComplex (log1pf (x)));
 }
 
 // This algorithm is due to P. J. Acklam.
+//
 // See http://home.online.no/~pjacklam/notes/invnorm/
-// The rational approximation has relative accuracy 1.15e-9 in the whole region.
-// For doubles, it is refined by a single step of Halley's 3rd order method.
-// For single precision, the accuracy is already OK, so we skip it to get
-// faster evaluation.
+//
+// The rational approximation has relative accuracy 1.15e-9 in the whole
+// region.  For doubles, it is refined by a single step of Halley's 3rd
+// order method.  For single precision, the accuracy is already OK, so
+// we skip it to get faster evaluation.
 
 static double do_erfinv (double x, bool refine)
 {
   // Coefficients of rational approximation.
   static const double a[] =
   {
     -2.806989788730439e+01,  1.562324844726888e+02,
     -1.951109208597547e+02,  9.783370457507161e+01,
@@ -3078,19 +3080,20 @@ double erfinv (double x)
   return do_erfinv (x, true);
 }
 
 float erfinv (float x)
 {
   return do_erfinv (x, false);
 }
 
-// The algorthim for erfcinv is an adaptation of the erfinv algorithm above
-// from P. J. Acklam.  It has been modified to run over the different input
-// domain of erfcinv.  See the notes for erfinv for an explanation.
+// The algorthim for erfcinv is an adaptation of the erfinv algorithm
+// above from P. J. Acklam.  It has been modified to run over the
+// different input domain of erfcinv.  See the notes for erfinv for an
+// explanation.
 
 static double do_erfcinv (double x, bool refine)
 {
   // Coefficients of rational approximation.
   static const double a[] =
   {
     -2.806989788730439e+01,  1.562324844726888e+02,
     -1.951109208597547e+02,  9.783370457507161e+01,
@@ -3739,19 +3742,20 @@ ellipj (const Complex& u, double m, Comp
 }
 
 static const double pi = 3.14159265358979323846;
 
 template<class T>
 static T
 Lanczos_approximation_psi (const T zc)
 {
-  // Coefficients for C.Lanczos expansion of psi function from XLiFE++ gammaFunctions
-  // psi_coef[k] = - (2k+1) * lg_coef[k] (see melina++ gamma functions)
-  // -1/12, 3/360,-5/1260, 7/1680,-9/1188, 11*691/360360,-13/156, 15*3617/122400, ? , ?
+  // Coefficients for C.Lanczos expansion of psi function from XLiFE++
+  // gammaFunctions psi_coef[k] = - (2k+1) * lg_coef[k] (see melina++
+  // gamma functions -1/12, 3/360,-5/1260, 7/1680,-9/1188,
+  // 11*691/360360,-13/156, 15*3617/122400, ? , ?
   static const T dg_coeff[10] = {
     -0.83333333333333333e-1, 0.83333333333333333e-2,
     -0.39682539682539683e-2, 0.41666666666666667e-2,
     -0.75757575757575758e-2, 0.21092796092796093e-1,
     -0.83333333333333333e-1, 0.4432598039215686,
     -0.3053954330270122e+1,  0.125318899521531e+2
   };
 
@@ -3841,25 +3845,30 @@ psi (const std::complex<T>& z)
     {
       // Use formula for derivative of LogGamma(z)
       std::complex<T> z_m = z;
       if (z_ra < 8)
         {
           unsigned char n = 8 - z_ra;
           z_m = z + std::complex<T> (n, 0.0);
 
-          // Recurrence formula
-          // for | Re(z) | < 8 , use recursively DiGamma(z) = DiGamma(z+1) - 1/z
+          // Recurrence formula.  For | Re(z) | < 8, use recursively
+          //
+          //   DiGamma(z) = DiGamma(z+1) - 1/z
           std::complex<T> z_p = z + P (n - 1);
           for (unsigned char k = n; k > 0; k--, z_p -= 1.0)
             dgam -= P (1.0) / z_p;
         }
 
-      // for | Re(z) | > 8, use derivative of C.Lanczos expansion for LogGamma
-      // psi(z) = log(z) - 1/(2z) - 1/12z^2 + 3/360z^4 - 5/1260z^6 + 7/1680z^8 - 9/1188z^10 + ...
+      // for | Re(z) | > 8, use derivative of C.Lanczos expansion for
+      // LogGamma
+      //
+      //   psi(z) = log(z) - 1/(2z) - 1/12z^2 + 3/360z^4 - 5/1260z^6
+      //     + 7/1680z^8 - 9/1188z^10 + ...
+      //
       // (Abramowitz&Stegun, page 259, formula 6.3.18
       dgam += Lanczos_approximation_psi (z_m);
     }
   return dgam;
 }
 
 // explicit instantiations
 template Complex psi<double> (const Complex& z);
