# HG changeset patch
# User jwe
# Date 1017781510 0
#      Tue Apr 02 21:05:10 2002 +0000
# Node ID 69b6bd2712776387bb569b30a4983dbac080e7c3
# Parent  c8c1ead8474f966d4bf2b2e466bcf1ad5d05a177
[project @ 2002-04-02 21:05:10 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,16 @@
+2002-04-02  Paul Kienzle <pkienzle@users.sf.net>
+
+        * CmplxQR.cc (ComplexQR::init): Use economy QR decomposition
+	internally when the user requests it.
+	* CmplxQRP.cc (ComplexQRP::init): Ditto.
+	* dbleQR.cc (QR::init): Ditto.
+	* dbleQRP.cc (QRP::init): Ditto.
+
 2002-02-22  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* oct-fftw.cc (octave_fftw::fft2d): Avoid having to find a
 	definition for NULL by passing 0 as the last arg to fftwnd_one.
 	(octave_fftw::ifft2d): Likewise.
 
 2002-02-22  Paul Kienzle <pkienzle@jazz.ncnr.nist.gov>
 
diff --git a/liboctave/CmplxQR.cc b/liboctave/CmplxQR.cc
--- a/liboctave/CmplxQR.cc
+++ b/liboctave/CmplxQR.cc
@@ -69,17 +69,17 @@ ComplexQR::init (const ComplexMatrix& a,
 
   int lwork = 32*n;
   Array<Complex> work (lwork);
   Complex *pwork = work.fortran_vec ();
 
   int info = 0;
 
   ComplexMatrix A_fact;
-  if (m > n)
+  if (m > n && qr_type != QR::economy)
     {
       A_fact.resize (m, m);
       A_fact.insert (a, 0, 0);
     }
   else
     A_fact = a;
 
   Complex *tmp_data = A_fact.fortran_vec ();
@@ -101,41 +101,35 @@ ComplexQR::init (const ComplexMatrix& a,
 
 	  r = A_fact;
 
 	  if (m > n)
 	    r.resize (m, n);
 	}
       else
 	{
-	  volatile int n2;
+	  int n2 = (qr_type == QR::economy) ? min_mn : m;
 
 	  if (qr_type == QR::economy && m > n)
-	    {
-	      n2 = n;
-	      r.resize (n, n, 0.0);
-	    }
+	    r.resize (n, n, 0.0);
 	  else
-	    {
-	      n2 = m;
-	      r.resize (m, n, 0.0);
-	    }
+	    r.resize (m, n, 0.0);
 
 	  for (int j = 0; j < n; j++)
 	    {
 	      int limit = j < min_mn-1 ? j : min_mn-1;
 	      for (int i = 0; i <= limit; i++)
 		r.elem (i, j) = A_fact.elem (i, j);
 	    }
 
-	  lwork = 32*m;
+	  lwork = 32 * n2;
 	  work.resize (lwork);
 	  Complex *pwork = work.fortran_vec ();
 
-	  F77_XFCN (zungqr, ZUNGQR, (m, m, min_mn, tmp_data, m, ptau,
+	  F77_XFCN (zungqr, ZUNGQR, (m, n2, min_mn, tmp_data, m, ptau,
 				     pwork, lwork, info));
 
 	  if (f77_exception_encountered)
 	    (*current_liboctave_error_handler)
 	      ("unrecoverable error in zungqr");
 	  else
 	    {
 	      q = A_fact;
diff --git a/liboctave/CmplxQRP.cc b/liboctave/CmplxQRP.cc
--- a/liboctave/CmplxQRP.cc
+++ b/liboctave/CmplxQRP.cc
@@ -63,27 +63,28 @@ ComplexQRP::init (const ComplexMatrix& a
 
   if (m == 0 || n == 0)
     {
       (*current_liboctave_error_handler)
 	("ComplexQR must have non-empty matrix");
       return;
     }
 
-  Array<Complex> tau (m < n ? m : n);
+  int min_mn = m < n ? m : n;
+  Array<Complex> tau (min_mn);
   Complex *ptau = tau.fortran_vec ();
 
   int lwork = 3*n > 32*m ? 3*n : 32*m;
   Array<Complex> work (lwork);
   Complex *pwork = work.fortran_vec ();
 
   int info = 0;
 
   ComplexMatrix A_fact = a;
-  if (m > n)
+  if (m > n && qr_type != QR::economy)
     A_fact.resize (m, m, 0.0);
 
   Complex *tmp_data = A_fact.fortran_vec ();
 
   Array<double> rwork (2*n);
   double *prwork = rwork.fortran_vec ();
 
   Array<int> jpvt (n, 0);
@@ -109,34 +110,30 @@ ComplexQRP::init (const ComplexMatrix& a
 	}
       else
 	{
 	  p.resize (n, n, 0.0);
 	  for (int j = 0; j < n; j++)
 	    p.elem (jpvt.elem (j) - 1, j) = 1.0;
 	}
 
+      int n2 = (qr_type == QR::economy) ? min_mn : m;
+
       if (qr_type == QR::economy && m > n)
 	r.resize (n, n, 0.0);
       else
 	r.resize (m, n, 0.0);
 
-      int min_mn = m < n ? m : n;
-
       for (int j = 0; j < n; j++)
 	{
 	  int limit = j < min_mn-1 ? j : min_mn-1;
 	  for (int i = 0; i <= limit; i++)
 	    r.elem (i, j) = A_fact.elem (i, j);
 	}
 
-      int n2 = m;
-      if (qr_type == QR::economy)
-	n2 = min_mn;
-
       F77_XFCN (zungqr, ZUNGQR, (m, n2, min_mn, tmp_data, m, ptau,
 				 pwork, lwork, info));
 
       if (f77_exception_encountered)
 	(*current_liboctave_error_handler) ("unrecoverable error in zungqr");
       else
 	{
 	  q = A_fact;
diff --git a/liboctave/dbleQR.cc b/liboctave/dbleQR.cc
--- a/liboctave/dbleQR.cc
+++ b/liboctave/dbleQR.cc
@@ -66,24 +66,19 @@ QR::init (const Matrix& a, QR::type qr_t
   double *ptau = tau.fortran_vec ();
 
   int lwork = 32*n;
   Array<double> work (lwork);
   double *pwork = work.fortran_vec ();
 
   int info = 0;
 
-  Matrix A_fact;
-  if (m > n)
-    {
-      A_fact.resize (m, m);
-      A_fact.insert (a, 0, 0);
-    }
-  else
-    A_fact = a;
+  Matrix A_fact = a;
+  if (m > n && qr_type != QR::economy)
+      A_fact.resize (m, m, 0.0);
 
   double *tmp_data = A_fact.fortran_vec ();
 
   F77_XFCN (dgeqrf, DGEQRF, (m, n, tmp_data, m, ptau, pwork, lwork, info));
 
   if (f77_exception_encountered)
     (*current_liboctave_error_handler) ("unrecoverable error in dgeqrf");
   else
@@ -99,41 +94,35 @@ QR::init (const Matrix& a, QR::type qr_t
 
 	  r = A_fact;
 
 	  if (m > n)
 	    r.resize (m, n);
 	}
       else
 	{
-	  volatile int n2;
+	  int n2 = (qr_type == QR::economy) ? min_mn : m;
 
 	  if (qr_type == QR::economy && m > n)
-	    {
-	      n2 = n;
-	      r.resize (n, n, 0.0);
-	    }
+	    r.resize (n, n, 0.0);
 	  else
-	    {
-	      n2 = m;
-	      r.resize (m, n, 0.0);
-	    }
+	    r.resize (m, n, 0.0);
 
 	  for (int j = 0; j < n; j++)
 	    {
 	      int limit = j < min_mn-1 ? j : min_mn-1;
 	      for (int i = 0; i <= limit; i++)
 		r.elem (i, j) = tmp_data[m*j+i];
 	    }
 
-	  lwork = 32*m;
+	  lwork = 32 * n2;
 	  work.resize (lwork);
 	  double *pwork = work.fortran_vec ();
 
-	  F77_XFCN (dorgqr, DORGQR, (m, m, min_mn, tmp_data, m, ptau,
+	  F77_XFCN (dorgqr, DORGQR, (m, n2, min_mn, tmp_data, m, ptau,
 				     pwork, lwork, info));
 
 	  if (f77_exception_encountered)
 	    (*current_liboctave_error_handler)
 	      ("unrecoverable error in dorgqr");
 	  else
 	    {
 	      q = A_fact;
diff --git a/liboctave/dbleQRP.cc b/liboctave/dbleQRP.cc
--- a/liboctave/dbleQRP.cc
+++ b/liboctave/dbleQRP.cc
@@ -62,27 +62,28 @@ QRP::init (const Matrix& a, QR::type qr_
   int n = a.cols ();
 
   if (m == 0 || n == 0)
     {
       (*current_liboctave_error_handler) ("QR must have non-empty matrix");
       return;
     }
 
-  Array<double> tau (m < n ? m : n);
+  int min_mn = m < n ? m : n;
+  Array<double> tau (min_mn);
   double *ptau = tau.fortran_vec ();
 
   int lwork = 3*n > 32*m ? 3*n : 32*m;
   Array<double> work (lwork);
   double *pwork = work.fortran_vec ();
 
   int info = 0;
 
   Matrix A_fact = a;
-  if (m > n)
+  if (m > n && qr_type != QR::economy)
     A_fact.resize (m, m, 0.0);
 
   double *tmp_data = A_fact.fortran_vec ();
 
   Array<int> jpvt (n, 0);
   int *pjpvt = jpvt.fortran_vec ();
 
   // Code to enforce a certain permutation could go here...
@@ -104,34 +105,30 @@ QRP::init (const Matrix& a, QR::type qr_
 	}
       else
 	{
 	  p.resize (n, n, 0.0);
 	  for (int j = 0; j < n; j++)
 	    p.elem (jpvt.elem (j) - 1, j) = 1.0;
 	}
 
+      int n2 = (qr_type == QR::economy) ? min_mn : m;
+
       if (qr_type == QR::economy && m > n)
 	r.resize (n, n, 0.0);
       else
 	r.resize (m, n, 0.0);
 
-      int min_mn = m < n ? m : n;
-
       for (int j = 0; j < n; j++)
 	{
 	  int limit = j < min_mn-1 ? j : min_mn-1;
 	  for (int i = 0; i <= limit; i++)
 	    r.elem (i, j) = A_fact.elem (i, j);
 	}
 
-      int n2 = m;
-      if (qr_type == QR::economy)
-	n2 = min_mn;
-
       F77_XFCN (dorgqr, DORGQR, (m, n2, min_mn, tmp_data, m, ptau,
 				 pwork, lwork, info));
 
       if (f77_exception_encountered)
 	(*current_liboctave_error_handler) ("unrecoverable error in dorgqr");
       else
 	{
 	  q = A_fact;
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,10 +1,14 @@
 2002-04-02  Paul Kienzle <pkienzle@users.sf.net>
 
+	* linear-algebra/cross.m: Accept nx3 and 3xn matrices, in addition
+	to vectors.  Issue a warning in the case x matches y' but return a
+	column vector as Octave currently does.
+
 	* plot/contour.m: Set default number of levels for contour(x,y,z).
 
 	* control/system/starp.m: Leave more of the documentation
 	processing to texinfo and less to the @format block.
 
 	* image/imagesc.m: Only display image if no output is requested.
 	Code tidying.
 
diff --git a/scripts/linear-algebra/cross.m b/scripts/linear-algebra/cross.m
--- a/scripts/linear-algebra/cross.m
+++ b/scripts/linear-algebra/cross.m
@@ -14,45 +14,58 @@
 ## along with this file.  If not, write to the Free Software Foundation,
 ## 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} cross (@var{x}, @var{y})
 ## Computes the vector cross product of the two 3-dimensional vectors
 ## @var{x} and @var{y}.
 ##
-## A row vector is returned if @var{x} and @var{y} are both row vectors;
-## otherwise, a column vector is returned.
-##
 ## @example
 ## @group
 ## cross ([1,1,0], [0,1,1])
 ##      @result{} [ 1; -1; 1 ]
 ## @end group
 ## @end example
+##
+## If @var{x} and @var{y} are two - dimensional matrices the
+## cross product is applied along the first dimension with 3 elements.
+##
 ## @end deftypefn
 
-## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
+## Author: Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>
 ## Created: 15 October 1994
 ## Adapted-By: jwe
 
 function z = cross (x, y)
-
+	
   if (nargin != 2)
     usage ("cross (x, y)");
   endif
 
-  if (length (x) == 3 && length (y) == 3)
-
-    z = [x(2)*y(3) - x(3)*y(2); x(3)*y(1) - x(1)*y(3); x(1)*y(2) - x(2)*y(1)];
-
-    x_nr = rows (x);
-    y_nr = rows (y);
+  ## XXX COMPATIBILITY XXX opposite behaviour for cross(row,col)
+  ## Swap x and y in the assignments below to get the matlab behaviour.
+  ## Better yet, fix the calling code so that it uses conformant vectors.
+  if (columns(x) == 1 && rows(y) == 1)
+    warning ("cross: taking cross product of column by row");
+    y = y.';
+  elseif (rows(x) == 1 && columns(y) == 1)
+    warning ("cross: taking cross product of row by column");
+    x = x.';
+  endif
 
-    if (x_nr == y_nr && x_nr == 1)
-      z = z.';
+  if (size(x) == size(y))
+    if (rows(x) == 3)
+      z = [ ( x (2,:) .* y (3,:) - x (3,:) .* y (2,:) ) ;
+            ( x (3,:) .* y (1,:) - x (1,:) .* y (3,:) ) ;
+            ( x (1,:) .* y (2,:) - x (2,:) .* y (1,:) ) ];
+    elseif (columns(x) == 3)
+      z = [ ( x (:,2) .* y (:,3) - x (:,3) .* y (:,2) ) , \
+            ( x (:,3) .* y (:,1) - x (:,1) .* y (:,3) ) , \
+            ( x (:,1) .* y (:,2) - x (:,2) .* y (:,1) ) ];
+    else
+      error ("cross: x,y must have dimension nx3 or 3xn");
     endif
-
   else
-    error ("cross: both x and y must be 3-dimensional vectors");
+    error ("cross: x and y must have the same dimensions");
   endif
 
 endfunction
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,12 +1,24 @@
 2002-04-02  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* lex.l, lex.h (parser_end_of_input): New global variable.
+	(reset_parser): Reset it here.
+	* parse.y (input): Set it to TRUE on EOF.
+	(parse_and_executed): Save and restore it, check it to correctly
+	break out of parse-execute loop.
+	(parse_fcn_file): Likewise.
+	(eval_string): Likewise.
+	* toplev.cc (main_loop): Likewise.
+	
+
 	* parse.y (input): Call YYACCEPT for END_OF_INPUT.
+	Return no-op command for bare newline.
 	(parse_and_execute): Handle change in yyparse return value semantics.
+
 	* toplev.cc (main_loop): Likewise.
 
 2002-03-25  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* parse.y (parse_fcn_file): Call error if there is no input file.
 	(parse_and_execute (FILE *): Protect get_input_from_eval_string.
 	Set get_input_from_eval_string to false before calling yyparse.
 	* lex.l (reset_parser): Also skip yyrestart (stdin) if
diff --git a/src/lex.h b/src/lex.h
--- a/src/lex.h
+++ b/src/lex.h
@@ -192,16 +192,19 @@ public:
 
 private:
 
   lexical_feedback (const lexical_feedback&);
 
   lexical_feedback& operator = (const lexical_feedback&);
 };
 
+// TRUE means that we have encountered EOF on the input stream.
+extern bool parser_end_of_input;
+
 // Flags that need to be shared between the lexer and parser.
 extern lexical_feedback lexer_flags;
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -61,16 +61,19 @@ Software Foundation, 59 Temple Place - S
 #include <oct-gperf.h>
 
 #if ! (defined (FLEX_SCANNER) \
        && defined (YY_FLEX_MAJOR_VERSION) && YY_FLEX_MAJOR_VERSION >= 2 \
        && defined (YY_FLEX_MINOR_VERSION) && YY_FLEX_MINOR_VERSION >= 5)
 #error lex.l requires flex version 2.5.4 or later
 #endif
 
+// TRUE means that we have encountered EOF on the input stream.
+bool parser_end_of_input = false;
+
 // Flags that need to be shared between the lexer and parser.
 lexical_feedback lexer_flags;
 
 // Stack to hold tokens so that we can delete them when the parser is
 // reset and avoid growing forever just because we are stashing some
 // information.  This has to appear before lex.h is included, because
 // one of the macros defined there uses token_stack.
 //
@@ -756,16 +759,17 @@ do_comma_insert_check (void)
 
 void
 reset_parser (void)
 {
   // Start off on the right foot.
   BEGIN 0;
   error_state = 0;
   warning_state = 0;
+  parser_end_of_input = false;
 
   // We do want a prompt by default.
   promptflag = 1;
 
   // Error may have occurred inside some brackets, braces, or parentheses.
   nesting_level.clear ();
 
   // Clear out the stack of token info used to track line and column
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -457,30 +457,29 @@ set_stmt_print_flag (tree_statement_list
 // ==============================
 
 input		: input1
 		  {
 		    global_command = $1;
 		    promptflag = 1;
 		    YYACCEPT;
 		  }
-		| END_OF_INPUT
-		  {
-		    global_command = 0;
-		    promptflag = 1;
-		    YYACCEPT;
-		  }
 		| simple_list parse_error
 		  { ABORT_PARSE; }
 		| parse_error
 		  { ABORT_PARSE; }
 		;
 
 input1		: '\n'
 		  { $$ = 0; }
+		| END_OF_INPUT
+		  {
+		    parser_end_of_input = 1;
+		    $$ = 0;
+		  }
 		| simple_list
 		  { $$ = $1; }
 		| simple_list '\n'
 		  { $$ = $1; }
 		| simple_list END_OF_INPUT
 		  { $$ = $1; }
 		;
 
@@ -2727,60 +2726,65 @@ parse_and_execute (FILE *f)
   unwind_protect::add (restore_input_buffer, old_buf);
   unwind_protect::add (delete_input_buffer, new_buf);
 
   switch_to_buffer (new_buf);
 
   unwind_protect_bool (line_editing);
   unwind_protect_bool (input_from_command_line_file);
   unwind_protect_bool (get_input_from_eval_string);
+  unwind_protect_bool (parser_end_of_input);
 
   line_editing = false;
   input_from_command_line_file = false;
   get_input_from_eval_string = false;
+  parser_end_of_input = false;
 
   unwind_protect_ptr (curr_sym_tab);
 
   int retval;
   do
     {
       reset_parser ();
 
       retval = yyparse ();
 
-      if (retval == 0 && global_command)
-	{
-	  global_command->eval ();
-
-	  delete global_command;
-
-	  global_command = 0;
-
-	  bool quit = (tree_return_command::returning
-		       || tree_break_command::breaking);
-
-	  if (tree_return_command::returning)
-	    tree_return_command::returning = 0;
-
-	  if (tree_break_command::breaking)
-	    tree_break_command::breaking--;
-
-	  if (error_state)
+      if (retval == 0)
+        {
+          if (global_command)
 	    {
-	      error ("near line %d of file `%s'", input_line_number,
-		     curr_fcn_file_full_name.c_str ());
-
-	      break;
+	      global_command->eval ();
+
+	      delete global_command;
+
+	      global_command = 0;
+
+	      bool quit = (tree_return_command::returning
+			   || tree_break_command::breaking);
+
+	      if (tree_return_command::returning)
+		tree_return_command::returning = 0;
+
+	      if (tree_break_command::breaking)
+		tree_break_command::breaking--;
+
+	      if (error_state)
+		{
+		  error ("near line %d of file `%s'", input_line_number,
+			 curr_fcn_file_full_name.c_str ());
+
+		  break;
+		}
+
+	      if (quit)
+		break;
 	    }
-
-	  if (quit)
+	  else if (parser_end_of_input)
 	    break;
-	}
-      else
-	break;
+        }
     }
   while (retval == 0);
 
   unwind_protect::run_frame ("parse_and_execute");
 }
 
 static void
 safe_fclose (void *f)
@@ -3136,22 +3140,24 @@ parse_fcn_file (const std::string& ff, b
 
 	  unwind_protect::add (restore_command_history, 0);
 
 	  unwind_protect_int (Vecho_executing_commands);
 	  unwind_protect_bool (Vsaving_history);
 	  unwind_protect_bool (reading_fcn_file);
 	  unwind_protect_bool (input_from_command_line_file);
 	  unwind_protect_bool (get_input_from_eval_string);
+	  unwind_protect_bool (parser_end_of_input);
 
 	  Vecho_executing_commands = ECHO_OFF;
 	  Vsaving_history = false;
 	  reading_fcn_file = true;
 	  input_from_command_line_file = false;
 	  get_input_from_eval_string = false;
+	  parser_end_of_input = false;
 
 	  YY_BUFFER_STATE old_buf = current_buffer ();
 	  YY_BUFFER_STATE new_buf = create_buffer (ffile);
 
 	  unwind_protect::add (restore_input_buffer, (void *) old_buf);
 	  unwind_protect::add (delete_input_buffer, (void *) new_buf);
 
 	  switch_to_buffer (new_buf);
@@ -3401,21 +3407,23 @@ eval_string (const std::string& s, bool 
 {
   octave_value_list retval;
 
   unwind_protect::begin_frame ("eval_string");
 
   unwind_protect_bool (get_input_from_eval_string);
   unwind_protect_bool (input_from_eval_string_pending);
   unwind_protect_bool (input_from_command_line_file);
+  unwind_protect_bool (parser_end_of_input);
   unwind_protect_str (current_eval_string);
 
   get_input_from_eval_string = true;
   input_from_eval_string_pending = true;
   input_from_command_line_file = false;
+  parser_end_of_input = false;
   current_eval_string = s;
 
   unwind_protect_ptr (global_command);
 
   YY_BUFFER_STATE old_buf = current_buffer ();
   YY_BUFFER_STATE new_buf = create_buffer (0);
 
   unwind_protect::add (restore_input_buffer, old_buf);
@@ -3426,32 +3434,35 @@ eval_string (const std::string& s, bool 
   unwind_protect_ptr (curr_sym_tab);
 
   do
     {
       parse_status = yyparse ();
 
       tree_statement_list *command = global_command;
 
-      if (parse_status == 0 && command)
+      if (parse_status == 0)
         {
-	  retval = command->eval (silent, nargout);
-
-	  delete command;
-
-	  command = 0;
-
-	  if (error_state
-	      || tree_return_command::returning
-	      || tree_break_command::breaking
-	      || tree_continue_command::continuing)
+	  if (command)
+	    {
+	      retval = command->eval (silent, nargout);
+
+	      delete command;
+
+	      command = 0;
+
+	      if (error_state
+		  || tree_return_command::returning
+		  || tree_break_command::breaking
+		  || tree_continue_command::continuing)
+		break;
+	    }
+	  else if (parser_end_of_input)
 	    break;
-	}
-      else
-	break;
+        }
     }
   while (parse_status == 0);
 
   unwind_protect::run_frame ("eval_string");
 
   return retval;
 }
 
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -120,58 +120,61 @@ main_loop (void)
   do
     {
       curr_sym_tab = top_level_sym_tab;
 
       reset_parser ();
 
       retval = yyparse ();
 
-      if (retval == 0 && global_command)
+      if (retval == 0)
 	{
-	  global_command->eval ();
-
-	  delete global_command;
-
-	  global_command = 0;
-
-	  if (! (interactive || forced_interactive))
+	  if (global_command)
 	    {
-	      bool quit = (tree_return_command::returning
-			   || tree_break_command::breaking);
+	      global_command->eval ();
 
-	      if (tree_return_command::returning)
-		tree_return_command::returning = 0;
-
-	      if (tree_break_command::breaking)
-		tree_break_command::breaking--;
+	      delete global_command;
 
-	      if (quit)
-		break;
-	    }
+	      global_command = 0;
 
-	  if (error_state)
-	    {
 	      if (! (interactive || forced_interactive))
 		{
-		  // We should exit with a non-zero status.
-		  retval = 1;
-		  break;
+		  bool quit = (tree_return_command::returning
+			       || tree_break_command::breaking);
+
+		  if (tree_return_command::returning)
+		    tree_return_command::returning = 0;
+
+		  if (tree_break_command::breaking)
+		    tree_break_command::breaking--;
+
+		  if (quit)
+		    break;
+		}
+
+	      if (error_state)
+		{
+		  if (! (interactive || forced_interactive))
+		    {
+		      // We should exit with a non-zero status.
+		      retval = 1;
+		      break;
+		    }
+		}
+	      else
+		{
+		  if (octave_completion_matches_called)
+		    octave_completion_matches_called = false;	    
+		  else
+		    command_editor::increment_current_command_number ();
 		}
 	    }
-	  else
-	    {
-	      if (octave_completion_matches_called)
-		octave_completion_matches_called = false;	    
-	      else
-		command_editor::increment_current_command_number ();
-	    }
+	  else if (parser_end_of_input)
+	    break;
 	}
-      else
-	break;
     }
   while (retval == 0);
 
   return retval;
 }
 
 // Fix up things before exiting.
 
diff --git a/test/octave.test/linalg/linalg.exp b/test/octave.test/linalg/linalg.exp
--- a/test/octave.test/linalg/linalg.exp
+++ b/test/octave.test/linalg/linalg.exp
@@ -181,16 +181,20 @@ do_test qr-4.m
 set test qr-5
 set prog_output "\n... qr:.*"
 do_test qr-5.m
 
 set test qr-6
 set prog_output "\n... qr:.*"
 do_test qr-6.m
 
+set test qr-7
+set prog_output "ans = 1";
+do_test qr-7.m
+
 set test schur-1
 set prog_output "ans = 1"
 do_test schur-1.m
 
 set test schur-2
 set prog_output "\n... schur:.*"
 do_test schur-2.m
 
