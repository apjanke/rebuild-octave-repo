# HG changeset patch
# User jwe
# Date 1150777916 0
#      Tue Jun 20 04:31:56 2006 +0000
# Node ID 2b35a7fe93021736fb6e8f0575a62de2d4146334
# Parent  2a6cb4ed8f1ec746fdcd20add6fde8b7b00ea8ff
[project @ 2006-06-20 04:31:56 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2006-06-20  John W. Eaton  <jwe@octave.org>
+
+	* ov-re-mat.cc (octave_matrix::convert_to_str_internal):
+	Don't lose empty dimensions on conversion to char.
+
+	* strfns.cc (Fstrcmp): Handle comparison of cellstr and empty string.
+
 2006-06-16  John W. Eaton  <jwe@octave.org>
 
 	* parse.y (%union): New type, anon_fcn_handle_type.
 	(anon_fcn_handle): Now anon_fcn_handle_type, not tree_constant_type.
 	(make_anon_fcn_handle):	Return tree_anon_fcn_handle, not tree_constant.
 
 	* comment-list.cc (octave_comment_list::dup): New function.
 	* comment-list.h: Provide decl.
diff --git a/src/ov-re-mat.cc b/src/ov-re-mat.cc
--- a/src/ov-re-mat.cc
+++ b/src/ov-re-mat.cc
@@ -196,64 +196,56 @@ octave_matrix::streamoff_array_value (vo
   return retval;
 }
 
 octave_value
 octave_matrix::convert_to_str_internal (bool, bool, char type) const
 {
   octave_value retval;
   dim_vector dv = dims ();
-  int nel = dv.numel ();
+  octave_idx_type nel = dv.numel ();
+
+  charNDArray chm (dv);
 
-  if (nel == 0)
-    {
-      char s = '\0';
-      retval = octave_value (&s, type);
-    }
-  else
+  bool warned = false;
+
+  for (octave_idx_type i = 0; i < nel; i++)
     {
-      charNDArray chm (dv);
-	  
-      bool warned = false;
+      OCTAVE_QUIT;
+
+      double d = matrix (i);
 
-      for (octave_idx_type i = 0; i < nel; i++)
+      if (xisnan (d))
+	{
+	  ::error ("invalid conversion from NaN to character");
+	  return retval;
+	}
+      else
 	{
-	  OCTAVE_QUIT;
+	  int ival = NINT (d);
 
-	  double d = matrix (i);
+	  if (ival < 0 || ival > UCHAR_MAX)
+	    {
+	      // FIXME -- is there something
+	      // better we could do?
 
-	  if (xisnan (d))
-	    {
-	      ::error ("invalid conversion from NaN to character");
-	      return retval;
+	      ival = 0;
+
+	      if (! warned)
+		{
+		  ::warning ("range error for conversion to character value");
+		  warned = true;
+		}
 	    }
-	  else
-	    {
-	      int ival = NINT (d);
-
-	      if (ival < 0 || ival > UCHAR_MAX)
-		{
-		  // FIXME -- is there something
-		  // better we could do?
-
-		  ival = 0;
 
-		  if (! warned)
-		    {
-		      ::warning ("range error for conversion to character value");
-		      warned = true;
-		    }
-		}
+	  chm (i) = static_cast<char> (ival);
+	}
+    }
 
-	      chm (i) = static_cast<char> (ival);
-	    }
-	}
-
-      retval = octave_value (chm, true, type);
-    }
+  retval = octave_value (chm, true, type);
 
   return retval;
 }
 
 static Matrix
 strip_infnan (const Matrix& m)
 {
   octave_idx_type nr = m.rows ();
diff --git a/src/strfns.cc b/src/strfns.cc
--- a/src/strfns.cc
+++ b/src/strfns.cc
@@ -224,25 +224,27 @@ This is just the opposite of the corresp
 	    }
 	  else
 	    {
 	      str = args(1).all_strings ();
 	      r = args(1).rows ();
 	      cell = args(0).cell_value ();
 	    }
 
-	  if (r == 1)
+	  if (r == 0 || r == 1)
 	    {
 	      // Broadcast the string.
 
 	      boolNDArray output (cell.dimensions);
 
+	      std::string s = r == 0 ? std::string () : str[0];
+
 	      for (int i = 0; i < cell.length (); i++)
 		if (cell(i).is_string ())
-		  output(i) = (cell(i).string_value () == str[0]);
+		  output(i) = (cell(i).string_value () == s);
 		else
 		  output(i) = false;
 
 	      retval = output;
 	    }
 	  else if (r > 1)
 	    {
 	      if (cell.length () == 1)
@@ -369,16 +371,59 @@ This is just the opposite of the corresp
 	retval = false;
     }
   else
     print_usage ();
 
   return retval;
 }
 
+/*
+%!shared x
+%!  x = char (zeros (0, 2));
+%!assert (strcmp ('', x) == false);
+%!assert (strcmp (x, '') == false);
+%!assert (strcmp (x, x) == true);
+%!assert (strcmp ({''}, x) == false);
+%!assert (strcmp ({x}, '') == false);
+%!assert (strcmp ({x}, x) == true);
+%!assert (strcmp ('', {x}) == false);
+%!assert (strcmp (x, {''}) == false);
+%!assert (strcmp (x, {x}) == true);
+%!assert (all (strcmp ({x; x}, '') == [false; false]));
+%!assert (all (strcmp ({x; x}, {''}) == [false; false]));
+%!assert (all (strcmp ('', {x; x}) == [false; false]));
+%!assert (all (strcmp ({''}, {x; x}) == [false; false]));
+%!assert (strcmp ({'foo'}, x) == false);
+%!assert (strcmp ({'foo'}, 'foo') == true);
+%!assert (strcmp ({'foo'}, x) == false);
+%!assert (strcmp (x, {'foo'}) == false);
+%!assert (strcmp ('foo', {'foo'}) == true);
+%!assert (strcmp (x, {'foo'}) == false);
+%!shared y
+%!  y = char (zeros (2, 0));
+%!assert (strcmp ('', y) == false);
+%!assert (strcmp (y, '') == false);
+%!assert (strcmp (y, y) == true);
+%!assert (all (strcmp ({''}, y) == [true; true]));
+%!assert (strcmp ({y}, '') == true);
+%!assert (all (strcmp ({y}, y) == [true; true]));
+%!assert (all (strcmp ('', {y}) == [true; true]));
+%!assert (all (strcmp (y, {''}) == [true; true]));
+%!assert (all (strcmp (y, {y}) == [true; true]));
+%!assert (all (strcmp ({y; y}, '') == [false; false]));
+%!assert (all (strcmp ({y; y}, {''}) == [false; false]));
+%!assert (all (strcmp ('', {y; y}) == [false; false]));
+%!assert (all (strcmp ({''}, {y; y}) == [false; false]));
+%!assert (all (strcmp ({'foo'}, y) == [false; false]));
+%!assert (all (strcmp ({'foo'}, y) == [false; false]));
+%!assert (all (strcmp (y, {'foo'}) == [false; false]));
+%!assert (all (strcmp (y, {'foo'}) == [false; false]));
+*/
+
 DEFUN (list_in_columns, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} list_in_columns (@var{arg}, @var{width})\n\
 Return a string containing the elements of @var{arg} listed in\n\
 columns with an overall maximum width of @var{width}.  The argument\n\
 @var{arg} must be a cell array of character strings or a character array.\n\
 If @var{width} is not specified, the width of the terminal screen is used.\n\
 @seealso{terminal_size}\n\
