# HG changeset patch
# User jwe
# Date 1106100713 0
#      Wed Jan 19 02:11:53 2005 +0000
# Node ID ea96466f98eafff0bffcb03d8c45641f15b5f91b
# Parent  1e36493572a0eaa432c0314d7670f91d9343f483
[project @ 2005-01-19 02:11:53 by jwe]

diff --git a/liboctave/CNDArray.cc b/liboctave/CNDArray.cc
--- a/liboctave/CNDArray.cc
+++ b/liboctave/CNDArray.cc
@@ -608,17 +608,20 @@ ComplexNDArray::all (int dim) const
   MX_ND_ANY_ALL_REDUCTION
     (MX_ND_ALL_EVAL (elem (iter_idx) == Complex (0, 0)), true);
 }
 
 boolNDArray
 ComplexNDArray::any (int dim) const
 {
   MX_ND_ANY_ALL_REDUCTION
-    (MX_ND_ANY_EVAL (elem (iter_idx) != Complex (0, 0)), false);
+    (MX_ND_ANY_EVAL (elem (iter_idx) != Complex (0, 0)
+		     && ! (lo_ieee_isnan (::real (elem (iter_idx)))
+			   || lo_ieee_isnan (::imag (elem (iter_idx))))),
+		     false);
 }
 
 ComplexNDArray
 ComplexNDArray::cumprod (int dim) const
 {
   MX_ND_CUMULATIVE_OP (ComplexNDArray, Complex, Complex (1, 0), *);
 }
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,16 @@
+2005-01-18  John W. Eaton  <jwe@octave.org>
+
+	* mx-inlines.cc (MX_ND_REDUCTION): Delete RET_ELT_TYPE arg.
+	Change all uses.  Use VAL instead of RET_ELT_TYPE when resizing.
+
+	* dNDArray.cc (NDArray::any): NaN does not count as a nonzero value.
+	* CNDArray.cc (ComplexNDArray::any): Likewise.
+
 2005-01-18  David Bateman <dbateman@free.fr>
 
 	* Array.cc (Array<T>::insert (const Array<T>&, const Array<int>&)):
 	Modify calculation of number elements to skip between copied blocks.
 
 2005-01-18  John W. Eaton  <jwe@octave.org>
 
 	* idx-vector.cc (IDX_VEC_REP::freeze): Call warning handler, not
diff --git a/liboctave/dNDArray.cc b/liboctave/dNDArray.cc
--- a/liboctave/dNDArray.cc
+++ b/liboctave/dNDArray.cc
@@ -600,17 +600,19 @@ boolNDArray
 NDArray::all (int dim) const
 {
   MX_ND_ANY_ALL_REDUCTION (MX_ND_ALL_EVAL (MX_ND_ALL_EXPR), true);
 }
 
 boolNDArray
 NDArray::any (int dim) const
 {
-  MX_ND_ANY_ALL_REDUCTION (MX_ND_ANY_EVAL (MX_ND_ANY_EXPR), false);
+  MX_ND_ANY_ALL_REDUCTION
+    (MX_ND_ANY_EVAL (elem (iter_idx) != 0
+		     && ! lo_ieee_isnan (elem (iter_idx))), false);
 }
 
 NDArray
 NDArray::cumprod (int dim) const
 {
   MX_ND_CUMULATIVE_OP (NDArray, double, 1, *);
 }
 
diff --git a/liboctave/mx-inlines.cc b/liboctave/mx-inlines.cc
--- a/liboctave/mx-inlines.cc
+++ b/liboctave/mx-inlines.cc
@@ -374,17 +374,17 @@ OP_DUP_FCN (conj, mx_inline_conj_dup, Co
    { \
      if (dim > -1) \
        iter_idx (dim) = 0; \
      retval (iter_idx) = 1; \
      break; \
    } 
  
 #define MX_ND_REDUCTION(EVAL_EXPR, END_EXPR, VAL, ACC_DECL, \
-                        RET_TYPE, RET_ELT_TYPE) \
+                        RET_TYPE) \
  \
   RET_TYPE retval; \
  \
   dim_vector dv = this->dims (); \
  \
   int empty = true; \
  \
   for (int i = 0; i < dv.length (); i++) \
@@ -452,17 +452,17 @@ OP_DUP_FCN (conj, mx_inline_conj_dup, Co
  \
   if (dim > -1) \
     dv(dim) = 1; \
  \
   /* This finds the number of elements in retval */ \
   int num_iter = (this->numel () / dim_length); \
  \
   /* Make sure retval has correct dimensions */ \
-  retval.resize (dv, RET_ELT_TYPE ()); \
+  retval.resize (dv, VAL); \
  \
   Array<int> iter_idx (dv.length (), 0); \
  \
   /* Filling in values.         */ \
   /* First loop finds new index */ \
  \
   for (int j = 0; j < num_iter; j++) \
     { \
@@ -484,24 +484,24 @@ OP_DUP_FCN (conj, mx_inline_conj_dup, Co
     } \
  \
   retval.chop_trailing_singletons (); \
  \
   return retval
 
 #define MX_ND_REAL_OP_REDUCTION(ASN_EXPR, INIT_VAL) \
   MX_ND_REDUCTION (acc ASN_EXPR, retval.elem (iter_idx) = acc, \
-                   INIT_VAL, double acc = INIT_VAL, NDArray, double)
+                   INIT_VAL, double acc = INIT_VAL, NDArray)
 
 #define MX_ND_COMPLEX_OP_REDUCTION(ASN_EXPR, INIT_VAL) \
   MX_ND_REDUCTION (acc ASN_EXPR, retval.elem (iter_idx) = acc, \
-                   INIT_VAL, Complex acc = INIT_VAL, ComplexNDArray, Complex)
+                   INIT_VAL, Complex acc = INIT_VAL, ComplexNDArray)
 
 #define MX_ND_ANY_ALL_REDUCTION(EVAL_EXPR, VAL) \
-  MX_ND_REDUCTION (EVAL_EXPR, , VAL, , boolNDArray, bool)
+  MX_ND_REDUCTION (EVAL_EXPR, , VAL, , boolNDArray)
 
 #define MX_ND_CUMULATIVE_OP(RET_TYPE, ACC_TYPE, VAL, OP) \
   RET_TYPE retval; \
  \
   dim_vector dv = this->dims (); \
  \
   int empty = true; \
  \
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,13 @@
 2005-01-18  John W. Eaton  <jwe@octave.org>
 
+	* ov-complex.h (octave_complex::any): New function.
+	* ov-scalar.h (octave_scalar::any): New function.
+
 	* file-io.cc (Fmkstemp): Fix doc string.  Error message belongs in
 	third output value.  From Mats Jansson <mats.e.jansson@home.se>.
 
 2005-01-12  John W. Eaton  <jwe@octave.org>
 
 	* DLD-FUNCTIONS/find.cc (Ffind): Make it work for character strings.
 
 2005-01-11  John W. Eaton  <jwe@octave.org>
diff --git a/src/ov-complex.h b/src/ov-complex.h
--- a/src/ov-complex.h
+++ b/src/ov-complex.h
@@ -23,16 +23,17 @@ Software Foundation, 59 Temple Place - S
 #if !defined (octave_complex_h)
 #define octave_complex_h 1
 
 #include <cstdlib>
 
 #include <iostream>
 #include <string>
 
+#include "lo-ieee.h"
 #include "mx-base.h"
 #include "oct-alloc.h"
 #include "str-vec.h"
 
 #include "error.h"
 #include "ov-base.h"
 #include "ov-cx-mat.h"
 #include "ov-base-scalar.h"
@@ -69,16 +70,23 @@ public:
   // object.
   octave_value *empty_clone (void) const
     { return new octave_complex_matrix (); }
 
   octave_value *try_narrowing_conversion (void);
 
   octave_value do_index_op (const octave_value_list& idx, int resize_ok);
 
+  octave_value any (int = 0) const
+    {
+      return (scalar != Complex (0, 0)
+	      && ! (lo_ieee_isnan (::real (scalar))
+		    || lo_ieee_isnan (::imag (scalar))));
+    }
+
   bool is_complex_scalar (void) const { return true; }
 
   bool is_complex_type (void) const { return true; }
 
   // XXX FIXME XXX ???
   bool valid_as_scalar_index (void) const { return false; }
   bool valid_as_zero_index (void) const { return false; }
 
diff --git a/src/ov-scalar.h b/src/ov-scalar.h
--- a/src/ov-scalar.h
+++ b/src/ov-scalar.h
@@ -23,16 +23,17 @@ Software Foundation, 59 Temple Place - S
 #if !defined (octave_scalar_h)
 #define octave_scalar_h 1
 
 #include <cstdlib>
 
 #include <iostream>
 #include <string>
 
+#include "lo-ieee.h"
 #include "lo-mappers.h"
 #include "lo-utils.h"
 #include "mx-base.h"
 #include "oct-alloc.h"
 #include "str-vec.h"
 
 #include "ov-base.h"
 #include "ov-re-mat.h"
@@ -68,16 +69,19 @@ public:
   // that in expressions like A(2,2,2) = 2 (for A previously
   // undefined), A will be empty instead of a 1x1 object.
   octave_value *empty_clone (void) const { return new octave_matrix (); }
 
   octave_value do_index_op (const octave_value_list& idx, int resize_ok);
 
   idx_vector index_vector (void) const { return idx_vector (scalar); }
 
+  octave_value any (int = 0) const
+    { return (scalar != 0 && ! lo_ieee_isnan (scalar)); }
+
   bool is_real_scalar (void) const { return true; }
 
   bool is_real_type (void) const { return true; }
 
   bool valid_as_scalar_index (void) const
     {
       return (! xisnan (scalar)
 	      && D_NINT (scalar) == scalar
