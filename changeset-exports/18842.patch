# HG changeset patch
# User Mike Miller <mtmiller@ieee.org>
# Date 1403062729 14400
#      Tue Jun 17 23:38:49 2014 -0400
# Branch stable
# Node ID e6a4fa91a2f157c1d7824adbbe17e75ff988b4e5
# Parent  dd34502e5c3c7cdf4cf0b3da793dbf9d02e63421
doc: Clarify order of evaluation of compound assignment expressions

* expr.txi: Add descriptive text and example to clarify the actual order
of evaluation of assignment expressions that contain another assignment
expression.

diff --git a/doc/interpreter/expr.txi b/doc/interpreter/expr.txi
--- a/doc/interpreter/expr.txi
+++ b/doc/interpreter/expr.txi
@@ -1232,18 +1232,29 @@ of the form
 @noindent
 is evaluated as
 
 @example
 @var{expr1} = (@var{expr1}) @var{op} (@var{expr2})
 @end example
 
 @noindent
-where @var{op} can be either @code{+}, @code{-}, @code{*}, or @code{/}.
-So, the expression
+where @var{op} can be either @code{+}, @code{-}, @code{*}, or @code{/},
+as long as @var{expr2} is a simple expression with no side effects.  If
+@var{expr2} also contains an assignment operator, then this expression
+is evaluated as
+
+@example
+@var{temp} = @var{expr2}
+@var{expr1} = (@var{expr1}) @var{op} @var{temp}
+@end example
+
+@noindent
+where @var{temp} is a placeholder temporary value storing the computed
+result of evaluating @var{expr2}.  So, the expression
 
 @example
 a *= b+1
 @end example
 
 @noindent
 is evaluated as
 
