# HG changeset patch
# User jwe
# Date 1161888242 0
#      Thu Oct 26 18:44:02 2006 +0000
# Node ID 9e70afeb2ebf797964d36ca769cebb47ec19fa58
# Parent  8137e2bbd1dd44e916fad6e0961a68fc61cbedc5
[project @ 2006-10-26 18:44:02 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,14 @@
+2006-10-26  David Bateman  <dbateman@free.fr>
+
+	* Sparse.cc (Sparse<T>::resize_no_fill (octave_idx_type,
+	octave_idx_type)): Be more careful with the size of the input
+	matrix, and therefore don't create or read non existent data.
+
 2006-10-25  John W. Eaton  <jwe@octave.org>
 
 	* Sparse.cc (assign): Clear lhs index after error.
 
 2006-10-25  David Bateman  <dbateman@free.fr>
 
 	* Sparse.cc (assign (Sparse<LT>&, const Sparse<RT>&)):
 	Fix previous patch so it works.
diff --git a/liboctave/Sparse.cc b/liboctave/Sparse.cc
--- a/liboctave/Sparse.cc
+++ b/liboctave/Sparse.cc
@@ -865,55 +865,59 @@ Sparse<T>::resize_no_fill (octave_idx_ty
 	    n = xcidx(nc);
 	  else
 	    n = xcidx(c);
 
 	  tmpval = Sparse<T> (r, c, n);
 
 	  if (c > nc)
 	    {
-	      for (octave_idx_type i = 0; i < nc; i++)
+	      for (octave_idx_type i = 0; i < nc + 1; i++)
 		tmpval.cidx(i) = xcidx(i);
-	      for (octave_idx_type i = nc+2; i < c; i++)
+	      for (octave_idx_type i = nc + 1; i < c + 1; i++)
 		tmpval.cidx(i) = tmpval.cidx(i-1);
 	    }
 	  else if (c <= nc)
-	    for (octave_idx_type i = 0; i < c; i++)
+	    for (octave_idx_type i = 0; i < c + 1; i++)
 	      tmpval.cidx(i) = xcidx(i);
 	  
 	  for (octave_idx_type i = 0; i < n; i++)
 	    {
 	      tmpval.data(i) = xdata(i);
 	      tmpval.ridx(i) = xridx(i);
 	    }
 	}
       else
 	{
 	  // Count how many non zero terms before we do anything
-	  for (octave_idx_type i = 0; i < c; i++)
+	  octave_idx_type min_nc = (c < nc ? c : nc);
+	  for (octave_idx_type i = 0; i < min_nc; i++)
 	    for (octave_idx_type j = xcidx(i); j < xcidx(i+1); j++)
 	      if (xridx(j) < r)
 		n++;
 
 	  if (n)
 	    {
 	      // Now that we know the size we can do something
 	      tmpval = Sparse<T> (r, c, n);
 
 	      tmpval.cidx(0);
-	      for (octave_idx_type i = 0, ii = 0; i < c; i++)
+	      for (octave_idx_type i = 0, ii = 0; i < min_nc; i++)
 		{
 		  for (octave_idx_type j = xcidx(i); j < xcidx(i+1); j++)
 		    if (xridx(j) < r)
 		      {
 			tmpval.data(ii) = xdata(j);
 			tmpval.ridx(ii++) = xridx(j);
 		      }
 		  tmpval.cidx(i+1) = ii;
 		}
+	      if (c > min_nc)
+		for (octave_idx_type i = nc; i < c; i++)
+		  tmpval.cidx(i+1) = tmpval.cidx(i);
 	    }
 	  else
 	    tmpval = Sparse<T> (r, c);
 	}
 
       rep = tmpval.rep;
       rep->count++;
     }
