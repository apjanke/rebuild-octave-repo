# HG changeset patch
# User Daniel J Sebald <daniel.sebald@ieee.org>
# Date 1515280057 21600
#      Sat Jan 06 17:07:37 2018 -0600
# Node ID a00033be213461c62957fee0cc7feda4aa42a4c2
# Parent  fdc9ce839afddd47123079588f4fade44c455f17
Clean up lookup() code and documentation with no functional changes (bug #52785).

* lookup.cc (icmp_char_lt): Remove.  Case insensitivity no longer an option.
  (icmp_char_gt): Ditto.
  (stri_comp_lt): Ditto.
  (stri_comp_gt): Ditto.
  (Flookup): In docstring, move definition N sooner, drop @code{} command
  from around its use and make all instances upper case.  In the docstring,
  add "minus" prior to "infinity" for the 'l' option description.  Drop a
  redundant test on local variable 'match_idx'.

diff --git a/libinterp/corefcn/lookup.cc b/libinterp/corefcn/lookup.cc
--- a/libinterp/corefcn/lookup.cc
+++ b/libinterp/corefcn/lookup.cc
@@ -43,51 +43,16 @@ along with Octave; see the file COPYING.
 static
 bool
 contains_char (const std::string& str, char c)
 {
   return (str.find (c) != std::string::npos
           || str.find (std::toupper (c)) != std::string::npos);
 }
 
-// case-insensitive character comparison functors
-struct icmp_char_lt : public std::binary_function<char, char, bool>
-{
-  bool operator () (char x, char y) const
-  { return std::toupper (x) < std::toupper (y); }
-};
-
-struct icmp_char_gt : public std::binary_function<char, char, bool>
-{
-  bool operator () (char x, char y) const
-  { return std::toupper (x) > std::toupper (y); }
-};
-
-// FIXME: maybe these should go elsewhere?
-// FIXME: are they even needed now?
-// case-insensitive ascending comparator
-#if 0
-static bool
-stri_comp_lt (const std::string& a, const std::string& b)
-{
-  return std::lexicographical_compare (a.begin (), a.end (),
-                                       b.begin (), b.end (),
-                                       icmp_char_lt ());
-}
-
-// case-insensitive descending comparator
-static bool
-stri_comp_gt (const std::string& a, const std::string& b)
-{
-  return std::lexicographical_compare (a.begin (), a.end (),
-                                       b.begin (), b.end (),
-                                       icmp_char_gt ());
-}
-#endif
-
 template <typename T>
 inline sortmode
 get_sort_mode (const Array<T>& array,
                typename octave_sort<T>::compare_fcn_type desc_comp
                = octave_sort<T>::descending_compare)
 {
   octave_idx_type n = array.numel ();
   if (n > 1 && desc_comp (array (0), array (n-1)))
@@ -190,29 +155,28 @@ do_numeric_lookup (const ArrayT& array, 
 DEFUN (lookup, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {@var{idx} =} lookup (@var{table}, @var{y})
 @deftypefnx {} {@var{idx} =} lookup (@var{table}, @var{y}, @var{opt})
 Lookup values in a @strong{sorted} table.
 
 This function is usually used as a prelude to interpolation.
 
-If table is increasing and @code{idx = lookup (table, y)}, then
+If table is increasing, of length N and @code{idx = lookup (table, y)}, then
 @code{table(idx(i)) <= y(i) < table(idx(i+1))} for all @code{y(i)} within the
 table.  If @code{y(i) < table(1)} then @code{idx(i)} is 0.  If
-@code{y(i) >= table(end)} or @code{isnan (y(i))} then @code{idx(i)} is
-@code{n}.
+@code{y(i) >= table(end)} or @code{isnan (y(i))} then @code{idx(i)} is N.
 
 If the table is decreasing, then the tests are reversed.  For non-strictly
 monotonic tables, empty intervals are always skipped.  The result is undefined
 if @var{table} is not monotonic, or if @var{table} contains a NaN.
 
-The complexity of the lookup is O(M*log(N)) where N is the size of @var{table}
-and M is the size of @var{y}.  In the special case when @var{y} is also sorted,
-the complexity is O(min (M*log(N), M+N)).
+The complexity of the lookup is O(M*log(N)) where M is the size of @var{y}.
+In the special case when @var{y} is also sorted, the complexity is
+O(min (M*log(N), M+N)).
 
 @var{table} and @var{y} can also be cell arrays of strings (or @var{y} can be a
 single string).  In this case, string lookup is performed using lexicographical
 comparison.
 
 If @var{opts} is specified, it must be a string with letters indicating
 additional options.
 
@@ -222,21 +186,21 @@ Match.  @code{table(idx(i)) == y(i)} if 
 otherwise, @code{idx(i)} is zero.
 
 @item b
 Boolean.  @code{idx(i)} is a logical 1 or 0, indicating whether @code{y(i)}
 is contained in table or not.
 
 @item l
 Left.  For numeric lookups the leftmost subinterval shall be extended to
-infinity (i.e., all indices at least 1).
+minus infinity (i.e., all indices at least 1).
 
 @item r
 Right.  For numeric lookups the rightmost subinterval shall be extended to
-infinity (i.e., all indices at most n-1).
+infinity (i.e., all indices at most N-1).
 @end table
 
 @strong{Note}: If @var{table} is not sorted the results from @code{lookup}
 will be unpredictable.
 @end deftypefn */)
 {
   int nargin = args.length ();
 
@@ -337,24 +301,20 @@ will be unpredictable.
               match.xelem (i) = j != 0 && str_y(i) == str_table(j-1);
             }
 
           retval = match;
         }
       else if (match_idx)
         {
           NDArray ridx (idx.dims ());
-          if (match_idx)
+          for (octave_idx_type i = 0; i < nval; i++)
             {
-              for (octave_idx_type i = 0; i < nval; i++)
-                {
-                  octave_idx_type j = idx.xelem (i);
-                  ridx.xelem (i) = (j != 0 && str_y(i) == str_table(j-1) ? j
-                                                                         : 0);
-                }
+              octave_idx_type j = idx.xelem (i);
+              ridx.xelem (i) = (j != 0 && str_y(i) == str_table(j-1) ? j : 0);
             }
 
           retval = ridx;
         }
       else
         retval = idx;
     }
   else
