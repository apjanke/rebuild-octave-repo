# HG changeset patch
# User jwe
# Date 1059595391 0
#      Wed Jul 30 20:03:11 2003 +0000
# Node ID d4d1a0be55f7b8d03b16bf515a113e592f0a7c41
# Parent  7afd4bf05aa8c742b71362bcbff9133db4b70118
[project @ 2003-07-30 20:03:11 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,12 @@
 2003-07-30  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* data.cc (make_diag): Use std::abs instead of our own ABS macro.
+
 	* utils.cc (identity_matrix): Move here from data.cc.
 	(identity_matrix): Use std::min instead of our own MIN macro.
 
 	* utils.h (identity_matrix): Provide decl.
 
 	* DLD-FUNCTIONS/svd.cc (Fsvd): Improve handling of empty matrix arg.
 
 	* ov.cc (octave_value(const ArrayN<Complex>&)): New constructor.
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -37,24 +37,16 @@ Software Foundation, 59 Temple Place - S
 #include "error.h"
 #include "gripes.h"
 #include "ov.h"
 #include "ov-re-nd-array.h"
 #include "variables.h"
 #include "oct-obj.h"
 #include "utils.h"
 
-#ifndef MIN
-#define MIN(a,b) ((a) < (b) ? (a) : (b))
-#endif
-
-#ifndef ABS
-#define ABS(x) (((x) < 0) ? (-x) : (x))
-#endif
-
 #define ANY_ALL(FCN) \
  \
   octave_value retval; \
  \
   int nargin = args.length (); \
  \
   if (nargin == 1 || nargin == 2) \
     { \
@@ -449,25 +441,25 @@ make_diag (const Matrix& v, int k)
   else if (k < 0)
     {
       roff = -k;
       coff = 0;
     }
 
   if (nr == 1)
     {
-      int n = nc + ABS (k);
+      int n = nc + std::abs (k);
       Matrix m (n, n, 0.0);
       for (int i = 0; i < nc; i++)
 	m (i+roff, i+coff) = v (0, i);
       retval = m;
     }
   else
     {
-      int n = nr + ABS (k);
+      int n = nr + std::abs (k);
       Matrix m (n, n, 0.0);
       for (int i = 0; i < nr; i++)
 	m (i+roff, i+coff) = v (i, 0);
       retval = m;
     }
 
   return retval;
 }
@@ -491,25 +483,25 @@ make_diag (const ComplexMatrix& v, int k
   else if (k < 0)
     {
       roff = -k;
       coff = 0;
     }
 
   if (nr == 1)
     {
-      int n = nc + ABS (k);
+      int n = nc + std::abs (k);
       ComplexMatrix m (n, n, 0.0);
       for (int i = 0; i < nc; i++)
 	m (i+roff, i+coff) = v (0, i);
       retval = m;
     }
   else
     {
-      int n = nr + ABS (k);
+      int n = nr + std::abs (k);
       ComplexMatrix m (n, n, 0.0);
       for (int i = 0; i < nr; i++)
 	m (i+roff, i+coff) = v (i, 0);
       retval = m;
     }
 
   return retval;
 }
