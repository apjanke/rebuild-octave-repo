# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1548161108 18000
#      Tue Jan 22 07:45:08 2019 -0500
# Branch stable
# Node ID 088b8a2dcb0672a230fe760d4fc6092ad257dbf2
# Parent  7f58079955b3e36489b6274345e5ce96b21b1c74
use @CLASS name when searching for @CLASS/METHOD (bug #55501)

* help.cc (help_system::which): Return early if name is empty.

* symtab.h, symtab.cc (symbol_table::find_function): Handle empty
argument case with a separate function.
(symbol_table::find_function (const std::string&)): New function.
Handle @CLASS/FUNCTION case by forwarding to find_method.  Otherwise,
call existing find_function method with empty args.

diff --git a/libinterp/corefcn/help.cc b/libinterp/corefcn/help.cc
--- a/libinterp/corefcn/help.cc
+++ b/libinterp/corefcn/help.cc
@@ -232,24 +232,27 @@ namespace octave
     return h;
   }
 
   std::string help_system::which (const std::string& name,
                                   std::string& type) const
   {
     std::string file;
 
-    type = "";
+    if (name.empty ())
+      return file;
 
-    symbol_table& symtab = m_interpreter.get_symbol_table ();
-
-    octave_value val = symtab.find_function (name);
+    type = "";
 
     if (name.find_first_of ('.') == std::string::npos)
       {
+        symbol_table& symtab = m_interpreter.get_symbol_table ();
+
+        octave_value val = symtab.find_function (name);
+
         if (val.is_defined ())
           {
             octave_function *fcn = val.function_value ();
 
             if (fcn)
               {
                 file = fcn->fcn_file_name ();
 
diff --git a/libinterp/corefcn/symtab.cc b/libinterp/corefcn/symtab.cc
--- a/libinterp/corefcn/symtab.cc
+++ b/libinterp/corefcn/symtab.cc
@@ -396,16 +396,37 @@ namespace octave
           m_fcn_table[name] = finfo;
 
         return fcn;
       }
 
     return octave_value ();
   }
 
+  octave_value symbol_table::find_function (const std::string& name)
+  {
+    if (name.empty ())
+      return octave_value ();
+
+    if (name[0] == '@')
+      {
+        size_t pos = name.find_first_of ('/');
+
+        if (pos == std::string::npos)
+          return octave_value ();
+
+        std::string method = name.substr (pos+1);
+        std::string dispatch_type = name.substr (1, pos-1);
+
+        return find_method (method, dispatch_type);
+      }
+    else
+      return find_function (name, ovl ());
+  }
+
   octave_value
   symbol_table::find_function (const std::string& name,
                                const octave_value_list& args)
   {
     octave_value fcn;
 
     if (m_current_scope)
       {
diff --git a/libinterp/corefcn/symtab.h b/libinterp/corefcn/symtab.h
--- a/libinterp/corefcn/symtab.h
+++ b/libinterp/corefcn/symtab.h
@@ -207,19 +207,31 @@ namespace octave
     }
 
     octave_value builtin_find (const std::string& name);
 
     octave_value
     fcn_table_find (const std::string& name,
                     const octave_value_list& args = octave_value_list ());
 
+    // If NAME is of the form @CLASS/FUNCTION, call
+    //
+    //   find_method (FUNCTION, CLASS)
+    //
+    // otherwise call
+    //
+    //   function_function (NAME, ovl ())
+
+    octave_value find_function (const std::string& name);
+
+    // NAME should just be function name; dispatch type determined
+    // from types of ARGS.
+
     octave_value
-    find_function (const std::string& name,
-                   const octave_value_list& args = octave_value_list ());
+    find_function (const std::string& name, const octave_value_list& args);
 
     octave_value find_user_function (const std::string& name)
     {
       auto p = m_fcn_table.find (name);
 
       return (p != m_fcn_table.end ()
               ? p->second.find_user_function () : octave_value ());
     }
