# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1497528037 14400
#      Thu Jun 15 08:00:37 2017 -0400
# Node ID 99989ab8f142c71a35aa35186eda7d7ddd016940
# Parent  520c53706014520de71c85528f3102f5c3d7f606
new convenience functions for accessing current scope

* interpreter.h, interpreter.cc (interpreter::get_current_scope,
interpreter::require_current_scope): New functions.

* interpreter-private.h, interpreter-private.cc
(__get_current_scope__): Use interpreter::get_current_scope.
(__require_current_scope__): New fucntion.

diff --git a/libinterp/corefcn/interpreter-private.cc b/libinterp/corefcn/interpreter-private.cc
--- a/libinterp/corefcn/interpreter-private.cc
+++ b/libinterp/corefcn/interpreter-private.cc
@@ -59,19 +59,29 @@ namespace octave
   {
     interpreter& interp = __get_interpreter__ (who);
 
     return interp.get_symbol_table ();
   }
 
   symbol_table::scope *__get_current_scope__ (const std::string& who)
   {
-    symbol_table& symtab = __get_symbol_table__ (who);
+    interpreter& interp = __get_interpreter__ (who);
+
+    return interp.get_current_scope ();
+  }
 
-    return symtab.current_scope ();
+  symbol_table::scope *__require_current_scope__ (const std::string& who)
+  {
+    symbol_table::scope *scope = __get_current_scope__ (who);
+
+    if (! scope)
+      error ("%s: symbol table scope missing", who.c_str ());
+
+    return scope;
   }
 
   tree_evaluator& __get_evaluator__ (const std::string& who)
   {
     interpreter& interp = __get_interpreter__ (who);
 
     return interp.get_evaluator ();
   }
diff --git a/libinterp/corefcn/interpreter-private.h b/libinterp/corefcn/interpreter-private.h
--- a/libinterp/corefcn/interpreter-private.h
+++ b/libinterp/corefcn/interpreter-private.h
@@ -39,14 +39,17 @@ namespace octave
   extern interpreter& __get_interpreter__ (const std::string& who);
 
   extern load_path& __get_load_path__ (const std::string& who);
 
   extern symbol_table& __get_symbol_table__ (const std::string& who);
 
   extern symbol_table::scope *__get_current_scope__ (const std::string& who);
 
+  extern symbol_table::scope *
+  __require_current_scope__ (const std::string& who);
+
   extern tree_evaluator& __get_evaluator__ (const std::string& who);
 
   extern call_stack& __get_call_stack__ (const std::string& who);
 }
 
 #endif
diff --git a/libinterp/corefcn/interpreter.cc b/libinterp/corefcn/interpreter.cc
--- a/libinterp/corefcn/interpreter.cc
+++ b/libinterp/corefcn/interpreter.cc
@@ -1148,16 +1148,33 @@ namespace octave
     OCTAVE_SAFE_CALL (octave::chunk_buffer::clear, ());
   }
 
   tree_evaluator& interpreter::get_evaluator (void)
   {
     return *m_evaluator;
   }
 
+  symbol_table::scope *
+  interpreter::get_current_scope (void)
+  {
+    return m_symbol_table.current_scope ();
+  }
+
+  symbol_table::scope *
+  interpreter::require_current_scope (const std::string& who)
+  {
+    symbol_table::scope *scope = get_current_scope ();
+
+    if (! scope)
+      error ("%s: symbol table scope missing", who.c_str ());
+
+    return scope;
+  }
+
   call_stack& interpreter::get_call_stack (void)
   {
     return m_evaluator->get_call_stack ();
   }
 
   void interpreter::recover_from_exception (void)
   {
     octave::can_interrupt = true;
diff --git a/libinterp/corefcn/interpreter.h b/libinterp/corefcn/interpreter.h
--- a/libinterp/corefcn/interpreter.h
+++ b/libinterp/corefcn/interpreter.h
@@ -139,16 +139,19 @@ namespace octave
       return m_load_path;
     }
 
     symbol_table& get_symbol_table (void)
     {
       return m_symbol_table;
     }
 
+    symbol_table::scope * get_current_scope (void);
+    symbol_table::scope * require_current_scope (const std::string& who);
+
     call_stack& get_call_stack (void);
 
     tree_evaluator& get_evaluator (void);
 
     static void recover_from_exception (void);
 
     static void add_atexit_function (const std::string& fname);
 
