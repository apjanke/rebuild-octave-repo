# HG changeset patch
# User CarnÃ« Draug <carandraug+dev@gmail.com>
# Date 1411321748 -3600
#      Sun Sep 21 18:49:08 2014 +0100
# Node ID 995df67fc9124b9dd78d759ebcd5fde8491a75e7
# Parent  62f833acf183744ff7840694b99ef946e2d5bac7
Flip arrays - ND support for fliplr and flipud, and replace flipdim with flip.

* fliplr.m, flipud.m: add support for N-dimensional arrays by making use
of flip(). Added new tests for ND arrays and defaults.
* flipdim.m: deprecate in favour of new function flip() which has exactly the
same syntax and is part of Matlab since R2014a.
* flip.m: new function copied from flipdim. Added tests for ND arrays and
defaults.
* matrix.txi: replace flipdim DOCSTRINg with flip.
* rot90.m, rotdim.m, del2.m: replace flipdim() with flip()
* NEWS: note deprecation of flip(), new function flipdim(), and ND support
for flipud() and fliplr().

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -63,16 +63,17 @@ Summary of important user-visible change
  ** The new warning ID "Octave:data-file-in-path" replaces the three
     previous separate warning IDs "Octave:fopen-file-in-path",
     "Octave:load-file-in-path", and "Octave:md5sum-file-in-path".
 
  ** Other new functions added in 4.2:
 
       bandwidth
       dir_in_loadpath
+      flip
       hgload
       hgsave
       ichol
       ilu
       isbanded
       isdiag
       istril
       istriu
@@ -97,16 +98,17 @@ Summary of important user-visible change
     be removed from Octave 4.6 (or whatever version is the second major
     release after 4.2):
 
       Function           | Replacement
       -------------------|------------------
       bicubic            | interp2
       find_dir_in_path   | dir_in_loadpath
       finite             | isfinite
+      flipdim            | flip
       fmod               | rem
       fnmatch            | glob or regexp
       nfields            | numfields
       syl                | sylvester
       usage              | print_usage
 
     The following functions were deprecated in Octave 3.8 and have been
     removed from Octave 4.2.
@@ -129,16 +131,22 @@ Summary of important user-visible change
 
       CC_VERSION  (now GCC_VERSION)
       CXX_VERSION (now GXX_VERSION)
 
     The internal class <Octave_map> was deprecated in Octave 3.8 and has
     been removed from Octave 4.2.  Replacement classes are
     <octave_map> (struct array) or <octave_scalar_map> for a single structure.
 
+ ** The following functions have now support for N-dimensional arrays:
+
+      fliplr
+      flipud
+
+
 Summary of important user-visible changes for version 4.0:
 ---------------------------------------------------------
 
  ** For compatibility with Matlab, the "backtrace" warning option is now
     enabled by default.
 
  ** The preference
 
diff --git a/doc/interpreter/matrix.txi b/doc/interpreter/matrix.txi
--- a/doc/interpreter/matrix.txi
+++ b/doc/interpreter/matrix.txi
@@ -85,17 +85,17 @@ its elements may have, consult @ref{Stat
 
 @node Rearranging Matrices
 @section Rearranging Matrices
 
 @DOCSTRING(fliplr)
 
 @DOCSTRING(flipud)
 
-@DOCSTRING(flipdim)
+@DOCSTRING(flip)
 
 @DOCSTRING(rot90)
 
 @DOCSTRING(rotdim)
 
 @DOCSTRING(cat)
 
 @DOCSTRING(horzcat)
diff --git a/scripts/general/flipdim.m b/scripts/deprecated/flipdim.m
rename from scripts/general/flipdim.m
rename to scripts/deprecated/flipdim.m
--- a/scripts/general/flipdim.m
+++ b/scripts/deprecated/flipdim.m
@@ -17,32 +17,34 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} flipdim (@var{x})
 ## @deftypefnx {Function File} {} flipdim (@var{x}, @var{dim})
 ## Return a copy of @var{x} flipped about the dimension @var{dim}.
 ## @var{dim} defaults to the first non-singleton dimension.
-## For example:
 ##
-## @example
-## @group
-## flipdim ([1, 2; 3, 4], 2)
-##       @result{}  2  1
-##           4  3
-## @end group
-## @end example
+## @strong{Warning:} @code{flipdim} is scheduled for removal in version 4.6.
+## Use @code{flip} which can be used as a drop-in replacement.
+##
 ## @seealso{fliplr, flipud, rot90, rotdim}
 ## @end deftypefn
 
 ## Author: David Bateman, Jaroslav Hajek
 
 function y = flipdim (x, dim)
 
+  persistent warned = false;
+  if (! warned)
+    warned = true;
+    warning ("Octave:deprecated-function",
+             "flipdim is deprecated and will be removed from a future version of Octave; please use flip (x, dim) instead");
+  endif
+
   if (nargin != 1 && nargin != 2)
     print_usage ();
   endif
 
   nd = ndims (x);
   sz = size (x);
   if (nargin == 1)
     ## Find the first non-singleton dimension.
@@ -52,18 +54,8 @@ function y = flipdim (x, dim)
   endif
 
   idx(1:max(nd, dim)) = {':'};
   idx{dim} = size (x, dim):-1:1;
   y = x(idx{:});
 
 endfunction
 
-
-%!assert (flipdim ([1,2;3,4]), flipdim ([1,2 ; 3,4], 1))
-%!assert (flipdim ([1,2;3,4], 2), [2,1;4,3])
-%!assert (flipdim ([1,2;3,4], 3), [1,2;3,4])
-
-## FIXME: We need tests for multidimensional arrays.
-
-%!error flipdim ()
-%!error flipdim (1, 2, 3)
-
diff --git a/scripts/deprecated/module.mk b/scripts/deprecated/module.mk
--- a/scripts/deprecated/module.mk
+++ b/scripts/deprecated/module.mk
@@ -1,14 +1,15 @@
 FCN_FILE_DIRS += deprecated
 
 deprecated_FCN_FILES = \
   deprecated/bicubic.m \
   deprecated/find_dir_in_path.m \
   deprecated/finite.m \
+  deprecated/flipdim.m \
   deprecated/fmod.m \
   deprecated/fnmatch.m \
   deprecated/isstr.m \
   deprecated/nfields.m \
   deprecated/strmatch.m \
   deprecated/syl.m \
   deprecated/usage.m
 
diff --git a/scripts/general/del2.m b/scripts/general/del2.m
--- a/scripts/general/del2.m
+++ b/scripts/general/del2.m
@@ -310,12 +310,12 @@ endfunction
 %! assert (b(:,:,1:3), zeros (9,9,3));
 %! assert (b(:,1:3,:), zeros (9,3,9));
 %! assert (b(1:3,:,:), zeros (3,9,9));
 %! assert (b(4:5,4,4), [0.0,0.0]');
 %! assert (b(5,5,4), 1.00);
 %! assert (b(4,4,5), 0.00);
 %! assert (b(5,4,5), 1.00);
 %! assert (b(5,5,5),-6.00);
-%! assert (b, flipdim (b,1));
-%! assert (b, flipdim (b,2));
-%! assert (b, flipdim (b,3));
+%! assert (b, flip (b,1));
+%! assert (b, flip (b,2));
+%! assert (b, flip (b,3));
 
diff --git a/scripts/general/flipdim.m b/scripts/general/flip.m
copy from scripts/general/flipdim.m
copy to scripts/general/flip.m
--- a/scripts/general/flipdim.m
+++ b/scripts/general/flip.m
@@ -13,57 +13,99 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn  {Function File} {} flipdim (@var{x})
-## @deftypefnx {Function File} {} flipdim (@var{x}, @var{dim})
+## @deftypefn  {Function File} {} flip (@var{x})
+## @deftypefnx {Function File} {} flip (@var{x}, @var{dim})
+## Flip array across specific dimension.
+##
 ## Return a copy of @var{x} flipped about the dimension @var{dim}.
 ## @var{dim} defaults to the first non-singleton dimension.
 ## For example:
 ##
 ## @example
 ## @group
-## flipdim ([1, 2; 3, 4], 2)
+## flip ([1  2  3  4])
+##       @result{}  4  3  2  1
+## @end group
+##
+## @group
+## flip ([1; 2; 3; 4])
+##       @result{}  4
+##           3
+##           2
+##           1
+## @end group
+##
+## @group
+## flip ([1 2; 3 4])
+##       @result{}  3  4
+##           1  2
+## @end group
+##
+## @group
+## flip ([1 2; 3 4], 2)
 ##       @result{}  2  1
 ##           4  3
 ## @end group
 ## @end example
+##
 ## @seealso{fliplr, flipud, rot90, rotdim}
 ## @end deftypefn
 
 ## Author: David Bateman, Jaroslav Hajek
 
-function y = flipdim (x, dim)
+function y = flip (x, dim)
 
   if (nargin != 1 && nargin != 2)
     print_usage ();
   endif
 
   nd = ndims (x);
   sz = size (x);
   if (nargin == 1)
     ## Find the first non-singleton dimension.
     (dim = find (sz > 1, 1)) || (dim = 1);
   elseif (! (isscalar (dim) && isindex (dim)))
-    error ("flipdim: DIM must be a positive integer");
+    error ("flip: DIM must be a positive integer");
   endif
 
   idx(1:max(nd, dim)) = {':'};
   idx{dim} = size (x, dim):-1:1;
   y = x(idx{:});
 
 endfunction
 
 
-%!assert (flipdim ([1,2;3,4]), flipdim ([1,2 ; 3,4], 1))
-%!assert (flipdim ([1,2;3,4], 2), [2,1;4,3])
-%!assert (flipdim ([1,2;3,4], 3), [1,2;3,4])
+%!assert (flip ([1 2; 3 4], 2), [2 1; 4 3])
+%!assert (flip ([1 2; 3 4], 3), [1 2; 3 4])
+
+## Test defaults
+%!assert (flip ([1 2 3 4]), [4 3 2 1])
+%!assert (flip ([1 2 3 4].'), [4 3 2 1].')
+%!assert (flip ([1 2; 3 4]), flip ([1 2 ; 3 4], 1))
 
-## FIXME: We need tests for multidimensional arrays.
+## Test NDArrays
+%!test
+%! a(1:2,1:2,1) = [1 2; 3 4];
+%! a(1:2,1:2,2) = [5 6; 7 8];
+%! b(1:2,1:2,1) = [5 6; 7 8];
+%! b(1:2,1:2,2) = [1 2; 3 4];
+%! assert (flip (a, 3), b)
 
-%!error flipdim ()
-%!error flipdim (1, 2, 3)
+%!test
+%! a = b = zeros (2, 2, 1, 2);
+%! a(1:2,1:2,:,1) = [1 2; 3 4];
+%! a(1:2,1:2,:,2) = [5 6; 7 8];
+%! b(1:2,1:2,:,1) = [5 6; 7 8];
+%! b(1:2,1:2,:,2) = [1 2; 3 4];
+%! assert (flip (a, 3), a)
+%! assert (flip (a, 4), b)
+%! assert (flip (a, 5), a)
 
+%!error flip ()
+%!error flip (1, 2, 3)
+
diff --git a/scripts/general/fliplr.m b/scripts/general/fliplr.m
--- a/scripts/general/fliplr.m
+++ b/scripts/general/fliplr.m
@@ -13,50 +13,67 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} fliplr (@var{x})
+## Flip array left to right.
+##
 ## Return a copy of @var{x} with the order of the columns reversed.  In
 ## other words, @var{x} is flipped left-to-right about a vertical axis.  For
 ## example:
 ##
 ## @example
 ## @group
 ## fliplr ([1, 2; 3, 4])
 ##      @result{}  2  1
 ##          4  3
 ## @end group
 ## @end example
 ##
-## Note that @code{fliplr} only works with 2-D arrays.  To flip N-D arrays
-## use @code{flipdim} instead.
-## @seealso{flipud, flipdim, rot90, rotdim}
+## @seealso{flipud, rot90, rotdim}
 ## @end deftypefn
 
 ## Author: jwe
 
 function y = fliplr (x)
 
   if (nargin != 1)
     print_usage ();
   endif
-
-  if (ndims (x) > 2)
-    error ("fliplr: Only works with 2-D arrays");
-  endif
-
-  nc = columns (x);
-  y = x (:, nc:-1:1);
+  y = flip (x, 2);
 
 endfunction
 
 
 %!assert (fliplr ([1, 2; 3, 4]), [2, 1; 4, 3])
 %!assert (fliplr ([1, 2; 3, 4; 5, 6]), [2, 1; 4, 3; 6, 5])
 %!assert (fliplr ([1, 2, 3; 4, 5, 6]), [3, 2, 1; 6, 5, 4])
+%!assert (fliplr ([1 2 3].'), [1 2 3].')
+
+## Test NDArrays
+%!test
+%! a(:,:,1) = [ 1  2;  3  4;  5  6];
+%! a(:,:,2) = [ 7  8;  9 10; 11 12];
+%! b(:,:,1) = [ 2  1;  4  3;  6  5];
+%! b(:,:,2) = [ 8  7; 10  9; 12 11];
+%! assert (fliplr (a), b)
+
+## Test NDArray with singleton dimensions
+%!test
+%! a(:,:,:,1) = [ 1  2;  3  4;  5  6];
+%! a(:,:,:,2) = [ 7  8;  9 10; 11 12];
+%! b(:,:,:,1) = [ 2  1;  4  3;  6  5];
+%! b(:,:,:,2) = [ 8  7; 10  9; 12 11];
+%! assert (fliplr (a), b)
+
+## Test for 1 row, i.e., returns the same
+%!test
+%! a(:,1,:,1) = [ 1  2  3  4];
+%! a(:,1,:,2) = [ 5  6  7  8];
+%! assert (fliplr (a), a)
 
 %!error fliplr()
 %!error fliplr (1, 2)
 
diff --git a/scripts/general/flipud.m b/scripts/general/flipud.m
--- a/scripts/general/flipud.m
+++ b/scripts/general/flipud.m
@@ -13,50 +13,67 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} flipud (@var{x})
+## Flip array upside down.
+##
 ## Return a copy of @var{x} with the order of the rows reversed.  In
 ## other words, @var{x} is flipped upside-down about a horizontal axis.  For
 ## example:
 ##
 ## @example
 ## @group
 ## flipud ([1, 2; 3, 4])
 ##      @result{}  3  4
 ##          1  2
 ## @end group
 ## @end example
 ##
-## Note that @code{flipud} only works with 2-D arrays.  To flip N-D arrays
-## use @code{flipdim} instead.
-## @seealso{fliplr, flipdim, rot90, rotdim}
+## @seealso{fliplr, rot90, rotdim}
 ## @end deftypefn
 
 ## Author: jwe
 
 function y = flipud (x)
 
   if (nargin != 1)
     print_usage ();
   endif
-
-  if (ndims (x) > 2)
-    error ("flipud: Only works with 2-d arrays");
-  endif
-
-  nr = rows (x);
-  y = x (nr:-1:1, :);
+  y = flip (x, 1);
 
 endfunction
 
 
 %!assert (flipud ([1, 2; 3, 4]), [3, 4; 1, 2])
 %!assert (flipud ([1, 2; 3, 4; 5, 6]), [5, 6; 3, 4; 1, 2])
 %!assert (flipud ([1, 2, 3; 4, 5, 6]), [4, 5, 6; 1, 2, 3])
+%!assert (flipud ([1 2 3]), [1 2 3])
+
+## Test NDArrays
+%!test
+%! a(:,:,1) = [ 1  2  3;  4  5  6];
+%! a(:,:,2) = [ 7  8  9; 10 11 12];
+%! b(:,:,1) = [ 4  5  6;  1  2  3];
+%! b(:,:,2) = [10 11 12;  7  8  9];
+%! assert (flipud (a), b)
+
+## Test NDArray with singleton dimensions
+%!test
+%! a(:,:,:,1) = [ 1  2  3;  4  5  6];
+%! a(:,:,:,2) = [ 7  8  9; 10 11 12];
+%! b(:,:,:,1) = [ 4  5  6;  1  2  3];
+%! b(:,:,:,2) = [10 11 12;  7  8  9];
+%! assert (flipud (a), b)
+
+## Test for 1 row, i.e., returns the same
+%!test
+%! a(1,:,:,1) = [ 1  2  3  4];
+%! a(1,:,:,2) = [ 5  6  7  8];
+%! assert (flipud (a), a)
 
 %!error flipud ()
 %!error flipud (1, 2)
 
diff --git a/scripts/general/module.mk b/scripts/general/module.mk
--- a/scripts/general/module.mk
+++ b/scripts/general/module.mk
@@ -23,17 +23,17 @@ general_FCN_FILES = \
   general/cumtrapz.m \
   general/curl.m \
   general/dblquad.m \
   general/deal.m \
   general/del2.m \
   general/display.m \
   general/divergence.m \
   general/fieldnames.m \
-  general/flipdim.m \
+  general/flip.m \
   general/fliplr.m \
   general/flipud.m \
   general/gradient.m \
   general/idivide.m \
   general/inputParser.m \
   general/int2str.m \
   general/interp1.m \
   general/interp2.m \
diff --git a/scripts/general/rot90.m b/scripts/general/rot90.m
--- a/scripts/general/rot90.m
+++ b/scripts/general/rot90.m
@@ -42,17 +42,17 @@
 ## rot90 ([1, 2; 3, 4], -1)
 ## rot90 ([1, 2; 3, 4], 3)
 ## rot90 ([1, 2; 3, 4], 7)
 ## @end group
 ## @end example
 ##
 ## Note that @code{rot90} only works with 2-D arrays.  To rotate N-D arrays
 ## use @code{rotdim} instead.
-## @seealso{rotdim, flipud, fliplr, flipdim}
+## @seealso{rotdim, flipud, fliplr, flip}
 ## @end deftypefn
 
 ## Author: jwe
 
 function B = rot90 (A, k = 1)
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
diff --git a/scripts/general/rotdim.m b/scripts/general/rotdim.m
--- a/scripts/general/rotdim.m
+++ b/scripts/general/rotdim.m
@@ -46,17 +46,17 @@
 ##
 ## @example
 ## @group
 ## rotdim ([1, 2; 3, 4], -1, [1, 2])
 ## rotdim ([1, 2; 3, 4], 3, [1, 2])
 ## rotdim ([1, 2; 3, 4], 7, [1, 2])
 ## @end group
 ## @end example
-## @seealso{rot90, flipud, fliplr, flipdim}
+## @seealso{rot90, flipud, fliplr, flip}
 ## @end deftypefn
 
 function y = rotdim (x, n, plane)
 
   if (nargin < 1 || nargin > 3)
     print_usage ();
   endif
 
@@ -102,26 +102,26 @@ function y = rotdim (x, n, plane)
 
   n = rem (n, 4);
   if (n < 0)
     n = n + 4;
   endif
   if (n == 0)
     y = x;
   elseif (n == 2)
-    y = flipdim (flipdim (x, plane(1)), plane(2));
+    y = flip (flip (x, plane(1)), plane(2));
   elseif (n == 1 || n == 3)
     perm = 1:nd;
     perm(plane(1)) = plane(2);
     perm(plane(2)) = plane(1);
     y = permute (x, perm);
     if (n == 1)
-      y = flipdim (y, min (plane));
+      y = flip (y, min (plane));
     else
-      y = flipdim (y, max (plane));
+      y = flip (y, max (plane));
     endif
   else
     error ("rotdim: internal error!");
   endif
 
 endfunction
 
 
