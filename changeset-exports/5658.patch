# HG changeset patch
# User jwe
# Date 1141963043 0
#      Fri Mar 10 03:57:23 2006 +0000
# Node ID 7b45fda215571d34ddabc12b01a8b223d86771b8
# Parent  fb1de6e6343bbd65f254af8efd36799993f930af
[project @ 2006-03-10 03:57:23 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,15 +1,20 @@
+2006-03-09  John W. Eaton  <jwe@octave.org>
+
+	* Makeconf.in (do-subst-default-vals): Also substitute OCTAVE_RELEASE.
+
 2006-03-08  David Bateman  <dbateman@free.fr>
 
 	* configure.in: Update the test for CXSPARSE for new upstream release.
 	(OCTAVE_VERSION, OCTAVE_HOSTTYPE, OCTAVE_HOME,TEXINFO_UMFPACK, 
 	TEXINFO_COLAMD, TEXINFO_CHOLMOD): New variables for texinfo 
 	documentation.
-	(AC_CONFIG_FILES): Add doc/conf.texi and doc/interpreter/images/Makefile.
+	(AC_CONFIG_FILES): Add doc/interpreter/images/Makefile and
+	doc/conf.texi.
 	
 2006-03-02  Kurt Hornik  <Kurt.Hornik@wu-wien.ac.at>
 
 	* emacs/octave-mod.el (octave-indent-for-comment): Make the code
 	match the comments.
 
 2006-03-02  John W. Eaton  <jwe@octave.org>
 
diff --git a/Makeconf.in b/Makeconf.in
--- a/Makeconf.in
+++ b/Makeconf.in
@@ -25,17 +25,17 @@ getversion = $(SED) -e '/OCTAVE_VERSION/
 
 # A shell command to extract the API version number from version.h.
 getapiversion = $(SED) -e '/OCTAVE_API_VERSION/!d' -e 's/.*"\(.*\)".*$$/\1/' -e q
 
 # Look for version.h to get version information.
 xfiles := $(TOPDIR)/src/version.h $(srcdir)/$(TOPDIR)/src/version.h
 version_file := $(firstword $(foreach file, $(xfiles), $(wildcard $(file))))
 version := $(shell $(getversion) $(version_file))
-apiversion := $(shell $(getapiversion) $(version_file))
+api_version := $(shell $(getapiversion) $(version_file))
 
 #### Start of system configuration section. ####
 
 EXEEXT = @EXEEXT@
 
 BUILD_EXEEXT = @BUILD_EXEEXT@
 
 LEX = @LEX@
@@ -529,17 +529,18 @@ echo "making $@ from $<"
   -e "s|%OCTAVE_MAN1DIR%|\"${man1dir}\"|" \
   -e "s|%OCTAVE_MAN1EXT%|\"${man1ext}\"|" \
   -e "s|%OCTAVE_MANDIR%|\"${mandir}\"|" \
   -e "s|%OCTAVE_OCTFILEDIR%|\"${octfiledir}\"|" \
   -e "s|%OCTAVE_OCTINCLUDEDIR%|\"${octincludedir}\"|" \
   -e "s|%OCTAVE_OCTLIBDIR%|\"${octlibdir}\"|" \
   -e "s|%OCTAVE_STARTUPFILEDIR%|\"${startupfiledir}\"|" \
   -e "s|%OCTAVE_PREFIX%|\"${prefix}\"|" \
-  -e "s|%OCTAVE_API_VERSION%|\"${apiversion}\"|" \
+  -e "s|%OCTAVE_API_VERSION%|\"${api_version}\"|" \
+  -e "s|%OCTAVE_RELEASE%|\"${OCTAVE_RELEASE}\"|" \
   -e "s|%OCTAVE_VERSION%|\"${version}\"|"
 $(top_srcdir)/move-if-change $@-t $@
 endef
 
 define do-mkpkgadd
 $(top_srcdir)/mkpkgadd $(srcdir) > PKG_ADD.t
 if [ -n "`cat PKG_ADD.t`" ]; then \
   mv PKG_ADD.t PKG_ADD ; \
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,15 @@
 2006-03-09  John W. Eaton  <jwe@octave.org>
 
+	* defaults.h.in (OCTAVE_RELEASE): New macro.
+
+	* octave.cc (F__version_info__): New arg, release.
+	(initialize_version_info): Pass release arg to F__version_info__.
+
 	* toplev.cc: Include api_version in the list.
 
 	* Makefile.in (DIST_SRC): Include octave.cc here.
 	(DISTFILES, DEP_5): Not here.
 
 	* octave.cc (F__version_info__): New function.
 	(initialize_version_info): New function.
 	(octave_main): Call initialize_version_info just before reading
diff --git a/src/Makefile.in b/src/Makefile.in
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -530,22 +530,31 @@ parse.cc : parse.y
 	@$(top_srcdir)/move-if-change y.tab.c $(@F)
 
 lex.cc : lex.l
 	$(LEX) $(LFLAGS) $< > $(@F)
 
 __gnuplot_raw__.cc : DLD-FUNCTIONS/__gnuplot_raw__.l
 	$(LEX) $(LFLAGS) $< > $(@F)
 
-defaults.h: defaults.h.in ../Makeconf Makefile
+## We want to force an update of defaults.h and oct-conf.h every
+## time make is run because some values may come from the command
+## line or the environment.  The substitution rules use move-if-change,
+## so this should not cause trouble if the file already exists and the
+## newly generated file is not different.
+
+defaults.h: defaults.h.in ../Makeconf Makefile FORCE
 	@$(do-subst-default-vals)
 
-oct-conf.h: oct-conf.h.in ../Makeconf Makefile
+oct-conf.h: oct-conf.h.in ../Makeconf Makefile FORCE
 	@$(do-subst-config-vals)
 
+FORCE:
+.PHONY: FORCE
+
 oct-errno.cc: oct-errno.cc.in ../Makeconf Makefile
 	@echo "making $@ from $<"
 	@if test -n "$(PERL)"; then \
 	  $(srcdir)/mk-errno-list --perl "$(PERL)" < $< > $@-t; \
 	elif test -n "$(PYTHON)"; then \
 	  $(srcdir)/mk-errno-list --python "$(PYTHON)" < $< > $@-t; \
 	else \
 	  $(SED) '/@SYSDEP_ERRNO_LIST@/D' $< > $@-t; \
diff --git a/src/defaults.h.in b/src/defaults.h.in
--- a/src/defaults.h.in
+++ b/src/defaults.h.in
@@ -164,16 +164,20 @@ 02110-1301, USA.
 #ifndef OCTAVE_PREFIX
 #define OCTAVE_PREFIX %OCTAVE_PREFIX%
 #endif
 
 #ifndef OCTAVE_STARTUPFILEDIR
 #define OCTAVE_STARTUPFILEDIR %OCTAVE_STARTUPFILEDIR%
 #endif
 
+#ifndef OCTAVE_RELEASE
+#define OCTAVE_RELEASE %OCTAVE_RELEASE%
+#endif
+
 extern std::string Voctave_home;
 
 extern std::string Vbin_dir;
 extern std::string Vinfo_dir;
 extern std::string Vdata_dir;
 extern std::string Vlibexec_dir;
 extern std::string Varch_lib_dir;
 extern std::string Vlocal_arch_lib_dir;
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -207,48 +207,49 @@ initialize_pathsearch (void)
 
   if (odb.empty ())
     odb = Vdata_dir + file_ops::dir_sep_str + "octave:"
       + Vlibexec_dir + file_ops::dir_sep_str + "octave";
 }
 
 DEFUN (__version_info__, args, ,
   "-*- texinfo -*-\n\
-@deftypefn {Function File} {retval =} __version_info__ (@var{name}, @var{version}, @var{date})\n\
+@deftypefn {Function File} {retval =} __version_info__ (@var{name}, @var{version}, @var{release}, @var{date})\n\
 @end deftypefn")
 {
   octave_value retval;
 
   static Octave_map vinfo;
 
   int nargin = args.length ();
 
-  if (nargin == 3)
+  if (nargin == 4)
     {
       octave_value idx (vinfo.numel () + 1);
 
       vinfo.assign (idx, "Name", Cell (octave_value (args (0))));
       vinfo.assign (idx, "Version", Cell (octave_value (args (1))));
-      vinfo.assign (idx, "Release", Cell (octave_value (args (1))));
-      vinfo.assign (idx, "Date", Cell (octave_value (args (2))));
+      vinfo.assign (idx, "Release", Cell (octave_value (args (2))));
+      vinfo.assign (idx, "Date", Cell (octave_value (args (3))));
     }
   else if (nargin == 0)
     retval = vinfo;
   else
     print_usage ("__version_info__");
 
   return retval;
 }
 
 static void
 initialize_version_info (void)
 {
   octave_value_list args;
 
-  args(2) = OCTAVE_RELEASE_DATE;
+  args(3) = OCTAVE_RELEASE_DATE;
+  args(2) = OCTAVE_RELEASE;
   args(1) = OCTAVE_VERSION;
   args(0) = "GNU Octave";
 
   F__version_info__ (args, 0);
 }
 
 // Initialize by reading startup files.
 
