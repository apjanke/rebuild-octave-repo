# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1498333997 14400
#      Sat Jun 24 15:53:17 2017 -0400
# Node ID 93371ce5378d3d210fe3a01a27f90f1e626e3be8
# Parent  a94ed7424d63f1c849843b2d7243366a43845d19
fix variadic template declaration

* symtab.cc (dump_container_map): Use correct variadic template
declaration.  Delete non-template std::list and std::set versions.

diff --git a/libinterp/corefcn/symtab.cc b/libinterp/corefcn/symtab.cc
--- a/libinterp/corefcn/symtab.cc
+++ b/libinterp/corefcn/symtab.cc
@@ -1414,73 +1414,35 @@ symbol_table::find_submethod (const std:
         }
 
       m_current_scope = stored_scope;
     }
 
   return fcn;
 }
 
-#if 0
-// This fails with GCC 7.
-template <typename V, template <typename...> class C>
+template <template <typename, typename...> class C, typename V,
+          typename... A>
 static octave_value
-dump_container_map_template (const std::map<std::string, C<V>>& container_map)
+dump_container_map (const std::map<std::string, C<V, A...>>& container_map)
 {
   if (container_map.empty ())
     return octave_value (Matrix ());
 
   std::map<std::string, octave_value> info_map;
 
   for (const auto& nm_container : container_map)
     {
       std::string nm = nm_container.first;
-      const C<V>& container = nm_container.second;
+      const C<V, A...>& container = nm_container.second;
       info_map[nm] = Cell (container);
     }
 
   return octave_value (info_map);
 }
-#else
-static octave_value
-dump_container_map (const std::map<std::string, std::list<std::string>>& container_map)
-{
-  if (container_map.empty ())
-    return octave_value (Matrix ());
-
-  std::map<std::string, octave_value> info_map;
-
-  for (const auto& nm_container : container_map)
-    {
-      std::string nm = nm_container.first;
-      const std::list<std::string>& container = nm_container.second;
-      info_map[nm] = Cell (container);
-    }
-
-  return octave_value (info_map);
-}
-
-static octave_value
-dump_container_map (const std::map<std::string, std::set<std::string>>& container_map)
-{
-  if (container_map.empty ())
-    return octave_value (Matrix ());
-
-  std::map<std::string, octave_value> info_map;
-
-  for (const auto& nm_container : container_map)
-    {
-      std::string nm = nm_container.first;
-      const std::set<std::string>& container = nm_container.second;
-      info_map[nm] = Cell (container);
-    }
-
-  return octave_value (info_map);
-}
-#endif
 
 octave_value
 symbol_table::dump (void) const
 {
   std::map<std::string, octave_value> m
     = {{"function_info", dump_fcn_table_map ()},
        {"precedence_table", dump_container_map (m_class_precedence_table)},
        {"parent_classes", dump_container_map (m_parent_map)}};
