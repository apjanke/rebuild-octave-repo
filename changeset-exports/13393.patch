# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1302523036 -7200
#      Mon Apr 11 13:57:16 2011 +0200
# Node ID 98ff5fbd93128fd60d950741f1bab94a05621677
# Parent  b773f4dce1531416766a9326614a736ddd2db13e
Converted global octave_server instance into singleton.

diff --git a/gui//src/MainWindow.cpp b/gui//src/MainWindow.cpp
--- a/gui//src/MainWindow.cpp
+++ b/gui//src/MainWindow.cpp
@@ -42,18 +42,16 @@ void MainWindow::constructWindow() {
     setCentralWidget(m_octaveTerminal);
 
     addDockWidget(Qt::LeftDockWidgetArea, m_variablesDockWidget);
     addDockWidget(Qt::LeftDockWidgetArea, m_historyDockWidget);
 }
 
 void MainWindow::establishOctaveLink() {
     //QMetaObject::invokeMethod(this, "setStatus", Q_ARG(QString, QString("Establishing Octave link..")));
-    m_octaveLink = new OctaveLink();
-
     m_octaveMainThread = new OctaveMainThread(this);
     m_octaveMainThread->start();
 
     m_octaveCallbackThread = new OctaveCallbackThread(this, this);
     m_octaveCallbackThread->start();
 
     command_editor::add_event_hook(server_rl_event_hook_function);
 
diff --git a/gui//src/MainWindow.h b/gui//src/MainWindow.h
--- a/gui//src/MainWindow.h
+++ b/gui//src/MainWindow.h
@@ -93,17 +93,16 @@ public slots:
 private:
     void constructWindow();
     void establishOctaveLink();
     OctaveTerminal *m_octaveTerminal;
     VariablesDockWidget *m_variablesDockWidget;
     HistoryDockWidget *m_historyDockWidget;
 
     // Threads for running octave and managing the data interaction.
-    OctaveLink *m_octaveLink;
     OctaveMainThread *m_octaveMainThread;
     OctaveCallbackThread *m_octaveCallbackThread;
     bool m_isRunning;
 };
 
 class OctaveMainThread : public QThread {
     Q_OBJECT
 public:
@@ -129,46 +128,49 @@ public:
           m_mainWindow(mainWindow) {
     }
 
 protected:
     void run() {
         while(m_mainWindow->isRunning()) {
 
         // Get a full variable list.
-        std::vector<OctaveLink::VariableMetaData> variables = oct_octave_server.variableInfoList();
+        std::vector<OctaveLink::VariableMetaData> variables
+                = OctaveLink::instance()->variableInfoList();
         if(variables.size()) {
             // TODO: Update variables view.
         }
 
         // Check whether any requested variables have been returned.
-        std::vector<OctaveLink::RequestedVariable> reqVars = oct_octave_server.requestedVariables();
+        std::vector<OctaveLink::RequestedVariable> reqVars
+                = OctaveLink::instance()->requestedVariables();
+
         for(std::vector<OctaveLink::RequestedVariable>::iterator it = reqVars.begin();
             it != reqVars.end(); it++ ) {
             // TODO: Process requested variables.
         }
 
         // Collect history list.
-        string_vector historyList = oct_octave_server.getHistoryList();
+        string_vector historyList = OctaveLink::instance()->getHistoryList();
         if(historyList.length()) {
             m_mainWindow->historyDockWidget()->updateHistory(historyList);
         }
 
         // Put a marker in each buffer at the proper location.
         int status = 0;
-        std::vector<OctaveLink::BreakPoint> breakPoints = oct_octave_server.breakPointList(status);
+        std::vector<OctaveLink::BreakPoint> breakPoints = OctaveLink::instance()->breakPointList(status);
         if(status==0) {
             //MEditor::GetInstance()->process_breakpoint_list (bps);
         }
 
         // Find out if a breakpoint is hit
         static bool lineNumber = -1;
-        bool hitBreakPoint = oct_octave_server.isBreakpointReached(status);
+        bool hitBreakPoint = OctaveLink::instance()->isBreakpointReached(status);
         if((status==0) && hitBreakPoint) {
-            std::vector<OctaveLink::BreakPoint> hit_breakpoint = oct_octave_server.reachedBreakpoint();
+            std::vector<OctaveLink::BreakPoint> hit_breakpoint = OctaveLink::instance()->reachedBreakpoint();
 
             if(hit_breakpoint.size() > 0 && (hit_breakpoint[0].lineNumber != lineNumber)) {
                 //MEditor::GetInstance()->remove_hit_breakpoint_marker ();
                 //MEditor::GetInstance()->add_breakpoint_marker(hit_breakpoint[0], BP_MARKER_TYPE_HIT);
                 lineNumber = hit_breakpoint[0].lineNumber;
             }
         }
         else if((status==0) && lineNumber>0) {
diff --git a/gui//src/OctaveLink.cpp b/gui//src/OctaveLink.cpp
--- a/gui//src/OctaveLink.cpp
+++ b/gui//src/OctaveLink.cpp
@@ -78,17 +78,17 @@ 02110-1301, USA.
 #include "octave/variables.h"
 
 #include <readline/readline.h>
 
 #include "OctaveLink.h"
 
 #include <QFileInfo>
 
-OctaveLink oct_octave_server;
+OctaveLink OctaveLink::m_singleton;
 
 static octave_user_code *
 get_user_code (const std::string& fname = std::string ())
 {
   octave_user_code *dbg_fcn = 0;
 
   if (fname.empty ())
     dbg_fcn = octave_call_stack::caller_user_code ();
@@ -111,24 +111,24 @@ int server_rl_event_hook_function(void)
 
   //if (rl_event_count%10 == 0)
   //  octave_stdout << "rl_event_count:" << rl_event_count << std::endl;
 
 
   // TODO: No need to run too quickly.  The documentation says it will run
   // at most 10 times per second.  This may be too fast and we will need to
   // artificially slow it down somehow.  Not sure at this time how.
-  oct_octave_server.processOctaveServerData();
+  OctaveLink::instance()->processOctaveServerData();
 
   return 0;
 }
 
 bool server_rl_is_processing(void)
 {
-  return oct_octave_server.isProcessing();
+  return OctaveLink::instance()->isProcessing();
 }
 
 //*************************************************************************
 OctaveLink::OctaveLink() {
   pthread_mutex_init(&m_serverMutex,NULL);
   pthread_mutex_init(&m_octaveLockMutex,NULL);
   m_previousHistoryLength = 0;
   m_isProcessingServerData = false;
diff --git a/gui//src/OctaveLink.h b/gui//src/OctaveLink.h
--- a/gui//src/OctaveLink.h
+++ b/gui//src/OctaveLink.h
@@ -41,16 +41,17 @@ class octave_value_list;
 
 /**
   * \class OctaveLink
   * Manages a link to an octave instance.
   */
 class OctaveLink
 {
 public:
+    static OctaveLink *instance() { return &m_singleton; }
     /**
      * Enumeration used to identify breakpoint actions
      */
     enum BreakPointAction
     {
         None,
         StepInto,
         StepOver,
@@ -103,19 +104,16 @@ public:
                               const VariableMetaData& right) {
             return (left.variableName == right.variableName) &&
                    (left.dimensionalSize == right.dimensionalSize) &&
                    (left.byteSize == right.byteSize) &&
                    (left.typeName == right.typeName);
         }
     } VariableMetaData;
 
-    OctaveLink();
-    ~OctaveLink();
-
     bool isProcessing(void) { return m_isProcessingServerData; }
 
     // Functions used to access data form the client side.
     /** Debugging related methods. */
 
     /** TODO: Describe. */
     std::vector<BreakPoint> breakPointList(int& status);
 
@@ -196,16 +194,19 @@ public:
     /** TODO: Describe. */
     int processRequestedVariables(void);
 
     /** History related methods. */
     /** TODO: Describe. */
     int setHistoryList(void);
 
 private:
+    OctaveLink();
+    ~OctaveLink();
+
     /** Mutex variable used to protect access to internal class data. */
     pthread_mutex_t m_serverMutex;
 
     /**
      * Mutex variable used to protect access to octave internals on asynchronous requests.
      *
      * Notes: This is necessary for asynchronous requests like detailed variable information
      * in a debugger mouse-over, inspection of matrix variables by double-clicking in the
@@ -230,17 +231,16 @@ private:
     // for output.
     std::vector<RequestedVariable> m_requestedVariables;
 
     /** History related member variables. */
     string_vector m_historyList;
     int m_previousHistoryLength;
 
     bool m_isProcessingServerData;
+    static OctaveLink m_singleton;
 };
 
 int server_rl_event_hook_function(void);
 bool server_rl_is_processing(void);
 
-extern OctaveLink oct_octave_server;
-
 #endif // OCTAVELINK_H
 
