# HG changeset patch
# User Torsten <mttl@mailbox.org>
# Date 1514403971 -3600
#      Wed Dec 27 20:46:11 2017 +0100
# Node ID 8cb985e362f36c523168af9865a7ecd70a14686c
# Parent  0b65949870e34856f8228992045e948e6960aca8
Allow uncommenting with any kind of comment (bug #52695):

* file-editor-tab.cc (do_comment_selected_text): get list of possible strings
  for uncommenting and create an according regular expression;
  (handle_char_added): comment string is snow a string list

* octave-qscintilla.cc (comment_string), octave-qscintilla.h: boolean
  parameter for commenting or uncommenting string, now returns a string list

* module.mk: new file octave-settings.h

* octave-settings.h: new files with constants for the preferences used for
  the comment strings

* settings-dialog.cc (settings_dialog): add the required radio buttons for
  the comment strings programmatically, read preferences from settings file;
  (write_changed_settings): read values from radio buttons and write into
  the settings file

* settings-dialog.h: declare the required radio butons

* settings-dialog.ui: add horizontal layouts for the radio buttons

diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -1457,21 +1457,62 @@ file_editor_tab::do_smart_indent_line_or
   _edit_area->smart_indent_line_or_selected_text (lineFrom, lineTo);
 
   _edit_area->endUndoAction ();
 }
 
 void
 file_editor_tab::do_comment_selected_text (bool comment)
 {
-  QString comment_str = _edit_area->comment_string ();
-  QRegExp rxc = QRegExp ("^([ \\t]*)" + comment_str);
-  int len = 0;
-  int lenc = comment_str.length ();
-
+  QStringList comment_str = _edit_area->comment_string (comment);
+  QRegExp rxc;
+  QString ws = "^([ \\t]*)";
+
+  if (comment)
+    {
+      // Commenting (only one string possible)
+      rxc = QRegExp (ws + comment_str.at (0));
+    }
+  else
+    {
+      // Uncommenting (several strings possible)
+
+      // Sort strings according their length
+      QStringList comment_str_sorted (comment_str.at (0));
+      bool inserted;
+
+      for (int i = 1; i < comment_str.length (); i++)
+        {
+          inserted = false;
+          for (int j = 0; j < comment_str_sorted.length (); j++)
+            {
+              if (comment_str.at (i).length () > comment_str_sorted.at (j).length ())
+                {
+                  comment_str_sorted.insert (j, comment_str.at (i));
+                  inserted = true;
+                  break;
+                }
+            }
+          if (! inserted)
+            comment_str_sorted << comment_str.at (i);
+        }
+
+      // Create regular expression
+      QString regexp;
+      for (int i = 0; i < comment_str_sorted.length (); i++)
+        {
+          if (i > 0)
+            regexp = regexp + QString ("|");
+          regexp = regexp + comment_str_sorted.at (i);
+        }
+      rxc = QRegExp (ws + "(" + regexp + ")");
+    }
+
+  // Do the commenting/uncommenting
+  int len = 0, lenc = 0;
   _edit_area->beginUndoAction ();
 
   if (_edit_area->hasSelectedText ())
     {
       int lineFrom, lineTo, colFrom, colTo;
       int change_col_from = 1;
       int change_col_to = 1;
       bool removed;
@@ -1480,25 +1521,26 @@ file_editor_tab::do_comment_selected_tex
 
       if (colTo == 0)  // the beginning of last line is not selected
         lineTo--;        // stop at line above
 
       for (int i = lineFrom; i <= lineTo; i++)
         {
           if (comment)
             {
-              _edit_area->insertAt (comment_str, i, 0);
-
+              _edit_area->insertAt (comment_str.at (0), i, 0);
             }
           else
             {
               QString line (_edit_area->text (i));
               if ((removed = line.contains (rxc)))
                 {
-                  len = rxc.matchedLength ();
+                  len = rxc.matchedLength ();   // complete length
+                  QString matched_text = rxc.capturedTexts ().at (0);
+                  lenc = matched_text.remove (QRegExp (ws)).length ();  // only comment string
                   _edit_area->setSelection (i, len-lenc, i, len);
                   _edit_area->removeSelectedText ();
                 }
 
               // handle case, where the selection remains unchanged
               if (i == lineFrom && (colFrom < len-lenc || ! removed))
                 change_col_from = 0;  // do not change start of selection
               if (i == lineTo && (colTo < len-lenc || ! removed))
@@ -1526,23 +1568,25 @@ file_editor_tab::do_comment_selected_tex
       // set updated selection area
       _edit_area->setSelection (lineFrom, colFrom, lineTo, colTo);
     }
   else
     {
       int cpline, col;
       _edit_area->getCursorPosition (&cpline, &col);
       if (comment)
-        _edit_area->insertAt (comment_str, cpline, 0);
+        _edit_area->insertAt (comment_str.at (0), cpline, 0);
       else
         {
           QString line (_edit_area->text (cpline));
           if (line.contains (rxc))
             {
-              len = rxc.matchedLength ();
+              len = rxc.matchedLength ();   // complete length
+              QString matched_text = rxc.capturedTexts ().at (0);
+              lenc = matched_text.remove (QRegExp (ws)).length ();  // only comment string
               _edit_area->setSelection (cpline, len-lenc, cpline, len);
               _edit_area->removeSelectedText ();
             }
         }
     }
   _edit_area->endUndoAction ();
 }
 
@@ -2889,17 +2933,17 @@ file_editor_tab::handle_char_added (int)
     if (c == ' ' || c == '\t')
       col_newline = col_space + 1;
 
     // Insert a newline char for breaking the line possibly followed
     // by a line comment string
     QString newline = QString ("\n");
     style_comment = _edit_area->is_style_comment ();
     if (style_comment == octave_qscintilla::ST_LINE_COMMENT)
-      newline = newline + _edit_area->comment_string ();
+      newline = newline + _edit_area->comment_string ().at (0);
     _edit_area->insertAt (newline, line, col_newline);
 
     // Automatically indent the new line to the indentation of previous line
     // and set the cursor position to the end of the indentation.
     _edit_area->setIndentation (line + 1, indentation);
     _edit_area->SendScintilla (QsciScintillaBase::SCI_LINEEND);
   }
 }
diff --git a/libgui/src/m-editor/octave-qscintilla.cc b/libgui/src/m-editor/octave-qscintilla.cc
--- a/libgui/src/m-editor/octave-qscintilla.cc
+++ b/libgui/src/m-editor/octave-qscintilla.cc
@@ -52,16 +52,18 @@ along with Octave; see the file COPYING.
 
 // FIXME: hardwired marker numbers?
 #include "marker.h"
 
 #include "octave-qscintilla.h"
 #include "file-editor-tab.h"
 #include "shortcut-manager.h"
 #include "resource-manager.h"
+#include "octave-settings.h"
+
 
 // Return true if CANDIDATE is a "closing" that matches OPENING,
 // such as "end" or "endif" for "if", or "catch" for "try".
 // Used for testing the last word of an "if" etc. line,
 // or the first word of the following line.
 static bool
 is_end (const QString& candidate, const QString& opening)
 {
@@ -371,57 +373,81 @@ void
 octave_qscintilla::get_current_position (int *pos, int *line, int *col)
 {
   *pos = SendScintilla (QsciScintillaBase::SCI_GETCURRENTPOS);
   *line = SendScintilla (QsciScintillaBase::SCI_LINEFROMPOSITION, *pos);
   *col = SendScintilla (QsciScintillaBase::SCI_GETCOLUMN, *pos);
 }
 
 // Function returning the comment string of the current lexer
-QString
-octave_qscintilla::comment_string (void)
+QStringList
+octave_qscintilla::comment_string (bool comment)
 {
   int lexer = SendScintilla (SCI_GETLEXER);
 
   switch (lexer)
     {
 #if defined (HAVE_LEXER_OCTAVE) || defined (HAVE_LEXER_MATLAB)
 #if defined (HAVE_LEXER_OCTAVE)
       case SCLEX_OCTAVE:
 #else
       case SCLEX_MATLAB:
 #endif
-       {
+        {
           QSettings *settings = resource_manager::get_settings ();
-          int comment_index
-                = settings->value ("editor/octave_comment_string", 0).toInt ();
-          if (comment_index == 1)
-            return QString ("#");
-          else if (comment_index == 2)
-            return QString ("%");
+          int comment_string;
+
+          if (comment)
+            {
+              // The commenting string is requested
+              if (settings->contains (oct_comment_str))   // new version (radio buttons)
+                comment_string = settings->value (oct_comment_str,
+                                                  oct_comment_str_d).toInt ();
+              else                                         // old version (combo box)
+                comment_string = settings->value (oct_comment_str_old,
+                                                  oct_comment_str_d).toInt ();
+
+              return (QStringList (oct_comment_strings.at (comment_string)));
+            }
           else
-            return QString ("##");  // default and for index 0
+            {
+              QStringList c_str;
+
+              // The possible uncommenting string(s) are requested
+              comment_string = settings->value (oct_uncomment_str,
+                                                oct_uncomment_str_d).toInt ();
+
+              for (int i = 0; i < oct_comment_strings_count; i++)
+                {
+                  if (1 << i & comment_string)
+                    c_str.append (oct_comment_strings.at (i));
+                }
+
+              return c_str;
+            }
+
         }
 #endif
 
       case SCLEX_PERL:
       case SCLEX_BASH:
       case SCLEX_DIFF:
-        return QString ("#");
+        return QStringList ("#");
 
       case SCLEX_CPP:
-        return QString ("//");
+        return QStringList ("//");
 
       case SCLEX_BATCH:
-        return QString ("REM ");
+        return QStringList ("REM ");
     }
 
-    return QString ("%");  // should never happen
+    return QStringList ("%");  // should never happen
 }
 
+
 // provide the style at a specific position
 int
 octave_qscintilla::get_style (int pos)
 {
   int position;
   if (pos < 0)
     // The positition has to be reduced by 2 for getting the real style (?)
     position = SendScintilla (QsciScintillaBase::SCI_GETCURRENTPOS) - 2;
diff --git a/libgui/src/m-editor/octave-qscintilla.h b/libgui/src/m-editor/octave-qscintilla.h
--- a/libgui/src/m-editor/octave-qscintilla.h
+++ b/libgui/src/m-editor/octave-qscintilla.h
@@ -53,17 +53,17 @@ public:
 
   void context_help_doc (bool);
   void context_edit (void);
   void context_run (void);
   void get_global_textcursor_pos (QPoint *global_pos, QPoint *local_pos);
   bool get_actual_word (void);
   void clear_selection_markers (void);
   void get_current_position (int *pos, int *line, int *col);
-  QString comment_string (void);
+  QStringList comment_string (bool comment = true);
   int get_style (int pos = -1);
   int is_style_comment (int pos = -1);
   void smart_indent (bool do_smart_indent, int do_auto_close, int line);
 
   void smart_indent_line_or_selected_text (int lineFrom, int lineTo);
 
   void set_word_selection (const QString& word = QString ());
 
diff --git a/libgui/src/module.mk b/libgui/src/module.mk
--- a/libgui/src/module.mk
+++ b/libgui/src/module.mk
@@ -156,16 +156,17 @@ noinst_HEADERS += \
   %reldir%/m-editor/find-dialog.h \
   %reldir%/m-editor/octave-qscintilla.h \
   %reldir%/m-editor/octave-txt-lexer.h \
   %reldir%/m-editor/marker.h \
   %reldir%/main-window.h \
   %reldir%/octave-gui.h \
   %reldir%/octave-cmd.h \
   %reldir%/octave-qt-link.h \
+  %reldir%/octave-settings.h \
   %reldir%/qtinfo/texinfo-parser.h \
   %reldir%/qtinfo/webinfo.h \
   %reldir%/resource-manager.h \
   %reldir%/settings-dialog.h \
   %reldir%/shortcut-manager.h \
   %reldir%/thread-manager.h \
   %reldir%/terminal-dock-widget.h \
   %reldir%/color-picker.h \
diff --git a/libgui/src/octave-settings.h b/libgui/src/octave-settings.h
new file mode 100644
--- /dev/null
+++ b/libgui/src/octave-settings.h
@@ -0,0 +1,43 @@
+/*
+
+Copyright (C) 2017 Torsten <mttl@mailbox.de>
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 3 of the License, or
+(at your option) any later version.
+
+Octave is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+#if ! defined (octave_settings_h)
+#define octave_settings_h 1
+
+//#if defined (HAVE_CONFIG_H)
+//#  include "config.h"
+//#endif
+
+#include <QStringList>
+
+// Octave comment strings
+const QString oct_comment_str_old ("editor/octave_comment_string");
+const int oct_comment_str_old_d = 0;
+
+const QString oct_comment_str ("editor/oct_comment_str");
+const QString oct_uncomment_str ("editor/oct_uncomment_str");
+const QStringList oct_comment_strings (QStringList () << "##" << "#" << "%"<< "%%" << "%!");
+const int oct_comment_strings_count = 5;
+const int oct_comment_str_d = 0;
+const int oct_uncomment_str_d = 1 + 2 + 4 + 8;
+
+#endif
diff --git a/libgui/src/settings-dialog.cc b/libgui/src/settings-dialog.cc
--- a/libgui/src/settings-dialog.cc
+++ b/libgui/src/settings-dialog.cc
@@ -440,17 +440,49 @@ settings_dialog::settings_dialog (QWidge
   ui->editor_checkbox_ac_functions->setChecked (settings->value ("editor/codeCompletion_octave_functions", true).toBool ());
   ui->editor_checkbox_ac_document->setChecked (settings->value ("editor/codeCompletion_document", false).toBool ());
   ui->editor_checkbox_ac_case->setChecked (settings->value ("editor/codeCompletion_case", true).toBool ());
   ui->editor_checkbox_ac_replace->setChecked (settings->value ("editor/codeCompletion_replace", false).toBool ());
   ui->editor_ws_checkbox->setChecked (settings->value ("editor/show_white_space", false).toBool ());
   ui->editor_ws_indent_checkbox->setChecked (settings->value ("editor/show_white_space_indent", false).toBool ());
   ui->cb_show_eol->setChecked (settings->value ("editor/show_eol_chars", false).toBool ());
   ui->cb_show_hscrollbar->setChecked (settings->value ("editor/show_hscroll_bar", true).toBool ());
-  ui->combo_oct_comment_str->setCurrentIndex (settings->value ("editor/octave_comment_string", 0).toInt ());
+
+  int selected_comment_string, selected_uncomment_string;
+
+  if (settings->contains (oct_comment_str))   // new version (radio buttons)
+    selected_comment_string = settings->value (oct_comment_str,
+                                               oct_comment_str_d).toInt ();
+  else                                         // old version (combo box)
+    selected_comment_string = settings->value (oct_comment_str_old,
+                                               oct_comment_str_d).toInt ();
+
+  selected_uncomment_string = settings->value (oct_uncomment_str,
+                                               oct_uncomment_str_d).toInt ();
+
+  for (int i = 0; i < oct_comment_strings_count; i++)
+    {
+      m_rb_comment_strings[i] = new QRadioButton ();
+      m_rb_uncomment_strings[i] = new QRadioButton ();
+
+      connect (m_rb_comment_strings[i], SIGNAL (clicked (bool)),
+               m_rb_uncomment_strings[i], SLOT (setChecked (bool)));
+      connect (m_rb_comment_strings[i], SIGNAL (toggled (bool)),
+               m_rb_uncomment_strings[i], SLOT (setDisabled (bool)));
+
+      m_rb_comment_strings[i]->setText (oct_comment_strings.at(i));
+      m_rb_comment_strings[i]->setChecked (i == selected_comment_string);
+      ui->layout_comment_strings->addWidget (m_rb_comment_strings[i]);
+
+      m_rb_uncomment_strings[i]->setText (oct_comment_strings.at(i));
+      m_rb_uncomment_strings[i]->setAutoExclusive (false);
+      m_rb_uncomment_strings[i]->setChecked ( 1 << i & selected_uncomment_string);
+      ui->layout_uncomment_strings->addWidget (m_rb_uncomment_strings[i]);
+    }
+
 
 #if defined (HAVE_QSCINTILLA)
 #  if defined (Q_OS_WIN32)
   int eol_mode = QsciScintilla::EolWindows;
 #elif defined (Q_OS_MAC)
   int eol_mode = QsciScintilla::EolMac;
 #else
   int eol_mode = QsciScintilla::EolUnix;
@@ -794,17 +826,34 @@ settings_dialog::write_changed_settings 
   settings->setValue ("editor/codeCompletion_case", ui->editor_checkbox_ac_case->isChecked ());
   settings->setValue ("editor/codeCompletion_replace", ui->editor_checkbox_ac_replace->isChecked ());
   settings->setValue ("editor/auto_endif", ui->editor_auto_endif->currentIndex ());
   settings->setValue ("editor/show_white_space", ui->editor_ws_checkbox->isChecked ());
   settings->setValue ("editor/show_white_space_indent", ui->editor_ws_indent_checkbox->isChecked ());
   settings->setValue ("editor/show_eol_chars", ui->cb_show_eol->isChecked ());
   settings->setValue ("editor/show_hscroll_bar", ui->cb_show_hscrollbar->isChecked ());
   settings->setValue ("editor/default_eol_mode", ui->combo_eol_mode->currentIndex ());
-  settings->setValue ("editor/octave_comment_string", ui->combo_oct_comment_str->currentIndex ());
+
+  // Comment strings
+  int rb_uncomment = 0;
+  for (int i = 0; i < oct_comment_strings_count; i++)
+    {
+      if (m_rb_comment_strings[i]->isChecked ())
+        {
+          settings->setValue (oct_comment_str, i);
+          if (i < 3)
+            settings->setValue (oct_comment_str_old, i);
+          else
+            settings->setValue (oct_comment_str_old, oct_comment_str_d);
+        }
+      if (m_rb_uncomment_strings[i]->isChecked ())
+        rb_uncomment = rb_uncomment + (1 << i);
+    }
+  settings->setValue (oct_uncomment_str, rb_uncomment);
+
   settings->setValue ("editor/default_encoding", ui->editor_combo_encoding->currentText ());
   settings->setValue ("editor/auto_indent", ui->editor_auto_ind_checkbox->isChecked ());
   settings->setValue ("editor/tab_indents_line", ui->editor_tab_ind_checkbox->isChecked ());
   settings->setValue ("editor/backspace_unindents_line", ui->editor_bs_unind_checkbox->isChecked ());
   settings->setValue ("editor/show_indent_guides", ui->editor_ind_guides_checkbox->isChecked ());
   settings->setValue ("editor/indent_width", ui->editor_ind_width_spinbox->value ());
   settings->setValue ("editor/indent_uses_tabs", ui->editor_ind_uses_tabs_checkbox->isChecked ());
   settings->setValue ("editor/tab_width", ui->editor_tab_width_spinbox->value ());
diff --git a/libgui/src/settings-dialog.h b/libgui/src/settings-dialog.h
--- a/libgui/src/settings-dialog.h
+++ b/libgui/src/settings-dialog.h
@@ -21,18 +21,20 @@ along with Octave; see the file COPYING.
 */
 
 #if ! defined (octave_settings_dialog_h)
 #define octave_settings_dialog_h 1
 
 #include <QDialog>
 #include <QSettings>
 #include <QLineEdit>
+#include <QRadioButton>
 
 #include "color-picker.h"
+#include "octave-settings.h"
 
 namespace Ui
 {
   class settings_dialog;
 }
 
 class settings_dialog:public QDialog
 {
@@ -78,11 +80,14 @@ private:
   void read_varedit_colors (QSettings *settings);
   void write_varedit_colors (QSettings *settings);
 
   color_picker *m_widget_title_bg_color;
   color_picker *m_widget_title_bg_color_active;
   color_picker *m_widget_title_fg_color;
   color_picker *m_widget_title_fg_color_active;
   color_picker *m_editor_current_line_color;
+
+  QRadioButton *m_rb_comment_strings[oct_comment_strings_count];
+  QRadioButton *m_rb_uncomment_strings[oct_comment_strings_count];
 };
 
 #endif
diff --git a/libgui/src/settings-dialog.ui b/libgui/src/settings-dialog.ui
--- a/libgui/src/settings-dialog.ui
+++ b/libgui/src/settings-dialog.ui
@@ -27,17 +27,17 @@
     <widget class="QTabWidget" name="tabWidget">
      <property name="minimumSize">
       <size>
        <width>0</width>
        <height>0</height>
       </size>
      </property>
      <property name="currentIndex">
-      <number>8</number>
+      <number>1</number>
      </property>
      <widget class="QWidget" name="tab_general">
       <property name="enabled">
        <bool>true</bool>
       </property>
       <attribute name="title">
        <string>General</string>
       </attribute>
@@ -505,17 +505,17 @@
           <bool>true</bool>
          </property>
          <widget class="QWidget" name="scrollAreaWidgetContents">
           <property name="geometry">
            <rect>
             <x>0</x>
             <y>0</y>
             <width>642</width>
-            <height>968</height>
+            <height>1012</height>
            </rect>
           </property>
           <layout class="QVBoxLayout" name="verticalLayout_16">
            <item>
             <widget class="QGroupBox" name="groupBox_5">
              <property name="title">
               <string>General</string>
              </property>
@@ -927,68 +927,75 @@
                     <width>40</width>
                     <height>20</height>
                    </size>
                   </property>
                  </spacer>
                 </item>
                </layout>
               </item>
+             </layout>
+            </widget>
+           </item>
+           <item>
+            <widget class="QGroupBox" name="groupBox_9">
+             <property name="title">
+              <string>Comments (Octave)</string>
+             </property>
+             <property name="checked">
+              <bool>false</bool>
+             </property>
+             <layout class="QVBoxLayout" name="verticalLayout_24">
               <item>
-               <layout class="QHBoxLayout" name="horizontalLayout_17">
-                <property name="topMargin">
-                 <number>0</number>
-                </property>
-                <item>
-                 <widget class="QLabel" name="label_23">
+               <layout class="QGridLayout" name="gridLayout_18">
+                <item row="1" column="0">
+                 <widget class="QLabel" name="label_28">
                   <property name="text">
-                   <string>Character used to comment selected text (Ctrl+R)</string>
+                   <string>Strings considered for uncommenting text</string>
                   </property>
                  </widget>
                 </item>
-                <item>
-                 <widget class="QComboBox" name="combo_oct_comment_str">
-                  <property name="sizePolicy">
-                   <sizepolicy hsizetype="Preferred" vsizetype="Preferred">
-                    <horstretch>0</horstretch>
-                    <verstretch>0</verstretch>
-                   </sizepolicy>
+                <item row="0" column="1">
+                 <spacer name="horizontalSpacer_35">
+                  <property name="orientation">
+                   <enum>Qt::Horizontal</enum>
                   </property>
-                  <property name="sizeAdjustPolicy">
-                   <enum>QComboBox::AdjustToContents</enum>
-                  </property>
-                  <property name="minimumContentsLength">
-                   <number>3</number>
+                  <property name="sizeType">
+                   <enum>QSizePolicy::Fixed</enum>
                   </property>
-                  <item>
-                   <property name="text">
-                    <string>##</string>
-                   </property>
-                  </item>
-                  <item>
-                   <property name="text">
-                    <string>#</string>
-                   </property>
-                  </item>
-                  <item>
-                   <property name="text">
-                    <string>%</string>
-                   </property>
-                  </item>
+                  <property name="sizeHint" stdset="0">
+                   <size>
+                    <width>10</width>
+                    <height>10</height>
+                   </size>
+                  </property>
+                 </spacer>
+                </item>
+                <item row="0" column="0">
+                 <widget class="QLabel" name="label_24">
+                  <property name="text">
+                   <string>String used for commenting selected text</string>
+                  </property>
                  </widget>
                 </item>
-                <item>
-                 <spacer name="horizontalSpacer_33">
+                <item row="0" column="2">
+                 <layout class="QHBoxLayout" name="layout_comment_strings"/>
+                </item>
+                <item row="1" column="2">
+                 <layout class="QHBoxLayout" name="layout_uncomment_strings"/>
+                </item>
+                <item row="0" column="8">
+                 <spacer name="horizontalSpacer_34">
                   <property name="orientation">
                    <enum>Qt::Horizontal</enum>
                   </property>
                   <property name="sizeHint" stdset="0">
                    <size>
                     <width>40</width>
-                    <height>20</height>
+                    <height>10</height>
                    </size>
                   </property>
                  </spacer>
                 </item>
                </layout>
               </item>
              </layout>
             </widget>
@@ -1811,18 +1818,18 @@
          <property name="widgetResizable">
           <bool>true</bool>
          </property>
          <widget class="QWidget" name="scrollAreaWidgetContents_4">
           <property name="geometry">
            <rect>
             <x>0</x>
             <y>0</y>
-            <width>658</width>
-            <height>573</height>
+            <width>481</width>
+            <height>230</height>
            </rect>
           </property>
           <layout class="QVBoxLayout" name="verticalLayout_7">
            <item>
             <layout class="QVBoxLayout" name="verticalLayout_8">
              <item>
               <layout class="QGridLayout" name="gridLayout_7">
                <property name="sizeHint" stdset="0">
@@ -2092,18 +2099,18 @@
          <property name="widgetResizable">
           <bool>true</bool>
          </property>
          <widget class="QWidget" name="scrollAreaWidgetContents_5">
           <property name="geometry">
            <rect>
             <x>0</x>
             <y>0</y>
-            <width>658</width>
-            <height>573</height>
+            <width>474</width>
+            <height>196</height>
            </rect>
           </property>
           <layout class="QGridLayout" name="gridLayout_8">
            <item row="0" column="0">
             <widget class="QGroupBox" name="groupBox_4">
              <property name="title">
               <string>Behavior</string>
              </property>
@@ -2236,18 +2243,18 @@
          <property name="widgetResizable">
           <bool>true</bool>
          </property>
          <widget class="QWidget" name="scrollAreaWidgetContents_6">
           <property name="geometry">
            <rect>
             <x>0</x>
             <y>0</y>
-            <width>658</width>
-            <height>573</height>
+            <width>200</width>
+            <height>77</height>
            </rect>
           </property>
           <layout class="QVBoxLayout" name="verticalLayout_19">
            <item>
             <layout class="QGridLayout" name="gridLayout_14">
              <property name="topMargin">
               <number>0</number>
              </property>
@@ -2305,18 +2312,18 @@
          <property name="widgetResizable">
           <bool>true</bool>
          </property>
          <widget class="QWidget" name="scrollAreaWidgetContents_8">
           <property name="geometry">
            <rect>
             <x>0</x>
             <y>0</y>
-            <width>658</width>
-            <height>573</height>
+            <width>364</width>
+            <height>210</height>
            </rect>
           </property>
           <layout class="QVBoxLayout" name="verticalLayout_25">
            <item>
             <layout class="QVBoxLayout" name="verticalLayout_26">
              <property name="sizeConstraint">
               <enum>QLayout::SetDefaultConstraint</enum>
              </property>
@@ -2504,18 +2511,18 @@
          <property name="widgetResizable">
           <bool>true</bool>
          </property>
          <widget class="QWidget" name="scrollAreaWidgetContents_7">
           <property name="geometry">
            <rect>
             <x>0</x>
             <y>0</y>
-            <width>658</width>
-            <height>573</height>
+            <width>529</width>
+            <height>199</height>
            </rect>
           </property>
           <layout class="QVBoxLayout" name="verticalLayout_20">
            <item>
             <layout class="QVBoxLayout" name="verticalLayout">
              <item>
               <widget class="QCheckBox" name="checkbox_allow_web_connect">
                <property name="text">
@@ -2663,18 +2670,18 @@
          <property name="widgetResizable">
           <bool>true</bool>
          </property>
          <widget class="QWidget" name="scrollAreaWidgetContents_3">
           <property name="geometry">
            <rect>
             <x>0</x>
             <y>0</y>
-            <width>658</width>
-            <height>573</height>
+            <width>615</width>
+            <height>169</height>
            </rect>
           </property>
           <layout class="QVBoxLayout" name="verticalLayout_vesc_manual">
            <property name="geometry" stdset="0">
             <rect>
              <x>0</x>
              <y>0</y>
              <width>678</width>
