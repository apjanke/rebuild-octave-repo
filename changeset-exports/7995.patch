# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1217434083 14400
#      Wed Jul 30 12:08:03 2008 -0400
# Node ID 89dd4531b26a0c8654ce6e9d5ffddcbbb37921d0
# Parent  8ccd9b0bf6bcc747aa43ade83e2a863f562bef2c
fread: translate NA values

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2008-07-30  John W. Eaton  <jwe@octave.org>
+
+	* oct-stream.cc (do_read): New arg, do_NA_conv.
+	Perform NA translation if do_NA_conv is true.
+	(DO_READ_VAL_TEMPLATE, read_fptr): Include the new arg for do_read
+	in decl.
+	(octave_stream::read): Pass do_NA_conv to do_read.
+
 2008-07-29  David Bateman  <dbateman@free.fr>
 
 	* data.cc (FNA): Add tests for conversion of single to double NA
 	values.
 
 	* ov-flt-re-mat.cc (Fsingle): Documentation fix.
 
 2008-07-28  David Bateman  <dbateman@free.fr>
diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -3021,17 +3021,17 @@ octave_stream::close (void)
 {
   if (stream_ok ())
     rep->close ();
 }
 
 template <class RET_T, class READ_T>
 octave_value
 do_read (octave_stream& strm, octave_idx_type nr, octave_idx_type nc, octave_idx_type block_size,
-	 octave_idx_type skip, bool do_float_fmt_conv,
+	 octave_idx_type skip, bool do_float_fmt_conv, bool do_NA_conv,
 	 oct_mach_info::float_format from_flt_fmt, octave_idx_type& count)
 {
   octave_value retval;
 
   RET_T nda;
 
   count = 0;
 
@@ -3134,16 +3134,19 @@ do_read (octave_stream& strm, octave_idx
 			nda.resize (dim_vector (nr, max_size / nr),
 				    elt_zero);
 		      else
 			nda.resize (dim_vector (max_size, 1), elt_zero);
 
 		      dat = nda.fortran_vec ();
 		    }
 
+		  if (do_NA_conv && __lo_ieee_is_old_NA (tmp))
+		    tmp = __lo_ieee_replace_old_NA (tmp);
+
 		  dat[count++] = tmp;
 
 		  elts_read++;
 		}
 
 	      int seek_status = 0;
 
 	      if (skip != 0 && elts_read == block_size)
@@ -3185,17 +3188,17 @@ do_read (octave_stream& strm, octave_idx
 
   retval = nda;
 
   return retval;
 }
 
 #define DO_READ_VAL_TEMPLATE(RET_T, READ_T) \
   template octave_value \
-  do_read<RET_T, READ_T> (octave_stream&, octave_idx_type, octave_idx_type, octave_idx_type, octave_idx_type, bool, \
+  do_read<RET_T, READ_T> (octave_stream&, octave_idx_type, octave_idx_type, octave_idx_type, octave_idx_type, bool, bool, \
 			  oct_mach_info::float_format, octave_idx_type&)
 
 // FIXME -- should we only have float if it is a different
 // size from double?
 
 #define INSTANTIATE_DO_READ(VAL_T) \
   DO_READ_VAL_TEMPLATE (VAL_T, octave_int8); \
   DO_READ_VAL_TEMPLATE (VAL_T, octave_uint8); \
@@ -3219,17 +3222,17 @@ INSTANTIATE_DO_READ (int32NDArray);
 INSTANTIATE_DO_READ (uint32NDArray);
 INSTANTIATE_DO_READ (int64NDArray);
 INSTANTIATE_DO_READ (uint64NDArray);
 INSTANTIATE_DO_READ (FloatNDArray);
 INSTANTIATE_DO_READ (NDArray);
 INSTANTIATE_DO_READ (charNDArray);
 INSTANTIATE_DO_READ (boolNDArray);
 
-typedef octave_value (*read_fptr) (octave_stream&, octave_idx_type, octave_idx_type, octave_idx_type, octave_idx_type, bool,
+typedef octave_value (*read_fptr) (octave_stream&, octave_idx_type, octave_idx_type, octave_idx_type, octave_idx_type, bool, bool,
 				   oct_mach_info::float_format ffmt, octave_idx_type&);
 
 NO_INSTANTIATE_ARRAY_SORT (read_fptr);
 INSTANTIATE_ARRAY (read_fptr,);
 template class Array2<read_fptr>;
 
 #define FILL_TABLE_ROW(R, VAL_T) \
   read_fptr_table(R,oct_data_conv::dt_int8) = do_read<VAL_T, octave_int8>; \
@@ -3309,20 +3312,23 @@ octave_stream::read (const Array<double>
 		ffmt = float_format ();
 
 	      read_fptr fcn = read_fptr_table (output_type, input_type);
 
 	      bool do_float_fmt_conv = ((input_type == oct_data_conv::dt_double
 					 || input_type == oct_data_conv::dt_single)
 					&& ffmt != float_format ());
 
+	      bool do_NA_conv = (output_type == oct_data_conv::dt_double);
+
 	      if (fcn)
 		{
 		  retval = (*fcn) (*this, nr, nc, block_size, skip,
-				   do_float_fmt_conv, ffmt, char_count);
+				   do_float_fmt_conv, do_NA_conv,
+				   ffmt, char_count);
 
 		  // FIXME -- kluge!
 
 		  if (! error_state
 		      && (output_type == oct_data_conv::dt_char
 			  || output_type == oct_data_conv::dt_schar
 			  || output_type == oct_data_conv::dt_uchar))
 		    retval = octave_value (retval.char_matrix_value (), true);
