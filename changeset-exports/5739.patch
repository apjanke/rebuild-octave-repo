# HG changeset patch
# User jwe
# Date 1144220185 0
#      Wed Apr 05 06:56:25 2006 +0000
# Node ID d090d39bb82c95826cf9cb7ceabfdf55f06f5390
# Parent  126d7f1945eee386adaa592b46a75e3ebf91a1e9
[project @ 2006-04-05 06:56:24 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,19 @@
+2006-04-05  John W. Eaton  <jwe@octave.org>
+
+	* Makefile.in (mk-pkg-add): Use mfilename to simplify.
+	(PKG_ADD): Don't pass --prefix arg to mk-pkg-add.
+	(PKG_ADD.inst): Delete target.
+	(clean): Don't remove PKG_ADD.inst.
+	(install-oct): Don't depend on PKG_ADD.inst.  Install PKG_ADD, not
+	PKG_ADD.inst.
+
+	* parse.y (Fmfilename): New function.
+
 2006-04-04  David Bateman  <dbateman@free.fr>
 
 	* help.cc (Flookfor): Skip overloaded functions.  Lookup help text
 	of autoloaded function, not parent that contains the autoload.
 
 2006-04-03  David Bateman  <dbateman@free.fr>
 
 	* data.cc (Fresize): New function.
diff --git a/src/Makefile.in b/src/Makefile.in
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -340,21 +340,17 @@ builtins.cc: $(DEF_FILES) mkbuiltins
 	@echo DEF_FILES = $(DEF_FILES)
 	@echo VAR_FILES = $(VAR_FILES)
 	@echo $(DEF_FILES) > def-files
 	@echo $(VAR_FILES) > var-files
 	@$(srcdir)/mkbuiltins def-files var-files > $@-t
 	@$(top_srcdir)/move-if-change $@-t $@
 
 PKG_ADD: $(DLD_DEF_FILES)
-	$(srcdir)/mk-pkg-add --prefix $(shell pwd) $(DLD_DEF_FILES) > $@-t
-	mv $@-t $@
-
-PKG_ADD.inst: $(srcdir)/mk-pkg-add $(DLD_DEF_FILES)
-	$(srcdir)/mk-pkg-add --install $(DLD_DEF_FILES) > $@-t
+	$(srcdir)/mk-pkg-add $(DLD_DEF_FILES) > $@-t
 	mv $@-t $@
 
 DOCSTRINGS: gendoc$(BUILD_EXEEXT)
 	./gendoc > $@-t
 	mv $@-t $@
 
 doc-files: $(DOC_FILES)
 	@echo making $@
@@ -397,19 +393,19 @@ install-strip:
 
 install-bin:
 	$(top_srcdir)/mkinstalldirs $(DESTDIR)$(bindir)
 	rm -f $(DESTDIR)$(bindir)/octave$(EXEEXT)
 	$(INSTALL_PROGRAM) octave$(EXEEXT) $(DESTDIR)$(bindir)/octave-$(version)$(EXEEXT)
 	cd $(DESTDIR)$(bindir) ; $(LN_S) octave-$(version)$(EXEEXT) octave$(EXEEXT)
 .PHONY: install-bin
 
-install-oct: PKG_ADD.inst
+install-oct:
 	$(top_srcdir)/mkinstalldirs $(DESTDIR)$(octfiledir)
-	$(INSTALL_DATA) PKG_ADD.inst $(DESTDIR)$(octfiledir)/PKG_ADD
+	$(INSTALL_DATA) PKG_ADD $(DESTDIR)$(octfiledir)/PKG_ADD
 	if [ -n "$(OCT_FILES)" ]; then \
 	  xfiles="$(OCT_FILES)"; \
 	  for f in $$xfiles; do \
 	    $(INSTALL_PROGRAM) $$f $(DESTDIR)$(octfiledir)/$$f; \
 	  done; \
 	fi
 .PHONY: install-oct
 
@@ -473,17 +469,16 @@ TAGS: $(SOURCES) $(DLD_SRC)
 
 clean:
 	rm -f liboctinterp.$(LIBEXT)
 	rm -f liboctinterp.$(SHLEXT_VER) liboctinterp.$(SHLEXT)
 	rm -f $(OBJECTS) $(MAKEDEPS) $(DOC_FILES) $(OCT_FILES)
 	rm -f $(PICOBJ) $(DLD_PICOBJ) stmp-pic gendoc$(EXEEXT)
 	rm -f builtins.cc ops.cc defaults.h oct-conf.h def-files var-files
 	rm -f PKG_ADD
-	rm -f PKG_ADD.inst
 	-rmdir pic
 .PHONY: clean
 
 mostlyclean: clean
 .PHONY: mostlyclean
 
 distclean: clean
 	rm -f Makefile octave$(EXEEXT) .fname so_locations oct-errno.cc
diff --git a/src/mk-pkg-add b/src/mk-pkg-add
--- a/src/mk-pkg-add
+++ b/src/mk-pkg-add
@@ -1,53 +1,27 @@
 #! /bin/sh -e
 
 SED=${SED:-'sed'}
 
-install=false
-if [ $1 = "--prefix" ]; then
-  shift
-  prefix="$1"
-  shift
-elif [ $1 = "--install" ]; then
-  install=true
-  shift
-fi
-
-if [ $# -gt 0 ]; then
-  if $install; then
-    cat <<EOF
-__octfiledir__ = strrep (octave_config_info ("octfiledir"),
-                         octave_config_info ("prefix"),
-                         OCTAVE_HOME);
-EOF
-  fi
-fi
-
 for f in "$@"; do
   if [ -f $f ]; then
 
     ## Compute and print the autoloads.
   
     base=`basename $f | $SED 's/\.df$//'`
     fcns=`grep '^ *XDEFUN_DLD_INTERNAL' $f |\
 	  $SED -e 's/XDEFUN_DLD_INTERNAL *( *//' -e 's/ *,.*$//' |\
 	  sort -u`
     if [ -n "$fcns" ]; then
       for n in $fcns; do
 	if [ "$n" = "$base" ]; then
 	  true
 	else
-          if [ -n "$prefix" ]; then
-	    echo "autoload (\"$n\", strcat (\"$prefix\", filesep, \"$base.oct\"));"
-          elif $install; then
-            echo "autoload (\"$n\", strcat (__octfiledir__, filesep, \"$base.oct\"));"
-	  else
-	    echo "autoload (\"$n\", \"$base.oct\");"
-	  fi
+          echo "autoload (\"$n\", fullfile (fileparts (mfilename (\"fullpath\")), \"$base.oct\"));"
 	fi
       done
     fi
 
     ## Process PKG_ADD directives after autoloads so that all
     ## necessary functions can be found before they are used.
 
     $SED -n -e 's,^//* *PKG_ADD: *,,p' \
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -3579,16 +3579,78 @@ source_file (const std::string file_name
 
   if (error_state)
     error ("source: error sourcing file `%s'",
 	   file_full_name.c_str ());
 
   unwind_protect::run_frame ("source_file");
 }
 
+DEFUN (mfilename, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} mfilename ()\n\
+@deftypefnx {Built-in Function} {} mfilename (@code{\"fullpath\"})\n\
+@deftypefnx {Built-in Function} {} mfilename (@code{\"fullpathext\"})\n\
+Return the name of the currently executing file.  At the top-level,\n\
+return the empty string.  Given the argument @code{\"fullpath\"},\n\
+include the directory part of the file name, but not the extension.\n\
+Given the argument @code{\"fullpathext\"}, include the directory part\n\
+of the file name and the extension.\n\
+@end deftypfn")
+{
+  octave_value retval;
+
+  int nargin = args.length ();
+
+  if (nargin > 1)
+    {
+      print_usage ("mfilename");
+      return retval;
+    }
+
+  std::string arg;
+
+  if (nargin == 1)
+    {
+      arg = args(0).string_value ();
+
+      if (error_state)
+	{
+	  error ("mfilename: expecting argument to be a character string");
+	  return retval;
+	}
+    }
+
+  std::string fname;
+
+  if (curr_caller_function)
+    fname = curr_caller_function->fcn_file_name ();
+
+  if (arg == "fullpathext")
+    retval = fname;
+  else
+    {
+      size_t pos = fname.rfind ('.');
+
+      fname = (pos != NPOS) ? fname.substr (0, pos) : fname;
+
+      if (arg == "fullpath")
+	retval = fname;
+      else
+	{
+	  pos = fname.rfind (file_ops::dir_sep_char);
+
+	  retval = (pos != NPOS) ? fname.substr (pos+1) : fname;
+	}
+    }
+
+  return retval;
+}
+
+
 DEFUN (source, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} source (@var{file})\n\
 Parse and execute the contents of @var{file}.  This is equivalent to\n\
 executing commands from a script file, but without requiring the file to\n\
 be named @file{@var{file}.m}.\n\
 @end deftypefn")
 {
