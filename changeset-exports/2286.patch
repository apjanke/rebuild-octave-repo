# HG changeset patch
# User jwe
# Date 833517791 0
#      Fri May 31 04:43:11 1996 +0000
# Node ID c0eed36e660d79bfcd466ff4d9a0fa1963cda25a
# Parent  3e0a2661f0a044099ef867c32d98eb570f758fcc
[project @ 1996-05-31 04:41:50 by jwe]

diff --git a/src/fn-cache.cc b/src/fn-cache.cc
--- a/src/fn-cache.cc
+++ b/src/fn-cache.cc
@@ -41,61 +41,73 @@ octave_fcn_file_name_cache *octave_fcn_f
 // Update the cache.  Returns TRUE if something needed to be updated.
 
 // We just accumulate all directories ever referenced in the cache and
 // we don't delete any old ones.
 
 bool
 octave_fcn_file_name_cache::update (const string& path)
 {
-  bool retval = false;
+  bool something_changed = false;
 
   dir_path p = path.empty () ? dir_path (Vload_path) : dir_path (path);
 
   string_vector dirs = p.all_directories ();
 
   int len = dirs.length ();
 
   for (int i = 0; i < len; i++)
     {
       string d = dirs[i];
 
       if (cache.contains (d))
 	{
 	  if (cache[d].update (d))
-	    retval = true;
+	    something_changed = true;
 	}
       else
 	{
 	  cache[d] = file_name_cache_elt (d);
-	  retval = true;
+	  something_changed = true;
 	}
     }
 
-  return retval;
+  return something_changed;
 }
 
 // Check to see if any of the elements in the cache need to be
 // updated, then return the list of names in the cache.
 
 string_vector
 octave_fcn_file_name_cache::do_list (const string& path, bool no_suffix)
 {
-  // Only recompute the cache if something has changed.
+  update (path);
 
-  if (update (path))
-    {
-      int total_len = 0;
+  string_vector fcn_file_names;
+  string_vector fcn_file_names_no_suffix;
+
+  // For now, always generate the list of function files on each
+  // call.
 
-      dir_path p (Vload_path);
+  // XXX FIXME XXX -- this could probably be improved by keeping lists
+  // of all the function files for the current load path and only
+  // updating that when the load path changes.  Have to be careful to
+  // return the right thing when we are only looking for a subset of
+  // all the files in the load path.
+
+  int total_len = 0;
 
-      string_vector dirs = p.all_directories ();
+  dir_path p = path.empty () ? dir_path (Vload_path) : dir_path (path);
+
+  string_vector dirs = p.all_directories ();
 
-      int ndirs = dirs.length ();
+  int ndirs = dirs.length ();
 
+  if (ndirs > 1)
+    {
       for (int i = 0; i < ndirs; i++)
 	{
 	  string d = dirs[i];
 
 	  total_len += cache[d].length ();
 	}
 
       fcn_file_names.resize (total_len);
@@ -118,16 +130,25 @@ octave_fcn_file_name_cache::do_list (con
 	    {
 	      fcn_file_names[k] = ffn[i];
 	      fcn_file_names_no_suffix[k] = ffnns[i];
 
 	      k++;
 	    }
 	}
     }
+  else if (ndirs == 1)
+    {
+      string d = dirs[0];
+
+      file_name_cache_elt elt = cache[d];
+
+      fcn_file_names = elt.fcn_file_names;
+      fcn_file_names_no_suffix = elt.fcn_file_names_no_suffix;
+    }
 
   return no_suffix ? fcn_file_names_no_suffix : fcn_file_names;
 }
 
 string_vector
 octave_fcn_file_name_cache::list (const string& path, bool no_suffix)
 {
   string_vector retval;
diff --git a/src/fn-cache.h b/src/fn-cache.h
--- a/src/fn-cache.h
+++ b/src/fn-cache.h
@@ -107,23 +107,16 @@ public:
 private:
 
   static octave_fcn_file_name_cache *instance;
 
   // An associative array of all the directory names in the load path
   // and the corresponding cache elements.
   CHMap<file_name_cache_elt> cache;
 
-  // The list of function file names in the cache.
-  string_vector fcn_file_names;
-
-  // The list of function file names in the cache without the .m or
-  // .oct suffixes.
-  string_vector fcn_file_names_no_suffix;
-
   string_vector do_list (const string& path, bool no_suffix);
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
