# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1472082632 14400
#      Wed Aug 24 19:50:32 2016 -0400
# Node ID c0f446d657bf2a99e405ea608e0bd3e2b8faa231
# Parent  3473246a824e8eafbf0e9be3abfe3dfcbe36d567
* bug-38236.tst, classes.tst: Tag some known failures with bug IDs.

diff --git a/test/bug-38236/bug-38236.tst b/test/bug-38236/bug-38236.tst
--- a/test/bug-38236/bug-38236.tst
+++ b/test/bug-38236/bug-38236.tst
@@ -1,3 +1,3 @@
-%!xtest
+%!test <38236>
 %! u_vr
 
diff --git a/test/classes/classes.tst b/test/classes/classes.tst
--- a/test/classes/classes.tst
+++ b/test/classes/classes.tst
@@ -304,28 +304,33 @@
 %!assert (s1 >= (x1 - 1))
 %!assert (x1 >= (s1 - 1))
 
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %% Testing horizontal & vertical concatenation %%
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 
 %% Test overloaded vertcat() for the Snork class
-%% See bug #38128 (http://savannah.gnu.org/bugs/?38128)
-%!test   s = [s1; s2];  assert (isa (s, 'Snork') && isequal (s.gick, [x1; x2]));
-%!xtest  s = [s1; x2];  assert (isa (s, 'Snork') && isequal (s.gick, [x1; x2]));
-%!xtest  s = [x1; s2];  assert (isa (s, 'Snork') && isequal (s.gick, [x1; x2]));
+%!test <38128>
+%! s = [s1; s2];  assert (isa (s, 'Snork') && isequal (s.gick, [x1; x2]));
+%!test <38128>
+%! s = [s1; x2];  assert (isa (s, 'Snork') && isequal (s.gick, [x1; x2]));
+%!test <38128>
+%! s = [x1; s2];  assert (isa (s, 'Snork') && isequal (s.gick, [x1; x2]));
 
 %% Test overloaded horzcat() for the Snork class
-%% See bug #38128 (http://savannah.gnu.org/bugs/?38128)
-%!test   s = [s1 s2];  assert (isa (s, 'Snork') && isequal (s.gick, [x1 x2]));
-%!xtest  s = [s1 x2];  assert (isa (s, 'Snork') && isequal (s.gick, [x1 x2]));
-%!xtest  s = [x1 s2];  assert (isa (s, 'Snork') && isequal (s.gick, [x1 x2]));
+%!test <38128>
+%! s = [s1 s2];  assert (isa (s, 'Snork') && isequal (s.gick, [x1 x2]));
+%!test <38128>
+%! s = [s1 x2];  assert (isa (s, 'Snork') && isequal (s.gick, [x1 x2]));
+%!test <38128>
+%! s = [x1 s2];  assert (isa (s, 'Snork') && isequal (s.gick, [x1 x2]));
 
-%% Test with the Blork class, where neither vertcat() nor horzcat() is overloaded
+%% Test with the Blork class, where neither vertcat() nor horzcat()
+%% is overloaded
 %!shared x1, x2, x3
 %!test x1 = Blork ();
 %!test x2 = [x1 x1];
 %!assert (isa (x2, 'Blork') && isequal (size (x2), [1 2]))
 %!test x2 = [x1 51];
 %!assert (isa (x2, 'Blork') && isequal (size (x2), [1 2]))
 %!test x3 = [x2; x2];
 %!assert (isa (x3, 'Blork') && isequal (size (x3), [2 2]))
@@ -379,31 +384,31 @@
 %!assert (isvector (st))
 
 %!test st = SizeTester ([1 2]);
 %! assert (isequal (size (st), [1 2]));
 %! assert (isequal (numel (st), 2));
 %!assert (isequal (ndims (st), 2))
 %!assert (isequal (rows (st), 1))
 %!xtest assert (isequal (columns (st), 2))
-%!assert (isequal (st, st))                # bug #44334
-%!xtest assert (not (isscalar (st)))       # bug #44498
+%!assert <44334> (isequal (st, st))
+%!assert <44498> (not (isscalar (st)))
 %!assert (isvector (st))
 
 %!test st = SizeTester ([2 3]);
 %! assert (isequal (size (st), [2 3]));
 %! assert (isequal (numel (st), 6));
 %!assert (isequal (ndims (st), 2))
 %!xtest assert (isequal (rows (st), 2))
 %!xtest assert (isequal (columns (st), 3))
-%!assert (isequal (st, st))                # bug #44334
-%!xtest assert (not (isscalar (st)))       # bug #44498
-%!xtest assert (not (isvector (st)))       # bug #44498
+%!assert <44334> (isequal (st, st))
+%!assert <44498> (not (isscalar (st)))
+%!assert <44498> (not (isvector (st)))
 
 %!test st = SizeTester ([2 3 4]);
 %! assert (isequal (size (st), [2 3 4]));
 %! assert (isequal (numel (st), 24));
 %!xtest assert (isequal (ndims (st), 3))
 %!xtest assert (isequal (rows (st), 2))
 %!xtest assert (isequal (columns (st), 3))
-%!assert (isequal (st, st))                # bug #44334
-%!xtest assert (not (isscalar (st)))       # bug #44498
-%!xtest assert (not (isvector (st)))       # bug #44498
+%!assert <44334> (isequal (st, st))
+%!assert <44498> (not (isscalar (st)))
+%!assert <44498> (not (isvector (st)))
