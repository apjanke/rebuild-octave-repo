# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1365323975 14400
#      Sun Apr 07 04:39:35 2013 -0400
# Node ID 203efbbcea637fce2b70e48c4db5bf01d2eec69b
# Parent  38ed6bdd1f7f8a8421bf146acfa88130327249e8
* main-window.h, main-window.cc: Style fixes.

diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -63,17 +63,17 @@ main_window::main_window (QWidget *p)
     history_window (new history_dock_widget (this)),
     file_browser_window (new files_dock_widget (this)),
     doc_browser_window (new documentation_dock_widget (this))
 {
   // We have to set up all our windows, before we finally launch octave.
   construct ();
 }
 
-main_window::~main_window ()
+main_window::~main_window (void)
 {
   delete _workspace_model;
   delete status_bar;
   delete command_window;
   delete history_window;
   delete file_browser_window;
   delete doc_browser_window;
 
@@ -105,17 +105,17 @@ void
 main_window::new_file (const QString& commands)
 {
 #ifdef HAVE_QSCINTILLA
   _file_editor->request_new_file (commands);
 #endif
 }
 
 void
-main_window::open_file ()
+main_window::open_file (void)
 {
 #ifdef HAVE_QSCINTILLA
   _file_editor->request_open_file ();
 #endif
 }
 
 void
 main_window::open_file (const QString& file_name)
@@ -127,39 +127,39 @@ main_window::open_file (const QString& f
 
 void
 main_window::report_status_message (const QString& statusMessage)
 {
   status_bar->showMessage (statusMessage, 1000);
 }
 
 void
-main_window::handle_save_workspace_request ()
+main_window::handle_save_workspace_request (void)
 {
   QString selectedFile =
     QFileDialog::getSaveFileName (this, tr ("Save Workspace As"),
                                   resource_manager::get_home_path ());
   if (!selectedFile.isEmpty ())
     octave_link::post_event (this, &main_window::save_workspace_callback,
                              selectedFile.toStdString ());
 }
 
 void
-main_window::handle_load_workspace_request ()
+main_window::handle_load_workspace_request (void)
 {
   QString selectedFile =
     QFileDialog::getOpenFileName (this, tr ("Load Workspace"),
                                   resource_manager::get_home_path ());
   if (!selectedFile.isEmpty ())
     octave_link::post_event (this, &main_window::load_workspace_callback,
                              selectedFile.toStdString ());
 }
 
 void
-main_window::handle_clear_workspace_request ()
+main_window::handle_clear_workspace_request (void)
 {
   octave_link::post_event (this, &main_window::clear_workspace_callback);
 }
 
 void
 main_window::handle_clear_history_request (void)
 {
   octave_link::post_event (this, &main_window::clear_history_callback);
@@ -169,41 +169,41 @@ void
 main_window::handle_command_double_clicked (const QString& command)
 {
   emit relay_command_signal (command);
 
   command_window->focus ();
 }
 
 void
-main_window::open_online_documentation_page ()
+main_window::open_online_documentation_page (void)
 {
   QDesktopServices::openUrl (QUrl ("http://gnu.org/software/octave/doc/interpreter"));
 }
 
 void
-main_window::open_bug_tracker_page ()
+main_window::open_bug_tracker_page (void)
 {
   QDesktopServices::openUrl (QUrl ("http://bugs.octave.org"));
 }
 
 void
-main_window::open_octave_forge_page ()
+main_window::open_octave_forge_page (void)
 {
   QDesktopServices::openUrl (QUrl ("http://octave.sourceforge.net/"));
 }
 
 void
-main_window::open_agora_page ()
+main_window::open_agora_page (void)
 {
   QDesktopServices::openUrl (QUrl ("http://agora.octave.org/"));
 }
 
 void
-main_window::process_settings_dialog_request ()
+main_window::process_settings_dialog_request (void)
 {
   settings_dialog *settingsDialog = new settings_dialog (this);
   int change_settings = settingsDialog->exec ();
   if (change_settings == QDialog::Accepted)
     {
       settingsDialog->write_changed_settings ();
       QSettings *settings = resource_manager::get_settings ();
       if (settings)
@@ -214,62 +214,67 @@ main_window::process_settings_dialog_req
 
 
 void
 main_window::notice_settings (const QSettings *settings)
 {
   // QSettings pointer is checked before emitting.
 
   // the widget's icons (when floating)
-  QString icon_set = settings->value ("DockWidgets/widget_icon_set","NONE").
-                                      toString ();
+  QString icon_set
+    = settings->value ("DockWidgets/widget_icon_set", "NONE").toString ();
+
   static struct
     {
       QString name;
       QString path;
     }
+
   widget_icon_data[] =
     { // array of possible icon sets (name, path (complete for NONE))
       // the first entry here is the default!
       {"NONE",    ":/actions/icons/logo.png"},
       {"GRAPHIC", ":/actions/icons/graphic_logo_"},
       {"LETTER",  ":/actions/icons/letter_logo_"},
       {"", ""} // end marker has empty name
     };
+
   int count = 0;
   int icon_set_found = 0; // default
+
   while (!widget_icon_data[count].name.isEmpty ())
     { // while not end of data
       if (widget_icon_data[count].name == icon_set)
         { // data of desired icon set found
           icon_set_found = count;
           break;
         }
       count++;
     }
+
   QString icon;
   foreach (QObject *obj, children ())
     {
       QString name = obj->objectName ();
-      if (obj->inherits("QDockWidget") && ! name.isEmpty ())
+      if (obj->inherits ("QDockWidget") && ! name.isEmpty ())
         { // if children is a dockwidget with a name
           QDockWidget *widget = qobject_cast<QDockWidget *> (obj);
           icon = widget_icon_data[icon_set_found].path; // prefix or octave-logo
           if (widget_icon_data[icon_set_found].name != "NONE")
             icon = icon + name + ".png"; // add widget name and ext.
           widget->setWindowIcon (QIcon (icon));
         }
     }
 
   resource_manager::update_network_settings ();
 }
 
 
 void
-main_window::prepare_for_quit ()
+main_window::prepare_for_quit (void)
 {
   write_settings ();
 }
 
 void
 main_window::reset_windows ()
 {
   // TODO: Implement.
@@ -348,31 +353,31 @@ main_window::accept_directory_line_edit 
 
   int index = _current_directory_combo_box->findText (dir);
 
   if (index < 0)
     set_current_working_directory (dir);
 }
 
 void
-main_window::focus_workspace ()
+main_window::focus_workspace (void)
 {
   if (!_workspace_view->isVisible ())
     {
       _workspace_view->setVisible (true);
     }
 
   _workspace_view->setFocus ();
   _workspace_view->activateWindow ();
   _workspace_view->raise ();
 }
 
 
 void
-main_window::focus_editor ()
+main_window::focus_editor (void)
 {
 #ifdef HAVE_QSCINTILLA
   // call own function of editor in order to set focus to the current editor tab
   _file_editor->set_focus ();
 #endif
 }
 
 void
@@ -421,83 +426,83 @@ main_window::handle_exit_debugger (void)
   _debug_quit->setEnabled (false);
 
 #ifdef HAVE_QSCINTILLA
   _file_editor->handle_exit_debug_mode ();
 #endif
 }
 
 void
-main_window::debug_continue ()
+main_window::debug_continue (void)
 {
   octave_link::post_event (this, &main_window::debug_continue_callback);
 }
 
 void
-main_window::debug_step_into ()
+main_window::debug_step_into (void)
 {
   octave_link::post_event (this, &main_window::debug_step_into_callback);
 }
 
 void
-main_window::debug_step_over ()
+main_window::debug_step_over (void)
 {
   octave_link::post_event (this, &main_window::debug_step_over_callback);
 }
 
 void
-main_window::debug_step_out ()
+main_window::debug_step_out (void)
 {
   octave_link::post_event (this, &main_window::debug_step_out_callback);
 }
 
 void
-main_window::debug_quit ()
+main_window::debug_quit (void)
 {
   octave_link::post_event (this, &main_window::debug_quit_callback);
 }
 
 void
-main_window::show_about_octave ()
+main_window::show_about_octave (void)
 {
   QString message = OCTAVE_STARTUP_MESSAGE;
 
   QMessageBox::about (this, tr ("About Octave"), message);
 }
 
 void
 main_window::closeEvent (QCloseEvent *e)
 {
   e->ignore ();
   octave_link::post_event (this, &main_window::exit_callback);
 }
 
 void
-main_window::read_settings ()
+main_window::read_settings (void)
 {
   QSettings *settings = resource_manager::get_settings ();
   if (!settings)
     {
       qDebug("Error: QSettings pointer from resource manager is NULL.");
       return;
     }
 
   restoreState (settings->value ("MainWindow/windowState").toByteArray ());
   settings->beginGroup ("DockWidgets");
   // restoring the geometry of all dock-widgets
   foreach (QObject *obj, children ())
     {
       QString name = obj->objectName ();
-      if (obj->inherits("QDockWidget") && ! name.isEmpty ())
+      if (obj->inherits ("QDockWidget") && ! name.isEmpty ())
         {
           QDockWidget *widget = qobject_cast<QDockWidget *> (obj);
           QVariant val = settings->value (name);
           widget->restoreGeometry (val.toByteArray ());
-          bool floating = settings->value (name+"Floating",false).toBool ();
-          bool visible = settings->value (name+"Visible",true).toBool ();
+          bool floating = settings->value (name+"Floating", false).toBool ();
+          bool visible = settings->value (name+"Visible", true).toBool ();
           if (floating)
             widget->setWindowFlags (Qt::Window); // if floating, make window from widget
           widget->setVisible (visible);          // make widget visible if desired (setWindowFlags hides widget)
         }
     }
   settings->endGroup();
   restoreGeometry (settings->value ("MainWindow/geometry").toByteArray ());
   // restore the list of the last directories
@@ -505,17 +510,17 @@ main_window::read_settings ()
   for (int i=0; i < curr_dirs.size (); i++)
     {
       _current_directory_combo_box->addItem (curr_dirs.at (i));
     }
   emit settings_changed (settings);
 }
 
 void
-main_window::write_settings ()
+main_window::write_settings (void)
 {
   QSettings *settings = resource_manager::get_settings ();
   if (!settings)
     {
       qDebug("Error: QSettings pointer from resource manager is NULL.");
       return;
     }
 
@@ -526,62 +531,62 @@ main_window::write_settings ()
     {
       QString name = obj->objectName ();
       if (obj->inherits ("QDockWidget") && ! name.isEmpty ())
         {
           QDockWidget *widget = qobject_cast<QDockWidget *> (obj);
           settings->setValue (name, widget->saveGeometry ());
           bool floating = widget->isFloating ();
           bool visible = widget->isVisible ();
-          settings->setValue (name+"Floating",floating);  // store floating state
-          settings->setValue (name+"Visible",visible);    // store visibility
+          settings->setValue (name+"Floating", floating);  // store floating state
+          settings->setValue (name+"Visible", visible);    // store visibility
           if (floating)
-            widget->setWindowFlags(Qt::Widget); // if floating, recover the widget state such that the widget's
+            widget->setWindowFlags (Qt::Widget); // if floating, recover the widget state such that the widget's
         }                                       // state is correctly saved by the saveSate () below
     }
   settings->endGroup();
   settings->setValue ("MainWindow/windowState", saveState ());
   // write the list of recent used directories
   QStringList curr_dirs;
   for (int i=0; i<_current_directory_combo_box->count (); i++)
     {
       curr_dirs.append (_current_directory_combo_box->itemText (i));
     }
-  settings->setValue ("MainWindow/current_directory_list",curr_dirs);
+  settings->setValue ("MainWindow/current_directory_list", curr_dirs);
   settings->sync ();
 }
 
 
 // Connecting the signals emitted when the visibility of a widget changes.
 // This has to be done after the window is shown (see octave-gui.cc)
 void
-main_window::connect_visibility_changed ()
+main_window::connect_visibility_changed (void)
 {
   command_window->connect_visibility_changed ();
   history_window->connect_visibility_changed ();
   file_browser_window->connect_visibility_changed ();
   doc_browser_window->connect_visibility_changed ();
 
-  connect (_workspace_view,       SIGNAL (visibilityChanged (bool)),
-           this,                  SLOT (handle_workspace_visible (bool)));
+  connect (_workspace_view, SIGNAL (visibilityChanged (bool)),
+           this, SLOT (handle_workspace_visible (bool)));
 
 #ifdef HAVE_QSCINTILLA
-  connect (_file_editor,          SIGNAL (visibilityChanged (bool)),
-           this,                  SLOT (handle_editor_visible (bool)));
+  connect (_file_editor, SIGNAL (visibilityChanged (bool)),
+           this, SLOT (handle_editor_visible (bool)));
 #endif
 
 }
 
 
 // Main subroutine of the constructor
 void
-main_window::construct ()
+main_window::construct (void)
 {
   _closing = false;   // flag for editor files when closed
-  setWindowIcon (QIcon(":/actions/icons/logo.png"));
+  setWindowIcon (QIcon (":/actions/icons/logo.png"));
 
   // Setup dockable widgets and the status bar.
   _workspace_view           = new workspace_view (this);
 
   _workspace_view->setModel (_workspace_model);
   _workspace_view->setStatusTip (tr ("View the variables in the active workspace."));
 
   connect (_workspace_model, SIGNAL (model_changed ()),
@@ -731,17 +736,17 @@ main_window::construct_menu_bar (void)
 void
 main_window::construct_file_menu (QMenuBar *p)
 {
   QMenu *file_menu = p->addMenu (tr ("&File"));
 
   construct_new_menu (file_menu);
 
   _open_action
-    = file_menu->addAction (QIcon(":/actions/icons/fileopen.png"),
+    = file_menu->addAction (QIcon (":/actions/icons/fileopen.png"),
                             tr ("Open..."));
   _open_action->setShortcut (QKeySequence::Open);
   _open_action->setShortcutContext (Qt::ApplicationShortcut);
 
 #ifdef HAVE_QSCINTILLA
   file_menu->addMenu (_file_editor->get_mru_menu ());
 #endif
 
@@ -757,17 +762,17 @@ main_window::construct_file_menu (QMenuB
   import_data_action->setEnabled (false); // TODO: Make this work.
 
   QAction *save_workspace_action
     = file_menu->addAction (tr ("Save Workspace As"));
 
   file_menu->addSeparator ();
 
   QAction *preferences_action
-    = file_menu->addAction (QIcon(":/actions/icons/configure.png"),
+    = file_menu->addAction (QIcon (":/actions/icons/configure.png"),
                             tr ("Preferences..."));
 
   file_menu->addSeparator ();
 
   QAction *page_setup_action
     = file_menu->addAction (tr ("Page Setup..."));
   page_setup_action->setEnabled (false); // TODO: Make this work.
 
@@ -799,17 +804,17 @@ main_window::construct_file_menu (QMenuB
 }
 
 void
 main_window::construct_new_menu (QMenu *p)
 {
   QMenu *new_menu = p->addMenu (tr ("New"));
 
   _new_script_action
-    = new_menu->addAction (QIcon(":/actions/icons/filenew.png"), tr ("Script"));
+    = new_menu->addAction (QIcon (":/actions/icons/filenew.png"), tr ("Script"));
   _new_script_action->setShortcut (QKeySequence::New);
   _new_script_action->setShortcutContext (Qt::ApplicationShortcut);
 
   QAction *new_function_action = new_menu->addAction (tr ("Function"));
   new_function_action->setEnabled (false); // TODO: Make this work.
 
   QAction *new_class_action = new_menu->addAction (tr ("Class"));
   new_class_action->setEnabled (false); // TODO: Make this work.
@@ -836,35 +841,35 @@ main_window::construct_new_menu (QMenu *
 void
 main_window::construct_edit_menu (QMenuBar *p)
 {
   QMenu *edit_menu = p->addMenu (tr ("&Edit"));
 
   QKeySequence ctrl_shift = Qt::ControlModifier + Qt::ShiftModifier;
 
   _undo_action
-    = edit_menu->addAction (QIcon(":/actions/icons/undo.png"), tr ("Undo"));
+    = edit_menu->addAction (QIcon (":/actions/icons/undo.png"), tr ("Undo"));
   _undo_action->setShortcut (QKeySequence::Undo);
 
   _redo_action
-    = edit_menu->addAction (QIcon(":/actions/icons/redo.png"), tr ("Redo"));
+    = edit_menu->addAction (QIcon (":/actions/icons/redo.png"), tr ("Redo"));
   _redo_action->setShortcut (QKeySequence::Redo);
 
   edit_menu->addSeparator ();
 
   _cut_action
-    = edit_menu->addAction (QIcon(":/actions/icons/editcut.png"), tr ("Cut"));
+    = edit_menu->addAction (QIcon (":/actions/icons/editcut.png"), tr ("Cut"));
   _cut_action->setShortcut (ctrl_shift + Qt::Key_X);
 
   _copy_action
-    = edit_menu->addAction (QIcon(":/actions/icons/editcopy.png"), tr ("Copy"));
+    = edit_menu->addAction (QIcon (":/actions/icons/editcopy.png"), tr ("Copy"));
   _copy_action->setShortcut (ctrl_shift + Qt::Key_C);
 
   _paste_action
-    = edit_menu->addAction (QIcon(":/actions/icons/editpaste.png"), tr ("Paste"));
+    = edit_menu->addAction (QIcon (":/actions/icons/editpaste.png"), tr ("Paste"));
   _paste_action->setShortcut (ctrl_shift + Qt::Key_V);
 
   QAction *paste_to_workspace_action
     = edit_menu->addAction (tr ("Paste To Workspace..."));
   paste_to_workspace_action->setEnabled (false); // TODO: Make this work.
 
   edit_menu->addSeparator ();
 
@@ -1191,20 +1196,20 @@ main_window::construct_tool_bar (void)
   _current_directory_combo_box->setEditable (true);
   // setLineEdit takes ownership -> no need to delete line_edit in ~main_window
   _current_directory_combo_box->setLineEdit (_current_directory_line_edit);
   _current_directory_combo_box->setInsertPolicy (QComboBox::InsertAtTop);
   _current_directory_combo_box->setMaxVisibleItems (current_directory_max_visible);
   _current_directory_combo_box->setMaxCount (current_directory_max_count);
 
   QToolButton *current_directory_tool_button = new QToolButton (this);
-  current_directory_tool_button->setIcon (QIcon(":/actions/icons/search.png"));
+  current_directory_tool_button->setIcon (QIcon (":/actions/icons/search.png"));
 
   QToolButton *current_directory_up_tool_button = new QToolButton (this);
-  current_directory_up_tool_button->setIcon (QIcon(":/actions/icons/up.png"));
+  current_directory_up_tool_button->setIcon (QIcon (":/actions/icons/up.png"));
 
   // addWidget takes ownership of the objects so there is no
   // need to delete these upon destroying this main_window.
   main_tool_bar->addWidget (new QLabel (tr ("Current Directory:")));
   main_tool_bar->addWidget (_current_directory_combo_box);
   main_tool_bar->addWidget (current_directory_tool_button);
   main_tool_bar->addWidget (current_directory_up_tool_button);
 
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -62,75 +62,75 @@ along with Octave; see the file COPYING.
 class main_window : public QMainWindow
 {
   Q_OBJECT
 
 public:
 
   main_window (QWidget *parent = 0);
 
-  ~main_window ();
+  ~main_window (void);
 
   void focus_command_window (void);
 
 signals:
   void settings_changed (const QSettings *);
   void relay_command_signal (const QString&);
 
 public slots:
   void report_status_message (const QString& statusMessage);
-  void handle_save_workspace_request ();
-  void handle_load_workspace_request ();
-  void handle_clear_workspace_request ();
+  void handle_save_workspace_request (void);
+  void handle_load_workspace_request (void);
+  void handle_clear_workspace_request (void);
   void handle_clear_history_request (void);
   void new_file (const QString& commands = QString ());
-  void open_file ();
+  void open_file (void);
   void open_file (const QString& file_name);
-  void open_online_documentation_page ();
-  void open_bug_tracker_page ();
-  void open_octave_forge_page ();
-  void open_agora_page ();
-  void process_settings_dialog_request ();
-  void show_about_octave ();
+  void open_online_documentation_page (void);
+  void open_bug_tracker_page (void);
+  void open_octave_forge_page (void);
+  void open_agora_page (void);
+  void process_settings_dialog_request (void);
+  void show_about_octave (void);
   void notice_settings (const QSettings *settings);
-  void prepare_for_quit ();
-  void reset_windows ();
+  void prepare_for_quit (void);
+  void reset_windows (void);
   void update_workspace (void);
 
   void change_directory (const QString& dir);
   void browse_for_directory (void);
   void set_current_working_directory (const QString& dir);
   void change_directory_up (void);
   void accept_directory_line_edit (void);
 
   void handle_command_double_clicked (const QString& command);
 
-  void focus_workspace ();
-  void focus_editor ();
+  void focus_workspace (void);
+  void focus_editor (void);
   void handle_workspace_visible (bool);
   void handle_editor_visible (bool);
 
   void handle_enter_debugger (void);
   void handle_exit_debugger (void);
-  void debug_continue ();
-  void debug_step_into ();
-  void debug_step_over ();
-  void debug_step_out ();
-  void debug_quit ();
+  void debug_continue (void);
+  void debug_step_into (void);
+  void debug_step_over (void);
+  void debug_step_out (void);
+  void debug_quit (void);
 
-  void read_settings ();
-  void write_settings ();
-  void connect_visibility_changed ();
+  void read_settings (void);
+  void write_settings (void);
+  void connect_visibility_changed (void);
 
 protected:
   void closeEvent (QCloseEvent * closeEvent);
 
 private:
 
-  void construct ();
+  void construct (void);
 
   void construct_octave_qt_link (void);
 
   void construct_menu_bar (void);
   void construct_file_menu (QMenuBar *p);
   void construct_new_menu (QMenu *p);
   void construct_edit_menu (QMenuBar *p);
   void construct_debug_menu_item (QMenu *p, const QString& item,
@@ -144,17 +144,17 @@ private:
                                        bool checkable,
                                        const QKeySequence& key);
   void construct_window_menu (QMenuBar *p);
   void construct_help_menu (QMenuBar *p);
   void construct_documentation_menu (QMenu *p);
 
   void construct_tool_bar (void);
 
-  void establish_octave_link ();
+  void establish_octave_link (void);
 
   void save_workspace_callback (const std::string& file);
 
   void load_workspace_callback (const std::string& file);
 
   void clear_workspace_callback (void);
 
   void clear_history_callback (void);
@@ -181,17 +181,17 @@ private:
 
   // Subwindows.
   terminal_dock_widget *command_window;
   history_dock_widget *history_window;
   files_dock_widget *file_browser_window;
   documentation_dock_widget *doc_browser_window;
 
 #ifdef HAVE_QSCINTILLA
-  file_editor_interface *   _file_editor;
+  file_editor_interface *_file_editor;
 #endif
 
   QMenu *_debug_menu;
 
   QAction *_debug_continue;
   QAction *_debug_step_into;
   QAction *_debug_step_over;
   QAction *_debug_step_out;
@@ -202,26 +202,26 @@ private:
 
   QAction *_cut_action;
   QAction *_copy_action;
   QAction *_paste_action;
   QAction *_undo_action;
   QAction *_redo_action;
 
   // Dock widgets.
-  workspace_view *          _workspace_view;
+  workspace_view *_workspace_view;
 
   // Toolbars.
-  QComboBox *               _current_directory_combo_box;
-  static const int        current_directory_width       = 300;
-  static const int        current_directory_max_visible = 16;
-  static const int        current_directory_max_count   = 16;
-  QLineEdit *               _current_directory_line_edit;
+  QComboBox *_current_directory_combo_box;
+  static const int current_directory_width = 300;
+  static const int current_directory_max_visible = 16;
+  static const int current_directory_max_count = 16;
+  QLineEdit *_current_directory_line_edit;
 
   octave_qt_event_listener *_octave_qt_event_listener;
 
   octave_qt_link *_octave_qt_link;
 
-  // Flag for closing whole application
-  bool                      _closing;
+  // Flag for closing whole application.
+  bool _closing;
 };
 
 #endif // MAINWINDOW_H
