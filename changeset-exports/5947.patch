# HG changeset patch
# User jwe
# Date 1156176920 0
#      Mon Aug 21 16:15:20 2006 +0000
# Node ID 009fa69b6182dac6f91d0ac280af9967f64dc8ae
# Parent  4b433225128d9aa6a8f31d3ab5660be5d12bac02
[project @ 2006-08-21 16:15:20 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,19 @@
+2006-08-21  Søren Hauberg  <soren@hauberg.org>
+
+	* pkg/pkg.m: Handle multiple packages in a single file.
+	Insert directory separator between OCTAVE_HOME and rest of package
+	installation directory.
+
+2006-08-21  John W. Eaton  <jwe@octave.org>
+
+	* general/num2str.m: Early return if arg is empty.
+	From Thomas Treichl <Thomas.Treichl@gmx.net>.
+
 2006-08-21  David Bateman  <dbateman@free.fr>
 
 	* strings/mat2str.m: Compute NC before using.
 
 2006-08-17  John W. Eaton  <jwe@octave.org>
 
 	* audio/wavread.m: Fix calculation of sample count.
 
diff --git a/scripts/general/num2str.m b/scripts/general/num2str.m
--- a/scripts/general/num2str.m
+++ b/scripts/general/num2str.m
@@ -27,25 +27,24 @@
 ## @seealso{sprintf, int2str}
 ## @end deftypefn
 
 ## Author: jwe
 
 function retval = num2str (x, arg)
 
   if (nargin != 1 && nargin != 2)
-    usage ("num2str (x) or num2str (x, precision) or num2str (x, fmt)");
+    print_usage ();
   endif
 
   if (ischar (x))
     retval = x;
-    return;
-  endif
-
-  if (iscomplex (x))
+  elseif (isempty (x))
+    retval = "";
+  elseif (iscomplex (x))
     if (nargin == 2)
       if (ischar (arg))
 	fmt = strcat (arg, "%-+", arg(2:end), "i");
       else
 	if (isnumeric (x) && round (x) == x && abs (x) < (10 .^ arg))
 	  fmt = sprintf ("%%%dd%%-+%ddi  ", arg, arg);
 	else
 	  fmt = sprintf ("%%%d.%dg%%-+%d.%dgi", arg+7, arg, arg+7, arg);
diff --git a/scripts/pkg/pkg.m b/scripts/pkg/pkg.m
--- a/scripts/pkg/pkg.m
+++ b/scripts/pkg/pkg.m
@@ -22,16 +22,19 @@
 ## @deftypefnx{Command} pkg install -nodeps @var{pkg-name} ...
 ## @deftypefnx{Command} pkg uninstall @var{pkg-name} ...
 ## @deftypefnx{Command} pkg uninstall -nodeps @var{pkg-name} ...
 ## @deftypefnx{Command} pkg load all
 ## @deftypefnx{Command} pkg load @var{pkg-name} ...
 ## @deftypefnx{Command} pkg load -nodeps @var{pkg-name} ...
 ## XXX: Where's the docs?
 ## @end deftypefn
+
+## PKG_ADD: mark_as_command pkg
+
 function [local_packages, global_packages] = pkg(varargin)
     ## Handle input
     if (length(varargin) == 0 || !iscellstr(varargin))
         print_usage();
     endif
     files = {};
     deps = true;
     action = "none";
@@ -84,17 +87,21 @@ function install(files, handle_deps)
     local_list = tilde_expand("~/.octave_packages");
     global_list = [OCTAVE_HOME "share/octave/octave_packages"];
     global OCTAVE_PACKAGE_PREFIX;
     prefix_exist = (length(OCTAVE_PACKAGE_PREFIX) != 0 && ischar(OCTAVE_PACKAGE_PREFIX));
 
     if (issuperuser())
         global_install = true;
         if (!prefix_exist)
-            OCTAVE_PACKAGE_PREFIX = [OCTAVE_HOME "share/octave/packages/"];
+	    if (strcmp(OCTAVE_HOME()(end),"/"))
+                OCTAVE_PACKAGE_PREFIX = [OCTAVE_HOME "share/octave/packages/"];
+	    else
+		OCTAVE_PACKAGE_PREFIX = [OCTAVE_HOME "/share/octave/packages/"];
+           endif
         endif
     else
         global_install = false;
         if (!prefix_exist)
             OCTAVE_PACKAGE_PREFIX = "~/octave/";
         endif
     endif
     prefix = tilde_expand(OCTAVE_PACKAGE_PREFIX);
@@ -118,65 +125,65 @@ function install(files, handle_deps)
     
     if (global_install)
         packages = global_packages;
     else
         packages = local_packages;
     endif
    
     ## Uncompress the packages and read the DESCRIPTION files
-    tmpdirs = cell(1, length(files));
-    packdirs = cell(1, length(files));
-    descriptions = cell(1, length(files));
+    tmpdirs = packdirs = descriptions = {};
     try
         ## Unpack the package files and read the DESCRIPTION files
         packages_to_uninstall = [];
         for i = 1:length(files)
             tgz = files{i};
             
             ## Create a temporary directory 
             tmpdir = tmpnam();
-            tmpdirs{i} = tmpdir;
+            tmpdirs{end+1} = tmpdir;
             [status, msg] = mkdir(tmpdir);
             if (status != 1)
                 error("Couldn't create temporary directory: %s\n", msg);
             endif
 
             ## Uncompress the package
             untar(tgz, tmpdir);
 
-            ## Get the name of the directory produced by tar
+            ## Get the name of the directories produced by tar
             [dirlist, err, msg] = readdir(tmpdir);
             if (err)
                 error("Couldn't read directory produced by tar: %s\n", msg);
             endif
-            packdir = [tmpdir "/" dirlist{end} "/"];
-            packdirs{i} = packdir;
+            
+            for k = 3:length(dirlist) # the two first entries of dirlist are "." and ".."
+                packdir = [tmpdir "/" dirlist{k} "/"];
+                packdirs{end+1} = packdir;
 
-            ## Make sure the package contains necessary files
-            verify_directory(packdir);
+                ## Make sure the package contains necessary files
+                verify_directory(packdir);
 
-            ## Read the DESCRIPTION file
-            filename = [packdir "DESCRIPTION"];
-            desc = get_description(filename);
+                ## Read the DESCRIPTION file
+                filename = [packdir "DESCRIPTION"];
+                desc = get_description(filename);
 
-            ## Set default installation directory
-            desc.dir = [prefix "/" desc.name "-" desc.version];
+                ## Set default installation directory
+                desc.dir = [prefix "/" desc.name "-" desc.version];
             
-            ## Save desc
-            descriptions{i} = desc;
+                ## Save desc
+                descriptions{end+1} = desc;
 
-            ## Are any of the new packages already installed?
-            ## If so we'll remove the old version.
-            for j = 1:length(packages)
-                if (strcmp(packages{j}.name, desc.name))
-                    packages_to_uninstall(end+1) = j;
-                endif
-            endfor
-            
+                ## Are any of the new packages already installed?
+                ## If so we'll remove the old version.
+                for j = 1:length(packages)
+                    if (strcmp(packages{j}.name, desc.name))
+                        packages_to_uninstall(end+1) = j;
+                    endif
+                endfor
+            endfor        
         endfor
     catch
         ## Something went wrong, delete tmpdirs
         for i = 1:length(tmpdirs)
             tmpdirs{i}
             rm_rf(tmpdirs{i});
         endfor
         error(lasterr()(8:end));
