# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1424280426 0
#      Wed Feb 18 17:27:06 2015 +0000
# Node ID 511b3ae4872b1ee1436dacf799ededc7daa46c1a
# Parent  4ae2987c5f6624b8d807e70984b0decad091afd8
nextpow2: compute for each element of input instead of its length (bug #44291)

* general/nextpow2.m: when input is not a scalar, nextpow2() was using
length(x).  Not only is this Matlab incompatible, it is also not very
useful in the light of nd signals where input will be the length of each
dimension.  It would also break very bad when the user wants to pass a
vector that has length 1 in which case it would use the first element of
the vector. This commit changes it so that it computes nextpow2 for each
element of the input.  When the previous behaviour is intended,
`nextpow2 (length (x))' should be used.
* NEWS: make note of this backwards incompatible change.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -39,16 +39,21 @@ Summary of important user-visible change
 
  ** For compatibility with Matlab, the "backtrace" warning option is now
     enabled by default.
 
  ** For compatibility with Matlab, the "ismatrix(x)" function now only checks
     the dimension of "x". The old behaviour of "ismatrix" is obtained by
     "isnumeric (x) || islogical (x) || ischar (x)".
 
+ ** The nextpow2 function behaviour has been changed for vector inputs.
+    Instead of computing `nextpow2 (length (x))', it will now compute
+    nextpow2() for each element of the input.  Not only is this change
+    Matlab compatible, it also prevents bugs for "vectors" of length 1.
+
  ** The preference
 
       do_braindead_shortcircuit_evaluation
 
     is now enabled by default.
 
  ** The preference
 
diff --git a/scripts/general/nextpow2.m b/scripts/general/nextpow2.m
--- a/scripts/general/nextpow2.m
+++ b/scripts/general/nextpow2.m
@@ -13,58 +13,53 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} nextpow2 (@var{x})
-## If @var{x} is a scalar, return the first integer @var{n} such that
+## Compute exponent for smallest power of two larger than input.
+##
+## For each element in the input array @var{x}, returns the first integer
+## @var{n} such that
 ## @tex
 ## $2^n \ge |x|$.
 ## @end tex
 ## @ifnottex
 ## 2^n @geq{} abs (x).
 ## @end ifnottex
 ##
-## If @var{x} is a vector, return @code{nextpow2 (length (@var{x}))}.
 ## @seealso{pow2, log2}
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Created: 7 October 1994
 ## Adapted-By: jwe
 
 function n = nextpow2 (x)
 
   if (nargin != 1)
     print_usage ();
   endif
 
-  if (! (isscalar (x) || isvector (x)))
-    error ("nextpow2: X must be a scalar or a vector");
-  endif
-
-  t = length (x);
-  if (t > 1)
-    x = t;
+  if (! isnumeric (x))
+    error ("nextpow2: X must be numeric");
   endif
 
   [f, n] = log2 (abs (x));
-  if (f == 0.5)
-    n = n - 1;
-  endif
+  n(f == 0.5)--;
 
 endfunction
 
 
 %!assert (nextpow2 (16), 4)
 %!assert (nextpow2 (17), 5)
 %!assert (nextpow2 (31), 5)
 %!assert (nextpow2 (-16), 4)
 %!assert (nextpow2 (-17), 5)
 %!assert (nextpow2 (-31), 5)
-%!assert (nextpow2 (1:17), 5)
+%!assert (nextpow2 (1:17), [0 1 2 2 3 3 3 3 4 4 4 4 4 4 4 4 5])
 
 %!error nexpow2 ()
 %!error nexpow2 (1, 2)
 
