# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1363203905 14400
#      Wed Mar 13 15:45:05 2013 -0400
# Node ID 23c5f90f92cd44b5aaf944be2d8c5f78b2ea6e15
# Parent  c40a8873c2e75e65ff906c3cdf3e14c36c687a67
eliminate some variable might be clobbered by 'longjmp' or 'vfork' warnings

* Matrix.cc (Matrix::rcond): Declare typ volatile.
* CMatrix.cc (ComplexMatrix::rcond): Likewise.
* fMatrix.cc (FloatMatrix::rcond): Likewise.
* fCMatrix.cc (FloatComplexMatrix::rcond): Likewise.

diff --git a/liboctave/array/CMatrix.cc b/liboctave/array/CMatrix.cc
--- a/liboctave/array/CMatrix.cc
+++ b/liboctave/array/CMatrix.cc
@@ -1716,17 +1716,17 @@ ComplexMatrix::rcond (MatrixType &mattyp
   octave_idx_type nc = cols ();
 
   if (nr != nc)
     (*current_liboctave_error_handler) ("matrix must be square");
   else if (nr == 0 || nc == 0)
     rcon = octave_Inf;
   else
     {
-      int typ = mattype.type ();
+      volatile int typ = mattype.type ();
 
       if (typ == MatrixType::Unknown)
         typ = mattype.type (*this);
 
       // Only calculate the condition number for LU/Cholesky
       if (typ == MatrixType::Upper)
         {
           const Complex *tmp_data = fortran_vec ();
diff --git a/liboctave/array/dMatrix.cc b/liboctave/array/dMatrix.cc
--- a/liboctave/array/dMatrix.cc
+++ b/liboctave/array/dMatrix.cc
@@ -1384,17 +1384,17 @@ Matrix::rcond (MatrixType &mattype) cons
   octave_idx_type nc = cols ();
 
   if (nr != nc)
     (*current_liboctave_error_handler) ("matrix must be square");
   else if (nr == 0 || nc == 0)
     rcon = octave_Inf;
   else
     {
-      int typ = mattype.type ();
+      volatile int typ = mattype.type ();
 
       if (typ == MatrixType::Unknown)
         typ = mattype.type (*this);
 
       // Only calculate the condition number for LU/Cholesky
       if (typ == MatrixType::Upper)
         {
           const double *tmp_data = fortran_vec ();
diff --git a/liboctave/array/fCMatrix.cc b/liboctave/array/fCMatrix.cc
--- a/liboctave/array/fCMatrix.cc
+++ b/liboctave/array/fCMatrix.cc
@@ -1712,17 +1712,17 @@ FloatComplexMatrix::rcond (MatrixType &m
   octave_idx_type nc = cols ();
 
   if (nr != nc)
     (*current_liboctave_error_handler) ("matrix must be square");
   else if (nr == 0 || nc == 0)
     rcon = octave_Inf;
   else
     {
-      int typ = mattype.type ();
+      volatile int typ = mattype.type ();
 
       if (typ == MatrixType::Unknown)
         typ = mattype.type (*this);
 
       // Only calculate the condition number for LU/Cholesky
       if (typ == MatrixType::Upper)
         {
           const FloatComplex *tmp_data = fortran_vec ();
diff --git a/liboctave/array/fMatrix.cc b/liboctave/array/fMatrix.cc
--- a/liboctave/array/fMatrix.cc
+++ b/liboctave/array/fMatrix.cc
@@ -1384,17 +1384,17 @@ FloatMatrix::rcond (MatrixType &mattype)
   octave_idx_type nc = cols ();
 
   if (nr != nc)
     (*current_liboctave_error_handler) ("matrix must be square");
   else if (nr == 0 || nc == 0)
     rcon = octave_Inf;
   else
     {
-      int typ = mattype.type ();
+      volatile int typ = mattype.type ();
 
       if (typ == MatrixType::Unknown)
         typ = mattype.type (*this);
 
       // Only calculate the condition number for LU/Cholesky
       if (typ == MatrixType::Upper)
         {
           const float *tmp_data = fortran_vec ();
