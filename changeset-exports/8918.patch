# HG changeset patch
# User Jason Riedy <jason@acm.org>
# Date 1236353250 18000
#      Fri Mar 06 10:27:30 2009 -0500
# Node ID f5408862892fd842103d9dd5dd5086036a4532db
# Parent  d707aa3bbc36ebbbb85ec7d5ee867d18971f4fb4
Consistently use element_type in the array classes.

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,19 @@
+2009-03-05  Jason Riedy  <jason@acm.org>
+
+	* Sparse.h (Sparse<T>::elt_type): Remove typedef, replace with:
+	* Sparse.h (Sparse<T>::element_type): Add typedef to be consistent
+	with Array.h
+	* DiagArray2.h (DiagArray2<T>::elt_type): Likewise, removed.
+	* DiagArray2.h (DiagArray2<T>::element_type): Define by using
+	Array<T>::element_type.
+	* intNDArray.h (intNDArray<T>::element_type): Remove, inherited
+	from MArrayN<T>.
+
 2009-03-05  Jaroslav Hajek  <highegg@gmail.com>
 
 	* dSparse.h (SparseMatrix::SparseMatrix(const PermMatrix&)): New
 	constructor.
 	(SparseMatrix::SparseMatrix(const DiagMatrix&)): Fix implementation.
 	* CSparse.h (SparseComplexMatrix::SparseComplexMatrix(const ComplexDiagMatrix&)): 
 	Fix implementation.
 
diff --git a/liboctave/DiagArray2.h b/liboctave/DiagArray2.h
--- a/liboctave/DiagArray2.h
+++ b/liboctave/DiagArray2.h
@@ -89,17 +89,17 @@ private:
 protected:
   octave_idx_type d1, d2;
 
   DiagArray2 (T *d, octave_idx_type r, octave_idx_type c) 
     : Array<T> (d, std::min (r, c)), d1 (r), d2 (c) { }
 
 public:
 
-  typedef T element_type;
+  using Array<T>::element_type;
 
   DiagArray2 (void) 
     : Array<T> (), d1 (0), d2 (0) { }
 
   DiagArray2 (octave_idx_type r, octave_idx_type c) 
     : Array<T> (std::min (r, c)), d1 (r), d2 (c) { }
 
   DiagArray2 (octave_idx_type r, octave_idx_type c, const T& val) 
diff --git a/liboctave/Sparse.h b/liboctave/Sparse.h
--- a/liboctave/Sparse.h
+++ b/liboctave/Sparse.h
@@ -43,17 +43,17 @@ class idx_vector;
 // all the derived classes.
 
 template <class T>
 class
 Sparse
 {
 public:
 
-  typedef T elt_type;
+  typedef T element_type;
 
 protected:
   //--------------------------------------------------------------------
   // The real representation of all Sparse arrays.
   //--------------------------------------------------------------------
 
   class OCTAVE_API SparseRep
   {
diff --git a/liboctave/intNDArray.h b/liboctave/intNDArray.h
--- a/liboctave/intNDArray.h
+++ b/liboctave/intNDArray.h
@@ -27,17 +27,17 @@ along with Octave; see the file COPYING.
 #include "boolNDArray.h"
 
 template <class T>
 class
 intNDArray : public MArrayN<T>
 {
 public:
 
-  typedef T elt_type;
+  using MArrayN<T>::element_type;
   
   intNDArray (void) : MArrayN<T> () { }
 
   intNDArray (T val) : MArrayN<T> (dim_vector (1, 1), val) { }
 
   intNDArray (const dim_vector& dv) : MArrayN<T> (dv) { }
   
   intNDArray (const dim_vector& dv, T val)
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -64,16 +64,21 @@ 2009-03-05  John W. Eaton  <jwe@octave.o
 	* pt-stmt.cc, pt-stmt.h (tree_statement::dup,
 	tree_statement_list::dup): Ditto.
 	* pt-unop.cc, pt-unop.h (tree_prefix_expression::dup,
 	tree_postfix_expression::dup): Ditto.
 	* pt-fcn-handle.h (tree_anon_fcn_handle::parameter_list,
 	tree_anon_fcn_handle::return_list, tree_anon_fcn_handle::body,
 	tree_anon_fcn_handle::scope): Ditto.
 
+2009-03-05  Jason Riedy  <jason@acm.org>
+
+	* ov-base-int.cc (convert_to_str_internal): Replace elt_type with
+	element_type throughout.
+
 2009-03-05  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/sparse.cc (Fsparse): Handle diagonal and permutation
 	matrices.
 
 2009-03-03  John W. Eaton  <jwe@octave.org>
 
 	* ov-struct.cc (octave_struct::save_ascii,
diff --git a/src/ov-base-int.cc b/src/ov-base-int.cc
--- a/src/ov-base-int.cc
+++ b/src/ov-base-int.cc
@@ -140,19 +140,19 @@ octave_base_int_matrix<T>::convert_to_st
   charNDArray chm (dv);
 
   bool warned = false;
 
   for (octave_idx_type i = 0; i < nel; i++)
     {
       OCTAVE_QUIT;
 
-      typename T::elt_type tmp = this->matrix(i);
+      typename T::element_type tmp = this->matrix(i);
 
-      typedef typename T::elt_type::val_type val_type;
+      typedef typename T::element_type::val_type val_type;
 
       val_type ival = tmp.value ();
 
       static const bool is_signed = std::numeric_limits<val_type>::is_signed;
       static const bool can_be_larger_than_uchar_max
 	= octave_base_int_helper_traits<val_type>::can_be_larger_than_uchar_max;
 
       if (octave_base_int_helper<val_type, is_signed,
