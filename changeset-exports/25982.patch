# HG changeset patch
# User Rik <rik@octave.org>
# Date 1540925213 25200
#      Tue Oct 30 11:46:53 2018 -0700
# Node ID d7e2fd922288b43b52ba477819fbfdb92508a18c
# Parent  63b3d5e4e5c326782e7f767b575750ca8da03098
Overhaul processing of size constraints for graphic properties (bug #54918).

* graphics.cc (array_property::validate): If size onstraint specifies a
zero anywhere then verify that input dimension vector is empty.

* graphics.in.h (patch::init): Add empty array possibility
(add_constraint (dim_vector (0,0))) to "facevertexcdata" and
"facevertexalphadata" properties.
* graphics.in.h (uipushtool::init): Add empty array possibility to "cdata"
property.  Allow uint8 as input type to "cdata" property.
* graphics.in.h (uitoggletool::init): Add empty array possibility to "cdata"
property.  Allow uint8 as input type to "cdata" property.

diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -1468,18 +1468,22 @@ array_property::validate (const octave_v
 
               for (int i = 0; xok && i < vlen; i++)
                 {
                   if (itdims(i) > 0)
                     {
                       if (itdims(i) != vdims(i))
                         xok = false;
                     }
-                  else if (v.isempty ())
-                    break;
+                  else if (itdims(i) == 0)
+                    {
+                      if (! v.isempty ())
+                        xok = false;
+                      break;
+                    }
                 }
             }
         }
     }
 
   if (xok)
     {
       NDArray v_mat = v.array_value ();
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -4549,19 +4549,19 @@ public:
       cdata.add_constraint ("single");
       cdata.add_constraint ("logical");
       cdata.add_constraint ("uint8");
       cdata.add_constraint ("uint16");
       cdata.add_constraint ("int16");
       cdata.add_constraint ("real");
       cdata.add_constraint (dim_vector (-1, -1));
       cdata.add_constraint (dim_vector (-1, -1, 3));
-      alphadata.add_constraint (dim_vector (-1, -1));
       alphadata.add_constraint ("double");
       alphadata.add_constraint ("uint8");
+      alphadata.add_constraint (dim_vector (-1, -1));
     }
 
   private:
     void update_alphadata (void)
     {
       if (alphadatamapping_is ("scaled"))
         set_alim (alphadata.get_limits ());
       else
@@ -4848,17 +4848,19 @@ public:
       zdata.add_constraint (dim_vector (-1, -1));
       faces.add_constraint (dim_vector (-1, -1));
       vertices.add_constraint (dim_vector (-1, 2));
       vertices.add_constraint (dim_vector (-1, 3));
       cdata.add_constraint (dim_vector (-1, -1));
       cdata.add_constraint (dim_vector (-1, -1, 3));
       facevertexcdata.add_constraint (dim_vector (-1, 1));
       facevertexcdata.add_constraint (dim_vector (-1, 3));
+      facevertexcdata.add_constraint (dim_vector (0, 0));
       facevertexalphadata.add_constraint (dim_vector (-1, 1));
+      facevertexalphadata.add_constraint (dim_vector (0, 0));
       facenormals.add_constraint (dim_vector (-1, 3));
       facenormals.add_constraint (dim_vector (0, 0));
       vertexnormals.add_constraint (dim_vector (-1, 3));
       vertexnormals.add_constraint (dim_vector (0, 0));
 
       ambientstrength.add_constraint ("min", 0.0, true);
       ambientstrength.add_constraint ("max", 1.0, true);
       diffusestrength.add_constraint ("min", 0.0, true);
@@ -5835,17 +5837,19 @@ public:
       any_property __object__ h , Matrix ()
     END_PROPERTIES
 
   protected:
     void init (void)
     {
       cdata.add_constraint ("double");
       cdata.add_constraint ("single");
+      cdata.add_constraint ("uint8");
       cdata.add_constraint (dim_vector (-1, -1, 3));
+      cdata.add_constraint (dim_vector (0, 0));
     }
   };
 
 private:
   properties xproperties;
 
 public:
   uipushtool (const graphics_handle& mh, const graphics_handle& p)
@@ -5896,17 +5900,19 @@ public:
       any_property __object__ h , Matrix ()
     END_PROPERTIES
 
   protected:
     void init (void)
     {
       cdata.add_constraint ("double");
       cdata.add_constraint ("single");
+      cdata.add_constraint ("uint8");
       cdata.add_constraint (dim_vector (-1, -1, 3));
+      cdata.add_constraint (dim_vector (0, 0));
     }
   };
 
 private:
   properties xproperties;
 
 public:
   uitoggletool (const graphics_handle& mh, const graphics_handle& p)
