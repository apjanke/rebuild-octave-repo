# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1365048225 14400
#      Thu Apr 04 00:03:45 2013 -0400
# Node ID 04c4dd7fd3ce869bc9bc0e55c2fe5f3fdb80a584
# Parent  436f6e0e42683eee26662f274babbe5262b8d45f
use signal for octave_link::update_dbstop_marker

* octave-qt-link.h (octave_qt_link): Derive from QObject.
(octave_qt_link::update_dbstop_marker_signal): New signal.
* libgui/src/module.mk (octave_gui_MOC): Include
src/moc-octave-qt-link.cc in the list.

* main-window.cc (main_window::construct): Connect
octave_qt_link::update_dbstop_marker_signal to
file_editor::handle_update_dbstop_marker_request.

* octave-qt-link.cc (octave_qt_link::do_update_breakpoint):
Emit signal instead of using event listener.

diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -1209,16 +1209,21 @@ main_window::construct ()
            SIGNAL (edit_file_signal (const QString&)),
            this,
            SLOT (handle_edit_file_request(const QString&)));
 
   // FIXME -- is it possible to eliminate the event_listenter?
 
   _octave_qt_link = new octave_qt_link ();
 
+  connect (_octave_qt_link,
+           SIGNAL (update_dbstop_marker_signal (bool, const QString&, int)),
+           _file_editor,
+           SLOT (handle_update_dbstop_marker_request (bool, const QString&, int)));
+
   octave_link::connect_link (_octave_qt_link);
 
   octave_link::register_event_listener (_octave_qt_event_listener);
 }
 
 void
 main_window::save_workspace_callback (const std::string& file)
 {
diff --git a/libgui/src/module.mk b/libgui/src/module.mk
--- a/libgui/src/module.mk
+++ b/libgui/src/module.mk
@@ -68,16 +68,17 @@ endif
 
 octave_gui_MOC += \
   src/moc-documentation-dockwidget.cc \
   src/moc-files-dockwidget.cc \
   src/moc-history-dockwidget.cc \
   src/moc-main-window.cc \
   src/moc-octave-main-thread.cc \
   src/moc-octave-qt-event-listener.cc \
+  src/moc-octave-qt-link.cc \
   src/moc-settings-dialog.cc \
   src/moc-terminal-dockwidget.cc \
   src/moc-color-picker.cc \
   src/moc-welcome-wizard.cc \
   src/moc-workspace-model.cc \
   src/moc-workspace-view.cc \
   src/qtinfo/moc-parser.cc \
   src/qtinfo/moc-webinfo.cc \
diff --git a/libgui/src/octave-gui.cc b/libgui/src/octave-gui.cc
--- a/libgui/src/octave-gui.cc
+++ b/libgui/src/octave-gui.cc
@@ -75,17 +75,17 @@ dissociate_terminal (void)
     }
 
 #endif
 }
 
 int
 octave_start_gui (int argc, char *argv[])
 {
-  dissociate_terminal ();
+  // dissociate_terminal ();
 
   QApplication application (argc, argv);
 
   while (true)
     {
       if (resource_manager::is_first_run ())
         {
           welcome_wizard welcomeWizard;
diff --git a/libgui/src/octave-qt-link.cc b/libgui/src/octave-qt-link.cc
--- a/libgui/src/octave-qt-link.cc
+++ b/libgui/src/octave-qt-link.cc
@@ -102,22 +102,17 @@ octave_qt_link::do_exit_debugger_event (
 {
   do_delete_debugger_pointer (file, line);
 }
 
 void
 octave_qt_link::do_update_breakpoint (bool insert,
                                       const std::string& file, int line)
 {
-  if (event_listener)
-    {
-      event_listener->update_dbstop_marker (insert, file, line);
-
-      do_process_events ();
-    }
+  emit update_dbstop_marker_signal (insert, QString::fromStdString (file), line);
 }
 
 bool
 octave_qt_link::do_edit_file (const std::string& file)
 {
   bool retval = false;
 
   if (event_listener)
diff --git a/libgui/src/octave-qt-link.h b/libgui/src/octave-qt-link.h
--- a/libgui/src/octave-qt-link.h
+++ b/libgui/src/octave-qt-link.h
@@ -22,29 +22,34 @@ along with Octave; see the file COPYING.
 
 */
 
 #ifndef OCTAVE_QT_LINK_H
 #define OCTAVE_QT_LINK_H
 
 #include <string>
 
+#include <QObject>
+#include <QString>
+
 #include "octave-link.h"
 #include "octave-main-thread.h"
 
 // \class OctaveLink
 // \brief Provides threadsafe access to octave.
 // \author Jacob Dawid
 //
 // This class is a wrapper around octave and provides thread safety by
 // buffering access operations to octave and executing them in the
 // readline event hook, which lives in the octave thread.
 
-class octave_qt_link : public octave_link
+class octave_qt_link : public QObject, public octave_link
 {
+  Q_OBJECT
+
 public:
 
   octave_qt_link (void);
 
   ~octave_qt_link (void) { }
 
   void do_update_workspace (void);
 
@@ -68,11 +73,15 @@ private:
   // No copying!
 
   octave_qt_link (const octave_qt_link&);
 
   octave_qt_link& operator = (const octave_qt_link&);
 
   // Thread running octave_main.
   octave_main_thread *main_thread;
+
+signals:
+
+  void update_dbstop_marker_signal (bool insert, const QString& file, int line);
 };
 
 #endif
