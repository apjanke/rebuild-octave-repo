# HG changeset patch
# User jwe
# Date 1152908975 0
#      Fri Jul 14 20:29:35 2006 +0000
# Node ID bd3041e30d97fbe0c0c2eb8345b4c502bd7e67b7
# Parent  9a5a0d5ef82ab8b739299a0247137374c951d992
[project @ 2006-07-14 20:29:35 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,18 @@
 2006-07-14  John W. Eaton  <jwe@octave.org>
 
+	* ov-base-mat.cc, ov-base-mat.h, ov-base-sparse.cc,
+	ov-base-sparse.h, ov-base.cc, ov-base.h, ov-bool.cc,
+	ov-bool.h, ov-complex.cc, ov-complex.h, ov-intx.h, ov-list.cc,
+	ov-list.h, ov-range.cc, ov-range.h, ov-scalar.cc, ov-scalar.h,
+	ov-str-mat.cc, ov-str-mat.h, ov.h (do_index_op):
+	Declare	resize_ok arg as bool, not int.
+	Provide default value for resize_ok.
+
 	* c-file-ptr-stream.h (c_file_ptr_stream::c_file_ptr_stream):
 	Qualify init.
 
 2006-07-13  John W. Eaton  <jwe@octave.org>
 
 	* oct-map.h (Octave_map::del): Add missing std:: qualifier to use
 	of find template.
 
diff --git a/src/ov-base-mat.cc b/src/ov-base-mat.cc
--- a/src/ov-base-mat.cc
+++ b/src/ov-base-mat.cc
@@ -123,17 +123,17 @@ octave_base_matrix<MT>::subsasgn (const 
     }
 
   return retval;
 }
 
 template <class MT>
 octave_value
 octave_base_matrix<MT>::do_index_op (const octave_value_list& idx,
-				     int resize_ok)
+				     bool resize_ok)
 {
   octave_value retval;
 
   octave_idx_type n_idx = idx.length ();
 
   int nd = matrix.ndims ();
 
   switch (n_idx)
diff --git a/src/ov-base-mat.h b/src/ov-base-mat.h
--- a/src/ov-base-mat.h
+++ b/src/ov-base-mat.h
@@ -89,20 +89,18 @@ public:
       panic_impossible ();
       return octave_value_list ();
     }
 
   octave_value subsasgn (const std::string& type,
 			 const std::list<octave_value_list>& idx,
 			 const octave_value& rhs);
 
-  octave_value do_index_op (const octave_value_list& idx, int resize_ok);
-
-  octave_value do_index_op (const octave_value_list& idx)
-    { return do_index_op (idx, 0); }
+  octave_value do_index_op (const octave_value_list& idx,
+			    bool resize_ok = false);
 
   void assign (const octave_value_list& idx, const MT& rhs);
 
   dim_vector dims (void) const { return matrix.dims (); }
 
   octave_idx_type nnz (void) const { return matrix.nnz (); }
 
   octave_value reshape (const dim_vector& new_dims) const
diff --git a/src/ov-base-sparse.cc b/src/ov-base-sparse.cc
--- a/src/ov-base-sparse.cc
+++ b/src/ov-base-sparse.cc
@@ -40,17 +40,17 @@ Boston, MA 02110-1301, USA.
 
 #include "boolSparse.h"
 #include "ov-base-sparse.h"
 #include "pager.h"
 
 template <class T>
 octave_value
 octave_base_sparse<T>::do_index_op (const octave_value_list& idx, 
-				    int resize_ok)
+				    bool resize_ok)
 {
   octave_value retval;
 
   octave_idx_type n_idx = idx.length ();
 
   int nd = matrix.ndims ();
 
   switch (n_idx)
diff --git a/src/ov-base-sparse.h b/src/ov-base-sparse.h
--- a/src/ov-base-sparse.h
+++ b/src/ov-base-sparse.h
@@ -96,20 +96,18 @@ octave_base_sparse : public octave_base_
   octave_value subsasgn (const std::string& type,
 			 const std::list<octave_value_list>& idx,
 			 const octave_value& rhs);
 
   void assign (const octave_value_list& idx, const T& rhs);
 
   dim_vector dims (void) const { return matrix.dims (); }
 
-  octave_value do_index_op (const octave_value_list& idx, int resize_ok);
-
-  octave_value do_index_op (const octave_value_list& idx)
-    { return do_index_op (idx, 0); }
+  octave_value do_index_op (const octave_value_list& idx,
+			    bool resize_ok = false);
 
   octave_value reshape (const dim_vector& new_dims) const
     { return T (matrix.reshape (new_dims)); }
 
   octave_value permute (const Array<int>& vec, bool inv = false) const
     { return T (matrix.permute (vec, inv)); }
 
   octave_value resize (const dim_vector& dv, bool = false) const;
diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -87,29 +87,23 @@ octave_base_value::subsref (const std::s
 			    const std::list<octave_value_list>&, int)
 {
   std::string nm = type_name ();
   error ("can't perform indexing operations for %s type", nm.c_str ());
   return octave_value ();
 }
 
 octave_value
-octave_base_value::do_index_op (const octave_value_list&, int)
+octave_base_value::do_index_op (const octave_value_list&, bool)
 {
   std::string nm = type_name ();
   error ("can't perform indexing operations for %s type", nm.c_str ());
   return octave_value ();
 }
 
-octave_value
-octave_base_value::do_index_op (const octave_value_list& idx)
-{
-  return do_index_op (idx, 0);
-}
-
 octave_value_list
 octave_base_value::do_multi_index_op (int, const octave_value_list&)
 {
   std::string nm = type_name ();
   error ("can't perform indexing operations for %s type", nm.c_str ());
   return octave_value ();
 }
 
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -130,20 +130,17 @@ public:
 	   const std::list<octave_value_list>& idx);
 
   virtual octave_value_list
   subsref (const std::string& type,
 	   const std::list<octave_value_list>& idx,
 	   int nargout);
 
   virtual octave_value
-  do_index_op (const octave_value_list& idx, int resize_ok);
-
-  virtual octave_value
-  do_index_op (const octave_value_list& idx);
+  do_index_op (const octave_value_list& idx, bool resize_ok = false);
 
   virtual octave_value_list
   do_multi_index_op (int nargout, const octave_value_list& idx);
 
   virtual octave_value
   subsasgn (const std::string& type,
 	    const std::list<octave_value_list>& idx,
 	    const octave_value& rhs);
diff --git a/src/ov-bool.cc b/src/ov-bool.cc
--- a/src/ov-bool.cc
+++ b/src/ov-bool.cc
@@ -72,17 +72,17 @@ valid_scalar_indices (const octave_value
   for (int i = 0; i < nargin; i++)
     if (! args(i).valid_as_scalar_index ())
       return false;
 
   return true;
 }
 
 octave_value
-octave_bool::do_index_op (const octave_value_list& idx, int resize_ok)
+octave_bool::do_index_op (const octave_value_list& idx, bool resize_ok)
 {
   octave_value retval;
 
   if (valid_scalar_indices (idx))
     retval = scalar;
   else
     {
       // FIXME -- this doesn't solve the problem of
diff --git a/src/ov-bool.h b/src/ov-bool.h
--- a/src/ov-bool.h
+++ b/src/ov-bool.h
@@ -62,17 +62,18 @@ public:
 
   ~octave_bool (void) { }
 
   octave_base_value *clone (void) const { return new octave_bool (*this); }
   octave_base_value *empty_clone (void) const { return new octave_bool (); }
 
   type_conv_fcn numeric_conversion_function (void) const;
 
-  octave_value do_index_op (const octave_value_list& idx, int resize_ok);
+  octave_value do_index_op (const octave_value_list& idx,
+			    bool resize_ok = false);
 
   idx_vector index_vector (void) const { return idx_vector (scalar); }
 
   bool is_real_scalar (void) const { return true; }
 
   bool is_bool_scalar (void) const { return true; }
 
   bool is_bool_type (void) const { return true; }
diff --git a/src/ov-complex.cc b/src/ov-complex.cc
--- a/src/ov-complex.cc
+++ b/src/ov-complex.cc
@@ -60,17 +60,17 @@ octave_complex::try_narrowing_conversion
 
   if (im == 0.0 && ! lo_ieee_signbit (im))
     retval = new octave_scalar (real (scalar));
 
   return retval;
 }
 
 octave_value
-octave_complex::do_index_op (const octave_value_list& idx, int resize_ok)
+octave_complex::do_index_op (const octave_value_list& idx, bool resize_ok)
 {
   octave_value retval;
 
   if (idx.valid_scalar_indices ())
     retval = scalar;
   else
     {
       // FIXME -- this doesn't solve the problem of
diff --git a/src/ov-complex.h b/src/ov-complex.h
--- a/src/ov-complex.h
+++ b/src/ov-complex.h
@@ -70,17 +70,18 @@ public:
   // octave_complex object so that in expressions like A(2,2,2) = 2
   // (for A previously undefined), A will be empty instead of a 1x1
   // object.
   octave_base_value *empty_clone (void) const
     { return new octave_complex_matrix (); }
 
   octave_base_value *try_narrowing_conversion (void);
 
-  octave_value do_index_op (const octave_value_list& idx, int resize_ok);
+  octave_value do_index_op (const octave_value_list& idx,
+			    bool resize_ok = false);
 
   octave_value any (int = 0) const
     {
       return (scalar != Complex (0, 0)
 	      && ! (lo_ieee_isnan (OCTAVE_STD::real (scalar))
 		    || lo_ieee_isnan (OCTAVE_STD::imag (scalar))));
     }
 
diff --git a/src/ov-intx.h b/src/ov-intx.h
--- a/src/ov-intx.h
+++ b/src/ov-intx.h
@@ -169,17 +169,18 @@ public:
   ~OCTAVE_VALUE_INT_SCALAR_T (void) { }
 
   octave_base_value *clone (void) const
     { return new OCTAVE_VALUE_INT_SCALAR_T (*this); }
 
   octave_base_value *empty_clone (void) const
     { return new OCTAVE_VALUE_INT_SCALAR_T (); }
 
-  octave_value do_index_op (const octave_value_list& idx, int resize_ok)
+  octave_value do_index_op (const octave_value_list& idx,
+			    bool resize_ok = false)
     {
       octave_value retval;
 
       if (idx.valid_scalar_indices ())
 	retval = scalar;
       else
 	{
 	  // FIXME -- this doesn't solve the problem of
diff --git a/src/ov-list.cc b/src/ov-list.cc
--- a/src/ov-list.cc
+++ b/src/ov-list.cc
@@ -120,17 +120,17 @@ octave_list::subsref (const std::string&
 
   if (idx.size () > 1)
     retval = retval(0).next_subsref (nargout, type, idx);
 
   return retval;
 }
 
 octave_value
-octave_list::do_index_op (const octave_value_list& idx, int resize_ok)
+octave_list::do_index_op (const octave_value_list& idx, bool resize_ok)
 {
   octave_value retval;
 
   if (idx.length () == 1)
     {
       idx_vector iidx = idx (0).index_vector ();
 
       Cell tcell = data.index (iidx, resize_ok);
diff --git a/src/ov-list.h b/src/ov-list.h
--- a/src/ov-list.h
+++ b/src/ov-list.h
@@ -69,17 +69,18 @@ public:
       panic_impossible ();
       return octave_value_list ();
     }
 
   octave_value_list subsref (const std::string& type,
 			     const std::list<octave_value_list>& idx,
 			     int nargout);
 
-  octave_value do_index_op (const octave_value_list& idx, int resize_ok);
+  octave_value do_index_op (const octave_value_list& idx,
+			    bool resize_ok = false);
 
   octave_value subsasgn (const std::string& type,
 			 const std::list<octave_value_list>& idx,
 			 const octave_value& rhs);
 
   void assign (const octave_value_list& idx, const octave_value& rhs);
 
   dim_vector dims (void) const { return dim_vector (1, data.length ()); }
diff --git a/src/ov-range.cc b/src/ov-range.cc
--- a/src/ov-range.cc
+++ b/src/ov-range.cc
@@ -105,17 +105,17 @@ octave_range::subsref (const std::string
     default:
       panic_impossible ();
     }
 
   return retval.next_subsref (type, idx);
 }
 
 octave_value
-octave_range::do_index_op (const octave_value_list& idx, int resize_ok)
+octave_range::do_index_op (const octave_value_list& idx, bool resize_ok)
 {
   // FIXME -- this doesn't solve the problem of
   //
   //   a = 1:5; a(1, 1, 1)
   //
   // and similar constructions.  Hmm...
 
   // FIXME -- using this constructor avoids possibly narrowing
diff --git a/src/ov-range.h b/src/ov-range.h
--- a/src/ov-range.h
+++ b/src/ov-range.h
@@ -88,20 +88,18 @@ public:
 
   octave_value_list subsref (const std::string&,
 			     const std::list<octave_value_list>&, int)
     {
       panic_impossible ();
       return octave_value_list ();
     }
 
-  octave_value do_index_op (const octave_value_list& idx, int resize_ok);
-
-  octave_value do_index_op (const octave_value_list& idx)
-    { return do_index_op (idx, 0); }
+  octave_value do_index_op (const octave_value_list& idx,
+			    bool resize_ok = false);
 
   idx_vector index_vector (void) const { return idx_vector (range); }
 
   dim_vector dims (void) const
     { 
       octave_idx_type n = range.nelem ();
       return dim_vector (n > 0, n);
     }
diff --git a/src/ov-scalar.cc b/src/ov-scalar.cc
--- a/src/ov-scalar.cc
+++ b/src/ov-scalar.cc
@@ -49,17 +49,17 @@ 02110-1301, USA.
 
 template class octave_base_scalar<double>;
 
 DEFINE_OCTAVE_ALLOCATOR (octave_scalar);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_scalar, "scalar", "double");
 
 octave_value
-octave_scalar::do_index_op (const octave_value_list& idx, int resize_ok)
+octave_scalar::do_index_op (const octave_value_list& idx, bool resize_ok)
 {
   octave_value retval;
 
   if (idx.valid_scalar_indices ())
     retval = scalar;
   else
     {
       // FIXME -- this doesn't solve the problem of
diff --git a/src/ov-scalar.h b/src/ov-scalar.h
--- a/src/ov-scalar.h
+++ b/src/ov-scalar.h
@@ -66,17 +66,18 @@ public:
 
   octave_base_value *clone (void) const { return new octave_scalar (*this); }
 
   // We return an octave_matrix here instead of an octave_scalar so
   // that in expressions like A(2,2,2) = 2 (for A previously
   // undefined), A will be empty instead of a 1x1 object.
   octave_base_value *empty_clone (void) const { return new octave_matrix (); }
 
-  octave_value do_index_op (const octave_value_list& idx, int resize_ok);
+  octave_value do_index_op (const octave_value_list& idx,
+			    bool resize_ok = false);
 
   idx_vector index_vector (void) const { return idx_vector (scalar); }
 
   octave_value any (int = 0) const
     { return (scalar != 0 && ! lo_ieee_isnan (scalar)); }
 
   bool is_real_scalar (void) const { return true; }
 
diff --git a/src/ov-str-mat.cc b/src/ov-str-mat.cc
--- a/src/ov-str-mat.cc
+++ b/src/ov-str-mat.cc
@@ -78,17 +78,17 @@ default_numeric_conversion_function (con
 octave_base_value::type_conv_fcn
 octave_char_matrix_str::numeric_conversion_function (void) const
 {
   return default_numeric_conversion_function;
 }
 
 octave_value
 octave_char_matrix_str::do_index_op_internal (const octave_value_list& idx,
-					      int resize_ok, char type)
+					      bool resize_ok, char type)
 {
   octave_value retval;
 
   octave_idx_type len = idx.length ();
 
   switch (len)
     {
     case 0:
diff --git a/src/ov-str-mat.h b/src/ov-str-mat.h
--- a/src/ov-str-mat.h
+++ b/src/ov-str-mat.h
@@ -80,17 +80,18 @@ public:
 
   ~octave_char_matrix_str (void) { }
 
   octave_base_value *clone (void) const { return new octave_char_matrix_str (*this); }
   octave_base_value *empty_clone (void) const { return new octave_char_matrix_str (); }
 
   type_conv_fcn numeric_conversion_function (void) const;
 
-  octave_value do_index_op (const octave_value_list& idx, int resize_ok)
+  octave_value do_index_op (const octave_value_list& idx,
+			    bool resize_ok = false)
     { return do_index_op_internal (idx, resize_ok); }
 
   void assign (const octave_value_list& idx, const charMatrix& rhs);
 
   octave_value reshape (const dim_vector& new_dims) const
     { return octave_value (charNDArray (matrix.reshape (new_dims)), true); }
 
   octave_value permute (const Array<int>& vec, bool inv = false) const
@@ -147,17 +148,17 @@ public:
   int write (octave_stream& os, int block_size,
 	     oct_data_conv::data_type output_type, int skip,
 	     oct_mach_info::float_format flt_fmt) const
     { return os.write (matrix, block_size, output_type, skip, flt_fmt); }
 
 protected:
 
   octave_value do_index_op_internal (const octave_value_list& idx,
-				     int resize_ok, char type = '"');
+				     bool resize_ok, char type = '"');
 
 private:
 
   DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
@@ -210,17 +211,18 @@ public:
     {
       charNDArray retval (matrix);
       retval.resize (dv);
       return octave_value (retval, true, '\'');
     }
 
   bool is_sq_string (void) const { return true; }
 
-  octave_value do_index_op (const octave_value_list& idx, int resize_ok)
+  octave_value do_index_op (const octave_value_list& idx,
+			    bool resize_ok = false)
     { return do_index_op_internal (idx, resize_ok, '\''); }
 
 private:
 
   DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -294,22 +294,19 @@ public:
 			     size_t skip = 1);
 
   octave_value_list next_subsref (int nargout,
 				  const std::string& type, const
 				  std::list<octave_value_list>& idx,
 				  size_t skip = 1);
 
   octave_value do_index_op (const octave_value_list& idx,
-				    int resize_ok)
+			    bool resize_ok = false)
     { return rep->do_index_op (idx, resize_ok); }
 
-  octave_value do_index_op (const octave_value_list& idx)
-    { return do_index_op (idx, 0); }
-
   octave_value_list
   do_multi_index_op (int nargout, const octave_value_list& idx);
 
   octave_value subsasgn (const std::string& type,
 				 const std::list<octave_value_list>& idx,
 				 const octave_value& rhs);
 
   octave_value assign (assign_op op, const std::string& type,
