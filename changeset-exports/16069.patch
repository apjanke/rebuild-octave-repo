# HG changeset patch
# User Torsten <ttl@justmail.de>
# Date 1361132266 -3600
#      Sun Feb 17 21:17:46 2013 +0100
# Node ID 0486a29d780fd79e3e3cccd197d4efb5a18f08b9
# Parent  b309a5da17f54b5c61fe80b88b55c08a5cff2bd2
gui: fix updating history and workspace widget for mxe-octave

* history-dock-widget.h: new flag _update_event_enabled for disabling and
  enabling the update event
* histroy-dock-widget.cc(construct): change update timer to periodic and to an
  interval of 500 ms, enable update
* history-dock-widget.cc(request_history_model_update): if update is enabled
  post update event and disable update in order to prevent further events
* history-dock-widget.cc(update_history_callback): reenalbe update when update
  is complete
* workspace-model.h: new flag _update_event_enabled for disabling and enabling
  the update event
* workspace-model.cc(workspace_model): change update timer to periodic,
  enable update
* workspace-model.cc(request_update_workspace): if update is enabled post update
  event and disable update in order to prevent further events
* workspace-model.cc(update_workspace_callback): reenalbe update when update
  is complete

diff --git a/libgui/src/history-dockwidget.cc b/libgui/src/history-dockwidget.cc
--- a/libgui/src/history-dockwidget.cc
+++ b/libgui/src/history-dockwidget.cc
@@ -72,18 +72,19 @@ history_dock_widget::construct ()
   widget ()->setLayout (vbox_layout);
 
   connect (_filter_line_edit, SIGNAL (textEdited (QString)),
            &_sort_filter_proxy_model, SLOT (setFilterWildcard (QString)));
 
   connect (_history_list_view, SIGNAL (doubleClicked (QModelIndex)),
            this, SLOT (handle_double_click (QModelIndex)));
 
-  _update_history_model_timer.setInterval (200);
-  _update_history_model_timer.setSingleShot (true);
+  _update_event_enabled = true;
+  _update_history_model_timer.setInterval (500);
+  _update_history_model_timer.setSingleShot (false);
 
   connect (&_update_history_model_timer,
            SIGNAL (timeout ()),
            this,
            SLOT (request_history_model_update ()));
 
   _update_history_model_timer.start ();
 
@@ -127,17 +128,21 @@ void
 history_dock_widget::handle_double_click (QModelIndex modelIndex)
 {
   emit command_double_clicked (modelIndex.data().toString()+"\n");
 }
 
 void
 history_dock_widget::request_history_model_update ()
 {
-  octave_link::post_event (this, &history_dock_widget::update_history_callback);
+  if (_update_event_enabled)
+    {
+      _update_event_enabled = false;  // no more update until this one is processed
+      octave_link::post_event (this, &history_dock_widget::update_history_callback);
+    }
 }
 
 void
 history_dock_widget::reset_model ()
 {
   _history_model->setStringList (QStringList ());
 }
 
@@ -176,12 +181,12 @@ history_dock_widget::update_history_call
     }
   else if (scroll_window)
     {
       scroll_window = false;
 
       _history_list_view->scrollToBottom ();
     }
 
-  // Post a new update event in a given time. This prevents flooding the
-  // event queue.
-  _update_history_model_timer.start ();
+  // update is processed, re-enable further updates events triggered by timer
+    _update_event_enabled = true;
+
 }
diff --git a/libgui/src/history-dockwidget.h b/libgui/src/history-dockwidget.h
--- a/libgui/src/history-dockwidget.h
+++ b/libgui/src/history-dockwidget.h
@@ -61,11 +61,12 @@ private:
   QSortFilterProxyModel _sort_filter_proxy_model;
 
   /** Stores the current history_model. */
   QStringListModel *_history_model;
 
   QTimer _update_history_model_timer;
 
   void update_history_callback (void);
+  bool _update_event_enabled;
 };
 
 #endif // HISTORYDOCKWIDGET_H
diff --git a/libgui/src/workspace-model.cc b/libgui/src/workspace-model.cc
--- a/libgui/src/workspace-model.cc
+++ b/libgui/src/workspace-model.cc
@@ -1,8 +1,9 @@
+
 /*
 
 Copyright (C) 2011-2012 Jacob Dawid
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
@@ -46,30 +47,35 @@ workspace_model::workspace_model(QObject
   insert_top_level_item(1, new tree_item ("Global"));
   insert_top_level_item(2, new tree_item ("Persistent"));
 
   connect(&_update_workspace_model_timer,
           SIGNAL (timeout ()),
           this,
           SLOT (request_update_workspace()));
 
+  _update_event_enabled = true;
   _update_workspace_model_timer.setInterval (500);
-  _update_workspace_model_timer.setSingleShot (true);
+  _update_workspace_model_timer.setSingleShot (false);
   _update_workspace_model_timer.start ();
 }
 
 workspace_model::~workspace_model()
 {
   delete _rootItem;
 }
 
 void
 workspace_model::request_update_workspace ()
 {
-  octave_link::post_event (this, &workspace_model::update_workspace_callback);
+  if (_update_event_enabled)
+    {
+      _update_event_enabled = false;  // no more update until this one is processed
+      octave_link::post_event (this, &workspace_model::update_workspace_callback);
+    }
 }
 
 QModelIndex
 workspace_model::index(int row, int column, const QModelIndex &p) const
 {
   if (!hasIndex(row, column, p))
     return QModelIndex();
 
@@ -217,13 +223,12 @@ workspace_model::update_workspace_callba
         default:
           break;
         }
     }
 
   endResetModel();
   emit model_changed();
 
-  // Post a new event in a given time.
-  // This prevents flooding the event queue when no events are being processed.
-  _update_workspace_model_timer.start ();
+  // update is processed, re-enable further updates events triggered by timer
+  _update_event_enabled = true;
+
 }
-
diff --git a/libgui/src/workspace-model.h b/libgui/src/workspace-model.h
--- a/libgui/src/workspace-model.h
+++ b/libgui/src/workspace-model.h
@@ -135,16 +135,18 @@ class workspace_model
 public slots:
   void request_update_workspace ();
 
 signals:
   void model_changed ();
 
 private:
 
+  bool _update_event_enabled;
+
   void update_workspace_callback (void);
 
   /** Timer for periodically updating the workspace model from the current
    * symbol information. */
   QTimer _update_workspace_model_timer;
 
   /** Stores the current symbol information. */
   QList <symbol_information> _symbol_information;
