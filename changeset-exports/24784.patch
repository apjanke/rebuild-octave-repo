# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1519219481 18000
#      Wed Feb 21 08:24:41 2018 -0500
# Node ID 4d945f2e5914a6d7ed9b0df41e276fc271b70d2b
# Parent  db6fb8b8bbdef01f801bf1a983e063f2d817c4ea
eliminate output_max_field width; limit output precision (bug #53167)

* pr-flt-fmt.h, pr-flt-fmt.cc (Voutput_max_field_width,
output_max_field_width): Delete.  Eliminate all uses.
(set_output_prec): Rename from set_output_prec_and_fw.  Change all uses.
(Foutput_max_field_width): Always return 20.  Don't do anything with
input.  Document new behavior.
(Foutput_precision): Limit value to be in the range 0 to 16.
(class float_format): Always set width to 0.

* pr-output.h, pr-output.cc (pr_output_traits): New template.
(make_real_format): Limit output precision.
(octave_print_real_matrix_internal,
octave_print_real_diag_matrix_internal,
octave_print_complex_matrix_internal,
octave_print_complex_diag_matrix_internal): New template functions.
Use them to define float and double versions of octave_print_internal
for real and complex matrix and diag matrix functions.
(octave_print_internal): Define separate versions for float and float
complex N-d arrays.
(Fformat): Update doc string.

diff --git a/libinterp/corefcn/pr-flt-fmt.cc b/libinterp/corefcn/pr-flt-fmt.cc
--- a/libinterp/corefcn/pr-flt-fmt.cc
+++ b/libinterp/corefcn/pr-flt-fmt.cc
@@ -24,70 +24,55 @@ along with Octave; see the file COPYING.
 #  include "config.h"
 #endif
 
 #include "defun.h"
 #include "error.h"
 #include "pr-flt-fmt.h"
 #include "variables.h"
 
-// The maximum field width for a number printed by the default output
-// routines.
-static int Voutput_max_field_width = 10;
-
 // The precision of the numbers printed by the default output
 // routines.
 static int Voutput_precision = 5;
 
 int
-output_max_field_width (void)
-{
-  return Voutput_max_field_width;
-}
-
-int
 output_precision (void)
 {
   return Voutput_precision;
 }
 
 void
-set_output_prec_and_fw (int prec, int fw)
+set_output_prec (int prec)
 {
   Voutput_precision = prec;
-  Voutput_max_field_width = fw;
 }
 
-DEFUN (output_max_field_width, args, nargout,
+DEFUN (output_max_field_width, , ,
        doc: /* -*- texinfo -*-
-@deftypefn  {} {@var{val} =} output_max_field_width ()
-@deftypefnx {} {@var{old_val} =} output_max_field_width (@var{new_val})
-@deftypefnx {} {} output_max_field_width (@var{new_val}, "local")
-Query or set the internal variable that specifies the maximum width
-of a numeric output field.
-
-When called from inside a function with the @qcode{"local"} option, the
-variable is changed locally for the function and any subroutines it calls.
-The original variable value is restored when exiting the function.
-@seealso{format, fixed_point_format, output_precision}
+@deftypefn  {} {} output_max_field_width
+This function is obsolete and will be removed from a future version
+of Octave.
 @end deftypefn */)
 {
-  return SET_INTERNAL_VARIABLE_WITH_LIMITS (output_max_field_width, 0,
-                                            std::numeric_limits<int>::max ());
+  return octave_value (20);
 }
 
 DEFUN (output_precision, args, nargout,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {@var{val} =} output_precision ()
 @deftypefnx {} {@var{old_val} =} output_precision (@var{new_val})
 @deftypefnx {} {} output_precision (@var{new_val}, "local")
 Query or set the internal variable that specifies the minimum number of
 significant figures to display for numeric output.
 
+Note that regardless of the value set for @code{output_precision}, the
+number of digits of precision displayed is limited to 16 for double
+precision values and 7 for single precision values.
+
 When called from inside a function with the @qcode{"local"} option, the
 variable is changed locally for the function and any subroutines it calls.
 The original variable value is restored when exiting the function.
-@seealso{format, fixed_point_format, output_max_field_width}
+
+@seealso{format, fixed_point_format}
 @end deftypefn */)
 {
-  return SET_INTERNAL_VARIABLE_WITH_LIMITS (output_precision, -1,
-                                            std::numeric_limits<int>::max ());
+  return SET_INTERNAL_VARIABLE_WITH_LIMITS (output_precision, 0, 16);
 }
diff --git a/libinterp/corefcn/pr-flt-fmt.h b/libinterp/corefcn/pr-flt-fmt.h
--- a/libinterp/corefcn/pr-flt-fmt.h
+++ b/libinterp/corefcn/pr-flt-fmt.h
@@ -32,29 +32,26 @@ template <typename T>
 class pr_engineering_float;
 
 template <typename T>
 class pr_formatted_float;
 
 template <typename T>
 class pr_rational_float;
 
-extern int output_max_field_width (void);
-
 extern int output_precision (void);
 
-extern void set_output_prec_and_fw (int prec, int fw);
+extern void set_output_prec (int prec);
 
 class
 float_format
 {
 public:
 
-  float_format (int w = output_max_field_width (),
-                int p = output_precision (), int f = 0)
+  float_format (int w = 0, int p = output_precision (), int f = 0)
     : fw (w), ex (0), prec (p), fmt (f), up (0), sp (0) { }
 
   float_format (int w, int e, int p, int f)
     : fw (w), ex (e), prec (p), fmt (f), up (0), sp (0) { }
 
   float_format (const float_format& ff) = default;
 
   float_format& operator = (const float_format& ff) = default;
diff --git a/libinterp/corefcn/pr-output.cc b/libinterp/corefcn/pr-output.cc
--- a/libinterp/corefcn/pr-output.cc
+++ b/libinterp/corefcn/pr-output.cc
@@ -427,26 +427,50 @@ pr_min_internal (const MArray<T>& m)
       }
 
   if (all_inf_or_nan)
     result = 0;
 
   return result;
 }
 
+template <typename>
+struct pr_output_traits
+{
+  static const int digits10;
+};
+
+template <>
+struct pr_output_traits<double>
+{
+  static const int digits10;
+};
+
+const int pr_output_traits<double>::digits10 = 16;
+
+template <>
+struct pr_output_traits<float>
+{
+  static const int digits10;
+};
+
+const int pr_output_traits<float>::digits10 = 8;
+
 // FIXME: it would be nice to share more code among these functions,..
 
+// Works for double and float.
+
 template <typename T>
 static inline float_display_format
 make_real_format (int digits, bool inf_or_nan,
                   bool int_only, int& fw)
 {
   float_format fmt;
 
-  int prec = output_precision ();
+  int prec = std::min (output_precision (), pr_output_traits<T>::digits10);
 
   int ld, rd;
 
   if (rat_format)
     {
       fw = 0;
       rd = 0;
     }
@@ -488,17 +512,17 @@ make_real_format (int digits, bool inf_o
         }
 
       fw = 1 + ld + 1 + rd;
       if (inf_or_nan && fw < 4)
         fw = 4;
     }
 
   if (! (rat_format || bank_format || hex_format || bit_format)
-      && (fw > output_max_field_width () || print_e || print_g || print_eng))
+      && (print_e || print_g || print_eng))
     {
       if (print_g)
         fmt = float_format ();
       else
         {
           // e+ddd
           int ex = 5;
 
@@ -526,16 +550,18 @@ make_real_format (int digits, bool inf_o
   else if (! bank_format && (inf_or_nan || int_only))
     fmt = float_format (fw, rd);
   else
     fmt = float_format (fw, rd, std::ios::fixed);
 
   return float_display_format (fmt);
 }
 
+// Works for double and float.
+
 template <typename T>
 float_display_format
 make_format (T val, int& fw)
 {
   if (free_format)
     return float_display_format ();
 
   bool inf_or_nan = (octave::math::isinf (val) || octave::math::isnan (val));
@@ -551,17 +577,17 @@ make_format (T val, int& fw)
 
 template <typename T>
 static inline float_display_format
 make_real_matrix_format (int x_max, int x_min, bool inf_or_nan,
                          int int_or_inf_or_nan, int& fw)
 {
   float_format fmt;
 
-  int prec = output_precision ();
+  int prec = std::min (output_precision (), pr_output_traits<T>::digits10);
 
   int ld, rd;
 
   if (rat_format)
     {
       fw = 9;
       rd = 0;
     }
@@ -632,19 +658,17 @@ make_real_matrix_format (int x_max, int 
       rd = (rd_max > rd_min ? rd_max : rd_min);
 
       fw = 1 + ld + 1 + rd;
       if (inf_or_nan && fw < 4)
         fw = 4;
     }
 
   if (! (rat_format || bank_format || hex_format || bit_format)
-      && (print_e
-          || print_eng || print_g
-          || (! Vfixed_point_format && fw > output_max_field_width ())))
+      && (print_e || print_eng || print_g))
     {
       if (print_g)
         fmt = float_format ();
       else
         {
           int ex = 4;
           if (x_max > 100 || x_min > 100)
             ex++;
@@ -719,17 +743,17 @@ make_format (const FloatMatrix& m, int& 
 template <typename T>
 static inline float_display_format
 make_complex_format (int x_max, int x_min, int r_x,
                      bool inf_or_nan, int int_only, int& r_fw, int& i_fw)
 {
   float_format r_fmt;
   float_format i_fmt;
 
-  int prec = output_precision ();
+  int prec = std::min (output_precision (), pr_output_traits<T>::digits10);
 
   int ld, rd;
 
   if (rat_format)
     {
       i_fw = 0;
       r_fw = 0;
       rd = 0;
@@ -805,17 +829,17 @@ make_complex_format (int x_max, int x_mi
       if (inf_or_nan && i_fw < 3)
         {
           i_fw = 3;
           r_fw = 4;
         }
     }
 
   if (! (rat_format || bank_format || hex_format || bit_format)
-      && (r_fw > output_max_field_width () || print_e || print_eng || print_g))
+      && (print_e || print_eng || print_g))
     {
       if (print_g)
         {
           r_fmt = float_format ();
           i_fmt = float_format ();
         }
       else
         {
@@ -914,17 +938,17 @@ template <typename T>
 static inline float_display_format
 make_complex_matrix_format (int x_max, int x_min, int r_x_max,
                             int r_x_min, bool inf_or_nan,
                             int int_or_inf_or_nan, int& r_fw, int& i_fw)
 {
   float_format r_fmt;
   float_format i_fmt;
 
-  int prec = output_precision ();
+  int prec = std::min (output_precision (), pr_output_traits<T>::digits10);
 
   int ld, rd;
 
   if (rat_format)
     {
       i_fw = 9;
       r_fw = 9;
       rd = 0;
@@ -1011,19 +1035,17 @@ make_complex_matrix_format (int x_max, i
       if (inf_or_nan && i_fw < 3)
         {
           i_fw = 3;
           r_fw = 4;
         }
     }
 
   if (! (rat_format || bank_format || hex_format || bit_format)
-      && (print_e
-          || print_eng || print_g
-          || (! Vfixed_point_format && r_fw > output_max_field_width ())))
+      && (print_e || print_eng || print_g))
     {
       if (print_g)
         {
           r_fmt = float_format ();
           i_fmt = float_format ();
         }
       else
         {
@@ -1132,17 +1154,17 @@ make_format (const FloatComplexMatrix& c
 }
 
 template <typename T>
 static inline float_display_format
 make_range_format (int x_max, int x_min, int all_ints, int& fw)
 {
   float_format fmt;
 
-  int prec = output_precision ();
+  int prec = std::min (output_precision (), pr_output_traits<T>::digits10);
 
   int ld, rd;
 
   if (rat_format)
     {
       fw = 9;
       rd = 0;
     }
@@ -1205,19 +1227,17 @@ make_range_format (int x_max, int x_min,
 
       ld = (ld_max > ld_min ? ld_max : ld_min);
       rd = (rd_max > rd_min ? rd_max : rd_min);
 
       fw = ld + rd + 3;
     }
 
   if (! (rat_format || bank_format || hex_format || bit_format)
-      && (print_e
-          || print_eng || print_g
-          || (! Vfixed_point_format && fw > output_max_field_width ())))
+      && (print_e || print_eng || print_g))
     {
       if (print_g)
         fmt = float_format ();
       else
         {
           int ex = 4;
           if (x_max > 100 || x_min > 100)
             ex++;
@@ -1859,31 +1879,32 @@ pr_plus_format_matrix (std::ostream& os,
           pr_plus_format (os, m(i,j));
         }
 
       if (i < nr - 1)
         os << "\n";
     }
 }
 
-void
-octave_print_internal (std::ostream& os, const Matrix& m,
-                       bool pr_as_read_syntax, int extra_indent)
+template <typename MT>
+static void
+octave_print_real_matrix_internal (std::ostream& os, const MT& m,
+                                   bool pr_as_read_syntax, int extra_indent)
 {
   octave_idx_type nr = m.rows ();
   octave_idx_type nc = m.columns ();
 
   if (nr == 0 || nc == 0)
     print_empty_matrix (os, nr, nc, pr_as_read_syntax);
   else if (plus_format && ! pr_as_read_syntax)
     pr_plus_format_matrix (os, m);
   else
     {
       int fw = 0;
-      double scale = 1;
+      typename MT::element_type scale = 1;
       float_display_format fmt = make_format (m, fw, scale);
       int column_width = fw + 2;
       octave_idx_type total_width = nc * column_width;
       octave_idx_type max_width = octave::command_editor::terminal_cols ();
 
       if (pr_as_read_syntax)
         max_width -= 4;
       else
@@ -1975,31 +1996,32 @@ octave_print_internal (std::ostream& os,
                   if (i < nr - 1)
                     os << "\n";
                 }
             }
         }
     }
 }
 
-void
-octave_print_internal (std::ostream& os, const DiagMatrix& m,
-                       bool pr_as_read_syntax, int extra_indent)
+template <typename DMT>
+static void
+octave_print_real_diag_matrix_internal (std::ostream& os, const DMT& m,
+                                        bool pr_as_read_syntax, int extra_indent)
 {
   octave_idx_type nr = m.rows ();
   octave_idx_type nc = m.columns ();
 
   if (nr == 0 || nc == 0)
     print_empty_matrix (os, nr, nc, pr_as_read_syntax);
   else if (plus_format && ! pr_as_read_syntax)
     pr_plus_format_matrix (os, m);
   else
     {
       int fw;
-      double scale = 1;
+      typename DMT::element_type scale = 1;
       float_display_format fmt = make_format (Matrix (m.diag ()), fw, scale);
       int column_width = fw + 2;
       octave_idx_type total_width = nc * column_width;
       octave_idx_type max_width = octave::command_editor::terminal_cols ();
 
       if (pr_as_read_syntax)
         max_width -= 4;
       else
@@ -2066,17 +2088,18 @@ octave_print_internal (std::ostream& os,
             os << "\n";
 
           pr_scale_header (os, scale);
 
           // kluge.  Get the true width of a number.
           int zero_fw;
           {
             std::ostringstream tmp_oss;
-            pr_float (tmp_oss, fmt, 0.0, fw, scale);
+            typename DMT::element_type zero = 0;
+            pr_float (tmp_oss, fmt, zero, fw, scale);
             zero_fw = tmp_oss.str ().length ();
           }
 
           for (octave_idx_type col = 0; col < nc; col += inc)
             {
               octave_idx_type lim = (col + inc < nc ? col + inc : nc);
 
               pr_col_num_header (os, total_width, max_width, lim, col,
@@ -2196,16 +2219,34 @@ octave_print_internal (std::ostream& os,
       break;
 
     default:
       print_nd_array <NDArray, double, Matrix> (os, nda, pr_as_read_syntax);
       break;
     }
 }
 
+void
+octave_print_internal (std::ostream& os, const FloatNDArray& nda,
+                       bool pr_as_read_syntax, int extra_indent)
+{
+  switch (nda.ndims ())
+    {
+    case 1:
+    case 2:
+      octave_print_internal (os, FloatMatrix (nda),
+                             pr_as_read_syntax, extra_indent);
+      break;
+
+    default:
+      print_nd_array <FloatNDArray, float, FloatMatrix> (os, nda, pr_as_read_syntax);
+      break;
+    }
+}
+
 template <typename T>
 static inline void
 pr_plus_format (std::ostream& os, const std::complex<T>& c)
 {
   T rp = c.real ();
   T ip = c.imag ();
 
   if (rp == 0)
@@ -2250,31 +2291,32 @@ octave_print_internal (std::ostream& os,
     {
       if (free_format)
         os << c;
       else
         pr_complex (os, fmt, c);
     }
 }
 
-void
-octave_print_internal (std::ostream& os, const ComplexMatrix& cm,
-                       bool pr_as_read_syntax, int extra_indent)
+template <typename MT>
+static void
+octave_print_complex_matrix_internal (std::ostream& os, const MT& cm,
+                                      bool pr_as_read_syntax, int extra_indent)
 {
   octave_idx_type nr = cm.rows ();
   octave_idx_type nc = cm.columns ();
 
   if (nr == 0 || nc == 0)
     print_empty_matrix (os, nr, nc, pr_as_read_syntax);
   else if (plus_format && ! pr_as_read_syntax)
     pr_plus_format_matrix (os, cm);
   else
     {
       int r_fw, i_fw;
-      double scale = 1;
+      typename MT::real_elt_type scale = 1;
       float_display_format fmt = make_format (cm, r_fw, i_fw, scale);
       int column_width = i_fw + r_fw;
       column_width += (rat_format || bank_format || hex_format
                        || bit_format) ? 2 : 7;
       octave_idx_type total_width = nc * column_width;
       octave_idx_type max_width = octave::command_editor::terminal_cols ();
 
       if (pr_as_read_syntax)
@@ -2368,31 +2410,32 @@ octave_print_internal (std::ostream& os,
                   if (i < nr - 1)
                     os << "\n";
                 }
             }
         }
     }
 }
 
-void
-octave_print_internal (std::ostream& os, const ComplexDiagMatrix& cm,
-                       bool pr_as_read_syntax, int extra_indent)
+template <typename DMT>
+static void
+octave_print_complex_diag_matrix_internal (std::ostream& os, const DMT& cm,
+                                           bool pr_as_read_syntax, int extra_indent)
 {
   octave_idx_type nr = cm.rows ();
   octave_idx_type nc = cm.columns ();
 
   if (nr == 0 || nc == 0)
     print_empty_matrix (os, nr, nc, pr_as_read_syntax);
   else if (plus_format && ! pr_as_read_syntax)
     pr_plus_format_matrix (os, cm);
   else
     {
       int r_fw, i_fw;
-      double scale = 1;
+      typename DMT::real_elt_type scale = 1;
       float_display_format fmt
         = make_format (ComplexMatrix (cm.diag ()), r_fw, i_fw, scale);
       int column_width = i_fw + r_fw;
       column_width += (rat_format || bank_format || hex_format
                        || bit_format) ? 2 : 7;
       octave_idx_type total_width = nc * column_width;
       octave_idx_type max_width = octave::command_editor::terminal_cols ();
 
@@ -2462,17 +2505,18 @@ octave_print_internal (std::ostream& os,
             os << "\n";
 
           pr_scale_header (os, scale);
 
           // kluge.  Get the true width of a number.
           int zero_fw;
           {
             std::ostringstream tmp_oss;
-            pr_complex (tmp_oss, fmt, Complex (0), r_fw, i_fw, scale);
+            typename DMT::element_type zero = 0;
+            pr_complex (tmp_oss, fmt, zero, r_fw, i_fw, scale);
             zero_fw = tmp_oss.str ().length ();
           }
 
           for (octave_idx_type col = 0; col < nc; col += inc)
             {
               octave_idx_type lim = (col + inc < nc ? col + inc : nc);
 
               pr_col_num_header (os, total_width, max_width, lim, col,
@@ -2630,61 +2674,91 @@ octave_print_internal (std::ostream& os,
 
     default:
       print_nd_array <ComplexNDArray, Complex, ComplexMatrix>
                      (os, nda, pr_as_read_syntax);
       break;
     }
 }
 
+void
+octave_print_internal (std::ostream& os, const FloatComplexNDArray& nda,
+                       bool pr_as_read_syntax, int extra_indent)
+{
+  switch (nda.ndims ())
+    {
+    case 1:
+    case 2:
+      octave_print_internal (os, FloatComplexMatrix (nda),
+                             pr_as_read_syntax, extra_indent);
+      break;
+
+    default:
+      print_nd_array <FloatComplexNDArray, FloatComplex, FloatComplexMatrix>
+                     (os, nda, pr_as_read_syntax);
+      break;
+    }
+}
+
 // FIXME: write single precision versions of the printing functions.
 
 void
+octave_print_internal (std::ostream& os, const Matrix& m,
+                       bool pr_as_read_syntax, int extra_indent)
+{
+  octave_print_real_matrix_internal (os, m, pr_as_read_syntax, extra_indent);
+}
+
+void
 octave_print_internal (std::ostream& os, const FloatMatrix& m,
                        bool pr_as_read_syntax, int extra_indent)
 {
-  octave_print_internal (os, Matrix (m), pr_as_read_syntax, extra_indent);
+  octave_print_real_matrix_internal (os, m, pr_as_read_syntax, extra_indent);
+}
+
+void
+octave_print_internal (std::ostream& os, const DiagMatrix& m,
+                       bool pr_as_read_syntax, int extra_indent)
+{
+  octave_print_real_diag_matrix_internal (os, m, pr_as_read_syntax, extra_indent);
 }
 
 void
 octave_print_internal (std::ostream& os, const FloatDiagMatrix& m,
                        bool pr_as_read_syntax, int extra_indent)
 {
-  octave_print_internal (os, DiagMatrix (m), pr_as_read_syntax, extra_indent);
+  octave_print_real_diag_matrix_internal (os, m, pr_as_read_syntax, extra_indent);
 }
 
 void
-octave_print_internal (std::ostream& os, const FloatNDArray& nda,
+octave_print_internal (std::ostream& os, const ComplexMatrix& cm,
                        bool pr_as_read_syntax, int extra_indent)
 {
-  octave_print_internal (os, NDArray (nda), pr_as_read_syntax, extra_indent);
+  octave_print_complex_matrix_internal (os, cm, pr_as_read_syntax, extra_indent);
 }
 
 void
 octave_print_internal (std::ostream& os, const FloatComplexMatrix& cm,
                        bool pr_as_read_syntax, int extra_indent)
 {
-  octave_print_internal (os, ComplexMatrix (cm), pr_as_read_syntax,
-                         extra_indent);
+  octave_print_complex_matrix_internal (os, cm, pr_as_read_syntax, extra_indent);
+}
+
+void
+octave_print_internal (std::ostream& os, const ComplexDiagMatrix& cm,
+                       bool pr_as_read_syntax, int extra_indent)
+{
+  octave_print_complex_diag_matrix_internal (os, cm, pr_as_read_syntax, extra_indent);
 }
 
 void
 octave_print_internal (std::ostream& os, const FloatComplexDiagMatrix& cm,
                        bool pr_as_read_syntax, int extra_indent)
 {
-  octave_print_internal (os, ComplexDiagMatrix (cm), pr_as_read_syntax,
-                         extra_indent);
-}
-
-void
-octave_print_internal (std::ostream& os, const FloatComplexNDArray& nda,
-                       bool pr_as_read_syntax, int extra_indent)
-{
-  octave_print_internal (os, ComplexNDArray (nda), pr_as_read_syntax,
-                         extra_indent);
+  octave_print_complex_diag_matrix_internal (os, cm, pr_as_read_syntax, extra_indent);
 }
 
 void
 octave_print_internal (std::ostream& os, const Range& r,
                        bool pr_as_read_syntax, int extra_indent)
 {
   double base = r.base ();
   double increment = r.inc ();
@@ -3685,17 +3759,17 @@ init_format_state (void)
   bit_format = 0;
   Vcompact_format = false;
   print_e = false;
   print_big_e = false;
   print_g = false;
   print_eng = false;
 }
 
-static inline std::string format_string ("short");
+static std::string format_string ("short");
 
 static inline void
 set_format_style (int argc, const string_vector& argv)
 {
   int idx = 1;
   std::string format;
 
   if (--argc > 0)
@@ -3738,49 +3812,49 @@ set_format_style (int argc, const string
                   print_eng = true;
                 }
               else
                 error ("format: unrecognized option 'short %s'", arg.c_str ());
             }
           else
             init_format_state ();
 
-          set_output_prec_and_fw (5, 10);
+          set_output_prec (5);
         }
       else if (arg == "shorte")
         {
           init_format_state ();
           print_e = true;
-          set_output_prec_and_fw (5, 10);
+          set_output_prec (5);
         }
       else if (arg == "shortE")
         {
           init_format_state ();
           print_e = true;
           print_big_e = true;
-          set_output_prec_and_fw (5, 10);
+          set_output_prec (5);
         }
       else if (arg == "shortg")
         {
           init_format_state ();
           print_g = true;
-          set_output_prec_and_fw (5, 10);
+          set_output_prec (5);
         }
       else if (arg == "shortG")
         {
           init_format_state ();
           print_g = true;
           print_big_e = true;
-          set_output_prec_and_fw (5, 10);
+          set_output_prec (5);
         }
       else if (arg == "shortEng")
         {
           init_format_state ();
           print_eng = true;
-          set_output_prec_and_fw (5, 10);
+          set_output_prec (5);
         }
       else if (arg == "long")
         {
           if (--argc > 0)
             {
               arg = argv[idx++];
               format.append (arg);
 
@@ -3812,49 +3886,49 @@ set_format_style (int argc, const string
                   print_eng = true;
                 }
               else
                 error ("format: unrecognized option 'long %s'", arg.c_str ());
             }
           else
             init_format_state ();
 
-          set_output_prec_and_fw (15, 20);
+          set_output_prec (16);
         }
       else if (arg == "longe")
         {
           init_format_state ();
           print_e = true;
-          set_output_prec_and_fw (15, 20);
+          set_output_prec (16);
         }
       else if (arg == "longE")
         {
           init_format_state ();
           print_e = true;
           print_big_e = true;
-          set_output_prec_and_fw (15, 20);
+          set_output_prec (16);
         }
       else if (arg == "longg")
         {
           init_format_state ();
           print_g = true;
-          set_output_prec_and_fw (15, 20);
+          set_output_prec (16);
         }
       else if (arg == "longG")
         {
           init_format_state ();
           print_g = true;
           print_big_e = true;
-          set_output_prec_and_fw (15, 20);
+          set_output_prec (16);
         }
       else if (arg == "longEng")
         {
           init_format_state ();
           print_eng = true;
-          set_output_prec_and_fw (15, 20);
+          set_output_prec (16);
         }
       else if (arg == "hex")
         {
           init_format_state ();
           hex_format = 1;
         }
       else if (arg == "native-hex")
         {
@@ -3920,17 +3994,17 @@ set_format_style (int argc, const string
           return;
         }
       else
         error ("format: unrecognized format state '%s'", arg.c_str ());
     }
   else
     {
       init_format_state ();
-      set_output_prec_and_fw (5, 10);
+      set_output_prec (5);
       format = "short";
     }
 
   format_string = format;
 }
 
 DEFUN (format, args, nargout,
        doc: /* -*- texinfo -*-
@@ -3949,42 +4023,37 @@ By default, Octave displays 5 significan
 (option @samp{short} paired with @samp{loose} format for matrices).  If
 @code{format} is invoked without any options, this default format is restored.
 
 Valid formats for floating point numbers are listed in the following
 table.
 
 @table @code
 @item short
-Fixed point format with 5 significant figures in a field that is a maximum of
-10 characters wide.  (default).
-
-If Octave is unable to format a matrix so that columns line up on the decimal
-point and all numbers fit within the maximum field width then it switches to an
-exponential @samp{e} format.
+Fixed point format with 5 significant figures (default).
 
 @item long
-Fixed point format with 15 significant figures in a field that is a maximum of
-20 characters wide.
+Fixed point format with 16 significant figures.
 
 As with the @samp{short} format, Octave will switch to an exponential @samp{e}
 format if it is unable to format a matrix properly using the current format.
 
 @item  short e
 @itemx long e
 Exponential format.  The number to be represented is split between a mantissa
 and an exponent (power of 10).  The mantissa has 5 significant digits in the
-short format and 15 digits in the long format.  For example, with the
-@samp{short e} format, @code{pi} is displayed as @code{3.1416e+00}.
+short format.  In the long format, double values are displayed with 16
+significant digits and single values are displayed with 8.  For example,
+with the @samp{short e} format, @code{pi} is displayed as @code{3.1416e+00}.
 
 @item  short E
 @itemx long E
 Identical to @samp{short e} or @samp{long e} but displays an uppercase @samp{E}
 to indicate the exponent.  For example, with the @samp{long E} format,
-@code{pi} is displayed as @code{3.14159265358979E+00}.
+@code{pi} is displayed as @code{3.141592653589793E+00}.
 
 @item  short g
 @itemx long g
 Optimally choose between fixed point and exponential format based on the
 magnitude of the number.  For example, with the @samp{short g} format,
 @code{pi .^ [2; 4; 8; 16; 32]} is displayed as
 
 @example
@@ -3998,17 +4067,17 @@ ans =
   8.1058e+15
 @end group
 @end example
 
 @item  short eng
 @itemx long eng
 Identical to @samp{short e} or @samp{long e} but displays the value using an
 engineering format, where the exponent is divisible by 3.  For example, with
-the @samp{short eng} format, @code{10 * pi} is displayed as @code{31.4159e+00}.
+the @samp{short eng} format, @code{10 * pi} is displayed as @code{31.416e+00}.
 
 @item  long G
 @itemx short G
 Identical to @samp{short g} or @samp{long g} but displays an uppercase @samp{E}
 to indicate the exponent.
 
 @item  free
 @itemx none
@@ -4099,17 +4168,17 @@ more compact output with more data per p
 @item loose
 Insert blank lines above and below column number labels and between matrices to
 produce a more readable output with less data per page.  (default).
 @end table
 
 If called with one or two output arguments, and no inputs, return the current
 format and format spacing.
 
-@seealso{fixed_point_format, output_max_field_width, output_precision, split_long_rows, print_empty_dimensions, rats}
+@seealso{fixed_point_format, output_precision, split_long_rows, print_empty_dimensions, rats}
 @end deftypefn */)
 {
   octave_value_list retval (std::min (nargout, 2));
 
   if (nargout == 0)
     {
       int argc = args.length () + 1;
 
@@ -4130,17 +4199,19 @@ format and format spacing.
 
 /*
 %!test
 %! [old_fmt, old_spacing] = format ();
 %! unwind_protect
 %!   ## Test one of the formats
 %!   format long;
 %!   str = disp (pi);
-%!   assert (str, " 3.14159265358979\n");
+%!   assert (str, " 3.141592653589793\n");
+%!   str = disp (single (pi));
+%!   assert (str, " 3.1415927\n");
 %!   new_fmt = format ();
 %!   assert (new_fmt, "long");
 %!   ## Test resetting format
 %!   format compact;
 %!   [~, new_spacing] = format ();
 %!   assert (new_spacing, "compact");
 %!   format;
 %!   [new_fmt, new_spacing] = format ();
@@ -4182,17 +4253,17 @@ ans =
 @noindent
 Notice that the first value appears to be 0 when it is actually 1.  Because
 of the possibility for confusion you should be careful about enabling
 @code{fixed_point_format}.
 
 When called from inside a function with the @qcode{"local"} option, the
 variable is changed locally for the function and any subroutines it calls.
 The original variable value is restored when exiting the function.
-@seealso{format, output_max_field_width, output_precision}
+@seealso{format, output_precision}
 @end deftypefn */)
 {
   return SET_INTERNAL_VARIABLE (fixed_point_format);
 }
 
 DEFUN (print_empty_dimensions, args, nargout,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {@var{val} =} print_empty_dimensions ()
diff --git a/libinterp/corefcn/pr-output.h b/libinterp/corefcn/pr-output.h
--- a/libinterp/corefcn/pr-output.h
+++ b/libinterp/corefcn/pr-output.h
@@ -51,20 +51,16 @@ class boolNDArray;
 class charMatrix;
 class charNDArray;
 class PermMatrix;
 class Cell;
 class octave_value;
 
 template <typename T> class intNDArray;
 
-template <typename T>
-extern float_display_format
-make_format (T val, int& fw);
-
 extern float_display_format
 make_format (const Matrix& m, int& fw, double& scale);
 
 extern float_display_format
 make_format (const FloatMatrix& m, int& fw, float& scale);
 
 template <typename T>
 extern float_display_format
@@ -235,22 +231,22 @@ octave_print_internal (std::ostream& os,
 }
 
 extern OCTINTERP_API void
 octave_print_internal (std::ostream& os, const Matrix& m,
                        bool pr_as_read_syntax = false,
                        int extra_indent = 0);
 
 extern OCTINTERP_API void
-octave_print_internal (std::ostream& os, const DiagMatrix& m,
+octave_print_internal (std::ostream& os, const FloatMatrix& m,
                        bool pr_as_read_syntax = false,
                        int extra_indent = 0);
 
 extern OCTINTERP_API void
-octave_print_internal (std::ostream& os, const FloatMatrix& m,
+octave_print_internal (std::ostream& os, const DiagMatrix& m,
                        bool pr_as_read_syntax = false,
                        int extra_indent = 0);
 
 extern OCTINTERP_API void
 octave_print_internal (std::ostream& os, const FloatDiagMatrix& m,
                        bool pr_as_read_syntax = false,
                        int extra_indent = 0);
 
diff --git a/liboctave/array/fCDiagMatrix.h b/liboctave/array/fCDiagMatrix.h
--- a/liboctave/array/fCDiagMatrix.h
+++ b/liboctave/array/fCDiagMatrix.h
@@ -34,16 +34,20 @@ along with Octave; see the file COPYING.
 #include "mx-defs.h"
 
 class
 OCTAVE_API
 FloatComplexDiagMatrix : public MDiagArray2<FloatComplex>
 {
 public:
 
+  typedef float real_elt_type;
+  typedef FloatComplex complex_elt_type;
+  typedef FloatComplex element_type;
+
   FloatComplexDiagMatrix (void) : MDiagArray2<FloatComplex> () { }
 
   FloatComplexDiagMatrix (octave_idx_type r,
                           octave_idx_type c)
     : MDiagArray2<FloatComplex> (r, c) { }
 
   FloatComplexDiagMatrix (octave_idx_type r, octave_idx_type c,
                           const FloatComplex& val)
