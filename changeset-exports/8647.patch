# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1233347069 -3600
#      Fri Jan 30 21:24:29 2009 +0100
# Node ID 06f5dd901f301c7f87127004846d410046f26623
# Parent  e01c6355304f5ca049cc3c05dc9d1a597c3c9910
implement registering of optimization options

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,16 @@
+2009-01-30  Jaroslav Hajek  <highegg@gmail.com>
+
+	* optimization/__all_opts__.m: New source.
+	* optimization/optimset.m: Implement checking for registered options.
+	* optimization/optimget.m: Ditto.
+	* optimization/fsolve.m: Fix misspelled option.
+	* optimization/PKG_ADD: New startup file.
+
 2009-01-30  Kai Habel  <kai.habel@gmx.de>
 
 	* plot/__go_draw_axes__.m: Add support for transparent surfaces.
 	* plot/__gnuplot_has_feature__.m: Add feature 'transparent_surface',
 	Require gnuplot 4.3 for transparent patches and surfaces.
 
 2009-01-30  Benjamin Lindner  <lindnerben@gmx.net>
 
diff --git a/scripts/optimization/PKG_ADD b/scripts/optimization/PKG_ADD
new file mode 100644
--- /dev/null
+++ b/scripts/optimization/PKG_ADD
@@ -0,0 +1,2 @@
+__all_opts__ ("fzero", "fsolve", "lsqnonneg");
+
diff --git a/scripts/optimization/__all_opts__.m b/scripts/optimization/__all_opts__.m
new file mode 100644
--- /dev/null
+++ b/scripts/optimization/__all_opts__.m
@@ -0,0 +1,58 @@
+## Copyright (C) 2009 VZLU Prague
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 3 of the License, or (at
+## your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+## General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
+## <http://www.gnu.org/licenses/>.
+
+## -*- texinfo -*-
+## @deftypefn {Function File} {} __all_opts__ ()
+## internal function. Queries all options from all known optimization
+## functions and returns a list of possible values.
+## @end deftypefn
+
+function names = __all_opts__ (varargin)
+  
+  persistent saved_names = {};
+
+  ## guard against recursive calls.
+  persistent recursive = false;
+
+  if (nargin == 0)
+    names = saved_names;
+  else
+    ## query all options from all known functions. These will call optimset,
+    ## which will in turn call us, but we won't answer.
+    names = saved_names;
+    for i = 1:nargin
+      try
+        opts = optimset (varargin{i});
+        fn = fieldnames (opts).';
+        names = [names, fn];
+      catch
+        # throw the error as a warning.
+        warning (lasterr ());
+      end_try_catch
+    endfor
+    names = unique (names);
+    lnames = unique (tolower (names));
+    if (length (lnames) < length (names))
+      ## This is bad.
+      error ("__all_opts__: duplicate options with inconsistent case.");
+    endif
+    saved_names = names;
+  endif
+
+endfunction
+
diff --git a/scripts/optimization/fsolve.m b/scripts/optimization/fsolve.m
--- a/scripts/optimization/fsolve.m
+++ b/scripts/optimization/fsolve.m
@@ -72,17 +72,17 @@
 ## @seealso{fzero, optimset}
 ## @end deftypefn
 
 function [x, fvec, info, output, fjac] = fsolve (fcn, x0, options = struct ())
 
   ## Get default options if requested.
   if (nargin == 1 && ischar (fcn) && strcmp (fcn, 'defaults'))
     x = optimset ("MaxIter", 400, "MaxFunEvals", Inf, \
-    "Jacobian", "off", "TolX", 1.5e-8, "TolF", 1.5e-8,
+    "Jacobian", "off", "TolX", 1.5e-8, "TolFun", 1.5e-8,
     "OutputFcn", [], "Updating", "on", "FunValCheck", "off");
     return;
   endif
 
   if (nargin < 2 || nargin > 3 || ! ismatrix (x0))
     print_usage ();
   endif    
 
diff --git a/scripts/optimization/optimget.m b/scripts/optimization/optimget.m
--- a/scripts/optimization/optimget.m
+++ b/scripts/optimization/optimget.m
@@ -1,9 +1,10 @@
 ## Copyright (C) 2008 Jaroslav Hajek <highegg@gmail.com>
+## Copyright (C) 2009 VZLU Prague
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 3 of the License, or (at
 ## your option) any later version.
 ##
@@ -22,16 +23,28 @@
 ## Used to retrieve a specific option from a structure created by 
 ## @code{optimset}. If @var{parname} is not a field of the @var{options}
 ## structure, return @var{default} if supplied, otherwise return an 
 ## empty matrix.
 ## @end deftypefn
 
 function retval = optimget (options, parname, default)
 
+  if (nargin < 2 || nargin > 4 || ! isstruct (options) || ! ischar (parname))
+    print_usage ();
+  endif
+
+  opts = __all_opts__ ();
+  idx = lookup (opts, parname, "i");
+
+  if (idx > 0 && strcmpi (parname, opts{idx}))
+    parname = opts{idx};
+  else
+    warning ("unrecognized option: %s", parname)
+  endif
   if (isfield (options, parname))
     retval = options.(parname);
   elseif (nargin > 2)
     retval = default;
   else
     retval = [];
   endif
 
diff --git a/scripts/optimization/optimset.m b/scripts/optimization/optimset.m
--- a/scripts/optimization/optimset.m
+++ b/scripts/optimization/optimset.m
@@ -1,9 +1,10 @@
 ## Copyright (C) 2007 John W. Eaton
+## Copyright (C) 2009 VZLU Prague
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 3 of the License, or (at
 ## your option) any later version.
 ##
@@ -24,31 +25,24 @@
 ## Create options struct for optimization functions.
 ## @end deftypefn
 
 function retval = optimset (varargin)
 
   nargs = nargin ();
 
   ## Add more as needed.
-  persistent opts = {
-    "Display", "\"off\"|\"iter\"|{\"final\"}|\"notify\"";
-    "FunValCheck", "{\"off\"}|\"on\"";
-    "MaxFunEvals", "positive integer";
-    "MaxIter", "positive integer";
-    "OutputFun", "function|{[]}";
-    "TolFun", "positive scalar";
-    "TolX", "positive scalar"
-  };
+  opts = __all_opts__ ();
 
   if (nargs == 0)
     if (nargout == 0)
       ## Display possibilities.
-      tmp = opts';
-      disp (struct (tmp{:}));
+      puts ("\nAll possible optimization options:\n\n");
+      printf ("  %s\n", opts{:});
+      puts ("\n");
     else
       ## Return empty structure.
       ## We're incompatible with Matlab at this point.
       retval = struct ();
     endif
   elseif (nargs == 1 && ischar (varargin{1}))
     ## Return defaults for named function.
     fcn = varargin{1};
@@ -58,28 +52,40 @@ function retval = optimset (varargin)
       error ("no defaults for function `%s'", fcn);
     end_try_catch
   elseif (nargs == 2 && isstruct (varargin{1}) && isstruct (varargin{2}))
     ## Set slots in old from nonempties in new.  Should we be checking
     ## to ensure that the field names are expected?
     old = varargin{1};
     new = varargin{2};
     fnames = fieldnames (old);
+    ## skip validation if we're in the internal query
+    validation = ! isempty (opts);
     for [val, key] = new
-      mask = strcmpi (fnames, key);
-      if (any (mask))
-	key = fnames (mask);
+      if (validation)
+        ## Case insensitive lookup in all options.
+        i = lookup (opts, key, "i");
+        ## Validate option.
+        if (i > 0 && strcmpi (opts{i}, key))
+          ## Use correct case.
+          key = opts{i};
+        else
+          warning ("unrecognized option: %s", key);
+        endif
       endif
       old.(key) = val;
     endfor
     retval = old;
   elseif (rem (nargs, 2) && isstruct (varargin{1}))
     ## Set values in old from name/value pairs.
     retval = optimset (varargin{1}, struct (varargin{2:end}));
   elseif (rem (nargs, 2) == 0)
     ## Create struct.  Default values are replaced by those specified by
     ## name/value pairs.
     retval = optimset (struct (), struct (varargin{:}));
   else
     print_usage ();
   endif
 
 endfunction
+
+%!assert (optimget (optimset ('tolx', 1e-2), 'tOLx'), 1e-2)
+%!assert (isfield (optimset ('tolFun', 1e-3), 'TolFun'))
