# HG changeset patch
# User Rik <rik@octave.org>
# Date 1439177744 25200
#      Sun Aug 09 20:35:44 2015 -0700
# Node ID 859423f351a36ac99266197a6f226c003ae3a2d1
# Parent  a76e20f2f156ebd4ddfc60416b78e835ab289f54
# Parent  8fcbb55745efb79383fb111af06a6644d4b477b4
maint: Periodic merge of stable to default.

diff --git a/libinterp/corefcn/bitfcns.cc b/libinterp/corefcn/bitfcns.cc
--- a/libinterp/corefcn/bitfcns.cc
+++ b/libinterp/corefcn/bitfcns.cc
@@ -682,17 +682,17 @@ DEFUN (bitmax, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} bitmax ()\n\
 @deftypefnx {Built-in Function} {} bitmax (\"double\")\n\
 @deftypefnx {Built-in Function} {} bitmax (\"single\")\n\
 Return the largest integer that can be represented within a floating point\n\
 value.\n\
 \n\
 The default class is @qcode{\"double\"}, but @qcode{\"single\"} is a\n\
-valid option.  On IEEE-754 compatible systems, @code{bitmax} is\n\
+valid option.  On IEEE 754 compatible systems, @code{bitmax} is\n\
 @w{@math{2^{53} - 1}} for @qcode{\"double\"} and @w{@math{2^{24} -1}} for\n\
 @qcode{\"single\"}.\n\
 @seealso{flintmax, intmax, realmax, realmin}\n\
 @end deftypefn")
 {
   octave_value retval;
   std::string cname = "double";
   int nargin = args.length ();
@@ -719,18 +719,18 @@ DEFUN (flintmax, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} flintmax ()\n\
 @deftypefnx {Built-in Function} {} flintmax (\"double\")\n\
 @deftypefnx {Built-in Function} {} flintmax (\"single\")\n\
 Return the largest integer that can be represented consecutively in a\n\
 floating point value.\n\
 \n\
 The default class is @qcode{\"double\"}, but @qcode{\"single\"} is a valid\n\
-option.  On IEEE-754 compatible systems, @code{flintmax} is @w{@math{2^53}}\n\
-for @qcode{\"double\"} and @w{@math{2^24}} for @qcode{\"single\"}.\n\
+option.  On IEEE 754 compatible systems, @code{flintmax} is @w{@math{2^{53}}}\n\
+for @qcode{\"double\"} and @w{@math{2^{24}}} for @qcode{\"single\"}.\n\
 @seealso{bitmax, intmax, realmax, realmin}\n\
 @end deftypefn")
 {
   octave_value retval;
   std::string cname = "double";
   int nargin = args.length ();
 
   if (nargin == 1 && args(0).is_string ())
diff --git a/libinterp/corefcn/file-io.cc b/libinterp/corefcn/file-io.cc
--- a/libinterp/corefcn/file-io.cc
+++ b/libinterp/corefcn/file-io.cc
@@ -663,29 +663,29 @@ specified is binary mode.\n\
 \n\
 Additionally, you may append a @qcode{\"z\"} to the mode string to open a\n\
 gzipped file for reading or writing.  For this to be successful, you\n\
 must also open the file in binary mode.\n\
 \n\
 The parameter @var{arch} is a string specifying the default data format\n\
 for the file.  Valid values for @var{arch} are:\n\
 \n\
-@table @samp\n\
-@item native (default)\n\
+@table @asis\n\
+@item @qcode{\"native\"} or @qcode{\"n\"} (default)\n\
 The format of the current machine.\n\
 \n\
-@item ieee-be\n\
+@item @qcode{\"ieee-be\"} or @qcode{\"b\"}\n\
 IEEE big endian format.\n\
 \n\
-@item ieee-le\n\
+@item @qcode{\"ieee-le\"} or @qcode{\"l\"}\n\
 IEEE little endian format.\n\
 @end table\n\
 \n\
 @noindent\n\
-however, conversions are currently only supported for @samp{native}\n\
+However, conversions are currently only supported for @samp{native},\n\
 @samp{ieee-be}, and @samp{ieee-le} formats.\n\
 \n\
 When opening a new file that does not yet exist, permissions will be set to\n\
 @code{0666 - @var{umask}}.\n\
 @seealso{fclose, fgets, fgetl, fscanf, fread, fputs, fdisp, fprintf, fwrite, fskipl, fseek, frewind, ftell, feof, ferror, fclear, fflush, freport, umask}\n\
 @end deftypefn")
 {
   octave_value_list retval;
@@ -1593,23 +1593,23 @@ fread (f, 10, \"3*single=>single\", 8)\n
 @noindent\n\
 will omit the final 8-byte skip because the last read will not be\n\
 a complete block of 3 values.\n\
 \n\
 The optional argument @var{arch} is a string specifying the data format\n\
 for the file.  Valid values are\n\
 \n\
 @table @asis\n\
-@item @qcode{\"native\"}\n\
+@item @qcode{\"native\"} or @qcode{\"n\"}\n\
 The format of the current machine.\n\
 \n\
-@item @qcode{\"ieee-be\"}\n\
+@item @qcode{\"ieee-be\"} or @qcode{\"b\"}\n\
 IEEE big endian.\n\
 \n\
-@item @qcode{\"ieee-le\"}\n\
+@item @qcode{\"ieee-le\"} or @qcode{\"l\"}\n\
 IEEE little endian.\n\
 @end table\n\
 \n\
 The output argument @var{val} contains the data read from the file.\n\
 The optional return value @var{count} contains the number of elements read.\n\
 @seealso{fwrite, fgets, fgetl, fscanf, fopen}\n\
 @end deftypefn")
 {
diff --git a/libinterp/octave-value/ov-fcn-handle.cc b/libinterp/octave-value/ov-fcn-handle.cc
--- a/libinterp/octave-value/ov-fcn-handle.cc
+++ b/libinterp/octave-value/ov-fcn-handle.cc
@@ -1849,16 +1849,20 @@ function handle @var{fcn_handle}.\n\
 DEFUN (str2func, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} str2func (@var{fcn_name})\n\
 @deftypefnx {Built-in Function} {} str2func (@var{fcn_name}, \"global\")\n\
 Return a function handle constructed from the string @var{fcn_name}.\n\
 \n\
 If the optional @qcode{\"global\"} argument is passed, locally visible\n\
 functions are ignored in the lookup.\n\
+\n\
+Note: @code{str2func} does not currently accept strings which define\n\
+anonymous functions (those which begin with @samp{a}).\n\
+Use @code{eval (@var{str})} as a replacement.\n\
 @seealso{func2str, inline}\n\
 @end deftypefn")
 {
   octave_value retval;
   int nargin = args.length ();
 
   if (nargin == 1 || nargin == 2)
     {
diff --git a/scripts/statistics/distributions/unidpdf.m b/scripts/statistics/distributions/unidpdf.m
--- a/scripts/statistics/distributions/unidpdf.m
+++ b/scripts/statistics/distributions/unidpdf.m
@@ -20,17 +20,17 @@
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} unidpdf (@var{x}, @var{n})
 ## For each element of @var{x}, compute the probability density function (PDF)
 ## at @var{x} of a discrete uniform distribution which assumes
 ## the integer values 1--@var{n} with equal probability.
 ##
 ## Warning: The underlying implementation uses the double class and will only
 ## be accurate for @var{n} @leq{} @code{bitmax} (@w{@math{2^{53} - 1}} on
-## IEEE-754 compatible systems).
+## IEEE 754 compatible systems).
 ## @end deftypefn
 
 function pdf = unidpdf (x, n)
 
   if (nargin != 2)
     print_usage ();
   endif
 
