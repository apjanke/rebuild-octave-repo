# HG changeset patch
# User jwe
# Date 1017882353 0
#      Thu Apr 04 01:05:53 2002 +0000
# Node ID 70ebd3d672a1bcc8f3942de8d1c38102fef1db2d
# Parent  7da18459c08bc8b49094f6caa74c47ba5f4e7ee2
[project @ 2002-04-04 01:05:53 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,15 @@
+2002-04-03  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* aclocal.m4: Replace AC_LANG_SAVE, AC_LANG_C, AC_LANG_CPLUSPLUS,
+	and AC_LANG_RESTORE with AC_LANG_PUSH and AC_LANG_POP.
+	Use AS_MESSAGE_LOG_FD instead of AC_FD_CC.
+	* configure.in: Delete second arg in AC_CHECK_SIZEOF calls.
+
 2002-04-03  Steven G. Johnson <stevenj@alum.mit.edu>
 
 	* configure.in: Correct usage of AC_ARG_WITH for --with-fftw.
 
 	* configure.in: Update for autoconf 2.5x.
 	Minor syntax changes to new recommended syntaxes and macros.
 	Apply changes from autoupdate plus eliminate some warning
 	messages, deprecated uses of changequote, etc.
diff --git a/aclocal.m4 b/aclocal.m4
--- a/aclocal.m4
+++ b/aclocal.m4
@@ -84,25 +84,24 @@ if test $octave_cv_struct_gr_passwd = ye
 fi
 ])
 dnl
 dnl See if the standard string class has npos as a member.
 dnl
 AC_DEFUN(OCTAVE_STRING_NPOS,
 [AC_CACHE_CHECK([whether including <string> defines NPOS],
 octave_cv_string_npos,
-[AC_LANG_SAVE
-AC_LANG_CPLUSPLUS
+[AC_LANG_PUSH(C++)
 AC_TRY_COMPILE([#include <string>],
 [size_t foo = NPOS],
 octave_cv_string_npos=yes, octave_cv_string_npos=no)])
 if test $octave_cv_string_npos = no; then
   AC_DEFINE(NPOS, [std::string::npos], [Define (to string::npos) if <string> doesn't])
 fi
-AC_LANG_RESTORE
+AC_LANG_POP(C++)
 ])
 dnl
 dnl The following test is from Karl Berry's Kpathseach library.  I'm
 dnl including it here in case we someday want to make the use of
 dnl kpathsea optional.
 dnl
 dnl Some BSD putenv's, e.g., FreeBSD, do malloc/free's on the environment.
 dnl This test program is due to Mike Hibler <mike@cs.utah.edu>.
@@ -297,18 +296,17 @@ dnl
 dnl Check to see if C++ compiler needs the new friend template declaration 
 dnl syntax. 
 dnl
 dnl OCTAVE_CXX_NEW_FRIEND_TEMPLATE_DECL
 AC_DEFUN(OCTAVE_CXX_NEW_FRIEND_TEMPLATE_DECL, [
   AC_REQUIRE([AC_PROG_CXX])
   AC_MSG_CHECKING([for C++ support for new friend template declaration])
   AC_CACHE_VAL(octave_cv_cxx_new_friend_template_decl, [
-    AC_LANG_SAVE
-    AC_LANG_CPLUSPLUS
+    AC_LANG_PUSH(C++)
     rm -f conftest.h
     cat > conftest.h <<EOB
        struct A {
 	 friend int operator== (const A&, const A&);
 	 A (int) { }
        };
 
        template <class T> int
@@ -319,17 +317,17 @@ AC_DEFUN(OCTAVE_CXX_NEW_FRIEND_TEMPLATE_
 EOB
     AC_TRY_LINK([#include "conftest.h"], [
         A a (1);
         return a == A(1);
       ], 
       octave_cv_cxx_new_friend_template_decl=no,
       octave_cv_cxx_new_friend_template_decl=yes
     )
-    AC_LANG_RESTORE
+    AC_LANG_POP(C++)
   ])
   AC_MSG_RESULT($octave_cv_cxx_new_friend_template_decl)
   if test $octave_cv_cxx_new_friend_template_decl = yes; then
     AC_DEFINE(CXX_NEW_FRIEND_TEMPLATE_DECL,1,[Define if your compiler supports `<>' stuff for template friends.])
   fi
 ])
 dnl
 dnl Check to see if C compiler handles FLAG command line option.  If
@@ -337,25 +335,24 @@ dnl two arguments are specified, execute
 dnl commands.  Otherwise, add FLAG to CFLAGS if the compiler accepts
 dnl the flag.
 dnl
 dnl OCTAVE_CC_FLAG
 AC_DEFUN(OCTAVE_CC_FLAG, [
   ac_safe=`echo "$1" | sed 'y%./+-%__p_%'`
   AC_MSG_CHECKING(whether ${CC-cc} accepts $1)
   AC_CACHE_VAL(octave_cv_cc_flag_$ac_safe, [
-    AC_LANG_SAVE
-    AC_LANG_C
+    AC_LANG_PUSH(C)
     XCFLAGS="$CFLAGS"
     CFLAGS="$CFLAGS $1"
     AC_TRY_LINK([], [],
       eval "octave_cv_cc_flag_$ac_safe=yes",
       eval "octave_cv_cc_flag_$ac_safe=no")
     CFLAGS="$XCFLAGS"
-    AC_LANG_RESTORE
+    AC_LANG_POP(C)
   ])
   if eval "test \"`echo '$octave_cv_cc_flag_'$ac_safe`\" = yes"; then
     AC_MSG_RESULT(yes)
     ifelse([$2], , [
       CFLAGS="$CFLAGS $1"
       AC_MSG_RESULT([adding $1 to CFLAGS])], [$2])
   else
     AC_MSG_RESULT(no)
@@ -368,25 +365,24 @@ dnl two arguments are specified, execute
 dnl commands.  Otherwise, add FLAG to CXXFLAGS if the compiler accepts
 dnl the flag.
 dnl
 dnl OCTAVE_CXX_FLAG
 AC_DEFUN(OCTAVE_CXX_FLAG, [
   ac_safe=`echo "$1" | sed 'y%./+-%__p_%'`
   AC_MSG_CHECKING(whether ${CXX-g++} accepts $1)
   AC_CACHE_VAL(octave_cv_cxx_flag_$ac_safe, [
-    AC_LANG_SAVE
-    AC_LANG_CPLUSPLUS
+    AC_LANG_PUSH(C++)
     XCXXFLAGS="$CXXFLAGS"
     CXXFLAGS="$CXXFLAGS $1"
     AC_TRY_LINK([], [],
       eval "octave_cv_cxx_flag_$ac_safe=yes",
       eval "octave_cv_cxx_flag_$ac_safe=no")
     CXXFLAGS="$XCXXFLAGS"
-    AC_LANG_RESTORE
+    AC_LANG_POP(C++)
   ])
   if eval "test \"`echo '$octave_cv_cxx_flag_'$ac_safe`\" = yes"; then
     AC_MSG_RESULT(yes)
     ifelse([$2], , [
       CXXFLAGS="$CXXFLAGS $1"
       AC_MSG_RESULT([adding $1 to CXXFLAGS])], [$2])
   else
     AC_MSG_RESULT(no)
@@ -563,47 +559,45 @@ fi
 dnl
 dnl See if the C++ compiler prepends an underscore to external names.
 dnl
 dnl OCTAVE_CXX_PREPENDS_UNDERSCORE
 AC_DEFUN(OCTAVE_CXX_PREPENDS_UNDERSCORE,
 [AC_MSG_CHECKING([whether ${CXX-g++} prepends an underscore to external names])
   AC_CACHE_VAL(octave_cv_cxx_prepends_underscore,
     [octave_cv_cxx_prepends_underscore=no
-    AC_LANG_SAVE
-    AC_LANG_CPLUSPLUS
+    AC_LANG_PUSH(C++)
     cat > conftest.$ac_ext <<EOF
 bool FSmy_dld_fcn (void) { return false; }
 EOF
     if AC_TRY_EVAL(ac_compile); then
       if test "`${NM-nm} conftest.o | grep _FSmy_dld_fcn`" != ""; then
         octave_cv_cxx_prepends_underscore=yes
       fi
     else
-      echo "configure: failed program was:" >&AC_FD_CC
-      cat conftest.$ac_ext >&AC_FD_CC
+      echo "configure: failed program was:" >&AS_MESSAGE_LOG_FD
+      cat conftest.$ac_ext >&AS_MESSAGE_LOG_FD
     fi
-    AC_LANG_RESTORE
+    AC_LANG_POP(C++)
   ])
   AC_MSG_RESULT($octave_cv_cxx_prepends_underscore)
   if test $octave_cv_cxx_prepends_underscore = yes; then
     AC_DEFINE(CXX_PREPENDS_UNDERSCORE, 1, [Define if your compiler prepends underscores to external names.])
   fi
 ])
 dnl
 dnl See if the C++ library is ISO compliant.
 dnl FIXME: This is obviously very simplistic, and trivially fooled.
 dnl
 dnl OCTAVE_CXX_ISO_COMPLIANT_LIBRARY
 AC_DEFUN(OCTAVE_CXX_ISO_COMPLIANT_LIBRARY, [
   AC_REQUIRE([AC_PROG_CXX])
   AC_MSG_CHECKING([if C++ library is ISO compliant])
   AC_CACHE_VAL(octave_cv_cxx_iso_compliant_library, [
-    AC_LANG_SAVE
-    AC_LANG_CPLUSPLUS
+    AC_LANG_PUSH(C++)
     rm -f conftest.h
     for inc in algorithm bitset cassert cctype cerrno cfloat ciso646 \
 	climits clocale cmath complex csetjmp csignal cstdarg cstddef \
 	cstdio cstdlib cstring ctime cwchar cwctype deque exception \
 	fstream functional iomanip ios iosfwd iostream istream iterator \
 	limits list locale map memory new numeric ostream queue set \
 	sstream stack stdexcept streambuf string strstream typeinfo \
 	utility valarray vector; do
@@ -613,17 +607,17 @@ AC_DEFUN(OCTAVE_CXX_ISO_COMPLIANT_LIBRAR
         std::bitset<50> flags;
         flags.set();
         int digits = std::numeric_limits<unsigned long>::digits;
         digits = 0;
       ],
       octave_cv_cxx_iso_compliant_library=yes,
       octave_cv_cxx_iso_compliant_library=no
     )
-    AC_LANG_RESTORE
+    AC_LANG_POP(C++)
   ])
   AC_MSG_RESULT($octave_cv_cxx_iso_compliant_library)
   if test $octave_cv_cxx_iso_compliant_library = yes; then
     AC_DEFINE(CXX_ISO_COMPLIANT_LIBRARY, 1, [Define if your C++ runtime library is ISO compliant.])
   fi
 ])
 dnl
 dnl Allow the user disable support for command line editing using GNU
@@ -656,33 +650,32 @@ dnl (GCC versions <= 2.95.x) dnl or gnu_
 dnl Set to "unknown" is when we don't know enough about the ABI, which 
 dnl will happen when using an unsupported C++ compiler. 
 dnl
 dnl OCTAVE_CXX_ABI
 AC_DEFUN(OCTAVE_CXX_ABI,
 [AC_MSG_CHECKING([C++ ABI version used by ${CXX}])
   AC_CACHE_VAL(octave_cv_cxx_abi,
     [octave_cv_cxx_abi='unknown'
-    AC_LANG_SAVE
-    AC_LANG_CPLUSPLUS
+    AC_LANG_PUSH(C++)
     cat > conftest.$ac_ext <<EOF
 bool FSmy_dld_fcn (void) { return false; }
 EOF
     if AC_TRY_EVAL(ac_compile); then
       if test "`${NM-nm} conftest.o | grep FSmy_dld_fcn__Fv`" != ""; then
         octave_cv_cxx_abi='gnu_v2'
       fi
       if test "`${NM-nm} conftest.o | grep _Z12FSmy_dld_fcnv`" != ""; then
         octave_cv_cxx_abi='gnu_v3'
       fi
       if test "`${NM-nm} conftest.o | grep __1cMFSmy_dld_fcn6F_b_`" != ""; then
         octave_cv_cxx_abi='sun_v5'
       fi
     else
-      echo "configure: failed program was:" >&AC_FD_CC
-      cat conftest.$ac_ext >&AC_FD_CC
+      echo "configure: failed program was:" >&AS_MESSAGE_LOG_FD
+      cat conftest.$ac_ext >&AS_MESSAGE_LOG_FD
     fi
-    AC_LANG_RESTORE
+    AC_LANG_POP(C++)
   ])
   AC_MSG_RESULT($octave_cv_cxx_abi)
   AC_DEFINE_UNQUOTED(CXX_ABI, $octave_cv_cxx_abi, [Define to the C++ ABI your compiler uses.])
 ])
 
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -17,17 +17,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### for more details.
 ### 
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA. 
 
 AC_INIT
-AC_REVISION($Revision: 1.353 $)
+AC_REVISION($Revision: 1.354 $)
 AC_PREREQ(2.52)
 AC_CONFIG_SRCDIR([src/octave.cc])
 AC_CONFIG_HEADER(config.h)
 
 AC_DEFINE(OCTAVE_SOURCE, 1, [Define if this is Octave.])
   
 OCTAVE_HOST_TYPE
 
@@ -757,20 +757,20 @@ AC_SUBST(OCTAVE_LITE)
 ### functions like gethostname and gettimeofday is in libsocket.
 
 AC_CHECK_FUNCS(gethostname, [], [AC_CHECK_LIB(socket, gethostname)])
 AC_CHECK_FUNCS(getpwnam, [], [AC_CHECK_LIB(sun, getpwnam)])
 
 ### How big are ints and how are they oriented?  These could probably
 ### be eliminated in favor of run-time checks.
 
-AC_CHECK_SIZEOF(short, 2)
-AC_CHECK_SIZEOF(int, 4)
-AC_CHECK_SIZEOF(long, 4)
-AC_CHECK_SIZEOF(long long, 8)
+AC_CHECK_SIZEOF(short)
+AC_CHECK_SIZEOF(int)
+AC_CHECK_SIZEOF(long)
+AC_CHECK_SIZEOF(long long)
 
 ### Does the C compiler handle alloca() and const correctly?
 
 AC_FUNC_ALLOCA([])
 AC_C_CONST
 
 ### See if we should define NPOS.
 
