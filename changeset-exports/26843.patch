# HG changeset patch
# User Markus MÃ¼tzel <markus.muetzel@gmx.de>
# Date 1551821040 -3600
#      Tue Mar 05 22:24:00 2019 +0100
# Node ID f07542e3a9b909d04e6dcaa4cbe2f85efb9e431f
# Parent  05d492bb8ab8edccf23798ae68ba6e80984a7000
Fix "exist" for drive letters and UNC shares on Windows (bug #55824).

* sysdep.[h,cc] (drive_or_unc_share): New function.

* variables.cc (symbol_exist): Use this function.

diff --git a/libinterp/corefcn/sysdep.cc b/libinterp/corefcn/sysdep.cc
--- a/libinterp/corefcn/sysdep.cc
+++ b/libinterp/corefcn/sysdep.cc
@@ -315,16 +315,67 @@ namespace octave
 
     return (fs_file1 && fs_file2
             && fs_file1.ino () == fs_file2.ino ()
             && fs_file1.dev () == fs_file2.dev ());
 
 #endif
   }
 
+  // Return TRUE if NAME refers to an existing drive letter or UNC share
+  
+  bool drive_or_unc_share (const std::string& name)
+  {
+#if defined (OCTAVE_USE_WINDOWS_API)
+    size_t len = name.length ();
+    bool candidate = false;
+    if (len > 1 && isalpha(name[0]) && name[1]==':' 
+         && (len == 2 || name[2] == '\\'))
+      candidate = true;
+    if (len > 4 && name[0] == '\\' && name[1] == '\\')
+      {
+        // It starts with two slashes.  Find the next slash.
+        size_t next_slash = name.find ("\\", 3);
+        if (next_slash != -1 && len > next_slash+1)
+          {
+            // Check if it ends with the share
+            size_t last_slash = name.find ("\\", next_slash+1);
+            if (last_slash == -1 ||
+                (len > next_slash+2 && last_slash == len-1))
+              candidate = true;
+          }
+      }
+
+    if (candidate)
+      {
+        // Open a handle to the file.
+        std::wstring wname = octave::sys::u8_to_wstring (name);
+        HANDLE h =
+          CreateFileW (wname.c_str (), FILE_READ_ATTRIBUTES,
+                       FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE,
+                       nullptr, OPEN_EXISTING, FILE_FLAG_BACKUP_SEMANTICS,
+                       nullptr);
+        if (h != INVALID_HANDLE_VALUE)
+          {
+            CloseHandle (h);
+            return true;
+          }
+      }
+
+    return false;
+
+#else
+
+    octave_unused_parameter (name);
+
+    return false;
+
+#endif
+  }
+  
   void sysdep_init (void)
   {
     // Use a function from libgomp to force loading of OpenMP library.
     // Otherwise, a dynamically loaded library making use of OpenMP such
     // as GraphicsMagick will segfault on exit (bug #41699).
 #if defined (HAVE_OMP_GET_NUM_THREADS)
     omp_get_num_threads ();
 #endif
diff --git a/libinterp/corefcn/sysdep.h b/libinterp/corefcn/sysdep.h
--- a/libinterp/corefcn/sysdep.h
+++ b/libinterp/corefcn/sysdep.h
@@ -47,16 +47,18 @@ namespace octave
   extern OCTINTERP_API int pclose (FILE *f);
 
   extern OCTINTERP_API int kbhit (bool wait = true);
 
   extern OCTINTERP_API std::string get_P_tmpdir (void);
 
   extern OCTINTERP_API bool same_file_internal (const std::string&,
                                                 const std::string&);
+
+  extern OCTINTERP_API bool drive_or_unc_share (const std::string&);
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
 OCTAVE_DEPRECATED (5, "use 'octave::sysdep_init' instead")
 inline void
 sysdep_init (void)
 {
diff --git a/libinterp/corefcn/variables.cc b/libinterp/corefcn/variables.cc
--- a/libinterp/corefcn/variables.cc
+++ b/libinterp/corefcn/variables.cc
@@ -58,16 +58,17 @@ along with Octave; see the file COPYING.
 #include "ovl.h"
 #include "ov.h"
 #include "ov-class.h"
 #include "ov-usr-fcn.h"
 #include "pager.h"
 #include "parse.h"
 #include "syminfo.h"
 #include "symtab.h"
+#include "sysdep.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
 
 // Attributes of variables and functions.
 
 // Is this octave_value a valid function?
 
@@ -265,16 +266,20 @@ symbol_exist (octave::interpreter& inter
             }
         }
 
       file_name = octave::file_in_path (name, "");
 
       if (file_name.empty ())
         file_name = name;
 
+      // "stat" doesn't work on UNC shares and drive letters.
+      if ((search_any || search_file) && octave::drive_or_unc_share (file_name))
+        return 7;
+
       octave::sys::file_stat fs (file_name);
 
       if (fs)
         {
           if (search_any || search_file)
             {
               if (fs.is_dir ())
                 return 7;
