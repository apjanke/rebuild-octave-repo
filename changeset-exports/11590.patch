# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1295567019 18000
#      Thu Jan 20 18:43:39 2011 -0500
# Node ID 4ced6b90fffbd22dd47a085abe23e3ec0c546877
# Parent  b0084095098e8b9570d2420527de37a0c9e15778
style fixes for warning and error messages in source files

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -1456,17 +1456,17 @@ Array<T>::delete_elements (const Array<i
         }
       else if (k == len)
         {
           delete_elements (dim, ia(dim));
         }
       else
         {
           (*current_liboctave_error_handler)
-            ("A null assignment can only have one non-colon index.");
+            ("a null assignment can only have one non-colon index");
         }
     }
 
 }
 
 template <class T>
 Array<T>&
 Array<T>::insert (const Array<T>& a, octave_idx_type r, octave_idx_type c)
diff --git a/liboctave/Sparse.cc b/liboctave/Sparse.cc
--- a/liboctave/Sparse.cc
+++ b/liboctave/Sparse.cc
@@ -1257,17 +1257,17 @@ Sparse<T>::delete_elements (const idx_ve
           // again.
           Sparse<T> tmp = transpose ();
           tmp.delete_elements (idx_j, idx_i);
           *this = tmp.transpose ();
         }
     }
   else
     (*current_liboctave_error_handler)
-      ("A null assignment can only have one non-colon index.");
+      ("a null assignment can only have one non-colon index");
 }
 
 template <class T>
 void
 Sparse<T>::delete_elements (int dim, const idx_vector& idx)
 {
   if (dim == 0)
     delete_elements (idx, idx_vector::colon);
diff --git a/liboctave/base-lu.cc b/liboctave/base-lu.cc
--- a/liboctave/base-lu.cc
+++ b/liboctave/base-lu.cc
@@ -106,17 +106,17 @@ base_lu <lu_type> :: U (void) const
     return a_fact;
 }
 
 template <class lu_type>
 lu_type
 base_lu <lu_type> :: Y (void) const
 {
   if (! packed ())
-    (*current_liboctave_error_handler) ("lu: Y() not implemented for unpacked form.");
+    (*current_liboctave_error_handler) ("lu: Y() not implemented for unpacked form");
   return a_fact;
 }
 
 template <class lu_type>
 Array<octave_idx_type>
 base_lu <lu_type> :: getp (void) const
 {
   if (packed ())
diff --git a/liboctave/idx-vector.cc b/liboctave/idx-vector.cc
--- a/liboctave/idx-vector.cc
+++ b/liboctave/idx-vector.cc
@@ -40,43 +40,43 @@ along with Octave; see the file COPYING.
 #include "oct-locbuf.h"
 #include "lo-error.h"
 #include "lo-mappers.h"
 
 static void
 gripe_invalid_range (void)
 {
   (*current_liboctave_error_handler)
-    ("invalid range used as index.");
+    ("invalid range used as index");
 }
 
 static void
 gripe_index_out_of_range (void)
 {
   (*current_liboctave_error_handler)
-    ("internal error: idx_vector index out of range.");
+    ("internal error: idx_vector index out of range");
 }
 
 Array<octave_idx_type>
 idx_vector::idx_base_rep::as_array (void)
 {
   (*current_liboctave_error_handler)
-    ("internal error: as_array not allowed for this index class.");
+    ("internal error: as_array not allowed for this index class");
 
   return Array<octave_idx_type> ();
 }
 
 DEFINE_OCTAVE_ALLOCATOR(idx_vector::idx_colon_rep);
 
 idx_vector::idx_colon_rep::idx_colon_rep (char c)
 {
   if (c != ':')
     {
       (*current_liboctave_error_handler)
-        ("internal error: invalid character converted to idx_vector. Must be ':'.");
+        ("internal error: invalid character converted to idx_vector; must be ':'");
       err = true;
     }
 }
 
 octave_idx_type
 idx_vector::idx_colon_rep::checkelem (octave_idx_type i) const
 {
   if (i < 0)
diff --git a/liboctave/lo-array-gripes.cc b/liboctave/lo-array-gripes.cc
--- a/liboctave/lo-array-gripes.cc
+++ b/liboctave/lo-array-gripes.cc
@@ -125,32 +125,32 @@ gripe_del_index_out_of_range (bool is1d,
 }
 
 void
 gripe_invalid_index (void)
 {
   const char *err_id = error_id_invalid_index;
 
   (*current_liboctave_error_with_id_handler)
-    (err_id, "subscript indices must be either positive integers or logicals.");
+    (err_id, "subscript indices must be either positive integers or logicals");
 }
 
 // FIXME -- the following is a common error message to resize,
 // regardless of whether it's called from assign or elsewhere.  It
 // seems OK to me, but eventually the gripe can be specialized.
 // Anyway, propagating various error messages into procedure is, IMHO,
 // a nonsense.  If anything, we should change error handling here (and
 // throughout liboctave) to allow custom handling of errors
 
 void
 gripe_invalid_resize (void)
 {
   (*current_liboctave_error_with_id_handler)
     ("Octave:invalid-resize",
-     "Invalid resizing operation or ambiguous assignment to an out-of-bounds array element.");
+     "Invalid resizing operation or ambiguous assignment to an out-of-bounds array element");
 }
 
 void
 gripe_invalid_assignment_size (void)
 {
   (*current_liboctave_error_handler)
     ("A(I) = X: X must have the same size as I");
 }
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,22 @@
+2011-01-20  John W. Eaton  <jwe@octave.org>
+
+	* DLD-FUNCTIONS/__delaunayn__.cc,
+	DLD-FUNCTIONS/__init_fltk__.cc,
+	DLD-FUNCTIONS/__magick_read__.cc, DLD-FUNCTIONS/cellfun.cc,
+	DLD-FUNCTIONS/quadcc.cc, DLD-FUNCTIONS/regexp.cc, data.cc,
+	gripes.cc, ls-mat5.cc, toplev.cc, variables.cc:
+	Style fixes for error and warning messages.
+
+2011-01-20  John W. Eaton  <jwe@octave.org>
+
+	* Array.cc, Sparse.cc, base-lu.cc, idx-vector.cc,
+	lo-array-gripes.cc: Style fixes for error and warning messages.
+
 2011-01-20  John W. Eaton  <jwe@octave.org>
 
 	* DLD-FUNCTIONS/__contourc__.cc, DLD-FUNCTIONS/__delaunayn__.cc,
 	DLD-FUNCTIONS/__dsearchn__.cc, DLD-FUNCTIONS/__glpk__.cc,
 	DLD-FUNCTIONS/__init_fltk__.cc,
 	DLD-FUNCTIONS/__lin_interpn__.cc,
 	DLD-FUNCTIONS/__magick_read__.cc,
 	DLD-FUNCTIONS/__pchip_deriv__.cc, DLD-FUNCTIONS/__qp__.cc,
diff --git a/src/DLD-FUNCTIONS/__delaunayn__.cc b/src/DLD-FUNCTIONS/__delaunayn__.cc
--- a/src/DLD-FUNCTIONS/__delaunayn__.cc
+++ b/src/DLD-FUNCTIONS/__delaunayn__.cc
@@ -202,17 +202,17 @@ Undocumented internal function.\n\
           int curlong, totlong;
           qh_memfreeshort (&curlong, &totlong);
 
           if (curlong || totlong)
             warning ("__delaunay__: did not free %d bytes of long memory (%d pieces)",
                      totlong, curlong);
         }
       else
-        error ("__delaunayn__: qhull failed.");
+        error ("__delaunayn__: qhull failed");
     }
   else if (n == dim + 1)
     {
       // one should check if nx points span a simplex
       // I will look at this later.
       RowVector vec (n);
       for (octave_idx_type i = 0; i < n; i++)
         vec(i) = i + 1.0;
diff --git a/src/DLD-FUNCTIONS/__init_fltk__.cc b/src/DLD-FUNCTIONS/__init_fltk__.cc
--- a/src/DLD-FUNCTIONS/__init_fltk__.cc
+++ b/src/DLD-FUNCTIONS/__init_fltk__.cc
@@ -54,16 +54,17 @@ To initialize:
 #include <FL/fl_draw.H>
 #include <FL/gl.h>
 
 #include "cmd-edit.h"
 #include "lo-ieee.h"
 
 #include "defun-dld.h"
 #include "error.h"
+#include "file-ops.h"
 #include "gl-render.h"
 #include "gl2ps-renderer.h"
 #include "graphics.h"
 #include "parse.h"
 #include "toplev.h"
 #include "variables.h"
 
 #define FLTK_GRAPHICS_TOOLKIT_NAME "fltk"
@@ -2010,23 +2011,22 @@ Mouse inputs have no effect.\n\
           else
             failed = true;
         }
       else
         failed = true;
     }
 
   if (failed)
-    error ("MODE must be one of the strings: ""2D"", ""3D"", or ""None"".");
+    error ("MODE must be one of the strings: \"2D\", \"3D\", or \"None\"");
 
 
   return octave_value(mode_str);
 }
 
-#include "file-ops.h"
 DEFUN_DLD (__fltk_uigetfile__, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} __fltk_uigetfile__ (@dots{})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   // This function should be called by uigetfile.m
   // Error checking should be done in uigetfile.m!
diff --git a/src/DLD-FUNCTIONS/__magick_read__.cc b/src/DLD-FUNCTIONS/__magick_read__.cc
--- a/src/DLD-FUNCTIONS/__magick_read__.cc
+++ b/src/DLD-FUNCTIONS/__magick_read__.cc
@@ -519,18 +519,17 @@ function.  Instead use @code{imread}.\n\
         case 32:
         case 64:
         default:
           error ("__magick_read__: image depths greater than 16-bit are not supported");
         }
     }
 #else
 
-  error ("imread: image reading ave does not support reading images."
-         " Image reading capabilities were disabled when this installation was compiled.");
+  error ("imread: image reading capabilities were disabled when Octave was compiled");
 
 #endif
 
   return output;
 }
 
 #ifdef HAVE_MAGICK
 
@@ -574,17 +573,17 @@ jpg_settings (std::vector<Magick::Image>
         }
       else
         warning ("warning: Quality setting invalid--use default of 75");
     }
 
   // Other settings go here
 
   if (! something_set)
-    warning ("__magick_write__ warning: All write parameters ignored.");
+    warning ("__magick_write__ warning: all write parameters ignored");
 }
 
 static void
 encode_bool_image (std::vector<Magick::Image>& imvec, const octave_value& img)
 {
   unsigned int nframes = 1;
   boolNDArray m = img.bool_array_value ();
 
diff --git a/src/DLD-FUNCTIONS/cellfun.cc b/src/DLD-FUNCTIONS/cellfun.cc
--- a/src/DLD-FUNCTIONS/cellfun.cc
+++ b/src/DLD-FUNCTIONS/cellfun.cc
@@ -431,17 +431,17 @@ cellfun (@@factorial, @{-1,2@},'ErrorHan
           if (mask[j])
             {
               fdims = inputs[j].dims ();
               k = inputs[j].numel ();
               for (int i = j+1; i < nargin; i++)
                 {
                   if (mask[i] && inputs[i].dims () != fdims)
                     {
-                      error ("cellfun: Dimensions mismatch.");
+                      error ("cellfun: dimensions mismatch");
                       return octave_value_list ();
                     }
                 }
               break;
             }
         }
 
       if (error_handler.is_defined ())
diff --git a/src/DLD-FUNCTIONS/quadcc.cc b/src/DLD-FUNCTIONS/quadcc.cc
--- a/src/DLD-FUNCTIONS/quadcc.cc
+++ b/src/DLD-FUNCTIONS/quadcc.cc
@@ -1579,76 +1579,73 @@ well-behaved integrand than other method
   cquad_ival *iv, *ivl, *ivr;
   double nc, ncdiff;
 
 
   /* Parse the input arguments. */
   if (nargin < 1)
     {
       error
-        ("quadcc: first argument (integrand) of type function handle required.");
+        ("quadcc: first argument (integrand) of type function handle required");
       return octave_value_list ();
     }
   else
     {
       if (args (0).is_function_handle () || args (0).is_inline_function ())
         fcn = args (0).function_value ();
-      else {
-        error
-          ("quadcc: first argument (integrand) must be a function handle or an inline function.");
-        return octave_value_list();
+      else
+        {
+          error ("quadcc: first argument (integrand) must be a function handle or an inline function");
+          return octave_value_list();
         }
     }
 
   if (nargin < 2 || !args (1).is_real_scalar ())
     {
-      error
-        ("quadcc: second argument (left interval edge) must be a single real scalar.");
+      error ("quadcc: second argument (left interval edge) must be a single real scalar");
       return octave_value_list ();
     }
   else
     a = args (1).double_value ();
 
   if (nargin < 3 || !args (2).is_real_scalar ())
     {
-      error
-        ("quadcc: third argument (right interval edge) must be a single real scalar.");
+      error ("quadcc: third argument (right interval edge) must be a single real scalar");
       return octave_value_list ();
     }
   else
     b = args (2).double_value ();
 
   if (nargin < 4)
     tol = 1.0e-6;
   else if (!args (3).is_real_scalar ())
     {
-      error
-        ("quadcc: fourth argument (tolerance) must be a single real scalar.");
+      error ("quadcc: fourth argument (tolerance) must be a single real scalar");
       return octave_value_list ();
     }
   else
     tol = args (3).double_value ();
 
   if (nargin < 5)
     {
       nivals = 1;
       iivals[0] = a;
       iivals[1] = b;
     }
   else if (!(args (4).is_real_scalar () || args (4).is_real_matrix ()))
     {
-      error
-        ("quadcc: fifth argument (singularities) must be a vector of real values.");
+      error ("quadcc: fifth argument (singularities) must be a vector of real values");
       return octave_value_list ();
     }
   else
     {
       nivals = 1 + args (4).length ();
       if ( nivals > cquad_heapsize ) {
-        error("quadcc: maximum number of singular points is limited to %i.",cquad_heapsize-1);
+        error ("quadcc: maximum number of singular points is limited to %i",
+               cquad_heapsize-1);
         return octave_value_list();
         }
       sing = args (4).array_value ().fortran_vec ();
       iivals[0] = a;
       for (i = 0; i < nivals - 2; i++)
         iivals[i + 1] = sing[i];
       iivals[nivals] = b;
     }
@@ -1692,24 +1689,23 @@ well-behaved integrand than other method
           for (i = 0; i <= n[3]; i++)
             ex (i) = m + xi[i] * h;
         }
       fargs (0) = ex;
       retval = feval (fcn, fargs, 1);
       if (retval.length () != 1 || !retval (0).is_real_matrix ())
         {
           error
-            ("quadcc: integrand must return a single, real-valued vector.");
+            ("quadcc: integrand must return a single, real-valued vector");
           return octave_value_list ();
         }
       Matrix effex = retval (0).matrix_value ();
       if (effex.length () != ex.length ())
         {
-          error
-            ("quadcc: integrand must return a single, real-valued vector of the same size as the input");
+          error ("quadcc: integrand must return a single, real-valued vector of the same size as the input");
           return octave_value_list ();
         }
       for (i = 0; i <= n[3]; i++)
         {
           iv->fx[i] = effex (i);
           if (wrap)
             {
               xw = ex(i);
@@ -1813,25 +1809,23 @@ well-behaved integrand than other method
               {
                 for (i = 0; i < n[d] / 2; i++)
                   ex (i) = m + xi[(2 * i + 1) * skip[d]] * h;
               }
             fargs (0) = ex;
             retval = feval (fcn, fargs, 1);
             if (retval.length () != 1 || !retval (0).is_real_matrix ())
               {
-                error
-                  ("quadcc: integrand must return a single, real-valued vector.");
+                error ("quadcc: integrand must return a single, real-valued vector");
                 return octave_value_list ();
               }
             Matrix effex = retval (0).matrix_value ();
             if (effex.length () != ex.length ())
               {
-                error
-                  ("quadcc: integrand must return a single, real-valued vector of the same size as the input.");
+                error ("quadcc: integrand must return a single, real-valued vector of the same size as the input");
                 return octave_value_list ();
               }
             neval += effex.length ();
             for (i = 0; i < n[d] / 2; i++)
               {
                 j = (2 * i + 1) * skip[d];
                 iv->fx[j] = effex (i);
                 if (wrap)
@@ -1963,25 +1957,23 @@ well-behaved integrand than other method
               {
                 for (i = 0; i < n[0] - 1; i++)
                   ex (i) = ml + xi[(i + 1) * skip[0]] * hl;
               }
             fargs (0) = ex;
             retval = feval (fcn, fargs, 1);
             if (retval.length () != 1 || !retval (0).is_real_matrix ())
               {
-                error
-                  ("quadcc: integrand must return a single, real-valued vector.");
+                error ("quadcc: integrand must return a single, real-valued vector");
                 return octave_value_list ();
               }
             Matrix effex = retval (0).matrix_value ();
             if (effex.length () != ex.length ())
               {
-                error
-                  ("quadcc: integrand must return a single, real-valued vector of the same size as the input.");
+                error ("quadcc: integrand must return a single, real-valued vector of the same size as the input");
                 return octave_value_list ();
               }
             neval += effex.length ();
             for (i = 0; i < n[0] - 1; i++)
               {
                 j = (i + 1) * skip[0];
                 ivl->fx[j] = effex (i);
                 if (wrap)
@@ -2027,17 +2019,17 @@ well-behaved integrand than other method
           ncdiff = sqrt (ncdiff);
           ivl->err = ncdiff * h;
           /* Check for divergence. */
           ivl->ndiv = iv->ndiv + (fabs (iv->c[0]) > 0
                                   && ivl->c[0] / iv->c[0] > 2);
           if (ivl->ndiv > ndiv_max && 2 * ivl->ndiv > ivl->rdepth)
             {
               igral = copysign (octave_Inf, igral);
-              warning ("quadcc: divergent integral detected.");
+              warning ("quadcc: divergent integral detected");
               break;
             }
 
           /* Compute the local integral. */
           ivl->igral = h * w * ivl->c[0];
 
 
           /* Generate the interval on the right */
@@ -2061,25 +2053,23 @@ well-behaved integrand than other method
               {
                 for (i = 0; i < n[0] - 1; i++)
                   ex (i) = mr + xi[(i + 1) * skip[0]] * hr;
               }
             fargs (0) = ex;
             retval = feval (fcn, fargs, 1);
             if (retval.length () != 1 || !retval (0).is_real_matrix ())
               {
-                error
-                  ("quadcc: integrand must return a single, real-valued vector.");
+                error ("quadcc: integrand must return a single, real-valued vector");
                 return octave_value_list ();
               }
             Matrix effex = retval (0).matrix_value ();
             if (effex.length () != ex.length ())
               {
-                error
-                  ("quadcc: integrand must return a single, real-valued vector of the same size as the input.");
+                error ("quadcc: integrand must return a single, real-valued vector of the same size as the input");
                 return octave_value_list ();
               }
             neval += effex.length ();
             for (i = 0; i < n[0] - 1; i++)
               {
                 j = (i + 1) * skip[0];
                 ivr->fx[j] = effex (i);
                 if (wrap)
@@ -2125,17 +2115,17 @@ well-behaved integrand than other method
           ncdiff = sqrt (ncdiff);
           ivr->err = ncdiff * h;
           /* Check for divergence. */
           ivr->ndiv = iv->ndiv + (fabs (iv->c[0]) > 0
                                   && ivr->c[0] / iv->c[0] > 2);
           if (ivr->ndiv > ndiv_max && 2 * ivr->ndiv > ivr->rdepth)
             {
               igral = copysign (octave_Inf, igral);
-              warning ("quadcc: divergent integral detected.");
+              warning ("quadcc: divergent integral detected");
               break;
             }
 
           /* Compute the local integral. */
           ivr->igral = h * w * ivr->c[0];
 
 
           /* Fix-up the heap: we now have one interval on top
diff --git a/src/DLD-FUNCTIONS/regexp.cc b/src/DLD-FUNCTIONS/regexp.cc
--- a/src/DLD-FUNCTIONS/regexp.cc
+++ b/src/DLD-FUNCTIONS/regexp.cc
@@ -387,17 +387,17 @@ octregexp_list (const octave_value_list 
           int matches = pcre_exec(re, 0, buffer.c_str(),
                                   buffer.length(), idx,
                                   (idx ? PCRE_NOTBOL : 0),
                                   ovector, (subpatterns+1)*3);
 
           if (matches == PCRE_ERROR_MATCHLIMIT)
             {
               // try harder; start with default value for MATCH_LIMIT and increase it
-              warning("Your pattern caused PCRE to hit its MATCH_LIMIT.\nTrying harder now, but this will be slow.");
+              warning ("your pattern caused PCRE to hit its MATCH_LIMIT; trying harder now, but this will be slow");
               pcre_extra pe;
               pcre_config(PCRE_CONFIG_MATCH_LIMIT, static_cast <void *> (&pe.match_limit));
               pe.flags = PCRE_EXTRA_MATCH_LIMIT;
 
               int i = 0;
               while (matches == PCRE_ERROR_MATCHLIMIT &&
                      i++ < PCRE_MATCHLIMIT_MAX)
                 {
@@ -408,17 +408,18 @@ octregexp_list (const octave_value_list 
                                       buffer.length(), idx,
                                       (idx ? PCRE_NOTBOL : 0),
                                       ovector, (subpatterns+1)*3);
                 }
             }
 
           if (matches < 0 && matches != PCRE_ERROR_NOMATCH)
             {
-              error ("%s: internal error calling pcre_exec\nError code from pcre_exec is %i", nm.c_str(), matches);
+              error ("%s: internal error calling pcre_exec; error code from pcre_exec is %i",
+                     nm.c_str(), matches);
               pcre_free(re);
               return 0;
             }
           else if (matches == PCRE_ERROR_NOMATCH)
             break;
           else if (ovector[1] <= ovector[0])
             {
               // FIXME: Zero sized match!! Is this the right thing to do?
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -6697,17 +6697,17 @@ endfor\n\
         {
           NoAlias< Array<octave_idx_type> > r (rm.dims ());
 
           for (octave_idx_type i = 0; i < rm.numel (); i++)
             {
               octave_idx_type rx = rm(i);
               if (static_cast<double> (rx) != rm(i))
                 {
-                  error ("repelems: a matrix of integers is expected.");
+                  error ("repelems: a matrix of integers is expected");
                   return retval;
                 }
 
               r(i) = rx;
             }
 
           switch (x.builtin_type ())
             {
diff --git a/src/gripes.cc b/src/gripes.cc
--- a/src/gripes.cc
+++ b/src/gripes.cc
@@ -222,17 +222,17 @@ void
 gripe_indexed_cs_list (void)
 {
   error ("a cs-list cannot be further indexed");
 }
 
 void
 gripe_nonbraced_cs_list_assignment (void)
 {
-  error ("invalid assignment to cs-list outside multiple assignment.");
+  error ("invalid assignment to cs-list outside multiple assignment");
 }
 
 void
 gripe_warn_complex_cmp (void)
 {
   warning_with_id ("Octave:matlab-incompatible",
                    "potential Matlab compatibility problem: comparing complex numbers");
 }
diff --git a/src/ls-mat5.cc b/src/ls-mat5.cc
--- a/src/ls-mat5.cc
+++ b/src/ls-mat5.cc
@@ -1446,38 +1446,34 @@ read_mat5_binary_element (std::istream& 
                       {
                         if (re(i) > 127) {
                           re(i) = '?';
                           found_big_char = true;
                         }
                       }
 
                     if (found_big_char)
-                      {
-                        warning ("load: can not read non-ASCII portions of UTF characters.");
-                        warning ("      Replacing unreadable characters with '?'.");
-                      }
+                      warning ("load: can not read non-ASCII portions of UTF characters; replacing unreadable characters with '?'");
                   }
                 else if (type == miUTF8)
                   {
                     // Search for multi-byte encoded UTF8 characters and
                     // replace with 0x3F for '?'... Give the user a warning
 
                     bool utf8_multi_byte = false;
                     for (octave_idx_type i = 0; i < n; i++)
                       {
                         unsigned char a = static_cast<unsigned char> (re(i));
                         if (a > 0x7f)
                           utf8_multi_byte = true;
                       }
 
                     if (utf8_multi_byte)
                       {
-                        warning ("load: can not read multi-byte encoded UTF8 characters.");
-                        warning ("      Replacing unreadable characters with '?'.");
+                        warning ("load: can not read multi-byte encoded UTF8 characters; replacing unreadable characters with '?'");
                         for (octave_idx_type i = 0; i < n; i++)
                           {
                             unsigned char a = static_cast<unsigned char> (re(i));
                             if (a > 0x7f)
                               re(i) = '?';
                           }
                       }
                   }
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -686,17 +686,17 @@ DEFUN (quit, args, ,
 Exit the current Octave session.  If the optional integer value\n\
 @var{status} is supplied, pass that value to the operating system as the\n\
 Octave's exit status.  The default value is zero.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   if (! quit_allowed)
-    error ("quit: not supported in embedded mode.");
+    error ("quit: not supported in embedded mode");
   else
     {
       if (args.length () > 0)
         {
           int tmp = args(0).nint_value ();
 
           if (! error_state)
             exit_status = tmp;
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -167,18 +167,18 @@ extract_function (const octave_value& ar
 
               if (! retval)
                 {
                   error ("%s: `%s' is not valid as a function",
                          warn_for.c_str (), fname.c_str ());
                   return retval;
                 }
 
-              warning ("%s: passing function body as a string is obsolete."
-                       " Please use anonymous functions.", warn_for.c_str ());
+              warning ("%s: passing function body as a string is obsolete; please use anonymous functions",
+                       warn_for.c_str ());
             }
           else
             error ("%s: `%s' is not valid as a function",
                    warn_for.c_str (), fname.c_str ());
         }
       else
         error ("%s: expecting first argument to be a string",
                warn_for.c_str ());
