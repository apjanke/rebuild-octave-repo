# HG changeset patch
# User jwe
# Date 1156869460 0
#      Tue Aug 29 16:37:40 2006 +0000
# Node ID e64059303a6f78a6fa97b16d1fd8960a2d2887cf
# Parent  51684d05b4bf7f449ba7f423fa79fd1cb6e555db
[project @ 2006-08-29 16:37:39 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2006-08-29  John W. Eaton  <jwe@octave.org>
+
+	* load-path.cc (execute_pkg_add_or_del):
+	Source PKG_ADD or PKG_DEL in base workspace.
+	* parse.y (source_file): New optional arg, context.
+	* parse.h (source_file): Fix decl.
+
 2006-08-25  John W. Eaton  <jwe@octave.org>
 
 	* version.h (OCTAVE_VERSION): Now 2.9.8+.
 
 2006-08-24  John W. Eaton  <jwe@octave.org>
 
 	* version.h (OCTAVE_VERSION): Now 2.9.8.
 	(OCTAVE_API_VERSION): Now api-v21.
diff --git a/src/load-path.cc b/src/load-path.cc
--- a/src/load-path.cc
+++ b/src/load-path.cc
@@ -1206,17 +1206,17 @@ execute_pkg_add_or_del (const std::strin
 
   input_from_startup_file = true;
 
   std::string file = dir + file_ops::dir_sep_str + script_file;
 
   file_stat fs = file_stat (file);
 
   if (fs.exists ())
-    source_file (file);
+    source_file (file, "base");
 
   unwind_protect::run_frame ("execute_pkg_add_or_del");
 }
 
 void
 execute_pkg_add (const std::string& dir)
 {
   execute_pkg_add_or_del (dir, "PKG_ADD");
diff --git a/src/parse.h b/src/parse.h
--- a/src/parse.h
+++ b/src/parse.h
@@ -104,17 +104,18 @@ extern string_vector reverse_lookup_auto
 
 extern bool
 load_fcn_from_file (const std::string& nm, bool exec_script);
 
 extern bool
 load_fcn_from_file (symbol_record *sym_rec, bool exec_script);
 
 extern void
-source_file (const std::string file_name);
+source_file (const std::string& file_name,
+	     const std::string& context = std::string ());
 
 extern octave_value_list
 feval (const std::string& name,
        const octave_value_list& args = octave_value_list (),
        int nargout = 0);
 
 extern octave_value_list
 feval (octave_function *fcn,
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -3522,33 +3522,48 @@ currently autoloaded functions.\n\
     }
   else
     print_usage ();
 
   return retval;
 }
 
 void
-source_file (const std::string file_name)
+source_file (const std::string& file_name, const std::string& context)
 {
   std::string file_full_name = file_ops::tilde_expand (file_name);
 
   unwind_protect::begin_frame ("source_file");
 
   unwind_protect_str (curr_fcn_file_name);
   unwind_protect_str (curr_fcn_file_full_name);
 
   curr_fcn_file_name = file_name;
   curr_fcn_file_full_name = file_full_name;
 
-  parse_fcn_file (file_full_name, true, true);
-
-  if (error_state)
-    error ("source: error sourcing file `%s'",
-	   file_full_name.c_str ());
+  if (! context.empty ())
+    {
+      unwind_protect_ptr (curr_sym_tab);
+
+      if (context == "caller")
+	curr_sym_tab = curr_caller_sym_tab;
+      else if (context == "base")
+	curr_sym_tab = top_level_sym_tab;
+      else
+	error ("source: context must be \"caller\" or \"base\"");
+    }      
+
+  if (! error_state)
+    {
+      parse_fcn_file (file_full_name, true, true);
+
+      if (error_state)
+	error ("source: error sourcing file `%s'",
+	       file_full_name.c_str ());
+    }
 
   unwind_protect::run_frame ("source_file");
 }
 
 DEFUN (mfilename, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} mfilename ()\n\
 @deftypefnx {Built-in Function} {} mfilename (@code{\"fullpath\"})\n\
@@ -3624,22 +3639,32 @@ Parse and execute the contents of @var{f
 executing commands from a script file, but without requiring the file to\n\
 be named @file{@var{file}.m}.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
-  if (nargin == 1)
+  if (nargin == 1 || nargin == 2)
     {
       std::string file_name = args(0).string_value ();
 
       if (! error_state)
-        source_file (file_name);
+	{
+	  std::string context;
+
+	  if (nargin == 2)
+	    context = args(1).string_value ();
+
+	  if (! error_state)
+	    source_file (file_name, context);
+	  else
+	    error ("source: expecting context to be character string");
+	}
       else
 	error ("source: expecting file name as argument");
     }
   else
     print_usage ();
 
   return retval;
 }
