# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1228746808 -3600
#      Mon Dec 08 15:33:28 2008 +0100
# Node ID a99b9113c58c113803a9f6f0bbef5863a168aa70
# Parent  a762d9daa700709e67fbdfe18506a5a572cc1940
optimize sparse bool indexing

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,17 @@
+2008-12-08  Jaroslav Hajek  <highegg@gmail.com>
+
+	* idx-vector.cc (idx_vector::idx_vector_rep::idx_vector_rep (const 
+	Sparse<bool>&)): New constructor.
+	* idx_vector.h: Declare it.
+	(idx_vector::idx_vector (const Sparse<bool>&)): New constructor.
+	* idx-vector.cc (idx_vector::idx_vector_rep::idx_vector_rep (const
+	Array<bool>&)): Fix extent calculation.
+
 2008-12-07  Jaroslav Hajek  <highegg@gmail.com>
 
 	* mx-inlines.cc (mx_inline_fill_vs): New template function.
 	* mx-op-defs.h (everywhere): Replace int by octave_idx_type.
 	(MDM_MULTIPLY_OP): Use mx_inline_mul_vs and mx_inline_fill_vs.
 	(DMM_MULTIPLY_OP): Dtto.
 	* fDiagMatrix.cc (operator *): Remove redundant ifs.
 	* fCDiagMatrix.cc (operator *): Remove redundant ifs.
diff --git a/liboctave/idx-vector.cc b/liboctave/idx-vector.cc
--- a/liboctave/idx-vector.cc
+++ b/liboctave/idx-vector.cc
@@ -27,16 +27,17 @@ along with Octave; see the file COPYING.
 #endif
 
 #include <cstdlib>
 
 #include <iostream>
 
 #include "idx-vector.h"
 #include "Array.h"
+#include "Sparse.h"
 #include "Range.h"
 
 #include "oct-locbuf.h"
 #include "lo-error.h"
 #include "lo-mappers.h"
 
 static void
 gripe_invalid_index (void)
@@ -307,17 +308,48 @@ idx_vector::idx_vector_rep::idx_vector_r
       octave_idx_type ntot = bnda.length ();
 
       octave_idx_type k = 0;
       for (octave_idx_type i = 0; i < ntot; i++)
 	if (bnda.xelem (i)) d[k++] = i;
 
       data = d;
 
-      ext = k;
+      ext = d[k-1] + 1;
+    }
+}
+
+idx_vector::idx_vector_rep::idx_vector_rep (const Sparse<bool>& bnda)
+  : data (0), len (0), ext (0), aowner (0), orig_dims ()
+{
+  for (octave_idx_type i = 0, l = bnda.nnz (); i < l; i++)
+    if (bnda.data (i)) len++;
+
+  dim_vector dv = bnda.dims ();
+
+  orig_dims = ((dv.length () == 2 && dv(0) == 1)
+	       ? dim_vector (1, len) : orig_dims = dim_vector (len, 1));
+
+  if (len != 0)
+    {
+      octave_idx_type *d = new octave_idx_type [len];
+
+      octave_idx_type nnz = bnda.nnz ();
+
+      octave_idx_type k = 0;
+      // FIXME: I hope this is OK, i.e. the element iterated this way are correctly ordered.
+      for (octave_idx_type i = 0; i < nnz; i++)
+        {
+          if (bnda.data (i)) 
+            d[k++] = bnda.cidx (i) + bnda.rows () * bnda.ridx (i);
+        }
+
+      data = d;
+
+      ext = d[k-1] + 1;
     }
 }
 
 idx_vector::idx_vector_rep::~idx_vector_rep (void)
 { 
   if (aowner) 
     delete aowner;
   else
diff --git a/liboctave/idx-vector.h b/liboctave/idx-vector.h
--- a/liboctave/idx-vector.h
+++ b/liboctave/idx-vector.h
@@ -28,16 +28,17 @@ along with Octave; see the file COPYING.
 #include <iostream>
 #include <algorithm>
 #include <cassert>
 
 #include "dim-vector.h"
 #include "oct-inttypes.h"
 
 template<class T> class Array;
+template<class T> class Sparse;
 class Range;
 
 // Design rationale:
 // idx_vector is a reference-counting, polymorphic pointer, that can contain
 // 4 types of index objects: a magic colon, a range, a scalar, or an index vector.
 // Polymorphic methods for single element access are provided, as well as
 // templates implementing "early dispatch", i.e. hoisting the checks for index
 // type out of loops.
@@ -265,16 +266,18 @@ private:
 
     template <class T>
     idx_vector_rep (const Array<T>&);
 
     idx_vector_rep (bool);
 
     idx_vector_rep (const Array<bool>&);
 
+    idx_vector_rep (const Sparse<bool>&);
+
     ~idx_vector_rep (void);
 
     octave_idx_type xelem (octave_idx_type i) const
       { return data[i]; }
 
     octave_idx_type checkelem (octave_idx_type i) const;
 
     octave_idx_type length (octave_idx_type) const
@@ -392,16 +395,19 @@ public:
 
   idx_vector (const Array<bool>& nda) : rep (new idx_vector_rep (nda))
     { chkerr (); }
 
   idx_vector (const Range& r) 
     : rep (new idx_range_rep (r))
     { chkerr (); }
 
+  idx_vector (const Sparse<bool>& nda) : rep (new idx_vector_rep (nda))
+    { chkerr (); }
+
   idx_vector (const idx_vector& a) : rep (a.rep) { rep->count++; }
 
   ~idx_vector (void)
     {
       if (--rep->count == 0)
 	delete rep;
     }
 
