# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1489611617 -3600
#      Wed Mar 15 22:00:17 2017 +0100
# Node ID ce725103ebf1dcc7233670a5b5393ccdecc53971
# Parent  ab10403a0b501d5e8316f86a31e8e5f650932b4a
Fallback to open.m for opening files in the gui file browser (bug #50543)

* files-dock-widget.h/cc (files_dock_widget::files_dock_widget): Update tree
  view tooltip.
  (files_dock_widget::open_any_signal): New signal.
  (files_dock_widget::display_directory): If the activated file is not a text
  file with specified extension, emit open_any_signal

* main-window.cc (main_window::handle_open_any_request,
  main_window::handle_open_any_request): New slot and corresponding interpreter
  thread callback that calls the "open" function.
  (main_window::construct): Connect file browser open_any_signal to
  handle_open_any_request slot.

* open.m: allow user defined openxxx functions to be called when specific "xxx"
  file extensions are met. Let ".ofig" files be open using hgload and
  "octave-workspace" files be loaded in the base workspace like ".mat" files

diff --git a/libgui/src/files-dock-widget.cc b/libgui/src/files-dock-widget.cc
--- a/libgui/src/files-dock-widget.cc
+++ b/libgui/src/files-dock-widget.cc
@@ -207,18 +207,17 @@ namespace octave
     // Attach the model to the QTreeView and set the root index
     m_file_tree_view = new FileTreeViewer (container);
     m_file_tree_view->setSelectionMode (QAbstractItemView::ExtendedSelection);
     m_file_tree_view->setModel (m_file_system_model);
     m_file_tree_view->setRootIndex (rootPathIndex);
     m_file_tree_view->setSortingEnabled (true);
     m_file_tree_view->setAlternatingRowColors (true);
     m_file_tree_view->setAnimated (true);
-    m_file_tree_view->setToolTip (
-                                  tr ("Activate to open in editor, right click for alternatives"));
+    m_file_tree_view->setToolTip (tr ("Double click to open file/folder, right click for alternatives"));
 
     // get sort column and order as well as cloumn state (order and width)
 
     m_file_tree_view->sortByColumn (
                                     settings->value ("filesdockwidget/sort_files_by_column",0).toInt (),
                                     static_cast<Qt::SortOrder>
                                     (settings->value ("filesdockwidget/sort_files_by_order",
                                                       Qt::AscendingOrder).toUInt ())
@@ -383,23 +382,20 @@ namespace octave
             QString suffix = fileInfo.suffix ().toLower ();
             QSettings *settings = resource_manager::get_settings ();
             QString ext = settings->value ("filesdockwidget/txt_file_extensions",
                                            "m;c;cc;cpp;h;txt").toString ();
             QStringList extensions = ext.split (";", QString::SkipEmptyParts);
 
             if (QFile::exists (abs_fname))
               {
-                if (is_octave_data_file (abs_fname.toStdString ()))
-                  emit load_file_signal (abs_fname);
-                else if (extensions.contains (suffix))
+                if (extensions.contains (suffix))
                   emit open_file (fileInfo.absoluteFilePath ());
                 else
-                  open_item_in_app (m_file_tree_view->selectionModel ()
-                                    ->currentIndex ());
+                  emit open_any_signal (abs_fname);
               }
           }
       }
   }
 
   void files_dock_widget::open_item_in_app (const QModelIndex& index)
   {
     // Retrieve the file info associated with the model index.
diff --git a/libgui/src/files-dock-widget.h b/libgui/src/files-dock-widget.h
--- a/libgui/src/files-dock-widget.h
+++ b/libgui/src/files-dock-widget.h
@@ -136,20 +136,24 @@ namespace octave
     //! Emitted, whenever the user requested to open a file.
 
     void open_file (const QString& fileName);
 
     //! Emitted, whenever the currently displayed directory changed.
 
     void displayed_directory_changed (const QString& dir);
 
-    //! Emitted, whenever the user requested to load a file.
+    //! Emitted, whenever the user requested to load a file in the text editor.
 
     void load_file_signal (const QString& fileName);
 
+    //! Emitted, whenever the user requested to open an unknown type file.
+
+    void open_any_signal (const QString& fileName);
+
     //! Emitted, whenever the user requested to run a file.
 
     void run_file_signal (const QFileInfo& info);
 
     //! Emitted, whenever wants to search for a file .
 
     void find_files_signal (const QString& startdir);
 
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -64,16 +64,17 @@ along with Octave; see the file COPYING.
 #include "defaults.h"
 #if defined (HAVE_QT_GRAPHICS)
 #  include "__init_qt__.h"
 #endif
 #include "interpreter-private.h"
 #include "interpreter.h"
 #include "oct-map.h"
 #include "octave.h"
+#include "parse.h"
 #include "symscope.h"
 #include "utils.h"
 #include "version.h"
 
 static octave::file_editor_interface *
 create_default_editor (QWidget *p)
 {
 #if defined (HAVE_QSCINTILLA)
@@ -387,16 +388,23 @@ namespace octave
                                            nullptr, nullptr,
                                            QFileDialog::DontUseNativeDialog);
 
     if (! file.isEmpty ())
       octave_link::post_event (this, &main_window::load_workspace_callback,
                                file.toStdString ());
   }
 
+  void main_window::handle_open_any_request (const QString& file_arg)
+  {
+    if (! file_arg.isEmpty ())
+      octave_link::post_event (this, &main_window::open_any_callback,
+                               file_arg.toStdString ());
+  }
+
   void main_window::handle_clear_workspace_request (void)
   {
     octave_link::post_event (this, &main_window::clear_workspace_callback);
   }
 
   void main_window::handle_clear_command_window_request (void)
   {
     octave_link::post_event (this, &main_window::clear_command_window_callback);
@@ -1829,16 +1837,19 @@ namespace octave
 
         connect (m_external_editor,
                  SIGNAL (request_settings_dialog (const QString&)),
                  this, SLOT (process_settings_dialog_request (const QString&)));
 
         connect (m_file_browser_window, SIGNAL (load_file_signal (const QString&)),
                  this, SLOT (handle_load_workspace_request (const QString&)));
 
+        connect (m_file_browser_window, SIGNAL (open_any_signal (const QString&)),
+                 this, SLOT (handle_open_any_request (const QString&)));
+
         connect (m_file_browser_window, SIGNAL (find_files_signal (const QString&)),
                  this, SLOT (find_files (const QString&)));
 
         setWindowTitle ("Octave");
 
 // See Octave bug #53409 and https://bugreports.qt.io/browse/QTBUG-55357
 #if (QT_VERSION < 0x050601) || (QT_VERSION >= 0x050701)
         setDockOptions (QMainWindow::AnimatedDocks
@@ -2540,16 +2551,30 @@ namespace octave
 
   void main_window::set_screen_size_callback (const int_pair& sz)
   {
     // INTERPRETER THREAD
 
     command_editor::set_screen_size (sz.first, sz.second);
   }
 
+  void main_window::open_any_callback (const std::string& file)
+  {
+    // INTERPRETER THREAD
+
+    octave::feval ("open", ovl (file));
+
+    // Update the workspace since open.m may have loaded new variables.
+    symbol_scope scope
+      = __get_current_scope__ ("main_window::open_any_callback");
+
+    if (scope)
+          octave_link::set_workspace (true, scope);
+  }
+
   void main_window::clear_workspace_callback (void)
   {
     // INTERPRETER THREAD
 
     interpreter& interp
       = __get_interpreter__ ("main_window::clear_workspace_callback");
 
     Fclear (interp);
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -140,16 +140,17 @@ namespace octave
   public slots:
 
     void focus_changed (QWidget *w_old, QWidget *w_new);
     void request_reload_settings (void);
 
     void report_status_message (const QString& statusMessage);
     void handle_save_workspace_request (void);
     void handle_load_workspace_request (const QString& file = QString ());
+    void handle_open_any_request (const QString& file = QString ());
     void handle_clear_workspace_request (void);
     void handle_clear_command_window_request (void);
     void handle_clear_history_request (void);
     void handle_undo_request (void);
     void handle_rename_variable_request (const QString& old_name,
                                          const QString& new_name);
     void new_file (const QString& commands = QString ());
     void open_file (const QString& file_name = QString (), int line = -1);
@@ -317,16 +318,18 @@ namespace octave
     void construct_news_menu (QMenuBar *p);
 
     void construct_tool_bar (void);
 
     void save_workspace_callback (const std::string& file);
 
     void load_workspace_callback (const std::string& file);
 
+    void open_any_callback (const std::string& file);
+
     void rename_variable_callback (const name_pair& names);
 
     void command_window_undo_callback (void);
 
     void clear_command_window_callback (void);
 
     void resize_command_window_callback (void);
 
diff --git a/scripts/miscellaneous/open.m b/scripts/miscellaneous/open.m
--- a/scripts/miscellaneous/open.m
+++ b/scripts/miscellaneous/open.m
@@ -17,53 +17,82 @@
 ## <https://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {} {} open @var{file}
 ## @deftypefnx {} {@var{output} =} open (@var{file})
 ## Open the file @var{file} in Octave or in an external application based on
 ## the file type as determined by the filename extension.
 ##
-## Recognized file types are
+## By default, recognized file types are
 ##
 ## @table @code
 ## @item .m
-## Open file in the editor.
+## Open file in the editor. No @var{output} value is returned.
 ##
 ## @item .mat
-## Load the file in the base workspace.
+## @item octave-workspace
+## Open the data file with @code{load}. If no return value @var{output}
+## is requested, variables are loaded in the base workspace. Otherwise
+## @var{output} will be a structure containing loaded data.
+## @xref{XREFload, , load function}.
+##
+## @item .ofig 
+## Open the figure with hgload.  @xref{XREFhgload, , hgload function}.
 ##
 ## @item .exe
-## Execute the program (on Windows systems only).
+## Execute the program (on Windows systems only). No @var{output} value
+## is returned.
 ## @end table
 ##
+## Custom file extensions may also be handled if a function @code{openxxx}, 
+## where @code{xxx} is the extension, is found in the load path.  The function 
+## must accept the file name as input.  For example, in order to load ".dat"
+## data files in the base workspace, as is done by default for ".mat" files, one
+## may define "opendat.m" with the following contents:
+## @example
+## function retval = opendat (fname)
+##   evalin ("base", sprintf ("load ('%s');", fname));
+## endfunction
+## @end example
+##
 ## Other file types are opened in the appropriate external application.
 ## @end deftypefn
 
 function output = open (file)
 
   if (nargin != 1)
     print_usage ();
   endif
 
   if (! ischar (file))
     error ("open: FILE must be a string");
   endif
 
-  [~, ~, ext] = fileparts (file);
+  [~, fname, ext] = fileparts (file);
 
-  if (strcmpi (ext, ".m"))
+  if (! isempty (ext)
+      && any (exist (["open" tolower(ext(2:end))]) == [2 3 5 103]))
+    try 
+      feval (["open" tolower(ext(2:end))], file)
+    catch
+      error ("open: %s", lasterr);
+    end_try_catch
+  elseif (strcmpi (ext, ".m"))
     edit (file);
-  elseif (strcmpi (ext, ".mat"))
+  elseif (strcmpi (ext, ".mat") || strcmp (fname, "octave-workspace"))
     if (nargout > 0)
       output = load (file);
     else
       evalin ("base", sprintf ("load ('%s');", file));
     endif
-  elseif (any (strcmpi (ext, {".fig", ".mdl", ".slx", ".prj"})))
+  elseif (strcmpi (ext, ".ofig"))
+    output = hgload (file);
+    drawnow ();
+  elseif (any (strcmpi (ext, {".mdl", ".slx", ".prj"})))
     error ("open: opening file type '%s' is not supported", ext);
   elseif (strcmpi (ext, ".exe"))
     if (ispc ())
       dos (file);
     else
       error ("open: executing .exe files is only supported on Windows systems");
     endif
   else
