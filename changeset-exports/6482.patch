# HG changeset patch
# User jwe
# Date 1175654227 0
#      Wed Apr 04 02:37:07 2007 +0000
# Node ID 7e958a1532c6880f2f6bd18fbf4759e8d95453a8
# Parent  89ed13fec6fe3d6802aa0aa6ab4a5aa5f5a1ae19
[project @ 2007-04-04 02:37:07 by jwe]

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -980,17 +980,17 @@ ComplexMatrix::inverse (octave_idx_type&
   return inverse (mattype, info, rcond, 0, 0);
 }
 
 ComplexMatrix
 ComplexMatrix::inverse (octave_idx_type& info, double& rcond, int force,
 			int calc_cond) const
 {
   MatrixType mattype (*this);
-  return inverse (mattype, info, rcond, 0, 0);
+  return inverse (mattype, info, rcond, force, calc_cond);
 }
 
 ComplexMatrix
 ComplexMatrix::inverse (MatrixType &mattype) const
 {
   octave_idx_type info;
   double rcond;
   return inverse (mattype, info, rcond, 0, 0);
@@ -1036,17 +1036,17 @@ ComplexMatrix::tinverse (MatrixType &mat
 	  rcond = 0.0;
 	  if (info != 0) 
 	    info = -1;
 	  else if (calc_cond) 
 	    {
 	      octave_idx_type ztrcon_info = 0;
 	      char job = '1';
 
-	      OCTAVE_LOCAL_BUFFER (Complex, cwork, 2 * nr);
+	      OCTAVE_LOCAL_BUFFER (Complex, cwork, 2*nr);
 	      OCTAVE_LOCAL_BUFFER (double, rwork, nr);
 
 	      F77_XFCN (ztrcon, ZTRCON, (F77_CONST_CHAR_ARG2 (&job, 1),
 					 F77_CONST_CHAR_ARG2 (&uplo, 1),
 					 F77_CONST_CHAR_ARG2 (&udiag, 1),
 					 nr, tmp_data, nr, rcond, 
 					 cwork, rwork, ztrcon_info 
 					 F77_CHAR_ARG_LEN (1)
diff --git a/liboctave/CSparse.cc b/liboctave/CSparse.cc
--- a/liboctave/CSparse.cc
+++ b/liboctave/CSparse.cc
@@ -5823,17 +5823,18 @@ SparseComplexMatrix::fsolve (MatrixType 
 		  for (octave_idx_type i = 0; i < b.rows(); i++)
 		    retval.xelem(i,j) = static_cast<Complex *>(X->x)[jr + i];
 		}
 
 	      BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 	      CHOLMOD_NAME(free_dense) (&X, cm);
 	      CHOLMOD_NAME(free_factor) (&L, cm);
 	      CHOLMOD_NAME(finish) (cm);
-	      CHOLMOD_NAME(print_common) (" ", cm);
+	      static char tmp[] = " ";
+	      CHOLMOD_NAME(print_common) (tmp, cm);
 	      END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 	    }
 #else
 	  (*current_liboctave_warning_handler)
 	    ("CHOLMOD not installed");
 
 	  mattype.mark_as_unsymmetric ();
 	  typ = MatrixType::Full;
@@ -6099,17 +6100,18 @@ SparseComplexMatrix::fsolve (MatrixType 
 		  retval.xridx(j) = static_cast<octave_idx_type *>(X->i)[j];
 		  retval.xdata(j) = static_cast<Complex *>(X->x)[j];
 		}
 
 	      BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 	      CHOLMOD_NAME(free_sparse) (&X, cm);
 	      CHOLMOD_NAME(free_factor) (&L, cm);
 	      CHOLMOD_NAME(finish) (cm);
-	      CHOLMOD_NAME(print_common) (" ", cm);
+	      static char tmp[] = " ";
+	      CHOLMOD_NAME(print_common) (tmp, cm);
 	      END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 	    }
 #else
 	  (*current_liboctave_warning_handler)
 	    ("CHOLMOD not installed");
 
 	  mattype.mark_as_unsymmetric ();
 	  typ = MatrixType::Full;
@@ -6391,17 +6393,18 @@ SparseComplexMatrix::fsolve (MatrixType 
 		  for (octave_idx_type i = 0; i < b.rows(); i++)
 		    retval.xelem(i,j) = static_cast<Complex *>(X->x)[jr + i];
 		}
 
 	      BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 	      CHOLMOD_NAME(free_dense) (&X, cm);
 	      CHOLMOD_NAME(free_factor) (&L, cm);
 	      CHOLMOD_NAME(finish) (cm);
-	      CHOLMOD_NAME(print_common) (" ", cm);
+	      static char tmp[] = " ";
+	      CHOLMOD_NAME(print_common) (tmp, cm);
 	      END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 	    }
 #else
 	  (*current_liboctave_warning_handler)
 	    ("CHOLMOD not installed");
 
 	  mattype.mark_as_unsymmetric ();
 	  typ = MatrixType::Full;
@@ -6646,17 +6649,18 @@ SparseComplexMatrix::fsolve (MatrixType 
 		  retval.xridx(j) = static_cast<octave_idx_type *>(X->i)[j];
 		  retval.xdata(j) = static_cast<Complex *>(X->x)[j];
 		}
 
 	      BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 	      CHOLMOD_NAME(free_sparse) (&X, cm);
 	      CHOLMOD_NAME(free_factor) (&L, cm);
 	      CHOLMOD_NAME(finish) (cm);
-	      CHOLMOD_NAME(print_common) (" ", cm);
+	      static char tmp[] = " ";
+	      CHOLMOD_NAME(print_common) (tmp, cm);
 	      END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 	    }
 #else
 	  (*current_liboctave_warning_handler)
 	    ("CHOLMOD not installed");
 
 	  mattype.mark_as_unsymmetric ();
 	  typ = MatrixType::Full;
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,22 @@
 2007-04-03  John W. Eaton  <jwe@octave.org>
 
+	* intNDArray.cc (intNDArray): Delete spurious semicolon.
+
+	* CMatrix.cc (ComplexMatrix::tinverse): Use Array<T> and
+	fortran_vec method instead of OCTAVE_LOCAL_BUFFER to avoid
+	"maybe clobbered by vfork" warning.
+
+	* Sparse-op-defs.h (SPARSE_CUMSUM): Add parens to avoid ambiguous
+	if/else.
+
+	* oct-spparms.h (octave_sparse_params): Define copy constructor
+	and destructor.
+
 	* Array.cc (assignN): Don't resize dimension if corresponding
 	index is empty.
 
 2007-04-02  John W. Eaton  <jwe@octave.org>
 
 	* dMatrix.h (Matrix::inverse): Reinstate versions without
 	MatrixType argument.
 	* CMatrix.h (ComplexMatrix::inverse): Likewise.
diff --git a/liboctave/Sparse-op-defs.h b/liboctave/Sparse-op-defs.h
--- a/liboctave/Sparse-op-defs.h
+++ b/liboctave/Sparse-op-defs.h
@@ -1456,20 +1456,22 @@ Boston, MA 02110-1301, USA.
           octave_idx_type nel = 0; \
 	  for (octave_idx_type i = 0; i < nc; i++) \
             { \
               ELT_TYPE t = ELT_TYPE (); \
 	      for (octave_idx_type j = cidx (i); j < cidx (i+1); j++)	\
                 { \
                   t += data(j); \
                   if (t != ELT_TYPE ()) \
-                    if (j == cidx(i+1) - 1) \
-		      nel += nr - ridx(j); \
-                    else \
-		      nel += ridx(j+1) - ridx(j); \
+		    { \
+                      if (j == cidx(i+1) - 1) \
+			nel += nr - ridx(j);  \
+		      else \
+			nel += ridx(j+1) - ridx(j); \
+		    } \
                 } \
 	    } \
 	  retval = RET_TYPE (nr, nc, nel); \
           retval.cidx(0) = 0; \
 	  octave_idx_type ii = 0; \
 	  for (octave_idx_type i = 0; i < nc; i++) \
             { \
               ELT_TYPE t = ELT_TYPE (); \
diff --git a/liboctave/dSparse.cc b/liboctave/dSparse.cc
--- a/liboctave/dSparse.cc
+++ b/liboctave/dSparse.cc
@@ -6048,17 +6048,18 @@ SparseMatrix::fsolve (MatrixType &mattyp
 		  for (octave_idx_type i = 0; i < b.rows(); i++)
 		    retval.xelem(i,j) = static_cast<double *>(X->x)[jr + i];
 		}
 
 	      BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 	      CHOLMOD_NAME(free_dense) (&X, cm);
 	      CHOLMOD_NAME(free_factor) (&L, cm);
 	      CHOLMOD_NAME(finish) (cm);
-	      CHOLMOD_NAME(print_common) (" ", cm);
+	      static char tmp[] = " ";
+	      CHOLMOD_NAME(print_common) (tmp, cm);
 	      END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 	    }
 #else
 	  (*current_liboctave_warning_handler)
 	    ("CHOLMOD not installed");
 
 	  mattype.mark_as_unsymmetric ();
 	  typ = MatrixType::Full;
@@ -6295,17 +6296,18 @@ SparseMatrix::fsolve (MatrixType &mattyp
 		  retval.xridx(j) = static_cast<octave_idx_type *>(X->i)[j];
 		  retval.xdata(j) = static_cast<double *>(X->x)[j];
 		}
 
 	      BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 	      CHOLMOD_NAME(free_sparse) (&X, cm);
 	      CHOLMOD_NAME(free_factor) (&L, cm);
 	      CHOLMOD_NAME(finish) (cm);
-	      CHOLMOD_NAME(print_common) (" ", cm);
+	      static char tmp[] = " ";
+	      CHOLMOD_NAME(print_common) (tmp, cm);
 	      END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 	    }
 #else
 	  (*current_liboctave_warning_handler)
 	    ("CHOLMOD not installed");
 
 	  mattype.mark_as_unsymmetric ();
 	  typ = MatrixType::Full;
@@ -6559,17 +6561,18 @@ SparseMatrix::fsolve (MatrixType &mattyp
 		  for (octave_idx_type i = 0; i < b.rows(); i++)
 		    retval.xelem(i,j) = static_cast<Complex *>(X->x)[jr + i];
 		}
 
 	      BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 	      CHOLMOD_NAME(free_dense) (&X, cm);
 	      CHOLMOD_NAME(free_factor) (&L, cm);
 	      CHOLMOD_NAME(finish) (cm);
-	      CHOLMOD_NAME(print_common) (" ", cm);
+	      static char tmp[] = " ";
+	      CHOLMOD_NAME(print_common) (tmp, cm);
 	      END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 	    }
 #else
 	  (*current_liboctave_warning_handler)
 	    ("CHOLMOD not installed");
 
 	  mattype.mark_as_unsymmetric ();
 	  typ = MatrixType::Full;
@@ -6826,17 +6829,18 @@ SparseMatrix::fsolve (MatrixType &mattyp
 		  retval.xridx(j) = static_cast<octave_idx_type *>(X->i)[j];
 		  retval.xdata(j) = static_cast<Complex *>(X->x)[j];
 		}
 
 	      BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 	      CHOLMOD_NAME(free_sparse) (&X, cm);
 	      CHOLMOD_NAME(free_factor) (&L, cm);
 	      CHOLMOD_NAME(finish) (cm);
-	      CHOLMOD_NAME(print_common) (" ", cm);
+	      static char tmp[] = " ";
+	      CHOLMOD_NAME(print_common) (tmp, cm);
 	      END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 	    }
 #else
 	  (*current_liboctave_warning_handler)
 	    ("CHOLMOD not installed");
 
 	  mattype.mark_as_unsymmetric ();
 	  typ = MatrixType::Full;
diff --git a/liboctave/data-conv.cc b/liboctave/data-conv.cc
--- a/liboctave/data-conv.cc
+++ b/liboctave/data-conv.cc
@@ -21,16 +21,17 @@ 02110-1301, USA.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cctype>
+#include <cstdlib>
 
 #include <iostream>
 #include <vector>
 
 #include "byte-swap.h"
 #include "data-conv.h"
 #include "lo-error.h"
 
diff --git a/liboctave/intNDArray.cc b/liboctave/intNDArray.cc
--- a/liboctave/intNDArray.cc
+++ b/liboctave/intNDArray.cc
@@ -93,17 +93,17 @@ intNDArray<T>::compute_index (Array<octa
 {
   return ::compute_index (ra_idx, dimensions);
 }
 
 template <class T>
 intNDArray<T>
 intNDArray<T>::concat (const intNDArray<T>& rb, const Array<octave_idx_type>& ra_idx)
 {
-  if (rb.numel () > 0);
+  if (rb.numel () > 0)
     insert (rb, ra_idx);
   return *this;
 }
 
 template <class T>
 intNDArray<T>&
 intNDArray<T>::insert (const intNDArray<T>& a, octave_idx_type r, octave_idx_type c)
 {
diff --git a/liboctave/oct-fftw.cc b/liboctave/oct-fftw.cc
--- a/liboctave/oct-fftw.cc
+++ b/liboctave/oct-fftw.cc
@@ -97,17 +97,17 @@ octave_fftw_planner::method (FftwMethod 
 	}
     }
   else
     ret = UNKNOWN;
   return ret;
 }
 
 #define CHECK_SIMD_ALIGNMENT(x) \
-  ((reinterpret_cast<ptrdiff_t> (x)) & 0xF == 0)
+  (((reinterpret_cast<ptrdiff_t> (x)) & 0xF) == 0)
 
 fftw_plan
 octave_fftw_planner::create_plan (int dir, const int rank,
 				  const dim_vector dims, octave_idx_type howmany,
 				  octave_idx_type stride, octave_idx_type dist, 
 				  const Complex *in, Complex *out)
 {
   int which = (dir == FFTW_FORWARD) ? 0 : 1;
diff --git a/liboctave/oct-inttypes.h b/liboctave/oct-inttypes.h
--- a/liboctave/oct-inttypes.h
+++ b/liboctave/oct-inttypes.h
@@ -19,16 +19,18 @@ along with Octave; see the file COPYING.
 Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 02110-1301, USA.
 
 */
 
 #if !defined (octave_inttypes_h)
 #define octave_inttypes_h 1
 
+#include <climits>
+
 #include <limits>
 #include <iostream>
 
 #include "oct-types.h"
 #include "lo-ieee.h"
 #include "lo-mappers.h"
 
 template <class T1, class T2>
diff --git a/liboctave/oct-sort.cc b/liboctave/oct-sort.cc
--- a/liboctave/oct-sort.cc
+++ b/liboctave/oct-sort.cc
@@ -80,16 +80,17 @@ The Python license is
   Agreement.
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cassert>
+#include <cstdlib>
 
 #include "lo-mappers.h"
 #include "quit.h"
 #include "oct-sort.h"
 
 #define IFLT(a,b)  if (compare == NULL ? ((a) < (b)) : compare ((a), (b)))
 
 template <class T>
diff --git a/liboctave/oct-spparms.h b/liboctave/oct-spparms.h
--- a/liboctave/oct-spparms.h
+++ b/liboctave/oct-spparms.h
@@ -45,16 +45,32 @@ protected:
       keys (OCTAVE_SPARSE_CONTROLS_SIZE) 
   {
     init_keys ();
     do_defaults ();
   }
 
 public:
 
+  octave_sparse_params (const octave_sparse_params& a)
+    : params (a.params), keys (a.keys) { }
+
+  octave_sparse_params& operator = (const octave_sparse_params& a)
+  {
+    if (&a != this)
+      {
+	params = a.params;
+	keys = a.keys;
+      }
+    
+    return *this;
+  }
+
+  ~octave_sparse_params (void) { }
+
   static bool instance_ok (void);
 
   static void defaults (void);
 
   static void tight (void);
   
   static string_vector get_keys (void);
 
diff --git a/liboctave/oct-syscalls.cc b/liboctave/oct-syscalls.cc
--- a/liboctave/oct-syscalls.cc
+++ b/liboctave/oct-syscalls.cc
@@ -21,16 +21,17 @@ 02110-1301, USA.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cerrno>
+#include <cstdlib>
 
 #include <string.h>
 
 #ifdef HAVE_SYS_TYPES_H
 #include <sys/types.h>
 #endif
 
 #ifdef HAVE_UNISTD_H
diff --git a/liboctave/sparse-base-chol.cc b/liboctave/sparse-base-chol.cc
--- a/liboctave/sparse-base-chol.cc
+++ b/liboctave/sparse-base-chol.cc
@@ -209,20 +209,22 @@ sparse_base_chol<chol_type, chol_elt, p_
 
   if (! natural)
     {
       perms.resize (a_nr);
       for (octave_idx_type i = 0; i < a_nr; i++)
 	perms(i) = static_cast<octave_idx_type *>(Lfactor->Perm)[i];
     }
 
+  static char tmp[] = " ";
+
   BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
   CHOLMOD_NAME(free_factor) (&Lfactor, cm);
   CHOLMOD_NAME(finish) (cm);
-  CHOLMOD_NAME(print_common) (" ", cm);
+  CHOLMOD_NAME(print_common) (tmp, cm);
   END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
 #else
   (*current_liboctave_error_handler) 
     ("Missing CHOLMOD. Sparse cholesky factorization disabled");
 #endif
   return info;
 }
 
diff --git a/src/dirfns.cc b/src/dirfns.cc
--- a/src/dirfns.cc
+++ b/src/dirfns.cc
@@ -142,17 +142,17 @@ directory is not changed.\n\
 	return retval;
     }
 
   return retval;
 }
 
 DEFALIAS (chdir, cd);
 
-DEFUN (pwd, , nargout,
+DEFUN (pwd, , ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} pwd ()\n\
 Return the current working directory.\n\
 @seealso{dir, ls}\n\
 @end deftypefn")
 {
   return octave_value (octave_env::getcwd ());
 }
