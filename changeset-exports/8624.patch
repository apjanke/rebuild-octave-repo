# HG changeset patch
# User Ben Abbott <bpabbott@mac.com>
# Date 1233197847 18000
#      Wed Jan 28 21:57:27 2009 -0500
# Node ID ff7d90d92db8d232b77b6e08b2ea599246a5f3af
# Parent  53fb843ca4984daa89169f8a16c7390a01b66583
gnuplot_drawnow.m: style fixes.

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,9 +1,11 @@
-2009-01-28  Ben Abbott  <bpabbott@mac.com>
+2009-01-28  Ben Abbott <bpabbott@mac.com>
+
+	* plot/gnuplot_drawnow.m: Style fixes.
 
 	* plot/__gnuplot_has_feature__.m: New file, checks for supported
 	feature.
 
 2009-01-28  Jaroslav Hajek  <highegg@gmail.com>
 
 	* optimization/fsolve.m: Don't use pivoting at all (for the time
 	being).
diff --git a/scripts/plot/gnuplot_drawnow.m b/scripts/plot/gnuplot_drawnow.m
--- a/scripts/plot/gnuplot_drawnow.m
+++ b/scripts/plot/gnuplot_drawnow.m
@@ -29,17 +29,18 @@
 
 function gnuplot_drawnow (h, term, file, mono, debug_file)
 
   if (nargin < 4)
     mono = false;
   endif
 
   if (nargin >= 3 && nargin <= 5)
-    ## Produce various output formats, or redirect gnuplot stream to a debug file
+    ## Produce various output formats, or redirect gnuplot stream to a
+    ## debug file.
     plot_stream = [];
     fid = [];
     unwind_protect
       plot_stream = open_gnuplot_stream (1, []);
       enhanced = gnuplot_set_term (plot_stream (1), h, term, file);
       __go_draw_figure__ (h, plot_stream, enhanced, mono);
       if (nargin == 5)
         fid = fopen (debug_file, "wb");
@@ -50,17 +51,17 @@ function gnuplot_drawnow (h, term, file,
       if (! isempty (plot_stream))
         pclose (plot_stream);
       endif
       if (! isempty (fid))
         fclose (fid);
       endif
     end_unwind_protect
   elseif (nargin == 1)
-    ##  Graphics terminal for display
+    ##  Graphics terminal for display.
     plot_stream = get (h, "__plot_stream__");
     if (isempty (plot_stream))
       plot_stream = open_gnuplot_stream (2, h);
     endif
     enhanced = gnuplot_set_term (plot_stream (1), h);
     __go_draw_figure__ (h, plot_stream (1), enhanced, mono);
     fflush (plot_stream (1));
   else
@@ -82,45 +83,45 @@ function [plot_stream, enhanced] = open_
       error ("drawnow: failed to open connection to gnuplot");
     endif
   endif
   if (! isempty (h))
     set (h, "__plot_stream__", plot_stream);
   endif
 endfunction
 
-function [ enhanced ] = gnuplot_set_term (plot_stream, h, term, file)
-  ## Generate the gnuplot "set terminal <term> ..." command. Include the subset
-  ## of properties "position", "units", "paperposition", "paperunits", "name", 
-  ## and "numbertitle". When "term" originates from print.m, it may include
-  ## gnuplot terminal options.
+function enhanced = gnuplot_set_term (plot_stream, h, term, file)
+  ## Generate the gnuplot "set terminal <term> ..." command.  Include
+  ## the subset of properties "position", "units", "paperposition",
+  ## "paperunits", "name", and "numbertitle".  When "term" originates
+  ## from print.m, it may include gnuplot terminal options.
   if (nargin == 2)
-    ## This supports the gnuplot backend
+    ## This supports the gnuplot backend.
     term = gnuplot_term ();
     opts_str = "";
   else
-    ## Get the one word terminal id and save the remaining as options to be passed
-    ## on to gnuplot. The terminal may respect the backend.
+    ## Get the one word terminal id and save the remaining as options to
+    ## be passed on to gnuplot.  The terminal may respect the backend.
     [term, opts_str] = gnuplot_trim_term (term);
   endif
 
   enhanced = gnuplot_is_enhanced_term (term);
 
-  ## Set the terminal
+  ## Set the terminal.
   if (! isempty (term))
 
     if (enhanced)
       enh_str = "enhanced";
     else
       enh_str = "";
     endif
 
     if (! isempty (h) && isfigure (h))
 
-      ## Generate gnuoplot title string for backend plot windows
+      ## Generate gnuoplot title string for backend plot windows.
       if (isbackend (term))
         fig.numbertitle = get (h, "numbertitle");
         fig.name = get (h, "name");
         if (strcmpi (get (h, "numbertitle"), "on"))
           title_str = sprintf ("Figure %d", h);
         else
           title_str = "";
         endif
@@ -145,30 +146,30 @@ function [ enhanced ] = gnuplot_set_term
           ## Get size of the printed plot in inches.
           gnuplot_size = get_canvassize (h);
           ## If the output is a bitmap, convert to pixels.
           if (isbitmap (term) || strcmpi (term, "svg"))
             gnuplot_size = gnuplot_size * get (0, "screenpixelsperinch");
           endif
         endif
         if (all (gnuplot_size > 0))
-          ## Set terminal size
+          ## Set terminal size.
           terminals_with_size = {"emf", "gif", "jpeg", "latex", "pbm", ...
                                  "pdf", "png", "postscript", "svg", "wxt", ...
                                  "epslatex", "pstex", "pslatex"};
           if (any (strncmpi (term, terminals_with_size, 3)))
-            size_str = sprintf("size %d,%d", gnuplot_size(1), gnuplot_size(2));
+            size_str = sprintf ("size %d,%d", gnuplot_size(1), gnuplot_size(2));
           elseif (any (strncmpi (term, {"aqua", "fig"}, 3)))
             ## Aqua and Fig also have size, but the format is different.
-            size_str = sprintf("size %d %d", gnuplot_size(1), gnuplot_size(2));
+            size_str = sprintf ("size %d %d", gnuplot_size(1), gnuplot_size(2));
           elseif (any (strncmpi (term, {"corel", "hpgl"}, 3)))
-            ## The size for corel and hpgl are goes at the end (implicit)
-            size_str = sprintf("%d %d",gnuplot_size(1), gnuplot_size(2));
+            ## The size for corel and hpgl are goes at the end (implicit).
+            size_str = sprintf ("%d %d",gnuplot_size(1), gnuplot_size(2));
           elseif (any (strncmpi (term, {"dxf"}, 3)))
-            ## DXF uses autocad units
+            ## DXF uses autocad units.
             size_str = "";
           else
             size_str = "";
           endif
         else
           size_str = "";
 	  warning ("gnuplot_set_term: size is zero")
         endif
@@ -181,32 +182,32 @@ function [ enhanced ] = gnuplot_set_term
         disp ("gnuplot_set_term: figure handle is empty")
       elseif !isfigure(h)
         disp ("gnuplot_set_term: not a figure handle")
       endif
       title_str = "";
       size_str = "";
     endif
 
-    ## Set the gnuplot terminal (type, enhanced?, title, & size)
+    ## Set the gnuplot terminal (type, enhanced?, title, & size).
     if (! isempty (term))
       term_str = sprintf ("set terminal %s", term);
       if (! isempty (enh_str))
         term_str = sprintf ("%s %s", term_str, enh_str);
       endif
       if (! isempty (title_str))
         term_str = sprintf ("%s %s", term_str, title_str);
       endif
       if (! isempty (size_str))
         ## size_str goes last to permit specification of canvas size
-        ## for terminals cdr/corel
+        ## for terminals cdr/corel.
         term_str = sprintf ("%s %s", term_str, size_str);
       endif
       if (nargin > 2 && ischar (opts_str))
-        ## Options must go last
+        ## Options must go last.
         term_str = sprintf ("%s %s", term_str, opts_str);
       endif
       fprintf (plot_stream, sprintf ("%s\n", term_str));
     else
       ## gnuplot will pick up the GNUTERM environment variable itself
       ## so no need to set the terminal type if not also setting the
       ## figure title, enhanced mode, or position.
     endif
@@ -277,17 +278,17 @@ endfunction
 
 function ret = isbitmap (term)
   if (nargin == 0)
     term = gnuplot_term ();
   endif
   ret = any (strcmpi ({"png", "jpeg", "gif", "pbm"}, term));
 endfunction
 
-function [ fig_size ] = get_figsize (h)
+function fig_size = get_figsize (h)
   ## Determine the size of the figure in pixels  
   possize = get (h, "position")(3:4);
   units = get (h, "units");
   t.inches      = 1;
   t.centimeters = 2.54;
   t.pixels      = get (0, "screenpixelsperinch");
   ## gnuplot treats pixels/points the same
   t.points      = t.pixels;
@@ -296,17 +297,17 @@ function [ fig_size ] = get_figsize (h)
   if (prod (fig_size) > 1e8)
     warning ("gnuplot_drawnow: figure size is excessive. Reducing to 1024x768.")
     fig_size = [1024, 768];
     position = get (h, "position");
     set (h, "position", [position(1:2), fig_size], "units", "pixels");
   endif
 endfunction
 
-function [plotsize] = get_canvassize (h)
+function plotsize = get_canvassize (h)
   ## Returns the intended size of the plot on the page in inches. 
   ## "canvas size" is a gnuplot term. Gnuplot doesn't explicity plot to
   ## an area/position on a page. Instead it plots to a "canvas" of a 
   ## explicit or implicit size.
   t.points      = get (0, "screenpixelsperinch");
   t.centimeters = 2.54;
   t.inches      = 1.00;
   papersize = get_papersize (h);
@@ -314,72 +315,75 @@ function [plotsize] = get_canvassize (h)
   paperposition = get (h, "paperposition") / t.(paperunits);
   if (strcmpi (paperunits, "normalized"))
     plotsize = papersize .* paperposition(3:4);
   else
     plotsize = paperposition(3:4);
   endif
 endfunction
 
-function [ papersize ] = get_papersize (h)
+function papersize = get_papersize (h)
   ## Returns the papersize in inches
   persistent papertypes papersizes
   if (isempty (papertypes))
     papertypes = {"usletter", "uslegal", ...
                  "a0", "a1", "a2", "a3", "a4", "a5", ...
                  "b0", "b1", "b2", "b3", "b4", "b5", ...
                  "arch-a", "arch-b", "arch-c", "arch-d", "arch-e", ...
                  "a", "b", "c", "d", "e", ...
                  "tabloid", "<custom>"};
-    papersizes = [ 8.500, 11.000
-                   8.500, 14.000
-                  33.135, 46.847
-                  23.404, 33.135
-                  16.548, 23.404
-                  11.694, 16.528
-                   8.268, 11.693
-                   5.847,  8.264
-                  40.543, 57.366
-                  28.683, 40.503
-                  20.252, 28.683
-                  14.342, 20.252
-                  10.126, 14.342
-                   7.171, 10.126
-                   9.000, 12.000
-                  12.000, 18.000
-                  18.000, 24.000
-                  24.000, 36.000
-                  36.000, 48.000
-                   8.500, 11.000
-                  11.000, 17.000
-                  17.000, 22.000
-                  22.000, 34.000
-                  34.000, 44.000
-                  11.000, 17.000
+    papersizes = [ 8.500, 11.000;
+                   8.500, 14.000;
+                  33.135, 46.847;
+                  23.404, 33.135;
+                  16.548, 23.404;
+                  11.694, 16.528;
+                   8.268, 11.693;
+                   5.847,  8.264;
+                  40.543, 57.366;
+                  28.683, 40.503;
+                  20.252, 28.683;
+                  14.342, 20.252;
+                  10.126, 14.342;
+                   7.171, 10.126;
+                   9.000, 12.000;
+                  12.000, 18.000;
+                  18.000, 24.000;
+                  24.000, 36.000;
+                  36.000, 48.000;
+                   8.500, 11.000;
+                  11.000, 17.000;
+                  17.000, 22.000;
+                  22.000, 34.000;
+                  34.000, 44.000;
+                  11.000, 17.000;
                    8.500, 11.000];
     ## <custom> has a page size since we're not doing any checking here.
     papersizes = round (1000 * papersizes);
   endif
 
   paperunits = get (h, "paperunits");
   if (strcmpi (paperunits, "normalized"))
     papertype = get (h, "papertype");
     n = find (strcmpi (papertypes, papertype));
     papersize = 0.001 * papersizes(n, :);
     paperunits = "inches";
   else
     t.points      = 72;
     t.centimeters = 2.54;
     t.inches      = 1.00;
-    ## FIXME - this papersize/type administration should be done at a lower level.
+    ## FIXME -- this papersize/type administration should be done at a
+    ## lower level.
     if (strcmpi (get (h, "papertype"), "<custom>"))
-      ## if the type is custom but the size is a standard, then set the standard type.
+      ## If the type is custom but the size is a standard, then set the
+      ## standard type.
       papersize = get (h "papersize");
       papersize = papersize * t.(paperunits);
-      n = find (all ((ones ([size(papersizes, 1), 1]) * round(1000*papersize) - papersizes) == 0, 2));
+      n = find (all ((ones ([size(papersizes, 1), 1])
+		      * round (1000*papersize) - papersizes) == 0, 2));
       if (! isempty (n))
         set (h, "papertype", papertypes{n});
       endif
     else
       papertype = get (h, "papertype");
       n = find (strcmpi (papertypes, papertype));
       papersize = papersizes(n,:) * 0.001;
       set (h, "papersize", papersize * t.(paperunits));
