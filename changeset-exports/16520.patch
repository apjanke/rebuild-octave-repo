# HG changeset patch
# User Torsten <ttl@justmail.de>
# Date 1366055307 -7200
#      Mon Apr 15 21:48:27 2013 +0200
# Node ID 086b5e81245b57344e2808959078845d83b58897
# Parent  3e8fd0c479b48a055540467faa9906a38222a788
find-dialog: find previous button and initial position next to the editor

* file-editor-tab.cc(find): pass file editor to the find dialog

* find-dialog.cc(constructor): new button for find previous, place dialog
  next to the editor
  (find_next,find_prev): new functions determining the search direction
  (find): renamed old function search_next, now with parameter for the dearch
  direction
  (replace_all): call function find instead of search next, message box with
  replaced items
  (no_matches_message): new function for message box on no more matches

* find-dialog.h: new functions find, find_next, find_prev, no_matches_message,
  new button for find_prev

diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -599,17 +599,18 @@ file_editor_tab::find (const QWidget* ID
   // Rather than Qt::DeleteOnClose, let the find feature hang about
   // in case it contains useful information like previous searches
   // and so on.  Perhaps one find dialog for the whole editor is
   // better, but individual find dialogs has the nice feature of
   // retaining position per file editor tabs, which can be undocked.
 
   if (!_find_dialog)
     {
-       _find_dialog = new find_dialog (_edit_area);
+      _find_dialog = new find_dialog (_edit_area, 
+                                      qobject_cast<QWidget *>(sender ()));
       connect (_find_dialog, SIGNAL (finished (int)),
                this, SLOT (handle_find_dialog_finished (int)));
       _find_dialog->setWindowModality (Qt::NonModal);
       _find_dialog_geometry = _find_dialog->geometry ();
     }
 
   if (!_find_dialog->isVisible ())
     {
diff --git a/libgui/src/m-editor/find-dialog.cc b/libgui/src/m-editor/find-dialog.cc
--- a/libgui/src/m-editor/find-dialog.cc
+++ b/libgui/src/m-editor/find-dialog.cc
@@ -1,14 +1,33 @@
 /****************************************************************************
-**
-** Copyright (C) 2009 Nokia Corporation and/or its subsidiary(-ies).
-** All rights reserved.
-** Contact: Nokia Corporation (qt-info@nokia.com)
-**
+
+Find dialog derived from an example from Qt Toolkit (license below (**))
+
+Copyright (C) 2012-2013 Torsten <ttl@justmail.de>
+Copyright (C) 2009 Nokia Corporation and/or its subsidiary(-ies).
+ All rights reserved.
+ Contact: Nokia Corporation (qt-info@nokia.com)
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
 ** This file is part of the examples of the Qt Toolkit.
 **
 ** $QT_BEGIN_LICENSE:LGPL$
 ** Commercial Usage
 ** Licensees holding valid Qt Commercial licenses may use this file in
 ** accordance with the Qt Commercial License Agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
 ** a written agreement between you and Nokia.
@@ -62,41 +81,45 @@ find_dialog::find_dialog (QsciScintilla*
   _replace_line_edit = new QLineEdit;
   _replace_label->setBuddy (_replace_line_edit);
 
   _case_check_box = new QCheckBox (tr ("Match &case"));
   _from_start_check_box = new QCheckBox (tr ("Search from &start"));
   _wrap_check_box = new QCheckBox (tr ("&Wrap while searching"));
   _wrap_check_box->setChecked(true);
   _find_next_button = new QPushButton (tr ("&Find Next"));
+  _find_prev_button = new QPushButton (tr ("Find &Previous"));
   _replace_button = new QPushButton (tr ("&Replace"));
   _replace_all_button = new QPushButton (tr ("Replace &All"));
 
   _more_button = new QPushButton (tr ("&More"));
   _more_button->setCheckable (true);
   _more_button->setAutoDefault (false);
 
   _button_box = new QDialogButtonBox (Qt::Vertical);
   _button_box->addButton (_find_next_button, QDialogButtonBox::ActionRole);
+  _button_box->addButton (_find_prev_button, QDialogButtonBox::ActionRole);
   _button_box->addButton (_replace_button, QDialogButtonBox::ActionRole);
   _button_box->addButton (_replace_all_button, QDialogButtonBox::ActionRole);
   _button_box->addButton (_more_button, QDialogButtonBox::ActionRole);
   _button_box->addButton (QDialogButtonBox::Close);
 
   _extension = new QWidget (this);
   _whole_words_check_box = new QCheckBox (tr ("&Whole words"));
   _regex_check_box = new QCheckBox (tr ("Regular E&xpressions"));
   _backward_check_box = new QCheckBox (tr ("Search &backward"));
   _search_selection_check_box = new QCheckBox (tr ("Search se&lection"));
   _search_selection_check_box->setCheckable (false); // TODO: Not implemented.
   _search_selection_check_box->setEnabled (false);
 
   _edit_area = edit_area;
   connect (_find_next_button,   SIGNAL (clicked ()),
-           this,                SLOT (search_next ()));
+           this,                SLOT (find_next ()));
+  connect (_find_prev_button,   SIGNAL (clicked ()),
+           this,                SLOT (find_prev ()));
   connect (_more_button,        SIGNAL (toggled (bool)),
            _extension,          SLOT (setVisible (bool)));
   connect (_replace_button,     SIGNAL (clicked ()),
            this,                SLOT (replace ()));
   connect (_replace_all_button, SIGNAL (clicked ()),
            this,                SLOT (replace_all ()));
   connect (_backward_check_box, SIGNAL (stateChanged (int)),
            this,                SLOT (handle_backward_search_changed (int)));
@@ -130,16 +153,18 @@ find_dialog::find_dialog (QsciScintilla*
   main_layout->addWidget (_button_box, 0, 1);
   main_layout->addWidget (_extension, 1, 0);
   setLayout (main_layout);
 
   _extension->hide ();
   _find_next_button->setDefault (true);
   _find_result_available = false;
 
+  move (p->x() + p->frameGeometry ().width (), p->y());
+
 }
 
 // set text of "search from start" depending on backward search
 void
 find_dialog::handle_backward_search_changed (int backward)
 {
   if (backward)
     _from_start_check_box->setText (tr ("Search from end"));
@@ -155,27 +180,40 @@ find_dialog::init_search_text ()
     {
       int lbeg, lend, cbeg, cend;
       _edit_area->getSelection(&lbeg,&cbeg,&lend,&cend);
       if (lbeg == lend)
         _search_line_edit->setText (_edit_area->selectedText ());
     }
 }
 
+void
+find_dialog::find_next ()
+{
+  find (!_backward_check_box->isChecked ());
+}
 
 void
-find_dialog::search_next ()
+find_dialog::find_prev ()
+{
+  find (_backward_check_box->isChecked ());
+}
+
+void
+find_dialog::find (bool forward)
 {
   int line = -1, col = -1;
   bool do_wrap = _wrap_check_box->isChecked ();
+  bool do_forward = true;
 
   if (_find_result_available)
-    { // we found a match last time
-      if (_backward_check_box->isChecked ())
+    { // we found a match last time, cursor is at the end of the match
+      if (!forward)
         {  // backward: go back one position or we will find the same again
+          do_forward = false;
           _edit_area->getCursorPosition (&line,&col);
           if (col > 0)
             _edit_area->setCursorPosition (line,--col);
         }
     }
 
   _find_result_available = false;
 
@@ -189,42 +227,39 @@ find_dialog::search_next ()
 
   if (_edit_area)
     {
       _find_result_available = _edit_area->findFirst (_search_line_edit->text (),
                                                       _regex_check_box->isChecked (),
                                                       _case_check_box->isChecked (),
                                                       _whole_words_check_box->isChecked (),
                                                       do_wrap,
-                                                      !_backward_check_box->isChecked (),
+                                                      do_forward,
                                                       line,col,
                                                       true
 #ifdef HAVE_FINDFIRST_MODERN
                                                       , true
 #endif
                                                       );
     }
   if (_find_result_available)
     _from_start_check_box->setChecked (0);
   else
-    {
-     	QMessageBox msg_box (QMessageBox::Information, tr ("Find Result"),
-                           tr ("No more matches found"), QMessageBox::Ok, this);
-      msg_box.exec ();
-    }
+    no_matches_message ();
 }
 
 
 void
 find_dialog::replace ()
 {
   if (_edit_area)
     {
       _edit_area->replace (_replace_line_edit->text ());
-      _edit_area->findNext();
+      if (!_edit_area->findNext())
+        no_matches_message ();
     }
 }
 
 void
 find_dialog::replace_all ()
 {
   int count = 0;
 
@@ -239,20 +274,33 @@ find_dialog::replace_all ()
     {
       cs = Qt::CaseInsensitive;
     }
   strDiff = QString::compare(_search_line_edit->text(),_replace_line_edit->text(),cs);
 
   // replace all if strings are different
   if (_edit_area && strDiff )
     {
-      search_next ();  // find first occurence
+      find (!_backward_check_box->isChecked ());  // find first occurence
       while (_find_result_available)   // while search string is found
         {
           _edit_area->replace (_replace_line_edit->text ());   // replace
           count++;                                             // inc counter
-          _find_result_available = _edit_area->findNext();                     // and find next
+          _find_result_available = _edit_area->findNext();     // and find next
         }
+      QMessageBox msg_box (QMessageBox::Information, tr ("Replace Result"),
+                           tr ("%1 items replaced").arg(count),
+                           QMessageBox::Ok, this);
+      msg_box.exec ();
     }
   // TODO: Show number of replaced strings
 }
 
+void
+find_dialog::no_matches_message ()
+{
+ 	QMessageBox msg_box (QMessageBox::Information, tr ("Find Result"),
+                       tr ("No more matches found"), QMessageBox::Ok, this);
+  msg_box.exec ();
+}
+
+
 #endif
diff --git a/libgui/src/m-editor/find-dialog.h b/libgui/src/m-editor/find-dialog.h
--- a/libgui/src/m-editor/find-dialog.h
+++ b/libgui/src/m-editor/find-dialog.h
@@ -1,14 +1,33 @@
 /****************************************************************************
-**
-** Copyright (C) 2009 Nokia Corporation and/or its subsidiary(-ies).
-** All rights reserved.
-** Contact: Nokia Corporation (qt-info@nokia.com)
-**
+
+Find dialog derived from an example from Qt Toolkit (license below (**))
+
+Copyright (C) 2012-2013 Torsten <ttl@justmail.de>
+Copyright (C) 2009 Nokia Corporation and/or its subsidiary(-ies).
+ All rights reserved.
+ Contact: Nokia Corporation (qt-info@nokia.com)
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
 ** This file is part of the examples of the Qt Toolkit.
 **
 ** $QT_BEGIN_LICENSE:LGPL$
 ** Commercial Usage
 ** Licensees holding valid Qt Commercial licenses may use this file in
 ** accordance with the Qt Commercial License Agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
 ** a written agreement between you and Nokia.
@@ -56,34 +75,38 @@ class find_dialog : public QDialog
 {
   Q_OBJECT
   public:
   find_dialog (QsciScintilla* edit_area, QWidget *parent = 0);
   void init_search_text ();
 
 private slots:
   void handle_backward_search_changed (int);
-  void search_next ();
+  void find (bool forward = true);
+  void find_next ();
+  void find_prev ();
   void replace ();
   void replace_all ();
 
 private:
+  void no_matches_message ();
   QLabel            *_search_label;
   QLineEdit         *_search_line_edit;
   QLabel            *_replace_label;
   QLineEdit         *_replace_line_edit;
   QCheckBox         *_case_check_box;
   QCheckBox         *_from_start_check_box;
   QCheckBox         *_wrap_check_box;
   QCheckBox         *_whole_words_check_box;
   QCheckBox         *_regex_check_box;
   QCheckBox         *_search_selection_check_box;
   QCheckBox         *_backward_check_box;
   QDialogButtonBox  *_button_box;
   QPushButton       *_find_next_button;
+  QPushButton       *_find_prev_button;
   QPushButton       *_replace_button;
   QPushButton       *_replace_all_button;
   QPushButton       *_more_button;
   QWidget           *_extension;
   QsciScintilla     *_edit_area;
   bool               _find_result_available;
 };
 
