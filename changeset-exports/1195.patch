# HG changeset patch
# User jwe
# Date 796666594 0
#      Fri Mar 31 16:16:34 1995 +0000
# Node ID 0da1cc2c1947dc08086a9a9592d7e97f9eda6ba6
# Parent  621fef7bcca16622435bcb70f550f90b5cda0d54
[project @ 1995-03-31 16:11:43 by jwe]

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -929,18 +929,18 @@ ComplexMatrix::inverse (int& info, doubl
   info = 0;
 
   int *ipvt = new int [nr];
   Complex *z = new Complex [nr];
   Complex *tmp_data = dup (data (), len);
 
   F77_FCN (zgeco) (tmp_data, &nr, &nc, ipvt, &rcond, z);
 
-  volatile double tmp_rcond = rcond;
-  if (tmp_rcond + 1.0 == 1.0)
+  volatile double rcond_plus_one = rcond + 1.0;
+  if (rcond_plus_one == 1.0)
     {
       info = -1;
       copy (tmp_data, data (), len);  // Restore contents.
     }
   else
     {
       int job = 1;
       Complex dummy;
@@ -1200,18 +1200,18 @@ ComplexMatrix::determinant (int& info, d
       info = 0;
       int *ipvt = new int [nr];
 
       Complex *z = new Complex [nr];
       Complex *tmp_data = dup (data (), length ());
 
       F77_FCN (zgeco) (tmp_data, &nr, &nr, ipvt, &rcond, z);
 
-      volatile double tmp_rcond = rcond;
-      if (tmp_rcond + 1.0 == 1.0)
+      volatile double rcond_plus_one = rcond + 1.0;
+      if (rcond_plus_one == 1.0)
 	{
 	  info = -1;
 	  retval = ComplexDET ();
 	}
       else
 	{
 	  int job = 10;
 	  Complex d[2];
@@ -1282,18 +1282,18 @@ ComplexMatrix::solve (const ComplexMatri
   info = 0;
   int *ipvt = new int [nr];
 
   Complex *z = new Complex [nr];
   Complex *tmp_data = dup (data (), length ());
 
   F77_FCN (zgeco) (tmp_data, &nr, &nr, ipvt, &rcond, z);
 
-  volatile double tmp_rcond = rcond;
-  if (tmp_rcond + 1.0 == 1.0)
+  volatile double rcond_plus_one = rcond + 1.0;
+  if (rcond_plus_one == 1.0)
     {
       info = -2;
     }
   else
     {
       int job = 0;
 
       Complex *result = dup (b.data (), b.length ());
@@ -1345,18 +1345,18 @@ ComplexMatrix::solve (const ComplexColum
   info = 0;
   int *ipvt = new int [nr];
 
   Complex *z = new Complex [nr];
   Complex *tmp_data = dup (data (), length ());
 
   F77_FCN (zgeco) (tmp_data, &nr, &nr, ipvt, &rcond, z);
 
-  volatile double tmp_rcond = rcond;
-  if (tmp_rcond + 1.0 == 1.0)
+  volatile double rcond_plus_one = rcond + 1.0;
+  if (rcond_plus_one == 1.0)
     {
       info = -2;
     }
   else
     {
       int job = 0;
 
       Complex *result = dup (b.data (), b_len);
diff --git a/liboctave/CRowVector.h b/liboctave/CRowVector.h
--- a/liboctave/CRowVector.h
+++ b/liboctave/CRowVector.h
@@ -128,16 +128,18 @@ public:
 				    const RowVector& b);
 
 // other operations
 
   friend ComplexRowVector map (c_c_Mapper f, const ComplexRowVector& a);
   friend RowVector map (d_c_Mapper f, const ComplexRowVector& a);
   void map (c_c_Mapper f);
 
+  ComplexRowVector linspace (const Complex& x1, const Complex& x2, int n);
+
   Complex min (void) const;
   Complex max (void) const;
 
 // i/o
 
   friend ostream& operator << (ostream& os, const ComplexRowVector& a);
   friend istream& operator >> (istream& is, ComplexRowVector& a);
 
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -578,18 +578,18 @@ Matrix::inverse (int& info, double& rcon
   info = 0;
 
   int *ipvt = new int [nr];
   double *z = new double [nr];
   double *tmp_data = dup (data (), len);
 
   F77_FCN (dgeco) (tmp_data, &nr, &nc, ipvt, &rcond, z);
 
-  volatile double tmp_rcond = rcond;
-  if (tmp_rcond + 1.0 == 1.0)
+  volatile double rcond_plus_one = rcond + 1.0;
+  if (rcond_plus_one == 1.0)
     {
       info = -1;
       copy (tmp_data, data (), len);  // Restore matrix contents.
     }
   else
     {
       int job = 1;
       double dummy;
@@ -849,18 +849,18 @@ Matrix::determinant (int& info, double& 
       info = 0;
       int *ipvt = new int [nr];
 
       double *z = new double [nr];
       double *tmp_data = dup (data (), length ());
 
       F77_FCN (dgeco) (tmp_data, &nr, &nr, ipvt, &rcond, z);
 
-      volatile double tmp_rcond = rcond;
-      if (tmp_rcond + 1.0 == 1.0)
+      volatile double rcond_plus_one = rcond + 1.0;
+      if (rcond_plus_one == 1.0)
 	{
 	  info = -1;
 	  retval = DET ();
 	}
       else
 	{
 	  int job = 10;
 	  double d[2];
@@ -908,18 +908,18 @@ Matrix::solve (const Matrix& b, int& inf
   info = 0;
   int *ipvt = new int [nr];
 
   double *z = new double [nr];
   double *tmp_data = dup (data (), length ());
 
   F77_FCN (dgeco) (tmp_data, &nr, &nr, ipvt, &rcond, z);
 
-  volatile double tmp_rcond = rcond;
-  if (tmp_rcond + 1.0 == 1.0)
+  volatile double rcond_plus_one = rcond + 1.0;
+  if (rcond_plus_one == 1.0)
     {
       info = -2;
     }
   else
     {
       int job = 0;
 
       double *result = dup (b.data (), b.length ());
@@ -990,18 +990,18 @@ Matrix::solve (const ColumnVector& b, in
   info = 0;
   int *ipvt = new int [nr];
 
   double *z = new double [nr];
   double *tmp_data = dup (data (), length ());
 
   F77_FCN (dgeco) (tmp_data, &nr, &nr, ipvt, &rcond, z);
 
-  volatile double tmp_rcond = rcond;
-  if (tmp_rcond + 1.0 == 1.0)
+  volatile double rcond_plus_one = rcond + 1.0;
+  if (rcond_plus_one == 1.0)
     {
       info = -2;
     }
   else
     {
       int job = 0;
 
       int b_len = b.length ();
diff --git a/liboctave/dRowVector.h b/liboctave/dRowVector.h
--- a/liboctave/dRowVector.h
+++ b/liboctave/dRowVector.h
@@ -114,16 +114,18 @@ public:
   friend ComplexRowVector quotient (const RowVector& a,
 				    const ComplexRowVector& b);
 
 // other operations
 
   friend RowVector map (d_d_Mapper f, const RowVector& a);
   void map (d_d_Mapper f);
 
+  RowVector linspace (double x1, double x2, int n);
+
   double min (void) const;
   double max (void) const;
 
 // i/o
 
   friend ostream& operator << (ostream& os, const RowVector& a);
   friend istream& operator >> (istream& is, RowVector& a);
 
