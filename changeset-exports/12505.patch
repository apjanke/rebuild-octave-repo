# HG changeset patch
# User Ben Abbott  <bpabbott@mac.com>
# Date 1298762148 18000
#      Sat Feb 26 18:15:48 2011 -0500
# Node ID 6a1fe83fe1296d19767c54fdd9114a7a3e29a6f0
# Parent  d1758f03a2ec429a0c5d180c0e6be9e5373ed903
Allow command forms of example and demo.

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -56,16 +56,21 @@ 2010-02-28  Rik  <octave@nomad.inbox5.co
 
 	* sparse/treeplot.m: Use 'o' plot style as default for nodes
 
 2010-02-27  Rik  <octave@nomad.inbox5.com>
 
 	* special-matrix/pascal.m: Fix incorrect statement in documentation
 	for pascal.m.  Bug #32523.
 
+2011-02-26  Andy Buckle  <andybuckle@gmail.com>
+
+	* testfun/demo.m, testfun/example.m: Allow command forms of example
+	and demo.
+
 2011-02-26  Robert T. Short  <octave@phaselockedsystems.com>
 
 	* polynomial/polyval.m: Compute offset/normalization only when needed.
 
 2011-02-26  Robert T. Short <octave@phaselockedsystems.com>
 
 	* polynomial/polyval.m: Minor simplification in polynomial evaluation.
 
diff --git a/scripts/testfun/demo.m b/scripts/testfun/demo.m
--- a/scripts/testfun/demo.m
+++ b/scripts/testfun/demo.m
@@ -12,17 +12,18 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} demo ('@var{name}', @var{n})
+## @deftypefn  {Command} {} demo @var{name} @var{n}
+## @deftypefnx {Function File} {} demo ('@var{name}', @var{n})
 ##
 ## Runs any examples associated with the function '@var{name}'.
 ## Examples are stored in the script file, or in a file with the same
 ## name but no extension somewhere on your path.  To keep them separate
 ## from the usual script code, all lines are prefixed by @code{%!}.  Each
 ## example is introduced by the keyword 'demo' flush left to the prefix,
 ## with no intervening spaces.  The remainder of the example can contain
 ## arbitrary Octave code.  For example:
@@ -82,17 +83,19 @@
 function demo (name, n)
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
   endif
 
   if (nargin < 2)
     n = 0;
-  endif
+  elseif (strcmp ("char", class (n)))
+    n = str2double (n);
+  endif 
 
   [code, idx] = test (name, "grabdemo");
   if (length (idx) == 0)
     warning ("demo not available for %s", name);
     return;
   elseif (n >= length (idx))
     warning ("only %d demos available for %s", length (idx) - 1, name);
     return;
diff --git a/scripts/testfun/example.m b/scripts/testfun/example.m
--- a/scripts/testfun/example.m
+++ b/scripts/testfun/example.m
@@ -12,17 +12,18 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn  {Function File} {} example ('@var{name}', @var{n})
+## @deftypefn  {Command} {} example @var{name} @var{n}
+## @deftypefnx {Function File} {} example ('@var{name}', @var{n})
 ## @deftypefnx {Function File} {[@var{x}, @var{idx}] =} example ('@var{name}', @var{n})
 ##
 ##  Display the code for example @var{n} associated with the function
 ## '@var{name}', but do not run it.  If @var{n} is not given, all examples
 ## are displayed.
 ##
 ## Called with output arguments, the examples are returned in the form of
 ## a string @var{x}, with @var{idx} indicating the ending position of the
@@ -32,19 +33,22 @@
 ## @seealso{demo, test}
 ## @end deftypefn
 
 function [code_r, idx_r] = example (name, n)
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
   endif
+
   if (nargin < 2)
     n = 0;
-  endif
+  elseif (strcmp ("char", class (n)))
+    n = str2double (n);
+  endif 
 
   [code, idx] = test (name, "grabdemo");
   if (nargout > 0)
     if (n > 0)
       if (n <= length (idx))
         code_r = code(idx(n):idx(n+1)-1);
         idx_r = [1, length(code_r)+1];
       else
