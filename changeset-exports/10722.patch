# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1277285012 -7200
#      Wed Jun 23 11:23:32 2010 +0200
# Node ID 755fcb5baad390c9a7a00825088518156986b36d
# Parent  998d7ba68009ae9d4c9bbe03671bdac2a499b163
Add the reset built function

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,21 @@
+2010-06-23  David Bateman  <dbateman@free.fr>
+
+	* graphics.cc (void root_figure::reset_default_properties (void),
+	void figure::reset_default_properties (void),
+	void figure::reset_default_properties (void),
+	Freset): New functions.
+	* graphics.h.in (void graphics_object:reset_default_properies (void),
+	virtual void base_graphics_object:reset_default_properies (void)):
+	New functions.
+	(void root_figure::reset_default_properties (void),
+	void figure::reset_default_properties (void),
+	void figure::reset_default_properties (void)): Declarations.
+
 2010-06-21  Rik <octave@nomad.inbox5.com>
 
 	* DLD-FUNCTIONS/dlmread.cc: Fix spreadsheet style range option. 
         (bug #30183).
 
 2010-06-21  David Bateman  <dbateman@free.fr>
 
 	* graphics.cc (std::string radio_values:values_as_string (void)
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -2620,16 +2620,44 @@ root_figure::properties::remove_child (c
   xset (0, "currentfigure", cf.value ());
   
   base_properties::remove_child (gh);
 }
 
 property_list
 root_figure::factory_properties = root_figure::init_factory_properties ();
 
+void
+root_figure::reset_default_properties (void)
+{
+  property_list new_defaults;
+
+  for (property_list::plist_map_const_iterator p = default_properties.begin ();
+       p != default_properties.end (); p++)
+    {
+      const property_list::pval_map_type pval_map = p->second;
+      std::string prefix = p->first;
+      
+      for (property_list::pval_map_const_iterator q = pval_map.begin ();
+           q != pval_map.end ();
+           q++)
+        {
+          std::string s = q->first;
+
+          if (prefix == "axes" && (s == "position" || s == "units"))
+            new_defaults.set (prefix + s, q->second);
+          else if (prefix == "figure" && (s == "position" || s == "units" 
+                                          || s == "windowstyle" 
+                                          || s == "paperunits"))
+            new_defaults.set (prefix + s, q->second);
+        }
+    }
+  default_properties = new_defaults;
+}
+
 // ---------------------------------------------------------------------
 
 void
 figure::properties::set_currentaxes (const octave_value& v)
 {
   graphics_handle val (v);
 
   if (error_state)
@@ -2764,16 +2792,44 @@ figure::get_default (const caseless_str&
       graphics_object parent_obj = gh_manager::get_object (parent);
 
       retval = parent_obj.get_default (name);
     }
 
   return retval;
 }
 
+void
+figure::reset_default_properties (void)
+{
+  property_list new_defaults;
+
+  for (property_list::plist_map_const_iterator p = default_properties.begin ();
+       p != default_properties.end (); p++)
+    {
+      const property_list::pval_map_type pval_map = p->second;
+      std::string prefix = p->first;
+      
+      for (property_list::pval_map_const_iterator q = pval_map.begin ();
+           q != pval_map.end ();
+           q++)
+        {
+          std::string s = q->first;
+
+          if (prefix == "axes" && (s == "position" || s == "units"))
+            new_defaults.set (prefix + s, q->second);
+          else if (prefix == "figure" && (s == "position" || s == "units" 
+                                          || s == "windowstyle" 
+                                          || s == "paperunits"))
+            new_defaults.set (prefix + s, q->second);
+        }
+    }
+  default_properties = new_defaults;
+}
+
 // ---------------------------------------------------------------------
 
 void
 axes::properties::init (void)
 {
   position.add_constraint (dim_vector (1, 4));
   position.add_constraint (dim_vector (0, 0));
   outerposition.add_constraint (dim_vector (1, 4));
@@ -4281,16 +4337,44 @@ void
 axes::properties::clear_zoom_stack (void)
 {
   while (zoom_stack.size () > 4)
     zoom_stack.pop_front ();
 
   unzoom ();
 }
 
+void
+axes::reset_default_properties (void)
+{
+  property_list new_defaults;
+
+  for (property_list::plist_map_const_iterator p = default_properties.begin ();
+       p != default_properties.end (); p++)
+    {
+      const property_list::pval_map_type pval_map = p->second;
+      std::string prefix = p->first;
+      
+      for (property_list::pval_map_const_iterator q = pval_map.begin ();
+           q != pval_map.end ();
+           q++)
+        {
+          std::string s = q->first;
+
+          if (prefix == "axes" && (s == "position" || s == "units"))
+            new_defaults.set (prefix + s, q->second);
+          else if (prefix == "figure" && (s == "position" || s == "units" 
+                                          || s == "windowstyle" 
+                                          || s == "paperunits"))
+            new_defaults.set (prefix + s, q->second);
+        }
+    }
+  default_properties = new_defaults;
+}
+
 // ---------------------------------------------------------------------
 
 Matrix
 line::properties::compute_xlim (void) const
 {
   Matrix m (1, 3);
 
   m(0) = xdata.min_val ();
@@ -5027,16 +5111,45 @@ Return true if @var{h} is a graphics han
   if (args.length () == 1)
     retval = is_handle (args(0));
   else
     print_usage ();
 
   return retval;
 }
 
+DEFUN (reset, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} reset (@var{h}, @var{property})\n\
+Removes any defaults set for the handle @var{h}. The default figure\n\
+properties \"position\", \"units\", \"windowstyle\" and\n\
+\"paperunits\" and the default axes properties \"position\" and \"units\"\n\
+are not reset.\n\
+@end deftypefn")
+{
+  int nargin = args.length ();
+
+  if (nargin != 1)
+    print_usage ();
+  else
+    {
+      // get vector of graphics handles
+      ColumnVector hcv (args(0).vector_value ());
+
+      if (! error_state)
+        {
+          // loop over graphics objects
+          for (octave_idx_type n = 0; n < hcv.length (); n++) 
+            gh_manager::get_object (hcv(n)).reset_default_properties ();
+        }
+    }
+
+  return octave_value ();
+}
+
 DEFUN (set, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} set (@var{h}, @var{property}, @var{value}, @dots{})\n\
 @deftypefnx {Built-in Function} {} set (@var{h}, @var{properties}, @var{values})\n\
 @deftypefnx {Built-in Function} {} set (@var{h}, @var{pv})\n\
 Set named property values for the graphics handle (or vector of graphics\n\
 handles) @var{h}.\n\
 There are three ways how to give the property names and values:\n\
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -2218,16 +2218,27 @@ public:
                                          listener_mode mode = POSTSET)
     {
       if (valid_object ())
         get_properties ().delete_listener (nm, v, mode);
     }
 
   virtual void remove_all_listeners (void);
 
+  virtual void reset_default_properties (void)
+    {
+      if (valid_object ())
+        {
+          std::string msg = (type () + "::reset_default_properties");
+          gripe_not_implemented (msg.c_str ());
+        }
+      else
+        error ("base_graphics_object::default: invalid graphics object");
+    }
+
 protected:
   // A reference count.
   int count;
 };
 
 class OCTINTERP_API graphics_object
 {
 public:
@@ -2404,16 +2415,19 @@ public:
   void add_property_listener (const std::string& nm, const octave_value& v,
                               listener_mode mode = POSTSET)
     { rep->add_property_listener (nm, v, mode); }
 
   void delete_property_listener (const std::string& nm, const octave_value& v,
                                  listener_mode mode = POSTSET)
     { rep->delete_property_listener (nm, v, mode); }
 
+  void reset_default_properties (void)
+  { rep->reset_default_properties (); }
+
 private:
   base_graphics_object *rep;
 };
 
 // ---------------------------------------------------------------------
 
 class OCTINTERP_API root_figure : public base_graphics_object
 {
@@ -2543,16 +2557,18 @@ public:
   }
 
   base_properties& get_properties (void) { return xproperties; }
 
   const base_properties& get_properties (void) const { return xproperties; }
 
   bool valid_object (void) const { return true; }
 
+  void reset_default_properties (void);
+
 private:
   property_list default_properties;
 
   static property_list factory_properties;
 
   static property_list::plist_map_type init_factory_properties (void);
 };
 
@@ -2747,16 +2763,18 @@ public:
   }
 
   base_properties& get_properties (void) { return xproperties; }
 
   const base_properties& get_properties (void) const { return xproperties; }
 
   bool valid_object (void) const { return true; }
 
+  void reset_default_properties (void);
+
 private:
   property_list default_properties;
 };
 
 // ---------------------------------------------------------------------
 
 class OCTINTERP_API graphics_xform
 {
@@ -3194,16 +3212,18 @@ public:
   base_properties& get_properties (void) { return xproperties; }
 
   const base_properties& get_properties (void) const { return xproperties; }
 
   void update_axis_limits (const std::string& axis_type);
 
   bool valid_object (void) const { return true; }
 
+  void reset_default_properties (void);
+
 private:
   property_list default_properties;
 };
 
 // ---------------------------------------------------------------------
 
 class OCTINTERP_API line : public base_graphics_object
 {
