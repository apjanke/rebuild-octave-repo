# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1216319111 14400
#      Thu Jul 17 14:25:11 2008 -0400
# Node ID db6478d9c6697e56632f225ac325567f028313c5
# Parent  f8cab9eeb128a062153720153880b6ef27ba8397
out_of_date_check_internal: make it work for class methods

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2008-07-17  John W. Eaton  <jwe@octave.org>
+
+	* symtab.cc (out_of_date_check_internal): New arg, dispatch_type.
+	Use it to handle class methods.
+
+	* toplev.h (octave_call_stack::do_caller): New function.
+	(octave_call_stack::caller): Use it.
+
 2008-07-17  Jaroslav Hajek <highegg@gmail.com>
 
 	* Makefile.in (convhulln.oct, __delaunayn__.oct, __voronoi__.oct, 
 	regexp.oct, urlwrite.oct, __glpk__.oct, fltk_backend.oct):
 	Use OCT_LINK_DEPS instead of DL_LDFLAGS for target-specific
 	dependencies.
 
 2008-07-17  David Bateman  <dbateman@free.fr>
diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -144,17 +144,18 @@ load_out_of_date_fcn (const std::string&
     }
   else
     function = octave_value ();
 
   return retval;
 }
 
 static inline bool
-out_of_date_check_internal (octave_value& function)
+out_of_date_check_internal (octave_value& function,
+			    const std::string& dispatch_type = std::string ())
 {
   bool retval = false;
 
   octave_function *fcn = function.function_value (true);
 
   if (fcn)
     {
       // FIXME -- we need to handle nested functions properly here.
@@ -181,24 +182,25 @@ out_of_date_check_internal (octave_value
 
 		  if (octave_env::absolute_pathname (nm)
 		      && ((nm_len > 4 && (nm.substr (nm_len-4) == ".oct"
 					  || nm.substr (nm_len-4) == ".mex"))
 			  || (nm_len > 2 && nm.substr (nm_len-4) == ".m")))
 		    file = nm;
 		  else
 		    {
-		      // FIXME -- this lookup is not right since it doesn't
-		      // account for dispatch type.
-
 		      // We don't want to make this an absolute name,
 		      // because load_fcn_file looks at the name to
 		      // decide whether it came from a relative lookup.
 
-		      file = load_path::find_fcn (nm, dir_name);
+		      if (dispatch_type.empty ())
+			file = load_path::find_fcn (nm, dir_name);
+		      else
+			file = load_path::find_method (nm, dispatch_type,
+						       dir_name);
 		    }
 
 		  if (file.empty ())
 		    {
 		      // Can't see this function from current
 		      // directory, so we should clear it.
 
 		      function = octave_value ();
@@ -472,17 +474,17 @@ symbol_table::fcn_info::fcn_info_rep::fi
       if (val.is_defined ())
 	return val;
     }
   else
     {
       octave_value& fval = q->second;
 
       if (fval.is_defined ())
-	out_of_date_check_internal (fval);
+	out_of_date_check_internal (fval, name);
 
       if (fval.is_defined ())
 	return fval;
       else
 	{
 	  octave_value val = load_class_constructor ();
 
 	  if (val.is_defined ())
@@ -615,17 +617,17 @@ symbol_table::fcn_info::fcn_info_rep::fi
       if (val.is_defined ())
 	return val;
     }
   else
     {
       octave_value& fval = q->second;
 
       if (fval.is_defined ())
-	out_of_date_check_internal (fval);
+	out_of_date_check_internal (fval, dispatch_type);
 
       if (fval.is_defined ())
 	return fval;
       else
 	{
 	  octave_value val = load_class_method (dispatch_type);
 
 	  if (val.is_defined ())
diff --git a/src/toplev.h b/src/toplev.h
--- a/src/toplev.h
+++ b/src/toplev.h
@@ -152,17 +152,17 @@ public:
   static int caller_user_code_column (void)
   {
     return instance_ok () ? instance->do_caller_user_code_column () : -1;
   }
 
   // Caller function, may be built-in.
   static octave_function *caller (void)
   {
-    return element (1);
+    return instance_ok () ? instance->do_caller () : 0;
   }
 
   static size_t current_frame (void)
   {
     return instance_ok () ? instance->do_current_frame () : 0;
   }
 
   static size_t size (void)
@@ -281,16 +281,21 @@ private:
   int do_current_line (void) const;
 
   int do_current_column (void) const;
 
   int do_caller_user_code_line (void) const;
 
   int do_caller_user_code_column (void) const;
 
+  octave_function *do_caller (void) const
+  {
+    return curr_frame > 1 ? cs[curr_frame-1].fcn : cs[0].fcn;
+  }
+
   size_t do_current_frame (void) { return curr_frame; }
 
   size_t do_size (void) { return cs.size (); }
 
   size_t do_num_user_code_frames (octave_idx_type& curr_user_frame) const;
 
   symbol_table::scope_id do_current_scope (void) const
   {
