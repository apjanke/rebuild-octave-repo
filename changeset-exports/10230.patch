# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1264876105 -3600
#      Sat Jan 30 19:28:25 2010 +0100
# Node ID 0a5a769b8fc0f1adead54c2324c43ff1a2b5d578
# Parent  02ae72071221cfd9640b95accbbe44b3f0590951
disallow computed multiple assignment

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,19 @@
+2010-01-30  Jaroslav Hajek  <highegg@gmail.com>
+
+	* pt-assign.h (tree_multi_assignment::etype): Remove.
+	(tree_multi_assignment::tree_multi_assignment): Update.
+	(tree_multi_assignment::op_type): Update.
+	* pt-assign.cc (tree_multi_assignment::tree_multi_assignment): Update.
+	(tree_multi_assignment::rvalue): Update.
+	(tree_multi_assignment::dup): Update.
+	* oct=parse.yy (make_assign_op): Don't allow computed multiple
+	assignments.
+
 2010-01-30  Shai Ayal  <shaiay@users.sourceforge.net>
 
 	* DLD-FUNCTIONS/fltk_backend.cc (__fltk_redraw__): call
 	Fl::check twice to ensure all pending draws are shown on screen
 
 2010-01-30  Jaroslav Hajek  <highegg@gmail.com>
 
 	* oct-lvalue.h (octave_lvalue::black_hole): Remove field.
diff --git a/src/oct-parse.yy b/src/oct-parse.yy
--- a/src/oct-parse.yy
+++ b/src/oct-parse.yy
@@ -2732,18 +2732,20 @@ make_assign_op (int op, tree_argument_li
   if (lhs->is_simple_assign_lhs ())
     {
       tree_expression *tmp = lhs->remove_front ();
 
       retval = new tree_simple_assignment (tmp, rhs, false, l, c, t);
 
       delete lhs;
     }
+  else if (t == octave_value::op_asn_eq)
+    return new tree_multi_assignment (lhs, rhs, false, l, c);
   else
-    return new tree_multi_assignment (lhs, rhs, false, l, c, t);
+    yyerror ("computed multiple assignment not allowed");
 
   return retval;
 }
 
 // Define a script.
 
 static void
 make_script (tree_statement_list *cmds, tree_statement *end_script)
diff --git a/src/pt-assign.cc b/src/pt-assign.cc
--- a/src/pt-assign.cc
+++ b/src/pt-assign.cc
@@ -295,18 +295,18 @@ tree_simple_assignment::accept (tree_wal
 {
   tw.visit_simple_assignment (*this);
 }
 
 // Multi-valued assignment expressions.
 
 tree_multi_assignment::tree_multi_assignment
   (tree_argument_list *lst, tree_expression *r,
-   bool plhs, int l, int c, octave_value::assign_op t)
-    : tree_expression (l, c), lhs (lst), rhs (r), preserve (plhs), etype (t),
+   bool plhs, int l, int c)
+    : tree_expression (l, c), lhs (lst), rhs (r), preserve (plhs),
       first_execution (true) { }
 
 tree_multi_assignment::~tree_multi_assignment (void)
 {
   if (! preserve)
     delete lhs;
 
   delete rhs;
@@ -388,57 +388,45 @@ tree_multi_assignment::rvalue (int)
           octave_lvalue ult = *p;
 
           octave_idx_type nel = ult.numel ();
 
           if (nel != 1)
             {
               if (k + nel <= n)
                 {
-                  if (etype == octave_value::op_asn_eq)
-                    {
-                      // This won't do a copy.
-                      octave_value_list ovl  = rhs_val.slice (k, nel);
+                  // This won't do a copy.
+                  octave_value_list ovl  = rhs_val.slice (k, nel);
 
-                      ult.assign (etype, octave_value (ovl, true));
+                  ult.assign (octave_value::op_asn_eq, octave_value (ovl, true));
 
-                      if (! error_state)
-                        {
-                          retval_list.push_back (ovl);
+                  if (! error_state)
+                    {
+                      retval_list.push_back (ovl);
 
-                          k += nel;
-                        }
-                    }
-                  else
-                    {
-                      std::string op = octave_value::assign_op_as_string (etype);
-                      error ("operator %s unsupported for comma-separated list assignment",
-                             op.c_str ());
+                      k += nel;
                     }
                 }
               else
                 error ("some elements undefined in return list");
             }
           else
             {
               if (k < n)
                 {
-                  ult.assign (etype, rhs_val(k));
+                  ult.assign (octave_value::op_asn_eq, rhs_val(k));
 
                   if (ult.is_black_hole ())
                     {
                       k++;
                       continue;
                     }
                   else if (! error_state)
                     {
-                      if (etype == octave_value::op_asn_eq)
-                        retval_list.push_back (rhs_val(k));
-                      else
-                        retval_list.push_back (ult.value ());
+                      retval_list.push_back (rhs_val(k));
 
                       k++;
                     }
                 }
               else
                 error ("element number %d undefined in return list", k+1);
             }
 
@@ -473,27 +461,27 @@ tree_multi_assignment::rvalue (int)
   first_execution = false;
 
   return retval;
 }
 
 std::string
 tree_multi_assignment::oper (void) const
 {
-  return octave_value::assign_op_as_string (etype);
+  return octave_value::assign_op_as_string (op_type ());
 }
 
 tree_expression *
 tree_multi_assignment::dup (symbol_table::scope_id scope,
 			    symbol_table::context_id context) const
 {
   tree_multi_assignment *new_ma
     = new tree_multi_assignment (lhs ? lhs->dup (scope, context) : 0,
 				 rhs ? rhs->dup (scope, context) : 0,
-				 preserve, etype);
+				 preserve);
 
   new_ma->copy_base (*this);
 
   return new_ma;
 }
 
 void
 tree_multi_assignment::accept (tree_walker& tw)
diff --git a/src/pt-assign.h b/src/pt-assign.h
--- a/src/pt-assign.h
+++ b/src/pt-assign.h
@@ -113,24 +113,22 @@ private:
 
 // Multi-valued assignment expressions.
 
 class
 tree_multi_assignment : public tree_expression
 {
 public:
 
-  tree_multi_assignment (bool plhs = false, int l = -1, int c = -1,
-			 octave_value::assign_op t = octave_value::op_asn_eq)
-    : tree_expression (l, c), lhs (0), rhs (0), preserve (plhs), etype(t),
+  tree_multi_assignment (bool plhs = false, int l = -1, int c = -1)
+    : tree_expression (l, c), lhs (0), rhs (0), preserve (plhs),
       first_execution (true) { }
 
   tree_multi_assignment (tree_argument_list *lst, tree_expression *r,
-			 bool plhs = false, int l = -1, int c = -1,
-			 octave_value::assign_op t = octave_value::op_asn_eq);
+			 bool plhs = false, int l = -1, int c = -1);
 
   ~tree_multi_assignment (void);
 
   bool has_magic_end (void) const { return (rhs && rhs->has_magic_end ()); }
 
   bool is_assignment_expression (void) const { return true; }
 
   bool rvalue_ok (void) const { return true; }
@@ -145,32 +143,29 @@ public:
 
   tree_expression *right_hand_side (void) { return rhs; }
 
   tree_expression *dup (symbol_table::scope_id scope,
 			symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
   
-  octave_value::assign_op op_type (void) const { return etype; }
+  octave_value::assign_op op_type (void) const { return octave_value::op_asn_eq; }
 
 private:
 
   // The left hand side of the assignment.
   tree_argument_list *lhs;
 
   // The right hand side of the assignment.
   tree_expression *rhs;
 
   // True if we should not delete the lhs.
   bool preserve;
 
-  // The type of the expression.
-  octave_value::assign_op etype;
-
   // true only on first rvalue() call.
   bool first_execution;
 
   // No copying!
 
   tree_multi_assignment (const tree_multi_assignment&);
 
   tree_multi_assignment& operator = (const tree_multi_assignment&);
