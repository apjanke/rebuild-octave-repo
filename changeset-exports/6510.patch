# HG changeset patch
# User jwe
# Date 1176160547 0
#      Mon Apr 09 23:15:47 2007 +0000
# Node ID cbae86745c5b20fdeac1a755aa6c649587e5127c
# Parent  84f2d0253aea629c86d795ddb0655de37e78e76a
[project @ 2007-04-09 23:15:47 by jwe]

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,13 @@
+2007-04-09  Søren Hauberg  <hauberg@gmail.com>
+
+	* interpreter/func.txi: Document varargin, varargout, and default
+	argument values.
+
 2007-04-03  Rafael Laboissiere  <rafael@debian.org>
 
 	* interpreter/basics.txi: Clarified some limitations of the #!
 	script mechanism, in particular related to the parsing of the
 	arguments.
 
 2007-03-29  Rafael Laboissiere  <rafael@debian.org>
 
diff --git a/doc/interpreter/func.txi b/doc/interpreter/func.txi
--- a/doc/interpreter/func.txi
+++ b/doc/interpreter/func.txi
@@ -15,16 +15,17 @@ interactive Octave sessions, or in exter
 like built-in functions.
 
 @menu
 * Defining Functions::          
 * Multiple Return Values::      
 * Variable-length Argument Lists::  
 * Variable-length Return Lists::  
 * Returning From a Function::   
+* Default Arguments::   
 * Function Files::              
 * Script Files::                
 * Dynamically Linked Functions::  
 * Function Handles and Inline::
 * Organization of Functions::   
 @end menu
 
 @node Defining Functions
@@ -83,17 +84,17 @@ endfunction
 
 @noindent
 where @var{arg-list} is a comma-separated list of the function's
 arguments.  When the function is called, the argument names are used to
 hold the argument values given in the call.  The list of arguments may
 be empty, in which case this form is equivalent to the one shown above.
 
 To print a message along with ringing the bell, you might modify the
-@code{beep} to look like this:
+@code{wakeup} to look like this:
 
 @example
 @group
 function wakeup (message)
   printf ("\a%s\n", message);
 endfunction
 @end group
 @end example
@@ -316,21 +317,124 @@ along with a warning.
 @DOCSTRING(nargout)
 
 @DOCSTRING(nargchk)
 
 @node Variable-length Argument Lists
 @section Variable-length Argument Lists
 @cindex variable-length argument lists
 @cindex @code{...}
+Sometimes the number of input arguments is not known when the function
+is defined.  As an example think of a function that returns the smallest
+of all its input arguments.  For example,
+
+@example
+a = smallest (1, 2, 3);
+b = smallest (1, 2, 3, 4);
+@end example
+
+@noindent
+In this example both @code{a} and @code{b} would be 1.  One way to write
+the @code{smallest} function is
+
+@example
+function val = smallest (arg1, arg2, arg3, arg4, arg5)
+  @var{body}
+endfunction
+@end example
+
+@noindent
+and then use the value of @code{nargin} to determine which of the input
+arguments should be considered. The problem with this approach is
+that it can only handle a limited number of input arguments.
+
+Octave supports the @code{varargin} keyword for handling a variable
+number of input arguments. Using @code{varargin} the function
+looks like this
+
+@example
+function val = smallest (varargin)
+  @var{body}
+endfunction
+@end example
+
+@noindent
+In the function body the input arguments can be accessed through the
+variable @code{varargin}. This variable is a cell array containing
+all the input arguments. @xref{Cell Arrays}, for details on working
+with cell arrays. The @code{smallest} function can now be defined
+like this
+
+@example
+function val = smallest (varargin)
+  val = min ([varargin@{:@}]);
+endfunction
+@end example
+
+@noindent
+This implementation handles any number of input arguments, but it's also
+a very simple solution to the problem.
+
+A slightly more complex example of @code{varargin} is a function 
+@code{print_arguments} that prints all input arguments.  Such a function
+can be defined like this
+
+@example
+function print_arguments (varargin)
+  for i = 1:length (varargin)
+    printf ("Input argument %d: ", i);
+    disp (varargin@{i@});
+  endfor
+endfunction
+@end example
+
+@noindent
+This function produces output like this
+
+@example
+@group
+print_arguments (1, "two", 3);
+     @print{} Input argument 1:  1
+     @print{} Input argument 2: two
+     @print{} Input argument 3:  3
+@end group
+@end example
 
 @node Variable-length Return Lists
 @section Variable-length Return Lists
 @cindex variable-length return lists
-@cindex @code{...}
+It is possible to return a variable number of output arguments from a
+function using a syntax that's similar to the one used with the
+@code{varargin} keyword.  To let a function return a variable number of
+output arguments the @code{varargout} keyword is used.  As with
+@code{varargin} @code{varargout} is a cell array that will contain the
+requested output arguments.
+
+As an example the following function sets the first output argument to
+1, the second to 2, and so on.
+
+@example
+function varargout = one_to_n ()
+  for i = 1:nargout
+    varargout@{i@} = i;
+  endfor
+endfunction
+@end example
+
+@noindent
+When called this function returns values like this
+
+@example
+@group
+[a, b, c] = one_to_n ()
+     @result{} a =  1
+     @result{} b =  2
+     @result{} c =  3
+@end group
+@end example
 
 @node Returning From a Function
 @section Returning From a Function
 
 The body of a user-defined function can contain a @code{return} statement.
 This statement returns control to the rest of the Octave program.  It
 looks like this:
 
@@ -372,16 +476,71 @@ does contain a nonzero element.
 When Octave encounters the keyword @code{return} inside a function or
 script, it returns control to the caller immediately. At the top level,
 the return statement is ignored.  A @code{return} statement is assumed
 at the end of every function definition.
 @end deffn
 
 @DOCSTRING(return_last_computed_value)
 
+@node Default Arguments
+@section Default Arguments
+@cindex default arguments
+
+Since Octave supports variable number of input arguments, it is very useful
+to assign default values to some input arguments. When an input argument
+is declared in the argument list it is possible to assign a default
+value to the argument like this
+
+@example
+function @var{name} (@var{arg1} = @var{val1}, @dots{})
+  @var{body}
+endfunction
+@end example
+
+@noindent
+If no value is assigned to @var{arg1} by the user, it will have the
+value @var{val1}.
+
+As an example, the following function implements a variant of the classic
+``Hello, World'' program.
+@example
+function hello (who = "World")
+  printf ("Hello, %s!\n", who);
+endfunction
+@end example
+
+@noindent
+When called without an input argument the function prints the following
+@example
+@group
+hello ();
+     @print{} Hello, World!
+@end group
+@end example
+
+@noindent
+and when it's called with an input argument it prints the following
+@example
+@group
+hello ("Beautiful World of Free Software");
+     @print{} Hello, Beautiful World of Free Software!
+@end group
+@end example
+
+Sometimes it is useful to explicitly tell Octave to use the default value
+of an input argument.  This can be done writing a @samp{:} as the value
+of the input argument when calling the function.
+@example
+@group
+hello (:);
+     @print{} Hello, World!
+@end group
+@end example
+
 @node Function Files
 @section Function Files
 @cindex function file
 
 Except for simple one-shot programs, it is not practical to have to
 define all the functions you need each time you need them.  Instead, you
 will normally want to save them in a file so that you can easily edit
 them, and save them for use at a later time.
@@ -576,18 +735,16 @@ linked functions.
 
 The function defined in @file{oregonator.cc} contains just 8 statements,
 and is not much different than the code defined in the corresponding
 M-file (also distributed with Octave in the file
 @file{examples/oregonator.m}).
 
 Here is the complete text of @file{oregonator.cc}:
 
-just
-
 @example
 @group
 #include <octave/oct.h>
 
 DEFUN_DLD (oregonator, args, ,
   "The `oregonator'.")
 @{
   ColumnVector dx (3);
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2007-04-09  John W. Eaton  <jwe@octave.org>
+
+	* plot/__go_draw_axes__.m (__gnuplot_write_data__): New function.
+	(__go_draw_axes__): Use it to write data to plot stream.
+
 2007-04-09  Daniel J Sebald  <daniel.sebald@ieee.org>
 
 	* plot/stem.m: Fix typos in doc string.  Fix typo in call to
 	zeros.  Set markerfacecolor property in call to plot.
 
 2007-04-06  John W. Eaton  <jwe@octave.org>
 
 	* linear-algebra/norm.m: Use new __vnorm__ function for vector args.
diff --git a/scripts/plot/__go_draw_axes__.m b/scripts/plot/__go_draw_axes__.m
--- a/scripts/plot/__go_draw_axes__.m
+++ b/scripts/plot/__go_draw_axes__.m
@@ -658,33 +658,17 @@ function __go_draw_axes__ (h, plot_strea
 	fprintf (plot_stream, ", \"-\" %s %s %s",
 		 usingclause{i}, titlespec{i}, withclause{i});
       endfor
       fputs (plot_stream, ";\n");
       for i = 1:data_idx
 	if (is_image_data(i))
 	  fwrite (plot_stream, data{i}, "float32");
 	else
-	  if (nd == 2)
-	    fprintf (plot_stream,
-		     strcat (repmat ("%g ", 1, rows (data{i})), "\n"),
-		     data{i});
-	  else
-	    if (parametric(i))
-	      fprintf (plot_stream, "%g %g %g\n", data{i});
-	    else
-	      tmp = data{i};
-	      nc = columns (tmp);
-	      for j = 1:3:nc
-		fprintf (plot_stream, "%g %g %g\n", tmp(:,j:j+2)');
-		fputs (plot_stream, "\n");
-	      endfor
-	    endif
-	  endif
-	  fputs (plot_stream, "e\n");
+	  __gnuplot_write_data__ (plot_stream, data{i}, nd, parametric(i));
 	endif
       endfor
     else
       fputs (plot_stream, "plot \"-\";\nInf Inf\ne\n");
     endif
 
     fflush (plot_stream);
 
@@ -891,8 +875,49 @@ function [style, typ, with] = do_linesty
 
   if (have_newer_gnuplot && ! found_style)
     fputs (plot_stream, " default");
   endif
 
   fputs (plot_stream, ";\n");
 
 endfunction
+
+function __gnuplot_write_data__ (plot_stream, data, nd, parametric)
+  
+  ## DATA is already transposed.
+
+  ## FIXME -- this may need to be converted to C++ for speed.
+
+  if (nd == 2)
+    nan_elts = find (sum (isnan (data)));
+    fmt = strcat (repmat ("%g ", 1, rows (data)), "\n");
+    if (isempty (nan_elts))
+      fprintf (plot_stream, fmt, data);
+    else
+      n = columns (data);
+      have_nans = true;
+      num_nan_elts = numel (nan_elts);
+      k = 1;
+      for i = 1:n
+	if (have_nans && i == nan_elts(k))
+	  fputs (plot_stream, "\n");
+	  have_nans = ++k <= num_nan_elts;
+	else
+	  fprintf (plot_stream, fmt, data(:,i));
+	endif
+      endfor
+    endif
+  else
+    ## FIXME -- handle NaNs here too?
+    if (parametric)
+      fprintf (plot_stream, "%g %g %g\n", data);
+    else
+      nc = columns (data);
+      for j = 1:3:nc
+	fprintf (plot_stream, "%g %g %g\n", data(:,j:j+2)');
+	fputs (plot_stream, "\n");
+      endfor
+    endif
+  endif
+  fputs (plot_stream, "e\n");
+
+endfunction
