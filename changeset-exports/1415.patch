# HG changeset patch
# User jwe
# Date 811159997 0
#      Fri Sep 15 10:13:17 1995 +0000
# Node ID f18474c64e729f40dbf47245739a57fb7a08a906
# Parent  88ba3aed56976254b98fcfee30dcb086fcca7ae2
[project @ 1995-09-15 10:09:57 by jwe]

diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -15,17 +15,17 @@ dnl Copyright (C) 1992, 1993, 1994, 1995
 ### ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 ### FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ### for more details.
 ### 
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
-AC_REVISION($Revision: 1.135 $)
+AC_REVISION($Revision: 1.136 $)
 AC_PREREQ(2.0)
 AC_INIT(src/octave.cc)
 AC_CONFIG_HEADER(config.h)
 
 AC_DEFINE(OCTAVE_SOURCE, 1)
 
 AC_CANONICAL_HOST
 if test -z "$host"; then
@@ -366,17 +366,16 @@ AC_AIX
 AC_CHECK_LIB(sun, getpwnam)
 
 ### How big are ints and how are they oriented?  These could probably
 ### be eliminated in favor of run-time checks.
 
 AC_CHECK_SIZEOF(short)
 AC_CHECK_SIZEOF(int)
 AC_CHECK_SIZEOF(long)
-AC_C_BIGENDIAN
 
 ### Does the C compiler handle alloca() and const correctly?
 
 AC_ALLOCA
 AC_C_CONST
 
 ### Get the list of libraries that the C++ compiler normally uses.
 
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -1693,20 +1693,18 @@ read_mat_file_header (istream& is, int& 
 // bigger than we expect, so we swap bytes.
 //
 // If mopt is zero, it means the file was written on a little endian
 // machine, and we only need to swap if we are running on a big endian
 // machine.
 //
 // Gag me.
 
-#if defined (WORDS_BIGENDIAN)
-  if (mopt == 0)
+  if (octave_words_big_endian && mopt == 0)
     swap = 1;
-#endif
 
   // mopt is signed, therefore byte swap may result in negative value.
 
   if (mopt > 9999 || mopt < 0)
     swap = 1;
 
   if (swap)
     {
@@ -1898,31 +1896,19 @@ static int
 read_binary_file_header (istream& is, int& swap,
 			 floating_point_format& flt_fmt, int quiet = 0) 
 {
   int magic_len = 10;
   char magic [magic_len+1];
   is.read (magic, magic_len);
   magic[magic_len] = '\0';
   if (strncmp (magic, "Octave-1-L", magic_len) == 0)
-    {
-#if defined (WORDS_BIGENDIAN)
-      swap = 1;
-#else
-      swap = 0;
-#endif
-    }
+    swap = octave_words_big_endian;
   else if (strncmp (magic, "Octave-1-B", magic_len) == 0)
-    {
-#if defined (WORDS_BIGENDIAN)
-      swap = 0;
-#else
-      swap = 1;
-#endif
-    }
+    swap = ! octave_words_big_endian;
   else
     {
       if (! quiet)
 	error ("load: can't read binary file");
       return -1;
     }
 	
   char tmp = 0;
@@ -2854,21 +2840,17 @@ get_default_save_format (void)
   return retval;
 }
 
 static void
 write_binary_header (ostream& stream, load_save_format format)
 {
   if (format == LS_BINARY)
     {
-#if defined (WORDS_BIGENDIAN)
-      stream << "Octave-1-B";
-#else
-      stream << "Octave-1-L";
-#endif
+      stream << (octave_words_big_endian ? "Octave-1-B" : "Octave-1-L");
 
       char tmp = (char) native_float_format;
       stream.write (&tmp, 1);
     }
 }
 
 static void
 save_vars (char **argv, int argc, ostream& os, int save_builtins,
diff --git a/src/sysdep.cc b/src/sysdep.cc
--- a/src/sysdep.cc
+++ b/src/sysdep.cc
@@ -84,16 +84,19 @@ extern double F77_FCN (d1mach, D1MACH) (
 double octave_Inf;
 
 // Octave's idea of not a number.
 double octave_NaN;
 
 // The floating point format on this system.
 floating_point_format native_float_format = OCTAVE_UNKNOWN_FLT_FMT;
 
+// Nonzero if the machine we are running on is big-endian.
+int octave_words_big_endian;
+
 #if defined (HAVE_FLOATINGPOINT_H)
 #include <floatingpoint.h>
 #endif
 
 #ifdef NeXT
 extern "C"
 {
   typedef void (*_cplus_fcn_int) (int);
@@ -244,16 +247,32 @@ octave_ieee_init (void)
 	}
     }
   while (fp[++i].fp_fmt != OCTAVE_UNKNOWN_FLT_FMT);
 
   if (native_float_format == OCTAVE_UNKNOWN_FLT_FMT)
     panic ("unrecognized floating point format!");
 }
 
+static void
+ten_little_endians (void)
+{
+  // Are we little or big endian?  From Harbison & Steele.
+
+  union
+  {
+    long l;
+    char c[sizeof (long)];
+  } u;
+
+  u.l = 1;
+
+  octave_words_big_endian = (u.c[sizeof (long) - 1] == 1);
+}
+
 #if defined (EXCEPTION_IN_MATH)
 extern "C"
 {
 int
 matherr (struct exception *x)
 {
   // Possibly print our own message someday.  Should probably be
   // user-switchable.
@@ -287,16 +306,18 @@ sysdep_init (void)
 #endif
 #endif
 
 #ifdef NeXT
   NeXT_init ();
 #endif
 
   octave_ieee_init ();
+
+  ten_little_endians ();
 }
 
 // Set terminal in raw mode.  From less-177.
 //
 // Change terminal to "raw mode", or restore to "normal" mode.
 // "Raw mode" means 
 //	1. An outstanding read will complete on receipt of a single keystroke.
 //	2. Input is not echoed.  
