# HG changeset patch
# User jwe
# Date 1199401533 0
#      Thu Jan 03 23:05:33 2008 +0000
# Branch release-3-0-x
# Node ID 3093cb640697179a50d4ce85b951f5f6bc1d28b9
# Parent  3706ac0750f1a6037d464e5c552ba2f6c53389cb
[3-0-0-branch @ 2008-01-03 23:05:32 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,14 @@
+2008-01-03  David Bateman  <dbateman@free.fr>
+
+	* MSparse.cc (SPARSE_A2A2_OP): If first arg is scalar zero, then
+	need unary operator on remaining argument
+	* Sparse-op-defs.h (SPARSE_SMSM_BIN_OP_1): ditto.
+
 2007-12-21  John W. Eaton  <jwe@octave.org>
 
 	Version 3.0.0 released.
 
 2007-12-18  David Bateman  <dbateman@free.fr>
 
 	* Sparse.cc (template <class T> Sparse<T> Sparse<T>::index 
 	(idx_vector&, int) const): Fix case indexing of non zero scalar 
diff --git a/liboctave/MSparse.cc b/liboctave/MSparse.cc
--- a/liboctave/MSparse.cc
+++ b/liboctave/MSparse.cc
@@ -287,17 +287,17 @@ SPARSE_SA2_OP_2 (/)
     octave_idx_type a_nc = a.cols (); \
  \
     octave_idx_type b_nr = b.rows (); \
     octave_idx_type b_nc = b.cols (); \
  \
     if (a_nr == 1 && a_nc == 1) \
       { \
         if (a.elem(0,0) == 0.) \
-          r = MSparse<T> (b); \
+          r =  OP MSparse<T> (b); \
         else \
           { \
 	    r = MSparse<T> (b_nr, b_nc, a.data(0) OP 0.); \
             \
             for (octave_idx_type j = 0 ; j < b_nc ; j++) \
               { \
                 OCTAVE_QUIT; \
                 octave_idx_type idxj = j * b_nr; \
diff --git a/liboctave/Sparse-op-defs.h b/liboctave/Sparse-op-defs.h
--- a/liboctave/Sparse-op-defs.h
+++ b/liboctave/Sparse-op-defs.h
@@ -391,17 +391,17 @@ along with Octave; see the file COPYING.
     octave_idx_type m1_nc = m1.cols (); \
  \
     octave_idx_type m2_nr = m2.rows (); \
     octave_idx_type m2_nc = m2.cols (); \
  \
     if (m1_nr == 1 && m1_nc == 1) \
       { \
         if (m1.elem(0,0) == 0.) \
-          r = R (m2); \
+          r = OP R (m2); \
         else \
           { \
 	    r = R (m2_nr, m2_nc, m1.data(0) OP 0.); \
             \
             for (octave_idx_type j = 0 ; j < m2_nc ; j++) \
               { \
                 OCTAVE_QUIT; \
                 octave_idx_type idxj = j * m2_nr; \
