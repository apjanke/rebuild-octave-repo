# HG changeset patch
# User Mike Miller <mtmiller@ieee.org>
# Date 1381295414 14400
#      Wed Oct 09 01:10:14 2013 -0400
# Node ID ce7b9abf6600fa3c2a592501c2cba7a7417b7c0c
# Parent  6b8df90c880668a18161511d5899f8a828a33a50
Keep a copy of url string for older cURL libraries

* url-transfer.cc (curl_transfer::url): New data member.
(curl_transfer::curl_transfer): Initialize it.
(curl_transfer::curl_transfer, curl_transfer::put, curl_transfer::get,
curl_transfer::dir, curl_transfer::list, curl_transfer::get_fileinfo,
curl_transfer::http_get): Set it to requested url.

diff --git a/liboctave/util/url-transfer.cc b/liboctave/util/url-transfer.cc
--- a/liboctave/util/url-transfer.cc
+++ b/liboctave/util/url-transfer.cc
@@ -271,49 +271,50 @@ throw_away (void *, size_t size, size_t 
     } \
   while (0)
 
 class curl_transfer : public base_url_transfer
 {
 public:
 
   curl_transfer (void)
-    : base_url_transfer (), curl (curl_easy_init ()), errnum (), userpwd ()
+    : base_url_transfer (), curl (curl_easy_init ()), errnum (), url (),
+      userpwd ()
   {
     if (curl)
       valid = true;
     else
       errmsg = "can not create curl object";
   }
 
   curl_transfer (const std::string& host, const std::string& user_arg,
                  const std::string& passwd, std::ostream& os)
     : base_url_transfer (host, user_arg, passwd, os),
-      curl (curl_easy_init ()), errnum (), userpwd ()
+      curl (curl_easy_init ()), errnum (), url (), userpwd ()
   {
     if (curl)
       valid = true;
     else
       {
         errmsg = "can not create curl object";
         return;
       }
 
     init (user_arg, passwd, std::cin, os);
 
-    std::string url ("ftp://" + host);
+    url = "ftp://" + host;
     SETOPT (CURLOPT_URL, url.c_str ());
 
     // Set up the link, with no transfer.
     perform ();
   }
 
   curl_transfer (const std::string& url, std::ostream& os)
     : base_url_transfer (url, os), curl (curl_easy_init ()), errnum (),
-      userpwd ()
+      url (), userpwd ()
   {
     if (curl)
       valid = true;
     else
       {
         errmsg = "can not create curl object";
         return;
       }
@@ -420,17 +421,17 @@ public:
     if (! good ())
       return;
 
     SETOPT (CURLOPT_POSTQUOTE, 0);
   }
 
   void put (const std::string& file, std::istream& is)
   {
-    std::string url = "ftp://" + host_or_url + "/" + file;
+    url = "ftp://" + host_or_url + "/" + file;
     SETOPT (CURLOPT_URL, url.c_str ());
     SETOPT (CURLOPT_UPLOAD, 1);
     SETOPT (CURLOPT_NOBODY, 0);
     std::istream& old_is = set_istream (is);
 
     perform ();
     if (! good ())
       return;
@@ -439,34 +440,34 @@ public:
     SETOPT (CURLOPT_NOBODY, 1);
     SETOPT (CURLOPT_UPLOAD, 0);
     url = "ftp://" + host_or_url;
     SETOPT (CURLOPT_URL, url.c_str ());
   }
 
   void get (const std::string& file, std::ostream& os)
   {
-    std::string url = "ftp://" + host_or_url + "/" + file;
+    url = "ftp://" + host_or_url + "/" + file;
     SETOPT (CURLOPT_URL, url.c_str ());
     SETOPT (CURLOPT_NOBODY, 0);
     std::ostream& old_os = set_ostream (os);
 
     perform ();
     if (! good ())
       return;
 
     set_ostream (old_os);
     SETOPT (CURLOPT_NOBODY, 1);
     url = "ftp://" + host_or_url;
     SETOPT (CURLOPT_URL, url.c_str ());
   }
 
   void dir (void)
   {
-    std::string url = "ftp://" + host_or_url + "/";
+    url = "ftp://" + host_or_url + "/";
     SETOPT (CURLOPT_URL, url.c_str ());
     SETOPT (CURLOPT_NOBODY, 0);
 
     perform ();
     if (! good ())
       return;
 
     SETOPT (CURLOPT_NOBODY, 1);
@@ -474,17 +475,17 @@ public:
     SETOPT (CURLOPT_URL, url.c_str ());
   }
 
   string_vector list (void)
   {
     string_vector retval;
 
     std::ostringstream buf;
-    std::string url = "ftp://" + host_or_url + "/";
+    url = "ftp://" + host_or_url + "/";
     SETOPTR (CURLOPT_WRITEDATA, static_cast<void*> (&buf));
     SETOPTR (CURLOPT_URL, url.c_str ());
     SETOPTR (CURLOPT_DIRLISTONLY, 1);
     SETOPTR (CURLOPT_NOBODY, 0);
 
     perform ();
     if (! good ())
       return retval;
@@ -522,17 +523,17 @@ public:
     return retval;
   }
 
   void get_fileinfo (const std::string& filename, double& filesize,
                      time_t& filetime, bool& fileisdir)
   {
     std::string path = pwd ();
 
-    std::string url = "ftp://" + host_or_url + "/" + path + "/" + filename;
+    url = "ftp://" + host_or_url + "/" + path + "/" + filename;
     SETOPT (CURLOPT_URL, url.c_str ());
     SETOPT (CURLOPT_FILETIME, 1);
     SETOPT (CURLOPT_HEADERFUNCTION, throw_away);
     SETOPT (CURLOPT_WRITEFUNCTION, throw_away);
 
     // FIXME
     // The MDTM command fails for a directory on the servers I tested
     // so this is a means of testing for directories. It also means
@@ -600,17 +601,17 @@ public:
     SETOPTR (CURLOPT_WRITEHEADER, 0);
     SETOPTR (CURLOPT_POSTQUOTE, 0);
 
     return retval;
   }
 
   void http_get (const Array<std::string>& param)
   {
-    std::string url = host_or_url;
+    url = host_or_url;
 
     std::string query_string = form_query_string (param);
 
     if (! query_string.empty ())
       url += "?" + query_string;
 
     SETOPT (CURLOPT_URL, url.c_str ());
 
@@ -657,16 +658,17 @@ private:
   // The associated API did not change, only the behavior of the library
   // implementing the function call.
   //
   // To be compatible with any version of cURL, the caller must keep a
   // copy of all string parameters associated with a CURL handle until
   // the handle is released. The curl_handle::curl_handle_rep class
   // contains the pointer to the CURL handle and so is the best
   // candidate for storing the strings as well. (bug #36717)
+  std::string url;
   std::string userpwd;
 
   // No copying!
 
   curl_transfer (const curl_transfer&);
 
   curl_transfer& operator = (const curl_transfer&);
 
