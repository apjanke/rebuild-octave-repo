# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1532978460 14400
#      Mon Jul 30 15:21:00 2018 -0400
# Node ID 29d89cd3d950b01e2c3914c9ddf798c7b9be8ca9
# Parent  7b4e99fbe9d4b06ae5e7485d633c83104c9a15de
# Parent  96584a825b0fda01e01f4d0f9d32637907621d3d
maint: Merge stable to default.

diff --git a/liboctave/util/oct-base64.cc b/liboctave/util/oct-base64.cc
--- a/liboctave/util/oct-base64.cc
+++ b/liboctave/util/oct-base64.cc
@@ -54,41 +54,43 @@ namespace octave
     return ret;
   }
 
   Array<double>
   base64_decode (const std::string& str)
   {
     Array<double> retval;
 
-    char *out;
+    double *out;
     size_t outlen;
 
-    bool ok = octave_base64_decode_alloc_wrapper (str.data (), str.length (),
-                                                  &out, &outlen);
+    bool ok
+      = octave_base64_decode_alloc_wrapper (str.data (), str.length (),
+                                            reinterpret_cast<char **> (&out),
+                                            &outlen);
 
     if (! ok)
       (*current_liboctave_error_handler)
         ("base64_decode: input was not valid base64");
+
     if (! out)
       (*current_liboctave_error_handler)
         ("base64_decode: memory allocation error");
 
     if ((outlen % (sizeof (double) / sizeof (char))) != 0)
       {
         ::free (out);
         (*current_liboctave_error_handler)
           ("base64_decode: incorrect input size");
       }
     else
       {
         octave_idx_type len = (outlen * sizeof (char)) / sizeof (double);
         retval.resize (dim_vector (1, len));
-        double *dout = reinterpret_cast<double *> (out);
-        std::copy (dout, dout + len, retval.fortran_vec ());
+        std::copy (out, out + len, retval.fortran_vec ());
         ::free (out);
       }
 
     return retval;
   }
 }
 
 // Always define these functions.  The macro is intended to allow the
