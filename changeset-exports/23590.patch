# HG changeset patch
# User Rik <rik@octave.org>
# Date 1497386377 25200
#      Tue Jun 13 13:39:37 2017 -0700
# Node ID eb3c7abad98f040fe09a1dfe8f825c4c0ad97b7d
# Parent  63950abd2f81caaccbf7eac00d607fb72a09e1bb
ov.h: Directly call replacement functions from deprecated functions.

* ov.h: For deprecated functions, directly call rep->replacement_function
rather than calling replacement_function which could introduce another
function call.
* ov.h (is_zero_by_zero): Move function to be with the rest of the size-related
functions.

diff --git a/libinterp/octave-value/ov.h b/libinterp/octave-value/ov.h
--- a/libinterp/octave-value/ov.h
+++ b/libinterp/octave-value/ov.h
@@ -477,16 +477,20 @@ public:
   octave_idx_type columns (void) const { return rep->columns (); }
 
   octave_idx_type length (void) const;
 
   int ndims (void) const { return rep->ndims (); }
 
   bool all_zero_dims (void) const { return dims ().all_zero (); }
 
+  // Are the dimensions of this constant zero by zero?
+  bool is_zero_by_zero (void) const
+  { return (ndims () == 2 && rows () == 0 && columns () == 0); }
+
   octave_idx_type numel (void) const
   { return rep->numel (); }
 
   OCTAVE_DEPRECATED ("use 'numel' instead")
   octave_idx_type capacity (void) const
   { return rep->numel (); }
 
   size_t byte_size (void) const
@@ -539,17 +543,17 @@ public:
   bool is_cell (void) const
   { return rep->iscell (); }
 
   bool iscellstr (void) const
   { return rep->iscellstr (); }
 
   OCTAVE_DEPRECATED ("use 'iscellstr' instead")
   bool is_cellstr (void) const
-  { return iscellstr (); }
+  { return rep->iscellstr (); }
 
   bool is_real_scalar (void) const
   { return rep->is_real_scalar (); }
 
   bool is_real_matrix (void) const
   { return rep->is_real_matrix (); }
 
   bool is_complex_scalar (void) const
@@ -585,34 +589,34 @@ public:
   bool is_range (void) const
   { return rep->is_range (); }
 
   bool isstruct (void) const
   { return rep->isstruct (); }
 
   OCTAVE_DEPRECATED ("use 'isstruct' instead")
   bool is_map (void) const
-  { return isstruct (); }
+  { return rep->isstruct (); }
 
   bool is_classdef_object (void) const
   { return rep->is_classdef_object (); }
 
   bool isobject (void) const
   { return rep->isobject (); }
 
   OCTAVE_DEPRECATED ("use 'isobject' instead")
   bool is_object (void) const
-  { return isobject (); }
+  { return rep->isobject (); }
 
   bool isjava (void) const
   { return rep->isjava (); }
 
   OCTAVE_DEPRECATED ("use 'isjava' instead")
   bool is_java (void) const
-  { return isjava (); }
+  { return rep->isjava (); }
 
   bool is_cs_list (void) const
   { return rep->is_cs_list (); }
 
   bool is_magic_colon (void) const
   { return rep->is_magic_colon (); }
 
   bool isnull (void) const
@@ -728,21 +732,16 @@ public:
 
   bool is_true (void) const
   { return rep->is_true (); }
 
   // Do two constants match (in a switch statement)?
 
   bool is_equal (const octave_value&) const;
 
-  // Are the dimensions of this constant zero by zero?
-
-  bool is_zero_by_zero (void) const
-  { return (ndims () == 2 && rows () == 0 && columns () == 0); }
-
   bool is_constant (void) const
   { return rep->is_constant (); }
 
   bool is_function_handle (void) const
   { return rep->is_function_handle (); }
 
   bool is_anonymous_function (void) const
   { return rep->is_anonymous_function (); }
