# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1361847255 18000
#      Mon Feb 25 21:54:15 2013 -0500
# Node ID c8974e28da59088876651e112ad79bd9341d7316
# Parent  6434f70f0ee045ce9c3b54f9ce8757026f193c2f
move nesting_level to lexical_feedback class

* lex.h, lex.ll (brace_bracket_paren_nesting_level): Rename to
bbp_nesting_level and nest class definition inside lexical_feedback
class.
(nesting_level): Move global variable to lexical_feedback_class.
Change all uses.
(reset_parser): Don't clear nesting_level.

diff --git a/libinterp/parse-tree/lex.h b/libinterp/parse-tree/lex.h
--- a/libinterp/parse-tree/lex.h
+++ b/libinterp/parse-tree/lex.h
@@ -56,32 +56,107 @@ extern void prep_lexer_for_function_file
 
 // For communication between the lexer and parser.
 
 class
 lexical_feedback
 {
 public:
 
+  // Track nesting of square brackets, curly braces, and parentheses.
+
+  class bbp_nesting_level
+  {
+  private:
+
+    enum
+      {
+        BRACKET = 1,
+        BRACE = 2,
+        PAREN = 3
+      };
+
+  public:
+
+    bbp_nesting_level (void) : context () { }
+
+    bbp_nesting_level (const bbp_nesting_level& nl) : context (nl.context) { }
+
+    bbp_nesting_level& operator = (const bbp_nesting_level& nl)
+    {
+      if (&nl != this)
+        context = nl.context;
+
+      return *this;
+    }
+
+    ~bbp_nesting_level (void) { }
+
+    void bracket (void) { context.push (BRACKET); }
+
+    bool is_bracket (void)
+    {
+      return ! context.empty () && context.top () == BRACKET;
+    }
+
+    void brace (void) { context.push (BRACE); }
+
+    bool is_brace (void)
+    {
+      return ! context.empty () && context.top () == BRACE;
+    }
+
+    void paren (void) { context.push (PAREN); }
+
+    bool is_paren (void)
+    {
+      return ! context.empty () && context.top () == PAREN;
+    }
+
+    bool is_bracket_or_brace (void)
+    {
+      return (! context.empty ()
+              && (context.top () == BRACKET || context.top () == BRACE));
+    }
+
+    bool none (void) { return context.empty (); }
+
+    void remove (void)
+    {
+      if (! context.empty ())
+        context.pop ();
+    }
+
+    void clear (void)
+    {
+      while (! context.empty ())
+        context.pop ();
+    }
+
+  private:
+
+    std::stack<int> context;
+  };
+
   lexical_feedback (void)
     : convert_spaces_to_comma (true), do_comma_insert (false),
       at_beginning_of_statement (true),
       looking_at_anon_fcn_args (false), looking_at_return_list (false),
       looking_at_parameter_list (false), looking_at_decl_list (false),
       looking_at_initializer_expression (false),
       looking_at_matrix_or_assign_lhs (false),
       looking_for_object_index (false), 
       looking_at_indirect_ref (false), parsing_class_method (false),
       maybe_classdef_get_set_method (false), parsing_classdef (false),
       quote_is_transpose (false), parser_end_of_input (false),
       input_line_number (1), current_input_column (1),
       bracketflag (0), braceflag (0),
       looping (0), defining_func (0), looking_at_function_handle (0),
       looking_at_object_index (), parsed_function_name (),
-      pending_local_variables ()
+      pending_local_variables (), nesting_level ()
   {
     init ();
   }
 
   lexical_feedback (const lexical_feedback& lf)
     : convert_spaces_to_comma (lf.convert_spaces_to_comma),
       do_comma_insert (lf.do_comma_insert),
       at_beginning_of_statement (lf.at_beginning_of_statement),
@@ -102,17 +177,18 @@ public:
       current_input_column (lf.current_input_column),
       bracketflag (lf.bracketflag),
       braceflag (lf.braceflag),
       looping (lf.looping),
       defining_func (lf.defining_func),
       looking_at_function_handle (lf.looking_at_function_handle),
       looking_at_object_index (lf.looking_at_object_index),
       parsed_function_name (lf.parsed_function_name),
-      pending_local_variables (lf.pending_local_variables)
+      pending_local_variables (lf.pending_local_variables),
+      nesting_level (lf.nesting_level)
   { }
 
   lexical_feedback& operator = (const lexical_feedback& lf)
   {
     if (&lf != this)
       {
         convert_spaces_to_comma = lf.convert_spaces_to_comma;
         do_comma_insert = lf.do_comma_insert;
@@ -135,16 +211,17 @@ public:
         bracketflag = lf.bracketflag;
         braceflag = lf.braceflag;
         looping = lf.looping;
         defining_func = lf.defining_func;
         looking_at_function_handle = lf.looking_at_function_handle;
         looking_at_object_index = lf.looking_at_object_index;
         parsed_function_name = lf.parsed_function_name;
         pending_local_variables = lf.pending_local_variables;
+        nesting_level = lf.nesting_level;
       }
 
     return *this;
   }
 
   ~lexical_feedback (void) { }
 
   void init (void)
@@ -237,16 +314,20 @@ public:
 
   // If the top of the stack is TRUE, then we've already seen the name
   // of the current function.  Should only matter if
   // current_function_level > 0
   std::stack<bool> parsed_function_name;
 
   // Set of identifiers that might be local variable names.
   std::set<std::string> pending_local_variables;
+
+  // Is the closest nesting level a square bracket, squiggly brace or
+  // a paren?
+  bbp_nesting_level nesting_level;
 };
 
 class
 stream_reader
 {
 public:
   virtual int getc (void) = 0;
   virtual int ungetc (int c) = 0;
diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -226,68 +226,16 @@ std::stack <token*> token_stack;
 // Did eat_whitespace() eat a space or tab, or a newline, or both?
 
 typedef int yum_yum;
 
 const yum_yum ATE_NOTHING = 0;
 const yum_yum ATE_SPACE_OR_TAB = 1;
 const yum_yum ATE_NEWLINE = 2;
 
-// Is the closest nesting level a square bracket, squiggly brace or a paren?
-
-class bracket_brace_paren_nesting_level
-{
-public:
-
-  bracket_brace_paren_nesting_level (void) : context () { }
-
-  ~bracket_brace_paren_nesting_level (void) { }
-
-  void bracket (void) { context.push (BRACKET); }
-  bool is_bracket (void)
-    { return ! context.empty () && context.top () == BRACKET; }
-
-  void brace (void) {  context.push (BRACE); }
-  bool is_brace (void)
-    { return ! context.empty () && context.top () == BRACE; }
-
-  void paren (void) {  context.push (PAREN); }
-  bool is_paren (void)
-    { return ! context.empty () && context.top () == PAREN; }
-
-  bool is_bracket_or_brace (void)
-    { return (! context.empty ()
-              && (context.top () == BRACKET || context.top () == BRACE)); }
-
-  bool none (void) { return context.empty (); }
-
-  void remove (void) { if (! context.empty ()) context.pop (); }
-
-  void clear (void) { while (! context.empty ()) context.pop (); }
-
-private:
-
-  std::stack<int> context;
-
-  static const int BRACKET;
-  static const int BRACE;
-  static const int PAREN;
-
-  bracket_brace_paren_nesting_level (const bracket_brace_paren_nesting_level&);
-
-  bracket_brace_paren_nesting_level&
-  operator = (const bracket_brace_paren_nesting_level&);
-};
-
-const int bracket_brace_paren_nesting_level::BRACKET = 1;
-const int bracket_brace_paren_nesting_level::BRACE = 2;
-const int bracket_brace_paren_nesting_level::PAREN = 3;
-
-static bracket_brace_paren_nesting_level nesting_level;
-
 static bool Vdisplay_tokens = false;
 
 static unsigned int Vtoken_count = 0;
 
 // The start state that was in effect when the beginning of a block
 // comment was noticed.
 static int block_comment_nesting_level = 0;
 
@@ -537,17 +485,17 @@ NUMBER  (({D}+\.?{D}*{EXPON}?)|(\.{D}+{E
 
     if (! lexer_flags.looking_at_object_index.front ())
       {
         bool bin_op = next_token_is_bin_op (true);
         bool postfix_un_op = next_token_is_postfix_unary_op (true);
         bool sep_op = next_token_is_sep_op ();
 
         if (! (postfix_un_op || bin_op || sep_op)
-            && nesting_level.is_bracket_or_brace ()
+            && lexer_flags.nesting_level.is_bracket_or_brace ()
             && lexer_flags.convert_spaces_to_comma)
           {
             if ((tmp & ATE_NEWLINE) == ATE_NEWLINE)
               {
                 maybe_warn_separator_insert (';');
 
                 xunput (';', yytext);
               }
@@ -601,32 +549,32 @@ NUMBER  (({D}+\.?{D}*{EXPON}?)|(\.{D}+{E
     scan_for_comments (yytext);
     fixup_column_count (yytext);
     eat_whitespace ();
 
     lexer_flags.quote_is_transpose = false;
     lexer_flags.convert_spaces_to_comma = true;
     lexer_flags.at_beginning_of_statement = false;
 
-    if (nesting_level.none ())
+    if (lexer_flags.nesting_level.none ())
       return LEXICAL_ERROR;
 
     if (! lexer_flags.looking_at_object_index.front ()
-        && nesting_level.is_bracket_or_brace ())
+        && lexer_flags.nesting_level.is_bracket_or_brace ())
       {
         maybe_warn_separator_insert (';');
 
         COUNT_TOK_AND_RETURN (';');
       }
   }
 
 \[{S}* {
     LEXER_DEBUG ("\\[{S}*");
 
-    nesting_level.bracket ();
+    lexer_flags.nesting_level.bracket ();
 
     lexer_flags.looking_at_object_index.push_front (false);
 
     lexer_flags.current_input_column += yyleng;
     lexer_flags.quote_is_transpose = false;
     lexer_flags.convert_spaces_to_comma = true;
     lexer_flags.looking_for_object_index = false;
     lexer_flags.at_beginning_of_statement = false;
@@ -643,17 +591,17 @@ NUMBER  (({D}+\.?{D}*{EXPON}?)|(\.{D}+{E
     lexer_flags.bracketflag++;
     BEGIN (MATRIX_START);
     COUNT_TOK_AND_RETURN ('[');
   }
 
 \] {
     LEXER_DEBUG ("\\]");
 
-    nesting_level.remove ();
+    lexer_flags.nesting_level.remove ();
 
     lexer_flags.looking_at_object_index.pop_front ();
 
     lexer_flags.looking_for_object_index = true;
     lexer_flags.at_beginning_of_statement = false;
 
     TOK_RETURN (']');
   }
@@ -805,27 +753,27 @@ NUMBER  (({D}+\.?{D}*{EXPON}?)|(\.{D}+{E
     LEXER_DEBUG ("{NL}");
 
     lexer_flags.input_line_number++;
     lexer_flags.current_input_column = 1;
 
     lexer_flags.quote_is_transpose = false;
     lexer_flags.convert_spaces_to_comma = true;
 
-    if (nesting_level.none ())
+    if (lexer_flags.nesting_level.none ())
       {
         lexer_flags.at_beginning_of_statement = true;
         COUNT_TOK_AND_RETURN ('\n');
       }
-    else if (nesting_level.is_paren ())
+    else if (lexer_flags.nesting_level.is_paren ())
       {
         lexer_flags.at_beginning_of_statement = false;
         gripe_matlab_incompatible ("bare newline inside parentheses");
       }
-    else if (nesting_level.is_bracket_or_brace ())
+    else if (lexer_flags.nesting_level.is_bracket_or_brace ())
       return LEXICAL_ERROR;
   }
 
 %{
 // Single quote can either be the beginning of a string or a transpose
 // operator.
 %}
 
@@ -957,33 +905,33 @@ NUMBER  (({D}+\.?{D}*{EXPON}?)|(\.{D}+{E
 
     lexer_flags.looking_at_object_index.push_front
       (lexer_flags.looking_for_object_index);
 
     lexer_flags.looking_at_indirect_ref = false;
     lexer_flags.looking_for_object_index = false;
     lexer_flags.at_beginning_of_statement = false;
 
-    nesting_level.paren ();
+    lexer_flags.nesting_level.paren ();
     promptflag--;
 
     TOK_RETURN ('(');
   }
 
 ")" {
     LEXER_DEBUG (")");
 
-    nesting_level.remove ();
+    lexer_flags.nesting_level.remove ();
     lexer_flags.current_input_column++;
 
     lexer_flags.looking_at_object_index.pop_front ();
 
     lexer_flags.quote_is_transpose = true;
     lexer_flags.convert_spaces_to_comma
-      = (nesting_level.is_bracket_or_brace ()
+      = (lexer_flags.nesting_level.is_bracket_or_brace ()
          && ! lexer_flags.looking_at_anon_fcn_args);
     lexer_flags.looking_for_object_index = true;
     lexer_flags.at_beginning_of_statement = false;
 
     if (lexer_flags.looking_at_anon_fcn_args)
       lexer_flags.looking_at_anon_fcn_args = false;
 
     do_comma_insert_check ();
@@ -1015,17 +963,17 @@ NUMBER  (({D}+\.?{D}*{EXPON}?)|(\.{D}+{E
 "&="    { LEXER_DEBUG ("&="); XBIN_OP_RETURN (AND_EQ, false, false); }
 "|="    { LEXER_DEBUG ("|="); XBIN_OP_RETURN (OR_EQ, false, false); }
 "<<="   { LEXER_DEBUG ("<<="); XBIN_OP_RETURN (LSHIFT_EQ, false, false); }
 ">>="   { LEXER_DEBUG (">>="); XBIN_OP_RETURN (RSHIFT_EQ, false, false); }
 
 \{{S}* {
     LEXER_DEBUG ("\\{{S}*");
 
-    nesting_level.brace ();
+    lexer_flags.nesting_level.brace ();
 
     lexer_flags.looking_at_object_index.push_front
       (lexer_flags.looking_for_object_index);
 
     lexer_flags.current_input_column += yyleng;
     lexer_flags.quote_is_transpose = false;
     lexer_flags.convert_spaces_to_comma = true;
     lexer_flags.looking_for_object_index = false;
@@ -1042,17 +990,17 @@ NUMBER  (({D}+\.?{D}*{EXPON}?)|(\.{D}+{E
 "}" {
     LEXER_DEBUG ("}");
 
     lexer_flags.looking_at_object_index.pop_front ();
 
     lexer_flags.looking_for_object_index = true;
     lexer_flags.at_beginning_of_statement = false;
 
-    nesting_level.remove ();
+    lexer_flags.nesting_level.remove ();
 
     TOK_RETURN ('}');
   }
 
 %{
 // Unrecognized input is a lexical error.
 %}
 
@@ -1113,19 +1061,16 @@ reset_parser (void)
   parser_symtab_context.clear ();
 
   // We do want a prompt by default.
   promptflag = 1;
 
   // We are not in a block comment.
   block_comment_nesting_level = 0;
 
-  // Error may have occurred inside some brackets, braces, or parentheses.
-  nesting_level.clear ();
-
   // Clear out the stack of token info used to track line and column
   // numbers.
   while (! token_stack.empty ())
     {
       delete token_stack.top ();
       token_stack.pop ();
     }
 
@@ -1970,17 +1915,17 @@ process_comment (bool start_in_block, bo
 
   std::string txt = start_in_block
     ? grab_block_comment (flex_reader, eof)
     : grab_comment_block (flex_reader, false, eof);
 
   if (lexer_debug_flag)
     std::cerr << "C: " << txt << std::endl;
 
-  if (help_txt.empty () && nesting_level.none ())
+  if (help_txt.empty () && lexer_flags.nesting_level.none ())
     {
       if (! help_buf.empty ())
         help_buf.pop ();
 
       help_buf.push (txt);
     }
 
   octave_comment_buffer::append (txt);
@@ -1988,19 +1933,19 @@ process_comment (bool start_in_block, bo
   lexer_flags.current_input_column = 1;
   lexer_flags.quote_is_transpose = false;
   lexer_flags.convert_spaces_to_comma = true;
   lexer_flags.at_beginning_of_statement = true;
 
   if (YY_START == COMMAND_START)
     BEGIN (INITIAL);
 
-  if (nesting_level.none ())
+  if (lexer_flags.nesting_level.none ())
     return '\n';
-  else if (nesting_level.is_bracket_or_brace ())
+  else if (lexer_flags.nesting_level.is_bracket_or_brace ())
     return ';';
   else
     return 0;
 }
 
 // Return 1 if the given character matches any character in the given
 // string.
 
@@ -2769,19 +2714,19 @@ next_token_is_index_op (void)
   return c == '(' || c == '{';
 }
 
 static int
 handle_close_bracket (bool spc_gobbled, int bracket_type)
 {
   int retval = bracket_type;
 
-  if (! nesting_level.none ())
+  if (! lexer_flags.nesting_level.none ())
     {
-      nesting_level.remove ();
+      lexer_flags.nesting_level.remove ();
 
       if (bracket_type == ']')
         lexer_flags.bracketflag--;
       else if (bracket_type == '}')
         lexer_flags.braceflag--;
       else
         panic_impossible ();
     }
@@ -2792,18 +2737,18 @@ handle_close_bracket (bool spc_gobbled, 
   if (bracket_type == ']'
       && next_token_is_assign_op ()
       && ! lexer_flags.looking_at_return_list)
     {
       retval = CLOSE_BRACE;
     }
   else if ((lexer_flags.bracketflag || lexer_flags.braceflag)
            && lexer_flags.convert_spaces_to_comma
-           && (nesting_level.is_bracket ()
-               || (nesting_level.is_brace ()
+           && (lexer_flags.nesting_level.is_bracket ()
+               || (lexer_flags.nesting_level.is_brace ()
                    && ! lexer_flags.looking_at_object_index.front ())))
     {
       bool index_op = next_token_is_index_op ();
 
       // Don't insert comma if we are looking at something like
       //
       //   [x{i}{j}] or [x{i}(j)]
       //
@@ -2833,18 +2778,18 @@ handle_close_bracket (bool spc_gobbled, 
   lexer_flags.convert_spaces_to_comma = true;
 
   return retval;
 }
 
 static void
 maybe_unput_comma (int spc_gobbled)
 {
-  if (nesting_level.is_bracket ()
-      || (nesting_level.is_brace ()
+  if (lexer_flags.nesting_level.is_bracket ()
+      || (lexer_flags.nesting_level.is_brace ()
           && ! lexer_flags.looking_at_object_index.front ()))
     {
       int bin_op = next_token_is_bin_op (spc_gobbled);
 
       int postfix_un_op = next_token_is_postfix_unary_op (spc_gobbled);
 
       int c1 = text_yyinput ();
       int c2 = text_yyinput ();
