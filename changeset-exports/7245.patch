# HG changeset patch
# User jwe
# Date 1196737435 0
#      Tue Dec 04 03:03:55 2007 +0000
# Node ID d65670971cbc504720190f380f97c2ba3e8df15a
# Parent  5a9561046b89c3a6f0b93ed0111b745fb3f7d215
[project @ 2007-12-04 03:03:54 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,15 @@
+2007-12-03  John W. Eaton  <jwe@octave.org>
+
+	* contour.m, contour3.m, contourc.m, contourf.m, cylinder.m,
+	fplot.m, plot3.m, plotyy.m, quiver3.m, scatter.m, scatter3.m,
+	slice.m, sombrero.m, stairs.m, stem.m, stem3.m:
+	Generate demos from examples.
+
 2007-12-03  David Bateman  <dbateman@free.fr>
 
 	* testfun/test.m: Disable "testif" test block to avoid spurious
 	skipped test for "make check". Avoid printing variables for
 	skipped tests.
 
 	* testfun/test.m: Add "testif" type to allow for conditional tests.
 
diff --git a/scripts/plot/contour.m b/scripts/plot/contour.m
--- a/scripts/plot/contour.m
+++ b/scripts/plot/contour.m
@@ -30,17 +30,16 @@
 ## contour levels, @var{c}, is only returned if requested.  For example:
 ##
 ## @example
 ## @group
 ## x = 0:2;
 ## y = x;
 ## z = x' * y;
 ## contour (x, y, z, 2:3)
-##
 ## @end group
 ## @end example
 ##
 ## The optional input and output argument @var{h} allows an axis handle to 
 ## be passed to @code{contour} and the handles to the contour objects to be
 ## returned.
 ## @seealso{contourc, patch, plot}
 ## @end deftypefn
@@ -61,8 +60,12 @@ function [c, h] = contour (varargin)
   end_unwind_protect
 
   if (nargout > 0)
     c = ctmp;
     h = htmp;
   endif
 
 endfunction
+
+%!demo
+%! [x, y, z] = peaks ();
+%! contour (x, y, z);
diff --git a/scripts/plot/contour3.m b/scripts/plot/contour3.m
--- a/scripts/plot/contour3.m
+++ b/scripts/plot/contour3.m
@@ -62,8 +62,15 @@ function [c, h] = contour3 (varargin)
   endif
 
   if (nargout > 0)
     c = ctmp;
     h = htmp
   endif
 
 endfunction
+
+%!demo
+%! contour3 (peaks (19));
+%! hold on
+%! surface (peaks (19), 'FaceColor', 'none', 'EdgeColor', 'black')
+%! colormap hot
+%! hold off
diff --git a/scripts/plot/contourc.m b/scripts/plot/contourc.m
--- a/scripts/plot/contourc.m
+++ b/scripts/plot/contourc.m
@@ -108,8 +108,14 @@ function [c, lev] = contourc (varargin)
 
   ## Now call __contourc__ for the real work...
   c = __contourc__ (x, y, z, vv);
   if (nargout == 2)
     lev = vv;
   endif
 
 endfunction
+
+%!demo
+%! x = 0:2;
+%! y = x;
+%! z = x' * y;
+%! contourc (x, y, z, 2:3)
diff --git a/scripts/plot/contourf.m b/scripts/plot/contourf.m
--- a/scripts/plot/contourf.m
+++ b/scripts/plot/contourf.m
@@ -249,8 +249,12 @@ function [X, Y, Z, lvl, patch_props] = p
     lvl(idx1(1:end-1)) = [];
     lvl(idx2) = [];
     if (isempty (lvl))
       lvl = [minz, minz];
     endif
   endif
 
 endfunction
+
+%!demo
+%! [x, y, z] = peaks (50);
+%! contourf (x, y, z, -7:9)
diff --git a/scripts/plot/cylinder.m b/scripts/plot/cylinder.m
--- a/scripts/plot/cylinder.m
+++ b/scripts/plot/cylinder.m
@@ -76,8 +76,13 @@ function [xx, yy, zz] = cylinder (vararg
     xx = x;
     yy = y;
     zz = z;
   else
     surf (ax, x, y, z);
   endif
 
 endfunction
+
+%!demo
+%! disp ("plotting a cone")
+%! [x, y, z] = cylinder (10:-1:0,50);
+%! surf (x, y, z);
diff --git a/scripts/plot/fplot.m b/scripts/plot/fplot.m
--- a/scripts/plot/fplot.m
+++ b/scripts/plot/fplot.m
@@ -111,8 +111,14 @@ function fplot (fn, limits, n, linespec)
     legend (nam);
   else
     for i=1:columns(y)
       nams{i} = sprintf ("%s(:,%i)", nam, i);
     endfor
     legend (nams{:});
   endif
 endfunction
+
+%!demo
+%! fplot ("cos", [0, 2*pi])
+
+%!demo
+%! fplot ("[cos(x), sin(x)]", [0, 2*pi])
diff --git a/scripts/plot/plot3.m b/scripts/plot/plot3.m
--- a/scripts/plot/plot3.m
+++ b/scripts/plot/plot3.m
@@ -296,8 +296,13 @@ function retval = plot3 (varargin)
 
   set (gca (), "view", [-37.5, 30]);
 
   if (nargout > 0 && idx > 0)
     retval = tmp;
   endif
 
 endfunction
+
+%!demo
+%! z = [0:0.05:5];
+%! plot3 (cos(2*pi*z), sin(2*pi*z), z, ";helix;");
+%! plot3 (z, exp(2i*pi*z), ";complex sinusoid;");
diff --git a/scripts/plot/plotyy.m b/scripts/plot/plotyy.m
--- a/scripts/plot/plotyy.m
+++ b/scripts/plot/plotyy.m
@@ -121,8 +121,17 @@ function color = getcolor (ax)
   elseif (isfield (obj, "facecolor") && ! ischar (obj.facecolor))
     color = obj.facecolor;
   elseif (isfield (obj, "edgecolor") && !  ischar (obj.edgecolor))
     color = obj.edgecolor;
   else
     color = [0, 0, 0];
   endif
 endfunction
+
+%!demo
+%! x = 0:0.1:2*pi; 
+%! y1 = sin (x);
+%! y2 = exp (x - 1);
+%! ax = plotyy (x, y1, x - 1, y2, @@plot, @@semilogy);
+%! xlabel ("X");
+%! ylabel (ax(1), "Axis 1");
+%! ylabel (ax(2), "Axis 2");
diff --git a/scripts/plot/quiver3.m b/scripts/plot/quiver3.m
--- a/scripts/plot/quiver3.m
+++ b/scripts/plot/quiver3.m
@@ -85,8 +85,15 @@ endfunction
 %!demo
 %! [x,y]=meshgrid (-1:0.1:1); 
 %! z=sin(2*pi*sqrt(x.^2+y.^2)); 
 %! theta=2*pi*sqrt(x.^2+y.^2)+pi/2;
 %! quiver3(x,y,z,sin(theta),cos(theta),ones(size(z)));
 %! hold on; 
 %! mesh(x,y,z); 
 %! hold off;
+
+%!demo
+%! [x, y, z] = peaks (25);
+%! surf (x, y, z);
+%! hold on;
+%! [u, v, w] = surfnorm (x, y, z / 10);
+%! quiver3 (x, y, z, u, v, w);
diff --git a/scripts/plot/scatter.m b/scripts/plot/scatter.m
--- a/scripts/plot/scatter.m
+++ b/scripts/plot/scatter.m
@@ -71,8 +71,13 @@ function retval = scatter (varargin)
     end_unwind_protect
   endif
 
   if (nargout > 0)
     retval = tmp;
   endif
 
 endfunction
+
+%!demo
+%! x = randn (100, 1);
+%! y = randn (100, 1);
+%! scatter (x, y, [], sqrt(x.^2 + y.^2));
diff --git a/scripts/plot/scatter3.m b/scripts/plot/scatter3.m
--- a/scripts/plot/scatter3.m
+++ b/scripts/plot/scatter3.m
@@ -74,8 +74,12 @@ function retval = scatter3 (varargin)
     set (get (tmp, "parent"), "view", [-37.5, 30]);
   endif
 
   if (nargout > 0)
     retval = tmp;
   endif
 
 endfunction
+
+%!demo
+%! [x, y, z] = peaks (20);
+%! scatter3 (x(:), y(:), z(:), [], z(:));
diff --git a/scripts/plot/slice.m b/scripts/plot/slice.m
--- a/scripts/plot/slice.m
+++ b/scripts/plot/slice.m
@@ -167,8 +167,16 @@ function h = slice (varargin)
     set (ax, "view", [-37.5, 30.0]);
   endif
 
   if (nargout > 0)
     h = tmp;
   endif
 
 endfunction
+
+%!demo
+%! [x, y, z] = meshgrid (linspace (-8, 8, 32));
+%! v = sin (sqrt (x.^2 + y.^2 + z.^2)) ./ (sqrt (x.^2 + y.^2 + z.^2));
+%! slice (x, y, z, v, [], 0, []);
+%! [xi, yi] = meshgrid (linspace (-7, 7));
+%! zi = xi + yi;
+%! slice (x, y, z, v, xi, yi, zi);
diff --git a/scripts/plot/sombrero.m b/scripts/plot/sombrero.m
--- a/scripts/plot/sombrero.m
+++ b/scripts/plot/sombrero.m
@@ -55,8 +55,11 @@ function [x, y, z] = sombrero (n)
     else
       error ("sombrero: number of grid lines must be greater than 1");
     endif
   else
     print_usage ();
   endif
 
 endfunction
+
+%!demo
+%! sombrero ();
diff --git a/scripts/plot/stairs.m b/scripts/plot/stairs.m
--- a/scripts/plot/stairs.m
+++ b/scripts/plot/stairs.m
@@ -110,8 +110,19 @@ function [xs, ys] = stairs (x, y)
   if (nargout == 0)
     plot (tmp_xs, tmp_ys);
   else
     xs = tmp_xs;
     ys = tmp_ys;
   endif
 
 endfunction
+
+%!demo
+%! x = 1:10;
+%! y = rand (1, 10);
+## stairs (x, y);
+
+%!demo
+%! x = 1:10;
+%! y = rand (1, 10);
+%! [xs, ys] = stairs (x, y);
+%! plot (xs, ys);
diff --git a/scripts/plot/stem.m b/scripts/plot/stem.m
--- a/scripts/plot/stem.m
+++ b/scripts/plot/stem.m
@@ -100,8 +100,37 @@ function h = stem (varargin)
 
   tmp = __stem__ (false, varargin{:});
 
   if (nargout > 0)
     h = tmp;
   endif
 
 endfunction
+
+%!demo
+%! x = 1:10;
+%! stem (x);
+
+%!demo
+%! x = 1:10;
+%! y = ones (1, length (x))*2.*x;
+%! stem (x, y);
+
+%!demo
+%! x = 1:10;
+%! y = ones (size (x))*2.*x;
+%! h = stem (x, y, "b");
+
+%!demo
+%! x = 1:10;
+%! y = ones (size (x))*2.*x;
+%! h = stem (x, y, "-.k");
+
+%!demo
+%! x = 1:10;
+%! y = ones (size (x))*2.*x;
+%! h = stem (x, y, "-.k.");
+
+%!demo
+%! x = 1:10;
+%! y = ones (size (x))*2.*x;
+%! h = stem (x, y, "fill");
diff --git a/scripts/plot/stem3.m b/scripts/plot/stem3.m
--- a/scripts/plot/stem3.m
+++ b/scripts/plot/stem3.m
@@ -43,8 +43,12 @@ function h = stem3 (varargin)
 
   tmp = __stem__ (true, varargin{:});
 
   if (nargout > 0)
     h = tmp;
   endif
 
 endfunction
+
+%!demo
+%! theta = 0:0.2:6; 
+%! stem3 (cos (theta), sin (theta), theta) 
