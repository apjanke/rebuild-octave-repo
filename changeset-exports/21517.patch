# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1458614254 14400
#      Mon Mar 21 22:37:34 2016 -0400
# Node ID e626d8a3427ee8a4dd509c74a749ece2cda2fb5f
# Parent  ba9d1a17f56370bc87e492a3eaea7c6c7bf3c7bb
avoid possible memory leak related to ostringstream objects

* oct-stream.cc (scanf_format_list::buf, printf_format_list::buf,
textscan_format_list:buf): Use std::ostringstream object instead of a
pointer to one that must be allocated.  Instead of deleting, clear
flags and initialize internal string buffer.  Update all uses.

diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -299,17 +299,17 @@ private:
 
   // Index to current element;
   size_t curr_idx;
 
   // List of format elements.
   std::deque<scanf_format_elt*> fmt_elts;
 
   // Temporary buffer.
-  std::ostringstream *buf;
+  std::ostringstream buf;
 
   void add_elt_to_list (int width, bool discard, char type, char modifier,
                         const std::string& char_class = "");
 
   void process_conversion (const std::string& s, size_t& i, size_t n,
                            int& width, bool& discard, char& type,
                            char& modifier);
 
@@ -319,52 +319,49 @@ private:
   // No copying!
 
   scanf_format_list (const scanf_format_list&);
 
   scanf_format_list& operator = (const scanf_format_list&);
 };
 
 scanf_format_list::scanf_format_list (const std::string& s)
-  : nconv (0), curr_idx (0), fmt_elts (), buf (0)
+  : nconv (0), curr_idx (0), fmt_elts (), buf ()
 {
   size_t n = s.length ();
 
   size_t i = 0;
 
   int width = 0;
   bool discard = false;
   char modifier = '\0';
   char type = '\0';
 
   bool have_more = true;
 
   while (i < n)
     {
       have_more = true;
 
-      if (! buf)
-        buf = new std::ostringstream ();
-
       if (s[i] == '%')
         {
           // Process percent-escape conversion type.
 
           process_conversion (s, i, n, width, discard, type, modifier);
 
-          have_more = (buf != 0);
+          have_more = (buf.tellp () != 0);
         }
       else if (isspace (s[i]))
         {
           type = scanf_format_elt::whitespace_conversion;
 
           width = 0;
           discard = false;
           modifier = '\0';
-          *buf << " ";
+          buf << " ";
 
           while (++i < n && isspace (s[i]))
             ; // skip whitespace
 
           add_elt_to_list (width, discard, type, modifier);
 
           have_more = false;
         }
@@ -372,34 +369,35 @@ scanf_format_list::scanf_format_list (co
         {
           type = scanf_format_elt::literal_conversion;
 
           width = 0;
           discard = false;
           modifier = '\0';
 
           while (i < n && ! isspace (s[i]) && s[i] != '%')
-            *buf << s[i++];
+            buf << s[i++];
 
           add_elt_to_list (width, discard, type, modifier);
 
           have_more = false;
         }
 
       if (nconv < 0)
         {
           have_more = false;
           break;
         }
     }
 
   if (have_more)
     add_elt_to_list (width, discard, type, modifier);
 
-  delete buf;
+  buf.clear ();
+  buf.str ("");
 }
 
 scanf_format_list::~scanf_format_list (void)
 {
   size_t n = fmt_elts.size ();
 
   for (size_t i = 0; i < n; i++)
     {
@@ -408,32 +406,29 @@ scanf_format_list::~scanf_format_list (v
     }
 }
 
 void
 scanf_format_list::add_elt_to_list (int width, bool discard, char type,
                                     char modifier,
                                     const std::string& char_class)
 {
-  if (buf)
-    {
-      std::string text = buf->str ();
-
-      if (! text.empty ())
-        {
-          scanf_format_elt *elt
-            = new scanf_format_elt (text.c_str (), width, discard, type,
-                                    modifier, char_class);
-
-          fmt_elts.push_back (elt);
-        }
-
-      delete buf;
-      buf = 0;
-    }
+  std::string text = buf.str ();
+
+  if (! text.empty ())
+    {
+      scanf_format_elt *elt
+        = new scanf_format_elt (text.c_str (), width, discard, type,
+                                modifier, char_class);
+
+      fmt_elts.push_back (elt);
+    }
+
+  buf.clear ();
+  buf.str ("");
 }
 
 static std::string
 expand_char_class (const std::string& s)
 {
   std::string retval;
 
   size_t len = s.length ();
@@ -472,49 +467,49 @@ scanf_format_list::process_conversion (c
                                        size_t n, int& width, bool& discard,
                                        char& type, char& modifier)
 {
   width = 0;
   discard = false;
   modifier = '\0';
   type = '\0';
 
-  *buf << s[i++];
+  buf << s[i++];
 
   bool have_width = false;
 
   while (i < n)
     {
       switch (s[i])
         {
         case '*':
           if (discard)
             nconv = -1;
           else
             {
               discard = true;
-              *buf << s[i++];
+              buf << s[i++];
             }
           break;
 
         case '0': case '1': case '2': case '3': case '4':
         case '5': case '6': case '7': case '8': case '9':
           if (have_width)
             nconv = -1;
           else
             {
               char c = s[i++];
               width = 10 * width + c - '0';
               have_width = true;
-              *buf << c;
+              buf << c;
               while (i < n && isdigit (s[i]))
                 {
                   c = s[i++];
                   width = 10 * width + c - '0';
-                  *buf << c;
+                  buf << c;
                 }
             }
           break;
 
         case 'h': case 'l': case 'L':
           if (modifier != '\0')
             nconv = -1;
           else
@@ -532,17 +527,17 @@ scanf_format_list::process_conversion (c
         case 'e': case 'f': case 'g':
           if (modifier == 'h')
             {
               nconv = -1;
               break;
             }
 
           // No float or long double conversions, thanks.
-          *buf << 'l';
+          buf << 'l';
 
           goto fini;
 
         case 'c': case 's': case 'p': case '%': case '[':
           if (modifier != '\0')
             {
               nconv = -1;
               break;
@@ -579,61 +574,61 @@ scanf_format_list::finish_conversion (co
   std::string char_class;
 
   size_t beg_idx = std::string::npos;
   size_t end_idx = std::string::npos;
 
   if (s[i] == '%')
     {
       type = '%';
-      *buf << s[i++];
+      buf << s[i++];
     }
   else
     {
       type = s[i];
 
       if (s[i] == '[')
         {
-          *buf << s[i++];
+          buf << s[i++];
 
           if (i < n)
             {
               beg_idx = i;
 
               if (s[i] == '^')
                 {
                   type = '^';
-                  *buf << s[i++];
+                  buf << s[i++];
 
                   if (i < n)
                     {
                       beg_idx = i;
 
                       if (s[i] == ']')
-                        *buf << s[i++];
+                        buf << s[i++];
                     }
                 }
               else if (s[i] == ']')
-                *buf << s[i++];
+                buf << s[i++];
             }
 
           while (i < n && s[i] != ']')
-            *buf << s[i++];
+            buf << s[i++];
 
           if (i < n && s[i] == ']')
             {
               end_idx = i-1;
-              *buf << s[i++];
+              buf << s[i++];
             }
 
           if (s[i-1] != ']')
             retval = nconv = -1;
         }
       else
-        *buf << s[i++];
+        buf << s[i++];
 
       nconv++;
     }
 
   if (nconv >= 0)
     {
       if (beg_idx != std::string::npos && end_idx != std::string::npos)
         char_class = expand_char_class (s.substr (beg_idx,
@@ -845,17 +840,17 @@ private:
 
   // Index to current element;
   size_t curr_idx;
 
   // List of format elements.
   std::deque<printf_format_elt*> fmt_elts;
 
   // Temporary buffer.
-  std::ostringstream *buf;
+  std::ostringstream buf;
 
   void add_elt_to_list (int args, const std::string& flags, int fw,
                         int prec, char type, char modifier);
 
   void process_conversion (const std::string& s, size_t& i, size_t n,
                            int& args, std::string& flags, int& fw,
                            int& prec, char& modifier, char& type);
 
@@ -866,17 +861,17 @@ private:
   // No copying!
 
   printf_format_list (const printf_format_list&);
 
   printf_format_list& operator = (const printf_format_list&);
 };
 
 printf_format_list::printf_format_list (const std::string& s)
-  : nconv (0), curr_idx (0), fmt_elts (), buf (0)
+  : nconv (0), curr_idx (0), fmt_elts (), buf ()
 {
   size_t n = s.length ();
 
   size_t i = 0;
 
   int args = 0;
   std::string flags;
   int fw = -1;
@@ -895,63 +890,66 @@ printf_format_list::printf_format_list (
       fmt_elts.push_back (elt);
     }
   else
     {
       while (i < n)
         {
           have_more = true;
 
-          if (! buf)
-            {
-              buf = new std::ostringstream ();
-              empty_buf = true;
-            }
+          empty_buf = (buf.tellp () == 0);
 
           switch (s[i])
             {
             case '%':
               {
                 if (empty_buf)
                   {
                     process_conversion (s, i, n, args, flags, fw, prec,
                                         type, modifier);
 
-                    have_more = (buf != 0);
+                    // If there is nothing in the buffer, then
+                    // add_elt_to_list must have just been called, so we
+                    // are already done with the current element and we
+                    // don't need to call add_elt_to_list if this is our
+                    // last trip through the loop.
+
+                    have_more = (buf.tellp () != 0);
                   }
                 else
                   add_elt_to_list (args, flags, fw, prec, type, modifier);
               }
               break;
 
             default:
               {
                 args = 0;
                 flags = "";
                 fw = -1;
                 prec = -1;
                 modifier = '\0';
                 type = '\0';
-                *buf << s[i++];
+                buf << s[i++];
                 empty_buf = false;
               }
               break;
             }
 
           if (nconv < 0)
             {
               have_more = false;
               break;
             }
         }
 
       if (have_more)
         add_elt_to_list (args, flags, fw, prec, type, modifier);
 
-      delete buf;
+      buf.clear ();
+      buf.str ("");
     }
 }
 
 printf_format_list::~printf_format_list (void)
 {
   size_t n = fmt_elts.size ();
 
   for (size_t i = 0; i < n; i++)
@@ -961,59 +959,56 @@ printf_format_list::~printf_format_list 
     }
 }
 
 void
 printf_format_list::add_elt_to_list (int args, const std::string& flags,
                                      int fw, int prec, char type,
                                      char modifier)
 {
-  if (buf)
-    {
-      std::string text = buf->str ();
-
-      if (! text.empty ())
-        {
-          printf_format_elt *elt
-            = new printf_format_elt (text.c_str (), args, fw, prec, flags,
-                                     type, modifier);
-
-          fmt_elts.push_back (elt);
-        }
-
-      delete buf;
-      buf = 0;
-    }
+  std::string text = buf.str ();
+
+  if (! text.empty ())
+    {
+      printf_format_elt *elt
+        = new printf_format_elt (text.c_str (), args, fw, prec, flags,
+                                 type, modifier);
+
+      fmt_elts.push_back (elt);
+    }
+
+  buf.clear ();
+  buf.str ("");
 }
 
 void
 printf_format_list::process_conversion (const std::string& s, size_t& i,
                                         size_t n, int& args,
                                         std::string& flags, int& fw,
                                         int& prec, char& modifier,
                                         char& type)
 {
   args = 0;
   flags = "";
   fw = -1;
   prec = -1;
   modifier = '\0';
   type = '\0';
 
-  *buf << s[i++];
+  buf << s[i++];
 
   bool nxt = false;
 
   while (i < n)
     {
       switch (s[i])
         {
         case '-': case '+': case ' ': case '0': case '#':
           flags += s[i];
-          *buf << s[i++];
+          buf << s[i++];
           break;
 
         default:
           nxt = true;
           break;
         }
 
       if (nxt)
@@ -1021,62 +1016,62 @@ printf_format_list::process_conversion (
     }
 
   if (i < n)
     {
       if (s[i] == '*')
         {
           fw = -2;
           args++;
-          *buf << s[i++];
+          buf << s[i++];
         }
       else
         {
           if (isdigit (s[i]))
             {
               int nn = 0;
               std::string tmp = s.substr (i);
               sscanf (tmp.c_str (), "%d%n", &fw, &nn);
             }
 
           while (i < n && isdigit (s[i]))
-            *buf << s[i++];
+            buf << s[i++];
         }
     }
 
   if (i < n && s[i] == '.')
     {
       // nothing before the . means 0.
       if (fw == -1)
         fw = 0;
 
       // . followed by nothing is 0.
       prec = 0;
 
-      *buf << s[i++];
+      buf << s[i++];
 
       if (i < n)
         {
           if (s[i] == '*')
             {
               prec = -2;
               args++;
-              *buf << s[i++];
+              buf << s[i++];
             }
           else
             {
               if (isdigit (s[i]))
                 {
                   int nn = 0;
                   std::string tmp = s.substr (i);
                   sscanf (tmp.c_str (), "%d%n", &prec, &nn);
                 }
 
               while (i < n && isdigit (s[i]))
-                *buf << s[i++];
+                buf << s[i++];
             }
         }
     }
 
   if (i < n)
     {
       // Accept and record modifier, but don't place it in the format
       // item text.  All integer conversions are handled as 64-bit
@@ -1131,17 +1126,17 @@ printf_format_list::finish_conversion (c
           break;
         }
       goto fini;
 
     fini:
 
       type = s[i];
 
-      *buf << s[i++];
+      buf << s[i++];
 
       if (type != '%' || args != 0)
         nconv++;
 
       if (type != '%')
         args++;
 
       add_elt_to_list (args, flags, fw, prec, type, modifier);
@@ -1728,17 +1723,17 @@ private:
 
   // List of format elements.
   std::deque<textscan_format_elt*> fmt_elts;
 
   // list holding column arrays of types specified by conversions
   std::list<octave_value> output_container;
 
   // Temporary buffer.
-  std::ostringstream *buf;
+  std::ostringstream buf;
 
   void add_elt_to_list (unsigned int width, int prec, int bitwidth,
                         octave_value val_type, bool discard,
                         char type,
                         const std::string& char_class = std::string ());
 
   void process_conversion (const std::string& s, size_t& i, size_t n);
 
@@ -1906,59 +1901,66 @@ private:
   textscan (const textscan&);
 
   textscan& operator = (const textscan&);
 };
 
 textscan_format_list::textscan_format_list (const std::string& s,
                                             const std::string& who_arg)
   : who (who_arg), set_from_first (false), has_string (false),
-    nconv (0), curr_idx (0), fmt_elts (), buf (0)
+    nconv (0), curr_idx (0), fmt_elts (), buf ()
 {
   size_t n = s.length ();
 
   size_t i = 0;
 
   unsigned int width = -1;              // Unspecified width = max (except %c)
   int prec = -1;
   int bitwidth = 0;
   bool discard = false;
   char type = '\0';
 
   bool have_more = true;
 
   if (s.empty ())
     {
-      buf = new std::ostringstream ("%f");
+      buf.clear ();
+      buf.str ("");
+
+      buf << "%f";
+
       bitwidth = 64;
       type = 'f';
       add_elt_to_list (width, prec, bitwidth, octave_value (NDArray ()),
                        discard, type);
       have_more = false;
       set_from_first = true;
       nconv = 1;
     }
   else
     {
       set_from_first = false;
 
       while (i < n)
         {
           have_more = true;
 
-          if (! buf)
-            buf = new std::ostringstream ();
-
           if (s[i] == '%' && (i+1 == n || s[i+1] != '%'))
             {
               // Process percent-escape conversion type.
 
               process_conversion (s, i, n);
 
-              have_more = (buf != 0);
+              // If there is nothing in the buffer, then add_elt_to_list
+              // must have just been called, so we are already done with
+              // the current element and we don't need to call
+              // add_elt_to_list if this is our last trip through the
+              // loop.
+
+              have_more = (buf.tellp () != 0);
             }
           else if (isspace (s[i]))
             {
               while (++i < n && isspace (s[i]))
                 /* skip whitespace */;
 
               have_more = false;
             }
@@ -1971,17 +1973,17 @@ textscan_format_list::textscan_format_li
               bitwidth = 0;
               discard = true;
 
               while (i < n && ! isspace (s[i])
                      && (s[i] != '%' || (i+1 < n && s[i+1] == '%')))
                 {
                   if (s[i] == '%')      // if double %, skip one
                     i++;
-                  *buf << s[i++];
+                  buf << s[i++];
                   width++;
                 }
 
               add_elt_to_list (width, prec, bitwidth, octave_value (),
                                discard, type);
 
               have_more = false;
             }
@@ -1992,17 +1994,18 @@ textscan_format_list::textscan_format_li
               break;
             }
         }
     }
 
   if (have_more)
     add_elt_to_list (width, prec, bitwidth, octave_value (), discard, type);
 
-  delete buf;
+  buf.clear ();
+  buf.str ("");
 }
 
 textscan_format_list::~textscan_format_list (void)
 {
   size_t n = numel ();
 
   for (size_t i = 0; i < n; i++)
     {
@@ -2012,136 +2015,133 @@ textscan_format_list::~textscan_format_l
 }
 
 void
 textscan_format_list::add_elt_to_list (unsigned int width, int prec,
                                        int bitwidth, octave_value val_type,
                                        bool discard, char type,
                                        const std::string& char_class)
 {
-  if (buf)
-    {
-      std::string text = buf->str ();
-
-      if (! text.empty ())
-        {
-          textscan_format_elt *elt
-            = new textscan_format_elt (text, width, prec, bitwidth, discard, type, char_class);
-
-          if (! discard)
-            output_container.push_back (val_type);
-
-          fmt_elts.push_back (elt);
-        }
-
-      delete buf;
-      buf = 0;
-    }
+  std::string text = buf.str ();
+
+  if (! text.empty ())
+    {
+      textscan_format_elt *elt
+        = new textscan_format_elt (text, width, prec, bitwidth, discard, type, char_class);
+
+      if (! discard)
+        output_container.push_back (val_type);
+
+      fmt_elts.push_back (elt);
+    }
+
+  buf.clear ();
+  buf.str ("");
 }
 
 void
 textscan_format_list::process_conversion (const std::string& s, size_t& i,
                                           size_t n)
 {
   unsigned width = 0;
   int prec = -1;
   int bitwidth = 0;
   bool discard = false;
   octave_value val_type;
   char type = '\0';
 
-  *buf << s[i++];
+  buf << s[i++];
 
   bool have_width = false;
 
   while (i < n)
     {
       switch (s[i])
         {
         case '*':
           if (discard)
             nconv = -1;
           else
             {
               discard = true;
-              *buf << s[i++];
+              buf << s[i++];
             }
           break;
 
         case '0': case '1': case '2': case '3': case '4':
         case '5': case '6': case '7': case '8': case '9':
           if (have_width)
             nconv = -1;
           else
             {
               char c = s[i++];
               width = width * 10 + c - '0';
               have_width = true;
-              *buf << c;
+              buf << c;
               while (i < n && isdigit (s[i]))
                 {
                   c = s[i++];
                   width = width * 10 + c - '0';
-                  *buf << c;
+                  buf << c;
                 }
 
               if (i < n && s[i] == '.')
                 {
-                  *buf << s[i++];
+                  buf << s[i++];
                   prec = 0;
                   while (i < n && isdigit (s[i]))
                     {
                       c = s[i++];
                       prec = prec * 10 + c - '0';
-                      *buf << c;
+                      buf << c;
                     }
                 }
             }
           break;
 
         case 'd': case 'u':
           {
             bool done = true;
-            *buf << (type = s[i++]);
+            buf << (type = s[i++]);
             if (i < n)
               {
                 if (s[i] == '8')
                   {
                     bitwidth = 8;
                     if (type == 'd')
                       val_type = octave_value (int8NDArray ());
                     else
                       val_type = octave_value (uint8NDArray ());
-                    *buf << s[i++];
+                    buf << s[i++];
                   }
                 else if (s[i] == '1' && i+1 < n && s[i+1] == '6')
                   {
                     bitwidth = 16;
                     if (type == 'd')
                       val_type = octave_value (int16NDArray ());
                     else
                       val_type = octave_value (uint16NDArray ());
-                    *buf << s[i++];
-                    *buf << s[i++];
+                    buf << s[i++];
+                    buf << s[i++];
                   }
                 else if (s[i] == '3' && i+1 < n && s[i+1] == '2')
                   {
                     done = false;       // use default size below
-                    *buf << s[i++];
-                    *buf << s[i++];
+                    buf << s[i++];
+                    buf << s[i++];
                   }
                 else if (s[i] == '6' && i+1 < n && s[i+1] == '4')
                   {
                     bitwidth = 64;
                     if (type == 'd')
                       val_type = octave_value (int64NDArray ());
                     else
                       val_type = octave_value (uint64NDArray ());
-                    *buf << s[i++];
-                    *buf << s[i++];
+                    buf << s[i++];
+                    buf << s[i++];
                   }
                 else
                   done = false;
               }
             else
               done = false;
 
             if (! done)
@@ -2151,50 +2151,50 @@ textscan_format_list::process_conversion
                   val_type = octave_value (int32NDArray ());
                 else
                   val_type = octave_value (uint32NDArray ());
               }
             goto fini;
           }
 
         case 'f':
-          *buf << (type = s[i++]);
+          buf << (type = s[i++]);
           bitwidth = 64;
           if (i < n)
             {
               if (s[i] == '3' && i+1 < n && s[i+1] == '2')
                 {
                   bitwidth = 32;
                   val_type = octave_value (FloatNDArray ());
-                  *buf << s[i++];
-                  *buf << s[i++];
+                  buf << s[i++];
+                  buf << s[i++];
                 }
               else if (s[i] == '6' && i+1 < n && s[i+1] == '4')
                 {
                   val_type = octave_value (NDArray ());
-                  *buf << s[i++];
-                  *buf << s[i++];
+                  buf << s[i++];
+                  buf << s[i++];
                 }
               else
                 val_type = octave_value (NDArray ());
             }
           else
             val_type = octave_value (NDArray ());
           goto fini;
 
         case 'n':
-          *buf << (type = s[i++]);
+          buf << (type = s[i++]);
           bitwidth = 64;
           val_type = octave_value (NDArray ());
           goto fini;
 
         case 's': case 'q': case '[': case 'c':
           if (! discard)
             val_type = octave_value (Cell ());
-          *buf << (type = s[i++]);
+          buf << (type = s[i++]);
           has_string = true;
           goto fini;
 
         fini:
           {
             if (! have_width)
               {
                 if (type == 'c')        // %c defaults to one character
@@ -2341,37 +2341,37 @@ textscan_format_list::finish_conversion 
         {
           if (i < n)
             {
               beg_idx = i;
 
               if (s[i] == '^')
                 {
                   type = '^';
-                  *buf << s[i++];
+                  buf << s[i++];
 
                   if (i < n)
                     {
                       beg_idx = i;
 
                       if (s[i] == ']')
-                        *buf << s[i++];
+                        buf << s[i++];
                     }
                 }
               else if (s[i] == ']')
-                *buf << s[i++];
+                buf << s[i++];
             }
 
           while (i < n && s[i] != ']')
-            *buf << s[i++];
+            buf << s[i++];
 
           if (i < n && s[i] == ']')
             {
               end_idx = i-1;
-              *buf << s[i++];
+              buf << s[i++];
             }
 
           if (s[i-1] != ']')
             retval = nconv = -1;
         }
     }
 
   if (nconv >= 0)
