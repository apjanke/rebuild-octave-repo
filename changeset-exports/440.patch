# HG changeset patch
# User jwe
# Date 770268817 0
#      Mon May 30 03:33:37 1994 +0000
# Node ID e27d10f2e5732a5d24007e5cc7d5764f584c8e59
# Parent  be9fcedb17156c76689c524f0739a7f521026157
[project @ 1994-05-30 03:33:37 by jwe]

diff --git a/src/lex.h b/src/lex.h
--- a/src/lex.h
+++ b/src/lex.h
@@ -91,16 +91,20 @@ extern void restore_input_buffer (void *
 extern void delete_input_buffer (void *buf);
 
 // See if a function file has extra garbage after the end statement.
 extern void check_for_garbage_after_fcn_def (void);
 
 // Return transpose or start a string?
 extern int quote_is_transpose;
 
+// Nonzero means we thing we are looking at the beginning of a
+// function definition.
+extern int beginning_of_function;
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -15,17 +15,16 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with GNU CC; see the file COPYING.  If not, write to the Free
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
-%x COMMENT
 %x NEW_MATRIX
 %x HELP_FCN
 %s TEXT_FCN
 %s DQSTRING
 %s STRING
 %s MATRIX
 
 %{
@@ -52,32 +51,32 @@ static SLStack <token*> token_stack;
 #include "symtab.h"
 #include "error.h"
 #include "utils.h"
 #include "tree.h"
 #include "y.tab.h"
 #include "parse.h"
 #include "lex.h"
 
-// Nonzero means we thing we are looking at the beginning of a
-// function definition.
-static int beginning_of_function = 0;
-
 // Nonzero means we think we are looking at a set command.
 static int doing_set = 0;
 
 // GAG.  Stupid kludge so that [[1,2][3,4]] will work.
 static do_comma_insert = 0;
 
 // Brace level count.
 static int braceflag = 0;
 
 // Return transpose or start a string?
 int quote_is_transpose = 0;
 
+// Nonzero means we thing we are looking at the beginning of a
+// function definition.
+int beginning_of_function = 0;
+
 // Nonzero means that we should convert spaces to a comma inside a
 // matrix definition.
 static int convert_spaces_to_comma = 1;
 
 // Another context hack, this time for the plot command's `using',
 // `title', and `with' keywords.
 static int cant_be_identifier = 0;
 
@@ -116,41 +115,16 @@ Im	[iIjJ]
 QQ	(\'\')
 ECHAR	(\\.)
 QSTR	([^\n\'\\]*({QQ}|{ECHAR})*)
 DQSTR	([^\n\"\\]*{ECHAR}*)
 IDENT	([_a-zA-Z][_a-zA-Z0-9]*)
 EXPON	([DdEe][+-]?{D}+)
 %%
 
-\%			|
-\#			{
-			  if (beginning_of_function)
-			    {
-			      grab_help_text ();
-			      beginning_of_function = 0;
-			    }
-
-			  BEGIN COMMENT;
-			  current_input_column += yyleng;
-			}
-
-<COMMENT>\n		{
-			  BEGIN 0;
-			  current_input_column = 1;
-			  quote_is_transpose = 0;
-			  cant_be_identifier = 0;
-			  convert_spaces_to_comma = 1;
-			  return '\n';
-			}
-
-<COMMENT><<EOF>>	{ TOK_RETURN (END_OF_INPUT); }
-
-<COMMENT>.*$		{ current_input_column += yyleng; }
-
 <NEW_MATRIX>[^ \t\n]	{
 			  yyless (0);
 			  BEGIN MATRIX;
 			}
 
 <NEW_MATRIX>{SN}*	{
 			  fixup_column_count (yytext);
 			  BEGIN MATRIX;
@@ -534,16 +508,36 @@ EXPON	([DdEe][+-]?{D}+)
 
 ":"		{
 		  if (plotting && (in_plot_range || in_plot_using))
 		    BIN_OP_RETURN (COLON, 1);
 		  else
 		    BIN_OP_RETURN (':', 0);
 		}
 
+\%		|
+\#		{
+		  if (in_brace_or_paren.empty () && beginning_of_function)
+		    {
+		      grab_help_text ();
+		      beginning_of_function = 0;
+		    }
+		  else
+		    {
+		      int c;
+		      while ((c = yyinput ()) != EOF && c != '\n')
+			; // Eat comment.
+		    }
+
+		  current_input_column = 1;
+
+		  if (! braceflag || beginning_of_function)
+		    return '\n';
+		}
+
 \"		{ BEGIN DQSTRING; }
 ".**"		{ BIN_OP_RETURN (EPOW, 0); }
 ".*"		{ BIN_OP_RETURN (EMUL, 0); }
 "./"		{ BIN_OP_RETURN (EDIV, 0); }
 ".\\"		{ BIN_OP_RETURN (ELEFTDIV, 0); }
 ".^"		{ BIN_OP_RETURN (EPOW, 0); }
 ".'"		{ do_comma_insert_check (); BIN_OP_RETURN (TRANSPOSE, 1); }
 "++"		{ do_comma_insert_check (); BIN_OP_RETURN (PLUS_PLUS, 1); }
@@ -1139,40 +1133,29 @@ grab_help_text (void)
 	{
 	  switch (c)
 	    {
 	    case '%':
 	    case '#':
 	      in_comment = 1;
 	    case ' ':
 	    case '\t':
+	    default:
 	      break;
-	    default:
-	      goto done;
 	    }
 	}
 
       if (len > max_len)
 	{
 	  warning ("grab_help_text: buffer overflow after caching %d chars",
 		   max_len);
-
-	  goto done;
+	  break;
 	}
     }
 
- done:
-
-// Make sure there's an end of line so yylex sees an end to the
-// comment immediately.
-
-  yyunput (c, yytext);
-  if (c != '\n')
-    yyunput ('\n', yytext);
-
   help_buf[len] =  '\0';
 }
 
 /*
  * Return 1 if the given character matches any character in the given
  * string.
  */
 static int
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -337,17 +337,20 @@ list		: list1
 		| list1 semi_sep
 		  {
 		    $1->set_print_flag (0);
 		    $$ = $1->reverse ();
 		  }
 		;
 
 list1		: command
-		  { $$ = new tree_command_list ($1); }
+		  {
+		    beginning_of_function = 0;
+		    $$ = new tree_command_list ($1);
+		  }
 		| list1 comma_nl_sep command
 		  { $$ = $1->chain ($3); }
 		| list1 semi_sep command
 		  {
 		    $1->set_print_flag (0);
 		    $$ = $1->chain ($3);
 		  }
 		;
