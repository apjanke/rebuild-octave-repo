# HG changeset patch
# User jwe
# Date 783753542 0
#      Wed Nov 02 05:19:02 1994 +0000
# Node ID f02ec9f8de652d5a84c303fdb9715f9b9ac2e6d0
# Parent  dd56ccefdc5c6de044c13e349ef64d4266b37722
[project @ 1994-11-02 05:19:02 by jwe]

diff --git a/src/pt-plot.cc b/src/pt-plot.cc
--- a/src/pt-plot.cc
+++ b/src/pt-plot.cc
@@ -69,16 +69,43 @@ static int parametric_plot = 0;
 static int clear_before_plotting = 1;
 
 // List of files to delete when we exit or crash.
 static SLStack <char *> tmp_files;
 
 // Pipe to gnuplot.
 static oprocstream plot_stream;
 
+// Use shortest possible abbreviations to minimize trouble caused by
+// gnuplot's fixed-length command line buffer.
+
+#ifndef GNUPLOT_COMMAND_PLOT  
+#define GNUPLOT_COMMAND_PLOT   "pl"
+#endif
+
+#ifndef GNUPLOT_COMMAND_REPLOT 
+#define GNUPLOT_COMMAND_REPLOT "rep"
+#endif
+
+#ifndef GNUPLOT_COMMAND_SPLOT 
+#define GNUPLOT_COMMAND_SPLOT  "sp"
+#endif
+
+#ifndef GNUPLOT_COMMAND_USING
+#define GNUPLOT_COMMAND_USING  "u"
+#endif
+
+#ifndef GNUPLOT_COMMAND_WITH 
+#define GNUPLOT_COMMAND_WITH   "w"
+#endif
+
+#ifndef GNUPLOT_COMMAND_TITLE
+#define GNUPLOT_COMMAND_TITLE  "t"
+#endif
+
 static void
 open_plot_stream (void)
 {
   static int initialized = 0;
 
   if (! plot_stream.is_open ())
     {
       plot_line_count = 0;
@@ -139,17 +166,17 @@ send_to_plot_stream (const char *cmd)
   if (plot_line_count == 0 && is_replot)
     error ("replot: no previous plot");
   else
     {
       plot_stream << cmd;
       if (! (is_replot || is_splot || is_plot)
 	  && plot_line_count > 0
 	  && user_pref.automatic_replot)
-	plot_stream << "replot\n";
+	plot_stream << GNUPLOT_COMMAND_REPLOT << "\n";
       plot_stream.flush ();
       pipe_handler_error_count = 0;
     }
 
   return 0;
 }
 
 // Plotting, eh?
@@ -195,41 +222,41 @@ tree_plot_command::eval (void)
   ostrstream plot_buf;
 
   switch (ndim)
     {
     case 1:
       if (plot_line_count == 0)
 	{
 	  if (plot_list)
-	    plot_buf << "plot";
+	    plot_buf << GNUPLOT_COMMAND_PLOT;
 	  else
 	    {
 	      ::error ("replot: must have something to plot");
 	      return;
 	    }
 	}
       else
-	plot_buf << "replot";
+	plot_buf << GNUPLOT_COMMAND_REPLOT;
       break;
 
     case 2:
       if (clear_before_plotting || plot_line_count == 0)
 	{
 	  plot_line_count = 0;
-	  plot_buf << "plot";
+	  plot_buf << GNUPLOT_COMMAND_PLOT;
 	}
       else
 	plot_buf << "replot";
       break;
 
     case 3:
       {
 	plot_line_count = 0;
-	plot_buf << "splot";
+	plot_buf << GNUPLOT_COMMAND_SPLOT;
       }
       break;
 
     default:
       gripe_2_or_3_dim_plot ();
       return;
     }
 
@@ -513,17 +540,17 @@ subplot_using::print (int ndim, int n_ma
 	      return -1;
 	    }
 
 	  double val;
 	  if (tmp.is_defined ())
 	    {
 	      val = tmp.double_value ();
 	      if (i == 0)
-		plot_buf << " using ";
+		plot_buf << " " << GNUPLOT_COMMAND_USING << " ";
 	      else
 		plot_buf << ":";
 
 	      int n = NINT (val);
 
 	      if (n < 1 || n_max > 0 && n > n_max)
 		{
 		  ::error ("using: column %d out of range", n); 
@@ -595,17 +622,17 @@ subplot_style::~subplot_style (void)
   delete pointtype;
 }
 
 int
 subplot_style::print (ostrstream& plot_buf)
 {
   if (style)
     {
-      plot_buf << " with " << style;
+      plot_buf << " " << GNUPLOT_COMMAND_WITH << " " << style;
 
       if (linetype)
 	{
 	  tree_constant tmp = linetype->eval (0);
 	  if (! error_state && tmp.is_defined ())
 	    {
 	      double val = tmp.double_value ();
 	      plot_buf << " " << NINT (val);
@@ -724,25 +751,28 @@ subplot::print (int ndim, ostrstream& pl
       if (status < 0)
 	return -1;
     }
 
   if (title)
     {
       tree_constant tmp = title->eval (0);
       if (! error_state && tmp.is_string ())
-	plot_buf << " title " << '"' << tmp.string_value () << '"';
+	plot_buf << " " << GNUPLOT_COMMAND_TITLE << " "
+	  << '"' << tmp.string_value () << '"';
       else
 	{
 	  warning ("line title must be a string");
-	  plot_buf << " title " << '"' << "line " << plot_line_count << '"';
+	  plot_buf << " " << GNUPLOT_COMMAND_TITLE << " "
+	    << '"' << "line " << plot_line_count << '"';
 	}
     }
   else
-    plot_buf << " title " << '"' << "line " << plot_line_count << '"';
+    plot_buf << " " << GNUPLOT_COMMAND_TITLE << " "
+      << '"' << "line " << plot_line_count << '"';
 
   if (style)
     {
       int status = style->print (plot_buf);
       if (status < 0)
 	return -1;
     }
 
