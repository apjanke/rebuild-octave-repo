# HG changeset patch
# User jwe
# Date 1192131542 0
#      Thu Oct 11 19:39:02 2007 +0000
# Node ID f943e9635115a29cc4e00a8c6f6a472d67eeef62
# Parent  fa4b43705e3719fddad9a2d2a0a8faca984dc500
[project @ 2007-10-11 19:39:02 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2007-10-11  John W. Eaton  <jwe@octave.org>
+
+	* DLD-FUNCTIONS/urlwrite.cc (urlget): Disable use of EPSV mode.
+
 2007-10-11  Brian Gough  <bjg@network-theory.co.uk>
 
 	* DLD-FUNCTIONS/fftn.cc, DLD-FUNCTIONS/regexp.cc, dirfns.cc,
 	input.cc: Spelling fixes.
 
 2007-10-10  John W. Eaton  <jwe@octave.org>
 
 	* OPERATORS/op-sbm-sbm.cc (bool_matrix_to_double_matrix):
diff --git a/src/DLD-FUNCTIONS/urlwrite.cc b/src/DLD-FUNCTIONS/urlwrite.cc
--- a/src/DLD-FUNCTIONS/urlwrite.cc
+++ b/src/DLD-FUNCTIONS/urlwrite.cc
@@ -121,33 +121,38 @@ urlget (const std::string& url, const st
       curl_easy_setopt (curl, CURLOPT_URL, query_string.c_str ());
     }
   else if (method == "post")
     {
       curl_easy_setopt (curl, CURLOPT_URL, url.c_str ());
       curl_easy_setopt (curl, CURLOPT_POSTFIELDS, query_string.c_str ());
     }
   else
-    curl_easy_setopt (curl, CURLOPT_URL,url.c_str());
+    curl_easy_setopt (curl, CURLOPT_URL, url.c_str());
 
   // Define our callback to get called when there's data to be written.
   curl_easy_setopt (curl, CURLOPT_WRITEFUNCTION, write_data);
 
   // Set a pointer to our struct to pass to the callback.
   curl_easy_setopt (curl, CURLOPT_WRITEDATA, static_cast<void*> (&stream));
 
   // Follow redirects.
-  curl_easy_setopt (curl, CURLOPT_FOLLOWLOCATION, 1);
+  curl_easy_setopt (curl, CURLOPT_FOLLOWLOCATION, true);
+
+  // Don't use EPSV since connecting to sites that don't support it
+  // will hang for some time (3 minutes?) before moving on to try PASV
+  // instead.
+  curl_easy_setopt (curl, CURLOPT_FTP_USE_EPSV, false);
 
   curl_easy_setopt (curl, CURLOPT_NOPROGRESS, true);
   curl_easy_setopt (curl, CURLOPT_PROGRESSDATA, url.c_str ());
   curl_easy_setopt (curl, CURLOPT_FAILONERROR, true);
 
-  // Switch on full protocol/debug output
-  // curl_easy_setopt(curl, CURLOPT_VERBOSE, true);
+  // Switch on full protocol/debug output.
+  // curl_easy_setopt (curl, CURLOPT_VERBOSE, true);
 
   CURLcode res = CURLE_OK;
 
   // To understand the following, see the definitions of these macros
   // in libcruft/misc/quit.h.  The idea is that we call sigsetjmp here
   // then the signal handler calls siglongjmp to get back here
   // immediately.  Then we perform some cleanup and throw an interrupt
   // exception which will get us back to the top level, cleaning up
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -916,17 +916,17 @@ specified option.\n\
 	      else
 		m.assign (key, octave_value (elt.val));
 	    }
 	  else
 	    break;
 	}
 
       bool unix_system = true;
-      bool macos_system = false;
+      bool mac_system = false;
       bool windows_system = false;
 
 #if defined (WIN32)
       windows_system = true;
 #if !defined (__CYGWIN__)
       unix_system = false;
 #endif
 #endif
