# HG changeset patch
# User jcorno <jacopo.corno@gmail.com>
# Date 1475681724 -7200
#      Wed Oct 05 17:35:24 2016 +0200
# Branch stable
# Node ID 8d3a2d1af389de1531799d77c579bbe4d5bc1c65
# Parent  b8d525710075a80d56adca828cd95c92b9e869c8
fix missing function arguments in call to starting_stepsize

* scripts/ode/private/starting_stepsize.m : take additional function
  arguments as input

* scripts/ode/private/integrate_adaptive.m : pass additional arguments
  to starting_stepsize

diff --git a/scripts/ode/private/integrate_adaptive.m b/scripts/ode/private/integrate_adaptive.m
--- a/scripts/ode/private/integrate_adaptive.m
+++ b/scripts/ode/private/integrate_adaptive.m
@@ -71,17 +71,17 @@ function solution = integrate_adaptive (
 
   t_new = t_old = t = tspan(1);
   x_new = x_old = x = x0(:);
 
   ## Get first initial timestep
   dt = odeget (options, "InitialStep", [], "fast");
   if (isempty (dt))
     dt = starting_stepsize (order, func, t, x, options.AbsTol, options.RelTol,
-                            strcmp (options.NormControl, "on"));
+                            strcmp (options.NormControl, "on"), options.funarguments);
   endif
 
   dir = odeget (options, "direction", [], "fast");
   dt = dir * min (abs (dt), options.MaxStep);
 
   options.comp = 0.0;
 
   ## Factor multiplying the stepsize guess
diff --git a/scripts/ode/private/starting_stepsize.m b/scripts/ode/private/starting_stepsize.m
--- a/scripts/ode/private/starting_stepsize.m
+++ b/scripts/ode/private/starting_stepsize.m
@@ -31,39 +31,39 @@
 ## [1] E. Hairer, S.P. Norsett and G. Wanner,
 ## @cite{Solving Ordinary Differential Equations I: Nonstiff Problems},
 ## Springer.
 ## @end deftypefn
 ##
 ## @seealso{odepkg}
 
 function h = starting_stepsize (order, func, t0, x0,
-                                AbsTol, RelTol, normcontrol)
+                                AbsTol, RelTol, normcontrol, args)
 
   ## compute norm of initial conditions
   d0 = AbsRel_Norm (x0, x0, AbsTol, RelTol, normcontrol);
 
   ## compute norm of the function evaluated at initial conditions
-  y = func (t0, x0);
+  y = func (t0, x0, args{:});
   if (iscell (y))
     y = y{1};
   endif
   d1 = AbsRel_Norm (y, y, AbsTol, RelTol, normcontrol);
 
   if (d0 < 1e-5 || d1 < 1e-5)
     h0 = 1e-6;
   else
     h0 = .01 * (d0 / d1);
   endif
 
   ## compute one step of Explicit-Euler
   x1 = x0 + h0 * y;
 
   ## approximate the derivative norm
-  yh = func (t0+h0, x1);
+  yh = func (t0+h0, x1, args{:});
   if (iscell (yh))
     yh = yh{1};
   endif
   d2 = (1 / h0) * ...
        AbsRel_Norm (yh - y, yh - y, AbsTol, RelTol, normcontrol);
 
   if (max (d1, d2) <= 1e-15)
     h1 = max (1e-6, h0*1e-3);
