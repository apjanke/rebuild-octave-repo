# HG changeset patch
# User jwe
# Date 1179861929 0
#      Tue May 22 19:25:29 2007 +0000
# Node ID 8dda89ca38f650922a12606b1ec3b5645ef4c467
# Parent  3390577e4e70685ae62893fccfa4e2a3a1b75cd1
[project @ 2007-05-22 19:25:29 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,18 @@
+2007-05-22  David Bateman  <dbateman@free.fr>
+
+	* pkg/pkg.m: Use rethrow(lasterror()) throughout rather than
+	error(lasterr()(8:end)).
+	(pkg:install): Warning for empty packages being removed. Suppress
+	spurious output. Warning rather than error for uninstalling a
+	package that is not installed to avoid RPM issue.
+	(pkg:configure_make): Fix for parsing of src/FILES. Don't create
+	inst or architecture dependent directory if it exists.
+
 2007-05-22  Thomas Weber  <thomas.weber.mail@gmail.com>
 
 	* ChangeLog, control/system/is_stabilizable.m, general/bicubic.m,
 	image/ind2gray.m, image/saveimage.m, plot/box.m, plot/grid.m,
 	signal/freqz.m: Fix typos.
 
 2007-05-21  David Bateman  <dbateman@free.fr>
 
diff --git a/scripts/pkg/pkg.m b/scripts/pkg/pkg.m
--- a/scripts/pkg/pkg.m
+++ b/scripts/pkg/pkg.m
@@ -487,17 +487,17 @@ function install (files, handle_deps, au
 	warning ("file %s does not exist", tgz);
       endif
     endfor
   catch
     ## Something went wrong, delete tmpdirs
     for i = 1:length (tmpdirs)
       rm_rf (tmpdirs{i});
     endfor
-    error (lasterr()(8:end));
+    rethrow (lasterror ());
   end_try_catch
 
   ## Check dependencies
   if (handle_deps)
     ok = true;
     error_text = "";
     for i = 1:length (descriptions)
       desc = descriptions{i};
@@ -531,31 +531,31 @@ function install (files, handle_deps, au
       prepare_installation (desc, pdir);
       configure_make (desc, pdir, verbose);
     endfor
   catch
     ## Something went wrong, delete tmpdirs
     for i = 1:length (tmpdirs)
       rm_rf (tmpdirs{i});
     endfor
-    error (lasterr()(8:end));
+    rethrow (lasterror ());
   end_try_catch
 
   ## Uninstall the packages that will be replaced
   try
     for i = packages_to_uninstall
       uninstall ({installed_packages{i}.name}, false, verbose, local_list, 
 		 global_list, global_install);
     endfor
   catch
     ## Something went wrong, delete tmpdirs
     for i = 1:length (tmpdirs)
       rm_rf (tmpdirs{i});
     endfor
-    error (lasterr()(8:end));
+    rethrow (lasterror ());
   end_try_catch
 
   ## Install each package
   try
     for i = 1:length (descriptions)
       desc = descriptions{i};
       pdir = packdirs{i};
       copy_files (desc, pdir);
@@ -566,23 +566,24 @@ function install (files, handle_deps, au
   catch
     ## Something went wrong, delete tmpdirs
     for i = 1:length (tmpdirs)
       rm_rf (tmpdirs{i});
     endfor
     for i = 1:length (descriptions)
       rm_rf (descriptions{i}.dir);
     endfor
-    error (lasterr()(8:end));
+    rethrow (lasterror ());
   end_try_catch
 
   ## Check if the installed directory is empty. If it is remove it
   ## from the list
   for i = length (descriptions):-1:1
     if (dirempty (descriptions{i}.dir, {"packinfo", "doc"}))
+      warning ("package %s is empty\n", descriptions{i}.name);
       rm_rf (descriptions{i}.dir);
       descriptions(i) = [];
     endif
   endfor
 
   ## If the package requested that it is autoloaded, or the installer
   ## requested that it is, then mark the package as autoloaded.
   for i = length (descriptions):-1:1
@@ -660,33 +661,33 @@ function uninstall (pkgnames, handle_dep
       delete_idx(end+1) = i;
     endif
   endfor
 
   ## Are all the packages that should be uninstalled already installed?
   if (length (delete_idx) != length (pkgnames))
     if (global_install)
       ## Try again for a locally installed package
-      installed_packages = local_packages
+      installed_packages = local_packages;
 
       num_packages = length (installed_packages);
       delete_idx = [];
       for i = 1:num_packages
 	cur_name = installed_packages{i}.name;
 	if (any (strcmp (cur_name, pkgnames)))
 	  delete_idx(end+1) = i;
 	endif
       endfor
       if (length (delete_idx) != length (pkgnames))
 	## XXX: We should have a better error message
-	error ("some of the packages you want to uninstall are not installed");
+	warning ("some of the packages you want to uninstall are not installed");
       endif
     else
       ## XXX: We should have a better error message
-      error ("some of the packages you want to uninstall are not installed.");
+      warning ("some of the packages you want to uninstall are not installed.");
     endif
   endif
 
   ## Compute the packages that will remain installed
   idx = complement (delete_idx, 1:num_packages);
   remaining_packages = {installed_packages{idx}};
 
   ## Check dependencies
@@ -829,50 +830,45 @@ function configure_make (desc, packdir, 
       %    error("'make install' returned the following error: %s", output);
       %endif
     endif
 
     ## Copy files to "inst" and "inst/arch" (this is instead of 'make install')
     files = fullfile (src, "FILES");
     instdir = fullfile (packdir, "inst");
     archdir = fullfile (packdir, "inst", getarch ());
+    ## Get file names
     if (exist (files, "file"))
-      ## Get file names
       [fid, msg] = fopen (files, "r");
       if (fid < 0)
 	error ("couldn't open %s: %s", files, msg);
       endif
       filenames = char (fread (fid))';
       fclose (fid);
       if (filenames(end) == "\n")
 	filenames(end) = [];
       endif
-      ## Copy the files
-      fn = split_by (filenames, "\n");
+      filenames = split_by (filenames, "\n");
       delete_idx =  [];
-      for i = 1:length (fn)
-	if (! all (isspace (fn{i})))
-	  fn{i} = fullfile (src, fn{i});
+      for i = 1:length (filenames)
+	if (! all (isspace (filenames{i})))
+	  filenames{i} = fullfile (src, filenames{i});
 	else
 	  delete_idx(end+1) = i;
 	endif
       endfor
-      fn(delete_idx) = [];
-      filenames = sprintf ("%s ", fn{:});
-
-      filenames = split_by (filenames, " ");
+      filenames(delete_idx) = [];
+      idx1 = cellfun ("isempty", regexp (filenames, '^.*\.mex'));
+      idx2 = cellfun ("isempty", regexp (filenames, '^.*\.oct'));
+      mex = filenames;
+      mex(idx1 != 0) = [];
+      oct = filenames;
+      oct(idx2 != 0) = [];
       archindependent = filenames;
-      mex = regexp (filenames, '^.*\.mex');
-      archindependent(cellfun ("isempty", mex) == 0) = [];
-      mex (cellfun ("isempty", mex)) = [];
-      mex = cellfun (@(x) x(1), mex);
-      oct = regexp (filenames, '^.*\.oct');
-      archindependent(cellfun ("isempty", oct) == 0) = [];
-      oct (cellfun ("isempty", oct)) = [];
-      oct = cellfun (@(x) x(1), oct);
+      archindependent(idx1 == 0 | idx2 == 0) = [];
       archdependent = [oct, mex];
     else
       m = dir (fullfile (src, "*.m"));
       oct = dir (fullfile (src, "*.oct"));
       mex = dir (fullfile (src, "*.mex"));
       archdependent = "";
       archindependent = "";
       filenames = "";
@@ -890,18 +886,21 @@ function configure_make (desc, packdir, 
 	archdependent = [archdependent, " ", ...
 			 sprintf(fullfile(src, "%s "), mex.name)];
       endif
       filenames = split_by (filenames, " ");
       archdependent = split_by (archdependent, " ");
       archindependent = split_by (archindependent, " ");
     endif
 
+    ## Copy the files
     if (! all (isspace (filenames)))
-	mkdir (instdir);
+	if (! exist (instdir, "dir")) 
+	  mkdir (instdir);
+	endif
 	if (! all (isspace (archindependent)))
 	  if (verbose)
 	    printf ("copyfile");
 	    printf (" %s", archindependent{:});
 	    printf ("%s\n", instdir);
 	  endif
 	  [status, output] = copyfile (archindependent, instdir);
 	  if (status != 1)
@@ -910,17 +909,19 @@ function configure_make (desc, packdir, 
 	  endif
         endif
 	if (! all (isspace (archdependent)))
 	  if (verbose)
 	    printf ("copyfile");
 	    printf (" %s", archdependent{:});
 	    printf (" %s\n", archdir);
 	  endif
-	  mkdir (archdir);
+	  if (! exist (archdir, "dir")) 
+	    mkdir (archdir);
+	  endif
 	  [status, output] = copyfile (archdependent, archdir);
 	  if (status != 1)
 	    rm_rf (desc.dir);
 	    error ("Couldn't copy files from 'src' to 'inst': %s", output);
 	  endif
         endif
     endif
   endif
