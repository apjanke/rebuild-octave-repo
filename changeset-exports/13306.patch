# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1318190339 25200
#      Sun Oct 09 12:58:59 2011 -0700
# Node ID ad9b78544a222936f7fd6b4515517be0bb08e1ca
# Parent  63463570d9fe602947ac49859d9c23baf47aa44a
strtrunc.m: Add input validation and tests for length argument n.

* strtrunc.m: Add input validation and tests for length argument n.

diff --git a/scripts/strings/strtrunc.m b/scripts/strings/strtrunc.m
--- a/scripts/strings/strtrunc.m
+++ b/scripts/strings/strtrunc.m
@@ -25,44 +25,54 @@
 ## @end deftypefn
 
 function s = strtrunc (s, n)
 
   if (nargin != 2)
     print_usage ();
   endif
 
+  n = fix (n);
+  if (! isscalar (n) || n < 0)
+    error ("strtrunc: length N must be a positive integer (N >= 0)");
+  endif
+
   if (ischar (s))
     if (n < columns (s))
       s = s(:, 1:n);
     endif
   elseif (iscellstr (s))
     ## Convoluted approach converts cellstr to char matrix, trims the character
     ## matrix using indexing, and then converts back to cellstr with mat2cell.
     ## This approach is 24X faster than using cellfun with call to strtrunc
-    idx = cellfun ("size", s, 2) >= n;
+    idx = cellfun ("size", s, 2) > n;
     rows = cellfun ("size", s(idx), 1);
-    s(idx) = mat2cell (char (s(idx))(:, 1:n), rows);
+    if (! isempty (rows))
+      s(idx) = mat2cell (char (s(idx))(:, 1:n), rows);
+    endif
   else
     error ("strtrunc: S must be a character string or a cell array of strings");
   endif
 
 endfunction
 
 
 %!assert (strtrunc("abcdefg", 4), "abcd");
 %!assert (strtrunc("abcdefg", 10), "abcdefg");
 %!assert (strtrunc(char ("abcdef", "fedcba"), 3), ["abc"; "fed"]);
 %!assert (strtrunc({"abcdef", "fedcba"}, 3), {"abc", "fed"});
-%!assert (strtrunc({"1", "21", "321"}, 1), {"1", "2", "3"})
+%!assert (strtrunc({"", "1", "21", "321"}, 1), {"", "1", "2", "3"})
+%!assert (strtrunc({"1", "", "2"}, 1), {"1", "", "2"})
 %!test
 %! cstr = {"line1"; ["line2"; "line3"]; "line4"};
 %! y = strtrunc (cstr, 4);
 %! assert (size (y), [3, 1]); 
 %! assert (size (y{2}), [2, 4]); 
 %! assert (y{2}, repmat ("line", 2, 1));
 
 %% Test input validation
 %!error strtrunc ()
 %!error strtrunc ("abcd")
 %!error strtrunc ("abcd", 4, 5)
+%!error <N must be a positive integer> strtrunc ("abcd", ones (2,2))
+%!error <N must be a positive integer> strtrunc ("abcd", -1)
 %!error <S must be a character string or a cell array of strings> strtrunc (1, 1)
 
