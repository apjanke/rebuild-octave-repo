# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1313191600 -7200
#      Sat Aug 13 01:26:40 2011 +0200
# Node ID 73a9ac1cdbf18bfa5d1edaaf48a8cf5d7fd52491
# Parent  f6bb482582000cab06157f28229b141e3bc57fef
Further structured IRC interfaces.

diff --git a/gui/src/qirc/IRCClientImpl.cpp b/gui/src/qirc/IRCClientImpl.cpp
--- a/gui/src/qirc/IRCClientImpl.cpp
+++ b/gui/src/qirc/IRCClientImpl.cpp
@@ -139,34 +139,61 @@ IRCServerMessage::getStringToken (const 
 }
 
 QString
 IRCServerMessage::getStringToken (QString line, int &index)
 {
   return getStringToken (line.toStdString ().c_str (), index);
 }
 
-IRCChannelProxy::IRCChannelProxy ()
-  : IRCChannelProxyInterface ()
+IRCChannelProxy::IRCChannelProxy (IRCClientInterface *clientInterface, const QString& channelName)
+  : IRCChannelProxyInterface (clientInterface, channelName),
+    m_clientInterface (clientInterface)
 {
-
+  m_channelName = channelName;
 }
 
 QTextDocument *
 IRCChannelProxy::conversationModel ()
 {
   return &m_conversationModel;
 }
 
 QStringListModel *
 IRCChannelProxy::userListModel ()
 {
   return &m_userListModel;
 }
 
+QString
+IRCChannelProxy::channelName ()
+{
+  return m_channelName;
+}
+
+void
+IRCChannelProxy::sendMessage (const QString& message)
+{
+  Q_UNUSED (message);
+  // TODO: implement.
+}
+
+void
+IRCChannelProxy::sendJoinRequest ()
+{
+  //sendIRCCommand (IRCCommand::Join, QStringList (channel));
+}
+
+
+void
+IRCChannelProxy::leave (const QString& reason)
+{
+  Q_UNUSED (reason);
+}
+
 IRCClientImpl::IRCClientImpl ()
   : IRCClientInterface ()
 {
   connect (&m_tcpSocket, SIGNAL (connected ()), this, SLOT (handleConnected ()));
   connect (&m_tcpSocket, SIGNAL (disconnected ()), this, SLOT (handleDisconnected ()));
   connect (&m_tcpSocket, SIGNAL (readyRead ()), this, SLOT (handleReadyRead ()));
 }
 
@@ -207,32 +234,19 @@ int
 IRCClientImpl::port()
 {
   return m_port;
 }
 
 IRCChannelProxyInterface *
 IRCClientImpl::ircChannelProxy (const QString &channel)
 {
-  if (m_channels.contains (channel))
-    return m_channels[channel];
-  return 0;
-}
-
-void
-IRCClientImpl::sendJoinRequest (const QString& channel)
-{
-  sendIRCCommand (IRCCommand::Join, QStringList (channel));
-}
-
-void
-IRCClientImpl::leaveChannel (const QString& channel, const QString& reason)
-{
-  Q_UNUSED (channel);
-  Q_UNUSED (reason);
+  if (!m_channels.contains (channel))
+      m_channels[channel] = new IRCChannelProxy(this, channel);
+  return m_channels[channel];
 }
 
 void
 IRCClientImpl::focusChannel (const QString& channel)
 {
   m_focussedChannel = channel;
 }
 
diff --git a/gui/src/qirc/IRCClientImpl.h b/gui/src/qirc/IRCClientImpl.h
--- a/gui/src/qirc/IRCClientImpl.h
+++ b/gui/src/qirc/IRCClientImpl.h
@@ -269,23 +269,31 @@ private:
   QString m_nick, m_user, m_host;
   QString m_command;
   QStringList m_parameters;
 };
 
 class IRCChannelProxy : public IRCChannelProxyInterface
 {
 public:
-  IRCChannelProxy ();
+  IRCChannelProxy (IRCClientInterface *clientInterface, const QString& channelName);
   QTextDocument *conversationModel ();
   QStringListModel *userListModel ();
+  QString channelName ();
+
+  void sendMessage (const QString& message);
+  void sendJoinRequest ();
+  void leave (const QString &reason);
+
 private:
+  QString m_channelName;
   QStringList m_userList;
   QStringListModel m_userListModel;
   QTextDocument m_conversationModel;
+  IRCClientInterface *m_clientInterface;
 };
 
 class IRCClientImpl : public IRCClientInterface
 {
   Q_OBJECT
 public:
   IRCClientImpl ();
 
@@ -295,19 +303,16 @@ public:
   int port();
   IRCChannelProxyInterface *ircChannelProxy(const QString& channel);
 
 public slots:
   void connectToHost (const QHostAddress& host, int port, const QString& initialNick);
   void disconnect ();
   void reconnect ();
 
-  void sendJoinRequest (const QString& channel);
-  void leaveChannel (const QString& channel, const QString& reason);
-
   void focusChannel (const QString& channel);
   void sendNicknameChangeRequest (const QString &nickname);
   void sendPublicMessage (const QString& message);
   void sendPrivateMessage (const QString &recipient, const QString &message);
 
 signals:
   void debugMessage (const QString& message);
 
diff --git a/gui/src/qirc/IRCClientInterface.h b/gui/src/qirc/IRCClientInterface.h
--- a/gui/src/qirc/IRCClientInterface.h
+++ b/gui/src/qirc/IRCClientInterface.h
@@ -20,22 +20,27 @@
 #define IRCCLIENTINTERFACE_H
 
 #include <QString>
 #include <QObject>
 #include <QHostAddress>
 #include <QTextDocument>
 #include <QStringListModel>
 
+class IRCClientInterface;
 class IRCChannelProxyInterface
 {
 public:
-  IRCChannelProxyInterface () { }
+  IRCChannelProxyInterface (IRCClientInterface *, const QString&) { }
   virtual QTextDocument *conversationModel () = 0;
   virtual QStringListModel *userListModel () = 0;
+  virtual QString channelName () = 0;
+  virtual void sendMessage (const QString& message) = 0;
+  virtual void sendJoinRequest () = 0;
+  virtual void leave (const QString& reason) = 0;
 };
 
 /**
   * \class IRCClientInterface
   * IRC Clients need to implement this interface.
   */
 class IRCClientInterface : public QObject
 {
@@ -51,19 +56,16 @@ public:
   virtual IRCChannelProxyInterface *ircChannelProxy(const QString& channel) = 0;
 
 public slots:
   // Connection state:
   virtual void connectToHost (const QHostAddress& host, int port, const QString& initialNick) = 0;
   virtual void disconnect () = 0;
   virtual void reconnect () = 0;
 
-  virtual void sendJoinRequest (const QString& channel) = 0;
-  virtual void leaveChannel (const QString& channel, const QString& reason) = 0;
-
   // Messaging:
   virtual void focusChannel (const QString& channel) = 0;
   virtual void sendNicknameChangeRequest (const QString& nickname) = 0;
   virtual void sendPublicMessage (const QString& message) = 0;
   virtual void sendPrivateMessage (const QString& recipient, const QString& message) = 0;
 
 signals:
   void newMessage (const QString& channel, const QString& sender, const QString& message);
