# HG changeset patch
# User Ben Abbott <bpabbott@mac.com>
# Date 1232826824 18000
#      Sat Jan 24 14:53:44 2009 -0500
# Node ID 31ab3b83bc8a9be0afa595904560254db87891f9
# Parent  e6497be3f3d6c1280db2d951c0b38c7b4ede59b4
savepath: Respect cmd-line and env paths.

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2008-12-24 Ben Abbott <bpabbott@mac.com>
+
+	* path/savepath.m: Respect cmd-line and env paths.
+
 2009-01-24 Ben Abbott <bpabbott@mac.com>
 
 	* sparse/svds.m: svds.m: skip tests if ARPACK is missing.
 
 2009-01-23  SÃ¸ren Hauberg  <hauberg@gmail.com>
 
 	* help/type.m: Make 'type X' work, when X is the name of a variable.
 
diff --git a/scripts/path/savepath.m b/scripts/path/savepath.m
--- a/scripts/path/savepath.m
+++ b/scripts/path/savepath.m
@@ -13,18 +13,19 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} savepath (@var{file})
-## Save the current function search path to @var{file}.  If @var{file}
-## is omitted, @file{~/.octaverc} is used.  If successful,
+## Save the the portion of the current function search path, that is
+## not set during Octave's initialization process, to @var{file}.
+## If @var{file} is omitted, @file{~/.octaverc} is used.  If successful,
 ## @code{savepath} returns 0.
 ## @seealso{path, addpath, rmpath, genpath, pathdef, pathsep}
 ## @end deftypefn
 
 ## Author: Bill Denney <bill@givebillmoney.com>
 
 ##PKGADD: mark_as_command savepath
 
@@ -107,21 +108,90 @@ function varargout = savepath (savefile)
   if (fid < 0)
     error ("savepath: unable to open file for writing, %s, %s", savefile, msg);
   endif
   unwind_protect
     for i = 1:length (pre)
       fprintf (fid, "%s\n", pre{i})
     endfor
 
+    ## Remove the portion of the path defined via the command line
+    ## and/or the environment.
+    workingpath = parsepath (path);
+    command_line_path = parsepath (commandlinepath ());
+    octave_path = parsepath (getenv ("OCTAVE_PATH"));
+    if (isempty (pathdef ()))
+      ## This occurs when running octave via run-octave. In this instance
+      ## the entire path is specified via the command line and pathdef()
+      ## is empty.
+      [tmp, n] = setdiff (workingpath, octave_path);
+      default_path = command_line_path;
+    else
+      [tmp, n] = setdiff (workingpath, union (command_line_path, octave_path));
+      default_path = parsepath (pathdef ());
+    endif
+    ## This is the path we'd like to preserve when octave is run.
+    path_to_preserve = workingpath(sort(n));
+
+    ## Determine the path to Octave's user and sytem wide pkgs.
+    [pkg_user, pkg_system] = pkg ("list");
+    pkg_user_path = cell (1, numel (pkg_user));
+    pkg_system_path = cell (1, numel (pkg_system));
+    for n = 1:numel(pkg_user)
+      pkg_user_path{n} = pkg_user{n}.archprefix;
+    endfor
+    for n = 1:numel(pkg_system)
+      pkg_system_path{n} = pkg_system{n}.archprefix;
+    endfor
+    pkg_path = union (pkg_user_path, pkg_system_path);
+
+    ## Rely on Octave's initialization to include the pkg path elements.
+    if (! isempty (pkg_path))
+      [tmp, n] = setdiff (path_to_preserve, strcat (pkg_path, ":"));
+      path_to_preserve = path_to_preserve(sort(n));
+    endif
+
+    ## Split the path to be saved into two groups. Those path elements that
+    ## belong at the beginning and those at the end.
+    if (! isempty (default_path))
+      n1 = strmatch (default_path{1}, path_to_preserve, "exact");
+      n2 = strmatch (default_path{end}, path_to_preserve, "exact");
+      n_middle = round (0.5*(n1+n2));
+      [tmp, n] = setdiff (path_to_preserve, default_path);
+      path_to_save = path_to_preserve(sort (n));
+      ## Remove pwd
+      path_to_save = path_to_save (! strcmpi (path_to_save, strcat (".", pathsep)));
+      n = ones (size (path_to_save));
+      for m = 1:numel(path_to_save)
+        n(m) = strmatch (path_to_save{m}, path_to_preserve);
+      endfor
+      path_to_save_begin = path_to_save(n <= n_middle);
+      path_to_save_end   = path_to_save(n > n_middle);
+    else
+      path_to_save_begin = path_to_preserve;
+      path_to_save_end   = {};
+    endif
+    path_to_save_begin = cell2mat (path_to_save_begin);
+    path_to_save_end   = cell2mat (path_to_save_end);
+
     ## Use single quotes for PATH argument to avoid string escape
     ## processing.  Since we are using single quotes around the arg,
     ## double any single quote characters found in the string.
-    fprintf (fid, "\n%s\n  path ('%s');\n%s\n",
-	     beginstring, strrep (path (), "'", "''"), endstring);
+    fprintf (fid, "%s\n", beginstring)
+    if (! isempty (path_to_save_begin))
+      n = find (path_to_save_begin != pathsep, 1, "last");
+      fprintf (fid, "  addpath ('%s', '-begin');\n",
+               strrep (path_to_save_begin(1:n), "'", "''"))
+    endif
+    if (! isempty (path_to_save_end))
+      n = find (path_to_save_end != pathsep, 1, "last");
+      fprintf (fid, "  addpath ('%s', '-end');\n",
+               strrep (path_to_save_end(1:n), "'", "''"))
+    endif
+    fprintf (fid, "%s\n", endstring)
 
     for i = 1:length (post)
       fprintf (fid, "%s\n", post{i});
     endfor
   unwind_protect_cleanup
     closeread = fclose (fid);
     if (closeread < 0)
       error ("savepath: could not close savefile after writing, %s", savefile);
@@ -132,8 +202,14 @@ function varargout = savepath (savefile)
 
   retval = 0;
 
   if (nargout == 1)
     varargout{1} = retval;
   endif
   
 endfunction  
+
+function path_elements = parsepath (p)
+  pat = sprintf ("([^%s]+[%s$])", pathsep, pathsep);
+  [jnk1, jnk2, jnk3, path_elements] = regexpi (strcat (p, pathsep), pat);
+endfunction
+
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2008-12-25 Ben Abbott <bpabbott@mac.com>
+
+	* load-path.cc: New function commandlinepath.
+	* load-path.h: Make command_line_path public.
+
 2009-01-24 Ben Abbott <bpabbott@mac.com>
 
 	* DLD-FUNCTIONS/eigs.cc: eigs.cc: skip tests if ARPACK is missing.
 
 2009-01-23  John W. Eaton  <jwe@octave.org>
 
 	* toplev.cc (octave_call_stack::do_goto_caller_frame):
 	Also allow caller frame to be base frame, not just user code.
diff --git a/src/load-path.cc b/src/load-path.cc
--- a/src/load-path.cc
+++ b/src/load-path.cc
@@ -1767,16 +1767,27 @@ Reinitialize Octave's load path director
   // used for more than keeping track of the prompt time.
 
   // This will force updated functions to be found.
   Vlast_prompt_time.stamp ();
 
   return retval;
 }
 
+DEFUN (commandlinepath, , ,
+    "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} commandlinepath (@dots{})\n\
+Return the command line path variable.\n\
+\n\
+@seealso{path, addpath, rmpath, genpath, pathdef, savepath, pathsep}\n\
+@end deftypefn")
+{
+  return octave_value (load_path::get_command_line_path ());
+}
+
 DEFUN (restoredefaultpath, , ,
     "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} restoredefaultpath (@dots{})\n\
 Restore Octave's path to it's initial state at startup.\n\
 \n\
 @seealso{path, addpath, rmpath, genpath, pathdef, savepath, pathsep}\n\
 @end deftypefn")
 {
diff --git a/src/load-path.h b/src/load-path.h
--- a/src/load-path.h
+++ b/src/load-path.h
@@ -213,16 +213,21 @@ public:
   static void set_command_line_path (const std::string& p)
   {
     if (command_line_path.empty ())
       command_line_path = p;
     else
       command_line_path += dir_path::path_sep_str () + p;
   }
 
+  static std::string get_command_line_path (void)
+  {
+    return instance_ok () ? instance->do_get_command_line_path () : std::string ();
+  }
+
   static std::string system_path (void)
   {
     return instance_ok () ? instance->do_system_path () : std::string ();
   }
 
 private:
 
   static const int M_FILE = 1;
@@ -481,16 +486,18 @@ private:
 
   friend void
   print_fcn_list (std::ostream& os, const dir_info::fcn_file_map_type& lst);
 
   void do_display (std::ostream& os) const;
 
   std::string do_system_path (void) const { return sys_path; }
 
+  std::string do_get_command_line_path (void) const { return command_line_path; }
+
   void add_to_fcn_map (const dir_info& di, bool at_end) const;
 
   void add_to_private_fcn_map (const dir_info& di) const;
 
   void add_to_method_map (const dir_info& di, bool at_end) const;
 
   friend dir_info::fcn_file_map_type get_fcn_files (const std::string& d);
 };
