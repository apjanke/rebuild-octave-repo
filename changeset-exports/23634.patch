# HG changeset patch
# User Rik <rik@octave.org>
# Date 1497720398 25200
#      Sat Jun 17 10:26:38 2017 -0700
# Node ID ff68c9d024b84e6542467b9bb8cdcd99ecf0a549
# Parent  271d34c20678fa13052f4af7669a9ac12c84d0e7
Use erf, erff, erfc, erfcf from C++ std library.
These functions are guaranteed to be part of C++11 standard library.

* configure.ac: Remove AC_CHECK_FUNCS for erf, erff, erfc, erfcf.

* lo-specfun.cc (erf, erff, erfc, erfcf): Delegate to std::XXX for erf, erff,
erfc, erfcf.

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -2450,17 +2450,17 @@ OCTAVE_CHECK_FUNC_COMPLEX(acosh)
 OCTAVE_CHECK_FUNC_COMPLEX(asin)
 OCTAVE_CHECK_FUNC_COMPLEX(asinh)
 OCTAVE_CHECK_FUNC_COMPLEX(atan)
 OCTAVE_CHECK_FUNC_COMPLEX(atanh)
 
 ## Check for nonstandard, but common math functions, that we need.
 
 dnl Use multiple AC_CHECKs to avoid line continuations '\' in list
-AC_CHECK_FUNCS([erf erff erfc erfcf exp2f])
+AC_CHECK_FUNCS([exp2f])
 
 ## Check for math defines such as M_LN2 in math.h
 AC_CACHE_CHECK([for MATH DEFINES in math.h],
   [octave_cv_header_math_defines],
   [AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
     #include <math.h>
     ]], [[
     double x = M_LN2;]])],
diff --git a/liboctave/numeric/lo-specfun.cc b/liboctave/numeric/lo-specfun.cc
--- a/liboctave/numeric/lo-specfun.cc
+++ b/liboctave/numeric/lo-specfun.cc
@@ -128,109 +128,70 @@ namespace octave
     {
 #if defined (HAVE_COMPLEX_STD_ATANH)
       return std::atanh (x);
 #else
       return log ((1.0f + x) / (1.0f - x)) / 2.0f;
 #endif
     }
 
-    double
-    erf (double x)
-    {
-#if defined (HAVE_ERF)
-      return ::erf (x);
-#else
-      double retval;
-      F77_XFCN (xderf, XDERF, (x, retval));
-      return retval;
-#endif
-    }
-
-    float
-    erf (float x)
-    {
-#if defined (HAVE_ERFF)
-      return erff (x);
-#else
-      float retval;
-      F77_XFCN (xerf, XERF, (x, retval));
-      return retval;
-#endif
-    }
+    double erf (double x) { return std::erf (x); }
+
+    float erf (float x) { return std::erff (x); }
 
     // Complex error function from the Faddeeva package
     Complex
     erf (const Complex& x)
     {
       return Faddeeva::erf (x);
     }
 
     FloatComplex
     erf (const FloatComplex& x)
     {
       Complex xd (x.real (), x.imag ());
       Complex ret = Faddeeva::erf (xd, std::numeric_limits<float>::epsilon ());
       return FloatComplex (ret.real (), ret.imag ());
     }
 
-    double
-    erfc (double x)
-    {
-#if defined (HAVE_ERFC)
-      return ::erfc (x);
-#else
-      double retval;
-      F77_XFCN (xderfc, XDERFC, (x, retval));
-      return retval;
-#endif
-    }
-
-    float
-    erfc (float x)
-    {
-#if defined (HAVE_ERFCF)
-      return erfcf (x);
-#else
-      float retval;
-      F77_XFCN (xerfc, XERFC, (x, retval));
-      return retval;
-#endif
-    }
+    double erfc (double x) { return std::erfc (x); }
+
+    float erfc (float x) { return std::erfcf (x); }
 
     // Complex complementary error function from the Faddeeva package
     Complex
     erfc (const Complex& x)
     {
       return Faddeeva::erfc (x);
     }
 
     FloatComplex
     erfc (const FloatComplex& x)
     {
       Complex xd (x.real (), x.imag ());
       Complex ret = Faddeeva::erfc (xd, std::numeric_limits<float>::epsilon ());
       return FloatComplex (ret.real (), ret.imag ());
     }
 
-    // Real and complex scaled complementary error function from Faddeeva package
+    // Real and complex scaled complementary error function from Faddeeva pkg.
     float erfcx (float x) { return Faddeeva::erfcx(x); }
     double erfcx (double x) { return Faddeeva::erfcx(x); }
 
     Complex
     erfcx (const Complex& x)
     {
       return Faddeeva::erfcx (x);
     }
 
     FloatComplex
     erfcx (const FloatComplex& x)
     {
       Complex xd (x.real (), x.imag ());
-      Complex ret = Faddeeva::erfcx (xd, std::numeric_limits<float>::epsilon ());
+      Complex ret;
+      ret = Faddeeva::erfcx (xd, std::numeric_limits<float>::epsilon ());
       return FloatComplex (ret.real (), ret.imag ());
     }
 
     // Real and complex imaginary error function from Faddeeva package
     float erfi (float x) { return Faddeeva::erfi(x); }
     double erfi (double x) { return Faddeeva::erfi(x); }
 
     Complex
@@ -256,17 +217,18 @@ namespace octave
     {
       return Faddeeva::Dawson (x);
     }
 
     FloatComplex
     dawson (const FloatComplex& x)
     {
       Complex xd (x.real (), x.imag ());
-      Complex ret = Faddeeva::Dawson (xd, std::numeric_limits<float>::epsilon ());
+      Complex ret;
+      ret = Faddeeva::Dawson (xd, std::numeric_limits<float>::epsilon ());
       return FloatComplex (ret.real (), ret.imag ());
     }
 
     double
     gamma (double x)
     {
       double result;
 
