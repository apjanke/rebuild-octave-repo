# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1244524328 -7200
#      Tue Jun 09 07:12:08 2009 +0200
# Node ID 0d9178575dd7f5fa7581aef889130a6832ccf86e
# Parent  1a1c839625b33e8040369f3bbe3e38caa2f71137
fix log2 with 2 outargs, loosen tests to meet IEEE

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2009-06-09  Jaroslav Hajek  <highegg@gmail.com>
+
+	* lo-mappers.cc (xlog2 (const Complex&, int&), xlog2 (const
+	FloatComplex&, int&)): Use more robust expression.
+
 2009-06-07  Jaroslav Hajek  <highegg@gmail.com>
 
 	* Array.cc (Array<T>::find): Avoid allocating excessive memory. Fix
 	order for backward searches.
 
 2009-06-02  Jaroslav Hajek  <highegg@gmail.com>
 
 	* Array-C.cc (class DiagArray2<Complex>::Proxy): Only explicitly
diff --git a/liboctave/lo-mappers.cc b/liboctave/lo-mappers.cc
--- a/liboctave/lo-mappers.cc
+++ b/liboctave/lo-mappers.cc
@@ -180,17 +180,17 @@ xlog2 (double x, int& exp)
   return frexp (x, &exp);
 }
 
 Complex
 xlog2 (const Complex& x, int& exp)
 {
   double ax = std::abs (x);
   double lax = xlog2 (ax, exp);
-  return (exp == 0) ? x : (x / ax) * lax;
+  return (ax != lax) ? (x / ax) * lax : x;
 }
 
 // double -> bool mappers.
 
 #if ! defined(HAVE_CMATH_ISNAN)
 bool
 xisnan (double x)
 {
@@ -498,17 +498,17 @@ xlog2 (float x, int& exp)
   return frexpf (x, &exp);
 }
 
 FloatComplex
 xlog2 (const FloatComplex& x, int& exp)
 {
   float ax = std::abs (x);
   float lax = xlog2 (ax, exp);
-  return (exp == 0) ? x : (x / ax) * lax;
+  return (ax != lax) ? (x / ax) * lax : x;
 }
 
 // float -> bool mappers.
 
 #if ! defined(HAVE_CMATH_ISNANF)
 bool
 xisnan (float x)
 {
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2009-06-09  Jaroslav Hajek  <highegg@gmail.com>
+
+	* data.cc (Flog2): Fix tests.
+
 2009-06-08  John W. Eaton  <jwe@octave.org>
 
 	* variables.cc (symbol_exist): Returnn 1 for function handles and
 	inline function objects.
 
 2009-06-08  Jaroslav Hajek  <highegg@gmail.com>
 
 	* symtab.h (symbol_table::do_clear_global,
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -1077,22 +1077,22 @@ and @var{e} is an integer.  If\n\
 %!assert(log2(Inf), Inf);
 %!assert(isnan(log2(NaN)));
 %!assert(log2(4*i), 2 + log2(1*i));
 %!assert(log2(complex(0,Inf)), Inf + log2(i));
 
 %!test
 %! [f, e] = log2 ([0,-1; 2,-4; Inf,-Inf]);
 %! assert (f, [0,-0.5; 0.5,-0.5; Inf,-Inf]);
-%! assert (e, [0,1;2,3;0,0])
+%! assert (e(1:2,:), [0,1;2,3])
 
 %!test
 %! [f, e] = log2 (complex (zeros (3, 2), [0,-1; 2,-4; Inf,-Inf]));
 %! assert (f, complex (zeros (3, 2), [0,-0.5; 0.5,-0.5; Inf,-Inf]));
-%! assert (e, [0,1; 2,3; 0,0]);
+%! assert (e(1:2,:), [0,1; 2,3]);
 */
 
 DEFUN (fmod, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} fmod (@var{x}, @var{y})\n\
 Compute the floating point remainder of dividing @var{x} by @var{y}\n\
 using the C library function @code{fmod}.  The result has the same\n\
 sign as @var{x}.  If @var{y} is zero, the result is implementation-dependent.\n\
