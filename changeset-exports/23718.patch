# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1498718421 14400
#      Thu Jun 29 02:40:21 2017 -0400
# Node ID 251cb33c6570d55f6e870e3484e4d44637ea9705
# Parent  06579337237b55918fcf8de1a2d43a8283b33ee3
style fixes for initializer lists

* symtab.cc, ov-base.cc, ov-usr-fcn.cc: Use spaces between values and
braces in initializer lists.

diff --git a/libinterp/corefcn/symtab.cc b/libinterp/corefcn/symtab.cc
--- a/libinterp/corefcn/symtab.cc
+++ b/libinterp/corefcn/symtab.cc
@@ -110,24 +110,24 @@ namespace octave
   {
     return new symbol_record_rep (new_scope, name, varval (), storage_class);
   }
 
   octave_value
   symbol_table::symbol_record::symbol_record_rep::dump (void) const
   {
     std::map<std::string, octave_value> m
-      = {{"name", name},
-         {"local", is_local ()},
-         {"automatic", is_automatic ()},
-         {"formal", is_formal ()},
-         {"hidden", is_hidden ()},
-         {"inherited", is_inherited ()},
-         {"global", is_global ()},
-         {"persistent", is_persistent ()}};
+      = {{ "name", name },
+         { "local", is_local () },
+         { "automatic", is_automatic () },
+         { "formal", is_formal () },
+         { "hidden", is_hidden () },
+         { "inherited", is_inherited () },
+         { "global", is_global () },
+         { "persistent", is_persistent () }};
 
     octave_value val = varval ();
 
     if (val.is_defined ())
       m["value"] = val;
 
     return octave_value (m);
   }
@@ -1303,27 +1303,27 @@ dump_function_map (const std::map<std::s
 }
 
 namespace octave
 {
   octave_value
   symbol_table::fcn_info::fcn_info_rep::dump (void) const
   {
     std::map<std::string, octave_value> m
-      = {{"name", full_name ()},
-         {"refcount", count.value ()},
-         {"package", package.dump ()},
-         {"local_functions", dump_function_map (local_functions)},
-         {"private_functions", dump_function_map (private_functions)},
-         {"class_methods", dump_function_map (class_methods)},
-         {"class_constructors", dump_function_map (class_constructors)},
-         {"cmdline_function", cmdline_function.dump ()},
-         {"autoload_function", autoload_function.dump ()},
-         {"function_on_path", function_on_path.dump ()},
-         {"built_in_function", built_in_function.dump ()}};
+      = {{ "name", full_name () },
+         { "refcount", count.value () },
+         { "package", package.dump () },
+         { "local_functions", dump_function_map (local_functions) },
+         { "private_functions", dump_function_map (private_functions) },
+         { "class_methods", dump_function_map (class_methods) },
+         { "class_constructors", dump_function_map (class_constructors) },
+         { "cmdline_function", cmdline_function.dump () },
+         { "autoload_function", autoload_function.dump () },
+         { "function_on_path", function_on_path.dump () },
+         { "built_in_function", built_in_function.dump () }};
 
     return octave_value (m);
   }
 
   octave_value
   symbol_table::find (const std::string& name, const octave_value_list& args,
                       bool skip_variables, bool local_funcs)
   {
@@ -1452,19 +1452,19 @@ dump_container_map (const std::map<std::
 }
 
 namespace octave
 {
   octave_value
   symbol_table::dump (void) const
   {
     std::map<std::string, octave_value> m
-      = {{"function_info", dump_fcn_table_map ()},
-         {"precedence_table", dump_container_map (m_class_precedence_table)},
-         {"parent_classes", dump_container_map (m_parent_map)}};
+      = {{ "function_info", dump_fcn_table_map () },
+         { "precedence_table", dump_container_map (m_class_precedence_table) },
+         { "parent_classes", dump_container_map (m_parent_map) }};
 
     return octave_value (m);
   }
 
   void
   symbol_table::cleanup (void)
   {
     clear_all (true);
@@ -1709,20 +1709,20 @@ namespace octave
 
     return retval;
   }
 
   octave_value
   symbol_table::scope::dump (void) const
   {
     std::map<std::string, octave_value> m
-      = {{"name", m_name},
-         {"symbols", dump_symbols_map ()},
-         {"persistent_variables", m_persistent_symbols},
-         {"subfunctions", dump_function_map (m_subfunctions)}};
+      = {{ "name", m_name },
+         { "symbols", dump_symbols_map () },
+         { "persistent_variables", m_persistent_symbols },
+         { "subfunctions", dump_function_map (m_subfunctions) }};
 
     return octave_value (m);
   }
 
   octave_value
   symbol_table::scope::dump_symbols_map (void) const
   {
     std::map<std::string, octave_value> info_map;
diff --git a/libinterp/octave-value/ov-base.cc b/libinterp/octave-value/ov-base.cc
--- a/libinterp/octave-value/ov-base.cc
+++ b/libinterp/octave-value/ov-base.cc
@@ -1164,19 +1164,19 @@ octave_base_value::unlock (void)
 {
   err_wrong_type_arg ("octave_base_value::unlock ()", type_name ());
 }
 
 octave_value
 octave_base_value::dump (void) const
 {
   std::map<std::string, octave_value> m
-    = {{"class", this->class_name ()},
-       {"type", this->type_name ()},
-       {"dims", this->dims().as_array ()}};
+    = {{ "class", this->class_name () },
+       { "type", this->type_name () },
+       { "dims", this->dims().as_array () }};
 
   return octave_value (m);
 }
 
 OCTAVE_NORETURN static
 void
 err_indexed_assignment (const std::string& tn1, const std::string& tn2)
 {
diff --git a/libinterp/octave-value/ov-usr-fcn.cc b/libinterp/octave-value/ov-usr-fcn.cc
--- a/libinterp/octave-value/ov-usr-fcn.cc
+++ b/libinterp/octave-value/ov-usr-fcn.cc
@@ -672,35 +672,35 @@ octave_user_function::ctor_type_str (voi
 
   return retval;
 }
 
 octave_value
 octave_user_function::dump (void) const
 {
   std::map<std::string, octave_value> m
-    = {{"file_name", file_name},
-       {"line", location_line},
-       {"col", location_column},
-       {"end_line", end_location_line},
-       {"end_col", end_location_column},
-       {"time_parsed", t_parsed},
-       {"time_checked", t_checked},
-       {"parent_name", parent_name},
-       {"system_fcn_file", system_fcn_file},
-       {"call_depth", call_depth},
-       {"num_named_args", num_named_args},
-       {"subfunction", subfunction},
-       {"inline_function", inline_function},
-       {"anonymous_function", anonymous_function},
-       {"nested_function", nested_function},
-       {"ctor_type", ctor_type_str ()},
-       {"class_method", class_method},
-       {"parent_scope", parent_scope ? parent_scope->name () : "0x0"},
-       {"scope_info", m_scope ? m_scope->dump () : "0x0"}};
+    = {{ "file_name", file_name },
+       { "line", location_line },
+       { "col", location_column },
+       { "end_line", end_location_line },
+       { "end_col", end_location_column },
+       { "time_parsed", t_parsed },
+       { "time_checked", t_checked },
+       { "parent_name", parent_name },
+       { "system_fcn_file", system_fcn_file },
+       { "call_depth", call_depth },
+       { "num_named_args", num_named_args },
+       { "subfunction", subfunction },
+       { "inline_function", inline_function },
+       { "anonymous_function", anonymous_function },
+       { "nested_function", nested_function },
+       { "ctor_type", ctor_type_str () },
+       { "class_method", class_method },
+       { "parent_scope", parent_scope ? parent_scope->name () : "0x0" },
+       { "scope_info", m_scope ? m_scope->dump () : "0x0" }};
 
   return octave_value (m);
 }
 
 void
 octave_user_function::print_code_function_header (void)
 {
   octave::tree_print_code tpc (octave_stdout, VPS4);
