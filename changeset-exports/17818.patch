# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1383254764 14400
#      Thu Oct 31 17:26:04 2013 -0400
# Node ID f1b59ef34eda254b4faf97e2e5d4c8406d0e3170
# Parent  9c898878605397e6449f9c0be0f8ca7822952788
attempt to avoid setting persistent state on i/o streams (bug #40396)

* utils.h, utils.cc (octave_preserve_stream_state): New class.
* debug.cc, pr-output.cc, variables.cc, ov-base-sparse.cc: Use it to
save and restore stream flags, precision, field width, and fill
character.

diff --git a/libinterp/corefcn/debug.cc b/libinterp/corefcn/debug.cc
--- a/libinterp/corefcn/debug.cc
+++ b/libinterp/corefcn/debug.cc
@@ -50,16 +50,17 @@ along with Octave; see the file COPYING.
 #include "ov-fcn.h"
 #include "ov-struct.h"
 #include "pt-pr-code.h"
 #include "pt-bp.h"
 #include "pt-eval.h"
 #include "pt-stmt.h"
 #include "toplev.h"
 #include "unwind-prot.h"
+#include "utils.h"
 #include "variables.h"
 
 #include "debug.h"
 
 // Initialize the singleton object
 bp_table *bp_table::instance = 0;
 
 static std::string
@@ -1161,16 +1162,18 @@ do_dbstack (const octave_value_list& arg
       octave_map stk = octave_call_stack::backtrace (nskip, curr_frame);
 
       if (nargout == 0)
         {
           octave_idx_type nframes_to_display = stk.numel ();
 
           if (nframes_to_display > 0)
             {
+              octave_preserve_stream_state stream_state (os);
+
               os << "stopped in:\n\n";
 
               Cell names = stk.contents ("name");
               Cell files = stk.contents ("file");
               Cell lines = stk.contents ("line");
 
               bool show_top_level = true;
 
diff --git a/libinterp/corefcn/pr-output.cc b/libinterp/corefcn/pr-output.cc
--- a/libinterp/corefcn/pr-output.cc
+++ b/libinterp/corefcn/pr-output.cc
@@ -278,41 +278,39 @@ public:
 
   pr_engineering_float (const float_format& f_arg, double val_arg)
     : f (f_arg), val (val_arg) { }
 };
 
 std::ostream&
 operator << (std::ostream& os, const pr_engineering_float& pef)
 {
+  octave_preserve_stream_state stream_state (os);
+
   if (pef.f.fw >= 0)
     os << std::setw (pef.f.fw - pef.f.ex);
 
   if (pef.f.prec >= 0)
     os << std::setprecision (pef.f.prec);
 
-  std::ios::fmtflags oflags =
-    os.flags (static_cast<std::ios::fmtflags>
-              (pef.f.fmt | pef.f.up | pef.f.sp));
+  os.flags (static_cast<std::ios::fmtflags>
+            (pef.f.fmt | pef.f.up | pef.f.sp));
 
   os << pef.mantissa ();
 
   int ex = pef.exponent ();
   if (ex < 0)
     {
       os << std::setw (0) << "e-";
       ex = -ex;
     }
   else
     os << std::setw (0) << "e+";
 
-  os << std::setw (pef.f.ex - 2) << std::setfill ('0') << ex
-     << std::setfill (' ');
-
-  os.flags (oflags);
+  os << std::setw (pef.f.ex - 2) << std::setfill ('0') << ex;
 
   return os;
 }
 
 class
 pr_formatted_float
 {
 public:
@@ -323,30 +321,29 @@ public:
 
   pr_formatted_float (const float_format& f_arg, double val_arg)
     : f (f_arg), val (val_arg) { }
 };
 
 std::ostream&
 operator << (std::ostream& os, const pr_formatted_float& pff)
 {
+  octave_preserve_stream_state stream_state (os);
+
   if (pff.f.fw >= 0)
     os << std::setw (pff.f.fw);
 
   if (pff.f.prec >= 0)
     os << std::setprecision (pff.f.prec);
 
-  std::ios::fmtflags oflags =
-    os.flags (static_cast<std::ios::fmtflags>
-              (pff.f.fmt | pff.f.up | pff.f.sp));
+  os.flags (static_cast<std::ios::fmtflags>
+            (pff.f.fmt | pff.f.up | pff.f.sp));
 
   os << pff.val;
 
-  os.flags (oflags);
-
   return os;
 }
 
 static inline std::string
 rational_approx (double val, int len)
 {
   std::string s;
 
@@ -449,33 +446,32 @@ public:
 
   pr_rational_float (const float_format& f_arg, double val_arg)
     : f (f_arg), val (val_arg) { }
 };
 
 std::ostream&
 operator << (std::ostream& os, const pr_rational_float& prf)
 {
+  octave_preserve_stream_state stream_state (os);
+
   int fw = (rat_string_len > 0 ? rat_string_len : prf.f.fw);
   std::string s = rational_approx (prf.val, fw);
 
   if (fw >= 0)
     os << std::setw (fw);
 
-  std::ios::fmtflags oflags =
-    os.flags (static_cast<std::ios::fmtflags>
-              (prf.f.fmt | prf.f.up | prf.f.sp));
+  os.flags (static_cast<std::ios::fmtflags>
+            (prf.f.fmt | prf.f.up | prf.f.sp));
 
   if (fw > 0 && s.length () > static_cast<unsigned int>(fw))
     os << "*";
   else
     os << s;
 
-  os.flags (oflags);
-
   return os;
 }
 
 // Current format for real numbers and the real part of complex
 // numbers.
 static float_format *curr_real_fmt = 0;
 
 // Current format for the imaginary part of complex numbers.
@@ -1448,47 +1444,44 @@ pr_any_float (const float_format *fmt, s
       // Unless explicitly asked for, always print in big-endian format
       // for hex and bit formats.
       //
       //   {bit,hex}_format == 1: print big-endian
       //   {bit,hex}_format == 2: print native
 
       if (hex_format)
         {
+          octave_preserve_stream_state stream_state (os);
+
           equiv tmp;
           tmp.d = d;
 
           // Unless explicitly asked for, always print in big-endian format.
 
           // FIXME: will bad things happen if we are
           // interrupted before resetting the format flags and fill
           // character?
 
           oct_mach_info::float_format flt_fmt =
             oct_mach_info::native_float_format ();
 
-          char ofill = os.fill ('0');
-
-          std::ios::fmtflags oflags
-            = os.flags (std::ios::right | std::ios::hex);
+          os.fill ('0');
+          os.flags (std::ios::right | std::ios::hex);
 
           if (hex_format > 1
               || flt_fmt == oct_mach_info::flt_fmt_ieee_big_endian)
             {
               for (size_t i = 0; i < sizeof (double); i++)
                 os << std::setw (2) << static_cast<int> (tmp.i[i]);
             }
           else
             {
               for (int i = sizeof (double) - 1; i >= 0; i--)
                 os << std::setw (2) << static_cast<int> (tmp.i[i]);
             }
-
-          os.fill (ofill);
-          os.setf (oflags);
         }
       else if (bit_format)
         {
           equiv tmp;
           tmp.d = d;
 
           oct_mach_info::float_format flt_fmt =
             oct_mach_info::native_float_format ();
@@ -1509,38 +1502,44 @@ pr_any_float (const float_format *fmt, s
                 {
                   for (int i = sizeof (double) - 1; i >= 0; i--)
                     PRINT_CHAR_BITS (os, tmp.i[i]);
                 }
             }
         }
       else if (octave_is_NA (d))
         {
+          octave_preserve_stream_state stream_state (os);
+
           if (fw > 0)
             os << std::setw (fw) << "NA";
           else
             os << "NA";
         }
       else if (rat_format)
         os << pr_rational_float (*fmt, d);
       else if (xisinf (d))
         {
+          octave_preserve_stream_state stream_state (os);
+
           const char *s;
           if (d < 0.0)
             s = "-Inf";
           else
             s = "Inf";
 
           if (fw > 0)
             os << std::setw (fw) << s;
           else
             os << s;
         }
       else if (xisnan (d))
         {
+          octave_preserve_stream_state stream_state (os);
+
           if (fw > 0)
             os << std::setw (fw) << "NaN";
           else
             os << "NaN";
         }
       else if (print_eng)
         os << pr_engineering_float (*fmt, d);
       else
@@ -1637,34 +1636,37 @@ print_empty_nd_array (std::ostream& os, 
     }
 }
 
 static void
 pr_scale_header (std::ostream& os, double scale)
 {
   if (Vfixed_point_format && ! print_g && scale != 1.0)
     {
+      octave_preserve_stream_state stream_state (os);
+
       os << "  "
          << std::setw (8) << std::setprecision (1)
          << std::setiosflags (std::ios::scientific|std::ios::left)
          << scale
-         << std::resetiosflags (std::ios::scientific|std::ios::left)
          << " *\n";
 
       if (! Vcompact_format)
         os << "\n";
     }
 }
 
 static void
 pr_col_num_header (std::ostream& os, octave_idx_type total_width, int max_width,
                    octave_idx_type lim, octave_idx_type col, int extra_indent)
 {
   if (total_width > max_width && Vsplit_long_rows)
     {
+      octave_preserve_stream_state stream_state (os);
+
       if (col != 0)
         {
           if (Vcompact_format)
             os << "\n";
           else
             os << "\n\n";
         }
 
@@ -1813,16 +1815,18 @@ octave_print_internal (std::ostream& os,
                     }
                   else
                     os << " ...\n";
                 }
             }
         }
       else
         {
+          octave_preserve_stream_state stream_state (os);
+
           pr_scale_header (os, scale);
 
           for (octave_idx_type col = 0; col < nc; col += inc)
             {
               octave_idx_type lim = col + inc < nc ? col + inc : nc;
 
               pr_col_num_header (os, total_width, max_width, lim, col,
                                  extra_indent);
@@ -1942,16 +1946,18 @@ octave_print_internal (std::ostream& os,
                 os << " ]";
               else
                 os << " ...\n";
             }
           os << ")";
         }
       else
         {
+          octave_preserve_stream_state stream_state (os);
+
           os << "Diagonal Matrix\n";
           if (! Vcompact_format)
             os << "\n";
 
           pr_scale_header (os, scale);
 
           // kluge. Get the true width of a number.
           int zero_fw;
@@ -2227,16 +2233,18 @@ octave_print_internal (std::ostream& os,
                     }
                   else
                     os << " ...\n";
                 }
             }
         }
       else
         {
+          octave_preserve_stream_state stream_state (os);
+
           pr_scale_header (os, scale);
 
           for (octave_idx_type col = 0; col < nc; col += inc)
             {
               octave_idx_type lim = col + inc < nc ? col + inc : nc;
 
               pr_col_num_header (os, total_width, max_width, lim, col,
                                  extra_indent);
@@ -2358,16 +2366,18 @@ octave_print_internal (std::ostream& os,
                 os << " ]";
               else
                 os << " ...\n";
             }
           os << ")";
         }
       else
         {
+          octave_preserve_stream_state stream_state (os);
+
           os << "Diagonal Matrix\n";
           if (! Vcompact_format)
             os << "\n";
 
           pr_scale_header (os, scale);
 
           // kluge. Get the true width of a number.
           int zero_fw;
@@ -2506,16 +2516,18 @@ octave_print_internal (std::ostream& os,
               else
                 os << " ...\n";
             }
           if (! colp) os << ", :";
           os << ")";
         }
       else
         {
+          octave_preserve_stream_state stream_state (os);
+
           os << "Permutation Matrix\n";
           if (! Vcompact_format)
             os << "\n";
 
           for (octave_idx_type col = 0; col < nc; col += inc)
             {
               octave_idx_type lim = col + inc < nc ? col + inc : nc;
 
@@ -2672,16 +2684,18 @@ octave_print_internal (std::ostream& os,
                   pr_float (os, increment, fw);
                   os << " : ";
                 }
               pr_float (os, limit, fw);
             }
         }
       else
         {
+          octave_preserve_stream_state stream_state (os);
+
           int column_width = fw + 2;
           octave_idx_type total_width = num_elem * column_width;
           octave_idx_type max_width = command_editor::terminal_cols ();
 
           if (free_format)
             {
               os << r;
               return;
@@ -2967,34 +2981,30 @@ pr_int (std::ostream& os, const T& d, in
   // Unless explicitly asked for, always print in big-endian
   // format for hex and bit formats.
   //
   //   {bit,hex}_format == 1: print big-endian
   //   {bit,hex}_format == 2: print native
 
   if (hex_format)
     {
-      char ofill = os.fill ('0');
-
-      std::ios::fmtflags oflags
-        = os.flags (std::ios::right | std::ios::hex);
+      octave_preserve_stream_state stream_state (os);
+
+      os.flags (std::ios::right | std::ios::hex);
 
       if (hex_format > 1 || oct_mach_info::words_big_endian ())
         {
           for (size_t i = 0; i < sz; i++)
             os << std::setw (2) << static_cast<int> (tmpi[i]);
         }
       else
         {
           for (int i = sz - 1; i >= 0; i--)
             os << std::setw (2) << static_cast<int> (tmpi[i]);
         }
-
-      os.fill (ofill);
-      os.setf (oflags);
     }
   else if (bit_format)
     {
       if (oct_mach_info::words_big_endian ())
         {
           for (size_t i = 0; i < sz; i++)
             PRINT_CHAR_BITS (os, tmpi[i]);
         }
@@ -3009,16 +3019,18 @@ pr_int (std::ostream& os, const T& d, in
             {
               for (int i = sz - 1; i >= 0; i--)
                 PRINT_CHAR_BITS (os, tmpi[i]);
             }
         }
     }
   else
     {
+      octave_preserve_stream_state stream_state (os);
+
       os << std::setw (fw)
          << typename octave_print_conv<T>::print_conv_type (d);
 
       if (bank_format)
         os << ".00";
     }
 }
 
@@ -3303,16 +3315,18 @@ octave_print_internal_template (std::ost
                   os << "\n";
                 }
 
               if (pr_as_read_syntax)
                 os << "]";
             }
           else
             {
+              octave_preserve_stream_state stream_state (os);
+
               octave_idx_type n_rows = page.rows ();
               octave_idx_type n_cols = page.cols ();
 
               for (octave_idx_type col = 0; col < n_cols; col += inc)
                 {
                   octave_idx_type lim = col + inc < n_cols ? col + inc : n_cols;
 
                   pr_col_num_header (os, total_width, max_width, lim, col,
diff --git a/libinterp/corefcn/utils.cc b/libinterp/corefcn/utils.cc
--- a/libinterp/corefcn/utils.cc
+++ b/libinterp/corefcn/utils.cc
@@ -1429,8 +1429,16 @@ do_simple_cellfun (octave_value_list (*f
 {
   octave_value retval;
   const octave_value_list tmp = do_simple_cellfun (fun, fun_name, args, 1);
   if (tmp.length () > 0)
     retval = tmp(0);
 
   return retval;
 }
+
+octave_preserve_stream_state::~octave_preserve_stream_state (void)
+{
+  stream.flags (oflags);
+  stream.precision (oprecision);
+  stream.width (owidth);
+  stream.fill (ofill);
+}
diff --git a/libinterp/corefcn/utils.h b/libinterp/corefcn/utils.h
--- a/libinterp/corefcn/utils.h
+++ b/libinterp/corefcn/utils.h
@@ -122,9 +122,30 @@ do_simple_cellfun (octave_value_list (*f
                    const char *fun_name, const octave_value_list& args,
                    int nargout);
 
 extern OCTINTERP_API
 octave_value
 do_simple_cellfun (octave_value_list (*fun) (const octave_value_list&, int),
                    const char *fun_name, const octave_value_list& args);
 
+class
+octave_preserve_stream_state
+{
+public:
+
+  octave_preserve_stream_state (std::ios& s)
+    : stream (s), oflags (s.flags ()), oprecision (s.precision ()),
+      owidth (s.width ()), ofill (s.fill ())
+  { }
+
+  ~octave_preserve_stream_state (void);
+
+private:
+
+  std::ios& stream;
+  std::ios::fmtflags oflags;
+  std::streamsize oprecision;
+  int owidth;
+  char ofill;
+};
+
 #endif
diff --git a/libinterp/corefcn/variables.cc b/libinterp/corefcn/variables.cc
--- a/libinterp/corefcn/variables.cc
+++ b/libinterp/corefcn/variables.cc
@@ -935,16 +935,18 @@ whos_parameter
 
 static void
 print_descriptor (std::ostream& os, std::list<whos_parameter> params)
 {
   // This method prints a line of information on a given symbol
   std::list<whos_parameter>::iterator i = params.begin ();
   std::ostringstream param_buf;
 
+  octave_preserve_stream_state stream_state (os);
+
   while (i != params.end ())
     {
       whos_parameter param = *i;
 
       if (param.command != '\0')
         {
           // Do the actual printing
           switch (param.modifier)
@@ -1066,16 +1068,18 @@ private:
 
     void display_line (std::ostream& os,
                        const std::list<whos_parameter>& params) const
     {
       std::string dims_str = get_dims_str (varval);
 
       std::list<whos_parameter>::const_iterator i = params.begin ();
 
+      octave_preserve_stream_state stream_state (os);
+
       while (i != params.end ())
         {
           whos_parameter param = *i;
 
           if (param.command != '\0')
             {
               // Do the actual printing.
 
diff --git a/libinterp/octave-value/ov-base-sparse.cc b/libinterp/octave-value/ov-base-sparse.cc
--- a/libinterp/octave-value/ov-base-sparse.cc
+++ b/libinterp/octave-value/ov-base-sparse.cc
@@ -37,16 +37,17 @@ along with Octave; see the file COPYING.
 #include "byte-swap.h"
 #include "ls-oct-ascii.h"
 #include "ls-utils.h"
 #include "ls-hdf5.h"
 
 #include "boolSparse.h"
 #include "ov-base-sparse.h"
 #include "pager.h"
+#include "utils.h"
 
 template <class T>
 octave_value
 octave_base_sparse<T>::do_index_op (const octave_value_list& idx,
                                     bool resize_ok)
 {
   octave_value retval;
 
@@ -301,16 +302,18 @@ octave_base_sparse<T>::print_info (std::
   matrix.print_info (os, prefix);
 }
 
 template <class T>
 void
 octave_base_sparse<T>::print_raw (std::ostream& os,
                                   bool pr_as_read_syntax) const
 {
+  octave_preserve_stream_state stream_state (os);
+
   octave_idx_type nr = matrix.rows ();
   octave_idx_type nc = matrix.cols ();
   octave_idx_type nz = nnz ();
 
   // FIXME: this should probably all be handled by a
   // separate octave_print_internal function that can handle format
   // compact, loose, etc.
 
