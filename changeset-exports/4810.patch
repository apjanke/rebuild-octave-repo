# HG changeset patch
# User jwe
# Date 1078339779 0
#      Wed Mar 03 18:49:39 2004 +0000
# Node ID 72a6d410a14a42ff0593a75099ac8f50c2673b64
# Parent  b60be7678bdc76133808eab7a0eb934c0d869a09
[project @ 2004-03-03 18:49:39 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,9 +1,15 @@
-2004-03-02  John W. Eaton  <jwe@bevo.che.wisc.edu>
+2004-03-02  Paul Kienzle  <pkienzle@users.sf.net>
+
+	* Range.cc (Range::matrix_value): Cache result.
+	(Range::sort): Clear cache.
+	* Range.h (Range::cache): New data member.
+	(Range::set_base, Range::set_limit, Range::set_inc): Clear cache.
+	(Range::print_range): Delete.
 
 2004-03-02  David Bateman  <dbateman@free.fr>
  
 	* oct-fftw.cc: Only two versions of plan, and avoid endless
 	changes between them.  Faster for small fft's.
 	(octave_fftw_planner::simd_align, octave_fftw_planner::rsimd_align):
 	New member variables. 
 	(octave_fftw_planner::ialign, octave_fftw_planner::oalign,
diff --git a/liboctave/Range.cc b/liboctave/Range.cc
--- a/liboctave/Range.cc
+++ b/liboctave/Range.cc
@@ -30,17 +30,16 @@ Software Foundation, 59 Temple Place - S
 
 #include <cfloat>
 #include <climits>
 #include <cmath>
 
 #include <iostream>
 
 #include "Range.h"
-#include "dMatrix.h"
 #include "lo-mappers.h"
 #include "lo-utils.h"
 
 bool
 Range::all_elements_are_ints (void) const
 {
   // If the base and increment are ints, the final value in the range
   // will also be an integer, even if the limit is not.
@@ -48,40 +47,39 @@ Range::all_elements_are_ints (void) cons
   return (! (xisnan (rng_base) || xisnan (rng_inc))
 	  && NINT (rng_base) == rng_base
 	  && NINT (rng_inc) == rng_inc);
 }
 
 Matrix
 Range::matrix_value (void) const
 {
-  Matrix retval;
-
-  if (rng_nelem > 0)
+  if (rng_nelem > 0 && cache.rows() == 0)
     {
-      retval.resize (1, rng_nelem);
+      cache.resize (1, rng_nelem);
       double b = rng_base;
       double increment = rng_inc;
       for (int i = 0; i < rng_nelem; i++)
-	retval(i) = b + i * increment;
+	cache(i) = b + i * increment;
 
       // On some machines (x86 with extended precision floating point
       // arithmetic, for example) it is possible that we can overshoot
       // the limit by approximately the machine precision even though
       // we were very careful in our calculation of the number of
       // elements.
 
-      if ((rng_inc > 0 && retval(rng_nelem-1) > rng_limit)
-	  || (rng_inc < 0 && retval(rng_nelem-1) < rng_limit))
-	retval(rng_nelem-1) = rng_limit;
+      if ((rng_inc > 0 && cache(rng_nelem-1) > rng_limit)
+	  || (rng_inc < 0 && cache(rng_nelem-1) < rng_limit))
+	cache(rng_nelem-1) = rng_limit;
     }
 
-  return retval;
+  return cache;
 }
 
+
 // NOTE: max and min only return useful values if nelem > 0.
 
 double
 Range::min (void) const
 {
   double retval = 0.0;
   if (rng_nelem > 0)
     {
@@ -126,28 +124,20 @@ void
 Range::sort (void)
 {
   if (rng_base > rng_limit && rng_inc < 0.0)
     {
       double tmp = rng_base;
       rng_base = min ();
       rng_limit = tmp;
       rng_inc = -rng_inc;
+      cache.resize (0,0);
     }
 }
 
-void
-Range::print_range (void)
-{
-  std::cerr << "Range: rng_base = " << rng_base
-	    << " rng_limit " << rng_limit
-	    << " rng_inc " << rng_inc
-	    << " rng_nelem " << rng_nelem << "\n";
-}
-
 std::ostream&
 operator << (std::ostream& os, const Range& a)
 {
   double b = a.base ();
   double increment = a.inc ();
   int num_elem = a.nelem ();
 
   for (int i = 0; i < num_elem-1; i++)
diff --git a/liboctave/Range.h b/liboctave/Range.h
--- a/liboctave/Range.h
+++ b/liboctave/Range.h
@@ -23,18 +23,17 @@ Software Foundation, 59 Temple Place - S
 #if !defined (octave_Range_h)
 #define octave_Range_h 1
 
 #if defined (__GNUG__) && defined (USE_PRAGMA_INTERFACE_IMPLEMENTATION)
 #pragma interface
 #endif
 
 #include <iostream>
-
-class Matrix;
+#include "dMatrix.h"
 
 class
 Range
 {
  public:
 
   Range (void)
     : rng_base (-1), rng_limit (-1), rng_inc (-1), rng_nelem (-1) { }
@@ -60,27 +59,28 @@ Range
 
   Matrix matrix_value (void) const;
 
   double min (void) const;
   double max (void) const;
 
   void sort (void);
 
-  void set_base (double b) { rng_base = b;  }
-  void set_limit (double l) { rng_limit = l; }
-  void set_inc (double i) { rng_inc = i;   }
+  void set_base (double b) { rng_base = b; cache.resize (0,0); }
+  void set_limit (double l) { rng_limit = l; cache.resize (0,0); }
+  void set_inc (double i) { rng_inc = i; cache.resize (0,0); }
 
   friend std::ostream& operator << (std::ostream& os, const Range& r);
   friend std::istream& operator >> (std::istream& is, Range& r);
 
   void print_range (void);
 
  private:
 
+  mutable Matrix cache;
   double rng_base;
   double rng_limit;
   double rng_inc;
 
   int rng_nelem;
 
   int nelem_internal (void) const;
 };
