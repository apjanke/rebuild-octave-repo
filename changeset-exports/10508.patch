# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1270989180 -7200
#      Sun Apr 11 14:33:00 2010 +0200
# Node ID 9a5e2d13fa5ad409f59e6f1ffb4129c3469a5d3b
# Parent  424795ef82b8d1a072c1fdb31833166588531c8a
fix typos in blas-xtra

diff --git a/libcruft/ChangeLog b/libcruft/ChangeLog
--- a/libcruft/ChangeLog
+++ b/libcruft/ChangeLog
@@ -1,8 +1,14 @@
+2010-04-11  Jaroslav Hajek  <highegg@gmail.com>
+
+	* blas-xtra/cmatm3.f, blas-xtra/zmatm3.f,
+	blas-xtra/dmatm3.f, blas-xtra/xsdot.f: Fix typos. Add missing
+	decls.
+
 2010-03-21  John W. Eaton  <jwe@octave.org>
 
 	* Makefile.am (libcruft_la_LIBADD): Include ../libgnu/libgnu.la
 	in the list.  From Marco Atzeri <marco_atzeri@yahoo.it>.
 
 2010-03-15  John W. Eaton  <jwe@octave.org>
 
 	* Makefile.am (libcruft_la_CPPFLAGS): Append $(AM_CPPFLAGS).
diff --git a/libcruft/blas-xtra/cmatm3.f b/libcruft/blas-xtra/cmatm3.f
--- a/libcruft/blas-xtra/cmatm3.f
+++ b/libcruft/blas-xtra/cmatm3.f
@@ -30,19 +30,20 @@ c m,n,k (in)    the dimensions
 c np (in)       number of multiplications
 c a (in)        a complex input array, size (m,k,np) 
 c b (in)        a complex input array, size (k,n,np) 
 c c (out)       a complex output array, size (m,n,np)
       integer m,n,k,np
       complex a(m*k,np),b(k*n,np)
       complex c(m*n,np)
 
-      complex cdot,one,zero
+      complex cdotu,one,zero
       parameter (one = 1e0, zero = 0e0)
       external cdotu,cgemv,cgemm
+      integer i
 
 c quick return if possible.
       if (np <= 0) return
 
       if (m == 1) then
         if (n == 1) then
           do i = 1,np
             c(1,i) = cdotu(k,a(1,i),1,b(1,i),1)
diff --git a/libcruft/blas-xtra/dmatm3.f b/libcruft/blas-xtra/dmatm3.f
--- a/libcruft/blas-xtra/dmatm3.f
+++ b/libcruft/blas-xtra/dmatm3.f
@@ -30,19 +30,20 @@ c m,n,k (in)    the dimensions
 c np (in)       number of multiplications
 c a (in)        a double prec. input array, size (m,k,np) 
 c b (in)        a double prec. input array, size (k,n,np) 
 c c (out)       a double prec. output array, size (m,n,np)
       integer m,n,k,np
       double precision a(m*k,np),b(k*n,np)
       double precision c(m*n,np)
 
-      double precision sdot,one,zero
+      double precision ddot,one,zero
       parameter (one = 1d0, zero = 0d0)
       external ddot,dgemv,dgemm
+      integer i
 
 c quick return if possible.
       if (np <= 0) return
 
       if (m == 1) then
         if (n == 1) then
           do i = 1,np
             c(1,i) = ddot(k,a(1,i),1,b(1,i),1)
diff --git a/libcruft/blas-xtra/smatm3.f b/libcruft/blas-xtra/smatm3.f
--- a/libcruft/blas-xtra/smatm3.f
+++ b/libcruft/blas-xtra/smatm3.f
@@ -33,16 +33,17 @@ c b (in)        a real input array, size
 c c (out)       a real output array, size (m,n,np)
       integer m,n,k,np
       real a(m*k,np),b(k*n,np)
       real c(m*n,np)
 
       real sdot,one,zero
       parameter (one = 1e0, zero = 0e0)
       external sdot,sgemv,sgemm
+      integer i
 
 c quick return if possible.
       if (np <= 0) return
 
       if (m == 1) then
         if (n == 1) then
           do i = 1,np
             c(1,i) = sdot(k,a(1,i),1,b(1,i),1)
diff --git a/libcruft/blas-xtra/xsdot.f b/libcruft/blas-xtra/xsdot.f
--- a/libcruft/blas-xtra/xsdot.f
+++ b/libcruft/blas-xtra/xsdot.f
@@ -1,6 +1,6 @@
       subroutine xsdot (n, dx, incx, dy, incy, retval)
-      real ddot, dx(*), dy(*), retval
+      real ddot, dx(*), dy(*), retval, sdot
       integer n, incx, incy
       retval = sdot (n, dx, incx, dy, incy)
       return
       end
diff --git a/libcruft/blas-xtra/zmatm3.f b/libcruft/blas-xtra/zmatm3.f
--- a/libcruft/blas-xtra/zmatm3.f
+++ b/libcruft/blas-xtra/zmatm3.f
@@ -30,19 +30,20 @@ c m,n,k (in)    the dimensions
 c np (in)       number of multiplications
 c a (in)        a double complex input array, size (m,k,np) 
 c b (in)        a double complex input array, size (k,n,np) 
 c c (out)       a double complex output array, size (m,n,np)
       integer m,n,k,np
       double complex a(m*k,np),b(k*n,np)
       double complex c(m*n,np)
 
-      double complex cdot,one,zero
+      double complex zdotu,one,zero
       parameter (one = 1d0, zero = 0d0)
       external zdotu,zgemv,zgemm
+      integer i
 
 c quick return if possible.
       if (np <= 0) return
 
       if (m == 1) then
         if (n == 1) then
           do i = 1,np
             c(1,i) = zdotu(k,a(1,i),1,b(1,i),1)
