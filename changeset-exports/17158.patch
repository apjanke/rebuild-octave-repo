# HG changeset patch
# User Rik <rik@octave.org>
# Date 1375490007 25200
#      Fri Aug 02 17:33:27 2013 -0700
# Node ID b491ef539071883277026787ce94fe785015d5e0
# Parent  5fd07aa232cf88f9a73e67540187240e0e7de4a0
hist.m: Accept an axis handle as first input (bug #38508).

* scripts/plot/hist.m: Use __plt_axis_get_arg__ to accept an axis handle as
first input.

diff --git a/scripts/plot/hist.m b/scripts/plot/hist.m
--- a/scripts/plot/hist.m
+++ b/scripts/plot/hist.m
@@ -16,18 +16,19 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} hist (@var{y})
 ## @deftypefnx {Function File} {} hist (@var{y}, @var{x})
 ## @deftypefnx {Function File} {} hist (@var{y}, @var{nbins})
 ## @deftypefnx {Function File} {} hist (@var{y}, @var{x}, @var{norm})
+## @deftypefnx {Function File} {} hist (@dots{}, @var{prop}, @var{val}, @dots{})
+## @deftypefnx {Function File} {} hist (@var{hax}, @dots)
 ## @deftypefnx {Function File} {[@var{nn}, @var{xx}] =} hist (@dots{})
-## @deftypefnx {Function File} {[@dots{}] =} hist (@dots{}, @var{prop}, @var{val})
 ## Produce histogram counts or plots.
 ##
 ## With one vector input argument, @var{y}, plot a histogram of the values
 ## with 10 bins.  The range of the histogram bins is determined by the
 ## range of the data.  With one matrix input argument, @var{y}, plot a
 ## histogram where each bin contains a bar per input column.
 ##
 ## Given a second vector argument, @var{x}, use that as the centers of
@@ -36,49 +37,56 @@
 ##
 ## If scalar, the second argument, @var{nbins}, defines the number of bins.
 ##
 ## If a third argument is provided, the histogram is normalized such that
 ## the sum of the bars is equal to @var{norm}.
 ##
 ## Extreme values are lumped in the first and last bins.
 ##
-## With two output arguments, produce the values @var{nn} and @var{xx} such
-## that @code{bar (@var{xx}, @var{nn})} will plot the histogram.
-##
 ## The histogram's appearance may be modified by specifying property/value
-## pairs, @var{prop} and @var{val} pairs.  For example the face and edge
-## color may be modified.
+## pairs.  For example the face and edge color may be modified.
 ##
 ## @example
 ## @group
 ## hist (randn (1, 100), 25, "facecolor", "r", "edgecolor", "b");
 ## @end group
 ## @end example
 ##
 ## @noindent
-## The histograms colors also depend upon the colormap.
+## The histogram's colors also depend upon the current colormap.
 ##
 ## @example
 ## @group
 ## hist (rand (10, 3));
 ## colormap (summer ());
 ## @end group
 ## @end example
 ##
+## If the first argument @var{hax} is an axes handle, then plot into this axis,
+## rather than the current axes returned by @code{gca}.
+##
+## With two output arguments, produce the values @var{nn} and @var{xx} such
+## that @code{bar (@var{xx}, @var{nn})} will plot the histogram.
+##
 ## @seealso{histc, bar, pie, rose}
 ## @end deftypefn
 
 ## Author: jwe
 
-function [nn, xx] = hist (y, varargin)
+function [nn, xx] = hist (varargin)
+
+  [hax, varargin, nargin] = __plt_get_axis_arg__ ("hist", varargin{:});
 
   if (nargin < 1)
     print_usage ();
   endif
+  
+  y = varargin{1};
+  varargin = varargin(2:end);
 
   arg_is_vector = isvector (y);
 
   if (rows (y) == 1)
     y = y(:);
   endif
 
   if (isreal (y))
@@ -154,20 +162,25 @@ function [nn, xx] = hist (y, varargin)
   if (nargout > 0)
     if (arg_is_vector)
       nn = freq';
       xx = x';
     else
       nn = freq;
       xx = x;
     endif
-  elseif (columns (freq) != 1)
-    bar (x, freq, 0.8, varargin{iarg:end});
   else
-    bar (x, freq, 1.0, varargin{iarg:end});
+    if (isempty (hax))
+      hax = gca ();
+    endif
+    if (columns (freq) != 1)
+      bar (hax, x, freq, 0.8, varargin{iarg:end});
+    else
+      bar (hax, x, freq, 1.0, varargin{iarg:end});
+    endif
   endif
 
 endfunction
 
 
 %!test
 %! [nn,xx] = hist ([1:4], 3);
 %! assert (xx, [1.5,2.5,3.5]);
