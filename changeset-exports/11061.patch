# HG changeset patch
# User Jordi Gutiérrez Hermoso <jordigh@gmail.com>
# Date 1285830330 18000
#      Thu Sep 30 02:05:30 2010 -0500
# Node ID 604dfbaf50103a5f0c326be50464e7b9436f10a8
# Parent  54697b37d8bf16e97923fa534c66101eb360c1c5
Fix off-by-one and typo bugs in gcd

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2010-09-30  Jordi Gutiérrez Hermoso  <jordigh@gmail.com>
+
+	* DLD-FUNCTIONS/gcd.cc (extended_gcd): Fix bug that didn't
+	distinguish the two output coefficients.
+	(Fgcd): Fix off-by-one bug and typo from copy-pasted code.
+
 2010-09-30  Jaroslav Hajek  <highegg@gmail.com>
 
 	* oct-parse.yy (Fautoload): Replace Octave_map by octave_map.
 	* ov-fcn-handle.cc (Ffunctions): Replace Octave_map by 
 	octave_scalar_map.
 
 2010-09-30  Jaroslav Hajek  <highegg@gmail.com>
 
diff --git a/src/DLD-FUNCTIONS/gcd.cc b/src/DLD-FUNCTIONS/gcd.cc
--- a/src/DLD-FUNCTIONS/gcd.cc
+++ b/src/DLD-FUNCTIONS/gcd.cc
@@ -70,17 +70,17 @@ simple_gcd (const octave_int<T>& a, cons
 static double 
 extended_gcd (double a, double b, double& x, double& y)
 {
   if (! xisinteger (a) || ! xisinteger (b))
     (*current_liboctave_error_handler)
       ("gcd: all values must be integers");
 
   double aa = fabs (a), bb = fabs (b);
-  double xx = 0, lx = 1, yy = 0, ly = 1;
+  double xx = 0, lx = 1, yy = 1, ly = 0;
   while (bb != 0)
     {
       double qq = floor (aa / bb);
       double tt = fmod (aa, bb);
       aa = bb; bb = tt;
 
       double tx = lx - qq*xx;
       lx = xx; xx = tx;
@@ -96,17 +96,17 @@ extended_gcd (double a, double b, double
 }
 
 template <class T>
 static octave_int<T>
 extended_gcd (const octave_int<T>& a, const octave_int<T>& b,
               octave_int<T>& x, octave_int<T>& y)
 {
   T aa = a.abs ().value (), bb = b.abs ().value ();
-  T xx = 0, lx = 1, yy = 0, ly = 1;
+  T xx = 0, lx = 1, yy = 1, ly = 0;
   while (bb != 0)
     {
       T qq = aa / bb;
       T tt = aa % bb;
       aa = bb; bb = tt;
 
       T tx = lx - qq*xx;
       lx = xx; xx = tx;
@@ -345,20 +345,20 @@ that,\n\
     {
       if (nargout > 1)
         {
           retval.resize (nargin + 1);
           retval(0) = do_extended_gcd (args(0), args(1), retval(1), retval(2));
           for (int j = 2; j < nargin; j++)
             {
               octave_value x;
-              retval(0) = do_extended_gcd (retval(0), args(1), 
+              retval(0) = do_extended_gcd (retval(0), args(j),
                                            x, retval(j+1));
               for (int i = 0; i < j; i++)
-                retval(i).assign (octave_value::op_el_mul_eq, x);
+                retval(i+1).assign (octave_value::op_el_mul_eq, x);
               if (error_state)
                 break;
             }
         }
       else
         {
           retval(0) = do_simple_gcd (args(0), args(1));
           for (int j = 2; j < nargin; j++)
