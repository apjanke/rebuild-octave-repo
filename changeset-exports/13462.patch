# HG changeset patch
# User Jordi Gutiérrez Hermoso <jordigh@gmail.com>
# Date 1303056917 18000
#      Sun Apr 17 11:15:17 2011 -0500
# Node ID 2fa14ae5b2c433ee668b42ba4cb10ee39e6b9566
# Parent  e66dbc6485f2b9c472776d2b0860971c2c07fc63
# Parent  708186085e0dbbf93cdfe7112ab022877541d0b4
Merge with Savannah repo

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,13 @@
+2011-04-16  Ben Abbott  <bpabbott@mac.com>
+
+	* interpreter/plot.txi: Clarify that inheritance of default property
+	values only applies to the named object type.
+
 2011-04-12  Ben Abbott  <bpabbott@mac.com>
 
 	* interpreter/data.txi: Replace xref{Data Structures} with
 	xref{Structures}.
 
 2011-04-11  Rik  <octave@nomad.inbox5.com>
 
 	* interpreter/func.txi: Add discussion of isargout to Ignoring
diff --git a/doc/interpreter/plot.txi b/doc/interpreter/plot.txi
--- a/doc/interpreter/plot.txi
+++ b/doc/interpreter/plot.txi
@@ -2385,17 +2385,21 @@ elements are vectors and @code{zdata} mu
 @cindex default graphics properties
 @cindex graphics properties, default
 
 Object properties have two classes of default values, @dfn{factory
 defaults} (the initial values) and @dfn{user-defined defaults}, which
 may override the factory defaults.
 
 Although default values may be set for any object, they are set in
-parent objects and apply to child objects.  For example,
+parent objects and apply to child objects, of the specified object type.
+For example, seeting the default @code{color} property of @code{line}
+objects to "green", for the @code{root} object, will result in all
+@code{line} objects inheriting the @code{color} "green" as the default
+value.
 
 @example
 set (0, "defaultlinecolor", "green");
 @end example
 
 @noindent
 sets the default line color for all objects.  The rule for constructing
 the property name to set a default value is
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2011-04-17  Patrick Häcker  <magicmuscleman>
+
+	* strings/mat2str.m: Limit the number of digits to one less than
+	available for double.
+
 2011-04-15  Kai Habel  <kai.habel@gmx.de>
 
 	* general/interp1.m, polynomial/mkpp.m, polynomial/pchip.m,
 	polynomial/ppder.m, polynomial/ppint.m, polynomial/ppjumps.m,
 	polynomial/ppval.m, polynomial/spline.m, polynomial/unmkpp.m:
 	Make functions more compatible with respect to handling of
 	picewise polynoms (pp). Rename pp-struct elements.
 	Handle nD-arguments correctly. Tests added.
diff --git a/scripts/strings/mat2str.m b/scripts/strings/mat2str.m
--- a/scripts/strings/mat2str.m
+++ b/scripts/strings/mat2str.m
@@ -23,17 +23,17 @@
 ## Format real/complex numerical matrices as strings.  This function
 ## returns values that are suitable for the use of the @code{eval}
 ## function.
 ##
 ## The precision of the values is given by @var{n}.  If @var{n} is a
 ## scalar then both real and imaginary parts of the matrix are printed
 ## to the same precision.  Otherwise @code{@var{n} (1)} defines the
 ## precision of the real part and @code{@var{n} (2)} defines the
-## precision of the imaginary part.  The default for @var{n} is 17.
+## precision of the imaginary part.  The default for @var{n} is 15.
 ##
 ## If the argument 'class' is given, then the class of @var{x} is
 ## included in the string in such a way that the eval will result in the
 ## construction of a matrix of the same class.
 ##
 ## @example
 ## @group
 ## mat2str ([ -1/3 + i/7; 1/3 - i/7 ], [4 2])
@@ -51,23 +51,23 @@
 ## @end deftypefn
 
 ## Author: Rolf Fabian <fabian@tu-cottbus.de>
 
 function s = mat2str (x, n, cls)
 
   if (nargin < 2 || isempty (n))
     ## Default precision
-    n = 17;
+    n = 15;
   endif
 
   if (nargin < 3)
     if (ischar (n))
       cls = n;
-      n = 17;
+      n = 15;
     else
       cls = "";
     endif
   endif
 
   if (nargin < 1 || nargin > 3 || ! (isnumeric (x) || islogical (x)))
     print_usage ();
   endif
@@ -132,8 +132,9 @@ endfunction
 
 %!assert (mat2str ([-1/3 + i/7; 1/3 - i/7], [4 2]), "[-0.3333+0.14i;0.3333-0.14i]")
 %!assert (mat2str ([-1/3 +i/7; 1/3 -i/7], [4 2]), "[-0.3333+0i,0+0.14i;0.3333+0i,-0-0.14i]")
 %!assert (mat2str (int16 ([1 -1]), 'class'), "int16([1,-1])")
 
 %!assert (mat2str (true), "true");
 %!assert (mat2str (false), "false");
 %!assert (mat2str (logical (eye (2))), "[true,false;false,true]");
+%!assert (mat2str (0.7), "0.7")
