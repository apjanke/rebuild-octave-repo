# HG changeset patch
# User Rik <rik@octave.org>
# Date 1449942920 28800
#      Sat Dec 12 09:55:20 2015 -0800
# Node ID 69b37757030cbbc9fb4aa861e93c3cebd93df014
# Parent  04748b009201c09e315e301c73988ae727f632a6
2015 Code Sprint: __magick_read__.cc: use ovl ().

diff --git a/libinterp/dldfcn/__magick_read__.cc b/libinterp/dldfcn/__magick_read__.cc
--- a/libinterp/dldfcn/__magick_read__.cc
+++ b/libinterp/dldfcn/__magick_read__.cc
@@ -213,17 +213,17 @@ template <class T>
 static octave_value_list
 read_indexed_images (const std::vector<Magick::Image>& imvec,
                      const Array<octave_idx_type>& frameidx,
                      const octave_idx_type& nargout,
                      const octave_scalar_map& options)
 {
   typedef typename T::element_type P;
 
-  octave_value_list retval (3, Matrix ());
+  octave_value_list retval (nargout > 1 ? std::min (nargout, 3) : 1);
 
   std::map<std::string, octave_idx_type> region = calculate_region (options);
   const octave_idx_type nFrames = frameidx.numel ();
   const octave_idx_type nRows = region["row_out"];
   const octave_idx_type nCols = region["col_out"];
 
   // imvec has all of the pages of a file, even the ones we are not
   // interested in. We will use the first image that we will be actually
@@ -667,16 +667,17 @@ read_images (std::vector<Magick::Image>&
         break;
       }
 
     default:
       error ("__magick_read__: unknown Magick++ image type");
     }
 
   retval(0) = img;
+
   return retval;
 }
 
 // Read a file into vector of image objects.
 void static
 read_file (const std::string& filename, std::vector<Magick::Image>& imvec)
 {
   try
