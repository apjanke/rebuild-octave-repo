# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1535479350 14400
#      Tue Aug 28 14:02:30 2018 -0400
# Node ID 9b0e5a035cd03d9ca850a7cde5a2d9830d361243
# Parent  8b548f2f808617252ea68343c4b2e1ae30c2d6e8
# Parent  8ac4bfa550538c0818e1bd40d3a847507a0f4742
maint: Merge stable to default.

diff --git a/libinterp/parse-tree/oct-parse.yy b/libinterp/parse-tree/oct-parse.yy
--- a/libinterp/parse-tree/oct-parse.yy
+++ b/libinterp/parse-tree/oct-parse.yy
@@ -2638,17 +2638,17 @@ namespace octave
       default:
         panic_impossible ();
         break;
       }
 
     int l = tok_val->line ();
     int c = tok_val->column ();
 
-    return new tree_binary_expression (op1, op2, l, c, t);
+    return maybe_compound_binary_expression (op1, op2, l, c, t);
   }
 
   // Build a boolean expression.
 
   tree_expression *
   base_parser::make_boolean_op (int op, tree_expression *op1,
                                 token *tok_val, tree_expression *op2)
   {
diff --git a/libinterp/parse-tree/pt-cbinop.cc b/libinterp/parse-tree/pt-cbinop.cc
--- a/libinterp/parse-tree/pt-cbinop.cc
+++ b/libinterp/parse-tree/pt-cbinop.cc
@@ -171,20 +171,24 @@ namespace octave
       case octave_value::op_mul:
         ct = simplify_mul_op (ca, cb);
         break;
 
       case octave_value::op_ldiv:
         ct = simplify_ldiv_op (ca, cb);
         break;
 
+#if 0
+        // Restore this case if short-circuit behavior can be preserved
+        // when needed.  See bug #54465.
       case octave_value::op_el_and:
       case octave_value::op_el_or:
         ct = simplify_and_or_op (ca, cb, t);
         break;
+#endif
 
       default:
         ct = octave_value::unknown_compound_binary_op;
         break;
       }
 
     tree_binary_expression *ret
       = (ct == octave_value::unknown_compound_binary_op
diff --git a/scripts/pkg/private/rebuild.m b/scripts/pkg/private/rebuild.m
--- a/scripts/pkg/private/rebuild.m
+++ b/scripts/pkg/private/rebuild.m
@@ -20,22 +20,26 @@
 ## -*- texinfo -*-
 ## @deftypefn {} {@var{descriptions} =} rebuild (@var{prefix}, @var{archprefix}, @var{list}, @var{files}, @var{verbose})
 ## Undocumented internal function.
 ## @end deftypefn
 
 function descriptions = rebuild (prefix, archprefix, list, files, verbose)
 
   if (isempty (files))
-    [dirlist, err, msg] = readdir (prefix);
-    if (err)
-      error ("couldn't read directory %s: %s", prefix, msg);
+    if (! exist (prefix, "dir"))
+      dirlist = [];
+    else
+      [dirlist, err, msg] = readdir (prefix);
+      if (err)
+        error ("couldn't read directory %s: %s", prefix, msg);
+      endif
+      ## the two first entries of dirlist are "." and ".."
+      dirlist([1,2]) = [];
     endif
-    ## the two first entries of dirlist are "." and ".."
-    dirlist([1,2]) = [];
   else
     old_descriptions = installed_packages (list, list);
     wd = pwd ();
     unwind_protect
       cd (prefix);
       dirlist = glob (strcat (files, '-*'));
     unwind_protect_cleanup
       cd (wd);
diff --git a/scripts/specfun/gammainc.m b/scripts/specfun/gammainc.m
--- a/scripts/specfun/gammainc.m
+++ b/scripts/specfun/gammainc.m
@@ -197,17 +197,17 @@ function y = gammainc (x, a, tail = "low
   endif
 
   ## For a < 2, x < 0, we increment a by 2 and use a recurrence formula after
   ## the computations.
 
   flag_a_small = todo & (abs (a) > 0) & (abs (a) < 2) & (x < 0);
   a(flag_a_small) += 2;
 
-  flag_s = (((x + 0.25 < a) | (x < 0) | (a < 5)) & (x > -20)) | (abs (x) < 1);
+  flag_s = (((x + 0.25 < a) | (x < 0)) & (x > -20)) | (abs (x) < 1);
 
   ## Case 8: x, a relatively small.
   idx = todo & flag_s;
   if (any (idx))
     y(idx) = gammainc_s (x(idx), a(idx), tail);
     todo(idx) = false;
   endif
 
@@ -332,17 +332,17 @@ function y = gammainc_an (x, a, tail)
     y .*= exp (-x);
   elseif (strcmp (tail, "scaledlower"))
     y = (1 - exp (-x) .* y) ./ D(x, a);
   elseif (strcmp (tail, "scaledupper"))
     y .*= exp (-x) ./ D(x, a);
   endif
 endfunction
 
-## x + 0.25 < a | x < 0 | x not real | abs(x) < 1 | a < 5.
+## x + 0.25 < a | x < 0 | abs(x) < 1.
 ## Numerical Recipes in Fortran 77 (6.2.5)
 ## series
 function y = gammainc_s (x, a, tail)
   if (strcmp (tail, "scaledlower") || strcmp (tail, "scaledupper"))
     y = ones (size (x), class (x));
     term = x ./ (a + 1);
   else
     ## Of course it is possible to scale at the end, but some tests fail.
@@ -489,17 +489,23 @@ endfunction
 %!         -10*eps);
 ## Matlab is better here than Octave
 %!assert (gammainc (751, 750, "upper"), 0.4805914320558831327179457887, -12*eps)
 %!assert (gammainc (200, 200, "upper"), 0.49059658199276367497217454, -5*eps)
 %!assert (gammainc (200, 200), 0.509403418007236325027825459574527043, -5*eps)
 %!assert (gammainc (200, 200, "scaledupper"), 17.3984438553791505135122900,
 %!       -2*eps)
 %!assert (gammainc (200, 200, "scaledlower"), 18.065406676779221643065, -7*eps)
-%!assert (gammainc (201, 200, "upper"), 0.46249244908276709524913736667, -7*eps)
+%!assert (gammainc (201, 200, "upper"), 0.46249244908276709524913736667,
+%!        -7*eps)
+%!assert <*54550> (gammainc (77, 2), 1)
+
+%!assert (gammainc (77, 2, "upper"), 0, -eps)
+%!assert (gammainc (1000, 3.1), 1)
+%!assert (gammainc (1000, 3.1, "upper"), 0)
 
 ## Test small argument
 %!assert (gammainc ([1e-05, 1e-07,1e-10,1e-14], 0.1), ...
 %!        [0.33239840504050, 0.20972940370977, 0.10511370061022, ...
 %!        0.041846517936723], 1e-13);
 
 %!assert (gammainc ([1e-05, 1e-07,1e-10,1e-14], 0.2), ...
 %!        [0.10891226058559, 0.043358823442178, 0.010891244210402, ...
diff --git a/scripts/statistics/zscore.m b/scripts/statistics/zscore.m
--- a/scripts/statistics/zscore.m
+++ b/scripts/statistics/zscore.m
@@ -38,32 +38,30 @@
 ## deviation.
 ##
 ## @seealso{mean, std, center}
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Subtract mean and divide by standard deviation
 
-function [z, mu, sigma] = zscore (x, opt, dim)
+function [z, mu, sigma] = zscore (x, opt = 0, dim)
 
   if (nargin < 1 || nargin > 3 )
     print_usage ();
   endif
 
   if (! (isnumeric (x) || islogical (x)))
     error ("zscore: X must be a numeric vector or matrix");
   endif
 
-  if (nargin < 2)
+  if (isempty (opt))
     opt = 0;
-  else
-    if (opt != 0 && opt != 1 || ! isscalar (opt))
-      error ("zscore: OPT must be empty, 0, or 1");
-    endif
+  elseif (! isscalar (opt) || (opt != 0 && opt != 1))
+    error ("zscore: normalization OPT must be empty, 0, or 1");
   endif
 
   nd = ndims (x);
   sz = size (x);
   if (nargin < 3)
     ## Find the first non-singleton dimension.
     (dim = find (sz > 1, 1)) || (dim = 1);
   else
@@ -92,17 +90,19 @@ function [z, mu, sigma] = zscore (x, opt
 endfunction
 
 
 %!assert (zscore ([1,2,3]), [-1,0,1])
 %!assert (zscore (single ([1,2,3])), single ([-1,0,1]))
 %!assert (zscore (int8 ([1,2,3])), [-1,0,1])
 %!assert (zscore (ones (3,2,2,2)), zeros (3,2,2,2))
 %!assert (zscore ([2,0,-2;0,2,0;-2,-2,2]), [1,0,-1;0,1,0;-1,-1,1])
+%!assert <*54531> (zscore ([1,2,3], [], 2), [-1,0,1])
 
 ## Test input validation
 %!error zscore ()
 %!error zscore (1, 2, 3)
-%!error zscore (['A'; 'B'])
-%!error zscore (1, ones (2,2))
-%!error zscore (1, 1.5)
-%!error zscore (1, 1, 0)
-%!error zscore (1, 3)
+%!error <X must be a numeric> zscore (['A'; 'B'])
+%!error <OPT must be empty, 0, or 1> zscore (1, ones (2,2))
+%!error <OPT must be empty, 0, or 1> zscore (1, 1.5)
+%!error <DIM must be an integer> zscore (1, [], ones (2,2))
+%!error <DIM must be an integer> zscore (1, [], 1.5)
+%!error <DIM must be .* a valid dimension> zscore (1, [], 0)
