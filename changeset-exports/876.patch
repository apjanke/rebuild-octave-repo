# HG changeset patch
# User jwe
# Date 783980337 0
#      Fri Nov 04 20:18:57 1994 +0000
# Node ID 0862b41633f3271e016b44dafd53891a8c73a768
# Parent  7dd6a8fedfed027962f30f5c663a1504e7273389
[project @ 1994-11-04 20:18:57 by jwe]

diff --git a/src/qzval.cc b/src/qzval.cc
--- a/src/qzval.cc
+++ b/src/qzval.cc
@@ -49,68 +49,68 @@ extern "C"
  
   int F77_FCN (qzit) (const int*, const int*, double*, double*, const
 		      double*, const long*, double*, int*);
  
   int F77_FCN (qzval) (const int*, const int*, double*, double*,
 		       double*, double*, double*, const long*, double*);
 }
 
-DEFUN_DLD_BUILTIN ("qzvalue", Fqzvalue, Sqzvalue, 3, 1,
+DEFUN_DLD_BUILTIN ("qzval", Fqzval, Sqzval, 3, 1,
   "X = qzval (A, B)\n\
 \n\
 compute generalized eigenvalues of the matrix pencil (A - lambda B).\n\
 A and B must be real matrices.")
 {
   Octave_object retval;
 
   int nargin = args.length ();
 
   if (nargin != 2 || nargout > 1)
     {
-      print_usage ("qzvalue");
+      print_usage ("qzval");
       return retval;
     }
 
   tree_constant arg_a = args(0);
   tree_constant arg_b = args(1);
 
   int a_nr = arg_a.rows();
   int a_nc = arg_a.columns();
 
   int b_nr = arg_b.rows();
   int b_nc = arg_b.columns();
 
-  int arg_a_is_empty = empty_arg ("qzvalue", a_nr, a_nc);
-  int arg_b_is_empty = empty_arg ("qzvalue", b_nr, b_nc);
+  int arg_a_is_empty = empty_arg ("qzval", a_nr, a_nc);
+  int arg_b_is_empty = empty_arg ("qzval", b_nr, b_nc);
 
   if (arg_a_is_empty > 0 && arg_b_is_empty > 0)
     return Matrix ();
   else if (arg_a_is_empty || arg_b_is_empty)
     return retval;
 
 // Arguments are not empty, so check for correct dimensions.
 
   if (a_nr != a_nc || b_nr != b_nc)
     {
-      gripe_square_matrix_required ("qzvalue: first two parameters:");
+      gripe_square_matrix_required ("qzval: first two parameters:");
       return retval;
     }
 
   if (a_nr != b_nr)
     {
       gripe_nonconformant ();
       return retval;
     }
   
 // Dimensions look o.k., let's solve the problem.
 
   if (arg_a.is_complex_type () || arg_b.is_complex_type ())
     {
-      error ("qzvalue: cannot yet do complex matrix arguments\n");
+      error ("qzval: cannot yet do complex matrix arguments\n");
       return retval;
     }
 
 // Do everything in real arithmetic.
 
   Matrix jnk (a_nr, a_nr, 0.0);
 
   ColumnVector alfr (a_nr);
@@ -138,17 +138,17 @@ A and B must be real matrices.")
   F77_FCN (qzhes) (&a_nr, &a_nr, ca.fortran_vec (),
 		   cb.fortran_vec (), &matz, jnk.fortran_vec ());
 
   F77_FCN (qzit) (&a_nr, &a_nr, ca.fortran_vec (),
 		  cb.fortran_vec (), &eps, &matz,
 		  jnk.fortran_vec (), &info);  
 
   if (info)
-    error ("qzvalue: trouble in qzit, info = %d", info);
+    error ("qzval: trouble in qzit, info = %d", info);
 
   F77_FCN (qzval) (&a_nr, &a_nr, ca.fortran_vec (),
 		   cb.fortran_vec (), alfr.fortran_vec (),
 		   alfi.fortran_vec (), beta.fortran_vec (),
 		   &matz, jnk.fortran_vec ());
 
 // Count and extract finite generalized eigenvalues.
 
