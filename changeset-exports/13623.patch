# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1313668412 -7200
#      Thu Aug 18 13:53:32 2011 +0200
# Node ID f03f4ac63569d76987e2c83691460137c9751b87
# Parent  e744593197ef314b63133921101118ab9605925c
Now scrolling down on new messages.

diff --git a/gui/src/IRCWidget.cpp b/gui/src/IRCWidget.cpp
--- a/gui/src/IRCWidget.cpp
+++ b/gui/src/IRCWidget.cpp
@@ -296,23 +296,25 @@ IRCWidget::showMessage (const QString& c
     }
   else
     {
       output =
         QString ("<b>%1:</b> %2").arg (sender).
         arg (htmlMessage);
     }
   m_chatWindow->append (output);
+  scrollToBottom ();
 }
 
 void
 IRCWidget::showNotification (const QString& sender, const QString& message)
 {
   Q_UNUSED (sender);
   m_chatWindow->append (QString ("<font color=\"#007700\">%1</font>").arg (message));
+  scrollToBottom ();
 }
 
 void
 IRCWidget::showChangeUserNickPopup ()
 {
   bool ok;
   QString newNick =
     QInputDialog::getText (this, QString ("Nickname"),
@@ -365,30 +367,39 @@ IRCWidget::sendMessage (QString message)
       m_octaveChannel->sendMessage (message);
       message.replace ("<", "&lt;");
       message.replace (">", "&gt;");
       message.replace ("\n", "<br>");
       m_chatWindow->append (QString ("<b>%1:</b> %2").
                             arg (m_ircClientInterface->nickname ()).arg (message));
     }
 
-  m_chatWindow->verticalScrollBar ()->setValue (m_chatWindow->verticalScrollBar ()->maximum ());
+  scrollToBottom ();
 }
 
 void
 IRCWidget::maybeIdentifyOnNickServ ()
 {
   if (m_autoIdentification)
     {
       m_ircClientInterface->sendPrivateMessage("NickServ", QString ("identify %1").
                                           arg (m_nickServPassword));
     }
 }
 
 void
+IRCWidget::scrollToBottom ()
+{
+  if (m_chatWindow->verticalScrollBar ())
+    {
+      m_chatWindow->verticalScrollBar ()->setValue (m_chatWindow->verticalScrollBar ()->maximum ());
+    }
+}
+
+void
 IRCWidget::focusInEvent (QFocusEvent *focusEvent)
 {
   Q_UNUSED (focusEvent);
   emit unreadMessages (false);
   QWidget::focusInEvent (focusEvent);
 
   m_chatMessageTextEdit->setFocus ();
 }
@@ -405,28 +416,31 @@ IRCWidget::handleLoggedIn (const QString
   m_chatWindow->setEnabled (true);
   m_chatMessageTextEdit->setFocus ();
 }
 
 void
 IRCWidget::handleNickChange (const QString &oldNick, const QString &newNick)
 {
   m_chatWindow->append (QString ("%1 is now known as %2.").arg (oldNick).arg (newNick));
+  scrollToBottom ();
 }
 
 void
 IRCWidget::handleUserJoined (const QString &nick, const QString &channel)
 {
   m_chatWindow->append (QString ("<i>%1 has joined %2.</i>").arg (nick).arg (channel));
+  scrollToBottom ();
 }
 
 void
 IRCWidget::handleUserQuit (const QString &nick, const QString &reason)
 {
   m_chatWindow->append (QString ("<i>%1 has quit.(%2).</i>").arg (nick).arg (reason));
+  scrollToBottom ();
 }
 
 void
 IRCWidget::handleUserNicknameChanged (const QString &nick)
 {
   m_nickButton->setText (nick);
   QSettings *settings = ResourceManager::instance ()->settings ();
   settings->setValue ("IRCNick", nick);
diff --git a/gui/src/IRCWidget.h b/gui/src/IRCWidget.h
--- a/gui/src/IRCWidget.h
+++ b/gui/src/IRCWidget.h
@@ -73,16 +73,17 @@ public slots:
   void handleUserJoined (const QString& nick, const QString& channel);
   void handleUserQuit (const QString& nick, const QString& reason);
   void handleUserNicknameChanged (const QString& nick);
 
   void showChangeUserNickPopup ();
   void sendMessage (QString);
 
   void maybeIdentifyOnNickServ ();
+  void scrollToBottom ();
 
 signals:
   void unreadMessages (bool yes);
 
 protected:
   void focusInEvent (QFocusEvent *focusEvent);
 
 private:
diff --git a/gui/src/terminal/QTerminalWidget.cpp b/gui/src/terminal/QTerminalWidget.cpp
--- a/gui/src/terminal/QTerminalWidget.cpp
+++ b/gui/src/terminal/QTerminalWidget.cpp
@@ -76,19 +76,16 @@ QTerminalWidget::QTerminalWidget (int st
   if (startnow && m_impl->m_session)
     {
       m_impl->m_session->run ();
     }
 
   setFocus (Qt::OtherFocusReason);
   m_impl->m_terminalDisplay->resize (this->size ());
   setFocusProxy (m_impl->m_terminalDisplay);
-
-  connect (m_impl->m_terminalDisplay, SIGNAL (keyPressedSignal (QKeyEvent*)),
-           this, SLOT (terminalKeyPressed (QKeyEvent*)));
 }
 
 void
 QTerminalWidget::initialize ()
 {
   m_impl->m_terminalDisplay->setSize (80, 40);
 
   QFont font = QApplication::font ();
@@ -107,19 +104,16 @@ QTerminalWidget::initialize ()
 QTerminalWidget::~QTerminalWidget ()
 {
   emit destroyed ();
 }
 
 void
 QTerminalWidget::openTeletype (int fd)
 {
-  //if (m_impl->m_session->isRunning ())
-  //  return;
-
   m_impl->m_session->openTeletype (fd);
 }
 
 void
 QTerminalWidget::setTextCodec (QTextCodec * codec)
 {
   if (!m_impl->m_session)
     return;
@@ -156,15 +150,8 @@ QTerminalWidget::resizeEvent (QResizeEve
   m_impl->m_terminalDisplay->update ();
 }
 
 void
 QTerminalWidget::sessionFinished ()
 {
   emit finished ();
 }
-
-void
-QTerminalWidget::terminalKeyPressed (QKeyEvent *keyEvent)
-{
-  Q_UNUSED (keyEvent);
-  emit scrollToBottomRequest ();
-}
diff --git a/gui/src/terminal/QTerminalWidget.h b/gui/src/terminal/QTerminalWidget.h
--- a/gui/src/terminal/QTerminalWidget.h
+++ b/gui/src/terminal/QTerminalWidget.h
@@ -46,24 +46,21 @@ public:
 
   /** Send some text to the terminal. */
   void sendText (const QString & text);
 
 signals:
   /** Emitted, when the current program has finished. */
   void finished ();
 
-  void scrollToBottomRequest ();
-
 protected:
   virtual void resizeEvent (QResizeEvent *);
 
 protected slots:
   void sessionFinished ();
-  void terminalKeyPressed (QKeyEvent *keyEvent);
 
 private:
   /** Performs initial operations on this widget. */
   void initialize ();
   TermWidgetImpl *m_impl;
 };
 
 #endif // QTERMINALWIDGET_H
