# HG changeset patch
# User Hartmut Gimpel <hg_code@gmx.de>
# Date 1423086544 -3600
#      Wed Feb 04 22:49:04 2015 +0100
# Node ID cf96961effdb7e0e334c97d9254ed18e6e1d8426
# Parent  12e13ca9f8beaa7ec1aa109d06c436c6495110fc
imformats.m: implement pretty print when nargout is zero (bug #44119)

diff --git a/scripts/image/imformats.m b/scripts/image/imformats.m
--- a/scripts/image/imformats.m
+++ b/scripts/image/imformats.m
@@ -74,17 +74,17 @@ function varargout = imformats (arg1, ar
   if (nargin > 3)
     print_usage ();
   endif
 
   mlock (); # prevent formats to be removed by "clear all"
   persistent formats = default_formats ();
 
   if (nargin == 0 && nargout == 0)
-    error ("imformats: pretty print not yet implemented.");
+    pretty_print_formats(formats);
   elseif (nargin >= 1)
     if (isstruct (arg1))
       arrayfun (@is_valid_format, arg1);
       ## FIXME: what is the return value in this situation?
       formats = arg1;
 
     elseif (ischar (arg1))
       switch (tolower (arg1))
@@ -276,16 +276,105 @@ endfunction
 function bool = isa_magick (coder, filename)
   bool = false;
   try
     info = __magick_ping__ (filename, 1);
     bool = strcmp (coder, info.Format);
   end_try_catch
 endfunction
 
+function pretty_print_formats(forms)
+
+  ## Compute the maximal length of the extensions column
+  h1 = "Extension";
+  ext_seperator = ", ";
+  max_ext_length = length (h1);
+  for m = 1:length (forms)
+    num_ext = length (forms(m).ext);
+    length_ext = sum (cellfun (@length, forms(m).ext));
+    ext_length = length_ext + (num_ext -1) * length(ext_seperator); 
+    if ext_length > max_ext_length
+      max_ext_length = ext_length;
+    endif
+  endfor
+  h1 = postpad(h1, max_ext_length, " ");
+  
+  ## define header names (none should be shorter than 3 characters)
+  h2 = "isa";
+  h3 = "Info";
+  h4 = "Read";
+  h5 = "Write";
+  h6 = "Alpha";
+  h7 = "Description";
+  
+  ## print a header
+  header = [h1, " | ", h2, " | ", h3, " | ", h4, " | ", h5, " | ", h6, " | ", h7, " "]; 
+  disp(header);
+  lineunder = [repmat("-", 1, length(h1)), "-+-", repmat("-", 1, length(h2)), "-+-", ...
+    repmat("-", 1, length(h3)), "-+-", repmat("-", 1, length(h4)), "-+-", ...
+    repmat("-", 1, length(h5)), "-+-", repmat("-", 1, length(h6)), "-+-", ...
+    repmat("-", 1, length(h7)), "-"];
+  disp(lineunder);
+  
+  ## print the formats
+  # ext (h1)
+  for m = 1:length(forms)
+    thisline = "";
+    num_exts = length(forms(m).ext);
+    ext_string = "";
+    for n = 1:num_exts
+      ext_string = [ext_string, forms(m).ext{n}];
+      if n < num_exts
+        ext_string = [ext_string, ext_seperator];
+      endif
+    endfor
+    ext_string = postpad(ext_string, length(h1), " ");
+    thisline = [thisline, ext_string, " | "];
+    # isa (h2)
+    if isempty(forms(m).isa)
+      thisline = [thisline, postpad(" no", length(h2), " ")];
+    else
+      thisline = [thisline, postpad("yes", length(h2), " ")];
+    endif
+    thisline = [thisline, " | "];
+    # info (h3)
+    if isempty(forms(m).info)
+    thisline = [thisline, postpad(" no", length(h3), " ")];
+    else
+      thisline = [thisline, postpad("yes", length(h3), " ")];
+    endif
+    thisline = [thisline, " | "];
+    # read (h4)
+    if isempty(forms(m).read)
+    thisline = [thisline, postpad(" no", length(h4), " ")];
+    else
+      thisline = [thisline, postpad("yes", length(h4), " ")];
+    endif
+    thisline = [thisline, " | "];
+    # write (h5)
+    if isempty(forms(m).write)
+    thisline = [thisline, postpad(" no", length(h5), " ")];
+    else
+      thisline = [thisline, postpad("yes", length(h5), " ")];
+    endif
+    thisline = [thisline, " | "];
+    # alpha (h6)
+    if isempty(forms(m).write)
+    thisline = [thisline, postpad(" no", length(h6), " ")];
+    else
+      thisline = [thisline, postpad("yes", length(h6), " ")];
+    endif
+    thisline = [thisline, " | "];
+    # description (h7)
+    thisline = [thisline, forms(m).description];
+    # print this format line
+    disp(thisline);
+  endfor
+endfunction
+
 ## When imread or imfinfo are called, the file must exist or the
 ## function defined by imformats will never be called.  Because
 ## of this, we must create a file for the tests to work.
 
 ## changing the function that does the reading
 %!testif HAVE_MAGICK
 %! fname = [tempname() ".jpg"];
 %! def_fmt = imformats ();
