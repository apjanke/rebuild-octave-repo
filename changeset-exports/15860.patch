# HG changeset patch
# User Torsten <ttl@justmail.de>
# Date 1356703268 -3600
#      Fri Dec 28 15:01:08 2012 +0100
# Node ID feba9ff6e6a83548942799bba8ae9fe73b21feaf
# Parent  0e393e744e5ed65976baee1844fd495331018b64
editor: add list of recently used files to the file menu

* file_editor_tab.cc (set_file_name): emit signal mru_add_file () for a new file
* file_editor_tab.h: new signal mru_add_file ()
* file_editor.cc (request_mru_open_file): new handler for opening a file from
  the mru-list, (handle_mru_add_file): slot for signal emitted from
  file_editor_tab; adds the new file to the mru list, (mru_menu_update): private
  function for updating the mru-list, (mru_menu_update): private function for
  updating the mru-list, (construct): implement mru-list menu and the related
  actions, (add_file_editor_tab): connect signal mru_add_file ()
* file-editor.h: definition of new slots, methods, string list for mru-list,
  and array for the related actions

diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -162,16 +162,18 @@ file_editor_tab::set_file_name (const QS
     _file_system_watcher.addPath (fileName);
   _file_name = fileName;
 
   // update lexer after _file_name change
   update_lexer ();
 
   // update the file editor with current editing directory
   emit editor_state_changed (_copy_available, QDir::cleanPath (_file_name));
+  // add the new file to the mru list
+  emit mru_add_file (QDir::cleanPath (_file_name));
 }
 
 void
 file_editor_tab::handle_margin_clicked(int margin, int line,
                                        Qt::KeyboardModifiers state)
 {
   if (margin == 1)
     {
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -84,16 +84,17 @@ public slots:
 
   void file_has_changed (const QString& fileName);
 
 signals:
   void file_name_changed (const QString& fileName);
   void editor_state_changed (bool copy_available, const QString& fileName);
   void tab_remove_request ();
   void add_filename_to_list (const QString& fileName);
+  void mru_add_file (const QString& file_name);
   void editor_check_conflict_save (const QString& saveFileName, bool remove_on_success);
   void process_octave_code (const QString& command);
 
 protected:
   void closeEvent (QCloseEvent *event);
   void set_file_name (const QString& fileName);
 
 private slots:
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -163,16 +163,18 @@ file_editor::request_open_file (const QS
         {
           QString result = fileEditorTab->load_file(openFileName);
           if (result == "")
             {
               // Supply empty title then have the file_editor_tab update
               // with full or short name.
               add_file_editor_tab (fileEditorTab, "");
               fileEditorTab->update_window_title (false);
+              // file already loaded, add file to mru list here
+              handle_mru_add_file(QDir::cleanPath (openFileName));
             }
           else
             {
               delete fileEditorTab;
               // Create a NonModal message about error.
               QMessageBox* msgBox = new QMessageBox (
                       QMessageBox::Critical, tr ("Octave Editor"),
                       tr ("Could not open file %1 for read:\n%2.").
@@ -181,16 +183,28 @@ file_editor::request_open_file (const QS
               msgBox->setWindowModality (Qt::NonModal);
               msgBox->setAttribute (Qt::WA_DeleteOnClose);
               msgBox->show ();
             }
         }
     }
 }
 
+// open a file from the mru list
+void
+file_editor::request_mru_open_file ()
+{
+  QAction *action = qobject_cast<QAction *>(sender ());
+  if (action)
+    {
+      request_open_file (action->data ().toString ());
+    }
+}
+
+
 void
 file_editor::check_conflict_save (const QString& saveFileName, bool remove_on_success)
 {
   // Have all file editor tabs signal what their file names are.
   fetFileNames.clear ();
   emit fetab_file_name_query (0);
 
   // If one of those names matches the desired name, that's a conflict.
@@ -353,16 +367,49 @@ file_editor::request_uncomment_selected_
 
 void
 file_editor::request_find ()
 {
   emit fetab_find (_tab_widget->currentWidget ());
 }
 
 void
+file_editor::handle_mru_add_file (const QString& file_name)
+{
+  _mru_files.removeAll (file_name);
+  _mru_files.prepend (file_name);
+  mru_menu_update ();
+}
+
+void
+file_editor::mru_menu_update ()
+{
+  int num_files = qMin (_mru_files.size(), int (MaxMRUFiles));
+  // configure and show active actions of mru-menu
+  for (int i = 0; i < num_files; ++i)
+    {
+      QString text = tr("&%1 %2").
+          arg ((i+1) % int (MaxMRUFiles)).arg (_mru_files.at (i));
+      _mru_file_actions[i]->setText (text);
+      _mru_file_actions[i]->setData (_mru_files.at (i));
+      _mru_file_actions[i]->setVisible (true);
+    }
+    // hide unused mru-menu entries
+    for (int j = num_files; j < MaxMRUFiles; ++j)
+      _mru_file_actions[j]->setVisible (false);
+    // delete entries in string-list beyond MaxMRUFiles
+    while (_mru_files.size () > MaxMRUFiles)
+      _mru_files.removeLast ();
+    // save actual mru-list in settings
+    QSettings *settings = resource_manager::get_settings ();
+    // FIXME -- what should happen if settings is 0?
+    settings->setValue ("editor/mru_file_list",_mru_files);
+}
+
+void
 file_editor::handle_file_name_changed (const QString& fileName)
 {
   QObject *fileEditorTab = sender();
   if (fileEditorTab)
     {
       for(int i = 0; i < _tab_widget->count (); i++)
         {
           if (_tab_widget->widget (i) == fileEditorTab)
@@ -516,16 +563,26 @@ file_editor::construct ()
   QAction *uncomment_selection_action = new QAction (tr ("&Uncomment Selected Text"),_tool_bar);
 
   QAction *find_action = new QAction (QIcon(":/actions/icons/find.png"),
                                       tr ("&Find and Replace"), _tool_bar);
 
   _run_action = new QAction (QIcon(":/actions/icons/artsbuilderexecute.png"),
                              tr("Save File And Run"), _tool_bar);
 
+  // the mru-list and an empty array of actions
+  QSettings *settings = resource_manager::get_settings ();
+  // FIXME -- what should happen if settings is 0?
+  _mru_files = settings->value ("editor/mru_file_list").toStringList ();
+  for (int i = 0; i < MaxMRUFiles; ++i)
+    {
+       _mru_file_actions[i] = new QAction (this);
+       _mru_file_actions[i]->setVisible (false);
+    }
+
   // some actions are disabled from the beginning
   _copy_action->setEnabled(false);
   _cut_action->setEnabled(false);
   _run_action->setShortcut                      (Qt::ControlModifier+ Qt::Key_R);
   _run_action->setShortcutContext               (Qt::WindowShortcut);
   next_bookmark_action->setShortcut             (Qt::Key_F2);
   next_bookmark_action->setShortcutContext      (Qt::WindowShortcut);
   previous_bookmark_action->setShortcut         (Qt::SHIFT + Qt::Key_F2);
@@ -561,16 +618,22 @@ file_editor::construct ()
 
   // menu bar
   QMenu *fileMenu = new QMenu (tr ("&File"), _menu_bar);
   fileMenu->addAction (new_action);
   fileMenu->addAction (open_action);
   fileMenu->addAction (save_action);
   fileMenu->addAction (save_as_action);
   fileMenu->addSeparator ();
+  QMenu *mru_file_menu = new QMenu (tr ("Open &Recent"), fileMenu);
+  for (int i = 0; i < MaxMRUFiles; ++i)
+    {
+      mru_file_menu->addAction (_mru_file_actions[i]);
+    }
+  fileMenu->addMenu (mru_file_menu);
   _menu_bar->addMenu (fileMenu);
 
   QMenu *editMenu = new QMenu (tr ("&Edit"), _menu_bar);
   editMenu->addAction (undo_action);
   editMenu->addAction (redo_action);
   editMenu->addSeparator ();
   editMenu->addAction (_copy_action);
   editMenu->addAction (_cut_action);
@@ -645,29 +708,34 @@ file_editor::construct ()
   connect (remove_all_breakpoints_action,
            SIGNAL (triggered ()), this, SLOT (request_remove_breakpoint ()));
   connect (comment_selection_action,
            SIGNAL (triggered ()), this, SLOT (request_comment_selected_text ()));
   connect (uncomment_selection_action,
            SIGNAL (triggered ()), this, SLOT (request_uncomment_selected_text ()));
   connect (find_action,
            SIGNAL (triggered ()), this, SLOT (request_find ()));
+  // The actions of the mru file menu
+  for (int i = 0; i < MaxMRUFiles; ++i)
+    {
+      connect(_mru_file_actions[i], SIGNAL (triggered ()), this, SLOT (request_mru_open_file ()));
+    }
+  mru_menu_update ();
   connect (_tab_widget,
            SIGNAL (tabCloseRequested (int)), this, SLOT (handle_tab_close_request (int)));
   connect (_tab_widget,
            SIGNAL (currentChanged(int)), this, SLOT (active_tab_changed (int)));
   // topLevelChanged is emitted when floating property changes (floating = true)
   connect (this, SIGNAL (topLevelChanged(bool)), this, SLOT(top_level_changed(bool)));
 
   resize (500, 400);
   setWindowIcon (QIcon(":/actions/icons/logo.png"));
   setWindowTitle ("Editor");
 
   //restore previous session
-  QSettings *settings = resource_manager::get_settings ();
   if (settings->value ("editor/restoreSession",true).toBool ())
     {
       QStringList sessionFileNames = settings->value("editor/savedSessionTabs", QStringList()).toStringList ();
 
       for (int n=0; n < sessionFileNames.count (); ++n)
         request_open_file (sessionFileNames.at (n));
     }
 }
@@ -683,16 +751,18 @@ file_editor::add_file_editor_tab (file_e
   connect (f, SIGNAL (editor_state_changed (bool, const QString&)),
            this, SLOT (handle_editor_state_changed (bool, const QString&)));
   connect (f, SIGNAL (tab_remove_request ()),
            this, SLOT (handle_tab_remove_request ()));
   connect (f, SIGNAL (add_filename_to_list (const QString&)),
            this, SLOT (handle_add_filename_to_list (const QString&)));
   connect (f, SIGNAL (editor_check_conflict_save (const QString&, bool)),
            this, SLOT (check_conflict_save (const QString&, bool)));
+  connect (f, SIGNAL (mru_add_file (const QString&)),
+           this, SLOT (handle_mru_add_file (const QString&)));
   connect (f, SIGNAL (process_octave_code (const QString&)),
            parent (), SLOT (handle_command_double_clicked (const QString&)));
   
   // Signals from the file_editor non-trivial operations
   connect (this, SIGNAL (fetab_settings_changed ()),
            f, SLOT (notice_settings ()));
   connect (this, SIGNAL (fetab_close_request (const QWidget*)),
            f, SLOT (conditional_close (const QWidget*)));
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -84,16 +84,17 @@ signals:
   void fetab_remove_all_breakpoints (const QWidget* ID);
   void fetab_comment_selected_text (const QWidget* ID);
   void fetab_uncomment_selected_text (const QWidget* ID);
   void fetab_find (const QWidget* ID);
 
 public slots:
   void request_new_file ();
   void request_open_file ();
+  void request_mru_open_file ();
 
   void request_undo ();
   void request_redo ();
   void request_copy ();
   void request_cut ();
   void request_paste ();
   void request_save_file ();
   void request_save_file_as ();
@@ -113,38 +114,45 @@ public slots:
   void request_find ();
 
   void handle_file_name_changed (const QString& fileName);
   void handle_tab_close_request (int index);
   void handle_tab_remove_request ();
   void handle_add_filename_to_list (const QString& fileName);
   void active_tab_changed (int index);
   void handle_editor_state_changed (bool enableCopy, const QString& fileName);
+  void handle_mru_add_file (const QString& file_name);
   void check_conflict_save (const QString& fileName, bool remove_on_success);
 
   /** Slot when floating property changes */
   void top_level_changed (bool floating);
 
   /** Tells the editor to react on changed settings. */
   void notice_settings ();
 
 private slots:
   void request_open_file (const QString& fileName);
 
 private:
   void construct ();
   void add_file_editor_tab(file_editor_tab *f, const QString &fn);
   void save_file_as (QWidget *fetabID = 0);
+  void mru_menu_update ();
 
   QStringList fetFileNames;
   QString ced;
 
   QMenuBar *        _menu_bar;
   QToolBar *        _tool_bar;
   QMenu *           _debug_menu;
   QAction *         _copy_action;
   QAction *         _cut_action;
   QAction *         _run_action;
   QTabWidget *      _tab_widget;
   int               _marker_breakpoint;
+
+  enum { MaxMRUFiles = 10 };
+  QAction *_mru_file_actions[MaxMRUFiles];
+  QStringList _mru_files;
+
 };
 
 #endif // FILEEDITORMDISUBWINDOW_H
