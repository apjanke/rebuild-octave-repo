# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1531506624 14400
#      Fri Jul 13 14:30:24 2018 -0400
# Node ID a15fe773db71111a8785c7a990395e38a6118738
# Parent  beef68dedef738e17802dc7f6ec9315a3e87d946
# Parent  77360cb4aaa07b8d324c20ee2cc30ca7d6d1d0a6
maint: Merge stable to default.

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -36,17 +36,17 @@ OCTAVE_MAJOR_VERSION=5
 OCTAVE_MINOR_VERSION=0
 OCTAVE_PATCH_VERSION=0
 
 dnl PACKAGE_VERSION is set by the AC_INIT VERSION argument.
 OCTAVE_VERSION="$PACKAGE_VERSION"
 
 OCTAVE_COPYRIGHT="Copyright (C) 2018 John W. Eaton and others."
 
-OCTAVE_RELEASE_DATE="2018-04-30"
+OCTAVE_RELEASE_DATE="2018-07-13"
 
 ## The "API version" is used as a way of checking that interfaces in the
 ## liboctave and libinterp libraries haven't changed in a backwardly
 ## incompatible way when loading .oct files.  A better way to do this is with
 ## library versioning, but not all systems support it.
 ##
 ## NOTE: This macro will be removed in a future version of Octave!
 ## If you insist on checking for features using a version number, use the
diff --git a/libinterp/corefcn/dot.cc b/libinterp/corefcn/dot.cc
--- a/libinterp/corefcn/dot.cc
+++ b/libinterp/corefcn/dot.cc
@@ -308,18 +308,18 @@ get_blkmm_dims (const dim_vector& dimx, 
     error ("blkmm: A and B dimensions don't match: (%s) and (%s)",
            dimx.str ().c_str (), dimy.str ().c_str ());
 }
 
 template <typename T>
 T
 do_blkmm (const octave_value& xov, const octave_value& yov)
 {
-  const T x = octave_value_extract<T> (xov); 
-  const T y = octave_value_extract<T> (yov); 
+  const T x = octave_value_extract<T> (xov);
+  const T y = octave_value_extract<T> (yov);
   F77_INT m, n, k, np;
   dim_vector dimz;
 
   get_blkmm_dims (x.dims (), y.dims (), m, n, k, np, dimz);
 
   T z (dimz);
 
   if (n != 0 && m != 0)
diff --git a/scripts/optimization/fsolve.m b/scripts/optimization/fsolve.m
--- a/scripts/optimization/fsolve.m
+++ b/scripts/optimization/fsolve.m
@@ -596,17 +596,17 @@ endfunction
 %! assert (norm (f) < tol);
 %! assert (norm (x - x_opt, Inf) < tol);
 
 %!test <*53991>
 %! A = @(lam) [0 1 0 0; 0 0 1 0; 0 0 0 1; 0 0 -lam^2 0];
 %! C = [1 0 0 0; 0 0 1 0];
 %! B = @(lam) [C*expm(A(lam)*0); C*expm(A(lam)*1)];
 %! detB = @(lam) det (B(lam));
-%! 
+%!
 %! [x, fvec, info] = fsolve (detB, 0);
 %! assert (x == 0);
 %! assert (fvec == -1);
 %! assert (info == -2);
 
 %!test <*53991>
 %! [x, fvec, info] = fsolve (@(x) 5*x, 0);
 %! assert (x == 0);
