# HG changeset patch
# User Rik <rik@octave.org>
# Date 1455903659 28800
#      Fri Feb 19 09:40:59 2016 -0800
# Node ID c53bfd6d8e08c95154de691469b5b35caed13b00
# Parent  61c96c37ce69d9410866b2d15e185c792d74f8f9
maint: Use American spelling for "behavior".

* Array.cc, randmtzig.c, file-ops.cc, oct-inttypes.h, cross.m, bicgstab.m,
kurtosis.m, skewness.m, build-sparse-tests.sh, __ilu__.cc, __magick_read__.cc:
Use American spelling for "behavior".

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -202,20 +202,20 @@ Summary of important user-visible change
 
     is now set to "on" by default instead of "error" by default and "on"
     for --traditional.
 
  ** The "backtrace" warning option is now enabled by default.  This
     change was made for Matlab compatibility.
 
  ** For compatibility with Matlab, the "ismatrix (x)" function now only
-    checks the dimension of "x".  The old behaviour of "ismatrix" is
+    checks the dimension of "x".  The old behavior of "ismatrix" is
     obtained by "isnumeric (x) || islogical (x) || ischar (x)".
 
- ** The nextpow2 function behaviour has been changed for vector inputs.
+ ** The nextpow2 function behavior has been changed for vector inputs.
     Instead of computing `nextpow2 (length (x))', it will now compute
     nextpow2 for each element of the input.  This change is Matlab
     compatible, and also prevents bugs for "vectors" of length 1.
 
  ** polyeig now returns a row vector of eigenvalues rather than a matrix
     with the eigenvalues on the diagonal.  This change was made for
     Matlab compatibility.
 
diff --git a/libinterp/corefcn/__ilu__.cc b/libinterp/corefcn/__ilu__.cc
--- a/libinterp/corefcn/__ilu__.cc
+++ b/libinterp/corefcn/__ilu__.cc
@@ -27,17 +27,17 @@ along with Octave; see the file COPYING.
 
 #include "oct-locbuf.h"
 
 #include "defun.h"
 #include "error.h"
 #include "parse.h"
 
 // That function implements the IKJ and JKI variants of Gaussian elimination to
-// perform the ILUTP decomposition.  The behaviour is controlled by milu
+// perform the ILUTP decomposition.  The behavior is controlled by milu
 // parameter.  If milu = ['off'|'col'] the JKI version is performed taking
 // advantage of CCS format of the input matrix.  If milu = 'row' the input
 // matrix has to be transposed to obtain the equivalent CRS structure so we can
 // work efficiently with rows.  In this case IKJ version is used.
 template <typename octave_matrix_t, typename T>
 void ilu_0 (octave_matrix_t& sm, const std::string milu = "off")
 {
 
@@ -523,17 +523,17 @@ Undocumented internal function.\n\
       param_list.append (octave_value (L.cols ()));
       SparseComplexMatrix eye =
         feval ("speye", param_list)(0).sparse_complex_matrix_value ();
       return ovl (L + eye, U);
     }
 }
 
 // That function implements the IKJ and JKI variants of gaussian elimination
-// to perform the ILUTP decomposition.  The behaviour is controlled by milu
+// to perform the ILUTP decomposition.  The behavior is controlled by milu
 // parameter.  If milu = ['off'|'col'] the JKI version is performed taking
 // advantage of CCS format of the input matrix.  Row pivoting is performed.
 // If milu = 'row' the input matrix has to be transposed to obtain the
 // equivalent CRS structure so we can work efficiently with rows.  In that
 // case IKJ version is used and column pivoting is performed.
 
 template <typename octave_matrix_t, typename T>
 void ilu_tp (octave_matrix_t& sm, octave_matrix_t& L, octave_matrix_t& U,
diff --git a/libinterp/dldfcn/__magick_read__.cc b/libinterp/dldfcn/__magick_read__.cc
--- a/libinterp/dldfcn/__magick_read__.cc
+++ b/libinterp/dldfcn/__magick_read__.cc
@@ -133,17 +133,17 @@ get_depth (Magick::Image& img)
       && img.channelDepth (Magick::GrayChannel)    == 1)
     depth = 1;
 
   return depth;
 }
 
 // We need this in case one of the sides of the image being read has
 // width 1. In those cases, the type will come as scalar instead of range
-// since that's the behaviour of the colon operator (1:1:1 will be a scalar,
+// since that's the behavior of the colon operator (1:1:1 will be a scalar,
 // not a range).
 static Range
 get_region_range (const octave_value& region)
 {
   Range output;
   if (region.is_range ())
     output = region.range_value ();
   else if (region.is_scalar_type ())
diff --git a/liboctave/array/Array.cc b/liboctave/array/Array.cc
--- a/liboctave/array/Array.cc
+++ b/liboctave/array/Array.cc
@@ -733,17 +733,17 @@ Array<T>::index (const idx_vector& i) co
       //   b(zeros (0,0)) gives []
       //   b(zeros (1,0)) gives zeros (0,1)
       //   b(zeros (0,1)) gives zeros (0,1)
       //   b(zeros (0,m)) gives zeros (0,m)
       //   b(zeros (m,0)) gives zeros (m,0)
       //   b(1:2) gives ones (2,1)
       //   b(ones (2)) gives ones (2) etc.
       //
-      // As you can see, the behaviour is weird, but the tests end up pretty
+      // As you can see, the behavior is weird, but the tests end up pretty
       // simple.  Nah, I don't want to suggest that this is ad hoc :)
 
       if (ndims () == 2 && n != 1 && rd.is_vector ())
         {
           if (columns () == 1)
             rd = dim_vector (il, 1);
           else if (rows () == 1)
             rd = dim_vector (1, il);
@@ -903,17 +903,17 @@ Array<T>::resize_fill_value (void) const
 template <typename T>
 void
 Array<T>::resize1 (octave_idx_type n, const T& rfv)
 {
   if (n < 0 || ndims () != 2)
     err_invalid_resize ();
 
   dim_vector dv;
-  // This is driven by Matlab's behaviour of giving a *row* vector
+  // This is driven by Matlab's behavior of giving a *row* vector
   // on some out-of-bounds assignments.  Specifically, Matlab
   // allows a(i) with out-of-bouds i when a is either of 0x0, 1x0,
   // 1x1, 0xN, and gives a row vector in all cases (yes, even the
   // last one, search me why).  Giving a column vector would make
   // much more sense (given the way trailing singleton dims are
   // treated).
   bool invalid = false;
   if (rows () == 0 || rows () == 1)
diff --git a/liboctave/numeric/randmtzig.c b/liboctave/numeric/randmtzig.c
--- a/liboctave/numeric/randmtzig.c
+++ b/liboctave/numeric/randmtzig.c
@@ -97,17 +97,17 @@ along with Octave; see the file COPYING.
 /*
    === Build instructions ===
 
    Compile with -DHAVE_GETTIMEOFDAY if the gettimeofday function is
    available.  This is not necessary if your architecture has
    /dev/urandom defined.
 
    Uses implicit -Di386 or explicit -DHAVE_X86_32 to determine if CPU=x86.
-   You can force X86 behaviour with -DUSE_X86_32=1, or suppress it with
+   You can force X86 behavior with -DUSE_X86_32=1, or suppress it with
    -DUSE_X86_32=0. You should also consider -march=i686 or similar for
    extra performance. Check whether -DUSE_X86_32=0 is faster on 64-bit
    x86 architectures.
 
    If you want to replace the Mersenne Twister with another
    generator then redefine randi32 appropriately.
 
    === Usage instructions ===
diff --git a/liboctave/system/file-ops.cc b/liboctave/system/file-ops.cc
--- a/liboctave/system/file-ops.cc
+++ b/liboctave/system/file-ops.cc
@@ -94,22 +94,22 @@ file_ops::instance_ok (void)
   return retval;
 }
 
 // The following tilde-expansion code was stolen and adapted from
 // readline.
 
 // The default value of tilde_additional_prefixes.  This is set to
 // whitespace preceding a tilde so that simple programs which do not
-// perform any word separation get desired behaviour.
+// perform any word separation get desired behavior.
 static const char *default_prefixes[] = { " ~", "\t~", ":~", 0 };
 
 // The default value of tilde_additional_suffixes.  This is set to
 // whitespace or newline so that simple programs which do not perform
-// any word separation get desired behaviour.
+// any word separation get desired behavior.
 static const char *default_suffixes[] = { " ", "\n", ":", 0 };
 
 // If non-null, this contains the address of a function that the
 // application wants called before trying the standard tilde
 // expansions.  The function is called with the text sans tilde, and
 // returns a malloc()'ed string which is the expansion, or a NULL
 // pointer if the expansion fails.
 file_ops::tilde_expansion_hook file_ops::tilde_expansion_preexpansion_hook = 0;
diff --git a/liboctave/util/oct-inttypes.h b/liboctave/util/oct-inttypes.h
--- a/liboctave/util/oct-inttypes.h
+++ b/liboctave/util/oct-inttypes.h
@@ -377,17 +377,17 @@ public:
   lshift (T x, int n) { return x << n; }
 
   static T
   minus (T)
   {
     return static_cast<T> (0);
   }
 
-  // the overflow behaviour for unsigned integers is guaranteed by C/C++,
+  // the overflow behavior for unsigned integers is guaranteed by C/C++,
   // so the following should always work.
   static T
   add (T x, T y)
   {
     T u = x + y;
     if (u < x)
       {
         u = octave_int_base<T>::max_val ();
@@ -543,17 +543,17 @@ public:
 #endif
   }
 
   static T
   abs (T x)
   {
 #if defined (OCTAVE_HAVE_FAST_INT_OPS)
     // This is close to how GCC does std::abs, but we can't just use std::abs,
-    // because its behaviour for INT_MIN is undefined and the compiler could
+    // because its behavior for INT_MIN is undefined and the compiler could
     // discard the following test.
     T m = x >> std::numeric_limits<T>::digits;
     T y = (x ^ m) - m;
     if (y < 0)
       {
         y = octave_int_base<T>::max_val ();
       }
     return y;
diff --git a/scripts/linear-algebra/cross.m b/scripts/linear-algebra/cross.m
--- a/scripts/linear-algebra/cross.m
+++ b/scripts/linear-algebra/cross.m
@@ -46,18 +46,18 @@
 
 function z = cross (x, y, dim)
 
   if (nargin != 2 && nargin != 3)
     print_usage ();
   endif
 
   if (ndims (x) < 3 && ndims (y) < 3 && nargin < 3)
-    ## COMPATIBILITY -- opposite behaviour for cross(row,col)
-    ## Swap x and y in the assignments below to get the matlab behaviour.
+    ## COMPATIBILITY -- opposite behavior for cross(row,col)
+    ## Swap x and y in the assignments below to get the matlab behavior.
     ## Better yet, fix the calling code so that it uses conformant vectors.
     if (columns (x) == 1 && rows (y) == 1)
       warning ("cross: taking cross product of column by row");
       y = y.';
     elseif (rows (x) == 1 && columns (y) == 1)
       warning ("cross: taking cross product of row by column");
       x = x.';
     endif
diff --git a/scripts/sparse/bicgstab.m b/scripts/sparse/bicgstab.m
--- a/scripts/sparse/bicgstab.m
+++ b/scripts/sparse/bicgstab.m
@@ -132,17 +132,17 @@ function [x, flag, relres, iter, resvec]
     norm_b = norm (b);
 
     res = b - Ax (x);
     rr = res;
 
     ## Vector of the residual norms for each iteration.
     resvec = norm (res) / norm_b;
 
-    ## Default behaviour we don't reach tolerance tol within maxit iterations.
+    ## Default behavior we don't reach tolerance tol within maxit iterations.
     flag = 1;
 
     for iter = 1:maxit
       rho_1 = rr' * res;
 
       if (iter == 1)
         p = res;
       else
diff --git a/scripts/statistics/base/kurtosis.m b/scripts/statistics/base/kurtosis.m
--- a/scripts/statistics/base/kurtosis.m
+++ b/scripts/statistics/base/kurtosis.m
@@ -140,17 +140,17 @@ endfunction
 
 %!assert (kurtosis ([-3, 0, 1]) == kurtosis ([-1, 0, 3]))
 %!assert (kurtosis (ones (3, 5)), NaN (1, 5))
 
 %!assert (kurtosis ([1:5 10; 1:5 10],  0, 2), 5.4377317925288901 * [1; 1], 8 * eps)
 %!assert (kurtosis ([1:5 10; 1:5 10],  1, 2), 2.9786509002956195 * [1; 1], 8 * eps)
 %!assert (kurtosis ([1:5 10; 1:5 10], [], 2), 2.9786509002956195 * [1; 1], 8 * eps)
 
-## Test behaviour on single input
+## Test behavior on single input
 %!assert (kurtosis (single ([1:5 10])), single (2.9786513), eps ("single"))
 %!assert (kurtosis (single ([1 2]), 0), single (NaN))
 
 ## Verify no "divide-by-zero" warnings
 %!test
 %! warning ("on", "Octave:divide-by-zero", "local");
 %! lastwarn ("");  # clear last warning
 %! kurtosis (1);
diff --git a/scripts/statistics/base/skewness.m b/scripts/statistics/base/skewness.m
--- a/scripts/statistics/base/skewness.m
+++ b/scripts/statistics/base/skewness.m
@@ -141,17 +141,17 @@ endfunction
 %! x = [0; 0; 0; 1];
 %! y = [x, 2*x];
 %! assert (skewness (y), 1.154700538379251 * [1 1], 5*eps);
 
 %!assert (skewness ([1:5 10; 1:5 10],  0, 2), 1.439590274527954 * [1; 1], eps)
 %!assert (skewness ([1:5 10; 1:5 10],  1, 2), 1.051328089232020 * [1; 1], 2*eps)
 %!assert (skewness ([1:5 10; 1:5 10], [], 2), 1.051328089232020 * [1; 1], 2*eps)
 
-## Test behaviour on single input
+## Test behavior on single input
 %!assert (skewness (single ([1:5 10])), single (1.0513283), eps ("single"))
 %!assert (skewness (single ([1 2]), 0), single (NaN))
 
 ## Verify no "divide-by-zero" warnings
 %!test
 %! warning ("on", "Octave:divide-by-zero", "local");
 %! lastwarn ("");  # clear last warning
 %! skewness (1);
diff --git a/test/build-sparse-tests.sh b/test/build-sparse-tests.sh
--- a/test/build-sparse-tests.sh
+++ b/test/build-sparse-tests.sh
@@ -169,17 +169,17 @@ cat <<EOF
 
 %!test # segfault test from edd@debian.org
 %! n = 510;
 %! sparse (kron ((1:n)', ones (n,1)), kron (ones (n,1), (1:n)'), ones (n));
 
 %% segfault tests from Fabian@isas-berlin.de
 %% Note that the last four do not fail, but rather give a warning
 %% of a singular matrix, which is consistent with the full matrix
-%% behaviour.  They are therefore disabled.
+%% behavior.  They are therefore disabled.
 %!testif HAVE_UMFPACK
 %! assert (inv (sparse ([1,1;1,1+i])), sparse ([1-1i,1i;1i,-1i]), 10*eps);
 %#!error inv ( sparse ([1,1;1,1]  ) );
 %#!error inv ( sparse ([0,0;0,1]  ) );
 %#!error inv ( sparse ([0,0;0,1+i]) );
 %#!error inv ( sparse ([0,0;0,0]  ) );
 
 %% error handling in constructor
