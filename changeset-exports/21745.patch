# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1463680768 14400
#      Thu May 19 13:59:28 2016 -0400
# Node ID bf1121302404ce7d85d3a09993a75f02a5f2722a
# Parent  e1be0b36fbedc92b6a86a559003c3700f202fbf0
use namespace for dir_path class

* pathsearch.h, pathsearch.cc: Put dir_path class in octave namespace
and rename to directory_path.  Change all uses.

diff --git a/libinterp/corefcn/defaults.cc b/libinterp/corefcn/defaults.cc
--- a/libinterp/corefcn/defaults.cc
+++ b/libinterp/corefcn/defaults.cc
@@ -253,20 +253,20 @@ void
 set_exec_path (const std::string& path_arg)
 {
   std::string tpath = path_arg;
 
   if (tpath.empty ())
     tpath = octave::sys::env::getenv ("OCTAVE_EXEC_PATH");
 
   if (tpath.empty ())
-    tpath = Vlocal_ver_arch_lib_dir + dir_path::path_sep_str ()
-            + Vlocal_api_arch_lib_dir + dir_path::path_sep_str ()
-            + Vlocal_arch_lib_dir + dir_path::path_sep_str ()
-            + Varch_lib_dir + dir_path::path_sep_str ()
+    tpath = Vlocal_ver_arch_lib_dir + octave::directory_path::path_sep_str ()
+            + Vlocal_api_arch_lib_dir + octave::directory_path::path_sep_str ()
+            + Vlocal_arch_lib_dir + octave::directory_path::path_sep_str ()
+            + Varch_lib_dir + octave::directory_path::path_sep_str ()
             + Vbin_dir;
 
   VEXEC_PATH = tpath;
 
   // FIXME: should we really be modifying PATH in the environment?
   // The way things are now, Octave will ignore directories set in the
   // PATH with calls like
   //
@@ -278,38 +278,38 @@ set_exec_path (const std::string& path_a
   // searching.
 
   // This is static so that even if set_exec_path is called more than
   // once, shell_path is the original PATH from the environment,
   // before we start modifying it.
   static std::string shell_path = octave::sys::env::getenv ("PATH");
 
   if (! shell_path.empty ())
-    tpath = shell_path + dir_path::path_sep_str () + tpath;
+    tpath = shell_path + octave::directory_path::path_sep_str () + tpath;
 
   octave::sys::env::putenv ("PATH", tpath);
 }
 
 void
 set_image_path (const std::string& path)
 {
   VIMAGE_PATH = ".";
 
   std::string tpath = path;
 
   if (tpath.empty ())
     tpath = octave::sys::env::getenv ("OCTAVE_IMAGE_PATH");
 
   if (! tpath.empty ())
-    VIMAGE_PATH += dir_path::path_sep_str () + tpath;
+    VIMAGE_PATH += octave::directory_path::path_sep_str () + tpath;
 
   tpath = genpath (Vimage_dir, "");
 
   if (! tpath.empty ())
-    VIMAGE_PATH += dir_path::path_sep_str () + tpath;
+    VIMAGE_PATH += octave::directory_path::path_sep_str () + tpath;
 }
 
 static void
 set_default_doc_cache_file (void)
 {
   if (Vdoc_cache_file.empty ())
     {
       std::string def_file = subst_octave_home (OCTAVE_DOC_CACHE_FILE);
diff --git a/libinterp/corefcn/dirfns.cc b/libinterp/corefcn/dirfns.cc
--- a/libinterp/corefcn/dirfns.cc
+++ b/libinterp/corefcn/dirfns.cc
@@ -579,30 +579,30 @@ Query or set the character used to separ
   int nargin = args.length ();
 
   if (nargin > 1)
     print_usage ();
 
   octave_value retval;
 
   if (nargout > 0 || nargin == 0)
-    retval = dir_path::path_sep_str ();
+    retval = octave::directory_path::path_sep_str ();
 
   if (nargin == 1)
     {
       std::string sval = args(0).xstring_value ("pathsep: argument must be a single character");
 
       switch (sval.length ())
         {
         case 1:
-          dir_path::path_sep_char (sval[0]);
+          octave::directory_path::path_sep_char (sval[0]);
           break;
 
         case 0:
-          dir_path::path_sep_char ('\0');
+          octave::directory_path::path_sep_char ('\0');
           break;
 
         default:
           error ("pathsep: argument must be a single character");
           break;
         }
     }
 
diff --git a/libinterp/corefcn/load-path.cc b/libinterp/corefcn/load-path.cc
--- a/libinterp/corefcn/load-path.cc
+++ b/libinterp/corefcn/load-path.cc
@@ -563,17 +563,17 @@ maybe_add_path_elts (std::string& path, 
 {
   std::string tpath = genpath (dir);
 
   if (! tpath.empty ())
     {
       if (path.empty ())
         path = tpath;
       else
-        path += dir_path::path_sep_str () + tpath;
+        path += octave::directory_path::path_sep_str () + tpath;
     }
 }
 
 void
 load_path::do_initialize (bool set_initial_path)
 {
   sys_path = "";
 
@@ -597,17 +597,17 @@ load_path::do_initialize (bool set_initi
 
   std::string xpath;
 
   if (! tpath.empty ())
     {
       xpath = tpath;
 
       if (! sys_path.empty ())
-        xpath += dir_path::path_sep_str () + sys_path;
+        xpath += octave::directory_path::path_sep_str () + sys_path;
     }
   else
     xpath = sys_path;
 
   do_set (xpath, false, true);
 }
 
 void
@@ -621,33 +621,33 @@ load_path::do_clear (void)
 }
 
 static std::list<std::string>
 split_path (const std::string& p)
 {
   std::list<std::string> retval;
 
   size_t beg = 0;
-  size_t end = p.find (dir_path::path_sep_char ());
+  size_t end = p.find (octave::directory_path::path_sep_char ());
 
   size_t len = p.length ();
 
   while (end != std::string::npos)
     {
       std::string elt = p.substr (beg, end-beg);
 
       if (! elt.empty ())
         retval.push_back (elt);
 
       beg = end + 1;
 
       if (beg == len)
         break;
 
-      end = p.find (dir_path::path_sep_char (), beg);
+      end = p.find (octave::directory_path::path_sep_char (), beg);
     }
 
   std::string elt = p.substr (beg);
 
   if (! elt.empty ())
     retval.push_back (elt);
 
   return retval;
@@ -1711,17 +1711,17 @@ load_path::do_path (void) const
   string_vector xdirs = load_path::dirs ();
 
   octave_idx_type len = xdirs.numel ();
 
   if (len > 0)
     xpath = xdirs[0];
 
   for (octave_idx_type i = 1; i < len; i++)
-    xpath += dir_path::path_sep_str () + xdirs[i];
+    xpath += octave::directory_path::path_sep_str () + xdirs[i];
 
   return xpath;
 }
 
 void
 print_types (std::ostream& os, int types)
 {
   bool printed_type = false;
@@ -1840,17 +1840,17 @@ load_path::do_display (std::ostream& os)
 
 // True if a path is contained in a path list separated by path_sep_char
 static bool
 in_path_list (const std::string& path_list, const std::string& path)
 {
   size_t ps = path.size ();
   size_t pls = path_list.size ();
   size_t pos = path_list.find (path);
-  char psc = dir_path::path_sep_char ();
+  char psc = octave::directory_path::path_sep_char ();
   while (pos != std::string::npos)
     {
       if ((pos == 0 || path_list[pos-1] == psc)
           && (pos + ps == pls || path_list[pos + ps] == psc))
         return true;
       else
         pos = path_list.find (path, pos + 1);
     }
@@ -2171,17 +2171,17 @@ genpath (const std::string& dirname, con
 
               if (! skip_p)
                 {
                   std::string nm = octave::sys::file_ops::concat (dirname, elt);
 
                   octave::sys::file_stat fs (nm);
 
                   if (fs && fs.is_dir ())
-                    retval += dir_path::path_sep_str () + genpath (nm, skip);
+                    retval += octave::directory_path::path_sep_str () + genpath (nm, skip);
                 }
             }
         }
     }
 
   return retval;
 }
 
@@ -2353,17 +2353,17 @@ No checks are made for duplicate element
 
   string_vector argv = args.make_argv ("path");
 
   if (nargin > 0)
     {
       std::string path = argv[1];
 
       for (int i = 2; i <= nargin; i++)
-        path += dir_path::path_sep_str () + argv[i];
+        path += octave::directory_path::path_sep_str () + argv[i];
 
       load_path::set (path, true);
 
       rehash_internal ();
     }
 
   if (nargout > 0)
     return ovl (load_path::path ());
diff --git a/libinterp/corefcn/load-path.h b/libinterp/corefcn/load-path.h
--- a/libinterp/corefcn/load-path.h
+++ b/libinterp/corefcn/load-path.h
@@ -268,17 +268,17 @@ public:
   static void execute_pkg_add (const std::string& dir);
   static void execute_pkg_del (const std::string& dir);
 
   static void set_command_line_path (const std::string& p)
   {
     if (command_line_path.empty ())
       command_line_path = p;
     else
-      command_line_path += dir_path::path_sep_str () + p;
+      command_line_path += octave::directory_path::path_sep_str () + p;
   }
 
   static std::string get_command_line_path (void)
   {
     return instance_ok () ? instance->do_get_command_line_path ()
                           : "";
   }
 
diff --git a/libinterp/corefcn/ls-mat5.cc b/libinterp/corefcn/ls-mat5.cc
--- a/libinterp/corefcn/ls-mat5.cc
+++ b/libinterp/corefcn/ls-mat5.cc
@@ -899,17 +899,17 @@ read_mat5_binary_element (std::istream& 
                     else
                       {
                         // Next just search for it anywhere in the system path
                         string_vector names(3);
                         names(0) = fname + ".oct";
                         names(1) = fname + ".mex";
                         names(2) = fname + ".m";
 
-                        dir_path p (load_path::system_path ());
+                        octave::directory_path p (load_path::system_path ());
 
                         str =
                           octave::sys::env::make_absolute (p.find_first_of (names));
 
                         size_t xpos
                           = str.find_last_of (octave::sys::file_ops::dir_sep_chars ());
 
                         std::string dir_name = str.substr (0, xpos);
diff --git a/libinterp/corefcn/utils.cc b/libinterp/corefcn/utils.cc
--- a/libinterp/corefcn/utils.cc
+++ b/libinterp/corefcn/utils.cc
@@ -248,27 +248,27 @@ empty_arg (const char * /* name */, octa
   return (nr == 0 || nc == 0);
 }
 
 // See if the given file is in the path.
 
 std::string
 search_path_for_file (const std::string& path, const string_vector& names)
 {
-  dir_path p (path);
+  octave::directory_path p (path);
 
   return octave::sys::env::make_absolute (p.find_first_of (names));
 }
 
 // Find all locations of the given file in the path.
 
 string_vector
 search_path_for_all_files (const std::string& path, const string_vector& names)
 {
-  dir_path p (path);
+  octave::directory_path p (path);
 
   string_vector sv = p.find_all_first_of (names);
 
   octave_idx_type len = sv.numel ();
 
   for (octave_idx_type i = 0; i < len; i++)
     sv[i] = octave::sys::env::make_absolute (sv[i]);
 
diff --git a/libinterp/octave-value/ov-fcn-handle.cc b/libinterp/octave-value/ov-fcn-handle.cc
--- a/libinterp/octave-value/ov-fcn-handle.cc
+++ b/libinterp/octave-value/ov-fcn-handle.cc
@@ -287,17 +287,17 @@ octave_fcn_handle::set_fcn (const std::s
       else
         {
           // Next just search for it anywhere in the system path
           string_vector names(3);
           names(0) = nm + ".oct";
           names(1) = nm + ".mex";
           names(2) = nm + ".m";
 
-          dir_path p (load_path::system_path ());
+          octave::directory_path p (load_path::system_path ());
 
           str = octave::sys::env::make_absolute (p.find_first_of (names));
 
           size_t xpos = str.find_last_of (octave::sys::file_ops::dir_sep_chars ());
 
           std::string dir_name = str.substr (0, xpos);
 
           octave_function *xfcn = load_fcn_from_file (str, dir_name, "", "", nm);
diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -400,17 +400,17 @@ read_classpath_txt (const std::string& f
 
           if (line.length () > 0)
             {
               if (line[0] == '#' || line[0] == '%')
                 ; // skip comments
               else
                 {
                   // prepend separator character
-                  classpath.append (dir_path::path_sep_str ());
+                  classpath.append (octave::directory_path::path_sep_str ());
 
                   // append content of line without whitespace
                   int last = line.find_last_not_of (" \t\f\v\r\n");
 
                   classpath.append (octave::sys::file_ops::tilde_expand (line.substr (0, last+1)));
                 }
             }
         }
diff --git a/liboctave/system/file-ops.h b/liboctave/system/file-ops.h
--- a/liboctave/system/file-ops.h
+++ b/liboctave/system/file-ops.h
@@ -37,18 +37,18 @@ namespace octave
   {
     struct
     OCTAVE_API
     file_ops
     {
     public:
 
       // Use a singleton class for dir_sep data members instead of just
-      // making them static members of the dir_path class so that we can
-      // ensure proper initialization.
+      // making them static members of the file_ops class so that we
+      // can ensure proper initialization.
 
       file_ops (char dir_sep_char_arg = 0,
                 const std::string& dir_sep_str_arg = std::string ("/"),
                 const std::string& dir_sep_chars_arg = std::string ("/"))
         : m_dir_sep_char (dir_sep_char_arg), m_dir_sep_str (dir_sep_str_arg),
           m_dir_sep_chars (dir_sep_chars_arg) { }
 
       typedef std::string (*tilde_expansion_hook) (const std::string&);
diff --git a/liboctave/util/pathsearch.cc b/liboctave/util/pathsearch.cc
--- a/liboctave/util/pathsearch.cc
+++ b/liboctave/util/pathsearch.cc
@@ -31,141 +31,144 @@ along with Octave; see the file COPYING.
 #include "lo-utils.h"
 #include "oct-env.h"
 #include "pathsearch.h"
 #include "singleton-cleanup.h"
 #include "str-vec.h"
 
 #include "kpse.cc"
 
-dir_path::static_members *dir_path::static_members::instance = 0;
+namespace octave
+{
+  directory_path::static_members *directory_path::static_members::instance = 0;
 
-dir_path::static_members::static_members (void)
-  : xpath_sep_char (SEPCHAR), xpath_sep_str (SEPCHAR_STR) { }
+  directory_path::static_members::static_members (void)
+    : xpath_sep_char (SEPCHAR), xpath_sep_str (SEPCHAR_STR) { }
 
-bool
-dir_path::static_members::instance_ok (void)
-{
-  bool retval = true;
+  bool
+  directory_path::static_members::instance_ok (void)
+  {
+    bool retval = true;
 
-  if (! instance)
-    {
-      instance = new static_members ();
+    if (! instance)
+      {
+        instance = new static_members ();
 
-      if (instance)
-        singleton_cleanup_list::add (cleanup_instance);
-    }
+        if (instance)
+          singleton_cleanup_list::add (cleanup_instance);
+      }
 
-  if (! instance)
-    (*current_liboctave_error_handler)
-      ("unable to create dir_path::static_members object!");
+    if (! instance)
+      (*current_liboctave_error_handler)
+        ("unable to create directory_path::static_members object!");
 
-  return retval;
-}
+    return retval;
+  }
 
-string_vector
-dir_path::elements (void)
-{
-  return initialized ? pv : string_vector ();
-}
+  string_vector
+  directory_path::elements (void)
+  {
+    return initialized ? pv : string_vector ();
+  }
 
-string_vector
-dir_path::all_directories (void)
-{
-  int count = 0;
-  string_vector retval;
+  string_vector
+  directory_path::all_directories (void)
+  {
+    int count = 0;
+    string_vector retval;
 
-  if (initialized)
-    {
-      int len = pv.numel ();
+    if (initialized)
+      {
+        int len = pv.numel ();
 
-      int nmax = len > 32 ? len : 32;
+        int nmax = len > 32 ? len : 32;
 
-      retval.resize (len);
+        retval.resize (len);
 
-      for (int i = 0; i < len; i++)
-        {
-          str_llist_type *elt_dirs = kpse_element_dirs (pv[i]);
+        for (int i = 0; i < len; i++)
+          {
+            str_llist_type *elt_dirs = kpse_element_dirs (pv[i]);
 
-          if (elt_dirs)
-            {
-              str_llist_elt_type *dir;
+            if (elt_dirs)
+              {
+                str_llist_elt_type *dir;
 
-              for (dir = *elt_dirs; dir; dir = STR_LLIST_NEXT (*dir))
-                {
-                  const std::string elt_dir = STR_LLIST (*dir);
+                for (dir = *elt_dirs; dir; dir = STR_LLIST_NEXT (*dir))
+                  {
+                    const std::string elt_dir = STR_LLIST (*dir);
 
-                  if (! elt_dir.empty ())
-                    {
-                      if (count == nmax)
-                        nmax *= 2;
+                    if (! elt_dir.empty ())
+                      {
+                        if (count == nmax)
+                          nmax *= 2;
 
-                      retval.resize (nmax);
+                        retval.resize (nmax);
 
-                      retval[count++] = elt_dir;
-                    }
-                }
-            }
-        }
+                        retval[count++] = elt_dir;
+                      }
+                  }
+              }
+          }
 
-      retval.resize (count);
-    }
+        retval.resize (count);
+      }
 
-  return retval;
-}
+    return retval;
+  }
 
-std::string
-dir_path::find_first (const std::string& nm)
-{
-  return initialized ? kpse_path_search (p, nm, true) : "";
-}
+  std::string
+  directory_path::find_first (const std::string& nm)
+  {
+    return initialized ? kpse_path_search (p, nm, true) : "";
+  }
 
-string_vector
-dir_path::find_all (const std::string& nm)
-{
-  return initialized ? kpse_all_path_search (p, nm) : string_vector ();
-}
+  string_vector
+  directory_path::find_all (const std::string& nm)
+  {
+    return initialized ? kpse_all_path_search (p, nm) : string_vector ();
+  }
 
-std::string
-dir_path::find_first_of (const string_vector& names)
-{
-  return initialized
-         ? kpse_path_find_first_of (p, names, true) : "";
-}
+  std::string
+  directory_path::find_first_of (const string_vector& names)
+  {
+    return initialized
+      ? kpse_path_find_first_of (p, names, true) : "";
+  }
 
-string_vector
-dir_path::find_all_first_of (const string_vector& names)
-{
-  return initialized
-         ? kpse_all_path_find_first_of (p, names) : string_vector ();
-}
+  string_vector
+  directory_path::find_all_first_of (const string_vector& names)
+  {
+    return initialized
+      ? kpse_all_path_find_first_of (p, names) : string_vector ();
+  }
 
-void
-dir_path::init (void)
-{
-  static bool octave_kpathsea_initialized = false;
+  void
+  directory_path::init (void)
+  {
+    static bool octave_kpathsea_initialized = false;
 
-  if (! octave_kpathsea_initialized)
-    {
-      std::string val = octave::sys::env::getenv ("KPATHSEA_DEBUG");
+    if (! octave_kpathsea_initialized)
+      {
+        std::string val = octave::sys::env::getenv ("KPATHSEA_DEBUG");
 
-      if (! val.empty ())
-        kpathsea_debug |= atoi (val.c_str ());
+        if (! val.empty ())
+          kpathsea_debug |= atoi (val.c_str ());
 
-      octave_kpathsea_initialized = true;
-    }
+        octave_kpathsea_initialized = true;
+      }
 
-  p = kpse_path_expand (p_default.empty ()
-                        ? p_orig : kpse_expand_default (p_orig, p_default));
+    p = kpse_path_expand (p_default.empty ()
+                          ? p_orig : kpse_expand_default (p_orig, p_default));
 
-  int count = 0;
-  for (kpse_path_iterator pi (p); pi != std::string::npos; pi++)
-    count++;
+    int count = 0;
+    for (kpse_path_iterator pi (p); pi != std::string::npos; pi++)
+      count++;
 
-  pv.resize (count);
+    pv.resize (count);
 
-  kpse_path_iterator pi (p);
+    kpse_path_iterator pi (p);
 
-  for (int i = 0; i < count; i++)
-    pv[i] = *pi++;
+    for (int i = 0; i < count; i++)
+      pv[i] = *pi++;
 
-  initialized = true;
+    initialized = true;
+  }
 }
diff --git a/liboctave/util/pathsearch.h b/liboctave/util/pathsearch.h
--- a/liboctave/util/pathsearch.h
+++ b/liboctave/util/pathsearch.h
@@ -24,151 +24,160 @@ along with Octave; see the file COPYING.
 #define octave_pathsearch_h 1
 
 #include "octave-config.h"
 
 #include <string>
 
 #include "str-vec.h"
 
-class
-OCTAVE_API
-dir_path
+namespace octave
 {
-public:
-
-  dir_path (const std::string& s = "",
-            const std::string& d = "")
-    : p_orig (s), p_default (d), initialized (false), p (), pv ()
-  {
-    if (! p_orig.empty ())
-      init ();
-  }
-
-  dir_path (const dir_path& dp)
-    : p_orig (dp.p_orig), p_default (dp.p_default),
-      initialized (dp.initialized), p (dp.p), pv (dp.pv)
-  { }
-
-  dir_path& operator = (const dir_path& dp)
-  {
-    p_orig = dp.p_orig;
-    p_default = dp.p_default;
-    initialized = dp.initialized;
-    p = dp.p;
-    pv = dp.pv;
-    return *this;
-  }
-
-  ~dir_path (void) { }
-
-  void set (const std::string& s)
-  {
-    initialized = false;
-    p_orig = s;
-    init ();
-  }
-
-  string_vector elements (void);
-  string_vector all_directories (void);
-
-  std::string find_first (const std::string&);
-  std::string find (const std::string& nm) { return find_first (nm); }
-
-  string_vector find_all (const std::string&);
-
-  std::string find_first_of (const string_vector& names);
-  string_vector find_all_first_of (const string_vector& names);
-
-  void rehash (void)
-  {
-    initialized = false;
-    init ();
-  }
-
-  static char path_sep_char (void)
-  {
-    return static_members::path_sep_char ();
-  }
-
-  static void path_sep_char (char c)
-  {
-    static_members::path_sep_char (c);
-  }
-
-  static std::string path_sep_str (void)
-  {
-    return static_members::path_sep_str ();
-  }
-
-  static bool is_path_sep (char c) { return c == path_sep_char (); }
-
-private:
-
-  // The colon separated list that we were given.
-  std::string p_orig;
-
-  // The default path.  If specified, replaces leading, trailing, or
-  // doubled colons in p_orig.
-  std::string p_default;
-
-  // TRUE means we've unpacked p.
-  bool initialized;
-
-  // A version of the colon separate list on which we have performed
-  // tilde, variable, and possibly default path expansion.
-  std::string p;
-
-  // The elements of the list.
-  string_vector pv;
-
-  void init (void);
-
-  // Use a singleton class for these data members instead of just
-  // making them static members of the dir_path class so that we can
-  // ensure proper initialization.
-
-  class OCTAVE_API static_members
+  class
+  OCTAVE_API
+  directory_path
   {
   public:
 
-    static_members (void);
+    directory_path (const std::string& s = "", const std::string& d = "")
+      : p_orig (s), p_default (d), initialized (false), p (), pv ()
+      {
+        if (! p_orig.empty ())
+          init ();
+      }
+
+    directory_path (const directory_path& dp)
+      : p_orig (dp.p_orig), p_default (dp.p_default),
+        initialized (dp.initialized), p (dp.p), pv (dp.pv)
+      { }
+
+    directory_path& operator = (const directory_path& dp)
+      {
+        p_orig = dp.p_orig;
+        p_default = dp.p_default;
+        initialized = dp.initialized;
+        p = dp.p;
+        pv = dp.pv;
+        return *this;
+      }
+
+    ~directory_path (void) { }
+
+    void set (const std::string& s)
+    {
+      initialized = false;
+      p_orig = s;
+      init ();
+    }
+
+    string_vector elements (void);
+    string_vector all_directories (void);
+
+    std::string find_first (const std::string&);
+    std::string find (const std::string& nm) { return find_first (nm); }
+
+    string_vector find_all (const std::string&);
+
+    std::string find_first_of (const string_vector& names);
+    string_vector find_all_first_of (const string_vector& names);
+
+    void rehash (void)
+    {
+      initialized = false;
+      init ();
+    }
 
     static char path_sep_char (void)
     {
-      return instance_ok () ? instance->xpath_sep_char : 0;
+      return static_members::path_sep_char ();
     }
 
     static void path_sep_char (char c)
     {
-      if (instance_ok ())
-        {
-          instance->xpath_sep_char = c;
-          instance->xpath_sep_str = std::string (1, c);
-        }
+      static_members::path_sep_char (c);
     }
 
     static std::string path_sep_str (void)
     {
-      return instance_ok () ? instance->xpath_sep_str : "";
+      return static_members::path_sep_str ();
     }
 
+    static bool is_path_sep (char c) { return c == path_sep_char (); }
+
   private:
 
-    static static_members *instance;
+    // The colon separated list that we were given.
+    std::string p_orig;
+
+    // The default path.  If specified, replaces leading, trailing, or
+    // doubled colons in p_orig.
+    std::string p_default;
 
-    static void cleanup_instance (void) { delete instance; instance = 0; }
+    // TRUE means we've unpacked p.
+    bool initialized;
+
+    // A version of the colon separate list on which we have performed
+    // tilde, variable, and possibly default path expansion.
+    std::string p;
+
+    // The elements of the list.
+    string_vector pv;
 
-    static bool instance_ok (void);
+    void init (void);
+
+    // Use a singleton class for these data members instead of just
+    // making them static members of the directory_path class so that
+    // we can ensure proper initialization.
 
-    // No copying!
+    class OCTAVE_API static_members
+    {
+    public:
+
+      static_members (void);
+
+      static char path_sep_char (void)
+      {
+        return instance_ok () ? instance->xpath_sep_char : 0;
+      }
 
-    static_members (const static_members&);
+      static void path_sep_char (char c)
+      {
+        if (instance_ok ())
+          {
+            instance->xpath_sep_char = c;
+            instance->xpath_sep_str = std::string (1, c);
+          }
+      }
 
-    static_members& operator = (const static_members&);
+      static std::string path_sep_str (void)
+      {
+        return instance_ok () ? instance->xpath_sep_str : "";
+      }
+
+    private:
+
+      static static_members *instance;
+
+      static void cleanup_instance (void) { delete instance; instance = 0; }
 
-    char xpath_sep_char;
+      static bool instance_ok (void);
+
+      // No copying!
+
+      static_members (const static_members&);
+
+      static_members& operator = (const static_members&);
+
+      char xpath_sep_char;
 
-    std::string xpath_sep_str;
+      std::string xpath_sep_str;
+    };
   };
-};
+}
+
+#if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
+
+OCTAVE_DEPRECATED ("use octave::directory_path instead")
+typedef octave::directory_path dir_path;
 
 #endif
+
+#endif
