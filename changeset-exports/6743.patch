# HG changeset patch
# User dbateman
# Date 1182193968 0
#      Mon Jun 18 19:12:48 2007 +0000
# Node ID f11fec9c06b0fc216f24e4a75b6ff385ec9cc479
# Parent  ebf96cc00ee9ce8cfe3dd9dd536f5c253a218a0e
[project @ 2007-06-18 19:12:48 by dbateman]

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,15 @@
+2007-06-18  David Bateman  <dbateman@free.fr>
+
+	* interpreter/interpimages.m: Simpler images to demonstrate
+	the continuity of the second derivative of splines.
+	* interpreter/interp.txi: Also change figures here.
+	* interpreter/Makefile.in: and here.
+	
 2007-06-18  Søren Hauberg  <hauberg@gmail.com>
 
         * interpreter/optim.txi: Added some introductory text to each
 	section.
 
         * interpreter/set.txi: Added some introductory text.
         * interpreter/octave.texi: Updated to reflect changes in set.txi.
 
diff --git a/doc/interpreter/Makefile.in b/doc/interpreter/Makefile.in
--- a/doc/interpreter/Makefile.in
+++ b/doc/interpreter/Makefile.in
@@ -38,17 +38,17 @@ EXAMPLE_FILES_NODIR = \
   mystruct.c \
   paramdemo.cc \
   stringdemo.cc \
   structdemo.cc \
   unwinddemo.cc
 
 EXAMPLE_FILES = $(addprefix $(top_srcdir)/examples/, $(EXAMPLE_FILES_NODIR))
 
-INTERPIMAGES = interpft interpn interpderiv
+INTERPIMAGES = interpft interpn interpderiv1 interpderiv2
 INTERPIMAGES_EPS = $(addsuffix .eps, $(INTERPIMAGES))
 INTERPIMAGES_PDF = $(addsuffix .pdf, $(INTERPIMAGES))
 INTERPIMAGES_PNG = $(addsuffix .png, $(INTERPIMAGES))
 
 SPARSEIMAGES_1 = gplot grid spmatrix spchol spcholperm
 SPARSEIMAGES_EPS = $(addsuffix .eps, $(SPARSEIMAGES_1))
 SPARSEIMAGES_PDF = $(addsuffix .pdf, $(SPARSEIMAGES_1))
 SPARSEIMAGES_PNG = $(addsuffix .png, $(SPARSEIMAGES_1))
diff --git a/doc/interpreter/interp.txi b/doc/interpreter/interp.txi
--- a/doc/interpreter/interp.txi
+++ b/doc/interpreter/interp.txi
@@ -13,41 +13,59 @@
 @node One-dimensional Interpolation
 @section One-dimensional Interpolation
 
 @DOCSTRING(interp1)
 
 There are some important differences between the various interpolation
 methods. The 'spline' method enforces that both the first and second
 derivatives of the interpolated values have a continuous derivative,
-whereas the other methods do not. This can be demonstrated by the code
+whereas the other methods do not. This means that the results of the
+'spline' method are generally smoother. If the function to be
+interpolated is in fact smooth, then 'spline' will give excellent
+results. However, if the function to be evaluated is in some manner
+discontinuous, then 'pchip' interpolation might give better results.
+
+This can be demonstrated by the code
 
 @example
 @group
-t = 0 : 0.3 : pi; dt = t(2)-t(1);
-n = length (t); k = 100; dti = dt*n/k;
-ti = t(1) + [0 : k-1]*dti;
-y = sin (4*t + 0.3) .* cos (3*t - 0.1);
-ddyc = diff(diff(interp1(t,y,ti,'cubic'))./dti)./dti;
-ddys = diff(diff(interp1(t,y,ti,'spline'))./dti)./dti;
-ddyp = diff(diff(interp1(t,y,ti,'pchip'))./dti)./dti;
-plot (ti(2:end-1), ddyc,'g+',ti(2:end-1),ddys,'b*', ...
-      ti(2:end-1),ddyp,'c^');
-legend('cubic','spline','pchip');
+t = -2:2;
+dt = 1;
+ti =-2:0.025:2;
+dti = 0.025;
+y = sign(t);
+ys = interp1(t,y,ti,'spline');
+yp = interp1(t,y,ti,'pchip');
+ddys = diff(diff(ys)./dti)./dti;
+ddyp = diff(diff(yp)./dti)./dti;
+figure(1);
+plot (ti, ys,'r-', ti, yp,'g-');
+legend('spline','pchip',4);
+figure(2);
+plot (ti, ddys,'r+', ti, ddyp,'g*');
+legend('spline','pchip');
 @end group
 @end example
 
 @ifnotinfo
 @noindent
-The result of which can be seen in @ref{fig:interpderiv}.
+The result of which can be seen in @ref{fig:interpderiv1} and
+@ref{fig:interpderiv2}.
 
-@float Figure,fig:interpderiv
-@image{interpderiv,8cm}
-@caption{Comparison of second derivative of interpolated values for
-various interpolation methods}
+@float Figure,fig:interpderiv1
+@image{interpderiv1,8cm}
+@caption{Comparison of 'phcip' and 'spline' interpolation methods for a 
+step function}
+@end float
+
+@float Figure,fig:interpderiv2
+@image{interpderiv2,8cm}
+@caption{Comparison of the second derivate of the 'phcip' and 'spline' 
+interpolation methods for a step function}
 @end float
 @end ifnotinfo
 
 This means that in general the 'spline' method results in smooth
 results. If the function to be interpolated is in fact smooth, then
 'spline' will give excellent results. However, if the function to be
 evaluated is in some manner discontinuous, then 'cubic' or 'pchip'
 interpolation might give better results.
diff --git a/doc/interpreter/interpimages.m b/doc/interpreter/interpimages.m
--- a/doc/interpreter/interpimages.m
+++ b/doc/interpreter/interpimages.m
@@ -15,27 +15,37 @@ function interpimages (nm, typ)
     f = @(x,y,z) x.^2 - y - z.^2;
     [xx, yy, zz] = meshgrid (x, y, z);
     v = f (xx,yy,zz);
     xi = yi = zi = -1:0.1:1;
     [xxi, yyi, zzi] = ndgrid (xi, yi, zi);
     vi = interpn(x, y, z, v, xxi, yyi, zzi, 'spline');
     mesh (zi, yi, squeeze (vi(1,:,:)));
     print (strcat (nm, ".", typ), strcat ("-d", typ))
-  elseif (strcmp (nm, "interpderiv"))
-    t = 0 : 0.3 : pi; dt = t(2)-t(1);
-    n = length (t); k = 100; dti = dt*n/k;
-    ti = t(1) + [0 : k-1]*dti;
-    y = sin (4*t + 0.3) .* cos (3*t - 0.1);
-    ddyc = diff(diff(interp1(t,y,ti,'cubic'))./dti)./dti;
+  elseif (strcmp (nm, "interpderiv1"))
+    t = -2:2;
+    dt = 1;
+    ti =-2:0.025:2;
+    dti = 0.025;
+    y = sign(t);
+    ys = interp1(t,y,ti,'spline');
+    yp = interp1(t,y,ti,'pchip');
+    plot (ti, ys,'r-', ti, yp,'g-');
+    legend('spline','pchip', 4);
+    print (strcat (nm, ".", typ), strcat ("-d", typ))
+  elseif (strcmp (nm, "interpderiv2"))
+    t = -2:2;
+    dt = 1;
+    ti =-2:0.025:2;
+    dti = 0.025;
+    y = sign(t);
     ddys = diff(diff(interp1(t,y,ti,'spline'))./dti)./dti;
     ddyp = diff(diff(interp1(t,y,ti,'pchip'))./dti)./dti;
-    plot (ti(2:end-1), ddyc,'g+',ti(2:end-1),ddys,'b*', ...
-          ti(2:end-1),ddyp,'c^');
-    legend('cubic','spline','pchip');
+    plot (ti(2:end-1),ddys,'r*', ti(2:end-1),ddyp,'g+');
+    legend('spline','pchip');
     print (strcat (nm, ".", typ), strcat ("-d", typ))
   endif
   bury_output ();  
 endfunction
 
 ## Use this function before plotting commands and after every call to
 ## print since print() resets output to stdout (unfortunately, gnpulot
 ## can't pop output as it can the terminal type).
