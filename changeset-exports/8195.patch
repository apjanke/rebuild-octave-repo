# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1223469333 -7200
#      Wed Oct 08 14:35:33 2008 +0200
# Node ID ec3a55bd876bfc212580ed8f065b9a6880f9f0f5
# Parent  aea271e60434557d06cb6f2a8c331b130f376585
fix integer exponentiation

diff --git a/liboctave/oct-inttypes.cc b/liboctave/oct-inttypes.cc
--- a/liboctave/oct-inttypes.cc
+++ b/liboctave/oct-inttypes.cc
@@ -530,17 +530,18 @@ pow (const octave_int<T>& a, const octav
 {
   octave_int<T> retval;
 
   octave_int<T> zero = octave_int<T> (0);
   octave_int<T> one = octave_int<T> (1);
 
   if (b == zero || a == one)
     retval = one;
-  else if (b < zero)
+  // the is_signed check is inserted twice to avoid compiler warnings
+  else if (std::numeric_limits<T>::is_signed && b < zero)
     {
       if (std::numeric_limits<T>::is_signed && a.value () == -1)
         retval = (b.value () % 2) ? a : one;
       else
         retval = zero;
     }
   else
     {
@@ -569,27 +570,35 @@ pow (const octave_int<T>& a, const octav
 template <class T>
 octave_int<T>
 pow (const double& a, const octave_int<T>& b)
 { return octave_int<T> (pow (a, b.double_value ())); }
 
 template <class T>
 octave_int<T>
 pow (const octave_int<T>& a, const double& b)
-{ return octave_int<T> (pow (a.double_value (), b)); }
+{ 
+  return ((b >= 0 && b < std::numeric_limits<T>::digits && b == xround (b))
+          ? pow (a, octave_int<T> (static_cast<T> (b)))
+          : octave_int<T> (pow (a.double_value (), b))); 
+}
 
 template <class T>
 octave_int<T>
 powf (const float& a, const octave_int<T>& b)
 { return octave_int<T> (pow (a, b.float_value ())); }
 
 template <class T>
 octave_int<T>
 powf (const octave_int<T>& a, const float& b)
-{ return octave_int<T> (pow (a.float_value (), b)); }
+{
+  return ((b >= 0 && b < std::numeric_limits<T>::digits && b == xround (b))
+          ? pow (a, octave_int<T> (static_cast<T> (b)))
+          : octave_int<T> (pow (a.double_value (), b))); 
+}
 
 #define INSTANTIATE_INTTYPE(T) \
   template class OCTAVE_API octave_int<T>; \
   template OCTAVE_API octave_int<T> pow (const octave_int<T>&, const octave_int<T>&); \
   template OCTAVE_API octave_int<T> pow (const double&, const octave_int<T>&); \
   template OCTAVE_API octave_int<T> pow (const octave_int<T>&, const double&); \
   template OCTAVE_API octave_int<T> powf (const float&, const octave_int<T>&); \
   template OCTAVE_API octave_int<T> powf (const octave_int<T>&, const float&); \
@@ -635,15 +644,17 @@ INSTANTIATE_INTTYPE (uint64_t);
 %! fail("int32(2**31+0.5)","warning",".*")
 %! warning(wstate.state, "Octave:int-convert-overflow");
 %!assert(int32(-2**31-0.5),intmin('int32'))
 %!test
 %! wstate = warning("query", "Octave:int-convert-overflow");
 %! warning("on", "Octave:int-convert-overflow");
 %! fail("int32(-2**31-0.5)","warning",".*")
 %! warning(wstate.state, "Octave:int-convert-overflow");
+%!assert((int64(2**62)+1)**1, int64(2**62)+1)
+%!assert((int64(2**30)+1)**2, int64(2**60+2**31) + 1)
 */
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
