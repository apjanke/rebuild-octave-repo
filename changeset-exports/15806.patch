# HG changeset patch
# User Rik <rik@octave.org>
# Date 1355768623 28800
#      Mon Dec 17 10:23:43 2012 -0800
# Node ID 01d4f742d75de87518d4e94e06a286d05ef92482
# Parent  420b5603cbbfb5c11f1e9d2c9f5a7a1f26c2f4be
doc: Re-organize and improve Java Interface documentation.

* doc/interpreter/java.txi: Add usejava, isjava functions, debug_java,
java_matrix_autoconversion, java_unsigned_autoconversion to docs.
Re-organize to put functions in logical order.  Add new "Dialog Box Functions"
node.

* doc/interpreter/system.txi: Remove usejava from list of system functions.

* libinterp/octave-value/ov-java.cc(FjavaObject, FjavaMethod,
Fjava_unsigned_autoconversion): Improve docstrings.

* scripts/java/javaArray.m: Tweak docstring.

* scripts/java/listdlg.m: Wrap long lines in docstring.  Improve
code example in docstring.

diff --git a/doc/interpreter/java.txi b/doc/interpreter/java.txi
--- a/doc/interpreter/java.txi
+++ b/doc/interpreter/java.txi
@@ -21,29 +21,66 @@
 
 @cindex using Octave with Java
 @cindex Java, using with Octave
 @cindex calling Java from Octave
 @cindex Java, calling from Octave
 @cindex calling Octave from Java
 @cindex  Octave, calling from Java
 
-The Java Interface is designed for calling Java functions from Octave.
-If you want to do the reverse and call Octave from Java, you might try
+The Java Interface is designed for calling Java functions from within Octave.
+If you want to do the reverse, and call Octave from within Java, try
 a library like 
 @code{javaOctave} (@url{http://kenai.com/projects/javaOctave}) or
 @code{joPas} (@url{http://jopas.sourceforge.net}). 
 
 @menu
-* Available Functions::         
+* Java Interface Functions::         
+* Dialog Box Functions::         
 * FAQ - Frequently asked Questions::  
 @end menu
 
-@node Available Functions
-@section Available Functions
+@node Java Interface Functions
+@section Java Interface Functions
+
+The following functions are the core of the Java Interface.  They provide
+a way to create a Java object, get and set its data fields, and call Java
+methods which return results to Octave. 
+
+@cindex object, creating a Java object
+@DOCSTRING(javaObject)
+
+@cindex fields, displaying available fields of a Java object
+FIXME: Need documentation on how fieldnames() is overloaded to return
+the methods of a Java object.
+
+@cindex field, returning value of Java object field
+FIXME: Need documentation on how to use structure-like indexing
+to get fields from Java object.
+
+@cindex field, setting value of Java object field
+FIXME: Need documentation on how to use structure-like indexing
+to set fields from Java object.
+
+@DOCSTRING(isjava)
+
+@cindex array, creating a Java array
+@DOCSTRING(javaArray)
+
+@cindex method, invoking a method of a Java object
+@DOCSTRING(javaMethod)
+
+@cindex methods, displaying available methods of a Java object
+FIXME: Need documentation on how methods() is overloaded to return
+the methods of a Java object.
+
+The following three functions are used to display and modify the
+class path used by the Java Virtual Machine.  This is entirely separate
+from Octave's PATH variable and is used by the JVM to find the correct
+code to execute.
 
 @cindex classpath, displaying
 @cindex classpath, dynamic
 @cindex dynamic classpath
 @cindex classpath, static
 @cindex static classpath
 @DOCSTRING(javaclasspath)
 
@@ -53,43 +90,32 @@ a library like
 @cindex classpath, dynamic
 @cindex dynamic classpath, adding new path
 @DOCSTRING(javaaddpath)
 
 @cindex classpath, removing path
 @cindex path, removing from classpath
 @DOCSTRING(javarmpath)
 
+The following four functions provide information and control over the interface
+between Octave and the Java Virtual Machine.
+
+@DOCSTRING(usejava)
+
 @cindex memory, displaying Java memory status
 @DOCSTRING(javamem)
 
-@cindex array, creating a Java array
-@DOCSTRING(javaArray)
+@DOCSTRING(java_matrix_autoconversion)
 
-@cindex object, creating a Java object
-@DOCSTRING(javaObject)
-
-@cindex method, invoking a method of a Java object
-@DOCSTRING(javaMethod)
+@DOCSTRING(java_unsigned_autoconversion)
 
-@cindex field, returning value of Java object field
-FIXME: Need documentation on how to use structure-like indexing
-to get fields from Java object.
-
-@cindex field, setting value of Java object field
-FIXME: Need documentation on how to use structure-like indexing
-to set fields from Java object.
+@DOCSTRING(debug_java)
 
-@cindex methods, displaying available methods of a Java object
-FIXME: Need documentation on how methods() is overloaded to return
-the methods of a Java object.
-
-@cindex fields, displaying available fields of a Java object
-FIXME: Need documentation on how fieldnames() is overloaded to return
-the methods of a Java object.
+@node Dialog Box Functions
+@section Dialog Box Functions
 
 The following functions all use the Java Interface to provide some form
 of dialog box.
 
 @cindex dialog, displaying a warning dialog
 @DOCSTRING(msgbox)
 
 @cindex dialog, displaying an error dialog
diff --git a/doc/interpreter/system.txi b/doc/interpreter/system.txi
--- a/doc/interpreter/system.txi
+++ b/doc/interpreter/system.txi
@@ -516,18 +516,16 @@ referred to as a @var{grp_struct}.
 @DOCSTRING(ver)
 
 @DOCSTRING(compare_versions)
 
 @DOCSTRING(license)
 
 @DOCSTRING(octave_config_info)
 
-@DOCSTRING(usejava)
-
 @DOCSTRING(getrusage)
 
 @node Hashing Functions
 @section Hashing Functions
 
 It is often necessary to find if two strings or files are
 identical.  This might be done by comparing them character by character
 and looking for differences.  However, this can be slow, and so comparing
diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -1874,30 +1874,29 @@ octave_java::do_java_set (JNIEnv* jni_en
           jni_env->CallStaticObjectMethod (helperClass, mID, jstring (cName), jstring (fName), jobject (jobj));
           check_exception (jni_env);
         }
     }
 
   return retval;
 }
 
-#endif
-// endif on HAVE_JAVA
-//
+#endif  // endif on HAVE_JAVA
+
 // DEFUN blocks below must be outside of HAVE_JAVA block so that
 // documentation strings are always available, even when functions are not.
 
 DEFUN (javaObject, args, ,
   "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{jobj} =} javaObject (@var{classname})\n\
 @deftypefnx {Built-in Function} {@var{jobj} =} javaObject (@var{classname}, @var{arg1}, @dots{})\n\
 Create a Java object of class @var{classsname}, by calling the class\n\
 constructor with the arguments @var{arg1}, @dots{}\n\
 \n\
-The first example creates an uninitialized object,\n\
+The first example below creates an uninitialized object,\n\
 while the second example supplies an initial argument to the constructor.\n\
 \n\
 @example\n\
 @group\n\
 x = javaObject (\"java.lang.StringBuffer\")\n\
 x = javaObject (\"java.lang.StringBuffer\", \"Initial string\")\n\
 @end group\n\
 @end example\n\
@@ -1937,18 +1936,18 @@ x = javaObject (\"java.lang.StringBuffer
   return octave_value ();
 #endif
 }
 
 DEFUN (javaMethod, args, ,
   "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{ret} =} javaMethod (@var{methodname}, @var{obj})\n\
 @deftypefnx {Built-in Function} {@var{ret} =} javaMethod (@var{methodname}, @var{obj}, @var{arg1}, @dots{})\n\
-Invoke the method @var{methodname} on the Java object @var{obj} with the arguments\n\
-@var{arg1}, @dots{}  For static methods, @var{obj} can be a string\n\
+Invoke the method @var{methodname} on the Java object @var{obj} with the\n\
+arguments @var{arg1}, @dots{}  For static methods, @var{obj} can be a string\n\
 representing the fully qualified name of the corresponding class.  The\n\
 function returns the result of the method invocation.\n\
 \n\
 When @var{obj} is a regular Java object, structure-like indexing can be\n\
 used as a shortcut syntax.  For instance, the two following statements are\n\
 equivalent\n\
 \n\
 @example\n\
@@ -2189,19 +2188,19 @@ variable value is restored when exiting 
 }
 
 DEFUN (java_unsigned_autoconversion, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} java_unsigned_autoconversion ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} java_unsigned_autoconversion (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} java_unsigned_autoconversion (@var{new_val}, \"local\")\n\
 Query or set the internal variable that controls how integer classes are\n\
-converted when Java matrix autoconversion is enabled.  When enabled, Java\n\
-arrays of class Byte or Integer are converted to matrices of class uint8 or\n\
-uint32 respectively.\n\
+converted when @code{java_matrix_autoconversion} is enabled.  When enabled,\n\
+Java arrays of class Byte or Integer are converted to matrices of class\n\
+uint8 or uint32 respectively.  The default value is true.\n\
 \n\
 When called from inside a function with the \"local\" option, the variable is\n\
 changed locally for the function and any subroutines it calls.  The original\n\
 variable value is restored when exiting the function.\n\
 @seealso{java_matrix_autoconversion, debug_java}\n\
 @end deftypefn")
 {
 #ifdef HAVE_JAVA
@@ -2231,17 +2230,17 @@ variable value is restored when exiting 
   return SET_INTERNAL_VARIABLE (debug_java);
 #else
   error ("debug_java: Octave was not compiled with Java interface");
   return octave_value ();
 #endif
 }
 
 // Outside of #ifdef HAVE_JAVA because it is desirable to be able to
-// merely test for the presence of a Java object without having Java installed. 
+// test for the presence of a Java object without having Java installed. 
 DEFUN (isjava, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} isjava (@var{x})\n\
 Return true if @var{x} is a Java object.\n\
 @seealso{class, typeinfo, isa, javaObject}\n\
 @end deftypefn")
 {
   octave_value retval;
diff --git a/scripts/java/javaArray.m b/scripts/java/javaArray.m
--- a/scripts/java/javaArray.m
+++ b/scripts/java/javaArray.m
@@ -25,16 +25,18 @@
 ## or a string containing the fully qualified class name.  The size of
 ## the object may also be specified with individual integer arguments
 ## @var{m}, @var{n}, etc.
 ##
 ## The generated array is uninitialized.  All elements are set to null
 ## if @var{classname} is a reference type, or to a default value (usually 0)
 ## if @var{classname} is a primitive type.
 ##
+## Sample code:
+##
 ## @example
 ## @group
 ## jary = javaArray ("java.lang.String", 2, 2);
 ## jary(1,1) = "Hello";
 ## @end group
 ## @end example
 ## @seealso{javaObject}
 ## @end deftypefn
diff --git a/scripts/java/listdlg.m b/scripts/java/listdlg.m
--- a/scripts/java/listdlg.m
+++ b/scripts/java/listdlg.m
@@ -59,20 +59,20 @@
 ## @item "CancelString"
 ##    a string used to label the Cancel button.  Default is "Cancel".
 ## @end table
 ##
 ## Example:
 ##
 ## @example
 ## @group
-## [sel, ok] = listdlg ("ListString", @{"An item", "another", "yet another"@}, "SelectionMode", "Multiple" );
+## [sel, ok] = listdlg ("ListString", @{"An item", "another", "yet another"@},
+##                      "SelectionMode", "Multiple");
 ## if (ok == 1)
-##   imax = numel (sel);
-##   for i = 1:1:imax
+##   for i = 1:numel (sel)
 ##     disp (sel(i));
 ##   endfor
 ## endif
 ## @end group
 ## @end example
 ##
 ## @seealso{errordlg, helpdlg, inputdlg, msgbox, questdlg, warndlg}
 ## @end deftypefn
