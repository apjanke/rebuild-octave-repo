# HG changeset patch
# User jwe
# Date 1059519932 0
#      Tue Jul 29 23:05:32 2003 +0000
# Node ID 32ac2bea0185217fc98e2d2bd943dcf292fde326
# Parent  f52db9e1296abfea93935dd927aa97dd8a412be7
[project @ 2003-07-29 23:05:32 by jwe]

diff --git a/libcruft/ChangeLog b/libcruft/ChangeLog
--- a/libcruft/ChangeLog
+++ b/libcruft/ChangeLog
@@ -1,12 +1,12 @@
 2003-07-29  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Makefile.in (install-lib): Use $(INSTALL), not
-	$(INSTALL_PROGRAM) for $(SHLBIN) files.
+	$(INSTALL_PROGRAM) for $(SHLLIB) files.
 
 2003-07-02  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Makefile.in (CLEAN_SUBDIRS): New variable.
 	(clean mostlyclean distclean maintainer-clean): Use it to ensure
 	cleaning in all subdirs, not just those we build in.
 
 	* Makerules.in (maintainer-clean, distclean): Don't use
diff --git a/libcruft/Makefile.in b/libcruft/Makefile.in
--- a/libcruft/Makefile.in
+++ b/libcruft/Makefile.in
@@ -127,23 +127,23 @@ install::
 	if $(STATIC_LIBS); then \
 	  rm -f $(DESTDIR)$(octlibdir)/libcruft.$(LIBEXT) ; \
 	  $(INSTALL_DATA) libcruft.$(LIBEXT) \
 	    $(DESTDIR)$(octlibdir)/libcruft.$(LIBEXT) ; \
 	  $(RANLIB) $(DESTDIR)$(octlibdir)/libcruft.$(LIBEXT) ; \
 	fi
 	if $(SHARED_LIBS); then \
 	  rm -f $(DESTDIR)$(octlibdir)/libcruft.$(SHLLIB_VER); \
-	  $(INSTALL_PROGRAM) \
+	  $(INSTALL) \
 	    libcruft.$(SHLLIB) $(DESTDIR)$(octlibdir)/libcruft.$(SHLLIB_VER); \
 	  rm -f $(DESTDIR)$(octlibdir)/libcruft.$(SHLLIB); \
 	  $(LN_S) libcruft.$(SHLLIB_VER) $(DESTDIR)$(octlibdir)/libcruft.$(SHLLIB); \
 	  if  test x$(SHLBIN) != x ; then \
 	    rm -f $(DESTDIR)$(bindir)/libcruft.$(SHLBIN); \
-	    $(INSTALL) \
+	    $(INSTALL_PROGRAM) \
 	      libcruft.$(SHLBIN) $(DESTDIR)$(bindir)/libcruft.$(SHLBIN); \
 	  fi; \
 	fi
 
 install-strip::
 	$(MAKE) INSTALL_PROGRAM="$(INSTALL_PROGRAM) -s" install
 
 uninstall::
diff --git a/liboctave/ArrayN.cc b/liboctave/ArrayN.cc
--- a/liboctave/ArrayN.cc
+++ b/liboctave/ArrayN.cc
@@ -224,25 +224,25 @@ ArrayN<T>::resize (const Array<int>& dim
 	  no_change = false;
 	  break;
 	}
     }
 
   if (no_change)
     return;
 
+  int old_len = length ();
+
   typename Array<T>::ArrayRep *old_rep = Array<T>::rep;
   const T *old_data = data ();
 
   Array<T>::rep = new typename Array<T>::ArrayRep (get_size (dims));
 
   Array<int> old_dimensions = dimensions;
 
-  int old_len = length ();
-
   dimensions = dims;
 
   Array<int> ra_idx (dimensions.length (), 0);
 
   for (int i = 0; i < old_len; i++)
     {
       if (index_in_bounds (ra_idx, dimensions))
 	xelem (ra_idx) = old_data[i];
@@ -282,24 +282,24 @@ ArrayN<T>::resize (const Array<int>& dim
     }
 
   if (no_change)
     return;
 
   typename Array<T>::ArrayRep *old_rep = Array<T>::rep;
   const T *old_data = data ();
 
+  int old_len = length ();
+
   int len = get_size (dims);
 
   Array<T>::rep = new typename Array<T>::ArrayRep (len);
 
   Array<int> old_dimensions = dimensions;
 
-  int old_len = length ();
-
   dimensions = dims;
 
   Array<int> ra_idx (dimensions.length (), 0);
 
   for (int i = 0; i < len; i++)
     Array<T>::rep->elem (i) = val;
 
   for (int i = 0; i < old_len; i++)
@@ -349,32 +349,120 @@ ArrayN<T>::insert (const ArrayN<T>& a, c
 
   return *this;
 }
 
 template <class T>
 std::ostream&
 operator << (std::ostream& os, const ArrayN<T>& a)
 {
-  Array<int> dims = a.dimensions;
+  Array<int> a_dims = a.dimensions;
+
+  int n_dims = a_dims.length ();
+
+  os << n_dims << "-dimensional array";
+
+  if (n_dims)
+    {
+      os << " (";
+
+      for (int i = 0; i < n_dims - 1; i++)
+	os << a_dims(i) << "x";
+
+      os << a_dims(n_dims-1) << ")";
+    }
+
+  os <<"\n\n";
 
-  int n_dims = dims.length ();
+  if (n_dims)
+    {
+      os << "data:";
+
+      Array<int> ra_idx (n_dims,0);
+
+      // Number of times the first 2d-array is to be displayed.
 
-  os << n_dims << "-dimensional array (";
+      int m = 1;
+      for (int i = 2; i < n_dims; i++)
+	m *= a_dims(i);
+
+      if (m == 1)
+        {
+          int rows = 0;
+          int cols = 0;
+
+          switch (n_dims)
+            {
+	    case 2:
+	      rows = a_dims(0);
+	      cols = a_dims(1);
 
-  for (int i = 0; i < n_dims - 1; i++)
-    os << dims(i) << "x";
-  os << dims(n_dims-1) << ")\n\n";
+	      for (int j = 0; j < rows; j++)
+		{
+		  ra_idx(0) = j;
+		  for (int k = 0; k < cols; k++)
+		    {
+		      ra_idx(1) = k;
+		      os << " " << a.elem(ra_idx);
+		    }
+		  os << "\n";
+		}
+	      break;
+
+	    case 1:
+	      rows = a_dims(0);
+
+	      for (int k = 0; k < rows; k++)
+		{
+		  ra_idx(0) = k;
+		  os << " " << a.elem(ra_idx);
+		}
+	      break;
+
+	    default:
+	      (*current_liboctave_error_handler)
+		("std::operator <<: problems with dimensions (= 0)!");
+	    }
 
-  os << "data:\n";
+          os << "\n";
+        }
+      else
+        {
+          int rows = a_dims(0);
+          int cols = a_dims(1);
+
+          for (int i = 0; i < m; i++)
+            {
+              os << "\n(:,:,";
+
+              for (int j = 2; j < n_dims - 1; j++)
+		os << ra_idx(j) + 1 << ",";
+
+	      os << ra_idx(n_dims - 1) + 1 << ") = \n";
 
-  int n = ArrayN<T>::get_size (dims);
+	      for (int j = 0; j < rows; j++)
+	        {
+	          ra_idx(0) = j;
+
+	          for (int k = 0; k < cols; k++)
+	            {
+		      ra_idx(1) = k;
+		      os << " " << a.elem(ra_idx);
+		    }
 
-  //  for (int i = 0; i < n; i++)
-  //    os << a.elem (i) << "\n";
+	          os << "\n";
+	        }
+
+	      os << "\n";
+
+	      if (i != m - 1)
+		increment_index (ra_idx, a_dims, 2);
+            }
+        }
+    }
 
   return os;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,12 +1,23 @@
+2003-07-29  Heine Kolltveit <kolltvei@idi.ntnu.no>
+
+	* ArrayN.cc (operator <<): Improve output readability.
+	(increment_index (Array<int>&, Array<int>&, int)) New function.
+
+2003-07-29  Petter Risholm	<risholm@stud.ntnu.no>
+
+	* ArrayN.cc (ArrayN<T>::resize (const Array<int>&, const T&)):
+	* ArrayN.cc (ArrayN<T>::resize (const Array<int>&)):
+	Initialize old_len before changing size.
+
 2003-07-29  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Makefile.in (install-lib): Use $(INSTALL), not
-	$(INSTALL_PROGRAM) for $(SHLBIN) files.
+	$(INSTALL_PROGRAM) for $(SHLLIB) files.
 
 2003-07-25  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* lo-mappers.cc (xmin, xmax): Handle NaN in a Matlab-compatible
 	way.  Handle NA in an R-compatible way.
 
 	* lo-cieee.c (lo_ieee_is_NaN_or_NA): Also check for lo_ieee_is_NA.
 	(lo_ieee_is_NA): Don't call isnan unless HAVE_ISNAN is defined.
diff --git a/liboctave/Makefile.in b/liboctave/Makefile.in
--- a/liboctave/Makefile.in
+++ b/liboctave/Makefile.in
@@ -242,23 +242,23 @@ install-lib:
 	if $(STATIC_LIBS); then \
 	  rm -f $(DESTDIR)$(octlibdir)/liboctave.$(LIBEXT); \
 	  $(INSTALL_DATA) liboctave.$(LIBEXT) \
 	    $(DESTDIR)$(octlibdir)/liboctave.$(LIBEXT); \
 	  $(RANLIB) $(DESTDIR)$(octlibdir)/liboctave.$(LIBEXT); \
 	fi
 	if $(SHARED_LIBS); then \
 	  rm -f $(DESTDIR)$(octlibdir)/liboctave.$(SHLLIB_VER); \
-	  $(INSTALL_PROGRAM) \
+	  $(INSTALL \
 	    liboctave.$(SHLLIB) $(DESTDIR)$(octlibdir)/liboctave.$(SHLLIB_VER); \
 	  rm -f $(DESTDIR)$(octlibdir)/liboctave.$(SHLLIB); \
 	  $(LN_S) liboctave.$(SHLLIB_VER) $(DESTDIR)$(octlibdir)/liboctave.$(SHLLIB); \
 	  if  test x$(SHLBIN) != x ; then \
 	    rm -f $(DESTDIR)$(bindir)/liboctave.$(SHLBIN); \
-	    $(INSTALL) \
+	    $(INSTALL_PROGRAM) \
 	      liboctave.$(SHLBIN) $(DESTDIR)$(bindir)/liboctave.$(SHLBIN); \
 	  fi; \
 	fi
 .PHONY: install-lib
 
 install-inc:
 	$(top_srcdir)/mkinstalldirs $(DESTDIR)$(octincludedir)/octave
 	for f in $(INCLUDES_FOR_INSTALL); do \
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,12 +1,12 @@
 2003-07-29  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Makefile.in (install-lib): Use $(INSTALL), not
-	$(INSTALL_PROGRAM) for $(SHLBIN) files.
+	$(INSTALL_PROGRAM) for $(SHLLIB) files.
 
 2003-07-29  Paul Kienzle <pkienzle@users.sf.net>
 
 	* Makefile.in: Don't need special system.c for Cygwin.
 	* oct-procbuf.cc: Use popen rather than fork/exec for Windows.
 
 2003-07-28  Paul Kienzle <pkienzle@users.sf.net>
 
diff --git a/src/Makefile.in b/src/Makefile.in
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -361,23 +361,23 @@ install-lib:
 	if $(STATIC_LIBS); then \
 	  rm -f $(DESTDIR)$(octlibdir)/liboctinterp.$(LIBEXT); \
 	  $(INSTALL_DATA) liboctinterp.$(LIBEXT) \
 	    $(DESTDIR)$(octlibdir)/liboctinterp.$(LIBEXT); \
 	  $(RANLIB) $(DESTDIR)$(octlibdir)/liboctinterp.$(LIBEXT); \
 	fi
 	if $(SHARED_LIBS); then \
 	  rm -f $(DESTDIR)$(octlibdir)/liboctinterp.$(SHLEXT_VER); \
-	  $(INSTALL_PROGRAM) liboctinterp.$(SHLLIB) \
+	  $(INSTALL) liboctinterp.$(SHLLIB) \
 	    $(DESTDIR)$(octlibdir)/liboctinterp.$(SHLLIB_VER); \
 	  rm -f $(DESTDIR)$(octlibdir)/liboctinterp.$(SHLLIB); \
 	  $(LN_S) liboctinterp.$(SHLLIB_VER) $(DESTDIR)$(octlibdir)/liboctinterp.$(SHLLIB); \
 	  if  test x$(SHLBIN) != x ; then \
 	    rm -f $(DESTDIR)$(bindir)/liboctinterp.$(SHLBIN); \
-	    $(INSTALL) \
+	    $(INSTALL_PROGRAM) \
 	      liboctinterp.$(SHLBIN) $(DESTDIR)$(bindir)/liboctinterp.$(SHLBIN); \
 	  fi; \
 	fi
 .PHONY: install-lib
 
 install-inc:
 	$(top_srcdir)/mkinstalldirs $(DESTDIR)$(octincludedir)/octave
 	for f in $(INCLUDES); do \
