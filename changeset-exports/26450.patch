# HG changeset patch
# User Rik <rik@octave.org>
# Date 1546702133 28800
#      Sat Jan 05 07:28:53 2019 -0800
# Branch stable
# Node ID af7faef288add83ca0878118b43d87aa62f862e8
# Parent  f8107140087ce17a7d41ff8556b20067726f9a03
lex.ll: Fix static analyzer detected issues (bug #55347).

* lex.ll: Use "unsigned int" as the correct resulting variable for "%o" and
"%x" sscanf conversions.

diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -853,17 +853,17 @@ ANY_INCLUDING_NL (.|{NL})
       }
   }
 
 <DQ_STRING_START>\\[0-7]{1,3} {
     curr_lexer->lexer_debug ("<DQ_STRING_START>\\\\[0-7]{1,3}");
 
     curr_lexer->m_current_input_column += yyleng;
 
-    int result;
+    unsigned int result;
     sscanf (yytext+1, "%o", &result);
 
     if (result > 0xff)
       {
         octave::token *tok
           = new octave::token (LEXICAL_ERROR,
                                "invalid octal escape sequence in character string",
                                curr_lexer->m_input_line_number,
@@ -877,17 +877,17 @@ ANY_INCLUDING_NL (.|{NL})
       curr_lexer->m_string_text += static_cast<unsigned char> (result);
   }
 
 <DQ_STRING_START>\\x[0-9a-fA-F]+ {
     curr_lexer->lexer_debug ("<DQ_STRING_START>\\\\x[0-9a-fA-F]+");
 
     curr_lexer->m_current_input_column += yyleng;
 
-    int result;
+    unsigned int result;
     sscanf (yytext+2, "%x", &result);
 
     // Truncate the value silently instead of checking the range like
     // we do for octal above.  This is to match C/C++ where any number
     // of digits is allowed but the value is implementation-defined if
     // it exceeds the range of the character type.
     curr_lexer->m_string_text += static_cast<unsigned char> (result);
   }
