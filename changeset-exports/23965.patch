# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1504023702 14400
#      Tue Aug 29 12:21:42 2017 -0400
# Node ID 6f0c2963674ba128ecf1a6b876da61df354798db
# Parent  1a0cbb573a67850edc63e75d885259f514ac6555
allow large ints to be read by C-style scanf (bug #51794)

* oct-stream.cc (base_stream::do_oscanf): For 'd', 'i', 'o', 'u', and
'x' conversions, handle 'h' and 'l' modifiers in the same way as in
do_scanf.

* io.tst: New tests.

diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -5052,39 +5052,103 @@ namespace octave
 
               if (! is)
                 quit = true;
             }
             break;
 
           case 'd': case 'i':
             {
-              int tmp;
-
-              if (octave_scan (is, *elt, &tmp))
+              switch (elt->modifier)
                 {
-                  if (! discard)
-                    retval = tmp;
+                case 'h':
+                  {
+                    int16_t tmp;
+                    if (octave_scan (is, *elt, &tmp))
+                      {
+                        if (! discard)
+                          retval = tmp;
+                      }
+                    else
+                      quit = true;
+                  }
+                  break;
+
+                case 'l':
+                  {
+                    int64_t tmp;
+                    if (octave_scan (is, *elt, &tmp))
+                      {
+                        if (! discard)
+                          retval = tmp;
+                      }
+                    else
+                      quit = true;
+                  }
+                  break;
+
+                default:
+                  {
+                    int32_t tmp;
+                    if (octave_scan (is, *elt, &tmp))
+                      {
+                        if (! discard)
+                          retval = tmp;
+                      }
+                    else
+                      quit = true;
+                  }
+                  break;
                 }
-              else
-                quit = true;
             }
             break;
 
           case 'o': case 'u': case 'x':
             {
-              long int tmp;
-
-              if (octave_scan (is, *elt, &tmp))
+              switch (elt->modifier)
                 {
-                  if (! discard)
-                    retval = tmp;
+                case 'h':
+                  {
+                    uint16_t tmp;
+                    if (octave_scan (is, *elt, &tmp))
+                      {
+                        if (! discard)
+                          retval = tmp;
+                      }
+                    else
+                      quit = true;
+                  }
+                  break;
+
+                case 'l':
+                  {
+                    uint64_t tmp;
+                    if (octave_scan (is, *elt, &tmp))
+                      {
+                        if (! discard)
+                          retval = tmp;
+                      }
+                    else
+                      quit = true;
+                  }
+                  break;
+
+                default:
+                  {
+                    uint32_t tmp;
+                    if (octave_scan (is, *elt, &tmp))
+                      {
+                        if (! discard)
+                          retval = tmp;
+                      }
+                    else
+                      quit = true;
+                  }
+                  break;
                 }
-              else
-                quit = true;
             }
             break;
 
           case 'e': case 'f': case 'g':
             {
               double tmp;
 
               if (octave_scan (is, *elt, &tmp))
diff --git a/test/io.tst b/test/io.tst
--- a/test/io.tst
+++ b/test/io.tst
@@ -307,16 +307,30 @@
 ## FIXME: scanf should return int64/uint64 if all conversions are %l[dioux].
 ## Until then cast to a double (and lose precision) for comparison.
 %!assert (sscanf ('9999999999999999999999', '%ld'), double (intmax ("int64")))
 %!assert (sscanf ('9999999999999999999999', '%li'), double (intmax ("int64")))
 %!assert (sscanf ('9999999999999999999999', '%lu'), double (intmax ("uint64")))
 %!assert (sscanf ('7777777777777777777777', '%lo'), double (intmax ("uint64")))
 %!assert (sscanf ('ffffffffffffffffffffff', '%lx'), double (intmax ("uint64")))
 
+## bug 51794
+%!assert (sscanf ('2147483647', '%d', 'C'), 2147483647)
+%!assert (sscanf ('2147483647', '%i', 'C'), 2147483647)
+%!assert (sscanf ('4294967295', '%u', 'C'), 4294967295)
+%!assert (sscanf ('37777777777', '%o', 'C'), 4294967295)
+%!assert (sscanf ('ffffffff', '%x', 'C'), 4294967295)
+## FIXME: scanf should return int64/uint64 if all conversions are %l[dioux].
+## Until then only test values that are within precision range of a double.
+%!assert (sscanf ('281474976710655', '%ld', 'C'), 281474976710655)
+%!assert (sscanf ('281474976710655', '%li', 'C'), 281474976710655)
+%!assert (sscanf ('281474976710655', '%lu', 'C'), 281474976710655)
+%!assert (sscanf ('7777777777777777', '%lo', 'C'), 281474976710655)
+%!assert (sscanf ('ffffffffffff', '%lx', 'C'), 281474976710655)
+
 %!test
 %! [val, count, msg, pos] = sscanf ("3I2", "%f");
 %! assert (val, 3);
 %! assert (count, 1);
 %! assert (msg, "");
 %! assert (pos, 2);
 
 %!test
