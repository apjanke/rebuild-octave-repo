# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1522846265 14400
#      Wed Apr 04 08:51:05 2018 -0400
# Branch stable
# Node ID 98596e4522bcf7f269709fdbadcce2458f3233ab
# Parent  e512eaba52066f5d4e4accf0d17d1ca0a445a82b
* pt-jit.cc: Fix typo from cset 078b795c5219.

diff --git a/libinterp/parse-tree/pt-jit.cc b/libinterp/parse-tree/pt-jit.cc
--- a/libinterp/parse-tree/pt-jit.cc
+++ b/libinterp/parse-tree/pt-jit.cc
@@ -62,18 +62,20 @@ along with Octave; see the file COPYING.
 // In LLVM 3.8.x and later, we use createBasicAAWrapperPass from:
 #  include <llvm/Analysis/BasicAliasAnalysis.h>
 #endif
 // In LLVM 3.7.x and earlier, we use createBasicAliasAnalysisPass
 // from llvm/Analysis/Passes.h (already included above)
 
 #include <llvm/Bitcode/ReaderWriter.h>
 #include <llvm/ExecutionEngine/ExecutionEngine.h>
-// #include <llvm/ExecutionEngine/JIT.h>  // old JIT, LLVM < 3.6.0
-#include <llvm/ExecutionEngine/MCJIT.h>   // MCJIT, LLVM >= 3.0.0
+// old JIT, LLVM < 3.6.0
+// #include <llvm/ExecutionEngine/JIT.h>
+// MCJIT, LLVM >= 3.0.0
+#include <llvm/ExecutionEngine/MCJIT.h>
 #include "llvm/ExecutionEngine/SectionMemoryManager.h"
 
 #if defined (LEGACY_PASSMANAGER)
 #  include <llvm/IR/LegacyPassManager.h>
 #else
 #  include <llvm/PassManager.h>
 #endif
 
@@ -1355,18 +1357,20 @@ namespace octave
         builder.SetInsertPoint (m_prelude);
 
         // The jitted function will have only one function argument, of
         // octave_base_value** type
         llvm::Value *arg = &*(m_function->arg_begin ());
 
         for (size_t i = 0; i < m_argument_vec.size (); ++i)
           {
-            // llvm::Value *loaded_arg = builder.CreateConstInBoundsGEP1_32 (arg, i);         // LLVM <= 3.6
-            llvm::Value *loaded_arg = builder.CreateConstInBoundsGEP1_32 (arg_type, arg, i);  // LLVM >= 3.7
+            // LLVM <= 3.6
+            // llvm::Value *loaded_arg = builder.CreateConstInBoundsGEP1_32 (arg, i);
+            // LLVM >= 3.7
+            llvm::Value *loaded_arg = builder.CreateConstInBoundsGEP1_32 (arg_type, arg, i);
 
             m_arguments[m_argument_vec[i].first] = loaded_arg;
           }
 
         convert (blocks, constants);
       }
     catch (const jit_fail_exception& e)
       {
@@ -2554,17 +2558,17 @@ namespace octave
 
         llvm::Value *wrapper_arg = wrapper.argument (builder, 0);
         std::vector<llvm::Value *> raw_args (nargs);
         for (size_t i = 0; i < nargs; ++i)
           {
             llvm::Value *arg;
             // LLVM <= 3.6
             // arg = builder.CreateConstInBoundsGEP1_32 (wrapper_arg, i);
-            / / LLVM >= 3.7
+            // LLVM >= 3.7
             arg = builder.CreateConstInBoundsGEP1_32 (any_t->to_llvm (),
                                                       wrapper_arg, i);
 
             arg = builder.CreateLoad (arg);
 
             jit_type *arg_type = m_argument_types[i];
             const jit_function& cast = jit_typeinfo::cast (arg_type, any_t);
             raw_args[i] = cast.call (builder, arg);
