# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1362523837 18000
#      Tue Mar 05 17:50:37 2013 -0500
# Node ID 810a71122c252f4e552c7292c799eb7886a461a7
# Parent  2c5c538be353679c964ef9204c451d75046a5ca4
move more global variables to octave_lexical_feedback class

* help.cc (raw_help_from_file): Don't protect and set
reading_script_file.
* octave.cc (likewise):
* oct_parse.in.yy (parse_fcn_file): Don't protect
reading_script_file.
* input.cc (get_debug_input): Don't protect and set reading_fcn_file,
reading_classdef_file, or reading_script_file.
* lex.h, lex.ll, input.h, input.cc (reading_fcn_file,
reading_classdef_file, reading_script_file): Declare as members of the
lexical_feedback class.  Change all uses.
(lexical_feedback::lexical_feedback, lexical_feedback::reset):
Initialize and set them.

diff --git a/libinterp/interpfcn/help.cc b/libinterp/interpfcn/help.cc
--- a/libinterp/interpfcn/help.cc
+++ b/libinterp/interpfcn/help.cc
@@ -897,21 +897,16 @@ raw_help_from_symbol_table (const std::s
 }
 
 static bool
 raw_help_from_file (const std::string& nm, std::string& h,
                     std::string& file, bool& symbol_found)
 {
   bool retval = false;
 
-  // FIXME -- this is a bit of a kluge...
-  unwind_protect frame;
-  frame.protect_var (reading_script_file);
-  reading_script_file = true;
-
   h = get_help_from_file (nm, symbol_found, file);
 
   if (h.length () > 0)
     retval = true;
 
   return retval;
 }
 
diff --git a/libinterp/interpfcn/input.cc b/libinterp/interpfcn/input.cc
--- a/libinterp/interpfcn/input.cc
+++ b/libinterp/interpfcn/input.cc
@@ -96,31 +96,22 @@ static char Vcompletion_append_char = ' 
 
 // TRUE means that input is coming from a file that was named on
 // the command line.
 bool input_from_command_line_file = false;
 
 // TRUE means that stdin is a terminal, not a pipe or redirected file.
 bool stdin_is_tty = false;
 
-// TRUE means we're parsing a function file.
-bool reading_fcn_file = false;
-
-// TRUE means we're parsing a classdef file.
-bool reading_classdef_file = false;
-
 // Simple name of function file we are reading.
 std::string curr_fcn_file_name;
 
 // Full name of file we are reading.
 std::string curr_fcn_file_full_name;
 
-// TRUE means we're parsing a script file.
-bool reading_script_file = false;
-
 // TRUE means this is an interactive shell.
 bool interactive = false;
 
 // TRUE means the user forced this shell to be interactive (-i).
 bool forced_interactive = false;
 
 // Should we issue a prompt?
 int promptflag = 1;
@@ -146,17 +137,17 @@ static std::string last_debugging_comman
 static bool Vgud_mode = false;
 
 // The filemarker used to separate filenames from subfunction names
 char Vfilemarker = '>';
 
 static void
 do_input_echo (const std::string& input_string)
 {
-  int do_echo = reading_script_file ?
+  int do_echo = CURR_LEXER->reading_script_file ?
     (Vecho_executing_commands & ECHO_SCRIPTS)
       : (Vecho_executing_commands & ECHO_CMD_LINE) && ! forced_interactive;
 
   if (do_echo)
     {
       if (forced_interactive)
         {
           if (promptflag > 0)
@@ -522,35 +513,26 @@ get_debug_input (const std::string& prom
     std::cerr << msg << std::endl;
 
   unwind_protect frame;
 
   frame.protect_var (VPS1);
   VPS1 = prompt;
 
   if (! (interactive || forced_interactive)
-      || (reading_fcn_file
-          || reading_classdef_file
-          || reading_script_file
+      || (CURR_LEXER->reading_fcn_file
+          || CURR_LEXER->reading_classdef_file
+          || CURR_LEXER->reading_script_file
           || CURR_LEXER->input_from_eval_string ()
           || input_from_startup_file
           || input_from_command_line_file))
     {
       frame.protect_var (forced_interactive);
       forced_interactive = true;
 
-      frame.protect_var (reading_fcn_file);
-      reading_fcn_file = false;
-
-      frame.protect_var (reading_classdef_file);
-      reading_classdef_file = false;
-
-      frame.protect_var (reading_script_file);
-      reading_script_file = false;
-
       frame.protect_var (input_from_startup_file);
       input_from_startup_file = false;
 
       frame.protect_var (input_from_command_line_file);
       input_from_command_line_file = false;
     }
 
   // octave_parser constructor sets this for us.
diff --git a/libinterp/interpfcn/input.h b/libinterp/interpfcn/input.h
--- a/libinterp/interpfcn/input.h
+++ b/libinterp/interpfcn/input.h
@@ -39,31 +39,22 @@ extern OCTINTERP_API FILE *get_input_fro
 
 // TRUE means that input is coming from a file that was named on
 // the command line.
 extern bool input_from_command_line_file;
 
 // TRUE means that stdin is a terminal, not a pipe or redirected file.
 extern bool stdin_is_tty;
 
-// TRUE means we're parsing a function file.
-extern bool reading_fcn_file;
-
 // Simple name of function file we are reading.
 extern std::string curr_fcn_file_name;
 
 // Full name of file we are reading.
 extern std::string curr_fcn_file_full_name;
 
-// TRUE means we're parsing a script file.
-extern bool reading_script_file;
-
-// TRUE means we're parsing a classdef file.
-extern bool reading_classdef_file;
-
 // Fix things up so that input can come from file 'name', printing a
 // warning if the file doesn't exist.
 
 // TRUE means this is an interactive shell.
 extern bool interactive;
 
 // TRUE means the user forced this shell to be interactive (-i).
 extern bool forced_interactive;
diff --git a/libinterp/octave.cc b/libinterp/octave.cc
--- a/libinterp/octave.cc
+++ b/libinterp/octave.cc
@@ -483,27 +483,25 @@ execute_command_line_file (const std::st
   octave_interrupt_hook = 0;
   octave_bad_alloc_hook = 0;
 
   octave_catch_interrupts ();
 
   octave_initialized = true;
 
   frame.protect_var (interactive);
-  frame.protect_var (reading_script_file);
   frame.protect_var (input_from_command_line_file);
 
   frame.protect_var (curr_fcn_file_name);
   frame.protect_var (curr_fcn_file_full_name);
 
   frame.protect_var (octave_program_invocation_name);
   frame.protect_var (octave_program_name);
 
   interactive = false;
-  reading_script_file = true;
   input_from_command_line_file = true;
 
   curr_fcn_file_name = fname;
   curr_fcn_file_full_name = curr_fcn_file_name;
 
   octave_program_invocation_name = curr_fcn_file_name;
 
   size_t pos = curr_fcn_file_name.find_last_of (file_ops::dir_sep_chars ());
diff --git a/libinterp/parse-tree/lex.h b/libinterp/parse-tree/lex.h
--- a/libinterp/parse-tree/lex.h
+++ b/libinterp/parse-tree/lex.h
@@ -165,17 +165,18 @@ public:
       do_comma_insert (false), at_beginning_of_statement (true),
       looking_at_anon_fcn_args (false), looking_at_return_list (false),
       looking_at_parameter_list (false), looking_at_decl_list (false),
       looking_at_initializer_expression (false),
       looking_at_matrix_or_assign_lhs (false),
       looking_for_object_index (false), 
       looking_at_indirect_ref (false), parsing_class_method (false),
       maybe_classdef_get_set_method (false), parsing_classdef (false),
-      quote_is_transpose (false),
+      quote_is_transpose (false), reading_fcn_file (false),
+      reading_script_file (false), reading_classdef_file (false),
       input_line_number (1), current_input_column (1),
       bracketflag (0), braceflag (0),
       looping (0), defining_func (0), looking_at_function_handle (0),
       block_comment_nesting_level (0),
       looking_at_object_index (), parsed_function_name (),
       pending_local_variables (), nesting_level (), token_stack ()
   {
     init ();
@@ -238,16 +239,25 @@ public:
   bool maybe_classdef_get_set_method;
 
   // true means we are parsing a classdef file
   bool parsing_classdef;
 
   // return transpose or start a string?
   bool quote_is_transpose;
 
+  // TRUE means we're parsing a function file.
+  bool reading_fcn_file;
+
+  // TRUE means we're parsing a script file.
+  bool reading_script_file;
+
+  // TRUE means we're parsing a classdef file.
+  bool reading_classdef_file;
+
   // the current input line number.
   int input_line_number;
 
   // the column of the current token.
   int current_input_column;
 
   // square bracket level count.
   int bracketflag;
diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -1319,16 +1319,19 @@ lexical_feedback::reset (void)
   looking_at_initializer_expression = false;
   looking_at_matrix_or_assign_lhs = false;
   looking_for_object_index = false; 
   looking_at_indirect_ref = false;
   parsing_class_method = false;
   maybe_classdef_get_set_method = false;
   parsing_classdef = false;
   quote_is_transpose = false;
+  reading_fcn_file = false;
+  reading_script_file = false;
+  reading_classdef_file = false;
   input_line_number = 1;
   current_input_column = 1;
   bracketflag = 0;
   braceflag = 0;
   looping = 0;
   defining_func = 0;
   looking_at_function_handle = 0;
   block_comment_nesting_level = 0;
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -1008,21 +1008,21 @@ push_fcn_symtab : // empty
                       curr_parser.max_fcn_depth = curr_parser.curr_fcn_depth;
 
                     parser_symtab_context.push ();
 
                     symbol_table::set_scope (symbol_table::alloc_scope ());
 
                     curr_parser.function_scopes.push_back (symbol_table::current_scope ());
 
-                    if (! reading_script_file && curr_parser.curr_fcn_depth == 1
+                    if (! curr_lexer->reading_script_file && curr_parser.curr_fcn_depth == 1
                         && ! curr_parser.parsing_subfunctions)
                       curr_parser.primary_fcn_scope = symbol_table::current_scope ();
 
-                    if (reading_script_file && curr_parser.curr_fcn_depth > 1)
+                    if (curr_lexer->reading_script_file && curr_parser.curr_fcn_depth > 1)
                       curr_parser.bison_error ("nested functions not implemented in this context");
                   }
                 ;
 
 // ===========================
 // List of function parameters
 // ===========================
 
@@ -1149,17 +1149,17 @@ function_list   : function
 // ===================
 // Function definition
 // ===================
 
 function_beg    : push_fcn_symtab FCN stash_comment
                   {
                     $$ = $3;
 
-                    if (reading_classdef_file || curr_lexer->parsing_classdef)
+                    if (curr_lexer->reading_classdef_file || curr_lexer->parsing_classdef)
                       curr_lexer->maybe_classdef_get_set_method = true;
                   }
                 ;
 
 function        : function_beg function1
                   {
                     $$ = curr_parser.finish_function (0, $2, $1);
                     curr_parser.recover_from_parsing_function ();
@@ -1217,38 +1217,38 @@ function_end    : END
                     if (curr_parser.end_token_ok ($1, token::function_end))
                       $$ = curr_parser.make_end ("endfunction", $1->line (), $1->column ());
                     else
                       ABORT_PARSE;
                   }
                 | END_OF_INPUT
                   {
 // A lot of tests are based on the assumption that this is OK
-//                  if (reading_script_file)
+//                  if (curr_lexer->reading_script_file)
 //                    {
 //                      curr_parser.bison_error ("function body open at end of script");
 //                      YYABORT;
 //                    }
 
                     if (curr_parser.endfunction_found)
                       {
                         curr_parser.bison_error ("inconsistent function endings -- "
                                  "if one function is explicitly ended, "
                                  "so must all the others");
                         YYABORT;
                       }
 
-                    if (! (reading_fcn_file || reading_script_file
+                    if (! (curr_lexer->reading_fcn_file || curr_lexer->reading_script_file
                            || (curr_lexer)->input_from_eval_string ()))
                       {
                         curr_parser.bison_error ("function body open at end of input");
                         YYABORT;
                       }
 
-                    if (reading_classdef_file)
+                    if (curr_lexer->reading_classdef_file)
                       {
                         curr_parser.bison_error ("classdef body open at end of input");
                         YYABORT;
                       }
 
                     $$ = curr_parser.make_end ("endfunction",
                                                 curr_lexer->input_line_number,
                                                 curr_lexer->current_input_column);
@@ -2649,17 +2649,17 @@ octave_parser::frob_function (const std:
                               octave_user_function *fcn)
 {
   std::string id_name = fname;
 
   // If input is coming from a file, issue a warning if the name of
   // the file does not match the name of the function stated in the
   // file.  Matlab doesn't provide a diagnostic (it ignores the stated
   // name).
-  if (! autoloading && reading_fcn_file
+  if (! autoloading && curr_lexer->reading_fcn_file
       && curr_fcn_depth == 1 && ! parsing_subfunctions)
   {
     // FIXME -- should curr_fcn_file_name already be
     // preprocessed when we get here?  It seems to only be a
     // problem with relative file names.
 
     std::string nm = curr_fcn_file_name;
 
@@ -2674,17 +2674,17 @@ octave_parser::frob_function (const std:
           ("Octave:function-name-clash",
            "function name '%s' does not agree with function file name '%s'",
            id_name.c_str (), curr_fcn_file_full_name.c_str ());
 
         id_name = nm;
       }
   }
 
-  if (reading_fcn_file || reading_classdef_file || autoloading)
+  if (curr_lexer->reading_fcn_file || curr_lexer->reading_classdef_file || autoloading)
     {
       octave_time now;
 
       fcn->stash_fcn_file_name (curr_fcn_file_full_name);
       fcn->stash_fcn_file_time (now);
       fcn->mark_as_system_fcn_file ();
 
       if (fcn_file_from_relative_lookup)
@@ -2714,17 +2714,17 @@ octave_parser::frob_function (const std:
 
       file_stat fs (nm);
 
       if (fs && fs.is_newer (now))
         warning_with_id ("Octave:future-time-stamp",
                          "time stamp for '%s' is in the future", nm.c_str ());
     }
   else if (! (input_from_tmp_history_file || input_from_startup_file)
-           && reading_script_file
+           && curr_lexer->reading_script_file
            && curr_fcn_file_name == id_name)
     {
       warning ("function '%s' defined within script file '%s'",
                id_name.c_str (), curr_fcn_file_full_name.c_str ());
     }
 
   fcn->stash_function_name (id_name);
   fcn->stash_fcn_location (curr_lexer->input_line_number,
@@ -2733,17 +2733,17 @@ octave_parser::frob_function (const std:
   if (! help_buf.empty () && curr_fcn_depth == 1
       && ! parsing_subfunctions)
     {
       fcn->document (help_buf.top ());
 
       help_buf.pop ();
     }
 
-  if (reading_fcn_file && curr_fcn_depth == 1
+  if (curr_lexer->reading_fcn_file && curr_fcn_depth == 1
       && ! parsing_subfunctions)
     primary_fcn_ptr = fcn;
 
   return fcn;
 }
 
 tree_function_def *
 octave_parser::finish_function (tree_parameter_list *ret_list,
@@ -2786,17 +2786,17 @@ octave_parser::finish_function (tree_par
           else
             symbol_table::install_subfunction (nm, octave_value (fcn),
                                                primary_fcn_scope);
         }
 
       if (curr_fcn_depth == 1 && fcn)
         symbol_table::update_nest (fcn->scope ());
 
-      if (! reading_fcn_file && curr_fcn_depth == 1)
+      if (! curr_lexer->reading_fcn_file && curr_fcn_depth == 1)
         {
           // We are either reading a script file or defining a function
           // at the command line, so this definition creates a
           // tree_function object that is placed in the parse tree.
           // Otherwise, it is just inserted in the symbol table,
           // either as a subfunction or nested function (see above),
           // or as the primary function for the file, via
           // primary_fcn_ptr (see also load_fcn_from_file,,
@@ -2819,17 +2819,17 @@ octave_parser::finish_function (tree_par
 void
 octave_parser::recover_from_parsing_function (void)
 {
   if (parser_symtab_context.empty ())
     panic_impossible ();
 
   parser_symtab_context.pop ();
 
-  if (reading_fcn_file && curr_fcn_depth == 1
+  if (curr_lexer->reading_fcn_file && curr_fcn_depth == 1
       && ! parsing_subfunctions)
     parsing_subfunctions = true;
 
   curr_fcn_depth--;
   function_scopes.pop_back ();
 
   curr_lexer->defining_func--;
   curr_lexer->parsed_function_name.pop ();
@@ -2940,17 +2940,17 @@ octave_parser::make_decl_command (int to
       retval = new tree_global_command (lst, l, c);
       break;
 
     case PERSISTENT:
       if (curr_fcn_depth > 0)
         retval = new tree_persistent_command (lst, l, c);
       else
         {
-          if (reading_script_file)
+          if (curr_lexer->reading_script_file)
             warning ("ignoring persistent declaration near line %d of file '%s'",
                      l, curr_fcn_file_full_name.c_str ());
           else
             warning ("ignoring persistent declaration near line %d", l);
         }
       break;
 
     default:
@@ -3093,17 +3093,17 @@ octave_parser::append_statement_list (tr
 
 void
 octave_parser::bison_error (const char *s)
 {
   int err_col = curr_lexer->current_input_column - 1;
 
   std::ostringstream output_buf;
 
-  if (reading_fcn_file || reading_script_file || reading_classdef_file)
+  if (curr_lexer->reading_fcn_file || curr_lexer->reading_script_file || curr_lexer->reading_classdef_file)
     output_buf << "parse error near line " << curr_lexer->input_line_number
                << " of file " << curr_fcn_file_full_name;
   else
     output_buf << "parse error:";
 
   if (s && strcmp (s, "parse error") != 0)
     output_buf << "\n\n  " << s;
 
@@ -3370,20 +3370,18 @@ parse_fcn_file (const std::string& ff, c
   octave_function *fcn_ptr = 0;
 
   // Open function file and parse.
 
   FILE *in_stream = command_editor::get_input_stream ();
 
   frame.add_fcn (command_editor::set_input_stream, in_stream);
 
-  frame.protect_var (reading_fcn_file);
   frame.protect_var (line_editing);
 
-  reading_fcn_file = true;
   line_editing = false;
 
   frame.add_fcn (command_history::ignore_entries,
                  command_history::ignoring_entries ());
 
   command_history::ignore_entries ();
 
   FILE *ffile = 0;
@@ -3397,16 +3395,18 @@ parse_fcn_file (const std::string& ff, c
     {
       bool eof;
 
       // octave_parser constructor sets this for us.
       frame.protect_var (CURR_LEXER);
 
       octave_parser curr_parser (ffile);
 
+      curr_parser.curr_lexer->reading_fcn_file = true;
+
       curr_parser.curr_class_name = dispatch_type;
       curr_parser.autoloading = autoload;
       curr_parser.fcn_file_from_relative_lookup = relative_lookup;
 
       std::string help_txt
         = gobble_leading_white_space
             (ffile, eof,
              curr_parser.curr_lexer->input_line_number,
@@ -3414,66 +3414,58 @@ parse_fcn_file (const std::string& ff, c
 
       if (! help_txt.empty ())
         help_buf.push (help_txt);
 
       if (! eof)
         {
           std::string file_type;
 
-          frame.protect_var (reading_fcn_file);
-          frame.protect_var (reading_script_file);
-          frame.protect_var (reading_classdef_file);
           frame.protect_var (Vecho_executing_commands);
 
+          Vecho_executing_commands = ECHO_OFF;
+
           if (! force_script && looking_at_function_keyword (ffile))
             {
               file_type = "function";
-
-              Vecho_executing_commands = ECHO_OFF;
-
-              reading_classdef_file = false;
-              reading_fcn_file = true;
-              reading_script_file = false;
-            }
-          else if (! force_script && looking_at_classdef_keyword (ffile))
-            {
-              file_type = "classdef";
-
-              Vecho_executing_commands = ECHO_OFF;
-
-              reading_classdef_file = true;
-              reading_fcn_file = false;
-              // FIXME -- Should classdef files be handled as
-              // scripts or separately?  Currently, without setting up
-              // for reading script files, parsing classdef files
-              // fails.
-              reading_script_file = true;
             }
           else
             {
-              file_type = "script";
-
-              Vecho_executing_commands = ECHO_OFF;
-
-              reading_classdef_file = false;
-              reading_fcn_file = false;
-              reading_script_file = true;
+              curr_parser.curr_lexer->reading_fcn_file = false;
+
+              if (! force_script && looking_at_classdef_keyword (ffile))
+                {
+                  file_type = "classdef";
+
+                  curr_parser.curr_lexer->reading_classdef_file = true;
+
+                  // FIXME -- Should classdef files be handled as
+                  // scripts or separately?  Currently, without
+                  // setting up for reading script files, parsing
+                  // classdef files fails.
+                  curr_parser.curr_lexer->reading_script_file = true;
+                }
+              else
+                {
+                  file_type = "script";
+
+                  curr_parser.curr_lexer->reading_script_file = true;
+                }
             }
 
           // Do this with an unwind-protect cleanup function so that
           // the forced variables will be unmarked in the event of an
           // interrupt.
           symbol_table::scope_id scope = symbol_table::top_scope ();
           frame.add_fcn (symbol_table::unmark_forced_variables, scope);
 
           if (! help_txt.empty ())
             help_buf.push (help_txt);
 
-          if (reading_script_file)
+          if (curr_parser.curr_lexer->reading_script_file)
             curr_parser.curr_lexer->prep_for_script_file ();
           else
             curr_parser.curr_lexer->prep_for_function_file ();
 
           curr_parser.curr_lexer->parsing_class_method = ! dispatch_type.empty ();
 
           int status = curr_parser.run ();
 
@@ -4187,24 +4179,18 @@ eval_string (const std::string& eval_str
   unwind_protect frame;
 
   // octave_parser constructor sets this for us.
   frame.protect_var (CURR_LEXER);
 
   octave_parser curr_parser (eval_str);
 
   frame.protect_var (line_editing);
-  frame.protect_var (reading_fcn_file);
-  frame.protect_var (reading_script_file);
-  frame.protect_var (reading_classdef_file);
 
   line_editing = false;
-  reading_fcn_file = false;
-  reading_script_file = false;
-  reading_classdef_file = false;
 
   do
     {
       curr_parser.reset ();
 
       // Do this with an unwind-protect cleanup function so that the
       // forced variables will be unmarked in the event of an
       // interrupt.
