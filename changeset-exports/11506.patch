# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1294915344 18000
#      Thu Jan 13 05:42:24 2011 -0500
# Node ID 964b7fd379f199b0ef63e30ccbb683615d59fc3f
# Parent  9a308e96194ea02192fbf6fb46a2e081a9594748
more constructor/destructor fixes

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,18 @@
+2011-01-13  John W. Eaton  <jwe@octave.org>
+
+	* oct-locbuf.h (octave_chunk_buffer::~octave_chunk_buffer):
+	Now virtual.
+	(class octave_local_buffer, class octave_chunk_buffer):
+	Don't allow copying or assignment.
+
+	* file-stat.h (base_file_stat::~base_file_stat):
+	Now protected and virtual.
+
 2011-01-13  John W. Eaton  <jwe@octave.org>
 
 	* base-lu.h (base_lu::base_lu): Initialize all data members in
 	initialization lists.
 	* base-qr.h (base_qr::base_qr): Likewise.
 	* DET.h (base_det::base_det): Likewise.
 	* sparse-base-lu.h (sparse_base_lu::sparse_base_lu): Likewise.
 	* sparse-base-chol.h (sparse_base_chol::sparse_base_chol): Likewise.
diff --git a/liboctave/file-stat.h b/liboctave/file-stat.h
--- a/liboctave/file-stat.h
+++ b/liboctave/file-stat.h
@@ -70,18 +70,16 @@ public:
         fs_rdev = fs.fs_rdev;
         fs_blksize = fs.fs_blksize;
         fs_blocks = fs.fs_blocks;
       }
 
     return *this;
   }
 
-  ~base_file_stat (void) { }
-
   // The minimum difference in file time stamp values.
   // FIXME -- this value should come from the filesystem itself.  How
   // can we get that info?
   octave_time time_resolution (void) const
   {
     static octave_time resolution (1.0);
     return resolution;
   }
@@ -142,16 +140,18 @@ public:
   bool is_newer (const octave_time& time) const { return fs_mtime > time; }
 
   // It's nice to be able to hide the file_stat object if we don't
   // really care about it.
   static int is_newer (const std::string&, const octave_time&);
 
 protected:
 
+  virtual ~base_file_stat (void) { }
+
   // TRUE means we have already called stat.
   bool initialized;
 
   // TRUE means the stat for this file failed.
   bool fail;
 
   // If a failure occurs, this contains the system error text.
   std::string errmsg;
diff --git a/liboctave/oct-locbuf.h b/liboctave/oct-locbuf.h
--- a/liboctave/oct-locbuf.h
+++ b/liboctave/oct-locbuf.h
@@ -36,60 +36,75 @@ public:
   octave_local_buffer (size_t size)
     : data (0) 
     { 
       if (size) 
         data = new T[size]; 
     }
   ~octave_local_buffer (void) { delete [] data; }
   operator T *() const { return data; }
+
 private:
   T *data;
+
+  // No copying!
+  octave_local_buffer (const octave_local_buffer&);
+  octave_local_buffer& operator = (const octave_local_buffer&);
 };
 
 // For buffers of POD types, we'll be more smart. There is one thing that
 // differentiates a local buffer from a dynamic array - the local buffers, if
 // not manipulated improperly, have a FIFO semantics, meaning that if buffer B
 // is allocated after buffer A, B *must* be deallocated before A. This is
 // *guaranteed* if you use local buffer exclusively through the
 // OCTAVE_LOCAL_BUFFER macro, because the C++ standard *mandates* explicit
 // local objects be destroyed in reverse order of declaration.
 // Therefore, we can avoid memory fragmentation by allocating fairly large
 // chunks of memory and serving local buffers from them in a stack-like manner.
 // The first returning buffer in previous chunk will be responsible for
 // deallocating the chunk.
 
 class octave_chunk_buffer
 {
+public:
+
+  OCTAVE_API octave_chunk_buffer (size_t size);
+
+  OCTAVE_API virtual ~octave_chunk_buffer (void);
+
+  char *data (void) const { return dat; }
+
+private:
   static const size_t chunk_size;
 
   static char *top, *chunk;
   static size_t left;
 
   char *cnk;
   char *dat;
 
-public:
-
-  OCTAVE_API octave_chunk_buffer (size_t size);
-
-  OCTAVE_API ~octave_chunk_buffer (void);
-
-  char *data (void) const { return dat; }
+  // No copying!
+  octave_chunk_buffer (const octave_chunk_buffer&);
+  octave_chunk_buffer& operator = (const octave_chunk_buffer&);
 };
 
 // This specializes octave_local_buffer to use the chunked buffer mechanism
 // for POD types.
 #define SPECIALIZE_POD_BUFFER(TYPE) \
 template <> \
 class octave_local_buffer<TYPE> : private octave_chunk_buffer \
 { \
 public: \
-  octave_local_buffer (size_t size) : octave_chunk_buffer (size * sizeof (TYPE)) { } \
-  operator TYPE *() const { return reinterpret_cast<TYPE *> (this->data ()); } \
+  octave_local_buffer (size_t size) \
+    : octave_chunk_buffer (size * sizeof (TYPE)) { } \
+ \
+  operator TYPE *() const \
+  { \
+    return reinterpret_cast<TYPE *> (this->data ()); \
+  } \
 }
 
 SPECIALIZE_POD_BUFFER (bool);
 SPECIALIZE_POD_BUFFER (char);
 SPECIALIZE_POD_BUFFER (unsigned short);
 SPECIALIZE_POD_BUFFER (short);
 SPECIALIZE_POD_BUFFER (int);
 SPECIALIZE_POD_BUFFER (unsigned int);
@@ -102,26 +117,35 @@ SPECIALIZE_POD_BUFFER (Complex);
 SPECIALIZE_POD_BUFFER (FloatComplex);
 // MORE ?
 
 // All pointers and const pointers are also POD types.
 template <class T>
 class octave_local_buffer<T *> : private octave_chunk_buffer
 {
 public:
-  octave_local_buffer (size_t size) : octave_chunk_buffer (size * sizeof (T *)) { }
+  octave_local_buffer (size_t size)
+    : octave_chunk_buffer (size * sizeof (T *))
+    { }
+
   operator T **() const { return reinterpret_cast<T **> (this->data ()); }
 };
 
 template <class T>
 class octave_local_buffer<const T *> : private octave_chunk_buffer
 {
 public:
-  octave_local_buffer (size_t size) : octave_chunk_buffer (size * sizeof (const T *)) { }
-  operator const T **() const { return reinterpret_cast<const T **> (this->data ()); }
+  octave_local_buffer (size_t size)
+    : octave_chunk_buffer (size * sizeof (const T *))
+    { }
+
+  operator const T **() const
+  {
+    return reinterpret_cast<const T **> (this->data ());
+  }
 };
 
 // If the compiler supports dynamic stack arrays, we can use the attached hack
 // to place small buffer arrays on the stack. It may be even faster than our
 // obstack-like optimization, but is dangerous because stack is a very limited
 // resource, so we disable it.
 #if 0 //defined (HAVE_DYNAMIC_AUTO_ARRAYS)
 
