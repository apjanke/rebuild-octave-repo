# HG changeset patch
# User jwe
# Date 811147492 0
#      Fri Sep 15 06:44:52 1995 +0000
# Node ID 5f2cd468a1c30a0680ae74a57b00a246a73a9683
# Parent  e282214c41a555271bda56808bb57e69ab5d4999
[project @ 1995-09-15 06:44:52 by jwe]

diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -158,40 +158,47 @@ static int read_init_files = 1;
 
 // Nonzero means we printed messages about reading startup files.
 static int reading_startup_message_printed = 0;
 
 // Nonzero means we don't print the usual startup message.
 // (--quiet; --silent; -q)
 static int inhibit_startup_message = 0;
 
+// Nonzero means we turn on compatibility options.
+// (--traditional)
+static int traditional = 0;
+
 // Usage message
 static const char *usage_string = 
   "octave [-?Vdfhiqvx] [-p path] [--debug] [--help] [--ignore-init-file]\n\
        [--info-file file] [--interactive] [--path path] [--silent]\n\
-       [--verbose] [--version] [--echo-commands] [file]";
+       [--traditional] [--verbose] [--version] [--echo-commands] [file]";
 
 // This is here so that it's more likely that the usage message and
-// the real set of options will agree.
-static const char *short_opts = "?Vdfhip:qvx";
+// the real set of options will agree.  Note: the `+' must come first
+// to prevent getopt from permuting arguments!
+static const char *short_opts = "+?Vdfhip:qvx";
 
 // Long options.  See the comments in getopt.h for the meanings of the
 // fields in this structure.
 #define INFO_FILE_OPTION 1
+#define TRADITIONAL_OPTION 2
 static struct option long_opts[] =
   {
     { "debug",            no_argument,       0, 'd' },
     { "help",             no_argument,       0, 'h' },
     { "interactive",      no_argument,       0, 'i' },
     { "info-file",        required_argument, 0, INFO_FILE_OPTION },
     { "norc",             no_argument,       0, 'f' },
     { "ignore-init-file", no_argument,       0, 'f' },
     { "path",             required_argument, 0, 'p' },
     { "quiet",            no_argument,       0, 'q' },
     { "silent",           no_argument,       0, 'q' },
+    { "traditional",      no_argument,       0, TRADITIONAL_OPTION },
     { "verbose",          no_argument,       0, 'V' },
     { "version",          no_argument,       0, 'v' },
     { "echo-commands",    no_argument,       0, 'x' },
     { 0,                  0,                 0, 0 }
   };
 
 // Store the command-line options for later use.
 
@@ -423,16 +430,17 @@ Usage: " << usage_string << "\n\
 \n\
   -d, --debug             enter parser debugging mode\n\
   -f, --ignore-init-file  don't read any initialization files\n\
   -h, -?, --help          print short help message and exit\n\
   -i, --interactive       force interactive behavior\n\
   --info-file FILE        use top-level info file FILE\n\
   -p PATH, --path PATH    set initial LOADPATH to PATH\n\
   -q, --silent            don't print message at startup\n\
+  --traditional           set compatibility variables\n\
   -V, --verbose           enable verbose output in some cases\n\
   -v, --version           print version number and exit\n\
   -x, --echo-commands     echo commands as they are executed\n\
 \n\
   FILE                    execute commands from FILE\n\
 \n";
 
   exit (0);
@@ -488,16 +496,38 @@ print_version_and_exit (void)
 static void
 initialize_error_handlers ()
 {
   set_Complex_error_handler (octave_Complex_error_handler);
 
   set_liboctave_error_handler (error);
 }
 
+// What happens on --traditional.
+
+static void
+maximum_braindamage (void)
+{
+  bind_builtin_variable ("PS1", ">> ");
+  bind_builtin_variable ("PS2", "");
+  bind_builtin_variable ("default_save_format", "mat-binary");
+  bind_builtin_variable ("define_all_return_values", "true");
+  bind_builtin_variable ("do_fortran_indexing", "true");
+  bind_builtin_variable ("empty_list_elements_ok", "true");
+  bind_builtin_variable ("implicit_str_to_num_ok", "true");
+  bind_builtin_variable ("ok_to_lose_imaginary_part", "true");
+  bind_builtin_variable ("page_screen_output", "false");
+  bind_builtin_variable ("prefer_column_vectors", "false");
+  bind_builtin_variable ("prefer_zero_one_indexing", "true");
+  bind_builtin_variable ("print_empty_dimensions", "false");
+  bind_builtin_variable ("treat_neg_dim_as_zero", "true");
+  bind_builtin_variable ("warn_function_name_clash", "false");
+  bind_builtin_variable ("whitespace_in_literal_matrix", "traditional");
+}
+
 // You guessed it.
 
 int
 main (int argc, char **argv)
 {
   // The order of these calls is important, and initialize_globals
   // must come before the options are processed because some command
   // line options override defaults.
@@ -555,16 +585,20 @@ main (int argc, char **argv)
 	  print_version_and_exit ();
 	  break;
 
 	case INFO_FILE_OPTION:
 	  if (optarg)
 	    info_file = strsave (optarg);
 	  break;
 
+	case TRADITIONAL_OPTION:
+	  traditional = 1;
+	  break;
+
 	default:
 	  usage ();
 	  break;
 	}
     }
 
 #if defined (HAVE_ATEXIT) || (HAVE_ON_EXIT)
   // Make sure we clean up when we exit.  If we don't have atexit or
@@ -588,16 +622,19 @@ main (int argc, char **argv)
 
   initialize_readline ();
 
   init_dynamic_linker ();
 
   if (! inhibit_startup_message)
     cout << OCTAVE_STARTUP_MESSAGE "\n" << endl;
 
+  if (traditional)
+    maximum_braindamage ();
+
   if (read_init_files)
     {
       saving_history = 0;
       execute_startup_files ();
       saving_history = 1;
     }
 
   if (! inhibit_startup_message && reading_startup_message_printed)
@@ -646,17 +683,17 @@ main (int argc, char **argv)
   // has forced interactive behavior.
 
   if (!interactive && forced_interactive)
     {
       rl_blink_matching_paren = 0;
       echo_input = 1;
     }
 
-  if (! (interactive || forced_interactive))
+  if (! interactive)
     using_readline = 0;
 
   // Allow the user to interrupt us without exiting.
 
   volatile sig_handler *saved_sigint_handler = signal (SIGINT, SIG_IGN);
 
   if (setjmp (toplevel) != 0)
     {
