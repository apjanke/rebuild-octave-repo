# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1368444397 14400
#      Mon May 13 07:26:37 2013 -0400
# Node ID b04413e5a811d34c0ae760bacee3fee9fd2005e9
# Parent  d446e99f89f73d062a104ad5dfaac9d18bf842ed
improve handling of interrupts, copy and paste shortcuts

* QTerminal.h (QTerminal::report_status_message): New signal.
(QTerminal::QTerminal): Set shortcuts for copy and paste actions.
Add copy and paste actions to QTerminal widget.
Connect settings_changed, report_status_message, copyClipboard_signal,
and pasteClipboard_signal.

* QWinTerminalImpl.cpp (QWinTerminalImpl::copyClipboard): If selection
is set, copy it and report status message.  Otherwise, interrupt.
* TerminalView.cpp (TerminalView::copyClipboard): Likewise.

* main-window.cc (main_menu::construct_file_menu): Don't set shortcut
for open action.
(main_window::construct_edit_menu): Delete unimplemented cut, select
all, and delete actions.
Connect copy and paste actions to signals.
(main_window::copyClipboard_signal,
main_window::pasteClipboard_signal): New signals.
(main_window::copyClipboard, main_window::pasteClipboard): New slots.
(main_window::_cut_action): Delete member variable.

* octave-qt-link.cc (octave_qt_link::do_pre_input_event):
Disable input processing by the windows console.
(octave_qt_link::do_post_input_event):
Enable input processing by the windows console.

* terminal-dock-widget.h, terminal-dock-widget.cc:
Delete notice_settings, copyClipboard, and pasteClipboard signals,
slots, and connections.
(terminal_dock_widget::terminal_dock_widget):
Don't connect visibilityChanged signal.

diff --git a/libgui/qterminal/libqterminal/QTerminal.h b/libgui/qterminal/libqterminal/QTerminal.h
--- a/libgui/qterminal/libqterminal/QTerminal.h
+++ b/libgui/qterminal/libqterminal/QTerminal.h
@@ -19,17 +19,17 @@ You should have received a copy of the G
 along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
 
 */
 
 #ifndef QTERMINAL_H
 #define QTERMINAL_H
 
 #include <QSettings>
-#include <QtGlobal>
+#include <QKeySequence>
 #include <QWidget>
 #include <QStringList>
 #include <QColor>
 #include <QList>
 #include <QMenu>
 
 class QTerminal : public QWidget
 {
@@ -71,16 +71,20 @@ public:
 
   virtual void setForegroundColor (const QColor& color) = 0;
 
   virtual void setSelectionColor (const QColor& color) = 0;
 
   virtual void setCursorColor (bool useForegroundColor,
                                const QColor& color) = 0;
 
+signals:
+
+  void report_status_message (const QString&);
+
 public slots:
 
   virtual void copyClipboard (void) = 0;
 
   virtual void pasteClipboard (void) = 0;
 
   virtual void handleCustomContextMenuRequested (const QPoint& at)
   {
@@ -89,28 +93,49 @@ public slots:
   }
 
   void notice_settings (const QSettings *settings);
 
 protected:
 
   QTerminal (QWidget *xparent = 0) : QWidget (xparent)
   {
-    connect (this, SIGNAL (customContextMenuRequested (QPoint)),
-             this, SLOT (handleCustomContextMenuRequested (QPoint)));
-
     setContextMenuPolicy (Qt::CustomContextMenu);
 
     _contextMenu = new QMenu (this);
 
     QAction *copyAction  = _contextMenu->addAction ("Copy");
     QAction *pasteAction = _contextMenu->addAction ("Paste");
 
-    connect (copyAction, SIGNAL (triggered()), this, SLOT (copyClipboard()));
-    connect (pasteAction, SIGNAL (triggered()), this, SLOT (pasteClipboard()));
+    copyAction->setShortcut (QKeySequence::Copy);
+    pasteAction->setShortcut (QKeySequence::Paste);
+
+    addAction (copyAction);
+    addAction (pasteAction);
+
+    connect (copyAction, SIGNAL (triggered()),
+             this, SLOT (copyClipboard ()));
+
+    connect (pasteAction, SIGNAL (triggered()),
+             this, SLOT (pasteClipboard ()));
+
+    connect (this, SIGNAL (customContextMenuRequested (QPoint)),
+             this, SLOT (handleCustomContextMenuRequested (QPoint)));
+
+    connect (this, SIGNAL (report_status_message (const QString&)),
+             xparent, SLOT (report_status_message (const QString&)));
+
+    connect (xparent, SIGNAL (settings_changed (const QSettings *)),
+             this, SLOT (notice_settings (const QSettings *)));
+
+    connect (xparent, SIGNAL (copyClipboard_signal ()),
+             this, SLOT (copyClipboard ()));
+
+    connect (xparent, SIGNAL (pasteClipboard_signal ()),
+             this, SLOT (pasteClipboard ()));
   }
 
 private:
 
     QMenu *_contextMenu;
 };
 
 #endif // QTERMINAL_H
diff --git a/libgui/qterminal/libqterminal/unix/TerminalView.cpp b/libgui/qterminal/libqterminal/unix/TerminalView.cpp
--- a/libgui/qterminal/libqterminal/unix/TerminalView.cpp
+++ b/libgui/qterminal/libqterminal/unix/TerminalView.cpp
@@ -2259,17 +2259,26 @@ void TerminalView::setSelection(const QS
 }
 
 void TerminalView::copyClipboard()
 {
   if ( !_screenWindow )
     return;
 
   QString text = _screenWindow->selectedText(_preserveLineBreaks);
-  QApplication::clipboard()->setText(text);
+
+  if (text.isEmpty ())
+    {
+      // FIXME -- interrupt is only appropriate here if CTRL-C is bound
+      // to the copy action.  How can we determine that?
+
+      ::raise (SIGINT);
+    }
+  else
+    QApplication::clipboard()->setText(text);
 }
 
 void TerminalView::pasteClipboard()
 {
   emitSelection(false,false);
 }
 
 void TerminalView::pasteSelection()
diff --git a/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp b/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp
--- a/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp
+++ b/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp
@@ -38,16 +38,17 @@ along with Foobar.  If not, see <http://
 #include <fcntl.h>
 #include <io.h>
 #include <stdio.h>
 #include <stdarg.h>
 #define WIN32_LEAN_AND_MEAN
 #define _WIN32_WINNT 0x0500 
 #include <windows.h>
 #include <cstring>
+#include <csignal>
 #include <limits>
 
 #include "QWinTerminalImpl.h"
 #include "QTerminalColors.h"
 
 // Uncomment to log activity to LOGFILENAME
 // #define DEBUG_QCONSOLE
 #define LOGFILENAME "QConsole.log"
@@ -1432,17 +1433,28 @@ void QWinTerminalImpl::setSize (int colu
 }
 
 //////////////////////////////////////////////////////////////////////////////
 
 void QWinTerminalImpl::copyClipboard (void)
 {
   QClipboard *clipboard = QApplication::clipboard ();
 
-  clipboard->setText (d->getSelection ());
+  QString selection = d->getSelection ();
+
+  if (selection.isEmpty ())
+    {
+      ::raise (SIGINT);
+    }
+  else
+    {
+      clipboard->setText (selection);
+
+      emit report_status_message (tr ("copied selection to clipboard"));
+    }
 }
 
 //////////////////////////////////////////////////////////////////////////////
 
 void QWinTerminalImpl::pasteClipboard (void)
 {
   QString text = QApplication::clipboard()->text (QClipboard::Clipboard);
 
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -20,16 +20,17 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
+#include <QKeySequence>
 #include <QApplication>
 #include <QLabel>
 #include <QMenuBar>
 #include <QMenu>
 #include <QAction>
 #include <QSettings>
 #include <QStyle>
 #include <QToolBar>
@@ -625,16 +626,28 @@ main_window::connect_visibility_changed 
   file_browser_window->connect_visibility_changed ();
   doc_browser_window->connect_visibility_changed ();
 #ifdef HAVE_QSCINTILLA
   editor_window->connect_visibility_changed ();
 #endif
   workspace_window->connect_visibility_changed ();
 }
 
+void
+main_window::copyClipboard (void)
+{
+  emit copyClipboard_signal ();
+}
+
+void
+main_window::pasteClipboard (void)
+{
+  emit pasteClipboard_signal ();
+}
+
 // Connect the signals emitted when the Octave thread wants to create
 // a dialog box of some sort.  Perhaps a better place for this would be
 // as part of the QUIWidgetCreator class.  However, mainWindow currently
 // is not a global variable and not accessible for connecting.
 
 void
 main_window::connect_uiwidget_links ()
 {
@@ -941,18 +954,16 @@ main_window::construct_file_menu (QMenuB
 {
   QMenu *file_menu = p->addMenu (tr ("&File"));
 
   construct_new_menu (file_menu);
 
   _open_action
     = file_menu->addAction (QIcon (":/actions/icons/fileopen.png"),
                             tr ("Open..."));
-  _open_action->setShortcut (QKeySequence::Open);
-  _open_action->setShortcutContext (Qt::ApplicationShortcut);
 
 #ifdef HAVE_QSCINTILLA
   file_menu->addMenu (editor_window->get_mru_menu ());
 #endif
 
   file_menu->addSeparator ();
 
   QAction *load_workspace_action
@@ -1021,37 +1032,26 @@ main_window::construct_edit_menu (QMenuB
   QKeySequence ctrl_shift = Qt::ControlModifier + Qt::ShiftModifier;
 
   _undo_action
     = edit_menu->addAction (QIcon (":/actions/icons/undo.png"), tr ("Undo"));
   _undo_action->setShortcut (QKeySequence::Undo);
 
   edit_menu->addSeparator ();
 
-  _cut_action
-    = edit_menu->addAction (QIcon (":/actions/icons/editcut.png"), tr ("Cut"));
-  _cut_action->setShortcut (ctrl_shift + Qt::Key_X);
-
   _copy_action
-    = edit_menu->addAction (QIcon (":/actions/icons/editcopy.png"), tr ("Copy"));
+    = edit_menu->addAction (QIcon (":/actions/icons/editcopy.png"),
+                            tr ("Copy"));
   _copy_action->setShortcut (ctrl_shift + Qt::Key_C);
 
   _paste_action
-    = edit_menu->addAction (QIcon (":/actions/icons/editpaste.png"), tr ("Paste"));
+    = edit_menu->addAction (QIcon (":/actions/icons/editpaste.png"),
+                            tr ("Paste"));
   _paste_action->setShortcut (ctrl_shift + Qt::Key_V);
 
-  QAction *select_all_action
-    = edit_menu->addAction (tr ("Select All"));
-  select_all_action->setEnabled (false); // TODO: Make this work.
-
-  QAction *delete_action
-    = edit_menu->addAction (tr ("Delete"));
-  delete_action->setShortcut (Qt::Key_Delete);
-  delete_action->setEnabled (false); // TODO: Make this work.
-
   edit_menu->addSeparator ();
 
   QAction *find_files_action
     = edit_menu->addAction (tr ("Find Files..."));
   find_files_action->setShortcut (ctrl_shift + Qt::Key_F);
 
   edit_menu->addSeparator ();
 
@@ -1060,20 +1060,20 @@ main_window::construct_edit_menu (QMenuB
 
   QAction *clear_command_history
     = edit_menu->addAction(tr ("Clear Command History"));
 
   QAction *clear_workspace_action
     = edit_menu->addAction (tr ("Clear Workspace"));
 
   connect (_copy_action, SIGNAL (triggered()),
-           command_window, SLOT (copyClipboard ()));
+           this, SLOT (copyClipboard ()));
 
   connect (_paste_action, SIGNAL (triggered()),
-           command_window, SLOT (pasteClipboard ()));
+           this, SLOT (pasteClipboard ()));
 
   connect (find_files_action, SIGNAL (triggered()),
            this, SLOT (find_files ()));
 
   connect (clear_command_window_action, SIGNAL (triggered ()),
            this, SLOT (handle_clear_command_window_request ()));
 
   connect (clear_command_history, SIGNAL (triggered ()),
@@ -1329,17 +1329,16 @@ main_window::construct_tool_bar (void)
   _main_tool_bar = addToolBar ("Main");
 
   _main_tool_bar->setObjectName ("MainToolBar");
   _main_tool_bar->addAction (_new_script_action);
   _main_tool_bar->addAction (_open_action);
 
   _main_tool_bar->addSeparator ();
 
-  _main_tool_bar->addAction (_cut_action);
   _main_tool_bar->addAction (_copy_action);
   _main_tool_bar->addAction (_paste_action);
   _main_tool_bar->addAction (_undo_action);
 
   _main_tool_bar->addSeparator ();
 
   _current_directory_combo_box = new QComboBox (this);
   _current_directory_combo_box->setFixedWidth (current_directory_width);
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -81,16 +81,19 @@ signals:
   void new_file_signal (const QString&);
   void open_file_signal (const QString&);
 
   void insert_debugger_pointer_signal (const QString& file, int line);
   void delete_debugger_pointer_signal (const QString& file, int line);
   void update_breakpoint_marker_signal (bool insert, const QString& file,
                                         int line);
 
+  void copyClipboard_signal (void);
+  void pasteClipboard_signal (void);
+
 public slots:
   void report_status_message (const QString& statusMessage);
   void handle_save_workspace_request (void);
   void handle_load_workspace_request (const QString& file = QString ());
   void handle_clear_command_window_request (void);
   void handle_clear_workspace_request (void);
   void handle_clear_history_request (void);
   void handle_rename_variable_request (const QString& old_name,
@@ -133,16 +136,19 @@ public slots:
   void handle_update_breakpoint_marker_request (bool insert,
                                                 const QString& file, int line);
 
   void read_settings (void);
   void set_window_layout (QSettings *settings);
   void write_settings (void);
   void connect_visibility_changed (void);
 
+  void copyClipboard (void);
+  void pasteClipboard (void);
+
   void connect_uiwidget_links ();
 
   void handle_create_dialog (const QString& message, const QString& title,
                              const QString& icon, const QStringList& button,
                              const QString& defbutton,
                              const QStringList& role);
 
   void handle_create_listview (const QStringList& list, const QString& mode,
@@ -251,17 +257,16 @@ private:
   QAction *_debug_step_into;
   QAction *_debug_step_over;
   QAction *_debug_step_out;
   QAction *_debug_quit;
 
   QAction *_new_script_action;
   QAction *_open_action;
 
-  QAction *_cut_action;
   QAction *_copy_action;
   QAction *_paste_action;
   QAction *_undo_action;
 
   // Toolbars.
   QComboBox *_current_directory_combo_box;
   static const int current_directory_width = 300;
   static const int current_directory_max_visible = 16;
diff --git a/libgui/src/octave-qt-link.cc b/libgui/src/octave-qt-link.cc
--- a/libgui/src/octave-qt-link.cc
+++ b/libgui/src/octave-qt-link.cc
@@ -34,16 +34,22 @@ along with Octave; see the file COPYING.
 #include "workspace-element.h"
 #include "builtin-defun-decls.h"
 #include "load-path.h"
 #include "oct-env.h"
 #include "utils.h"
 
 #include "octave-qt-link.h"
 
+#if defined (Q_OS_WIN32)
+#define WIN32_LEAN_AND_MEAN
+#define _WIN32_WINNT 0x0500 
+#include <windows.h>
+#endif
+
 octave_qt_link::octave_qt_link (octave_main_thread *mt)
   : octave_link (), main_thread (mt)
 { }
 
 octave_qt_link::~octave_qt_link (void) { }
 
 void
 octave_qt_link::execute_interpreter (void)
@@ -366,21 +372,35 @@ void
 octave_qt_link::do_clear_history (void)
 {
   emit clear_history_signal ();
 }
 
 void
 octave_qt_link::do_pre_input_event (void)
 {
+#if defined (Q_OS_WIN32)
+  // Disable Ctrl-C processing on stdin.
+  HANDLE hStdIn = GetStdHandle (STD_INPUT_HANDLE);
+  DWORD mode;
+  GetConsoleMode (hStdIn, &mode);
+  SetConsoleMode (hStdIn, mode & ~ ENABLE_PROCESSED_INPUT);
+#endif
 }
 
 void
 octave_qt_link::do_post_input_event (void)
 {
+#if defined (Q_OS_WIN32)
+  // Enable Ctrl-C processing on stdin.
+  HANDLE hStdIn = GetStdHandle (STD_INPUT_HANDLE);
+  DWORD mode;
+  GetConsoleMode (hStdIn, &mode);
+  SetConsoleMode (hStdIn, mode | ENABLE_PROCESSED_INPUT);
+#endif
 }
 
 void
 octave_qt_link::do_enter_debugger_event (const std::string& file, int line)
 {
   do_insert_debugger_pointer (file, line);
 
   emit enter_debugger_signal ();
diff --git a/libgui/src/terminal-dock-widget.cc b/libgui/src/terminal-dock-widget.cc
--- a/libgui/src/terminal-dock-widget.cc
+++ b/libgui/src/terminal-dock-widget.cc
@@ -31,60 +31,29 @@ terminal_dock_widget::terminal_dock_widg
   : octave_dock_widget (p), terminal (QTerminal::create (p))
 {
   terminal->setObjectName ("OctaveTerminal");
   terminal->setFocusPolicy (Qt::StrongFocus);
 
   setObjectName ("TerminalDockWidget");
   setWindowIcon (QIcon(":/actions/icons/logo.png"));
   setWindowTitle (tr ("Command Window"));
+
   setWidget (terminal);
-
-  connect (this, SIGNAL (visibilityChanged (bool)),
-           this, SLOT (handle_visibility (bool)));
-
-  // Forward signals to QTerminal widget.
-
-  connect (this, SIGNAL (notice_settings_signal (const QSettings *)),
-           terminal, SLOT (notice_settings (const QSettings *)));
-
-  connect (this, SIGNAL (copyClipboard_signal (void)),
-           terminal, SLOT (copyClipboard (void)));
-
-  connect (this, SIGNAL (pasteClipboard_signal (void)),
-           terminal, SLOT (pasteClipboard (void)));
 }
 
 bool
 terminal_dock_widget::has_focus (void) const
 {
   QWidget *w = widget ();
 
   return w->hasFocus ();
 }
 
 void
-terminal_dock_widget::notice_settings (const QSettings *settings)
-{
-  emit notice_settings_signal (settings);
-}
-
-void
-terminal_dock_widget::copyClipboard (void)
-{
-  emit copyClipboard_signal ();
-}
-
-void
-terminal_dock_widget::pasteClipboard (void)
-{
-  emit pasteClipboard_signal ();
-}
-
-void
 terminal_dock_widget::focus (void)
 {
   octave_dock_widget::focus ();
 
   QWidget *w = widget ();
 
   w->setFocus ();
   w->activateWindow ();
diff --git a/libgui/src/terminal-dock-widget.h b/libgui/src/terminal-dock-widget.h
--- a/libgui/src/terminal-dock-widget.h
+++ b/libgui/src/terminal-dock-widget.h
@@ -34,34 +34,16 @@ class terminal_dock_widget : public octa
   Q_OBJECT
 
 public:
 
   terminal_dock_widget (QWidget *parent = 0);
 
   bool has_focus (void) const;
 
-signals:
-
-public slots:
-
-  void notice_settings (const QSettings *settings);
-
-  void copyClipboard (void);
-
-  void pasteClipboard (void);
-
   void focus (void);
 
-signals:
-
-  void notice_settings_signal (const QSettings *settings); 
-
-  void copyClipboard_signal (void);
-
-  void pasteClipboard_signal (void);
-
 private:
 
   QTerminal *terminal;
 };
 
 #endif // TERMINALDOCKWIDGET_H
