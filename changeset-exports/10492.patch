# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1270628158 -7200
#      Wed Apr 07 10:15:58 2010 +0200
# Node ID a6b64a7a37693c30f92e93c13a957b5e6ccb41e8
# Parent  077fef5da460989098e2cc21bfae9e2b63d6bb9f
make feval work with overloaded handles

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2010-04-07  Jaroslav Hajek  <highegg@gmail.com>
+
+	* str-vec.h (string_vector::string_vector (const Array<std::string>)):
+	New constructor.
+
 2010-04-06  Jaroslav Hajek  <highegg@gmail.com>
 
 	* idx-vector.cc (idx_vector::complement): Rewrite.
 
 2010-04-06  Jaroslav Hajek  <highegg@gmail.com>
 
 	* Sparse.cc (Sparse<T>::maybe_delete_elements): Rename to
 	delete_elements. Use const reference arguments.
diff --git a/liboctave/str-vec.h b/liboctave/str-vec.h
--- a/liboctave/str-vec.h
+++ b/liboctave/str-vec.h
@@ -46,16 +46,19 @@ public:
   string_vector (const std::string& s) : Array<std::string> (1, 1, s) { }
 
   string_vector (const string_vector& s) : Array<std::string> (s) { }
 
   string_vector (const std::list<std::string>& lst);
 
   string_vector (const std::set<std::string>& lst);
 
+  string_vector (const Array<std::string>& s)
+    : Array<std::string> (s.as_column ()) { }
+
   string_vector (const char * const *s);
 
   string_vector (const char * const *s, octave_idx_type n);
 
   string_vector& operator = (const string_vector& s)
   {
     if (this != &s)
       Array<std::string>::operator = (s);
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2010-04-07  Jaroslav Hajek  <highegg@gmail.com>
+
+	* oct-parse.yy (feval): Use do_multi_index_op on handles.
+	(get_feval_args): Use array slicing functions rather than loops.
+
 2010-04-06  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-base-sparse.cc (octave_base_sparse::delete_elements): Rewrite.
 
 2010-04-02  Judd Storrs  <jstorrs@gmail.com>
 
 	* octave.cc (intern_argv): Truncate argv when script files are
 	run without command line parameters. Resolves bug #29423.
diff --git a/src/oct-parse.yy b/src/oct-parse.yy
--- a/src/oct-parse.yy
+++ b/src/oct-parse.yy
@@ -4052,38 +4052,23 @@ feval (octave_function *fcn, const octav
     retval = fcn->do_multi_index_op (nargout, args);
 
   return retval;
 }
 
 static octave_value_list
 get_feval_args (const octave_value_list& args)
 {
-  int tmp_nargin = args.length () - 1;
-
-  octave_value_list retval (tmp_nargin, octave_value ());
-
-  for (int i = 0; i < tmp_nargin; i++)
-    retval(i) = args(i+1);
+  octave_value_list retval = args.slice (1, args.length () - 1);
 
   string_vector arg_names = args.name_tags ();
 
-  if (! arg_names.empty ())
+  if (arg_names.length () > 1)
     {
-      // tmp_nargin and arg_names.length () - 1 may differ if
-      // we are passed all_va_args.
-
-      int n = arg_names.length () - 1;
-
-      int len = n > tmp_nargin ? tmp_nargin : n;
-
-      string_vector tmp_arg_names (len);
-
-      for (int i = 0; i < len; i++)
-        tmp_arg_names(i) = arg_names(i+1);
+      string_vector tmp_arg_names = arg_names.linear_slice (1, args.length () - 1);
 
       retval.stash_name_tags (tmp_arg_names);
     }
 
   return retval;
 }
 
 
@@ -4110,27 +4095,24 @@ feval (const octave_value_list& args, in
 
           if (! error_state)
             {
               octave_value_list tmp_args = get_feval_args (args);
 
               retval = feval (name, tmp_args, nargout);
             }
         }
-      else
+      else if (f_arg.is_function_handle () || f_arg.is_inline_function ())
         {
-          octave_function *fcn = f_arg.function_value ();
-
-          if (fcn)
-            {
-              octave_value_list tmp_args = get_feval_args (args);
-
-              retval = feval (fcn, tmp_args, nargout);
-            }
+          const octave_value_list tmp_args = get_feval_args (args);
+
+          retval = f_arg.do_multi_index_op (nargout, tmp_args);
         }
+      else
+        error ("feval: first argument must be a string, inline function or a function handle");
     }
 
   return retval;
 }
 
 DEFUN (feval, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} feval (@var{name}, @dots{})\n\
