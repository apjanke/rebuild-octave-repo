# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1276504907 -7200
#      Mon Jun 14 10:41:47 2010 +0200
# Node ID c49911ab7ac7ff9dd5846e110cf0c28075bd58cb
# Parent  657e63dcfd88c14d2a78d7f89e917fb39fa5664e
implement missing copy_data case in idx_vector (bug #30099)

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2010-06-14  Jaroslav Hajek  <highegg@gmail.com>
+
+	* idx-vector.cc (idx_vector::copy_data): Handle class_mask case.
+	(idx_vector::increment): Fix class_colon and add class_mask.
+
 2010-06-06  Michael Goffioul  <michael.goffioul@gmail.com>
 
 	* mx-op-defs.h (MNANCHK): Add matrix element type argument and use it
 	to specify template argument for mx_inline_any_nan.
 	(MS_BOOL_OP, SM_BOOL_OP, MM_BOOL_OP, NDS_BOOL_OP, SND_BOOL_OP,
 	NDND_BOOL_OP): Specify new MNANCHK argument.
 
 2010-06-04  Jaroslav Hajek  <highegg@gmail.com>
diff --git a/liboctave/idx-vector.cc b/liboctave/idx-vector.cc
--- a/liboctave/idx-vector.cc
+++ b/liboctave/idx-vector.cc
@@ -1009,23 +1009,24 @@ octave_idx_type
 idx_vector::increment (void) const
 {
   octave_idx_type retval = 0;
 
   switch (rep->idx_class ())
     {
     case class_colon:
       retval = 1;
-      // fall through...
+      break;
 
     case class_range:
       retval = dynamic_cast<idx_range_rep *> (rep) -> get_step ();
       break;
 
     case class_vector:
+    case class_mask:
       {
         if (length (0) > 1)
           retval = elem (1) - elem (0);
       }
       break;
 
     default:
       break;
@@ -1082,16 +1083,27 @@ idx_vector::copy_data (octave_idx_type *
     case class_vector:
       {
         idx_vector_rep * r = dynamic_cast<idx_vector_rep *> (rep);
         const octave_idx_type *rdata = r->get_data ();
         copy_or_memcpy (len, rdata, data);
       }
       break;
 
+    case class_mask:
+      {
+        idx_mask_rep * r = dynamic_cast<idx_mask_rep *> (rep);
+        const bool *mask = r->get_data ();
+        octave_idx_type ext = r->extent (0);
+        for (octave_idx_type i = 0, j = 0; i < ext; i++)
+          if (mask[i])
+            data[j++] = i;
+      }
+    break;
+
     default:
       assert (false);
       break;
     }
 }
 
 idx_vector
 idx_vector::complement (octave_idx_type n) const
