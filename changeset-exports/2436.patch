# HG changeset patch
# User jwe
# Date 846627039 0
#      Tue Oct 29 22:10:39 1996 +0000
# Node ID a628e881be66044d187a7206fb1ae249e44eb55e
# Parent  3be97fe02051f7c622bca0faddac416174a0eead
[project @ 1996-10-29 22:08:28 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,21 @@
+Tue Oct 29 15:54:27 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* ov-range.cc (octave_range::index): New Function.
+	(octave_range::all, octave_range::any, octave_range::is_true):
+	Make these functions work.
+
+	* ov.cc (octave_value::try_assignment_with_conversion): Remove
+	left over debugging print statements.
+
+Mon Oct 28 10:49:03 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* strftime.c: Add missing #endif for previous change.
+
 Sun Oct 27 14:06:44 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* oct-hist.cc (do_history): Rewite option parsing to avoid
 	(probably bogus) errors from g++ on cygwin32 system.
 
 	* strftime.c: Use autoconf macros TIME_WITH_SYS_TIME and
 	HAVE_SYS_TIME_H to decide which time.h files to include.
 
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -1144,21 +1144,23 @@ read_mat_binary_data (istream& is, const
 
   if (imag && type == 1)
     {
       error ("load: encountered complex matrix with string flag set!");
       return 0;
     }
 
   // LEN includes the terminating character, and the file is also
-  // supposed to include it.
+  // supposed to include it, but apparently not all files do.  Either
+  // way, I think this should work.
 
-  name = new char [len];
+  name = new char [len+1];
   if (! is.read (name, len))
     goto data_read_error;
+  name[len] = '\0';
 
   dlen = nr * nc;
   if (dlen < 0)
     goto data_read_error;
 
   re.resize (nr, nc);
 
   read_mat_binary_data (is, re.fortran_vec (), prec, dlen, swap, flt_fmt);
diff --git a/src/ov-range.cc b/src/ov-range.cc
--- a/src/ov-range.cc
+++ b/src/ov-range.cc
@@ -73,16 +73,34 @@ octave_range::try_narrowing_conversion (
 
     default:
       break;
     }
 
   return retval;
 }
 
+octave_value
+octave_range::index (const octave_value_list& idx) const
+{
+  // XXX FIXME XXX -- this doesn't solve the problem of
+  //
+  //   a = 1:5; a(1, 1, 1)
+  //
+  // and similar constructions.  Hmm...
+
+  // XXX FIXME XXX -- using this constructor avoids possibly narrowing
+  // the range to a scalar value.  Need a better solution to this
+  // problem.
+
+  octave_value tmp (new octave_matrix (range.matrix_value ()));
+
+  return tmp.index (idx);
+}
+
 double
 octave_range::double_value (bool) const
 {
   double retval = octave_NaN;
 
   int nel = range.nelem ();
 
   if (nel == 1 || (nel > 1 && Vdo_fortran_indexing))
@@ -91,34 +109,52 @@ octave_range::double_value (bool) const
     gripe_invalid_conversion ("range", "real scalar");
 
   return retval;
 }
 
 octave_value
 octave_range::all (void) const
 {
-  octave_value retval;
-  error ("octave_range::all(): not implemented");
-  return retval;
+  // XXX FIXME XXX -- this is a potential waste of memory.
+
+  Matrix m = range.matrix_value ();
+
+  return m.all ();
 }
 
 octave_value
 octave_range::any (void) const
 {
-  octave_value retval;
-  error ("octave_range::any(): not implemented");
-  return retval;
+  return (double) (range.base () != 0.0 || range.nelem () > 1);
 }
 
 bool
 octave_range::is_true (void) const
 {
   bool retval = false;
-  error ("octave_range::is_true(): not implemented");
+
+  if (range.nelem () == 0)
+    {
+      int flag = Vpropagate_empty_matrices;
+
+      if (flag < 0)
+	warning ("empty range used in conditional expression");
+      else if (flag == 0)
+	error ("empty range used in conditional expression");
+    }
+  else
+    {
+      // XXX FIXME XXX -- this is a potential waste of memory.
+
+      Matrix m ((range.matrix_value () . all ()) . all ());
+
+      retval = (m.rows () == 1 && m.columns () == 1 && m (0, 0) != 0.0);
+    }
+
   return retval;
 }
 
 Complex
 octave_range::complex_value (bool) const
 {
   Complex retval (octave_NaN, octave_NaN);
 
diff --git a/src/ov-range.h b/src/ov-range.h
--- a/src/ov-range.h
+++ b/src/ov-range.h
@@ -84,16 +84,18 @@ public:
   void *operator new (size_t size);
   void operator delete (void *p, size_t size);
 #endif
 
   type_conv_fcn numeric_conversion_function (void) const;
 
   octave_value *try_narrowing_conversion (void);
 
+  octave_value index (const octave_value_list& idx) const;
+
   idx_vector index_vector (void) const { return idx_vector (range); }
 
   int rows (void) const { return (columns () > 0); }
   int columns (void) const { return range.nelem (); }
 
   bool is_defined (void) const { return true; }
 
   bool is_range (void) const { return true; }
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -629,19 +629,16 @@ octave_value::try_assignment_with_conver
 
       if (cf_this)
 	{
 	  old_rep = rep;
 	  rep = cf_this (*rep);
 	  rep->count = 1;
 	}
 
-      cerr << type_name () << "\n";
-      cerr << tmp_rhs.type_name () << "\n";
-
       if (cf_this || cf_rhs)
 	{
 	  assignment_ok = try_assignment (idx, tmp_rhs);
 
 	  if (! (error_state || assignment_ok))
 	    assignment_ok = convert_and_assign (idx, tmp_rhs);
 	}
 
diff --git a/src/strftime.c b/src/strftime.c
--- a/src/strftime.c
+++ b/src/strftime.c
@@ -85,16 +85,17 @@
 #include <sys/time.h>
 #include <time.h>
 #else
 #if defined(HAVE_SYS_TIME_H)
 #include <sys/time.h>
 #else
 #include <time.h>
 #endif
+#endif
 
 #ifndef STDC_HEADERS
 time_t mktime ();
 #endif
 
 #if defined(HAVE_TZNAME)
 extern char *tzname[2];
 #endif
