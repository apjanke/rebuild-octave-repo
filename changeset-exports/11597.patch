# HG changeset patch
# User Jordi Gutiérrez Hermoso <jordigh@gmail.com>
# Date 1295633738 18000
#      Fri Jan 21 13:15:38 2011 -0500
# Node ID a066673566da7c60fd80a30fe38263ba9ebaea57
# Parent  a9cf422ed849ac6f4efe4b9cec03b3ec7e2a51fd
set clim to [0,1] so that scaled cdatamapping works as intended.

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2011-01-20  Jordi Gutiérrez Hermoso  <jordigh@gmail.com>
+
+	* image/imshow.m: Fix handling of clim and display_range so that
+	images are more faithfully reproduced.
+
 2011-01-20  Rik  <octave@nomad.inbox5.com>
 
 	* scripts/image/imshow.m, scripts/image/saveimage.m,
 	scripts/io/dlmwrite.m, scripts/io/strread.m,
 	scripts/miscellaneous/license.m, scripts/optimization/glpk.m,
 	scripts/plot/refreshdata.m, scripts/plot/shading.m,
 	scripts/plot/slice.m, scripts/plot/surfl.m, scripts/plot/uimenu.m,
 	scripts/statistics/base/mean.m, scripts/statistics/base/moment.m,
diff --git a/scripts/image/imshow.m b/scripts/image/imshow.m
--- a/scripts/image/imshow.m
+++ b/scripts/image/imshow.m
@@ -119,20 +119,17 @@ function h = imshow (im, varargin)
   if (isempty (display_range))
     display_range = [min(im(:)), max(im(:))];
   elseif (isna (display_range))
     t = class (im);
     switch (t)
       case {"double", "single", "logical"}
         display_range = [0, 1];
       case {"int8", "int16", "int32", "uint8", "uint16", "uint32"}
-        ## For compatibility, uint8 data should not be handled as
-        ## double.  Doing so is a quick fix to allow the images to be
-        ## displayed correctly.
-        display_range = double ([intmin(t), intmax(t)]);
+        display_range = [intmin(t), intmax(t)];
       otherwise
         error ("imshow: invalid data type for image");
     endswitch
   endif
 
   ## Check for complex images.
   if (iscomplex (im))
     warning ("imshow: only showing real part of complex image");
@@ -146,30 +143,31 @@ function h = imshow (im, varargin)
     im(nans) = display_range(1);
   endif
 
   ## This is for compatibility.
   if (! (indexed || (true_color && isinteger (im))) || islogical (im))
     im = double (im);
   endif
 
-  ## Scale the image to the interval [0, 1] according to display_range.
+  ## Clamp the image to the range boundaries
   if (! (true_color || indexed || islogical (im)))
     low = display_range(1);
     high = display_range(2);
-    im = (im-low)/(high-low);
-    im(im < 0) = 0;
-    im(im > 1) = 1;
+    im(im < low) = low;
+    im(im > high) = high;
   endif
 
   if (true_color || indexed)
     tmp = image ([], [], im);
   else
     tmp = image (im);
     set (tmp, "cdatamapping", "scaled");
+    ## The backend is responsible for scaling to clim if necessary.
+    set (gca (), "clim", display_range);
   endif
   set (gca (), "visible", "off", "ydir", "reverse");
   axis ("image");
 
   if (nargout > 0)
     h = tmp;
   endif
 
