# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1249414334 14400
#      Tue Aug 04 15:32:14 2009 -0400
# Node ID bbe033dcfe132967fa7ba3e6963a42d4d75e8f6f
# Parent  25c2e92ee03c19d3640005950026aaaddee726e9
make dbwhere work when called at keyboard prompt

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,32 @@
+2009-08-04  John W. Eaton  <jwe@octave.org>
+
+	* debug.cc (Fdbwhere): Call octave_call_stack::goto_frame_relative
+	to move to user code frame.  Get line and column information from
+	call stack.
+	* input.cc (Fkeyboard): Don't pass verbose flag to
+	octave_call_stack::goto_frame_relative.
+	(get_debug_input): Get line and column information from call stack.
+	* pt-eval.h, pt-eval.cc (tree_evaluator::debug_line,
+	tree_evaluator::debug_column, tree_evaluator::db_line,
+	tree_evaluator::db_column): Delete.
+	* pt-eval.cc (tree_evaluator::do_breakpoint): Don't print function
+	name and location info here.  Delete line and column number args.
+	Change all callers.
+
+	* toplev.h (octave_call_stack::do_current,
+	octave_call_stack::do_current_statement): New functions.
+	(octave_call_stack::current): Call do_current, not top.
+	(octave_call_stack::current_statement): Call do_current_statement,
+	not top_statement.
+	(octave_call_stack::top, octave_call_stack::top_statement,
+	octave_call_stack::do_top, octave_call_stack::do_top_statement):
+	Delete.
+
 2009-08-04  John W. Eaton  <jwe@octave.org>
 
 	* toplev.cc (octave_call_stack::do_goto_frame_relative): Allow
 	NSKIP to be 0.  Set current scope and context.
 	* input.cc (Fkeyboard): Use octave_call_stack::goto_frame_relative
 	to set scope in user code that called the keyboard function.
 
 2009-08-04  Jaroslav Hajek  <highegg@gmail.com>
diff --git a/src/debug.cc b/src/debug.cc
--- a/src/debug.cc
+++ b/src/debug.cc
@@ -656,39 +656,49 @@ Show where we are in the code\n\
 	{
 	  have_file = false;
 
 	  name = dbg_fcn->name ();
 	}
 
       octave_stdout << name << ":";
 
-      int l = tree_evaluator::debug_line ();
+      unwind_protect::frame_id_t uwp_frame = unwind_protect::begin_frame ();
+
+      unwind_protect::add_fcn (octave_call_stack::restore_frame, 
+			       octave_call_stack::current_frame ());
+
+      // Skip the frame assigned to the dbwhere function.
+      octave_call_stack::goto_frame_relative (0);
+
+      int l = octave_call_stack::current_line ();
 
       if (l > 0)
 	{
 	  octave_stdout << " line " << l;
 
-	  int c = tree_evaluator::debug_column ();
+	  int c = octave_call_stack::current_column ();
 
 	  if (c > 0)
 	    octave_stdout << ", column " << c;
 
 	  octave_stdout << std::endl;
 
 	  if (have_file)
 	    {
 	      std::string line = get_file_line (name, l);
 
 	      if (! line.empty ())
 		octave_stdout << l << ": " << line << std::endl;
 	    }
 	}
       else
 	octave_stdout << " (unknown line)\n";
+
+      unwind_protect::run_frame (uwp_frame);
     }
   else
     error ("dbwhere: must be inside of a user function to use dbwhere\n");
 
   return retval;
 }
 
 // Copied and modified from the do_type command in help.cc
diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -593,17 +593,17 @@ initialize_command_input (void)
 }
 
 static void
 get_debug_input (const std::string& prompt)
 {
   octave_user_code *caller = octave_call_stack::caller_user_code ();
   std::string nm;
 
-  int curr_debug_line = tree_evaluator::debug_line ();
+  int curr_debug_line = octave_call_stack::current_line ();
 
   bool have_file = false;
 
   if (caller)
     {
       nm = caller->fcn_file_name ();
 
       if (nm.empty ())
@@ -644,22 +644,17 @@ get_debug_input (const std::string& prom
 		buf << "\n" << curr_debug_line << ": " << line_buf;
 	    }
 	}
     }
 
   std::string msg = buf.str ();
 
   if (! msg.empty ())
-    {
-      if (! Vgud_mode)
-	std::cerr << "keyboard: ";
-
-      std::cerr << msg << std::endl;
-    }
+    std::cerr << msg << std::endl;
 
   unwind_protect::frame_id_t uwp_frame = unwind_protect::begin_frame ();
 
   unwind_protect::protect_var (VPS1);
   VPS1 = prompt;
 
   while (Vdebugging)
     {
@@ -897,16 +892,22 @@ do_keyboard (const octave_value_list& ar
   unwind_protect::add_fcn (command_history::ignore_entries, ! Vsaving_history);
 
   unwind_protect::protect_var (Vsaving_history);
   unwind_protect::protect_var (Vdebugging);
 
   unwind_protect::add_fcn (octave_call_stack::restore_frame, 
                            octave_call_stack::current_frame ());
 
+  // FIXME -- probably we just want to print one line, not the
+  // entire statement, which might span many lines...
+  //
+  // tree_print_code tpc (octave_stdout);
+  // stmt.accept (tpc);
+
   Vsaving_history = true;
   Vdebugging = true;
 
   std::string prompt = "debug> ";
   if (nargin > 0)
     prompt = args(0).string_value ();
 
   if (! error_state)
@@ -939,17 +940,17 @@ If @code{keyboard} is invoked without ar
   int nargin = args.length ();
 
   if (nargin == 0 || nargin == 1)
     {
       unwind_protect::add_fcn (octave_call_stack::restore_frame, 
 			       octave_call_stack::current_frame ());
 
       // Skip the frame assigned to the keyboard function.
-      octave_call_stack::goto_frame_relative (0, true);
+      octave_call_stack::goto_frame_relative (0);
 
       do_keyboard (args);
 
       unwind_protect::run ();
     }
   else
     print_usage ();
 
diff --git a/src/pt-eval.cc b/src/pt-eval.cc
--- a/src/pt-eval.cc
+++ b/src/pt-eval.cc
@@ -52,19 +52,16 @@ int tree_evaluator::dbstep_flag = 0;
 size_t tree_evaluator::current_frame = 0;
 
 bool tree_evaluator::debug_mode = false;
 
 bool tree_evaluator::in_fcn_or_script_body = false;
 
 bool tree_evaluator::in_loop_command = false;
 
-int tree_evaluator::db_line = -1;
-int tree_evaluator::db_column = -1;
-
 // If TRUE, turn off printing of results in functions (as if a
 // semicolon has been appended to each statement).
 static bool Vsilent_functions = false;
 
 // Normal evaluator.
 
 void
 tree_evaluator::visit_anon_fcn_handle (tree_anon_fcn_handle&)
@@ -85,17 +82,17 @@ tree_evaluator::visit_binary_expression 
 }
 
 void
 tree_evaluator::visit_break_command (tree_break_command& cmd)
 {
   if (! error_state)
     {
       if (debug_mode)
-	do_breakpoint (cmd.is_breakpoint (), cmd.line (), cmd.column ());
+	do_breakpoint (cmd.is_breakpoint ());
 
       tree_break_command::breaking = 1;
     }
 }
 
 void
 tree_evaluator::visit_colon_expression (tree_colon_expression&)
 {
@@ -184,26 +181,26 @@ tree_evaluator::do_decl_init_list (decl_
 	}
     }
 }
 
 void
 tree_evaluator::visit_global_command (tree_global_command& cmd)
 {
   if (debug_mode)
-    do_breakpoint (cmd.is_breakpoint (), cmd.line (), cmd.column ());
+    do_breakpoint (cmd.is_breakpoint ());
 
   do_decl_init_list (do_global_init, cmd.initializer_list ());
 }
 
 void
 tree_evaluator::visit_static_command (tree_static_command& cmd)
 {
   if (debug_mode)
-    do_breakpoint (cmd.is_breakpoint (), cmd.line (), cmd.column ());
+    do_breakpoint (cmd.is_breakpoint ());
 
   do_decl_init_list (do_static_init, cmd.initializer_list ());
 }
 
 void
 tree_evaluator::visit_decl_elt (tree_decl_elt&)
 {
   panic_impossible ();
@@ -275,17 +272,17 @@ quit_loop_now (void)
 
 void
 tree_evaluator::visit_simple_for_command (tree_simple_for_command& cmd)
 {
   if (error_state)
     return;
 
   if (debug_mode)
-    do_breakpoint (cmd.is_breakpoint (), cmd.line (), cmd.column ());
+    do_breakpoint (cmd.is_breakpoint ());
 
   unwind_protect::frame_id_t uwp_frame = unwind_protect::begin_frame ();
 
   unwind_protect::protect_var (in_loop_command);
 
   in_loop_command = true;
 
   tree_expression *expr = cmd.control_expr ();
@@ -397,17 +394,17 @@ tree_evaluator::visit_simple_for_command
 
 void
 tree_evaluator::visit_complex_for_command (tree_complex_for_command& cmd)
 {
   if (error_state)
     return;
 
   if (debug_mode)
-    do_breakpoint (cmd.is_breakpoint (), cmd.line (), cmd.column ());
+    do_breakpoint (cmd.is_breakpoint ());
 
   unwind_protect::frame_id_t uwp_frame = unwind_protect::begin_frame ();
 
   unwind_protect::protect_var (in_loop_command);
 
   in_loop_command = true;
 
   tree_expression *expr = cmd.control_expr ();
@@ -536,17 +533,17 @@ tree_evaluator::visit_if_command_list (t
 {
   for (tree_if_command_list::iterator p = lst.begin (); p != lst.end (); p++)
     {
       tree_if_clause *tic = *p;
 
       tree_expression *expr = tic->condition ();
 
       if (debug_mode && ! tic->is_else_clause ())
-	do_breakpoint (tic->is_breakpoint (), tic->line (), tic->column ());
+	do_breakpoint (tic->is_breakpoint ());
 
       if (tic->is_else_clause () || expr->is_logically_true ("if"))
 	{
 	  if (! error_state)
 	    {
 	      tree_statement_list *stmt_lst = tic->commands ();
 
 	      if (stmt_lst)
@@ -581,17 +578,17 @@ tree_evaluator::visit_multi_assignment (
 {
   panic_impossible ();
 }
 
 void
 tree_evaluator::visit_no_op_command (tree_no_op_command& cmd)
 {
   if (debug_mode && cmd.is_end_of_fcn_or_script ())
-    do_breakpoint (cmd.is_breakpoint (), cmd.line (), cmd.column (), true);
+    do_breakpoint (cmd.is_breakpoint (), true);
 }
 
 void
 tree_evaluator::visit_constant (tree_constant&)
 {
   panic_impossible ();
 }
 
@@ -620,17 +617,17 @@ tree_evaluator::visit_prefix_expression 
 }
 
 void
 tree_evaluator::visit_return_command (tree_return_command& cmd)
 {
   if (! error_state)
     {
       if (debug_mode)
-	do_breakpoint (cmd.is_breakpoint (), cmd.line (), cmd.column ());
+	do_breakpoint (cmd.is_breakpoint ());
 
       tree_return_command::returning = 1;
     }
 }
 
 void
 tree_evaluator::visit_return_list (tree_return_list&)
 {
@@ -661,18 +658,17 @@ tree_evaluator::visit_statement (tree_st
 
       try
 	{
 	  if (cmd)
 	    cmd->accept (*this);
 	  else
 	    {
 	      if (debug_mode)
-		do_breakpoint (expr->is_breakpoint (), expr->line (),
-			       expr->column ());
+		do_breakpoint (expr->is_breakpoint ());
 
 	      if (in_fcn_or_script_body && Vsilent_functions)
 		expr->set_print_flag (false);
 
 	      // FIXME -- maybe all of this should be packaged in
 	      // one virtual function that returns a flag saying whether
 	      // or not the expression will take care of binding ans and
 	      // printing the result.
@@ -792,17 +788,17 @@ tree_evaluator::visit_switch_command (tr
       if (! error_state && lst)
 	{
 	  for (tree_switch_case_list::iterator p = lst->begin ();
 	       p != lst->end (); p++)
 	    {
 	      tree_switch_case *t = *p;
 
 	      if (debug_mode && ! t->is_default_case ())
-		do_breakpoint (t->is_breakpoint (), t->line (), t->column ());
+		do_breakpoint (t->is_breakpoint ());
 
 	      if (t->is_default_case () || t->label_matches (val))
 		{
 		  if (error_state)
 		    break;
 
 		  tree_statement_list *stmt_lst = t->commands ();
 
@@ -1001,23 +997,20 @@ tree_evaluator::visit_while_command (tre
 
   in_loop_command = true;
 
   tree_expression *expr = cmd.condition ();
 
   if (! expr)
     panic_impossible ();
 
-  int l = expr->line ();
-  int c = expr->column ();
-
   for (;;)
     {
       if (debug_mode)
-	do_breakpoint (cmd.is_breakpoint (), l, c);
+	do_breakpoint (cmd.is_breakpoint ());
 
       if (expr->is_logically_true ("while"))
 	{
 	  tree_statement_list *loop_body = cmd.body ();
 
 	  if (loop_body)
 	    {
 	      loop_body->accept (*this);
@@ -1049,54 +1042,50 @@ tree_evaluator::visit_do_until_command (
 
   in_loop_command = true;
 
   tree_expression *expr = cmd.condition ();
 
   if (! expr)
     panic_impossible ();
 
-  int l = expr->line ();
-  int c = expr->column ();
-
   for (;;)
     {
       tree_statement_list *loop_body = cmd.body ();
 
       if (loop_body)
 	{
 	  loop_body->accept (*this);
 
 	  if (error_state)
 	    goto cleanup;
 	}
 
       if (quit_loop_now ())
 	break;
 
       if (debug_mode)
-	do_breakpoint (cmd.is_breakpoint (), l, c);
+	do_breakpoint (cmd.is_breakpoint ());
 
       if (expr->is_logically_true ("do-until"))
 	break;
     }
 
  cleanup:
   unwind_protect::run_frame (uwp_frame);
 }
 
 void
 tree_evaluator::do_breakpoint (tree_statement& stmt) const
 {
-  do_breakpoint (stmt.is_breakpoint (), stmt.line (), stmt.column (),
-		 stmt.is_end_of_fcn_or_script ());
+  do_breakpoint (stmt.is_breakpoint (), stmt.is_end_of_fcn_or_script ());
 }
 
 void
-tree_evaluator::do_breakpoint (bool is_breakpoint, int l, int c,
+tree_evaluator::do_breakpoint (bool is_breakpoint,
 			       bool is_end_of_fcn_or_script) const
 {
   bool break_on_this_statement = false;
 
   // Don't decrement break flag unless we are in the same frame as we
   // were when we saw the "dbstep N" command.
 
   if (dbstep_flag > 1)
@@ -1155,35 +1144,17 @@ tree_evaluator::do_breakpoint (bool is_b
     {
       // We get here if we are doing a "dbstep out".
 
       if (is_end_of_fcn_or_script)
 	dbstep_flag = -1;
     }
 
   if (break_on_this_statement)
-    {
-      octave_function *xfcn = octave_call_stack::current ();
-
-      if (xfcn)
-	std::cerr << xfcn->name () << ": "; 
-
-      std::cerr << "line " << l << ", " << "column " << c << std::endl;
-
-      db_line = l;
-      db_column = c;
-
-      // FIXME -- probably we just want to print one line, not the
-      // entire statement, which might span many lines...
-      //
-      // tree_print_code tpc (octave_stdout);
-      // stmt.accept (tpc);
-
-      do_keyboard ();
-    }
+    do_keyboard ();
 }
 
 DEFUN (silent_functions, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{val} =} silent_functions ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} silent_functions (@var{new_val})\n\
 Query or set the internal variable that controls whether internal\n\
 output from a function is suppressed.  If this option is disabled,\n\
diff --git a/src/pt-eval.h b/src/pt-eval.h
--- a/src/pt-eval.h
+++ b/src/pt-eval.h
@@ -127,20 +127,16 @@ public:
   void visit_try_catch_command (tree_try_catch_command&);
 
   void visit_unwind_protect_command (tree_unwind_protect_command&);
 
   void visit_while_command (tree_while_command&);
 
   void visit_do_until_command (tree_do_until_command&);
 
-  static int debug_line (void) { return db_line; }
-
-  static int debug_column (void) { return db_column; }
-
   // If > 0, stop executing at the (N-1)th stopping point, counting
   //         from the the current execution point in the current frame.
   //
   // If < 0, stop executing at the next possible stopping point.
   static int dbstep_flag;
 
   // The number of the stack frame we are currently debugging.
   static size_t current_frame;
@@ -155,22 +151,19 @@ public:
 
 private:
 
   void do_decl_init_list (decl_elt_init_fcn fcn,
 			  tree_decl_init_list *init_list);
 
   void do_breakpoint (tree_statement& stmt) const;
 
-  void do_breakpoint (bool is_breakpoint, int l, int c,
+  void do_breakpoint (bool is_breakpoint,
 		      bool is_end_of_fcn_or_script = false) const;
 
-  static int db_line;
-  static int db_column;
-
   // No copying!
 
   tree_evaluator (const tree_evaluator&);
 
   tree_evaluator& operator = (const tree_evaluator&);
 };
 
 extern tree_evaluator *current_evaluator;
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -99,25 +99,25 @@ bool octave_initialized = false;
 // Current command to execute.
 tree_statement_list *global_command = 0;
 
 octave_call_stack *octave_call_stack::instance = 0;
 
 int
 octave_call_stack::do_current_line (void) const
 {
-  tree_statement *stmt = do_top_statement ();
+  tree_statement *stmt = do_current_statement ();
 
   return stmt ? stmt->line () : -1;
 }
 
 int
 octave_call_stack::do_current_column (void) const
 {
-  tree_statement *stmt = do_top_statement ();
+  tree_statement *stmt = do_current_statement ();
 
   return stmt ? stmt->column () : -1;
 }
 
 int
 octave_call_stack::do_caller_user_code_line (void) const
 {
   int retval = -1;
diff --git a/src/toplev.h b/src/toplev.h
--- a/src/toplev.h
+++ b/src/toplev.h
@@ -130,20 +130,26 @@ public:
 	    retval = false;
 	  }
       }
 
     return retval;
   }
 
   // Current function (top of stack).
-  static octave_function *current (void) { return top (); }
+  static octave_function *current (void)
+  {
+    return instance_ok () ? instance->do_current () : 0;
+  }
 
   // Current statement (top of stack).
-  static tree_statement *current_statement (void) { return top_statement (); }
+  static tree_statement *current_statement (void)
+  {
+    return instance_ok () ? instance->do_current_statement () : 0;
+  }
 
   // Current line in current function.
   static int current_line (void)
   {
     return instance_ok () ? instance->do_current_line () : -1;
   }
 
   // Current column in current function.
@@ -221,26 +227,16 @@ public:
   static void
   push (symbol_table::scope_id scope = symbol_table::current_scope (),
 	symbol_table::context_id context = symbol_table::current_context ())
   {
     if (instance_ok ())
       instance->do_push (0, scope, context);
   }
 
-  static octave_function *top (void)
-  {
-    return instance_ok () ? instance->do_top (): 0;
-  }
-
-  static tree_statement *top_statement (void)
-  {
-    return instance_ok () ? instance->do_top_statement (): 0;
-  }
-
   static void set_statement (tree_statement *s)
   {
     if (instance_ok ())
       instance->do_set_statement (s);
   }
 
   static bool goto_frame (size_t n = 0, bool verbose = false)
   {
@@ -353,36 +349,36 @@ private:
 		symbol_table::context_id context)
   {
     size_t prev_frame = curr_frame;
     curr_frame = cs.size ();
     cs.push_back (call_stack_elt (f, scope, context, prev_frame));
     symbol_table::set_scope_and_context (scope, context);
   }
 
-  octave_function *do_top (void) const
+  octave_function *do_current (void) const
   {
     octave_function *retval = 0;
 
     if (! cs.empty ())
       {
-	const call_stack_elt& elt = cs.back ();
+	const call_stack_elt& elt = cs[curr_frame];
 	retval = elt.fcn;
       }
 
     return retval;
   }
 
-  tree_statement *do_top_statement (void) const
+  tree_statement *do_current_statement (void) const
   {
     tree_statement *retval = 0;
 
     if (! cs.empty ())
       {
-	const call_stack_elt& elt = cs.back ();
+	const call_stack_elt& elt = cs[curr_frame];
 	retval = elt.stmt;
       }
 
     return retval;
   }
 
   void do_set_statement (tree_statement *s)
   {
