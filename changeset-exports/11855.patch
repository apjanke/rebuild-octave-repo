# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1222258138 -7200
#      Wed Sep 24 14:08:58 2008 +0200
# Branch release-3-0-x
# Node ID eff8ac793dbf6dc756cf26db9fbc46334143f86d
# Parent  24d26caa095b5cf4856729e7ab799a830db5ee4f
clear breakpoints is function found to be out of date

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,14 +1,29 @@
 2008-09-18  David Bateman  <dbateman@free.fr>
 
 	* DLD-FUNCTIONS/fftw.cc (Ffftw): Clarify the documentation.
 
 2008-09-19  David Bateman  <dbateman@free.fr>
 
+	* debug.cc (static octave_user_function *get_user_function 
+	(const std::string&)):  Function lookup to force out of date check.
+	(bp_table::intmap bp_table::do_remove_all_breakpoints_in_file 
+	(const std::string&, bool)): Add flag to silence the error message 
+	from this function if a user code with breakpoints is not found.
+	(bp_table::fname_line_map bp_table::do_get_breakpoint_list (const 
+	octave_value_list&)): Do an out of date check on the function
+	before checking the breakpoints.
+	* debug.h (do_remove_all_breakpoints_in_file, 
+	remove_all_breakpoints_in_file): Add flag to silence error
+	message.
+	* variables.cc (static bool symbol_out_of_date (symbol_record*)):
+	If symbol out of date clear breakpoints.	
+	
+	
 	* data.cc (SINGLE_TYPE_CONCAT, DO_SINGLE_TYPE_CONCAT): New macros
 	(do_cat): Special case single type concatenations for speed.
 	* pt.mat.cc (std::string get_concat_class (const std::string&,
 	const std::string&), void maybe_warn_string_concat (bool, bool)):
 	Remove static declaration.
 	* pt-mat.h (std::string get_concat_class (const std::string&,
 	const std::string&), void maybe_warn_string_concat (bool, bool)):
 	Define extern here.
diff --git a/src/debug.cc b/src/debug.cc
--- a/src/debug.cc
+++ b/src/debug.cc
@@ -70,16 +70,20 @@ get_user_function (const std::string& fn
   if (fname.empty ())
     dbg_fcn = octave_call_stack::caller_user_function ();
   else
     {
       symbol_record *ptr = curr_sym_tab->lookup (fname);
 
       if (ptr && ptr->is_user_function ())
 	{
+	  // Do a lookup on the symbol record to force an 
+	  // out of date check on the function
+	  lookup (ptr);
+
 	  octave_value tmp = ptr->def ();
 	  dbg_fcn = dynamic_cast<octave_user_function *> (tmp.function_value ());
 	}
       else
 	{
 	  ptr = lookup_by_name (fname, false);
 
 	  if (ptr && ptr->is_user_function ())
@@ -236,17 +240,18 @@ bp_table::do_remove_breakpoint (const st
       else
 	error ("remove_breakpoint: unable to find the function requested\n");
     }
   return retval;
 }
 
 
 bp_table::intmap
-bp_table::do_remove_all_breakpoints_in_file (const std::string& fname)
+bp_table::do_remove_all_breakpoints_in_file (const std::string& fname,
+					     bool silent)
 {
   intmap retval;
 
   octave_user_function *dbg_fcn = get_user_function (fname);
   
   if (dbg_fcn)
     {
       tree_statement_list *cmds = dbg_fcn->body ();
@@ -259,17 +264,17 @@ bp_table::do_remove_all_breakpoints_in_f
 	  cmds->delete_breakpoint (lineno);
 	  retval[i] = lineno;
 	}
       
       breakpoint_map_iterator it = bp_map.find (fname);
       if (it != bp_map.end ())
 	bp_map.erase (it);
     }
-  else
+  else if (! silent)
     error ("remove_all_breakpoint_in_file: "
 	   "unable to find the function requested\n");
 
   return retval;
 }
 
 void 
 bp_table::do_remove_all_breakpoints (void)
@@ -305,26 +310,40 @@ bp_table::do_get_breakpoint_list (const 
   // Iterate through each of the files in the map and get the 
   // name and list of breakpoints.
 
   for (breakpoint_map_iterator it = bp_map.begin (); it != bp_map.end (); it++)
     {
       if (fname_list.length () == 0
 	  || do_find_bkpt_list (fname_list, it->first) != "")
 	{
-	  octave_value_list bkpts = it->second->body ()->list_breakpoints ();
+	  if (! fcn_out_of_date (it->second, it->second->fcn_file_name (), 
+				 it->second->time_parsed (). unix_time()))
+	    {
+	      octave_value_list bkpts = 
+		it->second->body ()->list_breakpoints ();
 
-	  octave_idx_type len = bkpts.length (); 
+	      octave_idx_type len = bkpts.length (); 
+
+	      if (len > 0)
+		{
+		  bp_table::intmap bkpts_vec;
 
-	  bp_table::intmap bkpts_vec;
+		  for (int i = 0; i < len; i++)
+		    bkpts_vec[i] = bkpts (i).double_value ();
 
-	  for (int i = 0; i < len; i++)
-	    bkpts_vec[i] = bkpts (i).double_value ();
-
-	  retval[it->first] = bkpts_vec;
+		  retval[it->first] = bkpts_vec;
+		}
+	    }
+	  else
+	    {
+	      symbol_record *sr = fbi_sym_tab->lookup (it->first);
+	      if (sr && sr->is_function ())
+		lookup (sr);
+	    }
 	}
     }
 
   return retval;
 }
 
 static octave_value
 intmap_to_ov (const bp_table::intmap& line) 
diff --git a/src/debug.h b/src/debug.h
--- a/src/debug.h
+++ b/src/debug.h
@@ -80,20 +80,21 @@ public:
   static int remove_breakpoint (const std::string& fname = "", 
 				const intmap& lines = intmap ())
   {
     return instance_ok ()
       ? instance->do_remove_breakpoint (fname, lines) : 0;
   }
 
   // Remove all the breakpoints in a specified file.
-  static intmap remove_all_breakpoints_in_file (const std::string& fname)
+  static intmap remove_all_breakpoints_in_file (const std::string& fname,
+						bool silent = false)
   {
     return instance_ok ()
-      ? instance->do_remove_all_breakpoints_in_file (fname) : intmap ();
+      ? instance->do_remove_all_breakpoints_in_file (fname, silent) : intmap ();
   }
   
   // Remove all the breakpoints registered with octave.
   static void remove_all_breakpoints (void)
   {
     if (instance_ok ())
       instance->do_remove_all_breakpoints ();
   }
@@ -119,17 +120,18 @@ private:
   breakpoint_map bp_map;
 
   static bp_table *instance;
 
   intmap do_add_breakpoint (const std::string& fname, const intmap& lines);
 
   int do_remove_breakpoint (const std::string&, const intmap& lines);
 
-  intmap do_remove_all_breakpoints_in_file (const std::string& fname);
+  intmap do_remove_all_breakpoints_in_file (const std::string& fname, 
+					    bool silent);
 
   void do_remove_all_breakpoints (void);
 
   fname_line_map do_get_breakpoint_list (const octave_value_list& fname_list);
 
 };
 
 #endif
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -53,16 +53,17 @@ along with Octave; see the file COPYING.
 #include "ov-usr-fcn.h"
 #include "pager.h"
 #include "parse.h"
 #include "symtab.h"
 #include "toplev.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
+#include "debug.h"
 
 // Should Octave always check to see if function files have changed
 // since they were last compiled?
 static int Vignore_function_time_stamp = 1;
 
 // Symbol table for symbols at the top level.
 symbol_table *top_level_sym_tab = 0;
 
@@ -1086,16 +1087,21 @@ symbol_out_of_date (symbol_record *sr)
 			      retval = fcn_out_of_date (fcn, file, tp);
 			    }
 			  else
 			    retval = true;
 			}
 		      else
 			retval = true;
 		    }
+
+		  // If the function has been replaced then clear any 
+		  // breakpoints associated with it
+		  if (retval)
+		    bp_table::remove_all_breakpoints_in_file (nm, true);
 		}
 	    }
 	}
     }
 
   return retval;
 }
 
