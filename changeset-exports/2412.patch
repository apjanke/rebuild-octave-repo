# HG changeset patch
# User jwe
# Date 845398498 0
#      Tue Oct 15 16:54:58 1996 +0000
# Node ID 1a19015644927cb5b53c23bbeebc89a28f043d20
# Parent  31a279f310705cabaf0b888709a4cd86fa220ee4
[project @ 1996-10-15 16:51:13 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,41 @@
+Tue Oct 15 11:35:51 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* op-cs-cm.cc, op-cs-cs.cc, op-cs-m.cc, op-cs-s.cc
+	(complex_matrix_conv): New functions.
+	Install preferred assignment conversion and widening ops.
+
+	* op-s-cm.cc, op-s-cs.cc (complex_matrix_conv): New functions.
+	Install preferred assignment conversion and widening ops.
+
+	* op-s-m.cc, op-s-s.cc (matrix_conv): New functions.
+	Install preferred assignment conversion and widening ops.
+
+	* ov.cc (octave_value::try_assignment_with_conversion,
+	octave_value::convert_and_assign, octave_value::try_assignment): 
+	New functions.
+	(octave_value::assign): Use them to implement twisted logic for
+	type conversions in assigments.
+
+	* pt-const.h (tree_constant::maybe_mutate): New function.
+	* ov.h (octave_value::maybe_mutate): New function.
+	(octave_value::try_narrowing_conversion): New function.
+	Use just one typedef for widening_op_fcn and numeric_conv_fcn.
+	Change all uses.
+	* ov-base.h, ov-complex.h, ov-complex.cc, ov-cx-mat.h,
+	ov-cx-mat.cc, ov-range.h, ov-range.cc, ov-re-mat.h, ov-re-mat.cc,
+	Provide derived class versions of try try_narrowing_conversion().
+
+	* pr-output.cc (octave_print_internal): Don't bother handing off
+	to scalar/real versions, even when it would seem appropriate.
+
+	* symtab.cc (symbol_def::define (tree_constant *)): Call
+	maybe_mutate on constants here.
+
 Mon Oct 14 11:05:24 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* pt-fvc.cc (tree_identifier::eval): If retval is undefined and
 	the object to eval is a constant, print	error message.
 
 	* Makefile (distclean): Remove *.oct too.
 
 	* defun-int.h: Include variables.h here.
diff --git a/src/op-cs-cm.cc b/src/op-cs-cm.cc
--- a/src/op-cs-cm.cc
+++ b/src/op-cs-cm.cc
@@ -201,16 +201,24 @@ el_or (const octave_value& a1, const oct
 {
   CAST_BINOP_ARGS (const octave_complex&, const octave_complex_matrix&);
 
   SC_MX_BOOL_OP (Complex, s, v1.complex_value (), \
 		 ComplexMatrix, m, v2.complex_matrix_value (), \
 		 s != 0.0 || m (i, j) != 0.0);
 }
 
+static octave_value *
+complex_matrix_conv (const octave_value& a)
+{
+  CAST_CONV_ARG (const octave_complex&);
+
+  return new octave_complex_matrix (v.complex_matrix_value ());
+}
+
 void
 install_cs_cm_ops (void)
 {
   INSTALL_BINOP (add, octave_complex, octave_complex_matrix, add);
   INSTALL_BINOP (sub, octave_complex, octave_complex_matrix, sub);
   INSTALL_BINOP (mul, octave_complex, octave_complex_matrix, mul);
   INSTALL_BINOP (div, octave_complex, octave_complex_matrix, div);
   INSTALL_BINOP (pow, octave_complex, octave_complex_matrix, pow);
@@ -222,15 +230,19 @@ install_cs_cm_ops (void)
   INSTALL_BINOP (gt, octave_complex, octave_complex_matrix, gt);
   INSTALL_BINOP (ne, octave_complex, octave_complex_matrix, ne);
   INSTALL_BINOP (el_mul, octave_complex, octave_complex_matrix, el_mul);
   INSTALL_BINOP (el_div, octave_complex, octave_complex_matrix, el_div);
   INSTALL_BINOP (el_pow, octave_complex, octave_complex_matrix, el_pow);
   INSTALL_BINOP (el_ldiv, octave_complex, octave_complex_matrix, el_ldiv);
   INSTALL_BINOP (el_and, octave_complex, octave_complex_matrix, el_and);
   INSTALL_BINOP (el_or, octave_complex, octave_complex_matrix, el_or);
+
+  INSTALL_ASSIGNCONV (octave_complex, octave_complex_matrix, octave_complex_matrix);
+
+  INSTALL_WIDENOP (octave_complex, octave_complex_matrix, complex_matrix_conv);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/op-cs-cs.cc b/src/op-cs-cs.cc
--- a/src/op-cs-cs.cc
+++ b/src/op-cs-cs.cc
@@ -26,16 +26,17 @@ Software Foundation, 59 Temple Place - S
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "gripes.h"
 #include "ov.h"
 #include "ov-complex.h"
+#include "ov-cx-mat.h"
 #include "ov-typeinfo.h"
 #include "op-cs-cs.h"
 #include "ops.h"
 #include "xdiv.h"
 #include "xpow.h"
 
 // complex scalar by complex scalar ops.
 
@@ -198,16 +199,24 @@ el_and (const octave_value& a1, const oc
 static octave_value
 el_or (const octave_value& a1, const octave_value& a2)
 {
   CAST_BINOP_ARGS (const octave_complex&, const octave_complex&);
 
   return v1.complex_value () != 0.0 || v2.complex_value () != 0.0;
 }
 
+static octave_value *
+complex_matrix_conv (const octave_value& a)
+{
+  CAST_CONV_ARG (const octave_complex&);
+
+  return new octave_complex_matrix (v.complex_matrix_value ());
+}
+
 void
 install_cs_cs_ops (void)
 {
   INSTALL_BINOP (add, octave_complex, octave_complex, add);
   INSTALL_BINOP (sub, octave_complex, octave_complex, sub);
   INSTALL_BINOP (mul, octave_complex, octave_complex, mul);
   INSTALL_BINOP (div, octave_complex, octave_complex, div);
   INSTALL_BINOP (pow, octave_complex, octave_complex, pow);
@@ -219,15 +228,19 @@ install_cs_cs_ops (void)
   INSTALL_BINOP (gt, octave_complex, octave_complex, gt);
   INSTALL_BINOP (ne, octave_complex, octave_complex, ne);
   INSTALL_BINOP (el_mul, octave_complex, octave_complex, el_mul);
   INSTALL_BINOP (el_div, octave_complex, octave_complex, el_div);
   INSTALL_BINOP (el_pow, octave_complex, octave_complex, el_pow);
   INSTALL_BINOP (el_ldiv, octave_complex, octave_complex, el_ldiv);
   INSTALL_BINOP (el_and, octave_complex, octave_complex, el_and);
   INSTALL_BINOP (el_or, octave_complex, octave_complex, el_or);
+
+  INSTALL_ASSIGNCONV (octave_complex, octave_complex, octave_complex_matrix);
+
+  INSTALL_WIDENOP (octave_complex, octave_complex_matrix, complex_matrix_conv);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/op-cs-m.cc b/src/op-cs-m.cc
--- a/src/op-cs-m.cc
+++ b/src/op-cs-m.cc
@@ -26,16 +26,17 @@ Software Foundation, 59 Temple Place - S
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "gripes.h"
 #include "ov.h"
 #include "ov-complex.h"
+#include "ov-cx-mat.h"
 #include "ov-re-mat.h"
 #include "ov-typeinfo.h"
 #include "op-cs-m.h"
 #include "ops.h"
 #include "xdiv.h"
 #include "xpow.h"
 
 // complex scalar by matrix ops.
@@ -201,16 +202,24 @@ el_or (const octave_value& a1, const oct
 {
   CAST_BINOP_ARGS (const octave_complex&, const octave_matrix&);
 
   SC_MX_BOOL_OP (Complex, s, v1.complex_value (), \
 		 Matrix, m, v2.matrix_value (), \
 		 s != 0.0 || m (i, j));
 }
 
+static octave_value *
+complex_matrix_conv (const octave_value& a)
+{
+  CAST_CONV_ARG (const octave_complex&);
+
+  return new octave_complex_matrix (v.complex_matrix_value ());
+}
+
 void
 install_cs_m_ops (void)
 {
   INSTALL_BINOP (add, octave_complex, octave_matrix, add);
   INSTALL_BINOP (sub, octave_complex, octave_matrix, sub);
   INSTALL_BINOP (mul, octave_complex, octave_matrix, mul);
   INSTALL_BINOP (div, octave_complex, octave_matrix, div);
   INSTALL_BINOP (pow, octave_complex, octave_matrix, pow);
@@ -222,15 +231,19 @@ install_cs_m_ops (void)
   INSTALL_BINOP (gt, octave_complex, octave_matrix, gt);
   INSTALL_BINOP (ne, octave_complex, octave_matrix, ne);
   INSTALL_BINOP (el_mul, octave_complex, octave_matrix, el_mul);
   INSTALL_BINOP (el_div, octave_complex, octave_matrix, el_div);
   INSTALL_BINOP (el_pow, octave_complex, octave_matrix, el_pow);
   INSTALL_BINOP (el_ldiv, octave_complex, octave_matrix, el_ldiv);
   INSTALL_BINOP (el_and, octave_complex, octave_matrix, el_and);
   INSTALL_BINOP (el_or, octave_complex, octave_matrix, el_or);
+
+  INSTALL_ASSIGNCONV (octave_complex, octave_matrix, octave_complex_matrix);
+
+  INSTALL_WIDENOP (octave_complex, octave_complex_matrix, complex_matrix_conv);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/op-cs-s.cc b/src/op-cs-s.cc
--- a/src/op-cs-s.cc
+++ b/src/op-cs-s.cc
@@ -26,16 +26,17 @@ Software Foundation, 59 Temple Place - S
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "gripes.h"
 #include "ov.h"
 #include "ov-complex.h"
+#include "ov-cx-mat.h"
 #include "ov-scalar.h"
 #include "ov-typeinfo.h"
 #include "op-cs-s.h"
 #include "ops.h"
 #include "xdiv.h"
 #include "xpow.h"
 
 // complex scalar by scalar ops.
@@ -199,16 +200,24 @@ el_and (const octave_value& a1, const oc
 static octave_value
 el_or (const octave_value& a1, const octave_value& a2)
 {
   CAST_BINOP_ARGS (const octave_complex&, const octave_scalar&);
 
   return v1.complex_value () != 0.0 || v2.double_value ();
 }
 
+static octave_value *
+complex_matrix_conv (const octave_value& a)
+{
+  CAST_CONV_ARG (const octave_complex&);
+
+  return new octave_complex_matrix (v.complex_matrix_value ());
+}
+
 void
 install_cs_s_ops (void)
 {
   INSTALL_BINOP (add, octave_complex, octave_scalar, add);
   INSTALL_BINOP (sub, octave_complex, octave_scalar, sub);
   INSTALL_BINOP (mul, octave_complex, octave_scalar, mul);
   INSTALL_BINOP (div, octave_complex, octave_scalar, div);
   INSTALL_BINOP (pow, octave_complex, octave_scalar, pow);
@@ -220,15 +229,19 @@ install_cs_s_ops (void)
   INSTALL_BINOP (gt, octave_complex, octave_scalar, gt);
   INSTALL_BINOP (ne, octave_complex, octave_scalar, ne);
   INSTALL_BINOP (el_mul, octave_complex, octave_scalar, el_mul);
   INSTALL_BINOP (el_div, octave_complex, octave_scalar, el_div);
   INSTALL_BINOP (el_pow, octave_complex, octave_scalar, el_pow);
   INSTALL_BINOP (el_ldiv, octave_complex, octave_scalar, el_ldiv);
   INSTALL_BINOP (el_and, octave_complex, octave_scalar, el_and);
   INSTALL_BINOP (el_or, octave_complex, octave_scalar, el_or);
+
+  INSTALL_ASSIGNCONV (octave_complex, octave_scalar, octave_complex_matrix);
+
+  INSTALL_WIDENOP (octave_complex, octave_complex_matrix, complex_matrix_conv);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/op-s-cm.cc b/src/op-s-cm.cc
--- a/src/op-s-cm.cc
+++ b/src/op-s-cm.cc
@@ -201,16 +201,24 @@ el_or (const octave_value& a1, const oct
 {
   CAST_BINOP_ARGS (const octave_scalar&, const octave_complex_matrix&);
 
   SC_MX_BOOL_OP (double, s, v1.double_value (), \
 		 ComplexMatrix, m, v2.complex_matrix_value (), \
 		 s || m (i, j) != 0.0);
 }
 
+static octave_value *
+complex_matrix_conv (const octave_value& a)
+{
+  CAST_CONV_ARG (const octave_scalar&);
+
+  return new octave_complex_matrix (v.complex_matrix_value ());
+}
+
 void
 install_s_cm_ops (void)
 {
   INSTALL_BINOP (add, octave_scalar, octave_complex_matrix, add);
   INSTALL_BINOP (sub, octave_scalar, octave_complex_matrix, sub);
   INSTALL_BINOP (mul, octave_scalar, octave_complex_matrix, mul);
   INSTALL_BINOP (div, octave_scalar, octave_complex_matrix, div);
   INSTALL_BINOP (pow, octave_scalar, octave_complex_matrix, pow);
@@ -222,15 +230,19 @@ install_s_cm_ops (void)
   INSTALL_BINOP (gt, octave_scalar, octave_complex_matrix, gt);
   INSTALL_BINOP (ne, octave_scalar, octave_complex_matrix, ne);
   INSTALL_BINOP (el_mul, octave_scalar, octave_complex_matrix, el_mul);
   INSTALL_BINOP (el_div, octave_scalar, octave_complex_matrix, el_div);
   INSTALL_BINOP (el_pow, octave_scalar, octave_complex_matrix, el_pow);
   INSTALL_BINOP (el_ldiv, octave_scalar, octave_complex_matrix, el_ldiv);
   INSTALL_BINOP (el_and, octave_scalar, octave_complex_matrix, el_and);
   INSTALL_BINOP (el_or, octave_scalar, octave_complex_matrix, el_or);
+
+  INSTALL_ASSIGNCONV (octave_scalar, octave_complex_matrix, octave_complex_matrix);
+
+  INSTALL_WIDENOP (octave_scalar, octave_complex_matrix, complex_matrix_conv);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/op-s-cs.cc b/src/op-s-cs.cc
--- a/src/op-s-cs.cc
+++ b/src/op-s-cs.cc
@@ -27,16 +27,17 @@ Software Foundation, 59 Temple Place - S
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "gripes.h"
 #include "ov.h"
 #include "ov-scalar.h"
 #include "ov-complex.h"
+#include "ov-cx-mat.h"
 #include "ov-typeinfo.h"
 #include "op-s-cs.h"
 #include "ops.h"
 #include "xdiv.h"
 #include "xpow.h"
 
 // scalar by complex scalar ops.
 
@@ -199,16 +200,24 @@ el_and (const octave_value& a1, const oc
 static octave_value
 el_or (const octave_value& a1, const octave_value& a2)
 {
   CAST_BINOP_ARGS (const octave_scalar&, const octave_complex&);
 
   return octave_value (v1.double_value () || (v2.complex_value () != 0.0));
 }
 
+static octave_value *
+complex_matrix_conv (const octave_value& a)
+{
+  CAST_CONV_ARG (const octave_scalar&);
+
+  return new octave_complex_matrix (v.complex_matrix_value ());
+}
+
 void
 install_s_cs_ops (void)
 {
   INSTALL_BINOP (add, octave_scalar, octave_complex, add);
   INSTALL_BINOP (sub, octave_scalar, octave_complex, sub);
   INSTALL_BINOP (mul, octave_scalar, octave_complex, mul);
   INSTALL_BINOP (div, octave_scalar, octave_complex, div);
   INSTALL_BINOP (pow, octave_scalar, octave_complex, pow);
@@ -220,15 +229,19 @@ install_s_cs_ops (void)
   INSTALL_BINOP (gt, octave_scalar, octave_complex, gt);
   INSTALL_BINOP (ne, octave_scalar, octave_complex, ne);
   INSTALL_BINOP (el_mul, octave_scalar, octave_complex, el_mul);
   INSTALL_BINOP (el_div, octave_scalar, octave_complex, el_div);
   INSTALL_BINOP (el_pow, octave_scalar, octave_complex, el_pow);
   INSTALL_BINOP (el_ldiv, octave_scalar, octave_complex, el_ldiv);
   INSTALL_BINOP (el_and, octave_scalar, octave_complex, el_and);
   INSTALL_BINOP (el_or, octave_scalar, octave_complex, el_or);
+
+  INSTALL_ASSIGNCONV (octave_scalar, octave_complex, octave_complex_matrix);
+
+  INSTALL_WIDENOP (octave_scalar, octave_complex_matrix, complex_matrix_conv);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/op-s-m.cc b/src/op-s-m.cc
--- a/src/op-s-m.cc
+++ b/src/op-s-m.cc
@@ -197,16 +197,24 @@ el_or (const octave_value& a1, const oct
 {
   CAST_BINOP_ARGS (const octave_scalar&, const octave_matrix&);
 
   SC_MX_BOOL_OP (double, s, v1.double_value (), \
                  Matrix, m, v2.matrix_value (), \
 		 s || m (i, j));
 }
 
+static octave_value *
+matrix_conv (const octave_value& a)
+{
+  CAST_CONV_ARG (const octave_scalar&);
+
+  return new octave_matrix (v.matrix_value ());
+}
+
 void
 install_s_m_ops (void)
 {
   INSTALL_BINOP (add, octave_scalar, octave_matrix, add);
   INSTALL_BINOP (sub, octave_scalar, octave_matrix, sub);
   INSTALL_BINOP (mul, octave_scalar, octave_matrix, mul);
   INSTALL_BINOP (div, octave_scalar, octave_matrix, div);
   INSTALL_BINOP (pow, octave_scalar, octave_matrix, pow);
@@ -218,15 +226,19 @@ install_s_m_ops (void)
   INSTALL_BINOP (gt, octave_scalar, octave_matrix, gt);
   INSTALL_BINOP (ne, octave_scalar, octave_matrix, ne);
   INSTALL_BINOP (el_mul, octave_scalar, octave_matrix, el_mul);
   INSTALL_BINOP (el_div, octave_scalar, octave_matrix, el_div);
   INSTALL_BINOP (el_pow, octave_scalar, octave_matrix, el_pow);
   INSTALL_BINOP (el_ldiv, octave_scalar, octave_matrix, el_ldiv);
   INSTALL_BINOP (el_and, octave_scalar, octave_matrix, el_and);
   INSTALL_BINOP (el_or, octave_scalar, octave_matrix, el_or);
+
+  INSTALL_ASSIGNCONV (octave_scalar, octave_matrix, octave_matrix);
+
+  INSTALL_WIDENOP (octave_scalar, octave_matrix, matrix_conv);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/op-s-s.cc b/src/op-s-s.cc
--- a/src/op-s-s.cc
+++ b/src/op-s-s.cc
@@ -26,16 +26,17 @@ Software Foundation, 59 Temple Place - S
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "gripes.h"
 #include "ov.h"
 #include "ov-scalar.h"
+#include "ov-re-mat.h"
 #include "ov-typeinfo.h"
 #include "op-s-s.h"
 #include "ops.h"
 #include "xdiv.h"
 #include "xpow.h"
 
 // scalar by scalar ops.
 
@@ -198,16 +199,24 @@ el_and (const octave_value& a1, const oc
 static octave_value
 el_or (const octave_value& a1, const octave_value& a2)
 {
   CAST_BINOP_ARGS (const octave_scalar&, const octave_scalar&);
 
   return octave_value (v1.double_value () || v2.double_value ());
 }
 
+static octave_value *
+matrix_conv (const octave_value& a)
+{
+  CAST_CONV_ARG (const octave_scalar&);
+
+  return new octave_matrix (v.matrix_value ());
+}
+
 void
 install_s_s_ops (void)
 {
   INSTALL_BINOP (add, octave_scalar, octave_scalar, add);
   INSTALL_BINOP (sub, octave_scalar, octave_scalar, sub);
   INSTALL_BINOP (mul, octave_scalar, octave_scalar, mul);
   INSTALL_BINOP (div, octave_scalar, octave_scalar, div);
   INSTALL_BINOP (pow, octave_scalar, octave_scalar, pow);
@@ -219,15 +228,19 @@ install_s_s_ops (void)
   INSTALL_BINOP (gt, octave_scalar, octave_scalar, gt);
   INSTALL_BINOP (ne, octave_scalar, octave_scalar, ne);
   INSTALL_BINOP (el_mul, octave_scalar, octave_scalar, el_mul);
   INSTALL_BINOP (el_div, octave_scalar, octave_scalar, el_div);
   INSTALL_BINOP (el_pow, octave_scalar, octave_scalar, el_pow);
   INSTALL_BINOP (el_ldiv, octave_scalar, octave_scalar, el_ldiv);
   INSTALL_BINOP (el_and, octave_scalar, octave_scalar, el_and);
   INSTALL_BINOP (el_or, octave_scalar, octave_scalar, el_or);
+
+  INSTALL_ASSIGNCONV (octave_scalar, octave_scalar, octave_matrix);
+
+  INSTALL_WIDENOP (octave_scalar, octave_matrix, matrix_conv);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/ov-str-mat.h b/src/ov-str-mat.h
--- a/src/ov-str-mat.h
+++ b/src/ov-str-mat.h
@@ -77,17 +77,17 @@ public:
 
   octave_value *clone (void) { return new octave_char_matrix_str (*this); }
 
 #if 0
   void *operator new (size_t size);
   void operator delete (void *p, size_t size);
 #endif
 
-  numeric_conv_fcn numeric_conversion_function (void) const;
+  type_conv_fcn numeric_conversion_function (void) const;
 
   octave_value index (const octave_value_list& idx) const;
 
   void assign (const octave_value_list& idx, const charMatrix& rhs);
 
   octave_value all (void) const;
   octave_value any (void) const;
 
