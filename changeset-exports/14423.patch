# HG changeset patch
# User Jordi Guti√©rrez Hermoso <jordigh@octave.org>
# Date 1330552040 18000
#      Wed Feb 29 16:47:20 2012 -0500
# Node ID 62cb605af1af1904b1c709d2aa3007cac5ea50a5
# Parent  428faafdfa54d3525fd40b032411f7da3b456f13
doc: Further fixes diagperm (bug #35666)

diff --git a/doc/interpreter/diagperm.txi b/doc/interpreter/diagperm.txi
--- a/doc/interpreter/diagperm.txi
+++ b/doc/interpreter/diagperm.txi
@@ -426,21 +426,23 @@ using the pivoted LU@tie{}factorization:
 @end example
 
 @noindent
 This is one way to normalize columns of a matrix @var{X} to unit norm:
 
 @example
 @group
   s = norm (X, "columns");
-  X = diag (s) / X;
+  X /= diag (s);
 @end group
 @end example
 
-The same can also be accomplished with broadcasting:
+@noindent
+The same can also be accomplished with broadcasting
+(@pxref{Broadcasting}):
 
 @example
 @group
   s = norm (X, "columns");
   X ./= s;
 @end group
 @end example
 
@@ -449,17 +451,17 @@ The following expression is a way to eff
 permutation, given by a permutation vector @var{p}.  It will also work
 in earlier versions of Octave, but slowly.
 
 @example
   det (eye (length (p))(p, :))
 @end example
 
 @noindent
-Finally, here's how you solve a linear system @code{A*x = b} 
+Finally, here's how you solve a linear system @code{A*x = b}
 with Tikhonov regularization (ridge regression) using SVD (a skeleton only):
 
 @example
 @group
   m = rows (A); n = columns (A);
   [U, S, V] = svd (A);
   ## determine the regularization factor alpha
   ## alpha = @dots{}
