# HG changeset patch
# User Michael Goffioul <michael.goffioul@gmail.com>
# Date 1242938231 -3600
#      Thu May 21 21:37:11 2009 +0100
# Node ID 0ae2b6617005b071895a0ad9763cf6f9c449368b
# Parent  3c1762c7e787508d44a15bdcfd418a1c6a9d8a21
Use display information from the root object to compute bounding boxes

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,20 @@
 2009-05-21  Michael Goffioul  <michael.goffioul@gmail.com>
 
+	* graphics.cc (figure::properties::get_boundingbox,
+	figure::properties::set_boundingbox): Get screen size from root
+	object.
+	(convert_position): Get screen resolution from root object and remove
+	unneeded "backend" argument.
+	(axes::properties::get_boundingbox,
+	figure::properties::get_boundingbox,
+	figure::properties::set_boundingbox): Remove unneeded backend argument
+	to convert_position call.
+
 	* debug.h (class bp_table): Tag with OCTINTERP_API.
 	* input.h (Vdebugging): Ditto.
 	* pt-eval.h (class tree_evaluator): Ditto.
 	* toplev.h (class octave_call_stack): Ditto.
 
 	* file-io.cc (mkstemp): Add mktemp-based implementation of mkstemp on
 	platforms that do not have it (mkstemp is required by the new help
 	system).
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -47,16 +47,19 @@ along with Octave; see the file COPYING.
 #include "ov.h"
 #include "oct-obj.h"
 #include "oct-map.h"
 #include "ov-fcn-handle.h"
 #include "parse.h"
 #include "toplev.h"
 #include "unwind-prot.h"
 
+// forward declaration
+static octave_value xget (const graphics_handle& h, const caseless_str& name);
+
 static void
 gripe_set_invalid (const std::string& pname)
 {
   error ("set: invalid value for %s property", pname.c_str ());
 }
 
 static Matrix
 jet_colormap (void)
@@ -237,34 +240,34 @@ default_figure_paperposition (void)
   m(2) = 8.00;
   m(3) = 6.00;
   return m;
 }
 
 static Matrix
 convert_position (const Matrix& pos, const caseless_str& from_units,
 		  const caseless_str& to_units,
-		  const Matrix& parent_dim = Matrix (1, 2, 0.0),
-		  const graphics_backend& backend = graphics_backend ())
+		  const Matrix& parent_dim = Matrix (1, 2, 0.0))
 {
   Matrix retval (1, 4);
   double res = 0;
 
   if (from_units.compare ("pixels"))
     retval = pos;
   else if (from_units.compare ("normalized"))
     {
       retval(0) = pos(0) * parent_dim(0) + 1;
       retval(1) = pos(1) * parent_dim(1) + 1;
       retval(2) = pos(2) * parent_dim(0);
       retval(3) = pos(3) * parent_dim(1);
     }
   else if (from_units.compare ("characters"))
     {
-      res = backend.get_screen_resolution ();
+      if (res <= 0)
+	res = xget (0, "screenpixelsperinch").double_value ();
 
       double f = 0.0;
 
       // FIXME -- this assumes the system font is Helvetica 10pt 
       //          (for which "x" requires 6x12 pixels at 74.951 pixels/inch)
       f = 12.0 * res / 74.951;
 
       if (f > 0)
@@ -272,17 +275,18 @@ convert_position (const Matrix& pos, con
 	  retval(0) = 0.5 * pos(0) * f;
 	  retval(1) = pos(1) * f;
 	  retval(2) = 0.5 * pos(2) * f;
 	  retval(3) = pos(3) * f;
 	}
     }
   else
     {
-      res = backend.get_screen_resolution ();
+      if (res <= 0)
+	res = xget (0, "screenpixelsperinch").double_value ();
 
       double f = 0.0;
 
       if (from_units.compare ("points"))
 	f = res / 72.0;
       else if (from_units.compare ("inches"))
 	f = res;
       else if (from_units.compare ("centimeters"))
@@ -303,34 +307,35 @@ convert_position (const Matrix& pos, con
 	{
 	  retval(0) = (retval(0) - 1) / parent_dim(0);
 	  retval(1) = (retval(1) - 1) / parent_dim(1);
 	  retval(2) /= parent_dim(0);
 	  retval(3) /= parent_dim(1);
 	}
       else if (to_units.compare ("characters"))
 	{
-	  res = backend.get_screen_resolution ();
+	  if (res <= 0)
+	    res = xget (0, "screenpixelsperinch").double_value ();
 
 	  double f = 0.0;
 
 	  f = 12.0 * res / 74.951;
 
 	  if (f > 0)
 	    {
 	      retval(0) = 2 * retval(0) / f;
 	      retval(1) = retval(1) / f;
 	      retval(2) = 2 * retval(2) / f;
 	      retval(3) = retval(3) / f;
 	    }
 	}
       else
 	{
 	  if (res <= 0)
-	    res = backend.get_screen_resolution ();
+	    res = xget (0, "screenpixelsperinch").double_value ();
 
 	  double f = 0.0;
 
 	  if (to_units.compare ("points"))
 	    f = res / 72.0;
 	  else if (to_units.compare ("inches"))
 	    f = res;
 	  else if (to_units.compare ("centimeters"))
@@ -2256,43 +2261,39 @@ figure::properties::set_visible (const o
 
       visible = val;
     }
 }
 
 Matrix
 figure::properties::get_boundingbox (bool) const
 {
-  graphics_backend b = get_backend ();
-  // FIXME -- screen size should be obtained from root object.
-  Matrix screen_size = b.get_screen_size ();
+  Matrix screen_size = xget (0, "screensize").matrix_value ().extract_n (0, 2, 1, 2);
   Matrix pos;
 
   pos = convert_position (get_position ().matrix_value (), get_units (),
-			  "pixels", screen_size, b);
+			  "pixels", screen_size);
 
   pos(0)--;
   pos(1)--;
   pos(1) = screen_size(1) - pos(1) - pos(3);
 
   return pos;
 }
 
 void
 figure::properties::set_boundingbox (const Matrix& bb)
 {
-  graphics_backend b = get_backend ();
-  // FIXME -- screen size should be obtained from root object.
-  Matrix screen_size = b.get_screen_size ();
+  Matrix screen_size = xget (0, "screensize").matrix_value ().extract_n (0, 2, 1, 2);
   Matrix pos = bb;
 
   pos(1) = screen_size(1) - pos(1) - pos(3);
   pos(1)++;
   pos(0)++;
-  pos = convert_position (pos, "pixels", get_units (), screen_size, b);
+  pos = convert_position (pos, "pixels", get_units (), screen_size);
 
   set_position (pos);
 }
 
 void
 figure::properties::set_position (const octave_value& v)
 {
   if (! error_state)
@@ -3112,17 +3113,17 @@ axes::properties::get_boundingbox (bool 
   graphics_object obj = gh_manager::get_object (get_parent ());
   Matrix parent_bb = obj.get_properties ().get_boundingbox (true);
   Matrix pos = (internal ?
 		  get_position ().matrix_value ()
 		  : get_outerposition ().matrix_value ());
 
 
   pos = convert_position (pos, get_units (), "pixels",
-			  parent_bb.extract_n (0, 2, 1, 2), get_backend ());
+			  parent_bb.extract_n (0, 2, 1, 2));
   pos(0)--;
   pos(1)--;
   pos(1) = parent_bb(3) - pos(1) - pos(3);
 
   return pos;
 }
 
 ColumnVector
