# HG changeset patch
# User Rik <rik@octave.org>
# Date 1392660267 28800
#      Mon Feb 17 10:04:27 2014 -0800
# Node ID 16b0cd465ecd4751e27bbd2ed643c2287d7cdbec
# Parent  b2a2f097c5e0e4b62b626851373746641e6d4247
Handle special case of 0 for pinv with Diagonal matrices.

* CDiagMatrix.cc (pseudo_inverse), dDiagMatrix.cc (pseudo_inverse),
fCDiagMatrix.cc (pseudo_inverse), fDiagMatrix.cc (pseudo_inverse):
Check for special case where element is 0 to avoid a division by
zero error.

diff --git a/liboctave/array/CDiagMatrix.cc b/liboctave/array/CDiagMatrix.cc
--- a/liboctave/array/CDiagMatrix.cc
+++ b/liboctave/array/CDiagMatrix.cc
@@ -388,20 +388,21 @@ ComplexDiagMatrix::pseudo_inverse (doubl
   octave_idx_type r = rows ();
   octave_idx_type c = cols ();
   octave_idx_type len = length ();
 
   ComplexDiagMatrix retval (c, r);
 
   for (octave_idx_type i = 0; i < len; i++)
     {
-      if (std::abs (elem (i, i)) < tol)
+      double val = std::abs (elem (i, i));
+      if (val < tol || val == 0.0)
         retval.elem (i, i) = 0.0;
       else
-        retval.elem (i, i) = 1.0 / elem (i, i);
+        retval.elem (i, i) = 1.0 / val;
     }
 
   return retval;
 }
 
 bool
 ComplexDiagMatrix::all_elements_are_real (void) const
 {
diff --git a/liboctave/array/dDiagMatrix.cc b/liboctave/array/dDiagMatrix.cc
--- a/liboctave/array/dDiagMatrix.cc
+++ b/liboctave/array/dDiagMatrix.cc
@@ -297,20 +297,21 @@ DiagMatrix::pseudo_inverse (double tol) 
   octave_idx_type r = rows ();
   octave_idx_type c = cols ();
   octave_idx_type len = length ();
 
   DiagMatrix retval (c, r);
 
   for (octave_idx_type i = 0; i < len; i++)
     {
-      if (std::abs (elem (i, i)) < tol)
+      double val = std::abs (elem (i, i));
+      if (val < tol || val == 0.0)
         retval.elem (i, i) = 0.0;
       else
-        retval.elem (i, i) = 1.0 / elem (i, i);
+        retval.elem (i, i) = 1.0 / val;
     }
 
   return retval;
 }
 
 // diagonal matrix by diagonal matrix -> diagonal matrix operations
 
 // diagonal matrix by diagonal matrix -> diagonal matrix operations
diff --git a/liboctave/array/fCDiagMatrix.cc b/liboctave/array/fCDiagMatrix.cc
--- a/liboctave/array/fCDiagMatrix.cc
+++ b/liboctave/array/fCDiagMatrix.cc
@@ -392,20 +392,21 @@ FloatComplexDiagMatrix::pseudo_inverse (
   octave_idx_type r = rows ();
   octave_idx_type c = cols ();
   octave_idx_type len = length ();
 
   FloatComplexDiagMatrix retval (c, r);
 
   for (octave_idx_type i = 0; i < len; i++)
     {
-      if (std::abs (elem (i, i)) < tol)
+      float val = std::abs (elem (i, i));
+      if (val < tol || val == 0.0f)
         retval.elem (i, i) = 0.0f;
       else
-        retval.elem (i, i) = 1.0f / elem (i, i);
+        retval.elem (i, i) = 1.0f / val;
     }
 
   return retval;
 }
 
 bool
 FloatComplexDiagMatrix::all_elements_are_real (void) const
 {
diff --git a/liboctave/array/fDiagMatrix.cc b/liboctave/array/fDiagMatrix.cc
--- a/liboctave/array/fDiagMatrix.cc
+++ b/liboctave/array/fDiagMatrix.cc
@@ -297,20 +297,21 @@ FloatDiagMatrix::pseudo_inverse (float t
   octave_idx_type r = rows ();
   octave_idx_type c = cols ();
   octave_idx_type len = length ();
 
   FloatDiagMatrix retval (c, r);
 
   for (octave_idx_type i = 0; i < len; i++)
     {
-      if (std::abs (elem (i, i)) < tol)
+      float val = std::abs (elem (i, i));
+      if (val < tol || val == 0.0f)
         retval.elem (i, i) = 0.0f;
       else
-        retval.elem (i, i) = 1.0f / elem (i, i);
+        retval.elem (i, i) = 1.0f / val;
     }
 
   return retval;
 }
 
 // diagonal matrix by diagonal matrix -> diagonal matrix operations
 
 // diagonal matrix by diagonal matrix -> diagonal matrix operations
