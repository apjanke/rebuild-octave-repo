# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1275466367 -7200
#      Wed Jun 02 10:12:47 2010 +0200
# Node ID 21defab4207c0bc3e99426aa3cb9935cb78aed8f
# Parent  f414049847d5c20ac8c848dae985a69d5e4408b7
make strrep not skipping overlaps by default, allow an option in both strfind/strrep

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2010-06-02  Jaroslav Hajek  <highegg@gmail.com>
+
+	* DLD-FUNCTIONS/strfind.cc (Fqs_replace): Allow overlapped matches.
+	(Fstrrep): Support "overlaps" option.
+	(Fstrfind): Ditto.
+
 2010-05-28  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov.h (octave_value::fast_elem_extract,
 	octave_value::fast_elem_insert): New methods.
 	* ov-base.cc (octave_base_value::fast_elem_extract,
 	octave_base_value::fast_elem_insert,
 	octave_base_value::fast_elem_insert_self): New methods.
 	* ov-base.h: Declare them.
diff --git a/src/DLD-FUNCTIONS/strfind.cc b/src/DLD-FUNCTIONS/strfind.cc
--- a/src/DLD-FUNCTIONS/strfind.cc
+++ b/src/DLD-FUNCTIONS/strfind.cc
@@ -175,40 +175,58 @@ strfind (@{\"abababa\", \"bebebe\", \"ab
         @}\n\
 @end group\n\
 @end example\n\
 @seealso{findstr, strmatch, strcmp, strncmp, strcmpi, strncmpi, find}\n\
 @end deftypefn")
 {
   octave_value retval;
   int nargin = args.length ();
+  bool overlaps = true;
+
+  if (nargin == 4 && args(2).is_string () && args(3).is_scalar_type ())
+    {
+      std::string opt = args(2).string_value ();
+      if (opt == "overlaps")
+        {
+          overlaps = args(3).bool_value ();
+          nargin = 2;
+        }
+      else
+        {
+          error ("strfind: unknown option: %s", opt.c_str ());
+          return retval;
+        }
+    }
 
   if (nargin == 2)
     {
       octave_value argstr = args(0), argpat = args(1);
       if (argpat.is_string ())
         {
           Array<char> needle = argpat.char_array_value ();
           OCTAVE_LOCAL_BUFFER (octave_idx_type, table, UCHAR_MAX);
           qs_preprocess (needle, table);
 
           if (argstr.is_string ())
-            retval = octave_value (qs_search (needle, argstr.char_array_value (), table), 
+            retval = octave_value (qs_search (needle, argstr.char_array_value (), 
+                                              table, overlaps), 
                                    true, true);
           else if (argstr.is_cell ())
             {
               const Cell argsc = argstr.cell_value ();
               Cell retc (argsc.dims ());
               octave_idx_type ns = argsc.numel ();
 
               for (octave_idx_type i = 0; i < ns; i++)
                 {
                   octave_value argse = argsc(i);
                   if (argse.is_string ())
-                    retc(i) = octave_value (qs_search (needle, argse.char_array_value (), table), 
+                    retc(i) = octave_value (qs_search (needle, argse.char_array_value (), 
+                                                       table, overlaps), 
                                             true, true);
                   else
                     {
                       error ("strfind: each cell element must be a string");
                       break;
                     }
                 }
 
@@ -231,63 +249,87 @@ strfind (@{\"abababa\", \"bebebe\", \"ab
 /*
 
 %!error strfind ();
 %!error strfind ("foo", "bar", 1);
 %!error strfind ("foo", 100);
 %!error strfind (100, "foo");
 
 %!assert (strfind ("abababa", "aba"), [1, 3, 5]);
+%!assert (strfind ("abababa", "aba", "overlaps", false), [1, 5]);
 %!assert (strfind ({"abababa", "bla", "bla"}, "a"), {[1, 3, 5, 7], 3, 3});
 %!assert (strfind ("Linux _is_ user-friendly. It just isn't ignorant-friendly or idiot-friendly.", "friendly"), [17, 50, 68]);
 
 */
 
 static Array<char>
 qs_replace (const Array<char>& str, const Array<char>& pat,
             const Array<char>& rep, 
-            const octave_idx_type table[TABSIZE])
+            const octave_idx_type table[TABSIZE],
+            bool overlaps = true)
 {
   Array<char> ret = str;
 
   octave_idx_type siz = str.numel (), psiz = pat.numel (), rsiz = rep.numel ();
 
   if (psiz != 0)
     {
       // Look up matches, without overlaps.
-      const Array<octave_idx_type> idx = qs_search (pat, str, table, false);
+      const Array<octave_idx_type> idx = qs_search (pat, str, table, overlaps);
       octave_idx_type nidx = idx.numel ();
 
       if (nidx)
         {
           // Compute result size.
-          octave_idx_type retsiz = siz + nidx * (rsiz - psiz);
+          octave_idx_type retsiz;
+          if (overlaps)
+            {
+              retsiz = 0;
+              // OMG. Is this the "right answer" MW always looks for, or
+              // someone was just lazy?
+              octave_idx_type k = 0;
+              for (octave_idx_type i = 0; i < nidx; i++)
+                {
+                  octave_idx_type j = idx(i);
+                  if (j >= k)
+                    retsiz += j - k;
+                  retsiz += rsiz;
+                  k = j + psiz;
+                }
+
+              retsiz += siz - k;
+            }
+          else
+            retsiz = siz + nidx * (rsiz - psiz);
+
           ret.clear (dim_vector (1, retsiz));
           const char *src = str.data (), *reps = rep.data ();
           char *dest = ret.fortran_vec ();
 
           octave_idx_type k = 0;
           for (octave_idx_type i = 0; i < nidx; i++)
             {
               octave_idx_type j = idx(i);
-              dest = std::copy (src + k, src + j, dest);
+              if (j >= k)
+                dest = std::copy (src + k, src + j, dest);
               dest = std::copy (reps, reps + rsiz, dest);
               k = j + psiz;
             }
 
           std::copy (src + k, src + siz, dest);
         }
     }
 
   return ret;
 }
 
 DEFUN_DLD (strrep, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} strrep (@var{s}, @var{x}, @var{y})\n\
+@deftypefnx {Loadable Function} {} strrep (@var{s}, @var{x}, @var{y}, \"overlaps\", @var{o})\n\
 Replace all occurrences of the substring @var{x} of the string @var{s}\n\
 with the string @var{y} and return the result.  For example,\n\
 \n\
 @example\n\
 @group\n\
 strrep (\"This is a test string\", \"is\", \"&%$\")\n\
      @result{} \"Th&%$ &%$ a test string\"\n\
 @end group\n\
@@ -295,41 +337,57 @@ strrep (\"This is a test string\", \"is\
 \n\
 @var{s} may also be a cell array of strings, in which case the replacement is\n\
 done for each element and a cell array is returned.\n\
 @seealso{regexprep, strfind, findstr}\n\
 @end deftypefn")
 {
   octave_value retval;
   int nargin = args.length ();
+  bool overlaps = true;
+
+  if (nargin == 5 && args(3).is_string () && args(4).is_scalar_type ())
+    {
+      std::string opt = args(3).string_value ();
+      if (opt == "overlaps")
+        {
+          overlaps = args(4).bool_value ();
+          nargin = 3;
+        }
+      else
+        {
+          error ("strrep: unknown option: %s", opt.c_str ());
+          return retval;
+        }
+    }
 
   if (nargin == 3)
     {
       octave_value argstr = args(0), argpat = args(1), argrep = args(2);
       if (argpat.is_string () && argrep.is_string ())
         {
           const Array<char> pat = argpat.char_array_value ();
           const Array<char> rep = argrep.char_array_value ();
 
           OCTAVE_LOCAL_BUFFER (octave_idx_type, table, UCHAR_MAX);
           qs_preprocess (pat, table);
 
           if (argstr.is_string ())
-            retval = qs_replace (argstr.char_array_value (), pat, rep, table);
+            retval = qs_replace (argstr.char_array_value (), pat, rep, table, overlaps);
           else if (argstr.is_cell ())
             {
               const Cell argsc = argstr.cell_value ();
               Cell retc (argsc.dims ());
               octave_idx_type ns = argsc.numel ();
 
               for (octave_idx_type i = 0; i < ns; i++)
                 {
                   octave_value argse = argsc(i);
                   if (argse.is_string ())
-                    retc(i) = qs_replace (argse.char_array_value (), pat, rep, table);
+                    retc(i) = qs_replace (argse.char_array_value (), pat, rep, table, overlaps);
                   else
                     {
                       error ("strrep: each cell element must be a string");
                       break;
                     }
                 }
 
               retval = retc;
@@ -347,14 +405,16 @@ done for each element and a cell array i
 
   return retval;
 }
 
 /*
 
 %!assert(strcmp (strrep ("This is a test string", "is", "&%$"),
 %! "Th&%$ &%$ a test string"));
+%!assert(strrep ("abababc", "abab", "xyz"), "xyzxyzc");
+%!assert(strrep ("abababc", "abab", "xyz", "overlaps", false), "xyzabc");
 
 %!error strrep ();
 
 %!error strrep ("foo", "bar", 3, 4);
 
 */
