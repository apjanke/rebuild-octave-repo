# HG changeset patch
# User jwe
# Date 1045687036 0
#      Wed Feb 19 20:37:16 2003 +0000
# Node ID a5818cb949fd0a1e66e14173dce210497349dfb3
# Parent  764229f9a5c8abbfe5b13bc02986637b3a80a7d2
[project @ 2003-02-19 20:37:01 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2003-02-19  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* load-save.cc (struct hdf5_callback_data): Provide constructor.
+	(hdf5_callback_data::name, hdf5_callback_data::doc): Now
+	std::string instead of char*.  Change all uses.
+
 2003-02-18  Roger Banks <rbanks@colsa.com>
 
 	* load-save.cc (read_ascii_data, read_ascii_data,
 	read_mat5_binary_element, save_mat5_binary_element,
 	save_ascii_data): Handle cell arrays.
 	(write_mat5_cell_array): New function.
 
 2003-02-18  John W. Eaton  <jwe@bevo.che.wisc.edu>
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -1314,33 +1314,69 @@ hdf5_check_attr (hid_t loc_id, const cha
     }
 
   // restore error reporting:
   H5Eset_auto (err_func, err_func_data);
 
   return retval;
 }
 
+// The following two subroutines create HDF5 representations of the way
+// we will store Octave complex and range types (pairs and triplets of
+// floating-point numbers, respectively).  NUM_TYPE is the HDF5 numeric
+// type to use for storage (e.g. H5T_NATIVE_DOUBLE to save as 'double').
+// Note that any necessary conversions are handled automatically by HDF5.
+
+static hid_t
+hdf5_make_complex_type (hid_t num_type)
+{
+  hid_t type_id = H5Tcreate (H5T_COMPOUND, sizeof (double) * 2);
+
+  H5Tinsert (type_id, "real", 0 * sizeof (double), num_type);
+  H5Tinsert (type_id, "imag", 1 * sizeof (double), num_type);
+
+  return type_id;
+}
+
+static hid_t
+hdf5_make_range_type (hid_t num_type)
+{
+  hid_t type_id = H5Tcreate (H5T_COMPOUND, sizeof (double) * 3);
+
+  H5Tinsert (type_id, "base", 0 * sizeof (double), num_type);
+  H5Tinsert (type_id, "limit", 1 * sizeof (double), num_type);
+  H5Tinsert (type_id, "increment", 2 * sizeof (double), num_type);
+
+  return type_id;
+}
+
 // Callback data structure for passing data to hdf5_read_next_data, below.
 
-struct hdf5_callback_data
+struct
+hdf5_callback_data
 {
+  hdf5_callback_data (void)
+    : name (), global (false), tc (), doc (),
+      complex_type (hdf5_make_complex_type (H5T_NATIVE_DOUBLE)),
+      range_type (hdf5_make_range_type (H5T_NATIVE_DOUBLE)),
+      import (false) { }
+
   // the following fields are set by hdf5_read_data on successful return:
 
   // the name of the variable
-  char *name;
+  std::string name;
 
   // whether it is global
   bool global;
 
   // the value of the variable, in Octave form
   octave_value tc;
 
   // a documentation string (NULL if none)
-  char *doc;
+  std::string doc;
 
   // the following fields are input to hdf5_read_data:
 
   // HDF5 rep's of complex and range type
   hid_t complex_type, range_type;
 
   // whether to try extra hard to import "foreign" data
   bool import;
@@ -1359,17 +1395,18 @@ static bool have_h5giterate_bug = false;
 //
 // It returns 1 on success (in which case H5Giterate stops and returns),
 // -1 on error, and 0 to tell H5Giterate to continue on to the next item
 // (e.g. if NAME was a data type we don't recognize).
 
 static herr_t
 hdf5_read_next_data (hid_t group_id, const char *name, void *dv)
 {
-  hdf5_callback_data *d = (hdf5_callback_data *) dv;
+  hdf5_callback_data *d = static_cast <hdf5_callback_data *> (dv);
+
   H5G_stat_t info;
   herr_t retval = 0;
   bool ident_valid = valid_identifier (name);
 
   OCTAVE_LOCAL_BUFFER (char, vname, strlen (name) + 1);
 
   strcpy (vname, name);
 
@@ -1485,25 +1522,24 @@ hdf5_read_next_data (hid_t group_id, con
 	  if (rank == 0)
 	    {
 	      // a single string:
 	      int slen = H5Tget_size (type_id);
 	      if (slen < 0)
 		retval = -1;  // error
 	      else
 		{
-		  char *s = new char [slen];
+		  OCTAVE_LOCAL_BUFFER (char, s, slen);
 		  // create datatype for (null-terminated) string
 		  // to read into:
 		  hid_t st_id = H5Tcopy (H5T_C_S1);
 		  H5Tset_size (st_id, slen);
 		  if (H5Dread (data_id, st_id, H5S_ALL, H5S_ALL, 
 			       H5P_DEFAULT, (void *) s) < 0)
 		    {
-		      delete [] s;
 		      retval = -1;  // error
 		    }
 		  else
 		    d->tc = s;
 
 		  H5Tclose (st_id);
 		}
 	    }
@@ -1685,40 +1721,33 @@ hdf5_read_next_data (hid_t group_id, con
 
       // an HDF5 group is treated as an octave structure by
       // default (since that preserves name information), and an
       // octave list otherwise.
 
       bool is_list = hdf5_check_attr (subgroup_id, "OCTAVE_LIST");
 
       hdf5_callback_data dsub;
-      dsub.name = dsub.doc = 0;
-      dsub.global = 0;
+
       dsub.complex_type = d->complex_type;
       dsub.range_type = d->range_type;
       dsub.import = d->import;
 
       herr_t retval2;
       octave_value_list lst;
       Octave_map m;
       int current_item = 0;
       while ((retval2 = H5Giterate (group_id, name, &current_item,
 				    hdf5_read_next_data, &dsub)) > 0)
 	{
 	  if (is_list)
 	    lst.append (dsub.tc);
 	  else
 	    m [dsub.name] = dsub.tc;
 
-	  if (dsub.name)
-	    delete [] dsub.name;
-
-	  if (dsub.doc)
-	    delete [] dsub.doc;
-
 	  if (have_h5giterate_bug)
 	    current_item++;  // H5Giterate returned the last index processed
 	}
 
       if (retval2 < 0)
 	retval = retval2;
       else
 	{
@@ -1747,66 +1776,34 @@ hdf5_read_next_data (hid_t group_id, con
 
   if (retval > 0)
     {
       // get documentation string, if any:
       int comment_length = H5Gget_comment (group_id, name, 0, 0);
 
       if (comment_length > 1)
 	{
-	  d->doc = new char[comment_length];
-	  H5Gget_comment (group_id, name, comment_length, d->doc);
+	  OCTAVE_LOCAL_BUFFER (char, tdoc, comment_length);
+	  H5Gget_comment (group_id, name, comment_length, tdoc);
+	  d->doc = tdoc;
 	}
       else if (strcmp (name, vname) != 0)
 	{
 	  // the name was changed by import; store the original name
 	  // as the documentation string:
-	  d->doc = new char [strlen (name) + 1];
-	  strcpy (d->doc, name);
+	  d->doc = name;
 	}
-      else
-	d->doc = 0;
 
       // copy name (actually, vname):
-      d->name = new char [strlen (vname) + 1];
-      strcpy (d->name, vname);
+      d->name = vname;
     }
 
   return retval;
 }
 
-// The following two subroutines create HDF5 representations of the way
-// we will store Octave complex and range types (pairs and triplets of
-// floating-point numbers, respectively).  NUM_TYPE is the HDF5 numeric
-// type to use for storage (e.g. H5T_NATIVE_DOUBLE to save as 'double').
-// Note that any necessary conversions are handled automatically by HDF5.
-
-static hid_t
-hdf5_make_complex_type (hid_t num_type)
-{
-  hid_t type_id = H5Tcreate (H5T_COMPOUND, sizeof (double) * 2);
-
-  H5Tinsert (type_id, "real", 0 * sizeof (double), num_type);
-  H5Tinsert (type_id, "imag", 1 * sizeof (double), num_type);
-
-  return type_id;
-}
-
-static hid_t
-hdf5_make_range_type (hid_t num_type)
-{
-  hid_t type_id = H5Tcreate (H5T_COMPOUND, sizeof (double) * 3);
-
-  H5Tinsert (type_id, "base", 0 * sizeof (double), num_type);
-  H5Tinsert (type_id, "limit", 1 * sizeof (double), num_type);
-  H5Tinsert (type_id, "increment", 2 * sizeof (double), num_type);
-
-  return type_id;
-}
-
 // Read the next Octave variable from the stream IS, which must really be
 // an hdf5_ifstream.  Return the variable value in tc, its doc string
 // in doc, and whether it is global in global.  The return value is
 // the name of the variable, or NULL if none were found or there was
 // and error.  If import is true, we try extra hard to import "foreign"
 // datasets (not created by Octave), although we usually do a reasonable
 // job anyway.  (c.f. load -import documentation.)
 static std::string
@@ -1816,21 +1813,16 @@ read_hdf5_data (std::istream& is,
 {
   std::string retval;
 
   doc.resize (0);
 
   hdf5_ifstream& hs = (hdf5_ifstream&) is;
   hdf5_callback_data d;
 
-  d.name = 0;
-  d.global = 0;
-  d.doc = 0;
-  d.complex_type = hdf5_make_complex_type (H5T_NATIVE_DOUBLE);
-  d.range_type = hdf5_make_range_type (H5T_NATIVE_DOUBLE);
   d.import = import;
 
   // Versions of HDF5 prior to 1.2.2 had a bug in H5Giterate where it
   // would return the index of the last item processed instead of the
   // next item to be processed, forcing us to increment the index manually.
 
   unsigned int vers_major, vers_minor, vers_release;
 
@@ -1852,30 +1844,29 @@ read_hdf5_data (std::istream& is,
 
       hs.current_item++;
     }
 
   if (H5Giterate_retval > 0)
     {
       global = d.global;
       tc = d.tc;
-      if (d.doc)
-	doc = d.doc;
+      doc = d.doc;
     }
   else
     {
       // an error occurred (H5Giterate_retval < 0) or there are no
       // more datasets print an error message if retval < 0?
       // hdf5_read_next_data already printed one, probably.
     }
 
   H5Tclose (d.complex_type);
   H5Tclose (d.range_type);
 
-  if (d.name)
+  if (! d.name.empty ())
     retval = d.name;
 
   return retval;
 }
 
 #endif /* HAVE_HDF5 */
 
 static std::string
