# HG changeset patch
# User Marco Caliari <marco.caliari@univr.it>
# Date 1504637143 25200
#      Tue Sep 05 11:45:43 2017 -0700
# Node ID 6e7bb85e32b800e259daa2b4c7fe612fbd156063
# Parent  e8a74d95b4f3e8dc6baf16ad765d7a943d1732ed
Allow ode15s and ode15i to work with row initial vectors (bug #50192).

* check_default_input.m: Validate that inputs Y0 and YP0 are numeric vectors.
Transform Y0 and YP0 to column vectors unconditionally.

* ode15s.m, ode15i.m: Add BIST tests for initial row vector.

diff --git a/scripts/ode/ode15i.m b/scripts/ode/ode15i.m
--- a/scripts/ode/ode15i.m
+++ b/scripts/ode/ode15i.m
@@ -509,16 +509,29 @@ endfunction
 
 ## Events option, five output arguments
 %!testif HAVE_SUNDIALS
 %! opt = odeset ("Events", @ff);
 %! [t, y, te, ye, ie] = ode15i (@rob, [0, 100], [1; 0; 0],
 %!                              [-1e-4; 1e-4; 0], opt);
 %! assert ([t(end), te', ie'], [10, 10, 10, 0, 1], [1, 0.2, 0.2, 0, 0]);
 
+## Initial solutions as row vectors
+%!testif HAVE_SUNDIALS
+%! A = eye (2);
+%! [tout, yout] = ode15i (@(t, y, yp) A * y - A * yp, ...
+%! [0, 1], [1, 1], [1, 1]);
+%! assert (size (yout), [20, 2])
+
+%!testif HAVE_SUNDIALS
+%! A = eye (2);
+%! [tout, yout] = ode15i (@(t, y, yp) A * y - A * yp, ...
+%! [0, 1], [1, 1], [1; 1]);
+%! assert (size (yout), [20, 2])
+
 ## Jacobian fun wrong dimension
 %!testif HAVE_SUNDIALS
 %! opt = odeset ("Jacobian", @jacwrong);
 %! fail ("[t, y] = ode15i (@rob, [0, 4e6], [1; 0; 0], [-1e-4; 1e-4; 0], opt)",
 %!       "ode15i: invalid value assigned to field 'Jacobian'");
 
 ## Jacobian cell dense wrong dimension
 %!testif HAVE_SUNDIALS
@@ -632,8 +645,18 @@ endfunction
 %! opt = odeset ("AbsTol", -1);
 %! fail ("[t, y] = ode15i (@fun, [0, 2], 2, 2, opt)",
 %!       "ode15i: AbsTol must be positive");
 
 %!testif HAVE_SUNDIALS
 %! opt = odeset ("AbsTol", [1, 1, 1]);
 %! fail ("[t, y] = ode15i (@fun, [0, 2], 2, 2, opt)",
 %!       "ode15i: invalid value assigned to field 'AbsTol'");
+
+%!testif HAVE_SUNDIALS
+%! A = zeros (2);
+%! fail ("ode15i (@(t, y, yp) A * y - A * yp, [0, 1], eye (2), [1, 1])",
+%!       "ode15i: Y0 must be a numeric vector");
+
+%!testif HAVE_SUNDIALS
+%! A = zeros (2);
+%! fail ("ode15i (@(t, y, yp) A * y - A * yp, [0, 1], [1, 1], eye (2))",
+%!       "ode15i: YP0 must be a numeric vector");
diff --git a/scripts/ode/ode15s.m b/scripts/ode/ode15s.m
--- a/scripts/ode/ode15s.m
+++ b/scripts/ode/ode15s.m
@@ -723,8 +723,19 @@ endfunction
 %! assert (sol.x(end), 10, 1);
 
 ## Events option, five output arguments
 %!testif HAVE_SUNDIALS
 %! opt = odeset ("Events", @feve, "Mass", @massdensefunstate,
 %!               "MStateDependence", "none");
 %! [t, y, te, ye, ie] = ode15s (@rob, [0, 100], [1; 0; 0], opt);
 %! assert ([t(end), te', ie'], [10, 10, 10, 0, 1], [1, 0.5, 0.5, 0, 0]);
+
+## Initial solution as row vector
+%!testif HAVE_SUNDIALS
+%! A = zeros (2);
+%! [tout, yout] = ode15s (@(t, y) A * y, [0, 1], [1, 1]);
+%! assert (yout, ones (18, 2))
+
+%!testif HAVE_SUNDIALS
+%! A = zeros (2);
+%! fail ("ode15s (@(t, y) A * y, [0, 1], eye (2))",
+%!       "ode15s: YP0 must be a numeric vector");
diff --git a/scripts/ode/private/check_default_input.m b/scripts/ode/private/check_default_input.m
--- a/scripts/ode/private/check_default_input.m
+++ b/scripts/ode/private/check_default_input.m
@@ -46,19 +46,30 @@ function [fun] = check_default_input (fu
                [solver ": invalid value assigned to field '%s'"], "trange");
   elseif (! ((all (diff (trange) > 0)) || all (diff (-trange) > 0)))
         error ("Octave:invalid-input-arg",
                [solver ": invalid value assigned to field '%s'"], "trange");
   endif
 
   ## Check y0 and yp0
   y0 = varargin{1};
+  if (! isnumeric (y0) || ! isvector (y0))
+    error ("Octave:invalid-input-arg",
+           [solver ": Y0 must be a numeric vector"]);
+  endif
+  y0 = y0(:);
 
   if (nargin == 5)
     yp0 = varargin{2};
+    if (! isnumeric (yp0) || ! isvector (yp0))
+      error ("Octave:invalid-input-arg",
+             [solver ": YP0 must be a numeric vector"]);
+    endif
+    yp0 = yp0(:);
+
     n = numel (feval (fun, trange(1), y0, yp0));
     validateattributes (yp0, {"float"}, {"numel", n}, solver, "yp0");
   else
     n = numel (feval (fun, trange (1), y0));
   endif
 
   validateattributes (y0, {"float"}, {"numel", n}, solver, "y0");
 
