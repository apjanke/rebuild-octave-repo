# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1425084268 18000
#      Fri Feb 27 19:44:28 2015 -0500
# Node ID 12ecb7212b4444a4583560f9e9c5c081b4c6e9dd
# Parent  f799bf70350f8e52285fadc07ec66e98e105c1e5
move some files without external dependencies from dldfcn to corefcn

* __dsearchn__.cc, __ichol__.cc, __ilu__.cc, tsearch.cc: Move from
dldfcn to corefcn directory.  Use DEFUN instead of DEFUN_DLD.
* libinterp/corefcn/module.mk, libinterp/dldfcn/module-files: Update.

diff --git a/libinterp/dldfcn/__dsearchn__.cc b/libinterp/corefcn/__dsearchn__.cc
rename from libinterp/dldfcn/__dsearchn__.cc
rename to libinterp/corefcn/__dsearchn__.cc
--- a/libinterp/dldfcn/__dsearchn__.cc
+++ b/libinterp/corefcn/__dsearchn__.cc
@@ -25,23 +25,23 @@ along with Octave; see the file COPYING.
 #endif
 
 #include <iostream>
 #include <fstream>
 #include <string>
 
 #include "lo-math.h"
 
-#include "defun-dld.h"
+#include "defun.h"
 #include "error.h"
 #include "oct-obj.h"
 
-DEFUN_DLD (__dsearchn__, args, ,
-           "-*- texinfo -*-\n\
-@deftypefn {Loadable Function} {[@var{idx}, @var{d}] =} dsearch (@var{x}, @var{xi})\n\
+DEFUN (__dsearchn__, args, ,
+       "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {[@var{idx}, @var{d}] =} dsearch (@var{x}, @var{xi})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   int nargin = args.length ();
   octave_value_list retval;
 
   if (nargin != 2)
     {
diff --git a/libinterp/dldfcn/__ichol__.cc b/libinterp/corefcn/__ichol__.cc
rename from libinterp/dldfcn/__ichol__.cc
rename to libinterp/corefcn/__ichol__.cc
--- a/libinterp/dldfcn/__ichol__.cc
+++ b/libinterp/corefcn/__ichol__.cc
@@ -22,17 +22,18 @@ along with Octave; see the file COPYING.
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "oct-locbuf.h"
 
-#include "defun-dld.h"
+#include "defun.h"
+#include "error.h"
 #include "parse.h"
 
 // Secondary functions for complex and real case used in ichol algorithms.
 Complex ichol_mult_complex (Complex a, Complex b)
 {
 #if defined (HAVE_CXX_COMPLEX_SETTERS)
   b.imag (-std::imag (b));
 #elif defined (HAVE_CXX_COMPLEX_REFERENCE_ACCESSORS)
@@ -182,19 +183,20 @@ void ichol_0 (octave_matrix_t& sm, const
               jjrow = ridx[Lfirst[k]];
               Llist[k] = Llist[jjrow];
               Llist[jjrow] = k;
             }
         }
     }
 }
 
-DEFUN_DLD (__ichol0__, args, nargout, "-*- texinfo -*-\n\
-@deftypefn  {Loadable Function} {@var{L} =} __ichol0__ (@var{A})\n\
-@deftypefnx {Loadable Function} {@var{L} =} __ichol0__ (@var{A}, @var{michol})\n\
+DEFUN (__ichol0__, args, nargout,
+       "-*- texinfo -*-\n\
+@deftypefn  {Built-in Function} {@var{L} =} __ichol0__ (@var{A})\n\
+@deftypefnx {Built-in Function} {@var{L} =} __ichol0__ (@var{A}, @var{michol})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 
 {
   octave_value_list retval;
 
   int nargin = args.length ();
   std::string michol = "off";
@@ -435,20 +437,21 @@ void ichol_t (const octave_matrix_t& sm,
       for (i = 0; i < total_len; i++)
         {
           L.ridx (i) = ridx_l[i];
           L.data (i) = data_l[i];
         }
     }
 }
 
-DEFUN_DLD (__icholt__, args, nargout, "-*- texinfo -*-\n\
-@deftypefn  {Loadable Function} {@var{L} =} __icholt__ (@var{A})\n\
-@deftypefnx {Loadable Function} {@var{L} =} __icholt__ (@var{A}, @var{droptol})\n\
-@deftypefnx {Loadable Function} {@var{L} =} __icholt__ (@var{A}, @var{droptol}, @var{michol})\n\
+DEFUN (__icholt__, args, nargout,
+       "-*- texinfo -*-\n\
+@deftypefn  {Built-in Function} {@var{L} =} __icholt__ (@var{A})\n\
+@deftypefnx {Built-in Function} {@var{L} =} __icholt__ (@var{A}, @var{droptol})\n\
+@deftypefnx {Built-in Function} {@var{L} =} __icholt__ (@var{A}, @var{droptol}, @var{michol})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value_list retval;
   int nargin = args.length ();
   // Default values of parameters
   std::string michol = "off";
   double droptol = 0;
diff --git a/libinterp/dldfcn/__ilu__.cc b/libinterp/corefcn/__ilu__.cc
rename from libinterp/dldfcn/__ilu__.cc
rename to libinterp/corefcn/__ilu__.cc
--- a/libinterp/dldfcn/__ilu__.cc
+++ b/libinterp/corefcn/__ilu__.cc
@@ -22,17 +22,18 @@ along with Octave; see the file COPYING.
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "oct-locbuf.h"
 
-#include "defun-dld.h"
+#include "defun.h"
+#include "error.h"
 #include "parse.h"
 
 // That function implements the IKJ and JKI variants of Gaussian elimination to
 // perform the ILUTP decomposition.  The behaviour is controlled by milu
 // parameter.  If milu = ['off'|'col'] the JKI version is performed taking
 // advantage of CCS format of the input matrix.  If milu = 'row' the input
 // matrix has to be transposed to obtain the equivalent CRS structure so we can
 // work efficiently with rows.  In this case IKJ version is used.
@@ -120,20 +121,21 @@ void ilu_0 (octave_matrix_t& sm, const s
         }
       for (i = j1; i <= j2; i++)
         iw[ridx[i]] = -1;
     }
   if (opt == ROW)
     sm = sm.transpose ();
 }
 
-DEFUN_DLD (__ilu0__, args, nargout, "-*- texinfo -*-\n\
-@deftypefn  {Loadable Function} {[@var{L}, @var{U}] =} __ilu0__ (@var{A})\n\
-@deftypefnx {Loadable Function} {[@var{L}, @var{U}] =} __ilu0__ (@var{A}, @var{milu})\n\
-@deftypefnx {Loadable Function} {[@var{L}, @var{U}, @var{P}] =} __ilu0__ (@var{A}, @dots{})\n\
+DEFUN (__ilu0__, args, nargout,
+       "-*- texinfo -*-\n\
+@deftypefn  {Built-in Function} {[@var{L}, @var{U}] =} __ilu0__ (@var{A})\n\
+@deftypefnx {Built-in Function} {[@var{L}, @var{U}] =} __ilu0__ (@var{A}, @var{milu})\n\
+@deftypefnx {Built-in Function} {[@var{L}, @var{U}, @var{P}] =} __ilu0__ (@var{A}, @dots{})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
   std::string milu;
 
@@ -462,21 +464,22 @@ void ilu_crout (octave_matrix_t& sm_l, o
         {
           U.ridx (i) = ridx_u[i];
           U.data (i) = data_u[i];
         }
       U = U.transpose ();
     }
 }
 
-DEFUN_DLD (__iluc__, args, nargout, "-*- texinfo -*-\n\
-@deftypefn  {Loadable Function} {[@var{L}, @var{U}] =} __iluc__ (@var{A})\n\
-@deftypefnx {Loadable Function} {[@var{L}, @var{U}] =} __iluc__ (@var{A}, @var{droptol}) \n\
-@deftypefnx {Loadable Function} {[@var{L}, @var{U}] =} __iluc__ (@var{A}, @var{droptol}, @var{milu})\n\
-@deftypefnx {Loadable Function} {[@var{L}, @var{U}, @var{P}] =} __iluc__ (@var{A}, @dots{})\n\
+DEFUN (__iluc__, args, nargout,
+       "-*- texinfo -*-\n\
+@deftypefn  {Built-in Function} {[@var{L}, @var{U}] =} __iluc__ (@var{A})\n\
+@deftypefnx {Built-in Function} {[@var{L}, @var{U}] =} __iluc__ (@var{A}, @var{droptol}) \n\
+@deftypefnx {Built-in Function} {[@var{L}, @var{U}] =} __iluc__ (@var{A}, @var{droptol}, @var{milu})\n\
+@deftypefnx {Built-in Function} {[@var{L}, @var{U}, @var{P}] =} __iluc__ (@var{A}, @dots{})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value_list retval;
   int nargin = args.length ();
   std::string milu = "off";
   double droptol = 0;
 
@@ -943,23 +946,24 @@ void ilu_tp (octave_matrix_t& sm, octave
           U = U.transpose ();
           // The diagonal, conveniently permuted is added to U
           U += diag.index (idx_vector::colon, perm_vec);
           L = L.transpose ();
         }
     }
 }
 
-DEFUN_DLD (__ilutp__, args, nargout, "-*- texinfo -*-\n\
-@deftypefn  {Loadable Function} {[@var{L}, @var{U}] =} __ilutp__ (@var{A})\n\
-@deftypefnx {Loadable Function} {[@var{L}, @var{U}] =} __ilutp__ (@var{A}, @var{droptol})\n\
-@deftypefnx {Loadable Function} {[@var{L}, @var{U}] =} __ilutp__ (@var{A}, @var{droptol}, @var{thresh})\n\
-@deftypefnx {Loadable Function} {[@var{L}, @var{U}] =} __ilutp__ (@var{A}, @var{droptol}, @var{thresh}, @var{milu})\n\
-@deftypefnx {Loadable Function} {[@var{L}, @var{U}] =} __ilutp__ (@var{A}, @var{droptol}, @var{thresh}, @var{milu}, @var{udiag})\n\
-@deftypefnx {Loadable Function} {[@var{L}, @var{U}, @var{P}] =} __ilutp__ (@var{A}, @dots{})\n\
+DEFUN (__ilutp__, args, nargout,
+       "-*- texinfo -*-\n\
+@deftypefn  {Built-in Function} {[@var{L}, @var{U}] =} __ilutp__ (@var{A})\n\
+@deftypefnx {Built-in Function} {[@var{L}, @var{U}] =} __ilutp__ (@var{A}, @var{droptol})\n\
+@deftypefnx {Built-in Function} {[@var{L}, @var{U}] =} __ilutp__ (@var{A}, @var{droptol}, @var{thresh})\n\
+@deftypefnx {Built-in Function} {[@var{L}, @var{U}] =} __ilutp__ (@var{A}, @var{droptol}, @var{thresh}, @var{milu})\n\
+@deftypefnx {Built-in Function} {[@var{L}, @var{U}] =} __ilutp__ (@var{A}, @var{droptol}, @var{thresh}, @var{milu}, @var{udiag})\n\
+@deftypefnx {Built-in Function} {[@var{L}, @var{U}, @var{P}] =} __ilutp__ (@var{A}, @dots{})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
   std::string milu = "";
   double droptol = 0, thresh = 1;
diff --git a/libinterp/corefcn/module.mk b/libinterp/corefcn/module.mk
--- a/libinterp/corefcn/module.mk
+++ b/libinterp/corefcn/module.mk
@@ -133,16 +133,19 @@ C_COREFCN_SRC = \
   corefcn/cutils.c \
   corefcn/matherr.c \
   corefcn/siglist.c
 
 COREFCN_SRC = \
   corefcn/Cell.cc \
   corefcn/__contourc__.cc \
   corefcn/__dispatch__.cc \
+  corefcn/__dsearchn__.cc \
+  corefcn/__ichol__.cc \
+  corefcn/__ilu__.cc \
   corefcn/__lin_interpn__.cc \
   corefcn/__pchip_deriv__.cc \
   corefcn/__qp__.cc \
   corefcn/balance.cc \
   corefcn/besselj.cc \
   corefcn/betainc.cc \
   corefcn/bitfcns.cc \
   corefcn/bsxfun.cc \
@@ -250,18 +253,19 @@ COREFCN_SRC = \
   corefcn/svd.cc \
   corefcn/sylvester.cc \
   corefcn/symtab.cc \
   corefcn/syscalls.cc \
   corefcn/sysdep.cc \
   corefcn/time.cc \
   corefcn/toplev.cc \
   corefcn/tril.cc \
+  corefcn/tsearch.cc \
+  corefcn/txt-eng-ft.cc \
   corefcn/txt-eng.cc \
-  corefcn/txt-eng-ft.cc \
   corefcn/typecast.cc \
   corefcn/urlwrite.cc \
   corefcn/utils.cc \
   corefcn/variables.cc \
   corefcn/xdiv.cc \
   corefcn/xnorm.cc \
   corefcn/xpow.cc \
   corefcn/zfstream.cc \
diff --git a/libinterp/dldfcn/tsearch.cc b/libinterp/corefcn/tsearch.cc
rename from libinterp/dldfcn/tsearch.cc
rename to libinterp/corefcn/tsearch.cc
--- a/libinterp/dldfcn/tsearch.cc
+++ b/libinterp/corefcn/tsearch.cc
@@ -21,27 +21,22 @@ along with Octave; see the file COPYING.
 */
 
 // Author: Andreas Stahel <Andreas.Stahel@hta-bi.bfh.ch>
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
-#include <iostream>
-#include <fstream>
-#include <string>
-
 #include "lo-ieee.h"
 #include "lo-math.h"
 
-#include "defun-dld.h"
+#include "defun.h"
 #include "error.h"
 #include "oct-obj.h"
-#include "parse.h"
 
 inline double max (double a, double b, double c)
 {
   if (a < b)
     return (b < c ? c : b);
   else
     return (a < c ? c : a);
 }
@@ -59,19 +54,19 @@ inline double min (double a, double b, d
 // for large data set the algorithm is very slow
 // one should presort (how?) either the elements of the points of evaluation
 // to cut down the time needed to decide which triangle contains the
 // given point
 
 // e.g., build up a neighbouring triangle structure and use a simplex-like
 // method to traverse it
 
-DEFUN_DLD (tsearch, args, ,
-           "-*- texinfo -*-\n\
-@deftypefn {Loadable Function} {@var{idx} =} tsearch (@var{x}, @var{y}, @var{t}, @var{xi}, @var{yi})\n\
+DEFUN (tsearch, args, ,
+       "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {@var{idx} =} tsearch (@var{x}, @var{y}, @var{t}, @var{xi}, @var{yi})\n\
 Search for the enclosing Delaunay convex hull.  For @code{@var{t} =\n\
 delaunay (@var{x}, @var{y})}, finds the index in @var{t} containing the\n\
 points @code{(@var{xi}, @var{yi})}.  For points outside the convex hull,\n\
 @var{idx} is NaN.\n\
 @seealso{delaunay, delaunayn}\n\
 @end deftypefn")
 {
   const double eps=1.0e-12;
diff --git a/libinterp/dldfcn/module-files b/libinterp/dldfcn/module-files
--- a/libinterp/dldfcn/module-files
+++ b/libinterp/dldfcn/module-files
@@ -1,26 +1,22 @@
 # FILE|CPPFLAGS|LDFLAGS|LIBRARIES
 __delaunayn__.cc|$(QHULL_CPPFLAGS)|$(QHULL_LDFLAGS)|$(QHULL_LIBS)
-__dsearchn__.cc
 __eigs__.cc|$(ARPACK_CPPFLAGS) $(SPARSE_XCPPFLAGS)|$(ARPACK_LDFLAGS) $(SPARSE_XLDFLAGS)|$(ARPACK_LIBS) $(SPARSE_XLIBS) $(LAPACK_LIBS) $(BLAS_LIBS)
 __fltk_uigetfile__.cc|$(FLTK_CPPFLAGS) $(FT2_CPPFLAGS)|$(FLTK_LDFLAGS) $(FT2_LDFLAGS)|$(FLTK_LIBS) $(FT2_LIBS)
 __glpk__.cc|$(GLPK_CPPFLAGS)|$(GLPK_LDFLAGS)|$(GLPK_LIBS)
-__ichol__.cc
-__ilu__.cc
 __init_fltk__.cc|$(FLTK_CPPFLAGS) $(FT2_CPPFLAGS) $(FONTCONFIG_CPPFLAGS)|$(FLTK_LDFLAGS) $(FT2_LDFLAGS)|$(FLTK_LIBS) $(FT2_LIBS) $(OPENGL_LIBS)
 __init_gnuplot__.cc|$(FT2_CPPFLAGS) $(FONTCONFIG_CPPFLAGS)||
 __magick_read__.cc|$(MAGICK_CPPFLAGS)|$(MAGICK_LDFLAGS)|$(MAGICK_LIBS)
 __osmesa_print__.cc|$(OSMESA_CPPFLAGS) $(FT2_CPPFLAGS)|$(OSMESA_LDFLAGS)|$(OSMESA_LIBS)
 __voronoi__.cc|$(QHULL_CPPFLAGS)|$(QHULL_LDFLAGS)|$(QHULL_LIBS)
 amd.cc|$(SPARSE_XCPPFLAGS)|$(SPARSE_XLDFLAGS)|$(SPARSE_XLIBS)
 ccolamd.cc|$(SPARSE_XCPPFLAGS)|$(SPARSE_XLDFLAGS)|$(SPARSE_XLIBS)
 chol.cc|$(SPARSE_XCPPFLAGS)|$(SPARSE_XLDFLAGS)|$(SPARSE_XLIBS)
 colamd.cc|$(SPARSE_XCPPFLAGS)|$(SPARSE_XLDFLAGS)|$(SPARSE_XLIBS)
 convhulln.cc|$(QHULL_CPPFLAGS)|$(QHULL_LDFLAGS)|$(QHULL_LIBS)
 dmperm.cc|$(SPARSE_XCPPFLAGS)|$(SPARSE_XLDFLAGS)|$(SPARSE_XLIBS)
 fftw.cc|$(FFTW_XCPPFLAGS)|$(FFTW_XLDFLAGS)|$(FFTW_XLIBS)
 qr.cc|$(QRUPDATE_CPPFLAGS) $(SPARSE_XCPPFLAGS)|$(QRUPDATE_LDFLAGS) $(SPARSE_XLDFLAGS)|$(QRUPDATE_LIBS) $(SPARSE_XLIBS)
 symbfact.cc|$(SPARSE_XCPPFLAGS)|$(SPARSE_XLDFLAGS)|$(SPARSE_XLIBS)
 symrcm.cc|$(SPARSE_XCPPFLAGS)|$(SPARSE_XLDFLAGS)|$(SPARSE_XLIBS)
-tsearch.cc
 audioread.cc|$(SNDFILE_CPPFLAGS)|$(SNDFILE_LDFLAGS)|$(SNDFILE_LIBS)
 audiodevinfo.cc|$(PORTAUDIO_CPPFLAGS)|$(PORTAUDIO_LDFLAGS)|$(PORTAUDIO_LIBS)
