# HG changeset patch
# User Torsten <mttl@mailbox.org>
# Date 1491800562 -7200
#      Mon Apr 10 07:02:42 2017 +0200
# Node ID c319e6d737f266fc1a0bd5e654eb6a58b9448d73
# Parent  2a122c3fd80f4a1bb8b466ec695d9c30b4def75d
Backed out changeset 7332287221a9

diff --git a/libgui/src/m-editor/external-editor-interface.cc b/libgui/src/m-editor/external-editor-interface.cc
deleted file mode 100644
--- a/libgui/src/m-editor/external-editor-interface.cc
+++ /dev/null
@@ -1,129 +0,0 @@
-/*
-
-Copyright (C) 2017 Torsten
-
-This file is part of Octave.
-
-Octave is free software; you can redistribute it and/or modify it
-under the terms of the GNU General Public License as published by
-the Free Software Foundation; either version 3 of the License, or
-(at your option) any later version.
-
-Octave is distributed in the hope that it will be useful, but
-WITHOUT ANY WARRANTY; without even the implied warranty of
-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU General Public License for more details.
-
-You should have received a copy of the GNU General Public License
-along with Octave; see the file COPYING.  If not, see
-<http://www.gnu.org/licenses/>.
-
-*/
-
-#if defined (HAVE_CONFIG_H)
-#  include "config.h"
-#endif
-
-#include <QSettings>
-#include <QMessageBox>
-#include <QProcess>
-
-#include "external-editor-interface.h"
-#include "resource-manager.h"
-
-external_editor_interface::external_editor_interface (QWidget *main_win)
-    : QWidget (main_win)
-{
-  // Connect the signal for displaying a specific preference dialog
-  connect (this, SIGNAL (request_settings_dialog (const QString&)),
-           main_win, SLOT (process_settings_dialog_request (const QString&)));
-};
-
-// Get and verify the settings of the external editor program
-QString
-external_editor_interface::external_editor ()
-{
-  QSettings *settings = resource_manager::get_settings ();
-  QString editor = settings->value ("customFileEditor").toString ();
-
-  // check the settings (avoid an empty string)
-  if (editor.trimmed ().isEmpty ())
-    {
-      QMessageBox *msgBox = new QMessageBox (QMessageBox::Warning,
-                              tr ("Octave Editor"),
-                              tr ("There is no custom editor configured yet.\n"
-                                  "Do you want to open the preferences?"),
-                              QMessageBox::No | QMessageBox::Yes);
-      msgBox->setDefaultButton (QMessageBox::Yes);
-      msgBox->setAttribute (Qt::WA_DeleteOnClose);
-      int button = msgBox->exec ();
-
-      if (button == QMessageBox::Yes)
-        emit request_settings_dialog ("editor");
-    }
-
-  return editor;
-}
-
-// Calling the external editor
-bool
-external_editor_interface::call_custom_editor (const QString& file, int line)
-{
-  if (line > -1)  // check for a specific line (debugging)
-    return true;  // yes: do not open a file in external editor
-
-  QString editor = external_editor ();
-  if (editor.isEmpty ())
-    return true;
-
-  // replace macros
-  editor.replace ("%f", file);
-  editor.replace ("%l", QString::number (line));
-
-  // start the process and check for success
-  bool started_ok = QProcess::startDetached (editor);
-
-  if (started_ok != true)
-    {
-      QMessageBox *msgBox = new QMessageBox (QMessageBox::Critical,
-                               tr ("Octave Editor"),
-                               tr ("Could not start custom file editor\n%1").
-                               arg (editor),
-                               QMessageBox::Ok);
-
-      msgBox->setWindowModality (Qt::NonModal);
-      msgBox->setAttribute (Qt::WA_DeleteOnClose);
-      msgBox->show ();
-    }
-
-  return started_ok;
-}
-
-
-// Slots for the several signals for invoking the editor
-
-void
-external_editor_interface::request_open_file (QString file, int line)
-{
-  call_custom_editor (file, line);
-}
-
-void
-external_editor_interface::request_new_file (const QString&)
-{
-  call_custom_editor ();
-}
-
-void
-external_editor_interface::request_open_file (const QString& file_name,
-                const QString&, int line, bool, bool, bool, const QString&)
-{
-  call_custom_editor (file_name, line);
-}
-
-void
-external_editor_interface::handle_edit_file_request (const QString& file)
-{
-  call_custom_editor (file);
-}
-
diff --git a/libgui/src/m-editor/external-editor-interface.h b/libgui/src/m-editor/external-editor-interface.h
deleted file mode 100644
--- a/libgui/src/m-editor/external-editor-interface.h
+++ /dev/null
@@ -1,62 +0,0 @@
-/*
-
-Copyright (C) 2017 Torsten
-
-This file is part of Octave.
-
-Octave is free software; you can redistribute it and/or modify it
-under the terms of the GNU Genera*_*)
-* l Public License as published by
-the Free Software Foundation; either version 3 of the License, or
-(at your option) any later version.
-
-Octave is distributed in the hope that it will be useful, but
-WITHOUT ANY WARRANTY; without even the implied warranty of
-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU General Public License for more details.
-
-You should have received a copy of the GNU General Public License
-along with Octave; see the file COPYING.  If not, see
-<http://www.gnu.org/licenses/>.
-
-*/
-
-#if ! defined (octave_external_editor_interface_h)
-#define octave_external_editor_interface_h 1
-
-#include <QWidget>
-#include <QString>
-
-class external_editor_interface : public QWidget
-{
-
-  Q_OBJECT
-
-public:
-
-  external_editor_interface (QWidget *main_win);
-  ~external_editor_interface () { };
-
-signals:
-
-  void request_settings_dialog (const QString&);
-
-public slots:
-
-  void request_open_file (QString file, int line);
-  void request_open_file (const QString& fileName,
-                          const QString& encoding = QString (),
-                          int line = -1, bool debug_pointer = false,
-                          bool breakpoint_marker = false, bool insert = true,
-                          const QString& cond = "");
-  void request_new_file (const QString&);
-  void handle_edit_file_request (const QString& file);
-
-private:
-
-  bool call_custom_editor (const QString& file = QString (), int line = -1);
-  QString external_editor ();
-
-};
-
-#endif
diff --git a/libgui/src/m-editor/file-editor-interface.h b/libgui/src/m-editor/file-editor-interface.h
--- a/libgui/src/m-editor/file-editor-interface.h
+++ b/libgui/src/m-editor/file-editor-interface.h
@@ -63,16 +63,18 @@ public:
   virtual bool check_closing (void) = 0;
 
   virtual void empty_script (bool, bool) = 0;
 
   virtual void enable_menu_shortcuts (bool enable) = 0;
 
 public slots:
   virtual void request_new_file (const QString& command = QString ()) = 0;
+  virtual void request_new_script (const QString& command = QString ()) = 0;
+  virtual void request_new_function (bool) = 0;
   virtual void request_open_file () = 0;
   virtual void request_open_file (const QString& openFileName,
                                   const QString& encoding = QString (),
                                   int line = -1,
                                   bool debug_pointer = false,
                                   bool breakpoint_marker = false,
                                   bool insert = true,
                                   const QString& cond = "") = 0;
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -22,24 +22,24 @@ along with Octave; see the file COPYING.
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
 #if defined (HAVE_QSCINTILLA)
 
 #include "file-editor.h"
-#include "external-editor-interface.h"
 #include "resource-manager.h"
 #include "shortcut-manager.h"
 
 #include <QApplication>
 #include <QFile>
 #include <QFileDialog>
 #include <QFont>
+#include <QInputDialog>
 #include <QMessageBox>
 #include <QMimeData>
 #include <QProcess>
 #include <QStyle>
 #include <QTabBar>
 #include <QTextStream>
 #include <QVBoxLayout>
 #include <Qsci/qscicommandset.h>
@@ -224,16 +224,58 @@ file_editor::request_new_file (const QSt
     {
       add_file_editor_tab (fileEditorTab, "");  // new tab with empty title
       fileEditorTab->new_file (commands);       // title is updated here
       focus ();                                 // focus editor and new tab
     }
 }
 
 void
+file_editor::request_new_script (const QString& commands)
+{
+  request_new_file (commands);
+}
+
+void
+file_editor::request_new_function (bool)
+{
+  bool ok;
+  // get the name of the new function
+  QString new_name = QInputDialog::getText (this, tr ("New Function"),
+                     tr ("New function name:\n"), QLineEdit::Normal, "", &ok);
+  if (ok && new_name.length () > 0)
+    {
+      // append suffix if it not already exists
+      if (new_name.rightRef (2) != ".m")
+        new_name.append (".m");
+      // check whether new files are created without prompt
+      QSettings *settings = resource_manager::get_settings ();
+      if (! settings->value ("editor/create_new_file",false).toBool ())
+        {
+          // no, so enable this settings and wait for end of new file loading
+          settings->setValue ("editor/create_new_file",true);
+          connect (this, SIGNAL (file_loaded_signal ()),
+                   this, SLOT (restore_create_file_setting ()));
+        }
+      // start the edit command
+      emit execute_command_in_terminal_signal ("edit " + new_name);
+    }
+}
+
+void
+file_editor::restore_create_file_setting ()
+{
+  // restore the new files creation setting
+  QSettings *settings = resource_manager::get_settings ();
+  settings->setValue ("editor/create_new_file",false);
+  disconnect (this, SIGNAL (file_loaded_signal ()),
+              this, SLOT (restore_create_file_setting ()));
+}
+
+void
 file_editor::request_open_file (void)
 {
   // Open file isn't a file_editor_tab function since the file
   // editor tab has yet to be created and there is no object to
   // pass a signal to.  Hence, functionality is here.
 
   // Create a NonModal message.
   QFileDialog *fileDialog = new QFileDialog (this);
@@ -316,20 +358,38 @@ file_editor::find_tab_widget (const QStr
 bool
 file_editor::call_custom_editor (const QString& file_name, int line)
 {
   // Check if the user wants to use a custom file editor.
   QSettings *settings = resource_manager::get_settings ();
 
   if (settings->value ("useCustomFileEditor",false).toBool ())
     {
-      // use the external editor interface for handling the call
-      external_editor_interface ext_editor (main_win ());
-
-      ext_editor.request_open_file (file_name, line);
+      if (line > -1)  // check for a specific line (debugging)
+        return true;  // yes: do ont open a file in external editor
+
+      QString editor = settings->value ("customFileEditor").toString ();
+      editor.replace ("%f", file_name);
+      editor.replace ("%l", QString::number (line));
+
+      bool started_ok = QProcess::startDetached (editor);
+
+      if (started_ok != true)
+        {
+          QMessageBox *msgBox
+            = new QMessageBox (QMessageBox::Critical,
+                               tr ("Octave Editor"),
+                               tr ("Could not start custom file editor\n%1").
+                               arg (editor),
+                               QMessageBox::Ok, this);
+
+          msgBox->setWindowModality (Qt::NonModal);
+          msgBox->setAttribute (Qt::WA_DeleteOnClose);
+          msgBox->show ();
+        }
 
       if (line < 0 && ! file_name.isEmpty ())
         handle_mru_add_file (QFileInfo (file_name).canonicalFilePath (),
                              QString ());
 
       return true;
     }
 
@@ -613,16 +673,102 @@ file_editor::check_conflict_save (const 
       return;
     }
 
   // Can save without conflict, have the file editor tab do so.
   emit fetab_save_file (saveFileWidget, saveFileName, remove_on_success);
 }
 
 void
+file_editor::handle_edit_mfile_request (const QString& fname,
+                                        const QString& ffile,
+                                        const QString& curr_dir, int line)
+{
+  // Is it a regular function within the search path? (Call __which__)
+  octave_value_list fct = F__which__ (ovl (fname.toStdString ()),0);
+  octave_map map = fct(0).map_value ();
+
+  QString type = QString::fromStdString (
+                         map.contents ("type").data ()[0].string_value ());
+  QString name = QString::fromStdString (
+                         map.contents ("name").data ()[0].string_value ());
+
+  QString message = QString ();
+  QString filename = QString ();
+
+  if (type == QString ("built-in function"))
+    {
+      // built in function: can't edit
+      message = tr ("%1 is a built-in function");
+    }
+  else if (type.isEmpty ())
+    {
+      // function not known to octave -> try directory of edited file
+      // get directory
+      QDir dir;
+      if (ffile.isEmpty ())
+        {
+          if (curr_dir.isEmpty ())
+            dir = QDir (ced);
+          else
+            dir = QDir (curr_dir);
+        }
+      else
+        dir = QDir (QFileInfo (ffile).canonicalPath ());
+
+      // function not known to octave -> try directory of edited file
+      QFileInfo file = QFileInfo (dir, fname + ".m");
+
+      if (file.exists ())
+        {
+          filename = file.canonicalFilePath (); // local file exists
+        }
+      else
+        {
+          // local file does not exist -> try private directory
+          file = QFileInfo (ffile);
+          file = QFileInfo (QDir (file.canonicalPath () + "/private"),
+                            fname + ".m");
+
+          if (file.exists ())
+            {
+              filename = file.canonicalFilePath ();  // private function exists
+            }
+          else
+            {
+              message = tr ("Can not find function %1");  // no file found
+            }
+        }
+    }
+
+  if (! message.isEmpty ())
+    {
+      QMessageBox *msgBox
+        = new QMessageBox (QMessageBox::Critical,
+                           tr ("Octave Editor"),
+                           message.arg (name),
+                           QMessageBox::Ok, this);
+
+      msgBox->setWindowModality (Qt::NonModal);
+      msgBox->setAttribute (Qt::WA_DeleteOnClose);
+      msgBox->show ();
+      return;
+    }
+
+  if (filename.isEmpty ())
+    filename = QString::fromStdString (
+                           map.contents ("file").data ()[0].string_value ());
+
+  if (! filename.endsWith (".m"))
+    filename.append (".m");
+
+  request_open_file (filename, QString (), line);  // default encoding
+}
+
+void
 file_editor::handle_insert_debugger_pointer_request (const QString& file,
                                                      int line)
 {
   request_open_file (file, QString (), line, true); // default encoding
 }
 
 void
 file_editor::handle_delete_debugger_pointer_request (const QString& file,
@@ -1757,16 +1903,27 @@ file_editor::construct (void)
   // signals
   connect (this, SIGNAL (execute_command_in_terminal_signal (const QString&)),
            main_win (), SLOT (execute_command_in_terminal (const QString&)));
 
   connect (this, SIGNAL (request_settings_dialog (const QString&)),
            main_win (),
            SLOT (process_settings_dialog_request (const QString&)));
 
+  connect (main_win (), SIGNAL (new_file_signal (const QString&)),
+           this, SLOT (request_new_file (const QString&)));
+
+  connect (main_win (), SIGNAL (open_file_signal (const QString&)),
+           this, SLOT (request_open_file (const QString&)));
+
+  connect (main_win (), SIGNAL (edit_mfile_request (const QString&,
+                                       const QString&, const QString&, int)),
+           this, SLOT (handle_edit_mfile_request (const QString&,
+                                       const QString&, const QString&, int)));
+
   connect (_mru_file_menu, SIGNAL (triggered (QAction *)),
            this, SLOT (request_mru_open_file (QAction *)));
 
   mru_menu_update ();
 
   connect (_tab_widget, SIGNAL (tabCloseRequested (int)),
            this, SLOT (handle_tab_close_request (int)));
 
@@ -1870,17 +2027,17 @@ file_editor::add_file_editor_tab (file_e
   connect (f, SIGNAL (run_file_signal (const QFileInfo&)),
            main_win (), SLOT (run_file_in_terminal (const QFileInfo&)));
 
   connect (f, SIGNAL (request_open_file (const QString&)),
            this, SLOT (request_open_file (const QString&)));
 
   connect (f, SIGNAL (edit_mfile_request (const QString&, const QString&,
                                           const QString&, int)),
-           main_win (), SLOT (handle_edit_mfile_request (const QString&,
+           this, SLOT (handle_edit_mfile_request (const QString&,
                                                   const QString&,
                                                   const QString&, int)));
 
   connect (f, SIGNAL (set_focus_editor_signal (QWidget*)),
            this, SLOT (set_focus (QWidget*)));
 
   // Signals from the file_editor non-trivial operations
   connect (this, SIGNAL (fetab_settings_changed (const QSettings *)),
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -200,16 +200,18 @@ signals:
 public slots:
 
   void focus (void);
   void set_focus (QWidget* fet);
   void enable_menu_shortcuts (bool);
   bool check_closing (void);
 
   void request_new_file (const QString& commands);
+  void request_new_script (const QString& commands);
+  void request_new_function (bool triggered = true);
   void request_open_file (void);
   void request_close_file (bool);
   void request_close_all_files (bool);
   void request_close_other_files (bool);
   void request_mru_open_file (QAction *action);
   void request_print_file (bool);
 
   void request_redo (bool);
@@ -272,16 +274,18 @@ public slots:
   void handle_mru_add_file (const QString& file_name, const QString& encoding);
   void check_conflict_save (const QString& fileName, bool remove_on_success);
 
   void handle_insert_debugger_pointer_request (const QString& file, int line);
   void handle_delete_debugger_pointer_request (const QString& file, int line);
   void handle_update_breakpoint_marker_request (bool insert,
                                                 const QString& file, int line,
                                                 const QString& cond);
+  void handle_edit_mfile_request (const QString& name, const QString& file,
+                                  const QString& curr_dir, int line);
 
   void handle_edit_file_request (const QString& file);
 
   // Tells the editor to react on changed settings.
   void notice_settings (const QSettings *settings);
 
   void set_shortcuts ();
 
@@ -301,16 +305,17 @@ private slots:
   void request_open_files (const QStringList&);
   void request_open_file (const QString& fileName,
                           const QString& encoding = QString (),
                           int line = -1, bool debug_pointer = false,
                           bool breakpoint_marker = false, bool insert = true,
                           const QString& cond = "");
   void request_preferences (bool);
   void request_styles_preferences (bool);
+  void restore_create_file_setting ();
 
   void handle_combo_enc_current_index (QString new_encoding);
 
   void show_line_numbers (bool);
   void show_white_space (bool);
   void show_eol_chars (bool);
   void show_indent_guides (bool);
   void show_long_line (bool);
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -22,17 +22,16 @@ along with Octave; see the file COPYING.
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
 #include <QKeySequence>
 #include <QApplication>
-#include <QInputDialog>
 #include <QLabel>
 #include <QMenuBar>
 #include <QMenu>
 #include <QAction>
 #include <QSettings>
 #include <QStyle>
 #include <QToolBar>
 #include <QDesktopServices>
@@ -60,18 +59,28 @@ along with Octave; see the file COPYING.
 #include "url-transfer.h"
 
 #include "builtin-defun-decls.h"
 #include "defaults.h"
 #include "octave.h"
 #include "symtab.h"
 #include "version.h"
 #include "utils.h"
-#include <oct-map.h>
-
+
+static file_editor_interface *
+create_default_editor (QWidget *p)
+{
+#if defined (HAVE_QSCINTILLA)
+  return new file_editor (p);
+#else
+  octave_unused_parameter (p);
+
+  return 0;
+#endif
+}
 
 octave_interpreter::octave_interpreter (octave::application *app_context)
   : QObject (), thread_manager (), m_app_context (app_context)
 { }
 
 void
 octave_interpreter::execute (void)
 {
@@ -141,25 +150,17 @@ main_window::main_window (QWidget *p, oc
   if (_start_gui)
     {
       _workspace_model = new workspace_model ();
       status_bar = new QStatusBar ();
       command_window = new terminal_dock_widget (this);
       history_window = new history_dock_widget (this);
       file_browser_window = new files_dock_widget (this);
       doc_browser_window = new documentation_dock_widget (this);
-#if defined (HAVE_QSCINTILLA)
-      editor_window = new file_editor (this);
-      _external_editor = 0;
-      _active_editor = editor_window;  // for connecting signals
-#else
-      editor_window = 0;
-      _external_editor = new external_editor_interface (p);
-      _active_editor = _external_editor;  // for connecting signals
-#endif
+      editor_window = create_default_editor (this);
       workspace_window = new workspace_view (this);
     }
 
   QSettings *settings = resource_manager::get_settings ();
 
   bool connect_to_web = true;
   QDateTime last_checked;
   int serial = 0;
@@ -195,17 +196,16 @@ main_window::main_window (QWidget *p, oc
 }
 
 main_window::~main_window (void)
 {
   // Destroy the terminal first so that STDERR stream is redirected back
   // to its original pipe to capture error messages at exit.
 
   delete editor_window;     // first one for dialogs of modified editor-tabs
-  delete _external_editor;
   delete command_window;
   delete workspace_window;
   delete doc_browser_window;
   delete file_browser_window;
   delete history_window;
   delete status_bar;
   delete _workspace_model;
   delete m_interpreter;
@@ -307,17 +307,17 @@ void
 main_window::open_file (const QString& file_name)
 {
   emit open_file_signal (file_name);
 }
 void
 
 main_window::edit_mfile (const QString& name, int line)
 {
-  handle_edit_mfile_request (name, QString (), QString (), line);
+  emit edit_mfile_request (name, QString (), QString (), line);
 }
 
 void
 main_window::report_status_message (const QString& statusMessage)
 {
   status_bar->showMessage (statusMessage, 1000);
 }
 
@@ -1385,164 +1385,17 @@ main_window::handle_create_filedialog (c
 {
   FileDialog *file_dialog = new FileDialog (filters, title, filename,
                                             dirname, multimode);
 
   file_dialog->setAttribute (Qt::WA_DeleteOnClose);
   file_dialog->show ();
 }
 
-
-//
-// Functions related to file editing
-//
-// These are moved from editor to here for also using them when octave
-// is built without qscintilla
-//
-void
-main_window::handle_edit_mfile_request (const QString& fname,
-                                        const QString& ffile,
-                                        const QString& curr_dir, int line)
-{
-  // Is it a regular function within the search path? (Call __which__)
-  octave_value_list fct = F__which__ (ovl (fname.toStdString ()),0);
-  octave_map map = fct(0).map_value ();
-
-  QString type = QString::fromStdString (
-                         map.contents ("type").data ()[0].string_value ());
-  QString name = QString::fromStdString (
-                         map.contents ("name").data ()[0].string_value ());
-
-  QString message = QString ();
-  QString filename = QString ();
-
-  if (type == QString ("built-in function"))
-    {
-      // built in function: can't edit
-      message = tr ("%1 is a built-in function");
-    }
-  else if (type.isEmpty ())
-    {
-      // function not known to octave -> try directory of edited file
-      // get directory
-      QDir dir;
-      if (ffile.isEmpty ())
-        {
-          if (curr_dir.isEmpty ())
-            dir = QDir (_current_directory_combo_box->itemText (0));
-          else
-            dir = QDir (curr_dir);
-        }
-      else
-        dir = QDir (QFileInfo (ffile).canonicalPath ());
-
-      // function not known to octave -> try directory of edited file
-      QFileInfo file = QFileInfo (dir, fname + ".m");
-
-      if (file.exists ())
-        {
-          filename = file.canonicalFilePath (); // local file exists
-        }
-      else
-        {
-          // local file does not exist -> try private directory
-          file = QFileInfo (ffile);
-          file = QFileInfo (QDir (file.canonicalPath () + "/private"),
-                            fname + ".m");
-
-          if (file.exists ())
-            {
-              filename = file.canonicalFilePath ();  // private function exists
-            }
-          else
-            {
-              message = tr ("Can not find function %1");  // no file found
-            }
-        }
-    }
-
-  if (! message.isEmpty ())
-    {
-      QMessageBox *msgBox
-        = new QMessageBox (QMessageBox::Critical,
-                           tr ("Octave Editor"),
-                           message.arg (name),
-                           QMessageBox::Ok, this);
-
-      msgBox->setWindowModality (Qt::NonModal);
-      msgBox->setAttribute (Qt::WA_DeleteOnClose);
-      msgBox->show ();
-      return;
-    }
-
-  if (filename.isEmpty ())
-    filename = QString::fromStdString (
-                           map.contents ("file").data ()[0].string_value ());
-
-  if (! filename.endsWith (".m"))
-    filename.append (".m");
-
-  emit open_file_signal (filename, QString (), line);  // default encoding
-}
-
-// Create a new script
-void
-main_window::request_new_script (const QString& commands)
-{
-  emit new_file_signal (commands);
-}
-
-// Create a new function and open it
-void
-main_window::request_new_function (bool)
-{
-  bool ok;
-  // Get the name of the new function: Parent of the input dialog is the
-  // editor window or the main window. The latter is chosen, if a custom
-  // editor is used or qscintilla is not available
-  QWidget *p = editor_window;
-  QSettings *settings = resource_manager::get_settings ();
-  if (! p || settings->value ("useCustomFileEditor",false).toBool ())
-    p = this;
-  QString new_name = QInputDialog::getText (p, tr ("New Function"),
-                     tr ("New function name:\n"), QLineEdit::Normal, "", &ok);
-
-  if (ok && new_name.length () > 0)
-    {
-      // append suffix if it not already exists
-      if (new_name.rightRef (2) != ".m")
-        new_name.append (".m");
-      // check whether new files are created without prompt
-      QSettings *settings = resource_manager::get_settings ();
-      if (! settings->value ("editor/create_new_file",false).toBool ())
-        {
-          // no, so enable this settings and wait for end of new file loading
-          settings->setValue ("editor/create_new_file",true);
-          connect (this, SIGNAL (file_loaded_signal ()),
-                   this, SLOT (restore_create_file_setting ()));
-        }
-      // start the edit command
-      execute_command_in_terminal ("edit " + new_name);
-    }
-}
-
-void
-main_window::restore_create_file_setting ()
-{
-  // restore the new files creation setting
-  QSettings *settings = resource_manager::get_settings ();
-  settings->setValue ("editor/create_new_file",false);
-  disconnect (this, SIGNAL (file_loaded_signal ()),
-              this, SLOT (restore_create_file_setting ()));
-}
-
-
-//
 // Main subroutine of the constructor
-//
 void
 main_window::construct (void)
 {
   _closing = false;   // flag for editor files when closed
 
   // Create and set the central widget.  QMainWindow takes ownership of
   // the widget (pointer) so there is no need to delete the object upon
   // destroying this main_window.
@@ -1788,20 +1641,22 @@ main_window::construct_octave_qt_link (v
 
       connect (_octave_qt_link, SIGNAL (exit_debugger_signal ()),
                this, SLOT (handle_exit_debugger ()));
 
       connect (_octave_qt_link,
                SIGNAL (show_preferences_signal (void)),
                this, SLOT (process_settings_dialog_request ()));
 
+#if defined (HAVE_QSCINTILLA)
       connect (_octave_qt_link,
                SIGNAL (edit_file_signal (const QString&)),
-               _active_editor,
+               editor_window,
                SLOT (handle_edit_file_request (const QString&)));
+#endif
 
       connect (_octave_qt_link,
                SIGNAL (insert_debugger_pointer_signal (const QString&, int)),
                this,
                SLOT (handle_insert_debugger_pointer_request (const QString&,
                                                              int)));
 
       connect (_octave_qt_link,
@@ -1934,18 +1789,20 @@ main_window::construct_file_menu (QMenuB
   _save_workspace_action
     = file_menu->addAction (tr ("Save Workspace As..."));
 
   file_menu->addSeparator ();
 
   _exit_action = file_menu->addAction (tr ("Exit"));
   _exit_action->setShortcutContext (Qt::ApplicationShortcut);
 
+#if defined (HAVE_QSCINTILLA)
   connect (_open_action, SIGNAL (triggered ()),
-           _active_editor, SLOT (request_open_file ()));
+           editor_window, SLOT (request_open_file ()));
+#endif
 
   connect (_load_workspace_action, SIGNAL (triggered ()),
            this, SLOT (handle_load_workspace_request ()));
 
   connect (_save_workspace_action, SIGNAL (triggered ()),
            this, SLOT (handle_save_workspace_request ()));
 
   connect (_exit_action, SIGNAL (triggered ()),
@@ -1964,28 +1821,23 @@ main_window::construct_new_menu (QMenu *
 
   _new_function_action = new_menu->addAction (tr ("New Function..."));
   _new_function_action->setEnabled (true);
   _new_function_action->setShortcutContext (Qt::ApplicationShortcut);
 
   _new_figure_action = new_menu->addAction (tr ("New Figure"));
   _new_figure_action->setEnabled (true);
 
+#if defined (HAVE_QSCINTILLA)
   connect (_new_script_action, SIGNAL (triggered ()),
-           this, SLOT (request_new_script ()));
+           editor_window, SLOT (request_new_script ()));
+
   connect (_new_function_action, SIGNAL (triggered ()),
-           this, SLOT (request_new_function ()));
-  connect (this, SIGNAL (new_file_signal (const QString&)),
-           _active_editor, SLOT (request_new_file (const QString&)));
-  connect (this, SIGNAL (open_file_signal (const QString&)),
-           _active_editor, SLOT (request_open_file (const QString&)));
-  connect (this,
-           SIGNAL (open_file_signal (const QString&, const QString&, int)),
-           _active_editor,
-           SLOT (request_open_file (const QString&, const QString&, int)));
+           editor_window, SLOT (request_new_function ()));
+#endif
 
   connect (_new_figure_action, SIGNAL (triggered ()),
            this, SLOT (handle_new_figure_request ()));
 }
 
 void
 main_window::construct_edit_menu (QMenuBar *p)
 {
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -35,17 +35,16 @@ along with Octave; see the file COPYING.
 #include <QMdiSubWindow>
 #include <QCloseEvent>
 #include <QToolButton>
 #include <QComboBox>
 #include <QPointer>
 
 // Editor includes
 #include "file-editor-interface.h"
-#include "external-editor-interface.h"
 
 // QTerminal includes
 #include "QTerminal.h"
 
 // Own includes
 #include "dialog.h"
 #include "documentation-dock-widget.h"
 #include "files-dock-widget.h"
@@ -120,17 +119,17 @@ signals:
 
   void active_dock_changed (octave_dock_widget *, octave_dock_widget *);
   void editor_focus_changed (bool);
 
   void settings_changed (const QSettings *);
   void init_terminal_size_signal (void);
   void new_file_signal (const QString&);
   void open_file_signal (const QString&);
-  void open_file_signal (const QString& file, const QString& enc, int line);
+  void edit_mfile_request (const QString&, const QString&, const QString&, int);
 
   void show_doc_signal (const QString&);
 
   void insert_debugger_pointer_signal (const QString& file, int line);
   void delete_debugger_pointer_signal (const QString& file, int line);
   void update_breakpoint_marker_signal (bool insert, const QString& file,
                                         int line, const QString& cond);
 
@@ -191,21 +190,16 @@ public slots:
   void handle_enter_debugger (void);
   void handle_exit_debugger (void);
   void debug_continue (void);
   void debug_step_into (void);
   void debug_step_over (void);
   void debug_step_out (void);
   void debug_quit (void);
 
-  void request_new_script (const QString& commands = QString ());
-  void request_new_function (bool triggered = true);
-  void handle_edit_mfile_request (const QString& name, const QString& file,
-                                  const QString& curr_dir, int line);
-
   void handle_insert_debugger_pointer_request (const QString& file, int line);
   void handle_delete_debugger_pointer_request (const QString& file, int line);
   void handle_update_breakpoint_marker_request (bool insert,
                                                 const QString& file, int line,
                                                 const QString& cond);
 
   void read_settings (void);
   void init_terminal_size (void);
@@ -262,17 +256,16 @@ public slots:
 
   // get the dockwidgets
   QList<octave_dock_widget *> get_dock_widget_list ()
   { return dock_widget_list (); }
 
 private slots:
 
   void disable_menu_shortcuts (bool disable);
-  void restore_create_file_setting ();
 
 protected:
   void closeEvent (QCloseEvent * closeEvent);
 
 private:
 
   void construct (void);
 
@@ -347,19 +340,16 @@ private:
   // Subwindows.
   terminal_dock_widget *command_window;
   history_dock_widget *history_window;
   files_dock_widget *file_browser_window;
   documentation_dock_widget *doc_browser_window;
   file_editor_interface *editor_window;
   workspace_view *workspace_window;
 
-  external_editor_interface *_external_editor;
-  QWidget *_active_editor;
-
   QList<octave_dock_widget *> dock_widget_list ();
 
   octave_dock_widget *_active_dock;
 
   QString _release_notes_icon;
 
   QToolBar *_main_tool_bar;
 
diff --git a/libgui/src/module.mk b/libgui/src/module.mk
--- a/libgui/src/module.mk
+++ b/libgui/src/module.mk
@@ -93,17 +93,16 @@ octave_gui_MOC += \
   $(OCTAVE_GUI_SRC_M_EDITOR_MOC)
 
 DIRSTAMP_FILES += \
   libgui/src/m-editor/$(octave_dirstamp)
 
 endif
 
 OCTAVE_GUI_SRC_MOC = \
-  libgui/src/m-editor/moc-external-editor-interface.cc \
   libgui/src/moc-dialog.cc \
   libgui/src/moc-documentation-dock-widget.cc \
   libgui/src/moc-files-dock-widget.cc \
   libgui/src/moc-history-dock-widget.cc \
   libgui/src/moc-main-window.cc \
   libgui/src/moc-octave-cmd.cc \
   libgui/src/moc-octave-qt-link.cc \
   libgui/src/moc-settings-dialog.cc \
@@ -142,17 +141,16 @@ BUILT_SOURCES += $(octave_gui_UI_H)
 
 noinst_HEADERS += \
   libgui/src/dialog.h \
   libgui/src/octave-dock-widget.h \
   libgui/src/documentation-dock-widget.h \
   libgui/src/files-dock-widget.h \
   libgui/src/history-dock-widget.h \
   libgui/src/liboctgui-build-info.h \
-  libgui/src/m-editor/external-editor-interface.h \
   libgui/src/m-editor/file-editor-interface.h \
   libgui/src/m-editor/file-editor-tab.h \
   libgui/src/m-editor/file-editor.h \
   libgui/src/m-editor/find-dialog.h \
   libgui/src/m-editor/octave-qscintilla.h \
   libgui/src/m-editor/octave-txt-lexer.h \
   libgui/src/m-editor/marker.h \
   libgui/src/main-window.h \
@@ -173,17 +171,16 @@ noinst_HEADERS += \
   libgui/src/workspace-model.h \
   libgui/src/workspace-view.h
 
 libgui_src_libgui_src_la_SOURCES = \
   libgui/src/dialog.cc \
   libgui/src/documentation-dock-widget.cc \
   libgui/src/files-dock-widget.cc \
   libgui/src/history-dock-widget.cc \
-  libgui/src/m-editor/external-editor-interface.cc \
   libgui/src/m-editor/file-editor-tab.cc \
   libgui/src/m-editor/file-editor.cc \
   libgui/src/m-editor/find-dialog.cc \
   libgui/src/m-editor/octave-qscintilla.cc \
   libgui/src/m-editor/octave-txt-lexer.cc \
   libgui/src/m-editor/marker.cc \
   libgui/src/main-window.cc \
   libgui/src/octave-cmd.cc \
