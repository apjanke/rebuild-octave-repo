# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1256286959 -7200
#      Fri Oct 23 10:35:59 2009 +0200
# Node ID 95ad9c2a27e2e168b6b1853aefd1b259ed8199d3
# Parent  b134960cea239f27fe01e4fd76a1aca085e1c2fc
fix idx_vector construction checks

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,14 @@
+2009-10-23  Jaroslav Hajek  <highegg@gmail.com>
+
+	* idx-vector.cc (idx_vector::idx_range_rep::idx_range_rep
+	(octave_idx_type, octave_idx_type, octave_idx_type)):
+	Improve checking.
+
 2009-10-21  John W. Eaton  <jwe@octave.org>
 
 	* oct-time.h 	(octave_time::octave_time (time_t t, int us)):
 	New constructor.
 	(operator + (const octave_time&, const octave_time&)): New function.
 
 	* file-stat.h (base_file_stat::time_resolution): New function.
 
diff --git a/liboctave/idx-vector.cc b/liboctave/idx-vector.cc
--- a/liboctave/idx-vector.cc
+++ b/liboctave/idx-vector.cc
@@ -90,24 +90,24 @@ idx_vector::idx_colon_rep::print (std::o
 {
   return os << ":";
 }
 
 DEFINE_OCTAVE_ALLOCATOR(idx_vector::idx_range_rep);
 
 idx_vector::idx_range_rep::idx_range_rep (octave_idx_type _start, octave_idx_type _limit,
                                           octave_idx_type _step)
- : start(_start), len (_step ? (_limit - _start) / _step : -1), step (_step)
+ : start(_start), len (_step ? std::max((_limit - _start) / _step, 0) : -1), step (_step)
 {
   if (len < 0)
     {
       gripe_invalid_range ();
       err = true;
     }
-  else if (start < 0)
+  else if (start < 0 || (step < 0 && start + (len-1)*step < 0))
     {
       gripe_invalid_index ();
       err = true;
     }
 }
 
 idx_vector::idx_range_rep::idx_range_rep (const Range& r)
   : start (0), len (r.nelem ()), step (1)
@@ -552,16 +552,18 @@ idx_vector::increment (void) const
     case class_range:
       retval = dynamic_cast<idx_range_rep *> (rep) -> get_step ();
       break;
     case class_vector:
       {
         if (length (0) > 1)
           retval = elem (1) - elem (0);
       }
+    default:
+      break;
     }
   return retval;
 }
 
 void
 idx_vector::copy_data (octave_idx_type *data) const
 {
   octave_idx_type len = rep->length (0);
