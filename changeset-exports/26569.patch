# HG changeset patch
# User Markus MÃ¼tzel <markus.muetzel@gmx.de>
# Date 1547749555 -3600
#      Thu Jan 17 19:25:55 2019 +0100
# Branch stable
# Node ID 0e77df67b52206d9031ccedb000e69a27f0a1c8b
# Parent  bf05a7c16e9e014ecf36878fe1c7019e60eae531
Add static compile-time checking of printf functions in liboctave.

* util/lo-error.h: Use macro OCTAVE_FORMAT_PRINTF for printf functions.

* array/Array.h: Use format specifier "z" for type size_t.

* array/Array-util.cc, numeric/oct-norm.cc: Supply a format string of "%s" when
  printing a single string.

* array/idx-vector.cc, array/MatrixType.cc, array/Sparse.cc, numeric/DASPK.cc,
  numeric/DASRT.cc, numeric/DASSL.cc, numeric/LSODE.cc,
  util/lo-array-errwarn.cc, util/sparse-util.cc: Use preprocessor macro
  OCTAVE_IDX_TYPE_FORMAT as the format identifier for octave_idx_type.

* util/f77-fcn.c: Cast width argument to int.

* util/lo-utils.cc: Pass missing argument c0.

diff --git a/liboctave/array/Array-util.cc b/liboctave/array/Array-util.cc
--- a/liboctave/array/Array-util.cc
+++ b/liboctave/array/Array-util.cc
@@ -560,17 +560,17 @@ sub2ind (const dim_vector& dv, const Arr
             octave::err_index_out_of_range (len, i+1, idx.extent (n), n);
         }
       catch (octave::index_exception& e)
         {
           e.set_pos_if_unset (len, i+1);
           e.set_var ();
           std::string msg = e.message ();
           (*current_liboctave_error_with_id_handler)
-            (e.err_id (), msg.c_str ());
+            (e.err_id (), "%s", msg.c_str ());
         }
     }
   // idxa known to be valid.
   // Shouldn't need to catch index_exception below here.
 
   if (len == 1)
     retval = idxa(0);
   else if (clen == 1)
diff --git a/liboctave/array/Array.h b/liboctave/array/Array.h
--- a/liboctave/array/Array.h
+++ b/liboctave/array/Array.h
@@ -867,17 +867,17 @@ Array<T>::Array (const Container<T>& a, 
   : dimensions (dv), rep (new typename Array<T>::ArrayRep (dv.safe_numel ())),
     slice_data (rep->data), slice_len (rep->len)
 {
   if (dimensions.safe_numel () != octave_idx_type (a.size ()))
     {
       std::string new_dims_str = dimensions.str ();
 
       (*current_liboctave_error_handler)
-        ("reshape: can't reshape %i elements into %s array",
+        ("reshape: can't reshape %zi elements into %s array",
          a.size (), new_dims_str.c_str ());
     }
 
   octave_idx_type i = 0;
   for (const T& x : a)
     slice_data[i++] = x;
 
   dimensions.chop_trailing_singletons ();
diff --git a/liboctave/array/MatrixType.cc b/liboctave/array/MatrixType.cc
--- a/liboctave/array/MatrixType.cc
+++ b/liboctave/array/MatrixType.cc
@@ -21,16 +21,17 @@ along with Octave; see the file COPYING.
 <https://www.gnu.org/licenses/>.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
+#include <cinttypes>
 #include <vector>
 
 #include "MatrixType.h"
 #include "dMatrix.h"
 #include "fMatrix.h"
 #include "CMatrix.h"
 #include "fCMatrix.h"
 #include "dSparse.h"
@@ -860,22 +861,24 @@ MatrixType::info () const
         (*current_liboctave_warning_with_id_handler)
           ("Octave:matrix-type-info", "permuted upper triangular matrix");
       else if (typ == MatrixType::Permuted_Lower)
         (*current_liboctave_warning_with_id_handler)
           ("Octave:matrix-type-info", "permuted lower triangular Matrix");
       else if (typ == MatrixType::Banded)
         (*current_liboctave_warning_with_id_handler)
           ("Octave:matrix-type-info",
-           "banded sparse matrix %d-1-%d (density %f)",
+           "banded sparse matrix %" OCTAVE_IDX_TYPE_FORMAT "-1-"
+           "%" OCTAVE_IDX_TYPE_FORMAT " (density %f)",
            lower_band, upper_band, bandden);
       else if (typ == MatrixType::Banded_Hermitian)
         (*current_liboctave_warning_with_id_handler)
           ("Octave:matrix-type-info",
-           "banded hermitian/symmetric sparse matrix %d-1-%d (density %f)",
+           "banded hermitian/symmetric sparse matrix %" OCTAVE_IDX_TYPE_FORMAT
+           "-1-%" OCTAVE_IDX_TYPE_FORMAT " (density %f)",
            lower_band, upper_band, bandden);
       else if (typ == MatrixType::Hermitian)
         (*current_liboctave_warning_with_id_handler)
           ("Octave:matrix-type-info", "hermitian/symmetric matrix");
       else if (typ == MatrixType::Tridiagonal)
         (*current_liboctave_warning_with_id_handler)
           ("Octave:matrix-type-info", "tridiagonal sparse matrix");
       else if (typ == MatrixType::Tridiagonal_Hermitian)
diff --git a/liboctave/array/Sparse.cc b/liboctave/array/Sparse.cc
--- a/liboctave/array/Sparse.cc
+++ b/liboctave/array/Sparse.cc
@@ -22,16 +22,17 @@ along with Octave; see the file COPYING.
 
 */
 
 // This file should not include config.h.  It is only included in other
 // C++ source files that should have included config.h before including
 // this file.
 
 #include <cassert>
+#include <cinttypes>
 
 #include <algorithm>
 #include <istream>
 #include <ostream>
 #include <sstream>
 #include <vector>
 
 #include "Array.h"
@@ -289,24 +290,26 @@ Sparse<T>::Sparse (const Array<T>& a, co
                    const idx_vector& c, octave_idx_type nr,
                    octave_idx_type nc, bool sum_terms,
                    octave_idx_type nzm)
   : rep (nullptr), dimensions ()
 {
   if (nr < 0)
     nr = r.extent (0);
   else if (r.extent (nr) > nr)
-    (*current_liboctave_error_handler) ("sparse: row index %d out of bound %d",
-                                        r.extent (nr), nr);
+    (*current_liboctave_error_handler)
+      ("sparse: row index %" OCTAVE_IDX_TYPE_FORMAT "out of bound "
+       "%" OCTAVE_IDX_TYPE_FORMAT, r.extent (nr), nr);
 
   if (nc < 0)
     nc = c.extent (0);
   else if (c.extent (nc) > nc)
     (*current_liboctave_error_handler)
-      ("sparse: column index %d out of bound %d", r.extent (nc), nc);
+      ("sparse: column index %" OCTAVE_IDX_TYPE_FORMAT " out of bound "
+       "%" OCTAVE_IDX_TYPE_FORMAT, r.extent (nc), nc);
 
   dimensions = dim_vector (nr, nc);
 
   octave_idx_type n = a.numel ();
   octave_idx_type rl = r.length (nr);
   octave_idx_type cl = c.length (nc);
   bool a_scalar = n == 1;
   if (a_scalar)
@@ -730,39 +733,45 @@ Sparse<T>::compute_index (const Array<oc
 
   return retval;
 }
 
 template <typename T>
 T
 Sparse<T>::range_error (const char *fcn, octave_idx_type n) const
 {
-  (*current_liboctave_error_handler) ("%s (%d): range error", fcn, n);
+  (*current_liboctave_error_handler) ("%s (%" OCTAVE_IDX_TYPE_FORMAT "): "
+                                      "range error", fcn, n);
 }
 
 template <typename T>
 T&
 Sparse<T>::range_error (const char *fcn, octave_idx_type n)
 {
-  (*current_liboctave_error_handler) ("%s (%d): range error", fcn, n);
+  (*current_liboctave_error_handler) ("%s (%" OCTAVE_IDX_TYPE_FORMAT "): "
+                                      "range error", fcn, n);
 }
 
 template <typename T>
 T
 Sparse<T>::range_error (const char *fcn, octave_idx_type i,
                         octave_idx_type j) const
 {
-  (*current_liboctave_error_handler) ("%s (%d, %d): range error", fcn, i, j);
+  (*current_liboctave_error_handler)
+    ("%s (%" OCTAVE_IDX_TYPE_FORMAT ", %" OCTAVE_IDX_TYPE_FORMAT "): "
+     "range error", fcn, i, j);
 }
 
 template <typename T>
 T&
 Sparse<T>::range_error (const char *fcn, octave_idx_type i, octave_idx_type j)
 {
-  (*current_liboctave_error_handler) ("%s (%d, %d): range error", fcn, i, j);
+  (*current_liboctave_error_handler)
+    ("%s (%" OCTAVE_IDX_TYPE_FORMAT ", %" OCTAVE_IDX_TYPE_FORMAT "): "
+     "range error", fcn, i, j);
 }
 
 template <typename T>
 T
 Sparse<T>::range_error (const char *fcn,
                         const Array<octave_idx_type>& ra_idx) const
 {
   std::ostringstream buf;
@@ -776,17 +785,17 @@ Sparse<T>::range_error (const char *fcn,
 
   for (octave_idx_type i = 1; i < n; i++)
     buf << ", " << ra_idx(i);
 
   buf << "): range error";
 
   std::string buf_str = buf.str ();
 
-  (*current_liboctave_error_handler) (buf_str.c_str ());
+  (*current_liboctave_error_handler) ("%s", buf_str.c_str ());
 }
 
 template <typename T>
 T&
 Sparse<T>::range_error (const char *fcn, const Array<octave_idx_type>& ra_idx)
 {
   std::ostringstream buf;
 
@@ -799,17 +808,17 @@ Sparse<T>::range_error (const char *fcn,
 
   for (octave_idx_type i = 1; i < n; i++)
     buf << ", " << ra_idx(i);
 
   buf << "): range error";
 
   std::string buf_str = buf.str ();
 
-  (*current_liboctave_error_handler) (buf_str.c_str ());
+  (*current_liboctave_error_handler) ("%s", buf_str.c_str ());
 }
 
 template <typename T>
 Sparse<T>
 Sparse<T>::reshape (const dim_vector& new_dims) const
 {
   Sparse<T> retval;
   dim_vector dims2 = new_dims;
@@ -2723,63 +2732,64 @@ read_sparse_matrix (std::istream& is, Sp
           jtmp--;
 
           if (is.fail ())
             {
               is.clear();
               std::string err_field;
               is >> err_field;
               (*current_liboctave_error_handler)
-                ("invalid sparse matrix: element %d: "
+                ("invalid sparse matrix: element %" OCTAVE_IDX_TYPE_FORMAT ": "
                  "Symbols '%s' is not an integer format",
                  i+1, err_field.c_str ());
             }
 
           if (itmp < 0 || itmp >= nr)
             {
               is.setstate (std::ios::failbit);
 
               (*current_liboctave_error_handler)
-                ("invalid sparse matrix: element %d: "
-                 "row index = %d out of range",
+                ("invalid sparse matrix: element %" OCTAVE_IDX_TYPE_FORMAT ": "
+                 "row index = %" OCTAVE_IDX_TYPE_FORMAT " out of range",
                  i+1, itmp + 1);
             }
 
           if (jtmp < 0 || jtmp >= nc)
             {
               is.setstate (std::ios::failbit);
 
               (*current_liboctave_error_handler)
-                ("invalid sparse matrix: element %d: "
-                 "column index = %d out of range",
+                ("invalid sparse matrix: element %" OCTAVE_IDX_TYPE_FORMAT ": "
+                 "column index = %" OCTAVE_IDX_TYPE_FORMAT " out of range",
                  i+1, jtmp + 1);
             }
 
           if (jtmp < jold)
             {
               is.setstate (std::ios::failbit);
 
               (*current_liboctave_error_handler)
-                ("invalid sparse matrix: element %d:"
-                 "column indices must appear in ascending order (%d < %d)",
+                ("invalid sparse matrix: element %" OCTAVE_IDX_TYPE_FORMAT ":"
+                 "column indices must appear in ascending order "
+                 "(%" OCTAVE_IDX_TYPE_FORMAT " < %" OCTAVE_IDX_TYPE_FORMAT ")",
                  i+1, jtmp, jold);
             }
           else if (jtmp > jold)
             {
               for (octave_idx_type j = jold; j < jtmp; j++)
                 a.cidx (j+1) = ii;
             }
           else if (itmp < iold)
             {
               is.setstate (std::ios::failbit);
 
               (*current_liboctave_error_handler)
-                ("invalid sparse matrix: element %d: "
+                ("invalid sparse matrix: element %" OCTAVE_IDX_TYPE_FORMAT ": "
                  "row indices must appear in ascending order in each column "
-                 "(%d < %d)",
+                 "(%" OCTAVE_IDX_TYPE_FORMAT " < %" OCTAVE_IDX_TYPE_FORMAT ")",
                  i+1, iold, itmp);
             }
 
           iold = itmp;
           jold = jtmp;
 
           tmp = read_fcn (is);
 
diff --git a/liboctave/array/idx-vector.cc b/liboctave/array/idx-vector.cc
--- a/liboctave/array/idx-vector.cc
+++ b/liboctave/array/idx-vector.cc
@@ -21,16 +21,17 @@ along with Octave; see the file COPYING.
 <https://www.gnu.org/licenses/>.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
+#include <cinttypes>
 #include <cstdlib>
 
 #include <ostream>
 
 #include "idx-vector.h"
 #include "Array.h"
 #include "Array-util.h"
 #include "Sparse.h"
@@ -1280,17 +1281,17 @@ idx_vector::isvector (void) const
 }
 
 octave_idx_type
 idx_vector::freeze (octave_idx_type z_len, const char *, bool resize_ok)
 {
   if (! resize_ok && extent (z_len) > z_len)
     {
       (*current_liboctave_error_handler)
-        ("invalid matrix index = %d", extent (z_len));
+        ("invalid matrix index = %" OCTAVE_IDX_TYPE_FORMAT, extent (z_len));
       // FIXME: Should we call this before calling error_handler?
       rep->err = true;
       chkerr ();
     }
 
   return length (z_len);
 }
 
diff --git a/liboctave/numeric/DASPK.cc b/liboctave/numeric/DASPK.cc
--- a/liboctave/numeric/DASPK.cc
+++ b/liboctave/numeric/DASPK.cc
@@ -19,16 +19,17 @@ along with Octave; see the file COPYING.
 <https://www.gnu.org/licenses/>.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
+#include <cinttypes>
 #include <sstream>
 
 #include "DASPK.h"
 #include "dMatrix.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
 #include "quit.h"
 
@@ -354,17 +355,18 @@ DASPK::do_integrate (double tout)
                 {
                   F77_INT lid;
                   if (eiq == 0 || eiq == 2)
                     lid = 40;
                   else if (eiq == 1 || eiq == 3)
                     lid = 40 + n;
                   else
                     (*current_liboctave_error_handler)
-                      ("daspk: invalid value for eiq: %d", eiq);
+                      ("daspk: invalid value for eiq: "
+                       "%" OCTAVE_IDX_TYPE_FORMAT, eiq);
 
                   for (F77_INT i = 0; i < n; i++)
                     iwork(lid+i) = (av(i) ? -1 : 1);
                 }
               else
                 {
                   // FIXME: Should this be a warning?
                   (*current_liboctave_error_handler)
@@ -399,17 +401,18 @@ DASPK::do_integrate (double tout)
             {
               F77_INT lid;
               if (eiq == 0 || eiq == 2)
                 lid = 40;
               else if (eiq == 1 || eiq == 3)
                 lid = 40 + n;
               else
                 (*current_liboctave_error_handler)
-                  ("daspk: invalid value for eiq: %d", eiq);
+                  ("daspk: invalid value for eiq: %" OCTAVE_IDX_TYPE_FORMAT,
+                   eiq);
 
               for (F77_INT i = 0; i < n; i++)
                 iwork(lid+i) = (av(i) ? -1 : 1);
             }
         }
 
       if (use_initial_condition_heuristics ())
         {
@@ -528,17 +531,18 @@ DASPK::do_integrate (double tout)
               // and control is returned to the calling program.  For
               // example, this occurs when invalid input is detected.
       integration_error = true;
       break;
 
     default:
       integration_error = true;
       (*current_liboctave_error_handler)
-        ("unrecognized value of istate (= %d) returned from ddaspk", istate);
+        ("unrecognized value of istate (= %" OCTAVE_IDX_TYPE_FORMAT ") "
+         "returned from ddaspk", istate);
       break;
     }
 
   return retval;
 }
 
 Matrix
 DASPK::do_integrate (const ColumnVector& tout)
diff --git a/liboctave/numeric/DASRT.cc b/liboctave/numeric/DASRT.cc
--- a/liboctave/numeric/DASRT.cc
+++ b/liboctave/numeric/DASRT.cc
@@ -19,16 +19,17 @@ along with Octave; see the file COPYING.
 <https://www.gnu.org/licenses/>.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
+#include <cinttypes>
 #include <sstream>
 
 #include "DASRT.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
 #include "quit.h"
 
 typedef F77_INT (*dasrt_fcn_ptr) (const double&, const double*, const double*,
@@ -369,18 +370,18 @@ DASRT::integrate (double tout)
               // and control is returned to the calling program.  For
               // example, this occurs when invalid input is detected.
       integration_error = true;
       break;
 
     default:
       integration_error = true;
       (*current_liboctave_error_handler)
-        ("unrecognized value of istate (= %d) returned from ddasrt",
-         istate);
+        ("unrecognized value of istate (= %" OCTAVE_IDX_TYPE_FORMAT ") "
+         "returned from ddasrt", istate);
       break;
     }
 }
 
 DASRT_result
 DASRT::integrate (const ColumnVector& tout)
 {
   DASRT_result retval;
diff --git a/liboctave/numeric/DASSL.cc b/liboctave/numeric/DASSL.cc
--- a/liboctave/numeric/DASSL.cc
+++ b/liboctave/numeric/DASSL.cc
@@ -19,16 +19,17 @@ along with Octave; see the file COPYING.
 <https://www.gnu.org/licenses/>.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
+#include <cinttypes>
 #include <sstream>
 
 #include "DASSL.h"
 #include "dMatrix.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
 #include "quit.h"
 
@@ -332,18 +333,18 @@ DASSL::do_integrate (double tout)
               // and control is returned to the calling program.  For
               // example, this occurs when invalid input is detected.
       integration_error = true;
       break;
 
     default:
       integration_error = true;
       (*current_liboctave_error_handler)
-        ("unrecognized value of istate (= %d) returned from ddassl",
-         istate);
+        ("unrecognized value of istate (= %" OCTAVE_IDX_TYPE_FORMAT ") "
+         "returned from ddassl", istate);
       break;
     }
 
   return retval;
 }
 
 Matrix
 DASSL::do_integrate (const ColumnVector& tout)
diff --git a/liboctave/numeric/LSODE.cc b/liboctave/numeric/LSODE.cc
--- a/liboctave/numeric/LSODE.cc
+++ b/liboctave/numeric/LSODE.cc
@@ -19,16 +19,17 @@ along with Octave; see the file COPYING.
 <https://www.gnu.org/licenses/>.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
+#include <cinttypes>
 #include <sstream>
 
 #include "LSODE.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
 #include "quit.h"
 
 typedef F77_INT (*lsode_fcn_ptr) (const F77_INT&, const double&, double*,
@@ -297,17 +298,18 @@ LSODE::do_integrate (double tout)
               // component i vanished, and atol or atol(i) = 0.)
     case -13: // return requested in user-supplied function.
       integration_error = true;
       break;
 
     default:
       integration_error = true;
       (*current_liboctave_error_handler)
-        ("unrecognized value of istate (= %d) returned from lsode", istate);
+        ("unrecognized value of istate (= %" OCTAVE_IDX_TYPE_FORMAT ") "
+         "returned from lsode", istate);
       break;
     }
 
   return retval;
 }
 
 std::string
 LSODE::error_message (void) const
diff --git a/liboctave/numeric/oct-norm.cc b/liboctave/numeric/oct-norm.cc
--- a/liboctave/numeric/oct-norm.cc
+++ b/liboctave/numeric/oct-norm.cc
@@ -496,17 +496,17 @@ R svd_matrix_norm (const MatrixT& m, R p
     res = xrownorms (m, 1).max ();
   else if (p > 1)
     {
       VectorT x;
       const R sqrteps = std::sqrt (std::numeric_limits<R>::epsilon ());
       res = higham (m, p, sqrteps, max_norm_iter, x);
     }
   else
-    (*current_liboctave_error_handler) (p_less1_gripe);
+    (*current_liboctave_error_handler) ("%s", p_less1_gripe);
 
   return res;
 }
 
 // SVD-free version for sparse matrices
 template <typename MatrixT, typename VectorT, typename R>
 R matrix_norm (const MatrixT& m, R p, VectorT)
 {
@@ -517,17 +517,17 @@ R matrix_norm (const MatrixT& m, R p, Ve
     res = xrownorms (m, 1).max ();
   else if (p > 1)
     {
       VectorT x;
       const R sqrteps = std::sqrt (std::numeric_limits<R>::epsilon ());
       res = higham (m, p, sqrteps, max_norm_iter, x);
     }
   else
-    (*current_liboctave_error_handler) (p_less1_gripe);
+    (*current_liboctave_error_handler) ("%s", p_less1_gripe);
 
   return res;
 }
 
 // and finally, here's what we've promised in the header file
 
 #define DEFINE_XNORM_FUNCS(PREFIX, RTYPE)                               \
   OCTAVE_API RTYPE xnorm (const PREFIX##ColumnVector& x, RTYPE p)       \
diff --git a/liboctave/util/f77-fcn.c b/liboctave/util/f77-fcn.c
--- a/liboctave/util/f77-fcn.c
+++ b/liboctave/util/f77-fcn.c
@@ -48,12 +48,12 @@ F77_FUNC (xstopx, XSTOPX) (F77_CONST_CHA
 
   /* Skip printing message if it is just a single blank character.  */
   if (! (s && slen > 0 && ! (slen == 1 && *s == ' ')))
     {
       s = "unknown error in fortran subroutine";
       slen = strlen (s);
     }
 
-  (*current_liboctave_error_handler) ("%.*s", slen, s);
+  (*current_liboctave_error_handler) ("%.*s", (int) slen, s);
 
   F77_NORETURN (0)
 }
diff --git a/liboctave/util/lo-array-errwarn.cc b/liboctave/util/lo-array-errwarn.cc
--- a/liboctave/util/lo-array-errwarn.cc
+++ b/liboctave/util/lo-array-errwarn.cc
@@ -19,16 +19,17 @@ along with Octave; see the file COPYING.
 <https://www.gnu.org/licenses/>.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
+#include <cinttypes>
 #include <cmath>
 
 #include <sstream>
 
 #include "lo-array-errwarn.h"
 #include "lo-error.h"
 
 // Text constants used to shorten code below.
@@ -61,29 +62,32 @@ namespace octave
 
   void
   err_nonconformant (const char *op,
                      octave_idx_type op1_len, octave_idx_type op2_len)
   {
     const char *err_id = error_id_nonconformant_args;
 
     (*current_liboctave_error_with_id_handler)
-      (err_id, "%s: nonconformant arguments (op1 len: %d, op2 len: %d)",
+      (err_id, "%s: nonconformant arguments (op1 len: %" OCTAVE_IDX_TYPE_FORMAT
+       ", op2 len: % " OCTAVE_IDX_TYPE_FORMAT ")",
        op, op1_len, op2_len);
   }
 
   void
   err_nonconformant (const char *op,
                      octave_idx_type op1_nr, octave_idx_type op1_nc,
                      octave_idx_type op2_nr, octave_idx_type op2_nc)
   {
     const char *err_id = error_id_nonconformant_args;
 
     (*current_liboctave_error_with_id_handler)
-      (err_id, "%s: nonconformant arguments (op1 is %dx%d, op2 is %dx%d)",
+      (err_id, "%s: nonconformant arguments "
+       "(op1 is %" OCTAVE_IDX_TYPE_FORMAT "x%" OCTAVE_IDX_TYPE_FORMAT ", "
+       "op2 is %" OCTAVE_IDX_TYPE_FORMAT"x%" OCTAVE_IDX_TYPE_FORMAT ")",
        op, op1_nr, op1_nc, op2_nr, op2_nc);
   }
 
   void
   err_nonconformant (const char *op,
                      const dim_vector& op1_dims, const dim_vector& op2_dims)
   {
     const char *err_id = error_id_nonconformant_args;
@@ -98,17 +102,18 @@ namespace octave
 
   void
   err_del_index_out_of_range (bool is1d, octave_idx_type idx,
                               octave_idx_type ext)
   {
     const char *err_id = error_id_index_out_of_bounds;
 
     (*current_liboctave_error_with_id_handler)
-      (err_id, "A(%s) = []: index out of bounds: value %d out of bound %d",
+      (err_id, "A(%s) = []: index out of bounds: value %" OCTAVE_IDX_TYPE_FORMAT
+       " out of bound %" OCTAVE_IDX_TYPE_FORMAT,
        is1d ? "I" : "..,I,..", idx, ext);
   }
 
   // Common procedures of base class index_exception, thrown whenever an
   // object is indexed incorrectly, such as by an index that is out of
   // range, negative, fractional, complex, or of a non-numeric type.
 
   std::string
diff --git a/liboctave/util/lo-error.h b/liboctave/util/lo-error.h
--- a/liboctave/util/lo-error.h
+++ b/liboctave/util/lo-error.h
@@ -48,24 +48,28 @@ typedef void (*liboctave_error_with_id_h
 
 typedef void (*liboctave_warning_handler) (const char *, ...);
 
 typedef void (*liboctave_warning_with_id_handler) (const char *, const char *,
                                                    ...);
 
 /* Would be nice to make these pointers private, but we want to share
    them among all the liboctave classes. */
+OCTAVE_FORMAT_PRINTF (1, 2)
 OCTAVE_NORETURN OCTAVE_API extern liboctave_error_handler
   current_liboctave_error_handler;
 
+OCTAVE_FORMAT_PRINTF (2, 3)
 OCTAVE_NORETURN OCTAVE_API extern liboctave_error_with_id_handler
   current_liboctave_error_with_id_handler;
 
+OCTAVE_FORMAT_PRINTF (1, 2)
 OCTAVE_API extern liboctave_warning_handler current_liboctave_warning_handler;
 
+OCTAVE_FORMAT_PRINTF (2, 3)
 OCTAVE_API extern liboctave_warning_with_id_handler
   current_liboctave_warning_with_id_handler;
 
 OCTAVE_API extern void
 set_liboctave_error_handler (OCTAVE_NORETURN liboctave_error_handler f);
 
 OCTAVE_API extern void
 set_liboctave_error_with_id_handler (OCTAVE_NORETURN liboctave_error_with_id_handler f);
diff --git a/liboctave/util/lo-utils.cc b/liboctave/util/lo-utils.cc
--- a/liboctave/util/lo-utils.cc
+++ b/liboctave/util/lo-utils.cc
@@ -228,17 +228,18 @@ read_inf_nan_na (std::istream& is, char 
               }
           }
         else
           is.setstate (std::ios::failbit);
       }
       break;
 
     default:
-      (*current_liboctave_error_handler) ("read_inf_nan_na: invalid character '%c'");
+      (*current_liboctave_error_handler)
+        ("read_inf_nan_na: invalid character '%c'", c0);
     }
 
   return val;
 }
 
 // Read a double value.  Discard any sign on NaN and NA.
 
 template <typename T>
diff --git a/liboctave/util/sparse-util.cc b/liboctave/util/sparse-util.cc
--- a/liboctave/util/sparse-util.cc
+++ b/liboctave/util/sparse-util.cc
@@ -20,16 +20,17 @@ along with Octave; see the file COPYING.
 <https://www.gnu.org/licenses/>.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
+#include <cinttypes>
 #include <cstdarg>
 #include <cstdio>
 
 #include "lo-error.h"
 #include "oct-sparse.h"
 #include "sparse-util.h"
 
 static inline void
@@ -96,31 +97,33 @@ sparse_indices_ok (octave_idx_type *r, o
       for (octave_idx_type j = 1; j < ncols+1; j++)
         {
           if (c[j] < c[j-1])
             (*current_liboctave_error_handler)
               ("invalid sparse matrix: cidx elements must appear in ascending order");
 
           if (c[j] > nnz)
             (*current_liboctave_error_handler)
-              ("invalid sparse matrix: cidx[%d] = %d "
-               "exceeds number of nonzero elements", j, c[j]+1);
+              ("invalid sparse matrix: cidx[%" OCTAVE_IDX_TYPE_FORMAT "] = "
+               "%" OCTAVE_IDX_TYPE_FORMAT "exceeds number of nonzero elements",
+               j, c[j]+1);
 
           if (c[j] != jold)
             {
               for (octave_idx_type i = jold+1; i < c[j]; i++)
                 {
                   if (r[i] < r[i-1])
                     (*current_liboctave_error_handler)
                       ("invalid sparse matrix: ridx elements must appear "
                        "in ascending order for each column");
 
                   if (r[i] >= nrows)
                     (*current_liboctave_error_handler)
-                      ("invalid sparse matrix: ridx[%d] = %d out of range",
+                      ("invalid sparse matrix: ridx[%" OCTAVE_IDX_TYPE_FORMAT
+                       "] = %" OCTAVE_IDX_TYPE_FORMAT " out of range",
                        i, r[i]+1);
                 }
 
               jold = c[j];
             }
         }
     }
 
