# HG changeset patch
# User jwe
# Date 847128667 0
#      Mon Nov 04 17:31:07 1996 +0000
# Node ID 760f56d484caf98c3d18374b20ed603320f5d4bd
# Parent  1573640a9994113264a26106815aa8e7d036d3b0
[project @ 1996-11-04 17:31:07 by jwe]

diff --git a/emacs/octave.el b/emacs/octave.el
--- a/emacs/octave.el
+++ b/emacs/octave.el
@@ -1,16 +1,16 @@
 ;; octave.el --- Octave mode for GNU Emacs
 
 ;;; Copyright (C) 1996 Free Software Foundation, Inc.
 
 ;; Author: Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>
 ;; Author: John Eaton <jwe@bevo.che.wisc.edu>
 ;; Maintainer: Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>
-;; Version: 0.8.4
+;; Version: 0.8.5
 ;; Keywords: languages
 
 ;; This file is not yet a part of GNU Emacs.  It is part of Octave.
 
 ;; Octave is free software; you can redistribute it and/or modify
 ;; it under the terms of the GNU General Public License as published by
 ;; the Free Software Foundation; either version 2, or (at your option)
 ;; any later version.
@@ -29,32 +29,33 @@
 
 ;; This package provides a major mode for editing Octave code.  It knows
 ;; about Octave syntax and comments.  It also provides a major mode for
 ;; interacting with an inferior Octave process using comint, both
 ;; directly and by sending parts of a file with Octave code.
 
 ;;; Code:
 
-(defconst octave-version "0.8.4")
+(defconst octave-version "0.8.5")
 (defconst octave-help-address
   "Kurt.Hornik@ci.tuwien.ac.at"
   "Address for Octave mode bug reports")
 
 
 (defvar octave-mode-map nil
   "Keymap used in Octave mode.")
 (if octave-mode-map
     ()
   (let ((map (make-sparse-keymap)))
     (define-key map "`" 'octave-abbrev-start)
     (define-key map ";" 'octave-electric-semi)
     (define-key map " " 'octave-electric-space)
     (define-key map "\n" 'octave-reindent-then-newline-and-indent)
     (define-key map "\t" 'indent-according-to-mode)
+    (define-key map "\e;" 'octave-indent-for-comment)
     (define-key map "\e\n" 'octave-indent-new-comment-line)  
     (define-key map "\e\t" 'octave-complete-symbol)
     (define-key map "\M-\C-a"	'octave-beginning-of-defun)
     (define-key map "\M-\C-e" 'octave-end-of-defun)
     (define-key map "\M-\C-h" 'octave-mark-defun)
     (define-key map "\M-\C-q" 'octave-indent-defun)  
     (define-key map "\C-c;" 'octave-comment-region)
     (define-key map "\C-c:" 'octave-uncomment-region)  
@@ -96,17 +97,16 @@
 	      ["Mark Block"		octave-mark-block t]
 	      ["Close Block"		octave-close-block t])
 	(list "Functions"
 	      ["Begin of Function"	octave-beginning-of-defun t]
 	      ["End of Function"	octave-end-of-defun t]
 	      ["Mark Function"		octave-mark-defun t]
 	      ["Indent Function"	octave-indent-defun t]
 	      ["Insert Function"	octave-insert-defun t])
-	
 	"-"
 	(list "Debug"
 	      ["Send Current Line"	octave-send-line t]
 	      ["Send Current Block"	octave-send-block t]
 	      ["Send Current Function"	octave-send-defun t]
 	      ["Send Region"		octave-send-region t]
 	      ["Show Process Buffer"	octave-show-process-buffer t]
 	      ["Hide Process Buffer"	octave-hide-process-buffer t]
@@ -154,16 +154,32 @@
     (define-abbrev octave-mode-abbrev-table "`r" "return" nil)
     (define-abbrev octave-mode-abbrev-table "`t" "try" nil)
     (define-abbrev octave-mode-abbrev-table "`up" "unwind_protect" nil)
     (define-abbrev octave-mode-abbrev-table "`upc"
       "unwind_protect_cleanup" nil)
     (define-abbrev octave-mode-abbrev-table "`w" "while ()" nil)
     (setq abbrevs-changed ac)))
 
+(defvar octave-comment-char ?#
+  "The character to start a comment.")
+(defvar octave-comment-column 32
+  "*Column to indent in-line comments to.")
+(defvar octave-comment-start
+  (concat (make-string 1 octave-comment-char) " ")
+  "String to insert to start a new in-line Octave comment.")
+(defvar octave-block-comment-start
+  (concat (make-string 2 octave-comment-char) " ")
+  "String to insert to start a new Octave comment on an empty line.")
+(defvar octave-comment-start-skip "\\s<+\\s-*"
+  "Regexp to match the start of an Octave comment plus everything up to
+its body.")
+(defvar octave-fill-column 72
+  "*Column beyond which automatic line-wrapping should happen.")
+
 (defvar octave-mode-syntax-table nil
   "Syntax table in use in Octave mode buffers.")
 (if octave-mode-syntax-table
     ()
   (setq octave-mode-syntax-table (make-syntax-table))
   (modify-syntax-entry ?\r " "  octave-mode-syntax-table)
   (modify-syntax-entry ?+ "."   octave-mode-syntax-table)
   (modify-syntax-entry ?- "."   octave-mode-syntax-table)
@@ -177,32 +193,20 @@
   (modify-syntax-entry ?! "."   octave-mode-syntax-table)
   (modify-syntax-entry ?\\ "\\" octave-mode-syntax-table)
   (modify-syntax-entry ?\' "."  octave-mode-syntax-table)
   (modify-syntax-entry ?\` "w"  octave-mode-syntax-table)
   (modify-syntax-entry ?\" "\"" octave-mode-syntax-table)
   (modify-syntax-entry ?. "w"   octave-mode-syntax-table)
   ;; Not sure if we should do this ...
   (modify-syntax-entry ?_ "w"   octave-mode-syntax-table)
-  ;; Don't deal with `%' comments ...
-  ;; (modify-syntax-entry ?\% "<"  octave-mode-syntax-table)
-  (modify-syntax-entry ?\% "."  octave-mode-syntax-table)  
+  (modify-syntax-entry ?\% "."  octave-mode-syntax-table)
   (modify-syntax-entry ?\# "<"  octave-mode-syntax-table)
   (modify-syntax-entry ?\n ">"  octave-mode-syntax-table))
 
-(defvar octave-comment-start "# "
-  "*String to insert to start a new comment.")
-(defvar octave-comment-column 32
-  "*Column to indent in-line comments to.")
-(defvar octave-comment-start-skip "\\s<+\\s-*"
-  "Regexp to match the start of an Octave comment plus everything up to
-its body.")
-(defvar octave-fill-column 72
-  "*Column beyond which automatic line-wrapping should happen.")
-
 (defvar octave-begin-keywords
   '("for" "function" "if" "try" "unwind_protect" "while"))
 (defvar octave-else-keywords
   '("catch" "else" "elseif" "unwind_protect_cleanup"))
 (defvar octave-end-keywords
   '("end" "endfor" "endfunction" "endif" "end_try_catch"
     "end_unwind_protect" "endwhile"))
 
@@ -399,19 +403,16 @@ octave-blink-matching-block
 
 octave-block-offset
   Extra indentation applied to statements in block structures.
   Default is 2.
 
 octave-comment-column
   Column to indent right-margin comments to.  Default is 32.
 
-octave-comment-start
-  String to insert to start a new comment.  Default is \"# \".
-
 octave-continuation-offset
   Extra indentation applied to Octave continuation lines.  Default is 4.
 
 octave-continuation-string
   String used for Octave continuation lines.  Default is a backslash.
 
 octave-fill-column
   Column beyond which automatic line-wrapping should happen.  Default is
@@ -477,16 +478,20 @@ including a reproducible test case and s
   (make-local-variable 'comment-end)
   (setq comment-end "")
   (make-local-variable 'comment-column)
   (setq comment-column octave-comment-column)    
   (make-local-variable 'comment-start-skip)
   (setq comment-start-skip octave-comment-start-skip)
   (make-local-variable 'comment-indent-function)
   (setq comment-indent-function 'octave-comment-indent)
+  (make-local-variable 'block-comment-start)
+  (setq block-comment-start octave-block-comment-start)
+  (make-local-variable 'block-comment-end)
+  (setq block-comment-end "")
 
   (make-local-variable 'parse-sexp-ignore-comments)
   (setq parse-sexp-ignore-comments t)
   (make-local-variable 'paragraph-start)
   (setq paragraph-start (concat "\\s-*$\\|" page-delimiter))
   (make-local-variable 'paragraph-separate)
   (setq paragraph-separate paragraph-start)
   (make-local-variable 'paragraph-ignore-fill-prefix)
@@ -583,17 +588,17 @@ Any other key combination is executed no
         (list-abbrevs)
       (setq unread-command-events (list c)))))
 
 
 ;;; Comments
 (defun octave-comment-region (beg end &optional arg)
   "Comment or uncomment each line in the region.  See `comment-region'."
   (interactive "r\nP")
-  (let ((comment-start (substring octave-comment-start 0 1)))
+  (let ((comment-start (char-to-string octave-comment-char)))
     (comment-region beg end arg)))
   
 (defun octave-uncomment-region (beg end &optional arg)
   "Uncomment each line in the region."
   (interactive "r\nP")
   (or arg (setq arg 1))
   (octave-comment-region beg end (- arg)))
 
@@ -660,16 +665,25 @@ level."
   (if (looking-at "\\s<\\s<\\s<")
       0
     (if (looking-at "\\s<\\s<")
 	(calculate-octave-indent)
       (skip-syntax-backward "\\s-")
       (max (if (bolp) 0 (+ (current-column)))
 	   comment-column))))
 
+(defun octave-indent-for-comment ()
+  "If there is no comment already on this line, create a code-level
+comment (started by two comment characters) if the line is empty, or an
+in-line comment (started by one comment character) otherwise.
+Point is left after the start of the comment which is properly aligned."
+  (interactive)
+  (indent-for-comment)
+  (indent-according-to-mode))
+
 (defun octave-indent-line (&optional arg)
   "Indent current line as Octave code.
 With optional ARG, use this as offset unless this line is a comment with
 fixed goal column."
   (interactive)
   (or arg (setq arg 0))
   (let ((icol (calculate-octave-indent))
 	(relpos (- (current-column) (current-indentation))))
@@ -940,17 +954,18 @@ Signal an error if the keywords are inco
 				(octave-in-string-p)
 				(not (forward-char 1))))
 		    (skip-syntax-backward "\\s-")
 		    (buffer-substring-no-properties pos (point)))))
 	  (if (member eb-keyword
 		      (cdr (assoc bb-keyword octave-block-match-alist)))
 	      (progn
 		(message "Matches `%s %s'" bb-keyword bb-arg)
-		(sit-for 1))
+		(if (pos-visible-in-window-p)
+		    (sit-for blink-matching-delay)))
 	    (error "Block keywords `%s' and `%s' do not match"
 		   bb-keyword eb-keyword))))))
 
 (defun octave-beginning-of-defun (&optional arg)
   "Move backward to the beginning of a function.  With argument, do it
 that many times.  Negative arg -N means move forward to Nth following
 beginning of a function.
 Returns t unless search stops at the beginning or end of the buffer."
@@ -1240,18 +1255,17 @@ arguments and return values (to be enter
 			 ((string-equal vals "")
 			  vals)
 			 ((string-match "[ ,]" vals)
 			  (concat " [" vals "] ="))
 			 (t
 			  (concat " " vals " =")))
 			name
 			args))
-	(prefix (concat (substring octave-comment-start 0 1)
-			octave-comment-start)))
+	(prefix octave-block-comment-start))
     (if (not (bobp)) (newline))
     (insert "function" string)
     (indent-according-to-mode)
     (newline 2)
     (insert prefix "usage: " string)
     (reindent-then-newline-and-indent)    
     (insert prefix)
     (reindent-then-newline-and-indent)    
@@ -1383,17 +1397,17 @@ documentation for Octave."
 	(setq alist (cdr alist))))
     (message "Building help completion alist...done"))    
   octave-help-completion-alist)
 
 
 ;;; Inferior Octave mode
 (require 'comint)
 
-(defvar inferior-octave-buffer "*Octave Interaction*"
+(defvar inferior-octave-buffer "*Inferior Octave*"
   "*Name of buffer for running an inferior Octave process")
 
 (defvar inferior-octave-process nil)
 
 (defvar inferior-octave-program "octave")
 
 (defvar inferior-octave-prompt "\\(^octave\\(:[0-9]+\\)?\\|^\\)>+ "
   "*Regexp to match prompts for the inferior Octave process")
@@ -1425,17 +1439,17 @@ mode, set this to '(\"-q\" \"--tradition
   (list
    (cons inferior-octave-prompt 'font-lock-type-face))
   "Additional expressions to highlight in Inferior Octave mode.")
 
 (defvar inferior-octave-dynamic-complete-functions
   '(inferior-octave-complete comint-dynamic-complete-filename)  
   "List of functions called to perform completion.
 This variable is used to initialise `comint-dynamic-complete-functions'
-in the Octave interaction buffer.")
+in the Inferior Octave buffer.")
 
 (defvar inferior-octave-mode-hook nil
   "*Hook to be run when Inferior Octave mode is started.")
 
 (defun inferior-octave-mode ()
   "Major mode for interacting with an inferior Octave process.
 Runs Octave as a subprocess of Emacs, with Octave I/O through an Emacs
 buffer.
@@ -1745,18 +1759,18 @@ code line."
    (y-or-n-p "Do you want to submit a bug report? ")
    (reporter-submit-bug-report
     octave-help-address
     (concat "Octave version " octave-version)
     (list
      'octave-auto-newline
      'octave-blink-matching-block
      'octave-block-offset
+     'octave-comment-char
      'octave-comment-column
-     'octave-comment-start     
      'octave-continuation-offset
      'octave-continuation-string
      'octave-fill-column
      'octave-inhibit-startup-message
      'octave-help-files
      'octave-send-echo-input
      'octave-send-line-auto-forward
      'octave-send-show-buffer))))
