# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1265610978 18000
#      Mon Feb 08 01:36:18 2010 -0500
# Node ID 272179888089ab8ce3c36139c6d474c67aae1e02
# Parent  297996005012ab358c8f9ce6fa58b41ab19d9316
Fclass: improve argument decoding

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2010-02-08  John W. Eaton  <jwe@octave.org>
+
+	* ov-class.cc (Fclass): If more than 1 argument, check that
+	call is inside class constructor first, then check for valid
+	arguments.
+
 2010-02-05  Jaroslav Hajek  <highegg@gmail.com>
 
 	* data.cc (F__accumarray_sum__): Allow bool and char inputs.
 	(do_accumarray_minmax, do_accumarray_minmax_fun): New helper funcs.
 	(F__accumarray_min__, F__accumarray_max__): New defuns.
 
 2010-02-04  John W. Eaton  <jwe@octave.org>
 
diff --git a/src/ov-class.cc b/src/ov-class.cc
--- a/src/ov-class.cc
+++ b/src/ov-class.cc
@@ -1716,28 +1716,28 @@ derived.\n\
   int nargin = args.length ();
 
   if (nargin == 0)
     print_usage ();
   else if (nargin == 1)
     retval = args(0).class_name ();
   else
     {
-      Octave_map m = args(0).map_value ();
+      octave_function *fcn = octave_call_stack::caller ();
 
-      if (! error_state)
-	{
-	  std::string id = args(1).string_value ();
+      if (fcn && fcn->is_class_constructor ())
+        {
+          Octave_map m = args(0).map_value ();
 
-	  if (! error_state)
-	    {
-	      octave_function *fcn = octave_call_stack::caller ();
+          if (! error_state)
+            {
+              std::string id = args(1).string_value ();
 
-	      if (fcn && fcn->is_class_constructor ())
-		{
+              if (! error_state)
+                {
 		  if (nargin == 2)
 		    retval = octave_value (new octave_class (m, id));
 		  else
 		    {
 		      octave_value_list parents = args.slice (2, nargin-2);
 
 		      retval = octave_value (new octave_class (m, id, parents));
 		    }
@@ -1748,25 +1748,25 @@ derived.\n\
 			= octave_class::exemplar_map.find (id);
 
 		      if (it == octave_class::exemplar_map.end ())
 			octave_class::exemplar_map[id]
 			  = octave_class::exemplar_info (retval);
 		      else if (! it->second.compare (retval))
 			error ("class: object of class `%s' does not match previously constructed objects", id.c_str ());
 		    }
-		}
+                }
 	      else
-		error ("class: invalid call from outside class constructor");
+                error ("class: expecting character string as second argument");
 	    }
 	  else
-	    error ("class: expecting character string as second argument");
+            error ("class: expecting structure as first argument");
 	}
       else
-	error ("class: expecting structure as first argument");
+        error ("class: invalid call from outside class constructor");
     }
 
   return retval;
 }
 
 DEFUN (__isa_parent__, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} __isa_parent__ (@var{class}, @var{name})\n\
