# HG changeset patch
# User Max Brister <max@2bass.com>
# Date 1340659560 18000
#      Mon Jun 25 16:26:00 2012 -0500
# Node ID b23a98ca0e436d89be9b7ad79be19a38eafdcaf6
# Parent  0f156affb036037bda38c89de140c9132d6253cd
Remove jit_block::visit_dom and simplify release placement

* src/pt-jit.cc (octave_jit_paren_subsasgn_impl): Remove debug print.
  (jit_value::first_use_block): New function.
  (jit_block::compute_df, jit_block::update_idom, jit_block::create_dom_tree):
    Use visited function.
  (jit_convert::construct_ssa): Call do_construct_ssa with visit count.
  (jit_convert::do_construct_ssa): Use dominator graph directly.
  (jit_convert::place_releases, jit_convert::release_temp): Track temporaries
    instead of using compute_temp.
  (jit_convert::compute_temp::compute_temp,
  jit_convert::compute_temp::operator ()): Removed function.

* src/pt-jit.cc (jit_value::fire_use_block): New declaration.
  (jit_block::label): Use visited function.
  (jit_block::dom_successor, jit_block::dom_successor_count, jit_block::visited,
  jit_block::visit_count): New functions.
  (jit_block::visit_dom, jit_block::do_visit_dom): Removed function.
  (jit_block_callback): Removed class.
  (jit_convert::do_construct_ssa, jit_convert::rleease_temp): Change function
    signature.
  (jit_convert::instr_set): Remove typedef.
  (jit_convert::compute_temp): Remove class declaration.

diff --git a/src/pt-jit.cc b/src/pt-jit.cc
--- a/src/pt-jit.cc
+++ b/src/pt-jit.cc
@@ -235,17 +235,16 @@ octave_jit_gindex_range (int nd, int dim
       gripe_library_execution_error ();
     }
 }
 
 extern "C" void
 octave_jit_paren_subsasgn_impl (jit_matrix *mat, octave_idx_type index,
                                 double value)
 {
-  std::cout << "impl\n";
   NDArray *array = mat->array;
   if (array->nelem () < index)
     array->resize1 (index);
 
   double *data = array->fortran_vec ();
   data[index - 1] = value;
 
   mat->ref_count = array->jit_ref_count ();
@@ -1052,16 +1051,31 @@ jit_use::user_parent (void) const
 {
   return muser->parent ();
 }
 
 // -------------------- jit_value --------------------
 jit_value::~jit_value (void)
 {}
 
+jit_block *
+jit_value::first_use_block (void)
+{
+  jit_use *use = first_use ();
+  while (use)
+    {
+      if (! isa<jit_error_check> (use->user ()))
+        return use->user_parent ();
+
+      use = use->next ();
+    }
+
+  return 0;
+}
+
 void
 jit_value::replace_with (jit_value *value)
 {
   while (first_use ())
     {
       jit_instruction *user = first_use ()->user ();
       size_t idx = first_use ()->index ();
       user->stash_argument (idx, value);
@@ -1317,54 +1331,49 @@ jit_block::print_dom (std::ostream& os) 
   os << "  dom_succ: ";
   for (size_t i = 0; i < dom_succ.size (); ++i)
     os << *dom_succ[i] << " ";
 
   return os << std::endl;
 }
 
 void
-jit_block::compute_df (size_t visit_count)
+jit_block::compute_df (size_t avisit_count)
 {
-  if (mvisit_count > visit_count)
+  if (visited (avisit_count))
     return;
-  ++mvisit_count;
 
   if (use_count () >= 2)
     {
       for (jit_use *use = first_use (); use; use = use->next ())
         {
           jit_block *runner = use->user_parent ();
           while (runner != idom)
             {
               runner->mdf.insert (this);
               runner = runner->idom;
             }
         }
     }
 
   for (size_t i = 0; i < successor_count (); ++i)
-    successor (i)->compute_df (visit_count);
+    successor (i)->compute_df (avisit_count);
 }
 
 bool
-jit_block::update_idom (size_t visit_count)
+jit_block::update_idom (size_t avisit_count)
 {
-  if (mvisit_count > visit_count)
-    return false;
-  ++mvisit_count;
-
-  if (! use_count ())
+  if (visited (avisit_count) || ! use_count ())
     return false;
 
   bool changed = false;
   for (jit_use *use = first_use (); use; use = use->next ())
     {
       jit_block *pred = use->user_parent ();
-      changed = pred->update_idom (visit_count) || changed;
+      changed = pred->update_idom (avisit_count) || changed;
     }
 
   jit_use *use = first_use ();
   jit_block *new_idom = use->user_parent ();
   use = use->next ();
 
   for (; use; use = use->next ())
     {
@@ -1420,27 +1429,26 @@ jit_block::maybe_split (jit_convert& con
 
       return split;
     }
 
   return this;
 }
 
 void
-jit_block::create_dom_tree (size_t visit_count)
+jit_block::create_dom_tree (size_t avisit_count)
 {
-  if (mvisit_count > visit_count)
+  if (visited (avisit_count))
     return;
-  ++mvisit_count;
 
   if (idom != this)
     idom->dom_succ.push_back (this);
 
   for (size_t i = 0; i < successor_count (); ++i)
-    successor (i)->create_dom_tree (visit_count);
+    successor (i)->create_dom_tree (avisit_count);
 }
 
 jit_block *
 jit_block::idom_intersect (jit_block *b)
 {
   jit_block *i = this;
   jit_block *j = b;
 
@@ -2400,54 +2408,62 @@ jit_convert::construct_ssa (void)
                 {
                   ssa_worklist.push_back (dblock);
                   visited.insert (dblock);
                 }
             }
         }
     }
 
-  entry_block->visit_dom (&jit_convert::do_construct_ssa, &jit_block::pop_all);
+  do_construct_ssa (*entry_block, entry_block->visit_count ());
 }
 
 void
-jit_convert::do_construct_ssa (jit_block& block)
+jit_convert::do_construct_ssa (jit_block& ablock, size_t avisit_count)
 {
+  if (ablock.visited (avisit_count))
+    return;
+
   // replace variables with their current SSA value
-  for (jit_block::iterator iter = block.begin (); iter != block.end (); ++iter)
+  for (jit_block::iterator iter = ablock.begin (); iter != ablock.end (); ++iter)
     {
       jit_instruction *instr = *iter;
       instr->construct_ssa ();
       instr->push_variable ();
     }
 
   // finish phi nodes of successors
-  for (size_t i = 0; i < block.successor_count (); ++i)
+  for (size_t i = 0; i < ablock.successor_count (); ++i)
     {
-      jit_block *finish = block.successor (i);
+      jit_block *finish = ablock.successor (i);
 
       for (jit_block::iterator iter = finish->begin (); iter != finish->end ()
              && isa<jit_phi> (*iter);)
         {
           jit_phi *phi = static_cast<jit_phi *> (*iter);
           jit_variable *var = phi->dest ();
           if (var->has_top ())
             {
-              phi->add_incomming (&block, var->top ());
+              phi->add_incomming (&ablock, var->top ());
               ++iter;
             }
           else
             {
               // temporaries may have extranious phi nodes which can be removed
               assert (! phi->use_count ());
               assert (var->name ().size () && var->name ()[0] == '#');
               iter = finish->remove (iter);
             }
         }
     }
+
+  for (size_t i = 0; i < ablock.dom_successor_count (); ++i)
+    do_construct_ssa (*ablock.dom_successor (i), avisit_count);
+
+  ablock.pop_all ();
 }
 
 void
 jit_convert::remove_dead ()
 {
   block_list::iterator biter;
   for (biter = blocks.begin (); biter != blocks.end (); ++biter)
     {
@@ -2492,44 +2508,77 @@ jit_convert::remove_dead ()
           biter = blocks.erase (biter);
         }
     }
 }
 
 void
 jit_convert::place_releases (void)
 {
-  compute_temp tinfo (*this);
-
+  std::set<jit_value *> temporaries;
   for (block_list::iterator iter = blocks.begin (); iter != blocks.end ();
        ++iter)
     {
       jit_block& ablock = **iter;
       if (ablock.id () != jit_block::NO_ID)
         {
-          release_temp (ablock, tinfo.temp_out (ablock));
+          release_temp (ablock, temporaries);
           release_dead_phi (ablock);
         }
     }
-
 }
 
 void
-jit_convert::release_temp (jit_block& ablock, const instr_set& temp)
+jit_convert::release_temp (jit_block& ablock, std::set<jit_value *>& temp)
 {
-  if (! temp.size ())
-    return;
-
-  jit_block *split = ablock.maybe_split (*this, final_block);
-  jit_terminator *term = split->terminator ();
-  for (instr_set::const_iterator iter = temp.begin (); iter != temp.end ();
+  for (jit_block::iterator iter = ablock.begin (); iter != ablock.end ();
        ++iter)
     {
       jit_instruction *instr = *iter;
-      jit_call *release = create<jit_call> (&jit_typeinfo::release, instr);
+
+      // check for temporaries that require release and live across
+      // multiple blocks
+      if (instr->needs_release ())
+        {
+          jit_block *fu_block = instr->first_use_block ();
+          if (fu_block && fu_block != &ablock)
+            temp.insert (instr);
+        }
+
+      if (isa<jit_call> (instr))
+        {
+          // place releases for temporary arguments
+          for (size_t i = 0; i < instr->argument_count (); ++i)
+            {
+              jit_value *arg = instr->argument (i);
+              if (arg->needs_release ())
+                {
+                  jit_call *release = create<jit_call> (&jit_typeinfo::release,
+                                                        arg);
+                  release->infer ();
+                  ablock.insert_after (iter, release);
+                  ++iter;
+                  temp.erase (arg);
+                }
+            }
+        }
+    }
+
+  if (! temp.size () || ! isa<jit_error_check> (ablock.terminator ()))
+    return;
+
+  // FIXME: If we support try/catch or unwind_protect final_block may not be the
+  // destination
+  jit_block *split = ablock.maybe_split (*this, final_block);
+  jit_terminator *term = split->terminator ();
+  for (std::set<jit_value *>::const_iterator iter = temp.begin ();
+       iter != temp.end (); ++iter)
+    {
+      jit_value *value = *iter;
+      jit_call *release = create<jit_call> (&jit_typeinfo::release, value);
       split->insert_before (term, release);
       release->infer ();
     }
 }
 
 void
 jit_convert::release_dead_phi (jit_block& ablock)
 {
@@ -2606,106 +2655,16 @@ jit_convert::finish_breaks (jit_block *d
   for (block_list::const_iterator iter = lst.begin (); iter != lst.end ();
        ++iter)
     {
       jit_block *b = *iter;
       b->append (create<jit_branch> (dest));
     }
 }
 
-// -------------------- jit_convert::compute_temp --------------------
-jit_convert::compute_temp::compute_temp (jit_convert& aconvert)
-  : convert (aconvert), mtemp_out (aconvert.final_block->id () + 1)
-{
-  block_list& blocks = convert.blocks;
-
-  // initialze mtemp_out
-  for (block_list::iterator biter = blocks.begin (); biter != blocks.end ();
-       ++biter)
-    {
-      jit_block& block = **biter;
-      instr_set& tout = temp_out (block);
-      for (jit_block::iterator iter = block.begin (); iter != block.end ();
-           ++iter)
-        {
-          jit_instruction *instr = *iter;
-
-          // check for temporaries that require release and live across
-          // multiple blocks
-          if (instr->needs_release ()
-              && instr->use_count () >= 1)
-            {
-              bool parent_in_block = false;
-              jit_use *use = instr->first_use ();
-              while (use)
-                {
-                  // skip error checks, as they do not release their use
-                  if (! isa<jit_error_check> (use->user ())
-                      && use->user_parent () == &block)
-                    {
-                      parent_in_block = true;
-                      break;
-                    }
-
-                  use = use->next ();
-                }
-
-              if (! parent_in_block)
-                tout.insert (instr);
-            }
-
-          if (isa<jit_call> (instr))
-            {
-              // place releases for temporary arguments
-              for (size_t i = 0; i < instr->argument_count (); ++i)
-                {
-                  jit_value *arg = instr->argument (i);
-                  if (arg->needs_release ())
-                    {
-                      jit_call *release
-                        = convert.create<jit_call> (&jit_typeinfo::release,
-                                                    arg);
-                      release->infer ();
-                      block.insert_after (iter, release);
-                      ++iter;
-                    }
-                }
-            }
-        }
-    }
-
-  do
-    {
-      changed = false;
-      convert.entry_block->visit_dom (*this, 0);
-    }
-  while (changed);
-}
-
-void
-jit_convert::compute_temp::operator() (jit_block& block)
-{
-  instr_set& tout = temp_out (block);
-  for (jit_use *use = block.first_use (); use; use = use->next ())
-    {
-      jit_block& pred = *use->user_parent ();
-      instr_set& pred_tout = temp_out (pred);
-      for (instr_set::iterator iter = pred_tout.begin ();
-           iter != pred_tout.end (); ++ iter)
-        {
-          jit_instruction *instr = *iter;
-          jit_block *use_in = instr->parent ();
-
-          // FIXME: Only valid until we support try/catch or unwind_protect
-          if (use_in != &block && &block != convert.final_block)
-            changed = changed || tout.insert (instr).second;
-        }
-    }
-}
-
 // -------------------- jit_convert::convert_llvm --------------------
 llvm::Function *
 jit_convert::convert_llvm::convert (llvm::Module *module,
                                     const std::vector<std::pair< std::string, bool> >& args,
                                     const std::list<jit_block *>& blocks,
                                     const std::list<jit_value *>& constants)
 {
   jit_type *any = jit_typeinfo::get_any ();
diff --git a/src/pt-jit.h b/src/pt-jit.h
--- a/src/pt-jit.h
+++ b/src/pt-jit.h
@@ -771,16 +771,20 @@ public:
     return min_worklist;
   }
 
   void stash_in_worklist (bool ain_worklist)
   {
     min_worklist = ain_worklist;
   }
 
+  // The block of the first use which is not a jit_error_check
+  // So this is not necessarily first_use ()->parent ().
+  jit_block *first_use_block (void);
+
   // replace all uses with
   virtual void replace_with (jit_value *value);
 
   jit_type *type (void) const { return ty; }
 
   llvm::Type *type_llvm (void) const
   {
     return ty ? ty->to_llvm () : 0;
@@ -1230,26 +1234,25 @@ public:
 
   // label with a RPO walk
   void label (void)
   {
     size_t number = 0;
     label (mvisit_count, number);
   }
 
-  void label (size_t visit_count, size_t& number)
+  void label (size_t avisit_count, size_t& number)
   {
-    if (mvisit_count > visit_count)
+    if (visited (avisit_count))
       return;
-    ++mvisit_count;
 
     for (jit_use *use = first_use (); use; use = use->next ())
       {
         jit_block *pred = use->user_parent ();
-        pred->label (visit_count, number);
+        pred->label (avisit_count, number);
       }
 
     mid = number++;
   }
 
   // See for idom computation algorithm
   // Cooper, Keith D.; Harvey, Timothy J; and Kennedy, Ken (2001).
   // "A Simple, Fast Dominance Algorithm"
@@ -1268,23 +1271,24 @@ public:
     compute_df (mvisit_count);
   }
 
   void create_dom_tree (void)
   {
     create_dom_tree (mvisit_count);
   }
 
-  // visit blocks in the order of the dominator tree
-  // inorder - Run on the root first, then children
-  // postorder - Run on children first, then the root
-  template <typename func_type0, typename func_type1>
-  void visit_dom (func_type0 inorder, func_type1 postorder)
+  jit_block *dom_successor (size_t idx) const
   {
-    do_visit_dom (mvisit_count, inorder, postorder);
+    return dom_succ[idx];
+  }
+
+  size_t dom_successor_count (void) const
+  {
+    return dom_succ.size ();
   }
 
   // call pop_varaible on all instructions
   void pop_all (void);
 
   virtual std::ostream& print (std::ostream& os, size_t indent = 0) const
   {
     print_indent (os, indent);
@@ -1328,32 +1332,44 @@ public:
   llvm::BasicBlock *to_llvm (void) const;
 
   std::list<jit_block *>::iterator location (void) const
   { return mlocation; }
 
   void stash_location (std::list<jit_block *>::iterator alocation)
   { mlocation = alocation; }
 
+  // used to prevent visiting the same node twice in the graph
+  size_t visit_count (void) const { return mvisit_count; }
+
+  // check if this node has been visited yet at the given visit count. If we
+  // have not been visited yet, mark us as visited.
+  bool visited (size_t avisit_count)
+  {
+    if (mvisit_count <= avisit_count)
+      {
+        mvisit_count = avisit_count + 1;
+        return false;
+      }
+
+    return true;
+  }
+
   JIT_VALUE_ACCEPT;
 private:
   void internal_append (jit_instruction *instr);
 
-  void compute_df (size_t visit_count);
-
-  bool update_idom (size_t visit_count);
-
-  void create_dom_tree (size_t visit_count);
+  void compute_df (size_t avisit_count);
+
+  bool update_idom (size_t avisit_count);
+
+  void create_dom_tree (size_t avisit_count);
 
   jit_block *idom_intersect (jit_block *b);
 
-  template <typename func_type0, typename func_type1>
-  void do_visit_dom (size_t visit_count, func_type0 inorder,
-                     func_type1 postorder);
-
   size_t mvisit_count;
   size_t mid;
   jit_block *idom;
   df_set mdf;
   std::vector<jit_block *> dom_succ;
   std::string mname;
   instruction_list instructions;
   bool malive;
@@ -1383,77 +1399,16 @@ public:
 
   jit_phi *user (void) const { return muser; }
 
   jit_block *user_parent (void) const;
 private:
   jit_phi *muser;
 };
 
-// allow regular function pointers as well as pointers to members
-template <typename func_type>
-class jit_block_callback
-{
-public:
-  jit_block_callback (func_type afunction) : function (afunction) {}
-
-  void operator() (jit_block& block)
-  {
-    function (block);
-  }
-private:
-  func_type function;
-};
-
-template <>
-class jit_block_callback<int>
-{
-public:
-  jit_block_callback (int) {}
-
-  void operator() (jit_block&)
-  {}
-};
-
-template <>
-class jit_block_callback<void (jit_block::*)(void)>
-{
-public:
-  typedef void (jit_block::*func_type)(void);
-
-  jit_block_callback (func_type afunction) : function (afunction) {}
-
-  void operator() (jit_block& ablock)
-  {
-    (ablock.*function) ();
-  }
-private:
-  func_type function;
-};
-
-template <typename func_type0, typename func_type1>
-void
-jit_block::do_visit_dom (size_t visit_count, func_type0 inorder,
-                         func_type1 postorder)
-{
-  if (mvisit_count > visit_count)
-    return;
-  mvisit_count = visit_count + 1;
-
-  jit_block_callback<func_type0> inorder_cb (inorder);
-  inorder_cb (*this);
-
-  for (size_t i = 0; i < dom_succ.size (); ++i)
-    dom_succ[i]->do_visit_dom (visit_count, inorder, postorder);
-
-  jit_block_callback<func_type1> postorder_cb (postorder);
-  postorder_cb (*this);
-}
-
-
 // A non-ssa variable
 class
 jit_variable : public jit_value
 {
 public:
   jit_variable (const std::string& aname) : mname (aname), mlast_use (0) {}
 
   const std::string &name (void) const { return mname; }
@@ -2271,25 +2226,23 @@ private:
       constants.push_back (value);
     all_values.push_back (value);
   }
 
   void merge_blocks (void);
 
   void construct_ssa (void);
 
-  static void do_construct_ssa (jit_block& block);
+  void do_construct_ssa (jit_block& block, size_t avisit_count);
 
   void remove_dead ();
 
-  typedef std::set<jit_instruction *> instr_set;
-
   void place_releases (void);
 
-  void release_temp (jit_block& ablock, const instr_set& temp);
+  void release_temp (jit_block& ablock, std::set<jit_value *>& temp);
 
   void release_dead_phi (jit_block& ablock);
 
   void simplify_phi (void);
 
   void simplify_phi (jit_phi& phi);
 
   void print_blocks (const std::string& header)
@@ -2317,35 +2270,16 @@ private:
   }
 
   bool breaking; // true if we are breaking OR continuing
   block_list breaks;
   block_list continues;
 
   void finish_breaks (jit_block *dest, const block_list& lst);
 
-  // compute per block information about temporaries
-  class
-  compute_temp
-  {
-  public:
-    compute_temp (jit_convert& aconvert);
-
-    void operator() (jit_block& block);
-
-    instr_set &temp_out (jit_block& b)
-    {
-      return mtemp_out[b.id ()];
-    }
-  private:
-    jit_convert& convert;
-    std::vector<instr_set> mtemp_out;
-    bool changed;
-  };
-
   // this case is much simpler, just convert from the jit ir to llvm
   class
   convert_llvm : public jit_ir_walker
   {
   public:
     convert_llvm (jit_convert& jc) : jthis (jc) {}
 
     llvm::Function *convert (llvm::Module *module,
