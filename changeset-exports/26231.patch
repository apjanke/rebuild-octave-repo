# HG changeset patch
# User Rik <rik@octave.org>
# Date 1544749441 28800
#      Thu Dec 13 17:04:01 2018 -0800
# Node ID c36b6e371f5dc69f11ed37a983b1ed4321cd1924
# Parent  b2f806601d306f04f5e522f49f2d272f55a5a17b
isdefinite.m: Return only true or false, not -1, 0, +1 (bug #51270).

* NEWS: Announce change

* isdefinite.m: Rewrite documentation.  Add input validation for TOL.
Remove code to check for semi-definite matrix (return value of 0 previously).
Update BIST tests and add new ones.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -7,16 +7,23 @@ Summary of important user-visible change
     Thus, any user-defined object can ensure correct treatment by the
     aforementioned functions by properly overloading the "size"
     function.
 
  ** The functions issymmetric and ishermitian accept an option "nonskew"
     or "skew" to calculate the symmetric or skew-symmetric property
     of a matrix.  Performance has also been increased.
 
+ ** The function isdefinite now returns true or false rather than
+    -1, 0, 1.  To test for a positive semi-definite matrix (old output
+    of 0) check whether the following two conditions hold:
+
+      isdefinite (A) => 0
+      isdefinite (A + 5*TOL, TOL) => 1
+
  ** The issorted function now uses a direction option of "ascend" or
     "descend" to make it compatible with both the sort function and
     with Matlab.  Change all uses of "ascending" and "descending" in
     existing code to the new options.
 
  ** The strncmp and strncmpi functions now return true if the two input
     strings match, even though the number of characters specified by N
     exceeds the string length.  This behavior more closely matches
diff --git a/scripts/linear-algebra/isdefinite.m b/scripts/linear-algebra/isdefinite.m
--- a/scripts/linear-algebra/isdefinite.m
+++ b/scripts/linear-algebra/isdefinite.m
@@ -14,74 +14,94 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <https://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {} {} isdefinite (@var{A})
 ## @deftypefnx {} {} isdefinite (@var{A}, @var{tol})
-## Return 1 if @var{A} is symmetric positive definite within the
-## tolerance specified by @var{tol} or 0 if @var{A} is symmetric
-## positive semi-definite.  Otherwise, return -1.
+## Return true if @var{A} is symmetric positive definite matrix within the
+## tolerance specified by @var{tol}.
 ##
 ## If @var{tol} is omitted, use a tolerance of
-## @code{100 * eps * norm (@var{A}, "fro")}
+## @code{100 * eps * norm (@var{A}, "fro")}.
+##
+## Background: A positive definite matrix has eigenvalues which are all
+## greater than zero.  A positive semi-definite matrix has eigenvalues which
+## are all greater than or equal to zero.  The matrix @var{A} is very likely to
+## be positive semi-definite if the following two conditions hold for a
+## suitably small tolerance @var{tol}.
+##
+## @example
+## @group
+## isdefinite (@var{A}) @result{} 0
+## isdefinite (@var{A} + 5*@var{tol}, @var{tol}) @result{} 1
+## @end group
+## @end example
 ## @seealso{issymmetric, ishermitian}
 ## @end deftypefn
 
 ## Author: Gabriele Pannocchia <g.pannocchia@ing.unipi.it>
 ## Created: November 2003
 ## Adapted-By: jwe
 
 function retval = isdefinite (A, tol)
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
   endif
 
+  ## Validate inputs
+  retval = false;
+  if (! isnumeric (A))
+    return;
+  endif
+
   if (! isfloat (A))
     A = double (A);
   endif
 
   if (nargin == 1)
     tol = 100 * eps (class (A)) * norm (A, "fro");
+  elseif (! (isnumeric (tol) && isscalar (tol) && tol >= 0))
+    error ("isdefinite: TOL must be a scalar >= 0");
   endif
 
   if (! ishermitian (A, tol))
-    error ("isdefinite: A must be a Hermitian matrix");
+    return;
   endif
 
   e = tol * eye (rows (A));
-  [r, p] = chol (A - e);
+  [~, p] = chol (A - e);
   if (p == 0)
-    retval = 1;
-  else
-    [r, p] = chol (A + e);
-    if (p == 0)
-      retval = 0;
-    else
-      retval = -1;
-    endif
+    retval = true;
   endif
 
 endfunction
 
 
 %!test
-%! A = [-1 0; 0 -1];
-%! assert (isdefinite (A), -1);
+%! A = [-1, 0; 0, -1];
+%! assert (isdefinite (A), false);
+
+%!test
+%! A = [1, 0; 0, 1];
+%! assert (isdefinite (A), true);
 
 %!test
-%! A = [1 0; 0 1];
-%! assert (isdefinite (A), 1);
+%! A = [2, -1,  0; -1, 2, -1; 0, -1, 2];
+%! assert (isdefinite (A), true);
 
+## Test for positive semi-definite matrix
 %!test
-%! A = [2 -1 0; -1 2 -1; 0 -1 2];
-%! assert (isdefinite (A), 1);
+%! A = [1, 0; 0, 0];
+%! assert (isdefinite (A), false);
+%! tol = 100*eps;
+%! assert (isdefinite (A+5*tol, tol), true);
 
-%!test
-%! A = [1 0; 0 0];
-%! assert (isdefinite (A), 0);
+%!assert (! isdefinite (magic (3)))
 
 %!error isdefinite ()
 %!error isdefinite (1,2,3)
-%!error <A must be a Hermitian matrix> isdefinite ([1 2; 3 4])
+%!error <TOL must be a scalar .= 0> isdefinite (1, {1})
+%!error <TOL must be a scalar .= 0> isdefinite (1, [1 1])
+%!error <TOL must be a scalar .= 0> isdefinite (1, -1)
