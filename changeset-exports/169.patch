# HG changeset patch
# User jwe
# Date 751240672 0
#      Thu Oct 21 21:57:52 1993 +0000
# Node ID 49ab724d0a326ba6737715fe9fcf1025462ef80b
# Parent  a500c60e8f2351daee62bf1474978acc228d2df5
[project @ 1993-10-21 21:56:38 by jwe]

diff --git a/Makeconf.in b/Makeconf.in
--- a/Makeconf.in
+++ b/Makeconf.in
@@ -13,24 +13,27 @@ SHELL = /bin/sh
 LEX = @LEX@
 LFLAGS = @LFLAGS@
 LEXLIB = @LEXLIB@
 
 YACC = @YACC@
 YFLAGS = -dv
 
 INSTALL = @INSTALL@
+INSTALL_PROGRAM = @INSTALL_PROGRAM@
 INSTALL_DATA = @INSTALL_DATA@
 
 RANLIB = @RANLIB@
 
 RUNTEST = @RUNTEST@
 
 DEFAULT_PAGER = @DEFAULT_PAGER@
 
+DEFAULT_INFO_FILE = $(infodir)/octave.info
+
 # Fortran to C translator and associated flags.
 
 F2C = @F2C@
 F2CFLAGS = @F2CFLAGS@
 
 # Fortran compiler flags.
 
 FFLAGS = @FFLAGS@
diff --git a/octMakefile.in b/octMakefile.in
--- a/octMakefile.in
+++ b/octMakefile.in
@@ -17,17 +17,17 @@ DISTFILES = COPYING ChangeLog Makefile.i
 	README.NLP THANKS INSTALL INSTALL.OCTAVE BUGS PLOTTING \
 	PROJECTS f2c-compat.sh flibs.sh configure configure.in \
 	config.guess octave.sh octave-mode.el doinstall.sh mkpath.c
 
 # Complete directory trees to distribute.
 DISTDIRS = bsd-math dld
 
 # Subdirectories to run make in for the primary targets.
-SUBDIRS = libcruft liboctave @DLD_DIR@ readline src doc scripts 
+SUBDIRS = libcruft liboctave @DLD_DIR@ info readline src doc scripts 
 
 # Subdirectories to run `make dist' in
 DISTSUBDIRS = $(SUBDIRS) test
 
 BINDISTFILES = COPYING ChangeLog NEWS README THANKS INSTALL.OCTAVE \
 	BUGS PLOTTING PROJECTS octave.sh octave-mode.el doinstall.sh \
 	mkpath
 
@@ -48,16 +48,20 @@ libcruft:
 liboctave:
 	cd liboctave ; $(MAKE) all
 .PHONY: liboctave
 
 dld:
 	cd dld ; $(MAKE) all
 .PHONY: dld
 
+info:
+	cd info ; $(MAKE) all
+.PHONY: info
+
 readline:
 	cd readline ; $(MAKE) all
 .PHONY: readline
 
 src:
 	cd src ; $(MAKE) all
 .PHONY: src
 
diff --git a/src/builtins.cc b/src/builtins.cc
--- a/src/builtins.cc
+++ b/src/builtins.cc
@@ -841,30 +841,31 @@ install_builtins (void)
   tmp =  new tree_constant (1.0);
   bind_protected_variable ("stdout", tmp);
   make_eternal ("stdout");
 
   tmp =  new tree_constant (2.0);
   bind_protected_variable ("stderr", tmp);
   make_eternal ("stderr");
 
+// If using 1.0 / 0.0 doesn't work, you might also try using a very
+// large constant like 1.0e100000.
+
 #if defined (HAVE_ISINF) || defined (HAVE_FINITE)
 #ifdef linux
-  tmp = new tree_constant (HUGE_VAL);
+  double tmp_inf = HUGE_VAL;
 #else
-  tmp = new tree_constant (1.0/0.0);
+  double tmp_inf = 1.0 / 0.0;
 #endif
+
+  tmp = new tree_constant (tmp_inf);
   bind_protected_variable ("Inf", tmp);
   make_eternal ("Inf");
 
-#ifdef linux
-  tmp = new tree_constant (HUGE_VAL);
-#else
-  tmp = new tree_constant (1.0/0.0);
-#endif
+  tmp = new tree_constant (tmp_inf);
   bind_protected_variable ("inf", tmp);
   make_eternal ("inf");
 
 #else
 
 // This is sort of cheesy, but what can we do, other than blowing it
 // off completely, or writing an entire IEEE emulation package?
 
@@ -872,30 +873,31 @@ install_builtins (void)
   bind_protected_variable ("Inf", tmp);
   make_eternal ("Inf");
 
   tmp = new tree_constant (DBL_MAX);
   bind_protected_variable ("inf", tmp);
   make_eternal ("inf");
 #endif
 
+// If tmp_inf / tmp_inf fails to produce a NaN, you might also try
+// something like 0.0 / 0.0.
+
 #if defined (HAVE_ISNAN)
 #ifdef linux
-  tmp = new tree_constant (NAN);
+  double tmp_nan = NAN;
 #else
-  tmp = new tree_constant (0.0/0.0);
+  double tmp_nan = tmp_inf / tmp_inf;
 #endif
+
+  tmp = new tree_constant (tmp_nan);
   bind_protected_variable ("NaN", tmp);
   make_eternal ("NaN");
 
-#ifdef linux
-  tmp = new tree_constant (NAN);
-#else
-  tmp = new tree_constant (0.0/0.0);
-#endif
+  tmp = new tree_constant (tmp_nan);
   bind_protected_variable ("nan", tmp);
   make_eternal ("nan");
 #endif
 }
 
 int
 is_text_function_name (const char *s)
 {
diff --git a/src/error.cc b/src/error.cc
--- a/src/error.cc
+++ b/src/error.cc
@@ -25,16 +25,17 @@ Software Foundation, 675 Mass Ave, Cambr
 #pragma implementation
 #endif
 
 #include <stdio.h>
 #include <stdlib.h>
 #include <stdarg.h>
 
 #include "error.h"
+#include "pager.h"
 
 // Current error state.
 int error_state;
 
 static void
 verror (const char *name, const char *fmt, va_list args)
 {
   if (name != (char *) NULL)
@@ -73,25 +74,29 @@ warning (const char *fmt, ...)
 }
 
 void
 error (const char *fmt, ...)
 {
   if (! error_state)
     error_state = 1;
 
+  flush_output_to_pager ();
+
   va_list args;
   va_start (args, fmt);
   verror ("error", fmt, args);
   va_end (args);
 }
 
 void volatile
 panic (const char *fmt, ...)
 {
+  flush_output_to_pager ();
+
   va_list args;
   va_start (args, fmt);
   verror ("panic", fmt, args);
   va_end (args);
   abort ();
 }
 
 /*
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -1310,30 +1310,17 @@ handle_identifier (char *tok, int next_t
 // arguments.  These are also reserved words, but only because it
 // would be very difficult to do anything intelligent with them if
 // they were not reserved.
 
   if (is_text_function_name (tok))
     {
       BEGIN TEXT_FCN;
 
-      if (strcmp (tok, "clear") == 0)
-	{
-	  symbol_record *sr = global_sym_tab->lookup ("clear", 1, 0);
-
-	  assert (sr != (symbol_record *) NULL);
-
-	  yylval.tok_val = new token (sr, input_line_number,
-				      current_input_column);
-
-	  token_stack.push (yylval.tok_val);
-
-	  return CLEAR;
-	}
-      else if (strcmp (tok, "help") == 0)
+      if (strcmp (tok, "help") == 0)
 	BEGIN HELP_FCN;
       else if (strcmp (tok, "set") == 0)
 	doing_set = 1;
     }
 
 // Make sure we put the return values of a function in the symbol
 // table that is local to the function.
 
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -163,17 +163,17 @@ static void maybe_warn_assign_as_truth_v
 
 // Tokens with line and column information.
 %token <tok_val> '=' ':' '-' '+' '*' '/'
 %token <tok_val> EXPR_AND EXPR_OR EXPR_NOT
 %token <tok_val> EXPR_LT EXPR_LE EXPR_EQ EXPR_NE EXPR_GE EXPR_GT
 %token <tok_val> LEFTDIV EMUL EDIV ELEFTDIV QUOTE TRANSPOSE
 %token <tok_val> PLUS_PLUS MINUS_MINUS POW EPOW
 %token <tok_val> NUM IMAG_NUM
-%token <tok_val> NAME SCREW CLEAR
+%token <tok_val> NAME SCREW
 %token <tok_val> END
 %token <tok_val> PLOT
 %token <tok_val> TEXT STYLE
 
 // Other tokens.
 %token FOR WHILE IF ELSEIF ELSE FCN BREAK CONTINUE FUNC_RET SCREW_TWO
 %token END_OF_INPUT GLOBAL
 %token USING TITLE WITH COLON OPEN_BRACE CLOSE_BRACE
@@ -208,18 +208,18 @@ static void maybe_warn_assign_as_truth_v
 %left EXPR_LT EXPR_LE EXPR_EQ EXPR_NE EXPR_GE EXPR_GT
 %left ':'
 %left '-' '+'
 %left '*' '/' LEFTDIV EMUL EDIV ELEFTDIV
 %left QUOTE TRANSPOSE
 %left UNARY PLUS_PLUS MINUS_MINUS EXPR_NOT
 %right POW EPOW
 
-// There are 20 shift/reduce conflicts, ok?
-%expect 20
+// There are 19 shift/reduce conflicts, ok?
+%expect 19
 
 // Where to start.
 %start input
 
 /*
  * Grammar rules.
  */
 %%
@@ -787,41 +787,16 @@ colon_expr	: simple_expr ':' simple_expr
 			yyerror ("parse error");
 			ABORT_PARSE;
 		      }
 		  }
 		;
 
 word_list_cmd	: identifier word_list
 		  { $$ = new tree_word_list_command ($1, $2); }
-		| CLEAR
-		  {
-		    if (defining_func)
-		      {
-			yyerror ("parse error");
-			error ("clear: invalid within function body");
-			ABORT_PARSE;
-		      }
-		    tree_identifier *tmp = new tree_identifier
-		      ($1->sym_rec (), $1->line (), $1->column ());
-		    $$ = new tree_word_list_command (tmp,
-						     (tree_word_list *) NULL);
-		  }
-		| CLEAR word_list
-		  {
-		    if (defining_func)
-		      {
-			yyerror ("parse error");
-			error ("clear: invalid within function body");
-			ABORT_PARSE;
-		      }
-		    tree_identifier *tmp = new tree_identifier
-		      ($1->sym_rec (), $1->line (), $1->column ());
-		    $$ = new tree_word_list_command (tmp, $2);
-		  }
 		;
 
 word_list	: word_list1
 		  { $$ = $1->reverse (); }
 		;
 
 word_list1	: TEXT
 		  { $$ = new tree_word_list ($1->string ()); }
diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -458,34 +458,16 @@ symbol_record::clear_all (void)
     {
       if (--fcn->count <= 0)
 	delete fcn;
       fcn = (symbol_def *) NULL;
     }
 }
 
 void
-symbol_record::undefine (void)
-{
-  if (var != (symbol_def *) NULL)
-    {
-      if (--var->count <= 0)
-	delete var;
-      var = (symbol_def *) NULL;
-    }
-
-  if (fcn != (symbol_def *) NULL)
-    {
-      if (--fcn->count <= 0)
-	delete fcn;
-      fcn = (symbol_def *) NULL;
-    }
-}
-
-void
 symbol_record::mark_as_formal_parameter (void)
 {
   formal_param = 1;
 }
 
 int
 symbol_record::is_formal_parameter (void) const
 {
@@ -574,37 +556,22 @@ symbol_table::lookup (const char *nm, in
   return (symbol_record *) NULL;
 }
 
 void
 symbol_table::clear (void)
 {
   for (int i = 0; i < HASH_TABLE_SIZE; i++)
     {
-      symbol_record *prev = &table[i];
-      symbol_record *curr = prev->next ();
-
-      while (curr != (symbol_record *) NULL)
-	{
-	  curr->clear_all ();
+      symbol_record *ptr = table[i].next ();
 
-// This record might have been read only.  If so, we shouldn't delete
-// it from the table.
-	  if (curr->is_defined ())
-	    {
-	      prev = curr;
-	      curr = curr->next ();
-	    }
-	  else
-	    {
-	      prev->next_elem = curr->next ();
-	      symbol_record *tmp = curr;
-	      curr = curr->next ();
-	      delete tmp;
-	    }
+      while (ptr != (symbol_record *) NULL)
+	{
+	  ptr->clear_all ();
+	  ptr = ptr->next ();
 	}
     }
 }
 
 int
 symbol_table::clear (const char *nm)
 {
   int index = hash (nm) & HASH_MASK;
@@ -613,48 +580,25 @@ symbol_table::clear (const char *nm)
   symbol_record *curr = prev->next ();
 
   while (curr != (symbol_record *) NULL)
     {
       if (strcmp (curr->name (), nm) == 0)
 	{
 	  curr->clear_visible ();
 
-	  if (! curr->is_defined ())
-	    {
-	      prev->next_elem = curr->next ();
-	      symbol_record *tmp = curr;
-	      curr = curr->next ();
-	      delete tmp;
-	    }
-
 	  return 1;
 	}
       prev = curr;
       curr = curr->next ();
     }
 
   return 0;
 }
 
-void
-symbol_table::undefine (void)
-{
-  for (int i = 0; i < HASH_TABLE_SIZE; i++)
-    {
-      symbol_record *ptr = table[i].next ();
-
-      while (ptr != (symbol_record *) NULL)
-	{
-	  ptr->undefine ();
-	  ptr = ptr->next ();
-	}
-    }
-}
-
 // Ugh.
 
 void
 symbol_table::bind_globals (void)
 {
   assert (this != global_sym_tab);
 
   for (int i = 0; i < HASH_TABLE_SIZE; i++)
diff --git a/src/symtab.h b/src/symtab.h
--- a/src/symtab.h
+++ b/src/symtab.h
@@ -151,17 +151,16 @@ public:
   void protect (void);
   void unprotect (void);
   void make_eternal (void);
 
   int save (ostream& os, int mark_as_global = 0);
 
   void clear_visible (void);
   void clear_all (void);
-  void undefine (void);
 
   void mark_as_formal_parameter (void);
   int is_formal_parameter (void) const;
 
   void mark_as_forced_global (void);
   int is_forced_global (void) const;
 
   void alias (symbol_record *s, int force = 0);
@@ -191,17 +190,16 @@ symbol_table
 public:
 
   symbol_table (void);
 
   symbol_record *lookup (const char *nm, int insert = 0, int warn = 0);
 
   void clear (void);
   int clear (const char *nm);
-  void undefine (void);
 
   void bind_globals (void);
 
   int save (ostream& os, int mark_as_global = 0);
   int save (ostream& os, const char *name, int mark_as_global = 0);
 
   int size (void) const;
 
diff --git a/src/t-builtins.cc b/src/t-builtins.cc
--- a/src/t-builtins.cc
+++ b/src/t-builtins.cc
@@ -45,42 +45,58 @@ Software Foundation, Inc.
 #include <strstream.h>
 #include <fstream.h>
 #include <stdio.h>
 #include <fcntl.h>
 #include <sys/file.h>
 #include <sys/stat.h>
 #include <time.h>
 #include <errno.h>
+#include <signal.h>
 #include <String.h>
 
 #include "procstream.h"
 
 #include "variables.h"
 #include "symtab.h"
 #include "error.h"
 #include "input.h"
 #include "pager.h"
 #include "utils.h"
+#include "sighandlers.h"
 #include "builtins.h"
 #include "t-builtins.h"
 #include "octave.h"
 #include "octave-hist.h"
 #include "user-prefs.h"
 #include "pr-output.h"
+#include "defaults.h"
 #include "tree.h"
 #include "help.h"
 
 // May need replacement for this on some machines.
 extern "C"
 {
   extern char *strerror (int);
   char *tilde_expand (char *s); /* From readline's tilde.c */
 }
 
+extern "C"
+{
+#include "info.h"
+#include "dribble.h"
+#include "terminal.h"
+
+  extern int initialize_info_session ();
+  extern int index_entry_exists ();
+  extern int do_info_index_search ();
+  extern void finish_info_session ();
+  extern char *replace_in_documentation ();
+}
+
 extern int symbol_out_of_date (symbol_record *s);
 
 // Is this a parametric plot?  Makes a difference for 3D plotting.
 extern int parametric_plot;
 
 /*
  * Format a list in neat columns.  Mostly stolen from GNU ls.  This
  * should maybe be in utils.cc.
@@ -226,17 +242,18 @@ in_list (char *s, char **list)
  */
 tree_constant
 builtin_clear (int argc, char **argv)
 {
   tree_constant retval;
   if (argc == 1)
     {
       curr_sym_tab->clear ();
-      global_sym_tab->clear ();
+      if (curr_sym_tab == top_level_sym_tab)
+	global_sym_tab->clear ();
     }
   else
     {
       int count;
       char **names = curr_sym_tab->list (count);
 
       int g_count;
       char **g_names = global_sym_tab->list (g_count);
@@ -258,23 +275,26 @@ builtin_clear (int argc, char **argv)
 		  String nm (names[i]);
 		  if (nm.matches (rx) && curr_sym_tab->clear (names[i]))
 		    {
 		      locals_cleared[num_cleared++] = strsave (names[i]);
 		      locals_cleared[num_cleared] = (char *) NULL;
 		    }
 		}
 
-	      for (i = 0; i < g_count; i++)
+	      if (curr_sym_tab == top_level_sym_tab)
 		{
-		  String nm (g_names[i]);
-		  if (nm.matches (rx)
-		      && ! in_list (g_names[i], locals_cleared))
+		  for (i = 0; i < g_count; i++)
 		    {
-		      global_sym_tab->clear (g_names[i]);
+		      String nm (g_names[i]);
+		      if (nm.matches (rx)
+			  && ! in_list (g_names[i], locals_cleared))
+			{
+			  global_sym_tab->clear (g_names[i]);
+			}
 		    }
 		}
 	    }
 	}
 
       int i = 0;
       while (locals_cleared[i] != (char *) NULL)
 	delete [] locals_cleared[i++];
@@ -331,145 +351,215 @@ builtin_edit_history (int argc, char **a
 tree_constant
 builtin_format (int argc, char **argv)
 {
   tree_constant retval;
   set_format_style (argc, argv);
   return retval;
 }
 
+static void
+help_syms_list (ostrstream& output_buf, help_list *list,
+		const char *desc)
+{
+  int count = 0;
+  char **symbols = names (list, count);
+  output_buf << "\n*** " << desc << ":\n\n";
+  if (symbols != (char **) NULL && count > 0)
+    list_in_columns (output_buf, symbols);
+  delete [] symbols;
+}
+
+static void
+simple_help (void)
+{
+  ostrstream output_buf;
+
+  help_syms_list (output_buf, operator_help (), "operators");
+
+  help_syms_list (output_buf, keyword_help (), "reserved words");
+
+  help_syms_list (output_buf, builtin_text_functions_help (),
+		  "text functions (these names are also reserved)");
+
+  help_syms_list (output_buf, builtin_mapper_functions_help (),
+		  "mapper functions");
+
+  help_syms_list (output_buf, builtin_general_functions_help (),
+		  "general functions");
+
+  help_syms_list (output_buf, builtin_variables_help (),
+		  "builtin variables");
+      
+// Also need to list variables and currently compiled functions from
+// the symbol table, if there are any.
+
+// Also need to search octave_path for script files.
+
+  char **path = pathstring_to_vector (user_pref.loadpath);
+
+  char **ptr = path;
+  if (ptr != (char **) NULL)
+    {
+      while (*ptr != (char *) NULL)
+	{
+	  int count;
+	  char **names = get_m_file_names (count, *ptr, 0);
+	  output_buf << "\n*** M-files in "
+		     << make_absolute (*ptr, the_current_working_directory)
+		     << ":\n\n";
+	  if (names != (char **) NULL && count > 0)
+	    list_in_columns (output_buf, names);
+	  delete [] names;
+	  ptr++;
+	}
+    }
+
+  output_buf << ends;
+  maybe_page_output (output_buf);
+}
+
+static int
+try_info (const char *string)
+{
+  int status = 0;
+
+  char *directory_name = strsave (DEFAULT_INFO_FILE);
+  char *temp = filename_non_directory (directory_name);
+
+  if (temp != directory_name)
+    {
+      *temp = 0;
+      info_add_path (directory_name, INFOPATH_PREPEND);
+    }
+
+  delete [] directory_name;
+
+  NODE *initial_node = info_get_node (DEFAULT_INFO_FILE, (char *)NULL);
+
+  if (! initial_node)
+    {
+      warning ("can't find info file!\n");
+      return status;
+    }
+
+  initialize_info_session (initial_node, 0);
+
+  if (index_entry_exists (windows, string))
+    {
+      terminal_clear_screen ();
+
+      terminal_prep_terminal ();
+
+      display_update_display (windows);
+
+      info_last_executed_command = (VFunction *)NULL;
+
+      do_info_index_search (windows, 0, string);
+
+      char *format = replace_in_documentation
+	("Type \"\\[quit]\" to quit, \"\\[get-help-window]\" for help.");
+
+      window_message_in_echo_area (format);
+
+      info_read_and_dispatch ();
+
+      terminal_goto_xy (0, screenheight - 1);
+
+      terminal_clear_to_eol ();
+
+      terminal_unprep_terminal ();
+
+      status = 1;
+    }
+
+  finish_info_session (initial_node, 0);
+
+  return status;
+}
+
+static int
+help_from_list (ostrstream& output_buf, const help_list *list,
+		const char *string)
+{
+  char *name;
+  while ((name = list->name) != (char *) NULL)
+    {
+      if (strcmp (name, string) == 0)
+	{
+	  output_buf << "\n" << list->help << "\n";
+	  return 1;
+	}
+      list++;
+    }
+  return 0;
+}
+
 /*
  * Print cryptic yet witty messages.
  */
 tree_constant
 builtin_help (int argc, char **argv)
 {
   tree_constant retval;
 
-  ostrstream output_buf;
   if (argc == 1)
     {
-      char **symbols;
-      int count = 0;
-
-      symbols = names (operator_help (), count);
-      output_buf << "\n*** operators:\n\n";
-      if (symbols != (char **) NULL && count > 0)
-	list_in_columns (output_buf, symbols);
-      delete [] symbols;
-
-      symbols = names (keyword_help (), count);
-      output_buf << "\n*** reserved words:\n\n";
-      if (symbols != (char **) NULL && count > 0)
-	list_in_columns (output_buf, symbols);
-      delete [] symbols;
-
-      symbols = names (builtin_text_functions_help (), count);
-      output_buf
-	<< "\n*** text functions (these names are also reserved):\n\n";
-      if (symbols != (char **) NULL && count > 0)
-	list_in_columns (output_buf, symbols);
-      delete [] symbols;
-
-      symbols = names (builtin_mapper_functions_help (), count);
-      output_buf << "\n*** mapper functions:\n\n";
-      if (symbols != (char **) NULL && count > 0)
-	list_in_columns (output_buf, symbols);
-      delete [] symbols;
-
-      symbols = names (builtin_general_functions_help (), count);
-      output_buf << "\n*** general functions:\n\n";
-      if (symbols != (char **) NULL && count > 0)
-	list_in_columns (output_buf, symbols);
-      delete [] symbols;
-
-      symbols = names (builtin_variables_help (), count);
-      output_buf << "\n*** builtin variables:\n\n";
-      if (symbols != (char **) NULL && count > 0)
-	list_in_columns (output_buf, symbols);
-      delete [] symbols;
-
-// Also need to list variables and currently compiled functions from
-// the symbol table, if there are any.
-
-// Also need to search octave_path for script files.
-
-      char **path = pathstring_to_vector (user_pref.loadpath);
-
-      char **ptr = path;
-      if (ptr != (char **) NULL)
-	{
-	  while (*ptr != (char *) NULL)
-	    {
-	      int count;
-	      char **names = get_m_file_names (count, *ptr, 0);
-	      output_buf << "\n*** M-files in "
-		      << make_absolute (*ptr, the_current_working_directory)
-		      << ":\n\n";
-	      if (names != (char **) NULL && count > 0)
-		list_in_columns (output_buf, names);
-	      delete [] names;
-	      ptr++;
-	    }
-	}
+      simple_help ();
     }
   else
     {
+      ostrstream output_buf;
+
       char *m_file_name = (char *) NULL;
       symbol_record *sym_rec;
       help_list *op_help_list = operator_help ();
       help_list *kw_help_list = keyword_help ();
+
       for (int i = 1; i < argc; i++)
 	{
 	  if (argv[i] == (char *) NULL || argv[i][0] == '\0')
 	    continue;
 
-	  int j = 0;
-	  char *name;
-	  while ((name = op_help_list[j].name) != (char *) NULL)
-	    {
-	      if (strcmp (name, argv[i]) == 0)
-		{
-		 output_buf << "\n" << op_help_list[j].help << "\n";
-		  goto next;
-		}
-	      j++;
-	    }
+	  volatile sig_handler *old_sigint_handler = signal (SIGINT, SIG_IGN);
+
+	  int help_found = try_info (argv[i]);
+
+	  signal (SIGINT, old_sigint_handler);
 
-	  j = 0;
-	  while ((name = kw_help_list[j].name) != (char *) NULL)
-	    {
-	      if (strcmp (name, argv[i]) == 0)
-		{
-		  output_buf << "\n" << kw_help_list[j].help << "\n";
-		  goto next;
-		}
-	      j++;
-	    }
+	  if (help_found)
+	    continue;
+
+
+	  if (help_from_list (output_buf, op_help_list, argv[i]))
+	    continue;
+
+	  if (help_from_list (output_buf, kw_help_list, argv[i]))
+	    continue;
 
 	  sym_rec = curr_sym_tab->lookup (argv[i], 0, 0);
 	  if (sym_rec != (symbol_record *) NULL)
 	    {
 	      char *h = sym_rec->help ();
 	      if (h != (char *) NULL && *h != '\0')
 		{
 		  output_buf << "\n" << h << "\n";
-		  goto next;
+		  continue;
 		}
 	    }
 
 	  sym_rec = global_sym_tab->lookup (argv[i], 0, 0);
 	  if (sym_rec != (symbol_record *) NULL
 	      && ! symbol_out_of_date (sym_rec))
 	    {
 	      char *h = sym_rec->help ();
 	      if (h != (char *) NULL && *h != '\0')
 		{
 		  output_buf << "\n" << h << "\n";
-		  goto next;
+		  continue;
 		}
 	    }
 
 // Try harder to find M-files that might not be defined yet, or that
 // appear to be out of date.  Don\'t execute commands from the file if
 // it turns out to be a script file.
 
 	  m_file_name = m_file_in_path (argv[i]);
@@ -479,32 +569,29 @@ builtin_help (int argc, char **argv)
 	      if (sym_rec != (symbol_record *) NULL)
 		{
 		  tree_identifier tmp (sym_rec);
 		  tmp.parse_m_file (0);
 		  char *h = sym_rec->help ();
 		  if (h != (char *) NULL && *h != '\0')
 		    {
 		      output_buf << "\n" << h << "\n";
-		      goto next;
+		      continue;
 		    }
 		}
 	    }
 	  delete [] m_file_name;
 
 	  output_buf << "Sorry, `" << argv[i] << "' is not documented\n";
+	}
 
-	next:
-	  continue;
-	}
+      output_buf << ends;
+      maybe_page_output (output_buf);
     }
 
-  output_buf << ends;
-  maybe_page_output (output_buf);
-
   return retval;
 }
 
 /*
  * Display, save, or load history.
  */
 tree_constant
 builtin_history (int argc, char **argv)
@@ -574,17 +661,16 @@ load_variable (char *nm, int force, istr
 }
 
 /*
  * Read variables from an input stream.
  *
  * BUGS:
  *
  *  -- This function is not terribly robust.
- *  -- Symbols are only inserted into the current symbol table.
  */
 tree_constant
 builtin_load (int argc, char **argv)
 {
   tree_constant retval;
 
   argc--;
   argv++;
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -239,17 +239,17 @@ raw_mode (int on)
 	save_term = s;
 //	ospeed = s.c_cflag & CBAUD;
 //	erase_char = s.c_cc[VERASE];
 //	kill_char = s.c_cc[VKILL];
 
 // Set the modes to the way we want them.
 
 	s.c_lflag &= ~(ICANON|ECHO|ECHOE|ECHOK|ECHONL);
-	s.c_oflag |=  (OPOST|ONLCR|TAB3);
+	s.c_oflag |=  (OPOST|ONLCR);
 	s.c_oflag &= ~(OCRNL|ONOCR|ONLRET);
 	s.c_cc[VMIN] = 1;
 	s.c_cc[VTIME] = 0;
       }      
     else
       {
 // Restore saved modes.
 	s = save_term;
@@ -272,17 +272,17 @@ raw_mode (int on)
 	save_term = s;
 //	ospeed = s.c_cflag & CBAUD;
 //	erase_char = s.c_cc[VERASE];
 //	kill_char = s.c_cc[VKILL];
 
 // Set the modes to the way we want them.
 
 	s.c_lflag &= ~(ICANON|ECHO|ECHOE|ECHOK|ECHONL);
-	s.c_oflag |=  (OPOST|ONLCR|TAB3);
+	s.c_oflag |=  (OPOST|ONLCR);
 	s.c_oflag &= ~(OCRNL|ONOCR|ONLRET);
 	s.c_cc[VMIN] = 1;
 	s.c_cc[VTIME] = 0;
       }      
     else
       {
 // Restore saved modes.
 	s = save_term;
@@ -305,17 +305,17 @@ raw_mode (int on)
 	save_term = s;
 //	ospeed = s.sg_ospeed;
 //	erase_char = s.sg_erase;
 //	kill_char = s.sg_kill;
 
 // Set the modes to the way we want them.
 
 	s.sg_flags |= CBREAK;
-	s.sg_flags &= ~(ECHO|XTABS);
+	s.sg_flags &= ~(ECHO);
       } 
     else
       {
 // Restore saved modes.
 	s = save_term;
       }
     ioctl (tty_fd, TIOCSETN, &s);
   }
