# HG changeset patch
# User jwe
# Date 837192136 0
#      Fri Jul 12 17:22:16 1996 +0000
# Node ID bf8b1bffb58fc741d5de9fc46d9d40e6589e7ea7
# Parent  949ab8eba8bc1f9068fe5e9989ef8dca4fea2ab9
[project @ 1996-07-12 17:22:07 by jwe]

diff --git a/scripts/plot/__plr1__.m b/scripts/plot/__plr1__.m
--- a/scripts/plot/__plr1__.m
+++ b/scripts/plot/__plr1__.m
@@ -14,20 +14,20 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## Author: jwe
 
-function polar_int_1 (theta, fmt)
+function __plr1__ (theta, fmt)
 
   if (nargin != 2)
-    usage ("polar_int_1 (theta, fmt)");
+    usage ("__plr1__ (theta, fmt)");
   endif
 
   [nr, nc] = size (theta);
   if (nr == 1)
     theta = theta';
     tmp = nr;
     nr = nc;
     nc = tmp;
@@ -36,11 +36,11 @@ function polar_int_1 (theta, fmt)
   if (any (theta_i))
     rho = theta_i;
     theta = real (theta);
   else
     rho = theta;
     theta = (1:nr)';
   endif
 
-  polar_int_2 (theta, rho, fmt);
+  __plr2__ (theta, rho, fmt);
 
 endfunction
diff --git a/scripts/plot/__plr2__.m b/scripts/plot/__plr2__.m
--- a/scripts/plot/__plr2__.m
+++ b/scripts/plot/__plr2__.m
@@ -14,50 +14,50 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## Author: jwe
 
-function polar_int_2 (theta, rho, fmt)
+function __plr2__ (theta, rho, fmt)
 
   if (nargin != 3)
-    usage ("polar_int_2 (theta, rho, fmt)");
+    usage ("__plr2__ (theta, rho, fmt)");
   endif
 
   if (any (imag (theta)))
     theta = real (theta);
   endif
 
   if (any (imag (rho)))
     rho = real (rho);
   endif
 
   if (is_scalar (theta))
     if (is_scalar (rho))
       x = rho * cos (theta);
       y = rho * sin (theta);
-      plot_2_s_s (x, y, fmt);
+      __plt2ss__ (x, y, fmt);
     endif
   elseif (is_vector (theta))
     if (is_vector (rho))
       if (length (theta) != length (rho))
 	error ("polar: vector lengths must match");
       endif
       if (rows (rho) == 1)
 	rho = rho';
       endif
       if (rows (theta) == 1)
 	theta = theta';
       endif
       x = rho .* cos (theta);
       y = rho .* sin (theta);
-      plot_2_v_v (x, y, fmt);
+      __plt2vv__ (x, y, fmt);
     elseif (is_matrix (rho))
       [t_nr, t_nc] = size (theta);
       if (t_nr == 1)
 	theta = theta';
 	tmp = t_nr;
 	t_nr = t_nc;
 	t_nc = tmp;
       endif
@@ -68,17 +68,17 @@ function polar_int_2 (theta, rho, fmt)
 	r_nr = r_nc;
 	r_nc = tmp;
       endif
       if (t_nr != r_nr)
 	error ("polar: vector and matrix sizes must match");
       endif
       x = diag (cos (theta)) * rho;
       y = diag (sin (theta)) * rho;
-      plot_2_v_m (x, y, fmt);
+      __plt2vm__ (x, y, fmt);
     endif
   elseif (is_matrix (theta))
     if (is_vector (rho))
       [r_nr, r_nc] = size (rho);
       if (r_nr == 1)
 	rho = rho';
 	tmp = r_nr;
 	r_nr = r_nc;
@@ -92,20 +92,20 @@ function polar_int_2 (theta, rho, fmt)
 	t_nc = tmp;
       endif
       if (r_nr != t_nr)
 	error ("polar: vector and matrix sizes must match");
       endif
       diag_r = diag (r);
       x = diag_r * cos (theta);
       y = diag_r * sin (theta);
-      plot_2_m_v (x, y, fmt);
+      __plt2mv__ (x, y, fmt);
     elseif (is_matrix (rho))
       if (size (rho) != size (theta))
 	error ("polar: matrix dimensions must match");
       endif
       x = rho .* cos (theta);
       y = rho .* sin (theta);
-      plot_2_m_m (x, y, fmt);
+      __plt2mm__ (x, y, fmt);
     endif
   endif
 
 endfunction
diff --git a/scripts/plot/__plr__.m b/scripts/plot/__plr__.m
--- a/scripts/plot/__plr__.m
+++ b/scripts/plot/__plr__.m
@@ -14,17 +14,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## Author: jwe
 
-function polar_int (theta, rho, fmt)
+function __plr__ (theta, rho, fmt)
 
   if (nargin == 1)
     [nr, nc] = size (theta);
     if (nr == 1)
       theta = theta.';
       tmp = nr;
       nr = nc;
       nc = tmp;
@@ -45,32 +45,32 @@ function polar_int (theta, rho, fmt)
     endif
     if (any (imag (rho)))
       rho = real (rho);
     endif
     if (is_scalar (theta))
       if (is_scalar (rho))
         x = rho * cos (theta);
         y = rho * sin (theta);
-        plot_2_s_s (x, y, fmt);
+        __plt2ss__ (x, y, fmt);
       endif
     elseif (is_vector (theta))
       if (is_vector (rho))
         if (length (theta) != length (rho))
           error ("polar: vector lengths must match");
         endif
         if (rows (rho) == 1)
           rho = rho.';
         endif
         if (rows (theta) == 1)
           theta = theta.';
         endif
         x = rho .* cos (theta);
         y = rho .* sin (theta);
-        plot_2_v_v (x, y, fmt);
+        __plt2vv__ (x, y, fmt);
       elseif (is_matrix (rho))
         [t_nr, t_nc] = size (theta);
         if (t_nr == 1)
           theta = theta.';
           tmp = t_nr;
           t_nr = t_nc;
           t_nc = tmp;
         endif
@@ -81,17 +81,17 @@ function polar_int (theta, rho, fmt)
           r_nr = r_nc;
           r_nc = tmp;
         endif
         if (t_nr != r_nr)
           error ("polar: vector and matrix sizes must match");
         endif
         x = diag (cos (theta)) * rho;
         y = diag (sin (theta)) * rho;
-        plot_2_v_m (x, y, fmt);
+        __plt2vm__ (x, y, fmt);
       endif
     elseif (is_matrix (theta))
       if (is_vector (rho))
         [r_nr, r_nc] = size (rho);
         if (r_nr == 1)
           rho = rho.';
           tmp = r_nr;
           r_nr = r_nc;
@@ -105,23 +105,23 @@ function polar_int (theta, rho, fmt)
           t_nc = tmp;
         endif
         if (r_nr != t_nr)
           error ("polar: vector and matrix sizes must match");
         endif
         diag_r = diag (r);
         x = diag_r * cos (theta);
         y = diag_r * sin (theta);
-        plot_2_m_v (x, y, fmt);
+        __plt2mv__ (x, y, fmt);
       elseif (is_matrix (rho))
         if (size (rho) != size (theta))
           error ("polar: matrix dimensions must match");
         endif
         x = rho .* cos (theta);
         y = rho .* sin (theta);
-        plot_2_m_m (x, y, fmt);
+        __plt2mm__ (x, y, fmt);
       endif
     endif
   else
-    usage ("polar_int (x [, y])");
+    usage ("__plr__ (x [, y])");
   endif
 
 endfunction
diff --git a/scripts/plot/__plt1__.m b/scripts/plot/__plt1__.m
--- a/scripts/plot/__plt1__.m
+++ b/scripts/plot/__plt1__.m
@@ -14,28 +14,28 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## Author: jwe
 
-function plot_int_1 (x1, fmt)
+function __plt1__ (x1, fmt)
 
   if (nargin < 1 || nargin > 2)
-    usage ("plot_int_1 (x1, fmt)");
+    usage ("__plt1__ (x1, fmt)");
   endif
 
   if (nargin == 1)
     fmt = "";
   endif
 
   if (! isstr (fmt))
-    error ("plot_int_1: fmt must be a string");
+    error ("__plt1__: fmt must be a string");
   endif
 
   [nr, nc] = size (x1);
   if (nr == 1)
     x1 = x1.';
     tmp = nr;
     nr = nc;
     nc = tmp;
@@ -44,11 +44,11 @@ function plot_int_1 (x1, fmt)
   if (any (any (x1_i)))
     x2 = x1_i;
     x1 = real (x1);
   else
     x2 = x1;
     x1 = (1:nr)';
   endif
 
-  plot_int_2 (x1, x2, fmt);
+  __plt2__ (x1, x2, fmt);
 
 endfunction
diff --git a/scripts/plot/__plt2__.m b/scripts/plot/__plt2__.m
--- a/scripts/plot/__plt2__.m
+++ b/scripts/plot/__plt2__.m
@@ -14,47 +14,47 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## Author: jwe
 
-function plot_int_2 (x1, x2, fmt)
+function __plt2__ (x1, x2, fmt)
 
   if (nargin < 2 || nargin > 3)
-    usage ("plot_int_2 (x1, x2, fmt)");
+    usage ("__plt2__ (x1, x2, fmt)");
   endif
 
   if (nargin == 2)
     fmt = "";
   endif
 
   if (! isstr (fmt))
-    error ("plot_int_2: fmt must be a string");
+    error ("__plt2__: fmt must be a string");
   endif
 
   if (any (any (imag (x1))))
     x1 = real (x1);
   endif
   if (any (any (imag (x2))))
     x2 = real (x2);
   endif
   if (is_scalar (x1))
     if (is_scalar (x2))
-      plot_2_s_s (x1, x2, fmt);
+      __plt2ss__ (x1, x2, fmt);
     endif
   elseif (is_vector (x1))
     if (is_vector (x2))
-      plot_2_v_v (x1, x2, fmt);
+      __plt2vv__ (x1, x2, fmt);
     elseif (is_matrix (x2))
-      plot_2_v_m (x1, x2, fmt);
+      __plt2vm__ (x1, x2, fmt);
     endif
   elseif (is_matrix (x1))
     if (is_vector (x2))
-      plot_2_m_v (x1, x2, fmt);
+      __plt2mv__ (x1, x2, fmt);
     elseif (is_matrix (x2))
-      plot_2_m_m (x1, x2, fmt);
+      __plt2mm__ (x1, x2, fmt);
     endif
   endif
 
 endfunction
diff --git a/scripts/plot/__plt2mm__.m b/scripts/plot/__plt2mm__.m
--- a/scripts/plot/__plt2mm__.m
+++ b/scripts/plot/__plt2mm__.m
@@ -14,21 +14,21 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## Author: jwe
 
-function plot_2_m_m (x, y, fmt)
+function __plt2mm__ (x, y, fmt)
 
   if (nargin < 2 || nargin > 3)
-    msg = sprintf ("plot_2_m_m (x, y)\n");
-    msg = sprintf ("%s              plot_2_m_m (x, y, fmt)", msg);
+    msg = sprintf ("__plt2mm__ (x, y)\n");
+    msg = sprintf ("%s              __plt2mm__ (x, y, fmt)", msg);
     usage (msg);
   elseif (nargin == 2)
     fmt = "";
   endif
 
   [x_nr, x_nc] = size (x);
   [y_nr, y_nc] = size (y);
 
@@ -36,15 +36,15 @@ function plot_2_m_m (x, y, fmt)
     if (x_nc > 0)
       tmp = [x, y];
       cmd = sprintf ("gplot tmp(:,%d:%d:%d) %s", 1, x_nc, x_nc+1, fmt);
       for i = 2:x_nc
         cmd = sprintf ("%s, tmp(:,%d:%d:%d) %s", cmd, i, x_nc, x_nc+i, fmt);
       endfor
       eval (cmd);
     else
-      error ("plot_2_m_m: arguments must be a matrices");
+      error ("__plt2mm__: arguments must be a matrices");
     endif
   else
-    error ("plot_2_m_m: matrix dimensions must match");
+    error ("__plt2mm__: matrix dimensions must match");
   endif
 
 endfunction
diff --git a/scripts/plot/__plt2mv__.m b/scripts/plot/__plt2mv__.m
--- a/scripts/plot/__plt2mv__.m
+++ b/scripts/plot/__plt2mv__.m
@@ -14,21 +14,21 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## Author: jwe
 
-function plot_2_m_v (x, y, fmt)
+function __plt2mv__ (x, y, fmt)
 
   if (nargin < 2 || nargin > 3)
-    msg = sprintf ("plot_2_m_v (x, y)\n");
-    msg = sprintf ("%s              plot_2_m_v (x, y, fmt)", msg);
+    msg = sprintf ("__plt2mv__ (x, y)\n");
+    msg = sprintf ("%s              __plt2mv__ (x, y, fmt)", msg);
     usage (msg);
   elseif (nargin == 2)
     fmt = "";
   endif
 
   [x_nr, x_nc] = size (x);
   [y_nr, y_nc] = size (y);
 
@@ -42,23 +42,23 @@ function plot_2_m_v (x, y, fmt)
   if (x_nr == y_nr)
     1;
   elseif (x_nc == y_nr)
     x = x';
     tmp = x_nr;
     x_nr = x_nc;
     x_nc = tmp;
   else
-    error ("plot_2_m_v: matrix dimensions must match");
+    error ("__plt2mv__: matrix dimensions must match");
   endif
 
   if (x_nc > 0)
     tmp = [x, y];
     cmd = sprintf ("gplot tmp(:,%d:%d:%d) %s", 1, x_nc, x_nc+1, fmt);
     for i = 2:x_nc
       cmd = sprintf ("%s, tmp(:,%d:%d:%d) %s", cmd, i, x_nc-i+1, x_nc+1, fmt);
     endfor
     eval (cmd);
   else
-    error ("plot_2_m_v: arguments must be a matrices");
+    error ("__plt2mv__: arguments must be a matrices");
   endif
 
 endfunction
diff --git a/scripts/plot/__plt2ss__.m b/scripts/plot/__plt2ss__.m
--- a/scripts/plot/__plt2ss__.m
+++ b/scripts/plot/__plt2ss__.m
@@ -14,30 +14,30 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## Author: jwe
 
-function plot_2_s_s (x, y, fmt)
+function __plt2ss__ (x, y, fmt)
 
   if (nargin < 2 || nargin > 3)
-    msg = sprintf ("plot_2_s_s (x, y)");
-    msg = sprintf ("%s              plot_2_s_s (x, y, fmt)", msg);
+    msg = sprintf ("__plt2ss__ (x, y)");
+    msg = sprintf ("%s              __plt2ss__ (x, y, fmt)", msg);
     usage (msg);
   elseif (nargin == 2)
     fmt = "";
   endif
 
   [x_nr, x_nc] = size (x);
   [y_nr, y_nc] = size (y);
 
   if (x_nr == 1 && x_nr == y_nr && x_nc == 1 && x_nc == y_nc)
     tmp = [x, y];
     cmd = sprintf ("gplot tmp %s", fmt);
     eval (cmd);
   else
-    error ("plot_2_s_s: arguments must be scalars");
+    error ("__plt2ss__: arguments must be scalars");
   endif
 
 endfunction
diff --git a/scripts/plot/__plt2vm__.m b/scripts/plot/__plt2vm__.m
--- a/scripts/plot/__plt2vm__.m
+++ b/scripts/plot/__plt2vm__.m
@@ -14,21 +14,21 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## Author: jwe
 
-function plot_2_v_m (x, y, fmt)
+function __plt2vm__ (x, y, fmt)
 
   if (nargin < 2 || nargin > 3)
-    msg = sprintf ("plot_2_v_m (x, y)\n");
-    msg = sprintf ("%s              plot_2_v_m (x, y, fmt)", msg);
+    msg = sprintf ("__plt2vm__ (x, y)\n");
+    msg = sprintf ("%s              __plt2vm__ (x, y, fmt)", msg);
     usage (msg);
   elseif (nargin == 2)
     fmt = "";
   endif
 
   [x_nr, x_nc] = size (x);
   [y_nr, y_nc] = size (y);
 
@@ -42,23 +42,23 @@ function plot_2_v_m (x, y, fmt)
   if (x_nr == y_nr)
     1;
   elseif (x_nr == y_nc)
     y = y';
     tmp = y_nr;
     y_nr = y_nc;
     y_nc = tmp;
   else
-    error ("plot_2_v_m: matrix dimensions must match");
+    error ("__plt2vm__: matrix dimensions must match");
   endif
 
   if (y_nc > 0)
     tmp = [x, y];
     cmd = sprintf ("gplot tmp(:,%d:%d:%d) %s", 1, x_nc, x_nc+1, fmt);
     for i = 2:y_nc
       cmd = sprintf ("%s, tmp(:,%d:%d:%d) %s", cmd, 1, i, i+1, fmt);
     endfor
     eval (cmd);
   else
-    error ("plot_2_v_m: arguments must be a matrices");
+    error ("__plt2vm__: arguments must be a matrices");
   endif
 
 endfunction
diff --git a/scripts/plot/__plt2vv__.m b/scripts/plot/__plt2vv__.m
--- a/scripts/plot/__plt2vv__.m
+++ b/scripts/plot/__plt2vv__.m
@@ -14,21 +14,21 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## Author: jwe
 
-function plot_2_v_v (x, y, fmt)
+function __plt2vv__ (x, y, fmt)
 
   if (nargin < 2 || nargin > 3)
-    msg = sprintf ("plot_2_v_v (x, y)\n");
-    msg = sprintf ("%s              plot_2_v_v (x, y, fmt)", msg);
+    msg = sprintf ("__plt2vv__ (x, y)\n");
+    msg = sprintf ("%s              __plt2vv__ (x, y, fmt)", msg);
     usage (msg);
   elseif (nargin == 2)
     fmt = "";
   endif
 
   [x_nr, x_nc] = size (x);
   [y_nr, y_nc] = size (y);
 
@@ -42,16 +42,16 @@ function plot_2_v_v (x, y, fmt)
   if (y_nr == 1)
     y = y';
     tmp = y_nr;
     y_nr = y_nc;
     y_nc = tmp;
   endif
 
   if (x_nr != y_nr)
-    error ("plot_2_v_v: vector lengths must match");
+    error ("__plt2vv__: vector lengths must match");
   endif
 
   tmp = [x, y];
   cmd = sprintf ("gplot tmp %s", fmt);
   eval (cmd);
 
 endfunction
diff --git a/scripts/plot/__plt__.m b/scripts/plot/__plt__.m
--- a/scripts/plot/__plt__.m
+++ b/scripts/plot/__plt__.m
@@ -14,21 +14,21 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## Author: jwe
 
-function plot_int (caller, ...)
+function __plt__ (caller, ...)
 
   if (nargin == 2)
 
-    plot_int_1 (va_arg (), "");
+    __plt1__ (va_arg (), "");
 
   elseif (nargin > 2)
 
     first_plot = 1;
     hold_state = ishold;
 
     unwind_protect
 
@@ -43,28 +43,28 @@ function plot_int (caller, ...)
 
 	fmt = "";
 	new = va_arg ();
 
 	if (isstr (new))
 	  if (! x_set)
 	    error ("plot: no data to plot");
 	  endif
-	  fmt = plot_opt (caller, new);
+	  fmt = __pltopt__ (caller, new);
 	  if (! y_set)
-	    plot_int_1 (x, fmt);
+	    __plt1__ (x, fmt);
 	  else
-	    plot_int_2 (x, y, fmt);
+	    __plt2__ (x, y, fmt);
 	  endif
 	  hold on;
 	  x_set = 0;
 	  y_set = 0;
 	elseif (x_set)
 	  if (y_set)
-	    plot_int_2 (x, y, fmt);
+	    __plt2__ (x, y, fmt);
 	    hold on;
 	    x = new;
 	    y_set = 0;
 	  else
 	    y = new;
 	    y_set = 1;          
 	  endif
 	else
@@ -73,19 +73,19 @@ function plot_int (caller, ...)
 	endif
 
       endwhile
 
       ## Handle last plot.
 
       if  (x_set)
 	if (y_set)
-	  plot_int_2 (x, y, fmt);
+	  __plt2__ (x, y, fmt);
 	else
-	  plot_int_1 (x, fmt);
+	  __plt1__ (x, fmt);
 	endif
       endif
 
     unwind_protect_cleanup
 
       if (! hold_state)
         hold off;
       endif
diff --git a/scripts/plot/__pltopt__.m b/scripts/plot/__pltopt__.m
--- a/scripts/plot/__pltopt__.m
+++ b/scripts/plot/__pltopt__.m
@@ -14,17 +14,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## Originally written by Rick Niles <niles@axp745.gsfc.nasa.gov>.
 
-## usage: fmt = plot_opt (caller, opt)
+## usage: fmt = __pltopt__ (caller, opt)
 ##
 ## Decode plot option strings.
 ##
 ## If OPT is a valid option string, return a string of the form "w l 2"
 ## ("with lines 2").  Uses abbreviations for the options to avoid
 ## overrunning gnuplot's command line buffer unnecessarily.
 ##
 ## OPT can currently be some combination of the following:
@@ -57,17 +57,17 @@
 ##       2       green               "+"
 ##       3       blue                "o"
 ##       4       magenta             "x"
 ##       5       cyan                house
 ##       6       brown               there exists
 
 ## Author: jwe
 
-function fmt = plot_opt (caller, opt)
+function fmt = __pltopt__ (caller, opt)
 
   set_color = 0;
   set_symbol = 0;
   set_lines = 0;
   set_dots = 0;
   set_points = 0;
   set_impulses = 0;
   set_steps = 0;
@@ -82,21 +82,21 @@ function fmt = plot_opt (caller, opt)
   BOXES = "boxes";
   POINTS = "p";
   DOTS = "d";
   IMPULSES = "i";
   STEPS = "s";
   ERRORBARS = "e";
 
   if (nargin != 2)
-    usage ("plot_opt (opt)");
+    usage ("__pltopt__ (opt)");
   endif
 
   if (! isstr (opt))
-    error ("plot_opt: argument must be a string");
+    error ("__pltopt__: argument must be a string");
   endif
 
   while (more_opts)
 
     ## First get next char.
 
     if (max (size (opt)) > 1)
       [char, opt] = sscanf (opt, "%c %s", "C");
diff --git a/scripts/plot/loglog.m b/scripts/plot/loglog.m
--- a/scripts/plot/loglog.m
+++ b/scripts/plot/loglog.m
@@ -32,11 +32,11 @@
 ## Author: jwe
 
 function loglog (...)
 
   set logscale x;
   set logscale y;
   set nopolar;
 
-  plot_int ("loglog", all_va_args);
+  __plt__ ("loglog", all_va_args);
 
 endfunction
diff --git a/scripts/plot/mplot.m b/scripts/plot/mplot.m
--- a/scripts/plot/mplot.m
+++ b/scripts/plot/mplot.m
@@ -56,17 +56,17 @@ function mplot (...)
     warning ("turning off automatic replot for multiplot mode");
     multiplot_save_auto_replot = automatic_replot;
     automatic_replot = 0;
   endif
 
   set nologscale;
   set nopolar;
 
-  plot_int ("plot", all_va_args);
+  __plt__ ("plot", all_va_args);
 
   ## update the plot position
 
   if (multiplot_mode)
 
     if (multiplot_xi < multiplot_xn)
       multiplot_xi++;
     else
diff --git a/scripts/plot/plot.m b/scripts/plot/plot.m
--- a/scripts/plot/plot.m
+++ b/scripts/plot/plot.m
@@ -38,36 +38,36 @@
 ## arguments to make the number of rows match.
 ##
 ## If both arguments are scalars, a single point is plotted.
 ##
 ## If only one argument is given, it is taken as the set of y
 ## coordinates and the x coordinates are taken to be the indices of the
 ## elements, starting with 1.
 ##
-## To see possible options for FMT please see plot_opt.
+## To see possible options for FMT please see __pltopt__.
 ##
 ## Examples:
 ##
 ##   plot (x, y, "@12", x, y2, x, y3, "4", x, y4, "+")
 ##
 ##     y will be plotted with points of type 2 ("+") and color 1 (red).
 ##     y2 will be plotted with lines.
 ##     y3 will be plotted with lines of color 4.
 ##     y4 will be plotted with points which are "+"s.
 ##
 ##   plot (b, "*")
 ##
 ##     b will be plotted with points of type "*".
 ##
-## See also: semilogx, semilogy, loglog, polar, mesh, contour, plot_opt
+## See also: semilogx, semilogy, loglog, polar, mesh, contour, __pltopt__
 ##           bar, stairs, gplot, gsplot, replot, xlabel, ylabel, title 
 
 ## Author: jwe
 
 function plot (...)
 
   set nologscale;
   set nopolar;
 
-  plot_int ("plot", all_va_args);
+  __plt__ ("plot", all_va_args);
 
 endfunction
diff --git a/scripts/plot/polar.m b/scripts/plot/polar.m
--- a/scripts/plot/polar.m
+++ b/scripts/plot/polar.m
@@ -30,29 +30,29 @@
 
 function polar (x1, x2, fmt)
 
   set nologscale;
   set nopolar;
 
   if (nargin == 3)
     if (isstr (fmt))
-      fmt = plot_opt ("polar", fmt);
+      fmt = __pltopt__ ("polar", fmt);
     else
       error ("polar: third argument must be a string");
     endif
-    polar_int_2 (x1, x2, fmt);
+    __plr2__ (x1, x2, fmt);
   elseif (nargin == 2)
     if (isstr (x2))
-      fmt = plot_opt ("polar", x2);
-      polar_int_1 (x1, fmt);
+      fmt = __pltopt__ ("polar", x2);
+      __plr1__ (x1, fmt);
     else
       fmt = "";
-      polar_int_2 (x1, x2, fmt);
+      __plr2__ (x1, x2, fmt);
     endif
   elseif (nargin == 1)
     fmt = "";
-    polar_int_1 (x1, fmt);
+    __plr1__ (x1, fmt);
   else
     usage ("polar (theta, rho, fmt)");
   endif
 
 endfunction
diff --git a/scripts/plot/semilogx.m b/scripts/plot/semilogx.m
--- a/scripts/plot/semilogx.m
+++ b/scripts/plot/semilogx.m
@@ -32,11 +32,11 @@
 ## Author: jwe
 
 function semilogx (...)
 
   set logscale x;
   set nologscale y;
   set nopolar;
 
-  plot_int ("semilogx", all_va_args);
+  __plt__ ("semilogx", all_va_args);
 
 endfunction
diff --git a/scripts/plot/semilogy.m b/scripts/plot/semilogy.m
--- a/scripts/plot/semilogy.m
+++ b/scripts/plot/semilogy.m
@@ -32,11 +32,11 @@
 ## Author: jwe
 
 function semilogy (...)
 
   set nologscale x;
   set logscale y;
   set nopolar;
 
-  plot_int ("semilogy", all_va_args);
+  __plt__ ("semilogy", all_va_args);
 
 endfunction
