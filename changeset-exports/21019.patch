# HG changeset patch
# User Rik <rik@octave.org>
# Date 1451510203 28800
#      Wed Dec 30 13:16:43 2015 -0800
# Node ID 8a65589d1a4207e68e09acfa8ce6f552bf6320e6
# Parent  cb1eb7d9a89fffb53837c96c7e504db153081c56
maint: Dereference current_liboctave_error_handler before calling.
For conformity with the rest of liboctave,
call (*current_liboctave_error_handler) (...).

* Array-util.cc, idx-vector.cc, cmd-edit.cc,
singleton-cleanup.cc:
Dereference current_liboctave_error_handler before calling.

diff --git a/liboctave/array/Array-util.cc b/liboctave/array/Array-util.cc
--- a/liboctave/array/Array-util.cc
+++ b/liboctave/array/Array-util.cc
@@ -550,17 +550,18 @@ sub2ind (const dim_vector& dv, const Arr
             {
               idx_vector idx = idxa(i);
               octave_idx_type n = dvx(i);
 
               all_ranges = all_ranges && idx.is_range ();
               if (clen < 0)
                 clen = idx.length (n);
               else if (clen != idx.length (n))
-                current_liboctave_error_handler ("sub2ind: lengths of indices must match");
+                (*current_liboctave_error_handler)
+                  ("sub2ind: lengths of indices must match");
 
               if (idx.extent (n) > n)
                   gripe_index_out_of_range (len, i+1, idx.extent (n), n);
             }
           catch (index_exception& e)
             {
               e.set_pos_if_unset (len, i+1);
               e.set_var ();
@@ -608,31 +609,31 @@ sub2ind (const dim_vector& dv, const Arr
               else
                 idxa(i).copy_data (idx_vec);
             }
 
           retval = idx_vector (idx);
         }
     }
   else
-    current_liboctave_error_handler ("sub2ind: needs at least 2 indices");
+    (*current_liboctave_error_handler) ("sub2ind: needs at least 2 indices");
 
   return retval;
 }
 
 Array<idx_vector>
 ind2sub (const dim_vector& dv, const idx_vector& idx)
 {
   octave_idx_type len = idx.length (0);
   octave_idx_type n = dv.length ();
   Array<idx_vector> retval (dim_vector (n, 1));
   octave_idx_type numel = dv.numel ();
 
   if (idx.extent (numel) > numel)
-    current_liboctave_error_handler ("ind2sub: index out of range");
+    (*current_liboctave_error_handler) ("ind2sub: index out of range");
   else
     {
       if (idx.is_scalar ())
         {
           octave_idx_type k = idx(0);
           for (octave_idx_type j = 0; j < n; j++)
             {
               retval(j) = k % dv(j);
diff --git a/liboctave/array/idx-vector.cc b/liboctave/array/idx-vector.cc
--- a/liboctave/array/idx-vector.cc
+++ b/liboctave/array/idx-vector.cc
@@ -1069,17 +1069,17 @@ idx_vector::raw (void)
 void
 idx_vector::copy_data (octave_idx_type *data) const
 {
   octave_idx_type len = rep->length (0);
 
   switch (rep->idx_class ())
     {
     case class_colon:
-      current_liboctave_error_handler ("colon not allowed");
+      (*current_liboctave_error_handler) ("colon not allowed");
       break;
 
     case class_range:
       {
         idx_range_rep * r = dynamic_cast<idx_range_rep *> (rep);
         octave_idx_type start = r->get_start ();
         octave_idx_type step = r->get_step ();
         octave_idx_type i, j;
diff --git a/liboctave/util/cmd-edit.cc b/liboctave/util/cmd-edit.cc
--- a/liboctave/util/cmd-edit.cc
+++ b/liboctave/util/cmd-edit.cc
@@ -961,17 +961,17 @@ command_editor::instance_ok (void)
       make_command_editor ();
 
       if (instance)
         singleton_cleanup_list::add (cleanup_instance);
     }
 
   if (! instance)
     {
-      current_liboctave_error_handler
+      (*current_liboctave_error_handler)
         ("unable to create command history object!");
 
       retval = false;
     }
 
   return retval;
 }
 
@@ -1835,16 +1835,16 @@ command_editor::read_octal (const std::s
     result = -1;
 
   return result;
 }
 
 void
 command_editor::error (int err_num)
 {
-  current_liboctave_error_handler ("%s", gnulib::strerror (err_num));
+  (*current_liboctave_error_handler) ("%s", gnulib::strerror (err_num));
 }
 
 void
 command_editor::error (const std::string& s)
 {
-  current_liboctave_error_handler ("%s", s.c_str ());
+  (*current_liboctave_error_handler) ("%s", s.c_str ());
 }
diff --git a/liboctave/util/singleton-cleanup.cc b/liboctave/util/singleton-cleanup.cc
--- a/liboctave/util/singleton-cleanup.cc
+++ b/liboctave/util/singleton-cleanup.cc
@@ -45,16 +45,16 @@ singleton_cleanup_list::instance_ok (voi
 {
   bool retval = true;
 
   if (! instance)
     instance = new singleton_cleanup_list ();
 
   if (! instance)
     {
-      current_liboctave_error_handler
+      (*current_liboctave_error_handler)
         ("unable to create singleton_cleanup_list object!");
 
       retval = false;
     }
 
   return retval;
 }
