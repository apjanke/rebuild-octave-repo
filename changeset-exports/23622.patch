# HG changeset patch
# User Rik <rik@octave.org>
# Date 1497653489 25200
#      Fri Jun 16 15:51:29 2017 -0700
# Node ID 0abe8d85eccecda7b94742dab1725f2aa69092fd
# Parent  cf24eb9758ace9f19deec1fec71c4b35a442ea92
Use isnan, isinf, isfinite, signbit functions from C++ std lib.
These functions are guaranteed to be part of the std lib since
C++11 which is now a requirement of Octave.

* configure.ac: Remove OCTAVE_CHECK_FUNC_CMATH checks for isnan, isinf,
isfinite, signbit.  Remove AC_CHECK_FUNCS tests for finite, isnan, isinf,
signbit, _finite, _isnan.  Remove AC_CHECK_DECLS test for signbit.

* acinclude.m4 (OCTAVE_CHECK_FUNC_CMATH) : Remove unused macro.

* lo-mappers.cc (isnan, isfinite, isinf): Change functions to delegate to
std::FUNCTION of the same name rather than possibly calling lo_ieee_FUNCTION.

* lo-ieee.h: Add #include <cmath>.
* lo-ieee.h (__lo_ieee_isnan, __lo_ieee_finite, __lo_ieee_isinf,
__lo_ieee_signbit, __lo_ieee_float_isnan, __lo_ieee_float_finite,
__lo_ieee_float_isinf, __lo_ieee_float_signbit):
Change functions to delegate to std::FUNCTION of the same name.

* lo-ieee.cc (__lo_ieee_isnan, __lo_ieee_finite, __lo_ieee_isinf,
__lo_ieee_signbit, __lo_ieee_float_isnan, __lo_ieee_float_finite,
__lo_ieee_float_isinf, __lo_ieee_float_signbit):
Delete functions.

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -2438,36 +2438,16 @@ double round (double);
 double tgamma (double);
 #endif
 #if defined (__cplusplus)
 }
 #endif
 ])
 AC_LANG_POP(C++)
 
-## Look in <cmath> for the IEEE functions isnan, isinf, isfinite that we need.
-
-OCTAVE_CHECK_FUNC_CMATH(isnan)
-OCTAVE_CHECK_FUNC_CMATH(isinf)
-OCTAVE_CHECK_FUNC_CMATH(isfinite)
-OCTAVE_CHECK_FUNC_CMATH(signbit)
-
-## Check for Inf and NaN functions
-
-case $canonical_host_type in
-  m68k-hp-hpux*)
-    ## I am told that Inf and NaN don't work on m68k HP sytems.
-  ;;
-  *)
-    AC_CHECK_FUNCS([finite isnan isinf signbit])
-    AC_CHECK_FUNCS([_finite _isnan])
-    AC_CHECK_DECLS([signbit], , , [#include <math.h>])
-  ;;
-esac
-
 ## Look in <complex> for C++ variants of math functions that we need.
 
 OCTAVE_CHECK_FUNC_COMPLEX(acos)
 OCTAVE_CHECK_FUNC_COMPLEX(acosh)
 OCTAVE_CHECK_FUNC_COMPLEX(asin)
 OCTAVE_CHECK_FUNC_COMPLEX(asinh)
 OCTAVE_CHECK_FUNC_COMPLEX(atan)
 OCTAVE_CHECK_FUNC_COMPLEX(atanh)
diff --git a/liboctave/numeric/lo-mappers.cc b/liboctave/numeric/lo-mappers.cc
--- a/liboctave/numeric/lo-mappers.cc
+++ b/liboctave/numeric/lo-mappers.cc
@@ -329,75 +329,24 @@ namespace octave
       return octave_frexp_wrapper (x, expptr);
     }
 
     float frexp (float x, int *expptr)
     {
       return octave_frexpf_wrapper (x, expptr);
     }
 
-    bool
-    isnan (double x)
-    {
-#if defined (HAVE_CMATH_ISNAN)
-      return std::isnan (x);
-#else
-      return lo_ieee_isnan (x);
-#endif
-    }
-
-    bool
-    isnan (float x)
-    {
-#if defined (HAVE_CMATH_ISNANF)
-      return std::isnan (x);
-#else
-      return lo_ieee_isnan (x);
-#endif
-    }
-
-    bool
-    isfinite (double x)
-    {
-#if defined (HAVE_CMATH_ISFINITE)
-      return std::isfinite (x);
-#else
-      return lo_ieee_finite (x);
-#endif
-    }
+    bool isnan (double x) { return std::isnan (x); }
+    bool isnan (float x) { return std::isnan (x); }
 
-    bool
-    isfinite (float x)
-    {
-#if defined (HAVE_CMATH_ISFINITEF)
-      return std::isfinite (x);
-#else
-      return lo_ieee_finite (x);
-#endif
-    }
+    bool isfinite (double x) { return std::isfinite (x); }
+    bool isfinite (float x) { return std::isfinite (x); }
 
-    bool
-    isinf (double x)
-    {
-#if defined (HAVE_CMATH_ISINF)
-      return std::isinf (x);
-#else
-      return lo_ieee_isinf (x);
-#endif
-    }
-
-    bool
-    isinf (float x)
-    {
-#if defined (HAVE_CMATH_ISINFF)
-      return std::isinf (x);
-#else
-      return lo_ieee_isinf (x);
-#endif
-    }
+    bool isinf (double x) { return std::isinf (x); }
+    bool isinf (float x) { return std::isinf (x); }
 
     // Sometimes you need a large integer, but not always.
 
     octave_idx_type
     nint_big (double x)
     {
       if (x > std::numeric_limits<octave_idx_type>::max ())
         return std::numeric_limits<octave_idx_type>::max ();
diff --git a/liboctave/util/lo-ieee.cc b/liboctave/util/lo-ieee.cc
--- a/liboctave/util/lo-ieee.cc
+++ b/liboctave/util/lo-ieee.cc
@@ -41,49 +41,16 @@ static int lo_ieee_hw;
 static int lo_ieee_lw;
 
 #include "lo-error.h"
 #include "lo-ieee.h"
 #include "lo-math.h"
 #include "mach-info.h"
 
 int
-__lo_ieee_isnan (double x)
-{
-#if defined (HAVE_CMATH_ISNAN)
-  return std::isnan (x);
-#else
-  // Gnulib provides.
-  return isnan (x);
-#endif
-}
-
-int
-__lo_ieee_finite (double x)
-{
-#if defined (HAVE_CMATH_ISFINITE)
-  return std::isfinite (x);
-#else
-  // Gnulib provides.
-  return finite (x);
-#endif
-}
-
-int
-__lo_ieee_isinf (double x)
-{
-#if defined (HAVE_CMATH_ISINF)
-  return std::isinf (x);
-#else
-  // Gnulib provides.
-  return isinf (x);
-#endif
-}
-
-int
 __lo_ieee_is_NA (double x)
 {
   lo_ieee_double t;
   t.value = x;
   return (__lo_ieee_isnan (x) && t.word[lo_ieee_hw] == LO_IEEE_NA_HW
           && t.word[lo_ieee_lw] == LO_IEEE_NA_LW) ? 1 : 0;
 }
 
@@ -125,60 +92,16 @@ double
 lo_ieee_nan_value (void)
 {
   octave_ieee_init ();
 
   return lo_nan;
 }
 
 int
-__lo_ieee_signbit (double x)
-{
-#if defined (HAVE_CMATH_SIGNBIT)
-  return std::signbit (x);
-#else
-  // Gnulib provides.
-  return signbit (x);
-#endif
-}
-
-int
-__lo_ieee_float_isnan (float x)
-{
-#if defined (HAVE_CMATH_ISNAN)
-  return std::isnan (x);
-#else
-  // Gnulib provides.
-  return isnan (x);
-#endif
-}
-
-int
-__lo_ieee_float_finite (float x)
-{
-#if defined (HAVE_CMATH_ISFINITE)
-  return std::isfinite (x) != 0 && ! __lo_ieee_float_isnan (x);
-#else
-  // Gnulib provides.
-  return finite (x);
-#endif
-}
-
-int
-__lo_ieee_float_isinf (float x)
-{
-#if defined (HAVE_CMATH_ISINF)
-  return std::isinf (x);
-#else
-  // Gnulib provides.
-  return isinf (x);
-#endif
-}
-
-int
 __lo_ieee_float_is_NA (float x)
 {
   lo_ieee_float t;
   t.value = x;
   return (__lo_ieee_float_isnan (x) && (t.word == LO_IEEE_NA_FLOAT)) ? 1 : 0;
 }
 
 float
@@ -200,27 +123,16 @@ lo_ieee_float_na_value (void)
 float
 lo_ieee_float_nan_value (void)
 {
   octave_ieee_init ();
 
   return lo_float_nan;
 }
 
-int
-__lo_ieee_float_signbit (float x)
-{
-#if defined (HAVE_CMATH_SIGNBIT)
-  return std::signbit (x);
-#else
-  // Gnulib provides.
-  return signbit (x);
-#endif
-}
-
 void
 octave_ieee_init (void)
 {
   bool initialized = false;
 
   if (! initialized)
     {
       octave::mach_info::float_format ff = octave::mach_info::native_float_format ();
diff --git a/liboctave/util/lo-ieee.h b/liboctave/util/lo-ieee.h
--- a/liboctave/util/lo-ieee.h
+++ b/liboctave/util/lo-ieee.h
@@ -18,16 +18,18 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, see
 <http://www.gnu.org/licenses/>.
 
 */
 
 #if ! defined (octave_lo_ieee_h)
 #define octave_lo_ieee_h 1
 
+#include <cmath>
+
 #include "octave-config.h"
 
 #if defined (__cplusplus)
 extern "C" {
 #endif
 
 /*  Octave's idea of infinity.  */
 #define octave_Inf (lo_ieee_inf_value ())
@@ -65,41 +67,41 @@ typedef union
 #define LO_IEEE_NA_HW_OLD 0x7ff00000
 #define LO_IEEE_NA_LW_OLD 1954
 #define LO_IEEE_NA_HW 0x7FF840F4
 #define LO_IEEE_NA_LW 0x40000000
 #define LO_IEEE_NA_FLOAT   0x7FC207A2
 
 extern OCTAVE_API void octave_ieee_init (void);
 
-extern OCTAVE_API int __lo_ieee_isnan (double x);
-extern OCTAVE_API int __lo_ieee_finite (double x);
-extern OCTAVE_API int __lo_ieee_isinf (double x);
+inline int __lo_ieee_isnan (double x) { return std::isnan (x); }
+inline int __lo_ieee_finite (double x) { return std::isfinite (x); }
+inline int __lo_ieee_isinf (double x) { return std::isinf (x); }
 
 extern OCTAVE_API int __lo_ieee_is_NA (double);
 extern OCTAVE_API int __lo_ieee_is_old_NA (double);
 extern OCTAVE_API double __lo_ieee_replace_old_NA (double);
 
 extern OCTAVE_API double lo_ieee_inf_value (void);
 extern OCTAVE_API double lo_ieee_na_value (void);
 extern OCTAVE_API double lo_ieee_nan_value (void);
 
-extern OCTAVE_API int __lo_ieee_signbit (double);
+inline int __lo_ieee_signbit (double x) { return std::signbit (x); }
 
-extern OCTAVE_API int __lo_ieee_float_isnan (float x);
-extern OCTAVE_API int __lo_ieee_float_finite (float x);
-extern OCTAVE_API int __lo_ieee_float_isinf (float x);
+inline int __lo_ieee_float_isnan (float x) { return std::isnan (x); }
+inline int __lo_ieee_float_finite (float x) { return std::isfinite (x); }
+inline int __lo_ieee_float_isinf (float x) { return std::isinf (x); }
 
 extern OCTAVE_API int __lo_ieee_float_is_NA (float);
 
 extern OCTAVE_API float lo_ieee_float_inf_value (void);
 extern OCTAVE_API float lo_ieee_float_na_value (void);
 extern OCTAVE_API float lo_ieee_float_nan_value (void);
 
-extern OCTAVE_API int __lo_ieee_float_signbit (float);
+inline int __lo_ieee_float_signbit (float x) { return std::signbit (x); }
 
 #if defined (__cplusplus)
 }
 #endif
 
 #define lo_ieee_isnan(x)                                \
   (sizeof (x) == sizeof (float)                         \
    ? __lo_ieee_float_isnan (x) : __lo_ieee_isnan (x))
diff --git a/m4/acinclude.m4 b/m4/acinclude.m4
--- a/m4/acinclude.m4
+++ b/m4/acinclude.m4
@@ -264,66 +264,16 @@ AC_DEFUN([OCTAVE_CHECK_FFTW_THREADS], [
     AC_DEFINE([HAVE_]m4_toupper([$1])[_THREADS], 1,
       [Define to 1 if ]m4_toupper([$1])[ has multi-threading support.])
   fi
   CPPFLAGS="$ac_octave_save_CPPFLAGS"
   LDFLAGS="$ac_octave_save_LDFLAGS"
   LIBS="$ac_octave_save_LIBS"
 ])
 dnl
-dnl Check whether a math mapper function is available in <cmath>.
-dnl Will define HAVE_CMATH_FUNC if there is a double variant and
-dnl HAVE_CMATH_FUNCF if there is a float variant.
-dnl Currently capable of checking for functions with single
-dnl argument and returning bool/int/real.
-dnl
-AC_DEFUN([OCTAVE_CHECK_FUNC_CMATH], [
-  ac_safe=`echo "$1" | $SED 'y% ./+-:=%___p___%'`
-
-  AC_CACHE_CHECK([for std::$1 in <cmath>],
-    [octave_cv_func_cmath_$ac_safe],
-    [AC_LANG_PUSH(C++)
-    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
-        #include <cmath>
-        void take_func (bool (*func) (double x));
-        void take_func (int (*func) (double x));
-        void take_func (double (*func) (double x));
-        ]], [[
-        take_func(std::$1);
-        ]])],
-      [eval "octave_cv_func_cmath_$ac_safe=yes"],
-      [eval "octave_cv_func_cmath_$ac_safe=no"])
-    AC_LANG_POP(C++)
-  ])
-  if eval "test \"`echo '$octave_cv_func_cmath_'$ac_safe`\" = yes"; then
-    AC_DEFINE(AS_TR_CPP([[HAVE_CMATH_][$1]]), 1,
-      [Define to 1 if <cmath> provides $1.])
-  fi
-
-  AC_CACHE_CHECK([for std::$1 (float variant) in <cmath>],
-    [octave_cv_func_cmath_f$ac_safe],
-    [AC_LANG_PUSH(C++)
-    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
-        #include <cmath>
-        void take_func (bool (*func) (float x));
-        void take_func (int (*func) (float x));
-        void take_func (float (*func) (float x));
-        ]], [[
-        take_func(std::$1);
-        ]])],
-      [eval "octave_cv_func_cmath_f$ac_safe=yes"],
-      [eval "octave_cv_func_cmath_f$ac_safe=no"])
-    AC_LANG_POP(C++)
-  ])
-  if eval "test \"`echo '$octave_cv_func_cmath_f'$ac_safe`\" = yes"; then
-    AC_DEFINE(AS_TR_CPP([[HAVE_CMATH_][$1][F]]), 1,
-      [Define to 1 if <cmath> provides float variant of $1.])
-  fi
-])
-dnl
 dnl Check whether a complex-valued function is available in <complex>.
 dnl Will define HAVE_COMPLEX_STD_FUNC if the function is available in the
 dnl std namespace and is callable on both std::complex<double> and
 dnl std::complex<float>.  The return type of the function is expected to
 dnl be of the same std::complex<T> type.
 dnl
 AC_DEFUN([OCTAVE_CHECK_FUNC_COMPLEX], [
   ac_safe=`echo "$1" | $SED 'y% ./+-:=%___p___%'`
