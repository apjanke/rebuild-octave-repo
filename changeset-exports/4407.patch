# HG changeset patch
# User jwe
# Date 1052161256 0
#      Mon May 05 19:00:56 2003 +0000
# Node ID 16e8acbd19d5adf374bbc2ec9efd05a8da1eef77
# Parent  28f1efef88f778531ed42d780c24748f90ebba6f
[project @ 2003-05-05 19:00:56 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2003-05-04  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* kpse.cc (dir_list_add): Ensure that directory ends with a
+	directory separator.
+
 2003-04-30  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* pathsearch.cc: Include kpse.cc here.
 
 	* kpse.cc: All functions are now static.  Massive surgery to
 	condense kpathsearch library to a single file of just the
 	essentials for Octave and convert to using C++ strings (no more
 	calls to malloc, very few calls to new, so there should be much
diff --git a/liboctave/kpse.cc b/liboctave/kpse.cc
--- a/liboctave/kpse.cc
+++ b/liboctave/kpse.cc
@@ -2583,18 +2583,20 @@ kpse_expand_default (const std::string& 
 
 /* Make a copy of DIR (unless it's null) and save it in L.  Ensure that
    DIR ends with a DIR_SEP for the benefit of later searches.  */
 
 static void
 dir_list_add (str_llist_type *l, const std::string& dir)
 {
   char last_char = dir[dir.length () - 1];
+
   std::string saved_dir = dir;
-  if (IS_DIR_SEP (last_char) || IS_DEVICE_SEP (last_char))
+
+  if (! (IS_DIR_SEP (last_char) || IS_DEVICE_SEP (last_char)))
     saved_dir += DIR_SEP_STRING;
 
   str_llist_add (l, saved_dir);
 }
 
 /* Return true if FN is a directory or a symlink to a directory,
    false if not. */
 
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2003-05-05  Andy Adler <adler@site.uottawa.ca>
+
+	* plot/hist.m: Improve performance by using different algorithms
+	depending on number of bins.
+
 2003-05-01  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* control/system/sysadd.m: If systems are not "tf", convert before
 	adding.
 
 2003-05-01  Paul Kienzle <pkienzle@users.sf.net>
 
 	* image/imagesc.m: Accept data limits parameter for colormap.
diff --git a/scripts/plot/hist.m b/scripts/plot/hist.m
--- a/scripts/plot/hist.m
+++ b/scripts/plot/hist.m
@@ -72,36 +72,42 @@ function [nn, xx] = hist (y, x, norm)
       x = linspace (min_val+delta, max_val-delta, n);
       cutoff = x + delta;
     elseif (isvector (x))
       tmp = sort (x);
       if (any (tmp != x))
         warning ("hist: bin values not sorted on input");
         x = tmp;
       endif
-      n = length (x);
-      cutoff = zeros (1, n-1);
-      for i = 1:n-1
-        cutoff (i) = (x (i) + x (i+1)) / 2;
-      endfor
+      cutoff = (x(1:end-1) + x(2:end)) / 2;
     else
       error ("hist: second argument must be a scalar or a vector");
     endif
   endif
 
-  freq = zeros (1, n);
-  freq (1) = sum (y < cutoff (1));
-  for i = 2:n-1
-    freq (i) = sum (y >= cutoff (i-1) & y < cutoff (i));
-  endfor
-  freq (n) = sum (y >= cutoff (n-1));
+  if (n < 30)
+    ## The following algorithm works fastest for n less than about 30.
+    chist = [zeros(n,1); length(y)];
+    for i = 1:n-1
+      chist(i+1) = sum (y < cutoff(i));
+    endfor
+  else
+    ## The following algorithm works fastest for n greater than about 30.
+    ## Put cutoff elements between boundaries, integrate over all
+    ## elements, keep totals at boundaries.
+    [s, idx] = sort ([cutoff(:); y(:)]);
+    chist = cumsum(idx>n);
+    chist = [0; chist(idx<n); chist(end)];
+  endif
+
+  freq= diff(chist)';
 
   if (nargin == 3)
     ## Normalise the histogram.
-    freq = freq / length(y) * norm;
+    freq = freq / length (y) * norm;
   endif
 
   if (nargout > 0)
     nn = freq;
     xx = x;
   else
     bar (x, freq);
   endif
