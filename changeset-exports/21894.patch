# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1465915630 14400
#      Tue Jun 14 10:47:10 2016 -0400
# Node ID 67a5cb9cd941f243c19f7049f8c4cecb0dbe561b
# Parent  0a6f387d18d37365cc2fd4ae52eeb758c749b671
hide gnulib fpucw header

* liboctave/wrappers/fpucw-wrapper.c,
liboctave/wrappers/fpucw-wrapper.h: New files.

* liboctave/wrappers/module.mk: Update.

* ov-java.cc: Use new octave_set_default_fpucw function.

* oct-inttypes.cc: Don't include fpucw.h.

diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -27,11 +27,7 @@ along with Octave; see the file COPYING.
 #include "defun.h"
 #include "error.h"
 #include "errwarn.h"
-#include "fpucw.h"
-
-#if defined (HAVE_FPU_CONTROL_H)
-#  include <fpu_control.h>
-#endif
+#include "fpucw-wrapper.h"

 #if defined (HAVE_WINDOWS_H)
 #  include <windows.h>
@@ -508,23 +504,6 @@ initial_class_path (void)
   return retval;
 }

-#if ! defined (_FPU_DEFAULT)
-#  if defined __i386__ || defined __x86_64__
-#    define _FPU_DEFAULT 0x037f
-#  else
-#    define _FPU_DEFAULT 0
-#  endif
-#endif
-
-static void
-restore_fpu_state (void)
-{
-  fpucw_t cw = GET_FPUCW ();
-
-  if (cw != _FPU_DEFAULT)
-    SET_FPUCW (_FPU_DEFAULT);
-}
-
 static void
 initialize_jvm (void)
 {
@@ -726,7 +705,7 @@ terminate_jvm (void)
       if (jvm_lib)
         jvm_lib.close ();

-      restore_fpu_state ();
+      octave_set_default_fpucw ();
     }
 }

@@ -951,7 +930,7 @@ compute_array_dimensions (JNIEnv *jni_en
       idx++;
     }

-  restore_fpu_state ();
+  octave_set_default_fpucw ();

   return dv;
 }
@@ -1005,7 +984,7 @@ get_array_elements (JNIEnv *jni_env, job
   else
     retval = check_exception (jni_env);

-  restore_fpu_state ();
+  octave_set_default_fpucw ();

   return retval;
 }
@@ -1035,7 +1014,7 @@ set_array_elements (JNIEnv *jni_env, job
   else
     retval = check_exception (jni_env);

-  restore_fpu_state ();
+  octave_set_default_fpucw ();

   return retval;
 }
@@ -1076,7 +1055,7 @@ get_invoke_list (JNIEnv *jni_env, void *
           name_list.push_back (jstring_to_string (jni_env, fieldName));
         }

-      restore_fpu_state ();
+      octave_set_default_fpucw ();
     }

   string_vector v (name_list);
@@ -1132,7 +1111,7 @@ convert_to_string (JNIEnv *jni_env, jobj
       else
         error ("unable to convert Java object to string");

-      restore_fpu_state ();
+      octave_set_default_fpucw ();
     }

   return retval;
@@ -1401,7 +1380,7 @@ box_more (JNIEnv *jni_env, void *jobj_ar
   if (retval.is_undefined ())
     retval = octave_value (new octave_java (jobj, jcls));

-  restore_fpu_state ();
+  octave_set_default_fpucw ();

   return retval;
 }
@@ -1685,7 +1664,7 @@ java_event_hook (void)
       jmethodID mID = current_env->GetStaticMethodID (cls, "checkPendingAction", "()V");
       current_env->CallStaticVoidMethod (cls, mID);

-      restore_fpu_state ();
+      octave_set_default_fpucw ();
     }

   return 0;
@@ -1712,7 +1691,7 @@ initialize_java (void)
           error (msg.c_str ());
         }

-      restore_fpu_state ();
+      octave_set_default_fpucw ();
     }
 }

@@ -2159,7 +2138,7 @@ octave_java::do_javaMethod (void *jni_en
             retval = check_exception (jni_env);
         }

-      restore_fpu_state ();
+      octave_set_default_fpucw ();
     }

   return retval;
@@ -2228,7 +2207,7 @@ octave_java:: do_javaMethod (void *jni_e
             retval = check_exception (jni_env);
         }

-      restore_fpu_state ();
+      octave_set_default_fpucw ();
     }

   return retval;
@@ -2300,7 +2279,7 @@ octave_java::do_javaObject (void *jni_en
             check_exception (jni_env);
         }

-      restore_fpu_state ();
+      octave_set_default_fpucw ();
     }

   return retval;
@@ -2362,7 +2341,7 @@ octave_java::do_java_get (void *jni_env_
       else
         retval = check_exception (jni_env);

-      restore_fpu_state ();
+      octave_set_default_fpucw ();
     }

   return retval;
@@ -2423,7 +2402,7 @@ octave_java::do_java_get (void *jni_env_
       else
         retval = check_exception (jni_env);

-      restore_fpu_state ();
+      octave_set_default_fpucw ();
     }

   return retval;
@@ -2487,7 +2466,7 @@ octave_java::do_java_set (void *jni_env_
           check_exception (jni_env);
         }

-      restore_fpu_state ();
+      octave_set_default_fpucw ();
     }

   return retval;
@@ -2552,7 +2531,7 @@ octave_java::do_java_set (void *jni_env_
           check_exception (jni_env);
         }

-      restore_fpu_state ();
+      octave_set_default_fpucw ();
     }

   return retval;
diff --git a/liboctave/util/oct-inttypes.cc b/liboctave/util/oct-inttypes.cc
--- a/liboctave/util/oct-inttypes.cc
+++ b/liboctave/util/oct-inttypes.cc
@@ -25,8 +25,6 @@ along with Octave; see the file COPYING.
 #  include "config.h"
 #endif

-#include <fpucw.h>
-
 #include "lo-error.h"

 #include "oct-inttypes.h"
diff --git a/liboctave/wrappers/fpucw-wrapper.c b/liboctave/wrappers/fpucw-wrapper.c
new file mode 100644
--- /dev/null
+++ b/liboctave/wrappers/fpucw-wrapper.c
@@ -0,0 +1,55 @@
+/*
+
+Copyright (C) 2016 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+// The fpucw macros are provided by gnulib.  We don't include gnulib
+// headers directly in Octave's C++ source files to avoid problems that
+// may be caused by the way that gnulib overrides standard library
+// functions.
+
+#if defined (HAVE_CONFIG_H)
+#  include "config.h"
+#endif
+
+#if defined (HAVE_FPU_CONTROL_H)
+#  include <fpu_control.h>
+#endif
+
+#include "fpucw.h"
+
+#include "fpucw-wrapper.h"
+
+#if ! defined (_FPU_DEFAULT)
+#  if defined __i386__ || defined __x86_64__
+#    define _FPU_DEFAULT 0x037f
+#  else
+#    define _FPU_DEFAULT 0
+#  endif
+#endif
+
+void
+octave_set_default_fpucw (void)
+{
+  fpucw_t cw = GET_FPUCW ();
+
+  if (cw != _FPU_DEFAULT)
+    SET_FPUCW (_FPU_DEFAULT);
+}
diff --git a/liboctave/wrappers/fpucw-wrapper.h b/liboctave/wrappers/fpucw-wrapper.h
new file mode 100644
--- /dev/null
+++ b/liboctave/wrappers/fpucw-wrapper.h
@@ -0,0 +1,39 @@
+/*
+
+Copyright (C) 2016 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+#if ! defined (octave_fpucw_wrapper_h)
+#define octave_fpucw_wrapper_h 1
+
+#if defined __cplusplus
+extern "C" {
+#endif
+
+/* For now, all we need to be able to do is set the control word to
+   the default value.  */
+
+extern void octave_set_default_fpucw (void);
+
+#if defined __cplusplus
+}
+#endif
+
+#endif
diff --git a/liboctave/wrappers/module.mk b/liboctave/wrappers/module.mk
--- a/liboctave/wrappers/module.mk
+++ b/liboctave/wrappers/module.mk
@@ -1,6 +1,7 @@
 NOINSTALL_WRAPPERS_INC = \
   liboctave/wrappers/base64-wrappers.h \
   liboctave/wrappers/canonicalize-file-name-wrapper.h \
+  liboctave/wrappers/fpucw-wrapper.h \
   liboctave/wrappers/gen-tempname-wrapper.h \
   liboctave/wrappers/hash-wrappers.h \
   liboctave/wrappers/mkostemp-wrapper.h \
@@ -16,6 +17,7 @@ NOINSTALL_WRAPPERS_INC = \
 WRAPPERS_SRC = \
   liboctave/wrappers/base64-wrappers.c \
   liboctave/wrappers/canonicalize-file-name-wrapper.c \
+  liboctave/wrappers/fpucw-wrapper.c \
   liboctave/wrappers/gen-tempname-wrapper.c \
   liboctave/wrappers/hash-wrappers.c \
   liboctave/wrappers/mkostemp-wrapper.c \

diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -22,21 +22,17 @@ along with Octave; see the file COPYING.
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
 #include "defun.h"
 #include "error.h"
 #include "errwarn.h"
-#include "fpucw.h"
-
-#if defined (HAVE_FPU_CONTROL_H)
-#  include <fpu_control.h>
-#endif
+#include "fpucw-wrapper.h"
 
 #if defined (HAVE_WINDOWS_H)
 #  include <windows.h>
 #endif
 
 #include <algorithm>
 #include <map>
 #include <iostream>
@@ -503,33 +499,16 @@ initial_class_path (void)
         error ("octave.jar does not exist: %s", jar_file.c_str ());
     }
   else
     error ("initial java dir is empty");
 
   return retval;
 }
 
-#if ! defined (_FPU_DEFAULT)
-#  if defined __i386__ || defined __x86_64__
-#    define _FPU_DEFAULT 0x037f
-#  else
-#    define _FPU_DEFAULT 0
-#  endif
-#endif
-
-static void
-restore_fpu_state (void)
-{
-  fpucw_t cw = GET_FPUCW ();
-
-  if (cw != _FPU_DEFAULT)
-    SET_FPUCW (_FPU_DEFAULT);
-}
-
 static void
 initialize_jvm (void)
 {
   // Most of the time JVM already exists and has been initialized.
   if (jvm)
     return;
 
   JNIEnv *current_env;
@@ -721,17 +700,17 @@ terminate_jvm (void)
         jvm->DestroyJavaVM ();
 
       jvm = 0;
       jvm_attached = false;
 
       if (jvm_lib)
         jvm_lib.close ();
 
-      restore_fpu_state ();
+      octave_set_default_fpucw ();
     }
 }
 
 static std::string
 jstring_to_string (JNIEnv *jni_env, jstring s)
 {
   std::string retval;
 
@@ -946,17 +925,17 @@ compute_array_dimensions (JNIEnv *jni_en
       if (idx >= dv.ndims ())
         dv.resize (idx+1);
       dv(idx) = len;
       jcls = reinterpret_cast<jclass> (jni_env->CallObjectMethod (jcls, getComponentType_ID));
       jobj = (len > 0 ? reinterpret_cast<jobjectArray> (jni_env->GetObjectArrayElement (jobj, 0)) : 0);
       idx++;
     }
 
-  restore_fpu_state ();
+  octave_set_default_fpucw ();
 
   return dv;
 }
 
 static jobject
 make_java_index (JNIEnv *jni_env, const octave_value_list& idx)
 {
   jclass_ref ocls (jni_env, jni_env->FindClass ("[I"));
@@ -1000,17 +979,17 @@ get_array_elements (JNIEnv *jni_env, job
   jmethodID mID = jni_env->GetStaticMethodID (helperClass, "arraySubsref", "(Ljava/lang/Object;[[I)Ljava/lang/Object;");
   resObj = jni_env->CallStaticObjectMethod (helperClass, mID, jobj, jobject (java_idx));
 
   if (resObj)
     retval = box (jni_env, resObj);
   else
     retval = check_exception (jni_env);
 
-  restore_fpu_state ();
+  octave_set_default_fpucw ();
 
   return retval;
 }
 
 static octave_value
 set_array_elements (JNIEnv *jni_env, jobject jobj,
                     const octave_value_list& idx, const octave_value& rhs)
 {
@@ -1030,17 +1009,17 @@ set_array_elements (JNIEnv *jni_env, job
           jobj, jobject (java_idx), jobject (rhsObj));
     }
 
   if (resObj)
     retval = box (jni_env, resObj);
   else
     retval = check_exception (jni_env);
 
-  restore_fpu_state ();
+  octave_set_default_fpucw ();
 
   return retval;
 }
 
 static string_vector
 get_invoke_list (JNIEnv *jni_env, void *jobj_arg)
 {
   jobject jobj = TO_JOBJECT (jobj_arg);
@@ -1071,17 +1050,17 @@ get_invoke_list (JNIEnv *jni_env, void *
 
       for (int i = 0; i < fLen; i++)
         {
           jobject_ref field (jni_env, jni_env->GetObjectArrayElement (fList, i));
           jstring_ref fieldName (jni_env, reinterpret_cast<jstring> (jni_env->CallObjectMethod (field, f_getName_ID)));
           name_list.push_back (jstring_to_string (jni_env, fieldName));
         }
 
-      restore_fpu_state ();
+      octave_set_default_fpucw ();
     }
 
   string_vector v (name_list);
 
   return v.sort (true);
 }
 
 static octave_value
@@ -1127,17 +1106,17 @@ convert_to_string (JNIEnv *jni_env, jobj
                 retval = octave_value (jstring_to_string (jni_env, js), type);
               else
                 retval = check_exception (jni_env);
             }
         }
       else
         error ("unable to convert Java object to string");
 
-      restore_fpu_state ();
+      octave_set_default_fpucw ();
     }
 
   return retval;
 }
 
 #define TO_JAVA(obj) dynamic_cast<octave_java*> ((obj).internal_rep ())
 
 static octave_value
@@ -1396,17 +1375,17 @@ box_more (JNIEnv *jni_env, void *jobj_ar
               retval = m;
             }
         }
     }
 
   if (retval.is_undefined ())
     retval = octave_value (new octave_java (jobj, jcls));
 
-  restore_fpu_state ();
+  octave_set_default_fpucw ();
 
   return retval;
 }
 
 static bool
 unbox (JNIEnv *jni_env, const octave_value& val, jobject_ref& jobj,
        jclass_ref& jcls)
 {
@@ -1680,17 +1659,17 @@ java_event_hook (void)
   JNIEnv *current_env = thread_jni_env ();
 
   if (current_env)
     {
       jclass_ref cls (current_env, find_octave_class (current_env, "org/octave/Octave"));
       jmethodID mID = current_env->GetStaticMethodID (cls, "checkPendingAction", "()V");
       current_env->CallStaticVoidMethod (cls, mID);
 
-      restore_fpu_state ();
+      octave_set_default_fpucw ();
     }
 
   return 0;
 }
 
 static void
 initialize_java (void)
 {
@@ -1707,17 +1686,17 @@ initialize_java (void)
           octave_thread_ID = get_current_thread_ID (current_env);
           //printf ("octave thread ID=%ld\n", octave_thread_ID);
         }
       catch (std::string msg)
         {
           error (msg.c_str ());
         }
 
-      restore_fpu_state ();
+      octave_set_default_fpucw ();
     }
 }
 
 JNIEXPORT jboolean JNICALL
 Java_org_octave_Octave_call (JNIEnv *env, jclass, jstring funcName,
                              jobjectArray argin, jobjectArray argout)
 {
   std::string fname = jstring_to_string (env, funcName);
@@ -2154,17 +2133,17 @@ octave_java::do_javaMethod (void *jni_en
           jobjectArray_ref resObj (jni_env, reinterpret_cast<jobjectArray> (jni_env->CallStaticObjectMethod (helperClass, mID,
                                                                                                              to_java (), jstring (methName), jobjectArray (arg_objs), jobjectArray (arg_types))));
           if (resObj)
             retval = box (jni_env, resObj);
           else
             retval = check_exception (jni_env);
         }
 
-      restore_fpu_state ();
+      octave_set_default_fpucw ();
     }
 
   return retval;
 
 #else
 
   octave_unused_parameter (jni_env_arg);
   octave_unused_parameter (name);
@@ -2223,17 +2202,17 @@ octave_java:: do_javaMethod (void *jni_e
           jobject_ref resObj (jni_env, jni_env->CallStaticObjectMethod (helperClass, mID,
                                                                         jstring (clsName), jstring (methName), jobjectArray (arg_objs), jobjectArray (arg_types)));
           if (resObj)
             retval = box (jni_env, resObj);
           else
             retval = check_exception (jni_env);
         }
 
-      restore_fpu_state ();
+      octave_set_default_fpucw ();
     }
 
   return retval;
 
 #else
 
   octave_unused_parameter (jni_env_arg);
   octave_unused_parameter (class_name);
@@ -2295,17 +2274,17 @@ octave_java::do_javaObject (void *jni_en
                                                                         jstring (clsName), jobjectArray (arg_objs), jobjectArray (arg_types)));
 
           if (resObj)
             retval = octave_value (new octave_java (resObj, 0));
           else
             check_exception (jni_env);
         }
 
-      restore_fpu_state ();
+      octave_set_default_fpucw ();
     }
 
   return retval;
 
 #else
 
   octave_unused_parameter (jni_env_arg);
   octave_unused_parameter (name);
@@ -2357,17 +2336,17 @@ octave_java::do_java_get (void *jni_env_
       jobject_ref resObj (jni_env, jni_env->CallStaticObjectMethod (helperClass, mID,
           to_java (), jstring (fName)));
 
       if (resObj)
         retval = box (jni_env, resObj);
       else
         retval = check_exception (jni_env);
 
-      restore_fpu_state ();
+      octave_set_default_fpucw ();
     }
 
   return retval;
 
 #else
 
   octave_unused_parameter (jni_env_arg);
   octave_unused_parameter (name);
@@ -2418,17 +2397,17 @@ octave_java::do_java_get (void *jni_env_
       jstring_ref fName (jni_env, jni_env->NewStringUTF (name.c_str ()));
       jobject_ref resObj (jni_env, jni_env->CallStaticObjectMethod (helperClass, mID,
           jstring (cName), jstring (fName)));
       if (resObj)
         retval = box (jni_env, resObj);
       else
         retval = check_exception (jni_env);
 
-      restore_fpu_state ();
+      octave_set_default_fpucw ();
     }
 
   return retval;
 
 #else
 
   octave_unused_parameter (jni_env_arg);
   octave_unused_parameter (class_name);
@@ -2482,17 +2461,17 @@ octave_java::do_java_set (void *jni_env_
           jclass_ref helperClass (jni_env, find_octave_class (jni_env, "org/octave/ClassHelper"));
           jmethodID mID = jni_env->GetStaticMethodID (helperClass, "setField",
                                                       "(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)V");
           jstring_ref fName (jni_env, jni_env->NewStringUTF (name.c_str ()));
           jni_env->CallStaticObjectMethod (helperClass, mID, to_java (), jstring (fName), jobject (jobj));
           check_exception (jni_env);
         }
 
-      restore_fpu_state ();
+      octave_set_default_fpucw ();
     }
 
   return retval;
 
 #else
 
   octave_unused_parameter (jni_env_arg);
   octave_unused_parameter (name);
@@ -2547,17 +2526,17 @@ octave_java::do_java_set (void *jni_env_
           jmethodID mID = jni_env->GetStaticMethodID (helperClass, "setStaticField",
                                                       "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V");
           jstring_ref cName (jni_env, jni_env->NewStringUTF (class_name.c_str ()));
           jstring_ref fName (jni_env, jni_env->NewStringUTF (name.c_str ()));
           jni_env->CallStaticObjectMethod (helperClass, mID, jstring (cName), jstring (fName), jobject (jobj));
           check_exception (jni_env);
         }
 
-      restore_fpu_state ();
+      octave_set_default_fpucw ();
     }
 
   return retval;
 
 #else
 
   octave_unused_parameter (jni_env_arg);
   octave_unused_parameter (class_name);
diff --git a/liboctave/util/oct-inttypes.cc b/liboctave/util/oct-inttypes.cc
--- a/liboctave/util/oct-inttypes.cc
+++ b/liboctave/util/oct-inttypes.cc
@@ -20,18 +20,16 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
-#include <fpucw.h>
-
 #include "lo-error.h"
 
 #include "oct-inttypes.h"
 
 template <typename T>
 const octave_int<T> octave_int<T>::zero (static_cast<T> (0));
 
 template <typename T>
diff --git a/liboctave/wrappers/fpucw-wrapper.c b/liboctave/wrappers/fpucw-wrapper.c
new file mode 100644
--- /dev/null
+++ b/liboctave/wrappers/fpucw-wrapper.c
@@ -0,0 +1,55 @@
+/*
+
+Copyright (C) 2016 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+// The fpucw macros are provided by gnulib.  We don't include gnulib
+// headers directly in Octave's C++ source files to avoid problems that
+// may be caused by the way that gnulib overrides standard library
+// functions.
+
+#if defined (HAVE_CONFIG_H)
+#  include "config.h"
+#endif
+
+#if defined (HAVE_FPU_CONTROL_H)
+#  include <fpu_control.h>
+#endif
+
+#include "fpucw.h"
+
+#include "fpucw-wrapper.h"
+
+#if ! defined (_FPU_DEFAULT)
+#  if defined __i386__ || defined __x86_64__
+#    define _FPU_DEFAULT 0x037f
+#  else
+#    define _FPU_DEFAULT 0
+#  endif
+#endif
+
+void
+octave_set_default_fpucw (void)
+{
+  fpucw_t cw = GET_FPUCW ();
+
+  if (cw != _FPU_DEFAULT)
+    SET_FPUCW (_FPU_DEFAULT);
+}
diff --git a/liboctave/wrappers/fpucw-wrapper.h b/liboctave/wrappers/fpucw-wrapper.h
new file mode 100644
--- /dev/null
+++ b/liboctave/wrappers/fpucw-wrapper.h
@@ -0,0 +1,39 @@
+/*
+
+Copyright (C) 2016 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+#if ! defined (octave_fpucw_wrapper_h)
+#define octave_fpucw_wrapper_h 1
+
+#if defined __cplusplus
+extern "C" {
+#endif
+
+/* For now, all we need to be able to do is set the control word to
+   the default value.  */
+
+extern void octave_set_default_fpucw (void);
+
+#if defined __cplusplus
+}
+#endif
+
+#endif
diff --git a/liboctave/wrappers/module.mk b/liboctave/wrappers/module.mk
--- a/liboctave/wrappers/module.mk
+++ b/liboctave/wrappers/module.mk
@@ -1,26 +1,28 @@
 NOINSTALL_WRAPPERS_INC = \
   liboctave/wrappers/base64-wrappers.h \
   liboctave/wrappers/canonicalize-file-name-wrapper.h \
+  liboctave/wrappers/fpucw-wrapper.h \
   liboctave/wrappers/gen-tempname-wrapper.h \
   liboctave/wrappers/hash-wrappers.h \
   liboctave/wrappers/mkostemp-wrapper.h \
   liboctave/wrappers/nanosleep-wrapper.h \
   liboctave/wrappers/nproc-wrapper.h \
   liboctave/wrappers/putenv-wrapper.h \
   liboctave/wrappers/set-program-name-wrapper.h \
   liboctave/wrappers/strftime-wrapper.h \
   liboctave/wrappers/strptime-wrapper.h \
   liboctave/wrappers/unsetenv-wrapper.h \
   liboctave/wrappers/vasprintf-wrapper.h
 
 WRAPPERS_SRC = \
   liboctave/wrappers/base64-wrappers.c \
   liboctave/wrappers/canonicalize-file-name-wrapper.c \
+  liboctave/wrappers/fpucw-wrapper.c \
   liboctave/wrappers/gen-tempname-wrapper.c \
   liboctave/wrappers/hash-wrappers.c \
   liboctave/wrappers/mkostemp-wrapper.c \
   liboctave/wrappers/nanosleep-wrapper.c \
   liboctave/wrappers/nproc-wrapper.c \
   liboctave/wrappers/putenv-wrapper.c \
   liboctave/wrappers/set-program-name-wrapper.c \
   liboctave/wrappers/strftime-wrapper.c \
