# HG changeset patch
# User jwe
# Date 787471628 0
#      Thu Dec 15 06:07:08 1994 +0000
# Node ID 18be848f10a9d64f7d004fefcb5fda1324db41b9
# Parent  d2dd114ba5dd37c3310035d784e9a4e3cd925fc6
[project @ 1994-12-15 06:06:46 by jwe]

diff --git a/src/help.cc b/src/help.cc
--- a/src/help.cc
+++ b/src/help.cc
@@ -666,27 +666,35 @@ print cryptic yet witty messages")
 	      if (help_from_list (output_buf, op_help_list, *argv, 0))
 		continue;
 
 	      if (help_from_list (output_buf, kw_help_list, *argv, 0))
 		continue;
 
 	      symbol_record *sym_rec = lookup_by_name (*argv, 0);
 
-	      if (sym_rec)
+	      if (sym_rec && sym_rec->is_defined ())
 		{
 		  char *h = sym_rec->help ();
 		  if (h && *h)
 		    {
 		      print_symbol_type (output_buf, sym_rec, *argv, 1);
 		      output_buf << "\n" << h << "\n";
 		      continue;
 		    }
 		}
 
+	      char *h = get_help_from_file (*argv);
+	      if (h && *h)
+		{
+		  output_buf << "\n" << h << "\n";
+		  delete [] h;
+		  continue;
+		}
+
 	      output_buf << "\nhelp: sorry, `" << *argv
 		<< "' is not documented\n"; 
 	    }
 
 	  additional_help_message (output_buf);
 	  output_buf << ends;
 	  maybe_page_output (output_buf);
 	}
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -636,16 +636,20 @@ reset_parser (void)
       current_input_column = 1;
       input_line_number = current_command_number - 1;
     }
 
 // Only ask for input from stdin if we are expecting interactive
 // input.
   if (interactive && ! (reading_fcn_file || get_input_from_eval_string))
     yyrestart (stdin);
+
+// Delete the buffer for help text.
+  delete [] help_buf;
+  help_buf = 0;
 }
 
 // Replace backslash escapes in a string with the real values.
 
 static void
 do_string_escapes (char *s)
 {
   char *p1 = s;
@@ -980,17 +984,16 @@ is_keyword (char *s)
 	}
       else
 	{
 	  tmp_local_sym_tab = new symbol_table ();
 	  curr_sym_tab = tmp_local_sym_tab;
 	  defining_func = 1;
 	  promptflag--;
 	  beginning_of_function = 1;
-	  help_buf[0] = '\0';
 	  if (! (reading_fcn_file || reading_script_file))
 	    input_line_number = 1;
 	  return FCN;
 	}
     }
   else if (strcmp ("global", s) == 0)
     {
       yylval.tok_val = new token (l, c);
@@ -1085,62 +1088,65 @@ lookup_identifier (char *name)
   return curr_sym_tab->lookup (name, 1, 0);
 }
 
 // Grab the help text from an function file.
 
 static void
 grab_help_text (void)
 {
-  int max_len = HELP_BUF_LENGTH - 1;
+  if (! help_buf)
+    {
+      ostrstream buf;
 
-  int in_comment = 1;
-  int len = 0;
-  int c = 0;
+      int in_comment = 1;
+      int c = 0;
 
-  while ((c = yyinput ()) != EOF)
-    {
-      if (in_comment)
+      while ((c = yyinput ()) != EOF)
 	{
-	  help_buf[len++] = c;
-	  if (c == '\n')
-	    in_comment = 0;
-	}
-      else
-	{
-	  switch (c)
+	  if (in_comment)
+	    {
+	      buf << (char) c;
+	      if (c == '\n')
+		in_comment = 0;
+	    }
+	  else
 	    {
-	    case '%':
-	    case '#':
-	      in_comment = 1;
-	      break;
+	      switch (c)
+		{
+		case '%':
+		case '#':
+		  in_comment = 1;
+		  break;
 
-	    case ' ':
-	    case '\t':
-	      break;
+		case ' ':
+		case '\t':
+		  break;
 
-	    default:
-	      goto done;
+		default:
+		  goto done;
+		}
 	    }
 	}
 
-      if (len > max_len)
+    done:
+
+      if (c)
+	yyunput (c, yytext);
+
+      buf << ends;
+
+      help_buf = buf.str ();
+
+      if (! help_buf || ! *help_buf)
 	{
-	  warning ("grab_help_text: buffer overflow after caching %d chars",
-		   max_len);
-	  break;
+	  delete [] help_buf;
+	  help_buf = 0;
 	}
     }
-
- done:
-
-  if (c)
-    yyunput (c, yytext);
-
-  help_buf[len] =  '\0';
 }
 
 // Return 1 if the given character matches any character in the given
 // string.
 
 static int
 match_any (char c, char *s)
 {
diff --git a/src/parse.h b/src/parse.h
--- a/src/parse.h
+++ b/src/parse.h
@@ -68,20 +68,18 @@ extern SLStack <int> mlnm;
 extern int yydebug;
 
 // The current input line number.
 extern int input_line_number;
 
 // The column of the current token.
 extern int current_input_column;
 
-#define HELP_BUF_LENGTH 8192
-
 // Buffer for help text snagged from function files.
-extern char help_buf [HELP_BUF_LENGTH];
+extern char *help_buf;
 
 // Nonzero means we're working on a plot command.
 extern int plotting;
 
 // Nonzero means we've seen something that means we must be past the
 // range part of a plot command.
 extern int past_plot_range;
 
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -86,18 +86,17 @@ SLStack <int> mlnm;
 
 // The current input line number.
 int input_line_number = 0;
 
 // The column of the current token.
 int current_input_column = 1;
 
 // Buffer for help text snagged from function files.
-// Probably shouldn't be a fixed size...
-char help_buf [HELP_BUF_LENGTH];
+char *help_buf = 0;
 
 // Nonzero means we're working on a plot command.
 int plotting = 0;
 
 // Nonzero means we've seen something that means we must be past the
 // range part of a plot command.
 int past_plot_range = 0;
 
diff --git a/src/pt-cmd.cc b/src/pt-cmd.cc
--- a/src/pt-cmd.cc
+++ b/src/pt-cmd.cc
@@ -276,17 +276,17 @@ tree_for_command::eval (void)
 	{
 	  cm_tmp = tmp_expr.complex_matrix_value ();
 	  nr = cm_tmp.rows ();
 	  steps = cm_tmp.columns ();
 	}
 
       for (int i = 0; i < steps; i++)
 	{
-	  tree_constant *rhs;
+	  tree_constant *rhs = 0;
 
 	  if (nr == 1)
 	    {
 	      if (tmp_expr.is_real_matrix ())
 		rhs = new tree_constant (m_tmp (0, i));
 	      else
 		rhs = new tree_constant (cm_tmp (0, i));
 	    }
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -493,67 +493,111 @@ symbol_out_of_date (symbol_record *sr)
 	      if (status > 0)
 		return 1;
 	    }
 	}
     }
   return 0;
 }
 
-static void
+static int
+looks_like_octave_copyright (char *s)
+{
+  if (s && strncmp (s, " Copyright (C) ", 15) == 0)
+    {
+      s = strchr (s, '\n');
+      if (s)
+	{
+	  s++;
+	  s = strchr (s, '\n');
+	  if (s)
+	    {
+	      s++;
+	      if (strncmp (s, " This file is part of Octave.", 29) == 0)
+		return 1;
+	    }
+	}
+    }
+  return 0;
+}
+
+static char *
 gobble_leading_white_space (FILE *ffile)
 {
+  ostrstream buf;
+
+  int first_comments_seen = 0;
+  int have_help_text = 0;
   int in_comment = 0;
   int c;
   while ((c = getc (ffile)) != EOF)
     {
       current_input_column++;
       if (in_comment)
 	{
+	  if (! have_help_text)
+	    {
+	      first_comments_seen = 1;
+	      buf << (char) c;
+	    }
+
 	  if (c == '\n')
 	    {
 	      input_line_number++;
 	      current_input_column = 0;
 	      in_comment = 0;
 	    }
 	}
       else
 	{
 	  switch (c)
 	    {
 	    case ' ':
 	    case '\t':
+	      if (first_comments_seen)
+		have_help_text = 1;
 	      break;
 
 	    case '\n':
 	      input_line_number++;
 	      current_input_column = 0;
 	      continue;
 
 	    case '%':
 	    case '#':
 	      in_comment = 1;
 	      break;
 
 	    default:
 	      current_input_column--;
 	      ungetc (c, ffile);
-	      return;
+	      goto done;
 	    }
 	}
     }
+
+ done:
+
+  buf << ends;
+  char *help_txt = buf.str ();
+
+  if (! help_txt || ! *help_txt || looks_like_octave_copyright (help_txt))
+    {
+      delete help_txt;
+      help_txt = 0;
+    }
+
+  return help_txt;
 }
 
 static int
 is_function_file (FILE *ffile)
 {
   int status = 0;
 
-  gobble_leading_white_space (ffile);
-
   long pos = ftell (ffile);
 
   char buf [10];
   fgets (buf, 10, ffile);
   int len = strlen (buf);
   if (len > 8 && strncmp (buf, "function", 8) == 0
       && ! (isalnum (buf[8]) || buf[8] == '_'))
     status = 1;
@@ -591,16 +635,18 @@ parse_fcn_file (int exec_script, char *f
 
   FILE *ffile = get_input_from_file (ff, 0);
 
   if (ffile)
     {
 // Check to see if this file defines a function or is just a list of
 // commands.
 
+      char *tmp_help_txt = gobble_leading_white_space (ffile);
+
       if (is_function_file (ffile))
 	{
 	  unwind_protect_int (echo_input);
 	  unwind_protect_int (saving_history);
 	  unwind_protect_int (reading_fcn_file);
 
 	  echo_input = 0;
 	  saving_history = 0;
@@ -613,16 +659,19 @@ parse_fcn_file (int exec_script, char *f
 	  add_unwind_protect (delete_input_buffer, (void *) new_buf);
 
 	  switch_to_buffer (new_buf);
 
 	  unwind_protect_ptr (curr_sym_tab);
 
 	  reset_parser ();
 
+	  delete [] help_buf;
+	  help_buf = tmp_help_txt;
+
 	  int status = yyparse ();
 
 	  if (status != 0)
 	    {
 	      error ("parse error while reading function file %s", ff);
 	      global_sym_tab->clear (curr_fcn_file_name);
 	    }
 	}
@@ -721,16 +770,33 @@ lookup_by_name (const char *nm, int exec
 {
   symbol_record *sym_rec = curr_sym_tab->lookup (nm, 1, 0);
 
   lookup (sym_rec, exec_script);
 
   return sym_rec;
 }
 
+char *
+get_help_from_file (const char *f)
+{
+  char *path = fcn_file_in_path (f);
+  if (path && *path)
+    {
+      FILE *fptr = fopen (path, "r");
+      if (fptr)
+	{
+	  char *help_txt = gobble_leading_white_space (fptr);
+	  fclose (fptr);
+	  return help_txt;
+	}
+    }
+  return 0;
+}
+
 // Variable values.
 
 // Look for the given name in the global symbol table.  If it refers
 // to a string, return a new copy.  If not, return 0;
 
 char *
 builtin_string_variable (const char *name)
 {
diff --git a/src/variables.h b/src/variables.h
--- a/src/variables.h
+++ b/src/variables.h
@@ -63,16 +63,18 @@ struct builtin_function
 };
 
 extern void initialize_symbol_tables (void);
 
 extern int lookup (symbol_record *s, int exec_script = 1);
 
 extern symbol_record *lookup_by_name (const char *nm, int exec_script = 1);
 
+extern char *get_help_from_file (const char *f);
+
 extern char *builtin_string_variable (const char *);
 extern int builtin_real_scalar_variable (const char *, double&);
 
 extern void link_to_global_variable (symbol_record *sr);
 extern void link_to_builtin_variable (symbol_record *sr);
 extern void link_to_builtin_or_function (symbol_record *sr);
 
 extern void force_link_to_function (const char *s);
