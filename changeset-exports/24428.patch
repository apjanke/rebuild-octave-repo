# HG changeset patch
# User Rik <rik@octave.org>
# Date 1513647048 28800
#      Mon Dec 18 17:30:48 2017 -0800
# Node ID 3472c6760ad2bfb52be6fe210d433506cf1c4742
# Parent  51ead71394bc992fb4301ed2ba034e44976c7b16
Update plotyy implementation.

* plotyy.m: Change special axes property "__plotyy_axes__" to return
a row vector.  Turn off "zliminclude" on special hidden text objects
used to trigger deletion callbacks.  Remove excessive checking for
validity of handles in __plotyy_axes__.

* legend.m: Simplify extracting handles from __plotyy_axes__ property.

* copyobj.m: Add new demo which uses plotyy to test that copyobj
handles special __plotyy_axes__ property correctly.

diff --git a/scripts/plot/appearance/legend.m b/scripts/plot/appearance/legend.m
--- a/scripts/plot/appearance/legend.m
+++ b/scripts/plot/appearance/legend.m
@@ -132,22 +132,18 @@ function [hleg, hleg_obj, hplot, labels]
       fig = gcf ();
     endif
     ca = gca ();
   endif
 
   ## Special handling for plotyy which has two axes objects
   if (ishghandle (ca) && isprop (ca, "__plotyy_axes__"))
     plty = get (ca, "__plotyy_axes__");
-    if (isscalar (plty) && ishghandle (plty))
-      ca = [ca, plty];
-    elseif (iscell (plty))
-      ca = [ca, plty{:}];
-    elseif (all (ishghandle (plty)))
-      ca = [ca, plty(:).'];
+    if (all (ishghandle (plty)))
+      ca = [ca, plty.'];
     else
       error ("legend.m: This should not happen.  File a bug report.");
     endif
     ## Remove duplicates while preserving order
     [~, n] = unique (ca);
     ca = ca(sort (n));
   endif
 
diff --git a/scripts/plot/draw/plotyy.m b/scripts/plot/draw/plotyy.m
--- a/scripts/plot/draw/plotyy.m
+++ b/scripts/plot/draw/plotyy.m
@@ -71,20 +71,20 @@ function [ax, h1, h2] = plotyy (varargin
     oldfig = get (0, "currentfigure");
   endif
   unwind_protect
     hax = newplot (hax);
 
     ## FIXME: Second conditional test shouldn't be required.
     ##        'cla reset' needs to delete user properties like __plotyy_axes__.
     if (isprop (hax, "__plotyy_axes__")
-        && isaxes (get (hax, "__plotyy_axes__")) == [true true])
+        && isaxes (get (hax, "__plotyy_axes__")) == [true; true])
       hax = get (hax, "__plotyy_axes__");
     else
-      hax(2) = axes ("nextplot", get (hax(1), "nextplot"));
+      hax = [hax; axes("nextplot", get (hax(1), "nextplot"))];
     endif
 
     [axtmp, h1tmp, h2tmp] = __plotyy__ (hax, varargin{:});
 
     set (gcf, "currentaxes", hax(1));
 
   unwind_protect_cleanup
     if (! isempty (oldfig))
@@ -153,20 +153,23 @@ function [ax, h1, h2] = __plotyy__ (ax, 
 
   ## Restore nextplot value by copying value from axis #1
   set (ax(2), "nextplot", get (ax(1), "nextplot"));
 
   ## Add invisible text objects that when destroyed,
   ## also remove the other axis
   t1 = text (0, 0, "", "parent", ax(1), "tag", "plotyy",
              "visible", "off", "handlevisibility", "off",
-             "xliminclude", "off", "yliminclude", "off");
+             "xliminclude", "off", "yliminclude", "off",
+             "zliminclude", "off");
+
   t2 = text (0, 0, "", "parent", ax(2), "tag", "plotyy",
              "visible", "off", "handlevisibility", "off",
-             "xliminclude", "off", "yliminclude", "off");
+             "xliminclude", "off", "yliminclude", "off",
+             "zliminclude", "off");
 
   set (t1, "deletefcn", {@deleteplotyy, ax(2), t2});
   set (t2, "deletefcn", {@deleteplotyy, ax(1), t1});
 
   ## Add cross-listeners so a change in one axes' attributes updates the other.
   addlistener (ax(1), "position", {@update_position, ax(2)});
   addlistener (ax(2), "position", {@update_position, ax(1)});
   addlistener (ax(1), "outerposition", {@update_position, ax(2)});
@@ -178,31 +181,27 @@ function [ax, h1, h2] = __plotyy__ (ax, 
   addlistener (ax(1), "plotboxaspectratio", {@update_position, ax(2)});
   addlistener (ax(2), "plotboxaspectratio", {@update_position, ax(1)});
   addlistener (ax(1), "plotboxaspectratiomode", {@update_position, ax(2)});
   addlistener (ax(2), "plotboxaspectratiomode", {@update_position, ax(1)});
   addlistener (ax(1), "nextplot", {@update_nextplot, ax(2)});
   addlistener (ax(2), "nextplot", {@update_nextplot, ax(1)});
 
   ## Store the axes handles for the sister axes.
-  if (ishghandle (ax(1)) && ! isprop (ax(1), "__plotyy_axes__"))
+  if (! isprop (ax(1), "__plotyy_axes__"))
     addproperty ("__plotyy_axes__", ax(1), "data");
     set (ax(1), "__plotyy_axes__", ax);
-  elseif (ishghandle (ax(1)))
-    set (ax(1), "__plotyy_axes__", ax);
   else
-    error ("plotyy.m: This shouldn't happen.  File a bug report.");
+    set (ax(1), "__plotyy_axes__", ax);
   endif
-  if (ishghandle (ax(2)) && ! isprop (ax(2), "__plotyy_axes__"))
+  if (! isprop (ax(2), "__plotyy_axes__"))
     addproperty ("__plotyy_axes__", ax(2), "data");
     set (ax(2), "__plotyy_axes__", ax);
-  elseif (ishghandle (ax(2)))
+  else
     set (ax(2), "__plotyy_axes__", ax);
-  else
-    error ("plotyy.m: This shouldn't happen.  File a bug report.");
   endif
 
 endfunction
 
 function deleteplotyy (h, ~, ax2, t2)
   if (isaxes (ax2))
     set (t2, "deletefcn", []);
     delete (ax2);
diff --git a/scripts/plot/util/copyobj.m b/scripts/plot/util/copyobj.m
--- a/scripts/plot/util/copyobj.m
+++ b/scripts/plot/util/copyobj.m
@@ -164,16 +164,45 @@ endfunction
 %! drawnow ();
 %! hnew = copyobj (hobj);
 %! drawnow ();
 %! set (hnew, "name", "Copyobj");
 %! drawnow ();
 %! set (hnew, "position", [scrn(3)/2, scrn(4)/2-pos(4)/2, pos(3:4)]);
 %! drawnow ();
 
+%!demo
+%! hobj = clf;
+%! set (hobj, "name", "Original", "numbertitle", "off");
+%! x = 0:0.1:2*pi;
+%! y1 = sin (x);
+%! y2 = exp (x - 1);
+%! ax = plotyy (x,y1, x-1,y2, @plot, @semilogy);
+%! xlabel ("X");
+%! ylabel (ax(1), "Axis 1");
+%! ylabel (ax(2), "Axis 2");
+%! lcolor = get (gca, "ColorOrder")(1,:);
+%! rcolor = get (gca, "ColorOrder")(2,:);
+%! text (0.5, 0.5, "Left Axis", ...
+%!       "color", lcolor, "horizontalalignment", "center", "parent", ax(1));
+%! text (4.5, 80, "Right Axis", ...
+%!       "color", rcolor, "horizontalalignment", "center", "parent", ax(2));
+%! title ({"plotyy() example"; "left axis uses @plot, right axis uses @semilogy"});
+%! drawnow ();
+%! pos = get (hobj, "position");
+%! scrn = get (0, "screensize");
+%! set (hobj, "position", [scrn(3)/2-pos(3)-10, scrn(4)/2-pos(4)/2, pos(3:4)]);
+%! drawnow ();
+%! hnew = copyobj (hobj);
+%! drawnow ();
+%! set (hnew, "name", "Copyobj");
+%! drawnow ();
+%! set (hnew, "position", [scrn(3)/2, scrn(4)/2-pos(4)/2, pos(3:4)]);
+%! drawnow ();
+
 %!testif HAVE_MAGICK; any (strcmp ("gnuplot", available_graphics_toolkits ()))
 %! toolkit = graphics_toolkit ();
 %! graphics_toolkit ("gnuplot");
 %! unwind_protect
 %!   h1 = figure ("visible", "off");
 %!   x = 0:0.1:2*pi;
 %!   y1 = sin (x);
 %!   y2 = exp (x - 1);
