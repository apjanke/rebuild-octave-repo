# HG changeset patch
# User Rik <rik@octave.org>
# Date 1452032218 28800
#      Tue Jan 05 14:16:58 2016 -0800
# Node ID 3e7cfee5f7862efff6cf4b3efa19492eeeaa4ccc
# Parent  53bded18aba6266b1e24a88af5ead4abd4cb6753
maint: Rename attributes GCC_ATTR_XXX to OCTAVE_XXX.

* oct-conf-post.in.h: Rename macros GCC_ATTR_XXX to OCTAVE_XXX.  Add comments
describing purpose of macros.  Add FIXME note about switching macros to C++
standard convention.  Add FIXME note about using visibility attributes.

* error.cc, error.h, gripes.h, jit-typeinfo.cc, load-save.cc, oct-stream.cc,
pt-jit.cc, symtab.h, variables.h, ov-base-sparse.h, ov-base.cc, ov-base.h,
ov-class.cc, ov-classdef.cc, ov-classdef.h, ov.cc, ov.h, octave.cc, pt-mat.cc,
Array.h, DiagArray2.h, PermMatrix.h, Range.h, Sparse.h, dSparse.h, f77-fcn.h,
lo-error.c, lo-error.h, quit.h, SparseCmplxQR.cc, lo-array-gripes.h,
unwind-prot.h: Rename attributes GCC_ATTR_XXX to OCTAVE_XXX.

diff --git a/libinterp/corefcn/error.cc b/libinterp/corefcn/error.cc
--- a/libinterp/corefcn/error.cc
+++ b/libinterp/corefcn/error.cc
@@ -388,29 +388,29 @@ void
 message_with_id (const char *name, const char *id, const char *fmt, ...)
 {
   va_list args;
   va_start (args, fmt);
   vmessage_with_id (name, id, fmt, args);
   va_end (args);
 }
 
-GCC_ATTR_NORETURN static
+OCTAVE_NORETURN static
 void
 usage_1 (octave_execution_exception& e, const char *id,
          const char *fmt, va_list args)
 {
   verror (true, std::cerr, "usage", id, fmt, args);
 
   maybe_enter_debugger (e);
 
   throw e;
 }
 
-GCC_ATTR_NORETURN static
+OCTAVE_NORETURN static
 void
 usage_1 (const char *id, const char *fmt, va_list args)
 {
   octave_execution_exception e = make_execution_exception ("usage");
 
   usage_1 (e, id, fmt, args);
 }
 
@@ -439,17 +439,17 @@ void
 usage_with_id (const char *id, const char *fmt, ...)
 {
   va_list args;
   va_start (args, fmt);
   vusage_with_id (id, fmt, args);
   va_end (args);
 }
 
-GCC_ATTR_NORETURN static
+OCTAVE_NORETURN static
 void
 error_1 (octave_execution_exception& e, std::ostream& os,
          const char *name, const char *id, const char *fmt,
          va_list args, bool with_cfn = false)
 {
   bool show_stack_trace = false;
 
   if (fmt)
@@ -487,17 +487,17 @@ error_1 (octave_execution_exception& e, 
   else
     panic ("error_1: invalid format");
 
   maybe_enter_debugger (e, show_stack_trace);
 
   throw e;
 }
 
-GCC_ATTR_NORETURN static
+OCTAVE_NORETURN static
 void
 error_1 (std::ostream& os, const char *name, const char *id,
          const char *fmt, va_list args, bool with_cfn = false)
 {
   octave_execution_exception e = make_execution_exception ("error");
 
   error_1 (e, os, name, id, fmt, args, with_cfn);
 }
diff --git a/libinterp/corefcn/error.h b/libinterp/corefcn/error.h
--- a/libinterp/corefcn/error.h
+++ b/libinterp/corefcn/error.h
@@ -38,84 +38,84 @@ extern OCTINTERP_API void reset_error_ha
 
 extern OCTINTERP_API int warning_enabled (const std::string& id);
 
 extern OCTINTERP_API void
 vmessage (const char *name, const char *fmt, va_list args);
 
 extern OCTINTERP_API void message (const char *name, const char *fmt, ...);
 
-GCC_ATTR_DEPRECATED GCC_ATTR_NORETURN OCTINTERP_API extern
+OCTAVE_DEPRECATED OCTAVE_NORETURN OCTINTERP_API extern
 void vusage (const char *fmt, va_list args);
 
-GCC_ATTR_DEPRECATED GCC_ATTR_NORETURN OCTINTERP_API extern
+OCTAVE_DEPRECATED OCTAVE_NORETURN OCTINTERP_API extern
 void usage (const char *fmt, ...);
 
 extern OCTINTERP_API void vwarning (const char *fmt, va_list args);
 extern OCTINTERP_API void warning (const char *fmt, ...);
 
-GCC_ATTR_NORETURN OCTINTERP_API extern
+OCTAVE_NORETURN OCTINTERP_API extern
 void verror (const char *fmt, va_list args);
 
-GCC_ATTR_NORETURN OCTINTERP_API extern
+OCTAVE_NORETURN OCTINTERP_API extern
 void error (const char *fmt, ...);
 
-GCC_ATTR_NORETURN OCTINTERP_API extern
+OCTAVE_NORETURN OCTINTERP_API extern
 void verror (octave_execution_exception&, const char *fmt, va_list args);
-GCC_ATTR_NORETURN OCTINTERP_API extern
+OCTAVE_NORETURN OCTINTERP_API extern
 void error (octave_execution_exception&, const char *fmt, ...);
 
-GCC_ATTR_NORETURN OCTINTERP_API extern
+OCTAVE_NORETURN OCTINTERP_API extern
 void verror_with_cfn (const char *fmt, va_list args);
-GCC_ATTR_NORETURN OCTINTERP_API extern
+OCTAVE_NORETURN OCTINTERP_API extern
 void error_with_cfn (const char *fmt, ...);
 
-GCC_ATTR_NORETURN OCTINTERP_API extern
+OCTAVE_NORETURN OCTINTERP_API extern
 void vparse_error (const char *fmt, va_list args);
-GCC_ATTR_NORETURN OCTINTERP_API extern
+OCTAVE_NORETURN OCTINTERP_API extern
 void parse_error (const char *fmt, ...);
 
 extern OCTINTERP_API void
 vmessage_with_id (const char *id, const char *name,
                   const char *fmt, va_list args);
 
 extern OCTINTERP_API void
 message_with_id (const char *id, const char *name, const char *fmt, ...);
 
-GCC_ATTR_NORETURN OCTINTERP_API extern
+OCTAVE_NORETURN OCTINTERP_API extern
 void vusage_with_id (const char *id, const char *fmt, va_list args);
 
-GCC_ATTR_NORETURN OCTINTERP_API extern
+OCTAVE_NORETURN OCTINTERP_API extern
 void usage_with_id (const char *id, const char *fmt, ...);
 
 extern OCTINTERP_API void
 vwarning_with_id (const char *id, const char *fmt, va_list args);
 
 extern OCTINTERP_API void
 warning_with_id (const char *id, const char *fmt, ...);
 
-GCC_ATTR_NORETURN OCTINTERP_API extern
+OCTAVE_NORETURN OCTINTERP_API extern
 void verror_with_id (const char *id, const char *fmt, va_list args);
 
-GCC_ATTR_NORETURN OCTINTERP_API extern
+OCTAVE_NORETURN OCTINTERP_API extern
 void error_with_id (const char *id, const char *fmt, ...);
 
-GCC_ATTR_NORETURN OCTINTERP_API extern
+OCTAVE_NORETURN OCTINTERP_API extern
 void verror_with_id_cfn (const char *id, const char *fmt, va_list args);
 
-GCC_ATTR_NORETURN OCTINTERP_API extern
+OCTAVE_NORETURN OCTINTERP_API extern
 void error_with_id_cfn (const char *id, const char *fmt, ...);
 
-GCC_ATTR_NORETURN OCTINTERP_API extern
+OCTAVE_NORETURN OCTINTERP_API extern
 void vparse_error_with_id (const char *id, const char *fmt, va_list args);
 
-GCC_ATTR_NORETURN OCTINTERP_API extern
+OCTAVE_NORETURN OCTINTERP_API extern
 void parse_error_with_id (const char *id, const char *fmt, ...);
 
-GCC_ATTR_NORETURN OCTINTERP_API extern
+OCTAVE_NORETURN OCTINTERP_API extern
 void panic (const char *fmt, ...);
 
 // Helper function for print_usage defined in defun.cc.
 extern OCTINTERP_API void defun_usage_message (const std::string& msg);
 
 extern OCTINTERP_API octave_value_list
 set_warning_state (const std::string& id, const std::string& state);
 
diff --git a/libinterp/corefcn/gripes.h b/libinterp/corefcn/gripes.h
--- a/libinterp/corefcn/gripes.h
+++ b/libinterp/corefcn/gripes.h
@@ -29,26 +29,26 @@ along with Octave; see the file COPYING.
 
 class octave_value;
 class octave_execution_exception;
 
 ////////////////////////////////////////////////////////////////////////////////
 // Alphabetized list of gripes.
 ////////////////////////////////////////////////////////////////////////////////
 
-GCC_ATTR_NORETURN OCTINTERP_API extern
+OCTAVE_NORETURN OCTINTERP_API extern
 void gripe_2_or_3_dim_plot (void);
 
-GCC_ATTR_NORETURN OCTINTERP_API extern
+OCTAVE_NORETURN OCTINTERP_API extern
 void gripe_data_conversion (const char *from, const char *to);
 
 extern OCTINTERP_API void
 gripe_data_file_in_path (const std::string& fcn, const std::string& file);
 
-GCC_ATTR_NORETURN OCTINTERP_API extern
+OCTAVE_NORETURN OCTINTERP_API extern
 void gripe_disabled_feature (const std::string& func,
                              const std::string& feature,
                              const std::string& pkg="Octave");
 
 extern OCTINTERP_API void
 gripe_divide_by_zero (void);
 
 extern OCTINTERP_API void
@@ -56,69 +56,69 @@ gripe_empty_arg (const char *name, bool 
 
 extern OCTINTERP_API void
 gripe_implicit_conversion (const char *id, const char *from, const char *to);
 
 extern OCTINTERP_API void
 gripe_implicit_conversion (const std::string& id, const std::string& from,
                            const std::string& to);
 
-GCC_ATTR_NORETURN OCTINTERP_API extern
+OCTAVE_NORETURN OCTINTERP_API extern
 void gripe_indexed_cs_list (void);
 
-GCC_ATTR_NORETURN OCTINTERP_API extern
+OCTAVE_NORETURN OCTINTERP_API extern
 void gripe_invalid_conversion (const std::string& from, const std::string& to);
 
-GCC_ATTR_NORETURN OCTINTERP_API extern
+OCTAVE_NORETURN OCTINTERP_API extern
 void gripe_invalid_inquiry_subscript (void);
 
 extern OCTINTERP_API void
 gripe_invalid_value_specified (const char *name);
 
 extern OCTINTERP_API void
 gripe_logical_conversion (void);
 
-GCC_ATTR_NORETURN OCTINTERP_API extern
+OCTAVE_NORETURN OCTINTERP_API extern
 void gripe_nonbraced_cs_list_assignment (void);
 
-GCC_ATTR_NORETURN OCTINTERP_API extern
+OCTAVE_NORETURN OCTINTERP_API extern
 void gripe_nonconformant (void);
 
-GCC_ATTR_NORETURN OCTINTERP_API extern
+OCTAVE_NORETURN OCTINTERP_API extern
 void gripe_nonconformant (octave_idx_type r1, octave_idx_type c1,
                           octave_idx_type r2, octave_idx_type c2);
 
-GCC_ATTR_NORETURN OCTINTERP_API extern
+OCTAVE_NORETURN OCTINTERP_API extern
 void gripe_not_implemented (const char *);
 
-GCC_ATTR_NORETURN OCTINTERP_API extern
+OCTAVE_NORETURN OCTINTERP_API extern
 void gripe_not_supported (const char *);
 
-GCC_ATTR_NORETURN OCTINTERP_API extern
+OCTAVE_NORETURN OCTINTERP_API extern
 void gripe_range_invalid (void);
 
-GCC_ATTR_NORETURN OCTINTERP_API extern
+OCTAVE_NORETURN OCTINTERP_API extern
 void gripe_square_matrix_required (const char *name);
 
-GCC_ATTR_NORETURN OCTINTERP_API extern
+OCTAVE_NORETURN OCTINTERP_API extern
 void gripe_string_invalid (void);
 
-GCC_ATTR_NORETURN OCTINTERP_API extern
+OCTAVE_NORETURN OCTINTERP_API extern
 void gripe_unrecognized_data_fmt (const char *warn_for);
 
-GCC_ATTR_NORETURN OCTINTERP_API extern
+OCTAVE_NORETURN OCTINTERP_API extern
 void gripe_unrecognized_float_fmt (void);
 
-GCC_ATTR_NORETURN OCTINTERP_API extern
+OCTAVE_NORETURN OCTINTERP_API extern
 void gripe_user_returned_invalid (const char *name);
 
-GCC_ATTR_NORETURN OCTINTERP_API extern
+OCTAVE_NORETURN OCTINTERP_API extern
 void gripe_user_supplied_eval (const char *name);
 
-GCC_ATTR_NORETURN OCTINTERP_API extern
+OCTAVE_NORETURN OCTINTERP_API extern
 void gripe_user_supplied_eval (octave_execution_exception& e, const char *name);
 
 extern OCTINTERP_API void
 gripe_warn_complex_cmp (void);
 
 extern OCTINTERP_API void
 gripe_wrong_type_arg (const char *name, const char *s,
                       bool is_error = true);
@@ -177,15 +177,15 @@ extern OCTINTERP_API void
 gripe_wrong_type_arg (const octave_value& tc,
                       bool is_error = true);
 
 extern OCTINTERP_API void
 gripe_wrong_type_arg (octave_execution_exception& e,
                       const octave_value& tc,
                       bool is_error = true);
 
-GCC_ATTR_NORETURN OCTINTERP_API extern
+OCTAVE_NORETURN OCTINTERP_API extern
 void gripe_wrong_type_arg_for_binary_op (const octave_value& op);
 
-GCC_ATTR_NORETURN OCTINTERP_API extern
+OCTAVE_NORETURN OCTINTERP_API extern
 void gripe_wrong_type_arg_for_unary_op (const octave_value& op);
 
 #endif
diff --git a/libinterp/corefcn/jit-typeinfo.cc b/libinterp/corefcn/jit-typeinfo.cc
--- a/libinterp/corefcn/jit-typeinfo.cc
+++ b/libinterp/corefcn/jit-typeinfo.cc
@@ -434,17 +434,17 @@ octave_jit_pow_scalar_complex (double lh
 }
 
 extern "C" void
 octave_jit_print_matrix (jit_matrix *m)
 {
   std::cout << *m << std::endl;
 }
 
-GCC_ATTR_NORETURN static
+OCTAVE_NORETURN static
 void
 gripe_bad_result (void)
 {
   error ("incorrect type information given to the JIT compiler");
 }
 
 // FIXME: Add support for multiple outputs
 extern "C" octave_base_value *
diff --git a/libinterp/corefcn/load-save.cc b/libinterp/corefcn/load-save.cc
--- a/libinterp/corefcn/load-save.cc
+++ b/libinterp/corefcn/load-save.cc
@@ -121,17 +121,17 @@ default_save_header_format (void)
     + std::string (">");
 }
 
 // The format string for the comment line at the top of text-format
 // save files.  Passed to strftime.  Should begin with '#' and contain
 // no newline characters.
 static std::string Vsave_header_format_string = default_save_header_format ();
 
-GCC_ATTR_NORETURN static
+OCTAVE_NORETURN static
 void
 gripe_file_open (const std::string& fcn, const std::string& file)
 {
   if (fcn == "load")
     error ("%s: unable to open input file '%s'", fcn.c_str (), file.c_str ());
   else if (fcn == "save")
     error ("%s: unable to open output file '%s'", fcn.c_str (), file.c_str ());
   else
diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -4150,17 +4150,17 @@ octave_stream_list::do_insert (octave_st
   if (list.size () >= list.max_size ())
     ::error ("could not create file id");
 
   list[stream_number] = os;
 
   return stream_number;
 }
 
-GCC_ATTR_NORETURN static
+OCTAVE_NORETURN static
 void
 gripe_invalid_file_id (int fid, const std::string& who)
 {
   if (who.empty ())
     ::error ("invalid stream number = %d", fid);
   else
     ::error ("%s: invalid stream number = %d", who.c_str (), fid);
 }
diff --git a/libinterp/corefcn/pt-jit.cc b/libinterp/corefcn/pt-jit.cc
--- a/libinterp/corefcn/pt-jit.cc
+++ b/libinterp/corefcn/pt-jit.cc
@@ -2506,17 +2506,17 @@ jit_info::find (const vmap& extra_vars, 
                                    : *iter->second;
 }
 
 #endif
 
 #if defined (HAVE_LLVM)
 #define UNUSED_WITHOUT_LLVM(x) x
 #else
-#define UNUSED_WITHOUT_LLVM(x) x GCC_ATTR_UNUSED
+#define UNUSED_WITHOUT_LLVM(x) x OCTAVE_UNUSED
 #endif
 
 DEFUN (jit_failcnt, UNUSED_WITHOUT_LLVM (args),
        UNUSED_WITHOUT_LLVM (nargout),
        "-*- texinfo -*-\n\
 @deftypefn  {} {@var{val} =} jit_failcnt ()\n\
 @deftypefnx {} {@var{old_val} =} jit_failcnt (@var{new_val})\n\
 @deftypefnx {} {} jit_failcnt (@var{new_val}, \"local\")\n\
diff --git a/libinterp/corefcn/symtab.h b/libinterp/corefcn/symtab.h
--- a/libinterp/corefcn/symtab.h
+++ b/libinterp/corefcn/symtab.h
@@ -1335,17 +1335,17 @@ public:
 
     symbol_table *inst = get_instance (scope);
 
     if (inst)
       inst->do_assign (name, value, context, force_add);
   }
 
   // Use assign (name, value, scope, context, force_add) instead.
-  GCC_ATTR_DEPRECATED static
+  OCTAVE_DEPRECATED static
   octave_value&
   varref (const std::string& name, scope_id scope = xcurrent_scope,
           context_id context = xdefault_context, bool force_add = false)
   {
     static octave_value foobar;
 
     symbol_table *inst = get_instance (scope);
 
@@ -1359,17 +1359,17 @@ public:
                             const octave_value& value = octave_value (),
                             scope_id scope = xcurrent_scope,
                             context_id context = xdefault_context)
   {
     assign (name, value, scope, context, true);
   }
 
   // Use force_assign (name, value, scope, context) instead.
-  GCC_ATTR_DEPRECATED static
+  OCTAVE_DEPRECATED static
   octave_value&
   force_varref (const std::string& name, scope_id scope = xcurrent_scope,
                 context_id context = xdefault_context)
   {
     static octave_value foobar;
 
     symbol_table *inst = get_instance (scope);
 
@@ -1394,17 +1394,17 @@ public:
 
     if (p == global_table.end ())
       global_table[name] = value;
     else
       p->second = value;
   }
 
   // Use global_assign (name, value) instead.
-  GCC_ATTR_DEPRECATED static
+  OCTAVE_DEPRECATED static
   octave_value&
   global_varref (const std::string& name)
 
   {
     global_table_iterator p = global_table.find (name);
 
     return (p == global_table.end ()) ? global_table[name] : p->second;
   }
@@ -1420,17 +1420,17 @@ public:
   static void
   top_level_assign (const std::string& name,
                     const octave_value& value = octave_value ())
   {
     assign (name, value, top_scope (), 0);
   }
 
   // Use top_level_assign (name, value) instead.
-  GCC_ATTR_DEPRECATED static
+  OCTAVE_DEPRECATED static
   octave_value&
   top_level_varref (const std::string& name)
   {
     static octave_value foobar;
 
     symbol_table *inst = get_instance (top_scope ());
 
     return inst ? inst->do_varref (name, 0, true) : foobar;
@@ -1448,17 +1448,17 @@ public:
   {
     symbol_table *inst = get_instance (xcurrent_scope);
 
     if (inst)
       inst->do_persistent_assign (name, value);
   }
 
   // Use persistent_assign (name, value) instead.
-  GCC_ATTR_DEPRECATED static
+  OCTAVE_DEPRECATED static
   octave_value&
   persistent_varref (const std::string& name)
   {
     static octave_value foobar;
 
     symbol_table *inst = get_instance (xcurrent_scope);
 
     return inst ? inst->do_persistent_varref (name) : foobar;
diff --git a/libinterp/corefcn/variables.h b/libinterp/corefcn/variables.h
--- a/libinterp/corefcn/variables.h
+++ b/libinterp/corefcn/variables.h
@@ -132,17 +132,17 @@ set_internal_variable (int& var, const o
 
 extern OCTINTERP_API std::string builtin_string_variable (const std::string&);
 extern OCTINTERP_API int builtin_real_scalar_variable (const std::string&,
                                                        double&);
 extern OCTINTERP_API octave_value builtin_any_variable (const std::string&);
 
 extern OCTINTERP_API void bind_ans (const octave_value& val, bool print);
 
-GCC_ATTR_DEPRECATED OCTINTERP_API extern
+OCTAVE_DEPRECATED OCTINTERP_API extern
 void bind_internal_variable (const std::string& fname, const octave_value& val);
 
 extern OCTINTERP_API void mlock (void);
 extern OCTINTERP_API void munlock (const std::string&);
 extern OCTINTERP_API bool mislocked (const std::string&);
 
 extern OCTINTERP_API void clear_function (const std::string& nm);
 extern OCTINTERP_API void clear_variable (const std::string& nm);
diff --git a/libinterp/octave-value/ov-base-sparse.h b/libinterp/octave-value/ov-base-sparse.h
--- a/libinterp/octave-value/ov-base-sparse.h
+++ b/libinterp/octave-value/ov-base-sparse.h
@@ -138,17 +138,17 @@ public:
   bool is_sparse_type (void) const { return true; }
 
   bool is_defined (void) const { return true; }
 
   bool is_constant (void) const { return true; }
 
   bool is_true (void) const;
 
-  GCC_ATTR_DEPRECATED octave_idx_type capacity (void) const { return nzmax (); }
+  OCTAVE_DEPRECATED octave_idx_type capacity (void) const { return nzmax (); }
 
   bool print_as_scalar (void) const;
 
   void print (std::ostream& os, bool pr_as_read_syntax = false);
 
   void print_info (std::ostream& os, const std::string& prefix) const;
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
diff --git a/libinterp/octave-value/ov-base.cc b/libinterp/octave-value/ov-base.cc
--- a/libinterp/octave-value/ov-base.cc
+++ b/libinterp/octave-value/ov-base.cc
@@ -1292,33 +1292,33 @@ octave_base_value::dump (std::ostream& o
 {
   dim_vector dv = this->dims ();
 
   os << "class: " << this->class_name ()
      << " type: " << this->type_name ()
      << " dims: " << dv.str ();
 }
 
-GCC_ATTR_NORETURN static
+OCTAVE_NORETURN static
 void
 gripe_indexed_assignment (const std::string& tn1, const std::string& tn2)
 {
   error ("assignment of '%s' to indexed '%s' not implemented",
          tn2.c_str (), tn1.c_str ());
 }
 
-GCC_ATTR_NORETURN static
+OCTAVE_NORETURN static
 void
 gripe_assign_conversion_failed (const std::string& tn1, const std::string& tn2)
 {
   error ("type conversion for assignment of '%s' to indexed '%s' failed",
          tn2.c_str (), tn1.c_str ());
 }
 
-GCC_ATTR_NORETURN static
+OCTAVE_NORETURN static
 void
 gripe_no_conversion (const std::string& on, const std::string& tn1,
                      const std::string& tn2)
 {
   error ("operator %s: no conversion for assignment of '%s' to indexed '%s'",
          on.c_str (), tn2.c_str (), tn1.c_str ());
 }
 
diff --git a/libinterp/octave-value/ov-base.h b/libinterp/octave-value/ov-base.h
--- a/libinterp/octave-value/ov-base.h
+++ b/libinterp/octave-value/ov-base.h
@@ -305,17 +305,17 @@ public:
     return dv(1);
   }
 
   virtual int ndims (void) const
   { return dims ().length (); }
 
   virtual octave_idx_type numel (void) const { return dims ().numel (); }
 
-  GCC_ATTR_DEPRECATED virtual octave_idx_type capacity (void) const
+  OCTAVE_DEPRECATED virtual octave_idx_type capacity (void) const
   { return numel (); }
 
   virtual size_t byte_size (void) const { return 0; }
 
   virtual octave_idx_type nnz (void) const;
 
   virtual octave_idx_type nzmax (void) const;
 
diff --git a/libinterp/octave-value/ov-class.cc b/libinterp/octave-value/ov-class.cc
--- a/libinterp/octave-value/ov-class.cc
+++ b/libinterp/octave-value/ov-class.cc
@@ -233,31 +233,31 @@ octave_class::get_current_method_class (
       // for any class, not specifically this one.
       if (fcn && (fcn->is_class_method () || fcn->is_class_constructor ()))
         retval = fcn->dispatch_class ();
     }
 
   return retval;
 }
 
-GCC_ATTR_NORETURN static
+OCTAVE_NORETURN static
 void
 gripe_invalid_index1 (void)
 {
   error ("invalid index for class");
 }
 
-GCC_ATTR_NORETURN static
+OCTAVE_NORETURN static
 void
 gripe_invalid_index_for_assignment (void)
 {
   error ("invalid index for class assignment");
 }
 
-GCC_ATTR_NORETURN static
+OCTAVE_NORETURN static
 void
 gripe_invalid_index_type (const std::string& nm, char t)
 {
   error ("%s cannot be indexed with %c", nm.c_str (), t);
 }
 
 Cell
 octave_class::dotref (const octave_value_list& idx)
diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -43,33 +43,33 @@ along with Octave; see the file COPYING.
 #include "symtab.h"
 #include "toplev.h"
 
 #include "Array.cc"
 
 // Define to 1 to enable debugging statements.
 #define DEBUG_TRACE 0
 
-GCC_ATTR_NORETURN static
+OCTAVE_NORETURN static
 void
 gripe_method_access (const std::string& from, const cdef_method& meth)
 {
   octave_value acc = meth.get ("Access");
   std::string acc_s;
 
   if (acc.is_string ())
     acc_s = acc.string_value ();
   else
     acc_s = "class-restricted";
 
   error ("%s: method `%s' has %s access and cannot be run in this context",
          from.c_str (), meth.get_name ().c_str (), acc_s.c_str ());
 }
 
-GCC_ATTR_NORETURN static
+OCTAVE_NORETURN static
 void
 gripe_property_access (const std::string& from, const cdef_property& prop,
                        bool is_set = false)
 {
   octave_value acc = prop.get (is_set ? "SetAccess" : "GetAccess");
   std::string acc_s;
 
   if (acc.is_string ())
diff --git a/libinterp/octave-value/ov-classdef.h b/libinterp/octave-value/ov-classdef.h
--- a/libinterp/octave-value/ov-classdef.h
+++ b/libinterp/octave-value/ov-classdef.h
@@ -170,17 +170,17 @@ protected:
   // Restricted copying
   cdef_object_rep (const cdef_object_rep&)
     : refcount (1) { }
 
 private:
   // No assignment
   cdef_object_rep& operator = (const cdef_object_rep& );
 
-  GCC_ATTR_NORETURN void gripe_invalid_object (const char *who) const
+  OCTAVE_NORETURN void gripe_invalid_object (const char *who) const
   { error ("%s: invalid object", who); }
 };
 
 class
 cdef_object
 {
 public:
   // FIXME: use a null object
diff --git a/libinterp/octave-value/ov.cc b/libinterp/octave-value/ov.cc
--- a/libinterp/octave-value/ov.cc
+++ b/libinterp/octave-value/ov.cc
@@ -2310,25 +2310,25 @@ do_binary_op (octave_value::compound_bin
         retval = f (*v1.rep, *v2.rep);
       else
         retval = decompose_binary_op (op, v1, v2);
     }
 
   return retval;
 }
 
-GCC_ATTR_NORETURN static
+OCTAVE_NORETURN static
 void
 gripe_cat_op (const std::string& tn1, const std::string& tn2)
 {
   error ("concatenation operator not implemented for '%s' by '%s' operations",
          tn1.c_str (), tn2.c_str ());
 }
 
-GCC_ATTR_NORETURN static
+OCTAVE_NORETURN static
 void
 gripe_cat_op_conv (void)
 {
   error ("type conversion failed for concatenation operator");
 }
 
 octave_value
 do_cat_op (const octave_value& v1, const octave_value& v2,
diff --git a/libinterp/octave-value/ov.h b/libinterp/octave-value/ov.h
--- a/libinterp/octave-value/ov.h
+++ b/libinterp/octave-value/ov.h
@@ -237,21 +237,21 @@ public:
   octave_value (const Array<bool>& bnda);
   octave_value (char c, char type = '\'');
   octave_value (const char *s, char type = '\'');
   octave_value (const std::string& s, char type = '\'');
   octave_value (const string_vector& s, char type = '\'');
   octave_value (const charMatrix& chm,  char type = '\'');
   octave_value (const charNDArray& chnda, char type = '\'');
   octave_value (const Array<char>& chnda, char type = '\'');
-  GCC_ATTR_DEPRECATED octave_value (const charMatrix& chm, bool is_string,
+  OCTAVE_DEPRECATED octave_value (const charMatrix& chm, bool is_string,
                                     char type = '\'');
-  GCC_ATTR_DEPRECATED octave_value (const charNDArray& chnda, bool is_string,
+  OCTAVE_DEPRECATED octave_value (const charNDArray& chnda, bool is_string,
                                     char type = '\'');
-  GCC_ATTR_DEPRECATED octave_value (const Array<char>& chnda, bool is_string,
+  OCTAVE_DEPRECATED octave_value (const Array<char>& chnda, bool is_string,
                                     char type = '\'');
   octave_value (const SparseMatrix& m, const MatrixType& t = MatrixType ());
   octave_value (const Sparse<double>& m, const MatrixType& t = MatrixType ());
   octave_value (const SparseComplexMatrix& m,
                 const MatrixType& t = MatrixType ());
   octave_value (const Sparse<Complex>& m, const MatrixType& t = MatrixType ());
   octave_value (const SparseBoolMatrix& bm,
                 const MatrixType& t = MatrixType ());
@@ -291,17 +291,17 @@ public:
   octave_value (const octave_map& m, const std::string& id,
                 const std::list<std::string>& plist);
   octave_value (const octave_scalar_map& m, const std::string& id,
                 const std::list<std::string>& plist);
   octave_value (const octave_value_list& m, bool = false);
   octave_value (octave_value::magic_colon);
 
   octave_value (octave_base_value *new_rep, bool borrow = false);
-  GCC_ATTR_DEPRECATED octave_value (octave_base_value *new_rep, int xcount);
+  OCTAVE_DEPRECATED octave_value (octave_base_value *new_rep, int xcount);
 
   // Copy constructor.
 
   octave_value (const octave_value& a)
   {
     rep = a.rep;
     rep->count++;
   }
@@ -476,17 +476,17 @@ public:
 
   int ndims (void) const { return rep->ndims (); }
 
   bool all_zero_dims (void) const { return dims ().all_zero (); }
 
   octave_idx_type numel (void) const
   { return rep->numel (); }
 
-  GCC_ATTR_DEPRECATED octave_idx_type capacity (void) const
+  OCTAVE_DEPRECATED octave_idx_type capacity (void) const
   { return rep->numel (); }
 
   size_t byte_size (void) const
   { return rep->byte_size (); }
 
   octave_idx_type nnz (void) const { return rep->nnz (); }
 
   octave_idx_type nzmax (void) const { return rep->nzmax (); }
@@ -887,17 +887,17 @@ public:
   { return rep->uint64_array_value (); }
 
   std::string string_value (bool force = false) const
   { return rep->string_value (force); }
 
   string_vector string_vector_value (bool pad = false) const
   { return rep->string_vector_value (pad); }
 
-  GCC_ATTR_DEPRECATED string_vector all_strings (bool pad = false) const
+  OCTAVE_DEPRECATED string_vector all_strings (bool pad = false) const
   { return string_vector_value (pad); }
 
   Cell cell_value (void) const;
 
   Array<std::string> cellstr_value (void) const
   { return rep->cellstr_value (); }
 
   Range range_value (void) const
diff --git a/libinterp/octave.cc b/libinterp/octave.cc
--- a/libinterp/octave.cc
+++ b/libinterp/octave.cc
@@ -451,28 +451,28 @@ execute_command_line_file (const std::st
 
   std::string context;
   bool verbose = false;
   bool require_file = true;
 
   safe_source_file (fname, context, verbose, require_file, "octave");
 }
 
-GCC_ATTR_NORETURN static void
+OCTAVE_NORETURN static void
 lo_error_handler (const char *fmt, ...)
 {
   va_list args;
   va_start (args, fmt);
   verror_with_cfn (fmt, args);
   va_end (args);
 
   octave_throw_execution_exception ();
 }
 
-GCC_ATTR_NORETURN static void
+OCTAVE_NORETURN static void
 lo_error_with_id_handler (const char *id, const char *fmt, ...)
 {
   va_list args;
   va_start (args, fmt);
   verror_with_id_cfn (id, fmt, args);
   va_end (args);
 
   octave_throw_execution_exception ();
diff --git a/libinterp/parse-tree/pt-mat.cc b/libinterp/parse-tree/pt-mat.cc
--- a/libinterp/parse-tree/pt-mat.cc
+++ b/libinterp/parse-tree/pt-mat.cc
@@ -268,17 +268,17 @@ get_concat_class (const std::string& c1,
         retval = c2;
       else if (c1_is_logical && c2_is_logical)
         retval = c1;
     }
 
   return retval;
 }
 
-GCC_ATTR_NORETURN static
+OCTAVE_NORETURN static
 void
 eval_error (const char *msg, const dim_vector& x, const dim_vector& y)
 {
   error ("%s (%s vs %s)", msg, x.str ().c_str (), y.str ().c_str ());
 }
 
 void
 tm_row_const::tm_row_const_rep::do_init_element (const octave_value& val,
diff --git a/liboctave/array/Array.h b/liboctave/array/Array.h
--- a/liboctave/array/Array.h
+++ b/liboctave/array/Array.h
@@ -249,34 +249,34 @@ public:
   void clear (octave_idx_type r, octave_idx_type c)
   { clear (dim_vector (r, c)); }
 
   // Number of elements in the array. These are all synonyms.
   //@{
   //! Number of elements in the array.
   //! Synonymous with numel().
   //! @note This method is deprecated in favour of numel().
-  GCC_ATTR_DEPRECATED octave_idx_type capacity (void) const { return numel (); }
+  OCTAVE_DEPRECATED octave_idx_type capacity (void) const { return numel (); }
 
   //! Number of elements in the array.
   /*! Synonymous with numel().
       @note This method is deprecated in favour of numel().
 
       @note
       This is @em not the same as @c %length() at the Octave interpreter.
       At the Octave interpreter, the function @c %length() returns the
       length of the greatest dimension.  This method returns the total
       number of elements.
    */
-  GCC_ATTR_DEPRECATED octave_idx_type length (void) const { return numel (); }
+  OCTAVE_DEPRECATED octave_idx_type length (void) const { return numel (); }
 
   //! Number of elements in the array.
   //! Synonymous with numel().
   //! @note This method is deprecated in favour of numel().
-  GCC_ATTR_DEPRECATED octave_idx_type nelem (void) const { return numel (); }
+  OCTAVE_DEPRECATED octave_idx_type nelem (void) const { return numel (); }
 
   //! Number of elements in the array.
   octave_idx_type numel (void) const { return slice_len; }
   //@}
 
   //! Return the array as a column vector.
   Array<T> as_column (void) const
   {
diff --git a/liboctave/array/DiagArray2.h b/liboctave/array/DiagArray2.h
--- a/liboctave/array/DiagArray2.h
+++ b/liboctave/array/DiagArray2.h
@@ -92,17 +92,17 @@ public:
   octave_idx_type length (void) const { return Array<T>::numel (); }
   octave_idx_type nelem (void) const { return dim1 () * dim2 (); }
   octave_idx_type numel (void) const { return nelem (); }
 
   size_t byte_size (void) const { return Array<T>::byte_size (); }
 
   dim_vector dims (void) const { return dim_vector (d1, d2); }
 
-  GCC_ATTR_DEPRECATED Array<T> diag (octave_idx_type k = 0) const;
+  OCTAVE_DEPRECATED Array<T> diag (octave_idx_type k = 0) const;
   Array<T> extract_diag (octave_idx_type k = 0) const;
   DiagArray2<T> build_diag_matrix () const
   {
     return DiagArray2<T> (array_value ());
   }
 
   // Warning: the non-const two-index versions will silently ignore assignments
   // to off-diagonal elements.
diff --git a/liboctave/array/PermMatrix.h b/liboctave/array/PermMatrix.h
--- a/liboctave/array/PermMatrix.h
+++ b/liboctave/array/PermMatrix.h
@@ -32,23 +32,23 @@ along with Octave; see the file COPYING.
 class OCTAVE_API PermMatrix : protected Array<octave_idx_type>
 {
 public:
 
   PermMatrix (void) : Array<octave_idx_type> () { }
 
   PermMatrix (octave_idx_type n);
 
-  GCC_ATTR_DEPRECATED PermMatrix (const Array<octave_idx_type>& p);
+  OCTAVE_DEPRECATED PermMatrix (const Array<octave_idx_type>& p);
 
   PermMatrix (const Array<octave_idx_type>& p, bool colp, bool check = true);
 
   PermMatrix (const PermMatrix& m) : Array<octave_idx_type> (m) { }
 
-  GCC_ATTR_DEPRECATED PermMatrix (const idx_vector& idx);
+  OCTAVE_DEPRECATED PermMatrix (const idx_vector& idx);
 
   PermMatrix (const idx_vector& idx, bool colp, octave_idx_type n = 0);
 
   octave_idx_type dim1 (void) const
   { return Array<octave_idx_type>::numel (); }
   octave_idx_type dim2 (void) const
   { return Array<octave_idx_type>::numel (); }
 
@@ -56,17 +56,17 @@ public:
   octave_idx_type cols (void) const { return dim2 (); }
   octave_idx_type columns (void) const { return dim2 (); }
 
   octave_idx_type perm_length (void) const
   { return Array<octave_idx_type>::numel (); }
   // FIXME: a dangerous ambiguity?
   octave_idx_type length (void) const
   { return perm_length (); }
-  GCC_ATTR_DEPRECATED octave_idx_type nelem (void) const { return numel (); }
+  OCTAVE_DEPRECATED octave_idx_type nelem (void) const { return numel (); }
   octave_idx_type numel (void) const { return dim1 () * dim2 (); }
 
   size_t byte_size (void) const
   { return Array<octave_idx_type>::byte_size (); }
 
   dim_vector dims (void) const { return dim_vector (dim1 (), dim2 ()); }
 
   const Array<octave_idx_type>& col_perm_vec (void) const
diff --git a/liboctave/array/Range.h b/liboctave/array/Range.h
--- a/liboctave/array/Range.h
+++ b/liboctave/array/Range.h
@@ -93,17 +93,17 @@ public:
         if (tmplimit != rng_limit)
           rng_limit = tmplimit;
       }
   }
 
   double base (void) const { return rng_base; }
   double limit (void) const { return rng_limit; }
   double inc (void) const { return rng_inc; }
-  GCC_ATTR_DEPRECATED octave_idx_type nelem (void) const { return numel (); }
+  OCTAVE_DEPRECATED octave_idx_type nelem (void) const { return numel (); }
   octave_idx_type numel (void) const { return rng_numel; }
   bool is_empty (void) const { return numel () == 0; }
 
   bool all_elements_are_ints (void) const;
 
   Matrix matrix_value (void) const;
 
   double min (void) const;
diff --git a/liboctave/array/Sparse.h b/liboctave/array/Sparse.h
--- a/liboctave/array/Sparse.h
+++ b/liboctave/array/Sparse.h
@@ -240,29 +240,29 @@ public:
 
   Sparse<T>& operator = (const Sparse<T>& a);
 
   //! Amount of storage for nonzero elements.
   //! This may differ from the actual number of elements, see nnz().
   octave_idx_type nzmax (void) const { return rep->length (); }
   //! Amount of storage for nonzero elements.
   //! Synonymous with nzmax().
-  GCC_ATTR_DEPRECATED octave_idx_type capacity (void) const { return nzmax (); }
+  OCTAVE_DEPRECATED octave_idx_type capacity (void) const { return nzmax (); }
   //! Actual number of nonzero terms.
   octave_idx_type nnz (void) const { return rep->nnz (); }
 
   // Querying the number of elements (incl. zeros) may overflow the index type,
   // so don't do it unless you really need it.
   octave_idx_type numel (void) const
   {
     return dimensions.safe_numel ();
   }
 
-  GCC_ATTR_DEPRECATED octave_idx_type nelem (void) const { return nzmax (); }
-  GCC_ATTR_DEPRECATED octave_idx_type length (void) const { return numel (); }
+  OCTAVE_DEPRECATED octave_idx_type nelem (void) const { return nzmax (); }
+  OCTAVE_DEPRECATED octave_idx_type length (void) const { return numel (); }
 
   octave_idx_type dim1 (void) const { return dimensions(0); }
   octave_idx_type dim2 (void) const { return dimensions(1); }
 
   octave_idx_type rows (void) const { return dim1 (); }
   octave_idx_type cols (void) const { return dim2 (); }
   octave_idx_type columns (void) const { return dim2 (); }
 
diff --git a/liboctave/array/dSparse.h b/liboctave/array/dSparse.h
--- a/liboctave/array/dSparse.h
+++ b/liboctave/array/dSparse.h
@@ -116,23 +116,23 @@ public:
   SparseMatrix concat (const SparseMatrix& rb,
                        const Array<octave_idx_type>& ra_idx);
   SparseComplexMatrix concat (const SparseComplexMatrix& rb,
                               const Array<octave_idx_type>& ra_idx);
 
   friend OCTAVE_API SparseMatrix real (const SparseComplexMatrix& a);
   friend OCTAVE_API SparseMatrix imag (const SparseComplexMatrix& a);
 
-  GCC_ATTR_DEPRECATED OCTAVE_API friend 
+  OCTAVE_DEPRECATED OCTAVE_API friend 
   SparseMatrix atan2 (const double& x, const SparseMatrix& y);
 
-  GCC_ATTR_DEPRECATED OCTAVE_API friend 
+  OCTAVE_DEPRECATED OCTAVE_API friend 
   SparseMatrix atan2 (const SparseMatrix& x, const double& y);
 
-  GCC_ATTR_DEPRECATED OCTAVE_API friend 
+  OCTAVE_DEPRECATED OCTAVE_API friend 
   SparseMatrix atan2 (const SparseMatrix& x, const SparseMatrix& y);
 
   SparseMatrix transpose (void) const
   {
     return MSparse<double>::transpose ();
   }
   SparseMatrix hermitian (void) const { return transpose (); }
 
diff --git a/liboctave/cruft/misc/f77-fcn.h b/liboctave/cruft/misc/f77-fcn.h
--- a/liboctave/cruft/misc/f77-fcn.h
+++ b/liboctave/cruft/misc/f77-fcn.h
@@ -278,17 +278,17 @@ octave_make_cray_const_ftn_ch_dsc (const
    Needs to include <cstring> and <vector>.  */
 
 #define F77_CSTRING(s, len, cs) \
  OCTAVE_LOCAL_BUFFER (char, cs, F77_CHAR_ARG_LEN_USE (s, len) + 1); \
  memcpy (cs, F77_CHAR_ARG_USE (s), F77_CHAR_ARG_LEN_USE (s, len)); \
  cs[F77_CHAR_ARG_LEN_USE(s, len)] = '\0'
 
 
-GCC_ATTR_NORETURN CRUFT_API extern
+OCTAVE_NORETURN CRUFT_API extern
 F77_RET_T 
 F77_FUNC (xstopx, XSTOPX) (F77_CONST_CHAR_ARG_DECL
                            F77_CHAR_ARG_LEN_DECL);
 
 #ifdef __cplusplus
 }
 #endif
 
diff --git a/liboctave/cruft/misc/lo-error.c b/liboctave/cruft/misc/lo-error.c
--- a/liboctave/cruft/misc/lo-error.c
+++ b/liboctave/cruft/misc/lo-error.c
@@ -29,21 +29,21 @@ along with Octave; see the file COPYING.
 #include <stdlib.h>
 
 #include "lo-error.h"
 
 /* Having this file in this directory is a kluge to avoid unresolved
    symbol errors when creating shared versions of libcruft. */
 
 /* Pointer to the current error handling function. */
-GCC_ATTR_NORETURN liboctave_error_handler current_liboctave_error_handler
+OCTAVE_NORETURN liboctave_error_handler current_liboctave_error_handler
   = liboctave_fatal;
 
 /* Pointer to the current error_with_id handling function. */
-GCC_ATTR_NORETURN liboctave_error_with_id_handler current_liboctave_error_with_id_handler
+OCTAVE_NORETURN liboctave_error_with_id_handler current_liboctave_error_with_id_handler
   = liboctave_fatal_with_id;
 
 /* Pointer to the current warning handler. */
 liboctave_warning_handler current_liboctave_warning_handler
   = liboctave_warning;
 
 /* Pointer to the current warning_with_id handler. */
 liboctave_warning_with_id_handler current_liboctave_warning_with_id_handler
@@ -56,26 +56,26 @@ verror (const char *name, const char *fm
     fprintf (stderr, "%s: ", name);
 
   vfprintf (stderr, fmt, args);
   fprintf (stderr, "\n");
   fflush (stderr);
 }
 
 void
-set_liboctave_error_handler (GCC_ATTR_NORETURN liboctave_error_handler f)
+set_liboctave_error_handler (OCTAVE_NORETURN liboctave_error_handler f)
 {
   if (f)
     current_liboctave_error_handler = f;
   else
     current_liboctave_error_handler = liboctave_fatal;
 }
 
 void
-set_liboctave_error_with_id_handler (GCC_ATTR_NORETURN liboctave_error_with_id_handler f)
+set_liboctave_error_with_id_handler (OCTAVE_NORETURN liboctave_error_with_id_handler f)
 {
   if (f)
     current_liboctave_error_with_id_handler = f;
   else
     current_liboctave_error_with_id_handler = liboctave_fatal_with_id;
 }
 
 void
diff --git a/liboctave/cruft/misc/lo-error.h b/liboctave/cruft/misc/lo-error.h
--- a/liboctave/cruft/misc/lo-error.h
+++ b/liboctave/cruft/misc/lo-error.h
@@ -22,46 +22,46 @@ along with Octave; see the file COPYING.
 
 #if ! defined (octave_lo_error_h)
 #define octave_lo_error_h 1
 
 #ifdef __cplusplus
 extern "C" {
 #endif
 
-GCC_ATTR_NORETURN extern void liboctave_fatal (const char *fmt, ...);
+OCTAVE_NORETURN extern void liboctave_fatal (const char *fmt, ...);
 
-GCC_ATTR_NORETURN extern
+OCTAVE_NORETURN extern
 void liboctave_fatal_with_id (const char *id, const char *fmt, ...);
 
 extern void liboctave_warning (const char *fmt, ...);
 
 extern void liboctave_warning_with_id (const char *id, const char *fmt, ...);
 
 typedef void (*liboctave_error_handler) (const char *, ...);
 
 typedef void (*liboctave_error_with_id_handler) (const char *, const char *, ...);
 
 typedef void (*liboctave_warning_handler) (const char *, ...);
 
 typedef void (*liboctave_warning_with_id_handler) (const char *, const char *, ...);
 
 /* Would be nice to make these pointers private, but we want to share
    them among all the liboctave classes. */
-GCC_ATTR_NORETURN CRUFT_API extern liboctave_error_handler current_liboctave_error_handler;
+OCTAVE_NORETURN CRUFT_API extern liboctave_error_handler current_liboctave_error_handler;
 
-GCC_ATTR_NORETURN CRUFT_API extern liboctave_error_with_id_handler current_liboctave_error_with_id_handler;
+OCTAVE_NORETURN CRUFT_API extern liboctave_error_with_id_handler current_liboctave_error_with_id_handler;
 
 CRUFT_API extern liboctave_warning_handler current_liboctave_warning_handler;
 
 CRUFT_API extern liboctave_warning_with_id_handler current_liboctave_warning_with_id_handler;
 
-CRUFT_API extern void set_liboctave_error_handler (GCC_ATTR_NORETURN liboctave_error_handler f);
+CRUFT_API extern void set_liboctave_error_handler (OCTAVE_NORETURN liboctave_error_handler f);
 
-CRUFT_API extern void set_liboctave_error_with_id_handler (GCC_ATTR_NORETURN liboctave_error_with_id_handler f);
+CRUFT_API extern void set_liboctave_error_with_id_handler (OCTAVE_NORETURN liboctave_error_with_id_handler f);
 
 CRUFT_API extern void set_liboctave_warning_handler (liboctave_warning_handler f);
 
 CRUFT_API extern void set_liboctave_warning_with_id_handler (liboctave_warning_with_id_handler f);
 
 #ifdef __cplusplus
 }
 #endif
diff --git a/liboctave/cruft/misc/quit.h b/liboctave/cruft/misc/quit.h
--- a/liboctave/cruft/misc/quit.h
+++ b/liboctave/cruft/misc/quit.h
@@ -61,17 +61,17 @@ typedef jmp_buf octave_jmp_buf;
 #endif
 
 CRUFT_API extern octave_jmp_buf current_context;
 
 CRUFT_API extern void octave_save_current_context (void *);
 
 CRUFT_API extern void octave_restore_current_context (void *);
 
-GCC_ATTR_NORETURN CRUFT_API extern void octave_jump_to_enclosing_context (void);
+OCTAVE_NORETURN CRUFT_API extern void octave_jump_to_enclosing_context (void);
 
 CRUFT_API extern void octave_save_signal_mask (void);
 
 CRUFT_API extern void octave_restore_signal_mask (void);
 
 #ifdef __cplusplus
 class
 octave_execution_exception
@@ -136,21 +136,21 @@ CRUFT_API extern sig_atomic_t octave_int
 CRUFT_API extern sig_atomic_t octave_interrupt_state;
 
 CRUFT_API extern sig_atomic_t octave_exception_state;
 
 CRUFT_API extern volatile sig_atomic_t octave_signal_caught;
 
 CRUFT_API extern void octave_handle_signal (void);
 
-GCC_ATTR_NORETURN CRUFT_API extern void octave_throw_interrupt_exception (void);
+OCTAVE_NORETURN CRUFT_API extern void octave_throw_interrupt_exception (void);
 
-GCC_ATTR_NORETURN CRUFT_API extern void octave_throw_execution_exception (void);
+OCTAVE_NORETURN CRUFT_API extern void octave_throw_execution_exception (void);
 
-GCC_ATTR_NORETURN CRUFT_API extern void octave_throw_bad_alloc (void);
+OCTAVE_NORETURN CRUFT_API extern void octave_throw_bad_alloc (void);
 
 CRUFT_API extern void octave_rethrow_exception (void);
 
 #ifdef __cplusplus
 inline void octave_quit (void)
 {
   if (octave_signal_caught)
     {
diff --git a/liboctave/numeric/SparseCmplxQR.cc b/liboctave/numeric/SparseCmplxQR.cc
--- a/liboctave/numeric/SparseCmplxQR.cc
+++ b/liboctave/numeric/SparseCmplxQR.cc
@@ -44,17 +44,17 @@ typedef double _Complex cs_complex_t;
 #else
 #define OCTAVE_C99_COMPLEX(buf, n) \
   OCTAVE_LOCAL_BUFFER (cs_complex_t, buf, (n));
 #define OCTAVE_C99_ZERO cs_complex_t(0., 0.);
 #define OCTAVE_C99_ONE cs_complex_t(1., 0.);
 #endif
 
 SparseComplexQR::SparseComplexQR_rep::SparseComplexQR_rep
-  (GCC_ATTR_UNUSED const SparseComplexMatrix& a, GCC_ATTR_UNUSED int order)
+  (OCTAVE_UNUSED const SparseComplexMatrix& a, OCTAVE_UNUSED int order)
   : count (1), nrows (0)
 #ifdef HAVE_CXSPARSE
     , S (0), N (0)
 #endif
 {
 #ifdef HAVE_CXSPARSE
   CXSPARSE_ZNAME () A;
   A.nzmax = a.nnz ();
diff --git a/liboctave/util/lo-array-gripes.h b/liboctave/util/lo-array-gripes.h
--- a/liboctave/util/lo-array-gripes.h
+++ b/liboctave/util/lo-array-gripes.h
@@ -104,64 +104,64 @@ extern OCTAVE_API const char *error_id_n
 extern OCTAVE_API const char *error_id_index_out_of_bounds;
 
 extern OCTAVE_API const char *error_id_invalid_index;
 
 extern OCTAVE_API const char *warning_id_nearly_singular_matrix;
 
 extern OCTAVE_API const char *warning_id_singular_matrix;
 
-GCC_ATTR_NORETURN OCTAVE_API extern void 
+OCTAVE_NORETURN OCTAVE_API extern void 
 gripe_nan_to_logical_conversion (void);
 
-GCC_ATTR_NORETURN OCTAVE_API extern void 
+OCTAVE_NORETURN OCTAVE_API extern void 
 gripe_nan_to_character_conversion (void);
 
-GCC_ATTR_NORETURN OCTAVE_API extern void 
+OCTAVE_NORETURN OCTAVE_API extern void 
 gripe_nonconformant (const char *op,
                      octave_idx_type op1_len,
                      octave_idx_type op2_len);
 
-GCC_ATTR_NORETURN OCTAVE_API extern void 
+OCTAVE_NORETURN OCTAVE_API extern void 
 gripe_nonconformant (const char *op,
                      octave_idx_type op1_nr, octave_idx_type op1_nc,
                      octave_idx_type op2_nr, octave_idx_type op2_nc);
 
 
-GCC_ATTR_NORETURN OCTAVE_API extern void 
+OCTAVE_NORETURN OCTAVE_API extern void 
 gripe_nonconformant (const char *op, const dim_vector& op1_dims,
                      const dim_vector& op2_dims);
 
-GCC_ATTR_NORETURN OCTAVE_API extern void 
+OCTAVE_NORETURN OCTAVE_API extern void 
 gripe_index_out_of_range (int nd, int dim,
                           octave_idx_type iext, octave_idx_type ext,
                           const dim_vector& d);
 
-GCC_ATTR_NORETURN OCTAVE_API extern void 
+OCTAVE_NORETURN OCTAVE_API extern void 
 gripe_index_out_of_range (int nd, int dim,
                           octave_idx_type iext, octave_idx_type ext);
 
-GCC_ATTR_NORETURN OCTAVE_API extern void 
+OCTAVE_NORETURN OCTAVE_API extern void 
 gripe_del_index_out_of_range (bool is1d, octave_idx_type iext,
                               octave_idx_type ext);
 
-GCC_ATTR_NORETURN OCTAVE_API extern void 
+OCTAVE_NORETURN OCTAVE_API extern void 
 gripe_invalid_index (double, octave_idx_type nd = 0,
                      octave_idx_type dim = 0,
                      const std::string& var = "");
 
-GCC_ATTR_NORETURN OCTAVE_API extern void 
+OCTAVE_NORETURN OCTAVE_API extern void 
 gripe_invalid_index (octave_idx_type n, octave_idx_type nd = 0,
                      octave_idx_type dim = 0,
                      const std::string& var = "");
 
-GCC_ATTR_NORETURN OCTAVE_API extern void 
+OCTAVE_NORETURN OCTAVE_API extern void 
 gripe_invalid_index (const std::string& idx, octave_idx_type nd = 0,
                      octave_idx_type dim = 0,
                      const std::string& var = "");
 
-GCC_ATTR_NORETURN OCTAVE_API extern void
+OCTAVE_NORETURN OCTAVE_API extern void
 gripe_invalid_resize (void);
 
 extern void OCTAVE_API
 gripe_singular_matrix (double rcond = 0.0);
 
 #endif
diff --git a/liboctave/util/unwind-prot.h b/liboctave/util/unwind-prot.h
--- a/liboctave/util/unwind-prot.h
+++ b/liboctave/util/unwind-prot.h
@@ -45,51 +45,51 @@ public:
 
   ~unwind_protect (void) { run (); }
 
   virtual void add (elem *new_elem)
   {
     lifo.push (new_elem);
   }
 
-  GCC_ATTR_DEPRECATED void add (void (*fcn) (void *), void *ptr = 0)
+  OCTAVE_DEPRECATED void add (void (*fcn) (void *), void *ptr = 0)
   {
     add (new fcn_arg_elem<void *> (fcn, ptr));
   }
 
   operator bool (void) const { return ! empty (); }
 
-  GCC_ATTR_DEPRECATED void run_top (void) { run_first (); }
+  OCTAVE_DEPRECATED void run_top (void) { run_first (); }
 
   void run_first (void)
   {
     if (! empty ())
       {
         // No leak on exception!
         std::auto_ptr<elem> ptr (lifo.top ());
         lifo.pop ();
         ptr->run ();
       }
   }
 
-  GCC_ATTR_DEPRECATED void run_top (int num) { run (num); }
+  OCTAVE_DEPRECATED void run_top (int num) { run (num); }
 
-  GCC_ATTR_DEPRECATED void discard_top (void) { discard_first (); }
+  OCTAVE_DEPRECATED void discard_top (void) { discard_first (); }
 
   void discard_first (void)
   {
     if (! empty ())
       {
         elem *ptr = lifo.top ();
         lifo.pop ();
         delete ptr;
       }
   }
 
-  GCC_ATTR_DEPRECATED void discard_top (int num) { discard (num); }
+  OCTAVE_DEPRECATED void discard_top (int num) { discard (num); }
 
   size_t size (void) const { return lifo.size (); }
 
 protected:
 
   std::stack<elem *> lifo;
 
 private:
diff --git a/oct-conf-post.in.h b/oct-conf-post.in.h
--- a/oct-conf-post.in.h
+++ b/oct-conf-post.in.h
@@ -19,29 +19,39 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #if !defined (GNULIB_NAMESPACE)
 #define GNULIB_NAMESPACE gnulib
 #endif
 
-#if defined (__GNUC__)
-#define GCC_ATTR_DEPRECATED __attribute__ ((__deprecated__))
-#define HAVE_ATTR_DEPRECATED
-
-#define GCC_ATTR_NORETURN __attribute__ ((__noreturn__))
-#define HAVE_ATTR_NORETURN
+// The C++ standard is evolving to allow attribute hints in a
+// compiler-independent manner.  In C++ 2011 support for noreturn was added.
+// In C++ 2014 support for deprecated was added.  The Octave code base has
+// been future-proofed by using macros of the form OCTAVE_ATTRIBUTE_NAME in
+// place of vendor specific attribute mechanisms.  As compilers evolve, the
+// underlying implementation can be changed with the macro definitions below.
+// FIXME: Update macros to use C++ standard attribute syntax when Octave moves
+//        to C++ 2011 standard.
 
-#define GCC_ATTR_UNUSED __attribute__ ((__unused__))
-#define HAVE_ATTR_UNUSED
+#if defined (__GNUC__)
+  // The following attributes are used with gcc and clang compilers.
+  #define OCTAVE_DEPRECATED __attribute__ ((__deprecated__))
+  #define HAVE_ATTR_DEPRECATED
+
+  #define OCTAVE_NORETURN __attribute__ ((__noreturn__))
+  #define HAVE_ATTR_NORETURN
+
+  #define OCTAVE_UNUSED __attribute__ ((__unused__))
+  #define HAVE_ATTR_UNUSED
 #else
-#define GCC_ATTR_DEPRECATED
-#define GCC_ATTR_NORETURN
-#define GCC_ATTR_UNUSED
+  #define OCTAVE_DEPRECATED
+  #define OCTAVE_NORETURN
+  #define OCTAVE_UNUSED
 #endif
 
 #define X_CAST(T, E) (T) (E)
 
 #if defined (CXX_BROKEN_REINTERPRET_CAST)
 #define FCN_PTR_CAST(T, E) (T) (E)
 #else
 #define FCN_PTR_CAST(T, E) reinterpret_cast<T> (E)
@@ -113,16 +123,19 @@ typedef unsigned long ino_t;
 #define OCTAVE_ENSURE_LONG_DOUBLE_OPERATIONS_ARE_NOT_TRUNCATED 1
 # endif
 #endif
 
 #define OCTAVE_EMPTY_CPP_ARG
 
 /* oct-dlldefs.h */
 
+// FIXME: GCC supports visibility attributes as well, even using the
+// same __declspec declaration if desired.  The build system should be
+// extended to support GCC and visibility attributes.
 #if defined (_MSC_VER)
 #define OCTAVE_EXPORT __declspec(dllexport)
 #define OCTAVE_IMPORT __declspec(dllimport)
 #else
 /* All other compilers, at least for now. */
 #define OCTAVE_EXPORT
 #define OCTAVE_IMPORT
 #endif
