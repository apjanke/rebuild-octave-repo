# HG changeset patch
# User jwe
# Date 1037132844 0
#      Tue Nov 12 20:27:24 2002 +0000
# Node ID 04694e5b4239a34b7fb5a5eb051e04c7bfe478ca
# Parent  8b1da831dfeb4df397efb10988b20c699d2acb34
[project @ 2002-11-12 20:27:24 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2002-11-12  Paul Kienzle <pkienzle@users.sf.net>
+
+	* statistics/base/var.m: Use better formula for improved accuracy.
+
 2002-11-04  Nicholas Piper <nick-octave@nickpiper.co.uk>
 
 	* control/base/lsim.m: Correct doc string.
 
 2002-11-04  A S Hodel <a.s.hodel@Eng.Auburn.EDU>
 
 	* control/system/syssub.m: Call tf2sys with Gnum-Hnum, not Gnum+Hnum.
 
diff --git a/scripts/statistics/base/var.m b/scripts/statistics/base/var.m
--- a/scripts/statistics/base/var.m
+++ b/scripts/statistics/base/var.m
@@ -35,14 +35,14 @@ function y = var(x)
 
   [nr, nc] = size (x);
   if (nr == 0 || nc == 0)
     error ("var: x must not be empty");
   elseif ((nr == 1) && (nc == 1))
     y = 0;
   elseif ((nr == 1) || (nc == 1))
     n = length (x);
-    y = (sumsq (x) - abs(sum(x))^2 / n) / (n - 1);
+    y = sumsq (x - sum (x) / n) / (n - 1);
   else
-    y = (sumsq (x) - abs(sum(x)).^2 / nr) / (nr - 1);
+    y = sumsq (x - ones (nr, 1) * (sum (x) / nr) ) / (nr - 1);
   endif
 
 endfunction
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,26 @@
+2002-11-12  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* load-save.cc (extract_keyword): Return std::string, not char *.
+	Change all uses.
+	(read_ascii_data): Likewise.
+	(read_binary_data): Likewise.
+	(read_hdf5_data): Likewise.
+	(read_mat_ascii_data): Likewise.
+	(read_mat_binary_data): Likewise.
+	(do_load): Name and doc are now std::string objects, not char *.
+	(install_loaded_variable): Likewise.
+	(read_hdf5_data): Doc is now std::string object, not char *&.
+	(read_mat_ascii_data): Call OCTAVE_QUIT in strategic locations.
+	(get_lines_and_columns): Likewise.
+
+	* toplev.cc (main_loop): Call OCTAVE_QUIT after executing command.
+	* parse.y (parse_and_execute (FILE *)): Likewise.
+
 2002-11-12  Joseph P. Skudlarek  <jskud@jskud.com>
 
 	* input.cc (match_sans_spaces_semi): Rename from match_sans_spaces.
 	Ignore trailing semicolons too.  Change all callers.
 
 2002-11-11  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* octave.gperf: Allow "persistent" as a synonym for static.
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -45,16 +45,17 @@ Software Foundation, 59 Temple Place - S
 #include "data-conv.h"
 #include "file-ops.h"
 #include "glob-match.h"
 #include "lo-mappers.h"
 #include "lo-sstream.h"
 #include "mach-info.h"
 #include "oct-env.h"
 #include "oct-time.h"
+#include "quit.h"
 #include "str-vec.h"
 
 #include "defun.h"
 #include "error.h"
 #include "gripes.h"
 #include "load-save.h"
 #include "oct-obj.h"
 #include "oct-map.h"
@@ -160,18 +161,19 @@ make_valid_identifier (char *s)
 
 // Install a variable with name NAME and the value specified TC in the
 // symbol table.  If FORCE is TRUE, replace any existing definition
 // for NAME.  If GLOBAL is TRUE, make the variable global.
 //
 // Assumes TC is defined.
 
 static void
-install_loaded_variable (int force, char *name, const octave_value& val,
-			 int global, char *doc)
+install_loaded_variable (int force, const std::string& name,
+			 const octave_value& val,
+			 int global, const std::string& doc)
 {
   // Is there already a symbol by this name?  If so, what is it?
 
   symbol_record *lsr = curr_sym_tab->lookup (name);
 
   bool is_undefined = true;
   bool is_variable = false;
   bool is_function = false;
@@ -194,45 +196,48 @@ install_loaded_variable (int force, char
 	  if (force || is_undefined)
 	    {
 	      lsr = curr_sym_tab->lookup (name, true);
 	      link_to_global_variable (lsr);
 	      sr = lsr;
 	    }
 	  else
 	    {
-	      warning ("load: global variable name `%s' exists.", name);
+	      warning ("load: global variable name `%s' exists",
+		       name.c_str ());
 	      warning ("use `load -force' to overwrite");
 	    }
 	}
       else if (is_function)
 	{
 	  if (force)
 	    {
 	      lsr = curr_sym_tab->lookup (name, true);
 	      link_to_global_variable (lsr);
 	      sr = lsr;
 	    }
 	  else
 	    {
-	      warning ("load: `%s' is currently a function in this scope", name);
+	      warning ("load: `%s' is currently a function in this scope",
+		       name.c_str ());
 	      warning ("`load -force' will load variable and hide function");
 	    }
 	}
       else if (is_variable)
 	{
 	  if (force)
 	    {
 	      lsr = curr_sym_tab->lookup (name, true);
 	      link_to_global_variable (lsr);
 	      sr = lsr;
 	    }
 	  else
 	    {
-	      warning ("load: local variable name `%s' exists.", name);
+	      warning ("load: local variable name `%s' exists",
+		       name.c_str ());
 	      warning ("use `load -force' to overwrite");
 	    }
 	}
       else
 	error ("load: unable to load data for unknown symbol type");
     }
   else
     {
@@ -241,60 +246,62 @@ install_loaded_variable (int force, char
 	  if (force || is_undefined)
 	    {
 	      lsr = curr_sym_tab->lookup (name, true);
 	      link_to_global_variable (lsr);
 	      sr = lsr;
 	    }
 	  else
 	    {
-	      warning ("load: global variable name `%s' exists.", name);
+	      warning ("load: global variable name `%s' exists",
+		       name.c_str ());
 	      warning ("use `load -force' to overwrite");
 	    }
 	}
       else if (is_function)
 	{
 	  if (force)
 	    {
 	      lsr = curr_sym_tab->lookup (name, true);
 	      link_to_global_variable (lsr);
 	      sr = lsr;
 	    }
 	  else
 	    {
-	      warning ("load: `%s' is currently a function in this scope", name);
+	      warning ("load: `%s' is currently a function in this scope",
+		       name.c_str ());
 	      warning ("`load -force' will load variable and hide function");
 	    }
 	}
       else if (is_variable || is_undefined)
 	{
 	  if (force || is_undefined)
 	    {
 	      lsr = curr_sym_tab->lookup (name, true);
 	      sr = lsr;
 	    }
 	  else
 	    {
-	      warning ("load: local variable name `%s' exists.", name);
+	      warning ("load: local variable name `%s' exists",
+		       name.c_str ());
 	      warning ("use `load -force' to overwrite");
 	    }
 	}
       else
 	error ("load: unable to load data for unknown symbol type");
     }
 
   if (sr)
     {
       sr->define (val);
-      if (doc)
-	sr->document (doc);
+      sr->document (doc);
       return;
     }
   else
-    error ("load: unable to load variable `%s'", name);
+    error ("load: unable to load variable `%s'", name.c_str ());
 
   return;
 }
 
 // Functions for reading ascii data.
 
 // Skip white space and comments on stream IS.
 
@@ -322,20 +329,20 @@ skip_comments (std::istream& is)
 
 // Extract a KEYWORD and its value from stream IS, returning the
 // associated value in a new string.
 //
 // Input should look something like:
 //
 //  [%#][ \t]*keyword[ \t]*:[ \t]*string-value[ \t]*\n
 
-static char *
+static std::string
 extract_keyword (std::istream& is, const char *keyword)
 {
-  char *retval = 0;
+  std::string retval;
 
   char c;
   while (is.get (c))
     {
       if (c == '%' || c == '#')
 	{
 	  OSSTREAM buf;
 	
@@ -361,32 +368,38 @@ extract_keyword (std::istream& is, const
 
 	      if (c != '\n')
 		{
 		  value << c;
 		  while (is.get (c) && c != '\n')
 		    value << c;
 		}
 	      value << OSSTREAM_ENDS;
-	      retval = strsave (OSSTREAM_C_STR (value));
+	      retval = OSSTREAM_STR (value);
 	      OSSTREAM_FREEZE (value);
 	      break;
 	    }
 	}
     }
 
-  if (retval)
+  int len = retval.length ();
+
+  if (len > 0)
     {
-      int len = strlen (retval);
-      if (len > 0)
+      while (len)
 	{
-	  char *ptr = retval + len - 1;
-	  while (*ptr == ' ' || *ptr == '\t')
-	    ptr--;
-	  * (ptr+1) = '\0';
+	  char c = retval[len-1];
+
+	  if (c == ' ' || c == '\t')
+	    len--;
+	  else
+	    {
+	      retval.resize (len);
+	      break;
+	    }
 	}
     }
 
   return retval;
 }
 
 // Match KEYWORD on stream IS, placing the associated value in VALUE,
 // returning TRUE if successful and FALSE otherwise.
@@ -514,78 +527,72 @@ extract_keyword (std::istream& is, const
 //  # length: 6
 //  string
 //  # length: 5
 //  array
 //
 // XXX FIXME XXX -- this format is fairly rigid, and doesn't allow for
 // arbitrary comments, etc.  Someone should fix that.
 
-static char *
+// Ugh.  The signature of the compare method is not standard in older
+// versions of the GNU libstdc++.  Do this instead:
+
+#define SUBSTRING_COMPARE_EQ(s, pos, n, t) (s.substr (pos, n) == t)
+
+static std::string
 read_ascii_data (std::istream& is, const std::string& filename, bool& global,
 		 octave_value& tc, int count)
 {
   // Read name for this entry or break on EOF.
 
-  char *name = extract_keyword (is, "name");
-
-  if (! name)
+  std::string name = extract_keyword (is, "name");
+
+  if (name.empty ())
     {
       if (count == 0)
-	error ("load: no data found in file `%s'", filename.c_str ());
-
-      return 0;
+	error ("load: empty name keyword or no data found in file `%s'",
+	       filename.c_str ());
+
+      return std::string ();
     }
 
-  if (! *name)
-    {
-      error ("load: empty name keyword found in file `%s'",
-	     filename.c_str ());
-      delete [] name;
-      return 0;
-    }
-      
-
   if (! valid_identifier (name))
     {
-      error ("load: bogus identifier `%s' found in file `%s'", name,
-	     filename.c_str ());
-      delete [] name;
-      return 0;
+      error ("load: bogus identifier `%s' found in file `%s'",
+	     name.c_str (), filename.c_str ());
+      return std::string ();
     }
 
   // Look for type keyword.
 
-  char *tag = extract_keyword (is, "type");
-
-  if (tag && *tag)
+  std::string tag = extract_keyword (is, "type");
+
+  if (! tag.empty ())
     {
-      char *ptr = strchr (tag, ' ');
-      if (ptr)
+      std::string typ;
+      size_t pos = tag.rfind (' ');
+
+      if (pos != NPOS)
 	{
-	  *ptr = '\0';
-	  global = (strncmp (tag, "global", 6) == 0);
-	  *ptr = ' ';
-	  if (global)
-	    ptr++;
-	  else
-	    ptr = tag;
+	  global = SUBSTRING_COMPARE_EQ (tag, 0, 6, "global");
+
+	  typ = global ? tag.substr (7) : tag;
 	}
       else
-	ptr = tag;
-
-      if (strncmp (ptr, "scalar", 6) == 0)
+	typ = tag;
+
+      if (SUBSTRING_COMPARE_EQ (typ, 0, 6, "scalar"))
 	{
 	  double tmp = octave_read_double (is);
 	  if (is)
 	    tc = tmp;
 	  else
 	    error ("load: failed to load scalar constant");
 	}
-      else if (strncmp (ptr, "matrix", 6) == 0)
+      else if (SUBSTRING_COMPARE_EQ (typ, 0, 6, "matrix"))
 	{
 	  int nr = 0;
 	  int nc = 0;
 
 	  if (extract_keyword (is, "rows", nr) && nr >= 0
 	      && extract_keyword (is, "columns", nc) && nc >= 0)
 	    {
 	      if (nr > 0 && nc > 0)
@@ -600,25 +607,25 @@ read_ascii_data (std::istream& is, const
 	      else if (nr == 0 || nc == 0)
 		tc = Matrix (nr, nc);
 	      else
 		panic_impossible ();
 	    }
 	  else
 	    error ("load: failed to extract number of rows and columns");
 	}
-      else if (strncmp (ptr, "complex scalar", 14) == 0)
+      else if (SUBSTRING_COMPARE_EQ (typ, 0, 14, "complex scalar"))
 	{
 	  Complex tmp = octave_read_complex (is);
 	  if (is)
 	    tc = tmp;
 	  else
 	    error ("load: failed to load complex scalar constant");
 	}
-      else if (strncmp (ptr, "complex matrix", 14) == 0)
+      else if (SUBSTRING_COMPARE_EQ (typ, 0, 14, "complex matrix"))
 	{
 	  int nr = 0;
 	  int nc = 0;
 
 	  if (extract_keyword (is, "rows", nr) && nr > 0
 	      && extract_keyword (is, "columns", nc) && nc > 0)
 	    {
 	      ComplexMatrix tmp (nr, nc);
@@ -626,60 +633,59 @@ read_ascii_data (std::istream& is, const
 	      if (is)
 		tc = tmp;
 	      else
 		error ("load: failed to load complex matrix constant");
 	    }
 	  else
 	    error ("load: failed to extract number of rows and columns");
 	}
-      else if (strncmp (ptr, "string array", 12) == 0)
+      else if (SUBSTRING_COMPARE_EQ (typ, 0, 12, "string array"))
 	{
 	  int elements;
 	  if (extract_keyword (is, "elements", elements) && elements >= 0)
 	    {
 	      // XXX FIXME XXX -- need to be able to get max length
 	      // before doing anything.
 
 	      charMatrix chm (elements, 0);
 	      int max_len = 0;
 	      for (int i = 0; i < elements; i++)
 		{
 		  int len;
 		  if (extract_keyword (is, "length", len) && len >= 0)
 		    {
-		      char *tmp = new char [len+1];
+		      char tmp[len+1];
 		      if (len > 0 && ! is.read (X_CAST (char *, tmp), len))
 			{
 			  error ("load: failed to load string constant");
 			  break;
 			}
 		      else
 			{
 			  tmp [len] = '\0';
 			  if (len > max_len)
 			    {
 			      max_len = len;
 			      chm.resize (elements, max_len, 0);
 			    }
 			  chm.insert (tmp, i, 0);
 			}
-		      delete [] tmp;
 		    }
 		  else
 		    error ("load: failed to extract string length for element %d", i+1);
 		}
 
 	      if (! error_state)
 		tc = octave_value (chm, true);
 	    }
 	  else
 	    error ("load: failed to extract number of string elements");
 	}
-      else if (strncmp (ptr, "string", 6) == 0)
+      else if (SUBSTRING_COMPARE_EQ (typ, 0, 6, "string"))
 	{
 	  int len;
 	  if (extract_keyword (is, "length", len) && len >= 0)
 	    {
 	      char *tmp = new char [len+1];
 	      if (len > 0 && ! is.read (X_CAST (char *, tmp), len))
 		{
 		  error ("load: failed to load string constant");
@@ -692,40 +698,38 @@ read_ascii_data (std::istream& is, const
 		    tc = tmp;
 		  else
 		    error ("load: failed to load string constant");
 		}
 	    }
 	  else
 	    error ("load: failed to extract string length");
 	}
-      else if (strncmp (ptr, "range", 5) == 0)
+      else if (SUBSTRING_COMPARE_EQ (typ, 0, 5, "range"))
 	{
 	  // # base, limit, range comment added by save ().
 
 	  skip_comments (is);
 	  Range tmp;
 	  is >> tmp;
 	  if (is)
 	    tc = tmp;
 	  else
 	    error ("load: failed to load range constant");
 	}
       else
-	error ("load: unknown constant type `%s'", tag);
+	error ("load: unknown constant type `%s'", tag.c_str ());
     }
   else
     error ("load: failed to extract keyword specifying value type");
 
-  delete [] tag;
-
   if (error_state)
     {
       error ("load: reading file %s", filename.c_str ());
-      return 0;
+      return std::string ();
     }
 
   return name;
 }
 
 // Extract one value (scalar, matrix, string, etc.) from stream IS and
 // place it in TC, returning the name of the variable.  If the value
 // is tagged as global in the file, return TRUE in GLOBAL.  If SWAP
@@ -791,54 +795,57 @@ read_ascii_data (std::istream& is, const
 //       elements         int                 4
 //
 //       for each element:
 //         length         int                 4
 //         data           string         length
 //
 // FILENAME is used for error messages.
 
-static char *
+static std::string
 read_binary_data (std::istream& is, bool swap,
 		  oct_mach_info::float_format fmt,
 		  const std::string& filename, bool& global,
-		  octave_value& tc, char *&doc)
+		  octave_value& tc, std::string& doc)
 {
+  std::string retval;
+
   char tmp = 0;
 
   FOUR_BYTE_INT name_len = 0;
   FOUR_BYTE_INT doc_len = 0;
-  char *name = 0;
-
-  doc = 0;
+
+  doc.resize (0);
 
   // We expect to fail here, at the beginning of a record, so not
   // being able to read another name should not result in an error.
 
   is.read (X_CAST (char *, &name_len), 4);
   if (! is)
-    return 0;
+    return retval;
   if (swap)
     swap_4_bytes (X_CAST (char *, &name_len));
 
-  name = new char [name_len+1];
+  char name[name_len+1];
   name[name_len] = '\0';
   if (! is.read (X_CAST (char *, name), name_len))
     goto data_read_error;
+  retval = name;
 
   is.read (X_CAST (char *, &doc_len), 4);
   if (! is)
     goto data_read_error;
   if (swap)
     swap_4_bytes (X_CAST (char *, &doc_len));
 
-  doc = new char [doc_len+1];
-  doc[doc_len] = '\0';
-  if (! is.read (X_CAST (char *, doc), doc_len))
+  char tdoc[doc_len+1];
+  tdoc[doc_len] = '\0';
+  if (! is.read (X_CAST (char *, tdoc), doc_len))
     goto data_read_error;
+  doc = tdoc;
 
   if (! is.read (X_CAST (char *, &tmp), 1))
     goto data_read_error;
   global = tmp ? 1 : 0;
 
   tmp = 0;
   if (! is.read (X_CAST (char *, &tmp), 1))
     goto data_read_error;
@@ -919,22 +926,19 @@ read_binary_data (std::istream& is, bool
 
     case 5:
       {
 	FOUR_BYTE_INT len;
 	if (! is.read (X_CAST (char *, &len), 4))
 	  goto data_read_error;
 	if (swap)
 	  swap_4_bytes (X_CAST (char *, &len));
-	char *s = new char [len+1];
+	char s[len+1];
 	if (! is.read (X_CAST (char *, s), len))
-	  {
-	    delete [] s;
-	    goto data_read_error;
-	  }
+	  goto data_read_error;
 	s[len] = '\0';
 	tc = s;
       }
       break;
 
     case 6:
       {
 	if (! is.read (X_CAST (char *, &tmp), 1))
@@ -968,44 +972,38 @@ read_binary_data (std::istream& is, bool
 	int max_len = 0;
 	for (int i = 0; i < elements; i++)
 	  {
 	    FOUR_BYTE_INT len;
 	    if (! is.read (X_CAST (char *, &len), 4))
 	      goto data_read_error;
 	    if (swap)
 	      swap_4_bytes (X_CAST (char *, &len));
-	    char *tmp = new char [len+1];
+	    char tmp[len+1];
 	    if (! is.read (X_CAST (char *, tmp), len))
-	      {
-		delete [] tmp;
-		goto data_read_error;
-	      }
+	      goto data_read_error;
 	    if (len > max_len)
 	      {
 		max_len = len;
 		chm.resize (elements, max_len, 0);
 	      }
 	    tmp [len] = '\0';
 	    chm.insert (tmp, i, 0);
-	    delete [] tmp;
 	  }
 	tc = octave_value (chm, true);
       }
       break;
 
     default:
     data_read_error:
       error ("load: trouble reading binary file `%s'", filename.c_str ());
-      delete [] name;
-      name = 0;
       break;
     }
 
-  return name;
+  return retval;
 }
 
 // HDF5 input/output
 
 #ifdef HAVE_HDF5
 
 // Define this to 1 if/when HDF5 supports automatic conversion between
 // integer and floating-point binary data:
@@ -1648,17 +1646,17 @@ hdf5_read_next_data (hid_t group_id, con
 
       // an HDF5 group is treated as an octave structure by
       // default (since that preserves name information), and an
       // octave list otherwise.
 
       bool is_list = hdf5_check_attr (subgroup_id, "OCTAVE_LIST");
 
       hdf5_callback_data dsub;
-      dsub.name = dsub.doc = (char*) 0;
+      dsub.name = dsub.doc = 0;
       dsub.global = 0;
       dsub.complex_type = d->complex_type;
       dsub.range_type = d->range_type;
       dsub.import = d->import;
 
       herr_t retval2;
       octave_value_list lst;
       Octave_map m;
@@ -1721,17 +1719,17 @@ hdf5_read_next_data (hid_t group_id, con
       else if (strcmp (name, vname) != 0)
 	{
 	  // the name was changed by import; store the original name
 	  // as the documentation string:
 	  d->doc = new char [strlen (name) + 1];
 	  strcpy (d->doc, name);
 	}
       else
-	d->doc = (char *) 0;
+	d->doc = 0;
 
       // copy name (actually, vname):
       d->name = new char [strlen (vname) + 1];
       strcpy (d->name, vname);
     }
 
   delete [] vname;
 
@@ -1769,27 +1767,31 @@ hdf5_make_range_type (hid_t num_type)
 
 // Read the next Octave variable from the stream IS, which must really be
 // an hdf5_ifstream.  Return the variable value in tc, its doc string
 // in doc, and whether it is global in global.  The return value is
 // the name of the variable, or NULL if none were found or there was
 // and error.  If import is true, we try extra hard to import "foreign"
 // datasets (not created by Octave), although we usually do a reasonable
 // job anyway.  (c.f. load -import documentation.)
-static char *
+static std::string
 read_hdf5_data (std::istream& is,
 		const std::string& filename, bool& global,
-		octave_value& tc, char *&doc, bool import)
+		octave_value& tc, std::string& doc, bool import)
 {
+  std::string retval;
+
+  doc.resize (0);
+
   hdf5_ifstream& hs = (hdf5_ifstream&) is;
   hdf5_callback_data d;
 
-  d.name = (char *) 0;
+  d.name = 0;
   d.global = 0;
-  d.doc = (char *) 0;
+  d.doc = 0;
   d.complex_type = hdf5_make_complex_type (H5T_NATIVE_DOUBLE);
   d.range_type = hdf5_make_range_type (H5T_NATIVE_DOUBLE);
   d.import = import;
 
   // Versions of HDF5 prior to 1.2.2 had a bug in H5Giterate where it
   // would return the index of the last item processed instead of the
   // next item to be processed, forcing us to increment the index manually.
 
@@ -1798,44 +1800,48 @@ read_hdf5_data (std::istream& is,
   H5get_libversion (&vers_major, &vers_minor, &vers_release);
 
   // XXX FIXME XXX -- this test looks wrong.
   have_h5giterate_bug
     = (vers_major < 1
        || (vers_major == 1 && (vers_minor < 2
 			       || (vers_minor == 2 && vers_release < 2))));
 
-  herr_t retval = H5Giterate (hs.file_id, "/", &hs.current_item,
-			      hdf5_read_next_data, &d);
+  herr_t H5Giterate_retval = H5Giterate (hs.file_id, "/", &hs.current_item,
+					 hdf5_read_next_data, &d);
 
   if (have_h5giterate_bug)
     {
       // H5Giterate sets current_item to the last item processed; we want
       // the index of the next item (for the next call to read_hdf5_data)
 
       hs.current_item++;
     }
 
-  if (retval > 0)
+  if (H5Giterate_retval > 0)
     {
       global = d.global;
       tc = d.tc;
-      doc = d.doc;
+      if (d.doc)
+	doc = d.doc;
     }
   else
     {
-      // an error occurred (retval < 0) or there are no more datasets 
-      // print an error message if retval < 0?
+      // an error occurred (H5Giterate_retval < 0) or there are no
+      // more datasets print an error message if retval < 0?
       // hdf5_read_next_data already printed one, probably.
     }
 
   H5Tclose (d.complex_type);
   H5Tclose (d.range_type);
 
-  return d.name;
+  if (d.name)
+    retval = d.name;
+
+  return retval;
 }
 
 #endif /* HAVE_HDF5 */
 
 static std::string
 get_mat_data_input_line (std::istream& is)
 {
   std::string retval;
@@ -1882,16 +1888,18 @@ get_lines_and_columns (std::istream& is,
 
   int file_line_number = 0;
 
   nr = 0;
   nc = 0;
 
   while (is && ! error_state)
     {
+      OCTAVE_QUIT;
+
       std::string buf = get_mat_data_input_line (is);
 
       file_line_number++;
 
       size_t beg = buf.find_first_not_of (" \t");
 
       // If we see a CR as the last character in the buffer, we had a
       // CRLF pair as the line separator.  Any other CR in the text
@@ -1956,21 +1964,21 @@ get_lines_and_columns (std::istream& is,
 //
 // Reads the file twice.  Once to find the number of rows and columns,
 // and once to extract the matrix.
 //
 // FILENAME is used for error messages.
 //
 // This format provides no way to tag the data as global.
 
-static char *
+static std::string
 read_mat_ascii_data (std::istream& is, const std::string& filename,
 		     octave_value& tc)
 {
-  char *name = 0;
+  std::string retval;
 
   std::string varname;
 
   size_t pos = filename.rfind ('/');
 
   if (pos != NPOS)
     varname = filename.substr (pos+1);
   else
@@ -1983,16 +1991,18 @@ read_mat_ascii_data (std::istream& is, c
 
   if (valid_identifier (varname))
     {
       int nr = 0;
       int nc = 0;
 
       get_lines_and_columns (is, filename, nr, nc);
 
+      OCTAVE_QUIT;
+
       if (! error_state && nr > 0 && nc > 0)
 	{
 	  Matrix tmp (nr, nc);
 
 	  if (nr < 1 || nc < 1)
 	    is.clear (std::ios::badbit);
 	  else
 	    {
@@ -2004,51 +2014,53 @@ read_mat_ascii_data (std::istream& is, c
 #ifdef HAVE_SSTREAM
 		  std::istringstream tmp_stream (buf);
 #else
 		  std::istrstream tmp_stream (buf.c_str ());
 #endif
 
 		  for (int j = 0; j < nc; j++)
 		    {
+		      OCTAVE_QUIT;
+
 		      d = octave_read_double (tmp_stream);
 
 		      if (tmp_stream)
 			tmp.elem (i, j) = d;
 		      else
 			{
 			  error ("load: failed to read matrix from file `%s'",
 				 filename.c_str ());
 
-			  return name;
+			  return retval;
 			}
 
 		    }
 		}
 	    }
 
 	  if (is)
 	    {
 	      tc = tmp;
 
-	      name = strsave (varname.c_str ());
+	      retval = varname;
 	    }
 	  else
 	    error ("load: failed to read matrix from file `%s'",
 		   filename.c_str ());
 	}
       else
 	error ("load: unable to extract matrix size from file `%s'",
 	       filename.c_str ());
     }
   else
     error ("load: unable to convert filename `%s' to valid identifier",
 	   filename.c_str ());
 
-  return name;
+  return retval;
 }
 
 // Read LEN elements of data from IS in the format specified by
 // PRECISION, placing the result in DATA.  If SWAP is TRUE, swap
 // the bytes of each element before copying to DATA.  FLT_FMT
 // specifies the format of the data if we are reading floating point
 // numbers.
 
@@ -2232,81 +2244,83 @@ float_format_to_mopt_digit (oct_mach_inf
 //
 // The data is expected to be in Matlab version 4 .mat format, though
 // not all the features of that format are supported.
 //
 // FILENAME is used for error messages.
 //
 // This format provides no way to tag the data as global.
 
-static char *
+static std::string
 read_mat_binary_data (std::istream& is, const std::string& filename,
 		      octave_value& tc)
 {
+  std::string retval;
+
   // These are initialized here instead of closer to where they are
   // first used to avoid errors from gcc about goto crossing
   // initialization of variable.
 
   Matrix re;
   oct_mach_info::float_format flt_fmt = oct_mach_info::unknown;
-  char *name = 0;
   bool swap = false;
   int type = 0;
   int prec = 0;
   int order = 0;
   int mach = 0;
   int dlen = 0;
 
   FOUR_BYTE_INT mopt, nr, nc, imag, len;
 
   int err = read_mat_file_header (is, swap, mopt, nr, nc, imag, len);
   if (err)
     {
       if (err < 0)
 	goto data_read_error;
       else
-	return 0;
+	return retval;
     }
 
   type = mopt % 10;  // Full, sparse, etc.
   mopt /= 10;        // Eliminate first digit.
   prec = mopt % 10;  // double, float, int, etc.
   mopt /= 10;        // Eliminate second digit.
   order = mopt % 10; // Row or column major ordering.
   mopt /= 10;        // Eliminate third digit.
   mach = mopt % 10;  // IEEE, VAX, etc.
 
   flt_fmt = mopt_digit_to_float_format (mach);
 
   if (flt_fmt == oct_mach_info::unknown)
     {
       error ("load: unrecognized binary format!");
-      return 0;
+      return retval;
     }
 
   if (type != 0 && type != 1)
     {
       error ("load: can't read sparse matrices");
-      return 0;
+      return retval;
     }
 
   if (imag && type == 1)
     {
       error ("load: encountered complex matrix with string flag set!");
-      return 0;
+      return retval;
     }
 
   // LEN includes the terminating character, and the file is also
   // supposed to include it, but apparently not all files do.  Either
   // way, I think this should work.
 
-  name = new char [len+1];
+  char name[len+1];
   if (! is.read (X_CAST (char *, name), len))
     goto data_read_error;
   name[len] = '\0';
+  retval = name;
 
   dlen = nr * nc;
   if (dlen < 0)
     goto data_read_error;
 
   if (order)
     {
       int tmp = nr;
@@ -2345,22 +2359,21 @@ read_mat_binary_data (std::istream& is, 
       tc = order ? ctmp.transpose () : ctmp;
     }
   else
     tc = order ? re.transpose () : re;
 
   if (type == 1)
     tc = tc.convert_to_str ();
 
-  return name;
+  return retval;
 
  data_read_error:
   error ("load: trouble reading binary file `%s'", filename.c_str ());
-  delete [] name;
-  return 0;
+  return retval;
 }
 
 // Read COUNT elements of data from IS in the format specified by TYPE,
 // placing the result in DATA.  If SWAP is TRUE, swap the bytes of
 // each element before copying to DATA.  FLT_FMT specifies the format
 // of the data if we are reading floating point numbers.
 
 static void
@@ -2469,27 +2482,28 @@ read_mat5_tag (std::istream& is, bool sw
 // Extract one data element (scalar, matrix, string, etc.) from stream
 // IS and place it in TC, returning the name of the variable.
 //
 // The data is expected to be in Matlab's "Version 5" .mat format,
 // though not all the features of that format are supported.
 //
 // FILENAME is used for error messages.
 
-static char *
+static std::string
 read_mat5_binary_element (std::istream& is, const std::string& filename,
 			  bool swap, bool& global, octave_value& tc)
 {
+  std::string retval;
+
   // These are initialized here instead of closer to where they are
   // first used to avoid errors from gcc about goto crossing
   // initialization of variable.
 
   Matrix re;
   oct_mach_info::float_format flt_fmt = oct_mach_info::unknown;
-  char *name = 0;
   int type = 0;
   bool imag;
   bool logicalvar;
   enum arrayclasstype arrayclass;
   FOUR_BYTE_INT junk;
   FOUR_BYTE_INT flags;
   FOUR_BYTE_INT nr;
   FOUR_BYTE_INT nc;
@@ -2503,17 +2517,17 @@ read_mat5_binary_element (std::istream& 
   // MAT files always use IEEE floating point
   if ((number == 1) ^ swap)
     flt_fmt = oct_mach_info::ieee_big_endian;
   else
     flt_fmt = oct_mach_info::ieee_little_endian;
 
   // element type and length
   if (read_mat5_tag (is, swap, type, element_length))
-    return 0;			// EOF
+    return retval;			// EOF
 
   if (type != miMATRIX)
     {
       error ("load: invalid element type");
       goto early_read_error;
     }
   pos = is.tellg ();
 
@@ -2557,28 +2571,29 @@ read_mat5_binary_element (std::istream& 
       
     if (read_mat5_tag (is, swap, type, len) || type != miINT8)
       {
 	error ("load: invalid array name subelement");
 	goto early_read_error;
       }
 
     pos = is.tellg ();
-    name = new char[len+1];
+    char name[len+1];
 
     if (len)			// structure field subelements have
 				// zero-length array name subelements
       {
 	if (! is.read (X_CAST (char *, name), len ))
 	  goto data_read_error;
 	
 	is.seekg (pos + static_cast<std::streamoff> (PAD (len)));
       }
 
     name[len] = '\0';
+    retval = name;
   }  
 
   if (dimension_length != 8)
     {
       error ("load: multidimension arrays are not implemented");
       goto skip_ahead;
     }
 
@@ -2633,22 +2648,19 @@ read_mat5_binary_element (std::istream& 
 	elname = new char[len];
 
 	if (! is.read (elname, len))
 	  goto data_read_error;
 
 	// fields subelements
 	for (i = 0; i < len/field_name_length; i++)
 	  {
-	    char *thename;
 	    octave_value fieldtc;
-	    thename = read_mat5_binary_element (is, filename, swap,
-						global, fieldtc);
+	    read_mat5_binary_element (is, filename, swap, global, fieldtc);
 	    m[elname + i*field_name_length] = fieldtc;
-	    delete [] thename;
 	  }
 
 	delete [] elname;
 	tc = m;
       }
       break;
 
     case mxCHAR_CLASS:
@@ -2666,50 +2678,51 @@ read_mat5_binary_element (std::istream& 
       // handle all these numerical formats as double arrays
       
       // real data subelement
       {
 	std::streampos pos;
 	
 	if (read_mat5_tag (is, swap, type, len))
 	  {
-	    error ("load: reading matrix data for `%s'", name);
+	    error ("load: reading matrix data for `%s'", retval.c_str ());
 	    goto data_read_error;
 	  }
 
 	pos = is.tellg ();
 	read_mat5_binary_data (is, re.fortran_vec (), nr*nc, swap,
 			       (enum mat5_data_type) type, flt_fmt);
 
 	if (! is || error_state)
 	  {
-	    error ("load: reading matrix data for `%s'", name);
+	    error ("load: reading matrix data for `%s'", retval.c_str ());
 	    goto data_read_error;
 	  }
 
 	is.seekg (pos + static_cast<std::streamoff> (PAD (len)));
       }
       
       // imaginary data subelement
       if (imag)
 	{
 	  Matrix im (nr, nc);
 	  
 	  if (read_mat5_tag (is, swap, type, len))
 	    {
-	      error ("load: reading matrix data for `%s'", name);
+	      error ("load: reading matrix data for `%s'", retval.c_str ());
 	      goto data_read_error;
 	    }
 
 	  read_mat5_binary_data (is, im.fortran_vec (), nr*nc, swap,
 				 (enum mat5_data_type) type, flt_fmt);
 
 	  if (! is || error_state)
 	    {
-	      error ("load: reading imaginary matrix data for `%s'", name);
+	      error ("load: reading imaginary matrix data for `%s'",
+		     retval.c_str ());
 	      goto data_read_error;
 	    }
 
 	  ComplexMatrix ctmp (nr, nc);
 
 	  for (int j = 0; j < nc; j++)
 	    for (int i = 0; i < nr; i++)
 	      ctmp (i, j) = Complex (re (i, j), im (i, j));
@@ -2720,28 +2733,25 @@ read_mat5_binary_element (std::istream& 
 	tc = re;
 
       if (arrayclass == mxCHAR_CLASS)
 	tc = tc.convert_to_str ();
     }
 
   is.seekg (pos + static_cast<std::streamoff> (element_length));
 
-  return name;
+  return retval;
 
  data_read_error:
-  delete [] name;
-
  early_read_error:
   error ("load: trouble reading binary file `%s'", filename.c_str ());
-  return 0;
+  return std::string ();
 
  skip_ahead:
-  warning ("      skipping over `%s'", name);
-  delete [] name;
+  warning ("skipping over `%s'", retval.c_str ());
   is.seekg (pos + static_cast<std::streamoff> (element_length));
   return read_mat5_binary_element (is, filename, swap, global, tc);
 }
 
 static int
 read_mat5_binary_file_header (std::istream& is, bool& swap,
 			      bool quiet = false)
 {
@@ -2874,24 +2884,20 @@ get_file_format (const std::string& fnam
 	      file.seekg (0, std::ios::beg);
 	      retval = LS_MAT5_BINARY;
   	    }
   	  else
   	    {
 	      file.clear ();
 	      file.seekg (0, std::ios::beg);
 
-	      char *tmp = extract_keyword (file, "name");
-
-	      if (tmp)
-		{
-		  retval = LS_ASCII;
-
-		  delete [] tmp;
-		}
+	      std::string tmp = extract_keyword (file, "name");
+
+	      if (! tmp.empty ())
+		retval = LS_ASCII;
 	      else
 		{
 		  // Try reading the file as numbers only, determining the
 		  // number of rows and columns from the data.  We don't
 		  // even bother to check to see if the first item in the
 		  // file is a number, so that get_complete_line() can
 		  // skip any comments that might appear at the top of the
 		  // file.
@@ -2925,18 +2931,18 @@ do_load (std::istream& stream, const std
 
   int count = 0;
 
   for (;;)
     {
       bool global = false;
       octave_value tc;
 
-      char *name = 0;
-      char *doc = 0;
+      std::string name;
+      std::string doc;
 
       switch (format)
 	{
 	case LS_ASCII:
 	  name = read_ascii_data (stream, orig_fname, global, tc, count);
 	  break;
 
 	case LS_BINARY:
@@ -2964,24 +2970,19 @@ do_load (std::istream& stream, const std
 					   global, tc);
 	  break;
 
 	default:
 	  gripe_unrecognized_data_fmt ("load");
 	  break;
 	}
 
-      if (error_state || stream.eof () || ! name)
-	{
-	  delete [] name;
-	  delete [] doc;
-
-	  break;
-	}
-      else if (! error_state && name)
+      if (error_state || stream.eof () || name.empty ())
+	break;
+      else if (! error_state && ! name.empty ())
 	{
 	  if (tc.is_defined ())
 	    {
 	      if (format == LS_MAT_ASCII && argv_idx < argc)
 		warning ("load: loaded ASCII file `%s' -- ignoring extra args",
 			 orig_fname.c_str ());
 
 	      if (format == LS_MAT_ASCII
@@ -3017,36 +3018,30 @@ do_load (std::istream& stream, const std
 			  else
 			    retstruct[name] = tc;
 			}
 		      else
 			install_loaded_variable (force, name, tc, global, doc);
 		    }
 		}
 
-	      delete [] name;
-	      delete [] doc;
-
 	      // Only attempt to read one item from a headless text file.
 
 	      if (format == LS_MAT_ASCII)
 		break;
 	    }
 	  else
-	    error ("load: unable to load variable `%s'", name);
+	    error ("load: unable to load variable `%s'", name.c_str ());
 	}
       else
 	{
 	  if (count == 0)
 	    error ("load: are you sure `%s' is an Octave data file?",
 		   orig_fname.c_str ());
 
-	  delete [] name;
-	  delete [] doc;
-
 	  break;
 	}
     }
 
   if (list_only && count)
     {
       output_buf << OSSTREAM_ENDS;
       std::string msg = OSSTREAM_STR (output_buf);
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -39,18 +39,19 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include "Cell.h"
 #include "Matrix.h"
 #include "cmd-edit.h"
 #include "cmd-hist.h"
 #include "file-ops.h"
 #include "file-stat.h"
+#include "lo-sstream.h"
 #include "oct-time.h"
-#include "lo-sstream.h"
+#include "quit.h"
 
 #include "comment-list.h"
 #include "defun.h"
 #include "dynamic-ld.h"
 #include "error.h"
 #include "input.h"
 #include "lex.h"
 #include "oct-hist.h"
@@ -2857,16 +2858,18 @@ parse_and_execute (FILE *f)
           if (global_command)
 	    {
 	      global_command->eval ();
 
 	      delete global_command;
 
 	      global_command = 0;
 
+	      OCTAVE_QUIT;
+
 	      bool quit = (tree_return_command::returning
 			   || tree_break_command::breaking);
 
 	      if (tree_return_command::returning)
 		tree_return_command::returning = 0;
 
 	      if (tree_break_command::breaking)
 		tree_break_command::breaking--;
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -126,16 +126,18 @@ main_loop (void)
 	      if (global_command)
 		{
 		  global_command->eval ();
 
 		  delete global_command;
 
 		  global_command = 0;
 
+		  OCTAVE_QUIT;
+
 		  if (! (interactive || forced_interactive))
 		    {
 		      bool quit = (tree_return_command::returning
 				   || tree_break_command::breaking);
 
 		      if (tree_return_command::returning)
 			tree_return_command::returning = 0;
 
