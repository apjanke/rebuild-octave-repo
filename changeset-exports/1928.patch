# HG changeset patch
# User jwe
# Date 824075514 0
#      Sun Feb 11 21:51:54 1996 +0000
# Node ID 20353fa5f83d9cf73aa0f6d54ca2d7c3225eaf9f
# Parent  e379c781ae7eda53697b5633df41f823387f81e2
[project @ 1996-02-11 21:51:54 by jwe]

diff --git a/liboctave/CmplxQRP.cc b/liboctave/CmplxQRP.cc
--- a/liboctave/CmplxQRP.cc
+++ b/liboctave/CmplxQRP.cc
@@ -48,89 +48,78 @@ extern "C"
 }
 
 // It would be best to share some of this code with ComplexQR class...
 
 ComplexQRP::ComplexQRP (const ComplexMatrix& a, QR::type qr_type)
 {
   assert (qr_type != QR::raw);
 
-  tau = 0;
-  work = 0;
-  tmp_data = 0;
-  jpvt = 0;
-
   int m = a.rows ();
   int n = a.cols ();
 
   if (m == 0 || n == 0)
     {
       (*current_liboctave_error_handler)
 	("ComplexQR must have non-empty matrix");
       return;
     }
 
   int min_mn = m < n ? m : n;
-  tau = new Complex[min_mn];
+  Array<Complex> tau (min_mn);
+  Complex *ptau = tau.fortran_vec ();
 
   int lwork = n;
-  work = new Complex[lwork];
+  Array<Complex> work (lwork);
+  Complex *pwork = work.fortran_vec ();
 
   int info = 0;
 
+  ComplexMatrix A_fact;
   if (m > n)
     {
-      tmp_data = new Complex [m*m];
-      copy (tmp_data, a.data (), a.length ());
+      A_fact.resize (m, m);
+      A_fact.insert (a, 0, 0);
     }
   else
-    tmp_data = dup (a.data (), a.length ());
+    A_fact = a;
 
-  work = new Complex[n];
-  rwork = new double[2*n];
-  jpvt = new int[n];
+  Complex *tmp_data = A_fact.fortran_vec ();
 
-  // Clear Pivot vector (code to enforce a certain permutation would
-  // go here...)
+  Array<double> rwork (2*n);
+  double *prwork = rwork.fortran_vec ();
 
-  for (int i = 0; i < n; i++)
-    jpvt[i] = 0;      
-
-  F77_XFCN (zgeqpf, ZGEQPF, (m, n, tmp_data, m, jpvt, tau, work, rwork,
-			     info));
+  Array<int> jpvt (n, 0);
+  int *pjpvt = jpvt.fortran_vec ();
 
-  delete [] work;
-  work = 0;
+  // Code to enforce a certain permutation could go here...
 
-  delete [] rwork;
-  rwork = 0;
+  F77_XFCN (zgeqpf, ZGEQPF, (m, n, tmp_data, m, pjpvt, ptau, pwork,
+			     prwork, info));
 
   if (f77_exception_encountered)
     (*current_liboctave_error_handler) ("unrecoverable error in zgeqpf");
   else
     {
       // Form Permutation matrix (if economy is requested, return the
       // indices only!)
 
       if (qr_type == QR::economy && m > n)
 	{
 	  p.resize (1, n, 0.0);
 	  for (int j = 0; j < n; j++)
-	    p.elem (0, j) = jpvt[j];
+	    p.elem (0, j) = jpvt.elem (j);
 	}
       else
 	{
 	  p.resize (n, n, 0.0);
 	  for (int j = 0; j < n; j++)
-	    p.elem (jpvt[j]-1, j) = 1.0;
+	    p.elem (jpvt.elem (j) - 1, j) = 1.0;
 	}
 
-      delete [] jpvt;
-      jpvt = 0;
-
       volatile int n2;
 
       if (qr_type == QR::economy && m > n)
 	{
 	  n2 = n;
 	  r.resize (n, n, 0.0);
 	}
       else
@@ -138,46 +127,34 @@ ComplexQRP::ComplexQRP (const ComplexMat
 	  n2 = m;
 	  r.resize (m, n, 0.0);
 	}
 
       for (int j = 0; j < n; j++)
 	{
 	  int limit = j < min_mn-1 ? j : min_mn-1;
 	  for (int i = 0; i <= limit; i++)
-	    r.elem (i, j) = tmp_data[m*j+i];
+	    r.elem (i, j) = A_fact.elem (i, j);
 	}
 
       lwork = 32*m;
-      work = new Complex[lwork];
+      work.resize (lwork);
+      Complex *pwork = work.fortran_vec ();
 
-      F77_XFCN (zungqr, ZUNGQR, (m, m, min_mn, tmp_data, m, tau, work,
-				 lwork, info));
+      F77_XFCN (zungqr, ZUNGQR, (m, m, min_mn, tmp_data, m, ptau,
+				 pwork, lwork, info));
 
       if (f77_exception_encountered)
 	(*current_liboctave_error_handler) ("unrecoverable error in zungqr");
       else
 	{
 	  q = ComplexMatrix (tmp_data, m, m);
-	  tmp_data = 0;
 	  q.resize (m, n2);
 	}
     }
-
-  delete [] tau;
-  tau = 0;
-
-  delete [] work;
-  work = 0;
-
-  delete [] tmp_data;
-  tmp_data = 0;
-
-  delete [] jpvt;
-  jpvt = 0;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/CmplxQRP.h b/liboctave/CmplxQRP.h
--- a/liboctave/CmplxQRP.h
+++ b/liboctave/CmplxQRP.h
@@ -32,48 +32,41 @@ class ostream;
 
 #include "CmplxQR.h"
 
 class
 ComplexQRP : public ComplexQR
 {
 public:
 
-  ComplexQRP (void) : ComplexQR (), p (), jpvt (0), rwork (0) { }
+  ComplexQRP (void) : ComplexQR (), p () { }
 
   ComplexQRP (const ComplexMatrix& A, QR::type qr_type = QR::std);
 
   ComplexQRP (const ComplexQRP& a) : ComplexQR (a), p (a.p) { }
 
   ComplexQRP& operator = (const ComplexQRP& a)
     {
       if (this != &a)
 	{
 	  ComplexQR::operator = (a);
 	  p = a.p;
 	}
       return *this;
     }
 
-  ~ComplexQRP (void)
-    {
-      delete [] jpvt;
-      delete [] rwork;
-    }
+  ~ComplexQRP (void) { }
 
   Matrix P (void) const { return p; }
 
   friend ostream&  operator << (ostream& os, const ComplexQRP& a);
 
 private:
 
   Matrix p;
-
-  int *jpvt;
-  double *rwork;
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
diff --git a/liboctave/dbleQRP.cc b/liboctave/dbleQRP.cc
--- a/liboctave/dbleQRP.cc
+++ b/liboctave/dbleQRP.cc
@@ -48,82 +48,73 @@ extern "C"
 }
 
 // It would be best to share some of this code with QR class...
 
 QRP::QRP (const Matrix& a, QR::type qr_type)
 {
   assert (qr_type != QR::raw);
 
-  tau = 0;
-  work = 0;
-  tmp_data = 0;
-  jpvt = 0;
-
   int m = a.rows ();
   int n = a.cols ();
 
   if (m == 0 || n == 0)
     {
       (*current_liboctave_error_handler) ("QR must have non-empty matrix");
       return;
     }
 
   int min_mn = m < n ? m : n;
-  tau = new double[min_mn];
+  Array<double> tau (min_mn);
+  double *ptau = tau.fortran_vec ();
 
   int lwork = 3*n;
-  work = new double[lwork];
+  Array<double> work (lwork);
+  double *pwork = work.fortran_vec ();
 
   int info = 0;
 
+  Matrix A_fact;
   if (m > n)
     {
-      tmp_data = new double [m*m];
-      copy (tmp_data, a.data (), a.length ());
+      A_fact.resize (m, m);
+      A_fact.insert (a, 0, 0);
     }
   else
-    tmp_data = dup (a.data (), a.length ());
+    A_fact = a;
 
-  jpvt = new int[n];
-
-  // Clear Pivot vector (code to enforce a certain permutation would
-  // go here...)
+  double *tmp_data = A_fact.fortran_vec ();
 
-  for (int i = 0; i < n; i++)
-    jpvt[i] = 0;
+  Array<int> jpvt (n, 0);
+  int *pjpvt = jpvt.fortran_vec ();
 
-  F77_XFCN (dgeqpf, DGEQPF, (m, n, tmp_data, m, jpvt, tau, work, info));
+  // Code to enforce a certain permutation could go here...
 
-  delete [] work;
-  work = 0;
+  F77_XFCN (dgeqpf, DGEQPF, (m, n, tmp_data, m, pjpvt, ptau, pwork, info));
 
   if (f77_exception_encountered)
     (*current_liboctave_error_handler) ("unrecoverable error in dgeqpf");
   else
     {
       // Form Permutation matrix (if economy is requested, return the
       // indices only!)
 
       if (qr_type == QR::economy && m > n)
 	{
 	  p.resize (1, n, 0.0);
 	  for (int j = 0; j < n; j++)
-	    p.elem (0, j) = jpvt[j];
+	    p.elem (0, j) = jpvt.elem (j);
 	}
       else
 	{
 	  p.resize (n, n, 0.0);
 	  for (int j = 0; j < n; j++)
-	    p.elem (jpvt[j]-1, j) = 1.0;
+	    p.elem (jpvt.elem (j) - 1, j) = 1.0;
 	}
 
-      delete [] jpvt;
-      jpvt = 0;
-
       volatile int n2;
 
       if (qr_type == QR::economy && m > n)
 	{
 	  n2 = n;
 	  r.resize (n, n, 0.0);
 	}
       else
@@ -131,46 +122,34 @@ QRP::QRP (const Matrix& a, QR::type qr_t
 	  n2 = m;
 	  r.resize (m, n, 0.0);
 	}
 
       for (int j = 0; j < n; j++)
 	{
 	  int limit = j < min_mn-1 ? j : min_mn-1;
 	  for (int i = 0; i <= limit; i++)
-	    r.elem (i, j) = tmp_data[m*j+i];
+	    r.elem (i, j) = A_fact.elem (i, j);
 	}
 
       lwork = 32*m;
-      work = new double[lwork];
+      work.resize (lwork);
+      double *pwork = work.fortran_vec ();
 
-      F77_XFCN (dorgqr, DORGQR, (m, m, min_mn, tmp_data, m, tau, work,
-				 lwork, info));
+      F77_XFCN (dorgqr, DORGQR, (m, m, min_mn, tmp_data, m, ptau,
+				 pwork, lwork, info));
 
       if (f77_exception_encountered)
 	(*current_liboctave_error_handler) ("unrecoverable error in dorgqr");
       else
 	{
 	  q = Matrix (tmp_data, m, m);
-	  tmp_data = 0;
 	  q.resize (m, n2);
 	}
     }
-
-  delete [] tau;
-  tau = 0;
-
-  delete [] work;
-  work = 0;
-
-  delete [] tmp_data;
-  tmp_data = 0;
-
-  delete [] jpvt;
-  jpvt = 0;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/dbleQRP.h b/liboctave/dbleQRP.h
--- a/liboctave/dbleQRP.h
+++ b/liboctave/dbleQRP.h
@@ -32,44 +32,42 @@ class ostream;
 
 #include "dbleQR.h"
 
 class
 QRP : public QR
 {
 public:
 
-  QRP (void) : QR (), p (), jpvt (0) { }
+  QRP (void) : QR (), p () { }
 
   QRP (const Matrix& A, QR::type qr_type = QR::std);
 
   QRP (const QRP& a) : QR (a), p (a.p) { }
 
   QRP& operator = (const QRP& a)
     {
       if (this != &a)
 	{
 	  QR::operator = (a);
 	  p = a.p;
 	}
 
       return *this;
     }
 
-  ~QRP (void) { delete [] jpvt; }
+  ~QRP (void) { }
 
   Matrix P (void) const { return p; }
 
   friend ostream&  operator << (ostream& os, const QRP& a);
 
 protected:
 
   Matrix p;
-
-  int *jpvt;
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
