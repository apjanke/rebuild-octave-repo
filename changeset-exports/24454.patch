# HG changeset patch
# User Rik <rik@octave.org>
# Date 1513985385 28800
#      Fri Dec 22 15:29:45 2017 -0800
# Branch stable
# Node ID b9d482dd90f32c78d544125ec063dbd88c6da476
# Parent  f8bbaacefc33d152d9ceb7725aa6d2468deba7f3
doc: Fix mistaken use of space between function and '(' in documentation (bug #52723).

* expr.txi: Reword section on Advanced Indexing for clarity.

*ezmesh.m, ezmeshc.m, ezsurf.m, ezsurfc.m: Fix use of space between function
'(' in documentation.

diff --git a/doc/interpreter/expr.txi b/doc/interpreter/expr.txi
--- a/doc/interpreter/expr.txi
+++ b/doc/interpreter/expr.txi
@@ -129,27 +129,27 @@ a(end:-1:1)       # reversal of a => [4,
 
 @menu
 * Advanced Indexing::
 @end menu
 
 @node Advanced Indexing
 @subsection Advanced Indexing
 
-An array with @samp{n} dimensions can be indexed using @samp{m}
+An array with @samp{nd} dimensions can be indexed using @samp{m}
 indices.  More generally, the set of index tuples determining the
 result is formed by the Cartesian product of the index vectors (or
 ranges or scalars).
 
-For the ordinary and most common case, @w{@code{m == n}}, and each
-index corresponds to its respective dimension.  If @w{@code{m < n}}
-and every index is less than the size of the array in the
-@math{i^{th}} dimension, @code{m(i) < n(i)}, then the index expression
-is padded with trailing singleton dimensions (@code{[ones (m-n, 1)]}).
-If @w{@code{m < n}} but one of the indices @code{m(i)} is outside the
+For the ordinary and most common case, @w{@code{m == nd}}, and each
+index corresponds to its respective dimension.  If @w{@code{m < nd}},
+and every index is less than the size of the array in the @math{i^{th}}
+dimension (@code{m(i) < size (@var{array}, i)}), then the index expression
+is padded with @w{@code{n - m}} trailing singleton dimensions. 
+If @w{@code{m < nd}} but one of the indices @code{m(i)} is outside the
 size of the current array, then the last @w{@code{n-m+1}} dimensions
 are folded into a single dimension with an extent equal to the product
 of extents of the original dimensions.  This is easiest to understand
 with an example.
 
 @example
 a = reshape (1:8, 2, 2, 2)  # Create 3-D array
 a =
@@ -532,18 +532,17 @@ columns of both must agree, or they must
 shape.
 
 @item @var{x} .- @var{y}
 Element-by-element subtraction.  This operator is equivalent to @code{-}.
 
 @item @var{x} * @var{y}
 @opindex *
 Matrix multiplication.  The number of columns of @var{x} must agree with
-the number of rows of @var{y}, or they must be broadcastable to the same
-shape.
+the number of rows of @var{y}.
 
 @item @var{x} .* @var{y}
 @opindex .*
 Element-by-element multiplication.  If both operands are matrices, the
 number of rows and columns must both agree, or they must be
 broadcastable to the same shape.
 
 @item @var{x} / @var{y}
diff --git a/scripts/plot/draw/ezmesh.m b/scripts/plot/draw/ezmesh.m
--- a/scripts/plot/draw/ezmesh.m
+++ b/scripts/plot/draw/ezmesh.m
@@ -27,18 +27,18 @@
 ##
 ## Plot the mesh defined by a function.
 ##
 ## @var{f} is a string, inline function, or function handle with two arguments
 ## defining the function.  By default the plot is over the meshed domain
 ## @code{-2*pi <= @var{x} | @var{y} <= 2*pi} with 60 points in each dimension.
 ##
 ## If three functions are passed, then plot the parametrically defined
-## function @code{[@var{fx} (@var{s}, @var{t}), @var{fy} (@var{s}, @var{t}),
-## @var{fz} (@var{s}, @var{t})]}.
+## function @code{[@var{fx}(@var{s}, @var{t}), @var{fy}(@var{s}, @var{t}),
+## @var{fz}(@var{s}, @var{t})]}.
 ##
 ## If @var{dom} is a two element vector, it represents the minimum and maximum
 ## values of both @var{x} and @var{y}.  If @var{dom} is a four element vector,
 ## then the minimum and maximum values are @code{[xmin xmax ymin ymax]}.
 ##
 ## @var{n} is a scalar defining the number of points to use in each dimension.
 ##
 ## If the argument @qcode{"circ"} is given, then the function is plotted over
diff --git a/scripts/plot/draw/ezmeshc.m b/scripts/plot/draw/ezmeshc.m
--- a/scripts/plot/draw/ezmeshc.m
+++ b/scripts/plot/draw/ezmeshc.m
@@ -27,18 +27,18 @@
 ##
 ## Plot the mesh and contour lines defined by a function.
 ##
 ## @var{f} is a string, inline function, or function handle with two arguments
 ## defining the function.  By default the plot is over the meshed domain
 ## @code{-2*pi <= @var{x} | @var{y} <= 2*pi} with 60 points in each dimension.
 ##
 ## If three functions are passed, then plot the parametrically defined
-## function @code{[@var{fx} (@var{s}, @var{t}), @var{fy} (@var{s}, @var{t}),
-## @var{fz} (@var{s}, @var{t})]}.
+## function @code{[@var{fx}(@var{s}, @var{t}), @var{fy}(@var{s}, @var{t}),
+## @var{fz}(@var{s}, @var{t})]}.
 ##
 ## If @var{dom} is a two element vector, it represents the minimum and maximum
 ## values of both @var{x} and @var{y}.  If @var{dom} is a four element vector,
 ## then the minimum and maximum values are @code{[xmin xmax ymin ymax]}.
 ##
 ## @var{n} is a scalar defining the number of points to use in each dimension.
 ##
 ## If the argument @qcode{"circ"} is given, then the function is plotted over
diff --git a/scripts/plot/draw/ezsurf.m b/scripts/plot/draw/ezsurf.m
--- a/scripts/plot/draw/ezsurf.m
+++ b/scripts/plot/draw/ezsurf.m
@@ -27,18 +27,18 @@
 ##
 ## Plot the surface defined by a function.
 ##
 ## @var{f} is a string, inline function, or function handle with two arguments
 ## defining the function.  By default the plot is over the meshed domain
 ## @code{-2*pi <= @var{x} | @var{y} <= 2*pi} with 60 points in each dimension.
 ##
 ## If three functions are passed, then plot the parametrically defined
-## function @code{[@var{fx} (@var{s}, @var{t}), @var{fy} (@var{s}, @var{t}),
-## @var{fz} (@var{s}, @var{t})]}.
+## function @code{[@var{fx}(@var{s}, @var{t}), @var{fy}(@var{s}, @var{t}),
+## @var{fz}(@var{s}, @var{t})]}.
 ##
 ## If @var{dom} is a two element vector, it represents the minimum and maximum
 ## values of both @var{x} and @var{y}.  If @var{dom} is a four element vector,
 ## then the minimum and maximum values are @code{[xmin xmax ymin ymax]}.
 ##
 ## @var{n} is a scalar defining the number of points to use in each dimension.
 ##
 ## If the argument @qcode{"circ"} is given, then the function is plotted over
diff --git a/scripts/plot/draw/ezsurfc.m b/scripts/plot/draw/ezsurfc.m
--- a/scripts/plot/draw/ezsurfc.m
+++ b/scripts/plot/draw/ezsurfc.m
@@ -27,18 +27,18 @@
 ##
 ## Plot the surface and contour lines defined by a function.
 ##
 ## @var{f} is a string, inline function, or function handle with two arguments
 ## defining the function.  By default the plot is over the meshed domain
 ## @code{-2*pi <= @var{x} | @var{y} <= 2*pi} with 60 points in each dimension.
 ##
 ## If three functions are passed, then plot the parametrically defined
-## function @code{[@var{fx} (@var{s}, @var{t}), @var{fy} (@var{s}, @var{t}),
-## @var{fz} (@var{s}, @var{t})]}.
+## function @code{[@var{fx}(@var{s}, @var{t}), @var{fy}(@var{s}, @var{t}),
+## @var{fz}(@var{s}, @var{t})]}.
 ##
 ## If @var{dom} is a two element vector, it represents the minimum and maximum
 ## values of both @var{x} and @var{y}.  If @var{dom} is a four element vector,
 ## then the minimum and maximum values are @code{[xmin xmax ymin ymax]}.
 ##
 ## @var{n} is a scalar defining the number of points to use in each dimension.
 ##
 ## If the argument @qcode{"circ"} is given, then the function is plotted over
