# HG changeset patch
# User jwe
# Date 1189707771 0
#      Thu Sep 13 18:22:51 2007 +0000
# Node ID 76e3d985ae5627b36e4513e66244894c4e698dd1
# Parent  0a71f51ae6243f56d4b62236cd50e1d657bfd658
[project @ 2007-09-13 18:22:38 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2007-09-13  John W. Eaton  <jwe@octave.org>
+
+	* plot/__default_colormap__.m: Delete.
+	* plot/Makefile (SOURCES): Remove from the list.
+
 2007-09-10  David Bateman  <dbateman@free.fr>
 
 	* plot/__go_draw_axes__.m: Allow gnuplot 4.0 with patches, but
 	limit the selection of colors in the same way as for lines.
 	* plot/__patch__.m: Allow matrix arguments with one patch per
 	column.
 	* plot/__bar__.m: Adapt to use "patch".
 
diff --git a/scripts/image/colormap.m b/scripts/image/colormap.m
--- a/scripts/image/colormap.m
+++ b/scripts/image/colormap.m
@@ -22,20 +22,21 @@
 ## @deftypefnx {Function File} {} colormap ("default")
 ## Set the current colormap.
 ##
 ## @code{colormap (@var{map})} sets the current colormap to @var{map}.  The
 ## color map should be an @var{n} row by 3 column matrix.  The columns
 ## contain red, green, and blue intensities respectively.  All entries
 ## should be between 0 and 1 inclusive.  The new colormap is returned.
 ##
-## @code{colormap ("default")} restores the default colormap (a gray scale
-## colormap with 64 entries).  The default colormap is returned.
+## @code{colormap ("default")} restores the default colormap (the
+## @code{jet} map with 64 entries).  The default colormap is returned.
 ##
 ## With no arguments, @code{colormap} returns the current color map.
+## @seealso{jet}
 ## @end deftypefn
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: July 1994
 ## Adapted-By: jwe
 
 ## PKG_ADD: mark_as_command colormap
 
@@ -44,17 +45,17 @@ function cmap = colormap (map)
   if (nargin > 1)
     print_usage ();
   endif
 
   if (nargin == 1)
 
     if (ischar (map))
       if (strcmp (map, "default"))
-        map = __default_colormap__ ();
+        map = jet (64);
       else
         map = feval (map);
       endif
     endif
 
     if (! isempty (map))
       if (columns (map) != 3)
         error ("colormap: map must have 3 columns: [R,G,B]");
diff --git a/scripts/plot/Makefile.in b/scripts/plot/Makefile.in
--- a/scripts/plot/Makefile.in
+++ b/scripts/plot/Makefile.in
@@ -18,17 +18,16 @@ include $(TOPDIR)/Makeconf
 
 INSTALL = @INSTALL@
 INSTALL_PROGRAM = @INSTALL_PROGRAM@
 INSTALL_DATA = @INSTALL_DATA@
 
 SOURCES = \
   __axis_label__.m \
   __bar__.m \
-  __default_colormap__.m \
   __default_plot_options__.m \
   __errcomm__.m \
   __errplot__.m \
   __go_close_all__.m \
   __go_draw_axes__.m \
   __go_draw_figure__.m \
   __gnuplot_version__.m \
   __line__.m \
diff --git a/scripts/plot/__axis_label__.m b/scripts/plot/__axis_label__.m
--- a/scripts/plot/__axis_label__.m
+++ b/scripts/plot/__axis_label__.m
@@ -12,20 +12,17 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
-## -*- texinfo -*-
-## @deftypefn {Function File} {} __axis_label__ (@var{caller}, @var{text})
-## Utility function for @code{xlabel}, @code{ylabel}, and @code{zlabel}.
-## @end deftypefn
+## Undocumented internal function.
 
 ## Author: jwe
 
 function retval = __axis_label__ (caller, txt, varargin)
 
   if (ischar (txt))
     ## FIXME -- should be able to use text instead of __go_text__.
     ca = gca ();
diff --git a/scripts/plot/__bar__.m b/scripts/plot/__bar__.m
--- a/scripts/plot/__bar__.m
+++ b/scripts/plot/__bar__.m
@@ -12,21 +12,17 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
-## -*- texinfo -*-
-## @deftypefn {Function File} {} __bar__ (@dots{})
-## Support function for @code{bar} and @code{hbar}. 
-## @seealso{bar, hbar}
-## @end deftypefn
+## Undocumented internal function.
 
 ## Author: jwe
 
 function varargout = __bar__ (vertical, func, varargin)
 
   width = 0.8;
   group = true;
 
diff --git a/scripts/plot/__default_colormap__.m b/scripts/plot/__default_colormap__.m
deleted file mode 100644
--- a/scripts/plot/__default_colormap__.m
+++ /dev/null
@@ -1,33 +0,0 @@
-## Copyright (C) 2007 John W. Eaton
-##
-## This file is part of Octave.
-##
-## Octave is free software; you can redistribute it and/or modify it
-## under the terms of the GNU General Public License as published by
-## the Free Software Foundation; either version 2, or (at your option)
-## any later version.
-##
-## Octave is distributed in the hope that it will be useful, but
-## WITHOUT ANY WARRANTY; without even the implied warranty of
-## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-## General Public License for more details.
-##
-## You should have received a copy of the GNU General Public License
-## along with Octave; see the file COPYING.  If not, write to the Free
-## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
-## 02110-1301, USA.
-
-## -*- texinfo -*-
-## @deftypefn {Function File} {} __default_colormap__ ()
-## Return the default colormap.
-## @end deftypefn
-
-## Author: jwe
-
-function cmap = __default_colormap__ ()
-
-  gr = [0:63]';
-
-  cmap = [ gr, gr, gr ] / 63;
-
-endfunction
diff --git a/scripts/plot/__default_plot_options__.m b/scripts/plot/__default_plot_options__.m
--- a/scripts/plot/__default_plot_options__.m
+++ b/scripts/plot/__default_plot_options__.m
@@ -12,21 +12,17 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
-## -*- texinfo -*-
-## @deftypefn {Function File} {} __default_plot_options__ ()
-## Return a default options structure for __pltopt__.
-## @seealso{__pltopt__}
-## @end deftypefn
+## Undocumented internal function.
 
 ## Author: jwe
 
 function options = __default_plot_options__ ()
 
   options.key = "";
   options.color = [];
   options.linestyle = "-";
diff --git a/scripts/plot/__errcomm__.m b/scripts/plot/__errcomm__.m
--- a/scripts/plot/__errcomm__.m
+++ b/scripts/plot/__errcomm__.m
@@ -12,22 +12,17 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
-## -*- texinfo -*-
-## @deftypefn {Function File} {} __errcomm__ (@var{args})
-## Common argument handling code for all error plots (errorbar, loglogerr,
-## semilogyerr, semilogxerr).
-## @seealso{errorbar, semilogxerr, semilogyerr, loglogerr, __pltopt__}
-## @end deftypefn
+## Undocumented internal function.
 
 ## Created: 20.02.2001
 ## Author: Teemu Ikonen <tpikonen@pcu.helsinki.fi>
 ## Keywords: errorbar, plotting
 
 function retval = __errcomm__ (caller, p, varargin)
 
   if (nargin < 4)
diff --git a/scripts/plot/__errplot__.m b/scripts/plot/__errplot__.m
--- a/scripts/plot/__errplot__.m
+++ b/scripts/plot/__errplot__.m
@@ -12,27 +12,17 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
-## -*- texinfo -*-
-## @deftypefn {Function File} {} __errplot__ (@var{args})
-## Really plot errorbar plots. User interface in function errorbar.
-##
-## @example
-## __errplot__ (@var{arg1}, @var{arg2}, ..., @var{fmt})
-## @end example
-##
-## @seealso{semilogx, semilogy, loglog, polar, mesh, contour, __pltopt__,
-## bar, stairs, errorbar, xlabel, ylabel, title}
-## @end deftypefn
+## Undocumented internal function.
 
 ## Created: 18.7.2000
 ## Author: Teemu Ikonen <tpikonen@pcu.helsinki.fi>
 ## Keywords: errorbar, plotting
 
 function h = __errplot__ (fstr, p, a1, a2, a3, a4, a5, a6)
 
   if (nargin < 4 || nargin > 8) # at least two data arguments needed
diff --git a/scripts/plot/__gnuplot_version__.m b/scripts/plot/__gnuplot_version__.m
--- a/scripts/plot/__gnuplot_version__.m
+++ b/scripts/plot/__gnuplot_version__.m
@@ -12,22 +12,21 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
-## -*- texinfo -*-
-## @deftypefn {Function File} {@var{version} =} __gnuplot_version__ (@var{gplt_exe})
+## Undocumented internal function.
+
 ## Return the version of gnuplot we are using.  Note that we do not
 ## attempt to handle the case of the user switching to different
 ## versions of gnuplot during the same session.
-## @end deftypefn
 
 function version = __gnuplot_version__ ()
 
   persistent __version__ = "";
 
   if (isempty (__version__))
     [status, output] = system (sprintf ("%s --version", gnuplot_binary ()));
     pattern = "^[^\\s]*\\s*([0-9]+\\.[0-9]+)\\s*[^\\s]*\\s*([^\\s]*)";
diff --git a/scripts/plot/__go_close_all__.m b/scripts/plot/__go_close_all__.m
--- a/scripts/plot/__go_close_all__.m
+++ b/scripts/plot/__go_close_all__.m
@@ -12,19 +12,15 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
-## -*- texinfo -*-
-## @deftypefn {Function File} {} __go_close_all__ ()
-## Internal function to close all figures.
-## @seealso{drawnow}
-## @end deftypefn
+## Undocumented internal function.
 
 ## Author: jwe
 
 function __go_close_all__ ()
   close ("all", "hidden");
 endfunction
diff --git a/scripts/plot/__go_draw_axes__.m b/scripts/plot/__go_draw_axes__.m
--- a/scripts/plot/__go_draw_axes__.m
+++ b/scripts/plot/__go_draw_axes__.m
@@ -12,20 +12,17 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
-## -*- texinfo -*-
-## @deftypefn {Function File} {} __go_draw_axes__ (@var{axis_obj}, @var{plot_stream})
-## Display the axes @var{axis_obj} on @var{plot_stream}.
-## @end deftypefn
+## Undocumented internal function.
 
 ## Author: jwe
 
 function __go_draw_axes__ (h, plot_stream)
 
   if (nargin == 2)
 
     axis_obj = get (h);
diff --git a/scripts/plot/__go_draw_figure__.m b/scripts/plot/__go_draw_figure__.m
--- a/scripts/plot/__go_draw_figure__.m
+++ b/scripts/plot/__go_draw_figure__.m
@@ -12,20 +12,17 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
-## -*- texinfo -*-
-## @deftypefn {Function File} {} __go_draw_figure__ (f)
-## Display the figure @var{f}.
-## @end deftypefn
+## Undocumented internal function.
 
 ## Author: jwe
 
 function __go_draw_figure__ (f, plot_stream)
 
   if (nargin == 2)
     if (strcmp (f.type, "figure"))
 
diff --git a/scripts/plot/__line__.m b/scripts/plot/__line__.m
--- a/scripts/plot/__line__.m
+++ b/scripts/plot/__line__.m
@@ -12,22 +12,21 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
-## -*- texinfo -*-
-## @deftypefn {Function File} {} __line__ (@var{p}, @var{x}, @var{y})
-## @deftypefnx {Function File} {} line (@var{p}, @var{x}, @var{y}, @var{z})
-## Create line object from @var{x} and @var{y} with parent @var{p}.
+## Undocumented internal function.
+
+## __line__ (p, x, y, z)
+## Create line object from x, y, and z with parent p.
 ## Return handle to line object.
-## @end deftypefn
 
 ## Author: jwe
 
 function h = __line__ (p, varargin)
 
   if (nargin < 1)
     print_usage ();
   endif
diff --git a/scripts/plot/__next_line_color__.m b/scripts/plot/__next_line_color__.m
--- a/scripts/plot/__next_line_color__.m
+++ b/scripts/plot/__next_line_color__.m
@@ -12,20 +12,19 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
-## -*- texinfo -*-
-## @deftypefn {Function File} {} __next_line_color__ (@var{reset})
+## Undocumented internal function.
+
 ## Return the next line color in the rotation.
-## @end deftypefn
 
 ## Author: jwe
 
 function rgb = __next_line_color__ (reset)
 
   persistent color_rotation = [ 0,    0,    1;
 				0,    0.5,  0;
 				1,    0,    0;
diff --git a/scripts/plot/__patch__.m b/scripts/plot/__patch__.m
--- a/scripts/plot/__patch__.m
+++ b/scripts/plot/__patch__.m
@@ -12,21 +12,21 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
-## -*- texinfo -*-
-## @deftypefn {Function File} {} __patch__ (@var{p}, @var{x}, @var{y}, @var{c})
-## Create patch object from @var{x} and @var{y} with color @var{c} and parent @var{p}.
+## Undocumented internal function.
+
+## __patch__ (p, x, y, c)
+## Create patch object from x and y with color c and parent p.
 ## Return handle to patch object.
-## @end deftypefn
 
 ## Author: Kai Habel
 
 function h = __patch__ (p, varargin)
 
   if (nargin < 3)
     print_usage ();
   endif
diff --git a/scripts/plot/__plr1__.m b/scripts/plot/__plr1__.m
--- a/scripts/plot/__plr1__.m
+++ b/scripts/plot/__plr1__.m
@@ -12,19 +12,17 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
-## -*- texinfo -*-
-## @deftypefn {Function File} {} __plr1__ (@var{h}, @var{theta}, @var{fmt})
-## @end deftypefn
+## Undocumented internal function.
 
 ## Author: jwe
 
 function retval = __plr1__ (h, theta, fmt)
 
   if (nargin != 3)
     print_usage ();
   endif
diff --git a/scripts/plot/__plr2__.m b/scripts/plot/__plr2__.m
--- a/scripts/plot/__plr2__.m
+++ b/scripts/plot/__plr2__.m
@@ -12,19 +12,17 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
-## -*- texinfo -*-
-## @deftypefn {Function File} {} __plr2__ (@var{h}, @var{theta}, @var{rho}, @var{fmt})
-## @end deftypefn
+## Undocumented internal function.
 
 ## Author: jwe
 
 function retval = __plr2__ (h, theta, rho, fmt)
 
   if (nargin != 4)
     print_usage ();
   endif
diff --git a/scripts/plot/__plt1__.m b/scripts/plot/__plt1__.m
--- a/scripts/plot/__plt1__.m
+++ b/scripts/plot/__plt1__.m
@@ -12,19 +12,17 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
-## -*- texinfo -*-
-## @deftypefn {Function File} {} __plt1__ (@var{h}, @var{x1}, @var{options}, @var{properties})
-## @end deftypefn
+## Undocumented internal function.
 
 ## Author: jwe
 
 function retval = __plt1__ (h, x1, options, properties)
 
   if (nargin < 2 || nargin > 4)
     print_usage ();
   endif
diff --git a/scripts/plot/__plt2__.m b/scripts/plot/__plt2__.m
--- a/scripts/plot/__plt2__.m
+++ b/scripts/plot/__plt2__.m
@@ -12,19 +12,17 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
-## -*- texinfo -*-
-## @deftypefn {Function File} {} __plt2__ (@var{h}, @var{x1}, @var{x2}, @var{options}, @var{properties})
-## @end deftypefn
+## Undocumented internal function.
 
 ## Author: jwe
 
 function retval = __plt2__ (h, x1, x2, options, properties)
 
   if (nargin < 3 || nargin > 5)
     print_usage ();
   endif
diff --git a/scripts/plot/__plt2mm__.m b/scripts/plot/__plt2mm__.m
--- a/scripts/plot/__plt2mm__.m
+++ b/scripts/plot/__plt2mm__.m
@@ -12,19 +12,17 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
-## -*- texinfo -*-
-## @deftypefn {Function File} {} __plt2mm__ (@var{h}, @var{x}, @var{y}, @var{options}, @var{properties})
-## @end deftypefn
+## Undocumented internal function.
 
 ## Author: jwe
 
 function retval = __plt2mm__ (h, x, y, options, properties)
 
   if (nargin < 3 || nargin > 5)
     print_usage ();
   endif
diff --git a/scripts/plot/__plt2mv__.m b/scripts/plot/__plt2mv__.m
--- a/scripts/plot/__plt2mv__.m
+++ b/scripts/plot/__plt2mv__.m
@@ -12,19 +12,17 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
-## -*- texinfo -*-
-## @deftypefn {Function File} {} __plt2mv__ (@var{h}, @var{x}, @var{y}, @var{options}, @var{properties})
-## @end deftypefn
+## Undocumented internal function.
 
 ## Author: jwe
 
 function retval = __plt2mv__ (h, x, y, options, properties)
 
   if (nargin < 3 || nargin > 5)
     print_usage ();
   endif
diff --git a/scripts/plot/__plt2ss__.m b/scripts/plot/__plt2ss__.m
--- a/scripts/plot/__plt2ss__.m
+++ b/scripts/plot/__plt2ss__.m
@@ -12,19 +12,17 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
-## -*- texinfo -*-
-## @deftypefn {Function File} {} __plt2ss__ (@var{h}, @var{x}, @var{y}, @var{options}, @var{properties})
-## @end deftypefn
+## Undocumented internal function.
 
 ## Author: jwe
 
 function retval = __plt2ss__ (h, x, y, options, properties)
 
   if (nargin < 3 || nargin > 5)
     print_usage ();
   endif
diff --git a/scripts/plot/__plt2vm__.m b/scripts/plot/__plt2vm__.m
--- a/scripts/plot/__plt2vm__.m
+++ b/scripts/plot/__plt2vm__.m
@@ -12,19 +12,17 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
-## -*- texinfo -*-
-## @deftypefn {Function File} {} __plt2vm__ (@var{h}, @var{x}, @var{y}, @var{options}, @var{properties})
-## @end deftypefn
+## Undocumented internal function.
 
 ## Author: jwe
 
 function retval = __plt2vm__ (h, x, y, options, properties)
 
   if (nargin < 3 || nargin > 5)
     print_usage ();
   endif
diff --git a/scripts/plot/__plt2vv__.m b/scripts/plot/__plt2vv__.m
--- a/scripts/plot/__plt2vv__.m
+++ b/scripts/plot/__plt2vv__.m
@@ -12,19 +12,17 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
-## -*- texinfo -*-
-## @deftypefn {Function File} {} __plt2vv__ (@var{h}, @var{x}, @var{y}, @var{options}, @var{properties})
-## @end deftypefn
+## Undocumented internal function.
 
 ## Author: jwe
 
 function retval = __plt2vv__ (h, x, y, options, properties)
 
   if (nargin < 3 || nargin > 5)
     print_usage ();
   endif
diff --git a/scripts/plot/__plt__.m b/scripts/plot/__plt__.m
--- a/scripts/plot/__plt__.m
+++ b/scripts/plot/__plt__.m
@@ -12,19 +12,17 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
-## -*- texinfo -*-
-## @deftypefn {Function File} {} __plt__ (@code{caller}, @dots{})
-## @end deftypefn
+## Undocumented internal function.
 
 ## Author: jwe
 
 function retval = __plt__ (caller, h, varargin)
 
   nargs = nargin - 2;
 
   if (nargs > 0)
diff --git a/scripts/plot/__plt_get_axis_arg__.m b/scripts/plot/__plt_get_axis_arg__.m
--- a/scripts/plot/__plt_get_axis_arg__.m
+++ b/scripts/plot/__plt_get_axis_arg__.m
@@ -12,19 +12,17 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
-## -*- texinfo -*-
-## @deftypefn {Function File} {[@var{h}, @var{remaining_args}} plot (@var{args})
-## @end deftypefn
+## Undocumented internal function.
 
 ## Author: jwe
 
 function [h, varargin] = __plt_get_axis_arg__ (caller, varargin)
 
 
   if (nargin > 1)
     tmp = varargin{1};
diff --git a/scripts/plot/__pltopt1__.m b/scripts/plot/__pltopt1__.m
--- a/scripts/plot/__pltopt1__.m
+++ b/scripts/plot/__pltopt1__.m
@@ -12,21 +12,19 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
-## -*- texinfo -*-
-## @deftypefn {Function File} {} __pltopt1__ (@var{caller}, @var{opt})
+## Undocumented internal function.
+
 ## Really decode plot option strings.
-## @seealso{__pltopt__}
-## @end deftypefn
 
 ## Author: Rick Niles <niles@axp745.gsfc.nasa.gov>
 ## Adapted-By: jwe
 ## Maintainer: jwe
 
 function [options, valid] = __pltopt1__ (caller, opt, err_on_invalid)
 
   options = __default_plot_options__ ();
diff --git a/scripts/plot/__pltopt__.m b/scripts/plot/__pltopt__.m
--- a/scripts/plot/__pltopt__.m
+++ b/scripts/plot/__pltopt__.m
@@ -12,18 +12,20 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
-## -*- texinfo -*-
+## Undocumented internal function.
+
 ## @deftypefn {Function File} {} __pltopt__ (@var{caller}, @var{opt})
+##
 ## Decode plot option strings.
 ##
 ## @var{opt} can currently be some combination of the following:
 ##
 ## @table @code
 ## @item "-"
 ## For solid linestyle (default).
 ##
@@ -77,19 +79,16 @@
 ## @itemx "p"
 ## @itemx "h"
 ## Used in combination with the points or linespoints styles, set the point
 ## style.
 ## @end table
 ##
 ## The legend may be fixed to include the name of the variable
 ## plotted in some future version of Octave.
-##
-## @seealso{__pltopt1__}
-## @end deftypefn
 
 ## Author: jwe
 
 function [options, valid] = __pltopt__ (caller, opt, err_on_invalid)
 
   valid = true;
   options =  __default_plot_options__ ();
 
diff --git a/scripts/plot/bar.m b/scripts/plot/bar.m
--- a/scripts/plot/bar.m
+++ b/scripts/plot/bar.m
@@ -15,17 +15,17 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{h} =} bar (@var{x}, @var{y}, @var{style})
 ## @deftypefnx {Function File} {[@var{xb}, @var{yb}] =} bar (@dots{})
-## Given two vectors of x-y data, @code{bar} produces a bar graph.
+## Given two vectors of x-y data, @code{bar} produce a bar graph.
 ##
 ## If only one argument is given, it is taken as a vector of y-values
 ## and the x coordinates are taken to be the indices of the elements.
 ##
 ## If @var{y} is a matrix, then each column of @var{y} is taken to be a
 ## separate bar graph plotted on the same graph. By default the columns
 ## are plotted side-by-side. This behavior can be changed by the @var{style}
 ## argument, which can take the values 'group' (the default), or 'stack'.
@@ -42,18 +42,17 @@
 ##
 ## @example
 ## [xb, yb] = bar (x, y);
 ## plot (xb, yb);
 ## @end example
 ##
 ## @noindent
 ## are equivalent.
-## @seealso{hbar, plot, semilogx, semilogy, loglog, polar, mesh, contour,
-## stairs, xlabel, ylabel, title}
+## @seealso{hbar, plot}
 ## @end deftypefn
 
 ## Author: jwe
 
 function varargout = bar (varargin)
   varargout = cell (nargout, 1);
   [varargout{:}] = __bar__ (true, "bar", varargin{:});
 endfunction
diff --git a/scripts/plot/barh.m b/scripts/plot/barh.m
--- a/scripts/plot/barh.m
+++ b/scripts/plot/barh.m
@@ -15,17 +15,17 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{h} =} barh (@var{x}, @var{y}, @var{style})
 ## @deftypefnx {Function File} {[@var{xb}, @var{yb}] =} barh (@dots{})
-## Given two vectors of x-y data, @code{bar} produces a horizontal bar graph.
+## Given two vectors of x-y data, @code{bar} produce a horizontal bar graph.
 ##
 ## If only one argument is given, it is taken as a vector of y-values
 ## and the x coordinates are taken to be the indices of the elements.
 ##
 ## If @var{y} is a matrix, then each column of @var{y} is taken to be a
 ## separate bar graph plotted on the same graph. By default the columns
 ## are plotted side-by-side. This behavior can be changed by the @var{style}
 ## argument, which can take the values 'group' (the default), or 'stack'.
@@ -42,18 +42,17 @@
 ##
 ## @example
 ## [xb, yb] = barh (x, y);
 ## plot (xb, yb);
 ## @end example
 ##
 ## @noindent
 ## are equivalent.
-## @seealso{bar, plot, semilogx, semilogy, loglog, polar, mesh, contour,
-## stairs, xlabel, ylabel, title}
+## @seealso{bar, plot}
 ## @end deftypefn
 
 ## Author: jwe
 
 function varargout = barh (varargin)
   varargout = cell (nargout, 1);
   [varargout{:}] = __bar__ (false, "barh", varargin{:});
 endfunction
diff --git a/scripts/plot/clf.m b/scripts/plot/clf.m
--- a/scripts/plot/clf.m
+++ b/scripts/plot/clf.m
@@ -15,16 +15,17 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} clf ()
 ## Clear the current figure.
+## @seealso{close, delete}
 ## @end deftypefn
 
 ## Author: jwe
 
 function clf ()
 
   if (nargin == 0)
     cf = gcf ();
diff --git a/scripts/plot/close.m b/scripts/plot/close.m
--- a/scripts/plot/close.m
+++ b/scripts/plot/close.m
@@ -17,17 +17,20 @@
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Command} {} close
 ## @deftypefnx {Command} {} close (@var{n})
 ## @deftypefnx {Command} {} close all
 ## @deftypefnx {Command} {} close all hidden
-## Close the plot window(s).
+## Close figure window(s) by calling the function specified by the
+## @code{"closerequestfcn"} property for each figure.  By default, the
+## function @code{closereq} is used.
+## @seealso{closereq}
 ## @end deftypefn
 
 ## Author: jwe
 
 ## PKG_ADD: mark_as_command close
 
 function retval = close (arg1, arg2)
 
diff --git a/scripts/plot/closereq.m b/scripts/plot/closereq.m
--- a/scripts/plot/closereq.m
+++ b/scripts/plot/closereq.m
@@ -14,17 +14,19 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} closereq ()
-## Close the current figure.
+## Close the current figure and delete all graphics objects associated
+## with it.
+## @seealso{close, delete}
 ## @end deftypefn
 
 ## Author: jwe
 
 function closereq ()
 
   if (nargin == 0)
     cf = get (0, "currentfigure");
diff --git a/scripts/plot/contour.m b/scripts/plot/contour.m
--- a/scripts/plot/contour.m
+++ b/scripts/plot/contour.m
@@ -17,21 +17,20 @@
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{c} =} contour (@var{z})
 ## @deftypefnx {Function File} {@var{c} =} contour (@var{z}, @var{vn})
 ## @deftypefnx {Function File} {@var{c} =} contour (@var{x}, @var{y}, @var{z})
 ## @deftypefnx {Function File} {@var{c} =} contour (@var{x}, @var{y}, @var{z}, @var{vn})
-##
 ## Plot level curves (contour lines) of the matrix @var{z}, using the
 ## contour matrix @var{c} computed by @code{contourc} from the same
-## arguments; see the latter for their interpretation.  @var{c} is only
-## returned if requested.  For example:
+## arguments; see the latter for their interpretation.  The set of
+## contour levels, @var{c}, is only returned if requested.  For example:
 ##
 ## @example
 ## @group
 ## x = 0:2;
 ## y = x;
 ## z = x' * y;
 ## contour (x, y, z, 2:3)
 ##
diff --git a/scripts/plot/contourc.m b/scripts/plot/contourc.m
--- a/scripts/plot/contourc.m
+++ b/scripts/plot/contourc.m
@@ -103,14 +103,14 @@ function [c, lev] = contourc (varargin)
   if (size (x, 2) == 1)
     x = x';
   endif
   if (size (y, 2) == 1)
     y = y';
   endif
 
   ## Now call __contourc__ for the real work...
-  c=__contourc__(x,y,z,vv);
-  if nargout==2,
+  c = __contourc__ (x, y, z, vv);
+  if (nargout == 2)
     lev = vv;
   endif
 
 endfunction
diff --git a/scripts/plot/drawnow.m b/scripts/plot/drawnow.m
--- a/scripts/plot/drawnow.m
+++ b/scripts/plot/drawnow.m
@@ -14,17 +14,21 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} drawnow ()
-## Display the current graphics.
+## Update and display the current graphics.
+##
+## Octave automatically calls drawnow just before printing a prompt,
+## when @code{sleep} or @code{pause} is called, or while waiting for
+## command-line input.
 ## @end deftypefn
 
 ## Author: jwe
 
 function drawnow (term, file, debug_file)
 
   persistent drawnow_executing = 0;
 
diff --git a/scripts/plot/errorbar.m b/scripts/plot/errorbar.m
--- a/scripts/plot/errorbar.m
+++ b/scripts/plot/errorbar.m
@@ -44,21 +44,21 @@
 ## depending on the plot type. Any number of argument sets may appear,
 ## as long as they are separated with a format string @var{fmt}.
 ##
 ## If @var{y} is a matrix, @var{x} and error parameters must also be matrices
 ## having same dimensions. The columns of @var{y} are plotted versus the
 ## corresponding columns of @var{x} and errorbars are drawn from
 ## the corresponding columns of error parameters.
 ##
-## If @var{fmt} is missing, yerrorbars ("~") plot style
-## is assumed.
+## If @var{fmt} is missing, yerrorbars ("~") plot style is assumed.
+##
 ## If the @var{fmt} argument is supplied, it is interpreted as in
-## normal plots (See __pltopt__). In addition the following
-## plot styles are supported by errorbar:
+## normal plots. In addition the following plot styles are supported by
+## errorbar:
 ##
 ## @table @samp
 ## @item ~
 ## Set yerrorbars plot style (default).
 ##
 ## @item >
 ## Set xerrorbars plot style.
 ##
@@ -68,46 +68,46 @@
 ## @item #
 ## Set boxes plot style.
 ##
 ## @item #~
 ## Set boxerrorbars plot style.
 ##
 ## @item #~>
 ## Set boxxyerrorbars plot style.
-##
 ## @end table
 ##
 ## Examples:
 ##
 ## @example
-## errorbar(@var{x}, @var{y}, @var{ex}, ">")
+## errorbar (@var{x}, @var{y}, @var{ex}, ">")
 ## @end example
 ##
-## xerrorbar plot of @var{y} versus @var{x} with @var{x} errorbars drawn from
-## @var{x}-@var{ex} to @var{x}+@var{ex}.
+## produces an xerrorbar plot of @var{y} versus @var{x} with @var{x}
+## errorbars drawn from @var{x}-@var{ex} to @var{x}+@var{ex}.
 ##
 ## @example
-## errorbar(@var{x}, @var{y1}, @var{ey}, "~", @var{x}, @var{y2}, @var{ly}, @var{uy})
+## errorbar (@var{x}, @var{y1}, @var{ey}, "~",
+##           @var{x}, @var{y2}, @var{ly}, @var{uy})
 ## @end example
 ##
-## Two yerrorbar plots with @var{y1} and @var{y2} versus @var{x}.
+## produces yerrorbar plots with @var{y1} and @var{y2} versus @var{x}.
 ## Errorbars for @var{y1} are drawn from @var{y1}-@var{ey} to
 ## @var{y1}+@var{ey}, errorbars for @var{y2} from @var{y2}-@var{ly} to
 ## @var{y2}+@var{uy}.
 ##
 ## @example
-## errorbar(@var{x}, @var{y}, @var{lx}, @var{ux}, @var{ly}, @var{uy}, "~>")
+## errorbar (@var{x}, @var{y}, @var{lx}, @var{ux},
+##           @var{ly}, @var{uy}, "~>")
 ## @end example
 ##
-## xyerrorbar plot of @var{y} versus @var{x} where @var{x} errorbars
-## are drawn from @var{x}-@var{lx} to @var{x}+@var{ux} and @var{y} errorbars
-## from @var{y}-@var{ly} to @var{y}+@var{uy}.
-## @seealso{semilogx, semilogy, loglog, polar, mesh, contour, __pltopt__,
-## bar, stairs, xlabel, ylabel, title}
+## produces an xyerrorbar plot of @var{y} versus @var{x} in which
+## @var{x} errorbars are drawn from @var{x}-@var{lx} to @var{x}+@var{ux}
+## and @var{y} errorbars from @var{y}-@var{ly} to @var{y}+@var{uy}.
+## @seealso{semilogxerr, semilogyerr, loglogerr}
 ## @end deftypefn
 
 ## Created: 18.7.2000
 ## Author: Teemu Ikonen <tpikonen@pcu.helsinki.fi>
 ## Keywords: errorbar, plotting
 
 function errorbar (varargin)
 
diff --git a/scripts/plot/figure.m b/scripts/plot/figure.m
--- a/scripts/plot/figure.m
+++ b/scripts/plot/figure.m
@@ -13,20 +13,23 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} figure (@var{n}, @var{p}, @var{v}, @dots{})
+## @deftypefn {Function File} {} figure (@var{n})
+## @deftypefnx {Function File} {} figure (@var{n}, @var{property}, @var{value}, @dots{})
 ## Set the current plot window to plot window @var{n}.  If no arguments are
-## specified, the next available window number is chosen.  Parameters @var{p}
-## and settings @var{v} can be given in pairs if @var{n} is specified. 
+## specified, the next available window number is chosen.
+##
+## Multiple property-value pairs may be specified for the figure, but they
+## must appear in pairs.
 ## @end deftypefn
 
 ## Author: jwe, Bill Denney
 
 function h = figure (varargin)
 
   nargs = nargin;
 
diff --git a/scripts/plot/fplot.m b/scripts/plot/fplot.m
--- a/scripts/plot/fplot.m
+++ b/scripts/plot/fplot.m
@@ -16,25 +16,25 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} fplot (@var{fn}, @var{limits})
 ## @deftypefnx {Function File} {} fplot (@var{fn}, @var{limits}, @var{tol})
 ## @deftypefnx {Function File} {} fplot (@var{fn}, @var{limits}, @var{n})
-## @deftypefnx {Function File} {} fplot (@dots{}, @var{LineSpec})
+## @deftypefnx {Function File} {} fplot (@dots{}, @var{fmt})
 ## Plot a function @var{fn}, within the defined limits.  @var{fn}
 ## an be either a string, a function handle or an inline function.
 ## The limits of the plot are given by @var{limits} of the form
 ## @code{[@var{xlo}, @var{xhi}]} or @code{[@var{xlo}, @var{xhi},
 ## @var{ylo}, @var{yhi}]}. @var{tol} is the default tolerance to use for the
 ## plot, and if @var{tol} is an integer it is assumed that it defines the 
-## number points to use in the plot. The @var{LineSpec} is passed to the plot
-## command.
+## number points to use in the plot.  The @var{fmt} argument is passed
+## to the plot command.
 ##
 ## @example
 ##    fplot ("cos", [0, 2*pi])
 ##    fplot ("[cos(x), sin(x)]", [0, 2*pi])
 ## @end example
 ## @seealso{plot}
 ## @end deftypefn
 
diff --git a/scripts/plot/gca.m b/scripts/plot/gca.m
--- a/scripts/plot/gca.m
+++ b/scripts/plot/gca.m
@@ -14,17 +14,31 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} gca ()
-## Return the current axis handle.
+## Return a handle to the current axis object.  If no axis object
+## exists, create one and return its handle.  The handle may then be
+## used to examine or set properties of the axes.  For example,
+##
+## @example
+## @group
+## ax = gca ();
+## set (ax, "position", [0.5, 0.5, 0.5, 0.5]);
+## @end group
+## @end example
+##
+## @noindent
+## creates an empty axes object, then changes its location and size in
+## the figure window.
+## @seealso{get, set}
 ## @end deftypefn
 
 ## Author: jwe
 
 function h = gca ()
 
   if (nargin == 0)
     h = get (gcf (), "currentaxes");
diff --git a/scripts/plot/gcf.m b/scripts/plot/gcf.m
--- a/scripts/plot/gcf.m
+++ b/scripts/plot/gcf.m
@@ -14,17 +14,33 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} gcf ()
-## Return the current figure handle.
+## Return the current figure handle.  If a figure does not exist, create
+## one and return its handle.  The handle may then be used to examine or
+## set properties of the figure.  For example,
+##
+## @example
+## @group
+## fplot (@@sin, [-10, 10]);
+## fig = gcf ();
+## set (fig, "visible", "off");
+## @end group
+## @end example
+##
+## @noindent
+## plots a sine wave, finds the handle of the current figure, and then
+## makes that figure invisible.  Setting the visible property of the
+## figure to @code{"on"} will cause it to be displayed again.
+## @seealso{get, set}
 ## @end deftypefn
 
 ## Author: jwe, Bill Denney
 
 function h = gcf ()
 
   if (nargin == 0)
     h = get (0, "currentfigure");
diff --git a/scripts/plot/grid.m b/scripts/plot/grid.m
--- a/scripts/plot/grid.m
+++ b/scripts/plot/grid.m
@@ -19,22 +19,21 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} grid (@var{arg})
 ## @deftypefnx {Function File} {} grid ("minor", @var{arg2})
 ## Force the display of a grid on the plot.
 ## The argument may be either @code{"on"} or @code{"off"}.  If it is
 ## omitted, the current grid state is toggled.
 ##
-## If @var{arg} is @code{"minor"} then the minor grid is toggled. When
+## If @var{arg} is @code{"minor"} then the minor grid is toggled.  When
 ## using a minor grid a second argument @var{arg2} is allowed, which can
 ## be either @code{"on"} or @code{"off"} to explicitly set the state of
 ## the minor grid.
-## @seealso{plot, semilogx, semilogy, loglog, polar, mesh, contour,
-## bar, stairs, xlabel, ylabel, title}
+## @seealso{plot}
 ## @end deftypefn
 
 ## Author: jwe
 
 ## PKG_ADD: mark_as_command grid
 
 function grid (x, y)
 
diff --git a/scripts/plot/isfigure.m b/scripts/plot/isfigure.m
--- a/scripts/plot/isfigure.m
+++ b/scripts/plot/isfigure.m
@@ -14,18 +14,18 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} isfigure (@var{h})
-## Return 1 if @var{h} is a graphics handle that contains a figure
-## object and 0 otherwise.
+## Return true if @var{h} is a graphics handle that contains a figure
+## object and false otherwise.
 ## @end deftypefn
 
 ## Author: jwe
 
 function retval = isfigure (h)
 
   if (nargin == 1)
     retval = (ishandle (h) && strcmp (get (h, "type"), "figure"));
diff --git a/scripts/plot/ishold.m b/scripts/plot/ishold.m
--- a/scripts/plot/ishold.m
+++ b/scripts/plot/ishold.m
@@ -14,18 +14,18 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} ishold
-## Return 1 if the next line will be added to the current plot, or 0 if
-## the plot device will be cleared before drawing the next line.
+## Return true if the next line will be added to the current plot, or
+## false if the plot device will be cleared before drawing the next line.
 ## @end deftypefn
 
 function retval = ishold ()
 
   if (nargin == 0)
     retval = strcmp (get (gca (), "nextplot"), "add");
   else
     print_usage ();
diff --git a/scripts/plot/legend.m b/scripts/plot/legend.m
--- a/scripts/plot/legend.m
+++ b/scripts/plot/legend.m
@@ -22,23 +22,24 @@
 ## @deftypefn {Function File} {} legend (@var{st1}, @var{st2}, @dots{})
 ## @deftypefnx {Function File} {} legend (@var{st1}, @var{st2}, @dots{}, @var{pos})
 ## @deftypefnx {Function File} {} legend (@var{matstr})
 ## @deftypefnx {Function File} {} legend (@var{matstr}, @var{pos})
 ## @deftypefnx {Function File} {} legend (@var{cell})
 ## @deftypefnx {Function File} {} legend (@var{cell}, @var{pos})
 ## @deftypefnx {Function File} {} legend ('@var{func}')
 ##
-## Legend puts a legend on the current plot using the specified strings
-## as labels. Use independant strings (@var{st1}, @var{st2}, @dots{}), a
-## matrix of strings (@var{matstr}), or a cell array of strings (@var{cell}) to
-## specify legends. Legend works on line graphs, bar graphs, etc.
-## Be sure to call plot before calling legend.
+## Display a legend for the current axes using the specified strings
+## as labels.  Legend entries may be specified as individual character
+## string arguments, a character array, or a cell array of character
+## strings.  Legend works on line graphs, bar graphs, etc.  A plot must
+## exist before legend is called.
 ##
-## @var{pos} optionally  places the legend in the specified location:
+## The optional parameter @var{pos} specifies the location of the legend
+## as follows:
 ##
 ## @multitable @columnfractions 0.1 0.1 0.8
 ## @item @tab -1 @tab
 ##   To the top right of the plot
 ## @item @tab 0 @tab
 ##   Don't move the legend box (default)
 ## @item @tab 1 @tab
 ##   Upper right-hand corner
@@ -48,28 +49,28 @@
 ##   Lower left-hand corner
 ## @item @tab 4 @tab
 ##   Lower right-hand corner
 ## @end multitable
 ##
 ## Some specific functions are directely avaliable using @var{func}:
 ##
 ## @table @code
-## @item show
+## @item "show"
 ##   Show legends from the plot
-## @item hide
+## @item "hide"
 ## @itemx off
 ##   Hide legends from the plot
-## @item boxon
+## @item "boxon"
 ##   Draw a box around legends
-## @item boxoff
+## @item "boxoff"
 ##   Withdraw the box around legends
-## @item left
+## @item "left"
 ##   Text is to the left of the keys
-## @item right
+## @item "right"
 ##   Text is to the right of the keys
 ## @end table
 ## @end deftypefn
 
 ## PKG_ADD mark_as_command legend
 
 function legend (varargin)
 
diff --git a/scripts/plot/line.m b/scripts/plot/line.m
--- a/scripts/plot/line.m
+++ b/scripts/plot/line.m
@@ -16,19 +16,23 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} line ()
 ## @deftypefnx {Function File} {} line (@var{x}, @var{y})
 ## @deftypefnx {Function File} {} line (@var{x}, @var{y}, @var{z})
-## @deftypefnx {Function File} {} line (@var{x}, @var{y}, @var{z}, @var{opts})
+## @deftypefnx {Function File} {} line (@var{x}, @var{y}, @var{z}, @var{property}, @var{value}, @dots{})
 ## Create line object from @var{x} and @var{y} and insert in current
-## axes object.  Return handle to line object.
+## axes object.  Return a handle (or vector of handles) to the line
+## objects created.
+##
+## Multiple property-value pairs may be specified for the line, but they
+## must appear in pairs.
 ## @end deftypefn
 
 ## Author: jwe
 
 function h = line (varargin)
 
   ## make a default line object, and make it the current axes for
   ## the current figure.
diff --git a/scripts/plot/loglog.m b/scripts/plot/loglog.m
--- a/scripts/plot/loglog.m
+++ b/scripts/plot/loglog.m
@@ -14,21 +14,20 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} loglog (@var{args})
-## Make a two-dimensional plot using log scales for both axes.  See the
-## description of @code{plot} for a description of the arguments that
-## @code{loglog} will accept.
-## @seealso{plot, semilogy, loglog, polar, mesh, contour, bar, stairs,
-## xlabel, ylabel, title}
+## Produce a two-dimensional plot using log scales for both axes.  See
+## the description of @code{plot} for a description of the arguments
+## that @code{loglog} will accept.
+## @seealso{plot, semilogx, semilogy}
 ## @end deftypefn
 
 ## Author: jwe
 
 function retval = loglog (varargin)
 
   newplot ();
 
diff --git a/scripts/plot/loglogerr.m b/scripts/plot/loglogerr.m
--- a/scripts/plot/loglogerr.m
+++ b/scripts/plot/loglogerr.m
@@ -14,31 +14,30 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} loglogerr (@var{args})
-## This function produces two-dimensional plots on double logarithm axis 
-## with errorbars. Many different combinations of arguments are possible.  
+## Produce two-dimensional plots on double logarithm axis with
+## errorbars.  Many different combinations of arguments are possible.
 ## The most used form is
 ##
 ## @example
 ## loglogerr (@var{x}, @var{y}, @var{ey}, @var{fmt})
 ## @end example
 ##
 ## @noindent
 ## which produces a double logarithm plot of @var{y} versus @var{x} 
 ## with errors in the @var{y}-scale defined by @var{ey} and the plot
 ## format defined by @var{fmt}. See errorbar for available formats and 
 ## additional information.
-## @seealso{errorbar, semilogxerr, semilogyerr, polar, mesh, contour, 
-## __pltopt__, bar, stairs, xlabel, ylabel, title}
+## @seealso{errorbar, semilogxerr, semilogyerr}
 ## @end deftypefn
 
 ## Created: 20.2.2001
 ## Author: Teemu Ikonen <tpikonen@pcu.helsinki.fi>
 ## Keywords: errorbar, plotting
 
 function retval = loglogerr (varargin)
 
diff --git a/scripts/plot/ndgrid.m b/scripts/plot/ndgrid.m
--- a/scripts/plot/ndgrid.m
+++ b/scripts/plot/ndgrid.m
@@ -15,20 +15,21 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{y1}, @var{y2}, @dots{},  @var{y}n] =} ndgrid (@var{x1}, @var{x2}, @dots{}, @var{x}n)
 ## @deftypefnx {Function File} {[@var{y1}, @var{y2}, @dots{},  @var{y}n] =} ndgrid (@var{x})
-## Given n vectors @var{x1}, @dots{} @var{x}n, ndgrid returns n arrays of dimension n. 
-## The elements of the ith output argument contains the elements of the vector 
-## @var{x}i repeated over all dimensions different from the ith dimension.
-## Calling ndgrid with only one input argument @var{x} is equivalent of calling ndgrid with 
+## Given n vectors @var{x1}, @dots{} @var{x}n, @code{ndgrid} returns
+## n arrays of dimension n.  The elements of the ith output argument
+## contains the elements of the vector @var{x}i repeated over all
+## dimensions different from the ith dimension.  Calling ndgrid with
+## only one input argument @var{x} is equivalent of calling ndgrid with
 ## all n input arguments equal to @var{x}:
 ##
 ## [@var{y1}, @var{y2}, @dots{},  @var{y}n] = ndgrid (@var{x}, @dots{}, @var{x})
 ## @seealso{meshgrid}
 ## @end deftypefn
 
 ## Author: Alexander Barth <abarth@marine.usf.edu>
 
diff --git a/scripts/plot/newplot.m b/scripts/plot/newplot.m
--- a/scripts/plot/newplot.m
+++ b/scripts/plot/newplot.m
@@ -14,16 +14,18 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} newplot ()
+## Prepare graphics engine to produce a new plot.  This function should
+## be called at the beginning of all high-level plotting functions.
 ## @end deftypefn
 
 function newplot ()
 
   if (nargin == 0)
     __next_line_color__ (true);
     cf = gcf ();
     fnp = get (cf, "nextplot");
diff --git a/scripts/plot/orient.m b/scripts/plot/orient.m
--- a/scripts/plot/orient.m
+++ b/scripts/plot/orient.m
@@ -14,19 +14,19 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} orient (@var{orientation})
-## Set default print orientation.  Valid values for @var{orientation}
-## include @code{"landscape"} and @code{"portrait"}.  If called with no
-## arguments, return the default print orientation.
+## Set the default print orientation.  Valid values for
+## @var{orientation} include @code{"landscape"} and @code{"portrait"}.
+## If called with no arguments, return the default print orientation.
 ## @end deftypefn
 
 ## Author: Paul Kienzle
 ## Adapted-By: jwe
 
 ## PKG_ADD: mark_as_command orient
 
 function retval = orient (varargin)
diff --git a/scripts/plot/patch.m b/scripts/plot/patch.m
--- a/scripts/plot/patch.m
+++ b/scripts/plot/patch.m
@@ -16,20 +16,22 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} patch ()
 ## @deftypefnx {Function File} {} patch (@var{x}, @var{y}, @var{c})
 ## @deftypefnx {Function File} {} patch (@var{x}, @var{y}, @var{c}, @var{opts})
-## Create patch object from @var{x} and @var{y} with color @var{c} and insert in current
-## axes object.  Return handle to patch object.
-## For an uniform colored patch, @var{c} can be given as [r, g, b]-vector, scalar value refering
-## to the current colormap, or string value (e.g. "r" or "red").
+## Create patch object from @var{x} and @var{y} with color @var{c} and
+## insert in the current axes object.  Return handle to patch object.
+##
+## For a uniform colored patch, @var{c} can be given as an RGB vector,
+## scalar value referring to the current colormap, or string value (for
+## example, "r" or "red"). 
 ## @end deftypefn
 
 ## Author: jwe
 
 function h = patch (varargin)
 
   ## make a default patch object, and make it the current axes for
   ## the current figure.
diff --git a/scripts/plot/peaks.m b/scripts/plot/peaks.m
--- a/scripts/plot/peaks.m
+++ b/scripts/plot/peaks.m
@@ -45,18 +45,19 @@
 ## the range @code{[-3,3]}. The default value for @var{n} is 49.
 ##
 ## If @var{n} is a vector, then it represents the @var{x} and @var{y} values
 ## of the grid on which to calculate the above function. The @var{x} and 
 ## @var{y} values can be specified separately.
 ## @seealso{mesh}
 ## @end deftypefn
 
-## Expression for peaks function was taken from the following paper:
-##   http://www.control.hut.fi/Kurssit/AS-74.115/Material/GENALGgoga.pdf
+## Expression for the peaks function was taken from the following paper:
+## http://www.control.hut.fi/Kurssit/AS-74.115/Material/GENALGgoga.pdf
+
 function [X_out, Y_out, Z_out] = peaks (x, y)
 
   if nargin == 0
     x = y = linspace(-3,3,49);
   elseif nargin == 1
     if length(x) > 1
       y = x;
     else
diff --git a/scripts/plot/plot.m b/scripts/plot/plot.m
--- a/scripts/plot/plot.m
+++ b/scripts/plot/plot.m
@@ -13,49 +13,59 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} plot (@var{args})
-## This function produces two-dimensional plots.  Many different
-## combinations of arguments are possible.  The simplest form is
+## @deftypefn {Function File} {} plot (@var{y})
+## @deftypefnx {Function File} {} plot (@var{x}, @var{y})
+## @deftypefnx {Function File} {} plot (@var{x}, @var{y}, @var{property}, @var{value}, @dots{})
+## @deftypefnx {Function File} {} plot (@var{x}, @var{y}, @var{fmt})
+## @deftypefnx {Function File} {} plot (@var{h}, @dots{})
+## Produces two-dimensional plots.  Many different combinations of
+## arguments are possible.  The simplest form is
 ##
 ## @example
 ## plot (@var{y})
 ## @end example
 ##
 ## @noindent
 ## where the argument is taken as the set of @var{y} coordinates and the
 ## @var{x} coordinates are taken to be the indices of the elements,
 ## starting with 1.
 ##
 ## To save a plot, in one of several image formats such as PostScript
 ## or PNG, use the @code{print} command.
 ##
 ## If more than one argument is given, they are interpreted as
 ##
 ## @example
-## plot (@var{x}, @var{y}, @var{fmt}, @dots{})
+## plot (@var{y}, @var{property}, @var{value}, @dots{})
 ## @end example
 ##
 ## @noindent
-## or as
+## or
 ##
 ## @example
 ## plot (@var{x}, @var{y}, @var{property}, @var{value}, @dots{})
 ## @end example
 ##
 ## @noindent
-## where @var{y}, @var{fmt}, @var{property} and @var{value} are optional,
-## and any number of argument sets may appear.  The @var{x} and @var{y} 
-## values are interpreted as follows:
+## or
+##
+## @example
+## plot (@var{x}, @var{y}, @var{fmt}, @dots{})
+## @end example
+##
+## @noindent
+## and so on.  Any number of argument sets may appear.  The @var{x} and
+## @var{y} values are interpreted as follows:
 ##
 ## @itemize @bullet
 ## @item
 ## If a single data argument is supplied, it is taken as the set of @var{y}
 ## coordinates and the @var{x} coordinates are taken to be the indices of
 ## the elements, starting with 1.
 ##
 ## @item
@@ -76,16 +86,20 @@
 ## If both arguments are matrices, the columns of @var{y} are plotted
 ## versus the columns of @var{x}.  In this case, both matrices must have
 ## the same number of rows and columns and no attempt is made to transpose
 ## the arguments to make the number of rows match.
 ##
 ## If both arguments are scalars, a single point is plotted.
 ## @end itemize
 ##
+## Multiple property-value pairs may be specified, but they must appear
+## in pairs.  These arguments are applied to the lines drawn by
+## @code{plot}.
+##
 ## If the @var{fmt} argument is supplied, it is interpreted as
 ## follows.  If @var{fmt} is missing, the default gnuplot line style
 ## is assumed.
 ##
 ## @table @samp
 ## @item -
 ## Set lines plot style (default).
 ##
@@ -118,38 +132,22 @@
 ## @item +
 ## @itemx *
 ## @itemx o
 ## @itemx x
 ## Used in combination with the points or linespoints styles, set the point
 ## style.
 ## @end table
 ##
-## The color line styles have the following meanings on terminals that
-## support color.
-##
-## @example
-## Number  Gnuplot colors  (lines)points style
-##   1       red                   *
-##   2       green                 +
-##   3       blue                  o
-##   4       magenta               x
-##   5       cyan                house
-##   6       brown            there exists
-## @end example
-##
-## The @var{fmt} argument can also be used to assign key titles.
+## The @var{fmt} argument may also be used to assign key titles.
 ## To do so, include the desired title between semi-colons after the
 ## formatting sequence described above, e.g. "+3;Key Title;"
 ## Note that the last semi-colon is required and will generate an error if
 ## it is left out.
 ##
-## If a @var{property} is given it must be followed by @var{value}.  The
-## property value pairs are applied to the lines drawn by @code{plot}.
-##
 ## Here are some plot examples:
 ##
 ## @example
 ## plot (x, y, "@@12", x, y2, x, y3, "4", x, y4, "+")
 ## @end example
 ##
 ## This command will plot @code{y} with points of type 2 (displayed as
 ## @samp{+}) and color 1 (red), @code{y2} with lines, @code{y3} with lines of
@@ -167,18 +165,18 @@
 ## plot (t, cos(t), "-;cos(t);", t, sin(t), "+3;sin(t);");
 ## @end example
 ##
 ## This will plot the cosine and sine functions and label them accordingly
 ## in the key.
 ##
 ## If the first argument is an axis handle, then plot into these axes, 
 ## rather than the current axis handle returned by @code{gca}. 
-## @seealso{semilogx, semilogy, loglog, polar, mesh, contour, __pltopt__
-## bar, stairs, errorbar, xlabel, ylabel, title, print}
+## @seealso{semilogx, semilogy, loglog, polar, mesh, contour, bar,
+## stairs, errorbar, xlabel, ylabel, title, print}
 ## @end deftypefn
 
 ## Author: jwe
 
 function retval = plot (varargin)
 
   if (isscalar (varargin{1}) && ishandle (varargin{1}))
     h = varargin {1};
diff --git a/scripts/plot/plot3.m b/scripts/plot/plot3.m
--- a/scripts/plot/plot3.m
+++ b/scripts/plot/plot3.m
@@ -14,85 +14,78 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} plot3 (@var{args})
-##
-## This function produces three-dimensional plots.  Many different
-## combinations of arguments are possible.  The simplest form is
+## Produce three-dimensional plots.  Many different combinations of
+## arguments are possible.  The simplest form is
 ##
 ## @example
 ## plot3 (@var{x}, @var{y}, @var{z})
 ## @end example
 ##
 ## @noindent
-## where the arguments are taken to be the vertices of the points to be
-## plotted in three dimensions. If all arguments are vectors of the same
-## length, then a single continuous line is drawn. If all arguments are
-## matrices, then each column of the matrices is treated as a seperate
-## line. No attempt is made to transpose the arguments to make the
-## number of rows match.
+## in which the arguments are taken to be the vertices of the points to
+## be plotted in three dimensions. If all arguments are vectors of the
+## same length, then a single continuous line is drawn. If all arguments
+## are matrices, then each column of the matrices is treated as a
+## seperate line.  No attempt is made to transpose the arguments to make
+## the number of rows match.
 ##
-## Additionally, only two arguments can be given as
+## If only two arguments are given, as
 ##
 ## @example
 ## plot3 (@var{x}, @var{c})
 ## @end example
 ##
-## where the real and imaginary parts of the second argument are used as
-## the @var{y} and @var{z} coordinates, respectively.
+## @noindent
+## the real and imaginary parts of the second argument are used
+## as the @var{y} and @var{z} coordinates, respectively.
 ##
 ## If only one argument is given, as
 ##
 ## @example
 ## plot3 (@var{c})
 ## @end example
 ##
+## @noindent
 ## the real and imaginary parts of the argument are used as the @var{y}
 ## and @var{z} values, and they are plotted versus their index.
 ##
-## To save a plot, in one of several image formats such as PostScript
-## or PNG, use the @code{print} command.
-##
-## See @code{__pltopt__} for a description of the optional format
-## argument.
-##
-## Arguments can also be given in groups of three as
+## Arguments may also be given in groups of three as
 ##
 ## @example
 ## plot3 (@var{x1}, @var{y1}, @var{z1}, @var{x2}, @var{y2}, @var{z2}, @dots{})
 ## @end example
 ## 
 ## @noindent
-## where each set of three arguments is treated as a seperate line or
+## in which each set of three arguments is treated as a seperate line or
 ## set of lines in three dimensions.
 ##
-## To plot multiple one- or two-argument groups, separate each group with an
-## empty format string, as
+## To plot multiple one- or two-argument groups, separate each group
+## with an empty format string, as
 ##
 ## @example
-## plot3 (@var{x1}, @var{c1}, '', @var{c2}, '', @dots{})
+## plot3 (@var{x1}, @var{c1}, "", @var{c2}, "", @dots{})
 ## @end example
 ##
-## An example of the use of plot3 is
+## An example of the use of @code{plot3} is
 ##
 ## @example
 ## @group
 ##    z = [0:0.05:5];
-##    plot3(cos(2*pi*z), sin(2*pi*z), z, ";helix;");
-##    plot3(z, exp(2i*pi*z), ";complex sinusoid;");
+##    plot3 (cos(2*pi*z), sin(2*pi*z), z, ";helix;");
+##    plot3 (z, exp(2i*pi*z), ";complex sinusoid;");
 ## @end group
 ## @end example
-##
-## @seealso{plot, semilogx, semilogy, loglog, polar, mesh, contour, __pltopt__
-## bar, stairs, errorbar, xlabel, ylabel, title, print}
+## @seealso{plot}
 ## @end deftypefn
 
 ## Author: Paul Kienzle
 ##         (modified from __plt__.m)
 
 function retval = plot3 (varargin)
 
   newplot ();
diff --git a/scripts/plot/polar.m b/scripts/plot/polar.m
--- a/scripts/plot/polar.m
+++ b/scripts/plot/polar.m
@@ -18,18 +18,17 @@
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} polar (@var{theta}, @var{rho}, @var{fmt})
 ## Make a two-dimensional plot given polar the coordinates @var{theta} and
 ## @var{rho}.
 ##
 ## The optional third argument specifies the line type.
-## @seealso{plot, semilogx, semilogy, loglog, mesh, contour, bar,
-## stairs, xlabel, ylabel, title}
+## @seealso{plot}
 ## @end deftypefn
 
 ## Author: jwe
 
 function retval = polar (varargin)
 
   newplot ();
 
diff --git a/scripts/plot/print.m b/scripts/plot/print.m
--- a/scripts/plot/print.m
+++ b/scripts/plot/print.m
@@ -15,17 +15,16 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} print (@var{filename}, @var{options})
-##
 ## Print a graph, or save it to a file
 ##
 ## @var{filename} defines the file name of the output file. If no
 ## filename is specified, output is sent to the printer.
 ##
 ## @var{options}:
 ## @table @code
 ## @item -P@var{printer}
diff --git a/scripts/plot/semilogx.m b/scripts/plot/semilogx.m
--- a/scripts/plot/semilogx.m
+++ b/scripts/plot/semilogx.m
@@ -14,21 +14,20 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} semilogx (@var{args})
-## Make a two-dimensional plot using a log scale for the @var{x} axis.  See
-## the description of @code{plot} for a description of the arguments
-## that @code{semilogx} will accept.
-## @seealso{plot, semilogy, loglog, polar, mesh, contour, bar, stairs,
-## xlabel, ylabel, title}
+## Produce a two-dimensional plot using a log scale for the @var{x}
+## axis.  See the description of @code{plot} for a description of the
+## arguments that @code{semilogx} will accept.
+## @seealso{plot, semilogy, loglog}
 ## @end deftypefn
 
 ## Author: jwe
 
 function retval = semilogx (varargin)
 
   newplot ();
 
diff --git a/scripts/plot/semilogxerr.m b/scripts/plot/semilogxerr.m
--- a/scripts/plot/semilogxerr.m
+++ b/scripts/plot/semilogxerr.m
@@ -14,31 +14,30 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} semilogxerr (@var{args})
-## This function produces two-dimensional plots on a semilogarithm axis 
-## with errorbars. Many different combinations of arguments are possible.  
-## The most used form is
+## Produce two-dimensional plots on a semilogarithm axis with errorbars.
+## Many different combinations of arguments are possible.  The most used
+## form is
 ##
 ## @example
 ## semilogxerr (@var{x}, @var{y}, @var{ey}, @var{fmt})
 ## @end example
 ##
 ## @noindent
 ## which produces a semi-logarithm plot of @var{y} versus @var{x}
 ## with errors in the @var{y}-scale defined by @var{ey} and the plot
 ## format defined by @var{fmt}. See errorbar for available formats and 
 ## additional information.
-## @seealso{errorbar, loglogerr semilogyerr, polar, mesh, contour, __pltopt__, 
-## bar, stairs, xlabel, ylabel, title}
+## @seealso{errorbar, loglogerr semilogyerr}
 ## @end deftypefn
 
 ## Created: 20.2.2001
 ## Author: Teemu Ikonen <tpikonen@pcu.helsinki.fi>
 ## Keywords: errorbar, plotting
 
 function retval = semilogxerr (varargin)
 
diff --git a/scripts/plot/semilogy.m b/scripts/plot/semilogy.m
--- a/scripts/plot/semilogy.m
+++ b/scripts/plot/semilogy.m
@@ -14,21 +14,20 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} semilogy (@var{args})
-## Make a two-dimensional plot using a log scale for the @var{y} axis.  See
-## the description of @code{plot} for a description of the arguments
-## that @code{semilogy} will accept.
-## @seealso{plot, semilogx, loglog, polar, mesh, contour, bar, stairs,
-## xlabel, ylabel, title}
+## Produce a two-dimensional plot using a log scale for the @var{y}
+## axis.  See the description of @code{plot} for a description of the
+## arguments that @code{semilogy} will accept.
+## @seealso{plot, semilogx, loglog}
 ## @end deftypefn
 
 ## Author: jwe
 
 function retval = semilogy (varargin)
 
   newplot ();
 
diff --git a/scripts/plot/semilogyerr.m b/scripts/plot/semilogyerr.m
--- a/scripts/plot/semilogyerr.m
+++ b/scripts/plot/semilogyerr.m
@@ -14,31 +14,30 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} semilogyerr (@var{args})
-## This function produces two-dimensional plots on a semilogarithm axis 
-## with errorbars. Many different combinations of arguments are possible.  
-## The most used form is
+## Produce two-dimensional plots on a semilogarithm axis with errorbars.
+## Many different combinations of arguments are possible.  The most used
+## form is
 ##
 ## @example
 ## semilogyerr (@var{x}, @var{y}, @var{ey}, @var{fmt})
 ## @end example
 ##
 ## @noindent
 ## which produces a semi-logarithm plot of @var{y} versus @var{x}
 ## with errors in the @var{y}-scale defined by @var{ey} and the plot
-## format defined by @var{fmt}. See errorbar for available formats and 
+## format defined by @var{fmt}.  See errorbar for available formats and 
 ## additional information.
-## @seealso{errorbar, loglogerr semilogxerr, polar, mesh, contour, __pltopt__, 
-## bar, stairs,  xlabel, ylabel, title}
+## @seealso{errorbar, loglogerr semilogxerr}
 ## @end deftypefn
 
 ## Created: 20.2.2001
 ## Author: Teemu Ikonen <tpikonen@pcu.helsinki.fi>
 ## Keywords: errorbar, plotting
 
 function retval = semilogyerr (varargin)
 
diff --git a/scripts/plot/shg.m b/scripts/plot/shg.m
--- a/scripts/plot/shg.m
+++ b/scripts/plot/shg.m
@@ -14,21 +14,19 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} shg
-##
 ## Show the graph window.  Currently, this is the same as executing
 ## @code{drawnow}.
-## @seealso{plot, semilogx, semilogy, loglog, polar, mesh, contour,
-## bar, stairs, xlabel, ylabel}
+## @seealso{drawnow, figure}
 ## @end deftypefn
 
 ## Author: jwe
 
 function shg ()
 
   if (nargin != 0)
     warning ("shg: ignoring extra arguments");
diff --git a/scripts/plot/sombrero.m b/scripts/plot/sombrero.m
--- a/scripts/plot/sombrero.m
+++ b/scripts/plot/sombrero.m
@@ -14,21 +14,23 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} sombrero (@var{n})
-## Draw a `sombrero' in three dimensions using @var{n} grid lines.  The
-## function plotted is
+## Produce the familiar three-dimensional sombrero plot using @var{n}
+## grid lines.  If @var{n} is omitted, a value of 41 is assumed.
+##
+## The function plotted is
 ##
 ## @example
-##   z = sin (sqrt (x^2 + y^2)) / (sqrt (x^2 + y^2))
+## z = sin (sqrt (x^2 + y^2)) / (sqrt (x^2 + y^2))
 ## @end example
 ## @seealso{mesh, meshgrid}
 ## @end deftypefn
 
 ## Author: jwe
 
 function [x, y, z] = sombrero (n)
 
diff --git a/scripts/plot/stairs.m b/scripts/plot/stairs.m
--- a/scripts/plot/stairs.m
+++ b/scripts/plot/stairs.m
@@ -14,34 +14,36 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} stairs (@var{x}, @var{y})
-## Given two vectors of x-y data, bar produces a `stairstep' plot.
+## Produce a stairstep plot.  The arguments may be vectors or matrices.
 ##
 ## If only one argument is given, it is taken as a vector of y-values
 ## and the x coordinates are taken to be the indices of the elements.
 ##
 ## If two output arguments are specified, the data are generated but
 ## not plotted.  For example,
 ##
 ## @example
 ## stairs (x, y);
 ## @end example
 ##
 ## @noindent
 ## and
 ##
 ## @example
+## @group
 ## [xs, ys] = stairs (x, y);
 ## plot (xs, ys);
+## @end group
 ## @end example
 ##
 ## @noindent
 ## are equivalent.
 ## @seealso{plot, semilogx, semilogy, loglog, polar, mesh, contour,
 ## bar, xlabel, ylabel, title}
 ## @end deftypefn
 
diff --git a/scripts/plot/stem.m b/scripts/plot/stem.m
--- a/scripts/plot/stem.m
+++ b/scripts/plot/stem.m
@@ -16,17 +16,17 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{h} =} stem (@var{x}, @var{y}, @var{linespec})
 ## Plot a stem graph and return the handles of the line and marker
 ## objects used to draw the stems.  The default color is @code{"r"}
-## (red). The default line style is @code{"-"} and the default marker is
+## (red).  The default line style is @code{"-"} and the default marker is
 ## @code{"o"}.
 ##
 ## For example,
 ## @example
 ## x = 1:10;
 ## stem (x);
 ## @end example
 ## @noindent
@@ -82,17 +82,16 @@
 ## @noindent
 ## plots 10 stems with heights from 2 to 20
 ## (the color is rgb-triple defined, the line style is @code{"-"},
 ## the marker style is @code{"o"}, and @var{h} is a 2-by-10 array of
 ## handles in which the first row holds the line handles and the second
 ## row holds the marker handles).
 ##
 ## Color definitions with rgb-triples are not valid!
-##
 ## @seealso{bar, barh, plot}
 ## @end deftypefn
 
 ## Author: Michel D. Schmid <michaelschmid@users.sourceforge.net>
 ## Adapted-by: jwe
 
 function h = stem (varargin)
 
diff --git a/scripts/plot/text.m b/scripts/plot/text.m
--- a/scripts/plot/text.m
+++ b/scripts/plot/text.m
@@ -15,19 +15,21 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{h} =} text (@var{x}, @var{y}, @var{label})
 ## @deftypefnx {Function File} {@var{h} =} text (@var{x}, @var{y}, @var{z}, @var{label})
+## @deftypefnx {Function File} {@var{h} =} text (@var{x}, @var{y}, @var{label}, @var{p1}, @var{v1}, @dots{})
+## @deftypefnx {Function File} {@var{h} =} text (@var{x}, @var{y}, @var{z}, @var{label}, @var{p1}, @var{v1}, @dots{})
 ## Create a text object with text @var{label} at position @var{x},
-## @var{y}, @var{z} on the current axes.  The label may be followed by
-## property-value pairs.
+## @var{y}, @var{z} on the current axes.  Property-value pairs following
+## @var{label} may be used to specify the appearance of the text.
 ## @end deftypefn
 
 ## Author: jwe
 
 function h = text (varargin)
 
   nargs = nargin;
   offset = 0;
diff --git a/scripts/plot/xlabel.m b/scripts/plot/xlabel.m
--- a/scripts/plot/xlabel.m
+++ b/scripts/plot/xlabel.m
@@ -16,17 +16,17 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} xlabel (@var{string})
 ## @deftypefnx {Function File} {} ylabel (@var{string})
 ## @deftypefnx {Function File} {} zlabel (@var{string})
-## Specify x, y, and z axis labels for the plot.
+## Specify x, y, and z axis labels for the current figure.
 ## @seealso{plot, semilogx, semilogy, loglog, polar, mesh, contour,
 ## bar, stairs,  ylabel, title}
 ## @end deftypefn
 
 ## Author: jwe
 
 function h = xlabel (varargin)
 
