# HG changeset patch
# User dbateman
# Date 1181783906 0
#      Thu Jun 14 01:18:26 2007 +0000
# Node ID fa2f5d4e55db1ed92ca34549f7c4dc503f1006bb
# Parent  30e1320bb0eec831413eec706c225deb06913d58
[project @ 2007-06-14 01:18:25 by dbateman]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2007-06-14  David Bateman  <dbateman@free.fr>
+
+	* ov-ch-mat.h (idx_vector index_vector (void) const): Remove
+	definition.
+	* ov-ch-mat.cc (idx_vector index_vector (void) const): Move it
+	here. Special case ":" case for compatibility.
+
 2007-06-13  John W. Eaton  <jwe@octave.org>
 
 	* ov-re-mat.cc (octave_matrix::load_ascii):
 	Do a better job of handling read errors and empty matrices.
 	* ov-cx-mat.cc (octave_complex_matrix::load_ascii): Likewise.
 	* ov-bool-mat.cc (octave_bool_matrix::load_ascii): Likewise.
 	* ov-str-mat.cc (octave_char_matrix_str::load_ascii): Likewise.
 
diff --git a/src/ov-ch-mat.cc b/src/ov-ch-mat.cc
--- a/src/ov-ch-mat.cc
+++ b/src/ov-ch-mat.cc
@@ -39,16 +39,26 @@ 02110-1301, USA.
 
 template class octave_base_matrix<charNDArray>;
 
 DEFINE_OCTAVE_ALLOCATOR (octave_char_matrix);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_char_matrix,
 				     "char matrix", "int8");
 
+idx_vector 
+octave_char_matrix::index_vector (void) const
+{ 
+  const char *p = matrix.data ();
+  if (numel () == 1 && *p == ':')
+    return idx_vector (':');
+  else
+    return idx_vector (array_value (true)); 
+}
+
 bool
 octave_char_matrix::valid_as_scalar_index (void) const
 {
   bool retval = false;
   error ("octave_char_matrix::valid_as_scalar_index(): not implemented");
   return retval;
 }
 
diff --git a/src/ov-ch-mat.h b/src/ov-ch-mat.h
--- a/src/ov-ch-mat.h
+++ b/src/ov-ch-mat.h
@@ -75,18 +75,17 @@ public:
   octave_char_matrix (const octave_char_matrix& chm)
     : octave_base_matrix<charNDArray> (chm) { }
 
   ~octave_char_matrix (void) { }
 
   octave_base_value *clone (void) const { return new octave_char_matrix (*this); }
   octave_base_value *empty_clone (void) const { return new octave_char_matrix (); }
 
-  idx_vector index_vector (void) const
-    { return idx_vector (array_value (true)); }
+  idx_vector index_vector (void) const;
 
   bool is_char_matrix (void) const { return true; }
   bool is_real_matrix (void) const { return true; }
 
   bool is_real_type (void) const { return true; }
 
   bool valid_as_scalar_index (void) const;
 
