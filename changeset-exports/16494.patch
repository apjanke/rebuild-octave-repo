# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1365659498 14400
#      Thu Apr 11 01:51:38 2013 -0400
# Node ID 3a2daa39c682bf8f18a3397c79144e67e1f4c86e
# Parent  91c32a702284254b9758816ac8e3ad7a41b453fa
# Parent  f441dc7d1afd0bfcfecdd1258172dad1e22fbf59
maint: periodic merge of stable to default

diff --git a/libinterp/parse-tree/pt-cbinop.cc b/libinterp/parse-tree/pt-cbinop.cc
--- a/libinterp/parse-tree/pt-cbinop.cc
+++ b/libinterp/parse-tree/pt-cbinop.cc
@@ -185,39 +185,8 @@ maybe_compound_binary_expression (tree_e
     }
 
   tree_binary_expression *ret = (ct == octave_value::unknown_compound_binary_op)
     ? new tree_binary_expression (a, b, l, c, t)
     : new tree_compound_binary_expression (a, b, l, c, t, ca, cb, ct);
 
   return ret;
 }
-
-octave_value
-tree_compound_binary_expression::rvalue1 (int)
-{
-  octave_value retval;
-
-  if (error_state)
-    return retval;
-
-  if (op_lhs)
-    {
-      octave_value a = op_lhs->rvalue1 ();
-
-      if (! error_state && a.is_defined () && op_rhs)
-        {
-          octave_value b = op_rhs->rvalue1 ();
-
-          if (! error_state && b.is_defined ())
-            {
-              retval = ::do_binary_op (etype, a, b);
-
-              if (error_state)
-                retval = octave_value ();
-            }
-        }
-    }
-
-  return retval;
-}
-
-
diff --git a/libinterp/parse-tree/pt-cbinop.h b/libinterp/parse-tree/pt-cbinop.h
--- a/libinterp/parse-tree/pt-cbinop.h
+++ b/libinterp/parse-tree/pt-cbinop.h
@@ -45,18 +45,16 @@ public:
   tree_compound_binary_expression (tree_expression *a, tree_expression *b,
                                    int l, int c,
                                    octave_value::binary_op t,
                                    tree_expression *ca, tree_expression *cb,
                                    octave_value::compound_binary_op ct)
     : tree_binary_expression (a, b, l, c, t), op_lhs (ca), op_rhs (cb),
       etype (ct) { }
 
-  octave_value rvalue1 (int nargout = 1);
-
   octave_value::compound_binary_op cop_type (void) const { return etype; }
 
 private:
 
   tree_expression *op_lhs;
   tree_expression *op_rhs;
   octave_value::compound_binary_op etype;
 
