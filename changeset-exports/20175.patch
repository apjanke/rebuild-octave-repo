# HG changeset patch
# User Rik <rik@octave.org>
# Date 1431318959 25200
#      Sun May 10 21:35:59 2015 -0700
# Branch stable
# Node ID 014edaafa3ad8cde97c5e396cc21f776b0677b71
# Parent  d9341b42248833e7efb3d3b99704cf7f5cb462c9
doc: Rewrite guidelines for crafting docstrings.

* tips.txi: Rewrite guidelines for crafting docstrings.

diff --git a/doc/interpreter/tips.txi b/doc/interpreter/tips.txi
--- a/doc/interpreter/tips.txi
+++ b/doc/interpreter/tips.txi
@@ -237,22 +237,27 @@ Octave.  Here are some tips for the writ
 Every command, function, or variable intended for users to know about
 should have a documentation string.
 
 @item
 An internal variable or subroutine of an Octave program might as well have
 a documentation string.
 
 @item
-The first line of the documentation string should consist of one or two
-complete sentences that stand on their own as a summary.
+The first line of the documentation string should consist of a summary of
+the function.
+
+Subsequent lines may expand the general nature of the function.
 
-The documentation string can have additional lines that expand on the
-details of how to use the function or variable.  The additional lines
-should also be made up of complete sentences.
+After the introduction there should be paragraphs describing the meaning
+and usage of each input, followed by the meaning and usage of each output.
+
+Finally, there may be more general information such as notes about the
+algorithm used, references to scientific papers, notes about any
+incompatibilities with @sc{matlab}, etc.
 
 @item
 For consistency, phrase the verb in the first sentence of a
 documentation string as an infinitive with ``to'' omitted.  For
 instance, use ``Return the frob of A and B.'' in preference to ``Returns
 the frob of A and B@.''  Usually it looks good to do likewise for the
 rest of the first paragraph.  Subsequent paragraphs usually look better
 if they have proper subjects.
