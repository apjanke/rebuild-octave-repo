# HG changeset patch
# User Rik <rik@octave.org>
# Date 1372129591 25200
#      Mon Jun 24 20:06:31 2013 -0700
# Node ID 035b5fe157ad1d136f46004db9cdf0d18f7681f6
# Parent  2ce1ddead134a67f8fcf930cd59055930d1fbb17
Add new dblist command to debugger (bug #38953)

* NEWS: Add dblist to list of new functions for 3.8.

* doc/interpreter/debug.txi: Add dblist to manual.

* libinterp/interpfcn/debug.cc(Fdblist): New function
to print lines of code surrounding current execution line.

* libinterp/interpfcn/debug.cc(Fdbwhere, Fdbtype): Add @seealso
links to new dblist function.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -171,21 +171,21 @@ Summary of important user-visible change
     are now available (provided that Octave is compiled with support for
     Java enabled):
 
       helpdlg    listdlg   questdlg
       inputdlg   msgbox    warndlg
 
  ** Other new functions added in 3.8.0:
 
-      betaincinv   ellipj    findfigs     lines          strjoin
-      cmpermute    ellipke   fminsearch   polyeig        tetramesh
-      cmunique     erfcinv   gallery      rgbplot        waterfall
-      colorcube    erfi      importdata   shrinkfaces
-      dawson       expint    iscolormap   splinefit  
+      betaincinv   dblist    expint       iscolormap    splinefit
+      cmpermute    ellipj    findfigs     lines         strjoin
+      cmunique     ellipke   fminsearch   polyeig       tetramesh
+      colorcube    erfcinv   gallery      rgbplot       waterfall
+      dawson       erfi      importdata   shrinkfaces
 
  ** Deprecated functions.
 
     The following functions were deprecated in Octave 3.4 and have been
     removed from Octave 3.8.
                                            
       autocor    dispatch              is_global    setstr
       autocov    fstat                 krylovb      strerror
diff --git a/doc/interpreter/debug.txi b/doc/interpreter/debug.txi
--- a/doc/interpreter/debug.txi
+++ b/doc/interpreter/debug.txi
@@ -153,25 +153,27 @@ use of the @code{keyboard} function.
 @noindent
 The @code{keyboard} function is typically placed in a script at the
 point where the user desires that the execution be stopped.  It
 automatically sets the running script into the debug mode.
 
 @node Debug Mode
 @section Debug Mode
 
-There are two additional support functions that allow the user to
+There are three additional support functions that allow the user to
 interrogate where in the execution of a script Octave entered the debug
 mode and to print the code in the script surrounding the point where
 Octave entered debug mode.
 
 @DOCSTRING(dbwhere)
 
 @DOCSTRING(dbtype)
 
+@DOCSTRING(dblist)
+
 You may also use @code{isdebugmode} to determine whether the debugger is
 currently active.
 
 @DOCSTRING(isdebugmode)
 
 Debug mode also allows single line stepping through a function using
 the command @code{dbstep}.
 
diff --git a/libinterp/interpfcn/debug.cc b/libinterp/interpfcn/debug.cc
--- a/libinterp/interpfcn/debug.cc
+++ b/libinterp/interpfcn/debug.cc
@@ -1031,16 +1031,90 @@ numbers.\n\
         default:
           error ("dbtype: expecting zero, one, or two arguments\n");
         }
     }
 
   return retval;
 }
 
+DEFUN (dblist, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn  {Command} {} dblist\n\
+@deftypefnx {Command} {} dblist var{n}\n\
+In debugging mode, list @var{n} lines of the function being debugged\n\
+centered around the the current line to be executed.  If unspecified @var{n}\n\
+defaults to 10 (+/- 5 lines)\n\
+@seealso{dbwhere, dbtype}\n\
+@end deftypefn")
+{
+  octave_value retval;
+
+  int n = 10;
+
+  if (args.length () == 1)
+    {
+      octave_value arg = args(0);
+
+      if (arg.is_string ())
+        {
+          std::string s_arg = arg.string_value ();
+
+          n = atoi (s_arg.c_str ());
+        }
+      else
+        n = args(0).int_value ();
+
+      if (n < 0)
+        error ("dblist: N must be a non-negative integer");
+    }
+
+  octave_user_code *dbg_fcn = get_user_code ();
+
+  if (dbg_fcn)
+    {
+      bool have_file = true;
+
+      std::string name = dbg_fcn->fcn_file_name ();
+
+      if (name.empty ())
+        {
+          have_file = false;
+          name = dbg_fcn->name ();
+        }
+
+      int l = octave_call_stack::caller_user_code_line ();
+
+      if (l > 0)
+        {
+          if (have_file)
+            {
+              int l_min = std::max (l - n/2, 0);
+              int l_max = l + n/2;
+              do_dbtype (octave_stdout, dbg_fcn->name (), l_min, l-1);
+
+              std::string line = get_file_line (name, l);
+              if (! line.empty ())
+                octave_stdout << l << "-->\t" << line << std::endl;
+
+              do_dbtype (octave_stdout, dbg_fcn->name (), l+1, l_max);
+            }
+        }
+      else
+        {
+          octave_stdout << "dblist: unable to determine source code line"
+                        << std::endl;
+        }
+    }
+  else
+    error ("dblist: must be inside a user function to use dblist\n");
+
+  return retval;
+}
+
 static octave_value_list
 do_dbstack (const octave_value_list& args, int nargout, std::ostream& os)
 {
   octave_value_list retval;
 
   unwind_protect frame;
 
   octave_idx_type curr_frame = -1;
