# HG changeset patch
# User Rik <rik@octave.org>
# Date 1454390179 28800
#      Mon Feb 01 21:16:19 2016 -0800
# Node ID 1edaf1ee65eb0d65fd0102cf39ef9f35df2d9630
# Parent  40051830f89b57806e20d164e8022661f4b9a1f4
maint: Replace some uses of goto in libinterp.

* ls-mat4.cc (read_mat_file_header): Replace "goto data_read_error" with
"return -1".
* ls-mat4.cc (read_mat_binary_data): Replace "goto data_read_error" with
direct call to error.  Move variable declarations to point of usage.

* ls-mat5.cc (read_mat5_tag, write_mat5_tag): Replace "goto data_read_error"
with "return 1".
* ls-mat5.cc (save_mat5_binary_element): Replace "goto skip_to_next" with
"return true".

* ls-oct-binary.cc (read_binary_data): Replace "goto data_read_error" with
direct call to error.

* mex.cc (valid_key): Replace "goto done" with "return retval".

* rand.cc (do_rand): Clarify comment.

* pt-binop.cc (tree_binary_expression::rvalue1): Replace "goto done" with
"return octave_value (xxx)"
* pt-binop.cc (tree_boolean_expression::rvalue1): Replace "goto done" with
"return octave_value (xxx)"

diff --git a/libinterp/corefcn/ls-mat4.cc b/libinterp/corefcn/ls-mat4.cc
--- a/libinterp/corefcn/ls-mat4.cc
+++ b/libinterp/corefcn/ls-mat4.cc
@@ -120,26 +120,26 @@ read_mat_file_header (std::istream& is, 
   // being able to read another mopt value should not result in an
   // error.
 
   is.read (reinterpret_cast<char *> (&mopt), 4);
   if (! is)
     return 1;
 
   if (! is.read (reinterpret_cast<char *> (&nr), 4))
-    goto data_read_error;
+    return -1;
 
   if (! is.read (reinterpret_cast<char *> (&nc), 4))
-    goto data_read_error;
+    return -1;
 
   if (! is.read (reinterpret_cast<char *> (&imag), 4))
-    goto data_read_error;
+    return -1;
 
   if (! is.read (reinterpret_cast<char *> (&len), 4))
-    goto data_read_error;
+    return -1;
 
 // If mopt is nonzero and the byte order is swapped, mopt will be
 // bigger than we expect, so we swap bytes.
 //
 // If mopt is zero, it means the file was written on a little endian
 // machine, and we only need to swap if we are running on a big endian
 // machine.
 //
@@ -166,19 +166,16 @@ read_mat_file_header (std::istream& is, 
     {
       if (! quiet)
         error ("load: can't read binary file");
 
       return -1;
     }
 
   return 0;
-
-data_read_error:
-  return -1;
 }
 
 // We don't just use a cast here, because we need to be able to detect
 // possible errors.
 
 oct_mach_info::float_format
 mopt_digit_to_float_format (int mach)
 {
@@ -238,70 +235,66 @@ float_format_to_mopt_digit (oct_mach_inf
 // This format provides no way to tag the data as global.
 
 std::string
 read_mat_binary_data (std::istream& is, const std::string& filename,
                       octave_value& tc)
 {
   std::string retval;
 
-  // These are initialized here instead of closer to where they are
-  // first used to avoid errors from gcc about goto crossing
-  // initialization of variable.
-
-  Matrix re;
-  oct_mach_info::float_format flt_fmt = oct_mach_info::flt_fmt_unknown;
   bool swap = false;
-  int type = 0;
-  int prec = 0;
-  int order = 0;
-  int mach = 0;
-  int dlen = 0;
-
   int32_t mopt, nr, nc, imag, len;
 
   int err = read_mat_file_header (is, swap, mopt, nr, nc, imag, len);
   if (err)
     {
       if (err < 0)
-        goto data_read_error;
-      else
-        return retval;
+        error ("load: trouble reading binary file '%s'", filename.c_str ());
+
+      return retval;
     }
 
+  int type = 0;
+  int prec = 0;
+  int order = 0;
+  int mach = 0;
+
   type = mopt % 10;  // Full, sparse, etc.
   mopt /= 10;        // Eliminate first digit.
   prec = mopt % 10;  // double, float, int, etc.
   mopt /= 10;        // Eliminate second digit.
   order = mopt % 10; // Row or column major ordering.
   mopt /= 10;        // Eliminate third digit.
   mach = mopt % 10;  // IEEE, VAX, etc.
 
+  oct_mach_info::float_format flt_fmt;
   flt_fmt = mopt_digit_to_float_format (mach);
 
   if (flt_fmt == oct_mach_info::flt_fmt_unknown)
     error ("load: unrecognized binary format!");
 
   if (imag && type == 1)
     error ("load: encountered complex matrix with string flag set!");
 
+  int dlen = 0;
+
   // LEN includes the terminating character, and the file is also
   // supposed to include it, but apparently not all files do.  Either
   // way, I think this should work.
 
   {
     OCTAVE_LOCAL_BUFFER (char, name, len+1);
     name[len] = '\0';
     if (! is.read (name, len))
-      goto data_read_error;
+      error ("load: trouble reading binary file '%s'", filename.c_str ());
     retval = name;
 
     dlen = nr * nc;
     if (dlen < 0)
-      goto data_read_error;
+      error ("load: trouble reading binary file '%s'", filename.c_str ());
 
     if (order)
       {
         octave_idx_type tmp = nr;
         nr = nc;
         nc = tmp;
       }
 
@@ -359,17 +352,17 @@ read_mat_binary_data (std::istream& is, 
 
             SparseMatrix sm = SparseMatrix (data, r, c, nr_new, nc_new);
 
             tc = order ? sm.transpose () : sm;
           }
       }
     else
       {
-        re.resize (nr, nc);
+        Matrix re (nr, nc);
 
         read_mat_binary_data (is, re.fortran_vec (), prec, dlen, swap, flt_fmt);
 
         if (! is)
           error ("load: reading matrix data for '%s'", name);
 
         if (imag)
           {
@@ -380,34 +373,29 @@ read_mat_binary_data (std::istream& is, 
 
             if (! is)
               error ("load: reading imaginary matrix data for '%s'", name);
 
             ComplexMatrix ctmp (nr, nc);
 
             for (octave_idx_type j = 0; j < nc; j++)
               for (octave_idx_type i = 0; i < nr; i++)
-                ctmp (i, j) = Complex (re (i, j), im (i, j));
+                ctmp (i,j) = Complex (re(i,j), im(i,j));
 
             tc = order ? ctmp.transpose () : ctmp;
           }
         else
           tc = order ? re.transpose () : re;
 
         if (type == 1)
           tc = tc.convert_to_str (false, true, '\'');
       }
 
     return retval;
   }
-
-// FIXME: With short-circuiting error(), no need for goto in code
-data_read_error:
-  error ("load: trouble reading binary file '%s'", filename.c_str ());
-
 }
 
 // Save the data from TC along with the corresponding NAME on stream OS
 // in the MatLab version 4 binary format.
 
 bool
 save_mat_binary_data (std::ostream& os, const octave_value& tc,
                       const std::string& name)
diff --git a/libinterp/corefcn/ls-mat5.cc b/libinterp/corefcn/ls-mat5.cc
--- a/libinterp/corefcn/ls-mat5.cc
+++ b/libinterp/corefcn/ls-mat5.cc
@@ -424,44 +424,41 @@ read_mat5_integer_data (std::istream& is
 static int
 read_mat5_tag (std::istream& is, bool swap, int32_t& type, int32_t& bytes,
                bool& is_small_data_element)
 {
   unsigned int upper;
   int32_t temp;
 
   if (! is.read (reinterpret_cast<char *> (&temp), 4))
-    goto data_read_error;
+    return 1;
 
   if (swap)
     swap_bytes<4> (&temp);
 
   upper = (temp >> 16) & 0xffff;
   type = temp & 0xffff;
 
   if (upper)
     {
       // "compressed" format
       bytes = upper;
       is_small_data_element = true;
     }
   else
     {
       if (! is.read (reinterpret_cast<char *> (&temp), 4))
-        goto data_read_error;
+        return 1;
       if (swap)
         swap_bytes<4> (&temp);
       bytes = temp;
       is_small_data_element = false;
     }
 
   return 0;
-
-data_read_error:
-  return 1;
 }
 
 static void
 read_int (std::istream& is, bool swap, int32_t& val)
 {
   is.read (reinterpret_cast<char *> (&val), 4);
 
   if (swap)
@@ -1556,27 +1553,24 @@ write_mat5_tag (std::ostream& is, int ty
   int32_t temp;
 
   if (bytes > 0 && bytes <= 4)
     temp = (bytes << 16) + type;
   else
     {
       temp = type;
       if (! is.write (reinterpret_cast<char *> (&temp), 4))
-        goto data_write_error;
+        return 1;
       temp = bytes;
     }
 
   if (! is.write (reinterpret_cast<char *> (&temp), 4))
-    goto data_write_error;
+    return 1;
 
   return 0;
-
-data_write_error:
-  return 1;
 }
 
 // Have to use copy here to avoid writing over data accessed via
 // Matrix::data().
 
 #define MAT5_DO_WRITE(TYPE, data, count, stream) \
   do \
     { \
@@ -2250,17 +2244,17 @@ save_mat5_binary_element (std::ostream& 
 
   static octave_idx_type max_dim_val = std::numeric_limits<int32_t>::max ();
 
   for (int i = 0; i < nd; i++)
     {
       if (dv(i) > max_dim_val)
         {
           warn_dim_too_large (name);
-          goto skip_to_next;
+          return true;  // skip to next
         }
     }
 
   if (tc.is_sparse_type ())
     {
       octave_idx_type nnz;
       octave_idx_type nc;
 
@@ -2275,25 +2269,25 @@ save_mat5_binary_element (std::ostream& 
           SparseMatrix sm = tc.sparse_matrix_value ();
           nnz = sm.nzmax ();
           nc = sm.cols ();
         }
 
       if (nnz > max_dim_val || nc + 1 > max_dim_val)
         {
           warn_dim_too_large (name);
-          goto skip_to_next;
+          return true;  // skip to next
         }
 
       nnz_32 = nnz;
     }
   else if (dv.numel () > max_dim_val)
     {
       warn_dim_too_large (name);
-      goto skip_to_next;
+      return true;  // skip to next
     }
 
 #ifdef HAVE_ZLIB
   if (mat7_format && ! compressing)
     {
       bool ret = false;
 
       std::ostringstream buf;
@@ -2376,17 +2370,17 @@ save_mat5_binary_element (std::ostream& 
   else if (tc.is_cell ())
     flags |= MAT_FILE_CELL_CLASS;
   else if (tc.is_inline_function () || tc.is_object ())
     flags |= MAT_FILE_OBJECT_CLASS;
   else
     {
       // FIXME: Should this just error out rather than warn?
       warn_wrong_type_arg ("save", tc);
-      goto error_cleanup;
+      error ("save: error while writing '%s' to MAT file", name.c_str ());
     }
 
   os.write (reinterpret_cast<char *> (&flags), 4);
   // Matlab seems to have trouble reading files that have nzmax == 0 at
   // this point in the file.
   if (nnz_32 == 0)
     nnz_32 = 1;
   os.write (reinterpret_cast<char *> (&nnz_32), 4);
@@ -2556,17 +2550,17 @@ save_mat5_binary_element (std::ostream& 
           write_mat5_array (os, m, save_as_floats);
         }
     }
   else if (tc.is_cell ())
     {
       Cell cell = tc.cell_value ();
 
       if (! write_mat5_cell_array (os, cell, mark_as_global, save_as_floats))
-        goto error_cleanup;
+        error ("save: error while writing '%s' to MAT file", name.c_str ());
     }
   else if (tc.is_complex_scalar () || tc.is_complex_matrix ())
     {
       if (tc.is_single_type ())
         {
           FloatComplexNDArray m_cmplx = tc.float_complex_array_value ();
 
           write_mat5_array (os, ::real (m_cmplx), save_as_floats);
@@ -2608,17 +2602,18 @@ save_mat5_binary_element (std::ostream& 
           try
             {
               octave_value_list tmp = feval ("saveobj", tc, 1);
 
               m = tmp(0).map_value ();
             }
           catch (const octave_execution_exception&)
             {
-              goto error_cleanup;
+              error ("save: error while writing '%s' to MAT file",
+                     name.c_str ());
             }
         }
       else
         m = tc.map_value ();
 
       // an Octave structure */
       // recursively write each element of the structure
       {
@@ -2662,25 +2657,20 @@ save_mat5_binary_element (std::ostream& 
             // of the fields.
             for (octave_idx_type i = 0; i < nf; i++)
               {
                 bool retval2 = save_mat5_binary_element (os, elts[i][j], "",
                                                          mark_as_global,
                                                          false,
                                                          save_as_floats);
                 if (! retval2)
-                  goto error_cleanup;
+                  error ("save: error while writing '%s' to MAT file",
+                         name.c_str ());
               }
           }
       }
     }
   else
     // FIXME: Should this just error out rather than warn?
     warn_wrong_type_arg ("save", tc);
 
-skip_to_next:
   return true;
-
-// FIXME: With short-circuiting error(), no need for goto in code
-error_cleanup:
-  error ("save: error while writing '%s' to MAT file", name.c_str ());
-
 }
diff --git a/libinterp/corefcn/ls-oct-binary.cc b/libinterp/corefcn/ls-oct-binary.cc
--- a/libinterp/corefcn/ls-oct-binary.cc
+++ b/libinterp/corefcn/ls-oct-binary.cc
@@ -153,41 +153,41 @@ read_binary_data (std::istream& is, bool
     return retval;
   if (swap)
     swap_bytes<4> (&name_len);
 
   {
     OCTAVE_LOCAL_BUFFER (char, name, name_len+1);
     name[name_len] = '\0';
     if (! is.read (reinterpret_cast<char *> (name), name_len))
-      goto data_read_error;
+      error ("load: trouble reading binary file '%s'", filename.c_str ());
     retval = name;
   }
 
   is.read (reinterpret_cast<char *> (&doc_len), 4);
   if (! is)
-    goto data_read_error;
+    error ("load: trouble reading binary file '%s'", filename.c_str ());
   if (swap)
     swap_bytes<4> (&doc_len);
 
   {
     OCTAVE_LOCAL_BUFFER (char, tdoc, doc_len+1);
     tdoc[doc_len] = '\0';
     if (! is.read (reinterpret_cast<char *> (tdoc), doc_len))
-      goto data_read_error;
+      error ("load: trouble reading binary file '%s'", filename.c_str ());
     doc = tdoc;
   }
 
   if (! is.read (reinterpret_cast<char *> (&tmp), 1))
-    goto data_read_error;
+    error ("load: trouble reading binary file '%s'", filename.c_str ());
   global = tmp ? 1 : 0;
 
   tmp = 0;
   if (! is.read (reinterpret_cast<char *> (&tmp), 1))
-    goto data_read_error;
+    error ("load: trouble reading binary file '%s'", filename.c_str ());
 
   // All cases except 255 kept for backwards compatibility
   switch (tmp)
     {
     case 1:
       tc = octave_value_typeinfo::lookup_type ("scalar");
       break;
 
@@ -205,22 +205,22 @@ read_binary_data (std::istream& is, bool
 
     case 5:
       {
         // FIXME:
         // This is cruft, since its for a save type that is old. Maybe
         // this is taking backward compatibility too far!!
         int32_t len;
         if (! is.read (reinterpret_cast<char *> (&len), 4))
-          goto data_read_error;
+          error ("load: trouble reading binary file '%s'", filename.c_str ());
         if (swap)
           swap_bytes<4> (&len);
         OCTAVE_LOCAL_BUFFER (char, s, len+1);
         if (! is.read (reinterpret_cast<char *> (s), len))
-          goto data_read_error;
+          error ("load: trouble reading binary file '%s'", filename.c_str ());
         s[len] = '\0';
         tc = s;
 
         // Early return, since don't want rest of this function
         return retval;
       }
       break;
 
@@ -232,37 +232,34 @@ read_binary_data (std::istream& is, bool
       tc = octave_value_typeinfo::lookup_type ("string");
       break;
 
     case 255:
       {
         // Read the saved variable type
         int32_t len;
         if (! is.read (reinterpret_cast<char *> (&len), 4))
-          goto data_read_error;
+          error ("load: trouble reading binary file '%s'", filename.c_str ());
         if (swap)
           swap_bytes<4> (&len);
         OCTAVE_LOCAL_BUFFER (char, s, len+1);
         if (! is.read (s, len))
-          goto data_read_error;
+          error ("load: trouble reading binary file '%s'", filename.c_str ());
         s[len] = '\0';
         std::string typ = s;
         tc = octave_value_typeinfo::lookup_type (typ);
       }
       break;
     default:
-      goto data_read_error;
+      error ("load: trouble reading binary file '%s'", filename.c_str ());
       break;
     }
 
   if (! tc.load_binary (is, swap, fmt))
-    {
-    data_read_error:
-      error ("load: trouble reading binary file '%s'", filename.c_str ());
-    }
+    error ("load: trouble reading binary file '%s'", filename.c_str ());
 
   return retval;
 }
 
 // Save the data from TC along with the corresponding NAME, help
 // string DOC, and global flag MARK_AS_GLOBAL on stream OS in the
 // binary format described above for read_binary_data.
 
diff --git a/libinterp/corefcn/mex.cc b/libinterp/corefcn/mex.cc
--- a/libinterp/corefcn/mex.cc
+++ b/libinterp/corefcn/mex.cc
@@ -86,25 +86,23 @@ valid_key (const char *key)
 
   if (nel > 0)
     {
       if (isalpha (key[0]))
         {
           for (int i = 1; i < nel; i++)
             {
               if (! (isalnum (key[i]) || key[i] == '_'))
-                goto done;
+                return retval;
             }
 
           retval = 1;
         }
     }
 
-done:
-
   return retval;
 }
 
 // ------------------------------------------------------------------
 
 static mwIndex
 calc_single_subscript_internal (mwSize ndims, const mwSize *dims,
                                 mwSize nsubs, const mwIndex *subs)
diff --git a/libinterp/corefcn/rand.cc b/libinterp/corefcn/rand.cc
--- a/libinterp/corefcn/rand.cc
+++ b/libinterp/corefcn/rand.cc
@@ -266,17 +266,17 @@ do_rand (const octave_value_list& args, 
               }
 
             goto gen_matrix;
           }
       }
       break;
     }
 
-  // No "goto gen_matrix" in code path.  Must be done.
+  // No "goto gen_matrix" in code path.  Must be done processing.
   return retval;
 
 gen_matrix:
 
   dims.chop_trailing_singletons ();
 
   if (is_single)
     {
diff --git a/libinterp/parse-tree/pt-binop.cc b/libinterp/parse-tree/pt-binop.cc
--- a/libinterp/parse-tree/pt-binop.cc
+++ b/libinterp/parse-tree/pt-binop.cc
@@ -82,38 +82,35 @@ tree_binary_expression::rvalue1 (int)
 
               bool a_true = a.is_true ();
 
               if (a_true)
                 {
                   if (etype == octave_value::op_el_or)
                     {
                       matlab_style_short_circuit_warning ("|");
-                      result = true;
-                      goto done;
+                      return octave_value (true);
                     }
                 }
               else
                 {
                   if (etype == octave_value::op_el_and)
                     {
                       matlab_style_short_circuit_warning ("&");
-                      goto done;
+                      return octave_value (false);
                     }
                 }
 
               if (op_rhs)
                 {
                   octave_value b = op_rhs->rvalue1 ();
 
                   result = b.is_true ();
                 }
 
-            done:
-
               return octave_value (result);
             }
         }
     }
 
   if (op_lhs)
     {
       octave_value a = op_lhs->rvalue1 ();
@@ -200,36 +197,31 @@ tree_boolean_expression::rvalue1 (int)
     {
       octave_value a = op_lhs->rvalue1 ();
 
       bool a_true = a.is_true ();
 
       if (a_true)
         {
           if (etype == bool_or)
-            {
-              result = true;
-              goto done;
-            }
+            return octave_value (true);
         }
       else
         {
           if (etype == bool_and)
-            goto done;
+            return octave_value (false);
         }
 
       if (op_rhs)
         {
           octave_value b = op_rhs->rvalue1 ();
 
           result = b.is_true ();
         }
 
-    done:
-
       retval = octave_value (result);
     }
 
   return retval;
 }
 
 std::string
 tree_boolean_expression::oper (void) const
