# HG changeset patch
# User jwe
# Date 981181418 0
#      Sat Feb 03 06:23:38 2001 +0000
# Node ID e44ffad3d06cd3d7b9ad73aa0f059c6a742b0835
# Parent  0486ba746bc18b8ecb3bd9a1e82a736055100c09
[project @ 2001-02-03 06:23:38 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,21 @@
+2001-02-02  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* input.cc (get_user_input): Handle dbg_cont and dbg_step here.
+	* debug.cc (Fdbg_cont): Delete.
+	* pt-bp.h (MAYBE_DO_BREAKPOINT): Check tree::break_next here.
+	* pt.h (tree::break_next): New static member.
+	* pt.cc: Initialize it.
+
+	* parse.h (feval (const octave_value_list&, int)):
+	Set default value for nargout.
+	(feval (const std::string&, const octave_value_list&, int)):
+	Set default values for args and nargout.
+
 2001-02-01  Ben Sapp  <bsapp@lanl.gov>
 
         * DLD-FUNCTIONS/debug.cc: New file.
         * pt-bp.h, pt-bp.cc: New files, for breakpoints.
 	* Makefile.in: Add them to the appropriate lists.
 
         * pt-stmt.cc (tree_statement_list::set_breakpoint,
 	tree_statement_list::delete_breakpoint,
diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -53,16 +53,17 @@ Software Foundation, 59 Temple Place - S
 #include "input.h"
 #include "oct-map.h"
 #include "oct-hist.h"
 #include "toplev.h"
 #include "oct-obj.h"
 #include "pager.h"
 #include "parse.h"
 #include "pathlen.h"
+#include "pt.h"
 #include "pt-const.h"
 #include "sighandlers.h"
 #include "symtab.h"
 #include "sysdep.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
 
@@ -535,24 +536,33 @@ get_user_input (const octave_value_list&
 	    {
 	      if (read_as_string)
 		return "";
 	      else
 		return Matrix ();
 	    }
 	}
 
-      if (debug
-	  && (match_sans_spaces ("exit", input_buf)
+      if (debug)
+	{
+	  if (match_sans_spaces ("exit", input_buf)
 	      || match_sans_spaces ("quit", input_buf)
-	      || match_sans_spaces ("return", input_buf)))
-	{
-	  return retval;
+	      || match_sans_spaces ("return", input_buf)
+	      || match_sans_spaces ("dbg_cont", input_buf))
+	    {
+	      return retval;
+	    }
+	  else if (match_sans_spaces ("dbg_step", input_buf))
+	    {
+	      tree::break_next = true;
+	      return retval;
+	    }
 	}
-      else if (read_as_string)
+
+      if (read_as_string)
 	{
 	  // XXX FIXME XXX -- fix gnu_readline and octave_gets instead!
 	  if (input_buf.length () == 1 && input_buf[0] == '\n')
 	    retval(0) = "";
 	  else
 	    retval(0) = input_buf;
 	}
       else
diff --git a/src/parse.h b/src/parse.h
--- a/src/parse.h
+++ b/src/parse.h
@@ -33,18 +33,18 @@ extern void reset_parser (void);
 extern int yylex (void);
 extern int yyparse (void);
 
 class tree;
 class tree_matrix;
 class tree_identifier;
 class symbol_record;
 class symbol_table;
-class octave_value;
-class octave_value_list;
+
+#include "oct-obj.h"
 
 // Temporary symbol table pointer used to cope with bogus function syntax.
 extern symbol_table *tmp_local_sym_tab;
 
 // Nonzero means print parser debugging info (-d).
 extern int yydebug;
 
 // The current input line number.
@@ -85,20 +85,22 @@ parse_and_execute (const std::string& s,
 		   const char *warn_for = 0);
 
 extern std::string get_help_from_file (const std::string& f);
 
 extern bool
 load_fcn_from_file (symbol_record *sym_rec, bool exec_script);
 
 extern octave_value_list
-feval (const std::string& name, const octave_value_list& args, int nargout);
+feval (const std::string& name,
+       const octave_value_list& args = octave_value_list (),
+       int nargout = 0);
 
 extern octave_value_list
-feval (const octave_value_list& args, int nargout);
+feval (const octave_value_list& args, int nargout = 0);
 
 extern octave_value_list
 eval_string (const std::string&, bool silent, int& parse_status, int hargout);
 
 extern octave_value
 eval_string (const std::string&, bool silent, int& parse_status);
 
 #endif
diff --git a/src/pt-bp.h b/src/pt-bp.h
--- a/src/pt-bp.h
+++ b/src/pt-bp.h
@@ -161,18 +161,19 @@ tree_breakpoint : public tree_walker
   tree_breakpoint (const tree_breakpoint&);
 
   tree_breakpoint& operator = (const tree_breakpoint&);
 };
 
 #define MAYBE_DO_BREAKPOINT \
   do \
     { \
-      if (is_breakpoint ()) \
+      if (tree::break_next || is_breakpoint ()) \
         { \
+          tree::break_next = false; \
           octave_stdout << "line: " << line () << endl; \
           do_keyboard (); \
         } \
     } \
   while (0)
 
 #endif
 
diff --git a/src/pt.cc b/src/pt.cc
--- a/src/pt.cc
+++ b/src/pt.cc
@@ -30,16 +30,19 @@ Software Foundation, 59 Temple Place - S
 
 #include <iostream>
 #include <strstream>
 #include <string>
 
 #include "pt.h"
 #include "pt-pr-code.h"
 
+// If true, stop executing at the next possible point.
+bool tree::break_next = false;
+
 // Hide the details of the string buffer so that we are less likely to
 // create a memory leak.
 
 std::string
 tree::str_print_code (void)
 {
   std::ostrstream buf;
 
diff --git a/src/pt.h b/src/pt.h
--- a/src/pt.h
+++ b/src/pt.h
@@ -62,16 +62,19 @@ public:
     { break_point = true; }
   
   virtual void delete_breakpoint (void)
     { break_point = false; }
 
   virtual bool is_breakpoint (void) const 
     { return break_point; }
 
+  // If true, stop executing at the next possible point.
+  static bool break_next;
+
 private:
 
   // The input line and column where we found the text that was
   // eventually converted to this tree node.
   int line_num;
   int column_num;
 
   // Stop before executing this tree node
