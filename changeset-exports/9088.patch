# HG changeset patch
# User Rik <rdrider0-list@yahoo.com>
# Date 1238880502 25200
#      Sat Apr 04 14:28:22 2009 -0700
# Node ID 77e71f3da3d60d1361491f6d75da0999bb44e8db
# Parent  961410931a4fdf2703347d600abc8930c45101c4
Fix documentation image printing under new development code

Printed images are now clipped to image size rather than to papersize of 8.5x11
Images are scaled to 4 inches and centered in display
pdf printing is sub-optimal as texi2pdf picks the png rendering (bitmap) rather
than the pdf rendering (vector).

diff --git a/doc/interpreter/geometry.txi b/doc/interpreter/geometry.txi
--- a/doc/interpreter/geometry.txi
+++ b/doc/interpreter/geometry.txi
@@ -77,17 +77,17 @@ plot(X, Y, "b", x, y, "r*");
 @end example
 
 @ifset HAVE_QHULL
 @ifnotinfo
 @noindent
 The result of which can be seen in @ref{fig:delaunay}.
 
 @float Figure,fig:delaunay
-@image{delaunay,8cm}
+@center @image{delaunay,4in}
 @caption{Delaunay triangulation of a random set of points}
 @end float
 @end ifnotinfo
 @end ifset
 
 @menu
 * Plotting the Triangulation::
 * Identifying points in Triangulation::
@@ -119,17 +119,17 @@ triplot (tri, x, y);
 @end example
 
 that plot the Delaunay triangulation of a set of random points in
 2-dimensions.
 @ifnotinfo
 The output of the above can be seen in @ref{fig:triplot}.
 
 @float Figure,fig:triplot
-@image{triplot,8cm}
+@center @image{triplot,4in}
 @caption{Delaunay triangulation of a random set of points}
 @end float
 @end ifnotinfo
 
 @node Identifying points in Triangulation
 @subsection Identifying points in Triangulation
 
 It is often necessary to identify whether a particular point in the
@@ -309,17 +309,17 @@ plot (vx, vy, "r");
 @ifnotinfo
 @noindent
 The result of which can be seen in @ref{fig:voronoi}.  Note that the
 circum-circle of one of the triangles has been added to this figure, to
 make the relationship between the Delaunay tessellation and the Voronoi
 diagram clearer.
 
 @float Figure,fig:voronoi
-@image{voronoi,8cm}
+@center @image{voronoi,4in}
 @caption{Delaunay triangulation and Voronoi diagram of a random set of points}
 @end float
 @end ifnotinfo
 @end ifset
 
 Additional information about the size of the facets of a Voronoi
 diagram, and which points of a set of points is in a polygon can be had
 with the @code{polyarea} and @code{inpolygon} functions respectively.
@@ -364,17 +364,17 @@ axis ([-2, 2, -2, 2]);
 @end group
 @end example
 
 @ifnotinfo
 @noindent
 The result of which can be seen in @ref{fig:inpolygon}.
 
 @float Figure,fig:inpolygon
-@image{inpolygon,8cm}
+@center @image{inpolygon,4in}
 @caption{Demonstration of the @code{inpolygon} function to determine the
 points inside a polygon}
 @end float
 @end ifnotinfo
 
 @node Convex Hull
 @section Convex Hull
 
@@ -400,17 +400,17 @@ axis ([-3.05, 3.05, -0.05, 1.05]);
 @end example
 
 @ifset HAVE_QHULL
 @ifnotinfo
 @noindent
 The output of the above can be seen in @ref{fig:convhull}.
 
 @float Figure,fig:convhull
-@image{convhull,8cm}
+@center @image{convhull,4in}
 @caption{The convex hull of a simple set of points}
 @end float
 @end ifnotinfo
 @end ifset
 
 @node Interpolation on Scattered Data
 @section Interpolation on Scattered Data
 
@@ -446,13 +446,13 @@ griddata(x,y,z,xx,yy);
 @ifset HAVE_QHULL
 @noindent
 that interpolates from a random scattering of points, to a uniform
 grid. 
 @ifnotinfo
 The output of the above can be seen in @ref{fig:griddata}.
 
 @float Figure,fig:griddata
-@image{griddata,8cm}
+@center @image{griddata,4in}
 @caption{Interpolation from a scattered data to a regular grid}
 @end float
 @end ifnotinfo
 @end ifset
diff --git a/doc/interpreter/interp.txi b/doc/interpreter/interp.txi
--- a/doc/interpreter/interp.txi
+++ b/doc/interpreter/interp.txi
@@ -65,23 +65,23 @@ legend('spline','pchip');
 @end example
 
 @ifnotinfo
 @noindent
 The result of which can be seen in @ref{fig:interpderiv1} and
 @ref{fig:interpderiv2}.
 
 @float Figure,fig:interpderiv1
-@image{interpderiv1,8cm}
+@center @image{interpderiv1,4in}
 @caption{Comparison of 'pchip' and 'spline' interpolation methods for a 
 step function}
 @end float
 
 @float Figure,fig:interpderiv2
-@image{interpderiv2,8cm}
+@center @image{interpderiv2,4in}
 @caption{Comparison of the second derivative of the 'pchip' and 'spline' 
 interpolation methods for a step function}
 @end float
 @end ifnotinfo
 
 A simplified version of @code{interp1} that performs only linear
 interpolation is available in @code{interp1q}.  This argument is slightly
 faster than @code{interp1} as to performs little error checking.
@@ -116,17 +116,17 @@ legend ('sin(4t+0.3)cos(3t-0.1','spline'
 @noindent
 @ifinfo
 which demonstrates the poor behavior of Fourier interpolation for non-periodic functions.
 @end ifinfo
 @ifnotinfo
 which demonstrates the poor behavior of Fourier interpolation for non-periodic functions, as can be seen in @ref{fig:interpft}.
 
 @float Figure,fig:interpft
-@image{interpft,8cm}
+@center @image{interpft,4in}
 @caption{Comparison of @code{interp1} and @code{interpft} for non-periodic data}
 @end float
 @end ifnotinfo
 
 In additional the support function @code{spline} and @code{lookup} that
 underlie the @code{interp1} function can be called directly.
 
 @DOCSTRING(spline)
@@ -177,17 +177,17 @@ mesh (zi, yi, squeeze (vi2(1,:,:)));
 @noindent
 where @code{vi} and @code{vi2} are identical.  The reversal of the
 dimensions is treated in the @code{meshgrid} and @code{ndgrid} functions
 respectively.
 @ifnotinfo
 The result of this code can be seen in @ref{fig:interpn}.
 
 @float Figure,fig:interpn
-@image{interpn,8cm}
+@center @image{interpn,4in}
 @caption{Demonstration of the use of @code{interpn}}
 @end float
 @end ifnotinfo
 
 In additional the support function @code{bicubic} that underlies the
 cubic interpolation of @code{interp2} function can be called directly.
 
 @DOCSTRING(bicubic)
diff --git a/doc/interpreter/plot.txi b/doc/interpreter/plot.txi
--- a/doc/interpreter/plot.txi
+++ b/doc/interpreter/plot.txi
@@ -59,17 +59,17 @@ plot (x, sin (x));
 @end group
 @end example
 
 @noindent
 displays a sine wave shown in @ref{fig:plot}.  On most systems, this
 command will open a separate plot window to display the graph.
 
 @float Figure,fig:plot
-@image{plot,8cm}
+@center @image{plot,4in}
 @caption{Simple Two-Dimensional Plot.}
 @end float
 
 @DOCSTRING(plot)
 
 The @code{plotyy} function may be used to create a plot with two
 independent y axes.
 
@@ -94,17 +94,17 @@ hist (randn (10000, 1), 30);
 @end group
 @end example
 
 @noindent
 produces the histogram of 10,000 normally distributed random numbers
 shown in @ref{fig:hist}.
 
 @float Figure,fig:hist
-@image{hist,8cm}
+@center @image{hist,4in}
 @caption{Histogram.}
 @end float
 
 @DOCSTRING(bar)
 
 @DOCSTRING(barh)
 
 @DOCSTRING(hist)
@@ -136,28 +136,30 @@ produce two-dimensional contour plots fr
 
 @DOCSTRING(contour3)
 
 The @code{errorbar}, @code{semilogxerr}, @code{semilogyerr}, and
 @code{loglogerr} functions produce plots with error bar markers.  For
 example,
 
 @example
+@group
 x = 0:0.1:10;
 y = sin (x);
 yp =  0.1 .* randn (size (x));
 ym = -0.1 .* randn (size (x));
 errorbar (x, sin (x), ym, yp);
+@end group
 @end example
 
 @noindent
 produces the figure shown in @ref{fig:errorbar}.
 
 @float Figure,fig:errorbar
-@image{errorbar,8cm}
+@center @image{errorbar,4in}
 @caption{Errorbar plot.}
 @end float
 
 @DOCSTRING(errorbar)
 
 @DOCSTRING(semilogxerr)
 
 @DOCSTRING(semilogyerr)
@@ -171,17 +173,17 @@ and linear.  For example,
 @example
 polar (0:0.1:10*pi, 0:0.1:10*pi);
 @end example
 
 @noindent
 produces the spiral plot shown in @ref{fig:polar}.
 
 @float Figure,fig:polar
-@image{polar,8cm}
+@center @image{polar,4in}
 @caption{Polar plot.}
 @end float
 
 @DOCSTRING(polar)
 
 @DOCSTRING(pie)
 
 @DOCSTRING(quiver)
@@ -271,17 +273,17 @@ mesh (tx, ty, tz);
 
 @noindent
 produces the familiar ``sombrero'' plot shown in @ref{fig:mesh}.  Note
 the use of the function @code{meshgrid} to create matrices of X and Y
 coordinates to use for plotting the Z data.  The @code{ndgrid} function
 is similar to @code{meshgrid}, but works for N-dimensional matrices.
 
 @float Figure,fig:mesh
-@image{mesh,8cm}
+@center @image{mesh,4in}
 @caption{Mesh plot.}
 @end float
 
 The @code{meshc} function is similar to @code{mesh}, but also produces a
 plot of contours for the surface.
 
 The @code{plot3} function displays arbitrary three-dimensional data,
 without requiring it to form a surface.  For example
@@ -294,17 +296,17 @@ z = linspace (0, 1, numel (t));
 plot3 (r.*sin(t), r.*cos(t), z);
 @end group
 @end example
 
 @noindent
 displays the spiral in three dimensions shown in @ref{fig:plot3}.
 
 @float Figure,fig:plot3
-@image{plot3,8cm}
+@center @image{plot3,4in}
 @caption{Three dimensional spiral.}
 @end float
 
 Finally, the @code{view} function changes the viewpoint for
 three-dimensional plots.
 
 @DOCSTRING(mesh)
 
@@ -437,20 +439,22 @@ numbered in column-major order (top to b
 
 @node Multiple Plot Windows
 @subsection Multiple Plot Windows
 
 You can open multiple plot windows using the @code{figure} function.
 For example
 
 @example
+@group
 figure (1);
 fplot (@@sin, [-10, 10]);
 figure (2);
 fplot (@@cos, [-10, 10]);
+@end group
 @end example
 
 @noindent
 creates two figures, with the first displaying a sine wave and
 the second a cosine wave.  Figure numbers must be positive integers.
 
 @DOCSTRING(figure)
 
@@ -796,29 +800,29 @@ the @code{outerposition} property.
 Index of text object for the axes title.
 
 @item box
 Either @code{"on"} or @code{"off"} to toggle display of the box around
 the axes.
 
 @item key
 Either @code{"on"} or @code{"off"} to toggle display of the legend.
-Note that this property is not compatible with @sc{Matlab} and may be
+Note that this property is not compatible with @sc{matlab} and may be
 removed in a future version of Octave.
 
 @item keybox
 Either @code{"on"} or @code{"off"} to toggle display of a box around the
-legend.  Note that this property is not compatible with @sc{Matlab} and
+legend.  Note that this property is not compatible with @sc{matlab} and
 may be removed in a future version of Octave.
 
 @item keypos
 An integer from 1 to 4 specifying the position of the legend.  1
 indicates upper right corner, 2 indicates upper left, 3 indicates lower
 left, and 4 indicates lower right.  Note that this property is not
-compatible with @sc{Matlab} and may be removed in a future version of
+compatible with @sc{matlab} and may be removed in a future version of
 Octave.
 
 @item dataaspectratio
 A two-element vector specifying the relative height and width of the
 data displayed in the axes.  Setting @code{dataaspectratio} to @samp{1,
 2]} causes the length of one unit as displayed on the y axis to be the
 same as the length of 2 units on the x axis.  Setting
 @code{dataaspectratio} also forces the @code{dataaspectratiomode}
@@ -944,17 +948,17 @@ The RGB color of the line, or a color na
 @item marker
 @item markeredgecolor
 @item markerfacecolor
 @item markersize
 @xref{Marker Styles}.
 
 @item keylabel
 The text of the legend entry corresponding to this line.  Note that this
-property is not compatible with @sc{Matlab} and may be removed in a
+property is not compatible with @sc{matlab} and may be removed in a
 future version of Octave.
 @end table
 
 @node Text Properties
 @subsubsection Text Properties
 @cindex text properties
 
 @table @code
@@ -1227,17 +1231,17 @@ text(0.65, 0.6175, strcat('\leftarrow x 
 @end group
 @end example
 
 @ifnotinfo
 @noindent
 The result of which can be seen in @ref{fig:extendedtext}
 
 @float Figure,fig:extendedtext
-@image{extended,8cm}
+@center @image{extended,4in}
 @caption{Example of inclusion of text with the @sc{TeX} interpreter}
 @end float
 @end ifnotinfo
 
 @node Image Properties
 @subsubsection Image Properties
 @cindex image properties
 
@@ -1294,17 +1298,17 @@ The color of the line defining the patch
 @item xdata
 @itemx ydata
 @itemx zdata
 The data determining the surface.  The @code{xdata} and @code{ydata}
 elements are vectors and @code{zdata} must be a matrix.
 
 @item keylabel
 The text of the legend entry corresponding to this surface.  Note that
-this property is not compatible with @sc{Matlab} and may be removed in a
+this property is not compatible with @sc{matlab} and may be removed in a
 future version of Octave.
 @end table
 
 @node Searching Properties
 @subsubsection Searching Properties
 
 @DOCSTRING(findobj)
 
@@ -1487,21 +1491,23 @@ plot (x, "DeleteFcn", @@(s, e) disp("Win
 @noindent
 where at the moment that the plot is deleted, the message "Window
 Deleted" will be displayed.
 
 Additional user arguments can be passed to callback functions, and will
 be passed after the 2 default arguments.  For example
 
 @example
+@group
 plot (x, "DeleteFcn", @{@@mycallback, "1"@})
 @dots{}
 function mycallback (src, data, a1)
   fprintf ("Closing plot %d\n", a1);
 endfunction
+@end group
 @end example
 
 The basic callback functions that are available for all graphics objects
 are
 
 @itemize @bullet
 @item CreateFcn
 This is the callback that is called at the moment of the objects
diff --git a/doc/interpreter/plotimages.m b/doc/interpreter/plotimages.m
--- a/doc/interpreter/plotimages.m
+++ b/doc/interpreter/plotimages.m
@@ -12,17 +12,19 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 function plotimages (nm, typ)
-  bury_output ();
+  set_print_size ();
+  hide_output ();
+
   if (strcmp (typ, "png"))
     set (0, "defaulttextfontname", "*");
   endif
   if (strcmp(typ , "txt"))
     image_as_txt(nm);
   elseif (strcmp (nm, "plot"))
     x = -10:0.1:10;
     plot (x, sin (x));
@@ -60,20 +62,28 @@ function plotimages (nm, typ)
     plot(x,x,"r");
     axis([0, 3, 0, 1]);
     text(0.65, 0.6175, cstrcat('\leftarrow x = {2/\surd\pi {\fontsize{16}',
       '\int_{\fontsize{8}0}^{\fontsize{8}x}} e^{-t^2} dt} = 0.6175'))
     print (cstrcat (nm, ".", typ), cstrcat ("-d", typ))
   else
     error ("unrecognized plot requested");
   endif
-  bury_output ();
+  hide_output ();
 endfunction
 
-function bury_output ()
+function set_print_size ()
+  image_size = [5.0, 3.5]; # in inches, 16:9 format
+  border = 0;              # For postscript use 50/72
+  set (0, "defaultfigurepapertype", "<custom>");
+  set (0, "defaultfigurepapersize", image_size + 2*border);
+  set (0, "defaultfigurepaperposition", [border, border, image_size]);
+endfunction
+
+function hide_output ()
   f = figure (1);
   set (f, "visible", "off");
 endfunction
 
 ## generate something for the texinfo @image command to process
 function image_as_txt(nm)
   fid = fopen (sprintf ("%s.txt", nm), "wt");
   fputs (fid, "\n");
diff --git a/doc/interpreter/sparse.txi b/doc/interpreter/sparse.txi
--- a/doc/interpreter/sparse.txi
+++ b/doc/interpreter/sparse.txi
@@ -377,17 +377,17 @@ matrix type
 There are several graphical means of finding out information about
 sparse matrices.  The first is the @dfn{spy} command, which displays
 the structure of the non-zero elements of the
 matrix.  @xref{fig:spmatrix}, for an example of the use of
 @dfn{spy}.  More advanced graphical information can be obtained with the
 @dfn{treeplot}, @dfn{etreeplot} and @dfn{gplot} commands.
 
 @float Figure,fig:spmatrix
-@image{spmatrix,8cm}
+@center @image{spmatrix,4in}
 @caption{Structure of simple sparse matrix.}
 @end float
 
 One use of sparse matrices is in graph theory, where the
 interconnections between nodes are represented as an adjacency
 matrix.  That is, if the i-th node in a graph is connected to the j-th
 node.  Then the ij-th node (and in the case of undirected graphs the
 ji-th node) of the sparse adjacency matrix is non-zero.  If each node
@@ -408,17 +408,17 @@ gplot(A,xy)
 
 which creates an adjacency matrix @code{A} where node 1 is connected
 to nodes 2 and 6, node 2 with nodes 1 and 3, etc.  The coordinates of
 the nodes are given in the n-by-2 matrix @code{xy}.
 @ifset htmltex 
 @xref{fig:gplot}.
 
 @float Figure,fig:gplot
-@image{gplot,8cm}
+@center @image{gplot,4in}
 @caption{Simple use of the @dfn{gplot} command.}
 @end float
 @end ifset
 
 The dependencies between the nodes of a Cholesky factorization can be
 calculated in linear time without explicitly needing to calculate the
 Cholesky factorization by the @code{etree} command.  This command
 returns the elimination tree of the matrix and can be displayed
@@ -497,17 +497,17 @@ used.
 @c @dfn{bicg}, @dfn{bicgstab}, @dfn{cholinc}, @dfn{cgs}, @dfn{gmres}, 
 @c @dfn{lsqr}, @dfn{minres}, @dfn{qmr}, @dfn{symmlq}
 
 @item Miscellaneous:
   @dfn{spparms}, @dfn{symbfact}, @dfn{spstats}
 @end table
 
 In addition all of the standard Octave mapper functions (i.e., basic
-math functions that take a single argument) such as @dfn{abs}, etc
+math functions that take a single argument) such as @dfn{abs}, etc.
 can accept sparse matrices.  The reader is referred to the documentation
 supplied with these functions within Octave itself for further
 details.
 
 @node Return Types of Operators and Functions
 @subsubsection The Return Types of Operators and Functions
 
 The two basic reasons to use sparse matrices are to reduce the memory 
@@ -645,17 +645,17 @@ then @dfn{symamd} or @dfn{csymamd} shoul
 @dfn{amd}, @dfn{colamd} or @dfn{ccolamd} should be used.  For completeness
 the reordering functions @dfn{colperm} and @dfn{randperm} are
 also available.
 
 @xref{fig:simplematrix}, for an example of the structure of a simple 
 positive definite matrix.
 
 @float Figure,fig:simplematrix
-@image{spmatrix,8cm}
+@center @image{spmatrix,4in}
 @caption{Structure of simple sparse matrix.}
 @end float
 
 The standard Cholesky factorization of this matrix can be
 obtained by the same command that would be used for a full
 matrix.  This can be visualized with the command 
 @code{r = chol(A); spy(r);}.
 @ifset HAVE_CHOLMOD
@@ -703,22 +703,22 @@ non-zero terms which is a significant im
 The Cholesky factorization itself can be used to determine the
 appropriate sparsity preserving reordering of the matrix during the
 factorization, In that case this might be obtained with three return
 arguments as r@code{[r, p, q] = chol(A); spy(r)}.
 
 @ifset HAVE_CHOLMOD
 @ifset HAVE_COLAMD
 @float Figure,fig:simplechol
-@image{spchol,8cm}
+@center @image{spchol,4in}
 @caption{Structure of the un-permuted Cholesky factorization of the above matrix.}
 @end float
 
 @float Figure,fig:simplecholperm
-@image{spcholperm,8cm}
+@center @image{spcholperm,4in}
 @caption{Structure of the permuted Cholesky factorization of the above matrix.}
 @end float
 @end ifset
 @end ifset
 
 In the case of an asymmetric matrix, the appropriate sparsity
 preserving permutation is @dfn{colamd} and the factorization using
 this reordering can be visualized using the command @code{q =
@@ -766,29 +766,29 @@ account the permutations.  Goto 8
 than that given by @code{spparms ("bandden")} continue, else goto 4.
 
 @enumerate a
 @item If the matrix is tridiagonal and the right-hand side is not sparse 
 continue, else goto 3b.
 
 @enumerate
 @item If the matrix is hermitian, with a positive real diagonal, attempt
-      Cholesky factorization using @sc{Lapack} xPTSV.
+      Cholesky factorization using @sc{lapack} xPTSV.
 
 @item If the above failed or the matrix is not hermitian with a positive
       real diagonal use Gaussian elimination with pivoting using 
-      @sc{Lapack} xGTSV, and goto 8.
+      @sc{lapack} xGTSV, and goto 8.
 @end enumerate
 
 @item If the matrix is hermitian with a positive real diagonal, attempt
-      Cholesky factorization using @sc{Lapack} xPBTRF.
+      Cholesky factorization using @sc{lapack} xPBTRF.
 
 @item if the above failed or the matrix is not hermitian with a positive
       real diagonal use Gaussian elimination with pivoting using 
-      @sc{Lapack} xGBTRF, and goto 8.
+      @sc{lapack} xGBTRF, and goto 8.
 @end enumerate
 
 @item If the matrix is upper or lower triangular perform a sparse forward
 or backward substitution, and goto 8
 
 @item If the matrix is a upper triangular matrix with column permutations
 or lower triangular matrix with row permutations, perform a sparse forward 
 or backward substitution, and goto 8
@@ -822,17 +822,17 @@ rather than just returning a vector of @
 
 All of the solvers above, can calculate an estimate of the condition
 number.  This can be used to detect numerical stability problems in the
 solution and force a minimum norm solution to be used.  However, for
 narrow banded, triangular or diagonal matrices, the cost of
 calculating the condition number is significant, and can in fact
 exceed the cost of factoring the matrix.  Therefore the condition
 number is not calculated in these cases, and Octave relies on simpler
-techniques to detect singular matrices or the underlying LAPACK code in
+techniques to detect singular matrices or the underlying @sc{lapack} code in
 the case of banded matrices.
 
 The user can force the type of the matrix with the @code{matrix_type}
 function.  This overcomes the cost of discovering the type of the matrix.
 However, it should be noted that identifying the type of the matrix incorrectly
 will lead to unpredictable results, and so @code{matrix_type} should be
 used with care.
 
@@ -1145,16 +1145,16 @@ value in the z-axis for each simplex ver
 @end example
 
 
 @ifset htmltex
 @ifset HAVE_CHOLMOD
 @ifset HAVE_UMFPACK
 @ifset HAVE_COLAMD
 @float Figure,fig:femmodel
-@image{grid,8cm}
+@center @image{grid,4in}
 @caption{Example finite element model the showing triangular elements. 
 The height of each vertex corresponds to the solution value.}
 @end float
 @end ifset
 @end ifset
 @end ifset
 @end ifset
