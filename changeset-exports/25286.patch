# HG changeset patch
# User Rik <rik@octave.org>
# Date 1524152385 25200
#      Thu Apr 19 08:39:45 2018 -0700
# Branch stable
# Node ID 44c0aca121cc57f6284e972ae0116d156ece621c
# Parent  78fb24bdd8bb1a4fc55aadd92983dafdb8a98486
doc: Clarify docstring for sum (bug #53698).

* data.cc: Provide a better explanation of "native" argument and what happens
when it is not present.

diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -2853,38 +2853,40 @@ DEFUN (sum, args, ,
 @deftypefnx {} {} sum (@dots{}, "native")
 @deftypefnx {} {} sum (@dots{}, "double")
 @deftypefnx {} {} sum (@dots{}, "extra")
 Sum of elements along dimension @var{dim}.
 
 If @var{dim} is omitted, it defaults to the first non-singleton dimension.
 
 The optional @qcode{"type"} input determines the class of the variable
-used for calculations.  If the argument @qcode{"native"} is given, then
-the operation is performed in the same type as the original argument, rather
-than the default double type.
+used for calculations.  By default, operations on floating point inputs (double
+or single) are performed in their native data type, while operations on
+integer, logical, and character data types are performed using doubles.  If the
+argument @qcode{"native"} is given, then the operation is performed in the same
+type as the original argument.
 
 For example:
 
 @example
 @group
 sum ([true, true])
    @result{} 2
 sum ([true, true], "native")
    @result{} true
 @end group
 @end example
 
-On the contrary, if @qcode{"double"} is given, the sum is performed in
-double precision even for single precision inputs.
+If @qcode{"double"} is given the sum is performed in double precision even for
+single precision inputs.
 
 For double precision inputs, the @qcode{"extra"} option will use a more
 accurate algorithm than straightforward summation.  For single precision
-inputs, @qcode{"extra"} is the same as @qcode{"double"}.  Otherwise,
-@qcode{"extra"} has no effect.
+inputs, @qcode{"extra"} is the same as @qcode{"double"}.  For all other data
+type @qcode{"extra"} has no effect.
 @seealso{cumsum, sumsq, prod}
 @end deftypefn */)
 {
   int nargin = args.length ();
 
   bool isnative = false;
   bool isdouble = false;
   bool isextra = false;
