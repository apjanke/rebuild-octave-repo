# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1236279025 18000
#      Thu Mar 05 13:50:25 2009 -0500
# Node ID 35cd375d4bb3c3d577bd3f01f1bbc25005315e02
# Parent  57c3155754d69c8a01d2ec90fe37b5914a6f5de9
make tree::dup functions const

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,49 @@
+2009-03-05  John W. Eaton  <jwe@octave.org>
+
+	* pt-cell.cc, pt-cell.h (tree_cell::dup): Now const.
+	* comment-list.cc, comment-list.h (octave_comment_list::dup): Ditto.
+	* pt-arg-list.cc, pt-arg-list.h (tree_argument_list::dup): Ditto.
+	* pt-assign.cc, pt-assign.h (tree_simple_assignment::dup,
+	tree_multi_assignment::dup): Ditto.
+	* pt-binop.cc, pt-binop.h (tree_binary_expression::dup,
+	tree_boolean_expression::dup): Ditto.
+	* pt-cmd.cc, pt-cmd.h (tree_no_op_command::dup,
+	tree_function_def::dup): Ditto.
+	* pt-colon.cc, pt-colon.h (tree_colon_expression::dup): Ditto.
+	* pt-const.cc, pt-const.h (tree_constant::dup): Ditto.
+	* pt-decl.cc, pt-decl.h (tree_decl_elt::dup, tree_decl_init_list::dup,
+	tree_global_command::dup, tree_static_command::dup): Ditto.
+	* pt-except.cc, pt-except.h (tree_try_catch_command::dup,
+	tree_unwind_protect_command::dup): Ditto.
+	* pt-fcn-handle.cc, pt-fcn-handle.h (tree_fcn_handle::dup,
+	tree_anon_fcn_handle::dup): Ditto.
+	* pt-id.cc, pt-id.h (tree_identifier::dup): Ditto.
+	* pt-idx.cc, pt-idx.h (tree_index_expression::dup): Ditto.
+	* pt-jump.cc, pt-jump.h (tree_break_command::dup,
+	tree_continue_command::dup, tree_return_command::dup): Ditto.
+	* pt-loop.cc, pt-loop.h (tree_while_command::dup,
+	tree_do_until_command::dup, tree_simple_for_command::dup,
+	tree_complex_for_command::dup): Ditto.
+	* pt-mat.cc, pt-mat.h (tree_matrix::dup): Ditto.
+	* pt-misc.cc, pt-misc.h (tree_parameter_list::dup,
+	tree_return_list::dup): Ditto.
+	* pt-select.cc, pt-select.h (tree_if_clause::dup,
+	tree_if_command_list::dup, tree_if_command::dup,
+	tree_switch_case::dup, tree_switch_case_list::dup,
+	tree_switch_command::dup): Ditto.
+	* pt-stmt.cc, pt-stmt.h (tree_statement::dup,
+	tree_statement_list::dup): Ditto.
+	* pt-unop.cc, pt-unop.h (tree_prefix_expression::dup,
+	tree_postfix_expression::dup): Ditto.
+	* pt-fcn-handle.h (tree_anon_fcn_handle::parameter_list,
+	tree_anon_fcn_handle::return_list, tree_anon_fcn_handle::body,
+	tree_anon_fcn_handle::scope): Ditto.
+
 2009-03-05  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/sparse.cc (Fsparse): Handle diagonal and permutation
 	matrices.
 
 2009-03-03  John W. Eaton  <jwe@octave.org>
 
 	* ov-struct.cc (octave_struct::save_ascii,
diff --git a/src/comment-list.cc b/src/comment-list.cc
--- a/src/comment-list.cc
+++ b/src/comment-list.cc
@@ -27,23 +27,23 @@ along with Octave; see the file COPYING.
 #include "lo-utils.h"
 
 #include "comment-list.h"
 #include "error.h"
 
 octave_comment_buffer *octave_comment_buffer::instance = 0;
 
 octave_comment_list *
-octave_comment_list::dup (void)
+octave_comment_list::dup (void) const
 {
   octave_comment_list *new_cl = new octave_comment_list ();
 
-  for (iterator p = begin (); p != end (); p++)
+  for (const_iterator p = begin (); p != end (); p++)
     {
-      octave_comment_elt elt = *p;
+      const octave_comment_elt elt = *p;
 
       new_cl->append (elt);
     }
 
   return new_cl;
 }
 
 bool
diff --git a/src/comment-list.h b/src/comment-list.h
--- a/src/comment-list.h
+++ b/src/comment-list.h
@@ -89,17 +89,17 @@ public:
 
   void append (const octave_comment_elt& elt)
     { octave_base_list<octave_comment_elt>::append (elt); }
 
   void append (const std::string& s,
 	       octave_comment_elt::comment_type t = octave_comment_elt::unknown)
     { append (octave_comment_elt (s, t)); }
 
-  octave_comment_list *dup (void);
+  octave_comment_list *dup (void) const;
 };
 
 class
 octave_comment_buffer
 {
 public:
 
   octave_comment_buffer (void)
diff --git a/src/pt-arg-list.cc b/src/pt-arg-list.cc
--- a/src/pt-arg-list.cc
+++ b/src/pt-arg-list.cc
@@ -254,26 +254,26 @@ tree_argument_list::get_arg_names (void)
       retval(k++) = elt->str_print_code ();
     }
 
   return retval;
 }
 
 tree_argument_list *
 tree_argument_list::dup (symbol_table::scope_id scope,
-			 symbol_table::context_id context)
+			 symbol_table::context_id context) const
 {
   tree_argument_list *new_list = new tree_argument_list ();
 
   new_list->list_includes_magic_end = list_includes_magic_end;
   new_list->simple_assign_lhs = simple_assign_lhs;
 
-  for (iterator p = begin (); p != end (); p++)
+  for (const_iterator p = begin (); p != end (); p++)
     {
-      tree_expression *elt = *p;
+      const tree_expression *elt = *p;
 
       new_list->append (elt ? elt->dup (scope, context) : 0);
     }
 
   return new_list;
 }
 
 void
diff --git a/src/pt-arg-list.h b/src/pt-arg-list.h
--- a/src/pt-arg-list.h
+++ b/src/pt-arg-list.h
@@ -74,17 +74,17 @@ public:
 
   octave_value_list convert_to_const_vector (const octave_value *object = 0);
 
   std::list<octave_lvalue> lvalue_list (void);
 
   string_vector get_arg_names (void) const;
 
   tree_argument_list *dup (symbol_table::scope_id scope,
-			   symbol_table::context_id context);
+			   symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
 
 private:
 
   bool list_includes_magic_end;
 
   bool simple_assign_lhs;
diff --git a/src/pt-assign.cc b/src/pt-assign.cc
--- a/src/pt-assign.cc
+++ b/src/pt-assign.cc
@@ -264,17 +264,17 @@ tree_simple_assignment::rvalue1 (int)
 std::string
 tree_simple_assignment::oper (void) const
 {
   return octave_value::assign_op_as_string (etype);
 }
 
 tree_expression *
 tree_simple_assignment::dup (symbol_table::scope_id scope,
-			     symbol_table::context_id context)
+			     symbol_table::context_id context) const
 {
   tree_simple_assignment *new_sa
     = new tree_simple_assignment (lhs ? lhs->dup (scope, context) : 0,
 				  rhs ? rhs->dup (scope, context) : 0,
 				  preserve, etype);
 
   new_sa->copy_base (*this);
 
@@ -474,17 +474,17 @@ tree_multi_assignment::rvalue (int)
 std::string
 tree_multi_assignment::oper (void) const
 {
   return octave_value::assign_op_as_string (etype);
 }
 
 tree_expression *
 tree_multi_assignment::dup (symbol_table::scope_id scope,
-			    symbol_table::context_id context)
+			    symbol_table::context_id context) const
 {
   tree_multi_assignment *new_ma
     = new tree_multi_assignment (lhs ? lhs->dup (scope, context) : 0,
 				 rhs ? rhs->dup (scope, context) : 0,
 				 preserve, etype);
 
   new_ma->copy_base (*this);
 
diff --git a/src/pt-assign.h b/src/pt-assign.h
--- a/src/pt-assign.h
+++ b/src/pt-assign.h
@@ -68,17 +68,17 @@ public:
 
   std::string oper (void) const;
 
   tree_expression *left_hand_side (void) { return lhs; }
 
   tree_expression *right_hand_side (void) { return rhs; }
 
   tree_expression *dup (symbol_table::scope_id scope,
-			symbol_table::context_id context);
+			symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
 
   octave_value::assign_op op_type (void) const { return etype; }
 
 private:
 
   void do_assign (octave_lvalue& ult, const octave_value_list& args,
@@ -141,17 +141,17 @@ public:
 
   std::string oper (void) const;
 
   tree_argument_list *left_hand_side (void) { return lhs; }
 
   tree_expression *right_hand_side (void) { return rhs; }
 
   tree_expression *dup (symbol_table::scope_id scope,
-			symbol_table::context_id context);
+			symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
   
   octave_value::assign_op op_type (void) const { return etype; }
 
 private:
 
   // The left hand side of the assignment.
diff --git a/src/pt-binop.cc b/src/pt-binop.cc
--- a/src/pt-binop.cc
+++ b/src/pt-binop.cc
@@ -80,17 +80,17 @@ tree_binary_expression::rvalue1 (int)
 std::string
 tree_binary_expression::oper (void) const
 {
   return octave_value::binary_op_as_string (etype);
 }
 
 tree_expression *
 tree_binary_expression::dup (symbol_table::scope_id scope,
-			     symbol_table::context_id context)
+			     symbol_table::context_id context) const
 {
   tree_binary_expression *new_be
     = new tree_binary_expression (op_lhs ? op_lhs->dup (scope, context) : 0,
 				  op_rhs ? op_rhs->dup (scope, context) : 0,
 				  line (), column (), etype);
 
   new_be->copy_base (*this);
 
@@ -191,17 +191,17 @@ tree_boolean_expression::oper (void) con
       break;
     }
 
   return retval;
 }
 
 tree_expression *
 tree_boolean_expression::dup (symbol_table::scope_id scope,
-			      symbol_table::context_id context)
+			      symbol_table::context_id context) const
 {
   tree_boolean_expression *new_be
     = new tree_boolean_expression (op_lhs ? op_lhs->dup (scope, context) : 0,
 				   op_rhs ? op_rhs->dup (scope, context) : 0,
 				   line (), column (), etype);
 
   new_be->copy_base (*this);
 
diff --git a/src/pt-binop.h b/src/pt-binop.h
--- a/src/pt-binop.h
+++ b/src/pt-binop.h
@@ -77,17 +77,17 @@ public:
   std::string oper (void) const;
 
   octave_value::binary_op op_type (void) const { return etype; }
 
   tree_expression *lhs (void) { return op_lhs; }
   tree_expression *rhs (void) { return op_rhs; }
 
   tree_expression *dup (symbol_table::scope_id scope,
-			symbol_table::context_id context);
+			symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
 
 protected:
 
   // The operands for the expression.
   tree_expression *op_lhs;
   tree_expression *op_rhs;
@@ -135,17 +135,17 @@ public:
 
   octave_value_list rvalue (int nargout);
 
   std::string oper (void) const;
 
   type op_type (void) const { return etype; }
 
   tree_expression *dup (symbol_table::scope_id scope,
-			symbol_table::context_id context);
+			symbol_table::context_id context) const;
 
 private:
 
   // The type of the expression.
   type etype;
 
   // No copying!
 
diff --git a/src/pt-cell.cc b/src/pt-cell.cc
--- a/src/pt-cell.cc
+++ b/src/pt-cell.cc
@@ -99,23 +99,23 @@ tree_cell::rvalue (int nargout)
   else
     retval = rvalue1 (nargout);
 
   return retval;
 }
 
 tree_expression *
 tree_cell::dup (symbol_table::scope_id scope,
-		symbol_table::context_id context)
+		symbol_table::context_id context) const
 {
   tree_cell *new_cell = new tree_cell (0, line (), column ());
 
-  for (iterator p = begin (); p != end (); p++)
+  for (const_iterator p = begin (); p != end (); p++)
     {
-      tree_argument_list *elt = *p;
+      const tree_argument_list *elt = *p;
 
       new_cell->append (elt ? elt->dup (scope, context) : 0);
     }
 
   new_cell->copy_base (*this);
 
   return new_cell;
 }
diff --git a/src/pt-cell.h b/src/pt-cell.h
--- a/src/pt-cell.h
+++ b/src/pt-cell.h
@@ -49,17 +49,17 @@ public:
 
   bool rvalue_ok (void) const { return true; }
 
   octave_value rvalue1 (int nargout = 1);
 
   octave_value_list rvalue (int);
 
   tree_expression *dup (symbol_table::scope_id scope,
-			symbol_table::context_id context);
+			symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
 
 private:
 
   // No copying!
 
   tree_cell (const tree_cell&);
diff --git a/src/pt-cmd.cc b/src/pt-cmd.cc
--- a/src/pt-cmd.cc
+++ b/src/pt-cmd.cc
@@ -27,32 +27,32 @@ along with Octave; see the file COPYING.
 
 #include "pt-cmd.h"
 #include "pt-walk.h"
 
 // No-op.
 
 tree_command *
 tree_no_op_command::dup (symbol_table::scope_id,
-			 symbol_table::context_id /*context*/)
+			 symbol_table::context_id) const
 {
   return new tree_no_op_command (orig_cmd, line (), column ());
 }
 
 void
 tree_no_op_command::accept (tree_walker& tw)
 {
   tw.visit_no_op_command (*this);
 }
 
 // Function definition.
 
 tree_command *
 tree_function_def::dup (symbol_table::scope_id,
-			symbol_table::context_id /*context*/)
+			symbol_table::context_id) const
 {
   return new tree_function_def (fcn, line (), column ());
 }
 
 void
 tree_function_def::accept (tree_walker& tw)
 {
   tw.visit_function_def (*this);
diff --git a/src/pt-cmd.h b/src/pt-cmd.h
--- a/src/pt-cmd.h
+++ b/src/pt-cmd.h
@@ -41,17 +41,17 @@ tree_command : public tree
 public:
 
   tree_command (int l = -1, int c = -1)
     : tree (l, c) { }
 
   virtual ~tree_command (void) { }
 
   virtual tree_command *dup (symbol_table::scope_id,
-			     symbol_table::context_id context) = 0;
+			     symbol_table::context_id context) const = 0;
 
 private:
 
   // No copying!
 
   tree_command (const tree_command&);
 
   tree_command& operator = (const tree_command&);
@@ -66,17 +66,17 @@ public:
 
   tree_no_op_command (const std::string& cmd = "no_op", int l = -1, int c = -1)
     : tree_command (l, c), eof (cmd == "endfunction" || cmd == "endscript"),
       orig_cmd (cmd) { }
 
   ~tree_no_op_command (void) { }
 
   tree_command *dup (symbol_table::scope_id scope,
-		     symbol_table::context_id context);
+		     symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
 
   bool is_end_of_fcn_or_script (void) const { return eof; }
 
   std::string original_command (void) { return orig_cmd; }
 
 private:
@@ -100,17 +100,17 @@ tree_function_def : public tree_command
 public:
 
   tree_function_def (octave_function *f, int l = -1, int c = -1)
     : tree_command (l, c), fcn (f) { }
 
   ~tree_function_def (void) { }
 
   tree_command *dup (symbol_table::scope_id scope,
-		     symbol_table::context_id context);
+		     symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
 
   octave_value function (void) { return fcn; }
 
 private:
 
   octave_value fcn;
diff --git a/src/pt-colon.cc b/src/pt-colon.cc
--- a/src/pt-colon.cc
+++ b/src/pt-colon.cc
@@ -261,17 +261,17 @@ tree_colon_expression::column (void) con
   return (op_base ? op_base->column ()
 	  : (op_increment ? op_increment->column ()
 	     : (op_limit ? op_limit->column ()
 		: -1)));
 }
 
 tree_expression *
 tree_colon_expression::dup (symbol_table::scope_id scope,
-			    symbol_table::context_id context)
+			    symbol_table::context_id context) const
 {
   tree_colon_expression *new_ce = new
     tree_colon_expression (op_base ? op_base->dup (scope, context) : 0,
 			   op_limit ? op_limit->dup (scope, context) : 0,
 			   op_increment ? op_increment->dup (scope, context) : 0,
 			   line (), column ());
 
   new_ce->copy_base (*new_ce);
diff --git a/src/pt-colon.h b/src/pt-colon.h
--- a/src/pt-colon.h
+++ b/src/pt-colon.h
@@ -88,17 +88,17 @@ public:
   tree_expression *limit (void) { return op_limit; }
 
   tree_expression *increment (void) { return op_increment; }
 
   int line (void) const;
   int column (void) const;
 
   tree_expression *dup (symbol_table::scope_id scope,
-			symbol_table::context_id context);
+			symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
 
 private:
 
   // The components of the expression.
   tree_expression *op_base;
   tree_expression *op_limit;
diff --git a/src/pt-const.cc b/src/pt-const.cc
--- a/src/pt-const.cc
+++ b/src/pt-const.cc
@@ -67,17 +67,17 @@ tree_constant::rvalue (int nargout)
   else
     retval = rvalue1 (nargout);
 
   return retval;
 }
 
 tree_expression *
 tree_constant::dup (symbol_table::scope_id,
-		    symbol_table::context_id /*context*/)
+		    symbol_table::context_id) const
 {
   tree_constant *new_tc
     = new tree_constant (val, orig_text, line (), column ());
 
   new_tc->copy_base (*this);
 
   return new_tc;
 }
diff --git a/src/pt-const.h b/src/pt-const.h
--- a/src/pt-const.h
+++ b/src/pt-const.h
@@ -74,17 +74,17 @@ public:
 
   bool rvalue_ok (void) const { return true; }
 
   octave_value rvalue1 (int = 1) { return val; }
 
   octave_value_list rvalue (int nargout);
 
   tree_expression *dup (symbol_table::scope_id scope,
-			symbol_table::context_id context);
+			symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
 
   // Store the original text corresponding to this constant for later
   // pretty printing.
 
   void stash_original_text (const std::string& s) { orig_text = s; }
 
diff --git a/src/pt-decl.cc b/src/pt-decl.cc
--- a/src/pt-decl.cc
+++ b/src/pt-decl.cc
@@ -65,39 +65,39 @@ tree_decl_elt::eval (void)
 	}
     }
 
   return retval;
 }
 
 tree_decl_elt *
 tree_decl_elt::dup (symbol_table::scope_id scope,
-		    symbol_table::context_id context)
+		    symbol_table::context_id context) const
 {
   return new tree_decl_elt (id ? id->dup (scope, context) : 0,
 			    expr ? expr->dup (scope, context) : 0);
 }
 
 void
 tree_decl_elt::accept (tree_walker& tw)
 {
   tw.visit_decl_elt (*this);
 }
 
 // Initializer lists for declaration statements.
 
 tree_decl_init_list *
 tree_decl_init_list::dup (symbol_table::scope_id scope,
-			  symbol_table::context_id context)
+			  symbol_table::context_id context) const
 {
   tree_decl_init_list *new_dil = new tree_decl_init_list ();
 
-  for (iterator p = begin (); p != end (); p++)
+  for (const_iterator p = begin (); p != end (); p++)
     {
-      tree_decl_elt *elt = *p;
+      const tree_decl_elt *elt = *p;
 
       new_dil->append (elt ? elt->dup (scope, context) : 0);
     }
   
   return new_dil;
 }
 
 void
@@ -112,34 +112,34 @@ tree_decl_command::~tree_decl_command (v
 {
   delete init_list;
 }
 
 // Global.
 
 tree_command *
 tree_global_command::dup (symbol_table::scope_id scope,
-			  symbol_table::context_id context)
+			  symbol_table::context_id context) const
 {
   return
     new tree_global_command (init_list ? init_list->dup (scope, context) : 0,
 			     line (), column ());
 }
 
 void
 tree_global_command::accept (tree_walker& tw)
 {
   tw.visit_global_command (*this);
 }
 
 // Static.
 
 tree_command *
 tree_static_command::dup (symbol_table::scope_id scope,
-			  symbol_table::context_id context)
+			  symbol_table::context_id context) const
 {
   return
     new tree_static_command (init_list ? init_list->dup (scope, context) : 0,
 			     line (), column ());
 }
 
 void
 tree_static_command::accept (tree_walker& tw)
diff --git a/src/pt-decl.h b/src/pt-decl.h
--- a/src/pt-decl.h
+++ b/src/pt-decl.h
@@ -83,17 +83,17 @@ public:
 
   octave_lvalue lvalue (void) { return id ? id->lvalue () : octave_lvalue (); }
 
   tree_identifier *ident (void) { return id; }
 
   tree_expression *expression (void) { return expr; }
 
   tree_decl_elt *dup (symbol_table::scope_id scope,
-		      symbol_table::context_id context);
+		      symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
 
 private:
 
   // An identifier to tag with the declared property.
   tree_identifier *id;
 
@@ -122,17 +122,17 @@ public:
 	{
 	  iterator p = begin ();
 	  delete *p;
 	  erase (p);
 	}
     }
 
   tree_decl_init_list *dup (symbol_table::scope_id scope,
-			    symbol_table::context_id context);
+			    symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
 
 private:
 
   // No copying!
 
   tree_decl_init_list (const tree_decl_init_list&);
@@ -188,17 +188,17 @@ public:
     : tree_decl_command ("global", l, c) { }
 
   tree_global_command (tree_decl_init_list *t, int l = -1, int c = -1)
     : tree_decl_command ("global", t, l, c) { }
 
   ~tree_global_command (void) { }
 
   tree_command *dup (symbol_table::scope_id scope,
-		     symbol_table::context_id context);
+		     symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
 
 private:
 
   static void do_init (tree_decl_elt& elt);
 
   // No copying!
@@ -219,17 +219,17 @@ public:
     : tree_decl_command ("static", l, c) { }
 
   tree_static_command (tree_decl_init_list *t, int l = -1, int c = -1)
     : tree_decl_command ("static", t, l, c) { }
 
   ~tree_static_command (void) { }
 
   tree_command *dup (symbol_table::scope_id scope,
-		     symbol_table::context_id context);
+		     symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
 
 private:
 
   static void do_init (tree_decl_elt& elt);
 
   // No copying!
diff --git a/src/pt-except.cc b/src/pt-except.cc
--- a/src/pt-except.cc
+++ b/src/pt-except.cc
@@ -48,17 +48,17 @@ tree_try_catch_command::~tree_try_catch_
   delete catch_code;
   delete lead_comm;
   delete mid_comm;
   delete trail_comm;
 }
 
 tree_command *
 tree_try_catch_command::dup (symbol_table::scope_id scope,
-			     symbol_table::context_id context)
+			     symbol_table::context_id context) const
 {
   return new
     tree_try_catch_command (try_code ? try_code->dup (scope, context) : 0,
 			    catch_code ? catch_code->dup (scope, context) : 0,
 			    lead_comm ? lead_comm->dup () : 0,
 			    mid_comm ? mid_comm->dup () : 0,
 			    trail_comm ? trail_comm->dup () : 0,
 			    line (), column ());
@@ -78,17 +78,17 @@ tree_unwind_protect_command::~tree_unwin
   delete cleanup_code;
   delete lead_comm;
   delete mid_comm;
   delete trail_comm;
 }
 
 tree_command *
 tree_unwind_protect_command::dup (symbol_table::scope_id scope,
-				  symbol_table::context_id context)
+				  symbol_table::context_id context) const
 {
   return new tree_unwind_protect_command
     (unwind_protect_code ? unwind_protect_code->dup (scope, context) : 0,
      cleanup_code ? cleanup_code->dup (scope, context) : 0,
      lead_comm ? lead_comm->dup () : 0,
      mid_comm ? mid_comm->dup () : 0,
      trail_comm ? trail_comm->dup () : 0,
      line (), column ());
diff --git a/src/pt-except.h b/src/pt-except.h
--- a/src/pt-except.h
+++ b/src/pt-except.h
@@ -59,17 +59,17 @@ public:
 
   octave_comment_list *leading_comment (void) { return lead_comm; }
 
   octave_comment_list *middle_comment (void) { return mid_comm; }
 
   octave_comment_list *trailing_comment (void) { return trail_comm; }
 
   tree_command *dup (symbol_table::scope_id scope,
-		     symbol_table::context_id context);
+		     symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
 
 private:
 
   // The first block of code to attempt to execute.
   tree_statement_list *try_code;
 
@@ -120,17 +120,17 @@ public:
 
   octave_comment_list *leading_comment (void) { return lead_comm; }
 
   octave_comment_list *middle_comment (void) { return mid_comm; }
 
   octave_comment_list *trailing_comment (void) { return trail_comm; }
 
   tree_command *dup (symbol_table::scope_id scope,
-		     symbol_table::context_id context);
+		     symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
 
 private:
 
   // The first body of code to attempt to execute.
   tree_statement_list *unwind_protect_code;
 
diff --git a/src/pt-exp.h b/src/pt-exp.h
--- a/src/pt-exp.h
+++ b/src/pt-exp.h
@@ -43,17 +43,17 @@ public:
     : tree (l, c), num_parens (0), postfix_indexed (false),
       print_flag (false) { }
 
   virtual ~tree_expression (void) { }
 
   virtual bool has_magic_end (void) const = 0;
 
   virtual tree_expression *dup (symbol_table::scope_id,
-				symbol_table::context_id context) = 0;
+				symbol_table::context_id context) const = 0;
 
   virtual bool is_constant (void) const { return false; }
 
   virtual bool is_matrix_constant (void) const { return false; }
 
   virtual bool is_identifier (void) const { return false; }
 
   virtual bool is_index_expression (void) const { return false; }
@@ -105,17 +105,17 @@ public:
     }
 
   tree_expression *set_print_flag (bool print)
     {
       print_flag = print;
       return this;
     }
 
-  virtual void copy_base (tree_expression& e)
+  virtual void copy_base (const tree_expression& e)
     {
       num_parens = e.num_parens;
       postfix_indexed = e.postfix_indexed;
       print_flag = e.print_flag;
     }
 
 protected:
 
diff --git a/src/pt-fcn-handle.cc b/src/pt-fcn-handle.cc
--- a/src/pt-fcn-handle.cc
+++ b/src/pt-fcn-handle.cc
@@ -65,17 +65,17 @@ tree_fcn_handle::rvalue (int nargout)
   else
     retval = rvalue1 (nargout);
 
   return retval;
 }
 
 tree_expression *
 tree_fcn_handle::dup (symbol_table::scope_id,
-		      symbol_table::context_id)
+		      symbol_table::context_id) const
 {
   tree_fcn_handle *new_fh = new tree_fcn_handle (nm, line (), column ());
 
   new_fh->copy_base (*this);
 
   return new_fh;
 }
 
@@ -157,17 +157,17 @@ tree_anon_fcn_handle::rvalue (int nargou
     retval = rvalue1 (nargout);
 
   return retval;
 }
 
 #if 0
 tree_expression *
 tree_anon_fcn_handle::dup (symbol_table::scope_id parent_scope,
-			   symbol_table::context_id parent_context)
+			   symbol_table::context_id parent_context) const
 {
   tree_parameter_list *param_list = parameter_list ();
   tree_parameter_list *ret_list = return_list ();
   tree_statement_list *cmd_list = body ();
   symbol_table::scope_id this_scope = scope ();
 
   symbol_table::scope_id new_scope = symbol_table::dup_scope (this_scope);
 
@@ -182,17 +182,18 @@ tree_anon_fcn_handle::dup (symbol_table:
 
   new_afh->copy_base (*this);
 
   return new_afh;
 }
 #endif
 
 tree_expression *
-tree_anon_fcn_handle::dup (symbol_table::scope_id, symbol_table::context_id)
+tree_anon_fcn_handle::dup (symbol_table::scope_id,
+			   symbol_table::context_id) const
 {
   // Instead of simply duplicating, transform to a tree_constant
   // object that contains an octave_fcn_handle object with the symbol
   // table of the referenced function primed with values from the
   // current scope and context.
 
   tree_parameter_list *param_list = parameter_list ();
   tree_parameter_list *ret_list = return_list ();
diff --git a/src/pt-fcn-handle.h b/src/pt-fcn-handle.h
--- a/src/pt-fcn-handle.h
+++ b/src/pt-fcn-handle.h
@@ -65,17 +65,17 @@ public:
 
   bool rvalue_ok (void) const { return true; }
 
   octave_value rvalue1 (int nargout = 1);
 
   octave_value_list rvalue (int nargout);
 
   tree_expression *dup (symbol_table::scope_id scope,
-			symbol_table::context_id context);
+			symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
 
 private:
 
   // The name of this function handle.
   std::string nm;
 
@@ -105,32 +105,38 @@ public:
   bool has_magic_end (void) const { return false; }
 
   bool rvalue_ok (void) const { return true; }
 
   octave_value rvalue1 (int nargout = 1);
 
   octave_value_list rvalue (int nargout);
 
-  tree_parameter_list *parameter_list (void)
+  tree_parameter_list *parameter_list (void) const
   {
     return fcn ? fcn->parameter_list () : 0;
   }
 
-  tree_parameter_list *return_list (void)
+  tree_parameter_list *return_list (void) const
   {
     return fcn ? fcn->return_list () : 0;
   }
 
-  tree_statement_list *body (void) { return fcn ? fcn->body () : 0; }
+  tree_statement_list *body (void) const
+  {
+    return fcn ? fcn->body () : 0;
+  }
 
-  symbol_table::scope_id scope (void) { return fcn ? fcn->scope () : -1; }
+  symbol_table::scope_id scope (void) const
+  {
+    return fcn ? fcn->scope () : -1;
+  }
 
   tree_expression *dup (symbol_table::scope_id scope,
-			symbol_table::context_id context);
+			symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
 
 private:
 
   // The function.
   octave_user_function *fcn;
 
diff --git a/src/pt-id.cc b/src/pt-id.cc
--- a/src/pt-id.cc
+++ b/src/pt-id.cc
@@ -115,24 +115,24 @@ tree_identifier::rvalue1 (int nargout)
 octave_lvalue
 tree_identifier::lvalue (void)
 {
   return octave_lvalue (&(xsym().varref ()));
 }
 
 tree_identifier *
 tree_identifier::dup (symbol_table::scope_id sc,
-		      symbol_table::context_id /*context*/)
+		      symbol_table::context_id) const
 {
   // The new tree_identifier object contains a symbol_record
   // entry from the duplicated scope.
 
   // FIXME -- is this the best way?
   symbol_table::symbol_record new_sym
-    = symbol_table::find_symbol (xsym().name (), sc);
+    = symbol_table::find_symbol (name (), sc);
 
   tree_identifier *new_id
     = new tree_identifier (new_sym, line (), column ());
 
   new_id->copy_base (*this);
 
   return new_id;
 }
diff --git a/src/pt-id.h b/src/pt-id.h
--- a/src/pt-id.h
+++ b/src/pt-id.h
@@ -105,17 +105,17 @@ public:
 
   octave_value_list rvalue (int nargout);
 
   octave_lvalue lvalue (void);
 
   void eval_undefined_error (void);
 
   tree_identifier *dup (symbol_table::scope_id scope,
-			symbol_table::context_id context);
+			symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
 
 private:
 
   // The symbol record that this identifier references.
   symbol_table::symbol_record sym;
 
diff --git a/src/pt-idx.cc b/src/pt-idx.cc
--- a/src/pt-idx.cc
+++ b/src/pt-idx.cc
@@ -680,47 +680,47 @@ tree_index_expression::lvalue (void)
 %!test
 %! x = struct (zeros (0, 1), {"a", "b"});
 %! x(2).b = 1;
 %! assert (x(2).b == 1);
 */
 
 tree_index_expression *
 tree_index_expression::dup (symbol_table::scope_id scope,
-			    symbol_table::context_id context)
+			    symbol_table::context_id context) const
 {
   tree_index_expression *new_idx_expr
     = new tree_index_expression (line (), column ());
 
   new_idx_expr->expr = expr ? expr->dup (scope, context) : 0;
 
   std::list<tree_argument_list *> new_args;
 
-  for (std::list<tree_argument_list *>::iterator p = args.begin ();
+  for (std::list<tree_argument_list *>::const_iterator p = args.begin ();
        p != args.end ();
        p++)
     {
-      tree_argument_list *elt = *p;
+      const tree_argument_list *elt = *p;
 
       new_args.push_back (elt ? elt->dup (scope, context) : 0);
     }
 
   new_idx_expr->args = new_args;
   
   new_idx_expr->type = type;
 
   new_idx_expr->arg_nm = arg_nm;
 
   std::list<tree_expression *> new_dyn_field;
 
-  for (std::list<tree_expression *>::iterator p = dyn_field.begin ();
+  for (std::list<tree_expression *>::const_iterator p = dyn_field.begin ();
        p != dyn_field.end ();
        p++)
     {
-      tree_expression *elt = *p;
+      const tree_expression *elt = *p;
 
       new_dyn_field.push_back (elt ? elt->dup (scope, context) : 0);
     }
 
   new_idx_expr->dyn_field = new_dyn_field;
 
   new_idx_expr->copy_base (*this);
   
diff --git a/src/pt-idx.h b/src/pt-idx.h
--- a/src/pt-idx.h
+++ b/src/pt-idx.h
@@ -84,17 +84,17 @@ public:
 
   octave_value rvalue1 (int nargout = 1);
 
   octave_value_list rvalue (int nargout);
 
   octave_lvalue lvalue (void);
 
   tree_index_expression *dup (symbol_table::scope_id scope,
-			      symbol_table::context_id context);
+			      symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
 
 private:
 
   // The LHS of this index expression.
   tree_expression *expr;
 
diff --git a/src/pt-jump.cc b/src/pt-jump.cc
--- a/src/pt-jump.cc
+++ b/src/pt-jump.cc
@@ -35,17 +35,17 @@ class octave_value_list;
 
 // Break.
 
 // Nonzero means we're breaking out of a loop or function body.
 int tree_break_command::breaking = 0;
 
 tree_command *
 tree_break_command::dup (symbol_table::scope_id,
-			 symbol_table::context_id /*context*/)
+			 symbol_table::context_id) const
 {
   return new tree_break_command (line (), column ());
 }
 
 void
 tree_break_command::accept (tree_walker& tw)
 {
   tw.visit_break_command (*this);
@@ -53,17 +53,17 @@ tree_break_command::accept (tree_walker&
 
 // Continue.
 
 // Nonzero means we're jumping to the end of a loop.
 int tree_continue_command::continuing = 0;
 
 tree_command *
 tree_continue_command::dup (symbol_table::scope_id,
-			    symbol_table::context_id /*context*/)
+			    symbol_table::context_id) const
 {
   return new tree_continue_command (line (), column ());
 }
 
 void
 tree_continue_command::accept (tree_walker& tw)
 {
   tw.visit_continue_command (*this);
@@ -71,17 +71,17 @@ tree_continue_command::accept (tree_walk
 
 // Return.
 
 // Nonzero means we're returning from a function.
 int tree_return_command::returning = 0;
 
 tree_command *
 tree_return_command::dup (symbol_table::scope_id,
-			  symbol_table::context_id /*context*/)
+			  symbol_table::context_id) const
 {
   return new tree_return_command (line (), column ());
 }
 
 void
 tree_return_command::accept (tree_walker& tw)
 {
   tw.visit_return_command (*this);
diff --git a/src/pt-jump.h b/src/pt-jump.h
--- a/src/pt-jump.h
+++ b/src/pt-jump.h
@@ -36,17 +36,17 @@ tree_break_command : public tree_command
 public:
 
   tree_break_command (int l = -1, int c = -1)
     : tree_command (l, c) { }
 
   ~tree_break_command (void) { }
 
   tree_command *dup (symbol_table::scope_id scope,
-		     symbol_table::context_id context);
+		     symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
 
   static int breaking;
 
 private:
 
   // No copying!
@@ -64,17 +64,17 @@ tree_continue_command : public tree_comm
 public:
 
   tree_continue_command (int l = -1, int c = -1)
     : tree_command (l, c) { }
 
   ~tree_continue_command (void) { }
 
   tree_command *dup (symbol_table::scope_id scope,
-		     symbol_table::context_id context);
+		     symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
 
   static int continuing;
 
 private:
 
   // No copying!
@@ -92,17 +92,17 @@ tree_return_command : public tree_comman
 public:
 
   tree_return_command (int l = -1, int c = -1)
     : tree_command (l, c) { }
 
   ~tree_return_command (void) { }
 
   tree_command *dup (symbol_table::scope_id scope,
-		     symbol_table::context_id context);
+		     symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
 
   static int returning;
 
 private:
 
   // No copying!
diff --git a/src/pt-loop.cc b/src/pt-loop.cc
--- a/src/pt-loop.cc
+++ b/src/pt-loop.cc
@@ -49,17 +49,17 @@ tree_while_command::~tree_while_command 
   delete expr;
   delete list;
   delete lead_comm;
   delete trail_comm;
 }
 
 tree_command *
 tree_while_command::dup (symbol_table::scope_id scope,
-			 symbol_table::context_id context)
+			 symbol_table::context_id context) const
 {
   return new tree_while_command (expr ? expr->dup (scope, context) : 0,
 				 list ? list->dup (scope, context) : 0,
 				 lead_comm ? lead_comm->dup () : 0,
 				 trail_comm ? trail_comm->dup (): 0,
 				 line (), column ());
 }
 
@@ -68,17 +68,17 @@ tree_while_command::accept (tree_walker&
 {
   tw.visit_while_command (*this);
 }
 
 // Do-Until
 
 tree_command *
 tree_do_until_command::dup (symbol_table::scope_id scope,
-			    symbol_table::context_id context)
+			    symbol_table::context_id context) const
 {
   return new tree_do_until_command (expr ? expr->dup (scope, context) : 0,
 				    list ? list->dup (scope, context) : 0,
 				    lead_comm ? lead_comm->dup () : 0,
 				    trail_comm ? trail_comm->dup (): 0,
 				    line (), column ());
 }
 
@@ -95,17 +95,17 @@ tree_simple_for_command::~tree_simple_fo
   delete expr;
   delete list;
   delete lead_comm;
   delete trail_comm;
 }
 
 tree_command *
 tree_simple_for_command::dup (symbol_table::scope_id scope,
-			      symbol_table::context_id context)
+			      symbol_table::context_id context) const
 {
   return new tree_simple_for_command (lhs ? lhs->dup (scope, context) : 0,
 				      expr ? expr->dup (scope, context) : 0,
 				      list ? list->dup (scope, context) : 0,
 				      lead_comm ? lead_comm->dup () : 0,
 				      trail_comm ? trail_comm->dup () : 0,
 				      line (), column ());
 }
@@ -121,17 +121,17 @@ tree_complex_for_command::~tree_complex_
   delete expr;
   delete list;
   delete lead_comm;
   delete trail_comm;
 }
 
 tree_command *
 tree_complex_for_command::dup (symbol_table::scope_id scope,
-			       symbol_table::context_id context)
+			       symbol_table::context_id context) const
 {
   return new tree_complex_for_command (lhs ? lhs->dup (scope, context) : 0,
 				       expr ? expr->dup (scope, context) : 0,
 				       list ? list->dup (scope, context) : 0,
 				       lead_comm ? lead_comm->dup () : 0,
 				       trail_comm ? trail_comm->dup () : 0,
 				       line (), column ());
 }
diff --git a/src/pt-loop.h b/src/pt-loop.h
--- a/src/pt-loop.h
+++ b/src/pt-loop.h
@@ -68,17 +68,17 @@ public:
 
   tree_statement_list *body (void) { return list; }
 
   octave_comment_list *leading_comment (void) { return lead_comm; }
 
   octave_comment_list *trailing_comment (void) { return trail_comm; }
 
   tree_command *dup (symbol_table::scope_id scope,
-		     symbol_table::context_id context);
+		     symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
 
 protected:
 
   // Expression to test.
   tree_expression *expr;
 
@@ -120,17 +120,17 @@ public:
 			 octave_comment_list *lc = 0,
 			 octave_comment_list *tc = 0,
 			 int l = -1, int c = -1)
     : tree_while_command (e, lst, lc, tc, l, c) { }
 
   ~tree_do_until_command (void) { }
 
   tree_command *dup (symbol_table::scope_id scope,
-		     symbol_table::context_id context);
+		     symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
 
 private:
 
   // No copying!
 
   tree_do_until_command (const tree_do_until_command&);
@@ -165,17 +165,17 @@ public:
 
   tree_statement_list *body (void) { return list; }
 
   octave_comment_list *leading_comment (void) { return lead_comm; }
 
   octave_comment_list *trailing_comment (void) { return trail_comm; }
 
   tree_command *dup (symbol_table::scope_id scope,
-		     symbol_table::context_id context);
+		     symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
 
 private:
 
   // Expression to modify.
   tree_expression *lhs;
 
@@ -223,17 +223,17 @@ public:
 
   tree_statement_list *body (void) { return list; }
 
   octave_comment_list *leading_comment (void) { return lead_comm; }
 
   octave_comment_list *trailing_comment (void) { return trail_comm; }
 
   tree_command *dup (symbol_table::scope_id scope,
-		     symbol_table::context_id context);
+		     symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
 
 private:
 
   // Expression to modify.
   tree_argument_list *lhs;
 
diff --git a/src/pt-mat.cc b/src/pt-mat.cc
--- a/src/pt-mat.cc
+++ b/src/pt-mat.cc
@@ -1027,23 +1027,23 @@ tree_matrix::rvalue1 (int)
     }
 
 done:
   return retval;
 }
 
 tree_expression *
 tree_matrix::dup (symbol_table::scope_id scope,
-		  symbol_table::context_id context)
+		  symbol_table::context_id context) const
 {
   tree_matrix *new_matrix = new tree_matrix (0, line (), column ());
 
-  for (iterator p = begin (); p != end (); p++)
+  for (const_iterator p = begin (); p != end (); p++)
     {
-      tree_argument_list *elt = *p;
+      const tree_argument_list *elt = *p;
 
       new_matrix->append (elt ? elt->dup (scope, context) : 0);
     }
 
   new_matrix->copy_base (*this);
 
   return new_matrix;
 }
diff --git a/src/pt-mat.h b/src/pt-mat.h
--- a/src/pt-mat.h
+++ b/src/pt-mat.h
@@ -60,17 +60,17 @@ public:
 
   bool rvalue_ok (void) const { return true; }
 
   octave_value rvalue1 (int nargout = 1);
 
   octave_value_list rvalue (int nargout);
 
   tree_expression *dup (symbol_table::scope_id scope,
-			symbol_table::context_id context);
+			symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
 
 private:
 
   // No copying!
 
   tree_matrix (const tree_matrix&);
diff --git a/src/pt-misc.cc b/src/pt-misc.cc
--- a/src/pt-misc.cc
+++ b/src/pt-misc.cc
@@ -243,26 +243,26 @@ tree_parameter_list::is_defined (void)
 	}
     }
 
   return status;
 }
 
 tree_parameter_list *
 tree_parameter_list::dup (symbol_table::scope_id scope,
-			  symbol_table::context_id context)
+			  symbol_table::context_id context) const
 {
   tree_parameter_list *new_list = new tree_parameter_list ();
 
   if (takes_varargs ())
     new_list->mark_varargs ();
 
-  for (iterator p = begin (); p != end (); p++)
+  for (const_iterator p = begin (); p != end (); p++)
     {
-      tree_decl_elt *elt = *p;
+      const tree_decl_elt *elt = *p;
 
       new_list->append (elt->dup (scope, context));
     }
 
   return new_list;
 }
 
 void
@@ -280,23 +280,23 @@ tree_return_list::~tree_return_list (voi
       iterator p = begin ();
       delete *p;
       erase (p);
     }
 }
 
 tree_return_list *
 tree_return_list::dup (symbol_table::scope_id scope,
-		       symbol_table::context_id context)
+		       symbol_table::context_id context) const
 {
   tree_return_list *new_list = new tree_return_list ();
 
-  for (iterator p = begin (); p != end (); p++)
+  for (const_iterator p = begin (); p != end (); p++)
     {
-      tree_index_expression *elt = *p;
+      const tree_index_expression *elt = *p;
 
       new_list->append (elt->dup (scope, context));
     }
 
   return new_list;
 }
 
 void
diff --git a/src/pt-misc.h b/src/pt-misc.h
--- a/src/pt-misc.h
+++ b/src/pt-misc.h
@@ -77,17 +77,17 @@ public:
 
   void undefine (void);
 
   bool is_defined (void);
 
   octave_value_list convert_to_const_vector (const Cell& varargout);
 
   tree_parameter_list *dup (symbol_table::scope_id scope,
-			    symbol_table::context_id context);
+			    symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
 
 private:
 
   int marked_for_varargs;
 
   void mark_varargs (void) { marked_for_varargs = 1; }
@@ -111,17 +111,17 @@ public:
 
   tree_return_list (void) { }
 
   tree_return_list (tree_index_expression *t) { append (t); }
 
   ~tree_return_list (void);
 
   tree_return_list *dup (symbol_table::scope_id scope,
-			 symbol_table::context_id context);
+			 symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
 
 private:
 
   // No copying!
 
   tree_return_list (const tree_return_list&);
diff --git a/src/pt-select.cc b/src/pt-select.cc
--- a/src/pt-select.cc
+++ b/src/pt-select.cc
@@ -42,40 +42,40 @@ tree_if_clause::~tree_if_clause (void)
 {
   delete expr;
   delete list;
   delete lead_comm;
 }
 
 tree_if_clause *
 tree_if_clause::dup (symbol_table::scope_id scope,
-		     symbol_table::context_id context)
+		     symbol_table::context_id context) const
 {
   return new tree_if_clause (expr ? expr->dup (scope, context) : 0,
 			     list ? list->dup (scope, context) : 0,
 			     lead_comm ? lead_comm->dup () : 0);
 }
 
 void
 tree_if_clause::accept (tree_walker& tw)
 {
   tw.visit_if_clause (*this);
 }
 
 // List of if commands.
 
 tree_if_command_list *
 tree_if_command_list::dup (symbol_table::scope_id scope,
-			   symbol_table::context_id context)
+			   symbol_table::context_id context) const
 {
   tree_if_command_list *new_icl = new tree_if_command_list ();
 
-  for (iterator p = begin (); p != end (); p++)
+  for (const_iterator p = begin (); p != end (); p++)
     {
-      tree_if_clause *elt = *p;
+      const tree_if_clause *elt = *p;
 
       new_icl->append (elt ? elt->dup (scope, context) : 0);
     }
 
   return new_icl;
 }
 
 void
@@ -114,17 +114,17 @@ tree_if_command::delete_breakpoint (void
 
       if (elt)
 	elt->set_breakpoint ();
     }
 }
 
 tree_command *
 tree_if_command::dup (symbol_table::scope_id scope,
-		      symbol_table::context_id context)
+		      symbol_table::context_id context) const
 {
   return new tree_if_command (list ? list->dup (scope, context) : 0,
 			      lead_comm ? lead_comm->dup () : 0,
 			      trail_comm ? trail_comm->dup () : 0,
 			      line (), column ());
 }
 
 void
@@ -178,40 +178,40 @@ tree_switch_case::label_matches (const o
 	}
     }
 
   return false;
 }
 
 tree_switch_case *
 tree_switch_case::dup (symbol_table::scope_id scope,
-		       symbol_table::context_id context)
+		       symbol_table::context_id context) const
 {
   return new tree_switch_case (label ? label->dup (scope, context) : 0,
 			       list ? list->dup (scope, context) : 0,
 			       lead_comm ? lead_comm->dup () : 0);
 }
 
 void
 tree_switch_case::accept (tree_walker& tw)
 {
   tw.visit_switch_case (*this);
 }
 
 // List of switch cases.
 
 tree_switch_case_list *
 tree_switch_case_list::dup (symbol_table::scope_id scope,
-			    symbol_table::context_id context)
+			    symbol_table::context_id context) const
 {
   tree_switch_case_list *new_scl = new tree_switch_case_list ();
 
-  for (iterator p = begin (); p != end (); p++)
+  for (const_iterator p = begin (); p != end (); p++)
     {
-      tree_switch_case *elt = *p;
+      const tree_switch_case *elt = *p;
 
       new_scl->append (elt ? elt->dup (scope, context) : 0);
     }
   
   return new_scl;
 }
 
 void
@@ -251,17 +251,17 @@ tree_switch_command::delete_breakpoint (
 
       if (elt)
 	elt->set_breakpoint ();
     }
 }
 
 tree_command *
 tree_switch_command::dup (symbol_table::scope_id scope,
-			  symbol_table::context_id context)
+			  symbol_table::context_id context) const
 {
   return new tree_switch_command (expr ? expr->dup (scope, context) : 0,
 				  list ? list->dup (scope, context) : 0,
 				  lead_comm ? lead_comm->dup () : 0,
 				  trail_comm ? trail_comm->dup () : 0,
 				  line (), column ());
 }
 
diff --git a/src/pt-select.h b/src/pt-select.h
--- a/src/pt-select.h
+++ b/src/pt-select.h
@@ -59,17 +59,17 @@ public:
 
   tree_expression *condition (void) { return expr; }
 
   tree_statement_list *commands (void) { return list; }
 
   octave_comment_list *leading_comment (void) { return lead_comm; }
 
   tree_if_clause *dup (symbol_table::scope_id scope,
-		       symbol_table::context_id context);
+		       symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
 
 private:
 
   // The condition to test.
   tree_expression *expr;
 
@@ -101,17 +101,17 @@ public:
 	{
 	  iterator p = begin ();
 	  delete *p;
 	  erase (p);
 	}
     }
 
   tree_if_command_list *dup (symbol_table::scope_id scope,
-			     symbol_table::context_id context);
+			     symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
 
 private:
 
   // No copying!
 
   tree_if_command_list (const tree_if_command_list&);
@@ -139,17 +139,17 @@ public:
 
   tree_if_command_list *cmd_list (void) { return list; }
 
   octave_comment_list *leading_comment (void) { return lead_comm; }
 
   octave_comment_list *trailing_comment (void) { return trail_comm; }
 
   tree_command *dup (symbol_table::scope_id scope,
-		     symbol_table::context_id context);
+		     symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
 
 private:
 
   // List of if commands (if, elseif, elseif, ... else, endif)
   tree_if_command_list *list;
 
@@ -193,17 +193,17 @@ public:
 
   tree_expression *case_label (void) { return label; }
 
   tree_statement_list *commands (void) { return list; }
 
   octave_comment_list *leading_comment (void) { return lead_comm; }
 
   tree_switch_case *dup (symbol_table::scope_id scope,
-			 symbol_table::context_id context);
+			 symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
 
 private:
 
   // The case label.
   tree_expression *label;
 
@@ -235,17 +235,17 @@ public:
 	{
 	  iterator p = begin ();
 	  delete *p;
 	  erase (p);
 	}
     }
 
   tree_switch_case_list *dup (symbol_table::scope_id scope,
-			      symbol_table::context_id context);
+			      symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
 
 private:
 
   // No copying!
 
   tree_switch_case_list (const tree_switch_case_list&);
@@ -278,17 +278,17 @@ public:
 
   tree_switch_case_list *case_list (void) { return list; }
 
   octave_comment_list *leading_comment (void) { return lead_comm; }
 
   octave_comment_list *trailing_comment (void) { return trail_comm; }
 
   tree_command *dup (symbol_table::scope_id scope,
-		     symbol_table::context_id context);
+		     symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
 
 private:
 
   // Value on which to switch.
   tree_expression *expr;
 
diff --git a/src/pt-stmt.cc b/src/pt-stmt.cc
--- a/src/pt-stmt.cc
+++ b/src/pt-stmt.cc
@@ -128,17 +128,17 @@ tree_statement::is_end_of_fcn_or_script 
 	retval = no_op_cmd->is_end_of_fcn_or_script ();
     }
 
   return retval;
 }
 
 tree_statement *
 tree_statement::dup (symbol_table::scope_id scope,
-		     symbol_table::context_id context)
+		     symbol_table::context_id context) const
 {
   tree_statement *new_stmt = new tree_statement ();
 
   new_stmt->cmd = cmd ? cmd->dup (scope, context) : 0;
 
   new_stmt->expr = expr ? expr->dup (scope, context) : 0;
 
   new_stmt->comm = comm ? comm->dup () : 0;
@@ -189,25 +189,25 @@ tree_statement_list::list_breakpoints (v
   tree_breakpoint tbp (0, tree_breakpoint::list);
   accept (tbp);
 
   return tbp.get_list ();
 }
 
 tree_statement_list *
 tree_statement_list::dup (symbol_table::scope_id scope,
-			  symbol_table::context_id context)
+			  symbol_table::context_id context) const
 {
   tree_statement_list *new_list = new tree_statement_list ();
 
   new_list->function_body = function_body;
 
-  for (iterator p = begin (); p != end (); p++)
+  for (const_iterator p = begin (); p != end (); p++)
     {
-      tree_statement *elt = *p;
+      const tree_statement *elt = *p;
 
       new_list->append (elt ? elt->dup (scope, context) : 0);
     }
 
   return new_list;
 }
 
 void
diff --git a/src/pt-stmt.h b/src/pt-stmt.h
--- a/src/pt-stmt.h
+++ b/src/pt-stmt.h
@@ -89,17 +89,17 @@ public:
   // checking.  If you use these, are you sure you knwo what you are
   // doing?
 
   void set_command (tree_command *c) { cmd = c; }
 
   void set_expression (tree_expression *e) { expr = e; }
 
   tree_statement *dup (symbol_table::scope_id scope,
-		       symbol_table::context_id context);
+		       symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
 
 private:
 
   // Only one of cmd or expr can be valid at once.
 
   // Command to execute.
@@ -156,17 +156,17 @@ public:
 
   int set_breakpoint (int line);
 
   void delete_breakpoint (int line);
 
   octave_value_list list_breakpoints (void);
 
   tree_statement_list *dup (symbol_table::scope_id scope,
-			    symbol_table::context_id context);
+			    symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
 
 private:
 
   // Does this list of statements make up the body of a function?
   bool function_body;
 
diff --git a/src/pt-unop.cc b/src/pt-unop.cc
--- a/src/pt-unop.cc
+++ b/src/pt-unop.cc
@@ -97,17 +97,17 @@ tree_prefix_expression::rvalue1 (int)
 	}
     }
 
   return retval;
 }
 
 tree_expression *
 tree_prefix_expression::dup (symbol_table::scope_id scope,
-			     symbol_table::context_id context)
+			     symbol_table::context_id context) const
 {
   tree_prefix_expression *new_pe
     = new tree_prefix_expression (op ? op->dup (scope, context) : 0,
 				  line (), column (), etype);
 
   new_pe->copy_base (*this);
 
   return new_pe;
@@ -175,17 +175,17 @@ tree_postfix_expression::rvalue1 (int)
 	}
     }
 
   return retval;
 }
 
 tree_expression *
 tree_postfix_expression::dup (symbol_table::scope_id scope,
-			      symbol_table::context_id context)
+			      symbol_table::context_id context) const
 {
   tree_postfix_expression *new_pe
     = new tree_postfix_expression (op ? op->dup (scope, context) : 0,
 				   line (), column (), etype);
 
   new_pe->copy_base (*this);
 
   return new_pe;
diff --git a/src/pt-unop.h b/src/pt-unop.h
--- a/src/pt-unop.h
+++ b/src/pt-unop.h
@@ -100,17 +100,17 @@ public:
 
   bool rvalue_ok (void) const { return true; }
 
   octave_value rvalue1 (int nargout = 1);
 
   octave_value_list rvalue (int nargout);
 
   tree_expression *dup (symbol_table::scope_id scope,
-			symbol_table::context_id context);
+			symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
 
 private:
 
   // No copying!
 
   tree_prefix_expression (const tree_prefix_expression&);
@@ -137,17 +137,17 @@ public:
 
   bool rvalue_ok (void) const { return true; }
 
   octave_value rvalue1 (int nargout = 1);
 
   octave_value_list rvalue (int nargout);
 
   tree_expression *dup (symbol_table::scope_id scope,
-			symbol_table::context_id context);
+			symbol_table::context_id context) const;
 
   void accept (tree_walker& tw);
 
 private:
 
   // No copying!
 
   tree_postfix_expression (const tree_postfix_expression&);
