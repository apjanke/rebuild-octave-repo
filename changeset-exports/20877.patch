# HG changeset patch
# User Rik <rik@octave.org>
# Date 1449948107 28800
#      Sat Dec 12 11:21:47 2015 -0800
# Node ID 7810a10772e0fc1718f82e8523c98951f8722ab0
# Parent  ec8c8977b0bed6cd9a35da4bc7754bb7af22e83c
2015 Code Sprint: time.cc: use ovl ().

diff --git a/libinterp/corefcn/time.cc b/libinterp/corefcn/time.cc
--- a/libinterp/corefcn/time.cc
+++ b/libinterp/corefcn/time.cc
@@ -474,31 +474,26 @@ Convert the string @var{str} to the time
 the control of the format string @var{fmt}.\n\
 \n\
 If @var{fmt} fails to match, @var{nchars} is 0; otherwise, it is set to the\n\
 position of last matched character plus 1. Always check for this unless\n\
 you're absolutely sure the date string will be parsed correctly.\n\
 @seealso{strftime, localtime, gmtime, mktime, time, now, date, clock, datenum, datestr, datevec, calendar, weekday}\n\
 @end deftypefn")
 {
-  octave_value_list retval;
-
   if (args.length () != 2)
     print_usage ();
 
   std::string str = args(0).xstring_value ("strptime: argument STR must be a string");
 
   std::string fmt = args(1).xstring_value ("strptime: FMT must be a string");
 
   octave_strptime t (str, fmt);
 
-  retval(1) = t.characters_converted ();
-  retval(0) = octave_value (mk_tm_map (t));
-
-  return retval;
+  return ovl (octave_value (mk_tm_map (t), t.characters_converted ()));
 }
 
 /*
 %!test
 %! fmt = "%Y-%m-%d %H:%M:%S";
 %! s = strftime (fmt, localtime (time ()));
 %! ts = strptime  (s, fmt);
 %! assert (isstruct (ts));
