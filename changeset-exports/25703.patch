# HG changeset patch
# User Torsten <mttl@mailbox.org>
# Date 1532894697 -7200
#      Sun Jul 29 22:04:57 2018 +0200
# Node ID 7b4e99fbe9d4b06ae5e7485d633c83104c9a15de
# Parent  bd30c6f8cfb704a2a3a4fffb305b1b154d4e9be5
include builtin functions without interpreter argument being into octave_cmd

* main-window.cc (set_current_working_directory): use new class
  octave_cmd_builtin instead of a separate callback function;
  (change_directory_callback)_: remove obsolete callback

* main-window.h: remove obsolete callback change_directory_callback

* octave-cmd.cc (octave_cmd_builtin::execute) Distinguish builtin function
  with and without interpreter argument;

* octave-cmd.h (octave_cmd_builtin): two separate constructors for builtin
  function with and without interpreter argument; two class variables for
  the different cases

diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -881,18 +881,21 @@ namespace octave
   {
     // Change to dir if it is an existing directory.
 
     QString xdir = (dir.isEmpty () ? "." : dir);
 
     QFileInfo fileInfo (xdir);
 
     if (fileInfo.exists () && fileInfo.isDir ())
-      octave_link::post_event (this, &main_window::change_directory_callback,
-                               xdir.toStdString ());
+      {
+        octave_cmd_builtin *cmd
+                = new octave_cmd_builtin (&Fcd, ovl (xdir.toStdString ()));
+        m_cmd_queue.add_cmd (cmd);
+      }
   }
 
   void main_window::change_directory_up (void)
   {
     set_current_working_directory ("..");
   }
 
   // Slot that is called if return is pressed in the line edit of the
@@ -2686,23 +2689,16 @@ namespace octave
 
     interpreter& interp
       = __get_interpreter__ ("main_window::new_figure_callback");
 
     Fbuiltin (interp, ovl ("figure"));
     Fdrawnow ();
   }
 
-  void main_window::change_directory_callback (const std::string& directory)
-  {
-    // INTERPRETER THREAD
-
-    Fcd (ovl (directory));
-  }
-
   void main_window::configure_shortcuts (void)
   {
     // file menu
     shortcut_manager::set_shortcut (m_open_action, "main_file:open_file");
     shortcut_manager::set_shortcut (m_new_script_action, "main_file:new_file");
     shortcut_manager::set_shortcut (m_new_function_action,
                                     "main_file:new_function");
     shortcut_manager::set_shortcut (m_new_function_action, "main_file:new_figure");
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -344,18 +344,16 @@ namespace octave
     void clear_history_callback (void);
 
     void refresh_workspace_callback (void);
 
     bool focus_console_after_command (void);
 
     void new_figure_callback (void);
 
-    void change_directory_callback (const std::string& directory);
-
     void configure_shortcuts (void);
 
     QList<octave_dock_widget *> dock_widget_list (void);
 
     gui_application *m_app_context;
 
     octave_interpreter *m_interpreter;
 
diff --git a/libgui/src/octave-cmd.cc b/libgui/src/octave-cmd.cc
--- a/libgui/src/octave-cmd.cc
+++ b/libgui/src/octave-cmd.cc
@@ -72,17 +72,20 @@ namespace octave
     command_editor::set_initial_input (pending_input);
     command_editor::redisplay ();
 
     command_editor::accept_line ();
   }
 
   void octave_cmd_builtin::execute (interpreter& interp)
   {
-    m_callback_f (interp, m_argin, m_nargin);
+    if (m_callback_fi)
+      m_callback_fi (interp, m_argin, m_nargin);
+    else if (m_callback_f)
+      m_callback_f (m_argin, m_nargin);
   }
 
   void octave_cmd_debug::execute (interpreter& interp)
   {
     if (m_cmd == "step")
       {
         F__db_next_breakpoint_quiet__ (interp, ovl (m_suppress_dbg_location));
         Fdbstep (interp);
diff --git a/libgui/src/octave-cmd.h b/libgui/src/octave-cmd.h
--- a/libgui/src/octave-cmd.h
+++ b/libgui/src/octave-cmd.h
@@ -78,36 +78,44 @@ namespace octave
   class octave_cmd_builtin : public octave_cmd
   {
     public:
 
     enum cmd_upd {
       CMD_UPD_NO        = 0,
     };
 
-    octave_cmd_builtin (octave_value_list (*Ff)
-                         (octave::interpreter&, const octave_value_list&, int),
-                        octave_value_list argin = ovl (), int nargin = 0,
-                        cmd_upd update = CMD_UPD_NO,
-                        octave_qt_link *oct_qt_link = nullptr)
-      : octave_cmd ()
-    {
-      m_callback_f = Ff;
-      m_argin  = argin;
-      m_nargin = nargin;
-      m_update = update;  // later: some built in functions require updates
-      m_octave_qt_link = oct_qt_link; // octave_qt_link might be required
-    };
+    // C'tor for Fxxx requiring the interpreter
+    octave_cmd_builtin (
+          octave_value_list (*Ff) (octave::interpreter&,
+                                   const octave_value_list&, int),
+          octave_value_list argin = ovl (), int nargin = 0,
+          cmd_upd update = CMD_UPD_NO, octave_qt_link *oct_qt_link = nullptr)
+      : octave_cmd (), m_callback_fi (Ff), m_callback_f (nullptr),
+        m_argin (argin), m_nargin (nargin), m_update (update),
+        m_octave_qt_link (oct_qt_link)
+    { };
+
+    // C'tor for Fxxx not requiring the interpreter
+    octave_cmd_builtin (
+          octave_value_list (*Ff) (const octave_value_list&, int),
+          octave_value_list argin = ovl (), int nargin = 0,
+          cmd_upd update = CMD_UPD_NO, octave_qt_link *oct_qt_link = nullptr)
+      : octave_cmd (), m_callback_fi (nullptr), m_callback_f (Ff),
+        m_argin (argin), m_nargin (nargin), m_update (update),
+        m_octave_qt_link (oct_qt_link)
+    { };
 
     void execute (interpreter& interp);
 
   protected:
 
-    octave_value_list (*m_callback_f) (
-                        octave::interpreter&, const octave_value_list&, int);
+    octave_value_list (*m_callback_fi) (octave::interpreter&,
+                                        const octave_value_list&, int);
+    octave_value_list (*m_callback_f) (const octave_value_list&, int);
     octave_value_list m_argin;
     int m_nargin;
     cmd_upd m_update;
     octave_qt_link *m_octave_qt_link;
   };
 
   class octave_cmd_debug : public octave_cmd_exec
   {
