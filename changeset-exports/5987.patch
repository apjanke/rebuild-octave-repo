# HG changeset patch
# User dbateman
# Date 1158096327 0
#      Tue Sep 12 21:25:27 2006 +0000
# Node ID f1375e3f3b97b22472f296edfd7ff3264e346340
# Parent  14078139f94114bec9993fd7963f3039a315bd93
[project @ 2006-09-12 21:25:27 by dbateman]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,16 @@
+2006-08-30  David Bateman <dbateman@free.fr>
+
+	* pkg/pkg.m (install): Disallow bundles of packages. More verbose
+	error message for archive name not matching package name.
+	(installed_packages): Size header of printed results to
+	arguments. Sort the list of installed packages before printing
+	them.
+
 2006-09-11  Paul Kienzle  <pkienzle@users.sf.net>
 
 	* signal/freqz.m: Update tests.
 
 2006-09-11  Ken Kouno  <kouno@mk.ecei.tohoku.ac.jp>
 
 	* signal/freqz.m: Corretly postpad arrays.
 	Don't call fliplr on a column vector.
@@ -17,17 +25,17 @@ 2006-09-05  Alexander Barth  <abarth93@u
 
 2006-09-05  Rafael Laboissiere  <rafael@debian.org>
 
 	* miscellaneous/doc.m: Swap order of --file and --directory
 	options for info program invocation.
 
 2006-08-30  David Bateman <dbateman@free.fr>
 
-	* pkg/pkg.m create_pkgadddel): Resolve variable name-clash from
+	* pkg/pkg.m (create_pkgadddel): Resolve variable name-clash from
 	previous change.
 
 2006-08-26  David Bateman <dbateman@free.fr>
 
 	* pkg/pkg.m (install, uninstall, installed_packages): Allow for
 	absence of trailing "/" in OCTAVE_HOME.
 
 2006-08-25  Alexander Barth  <abarth@marine.usf.edu>
diff --git a/scripts/pkg/pkg.m b/scripts/pkg/pkg.m
--- a/scripts/pkg/pkg.m
+++ b/scripts/pkg/pkg.m
@@ -152,33 +152,38 @@ function install(files, handle_deps)
             ## Uncompress the package
             untar(tgz, tmpdir);
 
             ## Get the name of the directories produced by tar
             [dirlist, err, msg] = readdir(tmpdir);
             if (err)
                 error("Couldn't read directory produced by tar: %s\n", msg);
             endif
+
+	    if (length(dirlist) > 3)
+	      error("Bundles of packages are not allowed")
+	    endif
             
             for k = 3:length(dirlist) # the two first entries of dirlist are "." and ".."
                 packdir = [tmpdir "/" dirlist{k} "/"];
                 packdirs{end+1} = packdir;
 
                 ## Make sure the package contains necessary files
                 verify_directory(packdir);
 
                 ## Read the DESCRIPTION file
                 filename = [packdir "DESCRIPTION"];
                 desc = get_description(filename);
 
 		## Verify that package name corresponds with filename
 		[dummy, nm] = fileparts(tgz); 
 		if ((length(nm) >= length(desc.name)) &&
 		    ! strcmp(desc.name,nm(1:length(desc.name))))
-		  error("Package name doesn't correspond to its filename");
+		  error(["Package name '",desc.name,"' doesn't correspond",
+			 "to its filename '",nm,"'"]);
 		endif
 
                 ## Set default installation directory
                 desc.dir = [prefix "/" desc.name "-" desc.version];
             
                 ## Save desc
                 descriptions{end+1} = desc;
 
@@ -987,42 +992,47 @@ function [out1, out2] = installed_packag
     
     ## We shouldn't return something, so we'll print something
     num_packages = length(installed_packages);
     if (num_packages == 0)
         printf("No packages installed.\n");
         return;
     endif
     
-    ## Print a header
+    ## Compute the maximal lengths of name, version, and dir
     h1 = "Package Name";
     h2 = "Version";
     h3 = "Installation directory";
+    max_name_length = length(h1); 
+    max_version_length = length(h2);
+    names = cell(num_packages,1); 
+    for i = 1:num_packages
+        max_name_length    = max(max_name_length, 
+                                 length(installed_packages{i}.name));
+        max_version_length = max(max_version_length,
+                                 length(installed_packages{i}.version));
+	names{i} = installed_packages{i}.name;
+    endfor
+    h1 = postpad (h1, max_name_length,' ');
+    h2 = postpad (h2, max_version_length, ' ');;
+    
+    ## Print a header
     header = sprintf("%s | %s | %s\n", h1, h2, h3);
     printf(header);
     tmp = sprintf(repmat("-", 1, length(header)-1));
     tmp(length(h1)+2) = "+"; tmp(length(h1)+length(h2)+5) = "+";
     printf("%s\n", tmp);
     
-    ## Compute the maximal lengths of name, version, and dir
-    max_name_length = length(h1); 
-    max_version_length = length(h2);
-    for i = 1:num_packages
-        max_name_length    = max(max_name_length, 
-                                 length(installed_packages{i}.name));
-        max_version_length = max(max_version_length,
-                                 length(installed_packages{i}.version));
-    endfor
-    
     ## Print the packages
     format = sprintf("%%%ds | %%%ds | %%s\n", max_name_length, max_version_length);
+    [dummy, idx] = sort(names);
     for i = 1:num_packages
-        cur_name    = installed_packages{i}.name;
-        cur_version = installed_packages{i}.version;
-        cur_dir     = installed_packages{i}.dir;
+        cur_name    = installed_packages{idx(i)}.name;
+        cur_version = installed_packages{idx(i)}.version;
+        cur_dir     = installed_packages{idx(i)}.dir;
         printf(format, cur_name, cur_version, cur_dir);
     endfor
 endfunction
 
 function load_packages(files, handle_deps)
     installed_packages = installed_packages();
     num_packages = length(installed_packages);
     
