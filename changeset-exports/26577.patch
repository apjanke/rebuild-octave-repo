# HG changeset patch
# User Markus MÃ¼tzel <markus.muetzel@gmx.de>
# Date 1547909999 -3600
#      Sat Jan 19 15:59:59 2019 +0100
# Branch stable
# Node ID ae1542fb58baf94f207af525437dbeccec5c0b94
# Parent  49eae759a3e2bdee40f222a9a7e1829a5b489eee
documentation: Avoid some overfull lines in the PDF manual.

* plot.txi, cellfun.cc (Fnum2cell, Fmat2cell), circshift.m, inputdlg.m,
  questdlg.m, uicontextmenu.m, uicontrol.m, uipanel.m, uitable.m, pkg.m,
  erase.m, strsplit.m: Break some long lines in examples.

* warning_ids.m: Insert sentence to get better line break.

diff --git a/doc/interpreter/plot.txi b/doc/interpreter/plot.txi
--- a/doc/interpreter/plot.txi
+++ b/doc/interpreter/plot.txi
@@ -1064,18 +1064,19 @@ A complete example showing the capabilit
 @example
 @group
 x = 0:0.01:3;
 hf = figure ();
 plot (x, erf (x));
 hold on;
 plot (x, x, "r");
 axis ([0, 3, 0, 1]);
-text (0.65, 0.6175, ['$\displaystyle\leftarrow x = @{2 \over \sqrt@{\pi@}@}'...
-                     '\int_@{0@}^@{x@} e^@{-t^2@} dt = 0.6175$'],
+text (0.65, 0.6175, ...
+      ['$\displaystyle\leftarrow x = @{2 \over \sqrt@{\pi@}@}'...
+       '\int_@{0@}^@{x@} e^@{-t^2@} dt = 0.6175$'],
       "interpreter", "latex");
 xlabel ("x");
 ylabel ("erf (x)");
 title ("erf (x) with text annotation");
 print (hf, "plot15_7.pdf", "-dpdflatexstandalone");
 system ("pdflatex plot15_7");
 open plot15_7.pdf
 @end group
diff --git a/libinterp/corefcn/cellfun.cc b/libinterp/corefcn/cellfun.cc
--- a/libinterp/corefcn/cellfun.cc
+++ b/libinterp/corefcn/cellfun.cc
@@ -1803,17 +1803,18 @@ num2cell (x, 1)
 num2cell (x, 2)
    @result{}
       @{
         [1,1] =
            1   2
         [2,1] =
            3   4
       @}
-## all rows and cols appear in each element of C (hence, only 1 output)
+## all rows and cols appear in each element of C
+## (hence, only 1 output)
 num2cell (x, [1, 2])
    @result{}
       @{
         [1,1] =
            1   2
            3   4
       @}
 @end example
@@ -2131,18 +2132,20 @@ Examples
 x = reshape (1:12, [3, 4])'
 @result{}
     1    2    3
     4    5    6
     7    8    9
    10   11   12
 
 @group
-## The 4 rows (dim1) are divided in to two cell elements with 2 rows each.
-## The 3 cols (dim2) are divided in to three cell elements with 1 col each.
+## The 4 rows (dim1) are divided in to two cell elements
+## with 2 rows each.
+## The 3 cols (dim2) are divided in to three cell elements
+## with 1 col each.
 mat2cell (x, [2,2], [1,1,1])
 @result{}
 @{
   [1,1] =
 
      1
      4
 
@@ -2167,17 +2170,18 @@ mat2cell (x, [2,2], [1,1,1])
 
   [2,3] =
       9
      12
 @}
 @end group
 
 @group
-## The 4 rows (dim1) are divided in to two cell elements with a 3/1 split.
+## The 4 rows (dim1) are divided in to two cell elements
+## with a 3/1 split.
 ## All columns appear in each output element.
 mat2cell (x, [3,1])
 @result{}
 @{
   [1,1] =
 
      1   2   3
      4   5   6
diff --git a/scripts/general/circshift.m b/scripts/general/circshift.m
--- a/scripts/general/circshift.m
+++ b/scripts/general/circshift.m
@@ -32,29 +32,33 @@
 ## In this case @var{n} must be a scalar as well.
 ##
 ## Examples:
 ##
 ## @example
 ## x = [1, 2, 3;
 ##      4, 5, 6;
 ##      7, 8, 9];
-## circshift (x, 1)      # positive shift on rows (1st non-singular dim)
+## ## positive shift on rows (1st non-singular dim)
+## circshift (x, 1)
 ##  @result{}  7, 8, 9
 ##      1, 2, 3
 ##      4, 5, 6
-## circshift (x, -2)     # negative shift on rows (1st non-singular dim)
+## ## negative shift on rows (1st non-singular dim)
+## circshift (x, -2)
 ##  @result{}  7, 8, 9
 ##      1, 2, 3
 ##      4, 5, 6
-## circshift (x, [0,1])  # no shift of rows, shift columns by 1 (2nd dimension)
+## ## no shift of rows, shift columns by 1 (2nd dimension)
+## circshift (x, [0,1])
 ##  @result{}  3, 1, 2
 ##      6, 4, 5
 ##      9, 7, 8
-## circshift (x, 1, 2)   # shift columns (2nd dimension)
+## ## shift columns (2nd dimension)
+## circshift (x, 1, 2)
 ##  @result{}  3, 1, 2
 ##      6, 4, 5
 ##      9, 7, 8
 ## @end example
 ## @seealso{permute, ipermute, shiftdim}
 ## @end deftypefn
 
 function y = circshift (x, n, dim)
diff --git a/scripts/gui/inputdlg.m b/scripts/gui/inputdlg.m
--- a/scripts/gui/inputdlg.m
+++ b/scripts/gui/inputdlg.m
@@ -62,17 +62,18 @@
 ##
 ## Example:
 ##
 ## @example
 ## @group
 ## prompt = @{"Width", "Height", "Depth"@};
 ## defaults = @{"1.10", "2.20", "3.30"@};
 ## rowscols = [1,10; 2,20; 3,30];
-## dims = inputdlg (prompt, "Enter Box Dimensions", rowscols, defaults);
+## dims = inputdlg (prompt, "Enter Box Dimensions", ...
+##                  rowscols, defaults);
 ## @end group
 ## @end example
 ##
 ## @seealso{errordlg, helpdlg, listdlg, msgbox, questdlg, warndlg}
 ## @end deftypefn
 
 function cstr = inputdlg (prompt, varargin)
 
diff --git a/scripts/gui/questdlg.m b/scripts/gui/questdlg.m
--- a/scripts/gui/questdlg.m
+++ b/scripts/gui/questdlg.m
@@ -42,17 +42,18 @@
 ##
 ## If only two button captions, @var{btn1} and @var{btn2}, are specified the
 ## dialog will have only these two buttons.
 ##
 ## Examples:
 ##
 ## @example
 ## @group
-## btn = questdlg ("Close Octave?", "Some fancy title", "Yes", "No", "No");
+## btn = questdlg ("Close Octave?", "Some fancy title", ...
+##                 "Yes", "No", "No");
 ## if (strcmp (btn, "Yes"))
 ##   exit ();
 ## endif
 ## @end group
 ## @end example
 ##
 ## @seealso{errordlg, helpdlg, inputdlg, listdlg, msgbox, warndlg}
 ## @end deftypefn
diff --git a/scripts/gui/uicontextmenu.m b/scripts/gui/uicontextmenu.m
--- a/scripts/gui/uicontextmenu.m
+++ b/scripts/gui/uicontextmenu.m
@@ -31,25 +31,27 @@
 ## created uicontextmenu object.
 ##
 ## Uicontextmenu properties are documented at @ref{Uicontextmenu Properties}.
 ##
 ## Examples:
 ##
 ## @example
 ## @group
-## % create figure and uicontextmenu
-## f = figure;
+## ## create figure and uicontextmenu
+## f = figure ();
 ## c = uicontextmenu (f);
 ##
-## % create menus in the context menu
-## m1 = uimenu ("parent",c,"label","Menu item 1","callback","disp('menu item 1')");
-## m2 = uimenu ("parent",c,"label","Menu item 2","callback","disp('menu item 2')");
+## ## create menus in the context menu
+## m1 = uimenu ("parent", c, "label", "Menu item 1", ...
+##              "callback", "disp('menu item 1')");
+## m2 = uimenu ("parent", c, "label", "Menu item 2", ...
+##              "callback", "disp('menu item 2')");
 ##
-## % set the context menu for the figure
+## ## set the context menu for the figure
 ## set (f, "uicontextmenu", c);
 ## @end group
 ## @end example
 ## @seealso{figure, uimenu}
 ## @end deftypefn
 
 ## Author: goffioul
 
diff --git a/scripts/gui/uicontrol.m b/scripts/gui/uicontrol.m
--- a/scripts/gui/uicontrol.m
+++ b/scripts/gui/uicontrol.m
@@ -81,17 +81,18 @@
 ##
 ## Examples:
 ##
 ## @example
 ## @group
 ## ## Create figure and panel on it
 ## f = figure;
 ## ## Create a button (default style)
-## b1 = uicontrol (f, "string", "A Button", "position", [10 10 150 40]);
+## b1 = uicontrol (f, "string", "A Button", ...
+##                    "position", [10 10 150 40]);
 ## ## Create an edit control
 ## e1 = uicontrol (f, "style", "edit", "string", "editable text", ...
 ##                    "position", [10 60 300 40]);
 ## ## Create a checkbox
 ## c1 = uicontrol (f, "style", "checkbox", "string", "a checkbox", ...
 ##                    "position", [10 120 150 40]);
 ## @end group
 ## @end example
diff --git a/scripts/gui/uipanel.m b/scripts/gui/uipanel.m
--- a/scripts/gui/uipanel.m
+++ b/scripts/gui/uipanel.m
@@ -13,17 +13,17 @@
 ## GNU General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <https://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {} {} uipanel (@var{property}, @var{value}, @dots{})
-## @deftypefnx {} {} uipanel (@var{parent}, "@var{property}, @var{value}, @dots{})
+## @deftypefnx {} {} uipanel (@var{parent}, @var{property}, @var{value}, @dots{})
 ## @deftypefnx {} {@var{hui} =} uipanel (@dots{})
 ##
 ## Create a uipanel object.
 ##
 ## uipanels are used as containers to group other uicontrol objects.
 ##
 ## If @var{parent} is omitted then a uipanel for the current figure is
 ## created.  If no figure is available, a new figure is created first.
@@ -37,23 +37,25 @@
 ##
 ## The optional return value @var{hui} is a graphics handle to the created
 ## uipanel object.
 ##
 ## Examples:
 ##
 ## @example
 ## @group
-## % create figure and panel on it
+## ## create figure and panel on it
 ## f = figure;
 ## p = uipanel ("title", "Panel Title", "position", [.25 .25 .5 .5]);
 ##
-## % add two buttons to the panel
-## b1 = uicontrol ("parent", p, "string", "A Button", "position",[18 10 150 36]);
-## b2 = uicontrol ("parent", p, "string", "Another Button", "position",[18 60 150 36]);
+## ## add two buttons to the panel
+## b1 = uicontrol ("parent", p, "string", "A Button", ...
+##                 "position", [18 10 150 36]);
+## b2 = uicontrol ("parent", p, "string", "Another Button", ...
+##                 "position",[18 60 150 36]);
 ##
 ## @end group
 ## @end example
 ## @seealso{figure, uicontrol}
 ## @end deftypefn
 
 ## Author: goffioul
 
diff --git a/scripts/gui/uitable.m b/scripts/gui/uitable.m
--- a/scripts/gui/uitable.m
+++ b/scripts/gui/uitable.m
@@ -77,19 +77,21 @@
 ##         "uint16" , uint16 (32768);
 ##         "int32"  , int32 (-2147483648);
 ##         "uint32" , uint32 (2147483648);
 ##         "int64"  , int64 (-2147483649);
 ##         "uint64" , uint64 (2147843649)@};
 ##
 ##   popup_options = @{"A", "B", "C", "D", "E"@};
 ##
-##   columnformat_options = @{ "[]", "char", "pop-up", "numeric", "short", "short e", ...
-##                   "short eng", "short g", "long", "long e", "long eng", ...
-##                   "long g", "bank", "+", "rat", "logical"@};
+##   columnformat_options = @{ "[]", "char", "pop-up", "numeric", ...
+##                            "short", "short e", "short eng", ...
+##                            "short g", "long", "long e", ...
+##                            "long eng", "long g", "bank", "+", ...
+##                            "rat", "logical"@};
 ##   columnformat_values = columnformat_options;
 ##   columnformat_values@{1@} = "";
 ##   columnformat_values@{3@} = popup_options;
 ##
 ##   default_data = repmat (d(:,2), 1, columns (columnformat_options));
 ##   b_add = uicontrol (f, "Position", [285 630 600 50], ...
 ##             "UserData", [rows(d), 1], ...
 ##             "Style", "pushbutton", ...
@@ -112,55 +114,66 @@
 ##       "RowName", [], ...
 ##       "ColumnName", @{"x", "y"@}, ...
 ##       "Data", [ 1, 1 ], ...
 ##       "ColumnEditable", true);
 ##
 ##   l_editable_table = uicontrol (f, "Position", [ 0 502 200 25 ], ...
 ##       "Style", "text", ...
 ##       "String", "Set Data Columns Editable:");
-##   t_editable_table = uitable (f, "Position", [ 0 434 1000 65 ], ...
-##                              "Data", repmat (false, 1, columns (default_data)), ...
-##                              "ColumnEditable", true);
+##   t_editable_table = ...
+##     uitable (f, "Position", [ 0 434 1000 65 ], ...
+##                 "Data", repmat (false, 1, columns (default_data)), ...
+##                 "ColumnEditable", true);
 ##
 ##   l_format_table = uicontrol (f, "Position", [ 0 406 200 25 ], ...
 ##       "Style", "text", ...
 ##       "String", "Set Data Column Format:");
-##   t_format_table = uitable (f, "Position", [ 0 338 1000 65 ], ...
-##       "Data", columnformat_options, ...
-##       "ColumnEditable", true, ...
-##       "ColumnFormat", arrayfun (@@(x) @{columnformat_options@}, 1:columns (columnformat_options)));
+##   t_format_table = ...
+##     uitable (f, "Position", [ 0 338 1000 65 ], ...
+##                 "Data", columnformat_options, ...
+##                 "ColumnEditable", true, ...
+##                 "ColumnFormat", arrayfun (@@(x) @{columnformat_options@}, ...
+##                                           1:columns (columnformat_options)));
 ##
-##   l_data_table = uicontrol (f, "Style", "text", "String", "Data:", "Position", [ 0 310 60 25 ]);
+##   l_data_table = uicontrol (f, "Style", "text", ...
+##                                "String", "Data:", ...
+##                                "Position", [ 0 310 60 25 ]);
 ##   t_data_table = uitable (f, "Position", [ 0 15 1000 290 ], ...
 ##       "Data", default_data, ...
 ##       "ColumnFormat", columnformat_values);
 ##
-##   set (t_format_table, "CellEditCallback", ...
-##       @@(x, y) update_column_format (y.NewData, y.Indices, t_data_table, popup_options));
+##   set (t_format_table, ...
+##        "CellEditCallback", ...
+##        @@(x, y) update_column_format (y.NewData, y.Indices, ...
+##                                       t_data_table, popup_options));
 ##   set (t_point_table, "CellEditCallback", ...
-##      @@(x, y) validate_point_table (x, y, t_data_table));
-##   set (t_editable_table, "CellEditCallback", @@(x,y) set (t_data_table, ...
-##           "ColumnEditable", get (t_editable_table, "Data")));
-##   set (b_add, "Callback", @@(x, y) ...
-##           update_data (b_add, t_point_table, t_type_table, t_data_table));
-##   set (t_data_table, "cellselectioncallback", @@(x, y) update_point_table (y.Indices, t_point_table));
+##        @@(x, y) validate_point_table (x, y, t_data_table));
+##   set (t_editable_table, "CellEditCallback", ...
+##        @@(x,y) set (t_data_table, ...
+##                     "ColumnEditable", get (t_editable_table, "Data")));
+##   set (b_add, ...
+##        "Callback", @@(x, y) update_data (b_add, t_point_table, ...
+##                                          t_type_table, t_data_table));
+##   set (t_data_table, "CellSelectionCallback", ...
+##        @@(x, y) update_point_table (y.Indices, t_point_table));
 ## endfunction
 ##
 ## function validate_point_table (h, dat, t_data_table)
 ##   if (! (dat.NewData > 0 && ...
 ##     dat.NewData < size (get (t_data_table, "Data"), dat.Indices(1, 1)) + 1))
 ##
 ##     d = get (h, "Data");
 ##     d(dat.Indices) = 1;
 ##     set (h, "Data", d);
 ##   endif
 ## endfunction
 ##
-## function update_column_format (format, indices, t_data_table, popup_options)
+## function update_column_format (format, indices, t_data_table, ...
+##                                popup_options)
 ##   cf = get (t_data_table, "ColumnFormat");
 ##   if (strcmp (format, "[]"))
 ##     format = "";
 ##   elseif (strcmp (format, "pop-up"))
 ##     format = popup_options;
 ##   endif
 ##   cf@{indices(1,2)@} = format;
 ##   set (t_data_table, "ColumnFormat", cf);
@@ -168,17 +181,18 @@
 ##
 ## function update_point_table (indices, t_point_table)
 ##   if (isempty (indices))
 ##     indices = [1, 1];
 ##   endif
 ##   set (t_point_table, "Data", indices(1,:));
 ## endfunction
 ##
-## function update_data (b_add, t_point_table, t_type_table, t_data_table)
+## function update_data (b_add, t_point_table, t_type_table, ...
+##                       t_data_table)
 ##   indices = get (b_add, "UserData");
 ##   if (isempty (indices))
 ##     indices = [1, 1];
 ##   endif
 ##   d = get (t_data_table, "Data");
 ##   t_type_table_data = get (t_type_table, "Data");
 ##   p = get (t_point_table, "Data");
 ##   d(p(1,2), p(1,1)) = t_type_table_data(indices(1,2));
diff --git a/scripts/help/warning_ids.m b/scripts/help/warning_ids.m
--- a/scripts/help/warning_ids.m
+++ b/scripts/help/warning_ids.m
@@ -242,16 +242,17 @@
 ##
 ## @item Octave:mixed-string-concat
 ## If the @code{Octave:mixed-string-concat} warning is enabled, print a
 ## warning when concatenating a mixture of double and single quoted strings.
 ## By default, the @code{Octave:mixed-string-concat} warning is disabled.
 ##
 ## @item  Octave:nearly-singular-matrix
 ## @itemx Octave:singular-matrix
+## These warnings are emitted if a (nearly) singular matrix is inverted.
 ## By default, the @code{Octave:nearly-singular-matrix} and
 ## @code{Octave:singular-matrix} warnings are enabled.
 ##
 ## @item Octave:neg-dim-as-zero
 ## If the @code{Octave:neg-dim-as-zero} warning is enabled, print a warning
 ## for expressions like
 ##
 ## @example
diff --git a/scripts/pkg/pkg.m b/scripts/pkg/pkg.m
--- a/scripts/pkg/pkg.m
+++ b/scripts/pkg/pkg.m
@@ -181,17 +181,18 @@
 ## pkg describe -verbose
 ## @end example
 ##
 ## @noindent
 ## will describe all installed packages and the functions they provide.
 ## Display can be limited to a set of packages:
 ##
 ## @example
-## pkg describe control signal # describe control and signal packages
+## ## describe control and signal packages
+## pkg describe control signal
 ## @end example
 ##
 ## If one output is requested a cell of structure containing the
 ## description and list of functions of each package is returned as
 ## output rather than printed on screen:
 ##
 ## @example
 ## desc = pkg ("describe", "secs1d", "image")
diff --git a/scripts/strings/erase.m b/scripts/strings/erase.m
--- a/scripts/strings/erase.m
+++ b/scripts/strings/erase.m
@@ -31,21 +31,23 @@
 ## erase ("Hello World!", " World")
 ##     @result{} "Hello!"
 ##
 ## ## cellstr, single pattern
 ## erase (@{"Hello", "World!"@}, "World")
 ##     @result{} @{"Hello", "!"@}
 ##
 ## ## string, multiple patterns
-## erase ("The Octave interpreter is fabulous", @{"interpreter ", "The "@})
+## erase ("The Octave interpreter is fabulous", ...
+##        @{"interpreter ", "The "@})
 ##     @result{} "Octave is fabulous"
 ##
 ## ## cellstr, multiple patterns
-## erase (@{"The ", "Octave interpreter ", "is fabulous"@}, @{"interpreter ", "The "@})
+## erase (@{"The ", "Octave interpreter ", "is fabulous"@}, ...
+##        @{"interpreter ", "The "@})
 ##     @result{} @{"", "Octave ", "is fabulous"@}
 ## @end group
 ## @end example
 ##
 ## Programming Note: @code{erase} deletes the first instance of a pattern in a
 ## string when there are overlapping occurrences.  For example:
 ##
 ## @example
diff --git a/scripts/strings/strsplit.m b/scripts/strings/strsplit.m
--- a/scripts/strings/strsplit.m
+++ b/scripts/strings/strsplit.m
@@ -82,25 +82,27 @@
 ##             [1,5] = c
 ##           @}
 ##
 ## @end example
 ##
 ## Examples with @nospell{regularexpression} delimiters:
 ##
 ## @smallexample
-## strsplit ("a foo b,bar c", ',|\s|foo|bar', "delimitertype", "regularexpression")
+## strsplit ("a foo b,bar c", ',|\s|foo|bar', ...
+##           "delimitertype", "regularexpression")
 ##       @result{}
 ##           @{
 ##             [1,1] = a
 ##             [1,2] = b
 ##             [1,3] = c
 ##           @}
 ##
-## strsplit ("a,,b, c", '[, ]', "collapsedelimiters", false, "delimitertype", "regularexpression")
+## strsplit ("a,,b, c", '[, ]', "collapsedelimiters", false, ...
+##           "delimitertype", "regularexpression")
 ##       @result{}
 ##           @{
 ##             [1,1] = a
 ##             [1,2] =
 ##             [1,3] = b
 ##             [1,4] =
 ##             [1,5] = c
 ##           @}
