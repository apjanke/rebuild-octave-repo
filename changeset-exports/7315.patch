# HG changeset patch
# User jwe
# Date 1197581736 0
#      Thu Dec 13 21:35:36 2007 +0000
# Node ID 3ceb12c499e9778a3527506565d6d68d9e005549
# Parent  8e5feea0545a3f27b69555752c9da2db777cb5bb
[project @ 2007-12-13 21:35:36 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,13 @@
+2007-12-13  John W. Eaton  <jwe@octave.org>
+
+	* octMakefile.in (octave-bug, octave-config, mkoctfile):
+	Also depend on $(top_srcdir)/src/version.h.
+
 2007-12-10  John W. Eaton  <jwe@octave.org>
 
 	* acx_blas.m4: Use -lsunperf, not -xlic_lib=sunperf.
 	From Jim Langston <Jim.Langston@Sun.COM>.
 
 2007-12-06  John W. Eaton  <jwe@octave.org>
 
 	* configure.in (*-*-darwin*): Only set CPICFLAG, CXXPICFLAG, and
diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,12 @@
+2007-12-13  John W. Eaton  <jwe@octave.org>
+
+	* Makefile.in (conf.texi): Also depend on $(top_srcdir)/src/version.h.
+
 2007-12-05  John W. Eaton  <jwe@octave.org>
 
 	* interpreter/geometryimages.m (image_as_txt): New function.
 	Use it to generate "figures" for Info format.
 	* interpreter/interpimages.m: Likewise.
 	* interpreter/sparseimages.m: Likewise.
 
 2007-12-04  John W. Eaton  <jwe@octave.org>
diff --git a/doc/Makefile.in b/doc/Makefile.in
--- a/doc/Makefile.in
+++ b/doc/Makefile.in
@@ -37,17 +37,17 @@ DISTFILES = $(addprefix $(srcdir)/, Make
 
 SUBDIRS = faq interpreter liboctave refcard
 
 DISTSUBDIRS = $(SUBDIRS)
 
 all: conf.texi $(SUBDIRS)
 .PHONY: all
 
-conf.texi: conf.texi.in $(TOPDIR)/Makeconf
+conf.texi: conf.texi.in $(TOPDIR)/Makeconf $(top_srcdir)/src/version.h
 	@$(do-subst-texinfo-vals)
 
 ../BUGS ../INSTALL.OCTAVE:
 	$(MAKE) -C interpreter ../$@
 .PHONY: ../BUGS ../INSTALL.OCTAVE
 
 $(SUBDIRS):
 	$(MAKE) -C $@ all
diff --git a/octMakefile.in b/octMakefile.in
--- a/octMakefile.in
+++ b/octMakefile.in
@@ -84,25 +84,25 @@ all: $(SHELL_SCRIPTS) $(filter-out libcr
 src: liboctave
 
 liboctave: libcruft
 
 $(SUBDIRS):
 	$(MAKE) -C $@ all
 .PHONY: $(SUBDIRS)
 
-octave-bug: octave-bug.in Makeconf octMakefile
+octave-bug: octave-bug.in Makeconf octMakefile $(top_srcdir)/src/version.h
 	@$(do-subst-config-vals)
 	chmod a+rx $@
 
-octave-config: octave-config.in Makeconf octMakefile
+octave-config: octave-config.in Makeconf octMakefile $(top_srcdir)/src/version.h
 	@$(do-subst-default-vals)
 	chmod a+rx $@
 
-mkoctfile: mkoctfile.in Makeconf octMakefile
+mkoctfile: mkoctfile.in Makeconf octMakefile $(top_srcdir)/src/version.h
 	@$(do-subst-config-vals)
 	chmod a+rx $@
 
 run-octave: run-octave.in Makeconf octMakefile
 	@$(do-subst-script-vals)
 	chmod a+rx "$@"
 
 check:
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,14 @@
+2007-12-13  John W. Eaton  <jwe@octave.org>
+
+	* image/imshow.m: Turn axis visibility off.
+	Don't scale true color images.
+	* image/image.m: Set axis layer property to "top".
+
 2007-12-12  John W. Eaton  <jwe@octave.org>
 
 	* image/loadimage.m: Avoid calling eval.  Avoid calling exist.
 
 	* plot/pie.m: Avoid calling "exist".
 
 	* linear-algebra/condest.m: Use nargin instead of size(varargin,2).	
 	Condense argument processing logic.  Allow 6 arguments.
diff --git a/scripts/image/image.m b/scripts/image/image.m
--- a/scripts/image/image.m
+++ b/scripts/image/image.m
@@ -65,16 +65,17 @@ function retval = image (varargin)
     img = varargin{3};
     firstnonnumeric = 4;
   endif
 
   oldax = gca ();
   unwind_protect
     axes (ax);
     h = __img__ (x, y, img, varargin {firstnonnumeric:end});
+    set (ax, "layer", "top");
   unwind_protect_cleanup
     axes (oldax);
   end_unwind_protect
 
   if (nargout > 0)
     retval = h;
   endif
 
diff --git a/scripts/image/imshow.m b/scripts/image/imshow.m
--- a/scripts/image/imshow.m
+++ b/scripts/image/imshow.m
@@ -144,29 +144,30 @@ function h = imshow (im, varargin)
   endif
 
   ## This is for compatibility.
   if (ismember (class (im), {"int8", "int16", "uint32", "int32", "single"}))
     im = double (im);
   endif
 
   ## Scale the image to the interval [0, 1] according to display_range.
-  if (! indexed || islogical (im))
+  if (! (true_color || indexed || islogical (im)))
     low = display_range(1);
     high = display_range(2);
     im = (im-low)/(high-low);
     im(im < 0) = 0;
     im(im > 1) = 1;
   endif
 
   if (true_color)
-    tmp = __img__ ([] , [], im);
+    tmp = __img__ ([], [], im);
   else
     tmp = image (round ((rows (colormap ()) - 1) * im));
   endif
+  set (gca (), "visible", "off");
 
   if (nargout > 0)
     h = tmp;
   endif
 
 endfunction
 
 %!error imshow ()                           # no arguments
