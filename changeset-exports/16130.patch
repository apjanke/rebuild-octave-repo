# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1361913312 18000
#      Tue Feb 26 16:15:12 2013 -0500
# Node ID 421dea028bbf8e45cd16974ac53a9b52d8d8baf3
# Parent  053b0364b5070abd6942abd5a36a3b21d26f5988
localize use of yyleng with lexical_feedback member function

* lex.h, lex.ll (lexical_feedback::yyleng): New function.
(lexical_feedback::handle_number, lexical_feedback::handle_identifier,
lexical_feedback::handle_meta_identifier,
lexical_feedback::handle_superclass_identifier): Use it.

diff --git a/libinterp/parse-tree/lex.h b/libinterp/parse-tree/lex.h
--- a/libinterp/parse-tree/lex.h
+++ b/libinterp/parse-tree/lex.h
@@ -207,16 +207,18 @@ public:
   void prep_for_script_file (void);
 
   void prep_for_function_file (void);
 
   int octave_read (char *buf, unsigned int max_size);
 
   char *flex_yytext (void);
 
+  int flex_yyleng (void);
+
   void do_comma_insert_check (void);
 
   int text_yyinput (void);
 
   void xunput (char c, char *buf);
 
   void xunput (char c);
 
diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -1480,16 +1480,22 @@ lexical_feedback::octave_read (char *buf
 }
 
 char *
 lexical_feedback::flex_yytext (void)
 {
   return yytext;
 }
 
+int
+lexical_feedback::flex_yyleng (void)
+{
+  return yyleng;
+}
+
 // GAG.
 //
 // If we're reading a matrix and the next character is '[', make sure
 // that we insert a comma ahead of it.
 
 void
 lexical_feedback::do_comma_insert_check (void)
 {
@@ -2503,17 +2509,17 @@ lexical_feedback::handle_number (void)
   quote_is_transpose = true;
   convert_spaces_to_comma = true;
   looking_for_object_index = false;
   at_beginning_of_statement = false;
 
   curr_lexer->push_token (new token (value, yytxt, input_line_number,
                                      current_input_column));
 
-  current_input_column += yyleng;
+  current_input_column += flex_yyleng ();
 
   do_comma_insert_check ();
 }
 
 // We have seen a backslash and need to find out if it should be
 // treated as a continuation character.  If so, this eats it, up to
 // and including the new line character.
 //
@@ -3235,17 +3241,17 @@ lexical_feedback::handle_superclass_iden
 
   curr_lexer->push_token
     (new token (meth.empty () ? 0 : &(symbol_table::insert (meth)),
                 cls.empty () ? 0 : &(symbol_table::insert (cls)),
                 pkg.empty () ? 0 : &(symbol_table::insert (pkg)),
                 input_line_number, current_input_column));
 
   convert_spaces_to_comma = true;
-  current_input_column += yyleng;
+  current_input_column += flex_yyleng ();
 
   return SUPERCLASSREF;
 }
 
 int
 lexical_feedback::handle_meta_identifier (void)
 {
   eat_continuation ();
@@ -3269,17 +3275,17 @@ lexical_feedback::handle_meta_identifier
     }
 
   curr_lexer->push_token
     (new token (cls.empty () ? 0 : &(symbol_table::insert (cls)),
                 pkg.empty () ? 0 : &(symbol_table::insert (pkg)),
                 input_line_number, current_input_column));
 
   convert_spaces_to_comma = true;
-  current_input_column += yyleng;
+  current_input_column += flex_yyleng ();
 
   return METAQUERY;
 }
 
 // Figure out exactly what kind of token to return when we have seen
 // an identifier.  Handles keywords.  Return -1 if the identifier
 // should be ignored.
 
@@ -3287,17 +3293,17 @@ int
 lexical_feedback::handle_identifier (void)
 {
   bool at_bos = at_beginning_of_statement;
 
   char *yytxt = flex_yytext ();
 
   std::string tok = strip_trailing_whitespace (yytxt);
 
-  int c = yytxt[yyleng-1];
+  int c = yytxt[flex_yyleng()-1];
 
   bool cont_is_spc = (eat_continuation () != lexical_feedback::NO_WHITESPACE);
 
   int spc_gobbled = (cont_is_spc || c == ' ' || c == '\t');
 
   // If we are expecting a structure element, avoid recognizing
   // keywords and other special names and return STRUCT_ELT, which is
   // a string that is also a valid identifier.  But first, we have to
@@ -3311,17 +3317,17 @@ lexical_feedback::handle_identifier (voi
 
       curr_lexer->push_token (new token (tok, input_line_number,
                                          current_input_column));
 
       quote_is_transpose = true;
       convert_spaces_to_comma = true;
       looking_for_object_index = true;
 
-      current_input_column += yyleng;
+      current_input_column += flex_yyleng ();
 
       return STRUCT_ELT;
     }
 
   at_beginning_of_statement = false;
 
   // The is_keyword_token may reset
   // at_beginning_of_statement.  For example, if it sees
@@ -3342,33 +3348,33 @@ lexical_feedback::handle_identifier (voi
 
           return LEXICAL_ERROR;
         }
       else
         {
           curr_lexer->push_token (new token (tok, input_line_number,
                                              current_input_column));
 
-          current_input_column += yyleng;
+          current_input_column += flex_yyleng ();
           quote_is_transpose = false;
           convert_spaces_to_comma = true;
           looking_for_object_index = true;
 
           return FCN_HANDLE;
         }
     }
 
   // If we have a regular keyword, return it.
   // Keywords can be followed by identifiers.
 
   if (kw_token)
     {
       if (kw_token >= 0)
         {
-          current_input_column += yyleng;
+          current_input_column += flex_yyleng ();
           quote_is_transpose = false;
           convert_spaces_to_comma = true;
           looking_for_object_index = false;
         }
 
       return kw_token;
     }
 
@@ -3437,17 +3443,17 @@ lexical_feedback::handle_identifier (voi
     {
       quote_is_transpose = true;
 
       do_comma_insert_check ();
 
       maybe_unput_comma (spc_gobbled);
     }
 
-  current_input_column += yyleng;
+  current_input_column += flex_yyleng ();
 
   if (tok != "__end__")
     looking_for_object_index = true;
 
   return NAME;
 }
 
 void
