# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1263986640 -3600
#      Wed Jan 20 12:24:00 2010 +0100
# Node ID fa01c1670b3ea4a5be802862280a38ebb19bc3ce
# Parent  1b883ce6670728232d59c67f4d8f49e82e2e44eb
make p-norms breakable

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,14 @@
+2010-01-20  Jaroslav Hajek  <highegg@gmail.com>
+
+	* oct-norm.cc (norm_accumulator_p::accum, norm_accumulator_mp::accum):
+	Call octave_quit here.
+	(higham_subp): Also here.
+
 2010-01-20  Jaroslav Hajek  <highegg@gmail.com>
 
 	* mx-op-defs.h (SND_MINMAX_FCN, NDS_MINMAX_FCN, NDND_MINMAX_FCN):
 	Simplify using mx_inlines machinery. 
 	* dNDArray (min, max): Simplify.
 	* fNDArray (min, max): Simplify.
 	* CNDArray (min, max): Simplify.
 	* fCNDArray (min, max): Simplify.
diff --git a/liboctave/oct-norm.cc b/liboctave/oct-norm.cc
--- a/liboctave/oct-norm.cc
+++ b/liboctave/oct-norm.cc
@@ -68,16 +68,17 @@ class norm_accumulator_p
   R p,scl,sum;
 public:
   norm_accumulator_p () {} // we need this one for Array
   norm_accumulator_p (R pp) : p(pp), scl(0), sum(1) {}
 
   template<class U> 
   void accum (U val)
     {
+      octave_quit ();
       R t = std::abs (val);
       if (scl == t) // we need this to handle Infs properly
         sum += 1;
       else if (scl < t)
         {
           sum *= std::pow (scl/t, p);
           sum += 1;
           scl = t;
@@ -95,16 +96,17 @@ class norm_accumulator_mp
   R p,scl,sum;
 public:
   norm_accumulator_mp () {} // we need this one for Array
   norm_accumulator_mp (R pp) : p(pp), scl(0), sum(1) {}
 
   template<class U> 
   void accum (U val)
     {
+      octave_quit ();
       R t = 1 / std::abs (val);
       if (scl == t)
         sum += 1;
       else if (scl < t)
         {
           sum *= std::pow (scl/t, p);
           sum += 1;
           scl = t;
@@ -319,16 +321,17 @@ DEFINE_DISPATCHER (row_norms, MSparse<T>
 template <class ColVectorT, class R>
 static void 
 higham_subp (const ColVectorT& y, const ColVectorT& col, 
              octave_idx_type nsamp, R p, R& lambda, R& mu)
 {
   R nrm = 0;
   for (octave_idx_type i = 0; i < nsamp; i++)
     {
+      octave_quit ();
       R fi = i*M_PI/nsamp, lambda1 = cos (fi), mu1 = sin (fi);
       R lmnr = std::pow (std::pow (std::abs (lambda1), p) + 
                          std::pow (std::abs (mu1), p), 1/p);
       lambda1 /= lmnr; mu1 /= lmnr;
       R nrm1 = vector_norm (lambda1 * y + mu1 * col, p);
       if (nrm1 > nrm)
         {
           lambda = lambda1;
@@ -349,32 +352,34 @@ higham_subp (const ColVectorT& y, const 
 {
   typedef std::complex<R> CR;
   R nrm = 0;
   lambda = 1.0;
   CR lamcu = lambda / std::abs (lambda);
   // Probe magnitudes
   for (octave_idx_type i = 0; i < nsamp; i++)
     {
+      octave_quit ();
       R fi = i*M_PI/nsamp, lambda1 = cos (fi), mu1 = sin (fi);
       R lmnr = std::pow (std::pow (std::abs (lambda1), p) + 
                          std::pow (std::abs (mu1), p), 1/p);
       lambda1 /= lmnr; mu1 /= lmnr;
       R nrm1 = vector_norm (lambda1 * lamcu * y + mu1 * col, p);
       if (nrm1 > nrm)
         {
           lambda = lambda1 * lamcu;
           mu = mu1;
           nrm = nrm1;
         }
     }
   R lama = std::abs (lambda);
   // Probe orientation
   for (octave_idx_type i = 0; i < nsamp; i++)
     {
+      octave_quit ();
       R fi = i*M_PI/nsamp;
       lamcu = CR (cos (fi), sin (fi));
       R nrm1 = vector_norm (lama * lamcu * y + mu * col, p);
       if (nrm1 > nrm)
         {
           lambda = lama * lamcu;
           nrm = nrm1;
         }
