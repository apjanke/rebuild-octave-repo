# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1552629155 0
#      Fri Mar 15 05:52:35 2019 +0000
# Node ID 9dd1d89738777cbb8400351aef03021c4b9f881e
# Parent  9cd4b045fe3d66a2c4e2f737d42ae0b66d987325
avoid some overloaded virtual warnings (bug #55741)

* ov-builtin.h, ov-classdef.h, ov-mex-fcn.h, ov-usr-fcn.h: Avoid
overloaded virtual method warnings for classes derived from
octave_function that partially overload the two virtual call methods
by adding using declarations.

diff --git a/libinterp/octave-value/ov-builtin.h b/libinterp/octave-value/ov-builtin.h
--- a/libinterp/octave-value/ov-builtin.h
+++ b/libinterp/octave-value/ov-builtin.h
@@ -88,16 +88,21 @@ public:
   ~octave_builtin (void) = default;
 
   std::string src_file_name (void) const { return file; }
 
   octave_function * function_value (bool = false) { return this; }
 
   bool is_builtin_function (void) const { return true; }
 
+  // We don't need to override both forms of the call method.  The using
+  // declaration will avoid warnings about partially-overloaded virtual
+  // functions.
+  using octave_function::call;
+
   octave_value_list
   call (octave::tree_evaluator& tw, int nargout = 0,
         const octave_value_list& args = octave_value_list ());
 
   octave::jit_type * to_jit (void) const;
 
   void stash_jit (octave::jit_type& type);
 
diff --git a/libinterp/octave-value/ov-classdef.h b/libinterp/octave-value/ov-classdef.h
--- a/libinterp/octave-value/ov-classdef.h
+++ b/libinterp/octave-value/ov-classdef.h
@@ -185,16 +185,21 @@ public:
   octave_value_list
   subsref (const std::string& type,
            const std::list<octave_value_list>& idx,
            int nargout)
   {
     return object.meta_subsref (type, idx, nargout);
   }
 
+  // We don't need to override both forms of the call method.  The using
+  // declaration will avoid warnings about partially-overloaded virtual
+  // functions.
+  using octave_function::call;
+
   octave_value_list call (octave::tree_evaluator&, int nargout,
                           const octave_value_list& args)
   {
     // Emulate ()-type meta subsref
 
     std::list<octave_value_list> idx (1, args);
     std::string type ("(");
 
@@ -226,16 +231,21 @@ public:
   octave_classdef_superclass_ref& operator = (const octave_classdef_superclass_ref&) = delete;
 
   ~octave_classdef_superclass_ref (void) = default;
 
   bool is_classdef_superclass_ref (void) const { return true; }
 
   octave_function * function_value (bool = false) { return this; }
 
+  // We don't need to override both forms of the call method.  The using
+  // declaration will avoid warnings about partially-overloaded virtual
+  // functions.
+  using octave_function::call;
+
   octave_value_list
   call (octave::tree_evaluator& tw, int nargout, const octave_value_list& idx);
 
 private:
 
   bool is_constructed_object (octave::tree_evaluator& tw,
                               const std::string& nm);
 
diff --git a/libinterp/octave-value/ov-mex-fcn.h b/libinterp/octave-value/ov-mex-fcn.h
--- a/libinterp/octave-value/ov-mex-fcn.h
+++ b/libinterp/octave-value/ov-mex-fcn.h
@@ -80,16 +80,21 @@ public:
   octave::sys::time time_checked (void) const { return m_time_checked; }
 
   bool is_system_fcn_file (void) const { return m_is_system_fcn_file; }
 
   bool is_builtin_function (void) const { return false; }
 
   bool is_mex_function (void) const { return true; }
 
+  // We don't need to override both forms of the call method.  The using
+  // declaration will avoid warnings about partially-overloaded virtual
+  // functions.
+  using octave_function::call;
+
   octave_value_list
   call (octave::tree_evaluator& tw, int nargout = 0,
         const octave_value_list& args = octave_value_list ());
 
   void atexit (void (*fcn) (void)) { m_exit_fcn_ptr = fcn; }
 
   octave::dynamic_library get_shlib (void) const { return m_sh_lib; }
 
diff --git a/libinterp/octave-value/ov-usr-fcn.h b/libinterp/octave-value/ov-usr-fcn.h
--- a/libinterp/octave-value/ov-usr-fcn.h
+++ b/libinterp/octave-value/ov-usr-fcn.h
@@ -175,16 +175,21 @@ public:
 
   octave_user_code * user_code_value (bool = false) { return this; }
 
   // Scripts and user functions are both considered "scripts" because
   // they are written in Octave's scripting language.
 
   bool is_user_script (void) const { return true; }
 
+  // We don't need to override both forms of the call method.  The using
+  // declaration will avoid warnings about partially-overloaded virtual
+  // functions.
+  using octave_user_code::call;
+
   octave_value_list
   call (octave::tree_evaluator& tw, int nargout = 0,
         const octave_value_list& args = octave_value_list ());
 
   void accept (octave::tree_walker& tw);
 
 private:
 
