# HG changeset patch
# User Rik <rik@octave.org>
# Date 1411274735 25200
#      Sat Sep 20 21:45:35 2014 -0700
# Node ID c432232450852ec61a291ba6d7e8810319344906
# Parent  3cb64f94294ff832b60253b465c8bcc0cd7cd7da
doc: Add warnings about eventual removal of inline functions.

* NEWS: Announce eventual deprecation of inline.

* func.txi: Document eventual deprecation of inline in manual.

* ov-fcn-inline.cc (Fformula): Add seealso link to char.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -79,16 +79,23 @@ Summary of important user-visible change
       javachk
       linkaxes
       lscov
       numfields
       rotate
       sylvester
       zoom
 
+ ** inline() scheduled for eventual deprecation by Matlab
+
+    Functions created through the use of inline are scheduled for deprecation
+    by Matlab.  When this occurs Octave will continue to support inline
+    functions for an indeterminate amount of time before also removing support.
+    All new code should use anonymous functions in place of inline functions. 
+
  ** Deprecated functions.
 
     The following functions have been deprecated in Octave 4.2 and will
     be removed from Octave 4.6 (or whatever version is the second major
     release after 4.2):
 
       Function           | Replacement
       -------------------|------------------
diff --git a/doc/interpreter/func.txi b/doc/interpreter/func.txi
--- a/doc/interpreter/func.txi
+++ b/doc/interpreter/func.txi
@@ -1399,16 +1399,20 @@ function @math{f(x) = x^2 + 2}.
 @example
 f = inline ("x^2 + 2");
 @end example
 
 @noindent
 After this it is possible to evaluate @math{f} at any @math{x} by
 writing @code{f(x)}.
 
+@strong{Caution}: @sc{matlab} has begun the process of deprecating inline
+functions.  At some point in the future support will be dropped and eventually
+Octave will follow @sc{matlab} and also remove inline functions.  Use anonymous functions in all new code.
+
 @DOCSTRING(inline)
 
 @DOCSTRING(argnames)
 
 @DOCSTRING(formula)
 
 @DOCSTRING(symvar)
 
diff --git a/libinterp/octave-value/ov-fcn-inline.cc b/libinterp/octave-value/ov-fcn-inline.cc
--- a/libinterp/octave-value/ov-fcn-inline.cc
+++ b/libinterp/octave-value/ov-fcn-inline.cc
@@ -848,19 +848,20 @@ functions from strings is through the us
 %!error <N must be a positive integer> inline ("2", -1)
 %!error <expecting string arguments> inline ("2", "x", -1, "y")
 */
 
 DEFUN (formula, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} formula (@var{fun})\n\
 Return a character string representing the inline function @var{fun}.\n\
+\n\
 Note that @code{char (@var{fun})} is equivalent to\n\
 @code{formula (@var{fun})}.\n\
-@seealso{argnames, inline, vectorize}\n\
+@seealso{char, argnames, inline, vectorize}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin == 1)
     {
