# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1422049225 18000
#      Fri Jan 23 16:40:25 2015 -0500
# Node ID 2f4406e9dad63f82f356e27910e99c9eb3fc6507
# Parent  e8e3a89fa370ae3c02185b2418865c331c79acae
# Parent  6b2d7a5dc62af562c77660f898710f10c01baba6
maint: Periodic merge of gui-release to default.

diff --git a/libgui/graphics/BaseControl.h b/libgui/graphics/BaseControl.h
--- a/libgui/graphics/BaseControl.h
+++ b/libgui/graphics/BaseControl.h
@@ -34,17 +34,17 @@ namespace QtHandles
 class BaseControl : public Object
 {
 public:
   BaseControl (const graphics_object& go, QWidget* w);
   ~BaseControl (void);
 
   Container* innerContainer (void) { return 0; }
 
-  bool eventFilter (QObject* watched, QEvent* event);
+  bool eventFilter (QObject* watched, QEvent* e);
 
 protected:
   void init (QWidget* w, bool callBase = false);
   void update (int pId);
 
 private:
   bool m_normalizedFont;
   bool m_keyPressHandlerDefined;
diff --git a/libgui/graphics/Container.cc b/libgui/graphics/Container.cc
--- a/libgui/graphics/Container.cc
+++ b/libgui/graphics/Container.cc
@@ -42,28 +42,28 @@ Container::Container (QWidget* xparent)
 {
   setFocusPolicy (Qt::ClickFocus);
 }
 
 Container::~Container (void)
 {
 }
 
-Canvas* Container::canvas (const graphics_handle& xhandle, bool xcreate)
+Canvas* Container::canvas (const graphics_handle& gh, bool xcreate)
 {
   if (! m_canvas && xcreate)
     {
-      graphics_object go = gh_manager::get_object (xhandle);
+      graphics_object go = gh_manager::get_object (gh);
 
       if (go)
         {
           graphics_object fig = go.get_ancestor ("figure");
 
           m_canvas = Canvas::create (fig.get("renderer").string_value (),
-                                     this, xhandle);
+                                     this, gh);
 
           QWidget* canvasWidget = m_canvas->qWidget ();
 
           canvasWidget->lower ();
           canvasWidget->show ();
           canvasWidget->setGeometry (0, 0, width (), height ());
         }
     }
diff --git a/libgui/graphics/GLCanvas.cc b/libgui/graphics/GLCanvas.cc
--- a/libgui/graphics/GLCanvas.cc
+++ b/libgui/graphics/GLCanvas.cc
@@ -32,29 +32,29 @@ along with Octave; see the file COPYING.
 #include "graphics.h"
 
 #include "GLCanvas.h"
 #include "gl-select.h"
 
 namespace QtHandles
 {
 
-GLCanvas::GLCanvas (QWidget* xparent, const graphics_handle& xhandle)
-  : QGLWidget (xparent), Canvas (xhandle)
+GLCanvas::GLCanvas (QWidget* xparent, const graphics_handle& gh)
+  : QGLWidget (xparent), Canvas (gh)
 {
   setFocusPolicy (Qt::ClickFocus);
 }
 
 GLCanvas::~GLCanvas (void)
 {
 }
 
-void GLCanvas::draw (const graphics_handle& xhandle)
+void GLCanvas::draw (const graphics_handle& gh)
 {
-  graphics_object go = gh_manager::get_object (xhandle);
+  graphics_object go = gh_manager::get_object (gh);
 
   if (go)
     {
       opengl_renderer r;
 
       r.set_viewport (width (), height ());
       r.draw(go);
     }
diff --git a/libgui/graphics/Menu.cc b/libgui/graphics/Menu.cc
--- a/libgui/graphics/Menu.cc
+++ b/libgui/graphics/Menu.cc
@@ -53,24 +53,24 @@ static QKeySequence accelSequence (const
         return QKeySequence (keyMod | static_cast<int> (c));
     }
 
   return QKeySequence ();
 }
 
 Menu* Menu::create (const graphics_object& go)
 {
-  Object* parent = Object::parentObject (go);
+  Object* parent_obj = Object::parentObject (go);
 
-  if (parent)
+  if (parent_obj)
     {
-      QObject* qObj = parent->qObject ();
+      QObject* qObj = parent_obj->qObject ();
 
       if (qObj)
-        return new Menu (go, new QAction (qObj), parent);
+        return new Menu (go, new QAction (qObj), parent_obj);
     }
 
   return 0;
 }
 
 Menu::Menu (const graphics_object& go, QAction* action, Object* xparent)
     : Object (go, action), m_parent (0), m_separator (0)
 {
diff --git a/libgui/graphics/TextEdit.h b/libgui/graphics/TextEdit.h
--- a/libgui/graphics/TextEdit.h
+++ b/libgui/graphics/TextEdit.h
@@ -28,17 +28,17 @@ along with Octave; see the file COPYING.
 namespace QtHandles
 {
 
 class TextEdit : public QTextEdit
 {
   Q_OBJECT
 
 public:
-  TextEdit (QWidget* xparent) : QTextEdit (xparent) { }
+  TextEdit (QWidget* xparent) : QTextEdit(xparent) { }
   ~TextEdit (void) { }
 
 signals:
   void editingFinished (void);
 
 protected:
   void focusOutEvent (QFocusEvent* event);
   void keyPressEvent (QKeyEvent* event);
diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -77,31 +77,20 @@ file_editor_tab::file_editor_tab (const 
   // for identification when saved later.
   if (directory.count () && directory.at (directory.count () - 1) != '/')
     directory.append ("/");
 
   _file_name = directory;
   _file_system_watcher.setObjectName ("_qt_autotest_force_engine_poller");
 
   _edit_area = new octave_qscintilla (this);
-  // Connect signal for command execution to a slot of this tab which in turn
-  // emits a signal connected to the main window.
-  // Direct connection is not possible because tab's parent is null.
-  connect (_edit_area,
-           SIGNAL (execute_command_in_terminal_signal (const QString&)),
-           this,
-           SLOT (execute_command_in_terminal (const QString&)));
 
-  connect (_edit_area,
-           SIGNAL (cursorPositionChanged (int, int)),
-           this,
-           SLOT (handle_cursor_moved (int,int)));
+  connect (_edit_area, SIGNAL (cursorPositionChanged (int, int)),
+           this, SLOT (handle_cursor_moved (int,int)));
 
-  connect (_edit_area, SIGNAL (create_context_menu_signal (QMenu*)),
-           this, SLOT (create_context_menu (QMenu*)));
   connect (_edit_area, SIGNAL (context_menu_edit_signal (const QString&)),
            this, SLOT (handle_context_menu_edit (const QString&)));
 
   // create statusbar for row/col indicator and eol mode
   _status_bar = new QStatusBar (this);
 
   // eol mode
   QLabel *eol_label = new QLabel (tr ("eol:"), this);
@@ -203,22 +192,16 @@ file_editor_tab::closeEvent (QCloseEvent
   // closing this window
   if (check_file_modified () == QMessageBox::Cancel)
     e->ignore ();
   else
     e->accept ();
 }
 
 void
-file_editor_tab::execute_command_in_terminal (const QString& command)
-{
-  emit execute_command_in_terminal_signal (command); // connected to main window
-}
-
-void
 file_editor_tab::handle_context_menu_edit (const QString& word_at_cursor)
 {
   // search for a subfunction in actual file (this is done at first because
   // octave finds this function before other with same name in the search path
   QRegExp rxfun1 ("^[\t ]*function[^=]+=[\t ]*"
       + word_at_cursor + "[\t ]*\\([^\\)]*\\)[\t ]*$");
   QRegExp rxfun2 ("^[\t ]*function[\t ]+"
       + word_at_cursor + "[\t ]*\\([^\\)]*\\)[\t ]*$");
@@ -306,18 +289,20 @@ file_editor_tab::handle_context_menu_edi
       msgBox->show ();
       return;
     }
 
   if ( filename.isEmpty ())
     filename = QString::fromStdString (
                            map.contents ("file").data ()[0].string_value ());
 
-  emit execute_command_in_terminal_signal (QString("edit ")
-                                           + "\""+filename+"\"");
+  if (! filename.endsWith (".m"))
+    filename.append (".m");
+
+  emit request_open_file (filename);
 }
 
 void
 file_editor_tab::set_file_name (const QString& fileName)
 {
   // update tracked file if we really have a file on disk
   QStringList trackedFiles = _file_system_watcher.files ();
   if (!trackedFiles.isEmpty ())
@@ -2082,22 +2067,16 @@ file_editor_tab::handle_cursor_moved (in
 {
   if (_edit_area->SendScintilla (QsciScintillaBase::SCI_AUTOCACTIVE))
     show_auto_completion (this);
 
   _row_indicator->setNum (line+1);
   _col_indicator->setNum (col+1);
 }
 
-void
-file_editor_tab::create_context_menu (QMenu *menu)
-{
-  emit create_context_menu_tab_signal (menu);
-}
-
 QString
 file_editor_tab::get_function_name ()
 {
   QRegExp rxfun1 ("^[\t ]*function[^=]+=([^\\(]+)\\([^\\)]*\\)[\t ]*$");
   QRegExp rxfun2 ("^[\t ]*function[\t ]+([^\\(]+)\\([^\\)]*\\)[\t ]*$");
   QRegExp rxfun3 ("^[\t ]*function[^=]+=[\t ]*([^\\s]+)[\t ]*$");
   QRegExp rxfun4 ("^[\t ]*function[\t ]+([^\\s]+)[\t ]*$");
 
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -115,34 +115,31 @@ public slots:
 
   void set_modified (bool modified = true);
 
   QString load_file (const QString& fileName);
   void new_file (const QString& commands = QString ());
 
   void file_has_changed (const QString& fileName);
 
-  void execute_command_in_terminal (const QString& command);
-  void create_context_menu (QMenu *);
   void handle_context_menu_edit (const QString&);
 
 signals:
 
   void file_name_changed (const QString& fileName, const QString& toolTip);
   void editor_state_changed (bool copy_available, const QString& fileName,
                              bool is_octave_file);
   void tab_remove_request ();
   void add_filename_to_list (const QString&, QWidget *);
   void mru_add_file (const QString& file_name);
   void editor_check_conflict_save (const QString& saveFileName,
                                    bool remove_on_success);
   void run_file_signal (const QFileInfo& info);
-  void execute_command_in_terminal_signal (const QString&);
   void set_global_edit_shortcuts_signal (bool);
-  void create_context_menu_tab_signal (QMenu *);
+  void request_open_file (const QString&);
 
 protected:
 
   void closeEvent (QCloseEvent *event);
   void set_file_name (const QString& fileName);
 
 private slots:
 
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -1562,31 +1562,44 @@ file_editor::construct (void)
   //restore previous session
   if (settings->value ("editor/restoreSession", true).toBool ())
     {
       QStringList sessionFileNames
         = settings->value ("editor/savedSessionTabs",
                            QStringList ()).toStringList ();
 
       for (int n = 0; n < sessionFileNames.count (); ++n)
-        request_open_file (sessionFileNames.at (n));
+        {
+          QFileInfo file = QFileInfo (sessionFileNames.at (n));
+          if (file.exists ())
+            request_open_file (sessionFileNames.at (n));
+        }
     }
 
   check_actions ();
 }
 
 void
 file_editor::add_file_editor_tab (file_editor_tab *f, const QString& fn)
 {
   _tab_widget->addTab (f, fn);
 
   // signals from the qscintilla edit area
   connect (f->qsci_edit_area (), SIGNAL (status_update (bool, bool)),
            this, SLOT (edit_status_update (bool, bool)));
 
+  connect (f->qsci_edit_area (), SIGNAL (show_doc_signal (const QString&)),
+           main_win (), SLOT (handle_show_doc (const QString&)));
+
+  connect (f->qsci_edit_area (), SIGNAL (create_context_menu_signal (QMenu *)),
+           this, SLOT (create_context_menu (QMenu *)));
+
+  connect (f->qsci_edit_area (), SIGNAL (execute_command_in_terminal_signal (const QString&)),
+           main_win (), SLOT (execute_command_in_terminal (const QString&)));
+
   // Signals from the file editor_tab
   connect (f, SIGNAL (file_name_changed (const QString&, const QString&)),
            this, SLOT (handle_file_name_changed (const QString&,
                                                  const QString&)));
 
   connect (f, SIGNAL (editor_state_changed (bool, const QString&, bool)),
            this, SLOT (handle_editor_state_changed (bool, const QString&, bool)));
 
@@ -1597,24 +1610,21 @@ file_editor::add_file_editor_tab (file_e
            this, SLOT (handle_add_filename_to_list (const QString&, QWidget*)));
 
   connect (f, SIGNAL (editor_check_conflict_save (const QString&, bool)),
            this, SLOT (check_conflict_save (const QString&, bool)));
 
   connect (f, SIGNAL (mru_add_file (const QString&)),
            this, SLOT (handle_mru_add_file (const QString&)));
 
-  connect (f, SIGNAL (create_context_menu_tab_signal (QMenu *)),
-           this, SLOT (create_context_menu (QMenu *)));
-
   connect (f, SIGNAL (run_file_signal (const QFileInfo&)),
            main_win (), SLOT (run_file_in_terminal (const QFileInfo&)));
 
-  connect (f, SIGNAL (execute_command_in_terminal_signal (const QString&)),
-           main_win (), SLOT (execute_command_in_terminal (const QString&)));
+  connect (f, SIGNAL (request_open_file (const QString&)),
+           this, SLOT (request_open_file (const QString&)));
 
   connect (f, SIGNAL (set_global_edit_shortcuts_signal (bool)),
            main_win (), SLOT (set_global_edit_shortcuts (bool)));
 
   // Signals from the file_editor non-trivial operations
   connect (this, SIGNAL (fetab_settings_changed (const QSettings *)),
            f, SLOT (notice_settings (const QSettings *)));
 
diff --git a/libgui/src/m-editor/octave-qscintilla.cc b/libgui/src/m-editor/octave-qscintilla.cc
--- a/libgui/src/m-editor/octave-qscintilla.cc
+++ b/libgui/src/m-editor/octave-qscintilla.cc
@@ -250,22 +250,20 @@ octave_qscintilla::contextmenu_help (boo
 {
   contextmenu_help_doc (false);
 }
 
 // common function with flag for documentation
 void
 octave_qscintilla::contextmenu_help_doc (bool documentation)
 {
-  QString command;
   if (documentation)
-    command = "doc ";
+    emit show_doc_signal (_word_at_cursor);
   else
-    command = "help ";
-  emit execute_command_in_terminal_signal (command + _word_at_cursor);
+    emit execute_command_in_terminal_signal ("help " + _word_at_cursor);
 }
 
 void
 octave_qscintilla::contextmenu_edit (bool)
 {
   emit context_menu_edit_signal (_word_at_cursor);
 }
 
diff --git a/libgui/src/m-editor/octave-qscintilla.h b/libgui/src/m-editor/octave-qscintilla.h
--- a/libgui/src/m-editor/octave-qscintilla.h
+++ b/libgui/src/m-editor/octave-qscintilla.h
@@ -49,16 +49,17 @@ public:
 
 signals:
 
   void execute_command_in_terminal_signal (const QString&);
   void create_context_menu_signal (QMenu*);
   void context_menu_edit_signal (const QString&);
   void qsci_has_focus_signal (bool);
   void status_update (bool,bool);
+  void show_doc_signal (const QString&);
 
 private slots:
 
   void contextmenu_help (bool);
   void contextmenu_doc (bool);
   void contextmenu_help_doc (bool);
   void contextmenu_edit (bool);
   void contextmenu_run (bool);
diff --git a/libgui/src/octave-dock-widget.cc b/libgui/src/octave-dock-widget.cc
--- a/libgui/src/octave-dock-widget.cc
+++ b/libgui/src/octave-dock-widget.cc
@@ -239,16 +239,19 @@ octave_dock_widget::make_widget (bool)
 
   // adjust the (un)dock icon
   _dock_action->setIcon (QIcon (":/actions/icons/widget-undock"+_icon_color+".png"));
   _dock_action->setToolTip (tr ("Undock widget"));
 
 #else
 
   // non windows: just say we are a docked widget again
+
+  Q_UNUSED (dock);
+
   setWindowFlags (Qt::Widget);
 
   QString css = styleSheet ();
   css.replace ("widget-dock","widget-undock");
   setStyleSheet (css);
 
 #endif
 
@@ -426,9 +429,9 @@ octave_dock_widget::handle_active_dock_c
       update ();
     }
 
   if (_custom_style && this == w_new)
     {
       set_style (true);
       update ();
     }
-}
\ No newline at end of file
+}
diff --git a/libinterp/corefcn/toplev.cc b/libinterp/corefcn/toplev.cc
--- a/libinterp/corefcn/toplev.cc
+++ b/libinterp/corefcn/toplev.cc
@@ -844,17 +844,17 @@ DEFUN (warranty, , ,
 @deftypefn {Built-in Function} {} warranty ()\n\
 Describe the conditions for copying and distributing Octave.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   octave_stdout << "\n" << octave_name_version_and_copyright () << "\n\
 \n\
-GNU Octave free software; you can redistribute it and/or modify\n\
+GNU Octave is free software; you can redistribute it and/or modify\n\
 it under the terms of the GNU General Public License as published by\n\
 the Free Software Foundation; either version 3 of the License, or\n\
 (at your option) any later version.\n\
 \n\
 GNU Octave is distributed in the hope that it will be useful,\n\
 but WITHOUT ANY WARRANTY; without even the implied warranty of\n\
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\
 GNU General Public License for more details.\n\
diff --git a/liboctave/cruft/Faddeeva/Faddeeva.cc b/liboctave/cruft/Faddeeva/Faddeeva.cc
--- a/liboctave/cruft/Faddeeva/Faddeeva.cc
+++ b/liboctave/cruft/Faddeeva/Faddeeva.cc
@@ -134,16 +134,17 @@
                        For real x, use standard-library erf(x)
                        and erfc(x) if available (for C99 or C++11).
                        #include "config.h" if HAVE_CONFIG_H is #defined.
      15 December 2012: Portability fixes (copysign, Inf/NaN creation),
                        use CMPLX/__builtin_complex if available in C,
                        slight accuracy improvements to erf and dawson
                        functions near the origin.  Use gnulib functions
                        if GNULIB_NAMESPACE is defined.
+     18 December 2012: Slight tweaks (remove recomputation of x*x in Dawson)
 */
 
 /////////////////////////////////////////////////////////////////////////
 /* If this file is compiled as a part of a larger project,
    support using an autoconf-style config.h header file
    (with various "HAVE_*" #defines to indicate features)
    if HAVE_CONFIG_H is #defined (in GNU autotools style). */
 
@@ -205,16 +206,17 @@ static inline double my_copysign(double 
 // If we are using the gnulib <cmath> (e.g. in the GNU Octave sources),
 // gnulib generates a link warning if we use ::floor instead of gnulib::floor.
 // This warning is completely innocuous because the only difference between
 // gnulib::floor and the system ::floor (and only on ancient OSF systems)
 // has to do with floor(-0), which doesn't occur in the usage below, but
 // the Octave developers prefer that we silence the warning.
 #  ifdef GNULIB_NAMESPACE
 #    define floor GNULIB_NAMESPACE::floor
+#    define log GNULIB_NAMESPACE::log
 #  endif
 
 #else // !__cplusplus, i.e. pure C (requires C99 features)
 
 #  include "Faddeeva.h"
 
 #  define _GNU_SOURCE // enable GNU libc NAN extension if possible
 
@@ -560,18 +562,18 @@ cmplx FADDEEVA(Dawson)(cmplx z, double r
      
      Re dawson(x + iy) = [1 + y^2 (1 + y^2/2 - (xy)^2/3)] / (2x)
      Im dawson(x + iy) = y [ -1 - 2/3 y^2 + y^4/15 (2x^2 - 4) ] / (2x^2 - 1)
 
  */
  taylor_realaxis:
   {
     double x2 = x*x;
-    double y2 = y*y;
     if (x2 > 1600) { // |x| > 40
+      double y2 = y*y;
       if (x2 > 25e14) {// |x| > 5e7
         double xy2 = (x*y)*(x*y);
         return C((0.5 + y2 * (0.5 + 0.25*y2
                               - 0.16666666666666666667*xy2)) / x,
                  y * (-1 + y2 * (-0.66666666666666666667
                                  + 0.13333333333333333333*xy2
                                  - 0.26666666666666666667*y2))
                  / (2*x2 - 1));
@@ -579,16 +581,17 @@ cmplx FADDEEVA(Dawson)(cmplx z, double r
       return (1. / (-15 + x2*(90 + x2*(-60 + 8*x2)))) *
         C(x * (33 + x2 * (-28 + 4*x2)
                + y2 * (18 - 4*x2 + 4*y2)),
           y * (-15 + x2 * (24 - 4*x2)
                + y2 * (4*x2 - 10 - 4*y2)));
     }
     else {
       double D = spi2 * FADDEEVA(w_im)(x);
+      double y2 = y*y;
       return C
         (D + y2 * (D + x - 2*D*x2)
          + y2*y2 * (D * (0.5 - x2 * (2 - 0.66666666666666666667*x2))
                     + x * (0.83333333333333333333
                            - 0.33333333333333333333 * x2)),
          y * (1 - 2*D*x
               + y2 * 0.66666666666666666667 * (1 - x2 - D*x * (3 - 2*x2))
               + y2*y2 * (0.26666666666666666667 -
@@ -688,17 +691,17 @@ cmplx FADDEEVA(w)(cmplx z, double relerr
     relerr = DBL_EPSILON;
     a = 0.518321480430085929872; // pi / sqrt(-log(eps*0.5))
     c = 0.329973702884629072537; // (2/pi) * a;
     a2 = 0.268657157075235951582; // a^2
   }
   else {
     const double pi = 3.14159265358979323846264338327950288419716939937510582;
     if (relerr > 0.1) relerr = 0.1; // not sensible to compute < 1 digit
-    a = pi / sqrt(-gnulib::log(relerr*0.5));
+    a = pi / sqrt(-log(relerr*0.5));
     c = (2/pi)*a;
     a2 = a*a;
   }
   const double x = fabs(creal(z));
   const double y = cimag(z), ya = fabs(y);
 
   cmplx ret = 0.; // return value
 
@@ -1004,17 +1007,17 @@ cmplx FADDEEVA(w)(cmplx z, double relerr
 
    Uses a look-up table of 100 different Chebyshev polynomials
    for y intervals [0,0.01], [0.01,0.02], ...., [0.99,1], generated
    with the help of Maple and a little shell script.   This allows
    the Chebyshev polynomials to be of significantly lower degree (about 1/4)
    compared to fitting the whole [0,1] interval with a single polynomial. */
 static double erfcx_y100(double y100)
 {
-  switch (static_cast<int> (y100)) {
+  switch ((int) y100) {
 case 0: {
 double t = 2*y100 - 1;
 return 0.70878032454106438663e-3 + (0.71234091047026302958e-3 + (0.35779077297597742384e-5 + (0.17403143962587937815e-7 + (0.81710660047307788845e-10 + (0.36885022360434957634e-12 + 0.15917038551111111111e-14 * t) * t) * t) * t) * t) * t;
 }
 case 1: {
 double t = 2*y100 - 3;
 return 0.21479143208285144230e-2 + (0.72686402367379996033e-3 + (0.36843175430938995552e-5 + (0.18071841272149201685e-7 + (0.85496449296040325555e-10 + (0.38852037518534291510e-12 + 0.16868473576888888889e-14 * t) * t) * t) * t) * t) * t;
 }
@@ -1448,17 +1451,17 @@ double FADDEEVA_RE(erfcx)(double x)
 /* Given y100=100*y, where y = 1/(1+x) for x >= 0, compute w_im(x).
 
    Uses a look-up table of 100 different Chebyshev polynomials
    for y intervals [0,0.01], [0.01,0.02], ...., [0.99,1], generated
    with the help of Maple and a little shell script.   This allows
    the Chebyshev polynomials to be of significantly lower degree (about 1/30)
    compared to fitting the whole [0,1] interval with a single polynomial. */
 static double w_im_y100(double y100, double x) {
-  switch (static_cast<int> (y100)) {
+  switch ((int) y100) {
     case 0: {
       double t = 2*y100 - 1;
       return 0.28351593328822191546e-2 + (0.28494783221378400759e-2 + (0.14427470563276734183e-4 + (0.10939723080231588129e-6 + (0.92474307943275042045e-9 + (0.89128907666450075245e-11 + 0.92974121935111111110e-13 * t) * t) * t) * t) * t) * t;
     }
     case 1: {
       double t = 2*y100 - 3;
       return 0.85927161243940350562e-2 + (0.29085312941641339862e-2 + (0.15106783707725582090e-4 + (0.11716709978531327367e-6 + (0.10197387816021040024e-8 + (0.10122678863073360769e-10 + 0.10917479678400000000e-12 * t) * t) * t) * t) * t) * t;
     }
