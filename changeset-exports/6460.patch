# HG changeset patch
# User dbateman
# Date 1174944180 0
#      Mon Mar 26 21:23:00 2007 +0000
# Node ID fa6312d937305fcf269b09a6461ee5e6c3b22577
# Parent  5dc550e1f4193f891fe0de14ab5c0ead9951c432
[project @ 2007-03-26 21:23:00 by dbateman]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,20 @@
+2007-03-26  David Bateman <dbateman@free.fr>
+
+	* MatrixType.cc: Replace all uses of the method
+	octave_sparse_params::get_key ("bandden") with 
+	octave_sparse_params::get_bandden (void).
+	(MatrixType::MatrixType (void)): Undo previous change but use
+	octave_sparse_params::get_bandden (void).
+	* oct-spparms.cc (get_bandden(void), do_get_bandden(void)): New
+	methods.
+	* oct-spparms.h (get_bandden(void), do_get_bandden(void)):
+	Declare them.	
+	
 2007-03-26  Luis Ortiz  <lortiz@interactivesupercomputing.com>
 	    David Bateman  <dbateman@free.fr>
 
 	* idx-vector.h.cc (IDX_VEC_REP::idx_vector_rep (const Range&)):
 	Check that all elements are ints before doing anything.  Simplify
 	calculation of index values.
 
 2007-03-26  David Bateman  <dbateman@free.fr>
diff --git a/liboctave/MatrixType.cc b/liboctave/MatrixType.cc
--- a/liboctave/MatrixType.cc
+++ b/liboctave/MatrixType.cc
@@ -31,17 +31,19 @@ Boston, MA 02110-1301, USA.
 #include "CMatrix.h"
 #include "dSparse.h"
 #include "CSparse.h"
 #include "oct-spparms.h"
 
 // FIXME There is a large code duplication here
 
 MatrixType::MatrixType (void)
-  : typ (MatrixType::Unknown), sp_bandden (0), bandden (0), upper_band (0), 
+  : typ (MatrixType::Unknown), 
+    sp_bandden (octave_sparse_params::get_bandden()),
+    bandden (0), upper_band (0), 
     lower_band (0), dense (false), full (false), nperm (0), perm (0) { }
 
 MatrixType::MatrixType (const MatrixType &a)
   : typ (a.typ), sp_bandden (a.sp_bandden), bandden (a.bandden), 
     upper_band (a.upper_band), lower_band (a.lower_band), 
     dense (a.dense), full (a.full), nperm (a.nperm)
 { 
   if (nperm != 0)
@@ -181,17 +183,17 @@ MatrixType::MatrixType (const SparseMatr
   octave_idx_type ncols = a.cols ();
   octave_idx_type nm = (ncols < nrows ? ncols : nrows);
   octave_idx_type nnz = a.nzmax ();
 
   if (octave_sparse_params::get_key ("spumoni") != 0.)
     (*current_liboctave_warning_handler) 
       ("Calculating Sparse Matrix Type");
 
-  sp_bandden = octave_sparse_params::get_key ("bandden");
+  sp_bandden = octave_sparse_params::get_bandden();
   bool maybe_hermitian = false;
   typ = MatrixType::Full;
 
   if (nnz == nm)
     {
       matrix_type tmp_typ = MatrixType::Diagonal;
       octave_idx_type i;
       // Maybe the matrix is diagonal
@@ -507,17 +509,17 @@ MatrixType::MatrixType (const SparseComp
   octave_idx_type ncols = a.cols ();
   octave_idx_type nm = (ncols < nrows ? ncols : nrows);
   octave_idx_type nnz = a.nzmax ();
 
   if (octave_sparse_params::get_key ("spumoni") != 0.)
     (*current_liboctave_warning_handler) 
       ("Calculating Sparse Matrix Type");
 
-  sp_bandden = octave_sparse_params::get_key ("bandden");
+  sp_bandden = octave_sparse_params::get_bandden();
   bool maybe_hermitian = false;
   typ = MatrixType::Full;
 
   if (nnz == nm)
     {
       matrix_type tmp_typ = MatrixType::Diagonal;
       octave_idx_type i;
       // Maybe the matrix is diagonal
@@ -820,33 +822,33 @@ MatrixType::MatrixType (const SparseComp
 	      else
 		typ = MatrixType::Tridiagonal_Hermitian;
 	    }
 	}
     }
 }
 MatrixType::MatrixType (const matrix_type t, bool _full)
   : typ (MatrixType::Unknown),
-    sp_bandden (octave_sparse_params::get_key ("bandden")),
+    sp_bandden (octave_sparse_params::get_bandden()),
     bandden (0), upper_band (0), lower_band (0),
     dense (false), full (_full), nperm (0), perm (0)
 {
   if (t == MatrixType::Full || t == MatrixType::Diagonal ||
       t == MatrixType::Permuted_Diagonal || t == MatrixType::Upper ||
       t == MatrixType::Lower || t == MatrixType::Tridiagonal ||
       t == MatrixType::Tridiagonal_Hermitian || t == MatrixType::Rectangular)
     typ = t;
   else
     (*current_liboctave_warning_handler) ("Invalid matrix type");
 }
 
 MatrixType::MatrixType (const matrix_type t, const octave_idx_type np,
 			const octave_idx_type *p, bool _full)
   : typ (MatrixType::Unknown),
-    sp_bandden (octave_sparse_params::get_key ("bandden")),
+    sp_bandden (octave_sparse_params::get_bandden()),
     bandden (0), upper_band (0), lower_band (0),
     dense (false), full (_full), nperm (0), perm (0)
 {
   if ((t == MatrixType::Permuted_Upper || t == MatrixType::Permuted_Lower) &&
       np > 0 && p != 0)
     {
       typ = t;
       nperm = np;
@@ -856,17 +858,17 @@ MatrixType::MatrixType (const matrix_typ
     }
   else
     (*current_liboctave_warning_handler) ("Invalid matrix type");
 }
 
 MatrixType::MatrixType (const matrix_type t, const octave_idx_type ku,
 			const octave_idx_type kl, bool _full)
   : typ (MatrixType::Unknown),
-    sp_bandden (octave_sparse_params::get_key ("bandden")),
+    sp_bandden (octave_sparse_params::get_bandden()),
     bandden (0), upper_band (0), lower_band (0),
     dense (false), full (_full), nperm (0), perm (0)
 {
   if (t == MatrixType::Banded || t == MatrixType::Banded_Hermitian)
     {
       typ = t;
       upper_band = ku;
       lower_band = kl;
@@ -907,17 +909,17 @@ MatrixType::operator = (const MatrixType
 
   return *this;
 }
 
 int
 MatrixType::type (bool quiet)
 {
   if (typ != MatrixType::Unknown && (full ||
-      sp_bandden == octave_sparse_params::get_key ("bandden")))
+      sp_bandden == octave_sparse_params::get_bandden()))
     {
       if (!quiet &&
 	  octave_sparse_params::get_key ("spumoni") != 0.)
   	(*current_liboctave_warning_handler) 
   	  ("Using Cached Matrix Type");
       
       return typ;
     }
@@ -931,17 +933,17 @@ MatrixType::type (bool quiet)
 
   return typ;
 }
 
 int
 MatrixType::type (const SparseMatrix &a)
 {
   if (typ != MatrixType::Unknown && (full ||
-      sp_bandden == octave_sparse_params::get_key ("bandden")))
+      sp_bandden == octave_sparse_params::get_bandden()))
     {
       if (octave_sparse_params::get_key ("spumoni") != 0.)
   	(*current_liboctave_warning_handler) 
   	  ("Using Cached Matrix Type");
       
       return typ;
     }
 
@@ -964,17 +966,17 @@ MatrixType::type (const SparseMatrix &a)
 
   return typ;
 }
 
 int
 MatrixType::type (const SparseComplexMatrix &a)
 {
   if (typ != MatrixType::Unknown && (full || 
-      sp_bandden == octave_sparse_params::get_key ("bandden")))
+      sp_bandden == octave_sparse_params::get_bandden()))
     {
       if (octave_sparse_params::get_key ("spumoni") != 0.)
   	(*current_liboctave_warning_handler) 
   	  ("Using Cached Matrix Type");
       
       return typ;
     }
 
diff --git a/liboctave/oct-spparms.cc b/liboctave/oct-spparms.cc
--- a/liboctave/oct-spparms.cc
+++ b/liboctave/oct-spparms.cc
@@ -89,16 +89,22 @@ octave_sparse_params::set_key (const std
 }
 
 double
 octave_sparse_params::get_key (const std::string& key)
 {
   return instance_ok () ? instance->do_get_key (key) : octave_NaN;
 }
 
+double
+octave_sparse_params::get_bandden (void)
+{
+  return instance_ok () ? instance->do_get_bandden () : 0.0;
+}
+
 void
 octave_sparse_params::print_info (std::ostream& os, const std::string& prefix)
 {
   if (instance_ok ())
     instance->do_print_info (os, prefix);
 }
 
 void
@@ -147,16 +153,22 @@ octave_sparse_params::init_keys (void)
   keys(6) = "wh_frac";
   keys(7) = "autommd";
   keys(8) = "autoamd";
   keys(9) = "piv_tol";
   keys(10) = "bandden";
   keys(11) = "umfpack";
 }
 
+double
+octave_sparse_params::do_get_bandden (void)
+{
+  return params(10);
+}
+
 bool
 octave_sparse_params::do_set_vals (const NDArray& vals)
 {
   octave_idx_type len = vals.length ();
 
   if (len > OCTAVE_SPARSE_CONTROLS_SIZE)
     {
       (*current_liboctave_error_handler)
diff --git a/liboctave/oct-spparms.h b/liboctave/oct-spparms.h
--- a/liboctave/oct-spparms.h
+++ b/liboctave/oct-spparms.h
@@ -61,16 +61,18 @@ public:
   static ColumnVector get_vals (void);
 
   static bool set_vals (const NDArray& vals);
 
   static bool set_key (const std::string& key, const double& val);
 
   static double get_key (const std::string& key);
 
+  static double get_bandden (void);
+
   static void print_info (std::ostream& os, const std::string& prefix);
 
 private:
 
   ColumnVector params;
 
   string_vector keys;
 
@@ -85,16 +87,18 @@ private:
   ColumnVector do_get_vals (void) const { return params; }
 
   bool do_set_vals (const NDArray& vals);
 
   bool do_set_key (const std::string& key, const double& val);
 
   double do_get_key (const std::string& key);
 
+  double do_get_bandden (void);
+
   void do_print_info (std::ostream& os, const std::string& prefix) const;
   
   void init_keys (void);
 };
 
 #endif
 
 /*
