# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1553098810 0
#      Wed Mar 20 16:20:10 2019 +0000
# Node ID fbb318c371db520afcca2210669f440c61d8c5ea
# Parent  fa809bd702818e2a7de12071e0c071c522251484
methods: return classdef constructors in list (bug #55858)

* cdev-class.h, cdef-class.cc (cdef_class::get_methods,
cdef_class::get_method_map, cdef_class:cdef_class_rep::get_methods,
cdef_class::cdef_class_rep::get_methods_map): New parameter, INCLUDE_CTOR.
(cdef_class::cdef_class_rep::find_methods): New parameter,
INCLUDE_CTOR.  If TRUE, return class constructor in the list.

* ov-classdef.cc (Fmethods): Call get_method_map with INCLUDE_CTOR
parameter set to true.

diff --git a/libinterp/octave-value/cdef-class.cc b/libinterp/octave-value/cdef-class.cc
--- a/libinterp/octave-value/cdef-class.cc
+++ b/libinterp/octave-value/cdef-class.cc
@@ -279,54 +279,54 @@ namespace octave
 
   void
   cdef_class::cdef_class_rep::load_all_methods (void)
   {
     // FIXME: re-scan class directory
   }
 
   Cell
-  cdef_class::cdef_class_rep::get_methods (void)
+  cdef_class::cdef_class_rep::get_methods (bool include_ctor)
   {
     std::map<std::string,cdef_method> meths;
 
-    find_methods (meths, false);
+    find_methods (meths, false, include_ctor);
 
     Cell c (meths.size (), 1);
 
     int idx = 0;
 
     for (const auto& nm_mthd : meths)
       c(idx++, 0) = to_ov (nm_mthd.second);
 
     return c;
   }
 
   std::map<std::string, cdef_method>
-  cdef_class::cdef_class_rep::get_method_map (bool only_inherited)
+  cdef_class::cdef_class_rep::get_method_map (bool only_inherited,
+                                              bool include_ctor)
   {
     std::map<std::string, cdef_method> methods;
 
-    find_methods (methods, only_inherited);
+    find_methods (methods, only_inherited, include_ctor);
 
     return methods;
   }
 
   void
-  cdef_class::cdef_class_rep::find_methods (std::map<std::string,
-                                            cdef_method>& meths,
-                                            bool only_inherited)
+  cdef_class::cdef_class_rep::find_methods (std::map<std::string, cdef_method>& meths,
+                                            bool only_inherited, bool include_ctor)
   {
     load_all_methods ();
 
     method_const_iterator it;
 
     for (it = method_map.begin (); it != method_map.end (); ++it)
       {
-        if (! it->second.is_constructor ())
+        if (include_ctor || ! it->second.is_constructor ())
           {
             std::string nm = it->second.get_name ();
 
             if (meths.find (nm) == meths.end ())
               {
                 if (only_inherited)
                   {
                     octave_value acc = it->second.get ("Access");
@@ -344,17 +344,17 @@ namespace octave
     // Look into superclasses
 
     Cell super_classes = get ("SuperClasses").cell_value ();
 
     for (int i = 0; i < super_classes.numel (); i++)
       {
         cdef_class cls = lookup_class (super_classes(i));
 
-        cls.get_rep ()->find_methods (meths, true);
+        cls.get_rep ()->find_methods (meths, true, false);
       }
   }
 
   cdef_property
   cdef_class::cdef_class_rep::find_property (const std::string& nm)
   {
     auto it = property_map.find (nm);
 
diff --git a/libinterp/octave-value/cdef-class.h b/libinterp/octave-value/cdef-class.h
--- a/libinterp/octave-value/cdef-class.h
+++ b/libinterp/octave-value/cdef-class.h
@@ -75,19 +75,20 @@ namespace octave
       bool is_abstract (void) const { return get ("Abstract").bool_value (); }
 
       bool is_sealed (void) const { return get ("Sealed").bool_value (); }
 
       cdef_method find_method (const std::string& nm, bool local = false);
 
       void install_method (const cdef_method& meth);
 
-      Cell get_methods (void);
+      Cell get_methods (bool include_ctor);
 
-      std::map<std::string, cdef_method> get_method_map (bool only_inherited);
+      std::map<std::string, cdef_method>
+      get_method_map (bool only_inherited, bool include_ctor);
 
       cdef_property find_property (const std::string& nm);
 
       void install_property (const cdef_property& prop);
 
       Cell get_properties (int mode);
 
       std::map<std::string, cdef_property> get_property_map (int mode);
@@ -153,17 +154,17 @@ namespace octave
       void load_all_methods (void);
 
       void find_names (std::set<std::string>& names, bool all);
 
       void find_properties (std::map<std::string,cdef_property>& props,
                             int mode = 0);
 
       void find_methods (std::map<std::string, cdef_method>& meths,
-                         bool only_inherited);
+                         bool only_inherited, bool include_ctor = false);
 
       cdef_class wrap (void)
       {
         m_count++;
         return cdef_class (this);
       }
 
       // The @-directory were this class is loaded from.
@@ -251,22 +252,25 @@ namespace octave
 
     cdef_method find_method (const std::string& nm, bool local = false);
 
     void install_method (const cdef_method& meth)
     {
       get_rep ()->install_method (meth);
     }
 
-    Cell get_methods (void) { return get_rep ()->get_methods (); }
+    Cell get_methods (bool include_ctor = false)
+    {
+      return get_rep ()->get_methods (include_ctor);
+    }
 
     std::map<std::string, cdef_method>
-    get_method_map (bool only_inherited = false)
+    get_method_map (bool only_inherited = false, bool include_ctor = false)
     {
-      return get_rep ()->get_method_map (only_inherited);
+      return get_rep ()->get_method_map (only_inherited, include_ctor);
     }
 
     cdef_property find_property (const std::string& nm);
 
     void install_property (const cdef_property& prop)
     {
       get_rep ()->install_property (prop);
     }
diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -596,17 +596,18 @@ Implements @code{methods} for Octave cla
     err_wrong_type_arg ("__methods__", arg);
 
   string_vector sv;
 
   octave::cdef_class cls = octave::lookup_class (class_name, false, true);
 
   if (cls.ok ())
     {
-      std::map<std::string, octave::cdef_method> method_map = cls.get_method_map ();
+      std::map<std::string, octave::cdef_method> method_map
+        = cls.get_method_map (false, true);
 
       std::list<std::string> method_names;
 
       for (const auto& nm_mthd : method_map)
         {
           std::string nm = nm_mthd.first;
 
           method_names.push_back (nm);
