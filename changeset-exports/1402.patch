# HG changeset patch
# User jwe
# Date 811139534 0
#      Fri Sep 15 04:32:14 1995 +0000
# Node ID 6550c74777b95cabf050d98d7b902e0e3782596b
# Parent  633199854158774ccbb6d7f3c8eb687603959b1a
[project @ 1995-09-15 04:27:57 by jwe]

diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -736,16 +736,51 @@ DEFUN ("is_struct", Fis_struct, Sis_stru
 	retval = 0.0;
     }
   else
     print_usage ("is_struct");
 
   return retval;
 }
 
+DEFUN ("struct_elements", Fstruct_elements, Sstruct_elements, 1, 1,
+  "struct_elements (S)\n\
+\n\
+Return a list of the names of the elements of the structure S.")
+{
+  Octave_object retval;
+
+  int nargin = args.length ();
+
+  if (nargin == 1)
+    {
+      if (args (0).is_map ())
+	{
+	  Octave_map m = args(0).map_value ();
+	  char **names = m.make_name_list ();
+	  Octave_str_obj list (m.length ());
+	  char **ptr = names;
+	  int i = 0;
+	  while (*ptr)
+	    {
+	      list(i++) = *ptr;
+	      delete [] *ptr++;
+	    }
+	  delete [] names;
+	  retval(0) = list;
+	}
+      else
+	gripe_wrong_type_arg ("struct_elements", args (0));
+    }
+  else
+    print_usage ("struct_elements");
+
+  return retval;
+}
+
 DEFUN ("struct_contains", Fstruct_contains, Sstruct_contains, 1, 2,
   "struct_contains (S, NAME)\n\
 \n\
 return nonzero if S is a structure with element NAME")
 {
   Octave_object retval;
 
   int nargin = args.length ();
diff --git a/src/dirfns.cc b/src/dirfns.cc
--- a/src/dirfns.cc
+++ b/src/dirfns.cc
@@ -44,16 +44,17 @@ Free Software Foundation, Inc.
 #include <cstdlib>
 #include <cstring>
 
 #include <strstream.h>
 
 #include "defun.h"
 #include "dirfns.h"
 #include "error.h"
+#include "gripes.h"
 #include "help.h"
 #include "oct-obj.h"
 #include "oct-str.h"
 #include "octave.h"
 #include "pager.h"
 #include "pathlen.h"
 #include "procstream.h"
 #include "statdefs.h"
@@ -493,17 +494,17 @@ is printed.")
 
   if (args.length () == 1)
     {
       const char *dirname = args(0).string_value ();
 
       if (error_state)
 	{
 	  status = -1;
-	  error ("readdir: string argument expected");
+	  gripe_wrong_type_arg ("readdir", args(0));
 	}
       else
 	{
 	  DIR *dir = opendir (dirname);
 
 	  if (dir)
 	    {
 	      int count = 0;
@@ -568,17 +569,17 @@ otherwise prints an error message.")
 
   int status = 0;
 
   if (args.length () == 1)
     {
       const char *dirname = args(0).string_value ();
 
       if (error_state)
-	error ("mkdir: string argument expected");
+	gripe_wrong_type_arg ("mkdir", args(0));
       else if (mkdir (dirname, 0777) < 0)
 	{
 	  status = -1;
 	  error ("%s", strerror (errno));
 	}
     }
   else
     print_usage ("mkdir");
@@ -599,17 +600,17 @@ otherwise prints an error message.")
 
   int status = 0;
 
   if (args.length () == 1)
     {
       const char *dirname = args(0).string_value ();
 
       if (error_state)
-	error ("rmdir: string argument expected");
+	gripe_wrong_type_arg ("rmdir", args(0));
       else if (rmdir (dirname) < 0)
 	{
 	  status = -1;
 	  error ("%s", strerror (errno));
 	}
     }
   else
     print_usage ("rmdir");
@@ -628,24 +629,28 @@ otherwise prints an error message and re
 {
   Octave_object retval;
 
   int status = 0;
 
   if (args.length () == 2)
     {
       const char *from = args(0).string_value ();
-      const char *to = args(1).string_value ();
-
       if (error_state)
-	error ("rename: string arguments expected");
-      else if (rename (from, to) < 0)
+	gripe_wrong_type_arg ("rename", args(0));
+      else
 	{
-	  status = -1;
-	  error ("%s", strerror (errno));
+	  const char *to = args(1).string_value ();
+	  if (error_state)
+	    gripe_wrong_type_arg ("rename", args(1));
+	  else if (rename (from, to) < 0)
+	    {
+	      status = -1;
+	      error ("%s", strerror (errno));
+	    }
 	}
     }
   else
     print_usage ("rename");
 
   if (status == 0)
     retval (0) = (double) status;
 
