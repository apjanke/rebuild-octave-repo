# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1389118794 18000
#      Tue Jan 07 13:19:54 2014 -0500
# Branch gui-release
# Node ID 18e50356e5e3c08e088749e94f18070691056b30
# Parent  2eb26867bf66f979c55f9dbc1f3dcbbb966961e8
# Parent  faf32a725693e7a73f67d6ebd7f0f2ea5201e887
maint: Periodic merge of stable to gui-release.

diff --git a/build-aux/common.mk b/build-aux/common.mk
--- a/build-aux/common.mk
+++ b/build-aux/common.mk
@@ -17,17 +17,19 @@ export PERL
 
 PYTHON = @PYTHON@
 
 GNUPLOT = @GNUPLOT@
 
 DESKTOP_FILE_INSTALL = @DESKTOP_FILE_INSTALL@
 
 OCTAVE_VERSION = @OCTAVE_VERSION@
-OCTAVE_API_VERSION_NUMBER = @OCTAVE_API_VERSION_NUMBER@
+OCTAVE_MAJOR_VERSION = @OCTAVE_MAJOR_VERSION@
+OCTAVE_MINOR_VERSION = @OCTAVE_MINOR_VERSION@
+OCTAVE_PATCH_VERSION = @OCTAVE_PATCH_VERSION@
 OCTAVE_API_VERSION = @OCTAVE_API_VERSION@
 OCTAVE_RELEASE_DATE = @OCTAVE_RELEASE_DATE@
 OCTAVE_COPYRIGHT = @OCTAVE_COPYRIGHT@
 
 version = $(OCTAVE_VERSION)
 api_version = $(OCTAVE_API_VERSION)
 
 ## AM_LIBTOOLFLAGS = --silent
diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -16,27 +16,51 @@ dnl Copyright (C) 1993-2013 John W. Eato
 ###
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, see
 ### <http://www.gnu.org/licenses/>.
 
 AC_PREREQ([2.62])
 AC_INIT([GNU Octave], [3.9.0+], [http://octave.org/bugs.html], [octave])
 
+dnl Note that the version number is duplicated here and in AC_INIT
+dnl because AC_INIT requires it to be static, not computed from
+dnl shell variables.
+OCTAVE_MAJOR_VERSION=3
+OCTAVE_MINOR_VERSION=8
+OCTAVE_PATCH_VERSION=0
+
 dnl PACKAGE_VERSION is set by the AC_INIT VERSION arg
 OCTAVE_VERSION="$PACKAGE_VERSION"
-OCTAVE_API_VERSION_NUMBER="49"
-OCTAVE_API_VERSION="api-v$OCTAVE_API_VERSION_NUMBER+"
+
+OCTAVE_COPYRIGHT="Copyright (C) 2013 John W. Eaton and others."
+
 OCTAVE_RELEASE_DATE="2013-12-27"
-OCTAVE_COPYRIGHT="Copyright (C) 2013 John W. Eaton and others."
+
+## The "API version" is used as a way of checking that interfaces in the
+## liboctave and libinterp libraries haven't changed in a backwardly
+## incompatible way when loading .oct files.  A better way to do that is
+## with library versioning, but not all systems support that.
+## NOTE: This macro will be removed in a future version of Octave.  If
+## you insist on checking for features using a version number, use the
+## OCTAVE_MAJOR_VERSION, OCTAVE_MINOR_VERSION, and
+## OCTAVE_PATCH_VERSION macros instead.
+## FIXME: Since we also set libtool versions for liboctave and
+## libinterp, perhaps we should be computing the "api version" from
+## those versions numbers in some way instead of setting it
+## independently here.
+OCTAVE_API_VERSION="api-v49+"
+
+AC_SUBST(OCTAVE_MAJOR_VERSION)
+AC_SUBST(OCTAVE_MINOR_VERSION)
+AC_SUBST(OCTAVE_PATCH_VERSION)
 AC_SUBST(OCTAVE_VERSION)
-AC_SUBST(OCTAVE_API_VERSION_NUMBER)
+AC_SUBST(OCTAVE_COPYRIGHT)
+AC_SUBST(OCTAVE_RELEASE_DATE)
 AC_SUBST(OCTAVE_API_VERSION)
-AC_SUBST(OCTAVE_RELEASE_DATE)
-AC_SUBST(OCTAVE_COPYRIGHT)
 
 dnl FIXME: We should auto-insert the Mercurial changeset ID into the
 dnl        AC_REVISION field whenever configure.ac is modified.
 dnl AC_REVISION($Revision: 1.603 $)
 AC_CONFIG_SRCDIR([libinterp/octave.cc])
 AC_CONFIG_HEADERS([config.h:config.in.h])
 AC_CONFIG_AUX_DIR([build-aux])
 AC_CONFIG_MACRO_DIR([m4])
diff --git a/doc/interpreter/stmt.txi b/doc/interpreter/stmt.txi
--- a/doc/interpreter/stmt.txi
+++ b/doc/interpreter/stmt.txi
@@ -841,31 +841,31 @@ end_try_catch
 where @var{body} and @var{cleanup} are both optional and may contain any
 Octave expressions or commands.  The statements in @var{cleanup} are
 only executed if an error occurs in @var{body}.
 
 No warnings or error messages are printed while @var{body} is executing.
 If an error does occur during the execution of @var{body}, @var{cleanup}
 can use the functions @code{lasterr} or @code{lasterror} to access the
 text of the message that would have been printed, as well as its
-identifier. The alternative form,
+identifier.  The alternative form,
 
 @example
 @group
 try
   @var{body}
 catch @var{err}
   @var{cleanup}
 end_try_catch
 @end group
 @end example
 
 @noindent
 will automatically store the output of @code{lasterror} in the structure
-@var{err}. @xref{Errors and Warnings} for more information about the
+@var{err}.  @xref{Errors and Warnings}, for more information about the
 @code{lasterr} and @code{lasterror} functions.
 
 
 @node Continuation Lines
 @section Continuation Lines
 @cindex continuation lines
 @cindex @code{...} continuation marker
 @cindex @code{\} continuation marker
diff --git a/libinterp/Makefile.am b/libinterp/Makefile.am
--- a/libinterp/Makefile.am
+++ b/libinterp/Makefile.am
@@ -266,19 +266,21 @@ oct-conf.h: oct-conf.in.h Makefile
 
 oct-conf-features.h: $(top_builddir)/config.h config-features.sh
 	$(srcdir)/config-features.sh $< > $@-t
 	mv $@-t $@
 
 version.h: version.in.h Makefile
 	$(SED) < $< \
 	  -e "s|%NO_EDIT_WARNING%|DO NOT EDIT!  Generated automatically from $(<F) by Make.|" \
-	  -e "s|%OCTAVE_API_VERSION_NUMBER%|${OCTAVE_API_VERSION_NUMBER}|" \
 	  -e "s|%OCTAVE_API_VERSION%|\"${OCTAVE_API_VERSION}\"|" \
 	  -e "s|%OCTAVE_COPYRIGHT%|\"${OCTAVE_COPYRIGHT}\"|" \
+          -e "s|%OCTAVE_MAJOR_VERSION%|${OCTAVE_MAJOR_VERSION}|" \
+          -e "s|%OCTAVE_MINOR_VERSION%|${OCTAVE_MINOR_VERSION}|" \
+          -e "s|%OCTAVE_PATCH_VERSION%|${OCTAVE_PATCH_VERSION}|" \
 	  -e "s|%OCTAVE_RELEASE_DATE%|\"${OCTAVE_RELEASE_DATE}\"|" \
 	  -e "s|%OCTAVE_VERSION%|\"${OCTAVE_VERSION}\"|" > $@-t
 	mv $@-t $@
 
 builtins.cc: $(DEF_FILES) mkbuiltins
 	$(srcdir)/mkbuiltins --source $(DEF_FILES) > $@-t
 	mv $@-t $@
 
diff --git a/libinterp/corefcn/help.cc b/libinterp/corefcn/help.cc
--- a/libinterp/corefcn/help.cc
+++ b/libinterp/corefcn/help.cc
@@ -447,26 +447,28 @@ const static pair_type keywords[] =
     "-*- texinfo -*-\n\
 @deftypefn {Keyword} {} break\n\
 Exit the innermost enclosing do, while or for loop.\n\
 @seealso{do, while, for, parfor, continue}\n\
 @end deftypefn"),
 
   pair_type ("case",
     "-*- texinfo -*-\n\
-@deftypefn {Keyword} {} case @{@var{value}@}\n\
-A case statement in an switch.  Octave cases are exclusive and do not\n\
+@deftypefn  {Keyword} {} case @var{value}\n\
+@deftypefnx {Keyword} {} case @{@var{value}, @dots{}@}\n\
+A case statement in a switch.  Octave cases are exclusive and do not\n\
 fall-through as do C-language cases.  A switch statement must have at least\n\
 one case.  See @code{switch} for an example.\n\
 @seealso{switch}\n\
 @end deftypefn"),
 
   pair_type ("catch",
     "-*- texinfo -*-\n\
-@deftypefn {Keyword} {} catch\n\
+@deftypefn  {Keyword} {} catch\n\
+@deftypefnx {Keyword} {} catch @var{value}\n\
 Begin the cleanup part of a try-catch block.\n\
 @seealso{try}\n\
 @end deftypefn"),
 
   pair_type ("continue",
     "-*- texinfo -*-\n\
 @deftypefn {Keyword} {} continue\n\
 Jump to the end of the innermost enclosing do, while or for loop.\n\
@@ -502,19 +504,20 @@ Alternate action for an if block.  See @
 @deftypefn {Keyword} {} elseif (@var{condition})\n\
 Alternate conditional test for an if block.  See @code{if} for an example.\n\
 @seealso{if}\n\
 @end deftypefn"),
 
   pair_type ("end",
     "-*- texinfo -*-\n\
 @deftypefn {Keyword} {} end\n\
-Mark the end of any @code{for}, @code{if}, @code{do}, @code{while}, or\n\
-@code{function} block.\n\
-@seealso{for, parfor, if, do, while, function}\n\
+Mark the end of any @code{for}, @code{parfor}, @code{if}, @code{do},\n\
+@code{while}, @code{function}, @code{switch}, @code{try}, or\n\
+@code{unwind_protect} block.\n\
+@seealso{for, parfor, if, do, while, function, switch, try, unwind_protect}\n\
 @end deftypefn"),
 
   pair_type ("end_try_catch",
     "-*- texinfo -*-\n\
 @deftypefn {Keyword} {} end_try_catch\n\
 Mark the end of an @code{try-catch} block.\n\
 @seealso{try, catch}\n\
 @end deftypefn"),
@@ -590,17 +593,17 @@ endfor\n\
 @deftypefnx {Keyword} {} function @var{outputs} = function\n\
 Begin a function body with @var{outputs} as results and @var{inputs} as\n\
 parameters.\n\
 @seealso{return}\n\
 @end deftypefn"),
 
   pair_type ("global",
     "-*- texinfo -*-\n\
-@deftypefn {Keyword} {} global\n\
+@deftypefn {Keyword} {} global @var{var}\n\
 Declare variables to have global scope.\n\
 \n\
 @example\n\
 @group\n\
 global @var{x};\n\
 if (isempty (@var{x}))\n\
   x = 1;\n\
 endif\n\
@@ -671,17 +674,17 @@ scope to a particular function and are n
 @deftypefn {Keyword} {} return\n\
 Return from a function.\n\
 @seealso{function}\n\
 @end deftypefn"),
 
   pair_type ("static",
     "-*- texinfo -*-\n\
 @deftypefn {Keyword} {} static\n\
-This function has been deprecated in favor of persistent.\n\
+This statement has been deprecated in favor of @code{persistent}.\n\
 @seealso{persistent}\n\
 @end deftypefn"),
 
   pair_type ("switch",
     "-*- texinfo -*-\n\
 @deftypefn {Keyword} {} switch @var{statement}\n\
 Begin a switch block.\n\
 \n\
@@ -711,17 +714,17 @@ If an error occurs within a try block, t
 execution will proceed after the catch block (though it is often\n\
 recommended to use the lasterr function to re-throw the error after cleanup\n\
 is completed).\n\
 @seealso{catch, unwind_protect}\n\
 @end deftypefn"),
 
   pair_type ("until",
     "-*- texinfo -*-\n\
-@deftypefn {Keyword} {} until\n\
+@deftypefn {Keyword} {} until (@var{cond})\n\
 End a do-until loop.  See @code{do} for an example.\n\
 @seealso{do}\n\
 @end deftypefn"),
 
   pair_type ("unwind_protect",
     "-*- texinfo -*-\n\
 @deftypefn {Keyword} {} unwind_protect\n\
 Begin an unwind_protect block.\n\
diff --git a/libinterp/version.in.h b/libinterp/version.in.h
--- a/libinterp/version.in.h
+++ b/libinterp/version.in.h
@@ -21,16 +21,30 @@ along with Octave; see the file COPYING.
 
 */
 
 #if !defined (octave_version_h)
 #define octave_version_h 1
 
 #define OCTAVE_VERSION %OCTAVE_VERSION%
 
+#define OCTAVE_MAJOR_VERSION %OCTAVE_MAJOR_VERSION%
+
+#define OCTAVE_MINOR_VERSION %OCTAVE_MINOR_VERSION%
+
+#define OCTAVE_PATCH_VERSION %OCTAVE_PATCH_VERSION%
+
+// The "API version" is used as a way of checking that interfaces in the
+// liboctave and libinterp libraries haven't changed in a backwardly
+// incompatible way when loading .oct files.  A better way to do that is
+// with library versioning, but not all systems support that.
+// NOTE: This macro will be removed in a future version of Octave.  If
+// you insist on checking for features using a version number, use the
+// OCTAVE_MAJOR_VERSION, OCTAVE_MINOR_VERSION, and
+// OCTAVE_PATCH_VERSION macros instead.
 #define OCTAVE_API_VERSION %OCTAVE_API_VERSION%
 
 #define OCTAVE_RELEASE_DATE %OCTAVE_RELEASE_DATE%
 
 #define OCTAVE_COPYRIGHT %OCTAVE_COPYRIGHT%
 
 #include <string>
 
