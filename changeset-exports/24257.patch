# HG changeset patch
# User Rik <rik@octave.org>
# Date 1510788371 28800
#      Wed Nov 15 15:26:11 2017 -0800
# Node ID 056c799eb0f8ba10ba40e05e36caf2c1512a3544
# Parent  b8e0bd54a2685be515e1e367da94872674d93eb4
maint: replace uses of 0 with nullptr in dSparse.cc, CSparse.cc.

* dSparse.cc, CSparse.cc: Replace uses of 0 with nullptr.

diff --git a/liboctave/array/CSparse.cc b/liboctave/array/CSparse.cc
--- a/liboctave/array/CSparse.cc
+++ b/liboctave/array/CSparse.cc
@@ -5710,30 +5710,30 @@ SparseComplexMatrix::fsolve (MatrixType&
 #else
           A->itype = CHOLMOD_INT;
 #endif
           A->dtype = CHOLMOD_DOUBLE;
           A->stype = 1;
           A->xtype = CHOLMOD_COMPLEX;
 
           A->x = data ();
-          if (A->x == 0)
+          if (A->x == nullptr)
             A->x = &dummy;
 
           cholmod_dense Bstore;
           cholmod_dense *B = &Bstore;
           B->nrow = b.rows ();
           B->ncol = b.cols ();
           B->d = B->nrow;
           B->nzmax = B->nrow * B->ncol;
           B->dtype = CHOLMOD_DOUBLE;
           B->xtype = CHOLMOD_REAL;
 
           B->x = const_cast<double *>(b.fortran_vec ());
-          if (B->x == 0)
+          if (B->x == nullptr)
             B->x = &dummy;
 
           cholmod_factor *L;
           BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
           L = CHOLMOD_NAME(analyze) (A, cm);
           CHOLMOD_NAME(factorize) (A, L, cm);
           if (calc_cond)
             rcond = CHOLMOD_NAME(rcond)(L, cm);
@@ -5960,17 +5960,17 @@ SparseComplexMatrix::fsolve (MatrixType&
 #else
           A->itype = CHOLMOD_INT;
 #endif
           A->dtype = CHOLMOD_DOUBLE;
           A->stype = 1;
           A->xtype = CHOLMOD_COMPLEX;
 
           A->x = data ();
-          if (A->x == 0)
+          if (A->x == nullptr)
             A->x = &dummy;
 
           cholmod_sparse Bstore;
           cholmod_sparse *B = &Bstore;
           B->nrow = b.rows ();
           B->ncol = b.cols ();
           B->p = b.cidx ();
           B->i = b.ridx ();
@@ -5983,17 +5983,17 @@ SparseComplexMatrix::fsolve (MatrixType&
 #else
           B->itype = CHOLMOD_INT;
 #endif
           B->dtype = CHOLMOD_DOUBLE;
           B->stype = 0;
           B->xtype = CHOLMOD_REAL;
 
           B->x = b.data ();
-          if (B->x == 0)
+          if (B->x == nullptr)
             B->x = &dummy;
 
           cholmod_factor *L;
           BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
           L = CHOLMOD_NAME(analyze) (A, cm);
           CHOLMOD_NAME(factorize) (A, L, cm);
           if (calc_cond)
             rcond = CHOLMOD_NAME(rcond)(L, cm);
@@ -6259,30 +6259,30 @@ SparseComplexMatrix::fsolve (MatrixType&
 #else
           A->itype = CHOLMOD_INT;
 #endif
           A->dtype = CHOLMOD_DOUBLE;
           A->stype = 1;
           A->xtype = CHOLMOD_COMPLEX;
 
           A->x = data ();
-          if (A->x == 0)
+          if (A->x == nullptr)
             A->x = &dummy;
 
           cholmod_dense Bstore;
           cholmod_dense *B = &Bstore;
           B->nrow = b.rows ();
           B->ncol = b.cols ();
           B->d = B->nrow;
           B->nzmax = B->nrow * B->ncol;
           B->dtype = CHOLMOD_DOUBLE;
           B->xtype = CHOLMOD_COMPLEX;
 
           B->x = const_cast<Complex *>(b.fortran_vec ());
-          if (B->x == 0)
+          if (B->x == nullptr)
             B->x = &dummy;
 
           cholmod_factor *L;
           BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
           L = CHOLMOD_NAME(analyze) (A, cm);
           CHOLMOD_NAME(factorize) (A, L, cm);
           if (calc_cond)
             rcond = CHOLMOD_NAME(rcond)(L, cm);
@@ -6488,17 +6488,17 @@ SparseComplexMatrix::fsolve (MatrixType&
 #else
           A->itype = CHOLMOD_INT;
 #endif
           A->dtype = CHOLMOD_DOUBLE;
           A->stype = 1;
           A->xtype = CHOLMOD_COMPLEX;
 
           A->x = data ();
-          if (A->x == 0)
+          if (A->x == nullptr)
             A->x = &dummy;
 
           cholmod_sparse Bstore;
           cholmod_sparse *B = &Bstore;
           B->nrow = b.rows ();
           B->ncol = b.cols ();
           B->p = b.cidx ();
           B->i = b.ridx ();
@@ -6511,17 +6511,17 @@ SparseComplexMatrix::fsolve (MatrixType&
 #else
           B->itype = CHOLMOD_INT;
 #endif
           B->dtype = CHOLMOD_DOUBLE;
           B->stype = 0;
           B->xtype = CHOLMOD_COMPLEX;
 
           B->x = b.data ();
-          if (B->x == 0)
+          if (B->x == nullptr)
             B->x = &dummy;
 
           cholmod_factor *L;
           BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
           L = CHOLMOD_NAME(analyze) (A, cm);
           CHOLMOD_NAME(factorize) (A, L, cm);
           if (calc_cond)
             rcond = CHOLMOD_NAME(rcond)(L, cm);
diff --git a/liboctave/array/dSparse.cc b/liboctave/array/dSparse.cc
--- a/liboctave/array/dSparse.cc
+++ b/liboctave/array/dSparse.cc
@@ -5761,30 +5761,30 @@ SparseMatrix::fsolve (MatrixType& mattyp
 #else
           A->itype = CHOLMOD_INT;
 #endif
           A->dtype = CHOLMOD_DOUBLE;
           A->stype = 1;
           A->xtype = CHOLMOD_REAL;
 
           A->x = data ();
-          if (A->x == 0)
+          if (A->x == nullptr)
             A->x = &dummy;
 
           cholmod_dense Bstore;
           cholmod_dense *B = &Bstore;
           B->nrow = b.rows ();
           B->ncol = b.cols ();
           B->d = B->nrow;
           B->nzmax = B->nrow * B->ncol;
           B->dtype = CHOLMOD_DOUBLE;
           B->xtype = CHOLMOD_REAL;
 
           B->x = const_cast<double *>(b.fortran_vec ());
-          if (B->x == 0)
+          if (B->x == nullptr)
             B->x = &dummy;
 
           cholmod_factor *L;
           BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
           L = CHOLMOD_NAME(analyze) (A, cm);
           CHOLMOD_NAME(factorize) (A, L, cm);
           if (calc_cond)
             rcond = CHOLMOD_NAME(rcond)(L, cm);
@@ -5984,17 +5984,17 @@ SparseMatrix::fsolve (MatrixType& mattyp
 #else
           A->itype = CHOLMOD_INT;
 #endif
           A->dtype = CHOLMOD_DOUBLE;
           A->stype = 1;
           A->xtype = CHOLMOD_REAL;
 
           A->x = data ();
-          if (A->x == 0)
+          if (A->x == nullptr)
             A->x = &dummy;
 
           cholmod_sparse Bstore;
           cholmod_sparse *B = &Bstore;
           B->nrow = b.rows ();
           B->ncol = b.cols ();
           B->p = b.cidx ();
           B->i = b.ridx ();
@@ -6007,17 +6007,17 @@ SparseMatrix::fsolve (MatrixType& mattyp
 #else
           B->itype = CHOLMOD_INT;
 #endif
           B->dtype = CHOLMOD_DOUBLE;
           B->stype = 0;
           B->xtype = CHOLMOD_REAL;
 
           B->x = b.data ();
-          if (B->x == 0)
+          if (B->x == nullptr)
             B->x = &dummy;
 
           cholmod_factor *L;
           BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
           L = CHOLMOD_NAME(analyze) (A, cm);
           CHOLMOD_NAME(factorize) (A, L, cm);
           if (calc_cond)
             rcond = CHOLMOD_NAME(rcond)(L, cm);
@@ -6253,30 +6253,30 @@ SparseMatrix::fsolve (MatrixType& mattyp
 #else
           A->itype = CHOLMOD_INT;
 #endif
           A->dtype = CHOLMOD_DOUBLE;
           A->stype = 1;
           A->xtype = CHOLMOD_REAL;
 
           A->x = data ();
-          if (A->x == 0)
+          if (A->x == nullptr)
             A->x = &dummy;
 
           cholmod_dense Bstore;
           cholmod_dense *B = &Bstore;
           B->nrow = b.rows ();
           B->ncol = b.cols ();
           B->d = B->nrow;
           B->nzmax = B->nrow * B->ncol;
           B->dtype = CHOLMOD_DOUBLE;
           B->xtype = CHOLMOD_COMPLEX;
 
           B->x = const_cast<Complex *>(b.fortran_vec ());
-          if (B->x == 0)
+          if (B->x == nullptr)
             B->x = &dummy;
 
           cholmod_factor *L;
           BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
           L = CHOLMOD_NAME(analyze) (A, cm);
           CHOLMOD_NAME(factorize) (A, L, cm);
           if (calc_cond)
             rcond = CHOLMOD_NAME(rcond)(L, cm);
@@ -6496,17 +6496,17 @@ SparseMatrix::fsolve (MatrixType& mattyp
 #else
           A->itype = CHOLMOD_INT;
 #endif
           A->dtype = CHOLMOD_DOUBLE;
           A->stype = 1;
           A->xtype = CHOLMOD_REAL;
 
           A->x = data ();
-          if (A->x == 0)
+          if (A->x == nullptr)
             A->x = &dummy;
 
           cholmod_sparse Bstore;
           cholmod_sparse *B = &Bstore;
           B->nrow = b.rows ();
           B->ncol = b.cols ();
           B->p = b.cidx ();
           B->i = b.ridx ();
@@ -6519,17 +6519,17 @@ SparseMatrix::fsolve (MatrixType& mattyp
 #else
           B->itype = CHOLMOD_INT;
 #endif
           B->dtype = CHOLMOD_DOUBLE;
           B->stype = 0;
           B->xtype = CHOLMOD_COMPLEX;
 
           B->x = b.data ();
-          if (B->x == 0)
+          if (B->x == nullptr)
             B->x = &dummy;
 
           cholmod_factor *L;
           BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE;
           L = CHOLMOD_NAME(analyze) (A, cm);
           CHOLMOD_NAME(factorize) (A, L, cm);
           if (calc_cond)
             rcond = CHOLMOD_NAME(rcond)(L, cm);
