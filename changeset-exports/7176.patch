# HG changeset patch
# User jwe
# Date 1195072927 0
#      Wed Nov 14 20:42:07 2007 +0000
# Node ID 6525eb2fba0ffcb5ff0d41198cdc5c40fe9c7475
# Parent  5ff4da7bd2e736f3ea65cff681d8e1257de8bf3c
[project @ 2007-11-14 20:42:06 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,14 @@
+2007-11-14  John W. Eaton  <jwe@octave.org>
+
+	* lo-specfun.cc (zbesi): When alpha is negative, don't limit
+	correction to half-integer values.  From Eric Chassande-Mottin
+	<echassandemottin@gmail.com>.
+
 2007-11-07  Michael Goffioul <michael.goffioul@gmail.com>
 
 	* dMatrix.cc, CMatrix.cc: Help MSVC compiler to resolve
 	ambiguities related to math functions (in C++ mode).
 
 2007-11-06  David Bateman  <dbateman@free.fr>
 
 	* intNDArray.cc (intNDArray<T> intNDArray<T>::sum (int) const):
diff --git a/liboctave/lo-specfun.cc b/liboctave/lo-specfun.cc
--- a/liboctave/lo-specfun.cc
+++ b/liboctave/lo-specfun.cc
@@ -406,19 +406,18 @@ zbesi (const Complex& z, double alpha, i
   else
     {
       alpha = -alpha;
 
       Complex tmp = zbesi (z, alpha, kode, ierr);
 
       if (ierr == 0 || ierr == 3)
 	{
-	  if (! is_integer_value (alpha - 0.5))
-	    tmp += (2.0 / M_PI) * sin (M_PI * alpha)
-	      * zbesk (z, alpha, kode, ierr);
+	  tmp += (2.0 / M_PI) * sin (M_PI * alpha)
+	    * zbesk (z, alpha, kode, ierr);
 
 	  retval = bessel_return_value (tmp, ierr);
 	}
       else
 	retval = Complex (octave_NaN, octave_NaN);
     }
 
   return retval;
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2007-11-14  John W. Eaton  <jwe@octave.org>
+
+	* graphics.h.in (base_properties::tag): New property.
+	(base_properties::get_tag, base_properties::set_tag): New functions.
+	(root_figure::set, root_figure::get, figure::set, figure::get,
+	axes::set, axes::get, line::set, line::get, text::set, text::get,
+	patch::set, patch::get, surface::set, surface::get): Handle tag.
+	
 2007-11-14  Joseph P. Skudlarek  <Jskud@Jskud.com>
 
 	* DLD-FUNCTIONS/regexp.cc: Undo previous change.
 
 2007-11-14  John W. Eaton  <jwe@octave.org>
 
 	* mex.cc (mex::mark, mex::unmark): Now public.
 	(mex::persistent): Delete.
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -700,16 +700,27 @@ base_properties::remove_child (const gra
 	  if (i != k)
 	    new_kids(j++) = children(i);
 	}
       children = new_kids;
     }
 }
 
 void
+base_properties::set_tag (const octave_value& val)
+{
+  std::string tmp = val.string_value ();
+
+  if (! error_state)
+    tag = tmp;
+  else
+    error ("set: expecting tag to be a character string");
+}
+
+void
 base_properties::set_parent (const octave_value& val)
 {
   double tmp = val.double_value ();
 
   graphics_handle new_parent = octave_NaN;
 
   if (! error_state)
     {
@@ -771,44 +782,49 @@ root_figure::properties::set_currentfigu
   else
     gripe_set_invalid ("currentfigure");
 }
 
 void
 root_figure::properties::set (const property_name& name,
 			      const octave_value& val)
 {
-  if (name.compare ("currentfigure"))
+  if (name.compare ("tag"))
+    set_tag (val);
+  else if (name.compare ("currentfigure"))
     set_currentfigure (val);
   else if (name.compare ("children"))
     children = maybe_set_children (children, val);
   else if (name.compare ("visible"))
     set_visible (val);
   else
     warning ("set: invalid property `%s'", name.c_str ());
 }
 
 octave_value root_figure::properties::get (void) const
 {
   Octave_map m;
 
+  m.assign ("tag", tag);
   m.assign ("type", type);
   m.assign ("currentfigure", currentfigure.as_octave_value ());
   m.assign ("children", children);
   m.assign ("visible", visible);
 
   return m;
 }
 
 octave_value 
 root_figure::properties::get (const property_name& name) const
 {
   octave_value retval;
 
-  if (name.compare ("type"))
+  if (name.compare ("tag"))
+    retval = type;
+  else if (name.compare ("tag"))
     retval = type;
   else if (name.compare ("currentfigure"))
     retval = currentfigure.as_octave_value ();
   else if (name.compare ("children"))
     retval = children;
   else if (name.compare ("visible"))
     retval = visible;
   else
@@ -862,17 +878,19 @@ figure::properties::set_visible (const o
     }
 }
 
 void
 figure::properties::set (const property_name& name, const octave_value& val)
 {
   bool modified = true;
 
-  if (name.compare ("children"))
+  if (name.compare ("tag"))
+    set_tag (val);
+  else if (name.compare ("children"))
     children = maybe_set_children (children, val);
   else if (name.compare ("__modified__"))
     {
       __modified__ = val.bool_value ();
       modified = false;
     }
   else if (name.compare ("__plot_stream__"))
     set___plot_stream__ (val);
@@ -898,16 +916,17 @@ figure::properties::set (const property_
     mark_modified ();
 }
 
 octave_value
 figure::properties::get (void) const
 {
   Octave_map m;
 
+  m.assign ("tag", tag);
   m.assign ("type", type);
   m.assign ("parent", parent.as_octave_value ());
   m.assign ("children", children);
   m.assign ("__modified__", __modified__);
   m.assign ("__plot_stream__", __plot_stream__);
   m.assign ("nextplot", nextplot);
   m.assign ("closerequestfcn", closerequestfcn);
   m.assign ("currentaxes", currentaxes.as_octave_value ());
@@ -918,17 +937,19 @@ figure::properties::get (void) const
   return m;
 }
 
 octave_value
 figure::properties::get (const property_name& name) const
 {
   octave_value retval;
 
-  if (name.compare ("type"))
+  if (name.compare ("tag"))
+    retval = tag;
+  else if (name.compare ("type"))
     retval = type;
   else if (name.compare ("parent"))
     retval = parent.as_octave_value ();
   else if (name.compare ("children"))
     retval = children;
   else if (name.compare ("__modified__"))
     retval = __modified__;
   else if (name.compare ("__plot_stream__"))
@@ -1170,17 +1191,19 @@ axes::properties::set_zlabel (const octa
   set_zlabel (::reparent (val, "set", "zlabel", __myhandle__, false));
 }
 
 void
 axes::properties::set (const property_name& name, const octave_value& val)
 {
   bool modified = true;
 
-  if (name.compare ("parent"))
+  if (name.compare ("tag"))
+    set_tag (val);
+  else if (name.compare ("parent"))
     set_parent (val);
   else if (name.compare ("children"))
     children = maybe_set_children (children, val);
   else if (name.compare ("__modified__"))
     {
       __modified__ = val.bool_value ();
       modified = false;
     }
@@ -1413,16 +1436,17 @@ axes::properties::get_zlabel (void) cons
   return zlabel;
 }
 
 octave_value
 axes::properties::get (void) const
 {
   Octave_map m;
 
+  m.assign ("tag", tag);
   m.assign ("type", type);
   m.assign ("parent", parent.as_octave_value ());
   m.assign ("children", children);
   m.assign ("__modified__", __modified__);
   m.assign ("position", position);
   m.assign ("title", get_title().as_octave_value ());
   m.assign ("box", box);
   m.assign ("key", key);
@@ -1476,17 +1500,19 @@ axes::properties::get (void) const
   return m;
 }
 
 octave_value
 axes::properties::get (const property_name& name) const
 {
   octave_value retval;
 
-  if (name.compare ("type"))
+  if (name.compare ("tag"))
+    retval = tag;
+  else if (name.compare ("type"))
     retval = type;
   else if (name.compare ("parent"))
     retval = parent.value ();
   else if (name.compare ("children"))
     retval = children;
   else if (name.compare ("__modified__"))
     retval = __modified__;
   else if (name.compare ("position"))
@@ -1750,17 +1776,19 @@ line::properties::properties (const grap
     keylabel ("")
 { }
 
 void
 line::properties::set (const property_name& name, const octave_value& val)
 {
   bool modified = true;
 
-  if (name.compare ("parent"))
+  if (name.compare ("tag"))
+    set_tag (val);
+  else if (name.compare ("parent"))
     set_parent (val);
   else if (name.compare ("children"))
     children = maybe_set_children (children, val);
   else if (name.compare ("__modified__"))
     {
       __modified__ = val.bool_value ();
       modified = false;
     }
@@ -1804,16 +1832,17 @@ line::properties::set (const property_na
     mark_modified ();
 }
 
 octave_value
 line::properties::get (void) const
 {
   Octave_map m;
 
+  m.assign ("tag", tag);
   m.assign ("type", type);
   m.assign ("parent", parent.as_octave_value ());
   m.assign ("children", children);
   m.assign ("__modified__", __modified__);
   m.assign ("xdata", xdata);
   m.assign ("ydata", ydata);
   m.assign ("zdata", zdata);
   m.assign ("ldata", ldata);
@@ -1832,17 +1861,19 @@ line::properties::get (void) const
   return m;
 }
 
 octave_value
 line::properties::get (const property_name& name) const
 {
   octave_value retval;
 
-  if (name.compare ("type"))
+  if (name.compare ("tag"))
+    retval = tag;
+  else if (name.compare ("type"))
     retval = type;
   else if (name.compare ("parent"))
     retval = parent.as_octave_value ();
   else if (name.compare ("children"))
     retval = children;
   else if (name.compare ("__modified__"))
     retval = __modified__;
   else if (name.compare ("xdata"))
@@ -1924,17 +1955,19 @@ text::properties::properties (const grap
     fontweight (radio_values ("{normal}|bold|demi|light"))
 { }
 
 void
 text::properties::set (const property_name& name, const octave_value& val)
 {
   bool modified = true;
 
-  if (name.compare ("parent"))
+  if (name.compare ("tag"))
+    set_tag (val);
+  else if (name.compare ("parent"))
     set_parent (val);
   else if (name.compare ("children"))
     children = maybe_set_children (children, val);
   else if (name.compare ("__modified__"))
     {
       __modified__ = val.bool_value ();
       modified = false;
     }
@@ -1968,16 +2001,17 @@ text::properties::set (const property_na
     mark_modified ();
 }
 
 octave_value
 text::properties::get (void) const
 {
   Octave_map m;
 
+  m.assign ("tag", tag);
   m.assign ("type", type);
   m.assign ("parent", parent.as_octave_value ());
   m.assign ("children", children);
   m.assign ("__modified__", __modified__);
   m.assign ("string", string);
   m.assign ("units", units);
   m.assign ("position", position);
   m.assign ("rotation", rotation);
@@ -1991,17 +2025,19 @@ text::properties::get (void) const
   return m;
 }
 
 octave_value
 text::properties::get (const property_name& name) const
 {
   octave_value retval;
 
-  if (name.compare ("type"))
+  if (name.compare ("tag"))
+    retval = tag;
+  else if (name.compare ("type"))
     retval = type;
   else if (name.compare ("parent"))
     retval = parent.as_octave_value ();
   else if (name.compare ("children"))
     retval = children;
   else if (name.compare ("__modified__"))
     retval = __modified__;
   else if (name.compare ("string"))
@@ -2064,17 +2100,19 @@ image::properties::properties (const gra
 { }
 
 void
 image::properties::set (const property_name& name,
 			const octave_value& val)
 {
   bool modified = true;
 
-  if (name.compare ("parent"))
+  if (name.compare ("tag"))
+    set_tag (val);
+  else if (name.compare ("parent"))
     set_parent (val);
   else if (name.compare ("children"))
     children = maybe_set_children (children, val);
   else if (name.compare ("__modified__"))
     {
       __modified__ = val.bool_value ();
       modified = false;
     }
@@ -2094,33 +2132,36 @@ image::properties::set (const property_n
     mark_modified ();
 }
 
 octave_value
 image::properties::get (void) const
 {
   Octave_map m;
 
+  m.assign ("tag", tag);
   m.assign ("type", type);
   m.assign ("parent", parent.as_octave_value ());
   m.assign ("children", children);
   m.assign ("__modified__", __modified__);
   m.assign ("cdata", cdata);
   m.assign ("xdata", xdata);
   m.assign ("ydata", ydata);
 
   return m;
 }
 
 octave_value
 image::properties::get (const property_name& name) const
 {
   octave_value retval;
 
-  if (name.compare ("type"))
+  if (name.compare ("tag"))
+    retval = tag;
+  else if (name.compare ("type"))
     retval = type;
   else if (name.compare ("parent"))
     retval = parent.as_octave_value ();
   else if (name.compare ("children"))
     retval = children;
   else if (name.compare ("__modified__"))
     retval = __modified__;
   else if (name.compare ("cdata"))
@@ -2173,17 +2214,19 @@ patch::properties::properties (const gra
 { }
 
 void
 patch::properties::set (const property_name& name,
 			const octave_value& val)
 {
   bool modified = true;
 
-  if (name.compare ("parent"))
+  if (name.compare ("tag"))
+    set_tag (val);
+  else if (name.compare ("parent"))
     set_parent (val);
   else if (name.compare ("children"))
     children = maybe_set_children (children, val);
   else if (name.compare ("__modified__"))
     {
       __modified__ = val.bool_value ();
       modified = false;
     }
@@ -2229,16 +2272,17 @@ patch::properties::set (const property_n
     mark_modified ();
 }
 
 octave_value
 patch::properties::get (void) const
 {
   Octave_map m;
 
+  m.assign ("tag", tag);
   m.assign ("type", type);
   m.assign ("parent", parent.as_octave_value ());
   m.assign ("children", children);
   m.assign ("__modified__", __modified__);
   m.assign ("cdata", cdata);
   m.assign ("xdata", xdata);
   m.assign ("ydata", ydata);
   m.assign ("zdata", zdata);
@@ -2258,17 +2302,19 @@ patch::properties::get (void) const
   return m;
 }
 
 octave_value
 patch::properties::get (const property_name& name) const
 {
   octave_value retval;
 
-  if (name.compare ("type"))
+  if (name.compare ("tag"))
+    retval = tag;
+  else if (name.compare ("type"))
     retval = type;
   else if (name.compare ("parent"))
     retval = parent.as_octave_value ();
   else if (name.compare ("children"))
     retval = children;
   else if (name.compare ("__modified__"))
     retval = __modified__;
   else if (name.compare ("cdata"))
@@ -2358,17 +2404,19 @@ surface::properties::properties (const g
 { }
 
 void
 surface::properties::set (const property_name& name,
 			  const octave_value& val)
 {
   bool modified = true;
 
-  if (name.compare ("parent"))
+  if (name.compare ("tag"))
+    set_tag (val);
+  else if (name.compare ("parent"))
     set_parent (val);
   else if (name.compare ("children"))
     children = maybe_set_children (children, val);
   else if (name.compare ("__modified__"))
     {
       __modified__ = val.bool_value ();
       modified = false;
     }
@@ -2410,16 +2458,17 @@ surface::properties::set (const property
     mark_modified ();
 }
 
 octave_value
 surface::properties::get (void) const
 {
   Octave_map m;
 
+  m.assign ("tag", tag);
   m.assign ("type", type);
   m.assign ("parent", parent.as_octave_value ());
   m.assign ("children", children);
   m.assign ("__modified__", __modified__);
   m.assign ("xdata", xdata);
   m.assign ("ydata", ydata);
   m.assign ("zdata", zdata);
   m.assign ("cdata", cdata);
@@ -2437,17 +2486,19 @@ surface::properties::get (void) const
   return m;
 }
 
 octave_value
 surface::properties::get (const property_name& name) const
 {
   octave_value retval;
 
-  if (name.compare ("type"))
+  if (name.compare ("tag"))
+    retval = tag;
+  else if (name.compare ("type"))
     retval = type;
   else if (name.compare ("parent"))
     retval = parent.as_octave_value ();
   else if (name.compare ("children"))
     retval = children;
   else if (name.compare ("__modified__"))
     retval = __modified__;
   else if (name.compare ("xdata"))
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -644,55 +644,60 @@ operator > (const graphics_handle& a, co
 
 // ---------------------------------------------------------------------
 
 class base_graphics_object;
 
 class base_properties
 {
 public:
-  base_properties (const std::string& t = "unknown",
+  base_properties (const std::string& ty = "unknown",
 		   const graphics_handle& mh = graphics_handle (),
 		   const graphics_handle& p = graphics_handle ())
-    : type (t), __modified__ (true), __myhandle__ (mh), parent (p),
-      children () { }
+    : tag (), type (ty), __modified__ (true), __myhandle__ (mh),
+      parent (p), children () { }
 
   virtual ~base_properties (void) { }
 
   virtual std::string graphics_object_name (void) const { return "unknonwn"; }
 
   void mark_modified (void);
 
   void override_defaults (base_graphics_object& obj);
 
   // Look through DEFAULTS for properties with given CLASS_NAME, and
   // apply them to the current object with set (virtual method).
 
   void set_from_list (base_graphics_object& obj, property_list& defaults);
 
   virtual void set (const property_name&, const octave_value&) { }
 
+  std::string get_tag (void) const { return tag; }
+
   graphics_handle get_parent (void) const { return parent; }
 
   void remove_child (const graphics_handle& h);
 
   void adopt (const graphics_handle& h)
   {
     octave_idx_type n = children.numel ();
     children.resize (1, n+1);
     children(n) = h.value ();
   }
 
+  void set_tag (const octave_value& val);
+
   void set_parent (const octave_value& val);
 
   void reparent (const graphics_handle& new_parent) { parent = new_parent; }
 
   virtual void delete_children (void);
 
 protected:
+  std::string tag;
   std::string type;
   bool __modified__;
   graphics_handle __myhandle__;
   graphics_handle parent;
   Matrix children;
 };
 
 class base_graphics_object
