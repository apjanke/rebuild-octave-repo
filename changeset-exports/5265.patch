# HG changeset patch
# User jwe
# Date 1112707729 0
#      Tue Apr 05 13:28:49 2005 +0000
# Node ID 86185152b7a44c005f4cdfb6e656be0b04a9972b
# Parent  95e054384359f984665037b413b880e1c8b34618
[project @ 2005-04-05 13:28:49 by jwe]

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -3119,17 +3119,17 @@ assignN (Array<LT>& lhs, const Array<RT>
 			  retval = 0;
 		    }
 		  else
 		    {
 		      lhs.resize_and_fill (new_dims, rfv);
 
 		      if  (! final_lhs_dims.any_zero ())
 			{
-			  int n = Array<LT>::get_size (frozen_len);
+			  n = Array<LT>::get_size (frozen_len);
 
 			  Array<int> result_idx (lhs_dims_len, 0);
 
 			  for (int i = 0; i < n; i++)
 			    {
 			      Array<int> elt_idx = get_elt_idx (idx, result_idx);
 
 			      lhs.elem (elt_idx) = rhs.elem (i);
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,12 @@
+2005-04-05  John W. Eaton  <jwe@octave.org>
+
+	* Array.cc (assignN): Avoid shadowed declaration in previous change.
+
 2005-04-01  John W. Eaton  <jwe@octave.org>
 
 	* Array.cc (assignN): For A(IDX-LIST) = RHS with A previously
 	undefined, correctly match colons in IDX-LIST with RHS dimensions
 	when resizing A.  When performing the assignment, just check that
 	the number of elements in RHS matches the number of elements
 	indexed by IDX-LIST.
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2005-04-05  John W. Eaton  <jwe@octave.org>
+
+	* pt-assign.cc (tree_multi_assignment::rvalue):
+	Allow assignments of the form [a,b,c] = x{:}.
+
 2005-03-30  John W. Eaton  <jwe@octave.org>
 
 	* mappers.cc (install_mapper_functions): Use std:: as needed.
 	* defun-int.h (DEFUN_MAPPER_INTERNAL): Don't use X_CAST on
 	function pointer args.
 
 	* ov-complex.cc, ov-cx-mat.cc, xpow.cc, ls-mat5.cc: Use std:: for
 	Complex functions instead of relying on wrappers from oct-cmplx.h.
diff --git a/src/pt-assign.cc b/src/pt-assign.cc
--- a/src/pt-assign.cc
+++ b/src/pt-assign.cc
@@ -219,16 +219,28 @@ tree_multi_assignment::rvalue (int)
 	  eval_error ();
 	}
       else
 	{
 	  int k = 0;
 
 	  int n = rhs_val.length ();
 
+	  if (n == 1)
+	    {
+	      octave_value tmp = rhs_val(0);
+
+	      if (tmp.is_cs_list ())
+		{
+		  rhs_val = tmp.list_value ();
+
+		  n = rhs_val.length ();
+		}
+	    }
+
 	  retval.resize (n, octave_value ());
 
 	  for (tree_argument_list::iterator p = lhs->begin ();
 	       p != lhs->end ();
 	       p++)
 	    {
 	      tree_expression *lhs_elt = *p;
 
