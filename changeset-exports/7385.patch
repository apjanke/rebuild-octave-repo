# HG changeset patch
# User jwe
# Date 1200430150 0
#      Tue Jan 15 20:49:10 2008 +0000
# Node ID 8b7b4f58199f41c0a2c239586c00283e9f9affaf
# Parent  47c9192547911f4862220943f5f06932763f1db1
[project @ 2008-01-15 20:49:09 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,17 @@
+2008-01-15  Thomas Weber  <thomas.weber.mail@gmail.com>
+
+	* elfun/acot.m, elfun/acoth.m, elfun/acsc.m, elfun/acsch.m,
+	elfun/asec.m, elfun/asech.m, elfun/cot.m, elfun/coth.m,
+	elfun/csc.m,elfun/csch.m, elfun/lcm.m, elfun/sec.m, elfun/sech.m,
+	general/rem.m, miscellaneous/bincoeff.m, miscellaneous/xor.m,
+	specfun/beta.m, specfun/log2.m, specfun/pow2.m:
+	Move tests here from test/test_arith.m.
+
 2008-01-15  John W. Eaton  <jwe@octave.org>
 
 	* linear-algebra/__norm__.m: Use sum(abs(x),2), not sum(abs(x.')).
 
 2008-01-15  Michael Goffioul  <michael.goffioul@gmail.com>
 
 	* plot/drawnow.m, plot/__go_draw_figure__.m, plot/__go_draw_axes__.m: 
 	Call __get__ instead of get.
diff --git a/scripts/elfun/acot.m b/scripts/elfun/acot.m
--- a/scripts/elfun/acot.m
+++ b/scripts/elfun/acot.m
@@ -28,8 +28,22 @@ function w = acot (z)
 
   if (nargin != 1)
     print_usage ();
   endif
 
   w = atan (1./z);
 
 endfunction
+
+%!test
+%! rt2 = sqrt (2);
+%! rt3 = sqrt (3);
+%! x = [rt3, 1, rt3/3, 0, -rt3/3, -1, -rt3];
+%! v = [pi/6, pi/4, pi/3, pi/2, -pi/3, -pi/4, -pi/6];
+%! assert(all (abs (acot (x) - v) < sqrt (eps))
+%! 
+%! );
+
+%!error acot ();
+
+%!error acot (1, 2);
+
diff --git a/scripts/elfun/acoth.m b/scripts/elfun/acoth.m
--- a/scripts/elfun/acoth.m
+++ b/scripts/elfun/acoth.m
@@ -28,8 +28,20 @@ function w = acoth (z)
 
   if (nargin != 1)
     print_usage ();
   endif
 
   w = atanh (1 ./ z);
 
 endfunction
+
+%!test
+%! rt2 = sqrt (2);
+%! rt3 = sqrt (3);
+%! v = -i*[pi/6, pi/4, pi/3, -pi/3, -pi/4, -pi/6];
+%! x = i*[rt3, 1, rt3/3, -rt3/3, -1, -rt3];
+%! assert(all (abs (acoth (x) - v) < sqrt (eps)));
+
+%!error acoth ();
+
+%!error acoth (1, 2);
+
diff --git a/scripts/elfun/acsc.m b/scripts/elfun/acsc.m
--- a/scripts/elfun/acsc.m
+++ b/scripts/elfun/acsc.m
@@ -28,8 +28,21 @@ function w = acsc (z)
 
   if (nargin != 1)
     print_usage ();
   endif
 
   w = asin (1 ./ z);
 
 endfunction
+
+%!test
+%! rt2 = sqrt (2);
+%! rt3 = sqrt (3);
+%! v = [pi/6, pi/4, pi/3, pi/2, pi/3, pi/4, pi/6];
+%! x = [2, rt2, 2*rt3/3, 1, 2*rt3/3, rt2, 2];
+%! assert(all (abs (acsc (x) - v) < sqrt (eps))
+%! );
+
+%!error acsc ();
+
+%!error acsc (1, 2);
+
diff --git a/scripts/elfun/acsch.m b/scripts/elfun/acsch.m
--- a/scripts/elfun/acsch.m
+++ b/scripts/elfun/acsch.m
@@ -28,8 +28,19 @@ function w = acsch (z)
 
   if (nargin != 1)
     print_usage ();
   endif
 
   w = asinh (1 ./ z);
 
 endfunction
+
+%!test
+%! v = [pi/2*i, -pi/2*i];
+%! x = [-i, i];
+%! assert(all (abs (acsch (x) - v) < sqrt (eps))
+%! );
+
+%!error acsch ();
+
+%!error acsch (1, 2);
+
diff --git a/scripts/elfun/asec.m b/scripts/elfun/asec.m
--- a/scripts/elfun/asec.m
+++ b/scripts/elfun/asec.m
@@ -28,8 +28,22 @@ function w = asec (z)
 
   if (nargin != 1)
     print_usage ();
   endif
 
   w = acos (1 ./ z);
 
 endfunction
+
+%!test
+%! rt2 = sqrt (2);
+%! rt3 = sqrt (3);
+%! v = [0, pi/6, pi/4, pi/3, 2*pi/3, 3*pi/4, 5*pi/6, pi];
+%! x = [1, 2*rt3/3, rt2, 2, -2, -rt2, -2*rt3/3, -1];
+%! assert(all (abs (asec (x) - v) < sqrt (eps))
+%! 
+%! );
+
+%!error asec ();
+
+%!error asec (1, 2);
+
diff --git a/scripts/elfun/asech.m b/scripts/elfun/asech.m
--- a/scripts/elfun/asech.m
+++ b/scripts/elfun/asech.m
@@ -28,8 +28,19 @@ function w = asech (z)
 
   if (nargin != 1)
     print_usage ();
   endif
 
   w = acosh (1 ./ z);
 
 endfunction
+
+%!test
+%! v = [0, pi*i];
+%! x = [1, -1];
+%! assert(all (abs (asech (x) - v) < sqrt (eps))
+%! );
+
+%!error asech ();
+
+%!error asech (1, 2);
+
diff --git a/scripts/elfun/cot.m b/scripts/elfun/cot.m
--- a/scripts/elfun/cot.m
+++ b/scripts/elfun/cot.m
@@ -28,8 +28,20 @@ function w = cot (z)
 
   if (nargin != 1)
     print_usage ();
   endif
 
   w = 1 ./ tan(z);
 
 endfunction
+
+%!test
+%! rt2 = sqrt (2);
+%! rt3 = sqrt (3);
+%! x = [pi/6, pi/4, pi/3, pi/2, 2*pi/3, 3*pi/4, 5*pi/6];
+%! v = [rt3, 1, rt3/3, 0, -rt3/3, -1, -rt3];
+%! assert(all (abs (cot (x) - v) < sqrt (eps)));
+
+%!error cot ();
+
+%!error cot (1, 2);
+
diff --git a/scripts/elfun/coth.m b/scripts/elfun/coth.m
--- a/scripts/elfun/coth.m
+++ b/scripts/elfun/coth.m
@@ -28,8 +28,18 @@ function w = coth (z)
 
   if (nargin != 1)
     print_usage ();
   endif
 
   w = 1 ./ tanh (z);
 
 endfunction
+
+%!test
+%! x = [pi/2*i, 3*pi/2*i];
+%! v = [0, 0];
+%! assert(all (abs (coth (x) - v) < sqrt (eps)));
+
+%!error coth ();
+
+%!error coth (1, 2);
+
diff --git a/scripts/elfun/csc.m b/scripts/elfun/csc.m
--- a/scripts/elfun/csc.m
+++ b/scripts/elfun/csc.m
@@ -28,8 +28,20 @@ function w = csc (z)
 
   if (nargin != 1)
     print_usage ();
   endif
 
   w = 1 ./ sin(z);
 
 endfunction
+
+%!test
+%! rt2 = sqrt (2);
+%! rt3 = sqrt (3);
+%! x = [pi/6, pi/4, pi/3, pi/2, 2*pi/3, 3*pi/4, 5*pi/6];
+%! v = [2, rt2, 2*rt3/3, 1, 2*rt3/3, rt2, 2];
+%! assert(all (abs (csc (x) - v) < sqrt (eps)));
+
+%!error csc ();
+
+%!error csc (1, 2);
+
diff --git a/scripts/elfun/csch.m b/scripts/elfun/csch.m
--- a/scripts/elfun/csch.m
+++ b/scripts/elfun/csch.m
@@ -28,8 +28,18 @@ function w = csch (z)
 
   if (nargin != 1)
     print_usage ();
   endif
 
   w = 1 ./ sinh(z);
 
 endfunction
+
+%!test
+%! x = [pi/2*i, 3*pi/2*i];
+%! v = [-i, i];
+%! assert(all (abs (csch (x) - v) < sqrt (eps)));
+
+%!error csch ();
+
+%!error csch (1, 2);
+
diff --git a/scripts/elfun/lcm.m b/scripts/elfun/lcm.m
--- a/scripts/elfun/lcm.m
+++ b/scripts/elfun/lcm.m
@@ -88,8 +88,17 @@ function l = lcm (varargin)
       idx = find (l == 0 || a == 0);
       a = abs (a);
       l = l .* a ./ gcd (l, a);
       l(idx) = 0;
     endfor
   endif
 
 endfunction
+
+%!assert(lcm (3, 5, 7, 15) == lcm ([3, 5, 7, 15]) && lcm ([3, 5, 7,15]) == 105);
+
+%!error lcm ();
+
+%!test
+%! s.a = 1;
+%! fail("lcm (s)");
+
diff --git a/scripts/elfun/sec.m b/scripts/elfun/sec.m
--- a/scripts/elfun/sec.m
+++ b/scripts/elfun/sec.m
@@ -28,8 +28,20 @@ function w = sec (z)
 
   if (nargin != 1)
     print_usage ();
   endif
 
   w = 1 ./ cos(z);
 
 endfunction
+
+%!test
+%! rt2 = sqrt (2);
+%! rt3 = sqrt (3);
+%! x = [0, pi/6, pi/4, pi/3, 2*pi/3, 3*pi/4, 5*pi/6, pi];
+%! v = [1, 2*rt3/3, rt2, 2, -2, -rt2, -2*rt3/3, -1];
+%! assert(all (abs (sec (x) - v) < sqrt (eps)));
+
+%!error sec ();
+
+%!error sec (1, 2);
+
diff --git a/scripts/elfun/sech.m b/scripts/elfun/sech.m
--- a/scripts/elfun/sech.m
+++ b/scripts/elfun/sech.m
@@ -28,8 +28,18 @@ function w = sech (z)
 
 if (nargin != 1)
     print_usage ();
   endif
 
   w = 1 ./ cosh(z);
 
 endfunction
+
+%!test
+%! x = [0, pi*i];
+%! v = [1, -1];
+%! assert(all (abs (sech (x) - v) < sqrt (eps)));
+
+%!error sech ();
+
+%!error sech (1, 2);
+
diff --git a/scripts/general/rem.m b/scripts/general/rem.m
--- a/scripts/general/rem.m
+++ b/scripts/general/rem.m
@@ -48,8 +48,22 @@ function r = rem (x, y)
 
   if (isreal (x) && isreal (y))
     r = x - y .* fix (x ./ y);
   else
     error ("rem: complex arguments are not allowed");
   endif
 
 endfunction
+
+%!assert(all (all (rem ([1, 2, 3; -1, -2, -3], 2) == [1, 0, 1; -1, 0, -1])));
+
+%!assert(all (all (rem ([1, 2, 3; -1, -2, -3], 2 * ones (2, 3))
+%! == [1, 0, 1; -1, 0, -1])));
+
+%!error rem ();
+
+%!error rem (1, 2, 3);
+
+%!error rem ([1, 2], [3, 4, 5]);
+
+%!error rem (i, 1);
+
diff --git a/scripts/miscellaneous/bincoeff.m b/scripts/miscellaneous/bincoeff.m
--- a/scripts/miscellaneous/bincoeff.m
+++ b/scripts/miscellaneous/bincoeff.m
@@ -97,8 +97,15 @@ function b = bincoeff (n, k)
   ind = (n != round (n));
   b(ind) = real (b(ind));
 
 endfunction
 
 %!assert(bincoeff(4,2), 6)
 %!assert(bincoeff(2,4), 0)
 %!assert(bincoeff(0.4,2), -.12, 8*eps)
+
+%!assert(bincoeff (5, 2) == 10 && bincoeff (50, 6) == 15890700);
+
+%!error bincoeff ();
+
+%!error bincoeff (1, 2, 3);
+
diff --git a/scripts/miscellaneous/xor.m b/scripts/miscellaneous/xor.m
--- a/scripts/miscellaneous/xor.m
+++ b/scripts/miscellaneous/xor.m
@@ -37,8 +37,18 @@ function z = xor (x, y)
     else
       error ("xor: x and y must be of common size or scalars");
     endif
   else
     print_usage ();
   endif
 
 endfunction
+
+%!assert((xor ([1, 1, 0, 0], [0, 1, 0, 1]) == [1, 0, 0, 1]
+%! && xor ([i, i, 0, 0], [1, 0, 1, 0]) == [0, 1, 1, 0]));
+
+%!assert(all (all (xor (eye (2), fliplr (eye (2))) == ones (2))));
+
+%!error xor ();
+
+%!error xor (1, 2, 3);
+
diff --git a/scripts/specfun/beta.m b/scripts/specfun/beta.m
--- a/scripts/specfun/beta.m
+++ b/scripts/specfun/beta.m
@@ -43,8 +43,21 @@ function retval = beta (a, b)
 
   if (nargin != 2)
     print_usage ();
   endif
 
   retval = exp (gammaln (a) + gammaln (b) - gammaln (a+b));
 
 endfunction
+
+%!test
+%! a=[1, 1.5, 2, 3];
+%! b=[4, 3, 2, 1];
+%! v1=beta(a,b);
+%! v2=beta(b,a);
+%! v3=gamma(a).*gamma(b)./gamma(a+b);
+%! assert(all(abs(v1-v2)<sqrt(eps)) && all(abs(v2-v3)<sqrt(eps)));
+
+%!error beta();
+
+%!error beta(1);
+
diff --git a/scripts/specfun/log2.m b/scripts/specfun/log2.m
--- a/scripts/specfun/log2.m
+++ b/scripts/specfun/log2.m
@@ -54,8 +54,14 @@ function [f, e] = log2 (x)
     e = (floor (log (f) / log (2)) + 1) .* (x != 0);
     f = sign (x) .* f ./ (2 .^ e);
   else
     error ("log2 takes at most 2 output arguments");
   endif
 
 endfunction
 
+%!assert(all (abs (log2 ([1/4, 1/2, 1, 2, 4]) - [-2, -1, 0, 1, 2]) < sqrt (eps)));
+
+%!error log2 ();
+
+%!error log2 (1, 2);
+
diff --git a/scripts/specfun/pow2.m b/scripts/specfun/pow2.m
--- a/scripts/specfun/pow2.m
+++ b/scripts/specfun/pow2.m
@@ -51,8 +51,23 @@ function y = pow2 (f, e)
     y = 2 .^ f;
   elseif (nargin == 2)
     y = f .* (2 .^ e);
   else
     print_usage ();
   endif
 
 endfunction
+
+%!test
+%! x = [3, 0, -3];
+%! v = [8, 1, .125];
+%! assert(all (abs (pow2 (x) - v) < sqrt (eps)));
+
+%!test
+%! x = [3, 0, -3, 4, 0, -4, 5, 0, -5];
+%! y = [-2, -2, -2, 1, 1, 1, 3, 3, 3];
+%! z = x .* (2 .^ y);
+%! assert(all (abs (pow2 (x,y) - z) < sqrt (eps))
+%! );
+
+%!error pow2();
+
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,13 @@
 2008-01-15  John W. Eaton  <jwe@octave.org>
 
+	* mappers.cc (install_mapper_functions): Move test for asin here
+	from test/test_arith.m.
+
 	* graphics.h.in (class line::properties, class text::properties):
 	Rename erase_mode property to erasemode.
 
 2008-01-15  Michael Goffioul  <michael.goffioul@gmail.com>
 
 	* genprops.awk: Handle 'h' modifier for hidden properties.
 	Replace "get(void)" method with "get(bool all = false)" to allow
 	access to hidden properties.
diff --git a/src/mappers.cc b/src/mappers.cc
--- a/src/mappers.cc
+++ b/src/mappers.cc
@@ -243,16 +243,27 @@ arg (3 + 4i)\n\
 @end deftypefn");
 
   DEFUN_MAPPER (asin, 0, 0, 0, asin, 0, asin, -1.0, 1.0, 0, 1,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} asin (@var{x})\n\
 Compute the inverse sine of each element of @var{x}.\n\
 @end deftypefn");
 
+/*
+%!test
+%! rt2 = sqrt (2);
+%! rt3 = sqrt (3);
+%! v = [0, pi/6, pi/4, pi/3, pi/2, pi/3, pi/4, pi/6, 0];
+%! x = [0, 1/2, rt2/2, rt3/2, 1, rt3/2, rt2/2, 1/2, 0];
+%! assert(all (abs (asin (x) - v) < sqrt (eps)));
+%!error asin ();
+%!error asin (1, 2);
+*/
+
   DEFUN_MAPPER (asinh, 0, 0, 0, asinh, 0, asinh, 0.0, 0.0, 0, 0,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} asinh (@var{x})\n\
 Compute the inverse hyperbolic sine of each element of @var{x}.\n\
 @end deftypefn");
 
   DEFUN_MAPPER (atan, 0, 0, 0, atan, 0, atan, 0.0, 0.0, 0, 0,
     "-*- texinfo -*-\n\
diff --git a/test/ChangeLog b/test/ChangeLog
--- a/test/ChangeLog
+++ b/test/ChangeLog
@@ -1,8 +1,12 @@
+2008-01-15  Thomas Weber  <thomas.weber.mail@gmail.com>
+
+	* test_arith.m: Move tests to source files.
+
 2008-01-15  John W. Eaton  <jwe@octave.org>
 
 	* test_audio.m, test_control.m, test_image.m, test_optim.m,
 	test_plot.m, test_unix.m: Delete files with no tests.
 
 2007-12-21  John W. Eaton  <jwe@octave.org>
 
 	Version 3.0.0 released.
diff --git a/test/test_arith.m b/test/test_arith.m
--- a/test/test_arith.m
+++ b/test/test_arith.m
@@ -13,30 +13,16 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 %% Automatically generated from DejaGNU files
 
-%% test/octave.test/arith/beta-1.m
-%!test
-%! a=[1, 1.5, 2, 3];
-%! b=[4, 3, 2, 1];
-%! v1=beta(a,b);
-%! v2=beta(b,a);
-%! v3=gamma(a).*gamma(b)./gamma(a+b);
-%! assert(all(abs(v1-v2)<sqrt(eps)) && all(abs(v2-v3)<sqrt(eps)));
-
-%% test/octave.test/arith/beta-2.m
-%!error beta();
-
-%% test/octave.test/arith/beta-3.m
-%!error beta(1);
 
 %% test/octave.test/arith/betainc-1.m
 %!test
 %! a=[1, 1.5, 2, 3];
 %! b=[4, 3, 2, 1];
 %! v1=betainc(1,a,b);
 %! v2=[1,1,1,1];
 %! x = [.2, .4, .6, .8];
@@ -144,27 +130,16 @@
 %% test/octave.test/arith/gcd-2.m
 %!error <Invalid call to gcd.*> gcd ();
 
 %% test/octave.test/arith/gcd-3.m
 %!test
 %! s.a = 1;
 %! fail("gcd (s)");
 
-%% test/octave.test/arith/lcm-1.m
-%!assert(lcm (3, 5, 7, 15) == lcm ([3, 5, 7, 15]) && lcm ([3, 5, 7,15]) == 105);
-
-%% test/octave.test/arith/lcm-2.m
-%!error lcm ();
-
-%% test/octave.test/arith/lcm-3.m
-%!test
-%! s.a = 1;
-%! fail("lcm (s)");
-
 %% test/octave.test/arith/max-1.m
 %!assert (max ([1, 4, 2, 3]) == 4);
 %!assert (max ([1; -10; 5; -2]) == 5);
 
 %% test/octave.test/arith/max-2.m
 %!assert(all (max ([4, i 4.999; -2, 2, 3+4i]) == [4, 2, 3+4i]));
 
 %% test/octave.test/arith/max-3.m
@@ -181,52 +156,16 @@
 %!assert(all (min ([4, i; -2, 2]) == [-2, i]));
 
 %% test/octave.test/arith/min-3.m
 %!error <Invalid call to min.*> min ();
 
 %% test/octave.test/arith/min-4.m
 %!error <Invalid call to min.*> min (1, 2, 3, 4);
 
-%% test/octave.test/arith/pow2-1.m
-%!test
-%! x = [3, 0, -3];
-%! v = [8, 1, .125];
-%! assert(all (abs (pow2 (x) - v) < sqrt (eps)));
-
-%% test/octave.test/arith/pow2-2.m
-%!test
-%! x = [3, 0, -3, 4, 0, -4, 5, 0, -5];
-%! y = [-2, -2, -2, 1, 1, 1, 3, 3, 3];
-%! z = x .* (2 .^ y);
-%! assert(all (abs (pow2 (x,y) - z) < sqrt (eps))
-%! );
-
-%% test/octave.test/arith/pow2-3.m
-%!error pow2();
-
-%% test/octave.test/arith/rem-1.m
-%!assert(all (all (rem ([1, 2, 3; -1, -2, -3], 2) == [1, 0, 1; -1, 0, -1])));
-
-%% test/octave.test/arith/rem-2.m
-%!assert(all (all (rem ([1, 2, 3; -1, -2, -3], 2 * ones (2, 3))
-%! == [1, 0, 1; -1, 0, -1])));
-
-%% test/octave.test/arith/rem-3.m
-%!error rem ();
-
-%% test/octave.test/arith/rem-4.m
-%!error rem (1, 2, 3);
-
-%% test/octave.test/arith/rem-5.m
-%!error rem ([1, 2], [3, 4, 5]);
-
-%% test/octave.test/arith/rem-6.m
-%!error rem (i, 1);
-
 %% test/octave.test/arith/round-1.m
 %!assert((round (1) == 1 && round (1.1) == 1 && round (5.5) == 6
 %! && round (i) == i && round (2.5+3.5i) == 3+4i && round (-2.6) == -3));
 
 %% test/octave.test/arith/round-2.m
 %!assert(all (all (round ([1.1, -2.4; -3.7, 7.1]) == [1, -2; -4, 7])));
 
 %% test/octave.test/arith/round-3.m
@@ -270,29 +209,16 @@
 %!assert(all (all (abs ([1.1, 3i; 3+4i, -3-4i]) == [1.1, 3; 5, 5])));
 
 %% test/octave.test/arith/abs-3.m
 %!error abs ();
 
 %% test/octave.test/arith/abs-4.m
 %!error abs (1, 2);
 
-%% test/octave.test/arith/xor-1.m
-%!assert((xor ([1, 1, 0, 0], [0, 1, 0, 1]) == [1, 0, 0, 1]
-%! && xor ([i, i, 0, 0], [1, 0, 1, 0]) == [0, 1, 1, 0]));
-
-%% test/octave.test/arith/xor-2.m
-%!assert(all (all (xor (eye (2), fliplr (eye (2))) == ones (2))));
-
-%% test/octave.test/arith/xor-3.m
-%!error xor ();
-
-%% test/octave.test/arith/xor-4.m
-%!error xor (1, 2, 3);
-
 %% test/octave.test/arith/arg-1.m
 %!assert(arg (1) == 0 && arg (i) == pi/2 && arg (-1) == pi && arg (-i) == -pi/2);
 
 %% test/octave.test/arith/arg-2.m
 %!assert(all (all (arg ([1, i; -1, -i]) == [0, pi/2; pi, -pi/2])));
 
 %% test/octave.test/arith/arg-3.m
 %!error arg ();
@@ -349,25 +275,16 @@
 %!assert(all (abs (log10 ([0.01, 0.1, 1, 10, 100]) - [-2, -1, 0, 1, 2]) < sqrt (eps)));
 
 %% test/octave.test/arith/log10-2.m
 %!error log10 ();
 
 %% test/octave.test/arith/log10-3.m
 %!error log10 (1, 2);
 
-%% test/octave.test/arith/log2-1.m
-%!assert(all (abs (log2 ([1/4, 1/2, 1, 2, 4]) - [-2, -1, 0, 1, 2]) < sqrt (eps)));
-
-%% test/octave.test/arith/log2-2.m
-%!error log2 ();
-
-%% test/octave.test/arith/log2-3.m
-%!error log2 (1, 2);
-
 %% test/octave.test/arith/sin-1.m
 %!test
 %! rt2 = sqrt (2);
 %! rt3 = sqrt (3);
 %! x = [0, pi/6, pi/4, pi/3, pi/2, 2*pi/3, 3*pi/4, 5*pi/6, pi];
 %! v = [0, 1/2, rt2/2, rt3/2, 1, rt3/2, rt2/2, 1/2, 0];
 %! assert(all (abs (sin (x) - v) < sqrt (eps)));
 
@@ -400,74 +317,16 @@
 %! assert(all (abs (tan (x) - v) < sqrt (eps)));
 
 %% test/octave.test/arith/tan-2.m
 %!error tan ();
 
 %% test/octave.test/arith/tan-3.m
 %!error tan (1, 2);
 
-%% test/octave.test/arith/sec-1.m
-%!test
-%! rt2 = sqrt (2);
-%! rt3 = sqrt (3);
-%! x = [0, pi/6, pi/4, pi/3, 2*pi/3, 3*pi/4, 5*pi/6, pi];
-%! v = [1, 2*rt3/3, rt2, 2, -2, -rt2, -2*rt3/3, -1];
-%! assert(all (abs (sec (x) - v) < sqrt (eps)));
-
-%% test/octave.test/arith/sec-2.m
-%!error sec ();
-
-%% test/octave.test/arith/sec-3.m
-%!error sec (1, 2);
-
-%% test/octave.test/arith/csc-1.m
-%!test
-%! rt2 = sqrt (2);
-%! rt3 = sqrt (3);
-%! x = [pi/6, pi/4, pi/3, pi/2, 2*pi/3, 3*pi/4, 5*pi/6];
-%! v = [2, rt2, 2*rt3/3, 1, 2*rt3/3, rt2, 2];
-%! assert(all (abs (csc (x) - v) < sqrt (eps)));
-
-%% test/octave.test/arith/csc-2.m
-%!error csc ();
-
-%% test/octave.test/arith/csc-3.m
-%!error csc (1, 2);
-
-%% test/octave.test/arith/cot-1.m
-%!test
-%! rt2 = sqrt (2);
-%! rt3 = sqrt (3);
-%! x = [pi/6, pi/4, pi/3, pi/2, 2*pi/3, 3*pi/4, 5*pi/6];
-%! v = [rt3, 1, rt3/3, 0, -rt3/3, -1, -rt3];
-%! assert(all (abs (cot (x) - v) < sqrt (eps)));
-
-%% test/octave.test/arith/cot-2.m
-%!error cot ();
-
-%% test/octave.test/arith/cot-3.m
-%!error cot (1, 2);
-
-%% test/octave.test/arith/asin-1.m
-%!test
-%! rt2 = sqrt (2);
-%! rt3 = sqrt (3);
-%! v = [0, pi/6, pi/4, pi/3, pi/2, pi/3, pi/4, pi/6, 0];
-%! x = [0, 1/2, rt2/2, rt3/2, 1, rt3/2, rt2/2, 1/2, 0];
-%! assert(all (abs (asin (x) - v) < sqrt (eps))
-%! 
-%! );
-
-%% test/octave.test/arith/asin-2.m
-%!error asin ();
-
-%% test/octave.test/arith/asin-3.m
-%!error asin (1, 2);
-
 %% test/octave.test/arith/acos-1.m
 %!test
 %! rt2 = sqrt (2);
 %! rt3 = sqrt (3);
 %! v = [0, pi/6, pi/4, pi/3, pi/2, 2*pi/3, 3*pi/4, 5*pi/6, pi];
 %! x = [1, rt3/2, rt2/2, 1/2, 0, -1/2, -rt2/2, -rt3/2, -1];
 %! assert(all (abs (acos (x) - v) < sqrt (eps))
 %! 
@@ -490,63 +349,16 @@
 %! );
 
 %% test/octave.test/arith/atan-2.m
 %!error atan ();
 
 %% test/octave.test/arith/atan-3.m
 %!error atan (1, 2);
 
-%% test/octave.test/arith/asec-1.m
-%!test
-%! rt2 = sqrt (2);
-%! rt3 = sqrt (3);
-%! v = [0, pi/6, pi/4, pi/3, 2*pi/3, 3*pi/4, 5*pi/6, pi];
-%! x = [1, 2*rt3/3, rt2, 2, -2, -rt2, -2*rt3/3, -1];
-%! assert(all (abs (asec (x) - v) < sqrt (eps))
-%! 
-%! );
-
-%% test/octave.test/arith/asec-2.m
-%!error asec ();
-
-%% test/octave.test/arith/asec-3.m
-%!error asec (1, 2);
-
-%% test/octave.test/arith/acsc-1.m
-%!test
-%! rt2 = sqrt (2);
-%! rt3 = sqrt (3);
-%! v = [pi/6, pi/4, pi/3, pi/2, pi/3, pi/4, pi/6];
-%! x = [2, rt2, 2*rt3/3, 1, 2*rt3/3, rt2, 2];
-%! assert(all (abs (acsc (x) - v) < sqrt (eps))
-%! );
-
-%% test/octave.test/arith/acsc-2.m
-%!error acsc ();
-
-%% test/octave.test/arith/acsc-3.m
-%!error acsc (1, 2);
-
-%% test/octave.test/arith/acot-1.m
-%!test
-%! rt2 = sqrt (2);
-%! rt3 = sqrt (3);
-%! x = [rt3, 1, rt3/3, 0, -rt3/3, -1, -rt3];
-%! v = [pi/6, pi/4, pi/3, pi/2, -pi/3, -pi/4, -pi/6];
-%! assert(all (abs (acot (x) - v) < sqrt (eps))
-%! 
-%! );
-
-%% test/octave.test/arith/acot-2.m
-%!error acot ();
-
-%% test/octave.test/arith/acot-3.m
-%!error acot (1, 2);
-
 %% test/octave.test/arith/sinh-1.m
 %!test
 %! x = [0, pi/2*i, pi*i, 3*pi/2*i];
 %! v = [0, i, 0, -i];
 %! assert(all (abs (sinh (x) - v) < sqrt (eps)));
 
 %% test/octave.test/arith/sinh-2.m
 %!error sinh ();
@@ -573,52 +385,16 @@
 %! assert(all (abs (tanh (x) - v) < sqrt (eps)));
 
 %% test/octave.test/arith/tanh-2.m
 %!error tanh ();
 
 %% test/octave.test/arith/tanh-3.m
 %!error tanh (1, 2);
 
-%% test/octave.test/arith/sech-1.m
-%!test
-%! x = [0, pi*i];
-%! v = [1, -1];
-%! assert(all (abs (sech (x) - v) < sqrt (eps)));
-
-%% test/octave.test/arith/sech-2.m
-%!error sech ();
-
-%% test/octave.test/arith/sech-3.m
-%!error sech (1, 2);
-
-%% test/octave.test/arith/csch-1.m
-%!test
-%! x = [pi/2*i, 3*pi/2*i];
-%! v = [-i, i];
-%! assert(all (abs (csch (x) - v) < sqrt (eps)));
-
-%% test/octave.test/arith/csch-2.m
-%!error csch ();
-
-%% test/octave.test/arith/csch-3.m
-%!error csch (1, 2);
-
-%% test/octave.test/arith/coth-1.m
-%!test
-%! x = [pi/2*i, 3*pi/2*i];
-%! v = [0, 0];
-%! assert(all (abs (coth (x) - v) < sqrt (eps)));
-
-%% test/octave.test/arith/coth-2.m
-%!error coth ();
-
-%% test/octave.test/arith/coth-3.m
-%!error coth (1, 2);
-
 %% test/octave.test/arith/asinh-1.m
 %!test
 %! v = [0, pi/2*i, 0, -pi/2*i];
 %! x = [0, i, 0, -i];
 %! assert(all (abs (asinh (x) - v) < sqrt (eps))
 %! );
 
 %% test/octave.test/arith/asinh-2.m
@@ -648,56 +424,16 @@
 %! );
 
 %% test/octave.test/arith/atanh-2.m
 %!error atanh ();
 
 %% test/octave.test/arith/atanh-3.m
 %!error atanh (1, 2);
 
-%% test/octave.test/arith/asech-1.m
-%!test
-%! v = [0, pi*i];
-%! x = [1, -1];
-%! assert(all (abs (asech (x) - v) < sqrt (eps))
-%! );
-
-%% test/octave.test/arith/asech-2.m
-%!error asech ();
-
-%% test/octave.test/arith/asech-3.m
-%!error asech (1, 2);
-
-%% test/octave.test/arith/acsch-1.m
-%!test
-%! v = [pi/2*i, -pi/2*i];
-%! x = [-i, i];
-%! assert(all (abs (acsch (x) - v) < sqrt (eps))
-%! );
-
-%% test/octave.test/arith/acsch-2.m
-%!error acsch ();
-
-%% test/octave.test/arith/acsch-3.m
-%!error acsch (1, 2);
-
-%% test/octave.test/arith/acoth-1.m
-%!test
-%! rt2 = sqrt (2);
-%! rt3 = sqrt (3);
-%! v = -i*[pi/6, pi/4, pi/3, -pi/3, -pi/4, -pi/6];
-%! x = i*[rt3, 1, rt3/3, -rt3/3, -1, -rt3];
-%! assert(all (abs (acoth (x) - v) < sqrt (eps)));
-
-%% test/octave.test/arith/acoth-2.m
-%!error acoth ();
-
-%% test/octave.test/arith/acoth-3.m
-%!error acoth (1, 2);
-
 %% test/octave.test/arith/atan2-1.m
 %!test
 %! rt2 = sqrt (2);
 %! rt3 = sqrt (3);
 %! v = [0, pi/6, pi/4, pi/3, -pi/3, -pi/4, -pi/6, 0];
 %! y = [0, rt3, 1, rt3, -rt3, -1, -rt3, 0];
 %! x = [1, 3, 1, 1, 1, 1, 3, 1];
 %! assert(all (abs (atan2 (y, x) - v) < sqrt (eps))
@@ -807,17 +543,9 @@
 
 %% test/octave.test/arith/sumsq-3.m
 %!error <Invalid call to sumsq.*> sumsq ();
 
 %% test/octave.test/arith/sumsq-4.m
 %!assert (all (sumsq ([1, 2; 3, 4], 1) == [10, 20]));
 %!assert (all (sumsq ([1, 2; 3, 4], 2) == [5; 25]));
 
-%% test/octave.test/arith/bincoeff-1.m
-%!assert(bincoeff (5, 2) == 10 && bincoeff (50, 6) == 15890700);
 
-%% test/octave.test/arith/bincoeff-2.m
-%!error bincoeff ();
-
-%% test/octave.test/arith/bincoeff-3.m
-%!error bincoeff (1, 2, 3);
-
