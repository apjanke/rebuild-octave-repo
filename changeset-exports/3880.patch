# HG changeset patch
# User jwe
# Date 1017109386 0
#      Tue Mar 26 02:23:06 2002 +0000
# Node ID c21ae2c5840fb528e58681cc60998b16b8e930a6
# Parent  7200bfd25c97715c376df8ce28fb246a2af49467
[project @ 2002-03-26 02:23:06 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2002-03-25  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* parse.y (parse_fcn_file): Call error if there is no input file.
+	(parse_and_execute (FILE *): Protect get_input_from_eval_string.
+	Set get_input_from_eval_string to false before calling yyparse.
+	* lex.l (reset_parser): Also skip yyrestart (stdin) if
+	reading_script_file is true.
+
 2002-03-07  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* pt-loop.cc (evaluating_looping_command): New global.
 	(tree_while_command::eval): Protect evaluating_looping_command.
 	Set it to true while evaluating loop.
 	(tree_do_until_command::eval): Ditto.
 	(tree_simple_for_command::eval): Ditto.
 	(tree_complex_for_command::eval): Ditto.
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -778,17 +778,19 @@ reset_parser (void)
     {
       current_input_column = 1;
       input_line_number = command_editor::current_command_number () - 1;
     }
 
   // Only ask for input from stdin if we are expecting interactive
   // input.
   if ((interactive || forced_interactive)
-      && ! (reading_fcn_file || get_input_from_eval_string
+      && ! (reading_fcn_file
+	    || reading_script_file
+	    || get_input_from_eval_string
 	    || input_from_startup_file))
     yyrestart (stdin);
 
   // Clear the buffer for help text.
   help_buf.resize (0);
 
   // Reset other flags.
   lexer_flags.init ();
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -2715,30 +2715,32 @@ set_stmt_print_flag (tree_statement_list
       break;
     }
 }
 
 void
 parse_and_execute (FILE *f)
 {
   unwind_protect::begin_frame ("parse_and_execute");
-  
+
   YY_BUFFER_STATE old_buf = current_buffer ();
   YY_BUFFER_STATE new_buf = create_buffer (f);
 
   unwind_protect::add (restore_input_buffer, old_buf);
   unwind_protect::add (delete_input_buffer, new_buf);
 
   switch_to_buffer (new_buf);
 
   unwind_protect_bool (line_editing);
   unwind_protect_bool (input_from_command_line_file);
+  unwind_protect_bool (get_input_from_eval_string);
 
   line_editing = false;
   input_from_command_line_file = false;
+  get_input_from_eval_string = false;
 
   unwind_protect_ptr (curr_sym_tab);
 
   int retval;
   do
     {
       reset_parser ();
 
@@ -3195,16 +3197,18 @@ parse_fcn_file (const std::string& ff, b
 
 	  bind_builtin_variable ("current_script_file_name", ff);
 
 	  parse_and_execute (ffile);
 
 	  script_file_executed = true;
 	}
     }
+  else
+    error ("no such file, `%s'", ff.c_str ());
 
   unwind_protect::run_frame ("parse_fcn_file");
 
   return script_file_executed;
 }
 
 bool
 load_fcn_from_file (symbol_record *sym_rec, bool exec_script)
