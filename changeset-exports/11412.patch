# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1293204741 28800
#      Fri Dec 24 07:32:21 2010 -0800
# Node ID a8a9f062d0ef9d33dc05f19f175371cf168e191a
# Parent  2d7a478544c72a3d094c6dc2bee3505b98c1c731
test.m: Use 'Command' for deftype in docstring.

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2010-12-24  Rik  <octave@nomad.inbox5.com>
+
+	* testfun/test.m: Use 'Command' for deftype in docstring.
+
 2010-12-24  Rik  <octave@nomad.inbox5.com>
 
 	* audio/setaudio.m: Re-write docstring.
 
 2010-12-23  Soren Hauberg  <hauberg@gmail.com>
 	* signal/detrend.m: Also accept polynomial order as a string ("constant" or
 	"linear") for compatibility with Matlab.
 
diff --git a/scripts/testfun/test.m b/scripts/testfun/test.m
--- a/scripts/testfun/test.m
+++ b/scripts/testfun/test.m
@@ -12,18 +12,18 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn  {Function File} {} test @var{name}
-## @deftypefnx {Function File} {} test @var{name} quiet|normal|verbose
+## @deftypefn  {Command} {} test @var{name}
+## @deftypefnx {Command} {} test @var{name} quiet|normal|verbose
 ## @deftypefnx {Function File} {} test ('@var{name}', 'quiet|normal|verbose', @var{fid})
 ## @deftypefnx {Function File} {} test ([], 'explain', @var{fid})
 ## @deftypefnx {Function File} {@var{success} =} test (@dots{})
 ## @deftypefnx {Function File} {[@var{n}, @var{max}] =} test (@dots{})
 ## @deftypefnx {Function File} {[@var{code}, @var{idx}] =} test ('@var{name}','grabdemo')
 ##
 ## Perform tests from the first file in the loadpath matching @var{name}.
 ## @code{test} can be called as a command or as a function.  Called with 
@@ -60,17 +60,17 @@
 ##
 ## If the second argument is the string 'grabdemo', the contents of the demo
 ## blocks are extracted but not executed.  Code for all code blocks is
 ## concatenated and returned as @var{code} with @var{idx} being a vector of
 ## positions of the ends of the demo blocks.
 ##
 ## If the second argument is 'explain', then @var{name} is ignored and an
 ## explanation of the line markers used is written to the file @var{fid}.
-## @seealso{error, assert, fail, demo, example}
+## @seealso{assert, fail, error, demo, example}
 ## @end deftypefn
 
 ## FIXME: * Consider using keyword fail rather then error?  This allows us
 ## to make a functional form of error blocks, which means we
 ## can include them in test sections which means that we can use
 ## octave flow control for both kinds of tests.
 
 function [__ret1, __ret2, __ret3, __ret4] = test (__name, __flag, __fid)
