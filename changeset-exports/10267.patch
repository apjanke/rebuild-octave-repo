# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1265290609 -3600
#      Thu Feb 04 14:36:49 2010 +0100
# Node ID 479c7df0cc9635208b9b7ef3980c9e2e05a2cd82
# Parent  82db36545def309989b921223a2586beec177f2a
don't instantiate MArray<char>

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,17 @@
+2010-02-04  Jaroslav Hajek  <highegg@gmail.com>
+
+	* chMatrix.h (charMatrix): Rebase directly on Array<char>.
+	* chNDArray.h (charNDArray): Ditto.
+	* chMatrix.cc: Update.
+	* chNDArray.cc: Update.
+	* MArray-ch.cc: Remove.
+	* Makefile.am: Update.
+
 2010-02-04  John W. Eaton  <jwe@octave.org>
 
 	* lo-cutils.c (gethostname): Delete function.
 	* lo-sysdep.h (gethostname): Delete declaration.
 
 2010-02-03  John W. Eaton  <jwe@octave.org>
 
 	* oct-syscalls.h, oct-syscalls.cc (octave_fcntl): Assume fcntl exists.
diff --git a/liboctave/MArray-ch.cc b/liboctave/MArray-ch.cc
deleted file mode 100644
--- a/liboctave/MArray-ch.cc
+++ /dev/null
@@ -1,48 +0,0 @@
-/*
-
-Copyright (C) 1995, 1996, 1997, 2000, 2005, 2007 John W. Eaton
-
-This file is part of Octave.
-
-Octave is free software; you can redistribute it and/or modify it
-under the terms of the GNU General Public License as published by the
-Free Software Foundation; either version 3 of the License, or (at your
-option) any later version.
-
-Octave is distributed in the hope that it will be useful, but WITHOUT
-ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
-for more details.
-
-You should have received a copy of the GNU General Public License
-along with Octave; see the file COPYING.  If not, see
-<http://www.gnu.org/licenses/>.
-
-*/
-
-#ifdef HAVE_CONFIG_H
-#include <config.h>
-#endif
-
-// Instantiate MArrays of char values.
-
-#include "MArray.h"
-#include "MArray.cc"
-
-template class OCTAVE_API MArray<char>;
-
-INSTANTIATE_MARRAY_FRIENDS (char, OCTAVE_API)
-
-#include "MArray2.h"
-#include "MArray2.cc"
-
-template class OCTAVE_API MArray2<char>;
-
-INSTANTIATE_MARRAY2_FRIENDS (char, OCTAVE_API)
-
-#include "MDiagArray2.h"
-#include "MDiagArray2.cc"
-
-template class OCTAVE_API MDiagArray2<char>;
-
-INSTANTIATE_MDIAGARRAY2_FRIENDS (char, OCTAVE_API)
diff --git a/liboctave/Makefile.am b/liboctave/Makefile.am
--- a/liboctave/Makefile.am
+++ b/liboctave/Makefile.am
@@ -291,17 +291,16 @@ TI_SRC = \
   Array-f.cc \
   Array-fC.cc \
   Array-i.cc \
   Array-idx-vec.cc \
   Array-s.cc \
   Array-str.cc \
   Array-voidp.cc \
   MArray-C.cc \
-  MArray-ch.cc \
   MArray-d.cc \
   MArray-f.cc \
   MArray-fC.cc \
   MArray-i.cc \
   MArray-s.cc \
   MSparse-C.cc \
   MSparse-d.cc \
   Sparse-C.cc \
diff --git a/liboctave/chMatrix.cc b/liboctave/chMatrix.cc
--- a/liboctave/chMatrix.cc
+++ b/liboctave/chMatrix.cc
@@ -35,52 +35,52 @@ along with Octave; see the file COPYING.
 #include "str-vec.h"
 #include "mx-base.h"
 #include "mx-inlines.cc"
 #include "mx-op-defs.h"
 
 // charMatrix class.
 
 charMatrix::charMatrix (char c)
-  : MArray2<char> ()
+  : Array2<char> ()
 {
   octave_idx_type nc = 1;
   octave_idx_type nr = 1;
 
   resize (nr, nc);
 
   elem (0, 0) = c;
 }
 
 charMatrix::charMatrix (const char *s)
-  : MArray2<char> ()
+  : Array2<char> ()
 {
   octave_idx_type nc = s ? strlen (s) : 0;
   octave_idx_type nr = s && nc > 0 ? 1 : 0;
 
   resize (nr, nc);
 
   for (octave_idx_type i = 0; i < nc; i++)
     elem (0, i) = s[i];
 }
 
 charMatrix::charMatrix (const std::string& s)
-  : MArray2<char> ()
+  : Array2<char> ()
 {
   octave_idx_type nc = s.length ();
   octave_idx_type nr = nc > 0 ? 1 : 0;
 
   resize (nr, nc);
 
   for (octave_idx_type i = 0; i < nc; i++)
     elem (0, i) = s[i];
 }
 
 charMatrix::charMatrix (const string_vector& s)
-  : MArray2<char> (s.length (), s.max_length (), 0)
+  : Array2<char> (s.length (), s.max_length (), 0)
 {
   octave_idx_type nr = rows ();
 
   for (octave_idx_type i = 0; i < nr; i++)
     {
       const std::string si = s(i);
       octave_idx_type nc = si.length ();
       for (octave_idx_type j = 0; j < nc; j++)
@@ -191,17 +191,17 @@ charMatrix::extract (octave_idx_type r1,
       result.elem (i, j) = elem (r1+i, c1+j);
 
   return result;
 }
 
 charMatrix
 charMatrix::diag (octave_idx_type k) const
 {
-  return MArray2<char>::diag (k);
+  return Array2<char>::diag (k);
 }
 
 // FIXME Do these really belong here?  Maybe they should be
 // in a base class?
 
 boolMatrix
 charMatrix::all (int dim) const
 {
diff --git a/liboctave/chMatrix.h b/liboctave/chMatrix.h
--- a/liboctave/chMatrix.h
+++ b/liboctave/chMatrix.h
@@ -21,52 +21,52 @@ along with Octave; see the file COPYING.
 
 */
 
 #if !defined (octave_chMatrix_int_h)
 #define octave_chMatrix_int_h 1
 
 #include <string>
 
-#include "MArray2.h"
+#include "Array2.h"
 
 #include "mx-defs.h"
 #include "mx-op-decl.h"
 #include "str-vec.h"
 
 class
 OCTAVE_API
-charMatrix : public MArray2<char>
+charMatrix : public Array2<char>
 {
 friend class ComplexMatrix;
 
 public:
 
-  charMatrix (void) : MArray2<char> () { }
-  charMatrix (octave_idx_type r, octave_idx_type c) : MArray2<char> (r, c) { }
-  charMatrix (octave_idx_type r, octave_idx_type c, char val) : MArray2<char> (r, c, val) { }
-  charMatrix (const dim_vector& dv) : MArray2<char> (dv) { }
-  charMatrix (const dim_vector& dv, char val) : MArray2<char> (dv, val) { }
-  charMatrix (const MArray2<char>& a) : MArray2<char> (a) { }
-  charMatrix (const charMatrix& a) : MArray2<char> (a) { }
+  charMatrix (void) : Array2<char> () { }
+  charMatrix (octave_idx_type r, octave_idx_type c) : Array2<char> (r, c) { }
+  charMatrix (octave_idx_type r, octave_idx_type c, char val) : Array2<char> (r, c, val) { }
+  charMatrix (const dim_vector& dv) : Array2<char> (dv) { }
+  charMatrix (const dim_vector& dv, char val) : Array2<char> (dv, val) { }
+  charMatrix (const Array2<char>& a) : Array2<char> (a) { }
+  charMatrix (const charMatrix& a) : Array2<char> (a) { }
   charMatrix (char c);
   charMatrix (const char *s);
   charMatrix (const std::string& s);
   charMatrix (const string_vector& s);
 
   charMatrix& operator = (const charMatrix& a)
     {
-      MArray2<char>::operator = (a);
+      Array2<char>::operator = (a);
       return *this;
     }
 
   bool operator == (const charMatrix& a) const;
   bool operator != (const charMatrix& a) const;
 
-  charMatrix transpose (void) const { return MArray2<char>::transpose (); }
+  charMatrix transpose (void) const { return Array2<char>::transpose (); }
 
   // destructive insert/delete/reorder operations
 
   charMatrix& insert (const char *s, octave_idx_type r, octave_idx_type c);
   charMatrix& insert (const charMatrix& a, octave_idx_type r, octave_idx_type c);
 
   std::string row_as_string (octave_idx_type, bool strip_ws = false, bool raw = false) const;
 
@@ -85,23 +85,21 @@ public:
   friend std::ostream& operator << (std::ostream& os, const Matrix& a);
   friend std::istream& operator >> (std::istream& is, Matrix& a);
 #endif
 
   static char resize_fill_value (void) { return '\0'; }
 
 private:
 
-  charMatrix (char *ch, octave_idx_type r, octave_idx_type c) : MArray2<char> (ch, r, c) { }
+  charMatrix (char *ch, octave_idx_type r, octave_idx_type c) : Array2<char> (ch, r, c) { }
 };
 
 MS_CMP_OP_DECLS (charMatrix, char, OCTAVE_API)
 MS_BOOL_OP_DECLS (charMatrix, char, OCTAVE_API)
 
 SM_CMP_OP_DECLS (char, charMatrix, OCTAVE_API)
 SM_BOOL_OP_DECLS (char, charMatrix, OCTAVE_API)
 
 MM_CMP_OP_DECLS (charMatrix, charMatrix, OCTAVE_API)
 MM_BOOL_OP_DECLS (charMatrix, charMatrix, OCTAVE_API)
 
-MARRAY_FORWARD_DEFS (MArray2, charMatrix, char)
-
 #endif
diff --git a/liboctave/chNDArray.cc b/liboctave/chNDArray.cc
--- a/liboctave/chNDArray.cc
+++ b/liboctave/chNDArray.cc
@@ -146,17 +146,17 @@ charNDArray::compute_index (Array<octave
 			    const dim_vector& dimensions)
 {
   return ::compute_index (ra_idx, dimensions);
 }
 
 charNDArray
 charNDArray::diag (octave_idx_type k) const
 {
-  return MArrayN<char>::diag (k);
+  return Array<char>::diag (k);
 }
 
 NDS_CMP_OPS (charNDArray, char)
 NDS_BOOL_OPS (charNDArray, char)
 
 SND_CMP_OPS (char, charNDArray)
 SND_BOOL_OPS (char, charNDArray)
 
diff --git a/liboctave/chNDArray.h b/liboctave/chNDArray.h
--- a/liboctave/chNDArray.h
+++ b/liboctave/chNDArray.h
@@ -18,54 +18,54 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, see
 <http://www.gnu.org/licenses/>.
 
 */
 
 #if !defined (octave_charNDArray_h)
 #define octave_charNDArray_h 1
 
-#include "MArrayN.h"
+#include "Array.h"
 #include "chMatrix.h"
 
 #include "mx-defs.h"
 #include "mx-op-decl.h"
 #include "bsxfun-decl.h"
 
 class
 OCTAVE_API
-charNDArray : public MArrayN<char>
+charNDArray : public Array<char>
 {
 public:
 
   typedef charMatrix matrix_type;
 
-  charNDArray (void) : MArrayN<char> () { }
+  charNDArray (void) : Array<char> () { }
 
-  charNDArray (const dim_vector& dv) : MArrayN<char> (dv) { }
+  charNDArray (const dim_vector& dv) : Array<char> (dv) { }
 
-  charNDArray (const dim_vector& dv, char val) : MArrayN<char> (dv, val) { }
+  charNDArray (const dim_vector& dv, char val) : Array<char> (dv, val) { }
   
-  charNDArray (const charNDArray& a) : MArrayN<char> (a) { }
+  charNDArray (const charNDArray& a) : Array<char> (a) { }
 
-  charNDArray (const charMatrix& a) : MArrayN<char> (a) { }
+  charNDArray (const charMatrix& a) : Array<char> (a) { }
 
-  charNDArray (char c) : MArrayN<char> (charMatrix (c)) { }
+  charNDArray (char c) : Array<char> (charMatrix (c)) { }
 
-  charNDArray (const char *s) : MArrayN<char> (charMatrix (s)) { }
+  charNDArray (const char *s) : Array<char> (charMatrix (s)) { }
 
-  charNDArray (const std::string& s) : MArrayN<char> (charMatrix (s)) { }
+  charNDArray (const std::string& s) : Array<char> (charMatrix (s)) { }
 
-  charNDArray (const string_vector& s) : MArrayN<char> (charMatrix (s)) { }
+  charNDArray (const string_vector& s) : Array<char> (charMatrix (s)) { }
 
-  charNDArray (const Array<char>& a) : MArrayN<char> (a) { }
+  charNDArray (const Array<char>& a) : Array<char> (a) { }
 
   charNDArray& operator = (const charNDArray& a)
     {
-      MArrayN<char>::operator = (a);
+      Array<char>::operator = (a);
       return *this;
     }
 
   bool any_element_is_nan (void) const { return false; }
 
   // FIXME -- this is not quite the right thing.
 
   boolNDArray all (int dim = -1) const;
@@ -93,25 +93,23 @@ public:
   // friend std::istream& operator >> (std::istream& is, charNDArray& a);
 
   static char resize_fill_value (void) { return '\0'; }
 
   charNDArray diag (octave_idx_type k = 0) const;
 
 private:
 
-  charNDArray (char *d, dim_vector& dv) : MArrayN<char> (d, dv) { }
+  charNDArray (char *d, dim_vector& dv) : Array<char> (d, dv) { }
 };
 
 NDS_CMP_OP_DECLS (charNDArray, char, OCTAVE_API)
 NDS_BOOL_OP_DECLS (charNDArray, char, OCTAVE_API)
 
 SND_CMP_OP_DECLS (char, charNDArray, OCTAVE_API)
 SND_BOOL_OP_DECLS (char, charNDArray, OCTAVE_API)
 
 NDND_CMP_OP_DECLS (charNDArray, charNDArray, OCTAVE_API)
 NDND_BOOL_OP_DECLS (charNDArray, charNDArray, OCTAVE_API)
 
-MARRAY_FORWARD_DEFS (MArrayN, charNDArray, char)
-
 BSXFUN_STDREL_DECLS (charNDArray, OCTAVE_API)
 
 #endif
