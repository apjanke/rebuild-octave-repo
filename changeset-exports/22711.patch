# HG changeset patch
# User Markus MÃ¼tzel <markus.muetzel@gmx.de>
# Date 1473699149 -7200
#      Mon Sep 12 18:52:29 2016 +0200
# Node ID 074765d5c83b48998c229c1a426620f9b7780f4a
# Parent  0cbe4714ce1bfd124311e490eea97cf8d78b3950
Add support in opengl for "(xy)axislocation" "origin" (bug #48562).

* gl-render.cc: Add support for "(xy)axislocation" being set to "origin".

diff --git a/libinterp/corefcn/gl-render.cc b/libinterp/corefcn/gl-render.cc
--- a/libinterp/corefcn/gl-render.cc
+++ b/libinterp/corefcn/gl-render.cc
@@ -1207,16 +1207,18 @@ namespace octave
 #if defined (HAVE_OPENGL)
 
     if (! props.is_visible ())
       return;
 
     bool xySym = props.get_xySym ();
     bool layer2Dtop = props.get_layer2Dtop ();
     bool is2d = props.get_is2D ();
+    bool isXOrigin = props.xaxislocation_is ("origin");
+    bool isYOrigin = props.yaxislocation_is ("origin");
     bool boxFull = (props.get_boxstyle () == "full");
     double linewidth = props.get_linewidth ();
     double xPlane = props.get_xPlane ();
     double yPlane = props.get_yPlane ();
     double zPlane = props.get_zPlane ();
     double xPlaneN = props.get_xPlaneN ();
     double yPlaneN = props.get_yPlaneN ();
     double zPlaneN = props.get_zPlaneN ();
@@ -1235,18 +1237,22 @@ namespace octave
 
     glBegin (GL_LINES);
 
     if (layer2Dtop)
       std::swap (zpTick, zpTickN);
 
     // X box
     set_color (props.get_xcolor_rgb ());
-    glVertex3d (xPlaneN, ypTick, zpTick);
-    glVertex3d (xPlane, ypTick, zpTick);
+
+    if (! isXOrigin || props.is_box() || ! is2d)
+      {
+        glVertex3d (xPlaneN, ypTick, zpTick);
+        glVertex3d (xPlane, ypTick, zpTick);
+      }
 
     if (props.is_box ())
       {
         glVertex3d (xPlaneN, ypTickN, zpTick);
         glVertex3d (xPlane, ypTickN, zpTick);
         if (! is2d)
           {
             glVertex3d (xPlaneN, ypTickN, zpTickN);
@@ -1256,18 +1262,21 @@ namespace octave
                 glVertex3d (xPlaneN, ypTick, zpTickN);
                 glVertex3d (xPlane, ypTick, zpTickN);
               }
           }
       }
 
     // Y box
     set_color (props.get_ycolor_rgb ());
-    glVertex3d (xpTick, yPlaneN, zpTick);
-    glVertex3d (xpTick, yPlane, zpTick);
+    if (! isYOrigin || props.is_box() || ! is2d)
+      {
+        glVertex3d (xpTick, yPlaneN, zpTick);
+        glVertex3d (xpTick, yPlane, zpTick);
+      }
 
     if (props.is_box () && ! plotyy)
       {
         glVertex3d (xpTickN, yPlaneN, zpTick);
         glVertex3d (xpTickN, yPlane, zpTick);
 
         if (! is2d)
           {
@@ -1370,16 +1379,17 @@ namespace octave
         Matrix gridcolor = props.get_gridcolor_rgb ();
         Matrix minorgridcolor = props.get_minorgridcolor_rgb ();
         double gridalpha = props.get_gridalpha ();
         double minorgridalpha = props.get_minorgridalpha ();
         bool do_xgrid = (props.is_xgrid () && (gridstyle != "none"));
         bool do_xminorgrid = (props.is_xminorgrid ()
                               && (minorgridstyle != "none"));
         bool do_xminortick = props.is_xminortick ();
+        bool is_origin = props.xaxislocation_is ("origin") && props.get_is2D ();
         Matrix xticks = xform.xscale (props.get_xtick ().matrix_value ());
         Matrix xmticks = xform.xscale (props.get_xminortickvalues ().matrix_value ());
         string_vector xticklabels = props.get_xticklabel ().string_vector_value ();
         int wmax = 0;
         int hmax = 0;
         bool tick_along_z = nearhoriz || octave::math::isinf (fy);
         bool mirror = props.is_box () && xstate != AXE_ANY_DIR;
 
@@ -1414,60 +1424,74 @@ namespace octave
           render_grid (linewidth,
                        gridstyle, gridcolor, gridalpha,
                        xticks, x_min, x_max,
                        yPlane, yPlaneN, layer2Dtop ? zPlaneN : zPlane, zPlaneN,
                        0, (zstate != AXE_DEPTH_DIR));
 
         set_color (props.get_xcolor_rgb ());
 
+        // axis line
+        if (is_origin)
+          {
+            glBegin (GL_LINES);
+            glVertex3d (x_min, 0, zpTick);
+            glVertex3d (x_max, 0, zpTick);
+            glEnd ();
+          }
+
         // minor tick marks
         if (do_xminortick)
           {
             if (tick_along_z)
-              render_tickmarks (xmticks, x_min, x_max, ypTick, ypTick,
+              render_tickmarks (xmticks, x_min, x_max,
+                                (is_origin ? 0. : ypTick), ypTick,
                                 zpTick, zpTickN, 0., 0.,
                                 octave::math::signum (zpTick-zpTickN)*fz*xticklen/2,
                                 0, mirror);
             else
-              render_tickmarks (xmticks, x_min, x_max, ypTick, ypTickN,
+              render_tickmarks (xmticks, x_min, x_max,
+                                (is_origin ? 0. : ypTick), ypTickN,
                                 zpTick, zpTick, 0.,
                                 octave::math::signum (ypTick-ypTickN)*fy*xticklen/2,
                                 0., 0, mirror);
           }
 
         // tick marks
         if (tick_along_z)
           {
-            render_tickmarks (xticks, x_min, x_max, ypTick, ypTick,
+            render_tickmarks (xticks, x_min, x_max,
+                              (is_origin ? 0. : ypTick), ypTick,
                               zpTick, zpTickN, 0., 0.,
                               octave::math::signum (zpTick-zpTickN)*fz*xticklen,
                               0, mirror);
           }
         else
           {
-            render_tickmarks (xticks, x_min, x_max, ypTick, ypTickN,
+            render_tickmarks (xticks, x_min, x_max,
+                              (is_origin ? 0. : ypTick), ypTickN,
                               zpTick, zpTick, 0.,
                               octave::math::signum (ypTick-ypTickN)*fy*xticklen,
                               0., 0, mirror);
           }
 
         // tick texts
         if (xticklabels.numel () > 0)
           {
             int halign = (xstate == AXE_HORZ_DIR ? 1 : (xyzSym ? 0 : 2));
             int valign = (xstate == AXE_VERT_DIR ? 1 : (x2Dtop ? 0 : 2));
 
             if (tick_along_z)
-              render_ticktexts (xticks, xticklabels, x_min, x_max, ypTick,
+              render_ticktexts (xticks, xticklabels, x_min, x_max,
+                                (is_origin ? 0. : ypTick),
                                 zpTick+octave::math::signum (zpTick-zpTickN)*fz*xtickoffset,
                                 0, halign, valign, wmax, hmax);
             else
               render_ticktexts (xticks, xticklabels, x_min, x_max,
-                                ypTick+octave::math::signum (ypTick-ypTickN)*fy*xtickoffset,
+                                (is_origin ? 0. : ypTick) + octave::math::signum (ypTick-ypTickN)*fy*xtickoffset,
                                 zpTick, 0, halign, valign, wmax, hmax);
           }
 
         gh_manager::get_object (props.get_xlabel ()).set ("visible", "on");
       }
     else
       gh_manager::get_object (props.get_xlabel ()).set ("visible", "off");
   }
@@ -1507,16 +1531,17 @@ namespace octave
         Matrix gridcolor = props.get_gridcolor_rgb ();
         Matrix minorgridcolor = props.get_minorgridcolor_rgb ();
         double gridalpha = props.get_gridalpha ();
         double minorgridalpha = props.get_minorgridalpha ();
         bool do_ygrid = (props.is_ygrid () && (gridstyle != "none"));
         bool do_yminorgrid = (props.is_yminorgrid ()
                               && (minorgridstyle != "none"));
         bool do_yminortick = props.is_yminortick ();
+        bool is_origin = props.yaxislocation_is ("origin") && props.get_is2D ();
         Matrix yticks = xform.yscale (props.get_ytick ().matrix_value ());
         Matrix ymticks = xform.yscale (props.get_yminortickvalues ().matrix_value ());
         string_vector yticklabels = props.get_yticklabel ().string_vector_value ();
         int wmax = 0;
         int hmax = 0;
         bool tick_along_z = nearhoriz || octave::math::isinf (fx);
         bool mirror = props.is_box () && ystate != AXE_ANY_DIR
                       && (! props.has_property ("__plotyy_axes__"));
@@ -1552,57 +1577,71 @@ namespace octave
           render_grid (linewidth,
                        gridstyle, gridcolor, gridalpha,
                        yticks, y_min, y_max,
                        xPlane, xPlaneN, layer2Dtop ? zPlaneN : zPlane, zPlaneN,
                        1, (zstate != AXE_DEPTH_DIR));
 
         set_color (props.get_ycolor_rgb ());
 
+        // axis line
+        if (is_origin)
+          {
+            glBegin (GL_LINES);
+            glVertex3d (0., y_min, zpTick);
+            glVertex3d (0., y_max, zpTick);
+            glEnd ();
+          }
+
         // minor tick marks
         if (do_yminortick)
           {
             if (tick_along_z)
-              render_tickmarks (ymticks, y_min, y_max, xpTick, xpTick,
+              render_tickmarks (ymticks, y_min, y_max,
+                                (is_origin ? 0. : xpTick), xpTick,
                                 zpTick, zpTickN, 0., 0.,
                                 octave::math::signum (zpTick-zpTickN)*fz*yticklen/2,
                                 1, mirror);
             else
-              render_tickmarks (ymticks, y_min, y_max, xpTick, xpTickN,
+              render_tickmarks (ymticks, y_min, y_max,
+                                (is_origin ? 0. : xpTick), xpTickN,
                                 zpTick, zpTick,
                                 octave::math::signum (xpTick-xpTickN)*fx*yticklen/2,
                                 0., 0., 1, mirror);
           }
 
         // tick marks
         if (tick_along_z)
-          render_tickmarks (yticks, y_min, y_max, xpTick, xpTick,
+          render_tickmarks (yticks, y_min, y_max,
+                            (is_origin ? 0. : xpTick), xpTick,
                             zpTick, zpTickN, 0., 0.,
                             octave::math::signum (zpTick-zpTickN)*fz*yticklen,
                             1, mirror);
         else
-          render_tickmarks (yticks, y_min, y_max, xpTick, xpTickN,
+          render_tickmarks (yticks, y_min, y_max,
+                            (is_origin ? 0. : xpTick), xpTickN,
                             zpTick, zpTick,
                             octave::math::signum (xPlaneN-xPlane)*fx*yticklen,
                             0., 0., 1, mirror);
 
         // tick texts
         if (yticklabels.numel () > 0)
           {
             int halign = (ystate == AXE_HORZ_DIR
                           ? 1 : (! xyzSym || y2Dright ? 0 : 2));
             int valign = (ystate == AXE_VERT_DIR ? 1 : 2);
 
             if (tick_along_z)
-              render_ticktexts (yticks, yticklabels, y_min, y_max, xpTick,
+              render_ticktexts (yticks, yticklabels, y_min, y_max,
+                                (is_origin ? 0. : xpTick),
                                 zpTick+octave::math::signum (zpTick-zpTickN)*fz*ytickoffset,
                                 1, halign, valign, wmax, hmax);
             else
               render_ticktexts (yticks, yticklabels, y_min, y_max,
-                                xpTick+octave::math::signum (xpTick-xpTickN)*fx*ytickoffset,
+                                (is_origin ? 0. : xpTick) + octave::math::signum (xpTick-xpTickN)*fx*ytickoffset,
                                 zpTick, 1, halign, valign, wmax, hmax);
           }
 
         gh_manager::get_object (props.get_ylabel ()).set ("visible", "on");
       }
     else
       gh_manager::get_object (props.get_ylabel ()).set ("visible", "off");
   }
@@ -1745,32 +1784,32 @@ namespace octave
           {
             int halign = 2;
             int valign = (zstate == AXE_VERT_DIR ? 1 : (zSign ? 3 : 2));
 
             if (xySym)
               {
                 if (octave::math::isinf (fy))
                   render_ticktexts (zticks, zticklabels, z_min, z_max,
-                                    xPlaneN+octave::math::signum (xPlaneN-xPlane)*fx*ztickoffset,
+                                    xPlaneN + octave::math::signum (xPlaneN-xPlane)*fx*ztickoffset,
                                     yPlane, 2, halign, valign, wmax, hmax);
                 else
                   render_ticktexts (zticks, zticklabels, z_min, z_max, xPlaneN,
-                                    yPlane+octave::math::signum (yPlane-yPlaneN)*fy*ztickoffset,
+                                    yPlane + octave::math::signum (yPlane-yPlaneN)*fy*ztickoffset,
                                     2, halign, valign, wmax, hmax);
               }
             else
               {
                 if (octave::math::isinf (fx))
                   render_ticktexts (zticks, zticklabels, z_min, z_max, xPlane,
-                                    yPlaneN+octave::math::signum (yPlaneN-yPlane)*fy*ztickoffset,
+                                    yPlaneN + octave::math::signum (yPlaneN-yPlane)*fy*ztickoffset,
                                     2, halign, valign, wmax, hmax);
                 else
                   render_ticktexts (zticks, zticklabels, z_min, z_max,
-                                    xPlane+octave::math::signum (xPlane-xPlaneN)*fx*ztickoffset,
+                                    xPlane + octave::math::signum (xPlane-xPlaneN)*fx*ztickoffset,
                                     yPlaneN, 2, halign, valign, wmax, hmax);
               }
           }
 
         gh_manager::get_object (props.get_zlabel ()).set ("visible", "on");
       }
     else
       gh_manager::get_object (props.get_zlabel ()).set ("visible", "off");
