# HG changeset patch
# User Andreas Weber <andy.weber.aw@gmail.com>
# Date 1406493074 -7200
#      Sun Jul 27 22:31:14 2014 +0200
# Node ID 52e01aa1fe8b6c85bd82ba7ad30cd019a3980d54
# Parent  4c45986a278e5768e43c0efa29e369f791430ee9
Overhaul FLTK pan, rotate, zoom

* graphics.in.h: add axes properties pan, rotate3d, mouse_wheel_zoom
  and custom set_pan which disables rotate3d.

* graphics.cc: add custom set_rotate3d and link with pan property.
  Disable rotate3d for 2D plots.

* __init_fltk__.cc: replace gui_mode and mouse_wheel_zoom with axes
  properties pan, rotate3d and mouse_wheel_zoom. Disable pan for legends,
  move them instead.

* __add_default_menu__.m: Add new menu entries for new pan and zoom modes.

* findall.m: Update test for added uimenus.

Each axes now has its own properties for interactive GUI control of pan,
rotate3d and mouse_wheel_zoom. Now it's possible to have several figures
and set pan for the 2D plot in figure x and rotate3d for the 3D plot in
figure y. There are two new pan modes: "Pan x only" and "Pan y only".

The toolbar buttons "P" and "R" set pan and rotate3d for the last clicked axes
object or the object below the center of the canvas if none was clicked yet.

The legend can now be moved with the mouse.

diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -6383,16 +6383,35 @@ axes::properties::set_linestyleorder (co
 {
   if (!error_state)
     {
       linestyleorder.set (convert_linestyleorder_string (v), false);
     }
 }
 
 void
+axes::properties::set_rotate3d (const octave_value& v)
+{
+  rotate3d.set (v, false, false);
+  if (rotate3d_is ("on"))
+    {
+      int ndim = calc_dimensions (gh_manager::get_object (get_parent ()));
+
+      // Disable rotate3d for 2D plots
+      if (ndim == 2)
+        {
+          rotate3d.set ("off", false, false);
+          pan.set ("on", false, false);
+        }
+      else
+       pan.set ("off", false, false);
+    }
+}
+
+void
 axes::properties::set_units (const octave_value& v)
 {
   if (! error_state)
     {
       caseless_str old_units = get_units ();
       if (units.set (v, true))
         {
           update_units (old_units);
@@ -7372,16 +7391,19 @@ axes::update_axis_limits (const std::str
       xproperties.set_alimmode ("auto");
       break;
 
     default:
       break;
     }
 
   xproperties.update_transform ();
+
+  // Disable rotate3d and select pan for 2D plots
+  xproperties.set_rotate3d (xproperties.get_rotate3d ());
 }
 
 inline
 double force_in_range (double x, double lower, double upper)
 {
   if (x < lower)
     return lower;
   else if (x > upper)
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -3712,16 +3712,23 @@ public:
     ft_render text_renderer;
 #endif
 
     void set_text_child (handle_property& h, const std::string& who,
                          const octave_value& v);
 
     void delete_text_child (handle_property& h);
 
+    void set_pan (const octave_value& val)
+    {
+      pan.set (val, false, false);
+      if (pan_is ("on") || pan_is ("xon") || pan_is ("yon"))
+        rotate3d.set ("off", false, false);
+    }
+
     // See the genprops.awk script for an explanation of the
     // properties declarations.
     // Programming note: Keep property list sorted if new ones are added.
 
     BEGIN_PROPERTIES (axes)
       radio_property activepositionproperty , "{outerposition}|position"
       row_vector_property alim m , default_lim ()
       radio_property alimmode , "{auto}|manual"
@@ -3752,22 +3759,25 @@ public:
       // NOTE: interpreter is not a Matlab axis property, but it makes
       //       more sense to have it so that axis ticklabels can use it.
       radio_property interpreter , "tex|{none}|latex"
       radio_property layer u , "{bottom}|top"
       // FIXME: should be kind of string array.
       any_property linestyleorder S , "-"
       double_property linewidth , 0.5
       radio_property minorgridlinestyle , "-|--|{:}|-.|none"
+      double_property mouse_wheel_zoom , 0.05
       radio_property nextplot , "add|replacechildren|{replace}"
       array_property outerposition u , default_axes_outerposition ()
+      radio_property pan s , "{on}|xon|yon|off"
       array_property plotboxaspectratio mu , Matrix (1, 3, 1.0)
       radio_property plotboxaspectratiomode u , "{auto}|manual"
       array_property position u , default_axes_position ()
       radio_property projection , "{orthographic}|perspective"
+      radio_property rotate3d S , "{off}|on"
       radio_property tickdir mu , "{in}|out"
       radio_property tickdirmode u , "{auto}|manual"
       array_property ticklength u , default_axes_ticklength ()
       array_property tightinset r , Matrix (1, 4, 0.0)
       handle_property title SOf , gh_manager::make_graphics_handle ("text", __myhandle__, false, false, false)
       // FIXME: uicontextmenu should be moved here.
       radio_property units SU , "{normalized}|inches|centimeters|points|pixels|characters"
       array_property view u , default_axes_view ()
diff --git a/libinterp/dldfcn/__init_fltk__.cc b/libinterp/dldfcn/__init_fltk__.cc
--- a/libinterp/dldfcn/__init_fltk__.cc
+++ b/libinterp/dldfcn/__init_fltk__.cc
@@ -126,16 +126,17 @@ public:
       hide_overlay ();
   }
 
   bool zoom (void) { return in_zoom; }
   void set_zoom_box (const Matrix& zb) { zoom_box = zb; }
 
   void print (const std::string& cmd, const std::string& term)
   {
+    //std::cout << "OpenGL_fltk::print(cmd=" << cmd << ", term=" << term << ") canvas size = " << w () << "x" << h () << std::endl;
 #ifdef HAVE_GL2PS_H
     FILE *fp;
     fp = octave_popen (cmd.c_str (), "w");
     glps_renderer rend (fp, term);
     rend.draw (gh_manager::get_object (number), cmd);
     octave_pclose (fp);
 #else
     error ("fltk: printing not available without gl2ps library");
@@ -234,21 +235,16 @@ private:
         window ()->cursor (FL_CURSOR_DEFAULT);
         return 1;
       }
 
     return retval;
   }
 };
 
-// Parameter controlling how fast we zoom when using the scrool wheel.
-static double Vwheel_zoom_speed = 0.05;
-// Parameter controlling the GUI mode.
-static enum { pan_zoom, rotate_zoom, none } gui_mode;
-
 void script_cb (Fl_Widget*, void* data)
 {
   static_cast<uimenu::properties*> (data)->execute_callback ();
 }
 
 
 class fltk_uimenu
 {
@@ -662,17 +658,17 @@ xerror_handler (Display *, XErrorEvent *
 #endif
 
 class plot_window : public Fl_Window
 {
   friend class fltk_uimenu;
 public:
   plot_window (int xx, int yy, int ww, int hh, figure::properties& xfp)
     : Fl_Window (xx, yy, ww, hh + menu_h + status_h + 2, "octave"),
-      window_label (), shift (0), ndim (2), fp (xfp), canvas (0),
+      window_label (), shift (0), fp (xfp), canvas (0),
       autoscale (0), togglegrid (0), panzoom (0), rotate (0), help (0),
       status (0), resize_dummy (0), ax_obj (), pos_x (0), pos_y (0)
   {
     callback (window_close, static_cast<void*> (this));
 
     // FIXME: The function below is only available in FLTK >= 1.3
     // At some point support for FLTK 1.1 will be dropped in Octave.
     // At that point this function should be uncommented.
@@ -707,20 +703,16 @@ public:
     panzoom = new Fl_Button (2* status_h, toolbar_y, status_h, status_h, "P");
     panzoom->callback (button_callback, static_cast<void*> (this));
     panzoom->tooltip ("Mouse Pan/Zoom");
 
     rotate = new Fl_Button (3 * status_h, toolbar_y, status_h, status_h, "R");
     rotate->callback (button_callback, static_cast<void*> (this));
     rotate->tooltip ("Mouse Rotate");
 
-    // get dimensions, de-/activate rotate button, set gui_mode
-    gui_mode = rotate_zoom;
-    update_gui_mode ();
-
     help = new Fl_Button (4 * status_h, toolbar_y, status_h, status_h, "?");
     help->callback (button_callback, static_cast<void*> (this));
     help->tooltip ("Help");
 
     // The size of the resize_dummy box also determines the minimum window size
     resize_dummy = new Fl_Box(5 * status_h + 1, menu_h + 1, ww - 5 * status_h - 1, hh);
     // read on http://fltk.org/articles.php?L415+I0+T+M1000+P1 how resizable works
     resizable (resize_dummy);
@@ -904,29 +896,16 @@ public:
     Fl_Window::resize (xx, yy + menu_dy (), ww, hh + menu_dy () + status_h + 2);
   }
 
   void mark_modified (void)
   {
     canvas->redraw ();
   }
 
-  void update_gui_mode (void)
-  {
-    ndim = calc_dimensions (gh_manager::get_object (fp.get___myhandle__ ()));
-
-    if (ndim == 3)
-      rotate->activate ();
-    else // ndim == 2
-      {
-        rotate->deactivate ();
-        gui_mode = pan_zoom;
-      }
-  }
-
   void set_name (void)
   {
     window_label = fp.get_title ();
     label (window_label.c_str ());
   }
 
 private:
 
@@ -938,19 +917,16 @@ private:
 
   // window name -- this must exists for the duration of the window's
   // life
   std::string window_label;
 
   // Mod keys status
   int shift;
 
-  // Number of dimensions, 2 or 3.
-  int ndim;
-
   // Figure properties.
   figure::properties& fp;
 
   // Status area height.
   static const int status_h = 20;
 
   // Menu height
   static const int menu_h = 25;
@@ -973,25 +949,50 @@ private:
   {
     if (widg == autoscale)
       axis_auto ();
 
     if (widg == togglegrid)
       toggle_grid ();
 
     if (widg == panzoom)
-      gui_mode = pan_zoom;
+      set_on_ax_obj ("pan", "on");
 
-    if (widg == rotate && ndim == 3)
-      gui_mode = rotate_zoom;
+    if (widg == rotate)
+      set_on_ax_obj ("rotate3d", "on");
 
     if (widg == help)
       fl_message ("%s", help_text);
   }
 
+  void set_on_ax_obj (const std::string& name, const std::string& value)
+  {
+    // ax_obj is the last clicked axes object
+    if (ax_obj && ax_obj.isa ("axes"))
+      {
+        axes::properties& ap = dynamic_cast<axes::properties&>(ax_obj.get_properties ());
+        ap.set (name, value);
+      }
+    else // no axes object clicked so far
+      {
+        // take the object in the center of the canvas
+        graphics_handle gh = pixel2axes_or_ca (canvas->w () / 2, canvas->h () / 2);
+
+        if (gh.ok ())
+          {
+            graphics_object tmp = gh_manager::get_object (gh);
+            if (tmp.isa ("axes"))
+              {
+                axes::properties& ap = dynamic_cast<axes::properties&>(tmp.get_properties ());
+                ap.set (name, value);
+              }
+          }
+      }
+  }
+
   fltk_uimenu* uimenu;
   OpenGL_fltk* canvas;
   Fl_Button* autoscale;
   Fl_Button* togglegrid;
   Fl_Button* panzoom;
   Fl_Button* rotate;
   Fl_Button* help;
   Fl_Output* status;
@@ -1245,22 +1246,22 @@ private:
 
                 case 'g':
                 case 'G':
                   toggle_grid ();
                   break;
 
                 case 'p':
                 case 'P':
-                  gui_mode = pan_zoom;
+                  set_on_ax_obj ("pan", "on");
                   break;
 
                 case 'r':
                 case 'R':
-                  gui_mode = rotate_zoom;
+                  set_on_ax_obj ("rotate3d", "on");
                   break;
                 }
             }
             break;
 
           case FL_KEYUP:
             {
               int key = Fl::event_key ();
@@ -1283,24 +1284,35 @@ private:
                                             Fl::event_y () - menu_dy ()),
                           Fl::event_x (), Fl::event_y () - menu_dy ());
             break;
 
           case FL_PUSH:
             pos_x = Fl::event_x ();
             pos_y = Fl::event_y () - menu_dy ();
 
-            set_currentpoint (Fl::event_x (), Fl::event_y () - menu_dy ());
+            set_currentpoint (pos_x, pos_y);
 
             gh = pixel2axes_or_ca (pos_x, pos_y);
 
             if (gh.ok ())
               {
                 ax_obj = gh_manager::get_object (gh);
                 set_axes_currentpoint (ax_obj, pos_x, pos_y);
+
+                int ndim = calc_dimensions (ax_obj);
+
+                if (ndim == 3)
+                  rotate->activate ();
+                else // ndim == 2
+                  rotate->deactivate ();
+
+
+                fp.set_currentobject (ax_obj.get_handle ().value ());
+
               }
 
             fp.execute_windowbuttondownfcn (Fl::event_button());
 
             if (Fl::event_button () == 1 || Fl::event_button () == 3)
               return 1;
 
             break;
@@ -1311,42 +1323,58 @@ private:
                 set_currentpoint (Fl::event_x (), Fl::event_y () - menu_dy ());
                 fp.execute_windowbuttonmotionfcn ();
               }
 
             if (Fl::event_button () == 1)
               {
                 if (ax_obj && ax_obj.isa ("axes"))
                   {
-                    if (gui_mode == pan_zoom)
-                      pixel2status (ax_obj, pos_x, pos_y,
-                                    Fl::event_x (),
-                                    Fl::event_y () - menu_dy ());
-                    else
-                      view2status (ax_obj);
                     axes::properties& ap =
                       dynamic_cast<axes::properties&>
                       (ax_obj.get_properties ());
 
-                    double x0, y0, x1, y1;
-                    Matrix pos = fp.get_boundingbox (true);
-                    pixel2pos (ax_obj, pos_x, pos_y, x0, y0);
-                    pixel2pos (ax_obj, Fl::event_x (),
-                                       Fl::event_y () - menu_dy (),
-                                       x1, y1);
+                    // Don't pan or rotate legend
+                    if (ap.get_tag().compare ("legend") < 0)
+                      {
+                        if (ap.rotate3d_is ("on"))
+                          view2status (ax_obj);
+                        else
+                          pixel2status (ax_obj, pos_x, pos_y,
+                                        Fl::event_x (),
+                                        Fl::event_y () - menu_dy ());
+
+                        double x0, y0, x1, y1;
+                        Matrix pos = fp.get_boundingbox (true);
+                        pixel2pos (ax_obj, pos_x, pos_y, x0, y0);
+                        pixel2pos (ax_obj, Fl::event_x (),
+                                           Fl::event_y () - menu_dy (),
+                                           x1, y1);
 
-                    if (gui_mode == pan_zoom)
-                      ap.translate_view (x0, x1, y0, y1);
-                    else if (gui_mode == rotate_zoom)
-                      {
-                        double daz, del;
-                        daz = (Fl::event_x () - pos_x) / pos(2) * 360;
-                        del = (Fl::event_y () - menu_dy () - pos_y)
-                              / pos(3) * 360;
-                        ap.rotate_view (del, daz);
+                        if (ap.pan_is ("on"))
+                          ap.translate_view (x0, x1, y0, y1);
+                        else if (ap.pan_is ("xon"))
+                          ap.translate_view (x0, x1, y1, y1);
+                        else if (ap.pan_is ("yon"))
+                          ap.translate_view (x1, x1, y0, y1);
+                        else if (ap.rotate3d_is ("on"))
+                          {
+                            double daz, del;
+                            daz = (Fl::event_x () - pos_x) / pos(2) * 360;
+                            del = (Fl::event_y () - menu_dy () - pos_y)
+                                  / pos(3) * 360;
+                            ap.rotate_view (del, daz);
+                          }
+                      }
+                    else
+                      {  // move the position of the legend
+                        Matrix pos = ap.get_position ().matrix_value ();
+                        pos(0) += double (Fl::event_x () - pos_x) / canvas->w();
+                        pos(1) -= double (Fl::event_y () - menu_dy () - pos_y) / canvas->h();
+                        ap.set_position (pos);
                       }
 
                     pos_x = Fl::event_x ();
                     pos_y = Fl::event_y () - menu_dy ();
                     mark_modified ();
                   }
                 return 1;
               }
@@ -1372,16 +1400,19 @@ private:
                 gh_manager::get_object (pixel2axes_or_ca (Fl::event_x (),
                                                           Fl::event_y ()
                                                           - menu_dy ()));
               if (ax && ax.isa ("axes"))
                 {
                   axes::properties& ap =
                     dynamic_cast<axes::properties&> (ax.get_properties ());
 
+                  // Parameter controlling how fast we zoom when using the scrool wheel.
+                  double Vwheel_zoom_speed = ap.get_mouse_wheel_zoom ();
+
                   // Determine if we're zooming in or out.
                   const double factor =
                     (Fl::event_dy () > 0) ? 1 / (1.0 - Vwheel_zoom_speed)
                                           : 1.0 - Vwheel_zoom_speed;
 
                   // Get the point we're zooming about.
                   double x1, y1;
                   pixel2pos (ax, Fl::event_x (), Fl::event_y () - menu_dy (),
@@ -1702,17 +1733,16 @@ private:
 
   void do_mark_modified (int idx)
   {
     wm_iterator win = windows.find (idx);
 
     if (win != windows.end ())
       {
         win->second->mark_modified ();
-        win->second->update_gui_mode ();
       }
   }
 
   void do_set_name (int idx)
   {
     wm_iterator win = windows.find (idx);
 
     if (win != windows.end ())
@@ -1957,16 +1987,17 @@ public:
               case figure::properties::ID_INTEGERHANDLE:
                 {
                   std::string tmp = ov.string_value ();
                   graphics_handle gh = fp.get___myhandle__ ();
                   figure_manager::renumber_figure (tmp, gh.value ());
                   figure_manager::set_name (tmp);
                 }
                 break;
+
               case figure::properties::ID_POSITION:
                 {
                   std::string tmp = ov.string_value ();
                   Matrix pos = fp.get_position ().matrix_value ();
                   figure_manager::update_position (tmp, pos);
                 }
                 break;
               }
@@ -2104,106 +2135,8 @@ Undocumented internal function.\n\
 #ifdef HAVE_FLTK
   retval = true;
 #else
   retval = false;
 #endif
 
   return retval;
 }
-
-// FIXME: This function should be abstracted and made potentially
-// available to all graphics toolkits.  This suggests putting it in
-// graphics.cc as is done for drawnow() and having the master
-// mouse_wheel_zoom function call fltk_mouse_wheel_zoom.  The same
-// should be done for gui_mode and fltk_gui_mode.  For now (2011.01.30),
-// just changing function names and docstrings.
-
-DEFUN_DLD (mouse_wheel_zoom, args, nargout,
-           "-*- texinfo -*-\n\
-@deftypefn  {Loadable Function} {@var{val} =} mouse_wheel_zoom ()\n\
-@deftypefnx {Loadable Function} {@var{old_val} =} mouse_wheel_zoom (@var{new_val})\n\
-@deftypefnx {Loadable Function} {} mouse_wheel_zoom (@var{new_val}, \"local\")\n\
-Query or set the mouse wheel zoom factor.\n\
-\n\
-The zoom factor is a number in the range (0,1) which is the percentage of the\n\
-current axis limits that will be used when zooming.  For example, if the\n\
-current x-axis limits are [0, 50] and @code{mouse_wheel_zoom} is 0.4 (40%),\n\
-then a zoom operation will change the limits by 20.\n\
-\n\
-When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
-The original variable value is restored when exiting the function.\n\
-\n\
-This function is currently implemented only for the FLTK graphics toolkit.\n\
-@seealso{gui_mode}\n\
-@end deftypefn")
-{
-#ifdef HAVE_FLTK
-  return SET_INTERNAL_VARIABLE_WITH_LIMITS(wheel_zoom_speed, 0.0001, 0.9999);
-#else
-  error ("mouse_wheel_zoom: not available without OpenGL and FLTK libraries");
-  return octave_value ();
-#endif
-}
-
-DEFUN_DLD (gui_mode, args, ,
-           "-*- texinfo -*-\n\
-@deftypefn  {Built-in Function} {@var{mode} =} gui_mode ()\n\
-@deftypefnx {Built-in Function} {} gui_mode (@var{mode})\n\
-Query or set the GUI mode for the current graphics toolkit.\n\
-The @var{mode} argument can be one of the following strings:\n\
-\n\
-@table @asis\n\
-@item @qcode{\"2d\"}\n\
-Allows panning and zooming of current axes.\n\
-\n\
-@item @qcode{\"3d\"}\n\
-Allows rotating and zooming of current axes.\n\
-\n\
-@item @qcode{\"none\"}\n\
-Mouse inputs have no effect.\n\
-@end table\n\
-\n\
-This function is currently implemented only for the FLTK graphics toolkit.\n\
-@seealso{mouse_wheel_zoom}\n\
-@end deftypefn")
-{
-#ifdef HAVE_FLTK
-  caseless_str mode_str;
-
-  if (gui_mode == pan_zoom)
-    mode_str = "2d";
-  else if (gui_mode == rotate_zoom)
-    mode_str = "3d";
-  else
-    mode_str = "none";
-
-  bool failed = false;
-
-  if (args.length () == 1)
-    {
-      if (args(0).is_string ())
-        {
-          mode_str = args(0).string_value ();
-
-          if (mode_str.compare ("2d"))
-            gui_mode = pan_zoom;
-          else if (mode_str.compare ("3d"))
-            gui_mode = rotate_zoom;
-          else if (mode_str.compare ("none"))
-            gui_mode = none;
-          else
-            failed = true;
-        }
-      else
-        failed = true;
-    }
-
-  if (failed)
-    error ("MODE must be one of the strings: \"2D\", \"3D\", or \"none\"");
-
-  return octave_value (mode_str);
-#else
-  error ("gui_mode: not available without OpenGL and FLTK libraries");
-  return octave_value ();
-#endif
-}
diff --git a/scripts/plot/util/findall.m b/scripts/plot/util/findall.m
--- a/scripts/plot/util/findall.m
+++ b/scripts/plot/util/findall.m
@@ -51,15 +51,15 @@ endfunction
 
 
 %!testif HAVE_FLTK
 %! toolkit = graphics_toolkit ("fltk");
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   h = findall (hf);
 %!   all_handles(1) = {"figure"};
-%!   all_handles(2:12,1) = {"uimenu"};
+%!   all_handles(2:15,1) = {"uimenu"};
 %!   assert (get (h, "type"), all_handles);
 %! unwind_protect_cleanup
 %!   close (hf);
 %!   graphics_toolkit (toolkit);
 %! end_unwind_protect
 
diff --git a/scripts/plot/util/private/__add_default_menu__.m b/scripts/plot/util/private/__add_default_menu__.m
--- a/scripts/plot/util/private/__add_default_menu__.m
+++ b/scripts/plot/util/private/__add_default_menu__.m
@@ -39,19 +39,22 @@ function __add_default_menu__ (fig)
       uimenu (__f, "label", "&Save", "callback", @save_cb);
       uimenu (__f, "label", "&Close", "callback", "close (gcf)");
 
     __e = uimenu (fig, "label", "&Edit", "handlevisibility", "off",
                        "tag", "__default_menu__");
       uimenu (__e, "label", "&Grid", "callback", @grid_cb);
       uimenu (__e, "label", "Auto&scale", "callback", @autoscale_cb);
       gm = uimenu (__e, "label", "GUI &Mode");
-        uimenu (gm, "label", "Pan+Zoom", "callback", @guimode_cb);
-        uimenu (gm, "label", "Rotate+Zoom", "callback", @guimode_cb);
-        uimenu (gm, "label", "None+Zoom", "callback", @guimode_cb);
+        uimenu (gm, "label", "Pan x and y", "tag", "pan_on", "callback", @guimode_cb);
+        uimenu (gm, "label", "Pan x only", "tag", "pan_xon", "callback", @guimode_cb);
+        uimenu (gm, "label", "Pan y only", "tag", "pan_yon", "callback", @guimode_cb);
+        uimenu (gm, "label", "Rotate on", "tag", "rotate3d", "callback", @guimode_cb);
+        uimenu (gm, "label", "Enable mousezoom", "tag", "zoom_on", "callback", @guimode_cb);
+        uimenu (gm, "label", "Disable mousezoom", "tag", "zoom_off", "callback", @guimode_cb);
 
   endif
 
 endfunction
 
 function save_cb (h, e)
   lbl = get (gcbo, "label");
   if (strcmp (lbl, "&Save"))
@@ -85,19 +88,27 @@ function grid_cb (h, e)
   grid;
 endfunction
 
 function autoscale_cb (h, e)
   axis ("auto");
 endfunction
 
 function guimode_cb (h, e)
-  lbl = get (h, "label");
-  switch (lbl)
-    case "Pan+Zoom"
-      gui_mode ("2D");
-    case "Rotate+Zoom"
-      gui_mode ("3D");
-    case "None"
-      gui_mode ("None");
+  id = get (h, "tag");
+  switch (id)
+    case "pan_on"
+      set (gco, "pan", "on");
+    case "pan_xon"
+      set (gco, "pan", "xon");
+    case "pan_yon"
+      set (gco, "pan", "yon");
+    case "rotate3d"
+      set (gco, "rotate3d", "on");
+    case "no_pan_rotate"
+      set (gco, "pan", "off");
+      set (gco, "rotate3d", "off");
+    case "zoom_on"
+      set (gco, "mouse_wheel_zoom", 0.05);
+    case "zoom_off"
+      set (gco, "mouse_wheel_zoom", 0.0);
   endswitch
 endfunction
-
