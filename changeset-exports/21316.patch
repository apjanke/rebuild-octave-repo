# HG changeset patch
# User Rik <rik@octave.org>
# Date 1456069396 28800
#      Sun Feb 21 07:43:16 2016 -0800
# Node ID 6cc091426e524edcc574151c448229e8b7698381
# Parent  ea2c2e08ceda2314d6be049933038ad76103e358
doc: Periodic grammarcheck of documentation.

* external.txi, munge-texi.pl, psi.cc, inputParser.m, orderfields.m:
Periodic grammarcheck of documentation.

diff --git a/doc/interpreter/external.txi b/doc/interpreter/external.txi
--- a/doc/interpreter/external.txi
+++ b/doc/interpreter/external.txi
@@ -351,17 +351,19 @@ Operators such an @code{+}, @code{-}, or
 majority of the matrix and array types.  In addition there are a number of
 methods that are of interest only for matrices such as @code{transpose},
 @code{hermitian}, @code{solve}, etc.
 
 The typical way to extract a matrix or array from the input arguments of
 @w{@code{DEFUN_DLD}} function is as follows
 
 @example
+@group
 @EXAMPLEFILE(addtwomatrices.cc)
+@end group
 @end example
 
 To avoid segmentation faults causing Octave to abort this function
 explicitly checks that there are sufficient arguments available before
 accessing these arguments.  It then obtains two multi-dimensional arrays
 of type @code{NDArray} and adds these together.  Note that the array_value
 method is called without using the @code{is_matrix_type} type.  If an
 error occurs when attempting to extract the value, Octave will print a
diff --git a/doc/interpreter/munge-texi.pl b/doc/interpreter/munge-texi.pl
--- a/doc/interpreter/munge-texi.pl
+++ b/doc/interpreter/munge-texi.pl
@@ -72,17 +72,17 @@ TXI_LINE: while (<STDIN>)
     print '@verbatim',"\n";
     open (EXAMPFH, $fname) or die "unable to open example file $fname\n";
     while (<EXAMPFH>)
     {
       print $_;
       print "\n" if (eof and substr ($_, -1) ne "\n");
     }
     close (EXAMPFH);
-    print '@end verbatim',"\n\n";
+    print '@end verbatim',"\n";
 
     next TXI_LINE;
   }
 
   # pass ordinary lines straight through to output
   print $_;
 }
 
diff --git a/libinterp/corefcn/psi.cc b/libinterp/corefcn/psi.cc
--- a/libinterp/corefcn/psi.cc
+++ b/libinterp/corefcn/psi.cc
@@ -46,21 +46,23 @@ and so on.\n\
 The digamma function is defined:\n\
 \n\
 @tex\n\
 $$\n\
 \\Psi (z) = {d (log (\\Gamma (z))) \\over dx}\n\
 $$\n\
 @end tex\n\
 @ifnottex\n\
+\n\
 @example\n\
 @group\n\
 psi (z) = d (log (gamma (z))) / dx\n\
 @end group\n\
 @end example\n\
+\n\
 @end ifnottex\n\
 \n\
 When computing the digamma function (when @var{k} equals zero), @var{z}\n\
 can have any value real or complex value.  However, for polygamma functions\n\
 (@var{k} higher than 0), @var{z} must be real and non-negative.\n\
 \n\
 @seealso{gamma, gammainc, gammaln}\n\
 @end deftypefn")
diff --git a/scripts/general/inputParser.m b/scripts/general/inputParser.m
--- a/scripts/general/inputParser.m
+++ b/scripts/general/inputParser.m
@@ -103,32 +103,36 @@
 ##   p.addSwitch ("verbose");
 ##
 ##   p.parse (varargin@{:@});  # Run created parser on inputs
 ##
 ##   ## the rest of the function can access inputs by using p.Results.
 ##   ## for example, get the tolerance input with p.Results.tolerance
 ## endfunction
 ## @end group
+## @end example
 ##
+## @example
+## @group
 ## check ("mech");           # valid, use defaults for other arguments
 ## check ();                 # error, one argument is mandatory
 ## check (1);                # error, since ! ischar
 ## check ("mech", "~/dev");  # valid, use defaults for other arguments
 ##
 ## check ("mech", "~/dev", [0 1 0 0], "type", "linear");  # valid
 ##
 ## ## following is also valid.  Note how the Switch argument type can
 ## ## be mixed into or before the ParamValue argument type (but it
 ## ## must still appear after any Optional argument).
 ## check ("mech", "~/dev", [0 1 0 0], "verbose", "tolerance", "high");
 ##
 ## ## following returns an error since not all optional arguments,
 ## ## `path' and `mat', were given before the named argument `type'.
 ## check ("mech", "~/dev", "type", "linear");
+## @end group
 ## @end example
 ##
 ## @emph{Note 1}: A function can have any mixture of the four API types but
 ## they must appear in a specific order.  @command{Required} arguments must be
 ## first and can be followed by any @command{Optional} arguments.  Only
 ## the @command{ParamValue} and @command{Switch} arguments may be mixed
 ## together and they must appear at the end.
 ##
diff --git a/scripts/miscellaneous/orderfields.m b/scripts/miscellaneous/orderfields.m
--- a/scripts/miscellaneous/orderfields.m
+++ b/scripts/miscellaneous/orderfields.m
@@ -44,37 +44,46 @@
 ##      @result{} t1 =
 ##         @{
 ##           a =  1
 ##           b =  2
 ##           c =  3
 ##           d =  4
 ##         @}
 ## @end group
+## @end example
+##
+## @example
 ## @group
 ## t = struct ("d", @{@}, "c", @{@}, "b", @{@}, "a", @{@});
 ## t2 = orderfields (s, t)
 ##      @result{} t2 =
 ##         @{
 ##           d =  4
 ##           c =  3
 ##           b =  2
 ##           a =  1
 ##         @}
 ## @end group
+## @end example
+##
+## @example
 ## @group
 ## t3 = orderfields (s, [3, 2, 4, 1])
 ##      @result{} t3 =
 ##         @{
 ##           a =  1
 ##           b =  2
 ##           c =  3
 ##           d =  4
 ##         @}
 ## @end group
+## @end example
+##
+## @example
 ## @group
 ## [t4, p] = orderfields (s, @{"d", "c", "b", "a"@})
 ##      @result{} t4 =
 ##         @{
 ##           d =  4
 ##           c =  3
 ##           b =  2
 ##           a =  1
