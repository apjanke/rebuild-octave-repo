# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1482794454 18000
#      Mon Dec 26 18:20:54 2016 -0500
# Node ID 7627ebcf194dd8776577c09e7662245260489671
# Parent  d92ec2901770f4024e08d6afd177bc092348110f
use F77_INT instead of octave_idx_type for liboctave chol classes

* chol.cc: Use F77_INT instead of octave_idx_type for integer data
passed to Fortran subroutines.

diff --git a/liboctave/numeric/chol.cc b/liboctave/numeric/chol.cc
--- a/liboctave/numeric/chol.cc
+++ b/liboctave/numeric/chol.cc
@@ -56,18 +56,18 @@ chol2inv_internal (const Matrix& r, bool
   Matrix retval;
 
   octave_idx_type r_nr = r.rows ();
   octave_idx_type r_nc = r.cols ();
 
   if (r_nr != r_nc)
     (*current_liboctave_error_handler) ("chol2inv requires square matrix");
 
-  octave_idx_type n = r_nc;
-  octave_idx_type info = 0;
+  F77_INT n = to_f77_int (r_nc);
+  F77_INT info = 0;
 
   Matrix tmp = r;
   double *v = tmp.fortran_vec ();
 
   if (info == 0)
     {
       if (is_upper)
         F77_XFCN (dpotri, DPOTRI, (F77_CONST_CHAR_ARG2 ("U", 1), n,
@@ -105,18 +105,18 @@ chol2inv_internal (const FloatMatrix& r,
   FloatMatrix retval;
 
   octave_idx_type r_nr = r.rows ();
   octave_idx_type r_nc = r.cols ();
 
   if (r_nr != r_nc)
     (*current_liboctave_error_handler) ("chol2inv requires square matrix");
 
-  octave_idx_type n = r_nc;
-  octave_idx_type info = 0;
+  F77_INT n = to_f77_int (r_nc);
+  F77_INT info = 0;
 
   FloatMatrix tmp = r;
   float *v = tmp.fortran_vec ();
 
   if (info == 0)
     {
       if (is_upper)
         F77_XFCN (spotri, SPOTRI, (F77_CONST_CHAR_ARG2 ("U", 1), n,
@@ -154,18 +154,18 @@ chol2inv_internal (const ComplexMatrix& 
   ComplexMatrix retval;
 
   octave_idx_type r_nr = r.rows ();
   octave_idx_type r_nc = r.cols ();
 
   if (r_nr != r_nc)
     (*current_liboctave_error_handler) ("chol2inv requires square matrix");
 
-  octave_idx_type n = r_nc;
-  octave_idx_type info;
+  F77_INT n = to_f77_int (r_nc);
+  F77_INT info;
 
   ComplexMatrix tmp = r;
 
   if (is_upper)
     F77_XFCN (zpotri, ZPOTRI, (F77_CONST_CHAR_ARG2 ("U", 1), n,
                                F77_DBLE_CMPLX_ARG (tmp.fortran_vec ()), n, info
                                F77_CHAR_ARG_LEN (1)));
   else
@@ -199,18 +199,18 @@ chol2inv_internal (const FloatComplexMat
   FloatComplexMatrix retval;
 
   octave_idx_type r_nr = r.rows ();
   octave_idx_type r_nc = r.cols ();
 
   if (r_nr != r_nc)
     (*current_liboctave_error_handler) ("chol2inv requires square matrix");
 
-  octave_idx_type n = r_nc;
-  octave_idx_type info;
+  F77_INT n = to_f77_int (r_nc);
+  F77_INT info;
 
   FloatComplexMatrix tmp = r;
 
   if (is_upper)
     F77_XFCN (cpotri, CPOTRI, (F77_CONST_CHAR_ARG2 ("U", 1), n,
                                F77_CMPLX_ARG (tmp.fortran_vec ()), n, info
                                F77_CHAR_ARG_LEN (1)));
   else
@@ -415,18 +415,18 @@ namespace octave
     chol<Matrix>::init (const Matrix& a, bool upper, bool calc_cond)
     {
       octave_idx_type a_nr = a.rows ();
       octave_idx_type a_nc = a.cols ();
 
       if (a_nr != a_nc)
         (*current_liboctave_error_handler) ("chol: requires square matrix");
 
-      octave_idx_type n = a_nc;
-      octave_idx_type info;
+      F77_INT n = to_f77_int (a_nc);
+      F77_INT info;
 
       is_upper = upper;
 
       chol_mat.clear (n, n);
       if (is_upper)
         for (octave_idx_type j = 0; j < n; j++)
           {
             for (octave_idx_type i = 0; i <= j; i++)
@@ -456,150 +456,152 @@ namespace octave
         F77_XFCN (dpotrf, DPOTRF, (F77_CONST_CHAR_ARG2 ("L", 1), n, h, n, info
                                    F77_CHAR_ARG_LEN (1)));
 
       xrcond = 0.0;
       if (info > 0)
         chol_mat.resize (info - 1, info - 1);
       else if (calc_cond)
         {
-          octave_idx_type dpocon_info = 0;
+          F77_INT dpocon_info = 0;
 
           // Now calculate the condition number for non-singular matrix.
           Array<double> z (dim_vector (3*n, 1));
           double *pz = z.fortran_vec ();
-          Array<octave_idx_type> iz (dim_vector (n, 1));
-          octave_idx_type *piz = iz.fortran_vec ();
+          OCTAVE_LOCAL_BUFFER (F77_INT, iz, n);
           if (is_upper)
             F77_XFCN (dpocon, DPOCON, (F77_CONST_CHAR_ARG2 ("U", 1), n, h,
-                                       n, anorm, xrcond, pz, piz, dpocon_info
+                                       n, anorm, xrcond, pz, iz, dpocon_info
                                        F77_CHAR_ARG_LEN (1)));
           else
             F77_XFCN (dpocon, DPOCON, (F77_CONST_CHAR_ARG2 ("L", 1), n, h,
-                                       n, anorm, xrcond, pz, piz, dpocon_info
+                                       n, anorm, xrcond, pz, iz, dpocon_info
                                        F77_CHAR_ARG_LEN (1)));
 
           if (dpocon_info != 0)
             info = -1;
         }
 
       return info;
     }
 
 #if defined (HAVE_QRUPDATE)
 
     template <>
     void
     chol<Matrix>::update (const ColumnVector& u)
     {
-      octave_idx_type n = chol_mat.rows ();
+      F77_INT n = to_f77_int (chol_mat.rows ());
 
       if (u.numel () != n)
         (*current_liboctave_error_handler) ("cholupdate: dimension mismatch");
 
       ColumnVector utmp = u;
 
       OCTAVE_LOCAL_BUFFER (double, w, n);
 
-      F77_XFCN (dch1up, DCH1UP, (n, chol_mat.fortran_vec (), chol_mat.rows (),
+      F77_XFCN (dch1up, DCH1UP, (n, chol_mat.fortran_vec (), n,
                                  utmp.fortran_vec (), w));
     }
 
     template <>
     octave_idx_type
     chol<Matrix>::downdate (const ColumnVector& u)
     {
-      octave_idx_type info = -1;
+      F77_INT info = -1;
 
-      octave_idx_type n = chol_mat.rows ();
+      F77_INT n = to_f77_int (chol_mat.rows ());
 
       if (u.numel () != n)
         (*current_liboctave_error_handler) ("cholupdate: dimension mismatch");
 
       ColumnVector utmp = u;
 
       OCTAVE_LOCAL_BUFFER (double, w, n);
 
-      F77_XFCN (dch1dn, DCH1DN, (n, chol_mat.fortran_vec (), chol_mat.rows (),
+      F77_XFCN (dch1dn, DCH1DN, (n, chol_mat.fortran_vec (), n,
                                  utmp.fortran_vec (), w, info));
 
       return info;
     }
 
     template <>
     octave_idx_type
-    chol<Matrix>::insert_sym (const ColumnVector& u, octave_idx_type j)
+    chol<Matrix>::insert_sym (const ColumnVector& u, octave_idx_type j_arg)
     {
-      octave_idx_type info = -1;
+      F77_INT info = -1;
 
-      octave_idx_type n = chol_mat.rows ();
+      F77_INT n = to_f77_int (chol_mat.rows ());
+      F77_INT j = to_f77_int (j_arg);
 
       if (u.numel () != n + 1)
         (*current_liboctave_error_handler) ("cholinsert: dimension mismatch");
       if (j < 0 || j > n)
         (*current_liboctave_error_handler) ("cholinsert: index out of range");
 
       ColumnVector utmp = u;
 
       OCTAVE_LOCAL_BUFFER (double, w, n);
 
       chol_mat.resize (n+1, n+1);
 
-      F77_XFCN (dchinx, DCHINX, (n, chol_mat.fortran_vec (), chol_mat.rows (),
+      F77_XFCN (dchinx, DCHINX, (n, chol_mat.fortran_vec (), n,
                                  j + 1, utmp.fortran_vec (), w, info));
 
       return info;
     }
 
     template <>
     void
-    chol<Matrix>::delete_sym (octave_idx_type j)
+    chol<Matrix>::delete_sym (octave_idx_type j_arg)
     {
-      octave_idx_type n = chol_mat.rows ();
+      F77_INT n = to_f77_int (chol_mat.rows ());
+      F77_INT j = to_f77_int (j_arg);
 
       if (j < 0 || j > n-1)
         (*current_liboctave_error_handler) ("choldelete: index out of range");
 
       OCTAVE_LOCAL_BUFFER (double, w, n);
 
-      F77_XFCN (dchdex, DCHDEX, (n, chol_mat.fortran_vec (), chol_mat.rows (),
-                                 j + 1, w));
+      F77_XFCN (dchdex, DCHDEX, (n, chol_mat.fortran_vec (), n, j + 1, w));
 
       chol_mat.resize (n-1, n-1);
     }
 
     template <>
     void
-    chol<Matrix>::shift_sym (octave_idx_type i, octave_idx_type j)
+    chol<Matrix>::shift_sym (octave_idx_type i_arg, octave_idx_type j_arg)
     {
-      octave_idx_type n = chol_mat.rows ();
+      F77_INT n = to_f77_int (chol_mat.rows ());
+      F77_INT i = to_f77_int (i_arg);
+      F77_INT j = to_f77_int (j_arg);
 
       if (i < 0 || i > n-1 || j < 0 || j > n-1)
         (*current_liboctave_error_handler) ("cholshift: index out of range");
 
       OCTAVE_LOCAL_BUFFER (double, w, 2*n);
 
-      F77_XFCN (dchshx, DCHSHX, (n, chol_mat.fortran_vec (), chol_mat.rows (),
+      F77_XFCN (dchshx, DCHSHX, (n, chol_mat.fortran_vec (), n,
                                  i + 1, j + 1, w));
     }
 
 #endif
 
     template <>
     octave_idx_type
     chol<FloatMatrix>::init (const FloatMatrix& a, bool upper, bool calc_cond)
     {
       octave_idx_type a_nr = a.rows ();
       octave_idx_type a_nc = a.cols ();
 
       if (a_nr != a_nc)
         (*current_liboctave_error_handler) ("chol: requires square matrix");
 
-      octave_idx_type n = a_nc;
-      octave_idx_type info;
+      F77_INT n = to_f77_int (a_nc);
+      F77_INT info;
 
       is_upper = upper;
 
       chol_mat.clear (n, n);
       if (is_upper)
         for (octave_idx_type j = 0; j < n; j++)
           {
             for (octave_idx_type i = 0; i <= j; i++)
@@ -629,150 +631,154 @@ namespace octave
         F77_XFCN (spotrf, SPOTRF, (F77_CONST_CHAR_ARG2 ("L", 1), n, h, n, info
                                    F77_CHAR_ARG_LEN (1)));
 
       xrcond = 0.0;
       if (info > 0)
         chol_mat.resize (info - 1, info - 1);
       else if (calc_cond)
         {
-          octave_idx_type spocon_info = 0;
+          F77_INT spocon_info = 0;
 
           // Now calculate the condition number for non-singular matrix.
           Array<float> z (dim_vector (3*n, 1));
           float *pz = z.fortran_vec ();
-          Array<octave_idx_type> iz (dim_vector (n, 1));
-          octave_idx_type *piz = iz.fortran_vec ();
+          OCTAVE_LOCAL_BUFFER (F77_INT, iz, n);
           if (is_upper)
             F77_XFCN (spocon, SPOCON, (F77_CONST_CHAR_ARG2 ("U", 1), n, h,
-                                       n, anorm, xrcond, pz, piz, spocon_info
+                                       n, anorm, xrcond, pz, iz, spocon_info
                                        F77_CHAR_ARG_LEN (1)));
           else
             F77_XFCN (spocon, SPOCON, (F77_CONST_CHAR_ARG2 ("L", 1), n, h,
-                                       n, anorm, xrcond, pz, piz, spocon_info
+                                       n, anorm, xrcond, pz, iz, spocon_info
                                        F77_CHAR_ARG_LEN (1)));
 
           if (spocon_info != 0)
             info = -1;
         }
 
       return info;
     }
 
 #if defined (HAVE_QRUPDATE)
 
     template <>
     void
     chol<FloatMatrix>::update (const FloatColumnVector& u)
     {
-      octave_idx_type n = chol_mat.rows ();
+      F77_INT n = to_f77_int (chol_mat.rows ());
 
       if (u.numel () != n)
         (*current_liboctave_error_handler) ("cholupdate: dimension mismatch");
 
       FloatColumnVector utmp = u;
 
       OCTAVE_LOCAL_BUFFER (float, w, n);
 
-      F77_XFCN (sch1up, SCH1UP, (n, chol_mat.fortran_vec (), chol_mat.rows (),
+      F77_XFCN (sch1up, SCH1UP, (n, chol_mat.fortran_vec (), n,
                                  utmp.fortran_vec (), w));
     }
 
     template <>
     octave_idx_type
     chol<FloatMatrix>::downdate (const FloatColumnVector& u)
     {
-      octave_idx_type info = -1;
+      F77_INT info = -1;
 
-      octave_idx_type n = chol_mat.rows ();
+      F77_INT n = to_f77_int (chol_mat.rows ());
 
       if (u.numel () != n)
         (*current_liboctave_error_handler) ("cholupdate: dimension mismatch");
 
       FloatColumnVector utmp = u;
 
       OCTAVE_LOCAL_BUFFER (float, w, n);
 
-      F77_XFCN (sch1dn, SCH1DN, (n, chol_mat.fortran_vec (), chol_mat.rows (),
+      F77_XFCN (sch1dn, SCH1DN, (n, chol_mat.fortran_vec (), n,
                                  utmp.fortran_vec (), w, info));
 
       return info;
     }
 
     template <>
     octave_idx_type
-    chol<FloatMatrix>::insert_sym (const FloatColumnVector& u, octave_idx_type j)
+    chol<FloatMatrix>::insert_sym (const FloatColumnVector& u,
+                                   octave_idx_type j_arg)
     {
-      octave_idx_type info = -1;
+      F77_INT info = -1;
 
-      octave_idx_type n = chol_mat.rows ();
+      F77_INT n = to_f77_int (chol_mat.rows ());
+      F77_INT j = to_f77_int (j_arg);
 
       if (u.numel () != n + 1)
         (*current_liboctave_error_handler) ("cholinsert: dimension mismatch");
       if (j < 0 || j > n)
         (*current_liboctave_error_handler) ("cholinsert: index out of range");
 
       FloatColumnVector utmp = u;
 
       OCTAVE_LOCAL_BUFFER (float, w, n);
 
       chol_mat.resize (n+1, n+1);
 
-      F77_XFCN (schinx, SCHINX, (n, chol_mat.fortran_vec (), chol_mat.rows (),
+      F77_XFCN (schinx, SCHINX, (n, chol_mat.fortran_vec (), n,
                                  j + 1, utmp.fortran_vec (), w, info));
 
       return info;
     }
 
     template <>
     void
-    chol<FloatMatrix>::delete_sym (octave_idx_type j)
+    chol<FloatMatrix>::delete_sym (octave_idx_type j_arg)
     {
-      octave_idx_type n = chol_mat.rows ();
+      F77_INT n = to_f77_int (chol_mat.rows ());
+      F77_INT j = to_f77_int (j_arg);
 
       if (j < 0 || j > n-1)
         (*current_liboctave_error_handler) ("choldelete: index out of range");
 
       OCTAVE_LOCAL_BUFFER (float, w, n);
 
-      F77_XFCN (schdex, SCHDEX, (n, chol_mat.fortran_vec (), chol_mat.rows (),
+      F77_XFCN (schdex, SCHDEX, (n, chol_mat.fortran_vec (), n,
                                  j + 1, w));
 
       chol_mat.resize (n-1, n-1);
     }
 
     template <>
     void
-    chol<FloatMatrix>::shift_sym (octave_idx_type i, octave_idx_type j)
+    chol<FloatMatrix>::shift_sym (octave_idx_type i_arg, octave_idx_type j_arg)
     {
-      octave_idx_type n = chol_mat.rows ();
+      F77_INT n = to_f77_int (chol_mat.rows ());
+      F77_INT i = to_f77_int (i_arg);
+      F77_INT j = to_f77_int (j_arg);
 
       if (i < 0 || i > n-1 || j < 0 || j > n-1)
         (*current_liboctave_error_handler) ("cholshift: index out of range");
 
       OCTAVE_LOCAL_BUFFER (float, w, 2*n);
 
-      F77_XFCN (schshx, SCHSHX, (n, chol_mat.fortran_vec (), chol_mat.rows (),
+      F77_XFCN (schshx, SCHSHX, (n, chol_mat.fortran_vec (), n,
                                  i + 1, j + 1, w));
     }
 
 #endif
 
     template <>
     octave_idx_type
     chol<ComplexMatrix>::init (const ComplexMatrix& a, bool upper, bool calc_cond)
     {
       octave_idx_type a_nr = a.rows ();
       octave_idx_type a_nc = a.cols ();
 
       if (a_nr != a_nc)
         (*current_liboctave_error_handler) ("chol: requires square matrix");
 
-      octave_idx_type n = a_nc;
-      octave_idx_type info;
+      F77_INT n = to_f77_int (a_nc);
+      F77_INT info;
 
       is_upper = upper;
 
       chol_mat.clear (n, n);
       if (is_upper)
         for (octave_idx_type j = 0; j < n; j++)
           {
             for (octave_idx_type i = 0; i <= j; i++)
@@ -804,154 +810,166 @@ namespace octave
                                    F77_DBLE_CMPLX_ARG (h), n, info
                                    F77_CHAR_ARG_LEN (1)));
 
       xrcond = 0.0;
       if (info > 0)
         chol_mat.resize (info - 1, info - 1);
       else if (calc_cond)
         {
-          octave_idx_type zpocon_info = 0;
+          F77_INT zpocon_info = 0;
 
           // Now calculate the condition number for non-singular matrix.
           Array<Complex> z (dim_vector (2*n, 1));
           Complex *pz = z.fortran_vec ();
           Array<double> rz (dim_vector (n, 1));
           double *prz = rz.fortran_vec ();
           F77_XFCN (zpocon, ZPOCON, (F77_CONST_CHAR_ARG2 ("U", 1), n,
-                                     F77_DBLE_CMPLX_ARG (h),
-                                     n, anorm, xrcond, F77_DBLE_CMPLX_ARG (pz), prz, zpocon_info
+                                     F77_DBLE_CMPLX_ARG (h), n, anorm, xrcond,
+                                     F77_DBLE_CMPLX_ARG (pz), prz, zpocon_info
                                      F77_CHAR_ARG_LEN (1)));
 
           if (zpocon_info != 0)
             info = -1;
         }
 
       return info;
     }
 
 #if defined (HAVE_QRUPDATE)
 
     template <>
     void
     chol<ComplexMatrix>::update (const ComplexColumnVector& u)
     {
-      octave_idx_type n = chol_mat.rows ();
+      F77_INT n = to_f77_int (chol_mat.rows ());
 
       if (u.numel () != n)
         (*current_liboctave_error_handler) ("cholupdate: dimension mismatch");
 
       ComplexColumnVector utmp = u;
 
       OCTAVE_LOCAL_BUFFER (double, rw, n);
 
-      F77_XFCN (zch1up, ZCH1UP, (n, F77_DBLE_CMPLX_ARG (chol_mat.fortran_vec ()),
-                                 chol_mat.rows (),
-                                 F77_DBLE_CMPLX_ARG (utmp.fortran_vec ()), rw));
+      F77_XFCN (zch1up, ZCH1UP, (n,
+                                 F77_DBLE_CMPLX_ARG (chol_mat.fortran_vec ()),
+                                 n,
+                                 F77_DBLE_CMPLX_ARG (utmp.fortran_vec ()),
+                                 rw));
     }
 
     template <>
     octave_idx_type
     chol<ComplexMatrix>::downdate (const ComplexColumnVector& u)
     {
-      octave_idx_type info = -1;
+      F77_INT info = -1;
 
-      octave_idx_type n = chol_mat.rows ();
+      F77_INT n = to_f77_int (chol_mat.rows ());
 
       if (u.numel () != n)
         (*current_liboctave_error_handler) ("cholupdate: dimension mismatch");
 
       ComplexColumnVector utmp = u;
 
       OCTAVE_LOCAL_BUFFER (double, rw, n);
 
-      F77_XFCN (zch1dn, ZCH1DN, (n, F77_DBLE_CMPLX_ARG (chol_mat.fortran_vec ()),
-                                 chol_mat.rows (),
-                                 F77_DBLE_CMPLX_ARG (utmp.fortran_vec ()), rw, info));
+      F77_XFCN (zch1dn, ZCH1DN, (n,
+                                 F77_DBLE_CMPLX_ARG (chol_mat.fortran_vec ()),
+                                 n,
+                                 F77_DBLE_CMPLX_ARG (utmp.fortran_vec ()),
+                                 rw, info));
 
       return info;
     }
 
     template <>
     octave_idx_type
     chol<ComplexMatrix>::insert_sym (const ComplexColumnVector& u,
-                                     octave_idx_type j)
+                                     octave_idx_type j_arg)
     {
-      octave_idx_type info = -1;
+      F77_INT info = -1;
 
-      octave_idx_type n = chol_mat.rows ();
+      F77_INT n = to_f77_int (chol_mat.rows ());
+      F77_INT j = to_f77_int (j_arg);
 
       if (u.numel () != n + 1)
         (*current_liboctave_error_handler) ("cholinsert: dimension mismatch");
       if (j < 0 || j > n)
         (*current_liboctave_error_handler) ("cholinsert: index out of range");
 
       ComplexColumnVector utmp = u;
 
       OCTAVE_LOCAL_BUFFER (double, rw, n);
 
       chol_mat.resize (n+1, n+1);
 
-      F77_XFCN (zchinx, ZCHINX, (n, F77_DBLE_CMPLX_ARG (chol_mat.fortran_vec ()),
-                                 chol_mat.rows (),
-                                 j + 1, F77_DBLE_CMPLX_ARG (utmp.fortran_vec ()), rw, info));
+      F77_XFCN (zchinx, ZCHINX, (n,
+                                 F77_DBLE_CMPLX_ARG (chol_mat.fortran_vec ()),
+                                 n, j + 1,
+                                 F77_DBLE_CMPLX_ARG (utmp.fortran_vec ()),
+                                 rw, info));
 
       return info;
     }
 
     template <>
     void
-    chol<ComplexMatrix>::delete_sym (octave_idx_type j)
+    chol<ComplexMatrix>::delete_sym (octave_idx_type j_arg)
     {
-      octave_idx_type n = chol_mat.rows ();
+      F77_INT n = to_f77_int (chol_mat.rows ());
+      F77_INT j = to_f77_int (j_arg);
 
       if (j < 0 || j > n-1)
         (*current_liboctave_error_handler) ("choldelete: index out of range");
 
       OCTAVE_LOCAL_BUFFER (double, rw, n);
 
-      F77_XFCN (zchdex, ZCHDEX, (n, F77_DBLE_CMPLX_ARG (chol_mat.fortran_vec ()),
-                                 chol_mat.rows (),
-                                 j + 1, rw));
+      F77_XFCN (zchdex, ZCHDEX, (n,
+                                 F77_DBLE_CMPLX_ARG (chol_mat.fortran_vec ()),
+                                 n, j + 1, rw));
 
       chol_mat.resize (n-1, n-1);
     }
 
     template <>
     void
-    chol<ComplexMatrix>::shift_sym (octave_idx_type i, octave_idx_type j)
+    chol<ComplexMatrix>::shift_sym (octave_idx_type i_arg,
+                                    octave_idx_type j_arg)
     {
-      octave_idx_type n = chol_mat.rows ();
+      F77_INT n = to_f77_int (chol_mat.rows ());
+      F77_INT i = to_f77_int (i_arg);
+      F77_INT j = to_f77_int (j_arg);
 
       if (i < 0 || i > n-1 || j < 0 || j > n-1)
         (*current_liboctave_error_handler) ("cholshift: index out of range");
 
       OCTAVE_LOCAL_BUFFER (Complex, w, n);
       OCTAVE_LOCAL_BUFFER (double, rw, n);
 
-      F77_XFCN (zchshx, ZCHSHX, (n, F77_DBLE_CMPLX_ARG (chol_mat.fortran_vec ()),
-                                 chol_mat.rows (),
-                                 i + 1, j + 1, F77_DBLE_CMPLX_ARG (w), rw));
+      F77_XFCN (zchshx, ZCHSHX, (n,
+                                 F77_DBLE_CMPLX_ARG (chol_mat.fortran_vec ()),
+                                 n, i + 1, j + 1,
+                                 F77_DBLE_CMPLX_ARG (w), rw));
     }
 
 #endif
 
     template <>
     octave_idx_type
     chol<FloatComplexMatrix>::init (const FloatComplexMatrix& a, bool upper,
                                     bool calc_cond)
     {
       octave_idx_type a_nr = a.rows ();
       octave_idx_type a_nc = a.cols ();
 
       if (a_nr != a_nc)
         (*current_liboctave_error_handler) ("chol: requires square matrix");
 
-      octave_idx_type n = a_nc;
-      octave_idx_type info;
+      F77_INT n = to_f77_int (a_nc);
+      F77_INT info;
 
       is_upper = upper;
 
       chol_mat.clear (n, n);
       if (is_upper)
         for (octave_idx_type j = 0; j < n; j++)
           {
             for (octave_idx_type i = 0; i <= j; i++)
@@ -970,149 +988,153 @@ namespace octave
       FloatComplex *h = chol_mat.fortran_vec ();
 
       // Calculate the norm of the matrix, for later use.
       float anorm = 0;
       if (calc_cond)
         anorm = xnorm (a, 1);
 
       if (is_upper)
-        F77_XFCN (cpotrf, CPOTRF, (F77_CONST_CHAR_ARG2 ("U", 1), n, F77_CMPLX_ARG (h),
-                                   n, info
+        F77_XFCN (cpotrf, CPOTRF, (F77_CONST_CHAR_ARG2 ("U", 1),
+                                   n, F77_CMPLX_ARG (h), n, info
                                    F77_CHAR_ARG_LEN (1)));
       else
-        F77_XFCN (cpotrf, CPOTRF, (F77_CONST_CHAR_ARG2 ("L", 1), n, F77_CMPLX_ARG (h),
-                                   n, info
+        F77_XFCN (cpotrf, CPOTRF, (F77_CONST_CHAR_ARG2 ("L", 1),
+                                   n, F77_CMPLX_ARG (h), n, info
                                    F77_CHAR_ARG_LEN (1)));
 
       xrcond = 0.0;
       if (info > 0)
         chol_mat.resize (info - 1, info - 1);
       else if (calc_cond)
         {
-          octave_idx_type cpocon_info = 0;
+          F77_INT cpocon_info = 0;
 
           // Now calculate the condition number for non-singular matrix.
           Array<FloatComplex> z (dim_vector (2*n, 1));
           FloatComplex *pz = z.fortran_vec ();
           Array<float> rz (dim_vector (n, 1));
           float *prz = rz.fortran_vec ();
-          F77_XFCN (cpocon, CPOCON, (F77_CONST_CHAR_ARG2 ("U", 1), n, F77_CMPLX_ARG (h),
-                                     n, anorm, xrcond, F77_CMPLX_ARG (pz), prz, cpocon_info
+          F77_XFCN (cpocon, CPOCON, (F77_CONST_CHAR_ARG2 ("U", 1), n,
+                                     F77_CMPLX_ARG (h), n, anorm, xrcond,
+                                     F77_CMPLX_ARG (pz), prz, cpocon_info
                                      F77_CHAR_ARG_LEN (1)));
 
           if (cpocon_info != 0)
             info = -1;
         }
 
       return info;
     }
 
 #if defined (HAVE_QRUPDATE)
 
     template <>
     void
     chol<FloatComplexMatrix>::update (const FloatComplexColumnVector& u)
     {
-      octave_idx_type n = chol_mat.rows ();
+      F77_INT n = to_f77_int (chol_mat.rows ());
 
       if (u.numel () != n)
         (*current_liboctave_error_handler) ("cholupdate: dimension mismatch");
 
       FloatComplexColumnVector utmp = u;
 
       OCTAVE_LOCAL_BUFFER (float, rw, n);
 
       F77_XFCN (cch1up, CCH1UP, (n, F77_CMPLX_ARG (chol_mat.fortran_vec ()),
-                                 chol_mat.rows (),
-                                 F77_CMPLX_ARG (utmp.fortran_vec ()), rw));
+                                 n, F77_CMPLX_ARG (utmp.fortran_vec ()), rw));
     }
 
     template <>
     octave_idx_type
     chol<FloatComplexMatrix>::downdate (const FloatComplexColumnVector& u)
     {
-      octave_idx_type info = -1;
+      F77_INT info = -1;
 
-      octave_idx_type n = chol_mat.rows ();
+      F77_INT n = to_f77_int (chol_mat.rows ());
 
       if (u.numel () != n)
         (*current_liboctave_error_handler) ("cholupdate: dimension mismatch");
 
       FloatComplexColumnVector utmp = u;
 
       OCTAVE_LOCAL_BUFFER (float, rw, n);
 
       F77_XFCN (cch1dn, CCH1DN, (n, F77_CMPLX_ARG (chol_mat.fortran_vec ()),
-                                 chol_mat.rows (),
-                                 F77_CMPLX_ARG (utmp.fortran_vec ()), rw, info));
+                                 n, F77_CMPLX_ARG (utmp.fortran_vec ()),
+                                 rw, info));
 
       return info;
     }
 
     template <>
     octave_idx_type
     chol<FloatComplexMatrix>::insert_sym (const FloatComplexColumnVector& u,
-                                          octave_idx_type j)
+                                          octave_idx_type j_arg)
     {
-      octave_idx_type info = -1;
+      F77_INT info = -1;
+      F77_INT j = to_f77_int (j_arg);
 
-      octave_idx_type n = chol_mat.rows ();
+      F77_INT n = to_f77_int (chol_mat.rows ());
 
       if (u.numel () != n + 1)
         (*current_liboctave_error_handler) ("cholinsert: dimension mismatch");
       if (j < 0 || j > n)
         (*current_liboctave_error_handler) ("cholinsert: index out of range");
 
       FloatComplexColumnVector utmp = u;
 
       OCTAVE_LOCAL_BUFFER (float, rw, n);
 
       chol_mat.resize (n+1, n+1);
 
       F77_XFCN (cchinx, CCHINX, (n, F77_CMPLX_ARG (chol_mat.fortran_vec ()),
-                                 chol_mat.rows (),
-                                 j + 1, F77_CMPLX_ARG (utmp.fortran_vec ()), rw, info));
+                                 n, j + 1,
+                                 F77_CMPLX_ARG (utmp.fortran_vec ()),
+                                 rw, info));
 
       return info;
     }
 
     template <>
     void
-    chol<FloatComplexMatrix>::delete_sym (octave_idx_type j)
+    chol<FloatComplexMatrix>::delete_sym (octave_idx_type j_arg)
     {
-      octave_idx_type n = chol_mat.rows ();
+      F77_INT n = to_f77_int (chol_mat.rows ());
+      F77_INT j = to_f77_int (j_arg);
 
       if (j < 0 || j > n-1)
         (*current_liboctave_error_handler) ("choldelete: index out of range");
 
       OCTAVE_LOCAL_BUFFER (float, rw, n);
 
       F77_XFCN (cchdex, CCHDEX, (n, F77_CMPLX_ARG (chol_mat.fortran_vec ()),
-                                 chol_mat.rows (),
-                                 j + 1, rw));
+                                 n, j + 1, rw));
 
       chol_mat.resize (n-1, n-1);
     }
 
     template <>
     void
-    chol<FloatComplexMatrix>::shift_sym (octave_idx_type i, octave_idx_type j)
+    chol<FloatComplexMatrix>::shift_sym (octave_idx_type i_arg,
+                                         octave_idx_type j_arg)
     {
-      octave_idx_type n = chol_mat.rows ();
+      F77_INT n = to_f77_int (chol_mat.rows ());
+      F77_INT i = to_f77_int (i_arg);
+      F77_INT j = to_f77_int (j_arg);
 
       if (i < 0 || i > n-1 || j < 0 || j > n-1)
         (*current_liboctave_error_handler) ("cholshift: index out of range");
 
       OCTAVE_LOCAL_BUFFER (FloatComplex, w, n);
       OCTAVE_LOCAL_BUFFER (float, rw, n);
 
       F77_XFCN (cchshx, CCHSHX, (n, F77_CMPLX_ARG (chol_mat.fortran_vec ()),
-                                 chol_mat.rows (),
-                                 i + 1, j + 1, F77_CMPLX_ARG (w), rw));
+                                 n, i + 1, j + 1, F77_CMPLX_ARG (w), rw));
     }
 
 #endif
 
     // Instantiations we need.
 
     template class chol<Matrix>;
 
