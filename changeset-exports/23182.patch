# HG changeset patch
# User Kai T. Ohlhus <k.ohlhus@gmail.com>
# Date 1487025228 -3600
#      Mon Feb 13 23:33:48 2017 +0100
# Node ID 8a37443f1a7b7e4d48ead68e35b0977becaca47f
# Parent  78f04a9dfeee423387df3423e9b2caf4d7c922fa
doc: Document second input argument of display (bug #49794)

* libinterp/corefcn/pr-output.cc (Fdisplay): Add documentation for second input
argument "name", which is the name of the variable passed by the Octave
interpreter.  Improve guide for class overloading.

diff --git a/libinterp/corefcn/pr-output.cc b/libinterp/corefcn/pr-output.cc
--- a/libinterp/corefcn/pr-output.cc
+++ b/libinterp/corefcn/pr-output.cc
@@ -3593,30 +3593,39 @@ Note that the output from @code{fdisp} a
 %!   expected = strrep (loose, "\n\n", "\n");
 %!   assert (expected, compact);
 %! endfor
 */
 
 DEFUN (display, args, ,
        classes: cell char double function_handle int8 int16 int32 int64 logical single struct uint8 uint16 uint32 uint64
        doc: /* -*- texinfo -*-
-@deftypefn {} {} display (@var{obj})
-Display the contents of the object @var{obj}.
+@deftypefn  {} {} display (@var{obj})
+@deftypefnx {} {} display (@var{obj}, @var{name})
+Display the contents of the object @var{obj} prepended by it's assigned
+variable name @var{name}.
 
 The Octave interpreter calls the @code{display} function whenever it needs
 to present a class on-screen.  Typically, this would be a statement which
 does not end in a semicolon to suppress output.  For example:
 
 @example
+myclass (@dots{})
+@end example
+
+Or:
+
+@example
 myobj = myclass (@dots{})
 @end example
 
-User-defined classes should overload the @code{display} method so that
-something useful is printed for a class object.  Otherwise, Octave will
-report only that the object is an instance of its class.
+User-defined classes should overload the @code{display} method with two
+input arguments so that something useful is printed for a class object.
+Otherwise, Octave will report only that the object is an instance of its
+class.
 
 @example
 @group
 myobj = myclass (@dots{})
   @result{} myobj = <class myclass>
 @end group
 @end example
 
