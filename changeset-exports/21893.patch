# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1465914279 14400
#      Tue Jun 14 10:24:39 2016 -0400
# Node ID 0a6f387d18d37365cc2fd4ae52eeb758c749b671
# Parent  8fcc81df840c04d728e5d07ba0ef0cdaa93af7d2
* nproc.cc, oct-fftw.cc: Use octave_num_processors_wrapper.

diff --git a/libinterp/corefcn/nproc.cc b/libinterp/corefcn/nproc.cc
--- a/libinterp/corefcn/nproc.cc
+++ b/libinterp/corefcn/nproc.cc
@@ -20,17 +20,17 @@ along with Octave; see the file COPYING.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
 #include "defun.h"
-#include "nproc.h"
+#include "nproc-wrapper.h"
 
 DEFUN (nproc, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {} {} nproc ()\n\
 @deftypefnx {} {} nproc (@var{query})\n\
 Return the current number of available processors.\n\
 \n\
 If called with the optional argument @var{query}, modify how processors\n\
@@ -49,34 +49,35 @@ same as @code{current}, but overridable 
 @end table\n\
 @end deftypefn")
 {
   int nargin = args.length ();
 
   if (nargin > 1)
     print_usage ();
 
-  nproc_query query = NPROC_CURRENT;
+  octave_nproc_query query = OCTAVE_NPROC_CURRENT;
+
   if (nargin == 1)
     {
       std::string arg = args(0).string_value ();
 
       std::transform (arg.begin (), arg.end (), arg.begin (), tolower);
 
       if (arg == "all")
-        query = NPROC_ALL;
+        query = OCTAVE_NPROC_ALL;
       else if (arg == "current")
-        query = NPROC_CURRENT;
+        query = OCTAVE_NPROC_CURRENT;
       else if (arg == "overridable")
-        query = NPROC_CURRENT_OVERRIDABLE;
+        query = OCTAVE_NPROC_CURRENT_OVERRIDABLE;
       else
         error ("nproc: invalid value for QUERY");
     }
 
-  return ovl (num_processors (query));
+  return ovl (octave_num_processors_wrapper (query));
 }
 
 /*
 ## Must always report at least 1 cpu available
 %!assert (nproc () >= 1)
 %!assert (nproc ("all") >= 1)
 %!assert (nproc ("current") >= 1)
 
diff --git a/liboctave/numeric/oct-fftw.cc b/liboctave/numeric/oct-fftw.cc
--- a/liboctave/numeric/oct-fftw.cc
+++ b/liboctave/numeric/oct-fftw.cc
@@ -35,17 +35,17 @@ along with Octave; see the file COPYING.
 
 #include "lo-error.h"
 #include "oct-fftw.h"
 #include "quit.h"
 #include "oct-locbuf.h"
 #include "singleton-cleanup.h"
 
 #if defined (HAVE_FFTW3_THREADS) || defined (HAVE_FFTW3F_THREADS)
-#  include "nproc.h"
+#  include "nproc-wrapper.h"
 #endif
 
 #if defined (HAVE_FFTW)
 
 octave_fftw_planner *octave_fftw_planner::instance = 0;
 
 // Helper class to create and cache FFTW plans for both 1D and
 // 2D.  This implementation defaults to using FFTW_ESTIMATE to create
@@ -77,17 +77,17 @@ octave_fftw_planner::octave_fftw_planner
 
 #if defined (HAVE_FFTW3_THREADS)
   int init_ret = fftw_init_threads ();
   if (! init_ret)
     (*current_liboctave_error_handler) ("Error initializing FFTW threads");
 
   // Use number of processors available to the current process
   // This can be later changed with fftw ("threads", nthreads).
-  nthreads = num_processors (NPROC_CURRENT);
+  nthreads = octave_num_processors_wrapper (OCTAVE_NPROC_CURRENT);
   fftw_plan_with_nthreads (nthreads);
 #endif
 
   // If we have a system wide wisdom file, import it.
   fftw_import_system_wisdom ();
 }
 
 octave_fftw_planner::~octave_fftw_planner (void)
@@ -435,17 +435,17 @@ octave_float_fftw_planner::octave_float_
 
 #if defined (HAVE_FFTW3F_THREADS)
   int init_ret = fftwf_init_threads ();
   if (! init_ret)
     (*current_liboctave_error_handler) ("Error initializing FFTW3F threads");
 
   // Use number of processors available to the current process
   // This can be later changed with fftw ("threads", nthreads).
-  nthreads = num_processors (NPROC_CURRENT);
+  nthreads = octave_num_processors_wrapper (OCTAVE_NPROC_CURRENT);
   fftwf_plan_with_nthreads (nthreads);
 #endif
 
   // If we have a system wide wisdom file, import it.
   fftwf_import_system_wisdom ();
 }
 
 octave_float_fftw_planner::~octave_float_fftw_planner (void)
