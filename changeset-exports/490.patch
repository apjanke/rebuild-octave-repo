# HG changeset patch
# User jwe
# Date 773505543 0
#      Wed Jul 06 14:39:03 1994 +0000
# Node ID 101e1d4f2395ff9ceaa28ed4efc65281403a2ef6
# Parent  89ed09321d1621ffeefe492d8d6cedf26e888b76
[project @ 1994-07-06 14:38:19 by jwe]

diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -74,18 +74,18 @@ symbol_out_of_date (symbol_record *sr)
 {
   int ignore = user_pref.ignore_function_time_stamp;
 
   if (ignore == 2)
     return 0;
 
   if (sr != (symbol_record *) NULL)
     {
-      tree *ans = sr->def ();
-      if (ans != NULL_TREE)
+      tree_fvc *ans = sr->def ();
+      if (ans != (tree_fvc *) NULL)
 	{
 	  char *ff = ans->fcn_file_name ();
 	  if (! (ff == (char *) NULL
 		 || (ignore && ans->is_system_fcn_file ())))
 	    {
 	      time_t tp = ans->time_parsed ();
 	      char *fname = fcn_file_in_path (ff);
 	      int status = is_newer (fname, tp);
@@ -272,19 +272,19 @@ builtin_string_variable (const char *nam
   symbol_record *sr = global_sym_tab->lookup (name, 0, 0);
 
 // It is a prorgramming error to look for builtins that aren't.
 
   assert (sr != (symbol_record *) NULL);
 
   char *retval = (char *) NULL;
 
-  tree *defn = sr->def ();
+  tree_fvc *defn = sr->def ();
 
-  if (defn != NULL_TREE)
+  if (defn != (tree_fvc *) NULL)
     {
       tree_constant val = defn->eval (0);
 
       if (! error_state && val.is_string_type ())
 	{
 	  char *s = val.string_value ();
 	  if (s != (char *) NULL)
 	    retval = strsave (s);
@@ -304,19 +304,19 @@ builtin_real_scalar_variable (const char
 {
   int status = -1;
   symbol_record *sr = global_sym_tab->lookup (name, 0, 0);
 
 // It is a prorgramming error to look for builtins that aren't.
 
   assert (sr != (symbol_record *) NULL);
 
-  tree *defn = sr->def ();
+  tree_fvc *defn = sr->def ();
 
-  if (defn != NULL_TREE)
+  if (defn != (tree_fvc *) NULL)
     {
       tree_constant val = defn->eval (0);
 
       if (! error_state
 	  && val.const_type () == tree_constant_rep::scalar_constant)
 	{
 	  d = val.double_value ();
 	  status = 0;
@@ -626,20 +626,20 @@ is_builtin_variable (const char *name)
 {
   symbol_record *sr = global_sym_tab->lookup (name, 0, 0);
   return (sr != (symbol_record *) NULL && sr->is_builtin_variable ());
 }
 
 /*
  * Is this tree_constant a valid function?
  */
-tree *
+tree_fvc *
 is_valid_function (tree_constant& arg, char *warn_for, int warn = 0)
 {
-  tree *ans = NULL_TREE;
+  tree_fvc *ans = (tree_fvc *) NULL;
 
   if (! arg.is_string_type ())
     {
       if (warn)
 	error ("%s: expecting function name as argument", warn_for);
       return ans;
     }
 
@@ -654,32 +654,32 @@ is_valid_function (tree_constant& arg, c
     }
   else if (symbol_out_of_date (sr))
     {
       tree_identifier tmp (sr);
       tmp.parse_fcn_file (0);
     }
 
   ans = sr->def ();
-  if (ans == NULL_TREE || ! sr->is_function ())
+  if (ans == (tree_fvc *) NULL || ! sr->is_function ())
     {
       if (warn)
 	error ("%s: the symbol `%s' is not valid as a function",
 	       warn_for, fcn_name);
-      ans = NULL_TREE;
+      ans = (tree_fvc *) NULL;
     }
 
   return ans;
 }
 
 /*
  * Does this function take the right number of arguments?
  */
 int
-takes_correct_nargs (tree *fcn, int expected_nargin, char *warn_for,
+takes_correct_nargs (tree_fvc *fcn, int expected_nargin, char *warn_for,
 		     int warn = 0) 
 {
   int nargs = fcn->max_expected_args () - 1;
   int e_nargs = expected_nargin - 1;
   if (nargs != e_nargs)
     {
       if (warn)
 	error ("%s: expecting function to take %d argument%c", 
diff --git a/src/variables.h b/src/variables.h
--- a/src/variables.h
+++ b/src/variables.h
@@ -23,16 +23,17 @@ Software Foundation, 675 Mass Ave, Cambr
 
 #if !defined (octave_variables_h)
 #define octave_variables_h 1
 
 class istream;
 class symbol_record;
 class symbol_table;
 class tree;
+class tree_fvc;
 class tree_constant;
 
 struct builtin_mapper_functions;
 struct builtin_text_functions;
 struct builtin_general_functions;
 struct builtin_string_variables;
 
 #ifndef SV_FUNCTION_TYPEDEFS
@@ -82,18 +83,18 @@ extern int is_globally_visible (const ch
 
 extern char *extract_keyword (istream&, char *);
 extern int extract_keyword (istream&, char *, int&);
 
 extern void skip_comments (istream&);
 extern int valid_identifier (char *);
 extern int identifier_exists (char *);
 extern int is_builtin_variable (const char *name);
-extern tree *is_valid_function (tree_constant&, char *, int warn = 0);
-extern int takes_correct_nargs (tree *, int, char *, int warn = 0);
+extern tree_fvc *is_valid_function (tree_constant&, char *, int warn = 0);
+extern int takes_correct_nargs (tree_fvc *, int, char *, int warn = 0);
 extern char **make_name_list (void);
 
 // Symbol table for symbols at the top level.
 extern symbol_table *top_level_sym_tab;
 
 // Symbol table for the current scope.
 extern symbol_table *curr_sym_tab;
 
