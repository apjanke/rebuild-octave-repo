# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1219259694 14400
#      Wed Aug 20 15:14:54 2008 -0400
# Node ID faf0abc5fd515423c7b95083b03260bdfcc6f777
# Parent  30d15ab0ce01de0998cea02261534167bd07cdce
handle errors in calls to help, type, and which

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2008-08-20  John W. Eaton  <jwe@octave.org>
+
+	* help.cc (builtin_help): Go to next symbol name on error.
+	(do_type, do_which): Omit separate path search for files.
+	(help_from_symbol_table): Only insert Texinfo markup if it looks
+	like the help message is already in Texinfo.
+
 2008-08-19  David Bateman  <dbateman@free.fr>
 
 	* load-path.cc (load-path::do_find_dir (const std:string&) const)):
 	Method to find a directory on the load-path corresponding to the
 	argument.
 	* load-path.h (load-path::do_find_dir (const std:string&) const),
 	load-path::find_dir (const std::string&) const): New methods.
 	* utils.cc (std::string contents_file_in_path (const std::string&)):
diff --git a/src/help.cc b/src/help.cc
--- a/src/help.cc
+++ b/src/help.cc
@@ -974,17 +974,27 @@ help_from_symbol_table (std::ostream& os
 
   std::string h;
   std::string w;
 
   if (raw_help_from_symbol_table (nm, h, w, symbol_found))
     {
       if (h.length () > 0)
 	{
-	  h += "\n\n@noindent\n" + symbol_table::help_for_dispatch (nm);
+	  std::string dispatch_help = symbol_table::help_for_dispatch (nm);
+
+	  if (! dispatch_help.empty ())
+	    {
+	      size_t pos = 0;
+
+	      std::string pfx = looks_like_texinfo (h, pos)
+		? std::string ("\n\n@noindent\n") : std::string ("\n\n");
+
+	      h += pfx + dispatch_help;
+	    }
 
 	  display_help_text (os, h);
 
 	  if (w.length () > 0 && ! Vsuppress_verbose_help_message)
 	    os << w << "\n";
 
 	  os << "\n";
 
@@ -1089,27 +1099,41 @@ builtin_help (int argc, const string_vec
 
       if (help_from_list (octave_stdout, kw_help_list, argv[i], 0,
 			  symbol_found))
 	continue;
 
       if (help_from_symbol_table (octave_stdout, argv[i], symbol_found))
 	continue;
 
+      if (error_state)
+	{
+	  octave_stdout << "\n";
+	  error_state = 0;
+	  continue;
+	}
+
       if (help_from_file (octave_stdout, argv[i], symbol_found))
 	continue;
 
+      if (error_state)
+	{
+	  octave_stdout << "\n";
+	  error_state = 0;
+	  continue;
+	}
+
       if (symbol_found)
 	octave_stdout << "\nhelp: `" << argv[i]
 		      << "' is not documented\n"; 
       else
 	octave_stdout << "\nhelp: `" << argv[i]
 		      << "' not found\n"; 
     }
-
+  
   additional_help_message (octave_stdout);
 }
 
 DEFCMD (help, args, ,
   "-*- texinfo -*-\n\
 @deffn {Command} help @var{name}\n\
 Display the help text for @var{name}.\n\
 If invoked without any arguments, @code{help} prints a list\n\
@@ -1198,51 +1222,48 @@ do_type (std::ostream& os, const std::st
 	  if (fcn)
 	    {
 	      std::string fn = fcn->fcn_file_name ();
 
 	      if (fcn->is_builtin_function ())
 		os << name << " is a built-in function" << std::endl;
 	      else if (fcn->is_dld_function () || fcn->is_mex_function ())
 		os << name
-		   << " is a dyanmically loaded function from the file\n"
+		  << " is a dyanmically loaded function from the file\n"
 		   << fn << std::endl;
 	      else if (pr_orig_txt && ! fn.empty ())
-		display_file (os, name, fn, "function", pr_type_info, quiet);
+		display_file (os, name, fn,
+			      val.is_user_script () ? "script" : "function",
+			      pr_type_info, quiet);
 	      else
 		{
 		  if (pr_type_info && ! quiet)
 		    {
 		      os << name;
 
 		      if (fcn->is_user_function ())
 			{
 			  if (fn.empty ())
 			    os << " is a command-line function:\n\n";
 			  else
-			    os << " is a function defined from the file\n"
+			    os << " is a "
+			       << (val.is_user_script ()
+				   ? std::string ("script")
+				   : std::string ("function"))
+			       << " defined from the file\n"
 			       << fn << ":\n\n";
 			}
 		    }
 
 		  tree_print_code tpc (os, "", pr_orig_txt);
 
 		  fcn->accept (tpc);
 		}
 	    }
 	}
-      else
-	{
-	  std::string fn = fcn_file_in_path (name);
-
-	  if (! fn.empty ())
-	    display_file (os, name, fn, "script", pr_type_info, quiet);
-	  else
-	    error ("type: `%s' undefined", name.c_str ());
-	}
     }
 }
 
 DEFCMD (type, args, nargout,
   "-*- texinfo -*-\n\
 \n\
 @deffn {Command} type options name @dots{}\n\
 Display the definition of each @var{name} that refers to a function.\n\
@@ -1308,34 +1329,36 @@ the @code{-q} option suppresses this beh
  abort:
 
   return retval;
 }
 
 std::string
 do_which (const std::string& name)
 {
+  std::string retval;
+
   octave_value val = symbol_table::find_function (name);
 
   if (val.is_defined ())
     {
       octave_function *fcn = val.function_value ();
 
       if (fcn)
 	{
 	  std::string fn = fcn->fcn_file_name ();
 
-	  return fn.empty ()
+	  retval = fn.empty ()
 	    ? (fcn->is_user_function ()
 	       ? "command-line function" : "built-in function")
 	    : fn;
 	}
     }
 
-  return fcn_file_in_path (name);
+  return retval;
 }
 
 static void
 do_which (std::ostream& os, const std::string& name)
 {
   std::string desc;
 
   octave_value val = symbol_table::find_function (name);
@@ -1351,31 +1374,24 @@ do_which (std::ostream& os, const std::s
 	  if (desc.empty ())
 	    {
 	      if (fcn->is_user_function ())
 		desc = "is a command-line function";
 	      else
 		desc = "is a built-in function";
 	    }
 	  else
-	    desc = "is the function from the file " + desc;
+	    desc = "is the "
+	      + (val.is_user_script ()
+		 ? std::string ("script") : std::string ("function"))
+	      + " from the file " + desc;
 	}
+      
+      os << "which: `" << name << "' " << desc << std::endl;
     }
-
-  if (desc.empty ())
-    {
-      std::string fn = fcn_file_in_path (name);
-
-      if (! fn.empty ())
-	desc = "is the script file " + fn;
-      else
-	desc = "is undefined";
-    }
-
-  os << "which: `" << name << "' " << desc << std::endl;
 }
 
 DEFCMD (which, args, nargout,
   "-*- texinfo -*-\n\
 @deffn {Command} which name @dots{}\n\
 Display the type of each @var{name}.  If @var{name} is defined from a\n\
 function file, the full name of the file is also displayed.\n\
 @seealso{help, lookfor}\n\
