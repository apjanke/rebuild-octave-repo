# HG changeset patch
# User jwe
# Date 1076710432 0
#      Fri Feb 13 22:13:52 2004 +0000
# Node ID c48180a45d3442fb8936efa9210f4d87893f6d0f
# Parent  60c78bde10e56d9ab10a73128a56a9c57149cc05
[project @ 2004-02-13 22:13:52 by jwe]

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -1436,76 +1436,76 @@ template <class T>
 void
 Array<T>::maybe_delete_elements (Array<idx_vector>& ra_idx, const T& rfv)
 {
   int n_idx = ra_idx.length ();
 
   dim_vector lhs_dims = dims ();
 
   int n_lhs_dims = lhs_dims.length ();
-  
+
   Array<int> idx_is_colon (n_idx, 0);
 
   Array<int> idx_is_colon_equiv (n_idx, 0);
 
   // Initialization of colon arrays.
-  
+
   for (int i = 0; i < n_idx; i++)
     {
       idx_is_colon_equiv(i) = ra_idx(i).is_colon_equiv (lhs_dims(i), 1);
 
       idx_is_colon(i) = ra_idx(i).is_colon ();
     }
 
   bool idx_ok = true;
 
   // Check for index out of bounds.
 
   for (int i = 0 ; i < n_idx - 1; i++)
     {
       if (! (idx_is_colon(i) || idx_is_colon_equiv(i)))
 	{
 	  ra_idx(i).sort (true);
-	  
+
 	  if (ra_idx(i).max () > lhs_dims(i))
 	    {
 	      (*current_liboctave_error_handler)
 		("index exceeds array dimensions");
-	     
+
 	      idx_ok = false;
 	      break;
 	    }
 	  else if (ra_idx(i).min () < 0) // I believe this is checked elsewhere
 	    {
 	      (*current_liboctave_error_handler)
 		("index must be one or larger");
 
 	      idx_ok = false;
 	      break;
 	    }
 	}
     }
-  
+
   if (n_idx <= n_lhs_dims)
     {
       int last_idx = ra_idx(n_idx-1).max ();
-      
+
       int sum_el = lhs_dims(n_idx-1);
-      
+
       for (int i = n_idx; i < n_lhs_dims; i++)
 	  sum_el *= lhs_dims(i);
 
       if (last_idx > sum_el - 1)
 	{
 	  (*current_liboctave_error_handler)
 	    ("index exceeds array dimensions");
 
 	  idx_ok = false;
 	}
-    }  
+    }
 
   if (idx_ok)
     {
       if (n_idx > 1
 	  && (all_ones (idx_is_colon) || all_ones (idx_is_colon_equiv)))
 	{
 	  // A(:,:,:) -- we are deleting elements in all dimensions, so
 	  // the result is [](0x0x0).
@@ -1696,29 +1696,29 @@ Array<T>::maybe_delete_elements (Array<i
 	  // which can be of any dimension. We return a column vector, except
 	  // for the case where we are operating on a row column. The elements
 	  // are numerated columns by column.
 	  //
 	  // A(3,3,3)=2;
 	  // A(3:5) = []; A(6)=[]
 	  //
 	  idx_vector idx_vec = ra_idx(0);
-	    
+
 	  int num_to_delete = idx_vec.capacity ();
-	  
+
 	  int lhs_numel = numel ();
-	  
-	  int new_numel = lhs_numel - num_to_delete;  
+
+	  int new_numel = lhs_numel - num_to_delete;
 
 	  T *new_data = new T[new_numel];
-	  
+
 	  Array<int> lhs_ra_idx (ndims (), 0);
-	  
+
 	  int ii = 0;
-	  int iidx = 0;	  
+	  int iidx = 0;
 
 	  for (int i = 0; i < lhs_numel; i++)
 	    {
 	      if (iidx < num_to_delete && i == idx_vec.elem (iidx))
 		{
 		  iidx++;
 		}
 	      else
@@ -1730,17 +1730,17 @@ Array<T>::maybe_delete_elements (Array<i
 	    }
 
 	  if (--(Array<T>::rep)->count <= 0)
 	    delete Array<T>::rep;
 
 	  Array<T>::rep = new typename Array<T>::ArrayRep (new_data, new_numel);
 
 	  dimensions.resize (2);
-	  
+
 	  if (lhs_dims.length () == 2 && lhs_dims(1) == 1)
 	    {
 	      dimensions(0) = new_numel;
 	      dimensions(1) = 1;
 	    }
 	  else
 	    {
 	      dimensions(0) = 1;
@@ -1976,17 +1976,17 @@ Array<T>
 Array<T>::indexN (idx_vector& ra_idx, int resize_ok, const T& rfv) const
 {
   Array<T> retval;
 
   int n_dims = dims().length ();
 
   int orig_len = dims().numel ();
 
-  dim_vector idx_orig_dims = ra_idx.orig_dimensions (); 
+  dim_vector idx_orig_dims = ra_idx.orig_dimensions ();
 
   if (ra_idx.is_colon ())
     {
       // Fast magic colon processing.
 
       retval = Array<T> (*this, dim_vector (orig_len, 1));
     }
   else if (length () == 1)
@@ -1996,17 +1996,17 @@ Array<T>::indexN (idx_vector& ra_idx, in
       Array<T> tmp = Array<T>::index (ra_idx, resize_ok);
 
       if (tmp.length () != 0)
 	retval = Array<T> (tmp, idx_orig_dims);
       else
 	retval = Array<T> (tmp, dim_vector (0, 0));
     }
   else if (vector_equivalent (dims ()))
-    { 
+    {
       // We're getting elements from a vector equivalent i.e. (1x4x1).
 
       Array<T> tmp = Array<T>::index (ra_idx, resize_ok);
 
       int len = tmp.length ();
 
       if (len == 0)
 	{
@@ -2061,17 +2061,17 @@ Array<T>::indexN (idx_vector& ra_idx, in
 	  && ! (ra_idx.is_colon ()
 		|| (ra_idx.one_zero_only () && idx_orig_dims == dims ())))
 	(*current_liboctave_warning_handler)
 	  ("single index used for N-d array");
 
       ra_idx.freeze (orig_len, "nd-array", resize_ok);
 
       if (ra_idx)
-	{ 
+	{
 	  dim_vector result_dims (idx_orig_dims);
 
 	  if (ra_idx.one_zero_only ())
 	    {
 	      result_dims.resize (2);
 	      int ntot = ra_idx.ones_count ();
 	      result_dims(0) = ntot;
 	      result_dims(1) = (ntot > 0 ? 1 : 0);
@@ -2223,17 +2223,17 @@ Array<T>::index (Array<idx_vector>& ra_i
 	      Array<int> result_idx (ra_idx.length (), 0);
 
 	      dim_vector this_dims = dims ();
 
 	      Array<int> elt_idx;
 
 	      for (int i = 0; i < n; i++)
 		{
-		  elt_idx = get_elt_idx (ra_idx, result_idx); 
+		  elt_idx = get_elt_idx (ra_idx, result_idx);
 
 		  int numelem_elt = get_scalar_idx (elt_idx, this_dims);
 
 		  if (numelem_elt > length () || numelem_elt < 0)
 		    (*current_liboctave_error_handler)
 		      ("invalid N-d array index");
 		  else
 		    retval.elem (i) = elem (numelem_elt);
@@ -2397,17 +2397,17 @@ assign2 (Array<LT>& lhs, const Array<RT>
 
   int n_idx = lhs.index_count ();
 
   int lhs_nr = lhs.rows ();
   int lhs_nc = lhs.cols ();
 
   int rhs_nr = rhs.rows ();
   int rhs_nc = rhs.cols ();
-  
+
   if (rhs.length () > 2)
     {
       dim_vector dv_tmp = rhs.squeeze().dims ();
 
       switch (dv_tmp.length ())
 	{
 	case 1:
 	  if (rhs_nr == 1)
@@ -2962,17 +2962,17 @@ assignN (Array<LT>& lhs, const Array<RT>
 		}
 	    }
 	}
 
       lhs.resize (final_lhs_dims);
     }
 
   lhs.chop_trailing_singletons ();
-  
+
   lhs.clear_index ();
 
   return retval;
 }
 
 template <class T>
 void
 Array<T>::print_info (std::ostream& os, const std::string& prefix) const
