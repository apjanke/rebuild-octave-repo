# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1205871694 14400
#      Tue Mar 18 16:21:34 2008 -0400
# Branch release-3-0-x
# Node ID 1e9ce581998e9d0c830373997066443417819340
# Parent  abe3831a5fc1ee84d8d9ec2356f93c846e147393
partial specialization for octave_int_fit_to_range

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,17 +1,17 @@
 2008-03-18  David Bateman  <dbateman@free.fr>
 
 	* Array.cc (Array<T>::index): Don't short_freeze on index with
 	fewer dimensions than the array only if the last dimension is empty.
 
 2008-03-18  John W. Eaton  <jwe@octave.org>
 
-	* oct-inttypes.h (OCTAVE_DBL_FTR): New macro.
-	Use it to provide double specializations for octave_int_fit_to_range.
+	* oct-inttypes.h (octave_int_fit_to_range):
+	Use partial specialization for double values.
 
 2008-03-12  John W. Eaton  <jwe@octave.org>
 
 	* dMatrix.cc (Matrix::lssolve): One more xGELSD workspace fix.
 
 2008-03-07  John W. Eaton  <jwe@octave.org>
 
 	* idx-vector.cc (IDX_VEC_REP::idx_vector_rep (bool),
diff --git a/liboctave/oct-inttypes.h b/liboctave/oct-inttypes.h
--- a/liboctave/oct-inttypes.h
+++ b/liboctave/oct-inttypes.h
@@ -123,36 +123,22 @@ OCTAVE_INT_BINOP_TRAIT (uint64_t, uint64
 
 template <class T1, class T2>
 inline T2
 octave_int_fit_to_range (const T1& x, const T2& mn, const T2& mx)
 {
   return (x > mx ? mx : (x < mn ? mn : T2 (x)));
 }
 
-#define OCTAVE_DBL_FTR(T) \
-  template <> \
-  inline T \
-  octave_int_fit_to_range<double, T> (const double& x, const T& mn, \
-				      const T& mx) \
-  { \
-    return (lo_ieee_isnan (x) ? 0 : (x > mx ? mx : (x < mn ? mn : static_cast<T> (x)))); \
-  }
-
-OCTAVE_DBL_FTR (char)
-OCTAVE_DBL_FTR (short)
-OCTAVE_DBL_FTR (int)
-OCTAVE_DBL_FTR (long)
-OCTAVE_DBL_FTR (long long)
-
-OCTAVE_DBL_FTR (unsigned char)
-OCTAVE_DBL_FTR (unsigned short)
-OCTAVE_DBL_FTR (unsigned int)
-OCTAVE_DBL_FTR (unsigned long)
-OCTAVE_DBL_FTR (unsigned long long)
+template <typename T>
+inline T
+octave_int_fit_to_range (const double& x, const T& mn, const T& mx)
+{
+  return (lo_ieee_isnan (x) ? 0 : (x > mx ? mx : (x < mn ? mn : static_cast<T> (x))));
+}
 
 // If X is unsigned and the new type is signed, then we only have to
 // check the upper limit, but we should cast the maximum value of the
 // new type to an unsigned type before performing the comparison.
 // This should always be OK because the maximum value should always be
 // positive.
 
 #define OCTAVE_US_S_FTR(T1, T2, TC) \
