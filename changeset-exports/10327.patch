# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1266391757 -3600
#      Wed Feb 17 08:29:17 2010 +0100
# Node ID 76cf6dd20f1acbe140ad2045ca7ecfe26dc98ff8
# Parent  ade59ae10e80f1999ce51f3e3261c9daeb33bab1
take advantage of lazy index optimization in lookup

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2010-02-17  Jaroslav Hajek  <highegg@gmail.com>
+
+	* DLD-FUNCTIONS/lookup.cc (do_numeric_lookup): Return an idx_vector
+	when left_inf is in effect, to enable lazy index optimization.
+
 2010-02-16  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-lazy-idx.h: New source.
 	* ov-lazy-idx.cc: New source.
 	* ov.cc (install_types): Register lazy_index here.
 	(octave_value::octave_value (const idx_vector&)): Use lazy
 	construction if possible, under control of an optional flag.
 	(octave_value::clone): Implement.
diff --git a/src/DLD-FUNCTIONS/lookup.cc b/src/DLD-FUNCTIONS/lookup.cc
--- a/src/DLD-FUNCTIONS/lookup.cc
+++ b/src/DLD-FUNCTIONS/lookup.cc
@@ -126,53 +126,64 @@ do_numeric_lookup (const ArrayT& array, 
           octave_idx_type j = idx.xelem (i);
           match.xelem (i) = j != 0 && values(i) == array(j-1);
         }
 
       retval = match;
     }
   else if (match_idx || left_inf || right_inf)
     {
-      NDArray ridx (idx.dims ());
       if (match_idx)
         {
+          NDArray ridx (idx.dims ());
+
           for (octave_idx_type i = 0; i < nval; i++)
             {
               octave_idx_type j = idx.xelem (i);
               ridx.xelem (i) = (j != 0 && values(i) == array(j-1)) ? j : 0;
             }
+
+          retval = ridx; 
         }
       else if (left_inf && right_inf)
         {
+          // Results in valid indices. Optimize using lazy index.
+          octave_idx_type zero = 0;
           for (octave_idx_type i = 0; i < nval; i++)
             {
-              octave_idx_type one = 1;
-              octave_idx_type j = idx.xelem (i);
-              ridx.xelem (i) = std::min (std::max (one, j), n-1);
+              octave_idx_type j = idx.xelem (i) - 1;
+              idx.xelem (i) = std::max (zero, std::min (j, n-2));
             }
+
+          retval = idx_vector (idx);
         }
       else if (left_inf)
         {
-          octave_idx_type one = 1;
+          // Results in valid indices. Optimize using lazy index.
+          octave_idx_type zero = 0;
           for (octave_idx_type i = 0; i < nval; i++)
             {
-              octave_idx_type j = idx.xelem (i);
-              ridx.xelem (i) = std::max (one, j);
+              octave_idx_type j = idx.xelem (i) - 1;
+              idx.xelem (i) = std::max (zero, j);
             }
+
+          retval = idx_vector (idx);
         }
       else if (right_inf)
         {
+          NDArray ridx (idx.dims ());
+
           for (octave_idx_type i = 0; i < nval; i++)
             {
               octave_idx_type j = idx.xelem (i);
               ridx.xelem (i) = std::min (j, n-1);
             }
+
+          retval = ridx;
         }
-
-      retval = ridx;
     }
   else
     retval = idx;
 
   return retval;
 }
 
 DEFUN_DLD (lookup, args, ,
