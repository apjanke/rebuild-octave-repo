# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1260215600 18000
#      Mon Dec 07 14:53:20 2009 -0500
# Node ID 6cb30a539481208a295e4353aefad2e771a0272a
# Parent  fb6b6fcafa62d836027177ab3aeddf3856db76ec
untabify files in examples directory

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,18 @@
+2009-12-07  John W. Eaton  <jwe@octave.org>
+
+	* examples/firstmexdemo.c, examples/fortdemo.cc,
+	examples/funcdemo.cc, examples/hello.cc, examples/make_int.cc,
+	examples/mycell.c, examples/myfeval.c, examples/myfunc.c,
+	examples/mypow2.c, examples/mysparse.c, examples/mystring.c,
+	examples/mystruct.c, examples/paramdemo.cc,
+	examples/stringdemo.cc, examples/structdemo.cc,
+	examples/unwinddemo.cc, examples/embedded.cc: Untabify.
+
 2009-12-04  John W. Eaton  <jwe@octave.org>
 
 	* configure.ac (OCTAVE_API_VERSION_NUMBER): New variable.
 	(OCTAVE_API_VERSION): Define using OCTAVE_API_VERSION_NUMBER.
 	* common.mk (OCTAVE_API_VERSION_NUMBER): New variable.
 
 2009-12-04  John W. Eaton  <jwe@octave.org>
 
diff --git a/examples/embedded.cc b/examples/embedded.cc
--- a/examples/embedded.cc
+++ b/examples/embedded.cc
@@ -15,30 +15,30 @@ main (void)
   octave_idx_type n = 2;
   Matrix a_matrix = Matrix (1, 2);
 
   std::cout << "GCD of [";
   for (octave_idx_type i = 0; i < n; i++)
     {
       a_matrix (i) = 5 * (i + 1); 
       if (i != 0)
-	std::cout << ", " << 5 * (i + 2);
+        std::cout << ", " << 5 * (i + 2);
       else
-	std::cout << 5 * (i + 2);
+        std::cout << 5 * (i + 2);
     }
   std::cout << "] is ";
 
   octave_value_list in = octave_value (a_matrix);
   octave_value_list out = feval ("gcd", in, 1);
 
   if (!error_state && out.length () > 0)
     {
       a_matrix = out(0).matrix_value ();
       if (a_matrix.numel () == 1)
-	std::cout << a_matrix(0) << "\n";
+        std::cout << a_matrix(0) << "\n";
       else
-	std::cout << "invalid\n";
+        std::cout << "invalid\n";
     }
   else
     std::cout << "invalid\n";
 
   return 0;
 }
diff --git a/examples/firstmexdemo.c b/examples/firstmexdemo.c
--- a/examples/firstmexdemo.c
+++ b/examples/firstmexdemo.c
@@ -1,11 +1,11 @@
 #include "mex.h"
 
 void
 mexFunction (int nlhs, mxArray *plhs[], int nrhs, 
-	     const mxArray *prhs[])
+             const mxArray *prhs[])
 {
   mxArray *v = mxCreateDoubleMatrix (1, 1, mxREAL);
   double *data = mxGetPr (v);
   *data = 1.23456789;
   plhs[0] = v;
 }
diff --git a/examples/fortdemo.cc b/examples/fortdemo.cc
--- a/examples/fortdemo.cc
+++ b/examples/fortdemo.cc
@@ -22,14 +22,14 @@ DEFUN_DLD (fortdemo , args , , "Fortran 
         {
           double *av = a.fortran_vec ();
           octave_idx_type na = a.nelem ();
           OCTAVE_LOCAL_BUFFER (char, ctmp, 128);
 
           F77_XFCN (fortsub, FORTSUB, (na, av, ctmp 
                     F77_CHAR_ARG_LEN (128)));
 
-	  retval(1) = std::string (ctmp);
-	  retval(0) = a;
+          retval(1) = std::string (ctmp);
+          retval(0) = a;
         }
     }
   return retval;
 }
diff --git a/examples/funcdemo.cc b/examples/funcdemo.cc
--- a/examples/funcdemo.cc
+++ b/examples/funcdemo.cc
@@ -23,12 +23,12 @@ DEFUN_DLD (funcdemo, args, nargout, "Fun
       else if (args(0).is_string ())
         {
           std::string fcn = args (0).string_value ();
           if (! error_state)
             retval = feval (fcn, newargs, nargout);
         }
       else
         error ("funcdemo: expected string,",
-	       " inline or function handle");
+               " inline or function handle");
     }
   return retval;
 }
diff --git a/examples/hello.cc b/examples/hello.cc
--- a/examples/hello.cc
+++ b/examples/hello.cc
@@ -28,22 +28,22 @@
 //   3
 //   ans = 3
 
 // Additional examples are available in the files in the src directory
 // of the Octave distribution that use the macro DEFUN_DLD_BUILTIN.
 // Currently, this includes the files
 //
 //   balance.cc  fft.cc      ifft.cc     minmax.cc   sort.cc
-//   chol.cc	 fft2.cc     ifft2.cc    pinv.cc     svd.cc
+//   chol.cc     fft2.cc     ifft2.cc    pinv.cc     svd.cc
 //   colloc.cc   filter.cc   inv.cc      qr.cc       syl.cc
 //   dassl.cc    find.cc     log.cc      quad.cc
-//   det.cc	 fsolve.cc   lsode.cc    qzval.cc
-//   eig.cc	 givens.cc   lu.cc       rand.cc
-//   expm.cc	 hess.cc     minmax.cc   schur.cc
+//   det.cc      fsolve.cc   lsode.cc    qzval.cc
+//   eig.cc      givens.cc   lu.cc       rand.cc
+//   expm.cc     hess.cc     minmax.cc   schur.cc
 //
 // The difference between DEFUN_DLD and DEFUN_DLD_BUILTIN is that
 // DEFUN_DLD_BUILTIN can define a built-in function that is not
 // dynamically loaded if the operating system does not support dynamic
 // linking.  To define your own dynamically linked functions you
 // should use DEFUN_DLD.
 
 #include <octave/config.h>
diff --git a/examples/make_int.cc b/examples/make_int.cc
--- a/examples/make_int.cc
+++ b/examples/make_int.cc
@@ -239,17 +239,17 @@ Creates an integer variable from VAL.")
   static bool type_loaded = false;
 
   if (! type_loaded)
     {
       octave_integer::register_type ();
       mlock ("make_int");
 
       octave_stdout << "installing integer type at type-id = "
-	   << octave_integer::static_type_id () << "\n";
+           << octave_integer::static_type_id () << "\n";
 
       INSTALL_UNOP (op_not, octave_integer, gnot);
       INSTALL_UNOP (op_uminus, octave_integer, uminus);
       INSTALL_UNOP (op_transpose, octave_integer, transpose);
       INSTALL_UNOP (op_hermitian, octave_integer, hermitian);
 
       INSTALL_NCUNOP (op_incr, octave_integer, incr);
       INSTALL_NCUNOP (op_decr, octave_integer, decr);
@@ -276,17 +276,17 @@ Creates an integer variable from VAL.")
 
   octave_value retval;
 
   if (args.length () == 1)
     {
       double d = args(0).double_value ();
 
       if (! error_state)
-	retval = octave_value (new octave_integer (NINT (d)));
+        retval = octave_value (new octave_integer (NINT (d)));
     }
   else
     usage ("make_int");
 
   return retval;
 }
 
 DEFUN_DLD (doit, args, ,
diff --git a/examples/mycell.c b/examples/mycell.c
--- a/examples/mycell.c
+++ b/examples/mycell.c
@@ -1,13 +1,13 @@
 #include "mex.h"
 
 void
 mexFunction (int nlhs, mxArray* plhs[], int nrhs, 
-	     const mxArray* prhs[])
+             const mxArray* prhs[])
 {
   mwSize n;
   mwIndex i;
 
   if (nrhs != 1 || ! mxIsCell (prhs[0]))
     mexErrMsgTxt ("expects cell");
 
   n = mxGetNumberOfElements (prhs[0]);
diff --git a/examples/myfeval.c b/examples/myfeval.c
--- a/examples/myfeval.c
+++ b/examples/myfeval.c
@@ -1,20 +1,20 @@
 #include "mex.h"
 
 void
 mexFunction (int nlhs, mxArray* plhs[], int nrhs, 
-	     const mxArray* prhs[])
+             const mxArray* prhs[])
 {
   char *str;
 
   mexPrintf ("Hello, World!\n");
 
   mexPrintf ("I have %d inputs and %d outputs\n", nrhs,
-	     nlhs);
+             nlhs);
 
   if (nrhs < 1 || ! mxIsString (prhs[0])) 
     mexErrMsgTxt ("function name expected");
 
   str = mxArrayToString (prhs[0]);
 
   mexPrintf ("I'm going to call the function %s\n", str);
 
diff --git a/examples/myfunc.c b/examples/myfunc.c
--- a/examples/myfunc.c
+++ b/examples/myfunc.c
@@ -1,13 +1,13 @@
 #include "mex.h"
 
 void
 mexFunction (int nlhs, mxArray *plhs[], int nrhs, 
-	     const mxArray *prhs[])
+             const mxArray *prhs[])
 {
   const char *nm;
   nm = mexFunctionName ();
   mexPrintf ("You called function: %s\n", nm);
   if (strcmp (nm, "myfunc") == 0)
     mexPrintf ("This is the principal function\n", nm);
   return; 
 }
diff --git a/examples/mypow2.c b/examples/mypow2.c
--- a/examples/mypow2.c
+++ b/examples/mypow2.c
@@ -1,13 +1,13 @@
 #include "mex.h"
 
 void
 mexFunction (int nlhs, mxArray* plhs[], int nrhs, 
-	     const mxArray* prhs[])
+             const mxArray* prhs[])
 {
   mwIndex i;
   mwSize n;
   double *vri, *vro;
   
   if (nrhs != 1 || ! mxIsNumeric (prhs[0]))
     mexErrMsgTxt ("expects matrix");
 
@@ -21,19 +21,19 @@ mexFunction (int nlhs, mxArray* plhs[], 
 
   if (mxIsComplex (prhs[0]))
     {
       double *vii, *vio;
       vii = mxGetPi (prhs[0]);
       vio = mxGetPi (plhs[0]);
 
       for (i = 0; i < n; i++)
-	{
-	  vro [i] = vri [i] * vri [i] - vii [i] * vii [i];
-	  vio [i] = 2 * vri [i] * vii [i];
-	}
+        {
+          vro [i] = vri [i] * vri [i] - vii [i] * vii [i];
+          vio [i] = 2 * vri [i] * vii [i];
+        }
     }
   else
     {
       for (i = 0; i < n; i++)
-	vro [i] = vri [i] * vri [i];
+        vro [i] = vri [i] * vri [i];
     }
 }
diff --git a/examples/mysparse.c b/examples/mysparse.c
--- a/examples/mysparse.c
+++ b/examples/mysparse.c
@@ -1,13 +1,13 @@
 #include "mex.h"
 
 void
 mexFunction (int nlhs, mxArray *plhs[], int nrhs, 
-	     const mxArray *prhs[])
+             const mxArray *prhs[])
 {
   mwSize n, m, nz;
   mxArray *v;
   mwIndex i;
   double *pr, *pi;
   double *pr2, *pi2;
   mwIndex *ir, *jc;
   mwIndex *ir2, *jc2;
@@ -17,28 +17,28 @@ mexFunction (int nlhs, mxArray *plhs[], 
 
   m = mxGetM (prhs [0]);
   n = mxGetN (prhs [0]);
   nz = mxGetNzmax (prhs [0]);
   
   if (mxIsComplex (prhs[0]))
     {
       mexPrintf ("Matrix is %d-by-%d complex",
-		 " sparse matrix", m, n);
+                 " sparse matrix", m, n);
       mexPrintf (" with %d elements\n", nz);
 
       pr = mxGetPr (prhs[0]);
       pi = mxGetPi (prhs[0]);
       ir = mxGetIr (prhs[0]);
       jc = mxGetJc (prhs[0]);
 
       i = n;
       while (jc[i] == jc[i-1] && i != 0) i--;
       mexPrintf ("last non-zero element (%d, %d) =", 
-		 ir[nz-1]+ 1, i);
+                 ir[nz-1]+ 1, i);
       mexPrintf (" (%g, %g)\n", pr[nz-1], pi[nz-1]);
 
       v = mxCreateSparse (m, n, nz, mxCOMPLEX);
       pr2 = mxGetPr (v);
       pi2 = mxGetPi (v);
       ir2 = mxGetIr (v);
       jc2 = mxGetJc (v);
       
@@ -53,17 +53,17 @@ mexFunction (int nlhs, mxArray *plhs[], 
 
       if (nlhs > 0)
         plhs[0] = v;
     }
   else if (mxIsLogical (prhs[0]))
     {
       bool *pbr, *pbr2;
       mexPrintf ("Matrix is %d-by-%d logical",
-		 " sparse matrix", m, n);
+                 " sparse matrix", m, n);
       mexPrintf (" with %d elements\n", nz);
 
       pbr = mxGetLogicals (prhs[0]);
       ir = mxGetIr (prhs[0]);
       jc = mxGetJc (prhs[0]);
 
       i = n;
       while (jc[i] == jc[i-1] && i != 0) i--;
@@ -84,17 +84,17 @@ mexFunction (int nlhs, mxArray *plhs[], 
         jc2[i] = jc[i];
 
       if (nlhs > 0)
         plhs[0] = v;
     }
   else
     {
       mexPrintf ("Matrix is %d-by-%d real",
-		 " sparse matrix", m, n);
+                 " sparse matrix", m, n);
       mexPrintf (" with %d elements\n", nz);
 
       pr = mxGetPr (prhs[0]);
       ir = mxGetIr (prhs[0]);
       jc = mxGetJc (prhs[0]);
 
       i = n;
       while (jc[i] == jc[i-1] && i != 0) i--;
diff --git a/examples/mystring.c b/examples/mystring.c
--- a/examples/mystring.c
+++ b/examples/mystring.c
@@ -1,26 +1,26 @@
 #include <string.h>
 #include "mex.h"
 
 void
 mexFunction (int nlhs, mxArray *plhs[], int nrhs, 
-	     const mxArray *prhs[])
+             const mxArray *prhs[])
 {
   mwIndex i, j;
   mwSize m, n;
   mxChar *pi, *po;
 
   if (nrhs != 1 || ! mxIsChar (prhs[0]) || 
       mxGetNumberOfDimensions (prhs[0]) > 2)
     mexErrMsgTxt ("expecting char matrix");
 
   m = mxGetM (prhs[0]);
   n = mxGetN (prhs[0]);
   pi = mxGetChars (prhs[0]);
   plhs[0] = mxCreateNumericMatrix (m, n, mxCHAR_CLASS, 
-				   mxREAL);
+                                   mxREAL);
   po = mxGetChars (plhs[0]);
 
   for (j = 0; j < n; j++)
     for (i = 0; i < m; i++)
       po [j*m + m - 1 - i] = pi [j*m + i];
 }
diff --git a/examples/mystruct.c b/examples/mystruct.c
--- a/examples/mystruct.c
+++ b/examples/mystruct.c
@@ -1,13 +1,13 @@
 #include "mex.h"
 
 void
 mexFunction (int nlhs, mxArray* plhs[], int nrhs, 
-	     const mxArray* prhs[])
+             const mxArray* prhs[])
 {
   int i;
   mwIndex j;
   mxArray *v;
   const char *keys[] = { "this", "that" };
 
   if (nrhs != 1 || ! mxIsStruct (prhs[0]))
     mexErrMsgTxt ("expects struct");
diff --git a/examples/paramdemo.cc b/examples/paramdemo.cc
--- a/examples/paramdemo.cc
+++ b/examples/paramdemo.cc
@@ -1,12 +1,12 @@
 #include <octave/oct.h>
 
 DEFUN_DLD (paramdemo, args, nargout, 
-	   "Parameter Check Demo.")
+           "Parameter Check Demo.")
 {
   int nargin = args.length ();
   octave_value retval;
 
   if (nargin != 1)
     print_usage();
   else if (nargout != 0)
     error ("paramdemo: function has no output arguments");
@@ -17,18 +17,18 @@ DEFUN_DLD (paramdemo, args, nargout,
       double max_val = 10.0;
       octave_stdout << "Properties of input array:\n";
       if (m.any_element_is_negative ())
         octave_stdout << "  includes negative values\n";
       if (m.any_element_is_inf_or_nan())
         octave_stdout << "  includes Inf or NaN values\n";
       if (m.any_element_not_one_or_zero())
         octave_stdout << 
-	  "  includes other values than 1 and 0\n";
+          "  includes other values than 1 and 0\n";
       if (m.all_elements_are_int_or_inf_or_nan())
         octave_stdout << 
-	  "  includes only int, Inf or NaN values\n";
+          "  includes only int, Inf or NaN values\n";
       if (m.all_integers (min_val, max_val))
         octave_stdout << 
-	  "  includes only integers in [-10,10]\n";
+          "  includes only integers in [-10,10]\n";
     }
   return retval;
 }
diff --git a/examples/stringdemo.cc b/examples/stringdemo.cc
--- a/examples/stringdemo.cc
+++ b/examples/stringdemo.cc
@@ -18,16 +18,16 @@ DEFUN_DLD (stringdemo, args, , "String D
           else
             retval(1) = octave_value (ch, true, '\'');
 
           octave_idx_type nr = ch.rows();
           for (octave_idx_type i = 0; i < nr / 2; i++)
             {
               std::string tmp = ch.row_as_string (i);
               ch.insert (ch.row_as_string(nr-i-1).c_str(), 
-			 i, 0);
+                         i, 0);
               ch.insert (tmp.c_str(), nr-i-1, 0);
             }
           retval(0) = octave_value (ch, true);
         }
     }
   return retval;
 }
diff --git a/examples/structdemo.cc b/examples/structdemo.cc
--- a/examples/structdemo.cc
+++ b/examples/structdemo.cc
@@ -13,17 +13,17 @@ DEFUN_DLD (structdemo, args, , "Struct d
       Octave_map arg0 = args(0).map_value ();
       std::string arg1 = args(1).string_value ();
 
       if (! error_state && arg0.contains (arg1))
         {
           // The following two lines might be written as
           //    octave_value tmp;
           //    for (Octave_map::iterator p0 = 
-	  //        arg0.begin(); 
+          //        arg0.begin(); 
           //        p0 != arg0.end(); p0++ )
           //      if (arg0.key (p0) == arg1)
           //        {
           //          tmp = arg0.contents (p0) (0);
           //          break;
           //        }
           // though using seek is more concise.
           Octave_map::const_iterator p1 = arg0.seek (arg1);
diff --git a/examples/unwinddemo.cc b/examples/unwinddemo.cc
--- a/examples/unwinddemo.cc
+++ b/examples/unwinddemo.cc
@@ -17,16 +17,16 @@ DEFUN_DLD (unwinddemo, args, nargout, "U
     {
       NDArray a = args(0).array_value ();
       NDArray b = args(1).array_value ();
 
       if (! error_state)
         {
           unwind_protect::begin_frame ("Funwinddemo");
           unwind_protect_ptr 
-	    (current_liboctave_warning_handler);
+            (current_liboctave_warning_handler);
           set_liboctave_warning_handler(err_hand);
           retval = octave_value (quotient (a, b));
           unwind_protect::run_frame ("Funwinddemo");
         }
     }
   return retval;
 }
