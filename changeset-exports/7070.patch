# HG changeset patch
# User jwe
# Date 1193344877 0
#      Thu Oct 25 20:41:17 2007 +0000
# Node ID 7593f8e83a2e52704f886fac38262ca834df9f05
# Parent  c76471cc72d19e2ce607a2dbf4d7955a4c145c94
[project @ 2007-10-25 20:41:16 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,18 @@
+2007-10-25  John W. Eaton  <jwe@octave.org>
+
+	* graphics.cc (figure::properties::set_currentaxes): 
+	Allow currentfigure to be NaN.
+
+2007-10-25  Michael Goffioul <michael.goffioul@gmail.com>
+
+	* DLD-FUNCTIONS/__contourc__.cc: Use unsigned int instead of uint.
+	(drawcn): Use 1 << k instead of pow (2, k).
+
 2007-10-25  John W. Eaton  <jwe@octave.org>
 
 	* symtab.h (symbol_record::TYPE): Delete trailing comma in enum decl.
 
 	* ov-base.h (DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA): Use
 	OCTAVE_EMPTY_CPP_ARG to avoid annoying Sun compiler warning.
 
 	* Makefile.in (graphics.h): Use $(AWK) instead of awk.
diff --git a/src/DLD-FUNCTIONS/__contourc__.cc b/src/DLD-FUNCTIONS/__contourc__.cc
--- a/src/DLD-FUNCTIONS/__contourc__.cc
+++ b/src/DLD-FUNCTIONS/__contourc__.cc
@@ -89,20 +89,20 @@ start_contour (double lvl, double x, dou
   this_contour.resize (2, 0);
   add_point (lvl, 0);
   add_point (x, y);
 }
 
 static void
 drawcn (const RowVector& X, const RowVector& Y, const Matrix& Z,
 	double lvl, int r, int c, double ct_x, double ct_y,
-	uint start_edge, bool first, charMatrix& mark)
+	unsigned int start_edge, bool first, charMatrix& mark)
 {
   double px[4], py[4], pz[4], tmp;
-  uint stop_edge, next_edge, pt[2];
+  unsigned int stop_edge, next_edge, pt[2];
   int next_r, next_c;
 
   //get x, y, and z - lvl for current facet
   px[0] = px[3] = X(c);
   px[1] = px[2] = X(c+1);
 
   py[0] = py[1] = Y(r);
   py[2] = py[3] = Y(r+1);
@@ -122,26 +122,26 @@ drawcn (const RowVector& X, const RowVec
 
   // Get mark value of current facet.
   char id = static_cast<char> (mark(r, c));
 
   // Check startedge s.
   if (start_edge == 255)
     {
       // Find start edge.
-      for (uint k = 0; k < 4; k++)
-        if (static_cast<char> (pow(2, k)) & id)
+      for (unsigned int k = 0; k < 4; k++)
+        if (static_cast<char> (1 << k) & id)
           start_edge = k;
     }
 
   if (start_edge == 255)
     return;
 
   // Decrease mark value of current facet for start edge.
-  mark(r, c) -= static_cast<char> (pow(2, start_edge));
+  mark(r, c) -= static_cast<char> (1 << start_edge);
 
   // Next point (clockwise).
   pt[0] = start_edge;
   pt[1] = (pt[0] + 1) % 4;
 
   // Calculate contour segment start if first of contour.
   if (first)
     {
@@ -154,24 +154,24 @@ drawcn (const RowVector& X, const RowVec
 	  ct_x = px[pt[0]] + (px[pt[1]] - px[pt[0]])/(1 + tmp);
 	  ct_y = py[pt[0]] + (py[pt[1]] - py[pt[0]])/(1 + tmp);
 	}
 
       start_contour (lvl, ct_x, ct_y);
     }
 
   // Find stop edge FIXME: control flow --> while.
-  for (uint k = 1; k <= 4; k++)
+  for (unsigned int k = 1; k <= 4; k++)
     {
       if (start_edge == 0 || start_edge == 2)
         stop_edge = (start_edge + k) % 4;
       else
         stop_edge = (start_edge - k) % 4;
 
-      if (static_cast<char> (pow(2, stop_edge)) & id)
+      if (static_cast<char> (1 << stop_edge) & id)
         break;
     }
 
   pt[0] = stop_edge;
   pt[1] = (pt[0] + 1) % 4;
   tmp = fabs (pz[pt[1]]) / fabs (pz[pt[0]]);
 
   if (xisnan (tmp))
@@ -181,17 +181,17 @@ drawcn (const RowVector& X, const RowVec
       ct_x = px[pt[0]] + (px[pt[1]] - px[pt[0]])/(1 + tmp);
       ct_y = py[pt[0]] + (py[pt[1]] - py[pt[0]])/(1 + tmp);
     }
 
   // Add point to contour.
   add_point (ct_x, ct_y);
 
   // Decrease id value of current facet for start edge.
-  mark(r, c) -= static_cast<char>(pow(2,stop_edge));
+  mark(r, c) -= static_cast<char> (1 << stop_edge);
 
   // Find next facet.
   next_c = c;
   next_r = r;
 
   if (stop_edge == 0)
     next_r--; 
   else if (stop_edge == 1)
@@ -209,96 +209,96 @@ drawcn (const RowVector& X, const RowVec
       next_edge = (stop_edge + 2) % 4;
       drawcn (X, Y, Z, lvl, next_r, next_c, ct_x, ct_y, next_edge, false, mark);
     }
 }
 
 static void
 mark_facets (const Matrix& Z, charMatrix& mark, double lvl)
 {
-  uint nr = mark.rows ();
-  uint nc = mark.cols ();
+  unsigned int nr = mark.rows ();
+  unsigned int nc = mark.cols ();
 
   double f[4];
 
-  for (uint c = 0; c < nc; c++)
-    for (uint r = 0; r < nr; r++)
+  for (unsigned int c = 0; c < nc; c++)
+    for (unsigned int r = 0; r < nr; r++)
       {
         f[0] = Z(r, c) - lvl;
         f[1] = Z(r, c+1) - lvl;
         f[3] = Z(r+1, c) - lvl;
         f[2] = Z(r+1, c+1) - lvl;
 
-        for (uint i = 0; i < 4; i++)
+        for (unsigned int i = 0; i < 4; i++)
           if (fabs(f[i]) < DBL_EPSILON)
             f[i] = DBL_EPSILON;
 
         if (f[1] * f[2] < 0)
 	  mark(r, c) += 2;
 
         if (f[0] * f[3] < 0)
 	  mark(r, c) += 8;
       }
 
-  for (uint r = 0; r < nr; r++)
-    for (uint c = 0; c < nc; c++)
+  for (unsigned int r = 0; r < nr; r++)
+    for (unsigned int c = 0; c < nc; c++)
       {
         f[0] = Z(r, c) - lvl;
         f[1] = Z(r, c+1) - lvl;
         f[3] = Z(r+1, c) - lvl;
         f[2] = Z(r+1, c+1) - lvl;
 
-        for (uint i = 0; i < 4; i++)
+        for (unsigned int i = 0; i < 4; i++)
           if (fabs(f[i]) < DBL_EPSILON)
             f[i] = DBL_EPSILON;
 
         if (f[0] * f[1] < 0)
 	  mark(r, c) += 1;
 
         if (f[2] * f[3] < 0)
 	  mark(r, c) += 4;
       }
 }
 
 static void
 cntr (const RowVector& X, const RowVector& Y, const Matrix& Z, double lvl)
 {
-  uint nr = Z.rows ();
-  uint nc = Z.cols ();
+  unsigned int nr = Z.rows ();
+  unsigned int nc = Z.cols ();
 
   charMatrix mark (nr - 1, nc - 1, 0);
 
   mark_facets (Z, mark, lvl);
 
   // Find contours that start at a domain edge.
 
-  for (uint c = 0; c < nc - 1; c++)
+  for (unsigned int c = 0; c < nc - 1; c++)
     {
       // Top.
       if (mark(0, c) & 1)
         drawcn (X, Y, Z, lvl, 0, c, 0.0, 0.0, 0, true, mark);
 
       // Bottom.
       if (mark(nr - 2, c) & 4)
 	drawcn (X, Y, Z, lvl, nr - 2, c, 0.0, 0.0, 2, true, mark);
     }
 
-  for (uint r = 0; r < nr - 1; r++)
+  for (unsigned int r = 0; r < nr - 1; r++)
     {
       // Left.
       if (mark(r, 0) & 8)
         drawcn (X, Y, Z, lvl, r, 0, 0.0, 0.0, 3, true, mark);
 
       // Right.
       if (mark(r, nc - 2) & 2)
         drawcn (X, Y, Z, lvl, r, nc - 2, 0.0, 0.0, 1, true, mark);
     }
 
-  for (uint r = 0; r < nr - 1; r++)
-    for (uint c = 0; c < nc - 1; c++)
+  for (unsigned int r = 0; r < nr - 1; r++)
+    for (unsigned int c = 0; c < nc - 1; c++)
       if (mark (r, c) > 0)
         drawcn (X, Y, Z, lvl, r, c, 0.0, 0.0, 255, true, mark);
 }
 
 DEFUN_DLD (__contourc__, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} __contourc__ (@var{x}, @var{y}, @var{z}, @var{levels})\n\
 Undocumented internal function.\n\
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -837,17 +837,17 @@ figure::properties::properties (const gr
 { }
 
 void
 figure::properties::set_currentaxes (const graphics_handle& val)
 {
   if (error_state)
     return;
 
-  if (is_handle (val))
+  if (xisnan (val.value ()) || is_handle (val))
     currentaxes = val;
   else
     gripe_set_invalid ("currentaxes");
 }
 
 void
 figure::properties::set_visible (const octave_value& val)
 {
