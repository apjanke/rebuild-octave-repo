# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1353435891 18000
#      Tue Nov 20 13:24:51 2012 -0500
# Node ID f2b8f90052fd85699fb59a08e40b0b0f8ddf36ee
# Parent  126285fce87676cdc42d82c900dcec1c17b9cfe4
warn instead of throwing an error for invalid structure field names

* ov-struct.cc, ov-struct.h (maybe_warn_invalid_field_name):
New function.
(octave_struct::subsasgn, octave_scalar_struct::dotref,
octave_scalar_struct::subsasgn, Fstruct): Call
maybe_warn_invalid_field_name.
* pt-idx.cc (tree_index_expression::get_struct_index): Don't check for
valid structure field names here.

diff --git a/libinterp/octave-value/ov-struct.cc b/libinterp/octave-value/ov-struct.cc
--- a/libinterp/octave-value/ov-struct.cc
+++ b/libinterp/octave-value/ov-struct.cc
@@ -111,16 +111,32 @@ gripe_invalid_index_type (const std::str
 }
 
 static void
 gripe_failed_assignment (void)
 {
   error ("assignment to structure element failed");
 }
 
+static void
+maybe_warn_invalid_field_name (const std::string& key, const char *who)
+{
+  if (! valid_identifier (key))
+    {
+      if (who)
+        warning_with_id ("Octave:matlab-incompatible",
+                         "%s: invalid structure field name '%s'",
+                         who, key.c_str ());
+      else
+        warning_with_id ("Octave:matlab-incompatible",
+                         "invalid structure field name '%s'",
+                         key.c_str ());
+    }
+}
+
 octave_value_list
 octave_struct::subsref (const std::string& type,
                         const std::list<octave_value_list>& idx,
                         int nargout)
 {
   octave_value_list retval;
 
   int skip = 1;
@@ -300,16 +316,21 @@ octave_struct::subsasgn (const std::stri
                 octave_value_list t_idx = *p;
 
                 octave_value_list key_idx = *++p;
 
                 assert (key_idx.length () == 1);
 
                 std::string key = key_idx(0).string_value ();
 
+                maybe_warn_invalid_field_name (key, "subsasgn");
+
+                if (error_state)
+                  return retval;
+
                 std::list<octave_value_list> next_idx (idx);
 
                 // We handled two index elements, so subsasgn to
                 // needs to skip both of them.
 
                 next_idx.erase (next_idx.begin ());
                 next_idx.erase (next_idx.begin ());
 
@@ -358,16 +379,21 @@ octave_struct::subsasgn (const std::stri
         case '.':
           {
             octave_value_list key_idx = idx.front ();
 
             assert (key_idx.length () == 1);
 
             std::string key = key_idx(0).string_value ();
 
+            maybe_warn_invalid_field_name (key, "subsasgn");
+
+            if (error_state)
+              return retval;
+
             std::list<octave_value_list> next_idx (idx);
 
             next_idx.erase (next_idx.begin ());
 
             std::string next_type = type.substr (1);
 
             Cell tmpc (1, 1);
             octave_map::iterator pkey = map.seek (key);
@@ -426,16 +452,21 @@ octave_struct::subsasgn (const std::stri
                 std::list<octave_value_list>::const_iterator p = idx.begin ();
                 octave_value_list key_idx = *++p;
                 octave_value_list idxf = idx.front ();
 
                 assert (key_idx.length () == 1);
 
                 std::string key = key_idx(0).string_value ();
 
+                maybe_warn_invalid_field_name (key, "subsasgn");
+
+                if (error_state)
+                  return retval;
+
                 if (! error_state)
                   {
                     if (t_rhs.is_cs_list ())
                       {
                         Cell tmp_cell = Cell (t_rhs.list_value ());
 
                         // Inquire the proper shape of the RHS.
 
@@ -525,16 +556,21 @@ octave_struct::subsasgn (const std::stri
         case '.':
           {
             octave_value_list key_idx = idx.front ();
 
             assert (key_idx.length () == 1);
 
             std::string key = key_idx(0).string_value ();
 
+            maybe_warn_invalid_field_name (key, "subsasgn");
+
+            if (error_state)
+              return retval;
+
             if (t_rhs.is_cs_list ())
               {
                 Cell tmp_cell = Cell (t_rhs.list_value ());
 
                 // The shape of the RHS is irrelevant, we just want
                 // the number of elements to agree and to preserve the
                 // shape of the left hand side of the assignment.
 
@@ -1094,21 +1130,20 @@ octave_value
 octave_scalar_struct::dotref (const octave_value_list& idx, bool auto_add)
 {
   octave_value retval;
 
   assert (idx.length () == 1);
 
   std::string nm = idx(0).string_value ();
 
-  if (! valid_identifier (nm))
-    {
-      error ("subsref: invalid structure field name '%s'", nm.c_str ());
-      return retval;
-    }
+  maybe_warn_invalid_field_name (nm, "subsref");
+
+  if (error_state)
+    return retval;
 
   retval = map.getfield (nm);
 
   if (! auto_add && retval.is_undefined ())
     error ("structure has no member '%s'", nm.c_str ());
 
   return retval;
 }
@@ -1221,21 +1256,20 @@ octave_scalar_struct::subsasgn (const st
       octave_value t_rhs = rhs;
 
       octave_value_list key_idx = idx.front ();
 
       assert (key_idx.length () == 1);
 
       std::string key = key_idx(0).string_value ();
 
-      if (! valid_identifier (key))
-        {
-          error ("subsasgn: invalid structure field name '%s'", key.c_str ());
-          return retval;
-        }
+      maybe_warn_invalid_field_name (key, "subsasgn");
+
+      if (error_state)
+        return retval;
 
       if (n > 1)
         {
           std::list<octave_value_list> next_idx (idx);
 
           next_idx.erase (next_idx.begin ());
 
           std::string next_type = type.substr (1);
@@ -1814,21 +1848,20 @@ If the argument is an object, return the
     {
       // Get key.
 
       std::string key (args(i).string_value ());
 
       if (error_state)
         return retval;
 
-      if (! valid_identifier (key))
-        {
-          error ("struct: invalid structure field name '%s'", key.c_str ());
-          return retval;
-        }
+      maybe_warn_invalid_field_name (key, "struct");
+
+      if (error_state)
+        return retval;
 
       // Value may be v, { v }, or { v1, v2, ... }
       // In the first two cases, we need to create a cell array of
       // the appropriate dimensions filled with v.  In the last case,
       // the cell array has already been determined to be of the
       // correct dimensions.
 
       if (args(i+1).is_cell ())
diff --git a/libinterp/parse-tree/pt-idx.cc b/libinterp/parse-tree/pt-idx.cc
--- a/libinterp/parse-tree/pt-idx.cc
+++ b/libinterp/parse-tree/pt-idx.cc
@@ -211,22 +211,17 @@ tree_index_expression::get_struct_index
     {
       tree_expression *df = *p_dyn_field;
 
       if (df)
         {
           octave_value t = df->rvalue1 ();
 
           if (! error_state)
-            {
-              fn = t.string_value ();
-
-              if (! valid_identifier (fn))
-                ::error ("invalid structure field name '%s'", fn.c_str ());
-            }
+            fn = t.string_value ();
         }
       else
         panic_impossible ();
     }
 
   return fn;
 }
 
