# HG changeset patch
# User jwe
# Date 1069709077 0
#      Mon Nov 24 21:24:37 2003 +0000
# Node ID c8829691db47b19871a7ff340f9da07f1cdac1ef
# Parent  a9b22513b7a60440398714fbe6914526295fd482
[project @ 2003-11-24 21:24:37 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,12 @@
+2003-11-24  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* dim-vector.h (dim_vector::all_ones): New function.
+
 2003-11-23  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* idx-vector.h (idx_vector::orig_empty): Check orig_dims for
 	zeros, not orig_rows or orig_columns.
 	(idx_vector::idx_vector_rep::orig_rows): Define using orig_dims.
 	(idx_vector::idx_vector_rep::orig_columns): Likewise.
 
 	* idx-vector.cc (idx_vector::idx_vector_rep::orig_nr,
diff --git a/liboctave/dim-vector.h b/liboctave/dim-vector.h
--- a/liboctave/dim-vector.h
+++ b/liboctave/dim-vector.h
@@ -261,16 +261,22 @@ public:
 
     for (int i = 0; i < length (); i++)
       if (elem (i) == 1)
 	retval++;
 
     return retval;
   }
 
+  bool
+  all_ones (void) const
+  {
+    return (num_ones () == length ());
+  }
+
   // This is the number of elements that a matrix with this dimension
   // vector would have, NOT the number of dimensions (elements in the
   // dimension vector).
 
   int numel (void) const
   {
     int n_dims = length ();
 
diff --git a/liboctave/so-array.h b/liboctave/so-array.h
--- a/liboctave/so-array.h
+++ b/liboctave/so-array.h
@@ -49,20 +49,20 @@ public:
   streamoff_array (const ArrayN<std::streamoff>& sa)
     : ArrayN<std::streamoff> (sa) { }
 
   streamoff_array (const streamoff_array& sa)
     : ArrayN<std::streamoff> (sa) { }
 
   ~streamoff_array (void) { }
 
-  streamoff_array& operator = (const streamoff_array& a)
+  streamoff_array& operator = (const streamoff_array& sa)
     {
-      if (this != &a)
-	ArrayN<std::streamoff>::operator = (a);
+      if (this != &sa)
+	ArrayN<std::streamoff>::operator = (sa);
 
       return *this;
     }
 
   streamoff_array squeeze (void) const
     { return ArrayN<std::streamoff>::squeeze (); }
 
   boolNDArray all (int dim = -1) const;
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,17 @@
 2003-11-24  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* pr-output.h (octave_fcn_handle::print_as_scalar): Delete.
+
+	* pr-output.cc (octave_print_internal): New version for
+	ArrayN<std::string> objects.
+	* pr-output.h: Provide decl.
+	* ov-fcn-handle.cc (octave_fcn_handle::print_raw): Use it.
+
 	* OPERATORS/op-fcn-handle.cc: New file.
 	* Makefile.in (OP_XSRC): Add it to the list.
 
 	* ov-fcn-handle.h, ov-fcn-handle.cc (octave_fcn_handle):
 	Now an array of function handle objects.
 
 	* ov.h, ov.cc (octave_value::octave_value (const fcn_handle_array&),
 	(octave_value::octave_value (octave_function *f, const std::string&)):
diff --git a/src/ov-fcn-handle.cc b/src/ov-fcn-handle.cc
--- a/src/ov-fcn-handle.cc
+++ b/src/ov-fcn-handle.cc
@@ -147,24 +147,18 @@ octave_fcn_handle::print (std::ostream& 
 {
   print_raw (os, pr_as_read_syntax);
   newline (os);
 }
 
 void
 octave_fcn_handle::print_raw (std::ostream& os, bool pr_as_read_syntax) const
 {
-  dim_vector dv = matrix.dims ();
-  os << "<" << dv.str () << " function handle object>";
-
-#if 0
-  indent (os);
   octave_print_internal (os, name_array (), pr_as_read_syntax,
-			 current_print_indent_level (), true);
-#endif
+			 current_print_indent_level ());
 }
 
 octave_value
 make_fcn_handle (const std::string& nm)
 {
   octave_value retval;
 
   octave_function *f = lookup_function (nm);
diff --git a/src/ov-fcn-handle.h b/src/ov-fcn-handle.h
--- a/src/ov-fcn-handle.h
+++ b/src/ov-fcn-handle.h
@@ -157,18 +157,16 @@ public:
   std::string name (void) const;
 
   octave_fcn_handle *fcn_handle_value (bool = false) { return this; }
 
   fcn_handle_array fcn_handle_array_value (void) const { return matrix; }
 
   ArrayN<std::string> name_array (void) const { return matrix.names (); }
 
-  bool print_as_scalar (void) const { return true; }
-
   void print (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
 private:
 
   DECLARE_OCTAVE_ALLOCATOR
 
diff --git a/src/pr-output.cc b/src/pr-output.cc
--- a/src/pr-output.cc
+++ b/src/pr-output.cc
@@ -28,16 +28,17 @@ Software Foundation, 59 Temple Place - S
 #include <cmath>
 #include <cstdio>
 #include <cstring>
 
 #include <iomanip>
 #include <iostream>
 #include <string>
 
+#include "Array-util.h"
 #include "CMatrix.h"
 #include "Range.h"
 #include "cmd-edit.h"
 #include "dMatrix.h"
 #include "lo-mappers.h"
 #include "lo-sstream.h"
 #include "mach-info.h"
 #include "oct-cmplx.h"
@@ -1522,16 +1523,18 @@ octave_print_internal (std::ostream& os,
           for (int i = 2; i < ndims; i++) \
             m *= dims(i); \
  \
           int nr = dims(0); \
           int nc = dims(1); \
  \
           for (int i = 0; i < m; i++) \
             { \
+	      OCTAVE_QUIT; \
+ \
               std::string nm = "ans"; \
  \
               if (m > 1) \
                 { \
                   nm += "(:,:,"; \
  \
                   OSSTREAM buf; \
  \
@@ -1973,16 +1976,107 @@ octave_print_internal (std::ostream& os,
       break;
 
     default:
       PRINT_ND_ARRAY (os, nda, charNDArray, char, charMatrix);
       break;
     }
 }
 
+void
+octave_print_internal (std::ostream& os, const ArrayN<std::string>& nda,
+		       bool pr_as_read_syntax, int extra_indent)
+{
+  // XXX FIXME XXX -- this mostly duplicates the code in the
+  // PRINT_ND_ARRAY macro.
+
+  if (nda.is_empty ())
+    print_empty_nd_array (os, nda.dims (), pr_as_read_syntax);
+  else if (nda.length () == 1)
+    {
+      os << nda(0);
+    }
+  else
+    {
+      int ndims = nda.ndims ();
+
+      dim_vector dims = nda.dims ();
+
+      Array<int> ra_idx (ndims, 0);
+
+      int m = 1;
+
+      for (int i = 2; i < ndims; i++)
+	m *= dims(i);
+
+      int nr = dims(0);
+      int nc = dims(1);
+
+      for (int i = 0; i < m; i++)
+	{
+	  std::string nm = "ans";
+
+	  if (m > 1)
+	    {
+	      nm += "(:,:,";
+
+	      OSSTREAM buf;
+
+	      for (int k = 2; k < ndims; k++)
+		{
+		  buf << ra_idx(k) + 1;
+
+		  if (k < ndims - 1)
+		    buf << ",";
+		  else
+		    buf << ")";
+		}
+
+	      buf << OSSTREAM_ENDS;
+
+	      nm += OSSTREAM_STR (buf);
+
+	      OSSTREAM_FREEZE (buf);
+	    }
+
+	  Array<idx_vector> idx (ndims);
+
+	  idx(0) = idx_vector (':');
+	  idx(1) = idx_vector (':');
+
+	  for (int k = 2; k < ndims; k++)
+	    idx(k) = idx_vector (ra_idx(k) + 1);
+
+	  Array2<std::string> page (nda.index (idx), nr, nc);
+
+	  // XXX FIXME XXX -- need to do some more work to put these
+	  // in neatly aligned columns...
+
+	  int n_rows = page.rows ();
+	  int n_cols = page.cols ();
+
+	  os << nm << " =\n\n";
+
+	  for (int ii = 0; ii < n_rows; ii++)
+	    {
+	      for (int jj = 0; jj < n_cols; jj++)
+		os << "  " << page(ii,jj);
+
+	      os << "\n";
+	    }
+
+	  if (i < m - 1)
+	    os << "\n";
+
+	  if (i < m)
+	    increment_index (ra_idx, dims, 2);
+	}
+    }
+}
+
 extern void
 octave_print_internal (std::ostream&, const Cell&, bool, int, bool)
 {
   panic_impossible ();
 }
 
 DEFUN (disp, args, nargout,
   "-*- texinfo -*-\n\
diff --git a/src/pr-output.h b/src/pr-output.h
--- a/src/pr-output.h
+++ b/src/pr-output.h
@@ -22,16 +22,17 @@ Software Foundation, 59 Temple Place - S
 
 #if !defined (octave_pr_output_h)
 #define octave_pr_output_h 1
 
 #include <iostream>
 
 #include "oct-cmplx.h"
 
+template <typename T> class ArrayN;
 class ComplexMatrix;
 class ComplexNDArray;
 class Matrix;
 class NDArray;
 class Range;
 class boolMatrix;
 class boolNDArray;
 class charMatrix;
@@ -83,22 +84,27 @@ octave_print_internal (std::ostream& os,
 
 extern void
 octave_print_internal (std::ostream& os, const charMatrix& chm,
 		       bool pr_as_read_syntax = false,
 		       int extra_indent = 0,
 		       bool pr_as_string = false);
 
 extern void
-octave_print_internal (std::ostream& os, const charNDArray& chm,
+octave_print_internal (std::ostream& os, const charNDArray& nda,
 		       bool pr_as_read_syntax = false,
 		       int extra_indent = 0,
 		       bool pr_as_string = false);
 
 extern void
+octave_print_internal (std::ostream& os, const ArrayN<std::string>& sa,
+		       bool pr_as_read_syntax = false,
+		       int extra_indent = 0);
+
+extern void
 octave_print_internal (std::ostream& os, const Cell& cell,
 		       bool pr_as_read_syntax = false,
 		       int extra_indent = 0,
 		       bool pr_as_string = false);
 
 #endif
 
 /*
