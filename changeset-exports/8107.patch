# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1221676669 14400
#      Wed Sep 17 14:37:49 2008 -0400
# Node ID 8655dc0906e68e4c8fa4aa3ee36260c99368ace3
# Parent  8a42498edb307217883272d040be42554766c840
Special case single type conacation in Fcat. Rework cell2mat to take advantage

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2008-09-17  David Bateman  <dbateman@free.fr>
+
+	* general/cell2mat.m: Backout previous change. Special case 2D
+	case for speed.
+
 2008-09-11  David Bateman  <dbateman@free.fr>
 
 	* general/cell2mat.m: Improve the speed.
 
 2008-09-09  John W. Eaton  <jwe@octave.org>
 
 	* time/datestr.m: Convert format and use strftime to do most of
 	the actual conversion.
diff --git a/scripts/general/cell2mat.m b/scripts/general/cell2mat.m
--- a/scripts/general/cell2mat.m
+++ b/scripts/general/cell2mat.m
@@ -45,54 +45,44 @@ function m = cell2mat (c)
       m = elt;
     elseif (iscell (elt))
       m = cell2mat (elt);
     else
       error ("cell2mat: all elements of cell array must be numeric, logical or char");
     endif
   elseif (ndims (c) == 2)
     nr = rows (c);
-    c1 = cell (nr, 1);
-    for i = 1 : nr
-      c1{i} = [c{i : nr : end}];
-    endfor
-    ## This is faster than "c = cat(1, c{:})"
-    m = [cellfun(@(x) x.', c1, "UniformOutput", false){:}].';
+    nc = columns (c);
+    if (nc > nr)
+      c1 = cell (nr, 1);
+      for i = 1 : nr
+	c1{i} = [c{i : nr : end}];
+      endfor
+      m = cat (1, c1 {:});
+    else
+      c1 = cell (nc, 1);
+      for i = 1 : nc
+	c1{i} = cat (1, c{(i - 1) * nr  + [1 : nr]});
+      endfor
+      m = [c1{:}];
+    endif
   else
-   nd = ndims (c);
-   for k = nd : -1 : 2
+    ## n dimensions case
+    for k = ndims (c):-1:2,
       sz = size (c);
-      if (k > ndims (c) || sz(end) == 1)
-	continue;
-      endif
       sz(end) = 1;
       c1 = cell (sz);
-      sz = prod (sz);
-      if (k == 2)
-        for i = 1 : sz
-	  c1{i} = [c{i : sz : end}];
-        endfor
-      else
-        ## This is faster than
-        ##   for i = 1:sz, c1{i} = cat (k, c{i:(prod (sz)):end}); endfor
-	idx = [1, k, (3 : (k - 1)), 2, ((k + 1): nd)];
-        c = cellfun(@(x) permute (x, idx), c, "UniformOutput", false);
-        for i = 1: sz
-	  c1{i} = ipermute ([c{i : sz : end}], idx);
-        endfor
-      endif
+      for i = 1:(prod (sz))
+        c1{i} = cat (k, c{i:(prod (sz)):end});
+      endfor
       c = c1;
     endfor
-    if (numel (c) > 1)
-      idx = [2, 1, 3 : nd];
-      m = ipermute([cellfun(@(x) permute (x, idx), c, "UniformOutput", false){:}], idx);
-    else
-      m = c{1};
-    endif
+    m = cat (1, c1{:});
   endif
+
 endfunction
 
 ## Tests
 %!shared C, D, E, F
 %! C = {[1], [2 3 4]; [5; 9], [6 7 8; 10 11 12]};
 %! D = C; D(:,:,2) = C;
 %! E = [1 2 3 4; 5 6 7 8; 9 10 11 12];
 %! F = E; F(:,:,2) = E;
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,12 +1,23 @@
 2008-09-17  David Bateman  <dbateman@free.fr>
 
 	* DLD-FUNCTIONS/sparse.cc (Fsparse): Clarify the help string.
 
+2008-09-17  David Bateman  <dbateman@free.fr>
+
+	* data.cc (SINGLE_TYPE_CONCAT, DO_SINGLE_TYPE_CONCAT): New macros
+	(do_cat): Special case single type concatenations for speed.
+	* pt.mat.cc (std::string get_concat_class (const std::string&,
+	const std::string&), void maybe_warn_string_concat (bool, bool)):
+	Remove static declaration.
+	* pt-mat.h (std::string get_concat_class (const std::string&,
+	const std::string&), void maybe_warn_string_concat (bool, bool)):
+	Define extern here.
+	
 2008-09-10  John W. Eaton  <jwe@octave.org>
 
 	* octave.cc (octave_main): Make all command-line arguments
 	available to startup scripts and PKG_ADD files.
 
 2008-09-09  David Bateman  <dbateman@free.fr>
 
 	* DLD-FUNCTIONS/regexp.cc (octregexp_list): Distinguish between
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -1713,16 +1713,61 @@ return the product of the elements.\n\
 %!assert (prod (zeros (2, 0, 'single'), 1), zeros (1, 0, 'single'));
 %!assert (prod (zeros (2, 0, 'single'), 2), single([1; 1]));
 %!assert (prod (zeros (0, 2, 'single')), single([1, 1]));
 %!assert (prod (zeros (0, 2, 'single'), 1), single([1, 1]));
 %!assert (prod (zeros (0, 2, 'single'), 2), zeros(0, 1, 'single'));
 
  */
 
+#define SINGLE_TYPE_CONCAT(TYPE, EXTRACTOR) \
+  do \
+    { \
+      int dv_len = dv.length (); \
+      Array<octave_idx_type> ra_idx (dv_len > 1 ? dv_len : 2, 0); \
+      \
+      for (int j = 1; j < n_args; j++) \
+	{ \
+	  OCTAVE_QUIT; \
+	  \
+	  TYPE ra = args(j).EXTRACTOR ();	\
+	  \
+	  if (! error_state) \
+	    { \
+	      result.insert (ra, ra_idx); \
+	      \
+	      if (error_state) \
+	        return retval; \
+	      \
+	      dim_vector dv_tmp = args (j).dims (); \
+	      \
+	      if (dim >= dv_len) \
+	        { \
+		  if (j > 1) \
+		    error ("%s: indexing error", fname.c_str ()); \
+		  break; \
+		} \
+	      else \
+		ra_idx (dim) += (dim < dv_tmp.length () ? dv_tmp (dim) : 1); \
+	    } \
+	} \
+    } \
+ while (0)
+
+#define DO_SINGLE_TYPE_CONCAT(TYPE, EXTRACTOR) \
+  do \
+    { \
+      TYPE result (dv); \
+      \
+      SINGLE_TYPE_CONCAT(TYPE, EXTRACTOR); \
+      \
+      retval = result; \
+    } \
+ while (0)
+
 static octave_value
 do_cat (const octave_value_list& args, std::string fname)
 {
   octave_value retval;
 
   int n_args = args.length (); 
 
   if (n_args == 1)
@@ -1738,17 +1783,23 @@ do_cat (const octave_value_list& args, s
 	  error ("cat: expecting first argument to be a integer");
 	  return retval;
 	}
   
       if (dim >= 0)
 	{
  	  
  	  dim_vector  dv = args(1).dims ();
+	  std::string result_type = args(1).class_name ();
 	  
+	  bool all_sq_strings_p = args(1).is_sq_string ();
+	  bool all_dq_strings_p = args(1).is_dq_string ();
+	  bool all_real_p = args(1).is_real_type ();
+	  bool any_sparse_p = args(1).is_sparse_type();
+
  	  for (int i = 2; i < args.length (); i++)
   	    {
  	      // add_dims constructs a dimension vector which holds the
 	      // dimensions of the final array after concatenation.
 
 	      if (! dv.concat (args(i).dims (), dim))
 		{
 		  // Dimensions do not match. 
diff --git a/src/pt-mat.cc b/src/pt-mat.cc
--- a/src/pt-mat.cc
+++ b/src/pt-mat.cc
@@ -179,17 +179,17 @@ public:
   iterator end (void) { return rep->end (); }
   const_iterator end (void) const { return rep->end (); }
 
 private:
 
   tm_row_const_rep *rep;
 };
 
-static std::string
+std::string
 get_concat_class (const std::string& c1, const std::string& c2)
 {
   std::string retval = octave_base_value::static_class_name ();
 
   if (c1 == c2)
     retval = c1;
   else
     {
@@ -694,17 +694,17 @@ tree_matrix::rvalue (int nargout)
   if (nargout > 1)
     error ("invalid number of output arguments for matrix list");
   else
     retval = rvalue ();
 
   return retval;
 }
 
-static void
+void
 maybe_warn_string_concat (bool all_dq_strings_p, bool all_sq_strings_p)
 {
   if (! (all_dq_strings_p || all_sq_strings_p))
     warning_with_id ("Octave:string-concat",
 		     "concatenation of different character string types may have unintended consequences");
 }
 
 #define SINGLE_TYPE_CONCAT(TYPE, EXTRACTOR) \
diff --git a/src/pt-mat.h b/src/pt-mat.h
--- a/src/pt-mat.h
+++ b/src/pt-mat.h
@@ -76,15 +76,21 @@ private:
   tree_matrix (const tree_matrix&);
 
   tree_matrix& operator = (const tree_matrix&);
 };
 
 // The character to fill with when creating string arrays.
 extern char Vstring_fill_char;
 
+extern std::string 
+get_concat_class (const std::string& c1, const std::string& c2);
+
+extern void
+maybe_warn_string_concat (bool all_dq_strings_p, bool all_sq_strings_p);
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
