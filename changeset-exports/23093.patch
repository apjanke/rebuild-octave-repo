# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1485451155 18000
#      Thu Jan 26 12:19:15 2017 -0500
# Node ID 8aba6d17088707cd9a2a32df3c501dc2ed5dd94b
# Parent  0fed4c678795a12f66b264285f7f4598951b082a
fix prototype of octave_base_int<T>::write (bug #50157)

* ov-intx.h (octave_base_int_scalar::write): Fix declaration.
The skip parameter is int, not octave_idx_type.

* test/io.tst: New test.

diff --git a/libinterp/octave-value/ov-intx.h b/libinterp/octave-value/ov-intx.h
--- a/libinterp/octave-value/ov-intx.h
+++ b/libinterp/octave-value/ov-intx.h
@@ -607,17 +607,17 @@ public:
   void decrement (void)
   {
     scalar -= OCTAVE_INT_T (1);
   }
 
   idx_vector index_vector (bool /* require_integers */ = false) const { return idx_vector (scalar); }
 
   int write (octave::stream& os, int block_size,
-             oct_data_conv::data_type output_type, octave_idx_type skip,
+             oct_data_conv::data_type output_type, int skip,
              octave::mach_info::float_format flt_fmt) const
   {
     return os.write (OCTAVE_VALUE_INT_NDARRAY_EXTRACTOR_FUNCTION (),
                      block_size, output_type, skip, flt_fmt);
   }
 
   // Unsafe.  This function exists to support the MEX interface.
   // You should not use it anywhere else.
diff --git a/test/io.tst b/test/io.tst
--- a/test/io.tst
+++ b/test/io.tst
@@ -491,16 +491,40 @@
 %!     endif
 %!   endif
 %! endif
 %!
 %! unlink (nm);
 %! assert (__prog_output_assert__ ("ok"));
 
 %!test
+%! classes = {"int8", "int16", "int32", "int64", ...
+%!            "uint8", "uint16", "uint32", "uint64", ...
+%!            "single", "double"};
+%! nm = tempname ();
+%! id = fopen (nm, "wb+");
+%! n = numel (classes);
+%! for i = 1:n
+%!   cls = classes{i};
+%!   s_in = ones (1, 1, cls);
+%!   m_in = ones (2, 2, cls);
+%!   m_shape = size (m);
+%!   fwrite (id, s, numel (s), cls);
+%!   fwrite (id, m, numel (m), cls);
+%!   frewind (id);
+%!   s_out = fread (id, numel (s_in), sprintf ("%s=>%s", cls, cls));
+%!   m_out = fread (id, numel (m_in), sprintf ("%s=>%s", cls, cls));
+%!   m_out = reshape (m_out, m_shape);
+%!   fclose (id);
+%!   unlink (nm);
+%!   assert (s_in, s_out);
+%!   assert (m_in, m_out);
+%! endfor
+
+%!test
 %! x = char (128:255)';
 %! nm = tempname ();
 %! id = fopen (nm, "wb");
 %! fwrite (id, x);
 %! fclose (id);
 %! id = fopen (nm, "rb");
 %! y = fread (id, Inf, "uchar=>char");
 %! fclose (id);
