# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1500919717 14400
#      Mon Jul 24 14:08:37 2017 -0400
# Node ID 2641a0196176b0c4796312725108a32e938a75f5
# Parent  0fb64e83f8b30b09bb2583862adae14a365b8a54
don't use bitwise xor operator for logical xor operation

* Figure.cc (Figure::showFigureToolBar): Use proper logical tests for
logical xor operation instead of bitwise xor operator.
* ls-mat5.cc (read_mat5_binary_element): Likewise.

diff --git a/libgui/graphics/Figure.cc b/libgui/graphics/Figure.cc
--- a/libgui/graphics/Figure.cc
+++ b/libgui/graphics/Figure.cc
@@ -560,17 +560,18 @@ namespace QtHandles
         a->setVisible (visible);
 
     int h2 = m_menuBar->sizeHint ().height ();
 
     // Keep the menubar visible if it contains custom menus
     if (! visible)
       visible = hasUiMenuChildren (properties<figure> ());
 
-    if (m_menuBar->isVisible () ^ visible)
+    if ((m_menuBar->isVisible () && ! visible)
+        || (! m_menuBar->isVisible () && visible))
       {
         int dy = qMax (h1, h2);
         QRect r = qWidget<QWidget> ()->geometry ();
 
         if (! visible)
           r.adjust (0, dy, 0, 0);
         else
           r.adjust (0, -dy, 0, 0);
diff --git a/libinterp/corefcn/ls-mat5.cc b/libinterp/corefcn/ls-mat5.cc
--- a/libinterp/corefcn/ls-mat5.cc
+++ b/libinterp/corefcn/ls-mat5.cc
@@ -487,21 +487,23 @@ read_mat5_binary_element (std::istream& 
   bool imag;
   bool isclass = false;
   bool logicalvar;
   dim_vector dims;
   enum arrayclasstype arrayclass;
   octave_idx_type nzmax;
   std::string classname;
 
+  bool flt_fmt_is_big_endian
+    = (octave::mach_info::native_float_format ()
+       == octave::mach_info::flt_fmt_ieee_big_endian);
+
   // MAT files always use IEEE floating point
   octave::mach_info::float_format flt_fmt = octave::mach_info::flt_fmt_unknown;
-  if ((octave::mach_info::native_float_format ()
-       == octave::mach_info::flt_fmt_ieee_big_endian)
-      ^ swap)
+  if ((flt_fmt_is_big_endian && ! swap) || (! flt_fmt_is_big_endian && swap))
     flt_fmt = octave::mach_info::flt_fmt_ieee_big_endian;
   else
     flt_fmt = octave::mach_info::flt_fmt_ieee_little_endian;
 
   // element type, length and small data element flag
   int32_t type = 0;
   int32_t element_length;
   bool is_small_data_element;
