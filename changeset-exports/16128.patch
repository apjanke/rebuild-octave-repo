# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1361911196 18000
#      Tue Feb 26 15:39:56 2013 -0500
# Node ID 210039e91ad6d0a4b8c6004348307b906d0cca3c
# Parent  f7eb13f1432008812759a341b1717dbbc63cd550
localize use of yytext with lexical_feedback member function

* lex.h, lex.ll (lexical_feedback::flex_yytext): New function.
* lex.ll (lexical_feedback::xunput, lexical_feedback::process_comment,
lexical_feedback::handle_number, lexical_feedback::handle_identifier,
lexical_feedback::handle_meta_identifier,
lexical_feedback::handle_superclass_identifier):
Use it instead of accessing yytext directly.

diff --git a/libinterp/parse-tree/lex.h b/libinterp/parse-tree/lex.h
--- a/libinterp/parse-tree/lex.h
+++ b/libinterp/parse-tree/lex.h
@@ -205,16 +205,18 @@ public:
   void reset_parser (void);
 
   void prep_for_script_file (void);
 
   void prep_for_function_file (void);
 
   int octave_read (char *buf, unsigned int max_size);
 
+  char *flex_yytext (void);
+
   void do_comma_insert_check (void);
 
   int text_yyinput (void);
 
   void xunput (char c, char *buf);
 
   void xunput (char c);
 
diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -1480,16 +1480,22 @@ lexical_feedback::octave_read (char *buf
 
       if (! eof)
         YY_FATAL_ERROR ("octave_read () in flex scanner failed");
     }
 
   return status;
 }
 
+char *
+lexical_feedback::flex_yytext (void)
+{
+  return yytext;
+}
+
 // GAG.
 //
 // If we're reading a matrix and the next character is '[', make sure
 // that we insert a comma ahead of it.
 
 void
 lexical_feedback::do_comma_insert_check (void)
 {
@@ -1558,17 +1564,18 @@ lexical_feedback::xunput (char c, char *
     input_line_number--;
 
   yyunput (c, buf);
 }
 
 void
 lexical_feedback::xunput (char c)
 {
-  xunput (c, yytext);
+  char *yytxt = flex_yytext ();
+  xunput (c, yytxt);
 }
 
 // If we read some newlines, we need figure out what column we're
 // really looking at.
 
 void
 lexical_feedback::fixup_column_count (char *s)
 {
@@ -2079,17 +2086,18 @@ lexical_feedback::process_comment (bool 
 {
   eof = false;
 
   std::string help_txt;
 
   if (! help_buf.empty ())
     help_txt = help_buf.top ();
 
-  flex_stream_reader flex_reader (this, yytext);
+  char *yytxt = flex_yytext ();
+  flex_stream_reader flex_reader (this, yytxt);
 
   // process_comment is only supposed to be called when we are not
   // initially looking at a block comment.
 
   std::string txt = start_in_block
     ? grab_block_comment (flex_reader, eof)
     : grab_comment_block (flex_reader, false, eof);
 
@@ -2465,27 +2473,29 @@ looks_like_hex (const char *s, int len)
 }
 
 void
 lexical_feedback::handle_number (void)
 {
   double value = 0.0;
   int nread = 0;
 
-  if (looks_like_hex (yytext, strlen (yytext)))
+  char *yytxt = flex_yytext ();
+
+  if (looks_like_hex (yytxt, strlen (yytxt)))
     {
       unsigned long ival;
 
-      nread = sscanf (yytext, "%lx", &ival);
+      nread = sscanf (yytxt, "%lx", &ival);
 
       value = static_cast<double> (ival);
     }
   else
     {
-      char *tmp = strsave (yytext);
+      char *tmp = strsave (yytxt);
 
       char *idx = strpbrk (tmp, "Dd");
 
       if (idx)
         *idx = 'e';
 
       nread = sscanf (tmp, "%lf", &value);
 
@@ -2496,17 +2506,17 @@ lexical_feedback::handle_number (void)
 
   assert (nread == 1);
 
   quote_is_transpose = true;
   convert_spaces_to_comma = true;
   looking_for_object_index = false;
   at_beginning_of_statement = false;
 
-  curr_lexer->push_token (new token (value, yytext, input_line_number,
+  curr_lexer->push_token (new token (value, yytxt, input_line_number,
                                      current_input_column));
 
   current_input_column += yyleng;
 
   do_comma_insert_check ();
 }
 
 // We have seen a backslash and need to find out if it should be
@@ -3203,17 +3213,18 @@ lexical_feedback::looks_like_command_arg
 }
 
 int
 lexical_feedback::handle_superclass_identifier (void)
 {
   eat_continuation ();
 
   std::string pkg;
-  std::string meth = strip_trailing_whitespace (yytext);
+  char *yytxt = flex_yytext ();
+  std::string meth = strip_trailing_whitespace (yytxt);
   size_t pos = meth.find ("@");
   std::string cls = meth.substr (pos).substr (1);
   meth = meth.substr (0, pos - 1);
 
   pos = cls.find (".");
   if (pos != std::string::npos)
     {
       pkg = cls.substr (pos).substr (1);
@@ -3241,17 +3252,18 @@ lexical_feedback::handle_superclass_iden
 }
 
 int
 lexical_feedback::handle_meta_identifier (void)
 {
   eat_continuation ();
 
   std::string pkg;
-  std::string cls = strip_trailing_whitespace (yytext).substr (1);
+  char *yytxt = flex_yytext ();
+  std::string cls = strip_trailing_whitespace (yytxt).substr (1);
   size_t pos = cls.find (".");
 
   if (pos != std::string::npos)
     {
       pkg = cls.substr (pos).substr (1);
       cls = cls.substr (0, pos - 1);
     }
 
@@ -3277,19 +3289,21 @@ lexical_feedback::handle_meta_identifier
 // an identifier.  Handles keywords.  Return -1 if the identifier
 // should be ignored.
 
 int
 lexical_feedback::handle_identifier (void)
 {
   bool at_bos = at_beginning_of_statement;
 
-  std::string tok = strip_trailing_whitespace (yytext);
-
-  int c = yytext[yyleng-1];
+  char *yytxt = flex_yytext ();
+
+  std::string tok = strip_trailing_whitespace (yytxt);
+
+  int c = yytxt[yyleng-1];
 
   bool cont_is_spc = (eat_continuation () != lexical_feedback::NO_WHITESPACE);
 
   int spc_gobbled = (cont_is_spc || c == ' ' || c == '\t');
 
   // If we are expecting a structure element, avoid recognizing
   // keywords and other special names and return STRUCT_ELT, which is
   // a string that is also a valid identifier.  But first, we have to
