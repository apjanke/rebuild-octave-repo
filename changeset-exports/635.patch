# HG changeset patch
# User jwe
# Date 777664640 0
#      Tue Aug 23 17:57:20 1994 +0000
# Node ID 5338832d2cf6d2ff64b2b007e3e84dfa9f43773e
# Parent  e045273669176097f6be6d3648b5d09d6a4a449d
[project @ 1994-08-23 17:57:20 by jwe]

diff --git a/src/sighandlers.cc b/src/sighandlers.cc
--- a/src/sighandlers.cc
+++ b/src/sighandlers.cc
@@ -20,16 +20,17 @@ along with Octave; see the file COPYING.
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include "config.h"
 #endif
 
+#include <new.h>
 #include <signal.h>
 
 #include "sighandlers.h"
 #include "octave.h"
 #include "error.h"
 #include "utils.h"
 
 // Nonzero means we have already printed a message for this series of
@@ -41,19 +42,26 @@ int can_interrupt = 0;
 
 static void
 my_friendly_exit (const char *sig_name, int sig_number)
 {
   error ("caught %s -- stopping myself...", sig_name);
   clean_up_and_exit (sig_number);
 }
 
-/*
- * Some of these may eventually perform different actions...
- */
+// I know, not really a signal handler.
+
+static void
+octave_new_handler (void)
+{
+  error ("new: virtual memory exhausted -- stopping myself");
+  clean_up_and_exit (1);
+}
+
+// Some of these may eventually perform different actions...
 
 static RETSIGTYPE
 sigabrt_handler (int i)
 {
   my_friendly_exit ("SIGABRT", i);
 }
 
 static RETSIGTYPE
@@ -87,19 +95,18 @@ sighup_handler (int i)
 }
 
 static RETSIGTYPE
 sigill_handler (int i)
 {
   my_friendly_exit ("SIGILL", i);
 }
 
-/*
- * Handle SIGINT by restarting the parser (see octave.cc).
- */
+// Handle SIGINT by restarting the parser (see octave.cc).
+
 static RETSIGTYPE
 sigint_handler (int i)
 {
   if (can_interrupt)
     {
       jump_to_top_level ();
       panic_impossible ();
     }
@@ -207,22 +214,23 @@ sigxcpu_handler (int i)
 }
 
 static RETSIGTYPE
 sigxfsz_handler (int i)
 {
   my_friendly_exit ("SIGXFSZ", i);
 }
 
-/*
- * Install all the handlers for the signals we might care about.
- */
+// Install all the handlers for the signals we might care about.
+
 void
 install_signal_handlers (void)
 {
+  set_new_handler (octave_new_handler);
+
 #ifdef SIGABRT
   signal (SIGABRT, sigabrt_handler);
 #endif
 
 #ifdef SIGALRM
   signal (SIGALRM, sigalrm_handler);
 #endif
 
