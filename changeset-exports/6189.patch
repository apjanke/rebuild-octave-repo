# HG changeset patch
# User dbateman
# Date 1164834065 0
#      Wed Nov 29 21:01:05 2006 +0000
# Node ID 0d23b0c0ce1ae7334bfb45f79c82ac1063d32f52
# Parent  160958073cdee0bd69a410298c5af0380d2d4852
[project @ 2006-11-29 21:01:05 by dbateman]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2006-11-29  David Bateman  <dbateman@free.fr>
+
+	* pkg/pkg.m: Add local_list and global_list options that allow the
+	location of package lists to be probed and set.
+
 2006-11-17  John W. Eaton  <jwe@octave.org>
 
 	* plot/__render_plot1__.m: Reverse y axis for images.
 
 	* plot/__render_plot__.m: New args, terminal and output.
 	* plot/print.m: Don't set output and term here.  Instead, call
 	__render_plot__ with terminal and output.
 
diff --git a/scripts/pkg/pkg.m b/scripts/pkg/pkg.m
--- a/scripts/pkg/pkg.m
+++ b/scripts/pkg/pkg.m
@@ -79,114 +79,155 @@
 ## sets the installation prefix to @code{~/my_octave_packages}.
 ## Packages will be installed in this directory.
 ##
 ## It is possible to get the current installation prefix by requesting an
 ## output argument.  For example,
 ## @example
 ## p = pkg prefix
 ## @end example
+## @item local_list
+## Set the file in which to look for information on the locally
+## installed packages. Locally installed packages are those that are
+## typically available only to the current user. For example
+## @example
+## pkg local_list ~/.octave_packages
+## @end example
+## It is possible to get the current value of local_list with the following
+## @example
+## pkg local_list
+## @end example
+## @item global_list
+## Set the file in which to look for, for information on the globally
+## installed packages. Globally installed packages are those that are
+## typically available to all users. For example
+## @example
+## pkg global_list /usr/share/octave/octave_packages
+## @end example
+## It is possible to get the current value of global_list with the following
+## @example
+## pkg global_list
+## @end example
 ## @end table
 ## @end deftypefn
 
 ## PKG_ADD: mark_as_command pkg
 
 function [local_packages, global_packages] = pkg(varargin)
     ## Installation prefix
     persistent prefix = -1;
+    persistent local_list = tilde_expand("~/.octave_packages");
+    persistent global_list = fullfile (OCTAVE_HOME (), "/share/octave/octave_packages");
+
     if (prefix == -1)
         if (issuperuser())
 	    prefix = fullfile (OCTAVE_HOME (), "/share/octave/packages/");
         else
             prefix = "~/octave/";
         endif
     endif
     prefix = tilde_expand(prefix);
-    
+
     ## Handle input
     if (length(varargin) == 0 || !iscellstr(varargin))
         print_usage();
     endif
     files = {};
     deps = true;
     action = "none";
     for i = 1:length(varargin)
         switch (varargin{i})
             case "-nodeps"
                 deps = false;
-            case {"list", "install", "uninstall", "load", "prefix"}
+            case {"list", "install", "uninstall", "load", "prefix", "local_list", "global_list"}
                 action = varargin{i};
             otherwise
                 files{end+1} = varargin{i};
         endswitch
     endfor
     
     ## Take action
     switch (action)
         case "list"
             if (nargout == 0)
-                installed_packages();
+                installed_packages(local_list, global_list);
             elseif (nargout == 1)
-                local_packages = installed_packages();
+                local_packages = installed_packages(local_list, global_list);
             elseif (nargout == 2)
-                [local_packages, global_packages] = installed_packages();
+                [local_packages, global_packages] = installed_packages(local_list, global_list);
             else
                 error("Too many output arguments requested.");
             endif
         case "install"
             if (length(files) == 0)
                 error("You must specify at least one filename when calling 'pkg install'");
             endif
-            install(files, deps, prefix);
+            install(files, deps, prefix, local_list, global_list);
         case "uninstall"
             if (length(files) == 0)
                 error("You must specify at least one package when calling 'pkg uninstall'");
             endif
-            uninstall(files, deps);
+            uninstall(files, deps, local_list, global_list);
         case "load"
             if (length(files) == 0)
                 error("You must specify at least one package or 'all' when calling 'pkg load'");
             endif
-            load_packages(files, deps);
+            load_packages(files, deps, local_list, global_list);
         case "prefix"
             if (length(files) == 0 && nargout == 0)
                 disp(prefix);
             elseif (length(files) == 0 && nargout == 1)
                 local_packages = prefix;
             elseif (length(files) == 1 && nargout == 0 && ischar(files{1}))
                 prefix = files{1};
                 if (!strcmp(prefix(end), "/")) prefix(end+1) = "/"; endif
             else
-                error("You must specify a prefix directory, or request an output arguement");
+                error("You must specify a prefix directory, or request an output argument");
+            endif
+        case "local_list"
+            if (length(files) == 0 && nargout == 0)
+                disp(local_list);
+            elseif (length(files) == 0 && nargout == 1)
+                local_packages = local_list;
+            elseif (length(files) == 1 && nargout == 0 && ischar(files{1}))
+                local_list = files{1};
+            else
+                error("You must specify a local_list file, or request an output argument");
+            endif
+        case "global_list"
+            if (length(files) == 0 && nargout == 0)
+                disp(global_list);
+            elseif (length(files) == 0 && nargout == 1)
+                local_packages = global_list;
+            elseif (length(files) == 1 && nargout == 0 && ischar(files{1}))
+                global_list = files{1};
+            else
+                error("You must specify a global_list file, or request an output argument");
             endif
         otherwise
             error("You must specify a valid action for 'pkg'. See 'help pkg' for details");
     endswitch
 endfunction
 
-function install(files, handle_deps, prefix)
-    ## Set parameters depending on wether or not the installation
-    ## is system-wide (global) or local.
-    local_list = tilde_expand("~/.octave_packages");
-    global_list = fullfile (OCTAVE_HOME (), "/share/octave/octave_packages");
-    
+function install(files, handle_deps, prefix, local_list, global_list)
     global_install = issuperuser();
  
     # Check that the directory in prefix exist. If it doesn't: create it!
     if (!exist(prefix, "dir"))
         warning("Creating installation directory %s", prefix);
         [status, msg] = mkdir(prefix);
         if (status != 1)
             error("Could not create installation directory: %s", msg);
         endif
     endif
 
     ## Get the list of installed packages
-    [local_packages, global_packages] = installed_packages();
-    installed_packages = {local_packages{:} global_packages{:}};        
+    [local_packages, global_packages] = installed_packages(local_list, 
+							   global_list);
+    installed_packages = {local_packages{:}, global_packages{:}};        
     
     if (global_install)
         packages = global_packages;
     else
         packages = local_packages;
     endif
    
     ## Uncompress the packages and read the DESCRIPTION files
@@ -301,17 +342,18 @@ function install(files, handle_deps, pre
             rm_rf(tmpdirs{i});
         endfor
         error(lasterr()(8:end));
     end_try_catch
 
     ## Uninstall the packages that will be replaced
     try
         for i = packages_to_uninstall
-            uninstall({installed_packages{i}.name}, false);
+            uninstall({installed_packages{i}.name}, false, local_list, 
+		      global_list);
         endfor
     catch
         ## Something went wrong, delete tmpdirs
         for i = 1:length(tmpdirs)
             rm_rf(tmpdirs{i});
         endfor
         error(lasterr()(8:end));
     end_try_catch
@@ -386,40 +428,60 @@ function install(files, handle_deps, pre
       dirs = cell(1, length(descriptions));
       for i = 1:length(descriptions)
         dirs{i} = descriptions{i}.dir;
       endfor
       addpath(dirs{:});
     endif
 endfunction
 
-function uninstall(pkgnames, handle_deps)
-    local_list = tilde_expand("~/.octave_packages");
-    global_list = fullfile (OCTAVE_HOME (), "/share/octave/octave_packages");
+function uninstall(pkgnames, handle_deps, local_list, global_list)
     ## Get the list of installed packages
-    [local_packages, global_packages] = installed_packages();
+    [local_packages, global_packages] = installed_packages(local_list, 
+							   global_list);
     if (issuperuser())
-        installed_packages = global_packages;
+        installed_packages = {local_packages{:}, global_packages{:}};
     else
         installed_packages = local_packages;
     endif
 
     num_packages = length(installed_packages);
     delete_idx = [];
     for i = 1:num_packages
         cur_name = installed_packages{i}.name;
         if (any(strcmp(cur_name, pkgnames)))
             delete_idx(end+1) = i;
         endif
     endfor
 
     ## Are all the packages that should be uninstalled already installed?
     if (length(delete_idx) != length(pkgnames))
-        # XXX: We should have a better error message
-        error("Some of the packages you want to uninstall are not installed.");
+      delete_idx
+      pkgnames
+
+      if (issuperuser())
+	## Try again for a locally installed package
+	installed_packages = local_packages
+
+	num_packages = length(installed_packages);
+	delete_idx = [];
+	for i = 1:num_packages
+          cur_name = installed_packages{i}.name;
+          if (any(strcmp(cur_name, pkgnames)))
+            delete_idx(end+1) = i;
+          endif
+	endfor
+	if (length(delete_idx) != length(pkgnames))
+	  ## XXX: We should have a better error message
+          error("Some of the packages you want to uninstall are not installed.");
+	endif
+      else
+	## XXX: We should have a better error message
+	error("Some of the packages you want to uninstall are not installed.");
+      endif
     endif
 
     ## Compute the packages that will remain installed
     idx = complement(delete_idx, 1:num_packages);
     remaining_packages = {installed_packages{idx}};
     
     ## Check dependencies
     if (handle_deps)
@@ -977,27 +1039,29 @@ function bad_deps = get_unsatisfied_deps
             endfor
             if (!ok)
                 bad_deps{end+1} = dep;
             endif
         endif
     endfor
 endfunction
 
-function [out1, out2] = installed_packages()
-    local_list = tilde_expand("~/.octave_packages");
-    global_list = fullfile (OCTAVE_HOME (), "/share/octave/octave_packages");
+function [out1, out2] = installed_packages(local_list, global_list)
     ## Get the list of installed packages
     try
         local_packages = load(local_list).local_packages;
     catch
         local_packages = {};
     end_try_catch
     try
-        global_packages = load(global_list).global_packages;
+	if (strcmp(local_list, global_list))
+	    global_packages = {};
+	else
+            global_packages = load(global_list).global_packages;
+        endif
     catch
         global_packages = {};
     end_try_catch
     installed_packages = {local_packages{:} global_packages{:}};        
     
     ## Should we return something?
     if (nargout == 2)
         out1 = local_packages;
@@ -1045,18 +1109,18 @@ function [out1, out2] = installed_packag
     for i = 1:num_packages
         cur_name    = installed_packages{idx(i)}.name;
         cur_version = installed_packages{idx(i)}.version;
         cur_dir     = installed_packages{idx(i)}.dir;
         printf(format, cur_name, cur_version, cur_dir);
     endfor
 endfunction
 
-function load_packages(files, handle_deps)
-    installed_packages = installed_packages();
+function load_packages(files, handle_deps, local_list, global_list)
+    installed_packages = installed_packages(local_list, global_list);
     num_packages = length(installed_packages);
     
     ## Read package names and installdirs into a more convenient format
     pnames = pdirs = cell(1, num_packages);
     for i = 1:num_packages
         pnames{i} = installed_packages{i}.name;
         pdirs{i} = installed_packages{i}.dir;
         pdeps{i} = installed_packages{i}.depends;
