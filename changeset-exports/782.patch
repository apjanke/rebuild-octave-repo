# HG changeset patch
# User jwe
# Date 781556494 0
#      Fri Oct 07 19:01:34 1994 +0000
# Node ID ffe18d3d64a6e06add0dd1530e8fe6ea8b6f4f93
# Parent  ce19e27b689542b15b0751b9ed111a9aafd00335
[project @ 1994-10-07 19:01:20 by jwe]

diff --git a/src/pt-const.cc b/src/pt-const.cc
--- a/src/pt-const.cc
+++ b/src/pt-const.cc
@@ -153,17 +153,17 @@ tree_constant::make_unique_map (void)
 
   make_unique ();
 
   return rep;
 }
 
 tree_constant
 tree_constant::assign_map_element (SLList<char*>& list,
-				   const tree_constant& rhs)
+				   tree_constant& rhs)
 {
   tree_constant_rep *tmp_rep = make_unique_map ();
 
   if (rhs.is_map ())
     rhs.make_unique ();
 
   Pix p = list.first ();
   while (p)
@@ -185,17 +185,17 @@ tree_constant::assign_map_element (SLLis
 
   return tree_constant ();
 }
 
 // Indexed structure assignment.
 
 tree_constant
 tree_constant::assign_map_element (SLList<char*>& list,
-				   const tree_constant& rhs,
+				   tree_constant& rhs,
 				   const Octave_object& args)
 {
   tree_constant_rep *tmp_rep = make_unique_map ();
 
   if (rhs.is_map ())
     rhs.make_unique ();
 
   Pix p = list.first ();
diff --git a/src/pt-const.h b/src/pt-const.h
--- a/src/pt-const.h
+++ b/src/pt-const.h
@@ -151,35 +151,37 @@ public:
 #endif
 
 // Simple assignment.
 
   tree_constant operator = (const tree_constant& a);
 
 // Indexed assignment.
 
-  tree_constant assign (const tree_constant& rhs, const Octave_object& args)
+  tree_constant assign (tree_constant& rhs, const Octave_object& args)
     {
       if (rep->count > 1)
 	{
 	  --rep->count;
 	  rep = new tree_constant_rep (*rep);
 	  rep->count = 1;
 	}
       rep->assign (rhs, args);
       return *this;
     }
 
 // Simple structure assignment.
 
-  tree_constant assign_map_element (SLList<char*>& list, tree_constant& rhs);
+  tree_constant assign_map_element (SLList<char*>& list,
+				    tree_constant& rhs);
 
 // Indexed structure assignment.
 
-  tree_constant assign_map_element (SLList<char*>& list, tree_constant& rhs,
+  tree_constant assign_map_element (SLList<char*>& list,
+				    tree_constant& rhs,
 				    const Octave_object& args);
 
 // Type.  It would be nice to eliminate the need for this.
 
   int is_constant (void) const { return 1; }
 
 // Size.
 
diff --git a/src/pt-exp-base.cc b/src/pt-exp-base.cc
--- a/src/pt-exp-base.cc
+++ b/src/pt-exp-base.cc
@@ -646,17 +646,17 @@ tree_multi_val_ret::eval (int print)
 {
   panic ("invalid evaluation of generic expression");
   return tree_constant ();
 }
 
 // A base class for objects that can be evaluated with argument lists.
 
 tree_constant
-tree_fvc::assign (const tree_constant& t, const Octave_object& args)
+tree_fvc::assign (tree_constant& t, const Octave_object& args)
 {
   panic_impossible ();
   return tree_constant ();
 }
 
 tree_constant
 tree_fvc::lookup_map_element (SLList<char*>& list)
 {
@@ -689,17 +689,17 @@ tree_identifier::define (tree_function *
 void
 tree_identifier::document (char *s)
 {
   if (sym && s)
     sym->document (strsave (s));
 }
 
 tree_constant
-tree_identifier::assign (const tree_constant& rhs)
+tree_identifier::assign (tree_constant& rhs)
 {
   tree_constant retval;
 
   if (rhs.is_defined ())
     {
       if (! sym->is_defined ())
 	{
 	  if (! (sym->is_formal_parameter ()
@@ -720,17 +720,17 @@ tree_identifier::assign (const tree_cons
       else
 	delete tmp;
     }
 
   return retval;
 }
 
 tree_constant
-tree_identifier::assign (const tree_constant& rhs, const Octave_object& args)
+tree_identifier::assign (tree_constant& rhs, const Octave_object& args)
 {
   tree_constant retval;
 
   if (rhs.is_defined ())
     {
       if (! sym->is_defined ())
 	{
 	  if (! (sym->is_formal_parameter ()
@@ -767,17 +767,17 @@ tree_identifier::assign (const tree_cons
 	    }
 	}
     }
 
   return retval;
 }
 
 tree_constant
-tree_identifier::assign (SLList<char*> list, const tree_constant& rhs)
+tree_identifier::assign (SLList<char*> list, tree_constant& rhs)
 {
   tree_constant retval;
 
   if (rhs.is_defined ())
     {
       if (sym->is_function ())
 	sym->clear ();
 
@@ -799,17 +799,17 @@ tree_identifier::assign (SLList<char*> l
       if (tmp)
 	retval = tmp->assign_map_element (list, rhs);
     }
 
   return retval;
 }
 
 tree_constant
-tree_identifier::assign (SLList<char*> list, const tree_constant& rhs,
+tree_identifier::assign (SLList<char*> list, tree_constant& rhs,
 			 const Octave_object& args)
 {
   tree_constant retval;
 
   if (rhs.is_defined ())
     {
       if (sym->is_function ())
 	sym->clear ();
@@ -1094,30 +1094,30 @@ tree_indirect_ref::name (void)
 
       tmp << ends;
       nm = tmp.str ();
       return nm;
     }
 }
 
 tree_constant
-tree_indirect_ref::assign (const tree_constant& t)
+tree_indirect_ref::assign (tree_constant& t)
 {
   tree_constant retval;
 
   if (refs.empty ())
     retval = id->assign (t);
   else
     retval = id->assign (refs, t);
 
   return retval;
 }
 
 tree_constant
-tree_indirect_ref::assign (const tree_constant& t, const Octave_object& args)
+tree_indirect_ref::assign (tree_constant& t, const Octave_object& args)
 {
   tree_constant retval;
 
   if (refs.empty ())
     retval = id->assign (t, args);
   else
     retval = id->assign (refs, t, args);
 
diff --git a/src/pt-exp-base.h b/src/pt-exp-base.h
--- a/src/pt-exp-base.h
+++ b/src/pt-exp-base.h
@@ -215,17 +215,17 @@ class
 tree_fvc : public tree_multi_val_ret
 {
 public:
   tree_fvc (int l = -1, int c = -1) : tree_multi_val_ret (l, c) { }
 
   virtual int is_constant (void) const
     { return 0; }
 
-  virtual tree_constant assign (const tree_constant& t,
+  virtual tree_constant assign (tree_constant& t,
 				const Octave_object& args);
 
   virtual char *name (void) const
     { panic_impossible (); return 0; }
 
   virtual void bump_value (tree_expression::type)
     { panic_impossible (); }
 
@@ -275,21 +275,21 @@ public:
 
   char *name (void) const;
 
   tree_identifier *define (tree_constant *t);
   tree_identifier *define (tree_function *t);
 
   void document (char *s);
 
-  tree_constant assign (const tree_constant& t);
-  tree_constant assign (const tree_constant& t, const Octave_object& args);
+  tree_constant assign (tree_constant& t);
+  tree_constant assign (tree_constant& t, const Octave_object& args);
 
-  tree_constant assign (SLList<char*> list, const tree_constant& t);
-  tree_constant assign (SLList<char*> list, const tree_constant& t,
+  tree_constant assign (SLList<char*> list, tree_constant& t);
+  tree_constant assign (SLList<char*> list, tree_constant& t,
 			const Octave_object& args); 
 
   int is_defined (void);
 
   void bump_value (tree_expression::type);
 
   tree_fvc *do_lookup (int& script_file_executed, int exec_script = 1);
 
@@ -345,18 +345,18 @@ public:
   tree_identifier *ident (void)
     { return id; }
 
   void preserve_identifier (void)
     { preserve_ident = 1; }
 
   char *name (void);
 
-  tree_constant assign (const tree_constant& t);
-  tree_constant assign (const tree_constant& t, const Octave_object& args);
+  tree_constant assign (tree_constant& t);
+  tree_constant assign (tree_constant& t, const Octave_object& args);
 
   void mark_for_possible_ans_assign (void)
     { id->mark_for_possible_ans_assign (); }
 
   tree_constant eval (int print);
 
   Octave_object eval (int print, int nargout, const Octave_object& args);
 
diff --git a/src/tc-rep.h b/src/tc-rep.h
--- a/src/tc-rep.h
+++ b/src/tc-rep.h
@@ -279,17 +279,17 @@ private:
 
   tree_constant do_matrix_index (constant_type i, int j) const;
   tree_constant do_matrix_index (constant_type i, const idx_vector& j) const;
   tree_constant do_matrix_index (constant_type i, const Range& j) const;
   tree_constant do_matrix_index (constant_type i, constant_type j) const;
 
 // Assignment.
 
-  void assign (const tree_constant& rhs, const Octave_object& args);
+  void assign (tree_constant& rhs, const Octave_object& args);
 
   void do_scalar_assignment (const tree_constant& rhs,
 			     const Octave_object& args);
 
   void do_matrix_assignment (const tree_constant& rhs,
 			     const Octave_object& args);
 
   void do_matrix_assignment (const tree_constant& rhs,
