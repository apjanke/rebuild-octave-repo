# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1421206382 18000
#      Tue Jan 13 22:33:02 2015 -0500
# Node ID 2aaf6077eb3c55bf1eb8e75d3b84ae022fe729d9
# Parent  72304a4e010ab41bc1eeab880ff28184ed2b20a7
avoid dereferencing null pointers in audio functions

* audiodevinfo.cc: Check values returned from portaudio functions to
avoid dereferencing null pointers.

diff --git a/libinterp/dldfcn/audiodevinfo.cc b/libinterp/dldfcn/audiodevinfo.cc
--- a/libinterp/dldfcn/audiodevinfo.cc
+++ b/libinterp/dldfcn/audiodevinfo.cc
@@ -123,16 +123,23 @@ or recording using those parameters.\n\
       return retval;
     }
 
   octave_idx_type numinput = 0, numoutput = 0;
   for (int i = 0; i < num_devices; i++)
     {
       const PaDeviceInfo *device_info = Pa_GetDeviceInfo (i);
 
+      if (! device_info)
+        {
+          warning ("Octave:invalid-audio-device",
+                   "invalid audio device ID = %d", i);
+          continue;
+        }
+
       if (device_info->maxInputChannels != 0)
         numinput++;
 
       if (device_info->maxOutputChannels != 0)
         numoutput++;
     }
 
   Cell input_name (dim_vector (1, numinput));
@@ -141,19 +148,29 @@ or recording using those parameters.\n\
   Cell output_name (dim_vector (1, numoutput));
   Cell output_driver_version (dim_vector (1, numoutput));
   Cell output_id (dim_vector (1, numoutput));
 
   octave_idx_type idx_i = 0, idx_o = 0;
   for (int i = 0; i < num_devices; i++)
     {
       const PaDeviceInfo *device_info = Pa_GetDeviceInfo (i);
-      const char *driver;
+
+      if (! device_info)
+        {
+          warning ("Octave:invalid-audio-device",
+                   "invalid audio device ID = %d", i);
+          continue;
+        }
+
+      const PaHostApiInfo *api_info = Pa_GetHostApiInfo (device_info->hostApi);
+
+      const char *driver = api_info ? api_info->name : "";
+
       char name[128];
-      driver = Pa_GetHostApiInfo (device_info->hostApi)->name;
       sprintf (name, "%s (%s)", device_info->name, driver);
 
       if (device_info->maxInputChannels != 0)
         {
           input_name(idx_i) = name;
           input_driver_version(idx_i) = driver;
           input_id(idx_i) = i;
           idx_i++;
@@ -289,36 +306,46 @@ or recording using those parameters.\n\
           if (format != 0)
             stream_parameters.sampleFormat = format;
           else
             {
               error ("audiodevinfo: no such bits per sample format");
               return retval;
             }
 
+          const PaDeviceInfo *device_info = Pa_GetDeviceInfo (i);
+
+          if (! device_info)
+            {
+              warning ("Octave:invalid-audio-device",
+                       "invalid audio device ID = %d", i);
+              continue;
+            }
+
           stream_parameters.suggestedLatency
-            = Pa_GetDeviceInfo (i)->defaultLowInputLatency;
+            = device_info->defaultLowInputLatency;
+
           stream_parameters.hostApiSpecificStreamInfo = 0;
 
           if (io == 0)
             {
-              if (Pa_GetDeviceInfo (i)->maxOutputChannels < chans)
+              if (device_info->maxOutputChannels < chans)
                 continue;
 
               err = Pa_IsFormatSupported (0, &stream_parameters, rate);
 
               if (err == paFormatIsSupported)
                 {
                   retval = i;
                   return retval;
                 }
             }
           else if (io == 1)
             {
-              if (Pa_GetDeviceInfo (i)->maxInputChannels < chans)
+              if (device_info->maxInputChannels < chans)
                 continue;
 
               err = Pa_IsFormatSupported (&stream_parameters, 0, rate);
               if (err == paFormatIsSupported)
                 {
                   retval = i;
                   return retval;
                 }
@@ -340,36 +367,46 @@ or recording using those parameters.\n\
       PaSampleFormat format = bits_to_format (bits);
       if (format != 0)
         stream_parameters.sampleFormat = format;
       else
         {
           error ("audiodevinfo: no such bits per sample format");
           return retval;
         }
-      stream_parameters.suggestedLatency =
-        Pa_GetDeviceInfo (id)->defaultLowInputLatency;
+
+      const PaDeviceInfo *device_info = Pa_GetDeviceInfo (id);
+
+      if (! device_info)
+        {
+          error ("invalid audio device ID = %d", id);
+          return retval;
+        }
+
+      stream_parameters.suggestedLatency
+        = device_info->defaultLowInputLatency;
+
       stream_parameters.hostApiSpecificStreamInfo = 0;
       if (io == 0)
         {
-          if (Pa_GetDeviceInfo (id)->maxOutputChannels < chans)
+          if (device_info->maxOutputChannels < chans)
             {
               retval = 0;
               return retval;
             }
           err = Pa_IsFormatSupported (0, &stream_parameters, rate);
           if (err == paFormatIsSupported)
             {
               retval = 1;
               return retval;
             }
         }
       else if (io == 1)
         {
-          if (Pa_GetDeviceInfo (id)->maxInputChannels < chans)
+          if (device_info->maxInputChannels < chans)
             {
               retval = 0;
               return retval;
             }
           err = Pa_IsFormatSupported (&stream_parameters, 0, rate);
           if (err == paFormatIsSupported)
             {
               retval = 1;
@@ -859,18 +896,26 @@ audioplayer::init_fn (void)
   int device = get_id ();
 
   if (device == -1)
     device = Pa_GetDefaultOutputDevice ();
 
   output_parameters.device = device;
   output_parameters.channelCount = 2;
   output_parameters.sampleFormat = bits_to_format (get_nbits ());
-  output_parameters.suggestedLatency = 
-    Pa_GetDeviceInfo (device)->defaultHighOutputLatency;
+
+  const PaDeviceInfo *device_info = Pa_GetDeviceInfo (device);
+
+  if (! device_info)
+    warning ("Octave:invalid-default-audio-device",
+             "invalid default audio device ID = %d", device);
+
+  output_parameters.suggestedLatency
+    = device_info ? device_info->defaultHighOutputLatency : -1;
+
   output_parameters.hostApiSpecificStreamInfo = 0;
 }
 
 void
 audioplayer::init (void)
 {
   // Both of these variables are unused.  Should they be
   // eliminated or is something not yet implemented?
@@ -902,18 +947,25 @@ audioplayer::init (void)
     output_parameters.sampleFormat = bits_to_format (get_nbits ());
   else if (type == TYPE_INT8)
     output_parameters.sampleFormat = paInt8;
   else if (type == TYPE_UINT8)
     output_parameters.sampleFormat = paUInt8;
   else if (type == TYPE_UINT16)
     output_parameters.sampleFormat = paInt16;
 
-  output_parameters.suggestedLatency =
-    Pa_GetDeviceInfo (device)->defaultHighOutputLatency;
+  const PaDeviceInfo *device_info = Pa_GetDeviceInfo (device);
+
+  if (! device_info)
+    warning ("Octave:invalid-default-audio-device",
+             "invalid default audio device ID = %d", device);
+
+  output_parameters.suggestedLatency
+    = device_info ? device_info->defaultHighOutputLatency : -1;
+
   output_parameters.hostApiSpecificStreamInfo = 0;
 }
 
 void
 audioplayer::set_y (const octave_value& y_arg)
 {
   if (y_arg.is_int8_type ())
     type = TYPE_INT8;
@@ -1316,16 +1368,23 @@ DEFINE_OCTAVE_ALLOCATOR (audiorecorder);
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (audiorecorder, "audiorecorder", "audiorecorder");
 
 static int
 octave_record_callback (const void *input, void *, unsigned long frames,
                         const PaStreamCallbackTimeInfo *,
                         PaStreamCallbackFlags, void *data)
 {
   audiorecorder *recorder = static_cast<audiorecorder *> (data);
+
+  if (! recorder)
+    {
+      error ("audio recorder callback function called without player");
+      return paAbort;
+    }
+
   int channels = recorder->get_channels ();
 
   Matrix sound (frames, 2);
   sound.resize (frames, 2);
 
   if (recorder->get_nbits () == 8)
     {
       static double scale_factor = std::pow (2.0, 7) - 1.0;
@@ -1395,16 +1454,22 @@ octave_record_callback (const void *inpu
 
 static int
 portaudio_record_callback (const void *input, void *, unsigned long frames,
                            const PaStreamCallbackTimeInfo *,
                            PaStreamCallbackFlags, void *data)
 {
   audiorecorder *recorder = static_cast<audiorecorder *> (data);
 
+  if (! recorder)
+    {
+      error ("audio recorder callback function called without player");
+      return paAbort;
+    }
+
   int channels = recorder->get_channels ();
 
   if (recorder->get_nbits () == 8)
     {
       static float scale_factor = std::pow (2.0f, 7) - 1.0f;
 
       const int8_t *input8 = static_cast<const int8_t *> (input);
 
@@ -1505,18 +1570,26 @@ audiorecorder::init (void)
   int device = get_id ();
 
   if (device == -1)
     device = Pa_GetDefaultInputDevice ();
 
   input_parameters.device = device;
   input_parameters.channelCount = get_channels ();
   input_parameters.sampleFormat = bits_to_format (get_nbits ());
-  input_parameters.suggestedLatency =
-    Pa_GetDeviceInfo (device)->defaultHighInputLatency;
+
+  const PaDeviceInfo *device_info = Pa_GetDeviceInfo (device);
+
+  if (! device_info)
+    warning ("Octave:invalid-default-audio-device",
+             "invalid default audio device ID = %d", device);
+
+  input_parameters.suggestedLatency
+    = device_info ? device_info->defaultHighInputLatency : -1;
+
   input_parameters.hostApiSpecificStreamInfo = 0;
 }
 
 void
 audiorecorder::set_fs (int fs_arg)
 {
   fs = fs_arg;
 }
@@ -1902,16 +1975,23 @@ DEFUN_DLD (__recorder_getaudiodata__, ar
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
   audiorecorder *recorder = get_recorder (args(0));
+
+  if (! recorder)
+    {
+      print_usage ();
+      return retval;
+    }
+
   retval = recorder->getaudiodata ();
 
 #else
 
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
 
@@ -1926,16 +2006,23 @@ Undocumented internal function.\n\
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
   if (args.length () == 1)
     {
       audiorecorder *recorder = get_recorder (args(0));
+
+      if (! recorder)
+        {
+          print_usage ();
+          return retval;
+        }
+
       retval = recorder->get_channels ();
     }
 
 #else
 
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
@@ -1951,16 +2038,23 @@ Undocumented internal function.\n\
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
   if (args.length () == 1)
     {
       audiorecorder *recorder = get_recorder (args(0));
+
+      if (! recorder)
+        {
+          print_usage ();
+          return retval;
+        }
+
       retval = recorder->get_fs ();
     }
 
 #else
 
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
@@ -1976,16 +2070,23 @@ Undocumented internal function.\n\
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
   if (args.length () == 1)
     {
       audiorecorder *recorder = get_recorder (args(0));
+
+      if (! recorder)
+        {
+          print_usage ();
+          return retval;
+        }
+
       retval = recorder->get_id ();
     }
 
 #else
 
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
@@ -2001,16 +2102,23 @@ Undocumented internal function.\n\
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
   if (args.length () == 1)
     {
       audiorecorder *recorder = get_recorder (args(0));
+
+      if (! recorder)
+        {
+          print_usage ();
+          return retval;
+        }
+
       retval = recorder->get_nbits ();
     }
 
 #else
 
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
@@ -2026,16 +2134,23 @@ Undocumented internal function.\n\
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
   if (args.length () == 1)
     {
       audiorecorder *recorder = get_recorder (args(0));
+
+      if (! recorder)
+        {
+          print_usage ();
+          return retval;
+        }
+
       retval = recorder->get_sample_number ();
     }
 
 #else
 
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
@@ -2051,16 +2166,23 @@ Undocumented internal function.\n\
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
   if (args.length () == 1)
     {
       audiorecorder *recorder = get_recorder (args(0));
+
+      if (! recorder)
+        {
+          print_usage ();
+          return retval;
+        }
+
       retval = recorder->get_tag ();
     }
 
 #else
 
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
@@ -2076,16 +2198,23 @@ Undocumented internal function.\n\
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
   if (args.length () == 1)
     {
       audiorecorder *recorder = get_recorder (args(0));
+
+      if (! recorder)
+        {
+          print_usage ();
+          return retval;
+        }
+
       retval = recorder->get_total_samples ();
     }
 
 #else
 
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
@@ -2101,16 +2230,23 @@ Undocumented internal function.\n\
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
   if (args.length () == 1)
     {
       audiorecorder *recorder = get_recorder (args(0));
+
+      if (! recorder)
+        {
+          print_usage ();
+          return retval;
+        }
+
       retval = recorder->get_userdata ();
     }
 
 #else
 
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
@@ -2126,16 +2262,23 @@ Undocumented internal function.\n\
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
   if (args.length () == 1)
     {
       audiorecorder *recorder = get_recorder (args(0));
+
+      if (! recorder)
+        {
+          print_usage ();
+          return retval;
+        }
+
       retval = recorder->isrecording () ? true : false;
     }
 
 #else
 
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
@@ -2151,16 +2294,23 @@ Undocumented internal function.\n\
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
   if (args.length () == 1)
     {
       audiorecorder *recorder = get_recorder (args(0));
+
+      if (! recorder)
+        {
+          print_usage ();
+          return retval;
+        }
+
       recorder->pause ();
     }
 
 #else
 
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
@@ -2174,16 +2324,23 @@ DEFUN_DLD (__recorder_recordblocking__, 
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
   audiorecorder *recorder = get_recorder (args(0));
+
+  if (! recorder)
+    {
+      print_usage ();
+      return retval;
+    }
+
   recorder->recordblocking (args(1).float_value ());
 
 #else
 
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
 
@@ -2198,16 +2355,22 @@ Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
   audiorecorder *recorder = get_recorder (args(0));
 
+  if (! recorder)
+    {
+      print_usage ();
+      return retval;
+    }
+
   if (args.length () == 1)
     recorder->record ();
   else if (args.length () == 2)
     {
       recorder->set_end_sample (args(1).int_value () * recorder->get_fs ());
       recorder->record ();
     }
   else
@@ -2230,16 +2393,23 @@ Undocumented internal function.\n\
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
   if (args.length () == 1)
     {
       audiorecorder *recorder = get_recorder (args(0));
+
+      if (! recorder)
+        {
+          print_usage ();
+          return retval;
+        }
+
       recorder->resume ();
     }
 
 #else
 
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
@@ -2255,16 +2425,23 @@ Undocumented internal function.\n\
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
   if (args.length () == 2)
     {
       audiorecorder *recorder = get_recorder (args(0));
+
+      if (! recorder)
+        {
+          print_usage ();
+          return retval;
+        }
+
       recorder->set_fs (args(1).int_value ());
     }
 
 #else
 
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
@@ -2280,16 +2457,23 @@ Undocumented internal function.\n\
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
   if (args.length () == 2)
     {
       audiorecorder *recorder = get_recorder (args(0));
+
+      if (! recorder)
+        {
+          print_usage ();
+          return retval;
+        }
+
       recorder->set_tag (args(1).char_matrix_value ());
     }
 
 #else
 
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
@@ -2305,16 +2489,23 @@ Undocumented internal function.\n\
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
   if (args.length () == 2)
     {
       audiorecorder *recorder = get_recorder (args(0));
+
+      if (! recorder)
+        {
+          print_usage ();
+          return retval;
+        }
+
       recorder->set_userdata (args(1));
     }
 
 #else
 
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
@@ -2328,16 +2519,23 @@ DEFUN_DLD (__recorder_stop__, args, ,
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
   audiorecorder *recorder = get_recorder (args(0));
+
+      if (! recorder)
+        {
+          print_usage ();
+          return retval;
+        }
+
   recorder->stop ();
 
 #else
 
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
 
@@ -2361,16 +2559,22 @@ Undocumented internal function.\n\
   if (nargin < 2 || nargin > 4)
     {
       print_usage ();
       return retval;
     }
 
   audioplayer* recorder = new audioplayer ();
 
+  if (! recorder)
+    {
+      print_usage ();
+      return retval;
+    }
+
   bool is_function = args(0).is_string () || args(0).is_function_handle ()
                      || args(0).is_inline_function ();
 
   if (is_function)
     {
       error ("audioplayer: callbacks not yet implemented");
       return retval;
 
@@ -2431,16 +2635,23 @@ Undocumented internal function.\n\
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
   if (args.length () == 1)
     {
       audioplayer *player = get_player (args(0));
+
+      if (! player)
+        {
+          print_usage ();
+          return retval;
+        }
+
       retval = player->get_channels ();
     }
 
 #else
 
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
@@ -2456,16 +2667,23 @@ Undocumented internal function.\n\
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
   if (args.length () == 1)
     {
       audioplayer *player = get_player (args(0));
+
+      if (! player)
+        {
+          print_usage ();
+          return retval;
+        }
+
       retval = player->get_fs ();
     }
 
 #else
 
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
@@ -2481,16 +2699,23 @@ Undocumented internal function.\n\
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
   if (args.length () == 1)
     {
       audioplayer *player = get_player (args(0));
+
+      if (! player)
+        {
+          print_usage ();
+          return retval;
+        }
+
       retval = player->get_id ();
     }
 
 #else
 
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
@@ -2506,16 +2731,23 @@ Undocumented internal function.\n\
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
   if (args.length () == 1)
     {
       audioplayer *player = get_player (args(0));
+
+      if (! player)
+        {
+          print_usage ();
+          return retval;
+        }
+
       retval = player->get_nbits ();
     }
 
 #else
 
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
@@ -2531,16 +2763,23 @@ Undocumented internal function.\n\
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
   if (args.length () == 1)
     {
       audioplayer *player = get_player (args(0));
+
+      if (! player)
+        {
+          print_usage ();
+          return retval;
+        }
+
       retval = player->get_sample_number ();
     }
 
 #else
 
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
@@ -2556,16 +2795,23 @@ Undocumented internal function.\n\
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
   if (args.length () == 1)
     {
       audioplayer *player = get_player (args(0));
+
+      if (! player)
+        {
+          print_usage ();
+          return retval;
+        }
+
       retval = player->get_tag ();
     }
 
 #else
 
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
@@ -2581,16 +2827,23 @@ Undocumented internal function.\n\
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
   if (args.length () == 1)
     {
       audioplayer *player = get_player (args(0));
+
+      if (! player)
+        {
+          print_usage ();
+          return retval;
+        }
+
       retval = player->get_total_samples ();
     }
 
 #else
 
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
@@ -2606,16 +2859,23 @@ Undocumented internal function.\n\
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
   if (args.length () == 1)
     {
       audioplayer *player = get_player (args(0));
+
+      if (! player)
+        {
+          print_usage ();
+          return retval;
+        }
+
       retval = player->get_userdata ();
     }
 
 #else
 
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
@@ -2631,16 +2891,23 @@ Undocumented internal function.\n\
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
   if (args.length () == 1)
     {
       audioplayer *player = get_player (args(0));
+
+      if (! player)
+        {
+          print_usage ();
+          return retval;
+        }
+
       retval = player->isplaying () ? true : false;
     }
 
 #else
 
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
@@ -2656,16 +2923,23 @@ Undocumented internal function.\n\
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
   if (args.length () == 1)
     {
       audioplayer *player = get_player (args(0));
+
+      if (! player)
+        {
+          print_usage ();
+          return retval;
+        }
+
       player->pause ();
     }
 
 #else
 
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
@@ -2680,24 +2954,28 @@ DEFUN_DLD (__player_playblocking__, args
 @deftypefnx {Loadable Function} {} __player_playblocking__ (@var{player}, [@var{start}, @var{end}])\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
-  if (args.length () == 1)
+  audioplayer *player = get_player (args(0));
+
+  if (! player)
     {
-      audioplayer *player = get_player (args(0));
-      player->playblocking ();
+      print_usage ();
+      return retval;
     }
+
+  if (args.length () == 1)
+    player->playblocking ();
   else
     {
-      audioplayer *player = get_player (args(0));
       if (args(1).is_matrix_type ())
         {
           RowVector range = args(1).row_vector_value ();
 
           unsigned int start = range.elem (0) - 1;
           unsigned int end = range.elem (1) - 1;
 
           if (start > player->get_total_samples ()
@@ -2745,16 +3023,23 @@ Undocumented internal function.\n\
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
   if (args.length () == 1)
     {
       audioplayer *player = get_player (args(0));
+
+      if (! player)
+        {
+          print_usage ();
+          return retval;
+        }
+
       player->play ();
     }
   else
     {
       audioplayer *player = get_player (args(0));
 
       if (args(1).is_matrix_type ())
         {
@@ -2806,16 +3091,23 @@ Undocumented internal function.\n\
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
   if (args.length () == 1)
     {
       audioplayer *player = get_player (args(0));
+
+      if (! player)
+        {
+          print_usage ();
+          return retval;
+        }
+
       player->resume ();
     }
 
 #else
 
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
@@ -2831,16 +3123,23 @@ Undocumented internal function.\n\
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
   if (args.length () == 2)
     {
       audioplayer *player = get_player (args(0));
+
+      if (! player)
+        {
+          print_usage ();
+          return retval;
+        }
+
       player->set_fs (args(1).int_value ());
     }
 
 #else
 
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
@@ -2856,16 +3155,23 @@ Undocumented internal function.\n\
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
   if (args.length () == 2)
     {
       audioplayer *player = get_player (args(0));
+
+      if (! player)
+        {
+          print_usage ();
+          return retval;
+        }
+
       player->set_tag (args(1).char_matrix_value ());
     }
 
 #else
 
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
@@ -2881,16 +3187,23 @@ Undocumented internal function.\n\
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
   if (args.length () == 2)
     {
       audioplayer *player = get_player (args(0));
+
+      if (! player)
+        {
+          print_usage ();
+          return retval;
+        }
+
       player->set_userdata (args(1));
     }
 
 #else
 
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
@@ -2906,16 +3219,23 @@ Undocumented internal function.\n\
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
   if (args.length () == 1)
     {
       audioplayer *player = get_player (args (0));
+
+      if (! player)
+        {
+          print_usage ();
+          return retval;
+        }
+
       player->stop ();
     }
 
 #else
 
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
