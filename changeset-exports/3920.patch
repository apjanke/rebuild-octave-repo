# HG changeset patch
# User jwe
# Date 1020226052 0
#      Wed May 01 04:07:32 2002 +0000
# Node ID 87db95b22f8fa1200f7b32f352a570d2a2144ff5
# Parent  cdfbc6678c2383c2697db0a79aa8fac0957f14c5
[project @ 2002-05-01 04:07:31 by jwe]

diff --git a/doc/interpreter/matrix.txi b/doc/interpreter/matrix.txi
--- a/doc/interpreter/matrix.txi
+++ b/doc/interpreter/matrix.txi
@@ -114,16 +114,18 @@ a (i, :)
 @section Special Utility Matrices
 
 @DOCSTRING(eye)
 
 @DOCSTRING(ones)
 
 @DOCSTRING(zeros)
 
+@DOCSTRING(repmat)
+
 @DOCSTRING(rand)
 
 @DOCSTRING(randn)
 
 The @code{rand} and @code{randn} functions use separate generators.
 This ensures that
 
 @example
diff --git a/doc/interpreter/numbers.txi b/doc/interpreter/numbers.txi
--- a/doc/interpreter/numbers.txi
+++ b/doc/interpreter/numbers.txi
@@ -327,17 +327,17 @@ replaces the list with a single matrix c
 
 @DOCSTRING(propagate_empty_matrices)
 
 @node Ranges, Logical Values, Matrices, Numeric Data Types
 @section Ranges
 @cindex range expressions
 @cindex expression, range
 
-@opindex :
+@opindex colon
 
 A @dfn{range} is a convenient way to write a row vector with evenly
 spaced elements.  A range expression is defined by the value of the first
 element in the range, an optional value for the increment between
 elements, and a maximum value which the elements of the range will not
 exceed.  The base, increment, and limit are separated by colons (the
 @samp{:} character) and may contain any arithmetic expressions and
 function calls.  If the increment is omitted, it is assumed to be 1.
diff --git a/doc/interpreter/signal.txi b/doc/interpreter/signal.txi
--- a/doc/interpreter/signal.txi
+++ b/doc/interpreter/signal.txi
@@ -22,18 +22,22 @@ please contact @email{bug-octave@@bevo.c
 @DOCSTRING(fftconv)
 
 @DOCSTRING(fftfilt)
 
 @DOCSTRING(filter)
 
 @DOCSTRING(freqz)
 
+@DOCSTRING(freqz_plot)
+
 @DOCSTRING(sinc)
 
+@DOCSTRING(unwrap)
+
 @c XXX FIXME XXX -- someone needs to organize these...
 
 @DOCSTRING(arch_fit)
 
 @DOCSTRING(arch_rnd)
 
 @DOCSTRING(arch_test)
 
diff --git a/doc/interpreter/strings.txi b/doc/interpreter/strings.txi
--- a/doc/interpreter/strings.txi
+++ b/doc/interpreter/strings.txi
@@ -166,16 +166,22 @@ Data Types}, for more information about 
 @DOCSTRING(bin2dec)
 
 @DOCSTRING(dec2bin)
 
 @DOCSTRING(dec2hex)
 
 @DOCSTRING(hex2dec)
 
+@DOCSTRING(dec2base)
+
+@DOCSTRING(base2dec)
+
+@DOCSTRING(strjust)
+
 @DOCSTRING(str2num)
 
 @DOCSTRING(toascii)
 
 @DOCSTRING(tolower)
 
 @DOCSTRING(toupper)
 
diff --git a/doc/liboctave/array.texi b/doc/liboctave/array.texi
--- a/doc/liboctave/array.texi
+++ b/doc/liboctave/array.texi
@@ -4,178 +4,188 @@
 
 @menu
 * Constructors and Assignment::  
 @end menu
 
 @node Constructors and Assignment,  , Arrays, Arrays
 @section Constructors and Assignment
 
-@deftypefn Constructor {} Array<T>::Array (void)
+@deftypefn Constructor {} Array<T> (void)
 Create an array with no elements.
 @end deftypefn
 
-@deftypefn Constructor {} Array<T>::Array (int @var{n} [, const T &@var{val}])
+@deftypefn Constructor {} Array<T> (int @var{n} [, const T &@var{val}])
 Create an array with @var{n} elements.  If the optional argument
 @var{val} is supplied, the elements are initialized to @var{val};
 otherwise, they are left uninitialized.  If @var{n} is less than zero,
 the current error handler is invoked (@pxref{Error Handling}).
 @end deftypefn
 
-@deftypefn Constructor {} Array<T>::Array (const Array<T> &@var{a})
+@deftypefn Constructor {} Array<T> (const Array<T> &@var{a})
 Create a copy of the @var{Array<T>} object @var{a}.  Memory for the
 @var{Array<T>} class is managed using a reference counting scheme, so
 the cost of this operation is independent of the size of the array.
 @end deftypefn
 
-@deftypefn Operator Array<T>& {Array<T>::operator =} (const Array<T> &@var{a})
+@deftypeop Assignment Array<T> Array<T>& {operator =} (const Array<T> &@var{a})
 Assignment operator.  Memory for the @var{Array<T>} class is managed
 using a reference counting scheme, so the cost of this operation is
 independent of the size of the array.
-@end deftypefn
+@end deftypeop
 
-@deftypefn Method int Array<T>::capacity (void) const
-@deftypefnx Method int Array<T>::length (void) const
+@deftypemethod Array<T> int capacity (void) const
+@deftypemethodx Array<T> int length (void) const
 Return the length of the array.
-@end deftypefn
+@end deftypemethod
 
-@deftypefn Method T& Array<T>::elem (int @var{n})
-@deftypefnx Method T& Array<T>::checkelem (int @var{n})
-@deftypefnx Method T& {Array<T>::operator ()} (int @var{n})
+@deftypemethod Array<T> T& elem (int @var{n})
+@deftypemethodx Array<T> T& checkelem (int @var{n})
 If @var{n} is within the bounds of the array, return a reference to the
 element indexed by @var{n}; otherwise, the current error handler is
 invoked (@pxref{Error Handling}).
-@end deftypefn
+@end deftypemethod
 
-@deftypefn Method T Array<T>::elem (int @var{n}) const
-@deftypefnx Method T Array<T>::checkelem (int @var{n}) const
-@deftypefnx Method T Array<T>::operator () (int @var{n}) const
+@deftypeop Indexing Array<T> T& {operator ()} (int @var{n})
+@end deftypeop
+
+@deftypemethod Array<T> T elem (int @var{n}) const
+@deftypemethodx Array<T> T checkelem (int @var{n}) const
 If @var{n} is within the bounds of the array, return the value indexed
 by @var{n}; otherwise, call the current error handler.
 @xref{Error Handling}.
-@end deftypefn
+@end deftypemethod
 
-@deftypefn Method T& Array<T>::xelem (int @var{n})
-@deftypefnx Method T Array<T>::xelem (int @var{n}) const
+@deftypeop Indexing Array<T> T {operator ()} (int @var{n}) const
+@end deftypeop
+
+@deftypemethod Array<T> T& xelem (int @var{n})
+@deftypemethodx Array<T> T xelem (int @var{n}) const
 Return a reference to, or the value of, the element indexed by @var{n}.
 These methods never perform bounds checking.
-@end deftypefn
+@end deftypemethod
 
-@deftypefn Method void Array<T>::resize (int @var{n} [, const T &@var{val}])
+@deftypemethod Array<T> void resize {(int @var{n} [, const T &@var{val}])}
 Change the size of the array to be @var{n} elements.  All elements are
 unchanged, except that if @var{n} is greater than the current size and
 the optional argument @var{val} is provided, the additional elements are
 initialized to @var{val}; otherwise, any additional elements are left
 uninitialized.  In the current implementation, if @var{n} is less than
 the current size, the length is updated but no memory is released.
-@end deftypefn
+@end deftypemethod
 
-@deftypefn Method {const T*} Array<T>::data (void) const
-@end deftypefn
+@deftypemethod Array<T> {const T*} data (void) const
+@end deftypemethod
 
 @c Should this be public?
 @c
 @c T *fortran_vec (void)
 
-@deftypefn  {} {} Array2 (void)
-@deftypefnx  {} {} Array2 (int @var{n}, int @var{m})
-@deftypefnx  {} {} Array2 (int @var{n}, int @var{m}, const T &@var{val})
-@deftypefnx  {} {} Array2 (const Array2<T> &@var{a})
-@deftypefnx  {} {} Array2 (const DiagArray<T> &@var{a})
-@end deftypefn
-
-@deftypefn {} Array2<T>& {operator =} (const Array2<T> &@var{a})
+@deftypefn Constructor {} Array2<T> Array2<T> Array2 (void)
+@deftypefnx Constructor {} Array2<T> (int @var{n}, int @var{m})
+@deftypefnx Constructor {} Array2<T> (int @var{n}, int @var{m}, const T &@var{val})
+@deftypefnx Constructor {} Array2<T> (const Array2<T> &@var{a})
+@deftypefnx Constructor {} Array2<T> (const DiagArray<T> &@var{a})
 @end deftypefn
 
-@deftypefn {} int dim1 (void) const
-@deftypefnx {} int rows (void) const
-@end deftypefn
+@deftypeop Assignment Array2<T> Array2<T>& {operator =} (const Array2<T> &@var{a})
+@end deftypeop
+
+@deftypemethod Array2<T> int dim1 (void) const
+@deftypemethodx Array2<T> int rows (void) const
+@end deftypemethod
 
-@deftypefn {} int dim2 (void) const
-@deftypefnx {} int cols (void) const
-@deftypefnx {} int columns (void) const
-@end deftypefn
+@deftypemethod Array2<T> int dim2 (void) const
+@deftypemethodx Array2<T> int cols (void) const
+@deftypemethodx Array2<T> int columns (void) const
+@end deftypemethod
 
-@deftypefn {} T& elem (int @var{i}, int @var{j})
-@deftypefnx {} T& checkelem (int @var{i}, int @var{j})
-@deftypefnx {} T& {operator ()} (int @var{i}, int @var{j})
-@end deftypefn
+@deftypemethod Array2<T> T& elem (int @var{i}, int @var{j})
+@deftypemethodx Array2<T> T& checkelem (int @var{i}, int @var{j})
+@end deftypemethod
+
+@deftypeop Indexing Array2<T> T& {operator ()} (int @var{i}, int @var{j})
+@end deftypeop
 
 @c This needs to be fixed.
 @c
 @c T& xelem (int i, int j)
 @c
 @c T elem (int i, int j) const
 @c T checkelem (int i, int j) const
 @c T operator () (int i, int j) const
 
-@deftypefn {} void resize (int @var{n}, int @var{m})
-@deftypefnx {} void resize (int @var{n}, int @var{m}, const T &@var{val})
-@end deftypefn
+@deftypemethod Array2<T> void resize (int @var{n}, int @var{m})
+@deftypemethodx Array2<T> void resize (int @var{n}, int @var{m}, const T &@var{val})
+@end deftypemethod
 
-@deftypefn {} Array3 (void)
-@deftypefnx {} Array3 (int @var{n}, int @var{m}, int @var{k})
-@deftypefnx {} Array3 (int @var{n}, int @var{m}, int @var{k}, const T &@var{val})
-@deftypefnx {} Array3 (const Array3<T> &@var{a})
+@deftypefn Constructor {} Array3<T> (void)
+@deftypefnx Constructor {} Array3<T> (int @var{n}, int @var{m}, int @var{k})
+@deftypefnx Constructor {} Array3<T> (int @var{n}, int @var{m}, int @var{k}, const T &@var{val})
+@deftypefnx Constructor {} Array3<T> (const Array3<T> &@var{a})
 @end deftypefn
 
-@deftypefn {} Array3<T>& {operator =} (const Array3<T> &@var{a})
-@end deftypefn
+@deftypeop Assignment Array3<T> Array3<T>& {operator =} (const Array3<T> &@var{a})
+@end deftypeop
 
-@deftypefn {} int dim1 (void) const
-@deftypefnx {} int dim2 (void) const
-@deftypefnx {} int dim3 (void) const
-@end deftypefn
+@deftypemethod Array3<T> int dim1 (void) const
+@deftypemethodx Array3<T> int dim2 (void) const
+@deftypemethodx Array3<T> int dim3 (void) const
+@end deftypemethod
 
-@deftypefn {} T& elem (int @var{i}, int @var{j}, int @var{k})
-@deftypefnx {} T& checkelem (int @var{i}, int @var{j}, int @var{k})
-@deftypefnx {} T& {operator ()} (int @var{i}, int @var{j}, int @var{k})
-@end deftypefn
+@deftypemethod Array3<T> T& elem (int @var{i}, int @var{j}, int @var{k})
+@deftypemethodx Array3<T> T& checkelem (int @var{i}, int @var{j}, int @var{k})
+@end deftypemethod
+
+@deftypeop Indexing Array3<T> T& {operator ()} (int @var{i}, int @var{j}, int @var{k})
+@end deftypeop
 
 @c This needs to be fixed.
 @c
 @c T& xelem (int i, int j, int k)
 @c
 @c T elem (int i, int j, int k) const
 @c T checkelem (int i, int j, int k) const
 @c T operator () (int i, int j, int k) const
 
-@deftypefn {} void resize (int @var{n}, int @var{m}, int @var{k})
-@deftypefnx {} void resize (int @var{n}, int @var{m}, int @var{k}, const T &@var{val})
-@end deftypefn
+@deftypemethod Array3<T> void resize (int @var{n}, int @var{m}, int @var{k})
+@deftypemethodx Array3<T> void resize (int @var{n}, int @var{m}, int @var{k}, const T &@var{val})
+@end deftypemethod
 
-@deftypefn  {} {}DiagArray (void)
-@deftypefnx  {} {}DiagArray (int @var{n})
-@deftypefnx  {} {}DiagArray (int @var{n}, const T &@var{val})
-@deftypefnx  {} {}DiagArray (int @var{r}, int @var{c})
-@deftypefnx  {} {}DiagArray (int @var{r}, int @var{c}, const T &@var{val})
-@deftypefnx  {} {}DiagArray (const Array<T> &@var{a})
-@deftypefnx  {} {}DiagArray (const DiagArray<T> &@var{a})
+@deftypefn Constructor {} DiagArray<T> (void)
+@deftypefnx Constructor {} DiagArray<T> (int @var{n})
+@deftypefnx Constructor {} DiagArray<T> (int @var{n}, const T &@var{val})
+@deftypefnx Constructor {} DiagArray<T> (int @var{r}, int @var{c})
+@deftypefnx Constructor {} DiagArray<T> (int @var{r}, int @var{c}, const T &@var{val})
+@deftypefnx Constructor {} DiagArray<T> (const Array<T> &@var{a})
+@deftypefnx Constructor {} DiagArray<T> (const DiagArray<T> &@var{a})
 @end deftypefn
 
-@deftypefn {} DiagArray<T>& {operator =} (const DiagArray<T> &@var{a})
-@end deftypefn
+@deftypeop {Assginment} DiagArray<T>& {operator =} (const DiagArray<T> &@var{a})
+@end deftypeop
 
-@deftypefn {} int dim1 (void) const
-@deftypefnx {} int rows (void) const
-@end deftypefn
+@deftypemethod DiagArray<T> int dim1 (void) const
+@deftypemethodx DiagArray<T> int rows (void) const
+@end deftypemethod
 
-@deftypefn {} int dim2 (void) const
-@deftypefnx {} int cols (void) const
-@deftypefnx {} int columns (void) const
-@end deftypefn
+@deftypemethod DiagArray<T> int dim2 (void) const
+@deftypemethodx DiagArray<T> int cols (void) const
+@deftypemethodx DiagArray<T> int columns (void) const
+@end deftypemethod
 
-@deftypefn {} T& elem (int @var{r}, int @var{c})
-@deftypefnx {} T& checkelem (int @var{r}, int @var{c})
-@deftypefnx {} T& {operator ()} (int @var{r}, int @var{c})
-@end deftypefn
+@deftypemethod DiagArray<T> T& elem (int @var{r}, int @var{c})
+@deftypemethodx DiagArray<T> T& checkelem (int @var{r}, int @var{c})
+@end deftypemethod
+
+@deftypeop Indexing DiagArray<T> T& {operator ()} (int @var{r}, int @var{c})
+@end deftypeop
 
 @c This needs to be fixed.
 @c
 @c T& xelem (int r, int c)
 @c
 @c T elem (int r, int c) const
 @c T checkelem (int r, int c) const
 @c T operator () (int r, int c) const
 
-@deftypefn {} void resize (int @var{n}, int @var{m})
-@deftypefnx {} void resize (int @var{n}, int @var{m}, const T &@var{val})
-@end deftypefn
+@deftypemethod DiagArray<T> void resize (int @var{n}, int @var{m})
+@deftypemethodx DiagArray<T> void resize (int @var{n}, int @var{m}, const T &@var{val})
+@end deftypemethod
diff --git a/scripts/signal/freqz.m b/scripts/signal/freqz.m
--- a/scripts/signal/freqz.m
+++ b/scripts/signal/freqz.m
@@ -58,17 +58,17 @@
 ## Evaluate the response at the specific frequencies in the vector @var{w}.
 ## The values for @var{w} are measured in radians.
 ##
 ## @deftypefnx {Function File} {[@dots{}] =} freqz (@dots{}, @var{Fs})
 ## Return frequencies in Hz instead of radians assuming a sampling rate
 ## @var{Fs}.  If you are evaluating the response at specific frequencies 
 ## @var{w}, those frequencies should be requested in Hz rather than radians.
 ##
-## @deftypefnx {Function File} {} freqz(@dots{})
+## @deftypefnx {Function File} {} freqz (@dots{})
 ## Plot the pass band, stop band and phase response of @var{h} rather
 ## than returning them.
 ## @end deftypefn
 
 ## Author: jwe ???
 
 function [h_r, w_r] = freqz (b, a, n, region, Fs)
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2002-04-30  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* DLD-FUNCTIONS/lsode.cc (Flsode): Delete unused variable nsteps.
+
 2002-04-29  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* help.cc (additional_help_message): Use www.octave.org, not
 	www.che.wisc.edu/octave/octave.html.
 	* octave.cc (verbose_usage): Likewise.
 
 2002-04-27  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
diff --git a/src/DLD-FUNCTIONS/lsode.cc b/src/DLD-FUNCTIONS/lsode.cc
--- a/src/DLD-FUNCTIONS/lsode.cc
+++ b/src/DLD-FUNCTIONS/lsode.cc
@@ -260,17 +260,16 @@ discontinuity in the derivative.\n\
 
 	  if (error_state)
 	    LSODE_ABORT1 ("expecting critical time vector as fourth argument");
 
 	  crit_times_set = 1;
 	}
 
       double tzero = out_times (0);
-      int nsteps = out_times.capacity ();
 
       ODEFunc func (lsode_user_function);
       if (lsode_jac)
 	func.set_jacobian_function (lsode_user_jacobian);
 
       LSODE ode (state, tzero, func);
 
       ode.copy (lsode_opts);
