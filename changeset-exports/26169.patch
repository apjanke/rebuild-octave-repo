# HG changeset patch
# User Rik <rik@octave.org>
# Date 1543987021 28800
#      Tue Dec 04 21:17:01 2018 -0800
# Node ID 096b38cac97f116cf6f20ef9dd5b4f430ba309d7
# Parent  0a3561379dbe376b497b5cc96159cf64342c05b5
Improve input validation to reject multiple options for clear (bug #53565).

* variables.cc (Fclear): Delete macro CLEAR_OPTION_ERROR.  Add additional
documentation about not using more than one option (aside from -x) -regexp) and
that all options should appear before any patterns.  Add mlock to list of
seealso functions and explain that -f will re-initialize persistent variables.
In input validation, call print_usage() if more than two options are given
aside from -x.  Wrap BIST test for clear() with no arguments inside a function
so it runs correctly under the BIST system.  Add input validation test for
incorrectly calling function with two options.

diff --git a/libinterp/corefcn/variables.cc b/libinterp/corefcn/variables.cc
--- a/libinterp/corefcn/variables.cc
+++ b/libinterp/corefcn/variables.cc
@@ -1175,24 +1175,16 @@ do_matlab_compatible_clear (octave::symb
         }
       else
         {
           symtab.clear_symbol_pattern (argv[idx]);
         }
     }
 }
 
-#define CLEAR_OPTION_ERROR(cond)                \
-  do                                            \
-    {                                           \
-      if (cond)                                 \
-        print_usage ();                         \
-    }                                           \
-  while (0)
-
 DEFMETHOD (clear, interp, args, ,
            doc: /* -*- texinfo -*-
 @deftypefn  {} {} clear
 @deftypefnx {} {} clear @var{pattern} @dots{}
 @deftypefnx {} {} clear @var{options} @var{pattern} @dots{}
 Delete the names matching the given @var{pattern}s from the symbol table.
 
 The @var{pattern} may contain the following special characters:
@@ -1213,18 +1205,18 @@ and uppercase alphabetic characters.
 
 For example, the command
 
 @example
 clear foo b*r
 @end example
 
 @noindent
-clears the name @code{foo} and all names that begin with the letter @code{b}
-and end with the letter @code{r}.
+clears the name @code{foo} and all names that begin with the letter @samp{b}
+and end with the letter @samp{r}.
 
 If @code{clear} is called without any arguments, all user-defined variables
 are cleared from the current workspace (i.e., local variables).  Any global
 variables present will no longer be visible in the current workspace, but they
 will continue to exist in the global workspace.  Functions are unaffected by
 this form of @code{clear}.
 
 The following options are available in both long and short form
@@ -1233,44 +1225,48 @@ The following options are available in b
 @item all, -all, -a
 Clear all local and global user-defined variables, and all functions from the
 symbol table.
 
 @item -exclusive, -x
 Clear variables that do @strong{not} match the following pattern.
 
 @item functions, -functions, -f
-Clear function names from the function symbol table.
+Clear function names from the function symbol table.  Persistent variables
+will be re-initialized to their default value unless the function has been
+locked in memory with @code{mlock}.
 
 @item global, -global, -g
 Clear global variable names.
 
 @item variables, -variables, -v
 Clear local variable names.
 
 @item classes, -classes, -c
 Clear the class structure table and all objects.
 
 @item -regexp, -r
 The @var{pattern} arguments are treated as regular expressions and any matches
 will be cleared.
 @end table
 
 With the exception of @option{-exclusive} and @option{-regexp}, all long
-options can be used without the dash as well.
+options can be used without the dash as well.  Note that, aside from
+@option{-exclusive}, only one other option may appear.  All options must
+appear before any patterns.
 
 Programming Note: The command @code{clear @var{name}} only clears the variable
 @var{name} when both a variable and a (shadowed) function named @var{name}
 are currently defined.  For example, suppose you have defined a function
 @code{foo}, and then hidden it by performing the assignment @code{foo = 2}.
 Executing the command @code{clear foo} once will clear the variable
 definition and restore the definition of @code{foo} as a function.
 Executing @code{clear foo} a second time will clear the function definition.
 
-@seealso{who, whos, exist}
+@seealso{who, whos, exist, mlock}
 @end deftypefn */)
 {
   octave::symbol_table& symtab = interp.get_symbol_table ();
 
   int argc = args.length () + 1;
 
   string_vector argv = args.make_argv ("clear");
 
@@ -1294,68 +1290,73 @@ Executing @code{clear foo} a second time
       bool have_dash_option = false;
 
       octave::symbol_scope scope = symtab.current_scope ();
 
       while (++idx < argc)
         {
           if (argv[idx] == "-all" || argv[idx] == "-a")
             {
-              CLEAR_OPTION_ERROR (have_dash_option && ! exclusive);
+              if (have_dash_option)
+                print_usage ();
 
               have_dash_option = true;
               clear_all = true;
             }
           else if (argv[idx] == "-exclusive" || argv[idx] == "-x")
             {
-              have_dash_option = true;
               exclusive = true;
             }
           else if (argv[idx] == "-functions" || argv[idx] == "-f")
             {
-              CLEAR_OPTION_ERROR (have_dash_option && ! exclusive);
+              if (have_dash_option)
+                print_usage ();
 
               have_dash_option = true;
               clear_functions = true;
             }
           else if (argv[idx] == "-global" || argv[idx] == "-g")
             {
-              CLEAR_OPTION_ERROR (have_dash_option && ! exclusive);
+              if (have_dash_option)
+                print_usage ();
 
               have_dash_option = true;
               clear_globals = true;
             }
           else if (argv[idx] == "-variables" || argv[idx] == "-v")
             {
-              CLEAR_OPTION_ERROR (have_dash_option && ! exclusive);
+              if (have_dash_option)
+                print_usage ();
 
               have_dash_option = true;
               clear_variables = true;
             }
           else if (argv[idx] == "-classes" || argv[idx] == "-c")
             {
-              CLEAR_OPTION_ERROR (have_dash_option && ! exclusive);
+              if (have_dash_option)
+                print_usage ();
 
               have_dash_option = true;
               clear_objects = true;
             }
           else if (argv[idx] == "-regexp" || argv[idx] == "-r")
             {
-              CLEAR_OPTION_ERROR (have_dash_option && ! exclusive);
+              if (have_dash_option)
+                print_usage ();
 
               have_dash_option = true;
               have_regexp = true;
             }
           else
             break;
         }
 
       if (idx <= argc)
         {
-          if (! have_dash_option)
+          if (! have_dash_option && ! exclusive)
             do_matlab_compatible_clear (symtab, argv, argc, idx);
           else
             {
               if (clear_all)
                 {
                   maybe_warn_exclusive (exclusive);
 
                   if (++idx < argc)
@@ -1393,23 +1394,32 @@ Executing @code{clear foo} a second time
             }
         }
     }
 
   return ovl ();
 }
 
 /*
+## This test must be wrapped in its own function or the 'clear' command will
+## break the %!test environment.
+%!function __test_clear_no_args__ ()
+%!  global x
+%!  x = 3;
+%!  clear
+%!  assert (! exist ("x", "var"));  # x is not in the current workspace anymore
+%!  global x                        # but still lives in the global workspace
+%!  assert (exist ("x", "var"));
+%!endfunction
+
 %!test
-%! global x
-%! x = 3;
-%! clear
-%! assert (! exist ("x", "var"));  # x is not in the current workspace anymore
-%! global x                        # but still lives in the global workspace
-%! assert (exist ("x", "var"));
+%! __test_clear_no_args__ ();
+
+## Test that multiple options cannot be given
+%!error clear -f -g
 */
 
 static std::string Vmissing_function_hook = "__unimplemented__";
 
 DEFUN (missing_function_hook, args, nargout,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {@var{val} =} missing_function_hook ()
 @deftypefnx {} {@var{old_val} =} missing_function_hook (@var{new_val})
