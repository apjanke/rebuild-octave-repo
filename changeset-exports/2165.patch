# HG changeset patch
# User jwe
# Date 831994145 0
#      Mon May 13 13:29:05 1996 +0000
# Node ID 83d91aa3759bacf4a56a3253a6031a1259f4f92f
# Parent  269db73069800323cef43d5f87ee981980aaa321
[project @ 1996-05-13 13:28:10 by jwe]

diff --git a/src/parse.h b/src/parse.h
--- a/src/parse.h
+++ b/src/parse.h
@@ -46,15 +46,17 @@ extern int yydebug;
 extern int input_line_number;
 
 // The column of the current token.
 extern int current_input_column;
 
 // Buffer for help text snagged from function files.
 extern string help_buf;
 
+extern void symbols_of_parse (void);
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/pr-output.cc b/src/pr-output.cc
--- a/src/pr-output.cc
+++ b/src/pr-output.cc
@@ -38,27 +38,44 @@ Software Foundation, 59 Temple Place - S
 #include "float-fmt.h"
 #include "oct-cmplx.h"
 #include "oct-math.h"
 #include "oct-term.h"
 #include "str-vec.h"
 
 #include "defun.h"
 #include "error.h"
+#include "gripes.h"
 #include "help.h"
 #include "mappers.h"
 #include "oct-obj.h"
 #include "pager.h"
 #include "pr-output.h"
 #include "pt-const.h"
 #include "sysdep.h"
 #include "user-prefs.h"
 #include "utils.h"
 #include "variables.h"
 
+// The maximum field width for a number printed by the default output
+// routines.
+static int Voutput_max_field_width;
+
+// The precision of the numbers printed by the default output
+// routines.
+static int Voutput_precision;
+
+// TRUE means that the dimensions of empty matrices should be printed
+// like this: x = [](2x0).
+static bool Vprint_empty_dimensions;
+
+// TRUE means that the rows of big matrices should be split into
+// smaller slices that fit on the screen.
+static bool Vsplit_long_rows;
+
 // Current format string for real numbers and the real part of complex
 // numbers.
 static char *curr_real_fmt = 0;
 
 // Current format string for the imaginary part of complex numbers.
 static char *curr_imag_fmt = 0;
 
 // Nonzero means don't do any fancy formatting.
@@ -204,17 +221,17 @@ pr_min_internal (const Matrix& m)
 // functions,..
 
 static void
 set_real_format (int sign, int digits, int inf_or_nan, int nan_or_int,
 		 int &fw)
 {
   static char fmt_buf[128];
 
-  int prec = user_pref.output_precision;
+  int prec = Voutput_precision;
 
   int ld, rd;
 
   if (bank_format)
     {
       fw = digits < 0 ? 4 : digits + 3;
       if (inf_or_nan && fw < 3)
 	fw = 3;
@@ -256,17 +273,17 @@ set_real_format (int sign, int digits, i
 
       fw = ld + 1 + rd;
       if (inf_or_nan && fw < 3)
 	fw = 3;
       fw += sign;
     }
 
   if (! (bank_format || hex_format || bit_format)
-      && (fw > user_pref.output_max_field_width || print_e))
+      && (fw > Voutput_max_field_width || print_e))
     {
       int exp_field = 4;
       if (digits > 100)
 	exp_field++;
 
       fw = 2 + prec + exp_field;
       if (inf_or_nan && fw < 3)
 	fw = 3;
@@ -316,17 +333,17 @@ set_format (double d)
 }
 
 static void
 set_real_matrix_format (int sign, int x_max, int x_min,
 			int inf_or_nan, int int_or_inf_or_nan, int& fw)
 {
   static char fmt_buf[128];
 
-  int prec = user_pref.output_precision;
+  int prec = Voutput_precision;
 
   int ld, rd;
 
   if (bank_format)
     {
       int digits = x_max > x_min ? x_max : x_min;
       fw = digits <= 0 ? 4 : digits + 3;
       if (inf_or_nan && fw < 3)
@@ -388,17 +405,17 @@ set_real_matrix_format (int sign, int x_
 
       fw = ld + 1 + rd;
       if (inf_or_nan && fw < 3)
 	fw = 3;
       fw += sign;
     }
 
   if (! (bank_format || hex_format || bit_format)
-      && (fw > user_pref.output_max_field_width || print_e))
+      && (fw > Voutput_max_field_width || print_e))
     {
       int exp_field = 4;
       if (x_max > 100 || x_min > 100)
 	exp_field++;
 
       fw = 2 + prec + exp_field;
       if (inf_or_nan && fw < 3)
 	fw = 3;
@@ -452,17 +469,17 @@ set_format (const Matrix& m)
 
 static void
 set_complex_format (int sign, int x_max, int x_min, int r_x,
 		    int inf_or_nan, int int_only, int& r_fw, int& i_fw)
 {
   static char r_fmt_buf[128];
   static char i_fmt_buf[128];
 
-  int prec = user_pref.output_precision;
+  int prec = Voutput_precision;
 
   int ld, rd;
 
   if (bank_format)
     {
       int digits = r_x;
       i_fw = 0;
       r_fw = digits <= 0 ? 4 : digits + 3;
@@ -527,17 +544,17 @@ set_complex_format (int sign, int x_max,
 
       i_fw = r_fw = ld + 1 + rd;
       if (inf_or_nan && i_fw < 3)
 	i_fw = r_fw = 3;
       r_fw += sign;
     }
 
   if (! (bank_format || hex_format || bit_format)
-      && (r_fw > user_pref.output_max_field_width || print_e))
+      && (r_fw > Voutput_max_field_width || print_e))
     {
       int exp_field = 4;
       if (x_max > 100 || x_min > 100)
 	exp_field++;
 
       i_fw = r_fw = 1 + prec + exp_field;
       if (inf_or_nan && i_fw < 3)
 	i_fw = r_fw = 3;
@@ -615,17 +632,17 @@ set_format (const Complex& c)
 static void
 set_complex_matrix_format (int sign, int x_max, int x_min,
 			   int r_x_max, int r_x_min, int inf_or_nan,
 			   int int_or_inf_or_nan, int& r_fw, int& i_fw)
 {
   static char r_fmt_buf[128];
   static char i_fmt_buf[128];
 
-  int prec = user_pref.output_precision;
+  int prec = Voutput_precision;
 
   int ld, rd;
 
   if (bank_format)
     {
       int digits = r_x_max > r_x_min ? r_x_max : r_x_min;
       i_fw = 0;
       r_fw = digits <= 0 ? 4 : digits + 3;
@@ -690,17 +707,17 @@ set_complex_matrix_format (int sign, int
 
       i_fw = r_fw = ld + 1 + rd;
       if (inf_or_nan && i_fw < 3)
 	i_fw = r_fw = 3;
       r_fw += sign;
     }
 
   if (! (bank_format || hex_format || bit_format)
-      && (r_fw > user_pref.output_max_field_width || print_e))
+      && (r_fw > Voutput_max_field_width || print_e))
     {
       int exp_field = 4;
       if (x_max > 100 || x_min > 100)
 	exp_field++;
 
       i_fw = r_fw = 1 + prec + exp_field;
       if (inf_or_nan && i_fw < 3)
 	i_fw = r_fw = 3;
@@ -787,17 +804,17 @@ set_format (const ComplexMatrix& cm)
   set_format (cm, r_fw, i_fw);
 }
 
 static void
 set_range_format (int sign, int x_max, int x_min, int all_ints, int& fw)
 {
   static char fmt_buf[128];
 
-  int prec = user_pref.output_precision;
+  int prec = Voutput_precision;
 
   int ld, rd;
 
   if (bank_format)
     {
       int digits = x_max > x_min ? x_max : x_min;
       fw = sign + digits < 0 ? 4 : digits + 3;
       rd = 2;
@@ -850,17 +867,17 @@ set_range_format (int sign, int x_max, i
 
       ld = ld_max > ld_min ? ld_max : ld_min;
       rd = rd_max > rd_min ? rd_max : rd_min;
 
       fw = sign + ld + 1 + rd;
     }
 
   if (! (bank_format || hex_format || bit_format)
-      && (fw > user_pref.output_max_field_width || print_e))
+      && (fw > Voutput_max_field_width || print_e))
     {
       int exp_field = 4;
       if (x_max > 100 || x_min > 100)
 	exp_field++;
 
       fw = sign + 2 + prec + exp_field;
 
       if (print_big_e)
@@ -1098,27 +1115,27 @@ print_empty_matrix (ostream& os, int nr,
       if (nr == 0 && nc == 0)
 	os << "[]";
       else
 	os << "zeros (" << nr << ", " << nc << ")";
     }
   else
     {
       os << "[]";
-      if (user_pref.print_empty_dimensions)
+      if (Vprint_empty_dimensions)
 	os << "(" << nr << "x" << nc << ")";
       os << "\n";
     }
 }
 
 static void
 pr_col_num_header (ostream& os, int total_width, int max_width,
 		   int lim, int col, int extra_indent)
 {
-  if (total_width > max_width && user_pref.split_long_rows)
+  if (total_width > max_width && Vsplit_long_rows)
     {
       if (col != 0 && ! compact_format)
 	os << "\n";
 
       int num_cols = lim - col;
 
       os.form ("%*s", extra_indent, "");
 
@@ -1208,17 +1225,17 @@ octave_print_internal (ostream& os, cons
 
 	  if (pr_as_read_syntax)
 	    os << "]";
 
 	  return;
 	}
 
       int inc = nc;
-      if (total_width > max_width && user_pref.split_long_rows)
+      if (total_width > max_width && Vsplit_long_rows)
 	{
 	  inc = max_width / column_width;
 	  if (inc == 0)
 	    inc++;
 	}
 
       if (pr_as_read_syntax)
 	{
@@ -1361,17 +1378,17 @@ octave_print_internal (ostream& os, cons
 
 	  if (pr_as_read_syntax)
 	    os << "]";
 
 	  return;
 	}
 
       int inc = nc;
-      if (total_width > max_width && user_pref.split_long_rows)
+      if (total_width > max_width && Vsplit_long_rows)
 	{
 	  inc = max_width / column_width;
 	  if (inc == 0)
 	    inc++;
 	}
 
       if (pr_as_read_syntax)
 	{
@@ -1492,17 +1509,17 @@ octave_print_internal (ostream& os, cons
 
 	  if (free_format)
 	    {
 	      os << r;
 	      return;
 	    }
 
 	  int inc = num_elem;
-	  if (total_width > max_width && user_pref.split_long_rows)
+	  if (total_width > max_width && Vsplit_long_rows)
 	    {
 	      inc = max_width / column_width;
 	      if (inc == 0)
 		inc++;
 	    }
 
 	  max_width -= extra_indent;
 
@@ -1747,13 +1764,81 @@ set output formatting style")
   if (error_state)
     return retval;
 
   set_format_style (argc, argv);
 
   return retval;
 }
 
+static int
+output_max_field_width (void)
+{
+  double val;
+  if (builtin_real_scalar_variable ("output_max_field_width", val)
+      && ! xisnan (val))
+    {
+      int ival = NINT (val);
+      if (ival > 0 && (double) ival == val)
+	{
+	  Voutput_max_field_width = ival;
+	  return 0;
+	}
+    }
+  gripe_invalid_value_specified ("output_max_field_width");
+  return -1;
+}
+
+static int
+output_precision (void)
+{
+  double val;
+  if (builtin_real_scalar_variable ("output_precision", val)
+      && ! xisnan (val))
+    {
+      int ival = NINT (val);
+      if (ival >= 0 && (double) ival == val)
+	{
+	  Voutput_precision = ival;
+	  return 0;
+	}
+    }
+  gripe_invalid_value_specified ("output_precision");
+  return -1;
+}
+
+static int
+print_empty_dimensions (void)
+{
+  Vprint_empty_dimensions = check_preference ("print_empty_dimensions");
+
+  return 0;
+}
+
+static int
+split_long_rows (void)
+{
+  Vsplit_long_rows = check_preference ("split_long_rows");
+
+  return 0;
+}
+
+void
+symbols_of_pr_output (void)
+{
+  DEFVAR (output_max_field_width, 10.0, 0, output_max_field_width,
+    "maximum width of an output field for numeric output");
+
+  DEFVAR (output_precision, 5.0, 0, output_precision,
+    "number of significant figures to display for numeric output");
+
+  DEFVAR (print_empty_dimensions, 1.0, 0, print_empty_dimensions,
+    "also print dimensions of empty matrices");
+
+  DEFVAR (split_long_rows, 1.0, 0, split_long_rows,
+    "split long matrix rows instead of wrapping");
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/pr-output.h b/src/pr-output.h
--- a/src/pr-output.h
+++ b/src/pr-output.h
@@ -56,15 +56,17 @@ extern void octave_print_internal (ostre
 				   int extra_indent = 0);
 
 // XXX FIXME XXX -- these should probably be somewhere else.
 
 extern int any_element_is_inf_or_nan (const Matrix& a);
 
 extern int any_element_is_inf_or_nan (const ComplexMatrix& a);
 
+extern void symbols_of_pr_output (void);
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
