# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1420058293 18000
#      Wed Dec 31 15:38:13 2014 -0500
# Node ID 2a16dac2176f758b75dd614543b0d5f7c11e7345
# Parent  bf27e21f0bfb2fdb4f0c1d6b3748caaafa7dd501
fix audioplayer tests

* audiodevinfo.cc, @audioplayer/audioplayer.m,
@audiorecorder/audiorecorder.m: Fix tests.

diff --git a/libinterp/dldfcn/audiodevinfo.cc b/libinterp/dldfcn/audiodevinfo.cc
--- a/libinterp/dldfcn/audiodevinfo.cc
+++ b/libinterp/dldfcn/audiodevinfo.cc
@@ -374,40 +374,40 @@ devices.\n\
   error ("portaudio not found on your system and thus audio functionality is not present");
 #endif
   return retval;
 }
 
 /*
 %!test
 %! devinfo = audiodevinfo;
-%! assert(rows(devinfo.('input')) == 1);
-%! assert(rows(devinfo.('output')) == 1);
+%! assert (rows (devinfo.input), 1);
+%! assert (rows (devinfo.output), 1);
 
 %!test
 %! devinfo = audiodevinfo;
-%! nout = audiodevinfo(0);
-%! nin = audiodevinfo(1);
-%! assert(columns(devinfo.('output')) == nout);
-%! assert(columns(devinfo.('input')) == nin);
+%! nout = audiodevinfo (0);
+%! nin = audiodevinfo (1);
+%! assert (columns (devinfo.output), nout);
+%! assert (columns (devinfo.input), nin);
 
 %!test
 %! devinfo = audiodevinfo;
-%! nout = audiodevinfo(0);
-%! nin = audiodevinfo(1);
-%! for i=1:nout,
-%!   assert(devinfo.('output')(i).('Name') == audiodevinfo(0, devinfo.('output')(i).('ID')))
-%! end
+%! nout = audiodevinfo (0);
+%! nin = audiodevinfo (1);
+%! for i = 1:nout,
+%!   assert (devinfo.output(i).Name, audiodevinfo (0, devinfo.output(i).ID))
+%! endfor
 %! for i=1:nin,
-%!   assert(devinfo.('input')(i).('Name') == audiodevinfo(0, devinfo.('input')(i).('ID')))
-%! end
+%!   assert (devinfo.input(i).Name, audiodevinfo (1, devinfo.input(i).ID))
+%! endfor
 
 %!test
 %! devinfo = audiodevinfo;
-%! nout = audiodevinfo(0);
-%! nin = audiodevinfo(1);
-%! for i=1:nout,
-%!   assert(devinfo.('output')(i).('ID') == audiodevinfo(0, devinfo.('output')(i).('Name')))
-%! end
-%! for i=1:nin,
-%!   assert(devinfo.('input')(i).('ID') == audiodevinfo(0, devinfo.('input')(i).('Name')))
-%! end
+%! nout = audiodevinfo (0);
+%! nin = audiodevinfo (1);
+%! for i = 1:nout,
+%!   assert (devinfo.output(i).ID, audiodevinfo (0, devinfo.output(i).Name))
+%! endfor
+%! for i = 1:nin,
+%!   assert (devinfo.input(i).ID, audiodevinfo (1, devinfo.input(i).Name))
+%! endfor
 */
diff --git a/scripts/audio/@audioplayer/audioplayer.m b/scripts/audio/@audioplayer/audioplayer.m
--- a/scripts/audio/@audioplayer/audioplayer.m
+++ b/scripts/audio/@audioplayer/audioplayer.m
@@ -96,100 +96,100 @@ function player = audioplayer (varargin)
       varargin{1} = str2func (varargin{1});
     endif
     player.player = __player_audioplayer__ (varargin{:});
     player = class (player, "audioplayer");
   endif
 endfunction
 
 %!test
-%!  mono = randn (1, 44100) - 0.5;
-%!  stereo = randn (2, 44100) - 0.5;
-%!  fs = 44100;
-%!  player1 = audioplayer (mono, fs);
-%!  player2 = audioplayer (stereo, fs);
-%!  assert (player1.NumberOfChannels, 1);
-%!  assert (player2.NumberOfChannels, 2);
-%!  assert (player1.SampleRate, 44100);
-%!  assert (player2.SampleRate, 44100);
-%!  assert (player1.TotalSamples, 44100);
-%!  assert (player2.TotalSamples, 44100);
-%!  playblocking (player1);
-%!  playblocking (player2);
+%! mono = randn (1, 44100) - 0.5;
+%! stereo = randn (2, 44100) - 0.5;
+%! fs = 44100;
+%! player1 = audioplayer (mono, fs);
+%! player2 = audioplayer (stereo, fs);
+%! assert (player1.NumberOfChannels, 1);
+%! assert (player2.NumberOfChannels, 2);
+%! assert (player1.SampleRate, 44100);
+%! assert (player2.SampleRate, 44100);
+%! assert (player1.TotalSamples, 44100);
+%! assert (player2.TotalSamples, 44100);
+%! playblocking (player1);
+%! playblocking (player2);
 
 %!test
-%!  audio = randn (2, 88200) - 0.5;
-%!  fs = 44100;
-%!  player = audioplayer (audio, fs);
-%!  assert (!isplaying (player));
-%!  play (player);
-%!  assert (isplaying (player));
-%!  sleep (1);
-%!  pause (player);
-%!  assert (!isplaying (player));
-%!  sleep (1);
-%!  resume (player);
-%!  assert (isplaying (player));
-%!  sleep (1);
+%! audio = randn (2, 88200) - 0.5;
+%! fs = 44100;
+%! player = audioplayer (audio, fs);
+%! assert (!isplaying (player));
+%! play (player);
+%! assert (isplaying (player));
+%! sleep (1);
+%! pause (player);
+%! assert (!isplaying (player));
+%! sleep (1);
+%! resume (player);
+%! assert (isplaying (player));
+%! sleep (1);
 
 %!test
-%!  audio = randn (2, 88200) - 0.5;
-%!  fs = 44100;
-%!  player = audioplayer (audio, fs);
-%!  assert (!isplaying (player));
-%!  play (player);
-%!  assert (isplaying (player));
-%!  sleep (1);
-%!  stop (player);
-%!  sleep (1);
-%!  assert (!isplaying (player));
-%!  assert (player.CurrentSample, 0);
+%! audio = randn (2, 88200) - 0.5;
+%! fs = 44100;
+%! player = audioplayer (audio, fs);
+%! assert (!isplaying (player));
+%! play (player);
+%! assert (isplaying (player));
+%! sleep (1);
+%! stop (player);
+%! sleep (1);
+%! assert (!isplaying (player));
+%! assert (player.CurrentSample, 0);
 
 %!test
-%!  audio = randn (2, 44100) - 0.5;
-%!  fs = 44100;
-%!  player = audioplayer (audio, fs);
-%!  set (player, {"SampleRate", "Tag", "UserData"}, {8000, "tag", [1, 2; 3, 4]});
-%!  assert (player.SampleRate, 8000);
-%!  assert (player.Tag, "tag");
-%!  assert (player.UserData, [1, 2; 3, 4]);
+%! audio = randn (2, 44100) - 0.5;
+%! fs = 44100;
+%! player = audioplayer (audio, fs);
+%! set (player, {"SampleRate", "Tag", "UserData"}, {8000, "tag", [1, 2; 3, 4]});
+%! assert (player.SampleRate, 8000);
+%! assert (player.Tag, "tag");
+%! assert (player.UserData, [1, 2; 3, 4]);
 
 %!test
-%!  audio = randn (2, 44100) - 0.5;
-%!  fs = 44100;
-%!  player = audioplayer (audio, fs);
-%!  settable = set (player);
-%!  settable.SampleRate = 8000;
-%!  settable.Tag = "tag";
-%!  settable.UserData = [1, 2; 3, 4];
-%!  set (player, settable);
-%!  assert (player.SampleRate, 8000);
-%!  assert (player.Tag, "tag");
-%!  assert (player.UserData, [1, 2; 3, 4]);
+%! audio = randn (2, 44100) - 0.5;
+%! fs = 44100;
+%! player = audioplayer (audio, fs);
+%! settable = set (player);
+%! settable.SampleRate = 8000;
+%! settable.Tag = "tag";
+%! settable.UserData = [1, 2; 3, 4];
+%! set (player, settable);
+%! assert (player.SampleRate, 8000);
+%! assert (player.Tag, "tag");
+%! assert (player.UserData, [1, 2; 3, 4]);
 
 %!test
-%!  audio = randn (2, 44100) - 0.5;
-%!  fs = 44100;
-%!  player = audioplayer (audio, fs);
-%!  player.SampleRate = 8000;
-%!  player.Tag = "tag";
-%!  player.UserData = [1, 2; 3, 4];
-%!  properties = get (player, {"SampleRate", "Tag", "UserData"});
-%!  assert (properties, {8000, "tag", [1, 2; 3, 4]});
+%! audio = randn (2, 44100) - 0.5;
+%! fs = 44100;
+%! player = audioplayer (audio, fs);
+%! player.SampleRate = 8000;
+%! player.Tag = "tag";
+%! player.UserData = [1, 2; 3, 4];
+%! properties = get (player, {"SampleRate", "Tag", "UserData"});
+%! assert (properties, {8000, "tag", [1, 2; 3, 4]});
 
-%!function [ sound, status ] = callback (samples)
+%!function [sound, status] = callback (samples)
 %!  sound = rand (samples, 2) - 0.5;
 %!  status = 0;
 %!endfunction
 
 %!test
-%!  player = audioplayer (@callback, 44100);
-%!  play (player);
-%!  sleep (2);
-%!  stop (player);
-%!  assert (1);
+%! player = audioplayer (@callback, 44100);
+%! play (player);
+%! sleep (2);
+%! stop (player);
+%! assert (1);
 
 %!test
-%!  player = audioplayer ("callback", 44100, 16);
-%!  play (player);
-%!  sleep (2);
-%!  stop (player);
-%!  assert (1);
+%! player = audioplayer ("callback", 44100, 16);
+%! play (player);
+%! sleep (2);
+%! stop (player);
+%! assert (1);
diff --git a/scripts/audio/@audiorecorder/audiorecorder.m b/scripts/audio/@audiorecorder/audiorecorder.m
--- a/scripts/audio/@audiorecorder/audiorecorder.m
+++ b/scripts/audio/@audiorecorder/audiorecorder.m
@@ -36,94 +36,94 @@ function recorder = audiorecorder (varar
   if (nargin > 0 && ischar (varargin{1}))
     varargin{1} = str2func (varargin{1});
   endif
   recorder.recorder = __recorder_audiorecorder__ (varargin{:});
   recorder = class (recorder, "audiorecorder");
 endfunction
 
 %!test
-%!  recorder = audiorecorder (44100, 16, 2);
-%!  recordblocking (recorder, 1);
-%!  data = getaudiodata (recorder, "int16");
-%!  assert (strcmp (class (data), "int16"));
-%!  data = getaudiodata (recorder, "int8");
-%!  assert (strcmp (class (data), "int8"));
-%!  data = getaudiodata (recorder, "uint8");
-%!  assert (strcmp (class (data), "uint8"));
-%!  assert (size (data)(1), recorder.TotalSamples);
-%!  assert (size (data)(2), 2);
-%!  assert (size (data)(1) != 0);
+%! recorder = audiorecorder (44100, 16, 2);
+%! recordblocking (recorder, 1);
+%! data = getaudiodata (recorder, "int16");
+%! assert (strcmp (class (data), "int16"));
+%! data = getaudiodata (recorder, "int8");
+%! assert (strcmp (class (data), "int8"));
+%! data = getaudiodata (recorder, "uint8");
+%! assert (strcmp (class (data), "uint8"));
+%! assert (size (data)(1), recorder.TotalSamples);
+%! assert (size (data)(2), 2);
+%! assert (size (data)(1) != 0);
 
 %!test
-%!  recorder = audiorecorder (44100, 16, 2);
-%!  record (recorder, 1)
-%!  sleep (2);
-%!  record (recorder, 1);
-%!  sleep (2);
-%!  data = getaudiodata (recorder);
-%!  assert (size (data)(1) < 44100 * 2);
+%! recorder = audiorecorder (44100, 16, 2);
+%! record (recorder, 1)
+%! sleep (2);
+%! record (recorder, 1);
+%! sleep (2);
+%! data = getaudiodata (recorder);
+%! assert (size (data)(1) < 44100 * 2);
 
 %!test
-%!  recorder = audiorecorder (44100, 16, 2);
-%!  record (recorder, 1);
-%!  sleep (2);
-%!  player1 = audioplayer (recorder);
-%!  player2 = getplayer (recorder);
-%!  play (player1);
-%!  sleep (2);
-%!  play (player2);
-%!  sleep (2);
-%!  assert (player1.TotalSamples, recorder.TotalSamples);
-%!  assert (player2.TotalSamples, recorder.TotalSamples);
+%! recorder = audiorecorder (44100, 16, 2);
+%! record (recorder, 1);
+%! sleep (2);
+%! player1 = audioplayer (recorder);
+%! player2 = getplayer (recorder);
+%! play (player1);
+%! sleep (2);
+%! play (player2);
+%! sleep (2);
+%! assert (player1.TotalSamples, recorder.TotalSamples);
+%! assert (player2.TotalSamples, recorder.TotalSamples);
 
 %!test
-%!  recorder = audiorecorder;
-%!  set (recorder, {"SampleRate", "Tag", "UserData"}, {8000, "tag", [1, 2; 3, 4]});
-%!  assert (recorder.SampleRate, 8000);
-%!  assert (recorder.Tag, "tag");
-%!  assert (recorder.UserData, [1, 2; 3, 4]);
+%! recorder = audiorecorder;
+%! set (recorder, {"SampleRate", "Tag", "UserData"}, {8000, "tag", [1, 2; 3, 4]});
+%! assert (recorder.SampleRate, 8000);
+%! assert (recorder.Tag, "tag");
+%! assert (recorder.UserData, [1, 2; 3, 4]);
 
 %!test
-%!  recorder = audiorecorder;
-%!  settable = set (recorder);
-%!  settable.SampleRate = 8000;
-%!  settable.Tag = "tag";
-%!  settable.UserData = [1, 2; 3, 4];
-%!  set (recorder, settable);
-%!  assert (recorder.SampleRate, 8000);
-%!  assert (recorder.Tag, "tag");
-%!  assert (recorder.UserData, [1, 2; 3, 4]);
+%! recorder = audiorecorder;
+%! settable = set (recorder);
+%! settable.SampleRate = 8000;
+%! settable.Tag = "tag";
+%! settable.UserData = [1, 2; 3, 4];
+%! set (recorder, settable);
+%! assert (recorder.SampleRate, 8000);
+%! assert (recorder.Tag, "tag");
+%! assert (recorder.UserData, [1, 2; 3, 4]);
 
 %!test
-%!  recorder = audiorecorder;
-%!  recorder.SampleRate = 8000;
-%!  recorder.Tag = "tag";
-%!  recorder.UserData = [1, 2; 3, 4];
-%!  properties = get (recorder, {"SampleRate", "Tag", "UserData"});
-%!  assert (properties, {8000, "tag", [1, 2; 3, 4]});
+%! recorder = audiorecorder;
+%! recorder.SampleRate = 8000;
+%! recorder.Tag = "tag";
+%! recorder.UserData = [1, 2; 3, 4];
+%! properties = get (recorder, {"SampleRate", "Tag", "UserData"});
+%! assert (properties, {8000, "tag", [1, 2; 3, 4]});
 
 #%!function status = callback_record (sound)
 #%!  fid = fopen ("record.txt", "at");
 #%!  for index = 1:rows(sound)
 #%!    fprintf (fid, "%.4f, %.4f\n", sound(index, 1), sound(index, 2));
 #%!  endfor
 #%!  fclose (fid);
 #%!  status = 0;
 #%!endfunction
 
 #%!test
-#%!  recorder = audiorecorder (@callback_record, 44100);
-#%!  unlink ("record.txt")
-#%!  record (recorder);
-#%!  sleep (2);
-#%!  stop (player);
-#%!  s = stat ("record.txt");
-#%!  assert (s.size > 0);
+#%! recorder = audiorecorder (@callback_record, 44100);
+#%! unlink ("record.txt")
+#%! record (recorder);
+#%! sleep (2);
+#%! stop (player);
+#%! s = stat ("record.txt");
+#%! assert (s.size > 0);
 
 #%!test
-#%!  recorder = audiorecorder (@callback_record, 44100);
-#%!  unlink ("record.txt")
-#%!  record (recorder);
-#%!  sleep (2);
-#%!  stop (recorder);
-#%!  s = stat ("record.txt");
-#%!  assert (s.size > 0);
+#%! recorder = audiorecorder (@callback_record, 44100);
+#%! unlink ("record.txt")
+#%! record (recorder);
+#%! sleep (2);
+#%! stop (recorder);
+#%! s = stat ("record.txt");
+#%! assert (s.size > 0);
