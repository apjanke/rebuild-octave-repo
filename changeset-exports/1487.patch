# HG changeset patch
# User jwe
# Date 812109485 0
#      Tue Sep 26 09:58:05 1995 +0000
# Node ID eaf4f68d3757b37bc96d66bb51e3fcbb135059c4
# Parent  232dbc2460c086392141315b8e72b2363364f997
[project @ 1995-09-26 09:58:02 by jwe]

diff --git a/src/pt-const.h b/src/pt-const.h
--- a/src/pt-const.h
+++ b/src/pt-const.h
@@ -134,25 +134,25 @@ public:
     { rep = new tree_constant_rep (base, limit, inc); rep->count = 1; }
 
   tree_constant (const Range& r) : tree_fvc ()
     { rep = new tree_constant_rep (r); rep->count = 1; }
 
   tree_constant (const Octave_map& m) : tree_fvc ()
     { rep = new tree_constant_rep (m); rep->count = 1; }
 
-  tree_constant (tree_constant::magic_colon t) : tree_fvc ()
+  tree_constant (tree_constant::magic_colon) : tree_fvc ()
     {
       tree_constant_rep::constant_type tmp;
       tmp = tree_constant_rep::magic_colon;
       rep = new tree_constant_rep (tmp);
       rep->count = 1;
     }
 
-  tree_constant (tree_constant::all_va_args t) : tree_fvc ()
+  tree_constant (tree_constant::all_va_args) : tree_fvc ()
     {
       tree_constant_rep::constant_type tmp;
       tmp = tree_constant_rep::all_va_args;
       rep = new tree_constant_rep (tmp);
       rep->count = 1;
     }
 
 // Copy constructor.
@@ -301,22 +301,22 @@ public:
   Octave_map map_value (void) const;
 
   tree_constant lookup_map_element (const char *ref, int insert = 0,
 				    int silent = 0);
 
   tree_constant lookup_map_element (SLList<char*>& list,
 				    int insert = 0, int silent = 0);
 
-  ColumnVector vector_value (int force_string_conversion = 0,
-			     int force_vector_conversion = 0) const 
+  ColumnVector vector_value (int /* force_string_conversion */ = 0,
+			     int /* force_vector_conversion */ = 0) const 
     { return rep->vector_value (); }
 
-  ComplexColumnVector complex_vector_value (int force_string_conv = 0,
-					    int force_vec_conv = 0) const
+  ComplexColumnVector complex_vector_value (int /* force_string_conv */ = 0,
+					    int /* force_vec_conv */ = 0) const
     { return rep->complex_vector_value (); }
 
 // Binary and unary operations.
 
   friend tree_constant do_binary_op (tree_constant& a, tree_constant& b,
 				     tree_expression::type t);
 
   friend tree_constant do_unary_op (tree_constant& a,
@@ -358,17 +358,17 @@ public:
 	rep->maybe_mutate ();
 
       if (print_result)
 	print ();
 
       return *this;
     }
 
-  Octave_object eval (int print, int nargout, const Octave_object& args)
+  Octave_object eval (int print, int /* nargout */, const Octave_object& args)
     {
       Octave_object retval;
 
 // XXX FIXME XXX -- make it safe to call do_index() with
 // args.length () == 0
 
       if (args.length () > 0)
 	retval(0) = rep->do_index (args);
diff --git a/src/pt-exp-base.h b/src/pt-exp-base.h
--- a/src/pt-exp-base.h
+++ b/src/pt-exp-base.h
@@ -227,17 +227,17 @@ public:
       }
 
   ~tree_oct_obj (void) { }
 
   tree_constant eval (int print);
 
   Octave_object eval (int print, int nargout, const Octave_object& args);
 
-  void print_code (ostream& os) { }
+  void print_code (ostream&) { }
 
 private:
   Octave_object values;
 };
 
 // A base class for objects that can be evaluated with argument lists.
 
 class
@@ -270,18 +270,18 @@ public:
     { return 0; }
 
   virtual time_t time_parsed (void)
     { panic_impossible (); return 0; }
 
   virtual int is_system_fcn_file (void) const
     { return 0; }
 
-  virtual int save (ostream& os, int mark_as_global = 0,
-		    int precision = 17)
+  virtual int save (ostream& /* os */, int /* mark_as_global */ = 0,
+		    int /* precision */ = 17)
     { panic_impossible (); return 0; }
 };
 
 // Symbols from the symbol table.
 
 class
 tree_identifier : public tree_fvc
 {
