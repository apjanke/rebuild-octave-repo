# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1544593834 18000
#      Wed Dec 12 00:50:34 2018 -0500
# Node ID fc7b842daca18cbafcb7ff7ea1019c16db22926e
# Parent  b964092ad9f81bc3b303ade9d16605f888a72f3c
use inputname function instead of argn automatic variable

* assert.m, test.m: Use inputname function instead of argn automatic
variable to get function argument names.

diff --git a/scripts/testfun/assert.m b/scripts/testfun/assert.m
--- a/scripts/testfun/assert.m
+++ b/scripts/testfun/assert.m
@@ -83,17 +83,17 @@ function assert (cond, varargin)
       errmsg = "";
     endif
 
     if (nargin == 1 || (nargin > 1 && islogical (cond) && ischar (varargin{1})))
       if ((! isnumeric (cond) && ! islogical (cond))
           || isempty (cond) || ! all (cond(:)))
         if (nargin == 1)
           ## Perhaps, say which elements failed?
-          argin = ["(" strjoin(cellstr (argn), ",") ")"];
+          argin = ["(" inputname(1) ")"];
           error ("assert %s failed", argin);
         else
           error (varargin{:});
         endif
       endif
     else
       expected = varargin{1};
       if (nargin < 3)
@@ -396,17 +396,21 @@ function assert (cond, varargin)
             endif
           endif
         endif
 
       endif
 
       ## Print any errors
       if (! isempty (err.index))
-        argin = ["(" strjoin(cellstr (argn), ",") ")"];
+        arg_names = cell (nargin, 1);
+        for i = 1:nargin
+          arg_names{i} = inputname (i);
+        endfor
+        argin = ["(" strjoin(arg_names, ",") ")"];
         if (! isempty (errmsg))
           errmsg = [errmsg "\n"];
         endif
         errmsg = [errmsg, pprint(argin, err)];
       endif
 
     endif
 
diff --git a/scripts/testfun/test.m b/scripts/testfun/test.m
--- a/scripts/testfun/test.m
+++ b/scripts/testfun/test.m
@@ -810,17 +810,17 @@ function [__n, __nmax, __nxfail, __nbug,
   endif
 
 endfunction
 
 
 ## Create structure with fieldnames the name of the input variables.
 function s = var2struct (varargin)
   for i = 1:nargin
-    s.(deblank (argn(i,:))) = varargin{i};
+    s.(inputname (i)) = varargin{i};
   endfor
 endfunction
 
 ## Find [start,end] of fn in 'function [a,b] = fn'.
 function pos = function_name (def)
 
   pos = [];
 
