# HG changeset patch
# User Rik <rik@octave.org>
# Date 1545073133 28800
#      Mon Dec 17 10:58:53 2018 -0800
# Node ID 339db43aa056187aec5807c69ae222cc62d83b7e
# Parent  e603f555e2d7d34764c3a12fe354ca3480992ce4
movfun.m: Implement "discard" option for "Endpoints" property for Matlab compatibility.

* movfun.m: Add new documentation for "discard" option.  Add "discard" to
variable valid_bc.  Place call to movslice ahead of validation of Endpoints
property.  For "discard" option, change the pre-window (Cpre) and post-window
(Cpost) to be empty.  Change the indices for the centers (C) to remove the
offset of Cpre which is no longer present.  Change the length of the output
to be the length of just the centers (C).
* movfun.m (movfun_oncol): Determine the length of the output as the sum of the
lengths of Cpre, C, and Cpos (some of which may now be 0).

diff --git a/scripts/signal/movfun.m b/scripts/signal/movfun.m
--- a/scripts/signal/movfun.m
+++ b/scripts/signal/movfun.m
@@ -77,27 +77,28 @@
 ##
 ## @item @qcode{"Endpoints"}
 ##
 ## This property controls how results are calculated at the boundaries
 ## (@w{endpoints}) of the window.  Possible values are:
 ##
 ## @table @asis
 ## @item @qcode{"shrink"}  (default)
-## The window is truncated at the beginning and end of the array to include
-## only valid elements.  For example, with a window of length 3,
-## @code{@var{y}(1) = @var{fcn} (@var{x}(1:2))}, and
+## The window is truncated at the beginning and end of the array to exclude
+## elements for which there is no source data.  For example, with a window of
+## length 3, @code{@var{y}(1) = @var{fcn} (@var{x}(1:2))}, and
 ## @code{@var{y}(end) = @var{fcn} (@var{x}(end-1:end))}.
 ##
-## @item @qcode{"periodic"}
-## The window is wrapped around so that
-## @code{@var{y}(1) = @var{fcn} ([@var{x}(end-@var{k}:end),
-## @var{x}(1:@var{k})])}, where @var{k} is the radius of the window.  For
-## example, with a window of length 3,
-## @code{@var{y}(1) = @var{fcn} ([@var{x}(end-1:end), @var{x}(1)])},
+## @item @qcode{"discard"}
+## Any @var{y} values that use a window extending beyond the original
+## data array are deleted.  For example, with a 10-element data vector and a
+## window of length 3, the output will contain only 8 elements.  The first
+## element would require calculating the function over indices @code{[0, 1, 2]}
+## and is therefore discarded.  The last element would require calculating the
+## function over indices @code{[9, 10, 11]} and is therefore discarded.
 ##
 ## @item @qcode{"fill"}
 ## Any window elements outside the data array are replaced by @code{NaN}.  For
 ## example, with a window of length 3,
 ## @code{@var{y}(1) = @var{fcn} ([NaN, @var{x}(1:2)])}, and
 ## @code{@var{y}(end) = @var{fcn} ([@var{x}(end-1:end), NaN])}.
 ## This option usually results in @var{y} having @code{NaN} values at the
 ## boundaries, although it is influenced by how @var{fcn} handles @code{NaN},
@@ -106,24 +107,32 @@
 ## @item @var{user_value}
 ## Any window elements outside the data array are replaced by the specified
 ## value @var{user_value} which must be a numeric scalar.  For example, with a
 ## window of length 3,
 ## @code{@var{y}(1) = @var{fcn} ([@var{user_value}, @var{x}(1:2)])}, and
 ## @code{@var{y}(end) = @var{fcn} ([@var{x}(end-1:end), @var{user_value}])}.
 ## A common choice for @var{user_value} is 0.
 ##
+## @item @qcode{"periodic"}
+## The window is wrapped around so that
+## @code{@var{y}(1) = @var{fcn} ([@var{x}(end-@var{k}:end),
+## @var{x}(1:@var{k})])}, where @var{k} is the radius of the window.  For
+## example, with a window of length 3,
+## @code{@var{y}(1) = @var{fcn} ([@var{x}(end-1:end), @var{x}(1)])},
+##
 ## @item @qcode{"same"}
 ## The resulting array @var{y} has the same values as @var{x} at the
 ## boundaries.
 ##
 ## @end table
 ##
-## Note that for some of these values, the window size at the boundaries is not
-## the same as in the middle part, and @var{fcn} must work with these cases.
+## Note that for some of these choices, the window size at the boundaries is
+## not the same as for the central part, and @var{fcn} must work in these
+## cases.
 ##
 ## @item @qcode{"nancond"}
 ## Controls whether @code{NaN} or @code{NA} values should be excluded (value:
 ## @qcode{"omitnan"}), or included (value: @qcode{"includenan"}) in the
 ## arguments passed to @var{fcn}.  The default is @qcode{"omitnan"}.
 ##
 ## @item @qcode{"outdim"}
 ## A row vector that selects which dimensions of the calculation will appear
@@ -154,17 +163,17 @@
 ## @end deftypefn
 
 function y = movfun (fcn, x, wlen, varargin)
 
   if (nargin < 3)
     print_usage ();
   endif
 
-  valid_bc = {"shrink", "periodic", "same", "fill"};
+  valid_bc = {"shrink", "discard", "fill", "periodic", "same"};
 
   ## Parse input arguments
   parser = inputParser ();
   parser.FunctionName = "movfun";
   parser.addParamValue ("Endpoints", "shrink", ...
     @(x) any (strcmpi (x, valid_bc)) || (isscalar (x) && isnumeric (x)));
   parser.addParamValue ("dim", [], ...
     @(d) isempty (d) || (isscalar (d) && isindex (d, ndims (x))));
@@ -217,34 +226,47 @@ function y = movfun (fcn, x, wlen, varar
   ## Move the desired dim to the 1st dimension
   nd    = length (szx);                  # number of dimensions
   dperm = [dim, 1:(dim-1), (dim+1):nd];  # permutation of dimensions
   x     = permute (x, dperm);            # permute dim to first dimensions
   ncols = prod (szx(dperm(2:end)));      # rest dimensions as single column
   N     = szx(dperm(1));                 # length of dim
   x     = reshape (x, N, ncols);         # reshape input
 
+  ## Obtain slicer
+  [slc, C, Cpre, Cpos, win] = movslice (N, wlen);
+
   ## Obtain function for boundary conditions
   if (isnumeric (bc))
     bcfunc = @replaceval_bc;
     bcfunc (true, bc);  # initialize replaceval function with value
-  elseif (strcmpi (bc, "fill"))
-    bcfunc = @replaceval_bc;
-    bcfunc (true, NaN);
   else
     switch (tolower (bc))
-      case "shrink"    bcfunc = @shrink_bc;
-      case "periodic"  bcfunc = @periodic_bc;
-      case "same"      bcfunc = @same_bc;
+      case "shrink"
+        bcfunc = @shrink_bc;
+
+      case "discard"
+        bcfunc = [];
+        C -= length (Cpre);
+        Cpre = Cpos = [];
+        N = length (C);
+        szx(dperm(1)) = N;
+
+      case "fill"
+        bcfunc = @replaceval_bc;
+        bcfunc (true, NaN);
+
+      case "periodic"
+        bcfunc = @periodic_bc;
+
+      case "same"
+        bcfunc = @same_bc;
     endswitch
   endif
 
-  ## Obtain slicer
-  [slc, C, Cpre, Cpos, win] = movslice (N, wlen);
-
   ## FIXME: Validation doesn't seem to work correctly (noted 12/16/2018).
   ## Validate that outdim makes sense
   tmp     = fcn (zeros (length (win), 1));  # output for window
   noutdim = length (tmp);                   # number of output dimensions
   if (! isempty (outdim))
     if (max (outdim) > noutdim)
       error ("Octave:invalid-input-arg", ...
              "movfun: output dimension OUTDIM (%d) is larger than largest available dimension (%d)", ...
@@ -273,17 +295,17 @@ function y = movfun (fcn, x, wlen, varar
   y = reshape (y, [szx(dperm), soutdim]);
   y = permute (y, [dperm, nd+1]);
   y = squeeze (y);
 
 endfunction
 
 function y = movfun_oncol (fcn, x, wlen, bcfunc, slcidx, C, Cpre, Cpos, win, odim)
 
-  N = length (x);
+  N = length (Cpre) + length (C) + length (Cpos);
   y = NA (N, odim);
 
   ## Process center part
   y(C,:) = fcn (x(slcidx));
 
   ## Process boundaries
   if (! isempty (Cpre))
     y(Cpre,:) = bcfunc (fcn, x, Cpre, win, wlen, odim);
