# HG changeset patch
# User jwe
# Date 962076190 0
#      Tue Jun 27 03:23:10 2000 +0000
# Node ID 19e1ac7359fb6111598b8a8c0909e43b44ceb351
# Parent  df54d394acc01d62e096345fd0fa142a856d888d
[project @ 2000-06-27 03:23:10 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,21 @@
 2000-06-26  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* pr-output.cc (float_format::float_format): Set default values
+	for width and precision to -1.
+	(operator << (ostream&, pr_formatted_float&): Set width and
+	precision if values are >= 0.
+	(set_real_format, set_real_matrix_format, set_range_format,
+	set_complex_format, set_complex_matrix_format): If we have all
+	integers, infinities, or nans, set precision equal to field width.
+
+	* load-save.cc (read_ascii_data): Allow empty strings and string
+	vectors to be restored.
+
 	* variables.cc (var_matches_any_pattern): New function.
 	(Fclear): Use it to make exclusive clear work correctly.
 
 2000-06-08  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* ov-range.h (octave_range::is_numeric_type): New function.
 
 	* sysdep.cc (Fkbhit): Also ask for input if forced_interactive.
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -579,17 +579,17 @@ read_ascii_data (std::istream& is, const
 		error ("load: failed to load complex matrix constant");
 	    }
 	  else
 	    error ("load: failed to extract number of rows and columns");
 	}
       else if (strncmp (ptr, "string array", 12) == 0)
 	{
 	  int elements;
-	  if (extract_keyword (is, "elements", elements) && elements > 0)
+	  if (extract_keyword (is, "elements", elements) && elements >= 0)
 	    {
 	      // XXX FIXME XXX -- need to be able to get max length
 	      // before doing anything.
 
 	      charMatrix chm (elements, 0);
 	      int max_len = 0;
 	      for (int i = 0; i < elements; i++)
 		{
@@ -622,24 +622,32 @@ read_ascii_data (std::istream& is, const
 		tc = octave_value (chm, true);
 	    }
 	  else
 	    error ("load: failed to extract number of string elements");
 	}
       else if (strncmp (ptr, "string", 6) == 0)
 	{
 	  int len;
-	  if (extract_keyword (is, "length", len) && len > 0)
+	  if (extract_keyword (is, "length", len) && len >= 0)
 	    {
 	      char *tmp = new char [len+1];
-	      is.get (tmp, len+1, EOF);
-	      if (is)
-		tc = tmp;
+	      if (len > 0 && ! is.read (X_CAST (char *, tmp), len))
+		{
+		  error ("load: failed to load string constant");
+		}
 	      else
-		error ("load: failed to load string constant");
+		{
+		  tmp [len] = '\0';
+
+		  if (is)
+		    tc = tmp;
+		  else
+		    error ("load: failed to load string constant");
+		}
 	    }
 	  else
 	    error ("load: failed to extract string length");
 	}
       else if (strncmp (ptr, "range", 5) == 0)
 	{
 	  // # base, limit, range comment added by save().
 
diff --git a/src/pr-output.cc b/src/pr-output.cc
--- a/src/pr-output.cc
+++ b/src/pr-output.cc
@@ -99,17 +99,17 @@ static bool print_big_e = false;
 
 class pr_formatted_float;
 
 class
 float_format
 {
 public:
 
-  float_format (int w = 0, int p = 0, int f = 0)
+  float_format (int w = -1, int p = -1, int f = 0)
     : fw (w), prec (p), fmt (f), up (0), sp (0) { }
 
   float_format (const float_format& ff)
     : fw (ff.fw), prec (ff.prec), fmt (ff.fmt), up (ff.up), sp (ff.sp) { }
 
   float_format& operator = (const float_format& ff)
     {
       if (&ff != this)
@@ -172,20 +172,20 @@ public:
 
   pr_formatted_float (const float_format& f_arg, double val_arg)
     : f (f_arg), val (val_arg) { }
 };
 
 std::ostream&
 operator << (std::ostream& os, const pr_formatted_float& pff)
 {
-  if (pff.f.fw > 0)
+  if (pff.f.fw >= 0)
     os << std::setw (pff.f.fw);
 
-  if (pff.f.prec > 0)
+  if (pff.f.prec >= 0)
     os << std::setprecision (pff.f.prec);
 
   std::ios::fmtflags oflags = os.flags (pff.f.fmt | pff.f.up | pff.f.sp);
 
   os << pff.val;
 
   os.flags (oflags);
 
@@ -275,17 +275,17 @@ set_real_format (bool sign, int digits, 
       rd = 0;
     }
   else if (inf_or_nan || int_only)
     {
       fw = digits;
       if (inf_or_nan && fw < 3)
 	fw = 3;
       fw += sign;
-      rd = 0;
+      rd = fw;
     }
   else
     {
       if (digits > 0)
 	{
 	  ld = digits;
 	  rd = prec > digits ? prec - digits : prec;
 	  digits++;
@@ -397,17 +397,17 @@ set_real_matrix_format (bool sign, int x
     }
   else if (int_or_inf_or_nan)
     {
       int digits = x_max > x_min ? x_max : x_min;
       fw = digits <= 0 ? 1 : digits;
       if (inf_or_nan && fw < 3)
 	fw = 3;
       fw += sign;
-      rd = 0;
+      rd = fw;
     }
   else
     {
       int ld_max, rd_max;
       if (x_max > 0)
 	{
 	  ld_max = x_max;
 	  rd_max = prec > x_max ? prec - x_max : prec;
@@ -543,17 +543,17 @@ set_complex_format (bool sign, int x_max
     }
   else if (inf_or_nan || int_only)
     {
       int digits = x_max > x_min ? x_max : x_min;
       i_fw = r_fw = digits <= 0 ? 1 : digits;
       if (inf_or_nan && i_fw < 3)
 	i_fw = r_fw = 3;
       r_fw += sign;
-      rd = 0;
+      rd = r_fw;
     }
   else
     {
       int ld_max, rd_max;
       if (x_max > 0)
 	{
 	  ld_max = x_max;
 	  rd_max = prec > x_max ? prec - x_max : prec;
@@ -720,17 +720,17 @@ set_complex_matrix_format (bool sign, in
     }
   else if (int_or_inf_or_nan)
     {
       int digits = x_max > x_min ? x_max : x_min;
       i_fw = r_fw = digits <= 0 ? 1 : digits;
       if (inf_or_nan && i_fw < 3)
 	i_fw = r_fw = 3;
       r_fw += sign;
-      rd = 0;
+      rd = r_fw;
     }
   else
     {
       int ld_max, rd_max;
       if (x_max > 0)
 	{
 	  ld_max = x_max;
 	  rd_max = prec > x_max ? prec - x_max : prec;
@@ -883,17 +883,17 @@ set_range_format (bool sign, int x_max, 
     {
       fw = 8 * sizeof (double);
       rd = 0;
     }
   else if (all_ints)
     {
       int digits = x_max > x_min ? x_max : x_min;
       fw = sign + digits;
-      rd = 0;
+      rd = fw;
     }
   else if (Vfixed_point_format)
     {
       rd = prec;
       fw = rd + 2 + sign;
     }
   else
     {
