# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1449609774 18000
#      Tue Dec 08 16:22:54 2015 -0500
# Node ID b3f985199f3f74ffeb10a80fdfde0a70c397612b
# Parent  779898f2a02a51213ef0bef9d9374d61eb09e878
eliminate memory leaks in error functions

* error.cc (pr_where_2, error_1, handle_message, error):
Use std::string object to manage memory for temporary string copies.

diff --git a/libinterp/corefcn/error.cc b/libinterp/corefcn/error.cc
--- a/libinterp/corefcn/error.cc
+++ b/libinterp/corefcn/error.cc
@@ -224,20 +224,18 @@ pr_where_2 (std::ostream& os, const char
           size_t len = strlen (fmt);
 
           if (len > 0)
             {
               if (fmt[len - 1] == '\n')
                 {
                   if (len > 1)
                     {
-                      char *tmp_fmt = strsave (fmt);
-                      tmp_fmt[len - 1] = '\0';
-                      verror (false, os, 0, "", tmp_fmt, args);
-                      delete [] tmp_fmt;
+                      std::string tmp_fmt (fmt, len - 1);
+                      verror (false, os, 0, "", tmp_fmt.c_str (), args);
                     }
                 }
               else
                 verror (false, os, 0, "", fmt, args);
             }
         }
     }
   else
@@ -470,21 +468,19 @@ error_1 (octave_execution_exception& e, 
           size_t len = strlen (fmt);
 
           if (len > 0)
             {
               if (fmt[len - 1] == '\n')
                 {
                   if (len > 1)
                     {
-                      // FIXME: This is a memory leak.
-                      char *tmp_fmt = strsave (fmt);
-                      tmp_fmt[len - 1] = '\0';
-                      verror (true, os, name, id, tmp_fmt, args, with_cfn);
-                      delete [] tmp_fmt;
+                      std::string tmp_fmt (fmt, len - 1);
+                      verror (true, os, name, id, tmp_fmt.c_str (),
+                              args, with_cfn);
                     }
 
                   // If format ends with newline, suppress stack trace.
                   e.set_stack_trace ();
                 }
               else
                 {
                   verror (true, os, name, id, fmt, args, with_cfn);
@@ -876,21 +872,19 @@ handle_message (error_fun f, const char 
   size_t len = strlen (msg);
 
   if (len > 0)
     {
       if (msg[len - 1] == '\n')
         {
           if (len > 1)
             {
-              char *tmp_msg = strsave (msg);
-              tmp_msg[len - 1] = '\0';
-              f (id, "%s\n", tmp_msg);
+              std::string tmp_msg (msg, len - 1);
+              f (id, "%s\n", tmp_msg.c_str ());
               retval = tmp_msg;
-              delete [] tmp_msg;
             }
         }
       else
         {
           f (id, "%s", msg);
           retval = msg;
         }
     }
@@ -946,28 +940,27 @@ error.  Typically @var{err} is returned 
                 l = err_stack.contents ("line")(0).nint_value ();
 
               if (err_stack.contains ("column"))
                 c = err_stack.contents ("column")(0).nint_value ();
             }
         }
 
       // Ugh.
-      char *tmp_msg = strsave (msg.c_str ());
+      std::string tmp_msg (msg);
       if (tmp_msg[len-1] == '\n')
         {
           if (len > 1)
             {
-              tmp_msg[len - 1] = '\0';
+              tmp_msg.erase (len - 1);
               rethrow_error (id.c_str (), "%s\n", tmp_msg);
             }
         }
       else
         rethrow_error (id.c_str (), "%s", tmp_msg);
-      delete [] tmp_msg;
 
       // FIXME: is this the right thing to do for Vlast_error_stack?
       //        Should it be saved and restored with unwind_protect?
 
       Vlast_error_stack = err_stack;
 
       if (err.contains ("stack"))
         {
