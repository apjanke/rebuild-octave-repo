# HG changeset patch
# User Markus MÃ¼tzel <markus.muetzel@gmx.de>
# Date 1534881743 -7200
#      Tue Aug 21 22:02:23 2018 +0200
# Node ID 218feb083dcc87cedd6b500513feaefd04ec9800
# Parent  182e891789f56bbf5a3ce6a8a90d2fb02a021b4c
Use "facenormals" for flat lighting on patches (bug #54024).

* gl-render.cc (vertex_data): Store vertex normals and face normals.

* gl-render.cc (draw_patch): Use face normals if lighting mode is "flat".

diff --git a/libinterp/corefcn/gl-render.cc b/libinterp/corefcn/gl-render.cc
--- a/libinterp/corefcn/gl-render.cc
+++ b/libinterp/corefcn/gl-render.cc
@@ -360,38 +360,39 @@ namespace octave
   vertex_data
   {
   public:
     class vertex_data_rep
     {
     public:
       Matrix coords;
       Matrix color;
-      Matrix normal;
+      Matrix vertex_normal;
+      Matrix face_normal;
       double alpha;
       float ambient;
       float diffuse;
       float specular;
       float specular_exp;
       float specular_color_refl;
 
       // reference counter
       refcount<int> count;
 
       vertex_data_rep (void)
-        : coords (), color (), normal (), alpha (),
+        : coords (), color (), vertex_normal (), face_normal (), alpha (),
           ambient (), diffuse (), specular (), specular_exp (),
           specular_color_refl (), count (1) { }
 
-      vertex_data_rep (const Matrix& c, const Matrix& col, const Matrix& n,
-                       double a, float as, float ds, float ss, float se,
-                       float scr)
-        : coords (c), color (col), normal (n), alpha (a),
-          ambient (as), diffuse (ds), specular (ss), specular_exp (se),
-          specular_color_refl (scr), count (1) { }
+      vertex_data_rep (const Matrix& c, const Matrix& col, const Matrix& vn,
+                       const Matrix& fn, double a, float as, float ds, float ss,
+                       float se, float scr)
+        : coords (c), color (col), vertex_normal (vn), face_normal (fn),
+          alpha (a), ambient (as), diffuse (ds), specular (ss),
+          specular_exp (se), specular_color_refl (scr), count (1) { }
     };
 
   private:
     vertex_data_rep *rep;
 
     vertex_data_rep * nil_rep (void) const
     {
       static vertex_data_rep *nr = new vertex_data_rep ();
@@ -401,20 +402,20 @@ namespace octave
 
   public:
     vertex_data (void) : rep (nil_rep ())
     { rep->count++; }
 
     vertex_data (const vertex_data& v) : rep (v.rep)
     { rep->count++; }
 
-    vertex_data (const Matrix& c, const Matrix& col, const Matrix& n,
-                 double a, float as, float ds, float ss, float se,
-                 float scr)
-      : rep (new vertex_data_rep (c, col, n, a, as, ds, ss, se, scr))
+    vertex_data (const Matrix& c, const Matrix& col, const Matrix& vn,
+                 const Matrix& fn, double a, float as, float ds, float ss,
+                 float se, float scr)
+      : rep (new vertex_data_rep (c, col, vn, fn, a, as, ds, ss, se, scr))
     { }
 
     vertex_data (vertex_data_rep *new_rep)
       : rep (new_rep) { }
 
     ~vertex_data (void)
     {
       if (--rep->count == 0)
@@ -501,18 +502,20 @@ namespace octave
                     buf[k] = v->specular * (v->specular_color_refl +
                                             (1 - v->specular_color_refl) * col(k));
                   glMaterialfv (LIGHT_MODE, GL_SPECULAR, buf);
 
                 }
             }
         }
 
-      if (light_mode > 0 && (first || light_mode == GOURAUD))
-        glNormal3dv (v->normal.data ());
+      if (light_mode == FLAT && first)
+        glNormal3dv (v->face_normal.data ());
+      else if (light_mode == GOURAUD)
+        glNormal3dv (v->vertex_normal.data ());
 
       glVertex3dv (v->coords.data ());
 
       first = false;
     }
 
     void combine (GLdouble xyz[3], void *data[4], GLfloat w[4], void **out_data)
     {
@@ -526,43 +529,52 @@ namespace octave
           v[i] = reinterpret_cast<vertex_data::vertex_data_rep *> (data[i]);
 
           if (vmax == 4 && ! v[i])
             vmax = i;
         }
 
       Matrix vv (1, 3, 0.0);
       Matrix cc;
-      Matrix nn (1, 3, 0.0);
+      Matrix vnn (1, 3, 0.0);
+      Matrix fnn (1, 3, 0.0);
       double aa = 0.0;
 
       vv(0) = xyz[0];
       vv(1) = xyz[1];
       vv(2) = xyz[2];
 
       if (v[0]->color.numel ())
         {
           cc.resize (1, 3, 0.0);
           for (int ic = 0; ic < 3; ic++)
             for (int iv = 0; iv < vmax; iv++)
               cc(ic) += (w[iv] * v[iv]->color (ic));
         }
 
-      if (v[0]->normal.numel () > 0)
+      if (v[0]->vertex_normal.numel () > 0)
         {
           for (int in = 0; in < 3; in++)
             for (int iv = 0; iv < vmax; iv++)
-              nn(in) += (w[iv] * v[iv]->normal (in));
+              vnn(in) += (w[iv] * v[iv]->vertex_normal (in));
+        }
+
+      if (v[0]->face_normal.numel () > 0)
+        {
+          for (int in = 0; in < 3; in++)
+            for (int iv = 0; iv < vmax; iv++)
+              fnn(in) += (w[iv] * v[iv]->face_normal (in));
         }
 
       for (int iv = 0; iv < vmax; iv++)
         aa += (w[iv] * v[iv]->alpha);
 
-      vertex_data new_v (vv, cc, nn, aa, v[0]->ambient, v[0]->diffuse,
-                         v[0]->specular, v[0]->specular_exp, v[0]->specular_color_refl);
+      vertex_data new_v (vv, cc, vnn, fnn, aa, v[0]->ambient, v[0]->diffuse,
+                         v[0]->specular, v[0]->specular_exp,
+                         v[0]->specular_color_refl);
       tmp_vdata.push_back (new_v);
 
       *out_data = new_v.get_rep ();
     }
 
   private:
 
     // No copying!
@@ -2937,29 +2949,26 @@ namespace octave
         warning ("opengl_renderer: %s.  Not rendering.", msg.c_str ());
         return;
       }
 
     bool draw_all = selecting && props.pickableparts_is ("all");
     const Matrix f = props.get_faces ().matrix_value ();
     const Matrix v = xform.scale (props.get_vertices ().matrix_value ());
     Matrix c;
-    const Matrix n = props.get_vertexnormals ().matrix_value ();
     Matrix a;
     double fa = 1.0;
 
     int nv = v.rows ();
     int nf = f.rows ();
     int fcmax = f.columns ();
 
     bool has_z = (v.columns () > 2);
     bool has_facecolor = false;
     bool has_facealpha = false;
-    // FIXME: remove when patch object has normal computation (patch #8951)
-    bool has_normals = (n.rows () == nv);
 
     int fc_mode = ((props.facecolor_is ("none")
                     || props.facecolor_is_rgb () || draw_all) ? 0 :
                    (props.facecolor_is ("flat") ? 1 : 2));
     int fl_mode = (props.facelighting_is ("none") ? 0 :
                    (props.facelighting_is ("flat") ? 1 : 2));
     int fa_mode = (props.facealpha_is_double () ? 0 :
                    (props.facealpha_is ("flat") ? 1 : 2));
@@ -2978,16 +2987,21 @@ namespace octave
     Matrix ecolor = props.get_edgecolor_rgb ();
 
     float as = props.get_ambientstrength ();
     float ds = props.get_diffusestrength ();
     float ss = props.get_specularstrength ();
     float se = props.get_specularexponent () * 5; // to fit Matlab
     float scr = props.get_specularcolorreflectance ();
 
+    const Matrix vn = props.get_vertexnormals ().matrix_value ();
+    bool has_vertex_normals = (vn.rows () == nv);
+    const Matrix fn = props.get_facenormals ().matrix_value ();
+    bool has_face_normals = (fn.rows () == nf);
+
     boolMatrix clip (1, nv, false);
 
     if (has_z)
       for (int i = 0; i < nv; i++)
         clip(i) = is_nan_or_inf (v(i,0), v(i,1), v(i,2));
     else
       for (int i = 0; i < nv; i++)
         clip(i) = is_nan_or_inf (v(i,0), v(i,1), 0);
@@ -3051,33 +3065,47 @@ namespace octave
 
     for (int i = 0; i < nf; i++)
       for (int j = 0; j < count_f(i); j++)
         {
           int idx = int (f(i,j) - 1);
 
           Matrix vv (1, 3, 0.0);
           Matrix cc;
-          Matrix nn (1, 3, 0.0);
+          Matrix vnn (1, 3, 0.0);
+          Matrix fnn (1, 3, 0.0);
           double aa = 1.0;
 
           vv(0) = v(idx,0); vv(1) = v(idx,1);
           if (has_z)
             vv(2) = v(idx,2);
-          if (has_normals)
+          if (((fl_mode == FLAT) || (el_mode == FLAT)) && has_face_normals)
             {
               double dir = 1.0;
               if (bfl_mode > 0)
-                dir = ((n(idx,0) * view_vector(0)
-                        + n(idx,1) * view_vector(1)
-                        + n(idx,2) * view_vector(2) < 0)
+                dir = ((fn(i,0) * view_vector(0)
+                        + fn(i,1) * view_vector(1)
+                        + fn(i,2) * view_vector(2) < 0)
                        ? ((bfl_mode > 1) ? 0.0 : -1.0) : 1.0);
-              nn(0) = dir * n(idx,0);
-              nn(1) = dir * n(idx,1);
-              nn(2) = dir * n(idx,2);
+              fnn(0) = dir * fn(i,0);
+              fnn(1) = dir * fn(i,1);
+              fnn(2) = dir * fn(i,2);
+            }
+          if (((fl_mode == GOURAUD) || (el_mode == GOURAUD)) &&
+              has_vertex_normals)
+            {
+              double dir = 1.0;
+              if (bfl_mode > 0)
+                dir = ((vn(idx,0) * view_vector(0)
+                        + vn(idx,1) * view_vector(1)
+                        + vn(idx,2) * view_vector(2) < 0)
+                       ? ((bfl_mode > 1) ? 0.0 : -1.0) : 1.0);
+              vnn(0) = dir * vn(idx,0);
+              vnn(1) = dir * vn(idx,1);
+              vnn(2) = dir * vn(idx,2);
             }
           if (c.numel () > 0)
             {
               cc.resize (1, 3);
               if (has_facecolor)
                 cc(0) = c(i,0), cc(1) = c(i,1), cc(2) = c(i,2);
               else
                 cc(0) = c(idx,0), cc(1) = c(idx,1), cc(2) = c(idx,2);
@@ -3087,17 +3115,17 @@ namespace octave
           else if (a.numel () > 0)
             {
               if (has_facealpha)
                 aa = a(i);
               else
                 aa = a(idx);
             }
 
-          vdata[i+j*fr] = vertex_data (vv, cc, nn, aa, as, ds, ss, se, scr);
+          vdata[i+j*fr] = vertex_data (vv, cc, vnn, fnn, aa, as, ds, ss, se, scr);
         }
 
     if (fl_mode > 0 || el_mode > 0)
       glMaterialf (LIGHT_MODE, GL_SHININESS, se);
 
     std::list<std::list<octave_idx_type>>::const_iterator it1;
 
     if (draw_all || ! props.facecolor_is ("none"))
@@ -3121,17 +3149,17 @@ namespace octave
                     glMaterialfv (LIGHT_MODE, GL_DIFFUSE, cb);
 
                     for (int i = 0; i < 3; i++)
                       cb[i] = ss * (scr + (1-scr) * fcolor(i));
                     glMaterialfv (LIGHT_MODE, GL_SPECULAR, cb);
                   }
               }
 
-            if ((fl_mode > 0) && do_lighting && has_normals)
+            if ((fl_mode > 0) && do_lighting)
               glEnable (GL_LIGHTING);
 
             // NOTE: Push filled part of patch backwards to avoid Z-fighting
             // with tesselator outline.  A value of 1.0 seems to work fine.
             // Value can't be too large or the patch will be pushed below the
             // axes planes at +2.5.
             patch_tesselator tess (this, fc_mode, fl_mode, 1.0);
 
@@ -3224,17 +3252,17 @@ namespace octave
                     tess.end_contour ();
                     tess.end_polygon ();
                   } while (i_start > 0);
 
                 if (is_non_planar)
                   it1++;
               }
 
-            if ((fl_mode > 0) && do_lighting && has_normals)
+            if ((fl_mode > 0) && do_lighting)
               glDisable (GL_LIGHTING);
           }
         else
           {
             // FIXME: implement flat and interp transparency
           }
       }
 
@@ -3260,17 +3288,17 @@ namespace octave
                     glMaterialfv (LIGHT_MODE, GL_DIFFUSE, cb);
 
                     for (int i = 0; i < 3; i++)
                       cb[i] = ss * (scr + (1-scr) * ecolor(i));
                     glMaterialfv (LIGHT_MODE, GL_SPECULAR, cb);
                   }
               }
 
-            if ((el_mode > 0) && do_lighting && has_normals)
+            if ((el_mode > 0) && do_lighting)
               glEnable (GL_LIGHTING);
 
             double linewidth = props.get_linewidth ();
             set_linestyle (props.get_linestyle (), false, linewidth);
             set_linewidth (linewidth);
             set_linecap ("butt");
             set_linejoin ("miter");
 
@@ -3363,17 +3391,17 @@ namespace octave
                   }
                 if (is_non_planar)
                   it1++;
               }
 
             set_linestyle ("-");  // Disable LineStipple
             set_linewidth (0.5f);
 
-            if ((el_mode > 0) && do_lighting && has_normals)
+            if ((el_mode > 0) && do_lighting)
               glDisable (GL_LIGHTING);
           }
         else
           {
             // FIXME: implement transparency
           }
       }
 
