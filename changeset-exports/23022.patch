# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1483837205 18000
#      Sat Jan 07 20:00:05 2017 -0500
# Node ID 305cdc1d444be89aef70c57ab7e552e00ed622e5
# Parent  6094018f5e72ecb90fb67bb6597427414b4dda77
* __ode15__.cc: Disable sparse jacobian handling if IDAKLU is missing.

diff --git a/libinterp/dldfcn/__ode15__.cc b/libinterp/dldfcn/__ode15__.cc
--- a/libinterp/dldfcn/__ode15__.cc
+++ b/libinterp/dldfcn/__ode15__.cc
@@ -35,16 +35,19 @@ along with Octave; see the file COPYING.
 #include "parse.h"
 #include "errwarn.h"
 
 #if defined (HAVE_SUNDIALS)
 
 #  if defined (HAVE_IDA_IDA_H)
 #    include <ida/ida.h>
 #    include <ida/ida_dense.h>
+#  endif
+
+#  if defined (HAVE_IDA_IDA_KLU_H)
 #    include <ida/ida_klu.h>
 #    include <sundials/sundials_sparse.h>
 #  endif
 
 #  if defined (HAVE_NVECTOR_NVECTOR_SERIAL_H)
 #    include <nvector/nvector_serial.h>
 #  endif
 
@@ -200,29 +203,31 @@ namespace octave
       self->jacdense_impl (Neq, t, cj, yy, yyp, JJ);
       return 0;
     }
 
     void
     jacdense_impl (long int Neq, realtype t, realtype cj,
                    N_Vector& yy, N_Vector& yyp, DlsMat& JJ);
 
+#  if defined (HAVE_SUNDIALS_IDAKLU)
     static int
     jacsparse (realtype t, realtype cj, N_Vector yy, N_Vector yyp,
                N_Vector, SlsMat Jac, void *user_data, N_Vector,
                N_Vector, N_Vector)
     {
       IDA *self = static_cast <IDA *> (user_data);
       self->jacsparse_impl (t, cj, yy, yyp, Jac);
       return 0;
     }
 
     void
     jacsparse_impl (realtype t, realtype cj, N_Vector& yy,
                     N_Vector& yyp, SlsMat& Jac);
+#endif
 
     void set_maxstep (realtype maxstep);
 
     void set_initialstep (realtype initialstep);
 
     bool
     interpolate (int& cont, Matrix& output, ColumnVector& tout,
                  int refine, realtype tend, bool haveoutputfcn,
@@ -311,20 +316,24 @@ namespace octave
     END_INTERRUPT_WITH_EXCEPTIONS;
   }
 
   void
   IDA::set_up (void)
   {
     if (havejacsparse)
       {
+#  if defined (HAVE_SUNDIALS_IDAKLU)
         if (IDAKLU (mem, num, num*num, CSC_MAT) != 0)
           error ("IDAKLU solver not initialized");
 
         IDASlsSetSparseJacFn (mem, IDA::jacsparse);
+#  else
+        error ("IDAKLU is not available in this version of Octave");
+#  endif
       }
     else
       {
         if (IDADense (mem, num) != 0)
           error ("IDADense solver not initialized");
 
         if (havejac && IDADlsSetDenseJacFn (mem, IDA::jacdense) != 0)
           error ("Dense Jacobian not set");
@@ -351,16 +360,17 @@ namespace octave
 
     std::copy (jac.fortran_vec (),
                jac.fortran_vec () + jac.numel (),
                JJ->data);
 
     END_INTERRUPT_WITH_EXCEPTIONS;
   }
 
+#  if defined (HAVE_SUNDIALS_IDAKLU)
   void
   IDA::jacsparse_impl (realtype t, realtype cj, N_Vector& yy, N_Vector& yyp,
                        SlsMat& Jac)
 
   {
     BEGIN_INTERRUPT_WITH_EXCEPTIONS;
 
     ColumnVector y = NVecToCol (yy, num);
@@ -384,16 +394,17 @@ namespace octave
     for (int i = 0; i < jac.nnz (); i++)
       {
         rowvals[i] = jac.ridx(i);
         Jac->data[i] = jac.data(i);
       }
 
     END_INTERRUPT_WITH_EXCEPTIONS;
   }
+#endif
 
   ColumnVector
   IDA::NVecToCol (N_Vector& v, long int n)
   {
     ColumnVector data (n);
     realtype *punt = nv_data_s (v);
 
     for (octave_idx_type i = 0; i < n; i++)
