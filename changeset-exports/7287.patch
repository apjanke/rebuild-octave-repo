# HG changeset patch
# User jwe
# Date 1197392613 0
#      Tue Dec 11 17:03:33 2007 +0000
# Node ID 3f29467c1667bf5c366feedd23510c7691f7226a
# Parent  c0c6aa5afff45f197cc93dd5993b5ee9f53f84ba
[project @ 2007-12-11 17:03:32 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,10 +1,13 @@
 2007-12-11  David Bateman  <dbateman@free.fr>
 
+	* sparse/spstats.m: Drop argument to Fsparse to force mutation.
+	* statistics/base/mode.m: Ditto.
+
 	* plot/__plt_get_axis_arg__.m: Ignore integer valued handles as
 	object handles are all now non integer.
 
 2007-12-10  John W. Eaton  <jwe@octave.org>
 
 	* plot/sombrero.m, plot/peaks.m: Use surf instead of mesh.
 
 	* general/issymmetric.m: Use ' instead of .' for compatibility
diff --git a/scripts/sparse/spstats.m b/scripts/sparse/spstats.m
--- a/scripts/sparse/spstats.m
+++ b/scripts/sparse/spstats.m
@@ -54,11 +54,11 @@ function [count, mean, var] = spstats (S
     diff = S - sparse (i, j, mean(j), n, m); 
     var = spsum (diff .* diff) ./ (count - 1);
   endif
 
 endfunction
 
 %!test
 %! [n,m,v] = spstats([1 2 1 2 3 4],[2 2 1 1 1 1]);
-%! assert(n,sparse([4,2],1));
-%! assert(m,sparse([10/4,3/2],1),10*eps);
-%! assert(v,sparse([5/3,1/2],1),10*eps);
+%! assert(n,sparse([4,2]));
+%! assert(m,sparse([10/4,3/2]),10*eps);
+%! assert(v,sparse([5/3,1/2]),10*eps);
diff --git a/scripts/statistics/base/mode.m b/scripts/statistics/base/mode.m
--- a/scripts/statistics/base/mode.m
+++ b/scripts/statistics/base/mode.m
@@ -79,17 +79,21 @@ function [m, f, c] = mode (x, dim)
     f = max (ipermute (t2, perm), [], dim);
     xs = permute (xs, perm);
   else
     t2 (t) = diff ([find(t); prod(sz)+1]);
     f = max (t2, [], dim);
   endif
 
   c = cell (sz2);
-  m = zeros (sz2);
+  if (issparse (x))
+    m = sparse (sz2(1), sz2(2));
+  else
+    m = zeros (sz2);
+  endif
   for i = 1 : prod (sz2)
     c{i} = xs (t2 (:, i) == f(i), i);
     m (i) = c{i}(1);
   endfor
 endfunction
 
 %!test
 %! [m, f, c] = mode (toeplitz (1:5));
@@ -100,11 +104,11 @@ endfunction
 %! [m, f, c] = mode (toeplitz (1:5), 2);
 %! assert (m, [1;2;2;2;1]);
 %! assert (f, [1;2;2;2;1]);
 %! assert (c, {[1;2;3;4;5];[2];[2;3];[2];[1;2;3;4;5]});
 %!test
 %! a = sprandn (32, 32, 0.05);
 %! [m, f, c] = mode (a);
 %! [m2, f2, c2] = mode (full (a));
-%! assert (m, sparse (m2, 1));
-%! assert (f, sparse (f2, 1));
-%! assert (c, cellfun (@(x) sparse (1, 1), c2, 'UniformOutput', false));
+%! assert (m, sparse (m2));
+%! assert (f, sparse (f2));
+%! assert (c, cellfun (@(x) sparse (0), c2, 'UniformOutput', false));
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,13 @@
 2007-12-11  David Bateman  <dbateman@free.fr>
 
+	* DLD-FUNCTIONS/sparse.cc (FSparse): Remove the mutate flag, as
+	default bahavior is now to keep matrix sparse always.
+	
 	* graphics.cc (axes::properties::properties):
 	Initialize xcolor, ycolor, and zcolor to (0, 0, 0).
 
 	* graphics.h.in (gh_manager::next_handle): Now double.
 	* graphics.cc (gh_manager::get_handle, gh_manager::gh_manager):
 	Set fractional part of next_handle to a random value.
 
 2007-12-10  John W. Eaton  <jwe@octave.org>
diff --git a/src/DLD-FUNCTIONS/sparse.cc b/src/DLD-FUNCTIONS/sparse.cc
--- a/src/DLD-FUNCTIONS/sparse.cc
+++ b/src/DLD-FUNCTIONS/sparse.cc
@@ -101,23 +101,21 @@ Uses @code{@var{m} = max (@var{i})}, @co
 Equivalent to @code{sparse ([], [], [], @var{m}, @var{n}, 0)}\n\
 \n\
 If any of @var{sv}, @var{i} or @var{j} are scalars, they are expanded\n\
 to have a common size.\n\
 @seealso{full}\n\
 @end deftypefn")
 {
    octave_value retval;
-   bool mutate = false;
 
    // WARNING: This function should always use constructions like
    //   retval = new octave_sparse_matrix (sm);
    // To avoid calling the maybe_mutate function. This is the only
-   // function that should not call maybe_mutate, or at least only
-   // in very particular cases.
+   // function that should not call maybe_mutate
 
    int nargin= args.length();
    if (nargin < 1 || (nargin == 4 && !args(3).is_string ()) || nargin > 6) 
      {
        print_usage ();
        return retval;
      }
 
@@ -129,21 +127,17 @@ to have a common size.\n\
        use_bool = args(2).is_bool_type ();
      }
    else
      {
        use_complex= args(0).is_complex_type();
        use_bool = args(0).is_bool_type ();
      }
 
-   if (nargin == 2 && ! args(0).is_scalar_type() && args(1).is_scalar_type())
-       mutate = (args(1).double_value() != 0.);
-
-   if (nargin == 1 || (nargin == 2 && ! args(0).is_scalar_type() && 
-		       args(1).is_scalar_type()))
+   if (nargin == 1)
      {
        octave_value arg = args (0);
 
        if (is_sparse (arg))
 	 {
 	   if (use_complex) 
 	     {
 	       SparseComplexMatrix sm = arg.sparse_complex_matrix_value ();
@@ -350,20 +344,16 @@ to have a common size.\n\
 	       else
 		 retval = new octave_sparse_matrix 
 		   (SparseMatrix (coefA, ridxA, cidxA, m, n, 
 				  assemble_do_sum));
 	     }
 	 }
      }
 
-   // Only called in very particular cases, not the default case
-   if (mutate)
-     retval.maybe_mutate ();
-
    return retval;
 }
 
 DEFUN_DLD (full, args, ,
     "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{FM} =} full (@var{SM})\n\
  returns a full storage matrix from a sparse one\n\
 @seealso{sparse}\n\
diff --git a/test/ChangeLog b/test/ChangeLog
--- a/test/ChangeLog
+++ b/test/ChangeLog
@@ -1,8 +1,13 @@
+2007-12-11  David Bateman  <dbateman@free.fr>
+
+	* build_sparse_tests.sh: Drop argument to Fsparse to force mutation.
+	* test_range.m: Ditto.
+
 2007-12-10  John W. Eaton  <jwe@octave.org>
 
 	* test_nonlin.m: Delete.
 
 2007-12-03  David Bateman  <dbateman@free.fr>
 
 	* fntests.m: Also count the skipped tests.
 	* build_sparse_tests.sh: As appropriate make tests conditional on
diff --git a/test/build_sparse_tests.sh b/test/build_sparse_tests.sh
--- a/test/build_sparse_tests.sh
+++ b/test/build_sparse_tests.sh
@@ -268,178 +268,178 @@ EOF
 
 # =======================================================
 # matrix ops
 
 # test ordered comparisons: uses as,af,bs,bf
 gen_ordering_tests() {
     cat >>$TESTS <<EOF
 %% real values can be ordered (uses as,af)
-%!assert(as<=bf,sparse(af<=bf,true))
-%!assert(bf<=as,sparse(bf<=af,true))
+%!assert(as<=bf,sparse(af<=bf))
+%!assert(bf<=as,sparse(bf<=af))
 
-%!assert(as>=bf,sparse(af>=bf,true))
-%!assert(bf>=as,sparse(bf>=af,true))
+%!assert(as>=bf,sparse(af>=bf))
+%!assert(bf>=as,sparse(bf>=af))
 
-%!assert(as<bf,sparse(af<bf,true))
-%!assert(bf<as,sparse(bf<af,true))
+%!assert(as<bf,sparse(af<bf))
+%!assert(bf<as,sparse(bf<af))
 
-%!assert(as>bf,sparse(af>bf,true))
-%!assert(bf>as,sparse(bf>af,true))
+%!assert(as>bf,sparse(af>bf))
+%!assert(bf>as,sparse(bf>af))
 
 EOF
 }
 
 gen_sparsesparse_ordering_tests() {
     cat >>$TESTS <<EOF
-%!assert(as<=bs,sparse(af<=bf,true))
-%!assert(as>=bs,sparse(af>=bf,true))
-%!assert(as<bs,sparse(af<bf,true))
-%!assert(as>bs,sparse(af>bf,true))
+%!assert(as<=bs,sparse(af<=bf))
+%!assert(as>=bs,sparse(af>=bf))
+%!assert(as<bs,sparse(af<bf))
+%!assert(as>bs,sparse(af>bf))
 EOF
 }
 
 # test element-wise binary operations: uses as,af,bs,bf,scalar
 gen_elementop_tests() {
     cat >>$TESTS <<EOF
 %% Elementwise binary tests (uses as,af,bs,bf,scalar)
-%!assert(as==bs,sparse(af==bf,true))
-%!assert(bf==as,sparse(bf==af,true))
+%!assert(as==bs,sparse(af==bf))
+%!assert(bf==as,sparse(bf==af))
 
-%!assert(as!=bf,sparse(af!=bf,true))
-%!assert(bf!=as,sparse(bf!=af,true))
+%!assert(as!=bf,sparse(af!=bf))
+%!assert(bf!=as,sparse(bf!=af))
 
 %!assert(as+bf,af+bf)
 %!assert(bf+as,bf+af)
 
 %!assert(as-bf,af-bf)
 %!assert(bf-as,bf-af)
 
-%!assert(as.*bf,sparse(af.*bf,true))
-%!assert(bf.*as,sparse(bf.*af,true))
+%!assert(as.*bf,sparse(af.*bf))
+%!assert(bf.*as,sparse(bf.*af))
 
-%!assert(as./bf,sparse(af./bf,true),100*eps)
-%!assert(bf.\as,sparse(bf.\af,true),100*eps)
+%!assert(as./bf,sparse(af./bf),100*eps)
+%!assert(bf.\as,sparse(bf.\af),100*eps)
 
 %!test
 %! sv = as.^bf;
 %! fv = af.^bf;
 %! idx = find(af~=0);
-%! assert(sv(:)(idx),sparse(fv(:)(idx),true),100*eps)
+%! assert(sv(:)(idx),sparse(fv(:)(idx)),100*eps)
 
 EOF
 }
 
 gen_sparsesparse_elementop_tests() {
     cat >>$TESTS <<EOF
-%!assert(as==bs,sparse(af==bf,true))
-%!assert(as!=bs,sparse(af!=bf,true))
-%!assert(as+bs,sparse(af+bf,true))
-%!assert(as-bs,sparse(af-bf,true))
-%!assert(as.*bs,sparse(af.*bf,true))
-%!xtest assert(as./bs,sparse(af./bf,true),100*eps);
+%!assert(as==bs,sparse(af==bf))
+%!assert(as!=bs,sparse(af!=bf))
+%!assert(as+bs,sparse(af+bf))
+%!assert(as-bs,sparse(af-bf))
+%!assert(as.*bs,sparse(af.*bf))
+%!xtest assert(as./bs,sparse(af./bf),100*eps);
 %!test
 %! sv = as.^bs;
 %! fv = af.^bf;
 %! idx = find(af~=0);
-%! assert(sv(:)(idx),sparse(fv(:)(idx),true),100*eps)
+%! assert(sv(:)(idx),sparse(fv(:)(idx)),100*eps)
 
 EOF
 }
 
 # test matrix-matrix left and right division: uses as,af,bs,bf
 gen_divop_tests() {
     cat >>$TESTS <<EOF
 %% Matrix-matrix operators (uses af,as,bs,bf)
 %!assert(as/bf,af/bf,100*eps)
 %!assert(af/bs,af/bf,100*eps)
-%!assert(as/bs,sparse(af/bf,true),100*eps)
+%!assert(as/bs,sparse(af/bf),100*eps)
 %!assert(bs\af',bf\af',100*eps)
 %!assert(bf\as',bf\af',100*eps)
-%!assert(bs\as',sparse(bf\af',true),100*eps)
+%!assert(bs\as',sparse(bf\af'),100*eps)
 
 EOF
 }
 
 # test matrix-matrix left and right division: uses as,af,bs,bf
 gen_square_divop_tests() {
     cat >>$TESTS <<EOF
 %% Matrix-matrix operators (uses af,as,bs,bf)
 %!assert(as/bf,af/bf,100*eps)
 %!assert(af/bs,af/bf,100*eps)
-%!assert(as/bs,sparse(af/bf,true),100*eps)
+%!assert(as/bs,sparse(af/bf),100*eps)
 %!assert(bs\af',bf\af',100*eps)
 %!assert(bf\as',bf\af',100*eps)
-%!assert(bs\as',sparse(bf\af',true),100*eps)
+%!assert(bs\as',sparse(bf\af'),100*eps)
 
 EOF
 }
 
 # test matrix-matrix operations: uses as,af,bs,bf
 gen_matrixop_tests() {
     cat >>$TESTS <<EOF
 %% Matrix-matrix operators (uses af,as,bs,bf)
 %!assert(as*bf',af*bf')
 %!assert(af*bs',af*bf')
-%!assert(as*bs',sparse(af*bf',true))
+%!assert(as*bs',sparse(af*bf'))
 
 EOF
 }
 
 # test diagonal operations
 gen_matrixdiag_tests() {
     cat >>$TESTS <<EOF
 %% Matrix diagonal tests (uses af,as,bf,bs)
-%!assert(spdiag(as),sparse(diag(af),true))
-%!assert(spdiag(bs),sparse(diag(bf),true))
-%!assert(spdiag(as,1),sparse(diag(af,1),true))
-%!assert(spdiag(bs,1),sparse(diag(bf,1),true))
-%!assert(spdiag(as,-1),sparse(diag(af,-1),true))
-%!assert(spdiag(bs,-1),sparse(diag(bf,-1),true))
-%!assert(spdiag(as(:)),sparse(diag(af(:)),true))
-%!assert(spdiag(as(:),1),sparse(diag(af(:),1),true))
-%!assert(spdiag(as(:),-1),sparse(diag(af(:),-1),true))
-%!assert(spdiag(as(:)'),sparse(diag(af(:)'),true))
-%!assert(spdiag(as(:)',1),sparse(diag(af(:)',1),true))
-%!assert(spdiag(as(:)',-1),sparse(diag(af(:)',-1),true))
+%!assert(spdiag(as),sparse(diag(af)))
+%!assert(spdiag(bs),sparse(diag(bf)))
+%!assert(spdiag(as,1),sparse(diag(af,1)))
+%!assert(spdiag(bs,1),sparse(diag(bf,1)))
+%!assert(spdiag(as,-1),sparse(diag(af,-1)))
+%!assert(spdiag(bs,-1),sparse(diag(bf,-1)))
+%!assert(spdiag(as(:)),sparse(diag(af(:))))
+%!assert(spdiag(as(:),1),sparse(diag(af(:),1)))
+%!assert(spdiag(as(:),-1),sparse(diag(af(:),-1)))
+%!assert(spdiag(as(:)'),sparse(diag(af(:)')))
+%!assert(spdiag(as(:)',1),sparse(diag(af(:)',1)))
+%!assert(spdiag(as(:)',-1),sparse(diag(af(:)',-1)))
 %!assert(spdiags(as,[0,1]),[diag(af,0),diag(af,1)])
 %!test [tb,tc]=spdiags(as); 
 %! assert(spdiags(tb,tc,sparse(zeros(size(as)))),as)
 %! assert(spdiags(tb,tc,size(as,1),size(as,2)),as)
 
 EOF
 }
 
 # test matrix reshape operations
 gen_matrixreshape_tests() {
     cat >>$TESTS <<EOF
 %% Matrix diagonal tests (uses af,as,bf,bs)
-%!assert(reshape(as,1,prod(size(as))),sparse(reshape(af,1,prod(size(af))),true))
-%!assert(reshape(as,prod(size(as)),1),sparse(reshape(af,prod(size(af)),1),true))
-%!assert(reshape(as,fliplr(size(as))),sparse(reshape(af,fliplr(size(af))),true))
-%!assert(reshape(bs,1,prod(size(as))),sparse(reshape(bf,1,prod(size(af))),true))
-%!assert(reshape(bs,prod(size(as)),1),sparse(reshape(bf,prod(size(af)),1),true))
-%!assert(reshape(bs,fliplr(size(as))),sparse(reshape(bf,fliplr(size(af))),true))
+%!assert(reshape(as,1,prod(size(as))),sparse(reshape(af,1,prod(size(af)))))
+%!assert(reshape(as,prod(size(as)),1),sparse(reshape(af,prod(size(af)),1)))
+%!assert(reshape(as,fliplr(size(as))),sparse(reshape(af,fliplr(size(af)))))
+%!assert(reshape(bs,1,prod(size(as))),sparse(reshape(bf,1,prod(size(af)))))
+%!assert(reshape(bs,prod(size(as)),1),sparse(reshape(bf,prod(size(af)),1)))
+%!assert(reshape(bs,fliplr(size(as))),sparse(reshape(bf,fliplr(size(af)))))
 
 EOF
 }
 
 # test mapper matrix operations: uses as,af
 print_mapper_test() {
-echo "%!assert($1(as),sparse($1(af),1))" >>$TESTS
+echo "%!assert($1(as),sparse($1(af)))" >>$TESTS
 }
 
 print_real_mapper_test() {
     cat >>$TESTS <<EOF
 %!test
 %! wn2s = warning ("query", "Octave:num-to-str");
 %! warning ("off", "Octave:num-to-str");
 %! if isreal(af)
 %!   if ($2)
-%!     assert($1(as),sparse($1(af),1))
+%!     assert($1(as),sparse($1(af)))
 %!   else
 %!     assert($1(as),$1(af))
 %!   endif
 %! endif
 %! warning (wn2s.state, "Octave:num-to-str");
 
 EOF
 }
@@ -526,63 +526,63 @@ EOF
 # test matrix operations: uses as,af
 gen_unaryop_tests() {
     cat >>$TESTS <<EOF
 %% Unary matrix tests (uses af,as)
 %!assert(issparse(as))
 %!assert(!issparse(af))
 %!assert(!(issparse(af)&&iscomplex(af)))
 %!assert(!(issparse(af)&&isreal(af)))
-%!assert(spsum(as),sparse(sum(af),true))
-%!assert(spsum(as,1),sparse(sum(af,1),true))
-%!assert(spsum(as,2),sparse(sum(af,2),true))
-%!assert(spcumsum(as),sparse(cumsum(af),true))
-%!assert(spcumsum(as,1),sparse(cumsum(af,1),true))
-%!assert(spcumsum(as,2),sparse(cumsum(af,2),true))
-%!assert(spsumsq(as),sparse(sumsq(af),true))
-%!assert(spsumsq(as,1),sparse(sumsq(af,1),true))
-%!assert(spsumsq(as,2),sparse(sumsq(af,2),true))
-%!assert(spprod(as),sparse(prod(af),true))
-%!assert(spprod(as,1),sparse(prod(af,1),true))
-%!assert(spprod(as,2),sparse(prod(af,2),true))
-%!assert(spcumprod(as),sparse(cumprod(af),true))
-%!assert(spcumprod(as,1),sparse(cumprod(af,1),true))
-%!assert(spcumprod(as,2),sparse(cumprod(af,2),true))
+%!assert(spsum(as),sparse(sum(af)))
+%!assert(spsum(as,1),sparse(sum(af,1)))
+%!assert(spsum(as,2),sparse(sum(af,2)))
+%!assert(spcumsum(as),sparse(cumsum(af)))
+%!assert(spcumsum(as,1),sparse(cumsum(af,1)))
+%!assert(spcumsum(as,2),sparse(cumsum(af,2)))
+%!assert(spsumsq(as),sparse(sumsq(af)))
+%!assert(spsumsq(as,1),sparse(sumsq(af,1)))
+%!assert(spsumsq(as,2),sparse(sumsq(af,2)))
+%!assert(spprod(as),sparse(prod(af)))
+%!assert(spprod(as,1),sparse(prod(af,1)))
+%!assert(spprod(as,2),sparse(prod(af,2)))
+%!assert(spcumprod(as),sparse(cumprod(af)))
+%!assert(spcumprod(as,1),sparse(cumprod(af,1)))
+%!assert(spcumprod(as,2),sparse(cumprod(af,2)))
 
-%!assert(spmin(as),sparse(min(af),true))
+%!assert(spmin(as),sparse(min(af)))
 %!assert(full(spmin(as(:))),min(af(:)))
-%!assert(spmin(as,[],1),sparse(min(af,[],1),true))
-%!assert(spmin(as,[],2),sparse(min(af,[],2),true))
-%!assert(spmin(as,[],1),sparse(min(af,[],1),true))
-%!assert(spmin(as,0),sparse(min(af,0),true))
-%!assert(spmin(as,bs),sparse(min(af,bf),true))
-%!assert(spmax(as),sparse(max(af),true))
+%!assert(spmin(as,[],1),sparse(min(af,[],1)))
+%!assert(spmin(as,[],2),sparse(min(af,[],2)))
+%!assert(spmin(as,[],1),sparse(min(af,[],1)))
+%!assert(spmin(as,0),sparse(min(af,0)))
+%!assert(spmin(as,bs),sparse(min(af,bf)))
+%!assert(spmax(as),sparse(max(af)))
 %!assert(full(spmax(as(:))),max(af(:)))
-%!assert(spmax(as,[],1),sparse(max(af,[],1),true))
-%!assert(spmax(as,[],2),sparse(max(af,[],2),true))
-%!assert(spmax(as,[],1),sparse(max(af,[],1),true))
-%!assert(spmax(as,0),sparse(max(af,0),true))
-%!assert(spmax(as,bs),sparse(max(af,bf),true))
+%!assert(spmax(as,[],1),sparse(max(af,[],1)))
+%!assert(spmax(as,[],2),sparse(max(af,[],2)))
+%!assert(spmax(as,[],1),sparse(max(af,[],1)))
+%!assert(spmax(as,0),sparse(max(af,0)))
+%!assert(spmax(as,bs),sparse(max(af,bf)))
 
 %!assert(as==as)
 %!assert(as==af)
 %!assert(af==as)
 %!test
 %! [ii,jj,vv,nr,nc] = spfind(as);
 %! assert(af,full(sparse(ii,jj,vv,nr,nc)));
 %!assert(nnz(as),sum(af(:)!=0))
 %!assert(nnz(as),nnz(af))
 %!assert(issparse(as.'))
 %!assert(issparse(as'))
 %!assert(issparse(-as))
-%!assert(~as,sparse(~af,true))
-%!assert(as.', sparse(af.',true));
-%!assert(as',  sparse(af',true));
-%!assert(-as, sparse(-af,true));
-%!assert(~as, sparse(~af,true));
+%!assert(~as,sparse(~af))
+%!assert(as.', sparse(af.'));
+%!assert(as',  sparse(af'));
+%!assert(-as, sparse(-af));
+%!assert(~as, sparse(~af));
 %!error [i,j]=size(af);as(i-1,j+1);
 %!error [i,j]=size(af);as(i+1,j-1);
 %!test
 %! [Is,Js,Vs] = spfind(as);
 %! [If,Jf,Vf] = find(af);
 %! assert(Is,If);
 %! assert(Js,Jf);
 %! assert(Vs,Vf);
@@ -791,63 +791,63 @@ EOF
 # sparse selection tests
 
 gen_select_tests() {
     cat >>$TESTS <<EOF
 %!test as=sparse(af);
 
 %% Point tests
 %!test idx=ridx(:)+rows(as)*(cidx(:)-1);
-%!assert(sparse(as(idx),true),sparse(af(idx),true));
-%!assert(as(idx),sparse(af(idx),true));
-%!assert(as(idx'),sparse(af(idx'),true));
-%!assert(as(flipud(idx(:))),sparse(af(flipud(idx(:))),true))
-%!assert(as([idx,idx]),sparse(af([idx,idx]),true));
+%!assert(sparse(as(idx)),sparse(af(idx)));
+%!assert(as(idx),sparse(af(idx)));
+%!assert(as(idx'),sparse(af(idx')));
+%!assert(as(flipud(idx(:))),sparse(af(flipud(idx(:)))))
+%!assert(as([idx,idx]),sparse(af([idx,idx])));
 %!error(as(reshape([idx;idx],[1,length(idx),2])));
 
 %% Slice tests
-%!assert(as(ridx,cidx), sparse(af(ridx,cidx),true))
-%!assert(as(ridx,:), sparse(af(ridx,:),true))
-%!assert(as(:,cidx), sparse(af(:,cidx),true))
-%!assert(as(:,:), sparse(af(:,:),true))
-%!assert(as((size(as,1):-1:1),:),sparse(af((size(af,1):-1:1),:),true))
-%!assert(as(:,(size(as,2):-1:1)),sparse(af(:,(size(af,2):-1:1)),true))
+%!assert(as(ridx,cidx), sparse(af(ridx,cidx)))
+%!assert(as(ridx,:), sparse(af(ridx,:)))
+%!assert(as(:,cidx), sparse(af(:,cidx)))
+%!assert(as(:,:), sparse(af(:,:)))
+%!assert(as((size(as,1):-1:1),:),sparse(af((size(af,1):-1:1),:)))
+%!assert(as(:,(size(as,2):-1:1)),sparse(af(:,(size(af,2):-1:1))))
 
 %% Assignment test
 %!test
 %! ts=as;ts(:,:)=ts(fliplr(1:size(as,1)),:);
 %! tf=af;tf(:,:)=tf(fliplr(1:size(af,1)),:);
-%! assert(ts,sparse(tf,true));
+%! assert(ts,sparse(tf));
 %!test
 %! ts=as;ts(fliplr(1:size(as,1)),:)=ts;
 %! tf=af;tf(fliplr(1:size(af,1)),:)=tf;
-%! assert(ts,sparse(tf,true));
+%! assert(ts,sparse(tf));
 %!test
 %! ts=as;ts(:,fliplr(1:size(as,2)))=ts;
 %! tf=af;tf(:,fliplr(1:size(af,2)))=tf;
-%! assert(ts,sparse(tf,true));
+%! assert(ts,sparse(tf));
 %!test
 %! ts(fliplr(1:size(as,1)))=as(:,1);tf(fliplr(1:size(af,1)))=af(:,1);
-%! assert(ts,sparse(tf,true));
+%! assert(ts,sparse(tf));
 
 %% Deletion tests
 %!test
 %! ts=as;ts(1,:)=[];tf=af;tf(1,:)=[];
-%! assert(ts,sparse(tf,true));
+%! assert(ts,sparse(tf));
 %!test
 %! ts=as;ts(:,1)=[];tf=af;tf(:,1)=[];
-%! assert(ts,sparse(tf,true));
+%! assert(ts,sparse(tf));
 
 %% Test 'end' keyword
 %!assert(full(as(end)), af(end))
 %!assert(full(as(1,end)), af(1,end))
 %!assert(full(as(end,1)), af(end,1))
 %!assert(full(as(end,end)), af(end,end))
-%!assert(as(2:end,2:end), sparse(af(2:end,2:end),true))
-%!assert(as(1:end-1,1:end-1), sparse(af(1:end-1,1:end-1),true))
+%!assert(as(2:end,2:end), sparse(af(2:end,2:end)))
+%!assert(as(1:end-1,1:end-1), sparse(af(1:end-1,1:end-1)))
 EOF
 }
 
 # =======================================================
 # sparse save and load tests
 
 gen_save_tests() {
     cat >>$TESTS <<EOF
@@ -909,19 +909,19 @@ cat >>$TESTS <<EOF
 %! plf = lf(randperm(n),randperm(n)); pls = sparse(plf);
 %! puf = uf(randperm(n),randperm(n)); pus = sparse(puf);
 %! bs = spdiags(repmat([1:n]',1,4),-2:1,n,n).*alpha; bf = full(bs);
 %! cf = lf + lf'; cs = sparse(cf);
 %! bcf = bf + bf'; bcs = sparse(bcf);
 %! tcf = tf + tf'; tcs = sparse(tcf);
 %! xf = diag(1:n) + fliplr(diag(1:n)).*beta; xs = sparse(xf);
 %!assert(ds\xf,df\xf,1e-10);
-%!assert(ds\xs,sparse(df\xf,1),1e-10);
+%!assert(ds\xs,sparse(df\xf),1e-10);
 %!assert(pds\xf,pdf\xf,1e-10);
-%!assert(pds\xs,sparse(pdf\xf,1),1e-10);
+%!assert(pds\xs,sparse(pdf\xf),1e-10);
 %!assert(ls\xf,lf\xf,1e-10);
 %!assert(sparse(ls\xs),sparse(lf\xf),1e-10);
 %!testif HAVE_UMFPACK
 %! assert(pls\xf,plf\xf,1e-10);
 %!testif HAVE_UMFPACK
 %! assert(sparse(pls\xs),sparse(plf\xf),1e-10);
 %!assert(us\xf,uf\xf,1e-10);
 %!assert(sparse(us\xs),sparse(uf\xf),1e-10);
@@ -968,34 +968,34 @@ cat >>$TESTS <<EOF
 %% Rectanguar solver tests that don't use QR
 
 %!test
 %! ds = alpha * spdiags([1:11]',0,10,11);
 %! df = full(ds);
 %! xf = beta * ones(10,2);
 %! xs = speye(10,10);
 %!assert(ds\xf,df\xf,100*eps)
-%!assert(ds\xs,sparse(df\xs,true),100*eps)
+%!assert(ds\xs,sparse(df\xs),100*eps)
 %!test
 %! pds = ds([2,1,3:10],:);
 %! pdf = full(pds);
 %!assert(pds\xf,pdf\xf,100*eps)
-%!assert(pds\xs,sparse(pdf\xs,true),100*eps)
+%!assert(pds\xs,sparse(pdf\xs),100*eps)
 %!test
 %! ds = alpha * spdiags([1:11]',0,11,10);
 %! df = full(ds);
 %! xf = beta * ones(11,2);
 %! xs = speye(11,11);
 %!assert(ds\xf,df\xf,100*eps)
-%!assert(ds\xs,sparse(df\xs,true),100*eps)
+%!assert(ds\xs,sparse(df\xs),100*eps)
 %!test
 %! pds = ds([2,1,3:11],:);
 %! pdf = full(pds);
 %!assert(pds\xf,pdf\xf,100*eps)
-%!assert(pds\xs,sparse(pdf\xs,true),100*eps)
+%!assert(pds\xs,sparse(pdf\xs),100*eps)
 %!test
 %! us = alpha*[[speye(10,10);sparse(1,10)],[[1,1];sparse(9,2);[1,1]]];
 %!testif HAVE_UMFPACK
 %! assert(us*(us\xf),xf,100*eps)
 %!testif HAVE_UMFPACK
 %! assert(us*(us\xs),xs,100*eps)
 %!test
 %! pus = us(:,[2,1,3:12]);
diff --git a/test/test_range.m b/test/test_range.m
--- a/test/test_range.m
+++ b/test/test_range.m
@@ -30,18 +30,18 @@
 %!shared expect, r, z
 %! expect = [ 1 2 3 4 5 6 7 8 9
 %!            0 0 0 0 0 0 0 0 0 ];
 %! z = zeros(1,9);
 %! r = 1:9;
 
 %!assert([ r ; z                  ], expect)
 %!assert([ r ; logical(z)         ], expect)
-%!assert([ r ; sparse(z)          ], sparse (expect, true))
-%!assert([ r ; sparse(logical(z)) ], sparse (expect, true))
+%!assert([ r ; sparse(z)          ], sparse (expect))
+%!assert([ r ; sparse(logical(z)) ], sparse (expect))
 
 %!assert([ r ; int8(z)            ], int8(expect))
 %!assert([ r ; int16(z)           ], int16(expect))
 %!assert([ r ; int32(z)           ], int32(expect))
 %!assert([ r ; int64(z)           ], int64(expect))
 %!assert([ r ; uint8(z)           ], uint8(expect))
 %!assert([ r ; uint16(z)          ], uint16(expect))
 %!assert([ r ; uint32(z)          ], uint32(expect))
@@ -53,18 +53,18 @@
 %!shared expect, r, z
 %! expect = [ 1.0 1.4 1.8 2.2 2.6 3.0
 %!            0   0   0   0   0   0   ];
 %! z = zeros(1,6);
 %! r = 1:0.4:3;
 
 %!assert([ r ; z                  ], expect)
 %!assert([ r ; logical(z)         ], expect)
-%!assert([ r ; sparse(z)          ], sparse (expect, true))
-%!assert([ r ; sparse(logical(z)) ], sparse (expect, true))
+%!assert([ r ; sparse(z)          ], sparse (expect))
+%!assert([ r ; sparse(logical(z)) ], sparse (expect))
 
 %!assert([ r ; int8(z)            ], int8(expect))
 %!assert([ r ; int16(z)           ], int16(expect))
 %!assert([ r ; int32(z)           ], int32(expect))
 %!assert([ r ; int64(z)           ], int64(expect))
 %!assert([ r ; uint8(z)           ], uint8(expect))
 %!assert([ r ; uint16(z)          ], uint16(expect))
 %!assert([ r ; uint32(z)          ], uint32(expect))
