# HG changeset patch
# User Rik <rik@octave.org>
# Date 1519695321 28800
#      Mon Feb 26 17:35:21 2018 -0800
# Node ID 74a596fd6bab29a79af41a3974fba65742929d2e
# Parent  45470049a43f0bbbbcbec2615b67916f4f3f36e4
Fix unused variable warning in Range elem(i,j) function introduced in 0d21e2a1cdfc.

* Range.h (elem (octave_idx_type i, octave_idx_type j)): Move simple one-line
function from Range.cc to header file so that it can be inlined by compiler.
Only declare type of first unused input to establish function signature, but
don't use a name to avoid unused variable warning.

* Range.cc (elem (octave_idx_type i, octave_idx_type j)): Deleted function.

diff --git a/liboctave/array/Range.cc b/liboctave/array/Range.cc
--- a/liboctave/array/Range.cc
+++ b/liboctave/array/Range.cc
@@ -100,22 +100,16 @@ Range::elem (octave_idx_type i) const
   if (i == 0)
     return rng_base;
   else if (i < rng_numel - 1)
     return rng_base + i * rng_inc;
   else
     return rng_limit;
 }
 
-double
-Range::elem (octave_idx_type i, octave_idx_type j) const
-{
-  return elem (j);
-}
-
 // Helper class used solely for idx_vector.loop () function call
 class __rangeidx_helper
 {
 public:
   __rangeidx_helper (double *a, double b, double i, double l, octave_idx_type n)
     : array (a), base (b), inc (i), limit (l), nmax (n-1) { }
 
   void operator () (octave_idx_type i)
diff --git a/liboctave/array/Range.h b/liboctave/array/Range.h
--- a/liboctave/array/Range.h
+++ b/liboctave/array/Range.h
@@ -119,17 +119,18 @@ public:
   { return issorted (mode); }
 
   // Support for single-index subscripting, without generating matrix cache.
 
   double checkelem (octave_idx_type i) const;
   double checkelem (octave_idx_type i, octave_idx_type j) const;
 
   double elem (octave_idx_type i) const;
-  double elem (octave_idx_type i, octave_idx_type j) const;
+  double elem (octave_idx_type /* i */, octave_idx_type j) const
+  { return elem (j); }
 
   double operator () (octave_idx_type i) const { return elem (i); }
   double operator () (octave_idx_type i, octave_idx_type j) const
   { return elem (i, j); }
 
   Array<double> index (const idx_vector& i) const;
 
   void set_base (double b);
