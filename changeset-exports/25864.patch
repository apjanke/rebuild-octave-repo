# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1536414847 14400
#      Sat Sep 08 09:54:07 2018 -0400
# Node ID baeb93e9febc98f286970d3c024159a7b876ff4b
# Parent  8a6bf76abf31694871d2d2e9fc7bc8926b8c1a3e
allow building without OpenGL to work again

diff --git a/libgui/graphics/module.mk b/libgui/graphics/module.mk
--- a/libgui/graphics/module.mk
+++ b/libgui/graphics/module.mk
@@ -1,10 +1,12 @@
 if AMCOND_BUILD_QT_GRAPHICS
 
+LIBOCTGUI_GRAPHICS_LIB := %reldir%/libgui-graphics.la
+
 OCTAVE_GUI_GRAPHICS_MOC = \
   %reldir%/moc-annotation-dialog.cc \
   %reldir%/moc-Backend.cc \
   %reldir%/moc-ButtonControl.cc \
   %reldir%/moc-ButtonGroup.cc \
   %reldir%/moc-ContextMenu.cc \
   %reldir%/moc-EditControl.cc \
   %reldir%/moc-Figure.cc \
@@ -142,17 +144,17 @@ nodist_%canon_reldir%_%canon_reldir%_la_
   -Iliboctave/operators -I$(srcdir)/liboctave/operators \
   -I$(srcdir)/liboctave/system \
   -I$(srcdir)/liboctave/util \
   -Ilibinterp -I$(srcdir)/libinterp \
   -Ilibinterp/parse-tree -I$(srcdir)/libinterp/parse-tree \
   -Ilibinterp/corefcn -I$(srcdir)/libinterp/corefcn \
   -I$(srcdir)/libinterp/octave-value
 
-noinst_LTLIBRARIES += %reldir%/libgui-graphics.la
+noinst_LTLIBRARIES += $(LIBOCTGUI_GRAPHICS_LIB)
 
 libgui_EXTRA_DIST += \
   %reldir%/qthandles.qrc \
   %reldir%/images/README \
   %reldir%/images/pan.png \
   %reldir%/images/rotate.png \
   %reldir%/images/select.png \
   %reldir%/images/zoom-in.png \
diff --git a/libgui/graphics/qopengl-functions.h b/libgui/graphics/qopengl-functions.h
--- a/libgui/graphics/qopengl-functions.h
+++ b/libgui/graphics/qopengl-functions.h
@@ -70,32 +70,34 @@ namespace octave
       m_glfcns.glBegin (mode);
     }
 
     void glBindTexture (GLenum target, GLuint texture)
     {
       m_glfcns.glBindTexture (target, texture);
     }
 
-    void glBitmap (GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap)
+    void glBitmap (GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig,
+                   GLfloat xmove, GLfloat ymove, const GLubyte *bitmap)
     {
       m_glfcns.glBitmap (width, height, xorig, yorig, xmove, ymove, bitmap);
     }
 
     void glBlendFunc (GLenum sfactor, GLenum dfactor)
     {
       m_glfcns.glBlendFunc (sfactor, dfactor);
     }
 
     void glCallList (GLuint list)
     {
       m_glfcns.glCallList (list);
     }
 
-    void glClearColor (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
+    void glClearColor (GLclampf red, GLclampf green, GLclampf blue,
+                       GLclampf alpha)
     {
       m_glfcns.glClearColor (red, green, blue, alpha);
     }
 
     void glClear (GLbitfield mask)
     {
       m_glfcns.glClear (mask);
     }
@@ -150,17 +152,18 @@ namespace octave
       m_glfcns.glDepthFunc (func);
     }
 
     void glDisable (GLenum cap)
     {
       m_glfcns.glDisable (cap);
     }
 
-    void glDrawPixels (GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
+    void glDrawPixels (GLsizei width, GLsizei height, GLenum format,
+                       GLenum type, const GLvoid *pixels)
     {
       m_glfcns.glDrawPixels (width, height, format, type, pixels);
     }
 
     void glEdgeFlag (GLboolean flag)
     {
       m_glfcns.glEdgeFlag (flag);
     }
@@ -290,17 +293,18 @@ namespace octave
       m_glfcns.glNormal3d (nx, ny, nz);
     }
 
     void glNormal3dv (const GLdouble *v)
     {
       m_glfcns.glNormal3dv (v);
     }
 
-    void glOrtho (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble near_val, GLdouble far_val)
+    void glOrtho (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top,
+                  GLdouble near_val, GLdouble far_val)
     {
       m_glfcns.glOrtho (left, right, bottom, top, near_val, far_val);
     }
 
     void glPixelStorei (GLenum pname, GLint param)
     {
       m_glfcns.glPixelStorei (pname, param);
     }
@@ -350,17 +354,18 @@ namespace octave
       m_glfcns.glPushName (name);
     }
 
     void glRasterPos3d (GLdouble x, GLdouble y, GLdouble z)
     {
       m_glfcns.glRasterPos3d (x, y, z);
     }
 
-    void glReadPixels (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels)
+    void glReadPixels (GLint x, GLint y, GLsizei width, GLsizei height,
+                       GLenum format, GLenum type, GLvoid *pixels)
     {
       m_glfcns.glReadPixels (x, y, width, height, format, type, pixels);
     }
 
     GLint glRenderMode (GLenum mode)
     {
       return m_glfcns.glRenderMode (mode);
     }
@@ -390,19 +395,22 @@ namespace octave
       m_glfcns.glShadeModel (mode);
     }
 
     void glTexCoord2d (GLdouble s, GLdouble t)
     {
       m_glfcns.glTexCoord2d (s, t);
     }
 
-    void glTexImage2D (GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
+    void glTexImage2D (GLenum target, GLint level, GLint internalFormat,
+                       GLsizei width, GLsizei height, GLint border,
+                       GLenum format, GLenum type, const GLvoid *pixels)
     {
-      m_glfcns.glTexImage2D (target, level, internalFormat, width, height, border, format, type, pixels);
+      m_glfcns.glTexImage2D (target, level, internalFormat, width, height,
+                             border, format, type, pixels);
     }
 
     void glTexParameteri (GLenum target, GLenum pname, GLint param)
     {
       m_glfcns.glTexParameteri (target, pname, param);
     }
 
     void glTranslated (GLdouble x, GLdouble y, GLdouble z)
diff --git a/libgui/module.mk b/libgui/module.mk
--- a/libgui/module.mk
+++ b/libgui/module.mk
@@ -48,17 +48,17 @@ nodist_%canon_reldir%_liboctgui_la_SOURC
   $(AM_CPPFLAGS) \
   @OCTGUI_DLL_DEFS@ \
   -Ilibgui \
   -I$(srcdir)/libgui
 
 %canon_reldir%_liboctgui_la_LIBADD = \
   %reldir%/qterminal/libqterminal.la \
   %reldir%/src/libgui-src.la \
-  %reldir%/graphics/libgui-graphics.la \
+  $(LIBOCTGUI_GRAPHICS_LIB) \
   libinterp/liboctinterp.la \
   liboctave/liboctave.la \
   $(LIBOCTGUI_LINK_DEPS)
 
 ## Increment the following version numbers as needed and according
 ## to the rules in the etc/HACKING.md file:
 
 %canon_reldir%_liboctgui_current = 4
diff --git a/libinterp/corefcn/gl-render.cc b/libinterp/corefcn/gl-render.cc
--- a/libinterp/corefcn/gl-render.cc
+++ b/libinterp/corefcn/gl-render.cc
@@ -4363,40 +4363,33 @@ namespace octave
     // This shouldn't happen because construction of opengl_renderer
     // objects is supposed to be impossible if OpenGL is not available.
 
     panic_impossible ();
 
 #endif
   }
 
+#if defined (HAVE_OPENGL)
+
   std::string
   opengl_renderer::get_string (GLenum id) const
   {
-#if defined (HAVE_OPENGL)
-
     // This is kind of ugly, but glGetString returns a pointer to GLubyte
     // and there is no std::string constructor that matches.  Is there a
     // better way?
 
     std::ostringstream buf;
+
     buf << m_glfcns.glGetString (id);
+
     return std::string (buf.str ());
-
-#else
-
-    octave_unused_parameter (id);
-
-    // This shouldn't happen because construction of opengl_renderer
-    // objects is supposed to be impossible if OpenGL is not available.
-
-    panic_impossible ();
+  }
 
 #endif
-  }
 
   void
   opengl_renderer::set_normal (int bfl_mode, const NDArray& n, int j, int i)
   {
 #if defined (HAVE_OPENGL)
 
     double x = n(j,i,0);
     double y = n(j,i,1);
diff --git a/libinterp/corefcn/gl-render.h b/libinterp/corefcn/gl-render.h
--- a/libinterp/corefcn/gl-render.h
+++ b/libinterp/corefcn/gl-render.h
@@ -161,17 +161,19 @@ namespace octave
                                    int& wmax, int& hmax);
 
     virtual void draw_zoom_rect (int x1, int y1, int x2, int y2);
 
   private:
 
     void init_maxlights (void);
 
+#if defined (HAVE_OPENGL)
     std::string get_string (GLenum id) const;
+#endif
 
     bool is_nan_or_inf (double x, double y, double z) const
     {
       return (math::isnan (x) || math::isnan (y)
               || math::isnan (z)
               || math::isinf (x) || math::isinf (y)
               || math::isinf (z));
     }
diff --git a/libinterp/corefcn/oct-opengl.h b/libinterp/corefcn/oct-opengl.h
--- a/libinterp/corefcn/oct-opengl.h
+++ b/libinterp/corefcn/oct-opengl.h
@@ -22,18 +22,16 @@ along with Octave; see the file COPYING.
 
 #if ! defined (octave_oct_opengl_h)
 #define octave_oct_opengl_h 1
 
 #include "octave-config.h"
 
 #if defined (HAVE_OPENGL)
 
-#  include <functional>
-
 #  if defined (HAVE_GL_GL_H)
 #    include <GL/gl.h>
 #  elif defined (HAVE_OPENGL_GL_H) || defined (HAVE_FRAMEWORK_OPENGL)
 #    include <OpenGL/gl.h>
 #  endif
 
 #  if defined (HAVE_GL_GLU_H)
 #    include <GL/glu.h>
@@ -42,61 +40,72 @@ along with Octave; see the file COPYING.
 #  endif
 
 #  if defined (HAVE_GL_GLEXT_H)
 #    include <GL/glext.h>
 #  elif defined (HAVE_OPENGL_GLEXT_H) || defined (HAVE_FRAMEWORK_OPENGL)
 #    include <OpenGL/glext.h>
 #  endif
 
+#endif
+
 namespace octave
 {
   class opengl_functions
   {
   public:
 
     opengl_functions (void) { }
 
     opengl_functions (const opengl_functions&) = default;
 
     opengl_functions& operator = (const opengl_functions&) = default;
 
     virtual ~opengl_functions (void) = default;
 
+#if defined (HAVE_OPENGL)
+
+    // If OpenGL is not available, opengl_functions will be a dummy
+    // class that does nothing.  This makes the implementation of
+    // other things that rely on this class slightly simpler.
+
     virtual void glAlphaFunc (GLenum func, GLclampf ref)
     {
       ::glAlphaFunc (func, ref);
     }
 
     virtual void glBegin (GLenum mode)
     {
       ::glBegin (mode);
     }
 
     virtual void glBindTexture (GLenum target, GLuint texture)
     {
       ::glBindTexture (target, texture);
     }
 
-    virtual void glBitmap (GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap)
+    virtual void glBitmap (GLsizei width, GLsizei height, GLfloat xorig,
+                           GLfloat yorig, GLfloat xmove, GLfloat ymove,
+                           const GLubyte *bitmap)
     {
       ::glBitmap (width, height, xorig, yorig, xmove, ymove, bitmap);
     }
 
     virtual void glBlendFunc (GLenum sfactor, GLenum dfactor)
     {
       ::glBlendFunc (sfactor, dfactor);
     }
 
     virtual void glCallList (GLuint list)
     {
       ::glCallList (list);
     }
 
-    virtual void glClearColor (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
+    virtual void glClearColor (GLclampf red, GLclampf green, GLclampf blue,
+                               GLclampf alpha)
     {
       ::glClearColor (red, green, blue, alpha);
     }
 
     virtual void glClear (GLbitfield mask)
     {
       ::glClear (mask);
     }
@@ -116,22 +125,24 @@ namespace octave
       ::glColor3f (red, green, blue);
     }
 
     virtual void glColor3fv (const GLfloat *v)
     {
       ::glColor3fv (v);
     }
 
-    virtual void glColor4d (GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha)
+    virtual void glColor4d (GLdouble red, GLdouble green, GLdouble blue,
+                            GLdouble alpha)
     {
       ::glColor4d (red, green, blue, alpha);
     }
 
-    virtual void glColor4f (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
+    virtual void glColor4f (GLfloat red, GLfloat green, GLfloat blue,
+                            GLfloat alpha)
     {
       ::glColor4f (red, green, blue, alpha);
     }
 
     virtual void glColor4fv (const GLfloat *v)
     {
       ::glColor4fv (v);
     }
@@ -151,17 +162,18 @@ namespace octave
       ::glDepthFunc (func);
     }
 
     virtual void glDisable (GLenum cap)
     {
       ::glDisable (cap);
     }
 
-    virtual void glDrawPixels (GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
+    virtual void glDrawPixels (GLsizei width, GLsizei height, GLenum format,
+                               GLenum type, const GLvoid *pixels)
     {
       ::glDrawPixels (width, height, format, type, pixels);
     }
 
     virtual void glEdgeFlag (GLboolean flag)
     {
       ::glEdgeFlag (flag);
     }
@@ -291,17 +303,18 @@ namespace octave
       ::glNormal3d (nx, ny, nz);
     }
 
     virtual void glNormal3dv (const GLdouble *v)
     {
       ::glNormal3dv (v);
     }
 
-    virtual void glOrtho (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble near_val, GLdouble far_val)
+    virtual void glOrtho (GLdouble left, GLdouble right, GLdouble bottom,
+                          GLdouble top, GLdouble near_val, GLdouble far_val)
     {
       ::glOrtho (left, right, bottom, top, near_val, far_val);
     }
 
     virtual void glPixelStorei (GLenum pname, GLint param)
     {
       ::glPixelStorei (pname, param);
     }
@@ -351,17 +364,18 @@ namespace octave
       ::glPushName (name);
     }
 
     virtual void glRasterPos3d (GLdouble x, GLdouble y, GLdouble z)
     {
       ::glRasterPos3d (x, y, z);
     }
 
-    virtual void glReadPixels (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels)
+    virtual void glReadPixels (GLint x, GLint y, GLsizei width, GLsizei height,
+                               GLenum format, GLenum type, GLvoid *pixels)
     {
       ::glReadPixels (x, y, width, height, format, type, pixels);
     }
 
     virtual GLint glRenderMode (GLenum mode)
     {
       return ::glRenderMode (mode);
     }
@@ -391,19 +405,21 @@ namespace octave
       ::glShadeModel (mode);
     }
 
     virtual void glTexCoord2d (GLdouble s, GLdouble t)
     {
       ::glTexCoord2d (s, t);
     }
 
-    virtual void glTexImage2D (GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
+    virtual void glTexImage2D (GLenum target, GLint level, GLint internalFormat,
+                               GLsizei width, GLsizei height, GLint border,
+                               GLenum format, GLenum type, const GLvoid *pixels)
     {
-      ::glTexImage2D (target, level, internalFormat, width, height, border, format, type, pixels);
+      ::glTexImage2D (target, level, internalFormat, width, height, border,
     }
 
     virtual void glTexParameteri (GLenum target, GLenum pname, GLint param)
     {
       ::glTexParameteri (target, pname, param);
     }
 
     virtual void glTranslated (GLdouble x, GLdouble y, GLdouble z)
@@ -430,14 +446,15 @@ namespace octave
     {
       ::glVertex3dv (v);
     }
 
     virtual void glViewport (GLint x, GLint y, GLsizei width, GLsizei height)
     {
       ::glViewport (x, y, width, height);
     }
+
+#endif
   };
 }
 
-#endif
 
 #endif
diff --git a/libinterp/dldfcn/__init_fltk__.cc b/libinterp/dldfcn/__init_fltk__.cc
--- a/libinterp/dldfcn/__init_fltk__.cc
+++ b/libinterp/dldfcn/__init_fltk__.cc
@@ -122,20 +122,24 @@ class OpenGL_fltk : public Fl_Gl_Window
 {
 public:
 
   OpenGL_fltk (int xx, int yy, int ww, int hh, double num)
     : Fl_Gl_Window (xx, yy, ww, hh, nullptr), m_number (num),
       m_glfcns (), m_renderer (m_glfcns), m_in_zoom (false), m_zoom_box ()
   {
 #if defined (HAVE_OPENGL)
+
     // Ask for double buffering and a depth buffer.
     mode (FL_DEPTH | FL_DOUBLE | FL_MULTISAMPLE);
+
 #else
+
     err_disabled_feature ("OpenGL_fltk", "OpenGL");
+
 #endif
   }
 
   ~OpenGL_fltk (void) = default;
 
   void zoom (bool z)
   {
     m_in_zoom = z;
@@ -162,20 +166,27 @@ public:
 
   void resize (int xx, int yy, int ww, int hh)
   {
 #if defined (HAVE_OPENGL)
 
     Fl_Gl_Window::resize (xx, yy, ww, hh);
 
 #else
+
+    octave_unused_parameter (xx);
+    octave_unused_parameter (yy);
+    octave_unused_parameter (ww);
+    octave_unused_parameter (hh);
+
     // This shouldn't happen because construction of Opengl_fltk
     // objects is supposed to be impossible if OpenGL is not available.
 
     panic_impossible ();
+
 #endif
   }
 
   bool renumber (double new_number)
   {
     bool retval = false;
 
     if (m_number != new_number)
@@ -211,20 +222,22 @@ private:
       }
 
     m_renderer.draw (gh_manager::get_object (m_number));
 
     if (zoom ())
       overlay ();
 
 #else
+
     // This shouldn't happen because construction of Opengl_fltk
     // objects is supposed to be impossible if OpenGL is not available.
 
     panic_impossible ();
+
 #endif
   }
 
   void overlay (void)
   {
     Matrix overlaycolor (3, 1);
     overlaycolor(0) = 0.45;
     overlaycolor(1) = 0.62;
@@ -254,20 +267,24 @@ private:
       case FL_LEAVE:
         cursor (FL_CURSOR_DEFAULT);
         return 1;
       }
 
     return Fl_Gl_Window::handle (event);
 
 #else
+
+    octave_unused_parameter (event);
+
     // This shouldn't happen because construction of Opengl_fltk
     // objects is supposed to be impossible if OpenGL is not available.
 
     panic_impossible ();
+
 #endif
   }
 };
 
 void script_cb (Fl_Widget *, void *data)
 {
   static_cast<uimenu::properties *> (data)->execute_callback ();
 }
