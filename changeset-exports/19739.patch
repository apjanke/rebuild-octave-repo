# HG changeset patch
# User Rik <rik@octave.org>
# Date 1424208872 28800
#      Tue Feb 17 13:34:32 2015 -0800
# Node ID 3fa35defe495fe8daf6216bac5dcfa1dcac357bc
# Parent  9155bab86647ac9d2e617d2b4e1c65deddd882e7
Adjust spacing of static_cast<> calls to follow Octave coding conventions.

* __init_qt__.cc, file-editor.cc, main-window.cc, bsxfun.cc, data.cc,
filter.cc, gammainc.cc, ls-hdf5.cc, mex.cc, oct-stream.cc, lo-mappers.cc,
lo-specfun.cc, data-conv.cc, lo-regexp.cc, oct-inttypes.h:
Adjust spacing of static_cast<> calls to follow Octave coding conventions.

diff --git a/libgui/graphics/__init_qt__.cc b/libgui/graphics/__init_qt__.cc
--- a/libgui/graphics/__init_qt__.cc
+++ b/libgui/graphics/__init_qt__.cc
@@ -194,17 +194,17 @@ DEFUN (__uigetfile_qt__, args, , "")
   QString defaultFileName = fromStdString (args(2).string_value ());
   bool isMultiSelect = (args(4).string_value () == "on");
 
   if (isMultiSelect)
     retval(0) = Cell ();
   else
     retval(0) = "";
   retval(1) = "";
-  retval(2) = static_cast<double> (0);
+  retval(2) = 0.0;
 
   if (defaultFileName.isEmpty ())
     defaultFileName = defaultDirectory;
   else
     defaultFileName = defaultDirectory + "/" + defaultFileName;
 
   QStringList filterSpecs = makeFilterSpecs (args(0).cell_value ());
 
@@ -272,17 +272,17 @@ DEFUN (__uiputfile_qt__, args, , "")
   octave_value_list retval (3);
 
   QString caption = fromStdString (args(1).string_value ());
   QString defaultDirectory = fromStdString (args(5).string_value ());
   QString defaultFileName = fromStdString (args(2).string_value ());
 
   retval(0) = "";
   retval(1) = "";
-  retval(2) = static_cast<double> (0);
+  retval(2) = 0.0;
 
   if (defaultFileName.isEmpty ())
     defaultFileName = defaultDirectory;
   else
     defaultFileName = defaultDirectory + "/" + defaultFileName;
 
   QStringList filterSpecs = makeFilterSpecs (args(0).cell_value ());
 
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -932,57 +932,57 @@ file_editor::handle_file_name_changed (c
         }
     }
 }
 
 void
 file_editor::request_close_file (bool)
 {
   file_editor_tab *editor_tab =
-      static_cast <file_editor_tab *> (_tab_widget->currentWidget ());
+      static_cast<file_editor_tab *> (_tab_widget->currentWidget ());
   editor_tab->conditional_close ();
 }
 
 void
 file_editor::request_close_all_files (bool)
 {
   file_editor_tab *editor_tab;
 
   // loop over all tabs starting from last one otherwise deletion changes index
   for (int index = _tab_widget->count ()-1; index >= 0; index--)
     {
-      editor_tab = static_cast <file_editor_tab *> (_tab_widget->widget (index));
+      editor_tab = static_cast<file_editor_tab *> (_tab_widget->widget (index));
       editor_tab->conditional_close ();
     }
 }
 
 void
 file_editor::request_close_other_files (bool)
 {
   file_editor_tab *editor_tab;
   QWidget *tabID = _tab_widget->currentWidget ();
 
   // loop over all tabs starting from last one otherwise deletion changes index
   for (int index = _tab_widget->count ()-1; index >= 0; index--)
     {
       if (tabID != _tab_widget->widget (index))
         {
           editor_tab =
-              static_cast <file_editor_tab *> (_tab_widget->widget (index));
+              static_cast<file_editor_tab *> (_tab_widget->widget (index));
           editor_tab->conditional_close ();
         }
     }
 }
 
 
 void
 file_editor::handle_tab_close_request (int index)
 {
   file_editor_tab *editor_tab =
-       static_cast <file_editor_tab *> (_tab_widget->widget (index));
+       static_cast<file_editor_tab *> (_tab_widget->widget (index));
   editor_tab->conditional_close ();
 }
 
 void
 file_editor::handle_tab_remove_request (void)
 {
   QObject *fileEditorTab = sender ();
   if (fileEditorTab)
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -178,31 +178,31 @@ main_window::focus_changed (QWidget *, Q
     {
       dock = qobject_cast <octave_dock_widget *> (w_new);
       if (dock)
         break; // it is a QDockWidget ==> exit loop
 
 #ifdef HAVE_QSCINTILLA
       if (qobject_cast <octave_qscintilla *> (w_new))
         {
-          dock = static_cast <octave_dock_widget *> (editor_window);
+          dock = static_cast<octave_dock_widget *> (editor_window);
           break; // it is the editor window ==> exit loop
         }
 #endif
 
       w_new = qobject_cast <QWidget *> (w_new->previousInFocusChain ());
       if (w_new == start)
         break; // we have arrived where we began ==> exit loop
 
       count++;
     }
 
   // editor needs extra handling
   octave_dock_widget *edit_dock_widget =
-                        static_cast <octave_dock_widget *> (editor_window);
+                        static_cast<octave_dock_widget *> (editor_window);
   // if new dock has focus, emit signal and store active focus
   // except editor changes to a dialog (dock=0)
   if ((dock || _active_dock != edit_dock_widget) && (dock != _active_dock))
     {
       // signal to all dock widgets for updating the style
       emit active_dock_changed (_active_dock, dock);
 
       if (edit_dock_widget == dock)
diff --git a/libinterp/corefcn/bsxfun.cc b/libinterp/corefcn/bsxfun.cc
--- a/libinterp/corefcn/bsxfun.cc
+++ b/libinterp/corefcn/bsxfun.cc
@@ -282,17 +282,17 @@ maybe_update_column (octave_value& Ac, c
 static void
 update_index (octave_value_list& idx, const dim_vector& dv, octave_idx_type i)
 {
   octave_idx_type nd = dv.length ();
 
   if (i == 0)
     {
       for (octave_idx_type j = nd - 1; j > 0; j--)
-        idx(j) = octave_value (static_cast<double>(1));
+        idx(j) = octave_value (1.0);
       idx(0) = octave_value (':');
     }
   else
     {
       for (octave_idx_type j = 1; j < nd; j++)
         {
           idx (j) = octave_value (i % dv (j) + 1);
           i = i / dv (j);
diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -4214,17 +4214,17 @@ fill_matrix (const octave_value_list& ar
       // Note that automatic narrowing will handle conversion from
       // NDArray to scalar.
 
       if (! error_state)
         {
           switch (dt)
             {
             case oct_data_conv::dt_single:
-              retval = FloatNDArray (dims, static_cast <float> (val));
+              retval = FloatNDArray (dims, static_cast<float> (val));
               break;
 
             case oct_data_conv::dt_double:
               retval = NDArray (dims, val);
               break;
 
             default:
               error ("%s: invalid class name", fcn);
@@ -4664,17 +4664,17 @@ either @qcode{\"double\"} or @qcode{\"si
                     epsval(i) = lo_ieee_nan_value ();
                   else if (val < std::numeric_limits<float>::min ())
                     epsval(i) = powf (2.0, -149e0);
                   else
                     {
                       int expon;
                       gnulib::frexpf (val, &expon);
                       epsval(i) = std::pow (2.0f,
-                                            static_cast <float> (expon - 24));
+                                            static_cast<float> (expon - 24));
                     }
                 }
               retval = epsval;
             }
         }
       else
         {
           Array<double> x = args(0).array_value ();
@@ -4689,18 +4689,18 @@ either @qcode{\"double\"} or @qcode{\"si
                   if (xisnan (val) || xisinf (val))
                     epsval(i) = lo_ieee_nan_value ();
                   else if (val < std::numeric_limits<double>::min ())
                     epsval(i) = pow (2.0, -1074e0);
                   else
                     {
                       int expon;
                       gnulib::frexp (val, &expon);
-                      epsval(i) = std::pow (static_cast <double> (2.0),
-                                            static_cast <double> (expon - 53));
+                      epsval(i) = std::pow (2.0,
+                                            static_cast<double> (expon - 53));
                     }
                   retval = epsval;
                 }
             }
         }
     }
   else
     retval = fill_matrix (args, std::numeric_limits<double>::epsilon (),
diff --git a/libinterp/corefcn/filter.cc b/libinterp/corefcn/filter.cc
--- a/libinterp/corefcn/filter.cc
+++ b/libinterp/corefcn/filter.cc
@@ -70,17 +70,17 @@ filter (MArray<T>& b, MArray<T>& a, MArr
   //        already.  However the a.resize line is currently (2011/04/26)
   //        necessary to stop bug #33164.
   b.resize (dim_vector (ab_len, 1), 0.0);
   if (a_len > 1)
     a.resize (dim_vector (ab_len, 1), 0.0);
 
   T norm = a (0);
 
-  if (norm == static_cast<T>(0.0))
+  if (norm == static_cast<T> (0.0))
     {
       error ("filter: the first element of A must be nonzero");
       return y;
     }
 
   dim_vector x_dims = x.dims ();
   if (dim < 0 || dim > x_dims.length ())
     {
@@ -120,17 +120,17 @@ filter (MArray<T>& b, MArray<T>& a, MArr
           error ("filter: dimensionality of SI and X must agree");
           return y;
         }
     }
 
   if (x_len == 0)
     return x;
 
-  if (norm != static_cast<T>(1.0))
+  if (norm != static_cast<T> (1.0))
     {
       a = a / norm;
       b = b / norm;
     }
 
   if (a_len <= 1 && si_len <= 0)
     return b(0) * x;
 
diff --git a/libinterp/corefcn/gammainc.cc b/libinterp/corefcn/gammainc.cc
--- a/libinterp/corefcn/gammainc.cc
+++ b/libinterp/corefcn/gammainc.cc
@@ -112,53 +112,49 @@ gammainc (@var{x}, @var{a}) @equiv{} 1 -
               if (! error_state)
                 {
                   if (a_arg.is_scalar_type ())
                     {
                       float a = a_arg.float_value ();
 
                       if (! error_state)
                         retval = lower ? gammainc (x, a)
-                                       : static_cast<float>(1)
-                                         - gammainc (x, a);
+                                       : 1.0f - gammainc (x, a);
                     }
                   else
                     {
                       FloatNDArray a = a_arg.float_array_value ();
 
                       if (! error_state)
                         retval = lower ? gammainc (x, a)
-                                       : static_cast<float>(1)
-                                         - gammainc (x, a);
+                                       : 1.0f - gammainc (x, a);
                     }
                 }
             }
           else
             {
               FloatNDArray x = x_arg.float_array_value ();
 
               if (! error_state)
                 {
                   if (a_arg.is_scalar_type ())
                     {
                       float a = a_arg.float_value ();
 
                       if (! error_state)
                         retval = lower ? gammainc (x, a)
-                                       : static_cast<float>(1)
-                                         - gammainc (x, a);
+                                       : 1.0f - gammainc (x, a);
                     }
                   else
                     {
                       FloatNDArray a = a_arg.float_array_value ();
 
                       if (! error_state)
                         retval = lower ? gammainc (x, a)
-                                       : static_cast<float>(1)
-                                         - gammainc (x, a);
+                                       : 1.0f - gammainc (x, a);
                     }
                 }
             }
         }
       else
         {
           if (x_arg.is_scalar_type ())
             {
diff --git a/libinterp/corefcn/ls-hdf5.cc b/libinterp/corefcn/ls-hdf5.cc
--- a/libinterp/corefcn/ls-hdf5.cc
+++ b/libinterp/corefcn/ls-hdf5.cc
@@ -242,17 +242,17 @@ hdf5_make_complex_type (hid_t num_type)
 //
 // It returns 1 on success (in which case H5Giterate stops and returns),
 // -1 on error, and 0 to tell H5Giterate to continue on to the next item
 // (e.g. if NAME was a data type we don't recognize).
 
 herr_t
 hdf5_read_next_data (hid_t group_id, const char *name, void *dv)
 {
-  hdf5_callback_data *d = static_cast <hdf5_callback_data *> (dv);
+  hdf5_callback_data *d = static_cast<hdf5_callback_data *> (dv);
   hid_t type_id = -1;
   hid_t type_class_id = -1;
   hid_t data_id = -1;
   hid_t subgroup_id = -1;
   hid_t space_id = -1;;
 
   H5G_stat_t info;
   herr_t retval = 0;
diff --git a/libinterp/corefcn/mex.cc b/libinterp/corefcn/mex.cc
--- a/libinterp/corefcn/mex.cc
+++ b/libinterp/corefcn/mex.cc
@@ -2891,17 +2891,17 @@ mwSize
 mxGetNzmax (const mxArray *ptr)
 {
   return ptr->get_nzmax ();
 }
 
 void
 mxSetIr (mxArray *ptr, mwIndex *ir)
 {
-  ptr->set_ir (static_cast <mwIndex *> (maybe_unmark (ir)));
+  ptr->set_ir (static_cast<mwIndex *> (maybe_unmark (ir)));
 }
 
 void
 mxSetJc (mxArray *ptr, mwIndex *jc)
 {
   ptr->set_jc (static_cast<mwIndex *> (maybe_unmark (jc)));
 }
 
diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -3585,17 +3585,17 @@ convert_chars (const void *data, void *c
 
 template <class T, class V>
 static void
 convert_ints (const T *data, void *conv_data, octave_idx_type n_elts,
               bool swap)
 {
   typedef typename V::val_type val_type;
 
-  val_type *vt_data = static_cast <val_type *> (conv_data);
+  val_type *vt_data = static_cast<val_type *> (conv_data);
 
   for (octave_idx_type i = 0; i < n_elts; i++)
     {
       // Yes, we want saturation semantics when converting to an integer
       // type.
 
       V val (data[i]);
 
@@ -3680,31 +3680,31 @@ convert_data (const T *data, void *conv_
       break;
 
     case oct_data_conv::dt_uint64:
       convert_ints<T, octave_uint64> (data, conv_data, n_elts, swap);
       break;
 
     case oct_data_conv::dt_single:
       {
-        float *vt_data = static_cast <float *> (conv_data);
+        float *vt_data = static_cast<float *> (conv_data);
 
         for (octave_idx_type i = 0; i < n_elts; i++)
           {
             vt_data[i] = data[i];
 
             if (do_float_conversion)
               do_float_format_conversion (&vt_data[i], 1, flt_fmt);
           }
       }
       break;
 
     case oct_data_conv::dt_double:
       {
-        double *vt_data = static_cast <double *> (conv_data);
+        double *vt_data = static_cast<double *> (conv_data);
 
         for (octave_idx_type i = 0; i < n_elts; i++)
           {
             vt_data[i] = data[i];
 
             if (do_float_conversion)
               do_double_format_conversion (&vt_data[i], 1, flt_fmt);
           }
diff --git a/liboctave/numeric/lo-mappers.cc b/liboctave/numeric/lo-mappers.cc
--- a/liboctave/numeric/lo-mappers.cc
+++ b/liboctave/numeric/lo-mappers.cc
@@ -470,17 +470,17 @@ atan (const FloatComplex& x)
   static FloatComplex i (0, 1);
 
   return i * log ((i + x) / (i - x)) / 2.0f;
 }
 
 FloatComplex
 atanh (const FloatComplex& x)
 {
-  return log ((1.0f + x) / (static_cast<float> (1.0) - x)) / 2.0f;
+  return log ((1.0f + x) / (1.0f - x)) / 2.0f;
 }
 
 // complex -> bool mappers.
 
 bool
 octave_is_NA (const FloatComplex& x)
 {
   return (octave_is_NA (real (x)) || octave_is_NA (imag (x)));
diff --git a/liboctave/numeric/lo-specfun.cc b/liboctave/numeric/lo-specfun.cc
--- a/liboctave/numeric/lo-specfun.cc
+++ b/liboctave/numeric/lo-specfun.cc
@@ -813,17 +813,17 @@ zbesj (const Complex& z, double alpha, i
 
       retval = bessel_return_value (Complex (yr, yi), ierr);
     }
   else if (is_integer_value (alpha))
     {
       // zbesy can overflow as z->0, and cause troubles for generic case below
       alpha = -alpha;
       Complex tmp = zbesj (z, alpha, kode, ierr);
-      if ((static_cast <long> (alpha)) & 1)
+      if ((static_cast<long> (alpha)) & 1)
         tmp = - tmp;
       retval = bessel_return_value (tmp, ierr);
     }
   else
     {
       alpha = -alpha;
 
       Complex tmp = cos (M_PI * alpha) * zbesj (z, alpha, kode, ierr);
@@ -883,17 +883,17 @@ zbesy (const Complex& z, double alpha, i
 
       return bessel_return_value (Complex (yr, yi), ierr);
     }
   else if (is_integer_value (alpha - 0.5))
     {
       // zbesy can overflow as z->0, and cause troubles for generic case below
       alpha = -alpha;
       Complex tmp = zbesj (z, alpha, kode, ierr);
-      if ((static_cast <long> (alpha - 0.5)) & 1)
+      if ((static_cast<long> (alpha - 0.5)) & 1)
         tmp = - tmp;
       retval = bessel_return_value (tmp, ierr);
     }
   else
     {
       alpha = -alpha;
 
       Complex tmp = cos (M_PI * alpha) * zbesy (z, alpha, kode, ierr);
@@ -1445,17 +1445,17 @@ cbesj (const FloatComplex& z, float alph
 
       retval = bessel_return_value (y, ierr);
     }
   else if (is_integer_value (alpha))
     {
       // zbesy can overflow as z->0, and cause troubles for generic case below
       alpha = -alpha;
       FloatComplex tmp = cbesj (z, alpha, kode, ierr);
-      if ((static_cast <long> (alpha)) & 1)
+      if ((static_cast<long> (alpha)) & 1)
         tmp = - tmp;
       retval = bessel_return_value (tmp, ierr);
     }
   else
     {
       alpha = -alpha;
 
       FloatComplex tmp = cosf (static_cast<float> (M_PI) * alpha)
@@ -1510,17 +1510,17 @@ cbesy (const FloatComplex& z, float alph
 
       return bessel_return_value (y, ierr);
     }
   else if (is_integer_value (alpha - 0.5))
     {
       // zbesy can overflow as z->0, and cause troubles for generic case below
       alpha = -alpha;
       FloatComplex tmp = cbesj (z, alpha, kode, ierr);
-      if ((static_cast <long> (alpha - 0.5)) & 1)
+      if ((static_cast<long> (alpha - 0.5)) & 1)
         tmp = - tmp;
       retval = bessel_return_value (tmp, ierr);
     }
   else
     {
       alpha = -alpha;
 
       FloatComplex tmp = cosf (static_cast<float> (M_PI) * alpha)
@@ -2125,17 +2125,17 @@ airy (const FloatComplex& z, bool deriv,
   float zi = z.imag ();
 
   octave_idx_type id = deriv ? 1 : 0;
 
   F77_FUNC (cairy, CAIRY) (zr, zi, id, 2, ar, ai, nz, ierr);
 
   if (! scaled)
     {
-      FloatComplex expz = exp (- static_cast<float> (2.0 / 3.0) * z * sqrt (z));
+      FloatComplex expz = exp (- 2.0f / 3.0f * z * sqrt (z));
 
       float rexpz = real (expz);
       float iexpz = imag (expz);
 
       float tmp = ar*rexpz - ai*iexpz;
 
       ai = ar*iexpz + ai*rexpz;
       ar = tmp;
@@ -2157,18 +2157,17 @@ biry (const FloatComplex& z, bool deriv,
   float zi = z.imag ();
 
   octave_idx_type id = deriv ? 1 : 0;
 
   F77_FUNC (cbiry, CBIRY) (zr, zi, id, 2, ar, ai, ierr);
 
   if (! scaled)
     {
-      FloatComplex expz = exp (std::abs (real (static_cast<float> (2.0 / 3.0)
-                          * z * sqrt (z))));
+      FloatComplex expz = exp (std::abs (real (2.0f / 3.0f * z * sqrt (z))));
 
       float rexpz = real (expz);
       float iexpz = imag (expz);
 
       float tmp = ar*rexpz - ai*iexpz;
 
       ai = ar*iexpz + ai*rexpz;
       ar = tmp;
diff --git a/liboctave/util/data-conv.cc b/liboctave/util/data-conv.cc
--- a/liboctave/util/data-conv.cc
+++ b/liboctave/util/data-conv.cc
@@ -603,17 +603,17 @@ oct_data_conv::data_type_as_string (oct_
   do \
     { \
       if (len > 0) \
         { \
           char tmp_type = type; \
           stream.write (&tmp_type, 1); \
           OCTAVE_LOCAL_BUFFER (TYPE, ptr, len); \
           for (octave_idx_type i = 0; i < len; i++) \
-            ptr[i] = static_cast <TYPE> (data[i]);         \
+            ptr[i] = static_cast<TYPE> (data[i]);         \
           std::streamsize n_bytes = size * static_cast<std::streamsize> (len); \
           stream.write (reinterpret_cast<char *> (ptr), n_bytes); \
         } \
     } \
   while (0)
 
 // Loading variables from files.
 
diff --git a/liboctave/util/lo-regexp.cc b/liboctave/util/lo-regexp.cc
--- a/liboctave/util/lo-regexp.cc
+++ b/liboctave/util/lo-regexp.cc
@@ -247,17 +247,17 @@ regexp::match (const std::string& buffer
   std::list<regexp::match_element> lst;
 
   int subpatterns;
   int namecount;
   int nameentrysize;
   char *nametable;
   size_t idx = 0;
 
-  pcre *re = static_cast <pcre *> (data);
+  pcre *re = static_cast<pcre *> (data);
 
   pcre_fullinfo (re, 0, PCRE_INFO_CAPTURECOUNT,  &subpatterns);
   pcre_fullinfo (re, 0, PCRE_INFO_NAMECOUNT, &namecount);
   pcre_fullinfo (re, 0, PCRE_INFO_NAMEENTRYSIZE, &nameentrysize);
   pcre_fullinfo (re, 0, PCRE_INFO_NAMETABLE, &nametable);
 
   OCTAVE_LOCAL_BUFFER (int, ovector, (subpatterns+1)*3);
   OCTAVE_LOCAL_BUFFER (int, nidx, namecount);
@@ -285,17 +285,17 @@ regexp::match (const std::string& buffer
           // and increase it.
           (*current_liboctave_warning_with_id_handler)
             ("Octave:regexp-match-limit",
              "your pattern caused PCRE to hit its MATCH_LIMIT; trying harder now, but this will be slow");
 
           pcre_extra pe;
 
           pcre_config (PCRE_CONFIG_MATCH_LIMIT,
-                       static_cast <void *> (&pe.match_limit));
+                       static_cast<void *> (&pe.match_limit));
 
           pe.flags = PCRE_EXTRA_MATCH_LIMIT;
 
           int i = 0;
           while (matches == PCRE_ERROR_MATCHLIMIT
                  && i++ < PCRE_MATCHLIMIT_MAX)
             {
               OCTAVE_QUIT;
diff --git a/liboctave/util/oct-inttypes.h b/liboctave/util/oct-inttypes.h
--- a/liboctave/util/oct-inttypes.h
+++ b/liboctave/util/oct-inttypes.h
@@ -305,17 +305,17 @@ private:
   template <class S>
   static S
   compute_threshold (S val, T orig_val)
   {
     val = xround (val); // Fool optimizations (maybe redundant)
     // If val is even, but orig_val is odd, we're one unit off.
     if (orig_val % 2 && val / 2 == xround (val / 2))
       // FIXME: is this always correct?
-      val *= (static_cast<S>(1) - (std::numeric_limits<S>::epsilon () / 2));
+      val *= (static_cast<S> (1) - (std::numeric_limits<S>::epsilon () / 2));
     return val;
   }
 
 public:
   // Convert a real number (check NaN and non-int).
   template <class S>
   static T
   convert_real (const S& value)
