# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1279785243 -7200
#      Thu Jul 22 09:54:03 2010 +0200
# Node ID 2c2d4a2f104716a536804b6ce11e72fc175809ce
# Parent  5b68000faac16c1ab66402dd832de933d77275dd
fix workspace bug workaround for xGELSD (since 7486:6a6d2abe51ff)

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -2648,17 +2648,17 @@ ComplexMatrix::lssolve (const ComplexMat
       F77_XFCN (zgelsd, ZGELSD, (m, n, nrhs, tmp_data, m, pretval, maxmn,
                                  ps, rcon, rank, work.fortran_vec (),
                                  lwork, prwork, piwork, info));
 
       // The workspace query is broken in at least LAPACK 3.0.0
       // through 3.1.1 when n >= mnthr.  The obtuse formula below
       // should provide sufficient workspace for ZGELSD to operate
       // efficiently.
-      if (n >= mnthr)
+      if (n > m && n >= mnthr)
         {
           octave_idx_type addend = m;
 
           if (2*m-4 > addend)
             addend = 2*m-4;
 
           if (nrhs > addend)
             addend = nrhs;
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,15 @@
+2010-07-22  Jaroslav Hajek  <highegg@gmail.com>
+
+	* dMatrix.cc (Matrix::lssolve): Fix decision test for workaround.
+	* fMatrix.cc (FloatMatrix::lssolve): Ditto.
+	* CMatrix.cc (ComplexMatrix::lssolve): Ditto.
+	* fCMatrix.cc (FloatComplexMatrix::lssolve): Ditto.
+
 2010-07-20  Jaroslav Hajek  <highegg@gmail.com>
 
 	* dim-vector.cc (dim_vector::dim_max): New static const member.
 	* dim-vector.h: Declare it.
 
 2010-07-20  Jaroslav Hajek  <highegg@gmail.com>
 
 	* dMatrix.cc (Matrix::extract, Matrix::extract_n): Reimplement using
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -2289,17 +2289,17 @@ Matrix::lssolve (const Matrix& b, octave
       F77_XFCN (dgelsd, DGELSD, (m, n, nrhs, tmp_data, m, pretval, maxmn,
                                  ps, rcon, rank, work.fortran_vec (),
                                  lwork, piwork, info));
 
       // The workspace query is broken in at least LAPACK 3.0.0
       // through 3.1.1 when n >= mnthr.  The obtuse formula below
       // should provide sufficient workspace for DGELSD to operate
       // efficiently.
-      if (n >= mnthr)
+      if (n > m && n >= mnthr)
         {
           const octave_idx_type wlalsd
             = 9*m + 2*m*smlsiz + 8*m*nlvl + m*nrhs + (smlsiz+1)*(smlsiz+1);
 
           octave_idx_type addend = m;
 
           if (2*m-4 > addend)
             addend = 2*m-4;
diff --git a/liboctave/fCMatrix.cc b/liboctave/fCMatrix.cc
--- a/liboctave/fCMatrix.cc
+++ b/liboctave/fCMatrix.cc
@@ -2641,17 +2641,17 @@ FloatComplexMatrix::lssolve (const Float
       F77_XFCN (cgelsd, CGELSD, (m, n, nrhs, tmp_data, m, pretval, maxmn,
                                  ps, rcon, rank, work.fortran_vec (),
                                  lwork, prwork, piwork, info));
 
       // The workspace query is broken in at least LAPACK 3.0.0
       // through 3.1.1 when n >= mnthr.  The obtuse formula below
       // should provide sufficient workspace for ZGELSD to operate
       // efficiently.
-      if (n >= mnthr)
+      if (n > m && n >= mnthr)
         {
           octave_idx_type addend = m;
 
           if (2*m-4 > addend)
             addend = 2*m-4;
 
           if (nrhs > addend)
             addend = nrhs;
diff --git a/liboctave/fMatrix.cc b/liboctave/fMatrix.cc
--- a/liboctave/fMatrix.cc
+++ b/liboctave/fMatrix.cc
@@ -2288,17 +2288,17 @@ FloatMatrix::lssolve (const FloatMatrix&
       F77_XFCN (sgelsd, SGELSD, (m, n, nrhs, tmp_data, m, pretval, maxmn,
                                  ps, rcon, rank, work.fortran_vec (),
                                  lwork, piwork, info));
 
       // The workspace query is broken in at least LAPACK 3.0.0
       // through 3.1.1 when n >= mnthr.  The obtuse formula below
       // should provide sufficient workspace for DGELSD to operate
       // efficiently.
-      if (n >= mnthr)
+      if (n > m && n >= mnthr)
         {
           const octave_idx_type wlalsd
             = 9*m + 2*m*smlsiz + 8*m*nlvl + m*nrhs + (smlsiz+1)*(smlsiz+1);
 
           octave_idx_type addend = m;
 
           if (2*m-4 > addend)
             addend = 2*m-4;
