# HG changeset patch
# User jwe
# Date 1111632330 0
#      Thu Mar 24 02:45:30 2005 +0000
# Node ID ab89f95de831f23612a6d968d2eaa62fad3d0046
# Parent  2bb31f40c33903d3f04ac20df3cd7efb26eb7edd
[project @ 2005-03-24 02:45:30 by jwe]

diff --git a/scripts/optimization/glpkmex.m b/scripts/optimization/glpkmex.m
--- a/scripts/optimization/glpkmex.m
+++ b/scripts/optimization/glpkmex.m
@@ -83,17 +83,17 @@ function [xopt, fopt, status, extra] = g
     param = struct ();
   endif
 
   if (nargin > 9 && ! isfield (param, "lpsolver"))
     param.lpsolver = varargin{10};
   endif
 
   if (nargin > 10 && ! isfield (param, "save"))
-    param.lpsolver = varargin{11};
+    param.save = varargin{11};
   endif
 
   if (nargout == 0)
     glpk (c, a, b, lb, ub, ctype, vartype, sense, param);
   elseif (nargout == 1)
     xopt = glpk (c, a, b, lb, ub, ctype, vartype, sense, param);
   elseif (nargout == 2)
     [xopt, fopt] = glpk (c, a, b, lb, ub, ctype, vartype, sense, param);
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -2,16 +2,18 @@ 2005-03-23  John W. Eaton  <jwe@octave.o
 
 	* DLD-FUNCTIONS/__glpk__.cc (F__glpk__): Require 9 arguments.
 	Print error messages and return early if value extractions fail.
 	Default for message level now 0.
 	Rename local variable error to be errnum.
 	(glpk_fault_hook): Call message instead of writing to octave_stderr.
 	(glpk_fault_hook): Call error instead of writing to octave_stderr.
 	(glpk): Likewise.
+	Declare mark static.  Delete declaration of fperr.
+	(glpk): Delete unnecessary casts.
 
 	* DLD-FUNCTIONS/__glpk__.cc (OCTAVE_GLPK_GET_REAL_PARAM,
 	OCTAVE_GLPK_GET_INT_PARAM): New macros.
 	(F__glpk__): Use them.
 
 	* DLD-FUNCTIONS/__glpk__.cc (F__glpk__): Accept lpsolver and
 	save_pb in param arg instead of as separate args.
 	Arg list now matches new interface for glpk.m.
diff --git a/src/DLD-FUNCTIONS/__glpk__.cc b/src/DLD-FUNCTIONS/__glpk__.cc
--- a/src/DLD-FUNCTIONS/__glpk__.cc
+++ b/src/DLD-FUNCTIONS/__glpk__.cc
@@ -106,35 +106,32 @@ int RParam[NRealP] = {
   LPX_K_OBJLL,
   LPX_K_OBJUL,
   LPX_K_TMLIM,
   LPX_K_OUTDLY,
   LPX_K_TOLINT,
   LPX_K_TOLOBJ
 };
 
-jmp_buf mark;  //-- Address for long jump to jump to
-int fperr; //-- Global error number
-
+static jmp_buf mark;  //-- Address for long jump to jump to
 
 int
 glpk_fault_hook (void * /* info */, char *msg)
 {
   error ("CRITICAL ERROR in GLPK: %s", msg);
   longjmp (mark, -1);
 }
 
 int
 glpk_print_hook (void * /* info */, char *msg)
 {
-  message (0, "%s\n", msg);
+  message (0, "%s", msg);
   return 1;
 }
 
-
 int
 glpk (int sense, int n, int m, double *c, int nz, int *rn, int *cn,
       double *a, double *b, char *ctype, int *freeLB, double *lb,
       int *freeUB, double *ub, int *vartype, int isMIP, int lpsolver,
       int save_pb, double *xmin, double *fmin, double *status,
       double *lambda, double *redcosts, double *time, double *mem)
 {
   int errnum;
@@ -286,29 +283,29 @@ glpk (int sense, int n, int m, double *c
       errnum = 0 <=> No errors
       errnum = 1 <=> Iteration limit exceeded.
       errnum = 2 <=> Numerical problems with basis matrix.
   */
   if (errnum == LPX_E_OK)
     {
       if (isMIP)
 	{
-	  *status = static_cast<double> (lpx_mip_status (lp));
+	  *status = lpx_mip_status (lp);
 	  *fmin = lpx_mip_obj_val (lp);
 	}
       else
 	{
 	  if (lpsolver == 1)
 	    {
-	      *status = static_cast<double> (lpx_get_status (lp));
+	      *status = lpx_get_status (lp);
 	      *fmin = lpx_get_obj_val (lp);
 	    }
 	  else
 	    {
-	      *status = static_cast<double> (lpx_ipt_status (lp));
+	      *status = lpx_ipt_status (lp);
 	      *fmin = lpx_ipt_obj_val (lp);
 	    }
 	}
 
       if (isMIP)
 	{
 	  for (int i = 0; i < n; i++)
 	    xmin[i] = lpx_mip_col_val (lp, i+1);
@@ -338,26 +335,26 @@ glpk (int sense, int n, int m, double *c
 	    {
 	      if (lpsolver == 1)
 		redcosts[i] = lpx_get_col_dual (lp, i+1);
 	      else
 		redcosts[i] = lpx_ipt_col_dual (lp, i+1);
 	    }
 	}
 
-      *time = static_cast<double> (clock () - t_start) / CLOCKS_PER_SEC;
-      *mem = static_cast<double> (lib_env_ptr () -> mem_tpeak);
+      *time = (clock () - t_start) / CLOCKS_PER_SEC;
+      *mem = (lib_env_ptr () -> mem_tpeak);
 
       lpx_delete_prob (lp);
       return 0;
     }
 
    lpx_delete_prob (lp);
 
-   *status= static_cast<double> (errnum);
+   *status = errnum;
 
    return errnum;
 }
 
 #endif
 
 #define OCTAVE_GLPK_GET_REAL_PARAM(NAME, IDX) \
   do \
