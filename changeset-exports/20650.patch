# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1445450288 14400
#      Wed Oct 21 13:58:08 2015 -0400
# Node ID a6a452346c424549720fb24662f14f41540f1270
# Parent  22296da093078d77a6fafd8dabfc1e6ef2e3b7db
use error and error_with_id directly in libinterp code

* gcd.cc, ls-mat5.cc, oct-map.cc, oct-stream.cc, sub2ind.cc,
pt-assign.cc, pt-idx.cc: Call error_with_id directly instead of using
current_liboctave_error_with_id_handler.  Likewise for error and
current_liboctave_error_handler.

diff --git a/libinterp/corefcn/gcd.cc b/libinterp/corefcn/gcd.cc
--- a/libinterp/corefcn/gcd.cc
+++ b/libinterp/corefcn/gcd.cc
@@ -35,18 +35,17 @@ along with Octave; see the file COPYING.
 #include "defun.h"
 #include "error.h"
 #include "oct-obj.h"
 
 static double
 simple_gcd (double a, double b)
 {
   if (! xisinteger (a) || ! xisinteger (b))
-    (*current_liboctave_error_handler)
-      ("gcd: all values must be integers");
+    error ("gcd: all values must be integers");
 
   double aa = fabs (a);
   double bb = fabs (b);
 
   while (bb != 0)
     {
       double tt = fmod (aa, bb);
       aa = bb;
@@ -73,18 +72,17 @@ divide (const std::complex<FP>& a, const
 }
 
 template <typename FP>
 static std::complex<FP>
 simple_gcd (const std::complex<FP>& a, const std::complex<FP>& b)
 {
   if (! xisinteger (a.real ()) || ! xisinteger (a.imag ())
       || ! xisinteger (b.real ()) || ! xisinteger (b.imag ()))
-    (*current_liboctave_error_handler)
-      ("gcd: all complex parts must be integers");
+    error ("gcd: all complex parts must be integers");
 
   std::complex<FP> aa = a;
   std::complex<FP> bb = b;
 
   if (abs (aa) < abs (bb))
     std::swap (aa, bb);
 
   while (abs (bb) != 0)
@@ -114,18 +112,17 @@ simple_gcd (const octave_int<T>& a, cons
 
   return aa;
 }
 
 static double
 extended_gcd (double a, double b, double& x, double& y)
 {
   if (! xisinteger (a) || ! xisinteger (b))
-    (*current_liboctave_error_handler)
-      ("gcd: all values must be integers");
+    error ("gcd: all values must be integers");
 
   double aa = fabs (a);
   double bb = fabs (b);
 
   double xx, lx, yy, ly;
   xx = 0, lx = 1;
   yy = 1, ly = 0;
 
@@ -154,18 +151,17 @@ extended_gcd (double a, double b, double
 
 template <typename FP>
 static std::complex<FP>
 extended_gcd (const std::complex<FP>& a, const std::complex<FP>& b,
               std::complex<FP>& x, std::complex<FP>& y)
 {
   if (! xisinteger (a.real ()) || ! xisinteger (a.imag ())
       || ! xisinteger (b.real ()) || ! xisinteger (b.imag ()))
-    (*current_liboctave_error_handler)
-      ("gcd: all complex parts must be integers");
+    error ("gcd: all complex parts must be integers");
 
   std::complex<FP> aa = a;
   std::complex<FP> bb = b;
   bool swapped = false;
   if (abs (aa) < abs (bb))
     {
       std::swap (aa, bb);
       swapped = true;
diff --git a/libinterp/corefcn/ls-mat5.cc b/libinterp/corefcn/ls-mat5.cc
--- a/libinterp/corefcn/ls-mat5.cc
+++ b/libinterp/corefcn/ls-mat5.cc
@@ -1764,18 +1764,17 @@ write_mat5_array (std::ostream& os, cons
         MAT5_DO_WRITE (float, data, nel, os);
         break;
 
       case LS_DOUBLE: // No conversion necessary.
         os.write (reinterpret_cast<const char *> (data), len);
         break;
 
       default:
-        (*current_liboctave_error_handler)
-          ("unrecognized data format requested");
+        error ("unrecognized data format requested");
         break;
       }
   }
   if (PAD (len) > len)
     {
       static char buf[9]="\x00\x00\x00\x00\x00\x00\x00\x00";
       os.write (buf, PAD (len) - len);
     }
@@ -1850,18 +1849,17 @@ write_mat5_array (std::ostream& os, cons
         os.write (reinterpret_cast<const char *> (data), len);
         break;
 
       case LS_DOUBLE:
         MAT5_DO_WRITE (double, data, nel, os);
         break;
 
       default:
-        (*current_liboctave_error_handler)
-          ("unrecognized data format requested");
+        error ("unrecognized data format requested");
         break;
       }
   }
   if (PAD (len) > len)
     {
       static char buf[9]="\x00\x00\x00\x00\x00\x00\x00\x00";
       os.write (buf, PAD (len) - len);
     }
diff --git a/libinterp/corefcn/oct-map.cc b/libinterp/corefcn/oct-map.cc
--- a/libinterp/corefcn/oct-map.cc
+++ b/libinterp/corefcn/oct-map.cc
@@ -644,36 +644,33 @@ permute_to_correct_order (octave_idx_typ
       if (i == idx)
         continue;
 
       permute_to_correct_order1 (map_list[idx], map_list[i], new_map_list[i],
                                  perm);
 
       if (error_state)
         {
-          // Use liboctave exception to be consistent.
-          (*current_liboctave_error_handler)
-            ("cat: field names mismatch in concatenating structs");
+          error ("cat: field names mismatch in concatenating structs");
           break;
         }
     }
 }
 
 
 octave_map
 octave_map::cat (int dim, octave_idx_type n, const octave_scalar_map *map_list)
 {
   octave_map retval;
 
   // Allow dim = -1, -2 for compatibility, though it makes no difference here.
   if (dim == -1 || dim == -2)
     dim = -dim - 1;
   else if (dim < 0)
-    (*current_liboctave_error_handler)
-      ("cat: invalid dimension");
+    error ("cat: invalid dimension");
 
   if (n == 1)
     retval = map_list[0];
   else if (n > 1)
     {
       octave_idx_type idx, nf = 0;
       for (idx = 0; idx < n; idx++)
         {
@@ -727,18 +724,17 @@ octave_map
 octave_map::cat (int dim, octave_idx_type n, const octave_map *map_list)
 {
   octave_map retval;
 
   // Allow dim = -1, -2 for compatibility, though it makes no difference here.
   if (dim == -1 || dim == -2)
     dim = -dim - 1;
   else if (dim < 0)
-    (*current_liboctave_error_handler)
-      ("cat: invalid dimension");
+    error ("cat: invalid dimension");
 
   if (n == 1)
     retval = map_list[0];
   else if (n > 1)
     {
       octave_idx_type idx, nf = 0;
 
       for (idx = 0; idx < n; idx++)
diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -3337,18 +3337,17 @@ octave_stream::finalize_read (std::list<
 
         retval = fptr (input_buf_list, input_buf_elts, elts_read,
                        nr, nc, swap, do_float_fmt_conv, do_NA_conv, ffmt);
       }
       break;
 
     default:
       retval = false;
-      (*current_liboctave_error_handler)
-        ("read: invalid type specification");
+      error ("read: invalid type specification");
       break;
     }
 
 
   return retval;
 }
 
 octave_value
@@ -3708,18 +3707,17 @@ convert_data (const T *data, void *conv_
             if (do_float_conversion)
               do_double_format_conversion (&vt_data[i], 1, flt_fmt);
           }
       }
       break;
 
     default:
       retval = false;
-      (*current_liboctave_error_handler)
-        ("write: invalid type specification");
+      error ("write: invalid type specification");
       break;
     }
 
   return retval;
 }
 
 bool
 octave_stream::write_bytes (const void *data, size_t nbytes)
diff --git a/libinterp/corefcn/sub2ind.cc b/libinterp/corefcn/sub2ind.cc
--- a/libinterp/corefcn/sub2ind.cc
+++ b/libinterp/corefcn/sub2ind.cc
@@ -102,19 +102,18 @@ linear_index = sub2ind ([3, 3], 2, 3)\n\
                   idxa(j) = args(j+1).index_vector ();
 
                   if (j > 0 && args(j+1).dims () != args(1).dims ())
                     error ("sub2ind: all subscripts must be of the same size");
                 }
               catch (index_exception& e)
                 {
                   e.set_pos_if_unset (nargin-1, j+1);
-                  e.set_var ("");     // no particular variable
-                  (*current_liboctave_error_with_id_handler)
-                    (e.id(), e.err());
+                  e.set_var ();
+                  error_with_id (e.id (), e.err ());
                 }
             }
           else
             error ("sub2ind: subscripts must be numeric");
         }
 
       retval = sub2ind (dv, idxa);
     }
diff --git a/libinterp/parse-tree/pt-assign.cc b/libinterp/parse-tree/pt-assign.cc
--- a/libinterp/parse-tree/pt-assign.cc
+++ b/libinterp/parse-tree/pt-assign.cc
@@ -128,19 +128,19 @@ tree_simple_assignment::rvalue1 (int)
 
                   octave_value lhs_val = ult.value ();
 
                   lhs_val.print_with_name (octave_stdout,
                                            lhs->name ());
                 }
             }
           catch (index_exception& e)
-            {       // problems with range, invalid index type etc.
+            {
               e.set_var (lhs->name ());
-              (*current_liboctave_error_with_id_handler) (e.id(), e.err());
+              error_with_id (e.id (), e.err ());
             }
         }
     }
 
   return retval;
 }
 
 std::string
diff --git a/libinterp/parse-tree/pt-idx.cc b/libinterp/parse-tree/pt-idx.cc
--- a/libinterp/parse-tree/pt-idx.cc
+++ b/libinterp/parse-tree/pt-idx.cc
@@ -275,17 +275,17 @@ tree_index_expression::rvalue (int nargo
 
 static void
 final_index_error (index_exception& e, const tree_expression *expr)
 {
   if (expr->is_identifier ()
       && dynamic_cast<const tree_identifier *> (expr)->is_variable ())
     e.set_var (expr->name ());
 
-  (*current_liboctave_error_with_id_handler) (e.id (), e.err ());
+  error_with_id (e.id (), e.err ());
 }
 
 octave_value_list
 tree_index_expression::rvalue (int nargout,
                                const std::list<octave_lvalue> *lvalue_list)
 {
   octave_value_list retval;
 
