# HG changeset patch
# User Rik <rik@octave.org>
# Date 1426900981 25200
#      Fri Mar 20 18:23:01 2015 -0700
# Node ID 72ccbd36e23cdf1030e89bbb54ca1732f4cd869b
# Parent  7aaf756b1532b7d0abe6af54dcee5d77db90e448
Return a column vector by default for Matlab compatibility (bug #44425, bug #44453).
Document that only unique elements are returned from set functions.

* NEWS: Announce change in default orientation of return values.

* intersect.m, setdiff.m, setxor.m, union.m: Return a column vector by default
unless the input is explicitly a row vector.  Change docstring to note that only
unique, non-duplicative elements are returned.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -136,16 +136,20 @@ Summary of important user-visible change
         intmax ('int64') and for '%u' it is intmax ('uint64').
 
       * round(x) != x or the value is outside the range allowed by the
         integer format specifier.
 
     There is still one difference:  Matlab switches to '%e' and Octave
     switches to '%g'.
 
+ ** The functions intersect, setdiff, setxor, and union now return a
+    column vector as output unless the input was a row vector.  This change
+    was made for Matlab compatibility.
+
  ** The archive family of functions (bzip2, gzip, zip, tar) and their
     unpacking routines (bunzip2, gunzip, unzip, untar, unpack) have
     been recoded.  Excepting unpack, the default is now to place files
     in the same directory as the archive (on unpack) or as the original
     files (on archiving).
 
  ** Qt and FLTK graphics toolkits now support offscreen rendering on Linux.
     In other words, print will work even when the figure visibility is "off".
diff --git a/scripts/set/intersect.m b/scripts/set/intersect.m
--- a/scripts/set/intersect.m
+++ b/scripts/set/intersect.m
@@ -17,21 +17,21 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{c} =} intersect (@var{a}, @var{b})
 ## @deftypefnx {Function File} {@var{c} =} intersect (@var{a}, @var{b}, "rows")
 ## @deftypefnx {Function File} {[@var{c}, @var{ia}, @var{ib}] =} intersect (@dots{})
 ##
-## Return the elements common to both @var{a} and @var{b} sorted in ascending
-## order.
+## Return the unique elements common to both @var{a} and @var{b} sorted in
+## ascending order.
 ##
-## If @var{a} and @var{b} are both column vectors then return a column vector;
-## Otherwise, return a row vector.  The inputs may also be cell arrays of
+## If @var{a} and @var{b} are both row vectors then return a row vector;
+## Otherwise, return a column vector.  The inputs may also be cell arrays of
 ## strings.
 ##
 ## If the optional input @qcode{"rows"} is given then return the common rows of
 ## @var{a} and @var{b}.  The inputs must be 2-D matrices to use this option.
 ##
 ## If requested, return index vectors @var{ia} and @var{ib} such that
 ## @code{@var{c} = @var{a}(@var{ia})} and @code{@var{c} = @var{b}(@var{ib})}.
 ##
@@ -45,17 +45,17 @@ function [c, ia, ib] = intersect (a, b, 
   endif
 
   [a, b] = validsetargs ("intersect", a, b, varargin{:});
 
   if (isempty (a) || isempty (b))
     c = ia = ib = [];
   else
     by_rows = nargin == 3;
-    iscol = isvector (a) && isvector (b) && iscolumn (a) && iscolumn (b);
+    isrowvec = isvector (a) && isvector (b) && isrow (a) && isrow (b);
 
     ## Form A and B into sets
     if (nargout > 1)
       [a, ja] = unique (a, varargin{:});
       [b, jb] = unique (b, varargin{:});
     else
       a = unique (a, varargin{:});
       b = unique (b, varargin{:});
@@ -80,40 +80,40 @@ function [c, ia, ib] = intersect (a, b, 
     endif
 
     if (nargout > 1)
       ia = ja(ic(ii));            # a(ia) == c
       ib = jb(ic(ii+1) - len_a);  # b(ib) == c
     endif
 
     ## Adjust output orientation for Matlab compatibility
-    if (! by_rows && ! iscol)
+    if (! by_rows && isrowvec)
       c = c.';
     endif
   endif
 
 endfunction
 
 
 ## Test orientation of output
 %!shared a,b
 %! a = 1:4;
 %! b = 2:5;
 
 %!assert (size (intersect (a, b)), [1 3])
-%!assert (size (intersect (a', b)), [1 3])
-%!assert (size (intersect (a, b')), [1 3])
+%!assert (size (intersect (a', b)), [3 1])
+%!assert (size (intersect (a, b')), [3 1])
 %!assert (size (intersect (a', b')), [3 1])
 
 ## Test multi-dimensional arrays
 %!test
 %! a = rand (3,3,3);
 %! b = a;
 %! b(1,1,1) = 2;
-%! assert (intersect (a, b), sort (a(2:end)));
+%! assert (intersect (a, b), sort (a(2:end)'));
 
 ## Test the routine for index vectors ia and ib
 %!test
 %! a = [3 2 4 5 7 6 5 1 0 13 13];
 %! b = [3 5 12 1 1 7];
 %! [c,ia,ib] = intersect (a, b);
 %! assert (c, [1 3 5 7]);
 %! assert (ia, [8 1 7 5]);
diff --git a/scripts/set/setdiff.m b/scripts/set/setdiff.m
--- a/scripts/set/setdiff.m
+++ b/scripts/set/setdiff.m
@@ -16,21 +16,21 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{c} =} setdiff (@var{a}, @var{b})
 ## @deftypefnx {Function File} {@var{c} =} setdiff (@var{a}, @var{b}, "rows")
 ## @deftypefnx {Function File} {[@var{c}, @var{ia}] =} setdiff (@dots{})
-## Return the elements in @var{a} that are not in @var{b} sorted in
+## Return the unique elements in @var{a} that are not in @var{b} sorted in
 ## ascending order.
 ##
-## If @var{a} and @var{b} are both column vectors return a column vector;
-## Otherwise, return a row vector.  The inputs may also be cell arrays of
+## If @var{a} is a row vector return a column vector;
+## Otherwise, return a column vector.  The inputs may also be cell arrays of
 ## strings.
 ##
 ## If the optional input @qcode{"rows"} is given then return the rows in
 ## @var{a} that are not in @var{b}.  The inputs must be 2-D matrices to use
 ## this option.
 ##
 ## If requested, return the index vector @var{ia} such that
 ## @code{@var{c} = @var{a}(@var{ia})}.
@@ -44,17 +44,17 @@ function [c, ia] = setdiff (a, b, vararg
 
   if (nargin < 2 || nargin > 3)
     print_usage ();
   endif
 
   [a, b] = validsetargs ("setdiff", a, b, varargin{:});
 
   by_rows = nargin == 3;
-  iscol = isvector (a) && isvector (b) && iscolumn (a) && iscolumn (b);
+  isrowvec = isvector (a) && isrow (a);
 
   if (by_rows)
     if (nargout > 1)
       [c, ia] = unique (a, "rows");
     else
       c = unique (a, "rows");
     endif
     if (! isempty (c) && ! isempty (b))
@@ -84,20 +84,20 @@ function [c, ia] = setdiff (a, b, vararg
       else
         dups = find (tmp(1:end-1) == tmp(2:end));
       endif
       c(idx(dups)) = [];
       if (nargout > 1)
         ia(idx(dups)) = [];
       endif
       ## Reshape if necessary for Matlab compatibility.
-      if (iscol)
+      if (isrowvec)
+        c = c(:).';
+      else
         c = c(:);
-      else
-        c = c(:).';
       endif
     endif
   endif
 
 endfunction
 
 
 %!assert (setdiff (["bb";"zz";"bb";"zz"], ["bb";"cc";"bb"], "rows"), "zz")
@@ -115,16 +115,16 @@ endfunction
 %! assert (c, [5]);
 %! assert (c, a(ia));
 
 ## Test output orientation compatibility (bug #42577)
 %!assert (setdiff ([1:5], 2), [1,3,4,5])
 %!assert (setdiff ([1:5]', 2), [1;3;4;5])
 %!assert (setdiff ([1:5], [2:3]), [1,4,5])
 %!assert (setdiff ([1:5], [2:3]'), [1,4,5])
-%!assert (setdiff ([1:5]', [2:3]), [1,4,5])
+%!assert (setdiff ([1:5]', [2:3]), [1;4;5])
 %!assert (setdiff ([1:5]', [2:3]'), [1;4;5])
 
 %!test
 %! a = rand (3,3,3);
 %! b = a(1);
-%! assert (setdiff (a, b), sort (a(2:end)));
+%! assert (setdiff (a, b), sort (a(2:end)'));
 
diff --git a/scripts/set/setxor.m b/scripts/set/setxor.m
--- a/scripts/set/setxor.m
+++ b/scripts/set/setxor.m
@@ -18,21 +18,21 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{c} =} setxor (@var{a}, @var{b})
 ## @deftypefnx {Function File} {@var{c} =} setxor (@var{a}, @var{b}, "rows")
 ## @deftypefnx {Function File} {[@var{c}, @var{ia}, @var{ib}] =} setxor (@dots{})
 ##
-## Return the elements exclusive to sets @var{a} or @var{b} sorted in
+## Return the unique elements exclusive to sets @var{a} or @var{b} sorted in
 ## ascending order.
 ##
-## If @var{a} and @var{b} are both column vectors return a column vector;
-## Otherwise, return a row vector.  The inputs may also be cell arrays of
+## If @var{a} and @var{b} are both row vectors then return a row vector;
+## Otherwise, return a column vector.  The inputs may also be cell arrays of
 ## strings.
 ##
 ## If the optional input @qcode{"rows"} is given then return the rows exclusive
 ## to sets @var{a} and @var{b}.  The inputs must be 2-D matrices to use this
 ## option.
 ##
 ## If requested, return index vectors @var{ia} and @var{ib} such that
 ## @code{@var{a}(@var{ia})} and @code{@var{b}(@var{ib})} are disjoint sets
@@ -45,17 +45,17 @@ function [c, ia, ib] = setxor (a, b, var
 
   if (nargin < 2 || nargin > 3)
     print_usage ();
   endif
 
   [a, b] = validsetargs ("setxor", a, b, varargin{:});
 
   by_rows = nargin == 3;
-  iscol = isvector (a) && isvector (b) && iscolumn (a) && iscolumn (b);
+  isrowvec = isvector (a) && isvector (b) && isrow (a) && isrow (b);
 
   ## Form A and B into sets.
   if (nargout > 1)
     [a, ia] = unique (a, varargin{:});
     [b, ib] = unique (b, varargin{:});
   else
     a = unique (a, varargin{:});
     b = unique (b, varargin{:});
@@ -86,17 +86,17 @@ function [c, ia, ib] = setxor (a, b, var
         idx = find (c(1:n-1) == c(2:n));
       endif
       if (! isempty (idx))
         c([idx, idx+1]) = [];
         i([idx, idx+1]) = [];
       endif
 
       ## Adjust output orientation for Matlab compatibility
-      if (! iscol)
+      if (isrowvec)
         c = c.';
       endif
     endif
 
     if (nargout > 1)
       ia = ia(i(i <= na));
       ib = ib(i(i > na) - na);
     endif
@@ -107,18 +107,18 @@ endfunction
 
 %!assert (setxor ([1,2,3], [2,3,4]), [1,4])
 %!assert (setxor ({'a'}, {'a', 'b'}), {'b'})
 
 %!test
 %! a = [3, 1, 4, 1, 5];
 %! b = [1, 2, 3, 4];
 %! [c, ia, ib] = setxor (a, b.');
-%! assert (c, [2, 5]);
-%! assert (c, sort ([a(ia), b(ib)]));
+%! assert (c, [2; 5]);
+%! assert (c, sort ([a(ia)'; b(ib)']));
 
 %!test
 %! a = [1 2; 4 5; 1 3];
 %! b = [1 1; 1 2; 4 5; 2 10];
 %! [c, ia, ib] = setxor (a, b, "rows");
 %! assert (c, [1 1; 1 3; 2 10]);
 %! assert (c, sortrows ([a(ia,:); b(ib,:)]));
 
@@ -151,19 +151,19 @@ endfunction
 %! assert (isempty (ia));
 %! assert (ib, [3; 1; 4; 2]);
 ## Test orientation of output
 %!shared x,y
 %! x = 1:3;
 %! y = 2:5;
 
 %!assert (size (setxor (x, y)), [1 3])
-%!assert (size (setxor (x', y)), [1 3])
-%!assert (size (setxor (x, y')), [1 3])
+%!assert (size (setxor (x', y)), [3 1])
+%!assert (size (setxor (x, y')), [3 1])
 %!assert (size (setxor (x', y')), [3 1])
 
 ## Test multi-dimensional arrays
 %!test
 %! a = rand (3,3,3);
 %! b = a;
 %! b(1,1,1) = 2;
-%! assert (intersect (a, b), sort (a(2:end)));
+%! assert (intersect (a, b), sort (a(2:end)'));
 
diff --git a/scripts/set/union.m b/scripts/set/union.m
--- a/scripts/set/union.m
+++ b/scripts/set/union.m
@@ -17,21 +17,21 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{c} =} union (@var{a}, @var{b})
 ## @deftypefnx {Function File} {@var{c} =} union (@var{a}, @var{b}, "rows")
 ## @deftypefnx {Function File} {[@var{c}, @var{ia}, @var{ib}] =} union (@dots{})
 ##
-## Return the elements that are in either @var{a} or @var{b} sorted in
-## ascending order with duplicates removed.
+## Return the unique elements that are in either @var{a} or @var{b} sorted in
+## ascending order.
 ##
-## If @var{a} and @var{b} are both column vectors return a column vector;
-## Otherwise, return a row vector.  The inputs may also be cell arrays of
+## If @var{a} and @var{b} are both row vectors then return a row vector;
+## Otherwise, return a column vector.  The inputs may also be cell arrays of
 ## strings.
 ##
 ## If the optional input @qcode{"rows"} is given then return rows that are in
 ## either @var{a} or @var{b}.  The inputs must be 2-D matrices to use this
 ## option.
 ##
 ## The optional outputs @var{ia} and @var{ib} are index vectors such that
 ## @code{@var{a}(@var{ia})} and @code{@var{b}(@var{ib})} are disjoint sets
@@ -46,24 +46,24 @@ function [y, ia, ib] = union (a, b, vara
 
   if (nargin < 2 || nargin > 3)
     print_usage ();
   endif
 
   [a, b] = validsetargs ("union", a, b, varargin{:});
 
   by_rows = nargin == 3;
-  iscol = isvector (a) && isvector (b) && iscolumn (a) && iscolumn (b);
+  isrowvec = isvector (a) && isvector (b) && isrow (a) && isrow (b);
 
   if (by_rows)
     y = [a; b];
   else
     y = [a(:); b(:)];
     ## Adjust output orientation for Matlab compatibility
-    if (! iscol)
+    if (isrowvec)
       y = y.';
     endif
   endif
 
   if (nargout <= 1)
     y = unique (y, varargin{:});
   else
     [y, idx] = unique (y, varargin{:});
@@ -71,33 +71,33 @@ function [y, ia, ib] = union (a, b, vara
     ia = idx(idx <= na);
     ib = idx(idx > na) - na;
   endif
 
 endfunction
 
 
 %!assert (union ([1, 2, 4], [2, 3, 5]), [1, 2, 3, 4, 5])
-%!assert (union ([1; 2; 4], [2, 3, 5]), [1, 2, 3, 4, 5])
+%!assert (union ([1; 2; 4], [2, 3, 5]), [1; 2; 3; 4; 5])
 %!assert (union ([1; 2; 4], [2; 3; 5]), [1; 2; 3; 4; 5])
-%!assert (union ([1, 2, 3], [5; 7; 9]), [1, 2, 3, 5, 7, 9])
+%!assert (union ([1, 2, 3], [5; 7; 9]), [1; 2; 3; 5; 7; 9])
 
 ## Test multi-dimensional arrays
 %!test
 %! a = rand (3,3,3);
 %! b = a;
 %! b(1,1,1) = 2;
-%! assert (union (a, b), sort ([a(1:end), 2]));
+%! assert (union (a, b), sort ([a(1:end)'; 2]));
 
 %!test
 %! a = [3, 1, 4, 1, 5];
 %! b = [1, 2, 3, 4];
 %! [y, ia, ib] = union (a, b.');
-%! assert (y, [1, 2, 3, 4, 5]);
-%! assert (y, sort ([a(ia), b(ib)]));
+%! assert (y, [1; 2; 3; 4; 5]);
+%! assert (y, sort ([a(ia)'; b(ib)']));
 
 ## Test common input validation for set routines contained in validsetargs
 %!error <cell array of strings cannot be combined> union ({"a"}, 1)
 %!error <A and B must be arrays or cell arrays> union (@sin, 1)
 %!error <invalid option: columns> union (1, 2, "columns")
 %!error <cells not supported with "rows"> union ({"a"}, {"b"}, "rows")
 %!error <A and B must be arrays or cell arrays> union (@sin, 1, "rows")
 %!error <A and B must be 2-dimensional matrices> union (rand(2,2,2), 1, "rows")
