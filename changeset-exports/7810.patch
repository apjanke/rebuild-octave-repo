# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1211558170 -7200
#      Fri May 23 17:56:10 2008 +0200
# Node ID 5420b8cf011afd7b3c71e0494f9c99d6f1b5f13b
# Parent  3af309919efcefd9da05043b3dbe008bbdd3769c
Error in FloatComplexLU instantiation

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,14 @@
 2008-06-02  David Bateman  <dbateman@free.fr>
 
+	* fCmplxLU.cc (class FloatComplexLU): Correct error in instantiation.
+	* floatLU.cc (class FloatLU): ditto.
+	* floatLU.h (class FloatLU): ditto.
+	
 	* floatAEPBAL.cc (octave_idx_type FloatAEPBALANCE::init (const
 	FloatMatrix&, const std::string&)): Use FloatMatrix to initialize
 	balancing_mat.
 
 	* Makefile.in (MATRIX_INC): Add fCmplxAEPBAL.h and floatAEPBAL.h.
 	(MATRIX_SRC): Add fCmplxAEPBAL.cc and floatAEPBAL.cc.
 
 2008-05-21  David Bateman  <dbateman@free.fr>
diff --git a/liboctave/fCmplxLU.cc b/liboctave/fCmplxLU.cc
--- a/liboctave/fCmplxLU.cc
+++ b/liboctave/fCmplxLU.cc
@@ -29,17 +29,17 @@ along with Octave; see the file COPYING.
 #include "f77-fcn.h"
 #include "lo-error.h"
 
 // Instantiate the base LU class for the types we need.
 
 #include <base-lu.h>
 #include <base-lu.cc>
 
-template class base_lu <FloatComplexMatrix, FloatComplex, FloatMatrix, float>;
+template class base_lu <FloatComplexMatrix, FloatComplex, Matrix, double>;
 
 // Define the constructor for this particular derivation.
 
 extern "C"
 {
   F77_RET_T
   F77_FUNC (cgetrf, CGETRF) (const octave_idx_type&, const octave_idx_type&, FloatComplex*,
 			     const octave_idx_type&, octave_idx_type*, octave_idx_type&);
diff --git a/liboctave/floatLU.cc b/liboctave/floatLU.cc
--- a/liboctave/floatLU.cc
+++ b/liboctave/floatLU.cc
@@ -29,17 +29,17 @@ along with Octave; see the file COPYING.
 #include "f77-fcn.h"
 #include "lo-error.h"
 
 // Instantiate the base LU class for the types we need.
 
 #include <base-lu.h>
 #include <base-lu.cc>
 
-template class base_lu <FloatMatrix, float, FloatMatrix, float>;
+template class base_lu <FloatMatrix, float, Matrix, double>;
 
 // Define the constructor for this particular derivation.
 
 extern "C"
 {
   F77_RET_T
   F77_FUNC (sgetrf, SGETRF) (const octave_idx_type&, const octave_idx_type&, float*,
 			     const octave_idx_type&, octave_idx_type*, octave_idx_type&);
diff --git a/liboctave/floatLU.h b/liboctave/floatLU.h
--- a/liboctave/floatLU.h
+++ b/liboctave/floatLU.h
@@ -20,34 +20,35 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #if !defined (octave_FloatLU_h)
 #define octave_FloatLU_h 1
 
 #include "base-lu.h"
+#include "dMatrix.h"
 #include "fMatrix.h"
 
 class
 OCTAVE_API
-FloatLU : public base_lu <FloatMatrix, float, FloatMatrix, float>
+FloatLU : public base_lu <FloatMatrix, float, Matrix, double>
 {
 public:
 
-  FloatLU (void) : base_lu <FloatMatrix, float, FloatMatrix, float> () { }
+  FloatLU (void) : base_lu <FloatMatrix, float, Matrix, double> () { }
 
   FloatLU (const FloatMatrix& a);
 
-  FloatLU (const FloatLU& a) : base_lu <FloatMatrix, float, FloatMatrix, float> (a) { }
+  FloatLU (const FloatLU& a) : base_lu <FloatMatrix, float, Matrix, double> (a) { }
 
   FloatLU& operator = (const FloatLU& a)
     {
       if (this != &a)
-	base_lu <FloatMatrix, float, FloatMatrix, float> :: operator = (a);
+	base_lu <FloatMatrix, float, Matrix, double> :: operator = (a);
 
       return *this;
     }
 
   ~FloatLU (void) { }
 };
 
 #endif
