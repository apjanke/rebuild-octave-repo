# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1349358487 14400
#      Thu Oct 04 09:48:07 2012 -0400
# Node ID ecf5be238b4aa9348d4c87c710b9615c0daed29e
# Parent  afc002de3ade9673ce32b9d6918f7b0a261965ea
provide signbit mapper for real values

* mappers.cc (Fsignbit): New function and tests.
* ov-base.cc (octave_base_value::get_umap_name): Include signbit in
the list.
* ov-base.h (octave_base_value::unary_mapper_t): Include umap_xsignbit
in the list.
* ov-float.cc (octave_float_scalar::map): Handle xsignbit.
* ov-scalar.cc (octave_scalar::map): Handle xsignbit.
* ov-re-mat.cc (octave_matrix::map): Handle xsignbit.
* ov-flt-re-mat.cc (octave_float_matrix::map): Handle xsignbit.
* lo-mappers.h (xsignbit): New template function.
* arith.txi: Document signbit.

diff --git a/doc/interpreter/arith.txi b/doc/interpreter/arith.txi
--- a/doc/interpreter/arith.txi
+++ b/doc/interpreter/arith.txi
@@ -257,16 +257,18 @@ cos (pi/2)
 @DOCSTRING(mod)
 
 @DOCSTRING(primes)
 
 @DOCSTRING(list_primes)
 
 @DOCSTRING(sign)
 
+@DOCSTRING(signbit)
+
 @node Special Functions
 @section Special Functions
 
 @DOCSTRING(airy)
 
 @DOCSTRING(besselj)
 
 @DOCSTRING(beta)
diff --git a/libinterp/corefcn/mappers.cc b/libinterp/corefcn/mappers.cc
--- a/libinterp/corefcn/mappers.cc
+++ b/libinterp/corefcn/mappers.cc
@@ -1775,16 +1775,50 @@ For complex arguments, @code{sign} retur
 %!assert (sign (single (0)), single (0))
 %!assert (sign (single (3)), single (1))
 %!assert (sign (single ([1, -pi; e, 0])), single ([1, -1; 1, 0]))
 
 %!error sign ()
 %!error sign (1, 2)
 */
 
+DEFUNX ("signbit", Fsignbit, args, ,
+    "-*- texinfo -*-\n\
+@deftypefn {Mapping Function} {} signbit (@var{x})\n\
+Return a nonzero value if the value of @var{x} has its sign bit set.\n\
+\n\
+This is not the same as @code{x < 0.0}, because IEEE 754 floating point\n\
+allows zero to be signed.  The comparison @code{-0.0 < 0.0} is false,\n\
+but @code{signbit (-0.0)} will return a nonzero value.\n\
+@end deftypefn")
+{
+  octave_value retval;
+  if (args.length () == 1)
+    retval = args(0).xsignbit ();
+  else
+    print_usage ();
+
+  return retval;
+}
+
+/*
+%!assert (signbit (1) == 0)
+%!assert (signbit (-2) != 0)
+%!assert (signbit (0) == 0)
+%!assert (signbit (-0) != 0)
+
+%!assert (signbit (single (1)) == 0)
+%!assert (signbit (single (-2)) != 0)
+%!assert (signbit (single (0)) == 0)
+%!assert (signbit (single (-0)) != 0)
+
+%!error sign ()
+%!error sign (1, 2)
+*/
+
 DEFUN (sin, args, ,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} sin (@var{x})\n\
 Compute the sine for each element of @var{x} in radians.\n\
 @seealso{asin, sind, sinh}\n\
 @end deftypefn")
 {
   octave_value retval;
diff --git a/libinterp/octave-value/ov-base.cc b/libinterp/octave-value/ov-base.cc
--- a/libinterp/octave-value/ov-base.cc
+++ b/libinterp/octave-value/ov-base.cc
@@ -1224,16 +1224,17 @@ octave_base_value::get_umap_name (unary_
       "isdigit",
       "isgraph",
       "islower",
       "isprint",
       "ispunct",
       "isspace",
       "isupper",
       "isxdigit",
+      "signbit",
       "toascii",
       "tolower",
       "toupper"
     };
 
   if (umap < 0 || umap >= num_unary_mappers)
     return "unknown";
   else
diff --git a/libinterp/octave-value/ov-base.h b/libinterp/octave-value/ov-base.h
--- a/libinterp/octave-value/ov-base.h
+++ b/libinterp/octave-value/ov-base.h
@@ -720,16 +720,17 @@ public:
       umap_xisdigit,
       umap_xisgraph,
       umap_xislower,
       umap_xisprint,
       umap_xispunct,
       umap_xisspace,
       umap_xisupper,
       umap_xisxdigit,
+      umap_xsignbit,
       umap_xtoascii,
       umap_xtolower,
       umap_xtoupper,
       umap_unknown,
       num_unary_mappers = umap_unknown
     };
 
   virtual octave_value map (unary_mapper_t) const;
diff --git a/libinterp/octave-value/ov-float.cc b/libinterp/octave-value/ov-float.cc
--- a/libinterp/octave-value/ov-float.cc
+++ b/libinterp/octave-value/ov-float.cc
@@ -316,16 +316,17 @@ octave_float_scalar::map (unary_mapper_t
       SCALAR_MAPPER (sinh, ::sinhf);
       SCALAR_MAPPER (sqrt, rc_sqrt);
       SCALAR_MAPPER (tan, ::tanf);
       SCALAR_MAPPER (tanh, ::tanhf);
       SCALAR_MAPPER (finite, xfinite);
       SCALAR_MAPPER (isinf, xisinf);
       SCALAR_MAPPER (isna, octave_is_NA);
       SCALAR_MAPPER (isnan, xisnan);
+      SCALAR_MAPPER (xsignbit, xsignbit);
 
     default:
       return octave_base_value::map (umap);
     }
 }
 
 bool
 octave_float_scalar::fast_elem_insert_self (void *where, builtin_type_t btyp) const
diff --git a/libinterp/octave-value/ov-flt-re-mat.cc b/libinterp/octave-value/ov-flt-re-mat.cc
--- a/libinterp/octave-value/ov-flt-re-mat.cc
+++ b/libinterp/octave-value/ov-flt-re-mat.cc
@@ -801,16 +801,17 @@ octave_float_matrix::map (unary_mapper_t
       ARRAY_MAPPER (roundb, float, xroundb);
       ARRAY_MAPPER (signum, float, ::signum);
       ARRAY_MAPPER (sin, float, ::sinf);
       ARRAY_MAPPER (sinh, float, ::sinhf);
       RC_ARRAY_MAPPER (sqrt, FloatComplex, rc_sqrt);
       ARRAY_MAPPER (tan, float, ::tanf);
       ARRAY_MAPPER (tanh, float, ::tanhf);
       ARRAY_MAPPER (isna, bool, octave_is_NA);
+      ARRAY_MAPPER (xsignbit, float, xsignbit);
 
     default:
       return octave_base_value::map (umap);
     }
 }
 
 DEFUN (single, args, ,
   "-*- texinfo -*-\n\
diff --git a/libinterp/octave-value/ov-re-mat.cc b/libinterp/octave-value/ov-re-mat.cc
--- a/libinterp/octave-value/ov-re-mat.cc
+++ b/libinterp/octave-value/ov-re-mat.cc
@@ -924,16 +924,17 @@ octave_matrix::map (unary_mapper_t umap)
       ARRAY_MAPPER (roundb, double, xroundb);
       ARRAY_MAPPER (signum, double, ::signum);
       ARRAY_MAPPER (sin, double, ::sin);
       ARRAY_MAPPER (sinh, double, ::sinh);
       RC_ARRAY_MAPPER (sqrt, Complex, rc_sqrt);
       ARRAY_MAPPER (tan, double, ::tan);
       ARRAY_MAPPER (tanh, double, ::tanh);
       ARRAY_MAPPER (isna, bool, octave_is_NA);
+      ARRAY_MAPPER (xsignbit, double, xsignbit);
 
     default:
       if (umap >= umap_xisalnum && umap <= umap_xtoupper)
         {
           octave_value str_conv = convert_to_str (true, true);
           return error_state ? octave_value () : str_conv.map (umap);
         }
       else
diff --git a/libinterp/octave-value/ov-scalar.cc b/libinterp/octave-value/ov-scalar.cc
--- a/libinterp/octave-value/ov-scalar.cc
+++ b/libinterp/octave-value/ov-scalar.cc
@@ -332,16 +332,17 @@ octave_scalar::map (unary_mapper_t umap)
       SCALAR_MAPPER (sinh, ::sinh);
       SCALAR_MAPPER (sqrt, rc_sqrt);
       SCALAR_MAPPER (tan, ::tan);
       SCALAR_MAPPER (tanh, ::tanh);
       SCALAR_MAPPER (finite, xfinite);
       SCALAR_MAPPER (isinf, xisinf);
       SCALAR_MAPPER (isna, octave_is_NA);
       SCALAR_MAPPER (isnan, xisnan);
+      SCALAR_MAPPER (xsignbit, xsignbit);
 
     default:
       if (umap >= umap_xisalnum && umap <= umap_xtoupper)
         {
           octave_value str_conv = convert_to_str (true, true);
           return error_state ? octave_value () : str_conv.map (umap);
         }
       else
diff --git a/libinterp/octave-value/ov.h b/libinterp/octave-value/ov.h
--- a/libinterp/octave-value/ov.h
+++ b/libinterp/octave-value/ov.h
@@ -1161,16 +1161,17 @@ public:
   MAPPER_FORWARD (xisdigit)
   MAPPER_FORWARD (xisgraph)
   MAPPER_FORWARD (xislower)
   MAPPER_FORWARD (xisprint)
   MAPPER_FORWARD (xispunct)
   MAPPER_FORWARD (xisspace)
   MAPPER_FORWARD (xisupper)
   MAPPER_FORWARD (xisxdigit)
+  MAPPER_FORWARD (xsignbit)
   MAPPER_FORWARD (xtoascii)
   MAPPER_FORWARD (xtolower)
   MAPPER_FORWARD (xtoupper)
 
 #undef MAPPER_FORWARD
 
   octave_value map (octave_base_value::unary_mapper_t umap) const
     { return rep->map (umap); }
diff --git a/liboctave/numeric/lo-mappers.h b/liboctave/numeric/lo-mappers.h
--- a/liboctave/numeric/lo-mappers.h
+++ b/liboctave/numeric/lo-mappers.h
@@ -396,9 +396,16 @@ xrem (T x, T y)
     }
 
   if (x != y && y != 0 && retval != 0)
     retval = xcopysign (retval, x);
 
   return retval;
 }
 
+template <typename T>
+T
+xsignbit (T x)
+{
+  return signbit (x);
+}
+
 #endif
