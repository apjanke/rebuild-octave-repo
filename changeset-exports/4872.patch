# HG changeset patch
# User jwe
# Date 1082578172 0
#      Wed Apr 21 20:09:32 2004 +0000
# Node ID fe71c458f438af3db9430b13e88e1185dc8a5ff4
# Parent  9c89c1408c325ebb26b6369c4b36687a0d4dec5c
[project @ 2004-04-21 20:09:32 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2004-04-21  John W. Eaton  <jwe@octave.org>
+
+	* parse.y (function2): Pass id name to frob_function.  Delete id.
+	(frob_function): Accept function name instead of identifier.
+	Don't try to rename symbol table entry.  Lookup symbol record for
+	function name here.  Insert name in symbol table if needed.
+	Operate on symbol record instead of identifier.
+
 2004-04-21  David Bateman  <dbateman@free.fr>
 
 	* DLD_FUNCTIONS/fft.cc(do_fft): Correctly initialize the variable dim
 	for scalar arguments.
 
 	* DLD-FUNCTIONS/minmax.cc: Handle single vector arg correctly.
 
 2004-04-20  John W. Eaton  <jwe@octave.org>
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -273,17 +273,17 @@ make_assign_op (int op, tree_argument_li
 		tree_expression *rhs);
 
 // Begin defining a function.
 static octave_user_function *
 start_function (tree_parameter_list *param_list, tree_statement_list *body);
 
 // Do most of the work for defining a function.
 static octave_user_function *
-frob_function (tree_identifier *id, octave_user_function *fcn);
+frob_function (const std::string& fname, octave_user_function *fcn);
 
 // Finish defining a function.
 static octave_user_function *
 finish_function (tree_identifier *id, octave_user_function *fcn,
 		 octave_comment_list *lc);
 
 // Finish defining a function a different way.
 static octave_user_function *
@@ -1303,17 +1303,21 @@ fcn_name	: identifier local_symtab
 		    lexer_flags.parsed_function_name = true;
 
 		    $$ = $1;
 		  }
 		;
 
 function2	: fcn_name function3
 		  {
-		    if (! ($$ = frob_function ($1, $2)))
+		    std::string fname = $1->name ();
+
+		    delete $1;
+
+		    if (! ($$ = frob_function (fname, $2)))
 		      ABORT_PARSE;
 		  }
 		;
 
 function3	: param_list function4
 		  { $$ = start_function ($1, $2); }
 		| function4
 		  { $$ = start_function (0, $1); }
@@ -2579,47 +2583,39 @@ start_function (tree_parameter_list *par
     }
 
   return fcn;
 }
 
 // Do most of the work for defining a function.
 
 static octave_user_function *
-frob_function (tree_identifier *id, octave_user_function *fcn)
+frob_function (const std::string& fname, octave_user_function *fcn)
 {
-  std::string id_name = id->name ();
+  std::string id_name = fname;
 
   // If input is coming from a file, issue a warning if the name of
   // the file does not match the name of the function stated in the
   // file.  Matlab doesn't provide a diagnostic (it ignores the stated
   // name).
 
-  fcn->stash_function_name (id_name);
-
   if (reading_fcn_file)
     {
       if (! lexer_flags.parsing_nested_function
           && curr_fcn_file_name != id_name)
 	{
 	  if (Vwarn_function_name_clash)
 	    warning ("function name `%s' does not agree with function\
  file name `%s'", id_name.c_str (), curr_fcn_file_full_name.c_str ());
 
-	  fbi_sym_tab->rename (id_name, curr_fcn_file_name);
-
-	  if (error_state)
-	    return 0;
-
-	  id_name = id->name ();
+	  id_name = curr_fcn_file_name;
 	}
 
       octave_time now;
 
-      fcn->stash_function_name (id_name);
       fcn->stash_fcn_file_name (curr_fcn_file_full_name);
       fcn->stash_fcn_file_time (now);
       fcn->mark_as_system_fcn_file ();
 
       if (Vwarn_future_time_stamp)
 	{
 	  std::string nm = fcn->fcn_file_name ();
 
@@ -2632,35 +2628,37 @@ frob_function (tree_identifier *id, octa
   else if (! (input_from_tmp_history_file || input_from_startup_file)
 	   && reading_script_file
 	   && curr_fcn_file_name == id_name)
     {
       warning ("function `%s' defined within script file `%s'",
 	       id_name.c_str (), curr_fcn_file_full_name.c_str ());
     }
 
+  fcn->stash_function_name (id_name);
+
   top_level_sym_tab->clear (id_name);
 
-  symbol_record *sr = fbi_sym_tab->lookup (id_name);
+  symbol_record *sr = fbi_sym_tab->lookup (id_name, true);
 
   if (sr)
     {
       fcn->stash_symtab_ptr (sr);
 
       if (lexer_flags.parsing_nested_function)
         fcn->mark_as_nested_function ();
     }
   else
     panic_impossible ();
 
-  id->define (fcn, symbol_record::USER_FUNCTION);
+  sr->define (fcn, symbol_record::USER_FUNCTION);
 
   if (! help_buf.empty ())
     {
-      id->document (help_buf.top ());
+      sr->document (help_buf.top ());
       help_buf.pop ();
     }
 
   if (lexer_flags.parsing_nested_function < 0)
     lexer_flags.parsing_nested_function = 0;
 
   return fcn;
 }
