# HG changeset patch
# User jwe
# Date 1108587979 0
#      Wed Feb 16 21:06:19 2005 +0000
# Node ID 47e4c91e57999e787627426fc591fa017728b853
# Parent  275a955418311f0af64bfa91c5de4fad8125ca94
[project @ 2005-02-16 21:06:19 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,13 +1,12 @@
 2005-02-16  John W. Eaton  <jwe@octave.org>
 
-	* ov.h, ov.cc
-	(octave_value::octave_value (const ArrayN<octave_value>&, bool)):
-	Delete.
+	* ov-base-mat.h (octave_base_matrix::squeeze): Explicitly convert
+	result of matrix.squeeze() to MT.
 
 2005-02-15  John W. Eaton  <jwe@octave.org>
 
 	* dirfns.cc (deftypefn): Don't print to octave_stdout if nargout > 0.
 
 	* pt-mat.cc (tree_matrix::rvalue): Min size of ra_idx is 2.
 
 	* file-io.cc (Ffclear): New function.
diff --git a/src/ov-base-mat.h b/src/ov-base-mat.h
--- a/src/ov-base-mat.h
+++ b/src/ov-base-mat.h
@@ -63,17 +63,17 @@ public:
 
   ~octave_base_matrix (void) { }
 
   octave_value *clone (void) const { return new octave_base_matrix (*this); }
   octave_value *empty_clone (void) const { return new octave_base_matrix (); }
 
   size_t byte_size (void) const { return matrix.byte_size (); }
 
-  octave_value squeeze (void) const { return matrix.squeeze (); }
+  octave_value squeeze (void) const { return MT (matrix.squeeze ()); }
 
   octave_value subsref (const std::string& type,
 			const std::list<octave_value_list>& idx);
 
   octave_value_list subsref (const std::string&,
 			     const std::list<octave_value_list>&, int)
     {
       panic_impossible ();
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -418,16 +418,29 @@ octave_value::octave_value (const Cell& 
   if (is_csl)
     rep = new octave_cs_list (c);
   else
     rep = new octave_cell (c);
 
   rep->count = 1;
 }
 
+octave_value::octave_value (const ArrayN<octave_value>& a, bool is_csl)
+  : rep (0)
+{
+  Cell c (a);
+
+  if (is_csl)
+    rep = new octave_cs_list (c);
+  else
+    rep = new octave_cell (c);
+
+  rep->count = 1;
+}
+
 octave_value::octave_value (const Matrix& m)
   : rep (new octave_matrix (m))
 {
   rep->count = 1;
   maybe_mutate ();
 }
 
 octave_value::octave_value (const NDArray& a)
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -184,16 +184,17 @@ public:
   octave_value (long long int i);
 #endif
 #if defined (HAVE_UNSIGNED_LONG_LONG_INT)
   octave_value (unsigned long long int i);
 #endif
 
   octave_value (octave_time t);
   octave_value (double d);
+  octave_value (const ArrayN<octave_value>& a, bool is_cs_list = false);
   octave_value (const Cell& c, bool is_cs_list = false);
   octave_value (const Matrix& m);
   octave_value (const NDArray& nda);
   octave_value (const ArrayN<double>& m);
   octave_value (const DiagMatrix& d);
   octave_value (const RowVector& v);
   octave_value (const ColumnVector& v);
   octave_value (const Complex& C);
