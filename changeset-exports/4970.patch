# HG changeset patch
# User jwe
# Date 1094619752 0
#      Wed Sep 08 05:02:32 2004 +0000
# Node ID 25c2664861bcf4a77b40d9fa20fd35dc060f4131
# Parent  52f808101130f4e70df687356664e3ce6e2c4d5d
[project @ 2004-09-08 05:02:32 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,15 @@
 2004-09-07  John W. Eaton  <jwe@octave.org>
 
+	* data-conv.cc (oct_data_conv::string_to_data_type): Handle dt_logical.
+	(oct_data_conv::data_type_as_string): Likewise.
+
+	* data-conv.h (oct_data_conv::data_type): Add dt_logical to list.
+
 	* Range.cc (round): Delete unused function.
 
 	* lo-mappers.cc (xround): Rename from round.  Change all uses.
 	If HAVE_ROUND, call round, otherwise fake with floor and ceil.
 
 	* oct-inttypes.h: Include <cmath> here.
 
 2004-09-03  David Bateman  <dbateman@free.fr>
diff --git a/liboctave/data-conv.cc b/liboctave/data-conv.cc
--- a/liboctave/data-conv.cc
+++ b/liboctave/data-conv.cc
@@ -230,16 +230,18 @@ oct_data_conv::string_to_data_type (cons
     GET_SIZED_INT_TYPE (unsigned long long, u);
   else if (s == "float")
     {
       if (sizeof (float) == sizeof (double))
 	retval = dt_double;
       else
 	retval = dt_single;
     }
+  else if (s == "logical")
+    retval = dt_logical;
   else
     (*current_liboctave_error_handler) ("invalid data type specified");
 
   if (retval == dt_unknown)
     (*current_liboctave_error_handler)
       ("unable to find matching native data type for %s", s.c_str ());
 
   return retval;
@@ -443,16 +445,20 @@ oct_data_conv::data_type_as_string (oct_
     case oct_data_conv::dt_ulonglong:
       retval = "unsigned long long";
       break;
 
     case oct_data_conv::dt_float:
       retval = "float";
       break;
 
+    case oct_data_conv::dt_logical:
+      retval = "logical";
+      break;
+
     case oct_data_conv::dt_unknown:
     default:
       retval = "unknown";
       break;
     }
 
   return retval;
 }
diff --git a/liboctave/data-conv.h b/liboctave/data-conv.h
--- a/liboctave/data-conv.h
+++ b/liboctave/data-conv.h
@@ -74,26 +74,27 @@ public:
       dt_uint32    =  5,
       dt_int64     =  6,
       dt_uint64    =  7,
       dt_single    =  8,
       dt_double    =  9,
       dt_char      = 10,
       dt_schar     = 11,
       dt_uchar     = 12,
-      dt_short     = 13,
-      dt_ushort    = 14,
-      dt_int       = 15,
-      dt_uint      = 16,
-      dt_long      = 17,
-      dt_ulong     = 18,
-      dt_longlong  = 19,
-      dt_ulonglong = 20,
-      dt_float     = 21,
-      dt_unknown   = 22 // Must be last, have largest value!
+      dt_logical   = 13,
+      dt_short     = 14,
+      dt_ushort    = 15,
+      dt_int       = 16,
+      dt_uint      = 17,
+      dt_long      = 18,
+      dt_ulong     = 19,
+      dt_longlong  = 20,
+      dt_ulonglong = 21,
+      dt_float     = 22,
+      dt_unknown   = 23 // Must be last, have largest value!
     };
 
   static data_type string_to_data_type (const std::string& s);
 
   static void string_to_data_type (const std::string& s, int& block_size,
 				   data_type& input_type,
 				   data_type& output_type);
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,21 @@
+2004-09-08  John W. Eaton  <jwe@octave.org>
+
+	* ov.h: Add octave_array_type_traits specialization for
+	boolNDArray element type.
+
 2004-09-07  John W. Eaton  <jwe@octave.org>
 
+	* oct-stream.cc: Instantiate octave_stream::write for Array<bool>.
+	(octave_stream::read): Expand read_fptr_table to include dt_logical.
+
+	* ov-bool.h (octave_bool::write): New function.
+	* ov-bool-mat.h (octave_bool_matrix::write): New function.
+
 	* ov-fcn-inline.h (octave_fcn_inline::octave_fcn_inline): New copy
 	constructor.
 	(octave_fcn_inline::clone, octave_fcn_inline::empty_clone):
 	New functions.
 
 	* ov-fcn-handle.h (octave_fcn_handle::octave_fcn_handle): New copy
 	constructor.
 	(octave_fcn_handle::clone, octave_fcn_handle::empty_clone):
diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -2967,27 +2967,27 @@ do_read (octave_stream& strm, int nr, in
   DO_READ_VAL_TEMPLATE (VAL_T, octave_int64); \
   DO_READ_VAL_TEMPLATE (VAL_T, octave_uint64); \
   DO_READ_VAL_TEMPLATE (VAL_T, float); \
   DO_READ_VAL_TEMPLATE (VAL_T, double); \
   DO_READ_VAL_TEMPLATE (VAL_T, char); \
   DO_READ_VAL_TEMPLATE (VAL_T, signed char); \
   DO_READ_VAL_TEMPLATE (VAL_T, unsigned char)
 
-INSTANTIATE_DO_READ(int8NDArray);
-INSTANTIATE_DO_READ(uint8NDArray);
-INSTANTIATE_DO_READ(int16NDArray);
-INSTANTIATE_DO_READ(uint16NDArray);
-INSTANTIATE_DO_READ(int32NDArray);
-INSTANTIATE_DO_READ(uint32NDArray);
-INSTANTIATE_DO_READ(int64NDArray);
-INSTANTIATE_DO_READ(uint64NDArray);
-// INSTANTIATE_DO_READ(floatNDArray);
-INSTANTIATE_DO_READ(NDArray);
-INSTANTIATE_DO_READ(charNDArray);
+INSTANTIATE_DO_READ (int8NDArray);
+INSTANTIATE_DO_READ (uint8NDArray);
+INSTANTIATE_DO_READ (int16NDArray);
+INSTANTIATE_DO_READ (uint16NDArray);
+INSTANTIATE_DO_READ (int32NDArray);
+INSTANTIATE_DO_READ (uint32NDArray);
+INSTANTIATE_DO_READ (int64NDArray);
+INSTANTIATE_DO_READ (uint64NDArray);
+// INSTANTIATE_DO_READ (floatNDArray);
+INSTANTIATE_DO_READ (NDArray);
+INSTANTIATE_DO_READ (charNDArray);
 
 typedef octave_value (*read_fptr) (octave_stream&, int, int, int, int, bool,
 				   oct_mach_info::float_format ffmt, int&);
 
 INSTANTIATE_ARRAY (read_fptr);
 template class Array2<read_fptr>;
 
 #define FILL_TABLE_ROW(R, VAL_T) \
@@ -2998,45 +2998,47 @@ template class Array2<read_fptr>;
   read_fptr_table(R,oct_data_conv::dt_int32) = do_read<VAL_T, octave_int32>; \
   read_fptr_table(R,oct_data_conv::dt_uint32) = do_read<VAL_T, octave_uint32>; \
   read_fptr_table(R,oct_data_conv::dt_int64) = do_read<VAL_T, octave_int64>; \
   read_fptr_table(R,oct_data_conv::dt_uint64) = do_read<VAL_T, octave_uint64>; \
   read_fptr_table(R,oct_data_conv::dt_single) = do_read<VAL_T, float>; \
   read_fptr_table(R,oct_data_conv::dt_double) = do_read<VAL_T, double>; \
   read_fptr_table(R,oct_data_conv::dt_char) = do_read<VAL_T, char>; \
   read_fptr_table(R,oct_data_conv::dt_schar) = do_read<VAL_T, signed char>; \
-  read_fptr_table(R,oct_data_conv::dt_uchar) = do_read<VAL_T, unsigned char>
+  read_fptr_table(R,oct_data_conv::dt_uchar) = do_read<VAL_T, unsigned char>; \
+  read_fptr_table(R,oct_data_conv::dt_logical) = do_read<VAL_T, unsigned char>
 
 octave_value
 octave_stream::read (const Array<double>& size, int block_size,
 		     oct_data_conv::data_type input_type,
 		     oct_data_conv::data_type output_type,
 		     int skip, oct_mach_info::float_format ffmt,
 		     int& char_count)
 {
   static bool initialized = false;
 
   // Table function pointers for return types x read types.
 
-  static Array2<read_fptr> read_fptr_table (oct_data_conv::dt_unknown, 13, 0);
+  static Array2<read_fptr> read_fptr_table (oct_data_conv::dt_unknown, 14, 0);
 
   if (! initialized)
     {
       FILL_TABLE_ROW (oct_data_conv::dt_int8, int8NDArray);
       FILL_TABLE_ROW (oct_data_conv::dt_uint8, uint8NDArray);
       FILL_TABLE_ROW (oct_data_conv::dt_int16, int16NDArray);
       FILL_TABLE_ROW (oct_data_conv::dt_uint16, uint16NDArray);
       FILL_TABLE_ROW (oct_data_conv::dt_int32, int32NDArray);
       FILL_TABLE_ROW (oct_data_conv::dt_uint32, uint32NDArray);
       FILL_TABLE_ROW (oct_data_conv::dt_int64, int64NDArray);
       FILL_TABLE_ROW (oct_data_conv::dt_uint64, uint64NDArray);
       FILL_TABLE_ROW (oct_data_conv::dt_double, NDArray);
       FILL_TABLE_ROW (oct_data_conv::dt_char, charNDArray);
       FILL_TABLE_ROW (oct_data_conv::dt_schar, charNDArray);
       FILL_TABLE_ROW (oct_data_conv::dt_uchar, charNDArray);
+      FILL_TABLE_ROW (oct_data_conv::dt_logical, boolNDArray);
 
       initialized = true;
     }
 
   octave_value retval;
 
   if (stream_ok ("fread"))
     {
@@ -3306,16 +3308,21 @@ octave_stream::write (const Array<T>& da
 }
 
 template int
 octave_stream::write (const Array<char>&, int,
 		      oct_data_conv::data_type,
 		      int, oct_mach_info::float_format);
 
 template int
+octave_stream::write (const Array<bool>&, int,
+		      oct_data_conv::data_type,
+		      int, oct_mach_info::float_format);
+
+template int
 octave_stream::write (const Array<double>&, int,
 		      oct_data_conv::data_type,
 		      int, oct_mach_info::float_format);
 
 template int
 octave_stream::write (const Array<octave_int8>&, int,
 		      oct_data_conv::data_type,
 		      int, oct_mach_info::float_format);
diff --git a/src/ov-bool-mat.h b/src/ov-bool-mat.h
--- a/src/ov-bool-mat.h
+++ b/src/ov-bool-mat.h
@@ -31,16 +31,17 @@ Software Foundation, 59 Temple Place - S
 
 #include <iostream>
 #include <string>
 
 #include "mx-base.h"
 #include "oct-alloc.h"
 
 #include "error.h"
+#include "oct-stream.h"
 #include "ov-base.h"
 #include "ov-base-mat.h"
 #include "ov-typeinfo.h"
 
 class Octave_map;
 class octave_value_list;
 
 class tree_walker;
@@ -126,16 +127,21 @@ public:
 		    oct_mach_info::float_format fmt);
 
 #if defined (HAVE_HDF5)
   bool save_hdf5 (hid_t loc_id, const char *name, bool save_as_floats);
 
   bool load_hdf5 (hid_t loc_id, const char *name, bool have_h5giterate_bug);
 #endif
 
+  int write (octave_stream& os, int block_size,
+	     oct_data_conv::data_type output_type, int skip,
+	     oct_mach_info::float_format flt_fmt) const
+    { return os.write (matrix, block_size, output_type, skip, flt_fmt); }
+
 protected:
 
   DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
diff --git a/src/ov-bool.h b/src/ov-bool.h
--- a/src/ov-bool.h
+++ b/src/ov-bool.h
@@ -32,16 +32,17 @@ Software Foundation, 59 Temple Place - S
 #include <iostream>
 #include <string>
 
 #include "lo-utils.h"
 #include "mx-base.h"
 #include "oct-alloc.h"
 #include "str-vec.h"
 
+#include "oct-stream.h"
 #include "ov-base.h"
 #include "ov-base-scalar.h"
 #include "ov-typeinfo.h"
 
 class Octave_map;
 class octave_value_list;
 
 class tree_walker;
@@ -127,16 +128,24 @@ public:
 		    oct_mach_info::float_format fmt);
 
 #if defined (HAVE_HDF5)
   bool save_hdf5 (hid_t loc_id, const char *name, bool save_as_floats);
 
   bool load_hdf5 (hid_t loc_id, const char *name, bool have_h5giterate_bug);
 #endif
 
+  int write (octave_stream& os, int block_size,
+	     oct_data_conv::data_type output_type, int skip,
+	     oct_mach_info::float_format flt_fmt) const
+    {
+      return os.write (bool_array_value (), block_size, output_type,
+		       skip, flt_fmt);
+    }
+
 private:
 
   DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -24,18 +24,19 @@ Software Foundation, 59 Temple Place - S
 #pragma implementation
 #endif
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "Array-flags.h"
+#include "data-conv.h"
+#include "quit.h"
 #include "str-vec.h"
-#include "quit.h"
 
 #include "oct-obj.h"
 #include "oct-stream.h"
 #include "ov.h"
 #include "ov-base.h"
 #include "ov-bool.h"
 #include "ov-bool-mat.h"
 #include "ov-cell.h"
@@ -2153,16 +2154,35 @@ install_types (void)
   octave_mapper::register_type ();
   octave_user_function::register_type ();
   octave_dld_function::register_type ();
   octave_fcn_handle::register_type ();
   octave_fcn_inline::register_type ();
   octave_streamoff::register_type ();
 }
 
+#if 0
+DEFUN (cast, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} cast (@var{val}, @var{type})\n\
+Convert @var{val} to the new data type @var{type}.\n\
+@end deftypefn\n\
+@seealso{class, typeinfo}")
+{
+  octave_value retval;
+
+  if (args.length () == 2)
+    error ("cast: not implemented");
+  else
+    print_usage ("cast");
+
+  return retval;
+}
+#endif
+
 DEFUN (sizeof, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} sizeof (@var{val})\n\
 Return the size of @var{val} in bytes\n\
 @end deftypefn")
 {
   octave_value retval;
 
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -995,16 +995,17 @@ public:
   class \
   octave_array_type_traits<T> \
   { \
   public: \
     typedef ELT_T element_type; \
   }
 
 OCTAVE_ARRAY_TYPE_TRAIT (charNDArray, char);
+OCTAVE_ARRAY_TYPE_TRAIT (boolNDArray, bool);
 OCTAVE_ARRAY_TYPE_TRAIT (int8NDArray, octave_int8);
 OCTAVE_ARRAY_TYPE_TRAIT (uint8NDArray, octave_uint8);
 OCTAVE_ARRAY_TYPE_TRAIT (int16NDArray, octave_int16);
 OCTAVE_ARRAY_TYPE_TRAIT (uint16NDArray, octave_uint16);
 OCTAVE_ARRAY_TYPE_TRAIT (int32NDArray, octave_int32);
 OCTAVE_ARRAY_TYPE_TRAIT (uint32NDArray, octave_uint32);
 OCTAVE_ARRAY_TYPE_TRAIT (int64NDArray, octave_int64);
 OCTAVE_ARRAY_TYPE_TRAIT (uint64NDArray, octave_uint64);
