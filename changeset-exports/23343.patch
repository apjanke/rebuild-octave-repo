# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1491250879 14400
#      Mon Apr 03 16:21:19 2017 -0400
# Node ID 49f051ef6f2fdbb78be5d9da1b1ccdbef69fe495
# Parent  c70c0397ca2f4bc698e10f8e9204a8442d89a437
local functions in classdef files (bug #41723)

* symtab.h, symtab.cc (symbol_table::fcn_info::fcn_info_rep::xfind):
Also handle file-local functions
(symbol_table::fcn_info::fcn_info_rep::x_builtin_find): Likewise.
(symbol_table::fcn_info::fcn_info_rep::dump): Display info about local
functions.
(symbol_table::fcn_info::fcn_info_rep::local_functions): New map.
(symbol_table::fcn_info::fcn_info_rep::fcn_info_rep): Initialize it.
(symbol_table::fcn_info::fcn_info_rep::install_local_funciton): New function.
(symbol_table::fcn_info::fcn_info_rep::clear): Clear local_functions map.
(symbol_table::fcn_info::install_local_function): New function.
(symbol_table::install_local_function): New function.

* parse.h, oct-parse.in.yy (fcn_list, fcn_list1, opt_fcn_list):
New non-terminals.  Set parsing_local_functions after classdef is
recognized.
(file): Accept opt_fcn_list list after classdef object.
(base_parser::parsing_local_functions): New data member.
(base_parser::base_parser): Initialize it.
(base_parser::finish_function): Handle local functions.

diff --git a/libinterp/corefcn/symtab.cc b/libinterp/corefcn/symtab.cc
--- a/libinterp/corefcn/symtab.cc
+++ b/libinterp/corefcn/symtab.cc
@@ -701,28 +701,52 @@ symbol_table::fcn_info::fcn_info_rep::fi
 }
 
 octave_value
 symbol_table::fcn_info::fcn_info_rep::xfind (const octave_value_list& args,
                                              bool local_funcs)
 {
   if (local_funcs)
     {
+      octave_user_function *current_fcn = symbol_table::get_curr_fcn ();
+
+      // Local function.
+
+      if (current_fcn)
+        {
+          std::string fcn_file = current_fcn->fcn_file_name ();
+
+          if (! fcn_file.empty ())
+            {
+              str_val_iterator r = local_functions.find (fcn_file);
+
+              if (r != local_functions.end ())
+                {
+                  // We shouldn't need an out-of-date check here since
+                  // local functions may ultimately be called only from
+                  // a primary function or method defined in the same
+                  // file.
+
+                  return r->second;
+                }
+            }
+        }
+
       // Subfunction.  I think it only makes sense to check for
       // subfunctions if we are currently executing a function defined
       // from a .m file.
 
-      octave_user_function *current_fcn = symbol_table::get_curr_fcn ();
-
       for (scope_id scope = xcurrent_scope; scope >= 0;)
         {
           scope_val_iterator r = subfunctions.find (scope);
           if (r != subfunctions.end ())
             {
-              // FIXME: out-of-date check here.
+              // We shouldn't need an out-of-date check here since
+              // subfunctions may ultimately be called only from a
+              // primary function or method defined in the same file.
 
               return r->second;
             }
 
           octave_user_function *scope_curr_fcn = get_curr_fcn (scope);
           if (scope_curr_fcn)
             scope = scope_curr_fcn->parent_fcn_scope ();
           else
@@ -936,26 +960,49 @@ symbol_table::fcn_info::fcn_info_rep::x_
 
                   if (val.is_defined ())
                     return val;
                 }
             }
         }
     }
 
+  // Local function.
+
+  if (current_fcn)
+    {
+      std::string fcn_file = current_fcn->fcn_file_name ();
+
+      if (! fcn_file.empty ())
+        {
+          str_val_iterator r = local_functions.find (fcn_file);
+
+          if (r != local_functions.end ())
+            {
+              // We shouldn't need an out-of-date check here since local
+              // functions may ultimately be called only from a primary
+              // function or method defined in the same file.
+
+              return r->second;
+            }
+        }
+    }
+
   // Subfunction.  I think it only makes sense to check for
   // subfunctions if we are currently executing a function defined
   // from a .m file.
 
   for (scope_id scope = xcurrent_scope; scope >= 0;)
     {
       scope_val_iterator r = subfunctions.find (scope);
       if (r != subfunctions.end ())
         {
-          // FIXME: out-of-date check here.
+          // We shouldn't need an out-of-date check here since
+          // subfunctions may ultimately be called only from a primary
+          // function or method defined in the same file.
 
           return r->second;
         }
 
       octave_user_function *scope_curr_fcn = get_curr_fcn (scope);
       if (scope_curr_fcn)
         scope = scope_curr_fcn->parent_fcn_scope ();
       else
@@ -1176,16 +1223,23 @@ symbol_table::fcn_info::fcn_info_rep::du
 
   if (! subfunctions.empty ())
     {
       for (const auto& scope_val : subfunctions)
         os << tprefix << "subfunction: " << fcn_file_name (scope_val.second)
            << " [" << scope_val.first << "]\n";
     }
 
+  if (! local_functions.empty ())
+    {
+      for (const auto& str_val : local_functions)
+        os << tprefix << "local: " << fcn_file_name (str_val.second)
+           << " [" << str_val.first << "]\n";
+    }
+
   if (! private_functions.empty ())
     {
       for (const auto& str_val : private_functions)
         os << tprefix << "private: " << fcn_file_name (str_val.second)
            << " [" << str_val.first << "]\n";
     }
 
   if (! class_constructors.empty ())
diff --git a/libinterp/corefcn/symtab.h b/libinterp/corefcn/symtab.h
--- a/libinterp/corefcn/symtab.h
+++ b/libinterp/corefcn/symtab.h
@@ -742,36 +742,38 @@ public:
   private:
 
     class
     fcn_info_rep
     {
     public:
 
       fcn_info_rep (const std::string& nm)
-        : name (nm), package_name (), subfunctions (), private_functions (),
-          class_constructors (), class_methods (), cmdline_function (),
-          autoload_function (), function_on_path (), built_in_function (),
-          count (1)
+        : name (nm), package_name (), subfunctions (), local_functions (),
+          private_functions (), class_constructors (), class_methods (),
+          cmdline_function (), autoload_function (), function_on_path (),
+          built_in_function (), count (1)
       {
         size_t pos = name.rfind ('.');
 
         if (pos != std::string::npos)
           {
             package_name = name.substr (0, pos);
             name = name.substr (pos+1);
           }
       }
 
       // No copying!
 
       fcn_info_rep (const fcn_info_rep&) = delete;
 
       fcn_info_rep& operator = (const fcn_info_rep&) = delete;
 
+      octave_value install_local_function (const std::string& file_name);
+
       octave_value load_private_function (const std::string& dir_name);
 
       octave_value load_class_constructor (void);
 
       octave_value load_class_method (const std::string& dispatch_type);
 
       octave_value find (const octave_value_list& args, bool local_funcs);
 
@@ -838,16 +840,22 @@ public:
         cmdline_function = f;
       }
 
       void install_subfunction (const octave_value& f, scope_id scope)
       {
         subfunctions[scope] = f;
       }
 
+      void install_local_function (const octave_value& f,
+                                   const std::string& file_name)
+      {
+        local_functions[file_name] = f;
+      }
+
       void install_user_function (const octave_value& f)
       {
         function_on_path = f;
       }
 
       void install_built_in_function (const octave_value& f)
       {
         built_in_function = f;
@@ -898,16 +906,17 @@ public:
       void clear_package (void)
       {
         package = octave_value ();
       }
 
       void clear (bool force = false)
       {
         clear_map (subfunctions, force);
+        clear_map (local_functions, force);
         clear_map (private_functions, force);
         clear_map (class_constructors, force);
         clear_map (class_methods, force);
 
         clear_autoload_function (force);
         clear_user_function (force);
         clear_package ();
       }
@@ -924,16 +933,19 @@ public:
 
       std::string name;
 
       std::string package_name;
 
       // Scope id to function object.
       std::map<scope_id, octave_value> subfunctions;
 
+      // File name to function object.
+      std::map<std::string, octave_value> local_functions;
+
       // Directory name to function object.
       std::map<std::string, octave_value> private_functions;
 
       // Class name to function object.
       std::map<std::string, octave_value> class_constructors;
 
       // Dispatch type to function object.
       std::map<std::string, octave_value> class_methods;
@@ -1067,16 +1079,22 @@ public:
       rep->install_cmdline_function (f);
     }
 
     void install_subfunction (const octave_value& f, scope_id scope)
     {
       rep->install_subfunction (f, scope);
     }
 
+    void install_local_function (const octave_value& f,
+                                 const std::string& file_name)
+    {
+      rep->install_local_function (f, file_name);
+    }
+
     void install_user_function (const octave_value& f)
     {
       rep->install_user_function (f);
     }
 
     void install_built_in_function (const octave_value& f)
     {
       rep->install_built_in_function (f);
@@ -1570,16 +1588,41 @@ public:
 
   static void update_nest (scope_id scope)
   {
     symbol_table *inst = get_instance (scope);
     if (inst)
       inst->do_update_nest ();
   }
 
+  // Install local function FCN named NAME.  FILE_NAME is the name of
+  // the file containing the local function.
+
+  static void install_local_function (const std::string& name,
+                                      const octave_value& fcn,
+                                      const std::string& file_name)
+  {
+    fcn_table_iterator p = fcn_table.find (name);
+
+    if (p != fcn_table.end ())
+      {
+        fcn_info& finfo = p->second;
+
+        finfo.install_local_function (fcn, file_name);
+      }
+    else
+      {
+        fcn_info finfo (name);
+
+        finfo.install_local_function (fcn, file_name);
+
+        fcn_table[name] = finfo;
+      }
+  }
+
   static void install_user_function (const std::string& name,
                                      const octave_value& fcn)
   {
     fcn_table_iterator p = fcn_table.find (name);
 
     if (p != fcn_table.end ())
       {
         fcn_info& finfo = p->second;
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -226,16 +226,17 @@ static void yyerror (octave::base_parser
 %token<dummy_type> INPUT_FILE
 // %token VARARGIN VARARGOUT
 
 %token<dummy_type> '(' ')' '[' ']' '{' '}' '.' ',' ';' '@' '\n'
 
 // Nonterminals we construct.
 %type <dummy_type> indirect_ref_op decl_param_init push_fcn_symtab
 %type <dummy_type> param_list_beg param_list_end stmt_begin parse_error
+%type <dummy_type> parsing_local_fcns
 %type <comment_type> stash_comment
 %type <tok_val> function_beg classdef_beg
 %type <punct_type> sep_no_nl opt_sep_no_nl nl opt_nl sep opt_sep
 %type <tree_type> input
 %type <tree_constant_type> string constant magic_colon
 %type <tree_anon_fcn_handle_type> anon_fcn_handle
 %type <tree_fcn_handle_type> fcn_handle
 %type <tree_matrix_type> matrix_rows
@@ -264,16 +265,17 @@ static void yyerror (octave::base_parser
 %type <tree_switch_case_type> switch_case default_case
 %type <tree_switch_case_list_type> case_list1 case_list
 %type <tree_decl_elt_type> decl2 param_list_elt
 %type <tree_decl_init_list_type> decl1
 %type <tree_decl_command_type> declaration
 %type <tree_statement_type> statement function_end
 %type <tree_statement_list_type> simple_list simple_list1 list list1
 %type <tree_statement_list_type> opt_list
+%type <tree_statement_list_type> opt_fcn_list fcn_list fcn_list1
 %type <tree_classdef_attribute_type> attr
 %type <tree_classdef_attribute_list_type> attr_list opt_attr_list
 %type <tree_classdef_superclass_type> superclass
 %type <tree_classdef_superclass_list_type> superclass_list opt_superclass_list
 %type <tree_classdef_body_type> class_body
 %type <tree_classdef_property_type> class_property
 %type <tree_classdef_property_list_type> property_list
 %type <tree_classdef_properties_block_type> properties_block
@@ -426,16 +428,42 @@ list            : list1 opt_sep
                 ;
 
 list1           : statement
                   { $$ = parser.make_statement_list ($1); }
                 | list1 sep statement
                   { $$ = parser.append_statement_list ($1, $2, $3, true); }
                 ;
 
+opt_fcn_list    : // empty
+                  { $$ = 0; }
+                | fcn_list
+                  { $$ = $1; }
+                ;
+                
+fcn_list        : fcn_list1 opt_sep
+                  {
+                    YYUSE ($2);
+
+                    $$ = $1;
+                  }
+                ;
+
+fcn_list1       : function
+                  {
+                    octave::tree_statement *stmt = parser.make_statement ($1);
+                    $$ = new octave::tree_statement_list (stmt);
+                  }
+                | fcn_list1 opt_sep function
+                  {
+                    octave::tree_statement *stmt = parser.make_statement ($3);
+                    $$ = parser.append_statement_list ($1, $2, stmt, false);
+                  }
+                ;
+
 statement       : expression
                   { $$ = parser.make_statement ($1); }
                 | command
                   { $$ = parser.make_statement ($1); }
                 | word_list_cmd
                   { $$ = parser.make_statement ($1); }
                 ;
 
@@ -1380,16 +1408,21 @@ return_list1    : identifier
                     $$ = $1;
                   }
                 ;
 
 // =======================
 // Script or function file
 // =======================
 
+parsing_local_fcns
+                : // empty
+                  { parser.parsing_local_functions = true; }
+                ;
+
 file            : INPUT_FILE opt_nl opt_list END_OF_INPUT
                   {
                     YYUSE ($2);
 
                     if (lexer.reading_fcn_file)
                       {
                         // Delete the dummy statement_list we created
                         // after parsing the function.  Any function
@@ -1406,20 +1439,21 @@ file            : INPUT_FILE opt_nl opt_
                                              lexer.input_line_number,
                                              lexer.current_input_column);
 
                         parser.make_script ($3, end_of_script);
                       }
 
                     $$ = 0;
                   }
-                | INPUT_FILE opt_nl classdef opt_sep END_OF_INPUT
+                | INPUT_FILE opt_nl classdef parsing_local_fcns opt_sep opt_fcn_list END_OF_INPUT
                   {
                     YYUSE ($2);
-                    YYUSE ($4);
+                    YYUSE ($5);
+                    YYUSE ($6);
 
                     if (lexer.reading_classdef_file)
                       parser.classdef_object = $3;
 
                     $$ = 0;
                   }
                 ;
 
@@ -2103,17 +2137,18 @@ namespace octave
   void base_parser::parent_scope_info::clear (void)
   {
     info.clear ();
     all_names.clear ();
   }
 
   base_parser::base_parser (base_lexer& lxr)
     : endfunction_found (false), autoloading (false),
-      fcn_file_from_relative_lookup (false), parsing_subfunctions (false),
+      fcn_file_from_relative_lookup (false),
+      parsing_subfunctions (false), parsing_local_functions (false),
       max_fcn_depth (0), curr_fcn_depth (0), primary_fcn_scope (-1),
       curr_class_name (), curr_package_name (), function_scopes (),
       primary_fcn_ptr (0), subfunction_names (), classdef_object (0),
       stmt_list (0), lexer (lxr), parser_state (yypstate_new ())
   { }
 
   base_parser::~base_parser (void)
   {
@@ -2134,16 +2169,17 @@ namespace octave
 
   void
   base_parser::reset (void)
   {
     endfunction_found = false;
     autoloading = false;
     fcn_file_from_relative_lookup = false;
     parsing_subfunctions = false;
+    parsing_local_functions = false;
     max_fcn_depth = 0;
     curr_fcn_depth = 0;
     primary_fcn_scope = -1;
     curr_class_name = "";
     curr_package_name = "";
     function_scopes.clear ();
     primary_fcn_ptr  = 0;
     subfunction_names.clear ();
@@ -3370,18 +3406,24 @@ namespace octave
                 fcn->mark_as_subfunction ();
                 subfunction_names.push_back (nm);
 
                 symbol_table::install_subfunction (nm, octave_value (fcn),
                                                    primary_fcn_scope);
                }
           }
 
-        if (curr_fcn_depth == 1 && fcn)
-          symbol_table::update_nest (fcn->scope ());
+        if (fcn)
+          {
+            if (parsing_local_functions )
+              symbol_table::install_local_function (nm, octave_value (fcn),
+                                                    file);
+            else if (curr_fcn_depth == 1)
+              symbol_table::update_nest (fcn->scope ());
+          }
 
         if (! lexer.reading_fcn_file && curr_fcn_depth == 1)
           {
             // We are either reading a script file or defining a function
             // at the command line, so this definition creates a
             // tree_function object that is placed in the parse tree.
             // Otherwise, it is just inserted in the symbol table,
             // either as a subfunction or nested function (see above),
diff --git a/libinterp/parse-tree/parse.h b/libinterp/parse-tree/parse.h
--- a/libinterp/parse-tree/parse.h
+++ b/libinterp/parse-tree/parse.h
@@ -408,16 +408,21 @@ namespace octave
     // TRUE means the current function file was found in a relative path
     // element.
     bool fcn_file_from_relative_lookup;
 
     // FALSE if we are still at the primary function.  Subfunctions can
     // only be declared inside function files.
     bool parsing_subfunctions;
 
+    // TRUE if we are parsing local functions defined at after a
+    // classdef block.  Local functions can only be declared inside
+    // classdef files.
+    bool parsing_local_functions;
+
     // Maximum function depth detected.  Used to determine whether
     // we have nested functions or just implicitly ended subfunctions.
     int max_fcn_depth;
 
     // = 0 currently outside any function.
     // = 1 inside the primary function or a subfunction.
     // > 1 means we are looking at a function definition that seems to be
     //     inside a function.  Note that the function still might not be a
