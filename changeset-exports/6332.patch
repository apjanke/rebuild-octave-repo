# HG changeset patch
# User jwe
# Date 1172004095 0
#      Tue Feb 20 20:41:35 2007 +0000
# Node ID debb662eab079788d8eebcc750006d4db1ec7861
# Parent  9e3e58d914cac637b9eb5dec9e1b9e8a8c0c54d1
[project @ 2007-02-20 20:41:35 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,20 @@
+2007-02-20  John W. Eaton  <jwe@octave.org>
+
+	* mxarray.h (mxArray::get_scalar): New function.
+	* mex.cc (mxArray_base::get_scalar): New pure virtual function.
+	(mxArray_octave_value::get_scalar, mxArray_matlab::get_scalar,
+	mxArray_number::get_scalar): New functions.
+	(mxGetScalar): Call get_scalar here.
+
+	* mex.cc (mxArray_octave_value::get_dimensions): Cache ndims here.
+	(mxArray_octave_value::get_number_of_dimensions):
+	Call get_dimensions here to cache both ndims and dims.
+
 2007-02-17  John W. Eaton  <jwe@octave.org>
 
 	* variables.cc (symbol_out_of_date): Don't exit early if looking
 	at nested function.
 
 2007-02-16  John W. Eaton  <jwe@octave.org>
 
 	* dynamic-ld.cc (octave_dynamic_loader::do_load_oct): Clear
diff --git a/src/mex.cc b/src/mex.cc
--- a/src/mex.cc
+++ b/src/mex.cc
@@ -177,16 +177,18 @@ public:
   mxArray *get_cell (int /*idx*/) const
   {
     invalid_type_error ();
     return 0;
   }
 
   void set_cell (int idx, mxArray *val) = 0;
 
+  double get_scalar (void) const = 0;
+
   void *get_data (void) const = 0;
 
   void *get_imag_data (void) const = 0;
 
   void set_data (void *pr) = 0;
 
   void set_imag_data (void *pi) = 0;
 
@@ -332,34 +334,33 @@ public:
 
     return n;
   }
 
   int *get_dimensions (void) const
   {
     if (! dims)
       {
-	// Force ndims to be cached.
-	get_number_of_dimensions ();
+	ndims = val.ndims ();
 
 	dims = static_cast<int *> (malloc (ndims * sizeof (int)));
 
 	dim_vector dv = val.dims ();
 
 	for (int i = 0; i < ndims; i++)
 	  dims[i] = dv(i);
       }
 
     return dims;
   }
 
   int get_number_of_dimensions (void) const
   {
-    if (ndims < 0)
-      ndims = val.ndims ();
+    // Force dims and ndims to be cached.
+    get_dimensions ();
 
     return ndims;
   }
 
   void set_m (int /*m*/) { panic_impossible (); }
 
   void set_n (int /*n*/) { panic_impossible (); }
 
@@ -437,16 +438,18 @@ public:
   {
     request_mutation ();
     return 0;
   }
 
   // Not allowed.
   void set_cell (int /*idx*/, mxArray */*val*/) { panic_impossible (); }
 
+  double get_scalar (void) const { return val.scalar_value (true); }
+
   void *get_data (void) const
   {
     void *retval = 0;
 
     if (is_char ()
 	|| (is_numeric () && is_real_type () && ! is_range ()))
       retval = val.mex_get_data ();
     else
@@ -866,16 +869,22 @@ public:
     return 0;
   }
 
   void set_cell (int /*idx*/, mxArray */*val*/)
   {
     invalid_type_error ();
   }
 
+  double get_scalar (void) const
+  {
+    invalid_type_error ();
+    return 0;
+  }
+
   void *get_data (void) const
   {
     invalid_type_error ();
     return 0;
   }
 
   void *get_imag_data (void) const
   {
@@ -1136,16 +1145,77 @@ public:
   ~mxArray_number (void)
   {
     mxFree (pr);
     mxFree (pi);
   }
 
   int is_complex (void) const { return pi != 0; }
 
+  double get_scalar (void) const
+  {
+    double retval = 0;
+
+    switch (get_class_id ())
+      {
+      case mxLOGICAL_CLASS:
+	retval = *(static_cast<bool *> (pr));
+	break;
+
+      case mxCHAR_CLASS:
+	retval = *(static_cast<mxChar *> (pr));
+	break;
+
+      case mxSINGLE_CLASS:
+	retval = *(static_cast<float *> (pr));
+	break;
+
+      case mxDOUBLE_CLASS:
+	retval = *(static_cast<double *> (pr));
+	break;
+
+      case mxINT8_CLASS:
+	retval = *(static_cast<int8_t *> (pr));
+	break;
+
+      case mxUINT8_CLASS:
+	retval = *(static_cast<uint8_t *> (pr));
+	break;
+
+      case mxINT16_CLASS:
+	retval = *(static_cast<int16_t *> (pr));
+	break;
+
+      case mxUINT16_CLASS:
+	retval = *(static_cast<uint16_t *> (pr));
+	break;
+
+      case mxINT32_CLASS:
+	retval = *(static_cast<int32_t *> (pr));
+	break;
+
+      case mxUINT32_CLASS:
+	retval = *(static_cast<uint32_t *> (pr));
+	break;
+
+      case mxINT64_CLASS:
+	retval = *(static_cast<int64_t *> (pr));
+	break;
+
+      case mxUINT64_CLASS:
+	retval = *(static_cast<uint64_t *> (pr));
+	break;
+
+      default:
+	panic_impossible ();
+      }
+
+    return retval;
+  }
+
   void *get_data (void) const { return pr; }
 
   void *get_imag_data (void) const { return pi; }
 
   void set_data (void *pr_arg) { pr = pr_arg; }
 
   void set_imag_data (void *pi_arg) { pi = pi_arg; }
 
@@ -2660,18 +2730,17 @@ double *
 mxGetPi (const mxArray *ptr)
 {
   return static_cast<double *> (ptr->get_imag_data ());
 }
 
 double
 mxGetScalar (const mxArray *ptr)
 {
-  double *d = mxGetPr (ptr);
-  return d[0];
+  return ptr->get_scalar ();
 }
 
 mxChar *
 mxGetChars (const mxArray *ptr)
 {
   return static_cast<mxChar *> (ptr->get_data ());
 }
 
diff --git a/src/mxarray.h b/src/mxarray.h
--- a/src/mxarray.h
+++ b/src/mxarray.h
@@ -231,16 +231,18 @@ public:
   virtual const char *get_class_name (void) const { return rep->get_class_name (); }
 
   virtual void set_class_name (const char *name_arg) { DO_VOID_MUTABLE_METHOD (set_class_name (name_arg)); }
 
   virtual mxArray *get_cell (int idx) const { DO_MUTABLE_METHOD (mxArray *, get_cell (idx)); }
 
   virtual void set_cell (int idx, mxArray *val) { DO_VOID_MUTABLE_METHOD (set_cell (idx, val)); }
 
+  virtual double get_scalar (void) const { return rep->get_scalar (); }
+
   virtual void *get_data (void) const { DO_MUTABLE_METHOD (void *, get_data ()); }
 
   virtual void *get_imag_data (void) const { DO_MUTABLE_METHOD (void *, get_imag_data ()); }
 
   virtual void set_data (void *pr) { DO_VOID_MUTABLE_METHOD (set_data (pr)); }
 
   virtual void set_imag_data (void *pi) { DO_VOID_MUTABLE_METHOD (set_imag_data (pi)); }
 
