# HG changeset patch
# User Max Brister <max@2bass.com>
# Date 1343317226 18000
#      Thu Jul 26 10:40:26 2012 -0500
# Node ID ae3670d4df292e2bbbc245a3c5d5224bf0eef37b
# Parent  3d8ace26c5b49a8e0fc0e603b44894c0a5bad1a1
Update the execution engine's global mapping for external functions

* src/jit_typeinfo.cc: (octave_jit_print_double): Rename to
octave_jit_print_scalar
(jit_function::do_add_mapping): New function.
(jit_typeinfo::jit_typeinfo, jit_typeinfo::add_print): Add mappings.
(jit_typeinfo::do_insert_error_check): Rename builder argument.
* src/jit_typeinfo.h: (jit_function::add_mapping): New function.
(jit_function::do_add_mapping): New declaration.
(jit_typeinfo::add_print): Take function ptr as argument.

diff --git a/src/jit-typeinfo.cc b/src/jit-typeinfo.cc
--- a/src/jit-typeinfo.cc
+++ b/src/jit-typeinfo.cc
@@ -63,17 +63,17 @@ std::ostream& jit_print (std::ostream& o
 // function that jit code calls
 extern "C" void
 octave_jit_print_any (const char *name, octave_base_value *obv)
 {
   obv->print_with_name (octave_stdout, name, true);
 }
 
 extern "C" void
-octave_jit_print_double (const char *name, double value)
+octave_jit_print_scalar (const char *name, double value)
 {
   // FIXME: We should avoid allocating a new octave_scalar each time
   octave_value ov (value);
   ov.print_with_name (octave_stdout, name);
 }
 
 extern "C" octave_base_value*
 octave_jit_binary_any_any (octave_value::binary_op op, octave_base_value *lhs,
@@ -609,16 +609,23 @@ jit_function::do_return (llvm::IRBuilder
         builder.CreateRet (rval);
     }
   else
     builder.CreateRetVoid ();
 
   llvm::verifyFunction (*llvm_function);
 }
 
+void
+jit_function::do_add_mapping (llvm::ExecutionEngine *engine, void *fn)
+{
+  assert (valid ());
+  engine->addGlobalMapping (llvm_function, fn);
+}
+
 std::ostream&
 operator<< (std::ostream& os, const jit_function& fn)
 {
   llvm::Function *lfn = fn.to_llvm ();
   os << "jit_function: cc=" << fn.call_conv;
   llvm::raw_os_ostream llvm_out (os);
   lfn->print (llvm_out);
   llvm_out.flush ();
@@ -791,16 +798,17 @@ jit_typeinfo::jit_typeinfo (llvm::Module
 
   // any with anything is an any op
   jit_function fn;
   jit_type *binary_op_type = intN (sizeof (octave_value::binary_op) * 8);
   llvm::Type *llvm_bo_type = binary_op_type->to_llvm ();
   jit_function any_binary = create_function (jit_convention::external,
                                              "octave_jit_binary_any_any",
                                              any, binary_op_type, any, any);
+  any_binary.add_mapping (engine, &octave_jit_binary_any_any);
   any_binary.mark_can_error ();
   binary_ops.resize (octave_value::num_binary_ops);
   for (size_t i = 0; i < octave_value::num_binary_ops; ++i)
     {
       octave_value::binary_op op = static_cast<octave_value::binary_op> (i);
       std::string op_name = octave_value::binary_op_as_string (op);
       binary_ops[i].stash_name ("binary" + op_name);
     }
@@ -822,33 +830,37 @@ jit_typeinfo::jit_typeinfo (llvm::Module
                                           fn.argument (builder, 1));
       fn.do_return (builder, ret);
       binary_ops[op].add_overload (fn);
     }
 
   // grab any
   fn = create_function (jit_convention::external, "octave_jit_grab_any", any,
                         any);
+  fn.add_mapping (engine, &octave_jit_grab_any);
   grab_fn.add_overload (fn);
   grab_fn.stash_name ("grab");
 
   // grab matrix
   fn = create_function (jit_convention::external, "octave_jit_grab_matrix",
                         matrix, matrix);
+  fn.add_mapping (engine, &octave_jit_grab_matrix);
   grab_fn.add_overload (fn);
 
   // release any
   fn = create_function (jit_convention::external, "octave_jit_release_any", 0,
                         any);
+  fn.add_mapping (engine, &octave_jit_release_any);
   release_fn.add_overload (fn);
   release_fn.stash_name ("release");
 
   // release matrix
   fn = create_function (jit_convention::external, "octave_jit_release_matrix",
                         0, matrix);
+  fn.add_mapping (engine, &octave_jit_release_matrix);
   release_fn.add_overload (fn);
 
   // release scalar
   fn = create_identity (scalar);
   release_fn.add_overload (fn);
 
   // release complex
   fn = create_identity (complex);
@@ -869,16 +881,17 @@ jit_typeinfo::jit_typeinfo (llvm::Module
   add_binary_fcmp (scalar, octave_value::op_le, llvm::CmpInst::FCMP_ULE);
   add_binary_fcmp (scalar, octave_value::op_eq, llvm::CmpInst::FCMP_UEQ);
   add_binary_fcmp (scalar, octave_value::op_ge, llvm::CmpInst::FCMP_UGE);
   add_binary_fcmp (scalar, octave_value::op_gt, llvm::CmpInst::FCMP_UGT);
   add_binary_fcmp (scalar, octave_value::op_ne, llvm::CmpInst::FCMP_UNE);
 
   jit_function gripe_div0 = create_function (jit_convention::external,
                                              "gripe_divide_by_zero", 0);
+  gripe_div0.add_mapping (engine, &gripe_divide_by_zero);
   gripe_div0.mark_can_error ();
 
   // divide is annoying because it might error
   fn = create_function (jit_convention::internal,
                         "octave_jit_div_scalar_scalar", scalar, scalar, scalar);
   fn.mark_can_error ();
 
   llvm::BasicBlock *body = fn.new_block ();
@@ -909,16 +922,17 @@ jit_typeinfo::jit_typeinfo (llvm::Module
   binary_ops[octave_value::op_el_ldiv].add_overload (fn);
 
   // In general, the result of scalar ^ scalar is a complex number. We might be
   // able to improve on this if we keep track of the range of values varaibles
   // can take on.
   fn = create_function (jit_convention::external,
                         "octave_jit_pow_scalar_scalar", complex, scalar,
                         scalar);
+  fn.add_mapping (engine, &octave_jit_pow_scalar_scalar);
   binary_ops[octave_value::op_pow].add_overload (fn);
   binary_ops[octave_value::op_el_pow].add_overload (fn);
 
   // now for binary complex operations
   add_binary_op (complex, octave_value::op_add, llvm::Instruction::FAdd);
   add_binary_op (complex, octave_value::op_sub, llvm::Instruction::FSub);
 
   fn = create_function (jit_convention::internal,
@@ -970,27 +984,29 @@ jit_typeinfo::jit_typeinfo (llvm::Module
   }
 
   binary_ops[octave_value::op_mul].add_overload (fn);
   binary_ops[octave_value::op_el_mul].add_overload (fn);
 
   jit_function complex_div = create_function (jit_convention::external,
                                               "octave_jit_complex_div",
                                               complex, complex, complex);
+  complex_div.add_mapping (engine, &octave_jit_complex_div);
   complex_div.mark_can_error ();
   binary_ops[octave_value::op_div].add_overload (fn);
   binary_ops[octave_value::op_ldiv].add_overload (fn);
 
   fn = mirror_binary (complex_div);
   binary_ops[octave_value::op_ldiv].add_overload (fn);
   binary_ops[octave_value::op_el_ldiv].add_overload (fn);
 
   fn = create_function (jit_convention::external,
                         "octave_jit_pow_complex_complex", complex, complex,
                         complex);
+  fn.add_mapping (engine, &octave_jit_pow_complex_complex);
   binary_ops[octave_value::op_pow].add_overload (fn);
   binary_ops[octave_value::op_el_pow].add_overload (fn);
 
   fn = create_function (jit_convention::internal,
                         "octave_jit_*_scalar_complex", complex, scalar,
                         complex);
   jit_function mul_scalar_complex = fn;
   body = fn.new_block ();
@@ -1046,36 +1062,38 @@ jit_typeinfo::jit_typeinfo (llvm::Module
     llvm::Value *real = builder.CreateFSub (lhs, complex_real (rhs));
     fn.do_return (builder, complex_real (rhs, real));
   }
   binary_ops[octave_value::op_sub].add_overload (fn);
 
   fn = create_function (jit_convention::external,
                         "octave_jit_pow_scalar_complex", complex, scalar,
                         complex);
+  fn.add_mapping (engine, &octave_jit_pow_scalar_complex);
   binary_ops[octave_value::op_pow].add_overload (fn);
   binary_ops[octave_value::op_el_pow].add_overload (fn);
 
   fn = create_function (jit_convention::external,
                         "octave_jit_pow_complex_scalar", complex, complex,
                         scalar);
+  fn.add_mapping (engine, &octave_jit_pow_complex_scalar);
   binary_ops[octave_value::op_pow].add_overload (fn);
   binary_ops[octave_value::op_el_pow].add_overload (fn);
 
   // now for binary index operators
   add_binary_op (index, octave_value::op_add, llvm::Instruction::Add);
 
   // and binary bool operators
   add_binary_op (boolean, octave_value::op_el_or, llvm::Instruction::Or);
   add_binary_op (boolean, octave_value::op_el_and, llvm::Instruction::And);
 
   // now for printing functions
   print_fn.stash_name ("print");
-  add_print (any);
-  add_print (scalar);
+  add_print (any, reinterpret_cast<void *> (&octave_jit_print_any));
+  add_print (scalar, reinterpret_cast<void *> (&octave_jit_print_scalar));
 
   // initialize for loop
   for_init_fn.stash_name ("for_init");
 
   fn = create_function (jit_convention::internal, "octave_jit_for_range_init",
                         index, range);
   body = fn.new_block ();
   builder.SetInsertPoint (body);
@@ -1122,16 +1140,17 @@ jit_typeinfo::jit_typeinfo (llvm::Module
   for_index_fn.add_overload (fn);
 
   // logically true
   logically_true_fn.stash_name ("logically_true");
 
   jit_function gripe_nantl
     = create_function (jit_convention::external,
                        "octave_jit_gripe_nan_to_logical_conversion", 0);
+  gripe_nantl.add_mapping (engine, &octave_jit_gripe_nan_to_logical_conversion);
   gripe_nantl.mark_can_error ();
 
   fn = create_function (jit_convention::internal,
                         "octave_jit_logically_true_scalar", boolean, scalar);
   fn.mark_can_error ();
 
   body = fn.new_block ();
   builder.SetInsertPoint (body);
@@ -1159,16 +1178,17 @@ jit_typeinfo::jit_typeinfo (llvm::Module
   logically_true_fn.add_overload (fn);
 
   // make_range
   // FIXME: May be benificial to implement all in LLVM
   make_range_fn.stash_name ("make_range");
   jit_function compute_nelem
     = create_function (jit_convention::external, "octave_jit_compute_nelem",
                        index, scalar, scalar, scalar);
+  compute_nelem.add_mapping (engine, &octave_jit_compute_nelem);
 
   fn = create_function (jit_convention::internal, "octave_jit_make_range",
                         range, scalar, scalar, scalar);
   body = fn.new_block ();
   builder.SetInsertPoint (body);
   {
     llvm::Value *base = fn.argument (builder, 0);
     llvm::Value *limit = fn.argument (builder, 1);
@@ -1188,20 +1208,22 @@ jit_typeinfo::jit_typeinfo (llvm::Module
   make_range_fn.add_overload (fn);
 
   // paren_subsref
   jit_type *jit_int = intN (sizeof (int) * 8);
   llvm::Type *int_t = jit_int->to_llvm ();
   jit_function ginvalid_index
     = create_function (jit_convention::external, "octave_jit_ginvalid_index",
                        0);
+  ginvalid_index.add_mapping (engine, &octave_jit_ginvalid_index);
   jit_function gindex_range = create_function (jit_convention::external,
                                                "octave_jit_gindex_range",
                                                0, jit_int, jit_int, index,
                                                index);
+  gindex_range.add_mapping (engine, &octave_jit_gindex_range);
 
   fn = create_function (jit_convention::internal, "()subsref", scalar, matrix,
                         scalar);
   fn.mark_can_error ();
 
   body = fn.new_block ();
   builder.SetInsertPoint (body);
   {
@@ -1265,16 +1287,17 @@ jit_typeinfo::jit_typeinfo (llvm::Module
   paren_subsref_fn.add_overload (fn);
 
   // paren subsasgn
   paren_subsasgn_fn.stash_name ("()subsasgn");
 
   jit_function resize_paren_subsasgn
     = create_function (jit_convention::external,
                        "octave_jit_paren_subsasgn_impl", matrix, index, scalar);
+  resize_paren_subsasgn.add_mapping (engine, &octave_jit_paren_subsasgn_impl);
   fn = create_function (jit_convention::internal, "octave_jit_paren_subsasgn",
                         matrix, matrix, scalar, scalar);
   fn.mark_can_error ();
   body = fn.new_block ();
   builder.SetInsertPoint (body);
   {
     llvm::Value *one = llvm::ConstantInt::get (index_t, 1);
 
@@ -1333,52 +1356,59 @@ jit_typeinfo::jit_typeinfo (llvm::Module
     merge->addIncoming (mat, success);
     fn.do_return (builder, merge);
   }
   paren_subsasgn_fn.add_overload (fn);
 
   fn = create_function (jit_convention::external,
                         "octave_jit_paren_subsasgn_matrix_range", matrix,
                         matrix, range, scalar);
+  fn.add_mapping (engine, &octave_jit_paren_subsasgn_matrix_range);
   fn.mark_can_error ();
   paren_subsasgn_fn.add_overload (fn);
 
   casts[any->type_id ()].stash_name ("(any)");
   casts[scalar->type_id ()].stash_name ("(scalar)");
   casts[complex->type_id ()].stash_name ("(complex)");
   casts[matrix->type_id ()].stash_name ("(matrix)");
 
   // cast any <- matrix
   fn = create_function (jit_convention::external, "octave_jit_cast_any_matrix",
                         any, matrix);
+  fn.add_mapping (engine, &octave_jit_cast_any_matrix);
   casts[any->type_id ()].add_overload (fn);
 
   // cast matrix <- any
   fn = create_function (jit_convention::external, "octave_jit_cast_matrix_any",
                         matrix, any);
+  fn.add_mapping (engine, &octave_jit_cast_matrix_any);
   casts[matrix->type_id ()].add_overload (fn);
 
   // cast any <- scalar
   fn = create_function (jit_convention::external, "octave_jit_cast_any_scalar",
                         any, scalar);
+  fn.add_mapping (engine, &octave_jit_cast_any_scalar);
   casts[any->type_id ()].add_overload (fn);
 
   // cast scalar <- any
   fn = create_function (jit_convention::external, "octave_jit_cast_scalar_any",
                         scalar, any);
+  fn.add_mapping (engine, &octave_jit_cast_scalar_any);
   casts[scalar->type_id ()].add_overload (fn);
 
   // cast any <- complex
   fn = create_function (jit_convention::external, "octave_jit_cast_any_complex",
                         any, complex);
+  fn.add_mapping (engine, &octave_jit_cast_any_complex);
   casts[any->type_id ()].add_overload (fn);
 
   // cast complex <- any
   fn = create_function (jit_convention::external, "octave_jit_cast_complex_any",
                         complex, any);
+  fn.add_mapping (engine, &octave_jit_cast_complex_any);
   casts[complex->type_id ()].add_overload (fn);
 
   // cast complex <- scalar
   fn = create_function (jit_convention::internal,
                         "octave_jit_cast_complex_scalar", complex, scalar);
   body = fn.new_block ();
   builder.SetInsertPoint (body);
   {
@@ -1440,22 +1470,23 @@ jit_typeinfo::jit_typeinfo (llvm::Module
 
       args[0] = any;
       casts[btype->type_id ()].add_overload (jit_function (any_id, btype,
                                                            args));
     }
 }
 
 void
-jit_typeinfo::add_print (jit_type *ty)
+jit_typeinfo::add_print (jit_type *ty, void *fptr)
 {
   std::stringstream name;
   name << "octave_jit_print_" << ty->name ();
   jit_function fn = create_function (jit_convention::external, name.str (), 0,
                                      intN (8), ty);
+  fn.add_mapping (engine, fptr);
   print_fn.add_overload (fn);
 }
 
 // FIXME: cp between add_binary_op, add_binary_icmp, and add_binary_fcmp
 void
 jit_typeinfo::add_binary_op (jit_type *ty, int op, int llvm_op)
 {
   std::stringstream fname;
@@ -1541,19 +1572,19 @@ jit_typeinfo::create_identity (jit_type 
       fn.do_return (builder, fn.argument (builder, 0));
       return identities[id] = fn;
     }
 
   return identities[id];
 }
 
 llvm::Value *
-jit_typeinfo::do_insert_error_check (llvm::IRBuilderD& builder)
+jit_typeinfo::do_insert_error_check (llvm::IRBuilderD& abuilder)
 {
-  return builder.CreateLoad (lerror_state);
+  return abuilder.CreateLoad (lerror_state);
 }
 
 void
 jit_typeinfo::add_builtin (const std::string& name)
 {
   jit_type *btype = new_type (name, any, any->to_llvm ());
   builtins[name] = btype;
 
diff --git a/src/jit-typeinfo.h b/src/jit-typeinfo.h
--- a/src/jit-typeinfo.h
+++ b/src/jit-typeinfo.h
@@ -226,16 +226,22 @@ public:
 
   // Use an existing function, but change the argument types. The new argument
   // types must behave the same for the current calling convention.
   jit_function (const jit_function& fn, jit_type *aresult,
                 const std::vector<jit_type *>& aargs);
 
   jit_function (const jit_function& fn);
 
+  template <typename T>
+  void add_mapping (llvm::ExecutionEngine *engine, T fn)
+  {
+    do_add_mapping (engine, reinterpret_cast<void *> (fn));
+  }
+
   bool valid (void) const { return llvm_function; }
 
   std::string name (void) const;
 
   llvm::BasicBlock *new_block (const std::string& aname = "body",
                                llvm::BasicBlock *insert_before = 0);
 
   llvm::Value *call (llvm::IRBuilderD& builder,
@@ -284,16 +290,18 @@ public:
   jit_type *argument_type (size_t idx) const
   {
     assert (idx < args.size ());
     return args[idx];
   }
 
   const std::vector<jit_type *>& arguments (void) const { return args; }
 private:
+  void do_add_mapping (llvm::ExecutionEngine *engine, void *fn);
+
   llvm::Module *module;
   llvm::Function *llvm_function;
   jit_type *mresult;
   std::vector<jit_type *> args;
   jit_convention::type call_conv;
   bool mcan_error;
 };
 
@@ -528,17 +536,17 @@ private:
   {
     return do_cast (to).overload (from);
   }
 
   jit_type *new_type (const std::string& name, jit_type *parent,
                       llvm::Type *llvm_type);
 
 
-  void add_print (jit_type *ty);
+  void add_print (jit_type *ty, void *fptr);
 
   void add_binary_op (jit_type *ty, int op, int llvm_op);
 
   void add_binary_icmp (jit_type *ty, int op, int llvm_op);
 
   void add_binary_fcmp (jit_type *ty, int op, int llvm_op);
 
   jit_function create_function (jit_convention::type cc,
