# HG changeset patch
# User jwe
# Date 1109904368 0
#      Fri Mar 04 02:46:08 2005 +0000
# Node ID 85b315ad5f7de4a65885012ba33241568ec40b50
# Parent  fd90c6df7d52e8fb0964f061d5c6b206df8ee096
[project @ 2005-03-04 02:46:08 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,39 @@
 2005-03-03  John W. Eaton  <jwe@octave.org>
 
+	* input.cc (input_from_command_line_file): Move definition here.
+	* parse.y: From here.
+	* input.h (input_from_command_line_file): Move decl here.
+	* parse.h: From here.
+
+	* input.cc (octave_gets):
+	Don't save history if input is from command line file.
+
+	* parse.y (parse_and_execute, parse_fcn_file, eval_string):
+	Don't alter value of input_from_command_line_file here.
+	(input_from_command_line_file): Default value is false.
+	(eval_string): Turn off line editing here.
+
+	* toplev.cc, toplev.h (main_loop): Delete fun_to_call arg and all uses.
+
+	* octave.cc (fun_to_call): Delete static variable.
+	(persist, code_to_eval): New static variables.
+	(long_opts): Delete --funcall, add --eval and --persist.
+	(usage_string, verbose_usage, octave_main): Likewise.
+	(FUNCALL_OPTION): Delete.
+	(EVAL_OPTION, PERSIST_OPTION): New macros.
+	(maximum_braindamage): Set persist to true.
+	(execute_eval_option_code): New function.
+	(restore_program_name): New function.
+	(execute_command_line_file): New function.
+	(octave_main): Call execute_eval_option code and
+	execute_command_line file.  If persist, go interactive even after
+	evaluating --eval code and/or command-line file.
+
 	* ov-bool-sparse.h, ov-bool-sparse.cc
 	(octave_sparse_bool_matrix::sparse_matrix_value,
 	octave_sparse_bool_matrix::sparse_complex_matrix_value):
 	Accept bool arg.
 
 	* parse.y (looks_like_copyright): Check first 9 characters, not 14.
 
 2005-03-02  John W. Eaton  <jwe@octave.org>
diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -98,16 +98,20 @@ std::string current_eval_string;
 
 // TRUE means get input from current_eval_string.
 bool get_input_from_eval_string = false;
 
 // TRUE means we haven't been asked for the input from
 // current_eval_string yet.
 bool input_from_eval_string_pending = false;
 
+// TRUE means that input is coming from a file that was named on
+// the command line.
+bool input_from_command_line_file = false;
+
 // TRUE means we're parsing a function file.
 bool reading_fcn_file = false;
 
 // Simple name of function file we are reading.
 std::string curr_fcn_file_name;
 
 // Full name of file we are reading.
 std::string curr_fcn_file_full_name;
@@ -229,17 +233,17 @@ octave_gets (void)
     }
   else
     retval = gnu_readline ("");
 
   current_input_line = retval;
 
   if (! current_input_line.empty ())
     {
-      if (! input_from_startup_file)
+      if (! (input_from_startup_file || input_from_command_line_file))
 	command_history::add (current_input_line);
 
       if (! (reading_fcn_file || reading_script_file))
 	{
 	  octave_diary << current_input_line;
 
 	  if (current_input_line[current_input_line.length () - 1] != '\n')
 	    octave_diary << "\n";
diff --git a/src/input.h b/src/input.h
--- a/src/input.h
+++ b/src/input.h
@@ -44,16 +44,20 @@ extern std::string current_eval_string;
 
 // TRUE means get input from current_eval_string.
 extern bool get_input_from_eval_string;
 
 // TRUE means we haven't been asked for the input from
 // current_eval_string yet.
 extern bool input_from_eval_string_pending;
 
+// TRUE means that input is coming from a file that was named on
+// the command line.
+extern bool input_from_command_line_file;
+
 // TRUE means we're parsing a function file.
 extern bool reading_fcn_file;
 
 // Simple name of function file we are reading.
 extern std::string curr_fcn_file_name;
 
 // Full name of file we are reading.
 extern std::string curr_fcn_file_full_name;
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -103,58 +103,62 @@ static bool inhibit_startup_message = fa
 static bool traditional = false;
 
 // If TRUE, print verbose info in some cases.
 // (--verbose; -V)
 static bool verbose_flag = false;
 
 // Usage message
 static const char *usage_string = 
-  "octave [-?HVdfhiqvx] [--debug] [--echo-commands] [--exec-path path]\n\
-       [--funcall FUNC] [--help] [--info-file file] [--info-program prog]\n\
+  "octave [-?HVdfhiqvx] [--debug] [--echo-commands] [--eval CODE]\n\
+       [--exec-path path] [--help] [--info-file file] [--info-program prog]\n\
        [--interactive] [--no-history] [--no-init-file] [--no-line-editing]\n\
        [--no-site-file] [-p path] [--path path] [--silent] [--traditional]\n\
        [--verbose] [--version] [file]";
 
 // This is here so that it's more likely that the usage message and
 // the real set of options will agree.  Note: the `+' must come first
 // to prevent getopt from permuting arguments!
 static const char *short_opts = "+?HVdfhip:qvx";
 
-// The name of the optional initial function to call at startup.
-// (--funcall FUNC)
-static std::string fun_to_call;
+// The code to evaluate at startup (--eval CODE)
+static std::string code_to_eval;
+
+// If TRUE, don't exit after evaluating code given by --eval option.
+static bool persist = false;
 
 // Long options.  See the comments in getopt.h for the meanings of the
 // fields in this structure.
-#define EXEC_PATH_OPTION 1
-#define FUNCALL_OPTION 2
+#define EVAL_OPTION 1
+#define EXEC_PATH_OPTION 2
 #define INFO_FILE_OPTION 3
 #define INFO_PROG_OPTION 4
 #define NO_INIT_FILE_OPTION 5
 #define NO_LINE_EDITING_OPTION 6
 #define NO_SITE_FILE_OPTION 7
-#define TRADITIONAL_OPTION 8
+#define PERSIST_OPTION 8
+#define TRADITIONAL_OPTION 9
 long_options long_opts[] =
   {
     { "debug",            prog_args::no_arg,       0, 'd' },
     { "braindead",        prog_args::no_arg,       0, TRADITIONAL_OPTION },
     { "echo-commands",    prog_args::no_arg,       0, 'x' },
+    { "eval",             prog_args::required_arg, 0, EVAL_OPTION },
     { "exec-path",        prog_args::required_arg, 0, EXEC_PATH_OPTION },
-    { "funcall",          prog_args::required_arg,  0, FUNCALL_OPTION },
     { "help",             prog_args::no_arg,       0, 'h' },
     { "info-file",        prog_args::required_arg, 0, INFO_FILE_OPTION },
     { "info-program",     prog_args::required_arg, 0, INFO_PROG_OPTION },
     { "interactive",      prog_args::no_arg,       0, 'i' },
     { "no-history",       prog_args::no_arg,       0, 'H' },
     { "no-init-file",     prog_args::no_arg,       0, NO_INIT_FILE_OPTION },
     { "no-line-editing",  prog_args::no_arg,       0, NO_LINE_EDITING_OPTION },
     { "no-site-file",     prog_args::no_arg,       0, NO_SITE_FILE_OPTION },
     { "norc",             prog_args::no_arg,       0, 'f' },
     { "path",             prog_args::required_arg, 0, 'p' },
+    { "persist",          prog_args::no_arg,       0, PERSIST_OPTION },
     { "quiet",            prog_args::no_arg,       0, 'q' },
     { "silent",           prog_args::no_arg,       0, 'q' },
     { "traditional",      prog_args::no_arg,       0, TRADITIONAL_OPTION },
     { "verbose",          prog_args::no_arg,       0, 'V' },
     { "version",          prog_args::no_arg,       0, 'v' },
     { 0,                  0,                       0, 0 }
   };
 
@@ -206,19 +210,16 @@ initialize_pathsearch (void)
 
 // Initialize by reading startup files.
 
 static void
 execute_startup_files (void)
 {
   unwind_protect::begin_frame ("execute_startup_files");
 
-  // XXX FIXME XXX -- need to make it possible to set this in startup
-  // files.
-
   unwind_protect_bool (input_from_startup_file);
 
   input_from_startup_file = true;
 
   int verbose = (verbose_flag && ! inhibit_startup_message);
 
   if (read_site_files)
     {
@@ -286,41 +287,104 @@ execute_startup_files (void)
 
 	  parse_and_execute (local_rc, verbose);
 	}
     }
 
   unwind_protect::run_frame ("execute_startup_files");
 }
 
+static int
+execute_eval_option_code (const std::string& code)
+{
+  unwind_protect::begin_frame ("execute_eval_option_code");
+
+  unwind_protect_bool (interactive);
+
+  interactive = false;
+
+  int parse_status = 0;
+
+  eval_string (code, false, parse_status, 0);
+
+  unwind_protect::run_frame ("execute_eval_option_code");
+
+  return parse_status;
+}
+
+static void
+restore_program_name (void *)
+{
+  bind_builtin_variable ("program_invocation_name",
+			 octave_env::get_program_invocation_name ());
+
+  bind_builtin_variable ("program_name", octave_env::get_program_name ());
+}
+
+static void
+execute_command_line_file (const std::string& fname)
+{
+  unwind_protect::begin_frame ("execute_command_line_file");
+
+  unwind_protect_bool (interactive);
+  unwind_protect_bool (reading_script_file);
+  unwind_protect_bool (input_from_command_line_file);
+
+  unwind_protect_str (curr_fcn_file_name);
+  unwind_protect_str (curr_fcn_file_full_name);
+
+  unwind_protect::add (restore_program_name, 0);
+
+  interactive = false;
+  reading_script_file = true;
+  input_from_command_line_file = true;
+
+  curr_fcn_file_name = fname;
+  curr_fcn_file_full_name = curr_fcn_file_name;
+
+  bind_builtin_variable ("program_invocation_name", curr_fcn_file_name);
+
+  size_t pos = curr_fcn_file_name.find_last_of (file_ops::dir_sep_chars);
+  
+  std::string tmp = (pos != NPOS)
+    ? curr_fcn_file_name.substr (pos+1) : curr_fcn_file_name;
+
+  bind_builtin_variable ("program_name", tmp);
+
+  parse_and_execute (fname, false, "octave");
+ 
+  unwind_protect::run_frame ("execute_command_line_file");
+}
+
 // Usage message with extra help.
 
 static void
 verbose_usage (void)
 {
   std::cout << OCTAVE_NAME_VERSION_COPYRIGHT_COPYING_AND_WARRANTY "\n\
 \n\
 Usage: octave [options]\n\
 \n\
 Options:\n\
 \n\
   --debug, -d             Enter parser debugging mode.\n\
   --echo-commands, -x     Echo commands as they are executed.\n\
   --exec-path PATH        Set path for executing subprograms.\n\
-  --funcall FUNC          Call Octave function FUNC with no arguments.\n\
+  --eval CODE             Evaluate CODE and exit when done unless --persist.\n\
   --help, -h, -?          Print short help message and exit.\n\
   --info-file FILE        Use top-level info file FILE.\n\
   --info-program PROGRAM  Use PROGRAM for reading info files.\n\
   --interactive, -i       Force interactive behavior.\n\
   --no-history, -H        Don't save commands to the history list\n\
   --no-init-file          Don't read the ~/.octaverc or .octaverc files.\n\
   --no-line-editing       Don't use readline for command-line editing.\n\
   --no-site-file          Don't read the site-wide octaverc file.\n\
   --norc, -f              Don't read any initialization files.\n\
   --path PATH, -p PATH    Set initial LOADPATH to PATH.\n\
+  --persist               Go interactive after --eval or reading from FILE.\n\
   --silent, -q            Don't print message at startup.\n\
   --traditional           Set compatibility variables.\n\
   --verbose, -V           Enable verbose output in some cases.\n\
   --version, -v           Print version number and exit.\n\
 \n\
   FILE                    Execute commands from FILE.\n\
 \n"
 OCTAVE_WWW_STATEMENT "\n\
@@ -355,16 +419,18 @@ initialize_error_handlers ()
   set_liboctave_warning_handler (warning);
 }
 
 // What happens on --traditional.
 
 static void
 maximum_braindamage (void)
 {
+  persist = true;
+
   bind_builtin_variable ("PS1", ">> ");
   bind_builtin_variable ("PS2", "");
   bind_builtin_variable ("beep_on_error", true);
   bind_builtin_variable ("crash_dumps_octave_core", false);
   bind_builtin_variable ("default_save_format", "mat-binary");
   bind_builtin_variable ("fixed_point_format", true);
   bind_builtin_variable ("page_screen_output", false);
   bind_builtin_variable ("print_empty_dimensions", false);
@@ -464,26 +530,26 @@ octave_main (int argc, char **argv, int 
 	    bind_builtin_variable ("echo_executing_commands", tmp);
 	  }
 	  break;
 
 	case 'v':
 	  print_version_and_exit ();
 	  break;
 
+	case EVAL_OPTION:
+	  if (args.optarg ())
+	    code_to_eval = args.optarg ();
+	  break;
+
 	case EXEC_PATH_OPTION:
 	  if (args.optarg ())
 	    bind_builtin_variable ("EXEC_PATH", args.optarg ());
 	  break;
 
-	case FUNCALL_OPTION:
-	  if (args.optarg ())
-	    fun_to_call = args.optarg ();
-	  break;
-
 	case INFO_FILE_OPTION:
 	  if (args.optarg ())
 	    bind_builtin_variable ("INFO_FILE", args.optarg ());
 	  break;
 
 	case INFO_PROG_OPTION:
 	  if (args.optarg ())
 	    bind_builtin_variable ("INFO_PROGRAM", args.optarg ());
@@ -500,16 +566,20 @@ octave_main (int argc, char **argv, int 
 	case NO_SITE_FILE_OPTION:
 	  read_site_files = 0;
 	  break;
 
 	case TRADITIONAL_OPTION:
 	  traditional = true;
 	  break;
 
+	case PERSIST_OPTION:
+	  persist = true;
+	  break;
+
 	default:
 	  usage ();
 	  break;
 	}
     }
 
 #if defined (HAVE_ATEXIT) || defined (HAVE_ON_EXIT)
   // Make sure we clean up when we exit.  Also allow users to register
@@ -536,94 +606,84 @@ octave_main (int argc, char **argv, int 
 
   execute_startup_files ();
 
   command_history::read (false);
 
   if (! inhibit_startup_message && reading_startup_message_printed)
     std::cout << std::endl;
 
-  // Avoid counting commands executed from startup files.
+  // Is input coming from a terminal?  If so, we are probably
+  // interactive.
 
-  command_editor::reset_current_command_number (1);
+  interactive = (! embedded
+		 && isatty (fileno (stdin)) && isatty (fileno (stdout)));
+
+  if (! interactive)
+    line_editing = false;
 
   // If there is an extra argument, see if it names a file to read.
   // Additional arguments are taken as command line options for the
   // script.
 
   int last_arg_idx = args.optind ();
 
   int remaining_args = argc - last_arg_idx;
 
-  if (remaining_args > 0)
+  if (! code_to_eval.empty ())
     {
-      reading_script_file = true;
-
-      curr_fcn_file_name = argv[last_arg_idx];
-      curr_fcn_file_full_name = curr_fcn_file_name;
-
-      FILE *infile = get_input_from_file (curr_fcn_file_name);
-
-      if (infile)
-	{
-	  input_from_command_line_file = true;
-
-	  bind_builtin_variable ("program_invocation_name",
-				 curr_fcn_file_name);
-
-	  size_t pos
-	    = curr_fcn_file_name.find_last_of (file_ops::dir_sep_chars);
-
-	  std::string tmp = (pos != NPOS)
-	    ? curr_fcn_file_name.substr (pos+1) : curr_fcn_file_name;
-
-	  bind_builtin_variable ("program_name", tmp);
-
-	  intern_argv (remaining_args, argv+last_arg_idx);
-
-	  command_editor::blink_matching_paren (false);
-
-	  switch_to_buffer (create_buffer (infile));
-	}
-      else
-	clean_up_and_exit (1);
-    }
-  else
-    {
-      // Is input coming from a terminal?  If so, we are probably
-      // interactive.
-
-      interactive = (! embedded
-		     && isatty (fileno (stdin)) && isatty (fileno (stdout)));
+      // We probably want all the args for an --eval option.
 
       intern_argv (argc, argv);
 
-      if (! embedded)
-	switch_to_buffer (create_buffer (get_input_from_stdin ()));
+      int parse_status = execute_eval_option_code (code_to_eval);
+
+      if (! (persist && remaining_args > 0))
+	return (parse_status || error_state ? 1 : 0);
     }
 
+  if (remaining_args > 0)
+    {
+      // If we are running an executable script (#! /bin/octave) then
+      // we should only see the args passed to the script.
+
+      intern_argv (remaining_args, argv+last_arg_idx);
+
+      execute_command_line_file (argv[last_arg_idx]);
+
+      if (! persist)
+	return (error_state ? 1 : 0);
+    }
+
+  // Avoid counting commands executed from startup files.
+
+  command_editor::reset_current_command_number (1);
+
+  // Now argv should have the full set of args.
+  intern_argv (argc, argv);
+
+  if (! embedded)
+    switch_to_buffer (create_buffer (get_input_from_stdin ()));
+
   // Force input to be echoed if not really interactive, but the user
   // has forced interactive behavior.
 
   if (! interactive && forced_interactive)
     {
       command_editor::blink_matching_paren (false);
 
       // XXX FIXME XXX -- is this the right thing to do?
 
       bind_builtin_variable ("echo_executing_commands", ECHO_CMD_LINE);
     }
 
-  if (! interactive)
-    line_editing = false;
-
   if (embedded)
     return 1;
 
-  int retval = main_loop (fun_to_call);
+  int retval = main_loop ();
 
   if (retval == 1 && ! error_state)
     retval = 0;
 
   clean_up_and_exit (retval);
 
   return 0;
 }
diff --git a/src/ov-bool-sparse.h b/src/ov-bool-sparse.h
--- a/src/ov-bool-sparse.h
+++ b/src/ov-bool-sparse.h
@@ -112,17 +112,17 @@ public:
   boolMatrix bool_matrix_value (void) const;
 
   boolNDArray bool_array_value (void) const;
 
   SparseMatrix sparse_matrix_value (bool = false) const;
 
   SparseComplexMatrix sparse_complex_matrix_value (bool = false) const;
 
-  SparseBoolMatrix sparse_bool_matrix_value (void) const
+  SparseBoolMatrix sparse_bool_matrix_value (bool = false) const
     { return matrix; }
 
   octave_value convert_to_str_internal (bool pad, bool force) const;
 
   bool save_binary (std::ostream& os, bool& save_as_floats);
 
   bool load_binary (std::istream& is, bool swap, 
 		    oct_mach_info::float_format fmt);
diff --git a/src/parse.h b/src/parse.h
--- a/src/parse.h
+++ b/src/parse.h
@@ -61,20 +61,16 @@ extern std::stack<std::string> help_buf;
 extern bool line_editing;
 
 // TRUE means we printed messages about reading startup files.
 extern bool reading_startup_message_printed;
 
 // TRUE means input is coming from startup file.
 extern bool input_from_startup_file;
 
-// TRUE means that input is coming from a file that was named on
-// the command line.
-extern bool input_from_command_line_file;
-
 // TRUE means that we are in the process of evaluating a function
 // body.  The parser might be called in that case if we are looking at
 // an eval() statement.
 extern bool evaluating_function_body;
 
 // Keep track of symbol table information when parsing functions.
 extern std::stack<symbol_table*> symtab_context;
 
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -125,20 +125,16 @@ static std::string fcn_comment_header;
 bool line_editing = true;
 
 // TRUE means we printed messages about reading startup files.
 bool reading_startup_message_printed = false;
 
 // TRUE means input is coming from startup file.
 bool input_from_startup_file = false;
 
-// TRUE means that input is coming from a file that was named on
-// the command line.
-bool input_from_command_line_file = true;
-
 // TRUE means that we are in the process of evaluating a function
 // body.  The parser might be called in that case if we are looking at
 // an eval() statement.
 bool evaluating_function_body = false;
 
 // Keep a count of how many END tokens we expect.
 int end_tokens_expected = 0;
 
@@ -2849,22 +2845,20 @@ parse_and_execute (FILE *f)
   YY_BUFFER_STATE new_buf = create_buffer (f);
 
   unwind_protect::add (restore_input_buffer, old_buf);
   unwind_protect::add (delete_input_buffer, new_buf);
 
   switch_to_buffer (new_buf);
 
   unwind_protect_bool (line_editing);
-  unwind_protect_bool (input_from_command_line_file);
   unwind_protect_bool (get_input_from_eval_string);
   unwind_protect_bool (parser_end_of_input);
 
   line_editing = false;
-  input_from_command_line_file = false;
   get_input_from_eval_string = false;
   parser_end_of_input = false;
 
   unwind_protect_ptr (curr_sym_tab);
 
   int retval;
   do
     {
@@ -3248,24 +3242,22 @@ parse_fcn_file (const std::string& ff, b
 	  // Vsaving_history variable...
 	  command_history::ignore_entries ();
 
 	  unwind_protect::add (restore_command_history, 0);
 
 	  unwind_protect_int (Vecho_executing_commands);
 	  unwind_protect_bool (Vsaving_history);
 	  unwind_protect_bool (reading_fcn_file);
-	  unwind_protect_bool (input_from_command_line_file);
 	  unwind_protect_bool (get_input_from_eval_string);
 	  unwind_protect_bool (parser_end_of_input);
 
 	  Vecho_executing_commands = ECHO_OFF;
 	  Vsaving_history = false;
 	  reading_fcn_file = true;
-	  input_from_command_line_file = false;
 	  get_input_from_eval_string = false;
 	  parser_end_of_input = false;
 
 	  YY_BUFFER_STATE old_buf = current_buffer ();
 	  YY_BUFFER_STATE new_buf = create_buffer (ffile);
 
 	  unwind_protect::add (restore_input_buffer, (void *) old_buf);
 	  unwind_protect::add (delete_input_buffer, (void *) new_buf);
@@ -3570,24 +3562,25 @@ octave_value_list
 eval_string (const std::string& s, bool silent, int& parse_status, int nargout)
 {
   octave_value_list retval;
 
   unwind_protect::begin_frame ("eval_string");
 
   unwind_protect_bool (get_input_from_eval_string);
   unwind_protect_bool (input_from_eval_string_pending);
-  unwind_protect_bool (input_from_command_line_file);
   unwind_protect_bool (parser_end_of_input);
+  unwind_protect_bool (line_editing);
   unwind_protect_str (current_eval_string);
 
   get_input_from_eval_string = true;
   input_from_eval_string_pending = true;
-  input_from_command_line_file = false;
   parser_end_of_input = false;
+  line_editing = false;
+
   current_eval_string = s;
 
   unwind_protect_ptr (global_command);
 
   YY_BUFFER_STATE old_buf = current_buffer ();
   YY_BUFFER_STATE new_buf = create_buffer (0);
 
   unwind_protect::add (restore_input_buffer, old_buf);
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -106,17 +106,17 @@ recover_from_exception (void)
   octave_interrupt_state = 0;
   octave_signal_caught = 0;
   octave_allocation_error = 0;
   octave_restore_signal_mask ();
   octave_catch_interrupts ();
 }
 
 int
-main_loop (const std::string& fun_to_call)
+main_loop (void)
 {
   octave_save_signal_mask ();
 
   if (octave_set_current_context)
     {
 #if defined (USE_EXCEPTIONS_FOR_INTERRUPTS)
       panic_impossible ();
 #else
@@ -132,19 +132,16 @@ main_loop (const std::string& fun_to_cal
   octave_signal_hook = octave_signal_handler;
   octave_interrupt_hook = unwind_protect::run_all;
   octave_bad_alloc_hook = unwind_protect::run_all;
 
   octave_catch_interrupts ();
 
   octave_initialized = true;
 
-  if (! fun_to_call.empty ())
-    feval (fun_to_call);
-
   // The big loop.
 
   int retval = 0;
   do
     {
       try
 	{
 	  curr_sym_tab = top_level_sym_tab;
diff --git a/src/toplev.h b/src/toplev.h
--- a/src/toplev.h
+++ b/src/toplev.h
@@ -31,18 +31,17 @@ class octave_value;
 class octave_value_list;
 class octave_user_function;
 class tree_statement_list;
 class charMatrix;
 
 extern void
 clean_up_and_exit (int) GCC_ATTR_NORETURN;
 
-extern int
-main_loop (const std::string& fun_to_call);
+extern int main_loop (void);
 
 extern void
 do_octave_atexit (void);
 
 // Current command to execute.
 extern tree_statement_list *global_command;
 
 // Pointer to function that is currently being evaluated.
