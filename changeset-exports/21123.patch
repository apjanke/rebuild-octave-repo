# HG changeset patch
# User Rik <rik@octave.org>
# Date 1453354255 28800
#      Wed Jan 20 21:30:55 2016 -0800
# Node ID 71408ab5071ed7ddf47b8c177d0785592c6f69b0
# Parent  dba88797f69fd0ee5103161213f78671292a6d71
doc: Periodic spellcheck of documentation.

* aspell-octave.en.pws: Add new words to dictionary.
* hash.cc (Fhash): Add @nospell macro around "abc".

* variables.cc (Fexist): Add @nospell macro around "sandboxing".

* ode23.m: Add @nospell macro around "Bogacki-Shampine" and "Van der Pol"

* odeplot.m: Add @nospell macro around "Van der Pol".

diff --git a/doc/interpreter/doccheck/aspell-octave.en.pws b/doc/interpreter/doccheck/aspell-octave.en.pws
--- a/doc/interpreter/doccheck/aspell-octave.en.pws
+++ b/doc/interpreter/doccheck/aspell-octave.en.pws
@@ -492,16 +492,17 @@ isvector
 iter
 ith
 iy
 iz
 Jacobian
 Jacobians
 javaaddpath
 javamem
+Javascript
 jbig
 JDK
 JIT
 jpeg
 JPEG
 jpg
 jvm
 JVM's
@@ -885,16 +886,17 @@ Schur
 SCO
 screenful
 se
 sed
 seealso
 SelectionMode
 semidefinite
 Sep
+SHA
 shiftdim
 si
 signum
 SIGNUM
 sim
 SIMAX
 SIMD
 simplechol
diff --git a/libinterp/corefcn/hash.cc b/libinterp/corefcn/hash.cc
--- a/libinterp/corefcn/hash.cc
+++ b/libinterp/corefcn/hash.cc
@@ -79,18 +79,18 @@ Secure Hash Algorithm 2 (256 Bits, RFC 6
 \n\
 @item SHA384\n\
 Secure Hash Algorithm 2 (384 Bits, RFC 6234)\n\
 \n\
 @item SHA512\n\
 Secure Hash Algorithm 2 (512 Bits, RFC 6234)\n\
 @end table\n\
 \n\
-To calculate for example the MD5 hash value of the string @qcode{\"abc\"}\n\
-the @code{hash} function is called as follows:\n\
+To calculate for example the MD5 hash value of the string\n\
+@nospell{@qcode{\"abc\"}} the @code{hash} function is called as follows:\n\
 \n\
 @example\n\
 @group\n\
 hash (\"md5\", \"abc\")\n\
      @print{} ans = 900150983cd24fb0d6963f7d28e17f72\n\
 @end group\n\
 @end example\n\
 \n\
diff --git a/libinterp/corefcn/variables.cc b/libinterp/corefcn/variables.cc
--- a/libinterp/corefcn/variables.cc
+++ b/libinterp/corefcn/variables.cc
@@ -570,17 +570,18 @@ variable, built-in function, oct-file, d
 \n\
 @code{exist} returns 2 if a regular file called @var{name} is present in\n\
 Octave's search path.  If you want information about other types of files\n\
 not on the search path you should use some combination of the functions\n\
 @code{file_in_path} and @code{stat} instead.\n\
 \n\
 Programming Note: If @var{name} is implemented by a buggy .oct/.mex file,\n\
 calling @var{exist} may cause Octave to crash.  To maintain high\n\
-performance, Octave trusts .oct/.mex files instead of sandboxing them.\n\
+performance, Octave trusts .oct/.mex files instead of @nospell{sandboxing}\n\
+them.\n\
 \n\
 @seealso{file_in_loadpath, file_in_path, dir_in_loadpath, stat}\n\
 @end deftypefn")
 {
   int nargin = args.length ();
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
diff --git a/scripts/ode/ode23.m b/scripts/ode/ode23.m
--- a/scripts/ode/ode23.m
+++ b/scripts/ode/ode23.m
@@ -21,18 +21,18 @@
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {[@var{t}, @var{y}] =} ode23 (@var{fun}, @var{trange}, @var{init})
 ## @deftypefnx {Function File} {[@var{t}, @var{y}] =} ode23 (@var{fun}, @var{trange}, @var{init}, @var{ode_opt})
 ## @deftypefnx {Function File} {[@var{t}, @var{y}] =} ode23 (@dots{}, @var{par1}, @var{par2}, @dots{})
 ## @deftypefnx {Function File} {[@var{t}, @var{y}, @var{te}, @var{ye}, @var{ie}] =} ode23 (@dots{})
 ## @deftypefnx {Function File} {@var{solution} =} ode23 (@dots{})
 ##
 ## Solve a set of non-stiff Ordinary Differential Equations (non-stiff ODEs)
-## with the well known explicit Bogacki-Shampine method of order 3. For the
-## definition of this method see
+## with the well known explicit @nospell{Bogacki-Shampine} method of order 3.
+## For the definition of this method see
 ## @url{http://en.wikipedia.org/wiki/List_of_Runge%E2%80%93Kutta_methods}.
 ##
 ## @var{fun} is a function handle, inline function, or string containing the
 ## name of the function that defines the ODE: @code{y' = f(t,y)}.  The function
 ## must accept two inputs where the first is time @var{t} and the second is a
 ## column vector of unknowns @var{y}.
 ##
 ## @var{trange} specifies the time interval over which the ODE will be
@@ -76,17 +76,17 @@
 ##
 ## This function can be called with two output arguments: @var{t} and @var{y}.
 ## Variable @var{t} is a column vector and contains the time stamps, instead
 ## @var{y} is a matrix in which each column refers to a different unknown of the
 ## problem and the rows number is the same of @var{t} rows number so that each
 ## row of @var{y} contains the values of all unknowns at the time value
 ## contained in the corresponding row in @var{t}.
 ##
-## Example: Solve the Van der Pol equation
+## Example: Solve the @nospell{Van der Pol} equation
 ##
 ## @example
 ## @group
 ## fvdp = @@(@var{t},@var{y}) [@var{y}(2); (1 - @var{y}(1)^2) * @var{y}(2) - @var{y}(1)];
 ## [@var{t},@var{y}] = ode23 (fvdp, [0 20], [2 0]);
 ## @end group
 ## @end example
 ## @seealso{odeset, odeget}
diff --git a/scripts/ode/odeplot.m b/scripts/ode/odeplot.m
--- a/scripts/ode/odeplot.m
+++ b/scripts/ode/odeplot.m
@@ -43,17 +43,18 @@
 ## This function is called by an ode solver function if it was specified in
 ## an options structure with the @command{odeset}.  This function is an
 ## internal helper function therefore it should never be necessary that this
 ## function is called directly by a user.  There is only little error
 ## detection implemented in this function file to achieve the highest
 ## performance.
 ##
 ## For example, solve an anonymous implementation of the
-## @qcode{"Van der Pol"} equation and display the results while solving
+## @nospell{@qcode{"Van der Pol"}} equation and display the results while
+## solving
 ##
 ## @example
 ## @group
 ## fvdb = @@(t,y) [y(2); (1 - y(1)^2) * y(2) - y(1)];
 ##
 ## opt = odeset ("OutputFcn", @@odeplot, "RelTol", 1e-6);
 ## sol = ode45 (fvdb, [0 20], [2 0], opt);
 ## @end group
