# HG changeset patch
# User jwe
# Date 1161900012 0
#      Thu Oct 26 22:00:12 2006 +0000
# Node ID 6465ca8e4f0c366330b8ae81f8d5a383836216da
# Parent  82fff8a063c21bb073b55a4c4fe090095b8cec51
[project @ 2006-10-26 22:00:12 by jwe]

diff --git a/libcruft/ChangeLog b/libcruft/ChangeLog
--- a/libcruft/ChangeLog
+++ b/libcruft/ChangeLog
@@ -2,16 +2,34 @@ 2006-10-26  Michael Goffioul  <michael.g
 
 	* Makefile.in (XTRA_CRUFT_LINK_DEPS): Substitute.
 	(CRUFT_DEFS): New variable.
 	(LINK_DEPS): Include $(XTRA_CRUFT_LINK_DEPS) in the list.
 	(clean, mostlyclean, distclean): Delete cruft.def.
 	(cruft.def): New target.
 	(libraries): Depend on cruft.def.
 
+	* misc/f77-fcn.h (f77_exception_encountered, xstopx):
+	Tag with CRUFT_API.
+	* misc/lo-error.h (current_liboctave_error_handler,
+	current_liboctave_warning_handler,
+	current_liboctave_warning_with_id_handler,
+	set_liboctave_error_handler, set_liboctave_warning_handler,
+	set_liboctave_warning_with_id_handler): Likewise.
+	* misc/quit.h (w32_sigint_init, w32_raise_final,
+	w32_raise, w32_in_main_thread, current_context,
+	octave_save_current_context, octave_restore_current_context,
+	octave_jump_to_enclosing_context, octave_save_signal_mask,
+	octave_restore_signal_mask, octave_interrupt_immediately,
+	octave_interrupt_state, octave_allocation_error,
+	octave_signal_caught, octave_handle_signal,
+	octave_throw_interrupt_exception, octave_throw_bad_alloc,
+	octave_signal_hook, octave_interrupt_hook, octave_bad_alloc_hook):
+	Likewise.
+	
 2006-10-26  John W. Eaton  <jwe@octave.org>
 
 	* Makefile.in ($(CRUFT_DEFS)): Depend on $(SUBDIRS).
 	(cruft.def): Depend on $(CRUFT_DEFS).
 	(libraries): Depend on cruft.def only.
 
 	* mk77def.in: New script template
 	* Makefile.in (DISTFILES): Include mk77def.in in the list.
diff --git a/libcruft/misc/f77-fcn.h b/libcruft/misc/f77-fcn.h
--- a/libcruft/misc/f77-fcn.h
+++ b/libcruft/misc/f77-fcn.h
@@ -73,17 +73,17 @@ extern "C" {
 	  F77_FUNC (f, F) args; \
 	  octave_interrupt_immediately--; \
           octave_restore_current_context (saved_context); \
         } \
     } \
   while (0)
 
 /* So we can check to see if an exception has occurred. */
-extern int f77_exception_encountered;
+CRUFT_API extern int f77_exception_encountered;
 
 #if !defined (F77_FCN)
 #define F77_FCN(f, F) F77_FUNC (f, F)
 #endif
 
 #if defined (F77_USES_CRAY_CALLING_CONVENTION)
 
 #include <fortran.h>
@@ -217,17 +217,17 @@ octave_make_cray_const_ftn_ch_dsc (const
 
 #define F77_CSTRING(s, len, cs) \
  OCTAVE_LOCAL_BUFFER (char, F77_CHAR_ARG_USE (s), \
 		      F77_CHAR_ARG_LEN_USE (s, len) + 1); \
  memcpy (cs, F77_CHAR_ARG_USE (s), F77_CHAR_ARG_LEN_USE (s, len)); \
  cs[F77_CHAR_ARG_LEN_USE(s, len)] = '\0' 
 
 
-extern F77_RET_T
+extern CRUFT_API F77_RET_T
 F77_FUNC (xstopx, XSTOPX) (F77_CONST_CHAR_ARG_DECL
 			   F77_CHAR_ARG_LEN_DECL) GCC_ATTR_NORETURN;
 
 #ifdef __cplusplus
 }
 #endif
 
 #endif
diff --git a/libcruft/misc/lo-error.h b/libcruft/misc/lo-error.h
--- a/libcruft/misc/lo-error.h
+++ b/libcruft/misc/lo-error.h
@@ -37,27 +37,27 @@ extern void liboctave_warning_with_id (c
 typedef void (*liboctave_error_handler) (const char *, ...);
 
 typedef void (*liboctave_warning_handler) (const char *, ...);
 
 typedef void (*liboctave_warning_with_id_handler) (const char *, const char *, ...);
 
 /* Would be nice to make these pointers private, but we want to share
    them among all the liboctave classes. */
-extern liboctave_error_handler current_liboctave_error_handler;
+CRUFT_API extern liboctave_error_handler current_liboctave_error_handler;
 
-extern liboctave_warning_handler current_liboctave_warning_handler;
+CRUFT_API extern liboctave_warning_handler current_liboctave_warning_handler;
 
-extern liboctave_warning_with_id_handler current_liboctave_warning_with_id_handler;
+CRUFT_API extern liboctave_warning_with_id_handler current_liboctave_warning_with_id_handler;
 
-extern void set_liboctave_error_handler (liboctave_error_handler f);
+CRUFT_API extern void set_liboctave_error_handler (liboctave_error_handler f);
 
-extern void set_liboctave_warning_handler (liboctave_warning_handler f);
+CRUFT_API extern void set_liboctave_warning_handler (liboctave_warning_handler f);
 
-extern void set_liboctave_warning_with_id_handler (liboctave_warning_with_id_handler f);
+CRUFT_API extern void set_liboctave_warning_with_id_handler (liboctave_warning_with_id_handler f);
 
 #ifdef __cplusplus
 }
 #endif
 
 #endif
 
 /*
diff --git a/libcruft/misc/quit.h b/libcruft/misc/quit.h
--- a/libcruft/misc/quit.h
+++ b/libcruft/misc/quit.h
@@ -33,20 +33,20 @@ extern "C" {
 
 #include <signal.h>
 #include <setjmp.h>
 
 #if defined (__WIN32__) && ! defined (_POSIX_VERSION)
 
 #include <windows.h>
 
-extern void w32_sigint_init (void);   /* setup */
-extern void w32_raise_final (void);   /* tear down */
-extern void w32_raise (int sig);      /* raise signal in main thread */
-extern int w32_in_main_thread (void); /* return true if in main thread */
+CRUFT_API extern void w32_sigint_init (void);   /* setup */
+CRUFT_API extern void w32_raise_final (void);   /* tear down */
+CRUFT_API extern void w32_raise (int sig);      /* raise signal in main thread */
+CRUFT_API extern int w32_in_main_thread (void); /* return true if in main thread */
 
 #endif
 
 #if defined (OCTAVE_HAVE_SIG_JUMP)
 
 typedef sigjmp_buf octave_jmp_buf;
 
 #define octave_set_current_context sigsetjmp (current_context, 1)
@@ -54,53 +54,53 @@ typedef sigjmp_buf octave_jmp_buf;
 #else
 
 typedef jmp_buf octave_jmp_buf;
 
 #define octave_set_current_context setjmp (current_context)
 
 #endif
 
-extern octave_jmp_buf current_context;
+CRUFT_API extern octave_jmp_buf current_context;
 
-extern void octave_save_current_context (void *);
+CRUFT_API extern void octave_save_current_context (void *);
 
-extern void octave_restore_current_context (void *);
+CRUFT_API extern void octave_restore_current_context (void *);
 
-extern void octave_jump_to_enclosing_context (void) GCC_ATTR_NORETURN;
+CRUFT_API extern void octave_jump_to_enclosing_context (void) GCC_ATTR_NORETURN;
 
-extern void octave_save_signal_mask (void);
+CRUFT_API extern void octave_save_signal_mask (void);
 
-extern void octave_restore_signal_mask (void);
+CRUFT_API extern void octave_restore_signal_mask (void);
 
 #ifdef __cplusplus
 class
 octave_interrupt_exception
 {
 };
 #endif
 
-extern sig_atomic_t octave_interrupt_immediately;
+CRUFT_API extern sig_atomic_t octave_interrupt_immediately;
 
 /*
   > 0: interrupt pending
     0: no interrupt pending
   < 0: handling interrupt
 */
-extern sig_atomic_t octave_interrupt_state;
+CRUFT_API extern sig_atomic_t octave_interrupt_state;
 
-extern sig_atomic_t octave_allocation_error;
+CRUFT_API extern sig_atomic_t octave_allocation_error;
 
-extern sig_atomic_t octave_signal_caught;
+CRUFT_API extern sig_atomic_t octave_signal_caught;
 
-extern void octave_handle_signal (void);
+CRUFT_API extern void octave_handle_signal (void);
 
-extern void octave_throw_interrupt_exception (void) GCC_ATTR_NORETURN;
+CRUFT_API extern void octave_throw_interrupt_exception (void) GCC_ATTR_NORETURN;
 
-extern void octave_throw_bad_alloc (void) GCC_ATTR_NORETURN;
+CRUFT_API extern void octave_throw_bad_alloc (void) GCC_ATTR_NORETURN;
 
 #define OCTAVE_QUIT \
   do \
     { \
       if (octave_signal_caught) \
         { \
           octave_signal_caught = 0; \
           octave_handle_signal (); \
@@ -180,19 +180,19 @@ extern void octave_throw_bad_alloc (void
 #endif
 
 #ifdef __cplusplus
 }
 
 /* These should only be declared for C++ code, and should also be
    outside of any extern "C" block.  */
 
-extern void (*octave_signal_hook) (void);
-extern void (*octave_interrupt_hook) (void);
-extern void (*octave_bad_alloc_hook) (void);
+extern CRUFT_API void (*octave_signal_hook) (void);
+extern CRUFT_API void (*octave_interrupt_hook) (void);
+extern CRUFT_API void (*octave_bad_alloc_hook) (void);
 
 #endif
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
