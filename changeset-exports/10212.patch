# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1264659179 -3600
#      Thu Jan 28 07:12:59 2010 +0100
# Node ID 56f7734f5448864a07493f48cbc34dbaa4e4922d
# Parent  1ca904d74f78de5d191562cfd8092a925890b1a5
fix process creation failure handling in system()

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2010-01-28  Jaroslav Hajek  <highegg@gmail.com>
+
+	* toplev.cc (run_command_and_return_output): Fix testing of failed
+	process creation, simplify.
+	(cleanup_iprocstream): Remove.
+
 2010-01-27  Jaroslav Hajek  <highegg@gmail.com>
 
 	* pt-eval.cc (do_unwind_protect_cleanup_code): Save
 	current_statement and restore it after cleanup block.
 
 2010-01-27  Jaroslav Hajek  <highegg@gmail.com>
 
 	* oct-parse.yy (validate_matrix_row): New static helper func.
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -748,26 +748,16 @@ You should have received a copy of the G
 along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\
 \n";
 
   return retval;
 }
 
 // Execute a shell command.
 
-static void
-cleanup_iprocstream (void *p)
-{
-  iprocstream *cmd = static_cast<iprocstream *> (p);
-
-  octave_child_list::remove (cmd->pid ());
-
-  delete cmd;
-}
-
 static int
 wait_for_input (int fid)
 {
   int retval = -1;
 
 #if defined (HAVE_SELECT)
   if (fid >= 0)
     {
@@ -784,60 +774,58 @@ wait_for_input (int fid)
 
   return retval;
 }
 
 static octave_value_list
 run_command_and_return_output (const std::string& cmd_str)
 {
   octave_value_list retval;
+  unwind_protect frame;
 
   iprocstream *cmd = new iprocstream (cmd_str.c_str ());
 
-  if (cmd)
-    {
-      unwind_protect frame;
-      frame.add (cleanup_iprocstream, cmd);
+  frame.add_delete (cmd);
+  frame.add_fcn (octave_child_list::remove, cmd->pid ());
 
-      if (*cmd)
-	{
-	  int fid = cmd->file_number ();
+  if (*cmd)
+    {
+      int fid = cmd->file_number ();
 
-	  std::ostringstream output_buf;
+      std::ostringstream output_buf;
 
-	  char ch;
+      char ch;
 
-	  for (;;)
-	    {
-	      if (cmd->get (ch))
-		output_buf.put (ch);
-	      else
-		{
-		  if (! cmd->eof () && errno == EAGAIN)
-		    {
-		      cmd->clear ();
+      for (;;)
+        {
+          if (cmd->get (ch))
+            output_buf.put (ch);
+          else
+            {
+              if (! cmd->eof () && errno == EAGAIN)
+                {
+                  cmd->clear ();
 
-		      if (wait_for_input (fid) != 1)
-			break;			
-		    }
-		  else
-		    break;
-		}
-	    }
+                  if (wait_for_input (fid) != 1)
+                    break;			
+                }
+              else
+                break;
+            }
+        }
 
-	  int cmd_status = cmd->close ();
+      int cmd_status = cmd->close ();
 
-	  if (WIFEXITED (cmd_status))
-	    cmd_status = WEXITSTATUS (cmd_status);
-	  else
-	    cmd_status = 127;
+      if (WIFEXITED (cmd_status))
+        cmd_status = WEXITSTATUS (cmd_status);
+      else
+        cmd_status = 127;
 
-	  retval(0) = cmd_status;
-	  retval(1) = output_buf.str ();
-	}
+      retval(0) = cmd_status;
+      retval(1) = output_buf.str ();
     }
   else
     error ("unable to start subprocess for `%s'", cmd_str.c_str ());
 
   return retval;
 }
 
 enum system_exec_type { et_sync, et_async };
