# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1456678541 0
#      Sun Feb 28 16:55:41 2016 +0000
# Node ID 00960129ebf4089fc5ef783173cb50035a31c980
# Parent  8017ce5b2a6ed2589e4c37121dc4868d79d7df99
accumarray.m: edit tests to follow coding guidelines.

* accumarray.m: shorten lines to avoid > 80 characters, more whitespace
and less commas, do not end assert with ;.

diff --git a/scripts/general/accumarray.m b/scripts/general/accumarray.m
--- a/scripts/general/accumarray.m
+++ b/scripts/general/accumarray.m
@@ -364,46 +364,66 @@ function A = accumarray (subs, vals, sz 
 
       ## Set the reduced values.
       A(subs) = vals;
     endif
   endif
 endfunction
 
 
-%!assert (accumarray ([1;2;4;2;4],101:105), [101;206;0;208])
-%!assert (accumarray ([1,1,1;2,1,2;2,3,2;2,1,2;2,3,2],101:105), cat (3, [101,0,0;0,0,0],[0,0,0;206,0,208]))
-%!assert (accumarray ([1,1,1;2,1,2;2,3,2;2,1,2;2,3,2],101:105,[],@(x)sin(sum(x))), sin (cat (3, [101,0,0;0,0,0],[0,0,0;206,0,208])))
-%!assert (accumarray ({[1 3 3 2 3 1 2 2 3 3 1 2],[3 4 2 1 4 3 4 2 2 4 3 4],[1 1 2 2 1 1 2 1 1 1 2 2]},101:112), cat (3, [0,0,207,0;0,108,0,0;0,109,0,317], [0,0,111,0;104,0,0,219;0,103,0,0]))
-%!assert (accumarray ([1,1;2,1;2,3;2,1;2,3],101:105,[2,4],@max,NaN), [101,NaN,NaN,NaN;104,NaN,105,NaN])
-%!assert (accumarray ([1 1; 2 1; 2 3; 2 1; 2 3],101:105, [], @prod), [101, 0, 0; 10608, 0, 10815])
-%!assert (accumarray ([1 1; 2 1; 2 3; 2 1; 2 3],101:105,[2 4],@prod,0,true), sparse ([1,2,2],[1,1,3],[101,10608,10815],2,4))
-%!assert (accumarray ([1 1; 2 1; 2 3; 2 1; 2 3],1,[2,4]), [1,0,0,0;2,0,2,0])
-%!assert (accumarray ([1 1; 2 1; 2 3; 2 1; 2 3],101:105,[2,4],@(x)length(x)>1), [false,false,false,false;true,false,true,false])
+%!assert (accumarray ([1; 2; 4; 2; 4], 101:105), [101; 206; 0; 208])
+%!assert (accumarray ([1 1 1; 2 1 2; 2 3 2; 2 1 2; 2 3 2], 101:105),
+%!                    cat (3, [101 0 0; 0 0 0], [0 0 0; 206 0 208]))
+
+%!assert (accumarray ([1 1 1; 2 1 2; 2 3 2; 2 1 2; 2 3 2], 101:105, [], @(x) sin (sum (x))),
+%!        sin (cat (3, [101,0,0;0,0,0],[0,0,0;206,0,208])))
+
+%!assert (accumarray ({[1 3 3 2 3 1 2 2 3 3 1 2], [3 4 2 1 4 3 4 2 2 4 3 4], [1 1 2 2 1 1 2 1 1 1 2 2]}, 101:112),
+%!        cat (3, [0 0 207 0; 0 108 0 0; 0 109 0 317], [0 0 111 0; 104 0 0 219; 0 103 0 0]))
+
+%!assert (accumarray ([1 1; 2 1; 2 3; 2 1; 2 3], 101:105, [2 4], @max, NaN),
+%!        [101 NaN NaN NaN; 104 NaN 105 NaN])
+
+%!assert (accumarray ([1 1; 2 1; 2 3; 2 1; 2 3], 101:105, [], @prod),
+%!        [101 0 0; 10608 0 10815])
+%!assert (accumarray ([1 1; 2 1; 2 3; 2 1; 2 3], 101:105, [2 4], @prod, 0, true),
+%!        sparse ([1 2 2], [1 1 3], [101 10608 10815], 2, 4))
+%!assert (accumarray ([1 1; 2 1; 2 3; 2 1; 2 3], 1, [2 4]), [1 0 0 0; 2 0 2 0])
+%!assert (accumarray ([1 1; 2 1; 2 3; 2 1; 2 3], 101:105, [2 4], @(x) length (x) > 1),
+%!        [false false false false; true false true false])
+
 %!assert (accumarray ([1; 2], [3; 4], [2, 1], @min, [], 0), [3; 4])
 %!assert (accumarray ([1; 2], [3; 4], [2, 1], @min, [], 1), sparse ([3; 4]))
 %!assert (accumarray ([1; 2], [3; 4], [1, 2], @min, [], 0), [3, 4])
 %!assert (accumarray ([1; 2], [3; 4], [1, 2], @min, [], 1), sparse ([3, 4]))
+
 %!test
-%! A = accumarray ([1 1; 2 1; 2 3; 2 1; 2 3], 101:105, [2,4], @(x){x});
-%! assert (A{2},[102;104]);
+%! A = accumarray ([1 1; 2 1; 2 3; 2 1; 2 3], 101:105, [2,4], @(x) {x});
+%! assert (A{2},[102; 104])
+
 %!test
 %! subs = ceil (rand (2000, 3)*10);
 %! vals = rand (2000, 1);
-%! assert (accumarray (subs, vals, [], @max), accumarray (subs, vals, [], @(x) max (x)));
+%! assert (accumarray (subs, vals, [], @max),
+%!         accumarray (subs, vals, [], @(x) max (x)))
+
 %!test
 %! subs = ceil (rand (2000, 1)*100);
 %! vals = rand (2000, 1);
-%! assert (accumarray (subs, vals, [100, 1], @min, NaN), accumarray (subs, vals, [100, 1], @(x) min (x), NaN));
+%! assert (accumarray (subs, vals, [100, 1], @min, NaN),
+%!         accumarray (subs, vals, [100, 1], @(x) min (x), NaN))
+
 %!test
 %! subs = ceil (rand (2000, 2)*30);
 %! subsc = num2cell (subs, 1);
 %! vals = rand (2000, 1);
-%! assert (accumarray (subsc, vals, [], [], 0, true), accumarray (subs, vals, [], [], 0, true));
+%! assert (accumarray (subsc, vals, [], [], 0, true),
+%!         accumarray (subs, vals, [], [], 0, true))
+
 %!test
 %! subs = ceil (rand (2000, 3)*10);
 %! subsc = num2cell (subs, 1);
 %! vals = rand (2000, 1);
-%! assert (accumarray (subsc, vals, [], @max), accumarray (subs, vals, [], @max));
+%! assert (accumarray (subsc, vals, [], @max),
+%!         accumarray (subs, vals, [], @max));
 
 %!error (accumarray (1:5))
 %!error (accumarray ([1,2,3],1:2))
-
