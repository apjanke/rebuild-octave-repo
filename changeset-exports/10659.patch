# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1274868225 -7200
#      Wed May 26 12:03:45 2010 +0200
# Node ID 8baff2aceabc0fe13acae052238c28586187e0e6
# Parent  c66a4657d7649cf6b14eee2a64b500bc3a257cfe
fix slicing value lists with name tags (bug #29960)

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2010-05-26  Jaroslav Hajek  <highegg@gmail.com>
+
+	* oct-obj.h (octave_value_list::slice): Optionally include tags in
+	slicing.
+	* oct-parse.yy (get_feval_args): Simplify.
+	* pt-idx.cc (make_value_list): Use octave_idx_type instead of int.
+
 2010-05-25  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov.cc (octave_value::length): Simplify.
 
 2010-05-25  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-base-mat.h (octave_base_matrix::ndims): New override.
 	* ov-base-scalar.h (octave_base_scalar::numel,
diff --git a/src/oct-obj.h b/src/oct-obj.h
--- a/src/oct-obj.h
+++ b/src/oct-obj.h
@@ -120,18 +120,24 @@ public:
 
   octave_value_list& append (const octave_value& val);
 
   octave_value_list& append (const octave_value_list& lst);
 
   octave_value_list& reverse (void);
 
   octave_value_list
-  slice (octave_idx_type offset, octave_idx_type len) const
-    { return data.index (idx_vector (offset, offset + len)); }
+  slice (octave_idx_type offset, octave_idx_type len, bool tags = false) const
+    { 
+      octave_value_list retval (data.linear_slice (offset, offset + len));
+      if (tags && len > 0 && names.length () > 0)
+        retval.names = names.linear_slice (offset, std::min (len, names.length ()));
+
+      return retval;
+    }
 
   octave_value_list
   splice (octave_idx_type offset, octave_idx_type len,
           const octave_value_list& lst = octave_value_list ()) const;
 
   bool all_strings_p (void) const;
 
   bool all_scalars (void) const;
diff --git a/src/oct-parse.yy b/src/oct-parse.yy
--- a/src/oct-parse.yy
+++ b/src/oct-parse.yy
@@ -4121,28 +4121,17 @@ feval (octave_function *fcn, const octav
     retval = fcn->do_multi_index_op (nargout, args);
 
   return retval;
 }
 
 static octave_value_list
 get_feval_args (const octave_value_list& args)
 {
-  octave_value_list retval = args.slice (1, args.length () - 1);
-
-  string_vector arg_names = args.name_tags ();
-
-  if (arg_names.length () > 1)
-    {
-      string_vector tmp_arg_names = arg_names.linear_slice (1, args.length () - 1);
-
-      retval.stash_name_tags (tmp_arg_names);
-    }
-
-  return retval;
+  return args.slice (1, args.length () - 1, true);
 }
 
 
 // Evaluate an Octave function (built-in or interpreted) and return
 // the list of result values.  The first element of ARGS should be a
 // string containing the name of the function to call, then the rest
 // are the actual arguments to the function.  NARGOUT is the number of
 // output arguments expected.
diff --git a/src/pt-idx.cc b/src/pt-idx.cc
--- a/src/pt-idx.cc
+++ b/src/pt-idx.cc
@@ -180,17 +180,17 @@ make_value_list (tree_argument_list *arg
       if (object && args->has_magic_end () && object->is_undefined ())
         gripe_invalid_inquiry_subscript ();
       else
         retval = args->convert_to_const_vector (object);
     }
 
   if (! error_state)
     {
-      int n = retval.length ();
+      octave_idx_type n = retval.length ();
 
       if (n > 0)
         retval.stash_name_tags (arg_nm);
     }
 
   return retval;
 }
 
