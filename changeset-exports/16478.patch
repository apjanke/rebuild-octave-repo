# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1365493228 14400
#      Tue Apr 09 03:40:28 2013 -0400
# Node ID 079ec7ce60e07e93e95b1b64901d07496be4cd21
# Parent  64727ed135cb4a8ea476d3004848ca4966914d27
delete useless connection; style fixes

* main-window.cc (main_window::construct): Delete connection from
_workspace_model::model_changed to nonexistent slot
workspace_window::model_changed.

* workspace-model.cc, workspace-model.h, workspace-view.cc,
workspace-view.h: Style fixes.

diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -519,19 +519,16 @@ main_window::connect_visibility_changed 
 void
 main_window::construct (void)
 {
   _closing = false;   // flag for editor files when closed
   setWindowIcon (QIcon (":/actions/icons/logo.png"));
 
   workspace_window->setModel (_workspace_model);
 
-  connect (_workspace_model, SIGNAL (model_changed ()),
-           workspace_window, SLOT (model_changed ()));
-
   // Create and set the central widget.  QMainWindow takes ownership of
   // the widget (pointer) so there is no need to delete the object upon
   // destroying this main_window.
 
   QWidget *dummyWidget = new QWidget ();
   dummyWidget->setObjectName ("CentralDummyWidget");
   dummyWidget->resize (10, 10);
   dummyWidget->setSizePolicy (QSizePolicy::Minimum, QSizePolicy::Minimum);
diff --git a/libgui/src/workspace-model.cc b/libgui/src/workspace-model.cc
--- a/libgui/src/workspace-model.cc
+++ b/libgui/src/workspace-model.cc
@@ -1,9 +1,8 @@
-
 /*
 
 Copyright (C) 2013 John W. Eaton
 Copyright (C) 2011-2012 Jacob Dawid
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
@@ -22,99 +21,96 @@ along with Octave; see the file COPYING.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <QTreeWidget>
-#include <QTime>
 
 #include "symtab.h"
 #include "variables.h"
 
 #include "workspace-model.h"
-#include "octave-link.h"
 
-workspace_model::workspace_model(QObject *p)
+workspace_model::workspace_model (QObject *p)
   : QAbstractTableModel (p)
 {
-  _columnNames.append(tr("Name"));
-  _columnNames.append(tr("Class"));
-  _columnNames.append(tr("Dimension"));
-  _columnNames.append(tr("Value"));
-}
-
-workspace_model::~workspace_model()
-{
+  _columnNames.append (tr ("Name"));
+  _columnNames.append (tr ("Class"));
+  _columnNames.append (tr ("Dimension"));
+  _columnNames.append (tr ("Value"));
 }
 
 int
-workspace_model::rowCount(const QModelIndex &p) const
+workspace_model::rowCount(const QModelIndex& p) const
 {
-  return _symbols.size();
+  return _symbols.size ();
 }
 
 int
-workspace_model::columnCount(const QModelIndex &p) const
+workspace_model::columnCount (const QModelIndex& p) const
 {
-  return _columnNames.size();
+  return _columnNames.size ();
 }
 
 Qt::ItemFlags
-workspace_model::flags(const QModelIndex &idx) const
+workspace_model::flags (const QModelIndex& idx) const
 {
-  if (!idx.isValid())
+  if (! idx.isValid ())
     return 0;
 
   return Qt::ItemIsEnabled | Qt::ItemIsSelectable;
 }
 
 QVariant
-workspace_model::headerData(int section, Qt::Orientation orientation, int role) const
+workspace_model::headerData (int section, Qt::Orientation orientation,
+                             int role) const
 {
   if (orientation == Qt::Horizontal && role == Qt::DisplayRole)
-  {
-     return _columnNames[section];
-  }
-
-  return QVariant();
+    return _columnNames[section];
+  else
+    return QVariant();
 }
 
 QVariant
-workspace_model::data(const QModelIndex &idx, int role) const
+workspace_model::data (const QModelIndex& idx, int role) const
 {
   if (!idx.isValid())
     return QVariant();
+
   if (role != Qt::DisplayRole)
-    return QVariant();
+    return QVariant ();
+
+  switch (idx.column ())
+    {
+    case 0:
+      return QVariant(_symbols[idx.row()]);
 
-  switch(idx.column())
-  {
-  case 0:
-    return QVariant(_symbols[idx.row()]);
-  case 1:
-    return QVariant(_class_names[idx.row()]);
-  case 2:
-    return QVariant(_dimensions[idx.row()]);
-  case 3:
-    return QVariant(_values[idx.row()]);
-  }
-  return QVariant();
+    case 1:
+      return QVariant(_class_names[idx.row()]);
+
+    case 2:
+      return QVariant(_dimensions[idx.row()]);
+
+    case 3:
+      return QVariant(_values[idx.row()]);
+    }
+
+  return QVariant ();
 }
 
 void
 workspace_model::set_workspace (const QString& scopes,
                                 const QStringList& symbols,
                                 const QStringList& class_names,
                                 const QStringList& dimensions,
                                 const QStringList& values)
 {
-
   _scopes = scopes;
   _symbols = symbols;
   _class_names = class_names;
   _dimensions = dimensions;
   _values = values;
 
   update_table ();
 
@@ -140,15 +136,14 @@ workspace_model::clear_data (void)
   _values = QStringList ();
 }
 
 void
 workspace_model::update_table (void)
 {
   beginResetModel();
 
-  // nothing to do except tell the world to recalc
+  // Nothing to do except tell the world to recalc.
 
   endResetModel ();
 
   emit model_changed ();
 }
-
diff --git a/libgui/src/workspace-model.h b/libgui/src/workspace-model.h
--- a/libgui/src/workspace-model.h
+++ b/libgui/src/workspace-model.h
@@ -33,28 +33,28 @@ class workspace_model
   : public QAbstractTableModel
 {
   Q_OBJECT
 
 public:
 
   workspace_model (QObject *parent = 0);
 
-  ~workspace_model (void);
+  ~workspace_model (void) { }
 
-  QVariant data (const QModelIndex &index, int role) const;
+  QVariant data (const QModelIndex& index, int role) const;
 
-  Qt::ItemFlags flags (const QModelIndex &index) const;
+  Qt::ItemFlags flags (const QModelIndex& index) const;
 
   QVariant headerData (int section, Qt::Orientation orientation,
                        int role = Qt::DisplayRole) const;
 
-  int rowCount (const QModelIndex &parent = QModelIndex ()) const;
+  int rowCount (const QModelIndex& parent = QModelIndex ()) const;
 
-  int columnCount (const QModelIndex &parent = QModelIndex ()) const;
+  int columnCount (const QModelIndex& parent = QModelIndex ()) const;
 
 public slots:
 
   void set_workspace (const QString& scopes,
                       const QStringList& symbols,
                       const QStringList& class_names,
                       const QStringList& dimensions,
                       const QStringList& values);
@@ -74,9 +74,9 @@ private:
   QStringList _symbols;
   QStringList _class_names;
   QStringList _dimensions;
   QStringList _values;
 
   QStringList _columnNames;
 };
 
-#endif // WORKSPACEMODEL_H
+#endif
diff --git a/libgui/src/workspace-view.cc b/libgui/src/workspace-view.cc
--- a/libgui/src/workspace-view.cc
+++ b/libgui/src/workspace-view.cc
@@ -32,17 +32,17 @@ along with Octave; see the file COPYING.
 #include <QVBoxLayout>
 #include <QPushButton>
 #include <QMenu>
 
 workspace_view::workspace_view (QWidget *p)
   : octave_dock_widget (p)
 {
   setObjectName ("WorkspaceView");
-  setWindowIcon (QIcon(":/actions/icons/logo.png"));
+  setWindowIcon (QIcon (":/actions/icons/logo.png"));
   setWindowTitle (tr ("Workspace"));
   setStatusTip (tr ("View the variables in the active workspace."));
 
   view = new QTableView (this);
 
   view->setWordWrap (false);
   view->setContextMenuPolicy (Qt::CustomContextMenu);
 
@@ -67,21 +67,21 @@ workspace_view::workspace_view (QWidget 
   
   view->horizontalHeader ()->restoreState (settings->value ("workspaceview/column_state").toByteArray ());
 
   // Connect signals and slots.
 
   connect (view, SIGNAL (doubleClicked (QModelIndex)),
            this, SLOT (item_double_clicked (QModelIndex)));
 
-  connect (view, SIGNAL (customContextMenuRequested(const QPoint&)),
+  connect (view, SIGNAL (customContextMenuRequested (const QPoint&)),
            this, SLOT(contextmenu_requested (const QPoint&)));
 
   connect (this, SIGNAL (command_requested (const QString&)),
-           p, SLOT (handle_command_double_clicked(const QString&)));
+           p, SLOT (handle_command_double_clicked (const QString&)));
 }
 
 workspace_view::~workspace_view (void)
 {
   QSettings *settings = resource_manager::get_settings ();
 
   settings->setValue("workspaceview/column_state",
                      view->horizontalHeader ()->saveState ());
@@ -109,17 +109,17 @@ workspace_view::contextmenu_requested (c
   QMenu menu (this);
 
   QModelIndex index = view->indexAt (pos);
   QAbstractItemModel *m = view->model ();
 
   // if it isnt Local, Glocal etc, allow the ctx menu
   if (index.isValid())
     {
-      index = index.sibling(index.row(), 0);
+      index = index.sibling (index.row(), 0);
 
       QMap<int, QVariant> item_data = m->itemData (index);
   
       QString var_name = item_data[0].toString ();
 
       menu.addAction ("disp(" + var_name + ")", this,
                       SLOT (handle_contextmenu_disp ()));
 
diff --git a/libgui/src/workspace-view.h b/libgui/src/workspace-view.h
--- a/libgui/src/workspace-view.h
+++ b/libgui/src/workspace-view.h
@@ -31,17 +31,17 @@ along with Octave; see the file COPYING.
 #include "workspace-model.h"
 
 class workspace_view : public octave_dock_widget
 {
   Q_OBJECT
 
 public:
 
-  workspace_view (QWidget * parent = 0);
+  workspace_view (QWidget *parent = 0);
 
   ~workspace_view (void);
 
 public:
 
   void setModel (workspace_model *model) { view->setModel (model); }
 
 
