# HG changeset patch
# User Rik <rik@octave.org>
# Date 1354552658 28800
#      Mon Dec 03 08:37:38 2012 -0800
# Node ID 20e9b56bbf2f627eb0f58d0e2fea7238a1c1c83b
# Parent  d1285ebe60caf4ab2e73697c7481f5e391770b75
cmunique.m: Expand to accept inputs of class single.

* cmunique.m: Expand to accept inputs of class single.
Remove FIXME note.  Tweak %!tests to follow Octave coding conventions.

diff --git a/scripts/image/cmunique.m b/scripts/image/cmunique.m
--- a/scripts/image/cmunique.m
+++ b/scripts/image/cmunique.m
@@ -56,31 +56,30 @@
 
 function [Y, newmap] = cmunique (X, map)
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
   endif
 
   cls = class (X);
-  ## FIXME: Documentation accepts only 3 classes.  Could easily add 'single'.
-  if (! any (strcmp (cls, {"uint8", "uint16", "double"})))
+  if (! any (strcmp (cls, {"uint8", "uint16", "single", "double"})))
     error ("cmunique: X is of invalid data type '%s'", cls);
   endif
 
   if (nargin == 2)
     ## (X, map) case
     if (! iscolormap (map))
       error ("cmunique: MAP must be a valid colormap");
     endif
     [newmap,i,j] = unique (map, "rows");  # calculate unique colormap
-    if (isa (X, "double"))
+    if (isfloat (X))
       Y = j(X);               # find new indices
     else
-      Y = j(double (X) + 1);  # find new indices
+      Y = j(double (X) + 1);  # find new indices, switch to 1-based index
     endif
   else
     switch (size (X,3))
       case (1)
         ## I case
         [newmap,i,j] = unique (X);               # calculate unique colormap
         newmap = repmat (newmap,1,3);            # get a RGB colormap
         Y = reshape (j, rows (X), columns (X));  # Y is j reshaped
@@ -90,23 +89,23 @@ function [Y, newmap] = cmunique (X, map)
         map = [X(:,:,1)(:), X(:,:,2)(:), X(:,:,3)(:)];
         [newmap,i,j] = unique (map, "rows");     # calculate unique colormap
         Y = reshape (j, rows (X), columns (X));  # Y is j reshaped
       otherwise
         error ("cmunique: X is not a valid image");
     endswitch
     
     ## if image was uint8 or uint16 we have to convert newmap to [0,1] range
-    if (! isa (X, "double"))
-      newmap = double (newmap) / double (intmax (class (X)));
+    if (isinteger (X))
+      newmap = double (newmap) / double (intmax (cls));
     endif
   endif
 
   if (rows (newmap) <= 256)
-    ## convert Y to uint8 (0-based indices then)
+    ## convert Y to uint8 and 0-based indexing
     Y = uint8 (Y-1);
   endif
 
 endfunction
 
 
 %!demo
 %! [Y, newmap] = cmunique ([1:4;5:8], [hot(4);hot(4)])
@@ -179,24 +178,24 @@ endfunction
 %! assert (Id, newmap(:,1)(Y+1));
 %! assert (Id, newmap(:,2)(Y+1));
 %! assert (Id, newmap(:,3)(Y+1));
 
 ## Random uint16 I image
 %!test
 %! I = uint16 (rand (10,10)*65535);
 %! Id = double (I) / 65535;
-%! [Y,newmap] = cmunique (I);
-%! assert (Id,newmap (:,1)(Y+1));
-%! assert (Id,newmap (:,2)(Y+1));
-%! assert (Id,newmap (:,3)(Y+1));
+%! [Y, newmap] = cmunique (I);
+%! assert (Id, newmap(:,1)(Y+1));
+%! assert (Id, newmap(:,2)(Y+1));
+%! assert (Id, newmap(:,3)(Y+1));
 
 ## Test input validation
 %!error cmpermute ()
 %!error cmpermute (1,2,3)
-%!error <X is of invalid data type> cmunique (single (magic (16)))
+%!error <X is of invalid data type> cmunique (uint32 (magic (16)))
 %!error <MAP must be a valid colormap> cmunique (1, "a")
 %!error <MAP must be a valid colormap> cmunique (1, i)
 %!error <MAP must be a valid colormap> cmunique (1, ones (3,3,3))
 %!error <MAP must be a valid colormap> cmunique (1, ones (3,2))
 %!error <MAP must be a valid colormap> cmunique (1, [-1 1 1])
 %!error <MAP must be a valid colormap> cmunique (1, [2 1 1])
 
