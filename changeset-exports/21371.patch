# HG changeset patch
# User Lachlan Andrew <lachlanbis@gmail.com>
# Date 1456305380 -39600
#      Wed Feb 24 20:16:20 2016 +1100
# Node ID dc325209923221a76a4b8dc724d6c3f935eb3730
# Parent  df5922f771939131deab8a13d7a5538a57b000f5
Allow GUI build with QScintilla 2.4 (bug #47226).

* octave-qscintilla.cc (contextmenu_break_condition, contextmenu_break_once):
  Move #ifdef HAVE_QSCI_VERSON_2_6_0 inside function definition.

* octave-qscintilla.cc (contextMenuEvent): Remove separate context menu
  for right-mouse-button in left margin, if ! HAVE_QSCI_VERSION_2_6_0.

diff --git a/libgui/src/m-editor/octave-qscintilla.cc b/libgui/src/m-editor/octave-qscintilla.cc
--- a/libgui/src/m-editor/octave-qscintilla.cc
+++ b/libgui/src/m-editor/octave-qscintilla.cc
@@ -211,17 +211,19 @@ octave_qscintilla::contextMenuEvent (QCo
       get_global_textcursor_pos (&global_pos, &local_pos);
       QRect editor_rect = geometry ();      // editor rect mapped to global
       editor_rect.moveTopLeft
       (parentWidget ()->mapToGlobal (editor_rect.topLeft ()));
       if (! editor_rect.contains (global_pos))  // is cursor outside editor?
         global_pos = editor_rect.topLeft ();   // yes, take top left corner
     }
 
+#ifdef HAVE_QSCI_VERSION_2_6_0
   if (! in_left_margin)
+#endif
     {
       // fill context menu with editor's standard actions
       emit create_context_menu_signal (context_menu);
 
       // additional custom entries of the context menu
       context_menu->addSeparator ();   // separator before custom entries
 
       // help menu: get the position of the mouse or the text cursor
@@ -237,29 +239,31 @@ octave_qscintilla::contextMenuEvent (QCo
               context_menu->addAction (tr ("Documentation on")
                                        + " " + _word_at_cursor,
                                        this, SLOT (contextmenu_doc (bool)));
               context_menu->addAction (tr ("Edit") + " " + _word_at_cursor,
                                        this, SLOT (contextmenu_edit (bool)));
             }
         }
       }
+#ifdef HAVE_QSCI_VERSION_2_6_0
     else
       {
         // remove all standard actions from scintilla
         QList<QAction *> all_actions = context_menu->actions ();
         QAction* a;
 
         foreach (a, all_actions)
           context_menu->removeAction (a);
 
         a = context_menu->addAction (tr ("dbstop if ..."), this,
                                      SLOT (contextmenu_break_condition (bool)));
         a->setData (local_pos);
       }
+#endif
 
   // finaly show the menu
   context_menu->exec (global_pos);
 #endif
 }
 
 
 // handle the menu entry for calling help or doc
@@ -296,46 +300,40 @@ octave_qscintilla::contextmenu_run (bool
   QStringList commands = selectedText ().split (QRegExp("[\r\n]"),
                                                 QString::SkipEmptyParts);
   for (int i = 0; i < commands.size (); i++)
     emit execute_command_in_terminal_signal (commands.at (i));
 }
 
 // wrappers for dbstop related context menu items
 
-#ifdef HAVE_QSCI_VERSION_2_6_0
 // FIXME Why can't the data be sent as the argument to the function???
 void
 octave_qscintilla::contextmenu_break_condition (bool)
 {
+#ifdef HAVE_QSCI_VERSION_2_6_0
   QAction *action = qobject_cast<QAction *>(sender());
   QPoint local_pos = action->data ().value<QPoint> ();
 
   // pick point just right of margins, so lineAt doesn't give -1
   int margins = marginWidth (1) + marginWidth (2) + marginWidth (3);
   local_pos = QPoint (margins + 1, local_pos.y ());
 
   emit context_menu_break_condition_signal (lineAt (local_pos));
+#endif
 }
 
 void
 octave_qscintilla::contextmenu_break_once (const QPoint& local_pos)
 {
+#ifdef HAVE_QSCI_VERSION_2_6_0
   emit context_menu_break_once (lineAt (local_pos));
+#endif
 }
 
-/*
-void
-octave_qscintilla::contextmenu_break_if_caught (bool)
-{
-  emit context_menu_break_if_caught
-}
-*/
-#endif // HAVE_QSCI_VERSION_2_6_0
-
 void
 octave_qscintilla::text_changed ()
 {
   emit status_update (isUndoAvailable (), isRedoAvailable ());
 }
 
 // when edit area gets focus update information on undo/redo actions
 void octave_qscintilla::focusInEvent(QFocusEvent *focusEvent)
