# HG changeset patch
# User Markus MÃ¼tzel <markus.muetzel@gmx.de>
# Date 1530125797 -7200
#      Wed Jun 27 20:56:37 2018 +0200
# Node ID 7335d44f34b456b88950d187f216724abd3c2cbb
# Parent  49d3c6344afe6111e4fb5f9d030093634fe36e69
Add conversion functions between UTF-8 and wchar_t (bug #49118).

* uniconv-wrappers.[c,h]: Add functions "u8_to_wchar" and "u8_from_wchar" to
convert character arrays between UTF-8 and wchar_t.

diff --git a/liboctave/wrappers/uniconv-wrappers.c b/liboctave/wrappers/uniconv-wrappers.c
--- a/liboctave/wrappers/uniconv-wrappers.c
+++ b/liboctave/wrappers/uniconv-wrappers.c
@@ -24,27 +24,75 @@ along with Octave; see the file COPYING.
 // gnulib headers directly in Octave's C++ source files to avoid
 // problems that may be caused by the way that gnulib overrides standard
 // library functions.
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
+#include <stdlib.h>
+#include <string.h>
+#include <wchar.h>
+
 #include "uniconv.h"
 
 #include "uniconv-wrappers.h"
 
 uint8_t *
 octave_u8_conv_from_encoding (const char *fromcode, const char *src,
                               size_t srclen, size_t *lengthp)
 {
   return u8_conv_from_encoding (fromcode, iconveh_question_mark,
                                 src, srclen, NULL, NULL, lengthp);
 }
 
-extern char *
+char *
 octave_u8_conv_to_encoding (const char *tocode, const uint8_t *src,
                             size_t srclen, size_t *lengthp)
 {
   return u8_conv_to_encoding (tocode, iconveh_question_mark,
                               src, srclen, NULL, NULL, lengthp);
 }
+
+char *
+u8_from_wchar (const wchar_t *wc)
+{
+  // Convert wide char array to multibyte UTF-8 char array
+  // The memory at the returned pointer must be freed after use.
+
+  size_t srclen = wcslen (wc) * sizeof (wchar_t);
+  const char *src = (const char *) wc;
+
+  size_t length = 0;
+  uint8_t *mbchar = u8_conv_from_encoding ("wchar_t", iconveh_question_mark,
+                                           src, srclen, NULL, NULL, &length);
+
+  // result might not be 0 terminated
+  char *retval = malloc (length + 1);
+  memcpy (retval, mbchar, length);
+  free ((void *) mbchar);
+  retval[length] = 0; // 0 terminate string
+
+  return retval;
+}
+
+wchar_t *
+u8_to_wchar (const char *u8)
+{
+  // Convert multibyte UTF-8 char array to wide char array
+  // The memory at the returned pointer must be freed after use.
+
+  size_t srclen = strlen (u8);
+  const uint8_t *src = (const uint8_t *) u8;
+
+  size_t length = 0;
+
+  char *wchar = u8_conv_to_encoding ("wchar_t", iconveh_question_mark,
+                                     src, srclen, NULL, NULL, &length);
+  // result might not be 0 terminated
+  wchar_t *retval = malloc (length + 1 * sizeof (wchar_t));
+  memcpy (retval, wchar, length);
+  free ((void *) wchar);
+  retval[length / sizeof (wchar_t)] = 0; // 0 terminate string
+
+  return retval;
+}
diff --git a/liboctave/wrappers/uniconv-wrappers.h b/liboctave/wrappers/uniconv-wrappers.h
--- a/liboctave/wrappers/uniconv-wrappers.h
+++ b/liboctave/wrappers/uniconv-wrappers.h
@@ -41,13 +41,19 @@ extern "C" {
 extern uint8_t *
 octave_u8_conv_from_encoding (const char *fromcode, const char *src,
                               size_t srclen, size_t *lengthp);
 
 extern char *
 octave_u8_conv_to_encoding (const char *tocode, const uint8_t *src,
                             size_t srclen, size_t *lengthp);
 
+extern char *
+u8_from_wchar (const wchar_t *wc);
+
+extern wchar_t *
+u8_to_wchar (const char *u8_char);
+
 #if defined __cplusplus
 }
 #endif
 
 #endif
