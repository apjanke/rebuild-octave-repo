# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1517079091 18000
#      Sat Jan 27 13:51:31 2018 -0500
# Node ID d36e1f768bfaa5fe4eb58c0152213cae3d8fc4d5
# Parent  f61502510d0898b59f77abd15d5f2791795542f9
allow diagonal and permutation matrices to be display in variable editor

* ov-perm.h, ov-perm.cc (octave_perm_matrix::short_disp,
octave_perm_matrix::edit_display): New functions.
* PermMatrix.h (PermMatrix::isempty, PermMatrix::ndims): New functions.

* ov-base-diag.h, ov-base-diag.cc (octave_base_diag::short_disp,
octave_base_diag::edit_display): New functions.
* DiagArray2.h (DiagArray2::isempty, DiagArray2::ndims): New functions.

diff --git a/libinterp/octave-value/ov-base-diag.cc b/libinterp/octave-value/ov-base-diag.cc
--- a/libinterp/octave-value/ov-base-diag.cc
+++ b/libinterp/octave-value/ov-base-diag.cc
@@ -553,16 +553,81 @@ octave_base_diag<DMT, MT>::write (octave
 template <typename DMT, typename MT>
 void
 octave_base_diag<DMT, MT>::print_info (std::ostream& os,
                                        const std::string& prefix) const
 {
   matrix.print_info (os, prefix);
 }
 
+// FIXME: this function is duplicated in octave_base_matrix<T>.  Could
+// it somehow be shared instead?
+
+template <typename DMT, typename MT>
+void
+octave_base_diag<DMT, MT>::short_disp (std::ostream& os) const
+{
+  if (matrix.isempty ())
+    os << "[]";
+  else if (matrix.ndims () == 2)
+    {
+      // FIXME: should this be configurable?
+      octave_idx_type max_elts = 10;
+      octave_idx_type elts = 0;
+
+      octave_idx_type nel = matrix.numel ();
+
+      octave_idx_type nr = matrix.rows ();
+      octave_idx_type nc = matrix.columns ();
+
+      os << '[';
+
+      for (octave_idx_type i = 0; i < nr; i++)
+        {
+          for (octave_idx_type j = 0; j < nc; j++)
+            {
+              std::ostringstream buf;
+              octave_print_internal (buf, matrix(i,j));
+              std::string tmp = buf.str ();
+              size_t pos = tmp.find_first_not_of (' ');
+              if (pos != std::string::npos)
+                os << tmp.substr (pos);
+              else if (! tmp.empty ())
+                os << tmp[0];
+
+              if (++elts >= max_elts)
+                goto done;
+
+              if (j < nc - 1)
+                os << ", ";
+            }
+
+          if (i < nr - 1 && elts < max_elts)
+            os << "; ";
+        }
+
+    done:
+
+      if (nel <= max_elts)
+        os << ']';
+    }
+  else
+    os << "...";
+}
+
+template <typename DMT, typename MT>
+std::string
+octave_base_diag<DMT, MT>::edit_display (octave_idx_type i,
+                                         octave_idx_type j) const
+{
+  std::ostringstream buf;
+  octave_print_internal (buf, matrix(i,j));
+  return buf.str ();
+}
+
 template <typename DMT, typename MT>
 octave_value
 octave_base_diag<DMT, MT>::fast_elem_extract (octave_idx_type n) const
 {
   if (n < matrix.numel ())
     {
       octave_idx_type nr = matrix.rows ();
 
diff --git a/libinterp/octave-value/ov-base-diag.h b/libinterp/octave-value/ov-base-diag.h
--- a/libinterp/octave-value/ov-base-diag.h
+++ b/libinterp/octave-value/ov-base-diag.h
@@ -209,16 +209,20 @@ public:
   mxArray * as_mxArray (void) const;
 
   bool print_as_scalar (void) const;
 
   void print (std::ostream& os, bool pr_as_read_syntax = false);
 
   void print_info (std::ostream& os, const std::string& prefix) const;
 
+  void short_disp (std::ostream& os) const;
+
+  std::string edit_display (octave_idx_type i, octave_idx_type j) const;
+
   octave_value fast_elem_extract (octave_idx_type n) const;
 
 protected:
 
   DMT matrix;
 
   octave_value to_dense (void) const;
 
diff --git a/libinterp/octave-value/ov-perm.cc b/libinterp/octave-value/ov-perm.cc
--- a/libinterp/octave-value/ov-perm.cc
+++ b/libinterp/octave-value/ov-perm.cc
@@ -472,27 +472,93 @@ default_numeric_conversion_function (con
 
 octave_base_value::type_conv_info
 octave_perm_matrix::numeric_conversion_function (void) const
 {
   return octave_base_value::type_conv_info (default_numeric_conversion_function,
                                             octave_matrix::static_type_id ());
 }
 
+// FIXME: This is duplicated from octave_base_matrix<T>.  Could
+// octave_perm_matrix be derived from octave_base_matrix<T>?
+
+void
+octave_perm_matrix::short_disp (std::ostream& os) const
+{
+  if (matrix.isempty ())
+    os << "[]";
+  else if (matrix.ndims () == 2)
+    {
+      // FIXME: should this be configurable?
+      octave_idx_type max_elts = 10;
+      octave_idx_type elts = 0;
+
+      octave_idx_type nel = matrix.numel ();
+
+      octave_idx_type nr = matrix.rows ();
+      octave_idx_type nc = matrix.columns ();
+
+      os << '[';
+
+      for (octave_idx_type i = 0; i < nr; i++)
+        {
+          for (octave_idx_type j = 0; j < nc; j++)
+            {
+              std::ostringstream buf;
+              octave_int<octave_idx_type> tval (matrix(i,j));
+              octave_print_internal (buf, tval);
+              std::string tmp = buf.str ();
+              size_t pos = tmp.find_first_not_of (' ');
+              if (pos != std::string::npos)
+                os << tmp.substr (pos);
+              else if (! tmp.empty ())
+                os << tmp[0];
+
+              if (++elts >= max_elts)
+                goto done;
+
+              if (j < nc - 1)
+                os << ", ";
+            }
+
+          if (i < nr - 1 && elts < max_elts)
+            os << "; ";
+        }
+
+    done:
+
+      if (nel <= max_elts)
+        os << ']';
+    }
+  else
+    os << "...";
+}
+
 octave_base_value *
 octave_perm_matrix::try_narrowing_conversion (void)
 {
   octave_base_value *retval = nullptr;
 
   if (matrix.numel () == 1)
     retval = new octave_scalar (matrix (0, 0));
 
   return retval;
 }
 
+std::string
+octave_perm_matrix::edit_display (octave_idx_type i, octave_idx_type j) const
+{
+  // FIXME: maybe we should have octave_print_internal functions for
+  // standard int types, not just octave_int<T> types.
+
+  std::ostringstream buf;
+  octave_print_internal (buf, octave_int<octave_idx_type> (matrix(i,j)));
+  return buf.str ();
+}
+
 octave_value
 octave_perm_matrix::fast_elem_extract (octave_idx_type n) const
 {
   if (n < matrix.numel ())
     {
       octave_idx_type nr = matrix.rows ();
 
       octave_idx_type r = n % nr;
diff --git a/libinterp/octave-value/ov-perm.h b/libinterp/octave-value/ov-perm.h
--- a/libinterp/octave-value/ov-perm.h
+++ b/libinterp/octave-value/ov-perm.h
@@ -225,16 +225,20 @@ public:
   mxArray * as_mxArray (void) const;
 
   bool print_as_scalar (void) const;
 
   void print (std::ostream& os, bool pr_as_read_syntax = false);
 
   void print_info (std::ostream& os, const std::string& prefix) const;
 
+  void short_disp (std::ostream& os) const;
+
+  std::string edit_display (octave_idx_type i, octave_idx_type j) const;
+
   octave_value map (unary_mapper_t umap) const
   { return to_dense ().map (umap); }
 
   octave_value fast_elem_extract (octave_idx_type n) const;
 
 protected:
 
   PermMatrix matrix;
diff --git a/liboctave/array/DiagArray2.h b/liboctave/array/DiagArray2.h
--- a/liboctave/array/DiagArray2.h
+++ b/liboctave/array/DiagArray2.h
@@ -93,16 +93,20 @@ public:
   octave_idx_type length (void) const { return Array<T>::numel (); }
   octave_idx_type nelem (void) const { return dim1 () * dim2 (); }
   octave_idx_type numel (void) const { return nelem (); }
 
   size_t byte_size (void) const { return Array<T>::byte_size (); }
 
   dim_vector dims (void) const { return dim_vector (d1, d2); }
 
+  bool isempty (void) const { return numel () == 0; }
+
+  int ndims (void) const { return 2; }
+
   Array<T> extract_diag (octave_idx_type k = 0) const;
 
   DiagArray2<T> build_diag_matrix () const
   {
     return DiagArray2<T> (array_value ());
   }
 
   // Warning: the non-const two-index versions will silently ignore assignments
diff --git a/liboctave/array/PermMatrix.h b/liboctave/array/PermMatrix.h
--- a/liboctave/array/PermMatrix.h
+++ b/liboctave/array/PermMatrix.h
@@ -65,16 +65,20 @@ public:
 
   octave_idx_type numel (void) const { return dim1 () * dim2 (); }
 
   size_t byte_size (void) const
   { return Array<octave_idx_type>::byte_size (); }
 
   dim_vector dims (void) const { return dim_vector (dim1 (), dim2 ()); }
 
+  bool isempty (void) const { return numel () == 0; }
+
+  int ndims (void) const { return 2; }
+
   const Array<octave_idx_type>& col_perm_vec (void) const
   { return *this; }
 
   octave_idx_type
   elem (octave_idx_type i, octave_idx_type j) const
   {
     return (Array<octave_idx_type>::elem (j) == i) ? 1 : 0;
   }
