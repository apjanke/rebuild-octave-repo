# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1281563710 25200
#      Wed Aug 11 14:55:10 2010 -0700
# Node ID 36a7163a548495c140bc66fbaa33b86c3a51cf9c
# Parent  cc2bc3f46cd4e1682d7da651d66a5d6fc722b234
unique.m: Handle corner case where sparse matrix is actually full.

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2010-08-11  Rik <octave@nomad.inbox5.com>
+
+	* set/unique.m: Handle corner case where sparse matrix is actually full.
+
 2010-08-10  Rik <octave@nomad.inbox5.com>
 
 	* set/unique.m: Check whether outputs are used before calculating.
 
 2010-08-10  Rik <octave@nomad.inbox5.com>
 
 	* statistics/base/module.mk, deprecated/module.mk,
 	statistics/base/values.m, deprecated/values.m: Deprecate values.m
diff --git a/scripts/set/unique.m b/scripts/set/unique.m
--- a/scripts/set/unique.m
+++ b/scripts/set/unique.m
@@ -83,17 +83,22 @@ function [y, i, j] = unique (x, varargin
   ## sparse array as long as we are not operating on rows.
 
   ## FIXME -- unique is called when PKG_ADD files are parsed, but
   ## issparse is not yet available because it is coming from a .oct
   ## file?!?
 
   if (exist ("issparse"))
     if (issparse (x) && ! optrows && nargout <= 1)
-      y = unique ([0; (full (nonzeros (x)))], varargin{:});
+      if (nnz (x) < numel (x)) 
+        y = unique ([0; (full (nonzeros (x)))], varargin{:});
+      else
+        ## Corner case where sparse matrix is actually full
+        y = unique (full (x), varargin{:});
+      endif
       return;
     endif
   endif
 
   if (optrows)
     n = rows (x);
     dim = 1;
   else
@@ -175,16 +180,19 @@ endfunction
 %!assert(unique({'Foo','Bar','FooBar'}'),{'Bar','Foo','FooBar'}')
 %!assert(unique(zeros(1,0)), zeros(0,1))
 %!assert(unique(zeros(1,0), 'rows'), zeros(1,0))
 %!assert(unique(cell(1,0)), cell(0,1))
 %!assert(unique({}), {})
 %!assert(unique([1,2,2,3,2,4], 'rows'), [1,2,2,3,2,4])
 %!assert(unique([1,2,2,3,2,4]), [1,2,3,4])
 %!assert(unique([1,2,2,3,2,4]', 'rows'), [1,2,3,4]')
+%!assert(unique(sparse([2,0;2,0])), [0,2]')
+%!assert(unique(sparse([1,2;2,3])), [1,2,3]')
+%!assert(unique([1,2,2,3,2,4]', 'rows'), [1,2,3,4]')
 %!assert(unique(single([1,2,2,3,2,4]), 'rows'), single([1,2,2,3,2,4]))
 %!assert(unique(single([1,2,2,3,2,4])), single([1,2,3,4]))
 %!assert(unique(single([1,2,2,3,2,4]'), 'rows'), single([1,2,3,4]'))
 %!assert(unique(uint8([1,2,2,3,2,4]), 'rows'), uint8([1,2,2,3,2,4]))
 %!assert(unique(uint8([1,2,2,3,2,4])), uint8([1,2,3,4]))
 %!assert(unique(uint8([1,2,2,3,2,4]'), 'rows'), uint8([1,2,3,4]'))
 %!test
 %! [a,i,j] = unique([1,1,2,3,3,3,4]);
