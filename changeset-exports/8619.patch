# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1233182607 -3600
#      Wed Jan 28 23:43:27 2009 +0100
# Node ID 930a8114197b1c23321004d841fd1debf631582a
# Parent  f8b3ece45bda4b59467bd10cbd4a51965c223e19
For zero length matches in regexp, advance index by one and try again

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,13 +1,19 @@
 2009-01-28  John W. Eaton  <jwe@octave.org>
 
 	* Makefile.in (install, uninstall): Handle SHLLIBPRE and SHLBINPRE
 	library prefixes.  From Marco Atzeri <marco_atzeri@yahoo.it>.
 
+2008-01-28  David Bateman  <dbateman@free.fr>
+
+	* DLD-FUNCTIONS/regexp.cc (octregexp_list): Don't break for zero
+	length match, but rather advance the index by one character and
+	try again.
+
 2009-01-28  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/lookup.cc (Flookup): Fix doc string.
 
 2009-01-27  John W. Eaton  <jwe@octave.org>
 
 	* load-path.cc (Fcommand_line_path): Rename from Fcommandlinepath.
 
diff --git a/src/DLD-FUNCTIONS/regexp.cc b/src/DLD-FUNCTIONS/regexp.cc
--- a/src/DLD-FUNCTIONS/regexp.cc
+++ b/src/DLD-FUNCTIONS/regexp.cc
@@ -309,17 +309,17 @@ octregexp_list (const octave_value_list 
 		      size_t i;
 		      if (pattern.at (tmp_pos3) == '*')
 			i = 0;
 		      else
 			i = 1;
 
 		      for (; i < max_length + 1; i++)
 			{
-			  buf <<pattern.substr(new_pos, tmp_pos3 - new_pos)
+			  buf << pattern.substr(new_pos, tmp_pos3 - new_pos)
 			      << "{" << i << "}";
 			  buf << pattern.substr(tmp_pos3 + 1, 
 						tmp_pos1 - tmp_pos3 - 1);
 			  if (i != max_length)
 			    buf << "|";
 			}
 		      buf << ")";
 		    }
@@ -416,17 +416,21 @@ octregexp_list (const octave_value_list 
 	    {
 	      error ("%s: internal error calling pcre_exec\nError code from pcre_exec is %i", nm.c_str(), matches);
 	      pcre_free(re);
 	      return 0;
 	    }
 	  else if (matches == PCRE_ERROR_NOMATCH)
 	    break;
 	  else if (ovector[1] <= ovector[0])
-	    break;
+	    {
+	      // FIXME: Zero sized match!! Is this the right thing to do?
+	      idx = ovector[0] + 1;
+	      continue;
+	    }
 	  else
 	    {
 	      int pos_match = 0;
 	      Matrix te(matches-1,2);
 	      for (int i = 1; i < matches; i++)
 		{
 		  if (ovector[2*i] >= 0 && ovector[2*i+1] > 0)
 		    {
@@ -511,16 +515,19 @@ octregexp_list (const octave_value_list 
 	  if (regexec(&compiled, buffer.c_str() + idx, subexpr, 
 		      match, (idx ? REG_NOTBOL : 0)) == 0) 
 	    {
 	      // Count actual matches
 	      int matches = 0;
 	      while (matches < subexpr && match[matches].rm_so >= 0) 
 		matches++;
 
+	      if (matches == 0 || match[0].rm_eo == 0)
+		break;
+
 	      s = double (match[0].rm_so+1+idx);
 	      e = double (match[0].rm_eo+idx);
 	      Matrix te(matches-1,2);
 	      for (int i = 1; i < matches; i++)
 		{
 		  te(i-1,0) = double (match[i].rm_so+1+idx);
 		  te(i-1,1) = double (match[i].rm_eo+idx);
 		}
