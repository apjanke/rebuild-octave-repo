# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1362616788 18000
#      Wed Mar 06 19:39:48 2013 -0500
# Node ID 0467d68ca89138e2da38e35d2b0291c4872c7c46
# Parent  9ba5c5ed3aebe72c059031db12d8c2b4326507f3
move current_input_line to lexical_feedback class

* input.h, input.cc, lex.h, lex.ll (current_input_line): Declare as
member of lexical_feedback class.
(octave_base_reader::octave_gets, octave_terminal_reader::get_input,
octave_file_reader::get_input, octave_eval_string_reader::get_input):
Don't set current_input_line.
(octave_lexer::read): Set current_input_line.
* oct-parse.in.yy (octave_parser::bison_error): Use
curr_lexer->current_input_line.

diff --git a/libinterp/interpfcn/input.cc b/libinterp/interpfcn/input.cc
--- a/libinterp/interpfcn/input.cc
+++ b/libinterp/interpfcn/input.cc
@@ -101,19 +101,16 @@ bool stdin_is_tty = false;
 bool interactive = false;
 
 // TRUE means the user forced this shell to be interactive (-i).
 bool forced_interactive = false;
 
 // Should we issue a prompt?
 int promptflag = 1;
 
-// The current line of input, from wherever.
-std::string current_input_line;
-
 // TRUE after a call to completion_matches.
 bool octave_completion_matches_called = false;
 
 // TRUE if the plotting system has requested a call to drawnow at
 // the next user prompt.
 bool Vdrawnow_requested = false;
 
 // TRUE if we are in debugging mode.
@@ -237,29 +234,27 @@ octave_base_reader::octave_gets (bool& e
         last_debugging_command = std::string ();
     }
   else if (Vdebugging)
     {
       retval = last_debugging_command;
       history_skip_auto_repeated_debugging_command = true;
     }
 
-  current_input_line = retval;
-
-  if (! current_input_line.empty ())
+  if (! retval.empty ())
     {
       if (! history_skip_auto_repeated_debugging_command)
-        command_history::add (current_input_line);
+        command_history::add (retval);
 
-      octave_diary << current_input_line;
+      octave_diary << retval;
 
-      if (current_input_line[current_input_line.length () - 1] != '\n')
+      if (retval[retval.length () - 1] != '\n')
         octave_diary << "\n";
 
-      do_input_echo (current_input_line);
+      do_input_echo (retval);
     }
   else
     octave_diary << "\n";
 
   return retval;
 }
 
 // Fix things up so that input can come from the standard input.  This
@@ -555,37 +550,29 @@ const std::string octave_terminal_reader
 
 std::string
 octave_terminal_reader::get_input (bool& eof)
 {
   octave_quit ();
 
   eof = false;
 
-  std::string retval = octave_gets (eof);
-
-  current_input_line = retval;
-
-  return retval;
+  return octave_gets (eof);
 }
 
 const std::string octave_file_reader::in_src ("file");
 
 std::string
 octave_file_reader::get_input (bool& eof)
 {
   octave_quit ();
 
   eof = false;
 
-  std::string retval = octave_fgets (file, eof);
-
-  current_input_line = retval;
-
-  return retval;
+  return octave_fgets (file, eof);
 }
 
 const std::string octave_eval_string_reader::in_src ("eval_string");
 
 std::string
 octave_eval_string_reader::get_input (bool& eof)
 {
   octave_quit ();
@@ -598,18 +585,16 @@ octave_eval_string_reader::get_input (bo
 
   // Clear the eval string so that the next call will return
   // an empty character string with EOF = true.
   eval_string = "";
 
   if (retval.empty ())
     eof = true;
 
-  current_input_line = retval;
-
   return retval;
 }
 
 // If the user simply hits return, this will produce an empty matrix.
 
 static octave_value_list
 get_user_input (const octave_value_list& args, int nargout)
 {
diff --git a/libinterp/interpfcn/input.h b/libinterp/interpfcn/input.h
--- a/libinterp/interpfcn/input.h
+++ b/libinterp/interpfcn/input.h
@@ -44,19 +44,16 @@ extern bool stdin_is_tty;
 extern bool interactive;
 
 // TRUE means the user forced this shell to be interactive (-i).
 extern bool forced_interactive;
 
 // Should we issue a prompt?
 extern int promptflag;
 
-// A line of input.
-extern std::string current_input_line;
-
 // TRUE after a call to completion_matches.
 extern bool octave_completion_matches_called;
 
 // TRUE if the plotting system has requested a call to drawnow at
 // the next user prompt.
 extern OCTINTERP_API bool Vdrawnow_requested;
 
 // TRUE if we are in debugging mode.
diff --git a/libinterp/parse-tree/lex.h b/libinterp/parse-tree/lex.h
--- a/libinterp/parse-tree/lex.h
+++ b/libinterp/parse-tree/lex.h
@@ -172,19 +172,20 @@ public:
       maybe_classdef_get_set_method (false), parsing_classdef (false),
       quote_is_transpose (false), force_script (false),
       reading_fcn_file (false), reading_script_file (false),
       reading_classdef_file (false),
       input_line_number (1), current_input_column (1),
       bracketflag (0), braceflag (0),
       looping (0), defining_func (0), looking_at_function_handle (0),
       block_comment_nesting_level (0), token_count (0),
-      help_text (), fcn_file_name (), fcn_file_full_name (),
-      looking_at_object_index (), parsed_function_name (),
-      pending_local_variables (), nesting_level (), token_stack ()
+      current_input_line (), help_text (), fcn_file_name (),
+      fcn_file_full_name (), looking_at_object_index (),
+      parsed_function_name (), pending_local_variables (),
+      nesting_level (), token_stack ()
   {
     init ();
   }
 
   ~lexical_feedback (void);
 
   void init (void);
 
@@ -282,16 +283,19 @@ public:
 
   // nestng level for blcok comments.
   int block_comment_nesting_level;
 
   // Count of tokens recognized by this lexer since initialized or
   // since the last reset.
   size_t token_count;
 
+  // The current line of input.
+  std::string current_input_line;
+
   // The current help text.
   std::string help_text;
 
   // Simple name of function file we are reading.
   std::string fcn_file_name;
 
   // Full name of file we are reading.
   std::string fcn_file_full_name;
diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -1332,16 +1332,17 @@ lexical_feedback::reset (void)
   current_input_column = 1;
   bracketflag = 0;
   braceflag = 0;
   looping = 0;
   defining_func = 0;
   looking_at_function_handle = 0;
   block_comment_nesting_level = 0;
   token_count = 0;
+  current_input_line = "";
   help_text = "";
   fcn_file_name = "";
   fcn_file_full_name = "";
   looking_at_object_index.clear ();
   looking_at_object_index.push_front (false);
 
   while (! parsed_function_name.empty ())
     parsed_function_name.pop ();
@@ -1474,18 +1475,18 @@ octave_lexer::prep_for_file (void)
 int
 octave_lexer::read (char *buf, unsigned max_size)
 {
   int status = 0;
 
   if (input_buf.empty ())
     {
       bool eof = false;
-      std::string input = input_reader.get_input (eof);
-      input_buf.fill (input, eof);
+      current_input_line = input_reader.get_input (eof);
+      input_buf.fill (current_input_line, eof);
     }
 
   if (! input_buf.empty ())
     status = input_buf.copy_chunk (buf, max_size);
   else
     {
       status = YY_NULL;
 
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -3096,26 +3096,28 @@ octave_parser::bison_error (const char *
   else
     output_buf << "parse error:";
 
   if (s && strcmp (s, "parse error") != 0)
     output_buf << "\n\n  " << s;
 
   output_buf << "\n\n";
 
-  if (! current_input_line.empty ())
+  std::string curr_line = curr_lexer->current_input_line;
+
+  if (! curr_line.empty ())
     {
-      size_t len = current_input_line.length ();
-
-      if (current_input_line[len-1] == '\n')
-        current_input_line.resize (len-1);
+      size_t len = curr_line.length ();
+
+      if (curr_line[len-1] == '\n')
+        curr_line.resize (len-1);
 
       // Print the line, maybe with a pointer near the error token.
 
-      output_buf << ">>> " << current_input_line << "\n";
+      output_buf << ">>> " << curr_line << "\n";
 
       if (err_col == 0)
         err_col = len;
 
       for (int i = 0; i < err_col + 3; i++)
         output_buf << " ";
 
       output_buf << "^";
