# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1325856442 18000
#      Fri Jan 06 08:27:22 2012 -0500
# Branch stable
# Node ID e8bad0dc263c95d09dbb6a0a2a6b68cfec67efee
# Parent  87f06b9990bbc6bc583df47f854f4df22d1fd082
quadcc: use gnulib::copysign

* quadcc.cc: Don't provide definition of coypsign.
(Fquadcc): Use gnulib::copysign.

diff --git a/src/DLD-FUNCTIONS/quadcc.cc b/src/DLD-FUNCTIONS/quadcc.cc
--- a/src/DLD-FUNCTIONS/quadcc.cc
+++ b/src/DLD-FUNCTIONS/quadcc.cc
@@ -26,21 +26,16 @@ along with Octave; see the file COPYING.
 
 #include <stdlib.h>
 #include "lo-math.h"
 #include "lo-ieee.h"
 #include "oct.h"
 #include "parse.h"
 #include "ov-fcn-handle.h"
 
-#if ! defined (HAVE_COPYSIGN) && defined (HAVE__COPYSIGN)
-#define copysign _copysign
-#define HAVE_COPYSIGN 1
-#endif
-
 /* Define the size of the interval heap. */
 #define cquad_heapsize                  200
 
 
 /* Data of a single interval */
 typedef struct
 {
   double a, b;
@@ -1650,17 +1645,17 @@ Mathematical Software, Vol. 37, Issue 3,
     }
 
   /* If a or b are +/-Inf, transform the integral. */
   if (xisinf (a) || xisinf (b))
     {
       wrap = true;
       for (i = 0; i <= nivals; i++)
         if (xisinf (iivals[i]))
-          iivals[i] = copysign (1.0, iivals[i]);
+          iivals[i] = gnulib::copysign (1.0, iivals[i]);
         else
           iivals[i] = 2.0 * atan (iivals[i]) / M_PI;
     }
 
 
   /* Initialize the heaps. */
   for (i = 0; i < cquad_heapsize; i++)
     heap[i] = i;
@@ -2015,17 +2010,17 @@ Mathematical Software, Vol. 37, Issue 3,
             }
           ncdiff = sqrt (ncdiff);
           ivl->err = ncdiff * h;
           /* Check for divergence. */
           ivl->ndiv = iv->ndiv + (fabs (iv->c[0]) > 0
                                   && ivl->c[0] / iv->c[0] > 2);
           if (ivl->ndiv > ndiv_max && 2 * ivl->ndiv > ivl->rdepth)
             {
-              igral = copysign (octave_Inf, igral);
+              igral = gnulib::copysign (octave_Inf, igral);
               warning ("quadcc: divergent integral detected");
               break;
             }
 
           /* Compute the local integral. */
           ivl->igral = h * w * ivl->c[0];
 
 
@@ -2111,17 +2106,17 @@ Mathematical Software, Vol. 37, Issue 3,
             }
           ncdiff = sqrt (ncdiff);
           ivr->err = ncdiff * h;
           /* Check for divergence. */
           ivr->ndiv = iv->ndiv + (fabs (iv->c[0]) > 0
                                   && ivr->c[0] / iv->c[0] > 2);
           if (ivr->ndiv > ndiv_max && 2 * ivr->ndiv > ivr->rdepth)
             {
-              igral = copysign (octave_Inf, igral);
+              igral = gnulib::copysign (octave_Inf, igral);
               warning ("quadcc: divergent integral detected");
               break;
             }
 
           /* Compute the local integral. */
           ivr->igral = h * w * ivr->c[0];
 
 
