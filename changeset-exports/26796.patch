# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1551126458 0
#      Mon Feb 25 20:27:38 2019 +0000
# Node ID 45fc6505a803607888bc3130fae5e143c01292fb
# Parent  80f9bc7cdf74c6f31266d1d3d2d345b30c17d8dc
allow handles to methods created inside method or ctor to work (bug #45351)

* ov-fcn-handle.cc (make_fcn_handle): If currently inside a method or
constructor, check for methods of the current class before other
functions.

* test/bug-45351/bug-45351.tst, bug-45351/bug45351.m,
bug-45351/module.mk: New test files.
* test/module.mk: Update.

diff --git a/libinterp/octave-value/ov-fcn-handle.cc b/libinterp/octave-value/ov-fcn-handle.cc
--- a/libinterp/octave-value/ov-fcn-handle.cc
+++ b/libinterp/octave-value/ov-fcn-handle.cc
@@ -1558,19 +1558,32 @@ namespace octave
             break;
 
           case '|':
             tnm = "or";
             break;
           }
       }
 
+    octave::call_stack& cs = interp.get_call_stack();
+
+    std::string dispatch_class;
+    bool is_method_or_ctor_executing
+      = (cs.is_class_method_executing (dispatch_class)
+         || cs.is_class_constructor_executing (dispatch_class));
+
     octave::symbol_table& symtab = interp.get_symbol_table ();
 
-    octave_value f = symtab.find_function (tnm, octave_value_list ());
+    octave_value f;
+
+    if (is_method_or_ctor_executing)
+      f = symtab.find_method (tnm, dispatch_class);
+
+    if (f.is_undefined ())
+      f = symtab.find_function (tnm, octave_value_list ());
 
     octave_function *fptr = f.function_value (true);
 
     // Here we are just looking to see if FCN is a method or constructor
     // for any class.
     if (fptr && (fptr->is_subfunction () || fptr->is_private_function ()
                  || fptr->is_class_constructor ()
                  || fptr->is_classdef_constructor ()))
diff --git a/test/bug-45351/bug-45351.tst b/test/bug-45351/bug-45351.tst
new file mode 100644
--- /dev/null
+++ b/test/bug-45351/bug-45351.tst
@@ -0,0 +1,12 @@
+%!shared obj, h1, h2, h3
+%! obj = bug45351 ();
+%! [h1, h2, h3] = obj.get_handles ();
+%!assert <45351> (obj.bar (1), 'bug45351.foo: 1')
+%!assert <45351> (obj.bar (2), 'bug45351.foo: 2')
+%!assert <45351> (obj.bar (3), 'bug45351.foo: 3')
+%!assert <45351> (h1 (obj, 1), 'bug45351.foo: 1')
+%!assert <45351> (h2 (obj, 2), 'bug45351.foo: 2')
+%!assert <45351> (h3 (obj, 3), 'bug45351.foo: 3')
+%!error (obj.h1 (1))
+%!error (obj.h2 (2))
+%!error (obj.h3 (3))
diff --git a/test/bug-45351/bug45351.m b/test/bug-45351/bug45351.m
new file mode 100644
--- /dev/null
+++ b/test/bug-45351/bug45351.m
@@ -0,0 +1,37 @@
+classdef bug45351
+
+  properties (Hidden, SetAccess = protected)
+    h1 = [];% handle to function
+    h2 = [];% handle to function
+    h3 = [];% handle to function
+  end
+
+  methods
+    function self = bug45351 ()
+      self.h1 = @foo;
+      self.h2 = @(self, n) self.foo (n);
+      self.h3 = @(~, n) self.foo (n);
+    end
+    function [h1, h2, h3] = get_handles (self)
+      h1 = self.h1;
+      h2 = self.h2;
+      h3 = self.h3;
+    end
+    function r = bar (self, hnum)
+      switch (hnum)
+        case 1
+          r = self.h1 (self, hnum);
+        case 2
+          r = self.h2 (self, hnum);
+        case 3
+          r = self.h3 (self, hnum);
+      end
+    end
+  end
+
+  methods (Hidden, Access = protected)
+    function r = foo (self, n)
+      r = sprintf ('bug45351.foo: %d', n);
+    end
+  end
+end
diff --git a/test/bug-45351/module.mk b/test/bug-45351/module.mk
new file mode 100644
--- /dev/null
+++ b/test/bug-45351/module.mk
@@ -0,0 +1,5 @@
+bug_54995_TEST_FILES = \
+  %reldir%/bug45351.m \
+  %reldir%/bug-45351.tst
+
+TEST_FILES += $(bug_45351_TEST_FILES)
diff --git a/test/module.mk b/test/module.mk
--- a/test/module.mk
+++ b/test/module.mk
@@ -56,16 +56,17 @@ TEST_FILES += \
 DIRSTAMP_FILES += %reldir%/$(octave_dirstamp)
 
 include %reldir%/bug-35448/module.mk
 include %reldir%/bug-35881/module.mk
 include %reldir%/bug-36025/module.mk
 include %reldir%/bug-38236/module.mk
 include %reldir%/bug-38691/module.mk
 include %reldir%/bug-41723/module.mk
+include %reldir%/bug-45351/module.mk
 include %reldir%/bug-44940/module.mk
 include %reldir%/bug-46660/module.mk
 include %reldir%/bug-47680/module.mk
 include %reldir%/bug-49379/module.mk
 include %reldir%/bug-50014/module.mk
 include %reldir%/bug-50035/module.mk
 include %reldir%/bug-50716/module.mk
 include %reldir%/bug-51192/module.mk
