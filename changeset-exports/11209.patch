# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1289282269 18000
#      Tue Nov 09 00:57:49 2010 -0500
# Node ID 94d9d412a2a07b902b1df7830edd893933dca167
# Parent  a44ba1cdfbb557c850ab54278e6d4dcbff559a28
improve Matlab compatibility of rem and mod

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,12 @@
+2010-11-09  John W. Eaton  <jwe@octave.org>
+
+	* configure.ac: Don't check for trunc, copysign, or _copysign.
+
 2010-11-08  John W. Eaton  <jwe@octave.org>
 
 	* configure.ac (--without-opengl): New configure option.
 
 2010-11-03  John W. Eaton  <jwe@octave.org>
 
 	* bootstrap.conf (gnulib_modules): Include copysign in the list.
 
diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -1567,17 +1567,17 @@ fi
 AC_CHECK_FUNCS(basename canonicalize_file_name \
   chmod dup2 endgrent endpwent execvp expm1 expm1f fork \
   getegid geteuid getgid getgrent getgrgid getgrnam getpgrp getpid \
   getppid getpwent getpwuid getuid getwd _kbhit kill \
   lgamma lgammaf lgamma_r lgammaf_r localtime_r log1p log1pf \
   mkstemp pipe putenv \
   realpath resolvepath rindex roundl select setgrent setlocale \
   setpwent setvbuf siglongjmp \
-  strsignal tempnam tgammaf trunc umask \
+  strsignal tempnam tgammaf umask \
   uname utime waitpid \
   _chmod x_utime _utime32)
 
 AC_LANG_PUSH(C++)
 AC_CHECK_DECLS([exp2, round, tgamma], [], [], [[#include <cmath>]])
 AC_CHECK_FUNCS([exp2 round tgamma])
 AH_VERBATIM([Z_FUNCS_AND_DECLS], [
 #if defined (__cplusplus)
@@ -1739,18 +1739,18 @@ case "$canonical_host_type" in
     AC_MSG_NOTICE([defining SCO to be 1])
     AC_DEFINE(SCO, 1, [Define if using an SCO system.])
     AC_MSG_NOTICE([forcing HAVE_ISINF for SCO])
     AC_DEFINE(HAVE_ISINF, 1, [Define if you have isinf().])
     AC_MSG_NOTICE([forcing HAVE_ISNAN for SCO])
     AC_DEFINE(HAVE_ISNAN, 1, [Define if you have isnan().])
   ;;
   *)
-    AC_CHECK_FUNCS(finite isnan isinf copysign signbit)
-    AC_CHECK_FUNCS(_finite _isnan _copysign)
+    AC_CHECK_FUNCS(finite isnan isinf signbit)
+    AC_CHECK_FUNCS(_finite _isnan)
     AC_CHECK_DECLS(signbit, , , [#include <math.h>])
   ;;
 esac
 
 ### Check for nonstandard but common math functions that we need.
 
 AC_CHECK_FUNCS(acosh acoshf asinh asinhf atanh atanhf erf erff erfc erfcf exp2f log2 log2f)
 AC_CHECK_FUNCS(hypotf _hypotf cbrt cbrtf)
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,14 @@
+2010-11-09  John W. Eaton  <jwe@octave.org>
+
+	* lo-mappers.cc (xmod, xrem): New functions.
+	(mod): Delete.
+	* lo-mappers.h (xmod, xrem): Provide decls.
+
 2010-10-31  Michael Goffioul  <michael.goffioul@gmail.com>
 
 	* dim-vector.h (class dim_vector): tag with OCTAVE_API.
 
 2010-10-21  John W. Eaton  <jwe@octave.org>
 
 	* Makefile.am (INCS): Include lo-array-gripes.h in the list.
 	(LIBOCTAVE_CXX_SOURCES): Include lo-array-gripes.cc in the list.
diff --git a/liboctave/lo-mappers.cc b/liboctave/lo-mappers.cc
--- a/liboctave/lo-mappers.cc
+++ b/liboctave/lo-mappers.cc
@@ -102,23 +102,95 @@ signum (double x)
     tmp = -1.0;
   else if (x > 0.0)
     tmp = 1.0;
 
   return xisnan (x) ? octave_NaN : tmp;
 }
 
 double
-mod (double x, double y)
+xmod (double x, double y)
 {
+  double retval;
+
   if (y == 0)
-    return x;
+    retval = x;
+  else
+    {
+      double q = x / y;
+
+      double n = floor (q);
+
+      if (D_NINT (y) != y)
+        {
+          if (D_NINT (q) == q)
+            n = q;
+          else
+            {
+              if (x >= -1 && x <= 1)
+                {
+                  if (std::abs (q - D_NINT (q)) < DBL_EPSILON)
+                    n = D_NINT (q);
+                }
+              else
+                {
+                  if (std::abs ((q - D_NINT (q))/ D_NINT (q)) < DBL_EPSILON)
+                    n = D_NINT (q);
+                }
+            }
+        }
+
+      retval = x - y * n;
+    }
+
+  if (x != y && y != 0)
+    retval = copysignf (retval, y);
+
+  return retval;
+}
 
-  double r = fmod (x, y);
-  return ((r < 0) != (y < 0)) ? y+r : r;
+double
+xrem (double x, double y)
+{
+  double retval;
+
+  if (y == 0)
+    retval = x;
+  else
+    {
+      double q = x / y;
+
+      double n = trunc (q);
+
+      if (D_NINT (y) != y)
+        {
+          if (D_NINT (q) == q)
+            n = q;
+          else
+            {
+              if (x >= -1 && x <= 1)
+                {
+                  if (std::abs (q - D_NINT (q)) < DBL_EPSILON)
+                    n = D_NINT (q);
+                }
+              else
+                {
+                  if (std::abs ((q - D_NINT (q))/ D_NINT (q)) < DBL_EPSILON)
+                    n = D_NINT (q);
+                }
+            }
+        }
+
+      retval = x - y * n;
+    }
+
+  if (x != y && y != 0)
+    retval = copysignf (retval, x);
+
+  return retval;
 }
 
 double
 xlog2 (double x)
 {
 #if defined (HAVE_LOG2)
   return log2 (x);
 #else
@@ -391,23 +463,95 @@ signum (float x)
     tmp = -1.0;
   else if (x > 0.0)
     tmp = 1.0;
 
   return xisnan (x) ? octave_Float_NaN : tmp;
 }
 
 float
-mod (float x, float y)
+xmod (float x, float y)
 {
+  float retval;
+
   if (y == 0)
-    return x;
+    retval = x;
+  else
+    {
+      float q = x / y;
+
+      float n = floor (q);
+
+      if (F_NINT (y) != y)
+        {
+          if (F_NINT (q) == q)
+            n = q;
+          else
+            {
+              if (x >= -1 && x <= 1)
+                {
+                  if (std::abs (q - F_NINT (q)) < FLT_EPSILON)
+                    n = F_NINT (q);
+                }
+              else
+                {
+                  if (std::abs ((q - F_NINT (q))/ F_NINT (q)) < FLT_EPSILON)
+                    n = F_NINT (q);
+                }
+            }
+        }
+
+      retval = x - y * n;
+    }
+
+  if (x != y && y != 0)
+    retval = copysignf (retval, y);
+
+  return retval;
+}
 
-  float r = fmodf (x, y);
-  return ((r < 0) != (y < 0)) ? y+r : r;
+float
+xrem (float x, float y)
+{
+  float retval;
+
+  if (y == 0)
+    retval = x;
+  else
+    {
+      float q = x / y;
+
+      float n = truncf (q);
+
+      if (F_NINT (y) != y)
+        {
+          if (F_NINT (q) == q)
+            n = q;
+          else
+            {
+              if (x >= -1 && x <= 1)
+                {
+                  if (std::abs (q - F_NINT (q)) < FLT_EPSILON)
+                    n = F_NINT (q);
+                }
+              else
+                {
+                  if (std::abs ((q - F_NINT (q))/ F_NINT (q)) < FLT_EPSILON)
+                    n = F_NINT (q);
+                }
+            }
+        }
+
+      retval = x - y * n;
+    }
+
+  if (x != y && y != 0)
+    retval = copysignf (retval, x);
+
+  return retval;
 }
 
 float
 xlog2 (float x)
 {
 #if defined (HAVE_LOG2)
   return log2 (x);
 #else
diff --git a/liboctave/lo-mappers.h b/liboctave/lo-mappers.h
--- a/liboctave/lo-mappers.h
+++ b/liboctave/lo-mappers.h
@@ -33,17 +33,18 @@ extern OCTAVE_API double arg (double x);
 extern OCTAVE_API double conj (double x);
 extern OCTAVE_API double fix (double x);
 extern OCTAVE_API double imag (double x);
 extern OCTAVE_API double real (double x);
 extern OCTAVE_API double xround (double x);
 extern OCTAVE_API double xroundb (double x);
 extern OCTAVE_API double signum (double x);
 extern OCTAVE_API double xtrunc (double x);
-extern OCTAVE_API double mod (double x, double y);
+extern OCTAVE_API double xmod (double x, double y);
+extern OCTAVE_API double xrem (double x, double y);
 extern OCTAVE_API double xlog2 (double x); 
 extern OCTAVE_API Complex xlog2 (const Complex& x); 
 extern OCTAVE_API double xlog2 (double x, int& exp);
 extern OCTAVE_API Complex xlog2 (const Complex& x, int& exp);
 extern OCTAVE_API double xexp2 (double x);
 
 // These are used by the BOOL_OP macros in mx-op-defs.h.
 inline bool xisnan (bool) { return false; }
@@ -122,17 +123,18 @@ extern OCTAVE_API float arg (float x);
 extern OCTAVE_API float conj (float x);
 extern OCTAVE_API float fix (float x);
 extern OCTAVE_API float imag (float x);
 extern OCTAVE_API float real (float x);
 extern OCTAVE_API float xround (float x);
 extern OCTAVE_API float xroundb (float x);
 extern OCTAVE_API float signum (float x);
 extern OCTAVE_API float xtrunc (float x);
-extern OCTAVE_API float mod (float x, float y);
+extern OCTAVE_API float xmod (float x, float y);
+extern OCTAVE_API float xrem (float x, float y);
 extern OCTAVE_API float xlog2 (float x); 
 extern OCTAVE_API FloatComplex xlog2 (const FloatComplex& x); 
 extern OCTAVE_API float xlog2 (float x, int& exp);
 extern OCTAVE_API FloatComplex xlog2 (const FloatComplex& x, int& exp);
 extern OCTAVE_API float xexp2 (float x);
 
 #if defined (HAVE_CMATH_ISNANF)
 inline bool xisnan (float x)
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2010-11-09  John W. Eaton  <jwe@octave.org>
+
+	* gl-render.cc (make_marker_list): Call fmod instead of mod.
+
+	* data.cc (Frem): Use xrem instead of fmod and fmodf.
+	(Fmod): Use xmod instead of mod.
+
 2010-11-08  Kai Habel  <kai.habel@gmx.de>
 
 	* fltk-backend.cc (do_find_uimenu_children): Simplify code, Remove 
 	unused code. (update_submenu): Remove unused function.
 	(add_to_menu (uimenu::properties&)): Simplify code. Get properties for valid objects 
 	only. (add_to_menu (figure::properties&)): Dito.
 	(remove_from_menu (T_prop&)): Dito.
 
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -562,42 +562,42 @@ agree, or if either of the arguments is 
             }
           else
             error ("rem: cannot combine %s and %d", 
                    args(0).class_name ().c_str (), args(1).class_name ().c_str ());
         }
       else if (args(0).is_single_type () || args(1).is_single_type ())
         {
           if (args(0).is_scalar_type () && args(1).is_scalar_type ())
-            retval = fmodf (args(0).float_value (), args(1).float_value ());
+            retval = xrem (args(0).float_value (), args(1).float_value ());
           else
             {
               FloatNDArray a0 = args(0).float_array_value ();
               FloatNDArray a1 = args(1).float_array_value ();
-              retval = binmap<float> (a0, a1, fmodf, "rem");
+              retval = binmap<float> (a0, a1, xrem, "rem");
             }
         }
       else
         {
           bool a0_scalar = args(0).is_scalar_type ();
           bool a1_scalar = args(1).is_scalar_type ();
           if (a0_scalar && a1_scalar)
-            retval = fmod (args(0).scalar_value (), args(1).scalar_value ());
+            retval = xrem (args(0).scalar_value (), args(1).scalar_value ());
           else if ((a0_scalar || args(0).is_sparse_type ()) 
                    && (a1_scalar || args(1).is_sparse_type ()))
             {
               SparseMatrix m0 = args(0).sparse_matrix_value ();
               SparseMatrix m1 = args(1).sparse_matrix_value ();
-              retval = binmap<double> (m0, m1, fmod, "rem");
+              retval = binmap<double> (m0, m1, xrem, "rem");
             }
           else
             {
               NDArray a0 = args(0).array_value ();
               NDArray a1 = args(1).array_value ();
-              retval = binmap<double> (a0, a1, fmod, "rem");
+              retval = binmap<double> (a0, a1, xrem, "rem");
             }
         }
     }
   else
     print_usage ();
 
   return retval;
 }
@@ -695,42 +695,42 @@ either of the arguments is complex.\n\
             }
           else
             error ("mod: cannot combine %s and %d", 
                    args(0).class_name ().c_str (), args(1).class_name ().c_str ());
         }
       else if (args(0).is_single_type () || args(1).is_single_type ())
         {
           if (args(0).is_scalar_type () && args(1).is_scalar_type ())
-            retval = mod (args(0).float_value (), args(1).float_value ());
+            retval = xmod (args(0).float_value (), args(1).float_value ());
           else
             {
               FloatNDArray a0 = args(0).float_array_value ();
               FloatNDArray a1 = args(1).float_array_value ();
-              retval = binmap<float> (a0, a1, mod, "mod");
+              retval = binmap<float> (a0, a1, xmod, "mod");
             }
         }
       else
         {
           bool a0_scalar = args(0).is_scalar_type ();
           bool a1_scalar = args(1).is_scalar_type ();
           if (a0_scalar && a1_scalar)
-            retval = mod (args(0).scalar_value (), args(1).scalar_value ());
+            retval = xmod (args(0).scalar_value (), args(1).scalar_value ());
           else if ((a0_scalar || args(0).is_sparse_type ()) 
                    && (a1_scalar || args(1).is_sparse_type ()))
             {
               SparseMatrix m0 = args(0).sparse_matrix_value ();
               SparseMatrix m1 = args(1).sparse_matrix_value ();
-              retval = binmap<double> (m0, m1, mod, "mod");
+              retval = binmap<double> (m0, m1, xmod, "mod");
             }
           else
             {
               NDArray a0 = args(0).array_value ();
               NDArray a1 = args(1).array_value ();
-              retval = binmap<double> (a0, a1, mod, "mod");
+              retval = binmap<double> (a0, a1, xmod, "mod");
             }
         }
     }
   else
     print_usage ();
 
   return retval;
 }
diff --git a/src/gl-render.cc b/src/gl-render.cc
--- a/src/gl-render.cc
+++ b/src/gl-render.cc
@@ -3283,33 +3283,33 @@ opengl_renderer::make_marker_list (const
         double ang;
         double r;
         double dr = 1.0 - sin(M_PI/10)/sin(3*M_PI/10)*1.02;
   
         glBegin ((filled ? GL_POLYGON : GL_LINE_LOOP));
         for (int i = 0; i < 2*5; i++)
           {
             ang = (-0.5 + double(i+1)/5) * M_PI;
-            r = 1.0 - (dr * mod(double(i+1), 2.0));
+            r = 1.0 - (dr * fmod(double(i+1), 2.0));
             glVertex2d (sz*r*cos(ang)/2, sz*r*sin(ang)/2);
           }
         glEnd ();
       }
       break;
     case 'h':
       {
         double ang;
         double r;
         double dr = 1.0 - 0.5/sin(M_PI/3)*1.02;
   
         glBegin ((filled ? GL_POLYGON : GL_LINE_LOOP));
         for (int i = 0; i < 2*6; i++)
           {
             ang = (0.5 + double(i+1)/6.0) * M_PI;
-            r = 1.0 - (dr * mod(double(i+1), 2.0));
+            r = 1.0 - (dr * fmod(double(i+1), 2.0));
             glVertex2d (sz*r*cos(ang)/2, sz*r*sin(ang)/2);
           }
         glEnd ();
       }
       break;
     default:
       warning ("opengl_renderer: unsupported marker `%s'",
                marker.c_str ());
