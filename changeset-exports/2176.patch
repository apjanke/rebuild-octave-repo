# HG changeset patch
# User jwe
# Date 832004605 0
#      Mon May 13 16:23:25 1996 +0000
# Node ID 868d82fe5fdc79317edf6158bbc3641017f0db5a
# Parent  ceaecd0967f31a7ff26449fb135a5a03b101eac3
[project @ 1996-05-13 16:22:01 by jwe]

diff --git a/src/pt-plot.cc b/src/pt-plot.cc
--- a/src/pt-plot.cc
+++ b/src/pt-plot.cc
@@ -57,16 +57,26 @@ Software Foundation, 59 Temple Place - S
 #include "pt-cmd.h"
 #include "pt-exp.h"
 #include "pt-plot.h"
 #include "pt-walk.h"
 #include "sysdep.h"
 #include "user-prefs.h"
 #include "utils.h"
 
+// If TRUE, a replot command is issued automatically each time a plot
+// changes in some way.
+static bool Vautomatic_replot;
+
+// The name of the shell command to execute to start gnuplot.
+static string Vgnuplot_binary;
+
+// TRUE if gnuplot appears to support multiplot.
+static bool Vgnuplot_has_multiplot;
+
 // The number of lines we've plotted so far.
 static int plot_line_count = 0;
 
 // Is this a parametric plot?  Makes a difference for 3D plotting.
 static bool parametric_plot = false;
 
 // The gnuplot terminal type.
 static char *gnuplot_terminal_type = 0;
@@ -119,17 +129,17 @@ open_plot_stream (void)
     }
 
   if (! plot_stream)
     {
       initialized = false;
 
       plot_line_count = 0;
 
-      string plot_prog = user_pref.gnuplot_binary;
+      string plot_prog = Vgnuplot_binary;
 
       if (! plot_prog.empty ())
 	{
 	  plot_stream = new oprocstream (plot_prog.c_str ());
 
 	  if (plot_stream && ! *plot_stream)
 	    {
 	      delete plot_stream;
@@ -203,17 +213,17 @@ send_to_plot_stream (const char *cmd)
   if (plot_line_count == 0 && is_replot)
     error ("replot: no previous plot");
   else
     {
       *plot_stream << cmd;
 
       if (! (is_replot || is_splot || is_plot)
 	  && plot_line_count > 0
-	  && user_pref.automatic_replot)
+	  && Vautomatic_replot)
 	*plot_stream << GNUPLOT_COMMAND_REPLOT << "\n";
 
       plot_stream->flush ();
       pipe_handler_error_count = 0;
     }
 
   return 0;
 }
@@ -1035,13 +1045,66 @@ show plotting options")
   char *plot_command = plot_buf.str ();
   send_to_plot_stream (plot_command);
 
   delete [] plot_command;
 
   return retval;
 }
 
+static int
+automatic_replot (void)
+{
+  Vautomatic_replot = check_preference ("automatic_replot");
+
+  return 0;
+}
+
+int
+gnuplot_binary (void)
+{
+  int status = 0;
+
+  string s = builtin_string_variable ("gnuplot_binary");
+
+  if (s.empty ())
+    {
+      gripe_invalid_value_specified ("gnuplot_binary");
+      status = -1;
+    }
+  else
+    Vgnuplot_binary = s;
+
+  return status;
+}
+
+static int
+gnuplot_has_multiplot (void)
+{
+  Vgnuplot_has_multiplot = check_preference ("gnuplot_has_multiplot");
+
+  return 0;
+}
+
+void
+symbols_of_pt_plot (void)
+{
+  DEFVAR (automatic_replot, 0.0, 0, automatic_replot,
+    "if true, auto-insert a replot command when a plot changes");
+
+  DEFVAR (gnuplot_binary, "gnuplot", 0, gnuplot_binary,
+    "path to gnuplot binary");
+
+#ifdef GNUPLOT_HAS_MULTIPLOT
+  double with_multiplot = 1.0;
+#else
+  double with_multiplot = 0.0;
+#endif
+
+  DEFVAR (gnuplot_has_multiplot, with_multiplot, 0, gnuplot_has_multiplot,
+    "true if gnuplot supports multiplot, false otherwise");
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
