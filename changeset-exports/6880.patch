# HG changeset patch
# User dbateman
# Date 1189201196 0
#      Fri Sep 07 21:39:56 2007 +0000
# Node ID e00a8f661f06f359dd4a3d33417fcab0e228aa47
# Parent  28f3be713c1db9dca46c28b7929da4eedb72e60e
[project @ 2007-09-07 21:39:55 by dbateman]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,9 +1,14 @@
-2007-09-06  John W. Eaton  <jwe@octave.org>
+2007-09-06  David Bateman  <dbateman@free.fr>
+
+	* DLD-FUNCTIONS/__delaunay__.cc, DLD-FUNCRIONS/__voronoi__.cc,
+	DLD-FUNCTIONS/convhulln.cc: Avoid variables in global scope
+
+2007-09-06  David Bateman  <dbateman@free.fr>
 
 	* Makefile.in (stamp-prereq): Add graphics.h to the dependency list.
 
 2007-08-31  John W. Eaton  <jwe@octave.org>
 
 	* Makefile.in (INCLUDES): Remove graphics.h from the list.
 	(DISTFILES): Include graphics.h.in in the list.
 	(genprops.awk): New file.
diff --git a/src/DLD-FUNCTIONS/__delaunayn__.cc b/src/DLD-FUNCTIONS/__delaunayn__.cc
--- a/src/DLD-FUNCTIONS/__delaunayn__.cc
+++ b/src/DLD-FUNCTIONS/__delaunayn__.cc
@@ -51,19 +51,16 @@ 02110-1301, USA.
 #ifdef HAVE_QHULL
 extern "C" {
 #include <qhull/qhull_a.h>
 }
 
 #ifdef NEED_QHULL_VERSION
 char qh_version[] = "__delaunayn__.oct 2007-08-21";
 #endif
-FILE *outfile = stdout;
-FILE *errfile = stderr;
-char flags[250];
 #endif
 
 DEFUN_DLD (__delaunayn__, args, ,
 	   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{T} =} __delaunayn__ (@var{P}[, @var{opt}])\n\
 Internal function for delaunayn.\n\
 @end deftypefn")
 
@@ -123,28 +120,33 @@ Internal function for delaunayn.\n\
       {
 	error ("__delaunayn__: second argument must be a string, cell of stringsor empty");
 	return retval;
       }
     } 
 
   //octave_stdout << "options " << options << std::endl;
 
-  if (n > dim) 
+  if (n > dim + 1) 
     {
       p = p.transpose();
       double *pt_array = p.fortran_vec();
       boolT ismalloc = False;
 
+      OCTAVE_LOCAL_BUFFER (char, flags, 250);
+
       sprintf(flags,"qhull d %s",options.c_str());
 
       // If you want some debugging information replace the NULL
       // pointer with outfile.
 
-      int exitcode =  qh_new_qhull (dim, n, pt_array, ismalloc,flags, 
+      FILE *outfile = stdout;
+      FILE *errfile = stderr;
+
+      int exitcode =  qh_new_qhull (dim, n, pt_array, ismalloc, flags, 
 				    NULL, errfile);
 
       if (exitcode)
 	{
 	  error("__delaunayn__: qhull failed.");
 	  return retval;
 	}
 
diff --git a/src/DLD-FUNCTIONS/__voronoi__.cc b/src/DLD-FUNCTIONS/__voronoi__.cc
--- a/src/DLD-FUNCTIONS/__voronoi__.cc
+++ b/src/DLD-FUNCTIONS/__voronoi__.cc
@@ -41,21 +41,16 @@ qhull command
 #ifdef HAVE_QHULL
 extern "C" {
 #include <qhull/qhull_a.h>
 }
 
 #ifdef NEED_QHULL_VERSION
 char qh_version[] = "__voronoi__.oct 2007-07-24";
 #endif
-
-FILE *outfile = stdout;
-FILE *errfile = stderr;
-char flags[250];
-const char *options;
 #endif
 
 DEFUN_DLD (__voronoi__, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{tri} =} __voronoi__ (@var{point})\n\
 @deftypefnx {Loadable Function} {@var{tri} =} __voronoi__ (@var{point}, @var{options})\n\
 Internal function for voronoi.\n\
 @end deftypefn")
@@ -66,16 +61,18 @@ Internal function for voronoi.\n\
 
   int nargin = args.length();
   if (nargin < 1 || nargin > 2) 
     {
       print_usage ();
       return retval;
     }
 
+  const char *options;
+
   if (nargin == 2) 
     {
       if (!args (1).is_string ()) 
 	{
 	  error ("__voronoi__: second argument must be a string");
 	  return retval;
 	}
       options = args (1).string_value().c_str();
@@ -96,18 +93,26 @@ Internal function for voronoi.\n\
   //    for (int j = 0; j < dim; j++)
   //	  {
   //	    pt_array[j+i*dim] = p(i,j);
   //	  }
   //  }
 
   boolT ismalloc = false;
 
+  OCTAVE_LOCAL_BUFFER(char, flags, 250);
+
   // hmm  lot's of options for qhull here
   sprintf(flags,"qhull v Fv T0 %s",options);
+
+  // If you want some debugging information replace the NULL
+  // pointer with outfile.
+  FILE *outfile = stdout;
+  FILE *errfile = stderr;
+
   if (!qh_new_qhull (dim, np, pt_array, ismalloc, flags, NULL, errfile)) 
     {
 
       // If you want some debugging information replace the NULL
       // pointer with outfile.
       facetT *facet;
       vertexT *vertex;
 
diff --git a/src/DLD-FUNCTIONS/convhulln.cc b/src/DLD-FUNCTIONS/convhulln.cc
--- a/src/DLD-FUNCTIONS/convhulln.cc
+++ b/src/DLD-FUNCTIONS/convhulln.cc
@@ -45,17 +45,16 @@ 2006-05-01 Tom Holroyd
 
 extern "C" {
 #include <qhull/qhull_a.h>
 }
 
 #ifdef NEED_QHULL_VERSION
 char qh_version[] = "convhulln.oct 2007-07-24";
 #endif
-char flags[250];
 #endif
 
 DEFUN_DLD (convhulln, args, ,
 	"-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{H} =} convhulln (@var{p})\n\
 @deftypefnx {Loadable Function} {@var{H} =} convhulln (@var{p}, @var{opt})\n\
 Returns an index vector to the points of the enclosing convex hull.\n\
 The input matrix of size [n, dim] contains n points of dimension dim.\n\n\
@@ -111,16 +110,18 @@ are \"s Qci Tcv\".\n\n\
   const octave_idx_type dim = p.columns();
   const octave_idx_type n = p.rows();
   p = p.transpose();
 
   double *pt_array = p.fortran_vec();
 
   boolT ismalloc = False;
 
+  OCTAVE_LOCAL_BUFFER (char, flags, 250);
+
   // hmm, lots of options for qhull here
   // QJ guarantees that the output will be triangles
   snprintf(flags, sizeof(flags), "qhull QJ %s", options.c_str());
 
   if (!qh_new_qhull (dim, n, pt_array, ismalloc, flags, NULL, stderr)) 
     {
       // If you want some debugging information replace the NULL
       // pointer with stdout
