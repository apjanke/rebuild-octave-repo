# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1443892828 14400
#      Sat Oct 03 13:20:28 2015 -0400
# Node ID c547458dc10e48169594b6dcdb1b99aa5490388c
# Parent  0fc9b572e566694ad6902c6b03c033e72289b061
eliminate error_state from most header files

* defun-int.h, event-queue.h, graphics.in.h, oct-handle.h,
ov-classdef.h, misc/f77-fcn.h, unwind-prot.h:
Eliminate use of global error_state variable.

diff --git a/libinterp/corefcn/defun-int.h b/libinterp/corefcn/defun-int.h
--- a/libinterp/corefcn/defun-int.h
+++ b/libinterp/corefcn/defun-int.h
@@ -98,31 +98,24 @@ typedef octave_function *
   DEFINE_FUNX_INSTALLER_FUN(#name, F ## name, G ## name, doc)
 
 #define DEFINE_FUNX_INSTALLER_FUN(name, fname, gname, doc) \
   extern "C" \
   OCTAVE_EXPORT \
   octave_function * \
   gname (const octave_shlib& shl, bool relative) \
   { \
-    octave_function *retval = 0; \
- \
     check_version (OCTAVE_API_VERSION, name); \
  \
-    if (! error_state) \
-      { \
-        octave_dld_function *fcn = octave_dld_function::create (fname, shl, name, doc); \
+    octave_dld_function *fcn = octave_dld_function::create (fname, shl, name, doc); \
  \
-        if (relative) \
-          fcn->mark_relative (); \
+    if (relative) \
+      fcn->mark_relative (); \
  \
-        retval = fcn; \
-      } \
- \
-    return retval; \
+    return fcn; \
   }
 
 // MAKE_BUILTINS is defined to extract function names and related
 // information and create the *.df files that are eventually used to
 // create the builtins.cc file.
 
 #if defined (MAKE_BUILTINS)
 
diff --git a/libinterp/corefcn/event-queue.h b/libinterp/corefcn/event-queue.h
--- a/libinterp/corefcn/event-queue.h
+++ b/libinterp/corefcn/event-queue.h
@@ -31,18 +31,18 @@ along with Octave; see the file COPYING.
 class
 event_queue : public action_container
 {
 public:
 
   event_queue (void) : fifo () { }
 
   // Destructor should not raise an exception, so all actions
-  // registered should be exception-safe (but setting error_state is
-  // allowed). If you're not sure, see event_queue_safe.
+  // registered should be exception-safe.  If you're not sure, see
+  // event_queue_safe.
 
   ~event_queue (void) { run (); }
 
   void add (elem *new_elem)
   {
     fifo.push (new_elem);
   }
 
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -713,24 +713,19 @@ public:
         octave_value tmp = c(i);
 
         if (tmp.is_string ())
           value[i] = c(i).string_value ();
         else
           {
             double d = c(i).double_value ();
 
-            if (! error_state)
-              {
-                std::ostringstream buf;
-                buf << d;
-                value[i] = buf.str ();
-              }
-            else
-              break;
+            std::ostringstream buf;
+            buf << d;
+            value[i] = buf.str ();
           }
       }
   }
 
   text_label_property (const text_label_property& p)
     : base_property (p), value (p.value), stored_type (p.stored_type)
   { }
 
@@ -790,55 +785,50 @@ protected:
             octave_value tmp = c(i);
 
             if (tmp.is_string ())
               value[i] = c(i).string_value ();
             else
               {
                 double d = c(i).double_value ();
 
-                if (! error_state)
-                  {
-                    std::ostringstream buf;
-                    buf << d;
-                    value[i] = buf.str ();
-                  }
-                else
-                  return false;
+                std::ostringstream buf;
+                buf << d;
+                value[i] = buf.str ();
               }
           }
 
         stored_type = cellstr_t;
       }
     else
       {
-        NDArray nda = val.array_value ();
-
-        if (! error_state)
+        NDArray nda;
+
+        try
           {
-            octave_idx_type nel = nda.numel ();
-
-            value.resize (nel);
-
-            for (octave_idx_type i = 0; i < nel; i++)
-              {
-                std::ostringstream buf;
-                buf << nda(i);
-                value[i] = buf.str ();
-              }
-
-            stored_type = char_t;
+            nda = val.array_value ();
           }
-        else
+        catch (const octave_execution_exception&)
           {
             error ("set: invalid string property value for \"%s\"",
                    get_name ().c_str ());
-
-            return false;
           }
+
+        octave_idx_type nel = nda.numel ();
+
+        value.resize (nel);
+
+        for (octave_idx_type i = 0; i < nel; i++)
+          {
+            std::ostringstream buf;
+            buf << nda(i);
+            value[i] = buf.str ();
+          }
+
+        stored_type = char_t;
       }
 
     return true;
   }
 
 private:
   string_vector value;
   type stored_type;
@@ -1483,33 +1473,28 @@ public:
     return p;
   }
 
 protected:
   bool do_set (const octave_value& v)
   {
     bool retval = array_property::do_set (v);
 
-    if (! error_state)
+    dim_vector dv = data.dims ();
+
+    if (dv(0) > 1 && dv(1) == 1)
       {
-        dim_vector dv = data.dims ();
-
-        if (dv(0) > 1 && dv(1) == 1)
-          {
-            int tmp = dv(0);
-            dv(0) = dv(1);
-            dv(1) = tmp;
-
-            data = data.reshape (dv);
-          }
-
-        return retval;
+        int tmp = dv(0);
+        dv(0) = dv(1);
+        dv(1) = tmp;
+
+        data = data.reshape (dv);
       }
 
-    return false;
+    return retval;
   }
 
 private:
   OCTINTERP_API bool validate (const octave_value& v);
 };
 
 // ---------------------------------------------------------------------
 
@@ -1707,52 +1692,53 @@ public:
 private:
   typedef std::list<double>::iterator children_list_iterator;
   typedef std::list<double>::const_iterator const_children_list_iterator;
   std::list<double> children_list;
 
 protected:
   bool do_set (const octave_value& val)
   {
-    const Matrix new_kids = val.matrix_value ();
+    Matrix new_kids;
+
+    try
+      {
+        new_kids = val.matrix_value ();
+      }
+    catch (const octave_execution_exception&)
+      {
+        error ("set: expecting children to be array of graphics handles");
+      }
 
     octave_idx_type nel = new_kids.numel ();
 
     const Matrix new_kids_column = new_kids.reshape (dim_vector (nel, 1));
 
     bool is_ok = true;
     bool add_hidden = true;
 
-    if (! error_state)
+    const Matrix visible_kids = do_get_children (false);
+
+    if (visible_kids.numel () == new_kids.numel ())
       {
-        const Matrix visible_kids = do_get_children (false);
-
-        if (visible_kids.numel () == new_kids.numel ())
-          {
-            Matrix t1 = visible_kids.sort ();
-            Matrix t2 = new_kids_column.sort ();
-            Matrix t3 = get_hidden ().sort ();
-
-            if (t1 != t2)
-              is_ok = false;
-
-            if (t1 == t3)
-              add_hidden = false;
-          }
-        else
+        Matrix t1 = visible_kids.sort ();
+        Matrix t2 = new_kids_column.sort ();
+        Matrix t3 = get_hidden ().sort ();
+
+        if (t1 != t2)
           is_ok = false;
 
-        if (! is_ok)
-          error ("set: new children must be a permutation of existing children");
+        if (t1 == t3)
+          add_hidden = false;
       }
     else
-      {
-        is_ok = false;
-        error ("set: expecting children to be array of graphics handles");
-      }
+      is_ok = false;
+
+    if (! is_ok)
+      error ("set: new children must be a permutation of existing children");
 
     if (is_ok)
       {
         Matrix tmp = new_kids_column;
 
         if (add_hidden)
           tmp.stack (get_hidden ());
 
@@ -3390,38 +3376,31 @@ public:
 
       return toolkit;
     }
 
     void set_toolkit (const graphics_toolkit& b);
 
     void set___graphics_toolkit__ (const octave_value& val)
     {
-      if (! error_state)
+      if (val.is_string ())
         {
-          if (val.is_string ())
+          std::string nm = val.string_value ();
+          graphics_toolkit b = gtk_manager::find_toolkit (nm);
+
+          if (b.get_name () != nm)
+            error ("set___graphics_toolkit__: invalid graphics toolkit");
+          else if (nm != get___graphics_toolkit__ ())
             {
-              std::string nm = val.string_value ();
-              graphics_toolkit b = gtk_manager::find_toolkit (nm);
-              if (b.get_name () != nm)
-                {
-                  error ("set___graphics_toolkit__: invalid graphics toolkit");
-                }
-              else
-                {
-                  if (nm != get___graphics_toolkit__ ())
-                    {
-                      set_toolkit (b);
-                      mark_modified ();
-                    }
-                }
+              set_toolkit (b);
+              mark_modified ();
             }
-          else
-            error ("set___graphics_toolkit__ must be a string");
         }
+      else
+        error ("set___graphics_toolkit__ must be a string");
     }
 
     void adopt (const graphics_handle& h);
 
     void set_position (const octave_value& val,
                        bool do_notify_toolkit = true);
 
     void set_outerposition (const octave_value& val,
@@ -4510,37 +4489,34 @@ class OCTINTERP_API text : public base_g
 public:
   class OCTINTERP_API properties : public base_properties
   {
   public:
     double get_fontsize_points (double box_pix_height = 0) const;
 
     void set_position (const octave_value& val)
     {
-      if (! error_state)
+      octave_value new_val (val);
+
+      if (new_val.numel () == 2)
         {
-          octave_value new_val (val);
-
-          if (new_val.numel () == 2)
-            {
-              dim_vector dv (1, 3);
-
-              new_val = new_val.resize (dv, true);
-            }
-
-          if (position.set (new_val, false))
-            {
-              set_positionmode ("manual");
-              update_position ();
-              position.run_listeners (POSTSET);
-              mark_modified ();
-            }
-          else
-            set_positionmode ("manual");
+          dim_vector dv (1, 3);
+
+          new_val = new_val.resize (dv, true);
         }
+
+      if (position.set (new_val, false))
+        {
+          set_positionmode ("manual");
+          update_position ();
+          position.run_listeners (POSTSET);
+          mark_modified ();
+        }
+      else
+        set_positionmode ("manual");
     }
 
     // See the genprops.awk script for an explanation of the
     // properties declarations.
 
     BEGIN_PROPERTIES (text)
       color_property backgroundcolor , color_property (radio_values ("{none}"), color_values (1, 1, 1))
       color_property color u , color_values (0, 0, 0)
@@ -6091,18 +6067,17 @@ public:
         gh_manager::auto_lock lock;
 
         graphics_object go = get_object (h);
 
         if (go.valid_object ())
           cb = go.get (name);
       }
 
-    if (! error_state)
-      execute_callback (h, cb, data);
+    execute_callback (h, cb, data);
   }
 
   static void execute_callback (const graphics_handle& h,
                                 const octave_value& cb,
                                 const octave_value& data = Matrix ())
   {
     if (instance_ok ())
       instance->do_execute_callback (h, cb, data);
diff --git a/libinterp/corefcn/oct-handle.h b/libinterp/corefcn/oct-handle.h
--- a/libinterp/corefcn/oct-handle.h
+++ b/libinterp/corefcn/oct-handle.h
@@ -37,22 +37,24 @@ public:
 
   octave_handle (const octave_value& a)
     : val (octave_NaN)
   {
     if (a.is_empty ())
       /* do nothing */;
     else
       {
-        double tval = a.double_value ();
-
-        if (! error_state)
-          val = tval;
-        else
-          error ("invalid handle");
+        try
+          {
+            val = a.double_value ();
+          }
+        catch (const octave_execution_exception&)
+          {
+            error ("invalid handle");
+          }
       }
   }
 
   octave_handle (int a) : val (a) { }
 
   octave_handle (double a) : val (a) { }
 
   octave_handle (const octave_handle& a) : val (a.val) { }
diff --git a/libinterp/octave-value/ov-classdef.h b/libinterp/octave-value/ov-classdef.h
--- a/libinterp/octave-value/ov-classdef.h
+++ b/libinterp/octave-value/ov-classdef.h
@@ -1203,29 +1203,29 @@ cdef_object_base::set_class (const cdef_
 
 inline void
 cdef_object_base::register_object (void)
 {
   if (klass.ok ())
     {
       cdef_class cls (get_class ());
 
-      if (! error_state && cls.ok ())
+      if (cls.ok ())
         cls.register_object ();
     }
 }
 
 inline void
 cdef_object_base::unregister_object (void)
 {
   if (klass.ok ())
     {
       cdef_class cls (get_class ());
 
-      if (! error_state && cls.ok ())
+      if (cls.ok ())
         cls.unregister_object ();
     }
 }
 
 inline cdef_object_rep*
 cdef_object_base::make_array (void) const
 {
   cdef_object_rep* r = new cdef_object_array ();
diff --git a/liboctave/cruft/misc/f77-fcn.h b/liboctave/cruft/misc/f77-fcn.h
--- a/liboctave/cruft/misc/f77-fcn.h
+++ b/liboctave/cruft/misc/f77-fcn.h
@@ -40,18 +40,17 @@ extern "C" {
     ("exception encountered in Fortran subroutine %s", \
      STRINGIZE (F77_FUNC (f, F)))
 
 /* This can be used to call a Fortran subroutine that might call
    XSTOPX.  XSTOPX will call lonjmp with current_context.  Once back
    here, we'll restore the previous context and return.  We may also
    end up here if an interrupt is processed when the Fortran
    subroutine is called.  In that case, we resotre the context and go
-   to the top level.  The error_state should be checked immediately
-   after this macro is used. */
+   to the top level. */
 
 #define F77_XFCN(f, F, args) \
   do \
     { \
       octave_jmp_buf saved_context; \
       sig_atomic_t saved_octave_interrupt_immediately = octave_interrupt_immediately; \
       f77_exception_encountered = 0; \
       octave_save_current_context (saved_context); \
diff --git a/liboctave/util/unwind-prot.h b/liboctave/util/unwind-prot.h
--- a/liboctave/util/unwind-prot.h
+++ b/liboctave/util/unwind-prot.h
@@ -35,18 +35,18 @@ class
 OCTAVE_API
 unwind_protect : public action_container
 {
 public:
 
   unwind_protect (void) : lifo () { }
 
   // Destructor should not raise an exception, so all actions
-  // registered should be exception-safe (but setting error_state is
-  // allowed). If you're not sure, see unwind_protect_safe.
+  // registered should be exception-safe.  If you're not sure, see
+  // unwind_protect_safe.
 
   ~unwind_protect (void) { run (); }
 
   virtual void add (elem *new_elem)
   {
     lifo.push (new_elem);
   }
 
