# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1225295530 -3600
#      Wed Oct 29 16:52:10 2008 +0100
# Node ID 25bc2d31e1bfa765f01279c7eb2a32a997c263cd
# Parent  c43481a19bfe496accc54fd2f57c7dd0993acbe6
improve OCTAVE_LOCAL_BUFFER

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,13 @@
+2008-10-29  Jaroslav Hajek  <highegg@gmail.com>
+
+	* configure.in: Remove the OCTAVE_LOCAL_BUFFER stuff (moved to
+	liboctave).
+
 2008-12-04  Jaroslav Hajek  <highegg@gmail.com>
 
 	* NEWS: Document more new features.
 
 2008-12-03  John W. Eaton  <jwe@octave.org>
 
 	* config.guess, config.sub: Update from FSF sources.
 
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -1927,42 +1927,16 @@ typedef int sig_atomic_t;
 #define OCTAVE_USE_WINDOWS_API 1
 #endif
 
 /* sigsetjmp is a macro, not a function. */
 #if defined (sigsetjmp) && defined (HAVE_SIGLONGJMP)
 #define OCTAVE_HAVE_SIG_JUMP
 #endif
 
-/* Always use vector<T>, since we sometimes allocate large chunks
-   of memory and that can cause trouble due to stack size limits.
-
-   Note that using auto_ptr is not appropriate because it uses delete,
-   not delete[] and we need the latter to properly handle arrays
-   allocated with new[size].
-
-   Use < T > instead of <T> to avoid problems if T is a template type
-   (say, foo<int>) and the preprocessor fails to insert a space and
-   generates <foo<int>>.
-
-#if defined (HAVE_DYNAMIC_AUTO_ARRAYS)
-
-#define OCTAVE_LOCAL_BUFFER(T, buf, size) \
-  T buf[size]
-
-#else
-
-*/
-
-#define OCTAVE_LOCAL_BUFFER(T, buf, size) \
-  std::vector< T > buf ## _vector (size); \
-  T *buf = ((size) > 0 ? &(buf ## _vector[0]) : 0)
-
-/* #endif */
-
 #if defined (__DECCXX)
 #define __USE_STD_IOSTREAM
 #endif
 
 #if defined (_UNICOS)
 #define F77_USES_CRAY_CALLING_CONVENTION
 #endif
 
diff --git a/liboctave/Array-d.cc b/liboctave/Array-d.cc
--- a/liboctave/Array-d.cc
+++ b/liboctave/Array-d.cc
@@ -25,16 +25,17 @@ along with Octave; see the file COPYING.
 #include <config.h>
 #endif
 
 // Instantiate Arrays of double values.
 
 #include "Array.h"
 #include "Array.cc"
 #include "oct-sort.cc"
+#include "oct-locbuf.h"
 
 #if defined (HAVE_IEEE754_DATA_FORMAT)
 
 static inline uint64_t
 FloatFlip (uint64_t f)
 {
   uint64_t mask
     = -static_cast<int64_t>(f >> 63) | 0x8000000000000000ULL;
diff --git a/liboctave/Array-f.cc b/liboctave/Array-f.cc
--- a/liboctave/Array-f.cc
+++ b/liboctave/Array-f.cc
@@ -25,16 +25,17 @@ along with Octave; see the file COPYING.
 #include <config.h>
 #endif
 
 // Instantiate Arrays of float values.
 
 #include "Array.h"
 #include "Array.cc"
 #include "oct-sort.cc"
+#include "oct-locbuf.h"
 
 #if defined (HAVE_IEEE754_DATA_FORMAT)
 
 static inline uint32_t
 FloatFlip (uint32_t f)
 {
   uint32_t mask
     = -static_cast<int32_t>(f >> 31) | 0x80000000UL;
diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -35,16 +35,17 @@ along with Octave; see the file COPYING.
 #include <vector>
 #include <algorithm>
 #include <new>
 
 #include "Array.h"
 #include "Array-util.h"
 #include "idx-vector.h"
 #include "lo-error.h"
+#include "oct-locbuf.h"
 
 // One dimensional array class.  Handles the reference counting for
 // all the derived classes.
 
 template <class T>
 Array<T>::Array (const Array<T>& a, const dim_vector& dv)
   : rep (a.rep), dimensions (dv)
 {
diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -42,16 +42,17 @@ along with Octave; see the file COPYING.
 #include "CmplxAEPBAL.h"
 #include "DET.h"
 #include "CmplxSCHUR.h"
 #include "CmplxSVD.h"
 #include "CmplxCHOL.h"
 #include "f77-fcn.h"
 #include "functor.h"
 #include "lo-error.h"
+#include "oct-locbuf.h"
 #include "lo-ieee.h"
 #include "lo-mappers.h"
 #include "lo-utils.h"
 #include "mx-base.h"
 #include "mx-cm-dm.h"
 #include "mx-dm-cm.h"
 #include "mx-cm-s.h"
 #include "mx-inlines.cc"
diff --git a/liboctave/CNDArray.cc b/liboctave/CNDArray.cc
--- a/liboctave/CNDArray.cc
+++ b/liboctave/CNDArray.cc
@@ -31,16 +31,17 @@ along with Octave; see the file COPYING.
 
 #include "Array-util.h"
 #include "CNDArray.h"
 #include "mx-base.h"
 #include "f77-fcn.h"
 #include "functor.h"
 #include "lo-ieee.h"
 #include "lo-mappers.h"
+#include "oct-locbuf.h"
 
 #if defined (HAVE_FFTW3)
 #include "oct-fftw.h"
 #else
 extern "C"
 {
   // Note that the original complex fft routines were not written for
   // double complex arguments.  They have been modified by adding an
diff --git a/liboctave/CSparse.cc b/liboctave/CSparse.cc
--- a/liboctave/CSparse.cc
+++ b/liboctave/CSparse.cc
@@ -30,16 +30,17 @@ along with Octave; see the file COPYING.
 #include <iostream>
 #include <vector>
 
 #include "quit.h"
 #include "lo-ieee.h"
 #include "lo-mappers.h"
 #include "f77-fcn.h"
 #include "dRowVector.h"
+#include "oct-locbuf.h"
 
 #include "CSparse.h"
 #include "boolSparse.h"
 #include "dSparse.h"
 #include "functor.h"
 #include "oct-spparms.h"
 #include "SparseCmplxLU.h"
 #include "oct-sparse.h"
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,20 @@
+2008-10-29  Jaroslav Hajek  <highegg@gmail.com>
+
+	* oct-locbuf.h: New header file.
+	* Array-d.cc, Array-f.cc, Array.cc, CMatrix.cc, CNDArray.cc,
+	CSparse.cc, CmplxCHOL.cc, CmplxGEPBAL.cc, MatrixType.cc,
+	Sparse-op-defs.h, Sparse.cc, SparseCmplxLU.cc, SparseCmplxQR.cc,
+	SparseQR.cc, SparsedbleLU.cc, dMatrix.cc, dNDArray.cc, dSparse.cc,
+	data-conv.cc, dbleCHOL.cc, dbleGEPBAL.cc, fCMatrix.cc, fCNDArray.cc,
+	fCmplxCHOL.cc, fCmplxGEPBAL.cc, fMatrix.cc, fNDArray.cc, file-ops.cc,
+	floatCHOL.cc, floatGEPBAL.cc, lo-sysdep.cc, oct-fftw.cc, oct-md5.cc,
+	oct-rand.cc, regex-match.cc, sparse-dmsolve.cc: Include oct-locbuf.h.
+
 2008-12-04  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DiagArray2.h (DiagArray2<T>): Inherit Array<T> privately.
 	(DiagArray2<T>::dim1, dim2, rows, columns, cols, length,
 	nelem, numel, byte_size, dims): New methods.
 	(DiagArray2<T>::diag): New method decl.
 	* DiagArray2.cc (DiagArray2<T>::diag): New method.
 	* MDiagArray2.h (MDiagArray2<T>::diag): New method.
diff --git a/liboctave/CmplxCHOL.cc b/liboctave/CmplxCHOL.cc
--- a/liboctave/CmplxCHOL.cc
+++ b/liboctave/CmplxCHOL.cc
@@ -29,16 +29,17 @@ along with Octave; see the file COPYING.
 
 #include <vector>
 
 #include "dMatrix.h"
 #include "dRowVector.h"
 #include "CmplxCHOL.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
+#include "oct-locbuf.h"
 
 extern "C"
 {
   F77_RET_T
   F77_FUNC (zpotrf, ZPOTRF) (F77_CONST_CHAR_ARG_DECL, const octave_idx_type&,
 			     Complex*, const octave_idx_type&, octave_idx_type&
 			     F77_CHAR_ARG_LEN_DECL);
   F77_RET_T
diff --git a/liboctave/CmplxGEPBAL.cc b/liboctave/CmplxGEPBAL.cc
--- a/liboctave/CmplxGEPBAL.cc
+++ b/liboctave/CmplxGEPBAL.cc
@@ -26,16 +26,17 @@ along with Octave; see the file COPYING.
 #endif
 
 #include <string>
 #include <vector>
 
 #include "CmplxGEPBAL.h"
 #include "Array-util.h"
 #include "f77-fcn.h"
+#include "oct-locbuf.h"
 
 extern "C"
 {
   F77_RET_T
   F77_FUNC (zggbal, ZGGBAL) (F77_CONST_CHAR_ARG_DECL, const octave_idx_type& N,
 			     Complex* A, const octave_idx_type& LDA, Complex* B,
 			     const octave_idx_type& LDB, octave_idx_type& ILO, octave_idx_type& IHI,
 			     double* LSCALE, double* RSCALE,
diff --git a/liboctave/MatrixType.cc b/liboctave/MatrixType.cc
--- a/liboctave/MatrixType.cc
+++ b/liboctave/MatrixType.cc
@@ -28,16 +28,17 @@ along with Octave; see the file COPYING.
 #include <vector>
 
 #include "MatrixType.h"
 #include "dMatrix.h"
 #include "CMatrix.h"
 #include "dSparse.h"
 #include "CSparse.h"
 #include "oct-spparms.h"
+#include "oct-locbuf.h"
 
 // FIXME There is a large code duplication here
 
 MatrixType::MatrixType (void)
   : typ (MatrixType::Unknown), 
     sp_bandden (octave_sparse_params::get_bandden()),
     bandden (0), upper_band (0), 
     lower_band (0), dense (false), full (false), nperm (0), perm (0) { }
diff --git a/liboctave/Sparse-op-defs.h b/liboctave/Sparse-op-defs.h
--- a/liboctave/Sparse-op-defs.h
+++ b/liboctave/Sparse-op-defs.h
@@ -22,16 +22,17 @@ along with Octave; see the file COPYING.
 
 */
 
 #if !defined (octave_sparse_op_defs_h)
 #define octave_sparse_op_defs_h 1
 
 #include "Array-util.h"
 #include "mx-ops.h"
+#include "oct-locbuf.h"
 
 #define SPARSE_BIN_OP_DECL(R, OP, X, Y, API) \
   extern API R OP (const X&, const Y&)
 
 #define SPARSE_CMP_OP_DECL(OP, X, Y, API) \
   extern API SparseBoolMatrix OP (const X&, const Y&)
 
 #define SPARSE_BOOL_OP_DECL(OP, X, Y, API) \
diff --git a/liboctave/Sparse.cc b/liboctave/Sparse.cc
--- a/liboctave/Sparse.cc
+++ b/liboctave/Sparse.cc
@@ -34,16 +34,17 @@ along with Octave; see the file COPYING.
 #include <vector>
 
 #include "Array.h"
 #include "Array-util.h"
 #include "Range.h"
 #include "idx-vector.h"
 #include "lo-error.h"
 #include "quit.h"
+#include "oct-locbuf.h"
 
 #include "Sparse.h"
 #include "sparse-sort.h"
 #include "oct-spparms.h"
 
 template <class T>
 T&
 Sparse<T>::SparseRep::elem (octave_idx_type _r, octave_idx_type _c)
diff --git a/liboctave/SparseCmplxLU.cc b/liboctave/SparseCmplxLU.cc
--- a/liboctave/SparseCmplxLU.cc
+++ b/liboctave/SparseCmplxLU.cc
@@ -23,16 +23,17 @@ along with Octave; see the file COPYING.
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <vector>
 
 #include "lo-error.h"
+#include "oct-locbuf.h"
 
 #include "SparseCmplxLU.h"
 #include "oct-spparms.h"
 
 // Instantiate the base LU class for the types we need.
 
 #include "sparse-base-lu.h"
 #include "sparse-base-lu.cc"
diff --git a/liboctave/SparseCmplxQR.cc b/liboctave/SparseCmplxQR.cc
--- a/liboctave/SparseCmplxQR.cc
+++ b/liboctave/SparseCmplxQR.cc
@@ -22,16 +22,17 @@ along with Octave; see the file COPYING.
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 #include <vector>
 
 #include "lo-error.h"
 #include "SparseCmplxQR.h"
+#include "oct-locbuf.h"
 
 #if defined(CS_VER) && (((CS_VER == 2) && (CS_SUBVER < 2)) || (CS_VER < 2))
 typedef double _Complex cs_complex_t;
 
 // Why did g++ 4.x stl_vector.h make
 //   OCTAVE_LOCAL_BUFFER (cs_complex_t, buf, n)
 // an error ?
 #define OCTAVE_C99_COMPLEX(buf, n) \
diff --git a/liboctave/SparseQR.cc b/liboctave/SparseQR.cc
--- a/liboctave/SparseQR.cc
+++ b/liboctave/SparseQR.cc
@@ -22,16 +22,17 @@ along with Octave; see the file COPYING.
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 #include <vector>
 
 #include "lo-error.h"
 #include "SparseQR.h"
+#include "oct-locbuf.h"
 
 SparseQR::SparseQR_rep::SparseQR_rep (const SparseMatrix& a, int order)
 {
 #ifdef HAVE_CXSPARSE
   CXSPARSE_DNAME () A;
   A.nzmax = a.nzmax ();
   A.m = a.rows ();
   A.n = a.cols ();
diff --git a/liboctave/SparsedbleLU.cc b/liboctave/SparsedbleLU.cc
--- a/liboctave/SparsedbleLU.cc
+++ b/liboctave/SparsedbleLU.cc
@@ -23,16 +23,17 @@ along with Octave; see the file COPYING.
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <vector>
 
 #include "lo-error.h"
+#include "oct-locbuf.h"
 
 #include "SparsedbleLU.h"
 #include "oct-spparms.h"
 
 // Instantiate the base LU class for the types we need.
 
 #include "sparse-base-lu.h"
 #include "sparse-base-lu.cc"
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -38,16 +38,17 @@ along with Octave; see the file COPYING.
 #include "dbleAEPBAL.h"
 #include "DET.h"
 #include "dbleSCHUR.h"
 #include "dbleSVD.h"
 #include "dbleCHOL.h"
 #include "f77-fcn.h"
 #include "functor.h"
 #include "lo-error.h"
+#include "oct-locbuf.h"
 #include "lo-ieee.h"
 #include "lo-mappers.h"
 #include "lo-utils.h"
 #include "mx-base.h"
 #include "mx-m-dm.h"
 #include "mx-dm-m.h"
 #include "mx-inlines.cc"
 #include "oct-cmplx.h"
diff --git a/liboctave/dNDArray.cc b/liboctave/dNDArray.cc
--- a/liboctave/dNDArray.cc
+++ b/liboctave/dNDArray.cc
@@ -32,16 +32,17 @@ along with Octave; see the file COPYING.
 #include "Array-util.h"
 #include "dNDArray.h"
 #include "functor.h"
 #include "mx-base.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
 #include "lo-ieee.h"
 #include "lo-mappers.h"
+#include "oct-locbuf.h"
 
 #if defined (HAVE_FFTW3)
 #include "oct-fftw.h"
 #endif
 
 NDArray::NDArray (const Array<octave_idx_type>& a, bool zero_based,
 		  bool negative_to_nan)
 {
diff --git a/liboctave/dSparse.cc b/liboctave/dSparse.cc
--- a/liboctave/dSparse.cc
+++ b/liboctave/dSparse.cc
@@ -30,16 +30,17 @@ along with Octave; see the file COPYING.
 #include <iostream>
 #include <vector>
 
 #include "quit.h"
 #include "lo-ieee.h"
 #include "lo-mappers.h"
 #include "f77-fcn.h"
 #include "dRowVector.h"
+#include "oct-locbuf.h"
 
 #include "CSparse.h"
 #include "boolSparse.h"
 #include "dSparse.h"
 #include "functor.h"
 #include "oct-spparms.h"
 #include "SparsedbleLU.h"
 #include "MatrixType.h"
diff --git a/liboctave/data-conv.cc b/liboctave/data-conv.cc
--- a/liboctave/data-conv.cc
+++ b/liboctave/data-conv.cc
@@ -30,16 +30,17 @@ along with Octave; see the file COPYING.
 
 #include <iostream>
 #include <vector>
 
 #include "byte-swap.h"
 #include "data-conv.h"
 #include "lo-error.h"
 #include "lo-ieee.h"
+#include "oct-locbuf.h"
 
 template void swap_bytes<2> (volatile void *, int);
 template void swap_bytes<4> (volatile void *, int);
 template void swap_bytes<8> (volatile void *, int);
 
 #if defined HAVE_LONG_LONG_INT
 #define FIND_SIZED_INT_TYPE(VAL, BITS, TQ, Q) \
   do \
diff --git a/liboctave/dbleCHOL.cc b/liboctave/dbleCHOL.cc
--- a/liboctave/dbleCHOL.cc
+++ b/liboctave/dbleCHOL.cc
@@ -28,16 +28,17 @@ along with Octave; see the file COPYING.
 #endif
 
 #include <vector>
 
 #include "dRowVector.h"
 #include "dbleCHOL.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
+#include "oct-locbuf.h"
 
 extern "C"
 {
   F77_RET_T
   F77_FUNC (dpotrf, DPOTRF) (F77_CONST_CHAR_ARG_DECL, const octave_idx_type&,
 			     double*, const octave_idx_type&, octave_idx_type&
 			     F77_CHAR_ARG_LEN_DECL);
 
diff --git a/liboctave/dbleGEPBAL.cc b/liboctave/dbleGEPBAL.cc
--- a/liboctave/dbleGEPBAL.cc
+++ b/liboctave/dbleGEPBAL.cc
@@ -26,16 +26,17 @@ along with Octave; see the file COPYING.
 #endif
 
 #include <string>
 #include <vector>
 
 #include "dbleGEPBAL.h"
 #include "Array-util.h"
 #include "f77-fcn.h"
+#include "oct-locbuf.h"
 
 extern "C"
 {
   F77_RET_T
   F77_FUNC (dggbal, DGGBAL) (F77_CONST_CHAR_ARG_DECL, const octave_idx_type& N,
 			     double* A, const octave_idx_type& LDA, double* B,
 			     const octave_idx_type& LDB, octave_idx_type& ILO, octave_idx_type& IHI,
 			     double* LSCALE, double* RSCALE,
diff --git a/liboctave/fCMatrix.cc b/liboctave/fCMatrix.cc
--- a/liboctave/fCMatrix.cc
+++ b/liboctave/fCMatrix.cc
@@ -41,16 +41,17 @@ along with Octave; see the file COPYING.
 #include "fCMatrix.h"
 #include "DET.h"
 #include "fCmplxSCHUR.h"
 #include "fCmplxSVD.h"
 #include "fCmplxCHOL.h"
 #include "f77-fcn.h"
 #include "functor.h"
 #include "lo-error.h"
+#include "oct-locbuf.h"
 #include "lo-ieee.h"
 #include "lo-mappers.h"
 #include "lo-utils.h"
 #include "mx-base.h"
 #include "mx-fcm-fdm.h"
 #include "mx-fdm-fcm.h"
 #include "mx-fcm-fs.h"
 #include "mx-inlines.cc"
diff --git a/liboctave/fCNDArray.cc b/liboctave/fCNDArray.cc
--- a/liboctave/fCNDArray.cc
+++ b/liboctave/fCNDArray.cc
@@ -31,16 +31,17 @@ along with Octave; see the file COPYING.
 
 #include "Array-util.h"
 #include "fCNDArray.h"
 #include "mx-base.h"
 #include "f77-fcn.h"
 #include "functor.h"
 #include "lo-ieee.h"
 #include "lo-mappers.h"
+#include "oct-locbuf.h"
 
 #if defined (HAVE_FFTW3)
 #include "oct-fftw.h"
 #else
 extern "C"
 {
   F77_RET_T
   F77_FUNC (cffti, CFFTI) (const octave_idx_type&, FloatComplex*);
diff --git a/liboctave/fCmplxCHOL.cc b/liboctave/fCmplxCHOL.cc
--- a/liboctave/fCmplxCHOL.cc
+++ b/liboctave/fCmplxCHOL.cc
@@ -29,16 +29,17 @@ along with Octave; see the file COPYING.
 
 #include <vector>
 
 #include "fMatrix.h"
 #include "fRowVector.h"
 #include "fCmplxCHOL.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
+#include "oct-locbuf.h"
 
 extern "C"
 {
   F77_RET_T
   F77_FUNC (cpotrf, CPOTRF) (F77_CONST_CHAR_ARG_DECL, const octave_idx_type&,
 			     FloatComplex*, const octave_idx_type&, octave_idx_type&
 			     F77_CHAR_ARG_LEN_DECL);
   F77_RET_T
diff --git a/liboctave/fCmplxGEPBAL.cc b/liboctave/fCmplxGEPBAL.cc
--- a/liboctave/fCmplxGEPBAL.cc
+++ b/liboctave/fCmplxGEPBAL.cc
@@ -26,16 +26,17 @@ along with Octave; see the file COPYING.
 #endif
 
 #include <string>
 #include <vector>
 
 #include "fCmplxGEPBAL.h"
 #include "Array-util.h"
 #include "f77-fcn.h"
+#include "oct-locbuf.h"
 
 extern "C"
 {
   F77_RET_T
   F77_FUNC (cggbal, CGGBAL) (F77_CONST_CHAR_ARG_DECL, const octave_idx_type& N,
 			     FloatComplex* A, const octave_idx_type& LDA, FloatComplex* B,
 			     const octave_idx_type& LDB, octave_idx_type& ILO, octave_idx_type& IHI,
 			     float* LSCALE, float* RSCALE,
diff --git a/liboctave/fMatrix.cc b/liboctave/fMatrix.cc
--- a/liboctave/fMatrix.cc
+++ b/liboctave/fMatrix.cc
@@ -37,16 +37,17 @@ along with Octave; see the file COPYING.
 #include "fMatrix.h"
 #include "DET.h"
 #include "floatSCHUR.h"
 #include "floatSVD.h"
 #include "floatCHOL.h"
 #include "f77-fcn.h"
 #include "functor.h"
 #include "lo-error.h"
+#include "oct-locbuf.h"
 #include "lo-ieee.h"
 #include "lo-mappers.h"
 #include "lo-utils.h"
 #include "mx-base.h"
 #include "mx-fm-fdm.h"
 #include "mx-fdm-fm.h"
 #include "mx-inlines.cc"
 #include "oct-cmplx.h"
diff --git a/liboctave/fNDArray.cc b/liboctave/fNDArray.cc
--- a/liboctave/fNDArray.cc
+++ b/liboctave/fNDArray.cc
@@ -32,16 +32,17 @@ along with Octave; see the file COPYING.
 #include "Array-util.h"
 #include "fNDArray.h"
 #include "functor.h"
 #include "mx-base.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
 #include "lo-ieee.h"
 #include "lo-mappers.h"
+#include "oct-locbuf.h"
 
 #if defined (HAVE_FFTW3)
 #include "oct-fftw.h"
 
 FloatComplexNDArray
 FloatNDArray::fourier (int dim) const
 {
   dim_vector dv = dims ();
diff --git a/liboctave/file-ops.cc b/liboctave/file-ops.cc
--- a/liboctave/file-ops.cc
+++ b/liboctave/file-ops.cc
@@ -45,16 +45,17 @@ along with Octave; see the file COPYING.
 #include "file-ops.h"
 #include "file-stat.h"
 #include "oct-env.h"
 #include "oct-passwd.h"
 #include "pathlen.h"
 #include "quit.h"
 #include "statdefs.h"
 #include "str-vec.h"
+#include "oct-locbuf.h"
 
 file_ops::static_members *file_ops::static_members::instance = 0;
 
 file_ops::static_members::static_members (void)
   :
 #if (defined (OCTAVE_HAVE_WINDOWS_FILESYSTEM) && ! defined (OCTAVE_HAVE_POSIX_FILESYSTEM))
   xdir_sep_char ('\\'),
   xdir_sep_str ("\\"),
diff --git a/liboctave/floatCHOL.cc b/liboctave/floatCHOL.cc
--- a/liboctave/floatCHOL.cc
+++ b/liboctave/floatCHOL.cc
@@ -28,16 +28,17 @@ along with Octave; see the file COPYING.
 #endif
 
 #include <vector>
 
 #include "fRowVector.h"
 #include "floatCHOL.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
+#include "oct-locbuf.h"
 
 extern "C"
 {
   F77_RET_T
   F77_FUNC (spotrf, SPOTRF) (F77_CONST_CHAR_ARG_DECL, const octave_idx_type&,
 			     float*, const octave_idx_type&, octave_idx_type&
 			     F77_CHAR_ARG_LEN_DECL);
 
diff --git a/liboctave/floatGEPBAL.cc b/liboctave/floatGEPBAL.cc
--- a/liboctave/floatGEPBAL.cc
+++ b/liboctave/floatGEPBAL.cc
@@ -26,16 +26,17 @@ along with Octave; see the file COPYING.
 #endif
 
 #include <string>
 #include <vector>
 
 #include "floatGEPBAL.h"
 #include "Array-util.h"
 #include "f77-fcn.h"
+#include "oct-locbuf.h"
 
 extern "C"
 {
   F77_RET_T
   F77_FUNC (sggbal, SGGBAL) (F77_CONST_CHAR_ARG_DECL, const octave_idx_type& N,
 			     float* A, const octave_idx_type& LDA, float* B,
 			     const octave_idx_type& LDB, octave_idx_type& ILO, octave_idx_type& IHI,
 			     float* LSCALE, float* RSCALE,
diff --git a/liboctave/lo-sysdep.cc b/liboctave/lo-sysdep.cc
--- a/liboctave/lo-sysdep.cc
+++ b/liboctave/lo-sysdep.cc
@@ -43,16 +43,17 @@ along with Octave; see the file COPYING.
 #include <windows.h>
 #endif
 
 #include "file-ops.h"
 #include "lo-error.h"
 #include "pathlen.h"
 #include "lo-sysdep.h"
 #include "str-vec.h"
+#include "oct-locbuf.h"
 
 std::string
 octave_getcwd (void)
 {
   std::string retval;
 
   char buf[MAXPATHLEN];
 
diff --git a/liboctave/oct-fftw.cc b/liboctave/oct-fftw.cc
--- a/liboctave/oct-fftw.cc
+++ b/liboctave/oct-fftw.cc
@@ -27,16 +27,17 @@ along with Octave; see the file COPYING.
 #if defined (HAVE_FFTW3)
 
 #include <iostream>
 #include <vector>
 
 #include "lo-error.h"
 #include "oct-fftw.h"
 #include "quit.h"
+#include "oct-locbuf.h"
 
 // Helper class to create and cache fftw plans for both 1d and
 // 2d. This implementation defaults to using FFTW_ESTIMATE to create
 // the plans, which in theory is suboptimal, but provides quit
 // reasonable performance.
 
 // Also note that if FFTW_ESTIMATE is not used the planner in FFTW3
 // destroys the input and output arrays. We must therefore create a
diff --git a/liboctave/oct-locbuf.h b/liboctave/oct-locbuf.h
new file mode 100644
--- /dev/null
+++ b/liboctave/oct-locbuf.h
@@ -0,0 +1,81 @@
+/*
+
+Copyright (C) 2008 Jaroslav Hajek <highegg@gmail.com>
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+#if !defined (octave_local_buffer_h)
+#define octave_local_buffer_h 1
+
+#include <cstddef>
+
+// The default local buffer simply encapsulates an *array* pointer that gets
+// delete[]d automatically. For common POD types, we provide specializations.
+
+template <class T>
+class octave_local_buffer
+{
+public:
+  octave_local_buffer (size_t size)
+    : data (0) 
+    { 
+      if (size) 
+        data = new T[size]; 
+    }
+  ~octave_local_buffer (void) { delete [] data; }
+  operator T *() const { return data; }
+private:
+  T *data;
+};
+
+
+// If the compiler supports dynamic stack arrays, we can use the attached hack to 
+// place small buffer arrays on the stack. 
+
+#ifdef HAVE_DYNAMIC_AUTO_ARRAYS
+
+// Maximum buffer size (in bytes) to be placed on the stack.
+
+#define OCTAVE_LOCAL_BUFFER_MAX_STACK_SIZE 8192
+
+// If we have automatic arrays, we use an automatic array if the size is small
+// enough.  To avoid possibly evaluating `size' multiple times, we first cache
+// it.  Note that we always construct both the stack array and the
+// octave_local_buffer object, but only one of them will be nonempty.
+
+#define OCTAVE_LOCAL_BUFFER(T, buf, size) \
+  const size_t _bufsize_ ## buf = size; \
+  const bool _lbufaut_ ## buf = _bufsize_ ## buf * sizeof (T) \
+     <= OCTAVE_LOCAL_BUFFER_MAX_STACK_SIZE; \
+  T _bufaut_ ## buf [_lbufaut_ ## buf ? _bufsize_ ## buf : 0]; \
+  octave_local_buffer<T> _bufheap_ ## buf (!_lbufaut_ ## buf ? _bufsize_ ## buf : 0); \
+  T *buf = _lbufaut_ ## buf ? _bufaut_ ## buf : static_cast<T *> (_bufheap_ ## buf);
+
+#else
+
+// If we don't have automatic arrays, we simply always use octave_local_buffer.
+
+#define OCTAVE_LOCAL_BUFFER(T, buf, size) \
+  octave_local_buffer<T> _buffer_ ## buf (size); \
+  T *buf = _buffer_ ## buf;
+
+#endif 
+
+#endif
+
diff --git a/liboctave/oct-md5.cc b/liboctave/oct-md5.cc
--- a/liboctave/oct-md5.cc
+++ b/liboctave/oct-md5.cc
@@ -25,16 +25,17 @@ along with Octave; see the file COPYING.
 
 #ifdef HAVE_CONFIG_H
 #include "config.h"
 #endif
 
 #include "lo-error.h"
 #include "oct-md5.h"
 #include "md5.h"
+#include "oct-locbuf.h"
  
 std::string
 oct_md5 (const std::string str)
 {
   md5_state_t state;
 
   OCTAVE_LOCAL_BUFFER (md5_byte_t, digest, 16);
   md5_init (&state);
diff --git a/liboctave/oct-rand.cc b/liboctave/oct-rand.cc
--- a/liboctave/oct-rand.cc
+++ b/liboctave/oct-rand.cc
@@ -33,16 +33,17 @@ along with Octave; see the file COPYING.
 #include "lo-mappers.h"
 #include "oct-rand.h"
 #include "oct-time.h"
 #include "data-conv.h"
 #include "randmtzig.h"
 #include "randpoisson.h"
 #include "randgamma.h"
 #include "mach-info.h"
+#include "oct-locbuf.h"
 
 extern "C"
 {
   F77_RET_T
   F77_FUNC (dgennor, DGENNOR) (const double&, const double&, double&);
 
   F77_RET_T
   F77_FUNC (dgenunf, DGENUNF) (const double&, const double&, double&);
diff --git a/liboctave/regex-match.cc b/liboctave/regex-match.cc
--- a/liboctave/regex-match.cc
+++ b/liboctave/regex-match.cc
@@ -25,16 +25,17 @@ along with Octave; see the file COPYING.
 #endif
 
 #include <vector>
 #include <iostream>
 #include <string>
 
 #include "regex-match.h"
 #include "str-vec.h"
+#include "oct-locbuf.h"
 
 regex_match& 
 regex_match::operator = (const regex_match& gm)
 {
   if (this != &gm)
     {
 #if HAVE_REGEX
       for (int i = 0; i < pat.length (); i++)
diff --git a/liboctave/sparse-dmsolve.cc b/liboctave/sparse-dmsolve.cc
--- a/liboctave/sparse-dmsolve.cc
+++ b/liboctave/sparse-dmsolve.cc
@@ -27,16 +27,17 @@ along with Octave; see the file COPYING.
 #include <vector>
 
 #include "MArray2.h"
 #include "MSparse.h"
 #include "SparseQR.h"
 #include "SparseCmplxQR.h"
 #include "MatrixType.h"
 #include "oct-sort.h"
+#include "oct-locbuf.h"
 
 template <class T>
 static MSparse<T>
 dmsolve_extract (const MSparse<T> &A, const octave_idx_type *Pinv, 
 		const octave_idx_type *Q, octave_idx_type rst, 
 		octave_idx_type rend, octave_idx_type cst, 
 		octave_idx_type cend, octave_idx_type maxnz = -1,
 		bool lazy = false)
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,22 @@
+2008-10-29  Jaroslav Hajek  <highegg@gmail.com>
+	* file-io.cc, gl-render.cc, load-save.cc, ls-hdf5.cc, ls-mat4.cc,
+	ls-mat5.cc, ls-oct-binary.cc, mex.cc, oct.h, ov-base-int.cc,
+	ov-bool-mat.cc, ov-bool-sparse.cc, ov-cell.cc, ov-class.cc,
+	ov-cx-mat.cc, ov-cx-sparse.cc, ov-fcn-handle.cc, ov-fcn-inline.cc,
+	ov-flt-cx-mat.cc, ov-flt-re-mat.cc, ov-re-mat.cc, ov-re-sparse.cc,
+	ov-str-mat.cc, ov-struct.cc, toplev.cc,
+	DLD-FUNCTIONS/__lin_interpn__.cc, DLD-FUNCTIONS/amd.cc,
+	DLD-FUNCTIONS/ccolamd.cc, DLD-FUNCTIONS/cellfun.cc,
+	DLD-FUNCTIONS/colamd.cc, DLD-FUNCTIONS/gcd.cc,
+	DLD-FUNCTIONS/matrix_type.cc, DLD-FUNCTIONS/regexp.cc,
+	DLD-FUNCTIONS/symbfact.cc, DLD-FUNCTIONS/symrcm.cc: 
+	Include oct-locbuf.h.
+
 2008-12-05  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-base-diag.cc (save_ascii, load_ascii): Save natively.
 	* ov-base-diag.h (load_ascii): Declare.
 	* ov-perm.cc (save_ascii, load_ascii): Save natively.
 	* ov-perm.h (load_ascii): Declare.
 
 
diff --git a/src/DLD-FUNCTIONS/__lin_interpn__.cc b/src/DLD-FUNCTIONS/__lin_interpn__.cc
--- a/src/DLD-FUNCTIONS/__lin_interpn__.cc
+++ b/src/DLD-FUNCTIONS/__lin_interpn__.cc
@@ -20,16 +20,17 @@ along with Octave; see the file COPYING.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "dNDArray.h"
+#include "oct-locbuf.h"
 
 #include "defun-dld.h"
 #include "error.h"
 #include "oct-obj.h"
 
 // equivalent to isvector.m
 
 template <class T>
diff --git a/src/DLD-FUNCTIONS/amd.cc b/src/DLD-FUNCTIONS/amd.cc
--- a/src/DLD-FUNCTIONS/amd.cc
+++ b/src/DLD-FUNCTIONS/amd.cc
@@ -37,16 +37,17 @@ along with Octave; see the file COPYING.
 #include "pager.h"
 #include "ov-re-mat.h"
 
 #include "ov-re-sparse.h"
 #include "ov-cx-sparse.h"
 #include "oct-map.h"
 
 #include "oct-sparse.h"
+#include "oct-locbuf.h"
 
 #ifdef IDX_TYPE_LONG
 #define AMD_NAME(name) amd_l ## name
 #else
 #define AMD_NAME(name) amd ## name
 #endif
 
 DEFUN_DLD (amd, args, nargout,
diff --git a/src/DLD-FUNCTIONS/ccolamd.cc b/src/DLD-FUNCTIONS/ccolamd.cc
--- a/src/DLD-FUNCTIONS/ccolamd.cc
+++ b/src/DLD-FUNCTIONS/ccolamd.cc
@@ -36,16 +36,17 @@ along with Octave; see the file COPYING.
 #include "defun-dld.h"
 #include "pager.h"
 #include "ov-re-mat.h"
 
 #include "ov-re-sparse.h"
 #include "ov-cx-sparse.h"
 
 #include "oct-sparse.h"
+#include "oct-locbuf.h"
 
 #ifdef IDX_TYPE_LONG
 #define CCOLAMD_NAME(name) ccolamd_l ## name
 #define CSYMAMD_NAME(name) csymamd_l ## name
 #else
 #define CCOLAMD_NAME(name) ccolamd ## name
 #define CSYMAMD_NAME(name) csymamd ## name
 #endif
diff --git a/src/DLD-FUNCTIONS/cellfun.cc b/src/DLD-FUNCTIONS/cellfun.cc
--- a/src/DLD-FUNCTIONS/cellfun.cc
+++ b/src/DLD-FUNCTIONS/cellfun.cc
@@ -24,16 +24,17 @@ along with Octave; see the file COPYING.
 #include <config.h>
 #endif
 
 #include <string>
 #include <vector>
 #include <list>
 
 #include "lo-mappers.h"
+#include "oct-locbuf.h"
 
 #include "Cell.h"
 #include "oct-map.h"
 #include "defun-dld.h"
 #include "parse.h"
 #include "variables.h"
 #include "ov-colon.h"
 #include "unwind-prot.h"
diff --git a/src/DLD-FUNCTIONS/colamd.cc b/src/DLD-FUNCTIONS/colamd.cc
--- a/src/DLD-FUNCTIONS/colamd.cc
+++ b/src/DLD-FUNCTIONS/colamd.cc
@@ -37,16 +37,17 @@ along with Octave; see the file COPYING.
 #include "defun-dld.h"
 #include "pager.h"
 #include "ov-re-mat.h"
 
 #include "ov-re-sparse.h"
 #include "ov-cx-sparse.h"
 
 #include "oct-sparse.h"
+#include "oct-locbuf.h"
 
 #ifdef IDX_TYPE_LONG
 #define COLAMD_NAME(name) colamd_l ## name
 #define SYMAMD_NAME(name) symamd_l ## name
 #else
 #define COLAMD_NAME(name) colamd ## name
 #define SYMAMD_NAME(name) symamd ## name
 #endif
diff --git a/src/DLD-FUNCTIONS/gcd.cc b/src/DLD-FUNCTIONS/gcd.cc
--- a/src/DLD-FUNCTIONS/gcd.cc
+++ b/src/DLD-FUNCTIONS/gcd.cc
@@ -24,16 +24,17 @@ along with Octave; see the file COPYING.
 #include <config.h>
 #endif
 
 #include "dNDArray.h"
 #include "CNDArray.h"
 #include "fNDArray.h"
 #include "fCNDArray.h"
 #include "lo-mappers.h"
+#include "oct-locbuf.h"
 
 #include "defun-dld.h"
 #include "error.h"
 #include "oct-obj.h"
 
 // FIXME -- should probably handle Inf, NaN.
 
 static inline bool
diff --git a/src/DLD-FUNCTIONS/matrix_type.cc b/src/DLD-FUNCTIONS/matrix_type.cc
--- a/src/DLD-FUNCTIONS/matrix_type.cc
+++ b/src/DLD-FUNCTIONS/matrix_type.cc
@@ -29,16 +29,17 @@ along with Octave; see the file COPYING.
 #include "ov.h"
 #include "defun-dld.h"
 #include "error.h"
 #include "ov-re-mat.h"
 #include "ov-cx-mat.h"
 #include "ov-re-sparse.h"
 #include "ov-cx-sparse.h"
 #include "MatrixType.h"
+#include "oct-locbuf.h"
 
 DEFUN_DLD (matrix_type, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{type} =} matrix_type (@var{a})\n\
 @deftypefnx {Loadable Function} {@var{a} =} matrix_type (@var{a}, @var{type})\n\
 @deftypefnx {Loadable Function} {@var{a} =} matrix_type (@var{a}, 'upper', @var{perm})\n\
 @deftypefnx {Loadable Function} {@var{a} =} matrix_type (@var{a}, 'lower', @var{perm})\n\
 @deftypefnx {Loadable Function} {@var{a} =} matrix_type (@var{a}, 'banded', @var{nl}, @var{nu})\n\
diff --git a/src/DLD-FUNCTIONS/regexp.cc b/src/DLD-FUNCTIONS/regexp.cc
--- a/src/DLD-FUNCTIONS/regexp.cc
+++ b/src/DLD-FUNCTIONS/regexp.cc
@@ -34,16 +34,17 @@ along with Octave; see the file COPYING.
 #include "oct-obj.h"
 #include "utils.h"
 
 #include "Cell.h"
 #include "oct-map.h"
 #include "str-vec.h"
 #include "quit.h"
 #include "parse.h"
+#include "oct-locbuf.h"
 
 #if defined (HAVE_PCRE)
 #include <pcre.h>
 #elif defined (HAVE_REGEX)
 #if defined (__MINGW32__)
 #define __restrict
 #endif
 #if defined (HAVE_SYS_TYPES_H)
diff --git a/src/DLD-FUNCTIONS/symbfact.cc b/src/DLD-FUNCTIONS/symbfact.cc
--- a/src/DLD-FUNCTIONS/symbfact.cc
+++ b/src/DLD-FUNCTIONS/symbfact.cc
@@ -24,16 +24,17 @@ along with Octave; see the file COPYING.
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "SparseCmplxCHOL.h"
 #include "SparsedbleCHOL.h"
 #include "oct-spparms.h"
 #include "sparse-util.h"
+#include "oct-locbuf.h"
 
 #include "ov-re-sparse.h"
 #include "ov-cx-sparse.h"
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
 #include "oct-obj.h"
 #include "utils.h"
diff --git a/src/DLD-FUNCTIONS/symrcm.cc b/src/DLD-FUNCTIONS/symrcm.cc
--- a/src/DLD-FUNCTIONS/symrcm.cc
+++ b/src/DLD-FUNCTIONS/symrcm.cc
@@ -54,16 +54,17 @@ Written by Michael Weitzel <michael.weit
 #include <config.h>
 #endif
 
 #include "ov.h"
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
 #include "utils.h"
+#include "oct-locbuf.h"
 
 #include "ov-re-mat.h"
 #include "ov-re-sparse.h"
 #include "ov-cx-sparse.h"
 #include "oct-sparse.h"
 
 // A node struct for the Cuthill-McKee algorithm
 struct CMK_Node
diff --git a/src/file-io.cc b/src/file-io.cc
--- a/src/file-io.cc
+++ b/src/file-io.cc
@@ -58,16 +58,17 @@ along with Octave; see the file COPYING.
 #include <zlib.h>
 #endif
 
 #include "error.h"
 #include "file-ops.h"
 #include "file-stat.h"
 #include "lo-ieee.h"
 #include "oct-env.h"
+#include "oct-locbuf.h"
 
 #include "defun.h"
 #include "file-io.h"
 #include "load-path.h"
 #include "oct-fstrm.h"
 #include "oct-iostrm.h"
 #include "oct-map.h"
 #include "oct-obj.h"
diff --git a/src/gl-render.cc b/src/gl-render.cc
--- a/src/gl-render.cc
+++ b/src/gl-render.cc
@@ -22,16 +22,17 @@ along with Octave; see the file COPYING.
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #if defined (HAVE_OPENGL)
 
 #include <lo-mappers.h>
+#include "oct-locbuf.h"
 #include "gl-render.h"
 
 #define LIGHT_MODE GL_FRONT_AND_BACK
 
 // Win32 API requires the CALLBACK attributes for
 // GLU callback functions. Define it to empty on
 // other platforms.
 #ifndef CALLBACK
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -49,16 +49,17 @@ along with Octave; see the file COPYING.
 #include "file-stat.h"
 #include "glob-match.h"
 #include "lo-mappers.h"
 #include "mach-info.h"
 #include "oct-env.h"
 #include "oct-time.h"
 #include "quit.h"
 #include "str-vec.h"
+#include "oct-locbuf.h"
 
 #include "Cell.h"
 #include "defun.h"
 #include "error.h"
 #include "gripes.h"
 #include "load-path.h"
 #include "load-save.h"
 #include "oct-obj.h"
diff --git a/src/ls-hdf5.cc b/src/ls-hdf5.cc
--- a/src/ls-hdf5.cc
+++ b/src/ls-hdf5.cc
@@ -45,16 +45,17 @@ along with Octave; see the file COPYING.
 #include "file-ops.h"
 #include "glob-match.h"
 #include "lo-mappers.h"
 #include "mach-info.h"
 #include "oct-env.h"
 #include "oct-time.h"
 #include "quit.h"
 #include "str-vec.h"
+#include "oct-locbuf.h"
 
 #include "Cell.h"
 #include "defun.h"
 #include "error.h"
 #include "gripes.h"
 #include "load-save.h"
 #include "oct-obj.h"
 #include "oct-map.h"
diff --git a/src/ls-mat4.cc b/src/ls-mat4.cc
--- a/src/ls-mat4.cc
+++ b/src/ls-mat4.cc
@@ -39,16 +39,17 @@ along with Octave; see the file COPYING.
 #include "file-ops.h"
 #include "glob-match.h"
 #include "lo-mappers.h"
 #include "mach-info.h"
 #include "oct-env.h"
 #include "oct-time.h"
 #include "quit.h"
 #include "str-vec.h"
+#include "oct-locbuf.h"
 
 #include "Cell.h"
 #include "defun.h"
 #include "error.h"
 #include "gripes.h"
 #include "load-save.h"
 #include "oct-obj.h"
 #include "oct-map.h"
diff --git a/src/ls-mat5.cc b/src/ls-mat5.cc
--- a/src/ls-mat5.cc
+++ b/src/ls-mat5.cc
@@ -43,16 +43,17 @@ along with Octave; see the file COPYING.
 #include "glob-match.h"
 #include "lo-mappers.h"
 #include "mach-info.h"
 #include "oct-env.h"
 #include "oct-time.h"
 #include "quit.h"
 #include "str-vec.h"
 #include "file-stat.h"
+#include "oct-locbuf.h"
 
 #include "Cell.h"
 #include "defun.h"
 #include "error.h"
 #include "gripes.h"
 #include "load-save.h"
 #include "load-path.h"
 #include "oct-obj.h"
diff --git a/src/ls-oct-binary.cc b/src/ls-oct-binary.cc
--- a/src/ls-oct-binary.cc
+++ b/src/ls-oct-binary.cc
@@ -39,16 +39,17 @@ along with Octave; see the file COPYING.
 #include "file-ops.h"
 #include "glob-match.h"
 #include "lo-mappers.h"
 #include "mach-info.h"
 #include "oct-env.h"
 #include "oct-time.h"
 #include "quit.h"
 #include "str-vec.h"
+#include "oct-locbuf.h"
 
 #include "Cell.h"
 #include "defun.h"
 #include "error.h"
 #include "gripes.h"
 #include "load-save.h"
 #include "oct-obj.h"
 #include "oct-map.h"
diff --git a/src/mex.cc b/src/mex.cc
--- a/src/mex.cc
+++ b/src/mex.cc
@@ -28,16 +28,17 @@ along with Octave; see the file COPYING.
 #include <cstdlib>
 #include <cstring>
 #include <cctype>
 
 #include <set>
 
 #include "f77-fcn.h"
 #include "lo-ieee.h"
+#include "oct-locbuf.h"
 
 // mxArray must be declared as a class before including mexproto.h.
 class mxArray;
 #include "Cell.h"
 #include "mexproto.h"
 #include "oct-map.h"
 #include "oct-obj.h"
 #include "ov.h"
diff --git a/src/oct.h b/src/oct.h
--- a/src/oct.h
+++ b/src/oct.h
@@ -27,16 +27,17 @@ along with Octave; see the file COPYING.
 
 // config.h needs to be first because it includes #defines that can */
 // affect other header files.
 
 #include "config.h"
 
 #include "Matrix.h"
 
+#include "oct-locbuf.h"
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
 #include "help.h"
 #include "oct-obj.h"
 #include "pager.h"
 #include "utils.h"
 #include "variables.h"
diff --git a/src/ov-base-int.cc b/src/ov-base-int.cc
--- a/src/ov-base-int.cc
+++ b/src/ov-base-int.cc
@@ -28,16 +28,17 @@ along with Octave; see the file COPYING.
 
 #include <iostream>
 #include <vector>
 
 #include "lo-ieee.h"
 #include "lo-utils.h"
 #include "mx-base.h"
 #include "quit.h"
+#include "oct-locbuf.h"
 
 #include "defun.h"
 #include "gripes.h"
 #include "oct-obj.h"
 #include "oct-lvalue.h"
 #include "oct-stream.h"
 #include "ops.h"
 #include "ov-base.h"
diff --git a/src/ov-bool-mat.cc b/src/ov-bool-mat.cc
--- a/src/ov-bool-mat.cc
+++ b/src/ov-bool-mat.cc
@@ -25,16 +25,17 @@ along with Octave; see the file COPYING.
 #include <config.h>
 #endif
 
 #include <iostream>
 #include <vector>
 
 #include "lo-ieee.h"
 #include "mx-base.h"
+#include "oct-locbuf.h"
 
 #include "gripes.h"
 #include "oct-obj.h"
 #include "ops.h"
 #include "ov-base.h"
 #include "ov-base-mat.h"
 #include "ov-base-mat.cc"
 #include "ov-bool.h"
diff --git a/src/ov-bool-sparse.cc b/src/ov-bool-sparse.cc
--- a/src/ov-bool-sparse.cc
+++ b/src/ov-bool-sparse.cc
@@ -31,16 +31,17 @@ along with Octave; see the file COPYING.
 #include <vector>
 
 #include "ov-base.h"
 #include "ov-scalar.h"
 #include "ov-bool.h"
 #include "ov-bool-mat.h"
 #include "gripes.h"
 #include "ops.h"
+#include "oct-locbuf.h"
 
 #include "ov-re-sparse.h"
 #include "ov-cx-sparse.h"
 #include "ov-bool-sparse.h"
 
 #include "ov-base-sparse.h"
 #include "ov-base-sparse.cc"
 
diff --git a/src/ov-cell.cc b/src/ov-cell.cc
--- a/src/ov-cell.cc
+++ b/src/ov-cell.cc
@@ -29,16 +29,17 @@ along with Octave; see the file COPYING.
 #include <iostream>
 #include <sstream>
 #include <vector>
 
 #include "Array-util.h"
 #include "byte-swap.h"
 #include "lo-utils.h"
 #include "quit.h"
+#include "oct-locbuf.h"
 
 #include "defun.h"
 #include "error.h"
 #include "ov-cell.h"
 #include "oct-obj.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "ov-base-mat.h"
diff --git a/src/ov-class.cc b/src/ov-class.cc
--- a/src/ov-class.cc
+++ b/src/ov-class.cc
@@ -23,16 +23,17 @@ along with Octave; see the file COPYING.
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <iostream>
 
 #include "Array-util.h"
 #include "byte-swap.h"
+#include "oct-locbuf.h"
 
 #include "Cell.h"
 #include "defun.h"
 #include "error.h"
 #include "gripes.h"
 #include "load-path.h"
 #include "ls-hdf5.h"
 #include "ls-oct-ascii.h"
diff --git a/src/ov-cx-mat.cc b/src/ov-cx-mat.cc
--- a/src/ov-cx-mat.cc
+++ b/src/ov-cx-mat.cc
@@ -29,16 +29,17 @@ along with Octave; see the file COPYING.
 #include <vector>
 
 #include "data-conv.h"
 #include "lo-ieee.h"
 #include "lo-specfun.h"
 #include "lo-mappers.h"
 #include "mx-base.h"
 #include "mach-info.h"
+#include "oct-locbuf.h"
 
 #include "gripes.h"
 #include "oct-obj.h"
 #include "oct-stream.h"
 #include "ops.h"
 #include "ov-base.h"
 #include "ov-base-mat.h"
 #include "ov-base-mat.cc"
diff --git a/src/ov-cx-sparse.cc b/src/ov-cx-sparse.cc
--- a/src/ov-cx-sparse.cc
+++ b/src/ov-cx-sparse.cc
@@ -27,16 +27,17 @@ along with Octave; see the file COPYING.
 
 #include <climits>
 
 #include <iostream>
 #include <vector>
 
 #include "lo-specfun.h"
 #include "lo-mappers.h"
+#include "oct-locbuf.h"
 
 #include "ov-base.h"
 #include "ov-scalar.h"
 #include "ov-complex.h"
 #include "gripes.h"
 
 #include "ov-re-sparse.h"
 #include "ov-cx-sparse.h"
diff --git a/src/ov-fcn-handle.cc b/src/ov-fcn-handle.cc
--- a/src/ov-fcn-handle.cc
+++ b/src/ov-fcn-handle.cc
@@ -24,16 +24,17 @@ along with Octave; see the file COPYING.
 #include <config.h>
 #endif
 
 #include <iostream>
 #include <sstream>
 #include <vector>
 
 #include "file-ops.h"
+#include "oct-locbuf.h"
 
 #include "defun.h"
 #include "error.h"
 #include "gripes.h"
 #include "input.h"
 #include "oct-map.h"
 #include "ov-base.h"
 #include "ov-fcn-handle.h"
diff --git a/src/ov-fcn-inline.cc b/src/ov-fcn-inline.cc
--- a/src/ov-fcn-inline.cc
+++ b/src/ov-fcn-inline.cc
@@ -28,16 +28,18 @@ Open Source Initiative (www.opensource.o
 #include <config.h>
 #endif
 
 #include <istream>
 #include <iostream>
 #include <sstream>
 #include <vector>
 
+#include "oct-locbuf.h"
+
 #include "defun.h"
 #include "error.h"
 #include "gripes.h"
 #include "oct-map.h"
 #include "ov-base.h"
 #include "ov-fcn-inline.h"
 #include "ov-usr-fcn.h"
 #include "pr-output.h"
diff --git a/src/ov-flt-cx-mat.cc b/src/ov-flt-cx-mat.cc
--- a/src/ov-flt-cx-mat.cc
+++ b/src/ov-flt-cx-mat.cc
@@ -29,16 +29,17 @@ along with Octave; see the file COPYING.
 #include <vector>
 
 #include "data-conv.h"
 #include "lo-ieee.h"
 #include "lo-specfun.h"
 #include "lo-mappers.h"
 #include "mx-base.h"
 #include "mach-info.h"
+#include "oct-locbuf.h"
 
 #include "gripes.h"
 #include "oct-obj.h"
 #include "oct-stream.h"
 #include "ops.h"
 #include "ov-base.h"
 #include "ov-base-mat.h"
 #include "ov-base-mat.cc"
diff --git a/src/ov-flt-re-mat.cc b/src/ov-flt-re-mat.cc
--- a/src/ov-flt-re-mat.cc
+++ b/src/ov-flt-re-mat.cc
@@ -33,16 +33,17 @@ along with Octave; see the file COPYING.
 #include "data-conv.h"
 #include "lo-ieee.h"
 #include "lo-utils.h"
 #include "lo-specfun.h"
 #include "lo-mappers.h"
 #include "mach-info.h"
 #include "mx-base.h"
 #include "quit.h"
+#include "oct-locbuf.h"
 
 #include "defun.h"
 #include "gripes.h"
 #include "oct-obj.h"
 #include "oct-lvalue.h"
 #include "oct-stream.h"
 #include "ops.h"
 #include "ov-base.h"
diff --git a/src/ov-re-mat.cc b/src/ov-re-mat.cc
--- a/src/ov-re-mat.cc
+++ b/src/ov-re-mat.cc
@@ -33,16 +33,17 @@ along with Octave; see the file COPYING.
 #include "data-conv.h"
 #include "lo-ieee.h"
 #include "lo-utils.h"
 #include "lo-specfun.h"
 #include "lo-mappers.h"
 #include "mach-info.h"
 #include "mx-base.h"
 #include "quit.h"
+#include "oct-locbuf.h"
 
 #include "defun.h"
 #include "gripes.h"
 #include "oct-obj.h"
 #include "oct-lvalue.h"
 #include "oct-stream.h"
 #include "ops.h"
 #include "ov-base.h"
diff --git a/src/ov-re-sparse.cc b/src/ov-re-sparse.cc
--- a/src/ov-re-sparse.cc
+++ b/src/ov-re-sparse.cc
@@ -27,16 +27,17 @@ along with Octave; see the file COPYING.
 
 #include <climits>
 
 #include <iostream>
 #include <vector>
 
 #include "lo-specfun.h"
 #include "lo-mappers.h"
+#include "oct-locbuf.h"
 
 #include "ov-base.h"
 #include "ov-scalar.h"
 #include "gripes.h"
 
 #include "ls-hdf5.h"
 
 #include "ov-re-sparse.h"
diff --git a/src/ov-str-mat.cc b/src/ov-str-mat.cc
--- a/src/ov-str-mat.cc
+++ b/src/ov-str-mat.cc
@@ -29,16 +29,17 @@ along with Octave; see the file COPYING.
 
 #include <iostream>
 #include <vector>
 
 #include "data-conv.h"
 #include "lo-ieee.h"
 #include "mach-info.h"
 #include "mx-base.h"
+#include "oct-locbuf.h"
 
 #include "defun.h"
 #include "byte-swap.h"
 #include "gripes.h"
 #include "ls-oct-ascii.h"
 #include "ls-hdf5.h"
 #include "ls-utils.h"
 #include "oct-obj.h"
diff --git a/src/ov-struct.cc b/src/ov-struct.cc
--- a/src/ov-struct.cc
+++ b/src/ov-struct.cc
@@ -34,16 +34,17 @@ along with Octave; see the file COPYING.
 #include "oct-lvalue.h"
 #include "ov-list.h"
 #include "ov-struct.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
 
 #include "Array-util.h"
+#include "oct-locbuf.h"
 
 #include "byte-swap.h"
 #include "ls-oct-ascii.h"
 #include "ls-oct-binary.h"
 #include "ls-hdf5.h"
 #include "ls-utils.h"
 #include "pr-output.h"
 
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -45,16 +45,17 @@ along with Octave; see the file COPYING.
 
 #include "cmd-edit.h"
 #include "file-ops.h"
 #include "lo-error.h"
 #include "lo-mappers.h"
 #include "oct-env.h"
 #include "quit.h"
 #include "str-vec.h"
+#include "oct-locbuf.h"
 
 #include <defaults.h>
 #include "defun.h"
 #include "error.h"
 #include "file-io.h"
 #include "input.h"
 #include "lex.h"
 #include <oct-conf.h>
