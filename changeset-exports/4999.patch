# HG changeset patch
# User jwe
# Date 1095282327 0
#      Wed Sep 15 21:05:27 2004 +0000
# Node ID 5538e4ceb616281c72ff82e772442ae9a2c22bf4
# Parent  3f3d6eec0a2c5b255607d97bca767153462ff015
[project @ 2004-09-15 21:05:27 by jwe]

diff --git a/src/DLD-FUNCTIONS/sort.cc b/src/DLD-FUNCTIONS/sort.cc
--- a/src/DLD-FUNCTIONS/sort.cc
+++ b/src/DLD-FUNCTIONS/sort.cc
@@ -190,35 +190,39 @@ mx_sort_indexed (ArrayN<T> &m, int dim, 
 	      v[i*stride+offset] = vi[i]->vec;
 	      idx(i*stride+offset) = vi[i]->indx;
 	    }
 	}
     }
 
   retval(1) = idx;
   retval(0) = octave_value (m);
+
   return retval;
 }
 
 // If we have IEEE 754 data format, then we can use the trick of
 // casting doubles as unsigned eight byte integers, and with a little
 // bit of magic we can automatically sort the NaN's correctly.
 
 #if defined (HAVE_IEEE754_DATA_FORMAT) && defined (EIGHT_BYTE_INT)
 
-static inline unsigned EIGHT_BYTE_INT FloatFlip(unsigned EIGHT_BYTE_INT f)
+static inline unsigned EIGHT_BYTE_INT
+FloatFlip (unsigned EIGHT_BYTE_INT f)
 {
   unsigned EIGHT_BYTE_INT mask = -(EIGHT_BYTE_INT)(f >> 63) | 
     0x8000000000000000ULL;
+
   return f ^ mask;
 }
 
 inline unsigned EIGHT_BYTE_INT IFloatFlip(unsigned EIGHT_BYTE_INT f)
 {
   unsigned EIGHT_BYTE_INT mask = ((f >> 63) - 1) | 0x8000000000000000ULL;
+
   return f ^ mask;
 }
 
 bool
 ascending_compare (unsigned EIGHT_BYTE_INT a, 
 		   unsigned EIGHT_BYTE_INT b)
 {
   return (a < b);
@@ -308,17 +312,16 @@ mx_sort (ArrayN<double> &m, int dim, sor
 	      for (unsigned int l = 0; l < ns - i + 1; l++)
 		vtmp[l] = vtmp[l+i-1];
 	      for (unsigned int l = ns - i + 1; l < ns; l++)
 		vtmp[l] = octave_NaN;
 	    }
 
 	  p += ns;
 	}
-
     }
   else
     {
       OCTAVE_LOCAL_BUFFER (unsigned EIGHT_BYTE_INT, vi, ns);
 
       for (unsigned int j = 0; j < iter; j++)
 	{
 	  unsigned int offset = j;
