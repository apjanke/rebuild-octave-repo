# HG changeset patch
# User jwe
# Date 1197486864 0
#      Wed Dec 12 19:14:24 2007 +0000
# Node ID d8209a80e0932d2f52def3c04e69363a9467ca57
# Parent  28a9e3d3bf143c6510b3d4c5426f372f217323b6
[project @ 2007-12-12 19:14:23 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2007-12-12  David Bateman  <dbateman@free.fr>
+
+	* DLD-FUNCTIONS/sparse.cc (Fsparse): Check for scalar arguments
+	for 2 argument version.
+
 2007-12-12  John W. Eaton  <jwe@octave.org>
 
 	* graphics.h.in (class axes) Add the layer property.
 	* graphics.cc (class axes) Ditto.
 
 	* graphics.cc (gh_manager::get_handle): Use ceil instead of trunc.
 
 2007-12-11  John W. Eaton  <jwe@octave.org>
diff --git a/src/DLD-FUNCTIONS/sparse.cc b/src/DLD-FUNCTIONS/sparse.cc
--- a/src/DLD-FUNCTIONS/sparse.cc
+++ b/src/DLD-FUNCTIONS/sparse.cc
@@ -61,20 +61,16 @@ Return 1 if the value of the expression 
 }
 
 DEFUN_DLD (sparse, args, ,
     "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{s} =} sparse (@var{a})\n\
 Create a sparse matrix from the full matrix @var{a}.\n\
 is forced back to a full matrix is resulting matrix is sparse\n\
 \n\
-@deftypefnx {Loadable Function} {@var{s} =} sparse (@var{a}, 1)\n\
-Create a sparse matrix and convert it back to a full matrix.\n\
-is forced back to a full matrix is resulting matrix is sparse\n\
-\n\
 @deftypefnx {Loadable Function} {@var{s} =} sparse (@var{i}, @var{j}, @var{sv}, @var{m}, @var{n}, @var{nzmax})\n\
 Create a sparse matrix given integer index vectors @var{i} and @var{j},\n\
 a 1-by-@code{nnz} vector of real of complex values @var{sv}, overall\n\
 dimensions @var{m} and @var{n} of the sparse matrix.  The argument\n\
 @code{nzmax} is ignored but accepted for compatibility with @sc{Matlab}.\n\
 \n\
 @strong{Note}: if multiple values are specified with the same\n\
 @var{i}, @var{j} indices, the corresponding values in @var{s} will\n\
@@ -179,29 +175,34 @@ to have a common size.\n\
 	     }
 	 }
      }
    else 
      {
        octave_idx_type m = 1, n = 1;
        if (nargin == 2) 
 	 {
-	   m = args(0).int_value();
-	   n = args(1).int_value();
-	   if (error_state) return retval;
+	   if (args(0).numel () == 1 && args(1).numel () == 1)
+	     {
+	       m = args(0).int_value();
+	       n = args(1).int_value();
+	       if (error_state) return retval;
 
-	   if (use_complex) 
-	     retval = new octave_sparse_complex_matrix 
-	       (SparseComplexMatrix (m, n));
-	   else if (use_bool) 
-	     retval = new octave_sparse_bool_matrix 
-	       (SparseBoolMatrix (m, n));
+	       if (use_complex) 
+		 retval = new octave_sparse_complex_matrix 
+		   (SparseComplexMatrix (m, n));
+	       else if (use_bool) 
+		 retval = new octave_sparse_bool_matrix 
+		   (SparseBoolMatrix (m, n));
+	       else
+		 retval = new octave_sparse_matrix 
+		   (SparseMatrix (m, n));
+	     }
 	   else
-	     retval = new octave_sparse_matrix 
-	       (SparseMatrix (m, n));
+	     error ("sparse: expecting scalar values");
 	 }
        else 
 	 {
 	   if (args(0).is_empty () || args (1).is_empty () 
 	       || args(2).is_empty ())
 	     {
 	       if (nargin > 4)
 		 {
