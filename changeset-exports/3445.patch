# HG changeset patch
# User jwe
# Date 948100012 0
#      Mon Jan 17 09:06:52 2000 +0000
# Node ID c3eed8ac845adafec112cd114d0663dd805f3fdc
# Parent  fa0d84558faaa25b1cc12f0d4481bf4ce613111e
[project @ 2000-01-17 09:06:51 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,13 +1,15 @@
 2000-01-17  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* DLD-FUNCTIONS/gammainc.cc (Fgammainc): Texinfoize doc string.
+	* ov-typeinfo.cc (Ftypeinfo): Ditto.
 
 	* DLD-FUNCTIONS/minmax.cc (Fmax, Fmin): Texinfoize doc strings.
+	* ov-usr-fcn.cc (Fva_arg, Fva_start, Fvr_val): Ditto.
 
 	* pt-plot.cc (Fgraw, Fgset, Fgshow, Vgnuplot_command_plot, 
 	Vgnuplot_command_replot, Vgnuplot_command_splot,
 	Vgnuplot_command_using, Vgnuplot_command_with,
 	Vgnuplot_command_axes, Vgnuplot_command_title,
 	Vgnuplot_command_end): Texinfoize doc strings.
 
 2000-01-13  John W. Eaton  <jwe@bevo.che.wisc.edu>
diff --git a/src/ov-typeinfo.cc b/src/ov-typeinfo.cc
--- a/src/ov-typeinfo.cc
+++ b/src/ov-typeinfo.cc
@@ -309,21 +309,23 @@ octave_value_typeinfo::do_installed_type
 
   for (int i = 0;i < num_types; i++)
     retval (i) = types (i);
 
   return retval;
 }
 
 DEFUN (typeinfo, args, ,
-  "usage: typeinfo (expr)\n\
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} typeinfo (@var{expr})\n\
 \n\
-Return the type of the expression EXPR, as a string.  If EXPR is\n\
-omitted, return an array of strings containing all the currently\n\
-installed data types.")
+Return the type of the expression @var{expr}, as a string.  If\n\
+@var{EXPR}  is omitted, return an array of strings containing all the\n\
+currently installed data types.\n\
+@end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin == 0)
     retval = octave_value_typeinfo::installed_type_names ();
   else if (nargin == 1)
diff --git a/src/ov-usr-fcn.cc b/src/ov-usr-fcn.cc
--- a/src/ov-usr-fcn.cc
+++ b/src/ov-usr-fcn.cc
@@ -474,18 +474,23 @@ octave_user_function::bind_automatic_var
   if (! arg_names.empty ())
     argn_sr->define (arg_names);
 
   nargin_sr->define (static_cast<double> (nargin));
   nargout_sr->define (static_cast<double> (nargout));
 }
 
 DEFUN (va_arg, args, ,
-  "va_arg (): return next argument in a function that takes a\n\
-variable number of parameters")
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} va_arg ()\n\
+Return the value of hte next available argument and move the internal\n\
+pointer to the next argument.  It is an error to call @code{va_arg}\n\
+when ther eare no more arguments available, or in a function that\n\
+has not been declared to take a variable number of parameters.\n\
+@end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 0)
     {
       if (curr_function)
@@ -503,18 +508,23 @@ variable number of parameters")
     }
   else
     print_usage ("va_arg");
 
   return retval;
 }
 
 DEFUN (va_start, args, ,
-  "va_start (): reset the pointer to the list of optional arguments\n\
-to the beginning")
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} va_start ()\n\
+Position an internal pointer to the first unnamed argument in\n\
+functions that have been declared to accept a variable number of\n\
+arguments.  It is an error to call @code{va_start} in a function\n\
+that has not been declared to take a variable number of parameters.\n\
+@end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 0)
     {
       if (curr_function)
@@ -532,18 +542,25 @@ to the beginning")
     }
   else
     print_usage ("va_start");
 
   return retval;
 }
 
 DEFUN (vr_val, args, ,
-  "vr_val (X): append X to the list of optional return values for a\n\
-function that allows a variable number of return values")
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} vr_val (@var{x})\n\
+Each time this function is called, it places the value of its argument\n\
+at the end of the list of values to return from the current\n\
+function.  Once @code{vr_val} has been called, there is no way to go\n\
+back to the beginning of the list and rewrite any of the return\n\
+values.  This function may only be called within functions that have\n\
+been declared to return an unspecified number of output arguments.\n\
+@end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 1)
     {
       if (curr_function)
