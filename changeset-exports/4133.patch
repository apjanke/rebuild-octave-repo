# HG changeset patch
# User jwe
# Date 1035935854 0
#      Tue Oct 29 23:57:34 2002 +0000
# Node ID 402d7b86a0a281f2eec86ecf3bdd40618a9059ff
# Parent  87eb044020aeaa2466b1e5d444e8d002b8a8ea0e
[project @ 2002-10-29 23:57:34 by jwe]

diff --git a/libcruft/ChangeLog b/libcruft/ChangeLog
--- a/libcruft/ChangeLog
+++ b/libcruft/ChangeLog
@@ -1,8 +1,12 @@
+2002-10-29  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* dasrt/ddasrt.f (DDASRT): Fix computation of LENRW.
+
 2002-10-16  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Makefile.in (install): Don't bother with versions for $(SHLBIN)
 	files.
 
 	* slatec-err/xerrwd.f (XERRWD): Print msg(1:nmes), not just msg.
 
 2002-10-14  John W. Eaton  <jwe@bevo.che.wisc.edu>
diff --git a/libcruft/dasrt/ddasrt.f b/libcruft/dasrt/ddasrt.f
--- a/libcruft/dasrt/ddasrt.f
+++ b/libcruft/dasrt/ddasrt.f
@@ -437,23 +437,23 @@ C               will advise you if you a
 C               inform you as to the maximum accuracy it believes
 C               possible.
 C
 C  RWORK(*) --  Dimension this real work array of length LRW in your
 C               calling program.
 C
 C  LRW -- Set it to the declared length of the RWORK array.
 C               You must have
-C                    LRW .GE. 50+(MAXORD+4)*NEQ+NEQ**2
+C                    LRW .GE. 50+(MAXORD+4)*NEQ+NEQ**2+3*NG
 C               for the full (dense) JACOBIAN case (when INFO(6)=0), or
-C                    LRW .GE. 50+(MAXORD+4)*NEQ+(2*ML+MU+1)*NEQ
+C                    LRW .GE. 50+(MAXORD+4)*NEQ+(2*ML+MU+1)*NEQ+3*NG
 C               for the banded user-defined JACOBIAN case
 C               (when INFO(5)=1 and INFO(6)=1), or
 C                     LRW .GE. 50+(MAXORD+4)*NEQ+(2*ML+MU+1)*NEQ
-C                           +2*(NEQ/(ML+MU+1)+1)
+C                           +2*(NEQ/(ML+MU+1)+1)+3*NG
 C               for the banded finite-difference-generated JACOBIAN case
 C               (when INFO(5)=0 and INFO(6)=1)
 C
 C  IWORK(*) --  Dimension this integer work array of length LIW in
 C               your calling program.
 C
 C  LIW -- Set it to the declared length of the IWORK array.
 C               you must have LIW .GE. 20+NEQ
@@ -911,33 +911,33 @@ C     CHECK AND COMPUTE MAXIMUM ORDER
       IF(INFO(9).EQ.0)GO TO 20
          MXORD=IWORK(LMXORD)
          IF(MXORD.LT.1.OR.MXORD.GT.5)GO TO 703
 20       IWORK(LMXORD)=MXORD
 C
 C     COMPUTE MTYPE,LENPD,LENRW.CHECK ML AND MU.
       IF(INFO(6).NE.0)GO TO 40
          LENPD=NEQ**2
-         LENRW=50+(IWORK(LMXORD)+4)*NEQ+LENPD
+         LENRW=50+(IWORK(LMXORD)+4)*NEQ+LENPD+3*NG
          IF(INFO(5).NE.0)GO TO 30
             IWORK(LMTYPE)=2
             GO TO 60
 30          IWORK(LMTYPE)=1
             GO TO 60
 40    IF(IWORK(LML).LT.0.OR.IWORK(LML).GE.NEQ)GO TO 717
       IF(IWORK(LMU).LT.0.OR.IWORK(LMU).GE.NEQ)GO TO 718
       LENPD=(2*IWORK(LML)+IWORK(LMU)+1)*NEQ
       IF(INFO(5).NE.0)GO TO 50
          IWORK(LMTYPE)=5
          MBAND=IWORK(LML)+IWORK(LMU)+1
          MSAVE=(NEQ/MBAND)+1
-         LENRW=50+(IWORK(LMXORD)+4)*NEQ+LENPD+2*MSAVE
+         LENRW=50+(IWORK(LMXORD)+4)*NEQ+LENPD+2*MSAVE+3*NG
          GO TO 60
 50       IWORK(LMTYPE)=4
-         LENRW=50+(IWORK(LMXORD)+4)*NEQ+LENPD
+         LENRW=50+(IWORK(LMXORD)+4)*NEQ+LENPD+3*NG
 C
 C     CHECK LENGTHS OF RWORK AND IWORK
 60    LENIW=20+NEQ
       IWORK(LNPD)=LENPD
       IF(LRW.LT.LENRW)GO TO 704
       IF(LIW.LT.LENIW)GO TO 705
 C
 C     CHECK TO SEE THAT TOUT IS DIFFERENT FROM T
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,13 @@
 2002-10-29  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* DASRT.cc (DASRT::integrate): Fix computation of lrw
+	(ddasrt_f): Combine loops.
+
 	* NLEqn.cc (NLEqn::solve): Return current estimate of solution
 	instead of empty vector if user termninates iteration.
 
 2002-10-28  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* lo-utils.cc (read_inf_nan_na, octave_read_double,
 	octave_read_complex, octave_write_double, octave_write_complex):
 	New functions.
diff --git a/liboctave/DASRT.cc b/liboctave/DASRT.cc
--- a/liboctave/DASRT.cc
+++ b/liboctave/DASRT.cc
@@ -59,22 +59,23 @@ static DAERTFunc::DAERTConstrFunc user_c
 
 static int nn;
 
 static int
 ddasrt_f (const double& t, const double *state, const double *deriv,
 	  double *delta, int& ires, double *rpar, int *ipar)
 {
   ColumnVector tmp_state (nn);
-  for (int i = 0; i < nn; i++)
-    tmp_state(i) = state[i];
+  ColumnVector tmp_deriv (nn);
 
-  ColumnVector tmp_deriv (nn);
   for (int i = 0; i < nn; i++)
-    tmp_deriv(i) = deriv[i];
+    {
+      tmp_state(i) = state[i];
+      tmp_deriv(i) = deriv[i];
+    }
 
   ColumnVector tmp_fval = (*user_fsub) (tmp_state, tmp_deriv, t, ires);
 
   if (tmp_fval.length () == 0)
     ires = -2;
   else
     {
       for (int i = 0; i < nn; i++)
@@ -148,18 +149,47 @@ DASRT::integrate (double tout)
 	info(i) = 0;
 
       pinfo = info.fortran_vec ();
 
       int n = size ();
 
       nn = n;
 
+      // DAERTFunc
+
+      user_csub = DAERTFunc::constraint_function ();
+
+      if (user_csub)
+	{
+	  ColumnVector tmp = (*user_csub) (x, t);
+	  ng = tmp.length ();
+	}
+      else
+	ng = 0;
+
+      int maxord = maximum_order ();
+      if (maxord >= 0)
+	{
+	  if (maxord > 0 && maxord < 6)
+	    {
+	      info(8) = 1;
+	      iwork(2) = maxord;
+	    }
+	  else
+	    {
+	      (*current_liboctave_error_handler)
+		("dassl: invalid value for maximum order");
+	      integration_error = true;
+	      return;
+	    }
+	}
+
       liw = 20 + n;
-      lrw = 50 + 9*n + n*n;
+      lrw = 50 + 9*n + n*n + 3*ng;
 
       iwork.resize (liw);
       rwork.resize (lrw);
 
       info(0) = 0;
 
       if (stop_time_set)
 	{
@@ -205,28 +235,16 @@ DASRT::integrate (double tout)
 	  integration_error = true;
 	  return;
 	}
 
       info(4) = user_jsub ? 1 : 0;
 
       DAEFunc::reset = false;
 
-      // DAERTFunc
-
-      user_csub = DAERTFunc::constraint_function ();
-
-      if (user_csub)
-	{
-	  ColumnVector tmp = (*user_csub) (x, t);
-	  ng = tmp.length ();
-	}
-      else
-	ng = 0;
-
       jroot.resize (ng, 1);
 
       pjroot = jroot.fortran_vec ();
 
       DAERTFunc::reset = false;
 
       // DASRT_options
 
@@ -243,33 +261,16 @@ DASRT::integrate (double tout)
       if (iss >= 0.0)
 	{
 	  rwork(2) = iss;
 	  info(7) = 1;
 	}
       else
 	info(7) = 0;
 
-      int maxord = maximum_order ();
-      if (maxord >= 0)
-	{
-	  if (maxord > 0 && maxord < 6)
-	    {
-	      info(8) = 1;
-	      iwork(2) = maxord;
-	    }
-	  else
-	    {
-	      (*current_liboctave_error_handler)
-		("dassl: invalid value for maximum order");
-	      integration_error = true;
-	      return;
-	    }
-	}
-
       if (step_limit () >= 0)
 	{
 	  info(11) = 1;
 	  iwork(18) = step_limit ();
 	}
       else
 	info(11) = 0;
 
