# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1456890756 28800
#      Tue Mar 01 19:52:36 2016 -0800
# Node ID 64efef931bd05ded6ab4fe8bbb4907fbb3a185a9
# Parent  b9cb3a96849a8ce494912b7c115ab0a919ee7eea
Add BIST tests for bitpack, bitunpack, isglobal, and typecast

* typecast.cc (Ftypecast, Fbitpack, Fbitunpack): Add BIST tests.
* variables.cc (Fisglobal): Add BIST tests.

diff --git a/libinterp/corefcn/typecast.cc b/libinterp/corefcn/typecast.cc
--- a/libinterp/corefcn/typecast.cc
+++ b/libinterp/corefcn/typecast.cc
@@ -251,16 +251,44 @@ typecast (@var{x}, \"uint8\")\n\
     retval = reinterpret_copy<ComplexNDArray> (data, byte_size, old_dims);
 
   if (retval.is_undefined ())
     error ("typecast: cannot convert to %s class", numclass.c_str ());
 
   return retval;
 }
 
+/*
+%!assert (typecast (int64 (0), "char"),   char (zeros (1, 8)))
+%!assert (typecast (int64 (0), "int8"),   zeros (1, 8, "int8"))
+%!assert (typecast (int64 (0), "uint8"),  zeros (1, 8, "uint8"))
+%!assert (typecast (int64 (0), "int16"),  zeros (1, 4, "int16"))
+%!assert (typecast (int64 (0), "uint16"), zeros (1, 4, "uint16"))
+%!assert (typecast (int64 (0), "int32"),  zeros (1, 2, "int32"))
+%!assert (typecast (int64 (0), "uint32"), zeros (1, 2, "uint32"))
+%!assert (typecast (int64 (0), "int64"),  zeros (1, 1, "int64"))
+%!assert (typecast (int64 (0), "uint64"), zeros (1, 1, "uint64"))
+%!assert (typecast (int64 (0), "single"), zeros (1, 2, "single"))
+%!assert (typecast (int64 (0), "double"), 0)
+%!assert (typecast (int64 (0), "single complex"), single (0))
+%!assert (typecast (int64 ([0 0]), "double complex"), 0)
+
+%!assert (typecast ([],   "double"), [])
+%!assert (typecast (0,    "double"), 0)
+%!assert (typecast (inf,  "double"), inf)
+%!assert (typecast (-inf, "double"), -inf)
+%!assert (typecast (nan,  "double"), nan)
+
+%!error typecast ()
+%!error typecast (1)
+%!error typecast (1, 2, 3)
+%!error typecast (1, "invalid")
+%!error typecast (int8 (0), "double")
+*/
+
 template <typename ArrayType>
 ArrayType
 do_bitpack (const boolNDArray& bitp)
 {
   typedef typename ArrayType::element_type T;
   octave_idx_type n
     = bitp.numel () / (sizeof (T) * std::numeric_limits<unsigned char>::digits);
 
@@ -371,16 +399,40 @@ column vector.\n\
     retval = do_bitpack<ComplexNDArray> (bitp);
 
   if (retval.is_undefined ())
     error ("bitpack: cannot pack to %s class", numclass.c_str ());
 
   return retval;
 }
 
+/*
+%!assert (bitpack (zeros (1, 8,   "logical"), "char"),   "\0")
+%!assert (bitpack (zeros (1, 8,   "logical"), "int8"),   int8 (0))
+%!assert (bitpack (zeros (1, 8,   "logical"), "uint8"),  uint8 (0))
+%!assert (bitpack (zeros (1, 16,  "logical"), "int16"),  int16 (0))
+%!assert (bitpack (zeros (1, 16,  "logical"), "uint16"), uint16 (0))
+%!assert (bitpack (zeros (1, 32,  "logical"), "int32"),  int32 (0))
+%!assert (bitpack (zeros (1, 32,  "logical"), "uint32"), uint32 (0))
+%!assert (bitpack (zeros (1, 64,  "logical"), "int64"),  int64 (0))
+%!assert (bitpack (zeros (1, 64,  "logical"), "uint64"), uint64 (0))
+%!assert (bitpack (zeros (1, 32,  "logical"), "single"), single (0))
+%!assert (bitpack (zeros (1, 64,  "logical"), "double"), double (0))
+%!assert (bitpack (zeros (1, 64,  "logical"), "single complex"), single (0))
+%!assert (bitpack (zeros (1, 128, "logical"), "double complex"), double (0))
+
+%!error bitpack ()
+%!error bitpack (1)
+%!error bitpack (1, 2, 3)
+%!error bitpack (1, "invalid")
+%!error bitpack (1, "double")
+%!error bitpack (false, "invalid")
+%!error bitpack (false, "double")
+*/
+
 template <typename ArrayType>
 boolNDArray
 do_bitunpack (const ArrayType& array)
 {
   typedef typename ArrayType::element_type T;
   octave_idx_type n = array.numel () * sizeof (T)
                       * std::numeric_limits<unsigned char>::digits;
 
@@ -480,8 +532,29 @@ column vector.\n\
         retval = do_bitunpack (array.array_value ());
     }
   else
     error ("bitunpack: invalid input class: %s",
            array.class_name ().c_str ());
 
   return retval;
 }
+
+/*
+%!assert (bitunpack ("\0"),       zeros (1, 8,  "logical"))
+%!assert (bitunpack (int8 (0)),   zeros (1, 8,  "logical"))
+%!assert (bitunpack (uint8 (0)),  zeros (1, 8,  "logical"))
+%!assert (bitunpack (int16 (0)),  zeros (1, 16, "logical"))
+%!assert (bitunpack (uint16 (0)), zeros (1, 16, "logical"))
+%!assert (bitunpack (int32 (0)),  zeros (1, 32, "logical"))
+%!assert (bitunpack (uint32 (0)), zeros (1, 32, "logical"))
+%!assert (bitunpack (int64 (0)),  zeros (1, 64, "logical"))
+%!assert (bitunpack (uint64 (0)), zeros (1, 64, "logical"))
+%!assert (bitunpack (single (0)), zeros (1, 32, "logical"))
+%!assert (bitunpack (double (0)), zeros (1, 64, "logical"))
+%!assert (bitunpack (complex (single (0))), zeros (1, 64, "logical"))
+%!assert (bitunpack (complex (double (0))), zeros (1, 128, "logical"))
+
+%!error bitunpack ()
+%!error bitunpack (1, 2)
+%!error bitunpack ({})
+*/
+
diff --git a/libinterp/corefcn/variables.cc b/libinterp/corefcn/variables.cc
--- a/libinterp/corefcn/variables.cc
+++ b/libinterp/corefcn/variables.cc
@@ -350,16 +350,26 @@ isglobal (\"x\")\n\
 @end group\n\
 @end example\n\
 @seealso{isvarname, exist}\n\
 @end deftypefn")
 {
   return do_isglobal (args);
 }
 
+/*
+%!test
+%! global x;
+%! assert (isglobal ("x"), true)
+
+%!error isglobal ()
+%!error isglobal ("a", "b")
+%!error isglobal (1)
+*/
+
 static octave_value
 safe_symbol_lookup (const std::string& symbol_name)
 {
   octave_value retval;
 
   unwind_protect frame;
   interpreter_try (frame);
 
