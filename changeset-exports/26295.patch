# HG changeset patch
# User Rik <rik@octave.org>
# Date 1545597383 28800
#      Sun Dec 23 12:36:23 2018 -0800
# Node ID 12f26c02643b6c245172ff908d064ae947fe330d
# Parent  cfa0429b7d5a60229066075040298ebea433e802
# Parent  3c5863948bb34a97088bc7154723a581cc21017a
maint: merge stable to default.

diff --git a/CITATION b/CITATION
--- a/CITATION
+++ b/CITATION
@@ -1,19 +1,19 @@
 To cite GNU Octave in publications use:
 
-  John W. Eaton, David Bateman, Søren Hauberg, Rik Wehbring (2018).
-  GNU Octave version 4.4.1 manual: a high-level interactive language for
+  John W. Eaton, David Bateman, Søren Hauberg, Rik Wehbring (2019).
+  GNU Octave version 5.1.0 manual: a high-level interactive language for
   numerical computations.
-  URL https://www.gnu.org/software/octave/doc/v4.4.1/
+  URL https://www.gnu.org/software/octave/doc/v5.1.0/
 
 A BibTeX entry for LaTeX users is:
 
   @manual{,
-    title     = {{GNU Octave} version 4.4.0 manual: a high-level interactive language for numerical computations},
+    title     = {{GNU Octave} version 5.1.0 manual: a high-level interactive language for numerical computations},
     author    = {John W. Eaton and David Bateman and S{\o}ren Hauberg and Rik Wehbring},
-    year      = {2018},
-    url       = {https://www.gnu.org/software/octave/doc/v4.4.1/},
+    year      = {2019},
+    url       = {https://www.gnu.org/software/octave/doc/v5.1.0/},
   }
 
 We have invested a lot of time and effort in creating GNU Octave, please
 cite it when using it.  See also `citation pkgname' for citing Octave
 packages.
diff --git a/doc/interpreter/func.txi b/doc/interpreter/func.txi
--- a/doc/interpreter/func.txi
+++ b/doc/interpreter/func.txi
@@ -1093,17 +1093,19 @@ amount of disk space used by Octave.  In
 file a certain function will be found.
 
 @DOCSTRING(autoload)
 
 @node Function Locking
 @subsection Function Locking
 
 It is sometime desirable to lock a function into memory with the @code{mlock}
-function.  This is typically used for dynamically linked functions in oct-files or mex-files that contain some initialization, and it is desirable that calling @code{clear} does not remove this initialization.
+function.  This is typically used for dynamically linked functions in
+oct-files or mex-files that contain some initialization, and it is desirable
+that calling @code{clear} does not remove this initialization.
 
 As an example,
 
 @example
 @group
 function my_function ()
   mlock ();
   @dots{}
diff --git a/doc/interpreter/image.txi b/doc/interpreter/image.txi
--- a/doc/interpreter/image.txi
+++ b/doc/interpreter/image.txi
@@ -135,49 +135,50 @@ A pixel in a binary image is black if it
 if it is @code{true}.
 
 An indexed image consists of an M-by-N matrix of integers
 and a C-by-3 color map.  Each integer corresponds to an
 index in the color map, and each row in the color map corresponds to
 an RGB color.  The color map must be of class @code{double} with values
 between 0 and 1.
 
-The following convenience functions are available for conversion between image 
+The following convenience functions are available for conversion between image
 formats.
 
 @DOCSTRING(im2double)
 
 @DOCSTRING(gray2ind)
 
 @DOCSTRING(ind2gray)
 
 @DOCSTRING(rgb2ind)
 
 @DOCSTRING(ind2rgb)
 
-Octave also provides tools to produce and work with movie frame structures. 
-Those structures encapsulate the image data (@qcode{"cdata"} field) together 
+Octave also provides tools to produce and work with movie frame structures.
+Those structures encapsulate the image data (@qcode{"cdata"} field) together
 with the corresponding colormap (@qcode{"colormap"} field).
 
 @DOCSTRING(getframe)
 
 @DOCSTRING(movie)
 
 @DOCSTRING(frame2im)
 
 @DOCSTRING(im2frame)
 
-The @code{colormap} function is used to change the colormap of the current axes or figure.
+The @code{colormap} function is used to change the colormap of the current
+axes or figure.
 
 @DOCSTRING(colormap)
 
 @DOCSTRING(iscolormap)
 
-The following functions return predefined colormaps, the same that can be 
-requested by name using the @code{colormap} function. 
+The following functions return predefined colormaps, the same that can be
+requested by name using the @code{colormap} function.
 
 @DOCSTRING(rgbplot)
 
 @DOCSTRING(autumn)
 
 @DOCSTRING(bone)
 
 @DOCSTRING(colorcube)
diff --git a/doc/interpreter/oop.txi b/doc/interpreter/oop.txi
--- a/doc/interpreter/oop.txi
+++ b/doc/interpreter/oop.txi
@@ -148,17 +148,19 @@ To inquire whether a particular method e
 @code{ismethod} function can be used.
 
 @DOCSTRING(ismethod)
 
 @noindent
 For a polynomial class it makes sense to have a method to compute its roots.
 
 @example
+@group
 @EXAMPLEFILE(@polynomial/roots.m)
+@end group
 @end example
 
 We can check for the existence of the @code{roots}-method by calling:
 
 @example
 @group
 p = polynomial ([1, 0, 1]);
 ismethod (p, "roots")
diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -2140,23 +2140,19 @@ namespace octave
         return;
       }
 
     // save the contents into the file
 
     _encoding = _new_encoding;    // consider a possible new encoding
 
     // set the desired codec (if suitable for contents)
-    QTextCodec *codec = QTextCodec::codecForName (_encoding.toLatin1 ());
-
-    if (check_valid_codec (codec))
-      {
-        save_file_as (remove_on_success);
-        return;
-      }
+    QTextCodec *codec = check_valid_codec ();
+    if (! codec)
+      return;   // No valid codec
 
     // write the file
     QTextStream out (&file);
     out.setCodec (codec);
 
     QApplication::setOverrideCursor (Qt::WaitCursor);
     out << _edit_area->text ();
     out.flush ();
@@ -2300,44 +2296,49 @@ namespace octave
 
         if (ans == QMessageBox::Yes)
           return true;
       }
 
     return false;
   }
 
-  bool file_editor_tab::check_valid_codec (QTextCodec *codec)
+  QTextCodec* file_editor_tab::check_valid_codec ()
   {
+    QTextCodec *codec = QTextCodec::codecForName (_encoding.toLatin1 ());
+
+    // "SYSTEM" is used as alias for locale on windows systems,
+    // which might not support "SYSTEM" codec
+    if ((! codec) && (_encoding == "SYSTEM"))
+      codec = QTextCodec::codecForLocale ();
+
     if (! codec)
       {
         QMessageBox::critical (nullptr,
                                tr ("Octave Editor"),
                                tr ("The current encoding %1\n"
                                    "can not be applied.\n\n"
-                                   "Please select another one or cancel saving!").arg (_encoding));
-
-        return true;
+                                   "Please select another one!").arg (_encoding));
+
+        return nullptr;
       }
 
     if (! codec->canEncode (_edit_area->text ()))
       {
-        int ans = QMessageBox::warning (nullptr,
-                                        tr ("Octave Editor"),
-                                        tr ("The current editor contents can not be encoded\n"
-                                            "with the selected encoding %1.\n"
-                                            "Using it will result in data loss!\n\n"
-                                            "Do you want to choose another encoding?").arg (_encoding),
-                                        QMessageBox::Yes | QMessageBox::No, QMessageBox::Yes);
-
-        if (ans == QMessageBox::Yes)
-          return true;
+        QMessageBox::critical (nullptr,
+                               tr ("Octave Editor"),
+                               tr ("The current editor contents can not be encoded\n"
+                                   "with the selected encoding %1.\n"
+                                   "Using it would result in data loss!\n\n"
+                                   "Please select another one!").arg (_encoding));
+
+        return nullptr;
       }
 
-    return false;
+    return codec;
   }
 
   void file_editor_tab::handle_save_file_as_answer (const QString& saveFileName)
   {
     if (_save_as_desired_eol != _edit_area->eolMode ())
       convert_eol (this,_save_as_desired_eol);
 
     if (saveFileName == _file_name)
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -246,17 +246,17 @@ namespace octave
 
     bool valid_file_name (const QString& file = QString ());
     bool exit_debug_and_clear (const QString& full_name,
                                const QString& base_name);
     void save_file (const QString& saveFileName, bool remove_on_success = false,
                     bool restore_breakpoints = true);
     void save_file_as (bool remove_on_success = false);
     bool check_valid_identifier (QString file_name);
-    bool check_valid_codec (QTextCodec *codec);
+    QTextCodec* check_valid_codec (void);
 
     bool unchanged_or_saved (void);
 
     void update_lexer (void);
     void update_lexer_settings (void);
 
     void show_dialog (QDialog *dlg, bool modal);
     int check_file_modified (void);
diff --git a/libgui/src/resource-manager.cc b/libgui/src/resource-manager.cc
--- a/libgui/src/resource-manager.cc
+++ b/libgui/src/resource-manager.cc
@@ -381,31 +381,40 @@ namespace octave
   {
     // get the codec name for each mib
     QList<int> all_mibs = QTextCodec::availableMibs ();
     foreach (int mib, all_mibs)
       {
         QTextCodec *c = QTextCodec::codecForMib (mib);
         codecs->append (c->name ().toUpper ());
       }
+
+    // If on windows append SYSTEM even if not supported
+    if (ed_default_enc.def.toString () == "SYSTEM")
+      codecs->append (ed_default_enc.def.toString ());
+
+    // Clean up and sort list of codecs
     codecs->removeDuplicates ();
     qSort (*codecs);
   }
 
   // initialize a given combo box with available text encodings
   void resource_manager::do_combo_encoding (QComboBox *combo, QString current)
   {
     QStringList all_codecs;
     do_get_codecs (&all_codecs);
 
     // get the value from the settings file if no current encoding is given
     QString enc = current;
 
+    // Check for valid codec for the default. Allow "SYSTEM" even no valid
+    // codec exists, since codecForLocale will be chosen in this case
     bool default_exists = false;
-    if (QTextCodec::codecForName (ed_default_enc.def.toString ().toLatin1 ()))
+    if (QTextCodec::codecForName (ed_default_enc.def.toString ().toLatin1 ())
+        || (ed_default_enc.def.toString () == "SYSTEM"))
       default_exists = true;
 
     if (enc.isEmpty ())
       {
         enc = m_settings->value (ed_default_enc.key, ed_default_enc.def).toString ();
 
         if (enc.isEmpty ())  // still empty?
           {
diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -567,27 +567,30 @@ The remainder is computed using the expr
 
 @example
 x - y .* fix (x ./ y)
 @end example
 
 An error message is printed if the dimensions of the arguments do not agree,
 or if either argument is complex.
 
-Programming Notes: Floating point numbers within a few eps of an integer
-will be rounded to an integer before computation for compatibility with
-@sc{matlab}.
+Programming Notes: When calculating with floating point numbers (double,
+single), values within a few eps of an integer will be rounded to that
+integer before computation for compatibility with @sc{matlab}.  Any floating
+point integers greater than @code{flintmax} (2^53 for double) will not compute
+correctly.  For larger integer values convert the input to @code{uint64} before
+calling this function.
 
 By convention,
 
 @example
 @group
 rem (@var{x}, 0) = NaN  if @var{x} is a floating point variable
 rem (@var{x}, 0) = 0    if @var{x} is an integer variable
-rem (@var{x}, @var{y})        returns a value with the signbit from @var{x}
+rem (@var{x}, @var{y})  returns a value with the signbit from @var{x}
 @end group
 @end example
 
 For the opposite conventions see the @code{mod} function.  In general,
 @code{rem} is best when computing the remainder after division of two
 @emph{positive} numbers.  For negative numbers, or when the values are
 periodic, @code{mod} is a better choice.
 @seealso{mod}
@@ -748,19 +751,22 @@ x - y .* floor (x ./ y)
 @noindent
 and is written such that the correct modulus is returned for integer types.
 This function handles negative values correctly.  That is,
 @w{@code{mod (-1, 3)}} is 2, not -1, as @w{@code{rem (-1, 3)}} returns.
 
 An error results if the dimensions of the arguments do not agree, or if
 either of the arguments is complex.
 
-Programming Notes: Floating point numbers within a few eps of an integer
-will be rounded to an integer before computation for compatibility with
-@sc{matlab}.
+Programming Notes: When calculating with floating point numbers (double,
+single), values within a few eps of an integer will be rounded to that
+integer before computation for compatibility with @sc{matlab}.  Any floating
+point integers greater than @code{flintmax} (2^53 for double) will not compute
+correctly.  For larger integer values convert the input to @code{uint64} before
+calling this function.
 
 By convention,
 
 @example
 @group
 mod (@var{x}, 0) = @var{x}
 mod (@var{x}, @var{y})      returns a value with the signbit from @var{y}
 @end group
diff --git a/libinterp/octave-value/ov-fcn-handle.cc b/libinterp/octave-value/ov-fcn-handle.cc
--- a/libinterp/octave-value/ov-fcn-handle.cc
+++ b/libinterp/octave-value/ov-fcn-handle.cc
@@ -1845,17 +1845,17 @@ function handle @var{fcn_handle}.
   else
     retval = fh_nm;
 
   return retval;
 }
 
 DEFMETHOD (str2func, interp, args, ,
            doc: /* -*- texinfo -*-
-@deftypefn  {} {} str2func (@var{fcn_name})
+@deftypefn {} {} str2func (@var{fcn_name})
 Return a function handle constructed from the string @var{fcn_name}.
 
 Previous versions of Octave accepted an optional second argument,
 @qcode{"global"}, that caused str2func to ignore locally visible
 functions.  This option is no longer supported.
 @seealso{func2str, inline, functions}
 @end deftypefn */)
 {
diff --git a/scripts/general/flip.m b/scripts/general/flip.m
--- a/scripts/general/flip.m
+++ b/scripts/general/flip.m
@@ -23,17 +23,16 @@
 ## Return a copy of array @var{x} flipped across dimension @var{dim}.
 ##
 ## If @var{dim} is unspecified it defaults to the first non-singleton
 ## dimension.
 ##
 ## Examples:
 ##
 ## @example
-## @group
 ## ## row vector
 ## flip ([1  2  3  4])
 ##       @result{}  4  3  2  1
 ##
 ## ## column vector
 ## flip ([1; 2; 3; 4])
 ##       @result{}  4
 ##           3
@@ -44,17 +43,16 @@
 ## flip ([1 2; 3 4])
 ##       @result{}  3  4
 ##           1  2
 ##
 ## ## 2-D matrix along dimension 2
 ## flip ([1 2; 3 4], 2)
 ##       @result{}  2  1
 ##           4  3
-## @end group
 ## @end example
 ##
 ## @seealso{fliplr, flipud, rot90, rotdim, permute, transpose}
 ## @end deftypefn
 
 ## Author: David Bateman, Jaroslav Hajek
 
 function y = flip (x, dim)
diff --git a/scripts/geometry/convhull.m b/scripts/geometry/convhull.m
--- a/scripts/geometry/convhull.m
+++ b/scripts/geometry/convhull.m
@@ -21,17 +21,17 @@
 ## @deftypefnx {} {@var{H} =} convhull (@var{x}, @var{y}, @var{z})
 ## @deftypefnx {} {@var{H} =} convhull (@var{x})
 ## @deftypefnx {} {@var{H} =} convhull (@dots{}, @var{options})
 ## @deftypefnx {} {[@var{H}, @var{V}] =} convhull (@dots{})
 ## Compute the convex hull of a 2-D or 3-D set of points.
 ##
 ## The hull @var{H} is a linear index vector into the original set of points
 ## that specifies which points form the enclosing hull.  For 2-D inputs only,
-## the output is ordered in a counter-clockwise manner around the hull.
+## the output is ordered in a counterclockwise manner around the hull.
 ##
 ## The input @var{x} may also be a matrix with two or three columns where the
 ## first column contains x-data, the second y-data, and the optional third
 ## column contains z-data.
 ##
 ## An optional final argument, which must be a string or cell array of strings,
 ## contains options passed to the underlying qhull command.
 ## See the documentation for the Qhull library for details
diff --git a/scripts/help/__unimplemented__.m b/scripts/help/__unimplemented__.m
--- a/scripts/help/__unimplemented__.m
+++ b/scripts/help/__unimplemented__.m
@@ -362,107 +362,128 @@ function txt = __unimplemented__ (fcn)
           "triang", "tripuls", "tukeywin", "udecode", "uencode", ...
           "undershoot", "unshiftdata", "upfirdn", "upsample", ...
           "validstructures", "vco", "window", "wintool", "wvtool", "xcorr", ...
           "xcorr2", "xcov", "yulewalk", "zerophase", "zp2sos", "zp2ss", ...
           "zp2tf", "zplane"}
       txt = check_package (fcn, "signal");
 
     ## statistics
-    case {"addedvarplot", "addlevels", "addTerms", "adtest", ...
-          "andrewsplot", "anova1", "anova2", "anovan", "ansaribradley", ...
-          "aoctool", "barttest", "bbdesign", "betafit", "betalike", ...
-          "betastat", "binofit", "binostat", "biplot", "bootci", "bootstrp", ...
-          "boxplot", "candexch", "candgen", "canoncorr", "capability", ...
-          "capaplot", "caseread", "casewrite", "ccdesign", "cdf", ...
-          "cdfplot", "cell2dataset", "chi2gof", "chi2stat", "cholcov", ...
+    case {"addedvarplot", "addlevels", "addTerms", "adtest", "andrewsplot", ...
+          "anova", "anova1", "anova2", "anovan", "ansaribradley", ...
+          "aoctool", "bartlett_test", "barttest", "bbdesign", "betacdf", ...
+          "betafit", "betainv", "betalike", "betapdf", "betarnd", ...
+          "betastat", "binocdf", "binofit", "binoinv", "binopdf", ...
+          "binornd", "binostat", "biplot", "bootci", "bootstrp", "boxplot", ...
+          "candexch", "candgen", "canoncorr", "capability", "capaplot", ...
+          "caseread", "casewrite", "cauchy_cdf", "cauchy_inv", ...
+          "cauchy_pdf", "cauchy_rnd", "ccdesign", "cdf", "cdfplot", ...
+          "cell2dataset", "chi2cdf", "chi2gof", "chi2inv", "chi2pdf", ...
+          "chi2rnd", "chi2stat", "chisquare_test_homogeneity", ...
+          "chisquare_test_independence", "cholcov", ...
           "ClassificationBaggedEnsemble", "ClassificationDiscriminant", ...
           "ClassificationEnsemble", "ClassificationKNN", ...
           "ClassificationPartitionedEnsemble", ...
           "ClassificationPartitionedModel", "ClassificationTree", ...
-          "classify", "classregtree", "cluster", "clusterdata", "cmdscale", ...
-          "coefCI", "coefTest",  ...
-          "combnk", "compact", ...
+          "classify", "classregtree", "cloglog", "cluster", "clusterdata", ...
+          "cmdscale", "coefCI", "coefTest", "combnk", "compact", ...
           "CompactClassificationDiscriminant", ...
           "CompactClassificationEnsemble", "CompactClassificationTree", ...
           "CompactRegressionEnsemble", "CompactRegressionTree", ...
           "CompactTreeBagger", "compare", "confusionmat", "controlchart", ...
           "controlrules", "cophenet", "copulacdf", "copulafit", ...
-          "copulaparam", "copulapdf", "copularnd", "copulastat", "cordexch", ...
-          "corrcov", "covarianceParameters", "coxphfit", "createns", ...
-          "crosstab", "crossval", "cvpartition", "datasample", "dataset", ...
-          "dataset2cell", "dataset2struct", "dataset2table", "datasetfun", ...
-          "daugment", "dcovary", "dendrogram", "designMatrix", ...
-          "devianceTest", "dfittool",  ...
+          "copulaparam", "copulapdf", "copularnd", "copulastat", ...
+          "cordexch", "corrcov", "cor_test", "covarianceParameters", ...
+          "coxphfit", "createns", "crosstab", "crossval", "cvpartition", ...
+          "datasample", "dataset", "dataset2cell", "dataset2struct", ...
+          "dataset2table", "datasetfun", "daugment", "dcovary", ...
+          "dendrogram", "designMatrix", "devianceTest", "dfittool", ...
           "disttool", "droplevels", "dummyvar", "dwtest", "ecdf", ...
           "ecdfhist", "evalclusters", "evcdf", "evfit", "evinv", "evlike", ...
-          "evpdf", "evrnd", "evstat", "ExhaustiveSearcher", "expfit", ...
-          "explike", "export", "expstat", "factoran", ...
-          "ff2n", "fitdist", "fitensemble", "fitglm", "fitlm", ...
-          "fitlme", "fitlmematrix", "fitnlm", "fitted", "fixedEffects", ...
-          "fracfact", "fracfactgen", "friedman", "fsurfht", "fullfact", ...
-          "gagerr", "gamfit", "gamlike", "gamstat", ...
-          "GeneralizedLinearModel", "geomean", "geostat", "getlabels", ...
-          "getlevels", "gevcdf", "gevfit", "gevinv", "gevlike", "gevpdf", ...
-          "gevrnd", "gevstat", "gline", "glmfit", "glmval", "glyphplot", ...
+          "evpdf", "evrnd", "evstat", "ExhaustiveSearcher", "expcdf", ...
+          "expfit", "expinv", "explike", "export", "exppdf", "exprnd", ...
+          "expstat", "factoran", "fcdf", "ff2n", "finv", "fitdist", ...
+          "fitensemble", "fitglm", "fitlm", "fitlme", "fitlmematrix", ...
+          "fitnlm", "fitted", "fixedEffects", "fpdf", "fracfact", ...
+          "fracfactgen", "friedman", "frnd", "fsurfht", "fullfact", ...
+          "f_test_regression", "gagerr", "gamcdf", "gamfit", "gaminv", ...
+          "gamlike", "gampdf", "gamrnd", "gamstat", ...
+          "GeneralizedLinearModel", "geocdf", "geoinv", "geomean", ...
+          "geopdf", "geornd", "geostat", "getlabels", "getlevels", ...
+          "gevcdf", "gevfit", "gevinv", "gevlike", "gevpdf", "gevrnd", ...
+          "gevstat", "gline", "glmfit", "glmval", "glyphplot", ...
           "gmdistribution", "gname", "gpcdf", "gpfit", "gpinv", "gplike", ...
           "gplotmatrix", "gppdf", "gprnd", "gpstat", "grp2idx", "grpstats", ...
           "gscatter", "haltonset", "harmmean", "hist3", "histfit", ...
           "hmmdecode", "hmmestimate", "hmmgenerate", "hmmtrain", ...
-          "hmmviterbi", "hougen", "hygestat", "icdf", ...
+          "hmmviterbi", "hotelling_test", "hotelling_test_2", "hougen", ...
+          "hygecdf", "hygeinv", "hygepdf", "hygernd", "hygestat", "icdf", ...
           "inconsistent", "interactionplot", "invpred", "islevel", ...
           "ismissing", "isundefined", "iwishrnd", "jackknife", "jbtest", ...
           "johnsrnd", "join", "KDTreeSearcher", "kmeans", "knnsearch", ...
-          "kruskalwallis", "ksdensity", "kstest", "kstest2", "labels", ...
-          "lasso", "lassoglm", "lassoPlot", "levelcounts", "leverage", ...
-          "lhsdesign", "lhsnorm", "lillietest", "LinearMixedModel", ...
-          "LinearModel", "linhyptest", "linkage", "lognfit", "lognlike", ...
+          "kolmogorov_smirnov_cdf", "kolmogorov_smirnov_test", ...
+          "kolmogorov_smirnov_test_2", "kruskalwallis", ...
+          "kruskal_wallis_test", "ksdensity", "kstest", "kstest2", ...
+          "labels", "laplace_cdf", "laplace_inv", "laplace_pdf", ...
+          "laplace_rnd", "lasso", "lassoglm", "lassoPlot", "levelcounts", ...
+          "leverage", "lhsdesign", "lhsnorm", "lillietest", ...
+          "LinearMixedModel", "LinearModel", "linhyptest", "linkage", ...
+          "logistic_cdf", "logistic_inv", "logistic_pdf", ...
+          "logistic_regression", "logistic_rnd", "logit", "logncdf", ...
+          "lognfit", "logninv", "lognlike", "lognpdf", "lognrnd", ...
           "lognstat", "lsline", "mad", "mahal", "maineffectsplot", ...
-          "makedist", "manova1", "manovacluster", "mat2dataset", "mdscale", ...
-          "mergelevels", "mhsample", "mle", "mlecov", "mnpdf", "mnrfit", ...
-          "mnrnd", "mnrval", "multcompare", "multivarichart", "mvncdf", ...
-          "mvnpdf", "mvnrnd", "mvregress", "mvregresslike", "mvtcdf", ...
-          "mvtpdf", "mvtrnd", "NaiveBayes", "nancov", "nanmax", "nanmean", ...
-          "nanmedian", "nanmin", "nanstd", "nansum", "nanvar", "nbinfit", ...
-          "nbinstat", "ncfcdf", "ncfinv", "ncfpdf", "ncfrnd", "ncfstat", ...
-          "nctcdf", "nctinv", "nctpdf", "nctrnd", "nctstat", "ncx2cdf", ...
-          "ncx2inv", "ncx2pdf", "ncx2rnd", "ncx2stat", "negloglik", ...
-          "nlinfit", "nlintool", "nlmefit", "nlmefitsa", ...
+          "makedist", "manova", "manova1", "manovacluster", "mat2dataset", ...
+          "mcnemar_test", "mdscale", "mergelevels", "mhsample", "mle", ...
+          "mlecov", "mnpdf", "mnrfit", "mnrnd", "mnrval", "multcompare", ...
+          "multivarichart", "mvncdf", "mvnpdf", "mvnrnd", "mvregress", ...
+          "mvregresslike", "mvtcdf", "mvtpdf", "mvtrnd", "NaiveBayes", ...
+          "nancov", "nanmax", "nanmean", "nanmedian", "nanmin", "nanstd", ...
+          "nansum", "nanvar", "nbincdf", "nbinfit", "nbininv", "nbinpdf", ...
+          "nbinrnd", "nbinstat", "ncfcdf", "ncfinv", "ncfpdf", "ncfrnd", ...
+          "ncfstat", "nctcdf", "nctinv", "nctpdf", "nctrnd", "nctstat", ...
+          "ncx2cdf", "ncx2inv", "ncx2pdf", "ncx2rnd", "ncx2stat", ...
+          "negloglik", "nlinfit", "nlintool", "nlmefit", "nlmefitsa", ...
           "nlparci", "nlpredci", "nnmf", "nominal", "NonLinearModel", ...
-          "normfit", "normlike", "normplot", "normspec", "normstat", ...
+          "normcdf", "normfit", "norminv", "normlike", "normpdf", ...
+          "normplot", "normrnd", "normspec", "normstat", ...
           "optimalleaforder", "ordinal", "parallelcoords", "paramci", ...
           "paretotails", "partialcorr", "partialcorri", "pca", "pcacov", ...
-          "pcares", "pdf", "pdist", "pdist2", "pearsrnd", ...
-          "perfcurve", "plotAdded", "plotAdjustedResponse", ...
-          "plotDiagnostics", ...
-          "plotEffects", "plotInteraction", "plotResiduals", ...
-          "plotSlice", ...
-          "plsregress", "poissfit", "poisstat", ...
-          "polyconf", "polytool", "ppca", "predict", ...
-          "princomp", ...
-          "ProbDistUnivKernel", "ProbDistUnivParam", "probplot", ...
-          "procrustes", "proflik", "qrandset", "qrandstream", "random", ...
-          "randomEffects", ...
-          "randsample", "randtool", "rangesearch", "ranksum", "raylcdf", ...
-          "raylfit", "raylinv", "raylpdf", "raylrnd", "raylstat", "rcoplot", ...
-          "refcurve", "refline", "regress", "RegressionBaggedEnsemble", ...
+          "pcares", "pdf", "pdist", "pdist2", "pearsrnd", "perfcurve", ...
+          "plotAdded", "plotAdjustedResponse", "plotDiagnostics", ...
+          "plotEffects", "plotInteraction", "plotResiduals", "plotSlice", ...
+          "plsregress", "poisscdf", "poissfit", "poissinv", "poisspdf", ...
+          "poissrnd", "poisstat", "polyconf", "polytool", "ppca", ...
+          "prctile", "predict", "princomp", "ProbDistUnivKernel", ...
+          "ProbDistUnivParam", "probit", "probplot", "procrustes", ...
+          "proflik", "prop_test_2", "qqplot", "qrandset", "qrandstream", ...
+          "random", "randomEffects", "randsample", "randtool", ...
+          "rangesearch", "ranksum", "raylcdf", "raylfit", "raylinv", ...
+          "raylpdf", "raylrnd", "raylstat", "rcoplot", "refcurve", ...
+          "refline", "regress", "RegressionBaggedEnsemble", ...
           "RegressionEnsemble", "RegressionPartitionedEnsemble", ...
           "RegressionPartitionedModel", "RegressionTree", "regstats", ...
-          "relieff", "removeTerms", "residuals", "response", ...
-          "ridge", "robustdemo", "robustfit", "rotatefactors", "rowexch", ...
-          "rsmdemo", "rstool", "runstest", "sampsizepwr", "scatterhist", ...
-          "sequentialfs", "setlabels", "signrank", "signtest", "silhouette", ...
-          "slicesample", "sobolset", "squareform", "statget", "statset", ...
-          "step", "stepwise", "stepwisefit", "stepwiseglm", ...
-          "stepwiselm", "struct2dataset", "surfht", "svmclassify", ...
-          "svmtrain", "table2dataset", "tabulate", "tblread", "tblwrite", ...
-          "tdfread", "tiedrank", "TreeBagger", "trimmean", "truncate", ...
-          "tstat", "ttest", "ttest2", "unidstat", "unifit", "unifstat", ...
-          "vartest", "vartest2", "vartestn", "wblfit", "wbllike", "wblplot", ...
-          "wblstat", "wishrnd", "x2fx", "xlsread", "xptread", "ztest"}
+          "relieff", "removeTerms", "residuals", "response", "ridge", ...
+          "robustdemo", "robustfit", "rotatefactors", "rowexch", "rsmdemo", ...
+          "rstool", "runstest", "run_test", "sampsizepwr", "scatterhist", ...
+          "sequentialfs", "setlabels", "signrank", "signtest", "sign_test", ...
+          "silhouette", "slicesample", "sobolset", "squareform", "statget", ...
+          "statset", "stdnormal_cdf", "stdnormal_inv", "stdnormal_pdf", ...
+          "stdnormal_rnd", "step", "stepwise", "stepwisefit", ...
+          "stepwiseglm", "stepwiselm", "struct2dataset", "surfht", ...
+          "svmclassify", "svmtrain", "table2dataset", "tabulate", ...
+          "tblread", "tblwrite", "tcdf", "tdfread", "tiedrank", "tinv", ...
+          "tpdf", "TreeBagger", "trimmean", "trnd", "truncate", "tstat", ...
+          "ttest", "ttest2", "t_test", "t_test_2", "t_test_regression", ...
+          "unidcdf", "unidinv", "unidpdf", "unidrnd", "unidstat", ...
+          "unifcdf", "unifinv", "unifit", "unifpdf", "unifrnd", "unifstat", ...
+          "u_test", "vartest", "vartest2", "vartestn", "var_test", ...
+          "wblcdf", "wblfit", "wblinv", "wbllike", "wblpdf", "wblplot", ...
+          "wblrnd", "wblstat", "welch_test", "wienrnd", "wilcoxon_test", ...
+          "wishrnd", "x2fx", "xlsread", "xptread", "ztest", "z_test", ...
+          "z_test_2"}
       txt = check_package (fcn, "statistics");
 
     ## symbolic
     case {"argnames", "bernoulli", "catalan", "charpoly", "chebyshevT", ...
           "chebyshevU", "children", "coshint", "cosint", "dawson", ...
           "digits", "dilog", "dirac", "divisors", "dsolve", "ei", ...
           "ellipticCE", "ellipticCK", "ellipticCPi", "ellipticE", ...
           "ellipticF", "ellipticK", "ellipticPi", "euler", "eulergamma", ...
diff --git a/scripts/linear-algebra/ishermitian.m b/scripts/linear-algebra/ishermitian.m
--- a/scripts/linear-algebra/ishermitian.m
+++ b/scripts/linear-algebra/ishermitian.m
@@ -79,40 +79,50 @@ function retval = ishermitian (A, skewop
   endif
 
   ## Calculate Hermitian-ness
   if (strcmp (skewopt, "nonskew"))
     if (tol == 0)
       ## check for exact symmetry
       retval = ! any ((A != A')(:));
     else
+      if (islogical (A))
+        ## Hack to allow norm to work.  Choose single to minimize memory.
+        A = single (A);
+      endif
       norm_x = norm (A, Inf);
       retval = norm_x == 0 || norm (A - A', Inf) / norm_x <= tol;
     endif
   else
     ## skew-Hermitian
     if (tol == 0)
       retval = ! any ((A != -A')(:));
     else
+      if (islogical (A))
+        ## Hack to allow norm to work.  Choose single to minimize memory.
+        A = single (A);
+      endif
       norm_x = norm (A, Inf);
       retval = norm_x == 0 || norm (A + A', Inf) / norm_x <= tol;
     endif
   endif
 
 endfunction
 
 
 %!assert (ishermitian (1))
 %!assert (! ishermitian ([1, 2]))
 %!assert (ishermitian ([]))
 %!assert (ishermitian ([1, 2; 2, 1]))
 %!assert (ishermitian ([1, 2.1; 2, 1.1], 0.2))
 %!assert (ishermitian ([1, -2i; 2i, 1]))
 %!assert (ishermitian (speye (100)))
 %!assert (ishermitian (logical (eye (2))))
+%!assert (! ishermitian (logical ([1 1; 0 1])))
+%!assert (ishermitian (logical ([1 1; 0 1]), 0.5))
 %!assert (ishermitian ([0, 2i; 2i, 0], "skew"))
 %!assert (! ishermitian ([0, 2; -2, eps], "skew"))
 %!assert (ishermitian ([0, 2; -2, eps], "skew", eps))
 
 %!assert (! (ishermitian ("test")))
 %!assert (! (ishermitian ("t")))
 %!assert (! (ishermitian (["te"; "et"])))
 %!assert (! ishermitian ({1}))
diff --git a/scripts/linear-algebra/issymmetric.m b/scripts/linear-algebra/issymmetric.m
--- a/scripts/linear-algebra/issymmetric.m
+++ b/scripts/linear-algebra/issymmetric.m
@@ -78,40 +78,50 @@ function retval = issymmetric (A, skewop
   endif
 
   ## Calculate symmetry
   if (strcmp (skewopt, "nonskew"))
     if (tol == 0)
       ## check for exact symmetry
       retval = ! any ((A != A.')(:));
     else
+      if (islogical (A))
+        ## Hack to allow norm to work.  Choose single to minimize memory.
+        A = single (A);
+      endif
       norm_x = norm (A, Inf);
       retval = norm_x == 0 || norm (A - A.', Inf) / norm_x <= tol;
     endif
   else
     ## skew symmetry
     if (tol == 0)
       retval = ! any ((A != -A.')(:));
     else
+      if (islogical (A))
+        ## Hack to allow norm to work.  Choose single to minimize memory.
+        A = single (A);
+      endif
       norm_x = norm (A, Inf);
       retval = norm_x == 0 || norm (A + A.', Inf) / norm_x <= tol;
     endif
   endif
 
 endfunction
 
 
 %!assert (issymmetric (1))
 %!assert (! issymmetric ([1, 2]))
 %!assert (issymmetric ([]))
 %!assert (issymmetric ([1, 2; 2, 1]))
 %!assert (issymmetric ([1, 2.1; 2, 1.1], 0.2))
 %!assert (issymmetric ([1, 2i; 2i, 1]))
 %!assert (issymmetric (speye (100)))
 %!assert (issymmetric (logical (eye (2))))
+%!assert (! issymmetric (logical ([1 1; 0 1])))
+%!assert (issymmetric (logical ([1 1; 0 1]), 0.5))
 %!assert (issymmetric ([0, 2; -2, 0], "skew"))
 %!assert (! issymmetric ([0, 2; -2, eps], "skew"))
 %!assert (issymmetric ([0, 2; -2, eps], "skew", eps))
 
 %!assert (! (issymmetric ("test")))
 %!assert (! (issymmetric ("t")))
 %!assert (! (issymmetric (["te"; "et"])))
 %!assert (! issymmetric ({1}))
diff --git a/scripts/miscellaneous/inputParser.m b/scripts/miscellaneous/inputParser.m
--- a/scripts/miscellaneous/inputParser.m
+++ b/scripts/miscellaneous/inputParser.m
@@ -19,41 +19,41 @@
 ## -*- texinfo -*-
 ## @deftypefn {} {@var{p} =} inputParser ()
 ## Create object @var{p} of the inputParser class.
 ##
 ## This class is designed to allow easy parsing of function arguments.  The
 ## class supports four types of arguments:
 ##
 ## @enumerate
-## @item mandatory (see @command{addRequired});
+## @item mandatory (see @code{addRequired});
 ##
-## @item optional (see @command{addOptional});
+## @item optional (see @code{addOptional});
 ##
-## @item named (see @command{addParameter});
+## @item named (see @code{addParameter});
 ##
-## @item switch (see @command{addSwitch}).
+## @item switch (see @code{addSwitch}).
 ## @end enumerate
 ##
 ## After defining the function API with these methods, the supplied arguments
-## can be parsed with the @command{parse} method and the parsing results
-## accessed with the @command{Results} accessor.
+## can be parsed with the @code{parse} method and the parsing results
+## accessed with the @code{Results} accessor.
 ##
 ## @end deftypefn
 ## @deftypefn {} {} inputParser.Parameters
 ## Return list of parameter names already defined.
 ##
 ## @end deftypefn
 ## @deftypefn {} {} inputParser.Results
 ## Return structure with argument names as fieldnames and corresponding values.
 ##
 ## @end deftypefn
 ## @deftypefn {} {} inputParser.Unmatched
-## Return structure similar to @command{Results}, but for unmatched parameters.
-## See the @command{KeepUnmatched} property.
+## Return structure similar to @code{Results}, but for unmatched parameters.
+## See the @code{KeepUnmatched} property.
 ##
 ## @end deftypefn
 ## @deftypefn {} {} inputParser.UsingDefaults
 ## Return cell array with the names of arguments that are using default values.
 ##
 ## @end deftypefn
 ## @deftypefn {} {} inputParser.CaseSensitive = @var{boolean}
 ## Set whether matching of argument names should be case sensitive.  Defaults
@@ -63,19 +63,19 @@
 ## @deftypefn {} {} inputParser.FunctionName = @var{name}
 ## Set function name to be used in error messages; Defaults to empty string.
 ##
 ## @end deftypefn
 ## @deftypefn {} {} inputParser.KeepUnmatched = @var{boolean}
 ## Set whether an error should be given for non-defined arguments.  Defaults to
 ## false.  If set to true, the extra arguments can be accessed through
 ## @code{Unmatched} after the @code{parse} method.  Note that since
-## @command{Switch} and @command{Parameter} arguments can be mixed, it is
+## @code{Switch} and @code{Parameter} arguments can be mixed, it is
 ## not possible to know the unmatched type.  If argument is found unmatched
-## it is assumed to be of the @command{Parameter} type and it is expected to
+## it is assumed to be of the @code{Parameter} type and it is expected to
 ## be followed by a value.
 ##
 ## @end deftypefn
 ## @deftypefn {} {} inputParser.StructExpand = @var{boolean}
 ## Set whether a structure can be passed to the function instead of
 ## parameter/value pairs.  Defaults to true.
 ##
 ## The following example shows how to use this class:
@@ -124,47 +124,47 @@
 ##
 ## ## following returns an error since not all optional arguments,
 ## ## `path' and `mat', were given before the named argument `type'.
 ## check ("mech", "~/dev", "type", "linear");
 ## @end group
 ## @end example
 ##
 ## @emph{Note 1}: A function can have any mixture of the four API types but
-## they must appear in a specific order.  @command{Required} arguments must be
-## first and can be followed by any @command{Optional} arguments.  Only
-## the @command{Parameter} and @command{Switch} arguments may be mixed
+## they must appear in a specific order.  @code{Required} arguments must be
+## first and can be followed by any @code{Optional} arguments.  Only
+## the @code{Parameter} and @code{Switch} arguments may be mixed
 ## together and they must appear at the end.
 ##
-## @emph{Note 2}: If both @command{Optional} and @command{Parameter} arguments
+## @emph{Note 2}: If both @code{Optional} and @code{Parameter} arguments
 ## are mixed in a function API then once a string Optional argument fails to
-## validate it will be considered the end of the @command{Optional}
+## validate it will be considered the end of the @code{Optional}
 ## arguments.  The remaining arguments will be compared against any
-## @command{Parameter} or @command{Switch} arguments.
+## @code{Parameter} or @code{Switch} arguments.
 ##
 ## @seealso{nargin, validateattributes, validatestring, varargin}
 ## @end deftypefn
 
 ## -*- texinfo -*-
 ## @deftypefn  {} {} addOptional (@var{argname}, @var{default})
 ## @deftypefnx {} {} addOptional (@var{argname}, @var{default}, @var{validator})
 ## Add new optional argument to the object @var{parser} of the class
 ## inputParser to implement an ordered arguments type of API
 ##
 ## @var{argname} must be a string with the name of the new argument.  The order
-## in which new arguments are added with @command{addOptional}, represents the
+## in which new arguments are added with @code{addOptional}, represents the
 ## expected order of arguments.
 ##
 ## @var{default} will be the value used when the argument is not specified.
 ##
 ## @var{validator} is an optional anonymous function to validate the given
 ## values for the argument with name @var{argname}.  Alternatively, a
 ## function name can be used.
 ##
-## See @command{help inputParser} for examples.
+## See @code{help inputParser} for examples.
 ##
 ## @emph{Note}: if a string argument does not validate, it will be considered a
 ## ParamValue key.  If an optional argument is not given a validator, anything
 ## will be valid, and so any string will be considered will be the value of the
 ## optional argument (in @sc{matlab}, if no validator is given and argument is
 ## a string it will also be considered a ParamValue key).
 ##
 ## @end deftypefn
@@ -178,51 +178,51 @@
 ## @var{argname} must be a string with the name of the new parameter.
 ##
 ## @var{default} will be the value used when the parameter is not specified.
 ##
 ## @var{validator} is an optional function handle to validate the given values
 ## for the parameter with name @var{argname}.  Alternatively, a function name
 ## can be used.
 ##
-## See @command{help inputParser} for examples.
+## See @code{help inputParser} for examples.
 ##
 ## @end deftypefn
 
 ## -*- texinfo -*-
 ## @deftypefn  {} {} addParamValue (@var{argname}, @var{default})
 ## @deftypefnx {} {} addParamValue (@var{argname}, @var{default}, @var{validator})
 ## Add new parameter to the object @var{parser} of the class inputParser to
 ## implement a name/value pair type of API.
 ##
-## This is an alias for @command{addParameter} method without the
+## This is an alias for @code{addParameter} method without the
 ## @qcode{"PartialMatchPriority"} option.  See it for the help text.
 ##
 ## @end deftypefn
 
 ## -*- texinfo -*-
 ## @deftypefn  {} {} addRequired (@var{argname})
 ## @deftypefnx {} {} addRequired (@var{argname}, @var{validator})
 ## Add new mandatory argument to the object @var{parser} of inputParser class.
 ##
 ## This method belongs to the inputParser class and implements an ordered
 ## arguments type of API.
 ##
 ## @var{argname} must be a string with the name of the new argument.  The order
-## in which new arguments are added with @command{addrequired}, represents the
+## in which new arguments are added with @code{addrequired}, represents the
 ## expected order of arguments.
 ##
 ## @var{validator} is an optional function handle to validate the given values
 ## for the argument with name @var{argname}.  Alternatively, a function name
 ## can be used.
 ##
-## See @command{help inputParser} for examples.
+## See @code{help inputParser} for examples.
 ##
 ## @emph{Note}: this can be used together with the other type of arguments but
-## it must be the first (see @command{@@inputParser}).
+## it must be the first (see @code{@@inputParser}).
 ##
 ## @end deftypefn
 
 ## -*- texinfo -*-
 ## @deftypefn {} {} addSwitch (@var{argname})
 ## Add new switch type of argument to the object @var{parser} of inputParser
 ## class.
 ##
@@ -231,27 +231,27 @@
 ##
 ## @var{argname} must be a string with the name of the new argument.  Arguments
 ## of this type can be specified at the end, after @code{Required} and
 ## @code{Optional}, and mixed between the @code{Parameter}.  They default to
 ## false.  If one of the arguments supplied is a string like @var{argname},
 ## then after parsing the value of @var{parse}.Results.@var{argname} will be
 ## true.
 ##
-## See @command{help inputParser} for examples.
+## See @code{help inputParser} for examples.
 ##
 ## @end deftypefn
 
 ## -*- texinfo -*-
 ## @deftypefn {} {} parse (@var{varargin})
 ## Parses and validates list of arguments according to object @var{parser} of
 ## the class inputParser.
 ##
-## After parsing, the results can be accessed with the @command{Results}
-## accessor.  See @command{help inputParser} for a more complete description.
+## After parsing, the results can be accessed with the @code{Results}
+## accessor.  See @code{help inputParser} for a more complete description.
 ##
 ## @end deftypefn
 
 ## Author: Carnë Draug <carandraug@octave.org>
 
 classdef inputParser < handle
   properties
     ## FIXME: set input checking for these properties
diff --git a/scripts/miscellaneous/inputname.m b/scripts/miscellaneous/inputname.m
--- a/scripts/miscellaneous/inputname.m
+++ b/scripts/miscellaneous/inputname.m
@@ -15,17 +15,17 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <https://www.gnu.org/licenses/>.
 ##
 ## Original version by Paul Kienzle distributed as free software in the
 ## public domain.
 
 ## -*- texinfo -*-
-## @deftypefn {} {} inputname (@var{n})
+## @deftypefn  {} {} inputname (@var{n})
 ## @deftypefnx {} {} inputname (@var{n}, @var{ids_only})
 ## Return the name of the @var{n}-th argument to the calling function.
 ##
 ## If the argument is not a simple variable name, return an empty string.  As
 ## an example, a reference to a field in a structure such as @code{s.field} is
 ## not a simple name and will return @qcode{""}.
 ##
 ## @code{inputname} is only useful within a function.  When used at the command
diff --git a/scripts/miscellaneous/mkoctfile.m b/scripts/miscellaneous/mkoctfile.m
--- a/scripts/miscellaneous/mkoctfile.m
+++ b/scripts/miscellaneous/mkoctfile.m
@@ -102,41 +102,44 @@
 ##    INCFLAGS                    XTRA_CXXFLAGS
 ##    INCLUDEDIR
 ## @end example
 ##
 ## Octave configuration variables as above, but currently unused by
 ## @code{mkoctfile}.
 ##
 ## @example
+## @group
 ##    AR
 ##    DEPEND_EXTRA_SED_PATTERN
 ##    DEPEND_FLAGS
 ##    FFTW3F_LDFLAGS
 ##    FFTW3F_LIBS
 ##    FFTW3_LDFLAGS
 ##    FFTW3_LIBS
 ##    FFTW_LIBS
 ##    FLIBS
 ##    LIBS
 ##    RANLIB
 ##    READLINE_LIBS
+## @end group
 ## @end example
 ##
 ## Octave configuration variables that are provided for informational
 ## purposes only.  Except for @samp{OCTAVE_HOME} and @samp{OCTAVE_EXEC_HOME},
 ## users may not override these variables.
 ##
-## If @env{OCTAVE_HOME} or @env{OCTAVE_EXEC_HOME} are set in the environment,
-## then other variables are adjusted accordingly with @env{OCTAVE_HOME} or
-## @env{OCTAVE_EXEC_HOME} substituted for the original value of the directory
-## specified by the @samp{--prefix} or @samp{--exec-prefix} options that were
-## used when Octave was configured.
+## If @w{@env{OCTAVE_HOME}} or @w{@env{OCTAVE_EXEC_HOME}} are set in the
+## environment, then other variables are adjusted accordingly with
+## @w{@env{OCTAVE_HOME}} or @w{@env{OCTAVE_EXEC_HOME}} substituted for the
+## original value of the directory specified by the @option{--prefix} or
+## @option{--exec-prefix} options that were used when Octave was configured.
 ##
 ## @example
+## @group
 ##    API_VERSION                 LOCALFCNFILEDIR
 ##    ARCHLIBDIR                  LOCALOCTFILEDIR
 ##    BINDIR                      LOCALSTARTUPFILEDIR
 ##    CANONICAL_HOST_TYPE         LOCALVERARCHLIBDIR
 ##    DATADIR                     LOCALVERFCNFILEDIR
 ##    DATAROOTDIR                 LOCALVEROCTFILEDIR
 ##    DEFAULT_PAGER               MAN1DIR
 ##    EXEC_PREFIX                 MAN1EXT
@@ -145,16 +148,17 @@
 ##    IMAGEDIR                    OCTAVE_HOME
 ##    INFODIR                     OCTDATADIR
 ##    INFOFILE                    OCTDOCDIR
 ##    LIBEXECDIR                  OCTFILEDIR
 ##    LOCALAPIARCHLIBDIR          OCTFONTSDIR
 ##    LOCALAPIFCNFILEDIR          STARTUPFILEDIR
 ##    LOCALAPIOCTFILEDIR          VERSION
 ##    LOCALARCHLIBDIR
+## @end group
 ## @end example
 ##
 ## @item --link-stand-alone
 ## Link a stand-alone executable file.
 ##
 ## @item --mex
 ## Assume we are creating a MEX file.  Set the default output extension to
 ## ".mex".
diff --git a/scripts/plot/draw/line.m b/scripts/plot/draw/line.m
--- a/scripts/plot/draw/line.m
+++ b/scripts/plot/draw/line.m
@@ -28,17 +28,17 @@
 ## Create a line object from @var{x} and @var{y} (and possibly @var{z}) and
 ## insert it in the current axes.
 ##
 ## In the standard calling form the data @var{x}, @var{y}, and @var{z} may be
 ## scalars, vectors, or matrices.  In the case of matrix inputs, @code{line}
 ## will attempt to orient scalars and vectors so the results can be plotted.
 ## This requires that one of the dimensions of the vector match either the
 ## number of rows or the number of columns of the matrix.
-## 
+##
 ## In the low-level calling form (50% higher performance) where the data is
 ## specified by name (@code{line ("xdata", @var{x}, @dots{})}) the data must be
 ## vectors.  If no data is specified (@code{line ()}) then
 ## @w{@code{@var{x} == @var{y} = [0, 1]}}.
 ##
 ## Multiple property-value pairs may be specified for the line object, but they
 ## must appear in pairs.
 ##
diff --git a/scripts/statistics/mean.m b/scripts/statistics/mean.m
--- a/scripts/statistics/mean.m
+++ b/scripts/statistics/mean.m
@@ -137,16 +137,20 @@ function y = mean (x, varargin)
     case 0
       mean_type = "a";
     case 1
       mean_type = varargin{mean_type_mask};
     otherwise
       print_usage ();
   endswitch
 
+  ## FIXME: Delete this when the "divide-by-zero" warning is
+  ##        removed in Octave 6.0.
+  warning ("off", "Octave:divide-by-zero", "local");
+
   ## The actual mean computation
   n = size (x, dim);
   switch (mean_type)
     case "a"
       y = sum (x, dim) / n;
     case "g"
       if (all (x(:) >= 0))
         y = exp (sum (log (x), dim) ./ n);
diff --git a/scripts/time/datestr.m b/scripts/time/datestr.m
--- a/scripts/time/datestr.m
+++ b/scripts/time/datestr.m
@@ -19,17 +19,17 @@
 ## -*- texinfo -*-
 ## @deftypefn  {} {@var{str} =} datestr (@var{date})
 ## @deftypefnx {} {@var{str} =} datestr (@var{date}, @var{f})
 ## @deftypefnx {} {@var{str} =} datestr (@var{date}, @var{f}, @var{p})
 ## Format the given date/time according to the format @var{f} and return
 ## the result in @var{str}.
 ##
 ## @var{date} is a serial date number (see @code{datenum}), a date vector (see
-## @code{datevec}), or a a string or cell array of strings. In the latter case,
+## @code{datevec}), or a string or cell array of strings.  In the latter case,
 ## it is passed to @code{datevec} to guess the input date format.
 ##
 ## @var{f} can be an integer which corresponds to one of the codes in the table
 ## below, or a date format string.
 ##
 ## @var{p} is the year at the start of the century in which two-digit years are
 ## to be interpreted in.  If not specified, it defaults to the current year
 ## minus 50.
