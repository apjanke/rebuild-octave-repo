# HG changeset patch
# User Jen Stewart <jen.stewart.london@gmail.com>
# Date 1343479415 14400
#      Sat Jul 28 08:43:35 2012 -0400
# Node ID a1bcffac7fa8576dc4e2a2e37b79952c991ab70c
# Parent  f620ecde25663665c7d3a15af1004f247eaf752e
fixed cursor position

Signed-off-by: Jacob Dawid <jacob.dawid@gmail.com>

diff --git a/libqterminal/unix/TerminalView.cpp b/libqterminal/unix/TerminalView.cpp
old mode 100644
new mode 100755
--- a/libqterminal/unix/TerminalView.cpp
+++ b/libqterminal/unix/TerminalView.cpp
@@ -129,17 +129,17 @@ void TerminalView::setColorTable(const C
 
 /*
    The VT100 has 32 special graphical characters. The usual vt100 extended
    xterm fonts have these at 0x00..0x1f.
 
    QT's iso mapping leaves 0x00..0x7f without any changes. But the graphicals
    come in here as proper unicode characters.
 
-   We treat non-iso10646 fonts as VT100 extended and do the requiered mapping
+   We treat non-iso10646 fonts as VT100 extended and do the required mapping
    from unicode to 0x00..0x1f. The remaining translation is then left to the
    QCodec.
 */
 
 static inline bool isLineChar(quint16 c) { return ((c & 0xFF80) == 0x2500);}
 static inline bool isLineCharString(const QString& string)
 {
   return (string.length() > 0) && (isLineChar(string.at(0).unicode()));
@@ -161,33 +161,33 @@ void TerminalView::fontChange(const QFon
   QFontMetrics fm(font());
   _fontHeight = fm.height() + _lineSpacing;
 
 
   // waba TerminalDisplay 1.123:
   // "Base character width on widest ASCII character. This prevents too wide
   //  characters in the presence of double wide (e.g. Japanese) characters."
   // Get the width from representative normal width characters
-  _fontWidth = qRound((double)fm.width(REPCHAR)/(double)strlen(REPCHAR));
+  _fontWidth = (double)fm.width(REPCHAR)/(double)strlen(REPCHAR);
 
   _fixedFont = true;
 
   int fw = fm.width(REPCHAR[0]);
   for(unsigned int i=1; i< strlen(REPCHAR); i++)
     {
       if (fw != fm.width(REPCHAR[i]))
         {
           _fixedFont = false;
           break;
         }
     }
 
 
   if (_fontWidth < 1)
-    _fontWidth=1;
+    _fontWidth = 1;
 
   _fontAscent = fm.ascent();
 
   emit changedFontMetricSignal( _fontHeight, _fontWidth );
   //parentWidget()->setFixedWidth(_fontWidth * 80 + _leftMargin);
   propagateSize();
   update();
 }
@@ -1186,20 +1186,20 @@ void TerminalView::drawContents(QPainter
   int topLeftY = topLeft.y();
 
   // In Konsole, the view has been centered. Don't do that here, since there
   // are strange hopping effects during a resize when the view does no match
   // exactly the widget width.
   // int topLeftX = (_contentWidth - _usedColumns * _fontWidth) / 2;
   int topLeftX = 0;
 
-  int leftUpperX = qMin(_usedColumns-1, qMax(0,(rect.left()   - topLeftX - _leftMargin ) / _fontWidth));
-  int leftUpperY = qMin(_usedLines-1,  qMax(0, (rect.top()    - topLeftY - _topMargin  ) / _fontHeight));
-  int rightLowerX = qMin(_usedColumns-1, qMax(0, (rect.right()  - topLeftX - _leftMargin ) / _fontWidth));
-  int rightLowerY = qMin(_usedLines-1,  qMax(0, (rect.bottom() - topLeftY - _topMargin  ) / _fontHeight));
+  int leftUpperX = qMin(_usedColumns-1, qMax(0, qRound((rect.left()   - topLeftX - _leftMargin ) / _fontWidth)));
+  int leftUpperY = qMin(_usedLines-1,  qMax(0, qRound((rect.top()    - topLeftY - _topMargin  ) / _fontHeight)));
+  int rightLowerX = qMin(_usedColumns-1, qMax(0, qRound((rect.right()  - topLeftX - _leftMargin ) / _fontWidth)));
+  int rightLowerY = qMin(_usedLines-1,  qMax(0, qRound((rect.bottom() - topLeftY - _topMargin  ) / _fontHeight)));
 
   const int bufferSize = _usedColumns;
   QChar *disstrU = new QChar[bufferSize];
   for (int y = leftUpperY; y <= rightLowerY; y++)
     {
       quint16 c = _image[loc(leftUpperX,y)].character;
       int x = leftUpperX;
       if(!c && x)
@@ -2468,21 +2468,21 @@ void TerminalView::calcGeometry()
     }
 
   _topMargin = DEFAULT_TOP_MARGIN;
   _contentHeight = contentsRect().height() - 2 * DEFAULT_TOP_MARGIN + /* mysterious */ 1;
 
   if (!_isFixedSize)
     {
       // ensure that display is always at least one column wide
-      _columns = qMax(1,_contentWidth / _fontWidth);
+      _columns = qMax(1,qRound(_contentWidth / _fontWidth));
       _usedColumns = qMin(_usedColumns,_columns);
 
       // ensure that display is always at least one line high
-      _lines = qMax(1,_contentHeight / _fontHeight);
+      _lines = qMax(1, qRound(_contentHeight / _fontHeight));
       _usedLines = qMin(_usedLines,_lines);
     }
 }
 
 void TerminalView::makeImage()
 {
   //qDebug("%s %d makeImage", __FILE__, __LINE__);
   calcGeometry();
diff --git a/libqterminal/unix/TerminalView.h b/libqterminal/unix/TerminalView.h
old mode 100644
new mode 100755
--- a/libqterminal/unix/TerminalView.h
+++ b/libqterminal/unix/TerminalView.h
@@ -603,18 +603,21 @@ private:
     // is currently showing.
     QPointer<ScreenWindow> _screenWindow;
 
     bool _allowBell;
 
     QGridLayout* _gridLayout;
 
     bool _fixedFont; // has fixed pitch
-    int  _fontHeight;     // height
-    int  _fontWidth;     // width
+
+    double  _fontHeight;     // height
+    double  _fontWidth;     // width
+    //type double to decrease rounding errors
+
     int  _fontAscent;     // ascend
 
     int _leftMargin;    // offset
     int _topMargin;    // offset
 
     int _lines;      // the number of lines that can be displayed in the widget
     int _columns;    // the number of columns that can be displayed in the widget
 
