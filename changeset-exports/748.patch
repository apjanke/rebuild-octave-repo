# HG changeset patch
# User jwe
# Date 780938282 0
#      Fri Sep 30 15:18:02 1994 +0000
# Node ID 685d0551abff267a0bdf31c2910655f55685062e
# Parent  6182de8cb3b7b161d657c13d30c4034ca4799c4b
[project @ 1994-09-30 15:18:02 by jwe]

diff --git a/src/pt-exp-base.h b/src/pt-exp-base.h
--- a/src/pt-exp-base.h
+++ b/src/pt-exp-base.h
@@ -27,16 +27,18 @@ Software Foundation, 675 Mass Ave, Cambr
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
 #include <time.h>
 #include <stdio.h>
 #include <iostream.h>
 
+#include "SLList.h"
+
 #include "variables.h"
 #include "mappers.h"
 #include "error.h"
 #include "oct-obj.h"
 
 class tree_constant;
 class tree_statement_list;
 class tree_argument_list;
@@ -44,16 +46,17 @@ class tree_parameter_list;
 class tree_return_list;
 class tree_va_return_list;
 class symbol_record;
 class symbol_table;
 
 class tree_matrix;
 class tree_builtin;
 class tree_identifier;
+class tree_indirect_ref;
 class tree_function;
 class tree_expression;
 class tree_prefix_expression;
 class tree_postfix_expression;
 class tree_unary_expression;
 class tree_binary_expression;
 class tree_assignment_expression;
 class tree_simple_assignment_expression;
@@ -117,16 +120,19 @@ public:
   ~tree_expression (void) { }
 
   virtual int is_multi_val_ret_expression (void) const
     { return 0; }
 
   virtual int is_identifier (void) const
     { return 0; }
 
+  virtual int is_indirect_ref (void) const
+    { return 0; }
+
   virtual int is_index_expression (void) const
     { return 0; }
 
   virtual int is_assignment_expression (void) const
     { return 0; }
 
   virtual int is_prefix_expression (void) const
     { return 0; }
@@ -217,16 +223,18 @@ public:
   virtual tree_constant assign (tree_constant& t, const Octave_object& args);
 
   virtual char *name (void) const
     { panic_impossible (); return 0; }
 
   virtual void bump_value (tree_expression::type)
     { panic_impossible (); }
 
+  virtual tree_constant lookup_map_element (SLList<char*>& list);
+
   virtual int max_expected_args (void)
     { panic_impossible (); return 0; }
   
   virtual char *fcn_file_name (void)
     { return 0; }
 
   virtual time_t time_parsed (void)
     { panic_impossible (); return 0; }
@@ -269,27 +277,27 @@ public:
   tree_identifier *define (tree_constant *t);
   tree_identifier *define (tree_function *t);
 
   void document (char *s);
 
   tree_constant assign (tree_constant& t);
   tree_constant assign (tree_constant& t, const Octave_object& args);
 
+  tree_constant assign (SLList<char*> list, tree_constant& t);
+  tree_constant assign (SLList<char*> list, tree_constant& t,
+			const Octave_object& args); 
+
   int is_defined (void);
 
   void bump_value (tree_expression::type);
 
-  tree_fvc *do_lookup (int& script_file_executed);
+  tree_fvc *do_lookup (int& script_file_executed, int exec_script = 1);
 
-  void link_to_global (void)
-    {
-      if (sym)
-	::link_to_global_variable (sym);
-    }
+  void link_to_global (void);
 
   void mark_as_formal_parameter (void);
 
   void mark_for_possible_ans_assign (void)
     { maybe_do_ans_assign = 1; }
 
   tree_constant eval (int print);
 
@@ -299,51 +307,114 @@ public:
 
   void print_code (ostream& os);
 
 private:
   symbol_record *sym;
   int maybe_do_ans_assign;
 };
 
+// Indirect references to values (structure references).
+
+class
+tree_indirect_ref : public tree_fvc
+{
+public:
+  tree_indirect_ref (int l = -1, int c = -1) : tree_fvc (l, c)
+    { id = 0; }
+
+  tree_indirect_ref (tree_identifier *i, int l = -1, int c = -1)
+    : tree_fvc (l, c)
+      { id = i; }
+
+  ~tree_indirect_ref (void);
+
+  tree_indirect_ref *chain (const char *s);
+
+  int is_indirect_ref (void) const
+    { return 1; }
+
+  int is_identifier_only (void) const
+    { return (id && refs.empty ()); }
+
+  tree_identifier *ident (void)
+    { return id; }
+
+  char *name (void);
+
+  tree_constant assign (tree_constant& t);
+  tree_constant assign (tree_constant& t, const Octave_object& args);
+
+  void mark_for_possible_ans_assign (void)
+    { id->mark_for_possible_ans_assign (); }
+
+  tree_constant eval (int print);
+
+  Octave_object eval (int print, int nargout, const Octave_object& args);
+
+  void print_code (ostream& os);
+
+private:
+  tree_identifier *id;
+  SLList<char*> refs;
+};
+
 // Index expressions.
 
 class
 tree_index_expression : public tree_multi_val_ret
 {
- public:
+public:
   tree_index_expression (int l = -1, int c = -1) : tree_multi_val_ret (l, c)
     {
       id = 0;
       list = 0;
     }
 
   tree_index_expression (tree_identifier *i, int l = -1, int c = -1)
     : tree_multi_val_ret (l, c)
       {
+	id = new tree_indirect_ref (i);
+	list = 0;
+      }
+
+  tree_index_expression (tree_identifier *i, tree_argument_list *lst,
+			 int l = -1, int c = -1)
+    : tree_multi_val_ret (l, c)
+      {
+	id = new tree_indirect_ref (i);
+	list = lst;
+      }
+
+  tree_index_expression (tree_indirect_ref *i, int l = -1, int c = -1)
+    : tree_multi_val_ret (l, c)
+      {
 	id = i;
 	list = 0;
       }
 
-  tree_index_expression (tree_identifier *i, tree_argument_list *lst,
+  tree_index_expression (tree_indirect_ref *i, tree_argument_list *lst,
 			 int l = -1, int c = -1)
     : tree_multi_val_ret (l, c)
       {
 	id = i;
 	list = lst;
       }
 
   ~tree_index_expression (void);
 
   int is_index_expression (void) const
     { return 1; }
 
-  tree_identifier *ident (void)
+  tree_indirect_ref *ident (void)
     { return id; }
 
+  char *name (void)
+    { return id->name (); }
+
   tree_argument_list *arg_list (void)
     { return list; }
 
   void mark_for_possible_ans_assign (void)
     {
       if (id)
 	id->mark_for_possible_ans_assign ();
     }
@@ -352,17 +423,17 @@ tree_index_expression : public tree_mult
 
   Octave_object eval (int print, int nargout, const Octave_object& args);
 
   void eval_error (void);
 
   void print_code (ostream& os);
 
  private:
-  tree_identifier *id;
+  tree_indirect_ref *id;
   tree_argument_list *list;
 };
 
 // Prefix expressions.
 
 class
 tree_prefix_expression : public tree_expression
 {
@@ -510,39 +581,51 @@ tree_binary_expression : public tree_exp
   tree_expression *op2;
 };
 
 // Simple assignment expressions.
 
 class
 tree_simple_assignment_expression : public tree_expression
 {
- public:
+private:
   void init (int plhs, int ans_assign)
     {
       etype = tree_expression::assignment;
       lhs = 0;
       index = 0;
       rhs = 0;
       preserve = plhs;
       ans_ass = ans_assign;
     }
 
+ public:
   tree_simple_assignment_expression (int plhs = 0, int ans_assign = 0,
 				     int l = -1, int c = -1)
     : tree_expression (l, c)
       { init (plhs, ans_assign); }
 
   tree_simple_assignment_expression (tree_identifier *i,
 				     tree_expression *r,
 				     int plhs = 0, int ans_assign = 0,
 				     int l = -1, int c = -1)
     : tree_expression (l, c)
       {
 	init (plhs, ans_assign);
+	lhs = new tree_indirect_ref (i);
+	rhs = r;
+      }
+
+  tree_simple_assignment_expression (tree_indirect_ref *i,
+				     tree_expression *r,
+				     int plhs = 0, int ans_assign = 0,
+				     int l = -1, int c = -1)
+    : tree_expression (l, c)
+      {
+	init (plhs, ans_assign);
 	lhs = i;
 	rhs = r;
       }
 
   tree_simple_assignment_expression (tree_index_expression *idx_expr,
 				     tree_expression *r,
 				     int plhs = 0, int ans_assign = 0,
 				     int l = -1, int c = -1)
@@ -551,33 +634,36 @@ tree_simple_assignment_expression : publ
 	init (plhs, ans_assign);
 	lhs = idx_expr->ident ();
 	index = idx_expr->arg_list ();
 	rhs = r;
       }
 
   ~tree_simple_assignment_expression (void);
 
-  tree_identifier *left_hand_side (void)
-    { return lhs; }
+  int left_hand_side_is_identifier_only (void)
+    { return lhs->is_identifier_only (); }
+
+  tree_identifier *left_hand_side_id (void)
+    { return lhs->ident (); }
 
   int is_ans_assign (void)
     { return ans_ass; }
 
   tree_constant eval (int print);
 
   int is_assignment_expression (void) const
     { return 1; }
 
   void eval_error (void);
 
   void print_code (ostream& os);
 
  private:
-  tree_identifier *lhs;
+  tree_indirect_ref *lhs;
   tree_argument_list *index;
   tree_expression *rhs;
   int preserve;
   int ans_ass;
 };
 
 // Multi-valued assignment expressions.
 
@@ -710,17 +796,17 @@ private:
   char *my_name;
 };
 
 // User defined functions.
 
 class
 tree_function : public tree_fvc
 {
-public:
+private:
   void init (void)
     {
       call_depth = 0;
       param_list = 0;
       ret_list = 0;
       sym_tab = 0;
       cmd_list = 0;
       file_name = 0;
@@ -728,16 +814,17 @@ public:
       t_parsed = 0;
       system_fcn_file = 0;
       num_named_args = 0;
       num_args_passed = 0;
       curr_va_arg_number = 0;
       vr_list = 0;
     }
 
+public:
   tree_function (int l = -1, int c = -1) : tree_fvc (l, c)
     { init (); }
 
   tree_function (tree_statement_list *cl, symbol_table *st,
 		 int l = -1, int c = -1)
      : tree_fvc (l, c)
        {
 	 init ();
