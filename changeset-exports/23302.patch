# HG changeset patch
# User Rik <rik@octave.org>
# Date 1489857350 25200
#      Sat Mar 18 10:15:50 2017 -0700
# Node ID 78cf75ffd382d9b972cd51a059e8b022342e98d5
# Parent  81bc57aa7024ca901087d7273d41bcd289c7d77e
maint: tweak readability of code in lo-regexp.cc.

* lo-regexp.cc: Adjust some indentation and reword some comments
to make things clearer.

diff --git a/liboctave/util/lo-regexp.cc b/liboctave/util/lo-regexp.cc
--- a/liboctave/util/lo-regexp.cc
+++ b/liboctave/util/lo-regexp.cc
@@ -220,17 +220,17 @@ namespace octave
 
     buf << pattern.substr (pos);
 
     const char *err;
     int erroffset;
     std::string buf_str = buf.str ();
 
     int pcre_options
-      = ((options.case_insensitive () ? PCRE_CASELESS : 0)
+      = (  (options.case_insensitive () ? PCRE_CASELESS : 0)
          | (options.dotexceptnewline () ? 0 : PCRE_DOTALL)
          | (options.lineanchors () ? PCRE_MULTILINE : 0)
          | (options.freespacing () ? PCRE_EXTENDED : 0));
 
     data = pcre_compile (buf_str.c_str (), pcre_options, &err, &erroffset, 0);
 
     if (! data)
       (*current_liboctave_error_handler)
@@ -257,17 +257,17 @@ namespace octave
     pcre_fullinfo (re, 0, PCRE_INFO_NAMEENTRYSIZE, &nameentrysize);
     pcre_fullinfo (re, 0, PCRE_INFO_NAMETABLE, &nametable);
 
     OCTAVE_LOCAL_BUFFER (int, ovector, (subpatterns+1)*3);
     OCTAVE_LOCAL_BUFFER (int, nidx, namecount);
 
     for (int i = 0; i < namecount; i++)
       {
-        // Index of subpattern in first two bytes MSB first of name.
+        // Index of subpattern in first two bytes of name (MSB first).
         // Extract index.
         nidx[i] = (static_cast<int> (nametable[i*nameentrysize])) << 8
                   | static_cast<int> (nametable[i*nameentrysize+1]);
       }
 
     while (true)
       {
         octave_quit ();
@@ -308,17 +308,17 @@ namespace octave
 
         if (matches < 0 && matches != PCRE_ERROR_NOMATCH)
           (*current_liboctave_error_handler)
             ("%s: internal error calling pcre_exec; "
              "error code from pcre_exec is %i", who.c_str (), matches);
 
         if (matches == PCRE_ERROR_NOMATCH)
           break;
-        else if (ovector[1] <= ovector[0] && ! options.emptymatch ())
+        else if (ovector[0] >= ovector[1] && ! options.emptymatch ())
           {
             // Zero length match.  Skip to next char.
             idx = ovector[0] + 1;
             if (idx < buffer.length ())
               continue;
             else
               break;
           }
