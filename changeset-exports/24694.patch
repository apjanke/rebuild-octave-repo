# HG changeset patch
# User Torsten <mttl@mailbox.org>
# Date 1517943690 -3600
#      Tue Feb 06 20:01:30 2018 +0100
# Node ID 9b4edcc62936e554c060f155314502b8389d7247
# Parent  fe9bc1129922acc38f1376b8b8bb24579cf33a5c
add contextmenu to the tab bar of the variable editor (part bug #53002)

* variable-editor.cc (var_editor_tab_widget::var_editor_tab_widget):
  reimplementation of QTabWidget for using a custom tab bar;
  (var_editor_tab_widget::tabBar) returns the tab bar;
  (variable_editor::variable_editor): use custom tab bar tab_bar and add
  close actions to its context menu;
  (variable_editor::add_action): helper for adding an action ta widget or menu;
  (variable_editor::request_close_tab), (request_close_other_tabs),
  (request_close_all_tabs): slots for the new close actions
  (variable_editor::enable_actions): enabling tool bar and actions depending
  on the number of tabs;
  (edit_variable), (closeTab): call enable_actions;
  (notice_settings): set the shortcuts of the new actions

* variable-editor.h: reimplemented QTabWidget for using custom tabbar,
  slots for the new actions, new methods add_action, new tab_bar, new actions

diff --git a/libgui/src/variable-editor.cc b/libgui/src/variable-editor.cc
--- a/libgui/src/variable-editor.cc
+++ b/libgui/src/variable-editor.cc
@@ -39,16 +39,17 @@ along with Octave; see the file COPYING.
 #include <QSignalMapper>
 #include <QTableView>
 #include <QTabWidget>
 #include <QToolBar>
 #include <QToolButton>
 #include <QVBoxLayout>
 
 #include "resource-manager.h"
+#include "shortcut-manager.h"
 #include "variable-editor.h"
 #include "variable-editor-model.h"
 
 namespace
 {
   // Helper struct to store widget pointers in "data" Tab property.
 
   struct table_data
@@ -76,16 +77,46 @@ Q_DECLARE_METATYPE (table_data)
 static QString
 idx_to_expr (int32_t from, int32_t to)
 {
   return (from == to
           ? QString ("%1").arg (from + 1)
           : QString ("%1:%2").arg (from + 1).arg (to + 1));
 }
 
+
+
+//
+// Functions for reimplemented tab widget
+//
+
+var_editor_tab_widget::var_editor_tab_widget (QWidget *p)
+  : QTabWidget (p)
+{
+  tab_bar *bar;
+  bar = new tab_bar (this);
+
+  connect (bar, SIGNAL (close_current_tab_signal (bool)),
+           p->parent (), SLOT (request_close_tab (bool)));
+
+  this->setTabBar (bar);
+}
+
+QTabBar*
+var_editor_tab_widget::tabBar (void) const
+{
+  return (QTabWidget::tabBar ());
+}
+
+
+
+//
+// Variable editor
+//
+
 variable_editor::variable_editor (QWidget *p)
   : octave_dock_widget (p),
     m_default_width (30), m_default_height (100), m_add_font_height (0),
     m_use_terminal_font (true), m_alternate_rows (true),
     m_stylesheet (""), m_font (), m_sel_font (),
     m_table_colors ()
 {
   // Use a MainWindow.
@@ -107,38 +138,116 @@ variable_editor::variable_editor (QWidge
 
   construct_tool_bar ();
 
   for (int i = 0; i < resource_manager::varedit_color_chars ().length (); i++)
     m_table_colors.append (QColor (Qt::white));
 
   // Tab Widget.
 
-  m_tab_widget = new QTabWidget (container);
+  m_tab_widget = new var_editor_tab_widget (container);
   m_tab_widget->setTabsClosable (true);
   m_tab_widget->setMovable (true);
 
   connect (m_tab_widget, SIGNAL (tabCloseRequested (int)),
            this, SLOT (closeTab (int)));
 
+   // Tab bar
+  m_tab_bar
+      = static_cast<tab_bar *>(m_tab_widget->tabBar ());
+
+  m_close_action = add_action (m_tab_bar->get_context_menu (),
+        resource_manager::icon ("window-close",false), tr ("&Close"),
+        SLOT (request_close_tab (bool)));
+  m_close_others_action = add_action (m_tab_bar->get_context_menu (),
+        resource_manager::icon ("window-close",false), tr ("Close &Other Tabs"),
+        SLOT (request_close_other_tabs (bool)));
+  m_close_all_action = add_action (m_tab_bar->get_context_menu (),
+        resource_manager::icon ("window-close",false), tr ("Close &All Tabs"),
+        SLOT (request_close_all_tabs (bool)));
+
+  enable_actions ();
+
   // Layout the widgets vertically with the toolbar on top
   QVBoxLayout *vbox_layout = new QVBoxLayout ();
   vbox_layout->setSpacing (0);
   vbox_layout->addWidget (m_tool_bar);
   vbox_layout->addWidget (m_tab_widget);
   vbox_layout->setMargin (1);
 
   container->setLayout (vbox_layout);
   setWidget (container);
 
   connect (this, SIGNAL (command_requested (const QString&)),
            p, SLOT (execute_command_in_terminal (const QString&)));
 }
 
 
+
+// Add an action to a menu or the widget itself
+QAction*
+variable_editor::add_action (QMenu *menu, const QIcon& icon, const QString& text,
+                         const char *member)
+{
+  QAction *a;
+
+  if (menu)
+    a = menu->addAction (icon, text, this, member);
+  else
+    {
+      a = new QAction (this);
+      connect (a, SIGNAL (triggered ()), this, member);
+    }
+
+  addAction (a);  // important for shortcut context
+  a->setShortcutContext (Qt::WidgetWithChildrenShortcut);
+
+  return a;
+}
+
+// Slot for the close tab action
+void
+variable_editor::request_close_tab (bool)
+{
+  closeTab (m_tab_bar->currentIndex ());
+}
+
+// Slot for the close other tabs action
+void
+variable_editor::request_close_other_tabs (bool)
+{
+  int current = m_tab_bar->currentIndex ();
+
+  for (int index = m_tab_bar->count ()-1; index >= 0; index--)
+  {
+    if (current != index)
+      closeTab (index);
+  }
+}
+
+// Slot for closing all tabs
+void
+variable_editor::request_close_all_tabs (bool)
+{
+  for (int index = m_tab_bar->count ()-1; index >= 0; index--)
+    closeTab (index);
+}
+
+
+void
+variable_editor::enable_actions (void)
+{
+  const int count = m_tab_widget->count ();
+
+  m_tool_bar->setEnabled (count > 0);
+  m_close_action->setEnabled (count > 0);
+  m_close_all_action->setEnabled (count > 0);
+  m_close_others_action->setEnabled (count > 1);
+}
+
 void
 variable_editor::edit_variable (const QString& name, const octave_value& val)
 {
   if (m_stylesheet.isEmpty ())
     {
       QSettings *settings = resource_manager::get_settings ();
       notice_settings (settings);
     }
@@ -198,20 +307,17 @@ variable_editor::edit_variable (const QS
            this, SLOT (callUpdate (const QModelIndex&, const QModelIndex&)));
 
   vbox->addWidget (table);
 
   page->setProperty ("data", QVariant::fromValue (table_data (table)));
   int tab_idx = m_tab_widget->addTab (page, name);
   m_tab_widget->setCurrentIndex (tab_idx);
 
-  // Enable tool bar for when opening first tab.
-
-  if (m_tab_widget->count () == 1)
-    m_tool_bar->setEnabled (true);
+  enable_actions ();
 
   table->setFont (m_font);
   table->setStyleSheet (m_stylesheet);
   table->setAlternatingRowColors (m_alternate_rows);
 #if defined (HAVE_QT4)
   table->verticalHeader ()->setResizeMode (QHeaderView::Interactive);
 #else
   table->verticalHeader ()->setSectionResizeMode (QHeaderView::Interactive);
@@ -375,16 +481,21 @@ variable_editor::notice_settings (const 
   // FIXME: Magic numbers.  Use enum?
 
   if (icon_size_settings == 1)
     icon_size = st->pixelMetric (QStyle::PM_LargeIconSize);
   else if (icon_size_settings == -1)
     icon_size = st->pixelMetric (QStyle::PM_SmallIconSize);
 
   m_tool_bar->setIconSize (QSize (icon_size, icon_size));
+
+  // Shortcuts
+  shortcut_manager::set_shortcut (m_close_action, "editor_file:close");
+  shortcut_manager::set_shortcut (m_close_all_action, "editor_file:close_all");
+  shortcut_manager::set_shortcut (m_close_others_action, "editor_file:close_other");
 }
 
 void
 variable_editor::closeEvent (QCloseEvent *e)
 {
   emit finished ();
 
   octave_dock_widget::closeEvent (e);
@@ -395,20 +506,17 @@ variable_editor::closeTab (int idx)
 {
   if (idx < 0 || idx > m_tab_widget->count ())
     return;
 
   QWidget *const wdgt = m_tab_widget->widget (idx);
   m_tab_widget->removeTab (idx);
   delete wdgt;
 
-  // Disable tool bar when closing last tab.
-
-  if (m_tab_widget->count () == 0)
-    m_tool_bar->setEnabled (false);
+  enable_actions ();
 }
 
 void
 variable_editor::contextmenu_requested (const QPoint& qpos)
 {
   QTableView *view = get_table_data (m_tab_widget).m_table;
   QModelIndex index = view->indexAt (qpos);
 
diff --git a/libgui/src/variable-editor.h b/libgui/src/variable-editor.h
--- a/libgui/src/variable-editor.h
+++ b/libgui/src/variable-editor.h
@@ -24,25 +24,45 @@ along with Octave; see the file COPYING.
 
 #if ! defined (variable_editor_h)
 #define variable_editor_h 1
 
 #include <QHeaderView>
 #include <QSettings>
 
 #include "octave-dock-widget.h"
+#include "tab-bar.h"
 
 class octave_value;
 
 class QTabWidget;
 class QToolBar;
 class QMainWindow;
 class QTableView;
 class QModelIndex;
 
+
+// Subclassed QTabWidget for using custom tabbar
+
+class var_editor_tab_widget : public QTabWidget
+{
+  Q_OBJECT
+
+public:
+
+  var_editor_tab_widget (QWidget *p);
+
+  ~var_editor_tab_widget (void) = default;
+
+  QTabBar * tabBar (void) const;
+};
+
+
+// The variable editor class
+
 class variable_editor : public octave_dock_widget
 {
   Q_OBJECT
 
 public:
 
   variable_editor (QWidget *parent = nullptr);
 
@@ -67,16 +87,20 @@ public:
 public slots:
 
   void callUpdate (const QModelIndex&,const QModelIndex&);
 
   void notice_settings (const QSettings *);
 
 protected slots:
 
+  void request_close_tab (bool);
+  void request_close_other_tabs (bool);
+  void request_close_all_tabs (bool);
+
   void closeEvent (QCloseEvent *);
 
   void closeTab (int idx);
 
   void contextmenu_requested (const QPoint& pt);
 
   void columnmenu_requested (const QPoint& pt);
 
@@ -113,16 +137,23 @@ signals:
   void updated (void);
 
   void finished (void);
 
   void command_requested (const QString& cmd);
 
 private:
 
+  QAction * add_action (QMenu *menu, const QIcon& icon, const QString& text,
+                        const char *member);
+
+  void enable_actions (void);
+
+  tab_bar *m_tab_bar;
+
   QToolBar *m_tool_bar;
 
   QTabWidget *m_tab_widget;
 
   int m_default_width;
 
   int m_default_height;
 
@@ -148,11 +179,15 @@ private:
   QString real_var_name (int index);
 
   // Convert selection to an Octave expression.
   QString selected_to_octave (void);
 
   void update_colors (void);
 
   void construct_tool_bar (void);
+
+  QAction *m_close_action;
+  QAction *m_close_others_action;
+  QAction *m_close_all_action;
 };
 
 #endif
