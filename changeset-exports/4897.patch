# HG changeset patch
# User jwe
# Date 1086304274 0
#      Thu Jun 03 23:11:14 2004 +0000
# Node ID 89eee52fd4c798cebda9a5d0676bb467b16c9cce
# Parent  b8a5e0bc63fe111d2edde4675088fcfee9000192
[project @ 2004-06-03 23:07:55 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2004-06-03  Paul Kienzle  <pkienzle@users.sf.net>
+
+	* plot/__errcomm__.m, plot/__errplot__.m: Simplify code and fix
+	the bug which causes __errplot__ to ignore the last argument.
+
 2004-06-03  David Bateman  <dbateman@free.fr>
 
 	* general/shiftdim.m: New function based on JWE code snippet.
 
 	* general/circdim.m: New function.
 
 2004-05-06  David Bateman  <dbateman@free.fr>
 
diff --git a/scripts/plot/__errcomm__.m b/scripts/plot/__errcomm__.m
--- a/scripts/plot/__errcomm__.m
+++ b/scripts/plot/__errcomm__.m
@@ -26,78 +26,65 @@
 ## @seealso{errorbar, semilogxerr, semilogyerr, loglogerr, __pltopt__}
 
 ## Created: 20.02.2001
 ## Author: Teemu Ikonen <tpikonen@pcu.helsinki.fi>
 ## Keywords: errorbar, plotting
 
 function __errcomm__ (caller, varargin)
 
-  nargs = nargin ();
-
-  if (nargs < 3)
-    usage ("%s (...)", caller);
+  if (nargin < 3)
+    usage ("%s (x,y,dy,'fmt',...)", caller);
   endif
 
-  nargs--;
+  nargs = length (varargin);
   save_hold = ishold;
   unwind_protect
     if (! ishold)
       clg
     endif
     hold on;
     k = 1;
-    while (nargs-- > 0)
+    data = cell(6,1);
+    while (k <= nargs)
       a = varargin{k++};
-      nargs--;
       if (isvector (a))
         a = a(:);
       elseif (ismatrix (a))
         ;
       else
         usage ("%s (...)", caller);
       endif
       sz = size (a);
       ndata = 1;
-      arg1 = a;
-      while (nargs-- > 0)
+      data{ndata} = a;
+      while (k <= nargs)
 	a = varargin{k++};
 	if (isstr (a))
-	  fmt = a;
-	  cmd = "__errplot__ (arg1";
-	  for i = 2:ndata,
-	    cmd = sprintf ("%s, arg%d", cmd, i);
-	  endfor
-	  eval (sprintf ("%s, fmt);", cmd));
+	  __errplot__ (a, data{1:ndata});
 	  break;
 	elseif (isvector (a))
 	  a = a(:);
 	elseif (ismatrix (a))
 	  ;
 	else
 	  error ("wrong argument types");
 	endif
 	if (size (a) != sz)
 	  error ("argument sizes do not match");
 	endif
-	ndata++;
-	eval (sprintf ("arg%d = a;", ndata));
+	data{++ndata} = a;
 	if (ndata > 6)
 	  error ("too many arguments to a plot");
 	endif
       endwhile
     endwhile
 
     if (! isstr (a))
-      fmt = "~";
-      cmd = "__errplot__ (arg1";
-      for i = 2:ndata,
-	cmd = sprintf ("%s, arg%d", cmd, i);
-      endfor
-      eval (sprintf ("%s, fmt);", cmd));
+      __errplot__ ("~", data{1:ndata});
     endif
   unwind_protect_cleanup
     if (! save_hold)
       hold off;
     endif
   end_unwind_protect
 
 endfunction
diff --git a/scripts/plot/__errplot__.m b/scripts/plot/__errplot__.m
--- a/scripts/plot/__errplot__.m
+++ b/scripts/plot/__errplot__.m
@@ -28,86 +28,46 @@
 ## @end deftypefn
 ## @seealso{semilogx, semilogy, loglog, polar, mesh, contour, __pltopt__
 ## bar, stairs, errorbar, gplot, gsplot, replot, xlabel, ylabel, and title}
 
 ## Created: 18.7.2000
 ## Author: Teemu Ikonen <tpikonen@pcu.helsinki.fi>
 ## Keywords: errorbar, plotting
 
-function __errplot__ (varargin)
-
-  nargs = nargin ();
-
-  if (nargs < 3) # atleast two data arguments needed
-    usage ("__errplot__ (arg1, ..., fmt)");
-  endif
+function __errplot__ (fstr,a1,a2,a3,a4,a5,a6)
 
-  fstr = " ";
-  ndata = 0;
-  k = 1;
-
-  while (nargs--)
-    a = varargin{k++};
-    if (! isstr (a))
-      ndata++;
-      eval (sprintf ("arg%d = a;", ndata));
-    else
-      fstr = a;
-    endif
-  endwhile
+  if (nargin < 3 || nargin > 7) # at least three data arguments needed
+    usage ("__errplot__ (fmt, arg1, ...)");
+  endif
 
   fmt = __pltopt__ ("__errplot__", fstr);
 
-  nplots = size (arg1, 2);
-  len = size (arg1, 1);
-
-  if (ndata == 2)
-    for i = 1:nplots,
-      tmp = [(1:len)', arg1(:,i), arg2(:,i)];
-      cmd = sprintf ("gplot tmp %s", fmt(min(i, rows(fmt)), :));
-      eval (cmd);
-    endfor
-  elseif (ndata == 3)
-    for i = 1:nplots,
-      tstr = "tmp =[arg1(:,i)";
-      for j = 2:ndata,
-       tstr = [tstr, sprintf(", arg%d(:,i)", j)];
-      endfor
-      tstr = [tstr, "];"];
-      eval (tstr);
-      cmd = sprintf ("gplot tmp %s", fmt(min(i, rows(fmt)), :));
-      eval (cmd);
-    endfor
-  elseif (ndata == 4)
-    for i = 1:nplots, # this is getting ugly
-      if (index (fmt, "boxxy") || index (fmt, "xyerr"))
-       tstr = "tmp = [arg1(:,i), arg2(:,i), arg3(:,i), arg4(:,i)];";
-      elseif (index (fmt, "xerr"))
-       tstr = "tmp = [arg1(:,i), arg2(:,i), arg1(:,i)-arg3(:,i), arg1(:,i)+arg4(:,i)];";
-      else
-       tstr = "tmp = [arg1(:,i), arg2(:,i), arg2(:,i)-arg3(:,i), arg2(:,i)+arg4(:,i)];";
-      endif
-      eval (tstr);
-      cmd = sprintf ("gplot tmp %s", fmt(min(i, rows(fmt)), :));
-      eval (cmd);
-    endfor
-  elseif (ndata == 6)
-    for i = 1:nplots,
-      tstr = "tmp = [arg1(:,i), arg2(:,i), arg1(:,i)-arg3(:,i), arg1(:,i)+arg4(:,i), arg2(:,i)-arg5(:,i), arg2(:,i)+arg6(:,i)];";
-      eval (tstr);
-      cmd = sprintf ("gplot tmp %s", fmt(min(i, rows(fmt)), :));
-      eval (cmd);
-    endfor
-  else
-    for i = 1:nplots,
-      tstr = "tmp = [arg1(:,i)";
-      for j = 2:ndata,
-       tstr = [tstr, sprintf(", arg%d(:,i)", j)];
-      endfor
-      tstr = [tstr, "];"];
-      eval (tstr);
-      cmd = sprintf ("gplot tmp %s", fmt(min(i, rows(fmt)), :));
-      eval (cmd);
-    endfor
-  endif
+  nplots = size (a1, 2);
+  len = size (a1, 1);
+  for i = 1:nplots
+    ifmt = fmt(1+mod(i,size(fmt,1)), :);
+    switch (nargin - 1)
+      case 2
+	tmp = [(1:len)', a1(:,i), a2(:,i)];
+      case 3
+	tmp = [a1(:,i), a2(:,i), a3(:,i)];
+      case 4
+	if (index (ifmt, "boxxy") || index (ifmt, "xyerr"))
+	  tmp = [a1(:,i), a2(:,i), a3(:,i), a4(:,i)];
+	elseif (index (ifmt, "xerr"))
+	  tmp = [a1(:,i), a2(:,i), a1(:,i)-a3(:,i), a1(:,i)+a4(:,i)];
+	else
+	  tmp = [a1(:,i), a2(:,i), a2(:,i)-a3(:,i), a2(:,i)+a4(:,i)];
+	endif
+      case 5
+	error ("error plot requires 2, 3, 4 or 6 columns");
+	## tmp = [a1(:,i), a2(:,i), a3(:,i), a4(:,i), a5(:,i)];
+      case 6
+	tmp = [a1(:,i), a2(:,i), ...
+	       a1(:,i)-a3(:,i), a1(:,i)+a4(:,i), ...
+	       a2(:,i)-a5(:,i), a2(:,i)+a6(:,i)];
+    endswitch
+    cmd = sprintf ("gplot tmp %s", ifmt);
+    eval (cmd);
+endfor
 
 endfunction
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2004-06-03  David Bateman  <dbateman@free.fr>
+
+	* DLD-FUNCTIONS/filter.cc: Fix for length(a)=1 && length(b)=2 case.
+
 2004-05-07  John W. Eaton  <jwe@octave.org>
 
 	* ov.cc (octave_value::print_with_name): Only print name tag if
 	Vprint_answer_id_name is true.
 
 	* octave.cc (intern_argv): Insert __nargin__ in top_level_sym_tab
 	instead of making it a builtin variable.  Mark it static.
 	* ov-usr-fcn.cc (octave_user_function::install_automatic_vars):
diff --git a/src/DLD-FUNCTIONS/filter.cc b/src/DLD-FUNCTIONS/filter.cc
--- a/src/DLD-FUNCTIONS/filter.cc
+++ b/src/DLD-FUNCTIONS/filter.cc
@@ -108,17 +108,17 @@ filter (MArray<T>& b, MArray<T>& a, MArr
     }
 
   if (norm != 1.0)
     {
       a = a / norm;
       b = b / norm;
     }
 
-  if ((a_len <= 1) && (si_len <= 1))
+  if ((a_len <= 1) && (si_len <= 0))
     return b(0) * x;
 
   y.resize (x_dims, 0.0);
 
   int x_stride = 1;
   for (int i = 0; i < dim; i++)
     x_stride *= x_dims(i);
 
