# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1468947852 -3600
#      Tue Jul 19 18:04:12 2016 +0100
# Node ID 6772baacd71fa5dbedc4ad2c9d4ab2158caae324
# Parent  da413c03920c73c6db8d744a9d5f45b6f7b6ab97
string_vector: add constructor that supports any container.

* str-vec.h: add new templated constructor that will accept any container
of std::string with same interface as the STL.
* str-vec.cc: remove the two constructors of repeated code which is
now needs to be declared the header.

diff --git a/liboctave/util/str-vec.cc b/liboctave/util/str-vec.cc
--- a/liboctave/util/str-vec.cc
+++ b/liboctave/util/str-vec.cc
@@ -34,49 +34,16 @@ 90, 91, 95, 1996 Free Software Foundatio
 
 #include <iostream>
 #include <string>
 
 #include "cmd-edit.h"
 #include "lo-utils.h"
 #include "str-vec.h"
 
-// FIXME: isn't there some STL trick that could be used to make this
-// work for all STL containers of std::string objects?
-
-string_vector::string_vector (const std::list<std::string>& lst)
-  : Array<std::string> ()
-{
-  size_t n = lst.size ();
-
-  resize (n);
-
-  octave_idx_type i = 0;
-
-  for (std::list<std::string>::const_iterator p = lst.begin ();
-       p != lst.end ();
-       p++)
-    elem (i++) = *p;
-}
-
-string_vector::string_vector (const std::set<std::string>& lst)
-  : Array<std::string> ()
-{
-  size_t n = lst.size ();
-
-  resize (n);
-
-  octave_idx_type i = 0;
-
-  for (std::set<std::string>::const_iterator p = lst.begin ();
-       p != lst.end ();
-       p++)
-    elem (i++) = *p;
-}
-
 // Create a string vector from a NULL terminated list of C strings.
 
 string_vector::string_vector (const char * const *s)
   : Array<std::string> ()
 {
   octave_idx_type n = 0;
 
   if (s)
diff --git a/liboctave/util/str-vec.h b/liboctave/util/str-vec.h
--- a/liboctave/util/str-vec.h
+++ b/liboctave/util/str-vec.h
@@ -46,19 +46,24 @@ public:
   string_vector (const char *s)
     : Array<std::string> (dim_vector (1, 1), s) { }
 
   string_vector (const std::string& s)
     : Array<std::string> (dim_vector (1, 1), s) { }
 
   string_vector (const string_vector& s) : Array<std::string> (s) { }
 
-  string_vector (const std::list<std::string>& lst);
-
-  string_vector (const std::set<std::string>& lst);
+  //! Constructor for STL containers of std::string
+  /*!
+    Templated constructor for any template class with std::string as the
+    first parameter, and begin, end, and size methods, i.e., a class with
+    similar interface as the STL containers.
+  */
+  template<template <typename...> class String_Container>
+  string_vector (const String_Container<std::string>& lst);
 
   string_vector (const Array<std::string>& s)
     : Array<std::string> (s.as_column ()) { }
 
   string_vector (const char * const *s);
 
   string_vector (const char * const *s, octave_idx_type n);
 
@@ -117,9 +122,21 @@ public:
 
   static void delete_c_str_vec (const char * const*);
 
   std::ostream&
   list_in_columns (std::ostream&, int width = 0,
                    const std::string& prefix = "") const;
 };
 
+
+template<template <typename...> class String_Container>
+string_vector::string_vector (const String_Container<std::string>& lst)
+  : Array<std::string> ()
+{
+  resize (lst.size ());
+
+  octave_idx_type i = 0;
+  for (const std::string& s : lst)
+    elem(i++) = s;
+}
+
 #endif
