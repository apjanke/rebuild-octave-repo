# HG changeset patch
# User jwe
# Date 1082657551 0
#      Thu Apr 22 18:12:31 2004 +0000
# Node ID e674c7111b887c32ed75e00968b16172548ef017
# Parent  c69a6a16932b67869e8d4698d0abdd2a27fc32c2
[project @ 2004-04-22 18:12:31 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,9 +1,15 @@
-2004-04-22  John W. Eaton  <jwe@bevo.che.wisc.edu>
+2004-04-22  David Bateman  <dbateman@free.fr>
+
+	* ov-base-scalar.h (octave_base_scalar<ST>::permute): New function.
+
+	* ov-base-mat.cc (octave_base_matrix<MT>::is_true): Make N-d aware.
+
+2004-04-22  John W. Eaton  <jwe@octave.org>
 
 	* oct-stream.cc (printf_value_cache::curr_value): Now NDArray.
 	(printf_value_cache::double_value): Extract N-d array, not Matrix.
 
 2004-04-21  John W. Eaton  <jwe@octave.org>
 
 	* parse.y (function2): Pass id name to frob_function.  Delete id.
 	(frob_function): Accept function name instead of identifier.
diff --git a/src/ov-base-mat.cc b/src/ov-base-mat.cc
--- a/src/ov-base-mat.cc
+++ b/src/ov-base-mat.cc
@@ -204,30 +204,28 @@ octave_base_matrix<MT>::assign (const oc
   ::assign (matrix, rhs, MT::resize_fill_value ());
 }
 
 template <class MT>
 bool
 octave_base_matrix<MT>::is_true (void) const
 {
   bool retval = false;
-
-  if (matrix.dims () . length () == 2)
+  dim_vector dv = matrix.dims ();
+  int nel = dv.numel ();
+  
+  if (nel > 0)
     {
-      if (rows () > 0 && columns () > 0)
-	{
-	  boolNDArray m = (matrix.all () . all ());
-	  
-	  retval = (m.rows () == 1 && m.columns () == 1 && m(0,0));
-	}
+      MT t1 (matrix.reshape (dim_vector (nel, 1)));
+
+      boolNDArray t2 = t1.all ();
+
+      retval = t2(0,0);
     }
-  else
-    (*current_liboctave_error_handler)
-      ("is_true not yet implemented for N-d Arrays");
-  
+
   return retval;
 }
 
 template <class MT>
 bool
 octave_base_matrix<MT>::print_as_scalar (void) const
 {
   dim_vector dv = dims ();
diff --git a/src/ov-base-scalar.h b/src/ov-base-scalar.h
--- a/src/ov-base-scalar.h
+++ b/src/ov-base-scalar.h
@@ -76,16 +76,19 @@ public:
 			 const octave_value& rhs);
 
   bool is_constant (void) const { return true; }
 
   bool is_defined (void) const { return true; }
 
   dim_vector dims (void) const { static dim_vector dv (1, 1); return dv; }
 
+  octave_value permute (const Array<int>& vec, bool inv = false) const
+    { return scalar; }
+
   size_t byte_size (void) const { return sizeof (ST); }
 
   octave_value all (int = 0) const { return (scalar != 0.0); }
 
   octave_value any (int = 0) const { return (scalar != 0.0); }
 
   bool is_scalar_type (void) const { return true; }
 
