# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1496161844 14400
#      Tue May 30 12:30:44 2017 -0400
# Node ID 61971e3f19461fcd2dbc93bae80e56bc46d7add1
# Parent  9578bbaf2bbd687d11e733db2f3e1749c5efab49
avoid possible double free at interpreter exit (bug #51088)

* symtab.cc (symbol_table::cleanup): Remove pointer to symbol table
from all_instances map before deleting it.
* symtab.h (symbol_table::erase_scope): Likewise.

diff --git a/libinterp/corefcn/symtab.cc b/libinterp/corefcn/symtab.cc
--- a/libinterp/corefcn/symtab.cc
+++ b/libinterp/corefcn/symtab.cc
@@ -1657,24 +1657,29 @@ symbol_table::do_dump (std::ostream& os)
     }
 }
 
 void symbol_table::cleanup (void)
 {
   clear_all (true);
 
   // Delete all possibly remaining scopes.
-  for (auto& scope_stp : all_instances)
+
+  while (! all_instances.empty ())
     {
-      // First zero the table entry to avoid possible duplicate delete.
-      symbol_table *inst = scope_stp.second;
-      scope_stp.second = 0;
+      // Note that deleting a scope may have side effects such as
+      // deleting other scopes.  If another scope is deleted, it may
+      // invalidate ITER, so erase this map element first.
 
-      // Now delete the scope.
-      // Note that there may be side effects, such as deleting other scopes.
+      all_instances_iterator iter = all_instances.begin ();
+
+      symbol_table *inst = iter->second;
+
+      all_instances.erase (iter);
+
       delete inst;
     }
 
   global_table.clear ();
   fcn_table.clear ();
   class_precedence_table.clear ();
   parent_map.clear ();
   all_instances.clear ();
diff --git a/libinterp/corefcn/symtab.h b/libinterp/corefcn/symtab.h
--- a/libinterp/corefcn/symtab.h
+++ b/libinterp/corefcn/symtab.h
@@ -1190,20 +1190,22 @@ public:
     assert (scope != xglobal_scope);
 
     erase_subfunctions_in_scope (scope);
 
     all_instances_iterator p = all_instances.find (scope);
 
     if (p != all_instances.end ())
       {
-        delete p->second;
+        symbol_table *inst = p->second;
 
         all_instances.erase (p);
 
+        delete inst;
+
         free_scope (scope);
       }
   }
 
   static void erase_subfunctions_in_scope (scope_id scope)
   {
     for (auto& nm_finfo : fcn_table)
       nm_finfo.second.erase_subfunction (scope);
