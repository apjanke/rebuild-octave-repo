# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1249417875 14400
#      Tue Aug 04 16:31:15 2009 -0400
# Node ID 3cee58bf4acf2d1acb9333e6e85d06b0567e168a
# Parent  bbe033dcfe132967fa7ba3e6963a42d4d75e8f6f
selectively complete filenames in some cases

diff --git a/doc/interpreter/contributors.in b/doc/interpreter/contributors.in
--- a/doc/interpreter/contributors.in
+++ b/doc/interpreter/contributors.in
@@ -173,16 +173,17 @@ Eric S. Raymond
 Balint Reczey
 Michael Reifenberger
 Jason Riedy
 Petter Risholm
 Matthew W. Roberts
 Andrew Ross
 Mark van Rossum
 Kevin Ruland
+Kristian Rumberg
 Ryan Rusaw
 Olli Saarela
 Toni Saarela
 Juhani Saastamoinen
 Radek Salac
 Ben Sapp
 Aleksej Saushev
 Alois Schloegl
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,16 @@
+2009-08-04  Kristian Rumberg  <kristianrumberg@gmail.com>
+
+	* cmd-edit.cc (gnu_readline::do_get_line_buffer,
+	default_command_editor::do_get_line_buffer): New functions.
+	(command_editor::get_line_buffer): New function.
+	* cmd-edit.h (command_editor::get_line_buffer): Provide decls.
+	(command_editor::do_get_line_buffer): New pure virtual function.
+
 2009-07-31  Jaroslav Hajek  <highegg@gmail.com>
 
 	* idx-vector.h (idx_vector::is_range): New method.
 	(idx_vector::copy_data, idx_vector::unconvert): New method decls.
 	* idx-vector.cc (idx_vector::copy_data, idx_vector::unconvert): New
 	methods.
 	* Array-utils.cc (sub2ind, ind2sub): New functions.
 
diff --git a/liboctave/cmd-edit.cc b/liboctave/cmd-edit.cc
--- a/liboctave/cmd-edit.cc
+++ b/liboctave/cmd-edit.cc
@@ -134,16 +134,18 @@ public:
 
   char_is_quoted_fcn do_get_char_is_quoted_function (void) const;
 
   user_accept_line_fcn do_get_user_accept_line_function (void) const;
 
   string_vector
   do_generate_filename_completions (const std::string& text);
 
+  std::string do_get_line_buffer (void) const;
+
   void do_insert_text (const std::string& text);
 
   void do_newline (void);
 
   void do_accept_line (void);
 
   void do_clear_undo_list (void);
 
@@ -501,16 +503,22 @@ gnu_readline::do_generate_filename_compl
 	break;
     }
 
   retval.resize (count);
 
   return retval;
 }
 
+std::string
+gnu_readline::do_get_line_buffer (void) const
+{
+  return ::octave_rl_line_buffer ();
+}
+
 void
 gnu_readline::do_insert_text (const std::string& text)
 {
   ::octave_rl_insert_text (text.c_str ());
 }
 
 void
 gnu_readline::do_newline (void)
@@ -732,16 +740,18 @@ public:
   FILE *do_get_input_stream (void);
 
   void do_set_output_stream (FILE *f);
 
   FILE *do_get_output_stream (void);
 
   string_vector do_generate_filename_completions (const std::string& text);
 
+  std::string do_get_line_buffer (void) const;
+
   void do_insert_text (const std::string&);
 
   void do_newline (void);
 
   void do_accept_line (void);
 
 private:
 
@@ -785,16 +795,22 @@ default_command_editor::do_get_output_st
 
 string_vector
 default_command_editor::do_generate_filename_completions (const std::string&)
 {
   // FIXME
   return string_vector ();
 }
 
+std::string
+default_command_editor::do_get_line_buffer (void) const
+{
+  return "";
+}
+
 void
 default_command_editor::do_insert_text (const std::string&)
 {
   // FIXME
 }
 
 void
 default_command_editor::do_newline (void)
@@ -1114,16 +1130,22 @@ command_editor::get_user_accept_line_fun
 
 string_vector
 command_editor::generate_filename_completions (const std::string& text)
 {
   return (instance_ok ())
     ? instance->do_generate_filename_completions (text) : string_vector ();
 }
 
+std::string
+command_editor::get_line_buffer (void)
+{
+  return (instance_ok ()) ? instance->do_get_line_buffer () : "";
+}
+
 void
 command_editor::insert_text (const std::string& text)
 {
   if (instance_ok ())
     instance->do_insert_text (text);
 }
 
 void
diff --git a/liboctave/cmd-edit.h b/liboctave/cmd-edit.h
--- a/liboctave/cmd-edit.h
+++ b/liboctave/cmd-edit.h
@@ -115,16 +115,18 @@ public:
   static dequoting_fcn get_dequoting_function (void);
 
   static char_is_quoted_fcn get_char_is_quoted_function (void);
 
   static user_accept_line_fcn get_user_accept_line_function (void);
 
   static string_vector generate_filename_completions (const std::string& text);
 
+  static std::string get_line_buffer (void);
+
   static void insert_text (const std::string& text);
 
   static void newline (void);
 
   static void accept_line (void);
 
   static void clear_undo_list (void);
 
@@ -251,16 +253,18 @@ protected:
   virtual dequoting_fcn do_get_dequoting_function (void) const { return 0; }
 
   virtual char_is_quoted_fcn do_get_char_is_quoted_function (void) const { return 0; }
 
   virtual user_accept_line_fcn do_get_user_accept_line_function (void) const { return 0; }
 
   virtual string_vector do_generate_filename_completions (const std::string& text) = 0;
 
+  virtual std::string do_get_line_buffer (void) const = 0;
+
   virtual void do_insert_text (const std::string&) = 0;
 
   virtual void do_newline (void) = 0;
 
   virtual void do_accept_line (void) = 0;
 
   virtual void do_clear_undo_list (void) { }
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,16 +1,22 @@
+2009-08-04  Kristian Rumberg  <kristianrumberg@gmail.com>
+
+	* input.cc (is_completing_dirfns): New function.
+	(generate_completion): Use it to selectively complete file names.
+
 2009-08-04  John W. Eaton  <jwe@octave.org>
 
 	* debug.cc (Fdbwhere): Call octave_call_stack::goto_frame_relative
 	to move to user code frame.  Get line and column information from
 	call stack.
 	* input.cc (Fkeyboard): Don't pass verbose flag to
 	octave_call_stack::goto_frame_relative.
 	(get_debug_input): Get line and column information from call stack.
+
 	* pt-eval.h, pt-eval.cc (tree_evaluator::debug_line,
 	tree_evaluator::debug_column, tree_evaluator::db_line,
 	tree_evaluator::db_column): Delete.
 	* pt-eval.cc (tree_evaluator::do_breakpoint): Don't print function
 	name and location info here.  Delete line and column number args.
 	Change all callers.
 
 	* toplev.h (octave_call_stack::do_current,
diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -469,16 +469,40 @@ generate_possible_completions (const std
 
   // Sort and remove duplicates.
 
   names.sort (true);
 
   return names;
 }
 
+static bool
+is_completing_dirfns (void)
+{
+  static std::string dirfns_commands[] = {"cd", "ls"};
+  static const size_t dirfns_commands_length = 2;
+
+  bool retval = false;
+
+  std::string line = command_editor::get_line_buffer ();
+
+  for (size_t i = 0; i < dirfns_commands_length; i++)
+    {
+      int index = line.find (dirfns_commands[i] + " ");
+
+      if (index == 0)
+	{
+	  retval = true;
+	  break;
+	}
+    }
+
+  return retval;
+}
+
 static std::string
 generate_completion (const std::string& text, int state)
 {
   std::string retval;
 
   static std::string prefix;
   static std::string hint;
 
@@ -495,17 +519,23 @@ generate_completion (const std::string& 
   if (state == 0)
     {
       list_index = 0;
 
       prefix = "";
 
       hint = text;
 
-      name_list = generate_possible_completions (text, prefix, hint);
+      // No reason to display symbols while completing a
+      // file/directory operation.
+
+      if (is_completing_dirfns ())
+	name_list = string_vector ();
+      else
+        name_list = generate_possible_completions (text, prefix, hint);
 
       name_list_len = name_list.length ();
 
       file_name_list = command_editor::generate_filename_completions (text);
 
       name_list.append (file_name_list);
 
       name_list_total_len = name_list.length ();
