# HG changeset patch
# User Torsten <ttl@justmail.de>
# Date 1383925236 28800
#      Fri Nov 08 07:40:36 2013 -0800
# Node ID 766ad9be296678cc700b59eafd51c05a47a472b4
# Parent  3851e5fde76d22135461cc90a8c1ec1e93d5bc9d
Prompt for non-existent new file when using edit.m from GUI (bug #40450)

* libgui/src/octave-qt-link.cc(do_prompt_new_edit_file): New function to
display question dialog.

* libgui/src/octave-qt-link.h(do_prompt_new_edit_file): Add function to header
file.

* libinterp/corefcn/octave-link.cc(__octave_link_edit_file__): If 2nd argument
present, display prompt dialog.

* libinterp/corefcn/octave-link.h(prompt_new_edit_file): If octave-link enabled,
use prompt dialog box.

* scripts/miscellaneous/edit.m: Modify to use new prompt routine.  CLI behavior
is unchanged.

diff --git a/libgui/src/octave-qt-link.cc b/libgui/src/octave-qt-link.cc
--- a/libgui/src/octave-qt-link.cc
+++ b/libgui/src/octave-qt-link.cc
@@ -22,28 +22,32 @@ along with Octave; see the file COPYING.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <QStringList>
+#include <QDialog>
+#include <QDir>
 
 #include "str-vec.h"
 #include "dialog.h"
 #include "error.h"
 #include "workspace-element.h"
 #include "builtin-defun-decls.h"
 #include "load-path.h"
 #include "oct-env.h"
 #include "utils.h"
 
 #include "octave-qt-link.h"
 
+#include "resource-manager.h"
+
 octave_qt_link::octave_qt_link (octave_main_thread *mt)
   : octave_link (), main_thread (mt)
 { }
 
 octave_qt_link::~octave_qt_link (void) { }
 
 void
 octave_qt_link::execute_interpreter (void)
@@ -62,16 +66,44 @@ octave_qt_link::do_exit (int status)
 bool
 octave_qt_link::do_edit_file (const std::string& file)
 {
   emit edit_file_signal (QString::fromStdString (file));
 
   return true;
 }
 
+bool
+octave_qt_link::do_prompt_new_edit_file (const std::string& file)
+{
+  QSettings *settings = resource_manager::get_settings ();
+
+  if (settings->value ("editor/create_new_file",false).toBool ())
+    return true;
+
+  QFileInfo file_info (QString::fromStdString (file));
+  QStringList btn;
+  QStringList role;
+  role << "AcceptRole" << "AcceptRole";
+  btn << tr ("Yes") << tr ("No");
+
+  uiwidget_creator.signal_dialog (
+    tr ("File\n%1\ndoes not exist. Do you want to create it?").
+    arg (QDir::currentPath () + QDir::separator ()
+         + QString::fromStdString (file)),
+    tr ("Octave Editor"), "quest", btn, tr ("Yes"), role );
+
+  // Wait while the user is responding to message box.
+  uiwidget_creator.wait ();
+  // The GUI has sent a signal and the process has been awakened.
+  QString answer = uiwidget_creator.get_dialog_button ();
+
+  return (answer == tr ("Yes"));
+}
+
 int
 octave_qt_link::do_message_dialog (const std::string& dlg,
                                    const std::string& msg,
                                    const std::string& title)
 {
   uiwidget_creator.signal_dialog (QString::fromStdString (msg),
                                   QString::fromStdString (title),
                                   QString::fromStdString (dlg),
diff --git a/libgui/src/octave-qt-link.h b/libgui/src/octave-qt-link.h
--- a/libgui/src/octave-qt-link.h
+++ b/libgui/src/octave-qt-link.h
@@ -56,16 +56,17 @@ public:
 
   ~octave_qt_link (void);
 
   void execute_interpreter (void);
 
   bool do_exit (int status);
 
   bool do_edit_file (const std::string& file);
+  bool do_prompt_new_edit_file (const std::string& file);
 
   int do_message_dialog (const std::string& dlg, const std::string& msg,
                          const std::string& title);
 
   std::string
   do_question_dialog (const std::string& msg, const std::string& title,
                       const std::string& btn1, const std::string& btn2,
                       const std::string& btn3, const std::string& btndef);
diff --git a/libinterp/corefcn/octave-link.cc b/libinterp/corefcn/octave-link.cc
--- a/libinterp/corefcn/octave-link.cc
+++ b/libinterp/corefcn/octave-link.cc
@@ -127,16 +127,29 @@ Undocumented internal function.\n\
         {
           flush_octave_stdout ();
 
           retval = octave_link::edit_file (file);
         }
       else
         error ("expecting file name as argument");
     }
+  else if (args.length () == 2)
+    {
+      std::string file = args(0).string_value ();
+
+      if (! error_state)
+        {
+          flush_octave_stdout ();
+
+          retval = octave_link::prompt_new_edit_file (file);
+        }
+      else
+        error ("expecting file name as first argument");
+    }
 
   return retval;
 }
 
 DEFUN (__octave_link_message_dialog__, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} __octave_link_message_dialog__ (@var{dlg}, @var{msg}, @var{title})\n\
 Undocumented internal function.\n\
diff --git a/libinterp/corefcn/octave-link.h b/libinterp/corefcn/octave-link.h
--- a/libinterp/corefcn/octave-link.h
+++ b/libinterp/corefcn/octave-link.h
@@ -131,16 +131,22 @@ public:
   }
 
   static bool
   edit_file (const std::string& file)
   {
     return enabled () ? instance->do_edit_file (file) : false;
   }
 
+  static bool
+  prompt_new_edit_file (const std::string& file)
+  {
+    return enabled () ? instance->do_prompt_new_edit_file (file) : false;
+  }
+
   static int
   message_dialog (const std::string& dlg, const std::string& msg,
                   const std::string& title)
   {
     return enabled () ? instance->do_message_dialog (dlg, msg, title) : 0;
   }
 
   static std::string
@@ -380,16 +386,17 @@ protected:
   }
 
   void do_entered_readline_hook (void) { }
   void do_finished_readline_hook (void) { }
 
   virtual bool do_exit (int status) = 0;
 
   virtual bool do_edit_file (const std::string& file) = 0;
+  virtual bool do_prompt_new_edit_file (const std::string& file) = 0;
 
   virtual int
   do_message_dialog (const std::string& dlg, const std::string& msg,
                      const std::string& title) = 0;
 
   virtual std::string
   do_question_dialog (const std::string& msg, const std::string& title,
                       const std::string& btn1, const std::string& btn2,
diff --git a/scripts/miscellaneous/edit.m b/scripts/miscellaneous/edit.m
--- a/scripts/miscellaneous/edit.m
+++ b/scripts/miscellaneous/edit.m
@@ -348,24 +348,40 @@ function ret = edit (varargin)
         else
           fclose (fid);
         endif
         do_edit (FUNCTION.EDITOR, fileandpath, FUNCTION.MODE);
         return;
       endif
     endif
 
-    ## If editing a new file that is neither an m-file or an oct-file,
+    ## If editing a new file, prompt for creation if gui is running
+    if (isguirunning ())
+      if (! __octave_link_edit_file__ (file,"prompt"));
+        return;
+      endif
+    endif
+
+    ## If editing a new file that is neither an m-file nor an oct-file,
     ## just edit it.
+    ## If in gui-mode, create it before or editor would prompt again.
     fileandpath = file;
     idx = rindex (file, ".");
     name = file(1:idx-1);
     ext = file(idx+1:end);
     if (! any (strcmp (ext, {"cc", "m"})))
-      ## Some unknown file.  Just open it up.
+      ## Some unknown file.  Create and open it or just open it.
+      if (isguirunning ())
+        ## Write the initial file (if there is anything to write)
+        fid = fopen (fileandpath, "wt");
+        if (fid < 0)
+          error ("edit: could not create %s", fileandpath);
+        endif
+        fclose (fid);
+      endif
       do_edit (FUNCTION.EDITOR, fileandpath, FUNCTION.MODE);
       return;
     endif
 
     ## The file doesn't exist in path so
     ## create it, put in the function template, and edit it.
 
     ## Guess the email name if it was not given.
