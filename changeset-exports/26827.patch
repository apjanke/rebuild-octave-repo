# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1551642430 0
#      Sun Mar 03 19:47:10 2019 +0000
# Node ID 86b8f498699392676053309cc20cf577570d0475
# Parent  20881d195d205c7e3cac2d99fc7357dd9c1ce805
# Parent  f7b10bd400452a0fc3b474d97aa3a5fb961460b5
maint: Merge stable to default.

diff --git a/libgui/src/octave-dock-widget.cc b/libgui/src/octave-dock-widget.cc
--- a/libgui/src/octave-dock-widget.cc
+++ b/libgui/src/octave-dock-widget.cc
@@ -199,18 +199,18 @@ namespace octave
              p, SLOT (queue_cmd (octave_cmd*)));
 
     if (m_default_float_button != nullptr)
       {
         disconnect (m_default_float_button, 0, 0, 0);
         connect (m_default_float_button, SIGNAL (clicked (bool)),
                  this, SLOT (make_window (bool)));
       }
-    connect (this, SIGNAL (queue_make_window ()),
-             this, SLOT (make_window ()), Qt::QueuedConnection);
+    connect (this, SIGNAL (queue_make_window (bool)),
+             this, SLOT (make_window (bool)), Qt::QueuedConnection);
     connect (this, SIGNAL (queue_make_widget ()),
              this, SLOT (make_widget ()), Qt::QueuedConnection);
 
     connect (m_dock_action, SIGNAL (triggered (bool)),
              this, SLOT (make_window (bool)));
     connect (m_close_action, SIGNAL (triggered (bool)),
              this, SLOT (change_visibility (bool)));
 
@@ -244,37 +244,44 @@ namespace octave
   {
     connect (this, SIGNAL (visibilityChanged (bool)),
              this, SLOT (handle_visibility (bool)));
     emit active_changed (isVisible ());  // emit once for init of window menu
   }
 
   // make the widget floating
   void
-  octave_dock_widget::make_window (bool)
+  octave_dock_widget::make_window (bool widget_was_dragged)
   {
     bool vis = isVisible ();
 
     // prevent follow-up calls by clearing state variable
     m_waiting_for_mouse_button_release = false;
 
     set_focus_predecessor ();  // set focus previously active widget if tabbed
 
+    // Before unparenting, get current geometry for restoring if dragged
+    QRect geom = geometry ();
+
     // the widget has to be reparented (parent = 0), preferably
     // from a non-toplevel widget otherwise may not have full
     // decorations, e.g., no taskbar icon and always in front
     if (isFloating ())
       setFloating (false);
+
 // Remove after thorough testing 3/20/18    m_parent->removeDockWidget (this);
+
     setParent (0, Qt::CustomizeWindowHint | Qt::WindowTitleHint |
                Qt::WindowMinMaxButtonsHint | Qt::WindowCloseButtonHint | Qt::Window);
 
-    // restore the last geometry when floating
-    QRect geom = m_recent_float_geom.isNull () ? QRect (50,100,480,480)
-                                               : m_recent_float_geom;
+    // restore the last geometry when floating only if we have not dragged
+    // the window outside the main window
+    if (! widget_was_dragged)
+      geom = m_recent_float_geom.isNull () ? QRect (50,100,480,480)
+                                           : m_recent_float_geom;
     setGeometry (geom);
 
     // adjust the (un)dock icon
     if (titleBarWidget ())
       {
         m_dock_action->setIcon (QIcon (":/actions/icons/widget-dock"
                                        + m_icon_color + ".png"));
         m_dock_action->setToolTip (tr ("Dock widget"));
@@ -378,24 +385,24 @@ namespace octave
     return w;
   }
 
   bool
   octave_dock_widget::event (QEvent *event)
   {
     // low-level check of whether docked-widget became a window via
     // double-click or via drag-and-drop
-    if ((event->type () == QEvent::MouseButtonDblClick && ! isFloating ())
+    if ( (event->type () == QEvent::MouseButtonDblClick && ! isFloating ())
         || (event->type () == QEvent::ActivationChange && m_waiting_for_mouse_button_release))
       {
         bool retval = QDockWidget::event (event);
         if (isFloating () && parent () != 0)
           {
             m_waiting_for_mouse_button_release = false;
-            emit queue_make_window ();
+            emit queue_make_window (event->type () != QEvent::MouseButtonDblClick);
           }
         return retval;
       }
 
     return QDockWidget::event (event);
   }
 
   void
diff --git a/libgui/src/octave-dock-widget.h b/libgui/src/octave-dock-widget.h
--- a/libgui/src/octave-dock-widget.h
+++ b/libgui/src/octave-dock-widget.h
@@ -91,17 +91,17 @@ namespace octave
 
   signals:
 
     //! Custom signal that tells whether a user has clicked away that dock
     //! widget, i.e the active dock widget has changed.
 
     void active_changed (bool active);
 
-    void queue_make_window (void);
+    void queue_make_window (bool widget_was_dragged);
 
     void queue_make_widget (void);
 
     void request_queue_cmd (octave_cmd *);
 
   protected:
 
     virtual void closeEvent (QCloseEvent *e);
@@ -137,17 +137,17 @@ namespace octave
     QMainWindow * main_win (void) { return m_parent; }
 
     void save_settings (void);
 
     void moveEvent (QMoveEvent *event);
 
     void resizeEvent (QResizeEvent *event);
 
-    void make_window (bool not_used = false);
+    void make_window (bool widget_was_dragged = false);
 
     void make_widget (bool not_used = false);
 
     void default_dock (bool not_used = false);
 
   protected slots:
 
     //! Slot to steer changing visibility from outside.
diff --git a/scripts/pkg/private/install.m b/scripts/pkg/private/install.m
--- a/scripts/pkg/private/install.m
+++ b/scripts/pkg/private/install.m
@@ -70,20 +70,26 @@ function install (files, handle_deps, pr
           printf ("mkdir (%s)\n", tmpdir);
         endif
         [status, msg] = mkdir (tmpdir);
         if (status != 1)
           error ("couldn't create temporary directory: %s", msg);
         endif
 
         ## Uncompress the package.
+        [~, ~, ext] = fileparts (tgz);
+        if (strcmpi (ext, ".zip"))
+          func_uncompress = @unzip;
+        else
+          func_uncompress = @untar;
+        endif
         if (verbose)
-          printf ("untar (%s, %s)\n", tgz, tmpdir);
+          printf ("%s (%s, %s)\n", func2str (func_uncompress), tgz, tmpdir);
         endif
-        untar (tgz, tmpdir);
+        func_uncompress (tgz, tmpdir);
 
         ## Get the name of the directories produced by tar.
         [dirlist, err, msg] = readdir (tmpdir);
         if (err)
           error ("couldn't read directory produced by tar: %s", msg);
         endif
 
         if (length (dirlist) > 3)
