# HG changeset patch
# User jwe
# Date 793460011 0
#      Wed Feb 22 13:33:31 1995 +0000
# Node ID 65430ec9a4aa10630fb78b5d57d728331ef243f0
# Parent  32fbe094cc10c49fa2f36378b2674d2615ca3bf9
[project @ 1995-02-22 13:32:29 by jwe]

diff --git a/liboctave/idx-vector.cc b/liboctave/idx-vector.cc
--- a/liboctave/idx-vector.cc
+++ b/liboctave/idx-vector.cc
@@ -49,17 +49,17 @@ idx_vector::idx_vector (const idx_vector
       num_zeros = a.num_zeros;
       num_ones = a.num_ones;
       one_zero = a.one_zero;
 
       max_val = a.max_val;
       min_val = a.min_val;
     }
   else
-    data = (int *) 0;
+    data = 0;
 }
 
 static inline int
 tree_to_mat_idx (double x)
 {
   if (x > 0)
     return ((int) (x + 0.5) - 1);
   else
@@ -72,17 +72,17 @@ idx_vector::idx_vector (const Matrix& m,
   initialized = 0;
 
   int nr = m.rows ();
   int nc = m.columns ();
 
   if (nr == 0 || nc == 0)
     {
       len = 0;
-      data = (int *) 0;
+      data =0;
       num_zeros = 0;
       num_ones = 0;
       one_zero = 0;
       initialized = 1;
       return;
     }
   else if (nr > 1 && nc > 1 && do_ftn_idx)
     {
@@ -123,17 +123,17 @@ idx_vector::idx_vector (const Range& r)
 
   if (len < 0)
     {
       ::error ("invalid range used as index");
       return;
     }
   else if (len == 0)
     {
-      data = (int *) 0;
+      data = 0;
       num_zeros = 0;
       num_ones = 0;
       one_zero = 0;
       initialized = 1;
       return;
     }
 
   double b = r.base ();
@@ -198,26 +198,17 @@ idx_vector::init_state (const char *rc, 
 
       if (data[i] < min_val)
 	min_val = data[i];
     }
   while (++i < len);
 
   if (one_zero && z_len == len)
     {
-      if (num_zeros == len)
-	{
-	  delete [] data;
-	  len = 0;
-	  data = (int *) 0;
-	  num_zeros = 0;
-	  num_ones = 0;
-	  one_zero = 0;
-	}
-      else if (num_ones != len || user_pref.prefer_zero_one_indexing)
+      if (num_ones != len || user_pref.prefer_zero_one_indexing)
 	convert_one_zero_to_idx ();
     }
   else if (min_val < 0)
     {
       ::error ("%s index %d out of range", rc, min_val+1);
       initialized = 0;
       return;
     }
@@ -241,16 +232,17 @@ void
 idx_vector::convert_one_zero_to_idx (void)
 {
   if (num_ones == 0)
     {
       len = 0;
       max_val = 0;
       min_val = 0;
       delete [] data;
+      data = 0;
     }
   else
     {
       assert (num_ones + num_zeros == len);
 
       int *new_data = new int [num_ones];
       int count = 0;
       for (int i = 0; i < len; i++)
diff --git a/src/tc-rep-idx.cc b/src/tc-rep-idx.cc
--- a/src/tc-rep-idx.cc
+++ b/src/tc-rep-idx.cc
@@ -551,17 +551,55 @@ TC_REP::fortran_style_matrix_index (cons
       const double *cop_out_index = mi.data ();
 
       idx_vector iv (mi, 1, "", len);
       if (! iv)
 	return retval;
 
       int result_size = iv.length ();
 
-      if (nc == 1 || (nr != 1 && iv.one_zero_only ()))
+// XXX FIXME XXX -- there is way too much duplicate code here...
+
+      if (iv.one_zero_only ())
+	{
+	  if (iv.ones_count () == 0)
+	    {
+	      retval = Matrix ();
+	    }
+	  else
+	    {
+	      if (nr == 1)
+		{
+		  CRMATRIX (m, cm, 1, result_size);
+
+		  for (int i = 0; i < result_size; i++)
+		    {
+		      int idx = iv.elem (i);
+		      CRMATRIX_ASSIGN_ELEM (m, cm, 0, i, cop_out [idx],
+					    c_cop_out [idx], real_type);
+		    }
+
+		  ASSIGN_CRMATRIX_TO (retval, m, cm);
+		}
+	      else
+		{
+		  CRMATRIX (m, cm, result_size, 1);
+
+		  for (int i = 0; i < result_size; i++)
+		    {
+		      int idx = iv.elem (i);
+		      CRMATRIX_ASSIGN_ELEM (m, cm, i, 0, cop_out [idx],
+					    c_cop_out [idx], real_type);
+		    }
+
+		  ASSIGN_CRMATRIX_TO (retval, m, cm);
+		}
+	    }
+	}
+      else if (nc == 1)
 	{
 	  CRMATRIX (m, cm, result_size, 1);
 
 	  for (int i = 0; i < result_size; i++)
 	    {
 	      int idx = iv.elem (i);
 	      CRMATRIX_ASSIGN_ELEM (m, cm, i, 0, cop_out [idx],
 				    c_cop_out [idx], real_type);
