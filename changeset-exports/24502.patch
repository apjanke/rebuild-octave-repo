# HG changeset patch
# User Rik <rik@octave.org>
# Date 1515030187 28800
#      Wed Jan 03 17:43:07 2018 -0800
# Node ID b480fe1089bb288fed84330ac1a26efa196338fa
# Parent  2f10c3265607ea8dc8f01b7e245eb9357f798a9e
colorbar.m: Correctly handle changes to colormap of figure or axes.

* colorbar.m: Copy over "colormap" from axes when creating new colorbar.
Change cb_colormap call to match new function prototype.
* colorbar.m (cb_colormap): Change prototype to also include handle to
axes.  When colormap changes, copy it to colorbar axes.  Call cb_clim()
with axes handle to update limits.

diff --git a/scripts/plot/draw/colorbar.m b/scripts/plot/draw/colorbar.m
--- a/scripts/plot/draw/colorbar.m
+++ b/scripts/plot/draw/colorbar.m
@@ -244,17 +244,18 @@ function h = colorbar (varargin)
     ## FIXME: Matlab does not require the "position" property to be active.
     ##        Is there a way to determine the plotbox position for the
     ##        gnuplot graphics toolkit when the outerposition is active?
     set (hax, "activepositionproperty", "position");
     props = get (hax);
     props.__axes_handle__ = hax;
     position = props.position;
 
-    clen = rows (get (hax, "colormap"));
+    cmap = get (hax, "colormap");
+    clen = rows (cmap);
     cext = get (hax, "clim");
     cdiff = (cext(2) - cext(1)) / clen / 2;
     cmin = cext(1) + cdiff;
     cmax = cext(2) - cdiff;
 
     hpar = get (hax, "parent");
 
     if (isempty (cbpos))
@@ -264,16 +265,17 @@ function h = colorbar (varargin)
         calc_cbar_position (loc, props, ancestor (hpar, "figure"));
       set (hax, "position", axpos);
     endif
 
     ## Create colorbar axes if necessary
     if (new_colorbar)
       hcb = axes ("parent", hpar, "tag", "colorbar",
                   "activepositionproperty", "position", "position", cbpos,
+                  "colormap", cmap,
                   "box", "on", "xdir", "normal", "ydir", "normal");
 
       addproperty ("axislocation", hcb, "radio", "{out}|in");
       addproperty ("axislocationmode", hcb, "radio", "{auto}|manual");
       addproperty ("label", hcb, "handle", get (hcb, "ylabel"));
       addproperty ("direction", hcb, "AxesYdir", "normal");
       addproperty ("limits", hcb, "AxesYlim");
       addproperty ("limitsmode", hcb, "AxesYlimMode", "auto");
@@ -348,20 +350,19 @@ function h = colorbar (varargin)
       set (hcb, "deletefcn", {@cb_restore_axes, hax, props});
 
       addlistener (hcb, "xscale", {@cb_error_on_logscale, "xscale"});
       addlistener (hcb, "yscale", {@cb_error_on_logscale, "yscale"});
       addlistener (hcb, "tickdirection", @cb_tickdirection);
 
       if (strcmp (get (hpar, "type"), "figure"))
         addlistener (hpar, "colormap", {@cb_colormap, ...
-                                        hcb, hi, clen});
+                                        hax, hcb, hi, clen});
       endif
-      ## FIXME: listener on axes colormap does not work yet.
-      addlistener (hax, "colormap", {@cb_colormap, hcb, hi, clen});
+      addlistener (hax, "colormap", {@cb_colormap, hax, hcb, hi, clen});
       addlistener (hax, "clim", {@cb_clim, hcb, hi});
       addlistener (hax, "dataaspectratio", {@cb_colorbar_axis, hcb, props});
       addlistener (hax, "dataaspectratiomode", {@cb_colorbar_axis, ...
                                                 hcb, props});
       addlistener (hax, "plotboxaspectratio", {@cb_colorbar_axis, hcb, props});
       addlistener (hax, "plotboxaspectratiomode", {@cb_colorbar_axis, ...
                                                    hcb, props});
       addlistener (hax, "position", {@cb_colorbar_axis, hcb, props});
@@ -456,30 +457,32 @@ function cb_clim (hax, ~, hcb, hi)
       set (hi, "xdata", [cmin, cmax]);
       set (hcb, "xlim", cext);
     endif
   endif
 
 endfunction
 
 ## Update colorbar when changes to axes or figure colormap have occurred.
-function cb_colormap (h, d, hcb, hi, init_sz)
+function cb_colormap (h, d, hax, hcb, hi, init_sz)
   persistent sz = init_sz;
 
   if (ishghandle (h))
-    clen = rows (get (h, "colormap"));
+    cmap = get (h, "colormap");
+    set (hcb, "colormap", cmap);
+    clen = rows (cmap);
     if (clen != sz)
       if (strcmp (get (hcb, "__vertical__"), "on"))
         set (hi, "cdata", [1:clen]');
       else
         set (hi, "cdata", [1:clen]);
       endif
       sz = clen;
       ## Also update limits on colorbar axes or there will be white gaps
-      cb_clim (hcb, d, hcb, hi);
+      cb_clim (hax, d, hcb, hi);
     endif
   endif
 
 endfunction
 
 ## Update positioning of colorbar when original axes has changed position.
 function cb_colorbar_axis (hax, ~, hcb, orig_props)
 
