# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1271606176 -7200
#      Sun Apr 18 17:56:16 2010 +0200
# Node ID 2dd8ea8bfd71439702d820f806e595a40dcbd6b9
# Parent  114376c7cba56e362a3349e93c94a6dd5bd15089
basic cat functionality in liboctave

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -2590,16 +2590,50 @@ Array<T>::diag (octave_idx_type k) const
             }
         }
     }
 
   return d;
 }
 
 template <class T>
+Array<T>
+Array<T>::cat (int dim, octave_idx_type n, const Array<T> *array_list)
+{
+  if (dim < 0)
+    (*current_liboctave_error_handler)
+      ("cat: invalid dimension");
+
+  dim_vector dv;
+  for (octave_idx_type i = 0; i < n; i++)
+    if (! dv.concat (array_list[i].dims (), dim))
+      (*current_liboctave_error_handler)
+        ("cat: dimension mismatch");
+
+  Array<T> retval (dv);
+  Array<idx_vector> idxa (dv.length (), 1, idx_vector::colon);
+  octave_idx_type l = 0;
+
+  for (octave_idx_type i = 0; i < n; i++)
+    {
+      octave_idx_type u;
+      if (dim < array_list[i].ndims ())
+        u = l + array_list[i].dims ()(dim);
+      else
+        u = l + 1;
+
+      idxa(dim) = idx_vector (l, u);
+
+      retval.assign (idxa, array_list[i]);
+    }
+
+  return retval;
+}
+
+template <class T>
 void
 Array<T>::print_info (std::ostream& os, const std::string& prefix) const
 {
   os << prefix << "rep address: " << rep << '\n'
      << prefix << "rep->len:    " << rep->len << '\n'
      << prefix << "rep->data:   " << static_cast<void *> (rep->data) << '\n'
      << prefix << "rep->count:  " << rep->count << '\n'
      << prefix << "slice_data:  " << static_cast<void *> (slice_data) << '\n'
diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -573,16 +573,19 @@ public:
   Array<octave_idx_type> find (octave_idx_type n = -1, bool backward = false) const;
 
   // Returns the n-th element in increasing order, using the same ordering as
   // used for sort. n can either be a scalar index or a contiguous range.
   Array<T> nth_element (const idx_vector& n, int dim = 0) const;
 
   Array<T> diag (octave_idx_type k = 0) const;
 
+  static Array<T>
+  cat (int dim, octave_idx_type n, const Array<T> *array_list);
+
   template <class U, class F>
   Array<U>
   map (F fcn) const
   {
     octave_idx_type len = length ();
 
     const T *m = data ();
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,15 @@
+2010-04-18  Jaroslav Hajek  <highegg@gmail.com>
+
+	* Array.cc (Array<T>::cat): New method.
+	* Array.h: Declare it.
+	* Sparse.cc (Sparse<T>::cat): New method.
+	* Sparse.h: Declare it.
+
 2010-04-16  David Bateman  <dbateman@free.fr>
 
 	* Sparse.cc (template <class T> Sparse<T>::Sparse (const Array<T>&,
 	const idx_vector&, const idx_vector&, octave_idx_type,
         octave_idx_type, bool, octave_idx_type)): Add argument defining the
 	minimum storage to allocate for the sparse matrix.
 	* Sparse.h (template <class T> Sparse (const Array<T>&,
 	const idx_vector&, const idx_vector&, octave_idx_type,
diff --git a/liboctave/Sparse.cc b/liboctave/Sparse.cc
--- a/liboctave/Sparse.cc
+++ b/liboctave/Sparse.cc
@@ -2372,16 +2372,83 @@ Sparse<T>::diag (octave_idx_type k) cons
             }
         }
     }
 
   return d;
 }
 
 template <class T>
+Sparse<T>
+Sparse<T>::cat (int dim, octave_idx_type n, const Sparse<T> *sparse_list)
+{
+  dim_vector dv;
+  octave_idx_type total_nz = 0;
+  if (dim == 0 || dim == 1)
+    {
+      for (octave_idx_type i = 0; i < n; i++)
+        {
+          if (! dv.concat (sparse_list[i].dims (), dim))
+            (*current_liboctave_error_handler)
+              ("cat: dimension mismatch");
+          total_nz += sparse_list[i].nnz ();
+        }
+    }
+
+  Sparse<T> retval (dv, total_nz);
+
+  switch (dim)
+    {
+    case 0:
+      {
+        // sparse vertcat. This is not efficiently handled by assignment, so
+        // we'll do it directly.
+        octave_idx_type l = 0;
+        for (octave_idx_type j = 0; j < n; j++)
+          {
+            octave_idx_type rcum = 0;
+            for (octave_idx_type i = 0; i < n; i++)
+              {
+                const Sparse<T>& spi = sparse_list[i];
+                octave_idx_type kl = spi.cidx(j), ku = spi.cidx(j+1);
+                for (octave_idx_type k = kl; k < ku; k++, l++)
+                  {
+                    retval.xridx(l) = spi.ridx(k) + rcum;
+                    retval.xdata(l) = spi.data(k);
+                  }
+
+                rcum += spi.rows ();
+              }
+
+            retval.xcidx(j+1) = l;
+          }
+
+        break;
+      }
+    case 1:
+      {
+        octave_idx_type ccum = 0;
+        for (octave_idx_type i = 0; i < n; i++)
+          {
+            octave_idx_type l = ccum, u = ccum + sparse_list[i].columns ();
+            retval.assign (idx_vector::colon, idx_vector (l, u), sparse_list[i]);
+            ccum = u;
+          }
+
+        break;
+      }
+    default:
+      (*current_liboctave_error_handler)
+        ("cat: invalid dimension for sparse concatenation");
+    }
+
+  return retval;
+}
+
+template <class T>
 Array<T>
 Sparse<T>::array_value () const
 {
   NoAlias< Array<T> > retval (dims (), T());
   if (rows () == 1)
     {
       octave_idx_type i = 0;
       for (octave_idx_type j = 0, nc = cols (); j < nc; j++)
diff --git a/liboctave/Sparse.h b/liboctave/Sparse.h
--- a/liboctave/Sparse.h
+++ b/liboctave/Sparse.h
@@ -504,16 +504,19 @@ public:
   octave_idx_type *mex_get_jc (void) const { return const_cast<octave_idx_type *> (cidx ()); }
 
   Sparse<T> sort (octave_idx_type dim = 0, sortmode mode = ASCENDING) const;
   Sparse<T> sort (Array<octave_idx_type> &sidx, octave_idx_type dim = 0,
                  sortmode mode = ASCENDING) const;
 
   Sparse<T> diag (octave_idx_type k = 0) const;
 
+  static Sparse<T>
+  cat (int dim, octave_idx_type n, const Sparse<T> *sparse_list);
+
   Array<T> array_value (void) const;
 
   template <class U, class F>
   Sparse<U>
   map (F fcn) const
   {
     Sparse<U> result;
     U f_zero = fcn (0.);
