# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1242821293 -7200
#      Wed May 20 14:08:13 2009 +0200
# Node ID 7bd406e12e4ded29ea4281627a29cf6734e6e691
# Parent  659657942ba687ddc7cfb0a7bf2b1072db35a6d1
instantiate Array<void *> in liboctave
* * *
fix non-robust macro in Array.cc

diff --git a/liboctave/Array-voidp.cc b/liboctave/Array-voidp.cc
new file mode 100644
--- /dev/null
+++ b/liboctave/Array-voidp.cc
@@ -0,0 +1,50 @@
+/*
+
+Copyright (C) 1996, 1997, 2000, 2003, 2005, 2007, 2008, 2009 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include <string>
+
+// Instantiate Arrays of void *.
+
+#include "Array.h"
+#include "Array.cc"
+
+NO_INSTANTIATE_ARRAY_SORT (void *);
+
+INSTANTIATE_ARRAY (void *, OCTAVE_API);
+
+#include "Array2.h"
+
+template class OCTAVE_API Array2<void *>;
+
+#include "Array3.h"
+
+template class OCTAVE_API Array3<void *>;
+
+/*
+;;; Local Variables: ***
+;;; mode: C++ ***
+;;; End: ***
+*/
diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -2569,17 +2569,17 @@ template <> Array<octave_idx_type>  \
 Array<T>::sort_rows_idx (sortmode) const  \
 { return Array<octave_idx_type> (); } \
  \
 template <> sortmode  \
 Array<T>::is_sorted_rows (sortmode) const \
 { return UNSORTED; } \
  \
 template <> octave_idx_type  \
-Array<T>::lookup (const T&, sortmode) const \
+Array<T>::lookup (T const &, sortmode) const \
 { return 0; } \
 template <> Array<octave_idx_type>  \
 Array<T>::lookup (const Array<T>&, sortmode, bool, bool) const \
 { return Array<octave_idx_type> (); } \
 template <> Array<octave_idx_type> \
 Array<T>::find (octave_idx_type, bool) const\
 { return Array<octave_idx_type> (); } \
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,14 @@
+2009-05-20  Jaroslav Hajek  <highegg@gmail.com>
+
+	* Array-voidp.cc: New source.
+	* Array.cc (NO_INSTANTIATE_ARRAY_SORT): const T& -> T const &
+	* Makefile.in: Include it.
+
 2009-05-15  Jaroslav Hajek  <highegg@gmail.com>
 	
 	* Array.cc (Array<T>::instantiation_guard): New function
 	(INSTANTIATE_ARRAY): Always override it here.
 	* Array.h: Declare it.
 
 2009-05-15  Jaroslav Hajek  <highegg@gmail.com>
 
diff --git a/liboctave/Makefile.in b/liboctave/Makefile.in
--- a/liboctave/Makefile.in
+++ b/liboctave/Makefile.in
@@ -104,17 +104,17 @@ BUILT_INCLUDES := oct-types.h mx-ops.h \
 	$(SPARSE_MX_OP_INC)
 
 TEMPLATE_SRC := Array.cc ArrayN.cc eigs-base.cc DiagArray2.cc \
 	MArray.cc MArray2.cc MArrayN.cc MDiagArray2.cc \
 	base-lu.cc oct-sort.cc sparse-base-lu.cc \
 	sparse-base-chol.cc sparse-dmsolve.cc
 
 TI_SRC := Array-C.cc Array-b.cc Array-ch.cc Array-i.cc Array-d.cc \
-	Array-f.cc Array-fC.cc Array-s.cc Array-str.cc \
+	Array-f.cc Array-fC.cc Array-s.cc Array-str.cc Array-voidp.cc \
 	Array-idx-vec.cc MArray-C.cc MArray-ch.cc MArray-i.cc MArray-d.cc \
 	MArray-f.cc MArray-fC.cc MArray-s.cc MSparse-C.cc MSparse-d.cc \
 	Sparse-C.cc Sparse-b.cc Sparse-d.cc oct-inttypes.cc
 
 MATRIX_SRC := Array-util.cc CColVector.cc \
 	CDiagMatrix.cc CMatrix.cc CNDArray.cc CRowVector.cc \
 	CmplxAEPBAL.cc CmplxCHOL.cc CmplxGEPBAL.cc CmplxHESS.cc \
 	CmplxLU.cc CmplxQR.cc CmplxQRP.cc CmplxSCHUR.cc CmplxSVD.cc \
