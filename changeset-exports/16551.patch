# HG changeset patch
# User Daniel J Sebald <daniel.sebald@ieee.org>
# Date 1366657633 14400
#      Mon Apr 22 15:07:13 2013 -0400
# Node ID 6ae555fc8c43310522e9e1d592b3e245686cf9a6
# Parent  94067a5d28ee238902f601a5736b07eb8a41f010
Add questdlg dialog function and fix variety of dialog bugs.

* octave-qt-link.cc (octave_qt_link::do_message_dialog):
Change initializer from QString to QString::fromStdString(dlg).
(octave_qt_link::do_question_dialog): New function.  Make all buttons
AcceptRole.  Signal dialog creation.  Go to wait state.  Get dialog
button result when awakened.
(octave_qt_link::do_list_dialog): Change std string 'prompt_string' to
std list of std string 'prompt'.  Use make_qstring_list(prompt).
(octave_qt_link::do_input_dialog): Change 'nr' and 'nc' to std list of
float.  Use QFloatList::fromStdList(nc).

* octave-qt-link.h (octave_qt_link : QObject, public octave_link): Add
member do_question_dialog.
(octave_qt_link::do_list_dialog): Use std list of std string for
prompt.
(octave_qt_link::do_input_dialog): Change 'nr' and 'nc' to std list of
float.

* octave-link.cc (__octave_link_question_dialog__): New
builtin.  Translate args to inputs of octave_link::question_dialog
function.
(__octave_link_list_dialog__): Retain prompt string cell list as a std
list of std string.
(__octave_link_input_dialog__): Make 'nr' and 'nc' std list of float.

* octave-link.h (octave_link::question_dialog,
octave_link::do_question_dialog): Add.
(octave_link::list_dialog, octave_link::do_list_dialog): Change prompt
to std list of std string.
(octave_link::input_dialog, octave_link::do_input_dialog): Change 'nr'
and 'nc' to std list of float.

* errordlg.m (errordlg): Make retval return variable. Add "error" icon
as message_dialog input.

* helpdlg.m (helpdlg): Make retval return variable. Add "help" icon as
message_dialog input.

* warndlg.m (warndlg): Add "warn" icon as message_dialog input.

* message_dialog.m (message_dialog): Define default icon "none".  Use
dlg variable with icon variable as input to
__octave_link_message_dialog__.  Use __octave_link_enabled__ rather
than return value.

* inputdlg.m (inputdlg): Round up rowscols to integer.  Replace
iscell(cstr) with __octave_link_enabled__.

* listdlg.m (listdlg): Correct indentation.  Change default selmode
from "multiple" to "Multiple".  Make default prompt {}.  Check valid
selmode entry.  Use __octave_link_enabled__ rather than ok return
value. Remove FIXME note.  Use Rich Text in prompt of demo.  Add demo
using ListSize.

* questdlg.m (questdlg): Add case 0 to switch.  Add error message for
default button not matching options.  In all cases, check that default
button matches an button option.  Add __octave_link_question_dialog__
call conditioned under __octave_link_enabled__.  Add three demos.

* dialog.cc (QUIWidgetCreator::dialog_finished): Remove.
(QUIWidgetCreator::dialog_button_clicked): Test that button pointer is
nonzero.  Move dialog_result assignment and waitcondition.wakeAll here.
(MessageDialog::MessageDialog): If title "", change to " ".  Reverse
order that buttons are installed.  Remove signal 'finished' connection.
(ListDialog::ListDialog): Change prompt from QString to QStringList.
Make list items noneditable.  Add Rich Text support to prompt, place
RT <br> between prompt list lines.  Use label for prompt.  Disable
select_all button if not "Multiple".  Remove horizontal group box.  If
title "", change to " ".
(InputDialog::InputDialog): Change 'nr' and 'nc' to QFloatList.
Define pre-processor variables, then undefine.  If title "", change to
" ".

* dialog.h (QUIWidgetCreator::signal_listviewQUI,
WidgetCreator::create_listview): Change QString 'prompt_string'
to QStringList 'prompt'.
(QUIWidgetCreator::signal_inputlayout,
QUIWidgetCreator::create_inputlayout): Use QFloatList for 'nr' and
'nc'.
(QUIWidgetCreator::dialog_finished): Remove.
(MessageDialog::closeEvent): New override, emitting buttonClicked(0).
(ListDialog::ListDialog): Change QString 'prompt_string' to
QStringList 'prompt'.
(InputDialog::InputDialog): Use QFloatList for 'nr' and 'nc'.

* main_window.cc, main_window.h: Make function call changes that match
dialog.h changes.
(main_window::find_files_finished): Remove unused 'button' variable.

diff --git a/libgui/src/dialog.cc b/libgui/src/dialog.cc
--- a/libgui/src/dialog.cc
+++ b/libgui/src/dialog.cc
@@ -37,54 +37,46 @@ along with Octave; see the file COPYING.
 #include <QVBoxLayout>
 #include <QPushButton>
 #include <QGroupBox>
 #include <QGridLayout>
 #include <QLabel>
 
 QUIWidgetCreator uiwidget_creator;
 
+
 QUIWidgetCreator::QUIWidgetCreator (void)
   : QObject (), dialog_result (-1), dialog_button (),
     string_list (new QStringList ()), list_index (new QIntList ())
 { }
 
 
 QUIWidgetCreator::~QUIWidgetCreator (void)
 {
   delete string_list;
   delete list_index;
 }
 
 
 void
-QUIWidgetCreator::dialog_finished (int)
+QUIWidgetCreator::dialog_button_clicked (QAbstractButton *button)
 {
   // Store the value so that builtin functions can retrieve.
-  // The value should always be 1 for the Octave functions.
+  if (button)
+    dialog_button = button->text ();
 
-  // Value returned by message box is not quite always 1.  If the
-  // window upper-right close button is pressed, 'result' is 0.
+  // The value should always be 1 for the Octave functions.
   dialog_result = 1;
 
   // Wake up Octave process so that it continues.
   waitcondition.wakeAll ();
 }
 
 
 void
-QUIWidgetCreator::dialog_button_clicked (QAbstractButton *button)
-{
-  // Store information about what button was pressed so that builtin
-  // functions can retrieve.
-  dialog_button = button->text ();
-}
-
-
-void
 QUIWidgetCreator::list_select_finished (const QIntList& selected, const int button_pressed)
 {
   // Store the value so that builtin functions can retrieve.
   *list_index = selected;
   dialog_result = button_pressed;
 
   // Wake up Octave process so that it continues.
   waitcondition.wakeAll ();
@@ -98,22 +90,24 @@ QUIWidgetCreator::input_finished (const 
   *string_list = input;
   dialog_result = button_pressed;
 
   // Wake up Octave process so that it continues.
   waitcondition.wakeAll ();
 }
 
 
-MessageDialog::MessageDialog (const QString& message, const QString& title,
+MessageDialog::MessageDialog (const QString& message,
+                              const QString& title,
                               const QString& qsicon,
                               const QStringList& qsbutton,
                               const QString& defbutton,
                               const QStringList& role)
-  : QMessageBox (QMessageBox::NoIcon, title, message, 0, 0)
+  : QMessageBox (QMessageBox::NoIcon, title.isEmpty () ? " " : title,
+                 message, 0, 0)
 {
   // Create a NonModal message.
   setWindowModality (Qt::NonModal);
 
   // Interpret the icon string, because enumeration QMessageBox::Icon can't
   // easily be made to pass through a signal.
   QMessageBox::Icon eicon = QMessageBox::NoIcon;
   if (qsicon == "error")
@@ -126,17 +120,17 @@ MessageDialog::MessageDialog (const QStr
     eicon = QMessageBox::Question;
   setIcon (eicon);
 
   int N = qsbutton.size () < role.size () ? qsbutton.size () : role.size ();
   if (N == 0)
     addButton (QMessageBox::Ok);
   else
     {
-      for (int i = 0; i < N; i++)
+      for (int i = N-1; i >= 0; i--)
         {
           // Interpret the button role string, because enumeration
           // QMessageBox::ButtonRole can't be made to pass through a signal.
           QString srole = role.at (i);
           QMessageBox::ButtonRole erole = QMessageBox::InvalidRole;
           if (srole == "YesRole")
             erole = QMessageBox::YesRole;
           else if (srole == "NoRole")
@@ -146,31 +140,36 @@ MessageDialog::MessageDialog (const QStr
           else if (srole == "AcceptRole")
             erole = QMessageBox::AcceptRole;
 
           QPushButton *pbutton = addButton (qsbutton.at (i), erole);
           if (qsbutton.at (i) == defbutton)
             setDefaultButton (pbutton);
           // Make the last button the button pressed when <esc> key activated.
           if (i == N-1)
-            setEscapeButton (pbutton);
+            {
+#define ACTIVE_ESCAPE true
+#if ACTIVE_ESCAPE
+              setEscapeButton (pbutton);
+#else
+              setEscapeButton (0);
+#endif
+#undef ACTIVE_ESCAPE
+            }
         }
     }
 
   connect (this, SIGNAL (buttonClicked (QAbstractButton *)),
            &uiwidget_creator, SLOT (dialog_button_clicked (QAbstractButton *)));
-
-  connect (this, SIGNAL (finished (int)),
-           &uiwidget_creator, SLOT (dialog_finished (int)));
 }
 
 
 ListDialog::ListDialog (const QStringList& list, const QString& mode,
                         int wd, int ht, const QList<int>& initial,
-                        const QString& name, const QString& prompt_string,
+                        const QString& title, const QStringList& prompt,
                         const QString& ok_string, const QString& cancel_string)
   : QDialog ()
 {
   // Put the list of items into a model.  Keep this off of the stack
   // because this conceivably could be a very large list.
   QAbstractItemModel *model = new QStringListModel (list);
 
   QListView *view = new QListView;
@@ -189,55 +188,74 @@ ListDialog::ListDialog (const QStringLis
 
   selector = view->selectionModel ();
   int i = 0;
   for (QList<int>::const_iterator it = initial.begin ();
        it != initial.end (); it++)
     {
       QModelIndex idx = model->index (initial.value (i++) - 1, 0,
                                       QModelIndex ());
-
       selector->select (idx, QItemSelectionModel::Select);
     }
 
   bool fixed_layout = false;
   if (wd > 0 && ht > 0)
     {
       view->setFixedSize (wd, ht);
       fixed_layout = true;
     }
 
-  QPushButton *select_all = new QPushButton (tr ("Select All"));
+  view->setEditTriggers (QAbstractItemView::NoEditTriggers);
+
   QVBoxLayout *listLayout = new QVBoxLayout;
+  if (! prompt.isEmpty ())
+    {
+      // For now, assume html-like Rich Text.  May be incompatible
+      // with something down the road, but just testing capability.
+      QString prompt_string;
+      for (int j = 0; j < prompt.length (); j++)
+        {
+          if (j > 0)
+#define RICH_TEXT true
+#if RICH_TEXT
+            prompt_string.append ("<br>");
+#else
+            prompt_string.append ("\n");
+#endif
+          prompt_string.append (prompt.at (j));
+        }
+      QLabel *plabel = new QLabel (prompt_string);
+#if RICH_TEXT
+      plabel->setTextFormat (Qt::RichText);
+#endif
+#undef RICH_TEXT
+      listLayout->addWidget (plabel);
+    }
   listLayout->addWidget (view);
+  QPushButton *select_all = new QPushButton (tr ("Select All"));
+  select_all->setEnabled (mode == "Multiple");
   listLayout->addWidget (select_all);
-  QGroupBox *listGroupBox = new QGroupBox (prompt_string);
-  listGroupBox->setLayout (listLayout);
-
-  //    QIcon *question_mark = new QIcon;
-  QHBoxLayout *horizontalLayout = new QHBoxLayout;
-  //    horizontalLayout->addWidget (question_mark);
-  horizontalLayout->addWidget (listGroupBox);
 
   QPushButton *buttonOk = new QPushButton (ok_string);
   QPushButton *buttonCancel = new QPushButton (cancel_string);
   QHBoxLayout *buttonsLayout = new QHBoxLayout;
   buttonsLayout->addStretch (1);
   buttonsLayout->addWidget (buttonOk);
   buttonsLayout->addWidget (buttonCancel);
 
   QVBoxLayout *mainLayout = new QVBoxLayout;
-  mainLayout->addLayout (horizontalLayout);
+  mainLayout->addLayout (listLayout);
   mainLayout->addSpacing (12);
   mainLayout->addLayout (buttonsLayout);
   setLayout (mainLayout);
   if (fixed_layout)
     layout()->setSizeConstraint (QLayout::SetFixedSize);
 
-  setWindowTitle (name);
+  // If empty, make blank rather than use default OS behavior.
+  setWindowTitle (title.isEmpty () ? " " : title);
 
   connect (select_all, SIGNAL (clicked ()),
            view, SLOT (selectAll ()));
 
   connect (buttonOk, SIGNAL (clicked ()),
            this, SLOT (buttonOk_clicked ()));
 
   connect (buttonCancel, SIGNAL (clicked ()),
@@ -282,24 +300,24 @@ ListDialog::buttonCancel_clicked (void)
 void
 ListDialog::reject (void)
 {
   buttonCancel_clicked ();
 }
 
 
 InputDialog::InputDialog (const QStringList& prompt, const QString& title,
-                          const QIntList& nr, const QIntList& nc,
+                          const QFloatList& nr, const QFloatList& nc,
                           const QStringList& defaults)
   : QDialog ()
 {
 
-//#define LINE_EDIT_FOLLOWS_PROMPT
+#define LINE_EDIT_FOLLOWS_PROMPT false
 
-#ifdef LINE_EDIT_FOLLOWS_PROMPT
+#if LINE_EDIT_FOLLOWS_PROMPT
     // Prompt on left followed by input on right.
     QGridLayout *promptInputLayout = new QGridLayout;
 #else
     // Prompt aligned above input.
     QVBoxLayout *promptInputLayout = new QVBoxLayout;
 #endif
     int N_gridrows = prompt.size ();
     for (int i = 0; i < N_gridrows; i++)
@@ -313,39 +331,41 @@ InputDialog::InputDialog (const QStringL
             line_edit->setFixedHeight (intval);
             if (nc.at (i) > 0)
               {
                 intval = qsize.height () * nc.at (i) / 2;
                 line_edit->setFixedWidth (intval);
               }
           }
         input_line << line_edit;
-#ifdef LINE_EDIT_FOLLOWS_PROMPT
+#if LINE_EDIT_FOLLOWS_PROMPT
         promptInputLayout->addWidget (label, i + 1, 0);
         promptInputLayout->addWidget (line_edit, i + 1, 1);
 #else
         promptInputLayout->addWidget (label);
         promptInputLayout->addWidget (line_edit);
 #endif
       }
+#undef LINE_EDIT_FOLLOWS_PROMPT
 
     QPushButton *buttonOk = new QPushButton("OK");
     QPushButton *buttonCancel = new QPushButton("Cancel");
     QHBoxLayout *buttonsLayout = new QHBoxLayout;
     buttonsLayout->addStretch (1);
     buttonsLayout->addWidget (buttonOk);
     buttonsLayout->addWidget (buttonCancel);
 
     QVBoxLayout *mainLayout = new QVBoxLayout;
     mainLayout->addLayout (promptInputLayout);
     mainLayout->addSpacing (12);
     mainLayout->addLayout (buttonsLayout);
     setLayout (mainLayout);
 
-    setWindowTitle (title);
+    // If empty, make blank rather than use default OS behavior.
+    setWindowTitle (title.isEmpty () ? " " : title);
 
     connect (buttonOk, SIGNAL (clicked ()),
              this, SLOT (buttonOk_clicked ()));
 
     connect (buttonCancel, SIGNAL (clicked ()),
              this, SLOT (buttonCancel_clicked ()));
 
     connect (this, SIGNAL (finish_input (const QStringList&, const int)),
diff --git a/libgui/src/dialog.h b/libgui/src/dialog.h
--- a/libgui/src/dialog.h
+++ b/libgui/src/dialog.h
@@ -53,49 +53,49 @@ public:
 public:
 
   void signal_dialog (const QString& message, const QString& title,
                       const QString& icon, const QStringList& button,
                       const QString& defbutton, const QStringList& role)
   {
 
     // Use the last button in the list as the reject result, i.e., when no
-    // button is pressed such as in the case of <esc> and close button.
+    // button is pressed such as in the case of the upper right close tab.
     if (!button.isEmpty ())
       dialog_button = button.last ();
 
     QString xicon = icon;
     if (xicon.isEmpty ())
       xicon = "none";
 
     emit create_dialog (message, title, xicon, button, defbutton, role);
   };
 
   int get_dialog_result (void) { return dialog_result; }
 
   const QString *get_dialog_button (void) { return &dialog_button; }
 
   bool signal_listview (const QStringList& list, const QString& mode,
                         int wd, int ht, const QList<int>& initial,
-                        const QString& name, const QString& prompt_string,
+                        const QString& name, const QStringList& prompt,
                         const QString& ok_string, const QString& cancel_string)
   {
     if (list.isEmpty ())
       return false;
 
     emit create_listview (list, mode, wd, ht, initial, name,
-                          prompt_string, ok_string, cancel_string);
+                          prompt, ok_string, cancel_string);
 
     return true;
   };
 
   const QIntList *get_list_index (void) { return list_index; }
 
   bool signal_inputlayout (const QStringList& prompt, const QString& title,
-                           const QIntList& nr, const QIntList& nc,
+                           const QFloatList& nr, const QFloatList& nc,
                            const QStringList& defaults)
   {
     if (prompt.isEmpty ())
       return false;
 
     emit create_inputlayout (prompt, title, nr, nc, defaults);
 
     return true;
@@ -121,29 +121,27 @@ public:
   }
 
 signals:
 
   void create_dialog (const QString&, const QString&, const QString&,
                       const QStringList&, const QString&, const QStringList&);
 
   void create_listview (const QStringList&, const QString&, int, int,
-                        const QIntList&, const QString&, const QString&,
+                        const QIntList&, const QString&, const QStringList&,
                         const QString&, const QString&);
 
   void create_inputlayout (const QStringList&, const QString&,
-                           const QIntList&, const QIntList&,
+                           const QFloatList&, const QFloatList&,
                            const QStringList&);
 
   void create_debug_cd_or_addpath_dialog (const QString&, const QString&, bool);
 
 public slots:
 
-  void dialog_finished (int result);
-
   void dialog_button_clicked (QAbstractButton *button);
 
   void list_select_finished (const QIntList& selected,
                              const int button_pressed);
 
   void input_finished (const QStringList& input, const int button_pressed);
 
 private:
@@ -162,40 +160,50 @@ private:
 
   QMutex mutex;
 
   QWaitCondition waitcondition;
 };
 
 extern QUIWidgetCreator uiwidget_creator;
 
+
 class MessageDialog : public QMessageBox
 {
   Q_OBJECT
 
 public:
 
   explicit MessageDialog (const QString& message, const QString& title,
                           const QString& icon, const QStringList& button,
                           const QString& defbutton,
                           const QStringList& role);
+
+private:
+
+  void closeEvent (QCloseEvent *)
+  {
+    // Reroute the close tab to a button click so there is only a single
+    // route to waking the wait condition.
+    emit buttonClicked (0);
+  }
 };
 
 
 class ListDialog : public QDialog
 {
   Q_OBJECT
 
   QItemSelectionModel *selector;
 
 public:
 
   explicit ListDialog (const QStringList& list, const QString& mode,
                        int width, int height, const QList<int>& initial,
-                       const QString& name, const QString& prompt_string,
+                       const QString& name, const QStringList& prompt,
                        const QString& ok_string, const QString& cancel_string);
 
 signals:
 
   void finish_selection (const QIntList&, const int);
 
 public slots:
 
@@ -211,17 +219,17 @@ class InputDialog : public QDialog
 {
   Q_OBJECT
 
   QList<QLineEdit *> input_line;
 
 public:
 
   explicit InputDialog (const QStringList& prompt, const QString& title,
-                        const QIntList& nr, const QIntList& nc,
+                        const QFloatList& nr, const QFloatList& nc,
                         const QStringList& defaults);
 
 signals:
 
   void finish_input (const QStringList&, const int);
 
 public slots:
 
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -569,33 +569,33 @@ main_window::connect_uiwidget_links ()
                                        const QString&, const QStringList&,
                                        const QString&, const QStringList&)));
 
   // Register QIntList so that list of ints may be part of a signal.
   qRegisterMetaType<QIntList> ("QIntList");
   connect (&uiwidget_creator,
            SIGNAL (create_listview (const QStringList&, const QString&,
                                     int, int, const QIntList&,
-                                    const QString&, const QString&,
+                                    const QString&, const QStringList&,
                                     const QString&, const QString&)),
            this,
            SLOT (handle_create_listview (const QStringList&, const QString&,
                                          int, int, const QIntList&,
-                                         const QString&, const QString&,
+                                         const QString&, const QStringList&,
                                          const QString&, const QString&)));
 
-  // Register QFloatList so that list of ints may be part of a signal.
+  // Register QFloatList so that list of floats may be part of a signal.
   qRegisterMetaType<QFloatList> ("QFloatList");
   connect (&uiwidget_creator,
            SIGNAL (create_inputlayout (const QStringList&, const QString&,
-                                       const QIntList&, const QIntList&,
+                                       const QFloatList&, const QFloatList&,
                                        const QStringList&)),
            this,
            SLOT (handle_create_inputlayout (const QStringList&, const QString&,
-                                            const QIntList&, const QIntList&,
+                                            const QFloatList&, const QFloatList&,
                                             const QStringList&)));
 
   connect (&uiwidget_creator,
            SIGNAL (create_debug_cd_or_addpath_dialog (const QString&,
                                                       const QString&, bool)),
            this,
            SLOT (handle_create_debug_cd_or_addpath_dialog (const QString&,
                                                            const QString&,
@@ -623,35 +623,35 @@ main_window::handle_create_dialog (const
 // view size and decorative text.
 
 void
 main_window::handle_create_listview (const QStringList& list,
                                      const QString& mode,
                                      int wd, int ht,
                                      const QIntList& initial,
                                      const QString& name,
-                                     const QString& prompt_string,
+                                     const QStringList& prompt,
                                      const QString& ok_string,
                                      const QString& cancel_string)
 {
   ListDialog *list_dialog = new ListDialog (list, mode, wd, ht,
-                                            initial, name, prompt_string,
+                                            initial, name, prompt,
                                             ok_string, cancel_string);
 
   list_dialog->setAttribute (Qt::WA_DeleteOnClose);
   list_dialog->show ();
 }
 
 // Create an input dialog with specified prompts and defaults, title and
 // row/column size specifications.
 void
 main_window::handle_create_inputlayout (const QStringList& prompt,
                                         const QString& title,
-                                        const QIntList& nr,
-                                        const QIntList& nc,
+                                        const QFloatList& nr,
+                                        const QFloatList& nc,
                                         const QStringList& defaults)
 {
   InputDialog *input_dialog = new InputDialog (prompt, title, nr, nc,
                                                defaults);
 
   input_dialog->setAttribute (Qt::WA_DeleteOnClose);
   input_dialog->show ();
 }
@@ -1475,13 +1475,13 @@ main_window::find_files(const QString &s
 
   find_files_dlg->set_search_dir(start_dir);
 
   find_files_dlg->activateWindow ();
 
 }
 
 void 
-main_window::find_files_finished(int button)
+main_window::find_files_finished(int)
 {
 
 }
 
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -129,22 +129,22 @@ public slots:
                              const QString& icon, const QStringList& button,
                              const QString& defbutton,
                              const QStringList& role);
 
   void handle_create_listview (const QStringList& list, const QString& mode,
                                int width, int height,
                                const QIntList& initial,
                                const QString& name,
-                               const QString& prompt_string,
+                               const QStringList& prompt,
                                const QString& ok_string,
                                const QString& cancel_string);
 
   void handle_create_inputlayout (const QStringList&, const QString&,
-                                  const QIntList&, const QIntList&,
+                                  const QFloatList&, const QFloatList&,
                                   const QStringList&);
 
   void handle_create_debug_cd_or_addpath_dialog (const QString& file,
                                                  const QString& dir,
                                                  bool addpath_option);
   // find files dialog 
   void find_files(const QString &startdir=QDir::currentPath());
   void find_files_finished(int);
diff --git a/libgui/src/octave-qt-link.cc b/libgui/src/octave-qt-link.cc
--- a/libgui/src/octave-qt-link.cc
+++ b/libgui/src/octave-qt-link.cc
@@ -66,26 +66,59 @@ octave_qt_link::do_edit_file (const std:
 
 int
 octave_qt_link::do_message_dialog (const std::string& dlg,
                                    const std::string& msg,
                                    const std::string& title)
 {
   uiwidget_creator.signal_dialog (QString::fromStdString (msg),
                                   QString::fromStdString (title),
-                                  QString (), QStringList (),
-                                  QString (), QStringList ());
+                                  QString::fromStdString (dlg),
+                                  QStringList (), QString (),
+                                  QStringList ());
 
   // Wait while the user is responding to message box.
   uiwidget_creator.wait ();
 
   // The GUI has sent a signal and the process has been awakened.
   return uiwidget_creator.get_dialog_result ();
 }
 
+std::string
+octave_qt_link::do_question_dialog (const std::string& msg,
+                                    const std::string& title,
+                                    const std::string& btn1,
+                                    const std::string& btn2,
+                                    const std::string& btn3,
+                                    const std::string& btndef)
+{
+  QStringList btn;
+  QStringList role;
+  role << "AcceptRole" << "AcceptRole" << "AcceptRole";
+  btn << QString::fromStdString (btn1);
+  if (btn2 == "")
+    role.removeAt (0);
+  else
+    btn << QString::fromStdString (btn2);
+  btn << QString::fromStdString (btn3);
+
+  uiwidget_creator.signal_dialog (QString::fromStdString (msg),
+                                  QString::fromStdString (title),
+                                  "quest",
+                                  btn,
+                                  QString::fromStdString (btndef),
+                                  role);
+
+  // Wait while the user is responding to message box.
+  uiwidget_creator.wait ();
+
+  // The GUI has sent a signal and the process has been awakened.
+  return uiwidget_creator.get_dialog_button ()->toStdString ();
+}
+
 static QStringList
 make_qstring_list (const std::list<std::string>& lst)
 {
   QStringList retval;
 
   for (std::list<std::string>::const_iterator it = lst.begin ();
        it != lst.end (); it++)
     {
@@ -97,52 +130,52 @@ make_qstring_list (const std::list<std::
 
 
 std::pair<std::list<int>, int>
 octave_qt_link::do_list_dialog (const std::list<std::string>& list,
                                 const std::string& mode,
                                 int width, int height,
                                 const std::list<int>& initial,
                                 const std::string& name,
-                                const std::string& prompt_string,
+                                const std::list<std::string>& prompt,
                                 const std::string& ok_string,
                                 const std::string& cancel_string)
 {
   uiwidget_creator.signal_listview (make_qstring_list (list),
                                     QString::fromStdString (mode),
                                     width, height,
                                     QList<int>::fromStdList (initial),
                                     QString::fromStdString (name),
-                                    QString::fromStdString (prompt_string),
+                                    make_qstring_list (prompt),
                                     QString::fromStdString (ok_string),
                                     QString::fromStdString (cancel_string));
 
   // Wait while the user is responding to message box.
   uiwidget_creator.wait ();
 
   // The GUI has sent a signal and the process has been awakened.
   const QIntList *selected = uiwidget_creator.get_list_index ();
   int ok = uiwidget_creator.get_dialog_result ();
 
   return std::pair<std::list<int>, int> (selected->toStdList (), ok);
 }
 
 std::list<std::string>
 octave_qt_link::do_input_dialog (const std::list<std::string>& prompt,
                                  const std::string& title,
-                                 const std::list<int>& nr,
-                                 const std::list<int>& nc,
+                                 const std::list<float>& nr,
+                                 const std::list<float>& nc,
                                  const std::list<std::string>& defaults)
 {
   std::list<std::string> retval;
 
   uiwidget_creator.signal_inputlayout (make_qstring_list (prompt),
                                        QString::fromStdString (title),
-                                       QList<int>::fromStdList (nr),
-                                       QList<int>::fromStdList (nc),
+                                       QFloatList::fromStdList (nr),
+                                       QFloatList::fromStdList (nc),
                                        make_qstring_list (defaults));
 
   // Wait while the user is responding to message box.
   uiwidget_creator.wait ();
 
   // The GUI has sent a signal and the process has been awakened.
   const QStringList *inputLine = uiwidget_creator.get_string_list ();
 
diff --git a/libgui/src/octave-qt-link.h b/libgui/src/octave-qt-link.h
--- a/libgui/src/octave-qt-link.h
+++ b/libgui/src/octave-qt-link.h
@@ -57,31 +57,36 @@ public:
 
   bool do_exit (int status);
 
   bool do_edit_file (const std::string& file);
 
   int do_message_dialog (const std::string& dlg, const std::string& msg,
                          const std::string& title);
 
+  std::string
+  do_question_dialog (const std::string& msg, const std::string& title,
+                      const std::string& btn1, const std::string& btn2,
+                      const std::string& btn3, const std::string& btndef);
+
   std::pair<std::list<int>, int>
   do_list_dialog (const std::list<std::string>& list,
                   const std::string& mode,
                   int width, int height,
                   const std::list<int>& initial_value,
                   const std::string& name,
-                  const std::string& prompt_string,
+                  const std::list<std::string>& prompt,
                   const std::string& ok_string,
                   const std::string& cancel_string);
 
   std::list<std::string>
   do_input_dialog (const std::list<std::string>& prompt,
                    const std::string& title,
-                   const std::list<int>& nr,
-                   const std::list<int>& nc,
+                   const std::list<float>& nr,
+                   const std::list<float>& nc,
                    const std::list<std::string>& defaults);
 
   int
   do_debug_cd_or_addpath_error (const std::string& file,
                                 const std::string& dir,
                                 bool addpath_option);
 
   void do_change_directory (const std::string& dir);
diff --git a/libinterp/interpfcn/octave-link.cc b/libinterp/interpfcn/octave-link.cc
--- a/libinterp/interpfcn/octave-link.cc
+++ b/libinterp/interpfcn/octave-link.cc
@@ -149,28 +149,58 @@ Undocumented internal function.\n\
         }
       else
         error ("invalid arguments");
     }
 
   return retval;
 }
 
+DEFUN (__octave_link_question_dialog__, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} __octave_link_question_dialog__ (@var{msg}, @var{title}, @var{btn1}, @var{btn2}, @var{btn3}, @var{default})\n\
+Undocumented internal function.\n\
+@end deftypefn")
+{
+  octave_value retval;
+
+  if (args.length () == 6)
+    {
+      std::string msg = args(0).string_value ();
+      std::string title = args(1).string_value ();
+      std::string btn1 = args(2).string_value ();
+      std::string btn2 = args(3).string_value ();
+      std::string btn3 = args(4).string_value ();
+      std::string btndef = args(5).string_value ();
+
+      if (! error_state)
+        {
+          flush_octave_stdout ();
+
+          retval = octave_link::question_dialog (msg, title, btn1, btn2, btn3, btndef);
+        }
+      else
+        error ("invalid arguments");
+    }
+
+  return retval;
+}
+
 DEFUN (__octave_link_list_dialog__, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} __octave_link_list_dialog__ (@var{list}, @var{mode}, @var{size}, @var{intial}, @var{name}, @var{prompt}, @var{ok_string}, @var{cancel_string})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   if (args.length () == 8)
     {
       Cell list = args(0).cell_value ();
-      const Array<std::string> tlist= list.cellstr_value ();
+      const Array<std::string> tlist = list.cellstr_value ();
       octave_idx_type nel = tlist.numel ();
       std::list<std::string> list_lst;
       for (octave_idx_type i = 0; i < nel; i++)
         list_lst.push_back (tlist(i));
 
       std::string mode = args(1).string_value ();
 
       Matrix size_matrix = args(2).matrix_value ();
@@ -179,27 +209,32 @@ Undocumented internal function.\n\
 
       Matrix initial_matrix = args(3).matrix_value ();
       nel = initial_matrix.numel ();
       std::list<int> initial_lst;
       for (octave_idx_type i = 0; i < nel; i++)
         initial_lst.push_back (initial_matrix(i));
 
       std::string name = args(4).string_value ();
-      std::string prompt_string = args(5).string_value ();
+      list = args(5).cell_value ();
+      const Array<std::string> plist = list.cellstr_value ();
+      nel = plist.numel ();
+      std::list<std::string> prompt_lst;
+      for (octave_idx_type i = 0; i < nel; i++)
+        prompt_lst.push_back (plist(i));
       std::string ok_string = args(6).string_value ();
       std::string cancel_string = args(7).string_value ();
 
       if (! error_state)
         {
           flush_octave_stdout ();
 
           std::pair<std::list<int>, int> result
             = octave_link::list_dialog (list_lst, mode, width, height,
-                                        initial_lst, name, prompt_string,
+                                        initial_lst, name, prompt_lst,
                                         ok_string, cancel_string);
 
           std::list<int> items_lst = result.first;
           nel = items_lst.size ();
           Matrix items (dim_vector (1, nel));
           octave_idx_type i = 0;
           for (std::list<int>::iterator it = items_lst.begin ();
                it != items_lst.end (); it++)
@@ -233,18 +268,18 @@ Undocumented internal function.\n\
       std::list<std::string> prompt_lst;
       for (octave_idx_type i = 0; i < nel; i++)
         prompt_lst.push_back (tmp(i));
 
       std::string title = args(1).string_value ();
 
       Matrix rc = args(2).matrix_value ();
       nel = rc.rows ();
-      std::list<int> nr;
-      std::list<int> nc;
+      std::list<float> nr;
+      std::list<float> nc;
       for (octave_idx_type i = 0; i < nel; i++)
         {
           nr.push_back (rc(i,0));
           nc.push_back (rc(i,1));
         }
 
       Cell defaults = args(3).cell_value ();
       tmp = defaults.cellstr_value ();
diff --git a/libinterp/interpfcn/octave-link.h b/libinterp/interpfcn/octave-link.h
--- a/libinterp/interpfcn/octave-link.h
+++ b/libinterp/interpfcn/octave-link.h
@@ -136,38 +136,47 @@ public:
 
   static int
   message_dialog (const std::string& dlg, const std::string& msg,
                   const std::string& title)
   {
     return enabled () ? instance->do_message_dialog (dlg, msg, title) : 0;
   }
 
+  static std::string
+  question_dialog (const std::string& msg, const std::string& title,
+                   const std::string& btn1, const std::string& btn2,
+                   const std::string& btn3, const std::string& btndef)
+  {
+    return enabled () ? instance->do_question_dialog (msg, title, btn1,
+                                                      btn2, btn3, btndef) : 0;
+  }
+
   static std::pair<std::list<int>, int>
   list_dialog (const std::list<std::string>& list,
                const std::string& mode,
                int width, int height,
                const std::list<int>& initial_value,
                const std::string& name,
-               const std::string& prompt_string,
+               const std::list<std::string>& prompt,
                const std::string& ok_string,
                const std::string& cancel_string)
   {
     return enabled ()
       ? instance->do_list_dialog (list, mode, width, height,
-                                  initial_value, name, prompt_string,
+                                  initial_value, name, prompt,
                                   ok_string, cancel_string)
       : std::pair<std::list<int>, int> ();
   }
 
   static std::list<std::string>
   input_dialog (const std::list<std::string>& prompt,
                 const std::string& title,
-                const std::list<int>& nr,
-                const std::list<int>& nc,
+                const std::list<float>& nr,
+                const std::list<float>& nc,
                 const std::list<std::string>& defaults)
   {
     return enabled ()
       ? instance->do_input_dialog (prompt, title, nr, nc, defaults)
       : std::list<std::string> ();
   }
 
   static int debug_cd_or_addpath_error (const std::string& file,
@@ -327,31 +336,36 @@ protected:
   virtual bool do_exit (int status) = 0;
 
   virtual bool do_edit_file (const std::string& file) = 0;
 
   virtual int
   do_message_dialog (const std::string& dlg, const std::string& msg,
                      const std::string& title) = 0;
 
+  virtual std::string
+  do_question_dialog (const std::string& msg, const std::string& title,
+                      const std::string& btn1, const std::string& btn2,
+                      const std::string& btn3, const std::string& btndef) = 0;
+
   virtual std::pair<std::list<int>, int>
   do_list_dialog (const std::list<std::string>& list,
                   const std::string& mode,
                   int width, int height,
                   const std::list<int>& initial_value,
                   const std::string& name,
-                  const std::string& prompt_string,
+                  const std::list<std::string>& prompt,
                   const std::string& ok_string,
                   const std::string& cancel_string) = 0;
 
   virtual std::list<std::string>
   do_input_dialog (const std::list<std::string>& prompt,
                    const std::string& title,
-                   const std::list<int>& nr,
-                   const std::list<int>& nc,
+                   const std::list<float>& nr,
+                   const std::list<float>& nc,
                    const std::list<std::string>& defaults) = 0;
 
   virtual int
   do_debug_cd_or_addpath_error (const std::string& file,
                                 const std::string& dir,
                                 bool addpath_option) = 0;
 
   virtual void do_change_directory (const std::string& dir) = 0;
diff --git a/scripts/ui/errordlg.m b/scripts/ui/errordlg.m
--- a/scripts/ui/errordlg.m
+++ b/scripts/ui/errordlg.m
@@ -25,23 +25,23 @@
 ## ("\n"), or it may be a cellstr array with one element for each
 ## line.  The optional input @var{title} (character string) can be used to
 ## set the dialog caption.  The default title is "Error Dialog".
 ##
 ## The return value is always 1.
 ## @seealso{helpdlg, inputdlg, listdlg, msgbox, questdlg, warndlg}
 ## @end deftypefn
 
-function h = errordlg (msg, title = "Error Dialog")
+function retval = errordlg (msg, title = "Error Dialog")
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
   endif
 
-  retval = message_dialog ("errdlg", msg, title);
+  retval = message_dialog ("errdlg", msg, title, "error");
 
 endfunction
 
 %!demo
 %!  disp('- test errordlg with prompt only.');
 %!  errordlg('Oops, an expected error occured');
 
 %!demo
diff --git a/scripts/ui/helpdlg.m b/scripts/ui/helpdlg.m
--- a/scripts/ui/helpdlg.m
+++ b/scripts/ui/helpdlg.m
@@ -25,23 +25,23 @@
 ## ("\n"), or it may be a cellstr array with one element for each
 ## line.  The optional input @var{title} (character string) can be used to
 ## set the dialog caption.  The default title is "Help Dialog".
 ##
 ## The return value is always 1.
 ## @seealso{errordlg, inputdlg, listdlg, msgbox, questdlg, warndlg}
 ## @end deftypefn
 
-function h = helpdlg (msg, title = "Help Dialog")
+function retval = helpdlg (msg, title = "Help Dialog")
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
   endif
 
-  retval = message_dialog ("helpdlg", msg, title);
+  retval = message_dialog ("helpdlg", msg, title, "help");
 
 endfunction
 
 %!demo
 %!  disp('- test helpdlg with a help message only.');
 %!  helpdlg("Below, you should see 3 lines:\nline #1\nline #2, and\nline #3.");
 
 %!demo
diff --git a/scripts/ui/inputdlg.m b/scripts/ui/inputdlg.m
--- a/scripts/ui/inputdlg.m
+++ b/scripts/ui/inputdlg.m
@@ -111,50 +111,40 @@ function cstr = inputdlg (prompt, title 
       rowscols(:,1) = linespec(:);
   elseif (ismatrix (linespec))
     if (rows (linespec) == columns (prompt) && columns (linespec) == 2)
       ## (rows x columns) match, copy array linespec
       rowscols = linespec;
     else
       error ("inputdlg: ROWSCOLS matrix does not match size of PROMPT");
     endif
-
   else
     ## dunno
     error ("inputdlg: unknown form of ROWSCOLS argument");
   endif
+  rowscols = ceil (rowscols);
   
   ## convert numeric values in defaults cell array to strings
   defs = cellfun (@num2str, defaults, "UniformOutput", false);
   rc = arrayfun (@num2str, rowscols, "UniformOutput", false);
 
-  cstr = __octave_link_input_dialog__ (prompt, title, rowscols, defs);
-
-  if (iscell (cstr))
-    return;
-  endif
-
-  if (__have_feature__ ("JAVA"))
+  if (__octave_link_enabled__ ())
+    cstr = __octave_link_input_dialog__ (prompt, title, rowscols, defs);
+  elseif (__have_feature__ ("JAVA"))
     user_inputs = javaMethod ("inputdlg", "org.octave.JDialogBox",
-                              prompt, title, rc, defs);
-    
+                              prompt, title, rc, defs);  
     if (isempty (user_inputs))
       cstr = {};
     else
       cstr = cellstr (user_inputs);
     endif
-
-    return;
-
+  else
+    error ("inputdlg is not available in this version of Octave");
   endif
 
-  ## FIXME -- provide terminal-based implementation here?
-
-  error ("inputdlg is not available in this version of Octave");
-
 endfunction
 
 %!demo
 %!  disp('- test inputdlg with prompt and caption only.');
 %!  prompt = {'Width','Height','Depth'};
 %!  dims = inputdlg ( prompt, 'Enter Box Dimensions' );
 %!  if isempty(dims)
 %!     helpdlg('Canceled by user', 'Information');
diff --git a/scripts/ui/listdlg.m b/scripts/ui/listdlg.m
--- a/scripts/ui/listdlg.m
+++ b/scripts/ui/listdlg.m
@@ -74,92 +74,92 @@
 ## @end group
 ## @end example
 ##
 ## @seealso{errordlg, helpdlg, inputdlg, msgbox, questdlg, warndlg}
 ## @end deftypefn
 
 function [sel, ok] = listdlg (varargin)
 
-   if (nargin < 2)
-     print_usage ();
-   endif
-   
-   listcell = {""};
-   selmode = "multiple";
-   listsize = [160, 300];
-   initialvalue = 1;
-   name = "";
-   prompt = {""};
-   okstring = "OK";
-   cancelstring = "Cancel";
-   
-   ## handle key, value pairs
-   for i = 1:2:nargin-1
-     if strcmp (varargin{i}, "ListString")
-       listcell = varargin{i+1};
-     elseif strcmp (varargin{i}, "SelectionMode")
-       selmode = varargin{i+1};
-     elseif strcmp (varargin{i}, "ListSize")
-       listsize = varargin{i+1};
-     elseif strcmp (varargin{i}, "InitialValue")
-       initialvalue = varargin{i+1};
-     elseif strcmp (varargin{i}, "Name")
-       name = varargin{i+1};
-     elseif strcmp (varargin{i}, "PromptString")
-       prompt = varargin{i+1};
-     elseif strcmp (varargin{i}, "OKString")
-       okstring = varargin{i+1};
-     elseif strcmp (varargin{i}, "CancelString")
-       cancelstring = varargin{i+1};
-     endif
-   endfor
+  if (nargin < 2)
+    print_usage ();
+  endif
+
+  listcell = {""};
+  selmode = "Multiple";
+  listsize = [160, 300];
+  initialvalue = 1;
+  name = "";
+  prompt = {};
+  okstring = "OK";
+  cancelstring = "Cancel";
 
-   ## make sure prompt strings are a cell array
-   if (! iscell (prompt))
-     prompt = {prompt};
-   endif
+  ## handle key, value pairs
+  for i = 1:2:nargin-1
+    if strcmp (varargin{i}, "ListString")
+      listcell = varargin{i+1};
+    elseif strcmp (varargin{i}, "SelectionMode")
+      selmode = varargin{i+1};
+    elseif strcmp (varargin{i}, "ListSize")
+      listsize = varargin{i+1};
+    elseif strcmp (varargin{i}, "InitialValue")
+      initialvalue = varargin{i+1};
+    elseif strcmp (varargin{i}, "Name")
+      name = varargin{i+1};
+    elseif strcmp (varargin{i}, "PromptString")
+      prompt = varargin{i+1};
+    elseif strcmp (varargin{i}, "OKString")
+      okstring = varargin{i+1};
+    elseif strcmp (varargin{i}, "CancelString")
+      cancelstring = varargin{i+1};
+    endif
+  endfor
 
-   ## make sure listcell strings are a cell array
-   if (! iscell (listcell))
-     listcell = {listcell};
-   endif
+  ## make sure prompt strings are a cell array
+  if (! iscell (prompt))
+    prompt = {prompt};
+  endif
 
-   [sel, ok] = __octave_link_list_dialog__ (listcell, selmode, listsize,
+  ## make sure listcell strings are a cell array
+  if (! iscell (listcell))
+    listcell = {listcell};
+  endif
+
+  ## make sure valid selection mode
+  if (! strcmp (selmode, "Multiple") && ! strcmp (selmode, "Single"))
+    error ("invalid SelectionMode");
+  endif
+
+  if (__octave_link_enabled__ ())
+    [sel, ok] = __octave_link_list_dialog__ (listcell, selmode, listsize,
                                             initialvalue, name, prompt,
                                             okstring, cancelstring);
-   if (ok > 0)
-     return;
-   endif
-
-   if (__have_feature__ ("JAVA"))
-     ## transform matrices to cell arrays of strings
-     ## swap width and height to correct calling format for JDialogBox
-     listsize = {num2str(listsize(2)), num2str(listsize(1))};
-     initialvalue = arrayfun (@num2str, initialvalue, "UniformOutput", false);
-     
-     ret = javaMethod ("listdlg", "org.octave.JDialogBox", listcell,
-                       selmode, listsize, initialvalue, name, prompt,
-                       okstring, cancelstring);
+  elseif (__have_feature__ ("JAVA"))
+    ## transform matrices to cell arrays of strings
+    ## swap width and height to correct calling format for JDialogBox
+    listsize = {num2str(listsize(2)), num2str(listsize(1))};
+    initialvalue = arrayfun (@num2str, initialvalue, "UniformOutput", false);
+    if isempty(prompt)
+      prompt = {""};
+    endif
 
-     if (numel (ret) > 0)
-       sel = ret;
-       ok = 1;
-     else
-       sel = {};
-       ok = 0;
-     endif
+    ret = javaMethod ("listdlg", "org.octave.JDialogBox", listcell,
+                      selmode, listsize, initialvalue, name, prompt,
+                      okstring, cancelstring);
 
-     return;
-
-   endif
-
-   ## FIXME -- provide terminal-based implementation here?
-
-   error ("listdlg is not available in this version of Octave");
+    if (numel (ret) > 0)
+      sel = ret;
+      ok = 1;
+    else
+      sel = {};
+      ok = 0;
+    endif
+  else
+    error ("listdlg is not available in this version of Octave");
+  endif
 
 endfunction
 
 %!demo
 %!  disp('- test listdlg with selectionmode single. No caption, no prompt.');
 %!  itemlist = {'An item \\alpha', 'another', 'yet another'};
 %!  s = listdlg ( 'ListString',itemlist, 'SelectionMode','Single' );
 %!  imax = numel (s);
@@ -169,13 +169,24 @@ endfunction
 
 %!demo
 %!  disp('- test listdlg with selectionmode and preselection. Has caption and two lines prompt.');
 %!  itemlist = {'An item \\alpha', 'another', 'yet another'};
 %!  s = listdlg ( 'ListString',itemlist, ...
 %!                'SelectionMode','Multiple', ...
 %!                'Name','Selection Dialog', ...
 %!                'InitialValue',[1,2,3,4],
-%!                'PromptString',{'Select an item...', '...or multiple items'} );
+%!                'PromptString',{'Select <b>an</b> item...', '...or <b>multiple</b> items'} );
 %!  imax = numel (s);
 %!  for i=1:1:imax
 %!     disp(['Selected: ',num2str(i),': ', itemlist{s(i)}]);
 %!  end
+
+%!demo
+%!  disp('- test listdlg with listsize.');
+%!  itemlist = {"Neutron","Electron","Quark","Proton","Neutrino"};
+%!  s = listdlg ( "ListString",itemlist,
+%!                "Name","Bits and Pieces",
+%!                "ListSize",[200 75] );
+%!  imax = numel (s);
+%!  for i=1:1:imax
+%!     disp(['Selected: ',num2str(i),': ', itemlist{s(i)}]);
+%!  end
diff --git a/scripts/ui/private/message_dialog.m b/scripts/ui/private/message_dialog.m
--- a/scripts/ui/private/message_dialog.m
+++ b/scripts/ui/private/message_dialog.m
@@ -30,44 +30,36 @@ function retval = message_dialog (caller
     else
       error ("%s: MSG must be a character string or cellstr array", caller);
     endif
   endif
 
   if (! ischar (title))
     error ("%s: TITLE must be a character string", caller);
   endif
-  
+
   dlg = "emptydlg";
   if (nargin == 4)
     switch (icon)
       case "error"
         dlg = "errordlg";
       case "help"
         dlg = "helpdlg";
       case "warn"
         dlg = "warndlg";
       case "none"
         dlg = "emptydlg";
       otherwise
         error ("%s: ICON is not a valid type", caller);
     endswitch
-  endif
-
-  retval = __octave_link_message_dialog__ (dlg, msg, title);
-  if (retval > 0)
-    return;
+  else
+    icon = "none";
   endif
 
-  if (__have_feature__ ("JAVA"))
+  if (__octave_link_enabled__ ())
+    retval = __octave_link_message_dialog__ (icon, msg, title);
+  elseif (__have_feature__ ("JAVA"))
     retval = javaMethod (dlg, "org.octave.JDialogBox", msg, title);
-    if (retval > 0)
-      return;
-    endif
-  endif
-
-  ## FIXME -- provide terminal-based implementation here?
-
-  if (retval <= 0)
+  else
     error ("%s is not available in this version of Octave", dlg);
   endif
 
 endfunction
diff --git a/scripts/ui/questdlg.m b/scripts/ui/questdlg.m
--- a/scripts/ui/questdlg.m
+++ b/scripts/ui/questdlg.m
@@ -65,37 +65,110 @@ function btn = questdlg (msg, title = "Q
     error ("questdlg: TITLES must be a character string");
   endif
 
   options{1} = "Yes";      # button1
   options{2} = "No";       # button2
   options{3} = "Cancel";   # button3
   options{4} = "Yes";      # default
 
+  defbtn_error_msg = "questdlg: DEFAULT must match one of the button options";
+
   switch (numel (varargin))
+    case 0
+      ## use default default
+
     case 1
       ## default button string
       options{4} = varargin{1};  # default
+      if (! any (strcmp (options{4}, options(1:3))))
+        error (defbtn_error_msg);
+      end
 
     case 3
       ## two buttons and default button string
       options{1} = varargin{1};  # button1
       options{2} = "";           # not used, no middle button
       options{3} = varargin{2};  # button3
       options{4} = varargin{3};  # default
+      if (! any (strcmp (options{4}, options([1 3]))))
+        error (defbtn_error_msg);
+      end
 
     case 4
       ## three buttons and default button string
       options{1} = varargin{1};  # button1
       options{2} = varargin{2};  # button2
       options{3} = varargin{3};  # button3
       options{4} = varargin{4};  # default
+      if (! any (strcmp (options{4}, options(1:3))))
+        error (defbtn_error_msg);
+      end
 
     otherwise
       print_usage ();
 
   endswitch
 
-  btn = javaMethod ("questdlg", "org.octave.JDialogBox", msg,
-                     title, options);
+  if (__octave_link_enabled__ ())
+    btn = __octave_link_question_dialog__ (msg, title, options{1}, options{2},
+                                           options{3}, options{4});
+  elseif (__have_feature__ ("JAVA"))
+    btn = javaMethod ("questdlg", "org.octave.JDialogBox", msg,
+                      title, options);
+  else
+    error ("questdlg is not available in this version of Octave");
+  endif
 
 endfunction
 
+%!demo
+%!  disp('- test questdlg with two buttons');
+%!  a = questdlg('Would you like some free money?',...
+%!               '$ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $',...
+%!               'No', 'Cancel', 'Cancel');
+%!  if strcmp (a, 'No')
+%!    msgbox('Suit yourself.', 'Message Box');
+%!  endif
+
+%!demo
+%!  disp('- test questdlg with message and title only.');
+%!  a = 'No';
+%!  c = 0;
+%!  while (strcmp(a, 'No') || !c)
+%!    a = questdlg('Close this Question Dialog?', 'Reductio Ad Absurdum');
+%!    if strcmp(a, 'Yes')
+%!      q = 'Are you sure?';
+%!      while (strcmp(a, 'Yes') && !c)
+%!        a = questdlg(q, 'Reductio Ad Absurdum');
+%!        word = ' really';
+%!        i = strfind(q, word);
+%!        if isempty( i )
+%!          i = strfind(q, ' sure');
+%!          q = [q '!'];
+%!        else
+%!          word = [word ','];
+%!        endif
+%!        q = [q(1:i-1) word q(i:end)];
+%!      endwhile
+%!    endif
+%!    if strcmp(a, 'Cancel')
+%!      warndlg('Answer "Yes" or "No".', 'Warning Dialog');
+%!      a = 'No';
+%!      c = 1;
+%!    endif
+%!  endwhile
+%!  msgbox('Whew!');
+
+%!demo
+%!  disp('- test questdlg with five inputs');
+%!  ans = questdlg('Are you ready Steve?', 'Brian', 'No', 'Uh huh', 'Uh huh');
+%!  if !strcmp (ans, 'No')
+%!    ans = questdlg ('Andy?', 'Brian', 'No', 'Yeah', 'Yeah');
+%!    if !strcmp (ans, 'No')
+%!      ans = questdlg ('Mick?', 'Brian', 'No', 'Okay', 'Okay');
+%!      if !strcmp (ans, 'No')
+%!        ans = msgbox ("Well all right, fellas.    \n\n     Let''s GO!!!!!",...
+%!                      'Ballroom Blitz', 'none');
+%!      endif
+%!    endif
+%!  endif
+
diff --git a/scripts/ui/warndlg.m b/scripts/ui/warndlg.m
--- a/scripts/ui/warndlg.m
+++ b/scripts/ui/warndlg.m
@@ -30,17 +30,17 @@
 ## @end deftypefn
 
 function retval = warndlg (msg, title = "Warning Dialog")
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
   endif
 
-  retval = message_dialog ("warndlg", msg, title);
+  retval = message_dialog ("warndlg", msg, title, "warn");
 
 endfunction
 
 %!demo
 %!  disp('- test warndlg with prompt only.');
 %!  warndlg('Oh, a warning occured');
 
 %!demo
