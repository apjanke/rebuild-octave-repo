# HG changeset patch
# User Daniel J Sebald <daniel.sebald@ieee.org>
# Date 1474573150 18000
#      Thu Sep 22 14:39:10 2016 -0500
# Node ID bcd2630c14f3fc76028e72f408ffcbbaca551db1
# Parent  db762b9b9b7238323a1051d0f38431e2e7079786
Remove persistent line style from gnuplot toolkit (bug #47974).

* __gnuplot_has_feature__.m: Remove "linetype" and associated feature version.

* __gnuplot_draw_axes__.m: Remove all conditional tests on gnuplot feature
  "linetype" and use appropriate "linestyle" or "style line" syntax.  Condition
  the surface line drawing on plotting either lines (draw_surf_line) or markers
  (draw_surf_marker).  Check for flat_marker, similar to flat_interp_edge.
  Broaden scope of style loop to include data generation and style option
  configurations.  Define has_ccol for each style loop pass and if color column
  required expand data width from 3 to 4.  Always use style option "ls #".  Use
  'has_ccol' in place of 'flat_interp_edge'.
  (do_linestyle_command): If flat_interp_edge, use 'palatte' in line style
  definition.  Remove non-numeric markerfacecolor and markeredgecolor tests
  from conditional linecolor tests.  If these two are not numeric values then
  print 'palette' for line style.

diff --git a/scripts/plot/util/private/__gnuplot_draw_axes__.m b/scripts/plot/util/private/__gnuplot_draw_axes__.m
--- a/scripts/plot/util/private/__gnuplot_draw_axes__.m
+++ b/scripts/plot/util/private/__gnuplot_draw_axes__.m
@@ -670,52 +670,47 @@ function __gnuplot_draw_axes__ (h, plot_
           data{data_idx} = [xdat, ydat]';
           usingclause{data_idx} = ...
             sprintf ("record=%d using ($1):($2) axes %s%s",
                      rows (xdat), xaxisloc_using, yaxisloc_using);
         endif
 
         [style, sidx] = do_linestyle_command (obj, obj.color, data_idx,
                                               plot_stream, errbars);
-        if (__gnuplot_has_feature__ ("linetype"))
-          scmd = "linetype";
-        else
-          scmd = "linestyle";
-        endif
 
         if isempty (style{1})
           style{1} = "points";
           data{data_idx} = {};
         endif
-        withclause{data_idx} = sprintf ("with %s %s %d",
-                                        style{1}, scmd, sidx(1));
+        withclause{data_idx} = sprintf ("with %s linestyle %d",
+                                        style{1}, sidx(1));
 
         if (length (style) > 1)
           data_idx += 1;
           is_image_data(data_idx) = is_image_data(data_idx - 1);
           parametric(data_idx) = parametric(data_idx - 1);
           have_cdata(data_idx) = have_cdata(data_idx - 1);
           have_3d_patch(data_idx) = have_3d_patch(data_idx - 1);
           titlespec{data_idx} = "title \"\"";
           usingclause{data_idx} = usingclause{data_idx - 1};
           data{data_idx} = data{data_idx - 1};
-          withclause{data_idx} = sprintf ("with %s %s %d",
-                                          style{2}, scmd, sidx(2));
+          withclause{data_idx} = sprintf ("with %s linestyle %d",
+                                          style{2}, sidx(2));
         endif
         if (length (style) > 2)
           data_idx += 1;
           is_image_data(data_idx) = is_image_data(data_idx - 1);
           parametric(data_idx) = parametric(data_idx - 1);
           have_cdata(data_idx) = have_cdata(data_idx - 1);
           have_3d_patch(data_idx) = have_3d_patch(data_idx - 1);
           titlespec{data_idx} = "title \"\"";
           usingclause{data_idx} = usingclause{data_idx - 1};
           data{data_idx} = data{data_idx - 1};
-          withclause{data_idx} = sprintf ("with %s %s %d",
-                                          style{3}, scmd, sidx(3));
+          withclause{data_idx} = sprintf ("with %s linestyle %d",
+                                          style{3}, sidx(3));
         endif
 
       case "patch"
         [nr, nc] = size (obj.xdata);
 
         if (! isempty (obj.cdata))
           cdat = obj.cdata;
         else
@@ -1301,33 +1296,25 @@ function __gnuplot_draw_axes__ (h, plot_
                      "set style fill transparent solid %f;\n",
                      obj.facealpha);
           endif
           fprintf (plot_stream,
                    "set pm3d explicit at s %s %s corners2color c3;\n",
                    interp_str, dord);
         endif
 
-        if (! strcmp (obj.linestyle, "none") && ! strcmp (obj.edgecolor, "none"))
+        draw_surf_line = ! strcmp (obj.linestyle, "none") && ! strcmp (obj.edgecolor, "none");
+        draw_surf_marker = (! strcmp (obj.marker, "none")
+                             && ! (strcmp (obj.markeredgecolor, "none")
+                                   && strcmp (obj.markerfacecolor, "none")));
+        if (draw_surf_line || draw_surf_marker)
           flat_interp_edge = (strcmp (obj.edgecolor, "flat")
                               || strcmp (obj.edgecolor, "interp"));
-          if (flat_interp_edge)
-            scmd = "palette";
-            ccol = ":($4)";
-            N_tup = 4;
-          else
-            if (__gnuplot_has_feature__ ("linetype"))
-              scmd = "linetype";
-            else
-              scmd = "linestyle";
-            endif
-            ccol = "";
-            N_tup = 3;
-          endif
-
+          flat_marker = (strcmp (obj.markeredgecolor, "flat") || strcmp (obj.markerfacecolor, "flat")
+                         || strcmp (obj.markeredgecolor, "auto") || strcmp (obj.markerfacecolor, "auto"));
           [style, sidx] = do_linestyle_command (obj, obj.edgecolor,
                                                 data_idx,
                                                 plot_stream);
           domeshcolumn = (strcmp (obj.meshstyle, "column")
                           || strcmp (obj.meshstyle, "both"));
           domeshrow = (strcmp (obj.meshstyle, "row")
                        || strcmp (obj.meshstyle, "both"));
           num_pass = 0;
@@ -1336,66 +1323,72 @@ function __gnuplot_draw_axes__ (h, plot_
             num_pass += xlen;
             num_cols = xlen;
           endif
           if (domeshrow)
             num_pass += ylen;
           endif
 
           for np = 1:num_pass
-            if (np <= num_cols)
-              k = np;
-              yrec = ylen;
-              zz = zeros (ylen, N_tup);
-              zz(:,1) = xdat(:,k);
-              zz(:,2) = ydat(:,k);
-              zz(:,3) = zdat(:,k);
-              if (flat_interp_edge)
-                zz(:,4) = cdat(:,k);
+            for i_stl = 1:length (style)
+              has_ccol = ((strncmp (style{i_stl}, "lines", 5) && flat_interp_edge) ||
+                          (strncmp (style{i_stl}, "points", 6) && flat_marker));
+              if (has_ccol)
+                ccol = ":($4)";
+                N_tup = 4;
+              else
+                ccol = "";
+                N_tup = 3;
               endif
-            else
-              j = np - num_cols;
-              yrec = xlen;
-              zz = zeros (xlen, N_tup);
-              zz(:,1) = xdat(j,:)';
-              zz(:,2) = ydat(j,:)';
-              zz(:,3) = zdat(j,:)';
-              if (flat_interp_edge)
-                zz(:,4) = cdat(j,:)';
+              sopt = sprintf ("ls %d", sidx (i_stl));
+
+              if (np <= num_cols)
+                k = np;
+                yrec = ylen;
+                zz = zeros (ylen, N_tup);
+                zz(:,1) = xdat(:,k);
+                zz(:,2) = ydat(:,k);
+                zz(:,3) = zdat(:,k);
+                if (has_ccol)
+                  zz(:,4) = cdat(:,k);
+                endif
+              else
+                j = np - num_cols;
+                yrec = xlen;
+                zz = zeros (xlen, N_tup);
+                zz(:,1) = xdat(j,:)';
+                zz(:,2) = ydat(j,:)';
+                zz(:,3) = zdat(j,:)';
+                if (has_ccol)
+                  zz(:,4) = cdat(j,:)';
+                endif
               endif
-            endif
-
-            zz = zz.';
 
-            for i_stl = 1:length (style)
-              if (flat_interp_edge)
-                sopt = "";
-              else
-                sopt = sprintf ("%d", sidx(i_stl));
-              endif
+              zz = zz.';
+
               data_idx += 1;
               is_image_data(data_idx) = false;
               parametric(data_idx) = false;
-              if (flat_interp_edge)
+              if (has_ccol)
                 have_cdata(data_idx) = true;
               else
                 have_cdata(data_idx) = false;
               endif
               have_3d_patch(data_idx) = false;
               titlespec{data_idx} = tspec;
               usingclause{data_idx} = sprintf ("record=%dx1 using ($1):($2):($3)%s",
                                                yrec, ccol);
               if isempty (style{i_stl})
                 style{i_stl} = "points";
                 data{data_idx} = {};
               else
                 data{data_idx} = zz;
               endif
-              withclause{data_idx} = sprintf ("with %s %s %s",
-                                              style{i_stl}, scmd, sopt);
+              withclause{data_idx} = sprintf ("with %s %s",
+                                              style{i_stl}, sopt);
             endfor
           endfor
         endif
 
       case "text"
         do_text (plot_stream, gnuplot_term, enhanced, obj, h);
 
       case "hggroup"
@@ -1554,23 +1547,18 @@ function __gnuplot_draw_axes__ (h, plot_
       grid_obj.linewidth = axis_obj.linewidth;
       grid_obj.alpha = axis_obj.minorgridalpha;
       [style, sidx_minor] = do_linestyle_command (grid_obj,
                                                   axis_obj.minorgridcolor,
                                                   grid_idx, plot_stream);
     else
       sidx_minor = 0;
     endif
-    if (__gnuplot_has_feature__ ("linetype"))
-      scmd = "linetype";
-    else
-      scmd = "linestyle";
-    endif
-    fprintf (plot_stream, "set grid %s %d, %s %d;\n",
-             scmd, sidx_major, scmd, sidx_minor);
+    fprintf (plot_stream, "set grid linestyle %d, linestyle %d;\n",
+             sidx_major, sidx_minor);
   endif
 
   if (! isempty (hlgnd) && ! isempty (hlgnd.children)
       && any (strcmp (get (hlgnd.children, "visible"), "on")))
     if (strcmp (hlgnd.box, "on"))
       box = "box";
     else
       box = "nobox";
@@ -1911,37 +1899,37 @@ function idx = do_border_tick_3d (obj, p
 endfunction
 
 function [style, ltidx] = do_linestyle_command (obj, linecolor, idx,
                                                 plot_stream, errbars = "")
   idx = idx + 8;
   style = {};
   ltidx = [];
 
-  if (__gnuplot_has_feature__ ("linetype"))
-    scommand = "linetype";
-  else
-    scommand = "style line";
-  endif
-  fprintf (plot_stream, "set %s %d default;\n", scommand, idx);
-  fprintf (plot_stream, "set %s %d", scommand, idx);
+  fprintf (plot_stream, "set style line %d default;\n", idx);
+  fprintf (plot_stream, "set style line %d", idx);
 
   found_style = false;
   if (isnumeric (linecolor))
     color = linecolor;
     if (isfield (obj, "alpha")
         &&  __gnuplot_has_feature__ ("alphablend_linecolor"))
       alphastr = sprintf ("%02x", round (255*(1-obj.alpha)));
     else
       alphastr = "";
     endif
     fprintf (plot_stream, " linecolor rgb \"#%s%02x%02x%02x\"",
              alphastr, round (255*color));
   else
     color = [0, 0, 0];
+    flat_interp_edge = (strcmp (obj.edgecolor, "flat")
+                        || strcmp (obj.edgecolor, "interp"));
+    if (flat_interp_edge)
+        fprintf (plot_stream, " palette");
+    endif
   endif
 
   lt = gnuplot_linestyletype (obj);
   if (! isempty (lt))
     fprintf (plot_stream, " %s", lt);
   endif
   if (! isempty (errbars))
     found_style = true;
@@ -1966,17 +1954,16 @@ function [style, ltidx] = do_linestyle_c
       style{sidx} = "lines";
     endif
     ltidx(sidx) = idx;
 
     facesame = true;
     if (! isequal (pt, pt2) && isfield (obj, "markerfacecolor")
         && ! strcmp (obj.markerfacecolor, "none"))
       if (strcmp (obj.markerfacecolor, "auto")
-          || ! isnumeric (obj.markerfacecolor)
           || (isnumeric (obj.markerfacecolor)
               && isequal (color, obj.markerfacecolor)))
         if (! isempty (pt2))
           fprintf (plot_stream, " pointtype %s", pt2);
           style{sidx} = [style{sidx} "points"];
         endif
         if (isfield (obj, "markersize"))
           fprintf (plot_stream, " pointsize %f", obj.markersize / 3);
@@ -1988,37 +1975,38 @@ function [style, ltidx] = do_linestyle_c
         endif
         fputs (plot_stream, ";\n");
         if (! isempty (style{sidx}))
           sidx += 1;
           idx += 1;
         else
           fputs (plot_stream, ";\n");
         endif
-        fprintf (plot_stream, "set %s %d default;\n", scommand, idx);
-        fprintf (plot_stream, "set %s %d", scommand, idx);
+        fprintf (plot_stream, "set style line %d default;\n", idx);
+        fprintf (plot_stream, "set style line %d", idx);
         if (isnumeric (obj.markerfacecolor))
           fprintf (plot_stream, " linecolor rgb \"#%02x%02x%02x\"",
                    round (255*obj.markerfacecolor));
+        else
+          fprintf (plot_stream, " palette");
         endif
         if (! isempty (pt2))
           style{sidx} = "points";
           ltidx(sidx) = idx;
           fprintf (plot_stream, " pointtype %s", pt2);
         endif
         if (isfield (obj, "markersize"))
           fprintf (plot_stream, " pointsize %f", obj.markersize / 3);
         endif
       endif
     endif
     if (! isempty(pt) && isfield (obj, "markeredgecolor")
         && ! strcmp (obj.markeredgecolor, "none"))
       if (facesame && ! isempty (pt)
           && (strcmp (obj.markeredgecolor, "auto")
-              || ! isnumeric (obj.markeredgecolor)
               || (isnumeric (obj.markeredgecolor)
                   && isequal (color, obj.markeredgecolor))))
         if (sidx == 1 && ((length (style{sidx}) == 5
             && strncmp (style{sidx}, "lines", 5)) || isempty (style{sidx})))
           if (! isempty (pt))
             style{sidx} = [style{sidx} "points"];
             fprintf (plot_stream, " pointtype %s", pt);
           endif
@@ -2032,24 +2020,23 @@ function [style, ltidx] = do_linestyle_c
         endif
         fputs (plot_stream, ";\n");
         if (! isempty (style{sidx}))
           sidx += 1;
           idx += 1;
         else
           fputs (plot_stream, ";\n");
         endif
-        fprintf (plot_stream, "set %s %d default;\n", scommand, idx);
-        fprintf (plot_stream, "set %s %d", scommand, idx);
-        if (strcmp (obj.markeredgecolor, "auto"))
-          fprintf (plot_stream, " linecolor rgb \"#%02x%02x%02x\"",
-                   round (255*color));
-        elseif (isnumeric (obj.markeredgecolor))
+        fprintf (plot_stream, "set style line %d default;\n", idx);
+        fprintf (plot_stream, "set style line %d", idx);
+        if (isnumeric (obj.markeredgecolor))
           fprintf (plot_stream, " linecolor rgb \"#%02x%02x%02x\"",
                    round (255*obj.markeredgecolor));
+        else
+          fprintf (plot_stream, " palette");
         endif
         if (! isempty (pt))
           style{sidx} = "points";
           ltidx(sidx) = idx;
           fprintf (plot_stream, " pointtype %s", pt);
         endif
         if (isfield (obj, "markersize"))
           fprintf (plot_stream, " pointsize %f", obj.markersize / 3);
diff --git a/scripts/plot/util/private/__gnuplot_has_feature__.m b/scripts/plot/util/private/__gnuplot_has_feature__.m
--- a/scripts/plot/util/private/__gnuplot_has_feature__.m
+++ b/scripts/plot/util/private/__gnuplot_has_feature__.m
@@ -22,35 +22,34 @@
 ## @end deftypefn
 
 ## Author: Ben Abbott <bpabbott@mac.com>
 ## Created: 2009-01-27
 
 function res = __gnuplot_has_feature__ (feature)
   persistent features = {"minimum_version",
                          "needs_color_with_postscript",
-                         "linetype",
                          "dashtype",
                          "alphablend_linecolor",
                          "qt_terminal",
                          "wxt_figure_position",
                          "qt_figure_position",
                          "fontspec_5"};
 
   persistent has_features;
 
   if (isempty (has_features))
     try
       gnuplot_version = __gnuplot_version__ ();
     catch
       ## Don't throw an error if gnuplot isn't installed
       gnuplot_version = "0.0.0";
     end_try_catch
-    versions  = {"4.4", "4.6", "4.6", "5.0", "4.6", "4.6", "5.0", "5.0", "5.0"};
-    operators = {">=" , ">=" , ">=" , ">=" , ">=" , ">=" , ">=" , ">=" , ">=" };
+    versions  = {"4.4", "4.6", "5.0", "4.6", "4.6", "5.0", "5.0", "5.0"};
+    operators = {">=" , ">=" , ">=" , ">=" , ">=" , ">=" , ">=" , ">=" };
     have_features = false (size (features));
     for n = 1 : numel (have_features)
       has_features(n) = compare_versions (gnuplot_version, versions{n}, operators{n});
     endfor
   endif
 
   n = find (strcmpi (feature, features));
   if (isempty (n))
