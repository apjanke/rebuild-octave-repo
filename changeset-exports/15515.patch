# HG changeset patch
# User CarnÃ« Draug <carandraug+dev@gmail.com>
# Date 1350076268 -7200
#      Fri Oct 12 23:11:08 2012 +0200
# Node ID 4beb3a4bd4400171f56267feab1159a00105d3a7
# Parent  8d64e87c00cf8cef0ab6592c235b63543ce8c4fa
rgbplot.m, cmpermute.m, cmunique.m, ind2rgb.m, imwrite.m: use core iscolormap function

diff --git a/scripts/image/cmpermute.m b/scripts/image/cmpermute.m
--- a/scripts/image/cmpermute.m
+++ b/scripts/image/cmpermute.m
@@ -49,19 +49,17 @@ function [Y, newmap] = cmpermute (X, map
     error ("cmpermute: X must be of class uint8 or double");
   endif
 
   if (! isreal (X) || issparse (X)
       || (isfloat (X) && (any (X(:) < 1 || any (X(:) != fix (X(:)))))))
     error ("cmpermute: X must be an indexed image");
   endif
 
-  if (! isnumeric (map) || iscomplex (map)
-      || ndims (map) != 2 || columns (map) != 3
-      || any (map(:) < 0) || any (map(:) > 1))
+  if (! iscolormap (map))
     error ("cmpermute: MAP must be a valid colormap");
   endif
 
   if (nargin < 3)
     index = randperm (rows (map));
   elseif (! isvector (index) || length (index) != rows (map))
     error ("cmpermute: invalid parameter INDEX");
   endif
diff --git a/scripts/image/cmunique.m b/scripts/image/cmunique.m
--- a/scripts/image/cmunique.m
+++ b/scripts/image/cmunique.m
@@ -63,19 +63,17 @@ function [Y, newmap] = cmunique (X, map)
   cls = class (X);
   ## FIXME: Documentation accepts only 3 classes.  Could easily add 'single'.
   if (! any (isa (X, {"uint8", "uint16", "double"})))
     error ("cmunique: X is of invalid data type '%s'", cls);
   endif
 
   if (nargin == 2)
     ## (X, map) case
-    if (! isnumeric (map) || iscomplex (map)
-        || ndims (map) != 2 || columns (map) != 3
-        || any (map(:) < 0) || any (map(:) > 1))
+    if (! iscolormap (map))
       error ("cmunique: MAP must be a valid colormap");
     endif
     [newmap,i,j] = unique (map, "rows");  # calculate unique colormap
     if (isa (X, "double"))
       Y = j(X);               # find new indices
     else
       Y = j(double (X) + 1);  # find new indices
     endif
diff --git a/scripts/image/imwrite.m b/scripts/image/imwrite.m
--- a/scripts/image/imwrite.m
+++ b/scripts/image/imwrite.m
@@ -156,23 +156,18 @@ function imwrite (img, varargin)
         img = uint8 (img - 1);
       endif
       if (nd != 2 && nd != 4)
         error ("imwrite: invalid size for indexed image");
       endif
     else
       error ("imwrite: %s: invalid class for indexed image data", img_class);
     endif
-    if (isa (map, "double"))
-      if (ndims (map) != 2 || columns (map) != 3)
-        error ("imwrite: invalid size for colormap");
-      endif
-    else
-      error ("imwrite: %s invalid class for indexed image colormap",
-             class (map));
+    if (! iscolormap (map))
+      error ("imwrite: invalid indexed image colormap");
     endif
 
     ## FIXME -- we should really be writing indexed images here but
     ## __magick_write__ needs to be fixed to handle them.
 
     [r, g, b] = ind2rgb (img, map);
     tmp = uint8 (cat (3, r, g, b) * 255);
 
diff --git a/scripts/image/ind2rgb.m b/scripts/image/ind2rgb.m
--- a/scripts/image/ind2rgb.m
+++ b/scripts/image/ind2rgb.m
@@ -41,17 +41,17 @@ function [R, G, B] = ind2rgb (x, map)
   endif
 
   ## Check if X is an indexed image.
   if (ndims (x) != 2 || any (x(:) != fix (x(:))) || min (x(:)) < 1)
     error ("ind2rgb: X must be an indexed image");
   endif
 
   ## Check the color map.
-  if (ndims (map) != 2 || columns (map) != 3)
+  if (! iscolormap (map))
     error ("ind2rgb: MAP must be a valid colormap");
   endif
 
   ## Do we have enough colors in the color map?
   maxidx = max (x(:));
   rm = rows (map);
   if (rm < maxidx)
     ## Pad with the last color in the map.
diff --git a/scripts/image/rgbplot.m b/scripts/image/rgbplot.m
--- a/scripts/image/rgbplot.m
+++ b/scripts/image/rgbplot.m
@@ -27,34 +27,27 @@
 ## @end deftypefn
 
 function rgbplot (cmap)
 
   if (nargin != 1)
     print_usage ();
   endif
 
-  if (! ismatrix (cmap) || ndims (cmap) != 2 || columns (cmap) != 3)
-    error ("rgbplot: CMAP must be a matrix of size Nx3");
-  elseif (any (cmap(:) < 0) || any (cmap(:) > 1))
-    error ("rgbplot: CMAP intensities must be in the range [0, 1]");
+  if (! iscolormap (cmap))
+    error ("rgbplot: CMAP must be a colormap");
   endif
 
   plot (cmap(:,1),"r", cmap(:,2),"g", cmap(:,3),"b");
   set (gca, 'ytick', 0:0.1:1);
   xlabel ("color index");
 
 endfunction
 
 
 %!demo
 %! clf;
 %! rgbplot (ocean);
 
 %%test input validation
 %!error rgbplot ()
 %!error rgbplot (1,2)
-%!error <CMAP must be a matrix of size Nx3> rgbplot ({0 1 0})
-%!error <CMAP must be a matrix of size Nx3> rgbplot (ones (3,3,3))
-%!error <CMAP must be a matrix of size Nx3> rgbplot (ones (3,4))
-%!error <CMAP intensities must be in the range> rgbplot ([0 0 -2])
-%!error <CMAP intensities must be in the range> rgbplot ([0 0 2])
-
+%!error <CMAP must be a colormap> rgbplot ({0 1 0})
