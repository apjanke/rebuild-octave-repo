# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1499258265 14400
#      Wed Jul 05 08:37:45 2017 -0400
# Node ID 06b3d1d54054e2d4cb5d6b432ef5e0688668ce2f
# Parent  b40b7243a78245833de2dcc71cb17c7dbef96163
allow echo state to be modified from inside functions

* ov-usr-fcn.h, ov-usr-fcn.cc
(octave_user_code::curr_unwind_protect_frame,
octave_user_code::unwind_protect_frame): Move variable and accessor
function here from octave_user_function.

(octave_user_script::call): Also unwind-protect and set current
unwind_protect frame variable here.

* pt-eval.h, pt-eval.cc (tree_evaluator::set_echo_state,
tree_evaluator::maybe_set_echo_state,
tree_evaluator::push_echo_state_cleanup,
maybe_push_echo_state_cleanup): New functions.
(tree_evaluator::push_echo_state): Call push_ech_state_cleanup and
set_echo_state.
(tree_evaluator::echo): Call maybe_push_echo_state_cleanup and
set_echo_state.

diff --git a/libinterp/octave-value/ov-usr-fcn.cc b/libinterp/octave-value/ov-usr-fcn.cc
--- a/libinterp/octave-value/ov-usr-fcn.cc
+++ b/libinterp/octave-value/ov-usr-fcn.cc
@@ -152,16 +152,22 @@ octave_user_script::call (octave::tree_e
       if (call_depth >= tw.max_recursion_depth ())
         error ("max_recursion_depth exceeded");
 
       octave::call_stack& cs
         = octave::__get_call_stack__ ("octave_user_script::call");
 
       cs.push (this);
 
+      // Set pointer to the current unwind_protect frame to allow
+      // certain builtins register simple cleanup in a very optimized manner.
+      // This is *not* intended as a general-purpose on-cleanup mechanism,
+      frame.protect_var (curr_unwind_protect_frame);
+      curr_unwind_protect_frame = &frame;
+
       frame.add_method (cs, &octave::call_stack::pop);
 
       // Update line number even if debugging.
       frame.protect_var (Vtrack_line_num);
       Vtrack_line_num = true;
 
       frame.protect_var (octave::tree_evaluator::statement_context);
       octave::tree_evaluator::statement_context = octave::tree_evaluator::script;
@@ -209,17 +215,17 @@ octave_user_function::octave_user_functi
     location_line (0), location_column (0),
     parent_name (), t_parsed (static_cast<time_t> (0)),
     t_checked (static_cast<time_t> (0)),
     system_fcn_file (false), call_depth (-1),
     num_named_args (param_list ? param_list->length () : 0),
     subfunction (false), inline_function (false),
     anonymous_function (false), nested_function (false),
     class_constructor (none), class_method (false),
-    parent_scope (0), curr_unwind_protect_frame (0)
+    parent_scope (0)
 #if defined (HAVE_LLVM)
     , jit_info (0)
 #endif
 {
   if (cmd_list)
     cmd_list->mark_as_function_body ();
 
   if (m_scope)
diff --git a/libinterp/octave-value/ov-usr-fcn.h b/libinterp/octave-value/ov-usr-fcn.h
--- a/libinterp/octave-value/ov-usr-fcn.h
+++ b/libinterp/octave-value/ov-usr-fcn.h
@@ -86,17 +86,16 @@ public:
   {
     return curr_unwind_protect_frame;
   }
 
   std::string get_code_line (size_t line);
 
   std::deque<std::string> get_code_lines (size_t line, size_t num_lines);
 
-
   virtual std::map<std::string, octave_value> subfunctions (void) const;
 
   virtual octave::tree_statement_list * body (void) = 0;
 
 protected:
 
   // pointer to the current unwind_protect frame of this function.
   octave::unwind_protect *curr_unwind_protect_frame;
@@ -383,22 +382,16 @@ public:
   // If is_special_expr is true, retrieve the sigular expression that forms the
   // body.  May be null (even if is_special_expr is true).
   octave::tree_expression * special_expr (void);
 
   bool subsasgn_optimization_ok (void);
 
   void accept (octave::tree_walker& tw);
 
-  octave::unwind_protect *
-  unwind_protect_frame (void)
-  {
-    return curr_unwind_protect_frame;
-  }
-
 #if defined (HAVE_LLVM)
   jit_function_info * get_info (void) { return jit_info; }
 
   void stash_info (jit_function_info *info) { jit_info = info; }
 #endif
 
   octave_value dump (void) const;
 
@@ -482,19 +475,16 @@ private:
   class_ctor_type class_constructor;
 
   // TRUE means this function is a method for a class.
   bool class_method;
 
   // The scope of the parent function, if any.
   octave::symbol_table::scope *parent_scope;
 
-  // pointer to the current unwind_protect frame of this function.
-  octave::unwind_protect *curr_unwind_protect_frame;
-
 #if defined (HAVE_LLVM)
   jit_function_info *jit_info;
 #endif
 
   void maybe_relocate_end_internal (void);
 
   void print_code_function_header (const std::string& prefix);
 
diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -2838,44 +2838,105 @@ namespace octave
 
   octave_value
   tree_evaluator::silent_functions (const octave_value_list& args, int nargout)
   {
     return set_internal_variable (m_silent_functions, args, nargout,
                                   "silent_functions");
   }
 
+  octave_value
+  tree_evaluator::string_fill_char (const octave_value_list& args, int nargout)
+  {
+    return set_internal_variable (m_string_fill_char, args, nargout,
+                                  "string_fill_char");
+  }
+
   void
   tree_evaluator::push_echo_state (unwind_protect& frame, int type,
-                                   const std::string& file_name)
+                                   const std::string& file_name,
+                                   size_t pos)
+  {
+    push_echo_state_cleanup (frame);
+
+    set_echo_state (type, file_name, pos);
+  }
+
+  void
+  tree_evaluator::set_echo_state (int type, const std::string& file_name,
+                                  size_t pos)
+  {
+    m_echo_state = echo_this_file (file_name, type);
+    m_echo_file_name = file_name;
+    m_echo_file_pos = pos;
+  }
+
+  void
+  tree_evaluator::maybe_set_echo_state (void)
+  {
+    octave_function *caller = m_call_stack.caller ();
+
+    if (caller && caller->is_user_code ())
+      {
+        octave_user_code *fcn = dynamic_cast<octave_user_code *> (caller);
+
+        int type = fcn->is_user_function () ? ECHO_FUNCTIONS : ECHO_SCRIPTS;
+
+        std::string file_name = fcn->fcn_file_name ();
+
+        size_t pos = m_call_stack.current_line ();
+
+        set_echo_state (type, file_name, pos);
+      }
+  }
+
+  void
+  tree_evaluator::push_echo_state_cleanup (unwind_protect& frame)
   {
     frame.add_method (*this, &tree_evaluator::set_echo_state,
                       m_echo_state);
 
     frame.add_method (*this, &tree_evaluator::set_echo_file_name,
                       m_echo_file_name);
 
     frame.add_method (*this, &tree_evaluator::set_echo_file_pos,
                       m_echo_file_pos);
-
-    m_echo_state = echo_this_file (file_name, type);
-    m_echo_file_name = file_name;
-    m_echo_file_pos = 1;
   }
 
-  octave_value
-  tree_evaluator::string_fill_char (const octave_value_list& args, int nargout)
+  bool tree_evaluator::maybe_push_echo_state_cleanup (void)
   {
-    return set_internal_variable (m_string_fill_char, args, nargout,
-                                  "string_fill_char");
+    // This function is expected to be called from ECHO, which would be
+    // the top of the call stack.  If the caller of ECHO is a
+    // user-defined fucntion or script, then set up unwind-protect
+    // elements to restore echo state.
+
+    octave_function *caller = m_call_stack.caller ();
+
+    if (caller && caller->is_user_code ())
+      {
+        octave_user_code *fcn = dynamic_cast<octave_user_code *> (caller);
+
+        unwind_protect *frame = fcn->unwind_protect_frame ();
+
+        if (frame)
+          {
+            push_echo_state_cleanup (*frame);
+            return true;
+          }
+      }
+
+    return false;
   }
 
+
   octave_value
   tree_evaluator::echo (const octave_value_list& args, int)
   {
+    bool cleanup_pushed = maybe_push_echo_state_cleanup ();
+
     string_vector argv = args.make_argv ();
 
     switch (args.length ())
       {
       case 0:
         if ((m_echo & ECHO_SCRIPTS) || (m_echo & ECHO_FUNCTIONS))
           {
             m_echo = ECHO_OFF;
@@ -2983,16 +3044,19 @@ namespace octave
         }
         break;
 
       default:
         print_usage ();
         break;
       }
 
+    if (cleanup_pushed)
+      maybe_set_echo_state ();
+
     return ovl ();
   }
 
   octave_value
   tree_evaluator::PS4 (const octave_value_list& args, int nargout)
   {
     return set_internal_variable (m_PS4, args, nargout, "PS4");
   }
diff --git a/libinterp/parse-tree/pt-eval.h b/libinterp/parse-tree/pt-eval.h
--- a/libinterp/parse-tree/pt-eval.h
+++ b/libinterp/parse-tree/pt-eval.h
@@ -360,24 +360,32 @@ namespace octave
 
     int echo (int val)
     {
       int old_val = m_echo;
       m_echo = val;
       return old_val;
     }
 
-    void push_echo_state (unwind_protect& frame, int type,
-                          const std::string& file_name);
-
     octave_value
     string_fill_char (const octave_value_list& args, int nargout);
 
+    void push_echo_state (unwind_protect& frame, int type,
+                          const std::string& file_name, size_t pos = 1);
+
   private:
 
+    void set_echo_state (int type, const std::string& file_name, size_t pos);
+
+    void maybe_set_echo_state (void);
+
+    void push_echo_state_cleanup (unwind_protect& frame);
+
+    bool maybe_push_echo_state_cleanup (void);
+
     void do_breakpoint (tree_statement& stmt) const;
 
     void do_breakpoint (bool is_breakpoint,
                         bool is_end_of_fcn_or_script = false) const;
 
     virtual octave_value
     do_keyboard (const octave_value_list& args = octave_value_list ()) const;
 
