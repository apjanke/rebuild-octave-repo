# HG changeset patch
# User jwe
# Date 1196104567 0
#      Mon Nov 26 19:16:07 2007 +0000
# Node ID 800f1fd3ffb823acc76baeb0ea6537c8003655e9
# Parent  83cbff53bc9628a08a04965a235528187d001df9
[project @ 2007-11-26 19:16:07 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2007-11-26  Alexander Barth  <barth.alexander@gmail.com>
+
+	* general/accumarray.m: Correct dimension check.
+
 2007-11-26  John W. Eaton  <jwe@octave.org>
 
 	* polynomial/residue.m: Prepad along second dimension.
 	From Doug Stewart <dastew@sympatico.ca>.
 
 2007-11-26  Kai Habel  <kai.habel@gmx.de>
 
 	* plot/cylinder.m, plot/slice.m: New functions.
diff --git a/scripts/general/accumarray.m b/scripts/general/accumarray.m
--- a/scripts/general/accumarray.m
+++ b/scripts/general/accumarray.m
@@ -15,18 +15,18 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} accumarray (@var{subs}, @var{vals}, @var{sz}, @var{fun}, @var{fillval}, @var{issparse})
 ## @deftypefnx {Function File} {} accumarray (@var{csubs}, @var{vals}, @dots{})
 ##
-## Creates an array by accumulating the elements of a vector into the
-## positions of defined by their subscripts. The subscripts are defined by
+## Create an array by accumulating the elements of a vector into the
+## positions defined by their subscripts. The subscripts are defined by
 ## the rows of the matrix @var{subs} and the values by @var{vals}. Each row
 ## of @var{subs} corresponds to one of the values in @var{vals}.
 ##
 ## The size of the matrix will be determined by the subscripts themselves.
 ## However, if @var{sz} is defined it determines the matrix size. The length
 ## of @var{sz} must correspond to the number of columns in @var{subs}.
 ##
 ## The default action of @code{accumarray} is to sum the elements with the
@@ -41,87 +41,85 @@
 ##
 ## By default @code{accumarray} returns a full matrix. If @var{issparse} is
 ## logically true, then a sparse matrix is returned instead.
 ##
 ## An example of the use of @code{accumarray} is:
 ##
 ## @example
 ## @group
-## accumarray ([1,1,1;2,1,2;2,3,2;2,1,2;2,3,2],101:105)
+## accumarray ([1,1,1;2,1,2;2,3,2;2,1,2;2,3,2], 101:105)
 ## @result{} ans(:,:,1) = [101, 0, 0; 0, 0, 0]
 ##    ans(:,:,2) = [0, 0, 0; 206, 0, 208]
 ## @end group
 ## @end example
 ## @end deftypefn
 
 function A = accumarray (subs, val, sz, fun, fillval, isspar)  
 
   if (nargin < 2 || nargin > 6)
     print_usage ();
   endif
 
-  if (iscell(subs))
+  if (iscell (subs))
     subs = cell2mat (cellfun (@(x) x(:), subs, 'UniformOutput', false));
   endif
   ndims = size (subs, 2);
 
   if (nargin < 3 || isempty (sz))
     sz = max (subs);
     if (isscalar(sz))
       sz = [sz, 1];
     endif
-  else
-    if (length (sz) != ndims)
-      error ("accumarray: inconsistent dimensions");
-    endif
+  elseif (length (sz) != ndims
+	  && (ndims != 1 || length (sz) != 2 || sz(2) != 1))
+    error ("accumarray: inconsistent dimensions");
   endif
   
   if (nargin < 4 || isempty (fun))
     fun = @sum;
   endif
 
   if (nargin < 5 || isempty (fillval))
     fillval = 0;
   endif
 
   if (nargin < 6 || isempty (isspar))
     isspar = false;
   endif
-  if (isspar)
-    if (ndims > 2)
-      error ("Can not have more than 2 dimensions in a sparse matrix");
-    endif
+
+  if (isspar && ndims > 2)
+    error ("accumarray: sparse matrices limited to 2 dimensions");
   endif
 
   [subs, idx] = sortrows (subs);
   if (isscalar (val))
     val = val * ones (size (idx));
   else
     val = val(idx);
   endif
-  cidx = find([true; (sum (abs (diff (subs)), 2) != 0)]);
+  cidx = find ([true; (sum (abs (diff (subs)), 2) != 0)]);
   idx = cell (1, ndims);
   for i = 1:ndims
     idx{i} = subs (cidx, i);
   endfor
   x = cellfun (fun, mat2cell (val(:), diff ([cidx; length(val) + 1])));
   if (isspar && fillval == 0)
     A = sparse (idx{1}, idx{2}, x, sz(1), sz(2));
   else
     if (iscell (x))
       ## Why did matlab choose to reverse the order of the elements
-      x = cellfun (@(x) flipud(x(:)), x, 'UniformOutput', false);
+      x = cellfun (@(x) flipud (x(:)), x, 'UniformOutput', false);
       A = cell (sz);
     elseif (fillval == 0)
-      A = zeros (sz, class(x));
+      A = zeros (sz, class (x));
     else 
       A = fillval .* ones (sz);
     endif
-    A (sub2ind (sz, idx{:})) = x;
+    A(sub2ind (sz, idx{:})) = x;
   endif
 endfunction
 
 %!error (accumarray (1:5))
 %!error (accumarray ([1,2,3],1:2))
 %!assert (accumarray ([1;2;4;2;4],101:105), [101;206;0;208])
 %!assert (accumarray ([1,1,1;2,1,2;2,3,2;2,1,2;2,3,2],101:105),cat(3, [101,0,0;0,0,0],[0,0,0;206,0,208]))
 %!assert (accumarray ([1,1,1;2,1,2;2,3,2;2,1,2;2,3,2],101:105,[],@(x)sin(sum(x))),sin(cat(3, [101,0,0;0,0,0],[0,0,0;206,0,208])))
