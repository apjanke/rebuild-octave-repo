# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1382130825 -7200
#      Fri Oct 18 23:13:45 2013 +0200
# Node ID 8031fc73f2915a9d9d0ec8d2f93329b6596a5be7
# Parent  cf43cc342bfa4a24df4d492a75ed5a61a1e04579
Remove zeros from sparse matrices after use of real/imag (bug # 40305)

* dSparse.CC (SparseMatrix real (const SparseComplexMatrix&),
  SparseMatrix imag (const SparseComplexMatrix&)) : Use maybe_compress to
  remove zeros from the return matrix.

diff --git a/liboctave/array/dSparse.cc b/liboctave/array/dSparse.cc
--- a/liboctave/array/dSparse.cc
+++ b/liboctave/array/dSparse.cc
@@ -648,16 +648,17 @@ real (const SparseComplexMatrix& a)
     r.cidx (i) = a.cidx (i);
 
   for (octave_idx_type i = 0; i < nz; i++)
     {
       r.data (i) = std::real (a.data (i));
       r.ridx (i) = a.ridx (i);
     }
 
+  r.maybe_compress (true);
   return r;
 }
 
 SparseMatrix
 imag (const SparseComplexMatrix& a)
 {
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.cols ();
@@ -668,19 +669,27 @@ imag (const SparseComplexMatrix& a)
     r.cidx (i) = a.cidx (i);
 
   for (octave_idx_type i = 0; i < nz; i++)
     {
       r.data (i) = std::imag (a.data (i));
       r.ridx (i) = a.ridx (i);
     }
 
+  r.maybe_compress (true);
   return r;
 }
 
+/*
+
+%!assert(nnz(real(sparse([1i,1]))),1)
+%!assert(nnz(real(sparse([1i,1]))),1)
+
+*/
+
 SparseMatrix
 atan2 (const double& x, const SparseMatrix& y)
 {
   octave_idx_type nr = y.rows ();
   octave_idx_type nc = y.cols ();
 
   if (x == 0.)
     return SparseMatrix (nr, nc);
