# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1547238179 18000
#      Fri Jan 11 15:22:59 2019 -0500
# Node ID 8b0c9dc0799afd25066e995e2b4e7b47222c1427
# Parent  32890ede698c9754cf116cc210f0069a81910cb5
# Parent  278ae90567a79eecd15af9ce960d81f70c0e32c2
maint: Merge stable to default.

diff --git a/libgui/graphics/Figure.cc b/libgui/graphics/Figure.cc
--- a/libgui/graphics/Figure.cc
+++ b/libgui/graphics/Figure.cc
@@ -645,25 +645,16 @@ namespace QtHandles
       }
 
     figure::properties& fp = properties<figure> ();
 
     gh_manager::post_set (m_handle, prop, fp.bbox2position (bb), false,
                           prop == "position");
   }
 
-  void
-  Figure::close_figure_callback (void)
-  {
-    figure::properties& fp = properties<figure> ();
-    octave_value fnum = fp.get___myhandle__ ().as_octave_value ();
-
-    Ffeval (ovl ("close", fnum));
-  }
-
   bool
   Figure::eventNotifyBefore (QObject *obj, QEvent *xevent)
   {
     if (! m_blockUpdates)
       {
         // Clicking the toolbar or the menubar makes this figure current
         if (xevent->type () == QEvent::MouseButtonPress)
           {
@@ -692,17 +683,17 @@ namespace QtHandles
               }
           }
         else
           {
             switch (xevent->type ())
               {
               case QEvent::Close:
                 xevent->ignore ();
-                octave_link::post_event (this, &Figure::close_figure_callback);
+                gh_manager::post_callback (m_handle, "closerequestfcn");
                 return true;
 
               default:
                 break;
               }
           }
       }
 
diff --git a/libgui/graphics/Figure.h b/libgui/graphics/Figure.h
--- a/libgui/graphics/Figure.h
+++ b/libgui/graphics/Figure.h
@@ -103,18 +103,16 @@ namespace QtHandles
   private:
     void createFigureToolBarAndMenuBar (void);
     void showFigureToolBar (bool visible);
     void addCustomToolBar (QToolBar *bar, bool visible);
     void showCustomToolBar (QToolBar *bar, bool visible);
     void updateFigureToolBarAndMenuBar (void);
     void set_geometry (QRect r);
 
-    void close_figure_callback (void);
-
     void enableMouseTracking (void);
 
   private slots:
     void setMouseMode (MouseMode mode);
     void updateFigureHeight (int delta_h);
     void updateContainer (void);
     void toggleAxes (void);
     void toggleGrid (void);
diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -1895,18 +1895,16 @@ namespace octave
 
     int count_crlf = text.count (eol_crlf);
     int count_lf = text.count (eol_lf) - count_crlf;  // isolated lf
     int count_cr = text.count (eol_cr) - count_crlf;  // isolated cr;
 
     // get default from OS or from settings
 #if defined (Q_OS_WIN32)
     int os_eol_mode = QsciScintilla::EolWindows;
-#elif defined (Q_OS_MAC)
-    int os_eol_mode = QsciScintilla::EolMac;
 #else
     int os_eol_mode = QsciScintilla::EolUnix;
 #endif
     QSettings *settings = resource_manager::get_settings ();
     QsciScintilla::EolMode eol_mode = static_cast<QsciScintilla::EolMode> (
                                         settings->value ("editor/default_eol_mode",os_eol_mode).toInt ());
 
     int count_max = 0;
@@ -1982,18 +1980,16 @@ namespace octave
     update_window_title (false); // window title (no modification)
 
     QSettings *settings = resource_manager::get_settings ();
 
     // set the eol mode from the settings or depending on the OS if the entry is
     // missing in the settings
 #if defined (Q_OS_WIN32)
     int eol_mode = QsciScintilla::EolWindows;
-#elif defined (Q_OS_MAC)
-    int eol_mode = QsciScintilla::EolMac;
 #else
     int eol_mode = QsciScintilla::EolUnix;
 #endif
     _edit_area->setEolMode (
       static_cast<QsciScintilla::EolMode> (
         settings->value ("editor/default_eol_mode",eol_mode).toInt ()));
 
     update_eol_indicator ();
diff --git a/libgui/src/settings-dialog.cc b/libgui/src/settings-dialog.cc
--- a/libgui/src/settings-dialog.cc
+++ b/libgui/src/settings-dialog.cc
@@ -324,21 +324,19 @@ namespace octave
         m_rb_uncomment_strings[i]->setChecked ( 1 << i & selected_uncomment_string);
         layout_uncomment_strings->addWidget (m_rb_uncomment_strings[i]);
       }
 
 
 #if defined (HAVE_QSCINTILLA)
 #  if defined (Q_OS_WIN32)
     int eol_mode = QsciScintilla::EolWindows;
-#elif defined (Q_OS_MAC)
-    int eol_mode = QsciScintilla::EolMac;
-#else
+#  else
     int eol_mode = QsciScintilla::EolUnix;
-#endif
+#  endif
 #else
     int eol_mode = 2;
 #endif
     combo_eol_mode->setCurrentIndex (settings->value ("editor/default_eol_mode", eol_mode).toInt ());
     editor_auto_ind_checkbox->setChecked (settings->value ("editor/auto_indent", true).toBool ());
     editor_tab_ind_checkbox->setChecked (settings->value ("editor/tab_indents_line", false).toBool ());
     editor_bs_unind_checkbox->setChecked (settings->value ("editor/backspace_unindents_line", false).toBool ());
     editor_ind_guides_checkbox->setChecked (settings->value ("editor/show_indent_guides", false).toBool ());
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -3383,27 +3383,16 @@ base_properties::update_autopos (const s
 }
 
 void
 base_properties::update_handlevisibility (void)
 {
   if (is_handle_visible ())
     return;
 
-  // This object should not be the root "callbackobject"
-  graphics_object rt = gh_manager::get_object (0);
-  octave_value cbo = rt.get ("callbackobject");
-  if (! cbo.isempty () && cbo.double_value () == __myhandle__)
-    {
-      gh_manager::auto_lock guard;
-      auto& root_props =
-        dynamic_cast<root_figure::properties&> (rt.get_properties ());
-      root_props.set_callbackobject (Matrix ());
-    }
-
   // This object should not be the figure "currentobject"
   graphics_object go (gh_manager::get_object (get___myhandle__ ()));
   graphics_object fig (go.get_ancestor ("figure"));
   if (fig.valid_object ())
     {
       octave_value co = fig.get ("currentobject");
       if (! co.isempty () && co.double_value () == __myhandle__)
         {
@@ -3433,27 +3422,26 @@ base_properties::update_handlevisibility
 %! unwind_protect_cleanup
 %!   close ([hf1, hf2]);
 %! end_unwind_protect;
 */
 
 /*
 ## test current callback object have visible handle
 %!test
-%! hf = figure ("visible", "off");
-%! hax = axes ();
+%! hf = figure ("handlevisibility", "off", "visible", "off");
+%! hax = axes ("parent", hf, "handlevisibility", "off");
 %! unwind_protect
-%!   fcn = @(h) assert (gcbo (), h);
+%!   fcn = @(h) setappdata (h, "testdata", gcbo ());
+%!   addlistener (hf, "color", fcn);
 %!   addlistener (hax, "color", fcn);
-%!   set (hax, "color", "r");
-%!   dellistener (hax, "color", fcn);
-%!   set (hax, "handlevisibility", "off");
-%!   fcn = @() assert (gcbo (), []);
-%!   addlistener (hax, "color", fcn);
+%!   set (hf, "color", "b");
 %!   set (hax, "color", "b");
+%!   assert (getappdata (hf, "testdata"), hf)
+%!   assert (getappdata (hax, "testdata"), hax)
 %! unwind_protect_cleanup
 %!   close (hf);
 %! end_unwind_protect;
 */
 
 void
 base_properties::add_listener (const caseless_str& pname,
                                const octave_value& val,
@@ -11361,16 +11349,48 @@ private:
 private:
   graphics_handle handle;
   std::string callback_name;
   octave_value callback;
   octave_value callback_data;
 };
 
 class
+mcode_event : public base_graphics_event
+{
+public:
+  mcode_event (const graphics_handle& h, const std::string& cmd,
+               int busyaction = base_graphics_event::QUEUE)
+    : base_graphics_event (busyaction), handle (h), mcode (cmd)
+  { }
+
+  void execute (void)
+  {
+    if (! mcode.empty ())
+      {
+        graphics_object go = gh_manager::get_object (handle);
+        if (go.valid_object ())
+          {
+            octave_value cb (mcode);
+            gh_manager::execute_callback (handle, cb);
+          }
+      }
+  }
+
+private:
+  mcode_event (void)
+    : base_graphics_event (), handle (), mcode ()
+  { }
+
+private:
+  graphics_handle handle;
+  std::string mcode;
+};
+
+class
 function_event : public base_graphics_event
 {
 public:
 
   // function_event objects must be created with at least a function.
 
   function_event (void) = delete;
 
@@ -11484,16 +11504,24 @@ graphics_event::create_callback_event (c
                                        const octave_value& cb,
                                        const octave_value& data,
                                        int busyaction)
 {
   return graphics_event (new callback_event (h, cb, data, busyaction));
 }
 
 graphics_event
+graphics_event::create_mcode_event (const graphics_handle& h,
+                                    const std::string& cmd,
+                                    int busyaction)
+{
+  return graphics_event (new mcode_event (h, cmd, busyaction));
+}
+
+graphics_event
 graphics_event::create_function_event (graphics_event::event_fcn fcn,
                                        void *data)
 {
   return graphics_event (new function_event (fcn, data));
 }
 
 graphics_event
 graphics_event::create_set_event (const graphics_handle& h,
@@ -11561,22 +11589,20 @@ gh_manager::do_execute_callback (const g
 
       graphics_object go (get_object (h));
       if (go)
         {
           // FIXME: Is the lock necessary when we're only calling a
           //        const "get" method?
           gh_manager::auto_lock guard;
           callback_objects.push_front (go);
-          if (go.get ("handlevisibility").string_value () != "off")
-            xset_gcbo (h);
+          xset_gcbo (h);
         }
 
       // Copy CB because "function_value" method is non-const.
-
       octave_value cb = cb_arg;
 
       if (cb.is_function () || cb.is_function_handle ())
         fcn = cb.function_value ();
       else if (cb.is_string ())
         {
           int status;
           std::string s = cb.string_value ();
@@ -11663,32 +11689,36 @@ gh_manager::do_post_callback (const grap
 
   graphics_object go = get_object (h);
 
   if (go.valid_object ())
     {
       caseless_str cname (name);
       int busyaction = base_graphics_event::QUEUE;
 
-      if (cname.compare ("deletefcn")
-          || cname.compare ("createfcn")
-          || (go.isa ("figure")
-              && cname.compare ("closerequestfcn"))
-          || ((go.isa ("figure")
-               || go.isa ("uipanel")
+      if (cname == "deletefcn" || cname == "createfcn"
+          || cname == "closerequestfcn"
+          || ((go.isa ("figure") || go.isa ("uipanel")
                || go.isa ("uibuttongroup"))
-              && (cname.compare ("resizefcn")
-                  || cname.compare ("sizechangedfcn"))))
+              && (cname == "resizefcn" || cname == "sizechangedfcn")))
         busyaction = base_graphics_event::INTERRUPT;
       else if (go.get_properties ().get_busyaction () == "cancel")
         busyaction = base_graphics_event::CANCEL;
 
-
-      do_post_event (graphics_event::create_callback_event (h, name, data,
-                                                            busyaction));
+      // The "closerequestfcn" callback must be executed once the figure has
+      // been made current. Let "close" do the job.
+      if (cname == "closerequestfcn")
+        {
+          std::string cmd ("close (gcbf ());");
+          do_post_event (graphics_event::create_mcode_event (h, cmd,
+                                                             busyaction));
+        }
+      else
+        do_post_event (graphics_event::create_callback_event (h, name, data,
+                                                              busyaction));
     }
 }
 
 void
 gh_manager::do_post_function (graphics_event::event_fcn fcn, void *fcn_data)
 {
   gh_manager::auto_lock guard;
 
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -6125,16 +6125,20 @@ public:
 
   static graphics_event
   create_callback_event (const graphics_handle& h,
                          const octave_value& cb,
                          const octave_value& data = Matrix (),
                          int busyaction = base_graphics_event::QUEUE);
 
   static graphics_event
+  create_mcode_event (const graphics_handle& h, const std::string& cmd,
+                      int busyaction);
+
+  static graphics_event
   create_function_event (event_fcn fcn, void *data = nullptr);
 
   static graphics_event
   create_set_event (const graphics_handle& h, const std::string& name,
                     const octave_value& value, bool notify_toolkit = true,
                     bool redraw_figure = false);
 private:
 
diff --git a/libinterp/dldfcn/qr.cc b/libinterp/dldfcn/qr.cc
--- a/libinterp/dldfcn/qr.cc
+++ b/libinterp/dldfcn/qr.cc
@@ -35,16 +35,31 @@ along with Octave; see the file COPYING.
 #include "sparse-qr.h"
 
 #include "defun-dld.h"
 #include "error.h"
 #include "errwarn.h"
 #include "ov.h"
 #include "ovl.h"
 
+/*
+## Restore all rand* "state" values
+%!function restore_rand_states (state)
+%!  rand ("state", state.rand);
+%!  randn ("state", state.randn);
+%!endfunction
+
+%!shared old_state, restore_state
+%! ## Save and restore the states of both random number generators that are
+%! ## tested by the unit tests in this file.
+%! old_state.rand = rand ("state");
+%! old_state.randn = randn ("state");
+%! restore_state = onCleanup (@() restore_rand_states (old_state));
+*/
+
 template <typename MT>
 static octave_value
 get_qr_r (const octave::math::qr<MT>& fact)
 {
   MT R = fact.R ();
   if (R.issquare () && fact.regular ())
     return octave_value (R, MatrixType (MatrixType::Upper));
   else
@@ -837,79 +852,109 @@ orthogonal basis of @code{span (A)}.
 %!
 %! assert (all (t) && norm (q*r-a) < 5000*eps ("single"));
 
 ## The deactivated tests below can't be tested till rectangular back-subs is
 ## implemented for sparse matrices.
 
 %!testif HAVE_CXSPARSE
 %! n = 20;  d = 0.2;
+%! ## initialize generators to make behavior reproducible
+%! rand ("state", 42);
+%! randn ("state", 42);
 %! a = sprandn (n,n,d) + speye (n,n);
 %! r = qr (a);
 %! assert (r'*r, a'*a, 1e-10);
 
 %!testif HAVE_COLAMD
 %! n = 20;  d = 0.2;
+%! ## initialize generators to make behavior reproducible
+%! rand ("state", 42);
+%! randn ("state", 42);
 %! a = sprandn (n,n,d) + speye (n,n);
 %! q = symamd (a);
 %! a = a(q,q);
 %! r = qr (a);
 %! assert (r'*r, a'*a, 1e-10);
 
 %!testif HAVE_CXSPARSE
 %! n = 20;  d = 0.2;
+%! ## initialize generators to make behavior reproducible
+%! rand ("state", 42);
+%! randn ("state", 42);
 %! a = sprandn (n,n,d) + speye (n,n);
 %! [c,r] = qr (a, ones (n,1));
 %! assert (r\c, full (a)\ones (n,1), 10e-10);
 
 %!testif HAVE_CXSPARSE
 %! n = 20;  d = 0.2;
+%! ## initialize generators to make behavior reproducible
+%! rand ("state", 42);
+%! randn ("state", 42);
 %! a = sprandn (n,n,d) + speye (n,n);
 %! b = randn (n,2);
 %! [c,r] = qr (a, b);
 %! assert (r\c, full (a)\b, 10e-10);
 
 ## Test under-determined systems!!
 %!#testif HAVE_CXSPARSE
 %! n = 20;  d = 0.2;
+%! ## initialize generators to make behavior reproducible
+%! rand ("state", 42);
+%! randn ("state", 42);
 %! a = sprandn (n,n+1,d) + speye (n,n+1);
 %! b = randn (n,2);
 %! [c,r] = qr (a, b);
 %! assert (r\c, full (a)\b, 10e-10);
 
 %!testif HAVE_CXSPARSE
 %! n = 20;  d = 0.2;
+%! ## initialize generators to make behavior reproducible
+%! rand ("state", 42);
+%! randn ("state", 42);
 %! a = 1i*sprandn (n,n,d) + speye (n,n);
 %! r = qr (a);
 %! assert (r'*r,a'*a,1e-10);
 
 %!testif HAVE_COLAMD
 %! n = 20;  d = 0.2;
+%! ## initialize generators to make behavior reproducible
+%! rand ("state", 42);
+%! randn ("state", 42);
 %! a = 1i*sprandn (n,n,d) + speye (n,n);
 %! q = symamd (a);
 %! a = a(q,q);
 %! r = qr (a);
 %! assert (r'*r, a'*a, 1e-10);
 
 %!testif HAVE_CXSPARSE
 %! n = 20;  d = 0.2;
+%! ## initialize generators to make behavior reproducible
+%! rand ("state", 42);
+%! randn ("state", 42);
 %! a = 1i*sprandn (n,n,d) + speye (n,n);
 %! [c,r] = qr (a, ones (n,1));
 %! assert (r\c, full (a)\ones (n,1), 10e-10);
 
 %!testif HAVE_CXSPARSE
 %! n = 20;  d = 0.2;
+%! ## initialize generators to make behavior reproducible
+%! rand ("state", 42);
+%! randn ("state", 42);
 %! a = 1i*sprandn (n,n,d) + speye (n,n);
 %! b = randn (n,2);
 %! [c,r] = qr (a, b);
 %! assert (r\c, full (a)\b, 10e-10);
 
 ## Test under-determined systems!!
 %!#testif HAVE_CXSPARSE
 %! n = 20;  d = 0.2;
+%! ## initialize generators to make behavior reproducible
+%! rand ("state", 42);
+%! randn ("state", 42);
 %! a = 1i*sprandn (n,n+1,d) + speye (n,n+1);
 %! b = randn (n,2);
 %! [c,r] = qr (a, b);
 %! assert (r\c, full (a)\b, 10e-10);
 
 */
 
 static
diff --git a/libinterp/op-kw-docs b/libinterp/op-kw-docs
--- a/libinterp/op-kw-docs
+++ b/libinterp/op-kw-docs
@@ -703,23 +703,16 @@ Begin a properties block in a classdef d
 @end deftypefn
 return
 @c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} return
 Return from a function.
 @seealso{function}
 @end deftypefn
-static
-@c libinterp/parse-tree/oct-parse.yy
--*- texinfo -*-
-@deftypefn {} {} static
-This statement has been deprecated in favor of @code{persistent}.
-@seealso{persistent}
-@end deftypefn
 switch
 @c libinterp/parse-tree/oct-parse.yy
 -*- texinfo -*-
 @deftypefn {} {} switch @var{statement}
 Begin a switch block.
 
 @example
 @group
diff --git a/liboctave/array/CNDArray.cc b/liboctave/array/CNDArray.cc
--- a/liboctave/array/CNDArray.cc
+++ b/liboctave/array/CNDArray.cc
@@ -185,25 +185,29 @@ ComplexNDArray::ifourierNd (void) const
   return retval;
 }
 
 #else
 
 ComplexNDArray
 ComplexNDArray::fourier (int dim) const
 {
+  octave_unused_parameter (dim);
+
   (*current_liboctave_error_handler)
     ("support for FFTW was unavailable or disabled when liboctave was built");
 
   return ComplexNDArray ();
 }
 
 ComplexNDArray
 ComplexNDArray::ifourier (int dim) const
 {
+  octave_unused_parameter (dim);
+
   (*current_liboctave_error_handler)
     ("support for FFTW was unavailable or disabled when liboctave was built");
 
   return ComplexNDArray ();
 }
 
 ComplexNDArray
 ComplexNDArray::fourier2d (void) const
diff --git a/liboctave/array/dNDArray.cc b/liboctave/array/dNDArray.cc
--- a/liboctave/array/dNDArray.cc
+++ b/liboctave/array/dNDArray.cc
@@ -226,25 +226,29 @@ NDArray::ifourierNd (void) const
   return retval;
 }
 
 #else
 
 ComplexNDArray
 NDArray::fourier (int dim) const
 {
+  octave_unused_parameter (dim);
+
   (*current_liboctave_error_handler)
     ("support for FFTW was unavailable or disabled when liboctave was built");
 
   return ComplexNDArray ();
 }
 
 ComplexNDArray
 NDArray::ifourier (int dim) const
 {
+  octave_unused_parameter (dim);
+
   (*current_liboctave_error_handler)
     ("support for FFTW was unavailable or disabled when liboctave was built");
 
   return ComplexNDArray ();
 }
 
 ComplexNDArray
 NDArray::fourier2d (void) const
diff --git a/liboctave/array/fCNDArray.cc b/liboctave/array/fCNDArray.cc
--- a/liboctave/array/fCNDArray.cc
+++ b/liboctave/array/fCNDArray.cc
@@ -185,25 +185,29 @@ FloatComplexNDArray::ifourierNd (void) c
   return retval;
 }
 
 #else
 
 FloatComplexNDArray
 FloatComplexNDArray::fourier (int dim) const
 {
+  octave_unused_parameter (dim);
+
   (*current_liboctave_error_handler)
     ("support for FFTW was unavailable or disabled when liboctave was built");
 
   return FloatComplexNDArray ();
 }
 
 FloatComplexNDArray
 FloatComplexNDArray::ifourier (int dim) const
 {
+  octave_unused_parameter (dim);
+
   (*current_liboctave_error_handler)
     ("support for FFTW was unavailable or disabled when liboctave was built");
 
   return FloatComplexNDArray ();
 }
 
 FloatComplexNDArray
 FloatComplexNDArray::fourier2d (void) const
diff --git a/liboctave/array/fNDArray.cc b/liboctave/array/fNDArray.cc
--- a/liboctave/array/fNDArray.cc
+++ b/liboctave/array/fNDArray.cc
@@ -184,25 +184,29 @@ FloatNDArray::ifourierNd (void) const
   return retval;
 }
 
 #else
 
 FloatComplexNDArray
 FloatNDArray::fourier (int dim) const
 {
+  octave_unused_parameter (dim);
+
   (*current_liboctave_error_handler)
     ("support for FFTW was unavailable or disabled when liboctave was built");
 
   return FloatComplexNDArray ();
 }
 
 FloatComplexNDArray
 FloatNDArray::ifourier (int dim) const
 {
+  octave_unused_parameter (dim);
+
   (*current_liboctave_error_handler)
     ("support for FFTW was unavailable or disabled when liboctave was built");
   return FloatComplexNDArray ();
 }
 
 FloatComplexNDArray
 FloatNDArray::fourier2d (void) const
 {
diff --git a/scripts/specfun/betainc.m b/scripts/specfun/betainc.m
--- a/scripts/specfun/betainc.m
+++ b/scripts/specfun/betainc.m
@@ -196,17 +196,17 @@ endfunction
 
 %!test <51157>
 %! y = betainc ([0.00780;0.00782;0.00784],250.005,49750.995);
 %! y_ex = [0.999999999999989; 0.999999999999992; 0.999999999999995];
 %! assert (y, y_ex, -1e-14);
 
 %!assert (betainc (0.001, 20, 30), 2.750687665855991e-47, -3e-14);
 %!assert (betainc (0.0001, 20, 30), 2.819953178893307e-67, -7e-14);
-%!assert <54383> (betainc (0.99, 20, 30, "upper"), 1.5671643161872703e-47, -5e-14);
+%!assert <54383> (betainc (0.99, 20, 30, "upper"), 1.5671643161872703e-47, -7e-14);
 %!assert (betainc (0.999, 20, 30, "upper"), 1.850806276141535e-77, -7e-14);
 %!assert (betainc (0.5, 200, 300), 0.9999964565197356, -1e-15);
 %!assert (betainc (0.5, 200, 300, "upper"), 3.54348026439253e-06, -3e-13);
 
 ## Test trivial values
 %!test
 %! [a,b] = ndgrid (linspace (1e-4, 100, 20), linspace (1e-4, 100, 20));
 %! assert (betainc (0, a, b), zeros (20));
