# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1295508597 18000
#      Thu Jan 20 02:29:57 2011 -0500
# Node ID 8ac9687dbe9f19f096a6b7c8e731383fc43ef49a
# Parent  d6619410e79c041784b1fb0ee4b0e0ccbac93cc5
rename backend to graphics_toolkit

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,12 @@
+2011-01-20  John W. Eaton  <jwe@octave.org>
+
+	* configure.ac, NEWS: Update for backend -> graphics_toolkit change.
+
 2010-01-17  Rik  <octave@nomad.inbox5.com>
 
 	* NEWS: Add quadcc to list of new functions added.
 
 2011-01-17  John W. Eaton  <jwe@octave.org>
 
 	* mkoctfile.cc.in (main): Add + missing from previous change.
 
diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -432,38 +432,38 @@ Summary of important user-visible change
            endfor
 
     works as expected.  This capability has be used to introduce
     stem-series, bar-series, etc., objects for better Matlab
     compatibility.
 
  ** New graphics functions:
 
-      addlistener         ezcontour   gcbo         refresh  
-      addproperty         ezcontourf  ginput       refreshdata
-      allchild            ezmesh      gtext        specular
-      available_backends  ezmeshc     intwarning   surfl
-      backend             ezplot      ishghandle   trisurf
-      cla                 ezplot3     isocolors    waitforbuttonpress
-      clabel              ezpolar     isonormals
-      comet               ezsurf      isosurface  
-      dellistener         findall     linkprop   
-      diffuse             gcbf        plotmatrix
+      addlistener                  ezcontour   gcbo         refresh  
+      addproperty                  ezcontourf  ginput       refreshdata
+      allchild                     ezmesh      gtext        specular
+      available_graphics_toolkits  ezmeshc     intwarning   surfl
+      graphics_toolkit             ezplot      ishghandle   trisurf
+      cla                          ezplot3     isocolors    waitforbuttonpress
+      clabel                       ezpolar     isonormals
+      comet                        ezsurf      isosurface  
+      dellistener                  findall     linkprop   
+      diffuse                      gcbf        plotmatrix
 
  ** New experimental OpenGL/FLTK based plotting system.
 
     An experimental plotting system based on OpenGL and the FLTK
-    toolkit is now part of Octave.  This backend is disabled by
+    toolkit is now part of Octave.  This graphics toolkit is disabled by
     default.  You can switch to using it with the command
 
-        backend ("fltk")
+        graphics_toolkit ("fltk")
 
     for all future figures or for a particular figure with the command
 
-        backend (h, "fltk")
+        graphics_toolkit (h, "fltk")
 
     where "h" is a valid figure handle.
 
  ** Functions providing direct access to gnuplot have been removed.
 
     The functions __gnuplot_plot__, __gnuplot_set__, __gnuplot_raw__,
      __gnuplot_show__, __gnuplot_replot__, __gnuplot_splot__,
      __gnuplot_save_data__ and __gnuplot_send_inline_data__ have been
diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -2388,17 +2388,17 @@ else
   AC_MSG_WARN([])
   warn_msg_printed=true
 fi
 
 if test -n "$warn_gnuplot"; then
   if $native_graphics; then
     AC_MSG_WARN([])
     AC_MSG_WARN([I didn't find gnuplot.  Plotting commands will use the])
-    AC_MSG_WARN([native graphics backend.])
+    AC_MSG_WARN([native graphics toolkit.])
   else
     AC_MSG_WARN([I didn't find gnuplot.  It isn't necessary to have gnuplot])
     AC_MSG_WARN([installed, but you won't be able to use any of Octave's])
     AC_MSG_WARN([plotting commands without it.])
   fi
   AC_MSG_WARN([])
   AC_MSG_WARN([If gnuplot is installed, but isn't in your path, you can])
   AC_MSG_WARN([tell Octave where to find it by using the gnuplot_binary])
diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,18 @@
+2011-01-20  John W. Eaton  <jwe@octave.org>
+
+	* faq/OctaveFAQ.texi, interpreter/doccheck/aspell-octave.en.pws,
+	interpreter/octave.texi, interpreter/plot.txi: Update for
+	backend -> graphics_toolkit change.
+
+	* interpreter/interpimages.m, interpreter/geometryimages.m,
+	interpreter/sparseimages.m, interpreter/plotimages.m:
+	Call graphics_toolkit, not backend. 
+
 2011-01-19  Rik  <octave@nomad.inbox5.com>
 
 	* interpreter/doccheck/aspell-octave.en.pws: Add new words to Octave
 	private dictionary.
 
 2011-01-19  Rik  <octave@nomad.inbox5.com>
 
 	* doc/interpreter/diagperm.txi, doc/interpreter/dynamic.txi,
diff --git a/doc/faq/OctaveFAQ.texi b/doc/faq/OctaveFAQ.texi
--- a/doc/faq/OctaveFAQ.texi
+++ b/doc/faq/OctaveFAQ.texi
@@ -299,19 +299,19 @@ Here are some features that have been ar
 @item cells
 
 @end itemize
 
 The 3.1.N series is the current development release and will become a
 3.2.N release in the future. This series brings the new features
 
 @itemize
-@item OpenGL backend
+@item OpenGL graphics toolkit
 
-An experimental OpenGL graphics backend to replace the gnuplot
+An experimental OpenGL graphics toolkit to replace the gnuplot.
 
 @item Object Orient Programming
 
 @item Block comments
 
 @item imwrite and imread 
 
 The functions are based on the GraphicsMagick library.
diff --git a/doc/interpreter/contrib.txi b/doc/interpreter/contrib.txi
--- a/doc/interpreter/contrib.txi
+++ b/doc/interpreter/contrib.txi
@@ -142,20 +142,20 @@ ChangeLog file upwards in the directory 
 as a template.  Your entry should contain your name and email, and the
 path to the modified source file relative to the parent directory of the
 ChangeLog file.  If there are more functions in the file, you should
 also include the name of the modified function (in parentheses after
 file path).  Example:
 
 @example
 @group
-2008-04-02  David Bateman  <dbateman@@free.fr>
+2010-04-13  David Bateman  <dbateman@@free.fr>
 
-        * graphics.cc (void gnuplot_backend::close_figure (const
-        octave_value&) const): Allow for an input and output stream.
+	* DLD-FUNCTIONS/regexp.cc (octregexp_list): Handle repeated matches
+	in the list of matches returned by pcre.
 @end group
 @end example
 
 @noindent
 The ChangeLog entries should describe what is changed, not why.  Any
 explanation of why a change is needed should appear as comments in the
 code, particularly if there is something that might not be obvious to
 someone reading it later.
diff --git a/doc/interpreter/doccheck/aspell-octave.en.pws b/doc/interpreter/doccheck/aspell-octave.en.pws
--- a/doc/interpreter/doccheck/aspell-octave.en.pws
+++ b/doc/interpreter/doccheck/aspell-octave.en.pws
@@ -32,19 +32,16 @@ Autoload
 autoload
 autoloaded
 autoloading
 Autoloading
 autoregression
 autoregressions
 autoscaled
 AWK
-backend
-Backends
-backends
 bartlett
 Bateman
 BDF
 bdf
 betacdf
 betainv
 betapdf
 betarnd
diff --git a/doc/interpreter/geometryimages.m b/doc/interpreter/geometryimages.m
--- a/doc/interpreter/geometryimages.m
+++ b/doc/interpreter/geometryimages.m
@@ -12,17 +12,17 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 function geometryimages (nm, typ)
-  backend ("gnuplot");
+  graphics_toolkit ("gnuplot");
   set_print_size ();
   hide_output ();
   if (strcmp (typ, "png"))
     set (0, "defaulttextfontname", "*");
   endif
   if (strcmp (typ, "eps"))
     d_typ = "-depsc2";
   else
diff --git a/doc/interpreter/interpimages.m b/doc/interpreter/interpimages.m
--- a/doc/interpreter/interpimages.m
+++ b/doc/interpreter/interpimages.m
@@ -12,17 +12,17 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 function interpimages (nm, typ)
-  backend ("gnuplot");
+  graphics_toolkit ("gnuplot");
   set_print_size ();
   hide_output ();
   if (strcmp (typ, "png"))
     set (0, "defaulttextfontname", "*");
   endif
   if (strcmp (typ, "eps"))
     d_typ = "-depsc2";
   else
diff --git a/doc/interpreter/octave.texi b/doc/interpreter/octave.texi
--- a/doc/interpreter/octave.texi
+++ b/doc/interpreter/octave.texi
@@ -537,33 +537,33 @@ Graphics Object Properties
 
 Advanced Plotting
 
 * Colors::                      
 * Line Styles::                 
 * Marker Styles::               
 * Callbacks::                   
 * Object Groups::               
-* Graphics Backends::           
+* Graphics Toolkits::           
 
 Object Groups
 
 * Data Sources in Object Groups::  
 * Area Series::                 
 * Bar Series::                  
 * Contour Groups::              
 * Error Bar Series::            
 * Line Series::                 
 * Quiver Group::                
 * Scatter Group::               
 * Stair Group::                 
 * Stem Series::                 
 * Surface Group::               
 
-Graphics Backends
+Graphics Toolkits
 
 * Interaction with gnuplot::    
 
 Matrix Manipulation
 
 * Finding Elements and Checking Conditions::  
 * Rearranging Matrices::        
 * Applying a Function to an Array::
diff --git a/doc/interpreter/plot.txi b/doc/interpreter/plot.txi
--- a/doc/interpreter/plot.txi
+++ b/doc/interpreter/plot.txi
@@ -29,24 +29,24 @@
 @end menu
 
 @node Introduction to Plotting
 @section Introduction to Plotting
 
 Earlier versions of Octave provided plotting through the use of
 gnuplot.  This capability is still available.  But, a newer plotting
 capability is provided by access to OpenGL@.  Which plotting system
-is used is controlled by the @code{backend} function.  (See @ref{Graphics
-Backends}.)
-
-The function call @code{backend ("fltk")} selects the fltk/OpenGL system, and
-@code{backend ("gnuplot")} selects the gnuplot system.
-The two systems may be used selectively through the use of the @code{backend}
-property of the graphics handle for each figure.  This is
-explained in @ref{Graphics Data Structures}.
+is used is controlled by the @code{graphics_toolkit} function.  (See
+@ref{Graphics Toolkits}.)
+
+The function call @code{graphics_toolkit ("fltk")} selects the
+fltk/OpenGL system, and @code{graphics_toolkit ("gnuplot")} selects the
+gnuplot system.  The two systems may be used selectively through the use
+of the @code{graphics_toolkit} property of the graphics handle for each
+figure.  This is explained in @ref{Graphics Data Structures}.
 
 @node High-Level Plotting
 @section High-Level Plotting
 
 Octave provides simple means to create many different types of two- and
 three-dimensional plots using high-level functions.
 
 If you need more detailed control, see @ref{Graphics Data Structures}
@@ -924,34 +924,40 @@ Thus, for example,
 
 @smallexample
 h = figure ();
 get (h, "type")
 ans = figure
 get (h, "");
 error: get: ambiguous figure property name ; possible matches:
 
-__backend__            currentobject          paperposition          toolbar
-__enhanced__           deletefcn              paperpositionmode      type
-__modified__           dockcontrols           papersize              uicontextmenu
-__myhandle__           doublebuffer           papertype              units
-__plot_stream__        filename               paperunits             userdata
-alphamap               handlevisibility       parent                 visible
-beingdeleted           hittest                pointer                windowbuttondownfcn
-busyaction             integerhandle          pointershapecdata      windowbuttonmotionfcn
-buttondownfcn          interruptible          pointershapehotspot    windowbuttonupfcn
-children               inverthardcopy         position               windowbuttonwheelfcn
-clipping               keypressfcn            renderer               windowstyle
-closerequestfcn        keyreleasefcn          renderermode           wvisual
-color                  menubar                resize                 wvisualmode
-colormap               mincolormap            resizefcn              xdisplay
-createfcn              name                   selected               xvisual
-currentpoint           nextplot               selectionhighlight     xvisualmode
-currentaxes            numbertitle            selectiontype
-currentcharacter       paperorientation       tag
+__graphics_toolkit__  hittest              resize
+__enhanced__          integerhandle        resizefcn
+__modified__          interruptible        selected
+__myhandle__          inverthardcopy       selectionhighlight
+__plot_stream__       keypressfcn          selectiontype
+alphamap              keyreleasefcn        tag
+beingdeleted          menubar              toolbar
+busyaction            mincolormap          type
+buttondownfcn         name                 uicontextmenu
+children              nextplot             units
+clipping              numbertitle          userdata
+closerequestfcn       paperorientation     visible
+color                 paperposition        windowbuttondownfcn
+colormap              paperpositionmode    windowbuttonmotionfcn
+createfcn             papersize            windowbuttonupfcn
+currentaxes           papertype            windowbuttonwheelfcn
+currentcharacter      paperunits           windowstyle
+currentobject         parent               wvisual
+currentpoint          pointer              wvisualmode
+deletefcn             pointershapecdata    xdisplay
+dockcontrols          pointershapehotspot  xvisual
+doublebuffer          position             xvisualmode
+filename              renderer
+handlevisibility      renderermode
 @end smallexample
 
 The root figure has index 0.  Its properties may be displayed by:
 @code{get (0, "")}.
 
 The uses of @code{get} and @code{set} are further explained in
 @ref{doc-get,,get}, @ref{doc-set,,set}.
 
@@ -1195,18 +1201,18 @@ The @code{root figure} properties are:
 @end table
 
 @node Figure Properties
 @subsubsection Figure Properties
 @cindex figure properties
 
 The @code{figure} properties are:
 @table @code
-@item __backend__  
---- The backend currently in use.
+@item __graphics_toolkit__  
+--- The graphics toolkit currently in use.
 
 @item __enhanced__
 
 @item __modified__
 
 @item __myhandle__
 
 @item __plot_stream__
@@ -2437,17 +2443,17 @@ returns a list of factory defaults.
 @section Advanced Plotting
 
 @menu
 * Colors::                      
 * Line Styles::                 
 * Marker Styles::               
 * Callbacks::                   
 * Object Groups::               
-* Graphics Backends::           
+* Graphics Toolkits::           
 @end menu
 
 
 @node Colors
 @subsection Colors
 @cindex graphics colors
 @cindex colors, graphics
 
@@ -3199,24 +3205,24 @@ The original x, y, z and c data.
 
 @item xdatasource
 @itemx ydatasource
 @itemx zdatasource
 @itemx cdatasource
 Data source variables.
 @end table
 
-@node Graphics Backends
-@subsection Graphics Backends
-@cindex graphics backends
-@cindex backends, graphics
-
-@DOCSTRING(backend)
-
-@DOCSTRING(available_backends)
+@node Graphics Toolkits
+@subsection Graphics Toolkits
+@cindex graphics toolkits
+@cindex toolkits, graphics
+
+@DOCSTRING(graphics_toolkit)
+
+@DOCSTRING(available_graphics_toolkits)
 
 @menu
 * Interaction with gnuplot::    
 @end menu
 
 @node Interaction with gnuplot
 @subsubsection Interaction with @code{gnuplot}
 @cindex gnuplot interaction
diff --git a/doc/interpreter/plotimages.m b/doc/interpreter/plotimages.m
--- a/doc/interpreter/plotimages.m
+++ b/doc/interpreter/plotimages.m
@@ -12,17 +12,17 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 function plotimages (nm, typ)
-  backend ("gnuplot");
+  graphics_toolkit ("gnuplot");
   set_print_size ();
   hide_output ();
   if (strcmp (typ, "png"))
     set (0, "defaulttextfontname", "*");
   endif
   if (strcmp (typ, "eps"))
     d_typ = "-depsc2";
   else
diff --git a/doc/interpreter/sparseimages.m b/doc/interpreter/sparseimages.m
--- a/doc/interpreter/sparseimages.m
+++ b/doc/interpreter/sparseimages.m
@@ -12,17 +12,17 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 function sparseimages (nm, typ)
-  backend ("gnuplot");
+  graphics_toolkit ("gnuplot");
   set_print_size ();
   if (strcmp (typ, "png"))
     set (0, "defaulttextfontname", "*");
   endif
 
   if (! isempty (findstr (octave_config_info ("DEFS"), "HAVE_COLAMD"))
       && ! isempty (findstr (octave_config_info ("DEFS"), "HAVE_CHOLMOD"))
       && ! isempty (findstr (octave_config_info ("DEFS"), "HAVE_UMFPACK")))
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,20 @@
+2011-01-20  John W. Eaton  <jwe@octave.org>
+
+	* plot/ginput.m, plot/gnuplot_drawnow.m, plot/uiputfile.m,
+	plot/subplot.m, plot/axis.m, plot/colorbar.m,
+	plot/__print_parse_opts__.m, plot/uigetdir.m,
+	plot/__fltk_print__.m, plot/print.m, plot/__gnuplot_print__.m,
+	plot/uigetfile.m, plot/private/__actual_axis_position__.m:
+	Update for backend -> graphics_toolkit change.
+
+	* plot/graphics_toolkit.m: Rename from backend.m.
+	* plot/module.mk (plot_FCN_FILES): Update list.
+
 2011-01-19  Rik  <octave@nomad.inbox5.com>
 
 
 	* general/curl.m, general/divergence.m, io/strread.m,
 	miscellaneous/mkoctfile.m, plot/bar.m, plot/errorbar.m, plot/hist.m,
 	plot/mesh.m, plot/surf.m, polynomial/polyaffine.m: Correct spelling
 	in docstrings.
 
diff --git a/scripts/plot/__fltk_print__.m b/scripts/plot/__fltk_print__.m
--- a/scripts/plot/__fltk_print__.m
+++ b/scripts/plot/__fltk_print__.m
@@ -105,17 +105,17 @@ function opts = __fltk_print__ (opts)
     gl2ps_device = {"eps"};
     pipeline = {sprintf("%s > %s", cmd, opts.name)};
   case {"dxf", "emf", "fig", "hpgl"}
     cmd = opts.pstoedit_cmd (opts);
     gl2ps_device = {"eps"};
     pipeline = {sprintf("%s > %s", cmd, opts.name)};
   case {"corel", "gif"}
     error ("print:unsupporteddevice",
-           "print.m: %s output is not available for the FLTK backend.",
+           "print.m: %s output is not available for the FLTK graphics toolkit",
            upper (opts.devopt))
   case opts.ghostscript.device
     opts.ghostscript.source = "-";
     opts.ghostscript.output = opts.name;
     if (opts.send_to_printer)
       opts.unlink(strcmp (opts.unlink, opts.ghostscript.output)) = [];
       opts.ghostscript.output = "-";
     endif
diff --git a/scripts/plot/__gnuplot_print__.m b/scripts/plot/__gnuplot_print__.m
--- a/scripts/plot/__gnuplot_print__.m
+++ b/scripts/plot/__gnuplot_print__.m
@@ -133,17 +133,17 @@ function opts = __gnuplot_print__ (opts)
       else
         pipeline = {sprintf("%s ; %s", cmd, cmd_cleanup)};
       endif
     else
       pipeline = {cmd};
     endif
   otherwise
     error (sprintf ("print:no%soutput", opts.devopt),
-           "print.m: %s output is not available for the Gnuplot backend.",
+           "print.m: %s output is not available for the Gnuplot graphics toolkit",
            upper (opts.devopt))
   endswitch
 
 
   opts.pipeline = pipeline;
 
   for n = 1:numel(pipeline)
     if (opts.debug)
diff --git a/scripts/plot/__print_parse_opts__.m b/scripts/plot/__print_parse_opts__.m
--- a/scripts/plot/__print_parse_opts__.m
+++ b/scripts/plot/__print_parse_opts__.m
@@ -220,23 +220,23 @@ function arg_st = __print_parse_opts__ (
               "tex", "tex", ...
               "ps", "tiff", "tiff", "tikz", "pcx", ...
               "pcx", "pcx", "pcx", "pgm", "pgm", ...
               "ppm", "ppm", "tex", "tex", ...
               "pdf", "png", "tex", ...
               "eps", "ps", "ps", "pdf"};
 
   if (isfigure (arg_st.figure))
-    __backend__ = get (arg_st.figure, "__backend__");
+    __graphics_toolkit__ = get (arg_st.figure, "__graphics_toolkit__");
   else
     ## Allow tests when no figures are present.
-    __backend__ = get (0, "defaultfigure__backend__");
+    __graphics_toolkit__ = get (0, "defaultfigure__graphics_toolkit__");
   endif
 
-  if (strcmp (__backend__, "gnuplot")
+  if (strcmp (__graphics_toolkit__, "gnuplot")
       && __gnuplot_has_feature__ ("epslatex_implies_eps_filesuffix"))
     suffixes(strncmp (dev_list, "epslatex", 8)) = {"eps"};
   endif
 
   match = strcmpi (dev_list, arg_st.devopt);
   if (any (match))
     default_suffix = suffixes {match};
   else
@@ -317,17 +317,17 @@ function arg_st = __print_parse_opts__ (
       [arg_st.ghostscript.papersize, paperposition] = ...
                            gs_papersize (arg_st.figure, arg_st.orientation);
     else
       ## allows tests to be run
       arg_st.ghostscript.papersize = "letter";
       paperposition = [0.25, 2.50, 8.00, 6.00] * 72;
     endif
     arg_st.canvas_size = paperposition(3:4);
-    if (strcmp (__backend__, "gnuplot") && ! arg_st.ghostscript.epscrop)
+    if (strcmp (__graphics_toolkit__, "gnuplot") && ! arg_st.ghostscript.epscrop)
       arg_st.ghostscript.pageoffset = paperposition(1:2) - 50;
     else
       arg_st.ghostscript.pageoffset = paperposition(1:2);
     endif
   else
     ## Convert canvas size to points from pixles.
     arg_st.canvas_size = arg_st.canvas_size * 72 / arg_st.ghostscript.resolution;
     arg_st.ghostscript.papersize = arg_st.canvas_size;
@@ -589,17 +589,17 @@ function device_list = gs_device_list ()
                  "tiffgray"; "tifflzw"; "tiffpack"; "tiffsep"};
 endfunction
 
 function aliases = gs_aliases ();
   ## Aliases for other devices: "bmp", "png", "tiff", "tiffn", "pdf",
   ##                            "ps", "ps2", "psc", "psc2"
   ##
   ## eps, epsc, eps2, epsc2 are not included here because those are 
-  ## are generated by the backend.
+  ## are generated by the graphics toolkit.
   aliases.bmp = "bmp32b";
   aliases.pdf = "pdfwrite";
   aliases.png = "png16m";
   aliases.ps = "pswrite";
   aliases.ps2 = "ps2write";
   aliases.psc = "pswrite";
   aliases.psc2 = "ps2write";
   aliases.tiff = "tiff24nc";
diff --git a/scripts/plot/axis.m b/scripts/plot/axis.m
--- a/scripts/plot/axis.m
+++ b/scripts/plot/axis.m
@@ -176,17 +176,17 @@ function curr_axis = __axis__ (ca, ax, v
 
       ## aspect ratio
     elseif (strcmpi (ax, "image"))
       __axis__ (ca, "equal")
       __do_tight_option__ (ca);
     elseif (strcmpi (ax, "square"))
       set (ca, "plotboxaspectratio", [1, 1, 1]);
     elseif  (strcmp (ax, "equal"))
-      if (strcmp (get (get (ca, "parent"), "__backend__"), "gnuplot"))
+      if (strcmp (get (get (ca, "parent"), "__grahpics_toolkit__"), "gnuplot"))
         ## FIXME - gnuplot applies the aspect ratio activepostionproperty.
         set (ca, "activepositionproperty", "position");
         ## The following line is a trick used to trigger the recalculation of 
         ## aspect related magnitudes even if the aspect ratio is the same
         ## (useful with the x11 gnuplot terminal after a window resize)
         set (ca, "dataaspectratiomode", "auto");
       endif
       set (ca, "dataaspectratio", [1, 1, 1])
diff --git a/scripts/plot/colorbar.m b/scripts/plot/colorbar.m
--- a/scripts/plot/colorbar.m
+++ b/scripts/plot/colorbar.m
@@ -102,18 +102,18 @@ function h = colorbar (varargin)
       delete (cax);
     endif
   unwind_protect_cleanup
     set (0, "showhiddenhandles", showhiddenhandles)
   end_unwind_protect
 
   if (! deleting)
     ## FIXME - Matlab does not require the "position" property to be active.
-    ##         Is there a way to determine the plotbox position for the gnuplot
-    ##         backend with the outerposition is active?
+    ##         Is there a way to determine the plotbox position for the
+    ##         gnuplot graphics toolkit with the outerposition is active?
     set (ax, "activepositionproperty", "position");
     obj = get (ax);
     obj.__my_handle__ = ax;
     position = obj.position;
     clen = rows (get (get (ax, "parent"), "colormap"));
     cext = get (ax, "clim");
     cdiff = (cext(2) - cext(1)) / clen / 2;
     cmin = cext(1) + cdiff;
@@ -269,17 +269,17 @@ function [pos, cpos, vertical, mirr] = _
     else
       scale = 0.8;
     endif
     if (isempty (strfind (cbox, "east")) && isempty (strfind (cbox, "west")))
       scale = [1, scale];
     else
       scale = [scale, 1];
     endif
-    if (strcmp (get (cf, "__backend__"), "gnuplot")
+    if (strcmp (get (cf, "__graphics_toolkit__"), "gnuplot")
         && strcmp (obj.activepositionproperty, "outerposition"))
       obj.outerposition = obj.outerposition .* [1, 1, scale];
       off = 0.5 * (obj.outerposition (3:4) - __actual_axis_position__ (obj)(3:4));
     else
       obj.position = obj.position .* [1, 1, scale];
       off = 0.5 * (obj.position (3:4) - __actual_axis_position__ (obj)(3:4));
     endif
   else
diff --git a/scripts/plot/ginput.m b/scripts/plot/ginput.m
--- a/scripts/plot/ginput.m
+++ b/scripts/plot/ginput.m
@@ -27,18 +27,18 @@
 function varargout = ginput (n)
 
   if (nargin > 1)
     print_usage ();
   endif
 
   f = gcf ();
   drawnow ();
-  backend = (get (f, "__backend__"));
+  toolkit = (get (f, "__graphics_toolkit__"));
 
   varargout = cell (1, nargout);
   if (nargin == 0)
-    [varargout{:}] = feval (strcat ("__", backend, "_ginput__"), f);
+    [varargout{:}] = feval (strcat ("__", toolkit, "_ginput__"), f);
   else
-    [varargout{:}] = feval (strcat ("__", backend, "_ginput__"), f, n);
+    [varargout{:}] = feval (strcat ("__", toolkit, "_ginput__"), f, n);
   endif
 
 endfunction
diff --git a/scripts/plot/gnuplot_drawnow.m b/scripts/plot/gnuplot_drawnow.m
--- a/scripts/plot/gnuplot_drawnow.m
+++ b/scripts/plot/gnuplot_drawnow.m
@@ -112,22 +112,23 @@ function gnuplot_drawnow (h, term, file,
   endif
 
 endfunction
 
 function enhanced = gnuplot_set_term (plot_stream, new_stream, h, term, file)
   ## Generate the gnuplot "set terminal <term> ..." command.
   ## When "term" originates from print.m, it may include other options.
   if (nargin < 4)
-    ## This supports the gnuplot backend.
+    ## This supports the gnuplot graphics toolkit.
     term = gnuplot_default_term ();
     opts_str = "";
   else
     ## Get the one word terminal id and save the remaining as options to
-    ## be passed on to gnuplot.  The terminal may respect the backend.
+    ## be passed on to gnuplot.  The terminal may respect the graphics
+    ## toolkit. 
     [term, opts_str] = gnuplot_trim_term (term);
     term = lower (term);
     if (strcmpi (term, "lua"))
       ## Replace "lau tikz" with 
       term = "tikz";
       opts_str = strrep (opts_str, "tikz", "");
     endif
   endif
@@ -144,17 +145,17 @@ function enhanced = gnuplot_set_term (pl
     if (enhanced)
       enh_str = "enhanced";
     else
       enh_str = "";
     endif
 
     if (! isempty (h) && isfigure (h))
 
-      ## Generate gnuplot title string for backend plot windows.
+      ## Generate gnuplot title string for plot windows.
       if (output_to_screen (term) && ~strcmp (term, "dumb"))
         fig.numbertitle = get (h, "numbertitle");
         fig.name = get (h, "name");
         if (strcmpi (get (h, "numbertitle"), "on"))
           title_str = sprintf ("Figure %d", h);
         else
           title_str = "";
         endif
diff --git a/scripts/plot/backend.m b/scripts/plot/graphics_toolkit.m
rename from scripts/plot/backend.m
rename to scripts/plot/graphics_toolkit.m
--- a/scripts/plot/backend.m
+++ b/scripts/plot/graphics_toolkit.m
@@ -12,59 +12,60 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn  {Function File} {} backend (@var{name})
-## @deftypefnx {Function File} {} backend (@var{hlist}, @var{name})
-## Change the default graphics backend to @var{name}.  If the backend is
-## not already loaded, it is first initialized (initialization is done
-## through the execution of @code{__init_@var{name}__}).
+## @deftypefn  {Function File} {} graphics_toolkit (@var{name})
+## @deftypefnx {Function File} {} graphics_toolkit (@var{hlist}, @var{name})
+## Change the default graphics graphics toolkit to @var{name}.  If the
+## toolkit is not already loaded, it is first initialized by calling the
+## function @code{__init_@var{name}__}.
 ##
-## When called with a list of figure handles, @var{hlist}, the backend is
-## changed only for the listed figures.
-## @seealso{available_backends}
+## When called with a list of figure handles, @var{hlist}, the graphics
+## toolkit is changed only for the listed figures.
+## @seealso{available_graphics_toolkits}
 ## @end deftypefn
 
-function backend (varargin)
+function graphics_toolkit (varargin)
 
   name = "";
   hlist = [];
 
   if (nargin == 1)
     if (ischar (varargin{1}))
       name = varargin{1};
     else
-      error ("backend: invalid backend NAME");
+      error ("graphics_toolkit: invalid graphics toolkit NAME");
     endif
   elseif (nargin == 2)
     if (isnumeric (varargin{1}) && ischar (varargin{2}))
       hlist = varargin{1};
       name = varargin{2};
     elseif (ischar (varargin{2}))
-      error ("backend: invalid handle list");
+      error ("graphics_toolkit: invalid handle list");
     else
-      error ("backend: invalid backend NAME");
+      error ("graphics_toolkit: invalid graphics toolkit NAME");
     endif
   else
     print_usage ();
   endif
 
-  if (! any (strcmp (available_backends (), name)))
+  if (! any (strcmp (available_graphics_toolkits (), name)))
     feval (["__init_", name, "__"]);
-    if (! any (strcmp (available_backends (), name)))
-      error ("backend: backend was not correctly registered");
+    if (! any (strcmp (available_graphics_toolkits (), name)))
+      error ("graphics_toolkit: %s toolkit was not correctly registered",
+             name);
     endif
   endif
 
   if (isempty (hlist))
-    set (0, "defaultfigure__backend__", name);
+    set (0, "defaultfigure__graphics_toolkit__", name);
   else
     for h = hlist(:)'
-      set (h, "__backend__", name);
+      set (h, "__graphics_toolkit__", name);
     endfor
   endif
 
 endfunction
diff --git a/scripts/plot/module.mk b/scripts/plot/module.mk
--- a/scripts/plot/module.mk
+++ b/scripts/plot/module.mk
@@ -47,17 +47,17 @@ plot_FCN_FILES = \
   plot/__next_line_color__.m \
   plot/__next_line_style__.m \
   plot/__plt_get_axis_arg__.m \
   plot/allchild.m \
   plot/ancestor.m \
   plot/area.m \
   plot/axes.m \
   plot/axis.m \
-  plot/backend.m \
+  plot/graphics_toolkit.m \
   plot/bar.m \
   plot/barh.m \
   plot/box.m \
   plot/caxis.m \
   plot/cla.m \
   plot/clabel.m \
   plot/clf.m \
   plot/close.m \
diff --git a/scripts/plot/print.m b/scripts/plot/print.m
--- a/scripts/plot/print.m
+++ b/scripts/plot/print.m
@@ -64,38 +64,38 @@
 ##
 ## @item -d@var{device}
 ##   Output device, where @var{device} is one of:
 ##   @table @code
 ##   @item ps
 ##   @itemx ps2
 ##   @itemx psc
 ##   @itemx psc2
-##     Postscript (level 1 and 2, mono and color).  The FLTK backend
-## generates Postscript level 3.0.
+##     Postscript (level 1 and 2, mono and color).  The FLTK graphics
+##     toolkit generates Postscript level 3.0.
 ##
 ##   @item eps
 ##   @itemx eps2
 ##   @itemx epsc
 ##   @itemx epsc2
 ##     Encapsulated postscript (level 1 and 2, mono and color).  The FLTK
-## backend generates Postscript level 3.0.
+## graphic toolkit generates Postscript level 3.0.
 ##
 ##   @item tex
 ##   @itemx epslatex
 ##   @itemx epslatexstandalone
 ##   @itemx pstex
 ##   @itemx pslatex
 ##   @itemx pdflatex
 ##     Generate a @LaTeX{} (or @TeX{}) file for labels, and eps/ps/pdf
 ## for graphics.  The file produced by @code{epslatexstandalone} can be
 ## processed directly by @LaTeX{}.  The other formats are intended to
 ## be included in a @LaTeX{} (or @TeX{}) document.  The @code{tex} device
 ## is the same as the @code{epslatex} device.  The @code{pdflatex} device
-## is only available for the FLTK backend.
+## is only available for the FLTK graphics toolkit.
 ##
 ##   @item tikz
 ##     Generate a @LaTeX{} file using PGF/TikZ@.  For the FLTK the result is
 ##   PGF.
 ##
 ##   @item ill
 ##   @itemx aifm
 ##     Adobe Illustrator (Obsolete for Gnuplot versions > 4.2)
@@ -107,17 +107,17 @@
 ##   @item dxf
 ##     AutoCAD
 ##
 ##   @item emf
 ##   @itemx meta
 ##     Microsoft Enhanced Metafile
 ##
 ##   @item fig
-##     XFig.  For the Gnuplot backend, the additional options
+##     XFig.  For the Gnuplot graphics toolkit, the additional options
 ##     @option{-textspecial} or @option{-textnormal} can be used to control
 ##     whether the special flag should be set for the text in
 ##     the figure (default is @option{-textnormal}). 
 ##
 ##   @item hpgl
 ##     HP plotter language
 ##
 ##   @item mf
@@ -126,17 +126,17 @@
 ##   @item png
 ##     Portable network graphics
 ##
 ##   @item jpg
 ##   @itemx jpeg
 ##     JPEG image
 ##
 ##   @item gif
-##     GIF image (only available for the Gnuplot backend)
+##     GIF image (only available for the Gnuplot graphics toolkit)
 ##
 ##   @item pbm
 ##     PBMplus
 ##
 ##   @item svg
 ##     Scalable vector graphics
 ##
 ##   @item pdf
@@ -278,17 +278,17 @@ function print (varargin)
     copyfile (opts.ghostscript.output, opts.ghostscript.prepend);
   endif
 
   unwind_protect
 
     ## Modify properties as specified by options
     props = [];
 
-    ## backend tranlates figure position to eps bbox in points
+    ## graphics toolkit tranlates figure position to eps bbox in points
     fpos = get (opts.figure, "position");
     props(1).h = opts.figure;
     props(1).name = "position";
     props(1).value = {fpos};
     fpos(3:4) = opts.canvas_size;
     set (opts.figure, "position", fpos)
 
     ## Set figure background to none. This is done both for
@@ -311,17 +311,17 @@ function print (varargin)
         linestyle = "-";
       else
         linestyle = "--";
       endif
       set (h, "linestyle", linestyle)
     endif
 
     if (opts.use_color < 0
-        && ! strcmp (get (opts.figure, "__backend__"), "gnuplot"))
+        && ! strcmp (get (opts.figure, "__graphics_toolkit__"), "gnuplot"))
       color_props = {"color", "facecolor", "edgecolor", "colormap"};
       for c = 1:numel(color_props)
         h = findall (opts.figure, "-property", color_props{c});
         hnone = findall (opts.figure, color_props{c}, "none");
         h = setdiff (h, hnone);
         m = numel (props);
         for n = 1:numel(h)
           if (ishandle (h(n)))
@@ -369,18 +369,18 @@ function print (varargin)
           fontsize = str2double (opts.fontsize);
         else
           fontsize = opts.fontsize;
         endif
         set (h(ishandle(h)), "fontsize", fontsize)
       endif
     endif
 
-    ## call the backend print script
-    switch (get (opts.figure, "__backend__"))
+    ## call the graphcis toolkit print script
+    switch (get (opts.figure, "__graphics_toolkit__"))
     case "gnuplot"
       opts = __gnuplot_print__ (opts);
     otherwise
       opts = __fltk_print__ (opts);
     endswitch
 
   unwind_protect_cleanup
     ## restore modified properties
diff --git a/scripts/plot/private/__actual_axis_position__.m b/scripts/plot/private/__actual_axis_position__.m
--- a/scripts/plot/private/__actual_axis_position__.m
+++ b/scripts/plot/private/__actual_axis_position__.m
@@ -39,17 +39,17 @@ function pos = __actual_axis_position__ 
   unwind_protect
     set (axis_obj.parent, "units", "pixels")
     fig_position = get (axis_obj.parent, "position");
   unwind_protect_cleanup
     set (axis_obj.parent, "units", orig_fig_units)
     set (axis_obj.parent, "position", orig_fig_position)
   end_unwind_protect
   ## Get axes size in pixels
-  if (strcmp (get (axis_obj.parent, "__backend__"), "gnuplot")
+  if (strcmp (get (axis_obj.parent, "__graphics_toolkit__"), "gnuplot")
       && strcmp (axis_obj.activepositionproperty, "outerposition"))
     pos_in_pixels = axis_obj.outerposition .* fig_position([3, 4, 3, 4]);
   else
     pos_in_pixels = axis_obj.position .* fig_position([3, 4, 3, 4]);
   endif
     
   nd = __calc_dimensions__ (h);
 
@@ -71,16 +71,16 @@ function pos = __actual_axis_position__ 
     if (rel_aspect_ratio_2d(1) < rel_aspect_ratio_2d(2));
       dx = (1.0 - rel_aspect_ratio_2d(1)) * pos_in_pixels(3);
       pos_in_pixels = pos_in_pixels + dx*[0.5, 0.0, -1.0, 0.0];
     elseif (rel_aspect_ratio_2d(1) > rel_aspect_ratio_2d(2))
       dy = (1.0 - rel_aspect_ratio_2d(2)) * pos_in_pixels(4);
       pos_in_pixels = pos_in_pixels + dy*[0.0, 0.5, 0.0, -1.0];
     endif
     pos = pos_in_pixels ./ fig_position([3, 4, 3, 4]);
-  elseif (strcmp (get (axis_obj.parent, "__backend__"), "gnuplot")
+  elseif (strcmp (get (axis_obj.parent, "__graphics_toolkit__"), "gnuplot")
           && strcmp (axis_obj.activepositionproperty, "outerposition"))
     pos = axis_obj.outerposition;
   else
     pos = axis_obj.position;
   endif
 endfunction
 
diff --git a/scripts/plot/subplot.m b/scripts/plot/subplot.m
--- a/scripts/plot/subplot.m
+++ b/scripts/plot/subplot.m
@@ -163,17 +163,17 @@ function h = subplot (rows, cols, index,
       set (cf, "currentaxes", tmp);
     else
       pos = subplot_position (rows, cols, index, "outerposition", units);
       pos2 = subplot_position (rows, cols, index, "position", units);
       tmp = axes ("outerposition", pos, "position", pos2,
                   "activepositionproperty", "outerposition");
     endif
 
-    if (align_axes && strcmp (get (cf, "__backend__"), "gnuplot"))
+    if (align_axes && strcmp (get (cf, "__graphics_toolkit__"), "gnuplot"))
       set (tmp, "activepositionproperty", "position");
     endif
 
   unwind_protect_cleanup
     set (0, "defaultaxesunits", units);
   end_unwind_protect
 
   if (nargout > 0)
diff --git a/scripts/plot/uigetdir.m b/scripts/plot/uigetdir.m
--- a/scripts/plot/uigetdir.m
+++ b/scripts/plot/uigetdir.m
@@ -33,22 +33,22 @@ function dirname = uigetdir (init_path =
     print_usage ();
   endif
 
   if (!ischar(init_path) || !ischar(name))
     error ("uigetdir: INIT_PATH and DIALOG_NAME must be string arguments");
   endif
   
 
-  if (any (strcmp (available_backends(), "fltk")))
+  if (any (strcmp (available_graphics_toolkits (), "fltk")))
       if (!isdir (init_path))
         init_path = fileparts (init_path);
       endif
       dirname = __fltk_uigetfile__ ("", dialog_name, init_path, [240, 120], "dir");
   else
-    error ("uigetdir: fltk backend required.");
+    error ("uigetdir: fltk graphics toolkit required");
   endif
 
 endfunction
 
 
 %!demo 
 %! uigetdir(pwd, "Select Directory")
diff --git a/scripts/plot/uigetfile.m b/scripts/plot/uigetfile.m
--- a/scripts/plot/uigetfile.m
+++ b/scripts/plot/uigetfile.m
@@ -145,19 +145,19 @@ function [retfile, retpath, retindex] = 
           error ("uigetfile: unknown argument");
         endif
       endfor
     endif
   else
     error ("uigetfile: number of input arguments must be less than eight");
   endif
 
-  if (any (cellfun(@(x)strcmp (x, "fltk"), available_backends)))
+  if (any (cellfun(@(x)strcmp (x, "fltk"), available_graphics_toolkits ())))
     [retfile, retpath, retindex] = __fltk_uigetfile__ (outargs{:});  
   else
-    error ("uigetfile: fltk backend required.");
+    error ("uigetfile: fltk graphics toolkit required.");
   endif
 
          
 endfunction
 
 %!demo 
 %! uigetfile({"*.gif;*.png;*.jpg", "Supported Picture Formats"})
diff --git a/scripts/plot/uiputfile.m b/scripts/plot/uiputfile.m
--- a/scripts/plot/uiputfile.m
+++ b/scripts/plot/uiputfile.m
@@ -84,18 +84,18 @@ function [retfile, retpath, retindex] = 
     if (nargin > 2)
       outargs{3} = varargin{3};
     endif
 
   else
     error ("uiputfile: number of input arguments must be less than four.");
   endif
 
-  if (any (cellfun(@(x)strcmp (x, "fltk"), available_backends)))
+  if (any (cellfun(@(x)strcmp (x, "fltk"), available_graphics_toolkits ())))
     [retfile, retpath, retindex] = __fltk_uigetfile__ (outargs{:});  
   else
-    error ("uiputfile: fltk backend required.");
+    error ("uiputfile: fltk graphics toolkit required");
   endif
 
 endfunction
 
 %!demo 
 %! uiputfile({"*.gif;*.png;*.jpg", "Supported Picture Formats"})
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,17 @@
+2011-01-20  John W. Eaton  <jwe@octave.org>
+
+	* gl-render.h, graphics.cc, gl-render.cc, graphics.h.in:
+	Update for backend -> graphics_toolkit change.
+
+	* DLD-FUNCTIONS/__init_fltk__.cc: Rename from fltk_backend.cc
+	Update for backend -> graphics_toolkit change.
+	* DLD-FUNCTIONS/module-files, Makefile.am: Update for renamed file.
+
 2011-01-19  Rik  <octave@nomad.inbox5.com>
 
 	* src/data.cc, src/input.cc, src/utils.cc: spellcheck docstrings.
 
 2011-01-19  Rik  <octave@nomad.inbox5.com>
 
 	* DLD-FUNCTIONS/dlmread.cc, DLD-FUNCTIONS/filter.cc,
 	DLD-FUNCTIONS/inv.cc, DLD-FUNCTIONS/lu.cc, DLD-FUNCTIONS/quad.cc,
diff --git a/src/DLD-FUNCTIONS/fltk_backend.cc b/src/DLD-FUNCTIONS/__init_fltk__.cc
rename from src/DLD-FUNCTIONS/fltk_backend.cc
rename to src/DLD-FUNCTIONS/__init_fltk__.cc
--- a/src/DLD-FUNCTIONS/fltk_backend.cc
+++ b/src/DLD-FUNCTIONS/__init_fltk__.cc
@@ -19,17 +19,17 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 /*
 
 To initialize:
 
-  backend ("fltk");
+  graphics_toolkit ("fltk");
   plot (randn (1e3, 1));
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
@@ -61,17 +61,17 @@ To initialize:
 #include "error.h"
 #include "gl-render.h"
 #include "gl2ps-renderer.h"
 #include "graphics.h"
 #include "parse.h"
 #include "toplev.h"
 #include "variables.h"
 
-#define FLTK_BACKEND_NAME "fltk"
+#define FLTK_GRAPHICS_TOOLKIT_NAME "fltk"
 
 // Give FLTK no more than 0.01 sec to do its stuff.
 static double fltk_maxtime = 1e-2;
 
 const char* help_text = "\
 Keyboard Shortcuts\n\
 a - autoscale\n\
 p - pan/zoom\n\
@@ -1656,107 +1656,108 @@ private:
   {
     int ind;
     if (clstr.find (fltk_idx_header,0) == 0)
       {
         std::istringstream istr (clstr.substr (fltk_idx_header.size ()));
         if (istr >> ind)
           return ind;
       }
-    error ("fltk_backend: could not recognize fltk index");
+    error ("figure_manager: could not recognize fltk index");
     return -1;
   }
 
   void idx2figprops (int idx, figure::properties& fp)
   {
     std::ostringstream ind_str;
     ind_str << fltk_idx_header << idx;
     fp.set___plot_stream__ (ind_str.str ());
   }
 
   static int figprops2idx (const figure::properties& fp)
   {
-    if (fp.get___backend__ () == FLTK_BACKEND_NAME)
+    if (fp.get___graphics_toolkit__ () == FLTK_GRAPHICS_TOOLKIT_NAME)
       {
         octave_value ps = fp.get___plot_stream__ ();
         if (ps.is_string ())
           return str2idx (ps.string_value ());
         else
           return 0;
       }
-    error ("fltk_backend:: figure is not fltk");
+    error ("figure_manager: figure is not fltk");
     return -1;
   }
 
   static int hnd2idx (const double h)
   {
     graphics_object fobj = gh_manager::get_object (h);
     if (fobj &&  fobj.isa ("figure"))
       {
         figure::properties& fp =
           dynamic_cast<figure::properties&> (fobj.get_properties ());
         return figprops2idx (fp);
       }
-    error ("fltk_backend:: H is not a figure");
+    error ("figure_manager: H is not a figure");
     return -1;
   }
 
   static int hnd2idx (const graphics_handle& fh)
   {
     return hnd2idx (fh.value ());
   }
 };
 
 figure_manager *figure_manager::instance = 0;
 
 std::string figure_manager::fltk_idx_header="fltk index=";
 int figure_manager::curr_index = 1;
 
-static bool backend_registered = false;
+static bool toolkit_registered = false;
 
 static int
 __fltk_redraw__ (void)
 {
-  if (backend_registered)
+  if (toolkit_registered)
     {
-      // we scan all figures and add those which use FLTK as a backend
+      // We scan all figures and add those which use FLTK.
       graphics_object obj = gh_manager::get_object (0);
       if (obj && obj.isa ("root"))
         {
           base_properties& props = obj.get_properties ();
           Matrix children = props.get_all_children ();
 
           for (octave_idx_type n = 0; n < children.numel (); n++)
             {
               graphics_object fobj = gh_manager::get_object (children (n));
               if (fobj && fobj.isa ("figure"))
                 {
                   figure::properties& fp =
                       dynamic_cast<figure::properties&> (fobj.get_properties ());
-                  if (fp.get___backend__ () == FLTK_BACKEND_NAME)
+                  if (fp.get___graphics_toolkit__ ()
+                      == FLTK_GRAPHICS_TOOLKIT_NAME)
                     figure_manager::new_window (fp);
                 }
             }
         }
 
       // it seems that we have to call Fl::check twice to get everything drawn
       Fl::check ();
       Fl::check ();
     }
 
   return 0;
 }
 
-class fltk_backend : public base_graphics_backend
+class fltk_graphics_toolkit : public base_graphics_toolkit
 {
 public:
-  fltk_backend (void)
-    : base_graphics_backend (FLTK_BACKEND_NAME) { }
+  fltk_graphics_toolkit (void)
+    : base_graphics_toolkit (FLTK_GRAPHICS_TOOLKIT_NAME) { }
 
-  ~fltk_backend (void) { }
+  ~fltk_graphics_toolkit (void) { }
 
   bool is_valid (void) const { return true; }
 
   void finalize (const graphics_object& go)
   {
     if (go.isa ("figure"))
       {
         octave_value ov = go.get (caseless_str ("__plot_stream__"));
@@ -1841,17 +1842,17 @@ public:
     int fid;
     std::istringstream istr (file);
     if (istr >> fid)
       {
         figure_manager::print (go.get_handle (), fid, term);
         redraw_figure (go);
       }
     else
-      error ("fltk_backend: filename should be fid");
+      error ("fltk_graphics_toolkit: filename should be fid");
   }
 
   Matrix get_canvas_size (const graphics_handle& fh) const
   {
     return figure_manager::get_size (fh);
   }
 
   double get_screen_resolution (void) const
@@ -1864,35 +1865,28 @@ public:
   {
     Matrix sz (1, 2, 0.0);
     sz(0) = Fl::w ();
     sz(1) = Fl::h ();
     return sz;
   }
 };
 
-DEFUN_DLD (__fltk_redraw__, , , "")
-{
-  __fltk_redraw__ ();
-
-  return octave_value ();
-}
-
-// Initialize the fltk backend.
+// Initialize the fltk graphics toolkit.
 
 DEFUN_DLD (__init_fltk__, , , "")
 {
   static bool remove_fltk_registered = false;
 
-  if (! backend_registered)
+  if (! toolkit_registered)
     {
       mlock ();
 
-      graphics_backend::register_backend (new fltk_backend);
-      backend_registered = true;
+      graphics_toolkit::register_toolkit (new fltk_graphics_toolkit);
+      toolkit_registered = true;
       
       octave_value_list args;
       args(0) = "__fltk_redraw__";
       feval ("add_input_event_hook", args, 0);
 
       if (! remove_fltk_registered)
         {
           octave_add_atexit_function ("__remove_fltk__");
@@ -1900,28 +1894,34 @@ DEFUN_DLD (__init_fltk__, , , "")
           remove_fltk_registered = true;
         }
     }
 
   octave_value retval;
   return retval;
 }
 
+DEFUN_DLD (__fltk_redraw__, , , "")
+{
+  __fltk_redraw__ ();
 
-// Delete the fltk backend.
+  return octave_value ();
+}
+
+// Delete the fltk graphics toolkit.
 
 DEFUN_DLD (__remove_fltk__, , , "")
 {
-  if (backend_registered)
+  if (toolkit_registered)
     {
       munlock ("__init_fltk__");
 
       figure_manager::close_all ();
-      graphics_backend::unregister_backend (FLTK_BACKEND_NAME);
-      backend_registered = false;
+      graphics_toolkit::unregister_toolkit (FLTK_GRAPHICS_TOOLKIT_NAME);
+      toolkit_registered = false;
 
       octave_value_list args;
       args(0) = "__fltk_redraw__";
       feval ("remove_input_event_hook", args, 0);
 
       // FIXME ???
       Fl::wait (fltk_maxtime);
     }
@@ -1944,17 +1944,17 @@ DEFUN_DLD (__fltk_maxtime__, args, ,"")
 
   return retval;
 }
 
 DEFUN_DLD (fltk_mouse_wheel_zoom, args, ,
   "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{speed} =} fltk_mouse_wheel_zoom ()\n\
 @deftypefnx {Built-in Function} {} fltk_mouse_wheel_zoom (@var{speed})\n\
-Query or set the mouse wheel zoom factor in the fltk backend.\n\
+Query or set the mouse wheel zoom factor in the fltk graphics toolkit.\n\
 @end deftypefn")
 {
   octave_value retval = wheel_zoom_speed;
 
   if (args.length () == 1)
     {
       if (args(0).is_real_scalar ())
         wheel_zoom_speed = args(0).double_value ();
@@ -1964,17 +1964,17 @@ Query or set the mouse wheel zoom factor
 
   return retval;
 }
 
 DEFUN_DLD (fltk_gui_mode, args, ,
   "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{mode} =} fltk_gui_mode ()\n\
 @deftypefnx {Built-in Function} {} fltk_gui_mode (@var{mode})\n\
-Query or set the GUI mode for the fltk backend.\n\
+Query or set the GUI mode for the fltk grahpics toolkit.\n\
 The @var{mode} argument can be one of the following strings:\n\
 @table @asis\n\
 @item '2d'\n\
 Allows panning and zooming of current axes.\n\
 \n\
 @item '3d'\n\
 Allows rotating and zooming of current axes.\n\
 \n\
diff --git a/src/DLD-FUNCTIONS/module-files b/src/DLD-FUNCTIONS/module-files
--- a/src/DLD-FUNCTIONS/module-files
+++ b/src/DLD-FUNCTIONS/module-files
@@ -1,13 +1,14 @@
 __contourc__.cc
 __delaunayn__.cc
 __dispatch__.cc
 __dsearchn__.cc
 __glpk__.cc
+__init_fltk__.cc
 __lin_interpn__.cc
 __magick_read__.cc
 __pchip_deriv__.cc
 __qp__.cc
 __voronoi__.cc
 amd.cc
 balance.cc
 besselj.cc
@@ -19,28 +20,27 @@ chol.cc
 colamd.cc
 colloc.cc
 conv2.cc
 convhulln.cc
 daspk.cc
 dasrt.cc
 dassl.cc
 det.cc
-dot.cc
 dlmread.cc
 dmperm.cc
+dot.cc
 eig.cc
 eigs.cc
 fft.cc
 fft2.cc
 fftn.cc
 fftw.cc
 filter.cc
 find.cc
-fltk_backend.cc
 gammainc.cc
 gcd.cc
 getgrent.cc
 getpwent.cc
 getrusage.cc
 givens.cc
 hess.cc
 hex2num.cc
diff --git a/src/Makefile.am b/src/Makefile.am
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -613,17 +613,17 @@ MAINTAINERCLEANFILES = \
 
 octave_LDADD = $(OCTAVE_LIBS)
 
 all-local: $(OCT_FILES) DLD-FUNCTIONS/PKG_ADD .DOCSTRINGS
 
 lex.lo lex.o oct-parse.lo oct-parse.o: \
   AM_CXXFLAGS := $(filter-out -Wold-style-cast, $(AM_CXXFLAGS))
 
-fltk_backend.lo fltk_backend.o: \
+__init_fltk__.lo __init_fltk__.o: \
   AM_CXXFLAGS := $(filter-out $(DLL_CXXDEFS), $(AM_CXXFLAGS) $(GRAPHICS_CFLAGS))
 
 # XERBLA = ../libcruft/blas-xtra/xerbla.o
 
 builtins.cc: $(DEF_FILES) mkbuiltins
 	$(srcdir)/mkbuiltins $(DEF_FILES) > $@-t
 	mv $@-t $@
 
@@ -813,19 +813,19 @@ DLD_FUNCTIONS_regexp_la_LIBADD += $(REGE
 DLD-FUNCTIONS/urlwrite.df: CPPFLAGS += $(CURL_CPPFLAGS)
 DLD_FUNCTIONS_urlwrite_la_CPPFLAGS = $(AM_CPPFLAGS) $(CURL_CPPFLAGS)
 DLD_FUNCTIONS_urlwrite_la_LIBADD += $(CURL_LDFLAGS) $(CURL_LIBS)
 
 DLD-FUNCTIONS/__glpk__.df: CPPFLAGS += $(GLPK_CPPFLAGS)
 DLD_FUNCTIONS___glpk___la_CPPFLAGS = $(AM_CPPFLAGS) $(GLPK_CPPFLAGS)
 DLD_FUNCTIONS___glpk___la_LIBADD += $(GLPK_LDFLAGS) $(GLPK_LIBS)
 
-DLD-FUNCTIONS/fltk_backend.df: CPPFLAGS += $(GRAPHICS_CFLAGS) $(FT2_CPPFLAGS)
-DLD_FUNCTIONS_fltk_backend_la_CPPFLAGS = $(AM_CPPFLAGS) $(GRAPHICS_CFLAGS) $(FT2_CPPFLAGS)
-DLD_FUNCTIONS_fltk_backend_la_LIBADD += $(GRAPHICS_LDFLAGS) $(GRAPHICS_LIBS) $(FT2_LDFLAGS) $(FT2_LIBS)
+DLD-FUNCTIONS/__init_fltk__.df: CPPFLAGS += $(GRAPHICS_CFLAGS) $(FT2_CPPFLAGS)
+DLD_FUNCTIONS___init_fltk___la_CPPFLAGS = $(AM_CPPFLAGS) $(GRAPHICS_CFLAGS) $(FT2_CPPFLAGS)
+DLD_FUNCTIONS___init_fltk___la_LIBADD += $(GRAPHICS_LDFLAGS) $(GRAPHICS_LIBS) $(FT2_LDFLAGS) $(FT2_LIBS)
 
 DLD-FUNCTIONS/amd.df: CPPFLAGS += $(SPARSE_XCPPFLAGS)
 DLD_FUNCTIONS_amd_la_CPPFLAGS = $(AM_CPPFLAGS) $(SPARSE_XCPPFLAGS)
 DLD_FUNCTIONS_amd_la_LIBADD += $(SPARSE_XLDFLAGS) $(SPARSE_XLIBS)
 
 DLD-FUNCTIONS/colamd.df: CPPFLAGS += $(SPARSE_XCPPFLAGS)
 DLD_FUNCTIONS_colamd_la_CPPFLAGS = $(AM_CPPFLAGS) $(SPARSE_XCPPFLAGS)
 DLD_FUNCTIONS_colamd_la_LIBADD += $(SPARSE_XLDFLAGS) $(SPARSE_XLIBS)
diff --git a/src/gl-render.cc b/src/gl-render.cc
--- a/src/gl-render.cc
+++ b/src/gl-render.cc
@@ -559,17 +559,17 @@ opengl_renderer::draw (const graphics_ob
   else
     warning ("opengl_renderer: cannot render object of type `%s'",
              props.graphics_object_name ().c_str ());
 }
 
 void
 opengl_renderer::draw_figure (const figure::properties& props)
 {
-  backend = props.get_backend ();
+  toolkit = props.get_toolkit ();
 
   // Initialize OpenGL context
 
   glEnable (GL_DEPTH_TEST);
   glDepthFunc (GL_LEQUAL);
   glBlendFunc (GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
   glAlphaFunc (GL_GREATER, 0.0f);
   glEnable (GL_NORMALIZE);
@@ -3240,17 +3240,17 @@ opengl_renderer::make_marker_list (const
                                    bool filled) const
 {
   char c = marker[0];
 
   if (filled && (c == '+' || c == 'x' || c == '*' || c == '.'))
     return 0;
 
   unsigned int ID = glGenLists (1);
-  double sz = size * backend.get_screen_resolution () / 72.0;
+  double sz = size * toolkit.get_screen_resolution () / 72.0;
 
   // constants for the * marker
   const double sqrt2d4 = 0.35355339059327;
   double tt = sz*sqrt2d4;
 
   glNewList (ID, GL_COMPILE);
 
   switch (marker[0])
diff --git a/src/gl-render.h b/src/gl-render.h
--- a/src/gl-render.h
+++ b/src/gl-render.h
@@ -132,18 +132,18 @@ private:
               | (z > zmax ? 1 : 0) << 5
               | (is_nan_or_inf (x, y, z) ? 0 : 1) << 6);
     }
 
   unsigned int make_marker_list (const std::string& m, double size,
                                  bool filled) const;
 
 private:
-  // the backend associated with the figure being rendered
-  graphics_backend backend;
+  // The graphics toolkit associated with the figure being rendered.
+  graphics_toolkit toolkit;
 
   // axes transformation data
   graphics_xform xform;
 
   // axis limits in model scaled coordinate
   double xmin, xmax;
   double ymin, ymax;
   double zmin, zmax;
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -760,25 +760,25 @@ make_graphics_object_from_type (const ca
 // ---------------------------------------------------------------------
 
 bool
 base_property::set (const octave_value& v, bool do_run )
 {
   if (do_set (v))
     {
 
-      // notify backend
+      // Notify graphics toolkit.
       if (id >= 0)
         {
           graphics_object go = gh_manager::get_object (parent);
           if (go)
             {
-              graphics_backend backend = go.get_backend();
-              if (backend)
-                backend.update (go, id);
+              graphics_toolkit toolkit = go.get_toolkit ();
+              if (toolkit)
+                toolkit.update (go, id);
             }
         }
 
       // run listeners
       if (do_run && ! error_state)
         run_listeners (POSTSET);
 
       return true;
@@ -1866,24 +1866,24 @@ gh_manager::do_free (const graphics_hand
               bp.set_beingdeleted (true);
 
               bp.delete_children ();
 
               octave_value val = bp.get_deletefcn ();
 
               bp.execute_deletefcn ();
 
-              // notify backend
-              graphics_backend backend = p->second.get_backend ();
-              if (backend)
-                backend.finalize (p->second);
+              // Notify graphics toolkit.
+              graphics_toolkit toolkit = p->second.get_toolkit ();
+              if (toolkit)
+                toolkit.finalize (p->second);
 
               // Note: this will be valid only for first explicitly 
               // deleted object.  All its children will then have an
-              // unknown backend.
+              // unknown graphics toolkit.
 
               // Graphics handles for non-figure objects are negative
               // integers plus some random fractional part.  To avoid
               // running out of integers, we recycle the integer part
               // but tack on a new random part each time.
 
               handle_map.erase (p);
 
@@ -2046,33 +2046,33 @@ xcreatefcn (const graphics_handle& h)
 {
   graphics_object obj = gh_manager::get_object (h);
   obj.get_properties ().execute_createfcn  ();
 }
 
 // ---------------------------------------------------------------------
 
 void
-base_graphics_backend::update (const graphics_handle& h, int id)
+base_graphics_toolkit::update (const graphics_handle& h, int id)
 {
   graphics_object go = gh_manager::get_object (h);
 
   update (go, id);
 }
 
 void
-base_graphics_backend::initialize (const graphics_handle& h)
+base_graphics_toolkit::initialize (const graphics_handle& h)
 {
   graphics_object go = gh_manager::get_object (h);
 
   initialize (go);
 }
 
 void
-base_graphics_backend::finalize (const graphics_handle& h)
+base_graphics_toolkit::finalize (const graphics_handle& h)
 {
   graphics_object go = gh_manager::get_object (h);
 
   finalize (go);
 }
 // ---------------------------------------------------------------------
 
 void
@@ -2239,25 +2239,25 @@ base_properties::update_axis_limits (con
                                      const graphics_handle& h) const
 {
   graphics_object obj = gh_manager::get_object (__myhandle__);
 
   if (obj)
     obj.update_axis_limits (axis_type, h);
 }
 
-graphics_backend
-base_properties::get_backend (void) const
+graphics_toolkit
+base_properties::get_toolkit (void) const
 {
   graphics_object go = gh_manager::get_object (get_parent ());
 
   if (go)
-    return go.get_backend ();
+    return go.get_toolkit ();
   else
-    return graphics_backend ();
+    return graphics_toolkit ();
 }
 
 void
 base_properties::update_boundingbox (void)
 {
   Matrix kids = get_children ();
 
   for (int i = 0; i < kids.numel (); i++)
@@ -2286,23 +2286,23 @@ base_properties::delete_listener (const 
   property p = get_property (nm);
 
   if (! error_state && p.ok ())
     p.delete_listener (v, mode);
 }
 
 // ---------------------------------------------------------------------
 
-class gnuplot_backend : public base_graphics_backend
+class gnuplot_toolkit : public base_graphics_toolkit
 {
 public:
-  gnuplot_backend (void)
-      : base_graphics_backend ("gnuplot") { }
-
-  ~gnuplot_backend (void) { }
+  gnuplot_toolkit (void)
+      : base_graphics_toolkit ("gnuplot") { }
+
+  ~gnuplot_toolkit (void) { }
 
   bool is_valid (void) const { return true; }
 
   void finalize (const graphics_object& go)
     {
       if (go.isa ("figure"))
         {
           const figure::properties& props =
@@ -2397,26 +2397,26 @@ private:
                       feval ("waitpid", args);
                     }
                 }
             }
         }
     }
 };
 
-graphics_backend
-graphics_backend::default_backend (void)
-{
-  if (available_backends.size () == 0)
-    register_backend (new gnuplot_backend ());
-
-  return available_backends["gnuplot"];
-}
-
-std::map<std::string, graphics_backend> graphics_backend::available_backends;
+graphics_toolkit
+graphics_toolkit::default_toolkit (void)
+{
+  if (available_toolkits.size () == 0)
+    register_toolkit (new gnuplot_toolkit ());
+
+  return available_toolkits["gnuplot"];
+}
+
+std::map<std::string, graphics_toolkit> graphics_toolkit::available_toolkits;
 
 // ---------------------------------------------------------------------
 
 void
 base_graphics_object::update_axis_limits (const std::string& axis_type)
 {
   if (valid_object ())
     {
@@ -3811,17 +3811,17 @@ axes::properties::update_camera (void)
   double v_angle;
 
   if (cameraviewanglemode_is ("auto"))
     {
       double af;
 
       // FIXME -- was this really needed?  When compared to Matlab, it
       // does not seem to be required. Need investigation with concrete
-      // backend to see results visually.
+      // graphics toolkit to see results visually.
       if (false && dowarp)
         af = 1.0 / (xM > yM ? xM : yM);
       else
         {
           if ((bb(2)/bb(3)) > (xM/yM))
             af = 1.0 / yM;
           else
             af = 1.0 / xM;
@@ -5502,18 +5502,18 @@ base_graphics_object::get_factory_defaul
 // We use a random value for the handle to avoid issues with plots and
 // scalar values for the first argument.
 gh_manager::gh_manager (void)
   : handle_map (), handle_free_list (),
     next_handle (-1.0 - (rand () + 1.0) / (RAND_MAX + 2.0))
 {
   handle_map[0] = graphics_object (new root_figure ());
 
-  // Make sure the default backend is registered.
-  graphics_backend::default_backend ();
+  // Make sure the default graphics toolkit is registered.
+  graphics_toolkit::default_toolkit ();
 }
 
 graphics_handle
 gh_manager::do_make_graphics_handle (const std::string& go_name,
                                      const graphics_handle& p, bool do_createfcn)
 {
   graphics_handle h = get_handle (go_name);
 
@@ -5524,20 +5524,20 @@ gh_manager::do_make_graphics_handle (con
   if (go)
     {
       graphics_object obj (go);
 
       handle_map[h] = obj;
       if (do_createfcn)
         go->get_properties ().execute_createfcn ();
 
-      // notify backend
-      graphics_backend backend = go->get_backend ();
-      if (backend)
-        backend.initialize (obj);
+      // Notify graphics toolkit.
+      graphics_toolkit toolkit = go->get_toolkit ();
+      if (toolkit)
+        toolkit.initialize (obj);
     }
   else
     error ("gh_manager::do_make_graphics_handle: invalid object type `%s'",
            go_name.c_str ());
 
   return h;
 }
 
@@ -5546,20 +5546,20 @@ gh_manager::do_make_figure_handle (doubl
 {
   graphics_handle h = val;
 
   base_graphics_object* go = new figure (h, 0);
   graphics_object obj (go);
 
   handle_map[h] = obj;
 
-  // notify backend
-  graphics_backend backend = go->get_backend ();
-  if (backend)
-    backend.initialize (obj);
+  // Notify graphics toolkit.
+  graphics_toolkit toolkit = go->get_toolkit ();
+  if (toolkit)
+    toolkit.initialize (obj);
   
   return h;
 }
 
 void
 gh_manager::do_push_figure (const graphics_handle& h)
 {
   do_pop_figure (h);
@@ -6729,25 +6729,25 @@ Internal function: returns the pixel siz
         error ("__image_pixel_size__: argument is not a handle");
     }
   else
     print_usage ();
 
   return retval;
 }
 
-DEFUN (available_backends, , ,
+DEFUN (available_graphics_toolkits, , ,
    "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} {} available_backends ()\n\
-Return a cell array of registered graphics backends.\n\
+@deftypefn {Built-in Function} {} available_graphiscs_toolkits ()\n\
+Return a cell array of registered graphics toolkits.\n\
 @end deftypefn")
 {
   gh_manager::autolock guard;
 
-  return octave_value (graphics_backend::available_backends_list ());
+  return octave_value (graphics_toolkit::available_toolkits_list ());
 }
 
 DEFUN (drawnow, args, ,
    "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} drawnow ()\n\
 @deftypefnx {Built-in Function} {} drawnow (\"expose\")\n\
 @deftypefnx {Built-in Function} {} drawnow (@var{term}, @var{file}, @var{mono}, @var{debug_file})\n\
 Update figure windows and their children.  The event queue is flushed and\n\
@@ -6793,17 +6793,17 @@ undocumented.\n\
                   figure::properties& fprops = dynamic_cast <figure::properties&> (go.get_properties ());
 
                   if (fprops.is_modified ())
                     {
                       if (fprops.is_visible ())
                         {
                           gh_manager::unlock ();
 
-                          fprops.get_backend ().redraw_figure (go);
+                          fprops.get_toolkit ().redraw_figure (go);
 
                           gh_manager::lock ();
                         }
 
                       fprops.set_modified (false);
                     }
                 }
             }
@@ -6874,17 +6874,17 @@ undocumented.\n\
                           graphics_handle h = gcf ();
 
                           if (h.ok ())
                             {
                               graphics_object go = gh_manager::get_object (h);
 
                               gh_manager::unlock ();
 
-                              go.get_backend ()
+                              go.get_toolkit ()
                                 .print_figure (go, term, file, mono, debug_file);
 
                               gh_manager::lock ();
                             }
                           else
                             error ("drawnow: nothing to draw");
                         }
                       else
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -343,17 +343,17 @@ public:
   void set_hidden (bool flag) { hidden = flag; }
 
   virtual bool is_radio (void) const { return false; }
 
   int get_id (void) const { return id; }
 
   void set_id (int d) { id = d; }
 
-  // Sets property value, notifies backend.
+  // Sets property value, notifies graphics toolkit.
   // If do_run is true, runs associated listeners.
   bool set (const octave_value& v, bool do_run = true);
   
   virtual octave_value get (void) const
     {
       error ("get: invalid property \"%s\"", name.c_str ());
       return octave_value ();
     }
@@ -1759,29 +1759,29 @@ public:
   octave_scalar_map as_struct (const std::string& prefix_arg) const;
 
 private:
   plist_map_type plist_map;
 };
 
 // ---------------------------------------------------------------------
 
-class graphics_backend;
+class graphics_toolkit;
 class graphics_object;
 
-class base_graphics_backend
+class base_graphics_toolkit
 {
 public:
-  friend class graphics_backend;
+  friend class graphics_toolkit;
 
 public:
-  base_graphics_backend (const std::string& nm)
+  base_graphics_toolkit (const std::string& nm)
       : name (nm), count (0) { }
 
-  virtual ~base_graphics_backend (void) { }
+  virtual ~base_graphics_toolkit (void) { }
 
   std::string get_name (void) const { return name; }
 
   virtual bool is_valid (void) const { return false; }
 
   virtual void redraw_figure (const graphics_object&) const
     { gripe_invalid ("redraw_figure"); }
 
@@ -1804,79 +1804,79 @@ public:
   
   virtual Matrix get_screen_size (void) const
     {
       gripe_invalid ("get_screen_size");
       return Matrix (1, 2, 0.0);
     }
 
   // Callback function executed when the given graphics object
-  // changes.  This allows the grahpics backend to act on property
+  // changes.  This allows the grahpics toolkit to act on property
   // changes if needed.
   virtual void update (const graphics_object&, int)
-    { gripe_invalid ("base_graphics_backend::update"); }
+    { gripe_invalid ("base_graphics_toolkit::update"); }
 
   void update (const graphics_handle&, int);
   
   // Callback function executed when the given graphics object is
-  // created.  This allows the graphics backend to do backend-specific
+  // created.  This allows the graphics toolkit to do toolkit-specific
   // initializations for a newly created object.
   virtual void initialize (const graphics_object&)
-    { gripe_invalid ("base_graphics_backend::initialize"); }
+    { gripe_invalid ("base_graphics_toolkit::initialize"); }
 
   void initialize (const graphics_handle&);
 
   // Callback function executed just prior to deleting the given
-  // graphics object.  This allows the graphics backend to perform
-  // backend-specific cleanup operations before an object is deleted.
+  // graphics object.  This allows the graphics toolkit to perform
+  // toolkit-specific cleanup operations before an object is deleted.
   virtual void finalize (const graphics_object&)
-    { gripe_invalid ("base_graphics_backend::finalize"); }
+    { gripe_invalid ("base_graphics_toolkit::finalize"); }
 
   void finalize (const graphics_handle&);
 
 private:
   std::string name;
   int count;
 
 private:
   void gripe_invalid (const std::string& fname) const
     {
       if (! is_valid ())
-        error ("%s: invalid graphics backend", fname.c_str ());
+        error ("%s: invalid graphics toolkit", fname.c_str ());
     }
 };
 
-class graphics_backend
+class graphics_toolkit
 {
 public:
-  graphics_backend (void)
-      : rep (new base_graphics_backend ("unknown"))
+  graphics_toolkit (void)
+      : rep (new base_graphics_toolkit ("unknown"))
     {
       rep->count++;
     }
 
-  graphics_backend (base_graphics_backend* b)
+  graphics_toolkit (base_graphics_toolkit* b)
       : rep (b)
     {
       rep->count++;
     }
 
-  graphics_backend (const graphics_backend& b)
+  graphics_toolkit (const graphics_toolkit& b)
       : rep (b.rep)
     {
       rep->count++;
     }
 
-  ~graphics_backend (void)
+  ~graphics_toolkit (void)
     {
       if (--rep->count == 0)
         delete rep;
     }
 
-  graphics_backend& operator = (const graphics_backend& b)
+  graphics_toolkit& operator = (const graphics_toolkit& b)
     {
       if (rep != b.rep)
         {
           if (--rep->count == 0)
             delete rep;
 
           rep = b.rep;
           rep->count++;
@@ -1901,76 +1901,81 @@ public:
     { return rep->get_canvas_size (fh); }
 
   double get_screen_resolution (void) const
     { return rep->get_screen_resolution (); }
 
   Matrix get_screen_size (void) const
     { return rep->get_screen_size (); }
 
-  // Notifies backend that object't property has changed.
+  // Notifies graphics toolkit that object't property has changed.
   void update (const graphics_object& go, int id)
     { rep->update (go, id); }
   
   void update (const graphics_handle& h, int id)
     { rep->update (h, id); }
 
-  // Notifies backend that new object was created.
+  // Notifies graphics toolkit that new object was created.
   void initialize (const graphics_object& go)
     { rep->initialize (go); }
   
   void initialize (const graphics_handle& h)
     { rep->initialize (h); }
   
-  // Notifies backend that object was destroyed.
+  // Notifies graphics toolkit that object was destroyed.
   // This is called only for explicitly deleted object. Children are
-  // deleted implicitly and backend isn't notified.
+  // deleted implicitly and graphics toolkit isn't notified.
   void finalize (const graphics_object& go)
     { rep->finalize (go); }
   
   void finalize (const graphics_handle& h)
     { rep->finalize (h); }
   
-  OCTINTERP_API static graphics_backend default_backend (void);
-
-  static void register_backend (const graphics_backend& b)
-    { available_backends[b.get_name ()] = b; }
-
-  static void unregister_backend (const std::string& name)
-    { available_backends.erase (name); }
-
-  static graphics_backend find_backend (const std::string& name)
+  OCTINTERP_API static graphics_toolkit default_toolkit (void);
+
+  static void register_toolkit (const graphics_toolkit& b)
+    { available_toolkits[b.get_name ()] = b; }
+
+  static void unregister_toolkit (const std::string& name)
+    { available_toolkits.erase (name); }
+
+  static graphics_toolkit find_toolkit (const std::string& name)
   {
-    const_available_backends_iterator p = available_backends.find (name);
-
-    if (p != available_backends.end ())
+    const_available_toolkits_iterator p = available_toolkits.find (name);
+
+    if (p != available_toolkits.end ())
       return p->second;
     else
-      return default_backend ();
+      return default_toolkit ();
   }
 
-  static Cell available_backends_list (void)
+  static Cell available_toolkits_list (void)
   {
-    Cell m (1 , available_backends.size ());
-    const_available_backends_iterator p;
+    Cell m (1 , available_toolkits.size ());
+    const_available_toolkits_iterator p;
     int i;
     
-    for (i = 0,p = available_backends.begin (); p !=  available_backends.end (); p++,i++)
+    for (i = 0, p = available_toolkits.begin ();
+         p !=  available_toolkits.end (); p++, i++)
       m(i) = p->first;
 
     return m;
   }
 
 private:
-  base_graphics_backend *rep;
-
-  static OCTINTERP_API std::map<std::string, graphics_backend> available_backends;
-
-  typedef std::map<std::string, graphics_backend>::iterator available_backends_iterator;
-  typedef std::map<std::string, graphics_backend>::const_iterator const_available_backends_iterator;
+  base_graphics_toolkit *rep;
+
+  static OCTINTERP_API std::map<std::string, graphics_toolkit>
+    available_toolkits;
+
+  typedef std::map<std::string, graphics_toolkit>::iterator
+    available_toolkits_iterator;
+
+  typedef std::map<std::string, graphics_toolkit>::const_iterator
+    const_available_toolkits_iterator;
 };
 
 // ---------------------------------------------------------------------
 
 class base_graphics_object;
 
 class OCTINTERP_API base_properties
 {
@@ -2032,17 +2037,17 @@ public:
     }
 
   virtual void adopt (const graphics_handle& h)
   {
     children.adopt (h.value ());
     mark_modified ();
   }
 
-  virtual graphics_backend get_backend (void) const;
+  virtual graphics_toolkit get_toolkit (void) const;
 
   virtual Matrix get_boundingbox (bool /*internal*/ = false) const
     { return Matrix (1, 4, 0.0); }
 
   virtual void update_boundingbox (void);
 
   virtual void add_listener (const caseless_str&, const octave_value&,
                              listener_mode = POSTSET);
@@ -2350,24 +2355,24 @@ public:
         : "unknown");
   }
 
   bool isa (const std::string& go_name) const
   {
     return type () == go_name;
   }
 
-  virtual graphics_backend get_backend (void) const
+  virtual graphics_toolkit get_toolkit (void) const
   {
     if (valid_object ())
-      return get_properties ().get_backend ();
+      return get_properties ().get_toolkit ();
     else
       {
-        error ("base_graphics_object::get_backend: invalid graphics object");
-        return graphics_backend ();
+        error ("base_graphics_object::get_toolkit: invalid graphics object");
+        return graphics_toolkit ();
       }
   }
 
   virtual void add_property_listener (const std::string& nm,
                                       const octave_value& v,
                                       listener_mode mode = POSTSET)
     {
       if (valid_object ())
@@ -2574,17 +2579,17 @@ public:
   { return get_properties ().is_climinclude (); }
   
   bool is_aliminclude (void) const
   { return get_properties ().is_aliminclude (); }
 
   bool is_handle_visible (void) const
   { return get_properties ().is_handle_visible (); }
   
-  graphics_backend get_backend (void) const { return rep->get_backend (); }
+  graphics_toolkit get_toolkit (void) const { return rep->get_toolkit (); }
 
   void add_property_listener (const std::string& nm, const octave_value& v,
                               listener_mode mode = POSTSET)
     { rep->add_property_listener (nm, v, mode); }
 
   void delete_property_listener (const std::string& nm, const octave_value& v,
                                  listener_mode mode = POSTSET)
     { rep->delete_property_listener (nm, v, mode); }
@@ -2748,54 +2753,54 @@ class OCTINTERP_API figure : public base
 public:
   class OCTINTERP_API properties : public base_properties
   {
   public:
     void remove_child (const graphics_handle& h);
 
     void set_visible (const octave_value& val);
 
-    graphics_backend get_backend (void) const
+    graphics_toolkit get_toolkit (void) const
       {
-        if (! backend)
-          backend = graphics_backend::default_backend ();
-
-        return backend;
+        if (! toolkit)
+          toolkit = graphics_toolkit::default_toolkit ();
+
+        return toolkit;
       }
 
-    void set_backend (const graphics_backend& b) 
+    void set_toolkit (const graphics_toolkit& b) 
     { 
-      if (backend)
-        backend.finalize (__myhandle__);
-      backend = b; 
-      __backend__ = b.get_name ();
+      if (toolkit)
+        toolkit.finalize (__myhandle__);
+      toolkit = b; 
+      __graphics_toolkit__ = b.get_name ();
       __plot_stream__ = Matrix ();
       mark_modified ();
     }
 
-    void set___backend__ (const octave_value& val)
+    void set___graphics_toolkit__ (const octave_value& val)
     {
       if (! error_state)
         {
           if (val.is_string ())
             {
               std::string nm = val.string_value ();
-              graphics_backend b = graphics_backend::find_backend (nm);
+              graphics_toolkit b = graphics_toolkit::find_toolkit (nm);
               if (b.get_name () != nm)
                 {
-                  error ("set___backend__: invalid backend");
+                  error ("set___graphics_toolkit__: invalid graphics toolkit");
                 }
               else
                 {
-                  set_backend (b);
+                  set_toolkit (b);
                   mark_modified ();
                 }
             }
           else
-            error ("set___backend__ must be a string");
+            error ("set___graphics_toolkit__ must be a string");
         }
     }
 
     Matrix get_boundingbox (bool internal = false) const;
 
     void set_boundingbox (const Matrix& bb);
 
     void update_units (const caseless_str& old_units);
@@ -2853,32 +2858,32 @@ public:
       callback_property windowbuttonwheelfcn , Matrix ()
       radio_property windowstyle , "{normal}|modal|docked"
       string_property wvisual , ""
       radio_property wvisualmode , "{auto}|manual"
       string_property xdisplay , ""
       string_property xvisual , ""
       radio_property xvisualmode , "{auto}|manual"
       callback_property buttondownfcn , Matrix ()
-      string_property __backend__ s , "gnuplot"
+      string_property __graphics_toolkit__ s , "gnuplot"
     END_PROPERTIES
     
   protected:
     void init (void)
       {
         colormap.add_constraint (dim_vector (-1, 3));
         alphamap.add_constraint (dim_vector (-1, 1));
         paperposition.add_constraint (dim_vector (1, 4));
         pointershapecdata.add_constraint (dim_vector (16, 16));
         pointershapehotspot.add_constraint (dim_vector (1, 2));
         position.add_constraint (dim_vector (1, 4));
       }
 
   private:
-    mutable graphics_backend backend;
+    mutable graphics_toolkit toolkit;
   };
 
 private:
   properties xproperties;
 
 public:
   figure (const graphics_handle& mh, const graphics_handle& p)
     : base_graphics_object (), xproperties (mh, p), default_properties ()
@@ -4448,23 +4453,23 @@ private:
 
   // The next handle available if handle_free_list is empty.
   double next_handle;
 
   // The allocated figure handles.  Top of the stack is most recently
   // created.
   std::list<graphics_handle> figure_list;
 
-  // The lock for accessing the graphics sytsem
+  // The lock for accessing the graphics sytsem.
   octave_mutex graphics_lock;
 
-  // The list of event queued by backends
+  // The list of events queued by graphics toolkits.
   std::list<graphics_event> event_queue;
 
-  // The stack of callback objects
+  // The stack of callback objects.
   std::list<graphics_object> callback_objects;
 
   graphics_handle get_handle (const std::string& go_name);
 
   void do_free (const graphics_handle& h);
 
   graphics_handle do_lookup (double val)
   {
