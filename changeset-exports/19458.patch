# HG changeset patch
# User John Donoghue <john.donoghue@ieee.org>
# Date 1420124478 18000
#      Thu Jan 01 10:01:18 2015 -0500
# Node ID d8fd3842a5070992badf4ca5edbf53e2a85bf3ea
# Parent  cb35d695713cd7a89eee4cc31951d40de4f09add
Use gnulib gen_tempname to create temporary names (Bug #43872).

* bootstrap.conf: add tempname module.

* liboctave/system/file-ops.cc:
  (toplevel): include tempname.h.
  (octave_tempnam): set up template based on input dir and prefix and call
  gen_tempname to get temporary name.

* liboctave/system/oct-env.cc:
  (octave_env::get_temp_directory): New function.
  (octave_env::do_get_temp_directory): New function.

diff --git a/bootstrap.conf b/bootstrap.conf
--- a/bootstrap.conf
+++ b/bootstrap.conf
@@ -88,16 +88,17 @@ gnulib_modules="
   stdio
   strerror
   strftime
   strptime
   symlink
   sys_stat
   sys_time
   sys_times
+  tempname
   time
   times
   tmpfile
   trunc
   truncf
   uname
   unistd
   unlink
diff --git a/liboctave/system/file-ops.cc b/liboctave/system/file-ops.cc
--- a/liboctave/system/file-ops.cc
+++ b/liboctave/system/file-ops.cc
@@ -34,16 +34,20 @@ along with Octave; see the file COPYING.
 
 #include <sys/stat.h>
 #include <sys/types.h>
 #include <unistd.h>
 
 #include "pathmax.h"
 #include "canonicalize.h"
 
+extern "C" {
+#include <tempname.h>
+}
+
 #include "dir-ops.h"
 #include "file-ops.h"
 #include "file-stat.h"
 #include "oct-env.h"
 #include "oct-locbuf.h"
 #include "oct-passwd.h"
 #include "pathlen.h"
 #include "quit.h"
@@ -673,63 +677,47 @@ octave_tempnam (const std::string& dir, 
 std::string
 octave_tempnam (const std::string& dir, const std::string& pfx,
                 std::string& msg)
 {
   msg = std::string ();
 
   std::string retval;
 
-  const char *pdir = dir.empty () ? 0 : dir.c_str ();
-
-  const char *ppfx = pfx.empty () ? 0 : pfx.c_str ();
-
-  char *tmp = tempnam (pdir, ppfx);
+  // get dir path to use for template
+  std::string templatename;
+  if (dir.empty ())
+    templatename = octave_env::get_temp_directory ();
+  else if (! file_stat (dir, false).is_dir ())
+    templatename = octave_env::get_temp_directory ();
+  else
+    templatename = dir;
 
-  if (tmp)
-    {
-      retval = tmp;
-      free (tmp);
-
-      if (! dir.empty ())
-        {
-          // Check that environment variable hasn't overridden dir argument
-          size_t pos = retval.rfind (file_ops::dir_sep_char ());
-          std::string tmpdir = retval.substr (0, pos);  
-          std::string dirarg = dir;
-          if (*dirarg.rbegin () == file_ops::dir_sep_char ())
-            dirarg.erase (--dirarg.end ());
+  // add dir sep char if it is not there
+  if (*templatename.rbegin () != file_ops::dir_sep_char ())
+    templatename += file_ops::dir_sep_char ();
 
-          if (tmpdir != dirarg)
-          {
-            // A different TMPDIR was used.
-            // Replace TMPDIR with given dir if is valid
-            file_stat fs (dirarg, false);
-            if (fs && fs.is_dir ())
-              retval.replace (0, pos, dirarg);
+  if (pfx.empty ())
+    templatename += "file";
+  else
+    templatename += pfx;
+
+  // add the required XXXXXX for the template
+  templatename += "XXXXXX";
 
-            // since we have changed the directory, it is possible that the name
-            // we are using is no longer unique, so check/modify
-            std::string tmppath = retval;
-            int attempt = 0;
-            while (++attempt < TMP_MAX && file_stat (tmppath, false).exists ())
-              {
-                char file_postfix[16];
+  // create and copy template to char array for call to gen_tempname
+  char tname [templatename.length () + 1];
 
-                sprintf(file_postfix, "t%d", attempt);
+  strcpy (tname, templatename.c_str ());
 
-                tmppath = retval + file_postfix;
-              }
-            retval = tmppath;
-          }
-        }
-    }
+  if (gen_tempname (tname, 0, 0, GT_NOCREATE) == -1)
+    msg = gnulib::strerror (errno);
   else
-    msg = gnulib::strerror (errno);
-
+    retval = tname;
+  
   return retval;
 }
 
 std::string
 octave_canonicalize_file_name (const std::string& name)
 {
   std::string msg;
   return octave_canonicalize_file_name (name, msg);
diff --git a/liboctave/system/oct-env.cc b/liboctave/system/oct-env.cc
--- a/liboctave/system/oct-env.cc
+++ b/liboctave/system/oct-env.cc
@@ -145,16 +145,23 @@ octave_env::get_current_directory ()
 std::string
 octave_env::get_home_directory ()
 {
   return (instance_ok ())
          ? instance->do_get_home_directory () : std::string ();
 }
 
 std::string
+octave_env::get_temp_directory ()
+{
+  return (instance_ok ())
+         ? instance->do_get_temp_directory () : std::string ();
+}
+
+std::string
 octave_env::get_program_name (void)
 {
   return (instance_ok ())
          ? instance->prog_name : std::string ();
 }
 
 std::string
 octave_env::get_program_invocation_name (void)
@@ -179,16 +186,55 @@ octave_env::get_user_name (void)
 
 std::string
 octave_env::get_host_name (void)
 {
   return (instance_ok ())
          ? instance->do_get_host_name () : std::string ();
 }
 
+std::string
+octave_env::do_get_temp_directory (void) const
+{
+  std::string tempd;
+
+#if defined (__MINGW32__) || defined (_MSC_VER)
+  
+  tempd = do_getenv ("TEMP");
+
+  if (tempd.empty ())
+    tempd = do_getenv ("TMP");
+
+  #if defined (P_tmpdir)
+  if (tempd.empty ())
+    tempd = P_tmpdir;
+  #endif
+
+  // Some versions of MinGW and MSVC either don't define P_tmpdir, or
+  // define it to a single backslash.  In such cases just use C:\temp.
+  if (tempd.empty () || tempd == "\\")
+    tempd = "c:\\temp";
+
+#else    ## Unix-like OS
+
+  tempd = do_getenv ("TMP");
+
+  #if defined (P_tmpdir)
+  if (tempd.empty ())
+    tempd = P_tmpdir;
+  #else
+  if (tempd.empty ())
+    tempd = "/tmp";
+  #endif
+
+#endif
+
+  return tempd;
+}
+
 // FIXME: this leaves no way to distinguish between a
 // variable that is not set and one that is set to the empty string.
 // Is this a problem?
 
 std::string
 octave_env::getenv (const std::string& name)
 {
   return (instance_ok ())
diff --git a/liboctave/system/oct-env.h b/liboctave/system/oct-env.h
--- a/liboctave/system/oct-env.h
+++ b/liboctave/system/oct-env.h
@@ -46,16 +46,18 @@ public:
   static std::string
   make_absolute (const std::string& s,
                  const std::string& dot_path = get_current_directory ());
 
   static std::string get_current_directory (void);
 
   static std::string get_home_directory (void);
 
+  static std::string get_temp_directory (void);
+
   static std::string get_program_name (void);
 
   static std::string get_program_invocation_name (void);
 
   static std::string get_user_name (void);
 
   static std::string get_host_name (void);
 
@@ -83,16 +85,18 @@ private:
 
   std::string do_make_absolute (const std::string& s,
                                 const std::string& dot_path) const;
 
   std::string do_getcwd (void) const;
 
   std::string do_get_home_directory (void) const;
 
+  std::string do_get_temp_directory (void) const;
+
   std::string do_get_user_name (void) const;
 
   std::string do_get_host_name (void) const;
 
   std::string do_getenv (const std::string& name) const;
 
   void do_putenv (const std::string& name, const std::string& value) const;
 
