# HG changeset patch
# User jwe
# Date 1195057031 0
#      Wed Nov 14 16:17:11 2007 +0000
# Node ID e9a590a137d88dd7688d7d948257c7e097f3da75
# Parent  9bc096bc59d40dd714f8818bff12d3bed6885a44
[project @ 2007-11-14 16:17:10 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,20 @@
+2007-11-14  John W. Eaton  <jwe@octave.org>
+
+	* mex.cc (mex::mark, mex::unmark): Now public.
+	(mex::persistent): Delete.
+	(mexMakeArrayPersistent): Call maybe_unmark_array instead of
+	mex::persistent.
+	(mexMakeMemoryPersistent): Call maybe_unmark instead of
+	mex::persistent.
+	(maybe_unmark (void *)): New function.
+	(mxSetDimensions, mxSetPr, mxSetPi, mxSetData, mxSetImagData,
+	mxSetIr, mxSetJc): Use it.  From David Bateman.
+
 2007-11-13  Joseph P. Skudlarek  <Jskud@Jskud.com>
 
 	* DLD-FUNCTIONS/rand.cc (Frand): Update URL reference in doc string.
 
 2007-11-12  David Bateman  <dbateman@free.fr>
 
 	* graphics.h.in, graphics.cc (class text): Add the fontangle and
 	fontweight properties. Add string_property class to handle the
diff --git a/src/mex.cc b/src/mex.cc
--- a/src/mex.cc
+++ b/src/mex.cc
@@ -2172,18 +2172,40 @@ public:
 
 	    xfree (ptr);
 	  }
 	else
 	  warning ("mxFree: skipping memory not allocated by mxMalloc, mxCalloc, or mxRealloc");
       }
   }
 
-  // Mark a pointer so that it will not be freed on exit.
-  void persistent (void *ptr) { unmark (ptr); }
+  // Mark a pointer to be freed on exit.
+  void mark (void *ptr)
+  {
+#ifdef DEBUG
+    if (memlist.find (ptr) != memlist.end ())
+      warning ("%s: double registration ignored", function_name ());
+#endif
+
+    memlist.insert (ptr);
+  }
+
+  // Unmark a pointer to be freed on exit, either because it was
+  // made persistent, or because it was already freed.
+  void unmark (void *ptr)
+  {
+    std::set<void *>::iterator p = memlist.find (ptr);
+
+    if (p != memlist.end ())
+      memlist.erase (p);
+#ifdef DEBUG
+    else
+      warning ("%s: value not marked", function_name ());
+#endif
+  }
 
   mxArray *mark_array (mxArray *ptr)
   {
     arraylist.insert (ptr);
     return ptr;
   }
 
   void unmark_array (mxArray *ptr)
@@ -2217,19 +2239,16 @@ public:
 #ifdef DEBUG
     else
       warning ("mex::free_value: skipping memory not allocated by mex::make_value");
 #endif
 
     return inlist;
   }
 
-  // Remove PTR from the list of arrays to be free on exit.
-  void persistent (mxArray *ptr) { unmark_array (ptr); }
-
   octave_mex_function *current_mex_function (void) const
   {
     return curr_mex_fcn;
   }
 
   // 1 if error should be returned to MEX file, 0 if abort.
   int trap_feval_error;
 
@@ -2247,41 +2266,16 @@ private:
   // List of memory resources that need to be freed upon exit.
   std::set<void *> memlist;
 
   std::set<mxArray *> arraylist;
 
   // The name of the currently executing function.
   mutable char *fname;
 
-  // Mark a pointer to be freed on exit.
-  void mark (void *ptr)
-  {
-#ifdef DEBUG
-    if (memlist.find (ptr) != memlist.end ())
-      warning ("%s: double registration ignored", function_name ());
-#endif
-
-    memlist.insert (ptr);
-  }
-
-  // Unmark a pointer to be freed on exit, either because it was
-  // made persistent, or because it was already freed.
-  void unmark (void *ptr)
-  {
-    std::set<void *>::iterator p = memlist.find (ptr);
-
-    if (p != memlist.end ())
-      memlist.erase (p);
-#ifdef DEBUG
-    else
-      warning ("%s: value not marked", function_name ());
-#endif
-  }
-
   // List of memory resources we allocated.
   static std::set<void *> global_memlist;
 
   // Mark a pointer as one we allocated.
   void global_mark (void *ptr)
   {
 #ifdef DEBUG
     if (global_memlist.find (ptr) != global_memlist.end ())
@@ -2328,16 +2322,25 @@ static inline mxArray *
 maybe_unmark_array (mxArray *ptr)
 {
   if (mex_context)
     mex_context->unmark_array (ptr);
 
   return ptr;
 }
 
+static inline void *
+maybe_unmark (void *ptr)
+{
+  if (mex_context)
+    mex_context->unmark (ptr);
+
+  return ptr;
+}
+
 void
 mxArray_struct::set_field_by_number (mwIndex index, int key_num, mxArray *val)
 {
   if (key_num >= 0 && key_num < nfields)
     data[nfields * index + key_num] = maybe_unmark_array (val);
 }
 
 void
@@ -2717,17 +2720,17 @@ void
 mxSetN (mxArray *ptr, mwSize n)
 {
   ptr->set_n (n);
 }
 
 void
 mxSetDimensions (mxArray *ptr, mwSize *dims, mwSize ndims)
 {
-  ptr->set_dimensions (dims, ndims);
+  ptr->set_dimensions (static_cast<mwSize *> (maybe_unmark (dims)), ndims);
 }
   
 // Data extractors.
 double *
 mxGetPr (const mxArray *ptr)
 {
   return static_cast<double *> (ptr->get_data ());
 }
@@ -2767,35 +2770,35 @@ mxGetImagData (const mxArray *ptr)
 {
   return ptr->get_imag_data ();
 }
 
 // Data setters.
 void
 mxSetPr (mxArray *ptr, double *pr)
 {
-  ptr->set_data (pr);
+  ptr->set_data (maybe_unmark (pr));
 }
 
 void
 mxSetPi (mxArray *ptr, double *pi)
 {
-  ptr->set_imag_data (pi);
+  ptr->set_imag_data (maybe_unmark (pi));
 }
 
 void
 mxSetData (mxArray *ptr, void *pr)
 {
-  ptr->set_data (pr);
+  ptr->set_data (maybe_unmark (pr));
 }
 
 void
 mxSetImagData (mxArray *ptr, void *pi)
 {
-  ptr->set_imag_data (pi);
+  ptr->set_imag_data (maybe_unmark (pi));
 }
 
 // Classes.
 mxClassID
 mxGetClassID (const mxArray *ptr)
 {
   return ptr->get_class_id ();
 }
@@ -2842,23 +2845,23 @@ mwSize
 mxGetNzmax (const mxArray *ptr)
 {
   return ptr->get_nzmax ();
 }
 
 void
 mxSetIr (mxArray *ptr, mwIndex *ir)
 {
-  ptr->set_ir (ir);
+  ptr->set_ir (static_cast <mwIndex *> (maybe_unmark (ir)));
 }
 
 void
 mxSetJc (mxArray *ptr, mwIndex *jc)
 {
-  ptr->set_jc (jc);
+  ptr->set_jc (static_cast<mwIndex *> (maybe_unmark (jc)));
 }
 
 void
 mxSetNzmax (mxArray *ptr, mwSize nzmax)
 {
   ptr->set_nzmax (nzmax);
 }
 
@@ -3262,25 +3265,23 @@ mexPutVariable (const char *space, const
     }
 
   return 0;
 }
 
 void
 mexMakeArrayPersistent (mxArray *ptr)
 {
-  if (mex_context)
-    mex_context->persistent (ptr);
+  maybe_unmark_array (ptr);
 }
 
 void
 mexMakeMemoryPersistent (void *ptr)
 {
-  if (mex_context)
-    mex_context->persistent (ptr);
+  maybe_unmark (ptr);
 }
 
 int
 mexAtExit (void (*f) (void))
 {
   if (mex_context)
     {
       octave_mex_function *curr_mex_fcn = mex_context->current_mex_function ();
