# HG changeset patch
# User Julien Bect <jbect@users.sourceforge.net>
# Date 1500896955 -7200
#      Mon Jul 24 13:49:15 2017 +0200
# Node ID b3b7677334f6d9995ccd3521a1d196446f6e08d8
# Parent  9eef7983b9bcf88895d99aa118e3ed789f6f056c
jit: pt-jit.cc: Use createBasicAAWrapperPass instead of createBasicAliasAnalysisPass

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -1680,16 +1680,17 @@ if test $ENABLE_JIT = yes; then
     have_llvm_data_h=no
     AC_CHECK_HEADERS([llvm/Target/TargetData.h llvm/IR/DataLayout.h \
                       llvm/DataLayout.h], [have_llvm_data_h=yes; break])
     if test $have_llvm_data_h = no; then
       warn_llvm="Missing LLVM file TargetData.h.  JIT compiler is disabled."
     fi
 
     AC_CHECK_HEADERS([llvm/IR/Verifier.h])
+    AC_CHECK_HEADERS([llvm/Analysis/BasicAliasAnalysis.h])
 
     OCTAVE_LLVM_FUNCTION_ADDATTRIBUTE_API
     OCTAVE_LLVM_FUNCTION_ADDFNATTR_API
     OCTAVE_LLVM_CALLINST_ADDATTRIBUTE_API
     OCTAVE_LLVM_RAW_FD_OSTREAM_API
     OCTAVE_LLVM_LEGACY_PASSMANAGER_API
     AC_LANG_POP(C++)
     CPPFLAGS="$save_CPPFLAGS"
diff --git a/libinterp/parse-tree/pt-jit.cc b/libinterp/parse-tree/pt-jit.cc
--- a/libinterp/parse-tree/pt-jit.cc
+++ b/libinterp/parse-tree/pt-jit.cc
@@ -50,16 +50,23 @@ along with Octave; see the file COPYING.
 #include <llvm/Analysis/Passes.h>
 
 #if defined (HAVE_LLVM_IR_VERIFIER_H)
 #  include <llvm/IR/Verifier.h>
 #else
 #  include <llvm/Analysis/Verifier.h>
 #endif
 
+#if defined (HAVE_LLVM_ANALYSIS_BASICALIASANALYSIS_H)
+// In LLVM 3.8.x and later, we use createBasicAAWrapperPass from:
+#  include <llvm/Analysis/BasicAliasAnalysis.h>
+#endif
+// In LLVM 3.7.x and earlier, we use createBasicAliasAnalysisPass
+// from llvm/Analysis/Passes.h (already included above)
+
 #include <llvm/Bitcode/ReaderWriter.h>
 #include <llvm/ExecutionEngine/ExecutionEngine.h>
 #include <llvm/ExecutionEngine/JIT.h>
 
 #if defined (LEGACY_PASSMANAGER)
 #  include <llvm/IR/LegacyPassManager.h>
 #else
 #  include <llvm/PassManager.h>
@@ -2075,18 +2082,25 @@ void
 #endif
     module_pass_manager->add (llvm::createAlwaysInlinerPass ());
 
 #if defined (HAVE_LLVM_DATALAYOUT)
     pass_manager->add (new llvm::DataLayout (*engine->getDataLayout ()));
 #else
     pass_manager->add (new llvm::TargetData (*engine->getTargetData ()));
 #endif
+
     pass_manager->add (llvm::createCFGSimplificationPass ());
+
+#if defined (HAVE_LLVM_ANALYSIS_BASICALIASANALYSIS_H)
+    pass_manager->add (llvm::createBasicAAWrapperPass ());
+#else
     pass_manager->add (llvm::createBasicAliasAnalysisPass ());
+#endif
+
     pass_manager->add (llvm::createPromoteMemoryToRegisterPass ());
     pass_manager->add (llvm::createInstructionCombiningPass ());
     pass_manager->add (llvm::createReassociatePass ());
     pass_manager->add (llvm::createGVNPass ());
     pass_manager->add (llvm::createCFGSimplificationPass ());
     pass_manager->doInitialization ();
 
     jit_typeinfo::initialize (module, engine);
