# HG changeset patch
# User jwe
# Date 1172764670 0
#      Thu Mar 01 15:57:50 2007 +0000
# Node ID 419017274c1e413dca52bb3071ab4a6c7e9361e5
# Parent  b3c37bc17c5f6ec4f866735ca457115620ebda95
[project @ 2007-03-01 15:57:50 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2007-03-01  Paul Kienzle  <pkienzle@users.sf.net>
+
+	* general/interp1.m: Fix *style cases for decreasing x.
+
 2007-03-01  Muthiah Annamalai  <muthuspost@gmail.com>
 
 	* polynomial/roots.m: Check nargin before accessing arg.
 
 2007-02-28  John W. Eaton  <jwe@octave.org>
 
 	* plot/__uiobject_draw_axes__.m: If looking at image data, Don't
 	increment data_idx unless using gnuplot for display.
diff --git a/scripts/general/interp1.m b/scripts/general/interp1.m
--- a/scripts/general/interp1.m
+++ b/scripts/general/interp1.m
@@ -183,19 +183,19 @@ function yi = interp1 (x, y, varargin)
     if (pp)
       yi = mkpp ([x(1); (x(1:end-1)+x(2:end))/2; x(end)], y, szy(2:end));
     else
       idx = lookup (0.5*(x(1:nx-1)+x(2:nx)), xi) + 1;
       yi(range,:) = y(idx,:);
     endif
   elseif (strcmp (method, "*nearest"))
     if (pp)
-      yi = mkpp ([minx; minx+[0.5:(ny-1)]'*dx; maxx], y, szy(2:end));
+      yi = mkpp ([x(1); x(1)+[0.5:(ny-1)]'*dx; x(nx)], y, szy(2:end));
     else
-      idx = max (1, min (ny, floor((xi-minx)/dx+1.5)));
+      idx = max (1, min (ny, floor((xi-x(1))/dx+1.5)));
       yi(range,:) = y(idx,:);
     endif
   elseif (strcmp (method, "linear"))
     dy = y(2:ny,:) - y(1:ny-1,:);
     dx = x(2:nx) - x(1:nx-1);
     if (pp)
       yi = mkpp (x, [dy./dx, y(1:end-1)], szy(2:end));
     else
@@ -205,43 +205,43 @@ function yi = interp1 (x, y, varargin)
 				# gets dumped into an interval
       ## use the endpoints of the interval to define a line
       s = (xi - x(idx))./dx(idx);
       yi(range,:) = s(:,ones(1,nc)).*dy(idx,:) + y(idx,:);
     endif
   elseif (strcmp (method, "*linear"))
     if (pp)
       dy = [y(2:ny,:) - y(1:ny-1,:)];
-      yi = mkpp (minx + [0:ny-1]*dx, [dy./dx, y(1:end-1)], szy(2:end));
+      yi = mkpp (x(1) + [0:ny-1]*dx, [dy./dx, y(1:end-1)], szy(2:end));
     else
       ## find the interval containing the test point
-      t = (xi - minx)/dx + 1;
+      t = (xi - x(1))/dx + 1;
       idx = max(1,min(ny,floor(t)));
 
       ## use the endpoints of the interval to define a line
       dy = [y(2:ny,:) - y(1:ny-1,:); y(ny,:) - y(ny-1,:)];
       s = t - idx;
       yi(range,:) = s(:,ones(1,nc)).*dy(idx,:) + y(idx,:); 
     endif
   elseif (strcmp (method, "pchip") || strcmp (method, "*pchip"))
     if (nx == 2 || method(1) == "*") 
-      x = linspace (minx, maxx, ny);
+      x = linspace (x(1), x(nx), ny);
     endif
     ## Note that pchip's arguments are transposed relative to interp1
     if (pp)
       yi = pchip (x.', y.');
       yi.d = szy(2:end);
     else
       yi(range,:) = pchip (x.', y.', xi.').';
     endif
 
   elseif (strcmp (method, "cubic") || (strcmp (method, "*cubic") && pp))
     ## FIXME Is there a better way to treat pp return return and *cubic
     if (method(1) == "*")
-      x = linspace (minx, maxx, ny).'; 
+      x = linspace (x(1), x(nx), ny).'; 
       nx = ny;
     endif
 
     if (nx < 4 || ny < 4)
       error ("interp1: table too short");
     endif
     idx = lookup (x(3:nx-2), xi) + 1;
 
@@ -272,33 +272,33 @@ function yi = interp1 (x, y, varargin)
     endif
   elseif (strcmp (method, "*cubic"))
     if (nx < 4 || ny < 4)
       error ("interp1: table too short");
     endif
 
     ## From: Miloje Makivic 
     ## http://www.npac.syr.edu/projects/nasa/MILOJE/final/node36.html
-    t = (xi - minx)/dx + 1;
+    t = (xi - x(1))/dx + 1;
     idx = max (min (floor (t), ny-2), 2);
     t = t - idx;
     t2 = t.*t;
     tp = 1 - 0.5*t;
     a = (1 - t2).*tp;
     b = (t2 + t).*tp;
     c = (t2 - t).*tp/3;
     d = (t2 - 1).*t/6;
     J = ones (1, nc);
 
     yi(range,:) = a(:,J) .* y(idx,:) + b(:,J) .* y(idx+1,:) ...
 		  + c(:,J) .* y(idx-1,:) + d(:,J) .* y(idx+2,:);
 
   elseif (strcmp (method, "spline") || strcmp (method, "*spline"))
     if (nx == 2 || method(1) == "*") 
-      x = linspace(minx, maxx, ny); 
+      x = linspace(x(1), x(nx), ny); 
     endif
     ## Note that spline's arguments are transposed relative to interp1
     if (pp)
       yi = spline (x.', y.');
       yi.d = szy(2:end);
     else
       yi(range,:) = spline (x.', y.', xi.').';
     endif
@@ -339,110 +339,221 @@ endfunction
 %! spl=interp1(xp,yp,xf,"*spline");
 %! cub=interp1(xp,yp,xf,"*cubic");
 %! near=interp1(xp,yp,xf,"*nearest");
 %! plot(xf,yf,";*original;",xf,near,";*nearest;",xf,lin,";*linear;",...
 %!      xf,cub,";*cubic;",xf,spl,";*spline;",xp,yp,"*;;");
 %! %--------------------------------------------------------
 %! % confirm that interpolated function matches the original
 
+## For each type of interpolated test, confirm that the interpolated
+## value at the knots match the values at the knots.  Points away
+## from the knots are requested, but only 'nearest' and 'linear'
+## confirm they are the correct values.
+
 %!shared xp, yp, xi, style
-%! xp=0:5;      yp = sin(2*pi*xp/5);
-%! xi = sort([-1, max(xp)*rand(1,6), max(xp)+1]);
+%! xp=0:2:10;      yp = sin(2*pi*xp/5);  
+%! xi = [-1, 0, 2.2, 4, 6.6, 10, 11];
+
 
+## The following BLOCK/ENDBLOCK section is repeated for each style
+##    nearest, linear, cubic, spline, pchip
+## The test for ppval of cubic has looser tolerance, but otherwise
+## the tests are identical.
+## Note that the block checks style and *style; if you add more tests
+## before to add them to both sections of each block.  One test, 
+## style vs. *style, occurs only in the first section.
+## There is an ENDBLOCKTEST after the final block
 %!test style = "nearest";
-%!assert (interp1(xp, yp, [min(xp)-1, max(xp)+1]), [NaN, NaN]);
+## BLOCK
+%!assert (interp1(xp, yp, [min(xp)-1, max(xp)+1],style), [NaN, NaN]);
 %!assert (interp1(xp,yp,xp,style), yp, 100*eps);
 %!assert (interp1(xp,yp,xp',style), yp', 100*eps);
 %!assert (interp1(xp',yp',xp',style), yp', 100*eps);
 %!assert (interp1(xp',yp',xp,style), yp, 100*eps);
 %!assert (isempty(interp1(xp',yp',[],style)));
 %!assert (isempty(interp1(xp,yp,[],style)));
 %!assert (interp1(xp,[yp',yp'],xi(:),style),...
 %!	  [interp1(xp,yp,xi(:),style),interp1(xp,yp,xi(:),style)]);
+%!assert (interp1(xp,yp,xi,style),...
+%!	  interp1(fliplr(xp),fliplr(yp),xi,style),100*eps);
+%!assert (ppval(interp1(xp,yp,style,"pp"),xi),
+%!	  interp1(xp,yp,xi,style,"extrap"),10*eps);
+%!error interp1(1,1,1, style);
 %!assert (interp1(xp,[yp',yp'],xi,style),
-%!	  interp1(xp,[yp',yp'],xi,["*",style]));
-
-%!test style = "linear";
-%!assert (interp1(xp, yp, [-1, max(xp)+1]), [NaN, NaN]);
+%!	  interp1(xp,[yp',yp'],xi,["*",style]),100*eps);
+%!test style=['*',style];
+%!assert (interp1(xp, yp, [min(xp)-1, max(xp)+1],style), [NaN, NaN]);
+%!assert (interp1(xp,yp,xp,style), yp, 100*eps);
+%!assert (interp1(xp,yp,xp',style), yp', 100*eps);
+%!assert (interp1(xp',yp',xp',style), yp', 100*eps);
+%!assert (interp1(xp',yp',xp,style), yp, 100*eps);
+%!assert (isempty(interp1(xp',yp',[],style)));
+%!assert (isempty(interp1(xp,yp,[],style)));
+%!assert (interp1(xp,[yp',yp'],xi(:),style),...
+%!	  [interp1(xp,yp,xi(:),style),interp1(xp,yp,xi(:),style)]);
+%!assert (interp1(xp,yp,xi,style),...
+%!	  interp1(fliplr(xp),fliplr(yp),xi,style),100*eps);
+%!assert (ppval(interp1(xp,yp,style,"pp"),xi),
+%!	  interp1(xp,yp,xi,style,"extrap"),10*eps);
+%!error interp1(1,1,1, style);
+## ENDBLOCK
+%!test style='linear';
+## BLOCK
+%!assert (interp1(xp, yp, [min(xp)-1, max(xp)+1],style), [NaN, NaN]);
+%!assert (interp1(xp,yp,xp,style), yp, 100*eps);
+%!assert (interp1(xp,yp,xp',style), yp', 100*eps);
+%!assert (interp1(xp',yp',xp',style), yp', 100*eps);
+%!assert (interp1(xp',yp',xp,style), yp, 100*eps);
+%!assert (isempty(interp1(xp',yp',[],style)));
+%!assert (isempty(interp1(xp,yp,[],style)));
+%!assert (interp1(xp,[yp',yp'],xi(:),style),...
+%!	  [interp1(xp,yp,xi(:),style),interp1(xp,yp,xi(:),style)]);
+%!assert (interp1(xp,yp,xi,style),...
+%!	  interp1(fliplr(xp),fliplr(yp),xi,style),100*eps);
+%!assert (ppval(interp1(xp,yp,style,"pp"),xi),
+%!	  interp1(xp,yp,xi,style,"extrap"),10*eps);
+%!error interp1(1,1,1, style);
+%!assert (interp1(xp,[yp',yp'],xi,style),
+%!	  interp1(xp,[yp',yp'],xi,["*",style]),100*eps);
+%!test style=['*',style];
+%!assert (interp1(xp, yp, [min(xp)-1, max(xp)+1],style), [NaN, NaN]);
+%!assert (interp1(xp,yp,xp,style), yp, 100*eps);
+%!assert (interp1(xp,yp,xp',style), yp', 100*eps);
+%!assert (interp1(xp',yp',xp',style), yp', 100*eps);
+%!assert (interp1(xp',yp',xp,style), yp, 100*eps);
+%!assert (isempty(interp1(xp',yp',[],style)));
+%!assert (isempty(interp1(xp,yp,[],style)));
+%!assert (interp1(xp,[yp',yp'],xi(:),style),...
+%!	  [interp1(xp,yp,xi(:),style),interp1(xp,yp,xi(:),style)]);
+%!assert (interp1(xp,yp,xi,style),...
+%!	  interp1(fliplr(xp),fliplr(yp),xi,style),100*eps);
+%!assert (ppval(interp1(xp,yp,style,"pp"),xi),
+%!	  interp1(xp,yp,xi,style,"extrap"),10*eps);
+%!error interp1(1,1,1, style);
+## ENDBLOCK
+%!test style='cubic';
+## BLOCK
+%!assert (interp1(xp, yp, [min(xp)-1, max(xp)+1],style), [NaN, NaN]);
 %!assert (interp1(xp,yp,xp,style), yp, 100*eps);
 %!assert (interp1(xp,yp,xp',style), yp', 100*eps);
 %!assert (interp1(xp',yp',xp',style), yp', 100*eps);
 %!assert (interp1(xp',yp',xp,style), yp, 100*eps);
 %!assert (isempty(interp1(xp',yp',[],style)));
 %!assert (isempty(interp1(xp,yp,[],style)));
 %!assert (interp1(xp,[yp',yp'],xi(:),style),...
 %!	  [interp1(xp,yp,xi(:),style),interp1(xp,yp,xi(:),style)]);
+%!assert (interp1(xp,yp,xi,style),...
+%!	  interp1(fliplr(xp),fliplr(yp),xi,style),100*eps);
+%!assert (ppval(interp1(xp,yp,style,"pp"),xi),
+%!	  interp1(xp,yp,xi,style,"extrap"),100*eps);
+%!error interp1(1,1,1, style);
 %!assert (interp1(xp,[yp',yp'],xi,style),
 %!	  interp1(xp,[yp',yp'],xi,["*",style]),100*eps);
-
-%!test style = "cubic";
-%!assert (interp1(xp, yp, [-1, max(xp)+1]), [NaN, NaN]);
+%!test style=['*',style];
+%!assert (interp1(xp, yp, [min(xp)-1, max(xp)+1],style), [NaN, NaN]);
+%!assert (interp1(xp,yp,xp,style), yp, 100*eps);
+%!assert (interp1(xp,yp,xp',style), yp', 100*eps);
+%!assert (interp1(xp',yp',xp',style), yp', 100*eps);
+%!assert (interp1(xp',yp',xp,style), yp, 100*eps);
+%!assert (isempty(interp1(xp',yp',[],style)));
+%!assert (isempty(interp1(xp,yp,[],style)));
+%!assert (interp1(xp,[yp',yp'],xi(:),style),...
+%!	  [interp1(xp,yp,xi(:),style),interp1(xp,yp,xi(:),style)]);
+%!assert (interp1(xp,yp,xi,style),...
+%!	  interp1(fliplr(xp),fliplr(yp),xi,style),100*eps);
+%!assert (ppval(interp1(xp,yp,style,"pp"),xi),
+%!	  interp1(xp,yp,xi,style,"extrap"),100*eps);
+%!error interp1(1,1,1, style);
+## ENDBLOCK
+%!test style='pchip';
+## BLOCK
+%!assert (interp1(xp, yp, [min(xp)-1, max(xp)+1],style), [NaN, NaN]);
 %!assert (interp1(xp,yp,xp,style), yp, 100*eps);
 %!assert (interp1(xp,yp,xp',style), yp', 100*eps);
 %!assert (interp1(xp',yp',xp',style), yp', 100*eps);
 %!assert (interp1(xp',yp',xp,style), yp, 100*eps);
 %!assert (isempty(interp1(xp',yp',[],style)));
 %!assert (isempty(interp1(xp,yp,[],style)));
 %!assert (interp1(xp,[yp',yp'],xi(:),style),...
 %!	  [interp1(xp,yp,xi(:),style),interp1(xp,yp,xi(:),style)]);
+%!assert (interp1(xp,yp,xi,style),...
+%!	  interp1(fliplr(xp),fliplr(yp),xi,style),100*eps);
+%!assert (ppval(interp1(xp,yp,style,"pp"),xi),
+%!	  interp1(xp,yp,xi,style,"extrap"),10*eps);
+%!error interp1(1,1,1, style);
 %!assert (interp1(xp,[yp',yp'],xi,style),
-%!	  interp1(xp,[yp',yp'],xi,["*",style]),1000*eps);
-
-%!test style = "spline";
-%!assert (interp1(xp, yp, [-1, max(xp) + 1]), [NaN, NaN]);
+%!	  interp1(xp,[yp',yp'],xi,["*",style]),100*eps);
+%!test style=['*',style];
+%!assert (interp1(xp, yp, [min(xp)-1, max(xp)+1],style), [NaN, NaN]);
 %!assert (interp1(xp,yp,xp,style), yp, 100*eps);
 %!assert (interp1(xp,yp,xp',style), yp', 100*eps);
 %!assert (interp1(xp',yp',xp',style), yp', 100*eps);
 %!assert (interp1(xp',yp',xp,style), yp, 100*eps);
 %!assert (isempty(interp1(xp',yp',[],style)));
 %!assert (isempty(interp1(xp,yp,[],style)));
 %!assert (interp1(xp,[yp',yp'],xi(:),style),...
 %!	  [interp1(xp,yp,xi(:),style),interp1(xp,yp,xi(:),style)]);
+%!assert (interp1(xp,yp,xi,style),...
+%!	  interp1(fliplr(xp),fliplr(yp),xi,style),100*eps);
+%!assert (ppval(interp1(xp,yp,style,"pp"),xi),
+%!	  interp1(xp,yp,xi,style,"extrap"),10*eps);
+%!error interp1(1,1,1, style);
+## ENDBLOCK
+%!test style='spline';
+## BLOCK
+%!assert (interp1(xp, yp, [min(xp)-1, max(xp)+1],style), [NaN, NaN]);
+%!assert (interp1(xp,yp,xp,style), yp, 100*eps);
+%!assert (interp1(xp,yp,xp',style), yp', 100*eps);
+%!assert (interp1(xp',yp',xp',style), yp', 100*eps);
+%!assert (interp1(xp',yp',xp,style), yp, 100*eps);
+%!assert (isempty(interp1(xp',yp',[],style)));
+%!assert (isempty(interp1(xp,yp,[],style)));
+%!assert (interp1(xp,[yp',yp'],xi(:),style),...
+%!	  [interp1(xp,yp,xi(:),style),interp1(xp,yp,xi(:),style)]);
+%!assert (interp1(xp,yp,xi,style),...
+%!	  interp1(fliplr(xp),fliplr(yp),xi,style),100*eps);
+%!assert (ppval(interp1(xp,yp,style,"pp"),xi),
+%!	  interp1(xp,yp,xi,style,"extrap"),10*eps);
+%!error interp1(1,1,1, style);
 %!assert (interp1(xp,[yp',yp'],xi,style),
-%!	  interp1(xp,[yp',yp'],xi,["*",style]),10*eps);
+%!	  interp1(xp,[yp',yp'],xi,["*",style]),100*eps);
+%!test style=['*',style];
+%!assert (interp1(xp, yp, [min(xp)-1, max(xp)+1],style), [NaN, NaN]);
+%!assert (interp1(xp,yp,xp,style), yp, 100*eps);
+%!assert (interp1(xp,yp,xp',style), yp', 100*eps);
+%!assert (interp1(xp',yp',xp',style), yp', 100*eps);
+%!assert (interp1(xp',yp',xp,style), yp, 100*eps);
+%!assert (isempty(interp1(xp',yp',[],style)));
+%!assert (isempty(interp1(xp,yp,[],style)));
+%!assert (interp1(xp,[yp',yp'],xi(:),style),...
+%!	  [interp1(xp,yp,xi(:),style),interp1(xp,yp,xi(:),style)]);
+%!assert (interp1(xp,yp,xi,style),...
+%!	  interp1(fliplr(xp),fliplr(yp),xi,style),100*eps);
+%!assert (ppval(interp1(xp,yp,style,"pp"),xi),
+%!	  interp1(xp,yp,xi,style,"extrap"),10*eps);
+%!error interp1(1,1,1, style);
+## ENDBLOCK
+## ENDBLOCKTEST
 
 %!# test linear extrapolation
 %!assert (interp1([1:5],[3:2:11],[0,6],"linear","extrap"), [1, 13], eps);
 %!assert (interp1(xp, yp, [-1, max(xp)+1],"linear",5), [5, 5]);
 
 %!error interp1
 %!error interp1(1:2,1:2,1,"bogus")
 
-%!error interp1(1,1,1, "nearest");
 %!assert (interp1(1:2,1:2,1.4,"nearest"),1);
 %!error interp1(1,1,1, "linear");
 %!assert (interp1(1:2,1:2,1.4,"linear"),1.4);
 %!error interp1(1:3,1:3,1, "cubic");
 %!assert (interp1(1:4,1:4,1.4,"cubic"),1.4);
 %!error interp1(1:2,1:2,1, "spline");
 %!assert (interp1(1:3,1:3,1.4,"spline"),1.4);
 
 %!error interp1(1,1,1, "*nearest");
 %!assert (interp1(1:2:4,1:2:4,1.4,"*nearest"),1);
 %!error interp1(1,1,1, "*linear");
 %!assert (interp1(1:2:4,1:2:4,[0,1,1.4,3,4],"*linear"),[NaN,1,1.4,3,NaN]);
 %!error interp1(1:3,1:3,1, "*cubic");
 %!assert (interp1(1:2:8,1:2:8,1.4,"*cubic"),1.4);
 %!error interp1(1:2,1:2,1, "*spline");
 %!assert (interp1(1:2:6,1:2:6,1.4,"*spline"),1.4);
-
-%!assert (ppval(interp1(xp,yp,"nearest","pp"),xi),
-%!	  interp1(xp,yp,xi,"nearest","extrap"),10*eps);
-%!assert (ppval(interp1(xp,yp,"linear","pp"),xi),
-%!	  interp1(xp,yp,xi,"linear","extrap"),10*eps);
-%!assert (ppval(interp1(xp,yp,"cubic","pp"),xi),
-%!	  interp1(xp,yp,xi,"cubic","extrap"),10*eps);
-%!assert (ppval(interp1(xp,yp,"pchip","pp"),xi),
-%!	  interp1(xp,yp,xi,"pchip","extrap"),10*eps);
-%!assert (ppval(interp1(xp,yp,"spline","pp"),xi),
-%!	  interp1(xp,yp,xi,"spline","extrap"),10*eps);
-
-%!assert (ppval(interp1(xp,yp,"*nearest","pp"),xi),
-%!	  interp1(xp,yp,xi,"*nearest","extrap"),10*eps);
-%!assert (ppval(interp1(xp,yp,"*linear","pp"),xi),
-%!	  interp1(xp,yp,xi,"*linear","extrap"),10*eps);
-%!assert (ppval(interp1(xp,yp,"*cubic","pp"),xi),
-%!	  interp1(xp,yp,xi,"*cubic","extrap"),10*eps);
-%!assert (ppval(interp1(xp,yp,"*pchip","pp"),xi),
-%!	  interp1(xp,yp,xi,"*pchip","extrap"),10*eps);
-%!assert (ppval(interp1(xp,yp,"*spline","pp"),xi),
-%!	  interp1(xp,yp,xi,"*spline","extrap"),10*eps);
