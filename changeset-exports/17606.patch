# HG changeset patch
# User Rik <rik@octave.org>
# Date 1381260842 25200
#      Tue Oct 08 12:34:02 2013 -0700
# Node ID b43da3876b64f6731a303b4efa3f2b3ab8484dac
# Parent  8f2f8c9b26202f1318ffd412b19dacd24b12fab8
rectangle.m: Overhaul function.

* scripts/plot/draw/rectangle.m: Fix detection of nearly zero curvature.  Use
Octave coding conventions.  Use single call to set/get with cellstr for
better performance.

diff --git a/scripts/plot/draw/rectangle.m b/scripts/plot/draw/rectangle.m
--- a/scripts/plot/draw/rectangle.m
+++ b/scripts/plot/draw/rectangle.m
@@ -19,17 +19,16 @@
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} rectangle ()
 ## @deftypefnx {Function File} {} rectangle (@dots{}, "Position", @var{pos})
 ## @deftypefnx {Function File} {} rectangle (@dots{}, "Curvature", @var{curv})
 ## @deftypefnx {Function File} {} rectangle (@dots{}, "EdgeColor", @var{ec})
 ## @deftypefnx {Function File} {} rectangle (@dots{}, "FaceColor", @var{fc})
 ## @deftypefnx {Function File} {} rectangle (@var{hax}, @dots{})
 ## @deftypefnx {Function File} {@var{h} =} rectangle (@dots{})
-##
 ## Draw a rectangular patch defined by @var{pos} and @var{curv}.
 ## 
 ## The variable @code{@var{pos}(1:2)} defines the lower left-hand corner of
 ## the patch and @code{@var{pos}(3:4)} defines its width and height.  By
 ## default, the value of @var{pos} is @code{[0, 0, 1, 1]}.
 ##
 ## The variable @var{curv} defines the curvature of the sides of the rectangle
 ## and may be a scalar or two-element vector with values between 0 and 1.
@@ -38,17 +37,17 @@
 ## If @var{curv} is a two-element vector, then the first element is the
 ## curvature along the x-axis of the patch and the second along y-axis.
 ##
 ## If @var{curv} is a scalar, it represents the curvature of the shorter of the
 ## two sides of the rectangle and the curvature of the other side is defined
 ## by
 ##
 ## @example
-## min (pos (1:2)) / max (pos (1:2)) * curv
+## min (pos(1:2)) / max (pos(1:2)) * curv
 ## @end example
 ##
 ## Additional property/value pairs are passed to the underlying patch command. 
 ## 
 ## If the first argument @var{hax} is an axes handle, then plot into this axis,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a graphics handle to the created
@@ -88,24 +87,24 @@ function hg = __rectangle__ (hax, vararg
   fc = "none";
 
   while (iarg < length (varargin))
     arg = varargin{iarg};
     if (ischar (arg))
       if (strcmpi (arg, "position"))
         pos = varargin{iarg+1};
         varargin(iarg:iarg+1) = [];
-        if (!isvector (pos) || numel (pos) != 4)
+        if (! isvector (pos) || numel (pos) != 4)
           error ("rectangle: position must be a 4 element vector");
         endif
       elseif (strcmpi (arg, "curvature"))
         curv2 = varargin{iarg+1};
         varargin(iarg:iarg+1) = [];
         if (!isnumeric (curv2) || (numel (curv2) != 1 && numel (curv2) != 2))
-          error ("rectangle: curvature must be a 2 element vector or a scalar");
+          error ("rectangle: curvature must be a 2-element vector or a scalar");
         endif
         if (any (curv2 < 0) || any (curv2 > 1))
           error ("rectangle: curvature values must be between 0 and 1");
         endif
       elseif (strcmpi (arg, "edgecolor"))
         ec = varargin{iarg+1};
         varargin(iarg:iarg+1) = [];
       elseif (strcmpi (arg, "facecolor"))
@@ -115,45 +114,45 @@ function hg = __rectangle__ (hax, vararg
         iarg ++;
       endif
     else
       iarg ++;
     endif
   endwhile
 
   if (numel (curv2) == 1)
-    [a, ai] = min (pos (3 : 4));
-    [b, bi] = max (pos (3 : 4));
+    [a, ai] = min (pos(3:4));
+    [b, bi] = max (pos(3:4));
     if (ai < bi)
       curv = [curv2, curv2 .* a ./ b];
     else
       curv = [curv2 .* a ./ b, curv2];
     endif
   else
     curv = curv2;
   endif
 
-  if (all (curv) < 0.01)
+  if (all (curv < 0.01))
     ## Special case : no curvature
     x = [pos(1), pos(1) + pos(3), pos(1) + pos(3), pos(1), pos(1)];
     y = [pos(2), pos(2), pos(2) + pos(4), pos(2) + pos(4), pos(2)];
   else
     p = pi / 2 * [0 : 15] / 15;
-    c = curv .* pos(3 : 4) / 2;
+    c = curv .* pos(3:4) / 2;
     cx = c(1) * sin (p) - c(1);
     cy = c(2) * cos (p) - c(2);
     x = [pos(1) - fliplr(cx), pos(1) + pos(3) + cx, ...
          pos(1) + pos(3) + fliplr(cx), pos(1) - cx, pos(1)];
     y = [pos(2) - fliplr(cy), pos(2) - cy, pos(2) + pos(4) + fliplr(cy), ...
          pos(2) + pos(4) + cy, pos(2) + c(2)];
   endif
 
   hg = hggroup ();
 
-  h = patch ("xdata", x(:), "ydata", y(:), "facecolor", fc, "edgecolor", ec, ...
+  h = patch ("xdata", x(:), "ydata", y(:), "facecolor", fc, "edgecolor", ec,
              "parent", hg, varargin{:});
 
   addproperty ("curvature", hg, "data", curv2);
   addproperty ("position",  hg, "data", pos);
   addproperty ("edgecolor", hg, "patchedgecolor", get (h, "edgecolor"));
   addproperty ("linewidth", hg, "patchlinewidth", get (h, "linewidth"));
   addproperty ("linestyle", hg, "patchlinestyle", get (h, "linestyle"));
   addproperty ("facecolor", hg, "patchfacecolor", get (h, "facecolor"));
@@ -161,68 +160,67 @@ function hg = __rectangle__ (hax, vararg
   addlistener (hg, "curvature", @update_data);
   addlistener (hg, "position",  @update_data);
   addlistener (hg, "edgecolor", @update_props);
   addlistener (hg, "linewidth", @update_props);
   addlistener (hg, "linestyle", @update_props);
   addlistener (hg, "facecolor", @update_props);
 endfunction
 
-function update_data (h, d)
+function update_data (h, ~)
   persistent recursion = false;
 
   ## Don't allow recursion
-  if (!recursion)
+  if (! recursion)
     unwind_protect
       recursion = true;
 
       kids = get (h, "children");
       pos = get (h, "position");
       curv2 = get (h, "curvature");
 
       if (numel (curv2) == 1)
-        [a, ai] = min (pos (3 : 4));
-        [b, bi] = max (pos (3 : 4));
+        [a, ai] = min (pos(3:4));
+        [b, bi] = max (pos(3:4));
         if (ai < bi)
           curv = [curv2, curv2 .* a ./ b];
         else
           curv = [curv2 .* a ./ b, curv2];
         endif
       else
         curv = curv2;
       endif
 
-      if (all (curv) < 0.01)
+      if (all (curv < 0.01))
         ## Special case : no curvature
         x = [pos(1), pos(1) + pos(3), pos(1) + pos(3), pos(1), pos(1)];
         y = [pos(2), pos(2), pos(2) + pos(4), pos(2) + pos(4), pos(2)];
       else
         p = pi / 2 * [0 : 15] / 15;
-        c = curv .* pos(3 : 4) / 2;
+        c = curv .* pos(3:4) / 2;
         cx = c(1) * sin (p) - c(1);
         cy = c(2) * cos (p) - c(2);
         x = [pos(1) - fliplr(cx), pos(1) + pos(3) + cx, ...
              pos(1) + pos(3) + fliplr(cx), pos(1) - cx, pos(1)];
         y = [pos(2) - fliplr(cy), pos(2) - cy, pos(2) + pos(4) + fliplr(cy), ...
              pos(2) + pos(4) + cy, pos(2) + c(2)];
       endif
 
       set (kids, "xdata", x, "ydata", y);
     unwind_protect_cleanup
       recursion = false;
     end_unwind_protect
   endif
 endfunction
 
-function update_props (h, d)
+function update_props (h, ~)
   kids = get (h, "children");
-  set (kids, "edgecolor", get (h, "edgecolor"),
-             "linewidth", get (h, "linewidth"),
-             "linestyle", get (h, "linestyle"),
-             "facecolor", get (h, "facecolor"));
+  set (kids, {"edgecolor", "linewidth", "linestyle", "facecolor"},
+     get (h, {"edgecolor", "linewidth", "linestyle", "facecolor"}));
+  
 endfunction
 
 
 %!demo
 %! clf;
 %! axis equal;
 %! rectangle ('Position', [0.05, 0.05, 0.9, 0.9], 'Curvature', [0.5, 0.5]);
 %! title ('rectangle() with corners curved');
