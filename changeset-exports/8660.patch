# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1233739102 -3600
#      Wed Feb 04 10:18:22 2009 +0100
# Node ID f274fbc297476291cfbef882f7b9ce6dc105c8f9
# Parent  9792c26bffc77c76beb6d568d5de2ea45d00cdca
chunked buffer allocation for pointers

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2009-02-04  Jaroslav Hajek  <highegg@gmail.com>
+
+	* oct-locbuf.h: Specialize OCTAVE_LOCAL_BUFFER to use chunked
+	allocation for pointers and const pointers.
+
 2009-02-03  Benjamin Lindner  <lindnerben@gmx.net>
 	
 	* Makefile.in: Add missing library reference.
 
 2009-02-03  Jaroslav Hajek  <highegg@gmail.com>
 
 	* Array.cc (Array<T>::sort (octave_idx_type, sortmode)):
 	Copy array on-the-fly.
diff --git a/liboctave/oct-locbuf.h b/liboctave/oct-locbuf.h
--- a/liboctave/oct-locbuf.h
+++ b/liboctave/oct-locbuf.h
@@ -97,16 +97,33 @@ SPECIALIZE_POD_BUFFER (long);
 SPECIALIZE_POD_BUFFER (unsigned long);
 SPECIALIZE_POD_BUFFER (float);
 SPECIALIZE_POD_BUFFER (double);
 // FIXME: Are these guaranteed to be POD and satisfy alignment?
 SPECIALIZE_POD_BUFFER (Complex);
 SPECIALIZE_POD_BUFFER (FloatComplex);
 // MORE ?
 
+// All pointers and const pointers are also POD types.
+template <class T>
+class octave_local_buffer<T *> : private octave_chunk_buffer
+{
+public:
+  octave_local_buffer (size_t size) : octave_chunk_buffer (size * sizeof (T *)) { }
+  operator T **() const { return reinterpret_cast<T **> (this->data ()); }
+};
+
+template <class T>
+class octave_local_buffer<const T *> : private octave_chunk_buffer
+{
+public:
+  octave_local_buffer (size_t size) : octave_chunk_buffer (size * sizeof (const T *)) { }
+  operator const T **() const { return reinterpret_cast<const T **> (this->data ()); }
+};
+
 // If the compiler supports dynamic stack arrays, we can use the attached hack
 // to place small buffer arrays on the stack. It may be even faster than our
 // obstack-like optimization, but is dangerous because stack is a very limited
 // resource, so we disable it.
 #if 0 //defined (HAVE_DYNAMIC_AUTO_ARRAYS)
 
 // Maximum buffer size (in bytes) to be placed on the stack.
 
