# HG changeset patch
# User jwe
# Date 1147883918 0
#      Wed May 17 16:38:38 2006 +0000
# Node ID 368ce5470c90f2777f8c352893d37f6606cd89de
# Parent  6c7d28e816c8ef546a64d5ff550b5abf0d2836b4
[project @ 2006-05-17 16:38:38 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2006-05-17  John W. Eaton  <jwe@octave.org>
+
+	* symtab.cc (Vwhos_line_format): Show class instead of type.
+	(symbol_table::parse_whos_line_format):
+	Use 't' for "Type" and 'c' for "Class".
+	(symbol_record::print_symbol_info_line): Likewise.
+	(maybe_list_cmp_fcn): Fix casts.
+
 2006-05-11  John W. Eaton  <jwe@octave.org>
 
 	* octave.cc (IMAGE_PATH_OPTION): New macro.
 	(usage_string, verbose_usage): Include --image-path option.
 	(long_opts): Include --image-path.
 	(octave_main): Handle IMAGE_PATH_OPTION.
 
 	* toplev.cc (Foctave_config_info): Delete fcnfilepath, imagepath,
diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -58,17 +58,17 @@ unsigned long int symbol_table::symtab_c
 // warning message.  Zero means it should be considered an error.
 static int Vvariables_can_hide_functions = 1;
 
 // Nonzero means we print debugging info about symbol table lookups.
 static bool Vdebug_symtab_lookups = false;
 
 // Defines layout for the whos/who -long command
 std::string Vwhos_line_format
-  = "  %p:4; %ln:6; %cs:16:6:8:1;  %rb:12;  %lt:-1;\n";
+  = "  %p:4; %ln:6; %cs:16:6:8:1;  %rb:12;  %lc:-1;\n";
 
 octave_allocator
 symbol_record::symbol_def::allocator (sizeof (symbol_record::symbol_def));
 
 #define SYMBOL_DEF symbol_record::symbol_def
 
 std::string
 SYMBOL_DEF::type_as_string (void) const
@@ -560,16 +560,20 @@ symbol_record::print_symbol_info_line (s
 	    }
 
 	  switch (param.command)
 	    {
 	    case 'b':
 	      os << byte_size ();
 	      break;
 
+	    case 'c':
+	      os << class_name ();
+	      break;
+
 	    case 'e':
 	      os << capacity ();
 	      break;
 
 	    case 'n':
 	      os << name ();
 	      break;
 
@@ -1157,18 +1161,18 @@ symbol_table::name_list (const string_ve
     names.qsort ();
 
   return names;
 }
 
 static int
 maybe_list_cmp_fcn (const void *a_arg, const void *b_arg)
 {
-  const symbol_record *a = static_cast<const symbol_record *> (a_arg);
-  const symbol_record *b = static_cast<const symbol_record *> (b_arg);
+  const symbol_record *a = *(static_cast<symbol_record *const*> (a_arg));
+  const symbol_record *b = *(static_cast<symbol_record *const*> (b_arg));
 
   std::string a_nm = a->name ();
   std::string b_nm = b->name ();
 
   return a_nm.compare (b_nm);
 }
 
 void
@@ -1266,43 +1270,45 @@ symbol_table::parse_whos_line_format (Ar
   int idx;
   size_t format_len = Vwhos_line_format.length ();
   char garbage;
   std::list<whos_parameter> params;
 
   size_t bytes1;
   int elements1;
 
-  int len = symbols.length (), i;
+  int len = symbols.length ();
 
-  std::string param_string = "benpst";
+  std::string param_string = "bcenpst";
   Array<int> param_length (dim_vector (param_string.length (), 1));
   Array<std::string> param_names (dim_vector (param_string.length (), 1));
-  size_t pos_b, pos_t, pos_e, pos_n, pos_p, pos_s;
+  size_t pos_b, pos_c, pos_e, pos_n, pos_p, pos_s, pos_t;
 
   pos_b = param_string.find ('b'); // Bytes
-  pos_t = param_string.find ('t'); // (Type aka) Class
+  pos_c = param_string.find ('c'); // Class
   pos_e = param_string.find ('e'); // Elements
   pos_n = param_string.find ('n'); // Name
   pos_p = param_string.find ('p'); // Protected
   pos_s = param_string.find ('s'); // Size
+  pos_t = param_string.find ('t'); // Type
 
   param_names(pos_b) = "Bytes";
-  param_names(pos_t) = "Class";
+  param_names(pos_c) = "Class";
   param_names(pos_e) = "Elements";
   param_names(pos_n) = "Name";
   param_names(pos_p) = "Prot";
   param_names(pos_s) = "Size";
+  param_names(pos_t) = "Type";
 
-  for (i = 0; i < 6; i++)
+  for (size_t i = 0; i < param_string.length (); i++)
     param_length(i) = param_names(i) . length ();
 
   // Calculating necessary spacing for name column,
   // bytes column, elements column and class column
-  for (i = 0; i < static_cast<int> (len); i++)
+  for (int i = 0; i < static_cast<int> (len); i++)
     {
       std::stringstream ss1, ss2;
       std::string str;
 
       str = symbols(i)->name ();
       param_length(pos_n) = ((str.length ()
 			      > static_cast<size_t> (param_length(pos_n)))
 			     ? str.length () : param_length(pos_n));
@@ -1711,16 +1717,18 @@ DEFUN (whos_line_format, args, nargout,
 @deftypefn {Built-in Function} {@var{val} =} whos_line_format ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} whos_line_format (@var{new_val})\n\
 Query or set the format string used by the @code{whos}.\n\
 \n\
 The following escape sequences may be used in the format:\n\
 @table @code\n\
 @item %b\n\
 Prints number of bytes occupied by variables.\n\
+@item %c\n\
+Prints class names of variables.\n\
 @item %e\n\
 Prints elements held by variables.\n\
 @item %n\n\
 Prints variable names.\n\
 @item %p\n\
 Prints protection attributtes of variables.\n\
 @item %s\n\
 Prints dimensions of variables.\n\
@@ -1746,17 +1754,17 @@ tells how many columns the parameter wil
 print_dims tells how many dimensions to print. If number of\n\
 dimensions exceeds print_dims, dimensions will be printed like\n\
 x-D.\n\
 center-specific and print_dims may only be applied to command\n\
 %s. A negative value for print_dims will cause Octave to print all\n\
 dimensions whatsoever.\n\
 balance specifies the offset for printing of the dimensions string.\n\
 \n\
-The default format is \"  %p:4; %ln:6; %cs:16:6:8:1;  %rb:12;  %lt:-1;\\n\".\n\
+The default format is \"  %p:4; %ln:6; %cs:16:6:8:1;  %rb:12;  %lc:-1;\\n\".\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (whos_line_format);
 }
 
 DEFUN (variables_can_hide_functions, args, nargout,
     "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{val} =} variables_can_hide_functions ()\n\
