# HG changeset patch
# User jwe
# Date 1188924859 0
#      Tue Sep 04 16:54:19 2007 +0000
# Node ID 8057825b748f7a1c64c8207c780499c7f8b173b6
# Parent  5fddcbbe880ee62c8f16501ed557a220a3e7fa33
[project @ 2007-09-04 16:54:19 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2007-09-04  Gabriele Pannocchia  <g.pannocchia@ing.unipi.it>
+
+	* DLD-FUNCTIONS/__qp__.cc (qp): Use Wact(j) == i - n_eq when
+	checking for blocking constraint.  Don't resize lambda_tmp.  Only
+	compute Y = Aact.pseudo_inverse () if it is needed.
+
 2007-08-31  Michael Goffioul <michael.goffioul@gmail.com>
 
 	* ls-mat-ascii.cc (get_lines_and_columns): Check beg variable for
 	NPOS to avoid segmentation fault. 
 
 	* load-path.cc (load_path::do_find_file): Do not assume paths
 	use forward slashes.
 
diff --git a/src/DLD-FUNCTIONS/__qp__.cc b/src/DLD-FUNCTIONS/__qp__.cc
--- a/src/DLD-FUNCTIONS/__qp__.cc
+++ b/src/DLD-FUNCTIONS/__qp__.cc
@@ -222,19 +222,16 @@ qp (const Matrix& H, const ColumnVector&
 
 	  Matrix Z = null (Aact, rank);
 
 	  octave_idx_type dimZ = n - rank;
 
 	  // FIXME -- still remain to handle the case of
 	  // non-full rank active set matrix.
 
-	  // Computing the Y matrix (orthogonal to Z)
-	  Y = Aact.pseudo_inverse ();
-
 	  // Reduced Hessian
 	  Matrix Zt = Z.transpose ();
 	  Matrix rH = Zt * H * Z;
 
 	  octave_idx_type pR = 0;
 
 	  if (dimZ > 0)
 	    {
@@ -312,26 +309,20 @@ qp (const Matrix& H, const ColumnVector&
 	    // Solution is found because no inequality
 	    // constraints are active.
 	    done = true;
 	  else
 	    {
 	      // Computing the multipliers only for the inequality
 	      // constraints that are active.  We do NOT compute
 	      // multipliers for the equality constraints.
+ 	      Y = Aact.pseudo_inverse ();
 	      Matrix Yt = Y.transpose ();
 	      Yt = Yt.extract_n (n_eq, 0, n_act-n_eq, n);
 	      lambda_tmp = Yt * (g + H * p);
-	      if (n_act - n_eq < n_in)
-		{
-		  lambda_tmp.resize (n_in, 0.0);
-
-		  for (octave_idx_type i = n_act-n_eq; i < n_in; i++)
-		    lambda_tmp(i) = 0;
-		}
 
 	      // Checking the multipliers.  We remove the most
 	      // negative from the set (if any).
 	      double min_lambda = lambda_tmp.min ();
 	      if (min_lambda >= 0)
 		{
 		  // Solution is found.
 		  done = true;
@@ -384,17 +375,17 @@ qp (const Matrix& H, const ColumnVector&
 	      octave_idx_type is_block = -1;
 
 	      for (octave_idx_type i = 0; i < n_in; i++)
 		{
 		  bool found = false;
 
 		  for (octave_idx_type j = 0; j < n_act-n_eq; j++)
 		    {
-		      if (Wact(j) == i)
+		      if (Wact(j) == i - n_eq)
 			{
 			  found = true;
 			  break;
 			}
 		    }
 
 		  if (! found)
 		    {
