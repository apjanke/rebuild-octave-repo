# HG changeset patch
# User jwe
# Date 948277579 0
#      Wed Jan 19 10:26:19 2000 +0000
# Node ID 8e36c45e3a612051c3bd828036e4a5906dcfee1d
# Parent  d25bc039237bec8f505881b833de8f6ebbb198c8
[project @ 2000-01-19 10:26:18 by jwe]

diff --git a/doc/interpreter/arith.txi b/doc/interpreter/arith.txi
--- a/doc/interpreter/arith.txi
+++ b/doc/interpreter/arith.txi
@@ -155,17 +155,19 @@ sin ([1, 2; 3, 4])
 
 @DOCSTRING(cumprod)
 
 @DOCSTRING(sumsq)
 
 @node Special Functions, Mathematical Constants, Sums and Products, Arithmetic
 @section Special Functions
 
-@DOCSTRING(bessel)
+@DOCSTRING(besselj)
+
+@DOCSTRING(airy)
 
 @DOCSTRING(beta)
 
 @DOCSTRING(betainc)
 
 @DOCSTRING(bincoeff)
 
 @DOCSTRING(erf)
diff --git a/scripts/control/system/is_signal_list.m b/scripts/control/system/is_signal_list.m
--- a/scripts/control/system/is_signal_list.m
+++ b/scripts/control/system/is_signal_list.m
@@ -11,17 +11,17 @@
 ## ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 ## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ## for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
-## -*- texiofn -*-
+## -*- texinfo -*-
 ## @deftypefn {Function File} {} is_signal_list (@var{mylist})
 ## Return true if @var{mylist} is a list of individual strings.
 ## @end deftypefn
 
 function flg = is_signal_list(mylist)
 
   flg = is_list(mylist);
 
diff --git a/scripts/linear-algebra/krylovb.m b/scripts/linear-algebra/krylovb.m
--- a/scripts/linear-algebra/krylovb.m
+++ b/scripts/linear-algebra/krylovb.m
@@ -11,30 +11,20 @@
 ## ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 ## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ## for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA.
 
-## function [U, Ucols] = krylovb (A, V, k ,eps1, pflg);
-## construct orthogonal basis U of block Krylov subspace;
-## [V AV A^2*V ... A^(k+1)*V];
-## method used: householder reflections to guard against loss of
-## orthogonality
-## eps1: threshhold for 0 (optional, default: 1e-12)
-## pflg: permutation flag (optional)
-## outputs:
-## returned basis U is orthogonal matrix; due to "zeroed"
-## columns of product, may not satisfy A U = U H identity
-## Ucols: dimension of span of krylov subspace (based on eps1)
-## if k > m-1, krylov returns the Hessenberg decompostion of A.
-##
-## Note: krylovb directly calls and is superseded by krylov.
+## -*- texinfo -*-
+## @deftypefn {Function File} {[@var{u}, @var{ucols}] =} krylovb (@var{a}, @var{v}, @var{k}, @var{eps1}, @var{pflg})
+## See @code{krylov}.
+## @end deftypefn
 
 function [Uret, Ucols] = krylovb (A, V, k, eps1, pflg)
 
   switch (nargin)
     case (3)
       [Uret, H, Ucols] = krylov (A, V, k);
     case (4)
       [Uret, H, Ucols] = krylov (A, V, k, eps1);
diff --git a/src/DLD-FUNCTIONS/besselj.cc b/src/DLD-FUNCTIONS/besselj.cc
--- a/src/DLD-FUNCTIONS/besselj.cc
+++ b/src/DLD-FUNCTIONS/besselj.cc
@@ -230,166 +230,108 @@ do_bessel (enum bessel_type type, const 
     }
   else
     print_usage (fn);
 
   return retval;
 }
 
 DEFUN_DLD (besselj, args, nargout,
-  "[J, IERR] = BESSELJ (ALPHA, X [, 1])\n\
-\n\
-Compute Bessel functions of the first kind.\n\
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {[@var{j}, @var{ierr}] =} besselj (@var{alpha}, @var{x}, @var{opt})\n\
+@deftypefnx {Loadable Function} {[@var{y}, @var{ierr}] =} bessely (@var{alpha}, @var{x}, @var{opt})\n\
+@deftypefnx {Loadable Function} {[@var{i}, @var{ierr}] =} besseli (@var{alpha}, @var{x}, @var{opt})\n\
+@deftypefnx {Loadable Function} {[@var{k}, @var{ierr}] =} besselk (@var{alpha}, @var{x}, @var{opt})\n\
+@deftypefnx {Loadable Function} {[@var{h}, @var{ierr}] =} besselh (@var{alpha}, @var{k}, @var{x}, @var{opt})\n\
+Compute Bessel or Hankel functions of various kinds:\n\
 \n\
-If a third argument is supplied, scale the result by exp(-I*Z) for\n\
-K = 1 or exp(I*Z) for K = 2.\n\
+@table @code\n\
+@item besselj\n\
+Bessel functions of the first kind.\n\
+@item bessely\n\
+Bessel functions of the second kind.\n\
+@item besseli\n\
+Modified Bessel functions of the first kind.\n\
+@item besselk\n\
+Modified Bessel functions of the second kind.\n\
+@item besselh\n\
+Compute Hankel functions of the first (@var{k} = 1) or second (@var{k}\n\
+ = 2) kind.\n\
+@end table\n\
 \n\
-If ALPHA is a scalar, the result is the same size as X.  If X is a\n\
-scalar, the result is the same size as ALPHA.  If ALPHA is a row\n\
-vector and X is a column vector, the result is a matrix with\n\
-length(X) rows and length(ALPHA) columns.  Otherwise, ALPHA and X must\n\
-conform and the result will be the same size.\n\
+If thet argumemt @var{opt} is supplied, the result is scaled by the\n\
+@code{exp (-I*@var{x})} for @var{k} = 1 or @code{exp (I*@var{x})} for\n\
+ @var{K} = 2.\n\
 \n\
-ALPHA must be real.  X may be complex.\n\
+If @var{alpha} is a scalar, the result is the same size as @var{x}.\n\
+If @var{x} is a scalar, the result is the same size as @var{alpha}.\n\
+If @var{alpha} is a row vector and @var{x} is a column vector, the\n\
+result is a matrix with @code{length (@var{x})} rows and\n\
+@code{length (@var{alpha})} columns.  Otherwise, @var{alpha} and\n\
+@var{x} must conform and the result will be the same size.\n\
 \n\
-If requested, IERR contains the following status information and is\n\
-the same size as the result.\n\
+The value of @var{alpha} must be real.  The value of @var{x} may be\n\
+complex.\n\
+\n\
+If requested, @var{ierr} contains the following status information\n\
+and is the same size as the result.\n\
 \n
-  0  normal return\n\
-  1  input error, return NaN\n\
-  2  overflow, return Inf\n\
-  3  loss of significance by argument reduction results in less than\n\
-     half of machine accuracy\n\
-  4  complete loss of significance by argument reduction, return NaN\n\
-  5  error -- no computation, algorithm termination condition not met,\n\
-     return NaN")
+@enumerate 0\n\
+@item\n\
+Normal return.\n\
+@item\n\
+Input error, return @code{NaN}.\n\
+@item\n\
+Overflow, return @code{Inf}.\n\
+@item\n\
+Loss of significance by argument reduction results in less than\n\
+half of machine accuracy.\n\
+@item\n\
+Complete loss of significance by argument reduction, return @code{NaN}.\n\
+@item\n\
+Error---no computation, algorithm termination condition not met,\n\
+return @code{NaN}.\n\
+@end enumerate\n\
+@end deftypefn")
 {
   return do_bessel (BESSEL_J, "besselj", args, nargout);
 }
 
 DEFUN_DLD (bessely, args, nargout,
-  "[Y, IERR] = BESSELY (ALPHA, X [, 1])\n\
-\n\
-Compute Bessel functions of the second kind.\n\
-\n\
-If a third argument is supplied, scale the result by exp(-I*Z) for\n\
-K = 1 or exp(I*Z) for K = 2.\n\
-\n\
-If ALPHA is a scalar, the result is the same size as X.  If X is a\n\
-scalar, the result is the same size as ALPHA.  If ALPHA is a row\n\
-vector and X is a column vector, the result is a matrix with\n\
-length(X) rows and length(ALPHA) columns.  Otherwise, ALPHA and X must\n\
-conform and the result will be the same size.\n\
-\n\
-ALPHA must be real.  X may be complex.\n\
-\n\
-If requested, IERR contains the following status information and is\n\
-the same size as the result.\n\
-\n
-  0  normal return\n\
-  1  input error, return NaN\n\
-  2  overflow, return Inf\n\
-  3  loss of significance by argument reduction results in less than\n\
-     half of machine accuracy\n\
-  4  complete loss of significance by argument reduction, return NaN\n\
-  5  error -- no computation, algorithm termination condition not met,\n\
-     return NaN")
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {[@var{y}, @var{ierr}] =} bessely (@var{alpha}, @var{x}, @var{opt})\n\
+See besselj.\n\
+@end deftypefn")
 {
   return do_bessel (BESSEL_Y, "bessely", args, nargout);
 }
 
 DEFUN_DLD (besseli, args, nargout,
-  "[I, IERR] = BESSELI (ALPHA, X [, 1])\n\
-\n\
-Compute modified Bessel functions of the first kind.\n\
-\n\
-If a third argument is supplied, scale the result by exp(-I*Z) for\n\
-K = 1 or exp(I*Z) for K = 2.\n\
-\n\
-If ALPHA is a scalar, the result is the same size as X.  If X is a\n\
-scalar, the result is the same size as ALPHA.  If ALPHA is a row\n\
-vector and X is a column vector, the result is a matrix with\n\
-length(X) rows and length(ALPHA) columns.  Otherwise, ALPHA and X must\n\
-conform and the result will be the same size.\n\
-\n\
-ALPHA must be real.  X may be complex.\n\
-\n\
-If requested, IERR contains the following status information and is\n\
-the same size as the result.\n\
-\n
-  0  normal return\n\
-  1  input error, return NaN\n\
-  2  overflow, return Inf\n\
-  3  loss of significance by argument reduction results in less than\n\
-     half of machine accuracy\n\
-  4  complete loss of significance by argument reduction, return NaN\n\
-  5  error -- no computation, algorithm termination condition not met,\n\
-     return NaN")
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {[@var{i}, @var{ierr}] =} besseli (@var{alpha}, @var{x}, @var{opt})\n\
+See besselj.\n\
+@end deftypefn")
 {
   return do_bessel (BESSEL_I, "besseli", args, nargout);
 }
 
 DEFUN_DLD (besselk, args, nargout,
-  "[K, IERR] = BESSELK (ALPHA, X [, 1])\n\
-\n\
-Compute modified Bessel functions of the second kind.\n\
-\n\
-If a third argument is supplied, scale the result by exp(-I*Z) for\n\
-K = 1 or exp(I*Z) for K = 2.\n\
-\n\
-If ALPHA is a scalar, the result is the same size as X.  If X is a\n\
-scalar, the result is the same size as ALPHA.  If ALPHA is a row\n\
-vector and X is a column vector, the result is a matrix with\n\
-length(X) rows and length(ALPHA) columns.  Otherwise, ALPHA and X must\n\
-conform and the result will be the same size.\n\
-\n\
-ALPHA must be real.  X may be complex.\n\
-\n\
-If requested, IERR contains the following status information and is\n\
-the same size as the result.\n\
-\n
-  0  normal return\n\
-  1  input error, return NaN\n\
-  2  overflow, return Inf\n\
-  3  loss of significance by argument reduction results in less than\n\
-     half of machine accuracy\n\
-  4  complete loss of significance by argument reduction, return NaN\n\
-  5  error -- no computation, algorithm termination condition not met,\n\
-     return NaN")
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {[@var{k}, @var{ierr}] =} besselk (@var{alpha}, @var{x}, @var{opt})\n\
+See besselj.\n\
+@end deftypefn")
 {
   return do_bessel (BESSEL_K, "besselk", args, nargout);
 }
 
 DEFUN_DLD (besselh, args, nargout,
-  "[H, IERR] = besselh (ALPHA, K, X [, 1])\n\
-\n\
-Compute Hankel functions of the first (K = 1) or second (K = 2) kind.\n\
-\n\
-If a fourth argument is supplied, scale the result by exp(-I*Z) for\n\
-K = 1 or exp(I*Z) for K = 2.\n\
-\n\
-If ALPHA is a scalar, the result is the same size as X.  If X is a\n\
-scalar, the result is the same size as ALPHA.  If ALPHA is a row\n\
-vector and X is a column vector, the result is a matrix with\n\
-length(X) rows and length(ALPHA) columns.  Otherwise, ALPHA and X must\n\
-conform and the result will be the same size.\n\
-\n\
-ALPHA must be real.  X may be complex.\n\
-\n\
-If requested, IERR contains the following status information and is\n\
-the same size as the result.\n\
-\n
-  0  normal return\n\
-  1  input error, return NaN\n\
-  2  overflow, return Inf\n\
-  3  loss of significance by argument reduction results in less than\n\
-     half of machine accuracy\n\
-  4  complete loss of significance by argument reduction, return NaN\n\
-  5  error -- no computation, algorithm termination condition not met,\n\
-     return NaN")
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {[@var{h}, @var{ierr}] =} besselh (@var{alpha}, @var{k}, @var{x}, @var{opt})\n\
+See besselj.\n\
+@end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   int kind = 1;
 
   if (nargin == 2)
@@ -422,43 +364,55 @@ the same size as the result.\n\
     }
   else
     print_usage ("besselh");
 
   return retval;
 }
 
 DEFUN_DLD (airy, args, nargout,
-  "[A, IERR] = airy (K, Z, [, 1])\n\
-\n\
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {[@var{a}, @var{ierr}] =} airy (@var{k}, @var{z}, @var{opt})\n\
 Compute Airy functions of the first and second kind, and their\n\
 derivatives.\n\
 \n\
+@example\n\
   K   Function   Scale factor (if a third argument is supplied)\n\
  ---  --------   ----------------------------------------------\n\
   0   Ai (Z)     exp ((2/3) * Z * sqrt (Z))\n\
   1   dAi(Z)/dZ  exp ((2/3) * Z * sqrt (Z))\n\
   2   Bi (Z)     exp (-abs (real ((2/3) * Z *sqrt (Z))))\n\
   3   dBi(Z)/dZ  exp (-abs (real ((2/3) * Z *sqrt (Z))))\n\
+@end example\n\
 \n\
-The function call airy (Z) is equivalent to airy (0, Z).\n\
+The function call @code{airy (@var{z})} is equivalent to
+@code{airy (0, @var{z})}.\n\
 \n\
-The result is the same size as Z.
+The result is the same size as @var{z}.
 \n\
-If requested, IERR contains the following status information and is\n\
-the same size as the result.\n\
+If requested, @var{ierr} contains the following status information and\n\
+is the same size as the result.\n\
 \n
-  0  normal return\n\
-  1  input error, return NaN\n\
-  2  overflow, return Inf\n\
-  3  loss of significance by argument reduction results in less than\n\
-     half of machine accuracy\n\
-  4  complete loss of significance by argument reduction, return NaN\n\
-  5  error -- no computation, algorithm termination condition not met,\n\
-     return NaN")
+@enumerate 0\n\
+@item\n\
+Normal return.\n\
+@item\n\
+Input error, return @code{NaN}.\n\
+@item\n\
+Overflow, return @code{Inf}.\n\
+@item\n\
+Loss of significance by argument reduction results in less than half\n\
+ of machine accuracy.\n\
+@item\n\
+Complete loss of significance by argument reduction, return @code{NaN}.\n\
+@item\n\
+Error---no computation, algorithm termination condition not met,\n\
+return @code{NaN}\n\
+@end enumerate\n\
+@end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin > 0 && nargin < 4)
     {
       bool scale = (nargin == 3);
