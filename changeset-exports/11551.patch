# HG changeset patch
# User Ben Abbott  <bpabbott@mac.com>
# Date 1295220685 18000
#      Sun Jan 16 18:31:25 2011 -0500
# Node ID 84fa2ba414eecf8d60e5a9fa1c84bce8b6206e16
# Parent  a9be431c1595bf74314c553d048c557f887758de
print.m: Fix printing to eps for DOS.

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2011-01-16  Ben Abbott <bpabbott@mac.com>
+
+	* plot/print.m: For DOS, connect the pipe to ghostscript (bug 31967),
+	and redirect to NUL instead of /dev/null.
+
 2011-01-16  John W. Eaton  <jwe@octave.org>
 
 	* gethelp.cc (main): Write function name along with file name in
 	comment.
 
 2011-01-16  David Bateman  <dbateman@free.fr>
 
 	* plot/__go_draw_axes__.m: Use "{}" as the default font.
diff --git a/scripts/plot/print.m b/scripts/plot/print.m
--- a/scripts/plot/print.m
+++ b/scripts/plot/print.m
@@ -315,71 +315,81 @@ function print (varargin)
         && ! strcmp (get (opts.figure, "__backend__"), "gnuplot"))
       color_props = {"color", "facecolor", "edgecolor", "colormap"};
       for c = 1:numel(color_props)
         h = findall (opts.figure, "-property", color_props{c});
         hnone = findall (opts.figure, color_props{c}, "none");
         h = setdiff (h, hnone);
         m = numel (props);
         for n = 1:numel(h)
-          rgb = get (h(n), color_props{c});
-          props(m+n).h = h(n);
-          props(m+n).name = color_props{c};
-          props(m+n).value = {get(h(n), color_props{c})};
-          xfer = repmat ([0.30, 0.59, 0.11], size (rgb, 1), 1);
-          if (isnumeric (rgb))
-            ## convert RGB color to RGB gray scale
-            ggg = repmat (sum (xfer .* rgb, 2), 1, 3);
-            set (h(n), color_props{c}, ggg)
+          if (ishandle (h(n)))
+            ## Need to verify objects exist since callbacks may delete objects
+            ## as the colors for others are modified.
+            rgb = get (h(n), color_props{c});
+            props(end+1).h = h(n);
+            props(end).name = color_props{c};
+            props(end).value = {get(h(n), color_props{c})};
+            if (isnumeric (rgb))
+              ## convert RGB color to RGB gray scale
+              xfer = repmat ([0.30, 0.59, 0.11], size (rgb, 1), 1);
+              ggg = repmat (sum (xfer .* rgb, 2), 1, 3);
+              set (h(n), color_props{c}, ggg)
+            endif
           endif
         endfor
       endfor
     endif
 
     if (! isempty (opts.font) || ! isempty (opts.fontsize))
       h = findall (opts.figure, "-property", "fontname");
       m = numel (props);
       for n = 1:numel(h)
-        if (! isempty (opts.font))
-          props(end+1).h = h(n);
-          props(end).name = "fontname";
-          props(end).value = {get(h(n), "fontname")};
+        if (ishandle (h(n)))
+          if (! isempty (opts.font))
+            props(end+1).h = h(n);
+            props(end).name = "fontname";
+            props(end).value = {get(h(n), "fontname")};
+          endif
         endif
-        if (! isempty (opts.fontsize))
-          props(end+1).h = h(n);
-          props(end).name = "fontsize";
-          props(end).value = {get(h(n), "fontsize")};
+        if (ishandle (h(n)))
+          if (! isempty (opts.fontsize))
+            props(end+1).h = h(n);
+            props(end).name = "fontsize";
+            props(end).value = {get(h(n), "fontsize")};
+          endif
         endif
       endfor
       if (! isempty (opts.font))
-        set (h, "fontname", opts.font)
+        set (h(ishandle(h)), "fontname", opts.font)
       endif
       if (! isempty (opts.fontsize))
         if (ischar (opts.fontsize))
           fontsize = str2double (opts.fontsize);
         else
           fontsize = opts.fontsize;
         endif
-        set (h, "fontsize", fontsize)
+        set (h(ishandle(h)), "fontsize", fontsize)
       endif
     endif
 
     ## call the backend print script
     switch (get (opts.figure, "__backend__"))
     case "gnuplot"
       opts = __gnuplot_print__ (opts);
     otherwise
       opts = __fltk_print__ (opts);
     endswitch
 
   unwind_protect_cleanup
     ## restore modified properties
     if (isstruct (props))
       for n = 1:numel(props)
-        set (props(n).h, props(n).name, props(n).value{1})
+        if (ishandle (props(n).h))
+          set (props(n).h, props(n).name, props(n).value{1})
+        endif
       endfor
     endif
 
     ## Unlink temporary files
     for n = 1:numel(opts.unlink)
       [status, output] = unlink (opts.unlink{n});
       if (status != 0)
         warning ("print.m: %s, '%s'", output, opts.unlink{n})
@@ -395,17 +405,17 @@ endfunction
 
 function cmd = epstool (opts, filein, fileout)
   ## As epstool does not work with pipes, a subshell is used to
   ## permit piping. Since this solution does not work with the DOS
   ## command shell, the -tight and -preview options are disabled if
   ## output must be piped.
 
   ## DOS Shell:
-  ##   copy con <filein> & epstool -bbox -preview-tiff <filein> <fileout> & del <filein>
+  ##   gs.exe [...] -sOutputFile=<filein> - & epstool -bbox -preview-tiff <filein> <fileout> & del <filein>
   ## Unix Shell;
   ##   cat > <filein> ; epstool -bbox -preview-tiff <filein> <fileout> ; rm <filein>
 
   dos_shell = (ispc () && ! isunix ());
 
   cleanup = "";
   if (nargin < 3)
     fileout = opts.name;
@@ -468,17 +478,22 @@ function cmd = epstool (opts, filein, fi
         cmd = "";
       endif
       if (! isempty (cmd))
         cmd = sprintf ("%s --quiet %s %s %s ", opts.epstool_binary,
                        cmd, filein, fileout);
       endif
       if (pipein)
         if (dos_shell)
-          cmd = sprintf ("copy con %s & %s", filein, cmd);
+          filein(filein=="'") = "\"";
+          gs_cmd = __ghostscript__ ("binary", opts.ghostscript.binary,
+                                    "device", "epswrite",
+                                    "source", "-",
+                                    "output", filein)
+          cmd = sprintf ("%s %s & %s", gs_cmd, filein, cmd);
         else
           cmd = sprintf ("cat > %s ; %s", filein, cmd);
         endif
       endif
       if (pipeout)
         if (dos_shell)
           cmd = sprintf ("%s & type %s", cmd, fileout);
         else
@@ -496,23 +511,31 @@ function cmd = epstool (opts, filein, fi
         endif
       endif
     elseif (isempty (opts.epstool_binary))
       error ("print:noepstool", "print.m: 'epstool' not found in PATH")
     endif
   else
     if (pipein && pipeout)
       if (dos_shell)
-        cmd = sprintf ("copy con %s & type %s", filein, fileout);
+        cmd = __ghostscript__ ("binary", opts.ghostscript.binary,
+                               "device", "epswrite",
+                               "source", "-",
+                               "output", "-");
       else
         cmd = " cat ";
       endif
     elseif (pipein && ! pipeout)
       if (dos_shell)
-        cmd = sprintf (" copy con %s ", fileout);
+        ## ghostscript expects double, not single, quotes
+        fileout(fileout=="'") = "\"";
+        cmd = __ghostscript__ ("binary", opts.ghostscript.binary,
+                               "device", "epswrite",
+                               "source", "-",
+                               "output", fileout);
       else
         cmd = sprintf (" cat > %s ", fileout);
       endif
     elseif (! pipein && pipeout)
       if (dos_shell)
         cmd = sprintf (" type %s ", filein);
       else
         cmd = sprintf (" cat %s ", filein);
@@ -533,17 +556,17 @@ endfunction
 function cmd = fig2dev (opts, devopt)
   if (nargin < 2)
     devopt =  opts.devopt;
   endif
   dos_shell = (ispc () && ! isunix ());
   if (! isempty (opts.fig2dev_binary))
     if (dos_shell)
       ## FIXME - is this the right thing to do for DOS?
-      cmd = sprintf ("%s -L %s 2> /dev/null", opts.fig2dev_binary, devopt);
+      cmd = sprintf ("%s -L %s 2> NUL", opts.fig2dev_binary, devopt);
     else
       cmd = sprintf ("%s -L %s 2> /dev/null", opts.fig2dev_binary, devopt);
     endif
   elseif (isempty (opts.fig2dev_binary))
     error ("print:nofig2dev", "print.m: 'fig2dev' not found in PATH")
   endif
   if (opts.debug)
     fprintf ("fig2dev command: '%s'\n", cmd)
@@ -606,17 +629,17 @@ endfunction
 
 function cmd = pstoedit (opts, devopt)
   if (nargin < 2)
     devopt =  opts.devopt;
   endif
   dos_shell = (ispc () && ! isunix ());
   if (! isempty (opts.pstoedit_binary))
     if (dos_shell)
-      cmd = sprintf ("%s -f %s 2> /dev/null", opts.pstoedit_binary, devopt);
+      cmd = sprintf ("%s -f %s 2> NUL", opts.pstoedit_binary, devopt);
     else
       ## FIXME - is this the right thing to do for DOS?
       cmd = sprintf ("%s -f %s 2> /dev/null", opts.pstoedit_binary, devopt);
     endif
   elseif (isempty (opts.pstoedit_binary))
     error ("print:nopstoedit", "print.m: 'pstoedit' not found in PATH")
   endif
   if (opts.debug)
