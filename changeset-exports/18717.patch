# HG changeset patch
# User Torsten <ttl@justmail.de>
# Date 1399045484 -7200
#      Fri May 02 17:44:44 2014 +0200
# Branch gui-release
# Node ID f017240310fbce6c6744d17523dbdbb1c4a543a7
# Parent  9ef65c422f533d3930c72cea2ce4b0d2c75e5847
disabling global shortcuts when terminal has focus as user preference

* main-window.h: new flag _prevent_readline__conflicts, new function
  configure_shortcuts

* main-window.cc (constructor): initialize new flag to true;
  (notice_settings): read value of flag from settings, configure shortcuts;
  (configure_shortcuts): new function setting all shortcuts from the settings;
  (construct): configure shortcuts via new function;
  (set_global_shortcuts): return if global shortcuts should not be disabled
  when terminal has focus, use new function configure_shortcuts;

* settings-dialog.ui: new checkbox in the shortcut tab whether global shortcuts
  should be desabled when terminal has focus or not

* settings-dialog.cc (constructor): read value for checkbox from settings;
  (write_changed_settings): write value of checkbox to the settings

diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -90,17 +90,18 @@ main_window::main_window (QWidget *p)
     community_news_window (0),
     _octave_qt_link (0),
     _clipboard (QApplication::clipboard ()),
     _cmd_queue (new QStringList ()),  // no command pending
     _cmd_processing (1),
     _cmd_queue_mutex (),
     _dbg_queue (new QStringList ()),  // no debug pending
     _dbg_processing (1),
-    _dbg_queue_mutex ()
+    _dbg_queue_mutex (),
+    _prevent_readline_conflicts (true)
 {
   QSettings *settings = resource_manager::get_settings ();
 
   bool connect_to_web = true;
   QDateTime last_checked;
   int serial = 0;
 
   if (settings)
@@ -676,17 +677,19 @@ main_window::notice_settings (const QSet
     _release_notes_icon = widget_icon_data[icon_set_found].path
                           + "ReleaseWidget.png";
   else
     _release_notes_icon = ":/actions/icons/logo.png";
 
   int icon_size = settings->value ("toolbar_icon_size",16).toInt ();
   _main_tool_bar->setIconSize (QSize (icon_size,icon_size));
 
-  set_global_shortcuts (true);
+  _prevent_readline_conflicts =
+    settings->value ("shortcuts/prevent_readline_conflicts", true).toBool ();
+  configure_shortcuts ();
   set_global_shortcuts (command_window_has_focus ());
 
   resource_manager::update_network_settings ();
 }
 
 
 void
 main_window::prepare_to_exit (void)
@@ -1277,17 +1280,17 @@ main_window::construct (void)
 #endif
 
   octave_link::post_event (this, &main_window::resize_command_window_callback);
 
   install___init_qt___functions ();
 
   Fregister_graphics_toolkit (ovl ("qt"));
 
-  set_global_shortcuts (true);
+  configure_shortcuts ();
 }
 
 
 void
 main_window::handle_octave_ready ()
 {
   // actions after the startup files are executed
   QSettings *settings = resource_manager::get_settings ();
@@ -2186,99 +2189,110 @@ void
 main_window::find_files_finished (int)
 {
 
 }
 
 void
 main_window::set_global_edit_shortcuts (bool enable)
 {
+  // this slot is called when editor gets/loses focus
   if (enable)
-    {
+    { // editor loses focus, set the global shortcuts
       shortcut_manager::set_shortcut (_copy_action, "main_edit:copy");
       shortcut_manager::set_shortcut (_paste_action, "main_edit:paste");
       shortcut_manager::set_shortcut (_undo_action, "main_edit:undo");
       shortcut_manager::set_shortcut (_select_all_action, "main_edit:select_all");
     }
   else
-    {
+    { // disable shortcuts that are also provided by the editor itself
       QKeySequence no_key = QKeySequence ();
       _copy_action->setShortcut (no_key);
       _paste_action->setShortcut (no_key);
       _undo_action->setShortcut (no_key);
       _select_all_action->setShortcut (no_key);
     }
 }
 
 void
+main_window::configure_shortcuts ()
+{
+  // file menu
+  shortcut_manager::set_shortcut (_open_action, "main_file:open_file");
+  shortcut_manager::set_shortcut (_new_script_action, "main_file:new_file");
+  shortcut_manager::set_shortcut (_new_function_action, "main_file:new_function");
+  shortcut_manager::set_shortcut (_new_function_action, "main_file:new_figure");
+  shortcut_manager::set_shortcut (_load_workspace_action, "main_file:load_workspace");
+  shortcut_manager::set_shortcut (_save_workspace_action, "main_file:save_workspace");
+  shortcut_manager::set_shortcut (_preferences_action, "main_file:preferences");
+  shortcut_manager::set_shortcut (_exit_action,"main_file:exit");
+
+  // edit menu
+  shortcut_manager::set_shortcut (_copy_action, "main_edit:copy");
+  shortcut_manager::set_shortcut (_paste_action, "main_edit:paste");
+  shortcut_manager::set_shortcut (_undo_action, "main_edit:undo");
+  shortcut_manager::set_shortcut (_select_all_action, "main_edit:select_all");
+  shortcut_manager::set_shortcut (_clear_clipboard_action, "main_edit:clear_clipboard");
+  shortcut_manager::set_shortcut (_find_files_action, "main_edit:find_in_files");
+  shortcut_manager::set_shortcut (_clear_command_history_action, "main_edit:clear_history");
+  shortcut_manager::set_shortcut (_clear_command_window_action, "main_edit:clear_command_window");
+  shortcut_manager::set_shortcut (_clear_workspace_action, "main_edit:clear_workspace");
+
+  // debug menu
+  shortcut_manager::set_shortcut (_debug_step_over, "main_debug:step_over");
+  shortcut_manager::set_shortcut (_debug_step_into, "main_debug:step_into");
+  shortcut_manager::set_shortcut (_debug_step_out,  "main_debug:step_out");
+  shortcut_manager::set_shortcut (_debug_continue,  "main_debug:continue");
+  shortcut_manager::set_shortcut (_debug_quit,  "main_debug:quit");
+
+  // window menu
+  shortcut_manager::set_shortcut (_show_command_window_action, "main_window:show_command");
+  shortcut_manager::set_shortcut (_show_history_action, "main_window:show_history");
+  shortcut_manager::set_shortcut (_show_workspace_action,  "main_window:show_workspace");
+  shortcut_manager::set_shortcut (_show_file_browser_action,  "main_window:show_file_browser");
+  shortcut_manager::set_shortcut (_show_editor_action, "main_window:show_editor");
+  shortcut_manager::set_shortcut (_show_documentation_action, "main_window:show_doc");
+  shortcut_manager::set_shortcut (_command_window_action, "main_window:command");
+  shortcut_manager::set_shortcut (_history_action, "main_window:history");
+  shortcut_manager::set_shortcut (_workspace_action,  "main_window:workspace");
+  shortcut_manager::set_shortcut (_file_browser_action,  "main_window:file_browser");
+  shortcut_manager::set_shortcut (_editor_action, "main_window:editor");
+  shortcut_manager::set_shortcut (_documentation_action, "main_window:doc");
+  shortcut_manager::set_shortcut (_reset_windows_action, "main_window:reset");
+
+  // help menu
+  shortcut_manager::set_shortcut (_ondisk_doc_action, "main_help:ondisk_doc");
+  shortcut_manager::set_shortcut (_online_doc_action, "main_help:online_doc");
+  shortcut_manager::set_shortcut (_report_bug_action, "main_help:report_bug");
+  shortcut_manager::set_shortcut (_octave_packages_action, "main_help:packages");
+  shortcut_manager::set_shortcut (_agora_action, "main_help:agora");
+  shortcut_manager::set_shortcut (_contribute_action, "main_help:contribute");
+  shortcut_manager::set_shortcut (_developer_action, "main_help:developer");
+  shortcut_manager::set_shortcut (_about_octave_action, "main_help:about");
+
+  // news menu
+  shortcut_manager::set_shortcut (_release_notes_action, "main_news:release_notes");
+  shortcut_manager::set_shortcut (_current_news_action, "main_news:community_news");
+}
+
+void
 main_window::set_global_shortcuts (bool set_shortcuts)
 {
+  // this slot is called when the terminal gets/loses focus
+
+  // return if the user don't want to use readline shortcuts
+  if (! _prevent_readline_conflicts)
+    return;
+
   if (set_shortcuts)
-    {
-
-      // file menu
-      shortcut_manager::set_shortcut (_open_action, "main_file:open_file");
-      shortcut_manager::set_shortcut (_new_script_action, "main_file:new_file");
-      shortcut_manager::set_shortcut (_new_function_action, "main_file:new_function");
-      shortcut_manager::set_shortcut (_new_function_action, "main_file:new_figure");
-      shortcut_manager::set_shortcut (_load_workspace_action, "main_file:load_workspace");
-      shortcut_manager::set_shortcut (_save_workspace_action, "main_file:save_workspace");
-      shortcut_manager::set_shortcut (_preferences_action, "main_file:preferences");
-      shortcut_manager::set_shortcut (_exit_action,"main_file:exit");
-
-      // edit menu
-      shortcut_manager::set_shortcut (_copy_action, "main_edit:copy");
-      shortcut_manager::set_shortcut (_paste_action, "main_edit:paste");
-      shortcut_manager::set_shortcut (_undo_action, "main_edit:undo");
-      shortcut_manager::set_shortcut (_select_all_action, "main_edit:select_all");
-      shortcut_manager::set_shortcut (_clear_clipboard_action, "main_edit:clear_clipboard");
-      shortcut_manager::set_shortcut (_find_files_action, "main_edit:find_in_files");
-      shortcut_manager::set_shortcut (_clear_command_history_action, "main_edit:clear_history");
-      shortcut_manager::set_shortcut (_clear_command_window_action, "main_edit:clear_command_window");
-      shortcut_manager::set_shortcut (_clear_workspace_action, "main_edit:clear_workspace");
-
-      // debug menu
-      shortcut_manager::set_shortcut (_debug_step_over, "main_debug:step_over");
-      shortcut_manager::set_shortcut (_debug_step_into, "main_debug:step_into");
-      shortcut_manager::set_shortcut (_debug_step_out,  "main_debug:step_out");
-      shortcut_manager::set_shortcut (_debug_continue,  "main_debug:continue");
-      shortcut_manager::set_shortcut (_debug_quit,      "main_debug:quit");
-
-      // window menu
-      shortcut_manager::set_shortcut (_show_command_window_action, "main_window:show_command");
-      shortcut_manager::set_shortcut (_show_history_action, "main_window:show_history");
-      shortcut_manager::set_shortcut (_show_workspace_action,  "main_window:show_workspace");
-      shortcut_manager::set_shortcut (_show_file_browser_action,  "main_window:show_file_browser");
-      shortcut_manager::set_shortcut (_show_editor_action, "main_window:show_editor");
-      shortcut_manager::set_shortcut (_show_documentation_action, "main_window:show_doc");
-      shortcut_manager::set_shortcut (_command_window_action, "main_window:command");
-      shortcut_manager::set_shortcut (_history_action, "main_window:history");
-      shortcut_manager::set_shortcut (_workspace_action,  "main_window:workspace");
-      shortcut_manager::set_shortcut (_file_browser_action,  "main_window:file_browser");
-      shortcut_manager::set_shortcut (_editor_action, "main_window:editor");
-      shortcut_manager::set_shortcut (_documentation_action, "main_window:doc");
-      shortcut_manager::set_shortcut (_reset_windows_action, "main_window:reset");
-
-      // help menu
-      shortcut_manager::set_shortcut (_ondisk_doc_action, "main_help:ondisk_doc");
-      shortcut_manager::set_shortcut (_online_doc_action, "main_help:online_doc");
-      shortcut_manager::set_shortcut (_report_bug_action, "main_help:report_bug");
-      shortcut_manager::set_shortcut (_octave_packages_action, "main_help:packages");
-      shortcut_manager::set_shortcut (_agora_action, "main_help:agora");
-      shortcut_manager::set_shortcut (_contribute_action, "main_help:contribute");
-      shortcut_manager::set_shortcut (_developer_action, "main_help:developer");
-      shortcut_manager::set_shortcut (_about_octave_action, "main_help:about");
-
-      // news menu
-      shortcut_manager::set_shortcut (_release_notes_action, "main_news:release_notes");
-      shortcut_manager::set_shortcut (_current_news_action, "main_news:community_news");
+    { // terminal loses focus: set the global shortcuts
+      configure_shortcuts ();
     }
   else
-    {
-
+    { // terminal gets focus: disable some shortcuts
       QKeySequence no_key = QKeySequence ();
 
       // file menu
       _open_action->setShortcut (no_key);
       _new_script_action->setShortcut (no_key);
       _new_function_action->setShortcut (no_key);
       _new_function_action->setShortcut (no_key);
       _load_workspace_action->setShortcut (no_key);
@@ -2306,17 +2320,16 @@ main_window::set_global_shortcuts (bool 
       _contribute_action->setShortcut (no_key);
       _developer_action->setShortcut (no_key);
       _about_octave_action->setShortcut (no_key);
 
       // news menu
       _release_notes_action->setShortcut (no_key);
       _current_news_action->setShortcut (no_key);
     }
-
 }
 
 void
 main_window::handle_show_doc (const QString& file)
 {
   doc_browser_window->setVisible (true);
   emit show_doc_signal (file);
 }
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -265,16 +265,18 @@ private:
   void exit_callback (void);
 
   void queue_command (QString command);
 
   void queue_debug (QString command);
 
   void execute_debug_callback ();
 
+  void configure_shortcuts ();
+
   bool confirm_exit_octave ();
 
   workspace_model *_workspace_model;
 
   // Toolbars.
   QStatusBar *status_bar;
 
   // Subwindows.
@@ -384,16 +386,18 @@ private:
   QStringList *_cmd_queue;
   QSemaphore   _cmd_processing;
   QMutex       _cmd_queue_mutex;
 
   // semaphore to synchronize debug signals and related callbacks
   QStringList *_dbg_queue;
   QSemaphore   _dbg_processing;
   QMutex       _dbg_queue_mutex;
+
+  bool _prevent_readline_conflicts;
 };
 
 class news_reader : public QObject
 {
   Q_OBJECT
 
 public:
 
diff --git a/libgui/src/settings-dialog.cc b/libgui/src/settings-dialog.cc
--- a/libgui/src/settings-dialog.cc
+++ b/libgui/src/settings-dialog.cc
@@ -266,16 +266,20 @@ settings_dialog::settings_dialog (QWidge
   ui->proxyPassword->setText (settings->value ("proxyPassword").toString ());
 
   // qorkspace colors
   read_workspace_colors (settings);
 
   // terminal colors
   read_terminal_colors (settings);
 
+  // shortcuts
+  ui->cb_prevent_readline_conflicts->setChecked (
+    settings->value ("shortcuts/prevent_readline_conflicts", true).toBool ());
+
 #ifdef HAVE_QSCINTILLA
   // editor styles: create lexer, read settings, and create dialog elements
   QsciLexer *lexer;
 #if defined (HAVE_LEXER_OCTAVE)
   lexer = new QsciLexerOctave ();
   read_lexer_settings (lexer,settings);
   delete lexer;
 #elif defined (HAVE_LEXER_MATLAB)
@@ -645,17 +649,16 @@ settings_dialog::write_changed_settings 
   QString cursorType;
   switch (ui->terminal_cursorType->currentIndex ())
     {
     case 0: cursorType = "ibeam"; break;
     case 1: cursorType = "block"; break;
     case 2: cursorType = "underline";  break;
     }
   settings->setValue ("terminal/cursorType", cursorType);
-  settings->sync ();
 
 #ifdef HAVE_QSCINTILLA
   // editor styles: create lexer, get dialog contents, and write settings
   QsciLexer *lexer;
 #if defined (HAVE_LEXER_OCTAVE)
   lexer = new QsciLexerOctave ();
   write_lexer_settings (lexer,settings);
   delete lexer;
@@ -680,20 +683,25 @@ settings_dialog::write_changed_settings 
   write_lexer_settings (lexer,settings);
   delete lexer;
 #endif
 
   write_workspace_colors (settings);
 
   write_terminal_colors (settings);
 
+  // shortcuts
+  settings->setValue ("shortcuts/prevent_readline_conflicts",
+                      ui->cb_prevent_readline_conflicts->isChecked ());
   shortcut_manager::write_shortcuts ();
 
+  // settings dialog's geometry
   settings->setValue ("settings/last_tab",ui->tabWidget->currentIndex ());
   settings->setValue ("settings/geometry",saveGeometry ());
+
   settings->sync ();
 }
 
 #ifdef HAVE_QSCINTILLA
 void
 settings_dialog::write_lexer_settings (QsciLexer *lexer, QSettings *settings)
 {
   QWidget *tab = ui->tabs_editor_lexers->
diff --git a/libgui/src/settings-dialog.ui b/libgui/src/settings-dialog.ui
--- a/libgui/src/settings-dialog.ui
+++ b/libgui/src/settings-dialog.ui
@@ -1679,16 +1679,40 @@
             <layout class="QVBoxLayout" name="verticalLayout_26">
              <property name="sizeConstraint">
               <enum>QLayout::SetDefaultConstraint</enum>
              </property>
              <property name="topMargin">
               <number>0</number>
              </property>
              <item>
+              <layout class="QHBoxLayout" name="horizontalLayout_15">
+               <item>
+                <widget class="QCheckBox" name="cb_prevent_readline_conflicts">
+                 <property name="toolTip">
+                  <string>Select this option to prevent conflicts with readline shortcuts</string>
+                 </property>
+                 <property name="text">
+                  <string>Disable global shortcuts when terminal window has focus</string>
+                 </property>
+                 <property name="checked">
+                  <bool>true</bool>
+                 </property>
+                </widget>
+               </item>
+              </layout>
+             </item>
+             <item>
+              <widget class="Line" name="line_9">
+               <property name="orientation">
+                <enum>Qt::Horizontal</enum>
+               </property>
+              </widget>
+             </item>
+             <item>
               <widget class="QLabel" name="label_21">
                <property name="text">
                 <string>Enter a new shortcut by double clicking on the related row.</string>
                </property>
               </widget>
              </item>
              <item>
               <layout class="QHBoxLayout" name="horizontalLayout_10">
