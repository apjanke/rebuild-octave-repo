# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1500319828 25200
#      Mon Jul 17 12:30:28 2017 -0700
# Node ID 2387ce42760169a200ea80ae7f95caf0effc1ce6
# Parent  58cb2f52ce6702a9a3cdd7ae1e4d4144b98fcdf4
improve handling of single-letter command line options (bug #51461)

* main.in.cc (main): Handle single-letter command line options whether they
are specified alone or as part of an aggregate (e.g. "octave -qf").

diff --git a/src/main.in.cc b/src/main.in.cc
--- a/src/main.in.cc
+++ b/src/main.in.cc
@@ -249,28 +249,48 @@ main (int argc, char **argv)
           // don't have to create a child process and wait for it to
           // exit.  But do exec "octave-gui", not "octave-cli", because
           // even if the --no-gui option is given, we may be asked to do
           // some plotting or ui* calls.
 
           start_gui = false;
           new_argv[k++] = argv[i];
         }
-      else if (! strcmp (argv[i], "--silent") || ! strcmp (argv[i], "--quiet")
-               || ! strcmp (argv[i], "-q"))
+      else if (! strcmp (argv[i], "--silent") || ! strcmp (argv[i], "--quiet"))
         {
           warn_display = false;
           new_argv[k++] = argv[i];
         }
-      else if (! strcmp (argv[i], "--no-window-system")
-               || ! strcmp (argv[i], "-W"))
+      else if (! strcmp (argv[i], "--no-window-system"))
         {
           no_display = true;
           new_argv[k++] = argv[i];
         }
+      else if (strlen (argv[i]) > 1 && argv[i][0] == '-' && argv[i][1] != '-')
+        {
+          // Handle all single-letter command line options here; they may
+          // occur alone or may be aggregated into a single argument.
+
+          size_t len = strlen (argv[i]);
+
+          for (size_t j = 1; j < len; j++)
+            switch (argv[i][j])
+              {
+                case 'W':
+                  no_display = true;
+                  break;
+                case 'q':
+                  warn_display = false;
+                  break;
+                default:
+                  break;
+              }
+
+          new_argv[k++] = argv[i];
+        }
       else
         new_argv[k++] = argv[i];
     }
 
   new_argv[k] = 0;
 
   if (no_display)
     {
