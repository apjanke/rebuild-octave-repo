# HG changeset patch
# User Markus MÃ¼tzel <markus.muetzel@gmx.de>
# Date 1549208134 -3600
#      Sun Feb 03 16:35:34 2019 +0100
# Node ID 879f22ca59c8cced23e52ea19e938fa0176508f0
# Parent  fec69a3108337a7c86305ec7f96a424fa1694d02
gl-render.cc: Omit minor grid and minor ticks if ticks are empty (bug #55633).

* gl-render.cc (draw_axes_[xyz]_grid): Omit minor grid and minor ticks if ticks
  are empty.

diff --git a/libinterp/corefcn/gl-render.cc b/libinterp/corefcn/gl-render.cc
--- a/libinterp/corefcn/gl-render.cc
+++ b/libinterp/corefcn/gl-render.cc
@@ -1482,40 +1482,42 @@ namespace octave
         double yPlaneN = props.get_yPlaneN ();
         double ypTick = props.get_ypTick ();
         double ypTickN = props.get_ypTickN ();
         double zPlane = props.get_zPlane ();
         double zPlaneN = props.get_zPlaneN ();
         double zpTick = props.get_zpTick ();
         double zpTickN = props.get_zpTickN ();
 
-        // X grid
-
+        // X ticks and grid properties
+        Matrix xticks = xform.xscale (props.get_xtick ().matrix_value ());
+        Matrix xmticks = xform.xscale (props.get_xminortickvalues ().matrix_value ());
+        bool do_xminortick = props.is_xminortick () && ! xticks.isempty ();
+        string_vector xticklabels = props.get_xticklabel ().string_vector_value ();
+        int wmax = 0;
+        int hmax = 0;
+        bool tick_along_z = nearhoriz || math::isinf (fy);
         double linewidth = props.get_linewidth ();
         std::string gridstyle = props.get_gridlinestyle ();
         std::string minorgridstyle = props.get_minorgridlinestyle ();
         Matrix gridcolor = props.get_gridcolor_rgb ();
         Matrix minorgridcolor = props.get_minorgridcolor_rgb ();
         double gridalpha = props.get_gridalpha ();
         double minorgridalpha = props.get_minorgridalpha ();
         bool do_xgrid = (props.is_xgrid () && (gridstyle != "none"));
         bool do_xminorgrid = (props.is_xminorgrid ()
-                              && (minorgridstyle != "none"));
-        bool do_xminortick = props.is_xminortick ();
+                              && (minorgridstyle != "none")
+                              && ! xticks.isempty ());
         bool is_origin = props.xaxislocation_is ("origin") && props.get_is2D ()
                          && ! props.yscale_is ("log");
         bool is_origin_low = is_origin && (y_min + y_max) < 0;
-        Matrix xticks = xform.xscale (props.get_xtick ().matrix_value ());
-        Matrix xmticks = xform.xscale (props.get_xminortickvalues ().matrix_value ());
-        string_vector xticklabels = props.get_xticklabel ().string_vector_value ();
-        int wmax = 0;
-        int hmax = 0;
-        bool tick_along_z = nearhoriz || math::isinf (fy);
         bool mirror = props.is_box () && xstate != AXE_ANY_DIR;
 
+        // X grid
+
         if (props.xcolormode_is ("manual"))
           {
             // use axis color for (minor)gridcolor
             if (props.gridcolormode_is ("auto"))
               gridcolor = props.get_xcolor_rgb ();
             if (props.minorgridcolormode_is ("auto"))
               minorgridcolor = props.get_xcolor_rgb ();
           }
@@ -1664,41 +1666,43 @@ namespace octave
         double y_max = props.get_y_max ();
         double x_min = props.get_x_min ();
         double x_max = props.get_x_max ();
         double zPlane = props.get_zPlane ();
         double zPlaneN = props.get_zPlaneN ();
         double zpTick = props.get_zpTick ();
         double zpTickN = props.get_zpTickN ();
 
-        // Y grid
-
+        // Y ticks and grid properties
+        Matrix yticks = xform.yscale (props.get_ytick ().matrix_value ());
+        Matrix ymticks = xform.yscale (props.get_yminortickvalues ().matrix_value ());
+        bool do_yminortick = props.is_yminortick () && ! yticks.isempty ();
+        string_vector yticklabels = props.get_yticklabel ().string_vector_value ();
+        int wmax = 0;
+        int hmax = 0;
+        bool tick_along_z = nearhoriz || math::isinf (fx);
         double linewidth = props.get_linewidth ();
         std::string gridstyle = props.get_gridlinestyle ();
         std::string minorgridstyle = props.get_minorgridlinestyle ();
         Matrix gridcolor = props.get_gridcolor_rgb ();
         Matrix minorgridcolor = props.get_minorgridcolor_rgb ();
         double gridalpha = props.get_gridalpha ();
         double minorgridalpha = props.get_minorgridalpha ();
         bool do_ygrid = (props.is_ygrid () && (gridstyle != "none"));
         bool do_yminorgrid = (props.is_yminorgrid ()
-                              && (minorgridstyle != "none"));
-        bool do_yminortick = props.is_yminortick ();
+                              && (minorgridstyle != "none")
+                              && ! yticks.isempty ());
         bool is_origin = props.yaxislocation_is ("origin") && props.get_is2D ()
                          && ! props.xscale_is ("log");
         bool is_origin_low = is_origin && (x_min + x_max) < 0;
-        Matrix yticks = xform.yscale (props.get_ytick ().matrix_value ());
-        Matrix ymticks = xform.yscale (props.get_yminortickvalues ().matrix_value ());
-        string_vector yticklabels = props.get_yticklabel ().string_vector_value ();
-        int wmax = 0;
-        int hmax = 0;
-        bool tick_along_z = nearhoriz || math::isinf (fx);
         bool mirror = props.is_box () && ystate != AXE_ANY_DIR
                       && (! props.has_property ("__plotyy_axes__"));
 
+        // Y grid
+
         if (props.ycolormode_is ("manual"))
           {
             // use axis color for (minor)gridcolor
             if (props.gridcolormode_is ("auto"))
               gridcolor = props.get_ycolor_rgb ();
             if (props.minorgridcolormode_is ("auto"))
               minorgridcolor = props.get_ycolor_rgb ();
           }
@@ -1836,36 +1840,38 @@ namespace octave
         double fy = props.get_fy ();
         double xPlane = props.get_xPlane ();
         double xPlaneN = props.get_xPlaneN ();
         double yPlane = props.get_yPlane ();
         double yPlaneN = props.get_yPlaneN ();
         double z_min = props.get_z_min ();
         double z_max = props.get_z_max ();
 
-        // Z Grid
-
+        // Z ticks and grid properties
+        Matrix zticks = xform.zscale (props.get_ztick ().matrix_value ());
+        Matrix zmticks = xform.zscale (props.get_zminortickvalues ().matrix_value ());
+        bool do_zminortick = props.is_zminortick () && ! zticks.isempty ();
+        string_vector zticklabels = props.get_zticklabel ().string_vector_value ();
+        int wmax = 0;
+        int hmax = 0;
         double linewidth = props.get_linewidth ();
         std::string gridstyle = props.get_gridlinestyle ();
         std::string minorgridstyle = props.get_minorgridlinestyle ();
         Matrix gridcolor = props.get_gridcolor_rgb ();
         Matrix minorgridcolor = props.get_minorgridcolor_rgb ();
         double gridalpha = props.get_gridalpha ();
         double minorgridalpha = props.get_minorgridalpha ();
         bool do_zgrid = (props.is_zgrid () && (gridstyle != "none"));
         bool do_zminorgrid = (props.is_zminorgrid ()
-                              && (minorgridstyle != "none"));
-        bool do_zminortick = props.is_zminortick ();
-        Matrix zticks = xform.zscale (props.get_ztick ().matrix_value ());
-        Matrix zmticks = xform.zscale (props.get_zminortickvalues ().matrix_value ());
-        string_vector zticklabels = props.get_zticklabel ().string_vector_value ();
-        int wmax = 0;
-        int hmax = 0;
+                              && (minorgridstyle != "none")
+                              && ! zticks.isempty ());
         bool mirror = props.is_box () && zstate != AXE_ANY_DIR;
 
+        // Z grid
+
         if (props.zcolormode_is ("manual"))
           {
             // use axis color for (minor)gridcolor
             if (props.gridcolormode_is ("auto"))
               gridcolor = props.get_zcolor_rgb ();
             if (props.minorgridcolormode_is ("auto"))
               minorgridcolor = props.get_zcolor_rgb ();
           }
