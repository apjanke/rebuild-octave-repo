# HG changeset patch
# User Rik <rik@octave.org>
# Date 1436587842 25200
#      Fri Jul 10 21:10:42 2015 -0700
# Node ID 03c88436ad8c32051087b1b4515574ff28927712
# Parent  fc3056b9fac0619357986652ab170bb484eef990
Correctly generate figure 15.7 of the Manual.

* plot.txi: Improve the wording discussing the standalone example of 15.7.

* plotimages.m (set_graphics_toolkit): New subfunction to choose a graphics
toolkit with a preference for OpenGL based toolkits.
* plotimages.m (hide_output): Use figure (..., "visible", "off") to stop
window flicker during generation of images.

diff --git a/doc/interpreter/plot.txi b/doc/interpreter/plot.txi
--- a/doc/interpreter/plot.txi
+++ b/doc/interpreter/plot.txi
@@ -934,52 +934,53 @@ prints the current figure to a color Pos
 @example
 print -deps foo.eps
 @end example
 
 @noindent
 saves the current figure to an encapsulated PostScript file called
 @file{foo.eps}.
 
-The current graphic toolkits have differing print capabilities.  In particular,
+The current graphic toolkits produce very similar graphic displays but differ
+in their capability to display text and in print capabilities.  In particular,
 the OpenGL based toolkits such as @code{fltk} and @code{qt} do not support the
 @qcode{"interpreter"} property of text objects.  This means that when using
 OpenGL toolkits special symbols drawn with the @qcode{"tex"} interpreter will
 appear correctly on-screen but will be rendered with interpreter @qcode{"none"}
 when printing unless one of the @qcode{standalone} (see below) modes is used.
 These modes provide access to the pdflatex processor and therefore allow full
-use of LaTeX commands.
+use of @LaTeX{} commands.
 
 A complete example showing the capabilities of text printing using the
-@code{-dpdflatexstandalone} option is
+@code{-dpdflatexstandalone} option is:
 
 @example
 @group
 x = 0:0.01:3;
 hf = figure ();
 plot (x, erf (x));
 hold on;
 plot (x, x, "r");
 axis ([0, 3, 0, 1]);
 text (0.65, 0.6175, ['$\leftarrow x = @{2/\sqrt@{\pi@}' ...
         '@{\int_@{0@}^@{x@}@}e^@{-t^2@} dt@} = 0.6175$']);
 xlabel ("x");
 ylabel ("erf (x)");
 title ("erf (x) with text annotation");
-set (hf, "visible", "off")
-print (hf, "plot15_7.pdf", "-dpdflatexstandalone")
-set (hf, "visible", "on")
+set (hf, "visible", "off");
+print (hf, "plot15_7.pdf", "-dpdflatexstandalone");
+set (hf, "visible", "on");
 system ("pdflatex plot15_7");
-system ("acroread plot15_7.pdf &");
+open ("plot15_7.pdf");
 @end group
 @end example
 
 @ifnotinfo
 @noindent
-The result of which can be seen in @ref{fig:extendedtext}
+The result of this example can be seen in @ref{fig:extendedtext}
 
 @float Figure,fig:extendedtext
 @center @image{extended,4in}
 @caption{Example of inclusion of text with use of @code{-dpdflatexstandalone}}
 @end float
 @end ifnotinfo
 
 @DOCSTRING(print)
diff --git a/doc/interpreter/plotimages.m b/doc/interpreter/plotimages.m
--- a/doc/interpreter/plotimages.m
+++ b/doc/interpreter/plotimages.m
@@ -12,17 +12,17 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 function plotimages (d, nm, typ)
-  graphics_toolkit ("qt");
+  set_graphics_toolkit ();
   set_print_size ();
   hide_output ();
   outfile = fullfile (d, [nm "." typ]);
   if (strcmp (typ, "png"))
     set (0, "defaulttextfontname", "*");
   endif
   if (strcmp (typ, "eps"))
     d_typ = "-depsc2";
@@ -108,31 +108,44 @@ function plotimages (d, nm, typ)
       print (outfile, d_typ);
     endif
   else
     error ("unrecognized plot requested");
   endif
   hide_output ();
 endfunction
 
+## Choose a toolkit with a preference for OpenGL renderers
+function set_graphics_toolkit ()
+  avl_tk = available_graphics_toolkits ();
+  if (any (strcmp ("qt", avl_tk)))
+    graphics_toolkit ("qt");
+  elseif (any (strcmp ("fltk", avl_tk)))
+    graphics_toolkit ("fltk");
+  elseif (any (strcmp ("gnuplot", avl_tk)))
+    graphics_toolkit ("gnuplot");
+  else
+    error ("no valid graphics toolkit found");
+  endif
+endfunction
+
 function set_print_size ()
   image_size = [5.0, 3.5]; # in inches, 16:9 format
   border = 0;              # For postscript use 50/72
   set (0, "defaultfigurepapertype", "<custom>");
   set (0, "defaultfigurepaperorientation", "landscape");
   set (0, "defaultfigurepapersize", image_size + 2*border);
   set (0, "defaultfigurepaperposition", [border, border, image_size]);
 endfunction
 
-## Use this function before plotting commands and after every call to
-## print since print() resets output to stdout (unfortunately, gnuplot
-## can't pop output as it can the terminal type).
+## Use this function before plotting commands and after every call to print
+## since print() resets output to stdout (unfortunately, gnuplot can't pop
+## output as it can the terminal type).
 function hide_output ()
-  hf = figure (1);
-  set (hf, "visible", "off");
+  hf = figure (1, "visible", "off");
 endfunction
 
 ## generate something for the texinfo @image command to process
 function image_as_txt (d, nm)
   fid = fopen (fullfile (d, [nm ".txt"]), "wt");
   fputs (fid, "\n");
   fputs (fid, "+---------------------------------+\n");
   fputs (fid, "| Image unavailable in text mode. |\n");
