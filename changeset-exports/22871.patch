# HG changeset patch
# User Rik <rik@octave.org>
# Date 1481208930 28800
#      Thu Dec 08 06:55:30 2016 -0800
# Node ID 50495eeb5df10304169e663ed7e803744ddd5240
# Parent  f75d289645ec2569ba3a40240d98bb6c94576735
maint: Use C++ range feature to simplify some for loops in libinterp/octave-value.

* ov-class.cc, ov-classdef.cc, ov-fcn-handle.cc, ov-java.cc, ov-usr-fcn.cc,
ovl.cc: Use C++ range feature to simplify for loops with iterators.

diff --git a/libinterp/octave-value/ov-class.cc b/libinterp/octave-value/ov-class.cc
--- a/libinterp/octave-value/ov-class.cc
+++ b/libinterp/octave-value/ov-class.cc
@@ -819,21 +819,21 @@ octave_class::index_vector (bool require
 
 size_t
 octave_class::byte_size (void) const
 {
   // Neglect the size of the fieldnames.
 
   size_t retval = 0;
 
-  for (octave_map::const_iterator p = map.begin (); p != map.end (); p++)
+  for (octave_map::const_iterator it = map.begin (); it != map.end (); it++)
     {
-      std::string key = map.key (p);
+      std::string key = map.key (it);
 
-      octave_value val = octave_value (map.contents (p));
+      octave_value val = octave_value (map.contents (it));
 
       retval += val.byte_size ();
     }
 
   return retval;
 }
 
 bool
@@ -864,21 +864,19 @@ octave_base_value *
 octave_class::find_parent_class (const std::string& parent_class_name)
 {
   octave_base_value* retval = 0;
 
   if (parent_class_name == class_name ())
     retval = this;
   else
     {
-      for (std::list<std::string>::iterator pit = parent_list.begin ();
-           pit != parent_list.end ();
-           pit++)
+      for (auto& par : parent_list)
         {
-          octave_map::const_iterator smap = map.seek (*pit);
+          octave_map::const_iterator smap = map.seek (par);
 
           const Cell& tmp = map.contents (smap);
 
           octave_value vtmp = tmp(0);
 
           octave_base_value *obvp = vtmp.internal_rep ();
 
           retval = obvp->find_parent_class (parent_class_name);
@@ -895,21 +893,19 @@ octave_base_value *
 octave_class::unique_parent_class (const std::string& parent_class_name)
 {
   octave_base_value* retval = 0;
 
   if (parent_class_name == class_name ())
     retval = this;
   else
     {
-      for (std::list<std::string>::iterator pit = parent_list.begin ();
-           pit != parent_list.end ();
-           pit++)
+      for (auto& par : parent_list)
         {
-          octave_map::iterator smap = map.seek (*pit);
+          octave_map::iterator smap = map.seek (par);
 
           Cell& tmp = map.contents (smap);
 
           octave_value& vtmp = tmp(0);
 
           octave_base_value *obvp = vtmp.internal_rep ();
 
           // Use find_parent_class first to avoid uniquifying if not necessary.
@@ -933,21 +929,19 @@ bool
 octave_class::is_instance_of (const std::string& cls_name) const
 {
   bool retval = false;
 
   if (cls_name == class_name ())
     retval = true;
   else
     {
-      for (std::list<std::string>::const_iterator pit = parent_list.begin ();
-           pit != parent_list.end ();
-           pit++)
+      for (auto& par : parent_list)
         {
-          octave_map::const_iterator smap = map.seek (*pit);
+          octave_map::const_iterator smap = map.seek (par);
 
           const Cell& tmp = map.contents (smap);
 
           const octave_value& vtmp = tmp(0);
 
           retval = vtmp.is_instance_of (cls_name);
 
           if (retval)
@@ -1124,20 +1118,20 @@ octave_class::clear_exemplar_map (void)
 bool
 octave_class::reconstruct_parents (void)
 {
   bool retval = true;
   bool might_have_inheritance = false;
   std::string dbgstr = "dork";
 
   // First, check to see if there might be an issue with inheritance.
-  for (octave_map::const_iterator p = map.begin (); p != map.end (); p++)
+  for (octave_map::const_iterator it = map.begin (); it != map.end (); it++)
     {
-      std::string key = map.key (p);
-      Cell        val = map.contents (p);
+      std::string key = map.key (it);
+      Cell        val = map.contents (it);
       if (val(0).is_object ())
         {
           dbgstr = "blork";
           if (key == val(0).class_name ())
             {
               might_have_inheritance = true;
               dbgstr = "cork";
               break;
@@ -1151,22 +1145,20 @@ octave_class::reconstruct_parents (void)
         = octave_class::exemplar_map.find (c_name);
 
       if (it == octave_class::exemplar_map.end ())
         retval = false;
       else
         {
           octave_class::exemplar_info exmplr = it->second;
           parent_list = exmplr.parents ();
-          for (std::list<std::string>::iterator pit = parent_list.begin ();
-               pit != parent_list.end ();
-               pit++)
+          for (auto& par : parent_list)
             {
-              dbgstr = *pit;
-              bool dbgbool = map.contains (*pit);
+              dbgstr = par;
+              bool dbgbool = map.contains (par);
               if (! dbgbool)
                 {
                   retval = false;
                   break;
                 }
             }
         }
     }
diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -202,19 +202,18 @@ lookup_classes (const Cell& cls_list)
 }
 
 static octave_value
 to_ov (const std::list<cdef_class>& class_list)
 {
   Cell cls (class_list.size (), 1);
   int i = 0;
 
-  for (std::list<cdef_class>::const_iterator it = class_list.begin ();
-       it != class_list.end (); ++it, ++i)
-    cls(i) = to_ov (*it);
+  for (const auto& cdef_cls : class_list)
+    cls(i) = to_ov (cdef_cls);
 
   return octave_value (cls);
 }
 
 static bool
 is_superclass (const cdef_class& clsa, const cdef_class& clsb,
                bool allow_equal = true, int max_depth = -1)
 {
@@ -667,22 +666,21 @@ make_class (const std::string& name,
     {
       cls.put ("HandleCompatible", false);
     }
   else
     {
       bool all_handle_compatible = true;
       bool has_handle_class = false;
 
-      for (std::list<cdef_class>::const_iterator it = super_list.begin ();
-           it != super_list.end (); ++it)
+      for (const auto& cl : super_list)
         {
           all_handle_compatible = all_handle_compatible
-                                  && it->get ("HandleCompatible").bool_value ();
-          has_handle_class = has_handle_class || it->is_handle_class ();
+                                  && cl.get ("HandleCompatible").bool_value ();
+          has_handle_class = has_handle_class || cl.is_handle_class ();
         }
 
       if (has_handle_class && ! all_handle_compatible)
         error ("%s: cannot mix handle and non-HandleCompatible classes",
                name.c_str ());
 
       cls.put ("HandleCompatible", all_handle_compatible);
       if (has_handle_class)
@@ -1249,36 +1247,36 @@ cdef_object::map_value (void) const
   cdef_class cls = get_class ();
 
   if (cls.ok ())
     {
       std::map<std::string, cdef_property> props;
 
       props = cls.get_property_map (cdef_class::property_all);
 
-      for (std::map<std::string, cdef_property>::iterator it = props.begin ();
-           it != props.end (); ++it)
+      // FIXME: Why not const here?
+      for (auto& prop_val : props)
         {
           if (is_array ())
             {
               Array<cdef_object> a_obj = array_value ();
 
               Cell cvalue (a_obj.dims ());
 
               for (octave_idx_type i = 0; i < a_obj.numel (); i++)
-                cvalue (i) = it->second.get_value (a_obj(i), false);
-
-              retval.setfield (it->first, cvalue);
+                cvalue (i) = prop_val.second.get_value (a_obj(i), false);
+
+              retval.setfield (prop_val.first, cvalue);
             }
           else
             {
               Cell cvalue (dim_vector (1, 1),
-                           it->second.get_value (*this, false));
-
-              retval.setfield (it->first, cvalue);
+                           prop_val.second.get_value (*this, false));
+
+              retval.setfield (prop_val.first, cvalue);
             }
         }
     }
 
   return retval;
 }
 
 string_vector
@@ -1787,19 +1785,18 @@ cdef_object_scalar::is_partially_constru
   std::map< cdef_class, std::list<cdef_class> >::const_iterator it;
 
   if (is_constructed ())
     return true;
   else if ((it = ctor_list.find (cls)) == ctor_list.end ()
            || it->second.empty ())
     return true;
 
-  for (std::list<cdef_class>::const_iterator lit = it->second.begin ();
-       lit != it->second.end (); ++lit)
-    if (! is_constructed_for (*lit))
+  for (const auto& cdef_cls : it->second)
+    if (! is_constructed_for (cdef_cls))
       return false;
 
   return true;
 }
 
 inline void
 cdef_object_scalar::mark_as_constructed (const cdef_class& cls)
 {
@@ -1873,19 +1870,18 @@ cdef_class::cdef_class_rep::find_method 
 class ctor_analyzer : public tree_walker
 {
 public:
   ctor_analyzer (const std::string& ctor, const std::string& obj)
     : tree_walker (), who (ctor), obj_name (obj) { }
 
   void visit_statement_list (tree_statement_list& t)
   {
-    for (tree_statement_list::const_iterator it = t.begin ();
-         it != t.end (); ++it)
-      (*it)->accept (*this);
+    for (const auto& stmt_p : t)
+      stmt_p->accept (*this);
   }
 
   void visit_statement (tree_statement& t)
   {
     if (t.is_expression ())
       t.expression ()->accept (*this);
   }
 
@@ -2014,27 +2010,24 @@ cdef_class::cdef_class_rep::install_meth
               std::string obj_name = ret_list->front ()->name ();
               ctor_analyzer a (meth.get_name (), obj_name);
 
               body->accept (a);
 
               std::list<cdef_class> explicit_ctor_list
                 = a.get_constructor_list ();
 
-              for (std::list<cdef_class>::const_iterator
-                   it = explicit_ctor_list.begin ();
-                   it != explicit_ctor_list.end ();
-                   ++it)
+              for (const auto& cdef_cls : explicit_ctor_list)
                 {
 #if DEBUG_TRACE
                   std::cerr << "explicit superclass constructor: "
-                            << it->get_name () << std::endl;
+                            << cdef_cls.get_name () << std::endl;
 #endif
 
-                  implicit_ctor_list.remove (*it);
+                  implicit_ctor_list.remove (cdef_cls);
                 }
             }
         }
     }
 }
 
 void
 cdef_class::cdef_class_rep::load_all_methods (void)
@@ -2048,19 +2041,18 @@ cdef_class::cdef_class_rep::get_methods 
   std::map<std::string,cdef_method> meths;
 
   find_methods (meths, false);
 
   Cell c (meths.size (), 1);
 
   int idx = 0;
 
-  for (std::map<std::string,cdef_method>::const_iterator
-       it = meths.begin (); it != meths.end (); ++it, ++idx)
-    c (idx, 0) = to_ov (it->second);
+  for (const auto& nm_mthd : meths)
+    c(idx++, 0) = to_ov (nm_mthd.second);
 
   return c;
 }
 
 void
 cdef_class::cdef_class_rep::find_methods (std::map<std::string,
                                           cdef_method>& meths,
                                           bool only_inherited)
@@ -2147,19 +2139,18 @@ cdef_class::cdef_class_rep::get_properti
   std::map<std::string,cdef_property> props;
 
   props = get_property_map (mode);
 
   Cell c (props.size (), 1);
 
   int idx = 0;
 
-  for (std::map<std::string,cdef_property>::const_iterator
-       it = props.begin (); it != props.end (); ++it, ++idx)
-    c (idx, 0) = to_ov (it->second);
+  for (const auto& pname_prop : props)
+    c(idx++, 0) = to_ov (pname_prop.second);
 
   return c;
 }
 
 std::map<std::string, cdef_property>
 cdef_class::cdef_class_rep::get_property_map (int mode)
 {
   std::map<std::string,cdef_property> props;
@@ -2211,44 +2202,42 @@ cdef_class::cdef_class_rep::find_propert
 }
 
 void
 cdef_class::cdef_class_rep::find_names (std::set<std::string>& names,
                                         bool all)
 {
   load_all_methods ();
 
-  for (method_const_iterator it = method_map.begin ();
-       it != method_map.end(); ++it)
+  for (const auto& cls_fnmap : method_map)
     {
-      if (! it->second.is_constructor ())
+      if (! cls_fnmap.second.is_constructor ())
         {
-          std::string nm = it->second.get_name ();
+          std::string nm = cls_fnmap.second.get_name ();
 
           if (! all)
             {
-              octave_value acc = it->second.get ("Access");
+              octave_value acc = cls_fnmap.second.get ("Access");
 
               if (! acc.is_string()
                   || acc.string_value () != "public")
                 continue;
             }
 
           names.insert (nm);
         }
     }
 
-  for (property_const_iterator it = property_map.begin ();
-       it != property_map.end (); ++it)
+  for (const auto& pname_prop : property_map)
     {
-      std::string nm = it->second.get_name ();
+      std::string nm = pname_prop.second.get_name ();
 
       if (! all)
         {
-          octave_value acc = it->second.get ("GetAccess");
+          octave_value acc = pname_prop.second.get ("GetAccess");
 
           if (! acc.is_string()
               || acc.string_value () != "public")
             continue;
         }
 
       names.insert (nm);
     }
@@ -2396,48 +2385,45 @@ cdef_class::cdef_class_rep::meta_release
 void
 cdef_class::cdef_class_rep::initialize_object (cdef_object& obj)
 {
   // Populate the object with default property values
 
   std::list<cdef_class> super_classes = lookup_classes (
                                           get ("SuperClasses").cell_value ());
 
-  for (std::list<cdef_class>::iterator it = super_classes.begin ();
-       it != super_classes.end (); ++it)
-    it->initialize_object (obj);
-
-  for (property_const_iterator it = property_map.begin ();
-       it != property_map.end (); ++it)
+  for (auto& cls : super_classes)
+    cls.initialize_object (obj);
+
+  for (const auto& pname_prop : property_map)
     {
-      if (! it->second.get ("Dependent").bool_value ())
+      if (! pname_prop.second.get ("Dependent").bool_value ())
         {
-          octave_value pvalue = it->second.get ("DefaultValue");
+          octave_value pvalue = pname_prop.second.get ("DefaultValue");
 
           if (pvalue.is_defined ())
-            obj.put (it->first, pvalue);
+            obj.put (pname_prop.first, pvalue);
           else
-            obj.put (it->first, octave_value (Matrix ()));
+            obj.put (pname_prop.first, octave_value (Matrix ()));
         }
     }
 
   refcount++;
   obj.mark_for_construction (cdef_class (this));
 }
 
 void
 cdef_class::cdef_class_rep::run_constructor (cdef_object& obj,
                                              const octave_value_list& args)
 {
   octave_value_list empty_args;
 
-  for (std::list<cdef_class>::const_iterator it = implicit_ctor_list.begin ();
-       it != implicit_ctor_list.end (); ++it)
+  for (const auto& cls : implicit_ctor_list)
     {
-      cdef_class supcls = lookup_class (*it);
+      cdef_class supcls = lookup_class (cls);
 
       supcls.run_constructor (obj, empty_args);
     }
 
   std::string cls_name = get_name ();
   std::string ctor_name = get_base_name (cls_name);
 
   cdef_method ctor = find_method (ctor_name);
@@ -2596,21 +2582,19 @@ cdef_class::make_meta_class (tree_classd
 #if DEBUG_TRACE
   std::cerr << "class: " << full_class_name << std::endl;
 #endif
 
   std::list<cdef_class> slist;
 
   if (t->superclass_list ())
     {
-      for (tree_classdef_superclass_list::iterator it =
-             t->superclass_list ()->begin ();
-           it != t->superclass_list ()->end (); ++it)
+      for (auto& scls : (*t->superclass_list ()))
         {
-          std::string sclass_name = (*it)->class_name ();
+          std::string sclass_name = (scls)->class_name ();
 
 #if DEBUG_TRACE
           std::cerr << "superclass: " << sclass_name << std::endl;
 #endif
 
           cdef_class sclass = lookup_class (sclass_name);
 
           if (sclass.get ("Sealed").bool_value ())
@@ -2632,27 +2616,24 @@ cdef_class::make_meta_class (tree_classd
       if (pack.ok ())
         retval.put ("ContainingPackage", to_ov (pack));
     }
 
   // Class attributes
 
   if (t->attribute_list ())
     {
-      for (tree_classdef_attribute_list::iterator
-           it = t->attribute_list ()->begin ();
-           it != t->attribute_list ()->end ();
-           ++it)
+      for (const auto& attr : (*t->attribute_list ()))
         {
-          std::string aname = (*it)->ident ()->name ();
-          octave_value avalue = compute_attribute_value (*it);
+          std::string aname = attr->ident ()->name ();
+          octave_value avalue = compute_attribute_value (attr);
 
 #if DEBUG_TRACE
           std::cerr << "class attribute: " << aname << " = "
-                    << attribute_value_to_string (*it, avalue) << std::endl;
+                    << attribute_value_to_string (attr, avalue) << std::endl;
 #endif
 
           retval.put (aname, avalue);
         }
     }
 
   tree_classdef_body* b = t->body ();
 
@@ -2663,115 +2644,104 @@ cdef_class::make_meta_class (tree_classd
 
       std::map<std::string, octave_value> get_methods;
       std::map<std::string, octave_value> set_methods;
 
       // Method blocks
 
       std::list<tree_classdef_methods_block *> mb_list = b->methods_list ();
 
-      for (tree_classdef_body::methods_list_iterator it = mb_list.begin ();
-           it != mb_list.end (); ++it)
+      for (auto& mb_p : mb_list)
         {
           std::map<std::string, octave_value> amap;
 
 #if DEBUG_TRACE
           std::cerr << "method block" << std::endl;
 #endif
 
           // Method attributes
 
-          if ((*it)->attribute_list ())
+          if (mb_p->attribute_list ())
             {
-              for (tree_classdef_attribute_list::iterator ait =
-                     (*it)->attribute_list ()->begin ();
-                   ait != (*it)->attribute_list ()->end (); ++ait)
+              for (auto& attr_p : *mb_p->attribute_list ())
                 {
-                  std::string aname = (*ait)->ident ()->name ();
-                  octave_value avalue = compute_attribute_value (*ait);
+                  std::string aname = attr_p->ident ()->name ();
+                  octave_value avalue = compute_attribute_value (attr_p);
 
 #if DEBUG_TRACE
                   std::cerr << "method attribute: " << aname << " = "
-                            << attribute_value_to_string (*ait, avalue)
+                            << attribute_value_to_string (attr_p, avalue)
                             << std::endl;
 #endif
 
                   amap[aname] = avalue;
                 }
             }
 
           // Methods
 
-          if ((*it)->element_list ())
+          if (mb_p->element_list ())
             {
-              for (tree_classdef_methods_list::iterator mit =
-                     (*it)->element_list ()->begin ();
-                   mit != (*it)->element_list ()->end (); ++mit)
+              for (auto& mtd : *mb_p->element_list ())
                 {
-                  std::string mname = mit->function_value ()->name ();
+                  std::string mname = mtd.function_value ()->name ();
                   std::string mprefix = mname.substr (0, 4);
 
                   if (mprefix == "get.")
                     get_methods[mname.substr (4)] =
-                      make_fcn_handle (*mit, full_class_name + ">" + mname);
+                      make_fcn_handle (mtd, full_class_name + ">" + mname);
                   else if (mprefix == "set.")
                     set_methods[mname.substr (4)] =
-                      make_fcn_handle (*mit, full_class_name + ">" + mname);
+                      make_fcn_handle (mtd, full_class_name + ">" + mname);
                   else
                     {
-                      cdef_method meth = make_method (retval, mname, *mit);
+                      cdef_method meth = make_method (retval, mname, mtd);
 
 #if DEBUG_TRACE
                       std::cerr << (mname == class_name ? "constructor"
                                                         : "method")
                                 << ": " << mname << std::endl;
 #endif
 
-                      for (std::map<std::string, octave_value>::iterator
-                           ait = amap.begin (); ait != amap.end (); ++ait)
-                        meth.put (ait->first, ait->second);
+                      for (auto& attrnm_val : amap)
+                        meth.put (attrnm_val.first, attrnm_val.second);
 
                       retval.install_method (meth);
                     }
                 }
             }
         }
 
       if (is_at_folder)
         {
           // Look for all external methods visible on octave path at the
           // time of loading of the class.
           //
-          // FIXME: This is an "extension" to Matlab behavior, which only
-          // looks in the @-folder containing the original classdef
-          // file.  However, this is easier to implement it that way at
-          // the moment.
+          // FIXME: This is an "extension" to Matlab behavior, which only looks
+          // in the @-folder containing the original classdef file.  However,
+          // this is easier to implement it that way at the moment.
 
           std::list<std::string> external_methods =
             load_path::methods (full_class_name);
 
-          for (std::list<std::string>::const_iterator
-               it = external_methods.begin ();
-               it != external_methods.end ();
-               ++it)
+          for (const auto& mtdnm : external_methods)
             {
               // FIXME: should we issue a warning if the method is already
               // defined in the classdef file?
 
-              if (*it != class_name
-                  && ! retval.find_method (*it, true).ok ())
+              if (mtdnm != class_name
+                  && ! retval.find_method (mtdnm, true).ok ())
                 {
                   // Create a dummy method that is used until the actual
                   // method is loaded.
-
                   octave_user_function *fcn = new octave_user_function ();
 
-                  fcn->stash_function_name (*it);
-
-                  cdef_method meth = make_method (retval, *it,
+                  fcn->stash_function_name (mtdnm);
+
+                  cdef_method meth = make_method (retval, mtdnm,
                                                   octave_value (fcn));
 
                   retval.install_method (meth);
                 }
             }
         }
 
       // Property blocks
@@ -2779,89 +2749,83 @@ cdef_class::make_meta_class (tree_classd
       // FIXME: default property expression should be able to call static
       //        methods of the class being constructed.  A restricted CLASSNAME
       //        symbol should be added to the scope before evaluating default
       //        value expressions.
 
       std::list<tree_classdef_properties_block *> pb_list
         = b->properties_list ();
 
-      for (tree_classdef_body::properties_list_iterator it = pb_list.begin ();
-           it != pb_list.end (); ++it)
+      for (auto& pb_p : pb_list)
         {
           std::map<std::string, octave_value> amap;
 
 #if DEBUG_TRACE
           std::cerr << "property block" << std::endl;
 #endif
 
           // Property attributes
 
-          if ((*it)->attribute_list ())
+          if (pb_p->attribute_list ())
             {
-              for (tree_classdef_attribute_list::iterator ait =
-                     (*it)->attribute_list ()->begin ();
-                   ait != (*it)->attribute_list ()->end (); ++ait)
+              for (auto& attr_p : *pb_p->attribute_list ())
                 {
-                  std::string aname = (*ait)->ident ()->name ();
-                  octave_value avalue = compute_attribute_value (*ait);
+                  std::string aname = attr_p->ident ()->name ();
+                  octave_value avalue = compute_attribute_value (attr_p);
 
 #if DEBUG_TRACE
                   std::cerr << "property attribute: " << aname << " = "
-                            << attribute_value_to_string (*ait, avalue)
+                            << attribute_value_to_string (attr_p, avalue)
                             << std::endl;
 #endif
 
                   if (aname == "Access")
                     {
                       amap["GetAccess"] = avalue;
                       amap["SetAccess"] = avalue;
                     }
                   else
                     amap[aname] = avalue;
                 }
             }
 
           // Properties
 
-          if ((*it)->element_list ())
+          if (pb_p->element_list ())
             {
-              for (tree_classdef_property_list::iterator pit =
-                     (*it)->element_list ()->begin ();
-                   pit != (*it)->element_list ()->end (); ++pit)
+              for (auto& prop_p : *pb_p->element_list ())
                 {
-                  std::string prop_name = (*pit)->ident ()->name ();
+                  std::string prop_name = prop_p->ident ()->name ();
 
                   cdef_property prop = ::make_property (retval, prop_name);
 
 #if DEBUG_TRACE
-                  std::cerr << "property: " << (*pit)->ident ()->name ()
+                  std::cerr << "property: " << prop_p->ident ()->name ()
                             << std::endl;
 #endif
 
-                  if ((*pit)->expression ())
+                  if (prop_p->expression ())
                     {
-                      octave_value pvalue = (*pit)->expression ()->rvalue1 ();
+                      octave_value pvalue = prop_p->expression ()->rvalue1 ();
 
 #if DEBUG_TRACE
                       std::cerr << "property default: "
                                 << attribute_value_to_string (*pit, pvalue)
                                 << std::endl;
 #endif
 
                       prop.put ("DefaultValue", pvalue);
                     }
 
                   // Install property attributes.  This is done before assigning
-                  // the property accessors so we can do validationby using
+                  // the property accessors so we can do validation by using
                   // cdef_property methods.
 
-                  for (std::map<std::string, octave_value>::iterator ait = amap.begin ();
-                       ait != amap.end (); ++ait)
-                    prop.put (ait->first, ait->second);
+                  for (auto& attrnm_val : amap)
+                    prop.put (attrnm_val.first, attrnm_val.second);
 
                   // Install property access methods, if any.  Remove the
                   // accessor methods from the temporary storage map, so we can
                   // detect which ones are invalid and do not correspond to a
                   // defined property.
 
                   std::map<std::string, octave_value>::iterator git =
                     get_methods.find (prop_name);
@@ -3242,28 +3206,25 @@ package_getAllPackages (const octave_val
 {
   std::map<std::string, cdef_package> toplevel_packages;
 
   std::list<std::string> names = load_path::get_all_package_names ();
 
   toplevel_packages["meta"] = cdef_manager::find_package ("meta", false,
                                                           false);
 
-  for (std::list<std::string>::const_iterator it = names.begin ();
-       it != names.end (); ++it)
-    toplevel_packages[*it] = cdef_manager::find_package (*it, false, true);
+  for (const auto& nm : names)
+    toplevel_packages[nm] = cdef_manager::find_package (nm, false, true);
 
   Cell c (toplevel_packages.size (), 1);
 
   int i = 0;
 
-  for (std::map<std::string, cdef_package>::const_iterator it =
-         toplevel_packages.begin ();
-       it != toplevel_packages.end (); ++it)
-    c(i++,0) = to_ov (it->second);
+  for (const auto& nm_pkg : toplevel_packages)
+    c(i++,0) = to_ov (nm_pkg.second);
 
   return octave_value_list (octave_value (c));
 }
 
 void
 cdef_package::cdef_package_rep::install_class (const cdef_class& cls,
                                                const std::string& nm)
 {
diff --git a/libinterp/octave-value/ov-fcn-handle.cc b/libinterp/octave-value/ov-fcn-handle.cc
--- a/libinterp/octave-value/ov-fcn-handle.cc
+++ b/libinterp/octave-value/ov-fcn-handle.cc
@@ -361,20 +361,20 @@ octave_fcn_handle::save_ascii (std::ostr
         = symbol_table::all_variables (f->scope (), 0);
 
       size_t varlen = vars.size ();
 
       if (varlen > 0)
         {
           os << "# length: " << varlen << "\n";
 
-          for (std::list<symbol_table::symbol_record>::const_iterator
-               p = vars.begin (); p != vars.end (); p++)
+          for (const auto& symrec : vars)
             {
-              if (! save_text_data (os, p->varval (0), p->name (), false, 0))
+              if (! save_text_data (os, symrec.varval (0), symrec.name (),
+                                    false, 0))
                 return ! os.fail ();
             }
         }
     }
   else
     {
       octave_function *f = function_value ();
       std::string fnm = f ? f->fcn_file_name () : "";
@@ -533,20 +533,19 @@ octave_fcn_handle::save_binary (std::ost
       print_raw (buf, true);
       std::string stmp = buf.str ();
       tmp = stmp.length ();
       os.write (reinterpret_cast<char *> (&tmp), 4);
       os.write (stmp.c_str (), stmp.length ());
 
       if (varlen > 0)
         {
-          for (std::list<symbol_table::symbol_record>::const_iterator
-               p = vars.begin (); p != vars.end (); p++)
+          for (const auto& symrec : vars)
             {
-              if (! save_binary_data (os, p->varval (0), p->name (),
+              if (! save_binary_data (os, symrec.varval (0), symrec.name (),
                                       "", 0, save_as_floats))
                 return ! os.fail ();
             }
         }
     }
   else
     {
       std::ostringstream nmbuf;
@@ -828,20 +827,19 @@ octave_fcn_handle::save_hdf5 (octave_hdf
           if (data_hid < 0)
             {
               H5Sclose (space_hid);
               H5Tclose (type_hid);
               H5Gclose (group_hid);
               return false;
             }
 
-          for (std::list<symbol_table::symbol_record>::const_iterator
-               p = vars.begin (); p != vars.end (); p++)
+          for (const auto& symrec : vars)
             {
-              if (! add_hdf5_data (data_hid, p->varval (0), p->name (),
+              if (! add_hdf5_data (data_hid, symrec.varval (0), symrec.name (),
                                    "", false, save_as_floats))
                 break;
             }
           H5Gclose (data_hid);
         }
     }
   else
     {
@@ -1596,20 +1594,19 @@ make_fcn_handle (const std::string& nm, 
         }
 
       if (! any_match)
         error ("@%s: no function and no method found", tnm.c_str ());
 
       octave_fcn_handle *fh = new octave_fcn_handle (f, tnm);
       retval = fh;
 
-      for (std::list<std::string>::iterator iter = classes.begin ();
-           iter != classes.end (); iter++)
+      for (auto& cls : classes)
         {
-          std::string class_name = *iter;
+          std::string class_name = cls;
           octave_value fmeth = symbol_table::find_method (tnm, class_name);
 
           bool is_builtin = false;
           for (int i = 0; i < btyp_num_types; i++)
             {
               // FIXME: Too slow? Maybe binary lookup?
               if (class_name == btyp_class_name[i])
                 {
@@ -1760,21 +1757,18 @@ particular output.
       std::list<symbol_table::symbol_record> vars
         = symbol_table::all_variables (fu->scope (), 0);
 
       size_t varlen = vars.size ();
 
       if (varlen > 0)
         {
           octave_scalar_map ws;
-          for (std::list<symbol_table::symbol_record>::const_iterator
-               p = vars.begin (); p != vars.end (); p++)
-            {
-              ws.assign (p->name (), p->varval (0));
-            }
+          for (const auto& symrec : vars)
+            ws.assign (symrec.name (), symrec.varval (0));
 
           m.setfield ("workspace", ws);
         }
     }
   else if (fcn->is_user_function () || fcn->is_user_script ())
     {
       octave_function *fu = fh->function_value ();
       m.setfield ("file", fu->fcn_file_name ());
@@ -1963,20 +1957,19 @@ octave_fcn_binder::maybe_binder (const o
           tree_argument_list *arg_list = arg_lists.front ();
 
           // Build a map of input params to their position.
           std::map<std::string, int> arginmap;
           int npar = 0;
 
           if (param_list)
             {
-              for (tree_parameter_list::iterator it = param_list->begin ();
-                   it != param_list->end (); ++it, ++npar)
+              for (auto& param_p : *param_list)
                 {
-                  tree_decl_elt *elt = *it;
+                  tree_decl_elt *elt = param_p;
                   tree_identifier *id = elt ? elt->ident () : 0;
                   if (id && ! id->is_black_hole ())
                     arginmap[id->name ()] = npar;
                 }
             }
 
           if (arg_list && arg_list->length () > 0)
             {
diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -254,22 +254,21 @@ namespace octave
 
       if (java_opts.size () > 0)
         {
           int index = 0;
 
           vm_args.nOptions = java_opts.size ();
           vm_args.options = new JavaVMOption [vm_args.nOptions];
 
-          for (std::list<std::string>::const_iterator it = java_opts.begin ();
-               it != java_opts.end (); ++it)
+          for (const auto& opt : java_opts)
             {
               if (Vdebug_java)
-                std::cout << *it << std::endl;
-              vm_args.options[index++].optionString = strsave ((*it).c_str ());
+                std::cout << opt << std::endl;
+              vm_args.options[index++].optionString = strsave (opt.c_str ());
             }
 
           java_opts.clear ();
         }
     }
 
   private:
 
diff --git a/libinterp/octave-value/ov-usr-fcn.cc b/libinterp/octave-value/ov-usr-fcn.cc
--- a/libinterp/octave-value/ov-usr-fcn.cc
+++ b/libinterp/octave-value/ov-usr-fcn.cc
@@ -285,20 +285,19 @@ octave_user_function::maybe_relocate_end
 
 void
 octave_user_function::maybe_relocate_end (void)
 {
   std::map<std::string, octave_value> fcns = subfunctions ();
 
   if (! fcns.empty ())
     {
-      for (std::map<std::string, octave_value>::iterator p = fcns.begin ();
-           p != fcns.end (); p++)
+      for (auto& nm_fnval : fcns)
         {
-          octave_user_function *f = (p->second).user_function_value ();
+          octave_user_function *f = nm_fnval.second.user_function_value ();
 
           if (f)
             f->maybe_relocate_end_internal ();
         }
     }
 
   maybe_relocate_end_internal ();
 }
@@ -740,32 +739,30 @@ octave_user_function::bind_automatic_var
     symbol_table::assign ("varargin", va_args.cell_value ());
 
   // Force .ignored. variable to be undefined by default.
   symbol_table::assign (".ignored.");
 
   if (lvalue_list)
     {
       octave_idx_type nbh = 0;
-      for (std::list<octave_lvalue>::const_iterator p = lvalue_list->begin ();
-           p != lvalue_list->end (); p++)
-        nbh += p->is_black_hole ();
+      for (const auto& lval : *lvalue_list)
+        nbh += lval.is_black_hole ();
 
       if (nbh > 0)
         {
           // Only assign the hidden variable if black holes actually present.
           Matrix bh (1, nbh);
           octave_idx_type k = 0;
           octave_idx_type l = 0;
-          for (std::list<octave_lvalue>::const_iterator
-               p = lvalue_list->begin (); p != lvalue_list->end (); p++)
+          for (const auto& lval : *lvalue_list)
             {
-              if (p->is_black_hole ())
+              if (lval.is_black_hole ())
                 bh(l++) = k+1;
-              k += p->numel ();
+              k += lval.numel ();
             }
 
           symbol_table::assign (".ignored.", bh);
         }
     }
 
   symbol_table::mark_hidden (".ignored.");
   symbol_table::mark_automatic (".ignored.");
diff --git a/libinterp/octave-value/ovl.cc b/libinterp/octave-value/ovl.cc
--- a/libinterp/octave-value/ovl.cc
+++ b/libinterp/octave-value/ovl.cc
@@ -33,35 +33,33 @@ along with Octave; see the file COPYING.
 // so make the grow_size large.
 
 octave_value_list::octave_value_list (const std::list<octave_value_list>& lst)
 {
   octave_idx_type n = 0;
   octave_idx_type nel = 0;
 
   // Determine number.
-  for (std::list<octave_value_list>::const_iterator p = lst.begin ();
-       p != lst.end (); p++)
+  for (const auto& ovl : lst)
     {
       n++;
-      nel += p->length ();
+      nel += ovl.length ();
     }
 
   // Optimize single-element case
   if (n == 1)
     data = lst.front ().data;
   else if (nel > 0)
     {
       data.resize (dim_vector (1, nel));
       octave_idx_type k = 0;
-      for (std::list<octave_value_list>::const_iterator p = lst.begin ();
-           p != lst.end (); p++)
+      for (const auto& ovl : lst)
         {
-          data.assign (idx_vector (k, k + p->length ()), p->data);
-          k += p->length ();
+          data.assign (idx_vector (k, k + ovl.length ()), ovl.data);
+          k += ovl.length ();
         }
       assert (k == nel);
     }
 
 }
 
 octave_value_list&
 octave_value_list::prepend (const octave_value& val)
