# HG changeset patch
# User Markus MÃ¼tzel <markus.muetzel@gmx.de>
# Date 1477655983 -7200
#      Fri Oct 28 13:59:43 2016 +0200
# Node ID 0cbe4714ce1bfd124311e490eea97cf8d78b3950
# Parent  5c04055aa767ba1ef8b8e255ead454dd30f8791f
Correct locations of minor grid lines for manual ticks (bug #45850).

* graphics.cc (axes::properties::calc_ticks_and_lims): Use manually set
ticks for calculation of minor grid.

* graphics.in.h (axes::properties): Trigger minor grid calculation on
update_(xyz)tick and update_(xyz)lim.

* grid.m: Add demo.

diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -6862,17 +6862,19 @@ axes::properties::get_axis_limits (doubl
 
   return retval;
 }
 
 void
 axes::properties::calc_ticks_and_lims (array_property& lims,
                                        array_property& ticks,
                                        array_property& mticks,
-                                       bool limmode_is_auto, bool is_logscale)
+                                       bool limmode_is_auto,
+                                       bool tickmode_is_auto,
+                                       bool is_logscale)
 {
   // FIXME: add log ticks and lims
 
   if (lims.get ().is_empty ())
     return;
 
   double lo = (lims.get ().matrix_value ())(0);
   double hi = (lims.get ().matrix_value ())(1);
@@ -6892,83 +6894,93 @@ axes::properties::calc_ticks_and_lims (a
         }
       else
         {
           hi = std::log10 (hi);
           lo = std::log10 (lo);
         }
     }
 
-  double tick_sep;
-
-  if (is_logscale)
-    {
-      if (! (octave::math::isinf (hi) || octave::math::isinf (lo)))
-        tick_sep = 1;  // Tick is every order of magnitude (bug #39449)
-      else
-        tick_sep = 0;
-    }
-  else
-    tick_sep = calc_tick_sep (lo, hi);
-
-  double i1 = std::floor (lo / tick_sep);
-  double i2 = std::ceil (hi / tick_sep);
-
-  if (limmode_is_auto)
-    {
-      // Adjust limits to include min and max ticks
-      Matrix tmp_lims (1,2);
-      tmp_lims(0) = std::min (tick_sep * i1, lo);
-      tmp_lims(1) = std::max (tick_sep * i2, hi);
+  Matrix tmp_ticks;
+  if (tickmode_is_auto)
+    {
+      double tick_sep;
 
       if (is_logscale)
         {
-          tmp_lims(0) = std::pow (10., tmp_lims(0));
-          tmp_lims(1) = std::pow (10., tmp_lims(1));
-          if (tmp_lims(0) <= 0)
-            tmp_lims(0) = std::pow (10., lo);
-          if (is_negative)
+          if (! (octave::math::isinf (hi) || octave::math::isinf (lo)))
+            tick_sep = 1;  // Tick is every order of magnitude (bug #39449)
+          else
+            tick_sep = 0;
+        }
+      else
+        tick_sep = calc_tick_sep (lo, hi);
+
+      double i1 = std::floor (lo / tick_sep);
+      double i2 = std::ceil (hi / tick_sep);
+
+      if (limmode_is_auto)
+        {
+          // Adjust limits to include min and max ticks
+          Matrix tmp_lims (1,2);
+          tmp_lims(0) = std::min (tick_sep * i1, lo);
+          tmp_lims(1) = std::max (tick_sep * i2, hi);
+
+          if (is_logscale)
             {
+              tmp_lims(0) = std::pow (10., tmp_lims(0));
+              tmp_lims(1) = std::pow (10., tmp_lims(1));
+              if (tmp_lims(0) <= 0)
+                tmp_lims(0) = std::pow (10., lo);
+              if (is_negative)
+                {
               double tmp = tmp_lims(0);
-              tmp_lims(0) = -tmp_lims(1);
-              tmp_lims(1) = -tmp;
+                  tmp_lims(0) = -tmp_lims(1);
+                  tmp_lims(1) = -tmp;
+                }
             }
-        }
-      lims = tmp_lims;
+          lims = tmp_lims;
+        }
+      else
+        {
+          // adjust min and max ticks to be within limits
+          if (i1*tick_sep < lo)
+            i1++;
+          if (i2*tick_sep > hi && i2 > i1)
+            i2--;
+        }
+
+      tmp_ticks = Matrix (1, i2-i1+1);
+      for (int i = 0; i <= static_cast<int> (i2-i1); i++)
+        {
+          tmp_ticks(i) = tick_sep * (i+i1);
+          if (is_logscale)
+            tmp_ticks(i) = std::pow (10., tmp_ticks(i));
+        }
+      if (is_logscale && is_negative)
+        {
+          Matrix rev_ticks (1, i2-i1+1);
+          rev_ticks = -tmp_ticks;
+          for (int i = 0; i <= static_cast<int> (i2-i1); i++)
+            tmp_ticks(i) = rev_ticks(i2-i1-i);
+        }
+
+      ticks = tmp_ticks;
     }
   else
-    {
-      // adjust min and max ticks to be within limits
-      if (i1*tick_sep < lo)
-        i1++;
-      if (i2*tick_sep > hi && i2 > i1)
-        i2--;
-    }
-
-  Matrix tmp_ticks (1, i2-i1+1);
-  for (int i = 0; i <= static_cast<int> (i2-i1); i++)
-    {
-      tmp_ticks(i) = tick_sep * (i+i1);
-      if (is_logscale)
-        tmp_ticks(i) = std::pow (10., tmp_ticks(i));
-    }
-  if (is_logscale && is_negative)
-    {
-      Matrix rev_ticks (1, i2-i1+1);
-      rev_ticks = -tmp_ticks;
-      for (int i = 0; i <= static_cast<int> (i2-i1); i++)
-        tmp_ticks(i) = rev_ticks(i2-i1-i);
-    }
-
-  ticks = tmp_ticks;
+    tmp_ticks = ticks.get ().matrix_value ();
+
+  octave_idx_type n_ticks = tmp_ticks.numel ();
+  if (n_ticks < 2)
+    return;
 
   int n = is_logscale ? 8 : 4;
-  Matrix tmp_mticks (1, n * (tmp_ticks.numel () - 1));
-
-  for (int i = 0; i < tmp_ticks.numel ()-1; i++)
+  Matrix tmp_mticks (1, n * (n_ticks - 1));
+
+  for (int i = 0; i < n_ticks-1; i++)
     {
       double d = (tmp_ticks(i+1) - tmp_ticks(i)) / (n + 1);
       for (int j = 0; j < n; j++)
         {
           tmp_mticks(n*i+j) = tmp_ticks(i) + d * (j+1);
         }
     }
   mticks = tmp_mticks;
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -4010,59 +4010,53 @@ public:
     void update_zdir (void) { update_camera (); update_axes_layout (); }
 
     void update_ticklength (void);
     void update_tickdir (void) { update_ticklength (); }
     void update_tickdirmode (void) { update_ticklength (); }
 
     void update_xtick (void)
     {
+      calc_ticks_and_lims (xlim, xtick, xminortickvalues, xlimmode.is ("auto"),
+                           xtickmode.is ("auto"), xscale.is ("log"));
       if (xticklabelmode.is ("auto"))
         calc_ticklabels (xtick, xticklabel, xscale.is ("log"));
       sync_positions ();
     }
     void update_ytick (void)
     {
+      calc_ticks_and_lims (ylim, ytick, yminortickvalues, ylimmode.is ("auto"),
+                           ytickmode.is ("auto"), yscale.is ("log"));
       if (yticklabelmode.is ("auto"))
         calc_ticklabels (ytick, yticklabel, yscale.is ("log"));
       sync_positions ();
     }
     void update_ztick (void)
     {
+      calc_ticks_and_lims (zlim, ztick, zminortickvalues, zlimmode.is ("auto"),
+                           ztickmode.is ("auto"), zscale.is ("log"));
       if (zticklabelmode.is ("auto"))
         calc_ticklabels (ztick, zticklabel, zscale.is ("log"));
       sync_positions ();
     }
 
     void update_xtickmode (void)
     {
       if (xtickmode.is ("auto"))
-        {
-          calc_ticks_and_lims (xlim, xtick, xminortickvalues,
-                               xlimmode.is ("auto"), xscale.is ("log"));
-          update_xtick ();
-        }
+        update_xtick ();
     }
     void update_ytickmode (void)
     {
       if (ytickmode.is ("auto"))
-        {
-          calc_ticks_and_lims (ylim, ytick, yminortickvalues,
-                               ylimmode.is ("auto"), yscale.is ("log"));
-          update_ytick ();
-        }
+        update_ytick ();
     }
     void update_ztickmode (void)
     {
       if (ztickmode.is ("auto"))
-        {
-          calc_ticks_and_lims (zlim, ztick, zminortickvalues,
-                               zlimmode.is ("auto"), zscale.is ("log"));
-          update_ztick ();
-        }
+        update_ztick ();
     }
 
     void update_xticklabelmode (void)
     {
       if (xticklabelmode.is ("auto"))
         calc_ticklabels (xtick, xticklabel, xscale.is ("log"));
     }
     void update_yticklabelmode (void)
@@ -4175,18 +4169,18 @@ public:
           position = innerbox;
         }
       set_units (old_units);
       update_transform ();
     }
 
     double calc_tick_sep (double minval, double maxval);
     void calc_ticks_and_lims (array_property& lims, array_property& ticks,
-                              array_property& mticks,
-                              bool limmode_is_auto, bool is_logscale);
+                              array_property& mticks, bool limmode_is_auto,
+                              bool tickmode_is_auto, bool is_logscale);
     void calc_ticklabels (const array_property& ticks, any_property& labels,
                           bool is_logscale);
     Matrix get_ticklabel_extents (const Matrix& ticks,
                                   const string_vector& ticklabels,
                                   const Matrix& limits);
 
     void fix_limits (array_property& lims)
     {
@@ -4212,49 +4206,46 @@ public:
 
   public:
     Matrix get_axis_limits (double xmin, double xmax,
                             double min_pos, double max_neg,
                             bool logscale);
 
     void update_xlim ()
     {
-      if (xtickmode.is ("auto"))
-        calc_ticks_and_lims (xlim, xtick, xminortickvalues,
-                             xlimmode.is ("auto"), xscale.is ("log"));
+      calc_ticks_and_lims (xlim, xtick, xminortickvalues, xlimmode.is ("auto"),
+                           xtickmode.is ("auto"), xscale.is ("log"));
       if (xticklabelmode.is ("auto"))
         calc_ticklabels (xtick, xticklabel, xscale.is ("log"));
 
       fix_limits (xlim);
 
       update_xscale ();
 
       update_axes_layout ();
     }
 
     void update_ylim (void)
     {
-      if (ytickmode.is ("auto"))
-        calc_ticks_and_lims (ylim, ytick, yminortickvalues,
-                             ylimmode.is ("auto"), yscale.is ("log"));
+      calc_ticks_and_lims (ylim, ytick, yminortickvalues, ylimmode.is ("auto"),
+                           ytickmode.is ("auto"), yscale.is ("log"));
       if (yticklabelmode.is ("auto"))
         calc_ticklabels (ytick, yticklabel, yscale.is ("log"));
 
       fix_limits (ylim);
 
       update_yscale ();
 
       update_axes_layout ();
     }
 
     void update_zlim (void)
     {
-      if (ztickmode.is ("auto"))
-        calc_ticks_and_lims (zlim, ztick, zminortickvalues,
-                             zlimmode.is ("auto"), zscale.is ("log"));
+      calc_ticks_and_lims (zlim, ztick, zminortickvalues, zlimmode.is ("auto"),
+                           ztickmode.is ("auto"), zscale.is ("log"));
       if (zticklabelmode.is ("auto"))
         calc_ticklabels (ztick, zticklabel, zscale.is ("log"));
 
       fix_limits (zlim);
 
       update_zscale ();
 
       update_axes_layout ();
diff --git a/scripts/plot/appearance/grid.m b/scripts/plot/appearance/grid.m
--- a/scripts/plot/appearance/grid.m
+++ b/scripts/plot/appearance/grid.m
@@ -77,17 +77,16 @@ function grid (varargin)
       error ("grid: argument 1 must be an axis handle or a string");
     endif
     if (strcmpi (arg1, "off"))
       grid_on = false;
       minor_on = false;
       minor_auto = false;
     elseif (strcmpi (arg1, "on"))
       grid_on = true;
-      minor_on = false;
       minor_auto = true;
     elseif (strcmpi (arg1, "minor"))
       minor_auto = false;
       if (nargs == 2)
         arg2 = varargin{2};
         if (strcmpi (arg2, "on"))
           minor_on = true;
         elseif (strcmpi (arg2, "off"))
@@ -175,16 +174,28 @@ endfunction
 %!  plot (1:10);
 %!  set (gca, "xminorgrid", "on");
 %!  set (gca, "yminorgrid", "on");
 %! subplot (1,2,2)
 %!  semilogy (1:100);
 %!  set (gca, "xminorgrid", "on");
 %!  set (gca, "yminorgrid", "on");
 
+%!demo
+%! clf;
+%! plot3 (1:10, 1:10, 1:10);
+%! set (gca, "xtick", [0, pi/2, 4.7, 8, 10]);
+%! set (gca, "ytick", [0, 1, pi, 7.3, 10]);
+%! set (gca, "ztick", [0, exp(1), 5, 9.1, 10]);
+%! set (gca, "xminorgrid", "on");
+%! set (gca, "yminorgrid", "on");
+%! set (gca, "zminorgrid", "on");
+%! view (3);
+%! title ("Minor grid adapts to xticks (bug #45850)")
+
 ## linear scaling
 %!test <48533>
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   hax = axes ();
 %!   plot (1:10);
 %!   grid on
 %!   assert (get (hax, "xgrid"), "on");
