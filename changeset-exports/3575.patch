# HG changeset patch
# User jwe
# Date 949662171 0
#      Fri Feb 04 11:02:51 2000 +0000
# Node ID 7576a76f6d7bc696ed1a2402c996d9203dc2298e
# Parent  787bb9d8f60edf9e65235b10b78d6b6d22a1aa71
[project @ 2000-02-04 11:02:49 by jwe]

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,12 @@
+2000-02-04  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* interpreter/munge-texi.cc: Sprinkle with std:: qualifier.
+
 2000-01-28  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* interpreter/Makefile.in (clean-texi): Avoid removing octave.texi.
 
 2000-01-05  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* interpreter/Makefile.in: Don't generate octave.texi from octave.txi.
 	* interpreter/octave.texi: Rename from octave.txi.
diff --git a/doc/interpreter/munge-texi.cc b/doc/interpreter/munge-texi.cc
--- a/doc/interpreter/munge-texi.cc
+++ b/doc/interpreter/munge-texi.cc
@@ -15,114 +15,115 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
-#include <iostream.h>
-#include <fstream.h>
+#include <iostream>
+#include <fstream>
 #include <string>
 #include <cctype>
 
 // Someday, I hope that standard template library stuff will just
 // work.  Until then...
 #include "Map.h"
 
 static const char doc_delim = '';
 
-static CHMap<string> help_text = CHMap<string> (string ());
+static CHMap<std::string> help_text = CHMap<std::string> (std::string ());
 
 static void
-fatal (const string& msg)
+fatal (const std::string& msg)
 {
-  cerr << msg << "\n";
+  std::cerr << msg << "\n";
   exit (1);
 }
 
 static void
 usage (void)
 {
-  cerr << "usage: munge-texi -d DOCSTRING-FILE file ...\n";
+  std::cerr << "usage: munge-texi -d DOCSTRING-FILE file ...\n";
   exit (1);
 }
 
-static string
+static std::string
 extract_symbol_name (istream& is)
 {
-  string symbol_name;
+  std::string symbol_name;
 
   int c;
   while ((c = is.get ()) != EOF && c != '\n')
     symbol_name += (char) c;
 
   return symbol_name;
 }
 
-static string
-extract_docstring (istream& is)
+static std::string
+extract_docstring (std::istream& is)
 {
-  string doc;
+  std::string doc;
 
   int c;
   while ((c = is.get ()) != EOF && c != doc_delim)
     doc += (char) c;
 
   return doc;
 }
 
 static void
-process_doc_file (const string& fname)
+process_doc_file (const std::string& fname)
 {
-  ifstream infile (fname.c_str ());
+  std::ifstream infile (fname.c_str ());
 
   if (infile)
     {
       if (infile.get () != doc_delim)
 	fatal ("invalid doc file format");
 
-      string symbol_name;
+      std::string symbol_name;
 
       do
 	{
 	  symbol_name = extract_symbol_name (infile);
 
 	  if (! symbol_name.empty ())
 	    {
-	      string doc_string = extract_docstring (infile);
+	      std::string doc_string = extract_docstring (infile);
 
 	      if (help_text.contains (symbol_name))
-		cerr << "ignoring duplicate entry for " << symbol_name << "\n";
+		std::cerr << "ignoring duplicate entry for "
+			  << symbol_name << "\n";
 	      else
 		help_text[symbol_name] = doc_string;
 	    }
 	}
       while (! symbol_name.empty ());
     }
   else
     fatal ("unable to open docfile");
 }
 
 static void
-process_texi_input_file (istream& is, ostream& os)
+process_texi_input_file (std::istream& is, std::ostream& os)
 {
   os << "@c DO NOT EDIT!  Generated automatically by munge-texi.\n\n";
 
   bool bol = true;
 
   int c;
   while ((c = is.get ()) != EOF)
     {
       if (bol)
 	{
 	  if (c == '@')
 	    {
-	      string symbol_name;
+	      std::string symbol_name;
 
 	      char buf[16];
 	      int i = 0;
 	      buf[i++] = c;
 
 	      if ((buf[i++] = (char) is.get ()) == 'D'
 		  && (buf[i++] = (char) is.get ()) == 'O'
 		  && (buf[i++] = (char) is.get ()) == 'C'
@@ -136,17 +137,17 @@ process_texi_input_file (istream& is, os
 		{
 		  while ((c = is.get ()) != EOF && c != ')')
 		    symbol_name += (char) c;
 
 		  if (is.eof ())
 		    fatal ("end of file while reading @DOCSTRING command");
 		  else
 		    {
-		      string doc_string = help_text[symbol_name];
+		      std::string doc_string = help_text[symbol_name];
 
 		      int i = 0;
 		      while (doc_string[i] == ' ')
 			i++;
 
 		      if (doc_string.substr (i, 15) == "-*- texinfo -*-")
 			{
 			  i += 15;
@@ -199,17 +200,17 @@ main (int argc, char **argv)
 	    process_doc_file (*argv);
 	  else
 	    usage ();
 	}
       else
 	break;
     }
 
-  process_texi_input_file (cin, cout);
+  process_texi_input_file (std::cin, std::cout);
 
   return 0;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2000-02-04  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* gethelp.cc: Sprinkle with std:: qualifier.
+
 2000-01-30  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* image/saveimage.m: Delete some debugging code.
 
 2000-01-27  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* signal/sinc.m: Avoid reshaping.
 
diff --git a/scripts/gethelp.cc b/scripts/gethelp.cc
--- a/scripts/gethelp.cc
+++ b/scripts/gethelp.cc
@@ -1,21 +1,21 @@
 #include <string>
-#include <iostream.h>
+#include <iostream>
 
 #ifndef NPOS
-#define NPOS string::npos
+#define NPOS std::string::npos
 #endif
 
 static bool
-looks_like_octave_copyright (const string& s)
+looks_like_octave_copyright (const std::string& s)
 {
   bool retval = false;
 
-  string t = s.substr (0, 14);
+  std::string t = s.substr (0, 14);
 
   if (t == "Copyright (C) ")
     {
       size_t pos = s.find ('\n');
 
       if (pos != NPOS)
 	{
 	  pos = s.find ('\n', pos + 1);
@@ -34,29 +34,29 @@ looks_like_octave_copyright (const strin
     }
 
   return retval;
 }
 
 // Eat whitespace and comments from FFILE, returning the text of the
 // first block of comments that doesn't look like a copyright notice,
 
-static string
+static std::string
 extract_help_text (void)
 {
-  string help_txt;
+  std::string help_txt;
 
   bool first_comments_seen = false;
   bool begin_comment = false;
   bool have_help_text = false;
   bool in_comment = false;
   bool discard_space = true;
   int c;
 
-  while ((c = cin.get ()) != EOF)
+  while ((c = std::cin.get ()) != EOF)
     {
       if (begin_comment)
 	{
 	  if (c == '%' || c == '#')
 	    continue;
 	  else if (discard_space && c == ' ')
 	    {
 	      discard_space = false;
@@ -74,17 +74,17 @@ extract_help_text (void)
 	      help_txt += (char) c;
 	    }
 
 	  if (c == '\n')
 	    {
 	      in_comment = false;
 	      discard_space = true;
 
-	      if ((c = cin.get ()) != EOF)
+	      if ((c = std::cin.get ()) != EOF)
 		{
 		  if (c == '\n')
 		    break;
 		}
 	      else
 		break;
 	    }
 	}
@@ -127,27 +127,27 @@ extract_help_text (void)
     }
 
   return help_txt;
 }
 
 int
 main (int argc, char **argv)
 {
-  string name;
+  std::string name;
 
   if (argc != 2)
     {
-      cerr << "usage: gethelp name\n";
+      std::cerr << "usage: gethelp name\n";
       return 1;
     }
   else
     name = argv[1];
 
-  string help_text = extract_help_text ();  
+  std::string help_text = extract_help_text ();  
 
   if (! help_text.empty ())
     {
       cout << "" << name << "\n" << help_text;
 
       if (help_text[help_text.length () - 1] != '\n')
 	cout << "\n";
     }
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,13 @@
 2000-02-04  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* lex.l (is_plot_keyword): Add minimum match length in call to
+	almost_match.
+
 	* Makefile.in (%.df : %.cc): Don't pass -c to compiler.
 
 2000-02-03  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* ov-base-mat.cc: Include pr-output.h here.
 
 	* DLD-FUNCTIONS/rand.cc (curr_rand_dist): Return const char *
 	instead of char *.
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -850,16 +850,17 @@ delete_input_buffer (void *buf)
 // Check to see if a character string matches any of the possible line
 // styles for plots.
 
 static std::string
 plot_style_token (const std::string& s)
 {
   std::string retval;
 
+  // XXX FIXME XXX -- specify minimum match length for these.
   static const char *plot_styles[] = 
     {
       "boxes",
       "boxerrorbars",
       "boxxyerrorbars",
       "candlesticks",
       "dots",
       "errorbars",
@@ -896,16 +897,17 @@ plot_style_token (const std::string& s)
 // Check to see if a character string matches any of the possible axes
 // tags for plots.
 
 static std::string
 plot_axes_token (const std::string& s)
 {
   std::string retval;
 
+  // XXX FIXME XXX -- specify minimum match length for these.
   static const char *plot_axes[] = 
     {
       "x1y1",
       "x1y2",
       "x2y1",
       "x2y2",
       0,
     };
@@ -929,31 +931,31 @@ plot_axes_token (const std::string& s)
 // option keywords.  Don't match abbreviations for clear, since that's
 // not a gnuplot keyword (users will probably only expect to be able
 // to abbreviate actual gnuplot keywords).
 
 static int
 is_plot_keyword (const std::string& s)
 {
   const char *t = s.c_str ();
-  if (almost_match ("title", t))
+  if (almost_match ("title", t, 1))
     {
       return TITLE;
     }
-  else if (almost_match ("using", t))
+  else if (almost_match ("using", t, 1))
     {
       lexer_flags.in_plot_using = true;
       return USING;
     }
-  else if (almost_match ("with", t))
+  else if (almost_match ("with", t, 1))
     {
       lexer_flags.in_plot_style = true;
       return WITH;
     }
-  else if (almost_match ("axes", t) || almost_match ("axis", t))
+  else if (almost_match ("axes", t, 2) || almost_match ("axis", t, 2))
     {
       lexer_flags.in_plot_axes = true;
       return AXES;
     }
   else if (strcmp ("clear", t) == 0)
     {
       return CLEAR;
     }
@@ -1563,17 +1565,17 @@ handle_number (void)
 
   assert (nread == 1);
 
   lexer_flags.quote_is_transpose = 1;
   lexer_flags.cant_be_identifier = 1;
   lexer_flags.convert_spaces_to_comma = 1;
 
   if (lexer_flags.plotting && ! lexer_flags.in_plot_range)
-    lexer_flags.past_plot_range = 1;
+    lexer_flags.past_plot_range = true;
 
   yylval.tok_val = new token (value, yytext, input_line_number,
 			      current_input_column);
 
   token_stack.push (yylval.tok_val);
 
   current_input_column += yyleng;
 
@@ -2042,17 +2044,17 @@ handle_identifier (const std::string& to
 	lexer_flags.past_plot_range = true;
 
       // Option keywords can't appear in brackets, braces, or parentheses.
 
       int plot_option_kw = 0;
 
       if (nesting_level.none ())
 	plot_option_kw = is_plot_keyword (tok);
-
+      
       if (lexer_flags.cant_be_identifier && plot_option_kw)
 	TOK_RETURN (plot_option_kw);
     }
 
   int c1 = yyinput ();
 
   bool next_tok_is_dot = (c1 == '.');
   bool next_tok_is_paren = (c1 == '(');
