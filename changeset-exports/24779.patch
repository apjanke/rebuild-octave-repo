# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1519155385 18000
#      Tue Feb 20 14:36:25 2018 -0500
# Node ID 5f445419559f74ca47b2726bde19f184d5346244
# Parent  06884b2a4fef31126b6f7a101add8238ac0c78fd
avoid crash on exit with user-defined data types (bug #53156)

* ov-typeinfo.h,  ov-typeinfo.cc (type_info::vals): Now an array
of pointers.
(type_info::register_type): Store pointer to object allocated by new
in vals array.

* Array-tc.cc: Instantiate Array<octave_value *>.

diff --git a/libinterp/octave-value/ov-typeinfo.cc b/libinterp/octave-value/ov-typeinfo.cc
--- a/libinterp/octave-value/ov-typeinfo.cc
+++ b/libinterp/octave-value/ov-typeinfo.cc
@@ -108,17 +108,17 @@ namespace octave
     int len = types.numel ();
 
     if (i == len)
       {
         len *= 2;
 
         types.resize (dim_vector (len, 1), "");
 
-        vals.resize (dim_vector (len, 1), octave_value ());
+        vals.resize (dim_vector (len, 1), nullptr);
 
         unary_ops.resize
           (dim_vector (octave_value::num_unary_ops, len), nullptr);
 
         non_const_unary_ops.resize
           (dim_vector (octave_value::num_unary_ops, len), nullptr);
 
         binary_ops.resize
@@ -138,17 +138,23 @@ namespace octave
 
         pref_assign_conv.resize (dim_vector (len, len), -1);
 
         widening_ops.resize (dim_vector (len, len), nullptr);
       }
 
     types (i) = t_name;
 
-    vals (i) = val;
+    // Yes, this object is intentionally not deleted in the destructor
+    // so that we avoid a crash on exit for user-defined data types.
+    // See bug #53156.  If that problem is properly fixed, then this
+    // could be stored as an object instead of a pointer to an object
+    // allocated with new.
+
+    vals(i) = new octave_value (val);
 
     num_types++;
 
     return i;
   }
 
   bool type_info::register_unary_class_op (octave_value::unary_op op,
                                            type_info::unary_class_op_fcn f,
@@ -470,17 +476,17 @@ namespace octave
   octave_value type_info::lookup_type (const std::string& nm)
   {
     octave_value retval;
 
     for (int i = 0; i < num_types; i++)
       {
         if (nm == types(i))
           {
-            retval = vals(i);
+            retval = *vals(i);
             retval.make_unique ();
             break;
           }
       }
 
     return retval;
   }
 
diff --git a/libinterp/octave-value/ov-typeinfo.h b/libinterp/octave-value/ov-typeinfo.h
--- a/libinterp/octave-value/ov-typeinfo.h
+++ b/libinterp/octave-value/ov-typeinfo.h
@@ -231,17 +231,17 @@ namespace octave
     octave_scalar_map assignany_ops_map (void) const;
 
   private:
 
     int num_types;
 
     Array<std::string> types;
 
-    Array<octave_value> vals;
+    Array<octave_value *> vals;
 
     Array<void *> unary_class_ops;
 
     Array<void *> unary_ops;
 
     Array<void *> non_const_unary_ops;
 
     Array<void *> binary_class_ops;
diff --git a/libinterp/template-inst/Array-tc.cc b/libinterp/template-inst/Array-tc.cc
--- a/libinterp/template-inst/Array-tc.cc
+++ b/libinterp/template-inst/Array-tc.cc
@@ -45,10 +45,13 @@ extern template class OCTAVE_API Array<d
 extern template class OCTAVE_API Array<float>;
 extern template class OCTAVE_API Array<idx_vector>;
 extern template class OCTAVE_API Array<octave_idx_type>;
 extern template class OCTAVE_API Array<std::string>;
 
 NO_INSTANTIATE_ARRAY_SORT (octave_value);
 INSTANTIATE_ARRAY (octave_value, OCTINTERP_API);
 
+NO_INSTANTIATE_ARRAY_SORT (octave_value *);
+INSTANTIATE_ARRAY (octave_value *, OCTINTERP_API);
+
 NO_INSTANTIATE_ARRAY_SORT (cdef_object);
 INSTANTIATE_ARRAY (cdef_object, OCTINTERP_API);
