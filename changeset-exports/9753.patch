# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1256194618 -7200
#      Thu Oct 22 08:56:58 2009 +0200
# Node ID 892e2aa7bc75bf0985f3046702add4d5fd1a530f
# Parent  51c21837686f058c8e568a7189c333ee35b3322b
improve error messages by auto-prepending current function name

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,23 @@
+2009-10-22  Jaroslav Hajek  <highegg@gmail.com>
+
+	* error.cc (verror (bool, std::ostream&, ..., bool)): Add optional
+	with_cfn flag. If specified, prepend current function name (unless
+	already there).
+	(error_1): Accept with_cfn flag and pass it on.
+	(error_2): Ditto.
+	(verror_with_cfn, error_with_cfn, error_with_id_cfn,
+	verror_with_id_cfn): New functions.
+	* error.h: Declare them.
+	* octave.cc (lo_error_handler): Call verror_with_cfn.
+	* ov-base.cc (INT_CONV_METHOD): Call error_with_cfn.
+	* ov.cc (octave_value::int_vector_value,
+	octave_idx_type_vector_value): Call error_with_cfn.
+
 2009-10-21  Rik <octave@nomad.inbox5.com>
 
 	* variables.cc: Correct use of deftypefnx for who and whos
 
 2009-10-21  John W. Eaton  <jwe@octave.org>
 
 	* load-path.h (load_path::dir_path::dir_time_last_checked): New field.
 	(load_path::dir_path::dir_path, load_path::dir_path::operator=):
diff --git a/src/error.cc b/src/error.cc
--- a/src/error.cc
+++ b/src/error.cc
@@ -199,17 +199,18 @@ vwarning (const char *name, const char *
       octave_diary << msg_string;
 
       std::cerr << msg_string;
     }
 }
 
 static void
 verror (bool save_last_error, std::ostream& os,
-	const char *name, const char *id, const char *fmt, va_list args)
+	const char *name, const char *id, const char *fmt, va_list args,
+        bool with_cfn = false)
 {
   if (discard_error_messages)
     return;
 
   if (! buffer_error_messages)
     flush_octave_stdout ();
 
   // FIXME -- we really want to capture the message before it
@@ -227,16 +228,38 @@ verror (bool save_last_error, std::ostre
   std::string msg_string;
 
   if (to_beep_or_not_to_beep_p)
     msg_string = "\a";
 
   if (name)
     msg_string += std::string (name) + ": ";
 
+  // If with_fcn is specified, we'll attempt to prefix the message with the name
+  // of the current executing function. But we'll do so only if:
+  // 1. the name is not empty (anonymous function)
+  // 2. it is not already there (including the following colon)
+  if (with_cfn)
+    {
+      octave_function *curfcn = octave_call_stack::current ();
+      if (curfcn)
+        {
+          std::string cfn = curfcn->name ();
+          if (! cfn.empty ())
+            {
+              cfn += ':';
+              if (cfn.length () > base_msg.length ()
+                 || base_msg.compare (0, cfn.length (), cfn) != 0)
+                {
+                  msg_string += cfn + ' ';
+                }
+            }
+        }
+    }
+
   msg_string += base_msg + "\n";
 
   if (! error_state && save_last_error)
     {
       // This is the first error in a possible series.
 
       Vlast_error_id = id;
       Vlast_error_message = base_msg;
@@ -270,17 +293,17 @@ verror (bool save_last_error, std::ostre
 }
 
 // Note that we don't actually print any message if the error string
 // is just "" or "\n".  This allows error ("") and error ("\n") to
 // just set the error state.
 
 static void
 error_1 (std::ostream& os, const char *name, const char *id,
-	 const char *fmt, va_list args)
+	 const char *fmt, va_list args, bool with_cfn = false)
 {
   if (error_state != -2)
     {
       if (fmt)
 	{
 	  if (*fmt)
 	    {
 	      size_t len = strlen (fmt);
@@ -288,25 +311,25 @@ error_1 (std::ostream& os, const char *n
 	      if (len > 0)
 		{
 		  if (fmt[len - 1] == '\n')
 		    {
 		      if (len > 1)
 			{
 			  char *tmp_fmt = strsave (fmt);
 			  tmp_fmt[len - 1] = '\0';
-			  verror (true, os, name, id, tmp_fmt, args);
+			  verror (true, os, name, id, tmp_fmt, args, with_cfn);
 			  delete [] tmp_fmt;
 			}
 
 		      error_state = -2;
 		    }
 		  else
 		    {
-		      verror (true, os, name, id, fmt, args);
+		      verror (true, os, name, id, fmt, args, with_cfn);
 
 		      if (! error_state)
 			error_state = 1;
 		    }
 		}
 	    }
 	}
       else
@@ -448,21 +471,21 @@ pr_where (const char *who)
 
 	  pr_where_1 ("    %s at line %d column %d\n", nm.c_str (),
 		      line.int_value (), column.int_value ());
 	}
     }
 }
 
 static void
-error_2 (const char *id, const char *fmt, va_list args)
+error_2 (const char *id, const char *fmt, va_list args, bool with_cfn = false)
 {
   int init_state = error_state;
 
-  error_1 (std::cerr, "error", id, fmt, args);
+  error_1 (std::cerr, "error", id, fmt, args, with_cfn);
 
   if ((interactive || forced_interactive)
       && Vdebug_on_error && init_state == 0
       && octave_call_stack::caller_user_code ())
     {
       unwind_protect::protect_var (Vdebug_on_error);
       Vdebug_on_error = false;
 
@@ -487,30 +510,60 @@ error (const char *fmt, ...)
 {
   va_list args;
   va_start (args, fmt);
   verror (fmt, args);
   va_end (args);
 }
 
 void
+verror_with_cfn (const char *fmt, va_list args)
+{
+  error_2 ("", fmt, args, true);
+}
+
+void
+error_with_cfn (const char *fmt, ...)
+{
+  va_list args;
+  va_start (args, fmt);
+  verror_with_cfn (fmt, args);
+  va_end (args);
+}
+
+void
 verror_with_id (const char *id, const char *fmt, va_list args)
 {
   error_2 (id, fmt, args);
 }
 
 void
 error_with_id (const char *id, const char *fmt, ...)
 {
   va_list args;
   va_start (args, fmt);
   verror_with_id (id, fmt, args);
   va_end (args);
 }
 
+void
+verror_with_id_cfn (const char *id, const char *fmt, va_list args)
+{
+  error_2 (id, fmt, args, true);
+}
+
+void
+error_with_id_cfn (const char *id, const char *fmt, ...)
+{
+  va_list args;
+  va_start (args, fmt);
+  verror_with_id_cfn (id, fmt, args);
+  va_end (args);
+}
+
 static int
 check_state (const std::string& state)
 {
   // -1: not found
   //  0: found, "off"
   //  1: found, "on"
   //  2: found, "error"
 
diff --git a/src/error.h b/src/error.h
--- a/src/error.h
+++ b/src/error.h
@@ -42,16 +42,19 @@ extern OCTINTERP_API void vusage (const 
 extern OCTINTERP_API void usage (const char *fmt, ...);
 
 extern OCTINTERP_API void vwarning (const char *fmt, va_list args);
 extern OCTINTERP_API void warning (const char *fmt, ...);
 
 extern OCTINTERP_API void verror (const char *fmt, va_list args);
 extern OCTINTERP_API void error (const char *fmt, ...);
 
+extern OCTINTERP_API void verror_with_cfn (const char *fmt, va_list args);
+extern OCTINTERP_API void error_with_cfn (const char *fmt, ...);
+
 extern OCTINTERP_API void vparse_error (const char *fmt, va_list args);
 extern OCTINTERP_API void parse_error (const char *fmt, ...);
 
 extern OCTINTERP_API void
 vmessage_with_id (const char *id, const char *name, const char *fmt, va_list args);
 
 extern OCTINTERP_API void
 message_with_id (const char *id, const char *name, const char *fmt, ...);
@@ -70,16 +73,22 @@ warning_with_id (const char *id, const c
 
 extern OCTINTERP_API void
 verror_with_id (const char *id, const char *fmt, va_list args);
 
 extern OCTINTERP_API void
 error_with_id (const char *id, const char *fmt, ...);
 
 extern OCTINTERP_API void
+verror_with_id_cfn (const char *id, const char *fmt, va_list args);
+
+extern OCTINTERP_API void
+error_with_id_cfn (const char *id, const char *fmt, ...);
+
+extern OCTINTERP_API void
 vparse_error_with_id (const char *id, const char *fmt, va_list args);
 
 extern OCTINTERP_API void
 parse_error_with_id (const char *id, const char *fmt, ...);
 
 extern OCTINTERP_API void panic (const char *fmt, ...) GCC_ATTR_NORETURN;
 
 // Helper function for print_usage defined in defun.cc.
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -547,17 +547,17 @@ print_version_and_exit (void)
   exit (0);
 }
 
 static void
 lo_error_handler (const char *fmt, ...)
 {
   va_list args;
   va_start (args, fmt);
-  verror (fmt, args);
+  verror_with_cfn (fmt, args);
   va_end (args);
 
   octave_throw_execution_exception ();
 }
 
 static void
 initialize_error_handlers ()
 {
diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -390,17 +390,17 @@ octave_base_value::print_info (std::ostr
   { \
     T retval = 0; \
  \
     double d = double_value (frc_str_conv); \
  \
     if (! error_state) \
       { \
 	if (require_int && D_NINT (d) != d) \
-	  error ("conversion of %g to " #T " value failed", d); \
+	  error_with_cfn ("conversion of %g to " #T " value failed", d); \
 	else if (d < MIN_LIMIT) \
 	  retval = MIN_LIMIT; \
 	else if (d > MAX_LIMIT) \
 	  retval = MAX_LIMIT; \
 	else \
 	  retval = static_cast<T> (::fix (d));	\
       } \
     else \
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -1589,17 +1589,17 @@ octave_value::int_vector_value (bool for
               for (octave_idx_type i = 0; i < a.numel (); i++)
                 {
                   double ai = a.elem (i);
                   int v = static_cast<int> (ai);
                   if (ai == v)
                     retval.xelem (i) = v;
                   else
                     {
-                      error ("conversion to integer value failed");
+                      error_with_cfn ("conversion to integer value failed");
                       break;
                     }
                 }
             }
           else
             retval = Array<int> (a);
         }
     }
@@ -1671,17 +1671,17 @@ octave_value::octave_idx_type_vector_val
               for (octave_idx_type i = 0; i < a.numel (); i++)
                 {
                   double ai = a.elem (i);
                   octave_idx_type v = static_cast<octave_idx_type> (ai);
                   if (ai == v)
                     retval.xelem (i) = v;
                   else
                     {
-                      error ("conversion to integer value failed");
+                      error_with_cfn ("conversion to integer value failed");
                       break;
                     }
                 }
             }
           else
             retval = Array<octave_idx_type> (a);
         }
     }
