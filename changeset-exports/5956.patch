# HG changeset patch
# User jwe
# Date 1156279017 0
#      Tue Aug 22 20:36:57 2006 +0000
# Node ID cdef72fcd206604d338f73dea558ee10bb5220ca
# Parent  fc46f9c990289b3fdb8b8d60cddc1001c6d6d350
[project @ 2006-08-22 20:36:56 by jwe]

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -3459,16 +3459,92 @@ ComplexMatrix::column_max (Array<octave_
         }
     }
 
   return result;
 }
 
 // i/o
 
+// Used when converting Inf to something that gnuplot can read.
+
+#ifndef OCT_RBV
+#define OCT_RBV DBL_MAX / 100.0
+#endif
+
+std::ostream&
+ComplexMatrix::save_ascii (std::ostream& os, bool& infnan_warned,
+			   int strip_nan_and_inf)
+{
+  if (strip_nan_and_inf)
+    {
+      octave_idx_type nr = rows ();
+      octave_idx_type nc = columns ();
+
+      for (octave_idx_type i = 0; i < nr; i++)
+	{
+	  if (strip_nan_and_inf)
+	    {
+	      for (octave_idx_type j = 0; j < nc; j++)
+		{
+		  Complex c = elem (i, j);
+
+		  if (xisnan (c))
+		    {
+		      if (strip_nan_and_inf == 1)
+			goto next_row;
+		      else if (strip_nan_and_inf == 2)
+			goto next_row_with_newline;
+		    }
+		}
+	    }
+
+	  for (octave_idx_type j = 0; j < nc; j++)
+	    {
+	      Complex c = elem (i, j);
+
+	      if (strip_nan_and_inf)
+		{
+		  double re = std::real (c);
+		  double im = std::imag (c);
+
+		  if (xisinf (re))
+		    re = re > 0 ? OCT_RBV : -OCT_RBV;
+
+		  if (xisinf (im))
+		    im = im > 0 ? OCT_RBV : -OCT_RBV;
+
+		  c = Complex (re, im);
+		}
+	      else if (! infnan_warned && (xisnan (c) || xisinf (c)))
+		{
+		  (*current_liboctave_warning_handler)
+		    ("save: Inf or NaN values may not be reloadable");
+
+		  infnan_warned = true;
+		}
+
+	      octave_write_complex (os, c);
+
+	      os << " ";
+	    }
+
+	next_row_with_newline:
+	  os << "\n";
+
+	next_row:
+	  continue;
+	}
+    }
+  else
+    os << *this;
+
+  return os;
+}
+
 std::ostream&
 operator << (std::ostream& os, const ComplexMatrix& a)
 {
   for (octave_idx_type i = 0; i < a.rows (); i++)
     {
       for (octave_idx_type j = 0; j < a.cols (); j++)
 	{
 	  os << " ";
diff --git a/liboctave/CMatrix.h b/liboctave/CMatrix.h
--- a/liboctave/CMatrix.h
+++ b/liboctave/CMatrix.h
@@ -314,16 +314,19 @@ public:
   ComplexRowVector column_min (void) const;
   ComplexRowVector column_max (void) const;
 
   ComplexRowVector column_min (Array<octave_idx_type>& index) const;
   ComplexRowVector column_max (Array<octave_idx_type>& index) const;
 
   // i/o
 
+  std::ostream& save_ascii (std::ostream& os, bool& infnan_warned,
+			    int strip_nan_and_inf);
+
   friend std::ostream& operator << (std::ostream& os, const ComplexMatrix& a);
   friend std::istream& operator >> (std::istream& is, ComplexMatrix& a);
 
   static Complex resize_fill_value (void) { return Complex (0.0, 0.0); }
 
 private:
 
   ComplexMatrix (Complex *d, octave_idx_type r, octave_idx_type c) : MArray2<Complex> (d, r, c) { }
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,13 @@
 2006-08-22  John W. Eaton  <jwe@octave.org>
 
+	* CMatrix.cc (ComplexMatrix::save_ascii): New function.
+	* dMatrix.cc (Matrix::save_ascii): New function.
+
 	* mx-inlines.cc (MX_ND_CUMULATIVE_OP): Correctly detect empty arrays.
 	If array is empty, return value is same size as array.
 	(MX_ND_REDUCTION): Correctly detect empty arrays.
 	If array is empty, produce correctly sized return value.
 
 2006-08-18  John W. Eaton  <jwe@octave.org>
 
 	* dMatrix.cc (Matrix::any_element_not_one_or_zero): New function.
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -2846,16 +2846,84 @@ Matrix::column_max (Array<octave_idx_typ
 	  result.elem (j) = tmp_max;
 	  idx_arg.elem (j) = xisnan (tmp_max) ? 0 : idx_i;
         }
     }
 
   return result;
 }
 
+// Used when converting Inf to something that gnuplot can read.
+
+#ifndef OCT_RBV
+#define OCT_RBV DBL_MAX / 100.0
+#endif
+
+std::ostream&
+Matrix::save_ascii (std::ostream& os, bool& infnan_warned,
+		    int strip_nan_and_inf)
+{
+  if (strip_nan_and_inf)
+    {
+      octave_idx_type nr = rows ();
+      octave_idx_type nc = columns ();
+
+      for (octave_idx_type i = 0; i < nr; i++)
+	{
+	  if (strip_nan_and_inf)
+	    {
+	      for (octave_idx_type j = 0; j < nc; j++)
+		{
+		  double d = elem (i, j);
+
+		  if (xisnan (d))
+		    {
+		      if (strip_nan_and_inf == 1)
+			goto next_row;
+		      else if (strip_nan_and_inf == 2)
+			goto next_row_with_newline;
+		    }
+		}
+	    }
+
+	  for (octave_idx_type j = 0; j < nc; j++)
+	    {
+	      double d = elem (i, j);
+
+	      if (strip_nan_and_inf)
+		{
+		  if (xisinf (d))
+		    d = d > 0 ? OCT_RBV : -OCT_RBV;
+		}
+	      else if (! infnan_warned && (xisnan (d) || xisinf (d)))
+		{
+		  (*current_liboctave_warning_handler)
+		    ("save: Inf or NaN values may not be reloadable");
+
+		  infnan_warned = true;
+		}
+
+	      octave_write_double (os, d);
+
+	      os << " ";
+	    }
+
+	next_row_with_newline:
+	  os << "\n";
+
+	next_row:
+	  continue;
+	}
+    }
+  else
+    os << *this;
+
+  return os;
+}
+
 std::ostream&
 operator << (std::ostream& os, const Matrix& a)
 {
   for (octave_idx_type i = 0; i < a.rows (); i++)
     {
       for (octave_idx_type j = 0; j < a.cols (); j++)
 	{
 	  os << " ";
diff --git a/liboctave/dMatrix.h b/liboctave/dMatrix.h
--- a/liboctave/dMatrix.h
+++ b/liboctave/dMatrix.h
@@ -269,16 +269,19 @@ public:
   RowVector column_min (void) const;
   RowVector column_max (void) const;
 
   RowVector column_min (Array<octave_idx_type>& index) const;
   RowVector column_max (Array<octave_idx_type>& index) const;
 
   // i/o
 
+  std::ostream& save_ascii (std::ostream& os, bool& infnan_warned,
+			    int strip_nan_and_inf);
+
   friend std::ostream& operator << (std::ostream& os, const Matrix& a);
   friend std::istream& operator >> (std::istream& is, Matrix& a);
 
   static double resize_fill_value (void) { return 0; }
 
 private:
 
   Matrix (double *d, octave_idx_type r, octave_idx_type c) : MArray2<double> (d, r, c) { }
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,49 @@
 2006-08-22  John W. Eaton  <jwe@octave.org>
 
+	* ov.h (octave_value::save_ascii): strip_nan_and_inf is now int,
+	not bool.
+	* ov-base.h, ov-base.cc (octave_base_value::save_ascii): Likewise.
+	* ov-base-int.h, ov-base-int.cc	(octave_base_int_matrix<T>::save_ascii,
+	octave_base_int_scalar<T>::save_ascii, ): Likewise.
+	* ov-base-sparse.cc, ov-base-sparse.h
+	(octave_base_sparse<T>::save_ascii): Likewise.
+	* ov-bool-mat.cc, ov-bool-mat.h (octave_bool_matrix::save_ascii):
+	Likewise.
+	* ov-bool.cc, ov-bool.h (octave_bool::save_ascii): Likewise.
+	* ov-cell.cc, ov-cell.h (octave_cell::save_ascii): Likewise.
+	* ov-complex.cc, ov-complex.h (octave_complex::save_ascii): Likewise.
+	* ov-fcn-handle.cc, ov-fcn-handle.h (octave_fcn_handle::save_ascii):
+	Likewise.
+	* ov-fcn-inline.cc, ov-fcn-inline.h (octave_fcn_inline::save_ascii):
+	Likewise.
+	* ov-list.cc, ov-list.h (octave_list::save_ascii): Likewise.
+	* ov-range.cc, ov-range.h (octave_range::save_ascii): Likewise.
+	* ov-scalar.cc, ov-scalar.h (octave_scalar::save_ascii): Likewise.
+	* ov-str-mat.cc, ov-str-mat.h (octave_char_matrix_str::save_ascii):
+	Likewise.
+	* ov-struct.cc, ov-struct.h (octave_struct::save_ascii): Likewise.
+	* ov-re-mat.cc, ov-re-mat.cc (octave_matrix::save_ascii): Likewise.
+	* ov-cx-mat.cc, ov-cx-mat.cc (octave_complex_matrix::save_ascii): Likewise.
+
+	* ov-cx-mat.cc, ov-cx-mat.cc (octave_complex_matrix::save_ascii):
+	Don't strip Inf and NaN here.  Call ComplexMatrix::save_ascii to
+	do the real work.
+	* ov-re-mat.cc, ov-re-mat.cc (octave_matrix::save_ascii):
+	Don't strip Inf and NaN here.  Call Matrix::save_ascii to do the
+	real work.
+
+	* ov-re-mat.cc, ov-cx-mat.cc (strip_infnan): Delete.
+	* ls-oct-ascii.cc, ls-oct-ascii.h (save_ascii_data):
+	strip_nan_and_inf is now int, not bool.
+	(strip_infnan): Delete.
+	(save_ascii_data_for_plotting): Call save_ascii_data with
+	strip_nan_and_inf = 2.
+
 	* Makefile.in (INCLUDES): Remove matrix.h from the list.
 
 2006-08-22  David Bateman  <dbateman@free.fr>
 
 	* sparse-xpow.cc: Replace all uses of pow by std::pow.
 	(elem_pow): Simplify for two sparse matrices arguments.
 
 2006-08-22  John W. Eaton  <jwe@octave.org>
diff --git a/src/ls-oct-ascii.cc b/src/ls-oct-ascii.cc
--- a/src/ls-oct-ascii.cc
+++ b/src/ls-oct-ascii.cc
@@ -67,47 +67,16 @@ 02110-1301, USA.
 
 #include "ls-oct-ascii.h"
 
 // The number of decimal digits to use when writing ascii data.
 static int Vsave_precision = 16;
 
 // Functions for reading ascii data.
 
-static Matrix
-strip_infnan (const Matrix& m)
-{
-  octave_idx_type nr = m.rows ();
-  octave_idx_type nc = m.columns ();
-
-  Matrix retval (nr, nc);
-
-  octave_idx_type k = 0;
-  for (octave_idx_type i = 0; i < nr; i++)
-    {
-      for (octave_idx_type j = 0; j < nc; j++)
-	{
-	  double d = m (i, j);
-	  if (xisnan (d))
-	    goto next_row;
-	  else
-	    retval (k, j) = xisinf (d) ? (d > 0 ? OCT_RBV : -OCT_RBV) : d;
-	}
-      k++;
-
-    next_row:
-      continue;
-    }
-
-  if (k > 0)
-    retval.resize (k, nc);
-
-  return retval;
-}
-
 // Extract a KEYWORD and its value from stream IS, returning the
 // associated value in a new string.
 //
 // Input should look something like:
 //
 //  [%#][ \t]*keyword[ \t]*:[ \t]*string-value[ \t]*\n
 
 std::string
@@ -333,31 +302,33 @@ read_ascii_data (std::istream& is, const
 
   return name;
 }
 
 // Save the data from TC along with the corresponding NAME, and global
 // flag MARK_AS_GLOBAL on stream OS in the plain text format described
 // above for load_ascii_data.  If NAME is empty, the name: line is not
 // generated.  PRECISION specifies the number of decimal digits to print. 
-// If STRIP_NAN_AND_INF is TRUE, rows containing NaNs are deleted,
+// If STRIP_NAN_AND_INF is 1, rows containing NaNs are deleted,
 // and Infinite values are converted to +/-OCT_RBV (A Real Big Value,
 // but not so big that gnuplot can't handle it when trying to compute
-// axis ranges, etc.).
+// axis ranges, etc.).  If STRIP_NAN_AND_INF is 2, rows containing
+// NaNs are converted to blank lines in the output file and infinite
+// values are converted to +/-OCT_RBV.
 //
 // Assumes ranges and strings cannot contain Inf or NaN values.
 //
 // Returns 1 for success and 0 for failure.
 
 // FIXME -- should probably write the help string here too.
 
 bool
 save_ascii_data (std::ostream& os, const octave_value& val_arg,
 		 const std::string& name, bool& infnan_warned,
-		 bool strip_nan_and_inf, bool mark_as_global,
+		 int strip_nan_and_inf, bool mark_as_global,
 		 int precision)
 {
   bool success = true;
 
   if (! name.empty ())
     os << "# name: " << name << "\n";
 
   octave_value val = val_arg;
@@ -381,17 +352,17 @@ save_ascii_data (std::ostream& os, const
 }
 
 bool
 save_ascii_data_for_plotting (std::ostream& os, const octave_value& t,
 			      const std::string& name)
 {
   bool infnan_warned = true;
 
-  return save_ascii_data (os, t, name, infnan_warned, false, false, 0);
+  return save_ascii_data (os, t, name, infnan_warned, 2, false, 0);
 }
 
 // Maybe this should be a static function in tree-plot.cc?
 
 // If TC is matrix, save it on stream OS in a format useful for
 // making a 3-dimensional plot with gnuplot.  If PARAMETRIC is
 // TRUE, assume a parametric 3-dimensional plot will be generated.
 
diff --git a/src/ls-oct-ascii.h b/src/ls-oct-ascii.h
--- a/src/ls-oct-ascii.h
+++ b/src/ls-oct-ascii.h
@@ -46,17 +46,17 @@ extract_keyword (std::istream& is, const
 
 extern std::string
 read_ascii_data (std::istream& is, const std::string& filename, bool& global,
 		 octave_value& tc, octave_idx_type count);
 
 extern bool
 save_ascii_data (std::ostream& os, const octave_value& val_arg,
 		 const std::string& name, bool& infnan_warned,
-		 bool strip_nan_and_inf, bool mark_as_global,
+		 int strip_nan_and_inf, bool mark_as_global,
 		 int precision);
 
 extern bool
 save_ascii_data_for_plotting (std::ostream& os, const octave_value& t,
 			      const std::string& name);
 
 // Match KEYWORD on stream IS, placing the associated value in VALUE,
 // returning TRUE if successful and FALSE otherwise.
diff --git a/src/ov-base-int.cc b/src/ov-base-int.cc
--- a/src/ov-base-int.cc
+++ b/src/ov-base-int.cc
@@ -65,17 +65,17 @@ octave_base_int_matrix<T>::try_narrowing
   if (this->matrix.nelem () == 1)
     retval = new typename octave_value_int_traits<T>::scalar_type (this->matrix (0));
 
   return retval;
 }
 
 template <class T>
 bool
-octave_base_int_matrix<T>::save_ascii (std::ostream& os, bool&, bool)
+octave_base_int_matrix<T>::save_ascii (std::ostream& os, bool&, int)
 {
   dim_vector d = this->dims ();
 
   os << "# ndims: " << d.length () << "\n";
 
   for (int i = 0; i < d.length (); i++)
     os << " " << d (i);
 
@@ -326,17 +326,17 @@ octave_base_int_matrix<T>::print_raw (st
 				      bool pr_as_read_syntax) const
 {
   octave_print_internal (os, this->matrix, pr_as_read_syntax,
    			 this->current_print_indent_level ());
 }
 
 template <class T>
 bool
-octave_base_int_scalar<T>::save_ascii (std::ostream& os, bool& , bool)
+octave_base_int_scalar<T>::save_ascii (std::ostream& os, bool& , int)
 {
   os << this->scalar << "\n";
   return true;
 }
 
 template <class T>
 bool 
 octave_base_int_scalar<T>::load_ascii (std::istream& is)
diff --git a/src/ov-base-int.h b/src/ov-base-int.h
--- a/src/ov-base-int.h
+++ b/src/ov-base-int.h
@@ -63,17 +63,17 @@ public:
 
   //  void increment (void) { matrix += 1; }
 
   //  void decrement (void) { matrix -= 1; }
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   bool save_ascii (std::ostream& os, bool& infnan_warned,
-		   bool strip_nan_and_inf);
+		   int strip_nan_and_inf);
 
   bool load_ascii (std::istream& is);
 
   bool save_binary (std::ostream& os, bool& );
 
   bool load_binary (std::istream& is, bool swap, 
 		    oct_mach_info::float_format );
 
@@ -104,17 +104,17 @@ public:
   octave_base_value *try_narrowing_conversion (void) { return 0; }
 
   bool is_real_type (void) const { return true; }
 
   //  void increment (void) { scalar += 1; }
 
   //  void decrement (void) { scalar -= 1; }
 
-  bool save_ascii (std::ostream& os, bool&, bool );
+  bool save_ascii (std::ostream& os, bool&, int);
 
   bool load_ascii (std::istream& is);
 
   bool save_binary (std::ostream& os, bool& );
 
   bool load_binary (std::istream& is, bool swap, 
 		    oct_mach_info::float_format );
 
diff --git a/src/ov-base-sparse.cc b/src/ov-base-sparse.cc
--- a/src/ov-base-sparse.cc
+++ b/src/ov-base-sparse.cc
@@ -290,17 +290,17 @@ octave_base_sparse<T>::print_raw (std::o
 	      octave_print_internal (os, matrix.data(i), pr_as_read_syntax);
 	    }
 	}
     }
 }
 
 template <class T>
 bool
-octave_base_sparse<T>::save_ascii (std::ostream& os, bool&, bool)
+octave_base_sparse<T>::save_ascii (std::ostream& os, bool&, int)
 {
   dim_vector dv = this->dims ();
 
   // Ensure that additional memory is deallocated
   matrix.maybe_compress ();
 
   os << "# nnz: "      << nzmax () << "\n";
   os << "# rows: "     << dv (0) << "\n";
diff --git a/src/ov-base-sparse.h b/src/ov-base-sparse.h
--- a/src/ov-base-sparse.h
+++ b/src/ov-base-sparse.h
@@ -137,17 +137,17 @@ octave_base_sparse : public octave_base_
 
   void print (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   void print_info (std::ostream& os, const std::string& prefix) const;
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   bool save_ascii (std::ostream& os, bool& infnan_warned,
-		 bool strip_nan_and_inf);
+		   int strip_nan_and_inf);
 
   bool load_ascii (std::istream& is);
 
   // Unsafe.  These functions exists to support the MEX interface.
   // You should not use them anywhere else.
   void *mex_get_data (void) const { return matrix.mex_get_data (); }
 
   octave_idx_type *mex_get_ir (void) const { return matrix.mex_get_ir (); }
diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -810,17 +810,17 @@ octave_value_list
 octave_base_value::list_value (void) const
 {
   octave_value_list retval;
   gripe_wrong_type_arg ("octave_base_value::list_value()", type_name ());
   return retval;
 }
 
 bool 
-octave_base_value::save_ascii (std::ostream&, bool&, bool)
+octave_base_value::save_ascii (std::ostream&, bool&, int)
 {
   gripe_wrong_type_arg ("octave_base_value::save_ascii()", type_name ());
   return false;
 }
 
 bool 
 octave_base_value::load_ascii (std::istream&)
 {
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -410,17 +410,17 @@ public:
 
   virtual void
   print_with_name (std::ostream& output_buf, const std::string& name, 
 		   bool print_padding = true) const;
 
   virtual void print_info (std::ostream& os, const std::string& prefix) const;
 
   virtual bool save_ascii (std::ostream& os, bool& infnan_warned,
-			   bool strip_nan_and_inf);
+			   int strip_nan_and_inf);
 
   virtual bool load_ascii (std::istream& is);
 
   virtual bool save_binary (std::ostream& os, bool& save_as_floats);
 
   virtual bool load_binary (std::istream& is, bool swap, 
 			    oct_mach_info::float_format fmt);
 
diff --git a/src/ov-bool-mat.cc b/src/ov-bool-mat.cc
--- a/src/ov-bool-mat.cc
+++ b/src/ov-bool-mat.cc
@@ -145,17 +145,17 @@ octave_bool_matrix::print_raw (std::ostr
 			       bool pr_as_read_syntax) const
 {
   octave_print_internal (os, matrix, pr_as_read_syntax,
 			 current_print_indent_level ());
 }
 
 bool 
 octave_bool_matrix::save_ascii (std::ostream& os, bool& /* infnan_warned */,
-				bool /* strip_nan_and_inf */)
+				int /* strip_nan_and_inf */)
 {
   dim_vector d = dims ();
   if (d.length () > 2)
     {
       NDArray tmp = array_value ();
       os << "# ndims: " << d.length () << "\n";
 
       for (int i = 0; i < d.length (); i++)
diff --git a/src/ov-bool-mat.h b/src/ov-bool-mat.h
--- a/src/ov-bool-mat.h
+++ b/src/ov-bool-mat.h
@@ -160,17 +160,17 @@ public:
   SparseBoolMatrix sparse_bool_matrix_value (bool = false) const
   { return SparseBoolMatrix (matrix.matrix_value ()); }
 
   octave_value convert_to_str_internal (bool pad, bool force, char type) const;
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   bool save_ascii (std::ostream& os, bool& infnan_warned,
-		 bool strip_nan_and_inf);
+		   int strip_nan_and_inf);
 
   bool load_ascii (std::istream& is);
 
   bool save_binary (std::ostream& os, bool& save_as_floats);
 
   bool load_binary (std::istream& is, bool swap, 
 		    oct_mach_info::float_format fmt);
 
diff --git a/src/ov-bool.cc b/src/ov-bool.cc
--- a/src/ov-bool.cc
+++ b/src/ov-bool.cc
@@ -129,17 +129,17 @@ octave_bool::convert_to_str_internal (bo
   s[0] = static_cast<char> (scalar);
   s[1] = '\0';
 
   return octave_value (s, type);
 }
 
 bool 
 octave_bool::save_ascii (std::ostream& os, bool& /* infnan_warned */,
-			 bool /* strip_nan_and_inf */)
+			 int /* strip_nan_and_inf */)
 {
   double d = double_value ();
 
   octave_write_double (os, d);
   os << "\n";
 
   return true;
 }
diff --git a/src/ov-bool.h b/src/ov-bool.h
--- a/src/ov-bool.h
+++ b/src/ov-bool.h
@@ -152,17 +152,17 @@ public:
   boolNDArray bool_array_value (bool = false) const
     { return boolNDArray (dim_vector (1, 1), scalar); }
 
   octave_value resize (const dim_vector& dv, bool fill = false) const;
 
   octave_value convert_to_str_internal (bool pad, bool force, char type) const;
 
   bool save_ascii (std::ostream& os, bool& infnan_warned,
-		 bool strip_nan_and_inf);
+		   int strip_nan_and_inf);
 
   bool load_ascii (std::istream& is);
 
   bool save_binary (std::ostream& os, bool& save_as_floats);
 
   bool load_binary (std::istream& is, bool swap, 
 		    oct_mach_info::float_format fmt);
 
diff --git a/src/ov-cell.cc b/src/ov-cell.cc
--- a/src/ov-cell.cc
+++ b/src/ov-cell.cc
@@ -429,17 +429,17 @@ octave_cell::print_raw (std::ostream& os
       newline (os);
     }
 }
 
 #define CELL_ELT_TAG "<cell-element>"
 
 bool 
 octave_cell::save_ascii (std::ostream& os, bool& infnan_warned, 
-			       bool strip_nan_and_inf)
+			 int strip_nan_and_inf)
 {
   dim_vector d = dims ();
   if (d.length () > 2)
     {
       os << "# ndims: " << d.length () << "\n";
       
       for (int i = 0; i < d.length (); i++)
 	os << " " << d (i);
diff --git a/src/ov-cell.h b/src/ov-cell.h
--- a/src/ov-cell.h
+++ b/src/ov-cell.h
@@ -109,17 +109,17 @@ public:
   bool print_as_scalar (void) const;
 
   void print (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
 
   bool save_ascii (std::ostream& os, bool& infnan_warned,
-		 bool strip_nan_and_inf);
+		   int strip_nan_and_inf);
 
   bool load_ascii (std::istream& is);
 
   bool save_binary (std::ostream& os, bool& save_as_floats);
 
   bool load_binary (std::istream& is, bool swap, 
 		    oct_mach_info::float_format fmt);
 
diff --git a/src/ov-complex.cc b/src/ov-complex.cc
--- a/src/ov-complex.cc
+++ b/src/ov-complex.cc
@@ -172,17 +172,17 @@ octave_complex::resize (const dim_vector
 	retval(0) = scalar;
 
       return retval;
     }
 }
 
 bool 
 octave_complex::save_ascii (std::ostream& os, bool& infnan_warned, 
-			    bool strip_nan_and_inf)
+			    int strip_nan_and_inf)
 {
   Complex c = complex_value ();
 
   if (strip_nan_and_inf)
     {
       if (xisnan (c))
 	{
 	  error ("only value to plot is NaN");
diff --git a/src/ov-complex.h b/src/ov-complex.h
--- a/src/ov-complex.h
+++ b/src/ov-complex.h
@@ -112,17 +112,17 @@ public:
 
   ComplexNDArray complex_array_value (bool = false) const;
 
   void increment (void) { scalar += 1.0; }
 
   void decrement (void) { scalar -= 1.0; }
 
   bool save_ascii (std::ostream& os, bool& infnan_warned,
-		 bool strip_nan_and_inf);
+		   int strip_nan_and_inf);
 
   bool load_ascii (std::istream& is);
 
   bool save_binary (std::ostream& os, bool& save_as_floats);
 
   bool load_binary (std::istream& is, bool swap, 
 		    oct_mach_info::float_format fmt);
 
diff --git a/src/ov-cx-mat.cc b/src/ov-cx-mat.cc
--- a/src/ov-cx-mat.cc
+++ b/src/ov-cx-mat.cc
@@ -195,58 +195,19 @@ octave_complex_matrix::sparse_matrix_val
 }
 
 SparseComplexMatrix
 octave_complex_matrix::sparse_complex_matrix_value (bool) const
 {
   return SparseComplexMatrix (matrix.matrix_value ());
 }
 
-static ComplexMatrix
-strip_infnan (const ComplexMatrix& m)
-{
-  octave_idx_type nr = m.rows ();
-  octave_idx_type nc = m.columns ();
-
-  ComplexMatrix retval (nr, nc);
-
-  octave_idx_type k = 0;
-  for (octave_idx_type i = 0; i < nr; i++)
-    {
-      for (octave_idx_type j = 0; j < nc; j++)
-	{
-	  Complex c = m (i, j);
-	  if (xisnan (c))
-	    goto next_row;
-	  else
-	    {
-	      double re = std::real (c);
-	      double im = std::imag (c);
-
-	      re = xisinf (re) ? (re > 0 ? OCT_RBV : -OCT_RBV) : re;
-	      im = xisinf (im) ? (im > 0 ? OCT_RBV : -OCT_RBV) : im;
-
-	      retval (k, j) = Complex (re, im);
-	    }
-	}
-      k++;
-
-    next_row:
-      continue;
-    }
-
-  if (k > 0)
-    retval.resize (k, nc);
-
-  return retval;
-}
-
 bool 
 octave_complex_matrix::save_ascii (std::ostream& os, bool& infnan_warned, 
-			       bool strip_nan_and_inf)
+				   int strip_nan_and_inf)
 {
   dim_vector d = dims ();
   if (d.length () > 2)
     {
       ComplexNDArray tmp = complex_array_value ();
 
       if (strip_nan_and_inf)
 	{
@@ -271,25 +232,17 @@ octave_complex_matrix::save_ascii (std::
     {
       // Keep this case, rather than use generic code above for backward 
       // compatiability. Makes load_ascii much more complex!!
       os << "# rows: " << rows () << "\n"
 	 << "# columns: " << columns () << "\n";
 
       ComplexMatrix tmp = complex_matrix_value ();
 
-      if (strip_nan_and_inf)
-	tmp = strip_infnan (tmp);
-      else if (! infnan_warned && tmp.any_element_is_inf_or_nan ())
-	{
-	  warning ("save: Inf or NaN values may not be reloadable");
-	  infnan_warned = true;
-	}
-
-      os << tmp;
+      tmp.save_ascii (os, infnan_warned, strip_nan_and_inf);
     }
 
   return true;
 }
 
 bool 
 octave_complex_matrix::load_ascii (std::istream& is)
 {
diff --git a/src/ov-cx-mat.h b/src/ov-cx-mat.h
--- a/src/ov-cx-mat.h
+++ b/src/ov-cx-mat.h
@@ -116,17 +116,17 @@ public:
 
   SparseComplexMatrix sparse_complex_matrix_value (bool = false) const;
 
   void increment (void) { matrix += Complex (1.0); }
 
   void decrement (void) { matrix -= Complex (1.0); }
 
   bool save_ascii (std::ostream& os, bool& infnan_warned,
-		 bool strip_nan_and_inf);
+		   int strip_nan_and_inf);
 
   bool load_ascii (std::istream& is);
 
   bool save_binary (std::ostream& os, bool& save_as_floats);
 
   bool load_binary (std::istream& is, bool swap, 
 		    oct_mach_info::float_format fmt);
 
diff --git a/src/ov-fcn-handle.cc b/src/ov-fcn-handle.cc
--- a/src/ov-fcn-handle.cc
+++ b/src/ov-fcn-handle.cc
@@ -139,17 +139,17 @@ octave_fcn_handle::subsref (const std::s
 
   if (idx.size () > 1)
     retval = retval(0).next_subsref (nargout, type, idx);
 
   return retval;
 }
 
 bool
-octave_fcn_handle::save_ascii (std::ostream& os, bool&, bool)
+octave_fcn_handle::save_ascii (std::ostream& os, bool&, int)
 {
   os << nm << "\n";
 
   if (nm == "@<anonymous>")
     {
       print_raw (os, true);
       os << "\n";
     }
diff --git a/src/ov-fcn-handle.h b/src/ov-fcn-handle.h
--- a/src/ov-fcn-handle.h
+++ b/src/ov-fcn-handle.h
@@ -80,17 +80,17 @@ public:
 
   octave_fcn_handle *fcn_handle_value (bool = false) { return this; }
 
   octave_value fcn_val (void) const { return fcn; }
 
   std::string fcn_name (void) const { return nm; }
 
   bool save_ascii (std::ostream& os, bool& infnan_warned,
-		 bool strip_nan_and_inf);
+		   int strip_nan_and_inf);
 
   bool load_ascii (std::istream& is);
 
   bool save_binary (std::ostream& os, bool& save_as_floats);
 
   bool load_binary (std::istream& is, bool swap, 
 		    oct_mach_info::float_format fmt);
 
diff --git a/src/ov-fcn-inline.cc b/src/ov-fcn-inline.cc
--- a/src/ov-fcn-inline.cc
+++ b/src/ov-fcn-inline.cc
@@ -85,17 +85,17 @@ octave_fcn_inline::octave_fcn_inline (co
 	fcn = fh->fcn_val ();
     }
 
   if (fcn.is_undefined ())
     error ("inline: unable to define function");
 }
 
 bool
-octave_fcn_inline::save_ascii (std::ostream& os, bool&, bool)
+octave_fcn_inline::save_ascii (std::ostream& os, bool&, int)
 {
   os << "# nargs: " <<  ifargs.length () << "\n";
   for (int i = 0; i < ifargs.length (); i++)
     os << ifargs(i) << "\n";
   if (nm.length () < 1)
     // Write an invalid value to flag empty fcn handle name.
     os << "0\n";
   else
diff --git a/src/ov-fcn-inline.h b/src/ov-fcn-inline.h
--- a/src/ov-fcn-inline.h
+++ b/src/ov-fcn-inline.h
@@ -61,17 +61,17 @@ public:
 
   std::string fcn_text (void) const { return iftext; }
 
   string_vector fcn_arg_names (void) const { return ifargs; }
 
   octave_value convert_to_str_internal (bool, bool, char) const;
 
   bool save_ascii (std::ostream& os, bool& infnan_warned,
-		 bool strip_nan_and_inf);
+		   int strip_nan_and_inf);
 
   bool load_ascii (std::istream& is);
 
   bool save_binary (std::ostream& os, bool& save_as_floats);
 
   bool load_binary (std::istream& is, bool swap, 
 		    oct_mach_info::float_format fmt);
 
diff --git a/src/ov-list.cc b/src/ov-list.cc
--- a/src/ov-list.cc
+++ b/src/ov-list.cc
@@ -534,17 +534,17 @@ is equivalent to @code{append (@var{list
   else
     print_usage ();
 
   return retval;
 }
 
 bool 
 octave_list::save_ascii (std::ostream& os, bool& infnan_warned, 
-			   bool strip_nan_and_inf)
+			 int strip_nan_and_inf)
 {
   octave_value_list lst = list_value ();
   os << "# length: " << lst.length () << "\n";
 
   for (int i = 0; i < lst.length (); ++i)
     {
       // should we use lst.name_tags () to label the elements?
 
diff --git a/src/ov-list.h b/src/ov-list.h
--- a/src/ov-list.h
+++ b/src/ov-list.h
@@ -95,17 +95,17 @@ public:
 
   void print (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   bool print_name_tag (std::ostream& os, const std::string& name) const;
 
   bool save_ascii (std::ostream& os, bool& infnan_warned,
-		 bool strip_nan_and_inf);
+		   int strip_nan_and_inf);
 
   bool load_ascii (std::istream& is);
 
   bool save_binary (std::ostream& os, bool& save_as_floats);
 
   bool load_binary (std::istream& is, bool swap, 
 		    oct_mach_info::float_format fmt);
 
diff --git a/src/ov-range.cc b/src/ov-range.cc
--- a/src/ov-range.cc
+++ b/src/ov-range.cc
@@ -281,17 +281,17 @@ skip_comments (std::istream& is)
 	  ; // Skip to beginning of next line, ignoring everything.
       else
 	break;
     }
 }
 
 bool 
 octave_range::save_ascii (std::ostream& os, bool& /* infnan_warned */,
-			  bool /* strip_nan_and_inf */)
+			  int /* strip_nan_and_inf */)
 {
   Range r = range_value ();
   double base = r.base ();
   double limit = r.limit ();
   double inc = r.inc ();
 
   os << "# base, limit, increment\n";
   octave_write_double (os, base);
diff --git a/src/ov-range.h b/src/ov-range.h
--- a/src/ov-range.h
+++ b/src/ov-range.h
@@ -182,17 +182,17 @@ public:
 
   void print (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   bool print_name_tag (std::ostream& os, const std::string& name) const;
 
   bool save_ascii (std::ostream& os, bool& infnan_warned,
-		 bool strip_nan_and_inf);
+		   int strip_nan_and_inf);
 
   bool load_ascii (std::istream& is);
 
   bool save_binary (std::ostream& os, bool& save_as_floats);
 
   bool load_binary (std::istream& is, bool swap, 
 		    oct_mach_info::float_format fmt);
 
diff --git a/src/ov-re-mat.cc b/src/ov-re-mat.cc
--- a/src/ov-re-mat.cc
+++ b/src/ov-re-mat.cc
@@ -249,50 +249,19 @@ octave_matrix::convert_to_str_internal (
 	}
     }
 
   retval = octave_value (chm, true, type);
 
   return retval;
 }
 
-static Matrix
-strip_infnan (const Matrix& m)
-{
-  octave_idx_type nr = m.rows ();
-  octave_idx_type nc = m.columns ();
-
-  Matrix retval (nr, nc);
-
-  octave_idx_type k = 0;
-  for (octave_idx_type i = 0; i < nr; i++)
-    {
-      for (octave_idx_type j = 0; j < nc; j++)
-	{
-	  double d = m (i, j);
-	  if (xisnan (d))
-	    goto next_row;
-	  else
-	    retval (k, j) = xisinf (d) ? (d > 0 ? OCT_RBV : -OCT_RBV) : d;
-	}
-      k++;
-
-    next_row:
-      continue;
-    }
-
-  if (k > 0)
-    retval.resize (k, nc);
-
-  return retval;
-}
-
 bool 
 octave_matrix::save_ascii (std::ostream& os, bool& infnan_warned, 
-			       bool strip_nan_and_inf)
+			   int strip_nan_and_inf)
 {
   dim_vector d = dims ();
   if (d.length () > 2)
     {
       NDArray tmp = array_value ();
 
       if (strip_nan_and_inf)
 	{
@@ -317,25 +286,17 @@ octave_matrix::save_ascii (std::ostream&
     {
       // Keep this case, rather than use generic code above for backward 
       // compatiability. Makes load_ascii much more complex!!
       os << "# rows: " << rows () << "\n"
 	 << "# columns: " << columns () << "\n";
 
       Matrix tmp = matrix_value ();
 
-      if (strip_nan_and_inf)
-	tmp = strip_infnan (tmp);
-      else if (! infnan_warned && tmp.any_element_is_inf_or_nan ())
-	{
-	  warning ("save: Inf or NaN values may not be reloadable");
-	  infnan_warned = true;
-	}
-
-      os << tmp;
+      tmp.save_ascii (os, infnan_warned, strip_nan_and_inf);
     }
 
   return true;
 }
 
 bool 
 octave_matrix::load_ascii (std::istream& is)
 {
diff --git a/src/ov-re-mat.h b/src/ov-re-mat.h
--- a/src/ov-re-mat.h
+++ b/src/ov-re-mat.h
@@ -151,17 +151,17 @@ public:
 
   void decrement (void) { matrix -= 1.0; }
 
   octave_value convert_to_str_internal (bool pad, bool force, char type) const;
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   bool save_ascii (std::ostream& os, bool& infnan_warned,
-		 bool strip_nan_and_inf);
+		   int strip_nan_and_inf);
 
   bool load_ascii (std::istream& is);
 
   bool save_binary (std::ostream& os, bool& save_as_floats);
 
   bool load_binary (std::istream& is, bool swap, 
 		    oct_mach_info::float_format fmt);
 
diff --git a/src/ov-scalar.cc b/src/ov-scalar.cc
--- a/src/ov-scalar.cc
+++ b/src/ov-scalar.cc
@@ -152,17 +152,17 @@ octave_scalar::convert_to_str_internal (
       retval = octave_value (std::string (1, static_cast<char> (ival)), type);
     }
 
   return retval;
 }
 
 bool 
 octave_scalar::save_ascii (std::ostream& os, bool& infnan_warned, 
-			   bool strip_nan_and_inf)
+			   int strip_nan_and_inf)
 {
   double d = double_value ();
 
   if (strip_nan_and_inf)
     {
       if (xisnan (d))
 	{
 	  error ("only value to plot is NaN");
diff --git a/src/ov-scalar.h b/src/ov-scalar.h
--- a/src/ov-scalar.h
+++ b/src/ov-scalar.h
@@ -182,17 +182,17 @@ public:
 
   octave_value convert_to_str_internal (bool pad, bool force, char type) const;
 
   void increment (void) { ++scalar; }
 
   void decrement (void) { --scalar; }
 
   bool save_ascii (std::ostream& os, bool& infnan_warned,
-		 bool strip_nan_and_inf);
+		   int strip_nan_and_inf);
 
   bool load_ascii (std::istream& is);
 
   bool save_binary (std::ostream& os, bool& save_as_floats);
 
   bool load_binary (std::istream& is, bool swap, 
 		    oct_mach_info::float_format fmt);
 
diff --git a/src/ov-str-mat.cc b/src/ov-str-mat.cc
--- a/src/ov-str-mat.cc
+++ b/src/ov-str-mat.cc
@@ -266,17 +266,17 @@ octave_char_matrix_str::print_raw (std::
 {
   octave_print_internal (os, matrix, pr_as_read_syntax,
 			 current_print_indent_level (), true);
 }
 
 bool 
 octave_char_matrix_str::save_ascii (std::ostream& os,
 				    bool& /* infnan_warned */, 
-				    bool /* strip_nan_and_inf */)
+				    int /* strip_nan_and_inf */)
 {
   dim_vector d = dims ();
   if (d.length () > 2)
     {
       charNDArray tmp = char_array_value ();
       os << "# ndims: " << d.length () << "\n";
       for (int i=0; i < d.length (); i++)
 	os << " " << d (i);
diff --git a/src/ov-str-mat.h b/src/ov-str-mat.h
--- a/src/ov-str-mat.h
+++ b/src/ov-str-mat.h
@@ -125,17 +125,17 @@ public:
 
   std::string string_value (bool force = false) const;
 
   bool print_as_scalar (void) const { return (rows () <= 1); }
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   bool save_ascii (std::ostream& os, bool& infnan_warned,
-		   bool strip_nan_and_inf);
+		   int strip_nan_and_inf);
 
   bool load_ascii (std::istream& is);
 
   bool save_binary (std::ostream& os, bool& save_as_floats);
 
   bool load_binary (std::istream& is, bool swap, 
 		    oct_mach_info::float_format fmt);
 
diff --git a/src/ov-struct.cc b/src/ov-struct.cc
--- a/src/ov-struct.cc
+++ b/src/ov-struct.cc
@@ -1012,17 +1012,17 @@ named fields.\n\
   else
     print_usage ();
 
   return retval;
 }
 
 bool
 octave_struct::save_ascii (std::ostream& os, bool& infnan_warned, 
-			   bool strip_nan_and_inf)
+			   int strip_nan_and_inf)
 {
   Octave_map m = map_value ();
   os << "# length: " << m.length () << "\n";
 
   Octave_map::iterator i = m.begin ();
   while (i != m.end ())
     {
       octave_value val = map.contents (i);
diff --git a/src/ov-struct.h b/src/ov-struct.h
--- a/src/ov-struct.h
+++ b/src/ov-struct.h
@@ -113,17 +113,17 @@ public:
 
   void print (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   bool print_name_tag (std::ostream& os, const std::string& name) const;
 
   bool save_ascii (std::ostream& os, bool& infnan_warned,
-		   bool strip_nan_and_inf);
+		   int strip_nan_and_inf);
 
   bool load_ascii (std::istream& is);
 
   bool save_binary (std::ostream& os, bool& save_as_floats);
 
   bool load_binary (std::istream& is, bool swap, 
 		    oct_mach_info::float_format fmt);
 
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -774,17 +774,17 @@ public:
 				 const Array<int>& ra_idx);
 
   const octave_base_value& get_rep (void) const { return *rep; }
 
   void print_info (std::ostream& os,
 			   const std::string& prefix = std::string ()) const;
 
   bool save_ascii (std::ostream& os, bool& infnan_warned,
-			   bool strip_nan_and_inf) 
+		   int strip_nan_and_inf) 
     { return rep->save_ascii (os, infnan_warned, strip_nan_and_inf); }
 
   bool load_ascii (std::istream& is)
     { return rep->load_ascii (is); }
 
   bool save_binary (std::ostream& os, bool& save_as_floats)
     { return rep->save_binary (os, save_as_floats); }
 
