# HG changeset patch
# User Torsten <ttl@justmail.de>
# Date 1449003599 -3600
#      Tue Dec 01 21:59:59 2015 +0100
# Node ID b6091735f3f5b979e570f3ca14b30040da2eb0ca
# Parent  05b86b04499578eaa136a34d1c6dab94685b5ec8
warning when saving editor file with a codec not suited for current contents

* file-editor-tab.cc (save_file) call the new function for checking whether
  contents can be encoded using the current codecForName
  (check_valid_codec): check with canEncode () whether codec is suitable or not

* m-editor/file-editor-tab.h: new function for checking the codec

diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -1527,23 +1527,31 @@ file_editor_tab::save_file (const QStrin
                            arg (file_to_save).arg (file.errorString ()),
                            QMessageBox::Ok, 0);
       show_dialog (msgBox, false);
 
       return;
     }
 
   // save the contents into the file
-  QTextStream out (&file);
+
+  _encoding = _new_encoding;    // consider a possible new encoding
+
+  // set the desired codec (if suitable for contents)
+  QTextCodec *codec = QTextCodec::codecForName (_encoding.toAscii ());
 
-  // consider a possible new encoding (from the save-file-as dialog)
-  _encoding = _new_encoding;
-  // set the desired codec
-  QTextCodec *codec = QTextCodec::codecForName (_encoding.toAscii ());
-  out.setCodec(codec);
+  if (check_valid_codec (codec))
+    {
+      save_file_as (remove_on_success);
+      return;
+    }
+
+  // write the file
+  QTextStream out (&file);
+  out.setCodec (codec);
 
   QApplication::setOverrideCursor (Qt::WaitCursor);
   out << _edit_area->text ();
   out.flush ();
   QApplication::restoreOverrideCursor ();
   file.flush ();
   file.close ();
 
@@ -1733,25 +1741,44 @@ file_editor_tab::check_valid_identifier 
 
       if (ans == QMessageBox::Yes)
         return true;
     }
 
   return false;
 }
 
+bool
+file_editor_tab::check_valid_codec (QTextCodec *codec)
+{
+  if (! codec->canEncode (_edit_area->text ()))
+    {
+      int ans = QMessageBox::warning (0,
+            tr ("Octave Editor"),
+            tr ("The current editor contents can not be encoded\n"
+                "with the selected codec %1.\n"
+                "Using it will result in data loss!\n\n"
+                "Do you want to chose another codec?").arg (_encoding),
+            QMessageBox::Yes | QMessageBox::No, QMessageBox::Yes);
+
+      if (ans == QMessageBox::Yes)
+        return true;
+    }
+
+  return false;
+}
+
 void
 file_editor_tab::handle_save_file_as_answer (const QString& saveFileName)
 {
   if (_save_as_desired_eol != _edit_area->eolMode ())
     convert_eol (this,_save_as_desired_eol);
 
   if (saveFileName == _file_name)
     {
-      // same name as actual file, save it as "save" would do
       save_file (saveFileName);
     }
   else
     {
       // Have editor check for conflict, do not delete tab after save.
       if (check_valid_identifier (saveFileName))
         save_file_as (false);
       else
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -194,16 +194,17 @@ private:
     std::string dir;
     std::string function_name;
   };
 
   bool valid_file_name (const QString& file=QString ());
   void save_file (const QString& saveFileName, bool remove_on_success = false);
   void save_file_as (bool remove_on_success = false);
   bool check_valid_identifier (QString file_name);
+  bool check_valid_codec (QTextCodec *codec);
 
   void update_lexer ();
   void request_add_breakpoint (int line);
   void request_remove_breakpoint (int line);
 
   void show_dialog (QDialog *dlg, bool modal);
   int check_file_modified ();
   void do_comment_selected_text (bool comment);
