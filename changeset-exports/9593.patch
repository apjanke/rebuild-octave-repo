# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1251785759 -7200
#      Tue Sep 01 08:15:59 2009 +0200
# Node ID cf8403208c43d357e2da1b92d08dd3102db8f0b4
# Parent  5828d64ca0041ec561dfd6f27deb0548ef70d4d3
Fix nesting error in options parsing of eigs

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2008-09-01  David Bateman  <dbateman@free.fr>
+
+	* DLD-FUNCTIONS/eig.cc (Feigs): Correct nesting error in option
+	parsing that prevented the use of a function for generalized
+	eigenvalue problems.
+
 2009-08-30  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ops.h (DEFCMPLXCMPOP_OP, DEFNDCMPLXCMPOP_FN): New macros.
 	* gripes.cc (gripe_warn_complex_cmp): New function.
 	* gripes.h: declare it.
 
 	* OPERATORS/op-cm-cm.cc: Call the new macros.
 	* OPERATORS/op-cm-cs.cc: Ditto.
diff --git a/src/DLD-FUNCTIONS/eigs.cc b/src/DLD-FUNCTIONS/eigs.cc
--- a/src/DLD-FUNCTIONS/eigs.cc
+++ b/src/DLD-FUNCTIONS/eigs.cc
@@ -420,35 +420,37 @@ K Maschhoff, D Sorensen and C Yang.  For
 	    }
 	  else
 	    {
 	      amm = (args(0).matrix_value());
 	      symmetric = amm.is_symmetric();
 	    }
 	}
 
-      // Note hold off reading B till later to avoid issues of double 
-      // copies of the matrix if B is full/real while A is complex..
-      if (!error_state && nargin > 1 && !(args(1).is_real_scalar ()))
+    }
+
+  // Note hold off reading B till later to avoid issues of double 
+  // copies of the matrix if B is full/real while A is complex..
+  if (!error_state && nargin > 1 + arg_offset && 
+      !(args(1 + arg_offset).is_real_scalar ()))
+    {
+      if (args(1+arg_offset).is_complex_type ())
 	{
-	  if (args(1).is_complex_type ())
-	    {
-	      b_arg = 1+arg_offset;
-	      have_b = true;
-	      bmat = 'G';
-	      b_is_complex = true;
-	      arg_offset++;
-	    }
-	  else
-	    {
-	      b_arg = 1+arg_offset;
-	      have_b = true;
-	      bmat = 'G';
-	      arg_offset++;
-	    }
+	  b_arg = 1+arg_offset;
+	  have_b = true;
+	  bmat = 'G';
+	  b_is_complex = true;
+	  arg_offset++;
+	}
+      else
+	{
+	  b_arg = 1+arg_offset;
+	  have_b = true;
+	  bmat = 'G';
+	  arg_offset++;
 	}
     }
 
   if (!error_state && nargin > (1+arg_offset))
     k = args(1+arg_offset).nint_value ();
 
   if (!error_state && nargin > (2+arg_offset))
     {
@@ -829,16 +831,21 @@ K Maschhoff, D Sorensen and C Yang.  For
 %! d1 = eigs (fn, n, k, 'sm', opts);
 %! assert (d1, d0(k:-1:1), 1e-11);
 %!testif HAVE_ARPACK
 %! fn = @(x) (A - 4.1 * eye(n)) \ x;
 %! opts.issym = 1; opts.isreal = 1;
 %! d1 = eigs (fn, n, k, 4.1, opts);
 %! assert (d1, eigs(A,k,4.1), 1e-11);
 %!testif HAVE_ARPACK
+%! AA = speye (10);
+%! fn = @(x) A * x;
+%! opts.issym = 1; opts.isreal = 1;
+%! assert (eigs (fn, 10, AA, 3, 'lm', opts), [1; 1; 1]);
+%!testif HAVE_ARPACK
 %! [v1,d1] = eigs(A, k, 'lm');
 %! d1 = diag(d1);
 %! for i=1:k
 %!  assert(max(abs((A - d1(i)*speye(n))*v1(:,i))),0.,1e-11)
 %! endfor
 %!testif HAVE_ARPACK
 %! [v1,d1] = eigs(A, k, 'sm');
 %! d1 = diag(d1);
