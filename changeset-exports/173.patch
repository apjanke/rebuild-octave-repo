# HG changeset patch
# User jwe
# Date 751243416 0
#      Thu Oct 21 22:43:36 1993 +0000
# Node ID c74bb6e6c838fce096e16f9fd14ba528fb34276b
# Parent  0597476bbe6d110c45015231c50e08bb8dc2e638
[project @ 1993-10-21 22:43:36 by jwe]

diff --git a/info/Makefile.in b/info/Makefile.in
--- a/info/Makefile.in
+++ b/info/Makefile.in
@@ -12,117 +12,106 @@
 # GNU General Public License for more details.
 
 # You should have received a copy of the GNU General Public License
 # along with this program; if not, write to the Free Software
 # Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 
 #### Start of system configuration section. ####
 
-srcdir = @srcdir@
-VPATH  = $(srcdir):$(common)
+TOPDIR = ..
 
-common = $(srcdir)/../libtxi
-
-CC = @CC@
+include $(TOPDIR)/Makeconf
 
-INSTALL = @INSTALL@
-INSTALL_PROGRAM = @INSTALL_PROGRAM@
-INSTALL_DATA = @INSTALL_DATA@
+srcdir = @srcdir@
+VPATH  = @srcdir@:@srcdir@/../src
 
-LN	= ln
-RM	= rm -f
-TAR	= tar
-MKDIR	= mkdir
-MAKEINFO= ../makeinfo/makeinfo
-COMPRESS= compress
+common = @srcdir@/../src
 
-DEFS = @DEFS@
+MAKEINFO= makeinfo
 
 LDEFS = -DNAMED_FUNCTIONS=1 -DDEFAULT_INFOPATH='"$(DEFAULT_INFOPATH)"'
 
 TERMLIBS = @TERMLIBS@
-LIBS = $(TERMLIBS) -L../libtxi -ltxi @LIBS@
+LIBS = $(TERMLIBS) @LIBS@
 LOADLIBES = $(LIBS)
 
 SHELL = /bin/sh
 
-CFLAGS = -g
-LDFLAGS = -g
-
-prefix = /usr/local
-exec_prefix = $(prefix)
-bindir = $(exec_prefix)/bin
-# Prefix for each installed program, normally empty or `g'.
-binprefix = 
-libdir = $(prefix)/lib
-# Prefix for each installed man page, normally empty or `g'.
-manprefix = 
-mandir = $(prefix)/man/man1
-manext = 1
-infodir = $(prefix)/info
-
 #### End of system configuration section. ####
 
 SRCS =	dir.c		display.c	echo_area.c	filesys.c \
 	info-utils.c	info.c		infodoc.c	infomap.c \
 	m-x.c		nodes.c		search.c	session.c \
 	signals.c	terminal.c	tilde.c		window.c \
 	xmalloc.c	indices.c	makedoc.c	nodemenu.c \
-	footnotes.c	dribble.c	variables.c	gc.c
+	footnotes.c	dribble.c	variables.c	gc.c \
+	error.c
 
 HDRS =	display.h	doc.h		echo_area.h	filesys.h \
 	general.h	getopt.h	info-utils.h	info.h \
 	infomap.h	nodes.h		search.h 	session.h \
 	signals.h	termdep.h	terminal.h	tilde.h \
 	indices.h	window.h	footnotes.h	dribble.h \
 	variables.h	gc.h
 
-OBJS =	dir.o display.o doc.o echo_area.o filesys.o info-utils.o info.o \
+DISTFILES = $(SRCS) $(HDRS)
+
+GETOPT_OBJS = getopt.o getopt1.o
+
+LIBOBJS = dir.o display.o doc.o echo_area.o filesys.o info-utils.o \
 	infodoc.o infomap.o m-x.o nodes.o search.o session.o signals.o \
 	terminal.o tilde.o window.o indices.o xmalloc.o nodemenu.o \
-	footnotes.o dribble.o variables.o gc.o 
+	footnotes.o dribble.o variables.o gc.o error.o
+
+OBJS = info.o $(LIBOBJS) $(GETOPT_OBJS)
 
 # The names of files which declare info commands.
 CMDFILES = $(srcdir)/session.c $(srcdir)/echo_area.c $(srcdir)/infodoc.c \
 	   $(srcdir)/m-x.c $(srcdir)/indices.c $(srcdir)/nodemenu.c \
 	   $(srcdir)/footnotes.c $(srcdir)/variables.c
 
 # The name of the program which builds documentation structure from CMDFILES.
 MAKEDOC_OBJECTS = makedoc.o xmalloc.o
 MAKEDOC_SOURCE = makedoc.c xmalloc.c
 
 .c.o:
-	$(CC) -c $(CPPFLAGS) $(LDEFS) $(DEFS) -I. -I$(srcdir) -I$(common) $(CFLAGS) $<
+	$(CC) -c $(CPPFLAGS) $(LDEFS) -I$(common) $(ALL_CFLAGS) $<
 
-all: info info.info info-stnd.info
+all: ../libinfo.a # info.info info-stnd.info
 sub-all: all
 
 install: all
-	$(INSTALL_PROGRAM) info $(bindir)/info
-	-d=$(srcdir); test -f ./info.info && d=.; $(INSTALL_DATA) $$d/info.info $(infodir)/info.info
-	-d=$(srcdir); test -f ./info-stnd.info && d=.; $(INSTALL_DATA) $$d/info-stnd.info $(infodir)/info-stnd.info
-	-$(INSTALL_DATA) $(srcdir)/info.1 $(mandir)/info.$(manext)
+	$(INSTALL_PROGRAM) info $(datadir)/info
+#	-d=$(srcdir); test -f ./info.info && d=.; \
+#	    $(INSTALL_DATA) $$d/info.info $(infodir)/info.info
+#	-d=$(srcdir); test -f ./info-stnd.info && d=.; \
+#	    $(INSTALL_DATA) $$d/info-stnd.info $(infodir)/info-stnd.info
+#	-$(INSTALL_DATA) $(srcdir)/info.1 $(mandir)/info.$(manext)
 
 uninstall:
-	rm -f $(bindir)/info
-	rm -f $(infodir)/info.info
-	rm -f $(infodir)/info-stnd.info
-	rm -f $(mandir)/info.$(manext)
+	rm -f $(libexecdir)/info
+#	rm -f $(infodir)/info.info
+#	rm -f $(infodir)/info-stnd.info
+#	rm -f $(mandir)/info.$(manext)
 
-info: $(OBJS) ../libtxi/libtxi.a
+../libinfo.a: $(LIBOBJS)
+	$(AR) $(ARFLAGS) ../libinfo.a $(LIBOBJS)
+	$(RANLIB) ../libinfo.a
+
+info: $(OBJS)
 	$(CC) $(LDFLAGS) -o info $(OBJS) $(LOADLIBES)
 
 info.info: info.texi
 	$(MAKEINFO) --no-split -I$(srcdir) info.texi
 
 info-stnd.info: info-stnd.texi
 	$(MAKEINFO) --no-split -I$(srcdir) info-stnd.texi
 
-makedoc: $(MAKEDOC_OBJECTS) ../libtxi/libtxi.a
+makedoc: $(MAKEDOC_OBJECTS)
 	$(CC) $(LDFLAGS) -o makedoc $(MAKEDOC_OBJECTS) $(LOADLIBES)
 
 Makefile: $(srcdir)/Makefile.in ../config.status
 	cd ..; sh config.status
 
 clean:
 	rm -f info funs.h doc.c makedoc $(OBJS) $(MAKEDOC_OBJECTS)
 
@@ -130,16 +119,24 @@ distclean: clean texclean
 	rm -f Makefile config.status *~ core core.* *.BAK TAGS
 
 mostlyclean: clean
 
 realclean: distclean
 	rm -f funs.h doc.c
 	rm -f info.info info-stnd.info
 
+local-dist:
+	ln $(DISTFILES) ../`cat ../.fname`/info
+.PHONY: local-dist
+
+dist:
+	ln $(DISTFILES) ../`cat ../.fname`/info
+.PHONY: dist
+
 TAGS: $(SRCS) makedoc-TAGS
 	etags $(SRCS)
 	cat makedoc-TAGS >>TAGS && rm -f makedoc-TAGS
 
 makedoc-TAGS: $(CMDFILES)
 	./makedoc -tags $(CMDFILES) >makedoc-TAGS
 
 texclean:
diff --git a/info/indices.c b/info/indices.c
--- a/info/indices.c
+++ b/info/indices.c
@@ -171,16 +171,25 @@ info_indices_of_file_buffer (file_buffer
       result[i]->filename = savestring (file_buffer->filename);
 
   return (result);
 }
 
 DECLARE_INFO_COMMAND (info_index_search,
    "Look up a string in the index for this file")
 {
+  do_info_index_search (window, count, 0);
+}
+
+void
+do_info_index_search (window, count, search_string)
+     WINDOW *window;
+     int count;
+     char *search_string;
+{
   FILE_BUFFER *fb;
   char *line;
 
   /* Reset the index offset, since this is not the info-index-next command. */
   index_offset = 0;
 
   /* The user is selecting a new search string, so flush the old one. */
   maybe_free (index_search);
@@ -199,45 +208,50 @@ DECLARE_INFO_COMMAND (info_index_search,
 
   /* If there is no index, quit now. */
   if (!index_index)
     {
       info_error ("No indices found.");
       return;
     }
 
-  /* Okay, there is an index.  Let the user select one of the members of it. */
-  line =
-    info_read_maybe_completing (window, "Index entry: ", index_index);
-
-  window = active_window;
+  if (search_string && *search_string)
+    line = savestring (search_string);
+  else
+    {
+      /* Okay, there is an index.  Let the user select one of the
+	 members of it. */ 
+      line = info_read_maybe_completing (window, "Index entry: ", index_index);
 
-  /* User aborted? */
-  if (!line)
-    {
-      info_abort_key (active_window, 1, 0);
-      return;
-    }
+      window = active_window;
+
+      /* User aborted? */
+      if (!line)
+	{
+	  info_abort_key (active_window, 1, 0);
+	  return;
+	}
 
-  /* Empty line means move to the Index node. */
-  if (!*line)
-    {
-      free (line);
-
-      if (initial_index_filename && initial_index_nodename)
+      /* Empty line means move to the Index node. */
+      if (!*line)
 	{
-	  NODE *node;
+	  free (line);
+
+	  if (initial_index_filename && initial_index_nodename)
+	    {
+	      NODE *node;
 
-	  node =
-	    info_get_node (initial_index_filename, initial_index_nodename);
-	  set_remembered_pagetop_and_point (window);
-	  window_set_node_of_window (window, node);
-	  remember_window_and_node (window, node);
-	  window_clear_echo_area ();
-	  return;
+	      node =
+		info_get_node (initial_index_filename, initial_index_nodename);
+	      set_remembered_pagetop_and_point (window);
+	      window_set_node_of_window (window, node);
+	      remember_window_and_node (window, node);
+	      window_clear_echo_area ();
+	      return;
+	    }
 	}
     }
 
   /* The user typed either a completed index label, or a partial string.
      Find an exact match, or, failing that, the first index entry containing
      the partial string.  So, we just call info_next_index_match () with minor
      manipulation of INDEX_OFFSET. */
   {
@@ -262,16 +276,63 @@ DECLARE_INFO_COMMAND (info_index_search,
     info_next_index_match (window, count, 0);
 
     /* If the search failed, return the index offset to where it belongs. */
     if (index_offset == old_offset)
       index_offset = 0;
   }
 }
 
+int
+index_entry_exists (window, string)
+     WINDOW *window;
+     char *string;
+{
+  register int i;
+  FILE_BUFFER *fb;
+
+  /* If there is no previous search string, the user hasn't built an index
+     yet. */
+  if (!string)
+    return 0;
+
+  fb = file_buffer_of_window (window);
+  if (!initial_index_filename ||
+      (strcmp (initial_index_filename, fb->filename) != 0))
+    {
+      info_free_references (index_index);
+      index_index = info_indices_of_file_buffer (fb);
+    }
+
+  /* If there is no index, that is an error. */
+  if (!index_index)
+    return 0;
+
+  for (i = 0; (i > -1) && (index_index[i]); i++)
+    if (strcmp (string, index_index[i]->label) == 0)
+      break;
+
+  /* If that failed, look for the next substring match. */
+  if ((i < 0) || (!index_index[i]))
+    {
+      for (i = 0; (i > -1) && (index_index[i]); i++)
+	if (string_in_line (string, index_index[i]->label) != -1)
+	  break;
+
+      if ((i > -1) && (index_index[i]))
+	string_in_line (string, index_index[i]->label);
+    }
+
+  /* If that failed, return 0. */
+  if ((i < 0) || (!index_index[i]))
+    return 0;
+
+  return 1;
+}
+
 DECLARE_INFO_COMMAND (info_next_index_match,
  "Go to the next matching index item from the last `\\[index-search]' command")
 {
   register int i;
   int partial, dir;
   NODE *node;
 
   /* If there is no previous search string, the user hasn't built an index
@@ -659,9 +720,8 @@ DECLARE_INFO_COMMAND (info_index_apropos
       }
       info_free_references (apropos_list);
     }
   free (line);
 
   if (!info_error_was_printed)
     window_clear_echo_area ();
 }
-
diff --git a/info/indices.h b/info/indices.h
--- a/info/indices.h
+++ b/info/indices.h
@@ -30,10 +30,11 @@ extern int show_index_match;
 extern REFERENCE **info_indices_of_window (), **info_indices_of_file_buffer ();
 extern void info_apropos ();
 
 /* For every menu item in DIR, search the indices of that file for STRING. */
 REFERENCE **apropos_in_all_indices ();
 
 /* User visible functions declared in indices.c. */
 extern void info_index_search (), info_next_index_match ();
+extern void do_info_index_search ();
 
 #endif /* !_INDICES_H_ */
diff --git a/info/info.c b/info/info.c
--- a/info/info.c
+++ b/info/info.c
@@ -18,29 +18,33 @@
    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 
    Written by Brian Fox (bfox@ai.mit.edu). */
 
 #include "info.h"
 #include "dribble.h"
+#include "terminal.h"
 #include "getopt.h"
 
-/* The version numbers of this version of Info. */
-int info_major_version = 2;
-int info_minor_version = 10;
-int info_patch_level = 1;
-
 /* Non-zero means search all indices for APROPOS_SEARCH_STRING. */
 static int apropos_p = 0;
 
 /* Variable containing the string to search for when apropos_p is non-zero. */
 static char *apropos_search_string = (char *)NULL;
 
+/* Non-zero means search all indices for INDEX_SEARCH_STRING.  Unlike
+   apropos, this puts the user at the node, running info. */
+static int index_search_p = 0;
+
+/* Variable containing the string to search for when index_search_p is
+   non-zero. */ 
+static char *index_search_string = (char *)NULL;
+
 /* Non-zero means print version info only. */
 static int print_version_p = 0;
 
 /* Non-zero means print a short description of the options. */
 static int print_help_p = 0;
 
 /* Array of the names of nodes that the user specified with "--node" on the
    command line. */
@@ -62,36 +66,35 @@ static char *user_output_filename = (cha
 int dump_subnodes = 0;
 
 /* Structure describing the options that Info accepts.  We pass this structure
    to getopt_long ().  If you add or otherwise change this structure, you must
    also change the string which follows it. */
 #define APROPOS_OPTION 1
 #define DRIBBLE_OPTION 2
 #define RESTORE_OPTION 3
+#define IDXSRCH_OPTION 4
 static struct option long_options[] = {
   { "apropos", 1, 0, APROPOS_OPTION },
   { "directory", 1, 0, 'd' },
   { "node", 1, 0, 'n' },
   { "file", 1, 0, 'f' },
   { "subnodes", 0, &dump_subnodes, 1 },
   { "output", 1, 0, 'o' },
   { "help", 0, &print_help_p, 1 },
   { "version", 0, &print_version_p, 1 },
   { "dribble", 1, 0, DRIBBLE_OPTION },
   { "restore", 1, 0, RESTORE_OPTION },
+  { "index-search", 1, 0, IDXSRCH_OPTION },
   {NULL, 0, NULL, 0}
 };
 
 /* String describing the shorthand versions of the long options found above. */
 static char *short_options = "d:n:f:o:s";
 
-/* When non-zero, the Info window system has been initialized. */
-int info_windows_initialized_p = 0;
-
 /* Some "forward" declarations. */
 static void usage (), info_short_help (), remember_info_program_name ();
 
 
 /* **************************************************************** */
 /*								    */
 /*		  Main Entry Point to the Info Program		    */
 /*								    */
@@ -177,16 +180,23 @@ main (argc, argv)
 	  open_dribble_file (optarg);
 	  break;
 
 	  /* User has specified an alternate input stream. */
 	case RESTORE_OPTION:
 	  info_set_input_from_file (optarg);
 	  break;
 
+	  /* User has specified a string to search all indices for. */
+	case IDXSRCH_OPTION:
+	  index_search_p = 1;
+	  maybe_free (index_search_string);
+	  index_search_string = savestring (optarg);
+	  break;
+
 	default:
 	  usage ();
 	}
     }
 
   /* If the user specified --version, then show the version and exit. */
   if (print_version_p)
     {
@@ -271,16 +281,47 @@ main (argc, argv)
 	dump_nodes_to_file
 	  (user_filename, user_nodenames, user_output_filename, dump_subnodes);
       else
 	begin_multiple_window_info_session (user_filename, user_nodenames);
 
       exit (0);
     }
 
+  /* If the user specified `--index-search string', start the info
+     session in the node corresponding to the first match. */
+  if (index_search_p)
+    {
+      int status = 0;
+
+      initialize_info_session (initial_node, 0);
+
+      if (index_entry_exists (windows, index_search_string))
+	{
+	  terminal_clear_screen ();
+	  terminal_prep_terminal ();
+	  display_update_display (windows);
+	  info_last_executed_command = (VFunction *)NULL;
+
+	  do_info_index_search (windows, 0, index_search_string);
+
+	  info_read_and_dispatch ();
+
+	  terminal_unprep_terminal ();
+	}
+      else
+	{
+	  fprintf (stderr, "no entries found\n");
+	  status = 13;
+	}
+
+      close_dribble_file (); 
+      exit (status);
+    }
+
   /* If there are arguments remaining, they are the names of menu items
      in sequential info files starting from the first one loaded.  That
      file name is either "dir", or the contents of user_filename if one
      was specified. */
   while (optind != argc)
     {
       REFERENCE **menu;
       REFERENCE *entry;
@@ -386,95 +427,28 @@ main (argc, argv)
   if (user_output_filename)
     dump_node_to_file (initial_node, user_output_filename, dump_subnodes);
   else
     begin_info_session (initial_node);
 
   exit (0);
 }
 
-/* Return a string describing the current version of Info. */
-char *
-version_string ()
-{
-  static char *vstring = (char *)NULL;
-
-  if (!vstring)
-    {
-      vstring = (char *)xmalloc (50);
-      sprintf (vstring, "%d.%d", info_major_version, info_minor_version);
-      if (info_patch_level)
-	sprintf (vstring + strlen (vstring), "-p%d", info_patch_level);
-    }
-  return (vstring);
-}
-
-/* **************************************************************** */
-/*								    */
-/*		   Error Handling for Info			    */
-/*								    */
-/* **************************************************************** */
-
 static char *program_name = (char *)NULL;
 
 static void
 remember_info_program_name (fullpath)
      char *fullpath;
 {
   char *filename;
 
   filename = filename_non_directory (fullpath);
   program_name = savestring (filename);
 }
 
-/* Non-zero if an error has been signalled. */
-int info_error_was_printed = 0;
-
-/* Non-zero means ring terminal bell on errors. */
-int info_error_rings_bell_p = 1;
-
-/* Print FORMAT with ARG1 and ARG2.  If the window system was initialized,
-   then the message is printed in the echo area.  Otherwise, a message is
-   output to stderr. */
-void
-info_error (format, arg1, arg2)
-     char *format;
-     void *arg1, *arg2;
-{
-  info_error_was_printed = 1;
-
-  if (!info_windows_initialized_p || display_inhibited)
-    {
-      fprintf (stderr, "%s: ", program_name);
-      fprintf (stderr, format, arg1, arg2);
-      fprintf (stderr, "\n");
-      fflush (stderr);
-    }
-  else
-    {
-      if (!echo_area_is_active)
-	{
-	  if (info_error_rings_bell_p)
-	    terminal_ring_bell ();
-	  window_message_in_echo_area (format, arg1, arg2);
-	}
-      else
-	{
-	  NODE *temp;
-
-	  temp = build_message_node (format, arg1, arg2);
-	  if (info_error_rings_bell_p)
-	    terminal_ring_bell ();
-	  inform_in_echo_area (temp->contents);
-	  free (temp->contents);
-	  free (temp);
-	}
-    }
-}
-
 /* Produce a very brief descripton of the available options and exit with
    an error. */
 static void
 usage ()
 {
   fprintf (stderr,"%s\n%s\n%s\n%s\n%s\n",
 "Usage: info [-d dir-path] [-f info-file] [-o output-file] [-n node-name]...",
 "            [--directory dir-path] [--file info-file] [--node node-name]...",
diff --git a/info/session.c b/info/session.c
--- a/info/session.c
+++ b/info/session.c
@@ -57,16 +57,17 @@ INFO_WINDOW **info_windows = (INFO_WINDO
 static int info_windows_index = 0;
 
 /* Number of slots allocated to INFO_WINDOWS. */
 static int info_windows_slots = 0;
 
 void remember_window_and_node (), forget_window_and_nodes ();
 void initialize_info_session (), info_session ();
 void display_startup_message_and_start ();
+void finish_info_session ();
 
 /* Begin an info session finding the nodes specified by FILENAME and NODENAMES.
    For each loaded node, create a new window.  Always split the largest of the
    available windows. */
 void
 begin_multiple_window_info_session (filename, nodenames)
      char *filename;
      char **nodenames;
@@ -81,17 +82,17 @@ begin_multiple_window_info_session (file
       node = info_get_node (filename, nodenames[i]);
 
       if (!node)
 	break;
 
       /* If this is the first node, initialize the info session. */
       if (!window)
 	{
-	  initialize_info_session (node);
+	  initialize_info_session (node, 1);
 	  window = active_window;
 	}
       else
 	{
 	  /* Find the largest window in WINDOWS, and make that be the active
 	     one.  Then split it and add our window and node to the list
 	     of remembered windows and nodes.  Then tile the windows. */
 	  register WINDOW *win, *largest = (WINDOW *)NULL;
@@ -134,31 +135,38 @@ begin_multiple_window_info_session (file
 /* Start an info session with INITIAL_NODE, and an error message in the echo
    area made from FORMAT and ARG. */
 void
 begin_info_session_with_error (initial_node, format, arg)
      NODE *initial_node;
      char *format;
      void *arg;
 {
-  initialize_info_session (initial_node);
+  initialize_info_session (initial_node, 1);
   info_error (format, arg, (void *)NULL);
   info_session ();
 }
 
 /* Start an info session with INITIAL_NODE. */
 void
 begin_info_session (initial_node)
      NODE *initial_node;
 {
-  initialize_info_session (initial_node);
+  initialize_info_session (initial_node, 1);
   display_startup_message_and_start ();
 }
 
 void
+finish_info_session ()
+{
+  close_dribble_file ();
+  clear_info_signal_handler ();
+}
+
+void
 display_startup_message_and_start ()
 {
   char *format;
 
   format = replace_in_documentation
     ("Welcome to Info version %s.  Type \"\\[get-help-window]\" for help.");
 
   window_message_in_echo_area (format, version_string ());
@@ -246,33 +254,35 @@ info_read_and_dispatch ()
 }
 
 /* Found in signals.c */
 extern void initialize_info_signal_handler ();
 
 /* Initialize the first info session by starting the terminal, window,
    and display systems. */
 void
-initialize_info_session (node)
+initialize_info_session (node, clear_screen)
      NODE *node;
+     int clear_screen;
 {
   char *getenv (), *term_name;
 
   term_name = getenv ("TERM");
   terminal_initialize_terminal (term_name);
 
   if (terminal_is_dumb_p)
     {
       if (!term_name)
 	term_name = "dumb";
 
       info_error (TERM_TOO_DUMB, term_name);
       exit (1);
     }
-  terminal_clear_screen ();
+  if (clear_screen)
+    terminal_clear_screen ();
   initialize_info_keymaps ();
   window_initialize_windows (screenwidth, screenheight);
   initialize_info_signal_handler ();
   display_initialize_display (screenwidth, screenheight);
   info_set_node_of_window (active_window, node);
 
   /* Tell the window system how to notify us when a window needs to be
      asynchronously deleted (e.g., user resizes window very small). */
@@ -3640,21 +3650,25 @@ DECLARE_INFO_COMMAND (info_quit, "Quit u
 DECLARE_INFO_COMMAND (info_do_lowercase_version, "")
 {}
 
 static void
 dispatch_error (keyseq)
      char *keyseq;
 {
   char *rep;
+  char *format;
 
   rep = pretty_keyseq (keyseq);
 
+  format = replace_in_documentation
+    ("Unknown command (%s).  Type \"\\[quit]\" to quit, \"\\[get-help-window]\" for help.");
+
   if (!echo_area_is_active)
-    info_error ("Unknown command (%s).", rep);
+    info_error (format, rep); 
   else
     {
       char *temp;
 
       temp = (char *)xmalloc (1 + strlen (rep) + strlen ("\"\" is invalid"));
 
       sprintf (temp, "\"%s\" is invalid", rep);
       terminal_ring_bell ();
diff --git a/info/signals.c b/info/signals.c
--- a/info/signals.c
+++ b/info/signals.c
@@ -86,16 +86,34 @@ initialize_info_signal_handler ()
   old_WINCH = (SigHandler *) signal (SIGWINCH, info_signal_handler);
 #endif
 
 #if defined (SIGINT)
   old_INT = (SigHandler *) signal (SIGINT, info_signal_handler);
 #endif
 }
 
+void
+clear_info_signal_handler ()
+{
+#if defined (SIGTSTP)
+  signal (SIGTSTP, old_TSTP);
+  signal (SIGTTOU, old_TTOU);
+  signal (SIGTTIN, old_TTIN);
+#endif /* SIGTSTP */
+
+#if defined (SIGWINCH)
+  signal (SIGWINCH, old_WINCH);
+#endif
+
+#if defined (SIGINT)
+  signal (SIGINT, old_INT);
+#endif
+}
+
 static void
 redisplay_after_signal ()
 {
   terminal_clear_screen ();
   display_clear_display (the_display);
   window_mark_chain (windows, W_UpdateWindow);
   display_update_display (windows);
   display_cursor_at_point (active_window);
diff --git a/info/termdep.h b/info/termdep.h
--- a/info/termdep.h
+++ b/info/termdep.h
@@ -22,32 +22,50 @@
    Written by Brian Fox (bfox@ai.mit.edu). */
 
 #if defined (HAVE_SYS_FCNTL_H)
 #include <sys/fcntl.h>
 #else
 #include <fcntl.h>
 #endif /* !HAVE_SYS_FCNTL_H */
 
-#if defined (HAVE_TERMIO_H)
+#if defined (HAVE_TERMIOS_H)
+
+#include <termios.h>
+#include <string.h>
+#if defined (HAVE_SYS_PTEM_H)
+#if !defined (M_XENIX)
+#include <sys/stream.h>
+#include <sys/ptem.h>
+#undef TIOCGETC
+#else /* M_XENIX */
+#define tchars tc
+#endif /* M_XENIX */
+#endif /* HAVE_SYS_PTEM_H */
+
+#elif defined (HAVE_TERMIO_H)
+
 #include <termio.h>
 #include <string.h>
 #if defined (HAVE_SYS_PTEM_H)
 #if !defined (M_XENIX)
 #include <sys/stream.h>
 #include <sys/ptem.h>
 #undef TIOCGETC
 #else /* M_XENIX */
 #define tchars tc
 #endif /* M_XENIX */
 #endif /* HAVE_SYS_PTEM_H */
+
 #else /* !HAVE_TERMIO_H */
+
 #include <sys/file.h>
 #include <sgtty.h>
 #include <strings.h>
+
 #endif /* !HAVE_TERMIO_H */
 
 #if defined (HAVE_SYS_TTOLD_H)
 #include <sys/ttold.h>
 #endif /* HAVE_SYS_TTOLD_H */
 
 #if !defined (HAVE_RINDEX)
 #undef index
diff --git a/info/terminal.c b/info/terminal.c
--- a/info/terminal.c
+++ b/info/terminal.c
@@ -590,17 +590,20 @@ struct tchars original_tchars;
 #endif
 
 #if defined (TIOCGLTC)
 /* A buffer containing the local terminal mode characters upon entry
    to Info. */
 struct ltchars original_ltchars;
 #endif
 
-#if defined (HAVE_TERMIO_H)
+#if defined (HAVE_TERMIOS_H)
+/* A buffer containing the terminal mode flags upon entry to info. */
+struct termios original_termios, ttybuff;
+#elif defined (HAVE_TERMIO_H)
 /* A buffer containing the terminal mode flags upon entry to info. */
 struct termio original_termio, ttybuff;
 #else /* !HAVE_TERMIO_H */
 /* Buffers containing the terminal mode flags upon entry to info. */
 int original_tty_flags = 0;
 int original_lmode;
 struct sgttyb ttybuff;
 #endif /* !HAVE_TERMIO_H */
@@ -614,17 +617,37 @@ terminal_prep_terminal ()
   if (terminal_prep_terminal_hook)
     {
       (*terminal_prep_terminal_hook) ();
       return;
     }
 
   tty = fileno (stdin);
 
-#if defined (HAVE_TERMIO_H)
+#if defined (HAVE_TERMIOS_H)
+
+  tcgetattr (tty, &original_termios);
+  tcgetattr (tty, &ttybuff);
+  ttybuff.c_iflag &= (~ISTRIP & ~INLCR & ~IGNCR & ~ICRNL & ~IXON);
+  ttybuff.c_oflag &= (~ONLCR & ~OCRNL);
+  ttybuff.c_lflag &= (~ICANON & ~ECHO);
+
+  ttybuff.c_cc[VMIN] = 1;
+  ttybuff.c_cc[VTIME] = 0;
+
+  if (ttybuff.c_cc[VINTR] = '\177')
+    ttybuff.c_cc[VINTR] = -1;
+
+  if (ttybuff.c_cc[VQUIT] = '\177')
+    ttybuff.c_cc[VQUIT] = -1;
+
+  tcsetattr (tty, TCSAFLUSH, &ttybuff);
+
+#elif defined (HAVE_TERMIO_H)
+
   ioctl (tty, TCGETA, &original_termio);
   ioctl (tty, TCGETA, &ttybuff);
   ttybuff.c_iflag &= (~ISTRIP & ~INLCR & ~IGNCR & ~ICRNL & ~IXON);
   ttybuff.c_oflag &= (~ONLCR & ~OCRNL);
   ttybuff.c_lflag &= (~ICANON & ~ECHO);
 
   ttybuff.c_cc[VMIN] = 1;
   ttybuff.c_cc[VTIME] = 0;
@@ -697,16 +720,17 @@ terminal_prep_terminal ()
     temp.t_flushc = -1;		/* C-o. */
     ioctl (tty, TIOCSLTC, &temp);
   }
 #endif /* TIOCGLTC */
 
   ttybuff.sg_flags &= ~ECHO;
   ttybuff.sg_flags |= CBREAK;
   ioctl (tty, TIOCSETN, &ttybuff);
+
 #endif /* !HAVE_TERMIO_H */
 }
 
 /* Restore the tty settings back to what they were before we started using
    this terminal. */
 void
 terminal_unprep_terminal ()
 {
@@ -715,19 +739,26 @@ terminal_unprep_terminal ()
   if (terminal_unprep_terminal_hook)
     {
       (*terminal_unprep_terminal_hook) ();
       return;
     }
 
   tty = fileno (stdin);
 
-#if defined (HAVE_TERMIO_H)
+#if defined (HAVE_TERMIOS_H)
+
+  tcsetattr (tty, TCSAFLUSH, &original_termios);
+
+#elif defined (HAVE_TERMIO_H)
+
   ioctl (tty, TCSETA, &original_termio);
+
 #else /* !HAVE_TERMIO_H */
+
   ioctl (tty, TIOCGETP, &ttybuff);
   ttybuff.sg_flags = original_tty_flags;
   ioctl (tty, TIOCSETN, &ttybuff);
 
 #if defined (TIOCGETC)
   ioctl (tty, TIOCSETC, &original_tchars);
 #endif /* TIOCGETC */
 
