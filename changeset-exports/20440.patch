# HG changeset patch
# User Rik <rik@octave.org>
# Date 1439324695 25200
#      Tue Aug 11 13:24:55 2015 -0700
# Node ID 3fc21d7ac11ca54503af52463d1ae44c7aa65801
# Parent  e59a44fa74ff447ed95d821fd9f97f40069edb00
intersect.m: Return same class of output as Matlab for empty input (bug #45686).

* intersect.m: For an empty input, return cell, char, or matrix based on Matlab
rules.  Add BIST tests for behavior.

diff --git a/scripts/set/intersect.m b/scripts/set/intersect.m
--- a/scripts/set/intersect.m
+++ b/scripts/set/intersect.m
@@ -42,17 +42,26 @@ function [c, ia, ib] = intersect (a, b, 
 
   if (nargin < 2 || nargin > 3)
     print_usage ();
   endif
 
   [a, b] = validsetargs ("intersect", a, b, varargin{:});
 
   if (isempty (a) || isempty (b))
-    c = ia = ib = [];
+    ## Special case shortcuts algorithm.
+    ## Lots of type checking required for Matlab compatibility.
+    if (isnumeric (a) && isnumeric (b))
+      c = [];
+    elseif (iscell (b))
+      c = {};
+    else
+      c = "";
+    endif
+    ia = ib = [];
   else
     by_rows = nargin == 3;
     isrowvec = isrow (a) && isrow (b);
 
     ## Form A and B into sets
     if (nargout > 1)
       [a, ja] = unique (a, varargin{:});
       [b, jb] = unique (b, varargin{:});
@@ -136,8 +145,16 @@ endfunction
 %! assert(c, [1,2]);
 %!test
 %! a = [1 2 3 4; 5 6 7 8; 9 10 11 12];
 %! [b, ia, ib] = intersect (a, a, "rows");
 %! assert (b, a);
 %! assert (ia, [1:3]');
 %! assert (ib, [1:3]');
 
+## Test return type of empty intersections
+%!assert (intersect (['a', 'b'], {}), {})
+%!assert (intersect ([], {'a', 'b'}), {})
+%!assert (intersect ([], {}), {})
+%!assert (intersect ({'a', 'b'}, []), {})
+%!assert (intersect ([], ['a', 'b']), "")
+%!assert (intersect ({}, []), {})
+%!assert (intersect (['a', 'b'], []), "")
