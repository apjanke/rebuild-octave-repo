# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1227618295 -3600
#      Tue Nov 25 14:04:55 2008 +0100
# Node ID c777f3ce02d87e6ddd0818b0b3a02efd82c502b9
# Parent  b5f10b12344021c1c2b708d4d27437cb61b15870
smarter conversion lookup

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,24 @@
+2008-11-25  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov-base.h (octave_base_value::type_conv_info): New class.
+	* ov-base.h, ov-bool-mat.cc, ov-bool-mat.h, ov-bool-sparse.cc,
+	ov-bool-sparse.h, ov-bool.cc, ov-bool.h, ov-complex.cc, ov-complex.h,
+	ov-cx-mat.cc, ov-cx-mat.h, ov-null-mat.cc, ov-null-mat.h,
+	ov-range.cc, ov-range.h, ov-re-mat.cc, ov-re-mat.h, ov-scalar.cc,
+	ov-scalar.h, ov-str-mat.cc, ov-str-mat.h, ov.h:
+	Return type_conv_info instead of type_conv_fcn from
+	numeric_conversion_function and numeric_demotion_function
+	methods.
+	* ov-base.cc (octave_base_value::numeric_assign): Try biased conversion
+	first if possible.
+	* ov.cc (do_binary_op): Likewise. Also, search recursively.
+	* ov.cc (do_cat_op): Likewise.
+
 2008-11-24  David Bateman  <dbateman@free.fr>
 
 	* graphics.cc (F__go_delete__): Check validity of handles before
 	deleting them to avoid issues with callback function also deleting
 	the handles.
 	
 2008-11-21  Jarkko Kaleva  <d3roga@gmail.com>
 
diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -1145,38 +1145,52 @@ octave_base_value::numeric_assign (const
 	  else
 	    gripe_indexed_assignment (type_name (), rhs.type_name ());
 	}
 
       if (! (done || error_state))
 	{
 	  octave_value tmp_rhs;
 
-	  octave_base_value::type_conv_fcn cf_rhs
+	  octave_base_value::type_conv_info cf_rhs
 	    = rhs.numeric_conversion_function ();
 
+	  octave_base_value::type_conv_info cf_this
+	    = numeric_conversion_function ();
+
+          // Try biased (one-sided) conversions first.
+          if (cf_rhs.type_id () >= 0
+              && (octave_value_typeinfo::lookup_assign_op (octave_value::op_asn_eq,
+                                                           t_lhs, cf_rhs.type_id ())
+                  || octave_value_typeinfo::lookup_pref_assign_conv (t_lhs, 
+                                                                     cf_rhs.type_id ()) >= 0))
+            cf_this = 0;
+          else if (cf_this.type_id () >= 0
+                   && (octave_value_typeinfo::lookup_assign_op (octave_value::op_asn_eq,
+                                                                cf_this.type_id (), t_rhs)
+                       || octave_value_typeinfo::lookup_pref_assign_conv (cf_this.type_id (),
+                                                                          t_rhs) >= 0))
+            cf_rhs = 0;
+
 	  if (cf_rhs)
 	    {
 	      octave_base_value *tmp = cf_rhs (rhs.get_rep ());
 
 	      if (tmp)
 		tmp_rhs = octave_value (tmp);
 	      else
 		{
 		  gripe_assign_conversion_failed (type_name (),
 						  rhs.type_name ());
 		  return octave_value ();
 		}
 	    }
 	  else
 	    tmp_rhs = rhs;
 
-	  octave_base_value::type_conv_fcn cf_this
-	    = numeric_conversion_function ();
-
 	  count++;
 	  octave_value tmp_lhs = octave_value (this);
 
 	  if (cf_this)
 	    {
 	      octave_base_value *tmp = cf_this (*this);
 
 	      if (tmp)
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -101,37 +101,55 @@ class tree_walker;
 class
 OCTINTERP_API
 octave_base_value
 {
 public:
 
   typedef octave_base_value * (*type_conv_fcn) (const octave_base_value&);
 
+  // type conversion, including result type information
+  class type_conv_info
+  {
+  public:
+    type_conv_info (type_conv_fcn f = 0, int t = -1) : _fcn (f), _type_id (t) { }
+
+    operator type_conv_fcn (void) const { return _fcn; }
+
+    octave_base_value * operator () (const octave_base_value &v) const 
+      { return (*_fcn) (v); }
+
+    int type_id (void) const { return _type_id; }
+
+  private:
+    type_conv_fcn _fcn;
+    int _type_id;
+  };
+
   friend class octave_value;
 
   octave_base_value (void) : count (1) { }
 
   octave_base_value (const octave_base_value&) { }
 
   virtual ~octave_base_value (void) { }
 
   virtual octave_base_value *
   clone (void) const { return new octave_base_value (*this); }
 
   virtual octave_base_value *
   empty_clone (void) const { return new octave_base_value (); }
 
-  virtual type_conv_fcn
+  virtual type_conv_info
   numeric_conversion_function (void) const
-    { return static_cast<type_conv_fcn> (0); }
+    { return type_conv_info (); }
 
-  virtual type_conv_fcn
+  virtual type_conv_info
   numeric_demotion_function (void) const
-    { return static_cast<type_conv_fcn> (0); }
+    { return type_conv_info (); }
 
   virtual octave_value squeeze (void) const;
 
   virtual octave_base_value *try_narrowing_conversion (void) { return 0; }
 
   virtual octave_value
   subsref (const std::string& type,
 	   const std::list<octave_value_list>& idx);
diff --git a/src/ov-bool-mat.cc b/src/ov-bool-mat.cc
--- a/src/ov-bool-mat.cc
+++ b/src/ov-bool-mat.cc
@@ -57,20 +57,21 @@ DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (oct
 static octave_base_value *
 default_numeric_conversion_function (const octave_base_value& a)
 {
   CAST_CONV_ARG (const octave_bool_matrix&);
 
   return new octave_matrix (NDArray (v.bool_array_value ()));
 }
 
-octave_base_value::type_conv_fcn
+octave_base_value::type_conv_info
 octave_bool_matrix::numeric_conversion_function (void) const
 {
-  return default_numeric_conversion_function;
+  return octave_base_value::type_conv_info (default_numeric_conversion_function,
+                                            octave_matrix::static_type_id ());
 }
 
 octave_base_value *
 octave_bool_matrix::try_narrowing_conversion (void)
 {
   octave_base_value *retval = 0;
 
   if (matrix.ndims () == 2)
diff --git a/src/ov-bool-mat.h b/src/ov-bool-mat.h
--- a/src/ov-bool-mat.h
+++ b/src/ov-bool-mat.h
@@ -68,17 +68,17 @@ public:
   octave_bool_matrix (const octave_bool_matrix& bm)
     : octave_base_matrix<boolNDArray> (bm) { }
 
   ~octave_bool_matrix (void) { }
 
   octave_base_value *clone (void) const { return new octave_bool_matrix (*this); }
   octave_base_value *empty_clone (void) const { return new octave_bool_matrix (); }
 
-  type_conv_fcn numeric_conversion_function (void) const;
+  type_conv_info numeric_conversion_function (void) const;
 
   octave_base_value *try_narrowing_conversion (void);
 
   idx_vector index_vector (void) const { return idx_vector (matrix); }
 
   bool is_bool_matrix (void) const { return true; }
 
   bool is_bool_type (void) const { return true; }
diff --git a/src/ov-bool-sparse.cc b/src/ov-bool-sparse.cc
--- a/src/ov-bool-sparse.cc
+++ b/src/ov-bool-sparse.cc
@@ -53,20 +53,21 @@ DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (oct
 static octave_base_value *
 default_numeric_conversion_function (const octave_base_value& a)
 {
   CAST_CONV_ARG (const octave_sparse_bool_matrix&);
 
   return new octave_sparse_matrix (SparseMatrix (v.sparse_bool_matrix_value ()));
 }
 
-octave_base_value::type_conv_fcn
+octave_base_value::type_conv_info
 octave_sparse_bool_matrix::numeric_conversion_function (void) const
 {
-  return default_numeric_conversion_function;
+  return octave_base_value::type_conv_info (default_numeric_conversion_function,
+                                            octave_sparse_matrix::static_type_id ());
 }
 
 octave_base_value *
 octave_sparse_bool_matrix::try_narrowing_conversion (void)
 {
   octave_base_value *retval = 0;
 
   if (Vsparse_auto_mutate)
diff --git a/src/ov-bool-sparse.h b/src/ov-bool-sparse.h
--- a/src/ov-bool-sparse.h
+++ b/src/ov-bool-sparse.h
@@ -75,17 +75,17 @@ public:
   octave_sparse_bool_matrix (const octave_sparse_bool_matrix& bm)
     : octave_base_sparse<SparseBoolMatrix> (bm) { }
 
   ~octave_sparse_bool_matrix (void) { }
 
   octave_base_value *clone (void) const { return new octave_sparse_bool_matrix (*this); }
   octave_base_value *empty_clone (void) const { return new octave_sparse_bool_matrix (); }
 
-  type_conv_fcn numeric_conversion_function (void) const;
+  type_conv_info numeric_conversion_function (void) const;
 
   octave_base_value *try_narrowing_conversion (void);
 
   // FIXME Adapt idx_vector to allow sparse logical indexing!!
   idx_vector index_vector (void) const 
     { return idx_vector (bool_array_value ()); }
 
   bool is_bool_matrix (void) const { return true; }
diff --git a/src/ov-bool.cc b/src/ov-bool.cc
--- a/src/ov-bool.cc
+++ b/src/ov-bool.cc
@@ -53,20 +53,22 @@ DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (oct
 static octave_base_value *
 default_numeric_conversion_function (const octave_base_value& a)
 {
   CAST_CONV_ARG (const octave_bool&);
 
   return new octave_scalar (v.bool_value ());
 }
 
-octave_base_value::type_conv_fcn
+octave_base_value::type_conv_info
 octave_bool::numeric_conversion_function (void) const
 {
-  return default_numeric_conversion_function;
+  return octave_base_value::type_conv_info (default_numeric_conversion_function,
+                                            octave_scalar::static_type_id ());
+
 }
 
 static inline bool
 valid_scalar_indices (const octave_value_list& args)
 {
   int nargin = args.length ();
 
   for (int i = 0; i < nargin; i++)
diff --git a/src/ov-bool.h b/src/ov-bool.h
--- a/src/ov-bool.h
+++ b/src/ov-bool.h
@@ -61,17 +61,17 @@ public:
   octave_bool (const octave_bool& s)
     : octave_base_scalar<bool> (s) { }
 
   ~octave_bool (void) { }
 
   octave_base_value *clone (void) const { return new octave_bool (*this); }
   octave_base_value *empty_clone (void) const { return new octave_bool (); }
 
-  type_conv_fcn numeric_conversion_function (void) const;
+  type_conv_info numeric_conversion_function (void) const;
 
   octave_value do_index_op (const octave_value_list& idx,
 			    bool resize_ok = false);
 
   idx_vector index_vector (void) const { return idx_vector (scalar); }
 
   bool is_real_scalar (void) const { return true; }
 
diff --git a/src/ov-complex.cc b/src/ov-complex.cc
--- a/src/ov-complex.cc
+++ b/src/ov-complex.cc
@@ -58,20 +58,21 @@ DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (oct
 static octave_base_value *
 default_numeric_demotion_function (const octave_base_value& a)
 {
   CAST_CONV_ARG (const octave_complex&);
 
   return new octave_float_complex (v.float_complex_value ());
 }
 
-octave_base_value::type_conv_fcn
+octave_base_value::type_conv_info
 octave_complex::numeric_demotion_function (void) const
 {
-  return default_numeric_demotion_function;
+  return octave_base_value::type_conv_info(default_numeric_demotion_function,
+                                           octave_float_complex::static_type_id ());
 }
 
 octave_base_value *
 octave_complex::try_narrowing_conversion (void)
 {
   octave_base_value *retval = 0;
 
   double im = std::imag (scalar);
diff --git a/src/ov-complex.h b/src/ov-complex.h
--- a/src/ov-complex.h
+++ b/src/ov-complex.h
@@ -68,17 +68,17 @@ public:
 
   // We return an octave_complex_matrix object here instead of an
   // octave_complex object so that in expressions like A(2,2,2) = 2
   // (for A previously undefined), A will be empty instead of a 1x1
   // object.
   octave_base_value *empty_clone (void) const
     { return new octave_complex_matrix (); }
 
-  type_conv_fcn numeric_demotion_function (void) const;
+  type_conv_info numeric_demotion_function (void) const;
 
   octave_base_value *try_narrowing_conversion (void);
 
   octave_value do_index_op (const octave_value_list& idx,
 			    bool resize_ok = false);
 
   octave_value any (int = 0) const
     {
diff --git a/src/ov-cx-mat.cc b/src/ov-cx-mat.cc
--- a/src/ov-cx-mat.cc
+++ b/src/ov-cx-mat.cc
@@ -64,20 +64,21 @@ DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (oct
 static octave_base_value *
 default_numeric_demotion_function (const octave_base_value& a)
 {
   CAST_CONV_ARG (const octave_complex_matrix&);
 
   return new octave_float_complex_matrix (v.float_complex_matrix_value ());
 }
 
-octave_base_value::type_conv_fcn
+octave_base_value::type_conv_info
 octave_complex_matrix::numeric_demotion_function (void) const
 {
-  return default_numeric_demotion_function;
+  return octave_base_value::type_conv_info(default_numeric_demotion_function,
+                                           octave_float_complex_matrix::static_type_id ());
 }
 
 octave_base_value *
 octave_complex_matrix::try_narrowing_conversion (void)
 {
   octave_base_value *retval = 0;
 
   if (matrix.ndims () == 2)
diff --git a/src/ov-cx-mat.h b/src/ov-cx-mat.h
--- a/src/ov-cx-mat.h
+++ b/src/ov-cx-mat.h
@@ -81,17 +81,17 @@ public:
   octave_complex_matrix (const octave_complex_matrix& cm)
     : octave_base_matrix<ComplexNDArray> (cm) { }
 
   ~octave_complex_matrix (void) { }
 
   octave_base_value *clone (void) const { return new octave_complex_matrix (*this); }
   octave_base_value *empty_clone (void) const { return new octave_complex_matrix (); }
 
-  type_conv_fcn numeric_demotion_function (void) const;
+  type_conv_info numeric_demotion_function (void) const;
 
   octave_base_value *try_narrowing_conversion (void);
 
   void assign (const octave_value_list& idx, const ComplexNDArray& rhs);
 
   void assign (const octave_value_list& idx, const NDArray& rhs);
 
   bool is_complex_matrix (void) const { return true; }
diff --git a/src/ov-null-mat.cc b/src/ov-null-mat.cc
--- a/src/ov-null-mat.cc
+++ b/src/ov-null-mat.cc
@@ -35,56 +35,59 @@ const octave_value octave_null_matrix::i
 static octave_base_value *
 default_null_matrix_numeric_conversion_function (const octave_base_value& a)
 {
   CAST_CONV_ARG (const octave_null_matrix&);
 
   return a.empty_clone ();
 }
 
-octave_base_value::type_conv_fcn
+octave_base_value::type_conv_info
 octave_null_matrix::numeric_conversion_function (void) const
 {
-  return default_null_matrix_numeric_conversion_function;
+  return octave_base_value::type_conv_info (default_null_matrix_numeric_conversion_function, 
+                                            octave_matrix::static_type_id ());
 }
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_null_str, "null_string", "char");
 
 const octave_value octave_null_str::instance (new octave_null_str ());
 
 static octave_base_value *
 default_null_str_numeric_conversion_function (const octave_base_value& a)
 {
   CAST_CONV_ARG (const octave_null_str&);
 
   return a.empty_clone ();
 }
 
-octave_base_value::type_conv_fcn
+octave_base_value::type_conv_info
 octave_null_str::numeric_conversion_function (void) const
 {
-  return default_null_str_numeric_conversion_function;
+  return octave_base_value::type_conv_info (default_null_str_numeric_conversion_function, 
+                                            octave_char_matrix_str::static_type_id ());
 }
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_null_sq_str, "null_sq_string", "char");
 
 const octave_value octave_null_sq_str::instance (new octave_null_sq_str ());
 
 static octave_base_value *
 default_null_sq_str_numeric_conversion_function (const octave_base_value& a)
 {
   CAST_CONV_ARG (const octave_null_sq_str&);
 
   return a.empty_clone ();
 }
 
-octave_base_value::type_conv_fcn
+octave_base_value::type_conv_info
 octave_null_sq_str::numeric_conversion_function (void) const
 {
-  return default_null_sq_str_numeric_conversion_function;
+  return octave_base_value::type_conv_info (default_null_sq_str_numeric_conversion_function, 
+                                            octave_char_matrix_sq_str::static_type_id ());
 }
 
 DEFUN (isnull, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} isnull (@var{x})\n\
 Return 1 if @var{x} is a special null matrix, string or single quoted string.\n\
 Indexed assignment with such a value as right-hand side should delete array elements.\n\
 This function should be used when overloading indexed assignment for user-defined \n\
diff --git a/src/ov-null-mat.h b/src/ov-null-mat.h
--- a/src/ov-null-mat.h
+++ b/src/ov-null-mat.h
@@ -42,17 +42,17 @@ octave_null_matrix : public octave_matri
   octave_null_matrix (void) : octave_matrix () { }
 
 public:
 
   static const octave_value instance;
 
   bool is_null_value (void) const { return true; }
 
-  type_conv_fcn numeric_conversion_function (void) const;
+  type_conv_info numeric_conversion_function (void) const;
 
 private:
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 // The special "" value
 
@@ -63,17 +63,17 @@ octave_null_str : public octave_char_mat
   octave_null_str (void) : octave_char_matrix_str () { }
 
 public:
 
   static const octave_value instance;
 
   bool is_null_value (void) const { return true; }
 
-  type_conv_fcn numeric_conversion_function (void) const;
+  type_conv_info numeric_conversion_function (void) const;
 
 
 private:
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 // The special '' value
@@ -85,16 +85,16 @@ octave_null_sq_str : public octave_char_
   octave_null_sq_str (void) : octave_char_matrix_sq_str () { }
 
 public:
 
   static const octave_value instance;
 
   bool is_null_value (void) const { return true; }
 
-  type_conv_fcn numeric_conversion_function (void) const;
+  type_conv_info numeric_conversion_function (void) const;
 
 private:
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
diff --git a/src/ov-range.cc b/src/ov-range.cc
--- a/src/ov-range.cc
+++ b/src/ov-range.cc
@@ -49,20 +49,21 @@ DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (oct
 static octave_base_value *
 default_numeric_conversion_function (const octave_base_value& a)
 {
   CAST_CONV_ARG (const octave_range&);
 
   return new octave_matrix (v.matrix_value ());
 }
 
-octave_base_value::type_conv_fcn
+octave_base_value::type_conv_info
 octave_range::numeric_conversion_function (void) const
 {
-  return default_numeric_conversion_function;
+  return octave_base_value::type_conv_info (default_numeric_conversion_function,
+                                            octave_matrix::static_type_id ());
 }
 
 octave_base_value *
 octave_range::try_narrowing_conversion (void)
 {
   octave_base_value *retval = 0;
 
   switch (range.nelem ())
diff --git a/src/ov-range.h b/src/ov-range.h
--- a/src/ov-range.h
+++ b/src/ov-range.h
@@ -79,17 +79,17 @@ public:
 
   octave_base_value *clone (void) const { return new octave_range (*this); }
 
   // A range is really just a special kind of real matrix object.  In
   // the places where we need to call empty_clone, it makes more sense
   // to create an empty matrix (0x0) instead of an empty range (1x0).
   octave_base_value *empty_clone (void) const { return new octave_matrix (); }
 
-  type_conv_fcn numeric_conversion_function (void) const;
+  type_conv_info numeric_conversion_function (void) const;
 
   octave_base_value *try_narrowing_conversion (void);
 
   octave_value subsref (const std::string& type,
 			const std::list<octave_value_list>& idx);
 
   octave_value_list subsref (const std::string& type,
 			     const std::list<octave_value_list>& idx, int)
diff --git a/src/ov-re-mat.cc b/src/ov-re-mat.cc
--- a/src/ov-re-mat.cc
+++ b/src/ov-re-mat.cc
@@ -76,20 +76,21 @@ DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (oct
 static octave_base_value *
 default_numeric_demotion_function (const octave_base_value& a)
 {
   CAST_CONV_ARG (const octave_matrix&);
 
   return new octave_float_matrix (v.float_matrix_value ());
 }
 
-octave_base_value::type_conv_fcn
+octave_base_value::type_conv_info
 octave_matrix::numeric_demotion_function (void) const
 {
-  return default_numeric_demotion_function;
+  return octave_base_value::type_conv_info(default_numeric_demotion_function,
+                                           octave_float_matrix::static_type_id ());
 }
 
 octave_base_value *
 octave_matrix::try_narrowing_conversion (void)
 {
   octave_base_value *retval = 0;
 
   if (matrix.nelem () == 1)
diff --git a/src/ov-re-mat.h b/src/ov-re-mat.h
--- a/src/ov-re-mat.h
+++ b/src/ov-re-mat.h
@@ -81,17 +81,17 @@ public:
   octave_matrix (const octave_matrix& m)
     : octave_base_matrix<NDArray> (m) { }
 
   ~octave_matrix (void) { }
 
   octave_base_value *clone (void) const { return new octave_matrix (*this); }
   octave_base_value *empty_clone (void) const { return new octave_matrix (); }
 
-  type_conv_fcn numeric_demotion_function (void) const;
+  type_conv_info numeric_demotion_function (void) const;
 
   octave_base_value *try_narrowing_conversion (void);
 
   idx_vector index_vector (void) const { return idx_vector (matrix); }
 
   bool is_real_matrix (void) const { return true; }
 
   bool is_real_type (void) const { return true; }
diff --git a/src/ov-scalar.cc b/src/ov-scalar.cc
--- a/src/ov-scalar.cc
+++ b/src/ov-scalar.cc
@@ -60,20 +60,21 @@ DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (oct
 static octave_base_value *
 default_numeric_demotion_function (const octave_base_value& a)
 {
   CAST_CONV_ARG (const octave_scalar&);
 
   return new octave_float_scalar (v.float_value ());
 }
 
-octave_base_value::type_conv_fcn
+octave_base_value::type_conv_info
 octave_scalar::numeric_demotion_function (void) const
 {
-  return default_numeric_demotion_function;
+  return octave_base_value::type_conv_info(default_numeric_demotion_function,
+                                           octave_float_scalar::static_type_id ());
 }
 
 octave_value
 octave_scalar::do_index_op (const octave_value_list& idx, bool resize_ok)
 {
   octave_value retval;
 
   if (idx.valid_scalar_indices ())
diff --git a/src/ov-scalar.h b/src/ov-scalar.h
--- a/src/ov-scalar.h
+++ b/src/ov-scalar.h
@@ -71,17 +71,17 @@ public:
   // We return an octave_matrix here instead of an octave_scalar so
   // that in expressions like A(2,2,2) = 2 (for A previously
   // undefined), A will be empty instead of a 1x1 object.
   octave_base_value *empty_clone (void) const { return new octave_matrix (); }
 
   octave_value do_index_op (const octave_value_list& idx,
 			    bool resize_ok = false);
 
-  type_conv_fcn numeric_demotion_function (void) const;
+  type_conv_info numeric_demotion_function (void) const;
 
   idx_vector index_vector (void) const { return idx_vector (scalar); }
 
   octave_value any (int = 0) const
     { return (scalar != 0 && ! lo_ieee_isnan (scalar)); }
 
   bool is_real_scalar (void) const { return true; }
 
diff --git a/src/ov-str-mat.cc b/src/ov-str-mat.cc
--- a/src/ov-str-mat.cc
+++ b/src/ov-str-mat.cc
@@ -61,31 +61,26 @@ static octave_base_value *
 default_numeric_conversion_function (const octave_base_value& a)
 {
   octave_base_value *retval = 0;
 
   CAST_CONV_ARG (const octave_char_matrix_str&);
 
   NDArray nda = v.array_value (true);
 
-  if (! error_state)
-    {
-      if (nda.numel () == 1)
-	retval = new octave_scalar (nda(0));
-      else
-	retval = new octave_matrix (nda);
-    }
+  if (! error_state) retval = new octave_matrix (nda);
 
   return retval;
 }
 
-octave_base_value::type_conv_fcn
+octave_base_value::type_conv_info
 octave_char_matrix_str::numeric_conversion_function (void) const
 {
-  return default_numeric_conversion_function;
+  return octave_base_value::type_conv_info (default_numeric_conversion_function,
+                                            octave_matrix::static_type_id ());
 }
 
 octave_value
 octave_char_matrix_str::do_index_op_internal (const octave_value_list& idx,
 					      bool resize_ok, char type)
 {
   octave_value retval;
 
diff --git a/src/ov-str-mat.h b/src/ov-str-mat.h
--- a/src/ov-str-mat.h
+++ b/src/ov-str-mat.h
@@ -80,17 +80,17 @@ public:
   octave_char_matrix_str (const octave_char_matrix_str& chms)
     : octave_char_matrix (chms) { }
 
   ~octave_char_matrix_str (void) { }
 
   octave_base_value *clone (void) const { return new octave_char_matrix_str (*this); }
   octave_base_value *empty_clone (void) const { return new octave_char_matrix_str (); }
 
-  type_conv_fcn numeric_conversion_function (void) const;
+  type_conv_info numeric_conversion_function (void) const;
 
   octave_value do_index_op (const octave_value_list& idx,
 			    bool resize_ok = false)
     { return do_index_op_internal (idx, resize_ok); }
 
   octave_value reshape (const dim_vector& new_dims) const
     { return octave_value (charNDArray (matrix.reshape (new_dims)), true); }
 
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -1609,17 +1609,28 @@ do_binary_op (octave_value::binary_op op
 	  catch (octave_execution_exception)
 	    {
 	      gripe_library_execution_error ();
 	    }
 	}
       else
 	{
 	  octave_value tv1;
-	  octave_base_value::type_conv_fcn cf1 = v1.numeric_conversion_function ();
+	  octave_base_value::type_conv_info cf1 = v1.numeric_conversion_function ();
+
+	  octave_value tv2;
+	  octave_base_value::type_conv_info cf2 = v2.numeric_conversion_function ();
+
+          // Try biased (one-sided) conversions first.
+          if (cf2.type_id () >= 0 &&
+              octave_value_typeinfo::lookup_binary_op (op, t1, cf2.type_id ()))
+            cf1 = 0;
+          else if (cf1.type_id () >= 0 &&
+                   octave_value_typeinfo::lookup_binary_op (op, cf1.type_id (), t2))
+            cf2 = 0;
 
 	  if (cf1)
 	    {
 	      octave_base_value *tmp = cf1 (*v1.rep);
 
 	      if (tmp)
 		{
 		  tv1 = octave_value (tmp);
@@ -1629,19 +1640,16 @@ do_binary_op (octave_value::binary_op op
 		{
 		  gripe_binary_op_conv (octave_value::binary_op_as_string (op));
 		  return retval;
 		}
 	    }
 	  else
 	    tv1 = v1;
 
-	  octave_value tv2;
-	  octave_base_value::type_conv_fcn cf2 = v2.numeric_conversion_function ();
-
 	  if (cf2)
 	    {
 	      octave_base_value *tmp = cf2 (*v2.rep);
 
 	      if (tmp)
 		{
 		  tv2 = octave_value (tmp);
 		  t2 = tv2.type_id ();
@@ -1652,115 +1660,49 @@ do_binary_op (octave_value::binary_op op
 		  return retval;
 		}
 	    }
 	  else
 	    tv2 = v2;
 
 	  if (cf1 || cf2)
 	    {
-	      f = octave_value_typeinfo::lookup_binary_op (op, t1, t2);
-
-	      if (f)
-		{
-		  try
-		    {
-		      retval = f (*tv1.rep, *tv2.rep);
-		    }
-		  catch (octave_execution_exception)
-		    {
-		      gripe_library_execution_error ();
-		    }
-		}
-	      else
-		{
-		  //demote double -> single and try again
-		  cf1 = tv1.numeric_demotion_function ();
-
-		  if (cf1)
-		    {
-		      octave_base_value *tmp = cf1 (*tv1.rep);
-
-		      if (tmp)
-			{
-			  tv1 = octave_value (tmp);
-			  t1 = tv1.type_id ();
-			}
-		      else
-			{
-			  gripe_binary_op_conv (octave_value::binary_op_as_string (op));
-			  return retval;
-			}
-		    }
-
-		  cf2 = tv2.numeric_demotion_function ();
-
-		  if (cf2)
-		    {
-		      octave_base_value *tmp = cf2 (*tv2.rep);
-
-		      if (tmp)
-			{
-			  tv2 = octave_value (tmp);
-			  t2 = tv2.type_id ();
-			}
-		      else
-			{
-			  gripe_binary_op_conv (octave_value::binary_op_as_string (op));
-			  return retval;
-			}
-		    }
-
-		  if (cf1 || cf2)
-		    {
-		      f = octave_value_typeinfo::lookup_binary_op (op, t1, t2);
-
-		      if (f)
-			{
-			  try
-			    {
-			      retval = f (*tv1.rep, *tv2.rep);
-			    }
-			  catch (octave_execution_exception)
-			    {
-			      gripe_library_execution_error ();
-			    }
-			}
-		      else
-			gripe_binary_op (octave_value::binary_op_as_string (op),
-					 v1.type_name (), v2.type_name ());
-		    }
-		  else
-		    gripe_binary_op (octave_value::binary_op_as_string (op),
-				     v1.type_name (), v2.type_name ());
-		}
+              retval = do_binary_op (op, tv1, tv2);
 	    }
 	  else
 	    {
 	      //demote double -> single and try again
 	      cf1 = tv1.numeric_demotion_function ();
 
+	      cf2 = tv2.numeric_demotion_function ();
+
+              // Try biased (one-sided) conversions first.
+              if (cf2.type_id () >= 0
+                  && octave_value_typeinfo::lookup_binary_op (op, t1, cf2.type_id ()))
+                cf1 = 0;
+              else if (cf1.type_id () >= 0
+                       && octave_value_typeinfo::lookup_binary_op (op, cf1.type_id (), t2))
+                cf2 = 0;
+
 	      if (cf1)
 		{
 		  octave_base_value *tmp = cf1 (*tv1.rep);
 
 		  if (tmp)
 		    {
 		      tv1 = octave_value (tmp);
 		      t1 = tv1.type_id ();
 		    }
 		  else
 		    {
 		      gripe_binary_op_conv (octave_value::binary_op_as_string (op));
 		      return retval;
 		    }
 		}
 
-	      cf2 = tv2.numeric_demotion_function ();
-
 	      if (cf2)
 		{
 		  octave_base_value *tmp = cf2 (*tv2.rep);
 
 		  if (tmp)
 		    {
 		      tv2 = octave_value (tmp);
 		      t2 = tv2.type_id ();
@@ -1926,17 +1868,28 @@ do_cat_op (const octave_value& v1, const
       catch (octave_execution_exception)
 	{
 	  gripe_library_execution_error ();
 	}
     }
   else
     {
       octave_value tv1;
-      octave_base_value::type_conv_fcn cf1 = v1.numeric_conversion_function ();
+      octave_base_value::type_conv_info cf1 = v1.numeric_conversion_function ();
+
+      octave_value tv2;
+      octave_base_value::type_conv_info cf2 = v2.numeric_conversion_function ();
+
+      // Try biased (one-sided) conversions first.
+      if (cf2.type_id () >= 0
+          && octave_value_typeinfo::lookup_cat_op (t1, cf2.type_id ()))
+        cf1 = 0;
+      else if (cf1.type_id () >= 0
+               && octave_value_typeinfo::lookup_cat_op (cf1.type_id (), t2))
+        cf2 = 0;
 
       if (cf1)
 	{
 	  octave_base_value *tmp = cf1 (*v1.rep);
 
 	  if (tmp)
 	    {
 	      tv1 = octave_value (tmp);
@@ -1946,19 +1899,16 @@ do_cat_op (const octave_value& v1, const
 	    {
 	      gripe_cat_op_conv ();
 	      return retval;
 	    }
 	}
       else
 	tv1 = v1;
 
-      octave_value tv2;
-      octave_base_value::type_conv_fcn cf2 = v2.numeric_conversion_function ();
-
       if (cf2)
 	{
 	  octave_base_value *tmp = cf2 (*v2.rep);
 
 	  if (tmp)
 	    {
 	      tv2 = octave_value (tmp);
 	      t2 = tv2.type_id ();
@@ -1969,31 +1919,17 @@ do_cat_op (const octave_value& v1, const
 	      return retval;
 	    }
 	}
       else
 	tv2 = v2;
 
       if (cf1 || cf2)
 	{
-	  f = octave_value_typeinfo::lookup_cat_op (t1, t2);
-
-	  if (f)
-	    {
-	      try
-		{
-		  retval = f (*tv1.rep, *tv2.rep, ra_idx);
-		}
-	      catch (octave_execution_exception)
-		{
-		  gripe_library_execution_error ();
-		}
-	    }
-	  else
-	    gripe_cat_op (v1.type_name (), v2.type_name ());
+          retval = do_cat_op (tv1, tv2, ra_idx);
 	}
       else
 	gripe_cat_op (v1.type_name (), v2.type_name ());
     }
 
   return retval;
 }
 
@@ -2074,34 +2010,17 @@ do_unary_op (octave_value::unary_op op, 
 
 	  if (cf)
 	    {
 	      octave_base_value *tmp = cf (*v.rep);
 
 	      if (tmp)
 		{
 		  tv = octave_value (tmp);
-		  t = tv.type_id ();
-
-		  f = octave_value_typeinfo::lookup_unary_op (op, t);
-
-		  if (f)
-		    {
-		      try
-			{
-			  retval = f (*tv.rep);
-			}
-		      catch (octave_execution_exception)
-			{
-			  gripe_library_execution_error ();
-			}
-		    }
-		  else
-		    gripe_unary_op (octave_value::unary_op_as_string (op),
-				    v.type_name ());
+                  retval = do_unary_op (op, tv);
 		}
 	      else
 		gripe_unary_op_conv (octave_value::unary_op_as_string (op));
 	    }
 	  else
 	    gripe_unary_op (octave_value::unary_op_as_string (op),
 			    v.type_name ());
 	}
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -310,20 +310,20 @@ public:
 	  rep->count++;
 	}
 
       return *this;
     }
 
   int get_count (void) const { return rep->count; }
 
-  octave_base_value::type_conv_fcn numeric_conversion_function (void) const
+  octave_base_value::type_conv_info numeric_conversion_function (void) const
     { return rep->numeric_conversion_function (); }
 
-  octave_base_value::type_conv_fcn numeric_demotion_function (void) const
+  octave_base_value::type_conv_info numeric_demotion_function (void) const
     { return rep->numeric_demotion_function (); }
 
   void maybe_mutate (void);
 
   octave_value squeeze (void) const
     { return rep->squeeze (); }
 
   octave_base_value *try_narrowing_conversion (void)
