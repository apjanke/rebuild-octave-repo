# HG changeset patch
# User Markus MÃ¼tzel <markus.muetzel@gmx.de>
# Date 1548602478 -3600
#      Sun Jan 27 16:21:18 2019 +0100
# Node ID edb11e68b571ac282af53edcceceee14870607f3
# Parent  1945796ba8b5693d128baa7b7dd350e3a6c706ba
Add support for more types for graphics property "cdata" (bug #55436).

* graphics.cc (convert_cdata): Add conversion rules for additional types.

* graphics.in.h (image::properties, patch:properties, surface::properties): Add
  constraints for all supported types.

diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -1008,31 +1008,44 @@ convert_cdata (const base_properties& pr
     {                                                                   \
       ARRAY_T tmp = cdata. VAL_FN ## array_value ();                    \
                                                                         \
       convert_cdata_1 (is_scaled, IS_REAL, clim_0, clim_1, cmapv,       \
                        tmp.data (), lda, nc, av);                       \
     }                                                                   \
   while (0)
 
-  if (cdata.is_uint8_type ())
+  if (cdata.is_int8_type ())
+    CONVERT_CDATA_1 (int8NDArray, int8_, false);
+  else if (cdata.is_int16_type ())
+    CONVERT_CDATA_1 (int16NDArray, int16_, false);
+  else if (cdata.is_int32_type ())
+    CONVERT_CDATA_1 (int32NDArray, int32_, false);
+  else if (cdata.is_int64_type ())
+    CONVERT_CDATA_1 (int64NDArray, int64_, false);
+  else if (cdata.is_uint8_type ())
     CONVERT_CDATA_1 (uint8NDArray, uint8_, false);
   else if (cdata.is_uint16_type ())
     CONVERT_CDATA_1 (uint16NDArray, uint16_, false);
+  else if (cdata.is_uint32_type ())
+    CONVERT_CDATA_1 (uint32NDArray, uint32_, false);
+  else if (cdata.is_uint64_type ())
+    CONVERT_CDATA_1 (uint64NDArray, uint64_, false);
   else if (cdata.is_double_type ())
     CONVERT_CDATA_1 (NDArray, , true);
   else if (cdata.is_single_type ())
     CONVERT_CDATA_1 (FloatNDArray, float_, true);
   else if (cdata.islogical ())
     CONVERT_CDATA_1 (boolNDArray, bool_, false);
   else
     {
       // Don't throw an error; leads to an incomplete FLTK object (bug #46933).
       warning ("unsupported type for cdata (= %s).  "
-               "Valid types are uint8, uint16, double, single, and bool.",
+               "Valid types are int8, int16, int32, int64, uint8, uint16, "
+               "uint32, uint64, double, single, and bool.",
                cdata.type_name ().c_str ());
       a = NDArray (dv, 0);  // return 0 instead
     }
 
 #undef CONVERT_CDATA_1
 
   return octave_value (a);
 }
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -4538,19 +4538,24 @@ public:
     {
       xdata.add_constraint (2);
       xdata.add_constraint (dim_vector (0, 0));
       ydata.add_constraint (2);
       ydata.add_constraint (dim_vector (0, 0));
       cdata.add_constraint ("double");
       cdata.add_constraint ("single");
       cdata.add_constraint ("logical");
+      cdata.add_constraint ("int8");
+      cdata.add_constraint ("int16");
+      cdata.add_constraint ("int32");
+      cdata.add_constraint ("int64");
       cdata.add_constraint ("uint8");
       cdata.add_constraint ("uint16");
-      cdata.add_constraint ("int16");
+      cdata.add_constraint ("uint32");
+      cdata.add_constraint ("uint64");
       cdata.add_constraint ("real");
       cdata.add_constraint (dim_vector (-1, -1));
       cdata.add_constraint (dim_vector (-1, -1, 3));
       alphadata.add_constraint ("double");
       alphadata.add_constraint ("uint8");
       alphadata.add_constraint (dim_vector (-1, -1));
     }
 
@@ -4840,16 +4845,28 @@ public:
     void init (void)
     {
       xdata.add_constraint (dim_vector (-1, -1));
       ydata.add_constraint (dim_vector (-1, -1));
       zdata.add_constraint (dim_vector (-1, -1));
       faces.add_constraint (dim_vector (-1, -1));
       vertices.add_constraint (dim_vector (-1, 2));
       vertices.add_constraint (dim_vector (-1, 3));
+      cdata.add_constraint ("double");
+      cdata.add_constraint ("single");
+      cdata.add_constraint ("logical");
+      cdata.add_constraint ("int8");
+      cdata.add_constraint ("int16");
+      cdata.add_constraint ("int32");
+      cdata.add_constraint ("int64");
+      cdata.add_constraint ("uint8");
+      cdata.add_constraint ("uint16");
+      cdata.add_constraint ("uint32");
+      cdata.add_constraint ("uint64");
+      cdata.add_constraint ("real");
       cdata.add_constraint (dim_vector (-1, -1));
       cdata.add_constraint (dim_vector (-1, -1, 3));
       facevertexcdata.add_constraint (dim_vector (-1, 1));
       facevertexcdata.add_constraint (dim_vector (-1, 3));
       facevertexcdata.add_constraint (dim_vector (0, 0));
       facevertexalphadata.add_constraint (dim_vector (-1, 1));
       facevertexalphadata.add_constraint (dim_vector (0, 0));
       facenormals.add_constraint (dim_vector (-1, 3));
@@ -5092,16 +5109,26 @@ public:
   protected:
     void init (void)
     {
       xdata.add_constraint (dim_vector (-1, -1));
       ydata.add_constraint (dim_vector (-1, -1));
       zdata.add_constraint (dim_vector (-1, -1));
       cdata.add_constraint ("double");
       cdata.add_constraint ("single");
+      cdata.add_constraint ("logical");
+      cdata.add_constraint ("int8");
+      cdata.add_constraint ("int16");
+      cdata.add_constraint ("int32");
+      cdata.add_constraint ("int64");
+      cdata.add_constraint ("uint8");
+      cdata.add_constraint ("uint16");
+      cdata.add_constraint ("uint32");
+      cdata.add_constraint ("uint64");
+      cdata.add_constraint ("real");
       cdata.add_constraint (dim_vector (-1, -1));
       cdata.add_constraint (dim_vector (-1, -1, 3));
       alphadata.add_constraint ("double");
       alphadata.add_constraint ("uint8");
       alphadata.add_constraint (dim_vector (-1, -1));
       facenormals.add_constraint (dim_vector (-1, -1, 3));
       facenormals.add_constraint (dim_vector (0, 0));
       vertexnormals.add_constraint (dim_vector (-1, -1, 3));
