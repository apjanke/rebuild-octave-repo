# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1420178348 18000
#      Fri Jan 02 00:59:08 2015 -0500
# Node ID a5eb03a7e2a5264ef1090983c0dedb0f357eddfb
# Parent  19f75d156ffee3b54e9da944c2400e9d16fbe0d1
eliminate unused variable and parameter warnings

* audiodevinfo.cc, audioread.cc: Eliminate unused variable and
parameter warnings.

diff --git a/libinterp/dldfcn/audiodevinfo.cc b/libinterp/dldfcn/audiodevinfo.cc
--- a/libinterp/dldfcn/audiodevinfo.cc
+++ b/libinterp/dldfcn/audiodevinfo.cc
@@ -432,17 +432,17 @@ enum audio_type { INT8, UINT8, INT16, DO
 class audioplayer : public octave_base_value
 {
 public:
   audioplayer (void);
   ~audioplayer (void) {};
 
   // Overloaded base functions
   double player_value (void) const { return 0; }
-  virtual double scalar_value (bool frc_str_conv = false) const { return 0; }
+  virtual double scalar_value (bool = false) const { return 0; }
   void print (std::ostream& os, bool pr_as_read_syntax = false) const;
   void print_raw (std::ostream& os, bool pr_as_read_syntax) const;
 
   // Properties
   bool is_constant (void) const { return true; }
   bool is_defined (void) const { return true; }
   bool print_as_scalar (void) const { return true; }
 
@@ -514,21 +514,19 @@ is_big_endian (void)
     {
       uint32_t i;
       char c[4];
     } bint = { 0x01020304 };
   return bint.c[0] == 1;
 }
 
 static int
-octave_play_callback (const void *input, void *output,
-                      unsigned long frames,
-                      const PaStreamCallbackTimeInfo *time,
-                      PaStreamCallbackFlags status,
-                      void *data)
+octave_play_callback (const void *, void *output, unsigned long frames,
+                      const PaStreamCallbackTimeInfo *,
+                      PaStreamCallbackFlags, void *data)
 {
   audioplayer *player = (audioplayer *)data;
   int big_endian = is_big_endian ();
   octave_value_list args, retval;
   args(0) = frames;
   retval = feval (player->octave_callback_function, args, 1);
   RowVector sound_l, sound_r;
   Matrix sound = retval(0).matrix_value ();
@@ -584,21 +582,19 @@ octave_play_callback (const void *input,
           buffer[i * 6 + 4] = _sample_r[1 + big_endian];
           buffer[i * 6 + 5] = _sample_r[2 + big_endian];
         }
     }
   return return_status;
 }
 
 static int
-portaudio_play_callback (const void *input, void *output,
-                         unsigned long frames,
-                         const PaStreamCallbackTimeInfo* time,
-                         PaStreamCallbackFlags status,
-                         void *data)
+portaudio_play_callback (const void *, void *output, unsigned long frames,
+                         const PaStreamCallbackTimeInfo*,
+                         PaStreamCallbackFlags, void *data)
 {
   audioplayer *player = (audioplayer *)data;
   int big_endian = is_big_endian ();
   int channels = player->get_channels ();
   RowVector *sound_l = player->get_left ();
   RowVector *sound_r;
 
   if (channels > 1)
@@ -681,17 +677,17 @@ audioplayer::audioplayer (void)
 void
 audioplayer::print (std::ostream& os, bool pr_as_read_syntax) const
 {
   print_raw (os, pr_as_read_syntax);
   newline (os);
 }
 
 void
-audioplayer::print_raw (std::ostream& os, bool pr_as_read_syntax) const
+audioplayer::print_raw (std::ostream& os, bool) const
 {
   os << 0;
 }
 
 void
 audioplayer::init_fn (void)
 {
   PaError err;
@@ -722,18 +718,23 @@ audioplayer::init_fn (void)
   output_parameters.suggestedLatency = Pa_GetDeviceInfo (device)->defaultHighOutputLatency;
   output_parameters.hostApiSpecificStreamInfo = NULL;
 }
 
 void
 audioplayer::init (void)
 {
   PaError err;
-  int channels = this->y.rows ();
-  RowVector *sound_l = this->get_left ();
+
+  // Both of these variables are unused.  Should they be
+  // eliminated or is something not yet implemented?
+  //
+  // int channels = this->y.rows ();
+  // RowVector *sound_l = this->get_left ();
+
   int device;
 
   err = Pa_Initialize ();
   if (err != paNoError)
     {
       error ("audioplayer: Initialization error!");
       return;
     }
@@ -1088,17 +1089,17 @@ audioplayer::isplaying (void)
 class audiorecorder : public octave_base_value
 {
 public:
   audiorecorder (void);
   ~audiorecorder (void) {};
 
   // Overloaded base functions
   double player_value (void) const { return 0; }
-  virtual double scalar_value (bool frc_str_conv = false) const { return 0; }
+  virtual double scalar_value (bool = false) const { return 0; }
   void print (std::ostream& os, bool pr_as_read_syntax = false) const;
   void print_raw (std::ostream& os, bool pr_as_read_syntax) const;
 
   // Properties
   bool is_constant (void) const { return true; }
   bool is_defined (void) const { return true; }
   bool print_as_scalar (void) const { return true; }
 
@@ -1155,21 +1156,19 @@ private:
   DECLARE_OCTAVE_ALLOCATOR
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 DEFINE_OCTAVE_ALLOCATOR (audiorecorder);
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (audiorecorder, "audiorecorder", "audiorecorder");
 
 static int
-octave_record_callback (const void *input, void *output,
-                        unsigned long frames,
-                        const PaStreamCallbackTimeInfo* time,
-                        PaStreamCallbackFlags status,
-                        void *data)
+octave_record_callback (const void *input, void *, unsigned long frames,
+                        const PaStreamCallbackTimeInfo *,
+                        PaStreamCallbackFlags, void *data)
 {
   audiorecorder *recorder = (audiorecorder *)data;
   int channels = recorder->get_channels ();
   float sample_l, sample_r;
   Matrix sound;
   sound.resize (frames, 2);
   if (recorder->get_nbits () == 8)
     {
@@ -1217,21 +1216,19 @@ octave_record_callback (const void *inpu
 
   octave_value_list args, retval;
   args(0) = sound;
   retval = feval (recorder->octave_callback_function, args, 1);
   return retval(0).int_value ();
 }
 
 static int
-portaudio_record_callback (const void *input, void *output,
-                           unsigned long frames,
-                           const PaStreamCallbackTimeInfo* time,
-                           PaStreamCallbackFlags status,
-                           void *data)
+portaudio_record_callback (const void *input, void *, unsigned long frames,
+                           const PaStreamCallbackTimeInfo *,
+                           PaStreamCallbackFlags, void *data)
 {
   audiorecorder *recorder = (audiorecorder *)data;
   int channels = recorder->get_channels ();
   float sample_l, sample_r;
   if (recorder->get_nbits () == 8)
     {
       int8_t *input8 = (int8_t *)input;
       for (int i = 0; i < frames; i++)
@@ -1297,17 +1294,17 @@ audiorecorder::audiorecorder (void)
 void
 audiorecorder::print (std::ostream& os, bool pr_as_read_syntax) const
 {
   print_raw (os, pr_as_read_syntax);
   newline (os);
 }
 
 void
-audiorecorder::print_raw (std::ostream& os, bool pr_as_read_syntax) const
+audiorecorder::print_raw (std::ostream& os, bool) const
 {
   os << 0;
 }
 
 void
 audiorecorder::init (void)
 {
   PaError err;
diff --git a/libinterp/dldfcn/audioread.cc b/libinterp/dldfcn/audioread.cc
--- a/libinterp/dldfcn/audioread.cc
+++ b/libinterp/dldfcn/audioread.cc
@@ -218,17 +218,19 @@ Comment.\n\
   if (extension == "ogg")
     info.format = SF_FORMAT_VORBIS;
   else
     info.format = SF_FORMAT_PCM_16;
 
   std::string title = "";
   std::string artist = "";
   std::string comment = "";
-  float quality = 0.75;
+  // Quality is currently unused?
+  //
+  // float quality = 0.75;
   for (int i = 3; i < args.length (); i += 2)
     {
       if (args(i).string_value () == "BitsPerSample")
         {
           int bits = args(i + 1).int_value ();
           if (bits == 8)
             info.format |= SF_FORMAT_PCM_S8;
           else if (bits == 16)
@@ -237,18 +239,20 @@ Comment.\n\
             info.format |= SF_FORMAT_PCM_24;
           else if (bits == 32)
             info.format |= SF_FORMAT_PCM_32;
           else
             error ("audiowrite: wrong number of bits specified");
         }
       else if (args(i).string_value () == "BitRate")
         ;
-      else if (args(i).string_value () == "Quality")
-        quality = args(i + 1).int_value () * 0.01;
+      // Quality is currently unused?
+      //
+      // else if (args(i).string_value () == "Quality")
+      //   quality = args(i + 1).int_value () * 0.01;
       else if (args(i).string_value () == "Title")
         title = args(i + 1).string_value ();
       else if (args(i).string_value () == "Artist")
         artist = args(i + 1).string_value ();
       else if (args(i).string_value () == "Comment")
         comment = args(i + 1).string_value ();
       else
         error ("audiowrite: wrong argument name");
@@ -284,17 +288,16 @@ Return information about an audio file s
       print_usage ();
       return octave_value (retval);
     }
 #ifdef HAVE_SNDFILE
   Matrix audio;
   SNDFILE *file;
   SF_INFO info;
   info.format = 0;
-  int start, end;
   file = sf_open (args(0).string_value ().c_str (), SFM_READ, &info);
   retval.assign ("Filename", args(0).string_value ());
   retval.assign ("CompressionMethod", "");
   retval.assign ("NumChannels", info.channels);
   retval.assign ("SampleRate", info.samplerate);
   retval.assign ("TotalSamples", info.frames);
   retval.assign ("Duration", (float)info.frames / (float)info.samplerate);
 
