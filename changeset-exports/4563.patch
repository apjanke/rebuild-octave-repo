# HG changeset patch
# User jwe
# Date 1067408712 0
#      Wed Oct 29 06:25:12 2003 +0000
# Node ID 742993a501b942ac0bea502e6af4fa898c747e1f
# Parent  4699bdb4c36255961426de4bceebb691d1b5f640
[project @ 2003-10-29 06:25:12 by jwe]

diff --git a/liboctave/CNDArray.cc b/liboctave/CNDArray.cc
--- a/liboctave/CNDArray.cc
+++ b/liboctave/CNDArray.cc
@@ -72,25 +72,25 @@ ComplexNDArray::operator ! (void) const
   return b;
 }
 
 // XXX FIXME XXX -- this is not quite the right thing.
 
 boolNDArray
 ComplexNDArray::all (int dim) const
 {
-  MX_ND_ALL_ANY (MX_ND_ALL_EVAL (real (elem (iter_idx)) == 0
-				 && imag (elem (iter_idx)) == 0));
+  MX_ND_ANY_ALL (MX_ND_ALL_EVAL (real (elem (iter_idx)) == 0
+				 && imag (elem (iter_idx)) == 0), true);
 }
 
 boolNDArray
 ComplexNDArray::any (int dim) const
 {
-  MX_ND_ALL_ANY (MX_ND_ANY_EVAL (real (elem (iter_idx))
-				 || imag (elem (iter_idx))));
+  MX_ND_ANY_ALL (MX_ND_ANY_EVAL (real (elem (iter_idx)) != 0
+				 || imag (elem (iter_idx)) != 0), false);
 }
 
 ComplexMatrix
 ComplexNDArray::matrix_value (void) const
 {
   ComplexMatrix retval;
 
   int nd = ndims ();
diff --git a/liboctave/boolNDArray.cc b/liboctave/boolNDArray.cc
--- a/liboctave/boolNDArray.cc
+++ b/liboctave/boolNDArray.cc
@@ -48,23 +48,23 @@ boolNDArray::operator ! (void) const
   return b;
 }
 
 // XXX FIXME XXX -- this is not quite the right thing.
 
 boolNDArray
 boolNDArray::all (int dim) const
 {
-  MX_ND_ALL_ANY (MX_ND_ALL_EVAL (MX_ND_ALL_EXPR));
+  MX_ND_ANY_ALL (MX_ND_ALL_EVAL (MX_ND_ALL_EXPR), true);
 }
 
 boolNDArray
 boolNDArray::any (int dim) const
 {
-  MX_ND_ALL_ANY (MX_ND_ANY_EVAL (MX_ND_ANY_EXPR));
+  MX_ND_ANY_ALL (MX_ND_ANY_EVAL (MX_ND_ANY_EXPR), false);
 }
 
 boolMatrix
 boolNDArray::matrix_value (void) const
 {
   boolMatrix retval;
 
   int nd = ndims ();
diff --git a/liboctave/chNDArray.cc b/liboctave/chNDArray.cc
--- a/liboctave/chNDArray.cc
+++ b/liboctave/chNDArray.cc
@@ -35,23 +35,23 @@ Software Foundation, 59 Temple Place - S
 
 #include "ArrayN-inline.h"
 
 // XXX FIXME XXX -- this is not quite the right thing.
 
 boolNDArray
 charNDArray::all (int dim) const
 {
-  MX_ND_ALL_ANY (MX_ND_ALL_EVAL (elem (iter_idx) == ' '));
+  MX_ND_ANY_ALL (MX_ND_ALL_EVAL (elem (iter_idx) == ' '), true);
 }
 
 boolNDArray
 charNDArray::any (int dim) const
 {
-  MX_ND_ALL_ANY (MX_ND_ANY_EVAL (elem (iter_idx) != ' '));
+  MX_ND_ANY_ALL (MX_ND_ANY_EVAL (elem (iter_idx) != ' '), false);
 }
 
 charMatrix
 charNDArray::matrix_value (void) const
 {
   charMatrix retval;
 
   int nd = ndims ();
diff --git a/liboctave/dNDArray.cc b/liboctave/dNDArray.cc
--- a/liboctave/dNDArray.cc
+++ b/liboctave/dNDArray.cc
@@ -63,23 +63,23 @@ NDArray::operator ! (void) const
   return b;
 }
 
 // XXX FIXME XXX -- this is not quite the right thing.
 
 boolNDArray
 NDArray::all (int dim) const
 {
-  MX_ND_ALL_ANY (MX_ND_ALL_EVAL (MX_ND_ALL_EXPR));
+  MX_ND_ANY_ALL (MX_ND_ALL_EVAL (MX_ND_ALL_EXPR), true);
 }
 
 boolNDArray
 NDArray::any (int dim) const
 {
-  MX_ND_ALL_ANY (MX_ND_ANY_EVAL (MX_ND_ANY_EXPR));
+  MX_ND_ANY_ALL (MX_ND_ANY_EVAL (MX_ND_ANY_EXPR), false);
 }
 
 Matrix
 NDArray::matrix_value (void) const
 {
   Matrix retval;
 
   int nd = ndims ();
diff --git a/liboctave/mx-inlines.cc b/liboctave/mx-inlines.cc
--- a/liboctave/mx-inlines.cc
+++ b/liboctave/mx-inlines.cc
@@ -345,125 +345,156 @@ OP_DUP_FCN (conj, mx_inline_conj_dup, Co
 			MX_ANY_ALL_OP_ROW_CODE (TEST_OP, TEST_TRUE_VAL), \
 			MX_ANY_ALL_OP_COL_CODE (TEST_OP, TEST_TRUE_VAL), \
 			INIT_VAL, INIT_VAL)
 
 #define MX_ALL_OP(DIM) MX_ANY_ALL_OP (DIM, true, ==, false)
 
 #define MX_ANY_OP(DIM) MX_ANY_ALL_OP (DIM, false, !=, true)
 
-#define MX_ND_ALL_EXPR elem (iter_idx) == 0
+#define MX_ND_ALL_EXPR elem (iter_idx) == 0 
 
-#define MX_ND_ANY_EXPR elem (iter_idx)
+#define MX_ND_ANY_EXPR elem (iter_idx) != 0
 
 #define MX_ND_ALL_EVAL(TEST_EXPR) \
  if (TEST_EXPR) \
    { \
      if (dim > -1) \
        iter_idx (dim) = 0; \
      retval (iter_idx) = 0; \
      break; \
    } \
-   else \
+ else \
    { \
      if (dim > -1) \
        iter_idx (dim) = 0; \
      retval (iter_idx) = 1; \
    } \
 
 #define MX_ND_ANY_EVAL(TEST_EXPR) \
  if (TEST_EXPR) \
    { \
      if (dim > -1) \
        iter_idx (dim) = 0; \
      retval (iter_idx) = 1; \
      break; \
    } 
 
-#define MX_ND_ALL_ANY(EVAL_EXPR) \
+#define MX_ND_ANY_ALL(EVAL_EXPR, VAL) \
  \
   boolNDArray retval; \
  \
   dim_vector dv = dims (); \
- /* Check to see if we have a empty matrix: [] */ \
-  for (int i = 0; i < dv.length (); i++)\
-    if (dv (i) == 0) \
-      { \
-        dim_vector dv_temp (1, 1); \
-        retval.resize (dv_temp, false); \
-        return retval; \
-      } \
-  if (dim == -1)/* We need to find first non-singleton dim */ \
+ \
+  int empty = true; \
+ \
+  for (int i = 0; i < dv.length (); i++) \
+    { \
+      if (dv(i) > 0) \
+        { \
+          empty = false; \
+          break; \
+        } \
+    } \
+ \
+  if (empty) \
+    { \
+      dim_vector retval_dv (1, 1); \
+      retval.resize (retval_dv, VAL); \
+      return retval; \
+    } \
+ \
+  if (dim == -1) /* We need to find first non-singleton dim */ \
     { \
-      /* Be sure to return a scalar if we have a vector */ \
-      if (dv.length () == 2 && dv (0) == 1 && dv (1) >= 1) \
-        dim = 1; \
-      else \
-        for (int i = 0; i < dv.length (); i++) \
-	  { \
-            if (dv (i) > 1) \
-	      { \
-	        dim = i; \
-                break; \
-	      } \
-	  } \
+      for (int i = 0; i < dv.length (); i++) \
+        { \
+	  if (dv (i) != 1) \
+	    { \
+	      dim = i; \
+	      break; \
+	    } \
+        } \
+ \
       if (dim == -1) \
+       	dim = 0; \
+    } \
+ \
+  int squeezed = 0; \
+ \
+  for (int i = 0; i < dv.length (); i++) \
+    { \
+      if (dv(i) == 0) \
         { \
-	  (*current_liboctave_error_handler) \
-	    ("all dimensions are singleton"); \
-          return retval; \
-	} \
+          squeezed = 1;\
+	  break;\
+        } \
     } \
- /*  Length of Dimension */\
+ \
+  if (squeezed) \
+    { \
+      dv(dim) = 1; \
+ \
+      retval.resize (dv, VAL); \
+ \
+      return retval; \
+    } \
+ \
+  /*  Length of Dimension */ \
   int dim_length = 1; \
+ \
   /* dim = -1 means from here that the user specified a */ \
   /* dimension which is larger that the number of dimensions */ \
   /* of the array */ \
+ \
   if (dim >= dv.length ()) \
     dim = -1; \
   else \
-    dim_length = dv (dim); \
+    dim_length = dv(dim); \
+ \
   if (dim > -1) \
-    dv (dim) = 1; \
+    dv(dim) = 1; \
  \
- /* We need to find the number of elements we need to */ \
- /* fill in retval. First we need to get last idx of  */ \
- /* the dimension vector                              */ \
+  /* We need to find the number of elements we need to */ \
+  /* fill in retval. First we need to get last idx of  */ \
+  /* the dimension vector                              */ \
+ \
   Array<int> temp_dv (dv.length (), 0); \
+ \
   for (int x = 0; x < dv.length (); x++) \
-    temp_dv (x) = dv (x) - 1; \
+    temp_dv(x) = dv(x) - 1; \
  \
- /* This finds the number of elements in retval */ \
+  /* This finds the number of elements in retval */ \
   int num_iter = compute_index (temp_dv, dv) + 1; \
  \
- /* Make sure retval has correct dimensions */ \
- retval.resize (dv, false); \
+  /* Make sure retval has correct dimensions */ \
+  retval.resize (dv, false); \
  \
   Array<int> iter_idx (dv.length (), 0); \
  \
- /* Filling in values.         */ \
- /* First loop finds new index */ \
+  /* Filling in values.         */ \
+  /* First loop finds new index */ \
+ \
   for (int j = 0; j < num_iter; j++) \
     { \
       for (int i = 0; i < dim_length; i++) \
 	{ \
 	  if (dim > -1) \
-	     iter_idx (dim) = i; \
+	    iter_idx(dim) = i; \
  \
-	  EVAL_EXPR \
+	  EVAL_EXPR; \
 	} \
  \
       if (dim > -1) \
         iter_idx (dim) = 0; \
  \
       increment_index (iter_idx, dv); \
     } \
  \
   return retval
-
+ 
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/Cell.h b/src/Cell.h
--- a/src/Cell.h
+++ b/src/Cell.h
@@ -51,16 +51,19 @@ public:
     {
       for (int i = 0; i < ovl.length (); i++)
 	elem (i) = ovl (i);
     }
 
   Cell (int n, int m, const octave_value& val = resize_fill_value ())
     : ArrayN<octave_value> (dim_vector (n, m), val) { }
 
+  Cell (const dim_vector& dims, const octave_value& val = resize_fill_value ())
+    : ArrayN<octave_value> (dims, val) { }
+
   Cell (const ArrayN<octave_value>& c)
     : ArrayN<octave_value> (c) { }
 
   Cell (const Array<octave_value>& c, int nr, int nc)
     : ArrayN<octave_value> (c, dim_vector (nr, nc)) { }
 
   Cell (const string_vector& sv);
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,64 @@
 2003-10-28  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* ov-list.h (octave_list::nelem): Delete.
+	(octave_list::dims): New function.
+	* ov-range.h (octave_list::dims): New function.
+	* ov-struct.h (octave_struct::dims): New function.
+	* ov-base-scalar.h (octave_base_scalar::dims): New function.
+
+	* ov.h (octave_value::rows): No longer virtual.
+	* ov.cc (octave_value::rows): Provide common implementation.
+	* ov-base.h (octave_base_value::rows): Delete.
+	* ov-base-mat.h (octave_base_matrix<T>::rows): Delete.
+	* ov-base-scalar.h (octave_base_scalar<T>::rows): Delete.
+	* ov-struct.h (octave_struct::rows): Delete.
+	* ov-range.h (octave_range::rows): Delete.
+
+	* ov.h (octave_value::columns): No longer virtual.
+	* ov.cc (octave_value::columns): Provide common implementation.
+	* ov-base.h (octave_base_value::columns): Delete.
+	* ov-base-mat.h (octave_base_matrix<T>::columns): Delete.
+	* ov-base-scalar.h (octave_base_scalar<T>::columns): Delete.
+	* ov-struct.h (octave_struct::columns): Delete.
+	* ov-range.h (octave_range::columns): Delete.
+
+	* ov.h (octave_value::numel): No longer virtual.
+	* ov.cc (octave_value::numel): Provide common implementation.
+	* ov-base.h (octave_base_value::numel): Delete.
+	* ov-base-mat.h (octave_base_matrix<T>::numel): Delete.
+	* ov-base-scalar.h (octave_base_scalar<T>::numel): Delete.
+	* ov-struct.h (octave_struct::numel): Delete.
+
+	* ov-cs-list.h (octave_cs_list::dims): New function.
+	(octave_cs_list::length): Delete.
+
+	* ov.h (octave_value::ndims): No longer virtual.
+	* ov.cc (octave_value::ndims): Provide common implementation.
+	* ov-base.h (octave_base_value::ndims): Delete.
+	* ov-base-mat.h (octave_base_matrix<T>::ndims): Delete.
+	* ov-base-scalar.h (octave_base_scalar<T>::ndims): Delete.
+	* ov-struct.h (octave_struct::ndims): Delete.
+
+	* ov-cell.cc (Fcell): Make it work for N-d cells.
+
+	* Cell.h (Cell::Cell  (const dim_vector&, const octave_value&)):
+	New constructor.
+
+	* ov.h (octave_value::length): No longer virtual.
+	* ov.cc (octave_value::length): Provide common implementation.
+	* ov-base.h (octave_base_value::length): Delete.
+	* ov-base-mat.h (octave_base_matrix<T>::length): Delete.
+	* ov-base-scalar.h (octave_base_scalar<T>::length): Delete.
+	* ov-struct.h (octave_struct::length): Delete.
+	* ov-cs-list.h (octave_cs_list::length): Delete.
+	* ov-list.h (octave_list::length): Delete.
+	* ov-range.h (octave_range::length): Delete.
+
 	* load-save.cc (save_mat5_binary_element): Use numel instead of
 	array_length.
 	* ov-struct.cc (octave_struct::print_raw): Likewise.
 	* pt-loop.cc (tree_complex_for_command::eval): Likewise.
 	* oct-map.cc (Octave_map::numel): New function.
 	* oct-map.h: Provide decl.
 
 	* oct-map.cc, oct-map.h (Octave_map::array_length): Delete.
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -1000,32 +1000,32 @@ fill_matrix (const octave_value_list& ar
       ndim = 0;
       type = 0;
       break;
 
     case 1:
       get_dimensions (args(0), fcn, dims);
       break;
 
-      default:
-	{
-	  dims.resize (nargin);
+    default:
+      {
+	dims.resize (nargin);
 
-	  for (int i = 0; i < nargin; i++)
-	    {
-	      dims(i) = args(i).is_empty () ? 0 : args(i).nint_value ();
+	for (int i = 0; i < nargin; i++)
+	  {
+	    dims(i) = args(i).is_empty () ? 0 : args(i).nint_value ();
 
-	      if (error_state)
-		{
-		  error ("%s: expecting scalar arguments", fcn);
-		  break;
-		}
-	    }
-	}
-	break;
+	    if (error_state)
+	      {
+		error ("%s: expecting scalar arguments", fcn);
+		break;
+	      }
+	  }
+      }
+      break;
     }
 
   if (! error_state)
     {
       ndim = dims.length ();
 
       check_dimensions (dims, fcn);
 
diff --git a/src/oct-map.cc b/src/oct-map.cc
--- a/src/oct-map.cc
+++ b/src/oct-map.cc
@@ -189,17 +189,21 @@ Octave_map::assign (const octave_value_l
 
   return *this;
 }
 
 Octave_map&
 Octave_map::assign (const std::string& key, const Cell& rhs)
 {
   if (empty ())
-    map[key] = rhs;
+    {
+      map[key] = rhs;
+
+      dimensions = dim_vector (1, 1);
+    }
   else
     {
       if (dims () == rhs.dims ())
 	map[key] = rhs;
       else
 	error ("invalid structure assignment");
     }
 
diff --git a/src/ov-base-mat.cc b/src/ov-base-mat.cc
--- a/src/ov-base-mat.cc
+++ b/src/ov-base-mat.cc
@@ -188,57 +188,16 @@ octave_base_matrix<MT>::is_true (void) c
   else
     (*current_liboctave_error_handler)
       ("is_true not yet implemented for N-d Arrays");
   
   return retval;
 }
 
 template <class MT>
-int
-octave_base_matrix<MT>::length (void) const
-{
-  int retval = 0;
-
-  dim_vector dv = dims ();
-      
-  for (int i = 0; i < dv.length (); i++)
-    if (dv(i) > retval)
-      retval = dv(i);
-
-  return retval;
-}
-
-template <class MT>
-int
-octave_base_matrix<MT>::ndims (void) const
-{
-  dim_vector dv = dims ();
-
-  int n_dims = dv.length ();
-     
-   // Remove trailing singleton dimensions.
-
-   for (int i = n_dims; i > 2; i--)
-     {
-       if (dv(i-1) == 1)
-	 n_dims--;
-       else
-	 break;
-     }
-   
-   // The result is always >= 2.
-
-   if (n_dims < 2)
-     n_dims = 2;
-
-   return n_dims;
-}
-
-template <class MT>
 bool
 octave_base_matrix<MT>::print_as_scalar (void) const
 {
   int nr = rows ();
   int nc = columns ();
 
   return (nr == 1 && nc == 1 || (nr == 0 || nc == 0));
 }
diff --git a/src/ov-base-mat.h b/src/ov-base-mat.h
--- a/src/ov-base-mat.h
+++ b/src/ov-base-mat.h
@@ -85,30 +85,21 @@ public:
 
   octave_value do_index_op (const octave_value_list& idx, int resize_ok);
 
   octave_value do_index_op (const octave_value_list& idx)
     { return do_index_op (idx, 0); }
 
   void assign (const octave_value_list& idx, const MT& rhs);
 
-  int rows (void) const { return matrix.rows (); }
-  int columns (void) const { return matrix.columns (); }
-
   dim_vector dims (void) const { return matrix.dims (); }
 
   octave_value all (int dim = 0) const { return matrix.all (dim); }
   octave_value any (int dim = 0) const { return matrix.any (dim); }
 
-  int length (void) const;
-
-  int ndims (void) const;
-
-  int numel (void) const { return matrix.numel (); }
-
   bool is_matrix_type (void) const { return true; }
 
   bool is_numeric_type (void) const { return true; }
 
   bool is_defined (void) const { return true; }
 
   bool is_constant (void) const { return true; }
 
diff --git a/src/ov-base-scalar.h b/src/ov-base-scalar.h
--- a/src/ov-base-scalar.h
+++ b/src/ov-base-scalar.h
@@ -69,30 +69,22 @@ public:
       panic_impossible ();
       return octave_value_list ();
     }
 
   octave_value subsasgn (const std::string& type,
 			 const std::list<octave_value_list>& idx,
 			 const octave_value& rhs);
 
-  int rows (void) const { return 1; }
-
-  int columns (void) const { return 1; }
-
-  int length (void) const { return 1; }
-
-  int ndims (void) const { return 2; }
-
-  int numel (void) const { return 1; }
-
   bool is_constant (void) const { return true; }
 
   bool is_defined (void) const { return true; }
 
+  dim_vector dims (void) const { static dim_vector dv (1, 1); return dv; }
+
   octave_value all (int = 0) const { return (scalar != 0.0); }
 
   octave_value any (int = 0) const { return (scalar != 0.0); }
 
   bool is_scalar_type (void) const { return true; }
 
   bool is_numeric_type (void) const { return true; }
 
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -89,27 +89,17 @@ public:
   do_multi_index_op (int nargout, const octave_value_list& idx);
 
   idx_vector index_vector (void) const;
 
   octave_value subsasgn (const std::string& type,
 			 const std::list<octave_value_list>& idx,
 			 const octave_value& rhs);
 
-  int rows (void) const { return -1; }
-
-  int columns (void) const { return -1; }
-
-  dim_vector dims (void) const { return dim_vector (rows (), columns ()); }
-
-  int length (void) const { return -1; }
-
-  int ndims (void) const { return -1; }
-
-  int numel (void) const { return -1; }
+  dim_vector dims (void) const { return dim_vector (-1, -1); }
 
   bool is_defined (void) const { return false; }
 
   bool is_cell (void) const { return false; }
 
   bool is_real_scalar (void) const { return false; }
 
   bool is_real_matrix (void) const { return false; }
diff --git a/src/ov-cell.cc b/src/ov-cell.cc
--- a/src/ov-cell.cc
+++ b/src/ov-cell.cc
@@ -440,43 +440,67 @@ them to be the number of rows and column
 elements, @code{cell} uses the values of the elements as the number of\n\
 rows and columns, respectively.\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
+  dim_vector dims;
+
   switch (nargin)
     {
-    case 1:
-      {
-	int nr, nc;
-	get_dimensions (args(0), "cell", nr, nc);
-
-	if (! error_state)
-	  retval = Cell (nr, nc, Matrix ());
-      }
+    case 0:
+      dims = dim_vector (0, 0);
       break;
 
-    case 2:
-      {
-	int nr, nc;
-	get_dimensions (args(0), args(1), "cell", nr, nc);
-
-	if (! error_state)
-	  retval = Cell (nr, nc, Matrix ());
-      }
+    case 1:
+      get_dimensions (args(0), "cell", dims);
       break;
 
     default:
-      print_usage ("cell");
+      {
+	dims.resize (nargin);
+
+	for (int i = 0; i < nargin; i++)
+	  {
+	    dims(i) = args(i).is_empty () ? 0 : args(i).nint_value ();
+
+	    if (error_state)
+	      {
+		error ("cell: expecting scalar arguments");
+		break;
+	      }
+	  }
+      }
       break;
     }
 
+  if (! error_state)
+    {
+      int ndim = dims.length ();
+
+      check_dimensions (dims, "cell");
+
+      if (! error_state)
+	{
+	  switch (ndim)
+	    {
+	    case 1:
+	      retval = Cell (dims(0), dims(0), Matrix ());
+	      break;
+
+	    default:
+	      retval = Cell (dims, Matrix ());
+	      break;
+	    }
+	}
+    }
+
   return retval;
 }
 
 DEFUN (cellstr, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} cellstr (@var{string})\n\
 Create a new cell array object from the elements of the string\n\
 array @var{string}.\n\
diff --git a/src/ov-cs-list.h b/src/ov-cs-list.h
--- a/src/ov-cs-list.h
+++ b/src/ov-cs-list.h
@@ -74,18 +74,16 @@ public:
   octave_value do_index_op (const octave_value_list& idx, int resize_ok);
 
   octave_value subsasgn (const std::string& type,
 			 const std::list<octave_value_list>& idx,
 			 const octave_value& rhs);
 
   void assign (const octave_value_list& idx, const octave_value& rhs);
 
-  int length (void) const { return lst.length (); }
-
   bool is_defined (void) const { return true; }
 
   bool is_constant (void) const { return true; }
 
 #endif
 
   bool is_cs_list (void) const { return true; }
 
diff --git a/src/ov-list.h b/src/ov-list.h
--- a/src/ov-list.h
+++ b/src/ov-list.h
@@ -80,19 +80,17 @@ public:
   octave_value do_index_op (const octave_value_list& idx, int resize_ok);
 
   octave_value subsasgn (const std::string& type,
 			 const std::list<octave_value_list>& idx,
 			 const octave_value& rhs);
 
   void assign (const octave_value_list& idx, const octave_value& rhs);
 
-  int length (void) const { return lst.length (); }
-
-  int nelem (void) const { return length (); }
+  dim_vector dims (void) const { return dim_vector (1, lst.length ()); }
 
   bool is_defined (void) const { return true; }
 
   bool is_constant (void) const { return true; }
 
   bool is_list (void) const { return true; }
 
   octave_value_list list_value (void) const { return lst; }
diff --git a/src/ov-range.h b/src/ov-range.h
--- a/src/ov-range.h
+++ b/src/ov-range.h
@@ -98,20 +98,21 @@ public:
 
   octave_value do_index_op (const octave_value_list& idx, int resize_ok);
 
   octave_value do_index_op (const octave_value_list& idx)
     { return do_index_op (idx, 0); }
 
   idx_vector index_vector (void) const { return idx_vector (range); }
 
-  int rows (void) const { return (columns () > 0); }
-  int columns (void) const { return range.nelem (); }
-
-  int length (void) const { return range.nelem (); }
+  dim_vector dims (void) const
+    {
+      int n = range.nelem ();
+      return dim_vector (n > 0, n);
+    }
 
   bool is_defined (void) const { return true; }
 
   bool is_constant (void) const { return true; }
 
   bool is_range (void) const { return true; }
 
   octave_value all (int dim = 0) const;
diff --git a/src/ov-struct.h b/src/ov-struct.h
--- a/src/ov-struct.h
+++ b/src/ov-struct.h
@@ -82,27 +82,17 @@ public:
 
   static octave_value numeric_conv (const Cell& val,
 				    const std::string& type);
 
   octave_value subsasgn (const std::string& type,
 			 const std::list<octave_value_list>& idx,
 			 const octave_value& rhs);
 
-  int rows (void) const { return map.rows (); }
-
-  int columns (void) const { return map.columns (); }
-
-  int length (void) const
-  {
-    int r = rows ();
-    int c = columns ();
-
-    return (r == 0 || c == 0) ? 0 : ((r > c) ? r : c);
-  }
+  dim_vector dims (void) const { return map.dims (); }
 
   bool is_defined (void) const { return true; }
 
   bool is_constant (void) const { return true; }
 
   bool is_map (void) const { return true; }
 
   Octave_map map_value (void) const { return map; }
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -812,16 +812,94 @@ octave_value::assign (assign_op op, cons
       if (error_state)
 	gripe_assign_failed_or_no_method (assign_op_as_string (op),
 					  type_name (), rhs.type_name ());
     }
 
   return *this;
 }
 
+int
+octave_value::rows (void) const
+{
+  dim_vector dv = dims ();
+
+  return (dv.length () > 0) ? dv(0) : -1;
+}
+
+int
+octave_value::columns (void) const
+{
+  dim_vector dv = dims ();
+
+  return (dv.length () > 1) ? dv(1) : -1;
+}
+
+int
+octave_value::length (void) const
+{
+  int retval = 0;
+
+  dim_vector dv = dims ();
+      
+  for (int i = 0; i < dv.length (); i++)
+    {
+      if (dv(i) < 0)
+	{
+	  retval = -1;
+	  break;
+	}
+
+      if (dv(i) > retval)
+	retval = dv(i);
+    }
+
+  return retval;
+}
+
+int
+octave_value::ndims (void) const
+{
+  dim_vector dv = dims ();
+
+  int n_dims = dv.length ();
+     
+   // Remove trailing singleton dimensions.
+
+   for (int i = n_dims; i > 2; i--)
+     {
+       if (dv(i-1) == 1)
+	 n_dims--;
+       else
+	 break;
+     }
+   
+   // The result is always >= 2.
+
+   if (n_dims < 2)
+     n_dims = 2;
+
+   return n_dims;
+}
+
+int
+octave_value::numel (void) const
+{
+  dim_vector dv = dims ();
+
+  int n_dims = dv.length ();
+
+  int retval = n_dims > 0 ? dv(0) : 0;
+
+  for (int i = 1; i < n_dims; i++)
+    retval *= dv(i);
+
+  return retval;    
+}
+
 Cell
 octave_value::cell_value (void) const
 {
   return rep->cell_value ();
 }
 
 Octave_map
 octave_value::map_value (void) const
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -311,33 +311,28 @@ public:
 
   const octave_value& assign (assign_op, const octave_value& rhs);
 
   virtual idx_vector index_vector (void) const
     { return rep->index_vector (); }
 
   // Size.
 
-  virtual int rows (void) const
-    { return rep->rows (); }
-
-  virtual int columns (void) const
-    { return rep->columns (); }
-
   virtual dim_vector dims (void) const
     { return rep->dims (); }
 
-  virtual int length (void) const
-    { return rep->length (); }
+  int rows (void) const;
+
+  int columns (void) const;
 
-  virtual int ndims (void) const
-    { return rep->ndims (); }
+  int length (void) const;
 
-  virtual int numel (void) const
-    { return rep->numel (); }
+  int ndims (void) const;
+
+  int numel (void) const;
 
   // Does this constant have a type?  Both of these are provided since
   // it is sometimes more natural to write is_undefined() instead of
   // ! is_defined().
 
   virtual bool is_defined (void) const
     { return rep->is_defined (); }
 
