# HG changeset patch
# User jwe
# Date 1177619470 0
#      Thu Apr 26 20:31:10 2007 +0000
# Node ID 4deaf99400b2bac67144c1e50fc33563af40c350
# Parent  00fad3bad2a50ddc55695d706491ed62617a0f5f
[project @ 2007-04-26 20:31:10 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2007-04-26  Soren Hauberg  <soren@hauberg.org>
+
+	* DLD-FUNCTIONS/urlwrite.cc: Doc fix.
+
 2007-04-26  David Bateman  <dbateman@free.fr>
 
 	* pt-loop.cc (tree_simple_for_command::eval (void)): Correct
 	reshaping of dim_vector in for loop for multi-dimensional array.
 
 2007-04-26  John W. Eaton  <jwe@octave.org>
 
 	* load-save.cc (find_file_to_load): Only consider regular files.
diff --git a/src/DLD-FUNCTIONS/urlwrite.cc b/src/DLD-FUNCTIONS/urlwrite.cc
--- a/src/DLD-FUNCTIONS/urlwrite.cc
+++ b/src/DLD-FUNCTIONS/urlwrite.cc
@@ -191,39 +191,42 @@ DEFUN_DLD (urlwrite, args, nargout,
 @deftypefn {Loadable Function} {} urlwrite (@var{URL}, @var{localfile})\n\
 @deftypefnx {Loadable Function} {@var{f} =} urlwrite (@var{url}, @var{localfile})\n\
 @deftypefnx {Loadable Function} {[@var{f}, @var{success}] =} urlwrite (@var{url}, @var{localfile})\n\
 @deftypefnx {Loadable Function} {[@var{f}, @var{success}, @var{message}] =} urlwrite (@var{url}, @var{localfile})\n\
 Download a remote file specified by its @var{URL} and save it as\n\
 @var{localfile}.  For example,\n\
 \n\
 @example\n\
-urlwrite ('ftp://ftp.octave.org/pub/octave/README', 'README.txt');\n\
+urlwrite (\"ftp://ftp.octave.org/pub/octave/README\", \"README.txt\");\n\
 @end example\n\
 \n\
 The full path of the downloaded file is returned in @var{f}.  The\n\
 variable @var{success} is 1 if the download was successful,\n\
 otherwise it is 0 in which case @var{message} contains an error\n\
 message.  If no output argument is specified and if an error occurs,\n\
-then the error is signaled through octave's error handling mechanism.\n\
+then the error is signaled through Octave's error handling mechanism.\n\
 \n\
 This function uses libcurl.  Curl supports, among others, the HTTP,\n\
 FTP and FILE protocols.  Username and password may be specified in\n\
 the URL, for example:\n\
 \n\
 @example\n\
-urlwrite ('http://username:password@@example.com/file.txt', 'file.txt');\n\
+urlwrite (\"http://username:password@@example.com/file.txt\",\n\
+          \"file.txt\");\n\
 @end example\n\
 \n\
 GET and POST requests can be specified by @var{method} and @var{param}.\n\
-The parameter @var{method} is either 'get' or 'post' and @var{param} is a\n\
-cell array of parameter and value pairs.  For example:\n\
+The parameter @var{method} is either @samp{get} or @get{post}\n\
+and @var{param} is a cell array of parameter and value pairs.\n\
+For example:\n\
 \n\
 @example\n\
-urlwrite ('http://www.google.com/search', 'search.html', 'get', @{'query', 'octave'@});\n\
+urlwrite (\"http://www.google.com/search\", \"search.html\",\n\
+          \"get\", @{\"query\", \"octave\"@});\n\
 @end example\n\
 @seealso{urlread}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
 #if defined (HAVE_CURL)
 
@@ -330,43 +333,45 @@ DEFUN_DLD (urlread, args, nargout,
 @deftypefn {Loadable Function} {@var{s} =} urlread (@var{url})\n\
 @deftypefnx {Loadable Function} {[@var{s}, @var{success}] =} urlread (@var{url})\n\
 @deftypefnx {Loadable Function} {[@var{s}, @var{success}, @var{message}] =} urlread (@var{url})\n\
 @deftypefnx {Loadable Function} {[@dots{}] =} urlread (@var{url}, @var{method}, @var{param})\n\
 Download a remote file specified by its @var{URL} and return its content\n\
 in string @var{s}.  For example,\n\
 \n\
 @example\n\
-s = urlread ('ftp://ftp.octave.org/pub/octave/README');\n\
+s = urlread (\"ftp://ftp.octave.org/pub/octave/README\");\n\
 @end example\n\
 \n\
 The variable @var{success} is 1 if the download was successful,\n\
 otherwise it is 0 in which case @var{message} contains an error\n\
 message.  If no output argument is specified and if an error occurs,\n\
-then the error is signaled through octave's error handling mechanism.\n\
+then the error is signaled through Octave's error handling mechanism.\n\
 \n\
 This function uses libcurl.  Curl supports, among others, the HTTP,\n\
 FTP and FILE protocols.  Username and password may be specified in the\n\
 URL.  For example,\n\
 \n\
 @example\n\
-s = urlread ('http://username:password@@example.com/file.txt');\n\
+s = urlread (\"http://username:password@@example.com/file.txt\");\n\
 @end example\n\
 \n\
 GET and POST requests can be specified by @var{method} and @var{param}.\n\
-The parameter @var{method} is either 'get' or 'post' and @var{param} is a\n\
-cell array of parameter and value pairs.  For example,\n\
+The parameter @var{method} is either @samp{get} or @samp{post}\n\
+and @var{param} is a cell array of parameter and value pairs.\n\
+For example,\n\ 
 \n\
 @example\n\
-s = urlread ('http://www.google.com/search', 'get', @{'query', 'octave'@});\n\
+s = urlread (\"http://www.google.com/search\", \"get\",\n\
+             @{\"query\", \"octave\"@});\n\
 @end example\n\
 @seealso{urlwrite}\n\
 @end deftypefn")
 {
-  // octave's return value
+  // Octave's return value
   octave_value_list retval;
 
 #if defined (HAVE_CURL)
 
   int nargin = args.length ();
 
   // verify arguments
   if (nargin != 1  && nargin != 3)
