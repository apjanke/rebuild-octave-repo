# HG changeset patch
# User Rik <rik@octave.org>
# Date 1363281923 25200
#      Thu Mar 14 10:25:23 2013 -0700
# Node ID 085976d9ef08f24507f926a3133aca7890714529
# Parent  a4af67e0d22c52d772f71c3ba4c5723d38e35ee9
Fix saving names >31 characters to -v6 format (bug #34676)

* libinterp/interp-core/ls-mat5.cc(save_mat5_element_length,
save_mat5_binary_element): Use max_namelen of 63.

diff --git a/libinterp/interp-core/ls-mat5.cc b/libinterp/interp-core/ls-mat5.cc
--- a/libinterp/interp-core/ls-mat5.cc
+++ b/libinterp/interp-core/ls-mat5.cc
@@ -2097,17 +2097,17 @@ save_mat5_array_length (const FloatCompl
 
   return ret;
 }
 
 int
 save_mat5_element_length (const octave_value& tc, const std::string& name,
                           bool save_as_floats, bool mat7_format)
 {
-  size_t max_namelen = (mat7_format ? 63 : 31);
+  size_t max_namelen = 63;
   size_t len = name.length ();
   std::string cname = tc.class_name ();
   int ret = 32;
 
   if (len > 4)
     ret += PAD (len > max_namelen ? max_namelen : len);
 
   ret += PAD (4 * tc.ndims ());
@@ -2281,17 +2281,17 @@ bool
 save_mat5_binary_element (std::ostream& os,
                           const octave_value& tc, const std::string& name,
                           bool mark_as_global, bool mat7_format,
                           bool save_as_floats, bool compressing)
 {
   int32_t flags = 0;
   int32_t nnz_32 = 0;
   std::string cname = tc.class_name ();
-  size_t max_namelen = (mat7_format ? 63 : 31);
+  size_t max_namelen = 63;
 
   dim_vector dv = tc.dims ();
   int nd = tc.ndims ();
   int dim_len = 4*nd;
 
   static octave_idx_type max_dim_val = std::numeric_limits<int32_t>::max ();
 
   for (int i = 0; i < nd; i++)
@@ -2451,17 +2451,17 @@ save_mat5_binary_element (std::ostream& 
       os.write (buf, PAD (dim_len) - dim_len);
     }
 
   // array name subelement
   {
     size_t namelen = name.length ();
 
     if (namelen > max_namelen)
-      namelen = max_namelen; // only 31 or 63 char names permitted in mat file
+      namelen = max_namelen;  // Truncate names if necessary
 
     int paddedlength = PAD (namelen);
 
     write_mat5_tag (os, miINT8, namelen);
     OCTAVE_LOCAL_BUFFER (char, paddedname, paddedlength);
     memset (paddedname, 0, paddedlength);
     strncpy (paddedname, name.c_str (), namelen);
     os.write (paddedname, paddedlength);
@@ -2629,17 +2629,17 @@ save_mat5_binary_element (std::ostream& 
   else if (tc.is_map () || tc.is_inline_function () || tc.is_object ())
     {
       if (tc.is_inline_function () || tc.is_object ())
         {
           std::string classname = tc.is_object () ? tc.class_name () : "inline";
           size_t namelen = classname.length ();
 
           if (namelen > max_namelen)
-            namelen = max_namelen; // only 31 or 63 char names permitted
+            namelen = max_namelen; // Truncate names if necessary
 
           int paddedlength = PAD (namelen);
 
           write_mat5_tag (os, miINT8, namelen);
           OCTAVE_LOCAL_BUFFER (char, paddedname, paddedlength);
           memset (paddedname, 0, paddedlength);
           strncpy (paddedname, classname.c_str (), namelen);
           os.write (paddedname, paddedlength);
