# HG changeset patch
# User Michael Goffioul <michael.goffioul@gmail.com>
# Date 1246226453 -3600
#      Sun Jun 28 23:00:53 2009 +0100
# Node ID c0c23dbbade7bb6b61c5f6c9e28031a1994b5cf7
# Parent  7cc35bc348ccf374a8d4d26632fe47733a01f447
Improve error handling in text rendering.

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,16 +1,23 @@
 2009-06-28  Michael Goffioul  <michael.goffioul@gmail.com>
 
 	* Makefile.in (INCLUDES): Install txt-eng.h and txt-eng-ft.h.
 	* gl-render.cc (opengl_renderer::draw_text): Fix bitmap offset
 	computation for 90x rotated text.
 	* txt-eng-ft.cc (ft_render::render): Compute bitmap pixels correctly
 	for 90x rotated text.
 
+	* gl-render.cc (opengl_renderer::draw(text::properties)): Don't do
+	anything if the bitmap data is empty. Issue a warning instead of
+	an error if Freetype library is not available.
+	* txt-eng-ft.cc (ft_manager::do_get_font): Small change in error
+	string (add prefix).
+	(ft_render::render): Don't do anything if the bitmap data is empty.
+
 2009-06-28  Jaroslav Hajek  <highegg@gmail.com>
 
 	* symtab.h (erase_scope (void *)): Remove overload.
 
 2009-06-26  Michael Goffioul  <michael.goffioul@gmail.com>
 
 	* txt-eng.h: New file for simple text engine.
 	* txt-eng.h, txt-eng.cc: Freetype based text render engine.
diff --git a/src/gl-render.cc b/src/gl-render.cc
--- a/src/gl-render.cc
+++ b/src/gl-render.cc
@@ -3013,16 +3013,22 @@ opengl_renderer::draw_text (const std::s
     rot_mode = ft_render::ROTATION_270;
 
   text_element *elt = text_parser_none ().parse (txt);
   Matrix bbox;
   uint8NDArray pixels = text_renderer.render (elt, bbox, rot_mode);
   int x0 = 0, y0 = 0;
   int w = bbox(2), h = bbox(3);
 
+  if (pixels.numel () == 0)
+    {
+      // nothing to render
+      return bbox;
+    }
+
   switch (halign)
     {
     default: break;
     case 1: x0 = -bbox(2)/2; break;
     case 2: x0 = -bbox(2); break;
     }
   switch (valign)
     {
@@ -3061,17 +3067,17 @@ opengl_renderer::draw_text (const std::s
   glDisable (GL_ALPHA_TEST);
   if (! blend)
     glDisable (GL_BLEND);
 
   delete elt;
 
   return bbox;
 #else
-  ::error ("draw_text: cannot render text, Freetype library not available");
+  ::warning ("draw_text: cannot render text, Freetype library not available");
   return Matrix (1, 4, 0.0);
 #endif
 }
 
 #endif
 
 /*
 ;;; Local Variables: ***
diff --git a/src/txt-eng-ft.cc b/src/txt-eng-ft.cc
--- a/src/txt-eng-ft.cc
+++ b/src/txt-eng-ft.cc
@@ -164,17 +164,17 @@ private:
 	  file = "C:/WINDOWS/Fonts/verdana.ttf";
 #else
 	  // FIXME: find a "standard" font for UNIX platforms
 #endif
 	}
 
       if (FT_New_Face (library, file.c_str (), 0, &retval))
 	{
-	  ::error ("unable to load font: %s", file.c_str ());
+	  ::error ("ft_manager: unable to load font: %s", file.c_str ());
 	}
 
       
       return retval;
     }
 
 private:
   FT_Library library;
@@ -391,59 +391,62 @@ ft_render::set_color (Matrix c)
 uint8NDArray
 ft_render::render (text_element* elt, Matrix& box, int rotation)
 {
   set_mode (MODE_BBOX);
   elt->accept (*this);
   box = bbox;
 
   set_mode (MODE_RENDER);
-  elt->accept (*this);
-
-  switch (rotation)
+  if (pixels.numel () > 0)
     {
-    case ROTATION_0:
-      break;
-    case ROTATION_90:
-	{
-	  Array<octave_idx_type> perm (3);
-	  perm(0) = 0;
-	  perm(1) = 2;
-	  perm(2) = 1;
-	  pixels = pixels.permute (perm);
+      elt->accept (*this);
 
-	  Array<idx_vector> idx (3);
-	  idx(0) = idx_vector (':');
-	  idx(1) = idx_vector (pixels.dim2()-1, -1, -1);
-	  idx(2) = idx_vector (':');
-	  pixels = uint8NDArray (pixels.index (idx));
-	}
-      break;
-    case ROTATION_180:
+      switch (rotation)
 	{
-	  Array<idx_vector> idx (3);
-	  idx(0) = idx_vector (':');
-	  idx(1) = idx_vector (pixels.dim2()-1, -1, -1);
-	  idx(2)=  idx_vector (pixels.dim3()-1, -1, -1);
-	  pixels = uint8NDArray (pixels.index (idx));
+	case ROTATION_0:
+	  break;
+	case ROTATION_90:
+	    {
+	      Array<octave_idx_type> perm (3);
+	      perm(0) = 0;
+	      perm(1) = 2;
+	      perm(2) = 1;
+	      pixels = pixels.permute (perm);
+
+	      Array<idx_vector> idx (3);
+	      idx(0) = idx_vector (':');
+	      idx(1) = idx_vector (pixels.dim2()-1, -1, -1);
+	      idx(2) = idx_vector (':');
+	      pixels = uint8NDArray (pixels.index (idx));
+	    }
+	  break;
+	case ROTATION_180:
+	    {
+	      Array<idx_vector> idx (3);
+	      idx(0) = idx_vector (':');
+	      idx(1) = idx_vector (pixels.dim2()-1, -1, -1);
+	      idx(2)=  idx_vector (pixels.dim3()-1, -1, -1);
+	      pixels = uint8NDArray (pixels.index (idx));
+	    }
+	  break;
+	case ROTATION_270:
+	    {
+	      Array<octave_idx_type> perm (3);
+	      perm(0) = 0;
+	      perm(1) = 2;
+	      perm(2) = 1;
+	      pixels = pixels.permute (perm);
+
+	      Array<idx_vector> idx (3);
+	      idx(0) = idx_vector (':');
+	      idx(1) = idx_vector (':');
+	      idx(2) = idx_vector (pixels.dim3()-1, -1, -1);
+	      pixels = uint8NDArray (pixels.index (idx));
+	    }
+	  break;
 	}
-      break;
-    case ROTATION_270:
-	{
-	  Array<octave_idx_type> perm (3);
-	  perm(0) = 0;
-	  perm(1) = 2;
-	  perm(2) = 1;
-	  pixels = pixels.permute (perm);
-
-	  Array<idx_vector> idx (3);
-	  idx(0) = idx_vector (':');
-	  idx(1) = idx_vector (':');
-	  idx(2) = idx_vector (pixels.dim3()-1, -1, -1);
-	  pixels = uint8NDArray (pixels.index (idx));
-	}
-      break;
     }
 
   return pixels;
 }
 
 #endif // HAVE_FREETYPE
