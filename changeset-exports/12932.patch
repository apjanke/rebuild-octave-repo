# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1312680688 25200
#      Sat Aug 06 18:31:28 2011 -0700
# Node ID f951ffdd0133f3fced5d8ffc5d5c89dbd94457d7
# Parent  cefd568ea07386d42dd87b4d60bf9024cdcb662e
doc: Document numel option to cellfun.  Use fewer function handles in examples.

* cellfun.cc: Document numel option to cellfun.  Use fewer function handles
in examples.

diff --git a/src/DLD-FUNCTIONS/cellfun.cc b/src/DLD-FUNCTIONS/cellfun.cc
--- a/src/DLD-FUNCTIONS/cellfun.cc
+++ b/src/DLD-FUNCTIONS/cellfun.cc
@@ -117,18 +117,20 @@ Return 1 for logical elements.\n\
 Return 1 for real elements.\n\
 \n\
 @item length\n\
 Return a vector of the lengths of cell elements.\n\
 \n\
 @item ndims\n\
 Return the number of dimensions of each element.\n\
 \n\
-@item prodofsize\n\
-Return the product of dimensions of each element.\n\
+@item numel\n\
+@itemx prodofsize\n\
+Return the number of elements contained within each cell element.  The\n\
+number is the product of the dimensions of the object at each cell element.\n\
 \n\
 @item size\n\
 Return the size along the @var{k}-th dimension.\n\
 \n\
 @item isclass\n\
 Return 1 for elements of @var{class}.\n\
 @end table\n\
 \n\
@@ -137,17 +139,17 @@ in the form of an inline function, funct
 function (in a character string).  In the case of a character string\n\
 argument, the function must accept a single argument named @var{x}, and\n\
 it must return a string value.  The function can take one or more arguments,\n\
 with the inputs arguments given by @var{C}, @var{D}, etc.  Equally the\n\
 function can return one or more output arguments.  For example:\n\
 \n\
 @example\n\
 @group\n\
-cellfun (@@atan2, @{1, 0@}, @{0, 1@})\n\
+cellfun (\"atan2\", @{1, 0@}, @{0, 1@})\n\
      @result{}ans = [1.57080   0.00000]\n\
 @end group\n\
 @end example\n\
 \n\
 The number of output arguments of @code{cellfun} matches the number of output\n\
 arguments of the function.  The outputs of the function will be collected\n\
 into the output arguments of @code{cellfun} like this:\n\
 \n\
@@ -172,17 +174,17 @@ automatically expanded to the size of th
 \n\
 If the parameter 'UniformOutput' is set to true (the default), then the\n\
 function must return scalars which will be concatenated into the return\n\
 array(s).  If 'UniformOutput' is false, the outputs are concatenated into a\n\
 cell array (or cell arrays).  For example:\n\
 \n\
 @example\n\
 @group\n\
-cellfun (\"tolower(x)\", @{\"Foo\", \"Bar\", \"FooBar\"@},\n\
+cellfun (\"tolower\", @{\"Foo\", \"Bar\", \"FooBar\"@},\n\
          \"UniformOutput\",false)\n\
 @result{} ans = @{\"foo\", \"bar\", \"foobar\"@}\n\
 @end group\n\
 @end example\n\
 \n\
 Given the parameter 'ErrorHandler', then @var{errfunc} defines a function to\n\
 call in case @var{func} generates an error.  The form of the function is\n\
 \n\
@@ -195,17 +197,17 @@ where there is an additional input argum
 @var{func}, given by @var{s}.  This is a structure with the elements\n\
 'identifier', 'message' and 'index', giving respectively the error\n\
 identifier, the error message, and the index into the input arguments\n\
 of the element that caused the error.  For example:\n\
 \n\
 @example\n\
 @group\n\
 function y = foo (s, x), y = NaN; endfunction\n\
-cellfun (@@factorial, @{-1,2@},'ErrorHandler',@@foo)\n\
+cellfun (\"factorial\", @{-1,2@}, 'ErrorHandler', @@foo)\n\
 @result{} ans = [NaN 2]\n\
 @end group\n\
 @end example\n\
 \n\
 @seealso{arrayfun, structfun, spfun}\n\
 @end deftypefn")
 {
   octave_value_list retval;
