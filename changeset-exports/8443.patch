# HG changeset patch
# User Thorsten Meyer <thorsten.meyier@gmx.de>
# Date 1231139530 -3600
#      Mon Jan 05 08:12:10 2009 +0100
# Node ID 34c0acf11539f597d1ccd1b842ac9096268a965b
# Parent  502e58a0d44fb7b8ccdff0f2af7d88f5219eccda
Fix error messages in __xzip__

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2009-01-01  Thorsten Meyer  <thorsten.meyier@gmx.de>
+
+	* miscellaneous/__xzip__.m: Fix error messages, add tests.
+	
 2008-12-26  Thorsten Meyer  <thorsten.meyier@gmx.de>
 
 	* general/int2str.m, general/num2str.m, strings/base2dec.m,
 	strings/blanks.m, strings/cstrcat.m, strings/findstr.m,
 	strings/isstrprop.m, strings/mat2str.m, strings/regexptranslate.m,
 	strings/split.m, strings/str2double.m, strings/str2num.m,
 	strings/strcat.m, strings/strcmpi.m, strings/strfind.m,
 	strings/strjust.m, strings/strmatch.m, strings/strncmpi.m,
diff --git a/scripts/miscellaneous/__xzip__.m b/scripts/miscellaneous/__xzip__.m
--- a/scripts/miscellaneous/__xzip__.m
+++ b/scripts/miscellaneous/__xzip__.m
@@ -29,18 +29,17 @@
 ## @seealso{gzip, bzip2}
 ## @end deftypefn
 
 function entries = __xzip__ (commandname, extension, 
                              commandtemplate, files, outdir)
 
   if (nargin == 4 || nargin == 5)
     if (! ischar (extension) || length (extension) == 0)
-      error (sprintf("%s: extension has to be a string with finite length",
-                     commandname));
+      error ("__xzip__: extension has to be a string with finite length");
     endif
     
     if (nargin == 5 && ! exist (outdir, "dir"))
       error ("__xzip__: output directory does not exist");
     endif
 
     if (ischar (files))
       files = cellstr (files);
@@ -78,25 +77,25 @@ function entries = __xzip__ (commandname
               @(x) fullfile (outdir, sprintf ("%s.%s", x, extension)), 
               f, "UniformOutput", false);
         else
           movefile (cellfun(@(x) sprintf ("%s.%s", x, extension), f, 
                             "UniformOutput", false), cwd);
           ## FIXME this does not work when you try to compress directories
 
           compressed_files  = cellfun(@(x) sprintf ("%s.%s", x, extension), 
-                            files, "UniformOutput", false);
+                                      files, "UniformOutput", false);
         endif
 
         if (nargout > 0)
           entries = compressed_files;
         endif
       else
-        error (sprintf("%s command failed with exit status = %d", 
-                       commandname, status));
+        error ("%s command failed with exit status = %d",
+               commandname, status);
       endif
     unwind_protect_cleanup
       cd(cwd);
       if (nargin == 4)
         crr = confirm_recursive_rmdir ();
         unwind_protect
           confirm_recursive_rmdir (false);
           rmdir (outdir, "s");
@@ -114,8 +113,27 @@ endfunction
 function [d, f] = myfileparts (files)
   [d, f, ext] = cellfun (@(x) fileparts (x), files, "UniformOutput", false);
   f = cellfun (@(x, y) sprintf ("%s%s", x, y), f, ext,
                "UniformOutput", false); 
   idx = cellfun (@(x) isdir (x), files);
   d(idx) = "";
   f(idx) = files(idx);
 endfunction
+
+%!error <extension has to be a string with finite length> 
+%!  __xzip__("gzip", "", "gzip -r %s", "bla");
+%!error <no files to move>
+%!  __xzip__("gzip", ".gz", "gzip -r %s", tmpnam);
+%!error <command failed with exit status>
+%!  # test __xzip__ with invalid compression command
+%!  unwind_protect
+%!    filename = tmpnam;
+%!    dummy    = 1;
+%!    save(filename, "dummy");
+%!    dirname  = tmpnam;
+%!    mkdir(dirname);
+%!    entry = __xzip__("gzip", ".gz", "xxxzipxxx -r %s 2>/dev/null", 
+%!                     filename, dirname);
+%!  unwind_protect_cleanup
+%!    delete(filename);
+%!    rmdir(dirname);
+%!  end_unwind_protect
