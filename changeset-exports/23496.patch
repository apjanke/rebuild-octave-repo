# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1494885944 14400
#      Mon May 15 18:05:44 2017 -0400
# Node ID 427c55a82f35b0f0f6fdc3dddbc55a545a242134
# Parent  8308417aff1c364e8400c32e4a13061487ef943e
* idx-vector.h (checkelem): Don't deprecate (yet).

diff --git a/liboctave/array/idx-vector.h b/liboctave/array/idx-vector.h
--- a/liboctave/array/idx-vector.h
+++ b/liboctave/array/idx-vector.h
@@ -82,17 +82,16 @@ private:
     idx_base_rep& operator = (const idx_base_rep&) = delete;
 
     virtual ~idx_base_rep (void) = default;
 
     // Non-range-checking element query.
     virtual octave_idx_type xelem (octave_idx_type i) const = 0;
 
     // Range-checking element query.
-    OCTAVE_DEPRECATED ("use 'elem' instead")
     virtual octave_idx_type checkelem (octave_idx_type i) const = 0;
 
     // Length of the index vector.
     virtual octave_idx_type length (octave_idx_type n) const = 0;
 
     // The maximum index + 1.  The actual dimension is passed in.
     virtual octave_idx_type extent (octave_idx_type n) const = 0;
 
@@ -132,17 +131,16 @@ private:
     // No copying!
 
     idx_colon_rep (const idx_colon_rep& idx) = delete;
 
     idx_colon_rep& operator = (const idx_colon_rep& idx) = delete;
 
     octave_idx_type xelem (octave_idx_type i) const { return i; }
 
-    OCTAVE_DEPRECATED ("use 'elem' instead")
     octave_idx_type checkelem (octave_idx_type i) const;
 
     octave_idx_type length (octave_idx_type n) const { return n; }
 
     octave_idx_type extent (octave_idx_type n) const { return n; }
 
     idx_class_type idx_class (void) const { return class_colon; }
 
@@ -180,17 +178,16 @@ private:
 
     idx_range_rep (const idx_range_rep& idx) = delete;
 
     idx_range_rep& operator = (const idx_range_rep& idx) = delete;
 
     octave_idx_type xelem (octave_idx_type i) const
     { return start + i * step; }
 
-    OCTAVE_DEPRECATED ("use 'elem' instead")
     octave_idx_type checkelem (octave_idx_type i) const;
 
     octave_idx_type length (octave_idx_type) const { return len; }
 
     octave_idx_type extent (octave_idx_type n) const
     {
       return len ? std::max (n, start + 1 + (step < 0 ? 0 : step * (len - 1)))
                  : n;
@@ -242,17 +239,16 @@ private:
     // Zero-based constructor.
     idx_scalar_rep (octave_idx_type i);
 
     template <typename T>
     idx_scalar_rep (T x);
 
     octave_idx_type xelem (octave_idx_type) const { return data; }
 
-    OCTAVE_DEPRECATED ("use 'elem' instead")
     octave_idx_type checkelem (octave_idx_type i) const;
 
     octave_idx_type length (octave_idx_type) const { return 1; }
 
     octave_idx_type extent (octave_idx_type n) const
     { return std::max (n, data + 1); }
 
     idx_class_type idx_class (void) const { return class_scalar; }
@@ -316,17 +312,16 @@ private:
     idx_vector_rep (const idx_vector_rep& idx) = delete;
 
     idx_vector_rep& operator = (const idx_vector_rep& idx) = delete;
 
     ~idx_vector_rep (void);
 
     octave_idx_type xelem (octave_idx_type i) const { return data[i]; }
 
-    OCTAVE_DEPRECATED ("use 'elem' instead")
     octave_idx_type checkelem (octave_idx_type i) const;
 
     octave_idx_type length (octave_idx_type) const { return len; }
 
     octave_idx_type extent (octave_idx_type n) const
     { return std::max (n, ext); }
 
     idx_class_type idx_class (void) const { return class_vector; }
@@ -386,17 +381,16 @@ private:
     idx_mask_rep (const idx_mask_rep& idx) = delete;
 
     idx_mask_rep& operator = (const idx_mask_rep& idx) = delete;
 
     ~idx_mask_rep (void);
 
     octave_idx_type xelem (octave_idx_type i) const;
 
-    OCTAVE_DEPRECATED ("use 'elem' instead")
     octave_idx_type checkelem (octave_idx_type i) const;
 
     octave_idx_type length (octave_idx_type) const { return len; }
 
     octave_idx_type extent (octave_idx_type n) const
     { return std::max (n, ext); }
 
     idx_class_type idx_class (void) const { return class_mask; }
@@ -564,17 +558,16 @@ public:
   { return rep->length (n); }
 
   octave_idx_type extent (octave_idx_type n) const
   { return rep->extent (n); }
 
   octave_idx_type xelem (octave_idx_type n) const
   { return rep->xelem (n); }
 
-  OCTAVE_DEPRECATED ("use 'elem' instead")
   octave_idx_type checkelem (octave_idx_type n) const
   { return rep->xelem (n); }
 
   octave_idx_type operator () (octave_idx_type n) const
   { return rep->xelem (n); }
 
   operator bool (void) const
   { return ! rep->err; }
