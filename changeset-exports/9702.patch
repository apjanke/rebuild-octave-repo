# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1254927586 14400
#      Wed Oct 07 10:59:46 2009 -0400
# Node ID 9ecd35a606e38959f58177bbf069cb3271e2f376
# Parent  531280b07625a9cdd5632b5985289a4c42170009
avoid some warnings from g++

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,12 @@
+2009-10-07  John W. Eaton  <jwe@octave.org>
+
+	* mx-inlines.cc (mx_inline_diff): Avoid uninitialized variable warning.
+
 2009-10-06  Jaroslav Hajek  <highegg@gmail.com>
 
 	* dDiagMatrix.cc (operator *(const DiagMatrix&, const DiagMatrix&)):
 	Rewrite.
 	* fDiagMatrix.cc (operator *(const FloatDiagMatrix&, const FloatDiagMatrix&)):
 	Rewrite.
 	* CDiagMatrix.cc (operator *(const ComplexDiagMatrix&, const ComplexDiagMatrix&)):
 	Rewrite.
diff --git a/liboctave/mx-inlines.cc b/liboctave/mx-inlines.cc
--- a/liboctave/mx-inlines.cc
+++ b/liboctave/mx-inlines.cc
@@ -946,20 +946,19 @@ void mx_inline_diff (const T *v, T *r, o
 {
   switch (order)
     {
     case 1:
       for (octave_idx_type i = 0; i < n-1; i++)
         r[i] = v[i+1] - v[i];
       break;
     case 2:
-        {
-          T lst;
-          if (n > 1)
-            lst = v[1] - v[0];
+      if (n > 1)
+	{
+	  T lst = v[1] - v[0];
           for (octave_idx_type i = 0; i < n-2; i++)
             {
               T dif = v[i+2] - v[i+1];
               r[i] = dif - lst;
               lst = dif;
             }
         }
       break;
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2009-10-07  John W. Eaton  <jwe@octave.org>
+
+	* pt-arg-list.cc (tree_argument_list::convert_to_const_vector):
+	Avoid uninitialized variable warning.
+	* pt-cbinop.cc (simplify_ldiv_op): Avoid unused parameter warning.
+	* ov-flt-re-mat.cc (convert_to_str_internal):
+	Update for octave_value constructor changes.
+
 2009-10-07  Jaroslav Hajek  <highegg@gmail.com>
 
 	* oct-stream.cc (octave_base_stream::skipl,
 	octave_stream::skipl (long, ...), octave_stream::skipl (const
 	octave_value&, ...)): New methods.
 	* oct-stream.h: Declare them.
 	* file-io.cc (Ffskipl): New DEFUN.
 
diff --git a/src/ov-flt-re-mat.cc b/src/ov-flt-re-mat.cc
--- a/src/ov-flt-re-mat.cc
+++ b/src/ov-flt-re-mat.cc
@@ -302,17 +302,17 @@ octave_float_matrix::convert_to_str_inte
 		  warned = true;
 		}
 	    }
 
 	  chm (i) = static_cast<char> (ival);
 	}
     }
 
-  retval = octave_value (chm, true, type);
+  retval = octave_value (chm, type);
 
   return retval;
 }
 
 bool 
 octave_float_matrix::save_ascii (std::ostream& os)
 {
   dim_vector d = dims ();
diff --git a/src/pt-arg-list.cc b/src/pt-arg-list.cc
--- a/src/pt-arg-list.cc
+++ b/src/pt-arg-list.cc
@@ -158,22 +158,20 @@ tree_argument_list::convert_to_const_vec
   // END doesn't make sense for functions.  Maybe we need a different
   // way of asking an octave_value object this question?
 
   bool stash_object = (list_includes_magic_end
 		       && object
 		       && ! (object->is_function ()
 			     || object->is_function_handle ()));
   
-  unwind_protect::frame_id_t uwp_frame;
+  unwind_protect::frame_id_t uwp_frame = unwind_protect::begin_frame ();
 
   if (stash_object)
     {
-      uwp_frame = unwind_protect::begin_frame ();
-
       unwind_protect::protect_var (indexed_object);
 
       indexed_object = object;
     }
 
   int len = length ();
 
   std::list<octave_value_list> args;
@@ -212,18 +210,17 @@ tree_argument_list::convert_to_const_vec
 	}
       else
 	{
 	  args.push_back (octave_value ());
 	  break;
 	}
     }
 
-  if (stash_object)
-    unwind_protect::run_frame (uwp_frame);
+  unwind_protect::run_frame (uwp_frame);
 
   return args;
 }
 
 std::list<octave_lvalue>
 tree_argument_list::lvalue_list (void)
 {
   std::list<octave_lvalue> retval;
diff --git a/src/pt-cbinop.cc b/src/pt-cbinop.cc
--- a/src/pt-cbinop.cc
+++ b/src/pt-cbinop.cc
@@ -104,17 +104,17 @@ simplify_mul_op (tree_expression *&a, tr
     }
 
   return retop;
 }
 
 // Possibly convert left division to trans_ldiv or herm_ldiv.
 
 static octave_value::compound_binary_op
-simplify_ldiv_op (tree_expression *&a, tree_expression *&b)
+simplify_ldiv_op (tree_expression *&a, tree_expression *&)
 {
   octave_value::compound_binary_op retop;
   octave_value::unary_op opa = strip_trans_herm (a);
 
   if (opa == octave_value::op_hermitian)
     retop = octave_value::op_herm_ldiv;
   else if (opa == octave_value::op_transpose)
     retop = octave_value::op_trans_ldiv;
