# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1504720610 14400
#      Wed Sep 06 13:56:50 2017 -0400
# Node ID 5ecefb7425e3d7098e4b05a68b090bb45a9d2d84
# Parent  bffd7d8268877369313401499917f41d2afe6930
style fixes for some GUI source files

* dialog.cc, dialog.h, octave-qt-link.cc, octave-qt-link.h:
Use m_ prefix for member variables, order functions consistently in
header and source files, and follow more Octave coding conventions.

diff --git a/libgui/src/dialog.cc b/libgui/src/dialog.cc
--- a/libgui/src/dialog.cc
+++ b/libgui/src/dialog.cc
@@ -40,91 +40,91 @@ along with Octave; see the file COPYING.
 #include <QGroupBox>
 #include <QGridLayout>
 #include <QLabel>
 
 
 QUIWidgetCreator uiwidget_creator;
 
 QUIWidgetCreator::QUIWidgetCreator (void)
-  : QObject (), dialog_result (-1), dialog_button (),
-    string_list (new QStringList ()), list_index (new QIntList ()),
-    path_name (new QString ())
+  : QObject (), m_dialog_result (-1), m_dialog_button (),
+    m_string_list (new QStringList ()), m_list_index (new QIntList ()),
+    m_path_name (new QString ())
 { }
 
 QUIWidgetCreator::~QUIWidgetCreator (void)
 {
-  delete string_list;
-  delete list_index;
-  delete path_name;
+  delete m_string_list;
+  delete m_list_index;
+  delete m_path_name;
 }
 
 void
 QUIWidgetCreator::dialog_button_clicked (QAbstractButton *button)
 {
   // Wait for link thread to go to sleep state.
   mutex.lock ();
 
   // Store the value so that builtin functions can retrieve.
   if (button)
-    dialog_button = button->text ();
+    m_dialog_button = button->text ();
 
   // The value should always be 1 for the Octave functions.
-  dialog_result = 1;
+  m_dialog_result = 1;
 
   mutex.unlock ();
 
   // Wake up Octave process so that it continues.
   waitcondition.wakeAll ();
 }
 
 void
 QUIWidgetCreator::list_select_finished (const QIntList& selected,
                                         int button_pressed)
 {
   // Wait for link thread to go to sleep state.
   mutex.lock ();
 
   // Store the value so that builtin functions can retrieve.
-  *list_index = selected;
-  dialog_result = button_pressed;
+  *m_list_index = selected;
+  m_dialog_result = button_pressed;
 
   mutex.unlock ();
 
   // Wake up Octave process so that it continues.
   waitcondition.wakeAll ();
 }
 
 void
 QUIWidgetCreator::input_finished (const QStringList& input, int button_pressed)
 {
   // Wait for link thread to go to sleep state.
   mutex.lock ();
 
   // Store the value so that builtin functions can retrieve.
-  *string_list = input;
-  dialog_result = button_pressed;
+  *m_string_list = input;
+  m_dialog_result = button_pressed;
 
   mutex.unlock ();
 
   // Wake up Octave process so that it continues.
   waitcondition.wakeAll ();
 }
 
 void
 QUIWidgetCreator::filedialog_finished (const QStringList& files,
                                        const QString& path, int filterindex)
 {
   // Wait for link thread to go to sleep state.
   mutex.lock ();
 
   // Store the value so that builtin functions can retrieve.
-  *string_list = files;
-  dialog_result = filterindex;
-  *path_name = path;
+  *m_string_list = files;
+  m_dialog_result = filterindex;
+  *m_path_name = path;
 
   mutex.unlock ();
 
   // Wake up Octave process so that it continues.
   waitcondition.wakeAll ();
 }
 
 MessageDialog::MessageDialog (const QString& message,
@@ -195,35 +195,35 @@ MessageDialog::MessageDialog (const QStr
   connect (this, SIGNAL (buttonClicked (QAbstractButton *)),
            &uiwidget_creator, SLOT (dialog_button_clicked (QAbstractButton *)));
 }
 
 ListDialog::ListDialog (const QStringList& list, const QString& mode,
                         int wd, int ht, const QList<int>& initial,
                         const QString& title, const QStringList& prompt,
                         const QString& ok_string, const QString& cancel_string)
-  : QDialog (), model (new QStringListModel (list))
+  : QDialog (), m_model (new QStringListModel (list))
 {
   QListView *view = new QListView;
-  view->setModel (model);
+  view->setModel (m_model);
 
   if (mode == "single")
     view->setSelectionMode (QAbstractItemView::SingleSelection);
   else if (mode == "multiple")
     view->setSelectionMode (QAbstractItemView::ExtendedSelection);
   else
     view->setSelectionMode (QAbstractItemView::NoSelection);
 
   selector = view->selectionModel ();
   int i = 0;
   for (QList<int>::const_iterator it = initial.begin ();
        it != initial.end (); it++)
     {
-      QModelIndex idx = model->index (initial.value (i++) - 1, 0,
-                                      QModelIndex ());
+      QModelIndex idx = m_model->index (initial.value (i++) - 1, 0,
+                                        QModelIndex ());
       selector->select (idx, QItemSelectionModel::Select);
     }
 
   bool fixed_layout = false;
   if (wd > 0 && ht > 0)
     {
       view->setFixedSize (wd, ht);
       fixed_layout = true;
@@ -294,17 +294,17 @@ ListDialog::ListDialog (const QStringLis
            SLOT (list_select_finished (const QIntList&, int)));
 
   connect (view, SIGNAL (doubleClicked (const QModelIndex&)),
            this, SLOT (item_double_clicked (const QModelIndex&)));
 }
 
 ListDialog::~ListDialog (void)
 {
-  delete model;
+  delete m_model;
 }
 
 void
 ListDialog::buttonOk_clicked (void)
 {
   // Store information about what button was pressed so that builtin
   // functions can retrieve.
   QModelIndexList selected_index = selector->selectedIndexes ();
diff --git a/libgui/src/dialog.h b/libgui/src/dialog.h
--- a/libgui/src/dialog.h
+++ b/libgui/src/dialog.h
@@ -56,68 +56,68 @@ public:
   void signal_dialog (const QString& message, const QString& title,
                       const QString& icon, const QStringList& button,
                       const QString& defbutton, const QStringList& role)
   {
 
     // Use the last button in the list as the reject result, i.e., when no
     // button is pressed such as in the case of the upper right close tab.
     if (! button.isEmpty ())
-      dialog_button = button.last ();
+      m_dialog_button = button.last ();
 
     QString xicon = icon;
     if (xicon.isEmpty ())
       xicon = "none";
 
     emit create_dialog (message, title, xicon, button, defbutton, role);
   };
 
-  int get_dialog_result (void) { return dialog_result; }
+  int get_dialog_result (void) { return m_dialog_result; }
 
-  QString get_dialog_button (void) { return dialog_button; }
+  QString get_dialog_button (void) { return m_dialog_button; }
 
   bool signal_listview (const QStringList& list, const QString& mode,
                         int wd, int ht, const QList<int>& initial,
                         const QString& name, const QStringList& prompt,
                         const QString& ok_string, const QString& cancel_string)
   {
     if (list.isEmpty ())
       return false;
 
     emit create_listview (list, mode, wd, ht, initial, name,
                           prompt, ok_string, cancel_string);
 
     return true;
   };
 
-  const QIntList * get_list_index (void) { return list_index; }
+  const QIntList * get_list_index (void) { return m_list_index; }
 
   bool signal_inputlayout (const QStringList& prompt, const QString& title,
                            const QFloatList& nr, const QFloatList& nc,
                            const QStringList& defaults)
   {
     if (prompt.isEmpty ())
       return false;
 
     emit create_inputlayout (prompt, title, nr, nc, defaults);
 
     return true;
   };
 
-  const QStringList * get_string_list (void) { return string_list; }
+  const QStringList * get_string_list (void) { return m_string_list; }
 
   bool signal_filedialog (const QStringList& filters, const QString& title,
                           const QString& filename, const QString& dirname,
                           const QString& multimode)
   {
     emit create_filedialog (filters, title, filename, dirname, multimode);
     return true;
   }
 
-  const QString * get_dialog_path (void) { return path_name; }
+  const QString * get_dialog_path (void) { return m_path_name; }
 
   // GUI objects cannot be accessed in the non-GUI thread.  However,
   // signals can be sent to slots across threads with proper
   // synchronization.  Hence, the use of QWaitCondition.
   QMutex mutex;
   QWaitCondition waitcondition;
 
 signals:
@@ -144,26 +144,25 @@ public slots:
 
   void input_finished (const QStringList& input, int button_pressed);
 
   void filedialog_finished (const QStringList& files, const QString& path,
                             int filterindex);
 
 private:
 
-  int dialog_result;
-  QString dialog_button;
+  int m_dialog_result;
+  QString m_dialog_button;
 
   // The list could conceivably be big.  Not sure how things are
   // stored internally, so keep off of the stack.
-  QStringList *string_list;
-  QIntList *list_index;
+  QStringList *m_string_list;
+  QIntList *m_list_index;
 
-  QString *path_name;
-
+  QString *m_path_name;
 };
 
 extern QUIWidgetCreator uiwidget_creator;
 
 class MessageDialog : public QMessageBox
 {
   Q_OBJECT
 
@@ -210,17 +209,17 @@ public slots:
   void buttonCancel_clicked (void);
 
   void reject (void);
 
   void item_double_clicked (const QModelIndex&);
 
 private:
 
-  QAbstractItemModel *model;
+  QAbstractItemModel *m_model;
 };
 
 class InputDialog : public QDialog
 {
   Q_OBJECT
 
   QList<QLineEdit *> input_line;
 
@@ -254,14 +253,14 @@ public:
                        const QString& dirname, const QString& multimode);
 
 signals:
 
   void finish_input (const QStringList&, const QString&, int);
 
 private slots:
 
-  void rejectSelection (void);
+  void acceptSelection (void);
 
-  void acceptSelection (void);
+  void rejectSelection (void);
 };
 
 #endif
diff --git a/libgui/src/octave-qt-link.cc b/libgui/src/octave-qt-link.cc
--- a/libgui/src/octave-qt-link.cc
+++ b/libgui/src/octave-qt-link.cc
@@ -45,18 +45,18 @@ along with Octave; see the file COPYING.
 #include "octave-qt-link.h"
 #include "resource-manager.h"
 #include "workspace-element.h"
 
 octave_qt_link::octave_qt_link (QWidget *,
                                 octave::gui_application *app_context)
   : octave_link (), m_app_context (app_context)
 {
-  _current_directory = "";
-  _new_dir = true;
+  m_current_directory = "";
+  m_new_dir = true;
 }
 
 bool
 octave_qt_link::do_confirm_shutdown (void)
 {
   // Lock the mutex before emitting signal.
   mutex.lock ();
 
@@ -64,17 +64,17 @@ octave_qt_link::do_confirm_shutdown (voi
 
   // Wait while the GUI shuts down.
   waitcondition.wait (&mutex);
 
   // The GUI has sent a signal and the thread has been awakened.
 
   mutex.unlock ();
 
-  return _shutdown_confirm_result;
+  return m_shutdown_confirm_result;
 }
 
 bool
 octave_qt_link::do_copy_image_to_clipboard (const std::string& file)
 {
   emit copy_image_to_clipboard_signal (QString::fromStdString (file), true);
 
   return true;
@@ -405,42 +405,42 @@ octave_qt_link::do_debug_cd_or_addpath_e
     retval = 2;
 
   return retval;
 }
 
 void
 octave_qt_link::do_change_directory (const std::string& dir)
 {
-  _current_directory = QString::fromStdString (dir);
-  _new_dir = true;
+  m_current_directory = QString::fromStdString (dir);
+  m_new_dir = true;
 }
 
 void
 octave_qt_link::update_directory ()
 {
-  emit change_directory_signal (_current_directory);
-  _new_dir = false;
+  emit change_directory_signal (m_current_directory);
+  m_new_dir = false;
 }
 
 void
 octave_qt_link::do_execute_command_in_terminal (const std::string& command)
 {
   emit execute_command_in_terminal_signal (QString::fromStdString (command));
 }
 
 void
 octave_qt_link::do_set_workspace (bool top_level, bool debug,
                                   const std::list<workspace_element>& ws,
                                   const bool& update_variable_editor)
 {
   if (! top_level && ! debug)
     return;
 
-  if (_new_dir)
+  if (m_new_dir)
     update_directory ();
 
   QString scopes;
   QStringList symbols;
   QStringList class_names;
   QStringList dimensions;
   QStringList values;
   QIntList complex_flags;
@@ -538,28 +538,16 @@ octave_qt_link::do_set_default_prompts (
   if (m_app_context->start_gui_p ())
     {
       ps1 = ">> ";
       ps2 = "";
       ps4 = "";
     }
 }
 
-void
-octave_qt_link::do_insert_debugger_pointer (const std::string& file, int line)
-{
-  emit insert_debugger_pointer_signal (QString::fromStdString (file), line);
-}
-
-void
-octave_qt_link::do_delete_debugger_pointer (const std::string& file, int line)
-{
-  emit delete_debugger_pointer_signal (QString::fromStdString (file), line);
-}
-
 bool
 octave_qt_link::file_in_path (const std::string& file, const std::string& dir)
 {
 
   bool ok = false;
   bool addpath_option = true;
 
   std::string curr_dir = octave::sys::env::get_current_directory ();
@@ -625,24 +613,36 @@ octave_qt_link::file_in_path (const std:
           break;
         }
     }
 
   return ok;
 }
 
 void
-octave_qt_link::do_show_preferences ()
+octave_qt_link::do_show_preferences (void)
 {
   emit show_preferences_signal ();
 }
 
 void
+octave_qt_link::do_show_doc (const std::string& file)
+{
+  emit show_doc_signal (QString::fromStdString (file));
+}
+
+void
 octave_qt_link::do_openvar (const std::string &expr)
 {
   emit open_variable (QString::fromStdString (expr));
 }
 
 void
-octave_qt_link::do_show_doc (const std::string& file)
+octave_qt_link::do_insert_debugger_pointer (const std::string& file, int line)
 {
-  emit show_doc_signal (QString::fromStdString (file));
+  emit insert_debugger_pointer_signal (QString::fromStdString (file), line);
 }
+
+void
+octave_qt_link::do_delete_debugger_pointer (const std::string& file, int line)
+{
+  emit delete_debugger_pointer_signal (QString::fromStdString (file), line);
+}
diff --git a/libgui/src/octave-qt-link.h b/libgui/src/octave-qt-link.h
--- a/libgui/src/octave-qt-link.h
+++ b/libgui/src/octave-qt-link.h
@@ -51,17 +51,23 @@ typedef QList<int> QIntList;
 class octave_qt_link : public QObject, public octave_link
 {
   Q_OBJECT
 
 public:
 
   octave_qt_link (QWidget *p, octave::gui_application *app_context);
 
-  ~octave_qt_link (void) { }
+  // No copying!
+
+  octave_qt_link (const octave_qt_link&) = delete;
+
+  octave_qt_link& operator = (const octave_qt_link&) = delete;
+
+  ~octave_qt_link (void) = default;
 
   bool do_confirm_shutdown (void);
 
   bool do_copy_image_to_clipboard (const std::string& file);
 
   bool do_edit_file (const std::string& file);
   bool do_prompt_new_edit_file (const std::string& file);
 
@@ -97,16 +103,18 @@ public:
 
   int
   do_debug_cd_or_addpath_error (const std::string& file,
                                 const std::string& dir,
                                 bool addpath_option);
 
   void do_change_directory (const std::string& dir);
 
+  void update_directory (void);
+
   void do_execute_command_in_terminal (const std::string& command);
 
   void do_set_workspace (bool top_level, bool debug,
                          const std::list<workspace_element>& ws,
                          const bool& variable_editor_too = true);
 
   void do_clear_workspace (void);
 
@@ -128,38 +136,34 @@ public:
                                std::string& ps4);
 
   static bool file_in_path (const std::string& file, const std::string& dir);
 
   void do_show_preferences (void);
 
   void do_show_doc (const std::string& file);
 
+  void do_openvar (const std::string &name);
+
+  void shutdown_confirmation (bool sd) { m_shutdown_confirm_result = sd; }
+
   QMutex mutex;
   QWaitCondition waitcondition;
-  void shutdown_confirmation (bool sd) {_shutdown_confirm_result = sd;}
 
-  void update_directory (void);
-
-  void do_openvar (const std::string &name);
 private:
 
-  bool _shutdown_confirm_result;
-
-  octave_qt_link (const octave_qt_link&);
-
-  octave_qt_link& operator = (const octave_qt_link&);
-
   void do_insert_debugger_pointer (const std::string& file, int line);
   void do_delete_debugger_pointer (const std::string& file, int line);
 
   octave::gui_application *m_app_context;
 
-  QString _current_directory;
-  bool    _new_dir;
+  bool m_shutdown_confirm_result;
+
+  QString m_current_directory;
+  bool m_new_dir;
 
 signals:
 
   void copy_image_to_clipboard_signal (const QString& file, bool remove_file);
 
   void edit_file_signal (const QString& file);
 
   void change_directory_signal (const QString& dir);
