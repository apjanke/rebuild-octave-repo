# HG changeset patch
# User jwe
# Date 980979355 0
#      Wed Jan 31 22:15:55 2001 +0000
# Node ID 7c8e3c42ed04a411db1e85a209bc419ad8964b35
# Parent  243148f6c91c81d5cf1f392e52a59a35716d1b07
[project @ 2001-01-31 22:15:51 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,17 @@
+2001-01-31  Mumit Khan  <khan@nanotech.wisc.edu>
+
+	* Makeconf.in (%.d : %.cc): Strip the directory portion of the
+	target.
+	(%.d : %.c): Likewise.
+
+	* aclocal.m4 (OCTAVE_CXX_ISO_COMPLIANT_LIBRARY): New macro.
+	* configure.in: Use it.
+
 2001-01-29  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Makeconf.in (do-subst-config-vals): Substitute
 	OCTAVE_CONF_CANONICAL_HOST_TYPE here too.
 	* octave-bug.in: Substitute OCTAVE_CONF_CANONICAL_HOST_TYPE, not
 	OCTAVE_CANONICAL_HOST_TYPE.
 
 2000-12-09  John W. Eaton  <jwe@bevo.che.wisc.edu>
diff --git a/Makeconf.in b/Makeconf.in
--- a/Makeconf.in
+++ b/Makeconf.in
@@ -296,26 +296,28 @@ pic/%.o : %.cc
 	$(CXX) -c $(CPPFLAGS) $(CXXPICFLAG) $(ALL_CXXFLAGS) $< -o $@
 
 # Here is a rule for generating dependencies for .cc files:
 
 %.d : %.cc
 	@echo making $@ from $<
 	@rm -f $@
 	@$(CXX) -M $(CPPFLAGS) $(ALL_CXXFLAGS) $< | \
-	  sed -e 's,$*\.o,pic/& & $@,g' > $@.tmp
+	  sed -e 's,^[^:]*/\(.*\.o\):,\1:,' \
+	      -e 's,$*\.o,pic/& & $@,g' > $@.tmp
 	@mv $@.tmp $@
 
 # And one for .c files.too:
 
 %.d : %.c
 	@echo making $@ from $<
 	@rm -f $@
 	@$(CC) -M $(CPPFLAGS) $(ALL_CFLAGS) $< | \
-	  sed -e 's,$*\.o,pic/& & $@,g' > $@.tmp
+	  sed -e 's,^[^:]*/\(.*\.o\):,\1:,' \
+	      -e 's,$*\.o,pic/& & $@,g' > $@.tmp
 	@mv $@.tmp $@
 
 define do-subdir-for-command
 echo making $@ in $d; cd $d; $(MAKE) $@; cd ..;
 endef
 
 define subdir-for-command
 $(foreach d, $(SUBDIRS), $(do-subdir-for-command))
diff --git a/aclocal.m4 b/aclocal.m4
--- a/aclocal.m4
+++ b/aclocal.m4
@@ -926,8 +926,45 @@ EOF
     fi
     AC_LANG_RESTORE
   ])
   AC_MSG_RESULT($octave_cv_cxx_prepends_underscore)
   if test $octave_cv_cxx_prepends_underscore = yes; then
     AC_DEFINE(CXX_PREPENDS_UNDERSCORE)
   fi
 ])
+dnl
+dnl See if the C++ library is ISO compliant.
+dnl FIXME: This is obviously very simplistic, and trivially fooled.
+dnl
+dnl OCTAVE_CXX_ISO_COMPLIANT_LIBRARY
+AC_DEFUN(OCTAVE_CXX_ISO_COMPLIANT_LIBRARY, [
+  AC_REQUIRE([AC_PROG_CXX])
+  AC_MSG_CHECKING([if C++ library is ISO compliant])
+  AC_CACHE_VAL(octave_cv_cxx_iso_compliant_library, [
+    AC_LANG_SAVE
+    AC_LANG_CPLUSPLUS
+    rm -f conftest.h
+    for inc in algorithm bitset cassert cctype cerrno cfloat ciso646 \
+	climits clocale cmath complex csetjmp csignal cstdarg cstddef \
+	cstdio cstdlib cstring ctime cwchar cwctype deque exception \
+	fstream functional iomanip ios iosfwd iostream istream iterator \
+	limits list locale map memory new numeric ostream queue set \
+	sstream stack stdexcept streambuf string strstream typeinfo \
+	utility valarray vector; do
+      echo "#include <$inc>" >> conftest.h
+    done
+    AC_TRY_LINK([#include "conftest.h"], [
+        std::bitset<50> flags;
+        flags.set();
+        int digits = std::numeric_limits<unsigned long>::digits;
+        digits = 0;
+      ],
+      octave_cv_cxx_iso_compliant_library=yes,
+      octave_cv_cxx_iso_compliant_library=no
+    )
+    AC_LANG_RESTORE
+  ])
+  AC_MSG_RESULT($octave_cv_cxx_iso_compliant_library)
+  if test $octave_cv_cxx_iso_compliant_library = yes; then
+    AC_DEFINE(CXX_ISO_COMPLIANT_LIBRARY)
+  fi
+])
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -16,17 +16,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ### for more details.
 ### 
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA. 
 
-AC_REVISION($Revision: 1.337 $)
+AC_REVISION($Revision: 1.338 $)
 AC_PREREQ(2.9)
 AC_INIT(src/octave.cc)
 AC_CONFIG_HEADER(config.h)
 
 AC_DEFINE(OCTAVE_SOURCE, 1)
 
 OCTAVE_HOST_TYPE
 
@@ -194,16 +194,17 @@ esac
 
 CXX_VERSION=
 if test -n "$gxx_version"; then
   CXX_VERSION="$gxx_version"
 fi
 AC_SUBST(CXX_VERSION)
 
 OCTAVE_CXX_NEW_FRIEND_TEMPLATE_DECL
+OCTAVE_CXX_ISO_COMPLIANT_LIBRARY
 
 ### See which C compiler to use (we expect to find gcc).
 
 EXTERN_CFLAGS="$CFLAGS"
 
 AC_PROG_CC
 AC_PROG_CPP
 AC_PROG_GCC_TRADITIONAL
diff --git a/liboctave/CColVector.cc b/liboctave/CColVector.cc
--- a/liboctave/CColVector.cc
+++ b/liboctave/CColVector.cc
@@ -58,17 +58,17 @@ ComplexColumnVector::ComplexColumnVector
 }
 
 bool
 ComplexColumnVector::operator == (const ComplexColumnVector& a) const
 {
   int len = length ();
   if (len != a.length ())
     return 0;
-  return equal (data (), a.data (), len);
+  return mx_inline_equal (data (), a.data (), len);
 }
 
 bool
 ComplexColumnVector::operator != (const ComplexColumnVector& a) const
 {
   return !(*this == a);
 }
 
@@ -183,32 +183,32 @@ ComplexColumnVector::stack (const Comple
   retval.insert (a, nr_insert);
   return retval;
 }
 
 ComplexRowVector
 ComplexColumnVector::hermitian (void) const
 {
   int len = length ();
-  return ComplexRowVector (conj_dup (data (), len), len);
+  return ComplexRowVector (mx_inline_conj_dup (data (), len), len);
 }
 
 ComplexRowVector
 ComplexColumnVector::transpose (void) const
 {
   return ComplexRowVector (*this);
 }
 
 ComplexColumnVector
 conj (const ComplexColumnVector& a)
 {
   int a_len = a.length ();
   ComplexColumnVector retval;
   if (a_len > 0)
-    retval = ComplexColumnVector (conj_dup (a.data (), a_len), a_len);
+    retval = ComplexColumnVector (mx_inline_conj_dup (a.data (), a_len), a_len);
   return retval;
 }
 
 // resize is the destructive equivalent for this one
 
 ComplexColumnVector
 ComplexColumnVector::extract (int r1, int r2) const
 {
@@ -239,17 +239,17 @@ ComplexColumnVector::operator += (const 
       return *this;
     }
 
   if (len == 0)
     return *this;
 
   Complex *d = fortran_vec (); // Ensures only one reference to my privates!
 
-  add2 (d, a.data (), len);
+  mx_inline_add2 (d, a.data (), len);
   return *this;
 }
 
 ComplexColumnVector&
 ComplexColumnVector::operator -= (const ColumnVector& a)
 {
   int len = length ();
 
@@ -261,17 +261,17 @@ ComplexColumnVector::operator -= (const 
       return *this;
     }
 
   if (len == 0)
     return *this;
 
   Complex *d = fortran_vec (); // Ensures only one reference to my privates!
 
-  subtract2 (d, a.data (), len);
+  mx_inline_subtract2 (d, a.data (), len);
   return *this;
 }
 
 // matrix by column vector -> column vector operations
 
 ComplexColumnVector
 operator * (const ComplexMatrix& m, const ColumnVector& a)
 {
diff --git a/liboctave/CDiagMatrix.cc b/liboctave/CDiagMatrix.cc
--- a/liboctave/CDiagMatrix.cc
+++ b/liboctave/CDiagMatrix.cc
@@ -46,17 +46,17 @@ ComplexDiagMatrix::ComplexDiagMatrix (co
 }
 
 bool
 ComplexDiagMatrix::operator == (const ComplexDiagMatrix& a) const
 {
   if (rows () != a.rows () || cols () != a.cols ())
     return 0;
 
-  return equal (data (), a.data (), length ());
+  return mx_inline_equal (data (), a.data (), length ());
 }
 
 bool
 ComplexDiagMatrix::operator != (const ComplexDiagMatrix& a) const
 {
   return !(*this == a);
 }
 
@@ -232,32 +232,34 @@ ComplexDiagMatrix::fill (const ComplexRo
     elem (i+beg, i+beg) = a.elem (i);
 
   return *this;
 }
 
 ComplexDiagMatrix
 ComplexDiagMatrix::hermitian (void) const
 {
-  return ComplexDiagMatrix (conj_dup (data (), length ()), cols (), rows ());
+  return ComplexDiagMatrix (mx_inline_conj_dup (data (), length ()),
+			    cols (), rows ());
 }
 
 ComplexDiagMatrix
 ComplexDiagMatrix::transpose (void) const
 {
-  return ComplexDiagMatrix (dup (data (), length ()), cols (), rows ());
+  return ComplexDiagMatrix (mx_inline_dup (data (), length ()),
+			    cols (), rows ());
 }
 
 ComplexDiagMatrix
 conj (const ComplexDiagMatrix& a)
 {
   ComplexDiagMatrix retval;
   int a_len = a.length ();
   if (a_len > 0)
-    retval = ComplexDiagMatrix (conj_dup (a.data (), a_len),
+    retval = ComplexDiagMatrix (mx_inline_conj_dup (a.data (), a_len),
 				a.rows (), a.cols ());
   return retval;
 }
 
 // resize is the destructive analog for this one
 
 ComplexMatrix
 ComplexDiagMatrix::extract (int r1, int c1, int r2, int c2) const
@@ -409,17 +411,17 @@ ComplexDiagMatrix::operator += (const Di
       return *this;
     }
 
   if (r == 0 || c == 0)
     return *this;
 
   Complex *d = fortran_vec (); // Ensures only one reference to my privates!
 
-  add2 (d, a.data (), length ());
+  mx_inline_add2 (d, a.data (), length ());
   return *this;
 }
 
 ComplexDiagMatrix
 operator * (const ComplexDiagMatrix& a, const DiagMatrix& b)
 {
   int a_nr = a.rows ();
   int a_nc = a.cols ();
diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -189,17 +189,17 @@ ComplexMatrix::ComplexMatrix (const char
 }
 
 bool
 ComplexMatrix::operator == (const ComplexMatrix& a) const
 {
   if (rows () != a.rows () || cols () != a.cols ())
     return false;
 
-  return equal (data (), a.data (), length ());
+  return mx_inline_equal (data (), a.data (), length ());
 }
 
 bool
 ComplexMatrix::operator != (const ComplexMatrix& a) const
 {
   return !(*this == a);
 }
 
@@ -737,18 +737,18 @@ ComplexMatrix::hermitian (void) const
 }
 
 ComplexMatrix
 conj (const ComplexMatrix& a)
 {
   int a_len = a.length ();
   ComplexMatrix retval;
   if (a_len > 0)
-    retval = ComplexMatrix (conj_dup (a.data (), a_len), a.rows (),
-			    a.cols ());
+    retval = ComplexMatrix (mx_inline_conj_dup (a.data (), a_len),
+			    a.rows (), a.cols ());
   return retval;
 }
 
 // resize is the destructive equivalent for this one
 
 ComplexMatrix
 ComplexMatrix::extract (int r1, int c1, int r2, int c2) const
 {
@@ -2018,17 +2018,17 @@ ComplexMatrix::operator += (const Matrix
       return *this;
     }
 
   if (nr == 0 || nc == 0)
     return *this;
 
   Complex *d = fortran_vec (); // Ensures only one reference to my privates!
 
-  add2 (d, a.data (), length ());
+  mx_inline_add2 (d, a.data (), length ());
   return *this;
 }
 
 ComplexMatrix&
 ComplexMatrix::operator -= (const Matrix& a)
 {
   int nr = rows ();
   int nc = cols ();
@@ -2042,17 +2042,17 @@ ComplexMatrix::operator -= (const Matrix
       return *this;
     }
 
   if (nr == 0 || nc == 0)
     return *this;
 
   Complex *d = fortran_vec (); // Ensures only one reference to my privates!
 
-  subtract2 (d, a.data (), length ());
+  mx_inline_subtract2 (d, a.data (), length ());
   return *this;
 }
 
 // unary operations
 
 boolMatrix
 ComplexMatrix::operator ! (void) const
 {
diff --git a/liboctave/CRowVector.cc b/liboctave/CRowVector.cc
--- a/liboctave/CRowVector.cc
+++ b/liboctave/CRowVector.cc
@@ -58,17 +58,17 @@ ComplexRowVector::ComplexRowVector (cons
 }
 
 bool
 ComplexRowVector::operator == (const ComplexRowVector& a) const
 {
   int len = length ();
   if (len != a.length ())
     return 0;
-  return equal (data (), a.data (), len);
+  return mx_inline_equal (data (), a.data (), len);
 }
 
 bool
 ComplexRowVector::operator != (const ComplexRowVector& a) const
 {
   return !(*this == a);
 }
 
@@ -183,32 +183,32 @@ ComplexRowVector::append (const ComplexR
   retval.insert (a, nc_insert);
   return retval;
 }
 
 ComplexColumnVector
 ComplexRowVector::hermitian (void) const
 {
   int len = length ();
-  return ComplexColumnVector (conj_dup (data (), len), len);
+  return ComplexColumnVector (mx_inline_conj_dup (data (), len), len);
 }
 
 ComplexColumnVector
 ComplexRowVector::transpose (void) const
 {
   return ComplexColumnVector (*this);
 }
 
 ComplexRowVector
 conj (const ComplexRowVector& a)
 {
   int a_len = a.length ();
   ComplexRowVector retval;
   if (a_len > 0)
-    retval = ComplexRowVector (conj_dup (a.data (), a_len), a_len);
+    retval = ComplexRowVector (mx_inline_conj_dup (a.data (), a_len), a_len);
   return retval;
 }
 
 // resize is the destructive equivalent for this one
 
 ComplexRowVector
 ComplexRowVector::extract (int c1, int c2) const
 {
@@ -239,17 +239,17 @@ ComplexRowVector::operator += (const Row
       return *this;
     }
 
   if (len == 0)
     return *this;
 
   Complex *d = fortran_vec (); // Ensures only one reference to my privates!
 
-  add2 (d, a.data (), len);
+  mx_inline_add2 (d, a.data (), len);
   return *this;
 }
 
 ComplexRowVector&
 ComplexRowVector::operator -= (const RowVector& a)
 {
   int len = length ();
 
@@ -261,17 +261,17 @@ ComplexRowVector::operator -= (const Row
       return *this;
     }
 
   if (len == 0)
     return *this;
 
   Complex *d = fortran_vec (); // Ensures only one reference to my privates!
 
-  subtract2 (d, a.data (), len);
+  mx_inline_subtract2 (d, a.data (), len);
   return *this;
 }
 
 // row vector by matrix -> row vector
 
 ComplexRowVector
 operator * (const ComplexRowVector& v, const ComplexMatrix& a)
 {
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,16 @@
+2001-01-31  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* file-ops.cc, help.cc, load-save.cc, pr-output.cc, utils.cc:
+	Add std:: namespace qualifier as needed.
+
+	* mx-inlines.cc: Rename all functions with mx_inline_ prefix.
+	Change all uses to match.
+
 2001-01-29  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* lo-cutils.c: Don't delcare strptime.
 
 2001-01-02  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* CMatrix.cc (operator * (const ComplexMatrix&, const ComplexMatrix&):
 	Return correct size result for empty matrix case.
diff --git a/liboctave/boolMatrix.cc b/liboctave/boolMatrix.cc
--- a/liboctave/boolMatrix.cc
+++ b/liboctave/boolMatrix.cc
@@ -39,17 +39,17 @@ Software Foundation, 59 Temple Place - S
 // boolMatrix class.
 
 bool
 boolMatrix::operator == (const boolMatrix& a) const
 {
   if (rows () != a.rows () || cols () != a.cols ())
     return 0;
 
-  return equal (data (), a.data (), length ());
+  return mx_inline_equal (data (), a.data (), length ());
 }
 
 bool
 boolMatrix::operator != (const boolMatrix& a) const
 {
   return !(*this == a);
 }
 
diff --git a/liboctave/chMatrix.cc b/liboctave/chMatrix.cc
--- a/liboctave/chMatrix.cc
+++ b/liboctave/chMatrix.cc
@@ -88,17 +88,17 @@ charMatrix::charMatrix (const string_vec
 }
 
 bool
 charMatrix::operator == (const charMatrix& a) const
 {
   if (rows () != a.rows () || cols () != a.cols ())
     return 0;
 
-  return equal (data (), a.data (), length ());
+  return mx_inline_equal (data (), a.data (), length ());
 }
 
 bool
 charMatrix::operator != (const charMatrix& a) const
 {
   return !(*this == a);
 }
 
diff --git a/liboctave/dColVector.cc b/liboctave/dColVector.cc
--- a/liboctave/dColVector.cc
+++ b/liboctave/dColVector.cc
@@ -51,17 +51,17 @@ extern "C"
 // Column Vector class.
 
 bool
 ColumnVector::operator == (const ColumnVector& a) const
 {
   int len = length ();
   if (len != a.length ())
     return 0;
-  return equal (data (), a.data (), len);
+  return mx_inline_equal (data (), a.data (), len);
 }
 
 bool
 ColumnVector::operator != (const ColumnVector& a) const
 {
   return !(*this == a);
 }
 
@@ -127,27 +127,27 @@ ColumnVector::transpose (void) const
 }
 
 ColumnVector
 real (const ComplexColumnVector& a)
 {
   int a_len = a.length ();
   ColumnVector retval;
   if (a_len > 0)
-    retval = ColumnVector (real_dup (a.data (), a_len), a_len);
+    retval = ColumnVector (mx_inline_real_dup (a.data (), a_len), a_len);
   return retval;
 }
 
 ColumnVector
 imag (const ComplexColumnVector& a)
 {
   int a_len = a.length ();
   ColumnVector retval;
   if (a_len > 0)
-    retval = ColumnVector (imag_dup (a.data (), a_len), a_len);
+    retval = ColumnVector (mx_inline_imag_dup (a.data (), a_len), a_len);
   return retval;
 }
 
 // resize is the destructive equivalent for this one
 
 ColumnVector
 ColumnVector::extract (int r1, int r2) const
 {
diff --git a/liboctave/dDiagMatrix.cc b/liboctave/dDiagMatrix.cc
--- a/liboctave/dDiagMatrix.cc
+++ b/liboctave/dDiagMatrix.cc
@@ -39,17 +39,17 @@ Software Foundation, 59 Temple Place - S
 // Diagonal Matrix class.
 
 bool
 DiagMatrix::operator == (const DiagMatrix& a) const
 {
   if (rows () != a.rows () || cols () != a.cols ())
     return 0;
 
-  return equal (data (), a.data (), length ());
+  return mx_inline_equal (data (), a.data (), length ());
 }
 
 bool
 DiagMatrix::operator != (const DiagMatrix& a) const
 {
   return !(*this == a);
 }
 
@@ -138,37 +138,37 @@ DiagMatrix::fill (const RowVector& a, in
     elem (i+beg, i+beg) = a.elem (i);
 
   return *this;
 }
 
 DiagMatrix
 DiagMatrix::transpose (void) const
 {
-  return DiagMatrix (dup (data (), length ()), cols (), rows ());
+  return DiagMatrix (mx_inline_dup (data (), length ()), cols (), rows ());
 }
 
 DiagMatrix
 real (const ComplexDiagMatrix& a)
 {
   DiagMatrix retval;
   int a_len = a.length ();
   if (a_len > 0)
-    retval = DiagMatrix (real_dup (a.data (), a_len), a.rows (),
+    retval = DiagMatrix (mx_inline_real_dup (a.data (), a_len), a.rows (),
 			 a.cols ());
   return retval;
 }
 
 DiagMatrix
 imag (const ComplexDiagMatrix& a)
 {
   DiagMatrix retval;
   int a_len = a.length ();
   if (a_len > 0)
-    retval = DiagMatrix (imag_dup (a.data (), a_len), a.rows (),
+    retval = DiagMatrix (mx_inline_imag_dup (a.data (), a_len), a.rows (),
 			 a.cols ());
   return retval;
 }
 
 Matrix
 DiagMatrix::extract (int r1, int c1, int r2, int c2) const
 {
   if (r1 > r2) { int tmp = r1; r1 = r2; r2 = tmp; }
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -153,17 +153,17 @@ Matrix::Matrix (const charMatrix& a)
 }
 
 bool
 Matrix::operator == (const Matrix& a) const
 {
   if (rows () != a.rows () || cols () != a.cols ())
     return false;
 
-  return equal (data (), a.data (), length ());
+  return mx_inline_equal (data (), a.data (), length ());
 }
 
 bool
 Matrix::operator != (const Matrix& a) const
 {
   return !(*this == a);
 }
 
@@ -426,27 +426,29 @@ Matrix::stack (const DiagMatrix& a) cons
 }
 
 Matrix
 real (const ComplexMatrix& a)
 {
   int a_len = a.length ();
   Matrix retval;
   if (a_len > 0)
-    retval = Matrix (real_dup (a.data (), a_len), a.rows (), a.cols ());
+    retval = Matrix (mx_inline_real_dup (a.data (), a_len),
+		     a.rows (), a.cols ());
   return retval;
 }
 
 Matrix
 imag (const ComplexMatrix& a)
 {
   int a_len = a.length ();
   Matrix retval;
   if (a_len > 0)
-    retval = Matrix (imag_dup (a.data (), a_len), a.rows (), a.cols ());
+    retval = Matrix (mx_inline_imag_dup (a.data (), a_len),
+		     a.rows (), a.cols ());
   return retval;
 }
 
 Matrix
 Matrix::extract (int r1, int c1, int r2, int c2) const
 {
   if (r1 > r2) { int tmp = r1; r1 = r2; r2 = tmp; }
   if (c1 > c2) { int tmp = c1; c1 = c2; c2 = tmp; }
diff --git a/liboctave/dRowVector.cc b/liboctave/dRowVector.cc
--- a/liboctave/dRowVector.cc
+++ b/liboctave/dRowVector.cc
@@ -54,17 +54,17 @@ extern "C"
 // Row Vector class.
 
 bool
 RowVector::operator == (const RowVector& a) const
 {
   int len = length ();
   if (len != a.length ())
     return 0;
-  return equal (data (), a.data (), len);
+  return mx_inline_equal (data (), a.data (), len);
 }
 
 bool
 RowVector::operator != (const RowVector& a) const
 {
   return !(*this == a);
 }
 
@@ -130,27 +130,27 @@ RowVector::transpose (void) const
 }
 
 RowVector
 real (const ComplexRowVector& a)
 {
   int a_len = a.length ();
   RowVector retval;
   if (a_len > 0)
-    retval = RowVector (real_dup (a.data (), a_len), a_len);
+    retval = RowVector (mx_inline_real_dup (a.data (), a_len), a_len);
   return retval;
 }
 
 RowVector
 imag (const ComplexRowVector& a)
 {
   int a_len = a.length ();
   RowVector retval;
   if (a_len > 0)
-    retval = RowVector (imag_dup (a.data (), a_len), a_len);
+    retval = RowVector (mx_inline_imag_dup (a.data (), a_len), a_len);
   return retval;
 }
 
 RowVector
 RowVector::extract (int c1, int c2) const
 {
   if (c1 > c2) { int tmp = c1; c1 = c2; c2 = tmp; }
 
diff --git a/liboctave/file-ops.cc b/liboctave/file-ops.cc
--- a/liboctave/file-ops.cc
+++ b/liboctave/file-ops.cc
@@ -200,17 +200,17 @@ file_ops::readlink (const std::string& p
   if (status < 0)
     {
       using namespace std;
       msg = ::strerror (errno);
     }
   else
     {
       buf[status] = '\0';
-      result = string (buf);
+      result = std::string (buf);
       status = 0;
     }
 #else
   msg = NOT_SUPPORTED ("rename");
 #endif
 
   return status;
 }
diff --git a/liboctave/mx-inlines.cc b/liboctave/mx-inlines.cc
--- a/liboctave/mx-inlines.cc
+++ b/liboctave/mx-inlines.cc
@@ -31,164 +31,164 @@ Software Foundation, 59 Temple Place - S
   template <class R, class V, class S> \
   inline void \
   F ## _vs (R *r, const V *v, size_t n, S s) \
   { \
     for (size_t i = 0; i < n; i++) \
       r[i] = v[i] OP s; \
   }
 
-VS_OP_FCN (add,      +)
-VS_OP_FCN (subtract, -)
-VS_OP_FCN (multiply, *)
-VS_OP_FCN (divide,   /)
+VS_OP_FCN (mx_inline_add,      +)
+VS_OP_FCN (mx_inline_subtract, -)
+VS_OP_FCN (mx_inline_multiply, *)
+VS_OP_FCN (mx_inline_divide,   /)
 
 #define VS_OP(F, OP, R, V, S) \
   static inline R * \
   F (const V *v, size_t n, S s) \
   { \
     R *r = 0; \
     if (n > 0) \
       { \
 	r = new R [n]; \
 	F ## _vs (r, v, n, s); \
       } \
     return r; \
   }
 
 #define VS_OPS(R, V, S) \
-  VS_OP (add,      +, R, V, S) \
-  VS_OP (subtract, -, R, V, S) \
-  VS_OP (multiply, *, R, V, S) \
-  VS_OP (divide,   /, R, V, S)
+  VS_OP (mx_inline_add,      +, R, V, S) \
+  VS_OP (mx_inline_subtract, -, R, V, S) \
+  VS_OP (mx_inline_multiply, *, R, V, S) \
+  VS_OP (mx_inline_divide,   /, R, V, S)
 
 VS_OPS (double,  double,  double)
 VS_OPS (Complex, double,  Complex)
 VS_OPS (Complex, Complex, double)
 VS_OPS (Complex, Complex, Complex)
 
 #define SV_OP_FCN(F, OP) \
   template <class R, class S, class V> \
   inline void \
   F ## _sv (R *r, S s, const V *v, size_t n) \
   { \
     for (size_t i = 0; i < n; i++) \
       r[i] = s OP v[i]; \
   } \
 
-SV_OP_FCN (add,      +)
-SV_OP_FCN (subtract, -)
-SV_OP_FCN (multiply, *)
-SV_OP_FCN (divide,   /)
+SV_OP_FCN (mx_inline_add,      +)
+SV_OP_FCN (mx_inline_subtract, -)
+SV_OP_FCN (mx_inline_multiply, *)
+SV_OP_FCN (mx_inline_divide,   /)
 
 #define SV_OP(F, OP, R, S, V) \
   static inline R * \
   F (S s, const V *v, size_t n) \
   { \
     R *r = 0; \
     if (n > 0) \
       { \
 	r = new R [n]; \
         F ## _sv (r, s, v, n); \
       } \
     return r; \
   }
 
 #define SV_OPS(R, S, V) \
-  SV_OP (add,      +, R, S, V) \
-  SV_OP (subtract, -, R, S, V) \
-  SV_OP (multiply, *, R, S, V) \
-  SV_OP (divide,   /, R, S, V)
+  SV_OP (mx_inline_add,      +, R, S, V) \
+  SV_OP (mx_inline_subtract, -, R, S, V) \
+  SV_OP (mx_inline_multiply, *, R, S, V) \
+  SV_OP (mx_inline_divide,   /, R, S, V)
 
 SV_OPS (double,  double,  double)
 SV_OPS (Complex, double,  Complex)
 SV_OPS (Complex, Complex, double)
 SV_OPS (Complex, Complex, Complex)
 
 #define VV_OP_FCN(F, OP) \
   template <class R, class T1, class T2> \
   inline void \
   F ## _vv (R *r, const T1 *v1, const T2 *v2, size_t n) \
   { \
     for (size_t i = 0; i < n; i++) \
       r[i] = v1[i] OP v2[i]; \
   } \
 
-VV_OP_FCN (add,      +)
-VV_OP_FCN (subtract, -)
-VV_OP_FCN (multiply, *)
-VV_OP_FCN (divide,   /)
+VV_OP_FCN (mx_inline_add,      +)
+VV_OP_FCN (mx_inline_subtract, -)
+VV_OP_FCN (mx_inline_multiply, *)
+VV_OP_FCN (mx_inline_divide,   /)
 
 #define VV_OP(F, OP, R, T1, T2) \
   static inline R * \
   F (const T1 *v1, const T2 *v2, size_t n) \
   { \
     R *r = 0; \
     if (n > 0) \
       { \
 	r = new R [n]; \
 	F ## _vv (r, v1, v2, n); \
       } \
     return r; \
   }
 
 #define VV_OPS(R, T1, T2) \
-  VV_OP (add,      +, R, T1, T2) \
-  VV_OP (subtract, -, R, T1, T2) \
-  VV_OP (multiply, *, R, T1, T2) \
-  VV_OP (divide,   /, R, T1, T2)
+  VV_OP (mx_inline_add,      +, R, T1, T2) \
+  VV_OP (mx_inline_subtract, -, R, T1, T2) \
+  VV_OP (mx_inline_multiply, *, R, T1, T2) \
+  VV_OP (mx_inline_divide,   /, R, T1, T2)
 
 VV_OPS (double,  double,  double)
 VV_OPS (Complex, double,  Complex)
 VV_OPS (Complex, Complex, double)
 VV_OPS (Complex, Complex, Complex)
 
 #define VS_OP2(F, OP, V, S) \
   static inline V * \
   F (V *v, size_t n, S s) \
   { \
     for (size_t i = 0; i < n; i++) \
       v[i] OP s; \
     return v; \
   }
 
 #define VS_OP2S(V, S) \
-  VS_OP2 (add2,      +=, V, S) \
-  VS_OP2 (subtract2, -=, V, S) \
-  VS_OP2 (multiply2, *=, V, S) \
-  VS_OP2 (divide2,   /=, V, S) \
-  VS_OP2 (copy,       =, V, S)
+  VS_OP2 (mx_inline_add2,      +=, V, S) \
+  VS_OP2 (mx_inline_subtract2, -=, V, S) \
+  VS_OP2 (mx_inline_multiply2, *=, V, S) \
+  VS_OP2 (mx_inline_divide2,   /=, V, S) \
+  VS_OP2 (mx_inline_copy,       =, V, S)
 
 VS_OP2S (double,  double)
 VS_OP2S (Complex, double)
 VS_OP2S (Complex, Complex)
 
 #define VV_OP2(F, OP, T1, T2) \
   static inline T1 * \
   F (T1 *v1, const T2 *v2, size_t n) \
   { \
     for (size_t i = 0; i < n; i++) \
       v1[i] OP v2[i]; \
     return v1; \
   }
 
 #define VV_OP2S(T1, T2) \
-  VV_OP2 (add2,      +=, T1, T2) \
-  VV_OP2 (subtract2, -=, T1, T2) \
-  VV_OP2 (multiply2, *=, T1, T2) \
-  VV_OP2 (divide2,   /=, T1, T2) \
-  VV_OP2 (copy,       =, T1, T2)
+  VV_OP2 (mx_inline_add2,      +=, T1, T2) \
+  VV_OP2 (mx_inline_subtract2, -=, T1, T2) \
+  VV_OP2 (mx_inline_multiply2, *=, T1, T2) \
+  VV_OP2 (mx_inline_divide2,   /=, T1, T2) \
+  VV_OP2 (mx_inline_copy,       =, T1, T2)
 
 VV_OP2S (double,  double)
 VV_OP2S (Complex, double)
 VV_OP2S (Complex, Complex)
 
 #define OP_EQ_FCN(T1, T2) \
   static inline bool \
-  equal (const T1 *x, const T2 *y, size_t n) \
+  mx_inline_equal (const T1 *x, const T2 *y, size_t n) \
   { \
     for (size_t i = 0; i < n; i++) \
       if (x[i] != y[i]) \
 	return false; \
     return true; \
   }
 
 OP_EQ_FCN (bool,    bool)
@@ -205,32 +205,32 @@ OP_EQ_FCN (Complex, Complex)
       { \
 	r = new R [n]; \
 	for (size_t i = 0; i < n; i++) \
 	  r[i] = OP (x[i]); \
       } \
     return r; \
   }
 
-OP_DUP_FCN (, dup, double,  double)
-OP_DUP_FCN (, dup, Complex, Complex)
+OP_DUP_FCN (, mx_inline_dup, double,  double)
+OP_DUP_FCN (, mx_inline_dup, Complex, Complex)
 
 // These should really return a bool *.  Also, they should probably be
 // in with a collection of other element-by-element boolean ops.
-OP_DUP_FCN (0.0 ==, xnot, double, double)
-OP_DUP_FCN (0.0 ==, xnot, double, Complex)
+OP_DUP_FCN (0.0 ==, mx_inline_not, double, double)
+OP_DUP_FCN (0.0 ==, mx_inline_not, double, Complex)
 
-OP_DUP_FCN (, make_complex, Complex, double)
+OP_DUP_FCN (, mx_inline_make_complex, Complex, double)
 
-OP_DUP_FCN (-, change_sign, double,  double)
-OP_DUP_FCN (-, change_sign, Complex, Complex)
+OP_DUP_FCN (-, mx_inline_change_sign, double,  double)
+OP_DUP_FCN (-, mx_inline_change_sign, Complex, Complex)
 
-OP_DUP_FCN (real, real_dup, double,  Complex)
-OP_DUP_FCN (imag, imag_dup, double,  Complex)
-OP_DUP_FCN (conj, conj_dup, Complex, Complex)
+OP_DUP_FCN (real, mx_inline_real_dup, double,  Complex)
+OP_DUP_FCN (imag, mx_inline_imag_dup, double,  Complex)
+OP_DUP_FCN (conj, mx_inline_conj_dup, Complex, Complex)
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/mx-op-defs.h b/liboctave/mx-op-defs.h
--- a/liboctave/mx-op-defs.h
+++ b/liboctave/mx-op-defs.h
@@ -160,20 +160,20 @@ class boolMatrix;
  \
     if (nr > 0 && nc > 0) \
       F ## _vs (r.fortran_vec (), m.data (), nr * nc, s); \
  \
     return r; \
   }
 
 #define MS_BIN_OPS(R, M, S) \
-  MS_BIN_OP (R, operator +, M, S, add) \
-  MS_BIN_OP (R, operator -, M, S, subtract) \
-  MS_BIN_OP (R, operator *, M, S, multiply) \
-  MS_BIN_OP (R, operator /, M, S, divide)
+  MS_BIN_OP (R, operator +, M, S, mx_inline_add) \
+  MS_BIN_OP (R, operator -, M, S, mx_inline_subtract) \
+  MS_BIN_OP (R, operator *, M, S, mx_inline_multiply) \
+  MS_BIN_OP (R, operator /, M, S, mx_inline_divide)
 
 #define MS_CMP_OP_DECLS(M, S) \
   CMP_OP_DECL (mx_el_lt, M, S); \
   CMP_OP_DECL (mx_el_le, M, S); \
   CMP_OP_DECL (mx_el_ge, M, S); \
   CMP_OP_DECL (mx_el_gt, M, S); \
   CMP_OP_DECL (mx_el_eq, M, S); \
   CMP_OP_DECL (mx_el_ne, M, S);
@@ -262,20 +262,20 @@ class boolMatrix;
  \
     if (nr > 0 && nc > 0) \
       F ## _sv (r.fortran_vec (), s, m.data (), nr * nc); \
  \
     return r; \
   }
 
 #define SM_BIN_OPS(R, S, M) \
-  SM_BIN_OP (R, operator +, S, M, add) \
-  SM_BIN_OP (R, operator -, S, M, subtract) \
-  SM_BIN_OP (R, operator *, S, M, multiply) \
-  SM_BIN_OP (R, operator /, S, M, divide)
+  SM_BIN_OP (R, operator +, S, M, mx_inline_add) \
+  SM_BIN_OP (R, operator -, S, M, mx_inline_subtract) \
+  SM_BIN_OP (R, operator *, S, M, mx_inline_multiply) \
+  SM_BIN_OP (R, operator /, S, M, mx_inline_divide)
 
 #define SM_CMP_OP_DECLS(S, M) \
   CMP_OP_DECL (mx_el_lt, S, M); \
   CMP_OP_DECL (mx_el_le, S, M); \
   CMP_OP_DECL (mx_el_ge, S, M); \
   CMP_OP_DECL (mx_el_gt, S, M); \
   CMP_OP_DECL (mx_el_eq, S, M); \
   CMP_OP_DECL (mx_el_ne, S, M);
@@ -374,20 +374,20 @@ class boolMatrix;
 	if (m1_nr > 0 && m1_nc > 0) \
 	  F ## _vv (r.fortran_vec (), m1.data (), m2.data (), m1_nr * m1_nc); \
       } \
  \
     return r; \
   }
 
 #define MM_BIN_OPS(R, M1, M2) \
-  MM_BIN_OP (R, operator +, M1, M2, add) \
-  MM_BIN_OP (R, operator -, M1, M2, subtract) \
-  MM_BIN_OP (R, product,    M1, M2, multiply) \
-  MM_BIN_OP (R, quotient,   M1, M2, divide)
+  MM_BIN_OP (R, operator +, M1, M2, mx_inline_add) \
+  MM_BIN_OP (R, operator -, M1, M2, mx_inline_subtract) \
+  MM_BIN_OP (R, product,    M1, M2, mx_inline_multiply) \
+  MM_BIN_OP (R, quotient,   M1, M2, mx_inline_divide)
 
 #define MM_CMP_OP_DECLS(M1, M2) \
   CMP_OP_DECL (mx_el_lt, M1, M2); \
   CMP_OP_DECL (mx_el_le, M1, M2); \
   CMP_OP_DECL (mx_el_ge, M1, M2); \
   CMP_OP_DECL (mx_el_gt, M1, M2); \
   CMP_OP_DECL (mx_el_eq, M1, M2); \
   CMP_OP_DECL (mx_el_ne, M1, M2);
@@ -743,19 +743,19 @@ operator * (const DM& dm, const M& m) \
 	  F ## _vv (r.fortran_vec (), dm1.data (), dm2.data (), \
 		    dm1_nr * dm2_nc); \
       } \
  \
     return r; \
   }
 
 #define DMDM_BIN_OPS(R, DM1, DM2) \
-  DMDM_BIN_OP (R, operator +, DM1, DM2, add) \
-  DMDM_BIN_OP (R, operator -, DM1, DM2, subtract) \
-  DMDM_BIN_OP (R, product,    DM1, DM2, multiply)
+  DMDM_BIN_OP (R, operator +, DM1, DM2, mx_inline_add) \
+  DMDM_BIN_OP (R, operator -, DM1, DM2, mx_inline_subtract) \
+  DMDM_BIN_OP (R, product,    DM1, DM2, mx_inline_multiply)
 
 #define DMDM_OP_DECLS(R, DM1, DM2) \
   DMDM_BIN_OP_DECLS (R, DM1, DM2)
 
 #endif
 
 /*
 ;;; Local Variables: ***
diff --git a/src/help.cc b/src/help.cc
--- a/src/help.cc
+++ b/src/help.cc
@@ -634,17 +634,17 @@ display_help_text (std::ostream& os, con
       if (filter && filter.is_open ())
 	{
 	  filter << "@macro seealso {args}\n"
 		 << "\n"
 		 << "@noindent\n"
 		 << "See also: \\args\\.\n"
                  << "@end macro\n";
 
-	  filter << msg.substr (pos+1) << endl;
+	  filter << msg.substr (pos+1) << std::endl;
 
 	  int status = filter.close ();
 
 	  std::ifstream tmp_file (tmp_file_name.c_str ());
 
 	  if (WIFEXITED (status) && WEXITSTATUS (status) == 0)
 	    {
 	      int c;
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -2767,17 +2767,17 @@ read_mat5_binary_file_header (std::istre
 	     "but only prepared for version 1", version);
 
   return 0;
 }
 
 // Return TRUE if NAME matches one of the given globbing PATTERNS.
 
 static bool
-matches_patterns (const std::string_vector& patterns, int pat_idx,
+matches_patterns (const string_vector& patterns, int pat_idx,
 		  int num_pat, const std::string& name)
 {
   for (int i = pat_idx; i < num_pat; i++)
     {
       glob_match pattern (patterns[i]);
 
       if (pattern.match (name))
 	return true;
@@ -4076,17 +4076,17 @@ static bool
 save_mat5_binary_element (std::ostream& os,
 			  const octave_value& tc, const std::string& name,
 			  bool mark_as_global, bool save_as_floats) 
 {
   FOUR_BYTE_INT flags=0;
   FOUR_BYTE_INT junk=0;
   FOUR_BYTE_INT nr;
   FOUR_BYTE_INT nc;
-  streampos fixup, contin;
+  std::streampos fixup, contin;
 
   // element type and length
   fixup = os.tellp ();
   write_mat5_tag (os, miMATRIX, 99); // we don't know the real length yet
   
   // array flags subelement
   write_mat5_tag (os, miUINT32, 8);
 
@@ -4226,17 +4226,17 @@ save_mat5_binary_element (std::ostream& 
 
 	write_mat5_tag (os, miINT32, 4);
 	os.write ((char *)&maxfieldnamelength, 4);
 	write_mat5_tag (os, miINT8, fieldcnt*32);
 	 
 	for (i = m.first (); i; m.next (i))
 	  {
 	    // write the name of each element
-	    string tstr = m.key (i);
+	    std::string tstr = m.key (i);
 	    memset (buf, 0, 32);
 	    strncpy (buf, tstr.c_str (), 31); // only 31 char names permitted
 	    os.write (buf, 32);
 	  }
 
 	for (i = m.first (); i; m.next (i))
 	  {
 	    // write the data of each element
@@ -4604,17 +4604,17 @@ save_ascii_data (std::ostream& os, const
 }
 
 bool
 save_ascii_data_for_plotting (std::ostream& os, const octave_value& t,
 			      const std::string& name)
 {
   bool infnan_warned = true;
 
-  save_ascii_data (os, t, name, infnan_warned, true, false, 0);
+  return save_ascii_data (os, t, name, infnan_warned, true, false, 0);
 }
 
 // Save the info from sr on stream os in the format specified by fmt.
 
 static void
 do_save (std::ostream& os, symbol_record *sr, load_save_format fmt,
 	 int save_as_floats, bool& infnan_warned)
 {
@@ -4805,17 +4805,17 @@ write_header (std::ostream& os, load_sav
     break;
 
     default:
       break;
     }
 }
 
 static void
-save_vars (const std::string_vector& argv, int argv_idx, int argc,
+save_vars (const string_vector& argv, int argv_idx, int argc,
 	   std::ostream& os, bool save_builtins, load_save_format fmt,
 	   bool save_as_floats, bool write_header_info)
 {
   if (write_header_info)
     write_header (os, fmt);
 
   if (argv_idx == argc)
     {
@@ -5118,17 +5118,18 @@ the file @file{data} in Octave's binary 
 	// don't insert any statements here!  The brace below must go
 	// with the "else" above!
 	{
 	  std::ofstream file (fname.c_str (), mode);
 	  
 	  if (file)
 	    {
 	      bool write_header_info
-		= ( (file.rdbuf ())->seekoff (0, std::ios::cur) == 0);
+		= ((file.rdbuf ())->seekoff (0, std::ios::cur)
+		   == static_cast<std::streampos> (0));
 	      
 	      save_vars (argv, i, argc, file, save_builtins, format,
 			 save_as_floats, write_header_info);
 	    }
 	  else
 	    {
 	      error ("save: couldn't open output file `%s'", fname.c_str ());
 	      return retval;
@@ -5221,17 +5222,17 @@ default_save_format (void)
       status = -1;
     }
   else
     Vdefault_save_format = s;
 
   return status;
 }
 
-static string
+static std::string
 default_save_header_format (void)
 {
   return
     std::string ("# Created by Octave " OCTAVE_VERSION ", %a %b %d %H:%M:%S %Y %Z <")
     + octave_env::get_user_name ()
     + std::string ("@")
     + octave_env::get_host_name ()
     + std::string (">");
diff --git a/src/pr-output.cc b/src/pr-output.cc
--- a/src/pr-output.cc
+++ b/src/pr-output.cc
@@ -1823,17 +1823,17 @@ returns the formatted output in a string
   if (nargin == 2)
     {
       int fid = octave_stream_list::get_file_number (args (0));
 
       octave_stream os = octave_stream_list::lookup (fid, "fdisp");
 
       if (! error_state)
 	{
-	  ostream *osp = os.output_stream ();
+	  std::ostream *osp = os.output_stream ();
 
 	  if (osp)
 	    args(1).print (*osp);
 	  else
 	    error ("fdisp: stream not open for writing");
 	}
     }
   else
diff --git a/src/pt-pr-code.cc b/src/pt-pr-code.cc
--- a/src/pt-pr-code.cc
+++ b/src/pt-pr-code.cc
@@ -1269,17 +1269,17 @@ tree_print_code::print_parens (const tre
 
 void
 tree_print_code::print_comment_elt (const octave_comment_elt& elt)
 {
   bool printed_something = false;
 
   bool prev_char_was_newline = false;
 
-  string comment = elt.text ();
+  std::string comment = elt.text ();
 
   size_t len = comment.length ();
 
   size_t i = 0;
 
   while (i < len && comment[i++] == '\n')
     ; /* Skip leading new lines. */
   i--;
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -715,21 +715,21 @@ octave_format (std::ostream& os, const c
 
 extern int
 octave_vformat (std::ostream& os, const char *fmt, va_list args)
 {
   int retval = -1;
 
 #if defined (__GNUG__)
 
-  ostrstream buf;
+  std::ostrstream buf;
 
   buf.vform (fmt, args);
 
-  buf << ends;
+  buf << std::ends;
 
   char *s = buf.str ();
 
   os << s;
 
   retval = strlen (s);
 
   delete [] s;
