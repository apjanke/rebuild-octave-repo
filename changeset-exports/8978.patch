# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1236980006 -3600
#      Fri Mar 13 22:33:26 2009 +0100
# Node ID 0a58c4cd1405860ee2b7615e92e8caa6242a6fff
# Parent  f464119ec1656585320380c73de2656170ebd143
optimize element-wise power

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2009-03-13  Jaroslav Hajek  <highegg@gmail.com>
+
+	* xpow.cc (xpow (const NDArray&, double), xpow (const ComplexNDArray&, double),
+	xpow (const FloatNDArray&, float), xpow (const FloatComplexNDArray&,
+	float)): Use xisint for testing ints. Optimize w.r.t int exponents.
+
 2009-03-13  John W. Eaton  <jwe@octave.org>
 
 	* parse.y (maybe_warn_assign_as_truth_value, make_binary_op,
 	maybe_warn_variable_switch_label, maybe_warn_associativity_change): 
 	Print file and line number info if available.
 	* lex.l (gripe_matlab_incompatible): Likewise.
 
 	* error.cc (pr_where): Use octave_call_stack::backtrace to print
diff --git a/src/xpow.cc b/src/xpow.cc
--- a/src/xpow.cc
+++ b/src/xpow.cc
@@ -74,17 +74,17 @@ xisint (double x)
 //                  +---+---+----+----+
 
 // -*- 1 -*-
 octave_value
 xpow (double a, double b)
 {
   double retval;
 
-  if (a < 0.0 && static_cast<int> (b) != b)
+  if (a < 0.0 && ! xisint (b))
     {
       Complex atmp (a);
 
       return std::pow (atmp, b);
     }
   else
     retval = std::pow (a, b);
 
@@ -695,17 +695,17 @@ elem_xpow (double a, const ComplexMatrix
 octave_value
 elem_xpow (const Matrix& a, double b)
 {
   octave_value retval;
 
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.cols ();
 
-  if (static_cast<int> (b) != b && a.any_element_is_negative ())
+  if (! xisint (b) && a.any_element_is_negative ())
     {
       ComplexMatrix result (nr, nc);
 
       for (octave_idx_type j = 0; j < nc; j++)
 	for (octave_idx_type i = 0; i < nr; i++)
 	  {
 	    OCTAVE_QUIT; 
       
@@ -1079,40 +1079,63 @@ elem_xpow (double a, const ComplexNDArra
 }
 
 // -*- 3 -*-
 octave_value
 elem_xpow (const NDArray& a, double b)
 {
   octave_value retval;
 
-  if (static_cast<int> (b) != b && a.any_element_is_negative ())
+  if (! xisint (b))
     {
-      ComplexNDArray result (a.dims ());
-
-      for (octave_idx_type i = 0; i < a.length (); i++)
-	{
-	  OCTAVE_QUIT;
-
-	  Complex atmp (a (i));
-
-	  result(i) = std::pow (atmp, b);
-	}
-
-      retval = result;
+      if (a.any_element_is_negative ())
+        {
+          ComplexNDArray result (a.dims ());
+
+          for (octave_idx_type i = 0; i < a.length (); i++)
+            {
+              OCTAVE_QUIT;
+
+              Complex atmp (a (i));
+
+              result(i) = std::pow (atmp, b);
+            }
+
+          retval = result;
+        }
+      else
+        {
+          NDArray result (a.dims ());
+          for (octave_idx_type i = 0; i < a.length (); i++)
+            {
+              OCTAVE_QUIT;
+              result(i) = std::pow (a(i), b);
+            }
+
+          retval = result;
+        }
     }
   else
     {
       NDArray result (a.dims ());
 
-      for (octave_idx_type i = 0; i < a.length (); i++)
-	{
-	  OCTAVE_QUIT;
-	  result(i) = std::pow (a(i), b);
-	}
+      int ib = static_cast<int> (b);
+      if (ib == 2)
+        {
+          for (octave_idx_type i = 0; i < a.length (); i++)
+            result.xelem (i) = a(i) * a(i);
+        }
+      else
+        {
+          for (octave_idx_type i = 0; i < a.length (); i++)
+            {
+              OCTAVE_QUIT;
+              result(i) = std::pow (a(i), ib);
+            }
+        }
 
       retval = result;
     }
 
   return retval;
 }
 
 // -*- 4 -*-
@@ -1366,17 +1389,17 @@ xisint (float x)
 //                  +---+---+----+----+
 
 // -*- 1 -*-
 octave_value
 xpow (float a, float b)
 {
   float retval;
 
-  if (a < 0.0 && static_cast<int> (b) != b)
+  if (a < 0.0 && ! xisint (b))
     {
       FloatComplex atmp (a);
 
       return std::pow (atmp, b);
     }
   else
     retval = std::pow (a, b);
 
@@ -1974,17 +1997,17 @@ elem_xpow (float a, const FloatComplexMa
 octave_value
 elem_xpow (const FloatMatrix& a, float b)
 {
   octave_value retval;
 
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.cols ();
 
-  if (static_cast<int> (b) != b && a.any_element_is_negative ())
+  if (! xisint (b) && a.any_element_is_negative ())
     {
       FloatComplexMatrix result (nr, nc);
 
       for (octave_idx_type j = 0; j < nc; j++)
 	for (octave_idx_type i = 0; i < nr; i++)
 	  {
 	    OCTAVE_QUIT; 
       
@@ -2358,40 +2381,63 @@ elem_xpow (float a, const FloatComplexND
 }
 
 // -*- 3 -*-
 octave_value
 elem_xpow (const FloatNDArray& a, float b)
 {
   octave_value retval;
 
-  if (static_cast<int> (b) != b && a.any_element_is_negative ())
+  if (! xisint (b))
     {
-      FloatComplexNDArray result (a.dims ());
-
-      for (octave_idx_type i = 0; i < a.length (); i++)
-	{
-	  OCTAVE_QUIT;
-
-	  FloatComplex atmp (a (i));
-
-	  result(i) = std::pow (atmp, b);
-	}
-
-      retval = result;
+      if (a.any_element_is_negative ())
+        {
+          FloatComplexNDArray result (a.dims ());
+
+          for (octave_idx_type i = 0; i < a.length (); i++)
+            {
+              OCTAVE_QUIT;
+
+              FloatComplex atmp (a (i));
+
+              result(i) = std::pow (atmp, b);
+            }
+
+          retval = result;
+        }
+      else
+        {
+          FloatNDArray result (a.dims ());
+          for (octave_idx_type i = 0; i < a.length (); i++)
+            {
+              OCTAVE_QUIT;
+              result(i) = std::pow (a(i), b);
+            }
+
+          retval = result;
+        }
     }
   else
     {
       FloatNDArray result (a.dims ());
 
-      for (octave_idx_type i = 0; i < a.length (); i++)
-	{
-	  OCTAVE_QUIT;
-	  result(i) = std::pow (a(i), b);
-	}
+      int ib = static_cast<int> (b);
+      if (ib == 2)
+        {
+          for (octave_idx_type i = 0; i < a.length (); i++)
+            result.xelem (i) = a(i) * a(i);
+        }
+      else
+        {
+          for (octave_idx_type i = 0; i < a.length (); i++)
+            {
+              OCTAVE_QUIT;
+              result(i) = std::pow (a(i), ib);
+            }
+        }
 
       retval = result;
     }
 
   return retval;
 }
 
 // -*- 4 -*-
