# HG changeset patch
# User jwe
# Date 965183010 0
#      Wed Aug 02 02:23:30 2000 +0000
# Node ID c73bea82af94d7af031ca116685ca2bb6dd06fa4
# Parent  9b9efdcbdfd35ab5135c11f89fc4c19ccfebfaaf
[project @ 2000-08-02 02:23:26 by jwe]

diff --git a/doc/interpreter/io.txi b/doc/interpreter/io.txi
--- a/doc/interpreter/io.txi
+++ b/doc/interpreter/io.txi
@@ -124,25 +124,27 @@ read from disk files in various formats.
 written by the @code{save} command can be controlled using the built-in
 variables @code{default_save_format} and @code{save_precision}.
 
 Note that Octave can not yet save or load structure variables or any
 user-defined types.
 
 @DOCSTRING(save)
 
-There are two variables that modify the behavior of @code{save} and one
+There are three variables that modify the behavior of @code{save} and one
 that controls whether variables are saved when Octave exits unexpectedly.
 
 @DOCSTRING(crash_dumps_octave_core)
 
 @DOCSTRING(default_save_format)
 
 @DOCSTRING(save_precision)
 
+@DOCSTRING(save_header_format_string)
+
 @DOCSTRING(load)
 
 @node C-Style I/O Functions,  , Basic Input and Output, Input and Output
 @section C-Style I/O Functions
 
 Octave's C-style input and output functions provide most of the
 functionality of the C programming language's standard I/O library.  The
 argument lists for some of the input functions are slightly different,
diff --git a/liboctave/Array2-idx.h b/liboctave/Array2-idx.h
--- a/liboctave/Array2-idx.h
+++ b/liboctave/Array2-idx.h
@@ -65,27 +65,17 @@ Array2<T>::index (idx_vector& idx_arg) c
 
   int idx_orig_rows = idx_arg.orig_rows ();
   int idx_orig_columns = idx_arg.orig_columns ();
 
   if (nr == 1 && nc == 1)
     {
       Array<T> tmp = Array<T>::index (idx_arg);
 
-      int len = tmp.length ();
-
-      if (len == 0)
-	retval = Array2<T> (0, 0);
-      else
-	{
-	  if (liboctave_pcv_flag)
-	    retval = Array2<T> (tmp, len, 1);
-	  else
-	    retval = Array2<T> (tmp, 1, len);
-	}
+      retval = Array2<T> (tmp, idx_orig_rows, idx_orig_columns);
     }
   else if (nr == 1 || nc == 1)
     {
       int result_is_column_vector = (nc == 1 || idx_arg.is_colon ());
 
       Array<T> tmp = Array<T>::index (idx_arg);
 
       int len = tmp.length ();
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,16 @@
+2000-08-01  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* Array2-idx.h (Array2<T>::index (idx_vector&)): If a scalar is
+	indexed, always return an object the same size as the index arg.
+
+	* oct-time.cc (octave_base_tm::strftime): Return empty string for
+	empty format.
+
 2000-07-25  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* lo-cutils.c (oct_strptime): New function.
 	* oct-time.cc (octave_strptime::init): Call it instead of strptime.
 	Don't declare strptime.  Don't define _XOPEN_SOURCE or _BSD_SOURCE.
 
 2000-07-18  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
diff --git a/liboctave/oct-time.cc b/liboctave/oct-time.cc
--- a/liboctave/oct-time.cc
+++ b/liboctave/oct-time.cc
@@ -132,57 +132,60 @@ octave_base_tm::zone (const std::string&
 #define STRFTIME_BUF_INITIAL_SIZE 128
 #endif
 
 std::string
 octave_base_tm::strftime (const std::string& fmt) const
 {
   std::string retval;
 
-  struct tm t;
+  if (! fmt.empty ())
+    {
+      struct tm t;
   
-  t.tm_sec = tm_sec;
-  t.tm_min = tm_min;
-  t.tm_hour = tm_hour;
-  t.tm_mday = tm_mday;
-  t.tm_mon = tm_mon;
-  t.tm_year = tm_year;
-  t.tm_wday = tm_wday;
-  t.tm_yday = tm_yday;
-  t.tm_isdst = tm_isdst;
+      t.tm_sec = tm_sec;
+      t.tm_min = tm_min;
+      t.tm_hour = tm_hour;
+      t.tm_mday = tm_mday;
+      t.tm_mon = tm_mon;
+      t.tm_year = tm_year;
+      t.tm_wday = tm_wday;
+      t.tm_yday = tm_yday;
+      t.tm_isdst = tm_isdst;
 
 #if defined (HAVE_TM_ZONE)
-  char *ps = strsave (tm_zone.c_str ());
-  t.tm_zone = ps;
+      char *ps = strsave (tm_zone.c_str ());
+      t.tm_zone = ps;
 #endif
 
-  const char *fmt_str = fmt.c_str ();
+      const char *fmt_str = fmt.c_str ();
 
-  char *buf = 0;
-  size_t bufsize = STRFTIME_BUF_INITIAL_SIZE;
-  size_t chars_written = 0;
+      char *buf = 0;
+      size_t bufsize = STRFTIME_BUF_INITIAL_SIZE;
+      size_t chars_written = 0;
 
-  while (chars_written == 0)
-    {
-      delete [] buf;
-      buf = new char[bufsize];
-      buf[0] = '\0';
+      while (chars_written == 0)
+	{
+	  delete [] buf;
+	  buf = new char[bufsize];
+	  buf[0] = '\0';
 
-      chars_written = ::strftime (buf, bufsize, fmt_str, &t);
+	  chars_written = ::strftime (buf, bufsize, fmt_str, &t);
 
-      bufsize *= 2;
-    }
+	  bufsize *= 2;
+	}
 
 #if defined (HAVE_TM_ZONE)
-  delete [] ps;
+      delete [] ps;
 #endif
 
-  retval = buf;
+      retval = buf;
 
-  delete [] buf;
+      delete [] buf;
+    }
 
   return retval;
 }
 
 void
 octave_base_tm::init (void *p)
 {
   struct tm *t = static_cast<struct tm*> (p);
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2000-08-01  Rolf Fabian  <fabian@tu-cottbus.de>
+
+	* plot/meshgrid.m: Use transpose to reorient vectors, not complex
+	conjugate transpose.
+
 2000-07-21  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* strings/str2mat.m: Apply setstr to each argument.
 
 2000-07-17  Gabriele Pannocchia  <pannocchia@ing.unipi.it>
 
 	* control/base/dkalman.m: New file.
 	* control/base/dlqe.m: Handle singular A matrix.
diff --git a/scripts/plot/meshgrid.m b/scripts/plot/meshgrid.m
--- a/scripts/plot/meshgrid.m
+++ b/scripts/plot/meshgrid.m
@@ -36,20 +36,20 @@ function [xx, yy] = meshgrid (x, y)
   endif
   if (nargin > 0 && nargin < 3)
     if (is_vector (x) && is_vector (y))
       xlen = length (x);
       ylen = length (y);
       xx = zeros (ylen, xlen);
       yy = zeros (ylen, xlen);
       if (columns (x) == 1)
-        x = x';
+        x = x.';
       endif
       if (rows (y) == 1)
-        y = y';
+        y = y.';
       endif
       for i = 1:ylen
         xx(i,:) = x;
       endfor
       for i = 1:xlen
         yy(:,i) = y;
       endfor
     else
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2000-08-01  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* load-save.cc (Vsave_header_format_string): New variable.
+	(symbols_of_load_save): DEFVAR it.
+	(save_header_format, default_save_header_format): New functions.
+	(write_header): Use Vsave_header_format_string here.
+
 2000-07-28  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* pt-pr-code.h (tree_print_code::curr_print_indent_level,
 	(tree_print_code::beginning_of_line): No longer static.
 	(tree_print_code::tree_print_code): Initialize them here.
 	* pt-pr-code.cc: Not here.
 
 	* pt-stmt.cc (tree_statement::eval): Set curr_statement here.
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -72,16 +72,21 @@ Software Foundation, 59 Temple Place - S
 
 // Write octave-core file if Octave crashes or is killed by a signal.
 static bool Vcrash_dumps_octave_core;
 
 // The default output format.  May be one of "binary", "text",
 // "mat-binary", or "hdf5".
 static std::string Vdefault_save_format;
 
+// The format string for the comment line at the top of text-format
+// save files.  Passed to strftime.  Should begin with `#' and contain
+// no newline characters.
+static std::string Vsave_header_format_string;
+
 // The number of decimal digits to use when writing ascii data.
 static int Vsave_precision;
 
 // Used when converting Inf to something that gnuplot can read.
 
 #ifndef OCT_RBV
 #define OCT_RBV DBL_MAX / 100.0
 #endif
@@ -4712,48 +4717,32 @@ write_header (std::ostream& os, load_sav
 
       break;
 
 #ifdef HAVE_HDF5
     case LS_HDF5:
 #endif /* HAVE_HDF5 */
     case LS_ASCII:
       {
-	octave_gmtime now;
-	std::string time_string = now.asctime ();
-	time_string = time_string.substr (0, time_string.length () - 1);
-	std::ostream *s = &os;
+	octave_localtime now;
+
+	std::string comment_string = now.strftime (Vsave_header_format_string);
+
+	if (! comment_string.empty ())
+	  {
 #ifdef HAVE_HDF5
-	// for HDF5, write data to a string instead of to os,
-	// and then save the string as the HDF5 file's "comment" field.
-	std::ostrstream ss;
-	if (format == LS_HDF5)
-	  s = &ss;
+	    if (format == LS_HDF5)
+	      {
+		hdf5_ofstream& hs = (hdf5_ofstream&) os;
+		H5Gset_comment (hs.file_id, "/", comment_string.c_str ());
+	      }
+	    else
 #endif /* HAVE_HDF5 */
-	
-	*s << "# Created by Octave " OCTAVE_VERSION ", "
-	   << time_string
-	   << " <"
-	   << octave_env::get_user_name ()
-	   << "@"
-	   << octave_env::get_host_name ()
-	   << ">";
-	
-#ifdef HAVE_HDF5
-	if (format != LS_HDF5)  // don't append newline for HDF5
-#endif /* HAVE_HDF5 */
-	  *s << "\n";
-
-#ifdef HAVE_HDF5
-	if (format == LS_HDF5)
-	  {
-	    hdf5_ofstream& hs = (hdf5_ofstream&) os;
-	    H5Gset_comment (hs.file_id, "/", ss.str ());
+	      os << comment_string << "\n";
 	  }
-#endif /* HAVE_HDF5 */
       }
     break;
 
     default:
       break;
     }
 }
 
@@ -5169,16 +5158,45 @@ default_save_format (void)
       status = -1;
     }
   else
     Vdefault_save_format = s;
 
   return status;
 }
 
+static string
+default_save_header_format (void)
+{
+  return
+    std::string ("# Created by Octave " OCTAVE_VERSION ", %a %b %d %H:%M:%S %Y %Z <")
+    + octave_env::get_user_name ()
+    + std::string ("@")
+    + octave_env::get_host_name ()
+    + std::string (">");
+}
+
+static int
+save_header_format_string (void)
+{
+  int status = 0;
+
+  octave_value v = builtin_any_variable ("save_header_format_string");
+
+  if (v.is_string ())
+    Vsave_header_format_string = v.string_value ();
+  else
+    {
+      gripe_invalid_value_specified ("save_header_format_string");
+      status = -1;
+    }
+
+  return status;
+}
+
 static int
 save_precision (void)
 {
   double val;
   if (builtin_real_scalar_variable ("save_precision", val)
       && ! xisnan (val))
     {
       int ival = NINT (val);
@@ -5207,16 +5225,34 @@ hangup, terminate or similar signal.  Th
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} default_save_format\n\
 This variable specifies the default format for the @code{save} command.\n\
 It should have one of the following values: @code{\"ascii\"},\n\
 @code{\"binary\"}, @code{float-binary}, or @code{\"mat-binary\"}.  The\n\
 initial default save format is Octave's text format.\n\
 @end defvr");
 
+  DEFVAR (save_header_format_string, default_save_header_format (),
+	  save_header_format_string,
+    "-*- texinfo -*-\n\
+@defvr {Built-in Variable} save_header_format_string\n\
+This variable specifies the the format string for the comment line\n\
+that is written at the beginning of text-format data files saved by\n\
+Octave.  The format string is passed to @code{strftime} and should\n\
+begin with the character @samp{#} and contain no newline characters.\n\
+If the value of @code{save_header_format_string} is the empty string,\n\
+the header comment is omitted from text-format data files.  The\n\
+default value is\n\
+\n\
+@example\n\
+\"# Created by Octave VERSION, %a %b %d %H:%M:%S %Y %Z <USER@@HOST>\"\n\
+@end example\n\
+@seealso{strftime}\n\
+@end defvr");
+
   DEFVAR (save_precision, 15.0, save_precision,
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} save_precision\n\
 This variable specifies the number of digits to keep when saving data in\n\
 text format.  The default value is 17.\n\
 @end defvr");
 }
 
diff --git a/test/octave.test/string/str2mat-3.m b/test/octave.test/string/str2mat-3.m
--- a/test/octave.test/string/str2mat-3.m
+++ b/test/octave.test/string/str2mat-3.m
@@ -1,1 +1,1 @@
-str2mat (1, 2, 3)
+all (str2mat (1, 2, 3) == setstr ([1; 2; 3]))
diff --git a/test/octave.test/string/string.exp b/test/octave.test/string/string.exp
--- a/test/octave.test/string/string.exp
+++ b/test/octave.test/string/string.exp
@@ -166,17 +166,17 @@ set test str2mat-1
 set prog_output "ans = 1"
 do_test str2mat-1.m
 
 set test str2mat-2
 set prog_output "usage:.*"
 do_test str2mat-2.m
 
 set test str2mat-3
-set prog_output "error:.*"
+set prog_output "ans = 1"
 do_test str2mat-3.m
 
 set test deblank-1
 set prog_output "ans = 1"
 do_test deblank-1.m
 
 set test deblank-2
 set prog_output "usage:.*"
