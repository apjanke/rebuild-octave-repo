# HG changeset patch
# User jwe
# Date 1057962078 0
#      Fri Jul 11 22:21:18 2003 +0000
# Node ID af308ca1a354e3b95d283947471a61ecf90d8bf6
# Parent  cef48c4b902db231f2fcdd8386fe10f3c0bcf306
[project @ 2003-07-11 22:21:17 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,13 +1,15 @@
 2003-07-11  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
-	* emacs/octave-mod.el (octave-variables): Add
-	warn_empty_list_elements to the list.
-	Delete empty_list_elements_ok from the list.
+	* emacs/octave-mod.el (octave-variables):
+	Add warn_empty_list_elements and warn_resize_on_range_error to the
+	list.
+	Delete empty_list_elements_ok and resize_on_range_error from the
+	list.
 
 2003-07-10  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* emacs/octave-mod.el (octave-variables): Add warn_neg_dim_as_zero
 	to the list.
 	Delete treat_neg_dim_as_zero from the list.
 
 2003-07-09  John W. Eaton  <jwe@bevo.che.wisc.edu>
diff --git a/doc/interpreter/expr.txi b/doc/interpreter/expr.txi
--- a/doc/interpreter/expr.txi
+++ b/doc/interpreter/expr.txi
@@ -162,17 +162,17 @@ a ([1, 1], [1, 1, 1])
 @noindent
 create a 2 by 3 matrix with all elements equal to 13.
 
 This is an obscure notation and should be avoided.  It is better to
 use the function @code{ones} to generate a matrix of the appropriate
 size whose elements are all one, and then to scale it to produce the
 desired result.  @xref{Special Utility Matrices}.
 
-@DOCSTRING(resize_on_range_error)
+@DOCSTRING(warn_resize_on_range_error)
 
 Note that it is quite inefficient to create a vector using a loop like
 the one shown in the example above.  In this particular case, it would
 have been much more efficient to use the expression
 
 @example
 a = sqrt (1:10);
 @end example
diff --git a/doc/interpreter/var.txi b/doc/interpreter/var.txi
--- a/doc/interpreter/var.txi
+++ b/doc/interpreter/var.txi
@@ -316,21 +316,16 @@ Default value: 1.
 
 Default value: 1.
 
 @item print_empty_dimensions
 @xref{Empty Matrices}.
 
 Default value: 1.
 
-@item resize_on_range_error
-@xref{Index Expressions}.
-
-Default value: 1.
-
 @item return_last_computed_value
 @xref{Returning From a Function}.
 
 Default value: 0.
 
 @item save_precision
 @xref{Simple File I/O}.
 
@@ -426,16 +421,21 @@ Default value: 1.
 
 Default value: 0.
 
 @item warn_reload_forces_clear
 @xref{Dynamically Linked Functions}.
 
 Default value: 1.
 
+@item warn_resize_on_range_error
+@xref{Index Expressions}.
+
+Default value: 0.
+
 @item warn_single_quote_string)
 @xref{String Conversions}.
 
 Default value: 0.
 
 @item warn_variable_switch_label
 @xref{The switch Statement}.
 
diff --git a/emacs/octave-mod.el b/emacs/octave-mod.el
--- a/emacs/octave-mod.el
+++ b/emacs/octave-mod.el
@@ -143,27 +143,29 @@ All Octave abbrevs start with a grave ac
     "crash_dumps_octave_core" "default_return_value" "default_save_format"
     "define_all_return_values" "e" "echo_executing_commands" "eps"
     "error_text" "gnuplot_binary" "history_file"
     "history_size" "ignore_function_time_stamp"
     "inf" "nan" "nargin" "output_max_field_width" "output_precision"
     "page_output_immediately" "page_screen_output" "pi"
     "print_answer_id_name" "print_empty_dimensions"
     "program_invocation_name" "program_name" "propagate_empty_matrices"
-    "realmax" "realmin" "resize_on_range_error"
-    "return_last_computed_value" "save_precision" "saving_history"
-    "sighup_dumps_octave_core" "sigterm_dumps_octave_core"
+    "realmax" "realmin" "return_last_computed_value" "save_precision"
+    "saving_history" "sighup_dumps_octave_core" "sigterm_dumps_octave_core"
     "silent_functions" "split_long_rows" "stderr" "stdin" "stdout"
     "string_fill_char" "struct_levels_to_print"
     "suppress_verbose_help_message" "warn_assign_as_truth_value"
-    "warn_comma_in_global_decl" "warn_divide_by_zero"
-    "warn_empty_list_elements" "warn_fortran_indexing"
-    "warn_function_name_clash" "warn_imag_to_real"
-    "warn_missing_semicolon" "warn_neg_dim_as_zero"
-    "warn_num_to_str" "warn_str_to_num" "whitespace_in_literal_matrix")
+    "warn_divide_by_zero" "warn_empty_list_elements"
+    "warn_fortran_indexing" "warn_function_name_clash"
+    "warn_future_time_stamp" "warn_imag_to_real"
+    "warn_matlab_incompatible" "warn_missing_semicolon"
+    "warn_neg_dim_as_zero" "warn_num_to_str" "warn_precedence_change"
+    "warn_reload_forces_clear" "warn_separator_insert"
+    "warn_single_quote_string" "warn_str_to_num"
+    "warn_variable_switch_label")
   "Builtin variables in Octave.")
 
 (defvar octave-function-header-regexp
   (concat "^\\s-*\\<\\(function\\)\\>"
 	  "\\([^=;\n]*=[ \t]*\\|[ \t]*\\)\\(\\w+\\)\\>")
   "Regexp to match an Octave function header.
 The string `function' and its name are given by the first and third
 parenthetical grouping.")
diff --git a/liboctave/Array-flags.cc b/liboctave/Array-flags.cc
--- a/liboctave/Array-flags.cc
+++ b/liboctave/Array-flags.cc
@@ -25,18 +25,18 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include "Array.h"
 
 // These have to be defined somewhere, but only once.
 
 #if defined (HEAVYWEIGHT_INDEXING)
 
-int liboctave_wfi_flag = 0;
-int liboctave_rre_flag = 0;
+bool liboctave_wfi_flag = false;
+bool liboctave_wrore_flag = false;
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/Array-flags.h b/liboctave/Array-flags.h
--- a/liboctave/Array-flags.h
+++ b/liboctave/Array-flags.h
@@ -17,16 +17,16 @@ for more details.
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 #if defined (OCTAVE_SOURCE)
 extern int liboctave_wfi_flag;
-extern int liboctave_rre_flag;
+extern int liboctave_wrore_flag;
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/Array-idx.h b/liboctave/Array-idx.h
--- a/liboctave/Array-idx.h
+++ b/liboctave/Array-idx.h
@@ -64,18 +64,17 @@ Array<T>::value (void)
 
   clear_index ();
 
   return retval;
 }
 
 template <class T>
 Array<T>
-Array<T>::index (idx_vector& idx_arg, int resize_ok,
-		 const T& resize_fill_value) const
+Array<T>::index (idx_vector& idx_arg, int resize_ok, const T& rfv) const
 {
   Array<T> retval;
 
   int len = length ();
 
   int n = idx_arg.freeze (len, "vector", resize_ok);
 
   if (idx_arg)
@@ -97,17 +96,17 @@ Array<T>::index (idx_vector& idx_arg, in
       else
 	{
 	  retval.resize (n);
 
 	  for (int i = 0; i < n; i++)
 	    {
 	      int ii = idx_arg.elem (i);
 	      if (ii >= len)
-		retval.elem (i) = resize_fill_value;
+		retval.elem (i) = rfv;
 	      else
 		retval.elem (i) = elem (ii);
 	    }
 	}
     }
 
   // idx_vector::freeze() printed an error message for us.
 
@@ -176,36 +175,36 @@ Array<T>::maybe_delete_elements (idx_vec
     }
 }
 
 // ??? FIXME ??? -- this does not handle assignment of empty vectors
 // to delete elements.  Should it?
 
 template <class LT, class RT>
 int
-assign (Array<LT>& lhs, const Array<RT>& rhs, const LT& resize_fill_value)
+assign (Array<LT>& lhs, const Array<RT>& rhs, const LT& rfv)
 {
   int retval = 1;
 
   idx_vector *tmp = lhs.get_idx ();
 
   idx_vector lhs_idx = tmp[0];
 
   int lhs_len = lhs.length ();
   int rhs_len = rhs.length ();
 
-  int n = lhs_idx.freeze (lhs_len, "vector", liboctave_rre_flag);
+  int n = lhs_idx.freeze (lhs_len, "vector", true, liboctave_wrore_flag);
 
   if (n != 0)
     {
-      if (liboctave_rre_flag && (rhs_len == n || rhs_len == 1))
+      if (rhs_len == n || rhs_len == 1)
 	{
 	  int max_idx = lhs_idx.max () + 1;
 	  if (max_idx > lhs_len)
-	    lhs.resize (max_idx, resize_fill_value);
+	    lhs.resize (max_idx, rfv);
 	}
 
       if (rhs_len == n)
 	{
 	  for (int i = 0; i < n; i++)
 	    {
 	      int ii = lhs_idx.elem (i);
 	      lhs.elem (ii) = rhs.elem (i);
diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -266,17 +266,17 @@ public:
 
   //  static T resize_fill_value (void) { return T (); }
 
   void print_info (std::ostream& os, const std::string& prefix) const;
 };
 
 template <class LT, class RT>
 int
-assign (Array<LT>& lhs, const Array<RT>& rhs, const LT& resize_fill_value);
+assign (Array<LT>& lhs, const Array<RT>& rhs, const LT& rfv);
 
 
 template <class LT, class RT>
 int
 assign (Array<LT>& lhs, const Array<RT>& rhs)
 {
   //  return assign (lhs, rhs, Array<LT>::resize_fill_value ());
   return assign (lhs, rhs, resize_fill_value (LT ()));
diff --git a/liboctave/Array2-idx.h b/liboctave/Array2-idx.h
--- a/liboctave/Array2-idx.h
+++ b/liboctave/Array2-idx.h
@@ -483,26 +483,23 @@ Array2<T>::maybe_delete_elements (idx_ve
 	    }
 	}
     }
 }
 
 #define MAYBE_RESIZE_LHS \
   do \
     { \
-      if (liboctave_rre_flag) \
-	{ \
-	  int max_row_idx = idx_i_is_colon ? rhs_nr : idx_i.max () + 1; \
-	  int max_col_idx = idx_j_is_colon ? rhs_nc : idx_j.max () + 1; \
+      int max_row_idx = idx_i_is_colon ? rhs_nr : idx_i.max () + 1; \
+      int max_col_idx = idx_j_is_colon ? rhs_nc : idx_j.max () + 1; \
  \
-	  int new_nr = max_row_idx > lhs_nr ? max_row_idx : lhs_nr; \
-	  int new_nc = max_col_idx > lhs_nc ? max_col_idx : lhs_nc; \
+      int new_nr = max_row_idx > lhs_nr ? max_row_idx : lhs_nr; \
+      int new_nc = max_col_idx > lhs_nc ? max_col_idx : lhs_nc; \
  \
-	  lhs.resize (new_nr, new_nc, rfv); \
-	} \
+      lhs.resize (new_nr, new_nc, rfv); \
     } \
   while (0)
 
 template <class LT, class RT>
 int
 assign (Array2<LT>& lhs, const Array2<RT>& rhs, const LT& rfv)
 {
   int retval = 1;
@@ -523,19 +520,19 @@ assign (Array2<LT>& lhs, const Array2<RT
   if (n_idx > 1)
     idx_j = tmp[1];
 
   if (n_idx > 0)
     idx_i = tmp[0];
 
   if (n_idx == 2)
     {
-      int n = idx_i.freeze (lhs_nr, "row", liboctave_rre_flag);
+      int n = idx_i.freeze (lhs_nr, "row", true, liboctave_wrore_flag);
 
-      int m = idx_j.freeze (lhs_nc, "column", liboctave_rre_flag);
+      int m = idx_j.freeze (lhs_nc, "column", true, liboctave_wrore_flag);
 
       int idx_i_is_colon = idx_i.is_colon ();
       int idx_j_is_colon = idx_j.is_colon ();
 
       if (idx_i_is_colon)
 	n = lhs_nr > 0 ? lhs_nr : rhs_nr;
 
       if (idx_j_is_colon)
@@ -611,17 +608,17 @@ assign (Array2<LT>& lhs, const Array2<RT
   else if (n_idx == 1)
     {
       int lhs_is_empty = lhs_nr == 0 || lhs_nc == 0;
 
       if (lhs_is_empty || (lhs_nr == 1 && lhs_nc == 1))
 	{
 	  int lhs_len = lhs.length ();
 
-	  int n = idx_i.freeze (lhs_len, 0, liboctave_rre_flag);
+	  int n = idx_i.freeze (lhs_len, 0, true, liboctave_wrore_flag);
 
 	  if (idx_i)
 	    {
 	      if (rhs_nr == 0 && rhs_nc == 0)
 		{
 		  if (n != 0 && (lhs_nr != 0 || lhs_nc != 0))
 		    lhs.maybe_delete_elements (idx_i);
 		}
@@ -669,17 +666,17 @@ assign (Array2<LT>& lhs, const Array2<RT
 		  else
 		    retval = 0;
 		}
 	    }
 	  // idx_vector::freeze() printed an error message for us.
 	}
       else if (lhs_nr == 1)
 	{
-	  idx_i.freeze (lhs_nc, "vector", liboctave_rre_flag);
+	  idx_i.freeze (lhs_nc, "vector", true, liboctave_wrore_flag);
 
 	  if (idx_i)
 	    {
 	      if (rhs_nr == 0 && rhs_nc == 0)
 		lhs.maybe_delete_elements (idx_i);
 	      else
 		{
 		  if (assign ((Array<LT>&) lhs, (Array<RT>&) rhs))
@@ -687,17 +684,17 @@ assign (Array2<LT>& lhs, const Array2<RT
 		  else
 		    retval = 0;
 		}
 	    }
 	  // idx_vector::freeze() printed an error message for us.
 	}
       else if (lhs_nc == 1)
 	{
-	  idx_i.freeze (lhs_nr, "vector", liboctave_rre_flag);
+	  idx_i.freeze (lhs_nr, "vector", true, liboctave_wrore_flag);
 
 	  if (idx_i)
 	    {
 	      if (rhs_nr == 0 && rhs_nc == 0)
 		lhs.maybe_delete_elements (idx_i);
 	      else
 		{
 		  if (assign ((Array<LT>&) lhs, (Array<RT>&) rhs))
diff --git a/liboctave/Array2.h b/liboctave/Array2.h
--- a/liboctave/Array2.h
+++ b/liboctave/Array2.h
@@ -189,17 +189,17 @@ public:
 
 #endif
 
   void print_info (std::ostream& os, const std::string& prefix) const;
 };
 
 template <class LT, class RT>
 int
-assign (Array2<LT>& lhs, const Array2<RT>& rhs, const LT& resize_fill_value);
+assign (Array2<LT>& lhs, const Array2<RT>& rhs, const LT& rfv);
 
 template <class LT, class RT>
 int
 assign (Array2<LT>& lhs, const Array2<RT>& rhs)
 {
   return assign (lhs, rhs, resize_fill_value (LT ()));
 }
 
diff --git a/liboctave/Array3.h b/liboctave/Array3.h
--- a/liboctave/Array3.h
+++ b/liboctave/Array3.h
@@ -153,17 +153,17 @@ public:
   void maybe_delete_elements (idx_vector& i, idx_vector& j, idx_vector& k);
 
   Array3<T> value (void);
 #endif
 };
 
 template <class LT, class RT>
 int
-assign (Array3<LT>& lhs, const Array3<RT>& rhs, const LT& resize_fill_value);
+assign (Array3<LT>& lhs, const Array3<RT>& rhs, const LT& rfv);
 
 template <class LT, class RT>
 int
 assign (Array3<LT>& lhs, const Array3<RT>& rhs)
 {
   return assign (lhs, rhs, static_cast<LT> (0));
 }
 
diff --git a/liboctave/ArrayN-idx.h b/liboctave/ArrayN-idx.h
--- a/liboctave/ArrayN-idx.h
+++ b/liboctave/ArrayN-idx.h
@@ -65,18 +65,17 @@ ArrayN<T>::value (void)
 
   clear_index ();
 
   return retval;
 }
 
 template <class T>
 ArrayN<T>
-ArrayN<T>::index (idx_vector& ra_idx, int resize_ok,
-		  const T& resize_fill_value) const
+ArrayN<T>::index (idx_vector& ra_idx, int resize_ok, const T& rfv) const
 {
   ArrayN<T> retval;
   assert (0);
   return retval;
 }
 
 static inline Array<int>
 freeze (Array<idx_vector>& ra_idx, const Array<int>& dimensions, int resize_ok)
@@ -195,18 +194,17 @@ get_elt_idx (const Array<idx_vector>& ra
   for (int i = 0; i < n; i++)
     retval(i) = ra_idx(result_idx(i));
 
   return retval;
 }
 
 template <class T>
 ArrayN<T>
-ArrayN<T>::index (Array<idx_vector>& ra_idx, int resize_ok,
-		  const T& resize_fill_value) const
+ArrayN<T>::index (Array<idx_vector>& ra_idx, int resize_ok, const T& rfv) const
 {
   ArrayN<T> retval;
 
   int n_dims = dimensions.length ();
 
   Array<int> frozen_lengths = freeze (ra_idx, dimensions, resize_ok);
 
   if (frozen_lengths.length () == n_dims)
@@ -237,17 +235,17 @@ ArrayN<T>::index (Array<idx_vector>& ra_
 
 	      Array<int> result_idx (n_dims, 0);
 
 	      for (int i = 0; i < n; i++)
 		{
 		  Array<int> elt_idx = get_elt_idx (result_idx);
 
 		  if (elt_idx > orig_len)
-		    retval.elem (result_idx) = resize_fill_value;
+		    retval.elem (result_idx) = rfv;
 		  else
 		    retval.elem (result_idx) = elem (elt_idx);
 
 		  increment_index (result_idx, frozen_lengths);
 		}
 #endif
 	    }
 	}
diff --git a/liboctave/ArrayN.h b/liboctave/ArrayN.h
--- a/liboctave/ArrayN.h
+++ b/liboctave/ArrayN.h
@@ -186,17 +186,17 @@ public:
   ArrayN<T> index (Array<idx_vector>& ra_idx, int resize_ok = 0,
 		   const T& rfv = resize_fill_value (T ())) const;
 
 #endif
 };
 
 template <class LT, class RT>
 int
-assign (ArrayN<LT>& lhs, const ArrayN<RT>& rhs, const LT& resize_fill_value);
+assign (ArrayN<LT>& lhs, const ArrayN<RT>& rhs, const LT& rfv);
 
 template <class LT, class RT>
 int
 assign (ArrayN<LT>& lhs, const ArrayN<RT>& rhs)
 {
   return assign (lhs, rhs, resize_fill_value (LT ()));
 }
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,25 @@
+2003-07-11  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* Array2-idx.h (assign (Array2<LT>&, const Array2<RT>&, const LT&)):
+	Pass true for resize_ok arg to freeze.
+	* Array-idx.h (assign (Array<LT>&, const Array<RT>&, const LT&)): 
+	Likewise.
+
+	* idx-vector.cc (IDX_VEC_REP::freeze): New arg, warn_resize;
+	resize_ok arg is now bool.
+	* idx-vector.h (idx_vector::freeze): Likewise.
+
+	* Array-flags.cc, Array-flags.h (liboctave_wrore_flag):
+	Rename from liboctave_rre_flag.  Now bool.
+	(liboctave_wfi_flag): Now bool.
+
+	* Array2-idx.h (MAYBE_RESIZE_LHS): Don't check liboctave_rre_flag.
+
 2003-07-11  Russell Standish <R.Standish@unsw.edu.au>
 
 	* Array.h (resize_fill_value): Now a top-level template function.
 	Accept object as argument.  Change all uses.
 
 2003-07-09  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Array-flags.cc, Array-flags.h (liboctave_pcv_flag): Delete.
diff --git a/liboctave/idx-vector.cc b/liboctave/idx-vector.cc
--- a/liboctave/idx-vector.cc
+++ b/liboctave/idx-vector.cc
@@ -607,17 +607,18 @@ std::ostream&
 IDX_VEC_REP::print (std::ostream& os) const
 {
   for (int ii = 0; ii < len; ii++)
     os << data[ii] << "\n";
   return os;
 }
 
 int
-IDX_VEC_REP::freeze (int z_len, const char *tag, int resize_ok)
+IDX_VEC_REP::freeze (int z_len, const char *tag, bool resize_ok,
+		     bool warn_resize)
 {
   if (frozen)
     return frozen_len;
 
   frozen_len = -1;
 
   if (colon)
     frozen_len = z_len;
@@ -650,17 +651,31 @@ IDX_VEC_REP::freeze (int z_len, const ch
 		  ("invalid %s index = %d", tag, max_val+1);
 	      else
 		(*current_liboctave_error_handler)
 		  ("invalid index = %d", max_val+1);
 
 	      initialized = 0;
 	    }
 	  else
-	    frozen_len = length (z_len);
+	    {
+	      if (warn_resize && max_val >= z_len)
+		{
+		  if (tag)
+		    (*current_liboctave_error_handler)
+		      ("resizing object with %s index = %d out of bounds",
+		       tag, max_val+1);
+		  else
+		    (*current_liboctave_error_handler)
+		      ("resizing object with index = %d out of bounds",
+		       max_val+1);
+		}
+
+	      frozen_len = length (z_len);
+	    }
 	}
     }
 
   frozen = 1;
 
   frozen_at_z_len = z_len ? z_len : len;
 
   return frozen_len;
diff --git a/liboctave/idx-vector.h b/liboctave/idx-vector.h
--- a/liboctave/idx-vector.h
+++ b/liboctave/idx-vector.h
@@ -106,17 +106,17 @@ private:
 
     int orig_rows (void) const { return orig_nr; }
     int orig_columns (void) const { return orig_nc; }
 
     // other stuff
 
     void shorten (int n); // Unsafe.  Avoid at all cost.
 
-    int freeze (int z_len, const char *tag, int resize_ok);
+    int freeze (int z_len, const char *tag, bool resize_ok, bool warn_resize);
 
     // i/o
 
     std::ostream& print (std::ostream& os) const;
 
     int *data;
     int len;
     int num_zeros;
@@ -252,18 +252,19 @@ public:
 	      && (orig_rows () == 0 || orig_columns () == 0));
     }
 
 // Unsafe.  Avoid at all cost.
   void shorten (int n) { rep->shorten (n); }
 
 // i/o
 
-  int freeze (int z_len, const char *tag, int resize_ok = 0)
-    { return rep->freeze (z_len, tag, resize_ok); }
+  int freeze (int z_len, const char *tag, bool resize_ok = false,
+	      bool warn_resize = false)
+    { return rep->freeze (z_len, tag, resize_ok, warn_resize); }
 
   std::ostream& print (std::ostream& os) const { return rep->print (os); }
 
   friend std::ostream& operator << (std::ostream& os, const idx_vector& a)
     { return a.print (os); }
 
   void maybe_convert_one_zero_to_idx (int z_len)
     { rep->maybe_convert_one_zero_to_idx (z_len); }
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,10 +1,14 @@
 2003-07-11  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* miscellaneous/dump_prefs.m: Add warn_resize_on_reange_error to
+	the list.
+	Delete resize_on_range_error from the list.
+
 	* control/base/pzmap.m, control/base/place.m,
 	control/base/__freqresp__.m, control/system/sysappend.m,
 	control/system/syscont.m, control/system/sysdisc.m,
 	control/system/sysgroup.m, control/system/tfout.m,
 	control/system/zp2ss.m, control/system/zpout.m,
 	control/util/__outlist__.m, signal/arma_rnd.m, general/shift.m,
 	strings/strcat.m: Save and restore warn_empty_list_elements, not
 	empty_list_elements_ok.
diff --git a/scripts/miscellaneous/dump_prefs.m b/scripts/miscellaneous/dump_prefs.m
--- a/scripts/miscellaneous/dump_prefs.m
+++ b/scripts/miscellaneous/dump_prefs.m
@@ -77,17 +77,16 @@ function dump_prefs (file)
               "output_max_field_width";
               "output_precision";
               "page_output_immediately";
               "page_screen_output";
               "print_answer_id_name";
               "print_empty_dimensions";
               "print_rhs_assign_val";
               "propagate_empty_matrices";
-              "resize_on_range_error";
               "return_last_computed_value";
               "save_precision";
               "saving_history";
               "sighup_dumps_octave_core";
               "sigterm_dumps_octave_core";
               "silent_functions";
               "split_long_rows";
               "string_fill_char";
@@ -98,16 +97,17 @@ function dump_prefs (file)
               "warn_empty_list_elements";
               "warn_fortran_indexing";
               "warn_function_name_clash";
               "warn_future_time_stamp";
               "warn_imag_to_real";
               "warn_missing_semicolon";
               "warn_neg_dim_as_zero";
               "warn_num_to_str";
+              "warn_resize_on_range_error";
               "warn_str_to_num";
               "warn_variable_switch_label";
               "whitespace_in_literal_matrix"];
 
   for i = 1:rows(var_list)
     var = deblank (var_list(i,:));
     try
       fprintf (file, "  %s = %s\n", var, type ("-q", var));
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,15 +1,26 @@
 2003-07-11  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* ov-list.cc (octave_list::assign): Check
+	Vwarn_resize_on_range_error, not Vresize_on_range_error.
+
+	* ov.cc (Vwarn_resize_on_range_error): New variable.
+	(warn_resize_on_range_error): New function.
+	(symbols_of_ov): Add DEFVAR for warn_resize_on_range_error.
+
+	* ov.cc (Vresize_on_range_error): Delete.
+	(resize_on_range_error): Delete.
+	(symbols_of_ov): Delete DEFVAR for resize_on_range_error.
+
 	* pt-mat.cc (Vwarn_empty_list_elements): New variable.
 	(warn_empty_list_elements): New function.
 	(symbols_of_pt_mat): Add DEFVAR for warn_empty_list_elements.
-	(): Check Vwarn_empty_list_elements, not
-	Vempty_list_elements_ok.
+	(tm_row_const::tm_row_const_rep::init, tm_const::init): 
+	Check Vwarn_empty_list_elements, not Vempty_list_elements_ok.
 
 	* pt-mat.cc (Vempty_list_elements_ok): Delete.
 	(empty_list_elements_ok): Delete.
 	(symbols_of_pt_mat): Delete DEFVAR for empty_list_elements_ok.
 
 2003-07-11  Russell Standish <R.Standish@unsw.edu.au>
 
 	* TEMPLATE-INST/Array-tc.cc (resize_fill_value): Provide
diff --git a/src/ov-cs-list.cc b/src/ov-cs-list.cc
--- a/src/ov-cs-list.cc
+++ b/src/ov-cs-list.cc
@@ -198,18 +198,23 @@ octave_list::assign (const octave_value_
   if (idx.length () == 1)
     {
       int i = idx(0).int_value (true);
 
       if (! error_state)
 	{
 	  int n = lst.length ();
 
-	  if (i > 0 && (Vresize_on_range_error || i <= n))
-	    lst(i-1) = rhs;
+	  if (i > 0)
+	    {
+	      if (Vwarn_resize_on_range_error && i > n)
+		warning ("list index = %d out of range", i);
+
+	      lst(i-1) = rhs;
+	    }
 	  else
 	    error ("list index = %d out of range", i);
 	}
       else
 	error ("list index must be an integer");
     }
   else
     error ("lists may only be indexed by a single scalar");
diff --git a/src/ov-list.cc b/src/ov-list.cc
--- a/src/ov-list.cc
+++ b/src/ov-list.cc
@@ -196,18 +196,23 @@ octave_list::assign (const octave_value_
   if (idx.length () == 1)
     {
       int i = idx(0).int_value (true);
 
       if (! error_state)
 	{
 	  int n = lst.length ();
 
-	  if (i > 0 && (Vresize_on_range_error || i <= n))
-	    lst(i-1) = rhs;
+	  if (i > 0)
+	    {
+	      if (Vwarn_resize_on_range_error && i > n)
+		warning ("list index = %d out of range", i);
+
+	      lst(i-1) = rhs;
+	    }
 	  else
 	    error ("list index = %d out of range", i);
 	}
       else
 	error ("list index must be an integer");
     }
   else
     error ("lists may only be indexed by a single scalar");
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -106,19 +106,19 @@ bool Vprint_answer_id_name;
 int Vpropagate_empty_matrices;
 
 // How many levels of structure elements should we print?
 int Vstruct_levels_to_print;
 
 // Allow divide by zero errors to be suppressed.
 bool Vwarn_divide_by_zero;
 
-// If TRUE, resize matrices when performing and indexed assignment and
-// the indices are outside the current bounds.
-bool Vresize_on_range_error;
+// If TRUE, print a warning when a matrix is resized by an indexed
+// assignment with indices outside the current bounds.
+bool Vwarn_resize_on_range_error;
 
 // XXX FIXME XXX
 
 // Octave's value type.
 
 std::string
 octave_value::unary_op_as_string (unary_op op)
 {
@@ -1799,21 +1799,22 @@ static int
 propagate_empty_matrices (void)
 {
   Vpropagate_empty_matrices = check_preference ("propagate_empty_matrices");
 
   return 0;
 }
 
 static int
-resize_on_range_error (void)
+warn_resize_on_range_error (void)
 {
-  Vresize_on_range_error = check_preference ("resize_on_range_error");
+  Vwarn_resize_on_range_error
+    = check_preference ("warn_resize_on_range_error");
 
-  liboctave_rre_flag = Vresize_on_range_error;
+  liboctave_wrore_flag = Vwarn_resize_on_range_error;
 
   return 0;
 }
 
 static int
 silent_functions (void)
 {
   Vsilent_functions = check_preference ("silent_functions");
@@ -1861,36 +1862,16 @@ values are printed.  The default value i
   DEFVAR (propagate_empty_matrices, true, propagate_empty_matrices,
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} propagate_empty_matrices\n\
 If the value of @code{propagate_empty_matrices} is nonzero,\n\
 functions like @code{inverse} and @code{svd} will return an empty matrix\n\
 if they are given one as an argument.  The default value is 1.\n\
 @end defvr");
 
-  DEFVAR (resize_on_range_error, true, resize_on_range_error,
-    "-*- texinfo -*-\n\
-@defvr {Built-in Variable} resize_on_range_error\n\
-If the value of @code{resize_on_range_error} is nonzero, expressions\n\
-like\n\
-\n\
-@example\n\
-for i = 1:10\n\
-  a (i) = sqrt (i);\n\
-endfor\n\
-@end example\n\
-\n\
-@noindent\n\
-(for @code{a} previously undefined) result in the variable @code{a}\n\
-being resized to be just large enough to hold the new value.  New\n\
-elements that have not been given a value are set to zero.  If the value\n\
-of @code{resize_on_range_error} is 0, an error message is printed and\n\
-control is returned to the top level.  The default value is 1.\n\
-@end defvr");
-
   DEFVAR (silent_functions, false, silent_functions,
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} silent_functions\n\
 If the value of @code{silent_functions} is nonzero, internal output\n\
 from a function is suppressed.  Otherwise, the results of expressions\n\
 within a function body that are not terminated with a semicolon will\n\
 have their values printed.  The default value is 0.\n\
 \n\
@@ -1951,16 +1932,24 @@ numbers in matrix notation.  For example
 [ \"f\", 111, 111 ]\n\
      @result{} \"foo\"\n\
 @end group\n\
 @end example\n\
 elicits a warning if @code{warn_num_to_str} is nonzero.  The default\n\
 value is 1.\n\
 @end defvr");
 
+  DEFVAR (warn_resize_on_range_error, false, warn_resize_on_range_error,
+    "-*- texinfo -*-\n\
+@defvr {Built-in Variable} warn_resize_on_range_error\n\
+If the value of @code{warn_resize_on_range_error} is nonzero, print a\n\
+warning when a matrix is resized by an indexed assignment with\n\
+indices outside the current bounds.  The default value is 0.\n\
+@end defvr");
+
   DEFVAR (warn_str_to_num, false, warn_str_to_num,
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} warn_str_to_num\n\
 If the value of @code{warn_str_to_num} is nonzero, a warning is printed\n\
 for implicit conversions of strings to their numeric ASCII equivalents.\n\
 For example,\n\
 @example\n\
 @group\n\
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -751,19 +751,19 @@ extern bool Vprint_answer_id_name;
 extern int Vpropagate_empty_matrices;
 
 // How many levels of structure elements should we print?
 extern int Vstruct_levels_to_print;
 
 // Allow divide by zero errors to be suppressed.
 extern bool Vwarn_divide_by_zero;
 
-// If TRUE, resize matrices when performing and indexed assignment and
-// the indices are outside the current bounds.
-extern bool Vresize_on_range_error;
+// If TRUE, print a warning when a matrix is resized by an indexed
+// assignment with indices outside the current bounds.
+extern bool Vwarn_resize_on_range_error;
 
 // Indentation level for structures.
 extern int struct_indent;
 
 extern void increment_struct_indent (void);
 extern void decrement_struct_indent (void);
 
 // Indentation level for lists.
diff --git a/test/octave.test/prefer/prefer-17.m b/test/octave.test/prefer/prefer-17.m
--- a/test/octave.test/prefer/prefer-17.m
+++ b/test/octave.test/prefer/prefer-17.m
@@ -1,2 +1,2 @@
-resize_on_range_error = 1;
+warn_resize_on_range_error = 0;
 clear a; a(2) = 1; a(3) = 2; all (a == [0,1,2])
