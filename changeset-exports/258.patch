# HG changeset patch
# User jwe
# Date 755850261 0
#      Tue Dec 14 06:24:21 1993 +0000
# Node ID 1c9a678906fb80548b382d46955cbccad20e21f2
# Parent  126791334c68e9d9c4f1ca2919084735962bb058
[project @ 1993-12-14 06:24:04 by jwe]

diff --git a/liboctave/LSODE.cc b/liboctave/LSODE.cc
--- a/liboctave/LSODE.cc
+++ b/liboctave/LSODE.cc
@@ -26,19 +26,22 @@ Software Foundation, 675 Mass Ave, Cambr
 #endif
 
 #include "ODE.h"
 #include "f77-uscore.h"
 #include "lo-error.h"
 
 extern "C"
 {
-  int F77_FCN (lsode) (int (*)(), int *, double *, double *, double *,
+  int F77_FCN (lsode) (int (*)(int*, double*, double*, double*, int*),
+		       int *, double *, double *, double *,
 		       int *, double *, double *, int *, int *, int *,
-		       double *, int *, int *, int *, int (*)(), int *);
+		       double *, int *, int *, int *,
+		       int (*)(int*, double*, double*, int*, int*,
+			       double*, int*), int *);
 }
 
 static ColumnVector (*user_fun) (ColumnVector&, double);
 static Matrix       (*user_jac) (ColumnVector&, double);
 static ColumnVector *tmp_x;
 
 ODE::ODE (void)
 {
@@ -46,16 +49,17 @@ ODE::ODE (void)
   t = 0.0;
 
   absolute_tolerance = 1.0e-6;
   relative_tolerance = 1.0e-6;
 
   stop_time_set = 0;
   stop_time = 0.0;
 
+  integration_error = 0;
   restart = 1;
 
   istate = 1;
   itol = 1;
   itask = 1;
   iopt = 0;
 
   liw = 20 + n;
@@ -79,16 +83,17 @@ ODE::ODE (int size)
   t = 0.0;
 
   absolute_tolerance = 1.0e-6;
   relative_tolerance = 1.0e-6;
 
   stop_time_set = 0;
   stop_time = 0.0;
 
+  integration_error = 0;
   restart = 1;
 
   istate = 1;
   itol = 1;
   itask = 1;
   iopt = 0;
 
   liw = 20 + n;
@@ -113,16 +118,17 @@ ODE::ODE (const ColumnVector& state, dou
   x = state;
 
   absolute_tolerance = 1.0e-6;
   relative_tolerance = 1.0e-6;
 
   stop_time_set = 0;
   stop_time = 0.0;
 
+  integration_error = 0;
   restart = 1;
 
   istate = 1;
   itol = 1;
   itask = 1;
   iopt = 0;
 
   liw = 20 + n;
@@ -142,30 +148,35 @@ ODE::ODE (const ColumnVector& state, dou
 
 ODE::~ODE (void)
 {
   delete [] rwork;
   delete [] iwork;
 }
 
 int
-lsode_f (int *neq, double *time, double *state, double *deriv)
+lsode_f (int *neq, double *time, double *state, double *deriv, int *ierr)
 {
   int nn = *neq;
   ColumnVector tmp_deriv (nn);
 
   /*
    * NOTE: this won't work if LSODE passes copies of the state vector.
    *       In that case we have to create a temporary vector object
    *       and copy.
    */
   tmp_deriv = (*user_fun) (*tmp_x, *time);
 
-  for (int i = 0; i < nn; i++)
-    deriv [i] = tmp_deriv.elem (i);
+  if (tmp_deriv.length () == 0)
+    *ierr = -1;
+  else
+    {
+      for (int i = 0; i < nn; i++)
+	deriv [i] = tmp_deriv.elem (i);
+    }
 
   return 0;
 }
 
 int
 lsode_j (int *neq, double *time, double *state, int *ml, int *mu,
          double *pd, int *nrowpd)
 {
@@ -189,16 +200,18 @@ lsode_j (int *neq, double *time, double 
 ColumnVector
 ODE::integrate (double tout)
 {
   if (jac == NULL)
     method_flag = 22;
   else
     method_flag = 21;
 
+  integration_error = 0;
+
   double *xp = x.fortran_vec ();
 
 // NOTE: this won't work if LSODE passes copies of the state vector.
 //       In that case we have to create a temporary vector object
 //       and copy.
 
   tmp_x = &x;
   user_fun = fun;
@@ -231,35 +244,35 @@ ODE::integrate (double tout)
 
   (void) F77_FCN (lsode) (lsode_f, &n, xp, &t, &tout, &itol,
 			  &relative_tolerance, &absolute_tolerance,
 			  &itask, &istate, &iopt, rwork, &lrw, iwork,
 			  &liw, lsode_j, &method_flag);
 
   switch (istate)
     {
+    case -13: // Return requested in user-supplied function.
     case -6: // error weight became zero during problem. (solution
 	     // component i vanished, and atol or atol(i) = 0.)
-      break;
     case -5: // repeated convergence failures (perhaps bad jacobian
 	     // supplied or wrong choice of mf or tolerances).
-      break;
     case -4: // repeated error test failures (check all inputs).
-      break;
     case -3: // illegal input detected (see printed message).
-      break;
     case -2: // excess accuracy requested (tolerances too small).
+      integration_error = 1;
+      return ColumnVector ();
       break;
     case -1: // excess work done on this call (perhaps wrong mf).
       working_too_hard++;
       if (working_too_hard > 20)
 	{
 	  (*current_liboctave_error_handler)
 	    ("giving up after more than %d steps attempted in lsode",
 	     iwork[5] * 20);
+	  integration_error = 1;
 	  return ColumnVector ();
 	}
       else
 	{
 	  istate = 2;
 	  goto again;
 	}
       break;
@@ -312,16 +325,20 @@ ODE::integrate (const ColumnVector& tout
       retval.resize (n_out, n);
 
       for (int i = 0; i < n; i++)
 	retval.elem (0, i) = x.elem (i);
 
       for (int j = 1; j < n_out; j++)
 	{
 	  ColumnVector x_next = integrate (tout.elem (j));
+
+	  if (integration_error)
+	    return retval;
+
 	  for (i = 0; i < n; i++)
 	    retval.elem (j, i) = x_next.elem (i);
 	}
     }
 
   return retval;
 }
 
@@ -389,28 +406,36 @@ ODE::integrate (const ColumnVector& tout
 		  set_stop_time (next_crit);
 		  t_out = next_out;
 		  save_output = 1;
 		  i_out++;
 		}
 
 	      ColumnVector x_next = integrate (t_out);
 
+	      if (integration_error)
+		return retval;
+
 	      if (save_output)
 		{
 		  for (i = 0; i < n; i++)
 		    retval.elem (i_out-1, i) = x_next.elem (i);
 		}
 
 	      if (do_restart)
 		force_restart ();
 	    }
 	}
       else
-	retval = integrate (tout);
+	{
+	  retval = integrate (tout);
+
+	  if (integration_error)
+	    return retval;
+	}
     }
 
   return retval;
 }
 
 int
 ODE::size (void) const
 {
diff --git a/liboctave/ODE.h b/liboctave/ODE.h
--- a/liboctave/ODE.h
+++ b/liboctave/ODE.h
@@ -71,16 +71,17 @@ protected:
   double absolute_tolerance;
   double relative_tolerance;
 
   double stop_time;
   int stop_time_set;
 
 private:
 
+  int integration_error;
   int restart;
   int method_flag;
   int *iwork;
   double *rwork;
   int istate;
   int itol;
   int itask;
   int iopt;
diff --git a/src/lsode.cc b/src/lsode.cc
--- a/src/lsode.cc
+++ b/src/lsode.cc
@@ -70,27 +70,38 @@ lsode_user_function (const ColumnVector&
       double d = x.elem (0);
       tree_constant state (d);
       args[1] = state;
     }
 
   if (lsode_fcn != NULL_TREE)
     {
       tree_constant *tmp = lsode_fcn->eval (args, 3, 1, 0);
+
       delete [] args;
+
+      if (error_state)
+	{
+	  gripe_user_supplied_eval ("lsode");
+	  return retval;
+	}
+
       if (tmp != NULL_TREE_CONST && tmp[0].is_defined ())
 	{
 	  retval = tmp[0].to_vector ();
+
 	  delete [] tmp;
+
+	  if (retval.length () == 0)
+	    gripe_user_supplied_eval ("lsode");
 	}
       else
 	{
 	  delete [] tmp;
 	  gripe_user_supplied_eval ("lsode");
-	  jump_to_top_level ();
 	}
     }
 
   return retval;
 }
 
 tree_constant *
 lsode (const tree_constant *args, int nargin, int nargout)
