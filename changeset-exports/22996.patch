# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1483561420 18000
#      Wed Jan 04 15:23:40 2017 -0500
# Branch stable
# Node ID 36df0e0072a50c9075906bd86f525c1a5d46cad4
# Parent  aca714a80cfca286cc6e8225b48e87d09dd9d2b8
distinguish elements vs. bytes in fread (bug #49699)

* oct-stream.cc (get_size (double, ...)): Catch dimension overflow.
Return octave_idx_type instead of int.
(octave_stream::read): Use size_t to count bytes.  Use ptrdiff_t to
temporarily count elements, then check against octave_idx_type limits
before copying data to output array.

diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -107,33 +107,37 @@ convert_to_valid_int (const octave_value
         }
       else
         conv_err = 2;
     }
 
   return retval;
 }
 
-static int
+static octave_idx_type
 get_size (double d, const std::string& who)
 {
-  int retval = -1;
+  octave_idx_type retval = -1;
 
   if (lo_ieee_isnan (d))
     ::error ("%s: NaN is invalid as size specification", who.c_str ());
 
   if (octave::math::isinf (d))
     retval = -1;
   else
     {
       if (d < 0.0)
         ::error ("%s: negative value invalid as size specification",
                  who.c_str ());
 
-      retval = octave::math::nint (d);
+      if (d > std::numeric_limits<octave_idx_type>::max ())
+        ::error ("%s: dimension too large for Octave's index type",
+                 who.c_str ());
+
+      retval = octave::math::nint_big (d);
     }
 
   return retval;
 }
 
 static void
 get_size (const Array<double>& size, octave_idx_type& nr, octave_idx_type& nc,
           bool& one_elt_size_spec, const std::string& who)
@@ -6461,31 +6465,31 @@ octave_stream::read (const Array<double>
 
   // FIXME: we may eventually want to make this extensible.
 
   // FIXME: we need a better way to ensure that this
   // numbering stays consistent with the order of the elements in the
   // data_type enum in the oct_data_conv class.
 
   // Expose this in a future version?
-  octave_idx_type char_count = 0;
-
-  count = 0;
+  size_t char_count = 0;
+
+  ptrdiff_t tmp_count = 0;
 
   try
     {
       get_size (size, nr, nc, one_elt_size_spec, "fread");
     }
   catch (const octave::execution_exception&)
     {
       invalid_operation ("fread", "reading");
+
+      return retval;
     }
 
-  octave_idx_type elts_to_read;
-
   if (one_elt_size_spec)
     {
       // If NR == 0, Matlab returns [](0x0).
 
       // If NR > 0, the result will be a column vector with the given
       // number of rows.
 
       // If NR < 0, then we have Inf and the result will be a column
@@ -6506,17 +6510,17 @@ octave_stream::read (const Array<double>
 
       if (nr == 0 || nc == 0)
         nr = nc = 0;
     }
 
   // FIXME: Ensure that this does not overflow.
   //        Maybe try comparing nr * nc computed in double with
   //        std::numeric_limits<octave_idx_type>::max ();
-  elts_to_read = nr * nc;
+  octave_idx_type elts_to_read = nr * nc;
 
   bool read_to_eof = elts_to_read < 0;
 
   octave_idx_type input_buf_elts = -1;
 
   if (skip == 0)
     {
       if (read_to_eof)
@@ -6525,54 +6529,55 @@ octave_stream::read (const Array<double>
         input_buf_elts = elts_to_read;
     }
   else
     input_buf_elts = block_size;
 
   octave_idx_type input_elt_size
     = oct_data_conv::data_type_size (input_type);
 
-  octave_idx_type input_buf_size = input_buf_elts * input_elt_size;
+  ptrdiff_t input_buf_size
+    = static_cast<ptrdiff_t> (input_buf_elts) * input_elt_size;
 
   assert (input_buf_size >= 0);
 
   // Must also work and return correct type object
   // for 0 elements to read.
   std::istream *isp = input_stream ();
 
   if (! isp)
     error ("fread: invalid input stream");
   else
     {
       std::istream& is = *isp;
 
       std::list <void *> input_buf_list;
 
       while (is && ! is.eof ()
-             && (read_to_eof || count < elts_to_read))
+             && (read_to_eof || tmp_count < elts_to_read))
         {
           if (! read_to_eof)
             {
-              octave_idx_type remaining_elts = elts_to_read - count;
+              octave_idx_type remaining_elts = elts_to_read - tmp_count;
 
               if (remaining_elts < input_buf_elts)
                 input_buf_size = remaining_elts * input_elt_size;
             }
 
           char *input_buf = new char [input_buf_size];
 
           is.read (input_buf, input_buf_size);
 
           size_t gcount = is.gcount ();
 
           char_count += gcount;
 
           octave_idx_type nel = gcount / input_elt_size;
 
-          count += nel;
+          tmp_count += nel;
 
           input_buf_list.push_back (input_buf);
 
           if (is && skip != 0 && nel == block_size)
             {
               // Seek to skip.
               // If skip would move past EOF, position at EOF.
 
@@ -6597,40 +6602,45 @@ octave_stream::read (const Array<double>
                 break;
             }
         }
 
       if (read_to_eof)
         {
           if (nc < 0)
             {
-              nc = count / nr;
-
-              if (count % nr != 0)
+              nc = tmp_count / nr;
+
+              if (tmp_count % nr != 0)
                 nc++;
             }
           else
-            nr = count;
+            nr = tmp_count;
         }
-      else if (count == 0)
+      else if (tmp_count == 0)
         {
           nr = 0;
           nc = 0;
         }
-      else if (count != nr * nc)
+      else if (tmp_count != nr * nc)
         {
-          if (count % nr != 0)
-            nc = count / nr + 1;
+          if (tmp_count % nr != 0)
+            nc = tmp_count / nr + 1;
           else
-            nc = count / nr;
-
-          if (count < nr)
-            nr = count;
+            nc = tmp_count / nr;
+
+          if (tmp_count < nr)
+            nr = tmp_count;
         }
 
+      if (tmp_count > std::numeric_limits<octave_idx_type>::max ())
+        error ("fread: number of elements read exceeds max index size");
+      else
+        count = static_cast<octave_idx_type> (tmp_count);
+
       retval = finalize_read (input_buf_list, input_buf_elts, count,
                               nr, nc, input_type, output_type, ffmt);
     }
 
   return retval;
 }
 
 octave_idx_type
