# HG changeset patch
# User Markus MÃ¼tzel <markus.muetzel@gmx.de>
# Date 1547386276 -3600
#      Sun Jan 13 14:31:16 2019 +0100
# Branch stable
# Node ID 481ac37b0e0e48598903ae02e3b6aff0f08e7fc0
# Parent  dc02f20df07daf4f88622fd36b875e9b98efd81b
lo-sysdep.cc: Fix static analyzer detected issue (bug #55464).

* lo-sysdep.cc (putenv_wrapper): Fix use after free.

diff --git a/liboctave/system/lo-sysdep.cc b/liboctave/system/lo-sysdep.cc
--- a/liboctave/system/lo-sysdep.cc
+++ b/liboctave/system/lo-sysdep.cc
@@ -35,16 +35,17 @@ along with Octave; see the file COPYING.
 #include "unistd-wrappers.h"
 #include "unsetenv-wrapper.h"
 
 #if defined (OCTAVE_USE_WINDOWS_API)
 #  include <windows.h>
 #  include <wchar.h>
 
 #  include "lo-hash.h"
+#  include "unwind-prot.h"
 #endif
 
 namespace octave
 {
   namespace sys
   {
     std::string
     getcwd (void)
@@ -173,17 +174,18 @@ namespace octave
       if (new_item)
         sprintf (new_item, "%s=%s", name.c_str (), value.c_str ());
 
       // As far as I can see there's no way to distinguish between the
       // various errors; putenv doesn't have errno values.
 
 #if defined (OCTAVE_USE_WINDOWS_API)
       wchar_t *wnew_item = u8_to_wchar (new_item);
-      std::free (static_cast<void *> (new_item));
+      octave::unwind_protect frame;
+      frame.add_fcn (std::free, static_cast<void *> (new_item));
       if (_wputenv (wnew_item) < 0)
         (*current_liboctave_error_handler) ("putenv (%s) failed", new_item);
 #else
       if (octave_putenv_wrapper (new_item) < 0)
         (*current_liboctave_error_handler) ("putenv (%s) failed", new_item);
 #endif
     }
 
