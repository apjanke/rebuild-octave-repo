# HG changeset patch
# User jwe
# Date 811550046 0
#      Tue Sep 19 22:34:06 1995 +0000
# Node ID 5135dac6670420b39883b36b990a74385ce00e3d
# Parent  024865a7629f48aa4e29ce1f3b2e0b47de9cbd17
[project @ 1995-09-19 22:34:06 by jwe]

diff --git a/src/sighandlers.cc b/src/sighandlers.cc
--- a/src/sighandlers.cc
+++ b/src/sighandlers.cc
@@ -70,36 +70,52 @@ octave_new_handler (void)
     {
       jump_to_top_level ();
       panic_impossible ();
     }
   else
     my_friendly_exit ("operator new", 1);
 }
 
+sig_handler *
+octave_set_signal_handler (int sig, sig_handler *handler)
+{
+#if defined (HAVE_POSIX_SIGNALS)
+  struct sigaction act, oact;
+  act.sa_handler = handler;
+  act.sa_flags = 0;
+  sigemptyset (&act.sa_mask);
+  sigemptyset (&oact.sa_mask);
+  sigaction (sig, &act, &oact);
+  return oact.sa_handler;
+#else
+  return signal (sig, handler);
+#endif
+}
+
 static RETSIGTYPE
-generic_sig_handler (int i)
+generic_sig_handler (int sig)
 {
-  my_friendly_exit (sys_siglist[i], i);
+  my_friendly_exit (sys_siglist[sig], sig);
 
 #if RETSIGTYPE == void
   return;
 #else
   return 0;
 #endif
 }
 
 // Handle SIGCHLD.  Should use waitpid and ignore stopped jobs.
 // Needs to restore state of plotter such that it will be restarted
 // again when needed.  Needs to close file descriptors corresponding
 // to processes started with execute().
 
 #if 0
 static RETSIGTYPE
-sigchld_handler (int i)
+sigchld_handler (int sig)
 {
   int status;
   pid_t pid = wait (&status);
 
   if (pid < 0)
     cerr << "wait error\n";
   else
     {
@@ -119,28 +135,28 @@ sigchld_handler (int i)
 	    cerr << "child dumped core\n";
 	}
       else
 	{
 	  cerr << "exited with status = " << hi_byte << "\n";
 	}
     }
 
-  signal (SIGCHLD, sigchld_handler);
+  octave_set_signal_handler (SIGCHLD, sigchld_handler);
 }
 #endif
 
 #if defined (__alpha__)
 static RETSIGTYPE
-sigfpe_handler (int i)
+sigfpe_handler (int sig)
 {
   // Can this ever cause trouble on systems that don't forget signal
   // handlers when they are invoked?
 
-  signal (SIGFPE, sigfpe_handler);
+  octave_set_signal_handler (SIGFPE, sigfpe_handler);
 
   error ("floating point exception -- trying to return to prompt");
 
   if (can_interrupt)
     {
       jump_to_top_level ();
       panic_impossible ();
     }
@@ -154,43 +170,43 @@ sigfpe_handler (int i)
 #endif
 
 // Handle SIGINT by restarting the parser (see octave.cc).
 
 // XXX FIXME XXX -- it would probably be good to try to use POSIX
 // signal interface if it is available.
 
 static RETSIGTYPE
-sigint_handler (int i)
+sigint_handler (int sig)
 {
   // Can this ever cause trouble on systems that don't forget signal
   // handlers when they are invoked?
 
-  signal (SIGINT, sigint_handler);
+  octave_set_signal_handler (SIGINT, sigint_handler);
 
   if (can_interrupt)
     {
       jump_to_top_level ();
       panic_impossible ();
     }
 
 #if RETSIGTYPE == void
   return;
 #else
   return 0;
 #endif
 }
 
 static RETSIGTYPE
-sigpipe_handler (int i)
+sigpipe_handler (int sig)
 {
   // Can this ever cause trouble on systems that don't forget signal
   // handlers when they are invoked?
 
-  signal (SIGPIPE, sigpipe_handler);
+  octave_set_signal_handler (SIGPIPE, sigpipe_handler);
 
   if (pipe_handler_error_count++ == 0)
     message (0, "broken pipe");
 
   // Don't loop forever on account of this.
 
   if (pipe_handler_error_count  > 100)
     jump_to_top_level ();
@@ -205,119 +221,119 @@ sigpipe_handler (int i)
 // Install all the handlers for the signals we might care about.
 
 void
 install_signal_handlers (void)
 {
   set_new_handler (octave_new_handler);
 
 #ifdef SIGABRT
-  signal (SIGABRT, generic_sig_handler);
+  octave_set_signal_handler (SIGABRT, generic_sig_handler);
 #endif
 
 #ifdef SIGALRM
-  signal (SIGALRM, generic_sig_handler);
+  octave_set_signal_handler (SIGALRM, generic_sig_handler);
 #endif
 
 #ifdef SIGBUS
-  signal (SIGBUS, generic_sig_handler);
+  octave_set_signal_handler (SIGBUS, generic_sig_handler);
 #endif
 
 #if 0
 #ifdef SIGCHLD
-  signal (SIGCHLD, sigchld_handler);
+  octave_set_signal_handler (SIGCHLD, sigchld_handler);
 #endif
 #endif
 
 #ifdef SIGEMT
-  signal (SIGEMT, generic_sig_handler);
+  octave_set_signal_handler (SIGEMT, generic_sig_handler);
 #endif
 
 #ifdef SIGFPE
 #if defined (__alpha__)
-  signal (SIGFPE, sigfpe_handler);
+  octave_set_signal_handler (SIGFPE, sigfpe_handler);
 #else
-  signal (SIGFPE, generic_sig_handler);
+  octave_set_signal_handler (SIGFPE, generic_sig_handler);
 #endif
 #endif
 
 #ifdef SIGHUP
-  signal (SIGHUP, generic_sig_handler);
+  octave_set_signal_handler (SIGHUP, generic_sig_handler);
 #endif
 
 #ifdef SIGILL
-  signal (SIGILL, generic_sig_handler);
+  octave_set_signal_handler (SIGILL, generic_sig_handler);
 #endif
 
 #ifdef SIGINT
-  signal (SIGINT, sigint_handler);
+  octave_set_signal_handler (SIGINT, sigint_handler);
 #endif
 
 #ifdef SIGIOT
-  signal (SIGIOT, generic_sig_handler);
+  octave_set_signal_handler (SIGIOT, generic_sig_handler);
 #endif
 
 #ifdef SIGLOST
-  signal (SIGLOST, generic_sig_handler);
+  octave_set_signal_handler (SIGLOST, generic_sig_handler);
 #endif
 
 #ifdef SIGPIPE
-  signal (SIGPIPE, sigpipe_handler);
+  octave_set_signal_handler (SIGPIPE, sigpipe_handler);
 #endif
 
 #ifdef SIGPOLL
-  signal (SIGPOLL, SIG_IGN);
+  octave_set_signal_handler (SIGPOLL, SIG_IGN);
 #endif
 
 #ifdef SIGPROF
-  signal (SIGPROF, generic_sig_handler);
+  octave_set_signal_handler (SIGPROF, generic_sig_handler);
 #endif
 
 #ifdef SIGQUIT
-  signal (SIGQUIT, generic_sig_handler);
+  octave_set_signal_handler (SIGQUIT, generic_sig_handler);
 #endif
 
 #ifdef SIGSEGV
-  signal (SIGSEGV, generic_sig_handler);
+  octave_set_signal_handler (SIGSEGV, generic_sig_handler);
 #endif
 
 #ifdef SIGSYS
-  signal (SIGSYS, generic_sig_handler);
+  octave_set_signal_handler (SIGSYS, generic_sig_handler);
 #endif
 
 #ifdef SIGTERM
-  signal (SIGTERM, generic_sig_handler);
+  octave_set_signal_handler (SIGTERM, generic_sig_handler);
 #endif
 
 #ifdef SIGTRAP
-  signal (SIGTRAP, generic_sig_handler);
+  octave_set_signal_handler (SIGTRAP, generic_sig_handler);
 #endif
 
 #ifdef SIGUSR1
-  signal (SIGUSR1, generic_sig_handler);
+  octave_set_signal_handler (SIGUSR1, generic_sig_handler);
 #endif
 
 #ifdef SIGUSR2
-  signal (SIGUSR2, generic_sig_handler);
+  octave_set_signal_handler (SIGUSR2, generic_sig_handler);
 #endif
 
 #ifdef SIGVTALRM
-  signal (SIGVTALRM, generic_sig_handler);
+  octave_set_signal_handler (SIGVTALRM, generic_sig_handler);
 #endif
 
 #ifdef SIGIO
-  signal (SIGIO, SIG_IGN);
+  octave_set_signal_handler (SIGIO, SIG_IGN);
 #endif
 
 #ifdef SIGXCPU
-  signal (SIGXCPU, generic_sig_handler);
+  octave_set_signal_handler (SIGXCPU, generic_sig_handler);
 #endif
 
 #ifdef SIGXFSZ
-  signal (SIGXFSZ, generic_sig_handler);
+  octave_set_signal_handler (SIGXFSZ, generic_sig_handler);
 #endif
 }
 
 #ifndef HAVE_SYS_SIGLIST
 char *sys_siglist[NSIG + 1] =
 {
 #ifdef AIX
 /* AIX has changed the signals a bit */
